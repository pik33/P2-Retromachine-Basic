00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic026b.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 27
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E0 93 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 58 71 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed EC 6E 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 60 5F 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 CC 61 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 30 5D 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 30 CA 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 0C 69 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 A4 FB 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 54 23 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 0C 21 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb E4 32 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 64 56 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7B 00 00 FF 
00818     13 E4 05 F1 | 	add	objptr, ##62995
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7B 00 00 FF 
0082c     58 E4 85 F1 | 	sub	objptr, ##63064
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     98 C2 B1 FD | 	call	#__system___waitms
0083c     7B 00 00 FF 
00840     58 E4 05 F1 | 	add	objptr, ##63064
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7B 00 00 FF 
00854     58 E4 85 F1 | 	sub	objptr, ##63064
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     70 C2 B1 FD | 	call	#__system___waitms
00864     7B 00 00 FF 
00868     58 E4 05 F1 | 	add	objptr, ##63064
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7B 00 00 FF 
0087c     58 E4 85 F1 | 	sub	objptr, ##63064
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     48 C2 B1 FD | 	call	#__system___waitms
0088c     7B 00 00 FF 
00890     58 E4 05 F1 | 	add	objptr, ##63064
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7B 00 00 FF 
008a4     58 E4 85 F1 | 	sub	objptr, ##63064
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     D0 E5 05 F1 | 	add	objptr, ##62928
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     D8 E5 85 F1 | 	sub	objptr, ##62936
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     DC B7 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     2C B8 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     1C B8 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     E0 E5 05 F1 | 	add	objptr, ##62944
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     FC E5 85 F1 | 	sub	objptr, ##62972
009b0     80 B7 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     E0 E5 05 F1 | 	add	objptr, ##62944
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     FC E5 85 F1 | 	sub	objptr, ##62972
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     00 E4 05 F1 | 	add	objptr, ##44544
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     6A 00 00 FF 
00a68     60 E4 85 F1 | 	sub	objptr, ##54368
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     F0 E5 05 F1 | 	add	objptr, ##43504
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     5F 01 00 FF 
00abc     1E 16 06 F6 | 	mov	arg03, ##@LR__4597
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     57 00 00 FF 
00afc     00 E4 85 F1 | 	sub	objptr, ##44544
00b00     B0 E1 B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     E8 E0 B1 FD | 	call	#__system__LTrim_S
00b0c     57 00 00 FF 
00b10     00 E4 05 F1 | 	add	objptr, ##44544
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     5F 01 00 FF 
00b1c     1F 1E 06 F6 | 	mov	local01, ##@LR__4598
00b20     24 00 00 FF 
00b24     A8 E4 05 F1 | 	add	objptr, ##18600
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     A8 E4 85 F1 | 	sub	objptr, ##18600
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     57 00 00 FF 
00b3c     00 E4 85 F1 | 	sub	objptr, ##44544
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7B 00 00 FF 
00b5c     AC E4 05 F1 | 	add	objptr, ##63148
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7B 00 00 FF 
00b68     AC E4 85 F1 | 	sub	objptr, ##63148
00b6c     04 28 90 AD |  if_e	jmp	#LR__0149
00b70     7B 00 00 FF 
00b74     B0 E4 05 F1 | 	add	objptr, ##63152
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     B0 E4 85 F1 | 	sub	objptr, ##18608
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     57 00 00 FF 
00b90     00 E4 85 F1 | 	sub	objptr, ##44544
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     57 00 00 FF 
00bc0     00 E4 05 F1 | 	add	objptr, ##44544
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     57 00 00 FF 
00bcc     00 E4 85 F1 | 	sub	objptr, ##44544
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     60 DD B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     5F 01 00 FF 
00be4     20 14 06 F6 | 	mov	arg02, ##@LR__4599
00be8     1C BC B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7B 00 00 FF 
00bf8     B0 E4 05 F1 | 	add	objptr, ##63152
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7B 00 00 FF 
00c04     B0 E4 85 F1 | 	sub	objptr, ##63152
00c08     7B 00 00 AF 
00c0c     B0 E4 05 A1 |  if_e	add	objptr, ##63152
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7B 00 00 AF 
00c18     B0 E4 85 A1 |  if_e	sub	objptr, ##63152
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     57 00 00 FF 
00c24     00 E4 05 F1 | 	add	objptr, ##44544
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     57 00 00 FF 
00c30     00 E4 85 F1 | 	sub	objptr, ##44544
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     FC DC B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     5F 01 00 FF 
00c48     22 14 06 F6 | 	mov	arg02, ##@LR__4600
00c4c     B8 BB B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7B 00 00 AF 
00c58     B0 E4 05 A1 |  if_e	add	objptr, ##63152
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7B 00 00 AF 
00c64     B0 E4 85 A1 |  if_e	sub	objptr, ##63152
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7B 00 00 AF 
00c70     B0 E4 05 A1 |  if_e	add	objptr, ##63152
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7B 00 00 AF 
00c7c     B0 E4 85 A1 |  if_e	sub	objptr, ##63152
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     F0 E5 05 F1 | 	add	objptr, ##43504
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     C0 E4 05 F1 | 	add	objptr, ##19648
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7B 00 00 FF 
00ca8     B0 E4 85 F1 | 	sub	objptr, ##63152
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     57 00 00 FF 
00cc4     00 E4 05 F1 | 	add	objptr, ##44544
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     57 00 00 FF 
00cd0     00 E4 85 F1 | 	sub	objptr, ##44544
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     5C DC B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     5F 01 00 FF 
00ce8     24 2E 06 F6 | 	mov	local09, ##@LR__4601
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     14 BB B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     F0 E5 05 F1 | 	add	objptr, ##43504
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     F0 E5 85 F1 | 	sub	objptr, ##43504
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7B 00 00 FF 
00d34     AC E4 05 F1 | 	add	objptr, ##63148
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7B 00 00 FF 
00d40     AC E4 85 F1 | 	sub	objptr, ##63148
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7B 00 00 FF 
00d58     AC E4 05 F1 | 	add	objptr, ##63148
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7B 00 00 FF 
00d64     AC E4 85 F1 | 	sub	objptr, ##63148
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     57 00 00 FF 
00d74     00 E4 05 F1 | 	add	objptr, ##44544
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     57 00 00 FF 
00d80     00 E4 85 F1 | 	sub	objptr, ##44544
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     FC DA B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     FC DE B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     34 DE B1 FD | 	call	#__system__LTrim_S
00dc0     7B 00 00 FF 
00dc4     B4 E4 05 F1 | 	add	objptr, ##63156
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     B4 E4 85 F1 | 	sub	objptr, ##18612
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     57 00 00 FF 
00ddc     00 E4 85 F1 | 	sub	objptr, ##44544
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     38 DA B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     C0 DE B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     F8 DD B1 FD | 	call	#__system__LTrim_S
00dfc     57 00 00 FF 
00e00     00 E4 05 F1 | 	add	objptr, ##44544
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     57 00 00 FF 
00e0c     00 E4 85 F1 | 	sub	objptr, ##44544
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     5F 01 00 FF 
00e18     26 1E 06 F6 | 	mov	local01, ##@LR__4602
00e1c     7B 00 00 FF 
00e20     B4 E4 05 F1 | 	add	objptr, ##63156
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7B 00 00 FF 
00e2c     B4 E4 85 F1 | 	sub	objptr, ##63156
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     57 00 00 FF 
00e34     08 E4 05 F1 | 	add	objptr, ##44552
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     57 00 00 FF 
00e40     08 E4 85 F1 | 	sub	objptr, ##44552
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7B 00 00 FF 
00e54     B4 E4 05 F1 | 	add	objptr, ##63156
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7B 00 00 FF 
00e60     B4 E4 85 F1 | 	sub	objptr, ##63156
00e64     5F 01 00 FF 
00e68     27 14 06 F6 | 	mov	arg02, ##@LR__4603
00e6c     98 B9 B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     57 00 00 5F 
00e78     08 E4 05 51 |  if_ne	add	objptr, ##44552
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     57 00 00 5F 
00e84     08 E4 85 51 |  if_ne	sub	objptr, ##44552
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     57 00 00 FF 
00e90     08 E4 05 F1 | 	add	objptr, ##44552
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     57 00 00 FF 
00e9c     08 E4 85 F1 | 	sub	objptr, ##44552
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7B 00 00 FF 
00eb0     B4 E4 05 F1 | 	add	objptr, ##63156
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7B 00 00 FF 
00ebc     B4 E4 85 F1 | 	sub	objptr, ##63156
00ec0     5F 01 00 FF 
00ec4     28 14 06 F6 | 	mov	arg02, ##@LR__4604
00ec8     3C B9 B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     57 00 00 AF 
00ed4     08 E4 05 A1 |  if_e	add	objptr, ##44552
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     57 00 00 AF 
00ee0     08 E4 85 A1 |  if_e	sub	objptr, ##44552
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     57 00 00 FF 
00eec     08 E4 05 F1 | 	add	objptr, ##44552
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     57 00 00 FF 
00ef8     08 E4 85 F1 | 	sub	objptr, ##44552
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7B 00 00 FF 
00f08     B4 E4 05 F1 | 	add	objptr, ##63156
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7B 00 00 FF 
00f14     B4 E4 85 F1 | 	sub	objptr, ##63156
00f18     5F 01 00 FF 
00f1c     29 14 06 F6 | 	mov	arg02, ##@LR__4605
00f20     E4 B8 B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     57 00 00 5F 
00f2c     08 E4 05 51 |  if_ne	add	objptr, ##44552
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     57 00 00 5F 
00f38     08 E4 85 51 |  if_ne	sub	objptr, ##44552
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     57 00 00 FF 
00f44     08 E4 05 F1 | 	add	objptr, ##44552
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     57 00 00 FF 
00f50     08 E4 85 F1 | 	sub	objptr, ##44552
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7B 00 00 FF 
00f60     B4 E4 05 F1 | 	add	objptr, ##63156
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7B 00 00 FF 
00f6c     B4 E4 85 F1 | 	sub	objptr, ##63156
00f70     5F 01 00 FF 
00f74     2A 14 06 F6 | 	mov	arg02, ##@LR__4606
00f78     8C B8 B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     57 00 00 AF 
00f84     08 E4 05 A1 |  if_e	add	objptr, ##44552
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     57 00 00 AF 
00f90     08 E4 85 A1 |  if_e	sub	objptr, ##44552
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     57 00 00 FF 
00fb0     00 E4 05 F1 | 	add	objptr, ##44544
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     57 00 00 FF 
00fbc     00 E4 85 F1 | 	sub	objptr, ##44544
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     70 D9 B1 FD | 	call	#__system__Mid_S
00fcc     7B 00 00 FF 
00fd0     B8 E4 05 F1 | 	add	objptr, ##63160
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7B 00 00 FF 
00fe0     B8 E4 85 F1 | 	sub	objptr, ##63160
00fe4     04 2A B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7B 00 00 FF 
01010     AC E4 05 F1 | 	add	objptr, ##63148
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7B 00 00 FF 
0101c     AC E4 85 F1 | 	sub	objptr, ##63148
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7B 00 00 FF 
0106c     C0 E4 05 F1 | 	add	objptr, ##63168
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7B 00 00 FF 
010a0     C0 E4 85 F1 | 	sub	objptr, ##63168
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     57 00 00 FF 
010b4     00 E4 05 F1 | 	add	objptr, ##44544
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     C0 E4 05 F1 | 	add	objptr, ##18624
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7B 00 00 FF 
010cc     C0 E4 85 F1 | 	sub	objptr, ##63168
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     64 D8 B1 FD | 	call	#__system__Mid_S
010d8     7B 00 00 FF 
010dc     C8 E4 05 F1 | 	add	objptr, ##63176
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7B 00 00 FF 
010e8     C8 E4 85 F1 | 	sub	objptr, ##63176
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     5F 01 00 FF 
010f4     2B 14 06 F6 | 	mov	arg02, ##@LR__4607
010f8     0C B7 B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     F0 E5 05 F1 | 	add	objptr, ##43504
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     D8 E4 05 F1 | 	add	objptr, ##19672
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7B 00 00 FF 
01128     C8 E4 85 F1 | 	sub	objptr, ##63176
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     57 00 00 FF 
01138     00 E4 05 F1 | 	add	objptr, ##44544
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     C0 E4 05 F1 | 	add	objptr, ##18624
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7B 00 00 FF 
01164     C0 E4 85 F1 | 	sub	objptr, ##63168
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     C4 D7 B1 FD | 	call	#__system__Mid_S
01178     7B 00 00 FF 
0117c     C8 E4 05 F1 | 	add	objptr, ##63176
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7B 00 00 FF 
01188     C8 E4 85 F1 | 	sub	objptr, ##63176
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     5F 01 00 FF 
01194     2C 14 06 F6 | 	mov	arg02, ##@LR__4608
01198     6C B6 B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     F0 E5 05 F1 | 	add	objptr, ##43504
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     D8 E4 05 F1 | 	add	objptr, ##19672
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7B 00 00 FF 
011c8     C8 E4 85 F1 | 	sub	objptr, ##63176
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     F0 E5 05 F1 | 	add	objptr, ##43504
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     5F 01 00 FF 
011fc     2D 14 06 F6 | 	mov	arg02, ##@LR__4609
01200     54 00 00 FF 
01204     F0 E5 85 F1 | 	sub	objptr, ##43504
01208     FC B5 B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     F0 E5 05 F1 | 	add	objptr, ##43504
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     D8 E4 05 F1 | 	add	objptr, ##19672
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     D8 E4 85 F1 | 	sub	objptr, ##19672
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     F0 E5 85 F1 | 	sub	objptr, ##43504
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     C0 B5 B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     F0 E5 05 F1 | 	add	objptr, ##43504
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     F0 E5 85 F1 | 	sub	objptr, ##43504
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7B 00 00 FF 
01314     C8 E4 05 F1 | 	add	objptr, ##63176
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7B 00 00 FF 
01320     C8 E4 85 F1 | 	sub	objptr, ##63176
01324     5F 01 00 FF 
01328     2F 14 06 F6 | 	mov	arg02, ##@LR__4610
0132c     D8 B4 B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7B 00 00 FF 
01340     C8 E4 05 F1 | 	add	objptr, ##63176
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7B 00 00 FF 
0134c     C8 E4 85 F1 | 	sub	objptr, ##63176
01350     5F 01 00 FF 
01354     31 14 06 F6 | 	mov	arg02, ##@LR__4611
01358     AC B4 B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     F0 E5 05 F1 | 	add	objptr, ##43504
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     F0 E5 85 F1 | 	sub	objptr, ##43504
01398     10 D5 B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     5F 01 00 FF 
013a4     33 14 06 F6 | 	mov	arg02, ##@LR__4612
013a8     5C B4 B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     F0 E5 05 F1 | 	add	objptr, ##43504
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     F0 E5 85 F1 | 	sub	objptr, ##43504
013e0     40 D4 B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     5F 01 00 FF 
013ec     35 14 06 F6 | 	mov	arg02, ##@LR__4613
013f0     14 B4 B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     F0 E5 05 F1 | 	add	objptr, ##43504
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     F0 E5 85 F1 | 	sub	objptr, ##43504
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     28 D4 B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     A8 B3 B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     F0 E5 05 F1 | 	add	objptr, ##43504
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     F0 E5 85 F1 | 	sub	objptr, ##43504
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     F0 E5 05 F1 | 	add	objptr, ##43504
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     E0 E4 05 F1 | 	add	objptr, ##19680
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     E0 E4 85 F1 | 	sub	objptr, ##19680
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     E4 E4 05 F1 | 	add	objptr, ##19684
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7B 00 00 FF 
01594     D0 E4 85 F1 | 	sub	objptr, ##63184
01598     5F 01 00 FF 
0159c     37 14 06 F6 | 	mov	arg02, ##@LR__4614
015a0     64 B2 B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7B 00 00 FF 
015b0     D0 E4 05 F1 | 	add	objptr, ##63184
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7B 00 00 FF 
015bc     D0 E4 85 F1 | 	sub	objptr, ##63184
015c0     5F 01 00 FF 
015c4     39 14 06 F6 | 	mov	arg02, ##@LR__4615
015c8     3C B2 B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7B 00 00 FF 
015d8     D0 E4 05 F1 | 	add	objptr, ##63184
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7B 00 00 FF 
015e4     D0 E4 85 F1 | 	sub	objptr, ##63184
015e8     5F 01 00 FF 
015ec     3B 14 06 F6 | 	mov	arg02, ##@LR__4616
015f0     14 B2 B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7B 00 00 FF 
01600     D0 E4 05 F1 | 	add	objptr, ##63184
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7B 00 00 FF 
0160c     D0 E4 85 F1 | 	sub	objptr, ##63184
01610     5F 01 00 FF 
01614     3D 32 06 F6 | 	mov	local11, ##@LR__4617
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     E8 B1 B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7B 00 00 FF 
0162c     D0 E4 05 F1 | 	add	objptr, ##63184
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7B 00 00 FF 
01638     D0 E4 85 F1 | 	sub	objptr, ##63184
0163c     5F 01 00 FF 
01640     3F 30 06 F6 | 	mov	local10, ##@LR__4618
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     B8 B1 B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7B 00 00 FF 
0165c     D0 E4 05 F1 | 	add	objptr, ##63184
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7B 00 00 FF 
01668     D0 E4 85 F1 | 	sub	objptr, ##63184
0166c     5F 01 00 FF 
01670     41 30 06 F6 | 	mov	local10, ##@LR__4619
01674     18 15 02 F6 | 	mov	arg02, local10
01678     8C B1 B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7B 00 00 FF 
01688     D0 E4 05 F1 | 	add	objptr, ##63184
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7B 00 00 FF 
01694     D0 E4 85 F1 | 	sub	objptr, ##63184
01698     5F 01 00 FF 
0169c     43 36 06 F6 | 	mov	local13, ##@LR__4620
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     60 B1 B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7B 00 00 FF 
016b4     D4 E4 05 F1 | 	add	objptr, ##63188
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7B 00 00 FF 
016c0     D4 E4 85 F1 | 	sub	objptr, ##63188
016c4     5F 01 00 FF 
016c8     45 4A 06 F6 | 	mov	local23, ##@LR__4621
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     30 B1 B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7B 00 00 FF 
016e4     D0 E4 05 F1 | 	add	objptr, ##63184
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7B 00 00 FF 
016f0     D0 E4 85 F1 | 	sub	objptr, ##63184
016f4     5F 01 00 FF 
016f8     47 4A 06 F6 | 	mov	local23, ##@LR__4622
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     04 B1 B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7B 00 00 FF 
01710     D4 E4 05 F1 | 	add	objptr, ##63188
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7B 00 00 FF 
0171c     D4 E4 85 F1 | 	sub	objptr, ##63188
01720     5F 01 00 FF 
01724     49 44 06 F6 | 	mov	local20, ##@LR__4623
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     D4 B0 B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7B 00 00 FF 
01740     D0 E4 05 F1 | 	add	objptr, ##63184
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7B 00 00 FF 
0174c     D0 E4 85 F1 | 	sub	objptr, ##63184
01750     5F 01 00 FF 
01754     4B 44 06 F6 | 	mov	local20, ##@LR__4624
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     A8 B0 B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7B 00 00 FF 
0176c     D4 E4 05 F1 | 	add	objptr, ##63188
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7B 00 00 FF 
01778     D4 E4 85 F1 | 	sub	objptr, ##63188
0177c     5F 01 00 FF 
01780     4D 4C 06 F6 | 	mov	local24, ##@LR__4625
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     78 B0 B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7B 00 00 FF 
0179c     D0 E4 05 F1 | 	add	objptr, ##63184
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7B 00 00 FF 
017a8     D0 E4 85 F1 | 	sub	objptr, ##63184
017ac     5F 01 00 FF 
017b0     4F 4E 06 F6 | 	mov	local25, ##@LR__4626
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     48 B0 B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7B 00 00 FF 
017cc     D4 E4 05 F1 | 	add	objptr, ##63188
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7B 00 00 FF 
017d8     D4 E4 85 F1 | 	sub	objptr, ##63188
017dc     5F 01 00 FF 
017e0     51 50 06 F6 | 	mov	local26, ##@LR__4627
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     18 B0 B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     F0 E5 05 F1 | 	add	objptr, ##43504
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     E0 E4 05 F1 | 	add	objptr, ##19680
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7B 00 00 FF 
01824     D4 E4 85 F1 | 	sub	objptr, ##63188
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     08 B0 B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     F0 E5 05 F1 | 	add	objptr, ##43504
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     F0 E5 85 F1 | 	sub	objptr, ##43504
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     F0 E5 05 F1 | 	add	objptr, ##43504
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     F0 E5 85 F1 | 	sub	objptr, ##43504
01930     80 D3 B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     B8 D2 B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     F0 E5 05 F1 | 	add	objptr, ##43504
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     F0 E5 85 F1 | 	sub	objptr, ##43504
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     F0 E5 05 F1 | 	add	objptr, ##43504
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     F0 E5 85 F1 | 	sub	objptr, ##43504
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     F0 E5 05 F1 | 	add	objptr, ##43504
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     F0 E5 85 F1 | 	sub	objptr, ##43504
01a98     88 CD B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     5F 01 00 FF 
01aa4     53 14 06 F6 | 	mov	arg02, ##@LR__4628
01aa8     5C AD B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     F0 E5 05 F1 | 	add	objptr, ##43504
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     F0 E5 85 F1 | 	sub	objptr, ##43504
01ad8     D0 CD B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     5F 01 00 FF 
01ae4     55 14 06 F6 | 	mov	arg02, ##@LR__4629
01ae8     1C AD B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     F0 E5 05 F1 | 	add	objptr, ##43504
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     F0 E5 85 F1 | 	sub	objptr, ##43504
01b24     0C D0 B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     F0 E5 05 F1 | 	add	objptr, ##43504
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     F0 E5 85 F1 | 	sub	objptr, ##43504
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     F0 E5 05 F1 | 	add	objptr, ##43504
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     F0 E5 85 F1 | 	sub	objptr, ##43504
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     C8 17 90 AD |  if_e	jmp	#LR__0149
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     F0 E5 05 F1 | 	add	objptr, ##43504
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     F0 E5 85 F1 | 	sub	objptr, ##43504
01bc0     4C 36 B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7B 00 00 5F 
01bcc     D8 E4 05 51 |  if_ne	add	objptr, ##63192
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7B 00 00 FF 
01bd8     D8 E4 E5 F3 | 	sumnz	objptr, ##63192
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7B 00 00 AF 
01be4     D8 E4 85 A1 |  if_e	sub	objptr, ##63192
01be8     7B 00 00 FF 
01bec     D8 E4 05 F1 | 	add	objptr, ##63192
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     E8 E4 85 F1 | 	sub	objptr, ##19688
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     EC E4 05 F1 | 	add	objptr, ##19692
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     E8 E4 85 F1 | 	sub	objptr, ##19688
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     5F 01 00 FF 
01c38     57 16 06 F6 | 	mov	arg03, ##@LR__4630
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     F0 E5 85 F1 | 	sub	objptr, ##43504
01c48     20 D1 B1 FD | 	call	#__system__Instr
01c4c     7B 00 00 FF 
01c50     E0 E4 05 F1 | 	add	objptr, ##63200
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7B 00 00 FF 
01c60     E0 E4 85 F1 | 	sub	objptr, ##63200
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7B 00 00 FF 
01c70     D8 E4 05 F1 | 	add	objptr, ##63192
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     E8 E4 85 F1 | 	sub	objptr, ##19688
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     F0 E5 85 F1 | 	sub	objptr, ##43504
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7B 00 00 FF 
01cb8     E0 E4 05 F1 | 	add	objptr, ##63200
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7B 00 00 FF 
01cc4     E0 E4 85 F1 | 	sub	objptr, ##63200
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7B 00 00 FF 
01cdc     D8 E4 05 F1 | 	add	objptr, ##63192
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     E8 E4 85 F1 | 	sub	objptr, ##19688
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     E8 E4 05 F1 | 	add	objptr, ##19688
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     E8 E4 85 F1 | 	sub	objptr, ##19688
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     E8 E4 05 F1 | 	add	objptr, ##19688
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     E8 E4 85 F1 | 	sub	objptr, ##19688
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     F0 E5 85 F1 | 	sub	objptr, ##43504
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7B 00 00 FF 
01dd0     E0 E4 05 F1 | 	add	objptr, ##63200
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7B 00 00 FF 
01ddc     E0 E4 85 F1 | 	sub	objptr, ##63200
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     C0 CA B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7B 00 00 FF 
01df4     D8 E4 05 F1 | 	add	objptr, ##63192
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     E8 E4 85 F1 | 	sub	objptr, ##19688
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     F0 E4 05 F1 | 	add	objptr, ##19696
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7B 00 00 FF 
01e34     E0 E4 85 F1 | 	sub	objptr, ##63200
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     E0 C9 B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7B 00 00 FF 
01e4c     D8 E4 05 F1 | 	add	objptr, ##63192
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     E8 E4 85 F1 | 	sub	objptr, ##19688
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     F0 E5 85 F1 | 	sub	objptr, ##43504
01e74     AC C9 B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     5F 01 00 FF 
01e80     59 14 06 F6 | 	mov	arg02, ##@LR__4631
01e84     80 A9 B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7B 00 00 FF 
01e94     D8 E4 05 F1 | 	add	objptr, ##63192
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     E8 E4 85 F1 | 	sub	objptr, ##19688
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     F0 E5 85 F1 | 	sub	objptr, ##43504
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7B 00 00 FF 
01ee8     D8 E4 05 F1 | 	add	objptr, ##63192
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     E8 E4 85 F1 | 	sub	objptr, ##19688
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     E8 E4 05 F1 | 	add	objptr, ##19688
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     E8 E4 85 F1 | 	sub	objptr, ##19688
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     E8 E4 05 F1 | 	add	objptr, ##19688
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     E8 E4 85 F1 | 	sub	objptr, ##19688
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     F0 E5 85 F1 | 	sub	objptr, ##43504
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     B4 C8 B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7B 00 00 FF 
02000     D8 E4 05 F1 | 	add	objptr, ##63192
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     E8 E4 85 F1 | 	sub	objptr, ##19688
02014     F2 26 02 F1 | 	add	local05, objptr
02018     5F 01 00 FF 
0201c     5B 32 06 F6 | 	mov	local11, ##@LR__4632
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     F0 E5 85 F1 | 	sub	objptr, ##43504
0202c                 | LR__0107
0202c     7B 00 00 FF 
02030     D8 E4 05 F1 | 	add	objptr, ##63192
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     E8 E4 85 F1 | 	sub	objptr, ##19688
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     EC E4 05 F1 | 	add	objptr, ##19692
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7B 00 00 FF 
0205c     DC E4 85 F1 | 	sub	objptr, ##63196
02060     5F 01 00 FF 
02064     5D 14 06 F6 | 	mov	arg02, ##@LR__4633
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     98 A7 B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7B 00 00 FF 
0207c     DC E4 05 F1 | 	add	objptr, ##63196
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7B 00 00 FF 
02088     DC E4 85 F1 | 	sub	objptr, ##63196
0208c     5F 01 00 FF 
02090     63 14 06 F6 | 	mov	arg02, ##@LR__4634
02094     70 A7 B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7B 00 00 FF 
020a4     DC E4 05 F1 | 	add	objptr, ##63196
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7B 00 00 FF 
020b0     DC E4 85 F1 | 	sub	objptr, ##63196
020b4     5F 01 00 FF 
020b8     6A 14 06 F6 | 	mov	arg02, ##@LR__4635
020bc     48 A7 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7B 00 00 FF 
020cc     D8 E4 05 F1 | 	add	objptr, ##63192
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     E8 E4 85 F1 | 	sub	objptr, ##19688
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     F0 E5 85 F1 | 	sub	objptr, ##43504
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7B 00 00 FF 
02118     D8 E4 05 F1 | 	add	objptr, ##63192
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     E8 E4 85 F1 | 	sub	objptr, ##19688
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     5F 01 00 FF 
0213c     70 14 06 F6 | 	mov	arg02, ##@LR__4636
02140     54 00 00 FF 
02144     F0 E5 85 F1 | 	sub	objptr, ##43504
02148     BC A6 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7B 00 00 FF 
02158     D8 E4 05 F1 | 	add	objptr, ##63192
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     E8 E4 85 F1 | 	sub	objptr, ##19688
02170     F2 26 02 F1 | 	add	local05, objptr
02174     5F 01 00 FF 
02178     73 32 06 F6 | 	mov	local11, ##@LR__4637
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     E8 E4 05 F1 | 	add	objptr, ##19688
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     E8 E4 85 F1 | 	sub	objptr, ##19688
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     F0 E5 85 F1 | 	sub	objptr, ##43504
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7B 00 00 FF 
021b8     D8 E4 05 F1 | 	add	objptr, ##63192
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     E8 E4 85 F1 | 	sub	objptr, ##19688
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     5F 01 00 FF 
021e0     75 14 06 F6 | 	mov	arg02, ##@LR__4638
021e4     54 00 00 FF 
021e8     F0 E5 85 F1 | 	sub	objptr, ##43504
021ec     18 A6 B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7B 00 00 FF 
021fc     D8 E4 05 F1 | 	add	objptr, ##63192
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     E8 E4 85 F1 | 	sub	objptr, ##19688
02214     F2 26 02 F1 | 	add	local05, objptr
02218     5F 01 00 FF 
0221c     79 32 06 F6 | 	mov	local11, ##@LR__4639
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     E8 E4 05 F1 | 	add	objptr, ##19688
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     E8 E4 85 F1 | 	sub	objptr, ##19688
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     F0 E5 85 F1 | 	sub	objptr, ##43504
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7B 00 00 FF 
02260     DC E4 05 F1 | 	add	objptr, ##63196
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7B 00 00 FF 
0226c     DC E4 85 F1 | 	sub	objptr, ##63196
02270     5F 01 00 FF 
02274     7B 14 06 F6 | 	mov	arg02, ##@LR__4640
02278     8C A5 B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7B 00 00 FF 
02288     DC E4 05 F1 | 	add	objptr, ##63196
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7B 00 00 FF 
02294     DC E4 85 F1 | 	sub	objptr, ##63196
02298     5F 01 00 FF 
0229c     80 14 06 F6 | 	mov	arg02, ##@LR__4641
022a0     64 A5 B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7B 00 00 FF 
022b0     D8 E4 05 F1 | 	add	objptr, ##63192
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     E8 E4 85 F1 | 	sub	objptr, ##19688
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     5F 01 00 FF 
022d4     83 14 06 F6 | 	mov	arg02, ##@LR__4642
022d8     54 00 00 FF 
022dc     F0 E5 85 F1 | 	sub	objptr, ##43504
022e0     24 A5 B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7B 00 00 FF 
022f0     D8 E4 05 F1 | 	add	objptr, ##63192
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     E8 E4 85 F1 | 	sub	objptr, ##19688
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     5F 01 00 FF 
02310     89 32 06 F6 | 	mov	local11, ##@LR__4643
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     F0 E5 85 F1 | 	sub	objptr, ##43504
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7B 00 00 FF 
02324     D8 E4 05 F1 | 	add	objptr, ##63192
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     E8 E4 85 F1 | 	sub	objptr, ##19688
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     5F 01 00 FF 
02348     8B 14 06 F6 | 	mov	arg02, ##@LR__4644
0234c     54 00 00 FF 
02350     F0 E5 85 F1 | 	sub	objptr, ##43504
02354     B0 A4 B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7B 00 00 FF 
02364     D8 E4 05 F1 | 	add	objptr, ##63192
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     E8 E4 85 F1 | 	sub	objptr, ##19688
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     5F 01 00 FF 
02384     94 32 06 F6 | 	mov	local11, ##@LR__4645
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     F0 E5 85 F1 | 	sub	objptr, ##43504
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7B 00 00 FF 
02398     D8 E4 05 F1 | 	add	objptr, ##63192
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     E8 E4 85 F1 | 	sub	objptr, ##19688
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     5F 01 00 FF 
023bc     96 14 06 F6 | 	mov	arg02, ##@LR__4646
023c0     54 00 00 FF 
023c4     F0 E5 85 F1 | 	sub	objptr, ##43504
023c8     3C A4 B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7B 00 00 FF 
023d8     D8 E4 05 F1 | 	add	objptr, ##63192
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     E8 E4 85 F1 | 	sub	objptr, ##19688
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     5F 01 00 FF 
023f8     9F 32 06 F6 | 	mov	local11, ##@LR__4647
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     F0 E5 85 F1 | 	sub	objptr, ##43504
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7B 00 00 FF 
0240c     D8 E4 05 F1 | 	add	objptr, ##63192
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     E8 E4 85 F1 | 	sub	objptr, ##19688
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     5F 01 00 FF 
02430     A1 14 06 F6 | 	mov	arg02, ##@LR__4648
02434     54 00 00 FF 
02438     F0 E5 85 F1 | 	sub	objptr, ##43504
0243c     C8 A3 B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7B 00 00 FF 
0244c     D8 E4 05 F1 | 	add	objptr, ##63192
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     E8 E4 85 F1 | 	sub	objptr, ##19688
02464     F2 26 02 F1 | 	add	local05, objptr
02468     5F 01 00 FF 
0246c     AA 32 06 F6 | 	mov	local11, ##@LR__4649
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     F0 E5 85 F1 | 	sub	objptr, ##43504
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7B 00 00 FF 
02480     D8 E4 05 F1 | 	add	objptr, ##63192
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     E8 E4 85 F1 | 	sub	objptr, ##19688
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     5F 01 00 FF 
024a8     AC 14 06 F6 | 	mov	arg02, ##@LR__4650
024ac     54 00 00 FF 
024b0     F0 E5 85 F1 | 	sub	objptr, ##43504
024b4     50 A3 B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7B 00 00 FF 
024c4     D8 E4 05 F1 | 	add	objptr, ##63192
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     E8 E4 85 F1 | 	sub	objptr, ##19688
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     5F 01 00 FF 
024e4     AF 32 06 F6 | 	mov	local11, ##@LR__4651
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     F0 E5 85 F1 | 	sub	objptr, ##43504
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     74 06 90 3D |  if_ae	jmp	#LR__0129
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     F0 E5 05 F1 | 	add	objptr, ##43504
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 31 02 F6 | 	mov	local10, local03
0251c     18 35 02 F6 | 	mov	local12, local10
02520     03 34 66 F0 | 	shl	local12, #3
02524     F2 4A 02 F6 | 	mov	local23, objptr
02528     F2 34 02 F1 | 	add	local12, objptr
0252c     1A 13 02 FB | 	rdlong	arg01, local12
02530     54 00 00 FF 
02534     F0 E5 85 F1 | 	sub	objptr, ##43504
02538     B0 14 B0 FD | 	call	#_isseparator
0253c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02540     04 2E 06 F1 | 	add	local09, #4
02544     17 FB 61 FC | 	wrlong	result1, local09
02548                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02548     11 2F 02 F6 | 	mov	local09, local03
0254c     03 2E 66 F0 | 	shl	local09, #3
02550     54 00 00 FF 
02554     F0 E5 05 F1 | 	add	objptr, ##43504
02558     F2 2E 02 F1 | 	add	local09, objptr
0255c     04 2E 06 F1 | 	add	local09, #4
02560     17 33 02 FB | 	rdlong	local11, local09
02564     01 32 56 F2 | 	cmps	local11, #1 wc
02568     54 00 00 FF 
0256c     F0 E5 85 F1 | 	sub	objptr, ##43504
02570     FC 05 90 3D |  if_ae	jmp	#LR__0128
02574     11 2F 02 F6 | 	mov	local09, local03
02578     03 2E 66 F0 | 	shl	local09, #3
0257c     54 00 00 FF 
02580     F0 E5 05 F1 | 	add	objptr, ##43504
02584     F2 2E 02 F1 | 	add	local09, objptr
02588     11 31 02 F6 | 	mov	local10, local03
0258c     18 35 02 F6 | 	mov	local12, local10
02590     03 34 66 F0 | 	shl	local12, #3
02594     F2 4A 02 F6 | 	mov	local23, objptr
02598     F2 34 02 F1 | 	add	local12, objptr
0259c     1A 13 02 FB | 	rdlong	arg01, local12
025a0     54 00 00 FF 
025a4     F0 E5 85 F1 | 	sub	objptr, ##43504
025a8     F4 0D B0 FD | 	call	#_isoperator
025ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
025b0     04 2E 06 F1 | 	add	local09, #4
025b4     17 FB 61 FC | 	wrlong	result1, local09
025b8                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b8     11 2F 02 F6 | 	mov	local09, local03
025bc     03 2E 66 F0 | 	shl	local09, #3
025c0     54 00 00 FF 
025c4     F0 E5 05 F1 | 	add	objptr, ##43504
025c8     F2 2E 02 F1 | 	add	local09, objptr
025cc     04 2E 06 F1 | 	add	local09, #4
025d0     17 33 02 FB | 	rdlong	local11, local09
025d4     01 32 56 F2 | 	cmps	local11, #1 wc
025d8     54 00 00 FF 
025dc     F0 E5 85 F1 | 	sub	objptr, ##43504
025e0     8C 05 90 3D |  if_ae	jmp	#LR__0128
025e4     11 2F 02 F6 | 	mov	local09, local03
025e8     03 2E 66 F0 | 	shl	local09, #3
025ec     54 00 00 FF 
025f0     F0 E5 05 F1 | 	add	objptr, ##43504
025f4     F2 2E 02 F1 | 	add	local09, objptr
025f8     11 31 02 F6 | 	mov	local10, local03
025fc     18 35 02 F6 | 	mov	local12, local10
02600     03 34 66 F0 | 	shl	local12, #3
02604     F2 4A 02 F6 | 	mov	local23, objptr
02608     F2 34 02 F1 | 	add	local12, objptr
0260c     1A 13 02 FB | 	rdlong	arg01, local12
02610     54 00 00 FF 
02614     F0 E5 85 F1 | 	sub	objptr, ##43504
02618                 | ' 
02618                 | ' select case s
02618     5F 01 00 FF 
0261c     90 15 06 F6 | 	mov	arg02, ##@LR__4722
02620     E4 A1 B1 FD | 	call	#__system___string_cmp
02624     00 FA 0D F2 | 	cmp	result1, #0 wz
02628     1B FA 05 A6 |  if_e	mov	result1, #27
0262c     00 FA 05 56 |  if_ne	mov	result1, #0
02630     FD FA E1 F8 | 	getbyte	result1, result1, #0
02634     04 2E 06 F1 | 	add	local09, #4
02638     17 FB 61 FC | 	wrlong	result1, local09
0263c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
0263c     11 2F 02 F6 | 	mov	local09, local03
02640     03 2E 66 F0 | 	shl	local09, #3
02644     54 00 00 FF 
02648     F0 E5 05 F1 | 	add	objptr, ##43504
0264c     F2 2E 02 F1 | 	add	local09, objptr
02650     04 2E 06 F1 | 	add	local09, #4
02654     17 33 02 FB | 	rdlong	local11, local09
02658     01 32 56 F2 | 	cmps	local11, #1 wc
0265c     54 00 00 FF 
02660     F0 E5 85 F1 | 	sub	objptr, ##43504
02664     08 05 90 3D |  if_ae	jmp	#LR__0128
02668     11 2F 02 F6 | 	mov	local09, local03
0266c     03 2E 66 F0 | 	shl	local09, #3
02670     54 00 00 FF 
02674     F0 E5 05 F1 | 	add	objptr, ##43504
02678     F2 2E 02 F1 | 	add	local09, objptr
0267c     11 31 02 F6 | 	mov	local10, local03
02680     18 35 02 F6 | 	mov	local12, local10
02684     03 34 66 F0 | 	shl	local12, #3
02688     F2 4A 02 F6 | 	mov	local23, objptr
0268c     F2 34 02 F1 | 	add	local12, objptr
02690     1A 13 02 FB | 	rdlong	arg01, local12
02694     54 00 00 FF 
02698     F0 E5 85 F1 | 	sub	objptr, ##43504
0269c     4C 15 B0 FD | 	call	#_iscommand
026a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
026a4     04 2E 06 F1 | 	add	local09, #4
026a8     17 FB 61 FC | 	wrlong	result1, local09
026ac                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
026ac     11 2F 02 F6 | 	mov	local09, local03
026b0     03 2E 66 F0 | 	shl	local09, #3
026b4     54 00 00 FF 
026b8     F0 E5 05 F1 | 	add	objptr, ##43504
026bc     F2 2E 02 F1 | 	add	local09, objptr
026c0     04 2E 06 F1 | 	add	local09, #4
026c4     17 33 02 FB | 	rdlong	local11, local09
026c8     01 32 56 F2 | 	cmps	local11, #1 wc
026cc     54 00 00 FF 
026d0     F0 E5 85 F1 | 	sub	objptr, ##43504
026d4     98 04 90 3D |  if_ae	jmp	#LR__0128
026d8     11 2F 02 F6 | 	mov	local09, local03
026dc     03 2E 66 F0 | 	shl	local09, #3
026e0     54 00 00 FF 
026e4     F0 E5 05 F1 | 	add	objptr, ##43504
026e8     F2 2E 02 F1 | 	add	local09, objptr
026ec     11 31 02 F6 | 	mov	local10, local03
026f0     18 35 02 F6 | 	mov	local12, local10
026f4     03 34 66 F0 | 	shl	local12, #3
026f8     F2 4A 02 F6 | 	mov	local23, objptr
026fc     F2 34 02 F1 | 	add	local12, objptr
02700     1A 13 02 FB | 	rdlong	arg01, local12
02704     54 00 00 FF 
02708     F0 E5 85 F1 | 	sub	objptr, ##43504
0270c     5C 20 B0 FD | 	call	#_isfunction
02710     FD FA E1 F8 | 	getbyte	result1, result1, #0
02714     04 2E 06 F1 | 	add	local09, #4
02718     17 FB 61 FC | 	wrlong	result1, local09
0271c                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
0271c     11 2F 02 F6 | 	mov	local09, local03
02720     03 2E 66 F0 | 	shl	local09, #3
02724     54 00 00 FF 
02728     F0 E5 05 F1 | 	add	objptr, ##43504
0272c     F2 2E 02 F1 | 	add	local09, objptr
02730     04 2E 06 F1 | 	add	local09, #4
02734     17 33 02 FB | 	rdlong	local11, local09
02738     01 32 56 F2 | 	cmps	local11, #1 wc
0273c     54 00 00 FF 
02740     F0 E5 85 F1 | 	sub	objptr, ##43504
02744     28 04 90 3D |  if_ae	jmp	#LR__0128
02748     11 2F 02 F6 | 	mov	local09, local03
0274c     03 2E 66 F0 | 	shl	local09, #3
02750     54 00 00 FF 
02754     F0 E5 05 F1 | 	add	objptr, ##43504
02758     F2 2E 02 F1 | 	add	local09, objptr
0275c     11 31 02 F6 | 	mov	local10, local03
02760     18 37 02 F6 | 	mov	local13, local10
02764     03 36 66 F0 | 	shl	local13, #3
02768     F2 34 02 F6 | 	mov	local12, objptr
0276c     F2 36 02 F1 | 	add	local13, objptr
02770     1B 13 02 FB | 	rdlong	arg01, local13
02774     54 00 00 FF 
02778     F0 E5 85 F1 | 	sub	objptr, ##43504
0277c     00 0F B0 FD | 	call	#_isnotename
02780     04 2E 06 F1 | 	add	local09, #4
02784     17 FB 61 FC | 	wrlong	result1, local09
02788                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02788                 | ' if lparts(i).token>0 then 
02788     11 2F 02 F6 | 	mov	local09, local03
0278c     03 2E 66 F0 | 	shl	local09, #3
02790     54 00 00 FF 
02794     F0 E5 05 F1 | 	add	objptr, ##43504
02798     F2 2E 02 F1 | 	add	local09, objptr
0279c     04 2E 06 F1 | 	add	local09, #4
027a0     17 33 02 FB | 	rdlong	local11, local09
027a4     01 32 56 F2 | 	cmps	local11, #1 wc
027a8     54 00 00 FF 
027ac     F0 E5 85 F1 | 	sub	objptr, ##43504
027b0     88 00 90 CD |  if_b	jmp	#LR__0120
027b4     11 27 02 F6 | 	mov	local05, local03
027b8     03 26 66 F0 | 	shl	local05, #3
027bc     54 00 00 FF 
027c0     F0 E5 05 F1 | 	add	objptr, ##43504
027c4     F2 26 02 F1 | 	add	local05, objptr
027c8     04 26 06 F1 | 	add	local05, #4
027cc     13 33 02 FB | 	rdlong	local11, local05
027d0     19 13 02 F6 | 	mov	arg01, local11
027d4     54 00 00 FF 
027d8     F0 E5 85 F1 | 	sub	objptr, ##43504
027dc     60 64 B1 FD | 	call	#_getnoteval
027e0     FD 62 02 F6 | 	mov	local35, result1
027e4     11 2F 02 F6 | 	mov	local09, local03
027e8     03 2E 66 F0 | 	shl	local09, #3
027ec     54 00 00 FF 
027f0     F0 E5 05 F1 | 	add	objptr, ##43504
027f4     F2 2E 02 F1 | 	add	local09, objptr
027f8     31 13 02 F6 | 	mov	arg01, local35
027fc     54 00 00 FF 
02800     F0 E5 85 F1 | 	sub	objptr, ##43504
02804     14 C2 B1 FD | 	call	#__system__str_S
02808     17 FB 61 FC | 	wrlong	result1, local09
0280c     11 25 02 F6 | 	mov	local04, local03
02810     12 2F 02 F6 | 	mov	local09, local04
02814     03 2E 66 F0 | 	shl	local09, #3
02818     54 00 00 FF 
0281c     F0 E5 05 F1 | 	add	objptr, ##43504
02820     F2 2E 02 F1 | 	add	local09, objptr
02824     04 2E 06 F1 | 	add	local09, #4
02828     01 00 80 FF 
0282c     17 05 68 FC | 	wrlong	##514, local09
02830     54 00 00 FF 
02834     F0 E5 85 F1 | 	sub	objptr, ##43504
02838     34 03 90 FD | 	jmp	#LR__0128
0283c                 | LR__0120
0283c     11 27 02 F6 | 	mov	local05, local03
02840     03 26 66 F0 | 	shl	local05, #3
02844     54 00 00 FF 
02848     F0 E5 05 F1 | 	add	objptr, ##43504
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     54 00 00 FF 
02858     F0 E5 85 F1 | 	sub	objptr, ##43504
0285c     80 25 B0 FD | 	call	#_isnum
02860     FD 1E 02 F6 | 	mov	local01, result1
02864     7B 00 00 FF 
02868     E4 E4 05 F1 | 	add	objptr, ##63204
0286c     F2 1E 62 FC | 	wrlong	local01, objptr
02870     11 27 02 F6 | 	mov	local05, local03
02874     03 26 66 F0 | 	shl	local05, #3
02878     26 00 00 FF 
0287c     F4 E4 85 F1 | 	sub	objptr, ##19700
02880     F2 26 02 F1 | 	add	local05, objptr
02884     13 13 02 FB | 	rdlong	arg01, local05
02888     54 00 00 FF 
0288c     F0 E5 85 F1 | 	sub	objptr, ##43504
02890     24 28 B0 FD | 	call	#_isint
02894     FD 1E 02 F6 | 	mov	local01, result1
02898     7B 00 00 FF 
0289c     E8 E4 05 F1 | 	add	objptr, ##63208
028a0     F2 1E 62 FC | 	wrlong	local01, objptr
028a4     11 27 02 F6 | 	mov	local05, local03
028a8     03 26 66 F0 | 	shl	local05, #3
028ac     26 00 00 FF 
028b0     F8 E4 85 F1 | 	sub	objptr, ##19704
028b4     F2 28 02 F6 | 	mov	local06, objptr
028b8     F2 26 02 F1 | 	add	local05, objptr
028bc     13 13 02 FB | 	rdlong	arg01, local05
028c0     54 00 00 FF 
028c4     F0 E5 85 F1 | 	sub	objptr, ##43504
028c8     44 29 B0 FD | 	call	#_isdec
028cc     7B 00 00 FF 
028d0     EC E4 05 F1 | 	add	objptr, ##63212
028d4     F2 FA 61 FC | 	wrlong	result1, objptr
028d8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028d8     08 E4 85 F1 | 	sub	objptr, #8
028dc     F2 1E 0A FB | 	rdlong	local01, objptr wz
028e0     7B 00 00 FF 
028e4     E4 E4 85 F1 | 	sub	objptr, ##63204
028e8     60 00 90 AD |  if_e	jmp	#LR__0121
028ec     7B 00 00 FF 
028f0     E8 E4 05 F1 | 	add	objptr, ##63208
028f4     F2 2E 0A FB | 	rdlong	local09, objptr wz
028f8     7B 00 00 FF 
028fc     E8 E4 85 F1 | 	sub	objptr, ##63208
02900     48 00 90 AD |  if_e	jmp	#LR__0121
02904     7B 00 00 FF 
02908     EC E4 05 F1 | 	add	objptr, ##63212
0290c     F2 32 0A FB | 	rdlong	local11, objptr wz
02910     7B 00 00 FF 
02914     EC E4 85 F1 | 	sub	objptr, ##63212
02918     30 00 90 AD |  if_e	jmp	#LR__0121
0291c     11 25 02 F6 | 	mov	local04, local03
02920     12 2F 02 F6 | 	mov	local09, local04
02924     03 2E 66 F0 | 	shl	local09, #3
02928     54 00 00 FF 
0292c     F0 E5 05 F1 | 	add	objptr, ##43504
02930     F2 2E 02 F1 | 	add	local09, objptr
02934     04 2E 06 F1 | 	add	local09, #4
02938     01 00 80 FF 
0293c     17 01 68 FC | 	wrlong	##512, local09
02940     54 00 00 FF 
02944     F0 E5 85 F1 | 	sub	objptr, ##43504
02948     24 02 90 FD | 	jmp	#LR__0128
0294c                 | LR__0121
0294c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
0294c     7B 00 00 FF 
02950     E4 E4 05 F1 | 	add	objptr, ##63204
02954     F2 1E 0A FB | 	rdlong	local01, objptr wz
02958     7B 00 00 FF 
0295c     E4 E4 85 F1 | 	sub	objptr, ##63204
02960     64 00 90 AD |  if_e	jmp	#LR__0122
02964     7B 00 00 FF 
02968     E8 E4 05 F1 | 	add	objptr, ##63208
0296c     F2 2E 0A FB | 	rdlong	local09, objptr wz
02970     7B 00 00 FF 
02974     E8 E4 85 F1 | 	sub	objptr, ##63208
02978     7B 00 00 5F 
0297c     EC E4 05 51 |  if_ne	add	objptr, ##63212
02980     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02984     7B 00 00 5F 
02988     EC E4 85 51 |  if_ne	sub	objptr, ##63212
0298c     19 29 22 56 |  if_ne	not	local06, local11
02990     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02994     30 00 90 AD |  if_e	jmp	#LR__0122
02998     11 25 02 F6 | 	mov	local04, local03
0299c     12 2F 02 F6 | 	mov	local09, local04
029a0     03 2E 66 F0 | 	shl	local09, #3
029a4     54 00 00 FF 
029a8     F0 E5 05 F1 | 	add	objptr, ##43504
029ac     F2 2E 02 F1 | 	add	local09, objptr
029b0     04 2E 06 F1 | 	add	local09, #4
029b4     01 00 80 FF 
029b8     17 03 68 FC | 	wrlong	##513, local09
029bc     54 00 00 FF 
029c0     F0 E5 85 F1 | 	sub	objptr, ##43504
029c4     A8 01 90 FD | 	jmp	#LR__0128
029c8                 | LR__0122
029c8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
029c8     7B 00 00 FF 
029cc     E4 E4 05 F1 | 	add	objptr, ##63204
029d0     F2 1E 0A FB | 	rdlong	local01, objptr wz
029d4     7B 00 00 FF 
029d8     E4 E4 85 F1 | 	sub	objptr, ##63204
029dc     7B 00 00 5F 
029e0     E8 E4 05 51 |  if_ne	add	objptr, ##63208
029e4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029e8     7B 00 00 5F 
029ec     E8 E4 85 51 |  if_ne	sub	objptr, ##63208
029f0     17 2F 22 56 |  if_ne	not	local09, local09
029f4     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029f8     7B 00 00 5F 
029fc     EC E4 05 51 |  if_ne	add	objptr, ##63212
02a00     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02a04     7B 00 00 5F 
02a08     EC E4 85 51 |  if_ne	sub	objptr, ##63212
02a0c     19 29 22 56 |  if_ne	not	local06, local11
02a10     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02a14     30 00 90 AD |  if_e	jmp	#LR__0123
02a18     11 25 02 F6 | 	mov	local04, local03
02a1c     12 2F 02 F6 | 	mov	local09, local04
02a20     03 2E 66 F0 | 	shl	local09, #3
02a24     54 00 00 FF 
02a28     F0 E5 05 F1 | 	add	objptr, ##43504
02a2c     F2 2E 02 F1 | 	add	local09, objptr
02a30     04 2E 06 F1 | 	add	local09, #4
02a34     01 00 80 FF 
02a38     17 05 68 FC | 	wrlong	##514, local09
02a3c     54 00 00 FF 
02a40     F0 E5 85 F1 | 	sub	objptr, ##43504
02a44     28 01 90 FD | 	jmp	#LR__0128
02a48                 | LR__0123
02a48                 | ' 
02a48                 | ' if isstring(lparts(i).part$) then 
02a48     11 27 02 F6 | 	mov	local05, local03
02a4c     03 26 66 F0 | 	shl	local05, #3
02a50     54 00 00 FF 
02a54     F0 E5 05 F1 | 	add	objptr, ##43504
02a58     F2 26 02 F1 | 	add	local05, objptr
02a5c     13 13 02 FB | 	rdlong	arg01, local05
02a60     54 00 00 FF 
02a64     F0 E5 85 F1 | 	sub	objptr, ##43504
02a68     64 28 B0 FD | 	call	#_isstring
02a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02a70     A0 00 90 AD |  if_e	jmp	#LR__0126
02a74     11 2F 02 F6 | 	mov	local09, local03
02a78     03 2E 66 F0 | 	shl	local09, #3
02a7c     54 00 00 FF 
02a80     F0 E5 05 F1 | 	add	objptr, ##43504
02a84     F2 2E 02 F1 | 	add	local09, objptr
02a88     04 2E 06 F1 | 	add	local09, #4
02a8c     01 00 80 FF 
02a90     17 07 68 FC | 	wrlong	##515, local09
02a94     11 25 02 F6 | 	mov	local04, local03
02a98     12 2F 02 F6 | 	mov	local09, local04
02a9c     03 2E 66 F0 | 	shl	local09, #3
02aa0     F2 2E 02 F1 | 	add	local09, objptr
02aa4     11 37 02 F6 | 	mov	local13, local03
02aa8     03 36 66 F0 | 	shl	local13, #3
02aac     F2 36 02 F1 | 	add	local13, objptr
02ab0     1B 29 02 FB | 	rdlong	local06, local13
02ab4     02 32 06 F6 | 	mov	local11, #2
02ab8     11 4B 02 F6 | 	mov	local23, local03
02abc     25 43 02 F6 | 	mov	local19, local23
02ac0     21 45 02 F6 | 	mov	local20, local19
02ac4     03 44 66 F0 | 	shl	local20, #3
02ac8     F2 46 02 F6 | 	mov	local21, objptr
02acc     F2 44 02 F1 | 	add	local20, objptr
02ad0     22 13 02 FB | 	rdlong	arg01, local20
02ad4     54 00 00 FF 
02ad8     F0 E5 85 F1 | 	sub	objptr, ##43504
02adc     09 2B 02 F6 | 	mov	local07, arg01
02ae0     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ae4                 | LR__0124
02ae4     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ae8     01 2A 06 51 |  if_ne	add	local07, #1
02aec     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02af0                 | LR__0125
02af0     09 2B 82 F1 | 	sub	local07, arg01
02af4     15 31 02 F6 | 	mov	local10, local07
02af8     02 30 86 F1 | 	sub	local10, #2
02afc     14 13 02 F6 | 	mov	arg01, local06
02b00     19 15 02 F6 | 	mov	arg02, local11
02b04     18 17 02 F6 | 	mov	arg03, local10
02b08     30 BE B1 FD | 	call	#__system__Mid_S
02b0c     17 FB 61 FC | 	wrlong	result1, local09
02b10     5C 00 90 FD | 	jmp	#LR__0128
02b14                 | LR__0126
02b14                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02b14     11 25 02 F6 | 	mov	local04, local03
02b18     12 27 02 F6 | 	mov	local05, local04
02b1c     03 26 66 F0 | 	shl	local05, #3
02b20     54 00 00 FF 
02b24     F0 E5 05 F1 | 	add	objptr, ##43504
02b28     F2 26 02 F1 | 	add	local05, objptr
02b2c     13 13 02 FB | 	rdlong	arg01, local05
02b30     54 00 00 FF 
02b34     F0 E5 85 F1 | 	sub	objptr, ##43504
02b38     30 20 B0 FD | 	call	#_isname
02b3c     00 FA 4D F2 | 	cmps	result1, #0 wz
02b40     2C 00 90 AD |  if_e	jmp	#LR__0127
02b44     11 25 02 F6 | 	mov	local04, local03
02b48     12 2F 02 F6 | 	mov	local09, local04
02b4c     03 2E 66 F0 | 	shl	local09, #3
02b50     54 00 00 FF 
02b54     F0 E5 05 F1 | 	add	objptr, ##43504
02b58     F2 2E 02 F1 | 	add	local09, objptr
02b5c     04 2E 06 F1 | 	add	local09, #4
02b60     01 00 80 FF 
02b64     17 09 68 FC | 	wrlong	##516, local09
02b68     54 00 00 FF 
02b6c     F0 E5 85 F1 | 	sub	objptr, ##43504
02b70                 | LR__0127
02b70                 | LR__0128
02b70     01 22 06 F1 | 	add	local03, #1
02b74     84 F9 9F FD | 	jmp	#LR__0119
02b78                 | LR__0129
02b78     1D 2F 02 F6 | 	mov	local09, local15
02b7c     03 2E 66 F0 | 	shl	local09, #3
02b80     54 00 00 FF 
02b84     F0 E5 05 F1 | 	add	objptr, ##43504
02b88     F2 2E 02 F1 | 	add	local09, objptr
02b8c     04 2E 06 F1 | 	add	local09, #4
02b90     17 FD 6B FC | 	wrlong	#510, local09
02b94     1D 2F 02 F6 | 	mov	local09, local15
02b98     03 2E 66 F0 | 	shl	local09, #3
02b9c     F2 26 02 F6 | 	mov	local05, objptr
02ba0     F2 2E 02 F1 | 	add	local09, objptr
02ba4     5F 01 00 FF 
02ba8     B1 28 06 F6 | 	mov	local06, ##@LR__4652
02bac     17 29 62 FC | 	wrlong	local06, local09
02bb0     10 00 00 FF 
02bb4     54 E4 05 F1 | 	add	objptr, ##8276
02bb8     F2 3A 62 FC | 	wrlong	local15, objptr
02bbc                 | ' 
02bbc                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02bbc                 | ' 
02bbc                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02bbc                 | '  
02bbc                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02bbc     16 00 00 FF 
02bc0     98 E4 05 F1 | 	add	objptr, ##11416
02bc4     F2 12 02 FB | 	rdlong	arg01, objptr
02bc8     7B 00 00 FF 
02bcc     DC E4 85 F1 | 	sub	objptr, ##63196
02bd0     5F 01 00 FF 
02bd4     B2 2E 06 F6 | 	mov	local09, ##@LR__4653
02bd8     17 15 02 F6 | 	mov	arg02, local09
02bdc     28 9C B1 FD | 	call	#__system___string_cmp
02be0     00 FA 0D F2 | 	cmp	result1, #0 wz
02be4     1C 01 90 AD |  if_e	jmp	#LR__0130
02be8     7B 00 00 FF 
02bec     DC E4 05 F1 | 	add	objptr, ##63196
02bf0     F2 12 02 FB | 	rdlong	arg01, objptr
02bf4     7B 00 00 FF 
02bf8     DC E4 85 F1 | 	sub	objptr, ##63196
02bfc     5F 01 00 FF 
02c00     B7 26 06 F6 | 	mov	local05, ##@LR__4654
02c04     13 2F 02 F6 | 	mov	local09, local05
02c08     17 15 02 F6 | 	mov	arg02, local09
02c0c     F8 9B B1 FD | 	call	#__system___string_cmp
02c10     00 FA 0D F2 | 	cmp	result1, #0 wz
02c14     EC 00 90 AD |  if_e	jmp	#LR__0130
02c18     7B 00 00 FF 
02c1c     DC E4 05 F1 | 	add	objptr, ##63196
02c20     F2 12 02 FB | 	rdlong	arg01, objptr
02c24     7B 00 00 FF 
02c28     DC E4 85 F1 | 	sub	objptr, ##63196
02c2c     5F 01 00 FF 
02c30     BC 28 06 F6 | 	mov	local06, ##@LR__4655
02c34     14 27 02 F6 | 	mov	local05, local06
02c38     13 15 02 F6 | 	mov	arg02, local05
02c3c     C8 9B B1 FD | 	call	#__system___string_cmp
02c40     FD 2E 0A F6 | 	mov	local09, result1 wz
02c44     BC 00 90 AD |  if_e	jmp	#LR__0130
02c48     7B 00 00 FF 
02c4c     DC E4 05 F1 | 	add	objptr, ##63196
02c50     F2 12 02 FB | 	rdlong	arg01, objptr
02c54     7B 00 00 FF 
02c58     DC E4 85 F1 | 	sub	objptr, ##63196
02c5c     5F 01 00 FF 
02c60     C1 32 06 F6 | 	mov	local11, ##@LR__4656
02c64     19 29 02 F6 | 	mov	local06, local11
02c68     14 15 02 F6 | 	mov	arg02, local06
02c6c     98 9B B1 FD | 	call	#__system___string_cmp
02c70     FD 26 0A F6 | 	mov	local05, result1 wz
02c74     8C 00 90 AD |  if_e	jmp	#LR__0130
02c78     7B 00 00 FF 
02c7c     DC E4 05 F1 | 	add	objptr, ##63196
02c80     F2 12 02 FB | 	rdlong	arg01, objptr
02c84     7B 00 00 FF 
02c88     DC E4 85 F1 | 	sub	objptr, ##63196
02c8c     5F 01 00 FF 
02c90     C5 30 06 F6 | 	mov	local10, ##@LR__4657
02c94     18 33 02 F6 | 	mov	local11, local10
02c98     19 15 02 F6 | 	mov	arg02, local11
02c9c     68 9B B1 FD | 	call	#__system___string_cmp
02ca0     FD 28 0A F6 | 	mov	local06, result1 wz
02ca4     5C 00 90 AD |  if_e	jmp	#LR__0130
02ca8     7B 00 00 FF 
02cac     DC E4 05 F1 | 	add	objptr, ##63196
02cb0     F2 12 02 FB | 	rdlong	arg01, objptr
02cb4     7B 00 00 FF 
02cb8     DC E4 85 F1 | 	sub	objptr, ##63196
02cbc     5F 01 00 FF 
02cc0     C9 30 06 F6 | 	mov	local10, ##@LR__4658
02cc4     18 15 02 F6 | 	mov	arg02, local10
02cc8     3C 9B B1 FD | 	call	#__system___string_cmp
02ccc     FD 32 0A F6 | 	mov	local11, result1 wz
02cd0     30 00 90 AD |  if_e	jmp	#LR__0130
02cd4     7B 00 00 FF 
02cd8     DC E4 05 F1 | 	add	objptr, ##63196
02cdc     F2 12 02 FB | 	rdlong	arg01, objptr
02ce0     7B 00 00 FF 
02ce4     DC E4 85 F1 | 	sub	objptr, ##63196
02ce8     5F 01 00 FF 
02cec     CC 34 06 F6 | 	mov	local12, ##@LR__4659
02cf0     1A 37 02 F6 | 	mov	local13, local12
02cf4     1B 15 02 F6 | 	mov	arg02, local13
02cf8     0C 9B B1 FD | 	call	#__system___string_cmp
02cfc     FD 30 0A F6 | 	mov	local10, result1 wz
02d00     9C 00 90 5D |  if_ne	jmp	#LR__0131
02d04                 | LR__0130
02d04     7B 00 00 FF 
02d08     D8 E4 05 F1 | 	add	objptr, ##63192
02d0c     F2 34 02 FB | 	rdlong	local12, objptr
02d10     1A 37 02 F6 | 	mov	local13, local12
02d14     01 36 06 F1 | 	add	local13, #1
02d18     1B 4B 02 F6 | 	mov	local23, local13
02d1c     25 43 02 F6 | 	mov	local19, local23
02d20     03 42 66 F0 | 	shl	local19, #3
02d24     26 00 00 FF 
02d28     E8 E4 85 F1 | 	sub	objptr, ##19688
02d2c     F2 44 02 F6 | 	mov	local20, objptr
02d30     F2 42 02 F1 | 	add	local19, objptr
02d34     04 42 06 F1 | 	add	local19, #4
02d38     21 4D 02 FB | 	rdlong	local24, local19
02d3c     04 42 86 F1 | 	sub	local19, #4
02d40     26 47 02 F6 | 	mov	local21, local24
02d44     01 00 00 FF 
02d48     04 46 0E F2 | 	cmp	local21, ##516 wz
02d4c     54 00 00 FF 
02d50     F0 E5 85 F1 | 	sub	objptr, ##43504
02d54     48 00 90 5D |  if_ne	jmp	#LR__0131
02d58     7B 00 00 FF 
02d5c     D8 E4 05 F1 | 	add	objptr, ##63192
02d60     F2 2E 02 FB | 	rdlong	local09, objptr
02d64     01 2E 06 F1 | 	add	local09, #1
02d68     17 27 02 F6 | 	mov	local05, local09
02d6c     03 26 66 F0 | 	shl	local05, #3
02d70     26 00 00 FF 
02d74     E8 E4 85 F1 | 	sub	objptr, ##19688
02d78     F2 28 02 F6 | 	mov	local06, objptr
02d7c     F2 26 02 F1 | 	add	local05, objptr
02d80     01 00 00 FF 
02d84     03 32 06 F6 | 	mov	local11, ##515
02d88     04 26 06 F1 | 	add	local05, #4
02d8c     01 00 80 FF 
02d90     13 07 68 FC | 	wrlong	##515, local05
02d94     04 26 86 F1 | 	sub	local05, #4
02d98     54 00 00 FF 
02d9c     F0 E5 85 F1 | 	sub	objptr, ##43504
02da0                 | LR__0131
02da0                 | ' 
02da0                 | ' ' abbreviated command has to be at the position addptr
02da0                 | ' 
02da0                 | ' 
02da0                 | ' 
02da0                 | ' '2b determine a type of the line
02da0                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02da0     54 00 00 FF 
02da4     F0 E5 05 F1 | 	add	objptr, ##43504
02da8     F2 12 02 FB | 	rdlong	arg01, objptr
02dac     54 00 00 FF 
02db0     F0 E5 85 F1 | 	sub	objptr, ##43504
02db4     58 24 B0 FD | 	call	#_isdec
02db8     00 FA 0D F2 | 	cmp	result1, #0 wz
02dbc     30 00 90 AD |  if_e	jmp	#LR__0132
02dc0     54 00 00 FF 
02dc4     F0 E5 05 F1 | 	add	objptr, ##43504
02dc8     F2 12 02 FB | 	rdlong	arg01, objptr
02dcc     54 00 00 FF 
02dd0     F0 E5 85 F1 | 	sub	objptr, ##43504
02dd4     00 14 06 F6 | 	mov	arg02, #0
02dd8     F8 CB B1 FD | 	call	#__system____builtin_atoi
02ddc     7B 00 00 FF 
02de0     74 E4 05 F1 | 	add	objptr, ##63092
02de4     F2 FA 61 FC | 	wrlong	result1, objptr
02de8     7B 00 00 FF 
02dec     74 E4 85 F1 | 	sub	objptr, ##63092
02df0                 | LR__0132
02df0                 | ' 
02df0                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02df0     7B 00 00 FF 
02df4     74 E4 05 F1 | 	add	objptr, ##63092
02df8     F2 1E 02 FB | 	rdlong	local01, objptr
02dfc     7B 00 00 FF 
02e00     74 E4 85 F1 | 	sub	objptr, ##63092
02e04     01 1E 16 F2 | 	cmp	local01, #1 wc
02e08     3C 00 90 CD |  if_b	jmp	#LR__0133
02e0c     01 3A 0E F2 | 	cmp	local15, #1 wz
02e10     57 00 00 AF 
02e14     08 E4 05 A1 |  if_e	add	objptr, ##44552
02e18     F2 26 02 AB |  if_e	rdlong	local05, objptr
02e1c     57 00 00 AF 
02e20     08 E4 85 A1 |  if_e	sub	objptr, ##44552
02e24     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02e28     1C 00 90 5D |  if_ne	jmp	#LR__0133
02e2c     7B 00 00 FF 
02e30     74 E4 05 F1 | 	add	objptr, ##63092
02e34     F2 12 02 FB | 	rdlong	arg01, objptr
02e38     7B 00 00 FF 
02e3c     74 E4 85 F1 | 	sub	objptr, ##63092
02e40     F0 24 B0 FD | 	call	#_deleteline
02e44     4C 05 90 FD | 	jmp	#LR__0150
02e48                 | LR__0133
02e48                 | ' 
02e48                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e48     7B 00 00 FF 
02e4c     74 E4 05 F1 | 	add	objptr, ##63092
02e50     F2 1E 02 FB | 	rdlong	local01, objptr
02e54     7B 00 00 FF 
02e58     74 E4 85 F1 | 	sub	objptr, ##63092
02e5c     01 1E 16 F2 | 	cmp	local01, #1 wc
02e60     EC 00 90 CD |  if_b	jmp	#LR__0136
02e64     57 00 00 FF 
02e68     08 E4 05 F1 | 	add	objptr, ##44552
02e6c     F2 26 02 FB | 	rdlong	local05, objptr
02e70     57 00 00 FF 
02e74     08 E4 85 F1 | 	sub	objptr, ##44552
02e78     13 2F 0A F6 | 	mov	local09, local05 wz
02e7c     20 00 90 AD |  if_e	jmp	#LR__0134
02e80     57 00 00 FF 
02e84     08 E4 05 F1 | 	add	objptr, ##44552
02e88     F2 32 02 FB | 	rdlong	local11, objptr
02e8c     57 00 00 FF 
02e90     08 E4 85 F1 | 	sub	objptr, ##44552
02e94     19 29 02 F6 | 	mov	local06, local11
02e98     03 28 0E F2 | 	cmp	local06, #3 wz
02e9c     B0 00 90 5D |  if_ne	jmp	#LR__0136
02ea0                 | LR__0134
02ea0     55 00 00 FF 
02ea4     04 E4 05 F1 | 	add	objptr, ##43524
02ea8     F2 36 02 FB | 	rdlong	local13, objptr
02eac     55 00 00 FF 
02eb0     04 E4 85 F1 | 	sub	objptr, ##43524
02eb4     1B 31 02 F6 | 	mov	local10, local13
02eb8     1B 30 0E F2 | 	cmp	local10, #27 wz
02ebc     90 00 90 AD |  if_e	jmp	#LR__0136
02ec0     7B 00 00 FF 
02ec4     74 E4 05 F1 | 	add	objptr, ##63092
02ec8     F2 12 02 FB | 	rdlong	arg01, objptr
02ecc     24 00 00 FF 
02ed0     6C E4 85 F1 | 	sub	objptr, ##18540
02ed4     F2 16 02 FB | 	rdlong	arg03, objptr
02ed8     57 00 00 FF 
02edc     08 E4 85 F1 | 	sub	objptr, ##44552
02ee0     00 14 06 F6 | 	mov	arg02, #0
02ee4     8C 38 B0 FD | 	call	#_compile
02ee8     FD 20 0A F6 | 	mov	local02, result1 wz
02eec                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02eec                 | '   if err<>0 then printerror(err): goto 104
02eec     0C 00 90 AD |  if_e	jmp	#LR__0135
02ef0     10 13 02 F6 | 	mov	arg01, local02
02ef4     00 61 B1 FD | 	call	#_printerror
02ef8     98 04 90 FD | 	jmp	#LR__0150
02efc                 | LR__0135
02efc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02efc     7B 00 00 FF 
02f00     B4 E4 05 F1 | 	add	objptr, ##63156
02f04     F2 12 02 FB | 	rdlong	arg01, objptr
02f08     7B 00 00 FF 
02f0c     B4 E4 85 F1 | 	sub	objptr, ##63156
02f10     5F 01 00 FF 
02f14     D0 14 06 F6 | 	mov	arg02, ##@LR__4660
02f18     EC 98 B1 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     70 04 90 AD |  if_e	jmp	#LR__0150
02f24     7B 00 00 FF 
02f28     B4 E4 05 F1 | 	add	objptr, ##63156
02f2c     F2 1E 02 FB | 	rdlong	local01, objptr
02f30     24 00 00 FF 
02f34     B4 E4 85 F1 | 	sub	objptr, ##18612
02f38     F2 1E 62 FC | 	wrlong	local01, objptr
02f3c     08 E4 05 F1 | 	add	objptr, #8
02f40     F2 08 68 FC | 	wrlong	#4, objptr
02f44     57 00 00 FF 
02f48     08 E4 85 F1 | 	sub	objptr, ##44552
02f4c     20 DB 9F FD | 	jmp	#LR__0020
02f50                 | LR__0136
02f50                 | '       							
02f50                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f50     7B 00 00 FF 
02f54     74 E4 05 F1 | 	add	objptr, ##63092
02f58     F2 1E 02 FB | 	rdlong	local01, objptr
02f5c     7B 00 00 FF 
02f60     74 E4 85 F1 | 	sub	objptr, ##63092
02f64     01 1E 16 F2 | 	cmp	local01, #1 wc
02f68     EC 00 90 CD |  if_b	jmp	#LR__0139
02f6c     57 00 00 FF 
02f70     08 E4 05 F1 | 	add	objptr, ##44552
02f74     F2 26 02 FB | 	rdlong	local05, objptr
02f78     57 00 00 FF 
02f7c     08 E4 85 F1 | 	sub	objptr, ##44552
02f80     01 26 0E F2 | 	cmp	local05, #1 wz
02f84     20 00 90 AD |  if_e	jmp	#LR__0137
02f88     57 00 00 FF 
02f8c     08 E4 05 F1 | 	add	objptr, ##44552
02f90     F2 32 02 FB | 	rdlong	local11, objptr
02f94     57 00 00 FF 
02f98     08 E4 85 F1 | 	sub	objptr, ##44552
02f9c     19 29 02 F6 | 	mov	local06, local11
02fa0     02 28 0E F2 | 	cmp	local06, #2 wz
02fa4     B0 00 90 5D |  if_ne	jmp	#LR__0139
02fa8                 | LR__0137
02fa8     54 00 00 FF 
02fac     FC E5 05 F1 | 	add	objptr, ##43516
02fb0     F2 36 02 FB | 	rdlong	local13, objptr
02fb4     54 00 00 FF 
02fb8     FC E5 85 F1 | 	sub	objptr, ##43516
02fbc     1B 31 02 F6 | 	mov	local10, local13
02fc0     1B 30 0E F2 | 	cmp	local10, #27 wz
02fc4     90 00 90 AD |  if_e	jmp	#LR__0139
02fc8     7B 00 00 FF 
02fcc     74 E4 05 F1 | 	add	objptr, ##63092
02fd0     F2 12 02 FB | 	rdlong	arg01, objptr
02fd4     24 00 00 FF 
02fd8     6C E4 85 F1 | 	sub	objptr, ##18540
02fdc     F2 16 02 FB | 	rdlong	arg03, objptr
02fe0     57 00 00 FF 
02fe4     08 E4 85 F1 | 	sub	objptr, ##44552
02fe8     00 14 06 F6 | 	mov	arg02, #0
02fec     84 37 B0 FD | 	call	#_compile
02ff0     FD 20 0A F6 | 	mov	local02, result1 wz
02ff4                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ff4                 | '   if err<>0 then printerror(err): goto 104
02ff4     0C 00 90 AD |  if_e	jmp	#LR__0138
02ff8     10 13 02 F6 | 	mov	arg01, local02
02ffc     F8 5F B1 FD | 	call	#_printerror
03000     90 03 90 FD | 	jmp	#LR__0150
03004                 | LR__0138
03004                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03004     7B 00 00 FF 
03008     B4 E4 05 F1 | 	add	objptr, ##63156
0300c     F2 12 02 FB | 	rdlong	arg01, objptr
03010     7B 00 00 FF 
03014     B4 E4 85 F1 | 	sub	objptr, ##63156
03018     5F 01 00 FF 
0301c     D1 14 06 F6 | 	mov	arg02, ##@LR__4661
03020     E4 97 B1 FD | 	call	#__system___string_cmp
03024     00 FA 0D F2 | 	cmp	result1, #0 wz
03028     68 03 90 AD |  if_e	jmp	#LR__0150
0302c     7B 00 00 FF 
03030     B4 E4 05 F1 | 	add	objptr, ##63156
03034     F2 1E 02 FB | 	rdlong	local01, objptr
03038     24 00 00 FF 
0303c     B4 E4 85 F1 | 	sub	objptr, ##18612
03040     F2 1E 62 FC | 	wrlong	local01, objptr
03044     08 E4 05 F1 | 	add	objptr, #8
03048     F2 08 68 FC | 	wrlong	#4, objptr
0304c     57 00 00 FF 
03050     08 E4 85 F1 | 	sub	objptr, ##44552
03054     18 DA 9F FD | 	jmp	#LR__0020
03058                 | LR__0139
03058                 | ' 							 
03058                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03058     7B 00 00 FF 
0305c     74 E4 05 F1 | 	add	objptr, ##63092
03060     F2 1E 02 FB | 	rdlong	local01, objptr
03064     7B 00 00 FF 
03068     74 E4 85 F1 | 	sub	objptr, ##63092
0306c     01 1E 16 F2 | 	cmp	local01, #1 wc
03070     D4 00 90 CD |  if_b	jmp	#LR__0141
03074     57 00 00 FF 
03078     08 E4 05 F1 | 	add	objptr, ##44552
0307c     F2 26 0A FB | 	rdlong	local05, objptr wz
03080     57 00 00 FF 
03084     08 E4 85 F1 | 	sub	objptr, ##44552
03088     20 00 90 AD |  if_e	jmp	#LR__0140
0308c     57 00 00 FF 
03090     08 E4 05 F1 | 	add	objptr, ##44552
03094     F2 32 02 FB | 	rdlong	local11, objptr
03098     57 00 00 FF 
0309c     08 E4 85 F1 | 	sub	objptr, ##44552
030a0     19 29 02 F6 | 	mov	local06, local11
030a4     03 28 0E F2 | 	cmp	local06, #3 wz
030a8     9C 00 90 5D |  if_ne	jmp	#LR__0141
030ac                 | LR__0140
030ac     55 00 00 FF 
030b0     04 E4 05 F1 | 	add	objptr, ##43524
030b4     F2 36 02 FB | 	rdlong	local13, objptr
030b8     55 00 00 FF 
030bc     04 E4 85 F1 | 	sub	objptr, ##43524
030c0     1B 31 02 F6 | 	mov	local10, local13
030c4     1B 30 0E F2 | 	cmp	local10, #27 wz
030c8     7C 00 90 5D |  if_ne	jmp	#LR__0141
030cc     7B 00 00 FF 
030d0     74 E4 05 F1 | 	add	objptr, ##63092
030d4     F2 12 02 FB | 	rdlong	arg01, objptr
030d8     24 00 00 FF 
030dc     6C E4 85 F1 | 	sub	objptr, ##18540
030e0     F2 16 02 FB | 	rdlong	arg03, objptr
030e4     57 00 00 FF 
030e8     08 E4 85 F1 | 	sub	objptr, ##44552
030ec     00 14 06 F6 | 	mov	arg02, #0
030f0     50 37 B0 FD | 	call	#_compile_assign
030f4                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030f4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030f4     7B 00 00 FF 
030f8     B4 E4 05 F1 | 	add	objptr, ##63156
030fc     F2 12 02 FB | 	rdlong	arg01, objptr
03100     7B 00 00 FF 
03104     B4 E4 85 F1 | 	sub	objptr, ##63156
03108     5F 01 00 FF 
0310c     D2 14 06 F6 | 	mov	arg02, ##@LR__4662
03110     F4 96 B1 FD | 	call	#__system___string_cmp
03114     00 FA 0D F2 | 	cmp	result1, #0 wz
03118     78 02 90 AD |  if_e	jmp	#LR__0150
0311c     7B 00 00 FF 
03120     B4 E4 05 F1 | 	add	objptr, ##63156
03124     F2 1E 02 FB | 	rdlong	local01, objptr
03128     24 00 00 FF 
0312c     B4 E4 85 F1 | 	sub	objptr, ##18612
03130     F2 1E 62 FC | 	wrlong	local01, objptr
03134     08 E4 05 F1 | 	add	objptr, #8
03138     F2 08 68 FC | 	wrlong	#4, objptr
0313c     57 00 00 FF 
03140     08 E4 85 F1 | 	sub	objptr, ##44552
03144     28 D9 9F FD | 	jmp	#LR__0020
03148                 | LR__0141
03148                 | '     							 
03148                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03148     7B 00 00 FF 
0314c     74 E4 05 F1 | 	add	objptr, ##63092
03150     F2 1E 02 FB | 	rdlong	local01, objptr
03154     7B 00 00 FF 
03158     74 E4 85 F1 | 	sub	objptr, ##63092
0315c     01 1E 16 F2 | 	cmp	local01, #1 wc
03160     CC 00 90 CD |  if_b	jmp	#LR__0142
03164     57 00 00 FF 
03168     08 E4 05 F1 | 	add	objptr, ##44552
0316c     F2 26 02 FB | 	rdlong	local05, objptr
03170     57 00 00 FF 
03174     08 E4 85 F1 | 	sub	objptr, ##44552
03178     01 26 0E F2 | 	cmp	local05, #1 wz
0317c     57 00 00 5F 
03180     08 E4 05 51 |  if_ne	add	objptr, ##44552
03184     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03188     57 00 00 5F 
0318c     08 E4 85 51 |  if_ne	sub	objptr, ##44552
03190     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03194     54 00 00 AF 
03198     FC E5 05 A1 |  if_e	add	objptr, ##43516
0319c     F2 36 02 AB |  if_e	rdlong	local13, objptr
031a0     54 00 00 AF 
031a4     FC E5 85 A1 |  if_e	sub	objptr, ##43516
031a8     1B 31 02 A6 |  if_e	mov	local10, local13
031ac     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
031b0     7C 00 90 5D |  if_ne	jmp	#LR__0142
031b4     7B 00 00 FF 
031b8     74 E4 05 F1 | 	add	objptr, ##63092
031bc     F2 12 02 FB | 	rdlong	arg01, objptr
031c0     24 00 00 FF 
031c4     6C E4 85 F1 | 	sub	objptr, ##18540
031c8     F2 16 02 FB | 	rdlong	arg03, objptr
031cc     57 00 00 FF 
031d0     08 E4 85 F1 | 	sub	objptr, ##44552
031d4     00 14 06 F6 | 	mov	arg02, #0
031d8     68 36 B0 FD | 	call	#_compile_assign
031dc                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
031dc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
031dc     7B 00 00 FF 
031e0     B4 E4 05 F1 | 	add	objptr, ##63156
031e4     F2 12 02 FB | 	rdlong	arg01, objptr
031e8     7B 00 00 FF 
031ec     B4 E4 85 F1 | 	sub	objptr, ##63156
031f0     5F 01 00 FF 
031f4     D3 14 06 F6 | 	mov	arg02, ##@LR__4663
031f8     0C 96 B1 FD | 	call	#__system___string_cmp
031fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03200     90 01 90 AD |  if_e	jmp	#LR__0150
03204     7B 00 00 FF 
03208     B4 E4 05 F1 | 	add	objptr, ##63156
0320c     F2 1E 02 FB | 	rdlong	local01, objptr
03210     24 00 00 FF 
03214     B4 E4 85 F1 | 	sub	objptr, ##18612
03218     F2 1E 62 FC | 	wrlong	local01, objptr
0321c     08 E4 05 F1 | 	add	objptr, #8
03220     F2 08 68 FC | 	wrlong	#4, objptr
03224     57 00 00 FF 
03228     08 E4 85 F1 | 	sub	objptr, ##44552
0322c     40 D8 9F FD | 	jmp	#LR__0020
03230                 | LR__0142
03230                 | ' 
03230                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03230     54 00 00 FF 
03234     F4 E5 05 F1 | 	add	objptr, ##43508
03238     F2 1E 02 FB | 	rdlong	local01, objptr
0323c     54 00 00 FF 
03240     F4 E5 85 F1 | 	sub	objptr, ##43508
03244     01 00 00 FF 
03248     04 1E 0E F2 | 	cmp	local01, ##516 wz
0324c     54 00 00 AF 
03250     FC E5 05 A1 |  if_e	add	objptr, ##43516
03254     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03258     54 00 00 AF 
0325c     FC E5 85 A1 |  if_e	sub	objptr, ##43516
03260     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03264     14 00 90 5D |  if_ne	jmp	#LR__0143
03268     00 12 06 F6 | 	mov	arg01, #0
0326c     00 14 06 F6 | 	mov	arg02, #0
03270     00 16 06 F6 | 	mov	arg03, #0
03274     CC 35 B0 FD | 	call	#_compile_assign
03278     90 00 90 FD | 	jmp	#LR__0145
0327c                 | LR__0143
0327c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0327c     54 00 00 FF 
03280     F4 E5 05 F1 | 	add	objptr, ##43508
03284     F2 1E 02 FB | 	rdlong	local01, objptr
03288     54 00 00 FF 
0328c     F4 E5 85 F1 | 	sub	objptr, ##43508
03290     01 00 00 FF 
03294     04 1E 0E F2 | 	cmp	local01, ##516 wz
03298     54 00 00 AF 
0329c     FC E5 05 A1 |  if_e	add	objptr, ##43516
032a0     F2 2E 02 AB |  if_e	rdlong	local09, objptr
032a4     54 00 00 AF 
032a8     FC E5 85 A1 |  if_e	sub	objptr, ##43516
032ac     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
032b0     44 00 90 5D |  if_ne	jmp	#LR__0144
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     B4 EE B1 FD | 	call	#__system___getiolock_0474
032bc     FD 12 02 F6 | 	mov	arg01, result1
032c0     1C 95 B1 FD | 	call	#__system___lockmem
032c4     5F 01 00 FF 
032c8     D4 14 06 F6 | 	mov	arg02, ##@LR__4664
032cc     00 12 06 F6 | 	mov	arg01, #0
032d0     00 16 06 F6 | 	mov	arg03, #0
032d4     0C A2 B1 FD | 	call	#__system___basic_print_string
032d8     00 12 06 F6 | 	mov	arg01, #0
032dc     0A 14 06 F6 | 	mov	arg02, #10
032e0     00 16 06 F6 | 	mov	arg03, #0
032e4     A4 A1 B1 FD | 	call	#__system___basic_print_char
032e8     00 12 06 F6 | 	mov	arg01, #0
032ec     80 EE B1 FD | 	call	#__system___getiolock_0474
032f0     FD 00 68 FC | 	wrlong	#0, result1
032f4     7C 00 90 FD | 	jmp	#LR__0149
032f8                 | LR__0144
032f8     00 12 06 F6 | 	mov	arg01, #0
032fc     00 14 06 F6 | 	mov	arg02, #0
03300     00 16 06 F6 | 	mov	arg03, #0
03304     6C 34 B0 FD | 	call	#_compile
03308     FD 20 02 F6 | 	mov	local02, result1
0330c                 | LR__0145
0330c                 | ' 
0330c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0330c                 | ' 
0330c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0330c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0330c                 | ' if err=0 then execute_line() else printerror(err)
0330c     00 20 0E F2 | 	cmp	local02, #0 wz
03310     0C 00 90 5D |  if_ne	jmp	#LR__0146
03314     00 12 06 F6 | 	mov	arg01, #0
03318     C0 6D B0 FD | 	call	#_execute_line
0331c     08 00 90 FD | 	jmp	#LR__0147
03320                 | LR__0146
03320     10 13 02 F6 | 	mov	arg01, local02
03324     D0 5C B1 FD | 	call	#_printerror
03328                 | LR__0147
03328                 | ' if rest$<>"" then line$=rest$:  goto 108 
03328     7B 00 00 FF 
0332c     B4 E4 05 F1 | 	add	objptr, ##63156
03330     F2 12 02 FB | 	rdlong	arg01, objptr
03334     7B 00 00 FF 
03338     B4 E4 85 F1 | 	sub	objptr, ##63156
0333c     5F 01 00 FF 
03340     03 15 06 F6 | 	mov	arg02, ##@LR__4665
03344     C0 94 B1 FD | 	call	#__system___string_cmp
03348     00 FA 0D F2 | 	cmp	result1, #0 wz
0334c     24 00 90 AD |  if_e	jmp	#LR__0148
03350     7B 00 00 FF 
03354     B4 E4 05 F1 | 	add	objptr, ##63156
03358     F2 1E 02 FB | 	rdlong	local01, objptr
0335c     24 00 00 FF 
03360     B4 E4 85 F1 | 	sub	objptr, ##18612
03364     F2 1E 62 FC | 	wrlong	local01, objptr
03368     57 00 00 FF 
0336c     00 E4 85 F1 | 	sub	objptr, ##44544
03370     FC D6 9F FD | 	jmp	#LR__0020
03374                 | LR__0148
03374                 | LR__0149
03374     5F 01 00 FF 
03378     04 13 06 F6 | 	mov	arg01, ##@LR__4666
0337c                 | ' 
0337c                 | ' write(text)
0337c     24 83 B1 FD | 	call	#_hg010b_spin2_write
03380                 | ' crlf
03380     80 84 B1 FD | 	call	#_hg010b_spin2_crlf
03384     5F 01 00 FF 
03388     05 13 06 F6 | 	mov	arg01, ##@LR__4667
0338c                 | ' 
0338c                 | ' write(text)
0338c     14 83 B1 FD | 	call	#_hg010b_spin2_write
03390                 | ' crlf
03390     70 84 B1 FD | 	call	#_hg010b_spin2_crlf
03394                 | LR__0150
03394     A7 F0 03 F6 | 	mov	ptra, fp
03398     B2 00 A0 FD | 	call	#popregs_
0339c                 | _interpret_ret
0339c     2D 00 64 FD | 	ret
033a0                 | 
033a0                 | ' 
033a0                 | ' 
033a0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
033a0                 | ' 
033a0                 | ' function isoperator(s as string) as ubyte
033a0                 | _isoperator
033a0     01 4A 05 F6 | 	mov	COUNT_, #1
033a4     A8 00 A0 FD | 	call	#pushregs_
033a8                 | ' 
033a8                 | ' select case s
033a8     09 1F 02 F6 | 	mov	local01, arg01
033ac     5F 01 00 FF 
033b0     0B 15 06 F6 | 	mov	arg02, ##@LR__4668
033b4     0F 13 02 F6 | 	mov	arg01, local01
033b8     4C 94 B1 FD | 	call	#__system___string_cmp
033bc     00 FA 0D F2 | 	cmp	result1, #0 wz
033c0     FC 01 90 AD |  if_e	jmp	#LR__0160
033c4     5F 01 00 FF 
033c8     0D 15 06 F6 | 	mov	arg02, ##@LR__4669
033cc     0F 13 02 F6 | 	mov	arg01, local01
033d0     34 94 B1 FD | 	call	#__system___string_cmp
033d4     00 FA 0D F2 | 	cmp	result1, #0 wz
033d8     EC 01 90 AD |  if_e	jmp	#LR__0161
033dc     5F 01 00 FF 
033e0     0F 15 06 F6 | 	mov	arg02, ##@LR__4670
033e4     0F 13 02 F6 | 	mov	arg01, local01
033e8     1C 94 B1 FD | 	call	#__system___string_cmp
033ec     00 FA 0D F2 | 	cmp	result1, #0 wz
033f0     DC 01 90 AD |  if_e	jmp	#LR__0162
033f4     5F 01 00 FF 
033f8     12 15 06 F6 | 	mov	arg02, ##@LR__4671
033fc     0F 13 02 F6 | 	mov	arg01, local01
03400     04 94 B1 FD | 	call	#__system___string_cmp
03404     00 FA 0D F2 | 	cmp	result1, #0 wz
03408     CC 01 90 AD |  if_e	jmp	#LR__0163
0340c     5F 01 00 FF 
03410     16 15 06 F6 | 	mov	arg02, ##@LR__4672
03414     0F 13 02 F6 | 	mov	arg01, local01
03418     EC 93 B1 FD | 	call	#__system___string_cmp
0341c     00 FA 0D F2 | 	cmp	result1, #0 wz
03420     BC 01 90 AD |  if_e	jmp	#LR__0164
03424     5F 01 00 FF 
03428     18 15 06 F6 | 	mov	arg02, ##@LR__4673
0342c     0F 13 02 F6 | 	mov	arg01, local01
03430     D4 93 B1 FD | 	call	#__system___string_cmp
03434     00 FA 0D F2 | 	cmp	result1, #0 wz
03438     AC 01 90 AD |  if_e	jmp	#LR__0165
0343c     5F 01 00 FF 
03440     1A 15 06 F6 | 	mov	arg02, ##@LR__4674
03444     0F 13 02 F6 | 	mov	arg01, local01
03448     BC 93 B1 FD | 	call	#__system___string_cmp
0344c     00 FA 0D F2 | 	cmp	result1, #0 wz
03450     9C 01 90 AD |  if_e	jmp	#LR__0166
03454     5F 01 00 FF 
03458     1E 15 06 F6 | 	mov	arg02, ##@LR__4675
0345c     0F 13 02 F6 | 	mov	arg01, local01
03460     A4 93 B1 FD | 	call	#__system___string_cmp
03464     00 FA 0D F2 | 	cmp	result1, #0 wz
03468     8C 01 90 AD |  if_e	jmp	#LR__0167
0346c     5F 01 00 FF 
03470     22 15 06 F6 | 	mov	arg02, ##@LR__4676
03474     0F 13 02 F6 | 	mov	arg01, local01
03478     8C 93 B1 FD | 	call	#__system___string_cmp
0347c     00 FA 0D F2 | 	cmp	result1, #0 wz
03480     7C 01 90 AD |  if_e	jmp	#LR__0168
03484     5F 01 00 FF 
03488     26 15 06 F6 | 	mov	arg02, ##@LR__4677
0348c     0F 13 02 F6 | 	mov	arg01, local01
03490     74 93 B1 FD | 	call	#__system___string_cmp
03494     00 FA 0D F2 | 	cmp	result1, #0 wz
03498     6C 01 90 AD |  if_e	jmp	#LR__0169
0349c     5F 01 00 FF 
034a0     2A 15 06 F6 | 	mov	arg02, ##@LR__4678
034a4     0F 13 02 F6 | 	mov	arg01, local01
034a8     5C 93 B1 FD | 	call	#__system___string_cmp
034ac     00 FA 0D F2 | 	cmp	result1, #0 wz
034b0     5C 01 90 AD |  if_e	jmp	#LR__0170
034b4     5F 01 00 FF 
034b8     2E 15 06 F6 | 	mov	arg02, ##@LR__4679
034bc     0F 13 02 F6 | 	mov	arg01, local01
034c0     44 93 B1 FD | 	call	#__system___string_cmp
034c4     00 FA 0D F2 | 	cmp	result1, #0 wz
034c8     4C 01 90 AD |  if_e	jmp	#LR__0171
034cc     5F 01 00 FF 
034d0     30 15 06 F6 | 	mov	arg02, ##@LR__4680
034d4     0F 13 02 F6 | 	mov	arg01, local01
034d8     2C 93 B1 FD | 	call	#__system___string_cmp
034dc     00 FA 0D F2 | 	cmp	result1, #0 wz
034e0     3C 01 90 AD |  if_e	jmp	#LR__0172
034e4     5F 01 00 FF 
034e8     34 15 06 F6 | 	mov	arg02, ##@LR__4681
034ec     0F 13 02 F6 | 	mov	arg01, local01
034f0     14 93 B1 FD | 	call	#__system___string_cmp
034f4     00 FA 0D F2 | 	cmp	result1, #0 wz
034f8     2C 01 90 AD |  if_e	jmp	#LR__0173
034fc     5F 01 00 FF 
03500     36 15 06 F6 | 	mov	arg02, ##@LR__4682
03504     0F 13 02 F6 | 	mov	arg01, local01
03508     FC 92 B1 FD | 	call	#__system___string_cmp
0350c     00 FA 0D F2 | 	cmp	result1, #0 wz
03510     1C 01 90 AD |  if_e	jmp	#LR__0174
03514     5F 01 00 FF 
03518     38 15 06 F6 | 	mov	arg02, ##@LR__4683
0351c     0F 13 02 F6 | 	mov	arg01, local01
03520     E4 92 B1 FD | 	call	#__system___string_cmp
03524     00 FA 0D F2 | 	cmp	result1, #0 wz
03528     0C 01 90 AD |  if_e	jmp	#LR__0175
0352c     5F 01 00 FF 
03530     3B 15 06 F6 | 	mov	arg02, ##@LR__4684
03534     0F 13 02 F6 | 	mov	arg01, local01
03538     CC 92 B1 FD | 	call	#__system___string_cmp
0353c     00 FA 0D F2 | 	cmp	result1, #0 wz
03540     FC 00 90 AD |  if_e	jmp	#LR__0176
03544     5F 01 00 FF 
03548     3E 15 06 F6 | 	mov	arg02, ##@LR__4685
0354c     0F 13 02 F6 | 	mov	arg01, local01
03550     B4 92 B1 FD | 	call	#__system___string_cmp
03554     00 FA 0D F2 | 	cmp	result1, #0 wz
03558     EC 00 90 AD |  if_e	jmp	#LR__0177
0355c     5F 01 00 FF 
03560     40 15 06 F6 | 	mov	arg02, ##@LR__4686
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     9C 92 B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     DC 00 90 AD |  if_e	jmp	#LR__0178
03574     5F 01 00 FF 
03578     42 15 06 F6 | 	mov	arg02, ##@LR__4687
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     84 92 B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     CC 00 90 AD |  if_e	jmp	#LR__0179
0358c     5F 01 00 FF 
03590     45 15 06 F6 | 	mov	arg02, ##@LR__4688
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     6C 92 B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     BC 00 90 AD |  if_e	jmp	#LR__0180
035a4     5F 01 00 FF 
035a8     48 15 06 F6 | 	mov	arg02, ##@LR__4689
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     54 92 B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     AC 00 90 AD |  if_e	jmp	#LR__0181
035bc     B0 00 90 FD | 	jmp	#LR__0182
035c0                 | LR__0160
035c0     01 FA 05 F6 | 	mov	result1, #1
035c4     AC 00 90 FD | 	jmp	#LR__0183
035c8                 | LR__0161
035c8     02 FA 05 F6 | 	mov	result1, #2
035cc     A4 00 90 FD | 	jmp	#LR__0183
035d0                 | LR__0162
035d0     03 FA 05 F6 | 	mov	result1, #3
035d4     9C 00 90 FD | 	jmp	#LR__0183
035d8                 | LR__0163
035d8     04 FA 05 F6 | 	mov	result1, #4
035dc     94 00 90 FD | 	jmp	#LR__0183
035e0                 | LR__0164
035e0     05 FA 05 F6 | 	mov	result1, #5
035e4     8C 00 90 FD | 	jmp	#LR__0183
035e8                 | LR__0165
035e8     06 FA 05 F6 | 	mov	result1, #6
035ec     84 00 90 FD | 	jmp	#LR__0183
035f0                 | LR__0166
035f0     07 FA 05 F6 | 	mov	result1, #7
035f4     7C 00 90 FD | 	jmp	#LR__0183
035f8                 | LR__0167
035f8     08 FA 05 F6 | 	mov	result1, #8
035fc     74 00 90 FD | 	jmp	#LR__0183
03600                 | LR__0168
03600     09 FA 05 F6 | 	mov	result1, #9
03604     6C 00 90 FD | 	jmp	#LR__0183
03608                 | LR__0169
03608     0A FA 05 F6 | 	mov	result1, #10
0360c     64 00 90 FD | 	jmp	#LR__0183
03610                 | LR__0170
03610     0B FA 05 F6 | 	mov	result1, #11
03614     5C 00 90 FD | 	jmp	#LR__0183
03618                 | LR__0171
03618     0C FA 05 F6 | 	mov	result1, #12
0361c     54 00 90 FD | 	jmp	#LR__0183
03620                 | LR__0172
03620     0D FA 05 F6 | 	mov	result1, #13
03624     4C 00 90 FD | 	jmp	#LR__0183
03628                 | LR__0173
03628     0E FA 05 F6 | 	mov	result1, #14
0362c     44 00 90 FD | 	jmp	#LR__0183
03630                 | LR__0174
03630     1B FA 05 F6 | 	mov	result1, #27
03634     3C 00 90 FD | 	jmp	#LR__0183
03638                 | LR__0175
03638     27 FA 05 F6 | 	mov	result1, #39
0363c     34 00 90 FD | 	jmp	#LR__0183
03640                 | LR__0176
03640     26 FA 05 F6 | 	mov	result1, #38
03644     2C 00 90 FD | 	jmp	#LR__0183
03648                 | LR__0177
03648     10 FA 05 F6 | 	mov	result1, #16
0364c     24 00 90 FD | 	jmp	#LR__0183
03650                 | LR__0178
03650     0F FA 05 F6 | 	mov	result1, #15
03654     1C 00 90 FD | 	jmp	#LR__0183
03658                 | LR__0179
03658     2A FA 05 F6 | 	mov	result1, #42
0365c     14 00 90 FD | 	jmp	#LR__0183
03660                 | LR__0180
03660     28 FA 05 F6 | 	mov	result1, #40
03664     0C 00 90 FD | 	jmp	#LR__0183
03668                 | LR__0181
03668     29 FA 05 F6 | 	mov	result1, #41
0366c     04 00 90 FD | 	jmp	#LR__0183
03670                 | LR__0182
03670     00 FA 05 F6 | 	mov	result1, #0
03674                 | LR__0183
03674     A7 F0 03 F6 | 	mov	ptra, fp
03678     B2 00 A0 FD | 	call	#popregs_
0367c                 | _isoperator_ret
0367c     2D 00 64 FD | 	ret
03680                 | 
03680                 | ' 
03680                 | ' 
03680                 | ' function isnotename(s as string) as ulong
03680                 | _isnotename
03680     07 4A 05 F6 | 	mov	COUNT_, #7
03684     A8 00 A0 FD | 	call	#pushregs_
03688                 | ' if left$(s,1)<>"#" then return 0
03688     09 1F 02 F6 | 	mov	local01, arg01
0368c     01 14 06 F6 | 	mov	arg02, #1
03690     90 B1 B1 FD | 	call	#__system__Left_S
03694     FD 12 02 F6 | 	mov	arg01, result1
03698     5F 01 00 FF 
0369c     4B 15 06 F6 | 	mov	arg02, ##@LR__4690
036a0     64 91 B1 FD | 	call	#__system___string_cmp
036a4     00 FA 0D F2 | 	cmp	result1, #0 wz
036a8     00 FA 05 56 |  if_ne	mov	result1, #0
036ac     30 03 90 5D |  if_ne	jmp	#LR__0213
036b0                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
036b0     0F 13 02 F6 | 	mov	arg01, local01
036b4     03 14 06 F6 | 	mov	arg02, #3
036b8     01 16 06 F6 | 	mov	arg03, #1
036bc     7C B2 B1 FD | 	call	#__system__Mid_S
036c0     FD 12 02 F6 | 	mov	arg01, result1
036c4     5F 01 00 FF 
036c8     4D 15 06 F6 | 	mov	arg02, ##@LR__4691
036cc     38 91 B1 FD | 	call	#__system___string_cmp
036d0     00 FA 0D F2 | 	cmp	result1, #0 wz
036d4     18 00 90 5D |  if_ne	jmp	#LR__0190
036d8     0F 13 02 F6 | 	mov	arg01, local01
036dc     02 14 06 F6 | 	mov	arg02, #2
036e0     02 16 06 F6 | 	mov	arg03, #2
036e4     54 B2 B1 FD | 	call	#__system__Mid_S
036e8     FD 20 02 F6 | 	mov	local02, result1
036ec     14 00 90 FD | 	jmp	#LR__0191
036f0                 | LR__0190
036f0     0F 13 02 F6 | 	mov	arg01, local01
036f4     02 14 06 F6 | 	mov	arg02, #2
036f8     01 16 06 F6 | 	mov	arg03, #1
036fc     3C B2 B1 FD | 	call	#__system__Mid_S
03700     FD 20 02 F6 | 	mov	local02, result1
03704                 | LR__0191
03704                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
03704     0F 13 02 F6 | 	mov	arg01, local01
03708     09 23 02 F6 | 	mov	local03, arg01
0370c     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
03710                 | LR__0192
03710     11 FB C9 FA | 	rdbyte	result1, local03 wz
03714     01 22 06 51 |  if_ne	add	local03, #1
03718     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
0371c                 | LR__0193
0371c     09 23 82 F1 | 	sub	local03, arg01
03720     11 15 02 F6 | 	mov	arg02, local03
03724     01 14 86 F1 | 	sub	arg02, #1
03728     0F 13 02 F6 | 	mov	arg01, local01
0372c     01 16 06 F6 | 	mov	arg03, #1
03730     08 B2 B1 FD | 	call	#__system__Mid_S
03734     FD 12 02 F6 | 	mov	arg01, result1
03738     5F 01 00 FF 
0373c     4F 15 06 F6 | 	mov	arg02, ##@LR__4692
03740     C4 90 B1 FD | 	call	#__system___string_cmp
03744     00 FA 0D F2 | 	cmp	result1, #0 wz
03748     28 00 90 AD |  if_e	jmp	#LR__0194
0374c     0F 13 02 F6 | 	mov	arg01, local01
03750     01 14 06 F6 | 	mov	arg02, #1
03754     54 B1 B1 FD | 	call	#__system__Right_S
03758     FD 12 02 F6 | 	mov	arg01, result1
0375c     E4 C3 B1 FD | 	call	#__system____builtin_atof
03760     FD 12 02 F6 | 	mov	arg01, result1
03764     00 14 06 F6 | 	mov	arg02, #0
03768     B8 C0 B1 FD | 	call	#__system___float_tointeger
0376c     FD 24 02 F6 | 	mov	local04, result1
03770     34 00 90 FD | 	jmp	#LR__0195
03774                 | LR__0194
03774     0F 13 02 F6 | 	mov	arg01, local01
03778     01 14 06 F6 | 	mov	arg02, #1
0377c     2C B1 B1 FD | 	call	#__system__Right_S
03780     FD 12 02 F6 | 	mov	arg01, result1
03784     BC C3 B1 FD | 	call	#__system____builtin_atof
03788     FD 14 02 F6 | 	mov	arg02, result1
0378c     00 C0 5F FF 
03790     00 12 06 F6 | 	mov	arg01, ##-1082130432
03794     C4 BB B1 FD | 	call	#__system___float_mul
03798     FD 12 02 F6 | 	mov	arg01, result1
0379c     00 14 06 F6 | 	mov	arg02, #0
037a0     80 C0 B1 FD | 	call	#__system___float_tointeger
037a4     FD 24 02 F6 | 	mov	local04, result1
037a8                 | LR__0195
037a8                 | ' 
037a8                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
037a8     00 24 0E F2 | 	cmp	local04, #0 wz
037ac     24 00 90 5D |  if_ne	jmp	#LR__0196
037b0     0F 13 02 F6 | 	mov	arg01, local01
037b4     01 14 06 F6 | 	mov	arg02, #1
037b8     F0 B0 B1 FD | 	call	#__system__Right_S
037bc     FD 12 02 F6 | 	mov	arg01, result1
037c0     5F 01 00 FF 
037c4     51 15 06 F6 | 	mov	arg02, ##@LR__4693
037c8     3C 90 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     04 24 06 56 |  if_ne	mov	local04, #4
037d4                 | LR__0196
037d4                 | ' 
037d4                 | ' select case s1
037d4     10 27 02 F6 | 	mov	local05, local02
037d8     5F 01 00 FF 
037dc     53 15 06 F6 | 	mov	arg02, ##@LR__4694
037e0     13 13 02 F6 | 	mov	arg01, local05
037e4     20 90 B1 FD | 	call	#__system___string_cmp
037e8     00 FA 0D F2 | 	cmp	result1, #0 wz
037ec     24 01 90 AD |  if_e	jmp	#LR__0197
037f0     5F 01 00 FF 
037f4     55 15 06 F6 | 	mov	arg02, ##@LR__4695
037f8     13 13 02 F6 | 	mov	arg01, local05
037fc     08 90 B1 FD | 	call	#__system___string_cmp
03800     00 FA 0D F2 | 	cmp	result1, #0 wz
03804     18 01 90 AD |  if_e	jmp	#LR__0198
03808     5F 01 00 FF 
0380c     58 15 06 F6 | 	mov	arg02, ##@LR__4696
03810     13 13 02 F6 | 	mov	arg01, local05
03814     F0 8F B1 FD | 	call	#__system___string_cmp
03818     00 FA 0D F2 | 	cmp	result1, #0 wz
0381c     0C 01 90 AD |  if_e	jmp	#LR__0199
03820     5F 01 00 FF 
03824     5A 15 06 F6 | 	mov	arg02, ##@LR__4697
03828     13 13 02 F6 | 	mov	arg01, local05
0382c     D8 8F B1 FD | 	call	#__system___string_cmp
03830     00 FA 0D F2 | 	cmp	result1, #0 wz
03834     00 01 90 AD |  if_e	jmp	#LR__0200
03838     5F 01 00 FF 
0383c     5D 15 06 F6 | 	mov	arg02, ##@LR__4698
03840     13 13 02 F6 | 	mov	arg01, local05
03844     C0 8F B1 FD | 	call	#__system___string_cmp
03848     00 FA 0D F2 | 	cmp	result1, #0 wz
0384c     F4 00 90 AD |  if_e	jmp	#LR__0201
03850     5F 01 00 FF 
03854     5F 15 06 F6 | 	mov	arg02, ##@LR__4699
03858     13 13 02 F6 | 	mov	arg01, local05
0385c     A8 8F B1 FD | 	call	#__system___string_cmp
03860     00 FA 0D F2 | 	cmp	result1, #0 wz
03864     E8 00 90 AD |  if_e	jmp	#LR__0202
03868     5F 01 00 FF 
0386c     61 15 06 F6 | 	mov	arg02, ##@LR__4700
03870     13 13 02 F6 | 	mov	arg01, local05
03874     90 8F B1 FD | 	call	#__system___string_cmp
03878     00 FA 0D F2 | 	cmp	result1, #0 wz
0387c     DC 00 90 AD |  if_e	jmp	#LR__0203
03880     5F 01 00 FF 
03884     64 15 06 F6 | 	mov	arg02, ##@LR__4701
03888     13 13 02 F6 | 	mov	arg01, local05
0388c     78 8F B1 FD | 	call	#__system___string_cmp
03890     00 FA 0D F2 | 	cmp	result1, #0 wz
03894     D0 00 90 AD |  if_e	jmp	#LR__0204
03898     5F 01 00 FF 
0389c     66 15 06 F6 | 	mov	arg02, ##@LR__4702
038a0     13 13 02 F6 | 	mov	arg01, local05
038a4     60 8F B1 FD | 	call	#__system___string_cmp
038a8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ac     C4 00 90 AD |  if_e	jmp	#LR__0205
038b0     5F 01 00 FF 
038b4     69 15 06 F6 | 	mov	arg02, ##@LR__4703
038b8     13 13 02 F6 | 	mov	arg01, local05
038bc     48 8F B1 FD | 	call	#__system___string_cmp
038c0     00 FA 0D F2 | 	cmp	result1, #0 wz
038c4     B8 00 90 AD |  if_e	jmp	#LR__0206
038c8     5F 01 00 FF 
038cc     6B 15 06 F6 | 	mov	arg02, ##@LR__4704
038d0     13 13 02 F6 | 	mov	arg01, local05
038d4     30 8F B1 FD | 	call	#__system___string_cmp
038d8     00 FA 0D F2 | 	cmp	result1, #0 wz
038dc     AC 00 90 AD |  if_e	jmp	#LR__0207
038e0     5F 01 00 FF 
038e4     6E 15 06 F6 | 	mov	arg02, ##@LR__4705
038e8     13 13 02 F6 | 	mov	arg01, local05
038ec     18 8F B1 FD | 	call	#__system___string_cmp
038f0     00 FA 0D F2 | 	cmp	result1, #0 wz
038f4     A0 00 90 AD |  if_e	jmp	#LR__0208
038f8     5F 01 00 FF 
038fc     70 15 06 F6 | 	mov	arg02, ##@LR__4706
03900     13 13 02 F6 | 	mov	arg01, local05
03904     00 8F B1 FD | 	call	#__system___string_cmp
03908     00 FA 0D F2 | 	cmp	result1, #0 wz
0390c     94 00 90 AD |  if_e	jmp	#LR__0209
03910     9C 00 90 FD | 	jmp	#LR__0210
03914                 | LR__0197
03914     01 00 00 FF 
03918     00 29 06 F6 | 	mov	local06, ##768
0391c     98 00 90 FD | 	jmp	#LR__0211
03920                 | LR__0198
03920     01 00 00 FF 
03924     01 29 06 F6 | 	mov	local06, ##769
03928     8C 00 90 FD | 	jmp	#LR__0211
0392c                 | LR__0199
0392c     01 00 00 FF 
03930     02 29 06 F6 | 	mov	local06, ##770
03934     80 00 90 FD | 	jmp	#LR__0211
03938                 | LR__0200
03938     01 00 00 FF 
0393c     03 29 06 F6 | 	mov	local06, ##771
03940     74 00 90 FD | 	jmp	#LR__0211
03944                 | LR__0201
03944     01 00 00 FF 
03948     04 29 06 F6 | 	mov	local06, ##772
0394c     68 00 90 FD | 	jmp	#LR__0211
03950                 | LR__0202
03950     01 00 00 FF 
03954     05 29 06 F6 | 	mov	local06, ##773
03958     5C 00 90 FD | 	jmp	#LR__0211
0395c                 | LR__0203
0395c     01 00 00 FF 
03960     06 29 06 F6 | 	mov	local06, ##774
03964     50 00 90 FD | 	jmp	#LR__0211
03968                 | LR__0204
03968     01 00 00 FF 
0396c     07 29 06 F6 | 	mov	local06, ##775
03970     44 00 90 FD | 	jmp	#LR__0211
03974                 | LR__0205
03974     01 00 00 FF 
03978     08 29 06 F6 | 	mov	local06, ##776
0397c     38 00 90 FD | 	jmp	#LR__0211
03980                 | LR__0206
03980     01 00 00 FF 
03984     09 29 06 F6 | 	mov	local06, ##777
03988     2C 00 90 FD | 	jmp	#LR__0211
0398c                 | LR__0207
0398c     01 00 00 FF 
03990     0A 29 06 F6 | 	mov	local06, ##778
03994     20 00 90 FD | 	jmp	#LR__0211
03998                 | LR__0208
03998     01 00 00 FF 
0399c     0B 29 06 F6 | 	mov	local06, ##779
039a0     14 00 90 FD | 	jmp	#LR__0211
039a4                 | LR__0209
039a4     01 00 00 FF 
039a8     0B 29 06 F6 | 	mov	local06, ##779
039ac     08 00 90 FD | 	jmp	#LR__0211
039b0                 | LR__0210
039b0     00 FA 05 F6 | 	mov	result1, #0
039b4     28 00 90 FD | 	jmp	#LR__0213
039b8                 | LR__0211
039b8                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
039b8     FF FF 7F FF 
039bc     FF 25 56 F2 | 	cmps	local04, ##-1 wc
039c0     18 00 90 CD |  if_b	jmp	#LR__0212
039c4     0A 24 56 F2 | 	cmps	local04, #10 wc
039c8     12 2B 02 C6 |  if_b	mov	local07, local04
039cc     01 2A 66 C0 |  if_b	shl	local07, #1
039d0     12 2B 02 C1 |  if_b	add	local07, local04
039d4     02 2A 66 C0 |  if_b	shl	local07, #2
039d8     15 29 02 C1 |  if_b	add	local06, local07
039dc                 | LR__0212
039dc                 | ' return token
039dc     14 FB 01 F6 | 	mov	result1, local06
039e0                 | LR__0213
039e0     A7 F0 03 F6 | 	mov	ptra, fp
039e4     B2 00 A0 FD | 	call	#popregs_
039e8                 | _isnotename_ret
039e8     2D 00 64 FD | 	ret
039ec                 | 
039ec                 | ' 
039ec                 | ' 
039ec                 | ' function isseparator(s as string) as ubyte
039ec                 | _isseparator
039ec     01 4A 05 F6 | 	mov	COUNT_, #1
039f0     A8 00 A0 FD | 	call	#pushregs_
039f4                 | ' 
039f4                 | ' select case s
039f4     09 1F 02 F6 | 	mov	local01, arg01
039f8     5F 01 00 FF 
039fc     72 15 06 F6 | 	mov	arg02, ##@LR__4707
03a00     0F 13 02 F6 | 	mov	arg01, local01
03a04     00 8E B1 FD | 	call	#__system___string_cmp
03a08     00 FA 0D F2 | 	cmp	result1, #0 wz
03a0c     54 01 90 AD |  if_e	jmp	#LR__0220
03a10     5F 01 00 FF 
03a14     74 15 06 F6 | 	mov	arg02, ##@LR__4708
03a18     0F 13 02 F6 | 	mov	arg01, local01
03a1c     E8 8D B1 FD | 	call	#__system___string_cmp
03a20     00 FA 0D F2 | 	cmp	result1, #0 wz
03a24     44 01 90 AD |  if_e	jmp	#LR__0221
03a28     5F 01 00 FF 
03a2c     76 15 06 F6 | 	mov	arg02, ##@LR__4709
03a30     0F 13 02 F6 | 	mov	arg01, local01
03a34     D0 8D B1 FD | 	call	#__system___string_cmp
03a38     00 FA 0D F2 | 	cmp	result1, #0 wz
03a3c     34 01 90 AD |  if_e	jmp	#LR__0222
03a40     5F 01 00 FF 
03a44     78 15 06 F6 | 	mov	arg02, ##@LR__4710
03a48     0F 13 02 F6 | 	mov	arg01, local01
03a4c     B8 8D B1 FD | 	call	#__system___string_cmp
03a50     00 FA 0D F2 | 	cmp	result1, #0 wz
03a54     24 01 90 AD |  if_e	jmp	#LR__0223
03a58     5F 01 00 FF 
03a5c     7A 15 06 F6 | 	mov	arg02, ##@LR__4711
03a60     0F 13 02 F6 | 	mov	arg01, local01
03a64     A0 8D B1 FD | 	call	#__system___string_cmp
03a68     00 FA 0D F2 | 	cmp	result1, #0 wz
03a6c     14 01 90 AD |  if_e	jmp	#LR__0224
03a70     5F 01 00 FF 
03a74     7C 15 06 F6 | 	mov	arg02, ##@LR__4712
03a78     0F 13 02 F6 | 	mov	arg01, local01
03a7c     88 8D B1 FD | 	call	#__system___string_cmp
03a80     00 FA 0D F2 | 	cmp	result1, #0 wz
03a84     04 01 90 AD |  if_e	jmp	#LR__0225
03a88     5F 01 00 FF 
03a8c     7E 15 06 F6 | 	mov	arg02, ##@LR__4713
03a90     0F 13 02 F6 | 	mov	arg01, local01
03a94     70 8D B1 FD | 	call	#__system___string_cmp
03a98     00 FA 0D F2 | 	cmp	result1, #0 wz
03a9c     F4 00 90 AD |  if_e	jmp	#LR__0226
03aa0     5F 01 00 FF 
03aa4     80 15 06 F6 | 	mov	arg02, ##@LR__4714
03aa8     0F 13 02 F6 | 	mov	arg01, local01
03aac     58 8D B1 FD | 	call	#__system___string_cmp
03ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab4     E4 00 90 AD |  if_e	jmp	#LR__0227
03ab8     5F 01 00 FF 
03abc     82 15 06 F6 | 	mov	arg02, ##@LR__4715
03ac0     0F 13 02 F6 | 	mov	arg01, local01
03ac4     40 8D B1 FD | 	call	#__system___string_cmp
03ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
03acc     D4 00 90 AD |  if_e	jmp	#LR__0228
03ad0     5F 01 00 FF 
03ad4     84 15 06 F6 | 	mov	arg02, ##@LR__4716
03ad8     0F 13 02 F6 | 	mov	arg01, local01
03adc     28 8D B1 FD | 	call	#__system___string_cmp
03ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae4     C4 00 90 AD |  if_e	jmp	#LR__0229
03ae8     5F 01 00 FF 
03aec     86 15 06 F6 | 	mov	arg02, ##@LR__4717
03af0     0F 13 02 F6 | 	mov	arg01, local01
03af4     10 8D B1 FD | 	call	#__system___string_cmp
03af8     00 FA 0D F2 | 	cmp	result1, #0 wz
03afc     B4 00 90 AD |  if_e	jmp	#LR__0230
03b00     5F 01 00 FF 
03b04     88 15 06 F6 | 	mov	arg02, ##@LR__4718
03b08     0F 13 02 F6 | 	mov	arg01, local01
03b0c     F8 8C B1 FD | 	call	#__system___string_cmp
03b10     00 FA 0D F2 | 	cmp	result1, #0 wz
03b14     A4 00 90 AD |  if_e	jmp	#LR__0231
03b18     5F 01 00 FF 
03b1c     8A 15 06 F6 | 	mov	arg02, ##@LR__4719
03b20     0F 13 02 F6 | 	mov	arg01, local01
03b24     E0 8C B1 FD | 	call	#__system___string_cmp
03b28     00 FA 0D F2 | 	cmp	result1, #0 wz
03b2c     94 00 90 AD |  if_e	jmp	#LR__0232
03b30     5F 01 00 FF 
03b34     8C 15 06 F6 | 	mov	arg02, ##@LR__4720
03b38     0F 13 02 F6 | 	mov	arg01, local01
03b3c     C8 8C B1 FD | 	call	#__system___string_cmp
03b40     00 FA 0D F2 | 	cmp	result1, #0 wz
03b44     84 00 90 AD |  if_e	jmp	#LR__0233
03b48     5F 01 00 FF 
03b4c     8E 15 06 F6 | 	mov	arg02, ##@LR__4721
03b50     0F 13 02 F6 | 	mov	arg01, local01
03b54     B0 8C B1 FD | 	call	#__system___string_cmp
03b58     00 FA 0D F2 | 	cmp	result1, #0 wz
03b5c     74 00 90 AD |  if_e	jmp	#LR__0234
03b60     78 00 90 FD | 	jmp	#LR__0235
03b64                 | LR__0220
03b64     01 FA 05 F6 | 	mov	result1, #1
03b68     74 00 90 FD | 	jmp	#LR__0236
03b6c                 | LR__0221
03b6c     02 FA 05 F6 | 	mov	result1, #2
03b70     6C 00 90 FD | 	jmp	#LR__0236
03b74                 | LR__0222
03b74     1B FA 05 F6 | 	mov	result1, #27
03b78     64 00 90 FD | 	jmp	#LR__0236
03b7c                 | LR__0223
03b7c     11 FA 05 F6 | 	mov	result1, #17
03b80     5C 00 90 FD | 	jmp	#LR__0236
03b84                 | LR__0224
03b84     05 FA 05 F6 | 	mov	result1, #5
03b88     54 00 90 FD | 	jmp	#LR__0236
03b8c                 | LR__0225
03b8c     06 FA 05 F6 | 	mov	result1, #6
03b90     4C 00 90 FD | 	jmp	#LR__0236
03b94                 | LR__0226
03b94     12 FA 05 F6 | 	mov	result1, #18
03b98     44 00 90 FD | 	jmp	#LR__0236
03b9c                 | LR__0227
03b9c     13 FA 05 F6 | 	mov	result1, #19
03ba0     3C 00 90 FD | 	jmp	#LR__0236
03ba4                 | LR__0228
03ba4     0C FA 05 F6 | 	mov	result1, #12
03ba8     34 00 90 FD | 	jmp	#LR__0236
03bac                 | LR__0229
03bac     14 FA 05 F6 | 	mov	result1, #20
03bb0     2C 00 90 FD | 	jmp	#LR__0236
03bb4                 | LR__0230
03bb4     15 FA 05 F6 | 	mov	result1, #21
03bb8     24 00 90 FD | 	jmp	#LR__0236
03bbc                 | LR__0231
03bbc     16 FA 05 F6 | 	mov	result1, #22
03bc0     1C 00 90 FD | 	jmp	#LR__0236
03bc4                 | LR__0232
03bc4     FF FB 05 F6 | 	mov	result1, #511
03bc8     14 00 90 FD | 	jmp	#LR__0236
03bcc                 | LR__0233
03bcc     0F FA 05 F6 | 	mov	result1, #15
03bd0     0C 00 90 FD | 	jmp	#LR__0236
03bd4                 | LR__0234
03bd4     10 FA 05 F6 | 	mov	result1, #16
03bd8     04 00 90 FD | 	jmp	#LR__0236
03bdc                 | LR__0235
03bdc     00 FA 05 F6 | 	mov	result1, #0
03be0                 | LR__0236
03be0     A7 F0 03 F6 | 	mov	ptra, fp
03be4     B2 00 A0 FD | 	call	#popregs_
03be8                 | _isseparator_ret
03be8     2D 00 64 FD | 	ret
03bec                 | 
03bec                 | ' 
03bec                 | ' 
03bec                 | ' function iscommand(s as string) as ubyte
03bec                 | _iscommand
03bec     01 4A 05 F6 | 	mov	COUNT_, #1
03bf0     A8 00 A0 FD | 	call	#pushregs_
03bf4                 | ' 
03bf4                 | ' select case s
03bf4     09 1F 02 F6 | 	mov	local01, arg01
03bf8     5F 01 00 FF 
03bfc     92 15 06 F6 | 	mov	arg02, ##@LR__4723
03c00     0F 13 02 F6 | 	mov	arg01, local01
03c04     00 8C B1 FD | 	call	#__system___string_cmp
03c08     00 FA 0D F2 | 	cmp	result1, #0 wz
03c0c     74 08 90 AD |  if_e	jmp	#LR__0240
03c10     5F 01 00 FF 
03c14     97 15 06 F6 | 	mov	arg02, ##@LR__4724
03c18     0F 13 02 F6 | 	mov	arg01, local01
03c1c     E8 8B B1 FD | 	call	#__system___string_cmp
03c20     00 FA 0D F2 | 	cmp	result1, #0 wz
03c24     64 08 90 AD |  if_e	jmp	#LR__0241
03c28     5F 01 00 FF 
03c2c     9A 15 06 F6 | 	mov	arg02, ##@LR__4725
03c30     0F 13 02 F6 | 	mov	arg01, local01
03c34     D0 8B B1 FD | 	call	#__system___string_cmp
03c38     00 FA 0D F2 | 	cmp	result1, #0 wz
03c3c     54 08 90 AD |  if_e	jmp	#LR__0242
03c40     5F 01 00 FF 
03c44     9E 15 06 F6 | 	mov	arg02, ##@LR__4726
03c48     0F 13 02 F6 | 	mov	arg01, local01
03c4c     B8 8B B1 FD | 	call	#__system___string_cmp
03c50     00 FA 0D F2 | 	cmp	result1, #0 wz
03c54     44 08 90 AD |  if_e	jmp	#LR__0243
03c58     5F 01 00 FF 
03c5c     A3 15 06 F6 | 	mov	arg02, ##@LR__4727
03c60     0F 13 02 F6 | 	mov	arg01, local01
03c64     A0 8B B1 FD | 	call	#__system___string_cmp
03c68     00 FA 0D F2 | 	cmp	result1, #0 wz
03c6c     34 08 90 AD |  if_e	jmp	#LR__0244
03c70     5F 01 00 FF 
03c74     A7 15 06 F6 | 	mov	arg02, ##@LR__4728
03c78     0F 13 02 F6 | 	mov	arg01, local01
03c7c     88 8B B1 FD | 	call	#__system___string_cmp
03c80     00 FA 0D F2 | 	cmp	result1, #0 wz
03c84     24 08 90 AD |  if_e	jmp	#LR__0245
03c88     5F 01 00 FF 
03c8c     AE 15 06 F6 | 	mov	arg02, ##@LR__4729
03c90     0F 13 02 F6 | 	mov	arg01, local01
03c94     70 8B B1 FD | 	call	#__system___string_cmp
03c98     00 FA 0D F2 | 	cmp	result1, #0 wz
03c9c     14 08 90 AD |  if_e	jmp	#LR__0246
03ca0     5F 01 00 FF 
03ca4     B2 15 06 F6 | 	mov	arg02, ##@LR__4730
03ca8     0F 13 02 F6 | 	mov	arg01, local01
03cac     58 8B B1 FD | 	call	#__system___string_cmp
03cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb4     04 08 90 AD |  if_e	jmp	#LR__0247
03cb8     5F 01 00 FF 
03cbc     B8 15 06 F6 | 	mov	arg02, ##@LR__4731
03cc0     0F 13 02 F6 | 	mov	arg01, local01
03cc4     40 8B B1 FD | 	call	#__system___string_cmp
03cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
03ccc     F4 07 90 AD |  if_e	jmp	#LR__0248
03cd0     5F 01 00 FF 
03cd4     BC 15 06 F6 | 	mov	arg02, ##@LR__4732
03cd8     0F 13 02 F6 | 	mov	arg01, local01
03cdc     28 8B B1 FD | 	call	#__system___string_cmp
03ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce4     E4 07 90 AD |  if_e	jmp	#LR__0249
03ce8     5F 01 00 FF 
03cec     C2 15 06 F6 | 	mov	arg02, ##@LR__4733
03cf0     0F 13 02 F6 | 	mov	arg01, local01
03cf4     10 8B B1 FD | 	call	#__system___string_cmp
03cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
03cfc     D4 07 90 AD |  if_e	jmp	#LR__0250
03d00     5F 01 00 FF 
03d04     C5 15 06 F6 | 	mov	arg02, ##@LR__4734
03d08     0F 13 02 F6 | 	mov	arg01, local01
03d0c     F8 8A B1 FD | 	call	#__system___string_cmp
03d10     00 FA 0D F2 | 	cmp	result1, #0 wz
03d14     C4 07 90 AD |  if_e	jmp	#LR__0251
03d18     5F 01 00 FF 
03d1c     CB 15 06 F6 | 	mov	arg02, ##@LR__4735
03d20     0F 13 02 F6 | 	mov	arg01, local01
03d24     E0 8A B1 FD | 	call	#__system___string_cmp
03d28     00 FA 0D F2 | 	cmp	result1, #0 wz
03d2c     B4 07 90 AD |  if_e	jmp	#LR__0252
03d30     5F 01 00 FF 
03d34     CF 15 06 F6 | 	mov	arg02, ##@LR__4736
03d38     0F 13 02 F6 | 	mov	arg01, local01
03d3c     C8 8A B1 FD | 	call	#__system___string_cmp
03d40     00 FA 0D F2 | 	cmp	result1, #0 wz
03d44     A4 07 90 AD |  if_e	jmp	#LR__0253
03d48     5F 01 00 FF 
03d4c     D6 15 06 F6 | 	mov	arg02, ##@LR__4737
03d50     0F 13 02 F6 | 	mov	arg01, local01
03d54     B0 8A B1 FD | 	call	#__system___string_cmp
03d58     00 FA 0D F2 | 	cmp	result1, #0 wz
03d5c     94 07 90 AD |  if_e	jmp	#LR__0254
03d60     5F 01 00 FF 
03d64     DD 15 06 F6 | 	mov	arg02, ##@LR__4738
03d68     0F 13 02 F6 | 	mov	arg01, local01
03d6c     98 8A B1 FD | 	call	#__system___string_cmp
03d70     00 FA 0D F2 | 	cmp	result1, #0 wz
03d74     84 07 90 AD |  if_e	jmp	#LR__0255
03d78     5F 01 00 FF 
03d7c     E4 15 06 F6 | 	mov	arg02, ##@LR__4739
03d80     0F 13 02 F6 | 	mov	arg01, local01
03d84     80 8A B1 FD | 	call	#__system___string_cmp
03d88     00 FA 0D F2 | 	cmp	result1, #0 wz
03d8c     74 07 90 AD |  if_e	jmp	#LR__0256
03d90     5F 01 00 FF 
03d94     EE 15 06 F6 | 	mov	arg02, ##@LR__4740
03d98     0F 13 02 F6 | 	mov	arg01, local01
03d9c     68 8A B1 FD | 	call	#__system___string_cmp
03da0     00 FA 0D F2 | 	cmp	result1, #0 wz
03da4     64 07 90 AD |  if_e	jmp	#LR__0257
03da8     5F 01 00 FF 
03dac     F2 15 06 F6 | 	mov	arg02, ##@LR__4741
03db0     0F 13 02 F6 | 	mov	arg01, local01
03db4     50 8A B1 FD | 	call	#__system___string_cmp
03db8     00 FA 0D F2 | 	cmp	result1, #0 wz
03dbc     54 07 90 AD |  if_e	jmp	#LR__0258
03dc0     5F 01 00 FF 
03dc4     F6 15 06 F6 | 	mov	arg02, ##@LR__4742
03dc8     0F 13 02 F6 | 	mov	arg01, local01
03dcc     38 8A B1 FD | 	call	#__system___string_cmp
03dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd4     44 07 90 AD |  if_e	jmp	#LR__0259
03dd8     5F 01 00 FF 
03ddc     FA 15 06 F6 | 	mov	arg02, ##@LR__4743
03de0     0F 13 02 F6 | 	mov	arg01, local01
03de4     20 8A B1 FD | 	call	#__system___string_cmp
03de8     00 FA 0D F2 | 	cmp	result1, #0 wz
03dec     34 07 90 AD |  if_e	jmp	#LR__0260
03df0     5F 01 00 FF 
03df4     FE 15 06 F6 | 	mov	arg02, ##@LR__4744
03df8     0F 13 02 F6 | 	mov	arg01, local01
03dfc     08 8A B1 FD | 	call	#__system___string_cmp
03e00     00 FA 0D F2 | 	cmp	result1, #0 wz
03e04     24 07 90 AD |  if_e	jmp	#LR__0261
03e08     60 01 00 FF 
03e0c     04 14 06 F6 | 	mov	arg02, ##@LR__4745
03e10     0F 13 02 F6 | 	mov	arg01, local01
03e14     F0 89 B1 FD | 	call	#__system___string_cmp
03e18     00 FA 0D F2 | 	cmp	result1, #0 wz
03e1c     14 07 90 AD |  if_e	jmp	#LR__0262
03e20     60 01 00 FF 
03e24     09 14 06 F6 | 	mov	arg02, ##@LR__4746
03e28     0F 13 02 F6 | 	mov	arg01, local01
03e2c     D8 89 B1 FD | 	call	#__system___string_cmp
03e30     00 FA 0D F2 | 	cmp	result1, #0 wz
03e34     04 07 90 AD |  if_e	jmp	#LR__0263
03e38     60 01 00 FF 
03e3c     0D 14 06 F6 | 	mov	arg02, ##@LR__4747
03e40     0F 13 02 F6 | 	mov	arg01, local01
03e44     C0 89 B1 FD | 	call	#__system___string_cmp
03e48     00 FA 0D F2 | 	cmp	result1, #0 wz
03e4c     F4 06 90 AD |  if_e	jmp	#LR__0264
03e50     60 01 00 FF 
03e54     12 14 06 F6 | 	mov	arg02, ##@LR__4748
03e58     0F 13 02 F6 | 	mov	arg01, local01
03e5c     A8 89 B1 FD | 	call	#__system___string_cmp
03e60     00 FA 0D F2 | 	cmp	result1, #0 wz
03e64     E4 06 90 AD |  if_e	jmp	#LR__0265
03e68     60 01 00 FF 
03e6c     1A 14 06 F6 | 	mov	arg02, ##@LR__4749
03e70     0F 13 02 F6 | 	mov	arg01, local01
03e74     90 89 B1 FD | 	call	#__system___string_cmp
03e78     00 FA 0D F2 | 	cmp	result1, #0 wz
03e7c     D4 06 90 AD |  if_e	jmp	#LR__0266
03e80     60 01 00 FF 
03e84     1E 14 06 F6 | 	mov	arg02, ##@LR__4750
03e88     0F 13 02 F6 | 	mov	arg01, local01
03e8c     78 89 B1 FD | 	call	#__system___string_cmp
03e90     00 FA 0D F2 | 	cmp	result1, #0 wz
03e94     C4 06 90 AD |  if_e	jmp	#LR__0267
03e98     60 01 00 FF 
03e9c     23 14 06 F6 | 	mov	arg02, ##@LR__4751
03ea0     0F 13 02 F6 | 	mov	arg01, local01
03ea4     60 89 B1 FD | 	call	#__system___string_cmp
03ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eac     B4 06 90 AD |  if_e	jmp	#LR__0268
03eb0     60 01 00 FF 
03eb4     27 14 06 F6 | 	mov	arg02, ##@LR__4752
03eb8     0F 13 02 F6 | 	mov	arg01, local01
03ebc     48 89 B1 FD | 	call	#__system___string_cmp
03ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec4     A4 06 90 AD |  if_e	jmp	#LR__0269
03ec8     60 01 00 FF 
03ecc     2C 14 06 F6 | 	mov	arg02, ##@LR__4753
03ed0     0F 13 02 F6 | 	mov	arg01, local01
03ed4     30 89 B1 FD | 	call	#__system___string_cmp
03ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
03edc     94 06 90 AD |  if_e	jmp	#LR__0270
03ee0     60 01 00 FF 
03ee4     30 14 06 F6 | 	mov	arg02, ##@LR__4754
03ee8     0F 13 02 F6 | 	mov	arg01, local01
03eec     18 89 B1 FD | 	call	#__system___string_cmp
03ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef4     84 06 90 AD |  if_e	jmp	#LR__0271
03ef8     60 01 00 FF 
03efc     33 14 06 F6 | 	mov	arg02, ##@LR__4755
03f00     0F 13 02 F6 | 	mov	arg01, local01
03f04     00 89 B1 FD | 	call	#__system___string_cmp
03f08     00 FA 0D F2 | 	cmp	result1, #0 wz
03f0c     74 06 90 AD |  if_e	jmp	#LR__0272
03f10     60 01 00 FF 
03f14     39 14 06 F6 | 	mov	arg02, ##@LR__4756
03f18     0F 13 02 F6 | 	mov	arg01, local01
03f1c     E8 88 B1 FD | 	call	#__system___string_cmp
03f20     00 FA 0D F2 | 	cmp	result1, #0 wz
03f24     64 06 90 AD |  if_e	jmp	#LR__0273
03f28     60 01 00 FF 
03f2c     3D 14 06 F6 | 	mov	arg02, ##@LR__4757
03f30     0F 13 02 F6 | 	mov	arg01, local01
03f34     D0 88 B1 FD | 	call	#__system___string_cmp
03f38     00 FA 0D F2 | 	cmp	result1, #0 wz
03f3c     54 06 90 AD |  if_e	jmp	#LR__0274
03f40     60 01 00 FF 
03f44     42 14 06 F6 | 	mov	arg02, ##@LR__4758
03f48     0F 13 02 F6 | 	mov	arg01, local01
03f4c     B8 88 B1 FD | 	call	#__system___string_cmp
03f50     00 FA 0D F2 | 	cmp	result1, #0 wz
03f54     44 06 90 AD |  if_e	jmp	#LR__0275
03f58     60 01 00 FF 
03f5c     45 14 06 F6 | 	mov	arg02, ##@LR__4759
03f60     0F 13 02 F6 | 	mov	arg01, local01
03f64     A0 88 B1 FD | 	call	#__system___string_cmp
03f68     00 FA 0D F2 | 	cmp	result1, #0 wz
03f6c     34 06 90 AD |  if_e	jmp	#LR__0276
03f70     60 01 00 FF 
03f74     48 14 06 F6 | 	mov	arg02, ##@LR__4760
03f78     0F 13 02 F6 | 	mov	arg01, local01
03f7c     88 88 B1 FD | 	call	#__system___string_cmp
03f80     00 FA 0D F2 | 	cmp	result1, #0 wz
03f84     24 06 90 AD |  if_e	jmp	#LR__0277
03f88     60 01 00 FF 
03f8c     4C 14 06 F6 | 	mov	arg02, ##@LR__4761
03f90     0F 13 02 F6 | 	mov	arg01, local01
03f94     70 88 B1 FD | 	call	#__system___string_cmp
03f98     00 FA 0D F2 | 	cmp	result1, #0 wz
03f9c     14 06 90 AD |  if_e	jmp	#LR__0278
03fa0     60 01 00 FF 
03fa4     4F 14 06 F6 | 	mov	arg02, ##@LR__4762
03fa8     0F 13 02 F6 | 	mov	arg01, local01
03fac     58 88 B1 FD | 	call	#__system___string_cmp
03fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb4     04 06 90 AD |  if_e	jmp	#LR__0279
03fb8     60 01 00 FF 
03fbc     53 14 06 F6 | 	mov	arg02, ##@LR__4763
03fc0     0F 13 02 F6 | 	mov	arg01, local01
03fc4     40 88 B1 FD | 	call	#__system___string_cmp
03fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
03fcc     F4 05 90 AD |  if_e	jmp	#LR__0280
03fd0     60 01 00 FF 
03fd4     58 14 06 F6 | 	mov	arg02, ##@LR__4764
03fd8     0F 13 02 F6 | 	mov	arg01, local01
03fdc     28 88 B1 FD | 	call	#__system___string_cmp
03fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe4     E4 05 90 AD |  if_e	jmp	#LR__0281
03fe8     60 01 00 FF 
03fec     5B 14 06 F6 | 	mov	arg02, ##@LR__4765
03ff0     0F 13 02 F6 | 	mov	arg01, local01
03ff4     10 88 B1 FD | 	call	#__system___string_cmp
03ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
03ffc     D4 05 90 AD |  if_e	jmp	#LR__0282
04000     60 01 00 FF 
04004     60 14 06 F6 | 	mov	arg02, ##@LR__4766
04008     0F 13 02 F6 | 	mov	arg01, local01
0400c     F8 87 B1 FD | 	call	#__system___string_cmp
04010     00 FA 0D F2 | 	cmp	result1, #0 wz
04014     C4 05 90 AD |  if_e	jmp	#LR__0283
04018     60 01 00 FF 
0401c     64 14 06 F6 | 	mov	arg02, ##@LR__4767
04020     0F 13 02 F6 | 	mov	arg01, local01
04024     E0 87 B1 FD | 	call	#__system___string_cmp
04028     00 FA 0D F2 | 	cmp	result1, #0 wz
0402c     B4 05 90 AD |  if_e	jmp	#LR__0284
04030     60 01 00 FF 
04034     6A 14 06 F6 | 	mov	arg02, ##@LR__4768
04038     0F 13 02 F6 | 	mov	arg01, local01
0403c     C8 87 B1 FD | 	call	#__system___string_cmp
04040     00 FA 0D F2 | 	cmp	result1, #0 wz
04044     A4 05 90 AD |  if_e	jmp	#LR__0285
04048     60 01 00 FF 
0404c     6F 14 06 F6 | 	mov	arg02, ##@LR__4769
04050     0F 13 02 F6 | 	mov	arg01, local01
04054     B0 87 B1 FD | 	call	#__system___string_cmp
04058     00 FA 0D F2 | 	cmp	result1, #0 wz
0405c     94 05 90 AD |  if_e	jmp	#LR__0286
04060     60 01 00 FF 
04064     72 14 06 F6 | 	mov	arg02, ##@LR__4770
04068     0F 13 02 F6 | 	mov	arg01, local01
0406c     98 87 B1 FD | 	call	#__system___string_cmp
04070     00 FA 0D F2 | 	cmp	result1, #0 wz
04074     84 05 90 AD |  if_e	jmp	#LR__0287
04078     60 01 00 FF 
0407c     78 14 06 F6 | 	mov	arg02, ##@LR__4771
04080     0F 13 02 F6 | 	mov	arg01, local01
04084     80 87 B1 FD | 	call	#__system___string_cmp
04088     00 FA 0D F2 | 	cmp	result1, #0 wz
0408c     74 05 90 AD |  if_e	jmp	#LR__0288
04090     60 01 00 FF 
04094     7C 14 06 F6 | 	mov	arg02, ##@LR__4772
04098     0F 13 02 F6 | 	mov	arg01, local01
0409c     68 87 B1 FD | 	call	#__system___string_cmp
040a0     00 FA 0D F2 | 	cmp	result1, #0 wz
040a4     64 05 90 AD |  if_e	jmp	#LR__0289
040a8     60 01 00 FF 
040ac     81 14 06 F6 | 	mov	arg02, ##@LR__4773
040b0     0F 13 02 F6 | 	mov	arg01, local01
040b4     50 87 B1 FD | 	call	#__system___string_cmp
040b8     00 FA 0D F2 | 	cmp	result1, #0 wz
040bc     54 05 90 AD |  if_e	jmp	#LR__0290
040c0     60 01 00 FF 
040c4     84 14 06 F6 | 	mov	arg02, ##@LR__4774
040c8     0F 13 02 F6 | 	mov	arg01, local01
040cc     38 87 B1 FD | 	call	#__system___string_cmp
040d0     00 FA 0D F2 | 	cmp	result1, #0 wz
040d4     44 05 90 AD |  if_e	jmp	#LR__0291
040d8     60 01 00 FF 
040dc     8A 14 06 F6 | 	mov	arg02, ##@LR__4775
040e0     0F 13 02 F6 | 	mov	arg01, local01
040e4     20 87 B1 FD | 	call	#__system___string_cmp
040e8     00 FA 0D F2 | 	cmp	result1, #0 wz
040ec     34 05 90 AD |  if_e	jmp	#LR__0292
040f0     60 01 00 FF 
040f4     8D 14 06 F6 | 	mov	arg02, ##@LR__4776
040f8     0F 13 02 F6 | 	mov	arg01, local01
040fc     08 87 B1 FD | 	call	#__system___string_cmp
04100     00 FA 0D F2 | 	cmp	result1, #0 wz
04104     24 05 90 AD |  if_e	jmp	#LR__0293
04108     60 01 00 FF 
0410c     96 14 06 F6 | 	mov	arg02, ##@LR__4777
04110     0F 13 02 F6 | 	mov	arg01, local01
04114     F0 86 B1 FD | 	call	#__system___string_cmp
04118     00 FA 0D F2 | 	cmp	result1, #0 wz
0411c     14 05 90 AD |  if_e	jmp	#LR__0294
04120     60 01 00 FF 
04124     9C 14 06 F6 | 	mov	arg02, ##@LR__4778
04128     0F 13 02 F6 | 	mov	arg01, local01
0412c     D8 86 B1 FD | 	call	#__system___string_cmp
04130     00 FA 0D F2 | 	cmp	result1, #0 wz
04134     04 05 90 AD |  if_e	jmp	#LR__0295
04138     60 01 00 FF 
0413c     A2 14 06 F6 | 	mov	arg02, ##@LR__4779
04140     0F 13 02 F6 | 	mov	arg01, local01
04144     C0 86 B1 FD | 	call	#__system___string_cmp
04148     00 FA 0D F2 | 	cmp	result1, #0 wz
0414c     F4 04 90 AD |  if_e	jmp	#LR__0296
04150     60 01 00 FF 
04154     AB 14 06 F6 | 	mov	arg02, ##@LR__4780
04158     0F 13 02 F6 | 	mov	arg01, local01
0415c     A8 86 B1 FD | 	call	#__system___string_cmp
04160     00 FA 0D F2 | 	cmp	result1, #0 wz
04164     E4 04 90 AD |  if_e	jmp	#LR__0297
04168     60 01 00 FF 
0416c     B5 14 06 F6 | 	mov	arg02, ##@LR__4781
04170     0F 13 02 F6 | 	mov	arg01, local01
04174     90 86 B1 FD | 	call	#__system___string_cmp
04178     00 FA 0D F2 | 	cmp	result1, #0 wz
0417c     D4 04 90 AD |  if_e	jmp	#LR__0298
04180     60 01 00 FF 
04184     BE 14 06 F6 | 	mov	arg02, ##@LR__4782
04188     0F 13 02 F6 | 	mov	arg01, local01
0418c     78 86 B1 FD | 	call	#__system___string_cmp
04190     00 FA 0D F2 | 	cmp	result1, #0 wz
04194     C4 04 90 AD |  if_e	jmp	#LR__0299
04198     60 01 00 FF 
0419c     C3 14 06 F6 | 	mov	arg02, ##@LR__4783
041a0     0F 13 02 F6 | 	mov	arg01, local01
041a4     60 86 B1 FD | 	call	#__system___string_cmp
041a8     00 FA 0D F2 | 	cmp	result1, #0 wz
041ac     B4 04 90 AD |  if_e	jmp	#LR__0300
041b0     60 01 00 FF 
041b4     C8 14 06 F6 | 	mov	arg02, ##@LR__4784
041b8     0F 13 02 F6 | 	mov	arg01, local01
041bc     48 86 B1 FD | 	call	#__system___string_cmp
041c0     00 FA 0D F2 | 	cmp	result1, #0 wz
041c4     A4 04 90 AD |  if_e	jmp	#LR__0301
041c8     60 01 00 FF 
041cc     CC 14 06 F6 | 	mov	arg02, ##@LR__4785
041d0     0F 13 02 F6 | 	mov	arg01, local01
041d4     30 86 B1 FD | 	call	#__system___string_cmp
041d8     00 FA 0D F2 | 	cmp	result1, #0 wz
041dc     94 04 90 AD |  if_e	jmp	#LR__0302
041e0     60 01 00 FF 
041e4     D1 14 06 F6 | 	mov	arg02, ##@LR__4786
041e8     0F 13 02 F6 | 	mov	arg01, local01
041ec     18 86 B1 FD | 	call	#__system___string_cmp
041f0     00 FA 0D F2 | 	cmp	result1, #0 wz
041f4     84 04 90 AD |  if_e	jmp	#LR__0303
041f8     60 01 00 FF 
041fc     DA 14 06 F6 | 	mov	arg02, ##@LR__4787
04200     0F 13 02 F6 | 	mov	arg01, local01
04204     00 86 B1 FD | 	call	#__system___string_cmp
04208     00 FA 0D F2 | 	cmp	result1, #0 wz
0420c     74 04 90 AD |  if_e	jmp	#LR__0304
04210     60 01 00 FF 
04214     DF 14 06 F6 | 	mov	arg02, ##@LR__4788
04218     0F 13 02 F6 | 	mov	arg01, local01
0421c     E8 85 B1 FD | 	call	#__system___string_cmp
04220     00 FA 0D F2 | 	cmp	result1, #0 wz
04224     64 04 90 AD |  if_e	jmp	#LR__0305
04228     60 01 00 FF 
0422c     E5 14 06 F6 | 	mov	arg02, ##@LR__4789
04230     0F 13 02 F6 | 	mov	arg01, local01
04234     D0 85 B1 FD | 	call	#__system___string_cmp
04238     00 FA 0D F2 | 	cmp	result1, #0 wz
0423c     54 04 90 AD |  if_e	jmp	#LR__0306
04240     60 01 00 FF 
04244     E7 14 06 F6 | 	mov	arg02, ##@LR__4790
04248     0F 13 02 F6 | 	mov	arg01, local01
0424c     B8 85 B1 FD | 	call	#__system___string_cmp
04250     00 FA 0D F2 | 	cmp	result1, #0 wz
04254     44 04 90 AD |  if_e	jmp	#LR__0307
04258     60 01 00 FF 
0425c     EB 14 06 F6 | 	mov	arg02, ##@LR__4791
04260     0F 13 02 F6 | 	mov	arg01, local01
04264     A0 85 B1 FD | 	call	#__system___string_cmp
04268     00 FA 0D F2 | 	cmp	result1, #0 wz
0426c     34 04 90 AD |  if_e	jmp	#LR__0308
04270     60 01 00 FF 
04274     F3 14 06 F6 | 	mov	arg02, ##@LR__4792
04278     0F 13 02 F6 | 	mov	arg01, local01
0427c     88 85 B1 FD | 	call	#__system___string_cmp
04280     00 FA 0D F2 | 	cmp	result1, #0 wz
04284     24 04 90 AD |  if_e	jmp	#LR__0309
04288     60 01 00 FF 
0428c     F7 14 06 F6 | 	mov	arg02, ##@LR__4793
04290     0F 13 02 F6 | 	mov	arg01, local01
04294     70 85 B1 FD | 	call	#__system___string_cmp
04298     00 FA 0D F2 | 	cmp	result1, #0 wz
0429c     14 04 90 AD |  if_e	jmp	#LR__0310
042a0     60 01 00 FF 
042a4     FC 14 06 F6 | 	mov	arg02, ##@LR__4794
042a8     0F 13 02 F6 | 	mov	arg01, local01
042ac     58 85 B1 FD | 	call	#__system___string_cmp
042b0     00 FA 0D F2 | 	cmp	result1, #0 wz
042b4     04 04 90 AD |  if_e	jmp	#LR__0311
042b8     60 01 00 FF 
042bc     FF 14 06 F6 | 	mov	arg02, ##@LR__4795
042c0     0F 13 02 F6 | 	mov	arg01, local01
042c4     40 85 B1 FD | 	call	#__system___string_cmp
042c8     00 FA 0D F2 | 	cmp	result1, #0 wz
042cc     F4 03 90 AD |  if_e	jmp	#LR__0312
042d0     60 01 00 FF 
042d4     08 15 06 F6 | 	mov	arg02, ##@LR__4796
042d8     0F 13 02 F6 | 	mov	arg01, local01
042dc     28 85 B1 FD | 	call	#__system___string_cmp
042e0     00 FA 0D F2 | 	cmp	result1, #0 wz
042e4     E4 03 90 AD |  if_e	jmp	#LR__0313
042e8     60 01 00 FF 
042ec     0F 15 06 F6 | 	mov	arg02, ##@LR__4797
042f0     0F 13 02 F6 | 	mov	arg01, local01
042f4     10 85 B1 FD | 	call	#__system___string_cmp
042f8     00 FA 0D F2 | 	cmp	result1, #0 wz
042fc     D4 03 90 AD |  if_e	jmp	#LR__0314
04300     60 01 00 FF 
04304     16 15 06 F6 | 	mov	arg02, ##@LR__4798
04308     0F 13 02 F6 | 	mov	arg01, local01
0430c     F8 84 B1 FD | 	call	#__system___string_cmp
04310     00 FA 0D F2 | 	cmp	result1, #0 wz
04314     C4 03 90 AD |  if_e	jmp	#LR__0315
04318     60 01 00 FF 
0431c     1D 15 06 F6 | 	mov	arg02, ##@LR__4799
04320     0F 13 02 F6 | 	mov	arg01, local01
04324     E0 84 B1 FD | 	call	#__system___string_cmp
04328     00 FA 0D F2 | 	cmp	result1, #0 wz
0432c     B4 03 90 AD |  if_e	jmp	#LR__0316
04330     60 01 00 FF 
04334     28 15 06 F6 | 	mov	arg02, ##@LR__4800
04338     0F 13 02 F6 | 	mov	arg01, local01
0433c     C8 84 B1 FD | 	call	#__system___string_cmp
04340     00 FA 0D F2 | 	cmp	result1, #0 wz
04344     A4 03 90 AD |  if_e	jmp	#LR__0317
04348     60 01 00 FF 
0434c     2F 15 06 F6 | 	mov	arg02, ##@LR__4801
04350     0F 13 02 F6 | 	mov	arg01, local01
04354     B0 84 B1 FD | 	call	#__system___string_cmp
04358     00 FA 0D F2 | 	cmp	result1, #0 wz
0435c     94 03 90 AD |  if_e	jmp	#LR__0318
04360     60 01 00 FF 
04364     37 15 06 F6 | 	mov	arg02, ##@LR__4802
04368     0F 13 02 F6 | 	mov	arg01, local01
0436c     98 84 B1 FD | 	call	#__system___string_cmp
04370     00 FA 0D F2 | 	cmp	result1, #0 wz
04374     84 03 90 AD |  if_e	jmp	#LR__0319
04378     60 01 00 FF 
0437c     3D 15 06 F6 | 	mov	arg02, ##@LR__4803
04380     0F 13 02 F6 | 	mov	arg01, local01
04384     80 84 B1 FD | 	call	#__system___string_cmp
04388     00 FA 0D F2 | 	cmp	result1, #0 wz
0438c     74 03 90 AD |  if_e	jmp	#LR__0320
04390     60 01 00 FF 
04394     41 15 06 F6 | 	mov	arg02, ##@LR__4804
04398     0F 13 02 F6 | 	mov	arg01, local01
0439c     68 84 B1 FD | 	call	#__system___string_cmp
043a0     00 FA 0D F2 | 	cmp	result1, #0 wz
043a4     64 03 90 AD |  if_e	jmp	#LR__0321
043a8     60 01 00 FF 
043ac     48 15 06 F6 | 	mov	arg02, ##@LR__4805
043b0     0F 13 02 F6 | 	mov	arg01, local01
043b4     50 84 B1 FD | 	call	#__system___string_cmp
043b8     00 FA 0D F2 | 	cmp	result1, #0 wz
043bc     54 03 90 AD |  if_e	jmp	#LR__0322
043c0     60 01 00 FF 
043c4     4C 15 06 F6 | 	mov	arg02, ##@LR__4806
043c8     0F 13 02 F6 | 	mov	arg01, local01
043cc     38 84 B1 FD | 	call	#__system___string_cmp
043d0     00 FA 0D F2 | 	cmp	result1, #0 wz
043d4     44 03 90 AD |  if_e	jmp	#LR__0323
043d8     60 01 00 FF 
043dc     51 15 06 F6 | 	mov	arg02, ##@LR__4807
043e0     0F 13 02 F6 | 	mov	arg01, local01
043e4     20 84 B1 FD | 	call	#__system___string_cmp
043e8     00 FA 0D F2 | 	cmp	result1, #0 wz
043ec     34 03 90 AD |  if_e	jmp	#LR__0324
043f0     60 01 00 FF 
043f4     58 15 06 F6 | 	mov	arg02, ##@LR__4808
043f8     0F 13 02 F6 | 	mov	arg01, local01
043fc     08 84 B1 FD | 	call	#__system___string_cmp
04400     00 FA 0D F2 | 	cmp	result1, #0 wz
04404     24 03 90 AD |  if_e	jmp	#LR__0325
04408     60 01 00 FF 
0440c     62 15 06 F6 | 	mov	arg02, ##@LR__4809
04410     0F 13 02 F6 | 	mov	arg01, local01
04414     F0 83 B1 FD | 	call	#__system___string_cmp
04418     00 FA 0D F2 | 	cmp	result1, #0 wz
0441c     14 03 90 AD |  if_e	jmp	#LR__0326
04420     60 01 00 FF 
04424     66 15 06 F6 | 	mov	arg02, ##@LR__4810
04428     0F 13 02 F6 | 	mov	arg01, local01
0442c     D8 83 B1 FD | 	call	#__system___string_cmp
04430     00 FA 0D F2 | 	cmp	result1, #0 wz
04434     04 03 90 AD |  if_e	jmp	#LR__0327
04438     60 01 00 FF 
0443c     6E 15 06 F6 | 	mov	arg02, ##@LR__4811
04440     0F 13 02 F6 | 	mov	arg01, local01
04444     C0 83 B1 FD | 	call	#__system___string_cmp
04448     00 FA 0D F2 | 	cmp	result1, #0 wz
0444c     F4 02 90 AD |  if_e	jmp	#LR__0328
04450     60 01 00 FF 
04454     72 15 06 F6 | 	mov	arg02, ##@LR__4812
04458     0F 13 02 F6 | 	mov	arg01, local01
0445c     A8 83 B1 FD | 	call	#__system___string_cmp
04460     00 FA 0D F2 | 	cmp	result1, #0 wz
04464     E4 02 90 AD |  if_e	jmp	#LR__0329
04468     60 01 00 FF 
0446c     78 15 06 F6 | 	mov	arg02, ##@LR__4813
04470     0F 13 02 F6 | 	mov	arg01, local01
04474     90 83 B1 FD | 	call	#__system___string_cmp
04478     00 FA 0D F2 | 	cmp	result1, #0 wz
0447c     D4 02 90 AD |  if_e	jmp	#LR__0330
04480     D8 02 90 FD | 	jmp	#LR__0331
04484                 | LR__0240
04484     5C FA 05 F6 | 	mov	result1, #92
04488     D4 02 90 FD | 	jmp	#LR__0332
0448c                 | LR__0241
0448c     5C FA 05 F6 | 	mov	result1, #92
04490     CC 02 90 FD | 	jmp	#LR__0332
04494                 | LR__0242
04494     47 FA 05 F6 | 	mov	result1, #71
04498     C4 02 90 FD | 	jmp	#LR__0332
0449c                 | LR__0243
0449c     59 FA 05 F6 | 	mov	result1, #89
044a0     BC 02 90 FD | 	jmp	#LR__0332
044a4                 | LR__0244
044a4     59 FA 05 F6 | 	mov	result1, #89
044a8     B4 02 90 FD | 	jmp	#LR__0332
044ac                 | LR__0245
044ac     45 FA 05 F6 | 	mov	result1, #69
044b0     AC 02 90 FD | 	jmp	#LR__0332
044b4                 | LR__0246
044b4     45 FA 05 F6 | 	mov	result1, #69
044b8     A4 02 90 FD | 	jmp	#LR__0332
044bc                 | LR__0247
044bc     69 FA 05 F6 | 	mov	result1, #105
044c0     9C 02 90 FD | 	jmp	#LR__0332
044c4                 | LR__0248
044c4     40 FA 05 F6 | 	mov	result1, #64
044c8     94 02 90 FD | 	jmp	#LR__0332
044cc                 | LR__0249
044cc     49 FA 05 F6 | 	mov	result1, #73
044d0     8C 02 90 FD | 	jmp	#LR__0332
044d4                 | LR__0250
044d4     49 FA 05 F6 | 	mov	result1, #73
044d8     84 02 90 FD | 	jmp	#LR__0332
044dc                 | LR__0251
044dc     50 FA 05 F6 | 	mov	result1, #80
044e0     7C 02 90 FD | 	jmp	#LR__0332
044e4                 | LR__0252
044e4     50 FA 05 F6 | 	mov	result1, #80
044e8     74 02 90 FD | 	jmp	#LR__0332
044ec                 | LR__0253
044ec     68 FA 05 F6 | 	mov	result1, #104
044f0     6C 02 90 FD | 	jmp	#LR__0332
044f4                 | LR__0254
044f4     73 FA 05 F6 | 	mov	result1, #115
044f8     64 02 90 FD | 	jmp	#LR__0332
044fc                 | LR__0255
044fc     74 FA 05 F6 | 	mov	result1, #116
04500     5C 02 90 FD | 	jmp	#LR__0332
04504                 | LR__0256
04504     6C FA 05 F6 | 	mov	result1, #108
04508     54 02 90 FD | 	jmp	#LR__0332
0450c                 | LR__0257
0450c     6C FA 05 F6 | 	mov	result1, #108
04510     4C 02 90 FD | 	jmp	#LR__0332
04514                 | LR__0258
04514     89 FA 05 F6 | 	mov	result1, #137
04518     44 02 90 FD | 	jmp	#LR__0332
0451c                 | LR__0259
0451c     72 FA 05 F6 | 	mov	result1, #114
04520     3C 02 90 FD | 	jmp	#LR__0332
04524                 | LR__0260
04524     5D FA 05 F6 | 	mov	result1, #93
04528     34 02 90 FD | 	jmp	#LR__0332
0452c                 | LR__0261
0452c     96 FA 05 F6 | 	mov	result1, #150
04530     2C 02 90 FD | 	jmp	#LR__0332
04534                 | LR__0262
04534     43 FA 05 F6 | 	mov	result1, #67
04538     24 02 90 FD | 	jmp	#LR__0332
0453c                 | LR__0263
0453c     43 FA 05 F6 | 	mov	result1, #67
04540     1C 02 90 FD | 	jmp	#LR__0332
04544                 | LR__0264
04544     5A FA 05 F6 | 	mov	result1, #90
04548     14 02 90 FD | 	jmp	#LR__0332
0454c                 | LR__0265
0454c     46 FA 05 F6 | 	mov	result1, #70
04550     0C 02 90 FD | 	jmp	#LR__0332
04554                 | LR__0266
04554     46 FA 05 F6 | 	mov	result1, #70
04558     04 02 90 FD | 	jmp	#LR__0332
0455c                 | LR__0267
0455c     71 FA 05 F6 | 	mov	result1, #113
04560     FC 01 90 FD | 	jmp	#LR__0332
04564                 | LR__0268
04564     71 FA 05 F6 | 	mov	result1, #113
04568     F4 01 90 FD | 	jmp	#LR__0332
0456c                 | LR__0269
0456c     60 FA 05 F6 | 	mov	result1, #96
04570     EC 01 90 FD | 	jmp	#LR__0332
04574                 | LR__0270
04574     4A FA 05 F6 | 	mov	result1, #74
04578     E4 01 90 FD | 	jmp	#LR__0332
0457c                 | LR__0271
0457c     4A FA 05 F6 | 	mov	result1, #74
04580     DC 01 90 FD | 	jmp	#LR__0332
04584                 | LR__0272
04584     48 FA 05 F6 | 	mov	result1, #72
04588     D4 01 90 FD | 	jmp	#LR__0332
0458c                 | LR__0273
0458c     48 FA 05 F6 | 	mov	result1, #72
04590     CC 01 90 FD | 	jmp	#LR__0332
04594                 | LR__0274
04594     4E FA 05 F6 | 	mov	result1, #78
04598     C4 01 90 FD | 	jmp	#LR__0332
0459c                 | LR__0275
0459c     4E FA 05 F6 | 	mov	result1, #78
045a0     BC 01 90 FD | 	jmp	#LR__0332
045a4                 | LR__0276
045a4     58 FA 05 F6 | 	mov	result1, #88
045a8     B4 01 90 FD | 	jmp	#LR__0332
045ac                 | LR__0277
045ac     5F FA 05 F6 | 	mov	result1, #95
045b0     AC 01 90 FD | 	jmp	#LR__0332
045b4                 | LR__0278
045b4     5F FA 05 F6 | 	mov	result1, #95
045b8     A4 01 90 FD | 	jmp	#LR__0332
045bc                 | LR__0279
045bc     8A FA 05 F6 | 	mov	result1, #138
045c0     9C 01 90 FD | 	jmp	#LR__0332
045c4                 | LR__0280
045c4     4C FA 05 F6 | 	mov	result1, #76
045c8     94 01 90 FD | 	jmp	#LR__0332
045cc                 | LR__0281
045cc     4C FA 05 F6 | 	mov	result1, #76
045d0     8C 01 90 FD | 	jmp	#LR__0332
045d4                 | LR__0282
045d4     52 FA 05 F6 | 	mov	result1, #82
045d8     84 01 90 FD | 	jmp	#LR__0332
045dc                 | LR__0283
045dc     52 FA 05 F6 | 	mov	result1, #82
045e0     7C 01 90 FD | 	jmp	#LR__0332
045e4                 | LR__0284
045e4     97 FA 05 F6 | 	mov	result1, #151
045e8     74 01 90 FD | 	jmp	#LR__0332
045ec                 | LR__0285
045ec     61 FA 05 F6 | 	mov	result1, #97
045f0     6C 01 90 FD | 	jmp	#LR__0332
045f4                 | LR__0286
045f4     61 FA 05 F6 | 	mov	result1, #97
045f8     64 01 90 FD | 	jmp	#LR__0332
045fc                 | LR__0287
045fc     63 FA 05 F6 | 	mov	result1, #99
04600     5C 01 90 FD | 	jmp	#LR__0332
04604                 | LR__0288
04604     41 FA 05 F6 | 	mov	result1, #65
04608     54 01 90 FD | 	jmp	#LR__0332
0460c                 | LR__0289
0460c     4B FA 05 F6 | 	mov	result1, #75
04610     4C 01 90 FD | 	jmp	#LR__0332
04614                 | LR__0290
04614     4B FA 05 F6 | 	mov	result1, #75
04618     44 01 90 FD | 	jmp	#LR__0332
0461c                 | LR__0291
0461c     5E FA 05 F6 | 	mov	result1, #94
04620     3C 01 90 FD | 	jmp	#LR__0332
04624                 | LR__0292
04624     5E FA 05 F6 | 	mov	result1, #94
04628     34 01 90 FD | 	jmp	#LR__0332
0462c                 | LR__0293
0462c     7C FA 05 F6 | 	mov	result1, #124
04630     2C 01 90 FD | 	jmp	#LR__0332
04634                 | LR__0294
04634     7E FA 05 F6 | 	mov	result1, #126
04638     24 01 90 FD | 	jmp	#LR__0332
0463c                 | LR__0295
0463c     7D FA 05 F6 | 	mov	result1, #125
04640     1C 01 90 FD | 	jmp	#LR__0332
04644                 | LR__0296
04644     7F FA 05 F6 | 	mov	result1, #127
04648     14 01 90 FD | 	jmp	#LR__0332
0464c                 | LR__0297
0464c     80 FA 05 F6 | 	mov	result1, #128
04650     0C 01 90 FD | 	jmp	#LR__0332
04654                 | LR__0298
04654     55 FA 05 F6 | 	mov	result1, #85
04658     04 01 90 FD | 	jmp	#LR__0332
0465c                 | LR__0299
0465c     75 FA 05 F6 | 	mov	result1, #117
04660     FC 00 90 FD | 	jmp	#LR__0332
04664                 | LR__0300
04664     42 FA 05 F6 | 	mov	result1, #66
04668     F4 00 90 FD | 	jmp	#LR__0332
0466c                 | LR__0301
0466c     42 FA 05 F6 | 	mov	result1, #66
04670     EC 00 90 FD | 	jmp	#LR__0332
04674                 | LR__0302
04674     95 FA 05 F6 | 	mov	result1, #149
04678     E4 00 90 FD | 	jmp	#LR__0332
0467c                 | LR__0303
0467c     81 FA 05 F6 | 	mov	result1, #129
04680     DC 00 90 FD | 	jmp	#LR__0332
04684                 | LR__0304
04684     81 FA 05 F6 | 	mov	result1, #129
04688     D4 00 90 FD | 	jmp	#LR__0332
0468c                 | LR__0305
0468c     44 FA 05 F6 | 	mov	result1, #68
04690     CC 00 90 FD | 	jmp	#LR__0332
04694                 | LR__0306
04694     44 FA 05 F6 | 	mov	result1, #68
04698     C4 00 90 FD | 	jmp	#LR__0332
0469c                 | LR__0307
0469c     88 FA 05 F6 | 	mov	result1, #136
046a0     BC 00 90 FD | 	jmp	#LR__0332
046a4                 | LR__0308
046a4     92 FA 05 F6 | 	mov	result1, #146
046a8     B4 00 90 FD | 	jmp	#LR__0332
046ac                 | LR__0309
046ac     4D FA 05 F6 | 	mov	result1, #77
046b0     AC 00 90 FD | 	jmp	#LR__0332
046b4                 | LR__0310
046b4     51 FA 05 F6 | 	mov	result1, #81
046b8     A4 00 90 FD | 	jmp	#LR__0332
046bc                 | LR__0311
046bc     51 FA 05 F6 | 	mov	result1, #81
046c0     9C 00 90 FD | 	jmp	#LR__0332
046c4                 | LR__0312
046c4     8E FA 05 F6 | 	mov	result1, #142
046c8     94 00 90 FD | 	jmp	#LR__0332
046cc                 | LR__0313
046cc     90 FA 05 F6 | 	mov	result1, #144
046d0     8C 00 90 FD | 	jmp	#LR__0332
046d4                 | LR__0314
046d4     8D FA 05 F6 | 	mov	result1, #141
046d8     84 00 90 FD | 	jmp	#LR__0332
046dc                 | LR__0315
046dc     8C FA 05 F6 | 	mov	result1, #140
046e0     7C 00 90 FD | 	jmp	#LR__0332
046e4                 | LR__0316
046e4     91 FA 05 F6 | 	mov	result1, #145
046e8     74 00 90 FD | 	jmp	#LR__0332
046ec                 | LR__0317
046ec     8B FA 05 F6 | 	mov	result1, #139
046f0     6C 00 90 FD | 	jmp	#LR__0332
046f4                 | LR__0318
046f4     8F FA 05 F6 | 	mov	result1, #143
046f8     64 00 90 FD | 	jmp	#LR__0332
046fc                 | LR__0319
046fc     75 FA 05 F6 | 	mov	result1, #117
04700     5C 00 90 FD | 	jmp	#LR__0332
04704                 | LR__0320
04704     75 FA 05 F6 | 	mov	result1, #117
04708     54 00 90 FD | 	jmp	#LR__0332
0470c                 | LR__0321
0470c     6D FA 05 F6 | 	mov	result1, #109
04710     4C 00 90 FD | 	jmp	#LR__0332
04714                 | LR__0322
04714     6D FA 05 F6 | 	mov	result1, #109
04718     44 00 90 FD | 	jmp	#LR__0332
0471c                 | LR__0323
0471c     5B FA 05 F6 | 	mov	result1, #91
04720     3C 00 90 FD | 	jmp	#LR__0332
04724                 | LR__0324
04724     56 FA 05 F6 | 	mov	result1, #86
04728     34 00 90 FD | 	jmp	#LR__0332
0472c                 | LR__0325
0472c     70 FA 05 F6 | 	mov	result1, #112
04730     2C 00 90 FD | 	jmp	#LR__0332
04734                 | LR__0326
04734     70 FA 05 F6 | 	mov	result1, #112
04738     24 00 90 FD | 	jmp	#LR__0332
0473c                 | LR__0327
0473c     57 FA 05 F6 | 	mov	result1, #87
04740     1C 00 90 FD | 	jmp	#LR__0332
04744                 | LR__0328
04744     57 FA 05 F6 | 	mov	result1, #87
04748     14 00 90 FD | 	jmp	#LR__0332
0474c                 | LR__0329
0474c     77 FA 05 F6 | 	mov	result1, #119
04750     0C 00 90 FD | 	jmp	#LR__0332
04754                 | LR__0330
04754     78 FA 05 F6 | 	mov	result1, #120
04758     04 00 90 FD | 	jmp	#LR__0332
0475c                 | LR__0331
0475c     00 FA 05 F6 | 	mov	result1, #0
04760                 | LR__0332
04760     A7 F0 03 F6 | 	mov	ptra, fp
04764     B2 00 A0 FD | 	call	#popregs_
04768                 | _iscommand_ret
04768     2D 00 64 FD | 	ret
0476c                 | 
0476c                 | ' 
0476c                 | ' function isfunction(s as string) as ubyte
0476c                 | _isfunction
0476c     01 4A 05 F6 | 	mov	COUNT_, #1
04770     A8 00 A0 FD | 	call	#pushregs_
04774                 | ' 
04774                 | ' select case s
04774     09 1F 02 F6 | 	mov	local01, arg01
04778     60 01 00 FF 
0477c     7E 15 06 F6 | 	mov	arg02, ##@LR__4814
04780     0F 13 02 F6 | 	mov	arg01, local01
04784     80 80 B1 FD | 	call	#__system___string_cmp
04788     00 FA 0D F2 | 	cmp	result1, #0 wz
0478c     D4 02 90 AD |  if_e	jmp	#LR__0340
04790     60 01 00 FF 
04794     82 15 06 F6 | 	mov	arg02, ##@LR__4815
04798     0F 13 02 F6 | 	mov	arg01, local01
0479c     68 80 B1 FD | 	call	#__system___string_cmp
047a0     00 FA 0D F2 | 	cmp	result1, #0 wz
047a4     C4 02 90 AD |  if_e	jmp	#LR__0341
047a8     60 01 00 FF 
047ac     87 15 06 F6 | 	mov	arg02, ##@LR__4816
047b0     0F 13 02 F6 | 	mov	arg01, local01
047b4     50 80 B1 FD | 	call	#__system___string_cmp
047b8     00 FA 0D F2 | 	cmp	result1, #0 wz
047bc     B4 02 90 AD |  if_e	jmp	#LR__0342
047c0     60 01 00 FF 
047c4     8B 15 06 F6 | 	mov	arg02, ##@LR__4817
047c8     0F 13 02 F6 | 	mov	arg01, local01
047cc     38 80 B1 FD | 	call	#__system___string_cmp
047d0     00 FA 0D F2 | 	cmp	result1, #0 wz
047d4     A4 02 90 AD |  if_e	jmp	#LR__0343
047d8     60 01 00 FF 
047dc     90 15 06 F6 | 	mov	arg02, ##@LR__4818
047e0     0F 13 02 F6 | 	mov	arg01, local01
047e4     20 80 B1 FD | 	call	#__system___string_cmp
047e8     00 FA 0D F2 | 	cmp	result1, #0 wz
047ec     94 02 90 AD |  if_e	jmp	#LR__0344
047f0     60 01 00 FF 
047f4     97 15 06 F6 | 	mov	arg02, ##@LR__4819
047f8     0F 13 02 F6 | 	mov	arg01, local01
047fc     08 80 B1 FD | 	call	#__system___string_cmp
04800     00 FA 0D F2 | 	cmp	result1, #0 wz
04804     84 02 90 AD |  if_e	jmp	#LR__0345
04808     60 01 00 FF 
0480c     9C 15 06 F6 | 	mov	arg02, ##@LR__4820
04810     0F 13 02 F6 | 	mov	arg01, local01
04814     F0 7F B1 FD | 	call	#__system___string_cmp
04818     00 FA 0D F2 | 	cmp	result1, #0 wz
0481c     74 02 90 AD |  if_e	jmp	#LR__0346
04820     60 01 00 FF 
04824     A0 15 06 F6 | 	mov	arg02, ##@LR__4821
04828     0F 13 02 F6 | 	mov	arg01, local01
0482c     D8 7F B1 FD | 	call	#__system___string_cmp
04830     00 FA 0D F2 | 	cmp	result1, #0 wz
04834     64 02 90 AD |  if_e	jmp	#LR__0347
04838     60 01 00 FF 
0483c     A4 15 06 F6 | 	mov	arg02, ##@LR__4822
04840     0F 13 02 F6 | 	mov	arg01, local01
04844     C0 7F B1 FD | 	call	#__system___string_cmp
04848     00 FA 0D F2 | 	cmp	result1, #0 wz
0484c     54 02 90 AD |  if_e	jmp	#LR__0348
04850     60 01 00 FF 
04854     AA 15 06 F6 | 	mov	arg02, ##@LR__4823
04858     0F 13 02 F6 | 	mov	arg01, local01
0485c     A8 7F B1 FD | 	call	#__system___string_cmp
04860     00 FA 0D F2 | 	cmp	result1, #0 wz
04864     44 02 90 AD |  if_e	jmp	#LR__0349
04868     60 01 00 FF 
0486c     AE 15 06 F6 | 	mov	arg02, ##@LR__4824
04870     0F 13 02 F6 | 	mov	arg01, local01
04874     90 7F B1 FD | 	call	#__system___string_cmp
04878     00 FA 0D F2 | 	cmp	result1, #0 wz
0487c     34 02 90 AD |  if_e	jmp	#LR__0350
04880     60 01 00 FF 
04884     B7 15 06 F6 | 	mov	arg02, ##@LR__4825
04888     0F 13 02 F6 | 	mov	arg01, local01
0488c     78 7F B1 FD | 	call	#__system___string_cmp
04890     00 FA 0D F2 | 	cmp	result1, #0 wz
04894     24 02 90 AD |  if_e	jmp	#LR__0351
04898     60 01 00 FF 
0489c     BB 15 06 F6 | 	mov	arg02, ##@LR__4826
048a0     0F 13 02 F6 | 	mov	arg01, local01
048a4     60 7F B1 FD | 	call	#__system___string_cmp
048a8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ac     14 02 90 AD |  if_e	jmp	#LR__0352
048b0     60 01 00 FF 
048b4     C9 15 06 F6 | 	mov	arg02, ##@LR__4827
048b8     0F 13 02 F6 | 	mov	arg01, local01
048bc     48 7F B1 FD | 	call	#__system___string_cmp
048c0     00 FA 0D F2 | 	cmp	result1, #0 wz
048c4     04 02 90 AD |  if_e	jmp	#LR__0353
048c8     60 01 00 FF 
048cc     D6 15 06 F6 | 	mov	arg02, ##@LR__4828
048d0     0F 13 02 F6 | 	mov	arg01, local01
048d4     30 7F B1 FD | 	call	#__system___string_cmp
048d8     00 FA 0D F2 | 	cmp	result1, #0 wz
048dc     F4 01 90 AD |  if_e	jmp	#LR__0354
048e0     60 01 00 FF 
048e4     DE 15 06 F6 | 	mov	arg02, ##@LR__4829
048e8     0F 13 02 F6 | 	mov	arg01, local01
048ec     18 7F B1 FD | 	call	#__system___string_cmp
048f0     00 FA 0D F2 | 	cmp	result1, #0 wz
048f4     E4 01 90 AD |  if_e	jmp	#LR__0355
048f8     60 01 00 FF 
048fc     E5 15 06 F6 | 	mov	arg02, ##@LR__4830
04900     0F 13 02 F6 | 	mov	arg01, local01
04904     00 7F B1 FD | 	call	#__system___string_cmp
04908     00 FA 0D F2 | 	cmp	result1, #0 wz
0490c     D4 01 90 AD |  if_e	jmp	#LR__0356
04910     60 01 00 FF 
04914     EB 15 06 F6 | 	mov	arg02, ##@LR__4831
04918     0F 13 02 F6 | 	mov	arg01, local01
0491c     E8 7E B1 FD | 	call	#__system___string_cmp
04920     00 FA 0D F2 | 	cmp	result1, #0 wz
04924     C4 01 90 AD |  if_e	jmp	#LR__0357
04928     60 01 00 FF 
0492c     F2 15 06 F6 | 	mov	arg02, ##@LR__4832
04930     0F 13 02 F6 | 	mov	arg01, local01
04934     D0 7E B1 FD | 	call	#__system___string_cmp
04938     00 FA 0D F2 | 	cmp	result1, #0 wz
0493c     B4 01 90 AD |  if_e	jmp	#LR__0358
04940     60 01 00 FF 
04944     F9 15 06 F6 | 	mov	arg02, ##@LR__4833
04948     0F 13 02 F6 | 	mov	arg01, local01
0494c     B8 7E B1 FD | 	call	#__system___string_cmp
04950     00 FA 0D F2 | 	cmp	result1, #0 wz
04954     A4 01 90 AD |  if_e	jmp	#LR__0359
04958     61 01 00 FF 
0495c     00 14 06 F6 | 	mov	arg02, ##@LR__4834
04960     0F 13 02 F6 | 	mov	arg01, local01
04964     A0 7E B1 FD | 	call	#__system___string_cmp
04968     00 FA 0D F2 | 	cmp	result1, #0 wz
0496c     94 01 90 AD |  if_e	jmp	#LR__0360
04970     61 01 00 FF 
04974     07 14 06 F6 | 	mov	arg02, ##@LR__4835
04978     0F 13 02 F6 | 	mov	arg01, local01
0497c     88 7E B1 FD | 	call	#__system___string_cmp
04980     00 FA 0D F2 | 	cmp	result1, #0 wz
04984     84 01 90 AD |  if_e	jmp	#LR__0361
04988     61 01 00 FF 
0498c     0C 14 06 F6 | 	mov	arg02, ##@LR__4836
04990     0F 13 02 F6 | 	mov	arg01, local01
04994     70 7E B1 FD | 	call	#__system___string_cmp
04998     00 FA 0D F2 | 	cmp	result1, #0 wz
0499c     74 01 90 AD |  if_e	jmp	#LR__0362
049a0     61 01 00 FF 
049a4     14 14 06 F6 | 	mov	arg02, ##@LR__4837
049a8     0F 13 02 F6 | 	mov	arg01, local01
049ac     58 7E B1 FD | 	call	#__system___string_cmp
049b0     00 FA 0D F2 | 	cmp	result1, #0 wz
049b4     64 01 90 AD |  if_e	jmp	#LR__0363
049b8     61 01 00 FF 
049bc     1A 14 06 F6 | 	mov	arg02, ##@LR__4838
049c0     0F 13 02 F6 | 	mov	arg01, local01
049c4     40 7E B1 FD | 	call	#__system___string_cmp
049c8     00 FA 0D F2 | 	cmp	result1, #0 wz
049cc     54 01 90 AD |  if_e	jmp	#LR__0364
049d0     61 01 00 FF 
049d4     20 14 06 F6 | 	mov	arg02, ##@LR__4839
049d8     0F 13 02 F6 | 	mov	arg01, local01
049dc     28 7E B1 FD | 	call	#__system___string_cmp
049e0     00 FA 0D F2 | 	cmp	result1, #0 wz
049e4     44 01 90 AD |  if_e	jmp	#LR__0365
049e8     61 01 00 FF 
049ec     24 14 06 F6 | 	mov	arg02, ##@LR__4840
049f0     0F 13 02 F6 | 	mov	arg01, local01
049f4     10 7E B1 FD | 	call	#__system___string_cmp
049f8     00 FA 0D F2 | 	cmp	result1, #0 wz
049fc     34 01 90 AD |  if_e	jmp	#LR__0366
04a00     61 01 00 FF 
04a04     28 14 06 F6 | 	mov	arg02, ##@LR__4841
04a08     0F 13 02 F6 | 	mov	arg01, local01
04a0c     F8 7D B1 FD | 	call	#__system___string_cmp
04a10     00 FA 0D F2 | 	cmp	result1, #0 wz
04a14     24 01 90 AD |  if_e	jmp	#LR__0367
04a18     61 01 00 FF 
04a1c     2C 14 06 F6 | 	mov	arg02, ##@LR__4842
04a20     0F 13 02 F6 | 	mov	arg01, local01
04a24     E0 7D B1 FD | 	call	#__system___string_cmp
04a28     00 FA 0D F2 | 	cmp	result1, #0 wz
04a2c     14 01 90 AD |  if_e	jmp	#LR__0368
04a30     61 01 00 FF 
04a34     32 14 06 F6 | 	mov	arg02, ##@LR__4843
04a38     0F 13 02 F6 | 	mov	arg01, local01
04a3c     C8 7D B1 FD | 	call	#__system___string_cmp
04a40     00 FA 0D F2 | 	cmp	result1, #0 wz
04a44     04 01 90 AD |  if_e	jmp	#LR__0369
04a48     61 01 00 FF 
04a4c     38 14 06 F6 | 	mov	arg02, ##@LR__4844
04a50     0F 13 02 F6 | 	mov	arg01, local01
04a54     B0 7D B1 FD | 	call	#__system___string_cmp
04a58     00 FA 0D F2 | 	cmp	result1, #0 wz
04a5c     F4 00 90 AD |  if_e	jmp	#LR__0370
04a60     F8 00 90 FD | 	jmp	#LR__0371
04a64                 | LR__0340
04a64     9E FA 05 F6 | 	mov	result1, #158
04a68     F4 00 90 FD | 	jmp	#LR__0372
04a6c                 | LR__0341
04a6c     85 FA 05 F6 | 	mov	result1, #133
04a70     EC 00 90 FD | 	jmp	#LR__0372
04a74                 | LR__0342
04a74     9B FA 05 F6 | 	mov	result1, #155
04a78     E4 00 90 FD | 	jmp	#LR__0372
04a7c                 | LR__0343
04a7c     9B FA 05 F6 | 	mov	result1, #155
04a80     DC 00 90 FD | 	jmp	#LR__0372
04a84                 | LR__0344
04a84     9B FA 05 F6 | 	mov	result1, #155
04a88     D4 00 90 FD | 	jmp	#LR__0372
04a8c                 | LR__0345
04a8c     84 FA 05 F6 | 	mov	result1, #132
04a90     CC 00 90 FD | 	jmp	#LR__0372
04a94                 | LR__0346
04a94     86 FA 05 F6 | 	mov	result1, #134
04a98     C4 00 90 FD | 	jmp	#LR__0372
04a9c                 | LR__0347
04a9c     82 FA 05 F6 | 	mov	result1, #130
04aa0     BC 00 90 FD | 	jmp	#LR__0372
04aa4                 | LR__0348
04aa4     99 FA 05 F6 | 	mov	result1, #153
04aa8     B4 00 90 FD | 	jmp	#LR__0372
04aac                 | LR__0349
04aac     9C FA 05 F6 | 	mov	result1, #156
04ab0     AC 00 90 FD | 	jmp	#LR__0372
04ab4                 | LR__0350
04ab4     6F FA 05 F6 | 	mov	result1, #111
04ab8     A4 00 90 FD | 	jmp	#LR__0372
04abc                 | LR__0351
04abc     6F FA 05 F6 | 	mov	result1, #111
04ac0     9C 00 90 FD | 	jmp	#LR__0372
04ac4                 | LR__0352
04ac4     93 FA 05 F6 | 	mov	result1, #147
04ac8     94 00 90 FD | 	jmp	#LR__0372
04acc                 | LR__0353
04acc     94 FA 05 F6 | 	mov	result1, #148
04ad0     8C 00 90 FD | 	jmp	#LR__0372
04ad4                 | LR__0354
04ad4     62 FA 05 F6 | 	mov	result1, #98
04ad8     84 00 90 FD | 	jmp	#LR__0372
04adc                 | LR__0355
04adc     9D FA 05 F6 | 	mov	result1, #157
04ae0     7C 00 90 FD | 	jmp	#LR__0372
04ae4                 | LR__0356
04ae4     9A FA 05 F6 | 	mov	result1, #154
04ae8     74 00 90 FD | 	jmp	#LR__0372
04aec                 | LR__0357
04aec     66 FA 05 F6 | 	mov	result1, #102
04af0     6C 00 90 FD | 	jmp	#LR__0372
04af4                 | LR__0358
04af4     67 FA 05 F6 | 	mov	result1, #103
04af8     64 00 90 FD | 	jmp	#LR__0372
04afc                 | LR__0359
04afc     64 FA 05 F6 | 	mov	result1, #100
04b00     5C 00 90 FD | 	jmp	#LR__0372
04b04                 | LR__0360
04b04     65 FA 05 F6 | 	mov	result1, #101
04b08     54 00 90 FD | 	jmp	#LR__0372
04b0c                 | LR__0361
04b0c     98 FA 05 F6 | 	mov	result1, #152
04b10     4C 00 90 FD | 	jmp	#LR__0372
04b14                 | LR__0362
04b14     7B FA 05 F6 | 	mov	result1, #123
04b18     44 00 90 FD | 	jmp	#LR__0372
04b1c                 | LR__0363
04b1c     76 FA 05 F6 | 	mov	result1, #118
04b20     3C 00 90 FD | 	jmp	#LR__0372
04b24                 | LR__0364
04b24     7A FA 05 F6 | 	mov	result1, #122
04b28     34 00 90 FD | 	jmp	#LR__0372
04b2c                 | LR__0365
04b2c     54 FA 05 F6 | 	mov	result1, #84
04b30     2C 00 90 FD | 	jmp	#LR__0372
04b34                 | LR__0366
04b34     6B FA 05 F6 | 	mov	result1, #107
04b38     24 00 90 FD | 	jmp	#LR__0372
04b3c                 | LR__0367
04b3c     87 FA 05 F6 | 	mov	result1, #135
04b40     1C 00 90 FD | 	jmp	#LR__0372
04b44                 | LR__0368
04b44     6A FA 05 F6 | 	mov	result1, #106
04b48     14 00 90 FD | 	jmp	#LR__0372
04b4c                 | LR__0369
04b4c     6E FA 05 F6 | 	mov	result1, #110
04b50     0C 00 90 FD | 	jmp	#LR__0372
04b54                 | LR__0370
04b54     83 FA 05 F6 | 	mov	result1, #131
04b58     04 00 90 FD | 	jmp	#LR__0372
04b5c                 | LR__0371
04b5c     00 FA 05 F6 | 	mov	result1, #0
04b60                 | LR__0372
04b60     A7 F0 03 F6 | 	mov	ptra, fp
04b64     B2 00 A0 FD | 	call	#popregs_
04b68                 | _isfunction_ret
04b68     2D 00 64 FD | 	ret
04b6c                 | 
04b6c                 | ' 
04b6c                 | ' function isname(s as string) as boolean
04b6c                 | _isname
04b6c     0D 4A 05 F6 | 	mov	COUNT_, #13
04b70     A8 00 A0 FD | 	call	#pushregs_
04b74     09 1F 02 F6 | 	mov	local01, arg01
04b78     09 21 02 F6 | 	mov	local02, arg01
04b7c     97 06 48 FB | 	callpa	#(@LR__0381-@LR__0380)>>2,fcache_load_ptr_
04b80                 | LR__0380
04b80     10 FB C9 FA | 	rdbyte	result1, local02 wz
04b84     01 20 06 51 |  if_ne	add	local02, #1
04b88     F4 FF 9F 5D |  if_ne	jmp	#LR__0380
04b8c                 | LR__0381
04b8c     09 21 82 F1 | 	sub	local02, arg01
04b90     10 FB 01 F6 | 	mov	result1, local02
04b94     FD 22 0A F6 | 	mov	local03, result1 wz
04b98     00 FA 05 A6 |  if_e	mov	result1, #0
04b9c     34 02 90 AD |  if_e	jmp	#LR__0393
04ba0     0F 13 02 F6 | 	mov	arg01, local01
04ba4     01 14 06 F6 | 	mov	arg02, #1
04ba8     01 16 06 F6 | 	mov	arg03, #1
04bac     8C 9D B1 FD | 	call	#__system__Mid_S
04bb0     FD 24 02 F6 | 	mov	local04, result1
04bb4                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04bb4     61 01 00 FF 
04bb8     3C 14 06 F6 | 	mov	arg02, ##@LR__4845
04bbc     12 13 02 F6 | 	mov	arg01, local04
04bc0     44 7C B1 FD | 	call	#__system___string_cmp
04bc4     00 FA 55 F2 | 	cmps	result1, #0 wc
04bc8     18 00 90 CD |  if_b	jmp	#LR__0382
04bcc     61 01 00 FF 
04bd0     3E 14 06 F6 | 	mov	arg02, ##@LR__4846
04bd4     12 13 02 F6 | 	mov	arg01, local04
04bd8     2C 7C B1 FD | 	call	#__system___string_cmp
04bdc     01 FA 55 F2 | 	cmps	result1, #1 wc
04be0     1C 00 90 CD |  if_b	jmp	#LR__0383
04be4                 | LR__0382
04be4     61 01 00 FF 
04be8     40 14 06 F6 | 	mov	arg02, ##@LR__4847
04bec     12 13 02 F6 | 	mov	arg01, local04
04bf0     14 7C B1 FD | 	call	#__system___string_cmp
04bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf8     00 FA 05 56 |  if_ne	mov	result1, #0
04bfc     D4 01 90 5D |  if_ne	jmp	#LR__0393
04c00                 | LR__0383
04c00                 | ' if l>2 then 
04c00     03 22 56 F2 | 	cmps	local03, #3 wc
04c04     C8 01 90 CD |  if_b	jmp	#LR__0392
04c08                 | '   for i=2 to l
04c08     02 26 06 F6 | 	mov	local05, #2
04c0c     11 29 02 F6 | 	mov	local06, local03
04c10     01 28 06 F1 | 	add	local06, #1
04c14                 | LR__0384
04c14     14 27 52 F2 | 	cmps	local05, local06 wc
04c18     B4 01 90 3D |  if_ae	jmp	#LR__0391
04c1c     0F 13 02 F6 | 	mov	arg01, local01
04c20     13 15 02 F6 | 	mov	arg02, local05
04c24     01 16 06 F6 | 	mov	arg03, #1
04c28     10 9D B1 FD | 	call	#__system__Mid_S
04c2c     FD 24 02 F6 | 	mov	local04, result1
04c30                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04c30     11 27 52 F2 | 	cmps	local05, local03 wc
04c34     9C 00 90 3D |  if_ae	jmp	#LR__0387
04c38     61 01 00 FF 
04c3c     42 14 06 F6 | 	mov	arg02, ##@LR__4848
04c40     12 13 02 F6 | 	mov	arg01, local04
04c44     C0 7B B1 FD | 	call	#__system___string_cmp
04c48     00 FA 55 F2 | 	cmps	result1, #0 wc
04c4c     18 00 90 CD |  if_b	jmp	#LR__0385
04c50     61 01 00 FF 
04c54     44 14 06 F6 | 	mov	arg02, ##@LR__4849
04c58     12 13 02 F6 | 	mov	arg01, local04
04c5c     A8 7B B1 FD | 	call	#__system___string_cmp
04c60     01 FA 55 F2 | 	cmps	result1, #1 wc
04c64     6C 00 90 CD |  if_b	jmp	#LR__0387
04c68                 | LR__0385
04c68     61 01 00 FF 
04c6c     46 14 06 F6 | 	mov	arg02, ##@LR__4850
04c70     12 13 02 F6 | 	mov	arg01, local04
04c74     90 7B B1 FD | 	call	#__system___string_cmp
04c78     00 FA 55 F2 | 	cmps	result1, #0 wc
04c7c     18 00 90 CD |  if_b	jmp	#LR__0386
04c80     61 01 00 FF 
04c84     48 14 06 F6 | 	mov	arg02, ##@LR__4851
04c88     12 13 02 F6 | 	mov	arg01, local04
04c8c     78 7B B1 FD | 	call	#__system___string_cmp
04c90     01 FA 55 F2 | 	cmps	result1, #1 wc
04c94     3C 00 90 CD |  if_b	jmp	#LR__0387
04c98                 | LR__0386
04c98     61 01 00 FF 
04c9c     4A 2A 06 F6 | 	mov	local07, ##@LR__4852
04ca0     12 13 02 F6 | 	mov	arg01, local04
04ca4     15 15 02 F6 | 	mov	arg02, local07
04ca8     5C 7B B1 FD | 	call	#__system___string_cmp
04cac     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb0     20 00 90 AD |  if_e	jmp	#LR__0387
04cb4     61 01 00 FF 
04cb8     4C 2C 06 F6 | 	mov	local08, ##@LR__4853
04cbc     12 13 02 F6 | 	mov	arg01, local04
04cc0     16 15 02 F6 | 	mov	arg02, local08
04cc4     40 7B B1 FD | 	call	#__system___string_cmp
04cc8     FD 2E 0A F6 | 	mov	local09, result1 wz
04ccc     00 FA 05 56 |  if_ne	mov	result1, #0
04cd0     00 01 90 5D |  if_ne	jmp	#LR__0393
04cd4                 | LR__0387
04cd4                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04cd4     11 27 0A F2 | 	cmp	local05, local03 wz
04cd8     EC 00 90 5D |  if_ne	jmp	#LR__0390
04cdc     61 01 00 FF 
04ce0     4E 30 06 F6 | 	mov	local10, ##@LR__4854
04ce4     12 13 02 F6 | 	mov	arg01, local04
04ce8     18 15 02 F6 | 	mov	arg02, local10
04cec     18 7B B1 FD | 	call	#__system___string_cmp
04cf0     FD 32 02 F6 | 	mov	local11, result1
04cf4     00 32 56 F2 | 	cmps	local11, #0 wc
04cf8     1C 00 90 CD |  if_b	jmp	#LR__0388
04cfc     61 01 00 FF 
04d00     50 14 06 F6 | 	mov	arg02, ##@LR__4855
04d04     12 13 02 F6 | 	mov	arg01, local04
04d08     FC 7A B1 FD | 	call	#__system___string_cmp
04d0c     FD 30 02 F6 | 	mov	local10, result1
04d10     01 30 56 F2 | 	cmps	local10, #1 wc
04d14     B0 00 90 CD |  if_b	jmp	#LR__0390
04d18                 | LR__0388
04d18     61 01 00 FF 
04d1c     52 14 06 F6 | 	mov	arg02, ##@LR__4856
04d20     12 13 02 F6 | 	mov	arg01, local04
04d24     E0 7A B1 FD | 	call	#__system___string_cmp
04d28     00 FA 55 F2 | 	cmps	result1, #0 wc
04d2c     1C 00 90 CD |  if_b	jmp	#LR__0389
04d30     61 01 00 FF 
04d34     54 2E 06 F6 | 	mov	local09, ##@LR__4857
04d38     12 13 02 F6 | 	mov	arg01, local04
04d3c     17 15 02 F6 | 	mov	arg02, local09
04d40     C4 7A B1 FD | 	call	#__system___string_cmp
04d44     01 FA 55 F2 | 	cmps	result1, #1 wc
04d48     7C 00 90 CD |  if_b	jmp	#LR__0390
04d4c                 | LR__0389
04d4c     61 01 00 FF 
04d50     56 2E 06 F6 | 	mov	local09, ##@LR__4858
04d54     12 13 02 F6 | 	mov	arg01, local04
04d58     17 15 02 F6 | 	mov	arg02, local09
04d5c     A8 7A B1 FD | 	call	#__system___string_cmp
04d60     00 FA 4D F2 | 	cmps	result1, #0 wz
04d64     60 00 90 AD |  if_e	jmp	#LR__0390
04d68     61 01 00 FF 
04d6c     58 2C 06 F6 | 	mov	local08, ##@LR__4859
04d70     12 13 02 F6 | 	mov	arg01, local04
04d74     16 15 02 F6 | 	mov	arg02, local08
04d78     8C 7A B1 FD | 	call	#__system___string_cmp
04d7c     FD 2E 0A F6 | 	mov	local09, result1 wz
04d80     44 00 90 AD |  if_e	jmp	#LR__0390
04d84     61 01 00 FF 
04d88     5A 34 06 F6 | 	mov	local12, ##@LR__4860
04d8c     1A 2D 02 F6 | 	mov	local08, local12
04d90     12 13 02 F6 | 	mov	arg01, local04
04d94     16 15 02 F6 | 	mov	arg02, local08
04d98     6C 7A B1 FD | 	call	#__system___string_cmp
04d9c     FD 2A 0A F6 | 	mov	local07, result1 wz
04da0     24 00 90 AD |  if_e	jmp	#LR__0390
04da4     61 01 00 FF 
04da8     5C 36 06 F6 | 	mov	local13, ##@LR__4861
04dac     1B 35 02 F6 | 	mov	local12, local13
04db0     12 13 02 F6 | 	mov	arg01, local04
04db4     1A 15 02 F6 | 	mov	arg02, local12
04db8     4C 7A B1 FD | 	call	#__system___string_cmp
04dbc     FD 2C 0A F6 | 	mov	local08, result1 wz
04dc0     00 FA 05 56 |  if_ne	mov	result1, #0
04dc4     0C 00 90 5D |  if_ne	jmp	#LR__0393
04dc8                 | LR__0390
04dc8     01 26 06 F1 | 	add	local05, #1
04dcc     44 FE 9F FD | 	jmp	#LR__0384
04dd0                 | LR__0391
04dd0                 | LR__0392
04dd0                 | ' return true
04dd0     01 FA 65 F6 | 	neg	result1, #1
04dd4                 | LR__0393
04dd4     A7 F0 03 F6 | 	mov	ptra, fp
04dd8     B2 00 A0 FD | 	call	#popregs_
04ddc                 | _isname_ret
04ddc     2D 00 64 FD | 	ret
04de0                 | 
04de0                 | ' 
04de0                 | ' function isnum(s as string) as boolean
04de0                 | _isnum
04de0     0D 4A 05 F6 | 	mov	COUNT_, #13
04de4     A8 00 A0 FD | 	call	#pushregs_
04de8     09 1F 02 F6 | 	mov	local01, arg01
04dec     00 20 06 F6 | 	mov	local02, #0
04df0     00 22 06 F6 | 	mov	local03, #0
04df4     0F 13 02 F6 | 	mov	arg01, local01
04df8     09 25 02 F6 | 	mov	local04, arg01
04dfc     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
04e00                 | LR__0400
04e00     12 FB C9 FA | 	rdbyte	result1, local04 wz
04e04     01 24 06 51 |  if_ne	add	local04, #1
04e08     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
04e0c                 | LR__0401
04e0c     09 25 82 F1 | 	sub	local04, arg01
04e10     12 FB 01 F6 | 	mov	result1, local04
04e14     FD 26 0A F6 | 	mov	local05, result1 wz
04e18     00 FA 05 A6 |  if_e	mov	result1, #0
04e1c     8C 02 90 AD |  if_e	jmp	#LR__0412
04e20     0F 13 02 F6 | 	mov	arg01, local01
04e24     01 14 06 F6 | 	mov	arg02, #1
04e28     01 16 06 F6 | 	mov	arg03, #1
04e2c     0C 9B B1 FD | 	call	#__system__Mid_S
04e30     FD 28 02 F6 | 	mov	local06, result1
04e34                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04e34     61 01 00 FF 
04e38     5E 14 06 F6 | 	mov	arg02, ##@LR__4862
04e3c     14 13 02 F6 | 	mov	arg01, local06
04e40     C4 79 B1 FD | 	call	#__system___string_cmp
04e44     00 FA 55 F2 | 	cmps	result1, #0 wc
04e48     18 00 90 CD |  if_b	jmp	#LR__0402
04e4c     61 01 00 FF 
04e50     60 14 06 F6 | 	mov	arg02, ##@LR__4863
04e54     14 13 02 F6 | 	mov	arg01, local06
04e58     AC 79 B1 FD | 	call	#__system___string_cmp
04e5c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e60     78 00 90 CD |  if_b	jmp	#LR__0403
04e64                 | LR__0402
04e64     61 01 00 FF 
04e68     62 14 06 F6 | 	mov	arg02, ##@LR__4864
04e6c     14 13 02 F6 | 	mov	arg01, local06
04e70     94 79 B1 FD | 	call	#__system___string_cmp
04e74     00 FA 0D F2 | 	cmp	result1, #0 wz
04e78     60 00 90 AD |  if_e	jmp	#LR__0403
04e7c     61 01 00 FF 
04e80     64 2A 06 F6 | 	mov	local07, ##@LR__4865
04e84     14 13 02 F6 | 	mov	arg01, local06
04e88     15 15 02 F6 | 	mov	arg02, local07
04e8c     78 79 B1 FD | 	call	#__system___string_cmp
04e90     00 FA 0D F2 | 	cmp	result1, #0 wz
04e94     44 00 90 AD |  if_e	jmp	#LR__0403
04e98     61 01 00 FF 
04e9c     66 2C 06 F6 | 	mov	local08, ##@LR__4866
04ea0     16 2B 02 F6 | 	mov	local07, local08
04ea4     14 13 02 F6 | 	mov	arg01, local06
04ea8     15 15 02 F6 | 	mov	arg02, local07
04eac     58 79 B1 FD | 	call	#__system___string_cmp
04eb0     00 FA 4D F2 | 	cmps	result1, #0 wz
04eb4     24 00 90 AD |  if_e	jmp	#LR__0403
04eb8     61 01 00 FF 
04ebc     68 2E 06 F6 | 	mov	local09, ##@LR__4867
04ec0     17 2D 02 F6 | 	mov	local08, local09
04ec4     14 13 02 F6 | 	mov	arg01, local06
04ec8     16 15 02 F6 | 	mov	arg02, local08
04ecc     38 79 B1 FD | 	call	#__system___string_cmp
04ed0     FD 2A 0A F6 | 	mov	local07, result1 wz
04ed4     00 FA 05 56 |  if_ne	mov	result1, #0
04ed8     D0 01 90 5D |  if_ne	jmp	#LR__0412
04edc                 | LR__0403
04edc                 | ' if m$="." then ds=1
04edc     61 01 00 FF 
04ee0     6A 14 06 F6 | 	mov	arg02, ##@LR__4868
04ee4     14 13 02 F6 | 	mov	arg01, local06
04ee8     1C 79 B1 FD | 	call	#__system___string_cmp
04eec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef0     01 20 06 A6 |  if_e	mov	local02, #1
04ef4                 | ' if l>1 then 
04ef4     02 26 56 F2 | 	cmps	local05, #2 wc
04ef8     AC 01 90 CD |  if_b	jmp	#LR__0411
04efc                 | '   for i=2 to l
04efc     02 30 06 F6 | 	mov	local10, #2
04f00     13 33 02 F6 | 	mov	local11, local05
04f04     01 32 06 F1 | 	add	local11, #1
04f08                 | LR__0404
04f08     19 31 52 F2 | 	cmps	local10, local11 wc
04f0c     98 01 90 3D |  if_ae	jmp	#LR__0410
04f10     0F 13 02 F6 | 	mov	arg01, local01
04f14     18 15 02 F6 | 	mov	arg02, local10
04f18     01 16 06 F6 | 	mov	arg03, #1
04f1c     1C 9A B1 FD | 	call	#__system__Mid_S
04f20     FD 28 02 F6 | 	mov	local06, result1
04f24                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04f24     61 01 00 FF 
04f28     6C 14 06 F6 | 	mov	arg02, ##@LR__4869
04f2c     14 13 02 F6 | 	mov	arg01, local06
04f30     D4 78 B1 FD | 	call	#__system___string_cmp
04f34     00 FA 55 F2 | 	cmps	result1, #0 wc
04f38     18 00 90 CD |  if_b	jmp	#LR__0405
04f3c     61 01 00 FF 
04f40     6E 14 06 F6 | 	mov	arg02, ##@LR__4870
04f44     14 13 02 F6 | 	mov	arg01, local06
04f48     BC 78 B1 FD | 	call	#__system___string_cmp
04f4c     01 FA 55 F2 | 	cmps	result1, #1 wc
04f50     98 00 90 CD |  if_b	jmp	#LR__0406
04f54                 | LR__0405
04f54     61 01 00 FF 
04f58     70 14 06 F6 | 	mov	arg02, ##@LR__4871
04f5c     14 13 02 F6 | 	mov	arg01, local06
04f60     A4 78 B1 FD | 	call	#__system___string_cmp
04f64     00 FA 0D F2 | 	cmp	result1, #0 wz
04f68     80 00 90 AD |  if_e	jmp	#LR__0406
04f6c     61 01 00 FF 
04f70     72 2A 06 F6 | 	mov	local07, ##@LR__4872
04f74     14 13 02 F6 | 	mov	arg01, local06
04f78     15 15 02 F6 | 	mov	arg02, local07
04f7c     88 78 B1 FD | 	call	#__system___string_cmp
04f80     00 FA 4D F2 | 	cmps	result1, #0 wz
04f84     64 00 90 AD |  if_e	jmp	#LR__0406
04f88     61 01 00 FF 
04f8c     74 2C 06 F6 | 	mov	local08, ##@LR__4873
04f90     16 2B 02 F6 | 	mov	local07, local08
04f94     14 13 02 F6 | 	mov	arg01, local06
04f98     15 15 02 F6 | 	mov	arg02, local07
04f9c     68 78 B1 FD | 	call	#__system___string_cmp
04fa0     FD 34 0A F6 | 	mov	local12, result1 wz
04fa4     44 00 90 AD |  if_e	jmp	#LR__0406
04fa8     61 01 00 FF 
04fac     76 2E 06 F6 | 	mov	local09, ##@LR__4874
04fb0     17 2D 02 F6 | 	mov	local08, local09
04fb4     14 13 02 F6 | 	mov	arg01, local06
04fb8     16 15 02 F6 | 	mov	arg02, local08
04fbc     48 78 B1 FD | 	call	#__system___string_cmp
04fc0     FD 2A 0A F6 | 	mov	local07, result1 wz
04fc4     24 00 90 AD |  if_e	jmp	#LR__0406
04fc8     61 01 00 FF 
04fcc     78 36 06 F6 | 	mov	local13, ##@LR__4875
04fd0     1B 2F 02 F6 | 	mov	local09, local13
04fd4     14 13 02 F6 | 	mov	arg01, local06
04fd8     17 15 02 F6 | 	mov	arg02, local09
04fdc     28 78 B1 FD | 	call	#__system___string_cmp
04fe0     FD 2C 0A F6 | 	mov	local08, result1 wz
04fe4     00 FA 05 56 |  if_ne	mov	result1, #0
04fe8     C0 00 90 5D |  if_ne	jmp	#LR__0412
04fec                 | LR__0406
04fec                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04fec     61 01 00 FF 
04ff0     7A 14 06 F6 | 	mov	arg02, ##@LR__4876
04ff4     14 13 02 F6 | 	mov	arg01, local06
04ff8     0C 78 B1 FD | 	call	#__system___string_cmp
04ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
05000     38 00 90 5D |  if_ne	jmp	#LR__0407
05004     18 15 02 F6 | 	mov	arg02, local10
05008     01 14 86 F1 | 	sub	arg02, #1
0500c     0F 13 02 F6 | 	mov	arg01, local01
05010     01 16 06 F6 | 	mov	arg03, #1
05014     24 99 B1 FD | 	call	#__system__Mid_S
05018     FD 12 02 F6 | 	mov	arg01, result1
0501c     14 9B B1 FD | 	call	#__system__LCase_S
05020     FD 12 02 F6 | 	mov	arg01, result1
05024     61 01 00 FF 
05028     7C 14 06 F6 | 	mov	arg02, ##@LR__4877
0502c     D8 77 B1 FD | 	call	#__system___string_cmp
05030     00 FA 0D F2 | 	cmp	result1, #0 wz
05034     00 FA 05 56 |  if_ne	mov	result1, #0
05038     70 00 90 5D |  if_ne	jmp	#LR__0412
0503c                 | LR__0407
0503c                 | '     if m$="." then ds+=1: if ds>1 then return false
0503c     61 01 00 FF 
05040     7E 14 06 F6 | 	mov	arg02, ##@LR__4878
05044     14 13 02 F6 | 	mov	arg01, local06
05048     BC 77 B1 FD | 	call	#__system___string_cmp
0504c     00 FA 0D F2 | 	cmp	result1, #0 wz
05050     01 20 06 A1 |  if_e	add	local02, #1
05054     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05058     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
0505c     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0412
05060                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
05060     61 01 00 FF 
05064     80 14 06 F6 | 	mov	arg02, ##@LR__4879
05068     14 13 02 F6 | 	mov	arg01, local06
0506c     98 77 B1 FD | 	call	#__system___string_cmp
05070     00 FA 4D F2 | 	cmps	result1, #0 wz
05074     18 00 90 AD |  if_e	jmp	#LR__0408
05078     61 01 00 FF 
0507c     82 14 06 F6 | 	mov	arg02, ##@LR__4880
05080     14 13 02 F6 | 	mov	arg01, local06
05084     80 77 B1 FD | 	call	#__system___string_cmp
05088     00 FA 4D F2 | 	cmps	result1, #0 wz
0508c     10 00 90 5D |  if_ne	jmp	#LR__0409
05090                 | LR__0408
05090     01 22 06 F1 | 	add	local03, #1
05094     02 22 56 F2 | 	cmps	local03, #2 wc
05098     00 FA 05 36 |  if_ae	mov	result1, #0
0509c     0C 00 90 3D |  if_ae	jmp	#LR__0412
050a0                 | LR__0409
050a0     01 30 06 F1 | 	add	local10, #1
050a4     60 FE 9F FD | 	jmp	#LR__0404
050a8                 | LR__0410
050a8                 | LR__0411
050a8                 | ' return true
050a8     01 FA 65 F6 | 	neg	result1, #1
050ac                 | LR__0412
050ac     A7 F0 03 F6 | 	mov	ptra, fp
050b0     B2 00 A0 FD | 	call	#popregs_
050b4                 | _isnum_ret
050b4     2D 00 64 FD | 	ret
050b8                 | 
050b8                 | '   
050b8                 | ' function isint(s as string) as boolean
050b8                 | _isint
050b8     05 4A 05 F6 | 	mov	COUNT_, #5
050bc     A8 00 A0 FD | 	call	#pushregs_
050c0     09 1F 02 F6 | 	mov	local01, arg01
050c4     09 21 02 F6 | 	mov	local02, arg01
050c8     97 06 48 FB | 	callpa	#(@LR__0421-@LR__0420)>>2,fcache_load_ptr_
050cc                 | LR__0420
050cc     10 FB C9 FA | 	rdbyte	result1, local02 wz
050d0     01 20 06 51 |  if_ne	add	local02, #1
050d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0420
050d8                 | LR__0421
050d8     09 21 82 F1 | 	sub	local02, arg01
050dc     10 FB 01 F6 | 	mov	result1, local02
050e0     FD 20 0A F6 | 	mov	local02, result1 wz
050e4     00 FA 05 A6 |  if_e	mov	result1, #0
050e8     18 01 90 AD |  if_e	jmp	#LR__0429
050ec     0F 13 02 F6 | 	mov	arg01, local01
050f0     01 14 06 F6 | 	mov	arg02, #1
050f4     01 16 06 F6 | 	mov	arg03, #1
050f8     40 98 B1 FD | 	call	#__system__Mid_S
050fc     FD 22 02 F6 | 	mov	local03, result1
05100                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05100     61 01 00 FF 
05104     84 14 06 F6 | 	mov	arg02, ##@LR__4881
05108     11 13 02 F6 | 	mov	arg01, local03
0510c     F8 76 B1 FD | 	call	#__system___string_cmp
05110     00 FA 55 F2 | 	cmps	result1, #0 wc
05114     18 00 90 CD |  if_b	jmp	#LR__0422
05118     61 01 00 FF 
0511c     86 14 06 F6 | 	mov	arg02, ##@LR__4882
05120     11 13 02 F6 | 	mov	arg01, local03
05124     E0 76 B1 FD | 	call	#__system___string_cmp
05128     01 FA 55 F2 | 	cmps	result1, #1 wc
0512c     4C 00 90 CD |  if_b	jmp	#LR__0423
05130                 | LR__0422
05130     61 01 00 FF 
05134     88 14 06 F6 | 	mov	arg02, ##@LR__4883
05138     11 13 02 F6 | 	mov	arg01, local03
0513c     C8 76 B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     34 00 90 AD |  if_e	jmp	#LR__0423
05148     61 01 00 FF 
0514c     8A 14 06 F6 | 	mov	arg02, ##@LR__4884
05150     11 13 02 F6 | 	mov	arg01, local03
05154     B0 76 B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     1C 00 90 AD |  if_e	jmp	#LR__0423
05160     61 01 00 FF 
05164     8C 14 06 F6 | 	mov	arg02, ##@LR__4885
05168     11 13 02 F6 | 	mov	arg01, local03
0516c     98 76 B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     00 FA 05 56 |  if_ne	mov	result1, #0
05178     88 00 90 5D |  if_ne	jmp	#LR__0429
0517c                 | LR__0423
0517c                 | ' 
0517c                 | ' if l>1 then 
0517c     02 20 56 F2 | 	cmps	local02, #2 wc
05180     7C 00 90 CD |  if_b	jmp	#LR__0428
05184                 | '   for i=2 to l
05184     02 24 06 F6 | 	mov	local04, #2
05188     10 27 02 F6 | 	mov	local05, local02
0518c     01 26 06 F1 | 	add	local05, #1
05190                 | LR__0424
05190     13 25 52 F2 | 	cmps	local04, local05 wc
05194     68 00 90 3D |  if_ae	jmp	#LR__0427
05198     0F 13 02 F6 | 	mov	arg01, local01
0519c     12 15 02 F6 | 	mov	arg02, local04
051a0     01 16 06 F6 | 	mov	arg03, #1
051a4     94 97 B1 FD | 	call	#__system__Mid_S
051a8     FD 22 02 F6 | 	mov	local03, result1
051ac                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
051ac     61 01 00 FF 
051b0     8E 14 06 F6 | 	mov	arg02, ##@LR__4886
051b4     11 13 02 F6 | 	mov	arg01, local03
051b8     4C 76 B1 FD | 	call	#__system___string_cmp
051bc     00 FA 55 F2 | 	cmps	result1, #0 wc
051c0     18 00 90 CD |  if_b	jmp	#LR__0425
051c4     61 01 00 FF 
051c8     90 14 06 F6 | 	mov	arg02, ##@LR__4887
051cc     11 13 02 F6 | 	mov	arg01, local03
051d0     34 76 B1 FD | 	call	#__system___string_cmp
051d4     01 FA 55 F2 | 	cmps	result1, #1 wc
051d8     1C 00 90 CD |  if_b	jmp	#LR__0426
051dc                 | LR__0425
051dc     61 01 00 FF 
051e0     92 14 06 F6 | 	mov	arg02, ##@LR__4888
051e4     11 13 02 F6 | 	mov	arg01, local03
051e8     1C 76 B1 FD | 	call	#__system___string_cmp
051ec     00 FA 0D F2 | 	cmp	result1, #0 wz
051f0     00 FA 05 56 |  if_ne	mov	result1, #0
051f4     0C 00 90 5D |  if_ne	jmp	#LR__0429
051f8                 | LR__0426
051f8     01 24 06 F1 | 	add	local04, #1
051fc     90 FF 9F FD | 	jmp	#LR__0424
05200                 | LR__0427
05200                 | LR__0428
05200                 | ' return true
05200     01 FA 65 F6 | 	neg	result1, #1
05204                 | LR__0429
05204     A7 F0 03 F6 | 	mov	ptra, fp
05208     B2 00 A0 FD | 	call	#popregs_
0520c                 | _isint_ret
0520c     2D 00 64 FD | 	ret
05210                 | 
05210                 | ' 
05210                 | ' function isdec(s as string) as boolean
05210                 | _isdec
05210     05 4A 05 F6 | 	mov	COUNT_, #5
05214     A8 00 A0 FD | 	call	#pushregs_
05218     09 1F 02 F6 | 	mov	local01, arg01
0521c     09 21 02 F6 | 	mov	local02, arg01
05220     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
05224                 | LR__0430
05224     10 FB C9 FA | 	rdbyte	result1, local02 wz
05228     01 20 06 51 |  if_ne	add	local02, #1
0522c     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
05230                 | LR__0431
05230     09 21 82 F1 | 	sub	local02, arg01
05234     10 FB 01 F6 | 	mov	result1, local02
05238     FD 20 0A F6 | 	mov	local02, result1 wz
0523c     00 FA 05 A6 |  if_e	mov	result1, #0
05240     80 00 90 AD |  if_e	jmp	#LR__0436
05244                 | ' for i=1 to l
05244     01 22 06 F6 | 	mov	local03, #1
05248     10 25 02 F6 | 	mov	local04, local02
0524c     01 24 06 F1 | 	add	local04, #1
05250                 | LR__0432
05250     12 23 52 F2 | 	cmps	local03, local04 wc
05254     68 00 90 3D |  if_ae	jmp	#LR__0435
05258     0F 13 02 F6 | 	mov	arg01, local01
0525c     11 15 02 F6 | 	mov	arg02, local03
05260     01 16 06 F6 | 	mov	arg03, #1
05264     D4 96 B1 FD | 	call	#__system__Mid_S
05268     FD 26 02 F6 | 	mov	local05, result1
0526c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0526c     61 01 00 FF 
05270     94 14 06 F6 | 	mov	arg02, ##@LR__4889
05274     13 13 02 F6 | 	mov	arg01, local05
05278     8C 75 B1 FD | 	call	#__system___string_cmp
0527c     00 FA 55 F2 | 	cmps	result1, #0 wc
05280     18 00 90 CD |  if_b	jmp	#LR__0433
05284     61 01 00 FF 
05288     96 14 06 F6 | 	mov	arg02, ##@LR__4890
0528c     13 13 02 F6 | 	mov	arg01, local05
05290     74 75 B1 FD | 	call	#__system___string_cmp
05294     01 FA 55 F2 | 	cmps	result1, #1 wc
05298     1C 00 90 CD |  if_b	jmp	#LR__0434
0529c                 | LR__0433
0529c     61 01 00 FF 
052a0     98 14 06 F6 | 	mov	arg02, ##@LR__4891
052a4     13 13 02 F6 | 	mov	arg01, local05
052a8     5C 75 B1 FD | 	call	#__system___string_cmp
052ac     00 FA 0D F2 | 	cmp	result1, #0 wz
052b0     00 FA 05 56 |  if_ne	mov	result1, #0
052b4     0C 00 90 5D |  if_ne	jmp	#LR__0436
052b8                 | LR__0434
052b8     01 22 06 F1 | 	add	local03, #1
052bc     90 FF 9F FD | 	jmp	#LR__0432
052c0                 | LR__0435
052c0                 | ' return true
052c0     01 FA 65 F6 | 	neg	result1, #1
052c4                 | LR__0436
052c4     A7 F0 03 F6 | 	mov	ptra, fp
052c8     B2 00 A0 FD | 	call	#popregs_
052cc                 | _isdec_ret
052cc     2D 00 64 FD | 	ret
052d0                 | 
052d0                 | ' 
052d0                 | ' function isstring(s as string) as boolean
052d0                 | _isstring
052d0     01 4A 05 F6 | 	mov	COUNT_, #1
052d4     A8 00 A0 FD | 	call	#pushregs_
052d8                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
052d8     09 1F 02 F6 | 	mov	local01, arg01
052dc     01 14 06 F6 | 	mov	arg02, #1
052e0     40 95 B1 FD | 	call	#__system__Left_S
052e4     FD 12 02 F6 | 	mov	arg01, result1
052e8     61 01 00 FF 
052ec     9A 14 06 F6 | 	mov	arg02, ##@LR__4892
052f0     14 75 B1 FD | 	call	#__system___string_cmp
052f4     00 FA 4D F2 | 	cmps	result1, #0 wz
052f8     28 00 90 5D |  if_ne	jmp	#LR__0440
052fc     0F 13 02 F6 | 	mov	arg01, local01
05300     01 14 06 F6 | 	mov	arg02, #1
05304     A4 95 B1 FD | 	call	#__system__Right_S
05308     FD 12 02 F6 | 	mov	arg01, result1
0530c     61 01 00 FF 
05310     9C 14 06 F6 | 	mov	arg02, ##@LR__4893
05314     F0 74 B1 FD | 	call	#__system___string_cmp
05318     00 FA 4D F2 | 	cmps	result1, #0 wz
0531c     01 FA 65 A6 |  if_e	neg	result1, #1
05320     04 00 90 AD |  if_e	jmp	#LR__0441
05324                 | LR__0440
05324     00 FA 05 F6 | 	mov	result1, #0
05328                 | LR__0441
05328     A7 F0 03 F6 | 	mov	ptra, fp
0532c     B2 00 A0 FD | 	call	#popregs_
05330                 | _isstring_ret
05330     2D 00 64 FD | 	ret
05334                 | 
05334                 | ' 
05334                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
05334                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05334                 | ' 
05334                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05334                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
05334                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05334                 | ' 
05334                 | ' '----- delete a line from a program
05334                 | ' 
05334                 | ' function deleteline(aline as ulong) as integer
05334                 | _deleteline
05334     03 4A 05 F6 | 	mov	COUNT_, #3
05338     A8 00 A0 FD | 	call	#pushregs_
0533c     2C F0 07 F1 | 	add	ptra, #44
05340     04 4E 05 F1 | 	add	fp, #4
05344     A7 12 62 FC | 	wrlong	arg01, fp
05348     6A 00 00 FF 
0534c     68 E4 05 F1 | 	add	objptr, ##54376
05350     F2 1E 02 FB | 	rdlong	local01, objptr
05354     0C 4E 05 F1 | 	add	fp, #12
05358     A7 1E 62 FC | 	wrlong	local01, fp
0535c     10 4E 85 F1 | 	sub	fp, #16
05360                 | ' 
05360                 | ' 
05360                 | ' searchptr=programstart
05360                 | ' 
05360                 | ' do
05360     5E 00 00 FF 
05364     A8 E5 85 F1 | 	sub	objptr, ##48552
05368                 | LR__0450
05368     14 4E 05 F1 | 	add	fp, #20
0536c     A7 12 02 F6 | 	mov	arg01, fp
05370     04 4E 85 F1 | 	sub	fp, #4
05374     A7 14 02 FB | 	rdlong	arg02, fp
05378     10 4E 85 F1 | 	sub	fp, #16
0537c     18 16 06 F6 | 	mov	arg03, #24
05380     58 68 B1 FD | 	call	#_psram_spin2_read1
05384     10 4E 05 F1 | 	add	fp, #16
05388     A7 1E 02 FB | 	rdlong	local01, fp
0538c     08 4E 85 F1 | 	sub	fp, #8
05390     A7 1E 62 FC | 	wrlong	local01, fp
05394     20 4E 05 F1 | 	add	fp, #32
05398     A7 1E 02 FB | 	rdlong	local01, fp
0539c     18 4E 85 F1 | 	sub	fp, #24
053a0     A7 1E 62 FC | 	wrlong	local01, fp
053a4     04 4E 05 F1 | 	add	fp, #4
053a8     A7 1E 02 FB | 	rdlong	local01, fp
053ac     10 4E 85 F1 | 	sub	fp, #16
053b0     A7 16 02 FB | 	rdlong	arg03, fp
053b4     04 4E 85 F1 | 	sub	fp, #4
053b8     0B 1F 12 F2 | 	cmp	local01, arg03 wc
053bc     28 4E 05 C1 |  if_b	add	fp, #40
053c0     A7 20 02 CB |  if_b	rdlong	local02, fp
053c4     28 4E 85 C1 |  if_b	sub	fp, #40
053c8     FF FF 3F CF 
053cc     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
053d0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0450
053d4     0B 00 00 FF 
053d8     C0 E4 85 F1 | 	sub	objptr, ##5824
053dc                 | ' 
053dc                 | ' 
053dc                 | ' if header(0)<>aline then return -1
053dc     14 4E 05 F1 | 	add	fp, #20
053e0     A7 1E 02 FB | 	rdlong	local01, fp
053e4     10 4E 85 F1 | 	sub	fp, #16
053e8     A7 22 02 FB | 	rdlong	local03, fp
053ec     04 4E 85 F1 | 	sub	fp, #4
053f0     11 1F 0A F2 | 	cmp	local01, local03 wz
053f4     01 FA 65 56 |  if_ne	neg	result1, #1
053f8     C8 02 90 5D |  if_ne	jmp	#LR__0456
053fc     08 4E 05 F1 | 	add	fp, #8
05400     A7 12 02 FB | 	rdlong	arg01, fp
05404     08 4E 85 F1 | 	sub	fp, #8
05408     01 14 66 F6 | 	neg	arg02, #1
0540c     4C 3D B1 FD | 	call	#_pslpoke
05410                 | ' 
05410                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
05410                 | ' 
05410                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
05410     28 4E 05 F1 | 	add	fp, #40
05414     A7 1E 02 FB | 	rdlong	local01, fp
05418     28 4E 85 F1 | 	sub	fp, #40
0541c     FF FF 3F FF 
05420     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05424     24 4E 05 A1 |  if_e	add	fp, #36
05428     A7 22 02 AB |  if_e	rdlong	local03, fp
0542c     24 4E 85 A1 |  if_e	sub	fp, #36
05430     FF FF 7F AF 
05434     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
05438     78 00 90 5D |  if_ne	jmp	#LR__0451
0543c     6A 00 00 FF 
05440     68 E4 05 F1 | 	add	objptr, ##54376
05444     F2 00 68 FC | 	wrlong	#0, objptr
05448     07 00 00 FF 
0544c     28 E4 85 F1 | 	sub	objptr, ##3624
05450     F2 00 68 FC | 	wrlong	#0, objptr
05454     07 00 00 FF 
05458     2C E4 05 F1 | 	add	objptr, ##3628
0545c     F2 00 68 FC | 	wrlong	#0, objptr
05460     04 E4 05 F1 | 	add	objptr, #4
05464     FF FF FF FF 
05468     F2 FE 6B FC | 	wrlong	##-1, objptr
0546c     6A 00 00 FF 
05470     70 E4 85 F1 | 	sub	objptr, ##54384
05474     00 12 06 F6 | 	mov	arg01, #0
05478     01 14 66 F6 | 	neg	arg02, #1
0547c     DC 3C B1 FD | 	call	#_pslpoke
05480     10 12 06 F6 | 	mov	arg01, #16
05484     01 14 66 F6 | 	neg	arg02, #1
05488     D0 3C B1 FD | 	call	#_pslpoke
0548c     14 12 06 F6 | 	mov	arg01, #20
05490     1E 14 CE F9 | 	bmask	arg02, #30
05494     C4 3C B1 FD | 	call	#_pslpoke
05498     79 00 00 FF 
0549c     94 E5 05 F1 | 	add	objptr, ##62356
054a0     F2 00 68 FC | 	wrlong	#0, objptr
054a4     04 E4 05 F1 | 	add	objptr, #4
054a8     F2 00 68 FC | 	wrlong	#0, objptr
054ac     79 00 00 FF 
054b0     98 E5 85 F1 | 	sub	objptr, ##62360
054b4                 | LR__0451
054b4                 | ' 
054b4                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
054b4     28 4E 05 F1 | 	add	fp, #40
054b8     A7 1E 02 FB | 	rdlong	local01, fp
054bc     28 4E 85 F1 | 	sub	fp, #40
054c0     FF FF 3F FF 
054c4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
054c8     74 00 90 5D |  if_ne	jmp	#LR__0452
054cc     24 4E 05 F1 | 	add	fp, #36
054d0     A7 22 02 FB | 	rdlong	local03, fp
054d4     24 4E 85 F1 | 	sub	fp, #36
054d8     FF FF 7F FF 
054dc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
054e0     5C 00 90 AD |  if_e	jmp	#LR__0452
054e4     24 4E 05 F1 | 	add	fp, #36
054e8     A7 12 02 FB | 	rdlong	arg01, fp
054ec     24 4E 85 F1 | 	sub	fp, #36
054f0     14 12 06 F1 | 	add	arg01, #20
054f4     1E 14 CE F9 | 	bmask	arg02, #30
054f8     60 3C B1 FD | 	call	#_pslpoke
054fc     24 4E 05 F1 | 	add	fp, #36
05500     A7 1E 02 FB | 	rdlong	local01, fp
05504     6A 00 00 FF 
05508     70 E4 05 F1 | 	add	objptr, ##54384
0550c     F2 1E 62 FC | 	wrlong	local01, objptr
05510     6A 00 00 FF 
05514     70 E4 85 F1 | 	sub	objptr, ##54384
05518     A7 12 02 FB | 	rdlong	arg01, fp
0551c     24 4E 85 F1 | 	sub	fp, #36
05520     68 3D B1 FD | 	call	#_pslpeek
05524     6A 00 00 FF 
05528     6C E4 05 F1 | 	add	objptr, ##54380
0552c     F2 FA 61 FC | 	wrlong	result1, objptr
05530     6A 00 00 FF 
05534     6C E4 85 F1 | 	sub	objptr, ##54380
05538                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
05538                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
05538                 | '   lastline=pslpeek(header(4))
05538                 | '   return 0
05538     00 FA 05 F6 | 	mov	result1, #0
0553c     84 01 90 FD | 	jmp	#LR__0456
05540                 | LR__0452
05540                 | ' 
05540                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
05540     28 4E 05 F1 | 	add	fp, #40
05544     A7 1E 02 FB | 	rdlong	local01, fp
05548     28 4E 85 F1 | 	sub	fp, #40
0554c     FF FF 3F FF 
05550     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05554     58 00 90 AD |  if_e	jmp	#LR__0453
05558     24 4E 05 F1 | 	add	fp, #36
0555c     A7 22 02 FB | 	rdlong	local03, fp
05560     24 4E 85 F1 | 	sub	fp, #36
05564     FF FF 7F FF 
05568     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0556c     40 00 90 5D |  if_ne	jmp	#LR__0453
05570     28 4E 05 F1 | 	add	fp, #40
05574     A7 12 02 FB | 	rdlong	arg01, fp
05578     28 4E 85 F1 | 	sub	fp, #40
0557c     10 12 06 F1 | 	add	arg01, #16
05580     01 14 66 F6 | 	neg	arg02, #1
05584     D4 3B B1 FD | 	call	#_pslpoke
05588     28 4E 05 F1 | 	add	fp, #40
0558c     A7 1E 02 FB | 	rdlong	local01, fp
05590     28 4E 85 F1 | 	sub	fp, #40
05594     6A 00 00 FF 
05598     68 E4 05 F1 | 	add	objptr, ##54376
0559c     F2 1E 62 FC | 	wrlong	local01, objptr
055a0     6A 00 00 FF 
055a4     68 E4 85 F1 | 	sub	objptr, ##54376
055a8                 | ' '   print "deleted first line"
055a8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
055a8                 | '   programstart=header(5) ' adjust the program start to point on the first new line
055a8                 | '   return 0
055a8     00 FA 05 F6 | 	mov	result1, #0
055ac     14 01 90 FD | 	jmp	#LR__0456
055b0                 | LR__0453
055b0                 | ' 
055b0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
055b0     28 4E 05 F1 | 	add	fp, #40
055b4     A7 1E 02 FB | 	rdlong	local01, fp
055b8     28 4E 85 F1 | 	sub	fp, #40
055bc     FF FF 3F FF 
055c0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
055c4     24 4E 05 51 |  if_ne	add	fp, #36
055c8     A7 22 02 5B |  if_ne	rdlong	local03, fp
055cc     24 4E 85 51 |  if_ne	sub	fp, #36
055d0     FF FF 7F 5F 
055d4     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
055d8     40 00 90 AD |  if_e	jmp	#LR__0454
055dc     28 4E 05 F1 | 	add	fp, #40
055e0     A7 12 02 FB | 	rdlong	arg01, fp
055e4     10 12 06 F1 | 	add	arg01, #16
055e8     04 4E 85 F1 | 	sub	fp, #4
055ec     A7 14 02 FB | 	rdlong	arg02, fp
055f0     24 4E 85 F1 | 	sub	fp, #36
055f4     64 3B B1 FD | 	call	#_pslpoke
055f8     24 4E 05 F1 | 	add	fp, #36
055fc     A7 12 02 FB | 	rdlong	arg01, fp
05600     14 12 06 F1 | 	add	arg01, #20
05604     04 4E 05 F1 | 	add	fp, #4
05608     A7 14 02 FB | 	rdlong	arg02, fp
0560c     28 4E 85 F1 | 	sub	fp, #40
05610     48 3B B1 FD | 	call	#_pslpoke
05614                 | '    pslpoke(header(5)+16,header(4))  
05614                 | '    pslpoke(header(4)+20, header(5))
05614                 | '    return 0
05614     00 FA 05 F6 | 	mov	result1, #0
05618     A8 00 90 FD | 	jmp	#LR__0456
0561c                 | LR__0454
0561c     10 4E 05 F1 | 	add	fp, #16
05620     A7 1E 02 FB | 	rdlong	local01, fp
05624     08 4E 85 F1 | 	sub	fp, #8
05628     A7 1E 62 FC | 	wrlong	local01, fp
0562c     6A 00 00 FF 
05630     68 E4 05 F1 | 	add	objptr, ##54376
05634     F2 1E 02 FB | 	rdlong	local01, objptr
05638     08 4E 05 F1 | 	add	fp, #8
0563c     A7 1E 62 FC | 	wrlong	local01, fp
05640     10 4E 85 F1 | 	sub	fp, #16
05644                 | ' 
05644                 | ' 
05644                 | ' 
05644                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05644                 | ' 
05644                 | ' lineptr2=searchptr
05644                 | ' searchptr=programstart
05644                 | ' 
05644                 | ' do
05644     5E 00 00 FF 
05648     A8 E5 85 F1 | 	sub	objptr, ##48552
0564c                 | LR__0455
0564c     14 4E 05 F1 | 	add	fp, #20
05650     A7 12 02 F6 | 	mov	arg01, fp
05654     04 4E 85 F1 | 	sub	fp, #4
05658     A7 14 02 FB | 	rdlong	arg02, fp
0565c     10 4E 85 F1 | 	sub	fp, #16
05660     18 16 06 F6 | 	mov	arg03, #24
05664     74 65 B1 FD | 	call	#_psram_spin2_read1
05668     10 4E 05 F1 | 	add	fp, #16
0566c     A7 1E 02 FB | 	rdlong	local01, fp
05670     08 4E 85 F1 | 	sub	fp, #8
05674     A7 1E 62 FC | 	wrlong	local01, fp
05678     20 4E 05 F1 | 	add	fp, #32
0567c     A7 1E 02 FB | 	rdlong	local01, fp
05680     18 4E 85 F1 | 	sub	fp, #24
05684     A7 1E 62 FC | 	wrlong	local01, fp
05688     04 4E 05 F1 | 	add	fp, #4
0568c     A7 1E 02 FB | 	rdlong	local01, fp
05690     10 4E 85 F1 | 	sub	fp, #16
05694     A7 22 02 FB | 	rdlong	local03, fp
05698     04 4E 85 F1 | 	sub	fp, #4
0569c     11 1F 12 F2 | 	cmp	local01, local03 wc
056a0     28 4E 05 C1 |  if_b	add	fp, #40
056a4     A7 20 02 CB |  if_b	rdlong	local02, fp
056a8     28 4E 85 C1 |  if_b	sub	fp, #40
056ac     FF FF 3F CF 
056b0     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
056b4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0455
056b8     0B 00 00 FF 
056bc     C0 E4 85 F1 | 	sub	objptr, ##5824
056c0     00 FA 05 F6 | 	mov	result1, #0
056c4                 | LR__0456
056c4     A7 F0 03 F6 | 	mov	ptra, fp
056c8     B2 00 A0 FD | 	call	#popregs_
056cc                 | _deleteline_ret
056cc     2D 00 64 FD | 	ret
056d0                 | 
056d0                 | ' 
056d0                 | ' sub save_line
056d0                 | _save_line
056d0     03 4A 05 F6 | 	mov	COUNT_, #3
056d4     A8 00 A0 FD | 	call	#pushregs_
056d8     6A 00 00 FF 
056dc     60 E4 05 F1 | 	add	objptr, ##54368
056e0     F2 16 02 FB | 	rdlong	arg03, objptr
056e4     01 16 06 F1 | 	add	arg03, #1
056e8     05 00 00 FF 
056ec     18 E4 85 F1 | 	sub	objptr, ##2584
056f0     F2 14 02 FB | 	rdlong	arg02, objptr
056f4     0B 15 02 FD | 	qmul	arg02, arg03
056f8     0E 00 00 FF 
056fc     44 E4 85 F1 | 	sub	objptr, ##7236
05700     F2 12 02 FB | 	rdlong	arg01, objptr
05704     57 00 00 FF 
05708     04 E4 85 F1 | 	sub	objptr, ##44548
0570c     09 1F 02 F6 | 	mov	local01, arg01
05710     18 20 62 FD | 	getqx	local02
05714     97 06 48 FB | 	callpa	#(@LR__0461-@LR__0460)>>2,fcache_load_ptr_
05718                 | LR__0460
05718     0F FB C9 FA | 	rdbyte	result1, local01 wz
0571c     01 1E 06 51 |  if_ne	add	local01, #1
05720     F4 FF 9F 5D |  if_ne	jmp	#LR__0460
05724                 | LR__0461
05724     09 1F 82 F1 | 	sub	local01, arg01
05728     03 1E CE F7 | 	test	local01, #3 wz
0572c     02 1E 46 50 |  if_ne	shr	local01, #2
05730     01 1E 06 51 |  if_ne	add	local01, #1
05734     02 1E 66 50 |  if_ne	shl	local01, #2
05738     10 23 02 F6 | 	mov	local03, local02
0573c     0F 23 02 F1 | 	add	local03, local01
05740     63 00 00 FF 
05744     40 E4 05 F1 | 	add	objptr, ##50752
05748     F2 16 02 FB | 	rdlong	arg03, objptr
0574c     10 17 02 F1 | 	add	arg03, local02
05750     04 00 00 FF 
05754     28 E4 05 F1 | 	add	objptr, ##2088
05758     F2 16 62 FC | 	wrlong	arg03, objptr
0575c     04 E4 05 F1 | 	add	objptr, #4
05760     F2 1E 62 FC | 	wrlong	local01, objptr
05764     0C E4 85 F1 | 	sub	objptr, #12
05768     F2 12 02 F6 | 	mov	arg01, objptr
0576c     04 00 00 FF 
05770     20 E4 85 F1 | 	sub	objptr, ##2080
05774     F2 14 02 FB | 	rdlong	arg02, objptr
05778     10 17 02 F6 | 	mov	arg03, local02
0577c     57 00 00 FF 
05780     80 E5 85 F1 | 	sub	objptr, ##44928
05784     F0 64 B1 FD | 	call	#_psram_spin2_write
05788     4B 00 00 FF 
0578c     44 E5 05 F1 | 	add	objptr, ##38724
05790     F2 12 02 FB | 	rdlong	arg01, objptr
05794     0C 00 00 FF 
05798     3C E4 05 F1 | 	add	objptr, ##6204
0579c     F2 14 02 FB | 	rdlong	arg02, objptr
057a0     10 15 02 F1 | 	add	arg02, local02
057a4     0F 17 02 F6 | 	mov	arg03, local01
057a8     57 00 00 FF 
057ac     80 E5 85 F1 | 	sub	objptr, ##44928
057b0     C4 64 B1 FD | 	call	#_psram_spin2_write
057b4     57 00 00 FF 
057b8     80 E5 05 F1 | 	add	objptr, ##44928
057bc     F2 1E 02 FB | 	rdlong	local01, objptr
057c0     11 1F 02 F1 | 	add	local01, local03
057c4     F2 1E 62 FC | 	wrlong	local01, objptr
057c8     63 00 00 FF 
057cc     40 E4 85 F1 | 	sub	objptr, ##50752
057d0     A7 F0 03 F6 | 	mov	ptra, fp
057d4     B2 00 A0 FD | 	call	#popregs_
057d8                 | _save_line_ret
057d8     2D 00 64 FD | 	ret
057dc                 | 
057dc                 | ' 
057dc                 | ' 
057dc                 | ' function insertline(aline as ulong) as integer
057dc                 | _insertline
057dc     02 4A 05 F6 | 	mov	COUNT_, #2
057e0     A8 00 A0 FD | 	call	#pushregs_
057e4     28 F0 07 F1 | 	add	ptra, #40
057e8     04 4E 05 F1 | 	add	fp, #4
057ec     A7 12 62 FC | 	wrlong	arg01, fp
057f0     6A 00 00 FF 
057f4     68 E4 05 F1 | 	add	objptr, ##54376
057f8     F2 1E 02 FB | 	rdlong	local01, objptr
057fc     04 4E 05 F1 | 	add	fp, #4
05800     A7 1E 62 FC | 	wrlong	local01, fp
05804     08 4E 85 F1 | 	sub	fp, #8
05808                 | ' 
05808                 | ' do
05808     5E 00 00 FF 
0580c     A8 E5 85 F1 | 	sub	objptr, ##48552
05810                 | LR__0470
05810     10 4E 05 F1 | 	add	fp, #16
05814     A7 12 02 F6 | 	mov	arg01, fp
05818     08 4E 85 F1 | 	sub	fp, #8
0581c     A7 14 02 FB | 	rdlong	arg02, fp
05820     08 4E 85 F1 | 	sub	fp, #8
05824     18 16 06 F6 | 	mov	arg03, #24
05828     B0 63 B1 FD | 	call	#_psram_spin2_read1
0582c     08 4E 05 F1 | 	add	fp, #8
05830     A7 1E 02 FB | 	rdlong	local01, fp
05834     04 4E 05 F1 | 	add	fp, #4
05838     A7 1E 62 FC | 	wrlong	local01, fp
0583c     18 4E 05 F1 | 	add	fp, #24
05840     A7 1E 02 FB | 	rdlong	local01, fp
05844     1C 4E 85 F1 | 	sub	fp, #28
05848     A7 1E 62 FC | 	wrlong	local01, fp
0584c     08 4E 05 F1 | 	add	fp, #8
05850     A7 1E 02 FB | 	rdlong	local01, fp
05854     0C 4E 85 F1 | 	sub	fp, #12
05858     A7 16 02 FB | 	rdlong	arg03, fp
0585c     04 4E 85 F1 | 	sub	fp, #4
05860     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05864     24 4E 05 C1 |  if_b	add	fp, #36
05868     A7 20 02 CB |  if_b	rdlong	local02, fp
0586c     24 4E 85 C1 |  if_b	sub	fp, #36
05870     FF FF 3F CF 
05874     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05878     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0470
0587c     0B 00 00 FF 
05880     C0 E4 85 F1 | 	sub	objptr, ##5824
05884                 | ' 
05884                 | ' if header(0)=aline then return -1 ' delete it first
05884     10 4E 05 F1 | 	add	fp, #16
05888     A7 1E 02 FB | 	rdlong	local01, fp
0588c     0C 4E 85 F1 | 	sub	fp, #12
05890     A7 20 02 FB | 	rdlong	local02, fp
05894     04 4E 85 F1 | 	sub	fp, #4
05898     10 1F 0A F2 | 	cmp	local01, local02 wz
0589c     01 FA 65 A6 |  if_e	neg	result1, #1
058a0     48 01 90 AD |  if_e	jmp	#LR__0473
058a4                 | ' if header(0)<aline then return -2 ' end of program reached
058a4     10 4E 05 F1 | 	add	fp, #16
058a8     A7 1E 02 FB | 	rdlong	local01, fp
058ac     0C 4E 85 F1 | 	sub	fp, #12
058b0     A7 16 02 FB | 	rdlong	arg03, fp
058b4     04 4E 85 F1 | 	sub	fp, #4
058b8     0B 1F 12 F2 | 	cmp	local01, arg03 wc
058bc     02 FA 65 C6 |  if_b	neg	result1, #2
058c0     28 01 90 CD |  if_b	jmp	#LR__0473
058c4                 | ' 
058c4                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
058c4     20 4E 05 F1 | 	add	fp, #32
058c8     A7 1E 02 FB | 	rdlong	local01, fp
058cc     20 4E 85 F1 | 	sub	fp, #32
058d0     FF FF 7F FF 
058d4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
058d8     78 00 90 5D |  if_ne	jmp	#LR__0471
058dc     63 00 00 FF 
058e0     40 E4 05 F1 | 	add	objptr, ##50752
058e4     F2 1E 02 FB | 	rdlong	local01, objptr
058e8     07 00 00 FF 
058ec     28 E4 05 F1 | 	add	objptr, ##3624
058f0     F2 1E 62 FC | 	wrlong	local01, objptr
058f4     0C 4E 05 F1 | 	add	fp, #12
058f8     A7 12 02 FB | 	rdlong	arg01, fp
058fc     0C 4E 85 F1 | 	sub	fp, #12
05900     10 12 06 F1 | 	add	arg01, #16
05904     07 00 00 FF 
05908     28 E4 85 F1 | 	sub	objptr, ##3624
0590c     F2 14 02 FB | 	rdlong	arg02, objptr
05910     63 00 00 FF 
05914     40 E4 85 F1 | 	sub	objptr, ##50752
05918     40 38 B1 FD | 	call	#_pslpoke
0591c     67 00 00 FF 
05920     70 E4 05 F1 | 	add	objptr, ##52848
05924     FF FF FF FF 
05928     F2 FE 6B FC | 	wrlong	##-1, objptr
0592c     0C 4E 05 F1 | 	add	fp, #12
05930     A7 1E 02 FB | 	rdlong	local01, fp
05934     0C 4E 85 F1 | 	sub	fp, #12
05938     04 E4 05 F1 | 	add	objptr, #4
0593c     F2 1E 62 FC | 	wrlong	local01, objptr
05940     67 00 00 FF 
05944     74 E4 85 F1 | 	sub	objptr, ##52852
05948     84 FD BF FD | 	call	#_save_line
0594c                 | '   programstart=programptr
0594c                 | '   pslpoke(lineptr2+16,programptr)
0594c                 | '   ucompiledline(4)=$FFFF_FFFF
0594c                 | '   ucompiledline(5)=lineptr2
0594c                 | '   save_line
0594c                 | '   return 0
0594c     00 FA 05 F6 | 	mov	result1, #0
05950     98 00 90 FD | 	jmp	#LR__0473
05954                 | LR__0471
05954                 | ' 
05954                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05954     20 4E 05 F1 | 	add	fp, #32
05958     A7 1E 02 FB | 	rdlong	local01, fp
0595c     20 4E 85 F1 | 	sub	fp, #32
05960     FF FF 7F FF 
05964     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05968     7C 00 90 AD |  if_e	jmp	#LR__0472
0596c     20 4E 05 F1 | 	add	fp, #32
05970     A7 1E 02 FB | 	rdlong	local01, fp
05974     67 00 00 FF 
05978     70 E4 05 F1 | 	add	objptr, ##52848
0597c     F2 1E 62 FC | 	wrlong	local01, objptr
05980     14 4E 85 F1 | 	sub	fp, #20
05984     A7 1E 02 FB | 	rdlong	local01, fp
05988     04 E4 05 F1 | 	add	objptr, #4
0598c     F2 1E 62 FC | 	wrlong	local01, objptr
05990     A7 12 02 FB | 	rdlong	arg01, fp
05994     0C 4E 85 F1 | 	sub	fp, #12
05998     10 12 06 F1 | 	add	arg01, #16
0599c     04 00 00 FF 
059a0     34 E4 85 F1 | 	sub	objptr, ##2100
059a4     F2 14 02 FB | 	rdlong	arg02, objptr
059a8     63 00 00 FF 
059ac     40 E4 85 F1 | 	sub	objptr, ##50752
059b0     A8 37 B1 FD | 	call	#_pslpoke
059b4     20 4E 05 F1 | 	add	fp, #32
059b8     A7 12 02 FB | 	rdlong	arg01, fp
059bc     20 4E 85 F1 | 	sub	fp, #32
059c0     14 12 06 F1 | 	add	arg01, #20
059c4     63 00 00 FF 
059c8     40 E4 05 F1 | 	add	objptr, ##50752
059cc     F2 14 02 FB | 	rdlong	arg02, objptr
059d0     63 00 00 FF 
059d4     40 E4 85 F1 | 	sub	objptr, ##50752
059d8     80 37 B1 FD | 	call	#_pslpoke
059dc     F0 FC BF FD | 	call	#_save_line
059e0                 | '   ucompiledline(4)=header(4)
059e0                 | '   ucompiledline(5)=lineptr2
059e0                 | '   pslpoke(lineptr2+16,programptr)
059e0                 | '   pslpoke(header(4)+20,programptr)
059e0                 | '   save_line
059e0                 | '   return 0
059e0     00 FA 05 F6 | 	mov	result1, #0
059e4     04 00 90 FD | 	jmp	#LR__0473
059e8                 | LR__0472
059e8     00 FA 05 F6 | 	mov	result1, #0
059ec                 | LR__0473
059ec     A7 F0 03 F6 | 	mov	ptra, fp
059f0     B2 00 A0 FD | 	call	#popregs_
059f4                 | _insertline_ret
059f4     2D 00 64 FD | 	ret
059f8                 | 
059f8                 | ' 
059f8                 | ' sub add_line_at_end(aline) 
059f8                 | _add_line_at_end
059f8     6A 00 00 FF 
059fc     6C E4 05 F1 | 	add	objptr, ##54380
05a00     F2 12 62 FC | 	wrlong	arg01, objptr
05a04     04 E4 05 F1 | 	add	objptr, #4
05a08     F2 14 02 FB | 	rdlong	arg02, objptr
05a0c     03 00 00 FF 
05a10     00 E4 85 F1 | 	sub	objptr, ##1536
05a14     F2 14 62 FC | 	wrlong	arg02, objptr
05a18     03 00 00 FF 
05a1c     00 E4 05 F1 | 	add	objptr, ##1536
05a20     F2 12 02 FB | 	rdlong	arg01, objptr
05a24     14 12 06 F1 | 	add	arg01, #20
05a28     07 00 00 FF 
05a2c     30 E4 85 F1 | 	sub	objptr, ##3632
05a30     F2 14 02 FB | 	rdlong	arg02, objptr
05a34     63 00 00 FF 
05a38     40 E4 85 F1 | 	sub	objptr, ##50752
05a3c     1C 37 B1 FD | 	call	#_pslpoke
05a40     63 00 00 FF 
05a44     40 E4 05 F1 | 	add	objptr, ##50752
05a48     F2 14 02 FB | 	rdlong	arg02, objptr
05a4c     07 00 00 FF 
05a50     30 E4 05 F1 | 	add	objptr, ##3632
05a54     F2 14 62 FC | 	wrlong	arg02, objptr
05a58     02 00 00 FF 
05a5c     FC E5 85 F1 | 	sub	objptr, ##1532
05a60     FF FF BF FF 
05a64     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05a68                 | ' 
05a68                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05a68                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05a68     04 00 00 FF 
05a6c     34 E4 85 F1 | 	sub	objptr, ##2100
05a70     F2 14 0A FB | 	rdlong	arg02, objptr wz
05a74     63 00 00 FF 
05a78     40 E4 85 F1 | 	sub	objptr, ##50752
05a7c     67 00 00 AF 
05a80     70 E4 05 A1 |  if_e	add	objptr, ##52848
05a84     FF FF FF AF 
05a88     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05a8c     67 00 00 AF 
05a90     70 E4 85 A1 |  if_e	sub	objptr, ##52848
05a94     38 FC BF FD | 	call	#_save_line
05a98     63 00 00 FF 
05a9c     40 E4 05 F1 | 	add	objptr, ##50752
05aa0     F2 12 02 FB | 	rdlong	arg01, objptr
05aa4     63 00 00 FF 
05aa8     40 E4 85 F1 | 	sub	objptr, ##50752
05aac     01 14 66 F6 | 	neg	arg02, #1
05ab0     A8 36 B1 FD | 	call	#_pslpoke
05ab4                 | _add_line_at_end_ret
05ab4     2D 00 64 FD | 	ret
05ab8                 | 
05ab8                 | ' 
05ab8                 | ' function compile_immediate(linetype as ulong) as integer
05ab8                 | _compile_immediate
05ab8     09 4A 05 F6 | 	mov	COUNT_, #9
05abc     A8 00 A0 FD | 	call	#pushregs_
05ac0                 | _compile_immediate_enter
05ac0     09 25 0A F6 | 	mov	local04, arg01 wz
05ac4     00 26 06 F6 | 	mov	local05, #0
05ac8     00 28 06 F6 | 	mov	local06, #0
05acc                 | ' 
05acc                 | ' ' linetype=cont+1, linetype=0 immediate
05acc                 | ' '  : 1: this is the first part of the line that will continue
05acc                 | ' ' 2 - this is the continuation of the line
05acc                 | ' ' 3 - this is the last continued line
05acc                 | ' ' 4 - this is the one and only part
05acc                 | ' 
05acc                 | ' err=0
05acc                 | ' cmd=0
05acc                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05acc     30 00 90 5D |  if_ne	jmp	#LR__0480
05ad0     54 00 00 FF 
05ad4     F4 E5 05 F1 | 	add	objptr, ##43508
05ad8     F2 28 02 FB | 	rdlong	local06, objptr
05adc     02 00 00 FF 
05ae0     34 E4 05 F1 | 	add	objptr, ##1076
05ae4     F2 02 68 FC | 	wrlong	#1, objptr
05ae8     00 2A 06 F6 | 	mov	local07, #0
05aec     13 00 00 FF 
05af0     38 E4 05 F1 | 	add	objptr, ##9784
05af4     F2 00 68 FC | 	wrlong	#0, objptr
05af8     6A 00 00 FF 
05afc     60 E4 85 F1 | 	sub	objptr, ##54368
05b00                 | LR__0480
05b00                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05b00     02 24 0E F2 | 	cmp	local04, #2 wz
05b04     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05b08     24 00 90 5D |  if_ne	jmp	#LR__0481
05b0c     54 00 00 FF 
05b10     F4 E5 05 F1 | 	add	objptr, ##43508
05b14     F2 28 02 FB | 	rdlong	local06, objptr
05b18     01 2A 06 F6 | 	mov	local07, #1
05b1c     02 00 00 FF 
05b20     34 E4 05 F1 | 	add	objptr, ##1076
05b24     F2 02 68 FC | 	wrlong	#1, objptr
05b28     57 00 00 FF 
05b2c     28 E4 85 F1 | 	sub	objptr, ##44584
05b30                 | LR__0481
05b30                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05b30     04 24 0E F2 | 	cmp	local04, #4 wz
05b34     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05b38     30 00 90 5D |  if_ne	jmp	#LR__0482
05b3c     54 00 00 FF 
05b40     FC E5 05 F1 | 	add	objptr, ##43516
05b44     F2 28 02 FB | 	rdlong	local06, objptr
05b48     02 2A 06 F6 | 	mov	local07, #2
05b4c     02 00 00 FF 
05b50     2C E4 05 F1 | 	add	objptr, ##1068
05b54     F2 04 68 FC | 	wrlong	#2, objptr
05b58     13 00 00 FF 
05b5c     38 E4 05 F1 | 	add	objptr, ##9784
05b60     F2 04 68 FC | 	wrlong	#2, objptr
05b64     6A 00 00 FF 
05b68     60 E4 85 F1 | 	sub	objptr, ##54368
05b6c                 | LR__0482
05b6c                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05b6c     05 24 0E F2 | 	cmp	local04, #5 wz
05b70     44 00 90 5D |  if_ne	jmp	#LR__0483
05b74     57 00 00 FF 
05b78     28 E4 05 F1 | 	add	objptr, ##44584
05b7c     F2 FA 01 FB | 	rdlong	result1, objptr
05b80     FD 2A 02 F6 | 	mov	local07, result1
05b84     03 2A 66 F0 | 	shl	local07, #3
05b88     02 00 00 FF 
05b8c     38 E4 85 F1 | 	sub	objptr, ##1080
05b90     F2 2A 02 F1 | 	add	local07, objptr
05b94     04 2A 06 F1 | 	add	local07, #4
05b98     15 29 02 FB | 	rdlong	local06, local07
05b9c     FD 2A 02 F6 | 	mov	local07, result1
05ba0     01 2A 06 F1 | 	add	local07, #1
05ba4     02 00 00 FF 
05ba8     38 E4 05 F1 | 	add	objptr, ##1080
05bac     F2 2A 62 FC | 	wrlong	local07, objptr
05bb0     57 00 00 FF 
05bb4     28 E4 85 F1 | 	sub	objptr, ##44584
05bb8                 | LR__0483
05bb8     00 2C 06 F6 | 	mov	local08, #0
05bbc                 | ' vars=0
05bbc                 | ' 'print  "In compile_immediate cmd=:", cmd
05bbc                 | ' 451 select case cmd
05bbc     5C 28 0E F2 | 	cmp	local06, #92 wz
05bc0     08 02 90 AD |  if_e	jmp	#LR__0484
05bc4     47 28 0E F2 | 	cmp	local06, #71 wz
05bc8     0C 02 90 AD |  if_e	jmp	#LR__0485
05bcc     59 28 0E F2 | 	cmp	local06, #89 wz
05bd0     10 02 90 AD |  if_e	jmp	#LR__0486
05bd4     45 28 0E F2 | 	cmp	local06, #69 wz
05bd8     14 02 90 AD |  if_e	jmp	#LR__0487
05bdc     69 28 0E F2 | 	cmp	local06, #105 wz
05be0     18 02 90 AD |  if_e	jmp	#LR__0488
05be4     40 28 0E F2 | 	cmp	local06, #64 wz
05be8     90 04 90 AD |  if_e	jmp	#LR__0544
05bec     49 28 0E F2 | 	cmp	local06, #73 wz
05bf0     14 02 90 AD |  if_e	jmp	#LR__0489
05bf4     50 28 0E F2 | 	cmp	local06, #80 wz
05bf8     18 02 90 AD |  if_e	jmp	#LR__0490
05bfc     68 28 0E F2 | 	cmp	local06, #104 wz
05c00     1C 02 90 AD |  if_e	jmp	#LR__0491
05c04     74 28 0E F2 | 	cmp	local06, #116 wz
05c08     20 02 90 AD |  if_e	jmp	#LR__0492
05c0c     73 28 0E F2 | 	cmp	local06, #115 wz
05c10     24 02 90 AD |  if_e	jmp	#LR__0493
05c14     6C 28 0E F2 | 	cmp	local06, #108 wz
05c18     28 02 90 AD |  if_e	jmp	#LR__0494
05c1c     89 28 0E F2 | 	cmp	local06, #137 wz
05c20     58 04 90 AD |  if_e	jmp	#LR__0544
05c24     72 28 0E F2 | 	cmp	local06, #114 wz
05c28     24 02 90 AD |  if_e	jmp	#LR__0495
05c2c     5D 28 0E F2 | 	cmp	local06, #93 wz
05c30     48 04 90 AD |  if_e	jmp	#LR__0544
05c34     96 28 0E F2 | 	cmp	local06, #150 wz
05c38     1C 02 90 AD |  if_e	jmp	#LR__0496
05c3c     43 28 0E F2 | 	cmp	local06, #67 wz
05c40     1C 02 90 AD |  if_e	jmp	#LR__0497
05c44     5A 28 0E F2 | 	cmp	local06, #90 wz
05c48     20 02 90 AD |  if_e	jmp	#LR__0498
05c4c     4E 28 0E F2 | 	cmp	local06, #78 wz
05c50     20 02 90 AD |  if_e	jmp	#LR__0499
05c54     46 28 0E F2 | 	cmp	local06, #70 wz
05c58     34 02 90 AD |  if_e	jmp	#LR__0501
05c5c     71 28 0E F2 | 	cmp	local06, #113 wz
05c60     38 02 90 AD |  if_e	jmp	#LR__0502
05c64     60 28 0E F2 | 	cmp	local06, #96 wz
05c68     3C 02 90 AD |  if_e	jmp	#LR__0503
05c6c     4A 28 0E F2 | 	cmp	local06, #74 wz
05c70     40 02 90 AD |  if_e	jmp	#LR__0504
05c74     48 28 0E F2 | 	cmp	local06, #72 wz
05c78     40 02 90 AD |  if_e	jmp	#LR__0505
05c7c     58 28 0E F2 | 	cmp	local06, #88 wz
05c80     44 02 90 AD |  if_e	jmp	#LR__0506
05c84     5F 28 0E F2 | 	cmp	local06, #95 wz
05c88     44 02 90 AD |  if_e	jmp	#LR__0507
05c8c     8A 28 0E F2 | 	cmp	local06, #138 wz
05c90     48 02 90 AD |  if_e	jmp	#LR__0508
05c94     4C 28 0E F2 | 	cmp	local06, #76 wz
05c98     4C 02 90 AD |  if_e	jmp	#LR__0509
05c9c     52 28 0E F2 | 	cmp	local06, #82 wz
05ca0     50 02 90 AD |  if_e	jmp	#LR__0510
05ca4     97 28 0E F2 | 	cmp	local06, #151 wz
05ca8     54 02 90 AD |  if_e	jmp	#LR__0511
05cac     61 28 0E F2 | 	cmp	local06, #97 wz
05cb0     58 02 90 AD |  if_e	jmp	#LR__0512
05cb4     63 28 0E F2 | 	cmp	local06, #99 wz
05cb8     5C 02 90 AD |  if_e	jmp	#LR__0513
05cbc     41 28 0E F2 | 	cmp	local06, #65 wz
05cc0     B8 03 90 AD |  if_e	jmp	#LR__0544
05cc4     4B 28 0E F2 | 	cmp	local06, #75 wz
05cc8     58 02 90 AD |  if_e	jmp	#LR__0514
05ccc     5E 28 0E F2 | 	cmp	local06, #94 wz
05cd0     58 02 90 AD |  if_e	jmp	#LR__0515
05cd4     7C 28 0E F2 | 	cmp	local06, #124 wz
05cd8     5C 02 90 AD |  if_e	jmp	#LR__0516
05cdc     7D 28 0E F2 | 	cmp	local06, #125 wz
05ce0     60 02 90 AD |  if_e	jmp	#LR__0517
05ce4     7E 28 0E F2 | 	cmp	local06, #126 wz
05ce8     64 02 90 AD |  if_e	jmp	#LR__0518
05cec     7F 28 0E F2 | 	cmp	local06, #127 wz
05cf0     68 02 90 AD |  if_e	jmp	#LR__0519
05cf4     80 28 0E F2 | 	cmp	local06, #128 wz
05cf8     6C 02 90 AD |  if_e	jmp	#LR__0520
05cfc     55 28 0E F2 | 	cmp	local06, #85 wz
05d00     70 02 90 AD |  if_e	jmp	#LR__0521
05d04     75 28 0E F2 | 	cmp	local06, #117 wz
05d08     74 02 90 AD |  if_e	jmp	#LR__0522
05d0c     42 28 0E F2 | 	cmp	local06, #66 wz
05d10     78 02 90 AD |  if_e	jmp	#LR__0523
05d14     95 28 0E F2 | 	cmp	local06, #149 wz
05d18     7C 02 90 AD |  if_e	jmp	#LR__0524
05d1c     81 28 0E F2 | 	cmp	local06, #129 wz
05d20     80 02 90 AD |  if_e	jmp	#LR__0525
05d24     44 28 0E F2 | 	cmp	local06, #68 wz
05d28     84 02 90 AD |  if_e	jmp	#LR__0526
05d2c     88 28 0E F2 | 	cmp	local06, #136 wz
05d30     48 03 90 AD |  if_e	jmp	#LR__0544
05d34     92 28 0E F2 | 	cmp	local06, #146 wz
05d38     80 02 90 AD |  if_e	jmp	#LR__0527
05d3c     4D 28 0E F2 | 	cmp	local06, #77 wz
05d40     80 02 90 AD |  if_e	jmp	#LR__0528
05d44     51 28 0E F2 | 	cmp	local06, #81 wz
05d48     84 02 90 AD |  if_e	jmp	#LR__0529
05d4c     8E 28 0E F2 | 	cmp	local06, #142 wz
05d50     88 02 90 AD |  if_e	jmp	#LR__0530
05d54     90 28 0E F2 | 	cmp	local06, #144 wz
05d58     8C 02 90 AD |  if_e	jmp	#LR__0531
05d5c     8D 28 0E F2 | 	cmp	local06, #141 wz
05d60     90 02 90 AD |  if_e	jmp	#LR__0532
05d64     8C 28 0E F2 | 	cmp	local06, #140 wz
05d68     94 02 90 AD |  if_e	jmp	#LR__0533
05d6c     91 28 0E F2 | 	cmp	local06, #145 wz
05d70     98 02 90 AD |  if_e	jmp	#LR__0534
05d74     8B 28 0E F2 | 	cmp	local06, #139 wz
05d78     9C 02 90 AD |  if_e	jmp	#LR__0535
05d7c     8F 28 0E F2 | 	cmp	local06, #143 wz
05d80     A0 02 90 AD |  if_e	jmp	#LR__0536
05d84     6D 28 0E F2 | 	cmp	local06, #109 wz
05d88     A4 02 90 AD |  if_e	jmp	#LR__0537
05d8c     70 28 0E F2 | 	cmp	local06, #112 wz
05d90     E8 02 90 AD |  if_e	jmp	#LR__0544
05d94     56 28 0E F2 | 	cmp	local06, #86 wz
05d98     A0 02 90 AD |  if_e	jmp	#LR__0538
05d9c     57 28 0E F2 | 	cmp	local06, #87 wz
05da0     D8 02 90 AD |  if_e	jmp	#LR__0544
05da4     79 28 0E F2 | 	cmp	local06, #121 wz
05da8     9C 02 90 AD |  if_e	jmp	#LR__0539
05dac     77 28 0E F2 | 	cmp	local06, #119 wz
05db0     A0 02 90 AD |  if_e	jmp	#LR__0540
05db4     78 28 0E F2 | 	cmp	local06, #120 wz
05db8     A4 02 90 AD |  if_e	jmp	#LR__0541
05dbc     01 00 00 FF 
05dc0     04 28 0E F2 | 	cmp	local06, ##516 wz
05dc4     A4 02 90 AD |  if_e	jmp	#LR__0542
05dc8     A8 02 90 FD | 	jmp	#LR__0543
05dcc                 | LR__0484
05dcc     AC 0C B0 FD | 	call	#_compile_fun_2p
05dd0     FD 26 02 F6 | 	mov	local05, result1
05dd4     A4 02 90 FD | 	jmp	#LR__0544
05dd8                 | LR__0485
05dd8     E0 0D B0 FD | 	call	#_compile_fun_4p
05ddc     FD 26 02 F6 | 	mov	local05, result1
05de0     98 02 90 FD | 	jmp	#LR__0544
05de4                 | LR__0486
05de4     70 2F B0 FD | 	call	#_expr
05de8                 | ' expr()
05de8                 | ' return 0
05de8     00 26 06 F6 | 	mov	local05, #0
05dec     8C 02 90 FD | 	jmp	#LR__0544
05df0                 | LR__0487
05df0     FC 0C B0 FD | 	call	#_compile_fun_3p
05df4     FD 26 02 F6 | 	mov	local05, result1
05df8     80 02 90 FD | 	jmp	#LR__0544
05dfc                 | LR__0488
05dfc     58 2F B0 FD | 	call	#_expr
05e00                 | ' expr()
05e00                 | ' return 0
05e00     00 26 06 F6 | 	mov	local05, #0
05e04     74 02 90 FD | 	jmp	#LR__0544
05e08                 | LR__0489
05e08     4C 2F B0 FD | 	call	#_expr
05e0c                 | ' expr()
05e0c                 | ' return 0
05e0c     00 26 06 F6 | 	mov	local05, #0
05e10     68 02 90 FD | 	jmp	#LR__0544
05e14                 | LR__0490
05e14     44 10 B0 FD | 	call	#_compile_fun_varp
05e18     FD 2C 02 F6 | 	mov	local08, result1
05e1c     5C 02 90 FD | 	jmp	#LR__0544
05e20                 | LR__0491
05e20     34 2F B0 FD | 	call	#_expr
05e24                 | ' expr()
05e24                 | ' return 0
05e24     00 26 06 F6 | 	mov	local05, #0
05e28     50 02 90 FD | 	jmp	#LR__0544
05e2c                 | LR__0492
05e2c     2C 10 B0 FD | 	call	#_compile_fun_varp
05e30     FD 2C 02 F6 | 	mov	local08, result1
05e34     44 02 90 FD | 	jmp	#LR__0544
05e38                 | LR__0493
05e38     20 10 B0 FD | 	call	#_compile_fun_varp
05e3c     FD 2C 02 F6 | 	mov	local08, result1
05e40     38 02 90 FD | 	jmp	#LR__0544
05e44                 | LR__0494
05e44     98 0E B0 FD | 	call	#_compile_fun_5p
05e48     FD 26 02 F6 | 	mov	local05, result1
05e4c     2C 02 90 FD | 	jmp	#LR__0544
05e50                 | LR__0495
05e50     F4 19 B0 FD | 	call	#_compile_dim
05e54     E0 02 90 FD | 	jmp	#LR__0545
05e58                 | LR__0496
05e58     20 0C B0 FD | 	call	#_compile_fun_2p
05e5c     1C 02 90 FD | 	jmp	#LR__0544
05e60                 | LR__0497
05e60     18 0C B0 FD | 	call	#_compile_fun_2p
05e64     FD 26 02 F6 | 	mov	local05, result1
05e68     10 02 90 FD | 	jmp	#LR__0544
05e6c                 | LR__0498
05e6c     B0 18 B0 FD | 	call	#_compile_else
05e70     C4 02 90 FD | 	jmp	#LR__0545
05e74                 | LR__0499
05e74     01 24 16 F2 | 	cmp	local04, #1 wc
05e78     08 00 90 CD |  if_b	jmp	#LR__0500
05e7c     78 2B B0 FD | 	call	#_compile_goto
05e80     B4 02 90 FD | 	jmp	#LR__0545
05e84                 | LR__0500
05e84     19 12 06 F6 | 	mov	arg01, #25
05e88     6C 31 B1 FD | 	call	#_printerror
05e8c     A8 02 90 FD | 	jmp	#LR__0545
05e90                 | LR__0501
05e90     5C 0C B0 FD | 	call	#_compile_fun_3p
05e94     FD 26 02 F6 | 	mov	local05, result1
05e98     E0 01 90 FD | 	jmp	#LR__0544
05e9c                 | LR__0502
05e9c     1C 0D B0 FD | 	call	#_compile_fun_4p
05ea0     FD 26 02 F6 | 	mov	local05, result1
05ea4     D4 01 90 FD | 	jmp	#LR__0544
05ea8                 | LR__0503
05ea8     AC 2E B0 FD | 	call	#_expr
05eac                 | ' expr()
05eac                 | ' return 0
05eac     00 26 06 F6 | 	mov	local05, #0
05eb0     C8 01 90 FD | 	jmp	#LR__0544
05eb4                 | LR__0504
05eb4     A0 20 B0 FD | 	call	#_compile_for
05eb8     7C 02 90 FD | 	jmp	#LR__0545
05ebc                 | LR__0505
05ebc     FC 0C B0 FD | 	call	#_compile_fun_4p
05ec0     FD 26 02 F6 | 	mov	local05, result1
05ec4     B4 01 90 FD | 	jmp	#LR__0544
05ec8                 | LR__0506
05ec8     14 17 B0 FD | 	call	#_compile_if
05ecc     68 02 90 FD | 	jmp	#LR__0545
05ed0                 | LR__0507
05ed0     84 2E B0 FD | 	call	#_expr
05ed4                 | ' expr()
05ed4                 | ' return 0
05ed4     00 26 06 F6 | 	mov	local05, #0
05ed8     A0 01 90 FD | 	jmp	#LR__0544
05edc                 | LR__0508
05edc     78 2E B0 FD | 	call	#_expr
05ee0                 | ' expr()
05ee0                 | ' return 0
05ee0     00 26 06 F6 | 	mov	local05, #0
05ee4     94 01 90 FD | 	jmp	#LR__0544
05ee8                 | LR__0509
05ee8     70 0F B0 FD | 	call	#_compile_fun_varp
05eec     FD 2C 02 F6 | 	mov	local08, result1
05ef0     88 01 90 FD | 	jmp	#LR__0544
05ef4                 | LR__0510
05ef4     64 0F B0 FD | 	call	#_compile_fun_varp
05ef8     FD 2C 02 F6 | 	mov	local08, result1
05efc     7C 01 90 FD | 	jmp	#LR__0544
05f00                 | LR__0511
05f00     78 0B B0 FD | 	call	#_compile_fun_2p
05f04     FD 26 02 F6 | 	mov	local05, result1
05f08     70 01 90 FD | 	jmp	#LR__0544
05f0c                 | LR__0512
05f0c     48 2E B0 FD | 	call	#_expr
05f10                 | ' expr()
05f10                 | ' return 0
05f10     00 26 06 F6 | 	mov	local05, #0
05f14     64 01 90 FD | 	jmp	#LR__0544
05f18                 | LR__0513
05f18     3C 2E B0 FD | 	call	#_expr
05f1c                 | ' expr()
05f1c                 | ' return 0
05f1c     00 26 06 F6 | 	mov	local05, #0
05f20     58 01 90 FD | 	jmp	#LR__0544
05f24                 | LR__0514
05f24     20 29 B0 FD | 	call	#_compile_next
05f28     0C 02 90 FD | 	jmp	#LR__0545
05f2c                 | LR__0515
05f2c     28 2E B0 FD | 	call	#_expr
05f30                 | ' expr()
05f30                 | ' return 0
05f30     00 26 06 F6 | 	mov	local05, #0
05f34     44 01 90 FD | 	jmp	#LR__0544
05f38                 | LR__0516
05f38     1C 2E B0 FD | 	call	#_expr
05f3c                 | ' expr()
05f3c                 | ' return 0
05f3c     00 26 06 F6 | 	mov	local05, #0
05f40     38 01 90 FD | 	jmp	#LR__0544
05f44                 | LR__0517
05f44     10 2E B0 FD | 	call	#_expr
05f48                 | ' expr()
05f48                 | ' return 0
05f48     00 26 06 F6 | 	mov	local05, #0
05f4c     2C 01 90 FD | 	jmp	#LR__0544
05f50                 | LR__0518
05f50     04 2E B0 FD | 	call	#_expr
05f54                 | ' expr()
05f54                 | ' return 0
05f54     00 26 06 F6 | 	mov	local05, #0
05f58     20 01 90 FD | 	jmp	#LR__0544
05f5c                 | LR__0519
05f5c     5C 0C B0 FD | 	call	#_compile_fun_4p
05f60     FD 26 02 F6 | 	mov	local05, result1
05f64     14 01 90 FD | 	jmp	#LR__0544
05f68                 | LR__0520
05f68     EC 2D B0 FD | 	call	#_expr
05f6c                 | ' expr()
05f6c                 | ' return 0
05f6c     00 26 06 F6 | 	mov	local05, #0
05f70     08 01 90 FD | 	jmp	#LR__0544
05f74                 | LR__0521
05f74     04 0B B0 FD | 	call	#_compile_fun_2p
05f78     FD 26 02 F6 | 	mov	local05, result1
05f7c     FC 00 90 FD | 	jmp	#LR__0544
05f80                 | LR__0522
05f80     D8 0E B0 FD | 	call	#_compile_fun_varp
05f84     FD 2C 02 F6 | 	mov	local08, result1
05f88     F0 00 90 FD | 	jmp	#LR__0544
05f8c                 | LR__0523
05f8c     EC 0A B0 FD | 	call	#_compile_fun_2p
05f90     FD 26 02 F6 | 	mov	local05, result1
05f94     E4 00 90 FD | 	jmp	#LR__0544
05f98                 | LR__0524
05f98     E0 0A B0 FD | 	call	#_compile_fun_2p
05f9c     FD 26 02 F6 | 	mov	local05, result1
05fa0     D8 00 90 FD | 	jmp	#LR__0544
05fa4                 | LR__0525
05fa4     D4 0A B0 FD | 	call	#_compile_fun_2p
05fa8     FD 26 02 F6 | 	mov	local05, result1
05fac     CC 00 90 FD | 	jmp	#LR__0544
05fb0                 | LR__0526
05fb0     54 0F B0 FD | 	call	#_compile_print
05fb4     FD 26 02 F6 | 	mov	local05, result1
05fb8     7C 01 90 FD | 	jmp	#LR__0545
05fbc                 | LR__0527
05fbc     98 2D B0 FD | 	call	#_expr
05fc0                 | ' expr()
05fc0                 | ' return 0
05fc0     B8 00 90 FD | 	jmp	#LR__0544
05fc4                 | LR__0528
05fc4     94 0E B0 FD | 	call	#_compile_fun_varp
05fc8     FD 2C 02 F6 | 	mov	local08, result1
05fcc     AC 00 90 FD | 	jmp	#LR__0544
05fd0                 | LR__0529
05fd0     88 0E B0 FD | 	call	#_compile_fun_varp
05fd4     FD 2C 02 F6 | 	mov	local08, result1
05fd8     A0 00 90 FD | 	jmp	#LR__0544
05fdc                 | LR__0530
05fdc     9C 0A B0 FD | 	call	#_compile_fun_2p
05fe0     FD 26 02 F6 | 	mov	local05, result1
05fe4     94 00 90 FD | 	jmp	#LR__0544
05fe8                 | LR__0531
05fe8     90 0A B0 FD | 	call	#_compile_fun_2p
05fec     FD 26 02 F6 | 	mov	local05, result1
05ff0     88 00 90 FD | 	jmp	#LR__0544
05ff4                 | LR__0532
05ff4     84 0A B0 FD | 	call	#_compile_fun_2p
05ff8     FD 26 02 F6 | 	mov	local05, result1
05ffc     7C 00 90 FD | 	jmp	#LR__0544
06000                 | LR__0533
06000     78 0A B0 FD | 	call	#_compile_fun_2p
06004     FD 26 02 F6 | 	mov	local05, result1
06008     70 00 90 FD | 	jmp	#LR__0544
0600c                 | LR__0534
0600c     6C 0A B0 FD | 	call	#_compile_fun_2p
06010     FD 26 02 F6 | 	mov	local05, result1
06014     64 00 90 FD | 	jmp	#LR__0544
06018                 | LR__0535
06018     60 0A B0 FD | 	call	#_compile_fun_2p
0601c     FD 26 02 F6 | 	mov	local05, result1
06020     58 00 90 FD | 	jmp	#LR__0544
06024                 | LR__0536
06024     54 0A B0 FD | 	call	#_compile_fun_2p
06028     FD 26 02 F6 | 	mov	local05, result1
0602c     4C 00 90 FD | 	jmp	#LR__0544
06030                 | LR__0537
06030     BC 0A B0 FD | 	call	#_compile_fun_3p
06034     FD 26 02 F6 | 	mov	local05, result1
06038     40 00 90 FD | 	jmp	#LR__0544
0603c                 | LR__0538
0603c     18 2D B0 FD | 	call	#_expr
06040                 | ' expr()
06040                 | ' return 0
06040     00 26 06 F6 | 	mov	local05, #0
06044     34 00 90 FD | 	jmp	#LR__0544
06048                 | LR__0539
06048     30 0A B0 FD | 	call	#_compile_fun_2p
0604c     FD 26 02 F6 | 	mov	local05, result1
06050     28 00 90 FD | 	jmp	#LR__0544
06054                 | LR__0540
06054     24 0A B0 FD | 	call	#_compile_fun_2p
06058     FD 26 02 F6 | 	mov	local05, result1
0605c     1C 00 90 FD | 	jmp	#LR__0544
06060                 | LR__0541
06060     18 0A B0 FD | 	call	#_compile_fun_2p
06064     FD 26 02 F6 | 	mov	local05, result1
06068     10 00 90 FD | 	jmp	#LR__0544
0606c                 | LR__0542
0606c     E8 01 B0 FD | 	call	#_compile_array_assign
06070     C4 00 90 FD | 	jmp	#LR__0545
06074                 | LR__0543
06074     48 09 B0 FD | 	call	#_compile_unknown
06078     BC 00 90 FD | 	jmp	#LR__0545
0607c                 | LR__0544
0607c     14 23 02 F6 | 	mov	local03, local06
06080     16 1F 02 F6 | 	mov	local01, local08
06084     0F 2B 02 F6 | 	mov	local07, local01
06088     10 2F 02 F6 | 	mov	local09, local02
0608c     11 29 02 F6 | 	mov	local06, local03
06090     6A 00 00 FF 
06094     60 E4 05 F1 | 	add	objptr, ##54368
06098     F2 1E 02 FB | 	rdlong	local01, objptr
0609c     0F 2D 02 F6 | 	mov	local08, local01
060a0     01 2C 66 F0 | 	shl	local08, #1
060a4     0F 2D 02 F1 | 	add	local08, local01
060a8     02 2C 66 F0 | 	shl	local08, #2
060ac     03 00 00 FF 
060b0     00 E4 85 F1 | 	sub	objptr, ##1536
060b4     F2 2C 02 F1 | 	add	local08, objptr
060b8     16 2B 62 FC | 	wrlong	local07, local08
060bc     03 00 00 FF 
060c0     00 E4 05 F1 | 	add	objptr, ##1536
060c4     F2 1E 02 FB | 	rdlong	local01, objptr
060c8     0F 2D 02 F6 | 	mov	local08, local01
060cc     01 2C 66 F0 | 	shl	local08, #1
060d0     0F 2D 02 F1 | 	add	local08, local01
060d4     02 2C 66 F0 | 	shl	local08, #2
060d8     03 00 00 FF 
060dc     00 E4 85 F1 | 	sub	objptr, ##1536
060e0     F2 2C 02 F1 | 	add	local08, objptr
060e4     04 2C 06 F1 | 	add	local08, #4
060e8     16 2F 62 FC | 	wrlong	local09, local08
060ec     03 00 00 FF 
060f0     00 E4 05 F1 | 	add	objptr, ##1536
060f4     F2 1E 02 FB | 	rdlong	local01, objptr
060f8     0F 2D 02 F6 | 	mov	local08, local01
060fc     01 2C 66 F0 | 	shl	local08, #1
06100     0F 2D 02 F1 | 	add	local08, local01
06104     02 2C 66 F0 | 	shl	local08, #2
06108     03 00 00 FF 
0610c     00 E4 85 F1 | 	sub	objptr, ##1536
06110     F2 2C 02 F1 | 	add	local08, objptr
06114     08 2C 06 F1 | 	add	local08, #8
06118     16 29 62 FC | 	wrlong	local06, local08
0611c     03 00 00 FF 
06120     00 E4 05 F1 | 	add	objptr, ##1536
06124     F2 2A 02 FB | 	rdlong	local07, objptr
06128     01 2A 06 F1 | 	add	local07, #1
0612c     F2 2A 62 FC | 	wrlong	local07, objptr
06130     6A 00 00 FF 
06134     60 E4 85 F1 | 	sub	objptr, ##54368
06138                 | LR__0545
06138                 | ' 
06138                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
06138                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
06138     00 24 0E F2 | 	cmp	local04, #0 wz
0613c     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06140     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06144     38 00 90 5D |  if_ne	jmp	#LR__0546
06148     6A 00 00 FF 
0614c     60 E4 05 F1 | 	add	objptr, ##54368
06150     F2 2C 02 FB | 	rdlong	local08, objptr
06154     16 1F 02 F6 | 	mov	local01, local08
06158     01 1E 66 F0 | 	shl	local01, #1
0615c     16 1F 02 F1 | 	add	local01, local08
06160     02 1E 66 F0 | 	shl	local01, #2
06164     03 00 00 FF 
06168     00 E4 85 F1 | 	sub	objptr, ##1536
0616c     F2 1E 02 F1 | 	add	local01, objptr
06170     08 1E 06 F1 | 	add	local01, #8
06174     0F FD 6B FC | 	wrlong	#510, local01
06178     67 00 00 FF 
0617c     60 E4 85 F1 | 	sub	objptr, ##52832
06180                 | LR__0546
06180                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
06180     6A 00 00 FF 
06184     60 E4 05 F1 | 	add	objptr, ##54368
06188     F2 1E 02 FB | 	rdlong	local01, objptr
0618c     6A 00 00 FF 
06190     60 E4 85 F1 | 	sub	objptr, ##54368
06194     97 58 48 FB | 	callpa	#(@LR__0549-@LR__0547)>>2,fcache_load_ptr_
06198                 | LR__0547
06198     0F 2D 02 F6 | 	mov	local08, local01
0619c     01 2C 66 F0 | 	shl	local08, #1
061a0     0F 2D 02 F1 | 	add	local08, local01
061a4     02 2C 66 F0 | 	shl	local08, #2
061a8     67 00 00 FF 
061ac     60 E4 05 F1 | 	add	objptr, ##52832
061b0     F2 2C 02 F1 | 	add	local08, objptr
061b4     08 2C 06 F1 | 	add	local08, #8
061b8     16 2D 02 FB | 	rdlong	local08, local08
061bc     9B 2C 0E F2 | 	cmp	local08, #155 wz
061c0     67 00 00 FF 
061c4     60 E4 85 F1 | 	sub	objptr, ##52832
061c8     70 00 90 5D |  if_ne	jmp	#LR__0548
061cc     0F 2D 02 F6 | 	mov	local08, local01
061d0     01 2C 86 F1 | 	sub	local08, #1
061d4     16 2F 02 F6 | 	mov	local09, local08
061d8     01 2E 66 F0 | 	shl	local09, #1
061dc     16 2F 02 F1 | 	add	local09, local08
061e0     02 2E 66 F0 | 	shl	local09, #2
061e4     67 00 00 FF 
061e8     60 E4 05 F1 | 	add	objptr, ##52832
061ec     F2 2E 02 F1 | 	add	local09, objptr
061f0     08 2E 06 F1 | 	add	local09, #8
061f4     17 2D 02 FB | 	rdlong	local08, local09
061f8     11 2C 0E F2 | 	cmp	local08, #17 wz
061fc     67 00 00 FF 
06200     60 E4 85 F1 | 	sub	objptr, ##52832
06204     34 00 90 5D |  if_ne	jmp	#LR__0548
06208     0F 2F 02 F6 | 	mov	local09, local01
0620c     01 2E 86 F1 | 	sub	local09, #1
06210     17 2D 02 F6 | 	mov	local08, local09
06214     01 2C 66 F0 | 	shl	local08, #1
06218     17 2D 02 F1 | 	add	local08, local09
0621c     02 2C 66 F0 | 	shl	local08, #2
06220     67 00 00 FF 
06224     60 E4 05 F1 | 	add	objptr, ##52832
06228     F2 2C 02 F1 | 	add	local08, objptr
0622c     08 2C 06 F1 | 	add	local08, #8
06230     16 25 68 FC | 	wrlong	#18, local08
06234     67 00 00 FF 
06238     60 E4 85 F1 | 	sub	objptr, ##52832
0623c                 | LR__0548
0623c     01 1E 86 F1 | 	sub	local01, #1
06240     01 1E 56 F2 | 	cmps	local01, #1 wc
06244     50 FF 9F 3D |  if_ae	jmp	#LR__0547
06248                 | LR__0549
06248                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
06248                 | ' return err
06248     13 FB 01 F6 | 	mov	result1, local05
0624c     A7 F0 03 F6 | 	mov	ptra, fp
06250     B2 00 A0 FD | 	call	#popregs_
06254                 | _compile_immediate_ret
06254     2D 00 64 FD | 	ret
06258                 | 
06258                 | ' 
06258                 | ' sub compile_array_assign
06258                 | _compile_array_assign
06258     0A 4A 05 F6 | 	mov	COUNT_, #10
0625c     A8 00 A0 FD | 	call	#pushregs_
06260     00 24 06 F6 | 	mov	local04, #0
06264     57 00 00 FF 
06268     28 E4 05 F1 | 	add	objptr, ##44584
0626c     F2 26 02 FB | 	rdlong	local05, objptr
06270     13 FB 01 F6 | 	mov	result1, local05
06274     01 FA 85 F1 | 	sub	result1, #1
06278     03 FA 65 F0 | 	shl	result1, #3
0627c     02 00 00 FF 
06280     38 E4 85 F1 | 	sub	objptr, ##1080
06284     F2 FA 01 F1 | 	add	result1, objptr
06288     FD 28 02 FB | 	rdlong	local06, result1
0628c                 | ' numpar=0
0628c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
0628c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
0628c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
0628c                 | ' if lparts(ct).token=token_lpar then
0628c     03 26 66 F0 | 	shl	local05, #3
06290     F2 26 02 F1 | 	add	local05, objptr
06294     04 26 06 F1 | 	add	local05, #4
06298     13 27 02 FB | 	rdlong	local05, local05
0629c     15 26 0E F2 | 	cmp	local05, #21 wz
062a0     54 00 00 FF 
062a4     F0 E5 85 F1 | 	sub	objptr, ##43504
062a8     D4 01 90 5D |  if_ne	jmp	#LR__0554
062ac     57 00 00 FF 
062b0     28 E4 05 F1 | 	add	objptr, ##44584
062b4     F2 2A 02 FB | 	rdlong	local07, objptr
062b8     01 2A 06 F1 | 	add	local07, #1
062bc     F2 2A 62 FC | 	wrlong	local07, objptr
062c0     57 00 00 FF 
062c4     28 E4 85 F1 | 	sub	objptr, ##44584
062c8                 | '   ct+=1 											' omit this lpar, this is for expr list
062c8                 | '   do
062c8                 | LR__0550
062c8     8C 2A B0 FD | 	call	#_expr
062cc     57 00 00 FF 
062d0     28 E4 05 F1 | 	add	objptr, ##44584
062d4     F2 26 02 FB | 	rdlong	local05, objptr
062d8     01 26 06 F1 | 	add	local05, #1
062dc     F2 26 62 FC | 	wrlong	local05, objptr
062e0     01 24 06 F1 | 	add	local04, #1
062e4     01 26 86 F1 | 	sub	local05, #1
062e8     03 26 66 F0 | 	shl	local05, #3
062ec     02 00 00 FF 
062f0     38 E4 85 F1 | 	sub	objptr, ##1080
062f4     F2 26 02 F1 | 	add	local05, objptr
062f8     04 26 06 F1 | 	add	local05, #4
062fc     13 2B 02 FB | 	rdlong	local07, local05
06300     14 2A 0E F2 | 	cmp	local07, #20 wz
06304     54 00 00 FF 
06308     F0 E5 85 F1 | 	sub	objptr, ##43504
0630c     34 00 90 AD |  if_e	jmp	#LR__0551
06310     57 00 00 FF 
06314     28 E4 05 F1 | 	add	objptr, ##44584
06318     F2 2A 02 FB | 	rdlong	local07, objptr
0631c     03 2A 66 F0 | 	shl	local07, #3
06320     02 00 00 FF 
06324     38 E4 85 F1 | 	sub	objptr, ##1080
06328     F2 2A 02 F1 | 	add	local07, objptr
0632c     04 2A 06 F1 | 	add	local07, #4
06330     15 2B 02 FB | 	rdlong	local07, local07
06334     FE 2B 0E F2 | 	cmp	local07, #510 wz
06338     54 00 00 FF 
0633c     F0 E5 85 F1 | 	sub	objptr, ##43504
06340     84 FF 9F 5D |  if_ne	jmp	#LR__0550
06344                 | LR__0551
06344     57 00 00 FF 
06348     28 E4 05 F1 | 	add	objptr, ##44584
0634c     F2 2A 02 FB | 	rdlong	local07, objptr
06350     01 2A 06 F1 | 	add	local07, #1
06354     F2 2A 62 FC | 	wrlong	local07, objptr
06358     57 00 00 FF 
0635c     28 E4 85 F1 | 	sub	objptr, ##44584
06360     F4 29 B0 FD | 	call	#_expr
06364     01 2C 66 F6 | 	neg	local08, #1
06368     00 2E 06 F6 | 	mov	local09, #0
0636c                 | ' '   print "in array_assign, rpar found, numpar=",numpar
0636c                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
0636c                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
0636c                 | ' ct+=1 : expr()
0636c                 | ' ' now find the vae
0636c                 | ' 
0636c                 | ' j=-1 : i=0 : do : 
0636c                 | LR__0552
0636c                 | '   if variables(i).name=varname$ then j=i: exit loop
0636c     17 27 02 F6 | 	mov	local05, local09
06370     04 26 66 F0 | 	shl	local05, #4
06374     34 00 00 FF 
06378     EC E5 05 F1 | 	add	objptr, ##27116
0637c     F2 26 02 F1 | 	add	local05, objptr
06380     13 13 02 FB | 	rdlong	arg01, local05
06384     14 15 02 F6 | 	mov	arg02, local06
06388     34 00 00 FF 
0638c     EC E5 85 F1 | 	sub	objptr, ##27116
06390     74 64 B1 FD | 	call	#__system___string_cmp
06394     00 FA 0D F2 | 	cmp	result1, #0 wz
06398     17 2D 02 A6 |  if_e	mov	local08, local09
0639c     20 00 90 AD |  if_e	jmp	#LR__0553
063a0     01 2E 06 F1 | 	add	local09, #1
063a4     54 00 00 FF 
063a8     EC E5 05 F1 | 	add	objptr, ##43500
063ac     F2 2A 02 FB | 	rdlong	local07, objptr
063b0     54 00 00 FF 
063b4     EC E5 85 F1 | 	sub	objptr, ##43500
063b8     15 2F 5A F2 | 	cmps	local09, local07 wcz
063bc     AC FF 9F ED |  if_be	jmp	#LR__0552
063c0                 | LR__0553
063c0     16 1F 02 F6 | 	mov	local01, local08
063c4     12 21 02 F6 | 	mov	local02, local04
063c8     17 22 06 F6 | 	mov	local03, #23
063cc     0F 2B 02 F6 | 	mov	local07, local01
063d0     10 31 02 F6 | 	mov	local10, local02
063d4     11 2D 02 F6 | 	mov	local08, local03
063d8     6A 00 00 FF 
063dc     60 E4 05 F1 | 	add	objptr, ##54368
063e0     F2 1E 02 FB | 	rdlong	local01, objptr
063e4     0F 2F 02 F6 | 	mov	local09, local01
063e8     01 2E 66 F0 | 	shl	local09, #1
063ec     0F 2F 02 F1 | 	add	local09, local01
063f0     02 2E 66 F0 | 	shl	local09, #2
063f4     03 00 00 FF 
063f8     00 E4 85 F1 | 	sub	objptr, ##1536
063fc     F2 2E 02 F1 | 	add	local09, objptr
06400     17 2B 62 FC | 	wrlong	local07, local09
06404     03 00 00 FF 
06408     00 E4 05 F1 | 	add	objptr, ##1536
0640c     F2 1E 02 FB | 	rdlong	local01, objptr
06410     0F 2F 02 F6 | 	mov	local09, local01
06414     01 2E 66 F0 | 	shl	local09, #1
06418     0F 2F 02 F1 | 	add	local09, local01
0641c     02 2E 66 F0 | 	shl	local09, #2
06420     03 00 00 FF 
06424     00 E4 85 F1 | 	sub	objptr, ##1536
06428     F2 2E 02 F1 | 	add	local09, objptr
0642c     04 2E 06 F1 | 	add	local09, #4
06430     17 31 62 FC | 	wrlong	local10, local09
06434     03 00 00 FF 
06438     00 E4 05 F1 | 	add	objptr, ##1536
0643c     F2 30 02 FB | 	rdlong	local10, objptr
06440     18 1F 02 F6 | 	mov	local01, local10
06444     01 1E 66 F0 | 	shl	local01, #1
06448     18 1F 02 F1 | 	add	local01, local10
0644c     02 1E 66 F0 | 	shl	local01, #2
06450     03 00 00 FF 
06454     00 E4 85 F1 | 	sub	objptr, ##1536
06458     F2 1E 02 F1 | 	add	local01, objptr
0645c     08 1E 06 F1 | 	add	local01, #8
06460     0F 2D 62 FC | 	wrlong	local08, local01
06464     03 00 00 FF 
06468     00 E4 05 F1 | 	add	objptr, ##1536
0646c     F2 2A 02 FB | 	rdlong	local07, objptr
06470     01 2A 06 F1 | 	add	local07, #1
06474     F2 2A 62 FC | 	wrlong	local07, objptr
06478     6A 00 00 FF 
0647c     60 E4 85 F1 | 	sub	objptr, ##54368
06480                 | LR__0554
06480     A7 F0 03 F6 | 	mov	ptra, fp
06484     B2 00 A0 FD | 	call	#popregs_
06488                 | _compile_array_assign_ret
06488     2D 00 64 FD | 	ret
0648c                 | 
0648c                 | ' 
0648c                 | ' 
0648c                 | ' sub compile_immediate_assign(linetype as ulong)
0648c                 | _compile_immediate_assign
0648c     09 4A 05 F6 | 	mov	COUNT_, #9
06490     A8 00 A0 FD | 	call	#pushregs_
06494     09 25 0A F6 | 	mov	local04, arg01 wz
06498     FF 22 06 F6 | 	mov	local03, #255
0649c     01 26 66 F6 | 	neg	local05, #1
064a0                 | ' 
064a0                 | ' t1.result_type=result_error : t1.result.uresult=0
064a0                 | ' i=-1: j=-1
064a0                 | ' 
064a0                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
064a0     2C 00 90 5D |  if_ne	jmp	#LR__0560
064a4     54 00 00 FF 
064a8     F0 E5 05 F1 | 	add	objptr, ##43504
064ac     F2 28 02 FB | 	rdlong	local06, objptr
064b0     02 00 00 FF 
064b4     38 E4 05 F1 | 	add	objptr, ##1080
064b8     F2 04 68 FC | 	wrlong	#2, objptr
064bc     13 00 00 FF 
064c0     38 E4 05 F1 | 	add	objptr, ##9784
064c4     F2 00 68 FC | 	wrlong	#0, objptr
064c8     6A 00 00 FF 
064cc     60 E4 85 F1 | 	sub	objptr, ##54368
064d0                 | LR__0560
064d0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
064d0     02 24 0E F2 | 	cmp	local04, #2 wz
064d4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
064d8     54 00 00 AF 
064dc     F0 E5 05 A1 |  if_e	add	objptr, ##43504
064e0     F2 28 02 AB |  if_e	rdlong	local06, objptr
064e4     02 00 00 AF 
064e8     38 E4 05 A1 |  if_e	add	objptr, ##1080
064ec     F2 04 68 AC |  if_e	wrlong	#2, objptr
064f0     57 00 00 AF 
064f4     28 E4 85 A1 |  if_e	sub	objptr, ##44584
064f8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
064f8     04 24 0E F2 | 	cmp	local04, #4 wz
064fc     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06500     2C 00 90 5D |  if_ne	jmp	#LR__0561
06504     54 00 00 FF 
06508     F8 E5 05 F1 | 	add	objptr, ##43512
0650c     F2 28 02 FB | 	rdlong	local06, objptr
06510     02 00 00 FF 
06514     30 E4 05 F1 | 	add	objptr, ##1072
06518     F2 06 68 FC | 	wrlong	#3, objptr
0651c     13 00 00 FF 
06520     38 E4 05 F1 | 	add	objptr, ##9784
06524     F2 04 68 FC | 	wrlong	#2, objptr
06528     6A 00 00 FF 
0652c     60 E4 85 F1 | 	sub	objptr, ##54368
06530                 | LR__0561
06530                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
06530     05 24 0E F2 | 	cmp	local04, #5 wz
06534     3C 00 90 5D |  if_ne	jmp	#LR__0562
06538     57 00 00 FF 
0653c     28 E4 05 F1 | 	add	objptr, ##44584
06540     F2 FA 01 FB | 	rdlong	result1, objptr
06544     FD 28 02 F6 | 	mov	local06, result1
06548     03 28 66 F0 | 	shl	local06, #3
0654c     02 00 00 FF 
06550     38 E4 85 F1 | 	sub	objptr, ##1080
06554     F2 28 02 F1 | 	add	local06, objptr
06558     14 29 02 FB | 	rdlong	local06, local06
0655c     02 FA 05 F1 | 	add	result1, #2
06560     02 00 00 FF 
06564     38 E4 05 F1 | 	add	objptr, ##1080
06568     F2 FA 61 FC | 	wrlong	result1, objptr
0656c     57 00 00 FF 
06570     28 E4 85 F1 | 	sub	objptr, ##44584
06574                 | LR__0562
06574     14 13 02 F6 | 	mov	arg01, local06
06578     01 14 06 F6 | 	mov	arg02, #1
0657c     2C 83 B1 FD | 	call	#__system__Right_S
06580     D4 27 B0 FD | 	call	#_expr
06584                 | '  
06584                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06584                 | ' 
06584                 | ' suffix2$=right$(varname2$,1)
06584                 | ' expr()
06584                 | ' 
06584                 | ' 
06584                 | ' if varnum>0 then
06584     54 00 00 FF 
06588     EC E5 05 F1 | 	add	objptr, ##43500
0658c     F2 2A 02 FB | 	rdlong	local07, objptr
06590     54 00 00 FF 
06594     EC E5 85 F1 | 	sub	objptr, ##43500
06598     01 2A 56 F2 | 	cmps	local07, #1 wc
0659c     58 00 90 CD |  if_b	jmp	#LR__0565
065a0                 | '   for i=0 to varnum-1
065a0     00 2C 06 F6 | 	mov	local08, #0
065a4     54 00 00 FF 
065a8     EC E5 05 F1 | 	add	objptr, ##43500
065ac     F2 2E 02 FB | 	rdlong	local09, objptr
065b0     54 00 00 FF 
065b4     EC E5 85 F1 | 	sub	objptr, ##43500
065b8                 | LR__0563
065b8     17 2D 52 F2 | 	cmps	local08, local09 wc
065bc     38 00 90 3D |  if_ae	jmp	#LR__0564
065c0                 | '     if variables(i).name=varname2$ then j=i : exit
065c0     16 2B 02 F6 | 	mov	local07, local08
065c4     04 2A 66 F0 | 	shl	local07, #4
065c8     34 00 00 FF 
065cc     EC E5 05 F1 | 	add	objptr, ##27116
065d0     F2 2A 02 F1 | 	add	local07, objptr
065d4     15 13 02 FB | 	rdlong	arg01, local07
065d8     14 15 02 F6 | 	mov	arg02, local06
065dc     34 00 00 FF 
065e0     EC E5 85 F1 | 	sub	objptr, ##27116
065e4     20 62 B1 FD | 	call	#__system___string_cmp
065e8     00 FA 0D F2 | 	cmp	result1, #0 wz
065ec     16 27 02 A6 |  if_e	mov	local05, local08
065f0     01 2C 06 51 |  if_ne	add	local08, #1
065f4     C0 FF 9F 5D |  if_ne	jmp	#LR__0563
065f8                 | LR__0564
065f8                 | LR__0565
065f8                 | ' if  j=-1 andalso varnum<maxvars then   
065f8     FF FF 7F FF 
065fc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
06600     60 00 90 5D |  if_ne	jmp	#LR__0566
06604     54 00 00 FF 
06608     EC E5 05 F1 | 	add	objptr, ##43500
0660c     F2 2A 02 FB | 	rdlong	local07, objptr
06610     54 00 00 FF 
06614     EC E5 85 F1 | 	sub	objptr, ##43500
06618     01 00 00 FF 
0661c     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
06620     40 00 90 3D |  if_ae	jmp	#LR__0566
06624     54 00 00 FF 
06628     EC E5 05 F1 | 	add	objptr, ##43500
0662c     F2 2E 02 FB | 	rdlong	local09, objptr
06630     04 2E 66 F0 | 	shl	local09, #4
06634     20 00 00 FF 
06638     00 E4 85 F1 | 	sub	objptr, ##16384
0663c     F2 2E 02 F1 | 	add	local09, objptr
06640     17 29 62 FC | 	wrlong	local06, local09
06644     20 00 00 FF 
06648     00 E4 05 F1 | 	add	objptr, ##16384
0664c     F2 2A 02 FB | 	rdlong	local07, objptr
06650     15 27 02 F6 | 	mov	local05, local07
06654     01 2A 06 F1 | 	add	local07, #1
06658     F2 2A 62 FC | 	wrlong	local07, objptr
0665c     54 00 00 FF 
06660     EC E5 85 F1 | 	sub	objptr, ##43500
06664                 | LR__0566
06664     13 1F 02 F6 | 	mov	local01, local05
06668     17 22 06 F6 | 	mov	local03, #23
0666c     0F 2B 02 F6 | 	mov	local07, local01
06670     10 2F 02 F6 | 	mov	local09, local02
06674     11 1F 02 F6 | 	mov	local01, local03
06678     6A 00 00 FF 
0667c     60 E4 05 F1 | 	add	objptr, ##54368
06680     F2 2C 02 FB | 	rdlong	local08, objptr
06684     16 29 02 F6 | 	mov	local06, local08
06688     01 28 66 F0 | 	shl	local06, #1
0668c     16 29 02 F1 | 	add	local06, local08
06690     02 28 66 F0 | 	shl	local06, #2
06694     03 00 00 FF 
06698     00 E4 85 F1 | 	sub	objptr, ##1536
0669c     F2 28 02 F1 | 	add	local06, objptr
066a0     14 2B 62 FC | 	wrlong	local07, local06
066a4     03 00 00 FF 
066a8     00 E4 05 F1 | 	add	objptr, ##1536
066ac     F2 2C 02 FB | 	rdlong	local08, objptr
066b0     16 2B 02 F6 | 	mov	local07, local08
066b4     01 2A 66 F0 | 	shl	local07, #1
066b8     16 2B 02 F1 | 	add	local07, local08
066bc     02 2A 66 F0 | 	shl	local07, #2
066c0     03 00 00 FF 
066c4     00 E4 85 F1 | 	sub	objptr, ##1536
066c8     F2 2A 02 F1 | 	add	local07, objptr
066cc     04 2A 06 F1 | 	add	local07, #4
066d0     15 2F 62 FC | 	wrlong	local09, local07
066d4     03 00 00 FF 
066d8     00 E4 05 F1 | 	add	objptr, ##1536
066dc     F2 2E 02 FB | 	rdlong	local09, objptr
066e0     17 2D 02 F6 | 	mov	local08, local09
066e4     01 2C 66 F0 | 	shl	local08, #1
066e8     17 2D 02 F1 | 	add	local08, local09
066ec     02 2C 66 F0 | 	shl	local08, #2
066f0     03 00 00 FF 
066f4     00 E4 85 F1 | 	sub	objptr, ##1536
066f8     F2 2C 02 F1 | 	add	local08, objptr
066fc     08 2C 06 F1 | 	add	local08, #8
06700     16 1F 62 FC | 	wrlong	local01, local08
06704     03 00 00 FF 
06708     00 E4 05 F1 | 	add	objptr, ##1536
0670c     F2 2A 02 FB | 	rdlong	local07, objptr
06710     01 2A 06 F1 | 	add	local07, #1
06714     F2 2A 62 FC | 	wrlong	local07, objptr
06718     6A 00 00 FF 
0671c     60 E4 85 F1 | 	sub	objptr, ##54368
06720                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
06720                 | ' 
06720                 | ' 
06720                 | ' 
06720                 | ' 
06720                 | ' 
06720                 | ' 
06720                 | ' compiledline(lineptr)=t1:  lineptr+=1 
06720                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
06720     00 24 0E F2 | 	cmp	local04, #0 wz
06724     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06728     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
0672c     38 00 90 5D |  if_ne	jmp	#LR__0567
06730     6A 00 00 FF 
06734     60 E4 05 F1 | 	add	objptr, ##54368
06738     F2 1E 02 FB | 	rdlong	local01, objptr
0673c     0F 2F 02 F6 | 	mov	local09, local01
06740     01 2E 66 F0 | 	shl	local09, #1
06744     0F 2F 02 F1 | 	add	local09, local01
06748     02 2E 66 F0 | 	shl	local09, #2
0674c     03 00 00 FF 
06750     00 E4 85 F1 | 	sub	objptr, ##1536
06754     F2 2E 02 F1 | 	add	local09, objptr
06758     08 2E 06 F1 | 	add	local09, #8
0675c     17 FD 6B FC | 	wrlong	#510, local09
06760     67 00 00 FF 
06764     60 E4 85 F1 | 	sub	objptr, ##52832
06768                 | LR__0567
06768     A7 F0 03 F6 | 	mov	ptra, fp
0676c     B2 00 A0 FD | 	call	#popregs_
06770                 | _compile_immediate_assign_ret
06770     2D 00 64 FD | 	ret
06774                 | 
06774                 | ' 
06774                 | ' ' ------------------ compile the line that is calling a command 
06774                 | ' 
06774                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06774                 | _compile
06774     04 4A 05 F6 | 	mov	COUNT_, #4
06778     A8 00 A0 FD | 	call	#pushregs_
0677c     09 1F 0A F6 | 	mov	local01, arg01 wz
06780     0A 21 02 F6 | 	mov	local02, arg02
06784     0B 23 02 F6 | 	mov	local03, arg03
06788                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06788                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06788                 | '  
06788                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06788                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06788     0C 00 90 5D |  if_ne	jmp	#LR__0570
0678c     00 12 06 F6 | 	mov	arg01, #0
06790     24 F3 BF FD | 	call	#_compile_immediate
06794     A0 00 90 FD | 	jmp	#LR__0577
06798                 | LR__0570
06798     67 00 00 FF 
0679c     60 E4 05 F1 | 	add	objptr, ##52832
067a0     F2 1E 62 FC | 	wrlong	local01, objptr
067a4     04 E4 05 F1 | 	add	objptr, #4
067a8     F2 20 62 FC | 	wrlong	local02, objptr
067ac     67 00 00 FF 
067b0     64 E4 85 F1 | 	sub	objptr, ##52836
067b4     11 13 02 F6 | 	mov	arg01, local03
067b8     01 12 06 F1 | 	add	arg01, #1
067bc     F8 F2 BF FD | 	call	#_compile_immediate
067c0     FD 24 0A F6 | 	mov	local04, result1 wz
067c4                 | ' 
067c4                 | ' ucompiledline(0)=alinemajor
067c4                 | ' ucompiledline(1)=alineminor
067c4                 | ' 
067c4                 | ' 
067c4                 | ' ' cont: 0: this is the first part of the line that will continue
067c4                 | ' ' 1 - this is the continuation of the line
067c4                 | ' ' 2 - this is the last continued line
067c4                 | ' ' 3 - this is the ome and only part
067c4                 | ' 
067c4                 | ' err=compile_immediate(cont+1) 
067c4                 | ' if err=0 then
067c4     6C 00 90 5D |  if_ne	jmp	#LR__0576
067c8                 | '   if cont=3 orelse cont=2 then 
067c8     03 22 0E F2 | 	cmp	local03, #3 wz
067cc     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
067d0     60 00 90 5D |  if_ne	jmp	#LR__0575
067d4                 | '     if alinemajor >lastline then 
067d4     6A 00 00 FF 
067d8     6C E4 05 F1 | 	add	objptr, ##54380
067dc     F2 16 02 FB | 	rdlong	arg03, objptr
067e0     6A 00 00 FF 
067e4     6C E4 85 F1 | 	sub	objptr, ##54380
067e8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
067ec     0C 00 90 ED |  if_be	jmp	#LR__0571
067f0     0F 13 02 F6 | 	mov	arg01, local01
067f4     00 F2 BF FD | 	call	#_add_line_at_end
067f8     38 00 90 FD | 	jmp	#LR__0574
067fc                 | LR__0571
067fc     0F 13 02 F6 | 	mov	arg01, local01
06800     30 EB BF FD | 	call	#_deleteline
06804                 | '       deleteline(alinemajor)  
06804                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
06804     6A 00 00 FF 
06808     6C E4 05 F1 | 	add	objptr, ##54380
0680c     F2 16 02 FB | 	rdlong	arg03, objptr
06810     6A 00 00 FF 
06814     6C E4 85 F1 | 	sub	objptr, ##54380
06818     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0681c     0C 00 90 ED |  if_be	jmp	#LR__0572
06820     0F 13 02 F6 | 	mov	arg01, local01
06824     D0 F1 BF FD | 	call	#_add_line_at_end
06828     08 00 90 FD | 	jmp	#LR__0573
0682c                 | LR__0572
0682c     0F 13 02 F6 | 	mov	arg01, local01
06830     A8 EF BF FD | 	call	#_insertline
06834                 | LR__0573
06834                 | LR__0574
06834                 | LR__0575
06834                 | LR__0576
06834                 | ' return err
06834     12 FB 01 F6 | 	mov	result1, local04
06838                 | LR__0577
06838     A7 F0 03 F6 | 	mov	ptra, fp
0683c     B2 00 A0 FD | 	call	#popregs_
06840                 | _compile_ret
06840     2D 00 64 FD | 	ret
06844                 | 
06844                 | ' 
06844                 | ' ' ------------------ compile the line that is assigning to a variable
06844                 | ' 
06844                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06844                 | _compile_assign
06844     03 4A 05 F6 | 	mov	COUNT_, #3
06848     A8 00 A0 FD | 	call	#pushregs_
0684c     09 1F 0A F6 | 	mov	local01, arg01 wz
06850     0A 21 02 F6 | 	mov	local02, arg02
06854     0B 23 02 F6 | 	mov	local03, arg03
06858                 | ' 
06858                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06858                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06858     0C 00 90 5D |  if_ne	jmp	#LR__0580
0685c     00 12 06 F6 | 	mov	arg01, #0
06860     28 FC BF FD | 	call	#_compile_immediate_assign
06864     94 00 90 FD | 	jmp	#LR__0586
06868                 | LR__0580
06868     67 00 00 FF 
0686c     60 E4 05 F1 | 	add	objptr, ##52832
06870     F2 1E 62 FC | 	wrlong	local01, objptr
06874     04 E4 05 F1 | 	add	objptr, #4
06878     F2 20 62 FC | 	wrlong	local02, objptr
0687c     67 00 00 FF 
06880     64 E4 85 F1 | 	sub	objptr, ##52836
06884     11 13 02 F6 | 	mov	arg01, local03
06888     01 12 06 F1 | 	add	arg01, #1
0688c     FC FB BF FD | 	call	#_compile_immediate_assign
06890                 | ' 
06890                 | ' ucompiledline(0)=alinemajor
06890                 | ' ucompiledline(1)=alineminor
06890                 | ' 
06890                 | ' compile_immediate_assign(cont+1) 
06890                 | ' 
06890                 | ' if cont=3 orelse cont=2 then 
06890     03 22 0E F2 | 	cmp	local03, #3 wz
06894     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06898     60 00 90 5D |  if_ne	jmp	#LR__0585
0689c                 | '   if alinemajor >lastline then 
0689c     6A 00 00 FF 
068a0     6C E4 05 F1 | 	add	objptr, ##54380
068a4     F2 16 02 FB | 	rdlong	arg03, objptr
068a8     6A 00 00 FF 
068ac     6C E4 85 F1 | 	sub	objptr, ##54380
068b0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
068b4     0C 00 90 ED |  if_be	jmp	#LR__0581
068b8     0F 13 02 F6 | 	mov	arg01, local01
068bc     38 F1 BF FD | 	call	#_add_line_at_end
068c0     38 00 90 FD | 	jmp	#LR__0584
068c4                 | LR__0581
068c4     0F 13 02 F6 | 	mov	arg01, local01
068c8     68 EA BF FD | 	call	#_deleteline
068cc                 | '     deleteline(alinemajor)  
068cc                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
068cc     6A 00 00 FF 
068d0     6C E4 05 F1 | 	add	objptr, ##54380
068d4     F2 16 02 FB | 	rdlong	arg03, objptr
068d8     6A 00 00 FF 
068dc     6C E4 85 F1 | 	sub	objptr, ##54380
068e0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
068e4     0C 00 90 ED |  if_be	jmp	#LR__0582
068e8     0F 13 02 F6 | 	mov	arg01, local01
068ec     08 F1 BF FD | 	call	#_add_line_at_end
068f0     08 00 90 FD | 	jmp	#LR__0583
068f4                 | LR__0582
068f4     0F 13 02 F6 | 	mov	arg01, local01
068f8     E0 EE BF FD | 	call	#_insertline
068fc                 | LR__0583
068fc                 | LR__0584
068fc                 | LR__0585
068fc                 | LR__0586
068fc     A7 F0 03 F6 | 	mov	ptra, fp
06900     B2 00 A0 FD | 	call	#popregs_
06904                 | _compile_assign_ret
06904     2D 00 64 FD | 	ret
06908                 | 
06908                 | ' 
06908                 | ' sub compile_error(errno)
06908                 | _compile_error
06908     FF 04 06 F6 | 	mov	_var03, #255
0690c     01 07 02 F6 | 	mov	_var04, _var02
06910     02 09 02 F6 | 	mov	_var05, _var03
06914     6A 00 00 FF 
06918     60 E4 05 F1 | 	add	objptr, ##54368
0691c     F2 0A 02 FB | 	rdlong	_var06, objptr
06920     05 0D 02 F6 | 	mov	_var07, _var06
06924     01 0C 66 F0 | 	shl	_var07, #1
06928     05 0D 02 F1 | 	add	_var07, _var06
0692c     02 0C 66 F0 | 	shl	_var07, #2
06930     03 00 00 FF 
06934     00 E4 85 F1 | 	sub	objptr, ##1536
06938     F2 0C 02 F1 | 	add	_var07, objptr
0693c     06 13 62 FC | 	wrlong	arg01, _var07
06940     03 00 00 FF 
06944     00 E4 05 F1 | 	add	objptr, ##1536
06948     F2 0C 02 FB | 	rdlong	_var07, objptr
0694c     06 0B 02 F6 | 	mov	_var06, _var07
06950     01 0A 66 F0 | 	shl	_var06, #1
06954     06 0B 02 F1 | 	add	_var06, _var07
06958     02 0A 66 F0 | 	shl	_var06, #2
0695c     03 00 00 FF 
06960     00 E4 85 F1 | 	sub	objptr, ##1536
06964     F2 0A 02 F1 | 	add	_var06, objptr
06968     04 0A 06 F1 | 	add	_var06, #4
0696c     05 07 62 FC | 	wrlong	_var04, _var06
06970     03 00 00 FF 
06974     00 E4 05 F1 | 	add	objptr, ##1536
06978     F2 0C 02 FB | 	rdlong	_var07, objptr
0697c     06 0B 02 F6 | 	mov	_var06, _var07
06980     01 0A 66 F0 | 	shl	_var06, #1
06984     06 0B 02 F1 | 	add	_var06, _var07
06988     02 0A 66 F0 | 	shl	_var06, #2
0698c     03 00 00 FF 
06990     00 E4 85 F1 | 	sub	objptr, ##1536
06994     F2 0A 02 F1 | 	add	_var06, objptr
06998     08 0A 06 F1 | 	add	_var06, #8
0699c     05 09 62 FC | 	wrlong	_var05, _var06
069a0     03 00 00 FF 
069a4     00 E4 05 F1 | 	add	objptr, ##1536
069a8     F2 12 02 FB | 	rdlong	arg01, objptr
069ac     01 12 06 F1 | 	add	arg01, #1
069b0     F2 12 62 FC | 	wrlong	arg01, objptr
069b4     6A 00 00 FF 
069b8     60 E4 85 F1 | 	sub	objptr, ##54368
069bc                 | _compile_error_ret
069bc     2D 00 64 FD | 	ret
069c0                 | 
069c0                 | ' 
069c0                 | ' sub compile_unknown() 
069c0                 | _compile_unknown
069c0     FF 04 06 F6 | 	mov	_var03, #255
069c4     17 00 06 F6 | 	mov	_var01, #23
069c8     01 07 02 F6 | 	mov	_var04, _var02
069cc     02 01 02 F6 | 	mov	_var01, _var03
069d0     6A 00 00 FF 
069d4     60 E4 05 F1 | 	add	objptr, ##54368
069d8     F2 08 02 FB | 	rdlong	_var05, objptr
069dc     04 0B 02 F6 | 	mov	_var06, _var05
069e0     01 0A 66 F0 | 	shl	_var06, #1
069e4     04 0B 02 F1 | 	add	_var06, _var05
069e8     02 0A 66 F0 | 	shl	_var06, #2
069ec     03 00 00 FF 
069f0     00 E4 85 F1 | 	sub	objptr, ##1536
069f4     F2 0A 02 F1 | 	add	_var06, objptr
069f8     05 2F 68 FC | 	wrlong	#23, _var06
069fc     03 00 00 FF 
06a00     00 E4 05 F1 | 	add	objptr, ##1536
06a04     F2 0A 02 FB | 	rdlong	_var06, objptr
06a08     05 09 02 F6 | 	mov	_var05, _var06
06a0c     01 08 66 F0 | 	shl	_var05, #1
06a10     05 09 02 F1 | 	add	_var05, _var06
06a14     02 08 66 F0 | 	shl	_var05, #2
06a18     03 00 00 FF 
06a1c     00 E4 85 F1 | 	sub	objptr, ##1536
06a20     F2 08 02 F1 | 	add	_var05, objptr
06a24     04 08 06 F1 | 	add	_var05, #4
06a28     04 07 62 FC | 	wrlong	_var04, _var05
06a2c     03 00 00 FF 
06a30     00 E4 05 F1 | 	add	objptr, ##1536
06a34     F2 0A 02 FB | 	rdlong	_var06, objptr
06a38     05 09 02 F6 | 	mov	_var05, _var06
06a3c     01 08 66 F0 | 	shl	_var05, #1
06a40     05 09 02 F1 | 	add	_var05, _var06
06a44     02 08 66 F0 | 	shl	_var05, #2
06a48     03 00 00 FF 
06a4c     00 E4 85 F1 | 	sub	objptr, ##1536
06a50     F2 08 02 F1 | 	add	_var05, objptr
06a54     08 08 06 F1 | 	add	_var05, #8
06a58     04 01 62 FC | 	wrlong	_var01, _var05
06a5c     03 00 00 FF 
06a60     00 E4 05 F1 | 	add	objptr, ##1536
06a64     F2 0A 02 FB | 	rdlong	_var06, objptr
06a68     01 0A 06 F1 | 	add	_var06, #1
06a6c     F2 0A 62 FC | 	wrlong	_var06, objptr
06a70     6A 00 00 FF 
06a74     60 E4 85 F1 | 	sub	objptr, ##54368
06a78                 | _compile_unknown_ret
06a78     2D 00 64 FD | 	ret
06a7c                 | 
06a7c                 | ' 
06a7c                 | ' function compile_fun_2p() as ulong
06a7c                 | _compile_fun_2p
06a7c     01 4A 05 F6 | 	mov	COUNT_, #1
06a80     A8 00 A0 FD | 	call	#pushregs_
06a84     D0 22 B0 FD | 	call	#_expr
06a88                 | ' 
06a88                 | ' expr()
06a88                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06a88     57 00 00 FF 
06a8c     28 E4 05 F1 | 	add	objptr, ##44584
06a90     F2 1E 02 FB | 	rdlong	local01, objptr
06a94     03 1E 66 F0 | 	shl	local01, #3
06a98     02 00 00 FF 
06a9c     38 E4 85 F1 | 	sub	objptr, ##1080
06aa0     F2 1E 02 F1 | 	add	local01, objptr
06aa4     04 1E 06 F1 | 	add	local01, #4
06aa8     0F 1F 02 FB | 	rdlong	local01, local01
06aac     11 1E 0E F2 | 	cmp	local01, #17 wz
06ab0     54 00 00 FF 
06ab4     F0 E5 85 F1 | 	sub	objptr, ##43504
06ab8     15 FA 05 56 |  if_ne	mov	result1, #21
06abc     24 00 90 5D |  if_ne	jmp	#LR__0590
06ac0     57 00 00 FF 
06ac4     28 E4 05 F1 | 	add	objptr, ##44584
06ac8     F2 1E 02 FB | 	rdlong	local01, objptr
06acc     01 1E 06 F1 | 	add	local01, #1
06ad0     F2 1E 62 FC | 	wrlong	local01, objptr
06ad4     57 00 00 FF 
06ad8     28 E4 85 F1 | 	sub	objptr, ##44584
06adc     78 22 B0 FD | 	call	#_expr
06ae0     00 FA 05 F6 | 	mov	result1, #0
06ae4                 | LR__0590
06ae4     A7 F0 03 F6 | 	mov	ptra, fp
06ae8     B2 00 A0 FD | 	call	#popregs_
06aec                 | _compile_fun_2p_ret
06aec     2D 00 64 FD | 	ret
06af0                 | 
06af0                 | ' 
06af0                 | ' function compile_fun_3p() as ulong
06af0                 | _compile_fun_3p
06af0     01 4A 05 F6 | 	mov	COUNT_, #1
06af4     A8 00 A0 FD | 	call	#pushregs_
06af8     5C 22 B0 FD | 	call	#_expr
06afc                 | ' 
06afc                 | ' expr()
06afc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06afc     57 00 00 FF 
06b00     28 E4 05 F1 | 	add	objptr, ##44584
06b04     F2 1E 02 FB | 	rdlong	local01, objptr
06b08     03 1E 66 F0 | 	shl	local01, #3
06b0c     02 00 00 FF 
06b10     38 E4 85 F1 | 	sub	objptr, ##1080
06b14     F2 1E 02 F1 | 	add	local01, objptr
06b18     04 1E 06 F1 | 	add	local01, #4
06b1c     0F 1F 02 FB | 	rdlong	local01, local01
06b20     11 1E 0E F2 | 	cmp	local01, #17 wz
06b24     54 00 00 FF 
06b28     F0 E5 85 F1 | 	sub	objptr, ##43504
06b2c     15 FA 05 56 |  if_ne	mov	result1, #21
06b30     7C 00 90 5D |  if_ne	jmp	#LR__0600
06b34     57 00 00 FF 
06b38     28 E4 05 F1 | 	add	objptr, ##44584
06b3c     F2 1E 02 FB | 	rdlong	local01, objptr
06b40     01 1E 06 F1 | 	add	local01, #1
06b44     F2 1E 62 FC | 	wrlong	local01, objptr
06b48     57 00 00 FF 
06b4c     28 E4 85 F1 | 	sub	objptr, ##44584
06b50     04 22 B0 FD | 	call	#_expr
06b54                 | ' expr()
06b54                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b54     57 00 00 FF 
06b58     28 E4 05 F1 | 	add	objptr, ##44584
06b5c     F2 1E 02 FB | 	rdlong	local01, objptr
06b60     03 1E 66 F0 | 	shl	local01, #3
06b64     02 00 00 FF 
06b68     38 E4 85 F1 | 	sub	objptr, ##1080
06b6c     F2 1E 02 F1 | 	add	local01, objptr
06b70     04 1E 06 F1 | 	add	local01, #4
06b74     0F 1F 02 FB | 	rdlong	local01, local01
06b78     11 1E 0E F2 | 	cmp	local01, #17 wz
06b7c     54 00 00 FF 
06b80     F0 E5 85 F1 | 	sub	objptr, ##43504
06b84     15 FA 05 56 |  if_ne	mov	result1, #21
06b88     24 00 90 5D |  if_ne	jmp	#LR__0600
06b8c     57 00 00 FF 
06b90     28 E4 05 F1 | 	add	objptr, ##44584
06b94     F2 1E 02 FB | 	rdlong	local01, objptr
06b98     01 1E 06 F1 | 	add	local01, #1
06b9c     F2 1E 62 FC | 	wrlong	local01, objptr
06ba0     57 00 00 FF 
06ba4     28 E4 85 F1 | 	sub	objptr, ##44584
06ba8     AC 21 B0 FD | 	call	#_expr
06bac     00 FA 05 F6 | 	mov	result1, #0
06bb0                 | LR__0600
06bb0     A7 F0 03 F6 | 	mov	ptra, fp
06bb4     B2 00 A0 FD | 	call	#popregs_
06bb8                 | _compile_fun_3p_ret
06bb8     2D 00 64 FD | 	ret
06bbc                 | 
06bbc                 | ' 
06bbc                 | ' function compile_fun_4p() as ulong
06bbc                 | _compile_fun_4p
06bbc     01 4A 05 F6 | 	mov	COUNT_, #1
06bc0     A8 00 A0 FD | 	call	#pushregs_
06bc4     90 21 B0 FD | 	call	#_expr
06bc8                 | ' 
06bc8                 | ' expr()
06bc8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06bc8     57 00 00 FF 
06bcc     28 E4 05 F1 | 	add	objptr, ##44584
06bd0     F2 1E 02 FB | 	rdlong	local01, objptr
06bd4     03 1E 66 F0 | 	shl	local01, #3
06bd8     02 00 00 FF 
06bdc     38 E4 85 F1 | 	sub	objptr, ##1080
06be0     F2 1E 02 F1 | 	add	local01, objptr
06be4     04 1E 06 F1 | 	add	local01, #4
06be8     0F 1F 02 FB | 	rdlong	local01, local01
06bec     11 1E 0E F2 | 	cmp	local01, #17 wz
06bf0     54 00 00 FF 
06bf4     F0 E5 85 F1 | 	sub	objptr, ##43504
06bf8     15 FA 05 56 |  if_ne	mov	result1, #21
06bfc     D4 00 90 5D |  if_ne	jmp	#LR__0610
06c00     57 00 00 FF 
06c04     28 E4 05 F1 | 	add	objptr, ##44584
06c08     F2 1E 02 FB | 	rdlong	local01, objptr
06c0c     01 1E 06 F1 | 	add	local01, #1
06c10     F2 1E 62 FC | 	wrlong	local01, objptr
06c14     57 00 00 FF 
06c18     28 E4 85 F1 | 	sub	objptr, ##44584
06c1c     38 21 B0 FD | 	call	#_expr
06c20                 | ' expr()
06c20                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c20     57 00 00 FF 
06c24     28 E4 05 F1 | 	add	objptr, ##44584
06c28     F2 1E 02 FB | 	rdlong	local01, objptr
06c2c     03 1E 66 F0 | 	shl	local01, #3
06c30     02 00 00 FF 
06c34     38 E4 85 F1 | 	sub	objptr, ##1080
06c38     F2 1E 02 F1 | 	add	local01, objptr
06c3c     04 1E 06 F1 | 	add	local01, #4
06c40     0F 1F 02 FB | 	rdlong	local01, local01
06c44     11 1E 0E F2 | 	cmp	local01, #17 wz
06c48     54 00 00 FF 
06c4c     F0 E5 85 F1 | 	sub	objptr, ##43504
06c50     15 FA 05 56 |  if_ne	mov	result1, #21
06c54     7C 00 90 5D |  if_ne	jmp	#LR__0610
06c58     57 00 00 FF 
06c5c     28 E4 05 F1 | 	add	objptr, ##44584
06c60     F2 1E 02 FB | 	rdlong	local01, objptr
06c64     01 1E 06 F1 | 	add	local01, #1
06c68     F2 1E 62 FC | 	wrlong	local01, objptr
06c6c     57 00 00 FF 
06c70     28 E4 85 F1 | 	sub	objptr, ##44584
06c74     E0 20 B0 FD | 	call	#_expr
06c78                 | ' expr()
06c78                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c78     57 00 00 FF 
06c7c     28 E4 05 F1 | 	add	objptr, ##44584
06c80     F2 1E 02 FB | 	rdlong	local01, objptr
06c84     03 1E 66 F0 | 	shl	local01, #3
06c88     02 00 00 FF 
06c8c     38 E4 85 F1 | 	sub	objptr, ##1080
06c90     F2 1E 02 F1 | 	add	local01, objptr
06c94     04 1E 06 F1 | 	add	local01, #4
06c98     0F 1F 02 FB | 	rdlong	local01, local01
06c9c     11 1E 0E F2 | 	cmp	local01, #17 wz
06ca0     54 00 00 FF 
06ca4     F0 E5 85 F1 | 	sub	objptr, ##43504
06ca8     15 FA 05 56 |  if_ne	mov	result1, #21
06cac     24 00 90 5D |  if_ne	jmp	#LR__0610
06cb0     57 00 00 FF 
06cb4     28 E4 05 F1 | 	add	objptr, ##44584
06cb8     F2 1E 02 FB | 	rdlong	local01, objptr
06cbc     01 1E 06 F1 | 	add	local01, #1
06cc0     F2 1E 62 FC | 	wrlong	local01, objptr
06cc4     57 00 00 FF 
06cc8     28 E4 85 F1 | 	sub	objptr, ##44584
06ccc     88 20 B0 FD | 	call	#_expr
06cd0     00 FA 05 F6 | 	mov	result1, #0
06cd4                 | LR__0610
06cd4     A7 F0 03 F6 | 	mov	ptra, fp
06cd8     B2 00 A0 FD | 	call	#popregs_
06cdc                 | _compile_fun_4p_ret
06cdc     2D 00 64 FD | 	ret
06ce0                 | 
06ce0                 | ' 
06ce0                 | ' 
06ce0                 | ' function compile_fun_5p() as ulong
06ce0                 | _compile_fun_5p
06ce0     01 4A 05 F6 | 	mov	COUNT_, #1
06ce4     A8 00 A0 FD | 	call	#pushregs_
06ce8     6C 20 B0 FD | 	call	#_expr
06cec                 | ' 
06cec                 | ' expr()
06cec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cec     57 00 00 FF 
06cf0     28 E4 05 F1 | 	add	objptr, ##44584
06cf4     F2 1E 02 FB | 	rdlong	local01, objptr
06cf8     03 1E 66 F0 | 	shl	local01, #3
06cfc     02 00 00 FF 
06d00     38 E4 85 F1 | 	sub	objptr, ##1080
06d04     F2 1E 02 F1 | 	add	local01, objptr
06d08     04 1E 06 F1 | 	add	local01, #4
06d0c     0F 1F 02 FB | 	rdlong	local01, local01
06d10     11 1E 0E F2 | 	cmp	local01, #17 wz
06d14     54 00 00 FF 
06d18     F0 E5 85 F1 | 	sub	objptr, ##43504
06d1c     15 FA 05 56 |  if_ne	mov	result1, #21
06d20     2C 01 90 5D |  if_ne	jmp	#LR__0620
06d24     57 00 00 FF 
06d28     28 E4 05 F1 | 	add	objptr, ##44584
06d2c     F2 1E 02 FB | 	rdlong	local01, objptr
06d30     01 1E 06 F1 | 	add	local01, #1
06d34     F2 1E 62 FC | 	wrlong	local01, objptr
06d38     57 00 00 FF 
06d3c     28 E4 85 F1 | 	sub	objptr, ##44584
06d40     14 20 B0 FD | 	call	#_expr
06d44                 | ' expr()
06d44                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d44     57 00 00 FF 
06d48     28 E4 05 F1 | 	add	objptr, ##44584
06d4c     F2 1E 02 FB | 	rdlong	local01, objptr
06d50     03 1E 66 F0 | 	shl	local01, #3
06d54     02 00 00 FF 
06d58     38 E4 85 F1 | 	sub	objptr, ##1080
06d5c     F2 1E 02 F1 | 	add	local01, objptr
06d60     04 1E 06 F1 | 	add	local01, #4
06d64     0F 1F 02 FB | 	rdlong	local01, local01
06d68     11 1E 0E F2 | 	cmp	local01, #17 wz
06d6c     54 00 00 FF 
06d70     F0 E5 85 F1 | 	sub	objptr, ##43504
06d74     15 FA 05 56 |  if_ne	mov	result1, #21
06d78     D4 00 90 5D |  if_ne	jmp	#LR__0620
06d7c     57 00 00 FF 
06d80     28 E4 05 F1 | 	add	objptr, ##44584
06d84     F2 1E 02 FB | 	rdlong	local01, objptr
06d88     01 1E 06 F1 | 	add	local01, #1
06d8c     F2 1E 62 FC | 	wrlong	local01, objptr
06d90     57 00 00 FF 
06d94     28 E4 85 F1 | 	sub	objptr, ##44584
06d98     BC 1F B0 FD | 	call	#_expr
06d9c                 | ' expr()
06d9c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d9c     57 00 00 FF 
06da0     28 E4 05 F1 | 	add	objptr, ##44584
06da4     F2 1E 02 FB | 	rdlong	local01, objptr
06da8     03 1E 66 F0 | 	shl	local01, #3
06dac     02 00 00 FF 
06db0     38 E4 85 F1 | 	sub	objptr, ##1080
06db4     F2 1E 02 F1 | 	add	local01, objptr
06db8     04 1E 06 F1 | 	add	local01, #4
06dbc     0F 1F 02 FB | 	rdlong	local01, local01
06dc0     11 1E 0E F2 | 	cmp	local01, #17 wz
06dc4     54 00 00 FF 
06dc8     F0 E5 85 F1 | 	sub	objptr, ##43504
06dcc     15 FA 05 56 |  if_ne	mov	result1, #21
06dd0     7C 00 90 5D |  if_ne	jmp	#LR__0620
06dd4     57 00 00 FF 
06dd8     28 E4 05 F1 | 	add	objptr, ##44584
06ddc     F2 1E 02 FB | 	rdlong	local01, objptr
06de0     01 1E 06 F1 | 	add	local01, #1
06de4     F2 1E 62 FC | 	wrlong	local01, objptr
06de8     57 00 00 FF 
06dec     28 E4 85 F1 | 	sub	objptr, ##44584
06df0     64 1F B0 FD | 	call	#_expr
06df4                 | ' expr()
06df4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06df4     57 00 00 FF 
06df8     28 E4 05 F1 | 	add	objptr, ##44584
06dfc     F2 1E 02 FB | 	rdlong	local01, objptr
06e00     03 1E 66 F0 | 	shl	local01, #3
06e04     02 00 00 FF 
06e08     38 E4 85 F1 | 	sub	objptr, ##1080
06e0c     F2 1E 02 F1 | 	add	local01, objptr
06e10     04 1E 06 F1 | 	add	local01, #4
06e14     0F 1F 02 FB | 	rdlong	local01, local01
06e18     11 1E 0E F2 | 	cmp	local01, #17 wz
06e1c     54 00 00 FF 
06e20     F0 E5 85 F1 | 	sub	objptr, ##43504
06e24     15 FA 05 56 |  if_ne	mov	result1, #21
06e28     24 00 90 5D |  if_ne	jmp	#LR__0620
06e2c     57 00 00 FF 
06e30     28 E4 05 F1 | 	add	objptr, ##44584
06e34     F2 1E 02 FB | 	rdlong	local01, objptr
06e38     01 1E 06 F1 | 	add	local01, #1
06e3c     F2 1E 62 FC | 	wrlong	local01, objptr
06e40     57 00 00 FF 
06e44     28 E4 85 F1 | 	sub	objptr, ##44584
06e48     0C 1F B0 FD | 	call	#_expr
06e4c     00 FA 05 F6 | 	mov	result1, #0
06e50                 | LR__0620
06e50     A7 F0 03 F6 | 	mov	ptra, fp
06e54     B2 00 A0 FD | 	call	#popregs_
06e58                 | _compile_fun_5p_ret
06e58     2D 00 64 FD | 	ret
06e5c                 | 
06e5c                 | ' 
06e5c                 | ' function compile_fun_varp() as ulong 
06e5c                 | _compile_fun_varp
06e5c     02 4A 05 F6 | 	mov	COUNT_, #2
06e60     A8 00 A0 FD | 	call	#pushregs_
06e64     00 1E 06 F6 | 	mov	local01, #0
06e68                 | ' i=0
06e68                 | ' if lparts(ct).token<>token_end then
06e68     57 00 00 FF 
06e6c     28 E4 05 F1 | 	add	objptr, ##44584
06e70     F2 20 02 FB | 	rdlong	local02, objptr
06e74     03 20 66 F0 | 	shl	local02, #3
06e78     02 00 00 FF 
06e7c     38 E4 85 F1 | 	sub	objptr, ##1080
06e80     F2 20 02 F1 | 	add	local02, objptr
06e84     04 20 06 F1 | 	add	local02, #4
06e88     10 21 02 FB | 	rdlong	local02, local02
06e8c     FE 21 0E F2 | 	cmp	local02, #510 wz
06e90     54 00 00 FF 
06e94     F0 E5 85 F1 | 	sub	objptr, ##43504
06e98     5C 00 90 AD |  if_e	jmp	#LR__0632
06e9c                 | '   do
06e9c                 | LR__0630
06e9c     B8 1E B0 FD | 	call	#_expr
06ea0     01 1E 06 F1 | 	add	local01, #1
06ea4                 | '   expr()
06ea4                 | '    i+=1
06ea4                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06ea4     57 00 00 FF 
06ea8     28 E4 05 F1 | 	add	objptr, ##44584
06eac     F2 20 02 FB | 	rdlong	local02, objptr
06eb0     03 20 66 F0 | 	shl	local02, #3
06eb4     02 00 00 FF 
06eb8     38 E4 85 F1 | 	sub	objptr, ##1080
06ebc     F2 20 02 F1 | 	add	local02, objptr
06ec0     04 20 06 F1 | 	add	local02, #4
06ec4     10 21 02 FB | 	rdlong	local02, local02
06ec8     11 20 0E F2 | 	cmp	local02, #17 wz
06ecc     54 00 00 FF 
06ed0     F0 E5 85 F1 | 	sub	objptr, ##43504
06ed4     20 00 90 5D |  if_ne	jmp	#LR__0631
06ed8     57 00 00 FF 
06edc     28 E4 05 F1 | 	add	objptr, ##44584
06ee0     F2 20 02 FB | 	rdlong	local02, objptr
06ee4     01 20 06 F1 | 	add	local02, #1
06ee8     F2 20 62 FC | 	wrlong	local02, objptr
06eec     57 00 00 FF 
06ef0     28 E4 85 F1 | 	sub	objptr, ##44584
06ef4     A4 FF 9F FD | 	jmp	#LR__0630
06ef8                 | LR__0631
06ef8                 | LR__0632
06ef8                 | ' return i
06ef8     0F FB 01 F6 | 	mov	result1, local01
06efc     A7 F0 03 F6 | 	mov	ptra, fp
06f00     B2 00 A0 FD | 	call	#popregs_
06f04                 | _compile_fun_varp_ret
06f04     2D 00 64 FD | 	ret
06f08                 | 
06f08                 | ' 
06f08                 | ' 
06f08                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06f08                 | _compile_print
06f08     0B 4A 05 F6 | 	mov	COUNT_, #11
06f0c     A8 00 A0 FD | 	call	#pushregs_
06f10     00 1E 06 F6 | 	mov	local01, #0
06f14     1D 22 06 F6 | 	mov	local03, #29
06f18                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06f18                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06f18     57 00 00 FF 
06f1c     28 E4 05 F1 | 	add	objptr, ##44584
06f20     F2 24 02 FB | 	rdlong	local04, objptr
06f24     03 24 66 F0 | 	shl	local04, #3
06f28     02 00 00 FF 
06f2c     38 E4 85 F1 | 	sub	objptr, ##1080
06f30     F2 24 02 F1 | 	add	local04, objptr
06f34     04 24 06 F1 | 	add	local04, #4
06f38     12 25 02 FB | 	rdlong	local04, local04
06f3c     FE 25 0E F2 | 	cmp	local04, #510 wz
06f40     54 00 00 FF 
06f44     F0 E5 85 F1 | 	sub	objptr, ##43504
06f48     68 01 90 5D |  if_ne	jmp	#LR__0640
06f4c     20 22 06 F6 | 	mov	local03, #32
06f50     0F 27 02 F6 | 	mov	local05, local01
06f54     10 29 02 F6 | 	mov	local06, local02
06f58     11 2B 02 F6 | 	mov	local07, local03
06f5c     6A 00 00 FF 
06f60     60 E4 05 F1 | 	add	objptr, ##54368
06f64     F2 2C 02 FB | 	rdlong	local08, objptr
06f68     16 2F 02 F6 | 	mov	local09, local08
06f6c     01 2E 66 F0 | 	shl	local09, #1
06f70     16 2F 02 F1 | 	add	local09, local08
06f74     02 2E 66 F0 | 	shl	local09, #2
06f78     03 00 00 FF 
06f7c     00 E4 85 F1 | 	sub	objptr, ##1536
06f80     F2 2E 02 F1 | 	add	local09, objptr
06f84     17 27 62 FC | 	wrlong	local05, local09
06f88     03 00 00 FF 
06f8c     00 E4 05 F1 | 	add	objptr, ##1536
06f90     F2 26 02 FB | 	rdlong	local05, objptr
06f94     13 31 02 F6 | 	mov	local10, local05
06f98     01 30 66 F0 | 	shl	local10, #1
06f9c     13 31 02 F1 | 	add	local10, local05
06fa0     02 30 66 F0 | 	shl	local10, #2
06fa4     03 00 00 FF 
06fa8     00 E4 85 F1 | 	sub	objptr, ##1536
06fac     F2 30 02 F1 | 	add	local10, objptr
06fb0     04 30 06 F1 | 	add	local10, #4
06fb4     18 29 62 FC | 	wrlong	local06, local10
06fb8     03 00 00 FF 
06fbc     00 E4 05 F1 | 	add	objptr, ##1536
06fc0     F2 26 02 FB | 	rdlong	local05, objptr
06fc4     13 33 02 F6 | 	mov	local11, local05
06fc8     01 32 66 F0 | 	shl	local11, #1
06fcc     13 33 02 F1 | 	add	local11, local05
06fd0     02 32 66 F0 | 	shl	local11, #2
06fd4     03 00 00 FF 
06fd8     00 E4 85 F1 | 	sub	objptr, ##1536
06fdc     F2 32 02 F1 | 	add	local11, objptr
06fe0     08 32 06 F1 | 	add	local11, #8
06fe4     19 2B 62 FC | 	wrlong	local07, local11
06fe8     03 00 00 FF 
06fec     00 E4 05 F1 | 	add	objptr, ##1536
06ff0     F2 26 02 FB | 	rdlong	local05, objptr
06ff4     01 26 06 F1 | 	add	local05, #1
06ff8     F2 26 62 FC | 	wrlong	local05, objptr
06ffc     44 22 06 F6 | 	mov	local03, #68
07000     0F 27 02 F6 | 	mov	local05, local01
07004     10 29 02 F6 | 	mov	local06, local02
07008     11 2B 02 F6 | 	mov	local07, local03
0700c     F2 2C 02 FB | 	rdlong	local08, objptr
07010     16 2F 02 F6 | 	mov	local09, local08
07014     01 2E 66 F0 | 	shl	local09, #1
07018     16 2F 02 F1 | 	add	local09, local08
0701c     02 2E 66 F0 | 	shl	local09, #2
07020     03 00 00 FF 
07024     00 E4 85 F1 | 	sub	objptr, ##1536
07028     F2 2E 02 F1 | 	add	local09, objptr
0702c     17 27 62 FC | 	wrlong	local05, local09
07030     03 00 00 FF 
07034     00 E4 05 F1 | 	add	objptr, ##1536
07038     F2 32 02 FB | 	rdlong	local11, objptr
0703c     19 31 02 F6 | 	mov	local10, local11
07040     01 30 66 F0 | 	shl	local10, #1
07044     19 31 02 F1 | 	add	local10, local11
07048     02 30 66 F0 | 	shl	local10, #2
0704c     03 00 00 FF 
07050     00 E4 85 F1 | 	sub	objptr, ##1536
07054     F2 30 02 F1 | 	add	local10, objptr
07058     04 30 06 F1 | 	add	local10, #4
0705c     18 29 62 FC | 	wrlong	local06, local10
07060     03 00 00 FF 
07064     00 E4 05 F1 | 	add	objptr, ##1536
07068     F2 30 02 FB | 	rdlong	local10, objptr
0706c     18 33 02 F6 | 	mov	local11, local10
07070     01 32 66 F0 | 	shl	local11, #1
07074     18 33 02 F1 | 	add	local11, local10
07078     02 32 66 F0 | 	shl	local11, #2
0707c     03 00 00 FF 
07080     00 E4 85 F1 | 	sub	objptr, ##1536
07084     F2 32 02 F1 | 	add	local11, objptr
07088     08 32 06 F1 | 	add	local11, #8
0708c     19 2B 62 FC | 	wrlong	local07, local11
07090     03 00 00 FF 
07094     00 E4 05 F1 | 	add	objptr, ##1536
07098     F2 26 02 FB | 	rdlong	local05, objptr
0709c     01 26 06 F1 | 	add	local05, #1
070a0     F2 26 62 FC | 	wrlong	local05, objptr
070a4     6A 00 00 FF 
070a8     60 E4 85 F1 | 	sub	objptr, ##54368
070ac     00 FA 05 F6 | 	mov	result1, #0
070b0     20 05 90 FD | 	jmp	#LR__0647
070b4                 | LR__0640
070b4                 | ' do
070b4                 | LR__0641
070b4     A0 1C B0 FD | 	call	#_expr
070b8                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
070b8                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
070b8     57 00 00 FF 
070bc     28 E4 05 F1 | 	add	objptr, ##44584
070c0     F2 24 02 FB | 	rdlong	local04, objptr
070c4     03 24 66 F0 | 	shl	local04, #3
070c8     02 00 00 FF 
070cc     38 E4 85 F1 | 	sub	objptr, ##1080
070d0     F2 24 02 F1 | 	add	local04, objptr
070d4     04 24 06 F1 | 	add	local04, #4
070d8     12 2D 02 FB | 	rdlong	local08, local04
070dc     11 2C 0E F2 | 	cmp	local08, #17 wz
070e0     54 00 00 FF 
070e4     F0 E5 85 F1 | 	sub	objptr, ##43504
070e8     60 01 90 5D |  if_ne	jmp	#LR__0642
070ec     21 22 06 F6 | 	mov	local03, #33
070f0     0F 27 02 F6 | 	mov	local05, local01
070f4     10 29 02 F6 | 	mov	local06, local02
070f8     11 2B 02 F6 | 	mov	local07, local03
070fc     6A 00 00 FF 
07100     60 E4 05 F1 | 	add	objptr, ##54368
07104     F2 2C 02 FB | 	rdlong	local08, objptr
07108     16 2F 02 F6 | 	mov	local09, local08
0710c     01 2E 66 F0 | 	shl	local09, #1
07110     16 2F 02 F1 | 	add	local09, local08
07114     02 2E 66 F0 | 	shl	local09, #2
07118     03 00 00 FF 
0711c     00 E4 85 F1 | 	sub	objptr, ##1536
07120     F2 2E 02 F1 | 	add	local09, objptr
07124     17 27 62 FC | 	wrlong	local05, local09
07128     03 00 00 FF 
0712c     00 E4 05 F1 | 	add	objptr, ##1536
07130     F2 32 02 FB | 	rdlong	local11, objptr
07134     19 31 02 F6 | 	mov	local10, local11
07138     01 30 66 F0 | 	shl	local10, #1
0713c     19 31 02 F1 | 	add	local10, local11
07140     02 30 66 F0 | 	shl	local10, #2
07144     03 00 00 FF 
07148     00 E4 85 F1 | 	sub	objptr, ##1536
0714c     F2 30 02 F1 | 	add	local10, objptr
07150     04 30 06 F1 | 	add	local10, #4
07154     18 29 62 FC | 	wrlong	local06, local10
07158     03 00 00 FF 
0715c     00 E4 05 F1 | 	add	objptr, ##1536
07160     F2 26 02 FB | 	rdlong	local05, objptr
07164     13 33 02 F6 | 	mov	local11, local05
07168     01 32 66 F0 | 	shl	local11, #1
0716c     13 33 02 F1 | 	add	local11, local05
07170     02 32 66 F0 | 	shl	local11, #2
07174     03 00 00 FF 
07178     00 E4 85 F1 | 	sub	objptr, ##1536
0717c     F2 32 02 F1 | 	add	local11, objptr
07180     08 32 06 F1 | 	add	local11, #8
07184     19 2B 62 FC | 	wrlong	local07, local11
07188     03 00 00 FF 
0718c     00 E4 05 F1 | 	add	objptr, ##1536
07190     F2 26 02 FB | 	rdlong	local05, objptr
07194     01 26 06 F1 | 	add	local05, #1
07198     F2 26 62 FC | 	wrlong	local05, objptr
0719c     44 22 06 F6 | 	mov	local03, #68
071a0     0F 27 02 F6 | 	mov	local05, local01
071a4     10 29 02 F6 | 	mov	local06, local02
071a8     11 2B 02 F6 | 	mov	local07, local03
071ac     F2 2C 02 FB | 	rdlong	local08, objptr
071b0     16 2F 02 F6 | 	mov	local09, local08
071b4     01 2E 66 F0 | 	shl	local09, #1
071b8     16 2F 02 F1 | 	add	local09, local08
071bc     02 2E 66 F0 | 	shl	local09, #2
071c0     03 00 00 FF 
071c4     00 E4 85 F1 | 	sub	objptr, ##1536
071c8     F2 2E 02 F1 | 	add	local09, objptr
071cc     17 27 62 FC | 	wrlong	local05, local09
071d0     03 00 00 FF 
071d4     00 E4 05 F1 | 	add	objptr, ##1536
071d8     F2 32 02 FB | 	rdlong	local11, objptr
071dc     19 31 02 F6 | 	mov	local10, local11
071e0     01 30 66 F0 | 	shl	local10, #1
071e4     19 31 02 F1 | 	add	local10, local11
071e8     02 30 66 F0 | 	shl	local10, #2
071ec     03 00 00 FF 
071f0     00 E4 85 F1 | 	sub	objptr, ##1536
071f4     F2 30 02 F1 | 	add	local10, objptr
071f8     04 30 06 F1 | 	add	local10, #4
071fc     18 29 62 FC | 	wrlong	local06, local10
07200     03 00 00 FF 
07204     00 E4 05 F1 | 	add	objptr, ##1536
07208     F2 30 02 FB | 	rdlong	local10, objptr
0720c     18 33 02 F6 | 	mov	local11, local10
07210     01 32 66 F0 | 	shl	local11, #1
07214     18 33 02 F1 | 	add	local11, local10
07218     02 32 66 F0 | 	shl	local11, #2
0721c     03 00 00 FF 
07220     00 E4 85 F1 | 	sub	objptr, ##1536
07224     F2 32 02 F1 | 	add	local11, objptr
07228     08 32 06 F1 | 	add	local11, #8
0722c     19 2B 62 FC | 	wrlong	local07, local11
07230     03 00 00 FF 
07234     00 E4 05 F1 | 	add	objptr, ##1536
07238     F2 26 02 FB | 	rdlong	local05, objptr
0723c     01 26 06 F1 | 	add	local05, #1
07240     F2 26 62 FC | 	wrlong	local05, objptr
07244     6A 00 00 FF 
07248     60 E4 85 F1 | 	sub	objptr, ##54368
0724c                 | LR__0642
0724c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0724c     57 00 00 FF 
07250     28 E4 05 F1 | 	add	objptr, ##44584
07254     F2 24 02 FB | 	rdlong	local04, objptr
07258     03 24 66 F0 | 	shl	local04, #3
0725c     02 00 00 FF 
07260     38 E4 85 F1 | 	sub	objptr, ##1080
07264     F2 24 02 F1 | 	add	local04, objptr
07268     04 24 06 F1 | 	add	local04, #4
0726c     12 2D 02 FB | 	rdlong	local08, local04
07270     12 2C 0E F2 | 	cmp	local08, #18 wz
07274     54 00 00 FF 
07278     F0 E5 85 F1 | 	sub	objptr, ##43504
0727c     60 01 90 5D |  if_ne	jmp	#LR__0643
07280     22 22 06 F6 | 	mov	local03, #34
07284     0F 27 02 F6 | 	mov	local05, local01
07288     10 29 02 F6 | 	mov	local06, local02
0728c     11 2B 02 F6 | 	mov	local07, local03
07290     6A 00 00 FF 
07294     60 E4 05 F1 | 	add	objptr, ##54368
07298     F2 2C 02 FB | 	rdlong	local08, objptr
0729c     16 2F 02 F6 | 	mov	local09, local08
072a0     01 2E 66 F0 | 	shl	local09, #1
072a4     16 2F 02 F1 | 	add	local09, local08
072a8     02 2E 66 F0 | 	shl	local09, #2
072ac     03 00 00 FF 
072b0     00 E4 85 F1 | 	sub	objptr, ##1536
072b4     F2 2E 02 F1 | 	add	local09, objptr
072b8     17 27 62 FC | 	wrlong	local05, local09
072bc     03 00 00 FF 
072c0     00 E4 05 F1 | 	add	objptr, ##1536
072c4     F2 32 02 FB | 	rdlong	local11, objptr
072c8     19 31 02 F6 | 	mov	local10, local11
072cc     01 30 66 F0 | 	shl	local10, #1
072d0     19 31 02 F1 | 	add	local10, local11
072d4     02 30 66 F0 | 	shl	local10, #2
072d8     03 00 00 FF 
072dc     00 E4 85 F1 | 	sub	objptr, ##1536
072e0     F2 30 02 F1 | 	add	local10, objptr
072e4     04 30 06 F1 | 	add	local10, #4
072e8     18 29 62 FC | 	wrlong	local06, local10
072ec     03 00 00 FF 
072f0     00 E4 05 F1 | 	add	objptr, ##1536
072f4     F2 26 02 FB | 	rdlong	local05, objptr
072f8     13 33 02 F6 | 	mov	local11, local05
072fc     01 32 66 F0 | 	shl	local11, #1
07300     13 33 02 F1 | 	add	local11, local05
07304     02 32 66 F0 | 	shl	local11, #2
07308     03 00 00 FF 
0730c     00 E4 85 F1 | 	sub	objptr, ##1536
07310     F2 32 02 F1 | 	add	local11, objptr
07314     08 32 06 F1 | 	add	local11, #8
07318     19 2B 62 FC | 	wrlong	local07, local11
0731c     03 00 00 FF 
07320     00 E4 05 F1 | 	add	objptr, ##1536
07324     F2 26 02 FB | 	rdlong	local05, objptr
07328     01 26 06 F1 | 	add	local05, #1
0732c     F2 26 62 FC | 	wrlong	local05, objptr
07330     44 22 06 F6 | 	mov	local03, #68
07334     0F 27 02 F6 | 	mov	local05, local01
07338     10 29 02 F6 | 	mov	local06, local02
0733c     11 2B 02 F6 | 	mov	local07, local03
07340     F2 2C 02 FB | 	rdlong	local08, objptr
07344     16 2F 02 F6 | 	mov	local09, local08
07348     01 2E 66 F0 | 	shl	local09, #1
0734c     16 2F 02 F1 | 	add	local09, local08
07350     02 2E 66 F0 | 	shl	local09, #2
07354     03 00 00 FF 
07358     00 E4 85 F1 | 	sub	objptr, ##1536
0735c     F2 2E 02 F1 | 	add	local09, objptr
07360     17 27 62 FC | 	wrlong	local05, local09
07364     03 00 00 FF 
07368     00 E4 05 F1 | 	add	objptr, ##1536
0736c     F2 32 02 FB | 	rdlong	local11, objptr
07370     19 31 02 F6 | 	mov	local10, local11
07374     01 30 66 F0 | 	shl	local10, #1
07378     19 31 02 F1 | 	add	local10, local11
0737c     02 30 66 F0 | 	shl	local10, #2
07380     03 00 00 FF 
07384     00 E4 85 F1 | 	sub	objptr, ##1536
07388     F2 30 02 F1 | 	add	local10, objptr
0738c     04 30 06 F1 | 	add	local10, #4
07390     18 29 62 FC | 	wrlong	local06, local10
07394     03 00 00 FF 
07398     00 E4 05 F1 | 	add	objptr, ##1536
0739c     F2 30 02 FB | 	rdlong	local10, objptr
073a0     18 33 02 F6 | 	mov	local11, local10
073a4     01 32 66 F0 | 	shl	local11, #1
073a8     18 33 02 F1 | 	add	local11, local10
073ac     02 32 66 F0 | 	shl	local11, #2
073b0     03 00 00 FF 
073b4     00 E4 85 F1 | 	sub	objptr, ##1536
073b8     F2 32 02 F1 | 	add	local11, objptr
073bc     08 32 06 F1 | 	add	local11, #8
073c0     19 2B 62 FC | 	wrlong	local07, local11
073c4     03 00 00 FF 
073c8     00 E4 05 F1 | 	add	objptr, ##1536
073cc     F2 26 02 FB | 	rdlong	local05, objptr
073d0     01 26 06 F1 | 	add	local05, #1
073d4     F2 26 62 FC | 	wrlong	local05, objptr
073d8     6A 00 00 FF 
073dc     60 E4 85 F1 | 	sub	objptr, ##54368
073e0                 | LR__0643
073e0                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
073e0     57 00 00 FF 
073e4     28 E4 05 F1 | 	add	objptr, ##44584
073e8     F2 24 02 FB | 	rdlong	local04, objptr
073ec     03 24 66 F0 | 	shl	local04, #3
073f0     02 00 00 FF 
073f4     38 E4 85 F1 | 	sub	objptr, ##1080
073f8     F2 24 02 F1 | 	add	local04, objptr
073fc     04 24 06 F1 | 	add	local04, #4
07400     12 2D 02 FB | 	rdlong	local08, local04
07404     FE 2D 0E F2 | 	cmp	local08, #510 wz
07408     54 00 00 FF 
0740c     F0 E5 85 F1 | 	sub	objptr, ##43504
07410     B8 00 90 5D |  if_ne	jmp	#LR__0644
07414     44 22 06 F6 | 	mov	local03, #68
07418     0F 27 02 F6 | 	mov	local05, local01
0741c     10 29 02 F6 | 	mov	local06, local02
07420     11 2B 02 F6 | 	mov	local07, local03
07424     6A 00 00 FF 
07428     60 E4 05 F1 | 	add	objptr, ##54368
0742c     F2 2C 02 FB | 	rdlong	local08, objptr
07430     16 2F 02 F6 | 	mov	local09, local08
07434     01 2E 66 F0 | 	shl	local09, #1
07438     16 2F 02 F1 | 	add	local09, local08
0743c     02 2E 66 F0 | 	shl	local09, #2
07440     03 00 00 FF 
07444     00 E4 85 F1 | 	sub	objptr, ##1536
07448     F2 2E 02 F1 | 	add	local09, objptr
0744c     17 27 62 FC | 	wrlong	local05, local09
07450     03 00 00 FF 
07454     00 E4 05 F1 | 	add	objptr, ##1536
07458     F2 32 02 FB | 	rdlong	local11, objptr
0745c     19 31 02 F6 | 	mov	local10, local11
07460     01 30 66 F0 | 	shl	local10, #1
07464     19 31 02 F1 | 	add	local10, local11
07468     02 30 66 F0 | 	shl	local10, #2
0746c     03 00 00 FF 
07470     00 E4 85 F1 | 	sub	objptr, ##1536
07474     F2 30 02 F1 | 	add	local10, objptr
07478     04 30 06 F1 | 	add	local10, #4
0747c     18 29 62 FC | 	wrlong	local06, local10
07480     03 00 00 FF 
07484     00 E4 05 F1 | 	add	objptr, ##1536
07488     F2 30 02 FB | 	rdlong	local10, objptr
0748c     18 33 02 F6 | 	mov	local11, local10
07490     01 32 66 F0 | 	shl	local11, #1
07494     18 33 02 F1 | 	add	local11, local10
07498     02 32 66 F0 | 	shl	local11, #2
0749c     03 00 00 FF 
074a0     00 E4 85 F1 | 	sub	objptr, ##1536
074a4     F2 32 02 F1 | 	add	local11, objptr
074a8     08 32 06 F1 | 	add	local11, #8
074ac     19 2B 62 FC | 	wrlong	local07, local11
074b0     03 00 00 FF 
074b4     00 E4 05 F1 | 	add	objptr, ##1536
074b8     F2 26 02 FB | 	rdlong	local05, objptr
074bc     01 26 06 F1 | 	add	local05, #1
074c0     F2 26 62 FC | 	wrlong	local05, objptr
074c4     6A 00 00 FF 
074c8     60 E4 85 F1 | 	sub	objptr, ##54368
074cc                 | LR__0644
074cc                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
074cc     57 00 00 FF 
074d0     28 E4 05 F1 | 	add	objptr, ##44584
074d4     F2 24 02 FB | 	rdlong	local04, objptr
074d8     03 24 66 F0 | 	shl	local04, #3
074dc     02 00 00 FF 
074e0     38 E4 85 F1 | 	sub	objptr, ##1080
074e4     F2 24 02 F1 | 	add	local04, objptr
074e8     04 24 06 F1 | 	add	local04, #4
074ec     12 2D 02 FB | 	rdlong	local08, local04
074f0     11 2C 0E F2 | 	cmp	local08, #17 wz
074f4     54 00 00 FF 
074f8     F0 E5 85 F1 | 	sub	objptr, ##43504
074fc     6C 00 90 AD |  if_e	jmp	#LR__0645
07500     57 00 00 FF 
07504     28 E4 05 F1 | 	add	objptr, ##44584
07508     F2 2C 02 FB | 	rdlong	local08, objptr
0750c     03 2C 66 F0 | 	shl	local08, #3
07510     02 00 00 FF 
07514     38 E4 85 F1 | 	sub	objptr, ##1080
07518     F2 2C 02 F1 | 	add	local08, objptr
0751c     04 2C 06 F1 | 	add	local08, #4
07520     16 2D 02 FB | 	rdlong	local08, local08
07524     12 2C 0E F2 | 	cmp	local08, #18 wz
07528     54 00 00 FF 
0752c     F0 E5 85 F1 | 	sub	objptr, ##43504
07530     38 00 90 AD |  if_e	jmp	#LR__0645
07534     57 00 00 FF 
07538     28 E4 05 F1 | 	add	objptr, ##44584
0753c     F2 32 02 FB | 	rdlong	local11, objptr
07540     03 32 66 F0 | 	shl	local11, #3
07544     02 00 00 FF 
07548     38 E4 85 F1 | 	sub	objptr, ##1080
0754c     F2 32 02 F1 | 	add	local11, objptr
07550     04 32 06 F1 | 	add	local11, #4
07554     19 33 02 FB | 	rdlong	local11, local11
07558     FE 33 0E F2 | 	cmp	local11, #510 wz
0755c     54 00 00 FF 
07560     F0 E5 85 F1 | 	sub	objptr, ##43504
07564     16 FA 05 56 |  if_ne	mov	result1, #22
07568     68 00 90 5D |  if_ne	jmp	#LR__0647
0756c                 | LR__0645
0756c     57 00 00 FF 
07570     28 E4 05 F1 | 	add	objptr, ##44584
07574     F2 24 02 FB | 	rdlong	local04, objptr
07578     01 24 06 F1 | 	add	local04, #1
0757c     F2 24 62 FC | 	wrlong	local04, objptr
07580     03 24 66 F0 | 	shl	local04, #3
07584     02 00 00 FF 
07588     38 E4 85 F1 | 	sub	objptr, ##1080
0758c     F2 24 02 F1 | 	add	local04, objptr
07590     04 24 06 F1 | 	add	local04, #4
07594     12 2D 02 FB | 	rdlong	local08, local04
07598     FE 2D 0E F2 | 	cmp	local08, #510 wz
0759c     54 00 00 FF 
075a0     F0 E5 85 F1 | 	sub	objptr, ##43504
075a4     28 00 90 AD |  if_e	jmp	#LR__0646
075a8     57 00 00 FF 
075ac     28 E4 05 F1 | 	add	objptr, ##44584
075b0     F2 32 02 FB | 	rdlong	local11, objptr
075b4     0E 00 00 FF 
075b8     1C E4 05 F1 | 	add	objptr, ##7196
075bc     F2 30 02 FB | 	rdlong	local10, objptr
075c0     65 00 00 FF 
075c4     44 E4 85 F1 | 	sub	objptr, ##51780
075c8     18 33 52 F2 | 	cmps	local11, local10 wc
075cc     E4 FA 9F CD |  if_b	jmp	#LR__0641
075d0                 | LR__0646
075d0                 | ' return 0
075d0     00 FA 05 F6 | 	mov	result1, #0
075d4                 | LR__0647
075d4     A7 F0 03 F6 | 	mov	ptra, fp
075d8     B2 00 A0 FD | 	call	#popregs_
075dc                 | _compile_print_ret
075dc     2D 00 64 FD | 	ret
075e0                 | 
075e0                 | ' 
075e0                 | ' function compile_if() as ulong  
075e0                 | _compile_if
075e0     05 4A 05 F6 | 	mov	COUNT_, #5
075e4     A8 00 A0 FD | 	call	#pushregs_
075e8                 | _compile_if_enter
075e8     6C 17 B0 FD | 	call	#_expr
075ec                 | ' expr()
075ec                 | ' return 0
075ec     57 00 00 FF 
075f0     28 E4 05 F1 | 	add	objptr, ##44584
075f4     F2 FA 01 FB | 	rdlong	result1, objptr
075f8     01 FA 05 F1 | 	add	result1, #1
075fc     F2 FA 61 FC | 	wrlong	result1, objptr
07600     58 22 06 F6 | 	mov	local03, #88
07604     0F 25 02 F6 | 	mov	local04, local01
07608     10 27 02 F6 | 	mov	local05, local02
0760c     11 1F 02 F6 | 	mov	local01, local03
07610     13 00 00 FF 
07614     38 E4 05 F1 | 	add	objptr, ##9784
07618     F2 12 02 FB | 	rdlong	arg01, objptr
0761c     09 FB 01 F6 | 	mov	result1, arg01
07620     01 FA 65 F0 | 	shl	result1, #1
07624     09 FB 01 F1 | 	add	result1, arg01
07628     02 FA 65 F0 | 	shl	result1, #2
0762c     03 00 00 FF 
07630     00 E4 85 F1 | 	sub	objptr, ##1536
07634     F2 FA 01 F1 | 	add	result1, objptr
07638     FD 24 62 FC | 	wrlong	local04, result1
0763c     03 00 00 FF 
07640     00 E4 05 F1 | 	add	objptr, ##1536
07644     F2 12 02 FB | 	rdlong	arg01, objptr
07648     09 25 02 F6 | 	mov	local04, arg01
0764c     01 24 66 F0 | 	shl	local04, #1
07650     09 25 02 F1 | 	add	local04, arg01
07654     02 24 66 F0 | 	shl	local04, #2
07658     03 00 00 FF 
0765c     00 E4 85 F1 | 	sub	objptr, ##1536
07660     F2 24 02 F1 | 	add	local04, objptr
07664     04 24 06 F1 | 	add	local04, #4
07668     12 27 62 FC | 	wrlong	local05, local04
0766c     03 00 00 FF 
07670     00 E4 05 F1 | 	add	objptr, ##1536
07674     F2 24 02 FB | 	rdlong	local04, objptr
07678     12 27 02 F6 | 	mov	local05, local04
0767c     01 26 66 F0 | 	shl	local05, #1
07680     12 27 02 F1 | 	add	local05, local04
07684     02 26 66 F0 | 	shl	local05, #2
07688     03 00 00 FF 
0768c     00 E4 85 F1 | 	sub	objptr, ##1536
07690     F2 26 02 F1 | 	add	local05, objptr
07694     08 26 06 F1 | 	add	local05, #8
07698     13 1F 62 FC | 	wrlong	local01, local05
0769c     03 00 00 FF 
076a0     00 E4 05 F1 | 	add	objptr, ##1536
076a4     F2 24 02 FB | 	rdlong	local04, objptr
076a8     01 24 06 F1 | 	add	local04, #1
076ac     F2 24 62 FC | 	wrlong	local04, objptr
076b0                 | ' 
076b0                 | ' 'print "In compile_if"
076b0                 | ' compile_fun_1p()
076b0                 | ' cmd=lparts(ct).token : ct+=1
076b0                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
076b0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
076b0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
076b0     13 00 00 FF 
076b4     38 E4 85 F1 | 	sub	objptr, ##9784
076b8     F2 26 02 FB | 	rdlong	local05, objptr
076bc     01 26 06 F1 | 	add	local05, #1
076c0     03 26 66 F0 | 	shl	local05, #3
076c4     02 00 00 FF 
076c8     38 E4 85 F1 | 	sub	objptr, ##1080
076cc     F2 26 02 F1 | 	add	local05, objptr
076d0     13 13 02 FB | 	rdlong	arg01, local05
076d4     54 00 00 FF 
076d8     F0 E5 85 F1 | 	sub	objptr, ##43504
076dc                 | ' 
076dc                 | ' select case s
076dc     5F 01 00 FF 
076e0     90 15 06 F6 | 	mov	arg02, ##@LR__4722
076e4     20 51 B1 FD | 	call	#__system___string_cmp
076e8     00 FA 0D F2 | 	cmp	result1, #0 wz
076ec     1B FA 05 A6 |  if_e	mov	result1, #27
076f0     00 FA 05 56 |  if_ne	mov	result1, #0
076f4     00 FA 0D F2 | 	cmp	result1, #0 wz
076f8     0C 00 90 AD |  if_e	jmp	#LR__0650
076fc     05 12 06 F6 | 	mov	arg01, #5
07700     88 ED BF FD | 	call	#_compile_immediate_assign
07704     08 00 90 FD | 	jmp	#LR__0651
07708                 | LR__0650
07708     05 12 06 F6 | 	mov	arg01, #5
0770c     A8 E3 BF FD | 	call	#_compile_immediate
07710                 | LR__0651
07710                 | ' 
07710                 | ' 
07710                 | ' return 0
07710     00 FA 05 F6 | 	mov	result1, #0
07714     A7 F0 03 F6 | 	mov	ptra, fp
07718     B2 00 A0 FD | 	call	#popregs_
0771c                 | _compile_if_ret
0771c     2D 00 64 FD | 	ret
07720                 | 
07720                 | ' 
07720                 | ' function compile_else() as ulong  
07720                 | _compile_else
07720     05 4A 05 F6 | 	mov	COUNT_, #5
07724     A8 00 A0 FD | 	call	#pushregs_
07728                 | _compile_else_enter
07728     5A 22 06 F6 | 	mov	local03, #90
0772c     0F 25 02 F6 | 	mov	local04, local01
07730     10 27 02 F6 | 	mov	local05, local02
07734     11 1F 02 F6 | 	mov	local01, local03
07738     6A 00 00 FF 
0773c     60 E4 05 F1 | 	add	objptr, ##54368
07740     F2 12 02 FB | 	rdlong	arg01, objptr
07744     09 FB 01 F6 | 	mov	result1, arg01
07748     01 FA 65 F0 | 	shl	result1, #1
0774c     09 FB 01 F1 | 	add	result1, arg01
07750     02 FA 65 F0 | 	shl	result1, #2
07754     03 00 00 FF 
07758     00 E4 85 F1 | 	sub	objptr, ##1536
0775c     F2 FA 01 F1 | 	add	result1, objptr
07760     FD 24 62 FC | 	wrlong	local04, result1
07764     03 00 00 FF 
07768     00 E4 05 F1 | 	add	objptr, ##1536
0776c     F2 FA 01 FB | 	rdlong	result1, objptr
07770     FD 24 02 F6 | 	mov	local04, result1
07774     01 24 66 F0 | 	shl	local04, #1
07778     FD 24 02 F1 | 	add	local04, result1
0777c     02 24 66 F0 | 	shl	local04, #2
07780     03 00 00 FF 
07784     00 E4 85 F1 | 	sub	objptr, ##1536
07788     F2 24 02 F1 | 	add	local04, objptr
0778c     04 24 06 F1 | 	add	local04, #4
07790     12 27 62 FC | 	wrlong	local05, local04
07794     03 00 00 FF 
07798     00 E4 05 F1 | 	add	objptr, ##1536
0779c     F2 24 02 FB | 	rdlong	local04, objptr
077a0     12 27 02 F6 | 	mov	local05, local04
077a4     01 26 66 F0 | 	shl	local05, #1
077a8     12 27 02 F1 | 	add	local05, local04
077ac     02 26 66 F0 | 	shl	local05, #2
077b0     03 00 00 FF 
077b4     00 E4 85 F1 | 	sub	objptr, ##1536
077b8     F2 26 02 F1 | 	add	local05, objptr
077bc     08 26 06 F1 | 	add	local05, #8
077c0     13 1F 62 FC | 	wrlong	local01, local05
077c4     03 00 00 FF 
077c8     00 E4 05 F1 | 	add	objptr, ##1536
077cc     F2 24 02 FB | 	rdlong	local04, objptr
077d0     01 24 06 F1 | 	add	local04, #1
077d4     F2 24 62 FC | 	wrlong	local04, objptr
077d8                 | ' 
077d8                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
077d8                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
077d8     13 00 00 FF 
077dc     38 E4 85 F1 | 	sub	objptr, ##9784
077e0     F2 26 02 FB | 	rdlong	local05, objptr
077e4     01 26 06 F1 | 	add	local05, #1
077e8     03 26 66 F0 | 	shl	local05, #3
077ec     02 00 00 FF 
077f0     38 E4 85 F1 | 	sub	objptr, ##1080
077f4     F2 26 02 F1 | 	add	local05, objptr
077f8     13 13 02 FB | 	rdlong	arg01, local05
077fc     54 00 00 FF 
07800     F0 E5 85 F1 | 	sub	objptr, ##43504
07804                 | ' 
07804                 | ' select case s
07804     5F 01 00 FF 
07808     90 15 06 F6 | 	mov	arg02, ##@LR__4722
0780c     F8 4F B1 FD | 	call	#__system___string_cmp
07810     00 FA 0D F2 | 	cmp	result1, #0 wz
07814     1B FA 05 A6 |  if_e	mov	result1, #27
07818     00 FA 05 56 |  if_ne	mov	result1, #0
0781c     00 FA 0D F2 | 	cmp	result1, #0 wz
07820     0C 00 90 AD |  if_e	jmp	#LR__0660
07824     05 12 06 F6 | 	mov	arg01, #5
07828     60 EC BF FD | 	call	#_compile_immediate_assign
0782c     08 00 90 FD | 	jmp	#LR__0661
07830                 | LR__0660
07830     05 12 06 F6 | 	mov	arg01, #5
07834     80 E2 BF FD | 	call	#_compile_immediate
07838                 | LR__0661
07838                 | ' 
07838                 | ' 
07838                 | ' return 0
07838     00 FA 05 F6 | 	mov	result1, #0
0783c     A7 F0 03 F6 | 	mov	ptra, fp
07840     B2 00 A0 FD | 	call	#popregs_
07844                 | _compile_else_ret
07844     2D 00 64 FD | 	ret
07848                 | 
07848                 | ' 
07848                 | ' 
07848                 | ' function compile_dim() as ulong  
07848                 | _compile_dim
07848     11 4A 05 F6 | 	mov	COUNT_, #17
0784c     A8 00 A0 FD | 	call	#pushregs_
07850     01 1E 06 F6 | 	mov	local01, #1
07854     01 20 06 F6 | 	mov	local02, #1
07858     01 22 06 F6 | 	mov	local03, #1
0785c                 | ' 
0785c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0785c                 | ' 
0785c                 | ' if isname(lparts(ct).part$) then 
0785c     57 00 00 FF 
07860     28 E4 05 F1 | 	add	objptr, ##44584
07864     F2 18 02 FB | 	rdlong	arg04, objptr
07868     03 18 66 F0 | 	shl	arg04, #3
0786c     02 00 00 FF 
07870     38 E4 85 F1 | 	sub	objptr, ##1080
07874     F2 18 02 F1 | 	add	arg04, objptr
07878     0C 13 02 FB | 	rdlong	arg01, arg04
0787c     54 00 00 FF 
07880     F0 E5 85 F1 | 	sub	objptr, ##43504
07884     E4 D2 BF FD | 	call	#_isname
07888     00 FA 0D F2 | 	cmp	result1, #0 wz
0788c     AC 05 90 AD |  if_e	jmp	#LR__0694
07890     57 00 00 FF 
07894     28 E4 05 F1 | 	add	objptr, ##44584
07898     F2 24 02 FB | 	rdlong	local04, objptr
0789c     03 24 66 F0 | 	shl	local04, #3
078a0     02 00 00 FF 
078a4     38 E4 85 F1 | 	sub	objptr, ##1080
078a8     F2 24 02 F1 | 	add	local04, objptr
078ac     12 27 02 FB | 	rdlong	local05, local04
078b0     01 28 66 F6 | 	neg	local06, #1
078b4                 | '   varname2$=lparts(ct).part$ 
078b4                 | '   j=-1
078b4                 | '   if varnum>0 then
078b4     04 E4 85 F1 | 	sub	objptr, #4
078b8     F2 2A 02 FB | 	rdlong	local07, objptr
078bc     54 00 00 FF 
078c0     EC E5 85 F1 | 	sub	objptr, ##43500
078c4     01 2A 56 F2 | 	cmps	local07, #1 wc
078c8     58 00 90 CD |  if_b	jmp	#LR__0672
078cc                 | '  '   print "in dim, varnum=";varnum
078cc                 | '     for i=0 to varnum-1
078cc     00 2C 06 F6 | 	mov	local08, #0
078d0     54 00 00 FF 
078d4     EC E5 05 F1 | 	add	objptr, ##43500
078d8     F2 2E 02 FB | 	rdlong	local09, objptr
078dc     54 00 00 FF 
078e0     EC E5 85 F1 | 	sub	objptr, ##43500
078e4                 | LR__0670
078e4     17 2D 52 F2 | 	cmps	local08, local09 wc
078e8     38 00 90 3D |  if_ae	jmp	#LR__0671
078ec                 | '       if variables(i).name=varname2$ then j=i : exit
078ec     16 25 02 F6 | 	mov	local04, local08
078f0     04 24 66 F0 | 	shl	local04, #4
078f4     34 00 00 FF 
078f8     EC E5 05 F1 | 	add	objptr, ##27116
078fc     F2 24 02 F1 | 	add	local04, objptr
07900     12 13 02 FB | 	rdlong	arg01, local04
07904     13 15 02 F6 | 	mov	arg02, local05
07908     34 00 00 FF 
0790c     EC E5 85 F1 | 	sub	objptr, ##27116
07910     F4 4E B1 FD | 	call	#__system___string_cmp
07914     00 FA 0D F2 | 	cmp	result1, #0 wz
07918     16 29 02 A6 |  if_e	mov	local06, local08
0791c     01 2C 06 51 |  if_ne	add	local08, #1
07920     C0 FF 9F 5D |  if_ne	jmp	#LR__0670
07924                 | LR__0671
07924                 | LR__0672
07924                 | ' '  if j<>-1 then printerror (42) : return 42
07924                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07924     FF FF 7F FF 
07928     FF 29 0E F2 | 	cmp	local06, ##-1 wz
0792c     54 00 00 AF 
07930     EC E5 05 A1 |  if_e	add	objptr, ##43500
07934     F2 28 02 AB |  if_e	rdlong	local06, objptr
07938     54 00 00 AF 
0793c     EC E5 85 A1 |  if_e	sub	objptr, ##43500
07940     78 00 90 AD |  if_e	jmp	#LR__0673
07944     00 12 06 F6 | 	mov	arg01, #0
07948     24 A8 B1 FD | 	call	#__system___getiolock_0474
0794c     FD 12 02 F6 | 	mov	arg01, result1
07950     8C 4E B1 FD | 	call	#__system___lockmem
07954     61 01 00 FF 
07958     9E 14 06 F6 | 	mov	arg02, ##@LR__4894
0795c     00 12 06 F6 | 	mov	arg01, #0
07960     00 16 06 F6 | 	mov	arg03, #0
07964     7C 5B B1 FD | 	call	#__system___basic_print_string
07968     7B 00 00 FF 
0796c     74 E4 05 F1 | 	add	objptr, ##63092
07970     F2 14 02 FB | 	rdlong	arg02, objptr
07974     7B 00 00 FF 
07978     74 E4 85 F1 | 	sub	objptr, ##63092
0797c     00 12 06 F6 | 	mov	arg01, #0
07980     00 16 06 F6 | 	mov	arg03, #0
07984     0A 18 06 F6 | 	mov	arg04, #10
07988     DC 5B B1 FD | 	call	#__system___basic_print_unsigned
0798c     61 01 00 FF 
07990     AC 14 06 F6 | 	mov	arg02, ##@LR__4895
07994     00 12 06 F6 | 	mov	arg01, #0
07998     00 16 06 F6 | 	mov	arg03, #0
0799c     44 5B B1 FD | 	call	#__system___basic_print_string
079a0     00 12 06 F6 | 	mov	arg01, #0
079a4     0A 14 06 F6 | 	mov	arg02, #10
079a8     00 16 06 F6 | 	mov	arg03, #0
079ac     DC 5A B1 FD | 	call	#__system___basic_print_char
079b0     00 12 06 F6 | 	mov	arg01, #0
079b4     B8 A7 B1 FD | 	call	#__system___getiolock_0474
079b8     FD 00 68 FC | 	wrlong	#0, result1
079bc                 | LR__0673
079bc                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
079bc     57 00 00 FF 
079c0     28 E4 05 F1 | 	add	objptr, ##44584
079c4     F2 18 02 FB | 	rdlong	arg04, objptr
079c8     01 18 06 F1 | 	add	arg04, #1
079cc     03 18 66 F0 | 	shl	arg04, #3
079d0     02 00 00 FF 
079d4     38 E4 85 F1 | 	sub	objptr, ##1080
079d8     F2 18 02 F1 | 	add	arg04, objptr
079dc     0C 13 02 FB | 	rdlong	arg01, arg04
079e0     61 01 00 FF 
079e4     CD 14 06 F6 | 	mov	arg02, ##@LR__4896
079e8     54 00 00 FF 
079ec     F0 E5 85 F1 | 	sub	objptr, ##43504
079f0     14 4E B1 FD | 	call	#__system___string_cmp
079f4     00 FA 0D F2 | 	cmp	result1, #0 wz
079f8     50 00 90 AD |  if_e	jmp	#LR__0674
079fc     57 00 00 FF 
07a00     28 E4 05 F1 | 	add	objptr, ##44584
07a04     F2 2E 02 FB | 	rdlong	local09, objptr
07a08     01 2E 06 F1 | 	add	local09, #1
07a0c     03 2E 66 F0 | 	shl	local09, #3
07a10     02 00 00 FF 
07a14     38 E4 85 F1 | 	sub	objptr, ##1080
07a18     F2 2E 02 F1 | 	add	local09, objptr
07a1c     17 13 02 FB | 	rdlong	arg01, local09
07a20     61 01 00 FF 
07a24     CF 14 06 F6 | 	mov	arg02, ##@LR__4897
07a28     54 00 00 FF 
07a2c     F0 E5 85 F1 | 	sub	objptr, ##43504
07a30     D4 4D B1 FD | 	call	#__system___string_cmp
07a34     00 FA 0D F2 | 	cmp	result1, #0 wz
07a38     10 00 90 AD |  if_e	jmp	#LR__0674
07a3c     2B 12 06 F6 | 	mov	arg01, #43
07a40     B4 15 B1 FD | 	call	#_printerror
07a44     2B FA 05 F6 | 	mov	result1, #43
07a48     00 05 90 FD | 	jmp	#LR__0696
07a4c                 | LR__0674
07a4c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07a4c     57 00 00 FF 
07a50     28 E4 05 F1 | 	add	objptr, ##44584
07a54     F2 14 02 FB | 	rdlong	arg02, objptr
07a58     01 14 06 F1 | 	add	arg02, #1
07a5c     03 14 66 F0 | 	shl	arg02, #3
07a60     02 00 00 FF 
07a64     38 E4 85 F1 | 	sub	objptr, ##1080
07a68     F2 14 02 F1 | 	add	arg02, objptr
07a6c     0A 13 02 FB | 	rdlong	arg01, arg02
07a70     61 01 00 FF 
07a74     D2 14 06 F6 | 	mov	arg02, ##@LR__4898
07a78     54 00 00 FF 
07a7c     F0 E5 85 F1 | 	sub	objptr, ##43504
07a80     84 4D B1 FD | 	call	#__system___string_cmp
07a84     00 FA 0D F2 | 	cmp	result1, #0 wz
07a88     57 00 00 AF 
07a8c     28 E4 05 A1 |  if_e	add	objptr, ##44584
07a90     F2 30 02 AB |  if_e	rdlong	local10, objptr
07a94     57 00 00 AF 
07a98     28 E4 85 A1 |  if_e	sub	objptr, ##44584
07a9c     01 30 06 A1 |  if_e	add	local10, #1
07aa0     7C 01 90 AD |  if_e	jmp	#LR__0680
07aa4     57 00 00 FF 
07aa8     28 E4 05 F1 | 	add	objptr, ##44584
07aac     F2 30 02 FB | 	rdlong	local10, objptr
07ab0     57 00 00 FF 
07ab4     28 E4 85 F1 | 	sub	objptr, ##44584
07ab8     02 30 06 F1 | 	add	local10, #2
07abc     00 32 06 F6 | 	mov	local11, #0
07ac0                 | '   l=ct+2 : m=0 : do
07ac0                 | LR__0675
07ac0                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07ac0                 | '     if isdec(lparts(l).part$) then 
07ac0     18 25 02 F6 | 	mov	local04, local10
07ac4     03 24 66 F0 | 	shl	local04, #3
07ac8     54 00 00 FF 
07acc     F0 E5 05 F1 | 	add	objptr, ##43504
07ad0     F2 24 02 F1 | 	add	local04, objptr
07ad4     12 13 02 FB | 	rdlong	arg01, local04
07ad8     54 00 00 FF 
07adc     F0 E5 85 F1 | 	sub	objptr, ##43504
07ae0     2C D7 BF FD | 	call	#_isdec
07ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ae8     44 00 90 AD |  if_e	jmp	#LR__0676
07aec     19 35 02 F6 | 	mov	local12, local11
07af0     0F 35 06 F1 | 	add	local12, #local01
07af4     18 2F 02 F6 | 	mov	local09, local10
07af8     03 2E 66 F0 | 	shl	local09, #3
07afc     54 00 00 FF 
07b00     F0 E5 05 F1 | 	add	objptr, ##43504
07b04     F2 2E 02 F1 | 	add	local09, objptr
07b08     17 13 02 FB | 	rdlong	arg01, local09
07b0c     00 14 06 F6 | 	mov	arg02, #0
07b10     54 00 00 FF 
07b14     F0 E5 85 F1 | 	sub	objptr, ##43504
07b18     B8 7E B1 FD | 	call	#__system____builtin_atoi
07b1c     FD 36 02 F6 | 	mov	local13, result1
07b20                 | 	'.live	local13
07b20                 | 	'.live	local12
07b20     00 34 8E F9 | 	altd	local12, #0
07b24     1B 35 02 F6 | 	mov	local12, local13
07b28     01 32 06 F1 | 	add	local11, #1
07b2c     10 00 90 FD | 	jmp	#LR__0677
07b30                 | LR__0676
07b30     11 12 06 F6 | 	mov	arg01, #17
07b34     C0 14 B1 FD | 	call	#_printerror
07b38                 | '       printerror (17)  : return(17)
07b38     11 FA 05 F6 | 	mov	result1, #17
07b3c     0C 04 90 FD | 	jmp	#LR__0696
07b40                 | LR__0677
07b40                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07b40     18 25 02 F6 | 	mov	local04, local10
07b44     01 24 06 F1 | 	add	local04, #1
07b48     03 24 66 F0 | 	shl	local04, #3
07b4c     54 00 00 FF 
07b50     F0 E5 05 F1 | 	add	objptr, ##43504
07b54     F2 24 02 F1 | 	add	local04, objptr
07b58     12 13 02 FB | 	rdlong	arg01, local04
07b5c     61 01 00 FF 
07b60     D5 14 06 F6 | 	mov	arg02, ##@LR__4899
07b64     54 00 00 FF 
07b68     F0 E5 85 F1 | 	sub	objptr, ##43504
07b6c     98 4C B1 FD | 	call	#__system___string_cmp
07b70     00 FA 0D F2 | 	cmp	result1, #0 wz
07b74     48 00 90 AD |  if_e	jmp	#LR__0678
07b78     18 37 02 F6 | 	mov	local13, local10
07b7c     01 36 06 F1 | 	add	local13, #1
07b80     03 36 66 F0 | 	shl	local13, #3
07b84     54 00 00 FF 
07b88     F0 E5 05 F1 | 	add	objptr, ##43504
07b8c     F2 36 02 F1 | 	add	local13, objptr
07b90     1B 13 02 FB | 	rdlong	arg01, local13
07b94     61 01 00 FF 
07b98     D7 14 06 F6 | 	mov	arg02, ##@LR__4900
07b9c     54 00 00 FF 
07ba0     F0 E5 85 F1 | 	sub	objptr, ##43504
07ba4     60 4C B1 FD | 	call	#__system___string_cmp
07ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
07bac     10 00 90 AD |  if_e	jmp	#LR__0678
07bb0     2C 12 06 F6 | 	mov	arg01, #44
07bb4     40 14 B1 FD | 	call	#_printerror
07bb8     2C FA 05 F6 | 	mov	result1, #44
07bbc     8C 03 90 FD | 	jmp	#LR__0696
07bc0                 | LR__0678
07bc0     02 30 06 F1 | 	add	local10, #2
07bc4     18 25 02 F6 | 	mov	local04, local10
07bc8     01 24 86 F1 | 	sub	local04, #1
07bcc     03 24 66 F0 | 	shl	local04, #3
07bd0     54 00 00 FF 
07bd4     F0 E5 05 F1 | 	add	objptr, ##43504
07bd8     F2 24 02 F1 | 	add	local04, objptr
07bdc     12 13 02 FB | 	rdlong	arg01, local04
07be0     61 01 00 FF 
07be4     D9 14 06 F6 | 	mov	arg02, ##@LR__4901
07be8     54 00 00 FF 
07bec     F0 E5 85 F1 | 	sub	objptr, ##43504
07bf0     14 4C B1 FD | 	call	#__system___string_cmp
07bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
07bf8     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07bfc     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0675
07c00                 | '   if m>3 then printerror(45): return(45)
07c00     04 32 56 F2 | 	cmps	local11, #4 wc
07c04     10 00 90 CD |  if_b	jmp	#LR__0679
07c08     2D 12 06 F6 | 	mov	arg01, #45
07c0c     E8 13 B1 FD | 	call	#_printerror
07c10     2D FA 05 F6 | 	mov	result1, #45
07c14     34 03 90 FD | 	jmp	#LR__0696
07c18                 | LR__0679
07c18     00 39 06 F6 | 	mov	local14, #256
07c1c     0C 3A 06 F6 | 	mov	local15, #12
07c20                 | LR__0680
07c20                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07c20                 | '   arraytype=array_no_type : esize=12
07c20                 | ' 1350 
07c20                 | '   if lparts(l).part$="as" then
07c20     18 25 02 F6 | 	mov	local04, local10
07c24     03 24 66 F0 | 	shl	local04, #3
07c28     54 00 00 FF 
07c2c     F0 E5 05 F1 | 	add	objptr, ##43504
07c30     F2 24 02 F1 | 	add	local04, objptr
07c34     12 13 02 FB | 	rdlong	arg01, local04
07c38     61 01 00 FF 
07c3c     DB 14 06 F6 | 	mov	arg02, ##@LR__4902
07c40     54 00 00 FF 
07c44     F0 E5 85 F1 | 	sub	objptr, ##43504
07c48     BC 4B B1 FD | 	call	#__system___string_cmp
07c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
07c50     F8 01 90 5D |  if_ne	jmp	#LR__0695
07c54                 | '     select case lparts(l+1).part$
07c54     18 35 02 F6 | 	mov	local12, local10
07c58     01 34 06 F1 | 	add	local12, #1
07c5c     03 34 66 F0 | 	shl	local12, #3
07c60     54 00 00 FF 
07c64     F0 E5 05 F1 | 	add	objptr, ##43504
07c68     F2 34 02 F1 | 	add	local12, objptr
07c6c     1A 3D 02 FB | 	rdlong	local16, local12
07c70     61 01 00 FF 
07c74     DE 14 06 F6 | 	mov	arg02, ##@LR__4903
07c78     1E 13 02 F6 | 	mov	arg01, local16
07c7c     54 00 00 FF 
07c80     F0 E5 85 F1 | 	sub	objptr, ##43504
07c84     80 4B B1 FD | 	call	#__system___string_cmp
07c88     00 FA 0D F2 | 	cmp	result1, #0 wz
07c8c     0C 01 90 AD |  if_e	jmp	#LR__0681
07c90     61 01 00 FF 
07c94     E3 14 06 F6 | 	mov	arg02, ##@LR__4904
07c98     1E 13 02 F6 | 	mov	arg01, local16
07c9c     68 4B B1 FD | 	call	#__system___string_cmp
07ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
07ca4     00 01 90 AD |  if_e	jmp	#LR__0682
07ca8     61 01 00 FF 
07cac     E9 14 06 F6 | 	mov	arg02, ##@LR__4905
07cb0     1E 13 02 F6 | 	mov	arg01, local16
07cb4     50 4B B1 FD | 	call	#__system___string_cmp
07cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
07cbc     F4 00 90 AD |  if_e	jmp	#LR__0683
07cc0     61 01 00 FF 
07cc4     EF 14 06 F6 | 	mov	arg02, ##@LR__4906
07cc8     1E 13 02 F6 | 	mov	arg01, local16
07ccc     38 4B B1 FD | 	call	#__system___string_cmp
07cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
07cd4     E8 00 90 AD |  if_e	jmp	#LR__0684
07cd8     61 01 00 FF 
07cdc     F6 14 06 F6 | 	mov	arg02, ##@LR__4907
07ce0     1E 13 02 F6 | 	mov	arg01, local16
07ce4     20 4B B1 FD | 	call	#__system___string_cmp
07ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
07cec     DC 00 90 AD |  if_e	jmp	#LR__0685
07cf0     61 01 00 FF 
07cf4     FB 14 06 F6 | 	mov	arg02, ##@LR__4908
07cf8     1E 13 02 F6 | 	mov	arg01, local16
07cfc     08 4B B1 FD | 	call	#__system___string_cmp
07d00     00 FA 0D F2 | 	cmp	result1, #0 wz
07d04     D0 00 90 AD |  if_e	jmp	#LR__0686
07d08     61 01 00 FF 
07d0c     03 15 06 F6 | 	mov	arg02, ##@LR__4909
07d10     1E 13 02 F6 | 	mov	arg01, local16
07d14     F0 4A B1 FD | 	call	#__system___string_cmp
07d18     00 FA 0D F2 | 	cmp	result1, #0 wz
07d1c     C4 00 90 AD |  if_e	jmp	#LR__0687
07d20     61 01 00 FF 
07d24     09 15 06 F6 | 	mov	arg02, ##@LR__4910
07d28     1E 13 02 F6 | 	mov	arg01, local16
07d2c     D8 4A B1 FD | 	call	#__system___string_cmp
07d30     00 FA 0D F2 | 	cmp	result1, #0 wz
07d34     B8 00 90 AD |  if_e	jmp	#LR__0688
07d38     61 01 00 FF 
07d3c     0F 15 06 F6 | 	mov	arg02, ##@LR__4911
07d40     1E 13 02 F6 | 	mov	arg01, local16
07d44     C0 4A B1 FD | 	call	#__system___string_cmp
07d48     00 FA 0D F2 | 	cmp	result1, #0 wz
07d4c     AC 00 90 AD |  if_e	jmp	#LR__0689
07d50     61 01 00 FF 
07d54     16 15 06 F6 | 	mov	arg02, ##@LR__4912
07d58     1E 13 02 F6 | 	mov	arg01, local16
07d5c     A8 4A B1 FD | 	call	#__system___string_cmp
07d60     00 FA 0D F2 | 	cmp	result1, #0 wz
07d64     A0 00 90 AD |  if_e	jmp	#LR__0690
07d68     61 01 00 FF 
07d6c     1D 15 06 F6 | 	mov	arg02, ##@LR__4913
07d70     1E 13 02 F6 | 	mov	arg01, local16
07d74     90 4A B1 FD | 	call	#__system___string_cmp
07d78     00 FA 0D F2 | 	cmp	result1, #0 wz
07d7c     94 00 90 AD |  if_e	jmp	#LR__0691
07d80     61 01 00 FF 
07d84     24 15 06 F6 | 	mov	arg02, ##@LR__4914
07d88     1E 13 02 F6 | 	mov	arg01, local16
07d8c     78 4A B1 FD | 	call	#__system___string_cmp
07d90     00 FA 0D F2 | 	cmp	result1, #0 wz
07d94     88 00 90 AD |  if_e	jmp	#LR__0692
07d98     90 00 90 FD | 	jmp	#LR__0693
07d9c                 | LR__0681
07d9c     01 39 06 F6 | 	mov	local14, #257
07da0     01 3A 06 F6 | 	mov	local15, #1
07da4     A4 00 90 FD | 	jmp	#LR__0695
07da8                 | LR__0682
07da8     02 39 06 F6 | 	mov	local14, #258
07dac     01 3A 06 F6 | 	mov	local15, #1
07db0     98 00 90 FD | 	jmp	#LR__0695
07db4                 | LR__0683
07db4     03 39 06 F6 | 	mov	local14, #259
07db8     02 3A 06 F6 | 	mov	local15, #2
07dbc     8C 00 90 FD | 	jmp	#LR__0695
07dc0                 | LR__0684
07dc0     04 39 06 F6 | 	mov	local14, #260
07dc4     02 3A 06 F6 | 	mov	local15, #2
07dc8     80 00 90 FD | 	jmp	#LR__0695
07dcc                 | LR__0685
07dcc     05 39 06 F6 | 	mov	local14, #261
07dd0     04 3A 06 F6 | 	mov	local15, #4
07dd4     74 00 90 FD | 	jmp	#LR__0695
07dd8                 | LR__0686
07dd8     05 39 06 F6 | 	mov	local14, #261
07ddc     04 3A 06 F6 | 	mov	local15, #4
07de0     68 00 90 FD | 	jmp	#LR__0695
07de4                 | LR__0687
07de4     06 39 06 F6 | 	mov	local14, #262
07de8     04 3A 06 F6 | 	mov	local15, #4
07dec     5C 00 90 FD | 	jmp	#LR__0695
07df0                 | LR__0688
07df0     07 39 06 F6 | 	mov	local14, #263
07df4     08 3A 06 F6 | 	mov	local15, #8
07df8     50 00 90 FD | 	jmp	#LR__0695
07dfc                 | LR__0689
07dfc     08 39 06 F6 | 	mov	local14, #264
07e00     08 3A 06 F6 | 	mov	local15, #8
07e04     44 00 90 FD | 	jmp	#LR__0695
07e08                 | LR__0690
07e08     09 39 06 F6 | 	mov	local14, #265
07e0c     04 3A 06 F6 | 	mov	local15, #4
07e10     38 00 90 FD | 	jmp	#LR__0695
07e14                 | LR__0691
07e14     0A 39 06 F6 | 	mov	local14, #266
07e18     08 3A 06 F6 | 	mov	local15, #8
07e1c     2C 00 90 FD | 	jmp	#LR__0695
07e20                 | LR__0692
07e20     0B 39 06 F6 | 	mov	local14, #267
07e24     04 3A 06 F6 | 	mov	local15, #4
07e28     20 00 90 FD | 	jmp	#LR__0695
07e2c                 | LR__0693
07e2c     2F 12 06 F6 | 	mov	arg01, #47
07e30     C4 11 B1 FD | 	call	#_printerror
07e34     2F FA 05 F6 | 	mov	result1, #47
07e38     10 01 90 FD | 	jmp	#LR__0696
07e3c                 | LR__0694
07e3c     2E 12 06 F6 | 	mov	arg01, #46
07e40     B4 11 B1 FD | 	call	#_printerror
07e44                 | '   printerror(46): return 46
07e44     2E FA 05 F6 | 	mov	result1, #46
07e48     00 01 90 FD | 	jmp	#LR__0696
07e4c                 | LR__0695
07e4c     0F 3B 02 FD | 	qmul	local15, local01
07e50     18 2A 62 FD | 	getqx	local07
07e54     10 2B 02 FD | 	qmul	local07, local02
07e58     18 3C 62 FD | 	getqx	local16
07e5c     11 3D 02 FD | 	qmul	local16, local03
07e60     7B 00 00 FF 
07e64     5C E4 05 F1 | 	add	objptr, ##63068
07e68     F2 3E 02 FB | 	rdlong	local17, objptr
07e6c     1C 15 02 F6 | 	mov	arg02, local14
07e70     18 3C 62 FD | 	getqx	local16
07e74     1E 3F 82 F1 | 	sub	local17, local16
07e78     10 3E 86 F1 | 	sub	local17, #16
07e7c     0F 3E 26 F5 | 	andn	local17, #15
07e80     F2 3E 62 FC | 	wrlong	local17, objptr
07e84     7B 00 00 FF 
07e88     5C E4 85 F1 | 	sub	objptr, ##63068
07e8c     1F 13 02 F6 | 	mov	arg01, local17
07e90     10 13 B1 FD | 	call	#_psdpoke
07e94     1F 13 02 F6 | 	mov	arg01, local17
07e98     02 12 06 F1 | 	add	arg01, #2
07e9c     1D 15 02 F6 | 	mov	arg02, local15
07ea0     00 13 B1 FD | 	call	#_psdpoke
07ea4     1F 13 02 F6 | 	mov	arg01, local17
07ea8     04 12 06 F1 | 	add	arg01, #4
07eac     0F 15 02 F6 | 	mov	arg02, local01
07eb0     A8 12 B1 FD | 	call	#_pslpoke
07eb4     1F 13 02 F6 | 	mov	arg01, local17
07eb8     08 12 06 F1 | 	add	arg01, #8
07ebc     10 15 02 F6 | 	mov	arg02, local02
07ec0     98 12 B1 FD | 	call	#_pslpoke
07ec4     1F 13 02 F6 | 	mov	arg01, local17
07ec8     0C 12 06 F1 | 	add	arg01, #12
07ecc     11 15 02 F6 | 	mov	arg02, local03
07ed0     88 12 B1 FD | 	call	#_pslpoke
07ed4     14 35 02 F6 | 	mov	local12, local06
07ed8     04 34 66 F0 | 	shl	local12, #4
07edc     34 00 00 FF 
07ee0     EC E5 05 F1 | 	add	objptr, ##27116
07ee4     F2 34 02 F1 | 	add	local12, objptr
07ee8     1A 27 62 FC | 	wrlong	local05, local12
07eec     14 35 02 F6 | 	mov	local12, local06
07ef0     04 34 66 F0 | 	shl	local12, #4
07ef4     F2 34 02 F1 | 	add	local12, objptr
07ef8     04 34 06 F1 | 	add	local12, #4
07efc     1A 3F 62 FC | 	wrlong	local17, local12
07f00     14 35 02 F6 | 	mov	local12, local06
07f04     04 34 66 F0 | 	shl	local12, #4
07f08     F2 34 02 F1 | 	add	local12, objptr
07f0c     0C 34 06 F1 | 	add	local12, #12
07f10     1A 39 62 FC | 	wrlong	local14, local12
07f14                 | ' memtop=arrayptr
07f14                 | ' 
07f14                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
07f14                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
07f14                 | ' pslpoke arrayptr+4,dims(0)
07f14                 | ' pslpoke arrayptr+8,dims(1)
07f14                 | ' pslpoke arrayptr+12,dims(2)
07f14                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
07f14                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
07f14                 | ' 
07f14                 | ' 
07f14                 | ' variables(j).name=varname2$
07f14                 | ' variables(j).value.uresult=arrayptr
07f14                 | ' variables(j).vartype=arraytype
07f14                 | ' if j=varnum then varnum+=1
07f14     20 00 00 FF 
07f18     00 E4 05 F1 | 	add	objptr, ##16384
07f1c     F2 2A 02 FB | 	rdlong	local07, objptr
07f20     54 00 00 FF 
07f24     EC E5 85 F1 | 	sub	objptr, ##43500
07f28     15 29 0A F2 | 	cmp	local06, local07 wz
07f2c     54 00 00 AF 
07f30     EC E5 05 A1 |  if_e	add	objptr, ##43500
07f34     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07f38     01 2A 06 A1 |  if_e	add	local07, #1
07f3c     F2 2A 62 AC |  if_e	wrlong	local07, objptr
07f40     54 00 00 AF 
07f44     EC E5 85 A1 |  if_e	sub	objptr, ##43500
07f48                 | ' 
07f48                 | ' return 0
07f48     00 FA 05 F6 | 	mov	result1, #0
07f4c                 | LR__0696
07f4c     A7 F0 03 F6 | 	mov	ptra, fp
07f50     B2 00 A0 FD | 	call	#popregs_
07f54                 | _compile_dim_ret
07f54     2D 00 64 FD | 	ret
07f58                 | 
07f58                 | ' 
07f58                 | ' 
07f58                 | ' function compile_for() as ulong  
07f58                 | _compile_for
07f58     07 4A 05 F6 | 	mov	COUNT_, #7
07f5c     A8 00 A0 FD | 	call	#pushregs_
07f60                 | ' 
07f60                 | ' 
07f60                 | ' 
07f60                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07f60     57 00 00 FF 
07f64     28 E4 05 F1 | 	add	objptr, ##44584
07f68     F2 14 02 FB | 	rdlong	arg02, objptr
07f6c     01 14 06 F1 | 	add	arg02, #1
07f70     03 14 66 F0 | 	shl	arg02, #3
07f74     02 00 00 FF 
07f78     38 E4 85 F1 | 	sub	objptr, ##1080
07f7c     F2 14 02 F1 | 	add	arg02, objptr
07f80     0A 13 02 FB | 	rdlong	arg01, arg02
07f84     54 00 00 FF 
07f88     F0 E5 85 F1 | 	sub	objptr, ##43504
07f8c                 | ' 
07f8c                 | ' select case s
07f8c     5F 01 00 FF 
07f90     90 15 06 F6 | 	mov	arg02, ##@LR__4722
07f94     70 48 B1 FD | 	call	#__system___string_cmp
07f98     00 FA 0D F2 | 	cmp	result1, #0 wz
07f9c     1B FA 05 A6 |  if_e	mov	result1, #27
07fa0     00 FA 05 56 |  if_ne	mov	result1, #0
07fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
07fa8     0C 00 90 AD |  if_e	jmp	#LR__0700
07fac     05 12 06 F6 | 	mov	arg01, #5
07fb0     D8 E4 BF FD | 	call	#_compile_immediate_assign
07fb4     10 00 90 FD | 	jmp	#LR__0701
07fb8                 | LR__0700
07fb8     20 12 06 F6 | 	mov	arg01, #32
07fbc     48 E9 BF FD | 	call	#_compile_error
07fc0     20 FA 05 F6 | 	mov	result1, #32
07fc4     E8 02 90 FD | 	jmp	#LR__0707
07fc8                 | LR__0701
07fc8     6A 00 00 FF 
07fcc     60 E4 05 F1 | 	add	objptr, ##54368
07fd0     F2 12 02 FB | 	rdlong	arg01, objptr
07fd4     09 25 02 F6 | 	mov	local04, arg01
07fd8     01 24 86 F1 | 	sub	local04, #1
07fdc     12 15 02 F6 | 	mov	arg02, local04
07fe0     01 14 66 F0 | 	shl	arg02, #1
07fe4     12 15 02 F1 | 	add	arg02, local04
07fe8     02 14 66 F0 | 	shl	arg02, #2
07fec     03 00 00 FF 
07ff0     00 E4 85 F1 | 	sub	objptr, ##1536
07ff4     F2 14 02 F1 | 	add	arg02, objptr
07ff8     0A 1F 02 FB | 	rdlong	local01, arg02
07ffc     04 14 06 F1 | 	add	arg02, #4
08000     0A 27 02 FB | 	rdlong	local05, arg02
08004     01 12 86 F1 | 	sub	arg01, #1
08008     09 29 02 F6 | 	mov	local06, arg01
0800c     01 28 66 F0 | 	shl	local06, #1
08010     09 29 02 F1 | 	add	local06, arg01
08014     02 28 66 F0 | 	shl	local06, #2
08018     F2 28 02 F1 | 	add	local06, objptr
0801c     08 28 06 F1 | 	add	local06, #8
08020     14 13 02 FB | 	rdlong	arg01, local06
08024     13 21 02 F6 | 	mov	local02, local05
08028     09 23 02 F6 | 	mov	local03, arg01
0802c                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0802c                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
0802c     17 22 0E F2 | 	cmp	local03, #23 wz
08030     67 00 00 FF 
08034     60 E4 85 F1 | 	sub	objptr, ##52832
08038     10 00 90 AD |  if_e	jmp	#LR__0702
0803c     22 12 06 F6 | 	mov	arg01, #34
08040     C4 E8 BF FD | 	call	#_compile_error
08044     22 FA 05 F6 | 	mov	result1, #34
08048     64 02 90 FD | 	jmp	#LR__0707
0804c                 | LR__0702
0804c     0F 2B 02 F6 | 	mov	local07, local01
08050                 | ' varnum=t1.result.uresult
08050                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
08050     57 00 00 FF 
08054     28 E4 05 F1 | 	add	objptr, ##44584
08058     F2 24 02 FB | 	rdlong	local04, objptr
0805c     03 24 66 F0 | 	shl	local04, #3
08060     02 00 00 FF 
08064     38 E4 85 F1 | 	sub	objptr, ##1080
08068     F2 24 02 F1 | 	add	local04, objptr
0806c     12 13 02 FB | 	rdlong	arg01, local04
08070     61 01 00 FF 
08074     2B 15 06 F6 | 	mov	arg02, ##@LR__4915
08078     54 00 00 FF 
0807c     F0 E5 85 F1 | 	sub	objptr, ##43504
08080     84 47 B1 FD | 	call	#__system___string_cmp
08084     00 FA 0D F2 | 	cmp	result1, #0 wz
08088     10 00 90 AD |  if_e	jmp	#LR__0703
0808c     21 12 06 F6 | 	mov	arg01, #33
08090     74 E8 BF FD | 	call	#_compile_error
08094     21 FA 05 F6 | 	mov	result1, #33
08098     14 02 90 FD | 	jmp	#LR__0707
0809c                 | LR__0703
0809c     57 00 00 FF 
080a0     28 E4 05 F1 | 	add	objptr, ##44584
080a4     F2 24 02 FB | 	rdlong	local04, objptr
080a8     01 24 06 F1 | 	add	local04, #1
080ac     F2 24 62 FC | 	wrlong	local04, objptr
080b0     57 00 00 FF 
080b4     28 E4 85 F1 | 	sub	objptr, ##44584
080b8     9C 0C B0 FD | 	call	#_expr
080bc                 | ' ct+=1
080bc                 | ' expr()  ' there is "to" value pushed on the stack
080bc                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
080bc     57 00 00 FF 
080c0     28 E4 05 F1 | 	add	objptr, ##44584
080c4     F2 24 02 FB | 	rdlong	local04, objptr
080c8     03 24 66 F0 | 	shl	local04, #3
080cc     02 00 00 FF 
080d0     38 E4 85 F1 | 	sub	objptr, ##1080
080d4     F2 24 02 F1 | 	add	local04, objptr
080d8     12 13 02 FB | 	rdlong	arg01, local04
080dc     61 01 00 FF 
080e0     2E 15 06 F6 | 	mov	arg02, ##@LR__4916
080e4     54 00 00 FF 
080e8     F0 E5 85 F1 | 	sub	objptr, ##43504
080ec     18 47 B1 FD | 	call	#__system___string_cmp
080f0     00 FA 0D F2 | 	cmp	result1, #0 wz
080f4     3C 00 90 AD |  if_e	jmp	#LR__0704
080f8     57 00 00 FF 
080fc     28 E4 05 F1 | 	add	objptr, ##44584
08100     F2 28 02 FB | 	rdlong	local06, objptr
08104     03 28 66 F0 | 	shl	local06, #3
08108     02 00 00 FF 
0810c     38 E4 85 F1 | 	sub	objptr, ##1080
08110     F2 28 02 F1 | 	add	local06, objptr
08114     14 13 02 FB | 	rdlong	arg01, local06
08118     61 01 00 FF 
0811c     33 15 06 F6 | 	mov	arg02, ##@LR__4917
08120     54 00 00 FF 
08124     F0 E5 85 F1 | 	sub	objptr, ##43504
08128     DC 46 B1 FD | 	call	#__system___string_cmp
0812c     00 FA 0D F2 | 	cmp	result1, #0 wz
08130     24 00 90 5D |  if_ne	jmp	#LR__0705
08134                 | LR__0704
08134     57 00 00 FF 
08138     28 E4 05 F1 | 	add	objptr, ##44584
0813c     F2 28 02 FB | 	rdlong	local06, objptr
08140     01 28 06 F1 | 	add	local06, #1
08144     F2 28 62 FC | 	wrlong	local06, objptr
08148     57 00 00 FF 
0814c     28 E4 85 F1 | 	sub	objptr, ##44584
08150     04 0C B0 FD | 	call	#_expr
08154     78 00 90 FD | 	jmp	#LR__0706
08158                 | LR__0705
08158     6A 00 00 FF 
0815c     60 E4 05 F1 | 	add	objptr, ##54368
08160     F2 28 02 FB | 	rdlong	local06, objptr
08164     14 27 02 F6 | 	mov	local05, local06
08168     01 26 66 F0 | 	shl	local05, #1
0816c     14 27 02 F1 | 	add	local05, local06
08170     02 26 66 F0 | 	shl	local05, #2
08174     03 00 00 FF 
08178     00 E4 85 F1 | 	sub	objptr, ##1536
0817c     F2 26 02 F1 | 	add	local05, objptr
08180     08 26 06 F1 | 	add	local05, #8
08184     13 39 68 FC | 	wrlong	#28, local05
08188     03 00 00 FF 
0818c     00 E4 05 F1 | 	add	objptr, ##1536
08190     F2 28 02 FB | 	rdlong	local06, objptr
08194     14 27 02 F6 | 	mov	local05, local06
08198     01 26 66 F0 | 	shl	local05, #1
0819c     14 27 02 F1 | 	add	local05, local06
081a0     02 26 66 F0 | 	shl	local05, #2
081a4     03 00 00 FF 
081a8     00 E4 85 F1 | 	sub	objptr, ##1536
081ac     F2 26 02 F1 | 	add	local05, objptr
081b0     13 03 68 FC | 	wrlong	#1, local05
081b4     03 00 00 FF 
081b8     00 E4 05 F1 | 	add	objptr, ##1536
081bc     F2 28 02 FB | 	rdlong	local06, objptr
081c0     01 28 06 F1 | 	add	local06, #1
081c4     F2 28 62 FC | 	wrlong	local06, objptr
081c8     6A 00 00 FF 
081cc     60 E4 85 F1 | 	sub	objptr, ##54368
081d0                 | LR__0706
081d0     6A 00 00 FF 
081d4     60 E4 05 F1 | 	add	objptr, ##54368
081d8     F2 28 02 FB | 	rdlong	local06, objptr
081dc     14 27 02 F6 | 	mov	local05, local06
081e0     01 26 66 F0 | 	shl	local05, #1
081e4     14 27 02 F1 | 	add	local05, local06
081e8     02 26 66 F0 | 	shl	local05, #2
081ec     03 00 00 FF 
081f0     00 E4 85 F1 | 	sub	objptr, ##1536
081f4     F2 26 02 F1 | 	add	local05, objptr
081f8     08 26 06 F1 | 	add	local05, #8
081fc     13 39 68 FC | 	wrlong	#28, local05
08200     03 00 00 FF 
08204     00 E4 05 F1 | 	add	objptr, ##1536
08208     F2 28 02 FB | 	rdlong	local06, objptr
0820c     14 27 02 F6 | 	mov	local05, local06
08210     01 26 66 F0 | 	shl	local05, #1
08214     14 27 02 F1 | 	add	local05, local06
08218     02 26 66 F0 | 	shl	local05, #2
0821c     03 00 00 FF 
08220     00 E4 85 F1 | 	sub	objptr, ##1536
08224     F2 26 02 F1 | 	add	local05, objptr
08228     13 2B 62 FC | 	wrlong	local07, local05
0822c     03 00 00 FF 
08230     00 E4 05 F1 | 	add	objptr, ##1536
08234     F2 2A 02 FB | 	rdlong	local07, objptr
08238     01 2A 06 F1 | 	add	local07, #1
0823c     F2 2A 62 FC | 	wrlong	local07, objptr
08240     15 29 02 F6 | 	mov	local06, local07
08244     01 28 66 F0 | 	shl	local06, #1
08248     15 29 02 F1 | 	add	local06, local07
0824c     02 28 66 F0 | 	shl	local06, #2
08250     03 00 00 FF 
08254     00 E4 85 F1 | 	sub	objptr, ##1536
08258     F2 28 02 F1 | 	add	local06, objptr
0825c     08 28 06 F1 | 	add	local06, #8
08260     14 95 68 FC | 	wrlong	#74, local06
08264     03 00 00 FF 
08268     00 E4 05 F1 | 	add	objptr, ##1536
0826c     F2 2A 02 FB | 	rdlong	local07, objptr
08270     15 29 02 F6 | 	mov	local06, local07
08274     01 28 66 F0 | 	shl	local06, #1
08278     15 29 02 F1 | 	add	local06, local07
0827c     02 28 66 F0 | 	shl	local06, #2
08280     03 00 00 FF 
08284     00 E4 85 F1 | 	sub	objptr, ##1536
08288     F2 28 02 F1 | 	add	local06, objptr
0828c     14 01 68 FC | 	wrlong	#0, local06
08290     03 00 00 FF 
08294     00 E4 05 F1 | 	add	objptr, ##1536
08298     F2 2A 02 FB | 	rdlong	local07, objptr
0829c     01 2A 06 F1 | 	add	local07, #1
082a0     F2 2A 62 FC | 	wrlong	local07, objptr
082a4     6A 00 00 FF 
082a8     60 E4 85 F1 | 	sub	objptr, ##54368
082ac                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
082ac                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
082ac                 | ' 
082ac                 | ' 
082ac                 | ' return 0
082ac     00 FA 05 F6 | 	mov	result1, #0
082b0                 | LR__0707
082b0     A7 F0 03 F6 | 	mov	ptra, fp
082b4     B2 00 A0 FD | 	call	#popregs_
082b8                 | _compile_for_ret
082b8     2D 00 64 FD | 	ret
082bc                 | 
082bc                 | ' 
082bc                 | ' 
082bc                 | ' sub do_for()
082bc                 | _do_for
082bc     01 4A 05 F6 | 	mov	COUNT_, #1
082c0     A8 00 A0 FD | 	call	#pushregs_
082c4     10 F0 07 F1 | 	add	ptra, #16
082c8     79 00 00 FF 
082cc     BC E5 05 F1 | 	add	objptr, ##62396
082d0     F2 12 02 FB | 	rdlong	arg01, objptr
082d4     01 12 06 F1 | 	add	arg01, #1
082d8     F2 12 62 FC | 	wrlong	arg01, objptr
082dc     79 00 00 FF 
082e0     BC E5 85 F1 | 	sub	objptr, ##62396
082e4     F8 1E B0 FD | 	call	#_pop
082e8     A7 FA 61 FC | 	wrlong	result1, fp
082ec     04 4E 05 F1 | 	add	fp, #4
082f0     A7 FC 61 FC | 	wrlong	result2, fp
082f4     04 4E 05 F1 | 	add	fp, #4
082f8     A7 FE 61 FC | 	wrlong	result3, fp
082fc     08 4E 85 F1 | 	sub	fp, #8
08300     79 00 00 FF 
08304     BC E5 05 F1 | 	add	objptr, ##62396
08308     F2 12 02 FB | 	rdlong	arg01, objptr
0830c     09 1F 02 F6 | 	mov	local01, arg01
08310     02 1E 66 F0 | 	shl	local01, #2
08314     09 1F 02 F1 | 	add	local01, arg01
08318     02 1E 66 F0 | 	shl	local01, #2
0831c     07 00 00 FF 
08320     40 E5 85 F1 | 	sub	objptr, ##3904
08324     F2 1E 02 F1 | 	add	local01, objptr
08328     A7 12 02 FB | 	rdlong	arg01, fp
0832c     08 1E 06 F1 | 	add	local01, #8
08330     0F 13 62 FC | 	wrlong	arg01, local01
08334     72 00 00 FF 
08338     7C E4 85 F1 | 	sub	objptr, ##58492
0833c     A0 1E B0 FD | 	call	#_pop
08340     A7 FA 61 FC | 	wrlong	result1, fp
08344     04 4E 05 F1 | 	add	fp, #4
08348     A7 FC 61 FC | 	wrlong	result2, fp
0834c     04 4E 05 F1 | 	add	fp, #4
08350     A7 FE 61 FC | 	wrlong	result3, fp
08354     08 4E 85 F1 | 	sub	fp, #8
08358     79 00 00 FF 
0835c     BC E5 05 F1 | 	add	objptr, ##62396
08360     F2 12 02 FB | 	rdlong	arg01, objptr
08364     09 1F 02 F6 | 	mov	local01, arg01
08368     02 1E 66 F0 | 	shl	local01, #2
0836c     09 1F 02 F1 | 	add	local01, arg01
08370     02 1E 66 F0 | 	shl	local01, #2
08374     07 00 00 FF 
08378     40 E5 85 F1 | 	sub	objptr, ##3904
0837c     F2 1E 02 F1 | 	add	local01, objptr
08380     A7 12 02 F6 | 	mov	arg01, fp
08384     72 00 00 FF 
08388     7C E4 85 F1 | 	sub	objptr, ##58492
0838c     8C AA B0 FD | 	call	#_converttoint
08390     FD 12 02 F6 | 	mov	arg01, result1
08394     0C 1E 06 F1 | 	add	local01, #12
08398     0F 13 62 FC | 	wrlong	arg01, local01
0839c     40 1E B0 FD | 	call	#_pop
083a0     A7 FA 61 FC | 	wrlong	result1, fp
083a4     04 4E 05 F1 | 	add	fp, #4
083a8     A7 FC 61 FC | 	wrlong	result2, fp
083ac     04 4E 05 F1 | 	add	fp, #4
083b0     A7 FE 61 FC | 	wrlong	result3, fp
083b4     08 4E 85 F1 | 	sub	fp, #8
083b8     79 00 00 FF 
083bc     BC E5 05 F1 | 	add	objptr, ##62396
083c0     F2 12 02 FB | 	rdlong	arg01, objptr
083c4     09 1F 02 F6 | 	mov	local01, arg01
083c8     02 1E 66 F0 | 	shl	local01, #2
083cc     09 1F 02 F1 | 	add	local01, arg01
083d0     02 1E 66 F0 | 	shl	local01, #2
083d4     07 00 00 FF 
083d8     40 E5 85 F1 | 	sub	objptr, ##3904
083dc     F2 1E 02 F1 | 	add	local01, objptr
083e0     A7 12 02 F6 | 	mov	arg01, fp
083e4     72 00 00 FF 
083e8     7C E4 85 F1 | 	sub	objptr, ##58492
083ec     2C AA B0 FD | 	call	#_converttoint
083f0     10 1E 06 F1 | 	add	local01, #16
083f4     0F FB 61 FC | 	wrlong	result1, local01
083f8                 | ' fortop+=1
083f8                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
083f8                 | ' 'if i> maxfor then printerror(36) : return
083f8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
083f8                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
083f8                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
083f8                 | ' if compiledline(lineptr_e).result_type=token_end then
083f8     6A 00 00 FF 
083fc     64 E4 05 F1 | 	add	objptr, ##54372
08400     F2 12 02 FB | 	rdlong	arg01, objptr
08404     09 1F 02 F6 | 	mov	local01, arg01
08408     01 1E 66 F0 | 	shl	local01, #1
0840c     09 1F 02 F1 | 	add	local01, arg01
08410     02 1E 66 F0 | 	shl	local01, #2
08414     03 00 00 FF 
08418     04 E4 85 F1 | 	sub	objptr, ##1540
0841c     F2 1E 02 F1 | 	add	local01, objptr
08420     08 1E 06 F1 | 	add	local01, #8
08424     0F 1F 02 FB | 	rdlong	local01, local01
08428     FE 1F 0E F2 | 	cmp	local01, #510 wz
0842c     67 00 00 FF 
08430     60 E4 85 F1 | 	sub	objptr, ##52832
08434     70 00 90 5D |  if_ne	jmp	#LR__0710
08438     79 00 00 FF 
0843c     BC E5 05 F1 | 	add	objptr, ##62396
08440     F2 12 02 FB | 	rdlong	arg01, objptr
08444     09 1F 02 F6 | 	mov	local01, arg01
08448     02 1E 66 F0 | 	shl	local01, #2
0844c     09 1F 02 F1 | 	add	local01, arg01
08450     02 1E 66 F0 | 	shl	local01, #2
08454     07 00 00 FF 
08458     40 E5 85 F1 | 	sub	objptr, ##3904
0845c     F2 1E 02 F1 | 	add	local01, objptr
08460     07 00 00 FF 
08464     18 E5 05 F1 | 	add	objptr, ##3864
08468     F2 12 02 FB | 	rdlong	arg01, objptr
0846c     0F 13 62 FC | 	wrlong	arg01, local01
08470     28 E4 05 F1 | 	add	objptr, #40
08474     F2 12 02 FB | 	rdlong	arg01, objptr
08478     09 1F 02 F6 | 	mov	local01, arg01
0847c     02 1E 66 F0 | 	shl	local01, #2
08480     09 1F 02 F1 | 	add	local01, arg01
08484     02 1E 66 F0 | 	shl	local01, #2
08488     07 00 00 FF 
0848c     40 E5 85 F1 | 	sub	objptr, ##3904
08490     F2 1E 02 F1 | 	add	local01, objptr
08494     04 1E 06 F1 | 	add	local01, #4
08498     0F 01 68 FC | 	wrlong	#0, local01
0849c     72 00 00 FF 
084a0     7C E4 85 F1 | 	sub	objptr, ##58492
084a4     7C 00 90 FD | 	jmp	#LR__0711
084a8                 | LR__0710
084a8     79 00 00 FF 
084ac     BC E5 05 F1 | 	add	objptr, ##62396
084b0     F2 12 02 FB | 	rdlong	arg01, objptr
084b4     09 1F 02 F6 | 	mov	local01, arg01
084b8     02 1E 66 F0 | 	shl	local01, #2
084bc     09 1F 02 F1 | 	add	local01, arg01
084c0     02 1E 66 F0 | 	shl	local01, #2
084c4     07 00 00 FF 
084c8     40 E5 85 F1 | 	sub	objptr, ##3904
084cc     F2 1E 02 F1 | 	add	local01, objptr
084d0     07 00 00 FF 
084d4     20 E5 05 F1 | 	add	objptr, ##3872
084d8     F2 12 02 FB | 	rdlong	arg01, objptr
084dc     0F 13 62 FC | 	wrlong	arg01, local01
084e0     20 E4 05 F1 | 	add	objptr, #32
084e4     F2 12 02 FB | 	rdlong	arg01, objptr
084e8     09 1F 02 F6 | 	mov	local01, arg01
084ec     02 1E 66 F0 | 	shl	local01, #2
084f0     09 1F 02 F1 | 	add	local01, arg01
084f4     02 1E 66 F0 | 	shl	local01, #2
084f8     07 00 00 FF 
084fc     40 E5 85 F1 | 	sub	objptr, ##3904
08500     F2 1E 02 F1 | 	add	local01, objptr
08504     08 00 00 FF 
08508     18 E4 85 F1 | 	sub	objptr, ##4120
0850c     F2 12 02 FB | 	rdlong	arg01, objptr
08510     6A 00 00 FF 
08514     64 E4 85 F1 | 	sub	objptr, ##54372
08518     01 12 06 F1 | 	add	arg01, #1
0851c     04 1E 06 F1 | 	add	local01, #4
08520     0F 13 62 FC | 	wrlong	arg01, local01
08524                 | LR__0711
08524     A7 F0 03 F6 | 	mov	ptra, fp
08528     B2 00 A0 FD | 	call	#popregs_
0852c                 | _do_for_ret
0852c     2D 00 64 FD | 	ret
08530                 | 
08530                 | ' 
08530                 | ' ' now do_next todo
08530                 | ' 
08530                 | ' sub do_next()
08530                 | _do_next
08530     04 4A 05 F6 | 	mov	COUNT_, #4
08534     A8 00 A0 FD | 	call	#pushregs_
08538     A4 1C B0 FD | 	call	#_pop
0853c     FD 1E 02 F6 | 	mov	local01, result1
08540     FE 20 02 F6 | 	mov	local02, result2
08544     FF 22 02 F6 | 	mov	local03, result3
08548                 | ' 
08548                 | ' t1=pop() :varnum=t1.result.uresult
08548                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08548     79 00 00 FF 
0854c     BC E5 05 F1 | 	add	objptr, ##62396
08550     F2 12 02 FB | 	rdlong	arg01, objptr
08554     09 15 02 F6 | 	mov	arg02, arg01
08558     02 14 66 F0 | 	shl	arg02, #2
0855c     09 15 02 F1 | 	add	arg02, arg01
08560     02 14 66 F0 | 	shl	arg02, #2
08564     07 00 00 FF 
08568     40 E5 85 F1 | 	sub	objptr, ##3904
0856c     F2 14 02 F1 | 	add	arg02, objptr
08570     08 14 06 F1 | 	add	arg02, #8
08574     0A 15 02 FB | 	rdlong	arg02, arg02
08578     0F 15 0A F2 | 	cmp	arg02, local01 wz
0857c     72 00 00 FF 
08580     7C E4 85 F1 | 	sub	objptr, ##58492
08584     0C 00 90 AD |  if_e	jmp	#LR__0720
08588     25 12 06 F6 | 	mov	arg01, #37
0858c     68 0A B1 FD | 	call	#_printerror
08590     A8 02 90 FD | 	jmp	#LR__0725
08594                 | LR__0720
08594                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
08594     0F 15 02 F6 | 	mov	arg02, local01
08598     04 14 66 F0 | 	shl	arg02, #4
0859c     34 00 00 FF 
085a0     EC E5 05 F1 | 	add	objptr, ##27116
085a4     F2 14 02 F1 | 	add	arg02, objptr
085a8     0C 14 06 F1 | 	add	arg02, #12
085ac     0A 15 02 FB | 	rdlong	arg02, arg02
085b0     1E 14 0E F2 | 	cmp	arg02, #30 wz
085b4     34 00 00 FF 
085b8     EC E5 85 F1 | 	sub	objptr, ##27116
085bc     54 00 90 5D |  if_ne	jmp	#LR__0721
085c0     0F 15 02 F6 | 	mov	arg02, local01
085c4     04 14 66 F0 | 	shl	arg02, #4
085c8     34 00 00 FF 
085cc     EC E5 05 F1 | 	add	objptr, ##27116
085d0     F2 14 02 F1 | 	add	arg02, objptr
085d4     0C 14 06 F1 | 	add	arg02, #12
085d8     0A 39 68 FC | 	wrlong	#28, arg02
085dc     0F 25 02 F6 | 	mov	local04, local01
085e0     04 24 66 F0 | 	shl	local04, #4
085e4     F2 24 02 F1 | 	add	local04, objptr
085e8     0F 13 02 F6 | 	mov	arg01, local01
085ec     04 12 66 F0 | 	shl	arg01, #4
085f0     F2 12 02 F1 | 	add	arg01, objptr
085f4     04 12 06 F1 | 	add	arg01, #4
085f8     09 13 02 FB | 	rdlong	arg01, arg01
085fc     34 00 00 FF 
08600     EC E5 85 F1 | 	sub	objptr, ##27116
08604     01 14 06 F6 | 	mov	arg02, #1
08608     18 72 B1 FD | 	call	#__system___float_tointeger
0860c     04 24 06 F1 | 	add	local04, #4
08610     12 FB 61 FC | 	wrlong	result1, local04
08614                 | LR__0721
08614     79 00 00 FF 
08618     BC E5 05 F1 | 	add	objptr, ##62396
0861c     F2 12 02 FB | 	rdlong	arg01, objptr
08620     09 25 02 F6 | 	mov	local04, arg01
08624     02 24 66 F0 | 	shl	local04, #2
08628     09 25 02 F1 | 	add	local04, arg01
0862c     02 24 66 F0 | 	shl	local04, #2
08630     07 00 00 FF 
08634     40 E5 85 F1 | 	sub	objptr, ##3904
08638     F2 24 02 F1 | 	add	local04, objptr
0863c     0C 24 06 F1 | 	add	local04, #12
08640     12 25 02 FB | 	rdlong	local04, local04
08644     0F 13 02 F6 | 	mov	arg01, local01
08648     04 12 66 F0 | 	shl	arg01, #4
0864c     3D 00 00 FF 
08650     90 E4 85 F1 | 	sub	objptr, ##31376
08654     F2 12 02 F1 | 	add	arg01, objptr
08658     0F FF 01 F6 | 	mov	result3, local01
0865c     04 FE 65 F0 | 	shl	result3, #4
08660     F2 FE 01 F1 | 	add	result3, objptr
08664     04 FE 05 F1 | 	add	result3, #4
08668     FF FE 01 FB | 	rdlong	result3, result3
0866c     12 FF 01 F1 | 	add	result3, local04
08670     04 12 06 F1 | 	add	arg01, #4
08674     09 FF 61 FC | 	wrlong	result3, arg01
08678                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08678                 | ' if fortable(fortop).stepval>=0 then
08678     44 00 00 FF 
0867c     D0 E5 05 F1 | 	add	objptr, ##35280
08680     F2 12 02 FB | 	rdlong	arg01, objptr
08684     09 25 02 F6 | 	mov	local04, arg01
08688     02 24 66 F0 | 	shl	local04, #2
0868c     09 25 02 F1 | 	add	local04, arg01
08690     02 24 66 F0 | 	shl	local04, #2
08694     07 00 00 FF 
08698     40 E5 85 F1 | 	sub	objptr, ##3904
0869c     F2 24 02 F1 | 	add	local04, objptr
086a0     0C 24 06 F1 | 	add	local04, #12
086a4     12 25 02 FB | 	rdlong	local04, local04
086a8     00 24 56 F2 | 	cmps	local04, #0 wc
086ac     72 00 00 FF 
086b0     7C E4 85 F1 | 	sub	objptr, ##58492
086b4     78 00 90 CD |  if_b	jmp	#LR__0722
086b8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
086b8     04 1E 66 F0 | 	shl	local01, #4
086bc     34 00 00 FF 
086c0     EC E5 05 F1 | 	add	objptr, ##27116
086c4     F2 1E 02 F1 | 	add	local01, objptr
086c8     44 00 00 FF 
086cc     D0 E5 05 F1 | 	add	objptr, ##35280
086d0     F2 24 02 FB | 	rdlong	local04, objptr
086d4     12 13 02 F6 | 	mov	arg01, local04
086d8     02 12 66 F0 | 	shl	arg01, #2
086dc     12 13 02 F1 | 	add	arg01, local04
086e0     02 12 66 F0 | 	shl	arg01, #2
086e4     07 00 00 FF 
086e8     40 E5 85 F1 | 	sub	objptr, ##3904
086ec     F2 12 02 F1 | 	add	arg01, objptr
086f0     04 1E 06 F1 | 	add	local01, #4
086f4     0F 25 02 FB | 	rdlong	local04, local01
086f8     10 12 06 F1 | 	add	arg01, #16
086fc     09 13 02 FB | 	rdlong	arg01, arg01
08700     09 25 5A F2 | 	cmps	local04, arg01 wcz
08704     72 00 00 FF 
08708     7C E4 85 F1 | 	sub	objptr, ##58492
0870c     9C 00 90 ED |  if_be	jmp	#LR__0724
08710     79 00 00 FF 
08714     BC E5 05 F1 | 	add	objptr, ##62396
08718     F2 24 02 FB | 	rdlong	local04, objptr
0871c     01 24 86 F1 | 	sub	local04, #1
08720     F2 24 62 FC | 	wrlong	local04, objptr
08724     79 00 00 FF 
08728     BC E5 85 F1 | 	sub	objptr, ##62396
0872c     0C 01 90 FD | 	jmp	#LR__0725
08730                 | LR__0722
08730                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08730     0F 13 02 F6 | 	mov	arg01, local01
08734     04 12 66 F0 | 	shl	arg01, #4
08738     34 00 00 FF 
0873c     EC E5 05 F1 | 	add	objptr, ##27116
08740     F2 12 02 F1 | 	add	arg01, objptr
08744     44 00 00 FF 
08748     D0 E5 05 F1 | 	add	objptr, ##35280
0874c     F2 24 02 FB | 	rdlong	local04, objptr
08750     12 1F 02 F6 | 	mov	local01, local04
08754     02 1E 66 F0 | 	shl	local01, #2
08758     12 1F 02 F1 | 	add	local01, local04
0875c     02 1E 66 F0 | 	shl	local01, #2
08760     07 00 00 FF 
08764     40 E5 85 F1 | 	sub	objptr, ##3904
08768     F2 1E 02 F1 | 	add	local01, objptr
0876c     04 12 06 F1 | 	add	arg01, #4
08770     09 13 02 FB | 	rdlong	arg01, arg01
08774     10 1E 06 F1 | 	add	local01, #16
08778     0F 1F 02 FB | 	rdlong	local01, local01
0877c     0F 13 52 F2 | 	cmps	arg01, local01 wc
08780     72 00 00 FF 
08784     7C E4 85 F1 | 	sub	objptr, ##58492
08788     20 00 90 3D |  if_ae	jmp	#LR__0723
0878c     79 00 00 FF 
08790     BC E5 05 F1 | 	add	objptr, ##62396
08794     F2 24 02 FB | 	rdlong	local04, objptr
08798     01 24 86 F1 | 	sub	local04, #1
0879c     F2 24 62 FC | 	wrlong	local04, objptr
087a0     79 00 00 FF 
087a4     BC E5 85 F1 | 	sub	objptr, ##62396
087a8     90 00 90 FD | 	jmp	#LR__0725
087ac                 | LR__0723
087ac                 | LR__0724
087ac     79 00 00 FF 
087b0     BC E5 05 F1 | 	add	objptr, ##62396
087b4     F2 1E 02 FB | 	rdlong	local01, objptr
087b8     0F 25 02 F6 | 	mov	local04, local01
087bc     02 24 66 F0 | 	shl	local04, #2
087c0     0F 25 02 F1 | 	add	local04, local01
087c4     02 24 66 F0 | 	shl	local04, #2
087c8     07 00 00 FF 
087cc     40 E5 85 F1 | 	sub	objptr, ##3904
087d0     F2 24 02 F1 | 	add	local04, objptr
087d4     12 25 02 FB | 	rdlong	local04, local04
087d8     07 00 00 FF 
087dc     18 E5 05 F1 | 	add	objptr, ##3864
087e0     F2 24 62 FC | 	wrlong	local04, objptr
087e4     28 E4 05 F1 | 	add	objptr, #40
087e8     F2 1E 02 FB | 	rdlong	local01, objptr
087ec     0F 25 02 F6 | 	mov	local04, local01
087f0     02 24 66 F0 | 	shl	local04, #2
087f4     0F 25 02 F1 | 	add	local04, local01
087f8     02 24 66 F0 | 	shl	local04, #2
087fc     07 00 00 FF 
08800     40 E5 85 F1 | 	sub	objptr, ##3904
08804     F2 24 02 F1 | 	add	local04, objptr
08808     04 24 06 F1 | 	add	local04, #4
0880c     12 25 02 FB | 	rdlong	local04, local04
08810     07 00 00 FF 
08814     1C E5 05 F1 | 	add	objptr, ##3868
08818     F2 24 62 FC | 	wrlong	local04, objptr
0881c     0F 00 00 FF 
08820     38 E5 85 F1 | 	sub	objptr, ##7992
08824     F2 24 02 FB | 	rdlong	local04, objptr
08828     01 24 86 F1 | 	sub	local04, #1
0882c     04 E4 05 F1 | 	add	objptr, #4
08830     F2 24 62 FC | 	wrlong	local04, objptr
08834     6A 00 00 FF 
08838     64 E4 85 F1 | 	sub	objptr, ##54372
0883c                 | LR__0725
0883c     A7 F0 03 F6 | 	mov	ptra, fp
08840     B2 00 A0 FD | 	call	#popregs_
08844                 | _do_next_ret
08844     2D 00 64 FD | 	ret
08848                 | 
08848                 | ' 
08848                 | ' 
08848                 | ' function compile_next() as ulong
08848                 | _compile_next
08848     04 4A 05 F6 | 	mov	COUNT_, #4
0884c     A8 00 A0 FD | 	call	#pushregs_
08850     57 00 00 FF 
08854     28 E4 05 F1 | 	add	objptr, ##44584
08858     F2 12 02 FB | 	rdlong	arg01, objptr
0885c     03 12 66 F0 | 	shl	arg01, #3
08860     02 00 00 FF 
08864     38 E4 85 F1 | 	sub	objptr, ##1080
08868     F2 12 02 F1 | 	add	arg01, objptr
0886c     09 1F 02 FB | 	rdlong	local01, arg01
08870                 | ' 
08870                 | ' varname$=lparts(ct).part$ 
08870                 | ' 'suffix$=right$(varname$,1)
08870                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08870                 | ' if varnum=0 then compile_error(35)  : return 35
08870     04 E4 85 F1 | 	sub	objptr, #4
08874     F2 14 0A FB | 	rdlong	arg02, objptr wz
08878     54 00 00 FF 
0887c     EC E5 85 F1 | 	sub	objptr, ##43500
08880     10 00 90 5D |  if_ne	jmp	#LR__0730
08884     23 12 06 F6 | 	mov	arg01, #35
08888     7C E0 BF FD | 	call	#_compile_error
0888c     23 FA 05 F6 | 	mov	result1, #35
08890     58 01 90 FD | 	jmp	#LR__0734
08894                 | LR__0730
08894     01 20 66 F6 | 	neg	local02, #1
08898                 | ' j=-1
08898                 | ' for i=0 to varnum-1
08898     00 22 06 F6 | 	mov	local03, #0
0889c     54 00 00 FF 
088a0     EC E5 05 F1 | 	add	objptr, ##43500
088a4     F2 24 02 FB | 	rdlong	local04, objptr
088a8     54 00 00 FF 
088ac     EC E5 85 F1 | 	sub	objptr, ##43500
088b0                 | LR__0731
088b0     12 23 12 F2 | 	cmp	local03, local04 wc
088b4     38 00 90 3D |  if_ae	jmp	#LR__0732
088b8                 | '   if variables(i).name=varname$ then j=i : exit
088b8     11 15 02 F6 | 	mov	arg02, local03
088bc     04 14 66 F0 | 	shl	arg02, #4
088c0     34 00 00 FF 
088c4     EC E5 05 F1 | 	add	objptr, ##27116
088c8     F2 14 02 F1 | 	add	arg02, objptr
088cc     0A 13 02 FB | 	rdlong	arg01, arg02
088d0     0F 15 02 F6 | 	mov	arg02, local01
088d4     34 00 00 FF 
088d8     EC E5 85 F1 | 	sub	objptr, ##27116
088dc     28 3F B1 FD | 	call	#__system___string_cmp
088e0     00 FA 0D F2 | 	cmp	result1, #0 wz
088e4     11 21 02 A6 |  if_e	mov	local02, local03
088e8     01 22 06 51 |  if_ne	add	local03, #1
088ec     C0 FF 9F 5D |  if_ne	jmp	#LR__0731
088f0                 | LR__0732
088f0                 | ' if j=-1 then compile_error(35) : return 35
088f0     FF FF 7F FF 
088f4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
088f8     10 00 90 5D |  if_ne	jmp	#LR__0733
088fc     23 12 06 F6 | 	mov	arg01, #35
08900     04 E0 BF FD | 	call	#_compile_error
08904     23 FA 05 F6 | 	mov	result1, #35
08908     E0 00 90 FD | 	jmp	#LR__0734
0890c                 | LR__0733
0890c     6A 00 00 FF 
08910     60 E4 05 F1 | 	add	objptr, ##54368
08914     F2 24 02 FB | 	rdlong	local04, objptr
08918     12 23 02 F6 | 	mov	local03, local04
0891c     01 22 66 F0 | 	shl	local03, #1
08920     12 23 02 F1 | 	add	local03, local04
08924     02 22 66 F0 | 	shl	local03, #2
08928     03 00 00 FF 
0892c     00 E4 85 F1 | 	sub	objptr, ##1536
08930     F2 22 02 F1 | 	add	local03, objptr
08934     08 22 06 F1 | 	add	local03, #8
08938     11 39 68 FC | 	wrlong	#28, local03
0893c     03 00 00 FF 
08940     00 E4 05 F1 | 	add	objptr, ##1536
08944     F2 24 02 FB | 	rdlong	local04, objptr
08948     12 23 02 F6 | 	mov	local03, local04
0894c     01 22 66 F0 | 	shl	local03, #1
08950     12 23 02 F1 | 	add	local03, local04
08954     02 22 66 F0 | 	shl	local03, #2
08958     03 00 00 FF 
0895c     00 E4 85 F1 | 	sub	objptr, ##1536
08960     F2 22 02 F1 | 	add	local03, objptr
08964     11 21 62 FC | 	wrlong	local02, local03
08968     03 00 00 FF 
0896c     00 E4 05 F1 | 	add	objptr, ##1536
08970     F2 24 02 FB | 	rdlong	local04, objptr
08974     01 24 06 F1 | 	add	local04, #1
08978     F2 24 62 FC | 	wrlong	local04, objptr
0897c     12 23 02 F6 | 	mov	local03, local04
08980     01 22 66 F0 | 	shl	local03, #1
08984     12 23 02 F1 | 	add	local03, local04
08988     02 22 66 F0 | 	shl	local03, #2
0898c     03 00 00 FF 
08990     00 E4 85 F1 | 	sub	objptr, ##1536
08994     F2 22 02 F1 | 	add	local03, objptr
08998     08 22 06 F1 | 	add	local03, #8
0899c     11 97 68 FC | 	wrlong	#75, local03
089a0     03 00 00 FF 
089a4     00 E4 05 F1 | 	add	objptr, ##1536
089a8     F2 24 02 FB | 	rdlong	local04, objptr
089ac     12 23 02 F6 | 	mov	local03, local04
089b0     01 22 66 F0 | 	shl	local03, #1
089b4     12 23 02 F1 | 	add	local03, local04
089b8     02 22 66 F0 | 	shl	local03, #2
089bc     03 00 00 FF 
089c0     00 E4 85 F1 | 	sub	objptr, ##1536
089c4     F2 22 02 F1 | 	add	local03, objptr
089c8     11 01 68 FC | 	wrlong	#0, local03
089cc     03 00 00 FF 
089d0     00 E4 05 F1 | 	add	objptr, ##1536
089d4     F2 24 02 FB | 	rdlong	local04, objptr
089d8     01 24 06 F1 | 	add	local04, #1
089dc     F2 24 62 FC | 	wrlong	local04, objptr
089e0     6A 00 00 FF 
089e4     60 E4 85 F1 | 	sub	objptr, ##54368
089e8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
089e8                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
089e8                 | ' return 0
089e8     00 FA 05 F6 | 	mov	result1, #0
089ec                 | LR__0734
089ec     A7 F0 03 F6 | 	mov	ptra, fp
089f0     B2 00 A0 FD | 	call	#popregs_
089f4                 | _compile_next_ret
089f4     2D 00 64 FD | 	ret
089f8                 | 
089f8                 | ' 
089f8                 | ' 
089f8                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
089f8                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
089f8                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
089f8                 | ' 
089f8                 | ' 
089f8                 | ' function compile_goto( ) as ulong
089f8                 | _compile_goto
089f8     03 4A 05 F6 | 	mov	COUNT_, #3
089fc     A8 00 A0 FD | 	call	#pushregs_
08a00     28 F0 07 F1 | 	add	ptra, #40
08a04                 | ' 
08a04                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
08a04     57 00 00 FF 
08a08     28 E4 05 F1 | 	add	objptr, ##44584
08a0c     F2 16 02 FB | 	rdlong	arg03, objptr
08a10     03 16 66 F0 | 	shl	arg03, #3
08a14     02 00 00 FF 
08a18     38 E4 85 F1 | 	sub	objptr, ##1080
08a1c     F2 16 02 F1 | 	add	arg03, objptr
08a20     04 16 06 F1 | 	add	arg03, #4
08a24     0B 17 02 FB | 	rdlong	arg03, arg03
08a28     01 00 00 FF 
08a2c     00 16 0E F2 | 	cmp	arg03, ##512 wz
08a30     54 00 00 FF 
08a34     F0 E5 85 F1 | 	sub	objptr, ##43504
08a38     CC 02 90 5D |  if_ne	jmp	#LR__0745
08a3c     57 00 00 FF 
08a40     28 E4 05 F1 | 	add	objptr, ##44584
08a44     F2 16 02 FB | 	rdlong	arg03, objptr
08a48     01 16 06 F1 | 	add	arg03, #1
08a4c     03 16 66 F0 | 	shl	arg03, #3
08a50     02 00 00 FF 
08a54     38 E4 85 F1 | 	sub	objptr, ##1080
08a58     F2 16 02 F1 | 	add	arg03, objptr
08a5c     04 16 06 F1 | 	add	arg03, #4
08a60     0B 17 02 FB | 	rdlong	arg03, arg03
08a64     FE 17 0E F2 | 	cmp	arg03, #510 wz
08a68     54 00 00 FF 
08a6c     F0 E5 85 F1 | 	sub	objptr, ##43504
08a70     94 02 90 5D |  if_ne	jmp	#LR__0745
08a74     57 00 00 FF 
08a78     28 E4 05 F1 | 	add	objptr, ##44584
08a7c     F2 16 02 FB | 	rdlong	arg03, objptr
08a80     03 16 66 F0 | 	shl	arg03, #3
08a84     02 00 00 FF 
08a88     38 E4 85 F1 | 	sub	objptr, ##1080
08a8c     F2 16 02 F1 | 	add	arg03, objptr
08a90     0B 13 02 FB | 	rdlong	arg01, arg03
08a94     00 14 06 F6 | 	mov	arg02, #0
08a98     54 00 00 FF 
08a9c     F0 E5 85 F1 | 	sub	objptr, ##43504
08aa0     30 6F B1 FD | 	call	#__system____builtin_atoi
08aa4     04 4E 05 F1 | 	add	fp, #4
08aa8     A7 FA 61 FC | 	wrlong	result1, fp
08aac     6A 00 00 FF 
08ab0     60 E4 05 F1 | 	add	objptr, ##54368
08ab4     F2 1E 02 FB | 	rdlong	local01, objptr
08ab8     0F 21 02 F6 | 	mov	local02, local01
08abc     01 20 66 F0 | 	shl	local02, #1
08ac0     0F 21 02 F1 | 	add	local02, local01
08ac4     02 20 66 F0 | 	shl	local02, #2
08ac8     03 00 00 FF 
08acc     00 E4 85 F1 | 	sub	objptr, ##1536
08ad0     F2 20 02 F1 | 	add	local02, objptr
08ad4     08 20 06 F1 | 	add	local02, #8
08ad8     10 9D 68 FC | 	wrlong	#78, local02
08adc     03 00 00 FF 
08ae0     08 E4 05 F1 | 	add	objptr, ##1544
08ae4     F2 22 02 FB | 	rdlong	local03, objptr
08ae8     6A 00 00 FF 
08aec     68 E4 85 F1 | 	sub	objptr, ##54376
08af0     04 4E 05 F1 | 	add	fp, #4
08af4     A7 22 62 FC | 	wrlong	local03, fp
08af8     08 4E 85 F1 | 	sub	fp, #8
08afc                 | ' 
08afc                 | '   gotoline=val%(lparts(ct).part$) 
08afc                 | '   compiledline(lineptr).result_type=token_fast_goto
08afc                 | ' ' now find a pointer to goto
08afc                 | '   gotoptr=programstart
08afc                 | '   do
08afc                 | LR__0740
08afc     10 4E 05 F1 | 	add	fp, #16
08b00     A7 12 02 F6 | 	mov	arg01, fp
08b04     08 4E 85 F1 | 	sub	fp, #8
08b08     A7 14 02 FB | 	rdlong	arg02, fp
08b0c     08 4E 85 F1 | 	sub	fp, #8
08b10     18 16 06 F6 | 	mov	arg03, #24
08b14     0B 00 00 FF 
08b18     C0 E4 05 F1 | 	add	objptr, ##5824
08b1c     BC 30 B1 FD | 	call	#_psram_spin2_read1
08b20     0B 00 00 FF 
08b24     C0 E4 85 F1 | 	sub	objptr, ##5824
08b28                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08b28                 | '     if gotoheader(0)<>$FFFFFFFF then
08b28     10 4E 05 F1 | 	add	fp, #16
08b2c     A7 22 02 FB | 	rdlong	local03, fp
08b30     10 4E 85 F1 | 	sub	fp, #16
08b34     FF FF 7F FF 
08b38     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08b3c     24 00 90 AD |  if_e	jmp	#LR__0741
08b40     08 4E 05 F1 | 	add	fp, #8
08b44     A7 22 02 FB | 	rdlong	local03, fp
08b48     04 4E 05 F1 | 	add	fp, #4
08b4c     A7 22 62 FC | 	wrlong	local03, fp
08b50     18 4E 05 F1 | 	add	fp, #24
08b54     A7 22 02 FB | 	rdlong	local03, fp
08b58     1C 4E 85 F1 | 	sub	fp, #28
08b5c     A7 22 62 FC | 	wrlong	local03, fp
08b60     08 4E 85 F1 | 	sub	fp, #8
08b64                 | LR__0741
08b64     24 4E 05 F1 | 	add	fp, #36
08b68     A7 22 02 FB | 	rdlong	local03, fp
08b6c     24 4E 85 F1 | 	sub	fp, #36
08b70     FF FF 3F FF 
08b74     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08b78     10 4E 05 51 |  if_ne	add	fp, #16
08b7c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08b80     10 4E 85 51 |  if_ne	sub	fp, #16
08b84     FF FF 7F 5F 
08b88     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08b8c     1C 00 90 AD |  if_e	jmp	#LR__0742
08b90     10 4E 05 F1 | 	add	fp, #16
08b94     A7 22 02 FB | 	rdlong	local03, fp
08b98     0C 4E 85 F1 | 	sub	fp, #12
08b9c     A7 20 02 FB | 	rdlong	local02, fp
08ba0     04 4E 85 F1 | 	sub	fp, #4
08ba4     10 23 0A F2 | 	cmp	local03, local02 wz
08ba8     50 FF 9F 5D |  if_ne	jmp	#LR__0740
08bac                 | LR__0742
08bac                 | '   if gotoheader(0)=gotoline then
08bac     10 4E 05 F1 | 	add	fp, #16
08bb0     A7 22 02 FB | 	rdlong	local03, fp
08bb4     0C 4E 85 F1 | 	sub	fp, #12
08bb8     A7 1E 02 FB | 	rdlong	local01, fp
08bbc     04 4E 85 F1 | 	sub	fp, #4
08bc0     0F 23 0A F2 | 	cmp	local03, local01 wz
08bc4     7C 00 90 5D |  if_ne	jmp	#LR__0743
08bc8     6A 00 00 FF 
08bcc     60 E4 05 F1 | 	add	objptr, ##54368
08bd0     F2 1E 02 FB | 	rdlong	local01, objptr
08bd4     0F 21 02 F6 | 	mov	local02, local01
08bd8     01 20 66 F0 | 	shl	local02, #1
08bdc     0F 21 02 F1 | 	add	local02, local01
08be0     02 20 66 F0 | 	shl	local02, #2
08be4     03 00 00 FF 
08be8     00 E4 85 F1 | 	sub	objptr, ##1536
08bec     F2 20 02 F1 | 	add	local02, objptr
08bf0     0C 4E 05 F1 | 	add	fp, #12
08bf4     A7 22 02 FB | 	rdlong	local03, fp
08bf8     10 23 62 FC | 	wrlong	local03, local02
08bfc     03 00 00 FF 
08c00     00 E4 05 F1 | 	add	objptr, ##1536
08c04     F2 1E 02 FB | 	rdlong	local01, objptr
08c08     0F 21 02 F6 | 	mov	local02, local01
08c0c     01 20 66 F0 | 	shl	local02, #1
08c10     0F 21 02 F1 | 	add	local02, local01
08c14     02 20 66 F0 | 	shl	local02, #2
08c18     03 00 00 FF 
08c1c     00 E4 85 F1 | 	sub	objptr, ##1536
08c20     F2 20 02 F1 | 	add	local02, objptr
08c24     08 4E 85 F1 | 	sub	fp, #8
08c28     A7 22 02 FB | 	rdlong	local03, fp
08c2c     04 4E 85 F1 | 	sub	fp, #4
08c30     04 20 06 F1 | 	add	local02, #4
08c34     10 23 62 FC | 	wrlong	local03, local02
08c38     67 00 00 FF 
08c3c     60 E4 85 F1 | 	sub	objptr, ##52832
08c40     A4 00 90 FD | 	jmp	#LR__0744
08c44                 | LR__0743
08c44     6A 00 00 FF 
08c48     60 E4 05 F1 | 	add	objptr, ##54368
08c4c     F2 1E 02 FB | 	rdlong	local01, objptr
08c50     0F 21 02 F6 | 	mov	local02, local01
08c54     01 20 66 F0 | 	shl	local02, #1
08c58     0F 21 02 F1 | 	add	local02, local01
08c5c     02 20 66 F0 | 	shl	local02, #2
08c60     03 00 00 FF 
08c64     00 E4 85 F1 | 	sub	objptr, ##1536
08c68     F2 20 02 F1 | 	add	local02, objptr
08c6c     00 00 C0 FF 
08c70     10 01 68 FC | 	wrlong	##-2147483648, local02
08c74     03 00 00 FF 
08c78     00 E4 05 F1 | 	add	objptr, ##1536
08c7c     F2 1E 02 FB | 	rdlong	local01, objptr
08c80     0F 21 02 F6 | 	mov	local02, local01
08c84     01 20 66 F0 | 	shl	local02, #1
08c88     0F 21 02 F1 | 	add	local02, local01
08c8c     02 20 66 F0 | 	shl	local02, #2
08c90     03 00 00 FF 
08c94     00 E4 85 F1 | 	sub	objptr, ##1536
08c98     F2 20 02 F1 | 	add	local02, objptr
08c9c     04 4E 05 F1 | 	add	fp, #4
08ca0     A7 22 02 FB | 	rdlong	local03, fp
08ca4     04 4E 85 F1 | 	sub	fp, #4
08ca8     04 20 06 F1 | 	add	local02, #4
08cac     10 23 62 FC | 	wrlong	local03, local02
08cb0     03 00 00 FF 
08cb4     00 E4 05 F1 | 	add	objptr, ##1536
08cb8     F2 1E 02 FB | 	rdlong	local01, objptr
08cbc     0F 21 02 F6 | 	mov	local02, local01
08cc0     01 20 66 F0 | 	shl	local02, #1
08cc4     0F 21 02 F1 | 	add	local02, local01
08cc8     02 20 66 F0 | 	shl	local02, #2
08ccc     03 00 00 FF 
08cd0     00 E4 85 F1 | 	sub	objptr, ##1536
08cd4     F2 20 02 F1 | 	add	local02, objptr
08cd8     08 20 06 F1 | 	add	local02, #8
08cdc     10 A7 68 FC | 	wrlong	#83, local02
08ce0     67 00 00 FF 
08ce4     60 E4 85 F1 | 	sub	objptr, ##52832
08ce8                 | LR__0744
08ce8     6A 00 00 FF 
08cec     60 E4 05 F1 | 	add	objptr, ##54368
08cf0     F2 22 02 FB | 	rdlong	local03, objptr
08cf4     01 22 06 F1 | 	add	local03, #1
08cf8     F2 22 62 FC | 	wrlong	local03, objptr
08cfc     6A 00 00 FF 
08d00     60 E4 85 F1 | 	sub	objptr, ##54368
08d04     40 00 90 FD | 	jmp	#LR__0746
08d08                 | LR__0745
08d08                 | '    print "We have a slow goto, todo  "
08d08     00 12 06 F6 | 	mov	arg01, #0
08d0c     60 94 B1 FD | 	call	#__system___getiolock_0474
08d10     FD 12 02 F6 | 	mov	arg01, result1
08d14     C8 3A B1 FD | 	call	#__system___lockmem
08d18     61 01 00 FF 
08d1c     36 15 06 F6 | 	mov	arg02, ##@LR__4918
08d20     00 12 06 F6 | 	mov	arg01, #0
08d24     00 16 06 F6 | 	mov	arg03, #0
08d28     B8 47 B1 FD | 	call	#__system___basic_print_string
08d2c     00 12 06 F6 | 	mov	arg01, #0
08d30     0A 14 06 F6 | 	mov	arg02, #10
08d34     00 16 06 F6 | 	mov	arg03, #0
08d38     50 47 B1 FD | 	call	#__system___basic_print_char
08d3c     00 12 06 F6 | 	mov	arg01, #0
08d40     2C 94 B1 FD | 	call	#__system___getiolock_0474
08d44     FD 00 68 FC | 	wrlong	#0, result1
08d48                 | LR__0746
08d48                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08d48                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08d48                 | ' return 0
08d48     00 FA 05 F6 | 	mov	result1, #0
08d4c     A7 F0 03 F6 | 	mov	ptra, fp
08d50     B2 00 A0 FD | 	call	#popregs_
08d54                 | _compile_goto_ret
08d54     2D 00 64 FD | 	ret
08d58                 | 
08d58                 | ' 
08d58                 | ' 
08d58                 | ' 
08d58                 | ' 
08d58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d58                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08d58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d58                 | ' 
08d58                 | ' 
08d58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d58                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08d58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d58                 | ' 
08d58                 | ' 
08d58                 | ' function expr() as integer 
08d58                 | _expr
08d58     07 4A 05 F6 | 	mov	COUNT_, #7
08d5c     A8 00 A0 FD | 	call	#pushregs_
08d60                 | _expr_enter
08d60     57 00 00 FF 
08d64     28 E4 05 F1 | 	add	objptr, ##44584
08d68     F2 24 02 FB | 	rdlong	local04, objptr
08d6c     03 24 66 F0 | 	shl	local04, #3
08d70     02 00 00 FF 
08d74     38 E4 85 F1 | 	sub	objptr, ##1080
08d78     F2 24 02 F1 | 	add	local04, objptr
08d7c     04 24 06 F1 | 	add	local04, #4
08d80     12 27 02 FB | 	rdlong	local05, local04
08d84                 | ' 
08d84                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08d84     FE 27 0E F2 | 	cmp	local05, #510 wz
08d88     54 00 00 FF 
08d8c     F0 E5 85 F1 | 	sub	objptr, ##43504
08d90     C4 00 90 5D |  if_ne	jmp	#LR__0750
08d94     1D 1E 06 F6 | 	mov	local01, #29
08d98     FF 22 06 F6 | 	mov	local03, #255
08d9c     0F 29 02 F6 | 	mov	local06, local01
08da0     10 2B 02 F6 | 	mov	local07, local02
08da4     11 1F 02 F6 | 	mov	local01, local03
08da8     6A 00 00 FF 
08dac     60 E4 05 F1 | 	add	objptr, ##54368
08db0     F2 26 02 FB | 	rdlong	local05, objptr
08db4     13 25 02 F6 | 	mov	local04, local05
08db8     01 24 66 F0 | 	shl	local04, #1
08dbc     13 25 02 F1 | 	add	local04, local05
08dc0     02 24 66 F0 | 	shl	local04, #2
08dc4     03 00 00 FF 
08dc8     00 E4 85 F1 | 	sub	objptr, ##1536
08dcc     F2 24 02 F1 | 	add	local04, objptr
08dd0     12 29 62 FC | 	wrlong	local06, local04
08dd4     03 00 00 FF 
08dd8     00 E4 05 F1 | 	add	objptr, ##1536
08ddc     F2 28 02 FB | 	rdlong	local06, objptr
08de0     14 27 02 F6 | 	mov	local05, local06
08de4     01 26 66 F0 | 	shl	local05, #1
08de8     14 27 02 F1 | 	add	local05, local06
08dec     02 26 66 F0 | 	shl	local05, #2
08df0     03 00 00 FF 
08df4     00 E4 85 F1 | 	sub	objptr, ##1536
08df8     F2 26 02 F1 | 	add	local05, objptr
08dfc     04 26 06 F1 | 	add	local05, #4
08e00     13 2B 62 FC | 	wrlong	local07, local05
08e04     03 00 00 FF 
08e08     00 E4 05 F1 | 	add	objptr, ##1536
08e0c     F2 2A 02 FB | 	rdlong	local07, objptr
08e10     15 29 02 F6 | 	mov	local06, local07
08e14     01 28 66 F0 | 	shl	local06, #1
08e18     15 29 02 F1 | 	add	local06, local07
08e1c     02 28 66 F0 | 	shl	local06, #2
08e20     03 00 00 FF 
08e24     00 E4 85 F1 | 	sub	objptr, ##1536
08e28     F2 28 02 F1 | 	add	local06, objptr
08e2c     08 28 06 F1 | 	add	local06, #8
08e30     14 1F 62 FC | 	wrlong	local01, local06
08e34     03 00 00 FF 
08e38     00 E4 05 F1 | 	add	objptr, ##1536
08e3c     F2 28 02 FB | 	rdlong	local06, objptr
08e40     01 28 06 F1 | 	add	local06, #1
08e44     F2 28 62 FC | 	wrlong	local06, objptr
08e48     6A 00 00 FF 
08e4c     60 E4 85 F1 | 	sub	objptr, ##54368
08e50     1D FA 05 F6 | 	mov	result1, #29
08e54     54 01 90 FD | 	jmp	#LR__0753
08e58                 | LR__0750
08e58     00 1E 06 F6 | 	mov	local01, #0
08e5c     58 01 B0 FD | 	call	#_addsub
08e60     57 00 00 FF 
08e64     28 E4 05 F1 | 	add	objptr, ##44584
08e68     F2 24 02 FB | 	rdlong	local04, objptr
08e6c     03 24 66 F0 | 	shl	local04, #3
08e70     02 00 00 FF 
08e74     38 E4 85 F1 | 	sub	objptr, ##1080
08e78     F2 24 02 F1 | 	add	local04, objptr
08e7c     04 24 06 F1 | 	add	local04, #4
08e80     12 27 02 FB | 	rdlong	local05, local04
08e84                 | ' t3.result.uresult=0
08e84                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08e84                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08e84                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08e84     54 00 00 FF 
08e88     F0 E5 85 F1 | 	sub	objptr, ##43504
08e8c                 | LR__0751
08e8c     1B 26 0E F2 | 	cmp	local05, #27 wz
08e90     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08e94     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08e98     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08e9c     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08ea0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08ea4     00 01 90 5D |  if_ne	jmp	#LR__0752
08ea8     57 00 00 FF 
08eac     28 E4 05 F1 | 	add	objptr, ##44584
08eb0     F2 28 02 FB | 	rdlong	local06, objptr
08eb4     01 28 06 F1 | 	add	local06, #1
08eb8     F2 28 62 FC | 	wrlong	local06, objptr
08ebc     57 00 00 FF 
08ec0     28 E4 85 F1 | 	sub	objptr, ##44584
08ec4     F0 00 B0 FD | 	call	#_addsub
08ec8     13 23 02 F6 | 	mov	local03, local05
08ecc     0F 29 02 F6 | 	mov	local06, local01
08ed0     10 2B 02 F6 | 	mov	local07, local02
08ed4     11 27 02 F6 | 	mov	local05, local03
08ed8     6A 00 00 FF 
08edc     60 E4 05 F1 | 	add	objptr, ##54368
08ee0     F2 24 02 FB | 	rdlong	local04, objptr
08ee4     12 FB 01 F6 | 	mov	result1, local04
08ee8     01 FA 65 F0 | 	shl	result1, #1
08eec     12 FB 01 F1 | 	add	result1, local04
08ef0     02 FA 65 F0 | 	shl	result1, #2
08ef4     03 00 00 FF 
08ef8     00 E4 85 F1 | 	sub	objptr, ##1536
08efc     F2 FA 01 F1 | 	add	result1, objptr
08f00     FD 28 62 FC | 	wrlong	local06, result1
08f04     03 00 00 FF 
08f08     00 E4 05 F1 | 	add	objptr, ##1536
08f0c     F2 28 02 FB | 	rdlong	local06, objptr
08f10     14 25 02 F6 | 	mov	local04, local06
08f14     01 24 66 F0 | 	shl	local04, #1
08f18     14 25 02 F1 | 	add	local04, local06
08f1c     02 24 66 F0 | 	shl	local04, #2
08f20     03 00 00 FF 
08f24     00 E4 85 F1 | 	sub	objptr, ##1536
08f28     F2 24 02 F1 | 	add	local04, objptr
08f2c     04 24 06 F1 | 	add	local04, #4
08f30     12 2B 62 FC | 	wrlong	local07, local04
08f34     03 00 00 FF 
08f38     00 E4 05 F1 | 	add	objptr, ##1536
08f3c     F2 2A 02 FB | 	rdlong	local07, objptr
08f40     15 29 02 F6 | 	mov	local06, local07
08f44     01 28 66 F0 | 	shl	local06, #1
08f48     15 29 02 F1 | 	add	local06, local07
08f4c     02 28 66 F0 | 	shl	local06, #2
08f50     03 00 00 FF 
08f54     00 E4 85 F1 | 	sub	objptr, ##1536
08f58     F2 28 02 F1 | 	add	local06, objptr
08f5c     08 28 06 F1 | 	add	local06, #8
08f60     14 27 62 FC | 	wrlong	local05, local06
08f64     03 00 00 FF 
08f68     00 E4 05 F1 | 	add	objptr, ##1536
08f6c     F2 28 02 FB | 	rdlong	local06, objptr
08f70     01 28 06 F1 | 	add	local06, #1
08f74     F2 28 62 FC | 	wrlong	local06, objptr
08f78     13 00 00 FF 
08f7c     38 E4 85 F1 | 	sub	objptr, ##9784
08f80     F2 24 02 FB | 	rdlong	local04, objptr
08f84     03 24 66 F0 | 	shl	local04, #3
08f88     02 00 00 FF 
08f8c     38 E4 85 F1 | 	sub	objptr, ##1080
08f90     F2 24 02 F1 | 	add	local04, objptr
08f94     04 24 06 F1 | 	add	local04, #4
08f98     12 27 02 FB | 	rdlong	local05, local04
08f9c     54 00 00 FF 
08fa0     F0 E5 85 F1 | 	sub	objptr, ##43504
08fa4     E4 FE 9F FD | 	jmp	#LR__0751
08fa8                 | LR__0752
08fa8                 | ' return 0  
08fa8     00 FA 05 F6 | 	mov	result1, #0
08fac                 | LR__0753
08fac     A7 F0 03 F6 | 	mov	ptra, fp
08fb0     B2 00 A0 FD | 	call	#popregs_
08fb4                 | _expr_ret
08fb4     2D 00 64 FD | 	ret
08fb8                 | 
08fb8                 | ' 
08fb8                 | ' 
08fb8                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
08fb8                 | ' 
08fb8                 | ' function addsub() as integer 
08fb8                 | _addsub
08fb8     07 4A 05 F6 | 	mov	COUNT_, #7
08fbc     A8 00 A0 FD | 	call	#pushregs_
08fc0                 | _addsub_enter
08fc0     00 1E 06 F6 | 	mov	local01, #0
08fc4     50 01 B0 FD | 	call	#_muldiv
08fc8     57 00 00 FF 
08fcc     28 E4 05 F1 | 	add	objptr, ##44584
08fd0     F2 24 02 FB | 	rdlong	local04, objptr
08fd4     03 24 66 F0 | 	shl	local04, #3
08fd8     02 00 00 FF 
08fdc     38 E4 85 F1 | 	sub	objptr, ##1080
08fe0     F2 24 02 F1 | 	add	local04, objptr
08fe4     04 24 06 F1 | 	add	local04, #4
08fe8     12 27 02 FB | 	rdlong	local05, local04
08fec                 | ' t3.result.uresult=0
08fec                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08fec                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08fec                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
08fec     54 00 00 FF 
08ff0     F0 E5 85 F1 | 	sub	objptr, ##43504
08ff4                 | LR__0760
08ff4     01 26 0E F2 | 	cmp	local05, #1 wz
08ff8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
08ffc     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
09000     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
09004     00 01 90 5D |  if_ne	jmp	#LR__0761
09008     57 00 00 FF 
0900c     28 E4 05 F1 | 	add	objptr, ##44584
09010     F2 24 02 FB | 	rdlong	local04, objptr
09014     01 24 06 F1 | 	add	local04, #1
09018     F2 24 62 FC | 	wrlong	local04, objptr
0901c     57 00 00 FF 
09020     28 E4 85 F1 | 	sub	objptr, ##44584
09024     F0 00 B0 FD | 	call	#_muldiv
09028     13 23 02 F6 | 	mov	local03, local05
0902c     0F 29 02 F6 | 	mov	local06, local01
09030     10 2B 02 F6 | 	mov	local07, local02
09034     11 27 02 F6 | 	mov	local05, local03
09038     6A 00 00 FF 
0903c     60 E4 05 F1 | 	add	objptr, ##54368
09040     F2 24 02 FB | 	rdlong	local04, objptr
09044     12 FB 01 F6 | 	mov	result1, local04
09048     01 FA 65 F0 | 	shl	result1, #1
0904c     12 FB 01 F1 | 	add	result1, local04
09050     02 FA 65 F0 | 	shl	result1, #2
09054     03 00 00 FF 
09058     00 E4 85 F1 | 	sub	objptr, ##1536
0905c     F2 FA 01 F1 | 	add	result1, objptr
09060     FD 28 62 FC | 	wrlong	local06, result1
09064     03 00 00 FF 
09068     00 E4 05 F1 | 	add	objptr, ##1536
0906c     F2 28 02 FB | 	rdlong	local06, objptr
09070     14 25 02 F6 | 	mov	local04, local06
09074     01 24 66 F0 | 	shl	local04, #1
09078     14 25 02 F1 | 	add	local04, local06
0907c     02 24 66 F0 | 	shl	local04, #2
09080     03 00 00 FF 
09084     00 E4 85 F1 | 	sub	objptr, ##1536
09088     F2 24 02 F1 | 	add	local04, objptr
0908c     04 24 06 F1 | 	add	local04, #4
09090     12 2B 62 FC | 	wrlong	local07, local04
09094     03 00 00 FF 
09098     00 E4 05 F1 | 	add	objptr, ##1536
0909c     F2 2A 02 FB | 	rdlong	local07, objptr
090a0     15 29 02 F6 | 	mov	local06, local07
090a4     01 28 66 F0 | 	shl	local06, #1
090a8     15 29 02 F1 | 	add	local06, local07
090ac     02 28 66 F0 | 	shl	local06, #2
090b0     03 00 00 FF 
090b4     00 E4 85 F1 | 	sub	objptr, ##1536
090b8     F2 28 02 F1 | 	add	local06, objptr
090bc     08 28 06 F1 | 	add	local06, #8
090c0     14 27 62 FC | 	wrlong	local05, local06
090c4     03 00 00 FF 
090c8     00 E4 05 F1 | 	add	objptr, ##1536
090cc     F2 28 02 FB | 	rdlong	local06, objptr
090d0     01 28 06 F1 | 	add	local06, #1
090d4     F2 28 62 FC | 	wrlong	local06, objptr
090d8     13 00 00 FF 
090dc     38 E4 85 F1 | 	sub	objptr, ##9784
090e0     F2 24 02 FB | 	rdlong	local04, objptr
090e4     03 24 66 F0 | 	shl	local04, #3
090e8     02 00 00 FF 
090ec     38 E4 85 F1 | 	sub	objptr, ##1080
090f0     F2 24 02 F1 | 	add	local04, objptr
090f4     04 24 06 F1 | 	add	local04, #4
090f8     12 27 02 FB | 	rdlong	local05, local04
090fc     54 00 00 FF 
09100     F0 E5 85 F1 | 	sub	objptr, ##43504
09104     EC FE 9F FD | 	jmp	#LR__0760
09108                 | LR__0761
09108                 | '   return 0
09108     00 FA 05 F6 | 	mov	result1, #0
0910c     A7 F0 03 F6 | 	mov	ptra, fp
09110     B2 00 A0 FD | 	call	#popregs_
09114                 | _addsub_ret
09114     2D 00 64 FD | 	ret
09118                 | 
09118                 | ' 
09118                 | ' sub muldiv()
09118                 | _muldiv
09118     08 4A 05 F6 | 	mov	COUNT_, #8
0911c     A8 00 A0 FD | 	call	#pushregs_
09120                 | _muldiv_enter
09120     00 1E 06 F6 | 	mov	local01, #0
09124     58 01 B0 FD | 	call	#_getvalue
09128     57 00 00 FF 
0912c     28 E4 05 F1 | 	add	objptr, ##44584
09130     F2 24 02 FB | 	rdlong	local04, objptr
09134     03 24 66 F0 | 	shl	local04, #3
09138     02 00 00 FF 
0913c     38 E4 85 F1 | 	sub	objptr, ##1080
09140     F2 24 02 F1 | 	add	local04, objptr
09144     04 24 06 F1 | 	add	local04, #4
09148     12 27 02 FB | 	rdlong	local05, local04
0914c                 | ' t3.result.uresult=0
0914c                 | ' getvalue()    
0914c                 | ' op = lparts(ct).token
0914c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0914c     54 00 00 FF 
09150     F0 E5 85 F1 | 	sub	objptr, ##43504
09154                 | LR__0770
09154     05 26 0E F2 | 	cmp	local05, #5 wz
09158     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0915c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09160     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09164     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09168     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0916c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09170     00 01 90 5D |  if_ne	jmp	#LR__0771
09174     57 00 00 FF 
09178     28 E4 05 F1 | 	add	objptr, ##44584
0917c     F2 24 02 FB | 	rdlong	local04, objptr
09180     01 24 06 F1 | 	add	local04, #1
09184     F2 24 62 FC | 	wrlong	local04, objptr
09188     57 00 00 FF 
0918c     28 E4 85 F1 | 	sub	objptr, ##44584
09190     EC 00 B0 FD | 	call	#_getvalue
09194     13 23 02 F6 | 	mov	local03, local05
09198     0F 29 02 F6 | 	mov	local06, local01
0919c     10 2B 02 F6 | 	mov	local07, local02
091a0     11 27 02 F6 | 	mov	local05, local03
091a4     6A 00 00 FF 
091a8     60 E4 05 F1 | 	add	objptr, ##54368
091ac     F2 24 02 FB | 	rdlong	local04, objptr
091b0     12 2D 02 F6 | 	mov	local08, local04
091b4     01 2C 66 F0 | 	shl	local08, #1
091b8     12 2D 02 F1 | 	add	local08, local04
091bc     02 2C 66 F0 | 	shl	local08, #2
091c0     03 00 00 FF 
091c4     00 E4 85 F1 | 	sub	objptr, ##1536
091c8     F2 2C 02 F1 | 	add	local08, objptr
091cc     16 29 62 FC | 	wrlong	local06, local08
091d0     03 00 00 FF 
091d4     00 E4 05 F1 | 	add	objptr, ##1536
091d8     F2 2C 02 FB | 	rdlong	local08, objptr
091dc     16 29 02 F6 | 	mov	local06, local08
091e0     01 28 66 F0 | 	shl	local06, #1
091e4     16 29 02 F1 | 	add	local06, local08
091e8     02 28 66 F0 | 	shl	local06, #2
091ec     03 00 00 FF 
091f0     00 E4 85 F1 | 	sub	objptr, ##1536
091f4     F2 28 02 F1 | 	add	local06, objptr
091f8     04 28 06 F1 | 	add	local06, #4
091fc     14 2B 62 FC | 	wrlong	local07, local06
09200     03 00 00 FF 
09204     00 E4 05 F1 | 	add	objptr, ##1536
09208     F2 2C 02 FB | 	rdlong	local08, objptr
0920c     16 2B 02 F6 | 	mov	local07, local08
09210     01 2A 66 F0 | 	shl	local07, #1
09214     16 2B 02 F1 | 	add	local07, local08
09218     02 2A 66 F0 | 	shl	local07, #2
0921c     03 00 00 FF 
09220     00 E4 85 F1 | 	sub	objptr, ##1536
09224     F2 2A 02 F1 | 	add	local07, objptr
09228     08 2A 06 F1 | 	add	local07, #8
0922c     15 27 62 FC | 	wrlong	local05, local07
09230     03 00 00 FF 
09234     00 E4 05 F1 | 	add	objptr, ##1536
09238     F2 28 02 FB | 	rdlong	local06, objptr
0923c     01 28 06 F1 | 	add	local06, #1
09240     F2 28 62 FC | 	wrlong	local06, objptr
09244     13 00 00 FF 
09248     38 E4 85 F1 | 	sub	objptr, ##9784
0924c     F2 24 02 FB | 	rdlong	local04, objptr
09250     03 24 66 F0 | 	shl	local04, #3
09254     02 00 00 FF 
09258     38 E4 85 F1 | 	sub	objptr, ##1080
0925c     F2 24 02 F1 | 	add	local04, objptr
09260     04 24 06 F1 | 	add	local04, #4
09264     12 27 02 FB | 	rdlong	local05, local04
09268     54 00 00 FF 
0926c     F0 E5 85 F1 | 	sub	objptr, ##43504
09270     E0 FE 9F FD | 	jmp	#LR__0770
09274                 | LR__0771
09274     A7 F0 03 F6 | 	mov	ptra, fp
09278     B2 00 A0 FD | 	call	#popregs_
0927c                 | _muldiv_ret
0927c     2D 00 64 FD | 	ret
09280                 | 
09280                 | ' 
09280                 | ' sub getvalue() 
09280                 | _getvalue
09280     0B 4A 05 F6 | 	mov	COUNT_, #11
09284     A8 00 A0 FD | 	call	#pushregs_
09288                 | _getvalue_enter
09288     01 24 06 F6 | 	mov	local04, #1
0928c     00 1E 06 F6 | 	mov	local01, #0
09290     1D 22 06 F6 | 	mov	local03, #29
09294     57 00 00 FF 
09298     28 E4 05 F1 | 	add	objptr, ##44584
0929c     F2 16 02 FB | 	rdlong	arg03, objptr
092a0     03 16 66 F0 | 	shl	arg03, #3
092a4     02 00 00 FF 
092a8     38 E4 85 F1 | 	sub	objptr, ##1080
092ac     F2 16 02 F1 | 	add	arg03, objptr
092b0     04 16 06 F1 | 	add	arg03, #4
092b4     0B 27 02 FB | 	rdlong	local05, arg03
092b8                 | ' m=1
092b8                 | ' t1.result.uresult=0: t1.result_type=result_uint
092b8                 | ' op=lparts(ct).token
092b8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
092b8     02 26 0E F2 | 	cmp	local05, #2 wz
092bc     54 00 00 FF 
092c0     F0 E5 85 F1 | 	sub	objptr, ##43504
092c4     38 00 90 5D |  if_ne	jmp	#LR__0780
092c8     01 24 66 F6 | 	neg	local04, #1
092cc     57 00 00 FF 
092d0     28 E4 05 F1 | 	add	objptr, ##44584
092d4     F2 26 02 FB | 	rdlong	local05, objptr
092d8     01 26 06 F1 | 	add	local05, #1
092dc     F2 26 62 FC | 	wrlong	local05, objptr
092e0     03 26 66 F0 | 	shl	local05, #3
092e4     02 00 00 FF 
092e8     38 E4 85 F1 | 	sub	objptr, ##1080
092ec     F2 26 02 F1 | 	add	local05, objptr
092f0     04 26 06 F1 | 	add	local05, #4
092f4     13 27 02 FB | 	rdlong	local05, local05
092f8     54 00 00 FF 
092fc     F0 E5 85 F1 | 	sub	objptr, ##43504
09300                 | LR__0780
09300                 | ' select case op
09300     01 00 00 FF 
09304     00 26 0E F2 | 	cmp	local05, ##512 wz
09308     3C 00 90 AD |  if_e	jmp	#LR__0781
0930c     01 00 00 FF 
09310     01 26 0E F2 | 	cmp	local05, ##513 wz
09314     88 01 90 AD |  if_e	jmp	#LR__0784
09318     01 00 00 FF 
0931c     02 26 0E F2 | 	cmp	local05, ##514 wz
09320     84 02 90 AD |  if_e	jmp	#LR__0785
09324     01 00 00 FF 
09328     03 26 0E F2 | 	cmp	local05, ##515 wz
0932c     E8 03 90 AD |  if_e	jmp	#LR__0788
09330     01 00 00 FF 
09334     04 26 0E F2 | 	cmp	local05, ##516 wz
09338     B8 05 90 AD |  if_e	jmp	#LR__0793
0933c     15 26 0E F2 | 	cmp	local05, #21 wz
09340     D8 05 90 AD |  if_e	jmp	#LR__0794
09344     48 06 90 FD | 	jmp	#LR__0795
09348                 | LR__0781
09348                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09348     01 24 0E F2 | 	cmp	local04, #1 wz
0934c     3C 00 90 5D |  if_ne	jmp	#LR__0782
09350     57 00 00 FF 
09354     28 E4 05 F1 | 	add	objptr, ##44584
09358     F2 26 02 FB | 	rdlong	local05, objptr
0935c     03 26 66 F0 | 	shl	local05, #3
09360     02 00 00 FF 
09364     38 E4 85 F1 | 	sub	objptr, ##1080
09368     F2 26 02 F1 | 	add	local05, objptr
0936c     13 13 02 FB | 	rdlong	arg01, local05
09370     00 14 06 F6 | 	mov	arg02, #0
09374     54 00 00 FF 
09378     F0 E5 85 F1 | 	sub	objptr, ##43504
0937c     54 66 B1 FD | 	call	#__system____builtin_atoi
09380     FD 24 02 FD | 	qmul	local04, result1
09384     18 1E 62 FD | 	getqx	local01
09388     1C 22 06 F6 | 	mov	local03, #28
0938c                 | LR__0782
0938c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0938c     FF FF 7F FF 
09390     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09394     3C 00 90 5D |  if_ne	jmp	#LR__0783
09398     57 00 00 FF 
0939c     28 E4 05 F1 | 	add	objptr, ##44584
093a0     F2 26 02 FB | 	rdlong	local05, objptr
093a4     03 26 66 F0 | 	shl	local05, #3
093a8     02 00 00 FF 
093ac     38 E4 85 F1 | 	sub	objptr, ##1080
093b0     F2 26 02 F1 | 	add	local05, objptr
093b4     13 13 02 FB | 	rdlong	arg01, local05
093b8     00 14 06 F6 | 	mov	arg02, #0
093bc     54 00 00 FF 
093c0     F0 E5 85 F1 | 	sub	objptr, ##43504
093c4     0C 66 B1 FD | 	call	#__system____builtin_atoi
093c8     FD 24 02 FD | 	qmul	local04, result1
093cc     18 1E 62 FD | 	getqx	local01
093d0     1C 22 06 F6 | 	mov	local03, #28
093d4                 | LR__0783
093d4     0F 29 02 F6 | 	mov	local06, local01
093d8     10 2B 02 F6 | 	mov	local07, local02
093dc     11 27 02 F6 | 	mov	local05, local03
093e0     6A 00 00 FF 
093e4     60 E4 05 F1 | 	add	objptr, ##54368
093e8     F2 1E 02 FB | 	rdlong	local01, objptr
093ec     0F 25 02 F6 | 	mov	local04, local01
093f0     01 24 66 F0 | 	shl	local04, #1
093f4     0F 25 02 F1 | 	add	local04, local01
093f8     02 24 66 F0 | 	shl	local04, #2
093fc     03 00 00 FF 
09400     00 E4 85 F1 | 	sub	objptr, ##1536
09404     F2 24 02 F1 | 	add	local04, objptr
09408     12 29 62 FC | 	wrlong	local06, local04
0940c     03 00 00 FF 
09410     00 E4 05 F1 | 	add	objptr, ##1536
09414     F2 28 02 FB | 	rdlong	local06, objptr
09418     14 1F 02 F6 | 	mov	local01, local06
0941c     01 1E 66 F0 | 	shl	local01, #1
09420     14 1F 02 F1 | 	add	local01, local06
09424     02 1E 66 F0 | 	shl	local01, #2
09428     03 00 00 FF 
0942c     00 E4 85 F1 | 	sub	objptr, ##1536
09430     F2 1E 02 F1 | 	add	local01, objptr
09434     04 1E 06 F1 | 	add	local01, #4
09438     0F 2B 62 FC | 	wrlong	local07, local01
0943c     03 00 00 FF 
09440     00 E4 05 F1 | 	add	objptr, ##1536
09444     F2 2A 02 FB | 	rdlong	local07, objptr
09448     15 29 02 F6 | 	mov	local06, local07
0944c     01 28 66 F0 | 	shl	local06, #1
09450     15 29 02 F1 | 	add	local06, local07
09454     02 28 66 F0 | 	shl	local06, #2
09458     03 00 00 FF 
0945c     00 E4 85 F1 | 	sub	objptr, ##1536
09460     F2 28 02 F1 | 	add	local06, objptr
09464     08 28 06 F1 | 	add	local06, #8
09468     14 27 62 FC | 	wrlong	local05, local06
0946c     03 00 00 FF 
09470     00 E4 05 F1 | 	add	objptr, ##1536
09474     F2 28 02 FB | 	rdlong	local06, objptr
09478     01 28 06 F1 | 	add	local06, #1
0947c     F2 28 62 FC | 	wrlong	local06, objptr
09480     13 00 00 FF 
09484     38 E4 85 F1 | 	sub	objptr, ##9784
09488     F2 28 02 FB | 	rdlong	local06, objptr
0948c     01 28 06 F1 | 	add	local06, #1
09490     F2 28 62 FC | 	wrlong	local06, objptr
09494     57 00 00 FF 
09498     28 E4 85 F1 | 	sub	objptr, ##44584
0949c     14 05 90 FD | 	jmp	#LR__0796
094a0                 | LR__0784
094a0     57 00 00 FF 
094a4     28 E4 05 F1 | 	add	objptr, ##44584
094a8     F2 28 02 FB | 	rdlong	local06, objptr
094ac     03 28 66 F0 | 	shl	local06, #3
094b0     02 00 00 FF 
094b4     38 E4 85 F1 | 	sub	objptr, ##1080
094b8     F2 28 02 F1 | 	add	local06, objptr
094bc     14 13 02 FB | 	rdlong	arg01, local06
094c0     00 14 06 F6 | 	mov	arg02, #0
094c4     54 00 00 FF 
094c8     F0 E5 85 F1 | 	sub	objptr, ##43504
094cc     04 65 B1 FD | 	call	#__system____builtin_atoi
094d0     FD 24 02 FD | 	qmul	local04, result1
094d4     6A 00 00 FF 
094d8     60 E4 05 F1 | 	add	objptr, ##54368
094dc     F2 28 02 FB | 	rdlong	local06, objptr
094e0     14 2D 02 F6 | 	mov	local08, local06
094e4     01 2C 66 F0 | 	shl	local08, #1
094e8     14 2D 02 F1 | 	add	local08, local06
094ec     02 2C 66 F0 | 	shl	local08, #2
094f0     03 00 00 FF 
094f4     00 E4 85 F1 | 	sub	objptr, ##1536
094f8     F2 2C 02 F1 | 	add	local08, objptr
094fc     03 00 00 FF 
09500     00 E4 05 F1 | 	add	objptr, ##1536
09504     18 1E 62 FD | 	getqx	local01
09508     1C 22 06 F6 | 	mov	local03, #28
0950c     0F 29 02 F6 | 	mov	local06, local01
09510     10 2B 02 F6 | 	mov	local07, local02
09514     16 29 62 FC | 	wrlong	local06, local08
09518     11 2D 02 F6 | 	mov	local08, local03
0951c     F2 28 02 FB | 	rdlong	local06, objptr
09520     14 27 02 F6 | 	mov	local05, local06
09524     01 26 66 F0 | 	shl	local05, #1
09528     14 27 02 F1 | 	add	local05, local06
0952c     02 26 66 F0 | 	shl	local05, #2
09530     03 00 00 FF 
09534     00 E4 85 F1 | 	sub	objptr, ##1536
09538     F2 26 02 F1 | 	add	local05, objptr
0953c     04 26 06 F1 | 	add	local05, #4
09540     13 2B 62 FC | 	wrlong	local07, local05
09544     03 00 00 FF 
09548     00 E4 05 F1 | 	add	objptr, ##1536
0954c     F2 2A 02 FB | 	rdlong	local07, objptr
09550     15 29 02 F6 | 	mov	local06, local07
09554     01 28 66 F0 | 	shl	local06, #1
09558     15 29 02 F1 | 	add	local06, local07
0955c     02 28 66 F0 | 	shl	local06, #2
09560     03 00 00 FF 
09564     00 E4 85 F1 | 	sub	objptr, ##1536
09568     F2 28 02 F1 | 	add	local06, objptr
0956c     08 28 06 F1 | 	add	local06, #8
09570     14 2D 62 FC | 	wrlong	local08, local06
09574     03 00 00 FF 
09578     00 E4 05 F1 | 	add	objptr, ##1536
0957c     F2 28 02 FB | 	rdlong	local06, objptr
09580     01 28 06 F1 | 	add	local06, #1
09584     F2 28 62 FC | 	wrlong	local06, objptr
09588     13 00 00 FF 
0958c     38 E4 85 F1 | 	sub	objptr, ##9784
09590     F2 28 02 FB | 	rdlong	local06, objptr
09594     01 28 06 F1 | 	add	local06, #1
09598     F2 28 62 FC | 	wrlong	local06, objptr
0959c     57 00 00 FF 
095a0     28 E4 85 F1 | 	sub	objptr, ##44584
095a4     0C 04 90 FD | 	jmp	#LR__0796
095a8                 | LR__0785
095a8                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
095a8     01 24 0E F2 | 	cmp	local04, #1 wz
095ac     48 00 90 5D |  if_ne	jmp	#LR__0786
095b0     00 C0 1F FF 
095b4     00 28 06 F6 | 	mov	local06, ##1065353216
095b8     57 00 00 FF 
095bc     28 E4 05 F1 | 	add	objptr, ##44584
095c0     F2 2C 02 FB | 	rdlong	local08, objptr
095c4     03 2C 66 F0 | 	shl	local08, #3
095c8     02 00 00 FF 
095cc     38 E4 85 F1 | 	sub	objptr, ##1080
095d0     F2 2C 02 F1 | 	add	local08, objptr
095d4     16 13 02 FB | 	rdlong	arg01, local08
095d8     54 00 00 FF 
095dc     F0 E5 85 F1 | 	sub	objptr, ##43504
095e0     60 65 B1 FD | 	call	#__system____builtin_atof
095e4     FD 14 02 F6 | 	mov	arg02, result1
095e8     14 13 02 F6 | 	mov	arg01, local06
095ec     6C 5D B1 FD | 	call	#__system___float_mul
095f0     FD 1E 02 F6 | 	mov	local01, result1
095f4     1E 22 06 F6 | 	mov	local03, #30
095f8                 | LR__0786
095f8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
095f8     FF FF 7F FF 
095fc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09600     48 00 90 5D |  if_ne	jmp	#LR__0787
09604     00 C0 5F FF 
09608     00 28 06 F6 | 	mov	local06, ##-1082130432
0960c     57 00 00 FF 
09610     28 E4 05 F1 | 	add	objptr, ##44584
09614     F2 2C 02 FB | 	rdlong	local08, objptr
09618     03 2C 66 F0 | 	shl	local08, #3
0961c     02 00 00 FF 
09620     38 E4 85 F1 | 	sub	objptr, ##1080
09624     F2 2C 02 F1 | 	add	local08, objptr
09628     16 13 02 FB | 	rdlong	arg01, local08
0962c     54 00 00 FF 
09630     F0 E5 85 F1 | 	sub	objptr, ##43504
09634     0C 65 B1 FD | 	call	#__system____builtin_atof
09638     FD 14 02 F6 | 	mov	arg02, result1
0963c     14 13 02 F6 | 	mov	arg01, local06
09640     18 5D B1 FD | 	call	#__system___float_mul
09644     FD 1E 02 F6 | 	mov	local01, result1
09648     1E 22 06 F6 | 	mov	local03, #30
0964c                 | LR__0787
0964c     0F 29 02 F6 | 	mov	local06, local01
09650     10 2B 02 F6 | 	mov	local07, local02
09654     11 27 02 F6 | 	mov	local05, local03
09658     6A 00 00 FF 
0965c     60 E4 05 F1 | 	add	objptr, ##54368
09660     F2 1E 02 FB | 	rdlong	local01, objptr
09664     0F 2D 02 F6 | 	mov	local08, local01
09668     01 2C 66 F0 | 	shl	local08, #1
0966c     0F 2D 02 F1 | 	add	local08, local01
09670     02 2C 66 F0 | 	shl	local08, #2
09674     03 00 00 FF 
09678     00 E4 85 F1 | 	sub	objptr, ##1536
0967c     F2 2C 02 F1 | 	add	local08, objptr
09680     16 29 62 FC | 	wrlong	local06, local08
09684     03 00 00 FF 
09688     00 E4 05 F1 | 	add	objptr, ##1536
0968c     F2 2C 02 FB | 	rdlong	local08, objptr
09690     16 29 02 F6 | 	mov	local06, local08
09694     01 28 66 F0 | 	shl	local06, #1
09698     16 29 02 F1 | 	add	local06, local08
0969c     02 28 66 F0 | 	shl	local06, #2
096a0     03 00 00 FF 
096a4     00 E4 85 F1 | 	sub	objptr, ##1536
096a8     F2 28 02 F1 | 	add	local06, objptr
096ac     04 28 06 F1 | 	add	local06, #4
096b0     14 2B 62 FC | 	wrlong	local07, local06
096b4     03 00 00 FF 
096b8     00 E4 05 F1 | 	add	objptr, ##1536
096bc     F2 2C 02 FB | 	rdlong	local08, objptr
096c0     16 2B 02 F6 | 	mov	local07, local08
096c4     01 2A 66 F0 | 	shl	local07, #1
096c8     16 2B 02 F1 | 	add	local07, local08
096cc     02 2A 66 F0 | 	shl	local07, #2
096d0     03 00 00 FF 
096d4     00 E4 85 F1 | 	sub	objptr, ##1536
096d8     F2 2A 02 F1 | 	add	local07, objptr
096dc     08 2A 06 F1 | 	add	local07, #8
096e0     15 27 62 FC | 	wrlong	local05, local07
096e4     03 00 00 FF 
096e8     00 E4 05 F1 | 	add	objptr, ##1536
096ec     F2 28 02 FB | 	rdlong	local06, objptr
096f0     01 28 06 F1 | 	add	local06, #1
096f4     F2 28 62 FC | 	wrlong	local06, objptr
096f8     13 00 00 FF 
096fc     38 E4 85 F1 | 	sub	objptr, ##9784
09700     F2 28 02 FB | 	rdlong	local06, objptr
09704     01 28 06 F1 | 	add	local06, #1
09708     F2 28 62 FC | 	wrlong	local06, objptr
0970c     57 00 00 FF 
09710     28 E4 85 F1 | 	sub	objptr, ##44584
09714     9C 02 90 FD | 	jmp	#LR__0796
09718                 | LR__0788
09718     1F 22 06 F6 | 	mov	local03, #31
0971c     57 00 00 FF 
09720     28 E4 05 F1 | 	add	objptr, ##44584
09724     F2 16 02 FB | 	rdlong	arg03, objptr
09728     03 16 66 F0 | 	shl	arg03, #3
0972c     02 00 00 FF 
09730     38 E4 85 F1 | 	sub	objptr, ##1080
09734     F2 16 02 F1 | 	add	arg03, objptr
09738     0B 13 02 FB | 	rdlong	arg01, arg03
0973c     54 00 00 FF 
09740     F0 E5 85 F1 | 	sub	objptr, ##43504
09744     09 2F 02 F6 | 	mov	local09, arg01
09748     97 06 48 FB | 	callpa	#(@LR__0790-@LR__0789)>>2,fcache_load_ptr_
0974c                 | LR__0789
0974c     17 FB C9 FA | 	rdbyte	result1, local09 wz
09750     01 2E 06 51 |  if_ne	add	local09, #1
09754     F4 FF 9F 5D |  if_ne	jmp	#LR__0789
09758                 | LR__0790
09758     09 2F 82 F1 | 	sub	local09, arg01
0975c     17 FB 01 F6 | 	mov	result1, local09
09760     7B 00 00 FF 
09764     AC E4 05 F1 | 	add	objptr, ##63148
09768     F2 FA 61 FC | 	wrlong	result1, objptr
0976c     50 E4 85 F1 | 	sub	objptr, #80
09770     F2 12 02 FB | 	rdlong	arg01, objptr
09774     FD 12 82 F1 | 	sub	arg01, result1
09778     04 12 86 F1 | 	sub	arg01, #4
0977c     03 12 26 F5 | 	andn	arg01, #3
09780     F2 12 62 FC | 	wrlong	arg01, objptr
09784     50 E4 05 F1 | 	add	objptr, #80
09788     F2 14 02 FB | 	rdlong	arg02, objptr
0978c     7B 00 00 FF 
09790     AC E4 85 F1 | 	sub	objptr, ##63148
09794     C4 F9 B0 FD | 	call	#_pslpoke
09798                 | '     pslpoke memtop,l
09798                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09798     01 30 06 F6 | 	mov	local10, #1
0979c     7B 00 00 FF 
097a0     AC E4 05 F1 | 	add	objptr, ##63148
097a4     F2 32 02 FB | 	rdlong	local11, objptr
097a8     7B 00 00 FF 
097ac     AC E4 85 F1 | 	sub	objptr, ##63148
097b0     01 32 06 F1 | 	add	local11, #1
097b4                 | LR__0791
097b4     19 31 52 F2 | 	cmps	local10, local11 wc
097b8     5C 00 90 3D |  if_ae	jmp	#LR__0792
097bc     7B 00 00 FF 
097c0     5C E4 05 F1 | 	add	objptr, ##63068
097c4     F2 2A 02 FB | 	rdlong	local07, objptr
097c8     03 2A 06 F1 | 	add	local07, #3
097cc     18 2B 02 F1 | 	add	local07, local10
097d0     24 00 00 FF 
097d4     34 E4 85 F1 | 	sub	objptr, ##18484
097d8     F2 2C 02 FB | 	rdlong	local08, objptr
097dc     03 2C 66 F0 | 	shl	local08, #3
097e0     02 00 00 FF 
097e4     38 E4 85 F1 | 	sub	objptr, ##1080
097e8     F2 2C 02 F1 | 	add	local08, objptr
097ec     16 13 02 FB | 	rdlong	arg01, local08
097f0     18 15 02 F6 | 	mov	arg02, local10
097f4     01 16 06 F6 | 	mov	arg03, #1
097f8     54 00 00 FF 
097fc     F0 E5 85 F1 | 	sub	objptr, ##43504
09800     38 51 B1 FD | 	call	#__system__Mid_S
09804     FD 14 C2 FA | 	rdbyte	arg02, result1
09808     15 13 02 F6 | 	mov	arg01, local07
0980c     DC F9 B0 FD | 	call	#_pspoke
09810     01 30 06 F1 | 	add	local10, #1
09814     9C FF 9F FD | 	jmp	#LR__0791
09818                 | LR__0792
09818     7B 00 00 FF 
0981c     5C E4 05 F1 | 	add	objptr, ##63068
09820     F2 1E 02 FB | 	rdlong	local01, objptr
09824     2B 22 06 F6 | 	mov	local03, #43
09828     0F 29 02 F6 | 	mov	local06, local01
0982c     10 2B 02 F6 | 	mov	local07, local02
09830     11 33 02 F6 | 	mov	local11, local03
09834     10 00 00 FF 
09838     FC E5 85 F1 | 	sub	objptr, ##8700
0983c     F2 30 02 FB | 	rdlong	local10, objptr
09840     18 2D 02 F6 | 	mov	local08, local10
09844     01 2C 66 F0 | 	shl	local08, #1
09848     18 2D 02 F1 | 	add	local08, local10
0984c     02 2C 66 F0 | 	shl	local08, #2
09850     03 00 00 FF 
09854     00 E4 85 F1 | 	sub	objptr, ##1536
09858     F2 2C 02 F1 | 	add	local08, objptr
0985c     16 29 62 FC | 	wrlong	local06, local08
09860     03 00 00 FF 
09864     00 E4 05 F1 | 	add	objptr, ##1536
09868     F2 30 02 FB | 	rdlong	local10, objptr
0986c     18 2D 02 F6 | 	mov	local08, local10
09870     01 2C 66 F0 | 	shl	local08, #1
09874     18 2D 02 F1 | 	add	local08, local10
09878     02 2C 66 F0 | 	shl	local08, #2
0987c     03 00 00 FF 
09880     00 E4 85 F1 | 	sub	objptr, ##1536
09884     F2 2C 02 F1 | 	add	local08, objptr
09888     04 2C 06 F1 | 	add	local08, #4
0988c     16 2B 62 FC | 	wrlong	local07, local08
09890     03 00 00 FF 
09894     00 E4 05 F1 | 	add	objptr, ##1536
09898     F2 30 02 FB | 	rdlong	local10, objptr
0989c     18 2D 02 F6 | 	mov	local08, local10
098a0     01 2C 66 F0 | 	shl	local08, #1
098a4     18 2D 02 F1 | 	add	local08, local10
098a8     02 2C 66 F0 | 	shl	local08, #2
098ac     03 00 00 FF 
098b0     00 E4 85 F1 | 	sub	objptr, ##1536
098b4     F2 2C 02 F1 | 	add	local08, objptr
098b8     08 2C 06 F1 | 	add	local08, #8
098bc     16 33 62 FC | 	wrlong	local11, local08
098c0     03 00 00 FF 
098c4     00 E4 05 F1 | 	add	objptr, ##1536
098c8     F2 28 02 FB | 	rdlong	local06, objptr
098cc     01 28 06 F1 | 	add	local06, #1
098d0     F2 28 62 FC | 	wrlong	local06, objptr
098d4     13 00 00 FF 
098d8     38 E4 85 F1 | 	sub	objptr, ##9784
098dc     F2 28 02 FB | 	rdlong	local06, objptr
098e0     01 28 06 F1 | 	add	local06, #1
098e4     F2 28 62 FC | 	wrlong	local06, objptr
098e8     57 00 00 FF 
098ec     28 E4 85 F1 | 	sub	objptr, ##44584
098f0     C0 00 90 FD | 	jmp	#LR__0796
098f4                 | LR__0793
098f4     12 13 02 F6 | 	mov	arg01, local04
098f8     B8 03 B0 FD | 	call	#_getvar
098fc     57 00 00 FF 
09900     28 E4 05 F1 | 	add	objptr, ##44584
09904     F2 28 02 FB | 	rdlong	local06, objptr
09908     01 28 06 F1 | 	add	local06, #1
0990c     F2 28 62 FC | 	wrlong	local06, objptr
09910     57 00 00 FF 
09914     28 E4 85 F1 | 	sub	objptr, ##44584
09918     98 00 90 FD | 	jmp	#LR__0796
0991c                 | LR__0794
0991c     57 00 00 FF 
09920     28 E4 05 F1 | 	add	objptr, ##44584
09924     F2 28 02 FB | 	rdlong	local06, objptr
09928     01 28 06 F1 | 	add	local06, #1
0992c     F2 28 62 FC | 	wrlong	local06, objptr
09930     57 00 00 FF 
09934     28 E4 85 F1 | 	sub	objptr, ##44584
09938     1C F4 BF FD | 	call	#_expr
0993c                 | '     ct+=1
0993c                 | '     expr() 
0993c                 | '     if lparts(ct).token=token_rpar then ct+=1
0993c     57 00 00 FF 
09940     28 E4 05 F1 | 	add	objptr, ##44584
09944     F2 32 02 FB | 	rdlong	local11, objptr
09948     03 32 66 F0 | 	shl	local11, #3
0994c     02 00 00 FF 
09950     38 E4 85 F1 | 	sub	objptr, ##1080
09954     F2 32 02 F1 | 	add	local11, objptr
09958     04 32 06 F1 | 	add	local11, #4
0995c     19 33 02 FB | 	rdlong	local11, local11
09960     14 32 0E F2 | 	cmp	local11, #20 wz
09964     54 00 00 FF 
09968     F0 E5 85 F1 | 	sub	objptr, ##43504
0996c     44 00 90 5D |  if_ne	jmp	#LR__0796
09970     57 00 00 FF 
09974     28 E4 05 F1 | 	add	objptr, ##44584
09978     F2 28 02 FB | 	rdlong	local06, objptr
0997c     01 28 06 F1 | 	add	local06, #1
09980     F2 28 62 FC | 	wrlong	local06, objptr
09984     57 00 00 FF 
09988     28 E4 85 F1 | 	sub	objptr, ##44584
0998c     24 00 90 FD | 	jmp	#LR__0796
09990                 | LR__0795
09990     12 13 02 F6 | 	mov	arg01, local04
09994     28 00 B0 FD | 	call	#_getfun
09998     57 00 00 FF 
0999c     28 E4 05 F1 | 	add	objptr, ##44584
099a0     F2 28 02 FB | 	rdlong	local06, objptr
099a4     01 28 06 F1 | 	add	local06, #1
099a8     F2 28 62 FC | 	wrlong	local06, objptr
099ac     57 00 00 FF 
099b0     28 E4 85 F1 | 	sub	objptr, ##44584
099b4                 | LR__0796
099b4     A7 F0 03 F6 | 	mov	ptra, fp
099b8     B2 00 A0 FD | 	call	#popregs_
099bc                 | _getvalue_ret
099bc     2D 00 64 FD | 	ret
099c0                 | 
099c0                 | ' 
099c0                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
099c0                 | _getfun
099c0     0A 4A 05 F6 | 	mov	COUNT_, #10
099c4     A8 00 A0 FD | 	call	#pushregs_
099c8                 | _getfun_enter
099c8     09 25 02 F6 | 	mov	local04, arg01
099cc     57 00 00 FF 
099d0     28 E4 05 F1 | 	add	objptr, ##44584
099d4     F2 26 02 FB | 	rdlong	local05, objptr
099d8     13 29 02 F6 | 	mov	local06, local05
099dc     00 2A 06 F6 | 	mov	local07, #0
099e0                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
099e0                 | ' oldct=ct
099e0                 | ' numpar=0
099e0                 | '   
099e0                 | ' if lparts(ct+1).token=token_lpar then
099e0     01 26 06 F1 | 	add	local05, #1
099e4     03 26 66 F0 | 	shl	local05, #3
099e8     02 00 00 FF 
099ec     38 E4 85 F1 | 	sub	objptr, ##1080
099f0     F2 26 02 F1 | 	add	local05, objptr
099f4     04 26 06 F1 | 	add	local05, #4
099f8     13 27 02 FB | 	rdlong	local05, local05
099fc     15 26 0E F2 | 	cmp	local05, #21 wz
09a00     54 00 00 FF 
09a04     F0 E5 85 F1 | 	sub	objptr, ##43504
09a08     08 01 90 5D |  if_ne	jmp	#LR__0804
09a0c     57 00 00 FF 
09a10     28 E4 05 F1 | 	add	objptr, ##44584
09a14     F2 2C 02 FB | 	rdlong	local08, objptr
09a18     01 2C 06 F1 | 	add	local08, #1
09a1c     F2 2C 62 FC | 	wrlong	local08, objptr
09a20     57 00 00 FF 
09a24     28 E4 85 F1 | 	sub	objptr, ##44584
09a28                 | '   ct+=1 											' omit this lpar, this is for expr list
09a28                 | '   do
09a28                 | LR__0800
09a28     57 00 00 FF 
09a2c     28 E4 05 F1 | 	add	objptr, ##44584
09a30     F2 26 02 FB | 	rdlong	local05, objptr
09a34     01 26 06 F1 | 	add	local05, #1
09a38     F2 26 62 FC | 	wrlong	local05, objptr
09a3c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09a3c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09a3c     03 26 66 F0 | 	shl	local05, #3
09a40     02 00 00 FF 
09a44     38 E4 85 F1 | 	sub	objptr, ##1080
09a48     F2 26 02 F1 | 	add	local05, objptr
09a4c     04 26 06 F1 | 	add	local05, #4
09a50     13 2D 02 FB | 	rdlong	local08, local05
09a54     15 2C 0E F2 | 	cmp	local08, #21 wz
09a58     54 00 00 FF 
09a5c     F0 E5 85 F1 | 	sub	objptr, ##43504
09a60     40 00 90 5D |  if_ne	jmp	#LR__0801
09a64     57 00 00 FF 
09a68     28 E4 05 F1 | 	add	objptr, ##44584
09a6c     F2 2C 02 FB | 	rdlong	local08, objptr
09a70     01 2C 06 F1 | 	add	local08, #1
09a74     F2 2C 62 FC | 	wrlong	local08, objptr
09a78     57 00 00 FF 
09a7c     28 E4 85 F1 | 	sub	objptr, ##44584
09a80     D4 F2 BF FD | 	call	#_expr
09a84     57 00 00 FF 
09a88     28 E4 05 F1 | 	add	objptr, ##44584
09a8c     F2 2C 02 FB | 	rdlong	local08, objptr
09a90     01 2C 06 F1 | 	add	local08, #1
09a94     F2 2C 62 FC | 	wrlong	local08, objptr
09a98     57 00 00 FF 
09a9c     28 E4 85 F1 | 	sub	objptr, ##44584
09aa0     04 00 90 FD | 	jmp	#LR__0802
09aa4                 | LR__0801
09aa4     B0 F2 BF FD | 	call	#_expr
09aa8                 | LR__0802
09aa8     01 2A 06 F1 | 	add	local07, #1
09aac     57 00 00 FF 
09ab0     28 E4 05 F1 | 	add	objptr, ##44584
09ab4     F2 26 02 FB | 	rdlong	local05, objptr
09ab8     03 26 66 F0 | 	shl	local05, #3
09abc     02 00 00 FF 
09ac0     38 E4 85 F1 | 	sub	objptr, ##1080
09ac4     F2 26 02 F1 | 	add	local05, objptr
09ac8     04 26 06 F1 | 	add	local05, #4
09acc     13 2D 02 FB | 	rdlong	local08, local05
09ad0     14 2C 0E F2 | 	cmp	local08, #20 wz
09ad4     54 00 00 FF 
09ad8     F0 E5 85 F1 | 	sub	objptr, ##43504
09adc     34 00 90 AD |  if_e	jmp	#LR__0803
09ae0     57 00 00 FF 
09ae4     28 E4 05 F1 | 	add	objptr, ##44584
09ae8     F2 2C 02 FB | 	rdlong	local08, objptr
09aec     03 2C 66 F0 | 	shl	local08, #3
09af0     02 00 00 FF 
09af4     38 E4 85 F1 | 	sub	objptr, ##1080
09af8     F2 2C 02 F1 | 	add	local08, objptr
09afc     04 2C 06 F1 | 	add	local08, #4
09b00     16 2D 02 FB | 	rdlong	local08, local08
09b04     FE 2D 0E F2 | 	cmp	local08, #510 wz
09b08     54 00 00 FF 
09b0c     F0 E5 85 F1 | 	sub	objptr, ##43504
09b10     14 FF 9F 5D |  if_ne	jmp	#LR__0800
09b14                 | LR__0803
09b14                 | LR__0804
09b14     15 1F 02 F6 | 	mov	local01, local07
09b18     03 28 66 F0 | 	shl	local06, #3
09b1c     54 00 00 FF 
09b20     F0 E5 05 F1 | 	add	objptr, ##43504
09b24     F2 28 02 F1 | 	add	local06, objptr
09b28     04 28 06 F1 | 	add	local06, #4
09b2c     14 23 02 FB | 	rdlong	local03, local06
09b30     0F 2D 02 F6 | 	mov	local08, local01
09b34     10 2B 02 F6 | 	mov	local07, local02
09b38     11 29 02 F6 | 	mov	local06, local03
09b3c     15 00 00 FF 
09b40     70 E4 05 F1 | 	add	objptr, ##10864
09b44     F2 26 02 FB | 	rdlong	local05, objptr
09b48     13 13 02 F6 | 	mov	arg01, local05
09b4c     01 12 66 F0 | 	shl	arg01, #1
09b50     13 13 02 F1 | 	add	arg01, local05
09b54     02 12 66 F0 | 	shl	arg01, #2
09b58     03 00 00 FF 
09b5c     00 E4 85 F1 | 	sub	objptr, ##1536
09b60     F2 12 02 F1 | 	add	arg01, objptr
09b64     09 2D 62 FC | 	wrlong	local08, arg01
09b68     03 00 00 FF 
09b6c     00 E4 05 F1 | 	add	objptr, ##1536
09b70     F2 2C 02 FB | 	rdlong	local08, objptr
09b74     16 2F 02 F6 | 	mov	local09, local08
09b78     01 2E 66 F0 | 	shl	local09, #1
09b7c     16 2F 02 F1 | 	add	local09, local08
09b80     02 2E 66 F0 | 	shl	local09, #2
09b84     03 00 00 FF 
09b88     00 E4 85 F1 | 	sub	objptr, ##1536
09b8c     F2 2E 02 F1 | 	add	local09, objptr
09b90     04 2E 06 F1 | 	add	local09, #4
09b94     17 2B 62 FC | 	wrlong	local07, local09
09b98     03 00 00 FF 
09b9c     00 E4 05 F1 | 	add	objptr, ##1536
09ba0     F2 2C 02 FB | 	rdlong	local08, objptr
09ba4     16 31 02 F6 | 	mov	local10, local08
09ba8     01 30 66 F0 | 	shl	local10, #1
09bac     16 31 02 F1 | 	add	local10, local08
09bb0     02 30 66 F0 | 	shl	local10, #2
09bb4     03 00 00 FF 
09bb8     00 E4 85 F1 | 	sub	objptr, ##1536
09bbc     F2 30 02 F1 | 	add	local10, objptr
09bc0     08 30 06 F1 | 	add	local10, #8
09bc4     18 29 62 FC | 	wrlong	local06, local10
09bc8     03 00 00 FF 
09bcc     00 E4 05 F1 | 	add	objptr, ##1536
09bd0     F2 2C 02 FB | 	rdlong	local08, objptr
09bd4     01 2C 06 F1 | 	add	local08, #1
09bd8     F2 2C 62 FC | 	wrlong	local08, objptr
09bdc     6A 00 00 FF 
09be0     60 E4 85 F1 | 	sub	objptr, ##54368
09be4                 | ' 
09be4                 | ' t2.result.uresult=numpar
09be4                 | ' 
09be4                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
09be4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09be4                 | ' 
09be4                 | '   
09be4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09be4     FF FF 7F FF 
09be8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09bec     B8 00 90 5D |  if_ne	jmp	#LR__0805
09bf0     15 22 06 F6 | 	mov	local03, #21
09bf4     0F 2D 02 F6 | 	mov	local08, local01
09bf8     10 2B 02 F6 | 	mov	local07, local02
09bfc     11 29 02 F6 | 	mov	local06, local03
09c00     6A 00 00 FF 
09c04     60 E4 05 F1 | 	add	objptr, ##54368
09c08     F2 26 02 FB | 	rdlong	local05, objptr
09c0c     13 13 02 F6 | 	mov	arg01, local05
09c10     01 12 66 F0 | 	shl	arg01, #1
09c14     13 13 02 F1 | 	add	arg01, local05
09c18     02 12 66 F0 | 	shl	arg01, #2
09c1c     03 00 00 FF 
09c20     00 E4 85 F1 | 	sub	objptr, ##1536
09c24     F2 12 02 F1 | 	add	arg01, objptr
09c28     09 2D 62 FC | 	wrlong	local08, arg01
09c2c     03 00 00 FF 
09c30     00 E4 05 F1 | 	add	objptr, ##1536
09c34     F2 30 02 FB | 	rdlong	local10, objptr
09c38     18 2F 02 F6 | 	mov	local09, local10
09c3c     01 2E 66 F0 | 	shl	local09, #1
09c40     18 2F 02 F1 | 	add	local09, local10
09c44     02 2E 66 F0 | 	shl	local09, #2
09c48     03 00 00 FF 
09c4c     00 E4 85 F1 | 	sub	objptr, ##1536
09c50     F2 2E 02 F1 | 	add	local09, objptr
09c54     04 2E 06 F1 | 	add	local09, #4
09c58     17 2B 62 FC | 	wrlong	local07, local09
09c5c     03 00 00 FF 
09c60     00 E4 05 F1 | 	add	objptr, ##1536
09c64     F2 2E 02 FB | 	rdlong	local09, objptr
09c68     17 31 02 F6 | 	mov	local10, local09
09c6c     01 30 66 F0 | 	shl	local10, #1
09c70     17 31 02 F1 | 	add	local10, local09
09c74     02 30 66 F0 | 	shl	local10, #2
09c78     03 00 00 FF 
09c7c     00 E4 85 F1 | 	sub	objptr, ##1536
09c80     F2 30 02 F1 | 	add	local10, objptr
09c84     08 30 06 F1 | 	add	local10, #8
09c88     18 29 62 FC | 	wrlong	local06, local10
09c8c     03 00 00 FF 
09c90     00 E4 05 F1 | 	add	objptr, ##1536
09c94     F2 2C 02 FB | 	rdlong	local08, objptr
09c98     01 2C 06 F1 | 	add	local08, #1
09c9c     F2 2C 62 FC | 	wrlong	local08, objptr
09ca0     6A 00 00 FF 
09ca4     60 E4 85 F1 | 	sub	objptr, ##54368
09ca8                 | LR__0805
09ca8     A7 F0 03 F6 | 	mov	ptra, fp
09cac     B2 00 A0 FD | 	call	#popregs_
09cb0                 | _getfun_ret
09cb0     2D 00 64 FD | 	ret
09cb4                 | 
09cb4                 | '   
09cb4                 | '   
09cb4                 | ' sub getvar(m as integer) 
09cb4                 | _getvar
09cb4     0A 4A 05 F6 | 	mov	COUNT_, #10
09cb8     A8 00 A0 FD | 	call	#pushregs_
09cbc                 | _getvar_enter
09cbc     09 25 02 F6 | 	mov	local04, arg01
09cc0     57 00 00 FF 
09cc4     28 E4 05 F1 | 	add	objptr, ##44584
09cc8     F2 14 02 FB | 	rdlong	arg02, objptr
09ccc     03 14 66 F0 | 	shl	arg02, #3
09cd0     02 00 00 FF 
09cd4     38 E4 85 F1 | 	sub	objptr, ##1080
09cd8     F2 14 02 F1 | 	add	arg02, objptr
09cdc     0A 27 02 FB | 	rdlong	local05, arg02
09ce0     13 13 02 F6 | 	mov	arg01, local05
09ce4     01 14 06 F6 | 	mov	arg02, #1
09ce8     54 00 00 FF 
09cec     F0 E5 85 F1 | 	sub	objptr, ##43504
09cf0     B8 4B B1 FD | 	call	#__system__Right_S
09cf4     FD 28 02 F6 | 	mov	local06, result1
09cf8     01 2A 66 F6 | 	neg	local07, #1
09cfc                 | ' 
09cfc                 | ' varname$=lparts(ct).part$
09cfc                 | ' suffix$=right$(varname$,1)
09cfc                 | ' j=-1
09cfc                 | ' 
09cfc                 | ' for i=0 to varnum-1
09cfc     00 2C 06 F6 | 	mov	local08, #0
09d00     54 00 00 FF 
09d04     EC E5 05 F1 | 	add	objptr, ##43500
09d08     F2 2E 02 FB | 	rdlong	local09, objptr
09d0c     54 00 00 FF 
09d10     EC E5 85 F1 | 	sub	objptr, ##43500
09d14                 | LR__0810
09d14     17 2D 52 F2 | 	cmps	local08, local09 wc
09d18     38 00 90 3D |  if_ae	jmp	#LR__0811
09d1c                 | '   if variables(i).name=varname$ then j=i : exit
09d1c     16 15 02 F6 | 	mov	arg02, local08
09d20     04 14 66 F0 | 	shl	arg02, #4
09d24     34 00 00 FF 
09d28     EC E5 05 F1 | 	add	objptr, ##27116
09d2c     F2 14 02 F1 | 	add	arg02, objptr
09d30     0A 13 02 FB | 	rdlong	arg01, arg02
09d34     13 15 02 F6 | 	mov	arg02, local05
09d38     34 00 00 FF 
09d3c     EC E5 85 F1 | 	sub	objptr, ##27116
09d40     C4 2A B1 FD | 	call	#__system___string_cmp
09d44     00 FA 0D F2 | 	cmp	result1, #0 wz
09d48     16 2B 02 A6 |  if_e	mov	local07, local08
09d4c     01 2C 06 51 |  if_ne	add	local08, #1
09d50     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
09d54                 | LR__0811
09d54                 | ' if  j=-1 andalso varnum<maxvars then   
09d54     FF FF 7F FF 
09d58     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09d5c     A8 00 90 5D |  if_ne	jmp	#LR__0812
09d60     54 00 00 FF 
09d64     EC E5 05 F1 | 	add	objptr, ##43500
09d68     F2 2E 02 FB | 	rdlong	local09, objptr
09d6c     54 00 00 FF 
09d70     EC E5 85 F1 | 	sub	objptr, ##43500
09d74     01 00 00 FF 
09d78     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09d7c     88 00 90 3D |  if_ae	jmp	#LR__0812
09d80     54 00 00 FF 
09d84     EC E5 05 F1 | 	add	objptr, ##43500
09d88     F2 2E 02 FB | 	rdlong	local09, objptr
09d8c     04 2E 66 F0 | 	shl	local09, #4
09d90     20 00 00 FF 
09d94     00 E4 85 F1 | 	sub	objptr, ##16384
09d98     F2 2E 02 F1 | 	add	local09, objptr
09d9c     17 27 62 FC | 	wrlong	local05, local09
09da0     20 00 00 FF 
09da4     00 E4 05 F1 | 	add	objptr, ##16384
09da8     F2 2E 02 FB | 	rdlong	local09, objptr
09dac     04 2E 66 F0 | 	shl	local09, #4
09db0     20 00 00 FF 
09db4     00 E4 85 F1 | 	sub	objptr, ##16384
09db8     F2 2E 02 F1 | 	add	local09, objptr
09dbc     04 2E 06 F1 | 	add	local09, #4
09dc0     17 01 68 FC | 	wrlong	#0, local09
09dc4     20 00 00 FF 
09dc8     00 E4 05 F1 | 	add	objptr, ##16384
09dcc     F2 2E 02 FB | 	rdlong	local09, objptr
09dd0     04 2E 66 F0 | 	shl	local09, #4
09dd4     20 00 00 FF 
09dd8     00 E4 85 F1 | 	sub	objptr, ##16384
09ddc     F2 2E 02 F1 | 	add	local09, objptr
09de0     0C 2E 06 F1 | 	add	local09, #12
09de4     17 39 68 FC | 	wrlong	#28, local09
09de8     20 00 00 FF 
09dec     00 E4 05 F1 | 	add	objptr, ##16384
09df0     F2 2E 02 FB | 	rdlong	local09, objptr
09df4     17 2B 02 F6 | 	mov	local07, local09
09df8     01 2E 06 F1 | 	add	local09, #1
09dfc     F2 2E 62 FC | 	wrlong	local09, objptr
09e00     54 00 00 FF 
09e04     EC E5 85 F1 | 	sub	objptr, ##43500
09e08                 | LR__0812
09e08     00 2E 06 F6 | 	mov	local09, #0
09e0c                 | ' numpar=0
09e0c                 | ' ' check if it is an array
09e0c                 | ' 
09e0c                 | ' if lparts(ct+1).token=token_lpar then
09e0c     57 00 00 FF 
09e10     28 E4 05 F1 | 	add	objptr, ##44584
09e14     F2 2C 02 FB | 	rdlong	local08, objptr
09e18     01 2C 06 F1 | 	add	local08, #1
09e1c     03 2C 66 F0 | 	shl	local08, #3
09e20     02 00 00 FF 
09e24     38 E4 85 F1 | 	sub	objptr, ##1080
09e28     F2 2C 02 F1 | 	add	local08, objptr
09e2c     04 2C 06 F1 | 	add	local08, #4
09e30     16 2D 02 FB | 	rdlong	local08, local08
09e34     15 2C 0E F2 | 	cmp	local08, #21 wz
09e38     54 00 00 FF 
09e3c     F0 E5 85 F1 | 	sub	objptr, ##43504
09e40     08 01 90 5D |  if_ne	jmp	#LR__0817
09e44     57 00 00 FF 
09e48     28 E4 05 F1 | 	add	objptr, ##44584
09e4c     F2 30 02 FB | 	rdlong	local10, objptr
09e50     01 30 06 F1 | 	add	local10, #1
09e54     F2 30 62 FC | 	wrlong	local10, objptr
09e58     57 00 00 FF 
09e5c     28 E4 85 F1 | 	sub	objptr, ##44584
09e60                 | '   ct+=1 											' omit this lpar, this is for expr list
09e60                 | '   do
09e60                 | LR__0813
09e60     57 00 00 FF 
09e64     28 E4 05 F1 | 	add	objptr, ##44584
09e68     F2 2C 02 FB | 	rdlong	local08, objptr
09e6c     01 2C 06 F1 | 	add	local08, #1
09e70     F2 2C 62 FC | 	wrlong	local08, objptr
09e74                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09e74                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09e74     03 2C 66 F0 | 	shl	local08, #3
09e78     02 00 00 FF 
09e7c     38 E4 85 F1 | 	sub	objptr, ##1080
09e80     F2 2C 02 F1 | 	add	local08, objptr
09e84     04 2C 06 F1 | 	add	local08, #4
09e88     16 31 02 FB | 	rdlong	local10, local08
09e8c     15 30 0E F2 | 	cmp	local10, #21 wz
09e90     54 00 00 FF 
09e94     F0 E5 85 F1 | 	sub	objptr, ##43504
09e98     40 00 90 5D |  if_ne	jmp	#LR__0814
09e9c     57 00 00 FF 
09ea0     28 E4 05 F1 | 	add	objptr, ##44584
09ea4     F2 30 02 FB | 	rdlong	local10, objptr
09ea8     01 30 06 F1 | 	add	local10, #1
09eac     F2 30 62 FC | 	wrlong	local10, objptr
09eb0     57 00 00 FF 
09eb4     28 E4 85 F1 | 	sub	objptr, ##44584
09eb8     9C EE BF FD | 	call	#_expr
09ebc     57 00 00 FF 
09ec0     28 E4 05 F1 | 	add	objptr, ##44584
09ec4     F2 30 02 FB | 	rdlong	local10, objptr
09ec8     01 30 06 F1 | 	add	local10, #1
09ecc     F2 30 62 FC | 	wrlong	local10, objptr
09ed0     57 00 00 FF 
09ed4     28 E4 85 F1 | 	sub	objptr, ##44584
09ed8     04 00 90 FD | 	jmp	#LR__0815
09edc                 | LR__0814
09edc     78 EE BF FD | 	call	#_expr
09ee0                 | LR__0815
09ee0     01 2E 06 F1 | 	add	local09, #1
09ee4     57 00 00 FF 
09ee8     28 E4 05 F1 | 	add	objptr, ##44584
09eec     F2 2C 02 FB | 	rdlong	local08, objptr
09ef0     03 2C 66 F0 | 	shl	local08, #3
09ef4     02 00 00 FF 
09ef8     38 E4 85 F1 | 	sub	objptr, ##1080
09efc     F2 2C 02 F1 | 	add	local08, objptr
09f00     04 2C 06 F1 | 	add	local08, #4
09f04     16 31 02 FB | 	rdlong	local10, local08
09f08     14 30 0E F2 | 	cmp	local10, #20 wz
09f0c     54 00 00 FF 
09f10     F0 E5 85 F1 | 	sub	objptr, ##43504
09f14     34 00 90 AD |  if_e	jmp	#LR__0816
09f18     57 00 00 FF 
09f1c     28 E4 05 F1 | 	add	objptr, ##44584
09f20     F2 30 02 FB | 	rdlong	local10, objptr
09f24     03 30 66 F0 | 	shl	local10, #3
09f28     02 00 00 FF 
09f2c     38 E4 85 F1 | 	sub	objptr, ##1080
09f30     F2 30 02 F1 | 	add	local10, objptr
09f34     04 30 06 F1 | 	add	local10, #4
09f38     18 31 02 FB | 	rdlong	local10, local10
09f3c     FE 31 0E F2 | 	cmp	local10, #510 wz
09f40     54 00 00 FF 
09f44     F0 E5 85 F1 | 	sub	objptr, ##43504
09f48     14 FF 9F 5D |  if_ne	jmp	#LR__0813
09f4c                 | LR__0816
09f4c                 | LR__0817
09f4c     17 21 02 F6 | 	mov	local02, local09
09f50     11 22 06 F6 | 	mov	local03, #17
09f54     15 1F 02 F6 | 	mov	local01, local07
09f58     0F 31 02 F6 | 	mov	local10, local01
09f5c     10 2F 02 F6 | 	mov	local09, local02
09f60     11 2D 02 F6 | 	mov	local08, local03
09f64     6A 00 00 FF 
09f68     60 E4 05 F1 | 	add	objptr, ##54368
09f6c     F2 2A 02 FB | 	rdlong	local07, objptr
09f70     15 29 02 F6 | 	mov	local06, local07
09f74     01 28 66 F0 | 	shl	local06, #1
09f78     15 29 02 F1 | 	add	local06, local07
09f7c     02 28 66 F0 | 	shl	local06, #2
09f80     03 00 00 FF 
09f84     00 E4 85 F1 | 	sub	objptr, ##1536
09f88     F2 28 02 F1 | 	add	local06, objptr
09f8c     14 31 62 FC | 	wrlong	local10, local06
09f90     03 00 00 FF 
09f94     00 E4 05 F1 | 	add	objptr, ##1536
09f98     F2 30 02 FB | 	rdlong	local10, objptr
09f9c     18 27 02 F6 | 	mov	local05, local10
09fa0     01 26 66 F0 | 	shl	local05, #1
09fa4     18 27 02 F1 | 	add	local05, local10
09fa8     02 26 66 F0 | 	shl	local05, #2
09fac     03 00 00 FF 
09fb0     00 E4 85 F1 | 	sub	objptr, ##1536
09fb4     F2 26 02 F1 | 	add	local05, objptr
09fb8     04 26 06 F1 | 	add	local05, #4
09fbc     13 2F 62 FC | 	wrlong	local09, local05
09fc0     03 00 00 FF 
09fc4     00 E4 05 F1 | 	add	objptr, ##1536
09fc8     F2 30 02 FB | 	rdlong	local10, objptr
09fcc     18 FB 01 F6 | 	mov	result1, local10
09fd0     01 FA 65 F0 | 	shl	result1, #1
09fd4     18 FB 01 F1 | 	add	result1, local10
09fd8     02 FA 65 F0 | 	shl	result1, #2
09fdc     03 00 00 FF 
09fe0     00 E4 85 F1 | 	sub	objptr, ##1536
09fe4     F2 FA 01 F1 | 	add	result1, objptr
09fe8     08 FA 05 F1 | 	add	result1, #8
09fec     FD 2C 62 FC | 	wrlong	local08, result1
09ff0     03 00 00 FF 
09ff4     00 E4 05 F1 | 	add	objptr, ##1536
09ff8     F2 30 02 FB | 	rdlong	local10, objptr
09ffc     01 30 06 F1 | 	add	local10, #1
0a000     F2 30 62 FC | 	wrlong	local10, objptr
0a004     6A 00 00 FF 
0a008     60 E4 85 F1 | 	sub	objptr, ##54368
0a00c                 | ' 
0a00c                 | ' t2.result.twowords(1)=numpar
0a00c                 | ' 
0a00c                 | ' 
0a00c                 | ' 
0a00c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0a00c                 | ' 
0a00c                 | ' 
0a00c                 | '  
0a00c                 | ' 
0a00c                 | ' 701 
0a00c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a00c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a00c     FF FF 7F FF 
0a010     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a014     B8 00 90 5D |  if_ne	jmp	#LR__0818
0a018     15 22 06 F6 | 	mov	local03, #21
0a01c     0F 31 02 F6 | 	mov	local10, local01
0a020     10 2F 02 F6 | 	mov	local09, local02
0a024     11 2D 02 F6 | 	mov	local08, local03
0a028     6A 00 00 FF 
0a02c     60 E4 05 F1 | 	add	objptr, ##54368
0a030     F2 2A 02 FB | 	rdlong	local07, objptr
0a034     15 29 02 F6 | 	mov	local06, local07
0a038     01 28 66 F0 | 	shl	local06, #1
0a03c     15 29 02 F1 | 	add	local06, local07
0a040     02 28 66 F0 | 	shl	local06, #2
0a044     03 00 00 FF 
0a048     00 E4 85 F1 | 	sub	objptr, ##1536
0a04c     F2 28 02 F1 | 	add	local06, objptr
0a050     14 31 62 FC | 	wrlong	local10, local06
0a054     03 00 00 FF 
0a058     00 E4 05 F1 | 	add	objptr, ##1536
0a05c     F2 1E 02 FB | 	rdlong	local01, objptr
0a060     0F 27 02 F6 | 	mov	local05, local01
0a064     01 26 66 F0 | 	shl	local05, #1
0a068     0F 27 02 F1 | 	add	local05, local01
0a06c     02 26 66 F0 | 	shl	local05, #2
0a070     03 00 00 FF 
0a074     00 E4 85 F1 | 	sub	objptr, ##1536
0a078     F2 26 02 F1 | 	add	local05, objptr
0a07c     04 26 06 F1 | 	add	local05, #4
0a080     13 2F 62 FC | 	wrlong	local09, local05
0a084     03 00 00 FF 
0a088     00 E4 05 F1 | 	add	objptr, ##1536
0a08c     F2 1E 02 FB | 	rdlong	local01, objptr
0a090     0F FB 01 F6 | 	mov	result1, local01
0a094     01 FA 65 F0 | 	shl	result1, #1
0a098     0F FB 01 F1 | 	add	result1, local01
0a09c     02 FA 65 F0 | 	shl	result1, #2
0a0a0     03 00 00 FF 
0a0a4     00 E4 85 F1 | 	sub	objptr, ##1536
0a0a8     F2 FA 01 F1 | 	add	result1, objptr
0a0ac     08 FA 05 F1 | 	add	result1, #8
0a0b0     FD 2C 62 FC | 	wrlong	local08, result1
0a0b4     03 00 00 FF 
0a0b8     00 E4 05 F1 | 	add	objptr, ##1536
0a0bc     F2 30 02 FB | 	rdlong	local10, objptr
0a0c0     01 30 06 F1 | 	add	local10, #1
0a0c4     F2 30 62 FC | 	wrlong	local10, objptr
0a0c8     6A 00 00 FF 
0a0cc     60 E4 85 F1 | 	sub	objptr, ##54368
0a0d0                 | LR__0818
0a0d0     A7 F0 03 F6 | 	mov	ptra, fp
0a0d4     B2 00 A0 FD | 	call	#popregs_
0a0d8                 | _getvar_ret
0a0d8     2D 00 64 FD | 	ret
0a0dc                 | 
0a0dc                 | ' 
0a0dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0dc                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0a0dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0dc                 | ' 
0a0dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0dc                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0a0dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0dc                 | ' 
0a0dc                 | ' function execute_line (astart=0 as integer) as integer
0a0dc                 | _execute_line
0a0dc     04 4A 05 F6 | 	mov	COUNT_, #4
0a0e0     A8 00 A0 FD | 	call	#pushregs_
0a0e4     79 00 00 FF 
0a0e8     98 E5 05 F1 | 	add	objptr, ##62360
0a0ec     F2 00 68 FC | 	wrlong	#0, objptr
0a0f0                 | ' runptr2=0
0a0f0                 | ' for lineptr_e=astart to lineptr-1
0a0f0     0F 00 00 FF 
0a0f4     34 E5 85 F1 | 	sub	objptr, ##7988
0a0f8     F2 12 62 FC | 	wrlong	arg01, objptr
0a0fc     04 E4 85 F1 | 	sub	objptr, #4
0a100     F2 1E 02 FB | 	rdlong	local01, objptr
0a104     6A 00 00 FF 
0a108     60 E4 85 F1 | 	sub	objptr, ##54368
0a10c                 | LR__0820
0a10c     6A 00 00 FF 
0a110     64 E4 05 F1 | 	add	objptr, ##54372
0a114     F2 FA 01 FB | 	rdlong	result1, objptr
0a118     6A 00 00 FF 
0a11c     64 E4 85 F1 | 	sub	objptr, ##54372
0a120     0F FB 51 F2 | 	cmps	result1, local01 wc
0a124     98 00 90 3D |  if_ae	jmp	#LR__0821
0a128     6A 00 00 FF 
0a12c     64 E4 05 F1 | 	add	objptr, ##54372
0a130     F2 FA 01 FB | 	rdlong	result1, objptr
0a134     FD 20 02 F6 | 	mov	local02, result1
0a138     01 20 66 F0 | 	shl	local02, #1
0a13c     FD 20 02 F1 | 	add	local02, result1
0a140     02 20 66 F0 | 	shl	local02, #2
0a144     03 00 00 FF 
0a148     04 E4 85 F1 | 	sub	objptr, ##1540
0a14c     F2 20 02 F1 | 	add	local02, objptr
0a150     08 20 06 F1 | 	add	local02, #8
0a154     10 21 02 FB | 	rdlong	local02, local02
0a158     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a15c     02 20 66 F0 | 	shl	local02, #2
0a160     04 00 00 FF 
0a164     1C E4 85 F1 | 	sub	objptr, ##2076
0a168     F2 20 02 F1 | 	add	local02, objptr
0a16c     10 21 02 FB | 	rdlong	local02, local02
0a170     10 23 02 F6 | 	mov	local03, local02
0a174     13 20 46 F7 | 	zerox	local02, #19
0a178     14 22 46 F0 | 	shr	local03, #20
0a17c     02 22 66 F0 | 	shl	local03, #2
0a180     ED 22 02 F1 | 	add	local03, __methods__
0a184     11 23 02 FB | 	rdlong	local03, local03
0a188     63 00 00 FF 
0a18c     44 E4 85 F1 | 	sub	objptr, ##50756
0a190     F2 24 02 F6 | 	mov	local04, objptr
0a194     10 E5 01 F6 | 	mov	objptr, local02
0a198     2D 22 62 FD | 	call	local03
0a19c     12 E5 01 F6 | 	mov	objptr, local04
0a1a0     6A 00 00 FF 
0a1a4     64 E4 05 F1 | 	add	objptr, ##54372
0a1a8     F2 24 02 FB | 	rdlong	local04, objptr
0a1ac     01 24 06 F1 | 	add	local04, #1
0a1b0     F2 24 62 FC | 	wrlong	local04, objptr
0a1b4     6A 00 00 FF 
0a1b8     64 E4 85 F1 | 	sub	objptr, ##54372
0a1bc     4C FF 9F FD | 	jmp	#LR__0820
0a1c0                 | LR__0821
0a1c0                 | ' return runptr2
0a1c0     79 00 00 FF 
0a1c4     98 E5 05 F1 | 	add	objptr, ##62360
0a1c8     F2 FA 01 FB | 	rdlong	result1, objptr
0a1cc     79 00 00 FF 
0a1d0     98 E5 85 F1 | 	sub	objptr, ##62360
0a1d4     A7 F0 03 F6 | 	mov	ptra, fp
0a1d8     B2 00 A0 FD | 	call	#popregs_
0a1dc                 | _execute_line_ret
0a1dc     2D 00 64 FD | 	ret
0a1e0                 | 
0a1e0                 | ' 
0a1e0                 | ' 
0a1e0                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a1e0                 | ' 
0a1e0                 | ' function pop() as expr_result
0a1e0                 | _pop
0a1e0                 | ' 
0a1e0                 | ' if stackpointer=0 then
0a1e0     63 00 00 FF 
0a1e4     3C E4 05 F1 | 	add	objptr, ##50748
0a1e8     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a1ec     63 00 00 FF 
0a1f0     3C E4 85 F1 | 	sub	objptr, ##50748
0a1f4     FF 04 06 A6 |  if_e	mov	_var03, #255
0a1f8     18 00 06 A6 |  if_e	mov	_var01, #24
0a1fc     68 00 90 AD |  if_e	jmp	#LR__0830
0a200     63 00 00 FF 
0a204     3C E4 05 F1 | 	add	objptr, ##50748
0a208     F2 FA 01 FB | 	rdlong	result1, objptr
0a20c     01 FA 85 F1 | 	sub	result1, #1
0a210     F2 FA 61 FC | 	wrlong	result1, objptr
0a214     FD FE 01 F6 | 	mov	result3, result1
0a218     01 FE 65 F0 | 	shl	result3, #1
0a21c     FD FE 01 F1 | 	add	result3, result1
0a220     02 FE 65 F0 | 	shl	result3, #2
0a224     0C 00 00 FF 
0a228     0C E4 85 F1 | 	sub	objptr, ##6156
0a22c     F2 FE 01 F1 | 	add	result3, objptr
0a230     FF 00 02 FB | 	rdlong	_var01, result3
0a234     04 FE 05 F1 | 	add	result3, #4
0a238     FF FE 01 FB | 	rdlong	result3, result3
0a23c     FD FC 01 F6 | 	mov	result2, result1
0a240     01 FC 65 F0 | 	shl	result2, #1
0a244     FD FC 01 F1 | 	add	result2, result1
0a248     02 FC 65 F0 | 	shl	result2, #2
0a24c     F2 FC 01 F1 | 	add	result2, objptr
0a250     08 FC 05 F1 | 	add	result2, #8
0a254     FE FA 01 FB | 	rdlong	result1, result2
0a258     FF 02 02 F6 | 	mov	_var02, result3
0a25c     FD 04 02 F6 | 	mov	_var03, result1
0a260     57 00 00 FF 
0a264     30 E4 85 F1 | 	sub	objptr, ##44592
0a268                 | LR__0830
0a268                 | ' return t1
0a268     01 FD 01 F6 | 	mov	result2, _var02
0a26c     02 FF 01 F6 | 	mov	result3, _var03
0a270     00 FB 01 F6 | 	mov	result1, _var01
0a274                 | _pop_ret
0a274     2D 00 64 FD | 	ret
0a278                 | 
0a278                 | ' 
0a278                 | ' sub push(t1 as expr_result )
0a278                 | _push
0a278                 | ' 
0a278                 | ' 'print "In push: "; t1.result_type
0a278                 | ' 'print "In push: "; t1.result.uresult
0a278                 | ' 
0a278                 | ' if stackpointer<maxstack then 
0a278     63 00 00 FF 
0a27c     3C E4 05 F1 | 	add	objptr, ##50748
0a280     F2 00 02 FB | 	rdlong	_var01, objptr
0a284     63 00 00 FF 
0a288     3C E4 85 F1 | 	sub	objptr, ##50748
0a28c     01 00 00 FF 
0a290     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a294     BC 00 90 3D |  if_ae	jmp	#LR__0840
0a298     09 01 02 FB | 	rdlong	_var01, arg01
0a29c     04 12 06 F1 | 	add	arg01, #4
0a2a0     09 03 02 FB | 	rdlong	_var02, arg01
0a2a4     04 12 06 F1 | 	add	arg01, #4
0a2a8     09 13 02 FB | 	rdlong	arg01, arg01
0a2ac     63 00 00 FF 
0a2b0     3C E4 05 F1 | 	add	objptr, ##50748
0a2b4     F2 04 02 FB | 	rdlong	_var03, objptr
0a2b8     02 07 02 F6 | 	mov	_var04, _var03
0a2bc     01 06 66 F0 | 	shl	_var04, #1
0a2c0     02 07 02 F1 | 	add	_var04, _var03
0a2c4     02 06 66 F0 | 	shl	_var04, #2
0a2c8     0C 00 00 FF 
0a2cc     0C E4 85 F1 | 	sub	objptr, ##6156
0a2d0     F2 06 02 F1 | 	add	_var04, objptr
0a2d4     03 01 62 FC | 	wrlong	_var01, _var04
0a2d8     0C 00 00 FF 
0a2dc     0C E4 05 F1 | 	add	objptr, ##6156
0a2e0     F2 06 02 FB | 	rdlong	_var04, objptr
0a2e4     03 05 02 F6 | 	mov	_var03, _var04
0a2e8     01 04 66 F0 | 	shl	_var03, #1
0a2ec     03 05 02 F1 | 	add	_var03, _var04
0a2f0     02 04 66 F0 | 	shl	_var03, #2
0a2f4     0C 00 00 FF 
0a2f8     0C E4 85 F1 | 	sub	objptr, ##6156
0a2fc     F2 04 02 F1 | 	add	_var03, objptr
0a300     04 04 06 F1 | 	add	_var03, #4
0a304     02 03 62 FC | 	wrlong	_var02, _var03
0a308     0C 00 00 FF 
0a30c     0C E4 05 F1 | 	add	objptr, ##6156
0a310     F2 06 02 FB | 	rdlong	_var04, objptr
0a314     03 05 02 F6 | 	mov	_var03, _var04
0a318     01 04 66 F0 | 	shl	_var03, #1
0a31c     03 05 02 F1 | 	add	_var03, _var04
0a320     02 04 66 F0 | 	shl	_var03, #2
0a324     0C 00 00 FF 
0a328     0C E4 85 F1 | 	sub	objptr, ##6156
0a32c     F2 04 02 F1 | 	add	_var03, objptr
0a330     08 04 06 F1 | 	add	_var03, #8
0a334     02 13 62 FC | 	wrlong	arg01, _var03
0a338     0C 00 00 FF 
0a33c     0C E4 05 F1 | 	add	objptr, ##6156
0a340     F2 00 02 FB | 	rdlong	_var01, objptr
0a344     01 00 06 F1 | 	add	_var01, #1
0a348     F2 00 62 FC | 	wrlong	_var01, objptr
0a34c     63 00 00 FF 
0a350     3C E4 85 F1 | 	sub	objptr, ##50748
0a354                 | LR__0840
0a354                 | _push_ret
0a354     2D 00 64 FD | 	ret
0a358                 | 
0a358                 | ' 
0a358                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a358                 | ' 
0a358                 | ' sub do_push
0a358                 | _do_push
0a358                 | ' if stackpointer<maxstack then 
0a358     63 00 00 FF 
0a35c     3C E4 05 F1 | 	add	objptr, ##50748
0a360     F2 00 02 FB | 	rdlong	_var01, objptr
0a364     63 00 00 FF 
0a368     3C E4 85 F1 | 	sub	objptr, ##50748
0a36c     01 00 00 FF 
0a370     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a374     F8 00 90 3D |  if_ae	jmp	#LR__0850
0a378     6A 00 00 FF 
0a37c     64 E4 05 F1 | 	add	objptr, ##54372
0a380     F2 02 02 FB | 	rdlong	_var02, objptr
0a384     01 05 02 F6 | 	mov	_var03, _var02
0a388     01 04 66 F0 | 	shl	_var03, #1
0a38c     01 05 02 F1 | 	add	_var03, _var02
0a390     02 04 66 F0 | 	shl	_var03, #2
0a394     03 00 00 FF 
0a398     04 E4 85 F1 | 	sub	objptr, ##1540
0a39c     F2 04 02 F1 | 	add	_var03, objptr
0a3a0     02 01 02 FB | 	rdlong	_var01, _var03
0a3a4     04 04 06 F1 | 	add	_var03, #4
0a3a8     02 07 02 FB | 	rdlong	_var04, _var03
0a3ac     01 05 02 F6 | 	mov	_var03, _var02
0a3b0     01 04 66 F0 | 	shl	_var03, #1
0a3b4     01 05 02 F1 | 	add	_var03, _var02
0a3b8     02 04 66 F0 | 	shl	_var03, #2
0a3bc     F2 04 02 F1 | 	add	_var03, objptr
0a3c0     08 04 06 F1 | 	add	_var03, #8
0a3c4     02 03 02 FB | 	rdlong	_var02, _var03
0a3c8     04 00 00 FF 
0a3cc     24 E4 85 F1 | 	sub	objptr, ##2084
0a3d0     F2 04 02 FB | 	rdlong	_var03, objptr
0a3d4     02 09 02 F6 | 	mov	_var05, _var03
0a3d8     01 08 66 F0 | 	shl	_var05, #1
0a3dc     02 09 02 F1 | 	add	_var05, _var03
0a3e0     02 08 66 F0 | 	shl	_var05, #2
0a3e4     0C 00 00 FF 
0a3e8     0C E4 85 F1 | 	sub	objptr, ##6156
0a3ec     F2 08 02 F1 | 	add	_var05, objptr
0a3f0     04 01 62 FC | 	wrlong	_var01, _var05
0a3f4     0C 00 00 FF 
0a3f8     0C E4 05 F1 | 	add	objptr, ##6156
0a3fc     F2 08 02 FB | 	rdlong	_var05, objptr
0a400     04 05 02 F6 | 	mov	_var03, _var05
0a404     01 04 66 F0 | 	shl	_var03, #1
0a408     04 05 02 F1 | 	add	_var03, _var05
0a40c     02 04 66 F0 | 	shl	_var03, #2
0a410     0C 00 00 FF 
0a414     0C E4 85 F1 | 	sub	objptr, ##6156
0a418     F2 04 02 F1 | 	add	_var03, objptr
0a41c     04 04 06 F1 | 	add	_var03, #4
0a420     02 07 62 FC | 	wrlong	_var04, _var03
0a424     0C 00 00 FF 
0a428     0C E4 05 F1 | 	add	objptr, ##6156
0a42c     F2 08 02 FB | 	rdlong	_var05, objptr
0a430     04 07 02 F6 | 	mov	_var04, _var05
0a434     01 06 66 F0 | 	shl	_var04, #1
0a438     04 07 02 F1 | 	add	_var04, _var05
0a43c     02 06 66 F0 | 	shl	_var04, #2
0a440     0C 00 00 FF 
0a444     0C E4 85 F1 | 	sub	objptr, ##6156
0a448     F2 06 02 F1 | 	add	_var04, objptr
0a44c     08 06 06 F1 | 	add	_var04, #8
0a450     03 03 62 FC | 	wrlong	_var02, _var04
0a454     0C 00 00 FF 
0a458     0C E4 05 F1 | 	add	objptr, ##6156
0a45c     F2 00 02 FB | 	rdlong	_var01, objptr
0a460     01 00 06 F1 | 	add	_var01, #1
0a464     F2 00 62 FC | 	wrlong	_var01, objptr
0a468     63 00 00 FF 
0a46c     3C E4 85 F1 | 	sub	objptr, ##50748
0a470                 | LR__0850
0a470                 | _do_push_ret
0a470     2D 00 64 FD | 	ret
0a474                 | 
0a474                 | ' 
0a474                 | '   
0a474                 | ' sub csave_block(address as ulong)
0a474                 | _csave_block
0a474     09 01 02 F6 | 	mov	_var01, arg01
0a478                 | ' 
0a478                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0a478                 | ' ' we enter it at the state of playing 1 kHz header tone
0a478                 | ' 
0a478                 | ' for i=0 to 63 step 2
0a478     00 02 06 F6 | 	mov	_var02, #0
0a47c                 | LR__0860
0a47c                 | '   do: loop until lpeek(base+32*7)>32768
0a47c     56 00 00 FF 
0a480     F4 E5 05 F1 | 	add	objptr, ##44532
0a484     97 0C 48 FB | 	callpa	#(@LR__0862-@LR__0861)>>2,fcache_load_ptr_
0a488                 | LR__0861
0a488     F2 12 02 FB | 	rdlong	arg01, objptr
0a48c     E0 12 06 F1 | 	add	arg01, #224
0a490     09 FB 01 FB | 	rdlong	result1, arg01
0a494     40 00 00 FF 
0a498     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a49c     E8 FF 9F CD |  if_b	jmp	#LR__0861
0a4a0                 | LR__0862
0a4a0     00 13 02 F6 | 	mov	arg01, _var01
0a4a4     01 05 02 F6 | 	mov	_var03, _var02
0a4a8     02 04 66 F0 | 	shl	_var03, #2
0a4ac     02 13 02 F1 | 	add	arg01, _var03
0a4b0     09 07 02 FB | 	rdlong	_var04, arg01
0a4b4     24 00 00 FF 
0a4b8     D8 E4 05 F1 | 	add	objptr, ##18648
0a4bc     F2 06 62 FC | 	wrlong	_var04, objptr
0a4c0     7B 00 00 FF 
0a4c4     CC E4 85 F1 | 	sub	objptr, ##63180
0a4c8                 | '   q=lpeek(address+4*i)
0a4c8                 | '      for bit=0 to 31
0a4c8     00 08 06 F6 | 	mov	_var05, #0
0a4cc     97 84 48 FB | 	callpa	#(@LR__0867-@LR__0863)>>2,fcache_load_ptr_
0a4d0                 | LR__0863
0a4d0                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0a4d0     7B 00 00 FF 
0a4d4     CC E4 05 F1 | 	add	objptr, ##63180
0a4d8     F2 06 02 FB | 	rdlong	_var04, objptr
0a4dc     7B 00 00 FF 
0a4e0     CC E4 85 F1 | 	sub	objptr, ##63180
0a4e4     04 05 C2 F9 | 	decod	_var03, _var05
0a4e8     02 07 CA F7 | 	test	_var04, _var03 wz
0a4ec     60 00 90 AD |  if_e	jmp	#LR__0864
0a4f0     04 05 02 F6 | 	mov	_var03, _var05
0a4f4     02 04 66 F0 | 	shl	_var03, #2
0a4f8     77 00 00 FF 
0a4fc     90 E4 05 F1 | 	add	objptr, ##61072
0a500     F2 04 02 F1 | 	add	_var03, objptr
0a504     02 FF 48 FC | 	wrbyte	#127, _var03
0a508     04 05 02 F6 | 	mov	_var03, _var05
0a50c     02 04 66 F0 | 	shl	_var03, #2
0a510     01 04 06 F1 | 	add	_var03, #1
0a514     F2 04 02 F1 | 	add	_var03, objptr
0a518     02 01 49 FC | 	wrbyte	#128, _var03
0a51c     04 05 02 F6 | 	mov	_var03, _var05
0a520     02 04 66 F0 | 	shl	_var03, #2
0a524     02 04 06 F1 | 	add	_var03, #2
0a528     F2 04 02 F1 | 	add	_var03, objptr
0a52c     02 FF 48 FC | 	wrbyte	#127, _var03
0a530     04 05 02 F6 | 	mov	_var03, _var05
0a534     02 04 66 F0 | 	shl	_var03, #2
0a538     03 04 06 F1 | 	add	_var03, #3
0a53c     F2 04 02 F1 | 	add	_var03, objptr
0a540     02 01 49 FC | 	wrbyte	#128, _var03
0a544     77 00 00 FF 
0a548     90 E4 85 F1 | 	sub	objptr, ##61072
0a54c     5C 00 90 FD | 	jmp	#LR__0865
0a550                 | LR__0864
0a550     04 05 02 F6 | 	mov	_var03, _var05
0a554     02 04 66 F0 | 	shl	_var03, #2
0a558     77 00 00 FF 
0a55c     90 E4 05 F1 | 	add	objptr, ##61072
0a560     F2 04 02 F1 | 	add	_var03, objptr
0a564     02 01 49 FC | 	wrbyte	#128, _var03
0a568     04 05 02 F6 | 	mov	_var03, _var05
0a56c     02 04 66 F0 | 	shl	_var03, #2
0a570     01 04 06 F1 | 	add	_var03, #1
0a574     F2 04 02 F1 | 	add	_var03, objptr
0a578     02 01 49 FC | 	wrbyte	#128, _var03
0a57c     04 05 02 F6 | 	mov	_var03, _var05
0a580     02 04 66 F0 | 	shl	_var03, #2
0a584     02 04 06 F1 | 	add	_var03, #2
0a588     F2 04 02 F1 | 	add	_var03, objptr
0a58c     02 FF 48 FC | 	wrbyte	#127, _var03
0a590     04 05 02 F6 | 	mov	_var03, _var05
0a594     02 04 66 F0 | 	shl	_var03, #2
0a598     03 04 06 F1 | 	add	_var03, #3
0a59c     F2 04 02 F1 | 	add	_var03, objptr
0a5a0     02 FF 48 FC | 	wrbyte	#127, _var03
0a5a4     77 00 00 FF 
0a5a8     90 E4 85 F1 | 	sub	objptr, ##61072
0a5ac                 | LR__0865
0a5ac     01 08 06 F1 | 	add	_var05, #1
0a5b0     20 08 56 F2 | 	cmps	_var05, #32 wc
0a5b4     18 FF 9F CD |  if_b	jmp	#LR__0863
0a5b8                 | '   do: loop until lpeek(base+32*7)<32768
0a5b8     56 00 00 FF 
0a5bc     F4 E5 05 F1 | 	add	objptr, ##44532
0a5c0                 | LR__0866
0a5c0     F2 12 02 FB | 	rdlong	arg01, objptr
0a5c4     E0 12 06 F1 | 	add	arg01, #224
0a5c8     09 FB 01 FB | 	rdlong	result1, arg01
0a5cc     40 00 00 FF 
0a5d0     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a5d4     E8 FF 9F 3D |  if_ae	jmp	#LR__0866
0a5d8                 | LR__0867
0a5d8     00 13 02 F6 | 	mov	arg01, _var01
0a5dc     04 12 06 F1 | 	add	arg01, #4
0a5e0     01 05 02 F6 | 	mov	_var03, _var02
0a5e4     02 04 66 F0 | 	shl	_var03, #2
0a5e8     02 13 02 F1 | 	add	arg01, _var03
0a5ec     09 07 02 FB | 	rdlong	_var04, arg01
0a5f0     24 00 00 FF 
0a5f4     D8 E4 05 F1 | 	add	objptr, ##18648
0a5f8     F2 06 62 FC | 	wrlong	_var04, objptr
0a5fc     7B 00 00 FF 
0a600     CC E4 85 F1 | 	sub	objptr, ##63180
0a604                 | '   q=lpeek(address+4+4*i)
0a604                 | '      for bit=0 to 31
0a604     00 08 06 F6 | 	mov	_var05, #0
0a608     97 94 48 FB | 	callpa	#(@LR__0871-@LR__0868)>>2,fcache_load_ptr_
0a60c                 | LR__0868
0a60c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0a60c     7B 00 00 FF 
0a610     CC E4 05 F1 | 	add	objptr, ##63180
0a614     F2 06 02 FB | 	rdlong	_var04, objptr
0a618     7B 00 00 FF 
0a61c     CC E4 85 F1 | 	sub	objptr, ##63180
0a620     04 05 C2 F9 | 	decod	_var03, _var05
0a624     02 07 CA F7 | 	test	_var04, _var03 wz
0a628     80 00 90 AD |  if_e	jmp	#LR__0869
0a62c     04 0B 02 F6 | 	mov	_var06, _var05
0a630     02 0A 66 F0 | 	shl	_var06, #2
0a634     80 04 06 F6 | 	mov	_var03, #128
0a638     05 05 02 F1 | 	add	_var03, _var06
0a63c     77 00 00 FF 
0a640     90 E4 05 F1 | 	add	objptr, ##61072
0a644     F2 04 02 F1 | 	add	_var03, objptr
0a648     02 FF 48 FC | 	wrbyte	#127, _var03
0a64c     04 0B 02 F6 | 	mov	_var06, _var05
0a650     02 0A 66 F0 | 	shl	_var06, #2
0a654     80 04 06 F6 | 	mov	_var03, #128
0a658     05 05 02 F1 | 	add	_var03, _var06
0a65c     01 04 06 F1 | 	add	_var03, #1
0a660     F2 04 02 F1 | 	add	_var03, objptr
0a664     02 01 49 FC | 	wrbyte	#128, _var03
0a668     04 0B 02 F6 | 	mov	_var06, _var05
0a66c     02 0A 66 F0 | 	shl	_var06, #2
0a670     80 04 06 F6 | 	mov	_var03, #128
0a674     05 05 02 F1 | 	add	_var03, _var06
0a678     02 04 06 F1 | 	add	_var03, #2
0a67c     F2 04 02 F1 | 	add	_var03, objptr
0a680     02 FF 48 FC | 	wrbyte	#127, _var03
0a684     04 0B 02 F6 | 	mov	_var06, _var05
0a688     02 0A 66 F0 | 	shl	_var06, #2
0a68c     80 04 06 F6 | 	mov	_var03, #128
0a690     05 05 02 F1 | 	add	_var03, _var06
0a694     03 04 06 F1 | 	add	_var03, #3
0a698     F2 04 02 F1 | 	add	_var03, objptr
0a69c     02 01 49 FC | 	wrbyte	#128, _var03
0a6a0     77 00 00 FF 
0a6a4     90 E4 85 F1 | 	sub	objptr, ##61072
0a6a8     7C 00 90 FD | 	jmp	#LR__0870
0a6ac                 | LR__0869
0a6ac     04 0B 02 F6 | 	mov	_var06, _var05
0a6b0     02 0A 66 F0 | 	shl	_var06, #2
0a6b4     80 04 06 F6 | 	mov	_var03, #128
0a6b8     05 05 02 F1 | 	add	_var03, _var06
0a6bc     77 00 00 FF 
0a6c0     90 E4 05 F1 | 	add	objptr, ##61072
0a6c4     F2 04 02 F1 | 	add	_var03, objptr
0a6c8     02 01 49 FC | 	wrbyte	#128, _var03
0a6cc     04 0B 02 F6 | 	mov	_var06, _var05
0a6d0     02 0A 66 F0 | 	shl	_var06, #2
0a6d4     80 04 06 F6 | 	mov	_var03, #128
0a6d8     05 05 02 F1 | 	add	_var03, _var06
0a6dc     01 04 06 F1 | 	add	_var03, #1
0a6e0     F2 04 02 F1 | 	add	_var03, objptr
0a6e4     02 01 49 FC | 	wrbyte	#128, _var03
0a6e8     04 0B 02 F6 | 	mov	_var06, _var05
0a6ec     02 0A 66 F0 | 	shl	_var06, #2
0a6f0     80 04 06 F6 | 	mov	_var03, #128
0a6f4     05 05 02 F1 | 	add	_var03, _var06
0a6f8     02 04 06 F1 | 	add	_var03, #2
0a6fc     F2 04 02 F1 | 	add	_var03, objptr
0a700     02 FF 48 FC | 	wrbyte	#127, _var03
0a704     04 0B 02 F6 | 	mov	_var06, _var05
0a708     02 0A 66 F0 | 	shl	_var06, #2
0a70c     80 04 06 F6 | 	mov	_var03, #128
0a710     05 05 02 F1 | 	add	_var03, _var06
0a714     03 04 06 F1 | 	add	_var03, #3
0a718     F2 04 02 F1 | 	add	_var03, objptr
0a71c     02 FF 48 FC | 	wrbyte	#127, _var03
0a720     77 00 00 FF 
0a724     90 E4 85 F1 | 	sub	objptr, ##61072
0a728                 | LR__0870
0a728     01 08 06 F1 | 	add	_var05, #1
0a72c     20 08 56 F2 | 	cmps	_var05, #32 wc
0a730     D8 FE 9F CD |  if_b	jmp	#LR__0868
0a734                 | LR__0871
0a734     02 02 06 F1 | 	add	_var02, #2
0a738     40 02 56 F2 | 	cmps	_var02, #64 wc
0a73c     3C FD 9F CD |  if_b	jmp	#LR__0860
0a740                 | ' do: loop until lpeek(base+32*7)>32768
0a740     56 00 00 FF 
0a744     F4 E5 05 F1 | 	add	objptr, ##44532
0a748     97 84 48 FB | 	callpa	#(@LR__0880-@LR__0872)>>2,fcache_load_ptr_
0a74c                 | LR__0872
0a74c     F2 12 02 FB | 	rdlong	arg01, objptr
0a750     E0 12 06 F1 | 	add	arg01, #224
0a754     09 FB 01 FB | 	rdlong	result1, arg01
0a758     40 00 00 FF 
0a75c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a760     E8 FF 9F CD |  if_b	jmp	#LR__0872
0a764     56 00 00 FF 
0a768     F4 E5 85 F1 | 	sub	objptr, ##44532
0a76c                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a76c     00 02 06 F6 | 	mov	_var02, #0
0a770                 | LR__0873
0a770     01 07 52 F6 | 	abs	_var04, _var02 wc
0a774     07 06 06 F5 | 	and	_var04, #7
0a778     03 07 82 F6 | 	negc	_var04, _var04
0a77c     04 06 56 F2 | 	cmps	_var04, #4 wc
0a780     20 00 90 3D |  if_ae	jmp	#LR__0874
0a784     01 0B 02 F6 | 	mov	_var06, _var02
0a788     77 00 00 FF 
0a78c     90 E4 05 F1 | 	add	objptr, ##61072
0a790     F2 0A 02 F1 | 	add	_var06, objptr
0a794     05 FF 48 FC | 	wrbyte	#127, _var06
0a798     77 00 00 FF 
0a79c     90 E4 85 F1 | 	sub	objptr, ##61072
0a7a0     1C 00 90 FD | 	jmp	#LR__0875
0a7a4                 | LR__0874
0a7a4     01 0B 02 F6 | 	mov	_var06, _var02
0a7a8     77 00 00 FF 
0a7ac     90 E4 05 F1 | 	add	objptr, ##61072
0a7b0     F2 0A 02 F1 | 	add	_var06, objptr
0a7b4     05 01 49 FC | 	wrbyte	#128, _var06
0a7b8     77 00 00 FF 
0a7bc     90 E4 85 F1 | 	sub	objptr, ##61072
0a7c0                 | LR__0875
0a7c0     01 02 06 F1 | 	add	_var02, #1
0a7c4     80 02 56 F2 | 	cmps	_var02, #128 wc
0a7c8     A4 FF 9F CD |  if_b	jmp	#LR__0873
0a7cc                 | ' 
0a7cc                 | ' do: loop until lpeek(base+32*7)<32768
0a7cc     56 00 00 FF 
0a7d0     F4 E5 05 F1 | 	add	objptr, ##44532
0a7d4                 | LR__0876
0a7d4     F2 12 02 FB | 	rdlong	arg01, objptr
0a7d8     E0 12 06 F1 | 	add	arg01, #224
0a7dc     09 FB 01 FB | 	rdlong	result1, arg01
0a7e0     40 00 00 FF 
0a7e4     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a7e8     E8 FF 9F 3D |  if_ae	jmp	#LR__0876
0a7ec     56 00 00 FF 
0a7f0     F4 E5 85 F1 | 	sub	objptr, ##44532
0a7f4                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a7f4     80 02 06 F6 | 	mov	_var02, #128
0a7f8                 | LR__0877
0a7f8     01 07 52 F6 | 	abs	_var04, _var02 wc
0a7fc     07 06 06 F5 | 	and	_var04, #7
0a800     03 07 82 F6 | 	negc	_var04, _var04
0a804     04 06 56 F2 | 	cmps	_var04, #4 wc
0a808     20 00 90 3D |  if_ae	jmp	#LR__0878
0a80c     01 0B 02 F6 | 	mov	_var06, _var02
0a810     77 00 00 FF 
0a814     90 E4 05 F1 | 	add	objptr, ##61072
0a818     F2 0A 02 F1 | 	add	_var06, objptr
0a81c     05 FF 48 FC | 	wrbyte	#127, _var06
0a820     77 00 00 FF 
0a824     90 E4 85 F1 | 	sub	objptr, ##61072
0a828     1C 00 90 FD | 	jmp	#LR__0879
0a82c                 | LR__0878
0a82c     01 0B 02 F6 | 	mov	_var06, _var02
0a830     77 00 00 FF 
0a834     90 E4 05 F1 | 	add	objptr, ##61072
0a838     F2 0A 02 F1 | 	add	_var06, objptr
0a83c     05 01 49 FC | 	wrbyte	#128, _var06
0a840     77 00 00 FF 
0a844     90 E4 85 F1 | 	sub	objptr, ##61072
0a848                 | LR__0879
0a848     01 02 06 F1 | 	add	_var02, #1
0a84c     00 03 16 F2 | 	cmp	_var02, #256 wc
0a850     A4 FF 9F CD |  if_b	jmp	#LR__0877
0a854                 | LR__0880
0a854                 | _csave_block_ret
0a854     2D 00 64 FD | 	ret
0a858                 | 
0a858                 | ' 
0a858                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0a858                 | _csave_addtoblock
0a858     04 4A 05 F6 | 	mov	COUNT_, #4
0a85c     A8 00 A0 FD | 	call	#pushregs_
0a860     09 1F 02 F6 | 	mov	local01, arg01
0a864                 | ' 
0a864                 | ' 
0a864                 | ' if force=0 then
0a864     07 14 4E F7 | 	zerox	arg02, #7 wz
0a868     78 00 90 5D |  if_ne	jmp	#LR__0890
0a86c     79 00 00 FF 
0a870     90 E5 05 F1 | 	add	objptr, ##62352
0a874     F2 14 02 FB | 	rdlong	arg02, objptr
0a878     02 00 00 FF 
0a87c     00 E4 85 F1 | 	sub	objptr, ##1024
0a880     F2 14 02 F1 | 	add	arg02, objptr
0a884     0A 1F 42 FC | 	wrbyte	local01, arg02
0a888     02 00 00 FF 
0a88c     00 E4 05 F1 | 	add	objptr, ##1024
0a890     F2 1E 02 FB | 	rdlong	local01, objptr
0a894     01 1E 06 F1 | 	add	local01, #1
0a898     F2 1E 62 FC | 	wrlong	local01, objptr
0a89c                 | '   block(blockptr)=d
0a89c                 | '   blockptr+=1
0a89c                 | '   if blockptr>=255 then
0a89c     79 00 00 FF 
0a8a0     90 E5 85 F1 | 	sub	objptr, ##62352
0a8a4     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a8a8     E4 00 90 CD |  if_b	jmp	#LR__0894
0a8ac     77 00 00 FF 
0a8b0     90 E5 05 F1 | 	add	objptr, ##61328
0a8b4     F2 12 02 F6 | 	mov	arg01, objptr
0a8b8     77 00 00 FF 
0a8bc     90 E5 85 F1 | 	sub	objptr, ##61328
0a8c0     B0 FB BF FD | 	call	#_csave_block
0a8c4     79 00 00 FF 
0a8c8     90 E5 05 F1 | 	add	objptr, ##62352
0a8cc     F2 00 68 FC | 	wrlong	#0, objptr
0a8d0     79 00 00 FF 
0a8d4     90 E5 85 F1 | 	sub	objptr, ##62352
0a8d8     2C 13 06 F6 | 	mov	arg01, #300
0a8dc     F4 21 B1 FD | 	call	#__system___waitms
0a8e0     AC 00 90 FD | 	jmp	#LR__0894
0a8e4                 | LR__0890
0a8e4     79 00 00 FF 
0a8e8     90 E5 05 F1 | 	add	objptr, ##62352
0a8ec     F2 20 02 FB | 	rdlong	local02, objptr
0a8f0     02 00 00 FF 
0a8f4     00 E4 85 F1 | 	sub	objptr, ##1024
0a8f8     F2 20 02 F1 | 	add	local02, objptr
0a8fc     10 1F 42 FC | 	wrbyte	local01, local02
0a900                 | '   block(blockptr)=d
0a900                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a900     02 00 00 FF 
0a904     00 E4 05 F1 | 	add	objptr, ##1024
0a908     F2 22 02 FB | 	rdlong	local03, objptr
0a90c     79 00 00 FF 
0a910     90 E5 85 F1 | 	sub	objptr, ##62352
0a914     FF 22 16 F2 | 	cmp	local03, #255 wc
0a918     40 00 90 3D |  if_ae	jmp	#LR__0893
0a91c     79 00 00 FF 
0a920     90 E5 05 F1 | 	add	objptr, ##62352
0a924     F2 24 02 FB | 	rdlong	local04, objptr
0a928     79 00 00 FF 
0a92c     90 E5 85 F1 | 	sub	objptr, ##62352
0a930                 | LR__0891
0a930     00 25 56 F2 | 	cmps	local04, #256 wc
0a934     24 00 90 3D |  if_ae	jmp	#LR__0892
0a938     12 21 02 F6 | 	mov	local02, local04
0a93c     77 00 00 FF 
0a940     90 E5 05 F1 | 	add	objptr, ##61328
0a944     F2 20 02 F1 | 	add	local02, objptr
0a948     10 01 48 FC | 	wrbyte	#0, local02
0a94c     01 24 06 F1 | 	add	local04, #1
0a950     77 00 00 FF 
0a954     90 E5 85 F1 | 	sub	objptr, ##61328
0a958     D4 FF 9F FD | 	jmp	#LR__0891
0a95c                 | LR__0892
0a95c                 | LR__0893
0a95c     77 00 00 FF 
0a960     90 E5 05 F1 | 	add	objptr, ##61328
0a964     F2 12 02 F6 | 	mov	arg01, objptr
0a968     77 00 00 FF 
0a96c     90 E5 85 F1 | 	sub	objptr, ##61328
0a970     00 FB BF FD | 	call	#_csave_block
0a974     79 00 00 FF 
0a978     90 E5 05 F1 | 	add	objptr, ##62352
0a97c     F2 00 68 FC | 	wrlong	#0, objptr
0a980     79 00 00 FF 
0a984     90 E5 85 F1 | 	sub	objptr, ##62352
0a988     2C 13 06 F6 | 	mov	arg01, #300
0a98c     44 21 B1 FD | 	call	#__system___waitms
0a990                 | LR__0894
0a990     A7 F0 03 F6 | 	mov	ptra, fp
0a994     B2 00 A0 FD | 	call	#popregs_
0a998                 | _csave_addtoblock_ret
0a998     2D 00 64 FD | 	ret
0a99c                 | 
0a99c                 | ' 
0a99c                 | ' sub test_csave
0a99c                 | _test_csave
0a99c     04 4A 05 F6 | 	mov	COUNT_, #4
0a9a0     A8 00 A0 FD | 	call	#pushregs_
0a9a4     C0 F0 07 F1 | 	add	ptra, #192
0a9a8                 | ' 'dim fileheader,savestart, saveptr as ulong
0a9a8                 | ' 
0a9a8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a9a8     6A 00 00 FF 
0a9ac     68 E4 05 F1 | 	add	objptr, ##54376
0a9b0     F2 12 02 FB | 	rdlong	arg01, objptr
0a9b4     6A 00 00 FF 
0a9b8     68 E4 85 F1 | 	sub	objptr, ##54376
0a9bc     CC E8 B0 FD | 	call	#_pslpeek
0a9c0     FF FF 7F FF 
0a9c4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a9c8     0C 00 90 5D |  if_ne	jmp	#LR__0900
0a9cc     1B 12 06 F6 | 	mov	arg01, #27
0a9d0     24 E6 B0 FD | 	call	#_printerror
0a9d4     1C 03 90 FD | 	jmp	#LR__0914
0a9d8                 | LR__0900
0a9d8     04 F8 BF FD | 	call	#_pop
0a9dc     90 4E 05 F1 | 	add	fp, #144
0a9e0     A7 FA 61 FC | 	wrlong	result1, fp
0a9e4     04 4E 05 F1 | 	add	fp, #4
0a9e8     A7 FC 61 FC | 	wrlong	result2, fp
0a9ec     04 4E 05 F1 | 	add	fp, #4
0a9f0     A7 FE 61 FC | 	wrlong	result3, fp
0a9f4                 | ' t1=pop()
0a9f4                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0a9f4     98 4E 85 F1 | 	sub	fp, #152
0a9f8     1F FE 0D F2 | 	cmp	result3, #31 wz
0a9fc     24 00 90 AD |  if_e	jmp	#LR__0901
0aa00     7B 00 00 FF 
0aa04     88 E4 05 F1 | 	add	objptr, ##63112
0aa08     F2 1C 02 FB | 	rdlong	arg06, objptr
0aa0c     7B 00 00 FF 
0aa10     88 E4 85 F1 | 	sub	objptr, ##63112
0aa14     8C 4E 05 F1 | 	add	fp, #140
0aa18     A7 1C 62 FC | 	wrlong	arg06, fp
0aa1c     8C 4E 85 F1 | 	sub	fp, #140
0aa20     14 00 90 FD | 	jmp	#LR__0902
0aa24                 | LR__0901
0aa24     90 4E 05 F1 | 	add	fp, #144
0aa28     A7 1C 02 FB | 	rdlong	arg06, fp
0aa2c     04 4E 85 F1 | 	sub	fp, #4
0aa30     A7 1C 62 FC | 	wrlong	arg06, fp
0aa34     8C 4E 85 F1 | 	sub	fp, #140
0aa38                 | LR__0902
0aa38                 | ' 
0aa38                 | ' ' prepare 1 kHz header wave
0aa38                 | ' 
0aa38                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0aa38     A7 00 68 FC | 	wrlong	#0, fp
0aa3c     97 34 48 FB | 	callpa	#(@LR__0906-@LR__0903)>>2,fcache_load_ptr_
0aa40                 | LR__0903
0aa40     A7 1C 02 FB | 	rdlong	arg06, fp
0aa44     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0aa48     07 1A 06 F5 | 	and	arg05, #7
0aa4c     0D 1B 82 F6 | 	negc	arg05, arg05
0aa50     04 1A 56 F2 | 	cmps	arg05, #4 wc
0aa54     20 00 90 3D |  if_ae	jmp	#LR__0904
0aa58     A7 1A 02 FB | 	rdlong	arg05, fp
0aa5c     77 00 00 FF 
0aa60     90 E4 05 F1 | 	add	objptr, ##61072
0aa64     F2 1A 02 F1 | 	add	arg05, objptr
0aa68     0D FF 48 FC | 	wrbyte	#127, arg05
0aa6c     77 00 00 FF 
0aa70     90 E4 85 F1 | 	sub	objptr, ##61072
0aa74     1C 00 90 FD | 	jmp	#LR__0905
0aa78                 | LR__0904
0aa78     A7 1A 02 FB | 	rdlong	arg05, fp
0aa7c     77 00 00 FF 
0aa80     90 E4 05 F1 | 	add	objptr, ##61072
0aa84     F2 1A 02 F1 | 	add	arg05, objptr
0aa88     0D 01 49 FC | 	wrbyte	#128, arg05
0aa8c     77 00 00 FF 
0aa90     90 E4 85 F1 | 	sub	objptr, ##61072
0aa94                 | LR__0905
0aa94     A7 1A 02 FB | 	rdlong	arg05, fp
0aa98     01 1A 06 F1 | 	add	arg05, #1
0aa9c     A7 1A 62 FC | 	wrlong	arg05, fp
0aaa0     00 1B 56 F2 | 	cmps	arg05, #256 wc
0aaa4     98 FF 9F CD |  if_b	jmp	#LR__0903
0aaa8                 | LR__0906
0aaa8     77 00 00 FF 
0aaac     90 E4 05 F1 | 	add	objptr, ##61072
0aab0     F2 14 02 F6 | 	mov	arg02, objptr
0aab4     07 12 06 F6 | 	mov	arg01, #7
0aab8     0F 00 00 FF 
0aabc     40 17 06 F6 | 	mov	arg03, ##8000
0aac0     0E 18 C6 F9 | 	decod	arg04, #14
0aac4     00 1B 06 F6 | 	mov	arg05, #256
0aac8     00 1C 06 F6 | 	mov	arg06, #0
0aacc     6B 00 00 FF 
0aad0     D0 E5 85 F1 | 	sub	objptr, ##55248
0aad4     54 19 B1 FD | 	call	#_audio096_spin2_play8
0aad8     0B 00 00 FF 
0aadc     C0 E4 85 F1 | 	sub	objptr, ##5824
0aae0     05 00 00 FF 
0aae4     B8 13 06 F6 | 	mov	arg01, ##3000
0aae8     E8 1F B1 FD | 	call	#__system___waitms
0aaec     79 00 00 FF 
0aaf0     90 E5 05 F1 | 	add	objptr, ##62352
0aaf4     F2 00 68 FC | 	wrlong	#0, objptr
0aaf8     79 00 00 FF 
0aafc     90 E5 85 F1 | 	sub	objptr, ##62352
0ab00     72 12 06 F6 | 	mov	arg01, #114
0ab04     00 14 06 F6 | 	mov	arg02, #0
0ab08     4C FD BF FD | 	call	#_csave_addtoblock
0ab0c     62 12 06 F6 | 	mov	arg01, #98
0ab10     00 14 06 F6 | 	mov	arg02, #0
0ab14     40 FD BF FD | 	call	#_csave_addtoblock
0ab18     61 12 06 F6 | 	mov	arg01, #97
0ab1c     00 14 06 F6 | 	mov	arg02, #0
0ab20     34 FD BF FD | 	call	#_csave_addtoblock
0ab24     0D 12 06 F6 | 	mov	arg01, #13
0ab28     00 14 06 F6 | 	mov	arg02, #0
0ab2c     28 FD BF FD | 	call	#_csave_addtoblock
0ab30                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0ab30                 | ' waitms 3000 
0ab30                 | ' 
0ab30                 | ' blockptr=0
0ab30                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0ab30                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0ab30     A7 02 68 FC | 	wrlong	#1, fp
0ab34     8C 4E 05 F1 | 	add	fp, #140
0ab38     A7 12 02 FB | 	rdlong	arg01, fp
0ab3c     8C 4E 85 F1 | 	sub	fp, #140
0ab40     09 1F 02 F6 | 	mov	local01, arg01
0ab44     97 06 48 FB | 	callpa	#(@LR__0908-@LR__0907)>>2,fcache_load_ptr_
0ab48                 | LR__0907
0ab48     0F FB C9 FA | 	rdbyte	result1, local01 wz
0ab4c     01 1E 06 51 |  if_ne	add	local01, #1
0ab50     F4 FF 9F 5D |  if_ne	jmp	#LR__0907
0ab54                 | LR__0908
0ab54     09 1F 82 F1 | 	sub	local01, arg01
0ab58     0F 21 02 F6 | 	mov	local02, local01
0ab5c     01 20 06 F1 | 	add	local02, #1
0ab60                 | LR__0909
0ab60     A7 1A 02 FB | 	rdlong	arg05, fp
0ab64     10 1B 52 F2 | 	cmps	arg05, local02 wc
0ab68     34 00 90 3D |  if_ae	jmp	#LR__0910
0ab6c     8C 4E 05 F1 | 	add	fp, #140
0ab70     A7 12 02 FB | 	rdlong	arg01, fp
0ab74     8C 4E 85 F1 | 	sub	fp, #140
0ab78     A7 14 02 FB | 	rdlong	arg02, fp
0ab7c     01 16 06 F6 | 	mov	arg03, #1
0ab80     B8 3D B1 FD | 	call	#__system__Mid_S
0ab84     FD 12 C2 FA | 	rdbyte	arg01, result1
0ab88     00 14 06 F6 | 	mov	arg02, #0
0ab8c     C8 FC BF FD | 	call	#_csave_addtoblock
0ab90     A7 1A 02 FB | 	rdlong	arg05, fp
0ab94     01 1A 06 F1 | 	add	arg05, #1
0ab98     A7 1A 62 FC | 	wrlong	arg05, fp
0ab9c     C0 FF 9F FD | 	jmp	#LR__0909
0aba0                 | LR__0910
0aba0     00 12 06 F6 | 	mov	arg01, #0
0aba4     00 14 06 F6 | 	mov	arg02, #0
0aba8     AC FC BF FD | 	call	#_csave_addtoblock
0abac     72 12 06 F6 | 	mov	arg01, #114
0abb0     00 14 06 F6 | 	mov	arg02, #0
0abb4     A0 FC BF FD | 	call	#_csave_addtoblock
0abb8     62 12 06 F6 | 	mov	arg01, #98
0abbc     00 14 06 F6 | 	mov	arg02, #0
0abc0     94 FC BF FD | 	call	#_csave_addtoblock
0abc4     73 12 06 F6 | 	mov	arg01, #115
0abc8     00 14 06 F6 | 	mov	arg02, #0
0abcc     88 FC BF FD | 	call	#_csave_addtoblock
0abd0     0D 12 06 F6 | 	mov	arg01, #13
0abd4     00 14 06 F6 | 	mov	arg02, #0
0abd8     7C FC BF FD | 	call	#_csave_addtoblock
0abdc     6A 00 00 FF 
0abe0     68 E4 05 F1 | 	add	objptr, ##54376
0abe4     F2 22 02 FB | 	rdlong	local03, objptr
0abe8     6A 00 00 FF 
0abec     68 E4 85 F1 | 	sub	objptr, ##54376
0abf0     9C 4E 05 F1 | 	add	fp, #156
0abf4     A7 22 62 FC | 	wrlong	local03, fp
0abf8     9C 4E 85 F1 | 	sub	fp, #156
0abfc                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0abfc                 | ' 
0abfc                 | ' saveptr=programstart
0abfc                 | ' do
0abfc                 | LR__0911
0abfc     A0 4E 05 F1 | 	add	fp, #160
0ac00     A7 12 02 F6 | 	mov	arg01, fp
0ac04     04 4E 85 F1 | 	sub	fp, #4
0ac08     A7 14 02 FB | 	rdlong	arg02, fp
0ac0c     9C 4E 85 F1 | 	sub	fp, #156
0ac10     18 16 06 F6 | 	mov	arg03, #24
0ac14     0B 00 00 FF 
0ac18     C0 E4 05 F1 | 	add	objptr, ##5824
0ac1c     BC 0F B1 FD | 	call	#_psram_spin2_read1
0ac20     0C 4E 05 F1 | 	add	fp, #12
0ac24     A7 12 02 F6 | 	mov	arg01, fp
0ac28     9C 4E 05 F1 | 	add	fp, #156
0ac2c     A7 14 02 FB | 	rdlong	arg02, fp
0ac30     04 4E 05 F1 | 	add	fp, #4
0ac34     A7 16 02 FB | 	rdlong	arg03, fp
0ac38     AC 4E 85 F1 | 	sub	fp, #172
0ac3c     9C 0F B1 FD | 	call	#_psram_spin2_read1
0ac40     0B 00 00 FF 
0ac44     C0 E4 85 F1 | 	sub	objptr, ##5824
0ac48     AC 4E 05 F1 | 	add	fp, #172
0ac4c     A7 12 02 FB | 	rdlong	arg01, fp
0ac50     AC 4E 85 F1 | 	sub	fp, #172
0ac54     00 14 06 F6 | 	mov	arg02, #0
0ac58     FC FB BF FD | 	call	#_csave_addtoblock
0ac5c                 | '   psram.read1(varptr(header(0)),saveptr,24)
0ac5c                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0ac5c                 | '   csave_addtoblock(header(3),0) ' that's always <255
0ac5c                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0ac5c     A7 00 68 FC | 	wrlong	#0, fp
0ac60     AC 4E 05 F1 | 	add	fp, #172
0ac64     A7 24 02 FB | 	rdlong	local04, fp
0ac68     AC 4E 85 F1 | 	sub	fp, #172
0ac6c                 | LR__0912
0ac6c     A7 22 02 FB | 	rdlong	local03, fp
0ac70     12 23 52 F2 | 	cmps	local03, local04 wc
0ac74     2C 00 90 3D |  if_ae	jmp	#LR__0913
0ac78     A7 22 02 FB | 	rdlong	local03, fp
0ac7c     0C 4E 05 F1 | 	add	fp, #12
0ac80     A7 22 02 F1 | 	add	local03, fp
0ac84     11 13 C2 FA | 	rdbyte	arg01, local03
0ac88     00 14 06 F6 | 	mov	arg02, #0
0ac8c     0C 4E 85 F1 | 	sub	fp, #12
0ac90     C4 FB BF FD | 	call	#_csave_addtoblock
0ac94     A7 22 02 FB | 	rdlong	local03, fp
0ac98     01 22 06 F1 | 	add	local03, #1
0ac9c     A7 22 62 FC | 	wrlong	local03, fp
0aca0     C8 FF 9F FD | 	jmp	#LR__0912
0aca4                 | LR__0913
0aca4     B4 4E 05 F1 | 	add	fp, #180
0aca8     A7 22 02 FB | 	rdlong	local03, fp
0acac     18 4E 85 F1 | 	sub	fp, #24
0acb0     A7 22 62 FC | 	wrlong	local03, fp
0acb4     18 4E 05 F1 | 	add	fp, #24
0acb8     A7 22 02 FB | 	rdlong	local03, fp
0acbc     B4 4E 85 F1 | 	sub	fp, #180
0acc0     FF FF 3F FF 
0acc4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0acc8     30 FF 9F 5D |  if_ne	jmp	#LR__0911
0accc     00 12 06 F6 | 	mov	arg01, #0
0acd0     01 14 06 F6 | 	mov	arg02, #1
0acd4     80 FB BF FD | 	call	#_csave_addtoblock
0acd8     56 00 00 FF 
0acdc     F4 E5 05 F1 | 	add	objptr, ##44532
0ace0     F2 12 02 FB | 	rdlong	arg01, objptr
0ace4     56 00 00 FF 
0ace8     F4 E5 85 F1 | 	sub	objptr, ##44532
0acec     F4 12 06 F1 | 	add	arg01, #244
0acf0     09 01 58 FC | 	wrword	#0, arg01
0acf4                 | LR__0914
0acf4     A7 F0 03 F6 | 	mov	ptra, fp
0acf8     B2 00 A0 FD | 	call	#popregs_
0acfc                 | _test_csave_ret
0acfc     2D 00 64 FD | 	ret
0ad00                 | 
0ad00                 | ' 
0ad00                 | ' ' ----------------- Save the program
0ad00                 | ' 
0ad00                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0ad00                 | _do_save
0ad00     04 4A 05 F6 | 	mov	COUNT_, #4
0ad04     A8 00 A0 FD | 	call	#pushregs_
0ad08     01 00 00 FF 
0ad0c     C0 F0 07 F1 | 	add	ptra, ##704
0ad10     6A 00 00 FF 
0ad14     64 E4 05 F1 | 	add	objptr, ##54372
0ad18     F2 1E 02 FB | 	rdlong	local01, objptr
0ad1c     0F 21 02 F6 | 	mov	local02, local01
0ad20     01 20 66 F0 | 	shl	local02, #1
0ad24     0F 21 02 F1 | 	add	local02, local01
0ad28     02 20 66 F0 | 	shl	local02, #2
0ad2c     03 00 00 FF 
0ad30     04 E4 85 F1 | 	sub	objptr, ##1540
0ad34     F2 20 02 F1 | 	add	local02, objptr
0ad38     10 23 02 FB | 	rdlong	local03, local02
0ad3c     01 00 00 FF 
0ad40     10 4E 05 F1 | 	add	fp, ##528
0ad44     A7 22 62 FC | 	wrlong	local03, fp
0ad48                 | ' 
0ad48                 | ' numpar=compiledline(lineptr_e).result.uresult
0ad48                 | ' 
0ad48                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0ad48     01 00 00 FF 
0ad4c     10 4E 85 F1 | 	sub	fp, ##528
0ad50     01 22 56 F2 | 	cmps	local03, #1 wc
0ad54     67 00 00 FF 
0ad58     60 E4 85 F1 | 	sub	objptr, ##52832
0ad5c     20 00 90 CD |  if_b	jmp	#LR__0920
0ad60     7C F4 BF FD | 	call	#_pop
0ad64     A7 FA 61 FC | 	wrlong	result1, fp
0ad68     04 4E 05 F1 | 	add	fp, #4
0ad6c     A7 FC 61 FC | 	wrlong	result2, fp
0ad70     04 4E 05 F1 | 	add	fp, #4
0ad74     A7 FE 61 FC | 	wrlong	result3, fp
0ad78     08 4E 85 F1 | 	sub	fp, #8
0ad7c     24 00 90 FD | 	jmp	#LR__0921
0ad80                 | LR__0920
0ad80     7B 00 00 FF 
0ad84     88 E4 05 F1 | 	add	objptr, ##63112
0ad88     F2 22 02 FB | 	rdlong	local03, objptr
0ad8c     7B 00 00 FF 
0ad90     88 E4 85 F1 | 	sub	objptr, ##63112
0ad94     A7 22 62 FC | 	wrlong	local03, fp
0ad98     08 4E 05 F1 | 	add	fp, #8
0ad9c     A7 3E 68 FC | 	wrlong	#31, fp
0ada0     08 4E 85 F1 | 	sub	fp, #8
0ada4                 | LR__0921
0ada4                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0ada4     6A 00 00 FF 
0ada8     68 E4 05 F1 | 	add	objptr, ##54376
0adac     F2 12 02 FB | 	rdlong	arg01, objptr
0adb0     6A 00 00 FF 
0adb4     68 E4 85 F1 | 	sub	objptr, ##54376
0adb8     D0 E4 B0 FD | 	call	#_pslpeek
0adbc     FF FF 7F FF 
0adc0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0adc4     0C 00 90 5D |  if_ne	jmp	#LR__0922
0adc8     1B 12 06 F6 | 	mov	arg01, #27
0adcc     28 E2 B0 FD | 	call	#_printerror
0add0     1C 03 90 FD | 	jmp	#LR__0928
0add4                 | LR__0922
0add4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0add4     08 4E 05 F1 | 	add	fp, #8
0add8     A7 22 02 FB | 	rdlong	local03, fp
0addc     08 4E 85 F1 | 	sub	fp, #8
0ade0     2B 22 0E F2 | 	cmp	local03, #43 wz
0ade4     18 00 90 5D |  if_ne	jmp	#LR__0923
0ade8     A7 12 02 FB | 	rdlong	arg01, fp
0adec     7C 36 B0 FD | 	call	#_convertstring
0adf0     A7 FA 61 FC | 	wrlong	result1, fp
0adf4     08 4E 05 F1 | 	add	fp, #8
0adf8     A7 3E 68 FC | 	wrlong	#31, fp
0adfc     08 4E 85 F1 | 	sub	fp, #8
0ae00                 | LR__0923
0ae00                 | ' if t1.result_type=result_string then
0ae00     08 4E 05 F1 | 	add	fp, #8
0ae04     A7 22 02 FB | 	rdlong	local03, fp
0ae08     08 4E 85 F1 | 	sub	fp, #8
0ae0c     1F 22 0E F2 | 	cmp	local03, #31 wz
0ae10     DC 02 90 5D |  if_ne	jmp	#LR__0927
0ae14                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0ae14     A7 12 02 FB | 	rdlong	arg01, fp
0ae18     61 01 00 FF 
0ae1c     52 15 06 F6 | 	mov	arg02, ##@LR__4919
0ae20     E4 19 B1 FD | 	call	#__system___string_cmp
0ae24     00 FA 0D F2 | 	cmp	result1, #0 wz
0ae28     7B 00 00 AF 
0ae2c     88 E4 05 A1 |  if_e	add	objptr, ##63112
0ae30     F2 22 02 AB |  if_e	rdlong	local03, objptr
0ae34     A7 22 62 AC |  if_e	wrlong	local03, fp
0ae38     7B 00 00 AF 
0ae3c     88 E4 85 A1 |  if_e	sub	objptr, ##63112
0ae40     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ae44     7B 00 00 5F 
0ae48     88 E4 05 51 |  if_ne	add	objptr, ##63112
0ae4c     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0ae50     7B 00 00 5F 
0ae54     88 E4 85 51 |  if_ne	sub	objptr, ##63112
0ae58                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0ae58     09 12 06 F6 | 	mov	arg01, #9
0ae5c     44 69 B1 FD | 	call	#__system__close
0ae60     09 22 06 F6 | 	mov	local03, #9
0ae64     72 00 00 FF 
0ae68     78 E4 05 F1 | 	add	objptr, ##58488
0ae6c     F2 12 02 FB | 	rdlong	arg01, objptr
0ae70     72 00 00 FF 
0ae74     78 E4 85 F1 | 	sub	objptr, ##58488
0ae78     61 01 00 FF 
0ae7c     53 15 06 F6 | 	mov	arg02, ##@LR__4920
0ae80     B8 19 B1 FD | 	call	#__system___string_concat
0ae84     FD 12 02 F6 | 	mov	arg01, result1
0ae88     A7 14 02 FB | 	rdlong	arg02, fp
0ae8c     AC 19 B1 FD | 	call	#__system___string_concat
0ae90     FD 14 02 F6 | 	mov	arg02, result1
0ae94     11 13 02 F6 | 	mov	arg01, local03
0ae98     0D 16 06 F6 | 	mov	arg03, #13
0ae9c     40 25 B1 FD | 	call	#__system___basic_open_string
0aea0     01 00 00 FF 
0aea4     0C 4E 05 F1 | 	add	fp, ##524
0aea8     A7 0A 68 FC | 	wrlong	#5, fp
0aeac     6A 00 00 FF 
0aeb0     68 E4 05 F1 | 	add	objptr, ##54376
0aeb4     F2 22 02 FB | 	rdlong	local03, objptr
0aeb8     6A 00 00 FF 
0aebc     68 E4 85 F1 | 	sub	objptr, ##54376
0aec0     10 4E 05 F1 | 	add	fp, #16
0aec4     A7 22 62 FC | 	wrlong	local03, fp
0aec8     01 00 00 FF 
0aecc     1C 4E 85 F1 | 	sub	fp, ##540
0aed0                 | ' '  put #9,1,fileheader,1
0aed0                 | '   i=5
0aed0                 | '   saveptr=programstart
0aed0                 | '   do
0aed0                 | LR__0924
0aed0     01 00 00 FF 
0aed4     20 4E 05 F1 | 	add	fp, ##544
0aed8     A7 12 02 F6 | 	mov	arg01, fp
0aedc     04 4E 85 F1 | 	sub	fp, #4
0aee0     A7 14 02 FB | 	rdlong	arg02, fp
0aee4     01 00 00 FF 
0aee8     1C 4E 85 F1 | 	sub	fp, ##540
0aeec     18 16 06 F6 | 	mov	arg03, #24
0aef0     0B 00 00 FF 
0aef4     C0 E4 05 F1 | 	add	objptr, ##5824
0aef8     E0 0C B1 FD | 	call	#_psram_spin2_read1
0aefc     01 00 00 FF 
0af00     38 4E 05 F1 | 	add	fp, ##568
0af04     A7 12 02 F6 | 	mov	arg01, fp
0af08     10 4E 85 F1 | 	sub	fp, #16
0af0c     A7 14 02 FB | 	rdlong	arg02, fp
0af10     04 4E 05 F1 | 	add	fp, #4
0af14     A7 16 02 FB | 	rdlong	arg03, fp
0af18     01 00 00 FF 
0af1c     2C 4E 85 F1 | 	sub	fp, ##556
0af20     B8 0C B1 FD | 	call	#_psram_spin2_read1
0af24     0B 00 00 FF 
0af28     C0 E4 85 F1 | 	sub	objptr, ##5824
0af2c     61 01 00 FF 
0af30     55 23 06 F6 | 	mov	local03, ##@LR__4921
0af34     01 00 00 FF 
0af38     B8 4E 05 F1 | 	add	fp, ##696
0af3c     A7 22 62 FC | 	wrlong	local03, fp
0af40                 | '     psram.read1(varptr(header(0)),saveptr,24)
0af40                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0af40                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0af40     AC 4E 85 F1 | 	sub	fp, #172
0af44     A7 02 68 FC | 	wrlong	#1, fp
0af48     20 4E 05 F1 | 	add	fp, #32
0af4c     A7 24 02 FB | 	rdlong	local04, fp
0af50     01 00 00 FF 
0af54     2C 4E 85 F1 | 	sub	fp, ##556
0af58     01 24 06 F1 | 	add	local04, #1
0af5c                 | LR__0925
0af5c     01 00 00 FF 
0af60     0C 4E 05 F1 | 	add	fp, ##524
0af64     A7 22 02 FB | 	rdlong	local03, fp
0af68     01 00 00 FF 
0af6c     0C 4E 85 F1 | 	sub	fp, ##524
0af70     12 23 52 F2 | 	cmps	local03, local04 wc
0af74     64 00 90 3D |  if_ae	jmp	#LR__0926
0af78     01 00 00 FF 
0af7c     B8 4E 05 F1 | 	add	fp, ##696
0af80     A7 1E 02 FB | 	rdlong	local01, fp
0af84     AC 4E 85 F1 | 	sub	fp, #172
0af88     A7 22 02 FB | 	rdlong	local03, fp
0af8c     01 22 86 F1 | 	sub	local03, #1
0af90     2C 4E 05 F1 | 	add	fp, #44
0af94     A7 22 02 F1 | 	add	local03, fp
0af98     11 13 C2 FA | 	rdbyte	arg01, local03
0af9c     01 00 00 FF 
0afa0     38 4E 85 F1 | 	sub	fp, ##568
0afa4     40 3A B1 FD | 	call	#__system__Chr_S
0afa8     FD 14 02 F6 | 	mov	arg02, result1
0afac     0F 13 02 F6 | 	mov	arg01, local01
0afb0     88 18 B1 FD | 	call	#__system___string_concat
0afb4     01 00 00 FF 
0afb8     B8 4E 05 F1 | 	add	fp, ##696
0afbc     A7 FA 61 FC | 	wrlong	result1, fp
0afc0     AC 4E 85 F1 | 	sub	fp, #172
0afc4     A7 22 02 FB | 	rdlong	local03, fp
0afc8     01 22 06 F1 | 	add	local03, #1
0afcc     A7 22 62 FC | 	wrlong	local03, fp
0afd0     01 00 00 FF 
0afd4     0C 4E 85 F1 | 	sub	fp, ##524
0afd8     80 FF 9F FD | 	jmp	#LR__0925
0afdc                 | LR__0926
0afdc                 | '  '   put #9,i,header(3),1 : i+=4
0afdc                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0afdc                 | '      print #9, saveline$
0afdc     09 12 06 F6 | 	mov	arg01, #9
0afe0     8C 71 B1 FD | 	call	#__system___getiolock_0474
0afe4     FD 12 02 F6 | 	mov	arg01, result1
0afe8     F4 17 B1 FD | 	call	#__system___lockmem
0afec     01 00 00 FF 
0aff0     B8 4E 05 F1 | 	add	fp, ##696
0aff4     A7 14 02 FB | 	rdlong	arg02, fp
0aff8     01 00 00 FF 
0affc     B8 4E 85 F1 | 	sub	fp, ##696
0b000     09 12 06 F6 | 	mov	arg01, #9
0b004     00 16 06 F6 | 	mov	arg03, #0
0b008     D8 24 B1 FD | 	call	#__system___basic_print_string
0b00c     09 12 06 F6 | 	mov	arg01, #9
0b010     0A 14 06 F6 | 	mov	arg02, #10
0b014     00 16 06 F6 | 	mov	arg03, #0
0b018     70 24 B1 FD | 	call	#__system___basic_print_char
0b01c     09 12 06 F6 | 	mov	arg01, #9
0b020     4C 71 B1 FD | 	call	#__system___getiolock_0474
0b024     FD 00 68 FC | 	wrlong	#0, result1
0b028     01 00 00 FF 
0b02c     34 4E 05 F1 | 	add	fp, ##564
0b030     A7 22 02 FB | 	rdlong	local03, fp
0b034     18 4E 85 F1 | 	sub	fp, #24
0b038     A7 22 62 FC | 	wrlong	local03, fp
0b03c     18 4E 05 F1 | 	add	fp, #24
0b040     A7 22 02 FB | 	rdlong	local03, fp
0b044     01 00 00 FF 
0b048     34 4E 85 F1 | 	sub	fp, ##564
0b04c     FF FF 3F FF 
0b050     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b054     78 FE 9F 5D |  if_ne	jmp	#LR__0924
0b058                 | '   close #9  
0b058     09 12 06 F6 | 	mov	arg01, #9
0b05c     44 67 B1 FD | 	call	#__system__close
0b060                 | '   print "Saved as ";currentdir$+"/"+loadname
0b060     00 12 06 F6 | 	mov	arg01, #0
0b064     08 71 B1 FD | 	call	#__system___getiolock_0474
0b068     FD 12 02 F6 | 	mov	arg01, result1
0b06c     70 17 B1 FD | 	call	#__system___lockmem
0b070     61 01 00 FF 
0b074     56 15 06 F6 | 	mov	arg02, ##@LR__4922
0b078     00 12 06 F6 | 	mov	arg01, #0
0b07c     00 16 06 F6 | 	mov	arg03, #0
0b080     60 24 B1 FD | 	call	#__system___basic_print_string
0b084     00 20 06 F6 | 	mov	local02, #0
0b088     72 00 00 FF 
0b08c     78 E4 05 F1 | 	add	objptr, ##58488
0b090     F2 12 02 FB | 	rdlong	arg01, objptr
0b094     72 00 00 FF 
0b098     78 E4 85 F1 | 	sub	objptr, ##58488
0b09c     61 01 00 FF 
0b0a0     60 15 06 F6 | 	mov	arg02, ##@LR__4923
0b0a4     94 17 B1 FD | 	call	#__system___string_concat
0b0a8     FD 12 02 F6 | 	mov	arg01, result1
0b0ac     7B 00 00 FF 
0b0b0     88 E4 05 F1 | 	add	objptr, ##63112
0b0b4     F2 14 02 FB | 	rdlong	arg02, objptr
0b0b8     7B 00 00 FF 
0b0bc     88 E4 85 F1 | 	sub	objptr, ##63112
0b0c0     78 17 B1 FD | 	call	#__system___string_concat
0b0c4     FD 14 02 F6 | 	mov	arg02, result1
0b0c8     10 13 02 F6 | 	mov	arg01, local02
0b0cc     00 16 06 F6 | 	mov	arg03, #0
0b0d0     10 24 B1 FD | 	call	#__system___basic_print_string
0b0d4     00 12 06 F6 | 	mov	arg01, #0
0b0d8     0A 14 06 F6 | 	mov	arg02, #10
0b0dc     00 16 06 F6 | 	mov	arg03, #0
0b0e0     A8 23 B1 FD | 	call	#__system___basic_print_char
0b0e4     00 12 06 F6 | 	mov	arg01, #0
0b0e8     84 70 B1 FD | 	call	#__system___getiolock_0474
0b0ec     FD 00 68 FC | 	wrlong	#0, result1
0b0f0                 | LR__0927
0b0f0                 | LR__0928
0b0f0     A7 F0 03 F6 | 	mov	ptra, fp
0b0f4     B2 00 A0 FD | 	call	#popregs_
0b0f8                 | _do_save_ret
0b0f8     2D 00 64 FD | 	ret
0b0fc                 | 
0b0fc                 | ' 
0b0fc                 | ' '----------------- Load the program
0b0fc                 | ' 'lo todo: errors while loading
0b0fc                 | ' sub do_load
0b0fc                 | _do_load
0b0fc     01 4A 05 F6 | 	mov	COUNT_, #1
0b100     A8 00 A0 FD | 	call	#pushregs_
0b104     A8 F0 07 F1 | 	add	ptra, #168
0b108     6A 00 00 FF 
0b10c     64 E4 05 F1 | 	add	objptr, ##54372
0b110     F2 14 02 FB | 	rdlong	arg02, objptr
0b114     0A 13 02 F6 | 	mov	arg01, arg02
0b118     01 12 66 F0 | 	shl	arg01, #1
0b11c     0A 13 02 F1 | 	add	arg01, arg02
0b120     02 12 66 F0 | 	shl	arg01, #2
0b124     03 00 00 FF 
0b128     04 E4 85 F1 | 	sub	objptr, ##1540
0b12c     F2 12 02 F1 | 	add	arg01, objptr
0b130     09 15 02 FB | 	rdlong	arg02, arg01
0b134     18 4E 05 F1 | 	add	fp, #24
0b138     A7 14 62 FC | 	wrlong	arg02, fp
0b13c     8C 4E 05 F1 | 	add	fp, #140
0b140     A7 12 02 F6 | 	mov	arg01, fp
0b144     67 00 00 FF 
0b148     60 E4 85 F1 | 	sub	objptr, ##52832
0b14c     80 4E 85 F1 | 	sub	fp, #128
0b150     09 4F 61 FC | 	wrlong	fp, arg01
0b154                 | ' numpar=compiledline(lineptr_e).result.uresult
0b154                 | ' lpoke varptr(line2$),varptr(line2)
0b154                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b154     0C 4E 85 F1 | 	sub	fp, #12
0b158     A7 1E 02 FB | 	rdlong	local01, fp
0b15c     18 4E 85 F1 | 	sub	fp, #24
0b160     01 1E 56 F2 | 	cmps	local01, #1 wc
0b164     20 00 90 CD |  if_b	jmp	#LR__0930
0b168     74 F0 BF FD | 	call	#_pop
0b16c     A7 FA 61 FC | 	wrlong	result1, fp
0b170     04 4E 05 F1 | 	add	fp, #4
0b174     A7 FC 61 FC | 	wrlong	result2, fp
0b178     04 4E 05 F1 | 	add	fp, #4
0b17c     A7 FE 61 FC | 	wrlong	result3, fp
0b180     08 4E 85 F1 | 	sub	fp, #8
0b184     24 00 90 FD | 	jmp	#LR__0931
0b188                 | LR__0930
0b188     7B 00 00 FF 
0b18c     88 E4 05 F1 | 	add	objptr, ##63112
0b190     F2 1E 02 FB | 	rdlong	local01, objptr
0b194     7B 00 00 FF 
0b198     88 E4 85 F1 | 	sub	objptr, ##63112
0b19c     A7 1E 62 FC | 	wrlong	local01, fp
0b1a0     08 4E 05 F1 | 	add	fp, #8
0b1a4     A7 3E 68 FC | 	wrlong	#31, fp
0b1a8     08 4E 85 F1 | 	sub	fp, #8
0b1ac                 | LR__0931
0b1ac                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0b1ac                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0b1ac     08 4E 05 F1 | 	add	fp, #8
0b1b0     A7 1E 02 FB | 	rdlong	local01, fp
0b1b4     08 4E 85 F1 | 	sub	fp, #8
0b1b8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b1bc     18 00 90 5D |  if_ne	jmp	#LR__0932
0b1c0     A7 12 02 FB | 	rdlong	arg01, fp
0b1c4     A4 32 B0 FD | 	call	#_convertstring
0b1c8     A7 FA 61 FC | 	wrlong	result1, fp
0b1cc     08 4E 05 F1 | 	add	fp, #8
0b1d0     A7 3E 68 FC | 	wrlong	#31, fp
0b1d4     08 4E 85 F1 | 	sub	fp, #8
0b1d8                 | LR__0932
0b1d8                 | ' if t1.result_type=result_string then
0b1d8     08 4E 05 F1 | 	add	fp, #8
0b1dc     A7 1E 02 FB | 	rdlong	local01, fp
0b1e0     08 4E 85 F1 | 	sub	fp, #8
0b1e4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b1e8     20 04 90 5D |  if_ne	jmp	#LR__0940
0b1ec     F4 2C B0 FD | 	call	#_do_new
0b1f0                 | '   do_new
0b1f0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b1f0     A7 12 02 FB | 	rdlong	arg01, fp
0b1f4     61 01 00 FF 
0b1f8     62 15 06 F6 | 	mov	arg02, ##@LR__4924
0b1fc     08 16 B1 FD | 	call	#__system___string_cmp
0b200     00 FA 0D F2 | 	cmp	result1, #0 wz
0b204     7B 00 00 AF 
0b208     88 E4 05 A1 |  if_e	add	objptr, ##63112
0b20c     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0b210     A7 1E 62 AC |  if_e	wrlong	local01, fp
0b214     7B 00 00 AF 
0b218     88 E4 85 A1 |  if_e	sub	objptr, ##63112
0b21c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b220     7B 00 00 5F 
0b224     88 E4 05 51 |  if_ne	add	objptr, ##63112
0b228     F2 1E 62 5C |  if_ne	wrlong	local01, objptr
0b22c     7B 00 00 5F 
0b230     88 E4 85 51 |  if_ne	sub	objptr, ##63112
0b234                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b234     09 12 06 F6 | 	mov	arg01, #9
0b238     68 65 B1 FD | 	call	#__system__close
0b23c     09 1E 06 F6 | 	mov	local01, #9
0b240     72 00 00 FF 
0b244     78 E4 05 F1 | 	add	objptr, ##58488
0b248     F2 12 02 FB | 	rdlong	arg01, objptr
0b24c     72 00 00 FF 
0b250     78 E4 85 F1 | 	sub	objptr, ##58488
0b254     61 01 00 FF 
0b258     63 15 06 F6 | 	mov	arg02, ##@LR__4925
0b25c     DC 15 B1 FD | 	call	#__system___string_concat
0b260     FD 12 02 F6 | 	mov	arg01, result1
0b264     A7 14 02 FB | 	rdlong	arg02, fp
0b268     D0 15 B1 FD | 	call	#__system___string_concat
0b26c     FD 14 02 F6 | 	mov	arg02, result1
0b270     0F 13 02 F6 | 	mov	arg01, local01
0b274     00 16 06 F6 | 	mov	arg03, #0
0b278     64 21 B1 FD | 	call	#__system___basic_open_string
0b27c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b280     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b284     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b288     10 4E 05 F1 | 	add	fp, #16
0b28c     A7 FA 61 FC | 	wrlong	result1, fp
0b290                 | '   r=geterr() 
0b290                 | '   if r then 
0b290     10 4E 85 F1 | 	sub	fp, #16
0b294     48 01 90 AD |  if_e	jmp	#LR__0934
0b298                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0b298     09 12 06 F6 | 	mov	arg01, #9
0b29c     04 65 B1 FD | 	call	#__system__close
0b2a0     09 1E 06 F6 | 	mov	local01, #9
0b2a4     72 00 00 FF 
0b2a8     78 E4 05 F1 | 	add	objptr, ##58488
0b2ac     F2 12 02 FB | 	rdlong	arg01, objptr
0b2b0     72 00 00 FF 
0b2b4     78 E4 85 F1 | 	sub	objptr, ##58488
0b2b8     61 01 00 FF 
0b2bc     65 15 06 F6 | 	mov	arg02, ##@LR__4926
0b2c0     78 15 B1 FD | 	call	#__system___string_concat
0b2c4     FD 12 02 F6 | 	mov	arg01, result1
0b2c8     A7 14 02 FB | 	rdlong	arg02, fp
0b2cc     6C 15 B1 FD | 	call	#__system___string_concat
0b2d0     FD 12 02 F6 | 	mov	arg01, result1
0b2d4     61 01 00 FF 
0b2d8     67 15 06 F6 | 	mov	arg02, ##@LR__4927
0b2dc     5C 15 B1 FD | 	call	#__system___string_concat
0b2e0     FD 14 02 F6 | 	mov	arg02, result1
0b2e4     0F 13 02 F6 | 	mov	arg01, local01
0b2e8     00 16 06 F6 | 	mov	arg03, #0
0b2ec     F0 20 B1 FD | 	call	#__system___basic_open_string
0b2f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b2f4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b2f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b2fc     10 4E 05 F1 | 	add	fp, #16
0b300     A7 FA 61 FC | 	wrlong	result1, fp
0b304                 | '     r=geterr() 
0b304                 | '     if r then 
0b304     10 4E 85 F1 | 	sub	fp, #16
0b308     A0 00 90 AD |  if_e	jmp	#LR__0933
0b30c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0b30c     00 12 06 F6 | 	mov	arg01, #0
0b310     5C 6E B1 FD | 	call	#__system___getiolock_0474
0b314     FD 12 02 F6 | 	mov	arg01, result1
0b318     C4 14 B1 FD | 	call	#__system___lockmem
0b31c     61 01 00 FF 
0b320     6C 15 06 F6 | 	mov	arg02, ##@LR__4928
0b324     00 12 06 F6 | 	mov	arg01, #0
0b328     00 16 06 F6 | 	mov	arg03, #0
0b32c     B4 21 B1 FD | 	call	#__system___basic_print_string
0b330     10 4E 05 F1 | 	add	fp, #16
0b334     A7 14 02 FB | 	rdlong	arg02, fp
0b338     10 4E 85 F1 | 	sub	fp, #16
0b33c     00 12 06 F6 | 	mov	arg01, #0
0b340     00 16 06 F6 | 	mov	arg03, #0
0b344     0A 18 06 F6 | 	mov	arg04, #10
0b348     DC 21 B1 FD | 	call	#__system___basic_print_integer
0b34c     61 01 00 FF 
0b350     7A 15 06 F6 | 	mov	arg02, ##@LR__4929
0b354     00 12 06 F6 | 	mov	arg01, #0
0b358     00 16 06 F6 | 	mov	arg03, #0
0b35c     84 21 B1 FD | 	call	#__system___basic_print_string
0b360     00 1E 06 F6 | 	mov	local01, #0
0b364     10 4E 05 F1 | 	add	fp, #16
0b368     A7 12 02 FB | 	rdlong	arg01, fp
0b36c     10 4E 85 F1 | 	sub	fp, #16
0b370     FC 3A B1 FD | 	call	#__system___strerror
0b374     FD 14 02 F6 | 	mov	arg02, result1
0b378     0F 13 02 F6 | 	mov	arg01, local01
0b37c     00 16 06 F6 | 	mov	arg03, #0
0b380     60 21 B1 FD | 	call	#__system___basic_print_string
0b384     00 12 06 F6 | 	mov	arg01, #0
0b388     0A 14 06 F6 | 	mov	arg02, #10
0b38c     00 16 06 F6 | 	mov	arg03, #0
0b390     F8 20 B1 FD | 	call	#__system___basic_print_char
0b394     00 12 06 F6 | 	mov	arg01, #0
0b398     D4 6D B1 FD | 	call	#__system___getiolock_0474
0b39c     FD 00 68 FC | 	wrlong	#0, result1
0b3a0     09 12 06 F6 | 	mov	arg01, #9
0b3a4     FC 63 B1 FD | 	call	#__system__close
0b3a8     F8 02 90 FD | 	jmp	#LR__0942
0b3ac                 | LR__0933
0b3ac     7B 00 00 FF 
0b3b0     88 E4 05 F1 | 	add	objptr, ##63112
0b3b4     F2 12 02 FB | 	rdlong	arg01, objptr
0b3b8     7B 00 00 FF 
0b3bc     88 E4 85 F1 | 	sub	objptr, ##63112
0b3c0     61 01 00 FF 
0b3c4     7D 15 06 F6 | 	mov	arg02, ##@LR__4930
0b3c8     70 14 B1 FD | 	call	#__system___string_concat
0b3cc     7B 00 00 FF 
0b3d0     88 E4 05 F1 | 	add	objptr, ##63112
0b3d4     F2 FA 61 FC | 	wrlong	result1, objptr
0b3d8     7B 00 00 FF 
0b3dc     88 E4 85 F1 | 	sub	objptr, ##63112
0b3e0                 | LR__0934
0b3e0     0C 4E 05 F1 | 	add	fp, #12
0b3e4     A7 0A 68 FC | 	wrlong	#5, fp
0b3e8                 | '   i=5
0b3e8                 | '   get #9,1,header,1   
0b3e8     10 4E 05 F1 | 	add	fp, #16
0b3ec     A7 16 02 F6 | 	mov	arg03, fp
0b3f0     1C 4E 85 F1 | 	sub	fp, #28
0b3f4     09 12 06 F6 | 	mov	arg01, #9
0b3f8     01 14 06 F6 | 	mov	arg02, #1
0b3fc     01 18 06 F6 | 	mov	arg04, #1
0b400     04 1A 06 F6 | 	mov	arg05, #4
0b404     EC 21 B1 FD | 	call	#__system___basic_get
0b408                 | '   
0b408                 | '   if header<>$0D616272 then 
0b408     1C 4E 05 F1 | 	add	fp, #28
0b40c     A7 1E 02 FB | 	rdlong	local01, fp
0b410     1C 4E 85 F1 | 	sub	fp, #28
0b414     B1 B0 06 FF 
0b418     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0b41c     00 01 90 AD |  if_e	jmp	#LR__0937
0b420                 | '     close #9: open currentdir$+"/"+loadname for input as #9
0b420     09 12 06 F6 | 	mov	arg01, #9
0b424     7C 63 B1 FD | 	call	#__system__close
0b428     09 1E 06 F6 | 	mov	local01, #9
0b42c     72 00 00 FF 
0b430     78 E4 05 F1 | 	add	objptr, ##58488
0b434     F2 12 02 FB | 	rdlong	arg01, objptr
0b438     72 00 00 FF 
0b43c     78 E4 85 F1 | 	sub	objptr, ##58488
0b440     61 01 00 FF 
0b444     82 15 06 F6 | 	mov	arg02, ##@LR__4931
0b448     F0 13 B1 FD | 	call	#__system___string_concat
0b44c     FD 12 02 F6 | 	mov	arg01, result1
0b450     7B 00 00 FF 
0b454     88 E4 05 F1 | 	add	objptr, ##63112
0b458     F2 14 02 FB | 	rdlong	arg02, objptr
0b45c     7B 00 00 FF 
0b460     88 E4 85 F1 | 	sub	objptr, ##63112
0b464     D4 13 B1 FD | 	call	#__system___string_concat
0b468     FD 14 02 F6 | 	mov	arg02, result1
0b46c     0F 13 02 F6 | 	mov	arg01, local01
0b470     00 16 06 F6 | 	mov	arg03, #0
0b474     68 1F B1 FD | 	call	#__system___basic_open_string
0b478                 | '     do
0b478                 | LR__0935
0b478     09 12 06 F6 | 	mov	arg01, #9
0b47c     6C 15 B1 FD | 	call	#__system___basic_read_line
0b480     57 00 00 FF 
0b484     00 E4 05 F1 | 	add	objptr, ##44544
0b488     F2 FA 61 FC | 	wrlong	result1, objptr
0b48c                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0b48c     57 00 00 FF 
0b490     00 E4 85 F1 | 	sub	objptr, ##44544
0b494     FD 12 02 F6 | 	mov	arg01, result1
0b498     01 14 06 F6 | 	mov	arg02, #1
0b49c     84 33 B1 FD | 	call	#__system__Left_S
0b4a0     FD 12 02 F6 | 	mov	arg01, result1
0b4a4     61 01 00 FF 
0b4a8     84 15 06 F6 | 	mov	arg02, ##@LR__4932
0b4ac     58 13 B1 FD | 	call	#__system___string_cmp
0b4b0     00 FA 55 F2 | 	cmps	result1, #0 wc
0b4b4     34 00 90 CD |  if_b	jmp	#LR__0936
0b4b8     57 00 00 FF 
0b4bc     00 E4 05 F1 | 	add	objptr, ##44544
0b4c0     F2 12 02 FB | 	rdlong	arg01, objptr
0b4c4     57 00 00 FF 
0b4c8     00 E4 85 F1 | 	sub	objptr, ##44544
0b4cc     01 14 06 F6 | 	mov	arg02, #1
0b4d0     50 33 B1 FD | 	call	#__system__Left_S
0b4d4     FD 12 02 F6 | 	mov	arg01, result1
0b4d8     61 01 00 FF 
0b4dc     86 15 06 F6 | 	mov	arg02, ##@LR__4933
0b4e0     24 13 B1 FD | 	call	#__system___string_cmp
0b4e4     01 FA 55 F2 | 	cmps	result1, #1 wc
0b4e8     30 55 BF CD |  if_b	call	#_interpret
0b4ec                 | LR__0936
0b4ec     57 00 00 FF 
0b4f0     00 E4 05 F1 | 	add	objptr, ##44544
0b4f4     F2 12 02 FB | 	rdlong	arg01, objptr
0b4f8     57 00 00 FF 
0b4fc     00 E4 85 F1 | 	sub	objptr, ##44544
0b500     61 01 00 FF 
0b504     88 15 06 F6 | 	mov	arg02, ##@LR__4934
0b508     FC 12 B1 FD | 	call	#__system___string_cmp
0b50c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b510     64 FF 9F 5D |  if_ne	jmp	#LR__0935
0b514                 | '     close #9
0b514     09 12 06 F6 | 	mov	arg01, #9
0b518     88 62 B1 FD | 	call	#__system__close
0b51c     F4 00 90 FD | 	jmp	#LR__0941
0b520                 | LR__0937
0b520                 | '   'printerror(26) : close #9 : return
0b520                 | '     do
0b520                 | LR__0938
0b520                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0b520     0C 4E 05 F1 | 	add	fp, #12
0b524     A7 14 02 FB | 	rdlong	arg02, fp
0b528     14 4E 05 F1 | 	add	fp, #20
0b52c     A7 16 02 F6 | 	mov	arg03, fp
0b530     20 4E 85 F1 | 	sub	fp, #32
0b534     09 12 06 F6 | 	mov	arg01, #9
0b538     01 18 06 F6 | 	mov	arg04, #1
0b53c     04 1A 06 F6 | 	mov	arg05, #4
0b540     B0 20 B1 FD | 	call	#__system___basic_get
0b544     14 4E 05 F1 | 	add	fp, #20
0b548     A7 FA 61 FC | 	wrlong	result1, fp
0b54c     08 4E 85 F1 | 	sub	fp, #8
0b550     A7 1E 02 FB | 	rdlong	local01, fp
0b554     04 1E 06 F1 | 	add	local01, #4
0b558     A7 1E 62 FC | 	wrlong	local01, fp
0b55c     14 4E 05 F1 | 	add	fp, #20
0b560     A7 1E 02 FB | 	rdlong	local01, fp
0b564     04 4E 05 F1 | 	add	fp, #4
0b568     A7 1E 02 F1 | 	add	local01, fp
0b56c     0F 01 48 FC | 	wrbyte	#0, local01
0b570                 | '       if amount=1 then  
0b570     10 4E 85 F1 | 	sub	fp, #16
0b574     A7 1E 02 FB | 	rdlong	local01, fp
0b578     14 4E 85 F1 | 	sub	fp, #20
0b57c     01 1E 0E F2 | 	cmp	local01, #1 wz
0b580     68 00 90 5D |  if_ne	jmp	#LR__0939
0b584                 | '         get #9,i,line2(0),linelength : i+=linelength
0b584     0C 4E 05 F1 | 	add	fp, #12
0b588     A7 14 02 FB | 	rdlong	arg02, fp
0b58c     18 4E 05 F1 | 	add	fp, #24
0b590     A7 16 02 F6 | 	mov	arg03, fp
0b594     04 4E 85 F1 | 	sub	fp, #4
0b598     A7 18 02 FB | 	rdlong	arg04, fp
0b59c     20 4E 85 F1 | 	sub	fp, #32
0b5a0     09 12 06 F6 | 	mov	arg01, #9
0b5a4     01 1A 06 F6 | 	mov	arg05, #1
0b5a8     48 20 B1 FD | 	call	#__system___basic_get
0b5ac     0C 4E 05 F1 | 	add	fp, #12
0b5b0     A7 1E 02 FB | 	rdlong	local01, fp
0b5b4     14 4E 05 F1 | 	add	fp, #20
0b5b8     A7 1A 02 FB | 	rdlong	arg05, fp
0b5bc     0D 1F 02 F1 | 	add	local01, arg05
0b5c0     14 4E 85 F1 | 	sub	fp, #20
0b5c4     A7 1E 62 FC | 	wrlong	local01, fp
0b5c8     98 4E 05 F1 | 	add	fp, #152
0b5cc     A7 1E 02 FB | 	rdlong	local01, fp
0b5d0     A4 4E 85 F1 | 	sub	fp, #164
0b5d4     57 00 00 FF 
0b5d8     00 E4 05 F1 | 	add	objptr, ##44544
0b5dc     F2 1E 62 FC | 	wrlong	local01, objptr
0b5e0     57 00 00 FF 
0b5e4     00 E4 85 F1 | 	sub	objptr, ##44544
0b5e8     30 54 BF FD | 	call	#_interpret
0b5ec                 | LR__0939
0b5ec     14 4E 05 F1 | 	add	fp, #20
0b5f0     A7 1E 02 FB | 	rdlong	local01, fp
0b5f4     14 4E 85 F1 | 	sub	fp, #20
0b5f8     01 1E 56 F2 | 	cmps	local01, #1 wc
0b5fc     20 FF 9F 3D |  if_ae	jmp	#LR__0938
0b600                 | '     close #9 
0b600     09 12 06 F6 | 	mov	arg01, #9
0b604     9C 61 B1 FD | 	call	#__system__close
0b608     08 00 90 FD | 	jmp	#LR__0941
0b60c                 | LR__0940
0b60c     1E 12 06 F6 | 	mov	arg01, #30
0b610     E4 D9 B0 FD | 	call	#_printerror
0b614                 | LR__0941
0b614                 | '   print "Loaded ";currentdir$+"/"+loadname
0b614     00 12 06 F6 | 	mov	arg01, #0
0b618     54 6B B1 FD | 	call	#__system___getiolock_0474
0b61c     FD 12 02 F6 | 	mov	arg01, result1
0b620     BC 11 B1 FD | 	call	#__system___lockmem
0b624     61 01 00 FF 
0b628     89 15 06 F6 | 	mov	arg02, ##@LR__4935
0b62c     00 12 06 F6 | 	mov	arg01, #0
0b630     00 16 06 F6 | 	mov	arg03, #0
0b634     AC 1E B1 FD | 	call	#__system___basic_print_string
0b638     00 1E 06 F6 | 	mov	local01, #0
0b63c     72 00 00 FF 
0b640     78 E4 05 F1 | 	add	objptr, ##58488
0b644     F2 12 02 FB | 	rdlong	arg01, objptr
0b648     72 00 00 FF 
0b64c     78 E4 85 F1 | 	sub	objptr, ##58488
0b650     61 01 00 FF 
0b654     91 15 06 F6 | 	mov	arg02, ##@LR__4936
0b658     E0 11 B1 FD | 	call	#__system___string_concat
0b65c     FD 12 02 F6 | 	mov	arg01, result1
0b660     7B 00 00 FF 
0b664     88 E4 05 F1 | 	add	objptr, ##63112
0b668     F2 14 02 FB | 	rdlong	arg02, objptr
0b66c     7B 00 00 FF 
0b670     88 E4 85 F1 | 	sub	objptr, ##63112
0b674     C4 11 B1 FD | 	call	#__system___string_concat
0b678     FD 14 02 F6 | 	mov	arg02, result1
0b67c     0F 13 02 F6 | 	mov	arg01, local01
0b680     00 16 06 F6 | 	mov	arg03, #0
0b684     5C 1E B1 FD | 	call	#__system___basic_print_string
0b688     00 12 06 F6 | 	mov	arg01, #0
0b68c     0A 14 06 F6 | 	mov	arg02, #10
0b690     00 16 06 F6 | 	mov	arg03, #0
0b694     F4 1D B1 FD | 	call	#__system___basic_print_char
0b698     00 12 06 F6 | 	mov	arg01, #0
0b69c     D0 6A B1 FD | 	call	#__system___getiolock_0474
0b6a0     FD 00 68 FC | 	wrlong	#0, result1
0b6a4                 | LR__0942
0b6a4     A7 F0 03 F6 | 	mov	ptra, fp
0b6a8     B2 00 A0 FD | 	call	#popregs_
0b6ac                 | _do_load_ret
0b6ac     2D 00 64 FD | 	ret
0b6b0                 | 
0b6b0                 | ' 
0b6b0                 | ' '----------------- Run the program 
0b6b0                 | ' 
0b6b0                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0b6b0                 | ' 
0b6b0                 | ' sub do_run
0b6b0                 | _do_run
0b6b0     01 4A 05 F6 | 	mov	COUNT_, #1
0b6b4     A8 00 A0 FD | 	call	#pushregs_
0b6b8     6A 00 00 FF 
0b6bc     64 E4 05 F1 | 	add	objptr, ##54372
0b6c0     F2 1C 02 FB | 	rdlong	arg06, objptr
0b6c4     0E 19 02 F6 | 	mov	arg04, arg06
0b6c8     01 18 66 F0 | 	shl	arg04, #1
0b6cc     0E 19 02 F1 | 	add	arg04, arg06
0b6d0     02 18 66 F0 | 	shl	arg04, #2
0b6d4     03 00 00 FF 
0b6d8     04 E4 85 F1 | 	sub	objptr, ##1540
0b6dc     F2 18 02 F1 | 	add	arg04, objptr
0b6e0     0C 1B 02 FB | 	rdlong	arg05, arg04
0b6e4                 | ' numpar=compiledline(lineptr_e).result.uresult
0b6e4                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0b6e4     01 1A 0E F2 | 	cmp	arg05, #1 wz
0b6e8     67 00 00 FF 
0b6ec     60 E4 85 F1 | 	sub	objptr, ##52832
0b6f0     08 FA BF AD |  if_e	call	#_do_load
0b6f4     6A 00 00 FF 
0b6f8     68 E4 05 F1 | 	add	objptr, ##54376
0b6fc     F2 1C 02 FB | 	rdlong	arg06, objptr
0b700     0F 00 00 FF 
0b704     2C E5 05 F1 | 	add	objptr, ##7980
0b708     F2 1C 62 FC | 	wrlong	arg06, objptr
0b70c     04 E4 05 F1 | 	add	objptr, #4
0b710     F2 00 68 FC | 	wrlong	#0, objptr
0b714     04 E4 05 F1 | 	add	objptr, #4
0b718     FF FF FF FF 
0b71c     F2 FE 6B FC | 	wrlong	##-1, objptr
0b720                 | ' if inrun>0 then 
0b720     04 E4 05 F1 | 	add	objptr, #4
0b724     F2 1C 02 FB | 	rdlong	arg06, objptr
0b728     79 00 00 FF 
0b72c     A0 E5 85 F1 | 	sub	objptr, ##62368
0b730     01 1C 16 F2 | 	cmp	arg06, #1 wc
0b734     30 00 90 CD |  if_b	jmp	#LR__0950
0b738     79 00 00 FF 
0b73c     A4 E5 05 F1 | 	add	objptr, ##62372
0b740     F2 12 02 F6 | 	mov	arg01, objptr
0b744     10 E4 85 F1 | 	sub	objptr, #16
0b748     F2 14 02 FB | 	rdlong	arg02, objptr
0b74c     18 16 06 F6 | 	mov	arg03, #24
0b750     6E 00 00 FF 
0b754     D4 E4 85 F1 | 	sub	objptr, ##56532
0b758     80 04 B1 FD | 	call	#_psram_spin2_read1
0b75c     0B 00 00 FF 
0b760     C0 E4 85 F1 | 	sub	objptr, ##5824
0b764                 | '   psram.read1(varptr(runheader),runptr,24)  
0b764                 | '   return
0b764     C4 02 90 FD | 	jmp	#LR__0957
0b768                 | LR__0950
0b768     79 00 00 FF 
0b76c     A0 E5 05 F1 | 	add	objptr, ##62368
0b770     F2 02 68 FC | 	wrlong	#1, objptr
0b774     04 E4 05 F1 | 	add	objptr, #4
0b778     F2 12 02 F6 | 	mov	arg01, objptr
0b77c     10 E4 85 F1 | 	sub	objptr, #16
0b780     F2 14 02 FB | 	rdlong	arg02, objptr
0b784     18 16 06 F6 | 	mov	arg03, #24
0b788     6E 00 00 FF 
0b78c     D4 E4 85 F1 | 	sub	objptr, ##56532
0b790     48 04 B1 FD | 	call	#_psram_spin2_read1
0b794                 | ' inrun=1
0b794                 | ' psram.read1(varptr(runheader),runptr,24) 
0b794                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0b794     6E 00 00 FF 
0b798     E4 E4 05 F1 | 	add	objptr, ##56548
0b79c     F2 1E 02 FB | 	rdlong	local01, objptr
0b7a0     79 00 00 FF 
0b7a4     A4 E5 85 F1 | 	sub	objptr, ##62372
0b7a8     FF FF 7F FF 
0b7ac     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0b7b0     79 00 00 AF 
0b7b4     A0 E5 05 A1 |  if_e	add	objptr, ##62368
0b7b8     F2 00 68 AC |  if_e	wrlong	#0, objptr
0b7bc     79 00 00 AF 
0b7c0     A0 E5 85 A1 |  if_e	sub	objptr, ##62368
0b7c4     64 02 90 AD |  if_e	jmp	#LR__0957
0b7c8                 | ' do 
0b7c8                 | LR__0951
0b7c8                 | '   if runptr<>oldrunptr then
0b7c8     79 00 00 FF 
0b7cc     94 E5 05 F1 | 	add	objptr, ##62356
0b7d0     F2 1E 02 FB | 	rdlong	local01, objptr
0b7d4     08 E4 05 F1 | 	add	objptr, #8
0b7d8     F2 1C 02 FB | 	rdlong	arg06, objptr
0b7dc     79 00 00 FF 
0b7e0     9C E5 85 F1 | 	sub	objptr, ##62364
0b7e4     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0b7e8     CC 00 90 AD |  if_e	jmp	#LR__0952
0b7ec     79 00 00 FF 
0b7f0     A4 E5 05 F1 | 	add	objptr, ##62372
0b7f4     F2 12 02 F6 | 	mov	arg01, objptr
0b7f8     10 E4 85 F1 | 	sub	objptr, #16
0b7fc     F2 14 02 FB | 	rdlong	arg02, objptr
0b800     18 16 06 F6 | 	mov	arg03, #24
0b804     6E 00 00 FF 
0b808     D4 E4 85 F1 | 	sub	objptr, ##56532
0b80c     CC 03 B1 FD | 	call	#_psram_spin2_read1
0b810     5B 00 00 FF 
0b814     A0 E5 05 F1 | 	add	objptr, ##47008
0b818     F2 12 02 F6 | 	mov	arg01, objptr
0b81c     12 00 00 FF 
0b820     34 E5 05 F1 | 	add	objptr, ##9524
0b824     F2 14 02 FB | 	rdlong	arg02, objptr
0b828     14 00 00 FF 
0b82c     4C E5 85 F1 | 	sub	objptr, ##10572
0b830     F2 1E 02 FB | 	rdlong	local01, objptr
0b834     01 1E 66 F0 | 	shl	local01, #1
0b838     0F 15 02 F1 | 	add	arg02, local01
0b83c     14 00 00 FF 
0b840     64 E5 05 F1 | 	add	objptr, ##10596
0b844     F2 16 02 FB | 	rdlong	arg03, objptr
0b848     18 E4 85 F1 | 	sub	objptr, #24
0b84c     F2 1E 02 FB | 	rdlong	local01, objptr
0b850     0F 17 82 F1 | 	sub	arg03, local01
0b854     6E 00 00 FF 
0b858     D4 E4 85 F1 | 	sub	objptr, ##56532
0b85c     7C 03 B1 FD | 	call	#_psram_spin2_read1
0b860     6E 00 00 FF 
0b864     EC E4 05 F1 | 	add	objptr, ##56556
0b868     F2 1E 02 FB | 	rdlong	local01, objptr
0b86c     18 E4 85 F1 | 	sub	objptr, #24
0b870     F2 16 02 FB | 	rdlong	arg03, objptr
0b874     0B 1F 82 F1 | 	sub	local01, arg03
0b878     14 00 00 FF 
0b87c     4C E5 85 F1 | 	sub	objptr, ##10572
0b880     F2 16 02 FB | 	rdlong	arg03, objptr
0b884     0B 1F 12 FD | 	qdiv	local01, arg03
0b888     05 00 00 FF 
0b88c     18 E4 05 F1 | 	add	objptr, ##2584
0b890     18 1E 62 FD | 	getqx	local01
0b894     03 1E 86 F1 | 	sub	local01, #3
0b898     F2 1E 62 FC | 	wrlong	local01, objptr
0b89c     0F 00 00 FF 
0b8a0     34 E5 05 F1 | 	add	objptr, ##7988
0b8a4     F2 1E 02 FB | 	rdlong	local01, objptr
0b8a8     08 E4 05 F1 | 	add	objptr, #8
0b8ac     F2 1E 62 FC | 	wrlong	local01, objptr
0b8b0     79 00 00 FF 
0b8b4     9C E5 85 F1 | 	sub	objptr, ##62364
0b8b8                 | LR__0952
0b8b8     79 00 00 FF 
0b8bc     B8 E5 05 F1 | 	add	objptr, ##62392
0b8c0     F2 1E 02 FB | 	rdlong	local01, objptr
0b8c4     24 E4 85 F1 | 	sub	objptr, #36
0b8c8     F2 1E 62 FC | 	wrlong	local01, objptr
0b8cc     04 E4 05 F1 | 	add	objptr, #4
0b8d0     F2 12 02 FB | 	rdlong	arg01, objptr
0b8d4     79 00 00 FF 
0b8d8     98 E5 85 F1 | 	sub	objptr, ##62360
0b8dc     FC E7 BF FD | 	call	#_execute_line
0b8e0     79 00 00 FF 
0b8e4     98 E5 05 F1 | 	add	objptr, ##62360
0b8e8     F2 FA 61 FC | 	wrlong	result1, objptr
0b8ec     04 E4 85 F1 | 	sub	objptr, #4
0b8f0     F2 1E 02 FB | 	rdlong	local01, objptr
0b8f4     79 00 00 FF 
0b8f8     94 E5 85 F1 | 	sub	objptr, ##62356
0b8fc     FF FF 3F FF 
0b900     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b904     30 00 90 AD |  if_e	jmp	#LR__0954
0b908     E0 12 06 F6 | 	mov	arg01, #224
0b90c     5C 06 B1 FD | 	call	#_usbnew_spin2_keystate
0b910     00 FA 0D F2 | 	cmp	result1, #0 wz
0b914     10 00 90 5D |  if_ne	jmp	#LR__0953
0b918     E4 12 06 F6 | 	mov	arg01, #228
0b91c     4C 06 B1 FD | 	call	#_usbnew_spin2_keystate
0b920     00 FA 0D F2 | 	cmp	result1, #0 wz
0b924     A0 FE 9F AD |  if_e	jmp	#LR__0951
0b928                 | LR__0953
0b928     06 12 06 F6 | 	mov	arg01, #6
0b92c     3C 06 B1 FD | 	call	#_usbnew_spin2_keystate
0b930     00 FA 0D F2 | 	cmp	result1, #0 wz
0b934     90 FE 9F AD |  if_e	jmp	#LR__0951
0b938                 | LR__0954
0b938                 | '   ''do whatever kbm.peek_latest_key()=$106 
0b938                 | ' if runheader(5)<>$7FFF_FFFF then 
0b938     79 00 00 FF 
0b93c     B8 E5 05 F1 | 	add	objptr, ##62392
0b940     F2 1E 02 FB | 	rdlong	local01, objptr
0b944     79 00 00 FF 
0b948     B8 E5 85 F1 | 	sub	objptr, ##62392
0b94c     FF FF 3F FF 
0b950     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b954     C0 00 90 AD |  if_e	jmp	#LR__0956
0b958                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)  : kbm.get_key ' eat ctrl-c
0b958     79 00 00 FF 
0b95c     C4 E5 05 F1 | 	add	objptr, ##62404
0b960     F2 1E 02 FB | 	rdlong	local01, objptr
0b964     79 00 00 FF 
0b968     C4 E5 85 F1 | 	sub	objptr, ##62404
0b96c     01 1E 0E F2 | 	cmp	local01, #1 wz
0b970     40 00 90 5D |  if_ne	jmp	#LR__0955
0b974     7B 00 00 FF 
0b978     68 E4 05 F1 | 	add	objptr, ##63080
0b97c     F2 14 02 FB | 	rdlong	arg02, objptr
0b980     04 E4 85 F1 | 	sub	objptr, #4
0b984     F2 1A 02 FB | 	rdlong	arg05, objptr
0b988     07 12 06 F6 | 	mov	arg01, #7
0b98c     56 00 00 FF 
0b990     44 16 06 F6 | 	mov	arg03, ##44100
0b994     0C 18 C6 F9 | 	decod	arg04, #12
0b998     01 1C 66 F6 | 	neg	arg06, #1
0b99c     6F 00 00 FF 
0b9a0     A4 E5 85 F1 | 	sub	objptr, ##57252
0b9a4     E8 09 B1 FD | 	call	#_audio096_spin2_play
0b9a8     0B 00 00 FF 
0b9ac     C0 E4 85 F1 | 	sub	objptr, ##5824
0b9b0     54 06 B1 FD | 	call	#_usbnew_spin2_get_key
0b9b4                 | LR__0955
0b9b4                 | '   print "Stopped at line ";runheader(0)
0b9b4     00 12 06 F6 | 	mov	arg01, #0
0b9b8     B4 67 B1 FD | 	call	#__system___getiolock_0474
0b9bc     FD 12 02 F6 | 	mov	arg01, result1
0b9c0     1C 0E B1 FD | 	call	#__system___lockmem
0b9c4     61 01 00 FF 
0b9c8     93 15 06 F6 | 	mov	arg02, ##@LR__4937
0b9cc     00 12 06 F6 | 	mov	arg01, #0
0b9d0     00 16 06 F6 | 	mov	arg03, #0
0b9d4     0C 1B B1 FD | 	call	#__system___basic_print_string
0b9d8     79 00 00 FF 
0b9dc     A4 E5 05 F1 | 	add	objptr, ##62372
0b9e0     F2 14 02 FB | 	rdlong	arg02, objptr
0b9e4     79 00 00 FF 
0b9e8     A4 E5 85 F1 | 	sub	objptr, ##62372
0b9ec     00 12 06 F6 | 	mov	arg01, #0
0b9f0     00 16 06 F6 | 	mov	arg03, #0
0b9f4     0A 18 06 F6 | 	mov	arg04, #10
0b9f8     6C 1B B1 FD | 	call	#__system___basic_print_unsigned
0b9fc     00 12 06 F6 | 	mov	arg01, #0
0ba00     0A 14 06 F6 | 	mov	arg02, #10
0ba04     00 16 06 F6 | 	mov	arg03, #0
0ba08     80 1A B1 FD | 	call	#__system___basic_print_char
0ba0c     00 12 06 F6 | 	mov	arg01, #0
0ba10     5C 67 B1 FD | 	call	#__system___getiolock_0474
0ba14     FD 00 68 FC | 	wrlong	#0, result1
0ba18                 | LR__0956
0ba18     79 00 00 FF 
0ba1c     A0 E5 05 F1 | 	add	objptr, ##62368
0ba20     F2 00 68 FC | 	wrlong	#0, objptr
0ba24     79 00 00 FF 
0ba28     A0 E5 85 F1 | 	sub	objptr, ##62368
0ba2c                 | LR__0957
0ba2c     A7 F0 03 F6 | 	mov	ptra, fp
0ba30     B2 00 A0 FD | 	call	#popregs_
0ba34                 | _do_run_ret
0ba34     2D 00 64 FD | 	ret
0ba38                 | 
0ba38                 | ' 
0ba38                 | ' 
0ba38                 | ' 
0ba38                 | ' 
0ba38                 | ' 
0ba38                 | ' 
0ba38                 | ' 
0ba38                 | ' sub do_defenv
0ba38                 | _do_defenv
0ba38     09 4A 05 F6 | 	mov	COUNT_, #9
0ba3c     A8 00 A0 FD | 	call	#pushregs_
0ba40     B4 F0 07 F1 | 	add	ptra, #180
0ba44     6A 00 00 FF 
0ba48     64 E4 05 F1 | 	add	objptr, ##54372
0ba4c     F2 1E 02 FB | 	rdlong	local01, objptr
0ba50     0F 1B 02 F6 | 	mov	arg05, local01
0ba54     01 1A 66 F0 | 	shl	arg05, #1
0ba58     0F 1B 02 F1 | 	add	arg05, local01
0ba5c     02 1A 66 F0 | 	shl	arg05, #2
0ba60     03 00 00 FF 
0ba64     04 E4 85 F1 | 	sub	objptr, ##1540
0ba68     F2 20 02 F6 | 	mov	local02, objptr
0ba6c     F2 1A 02 F1 | 	add	arg05, objptr
0ba70     0D 1B 02 FB | 	rdlong	arg05, arg05
0ba74     10 4E 05 F1 | 	add	fp, #16
0ba78     A7 1A 62 FC | 	wrlong	arg05, fp
0ba7c                 | ' 
0ba7c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ba7c                 | ' 
0ba7c                 | ' 
0ba7c                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ba7c                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ba7c                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0ba7c                 | ' 
0ba7c                 | ' 
0ba7c                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0ba7c     10 4E 85 F1 | 	sub	fp, #16
0ba80     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ba84     67 00 00 FF 
0ba88     60 E4 85 F1 | 	sub	objptr, ##52832
0ba8c     10 4E 05 51 |  if_ne	add	fp, #16
0ba90     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ba94     10 4E 85 51 |  if_ne	sub	fp, #16
0ba98     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0ba9c     10 4E 05 51 |  if_ne	add	fp, #16
0baa0     0F 21 02 56 |  if_ne	mov	local02, local01
0baa4     10 4E 85 51 |  if_ne	sub	fp, #16
0baa8     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0baac     24 0C 90 5D |  if_ne	jmp	#LR__0981
0bab0                 | ' 
0bab0                 | '  
0bab0                 | ' if numpar=2 then
0bab0     10 4E 05 F1 | 	add	fp, #16
0bab4     A7 20 02 FB | 	rdlong	local02, fp
0bab8     10 4E 85 F1 | 	sub	fp, #16
0babc     02 20 0E F2 | 	cmp	local02, #2 wz
0bac0     CC 03 90 5D |  if_ne	jmp	#LR__0972
0bac4     18 E7 BF FD | 	call	#_pop
0bac8     FF 1A 02 F6 | 	mov	arg05, result3
0bacc     5C 4E 05 F1 | 	add	fp, #92
0bad0     A7 FA 61 FC | 	wrlong	result1, fp
0bad4     04 4E 05 F1 | 	add	fp, #4
0bad8     A7 FC 61 FC | 	wrlong	result2, fp
0badc     04 4E 05 F1 | 	add	fp, #4
0bae0     A7 1A 62 FC | 	wrlong	arg05, fp
0bae4                 | '   t1=pop()
0bae4                 | '   if t1.result_type=result_string2 then 
0bae4     64 4E 85 F1 | 	sub	fp, #100
0bae8     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0baec     20 00 90 5D |  if_ne	jmp	#LR__0960
0baf0     5C 4E 05 F1 | 	add	fp, #92
0baf4     A7 12 02 FB | 	rdlong	arg01, fp
0baf8     5C 4E 85 F1 | 	sub	fp, #92
0bafc     6C 29 B0 FD | 	call	#_convertstring
0bb00     68 4E 05 F1 | 	add	fp, #104
0bb04     A7 FA 61 FC | 	wrlong	result1, fp
0bb08     68 4E 85 F1 | 	sub	fp, #104
0bb0c     58 00 90 FD | 	jmp	#LR__0963
0bb10                 | LR__0960
0bb10     64 4E 05 F1 | 	add	fp, #100
0bb14     A7 20 02 FB | 	rdlong	local02, fp
0bb18     64 4E 85 F1 | 	sub	fp, #100
0bb1c     1F 20 0E F2 | 	cmp	local02, #31 wz
0bb20     18 00 90 5D |  if_ne	jmp	#LR__0961
0bb24     5C 4E 05 F1 | 	add	fp, #92
0bb28     A7 20 02 FB | 	rdlong	local02, fp
0bb2c     0C 4E 05 F1 | 	add	fp, #12
0bb30     A7 20 62 FC | 	wrlong	local02, fp
0bb34     68 4E 85 F1 | 	sub	fp, #104
0bb38     2C 00 90 FD | 	jmp	#LR__0962
0bb3c                 | LR__0961
0bb3c     61 01 00 FF 
0bb40     A4 21 06 F6 | 	mov	local02, ##@LR__4938
0bb44     68 4E 05 F1 | 	add	fp, #104
0bb48     A7 20 62 FC | 	wrlong	local02, fp
0bb4c     0C 4E 85 F1 | 	sub	fp, #12
0bb50     A7 12 02 F6 | 	mov	arg01, fp
0bb54     5C 4E 85 F1 | 	sub	fp, #92
0bb58     C0 72 B0 FD | 	call	#_converttoint
0bb5c     24 4E 05 F1 | 	add	fp, #36
0bb60     A7 FA 61 FC | 	wrlong	result1, fp
0bb64     24 4E 85 F1 | 	sub	fp, #36
0bb68                 | LR__0962
0bb68                 | LR__0963
0bb68                 | ' 
0bb68                 | '     
0bb68                 | '   if s1<>"" then 
0bb68     68 4E 05 F1 | 	add	fp, #104
0bb6c     A7 12 02 FB | 	rdlong	arg01, fp
0bb70     68 4E 85 F1 | 	sub	fp, #104
0bb74     61 01 00 FF 
0bb78     A5 15 06 F6 | 	mov	arg02, ##@LR__4939
0bb7c     88 0C B1 FD | 	call	#__system___string_cmp
0bb80     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb84     F8 01 90 AD |  if_e	jmp	#LR__0967
0bb88     54 E6 BF FD | 	call	#_pop
0bb8c     FF 1E 02 F6 | 	mov	local01, result3
0bb90     5C 4E 05 F1 | 	add	fp, #92
0bb94     A7 FA 61 FC | 	wrlong	result1, fp
0bb98     04 4E 05 F1 | 	add	fp, #4
0bb9c     A7 FC 61 FC | 	wrlong	result2, fp
0bba0     04 4E 05 F1 | 	add	fp, #4
0bba4     A7 1E 62 FC | 	wrlong	local01, fp
0bba8     08 4E 85 F1 | 	sub	fp, #8
0bbac     A7 12 02 F6 | 	mov	arg01, fp
0bbb0     5C 4E 85 F1 | 	sub	fp, #92
0bbb4     64 72 B0 FD | 	call	#_converttoint
0bbb8     20 4E 05 F1 | 	add	fp, #32
0bbbc     A7 FA 61 FC | 	wrlong	result1, fp
0bbc0     20 4E 85 F1 | 	sub	fp, #32
0bbc4                 | '     t1=pop()
0bbc4                 | '     channel=converttoint(t1) 
0bbc4                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0bbc4     09 12 06 F6 | 	mov	arg01, #9
0bbc8     D8 5B B1 FD | 	call	#__system__close
0bbcc     09 20 06 F6 | 	mov	local02, #9
0bbd0     61 01 00 FF 
0bbd4     A6 13 06 F6 | 	mov	arg01, ##@LR__4940
0bbd8     68 4E 05 F1 | 	add	fp, #104
0bbdc     A7 14 02 FB | 	rdlong	arg02, fp
0bbe0     68 4E 85 F1 | 	sub	fp, #104
0bbe4     54 0C B1 FD | 	call	#__system___string_concat
0bbe8     FD 14 02 F6 | 	mov	arg02, result1
0bbec     10 13 02 F6 | 	mov	arg01, local02
0bbf0     00 16 06 F6 | 	mov	arg03, #0
0bbf4     E8 17 B1 FD | 	call	#__system___basic_open_string
0bbf8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0bbfc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0bc00     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0bc04     0C 4E 05 F1 | 	add	fp, #12
0bc08     A7 FA 61 FC | 	wrlong	result1, fp
0bc0c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0bc0c     0C 4E 85 F1 | 	sub	fp, #12
0bc10     A0 00 90 AD |  if_e	jmp	#LR__0964
0bc14     00 12 06 F6 | 	mov	arg01, #0
0bc18     54 65 B1 FD | 	call	#__system___getiolock_0474
0bc1c     FD 12 02 F6 | 	mov	arg01, result1
0bc20     BC 0B B1 FD | 	call	#__system___lockmem
0bc24     61 01 00 FF 
0bc28     B3 15 06 F6 | 	mov	arg02, ##@LR__4941
0bc2c     00 12 06 F6 | 	mov	arg01, #0
0bc30     00 16 06 F6 | 	mov	arg03, #0
0bc34     AC 18 B1 FD | 	call	#__system___basic_print_string
0bc38     0C 4E 05 F1 | 	add	fp, #12
0bc3c     A7 14 02 FB | 	rdlong	arg02, fp
0bc40     0C 4E 85 F1 | 	sub	fp, #12
0bc44     00 12 06 F6 | 	mov	arg01, #0
0bc48     00 16 06 F6 | 	mov	arg03, #0
0bc4c     0A 18 06 F6 | 	mov	arg04, #10
0bc50     D4 18 B1 FD | 	call	#__system___basic_print_integer
0bc54     61 01 00 FF 
0bc58     C1 15 06 F6 | 	mov	arg02, ##@LR__4942
0bc5c     00 12 06 F6 | 	mov	arg01, #0
0bc60     00 16 06 F6 | 	mov	arg03, #0
0bc64     7C 18 B1 FD | 	call	#__system___basic_print_string
0bc68     00 20 06 F6 | 	mov	local02, #0
0bc6c     0C 4E 05 F1 | 	add	fp, #12
0bc70     A7 12 02 FB | 	rdlong	arg01, fp
0bc74     0C 4E 85 F1 | 	sub	fp, #12
0bc78     F4 31 B1 FD | 	call	#__system___strerror
0bc7c     FD 14 02 F6 | 	mov	arg02, result1
0bc80     10 13 02 F6 | 	mov	arg01, local02
0bc84     00 16 06 F6 | 	mov	arg03, #0
0bc88     58 18 B1 FD | 	call	#__system___basic_print_string
0bc8c     00 12 06 F6 | 	mov	arg01, #0
0bc90     0A 14 06 F6 | 	mov	arg02, #10
0bc94     00 16 06 F6 | 	mov	arg03, #0
0bc98     F0 17 B1 FD | 	call	#__system___basic_print_char
0bc9c     00 12 06 F6 | 	mov	arg01, #0
0bca0     CC 64 B1 FD | 	call	#__system___getiolock_0474
0bca4     FD 00 68 FC | 	wrlong	#0, result1
0bca8     09 12 06 F6 | 	mov	arg01, #9
0bcac     F4 5A B1 FD | 	call	#__system__close
0bcb0     20 0A 90 FD | 	jmp	#LR__0981
0bcb4                 | LR__0964
0bcb4                 | '     get #9,17,envbuf8(channel,0),256
0bcb4     20 4E 05 F1 | 	add	fp, #32
0bcb8     A7 1A 02 FB | 	rdlong	arg05, fp
0bcbc     20 4E 85 F1 | 	sub	fp, #32
0bcc0     0D 17 02 F6 | 	mov	arg03, arg05
0bcc4     09 16 66 F0 | 	shl	arg03, #9
0bcc8     0D 17 02 F1 | 	add	arg03, arg05
0bccc     2C 00 00 FF 
0bcd0     CC E4 05 F1 | 	add	objptr, ##22732
0bcd4     F2 16 02 F1 | 	add	arg03, objptr
0bcd8     09 12 06 F6 | 	mov	arg01, #9
0bcdc     11 14 06 F6 | 	mov	arg02, #17
0bce0     00 19 06 F6 | 	mov	arg04, #256
0bce4     01 1A 06 F6 | 	mov	arg05, #1
0bce8     2C 00 00 FF 
0bcec     CC E4 85 F1 | 	sub	objptr, ##22732
0bcf0     00 19 B1 FD | 	call	#__system___basic_get
0bcf4                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0bcf4     14 4E 05 F1 | 	add	fp, #20
0bcf8     A7 FE 69 FC | 	wrlong	#255, fp
0bcfc     14 4E 85 F1 | 	sub	fp, #20
0bd00     2C 00 00 FF 
0bd04     CC E4 05 F1 | 	add	objptr, ##22732
0bd08     97 30 48 FB | 	callpa	#(@LR__0966-@LR__0965)>>2,fcache_load_ptr_
0bd0c                 | LR__0965
0bd0c     20 4E 05 F1 | 	add	fp, #32
0bd10     A7 18 02 FB | 	rdlong	arg04, fp
0bd14     0C 21 02 F6 | 	mov	local02, arg04
0bd18     09 20 66 F0 | 	shl	local02, #9
0bd1c     F2 20 02 F1 | 	add	local02, objptr
0bd20     0C 4E 85 F1 | 	sub	fp, #12
0bd24     A7 1E 02 FB | 	rdlong	local01, fp
0bd28     0F 1B 02 F6 | 	mov	arg05, local01
0bd2c     01 1A 66 F0 | 	shl	arg05, #1
0bd30     10 1B 02 F1 | 	add	arg05, local02
0bd34     0C 21 02 F6 | 	mov	local02, arg04
0bd38     09 20 66 F0 | 	shl	local02, #9
0bd3c     0C 21 02 F1 | 	add	local02, arg04
0bd40     F2 20 02 F1 | 	add	local02, objptr
0bd44     10 1F 02 F1 | 	add	local01, local02
0bd48     0F 21 C2 FA | 	rdbyte	local02, local01
0bd4c     00 21 06 FA | 	mul	local02, #256
0bd50     0D 21 52 FC | 	wrword	local02, arg05
0bd54     A7 20 02 FB | 	rdlong	local02, fp
0bd58     01 20 86 F1 | 	sub	local02, #1
0bd5c     A7 20 62 FC | 	wrlong	local02, fp
0bd60     14 4E 85 F1 | 	sub	fp, #20
0bd64     00 20 56 F2 | 	cmps	local02, #0 wc
0bd68     A0 FF 9F 3D |  if_ae	jmp	#LR__0965
0bd6c                 | LR__0966
0bd6c     2C 00 00 FF 
0bd70     CC E4 85 F1 | 	sub	objptr, ##22732
0bd74                 | '     close #9
0bd74     09 12 06 F6 | 	mov	arg01, #9
0bd78     28 5A B1 FD | 	call	#__system__close
0bd7c                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0bd7c                 | '     return
0bd7c     54 09 90 FD | 	jmp	#LR__0981
0bd80                 | LR__0967
0bd80                 | '     if wptr < ($80000 - 2048) then 
0bd80     24 4E 05 F1 | 	add	fp, #36
0bd84     A7 22 02 FB | 	rdlong	local03, fp
0bd88     24 4E 85 F1 | 	sub	fp, #36
0bd8c     FC 03 00 FF 
0bd90     00 22 56 F2 | 	cmps	local03, ##522240 wc
0bd94     7C 00 90 3D |  if_ae	jmp	#LR__0970
0bd98                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0bd98     14 4E 05 F1 | 	add	fp, #20
0bd9c     A7 00 68 FC | 	wrlong	#0, fp
0bda0     14 4E 85 F1 | 	sub	fp, #20
0bda4     2C 00 00 FF 
0bda8     CC E4 05 F1 | 	add	objptr, ##22732
0bdac     97 2C 48 FB | 	callpa	#(@LR__0969-@LR__0968)>>2,fcache_load_ptr_
0bdb0                 | LR__0968
0bdb0     20 4E 05 F1 | 	add	fp, #32
0bdb4     A7 22 02 FB | 	rdlong	local03, fp
0bdb8     09 22 66 F0 | 	shl	local03, #9
0bdbc     F2 22 02 F1 | 	add	local03, objptr
0bdc0     0C 4E 85 F1 | 	sub	fp, #12
0bdc4     A7 20 02 FB | 	rdlong	local02, fp
0bdc8     10 1F 02 F6 | 	mov	local01, local02
0bdcc     01 1E 66 F0 | 	shl	local01, #1
0bdd0     11 1F 02 F1 | 	add	local01, local03
0bdd4     10 4E 05 F1 | 	add	fp, #16
0bdd8     A7 12 02 FB | 	rdlong	arg01, fp
0bddc     01 20 66 F0 | 	shl	local02, #1
0bde0     10 13 02 F1 | 	add	arg01, local02
0bde4     09 FB E1 FA | 	rdword	result1, arg01
0bde8     0F FB 51 FC | 	wrword	result1, local01
0bdec     10 4E 85 F1 | 	sub	fp, #16
0bdf0     A7 22 02 FB | 	rdlong	local03, fp
0bdf4     01 22 06 F1 | 	add	local03, #1
0bdf8     A7 22 62 FC | 	wrlong	local03, fp
0bdfc     14 4E 85 F1 | 	sub	fp, #20
0be00     00 23 56 F2 | 	cmps	local03, #256 wc
0be04     A8 FF 9F CD |  if_b	jmp	#LR__0968
0be08                 | LR__0969
0be08     2C 00 00 FF 
0be0c     CC E4 85 F1 | 	sub	objptr, ##22732
0be10     C0 08 90 FD | 	jmp	#LR__0981
0be14                 | LR__0970
0be14                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0be14     14 4E 05 F1 | 	add	fp, #20
0be18     A7 00 68 FC | 	wrlong	#0, fp
0be1c     14 4E 85 F1 | 	sub	fp, #20
0be20                 | LR__0971
0be20     20 4E 05 F1 | 	add	fp, #32
0be24     A7 22 02 FB | 	rdlong	local03, fp
0be28     09 22 66 F0 | 	shl	local03, #9
0be2c     2C 00 00 FF 
0be30     CC E4 05 F1 | 	add	objptr, ##22732
0be34     F2 22 02 F1 | 	add	local03, objptr
0be38     0C 4E 85 F1 | 	sub	fp, #12
0be3c     A7 20 02 FB | 	rdlong	local02, fp
0be40     10 1F 02 F6 | 	mov	local01, local02
0be44     01 1E 66 F0 | 	shl	local01, #1
0be48     11 1F 02 F1 | 	add	local01, local03
0be4c     10 4E 05 F1 | 	add	fp, #16
0be50     A7 12 02 FB | 	rdlong	arg01, fp
0be54     24 4E 85 F1 | 	sub	fp, #36
0be58     01 20 66 F0 | 	shl	local02, #1
0be5c     10 13 02 F1 | 	add	arg01, local02
0be60     2C 00 00 FF 
0be64     CC E4 85 F1 | 	sub	objptr, ##22732
0be68     78 D4 B0 FD | 	call	#_psdpeek
0be6c     0F FB 51 FC | 	wrword	result1, local01
0be70     14 4E 05 F1 | 	add	fp, #20
0be74     A7 24 02 FB | 	rdlong	local04, fp
0be78     01 24 06 F1 | 	add	local04, #1
0be7c     A7 24 62 FC | 	wrlong	local04, fp
0be80     14 4E 85 F1 | 	sub	fp, #20
0be84     00 25 56 F2 | 	cmps	local04, #256 wc
0be88     94 FF 9F CD |  if_b	jmp	#LR__0971
0be8c                 | '     return   
0be8c     44 08 90 FD | 	jmp	#LR__0981
0be90                 | LR__0972
0be90                 | ' 
0be90                 | ' if numpar=5 then    'simple adsr
0be90     10 4E 05 F1 | 	add	fp, #16
0be94     A7 22 02 FB | 	rdlong	local03, fp
0be98     10 4E 85 F1 | 	sub	fp, #16
0be9c     05 22 0E F2 | 	cmp	local03, #5 wz
0bea0     30 08 90 5D |  if_ne	jmp	#LR__0980
0bea4     38 E3 BF FD | 	call	#_pop
0bea8     FF 1E 02 F6 | 	mov	local01, result3
0beac     5C 4E 05 F1 | 	add	fp, #92
0beb0     A7 FA 61 FC | 	wrlong	result1, fp
0beb4     04 4E 05 F1 | 	add	fp, #4
0beb8     A7 FC 61 FC | 	wrlong	result2, fp
0bebc     04 4E 05 F1 | 	add	fp, #4
0bec0     A7 1E 62 FC | 	wrlong	local01, fp
0bec4     08 4E 85 F1 | 	sub	fp, #8
0bec8     A7 12 02 F6 | 	mov	arg01, fp
0becc     5C 4E 85 F1 | 	sub	fp, #92
0bed0     F4 6F B0 FD | 	call	#_converttofloat
0bed4     FD 22 02 F6 | 	mov	local03, result1
0bed8     34 4E 05 F1 | 	add	fp, #52
0bedc     A7 22 62 FC | 	wrlong	local03, fp
0bee0     34 4E 85 F1 | 	sub	fp, #52
0bee4     F8 E2 BF FD | 	call	#_pop
0bee8     FF 1E 02 F6 | 	mov	local01, result3
0beec     5C 4E 05 F1 | 	add	fp, #92
0bef0     A7 FA 61 FC | 	wrlong	result1, fp
0bef4     04 4E 05 F1 | 	add	fp, #4
0bef8     A7 FC 61 FC | 	wrlong	result2, fp
0befc     04 4E 05 F1 | 	add	fp, #4
0bf00     A7 1E 62 FC | 	wrlong	local01, fp
0bf04     08 4E 85 F1 | 	sub	fp, #8
0bf08     A7 12 02 F6 | 	mov	arg01, fp
0bf0c     5C 4E 85 F1 | 	sub	fp, #92
0bf10     B4 6F B0 FD | 	call	#_converttofloat
0bf14     FD 22 02 F6 | 	mov	local03, result1
0bf18     30 4E 05 F1 | 	add	fp, #48
0bf1c     A7 22 62 FC | 	wrlong	local03, fp
0bf20     30 4E 85 F1 | 	sub	fp, #48
0bf24     B8 E2 BF FD | 	call	#_pop
0bf28     FF 1E 02 F6 | 	mov	local01, result3
0bf2c     5C 4E 05 F1 | 	add	fp, #92
0bf30     A7 FA 61 FC | 	wrlong	result1, fp
0bf34     04 4E 05 F1 | 	add	fp, #4
0bf38     A7 FC 61 FC | 	wrlong	result2, fp
0bf3c     04 4E 05 F1 | 	add	fp, #4
0bf40     A7 1E 62 FC | 	wrlong	local01, fp
0bf44     08 4E 85 F1 | 	sub	fp, #8
0bf48     A7 12 02 F6 | 	mov	arg01, fp
0bf4c     5C 4E 85 F1 | 	sub	fp, #92
0bf50     74 6F B0 FD | 	call	#_converttofloat
0bf54     FD 22 02 F6 | 	mov	local03, result1
0bf58     2C 4E 05 F1 | 	add	fp, #44
0bf5c     A7 22 62 FC | 	wrlong	local03, fp
0bf60     2C 4E 85 F1 | 	sub	fp, #44
0bf64     78 E2 BF FD | 	call	#_pop
0bf68     FF 1E 02 F6 | 	mov	local01, result3
0bf6c     5C 4E 05 F1 | 	add	fp, #92
0bf70     A7 FA 61 FC | 	wrlong	result1, fp
0bf74     04 4E 05 F1 | 	add	fp, #4
0bf78     A7 FC 61 FC | 	wrlong	result2, fp
0bf7c     04 4E 05 F1 | 	add	fp, #4
0bf80     A7 1E 62 FC | 	wrlong	local01, fp
0bf84     08 4E 85 F1 | 	sub	fp, #8
0bf88     A7 12 02 F6 | 	mov	arg01, fp
0bf8c     5C 4E 85 F1 | 	sub	fp, #92
0bf90     34 6F B0 FD | 	call	#_converttofloat
0bf94     FD 22 02 F6 | 	mov	local03, result1
0bf98     28 4E 05 F1 | 	add	fp, #40
0bf9c     A7 22 62 FC | 	wrlong	local03, fp
0bfa0     28 4E 85 F1 | 	sub	fp, #40
0bfa4     38 E2 BF FD | 	call	#_pop
0bfa8     FF 1E 02 F6 | 	mov	local01, result3
0bfac     5C 4E 05 F1 | 	add	fp, #92
0bfb0     A7 FA 61 FC | 	wrlong	result1, fp
0bfb4     04 4E 05 F1 | 	add	fp, #4
0bfb8     A7 FC 61 FC | 	wrlong	result2, fp
0bfbc     04 4E 05 F1 | 	add	fp, #4
0bfc0     A7 1E 62 FC | 	wrlong	local01, fp
0bfc4     08 4E 85 F1 | 	sub	fp, #8
0bfc8     A7 12 02 F6 | 	mov	arg01, fp
0bfcc     5C 4E 85 F1 | 	sub	fp, #92
0bfd0     48 6E B0 FD | 	call	#_converttoint
0bfd4     20 4E 05 F1 | 	add	fp, #32
0bfd8     A7 FA 61 FC | 	wrlong	result1, fp
0bfdc                 | ' 
0bfdc                 | '   t1=pop() : rr=converttofloat(t1)
0bfdc                 | '   t1=pop() : ss=converttofloat(t1) 
0bfdc                 | '   t1=pop() : dd=converttofloat(t1)
0bfdc                 | '   t1=pop() : aa=converttofloat(t1)
0bfdc                 | '   t1=pop() : channel=converttoint(t1)
0bfdc                 | '   if ss<0.0 then ss=0.0 
0bfdc     10 4E 05 F1 | 	add	fp, #16
0bfe0     A7 12 02 FB | 	rdlong	arg01, fp
0bfe4     30 4E 85 F1 | 	sub	fp, #48
0bfe8     00 14 06 F6 | 	mov	arg02, #0
0bfec     01 16 06 F6 | 	mov	arg03, #1
0bff0     9C 37 B1 FD | 	call	#__system___float_cmp
0bff4     00 FA 55 F2 | 	cmps	result1, #0 wc
0bff8     30 4E 05 C1 |  if_b	add	fp, #48
0bffc     A7 00 68 CC |  if_b	wrlong	#0, fp
0c000     30 4E 85 C1 |  if_b	sub	fp, #48
0c004                 | '   if ss>1.0 then ss=1.0
0c004     30 4E 05 F1 | 	add	fp, #48
0c008     A7 12 02 FB | 	rdlong	arg01, fp
0c00c     30 4E 85 F1 | 	sub	fp, #48
0c010     00 C0 1F FF 
0c014     00 14 06 F6 | 	mov	arg02, ##1065353216
0c018     01 16 66 F6 | 	neg	arg03, #1
0c01c     70 37 B1 FD | 	call	#__system___float_cmp
0c020     01 FA 55 F2 | 	cmps	result1, #1 wc
0c024     30 4E 05 31 |  if_ae	add	fp, #48
0c028     00 C0 9F 3F 
0c02c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0c030     30 4E 85 31 |  if_ae	sub	fp, #48
0c034     28 4E 05 F1 | 	add	fp, #40
0c038     A7 12 02 FB | 	rdlong	arg01, fp
0c03c     04 4E 05 F1 | 	add	fp, #4
0c040     A7 14 02 FB | 	rdlong	arg02, fp
0c044     2C 4E 85 F1 | 	sub	fp, #44
0c048     40 2F B1 FD | 	call	#__system___float_add
0c04c     FD 12 02 F6 | 	mov	arg01, result1
0c050     34 4E 05 F1 | 	add	fp, #52
0c054     A7 14 02 FB | 	rdlong	arg02, fp
0c058     34 4E 85 F1 | 	sub	fp, #52
0c05c     2C 2F B1 FD | 	call	#__system___float_add
0c060     4C 4E 05 F1 | 	add	fp, #76
0c064     A7 FA 61 FC | 	wrlong	result1, fp
0c068     FD 14 02 F6 | 	mov	arg02, result1
0c06c     4C 4E 85 F1 | 	sub	fp, #76
0c070     00 C0 21 FF 
0c074     00 12 06 F6 | 	mov	arg01, ##1132462080
0c078     E4 34 B1 FD | 	call	#__system___float_div
0c07c     50 4E 05 F1 | 	add	fp, #80
0c080     A7 FA 61 FC | 	wrlong	result1, fp
0c084     28 4E 85 F1 | 	sub	fp, #40
0c088     A7 12 02 FB | 	rdlong	arg01, fp
0c08c     FD 14 02 F6 | 	mov	arg02, result1
0c090     28 4E 85 F1 | 	sub	fp, #40
0c094     C4 32 B1 FD | 	call	#__system___float_mul
0c098     FD 12 02 F6 | 	mov	arg01, result1
0c09c     01 14 06 F6 | 	mov	arg02, #1
0c0a0     80 37 B1 FD | 	call	#__system___float_tointeger
0c0a4     A7 FA 61 FC | 	wrlong	result1, fp
0c0a8     2C 4E 05 F1 | 	add	fp, #44
0c0ac     A7 12 02 FB | 	rdlong	arg01, fp
0c0b0     24 4E 05 F1 | 	add	fp, #36
0c0b4     A7 14 02 FB | 	rdlong	arg02, fp
0c0b8     50 4E 85 F1 | 	sub	fp, #80
0c0bc     9C 32 B1 FD | 	call	#__system___float_mul
0c0c0     FD 12 02 F6 | 	mov	arg01, result1
0c0c4     01 14 06 F6 | 	mov	arg02, #1
0c0c8     58 37 B1 FD | 	call	#__system___float_tointeger
0c0cc     04 4E 05 F1 | 	add	fp, #4
0c0d0     A7 FA 61 FC | 	wrlong	result1, fp
0c0d4     30 4E 05 F1 | 	add	fp, #48
0c0d8     A7 12 02 FB | 	rdlong	arg01, fp
0c0dc     1C 4E 05 F1 | 	add	fp, #28
0c0e0     A7 14 02 FB | 	rdlong	arg02, fp
0c0e4     50 4E 85 F1 | 	sub	fp, #80
0c0e8     70 32 B1 FD | 	call	#__system___float_mul
0c0ec     FD 12 02 F6 | 	mov	arg01, result1
0c0f0     01 14 06 F6 | 	mov	arg02, #1
0c0f4     2C 37 B1 FD | 	call	#__system___float_tointeger
0c0f8     FD 22 02 F6 | 	mov	local03, result1
0c0fc     0C 4E 05 F1 | 	add	fp, #12
0c100     A7 22 62 FC | 	wrlong	local03, fp
0c104     0C 4E 85 F1 | 	sub	fp, #12
0c108                 | '   fulltime=aa+dd+rr
0c108                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0c108     00 12 06 F6 | 	mov	arg01, #0
0c10c     60 60 B1 FD | 	call	#__system___getiolock_0474
0c110     FD 12 02 F6 | 	mov	arg01, result1
0c114     C8 06 B1 FD | 	call	#__system___lockmem
0c118     A7 14 02 FB | 	rdlong	arg02, fp
0c11c     00 12 06 F6 | 	mov	arg01, #0
0c120     00 16 06 F6 | 	mov	arg03, #0
0c124     0A 18 06 F6 | 	mov	arg04, #10
0c128     FC 13 B1 FD | 	call	#__system___basic_print_integer
0c12c     00 12 06 F6 | 	mov	arg01, #0
0c130     09 14 06 F6 | 	mov	arg02, #9
0c134     00 16 06 F6 | 	mov	arg03, #0
0c138     50 13 B1 FD | 	call	#__system___basic_print_char
0c13c     04 4E 05 F1 | 	add	fp, #4
0c140     A7 14 02 FB | 	rdlong	arg02, fp
0c144     04 4E 85 F1 | 	sub	fp, #4
0c148     00 12 06 F6 | 	mov	arg01, #0
0c14c     00 16 06 F6 | 	mov	arg03, #0
0c150     0A 18 06 F6 | 	mov	arg04, #10
0c154     D0 13 B1 FD | 	call	#__system___basic_print_integer
0c158     00 12 06 F6 | 	mov	arg01, #0
0c15c     09 14 06 F6 | 	mov	arg02, #9
0c160     00 16 06 F6 | 	mov	arg03, #0
0c164     24 13 B1 FD | 	call	#__system___basic_print_char
0c168     0C 4E 05 F1 | 	add	fp, #12
0c16c     A7 14 02 FB | 	rdlong	arg02, fp
0c170     0C 4E 85 F1 | 	sub	fp, #12
0c174     00 12 06 F6 | 	mov	arg01, #0
0c178     00 16 06 F6 | 	mov	arg03, #0
0c17c     0A 18 06 F6 | 	mov	arg04, #10
0c180     A4 13 B1 FD | 	call	#__system___basic_print_integer
0c184     00 12 06 F6 | 	mov	arg01, #0
0c188     09 14 06 F6 | 	mov	arg02, #9
0c18c     00 16 06 F6 | 	mov	arg03, #0
0c190     F8 12 B1 FD | 	call	#__system___basic_print_char
0c194     A7 14 02 FB | 	rdlong	arg02, fp
0c198     04 4E 05 F1 | 	add	fp, #4
0c19c     A7 22 02 FB | 	rdlong	local03, fp
0c1a0     11 15 02 F1 | 	add	arg02, local03
0c1a4     08 4E 05 F1 | 	add	fp, #8
0c1a8     A7 22 02 FB | 	rdlong	local03, fp
0c1ac     0C 4E 85 F1 | 	sub	fp, #12
0c1b0     11 15 02 F1 | 	add	arg02, local03
0c1b4     00 12 06 F6 | 	mov	arg01, #0
0c1b8     00 16 06 F6 | 	mov	arg03, #0
0c1bc     0A 18 06 F6 | 	mov	arg04, #10
0c1c0     64 13 B1 FD | 	call	#__system___basic_print_integer
0c1c4     00 12 06 F6 | 	mov	arg01, #0
0c1c8     0A 14 06 F6 | 	mov	arg02, #10
0c1cc     00 16 06 F6 | 	mov	arg03, #0
0c1d0     B8 12 B1 FD | 	call	#__system___basic_print_char
0c1d4     00 12 06 F6 | 	mov	arg01, #0
0c1d8     94 5F B1 FD | 	call	#__system___getiolock_0474
0c1dc     FD 00 68 FC | 	wrlong	#0, result1
0c1e0     F8 BF 23 FF 
0c1e4     00 22 06 F6 | 	mov	local03, ##1199566848
0c1e8     A7 12 02 FB | 	rdlong	arg01, fp
0c1ec     09 13 52 F6 | 	abs	arg01, arg01 wc
0c1f0     1F 26 C6 C9 |  if_b	decod	local05, #31
0c1f4     00 26 06 36 |  if_ae	mov	local05, #0
0c1f8     5C 2D B1 FD | 	call	#__system___float_fromuns
0c1fc     13 FB 61 F5 | 	xor	result1, local05
0c200     FD 14 02 F6 | 	mov	arg02, result1
0c204     11 13 02 F6 | 	mov	arg01, local03
0c208     54 33 B1 FD | 	call	#__system___float_div
0c20c     54 4E 05 F1 | 	add	fp, #84
0c210     A7 FA 61 FC | 	wrlong	result1, fp
0c214     F8 BF 23 FF 
0c218     00 22 06 F6 | 	mov	local03, ##1199566848
0c21c     24 4E 85 F1 | 	sub	fp, #36
0c220     A7 14 02 FB | 	rdlong	arg02, fp
0c224     30 4E 85 F1 | 	sub	fp, #48
0c228     F8 BF 23 FF 
0c22c     00 12 06 F6 | 	mov	arg01, ##1199566848
0c230     28 31 B1 FD | 	call	#__system___float_mul
0c234     FD 14 02 F6 | 	mov	arg02, result1
0c238     11 13 02 F6 | 	mov	arg01, local03
0c23c     1F 14 E6 F4 | 	bitnot	arg02, #31
0c240     48 2D B1 FD | 	call	#__system___float_add
0c244     FD 22 02 F6 | 	mov	local03, result1
0c248     04 4E 05 F1 | 	add	fp, #4
0c24c     A7 12 02 FB | 	rdlong	arg01, fp
0c250     04 4E 85 F1 | 	sub	fp, #4
0c254     09 13 52 F6 | 	abs	arg01, arg01 wc
0c258     1F 26 C6 C9 |  if_b	decod	local05, #31
0c25c     00 26 06 36 |  if_ae	mov	local05, #0
0c260     F4 2C B1 FD | 	call	#__system___float_fromuns
0c264     13 FB 61 F5 | 	xor	result1, local05
0c268     FD 14 02 F6 | 	mov	arg02, result1
0c26c     11 13 02 F6 | 	mov	arg01, local03
0c270     EC 32 B1 FD | 	call	#__system___float_div
0c274     2C 4E 05 F1 | 	add	fp, #44
0c278     A7 FA 61 FC | 	wrlong	result1, fp
0c27c     04 4E 05 F1 | 	add	fp, #4
0c280     A7 14 02 FB | 	rdlong	arg02, fp
0c284     30 4E 85 F1 | 	sub	fp, #48
0c288     F8 BF 23 FF 
0c28c     00 12 06 F6 | 	mov	arg01, ##1199566848
0c290     C8 30 B1 FD | 	call	#__system___float_mul
0c294     FD 22 02 F6 | 	mov	local03, result1
0c298     0C 4E 05 F1 | 	add	fp, #12
0c29c     A7 12 02 FB | 	rdlong	arg01, fp
0c2a0     0C 4E 85 F1 | 	sub	fp, #12
0c2a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c2a8     1F 26 C6 C9 |  if_b	decod	local05, #31
0c2ac     00 26 06 36 |  if_ae	mov	local05, #0
0c2b0     A4 2C B1 FD | 	call	#__system___float_fromuns
0c2b4     13 FB 61 F5 | 	xor	result1, local05
0c2b8     FD 14 02 F6 | 	mov	arg02, result1
0c2bc     11 13 02 F6 | 	mov	arg01, local03
0c2c0     9C 32 B1 FD | 	call	#__system___float_div
0c2c4     FD 22 02 F6 | 	mov	local03, result1
0c2c8     58 4E 05 F1 | 	add	fp, #88
0c2cc     A7 22 62 FC | 	wrlong	local03, fp
0c2d0     58 4E 85 F1 | 	sub	fp, #88
0c2d4                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0c2d4     00 12 06 F6 | 	mov	arg01, #0
0c2d8     94 5E B1 FD | 	call	#__system___getiolock_0474
0c2dc     FD 12 02 F6 | 	mov	arg01, result1
0c2e0     FC 04 B1 FD | 	call	#__system___lockmem
0c2e4     54 4E 05 F1 | 	add	fp, #84
0c2e8     A7 14 02 FB | 	rdlong	arg02, fp
0c2ec     54 4E 85 F1 | 	sub	fp, #84
0c2f0     00 12 06 F6 | 	mov	arg01, #0
0c2f4     00 16 06 F6 | 	mov	arg03, #0
0c2f8     23 18 06 F6 | 	mov	arg04, #35
0c2fc     74 36 B1 FD | 	call	#__system___basic_print_float
0c300     00 12 06 F6 | 	mov	arg01, #0
0c304     09 14 06 F6 | 	mov	arg02, #9
0c308     00 16 06 F6 | 	mov	arg03, #0
0c30c     7C 11 B1 FD | 	call	#__system___basic_print_char
0c310     2C 4E 05 F1 | 	add	fp, #44
0c314     A7 14 02 FB | 	rdlong	arg02, fp
0c318     2C 4E 85 F1 | 	sub	fp, #44
0c31c     00 12 06 F6 | 	mov	arg01, #0
0c320     00 16 06 F6 | 	mov	arg03, #0
0c324     23 18 06 F6 | 	mov	arg04, #35
0c328     48 36 B1 FD | 	call	#__system___basic_print_float
0c32c     00 12 06 F6 | 	mov	arg01, #0
0c330     09 14 06 F6 | 	mov	arg02, #9
0c334     00 16 06 F6 | 	mov	arg03, #0
0c338     50 11 B1 FD | 	call	#__system___basic_print_char
0c33c     58 4E 05 F1 | 	add	fp, #88
0c340     A7 14 02 FB | 	rdlong	arg02, fp
0c344     58 4E 85 F1 | 	sub	fp, #88
0c348     00 12 06 F6 | 	mov	arg01, #0
0c34c     00 16 06 F6 | 	mov	arg03, #0
0c350     23 18 06 F6 | 	mov	arg04, #35
0c354     1C 36 B1 FD | 	call	#__system___basic_print_float
0c358     00 12 06 F6 | 	mov	arg01, #0
0c35c     0A 14 06 F6 | 	mov	arg02, #10
0c360     00 16 06 F6 | 	mov	arg03, #0
0c364     24 11 B1 FD | 	call	#__system___basic_print_char
0c368     00 12 06 F6 | 	mov	arg01, #0
0c36c     00 5E B1 FD | 	call	#__system___getiolock_0474
0c370     FD 00 68 FC | 	wrlong	#0, result1
0c374     20 4E 05 F1 | 	add	fp, #32
0c378     A7 28 02 FB | 	rdlong	local06, fp
0c37c     20 4E 85 F1 | 	sub	fp, #32
0c380     01 28 66 F0 | 	shl	local06, #1
0c384     7B 00 00 FF 
0c388     78 E4 05 F1 | 	add	objptr, ##63096
0c38c     F2 28 02 F1 | 	add	local06, objptr
0c390     A7 2A 02 FB | 	rdlong	local07, fp
0c394     04 4E 05 F1 | 	add	fp, #4
0c398     A7 22 02 FB | 	rdlong	local03, fp
0c39c     11 2B 02 F1 | 	add	local07, local03
0c3a0     14 2B 52 FC | 	wrword	local07, local06
0c3a4     24 4E 05 F1 | 	add	fp, #36
0c3a8     A7 00 68 FC | 	wrlong	#0, fp
0c3ac                 | '   suspoints(channel)=a+d
0c3ac                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0c3ac     14 4E 85 F1 | 	sub	fp, #20
0c3b0     A7 00 68 FC | 	wrlong	#0, fp
0c3b4     14 4E 85 F1 | 	sub	fp, #20
0c3b8     A7 2C 02 FB | 	rdlong	local08, fp
0c3bc     7B 00 00 FF 
0c3c0     78 E4 85 F1 | 	sub	objptr, ##63096
0c3c4                 | LR__0973
0c3c4     14 4E 05 F1 | 	add	fp, #20
0c3c8     A7 22 02 FB | 	rdlong	local03, fp
0c3cc     14 4E 85 F1 | 	sub	fp, #20
0c3d0     16 23 52 F2 | 	cmps	local03, local08 wc
0c3d4     80 00 90 3D |  if_ae	jmp	#LR__0974
0c3d8     20 4E 05 F1 | 	add	fp, #32
0c3dc     A7 28 02 FB | 	rdlong	local06, fp
0c3e0     09 28 66 F0 | 	shl	local06, #9
0c3e4     2C 00 00 FF 
0c3e8     CC E4 05 F1 | 	add	objptr, ##22732
0c3ec     F2 28 02 F1 | 	add	local06, objptr
0c3f0     0C 4E 85 F1 | 	sub	fp, #12
0c3f4     A7 22 02 FB | 	rdlong	local03, fp
0c3f8     01 22 66 F0 | 	shl	local03, #1
0c3fc     14 23 02 F1 | 	add	local03, local06
0c400     14 4E 05 F1 | 	add	fp, #20
0c404     A7 12 02 FB | 	rdlong	arg01, fp
0c408     28 4E 85 F1 | 	sub	fp, #40
0c40c     2C 00 00 FF 
0c410     CC E4 85 F1 | 	sub	objptr, ##22732
0c414     01 14 06 F6 | 	mov	arg02, #1
0c418     08 34 B1 FD | 	call	#__system___float_tointeger
0c41c     11 FB 51 FC | 	wrword	result1, local03
0c420     28 4E 05 F1 | 	add	fp, #40
0c424     A7 12 02 FB | 	rdlong	arg01, fp
0c428     2C 4E 05 F1 | 	add	fp, #44
0c42c     A7 14 02 FB | 	rdlong	arg02, fp
0c430     54 4E 85 F1 | 	sub	fp, #84
0c434     54 2B B1 FD | 	call	#__system___float_add
0c438     28 4E 05 F1 | 	add	fp, #40
0c43c     A7 FA 61 FC | 	wrlong	result1, fp
0c440     14 4E 85 F1 | 	sub	fp, #20
0c444     A7 20 02 FB | 	rdlong	local02, fp
0c448     01 20 06 F1 | 	add	local02, #1
0c44c     A7 20 62 FC | 	wrlong	local02, fp
0c450     14 4E 85 F1 | 	sub	fp, #20
0c454     6C FF 9F FD | 	jmp	#LR__0973
0c458                 | LR__0974
0c458                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0c458     A7 22 02 FB | 	rdlong	local03, fp
0c45c     14 4E 05 F1 | 	add	fp, #20
0c460     A7 22 62 FC | 	wrlong	local03, fp
0c464     14 4E 85 F1 | 	sub	fp, #20
0c468     A7 2E 02 FB | 	rdlong	local09, fp
0c46c     04 4E 05 F1 | 	add	fp, #4
0c470     A7 22 02 FB | 	rdlong	local03, fp
0c474     04 4E 85 F1 | 	sub	fp, #4
0c478     11 2F 02 F1 | 	add	local09, local03
0c47c                 | LR__0975
0c47c     14 4E 05 F1 | 	add	fp, #20
0c480     A7 22 02 FB | 	rdlong	local03, fp
0c484     14 4E 85 F1 | 	sub	fp, #20
0c488     17 23 52 F2 | 	cmps	local03, local09 wc
0c48c     A8 00 90 3D |  if_ae	jmp	#LR__0976
0c490     20 4E 05 F1 | 	add	fp, #32
0c494     A7 2C 02 FB | 	rdlong	local08, fp
0c498     09 2C 66 F0 | 	shl	local08, #9
0c49c     2C 00 00 FF 
0c4a0     CC E4 05 F1 | 	add	objptr, ##22732
0c4a4     F2 2C 02 F1 | 	add	local08, objptr
0c4a8     0C 4E 85 F1 | 	sub	fp, #12
0c4ac     A7 2A 02 FB | 	rdlong	local07, fp
0c4b0     01 2A 66 F0 | 	shl	local07, #1
0c4b4     16 2B 02 F1 | 	add	local07, local08
0c4b8     14 4E 05 F1 | 	add	fp, #20
0c4bc     A7 12 02 FB | 	rdlong	arg01, fp
0c4c0     28 4E 85 F1 | 	sub	fp, #40
0c4c4     2C 00 00 FF 
0c4c8     CC E4 85 F1 | 	sub	objptr, ##22732
0c4cc     01 14 06 F6 | 	mov	arg02, #1
0c4d0     50 33 B1 FD | 	call	#__system___float_tointeger
0c4d4     15 FB 51 FC | 	wrword	result1, local07
0c4d8     28 4E 05 F1 | 	add	fp, #40
0c4dc     A7 12 02 FB | 	rdlong	arg01, fp
0c4e0     04 4E 05 F1 | 	add	fp, #4
0c4e4     A7 14 02 FB | 	rdlong	arg02, fp
0c4e8     2C 4E 85 F1 | 	sub	fp, #44
0c4ec     1F 14 E6 F4 | 	bitnot	arg02, #31
0c4f0     98 2A B1 FD | 	call	#__system___float_add
0c4f4     28 4E 05 F1 | 	add	fp, #40
0c4f8     A7 FA 61 FC | 	wrlong	result1, fp
0c4fc     28 4E 85 F1 | 	sub	fp, #40
0c500     FD 12 02 F6 | 	mov	arg01, result1
0c504     00 14 06 F6 | 	mov	arg02, #0
0c508     01 16 06 F6 | 	mov	arg03, #1
0c50c     80 32 B1 FD | 	call	#__system___float_cmp
0c510     00 FA 55 F2 | 	cmps	result1, #0 wc
0c514     28 4E 05 C1 |  if_b	add	fp, #40
0c518     A7 00 68 CC |  if_b	wrlong	#0, fp
0c51c     28 4E 85 C1 |  if_b	sub	fp, #40
0c520     14 4E 05 F1 | 	add	fp, #20
0c524     A7 20 02 FB | 	rdlong	local02, fp
0c528     01 20 06 F1 | 	add	local02, #1
0c52c     A7 20 62 FC | 	wrlong	local02, fp
0c530     14 4E 85 F1 | 	sub	fp, #20
0c534     44 FF 9F FD | 	jmp	#LR__0975
0c538                 | LR__0976
0c538                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0c538     A7 22 02 FB | 	rdlong	local03, fp
0c53c     04 4E 05 F1 | 	add	fp, #4
0c540     A7 2E 02 FB | 	rdlong	local09, fp
0c544     17 23 02 F1 | 	add	local03, local09
0c548     10 4E 05 F1 | 	add	fp, #16
0c54c     A7 22 62 FC | 	wrlong	local03, fp
0c550     14 4E 85 F1 | 	sub	fp, #20
0c554                 | LR__0977
0c554     14 4E 05 F1 | 	add	fp, #20
0c558     A7 28 02 FB | 	rdlong	local06, fp
0c55c     14 4E 85 F1 | 	sub	fp, #20
0c560     00 29 56 F2 | 	cmps	local06, #256 wc
0c564     A8 00 90 3D |  if_ae	jmp	#LR__0978
0c568     20 4E 05 F1 | 	add	fp, #32
0c56c     A7 2E 02 FB | 	rdlong	local09, fp
0c570     09 2E 66 F0 | 	shl	local09, #9
0c574     2C 00 00 FF 
0c578     CC E4 05 F1 | 	add	objptr, ##22732
0c57c     F2 2E 02 F1 | 	add	local09, objptr
0c580     0C 4E 85 F1 | 	sub	fp, #12
0c584     A7 2C 02 FB | 	rdlong	local08, fp
0c588     01 2C 66 F0 | 	shl	local08, #1
0c58c     17 2D 02 F1 | 	add	local08, local09
0c590     14 4E 05 F1 | 	add	fp, #20
0c594     A7 12 02 FB | 	rdlong	arg01, fp
0c598     28 4E 85 F1 | 	sub	fp, #40
0c59c     2C 00 00 FF 
0c5a0     CC E4 85 F1 | 	sub	objptr, ##22732
0c5a4     01 14 06 F6 | 	mov	arg02, #1
0c5a8     78 32 B1 FD | 	call	#__system___float_tointeger
0c5ac     16 FB 51 FC | 	wrword	result1, local08
0c5b0     28 4E 05 F1 | 	add	fp, #40
0c5b4     A7 12 02 FB | 	rdlong	arg01, fp
0c5b8     30 4E 05 F1 | 	add	fp, #48
0c5bc     A7 14 02 FB | 	rdlong	arg02, fp
0c5c0     58 4E 85 F1 | 	sub	fp, #88
0c5c4     1F 14 E6 F4 | 	bitnot	arg02, #31
0c5c8     C0 29 B1 FD | 	call	#__system___float_add
0c5cc     28 4E 05 F1 | 	add	fp, #40
0c5d0     A7 FA 61 FC | 	wrlong	result1, fp
0c5d4     28 4E 85 F1 | 	sub	fp, #40
0c5d8     FD 12 02 F6 | 	mov	arg01, result1
0c5dc     00 14 06 F6 | 	mov	arg02, #0
0c5e0     01 16 06 F6 | 	mov	arg03, #1
0c5e4     A8 31 B1 FD | 	call	#__system___float_cmp
0c5e8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c5ec     28 4E 05 C1 |  if_b	add	fp, #40
0c5f0     A7 00 68 CC |  if_b	wrlong	#0, fp
0c5f4     28 4E 85 C1 |  if_b	sub	fp, #40
0c5f8     14 4E 05 F1 | 	add	fp, #20
0c5fc     A7 2E 02 FB | 	rdlong	local09, fp
0c600     01 2E 06 F1 | 	add	local09, #1
0c604     A7 2E 62 FC | 	wrlong	local09, fp
0c608     14 4E 85 F1 | 	sub	fp, #20
0c60c     44 FF 9F FD | 	jmp	#LR__0977
0c610                 | LR__0978
0c610     20 4E 05 F1 | 	add	fp, #32
0c614     A7 28 02 FB | 	rdlong	local06, fp
0c618     09 28 66 F0 | 	shl	local06, #9
0c61c     2C 00 00 FF 
0c620     CC E4 05 F1 | 	add	objptr, ##22732
0c624     F2 28 02 F1 | 	add	local06, objptr
0c628     FE 29 06 F1 | 	add	local06, #510
0c62c     14 01 58 FC | 	wrword	#0, local06
0c630                 | '   envbuf(channel,255)=0
0c630                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0c630     0C 4E 85 F1 | 	sub	fp, #12
0c634     A7 00 68 FC | 	wrlong	#0, fp
0c638     14 4E 85 F1 | 	sub	fp, #20
0c63c     2C 00 00 FF 
0c640     CC E4 85 F1 | 	sub	objptr, ##22732
0c644                 | LR__0979
0c644     00 12 06 F6 | 	mov	arg01, #0
0c648     24 5B B1 FD | 	call	#__system___getiolock_0474
0c64c     FD 12 02 F6 | 	mov	arg01, result1
0c650     8C 01 B1 FD | 	call	#__system___lockmem
0c654     20 4E 05 F1 | 	add	fp, #32
0c658     A7 2E 02 FB | 	rdlong	local09, fp
0c65c     09 2E 66 F0 | 	shl	local09, #9
0c660     2C 00 00 FF 
0c664     CC E4 05 F1 | 	add	objptr, ##22732
0c668     F2 2E 02 F1 | 	add	local09, objptr
0c66c     0C 4E 85 F1 | 	sub	fp, #12
0c670     A7 2C 02 FB | 	rdlong	local08, fp
0c674     14 4E 85 F1 | 	sub	fp, #20
0c678     01 2C 66 F0 | 	shl	local08, #1
0c67c     17 2D 02 F1 | 	add	local08, local09
0c680     16 15 E2 FA | 	rdword	arg02, local08
0c684     00 12 06 F6 | 	mov	arg01, #0
0c688     00 16 06 F6 | 	mov	arg03, #0
0c68c     0A 18 06 F6 | 	mov	arg04, #10
0c690     2C 00 00 FF 
0c694     CC E4 85 F1 | 	sub	objptr, ##22732
0c698     CC 0E B1 FD | 	call	#__system___basic_print_unsigned
0c69c     00 12 06 F6 | 	mov	arg01, #0
0c6a0     09 14 06 F6 | 	mov	arg02, #9
0c6a4     00 16 06 F6 | 	mov	arg03, #0
0c6a8     E0 0D B1 FD | 	call	#__system___basic_print_char
0c6ac     00 12 06 F6 | 	mov	arg01, #0
0c6b0     BC 5A B1 FD | 	call	#__system___getiolock_0474
0c6b4     FD 00 68 FC | 	wrlong	#0, result1
0c6b8     14 4E 05 F1 | 	add	fp, #20
0c6bc     A7 2E 02 FB | 	rdlong	local09, fp
0c6c0     01 2E 06 F1 | 	add	local09, #1
0c6c4     A7 2E 62 FC | 	wrlong	local09, fp
0c6c8     14 4E 85 F1 | 	sub	fp, #20
0c6cc     00 2F 56 F2 | 	cmps	local09, #256 wc
0c6d0     70 FF 9F CD |  if_b	jmp	#LR__0979
0c6d4                 | LR__0980
0c6d4                 | LR__0981
0c6d4     A7 F0 03 F6 | 	mov	ptra, fp
0c6d8     B2 00 A0 FD | 	call	#popregs_
0c6dc                 | _do_defenv_ret
0c6dc     2D 00 64 FD | 	ret
0c6e0                 | 
0c6e0                 | ' 
0c6e0                 | ' 
0c6e0                 | ' sub do_play
0c6e0                 | _do_play
0c6e0     05 4A 05 F6 | 	mov	COUNT_, #5
0c6e4     A8 00 A0 FD | 	call	#pushregs_
0c6e8     74 F0 07 F1 | 	add	ptra, #116
0c6ec     60 4E 05 F1 | 	add	fp, #96
0c6f0     F5 25 A2 FF 
0c6f4     A7 AA 68 FC | 	wrlong	##1145825877, fp
0c6f8                 | ' speed_coeff=815.6614449376854599406528189911
0c6f8                 | ' 
0c6f8                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0c6f8     5C 4E 85 F1 | 	sub	fp, #92
0c6fc     A7 00 68 FC | 	wrlong	#0, fp
0c700     97 18 48 FB | 	callpa	#(@LR__0991-@LR__0990)>>2,fcache_load_ptr_
0c704                 | LR__0990
0c704     A7 16 02 FB | 	rdlong	arg03, fp
0c708     02 16 66 F0 | 	shl	arg03, #2
0c70c     2C 4E 05 F1 | 	add	fp, #44
0c710     A7 16 02 F1 | 	add	arg03, fp
0c714     00 00 E0 FF 
0c718     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0c71c     2C 4E 85 F1 | 	sub	fp, #44
0c720     A7 1E 02 FB | 	rdlong	local01, fp
0c724     01 1E 06 F1 | 	add	local01, #1
0c728     A7 1E 62 FC | 	wrlong	local01, fp
0c72c     09 1E 56 F2 | 	cmps	local01, #9 wc
0c730     D0 FF 9F CD |  if_b	jmp	#LR__0990
0c734                 | LR__0991
0c734     04 4E 85 F1 | 	sub	fp, #4
0c738     6A 00 00 FF 
0c73c     64 E4 05 F1 | 	add	objptr, ##54372
0c740     F2 20 02 FB | 	rdlong	local02, objptr
0c744     10 23 02 F6 | 	mov	local03, local02
0c748     01 22 66 F0 | 	shl	local03, #1
0c74c     10 23 02 F1 | 	add	local03, local02
0c750     02 22 66 F0 | 	shl	local03, #2
0c754     03 00 00 FF 
0c758     04 E4 85 F1 | 	sub	objptr, ##1540
0c75c     F2 22 02 F1 | 	add	local03, objptr
0c760     11 25 02 FB | 	rdlong	local04, local03
0c764     A7 24 62 FC | 	wrlong	local04, fp
0c768                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0c768                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0c768                 | ' numpar=compiledline(lineptr_e).result.uresult
0c768                 | ' for i=numpar to 1 step -1 
0c768     04 4E 05 F1 | 	add	fp, #4
0c76c     A7 24 62 FC | 	wrlong	local04, fp
0c770     04 4E 85 F1 | 	sub	fp, #4
0c774     67 00 00 FF 
0c778     60 E4 85 F1 | 	sub	objptr, ##52832
0c77c                 | LR__0992
0c77c     60 DA BF FD | 	call	#_pop
0c780     54 4E 05 F1 | 	add	fp, #84
0c784     A7 FA 61 FC | 	wrlong	result1, fp
0c788     04 4E 05 F1 | 	add	fp, #4
0c78c     A7 FC 61 FC | 	wrlong	result2, fp
0c790     04 4E 05 F1 | 	add	fp, #4
0c794     A7 FE 61 FC | 	wrlong	result3, fp
0c798     58 4E 85 F1 | 	sub	fp, #88
0c79c     A7 22 02 FB | 	rdlong	local03, fp
0c7a0     01 22 86 F1 | 	sub	local03, #1
0c7a4     02 22 66 F0 | 	shl	local03, #2
0c7a8     2C 4E 05 F1 | 	add	fp, #44
0c7ac     A7 22 02 F1 | 	add	local03, fp
0c7b0     24 4E 05 F1 | 	add	fp, #36
0c7b4     A7 26 02 F6 | 	mov	local05, fp
0c7b8     13 13 02 F6 | 	mov	arg01, local05
0c7bc     54 4E 85 F1 | 	sub	fp, #84
0c7c0     04 67 B0 FD | 	call	#_converttofloat
0c7c4     11 FB 61 FC | 	wrlong	result1, local03
0c7c8     04 4E 05 F1 | 	add	fp, #4
0c7cc     A7 1E 02 FB | 	rdlong	local01, fp
0c7d0     01 1E 86 F1 | 	sub	local01, #1
0c7d4     A7 1E 62 FC | 	wrlong	local01, fp
0c7d8     04 4E 85 F1 | 	sub	fp, #4
0c7dc     01 1E 56 F2 | 	cmps	local01, #1 wc
0c7e0     98 FF 9F 3D |  if_ae	jmp	#LR__0992
0c7e4                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0c7e4     30 4E 05 F1 | 	add	fp, #48
0c7e8     A7 12 02 FB | 	rdlong	arg01, fp
0c7ec     30 4E 85 F1 | 	sub	fp, #48
0c7f0     00 14 06 F6 | 	mov	arg02, #0
0c7f4     01 16 06 F6 | 	mov	arg03, #1
0c7f8     94 2F B1 FD | 	call	#__system___float_cmp
0c7fc     00 FA 55 F2 | 	cmps	result1, #0 wc
0c800     0C 4E 05 C1 |  if_b	add	fp, #12
0c804     A7 00 68 CC |  if_b	wrlong	#0, fp
0c808     0C 4E 85 C1 |  if_b	sub	fp, #12
0c80c     20 00 90 CD |  if_b	jmp	#LR__0993
0c810     30 4E 05 F1 | 	add	fp, #48
0c814     A7 12 02 FB | 	rdlong	arg01, fp
0c818     30 4E 85 F1 | 	sub	fp, #48
0c81c     01 14 06 F6 | 	mov	arg02, #1
0c820     00 30 B1 FD | 	call	#__system___float_tointeger
0c824     0C 4E 05 F1 | 	add	fp, #12
0c828     A7 FA 61 FC | 	wrlong	result1, fp
0c82c     0C 4E 85 F1 | 	sub	fp, #12
0c830                 | LR__0993
0c830                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0c830     34 4E 05 F1 | 	add	fp, #52
0c834     A7 12 02 FB | 	rdlong	arg01, fp
0c838     34 4E 85 F1 | 	sub	fp, #52
0c83c     00 14 06 F6 | 	mov	arg02, #0
0c840     01 16 06 F6 | 	mov	arg03, #1
0c844     48 2F B1 FD | 	call	#__system___float_cmp
0c848     00 FA 55 F2 | 	cmps	result1, #0 wc
0c84c     40 00 90 3D |  if_ae	jmp	#LR__0994
0c850     0C 4E 05 F1 | 	add	fp, #12
0c854     A7 20 02 FB | 	rdlong	local02, fp
0c858     10 23 02 F6 | 	mov	local03, local02
0c85c     01 22 66 F0 | 	shl	local03, #1
0c860     10 23 02 F1 | 	add	local03, local02
0c864     03 22 66 F0 | 	shl	local03, #3
0c868     34 00 00 FF 
0c86c     2C E5 05 F1 | 	add	objptr, ##26924
0c870     F2 22 02 F1 | 	add	local03, objptr
0c874     11 23 02 FB | 	rdlong	local03, local03
0c878     58 4E 05 F1 | 	add	fp, #88
0c87c     A7 22 62 FC | 	wrlong	local03, fp
0c880     64 4E 85 F1 | 	sub	fp, #100
0c884     34 00 00 FF 
0c888     2C E5 85 F1 | 	sub	objptr, ##26924
0c88c     44 00 90 FD | 	jmp	#LR__0995
0c890                 | LR__0994
0c890     34 4E 05 F1 | 	add	fp, #52
0c894     A7 24 02 FB | 	rdlong	local04, fp
0c898     30 4E 05 F1 | 	add	fp, #48
0c89c     A7 24 62 FC | 	wrlong	local04, fp
0c8a0     58 4E 85 F1 | 	sub	fp, #88
0c8a4     A7 20 02 FB | 	rdlong	local02, fp
0c8a8     10 23 02 F6 | 	mov	local03, local02
0c8ac     01 22 66 F0 | 	shl	local03, #1
0c8b0     10 23 02 F1 | 	add	local03, local02
0c8b4     03 22 66 F0 | 	shl	local03, #3
0c8b8     34 00 00 FF 
0c8bc     2C E5 05 F1 | 	add	objptr, ##26924
0c8c0     F2 22 02 F1 | 	add	local03, objptr
0c8c4     0C 4E 85 F1 | 	sub	fp, #12
0c8c8     11 25 62 FC | 	wrlong	local04, local03
0c8cc     34 00 00 FF 
0c8d0     2C E5 85 F1 | 	sub	objptr, ##26924
0c8d4                 | LR__0995
0c8d4                 | ' if params(2)<0 orelse params(2)>16.384 then vol=channels(channel).vol else vol=params(2) : channels(channel).vol=vol
0c8d4     38 4E 05 F1 | 	add	fp, #56
0c8d8     A7 12 02 FB | 	rdlong	arg01, fp
0c8dc     38 4E 85 F1 | 	sub	fp, #56
0c8e0     00 14 06 F6 | 	mov	arg02, #0
0c8e4     01 16 06 F6 | 	mov	arg03, #1
0c8e8     A4 2E B1 FD | 	call	#__system___float_cmp
0c8ec     00 FA 55 F2 | 	cmps	result1, #0 wc
0c8f0     24 00 90 CD |  if_b	jmp	#LR__0996
0c8f4     38 4E 05 F1 | 	add	fp, #56
0c8f8     A7 12 02 FB | 	rdlong	arg01, fp
0c8fc     38 4E 85 F1 | 	sub	fp, #56
0c900     89 C1 20 FF 
0c904     6F 14 06 F6 | 	mov	arg02, ##1099108975
0c908     01 16 66 F6 | 	neg	arg03, #1
0c90c     80 2E B1 FD | 	call	#__system___float_cmp
0c910     01 FA 55 F2 | 	cmps	result1, #1 wc
0c914     44 00 90 CD |  if_b	jmp	#LR__0997
0c918                 | LR__0996
0c918     0C 4E 05 F1 | 	add	fp, #12
0c91c     A7 20 02 FB | 	rdlong	local02, fp
0c920     10 23 02 F6 | 	mov	local03, local02
0c924     01 22 66 F0 | 	shl	local03, #1
0c928     10 23 02 F1 | 	add	local03, local02
0c92c     03 22 66 F0 | 	shl	local03, #3
0c930     34 00 00 FF 
0c934     2C E5 05 F1 | 	add	objptr, ##26924
0c938     F2 22 02 F1 | 	add	local03, objptr
0c93c     0C 22 06 F1 | 	add	local03, #12
0c940     11 23 02 FB | 	rdlong	local03, local03
0c944     60 4E 05 F1 | 	add	fp, #96
0c948     A7 22 62 FC | 	wrlong	local03, fp
0c94c     6C 4E 85 F1 | 	sub	fp, #108
0c950     34 00 00 FF 
0c954     2C E5 85 F1 | 	sub	objptr, ##26924
0c958     48 00 90 FD | 	jmp	#LR__0998
0c95c                 | LR__0997
0c95c     38 4E 05 F1 | 	add	fp, #56
0c960     A7 24 02 FB | 	rdlong	local04, fp
0c964     34 4E 05 F1 | 	add	fp, #52
0c968     A7 24 62 FC | 	wrlong	local04, fp
0c96c     60 4E 85 F1 | 	sub	fp, #96
0c970     A7 20 02 FB | 	rdlong	local02, fp
0c974     10 23 02 F6 | 	mov	local03, local02
0c978     01 22 66 F0 | 	shl	local03, #1
0c97c     10 23 02 F1 | 	add	local03, local02
0c980     03 22 66 F0 | 	shl	local03, #3
0c984     34 00 00 FF 
0c988     2C E5 05 F1 | 	add	objptr, ##26924
0c98c     F2 22 02 F1 | 	add	local03, objptr
0c990     0C 4E 85 F1 | 	sub	fp, #12
0c994     0C 22 06 F1 | 	add	local03, #12
0c998     11 25 62 FC | 	wrlong	local04, local03
0c99c     34 00 00 FF 
0c9a0     2C E5 85 F1 | 	sub	objptr, ##26924
0c9a4                 | LR__0998
0c9a4                 | ' if params(3)<0 orelse params(3)>8.0 then wave=channels(channel).wave else wave=round(params(3)) : channels(channel).wave=wave
0c9a4     3C 4E 05 F1 | 	add	fp, #60
0c9a8     A7 12 02 FB | 	rdlong	arg01, fp
0c9ac     3C 4E 85 F1 | 	sub	fp, #60
0c9b0     00 14 06 F6 | 	mov	arg02, #0
0c9b4     01 16 06 F6 | 	mov	arg03, #1
0c9b8     D4 2D B1 FD | 	call	#__system___float_cmp
0c9bc     00 FA 55 F2 | 	cmps	result1, #0 wc
0c9c0     24 00 90 CD |  if_b	jmp	#LR__0999
0c9c4     3C 4E 05 F1 | 	add	fp, #60
0c9c8     A7 12 02 FB | 	rdlong	arg01, fp
0c9cc     3C 4E 85 F1 | 	sub	fp, #60
0c9d0     00 80 20 FF 
0c9d4     00 14 06 F6 | 	mov	arg02, ##1090519040
0c9d8     01 16 66 F6 | 	neg	arg03, #1
0c9dc     B0 2D B1 FD | 	call	#__system___float_cmp
0c9e0     01 FA 55 F2 | 	cmps	result1, #1 wc
0c9e4     48 00 90 CD |  if_b	jmp	#LR__1000
0c9e8                 | LR__0999
0c9e8     0C 4E 05 F1 | 	add	fp, #12
0c9ec     A7 22 02 FB | 	rdlong	local03, fp
0c9f0     11 27 02 F6 | 	mov	local05, local03
0c9f4     01 26 66 F0 | 	shl	local05, #1
0c9f8     11 27 02 F1 | 	add	local05, local03
0c9fc     03 26 66 F0 | 	shl	local05, #3
0ca00     34 00 00 FF 
0ca04     2C E5 05 F1 | 	add	objptr, ##26924
0ca08     F2 26 02 F1 | 	add	local05, objptr
0ca0c     04 26 06 F1 | 	add	local05, #4
0ca10     13 27 C2 FA | 	rdbyte	local05, local05
0ca14     13 25 E2 F8 | 	getbyte	local04, local05, #0
0ca18     14 4E 05 F1 | 	add	fp, #20
0ca1c     A7 24 62 FC | 	wrlong	local04, fp
0ca20     20 4E 85 F1 | 	sub	fp, #32
0ca24     34 00 00 FF 
0ca28     2C E5 85 F1 | 	sub	objptr, ##26924
0ca2c     54 00 90 FD | 	jmp	#LR__1001
0ca30                 | LR__1000
0ca30     3C 4E 05 F1 | 	add	fp, #60
0ca34     A7 12 02 FB | 	rdlong	arg01, fp
0ca38     3C 4E 85 F1 | 	sub	fp, #60
0ca3c     01 14 06 F6 | 	mov	arg02, #1
0ca40     E0 2D B1 FD | 	call	#__system___float_tointeger
0ca44     20 4E 05 F1 | 	add	fp, #32
0ca48     A7 FA 61 FC | 	wrlong	result1, fp
0ca4c     14 4E 85 F1 | 	sub	fp, #20
0ca50     A7 20 02 FB | 	rdlong	local02, fp
0ca54     10 23 02 F6 | 	mov	local03, local02
0ca58     01 22 66 F0 | 	shl	local03, #1
0ca5c     10 23 02 F1 | 	add	local03, local02
0ca60     03 22 66 F0 | 	shl	local03, #3
0ca64     34 00 00 FF 
0ca68     2C E5 05 F1 | 	add	objptr, ##26924
0ca6c     F2 22 02 F1 | 	add	local03, objptr
0ca70     0C 4E 85 F1 | 	sub	fp, #12
0ca74     04 22 06 F1 | 	add	local03, #4
0ca78     11 FB 41 FC | 	wrbyte	result1, local03
0ca7c     34 00 00 FF 
0ca80     2C E5 85 F1 | 	sub	objptr, ##26924
0ca84                 | LR__1001
0ca84                 | ' if params(4)<0 orelse params(4)>8.0 then env=channels(channel).env else env=round(params(4)) : channels(channel).env=env
0ca84     40 4E 05 F1 | 	add	fp, #64
0ca88     A7 12 02 FB | 	rdlong	arg01, fp
0ca8c     40 4E 85 F1 | 	sub	fp, #64
0ca90     00 14 06 F6 | 	mov	arg02, #0
0ca94     01 16 06 F6 | 	mov	arg03, #1
0ca98     F4 2C B1 FD | 	call	#__system___float_cmp
0ca9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0caa0     24 00 90 CD |  if_b	jmp	#LR__1002
0caa4     40 4E 05 F1 | 	add	fp, #64
0caa8     A7 12 02 FB | 	rdlong	arg01, fp
0caac     40 4E 85 F1 | 	sub	fp, #64
0cab0     00 80 20 FF 
0cab4     00 14 06 F6 | 	mov	arg02, ##1090519040
0cab8     01 16 66 F6 | 	neg	arg03, #1
0cabc     D0 2C B1 FD | 	call	#__system___float_cmp
0cac0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cac4     48 00 90 CD |  if_b	jmp	#LR__1003
0cac8                 | LR__1002
0cac8     0C 4E 05 F1 | 	add	fp, #12
0cacc     A7 22 02 FB | 	rdlong	local03, fp
0cad0     11 27 02 F6 | 	mov	local05, local03
0cad4     01 26 66 F0 | 	shl	local05, #1
0cad8     11 27 02 F1 | 	add	local05, local03
0cadc     03 26 66 F0 | 	shl	local05, #3
0cae0     34 00 00 FF 
0cae4     2C E5 05 F1 | 	add	objptr, ##26924
0cae8     F2 26 02 F1 | 	add	local05, objptr
0caec     05 26 06 F1 | 	add	local05, #5
0caf0     13 27 C2 FA | 	rdbyte	local05, local05
0caf4     13 25 E2 F8 | 	getbyte	local04, local05, #0
0caf8     18 4E 05 F1 | 	add	fp, #24
0cafc     A7 24 62 FC | 	wrlong	local04, fp
0cb00     24 4E 85 F1 | 	sub	fp, #36
0cb04     34 00 00 FF 
0cb08     2C E5 85 F1 | 	sub	objptr, ##26924
0cb0c     54 00 90 FD | 	jmp	#LR__1004
0cb10                 | LR__1003
0cb10     40 4E 05 F1 | 	add	fp, #64
0cb14     A7 12 02 FB | 	rdlong	arg01, fp
0cb18     40 4E 85 F1 | 	sub	fp, #64
0cb1c     01 14 06 F6 | 	mov	arg02, #1
0cb20     00 2D B1 FD | 	call	#__system___float_tointeger
0cb24     24 4E 05 F1 | 	add	fp, #36
0cb28     A7 FA 61 FC | 	wrlong	result1, fp
0cb2c     18 4E 85 F1 | 	sub	fp, #24
0cb30     A7 20 02 FB | 	rdlong	local02, fp
0cb34     10 23 02 F6 | 	mov	local03, local02
0cb38     01 22 66 F0 | 	shl	local03, #1
0cb3c     10 23 02 F1 | 	add	local03, local02
0cb40     03 22 66 F0 | 	shl	local03, #3
0cb44     34 00 00 FF 
0cb48     2C E5 05 F1 | 	add	objptr, ##26924
0cb4c     F2 22 02 F1 | 	add	local03, objptr
0cb50     0C 4E 85 F1 | 	sub	fp, #12
0cb54     05 22 06 F1 | 	add	local03, #5
0cb58     11 FB 41 FC | 	wrbyte	result1, local03
0cb5c     34 00 00 FF 
0cb60     2C E5 85 F1 | 	sub	objptr, ##26924
0cb64                 | LR__1004
0cb64                 | ' if params(5)<0 orelse params(5)>1000.0 then slen=channels(channel).length else slen=params(5) : channels(channel).length=slen
0cb64     44 4E 05 F1 | 	add	fp, #68
0cb68     A7 12 02 FB | 	rdlong	arg01, fp
0cb6c     44 4E 85 F1 | 	sub	fp, #68
0cb70     00 14 06 F6 | 	mov	arg02, #0
0cb74     01 16 06 F6 | 	mov	arg03, #1
0cb78     14 2C B1 FD | 	call	#__system___float_cmp
0cb7c     00 FA 55 F2 | 	cmps	result1, #0 wc
0cb80     24 00 90 CD |  if_b	jmp	#LR__1005
0cb84     44 4E 05 F1 | 	add	fp, #68
0cb88     A7 12 02 FB | 	rdlong	arg01, fp
0cb8c     44 4E 85 F1 | 	sub	fp, #68
0cb90     00 3D 22 FF 
0cb94     00 14 06 F6 | 	mov	arg02, ##1148846080
0cb98     01 16 66 F6 | 	neg	arg03, #1
0cb9c     F0 2B B1 FD | 	call	#__system___float_cmp
0cba0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cba4     44 00 90 CD |  if_b	jmp	#LR__1006
0cba8                 | LR__1005
0cba8     0C 4E 05 F1 | 	add	fp, #12
0cbac     A7 20 02 FB | 	rdlong	local02, fp
0cbb0     10 23 02 F6 | 	mov	local03, local02
0cbb4     01 22 66 F0 | 	shl	local03, #1
0cbb8     10 23 02 F1 | 	add	local03, local02
0cbbc     03 22 66 F0 | 	shl	local03, #3
0cbc0     34 00 00 FF 
0cbc4     2C E5 05 F1 | 	add	objptr, ##26924
0cbc8     F2 22 02 F1 | 	add	local03, objptr
0cbcc     08 22 06 F1 | 	add	local03, #8
0cbd0     11 25 02 FB | 	rdlong	local04, local03
0cbd4     64 4E 05 F1 | 	add	fp, #100
0cbd8     A7 24 62 FC | 	wrlong	local04, fp
0cbdc     70 4E 85 F1 | 	sub	fp, #112
0cbe0     34 00 00 FF 
0cbe4     2C E5 85 F1 | 	sub	objptr, ##26924
0cbe8     48 00 90 FD | 	jmp	#LR__1007
0cbec                 | LR__1006
0cbec     44 4E 05 F1 | 	add	fp, #68
0cbf0     A7 24 02 FB | 	rdlong	local04, fp
0cbf4     2C 4E 05 F1 | 	add	fp, #44
0cbf8     A7 24 62 FC | 	wrlong	local04, fp
0cbfc     64 4E 85 F1 | 	sub	fp, #100
0cc00     A7 20 02 FB | 	rdlong	local02, fp
0cc04     10 23 02 F6 | 	mov	local03, local02
0cc08     01 22 66 F0 | 	shl	local03, #1
0cc0c     10 23 02 F1 | 	add	local03, local02
0cc10     03 22 66 F0 | 	shl	local03, #3
0cc14     34 00 00 FF 
0cc18     2C E5 05 F1 | 	add	objptr, ##26924
0cc1c     F2 22 02 F1 | 	add	local03, objptr
0cc20     0C 4E 85 F1 | 	sub	fp, #12
0cc24     08 22 06 F1 | 	add	local03, #8
0cc28     11 25 62 FC | 	wrlong	local04, local03
0cc2c     34 00 00 FF 
0cc30     2C E5 85 F1 | 	sub	objptr, ##26924
0cc34                 | LR__1007
0cc34                 | ' if params(6)<0 orelse params(6)>10000.0 then delay=channels(channel).delay else delay=round(params(6)) : channels(channel).delay=delay
0cc34     48 4E 05 F1 | 	add	fp, #72
0cc38     A7 12 02 FB | 	rdlong	arg01, fp
0cc3c     48 4E 85 F1 | 	sub	fp, #72
0cc40     00 14 06 F6 | 	mov	arg02, #0
0cc44     01 16 06 F6 | 	mov	arg03, #1
0cc48     44 2B B1 FD | 	call	#__system___float_cmp
0cc4c     00 FA 55 F2 | 	cmps	result1, #0 wc
0cc50     24 00 90 CD |  if_b	jmp	#LR__1008
0cc54     48 4E 05 F1 | 	add	fp, #72
0cc58     A7 12 02 FB | 	rdlong	arg01, fp
0cc5c     48 4E 85 F1 | 	sub	fp, #72
0cc60     20 0E 23 FF 
0cc64     00 14 06 F6 | 	mov	arg02, ##1176256512
0cc68     01 16 66 F6 | 	neg	arg03, #1
0cc6c     20 2B B1 FD | 	call	#__system___float_cmp
0cc70     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc74     48 00 90 CD |  if_b	jmp	#LR__1009
0cc78                 | LR__1008
0cc78     0C 4E 05 F1 | 	add	fp, #12
0cc7c     A7 22 02 FB | 	rdlong	local03, fp
0cc80     11 27 02 F6 | 	mov	local05, local03
0cc84     01 26 66 F0 | 	shl	local05, #1
0cc88     11 27 02 F1 | 	add	local05, local03
0cc8c     03 26 66 F0 | 	shl	local05, #3
0cc90     34 00 00 FF 
0cc94     2C E5 05 F1 | 	add	objptr, ##26924
0cc98     F2 26 02 F1 | 	add	local05, objptr
0cc9c     06 26 06 F1 | 	add	local05, #6
0cca0     13 27 E2 FA | 	rdword	local05, local05
0cca4     13 25 32 F9 | 	getword	local04, local05, #0
0cca8     1C 4E 05 F1 | 	add	fp, #28
0ccac     A7 24 62 FC | 	wrlong	local04, fp
0ccb0     28 4E 85 F1 | 	sub	fp, #40
0ccb4     34 00 00 FF 
0ccb8     2C E5 85 F1 | 	sub	objptr, ##26924
0ccbc     54 00 90 FD | 	jmp	#LR__1010
0ccc0                 | LR__1009
0ccc0     48 4E 05 F1 | 	add	fp, #72
0ccc4     A7 12 02 FB | 	rdlong	arg01, fp
0ccc8     48 4E 85 F1 | 	sub	fp, #72
0cccc     01 14 06 F6 | 	mov	arg02, #1
0ccd0     50 2B B1 FD | 	call	#__system___float_tointeger
0ccd4     28 4E 05 F1 | 	add	fp, #40
0ccd8     A7 FA 61 FC | 	wrlong	result1, fp
0ccdc     1C 4E 85 F1 | 	sub	fp, #28
0cce0     A7 20 02 FB | 	rdlong	local02, fp
0cce4     10 23 02 F6 | 	mov	local03, local02
0cce8     01 22 66 F0 | 	shl	local03, #1
0ccec     10 23 02 F1 | 	add	local03, local02
0ccf0     03 22 66 F0 | 	shl	local03, #3
0ccf4     34 00 00 FF 
0ccf8     2C E5 05 F1 | 	add	objptr, ##26924
0ccfc     F2 22 02 F1 | 	add	local03, objptr
0cd00     0C 4E 85 F1 | 	sub	fp, #12
0cd04     06 22 06 F1 | 	add	local03, #6
0cd08     11 FB 51 FC | 	wrword	result1, local03
0cd0c     34 00 00 FF 
0cd10     2C E5 85 F1 | 	sub	objptr, ##26924
0cd14                 | LR__1010
0cd14                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0cd14     4C 4E 05 F1 | 	add	fp, #76
0cd18     A7 12 02 FB | 	rdlong	arg01, fp
0cd1c     4C 4E 85 F1 | 	sub	fp, #76
0cd20     00 C0 5F FF 
0cd24     00 14 06 F6 | 	mov	arg02, ##-1082130432
0cd28     01 16 06 F6 | 	mov	arg03, #1
0cd2c     60 2A B1 FD | 	call	#__system___float_cmp
0cd30     00 FA 55 F2 | 	cmps	result1, #0 wc
0cd34     24 00 90 CD |  if_b	jmp	#LR__1011
0cd38     4C 4E 05 F1 | 	add	fp, #76
0cd3c     A7 12 02 FB | 	rdlong	arg01, fp
0cd40     4C 4E 85 F1 | 	sub	fp, #76
0cd44     00 C0 1F FF 
0cd48     00 14 06 F6 | 	mov	arg02, ##1065353216
0cd4c     01 16 66 F6 | 	neg	arg03, #1
0cd50     3C 2A B1 FD | 	call	#__system___float_cmp
0cd54     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd58     44 00 90 CD |  if_b	jmp	#LR__1012
0cd5c                 | LR__1011
0cd5c     0C 4E 05 F1 | 	add	fp, #12
0cd60     A7 20 02 FB | 	rdlong	local02, fp
0cd64     10 23 02 F6 | 	mov	local03, local02
0cd68     01 22 66 F0 | 	shl	local03, #1
0cd6c     10 23 02 F1 | 	add	local03, local02
0cd70     03 22 66 F0 | 	shl	local03, #3
0cd74     34 00 00 FF 
0cd78     2C E5 05 F1 | 	add	objptr, ##26924
0cd7c     F2 22 02 F1 | 	add	local03, objptr
0cd80     10 22 06 F1 | 	add	local03, #16
0cd84     11 27 02 FB | 	rdlong	local05, local03
0cd88     5C 4E 05 F1 | 	add	fp, #92
0cd8c     A7 26 62 FC | 	wrlong	local05, fp
0cd90     68 4E 85 F1 | 	sub	fp, #104
0cd94     34 00 00 FF 
0cd98     2C E5 85 F1 | 	sub	objptr, ##26924
0cd9c     48 00 90 FD | 	jmp	#LR__1013
0cda0                 | LR__1012
0cda0     4C 4E 05 F1 | 	add	fp, #76
0cda4     A7 26 02 FB | 	rdlong	local05, fp
0cda8     1C 4E 05 F1 | 	add	fp, #28
0cdac     A7 26 62 FC | 	wrlong	local05, fp
0cdb0     5C 4E 85 F1 | 	sub	fp, #92
0cdb4     A7 20 02 FB | 	rdlong	local02, fp
0cdb8     10 23 02 F6 | 	mov	local03, local02
0cdbc     01 22 66 F0 | 	shl	local03, #1
0cdc0     10 23 02 F1 | 	add	local03, local02
0cdc4     03 22 66 F0 | 	shl	local03, #3
0cdc8     34 00 00 FF 
0cdcc     2C E5 05 F1 | 	add	objptr, ##26924
0cdd0     F2 22 02 F1 | 	add	local03, objptr
0cdd4     0C 4E 85 F1 | 	sub	fp, #12
0cdd8     10 22 06 F1 | 	add	local03, #16
0cddc     11 27 62 FC | 	wrlong	local05, local03
0cde0     34 00 00 FF 
0cde4     2C E5 85 F1 | 	sub	objptr, ##26924
0cde8                 | LR__1013
0cde8                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0cde8     50 4E 05 F1 | 	add	fp, #80
0cdec     A7 12 02 FB | 	rdlong	arg01, fp
0cdf0     50 4E 85 F1 | 	sub	fp, #80
0cdf4     00 14 06 F6 | 	mov	arg02, #0
0cdf8     01 16 06 F6 | 	mov	arg03, #1
0cdfc     90 29 B1 FD | 	call	#__system___float_cmp
0ce00     00 FA 55 F2 | 	cmps	result1, #0 wc
0ce04     24 00 90 CD |  if_b	jmp	#LR__1014
0ce08     50 4E 05 F1 | 	add	fp, #80
0ce0c     A7 12 02 FB | 	rdlong	arg01, fp
0ce10     50 4E 85 F1 | 	sub	fp, #80
0ce14     80 BF 21 FF 
0ce18     00 14 06 F6 | 	mov	arg02, ##1132396544
0ce1c     01 16 66 F6 | 	neg	arg03, #1
0ce20     6C 29 B1 FD | 	call	#__system___float_cmp
0ce24     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce28     44 00 90 CD |  if_b	jmp	#LR__1015
0ce2c                 | LR__1014
0ce2c     0C 4E 05 F1 | 	add	fp, #12
0ce30     A7 22 02 FB | 	rdlong	local03, fp
0ce34     11 27 02 F6 | 	mov	local05, local03
0ce38     01 26 66 F0 | 	shl	local05, #1
0ce3c     11 27 02 F1 | 	add	local05, local03
0ce40     03 26 66 F0 | 	shl	local05, #3
0ce44     34 00 00 FF 
0ce48     2C E5 05 F1 | 	add	objptr, ##26924
0ce4c     F2 26 02 F1 | 	add	local05, objptr
0ce50     14 26 06 F1 | 	add	local05, #20
0ce54     13 25 E2 FA | 	rdword	local04, local05
0ce58     20 4E 05 F1 | 	add	fp, #32
0ce5c     A7 24 62 FC | 	wrlong	local04, fp
0ce60     2C 4E 85 F1 | 	sub	fp, #44
0ce64     34 00 00 FF 
0ce68     2C E5 85 F1 | 	sub	objptr, ##26924
0ce6c     54 00 90 FD | 	jmp	#LR__1016
0ce70                 | LR__1015
0ce70     50 4E 05 F1 | 	add	fp, #80
0ce74     A7 12 02 FB | 	rdlong	arg01, fp
0ce78     50 4E 85 F1 | 	sub	fp, #80
0ce7c     01 14 06 F6 | 	mov	arg02, #1
0ce80     A0 29 B1 FD | 	call	#__system___float_tointeger
0ce84     2C 4E 05 F1 | 	add	fp, #44
0ce88     A7 FA 61 FC | 	wrlong	result1, fp
0ce8c     20 4E 85 F1 | 	sub	fp, #32
0ce90     A7 20 02 FB | 	rdlong	local02, fp
0ce94     10 23 02 F6 | 	mov	local03, local02
0ce98     01 22 66 F0 | 	shl	local03, #1
0ce9c     10 23 02 F1 | 	add	local03, local02
0cea0     03 22 66 F0 | 	shl	local03, #3
0cea4     34 00 00 FF 
0cea8     2C E5 05 F1 | 	add	objptr, ##26924
0ceac     F2 22 02 F1 | 	add	local03, objptr
0ceb0     0C 4E 85 F1 | 	sub	fp, #12
0ceb4     14 22 06 F1 | 	add	local03, #20
0ceb8     11 FB 51 FC | 	wrword	result1, local03
0cebc     34 00 00 FF 
0cec0     2C E5 85 F1 | 	sub	objptr, ##26924
0cec4                 | LR__1016
0cec4     60 4E 05 F1 | 	add	fp, #96
0cec8     A7 12 02 FB | 	rdlong	arg01, fp
0cecc     10 4E 05 F1 | 	add	fp, #16
0ced0     A7 14 02 FB | 	rdlong	arg02, fp
0ced4     70 4E 85 F1 | 	sub	fp, #112
0ced8     84 26 B1 FD | 	call	#__system___float_div
0cedc     FD 12 02 F6 | 	mov	arg01, result1
0cee0     01 14 06 F6 | 	mov	arg02, #1
0cee4     3C 29 B1 FD | 	call	#__system___float_tointeger
0cee8     FD 24 02 F6 | 	mov	local04, result1
0ceec     14 4E 05 F1 | 	add	fp, #20
0cef0     A7 24 62 FC | 	wrlong	local04, fp
0cef4     54 4E 05 F1 | 	add	fp, #84
0cef8     A7 14 02 FB | 	rdlong	arg02, fp
0cefc     68 4E 85 F1 | 	sub	fp, #104
0cf00     00 00 23 FF 
0cf04     00 12 06 F6 | 	mov	arg01, ##1174405120
0cf08     50 24 B1 FD | 	call	#__system___float_mul
0cf0c     FD 12 02 F6 | 	mov	arg01, result1
0cf10     01 14 06 F6 | 	mov	arg02, #1
0cf14     0C 29 B1 FD | 	call	#__system___float_tointeger
0cf18     0D 24 C6 F9 | 	decod	local04, #13
0cf1c     FD 24 02 F1 | 	add	local04, result1
0cf20     18 4E 05 F1 | 	add	fp, #24
0cf24     A7 24 62 FC | 	wrlong	local04, fp
0cf28     54 4E 05 F1 | 	add	fp, #84
0cf2c     A7 14 02 FB | 	rdlong	arg02, fp
0cf30     6C 4E 85 F1 | 	sub	fp, #108
0cf34     00 3D 22 FF 
0cf38     00 12 06 F6 | 	mov	arg01, ##1148846080
0cf3c     1C 24 B1 FD | 	call	#__system___float_mul
0cf40     FD 12 02 F6 | 	mov	arg01, result1
0cf44     01 14 06 F6 | 	mov	arg02, #1
0cf48     D8 28 B1 FD | 	call	#__system___float_tointeger
0cf4c     1C 4E 05 F1 | 	add	fp, #28
0cf50     A7 FA 61 FC | 	wrlong	result1, fp
0cf54     56 00 00 FF 
0cf58     F4 E5 05 F1 | 	add	objptr, ##44532
0cf5c     F2 24 02 FB | 	rdlong	local04, objptr
0cf60     56 00 00 FF 
0cf64     F4 E5 85 F1 | 	sub	objptr, ##44532
0cf68     10 4E 85 F1 | 	sub	fp, #16
0cf6c     A7 20 02 FB | 	rdlong	local02, fp
0cf70     06 20 66 F0 | 	shl	local02, #6
0cf74     10 25 02 F1 | 	add	local04, local02
0cf78     04 4E 85 F1 | 	sub	fp, #4
0cf7c     A7 24 62 FC | 	wrlong	local04, fp
0cf80     5C 4E 05 F1 | 	add	fp, #92
0cf84     A7 12 02 FB | 	rdlong	arg01, fp
0cf88     64 4E 85 F1 | 	sub	fp, #100
0cf8c     72 3F 20 FF 
0cf90     EA 14 06 F6 | 	mov	arg02, ##1082057962
0cf94     C4 23 B1 FD | 	call	#__system___float_mul
0cf98     FD 12 02 F6 | 	mov	arg01, result1
0cf9c     01 14 06 F6 | 	mov	arg02, #1
0cfa0     80 28 B1 FD | 	call	#__system___float_tointeger
0cfa4     10 4E 05 F1 | 	add	fp, #16
0cfa8     A7 FA 61 FC | 	wrlong	result1, fp
0cfac                 | ' 
0cfac                 | ' speed=round(speed_coeff/slen)
0cfac                 | ' ipan=8192+round(8192*pan)
0cfac                 | ' ivol=round(1000.0*vol)
0cfac                 | ' base2=base+64*channel
0cfac                 | ' skip=round(freq*3.9827219) 
0cfac                 | ' if wave <8 then 
0cfac     10 4E 05 F1 | 	add	fp, #16
0cfb0     A7 24 02 FB | 	rdlong	local04, fp
0cfb4     20 4E 85 F1 | 	sub	fp, #32
0cfb8     08 24 56 F2 | 	cmps	local04, #8 wc
0cfbc     40 00 90 3D |  if_ae	jmp	#LR__1017
0cfc0     08 4E 05 F1 | 	add	fp, #8
0cfc4     A7 12 02 FB | 	rdlong	arg01, fp
0cfc8     08 12 06 F1 | 	add	arg01, #8
0cfcc     18 4E 05 F1 | 	add	fp, #24
0cfd0     A7 14 02 FB | 	rdlong	arg02, fp
0cfd4     20 4E 85 F1 | 	sub	fp, #32
0cfd8     0B 14 66 F0 | 	shl	arg02, #11
0cfdc     0C 00 00 FF 
0cfe0     CC E4 05 F1 | 	add	objptr, ##6348
0cfe4     F2 14 02 F1 | 	add	arg02, objptr
0cfe8     0C 00 00 FF 
0cfec     CC E4 85 F1 | 	sub	objptr, ##6348
0cff0     00 00 60 FF 
0cff4     00 14 06 F1 | 	add	arg02, ##-1073741824
0cff8     09 15 62 FC | 	wrlong	arg02, arg01
0cffc     18 00 90 FD | 	jmp	#LR__1018
0d000                 | LR__1017
0d000     08 4E 05 F1 | 	add	fp, #8
0d004     A7 12 02 FB | 	rdlong	arg01, fp
0d008     08 4E 85 F1 | 	sub	fp, #8
0d00c     08 12 06 F1 | 	add	arg01, #8
0d010     00 00 E4 FF 
0d014     09 01 68 FC | 	wrlong	##-939524096, arg01
0d018                 | LR__1018
0d018     08 4E 05 F1 | 	add	fp, #8
0d01c     A7 12 02 FB | 	rdlong	arg01, fp
0d020     10 12 06 F1 | 	add	arg01, #16
0d024     04 00 80 FF 
0d028     09 01 68 FC | 	wrlong	##2048, arg01
0d02c     A7 12 02 FB | 	rdlong	arg01, fp
0d030     0C 12 06 F1 | 	add	arg01, #12
0d034     09 01 68 FC | 	wrlong	#0, arg01
0d038     A7 12 02 FB | 	rdlong	arg01, fp
0d03c     14 12 06 F1 | 	add	arg01, #20
0d040     14 4E 05 F1 | 	add	fp, #20
0d044     A7 14 02 FB | 	rdlong	arg02, fp
0d048     09 15 52 FC | 	wrword	arg02, arg01
0d04c     14 4E 85 F1 | 	sub	fp, #20
0d050     A7 12 02 FB | 	rdlong	arg01, fp
0d054     16 12 06 F1 | 	add	arg01, #22
0d058     10 4E 05 F1 | 	add	fp, #16
0d05c     A7 14 02 FB | 	rdlong	arg02, fp
0d060     09 15 52 FC | 	wrword	arg02, arg01
0d064                 | '   
0d064                 | ' lpoke base2+16,2048
0d064                 | ' lpoke base2+12,0
0d064                 | ' dpoke base2+20,ivol 
0d064                 | ' dpoke base2+22,ipan 
0d064                 | ' if wave<8 then
0d064     08 4E 05 F1 | 	add	fp, #8
0d068     A7 24 02 FB | 	rdlong	local04, fp
0d06c     20 4E 85 F1 | 	sub	fp, #32
0d070     08 24 56 F2 | 	cmps	local04, #8 wc
0d074     2C 00 90 3D |  if_ae	jmp	#LR__1019
0d078     08 4E 05 F1 | 	add	fp, #8
0d07c     A7 12 02 FB | 	rdlong	arg01, fp
0d080     18 12 06 F1 | 	add	arg01, #24
0d084     09 29 58 FC | 	wrword	#20, arg01
0d088     A7 12 02 FB | 	rdlong	arg01, fp
0d08c     1A 12 06 F1 | 	add	arg01, #26
0d090     08 4E 05 F1 | 	add	fp, #8
0d094     A7 14 02 FB | 	rdlong	arg02, fp
0d098     10 4E 85 F1 | 	sub	fp, #16
0d09c     09 15 52 FC | 	wrword	arg02, arg01
0d0a0     48 00 90 FD | 	jmp	#LR__1020
0d0a4                 | LR__1019
0d0a4     08 4E 05 F1 | 	add	fp, #8
0d0a8     A7 24 02 FB | 	rdlong	local04, fp
0d0ac     18 24 06 F1 | 	add	local04, #24
0d0b0     5C 4E 05 F1 | 	add	fp, #92
0d0b4     A7 14 02 FB | 	rdlong	arg02, fp
0d0b8     64 4E 85 F1 | 	sub	fp, #100
0d0bc     58 D0 24 FF 
0d0c0     B0 13 06 F6 | 	mov	arg01, ##1235268016
0d0c4     98 24 B1 FD | 	call	#__system___float_div
0d0c8     FD 12 02 F6 | 	mov	arg01, result1
0d0cc     01 14 06 F6 | 	mov	arg02, #1
0d0d0     50 27 B1 FD | 	call	#__system___float_tointeger
0d0d4     12 FB 51 FC | 	wrword	result1, local04
0d0d8     08 4E 05 F1 | 	add	fp, #8
0d0dc     A7 12 02 FB | 	rdlong	arg01, fp
0d0e0     08 4E 85 F1 | 	sub	fp, #8
0d0e4     1A 12 06 F1 | 	add	arg01, #26
0d0e8     09 01 5A FC | 	wrword	#256, arg01
0d0ec                 | LR__1020
0d0ec     08 4E 05 F1 | 	add	fp, #8
0d0f0     A7 12 02 FB | 	rdlong	arg01, fp
0d0f4     20 12 06 F1 | 	add	arg01, #32
0d0f8     09 01 68 FC | 	wrlong	#0, arg01
0d0fc                 | ' 'dpoke base2+28,$4000_0000
0d0fc                 | ' lpoke base2+32,0 
0d0fc                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0d0fc     1C 4E 05 F1 | 	add	fp, #28
0d100     A7 24 02 FB | 	rdlong	local04, fp
0d104     24 4E 85 F1 | 	sub	fp, #36
0d108     08 24 0E F2 | 	cmp	local04, #8 wz
0d10c     18 00 90 5D |  if_ne	jmp	#LR__1021
0d110     08 4E 05 F1 | 	add	fp, #8
0d114     A7 12 02 FB | 	rdlong	arg01, fp
0d118     08 4E 85 F1 | 	sub	fp, #8
0d11c     24 12 06 F1 | 	add	arg01, #36
0d120     09 01 68 FC | 	wrlong	#0, arg01
0d124     34 00 90 FD | 	jmp	#LR__1022
0d128                 | LR__1021
0d128     08 4E 05 F1 | 	add	fp, #8
0d12c     A7 12 02 FB | 	rdlong	arg01, fp
0d130     24 12 06 F1 | 	add	arg01, #36
0d134     1C 4E 05 F1 | 	add	fp, #28
0d138     A7 14 02 FB | 	rdlong	arg02, fp
0d13c     24 4E 85 F1 | 	sub	fp, #36
0d140     09 14 66 F0 | 	shl	arg02, #9
0d144     2C 00 00 FF 
0d148     CC E4 05 F1 | 	add	objptr, ##22732
0d14c     F2 14 02 F1 | 	add	arg02, objptr
0d150     2C 00 00 FF 
0d154     CC E4 85 F1 | 	sub	objptr, ##22732
0d158     09 15 62 FC | 	wrlong	arg02, arg01
0d15c                 | LR__1022
0d15c     08 4E 05 F1 | 	add	fp, #8
0d160     A7 12 02 FB | 	rdlong	arg01, fp
0d164     28 12 06 F1 | 	add	arg01, #40
0d168     0C 4E 05 F1 | 	add	fp, #12
0d16c     A7 14 02 FB | 	rdlong	arg02, fp
0d170     09 15 62 FC | 	wrlong	arg02, arg01
0d174     0C 4E 85 F1 | 	sub	fp, #12
0d178     A7 12 02 FB | 	rdlong	arg01, fp
0d17c     2C 12 06 F1 | 	add	arg01, #44
0d180     24 4E 05 F1 | 	add	fp, #36
0d184     A7 14 02 FB | 	rdlong	arg02, fp
0d188     09 15 62 FC | 	wrlong	arg02, arg01
0d18c                 | ' lpoke base2+40,speed' speed
0d18c                 | ' lpoke base2+44,sus 'len
0d18c                 | ' 
0d18c                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0d18c     04 4E 85 F1 | 	sub	fp, #4
0d190     A7 24 02 FB | 	rdlong	local04, fp
0d194     28 4E 85 F1 | 	sub	fp, #40
0d198     01 24 56 F2 | 	cmps	local04, #1 wc
0d19c     28 4E 05 31 |  if_ae	add	fp, #40
0d1a0     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0d1a4     28 4E 85 31 |  if_ae	sub	fp, #40
0d1a8     28 F9 B0 3D |  if_ae	call	#__system___waitms
0d1ac     A7 F0 03 F6 | 	mov	ptra, fp
0d1b0     B2 00 A0 FD | 	call	#popregs_
0d1b4                 | _do_play_ret
0d1b4     2D 00 64 FD | 	ret
0d1b8                 | 
0d1b8                 | ' 
0d1b8                 | ' sub do_release
0d1b8                 | _do_release
0d1b8     00 4A 05 F6 | 	mov	COUNT_, #0
0d1bc     A8 00 A0 FD | 	call	#pushregs_
0d1c0     10 F0 07 F1 | 	add	ptra, #16
0d1c4     18 D0 BF FD | 	call	#_pop
0d1c8     FF 14 02 F6 | 	mov	arg02, result3
0d1cc     A7 FA 61 FC | 	wrlong	result1, fp
0d1d0     04 4E 05 F1 | 	add	fp, #4
0d1d4     A7 FC 61 FC | 	wrlong	result2, fp
0d1d8     04 4E 05 F1 | 	add	fp, #4
0d1dc     A7 14 62 FC | 	wrlong	arg02, fp
0d1e0     08 4E 85 F1 | 	sub	fp, #8
0d1e4     A7 12 02 F6 | 	mov	arg01, fp
0d1e8     30 5C B0 FD | 	call	#_converttoint
0d1ec     0C 4E 05 F1 | 	add	fp, #12
0d1f0     A7 FA 61 FC | 	wrlong	result1, fp
0d1f4                 | ' t1=pop()
0d1f4                 | ' channel=converttoint(t1)
0d1f4                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0d1f4     0C 4E 85 F1 | 	sub	fp, #12
0d1f8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d1fc     44 00 90 CD |  if_b	jmp	#LR__1030
0d200     0C 4E 05 F1 | 	add	fp, #12
0d204     A7 14 02 FB | 	rdlong	arg02, fp
0d208     0C 4E 85 F1 | 	sub	fp, #12
0d20c     08 14 56 F2 | 	cmps	arg02, #8 wc
0d210     30 00 90 3D |  if_ae	jmp	#LR__1030
0d214     56 00 00 FF 
0d218     F4 E5 05 F1 | 	add	objptr, ##44532
0d21c     F2 12 02 FB | 	rdlong	arg01, objptr
0d220     56 00 00 FF 
0d224     F4 E5 85 F1 | 	sub	objptr, ##44532
0d228     0C 4E 05 F1 | 	add	fp, #12
0d22c     A7 14 02 FB | 	rdlong	arg02, fp
0d230     0C 4E 85 F1 | 	sub	fp, #12
0d234     06 14 66 F0 | 	shl	arg02, #6
0d238     0A 13 02 F1 | 	add	arg01, arg02
0d23c     2C 12 06 F1 | 	add	arg01, #44
0d240     09 FF 69 FC | 	wrlong	#255, arg01
0d244                 | LR__1030
0d244     A7 F0 03 F6 | 	mov	ptra, fp
0d248     B2 00 A0 FD | 	call	#popregs_
0d24c                 | _do_release_ret
0d24c     2D 00 64 FD | 	ret
0d250                 | 
0d250                 | ' 
0d250                 | ' 
0d250                 | ' sub do_defsnd
0d250                 | _do_defsnd
0d250     05 4A 05 F6 | 	mov	COUNT_, #5
0d254     A8 00 A0 FD | 	call	#pushregs_
0d258     88 F0 07 F1 | 	add	ptra, #136
0d25c     6A 00 00 FF 
0d260     64 E4 05 F1 | 	add	objptr, ##54372
0d264     F2 1A 02 FB | 	rdlong	arg05, objptr
0d268     0D 19 02 F6 | 	mov	arg04, arg05
0d26c     01 18 66 F0 | 	shl	arg04, #1
0d270     0D 19 02 F1 | 	add	arg04, arg05
0d274     02 18 66 F0 | 	shl	arg04, #2
0d278     03 00 00 FF 
0d27c     04 E4 85 F1 | 	sub	objptr, ##1540
0d280     F2 18 02 F1 | 	add	arg04, objptr
0d284     0C 1B 02 FB | 	rdlong	arg05, arg04
0d288     A7 1A 62 FC | 	wrlong	arg05, fp
0d28c                 | ' 
0d28c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d28c                 | ' 
0d28c                 | ' 
0d28c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0d28c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0d28c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0d28c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0d28c                 | ' 
0d28c                 | ' if numpar<2 then return
0d28c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0d290     67 00 00 FF 
0d294     60 E4 85 F1 | 	sub	objptr, ##52832
0d298     A0 09 90 CD |  if_b	jmp	#LR__1068
0d29c                 | ' 
0d29c                 | '   
0d29c                 | ' if numpar=2 then
0d29c     A7 1A 02 FB | 	rdlong	arg05, fp
0d2a0     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d2a4     0C 04 90 5D |  if_ne	jmp	#LR__1051
0d2a8     34 CF BF FD | 	call	#_pop
0d2ac     FF 1A 02 F6 | 	mov	arg05, result3
0d2b0     2C 4E 05 F1 | 	add	fp, #44
0d2b4     A7 FA 61 FC | 	wrlong	result1, fp
0d2b8     04 4E 05 F1 | 	add	fp, #4
0d2bc     A7 FC 61 FC | 	wrlong	result2, fp
0d2c0     04 4E 05 F1 | 	add	fp, #4
0d2c4     A7 1A 62 FC | 	wrlong	arg05, fp
0d2c8                 | '   t1=pop()
0d2c8                 | '   if t1.result_type=result_string2 then 
0d2c8     34 4E 85 F1 | 	sub	fp, #52
0d2cc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d2d0     20 00 90 5D |  if_ne	jmp	#LR__1040
0d2d4     2C 4E 05 F1 | 	add	fp, #44
0d2d8     A7 12 02 FB | 	rdlong	arg01, fp
0d2dc     2C 4E 85 F1 | 	sub	fp, #44
0d2e0     88 11 B0 FD | 	call	#_convertstring
0d2e4     38 4E 05 F1 | 	add	fp, #56
0d2e8     A7 FA 61 FC | 	wrlong	result1, fp
0d2ec     38 4E 85 F1 | 	sub	fp, #56
0d2f0     58 00 90 FD | 	jmp	#LR__1043
0d2f4                 | LR__1040
0d2f4     34 4E 05 F1 | 	add	fp, #52
0d2f8     A7 1A 02 FB | 	rdlong	arg05, fp
0d2fc     34 4E 85 F1 | 	sub	fp, #52
0d300     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0d304     18 00 90 5D |  if_ne	jmp	#LR__1041
0d308     2C 4E 05 F1 | 	add	fp, #44
0d30c     A7 1A 02 FB | 	rdlong	arg05, fp
0d310     0C 4E 05 F1 | 	add	fp, #12
0d314     A7 1A 62 FC | 	wrlong	arg05, fp
0d318     38 4E 85 F1 | 	sub	fp, #56
0d31c     2C 00 90 FD | 	jmp	#LR__1042
0d320                 | LR__1041
0d320     61 01 00 FF 
0d324     C4 1B 06 F6 | 	mov	arg05, ##@LR__4943
0d328     38 4E 05 F1 | 	add	fp, #56
0d32c     A7 1A 62 FC | 	wrlong	arg05, fp
0d330     0C 4E 85 F1 | 	sub	fp, #12
0d334     A7 12 02 F6 | 	mov	arg01, fp
0d338     2C 4E 85 F1 | 	sub	fp, #44
0d33c     DC 5A B0 FD | 	call	#_converttoint
0d340     14 4E 05 F1 | 	add	fp, #20
0d344     A7 FA 61 FC | 	wrlong	result1, fp
0d348     14 4E 85 F1 | 	sub	fp, #20
0d34c                 | LR__1042
0d34c                 | LR__1043
0d34c                 | ' 
0d34c                 | '     
0d34c                 | '   if s<>"" then 
0d34c     38 4E 05 F1 | 	add	fp, #56
0d350     A7 12 02 FB | 	rdlong	arg01, fp
0d354     38 4E 85 F1 | 	sub	fp, #56
0d358     61 01 00 FF 
0d35c     C5 15 06 F6 | 	mov	arg02, ##@LR__4944
0d360     A4 F4 B0 FD | 	call	#__system___string_cmp
0d364     00 FA 0D F2 | 	cmp	result1, #0 wz
0d368     88 01 90 AD |  if_e	jmp	#LR__1045
0d36c     70 CE BF FD | 	call	#_pop
0d370     FF 1A 02 F6 | 	mov	arg05, result3
0d374     2C 4E 05 F1 | 	add	fp, #44
0d378     A7 FA 61 FC | 	wrlong	result1, fp
0d37c     04 4E 05 F1 | 	add	fp, #4
0d380     A7 FC 61 FC | 	wrlong	result2, fp
0d384     04 4E 05 F1 | 	add	fp, #4
0d388     A7 1A 62 FC | 	wrlong	arg05, fp
0d38c     08 4E 85 F1 | 	sub	fp, #8
0d390     A7 12 02 F6 | 	mov	arg01, fp
0d394     2C 4E 85 F1 | 	sub	fp, #44
0d398     80 5A B0 FD | 	call	#_converttoint
0d39c     10 4E 05 F1 | 	add	fp, #16
0d3a0     A7 FA 61 FC | 	wrlong	result1, fp
0d3a4     10 4E 85 F1 | 	sub	fp, #16
0d3a8                 | '     t1=pop()
0d3a8                 | '     channel=converttoint(t1) 
0d3a8                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0d3a8     09 12 06 F6 | 	mov	arg01, #9
0d3ac     F4 43 B1 FD | 	call	#__system__close
0d3b0     09 1E 06 F6 | 	mov	local01, #9
0d3b4     61 01 00 FF 
0d3b8     C6 13 06 F6 | 	mov	arg01, ##@LR__4945
0d3bc     38 4E 05 F1 | 	add	fp, #56
0d3c0     A7 14 02 FB | 	rdlong	arg02, fp
0d3c4     38 4E 85 F1 | 	sub	fp, #56
0d3c8     70 F4 B0 FD | 	call	#__system___string_concat
0d3cc     FD 14 02 F6 | 	mov	arg02, result1
0d3d0     0F 13 02 F6 | 	mov	arg01, local01
0d3d4     00 16 06 F6 | 	mov	arg03, #0
0d3d8     04 00 B1 FD | 	call	#__system___basic_open_string
0d3dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d3e0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d3e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d3e8     7B 00 00 FF 
0d3ec     F8 E4 05 F1 | 	add	objptr, ##63224
0d3f0     F2 FA 61 FC | 	wrlong	result1, objptr
0d3f4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d3f4     7B 00 00 FF 
0d3f8     F8 E4 85 F1 | 	sub	objptr, ##63224
0d3fc     B0 00 90 AD |  if_e	jmp	#LR__1044
0d400     00 12 06 F6 | 	mov	arg01, #0
0d404     68 4D B1 FD | 	call	#__system___getiolock_0474
0d408     FD 12 02 F6 | 	mov	arg01, result1
0d40c     D0 F3 B0 FD | 	call	#__system___lockmem
0d410     61 01 00 FF 
0d414     D3 15 06 F6 | 	mov	arg02, ##@LR__4946
0d418     00 12 06 F6 | 	mov	arg01, #0
0d41c     00 16 06 F6 | 	mov	arg03, #0
0d420     C0 00 B1 FD | 	call	#__system___basic_print_string
0d424     7B 00 00 FF 
0d428     F8 E4 05 F1 | 	add	objptr, ##63224
0d42c     F2 14 02 FB | 	rdlong	arg02, objptr
0d430     7B 00 00 FF 
0d434     F8 E4 85 F1 | 	sub	objptr, ##63224
0d438     00 12 06 F6 | 	mov	arg01, #0
0d43c     00 16 06 F6 | 	mov	arg03, #0
0d440     0A 18 06 F6 | 	mov	arg04, #10
0d444     E0 00 B1 FD | 	call	#__system___basic_print_integer
0d448     61 01 00 FF 
0d44c     E1 15 06 F6 | 	mov	arg02, ##@LR__4947
0d450     00 12 06 F6 | 	mov	arg01, #0
0d454     00 16 06 F6 | 	mov	arg03, #0
0d458     88 00 B1 FD | 	call	#__system___basic_print_string
0d45c     00 1E 06 F6 | 	mov	local01, #0
0d460     7B 00 00 FF 
0d464     F8 E4 05 F1 | 	add	objptr, ##63224
0d468     F2 12 02 FB | 	rdlong	arg01, objptr
0d46c     7B 00 00 FF 
0d470     F8 E4 85 F1 | 	sub	objptr, ##63224
0d474     F8 19 B1 FD | 	call	#__system___strerror
0d478     FD 14 02 F6 | 	mov	arg02, result1
0d47c     0F 13 02 F6 | 	mov	arg01, local01
0d480     00 16 06 F6 | 	mov	arg03, #0
0d484     5C 00 B1 FD | 	call	#__system___basic_print_string
0d488     00 12 06 F6 | 	mov	arg01, #0
0d48c     0A 14 06 F6 | 	mov	arg02, #10
0d490     00 16 06 F6 | 	mov	arg03, #0
0d494     F4 FF B0 FD | 	call	#__system___basic_print_char
0d498     00 12 06 F6 | 	mov	arg01, #0
0d49c     D0 4C B1 FD | 	call	#__system___getiolock_0474
0d4a0     FD 00 68 FC | 	wrlong	#0, result1
0d4a4     09 12 06 F6 | 	mov	arg01, #9
0d4a8     F8 42 B1 FD | 	call	#__system__close
0d4ac     8C 07 90 FD | 	jmp	#LR__1068
0d4b0                 | LR__1044
0d4b0                 | '     get #9,17,samplebuf(channel,0),1024
0d4b0     10 4E 05 F1 | 	add	fp, #16
0d4b4     A7 16 02 FB | 	rdlong	arg03, fp
0d4b8     10 4E 85 F1 | 	sub	fp, #16
0d4bc     0B 16 66 F0 | 	shl	arg03, #11
0d4c0     0C 00 00 FF 
0d4c4     CC E4 05 F1 | 	add	objptr, ##6348
0d4c8     F2 16 02 F1 | 	add	arg03, objptr
0d4cc     09 12 06 F6 | 	mov	arg01, #9
0d4d0     11 14 06 F6 | 	mov	arg02, #17
0d4d4     0A 18 C6 F9 | 	decod	arg04, #10
0d4d8     02 1A 06 F6 | 	mov	arg05, #2
0d4dc     0C 00 00 FF 
0d4e0     CC E4 85 F1 | 	sub	objptr, ##6348
0d4e4     0C 01 B1 FD | 	call	#__system___basic_get
0d4e8                 | '     close #9
0d4e8     09 12 06 F6 | 	mov	arg01, #9
0d4ec     B4 42 B1 FD | 	call	#__system__close
0d4f0                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d4f0                 | '     return
0d4f0     48 07 90 FD | 	jmp	#LR__1068
0d4f4                 | LR__1045
0d4f4                 | '     if wptr < ($80000 - 2048) then 
0d4f4     14 4E 05 F1 | 	add	fp, #20
0d4f8     A7 1E 02 FB | 	rdlong	local01, fp
0d4fc     14 4E 85 F1 | 	sub	fp, #20
0d500     FC 03 00 FF 
0d504     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0d508     80 00 90 3D |  if_ae	jmp	#LR__1048
0d50c                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0d50c     04 4E 05 F1 | 	add	fp, #4
0d510     A7 00 68 FC | 	wrlong	#0, fp
0d514     04 4E 85 F1 | 	sub	fp, #4
0d518     0C 00 00 FF 
0d51c     CC E4 05 F1 | 	add	objptr, ##6348
0d520     97 2E 48 FB | 	callpa	#(@LR__1047-@LR__1046)>>2,fcache_load_ptr_
0d524                 | LR__1046
0d524     10 4E 05 F1 | 	add	fp, #16
0d528     A7 1E 02 FB | 	rdlong	local01, fp
0d52c     0B 1E 66 F0 | 	shl	local01, #11
0d530     F2 1E 02 F1 | 	add	local01, objptr
0d534     0C 4E 85 F1 | 	sub	fp, #12
0d538     A7 1A 02 FB | 	rdlong	arg05, fp
0d53c     0D 19 02 F6 | 	mov	arg04, arg05
0d540     01 18 66 F0 | 	shl	arg04, #1
0d544     0F 19 02 F1 | 	add	arg04, local01
0d548     10 4E 05 F1 | 	add	fp, #16
0d54c     A7 12 02 FB | 	rdlong	arg01, fp
0d550     01 1A 66 F0 | 	shl	arg05, #1
0d554     0D 13 02 F1 | 	add	arg01, arg05
0d558     09 FB E1 FA | 	rdword	result1, arg01
0d55c     0C FB 51 FC | 	wrword	result1, arg04
0d560     10 4E 85 F1 | 	sub	fp, #16
0d564     A7 1E 02 FB | 	rdlong	local01, fp
0d568     01 1E 06 F1 | 	add	local01, #1
0d56c     A7 1E 62 FC | 	wrlong	local01, fp
0d570     04 4E 85 F1 | 	sub	fp, #4
0d574     02 00 00 FF 
0d578     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0d57c     A4 FF 9F CD |  if_b	jmp	#LR__1046
0d580                 | LR__1047
0d580     0C 00 00 FF 
0d584     CC E4 85 F1 | 	sub	objptr, ##6348
0d588     B0 06 90 FD | 	jmp	#LR__1068
0d58c                 | LR__1048
0d58c                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0d58c     04 4E 05 F1 | 	add	fp, #4
0d590     A7 00 68 FC | 	wrlong	#0, fp
0d594     04 4E 85 F1 | 	sub	fp, #4
0d598                 | LR__1049
0d598     10 4E 05 F1 | 	add	fp, #16
0d59c     A7 1A 02 FB | 	rdlong	arg05, fp
0d5a0     0B 1A 66 F0 | 	shl	arg05, #11
0d5a4     0C 00 00 FF 
0d5a8     CC E4 05 F1 | 	add	objptr, ##6348
0d5ac     F2 1A 02 F1 | 	add	arg05, objptr
0d5b0     0C 4E 85 F1 | 	sub	fp, #12
0d5b4     A7 18 02 FB | 	rdlong	arg04, fp
0d5b8     0C 21 02 F6 | 	mov	local02, arg04
0d5bc     01 20 66 F0 | 	shl	local02, #1
0d5c0     0D 21 02 F1 | 	add	local02, arg05
0d5c4     10 4E 05 F1 | 	add	fp, #16
0d5c8     A7 12 02 FB | 	rdlong	arg01, fp
0d5cc     14 4E 85 F1 | 	sub	fp, #20
0d5d0     01 18 66 F0 | 	shl	arg04, #1
0d5d4     0C 13 02 F1 | 	add	arg01, arg04
0d5d8     0C 00 00 FF 
0d5dc     CC E4 85 F1 | 	sub	objptr, ##6348
0d5e0     00 BD B0 FD | 	call	#_psdpeek
0d5e4     10 FB 51 FC | 	wrword	result1, local02
0d5e8     04 4E 05 F1 | 	add	fp, #4
0d5ec     A7 22 02 FB | 	rdlong	local03, fp
0d5f0     01 22 06 F1 | 	add	local03, #1
0d5f4     A7 22 62 FC | 	wrlong	local03, fp
0d5f8     04 4E 85 F1 | 	sub	fp, #4
0d5fc     02 00 00 FF 
0d600     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d604     90 FF 9F CD |  if_b	jmp	#LR__1049
0d608                 | '     return 
0d608     30 06 90 FD | 	jmp	#LR__1068
0d60c                 | '   
0d60c                 | '   par=converttoint(t1)  : print par
0d60c                 | '   t1=pop()
0d60c                 | '   channel=converttoint(t1)  
0d60c                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0d60c                 | LR__1050
0d60c     10 4E 05 F1 | 	add	fp, #16
0d610     A7 22 02 FB | 	rdlong	local03, fp
0d614     0B 22 66 F0 | 	shl	local03, #11
0d618     0C 00 00 FF 
0d61c     CC E4 05 F1 | 	add	objptr, ##6348
0d620     F2 22 02 F1 | 	add	local03, objptr
0d624     0C 4E 85 F1 | 	sub	fp, #12
0d628     A7 12 02 FB | 	rdlong	arg01, fp
0d62c     09 21 02 F6 | 	mov	local02, arg01
0d630     01 20 66 F0 | 	shl	local02, #1
0d634     11 21 02 F1 | 	add	local02, local03
0d638     04 4E 85 F1 | 	sub	fp, #4
0d63c     0C 00 00 FF 
0d640     CC E4 85 F1 | 	sub	objptr, ##6348
0d644     09 13 52 F6 | 	abs	arg01, arg01 wc
0d648     1F 24 C6 C9 |  if_b	decod	local04, #31
0d64c     00 24 06 36 |  if_ae	mov	local04, #0
0d650     04 19 B1 FD | 	call	#__system___float_fromuns
0d654     12 FB 61 F5 | 	xor	result1, local04
0d658     FD 14 02 F6 | 	mov	arg02, result1
0d65c     87 E4 1D FF 
0d660     DB 13 06 F6 | 	mov	arg01, ##1003032539
0d664     F4 1C B1 FD | 	call	#__system___float_mul
0d668     FD 12 02 F6 | 	mov	arg01, result1
0d66c     28 26 B1 FD | 	call	#__system____builtin_sinf
0d670     FD 14 02 F6 | 	mov	arg02, result1
0d674     58 7F 23 FF 
0d678     00 12 06 F6 | 	mov	arg01, ##1191096320
0d67c     DC 1C B1 FD | 	call	#__system___float_mul
0d680     FD 12 02 F6 | 	mov	arg01, result1
0d684     01 14 06 F6 | 	mov	arg02, #1
0d688     98 21 B1 FD | 	call	#__system___float_tointeger
0d68c     10 FB 51 FC | 	wrword	result1, local02
0d690     04 4E 05 F1 | 	add	fp, #4
0d694     A7 22 02 FB | 	rdlong	local03, fp
0d698     01 22 06 F1 | 	add	local03, #1
0d69c     A7 22 62 FC | 	wrlong	local03, fp
0d6a0     04 4E 85 F1 | 	sub	fp, #4
0d6a4     02 00 00 FF 
0d6a8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d6ac     5C FF 9F CD |  if_b	jmp	#LR__1050
0d6b0                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d6b0                 | '   return
0d6b0     88 05 90 FD | 	jmp	#LR__1068
0d6b4                 | LR__1051
0d6b4                 | ' for i=0 to 15 : harm(i)=0: next i  
0d6b4     04 4E 05 F1 | 	add	fp, #4
0d6b8     A7 00 68 FC | 	wrlong	#0, fp
0d6bc     97 16 48 FB | 	callpa	#(@LR__1053-@LR__1052)>>2,fcache_load_ptr_
0d6c0                 | LR__1052
0d6c0     A7 22 02 FB | 	rdlong	local03, fp
0d6c4     02 22 66 F0 | 	shl	local03, #2
0d6c8     38 4E 05 F1 | 	add	fp, #56
0d6cc     A7 22 02 F1 | 	add	local03, fp
0d6d0     11 01 68 FC | 	wrlong	#0, local03
0d6d4     38 4E 85 F1 | 	sub	fp, #56
0d6d8     A7 22 02 FB | 	rdlong	local03, fp
0d6dc     01 22 06 F1 | 	add	local03, #1
0d6e0     A7 22 62 FC | 	wrlong	local03, fp
0d6e4     10 22 56 F2 | 	cmps	local03, #16 wc
0d6e8     D4 FF 9F CD |  if_b	jmp	#LR__1052
0d6ec                 | LR__1053
0d6ec     04 4E 85 F1 | 	sub	fp, #4
0d6f0                 | ' for i=numpar to 2 step -1 
0d6f0     A7 1E 02 FB | 	rdlong	local01, fp
0d6f4     04 4E 05 F1 | 	add	fp, #4
0d6f8     A7 1E 62 FC | 	wrlong	local01, fp
0d6fc     04 4E 85 F1 | 	sub	fp, #4
0d700                 | LR__1054
0d700     DC CA BF FD | 	call	#_pop
0d704     2C 4E 05 F1 | 	add	fp, #44
0d708     A7 FA 61 FC | 	wrlong	result1, fp
0d70c     04 4E 05 F1 | 	add	fp, #4
0d710     A7 FC 61 FC | 	wrlong	result2, fp
0d714     04 4E 05 F1 | 	add	fp, #4
0d718     A7 FE 61 FC | 	wrlong	result3, fp
0d71c     30 4E 85 F1 | 	sub	fp, #48
0d720     A7 22 02 FB | 	rdlong	local03, fp
0d724     02 22 86 F1 | 	sub	local03, #2
0d728     02 22 66 F0 | 	shl	local03, #2
0d72c     38 4E 05 F1 | 	add	fp, #56
0d730     A7 22 02 F1 | 	add	local03, fp
0d734     10 4E 85 F1 | 	sub	fp, #16
0d738     A7 12 02 F6 | 	mov	arg01, fp
0d73c     2C 4E 85 F1 | 	sub	fp, #44
0d740     84 57 B0 FD | 	call	#_converttofloat
0d744     11 FB 61 FC | 	wrlong	result1, local03
0d748     04 4E 05 F1 | 	add	fp, #4
0d74c     A7 22 02 FB | 	rdlong	local03, fp
0d750     01 22 86 F1 | 	sub	local03, #1
0d754     A7 22 62 FC | 	wrlong	local03, fp
0d758     04 4E 85 F1 | 	sub	fp, #4
0d75c     02 22 56 F2 | 	cmps	local03, #2 wc
0d760     9C FF 9F 3D |  if_ae	jmp	#LR__1054
0d764     78 CA BF FD | 	call	#_pop
0d768     FF 1E 02 F6 | 	mov	local01, result3
0d76c     2C 4E 05 F1 | 	add	fp, #44
0d770     A7 FA 61 FC | 	wrlong	result1, fp
0d774     04 4E 05 F1 | 	add	fp, #4
0d778     A7 FC 61 FC | 	wrlong	result2, fp
0d77c     04 4E 05 F1 | 	add	fp, #4
0d780     A7 1E 62 FC | 	wrlong	local01, fp
0d784     08 4E 85 F1 | 	sub	fp, #8
0d788     A7 12 02 F6 | 	mov	arg01, fp
0d78c     2C 4E 85 F1 | 	sub	fp, #44
0d790     88 56 B0 FD | 	call	#_converttoint
0d794     FD 1E 02 F6 | 	mov	local01, result1
0d798     10 4E 05 F1 | 	add	fp, #16
0d79c     A7 1E 62 FC | 	wrlong	local01, fp
0d7a0     10 4E 85 F1 | 	sub	fp, #16
0d7a4                 | ' t1=pop()
0d7a4                 | ' channel=converttoint(t1) : print channel
0d7a4     00 12 06 F6 | 	mov	arg01, #0
0d7a8     C4 49 B1 FD | 	call	#__system___getiolock_0474
0d7ac     FD 12 02 F6 | 	mov	arg01, result1
0d7b0     2C F0 B0 FD | 	call	#__system___lockmem
0d7b4     10 4E 05 F1 | 	add	fp, #16
0d7b8     A7 14 02 FB | 	rdlong	arg02, fp
0d7bc     10 4E 85 F1 | 	sub	fp, #16
0d7c0     00 12 06 F6 | 	mov	arg01, #0
0d7c4     00 16 06 F6 | 	mov	arg03, #0
0d7c8     0A 18 06 F6 | 	mov	arg04, #10
0d7cc     58 FD B0 FD | 	call	#__system___basic_print_integer
0d7d0     00 12 06 F6 | 	mov	arg01, #0
0d7d4     0A 14 06 F6 | 	mov	arg02, #10
0d7d8     00 16 06 F6 | 	mov	arg03, #0
0d7dc     AC FC B0 FD | 	call	#__system___basic_print_char
0d7e0     00 12 06 F6 | 	mov	arg01, #0
0d7e4     88 49 B1 FD | 	call	#__system___getiolock_0474
0d7e8     FD 00 68 FC | 	wrlong	#0, result1
0d7ec                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0d7ec     08 4E 05 F1 | 	add	fp, #8
0d7f0     02 00 80 FF 
0d7f4     A7 00 68 FC | 	wrlong	##1024, fp
0d7f8     08 4E 85 F1 | 	sub	fp, #8
0d7fc     0C 00 00 FF 
0d800     CC E4 05 F1 | 	add	objptr, ##6348
0d804     97 18 48 FB | 	callpa	#(@LR__1057-@LR__1055)>>2,fcache_load_ptr_
0d808                 | LR__1055
0d808     02 00 00 FF 
0d80c     00 14 DC FC | 	rep	@LR__1058, ##1024
0d810                 | LR__1056
0d810     10 4E 05 F1 | 	add	fp, #16
0d814     A7 20 02 FB | 	rdlong	local02, fp
0d818     0B 20 66 F0 | 	shl	local02, #11
0d81c     F2 20 02 F1 | 	add	local02, objptr
0d820     0C 4E 85 F1 | 	sub	fp, #12
0d824     A7 22 02 FB | 	rdlong	local03, fp
0d828     04 4E 85 F1 | 	sub	fp, #4
0d82c     01 22 66 F0 | 	shl	local03, #1
0d830     10 23 02 F1 | 	add	local03, local02
0d834     11 01 58 FC | 	wrword	#0, local03
0d838                 | LR__1057
0d838                 | LR__1058
0d838     0C 00 00 FF 
0d83c     CC E4 85 F1 | 	sub	objptr, ##6348
0d840     20 4E 05 F1 | 	add	fp, #32
0d844     A7 00 68 FC | 	wrlong	#0, fp
0d848                 | ' max=0
0d848                 | ' if harm(0)<0 then
0d848     1C 4E 05 F1 | 	add	fp, #28
0d84c     A7 12 02 FB | 	rdlong	arg01, fp
0d850     3C 4E 85 F1 | 	sub	fp, #60
0d854     00 14 06 F6 | 	mov	arg02, #0
0d858     01 16 06 F6 | 	mov	arg03, #1
0d85c     30 1F B1 FD | 	call	#__system___float_cmp
0d860     00 FA 55 F2 | 	cmps	result1, #0 wc
0d864     04 01 90 3D |  if_ae	jmp	#LR__1061
0d868     3C 4E 05 F1 | 	add	fp, #60
0d86c     A7 FA 01 FB | 	rdlong	result1, fp
0d870     1F FA 05 F4 | 	bitl	result1, #31
0d874     24 4E 85 F1 | 	sub	fp, #36
0d878     A7 FA 61 FC | 	wrlong	result1, fp
0d87c     28 4E 05 F1 | 	add	fp, #40
0d880     A7 FA 01 FB | 	rdlong	result1, fp
0d884     1F FA 05 F4 | 	bitl	result1, #31
0d888     24 4E 85 F1 | 	sub	fp, #36
0d88c     A7 FA 61 FC | 	wrlong	result1, fp
0d890     20 4E 05 F1 | 	add	fp, #32
0d894     00 C0 9F FF 
0d898     A7 00 68 FC | 	wrlong	##1065353216, fp
0d89c     24 4E 85 F1 | 	sub	fp, #36
0d8a0     A7 1E 02 FB | 	rdlong	local01, fp
0d8a4     28 4E 05 F1 | 	add	fp, #40
0d8a8     A7 1E 62 FC | 	wrlong	local01, fp
0d8ac     24 4E 85 F1 | 	sub	fp, #36
0d8b0     A7 1E 02 FB | 	rdlong	local01, fp
0d8b4     28 4E 05 F1 | 	add	fp, #40
0d8b8     A7 1E 62 FC | 	wrlong	local01, fp
0d8bc                 | '   harm(0)=1
0d8bc                 | '   harm(1)=even
0d8bc                 | '   harm(2)=odd
0d8bc                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0d8bc     40 4E 85 F1 | 	sub	fp, #64
0d8c0     A7 06 68 FC | 	wrlong	#3, fp
0d8c4                 | LR__1059
0d8c4     A7 22 02 FB | 	rdlong	local03, fp
0d8c8     11 27 02 F6 | 	mov	local05, local03
0d8cc     02 26 66 F0 | 	shl	local05, #2
0d8d0     38 4E 05 F1 | 	add	fp, #56
0d8d4     A7 26 02 F1 | 	add	local05, fp
0d8d8     02 22 86 F1 | 	sub	local03, #2
0d8dc     02 22 66 F0 | 	shl	local03, #2
0d8e0     A7 22 02 F1 | 	add	local03, fp
0d8e4     11 13 02 FB | 	rdlong	arg01, local03
0d8e8     24 4E 85 F1 | 	sub	fp, #36
0d8ec     A7 14 02 FB | 	rdlong	arg02, fp
0d8f0     18 4E 85 F1 | 	sub	fp, #24
0d8f4     64 1A B1 FD | 	call	#__system___float_mul
0d8f8     13 FB 61 FC | 	wrlong	result1, local05
0d8fc     04 4E 05 F1 | 	add	fp, #4
0d900     A7 22 02 FB | 	rdlong	local03, fp
0d904     02 22 06 F1 | 	add	local03, #2
0d908     A7 22 62 FC | 	wrlong	local03, fp
0d90c     10 22 56 F2 | 	cmps	local03, #16 wc
0d910     B0 FF 9F CD |  if_b	jmp	#LR__1059
0d914                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0d914     A7 08 68 FC | 	wrlong	#4, fp
0d918                 | LR__1060
0d918     A7 22 02 FB | 	rdlong	local03, fp
0d91c     11 27 02 F6 | 	mov	local05, local03
0d920     02 26 66 F0 | 	shl	local05, #2
0d924     38 4E 05 F1 | 	add	fp, #56
0d928     A7 26 02 F1 | 	add	local05, fp
0d92c     02 22 86 F1 | 	sub	local03, #2
0d930     02 22 66 F0 | 	shl	local03, #2
0d934     A7 22 02 F1 | 	add	local03, fp
0d938     11 13 02 FB | 	rdlong	arg01, local03
0d93c     20 4E 85 F1 | 	sub	fp, #32
0d940     A7 14 02 FB | 	rdlong	arg02, fp
0d944     1C 4E 85 F1 | 	sub	fp, #28
0d948     10 1A B1 FD | 	call	#__system___float_mul
0d94c     13 FB 61 FC | 	wrlong	result1, local05
0d950     04 4E 05 F1 | 	add	fp, #4
0d954     A7 22 02 FB | 	rdlong	local03, fp
0d958     02 22 06 F1 | 	add	local03, #2
0d95c     A7 22 62 FC | 	wrlong	local03, fp
0d960     0F 22 56 F2 | 	cmps	local03, #15 wc
0d964     B0 FF 9F CD |  if_b	jmp	#LR__1060
0d968     04 4E 85 F1 | 	sub	fp, #4
0d96c                 | LR__1061
0d96c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0d96c     3C 4E 05 F1 | 	add	fp, #60
0d970     A7 12 02 FB | 	rdlong	arg01, fp
0d974     3C 4E 85 F1 | 	sub	fp, #60
0d978     00 14 06 F6 | 	mov	arg02, #0
0d97c     01 16 66 F6 | 	neg	arg03, #1
0d980     0C 1E B1 FD | 	call	#__system___float_cmp
0d984     00 FA 55 F2 | 	cmps	result1, #0 wc
0d988     B0 02 90 CD |  if_b	jmp	#LR__1067
0d98c                 | '   for i=0 to 1023
0d98c     04 4E 05 F1 | 	add	fp, #4
0d990     A7 00 68 FC | 	wrlong	#0, fp
0d994     04 4E 85 F1 | 	sub	fp, #4
0d998                 | LR__1062
0d998     24 4E 05 F1 | 	add	fp, #36
0d99c     A7 00 68 FC | 	wrlong	#0, fp
0d9a0                 | '     spl=0
0d9a0                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0d9a0     1C 4E 85 F1 | 	sub	fp, #28
0d9a4     A7 00 68 FC | 	wrlong	#0, fp
0d9a8                 | LR__1063
0d9a8     A7 26 02 FB | 	rdlong	local05, fp
0d9ac     02 26 66 F0 | 	shl	local05, #2
0d9b0     34 4E 05 F1 | 	add	fp, #52
0d9b4     A7 26 02 F1 | 	add	local05, fp
0d9b8     13 23 02 FB | 	rdlong	local03, local05
0d9bc     87 E4 1D FF 
0d9c0     DB 27 06 F6 | 	mov	local05, ##1003032539
0d9c4     38 4E 85 F1 | 	sub	fp, #56
0d9c8     A7 12 02 FB | 	rdlong	arg01, fp
0d9cc     04 4E 85 F1 | 	sub	fp, #4
0d9d0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9d4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d9d8     00 24 06 36 |  if_ae	mov	local04, #0
0d9dc     78 15 B1 FD | 	call	#__system___float_fromuns
0d9e0     12 FB 61 F5 | 	xor	result1, local04
0d9e4     FD 14 02 F6 | 	mov	arg02, result1
0d9e8     13 13 02 F6 | 	mov	arg01, local05
0d9ec     6C 19 B1 FD | 	call	#__system___float_mul
0d9f0     FD 26 02 F6 | 	mov	local05, result1
0d9f4     08 4E 05 F1 | 	add	fp, #8
0d9f8     A7 12 02 FB | 	rdlong	arg01, fp
0d9fc     08 4E 85 F1 | 	sub	fp, #8
0da00     01 12 06 F1 | 	add	arg01, #1
0da04     09 13 52 F6 | 	abs	arg01, arg01 wc
0da08     1F 24 C6 C9 |  if_b	decod	local04, #31
0da0c     00 24 06 36 |  if_ae	mov	local04, #0
0da10     44 15 B1 FD | 	call	#__system___float_fromuns
0da14     12 FB 61 F5 | 	xor	result1, local04
0da18     FD 14 02 F6 | 	mov	arg02, result1
0da1c     13 13 02 F6 | 	mov	arg01, local05
0da20     38 19 B1 FD | 	call	#__system___float_mul
0da24     FD 12 02 F6 | 	mov	arg01, result1
0da28     6C 22 B1 FD | 	call	#__system____builtin_sinf
0da2c     FD 14 02 F6 | 	mov	arg02, result1
0da30     11 13 02 F6 | 	mov	arg01, local03
0da34     24 19 B1 FD | 	call	#__system___float_mul
0da38     FD 14 02 F6 | 	mov	arg02, result1
0da3c     24 4E 05 F1 | 	add	fp, #36
0da40     A7 12 02 FB | 	rdlong	arg01, fp
0da44     24 4E 85 F1 | 	sub	fp, #36
0da48     40 15 B1 FD | 	call	#__system___float_add
0da4c     24 4E 05 F1 | 	add	fp, #36
0da50     A7 FA 61 FC | 	wrlong	result1, fp
0da54     1C 4E 85 F1 | 	sub	fp, #28
0da58     A7 16 02 FB | 	rdlong	arg03, fp
0da5c     01 16 06 F1 | 	add	arg03, #1
0da60     A7 16 62 FC | 	wrlong	arg03, fp
0da64     10 16 56 F2 | 	cmps	arg03, #16 wc
0da68     3C FF 9F CD |  if_b	jmp	#LR__1063
0da6c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0da6c     1C 4E 05 F1 | 	add	fp, #28
0da70     A7 12 02 FB | 	rdlong	arg01, fp
0da74     1F 12 06 F4 | 	bitl	arg01, #31
0da78     04 4E 85 F1 | 	sub	fp, #4
0da7c     A7 14 02 FB | 	rdlong	arg02, fp
0da80     20 4E 85 F1 | 	sub	fp, #32
0da84     01 16 66 F6 | 	neg	arg03, #1
0da88     04 1D B1 FD | 	call	#__system___float_cmp
0da8c     01 FA 55 F2 | 	cmps	result1, #1 wc
0da90     18 00 90 CD |  if_b	jmp	#LR__1064
0da94     24 4E 05 F1 | 	add	fp, #36
0da98     A7 FA 01 FB | 	rdlong	result1, fp
0da9c     1F FA 05 F4 | 	bitl	result1, #31
0daa0     04 4E 85 F1 | 	sub	fp, #4
0daa4     A7 FA 61 FC | 	wrlong	result1, fp
0daa8     20 4E 85 F1 | 	sub	fp, #32
0daac                 | LR__1064
0daac     04 4E 05 F1 | 	add	fp, #4
0dab0     A7 22 02 FB | 	rdlong	local03, fp
0dab4     01 22 06 F1 | 	add	local03, #1
0dab8     A7 22 62 FC | 	wrlong	local03, fp
0dabc     04 4E 85 F1 | 	sub	fp, #4
0dac0     02 00 00 FF 
0dac4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dac8     CC FE 9F CD |  if_b	jmp	#LR__1062
0dacc                 | '   for i=0 to 1023
0dacc     04 4E 05 F1 | 	add	fp, #4
0dad0     A7 00 68 FC | 	wrlong	#0, fp
0dad4     04 4E 85 F1 | 	sub	fp, #4
0dad8                 | LR__1065
0dad8     24 4E 05 F1 | 	add	fp, #36
0dadc     A7 00 68 FC | 	wrlong	#0, fp
0dae0                 | '     spl=0
0dae0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0dae0     1C 4E 85 F1 | 	sub	fp, #28
0dae4     A7 00 68 FC | 	wrlong	#0, fp
0dae8                 | LR__1066
0dae8     A7 26 02 FB | 	rdlong	local05, fp
0daec     02 26 66 F0 | 	shl	local05, #2
0daf0     34 4E 05 F1 | 	add	fp, #52
0daf4     A7 26 02 F1 | 	add	local05, fp
0daf8     13 27 02 FB | 	rdlong	local05, local05
0dafc     1C 4E 85 F1 | 	sub	fp, #28
0db00     A7 14 02 FB | 	rdlong	arg02, fp
0db04     20 4E 85 F1 | 	sub	fp, #32
0db08     58 7F 23 FF 
0db0c     00 12 06 F6 | 	mov	arg01, ##1191096320
0db10     4C 1A B1 FD | 	call	#__system___float_div
0db14     FD 14 02 F6 | 	mov	arg02, result1
0db18     13 13 02 F6 | 	mov	arg01, local05
0db1c     3C 18 B1 FD | 	call	#__system___float_mul
0db20     FD 22 02 F6 | 	mov	local03, result1
0db24     87 E4 1D FF 
0db28     DB 27 06 F6 | 	mov	local05, ##1003032539
0db2c     04 4E 05 F1 | 	add	fp, #4
0db30     A7 12 02 FB | 	rdlong	arg01, fp
0db34     04 4E 85 F1 | 	sub	fp, #4
0db38     09 13 52 F6 | 	abs	arg01, arg01 wc
0db3c     1F 24 C6 C9 |  if_b	decod	local04, #31
0db40     00 24 06 36 |  if_ae	mov	local04, #0
0db44     10 14 B1 FD | 	call	#__system___float_fromuns
0db48     12 FB 61 F5 | 	xor	result1, local04
0db4c     FD 14 02 F6 | 	mov	arg02, result1
0db50     13 13 02 F6 | 	mov	arg01, local05
0db54     04 18 B1 FD | 	call	#__system___float_mul
0db58     FD 26 02 F6 | 	mov	local05, result1
0db5c     08 4E 05 F1 | 	add	fp, #8
0db60     A7 12 02 FB | 	rdlong	arg01, fp
0db64     08 4E 85 F1 | 	sub	fp, #8
0db68     01 12 06 F1 | 	add	arg01, #1
0db6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0db70     1F 24 C6 C9 |  if_b	decod	local04, #31
0db74     00 24 06 36 |  if_ae	mov	local04, #0
0db78     DC 13 B1 FD | 	call	#__system___float_fromuns
0db7c     12 FB 61 F5 | 	xor	result1, local04
0db80     FD 14 02 F6 | 	mov	arg02, result1
0db84     13 13 02 F6 | 	mov	arg01, local05
0db88     D0 17 B1 FD | 	call	#__system___float_mul
0db8c     FD 12 02 F6 | 	mov	arg01, result1
0db90     04 21 B1 FD | 	call	#__system____builtin_sinf
0db94     FD 14 02 F6 | 	mov	arg02, result1
0db98     11 13 02 F6 | 	mov	arg01, local03
0db9c     BC 17 B1 FD | 	call	#__system___float_mul
0dba0     FD 14 02 F6 | 	mov	arg02, result1
0dba4     24 4E 05 F1 | 	add	fp, #36
0dba8     A7 12 02 FB | 	rdlong	arg01, fp
0dbac     24 4E 85 F1 | 	sub	fp, #36
0dbb0     D8 13 B1 FD | 	call	#__system___float_add
0dbb4     24 4E 05 F1 | 	add	fp, #36
0dbb8     A7 FA 61 FC | 	wrlong	result1, fp
0dbbc     1C 4E 85 F1 | 	sub	fp, #28
0dbc0     A7 26 02 FB | 	rdlong	local05, fp
0dbc4     01 26 06 F1 | 	add	local05, #1
0dbc8     A7 26 62 FC | 	wrlong	local05, fp
0dbcc     10 26 56 F2 | 	cmps	local05, #16 wc
0dbd0     14 FF 9F CD |  if_b	jmp	#LR__1066
0dbd4     08 4E 05 F1 | 	add	fp, #8
0dbd8     A7 26 02 FB | 	rdlong	local05, fp
0dbdc     0B 26 66 F0 | 	shl	local05, #11
0dbe0     0C 00 00 FF 
0dbe4     CC E4 05 F1 | 	add	objptr, ##6348
0dbe8     F2 26 02 F1 | 	add	local05, objptr
0dbec     0C 4E 85 F1 | 	sub	fp, #12
0dbf0     A7 20 02 FB | 	rdlong	local02, fp
0dbf4     01 20 66 F0 | 	shl	local02, #1
0dbf8     13 21 02 F1 | 	add	local02, local05
0dbfc     20 4E 05 F1 | 	add	fp, #32
0dc00     A7 12 02 FB | 	rdlong	arg01, fp
0dc04     24 4E 85 F1 | 	sub	fp, #36
0dc08     0C 00 00 FF 
0dc0c     CC E4 85 F1 | 	sub	objptr, ##6348
0dc10     01 14 06 F6 | 	mov	arg02, #1
0dc14     0C 1C B1 FD | 	call	#__system___float_tointeger
0dc18     10 FB 51 FC | 	wrword	result1, local02
0dc1c     04 4E 05 F1 | 	add	fp, #4
0dc20     A7 22 02 FB | 	rdlong	local03, fp
0dc24     01 22 06 F1 | 	add	local03, #1
0dc28     A7 22 62 FC | 	wrlong	local03, fp
0dc2c     04 4E 85 F1 | 	sub	fp, #4
0dc30     02 00 00 FF 
0dc34     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dc38     9C FE 9F CD |  if_b	jmp	#LR__1065
0dc3c                 | LR__1067
0dc3c                 | LR__1068
0dc3c     A7 F0 03 F6 | 	mov	ptra, fp
0dc40     B2 00 A0 FD | 	call	#popregs_
0dc44                 | _do_defsnd_ret
0dc44     2D 00 64 FD | 	ret
0dc48                 | 
0dc48                 | ' 
0dc48                 | ' ' ---------------  List the program. 
0dc48                 | ' 
0dc48                 | ' sub do_list
0dc48                 | _do_list
0dc48     02 4A 05 F6 | 	mov	COUNT_, #2
0dc4c     A8 00 A0 FD | 	call	#pushregs_
0dc50     B8 F0 07 F1 | 	add	ptra, #184
0dc54     04 4E 05 F1 | 	add	fp, #4
0dc58     A7 00 68 FC | 	wrlong	#0, fp
0dc5c     04 4E 05 F1 | 	add	fp, #4
0dc60     FF FF BF FF 
0dc64     A7 FE 6B FC | 	wrlong	##2147483647, fp
0dc68     08 4E 85 F1 | 	sub	fp, #8
0dc6c     6A 00 00 FF 
0dc70     64 E4 05 F1 | 	add	objptr, ##54372
0dc74     F2 1E 02 FB | 	rdlong	local01, objptr
0dc78     0F 17 02 F6 | 	mov	arg03, local01
0dc7c     01 16 66 F0 | 	shl	arg03, #1
0dc80     0F 17 02 F1 | 	add	arg03, local01
0dc84     02 16 66 F0 | 	shl	arg03, #2
0dc88     03 00 00 FF 
0dc8c     04 E4 85 F1 | 	sub	objptr, ##1540
0dc90     F2 16 02 F1 | 	add	arg03, objptr
0dc94     0B 17 02 FB | 	rdlong	arg03, arg03
0dc98     A7 16 62 FC | 	wrlong	arg03, fp
0dc9c                 | ' 
0dc9c                 | ' startline=0 : endline=$7FFFFFFF
0dc9c                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc9c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0dc9c     01 16 0E F2 | 	cmp	arg03, #1 wz
0dca0     67 00 00 FF 
0dca4     60 E4 85 F1 | 	sub	objptr, ##52832
0dca8     3C 00 90 5D |  if_ne	jmp	#LR__1070
0dcac     30 C5 BF FD | 	call	#_pop
0dcb0     FF 1E 02 F6 | 	mov	local01, result3
0dcb4     0C 4E 05 F1 | 	add	fp, #12
0dcb8     A7 FA 61 FC | 	wrlong	result1, fp
0dcbc     04 4E 05 F1 | 	add	fp, #4
0dcc0     A7 FC 61 FC | 	wrlong	result2, fp
0dcc4     04 4E 05 F1 | 	add	fp, #4
0dcc8     A7 1E 62 FC | 	wrlong	local01, fp
0dccc     08 4E 85 F1 | 	sub	fp, #8
0dcd0     A7 12 02 F6 | 	mov	arg01, fp
0dcd4     0C 4E 85 F1 | 	sub	fp, #12
0dcd8     40 51 B0 FD | 	call	#_converttoint
0dcdc     04 4E 05 F1 | 	add	fp, #4
0dce0     A7 FA 61 FC | 	wrlong	result1, fp
0dce4     04 4E 85 F1 | 	sub	fp, #4
0dce8                 | LR__1070
0dce8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0dce8     A7 16 02 FB | 	rdlong	arg03, fp
0dcec     02 16 0E F2 | 	cmp	arg03, #2 wz
0dcf0     7C 00 90 5D |  if_ne	jmp	#LR__1071
0dcf4     E8 C4 BF FD | 	call	#_pop
0dcf8     FF 1E 02 F6 | 	mov	local01, result3
0dcfc     0C 4E 05 F1 | 	add	fp, #12
0dd00     A7 FA 61 FC | 	wrlong	result1, fp
0dd04     04 4E 05 F1 | 	add	fp, #4
0dd08     A7 FC 61 FC | 	wrlong	result2, fp
0dd0c     04 4E 05 F1 | 	add	fp, #4
0dd10     A7 1E 62 FC | 	wrlong	local01, fp
0dd14     08 4E 85 F1 | 	sub	fp, #8
0dd18     A7 12 02 F6 | 	mov	arg01, fp
0dd1c     0C 4E 85 F1 | 	sub	fp, #12
0dd20     F8 50 B0 FD | 	call	#_converttoint
0dd24     FD 1E 02 F6 | 	mov	local01, result1
0dd28     08 4E 05 F1 | 	add	fp, #8
0dd2c     A7 1E 62 FC | 	wrlong	local01, fp
0dd30     08 4E 85 F1 | 	sub	fp, #8
0dd34     A8 C4 BF FD | 	call	#_pop
0dd38     FF 1E 02 F6 | 	mov	local01, result3
0dd3c     0C 4E 05 F1 | 	add	fp, #12
0dd40     A7 FA 61 FC | 	wrlong	result1, fp
0dd44     04 4E 05 F1 | 	add	fp, #4
0dd48     A7 FC 61 FC | 	wrlong	result2, fp
0dd4c     04 4E 05 F1 | 	add	fp, #4
0dd50     A7 1E 62 FC | 	wrlong	local01, fp
0dd54     08 4E 85 F1 | 	sub	fp, #8
0dd58     A7 12 02 F6 | 	mov	arg01, fp
0dd5c     0C 4E 85 F1 | 	sub	fp, #12
0dd60     B8 50 B0 FD | 	call	#_converttoint
0dd64     04 4E 05 F1 | 	add	fp, #4
0dd68     A7 FA 61 FC | 	wrlong	result1, fp
0dd6c     04 4E 85 F1 | 	sub	fp, #4
0dd70                 | LR__1071
0dd70                 | ' 
0dd70                 | ' 
0dd70                 | ' print
0dd70     00 12 06 F6 | 	mov	arg01, #0
0dd74     F8 43 B1 FD | 	call	#__system___getiolock_0474
0dd78     FD 12 02 F6 | 	mov	arg01, result1
0dd7c     60 EA B0 FD | 	call	#__system___lockmem
0dd80     00 12 06 F6 | 	mov	arg01, #0
0dd84     0A 14 06 F6 | 	mov	arg02, #10
0dd88     00 16 06 F6 | 	mov	arg03, #0
0dd8c     FC F6 B0 FD | 	call	#__system___basic_print_char
0dd90     00 12 06 F6 | 	mov	arg01, #0
0dd94     D8 43 B1 FD | 	call	#__system___getiolock_0474
0dd98     FD 00 68 FC | 	wrlong	#0, result1
0dd9c     6A 00 00 FF 
0dda0     68 E4 05 F1 | 	add	objptr, ##54376
0dda4     F2 20 02 FB | 	rdlong	local02, objptr
0dda8     11 00 00 FF 
0ddac     88 E4 05 F1 | 	add	objptr, ##8840
0ddb0     F2 20 62 FC | 	wrlong	local02, objptr
0ddb4     7B 00 00 FF 
0ddb8     F0 E4 85 F1 | 	sub	objptr, ##63216
0ddbc                 | ' do 
0ddbc                 | LR__1072
0ddbc     20 4E 05 F1 | 	add	fp, #32
0ddc0     A7 12 02 F6 | 	mov	arg01, fp
0ddc4     20 4E 85 F1 | 	sub	fp, #32
0ddc8     7B 00 00 FF 
0ddcc     F0 E4 05 F1 | 	add	objptr, ##63216
0ddd0     F2 14 02 FB | 	rdlong	arg02, objptr
0ddd4     18 16 06 F6 | 	mov	arg03, #24
0ddd8     70 00 00 FF 
0dddc     30 E4 85 F1 | 	sub	objptr, ##57392
0dde0     F8 DD B0 FD | 	call	#_psram_spin2_read1
0dde4     0B 00 00 FF 
0dde8     C0 E4 85 F1 | 	sub	objptr, ##5824
0ddec                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0ddec                 | '   
0ddec                 | '   if header(0)<> $FFFFFFFF then
0ddec     20 4E 05 F1 | 	add	fp, #32
0ddf0     A7 20 02 FB | 	rdlong	local02, fp
0ddf4     20 4E 85 F1 | 	sub	fp, #32
0ddf8     FF FF 7F FF 
0ddfc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0de00     A8 00 90 AD |  if_e	jmp	#LR__1074
0de04     38 4E 05 F1 | 	add	fp, #56
0de08     3F 16 06 F6 | 	mov	arg03, #63
0de0c     28 16 62 FD | 	setq	arg03
0de10     A7 00 68 FC | 	wrlong	#0, fp
0de14     A7 12 02 F6 | 	mov	arg01, fp
0de18     10 4E 85 F1 | 	sub	fp, #16
0de1c     A7 14 02 FB | 	rdlong	arg02, fp
0de20     04 4E 05 F1 | 	add	fp, #4
0de24     A7 16 02 FB | 	rdlong	arg03, fp
0de28     2C 4E 85 F1 | 	sub	fp, #44
0de2c     0B 00 00 FF 
0de30     C0 E4 05 F1 | 	add	objptr, ##5824
0de34     A4 DD B0 FD | 	call	#_psram_spin2_read1
0de38     0B 00 00 FF 
0de3c     C0 E4 85 F1 | 	sub	objptr, ##5824
0de40                 | '     longfill(linebuf,0,64)
0de40                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0de40                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0de40     20 4E 05 F1 | 	add	fp, #32
0de44     A7 20 02 FB | 	rdlong	local02, fp
0de48     1C 4E 85 F1 | 	sub	fp, #28
0de4c     A7 1E 02 FB | 	rdlong	local01, fp
0de50     04 4E 85 F1 | 	sub	fp, #4
0de54     0F 21 52 F2 | 	cmps	local02, local01 wc
0de58     30 00 90 CD |  if_b	jmp	#LR__1073
0de5c     20 4E 05 F1 | 	add	fp, #32
0de60     A7 20 02 FB | 	rdlong	local02, fp
0de64     18 4E 85 F1 | 	sub	fp, #24
0de68     A7 16 02 FB | 	rdlong	arg03, fp
0de6c     08 4E 85 F1 | 	sub	fp, #8
0de70     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0de74     14 00 90 1D |  if_a	jmp	#LR__1073
0de78     38 4E 05 F1 | 	add	fp, #56
0de7c     A7 12 02 F6 | 	mov	arg01, fp
0de80     38 4E 85 F1 | 	sub	fp, #56
0de84                 | ' 
0de84                 | ' write(text)
0de84     1C D8 B0 FD | 	call	#_hg010b_spin2_write
0de88                 | ' crlf
0de88     78 D9 B0 FD | 	call	#_hg010b_spin2_crlf
0de8c                 | LR__1073
0de8c     34 4E 05 F1 | 	add	fp, #52
0de90     A7 20 02 FB | 	rdlong	local02, fp
0de94     34 4E 85 F1 | 	sub	fp, #52
0de98     7B 00 00 FF 
0de9c     F0 E4 05 F1 | 	add	objptr, ##63216
0dea0     F2 20 62 FC | 	wrlong	local02, objptr
0dea4     7B 00 00 FF 
0dea8     F0 E4 85 F1 | 	sub	objptr, ##63216
0deac                 | LR__1074
0deac     34 4E 05 F1 | 	add	fp, #52
0deb0     A7 20 02 FB | 	rdlong	local02, fp
0deb4     34 4E 85 F1 | 	sub	fp, #52
0deb8     FF FF 3F FF 
0debc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0dec0     20 4E 05 51 |  if_ne	add	fp, #32
0dec4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0dec8     20 4E 85 51 |  if_ne	sub	fp, #32
0decc     FF FF 7F 5F 
0ded0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0ded4     E4 FE 9F 5D |  if_ne	jmp	#LR__1072
0ded8     A7 F0 03 F6 | 	mov	ptra, fp
0dedc     B2 00 A0 FD | 	call	#popregs_
0dee0                 | _do_list_ret
0dee0     2D 00 64 FD | 	ret
0dee4                 | 
0dee4                 | ' 
0dee4                 | ' '---------------- Clear the program
0dee4                 | ' 
0dee4                 | ' sub do_new
0dee4                 | _do_new
0dee4     03 4A 05 F6 | 	mov	COUNT_, #3
0dee8     A8 00 A0 FD | 	call	#pushregs_
0deec     00 12 06 F6 | 	mov	arg01, #0
0def0     01 14 66 F6 | 	neg	arg02, #1
0def4     64 B2 B0 FD | 	call	#_pslpoke
0def8     54 00 00 FF 
0defc     EC E5 05 F1 | 	add	objptr, ##43500
0df00     F2 00 68 FC | 	wrlong	#0, objptr
0df04     15 00 00 FF 
0df08     7C E4 05 F1 | 	add	objptr, ##10876
0df0c     F2 00 68 FC | 	wrlong	#0, objptr
0df10     0F 00 00 FF 
0df14     2C E5 05 F1 | 	add	objptr, ##7980
0df18     F2 00 68 FC | 	wrlong	#0, objptr
0df1c     04 E4 05 F1 | 	add	objptr, #4
0df20     F2 00 68 FC | 	wrlong	#0, objptr
0df24     16 00 00 FF 
0df28     5C E5 85 F1 | 	sub	objptr, ##11612
0df2c     F2 00 68 FC | 	wrlong	#0, objptr
0df30     07 00 00 FF 
0df34     24 E4 05 F1 | 	add	objptr, ##3620
0df38     F2 00 68 FC | 	wrlong	#0, objptr
0df3c     07 00 00 FF 
0df40     20 E4 85 F1 | 	sub	objptr, ##3616
0df44     F2 00 68 FC | 	wrlong	#0, objptr
0df48     0F 00 00 FF 
0df4c     34 E4 05 F1 | 	add	objptr, ##7732
0df50     F2 00 68 FC | 	wrlong	#0, objptr
0df54     08 00 00 FF 
0df58     08 E4 85 F1 | 	sub	objptr, ##4104
0df5c     F2 00 68 FC | 	wrlong	#0, objptr
0df60     04 E4 05 F1 | 	add	objptr, #4
0df64     FF FF FF FF 
0df68     F2 FE 6B FC | 	wrlong	##-1, objptr
0df6c     0F 00 00 FF 
0df70     4C E5 05 F1 | 	add	objptr, ##8012
0df74     F2 00 68 FC | 	wrlong	#0, objptr
0df78                 | ' 
0df78                 | ' pslpoke(0,$FFFFFFFF)
0df78                 | ' varnum=0
0df78                 | ' programstart=0 :runptr=0 : runptr2=0
0df78                 | ' stackpointer=0
0df78                 | ' lineptr=0 
0df78                 | ' programptr=0 : stringptr=0
0df78                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0df78                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0df78     00 1E 06 F6 | 	mov	local01, #0
0df7c     07 00 00 FF 
0df80     40 E5 85 F1 | 	sub	objptr, ##3904
0df84     97 16 48 FB | 	callpa	#(@LR__1081-@LR__1080)>>2,fcache_load_ptr_
0df88                 | LR__1080
0df88     0F 21 02 F6 | 	mov	local02, local01
0df8c     02 20 66 F0 | 	shl	local02, #2
0df90     0F 21 02 F1 | 	add	local02, local01
0df94     02 20 66 F0 | 	shl	local02, #2
0df98     F2 20 02 F1 | 	add	local02, objptr
0df9c     08 20 06 F1 | 	add	local02, #8
0dfa0     FF FF FF FF 
0dfa4     10 FF 6B FC | 	wrlong	##-1, local02
0dfa8     01 1E 06 F1 | 	add	local01, #1
0dfac     81 1E 56 F2 | 	cmps	local01, #129 wc
0dfb0     D4 FF 9F CD |  if_b	jmp	#LR__1080
0dfb4                 | LR__1081
0dfb4     72 00 00 FF 
0dfb8     7C E4 85 F1 | 	sub	objptr, ##58492
0dfbc                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0dfbc     00 1E 06 F6 | 	mov	local01, #0
0dfc0                 | LR__1082
0dfc0     0F 21 02 F6 | 	mov	local02, local01
0dfc4     02 20 66 F0 | 	shl	local02, #2
0dfc8     7B 00 00 FF 
0dfcc     18 E4 05 F1 | 	add	objptr, ##63000
0dfd0     F2 20 02 F1 | 	add	local02, objptr
0dfd4     10 21 0A FB | 	rdlong	local02, local02 wz
0dfd8     7B 00 00 FF 
0dfdc     18 E4 85 F1 | 	sub	objptr, ##63000
0dfe0     34 00 90 AD |  if_e	jmp	#LR__1083
0dfe4     0F 13 02 F6 | 	mov	arg01, local01
0dfe8     00 14 06 F6 | 	mov	arg02, #0
0dfec     00 16 06 F6 | 	mov	arg03, #0
0dff0     10 C7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dff4     0F 21 02 F6 | 	mov	local02, local01
0dff8     02 20 66 F0 | 	shl	local02, #2
0dffc     7B 00 00 FF 
0e000     18 E4 05 F1 | 	add	objptr, ##63000
0e004     F2 20 02 F1 | 	add	local02, objptr
0e008     10 13 02 FB | 	rdlong	arg01, local02
0e00c     7B 00 00 FF 
0e010     18 E4 85 F1 | 	sub	objptr, ##63000
0e014     4C 27 B1 FD | 	call	#__system___gc_free
0e018                 | LR__1083
0e018     7B 00 00 FF 
0e01c     6C E4 05 F1 | 	add	objptr, ##63084
0e020     00 C0 9F FF 
0e024     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e028     04 E4 05 F1 | 	add	objptr, #4
0e02c     00 C0 9F FF 
0e030     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e034     7B 00 00 FF 
0e038     70 E4 85 F1 | 	sub	objptr, ##63088
0e03c     F2 22 02 FB | 	rdlong	local03, objptr
0e040     7B 00 00 FF 
0e044     5C E4 05 F1 | 	add	objptr, ##63068
0e048     F2 22 62 FC | 	wrlong	local03, objptr
0e04c     7B 00 00 FF 
0e050     5C E4 85 F1 | 	sub	objptr, ##63068
0e054     11 12 06 F6 | 	mov	arg01, #17
0e058     08 14 06 F6 | 	mov	arg02, #8
0e05c     10 16 06 F6 | 	mov	arg03, #16
0e060     A0 C6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e064     10 12 06 F6 | 	mov	arg01, #16
0e068     20 14 06 F6 | 	mov	arg02, #32
0e06c     20 16 06 F6 | 	mov	arg03, #32
0e070     90 C6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e074     F0 A3 B0 FD | 	call	#_init_audio
0e078     01 1E 06 F1 | 	add	local01, #1
0e07c     10 1E 56 F2 | 	cmps	local01, #16 wc
0e080     3C FF 9F CD |  if_b	jmp	#LR__1082
0e084     A7 F0 03 F6 | 	mov	ptra, fp
0e088     B2 00 A0 FD | 	call	#popregs_
0e08c                 | _do_new_ret
0e08c     2D 00 64 FD | 	ret
0e090                 | 
0e090                 | ' 
0e090                 | ' '----------------------- goto
0e090                 | ' sub do_fast_goto
0e090                 | _do_fast_goto
0e090     02 4A 05 F6 | 	mov	COUNT_, #2
0e094     A8 00 A0 FD | 	call	#pushregs_
0e098                 | _do_fast_goto_enter
0e098     6A 00 00 FF 
0e09c     64 E4 05 F1 | 	add	objptr, ##54372
0e0a0     F2 12 02 FB | 	rdlong	arg01, objptr
0e0a4     09 1F 02 F6 | 	mov	local01, arg01
0e0a8     01 1E 66 F0 | 	shl	local01, #1
0e0ac     09 1F 02 F1 | 	add	local01, arg01
0e0b0     02 1E 66 F0 | 	shl	local01, #2
0e0b4     03 00 00 FF 
0e0b8     04 E4 85 F1 | 	sub	objptr, ##1540
0e0bc     F2 1E 02 F1 | 	add	local01, objptr
0e0c0     0F 21 02 FB | 	rdlong	local02, local01
0e0c4     10 13 02 F6 | 	mov	arg01, local02
0e0c8     67 00 00 FF 
0e0cc     60 E4 85 F1 | 	sub	objptr, ##52832
0e0d0     B8 B1 B0 FD | 	call	#_pslpeek
0e0d4     FD 12 02 F6 | 	mov	arg01, result1
0e0d8                 | ' 
0e0d8                 | ' testptr=compiledline(lineptr_e).result.uresult
0e0d8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0e0d8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0e0d8     6A 00 00 FF 
0e0dc     64 E4 05 F1 | 	add	objptr, ##54372
0e0e0     F2 FA 01 FB | 	rdlong	result1, objptr
0e0e4     FD 1E 02 F6 | 	mov	local01, result1
0e0e8     01 1E 66 F0 | 	shl	local01, #1
0e0ec     FD 1E 02 F1 | 	add	local01, result1
0e0f0     02 1E 66 F0 | 	shl	local01, #2
0e0f4     03 00 00 FF 
0e0f8     04 E4 85 F1 | 	sub	objptr, ##1540
0e0fc     F2 1E 02 F1 | 	add	local01, objptr
0e100     04 1E 06 F1 | 	add	local01, #4
0e104     0F 1F 02 FB | 	rdlong	local01, local01
0e108     0F 13 0A F2 | 	cmp	arg01, local01 wz
0e10c     67 00 00 FF 
0e110     60 E4 85 F1 | 	sub	objptr, ##52832
0e114     58 00 90 5D |  if_ne	jmp	#LR__1090
0e118     79 00 00 FF 
0e11c     94 E5 05 F1 | 	add	objptr, ##62356
0e120     F2 20 62 FC | 	wrlong	local02, objptr
0e124     0F 00 00 FF 
0e128     34 E5 85 F1 | 	sub	objptr, ##7988
0e12c     F2 20 02 FB | 	rdlong	local02, objptr
0e130     01 20 86 F1 | 	sub	local02, #1
0e134     04 E4 05 F1 | 	add	objptr, #4
0e138     F2 20 62 FC | 	wrlong	local02, objptr
0e13c                 | '   runptr=testptr
0e13c                 | '   lineptr_e=lineptr-1
0e13c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0e13c     0F 00 00 FF 
0e140     54 E5 05 F1 | 	add	objptr, ##8020
0e144     F2 20 02 FB | 	rdlong	local02, objptr
0e148     79 00 00 FF 
0e14c     B8 E5 85 F1 | 	sub	objptr, ##62392
0e150     FF FF 3F FF 
0e154     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e158     79 00 00 AF 
0e15c     B8 E5 05 A1 |  if_e	add	objptr, ##62392
0e160     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e164     79 00 00 AF 
0e168     B8 E5 85 A1 |  if_e	sub	objptr, ##62392
0e16c     04 00 90 FD | 	jmp	#LR__1091
0e170                 | LR__1090
0e170     0C 00 B0 FD | 	call	#_do_find_goto
0e174                 | LR__1091
0e174     A7 F0 03 F6 | 	mov	ptra, fp
0e178     B2 00 A0 FD | 	call	#popregs_
0e17c                 | _do_fast_goto_ret
0e17c     2D 00 64 FD | 	ret
0e180                 | 
0e180                 | ' 
0e180                 | ' 
0e180                 | ' 
0e180                 | ' 
0e180                 | ' sub do_find_goto
0e180                 | _do_find_goto
0e180     03 4A 05 F6 | 	mov	COUNT_, #3
0e184     A8 00 A0 FD | 	call	#pushregs_
0e188     24 F0 07 F1 | 	add	ptra, #36
0e18c                 | _do_find_goto_enter
0e18c     6A 00 00 FF 
0e190     64 E4 05 F1 | 	add	objptr, ##54372
0e194     F2 1E 02 FB | 	rdlong	local01, objptr
0e198     0F 21 02 F6 | 	mov	local02, local01
0e19c     01 20 66 F0 | 	shl	local02, #1
0e1a0     0F 21 02 F1 | 	add	local02, local01
0e1a4     02 20 66 F0 | 	shl	local02, #2
0e1a8     03 00 00 FF 
0e1ac     04 E4 85 F1 | 	sub	objptr, ##1540
0e1b0     F2 20 02 F1 | 	add	local02, objptr
0e1b4     04 20 06 F1 | 	add	local02, #4
0e1b8     10 21 02 FB | 	rdlong	local02, local02
0e1bc     A7 20 62 FC | 	wrlong	local02, fp
0e1c0     03 00 00 FF 
0e1c4     08 E4 05 F1 | 	add	objptr, ##1544
0e1c8     F2 22 02 FB | 	rdlong	local03, objptr
0e1cc     6A 00 00 FF 
0e1d0     68 E4 85 F1 | 	sub	objptr, ##54376
0e1d4     04 4E 05 F1 | 	add	fp, #4
0e1d8     A7 22 62 FC | 	wrlong	local03, fp
0e1dc     04 4E 85 F1 | 	sub	fp, #4
0e1e0                 | ' 
0e1e0                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0e1e0                 | '  ' print "find goto"                                                                     'print gotoline 
0e1e0                 | ' gotoptr=programstart
0e1e0                 | ' do
0e1e0                 | LR__1100
0e1e0     0C 4E 05 F1 | 	add	fp, #12
0e1e4     A7 12 02 F6 | 	mov	arg01, fp
0e1e8     08 4E 85 F1 | 	sub	fp, #8
0e1ec     A7 14 02 FB | 	rdlong	arg02, fp
0e1f0     04 4E 85 F1 | 	sub	fp, #4
0e1f4     18 16 06 F6 | 	mov	arg03, #24
0e1f8     0B 00 00 FF 
0e1fc     C0 E4 05 F1 | 	add	objptr, ##5824
0e200     D8 D9 B0 FD | 	call	#_psram_spin2_read1
0e204     0B 00 00 FF 
0e208     C0 E4 85 F1 | 	sub	objptr, ##5824
0e20c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0e20c                 | '   if gotoheader(0)<>$FFFFFFFF then
0e20c     0C 4E 05 F1 | 	add	fp, #12
0e210     A7 22 02 FB | 	rdlong	local03, fp
0e214     0C 4E 85 F1 | 	sub	fp, #12
0e218     FF FF 7F FF 
0e21c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0e220     24 00 90 AD |  if_e	jmp	#LR__1101
0e224     04 4E 05 F1 | 	add	fp, #4
0e228     A7 22 02 FB | 	rdlong	local03, fp
0e22c     04 4E 05 F1 | 	add	fp, #4
0e230     A7 22 62 FC | 	wrlong	local03, fp
0e234     18 4E 05 F1 | 	add	fp, #24
0e238     A7 22 02 FB | 	rdlong	local03, fp
0e23c     1C 4E 85 F1 | 	sub	fp, #28
0e240     A7 22 62 FC | 	wrlong	local03, fp
0e244     04 4E 85 F1 | 	sub	fp, #4
0e248                 | LR__1101
0e248     20 4E 05 F1 | 	add	fp, #32
0e24c     A7 22 02 FB | 	rdlong	local03, fp
0e250     20 4E 85 F1 | 	sub	fp, #32
0e254     FF FF 3F FF 
0e258     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0e25c     0C 4E 05 51 |  if_ne	add	fp, #12
0e260     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e264     0C 4E 85 51 |  if_ne	sub	fp, #12
0e268     FF FF 7F 5F 
0e26c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e270     18 00 90 AD |  if_e	jmp	#LR__1102
0e274     0C 4E 05 F1 | 	add	fp, #12
0e278     A7 22 02 FB | 	rdlong	local03, fp
0e27c     0C 4E 85 F1 | 	sub	fp, #12
0e280     A7 20 02 FB | 	rdlong	local02, fp
0e284     10 23 0A F2 | 	cmp	local03, local02 wz
0e288     54 FF 9F 5D |  if_ne	jmp	#LR__1100
0e28c                 | LR__1102
0e28c                 | ' 
0e28c                 | ' if gotoheader(0)=gotoline then
0e28c     0C 4E 05 F1 | 	add	fp, #12
0e290     A7 22 02 FB | 	rdlong	local03, fp
0e294     0C 4E 85 F1 | 	sub	fp, #12
0e298     A7 1E 02 FB | 	rdlong	local01, fp
0e29c     0F 23 0A F2 | 	cmp	local03, local01 wz
0e2a0     D8 00 90 5D |  if_ne	jmp	#LR__1103
0e2a4     6A 00 00 FF 
0e2a8     64 E4 05 F1 | 	add	objptr, ##54372
0e2ac     F2 1E 02 FB | 	rdlong	local01, objptr
0e2b0     0F 21 02 F6 | 	mov	local02, local01
0e2b4     01 20 66 F0 | 	shl	local02, #1
0e2b8     0F 21 02 F1 | 	add	local02, local01
0e2bc     02 20 66 F0 | 	shl	local02, #2
0e2c0     03 00 00 FF 
0e2c4     04 E4 85 F1 | 	sub	objptr, ##1540
0e2c8     F2 20 02 F1 | 	add	local02, objptr
0e2cc     08 4E 05 F1 | 	add	fp, #8
0e2d0     A7 22 02 FB | 	rdlong	local03, fp
0e2d4     10 23 62 FC | 	wrlong	local03, local02
0e2d8     03 00 00 FF 
0e2dc     04 E4 05 F1 | 	add	objptr, ##1540
0e2e0     F2 1E 02 FB | 	rdlong	local01, objptr
0e2e4     0F 21 02 F6 | 	mov	local02, local01
0e2e8     01 20 66 F0 | 	shl	local02, #1
0e2ec     0F 21 02 F1 | 	add	local02, local01
0e2f0     02 20 66 F0 | 	shl	local02, #2
0e2f4     03 00 00 FF 
0e2f8     04 E4 85 F1 | 	sub	objptr, ##1540
0e2fc     F2 20 02 F1 | 	add	local02, objptr
0e300     08 20 06 F1 | 	add	local02, #8
0e304     10 9D 68 FC | 	wrlong	#78, local02
0e308     03 00 00 FF 
0e30c     04 E4 05 F1 | 	add	objptr, ##1540
0e310     F2 20 02 FB | 	rdlong	local02, objptr
0e314     10 13 02 F6 | 	mov	arg01, local02
0e318     01 12 66 F0 | 	shl	arg01, #1
0e31c     10 13 02 F1 | 	add	arg01, local02
0e320     02 12 66 F0 | 	shl	arg01, #2
0e324     03 00 00 FF 
0e328     04 E4 85 F1 | 	sub	objptr, ##1540
0e32c     F2 12 02 F1 | 	add	arg01, objptr
0e330     12 00 00 FF 
0e334     3C E5 05 F1 | 	add	objptr, ##9532
0e338     F2 14 02 FB | 	rdlong	arg02, objptr
0e33c     02 22 06 F6 | 	mov	local03, #2
0e340     10 23 02 F1 | 	add	local03, local02
0e344     14 00 00 FF 
0e348     54 E5 85 F1 | 	sub	objptr, ##10580
0e34c     F2 16 02 FB | 	rdlong	arg03, objptr
0e350     0B 23 02 FD | 	qmul	local03, arg03
0e354     08 4E 85 F1 | 	sub	fp, #8
0e358     59 00 00 FF 
0e35c     88 E5 85 F1 | 	sub	objptr, ##45960
0e360     18 22 62 FD | 	getqx	local03
0e364     11 15 02 F1 | 	add	arg02, local03
0e368     0C D9 B0 FD | 	call	#_psram_spin2_write
0e36c     0B 00 00 FF 
0e370     C0 E4 85 F1 | 	sub	objptr, ##5824
0e374     18 FD BF FD | 	call	#_do_fast_goto
0e378     08 00 90 FD | 	jmp	#LR__1104
0e37c                 | LR__1103
0e37c     26 12 06 F6 | 	mov	arg01, #38
0e380     74 AC B0 FD | 	call	#_printerror
0e384                 | LR__1104
0e384     A7 F0 03 F6 | 	mov	ptra, fp
0e388     B2 00 A0 FD | 	call	#popregs_
0e38c                 | _do_find_goto_ret
0e38c     2D 00 64 FD | 	ret
0e390                 | 
0e390                 | ' 
0e390                 | ' sub do_slow_goto
0e390                 | _do_slow_goto
0e390                 | _do_slow_goto_ret
0e390     2D 00 64 FD | 	ret
0e394                 | 
0e394                 | ' 
0e394                 | ' '----------------------- Error processing
0e394                 | ' 
0e394                 | ' sub do_error
0e394                 | _do_error
0e394     01 4A 05 F6 | 	mov	COUNT_, #1
0e398     A8 00 A0 FD | 	call	#pushregs_
0e39c     6A 00 00 FF 
0e3a0     64 E4 05 F1 | 	add	objptr, ##54372
0e3a4     F2 18 02 FB | 	rdlong	arg04, objptr
0e3a8     0C 17 02 F6 | 	mov	arg03, arg04
0e3ac     01 16 66 F0 | 	shl	arg03, #1
0e3b0     0C 17 02 F1 | 	add	arg03, arg04
0e3b4     02 16 66 F0 | 	shl	arg03, #2
0e3b8     03 00 00 FF 
0e3bc     04 E4 85 F1 | 	sub	objptr, ##1540
0e3c0     F2 16 02 F1 | 	add	arg03, objptr
0e3c4     0B 1F 02 FB | 	rdlong	local01, arg03
0e3c8                 | ' r=compiledline(lineptr_e).result.uresult
0e3c8                 | ' print "Error ";r;": ";errors$(r)
0e3c8     00 12 06 F6 | 	mov	arg01, #0
0e3cc     67 00 00 FF 
0e3d0     60 E4 85 F1 | 	sub	objptr, ##52832
0e3d4     98 3D B1 FD | 	call	#__system___getiolock_0474
0e3d8     FD 12 02 F6 | 	mov	arg01, result1
0e3dc     00 E4 B0 FD | 	call	#__system___lockmem
0e3e0     61 01 00 FF 
0e3e4     E4 15 06 F6 | 	mov	arg02, ##@LR__4948
0e3e8     00 12 06 F6 | 	mov	arg01, #0
0e3ec     00 16 06 F6 | 	mov	arg03, #0
0e3f0     F0 F0 B0 FD | 	call	#__system___basic_print_string
0e3f4     00 12 06 F6 | 	mov	arg01, #0
0e3f8     0F 15 02 F6 | 	mov	arg02, local01
0e3fc     00 16 06 F6 | 	mov	arg03, #0
0e400     0A 18 06 F6 | 	mov	arg04, #10
0e404     60 F1 B0 FD | 	call	#__system___basic_print_unsigned
0e408     61 01 00 FF 
0e40c     EB 15 06 F6 | 	mov	arg02, ##@LR__4949
0e410     00 12 06 F6 | 	mov	arg01, #0
0e414     00 16 06 F6 | 	mov	arg03, #0
0e418     C8 F0 B0 FD | 	call	#__system___basic_print_string
0e41c     02 1E 66 F0 | 	shl	local01, #2
0e420     65 00 00 FF 
0e424     60 E4 05 F1 | 	add	objptr, ##51808
0e428     F2 1E 02 F1 | 	add	local01, objptr
0e42c     0F 15 02 FB | 	rdlong	arg02, local01
0e430     00 12 06 F6 | 	mov	arg01, #0
0e434     00 16 06 F6 | 	mov	arg03, #0
0e438     65 00 00 FF 
0e43c     60 E4 85 F1 | 	sub	objptr, ##51808
0e440     A0 F0 B0 FD | 	call	#__system___basic_print_string
0e444     00 12 06 F6 | 	mov	arg01, #0
0e448     0A 14 06 F6 | 	mov	arg02, #10
0e44c     00 16 06 F6 | 	mov	arg03, #0
0e450     38 F0 B0 FD | 	call	#__system___basic_print_char
0e454     00 12 06 F6 | 	mov	arg01, #0
0e458     14 3D B1 FD | 	call	#__system___getiolock_0474
0e45c     FD 00 68 FC | 	wrlong	#0, result1
0e460     A7 F0 03 F6 | 	mov	ptra, fp
0e464     B2 00 A0 FD | 	call	#popregs_
0e468                 | _do_error_ret
0e468     2D 00 64 FD | 	ret
0e46c                 | 
0e46c                 | ' 
0e46c                 | ' 
0e46c                 | ' '------------------ Assigning to a variable  
0e46c                 | ' 
0e46c                 | ' function  convertstring(psaddr as ulong) as string
0e46c                 | _convertstring
0e46c     04 4A 05 F6 | 	mov	COUNT_, #4
0e470     A8 00 A0 FD | 	call	#pushregs_
0e474     09 1F 02 F6 | 	mov	local01, arg01
0e478     10 AE B0 FD | 	call	#_pslpeek
0e47c     FD 20 02 F6 | 	mov	local02, result1
0e480     61 01 00 FF 
0e484     EE 23 06 F6 | 	mov	local03, ##@LR__4950
0e488                 | ' 'print "in convertstring: psaddr=";psaddr
0e488                 | ' l=pslpeek(psaddr)
0e488                 | ' 'print "in convertstring: len=";l
0e488                 | ' s="" 
0e488                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0e488     01 24 06 F6 | 	mov	local04, #1
0e48c     01 20 06 F1 | 	add	local02, #1
0e490                 | LR__1110
0e490     10 25 52 F2 | 	cmps	local04, local02 wc
0e494     30 00 90 3D |  if_ae	jmp	#LR__1111
0e498     0F 13 02 F6 | 	mov	arg01, local01
0e49c     03 12 06 F1 | 	add	arg01, #3
0e4a0     12 13 02 F1 | 	add	arg01, local04
0e4a4     8C AD B0 FD | 	call	#_pspeek
0e4a8     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0e4ac     38 05 B1 FD | 	call	#__system__Chr_S
0e4b0     FD 14 02 F6 | 	mov	arg02, result1
0e4b4     11 13 02 F6 | 	mov	arg01, local03
0e4b8     80 E3 B0 FD | 	call	#__system___string_concat
0e4bc     FD 22 02 F6 | 	mov	local03, result1
0e4c0     01 24 06 F1 | 	add	local04, #1
0e4c4     C8 FF 9F FD | 	jmp	#LR__1110
0e4c8                 | LR__1111
0e4c8                 | ' 'print "in convertstring: str=";s
0e4c8                 | ' return s
0e4c8     11 FB 01 F6 | 	mov	result1, local03
0e4cc     A7 F0 03 F6 | 	mov	ptra, fp
0e4d0     B2 00 A0 FD | 	call	#popregs_
0e4d4                 | _convertstring_ret
0e4d4     2D 00 64 FD | 	ret
0e4d8                 | 
0e4d8                 | ' 
0e4d8                 | ' sub do_assign
0e4d8                 | _do_assign
0e4d8     05 4A 05 F6 | 	mov	COUNT_, #5
0e4dc     A8 00 A0 FD | 	call	#pushregs_
0e4e0     44 F0 07 F1 | 	add	ptra, #68
0e4e4     6A 00 00 FF 
0e4e8     64 E4 05 F1 | 	add	objptr, ##54372
0e4ec     F2 16 02 FB | 	rdlong	arg03, objptr
0e4f0     0B 15 02 F6 | 	mov	arg02, arg03
0e4f4     01 14 66 F0 | 	shl	arg02, #1
0e4f8     0B 15 02 F1 | 	add	arg02, arg03
0e4fc     02 14 66 F0 | 	shl	arg02, #2
0e500     03 00 00 FF 
0e504     04 E4 85 F1 | 	sub	objptr, ##1540
0e508     F2 14 02 F1 | 	add	arg02, objptr
0e50c     0A 15 02 FB | 	rdlong	arg02, arg02
0e510     18 4E 05 F1 | 	add	fp, #24
0e514     A7 14 62 FC | 	wrlong	arg02, fp
0e518                 | ' 
0e518                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0e518                 | ' 
0e518                 | ' if variables(varnum).vartype<array_no_type then 
0e518     18 4E 85 F1 | 	sub	fp, #24
0e51c     04 14 66 F0 | 	shl	arg02, #4
0e520     32 00 00 FF 
0e524     74 E4 85 F1 | 	sub	objptr, ##25716
0e528     F2 14 02 F1 | 	add	arg02, objptr
0e52c     0C 14 06 F1 | 	add	arg02, #12
0e530     0A 17 02 FB | 	rdlong	arg03, arg02
0e534     00 17 16 F2 | 	cmp	arg03, #256 wc
0e538     34 00 00 FF 
0e53c     EC E5 85 F1 | 	sub	objptr, ##27116
0e540     18 01 90 3D |  if_ae	jmp	#LR__1120
0e544     98 BC BF FD | 	call	#_pop
0e548     A7 FA 61 FC | 	wrlong	result1, fp
0e54c     04 4E 05 F1 | 	add	fp, #4
0e550     A7 FC 61 FC | 	wrlong	result2, fp
0e554     04 4E 05 F1 | 	add	fp, #4
0e558     A7 FE 61 FC | 	wrlong	result3, fp
0e55c     08 4E 85 F1 | 	sub	fp, #8
0e560     A7 16 02 FB | 	rdlong	arg03, fp
0e564     04 4E 05 F1 | 	add	fp, #4
0e568     A7 14 02 FB | 	rdlong	arg02, fp
0e56c     14 4E 05 F1 | 	add	fp, #20
0e570     A7 12 02 FB | 	rdlong	arg01, fp
0e574     04 12 66 F0 | 	shl	arg01, #4
0e578     34 00 00 FF 
0e57c     EC E5 05 F1 | 	add	objptr, ##27116
0e580     F2 12 02 F1 | 	add	arg01, objptr
0e584     04 12 06 F1 | 	add	arg01, #4
0e588     09 17 62 FC | 	wrlong	arg03, arg01
0e58c     A7 16 02 FB | 	rdlong	arg03, fp
0e590     04 16 66 F0 | 	shl	arg03, #4
0e594     F2 16 02 F1 | 	add	arg03, objptr
0e598     08 16 06 F1 | 	add	arg03, #8
0e59c     0B 15 62 FC | 	wrlong	arg02, arg03
0e5a0     A7 16 02 FB | 	rdlong	arg03, fp
0e5a4     04 16 66 F0 | 	shl	arg03, #4
0e5a8     F2 16 02 F1 | 	add	arg03, objptr
0e5ac     10 4E 85 F1 | 	sub	fp, #16
0e5b0     A7 14 02 FB | 	rdlong	arg02, fp
0e5b4     0C 16 06 F1 | 	add	arg03, #12
0e5b8     0B 15 62 FC | 	wrlong	arg02, arg03
0e5bc                 | '   t1=pop() 
0e5bc                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0e5bc                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0e5bc                 | '   if variables(varnum).vartype<>result_string2 then return
0e5bc     10 4E 05 F1 | 	add	fp, #16
0e5c0     A7 16 02 FB | 	rdlong	arg03, fp
0e5c4     18 4E 85 F1 | 	sub	fp, #24
0e5c8     04 16 66 F0 | 	shl	arg03, #4
0e5cc     F2 16 02 F1 | 	add	arg03, objptr
0e5d0     0C 16 06 F1 | 	add	arg03, #12
0e5d4     0B 17 02 FB | 	rdlong	arg03, arg03
0e5d8     2B 16 0E F2 | 	cmp	arg03, #43 wz
0e5dc     34 00 00 FF 
0e5e0     EC E5 85 F1 | 	sub	objptr, ##27116
0e5e4     E4 04 90 5D |  if_ne	jmp	#LR__1143
0e5e8     18 4E 05 F1 | 	add	fp, #24
0e5ec     A7 16 02 FB | 	rdlong	arg03, fp
0e5f0     0B 1F 02 F6 | 	mov	local01, arg03
0e5f4     04 1E 66 F0 | 	shl	local01, #4
0e5f8     34 00 00 FF 
0e5fc     EC E5 05 F1 | 	add	objptr, ##27116
0e600     F2 1E 02 F1 | 	add	local01, objptr
0e604     18 4E 85 F1 | 	sub	fp, #24
0e608     04 16 66 F0 | 	shl	arg03, #4
0e60c     F2 16 02 F1 | 	add	arg03, objptr
0e610     04 16 06 F1 | 	add	arg03, #4
0e614     0B 13 02 FB | 	rdlong	arg01, arg03
0e618     34 00 00 FF 
0e61c     EC E5 85 F1 | 	sub	objptr, ##27116
0e620     48 FE BF FD | 	call	#_convertstring
0e624     04 1E 06 F1 | 	add	local01, #4
0e628     0F FB 61 FC | 	wrlong	result1, local01
0e62c     18 4E 05 F1 | 	add	fp, #24
0e630     A7 1E 02 FB | 	rdlong	local01, fp
0e634     18 4E 85 F1 | 	sub	fp, #24
0e638     04 1E 66 F0 | 	shl	local01, #4
0e63c     34 00 00 FF 
0e640     EC E5 05 F1 | 	add	objptr, ##27116
0e644     F2 1E 02 F1 | 	add	local01, objptr
0e648     0C 1E 06 F1 | 	add	local01, #12
0e64c     0F 3F 68 FC | 	wrlong	#31, local01
0e650                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0e650                 | '   variables(varnum).vartype=result_string
0e650                 | '   return
0e650     34 00 00 FF 
0e654     EC E5 85 F1 | 	sub	objptr, ##27116
0e658     70 04 90 FD | 	jmp	#LR__1143
0e65c                 | LR__1120
0e65c                 | ' for i=0 to 2 : arrid(i)=0 : next i
0e65c     1C 4E 05 F1 | 	add	fp, #28
0e660     A7 00 68 FC | 	wrlong	#0, fp
0e664     97 16 48 FB | 	callpa	#(@LR__1122-@LR__1121)>>2,fcache_load_ptr_
0e668                 | LR__1121
0e668     A7 1E 02 FB | 	rdlong	local01, fp
0e66c     02 1E 66 F0 | 	shl	local01, #2
0e670     18 4E 05 F1 | 	add	fp, #24
0e674     A7 1E 02 F1 | 	add	local01, fp
0e678     0F 01 68 FC | 	wrlong	#0, local01
0e67c     18 4E 85 F1 | 	sub	fp, #24
0e680     A7 1E 02 FB | 	rdlong	local01, fp
0e684     01 1E 06 F1 | 	add	local01, #1
0e688     A7 1E 62 FC | 	wrlong	local01, fp
0e68c     03 1E 16 F2 | 	cmp	local01, #3 wc
0e690     D4 FF 9F CD |  if_b	jmp	#LR__1121
0e694                 | LR__1122
0e694     6A 00 00 FF 
0e698     64 E4 05 F1 | 	add	objptr, ##54372
0e69c     F2 16 02 FB | 	rdlong	arg03, objptr
0e6a0     0B 1F 02 F6 | 	mov	local01, arg03
0e6a4     01 1E 66 F0 | 	shl	local01, #1
0e6a8     0B 1F 02 F1 | 	add	local01, arg03
0e6ac     02 1E 66 F0 | 	shl	local01, #2
0e6b0     03 00 00 FF 
0e6b4     04 E4 85 F1 | 	sub	objptr, ##1540
0e6b8     F2 1E 02 F1 | 	add	local01, objptr
0e6bc     04 1E 06 F1 | 	add	local01, #4
0e6c0     0F 21 02 FB | 	rdlong	local02, local01
0e6c4     04 4E 05 F1 | 	add	fp, #4
0e6c8     A7 20 62 FC | 	wrlong	local02, fp
0e6cc     20 4E 85 F1 | 	sub	fp, #32
0e6d0     67 00 00 FF 
0e6d4     60 E4 85 F1 | 	sub	objptr, ##52832
0e6d8     04 BB BF FD | 	call	#_pop
0e6dc     A7 FA 61 FC | 	wrlong	result1, fp
0e6e0     04 4E 05 F1 | 	add	fp, #4
0e6e4     A7 FC 61 FC | 	wrlong	result2, fp
0e6e8     04 4E 05 F1 | 	add	fp, #4
0e6ec     A7 FE 61 FC | 	wrlong	result3, fp
0e6f0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0e6f0                 | ' t1=pop() ' var value
0e6f0                 | ' if numpar>0 then
0e6f0     18 4E 05 F1 | 	add	fp, #24
0e6f4     A7 22 02 FB | 	rdlong	local03, fp
0e6f8     20 4E 85 F1 | 	sub	fp, #32
0e6fc     01 22 16 F2 | 	cmp	local03, #1 wc
0e700     78 00 90 CD |  if_b	jmp	#LR__1125
0e704                 | '   for i=numpar to 1 step -1
0e704     20 4E 05 F1 | 	add	fp, #32
0e708     A7 24 0A FB | 	rdlong	local04, fp wz
0e70c     04 4E 85 F1 | 	sub	fp, #4
0e710     A7 24 62 FC | 	wrlong	local04, fp
0e714     1C 4E 85 F1 | 	sub	fp, #28
0e718     60 00 90 AD |  if_e	jmp	#LR__1124
0e71c                 | LR__1123
0e71c     C0 BA BF FD | 	call	#_pop
0e720     0C 4E 05 F1 | 	add	fp, #12
0e724     A7 FA 61 FC | 	wrlong	result1, fp
0e728     04 4E 05 F1 | 	add	fp, #4
0e72c     A7 FC 61 FC | 	wrlong	result2, fp
0e730     04 4E 05 F1 | 	add	fp, #4
0e734     A7 FE 61 FC | 	wrlong	result3, fp
0e738     08 4E 05 F1 | 	add	fp, #8
0e73c     A7 22 02 FB | 	rdlong	local03, fp
0e740     01 22 86 F1 | 	sub	local03, #1
0e744     02 22 66 F0 | 	shl	local03, #2
0e748     18 4E 05 F1 | 	add	fp, #24
0e74c     A7 22 02 F1 | 	add	local03, fp
0e750     28 4E 85 F1 | 	sub	fp, #40
0e754     A7 12 02 F6 | 	mov	arg01, fp
0e758     0C 4E 85 F1 | 	sub	fp, #12
0e75c     BC 46 B0 FD | 	call	#_converttoint
0e760     11 FB 61 FC | 	wrlong	result1, local03
0e764     1C 4E 05 F1 | 	add	fp, #28
0e768     A7 24 02 FB | 	rdlong	local04, fp
0e76c     01 24 8E F1 | 	sub	local04, #1 wz
0e770     A7 24 62 FC | 	wrlong	local04, fp
0e774     1C 4E 85 F1 | 	sub	fp, #28
0e778     A0 FF 9F 5D |  if_ne	jmp	#LR__1123
0e77c                 | LR__1124
0e77c                 | LR__1125
0e77c     18 4E 05 F1 | 	add	fp, #24
0e780     A7 1E 02 FB | 	rdlong	local01, fp
0e784     04 1E 66 F0 | 	shl	local01, #4
0e788     34 00 00 FF 
0e78c     EC E5 05 F1 | 	add	objptr, ##27116
0e790     F2 1E 02 F1 | 	add	local01, objptr
0e794     04 1E 06 F1 | 	add	local01, #4
0e798     0F 13 02 FB | 	rdlong	arg01, local01
0e79c     0C 4E 05 F1 | 	add	fp, #12
0e7a0     A7 12 62 FC | 	wrlong	arg01, fp
0e7a4     24 4E 85 F1 | 	sub	fp, #36
0e7a8     34 00 00 FF 
0e7ac     EC E5 85 F1 | 	sub	objptr, ##27116
0e7b0     D8 AA B0 FD | 	call	#_pslpeek
0e7b4     FD 24 32 F9 | 	getword	local04, result1, #0
0e7b8     28 4E 05 F1 | 	add	fp, #40
0e7bc     A7 24 62 FC | 	wrlong	local04, fp
0e7c0     04 4E 85 F1 | 	sub	fp, #4
0e7c4     A7 12 02 FB | 	rdlong	arg01, fp
0e7c8     24 4E 85 F1 | 	sub	fp, #36
0e7cc     02 12 06 F1 | 	add	arg01, #2
0e7d0     60 AA B0 FD | 	call	#_pspeek
0e7d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e7d8     2C 4E 05 F1 | 	add	fp, #44
0e7dc     A7 FA 61 FC | 	wrlong	result1, fp
0e7e0                 | ' esize=pspeek(arrptr+2)
0e7e0                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0e7e0     08 4E 85 F1 | 	sub	fp, #8
0e7e4     A7 12 02 FB | 	rdlong	arg01, fp
0e7e8     24 4E 85 F1 | 	sub	fp, #36
0e7ec     04 12 06 F1 | 	add	arg01, #4
0e7f0     98 AA B0 FD | 	call	#_pslpeek
0e7f4     FD 24 02 F6 | 	mov	local04, result1
0e7f8     34 4E 05 F1 | 	add	fp, #52
0e7fc     A7 1E 02 FB | 	rdlong	local01, fp
0e800     34 4E 85 F1 | 	sub	fp, #52
0e804     12 1F 12 F2 | 	cmp	local01, local04 wc
0e808     54 00 90 3D |  if_ae	jmp	#LR__1126
0e80c     24 4E 05 F1 | 	add	fp, #36
0e810     A7 12 02 FB | 	rdlong	arg01, fp
0e814     24 4E 85 F1 | 	sub	fp, #36
0e818     08 12 06 F1 | 	add	arg01, #8
0e81c     6C AA B0 FD | 	call	#_pslpeek
0e820     FD 1E 02 F6 | 	mov	local01, result1
0e824     38 4E 05 F1 | 	add	fp, #56
0e828     A7 24 02 FB | 	rdlong	local04, fp
0e82c     38 4E 85 F1 | 	sub	fp, #56
0e830     0F 25 12 F2 | 	cmp	local04, local01 wc
0e834     28 00 90 3D |  if_ae	jmp	#LR__1126
0e838     24 4E 05 F1 | 	add	fp, #36
0e83c     A7 12 02 FB | 	rdlong	arg01, fp
0e840     24 4E 85 F1 | 	sub	fp, #36
0e844     0C 12 06 F1 | 	add	arg01, #12
0e848     40 AA B0 FD | 	call	#_pslpeek
0e84c     3C 4E 05 F1 | 	add	fp, #60
0e850     A7 24 02 FB | 	rdlong	local04, fp
0e854     3C 4E 85 F1 | 	sub	fp, #60
0e858     FD 24 12 F2 | 	cmp	local04, result1 wc
0e85c     0C 00 90 CD |  if_b	jmp	#LR__1127
0e860                 | LR__1126
0e860     31 12 06 F6 | 	mov	arg01, #49
0e864     90 A7 B0 FD | 	call	#_printerror
0e868     60 02 90 FD | 	jmp	#LR__1143
0e86c                 | LR__1127
0e86c     24 4E 05 F1 | 	add	fp, #36
0e870     A7 12 02 FB | 	rdlong	arg01, fp
0e874     09 25 02 F6 | 	mov	local04, arg01
0e878     10 24 06 F1 | 	add	local04, #16
0e87c     24 4E 85 F1 | 	sub	fp, #36
0e880     04 12 06 F1 | 	add	arg01, #4
0e884     04 AA B0 FD | 	call	#_pslpeek
0e888     FD 1E 02 F6 | 	mov	local01, result1
0e88c     38 4E 05 F1 | 	add	fp, #56
0e890     A7 20 02 FB | 	rdlong	local02, fp
0e894     10 1F 02 FD | 	qmul	local01, local02
0e898     04 4E 85 F1 | 	sub	fp, #4
0e89c     A7 22 02 FB | 	rdlong	local03, fp
0e8a0     10 4E 85 F1 | 	sub	fp, #16
0e8a4     A7 12 02 FB | 	rdlong	arg01, fp
0e8a8     24 4E 85 F1 | 	sub	fp, #36
0e8ac     08 12 06 F1 | 	add	arg01, #8
0e8b0     18 20 62 FD | 	getqx	local02
0e8b4     10 23 02 F1 | 	add	local03, local02
0e8b8     D0 A9 B0 FD | 	call	#_pslpeek
0e8bc     FD 20 02 F6 | 	mov	local02, result1
0e8c0     24 4E 05 F1 | 	add	fp, #36
0e8c4     A7 12 02 FB | 	rdlong	arg01, fp
0e8c8     24 4E 85 F1 | 	sub	fp, #36
0e8cc     04 12 06 F1 | 	add	arg01, #4
0e8d0     B8 A9 B0 FD | 	call	#_pslpeek
0e8d4     FD 20 02 FD | 	qmul	local02, result1
0e8d8     3C 4E 05 F1 | 	add	fp, #60
0e8dc     A7 20 02 FB | 	rdlong	local02, fp
0e8e0     18 1E 62 FD | 	getqx	local01
0e8e4     10 1F 02 FD | 	qmul	local01, local02
0e8e8     10 4E 85 F1 | 	sub	fp, #16
0e8ec     A7 20 02 FB | 	rdlong	local02, fp
0e8f0     18 1E 62 FD | 	getqx	local01
0e8f4     0F 23 02 F1 | 	add	local03, local01
0e8f8     11 21 02 FD | 	qmul	local02, local03
0e8fc     04 4E 05 F1 | 	add	fp, #4
0e900                 | ' 
0e900                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0e900                 | ' select case arrtype
0e900     18 22 62 FD | 	getqx	local03
0e904     11 25 02 F1 | 	add	local04, local03
0e908     A7 24 62 FC | 	wrlong	local04, fp
0e90c     08 4E 85 F1 | 	sub	fp, #8
0e910     A7 26 02 FB | 	rdlong	local05, fp
0e914     28 4E 85 F1 | 	sub	fp, #40
0e918     00 27 86 F1 | 	sub	local05, #256
0e91c     0C 26 26 F3 | 	fle	local05, #12
0e920     30 26 62 FD | 	jmprel	local05
0e924                 | LR__1128
0e924     30 00 90 FD | 	jmp	#LR__1129
0e928     58 00 90 FD | 	jmp	#LR__1130
0e92c     6C 00 90 FD | 	jmp	#LR__1131
0e930     80 00 90 FD | 	jmp	#LR__1132
0e934     B0 00 90 FD | 	jmp	#LR__1133
0e938     E0 00 90 FD | 	jmp	#LR__1134
0e93c     F4 00 90 FD | 	jmp	#LR__1135
0e940     08 01 90 FD | 	jmp	#LR__1136
0e944     1C 01 90 FD | 	jmp	#LR__1137
0e948     30 01 90 FD | 	jmp	#LR__1138
0e94c     44 01 90 FD | 	jmp	#LR__1139
0e950     58 01 90 FD | 	jmp	#LR__1140
0e954     6C 01 90 FD | 	jmp	#LR__1141
0e958                 | LR__1129
0e958     A7 12 02 F6 | 	mov	arg01, fp
0e95c     30 4E 05 F1 | 	add	fp, #48
0e960     A7 14 02 FB | 	rdlong	arg02, fp
0e964     30 4E 85 F1 | 	sub	fp, #48
0e968     0C 16 06 F6 | 	mov	arg03, #12
0e96c     0B 00 00 FF 
0e970     C0 E4 05 F1 | 	add	objptr, ##5824
0e974     00 D3 B0 FD | 	call	#_psram_spin2_write
0e978     0B 00 00 FF 
0e97c     C0 E4 85 F1 | 	sub	objptr, ##5824
0e980     48 01 90 FD | 	jmp	#LR__1142
0e984                 | LR__1130
0e984     30 4E 05 F1 | 	add	fp, #48
0e988     A7 12 02 FB | 	rdlong	arg01, fp
0e98c     30 4E 85 F1 | 	sub	fp, #48
0e990     A7 14 02 FB | 	rdlong	arg02, fp
0e994     54 A8 B0 FD | 	call	#_pspoke
0e998     30 01 90 FD | 	jmp	#LR__1142
0e99c                 | LR__1131
0e99c     30 4E 05 F1 | 	add	fp, #48
0e9a0     A7 12 02 FB | 	rdlong	arg01, fp
0e9a4     30 4E 85 F1 | 	sub	fp, #48
0e9a8     A7 14 02 FB | 	rdlong	arg02, fp
0e9ac     3C A8 B0 FD | 	call	#_pspoke
0e9b0     18 01 90 FD | 	jmp	#LR__1142
0e9b4                 | LR__1132
0e9b4     30 4E 05 F1 | 	add	fp, #48
0e9b8     A7 12 02 FB | 	rdlong	arg01, fp
0e9bc     30 4E 85 F1 | 	sub	fp, #48
0e9c0     A7 14 02 FB | 	rdlong	arg02, fp
0e9c4     24 A8 B0 FD | 	call	#_pspoke
0e9c8     30 4E 05 F1 | 	add	fp, #48
0e9cc     A7 12 02 FB | 	rdlong	arg01, fp
0e9d0     30 4E 85 F1 | 	sub	fp, #48
0e9d4     01 12 06 F1 | 	add	arg01, #1
0e9d8     A7 14 02 FB | 	rdlong	arg02, fp
0e9dc     08 14 46 F0 | 	shr	arg02, #8
0e9e0     08 A8 B0 FD | 	call	#_pspoke
0e9e4     E4 00 90 FD | 	jmp	#LR__1142
0e9e8                 | LR__1133
0e9e8     30 4E 05 F1 | 	add	fp, #48
0e9ec     A7 12 02 FB | 	rdlong	arg01, fp
0e9f0     30 4E 85 F1 | 	sub	fp, #48
0e9f4     A7 14 02 FB | 	rdlong	arg02, fp
0e9f8     F0 A7 B0 FD | 	call	#_pspoke
0e9fc     30 4E 05 F1 | 	add	fp, #48
0ea00     A7 12 02 FB | 	rdlong	arg01, fp
0ea04     30 4E 85 F1 | 	sub	fp, #48
0ea08     01 12 06 F1 | 	add	arg01, #1
0ea0c     A7 14 02 FB | 	rdlong	arg02, fp
0ea10     08 14 46 F0 | 	shr	arg02, #8
0ea14     D4 A7 B0 FD | 	call	#_pspoke
0ea18     B0 00 90 FD | 	jmp	#LR__1142
0ea1c                 | LR__1134
0ea1c     30 4E 05 F1 | 	add	fp, #48
0ea20     A7 12 02 FB | 	rdlong	arg01, fp
0ea24     30 4E 85 F1 | 	sub	fp, #48
0ea28     A7 14 02 FB | 	rdlong	arg02, fp
0ea2c     2C A7 B0 FD | 	call	#_pslpoke
0ea30     98 00 90 FD | 	jmp	#LR__1142
0ea34                 | LR__1135
0ea34     30 4E 05 F1 | 	add	fp, #48
0ea38     A7 12 02 FB | 	rdlong	arg01, fp
0ea3c     30 4E 85 F1 | 	sub	fp, #48
0ea40     A7 14 02 FB | 	rdlong	arg02, fp
0ea44     14 A7 B0 FD | 	call	#_pslpoke
0ea48     80 00 90 FD | 	jmp	#LR__1142
0ea4c                 | LR__1136
0ea4c     30 4E 05 F1 | 	add	fp, #48
0ea50     A7 12 02 FB | 	rdlong	arg01, fp
0ea54     30 4E 85 F1 | 	sub	fp, #48
0ea58     A7 14 02 FB | 	rdlong	arg02, fp
0ea5c     FC A6 B0 FD | 	call	#_pslpoke
0ea60     68 00 90 FD | 	jmp	#LR__1142
0ea64                 | LR__1137
0ea64     30 4E 05 F1 | 	add	fp, #48
0ea68     A7 12 02 FB | 	rdlong	arg01, fp
0ea6c     30 4E 85 F1 | 	sub	fp, #48
0ea70     A7 14 02 FB | 	rdlong	arg02, fp
0ea74     E4 A6 B0 FD | 	call	#_pslpoke
0ea78     50 00 90 FD | 	jmp	#LR__1142
0ea7c                 | LR__1138
0ea7c     30 4E 05 F1 | 	add	fp, #48
0ea80     A7 12 02 FB | 	rdlong	arg01, fp
0ea84     30 4E 85 F1 | 	sub	fp, #48
0ea88     A7 14 02 FB | 	rdlong	arg02, fp
0ea8c     CC A6 B0 FD | 	call	#_pslpoke
0ea90     38 00 90 FD | 	jmp	#LR__1142
0ea94                 | LR__1139
0ea94     30 4E 05 F1 | 	add	fp, #48
0ea98     A7 12 02 FB | 	rdlong	arg01, fp
0ea9c     30 4E 85 F1 | 	sub	fp, #48
0eaa0     A7 14 02 FB | 	rdlong	arg02, fp
0eaa4     B4 A6 B0 FD | 	call	#_pslpoke
0eaa8     20 00 90 FD | 	jmp	#LR__1142
0eaac                 | LR__1140
0eaac     30 4E 05 F1 | 	add	fp, #48
0eab0     A7 12 02 FB | 	rdlong	arg01, fp
0eab4     30 4E 85 F1 | 	sub	fp, #48
0eab8     A7 14 02 FB | 	rdlong	arg02, fp
0eabc     9C A6 B0 FD | 	call	#_pslpoke
0eac0     08 00 90 FD | 	jmp	#LR__1142
0eac4                 | LR__1141
0eac4     2F 12 06 F6 | 	mov	arg01, #47
0eac8     2C A5 B0 FD | 	call	#_printerror
0eacc                 | LR__1142
0eacc                 | LR__1143
0eacc     A7 F0 03 F6 | 	mov	ptra, fp
0ead0     B2 00 A0 FD | 	call	#popregs_
0ead4                 | _do_assign_ret
0ead4     2D 00 64 FD | 	ret
0ead8                 | 
0ead8                 | ' 
0ead8                 | ' 
0ead8                 | ' ' --------------------- Read a variable and push to the stack
0ead8                 | ' 
0ead8                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0ead8                 | ' 
0ead8                 | ' sub do_getvar
0ead8                 | _do_getvar
0ead8     04 4A 05 F6 | 	mov	COUNT_, #4
0eadc     A8 00 A0 FD | 	call	#pushregs_
0eae0     3C F0 07 F1 | 	add	ptra, #60
0eae4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0eae4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0eae4     6A 00 00 FF 
0eae8     64 E4 05 F1 | 	add	objptr, ##54372
0eaec     F2 1E 02 FB | 	rdlong	local01, objptr
0eaf0     0F 17 02 F6 | 	mov	arg03, local01
0eaf4     01 16 66 F0 | 	shl	arg03, #1
0eaf8     0F 17 02 F1 | 	add	arg03, local01
0eafc     02 16 66 F0 | 	shl	arg03, #2
0eb00     03 00 00 FF 
0eb04     04 E4 85 F1 | 	sub	objptr, ##1540
0eb08     F2 16 02 F1 | 	add	arg03, objptr
0eb0c     04 16 06 F1 | 	add	arg03, #4
0eb10     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0eb14     67 00 00 FF 
0eb18     60 E4 85 F1 | 	sub	objptr, ##52832
0eb1c     C4 00 90 5D |  if_ne	jmp	#LR__1151
0eb20     6A 00 00 FF 
0eb24     64 E4 05 F1 | 	add	objptr, ##54372
0eb28     F2 1E 02 FB | 	rdlong	local01, objptr
0eb2c     0F 13 02 F6 | 	mov	arg01, local01
0eb30     01 12 66 F0 | 	shl	arg01, #1
0eb34     0F 13 02 F1 | 	add	arg01, local01
0eb38     02 12 66 F0 | 	shl	arg01, #2
0eb3c     03 00 00 FF 
0eb40     04 E4 85 F1 | 	sub	objptr, ##1540
0eb44     F2 12 02 F1 | 	add	arg01, objptr
0eb48     09 1F 02 FB | 	rdlong	local01, arg01
0eb4c     04 1E 66 F0 | 	shl	local01, #4
0eb50     32 00 00 FF 
0eb54     74 E4 85 F1 | 	sub	objptr, ##25716
0eb58     F2 1E 02 F1 | 	add	local01, objptr
0eb5c     04 1E 06 F1 | 	add	local01, #4
0eb60     0F 13 02 FB | 	rdlong	arg01, local01
0eb64     04 1E 06 F1 | 	add	local01, #4
0eb68     0F 1F 02 FB | 	rdlong	local01, local01
0eb6c     A7 12 62 FC | 	wrlong	arg01, fp
0eb70     04 4E 05 F1 | 	add	fp, #4
0eb74     A7 1E 62 FC | 	wrlong	local01, fp
0eb78     35 00 00 FF 
0eb7c     78 E4 05 F1 | 	add	objptr, ##27256
0eb80     F2 1E 02 FB | 	rdlong	local01, objptr
0eb84     0F 13 02 F6 | 	mov	arg01, local01
0eb88     01 12 66 F0 | 	shl	arg01, #1
0eb8c     0F 13 02 F1 | 	add	arg01, local01
0eb90     02 12 66 F0 | 	shl	arg01, #2
0eb94     03 00 00 FF 
0eb98     04 E4 85 F1 | 	sub	objptr, ##1540
0eb9c     F2 12 02 F1 | 	add	arg01, objptr
0eba0     09 1F 02 FB | 	rdlong	local01, arg01
0eba4     04 1E 66 F0 | 	shl	local01, #4
0eba8     32 00 00 FF 
0ebac     74 E4 85 F1 | 	sub	objptr, ##25716
0ebb0     F2 1E 02 F1 | 	add	local01, objptr
0ebb4     0C 1E 06 F1 | 	add	local01, #12
0ebb8     0F 1F 02 FB | 	rdlong	local01, local01
0ebbc     04 4E 05 F1 | 	add	fp, #4
0ebc0     A7 1E 62 FC | 	wrlong	local01, fp
0ebc4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0ebc4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ebc4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0ebc4     08 4E 85 F1 | 	sub	fp, #8
0ebc8     00 1F 16 F2 | 	cmp	local01, #256 wc
0ebcc     34 00 00 FF 
0ebd0     EC E5 85 F1 | 	sub	objptr, ##27116
0ebd4     0C 00 90 3D |  if_ae	jmp	#LR__1150
0ebd8     A7 12 02 F6 | 	mov	arg01, fp
0ebdc     98 B6 BF FD | 	call	#_push
0ebe0     A0 04 90 FD | 	jmp	#LR__1172
0ebe4                 | LR__1150
0ebe4                 | LR__1151
0ebe4     6A 00 00 FF 
0ebe8     64 E4 05 F1 | 	add	objptr, ##54372
0ebec     F2 16 02 FB | 	rdlong	arg03, objptr
0ebf0     0B 15 02 F6 | 	mov	arg02, arg03
0ebf4     01 14 66 F0 | 	shl	arg02, #1
0ebf8     0B 15 02 F1 | 	add	arg02, arg03
0ebfc     02 14 66 F0 | 	shl	arg02, #2
0ec00     03 00 00 FF 
0ec04     04 E4 85 F1 | 	sub	objptr, ##1540
0ec08     F2 14 02 F1 | 	add	arg02, objptr
0ec0c     0A 17 02 FB | 	rdlong	arg03, arg02
0ec10     04 16 66 F0 | 	shl	arg03, #4
0ec14     32 00 00 FF 
0ec18     74 E4 85 F1 | 	sub	objptr, ##25716
0ec1c     F2 16 02 F1 | 	add	arg03, objptr
0ec20     04 16 06 F1 | 	add	arg03, #4
0ec24     0B 13 02 FB | 	rdlong	arg01, arg03
0ec28     0C 4E 05 F1 | 	add	fp, #12
0ec2c     A7 12 62 FC | 	wrlong	arg01, fp
0ec30     0C 4E 85 F1 | 	sub	fp, #12
0ec34     34 00 00 FF 
0ec38     EC E5 85 F1 | 	sub	objptr, ##27116
0ec3c     4C A6 B0 FD | 	call	#_pslpeek
0ec40     FD FA 31 F9 | 	getword	result1, result1, #0
0ec44     10 4E 05 F1 | 	add	fp, #16
0ec48     A7 FA 61 FC | 	wrlong	result1, fp
0ec4c     6A 00 00 FF 
0ec50     64 E4 05 F1 | 	add	objptr, ##54372
0ec54     F2 16 02 FB | 	rdlong	arg03, objptr
0ec58     0B 15 02 F6 | 	mov	arg02, arg03
0ec5c     01 14 66 F0 | 	shl	arg02, #1
0ec60     0B 15 02 F1 | 	add	arg02, arg03
0ec64     02 14 66 F0 | 	shl	arg02, #2
0ec68     03 00 00 FF 
0ec6c     04 E4 85 F1 | 	sub	objptr, ##1540
0ec70     F2 14 02 F1 | 	add	arg02, objptr
0ec74     04 14 06 F1 | 	add	arg02, #4
0ec78     0A 17 02 FB | 	rdlong	arg03, arg02
0ec7c     04 4E 05 F1 | 	add	fp, #4
0ec80     A7 16 62 FC | 	wrlong	arg03, fp
0ec84     08 4E 85 F1 | 	sub	fp, #8
0ec88     A7 12 02 FB | 	rdlong	arg01, fp
0ec8c     0C 4E 85 F1 | 	sub	fp, #12
0ec90     02 12 06 F1 | 	add	arg01, #2
0ec94     67 00 00 FF 
0ec98     60 E4 85 F1 | 	sub	objptr, ##52832
0ec9c     94 A5 B0 FD | 	call	#_pspeek
0eca0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eca4     18 4E 05 F1 | 	add	fp, #24
0eca8     A7 FA 61 FC | 	wrlong	result1, fp
0ecac     0C 4E 85 F1 | 	sub	fp, #12
0ecb0     A7 12 02 FB | 	rdlong	arg01, fp
0ecb4     0C 4E 85 F1 | 	sub	fp, #12
0ecb8     04 12 06 F1 | 	add	arg01, #4
0ecbc     CC A5 B0 FD | 	call	#_pslpeek
0ecc0     1C 4E 05 F1 | 	add	fp, #28
0ecc4     A7 FA 61 FC | 	wrlong	result1, fp
0ecc8     10 4E 85 F1 | 	sub	fp, #16
0eccc     A7 12 02 FB | 	rdlong	arg01, fp
0ecd0     0C 4E 85 F1 | 	sub	fp, #12
0ecd4     08 12 06 F1 | 	add	arg01, #8
0ecd8     B0 A5 B0 FD | 	call	#_pslpeek
0ecdc     20 4E 05 F1 | 	add	fp, #32
0ece0     A7 FA 61 FC | 	wrlong	result1, fp
0ece4     14 4E 85 F1 | 	sub	fp, #20
0ece8     A7 12 02 FB | 	rdlong	arg01, fp
0ecec     0C 4E 85 F1 | 	sub	fp, #12
0ecf0     0C 12 06 F1 | 	add	arg01, #12
0ecf4     94 A5 B0 FD | 	call	#_pslpeek
0ecf8     24 4E 05 F1 | 	add	fp, #36
0ecfc     A7 FA 61 FC | 	wrlong	result1, fp
0ed00                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0ed00                 | ' esize=pspeek(arrptr+2)
0ed00                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0ed00                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0ed00                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0ed00                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0ed00     10 4E 85 F1 | 	sub	fp, #16
0ed04     A7 16 02 FB | 	rdlong	arg03, fp
0ed08     14 4E 85 F1 | 	sub	fp, #20
0ed0c     03 16 16 F2 | 	cmp	arg03, #3 wc
0ed10     38 00 90 CD |  if_b	jmp	#LR__1152
0ed14     C8 B4 BF FD | 	call	#_pop
0ed18     FF 16 02 F6 | 	mov	arg03, result3
0ed1c     A7 FA 61 FC | 	wrlong	result1, fp
0ed20     04 4E 05 F1 | 	add	fp, #4
0ed24     A7 FC 61 FC | 	wrlong	result2, fp
0ed28     04 4E 05 F1 | 	add	fp, #4
0ed2c     A7 16 62 FC | 	wrlong	arg03, fp
0ed30     08 4E 85 F1 | 	sub	fp, #8
0ed34     A7 12 02 F6 | 	mov	arg01, fp
0ed38     E0 40 B0 FD | 	call	#_converttoint
0ed3c     30 4E 05 F1 | 	add	fp, #48
0ed40     A7 FA 61 FC | 	wrlong	result1, fp
0ed44     30 4E 85 F1 | 	sub	fp, #48
0ed48     0C 00 90 FD | 	jmp	#LR__1153
0ed4c                 | LR__1152
0ed4c     30 4E 05 F1 | 	add	fp, #48
0ed50     A7 00 68 FC | 	wrlong	#0, fp
0ed54     30 4E 85 F1 | 	sub	fp, #48
0ed58                 | LR__1153
0ed58                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0ed58     14 4E 05 F1 | 	add	fp, #20
0ed5c     A7 16 02 FB | 	rdlong	arg03, fp
0ed60     14 4E 85 F1 | 	sub	fp, #20
0ed64     02 16 16 F2 | 	cmp	arg03, #2 wc
0ed68     38 00 90 CD |  if_b	jmp	#LR__1154
0ed6c     70 B4 BF FD | 	call	#_pop
0ed70     FF 16 02 F6 | 	mov	arg03, result3
0ed74     A7 FA 61 FC | 	wrlong	result1, fp
0ed78     04 4E 05 F1 | 	add	fp, #4
0ed7c     A7 FC 61 FC | 	wrlong	result2, fp
0ed80     04 4E 05 F1 | 	add	fp, #4
0ed84     A7 16 62 FC | 	wrlong	arg03, fp
0ed88     08 4E 85 F1 | 	sub	fp, #8
0ed8c     A7 12 02 F6 | 	mov	arg01, fp
0ed90     88 40 B0 FD | 	call	#_converttoint
0ed94     2C 4E 05 F1 | 	add	fp, #44
0ed98     A7 FA 61 FC | 	wrlong	result1, fp
0ed9c     2C 4E 85 F1 | 	sub	fp, #44
0eda0     0C 00 90 FD | 	jmp	#LR__1155
0eda4                 | LR__1154
0eda4     2C 4E 05 F1 | 	add	fp, #44
0eda8     A7 00 68 FC | 	wrlong	#0, fp
0edac     2C 4E 85 F1 | 	sub	fp, #44
0edb0                 | LR__1155
0edb0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0edb0     14 4E 05 F1 | 	add	fp, #20
0edb4     A7 16 02 FB | 	rdlong	arg03, fp
0edb8     14 4E 85 F1 | 	sub	fp, #20
0edbc     01 16 16 F2 | 	cmp	arg03, #1 wc
0edc0     38 00 90 CD |  if_b	jmp	#LR__1156
0edc4     18 B4 BF FD | 	call	#_pop
0edc8     FF 16 02 F6 | 	mov	arg03, result3
0edcc     A7 FA 61 FC | 	wrlong	result1, fp
0edd0     04 4E 05 F1 | 	add	fp, #4
0edd4     A7 FC 61 FC | 	wrlong	result2, fp
0edd8     04 4E 05 F1 | 	add	fp, #4
0eddc     A7 16 62 FC | 	wrlong	arg03, fp
0ede0     08 4E 85 F1 | 	sub	fp, #8
0ede4     A7 12 02 F6 | 	mov	arg01, fp
0ede8     30 40 B0 FD | 	call	#_converttoint
0edec     28 4E 05 F1 | 	add	fp, #40
0edf0     A7 FA 61 FC | 	wrlong	result1, fp
0edf4     28 4E 85 F1 | 	sub	fp, #40
0edf8     0C 00 90 FD | 	jmp	#LR__1157
0edfc                 | LR__1156
0edfc     28 4E 05 F1 | 	add	fp, #40
0ee00     A7 00 68 FC | 	wrlong	#0, fp
0ee04     28 4E 85 F1 | 	sub	fp, #40
0ee08                 | LR__1157
0ee08     0C 4E 05 F1 | 	add	fp, #12
0ee0c     A7 20 02 FB | 	rdlong	local02, fp
0ee10     1C 4E 05 F1 | 	add	fp, #28
0ee14     A7 22 02 FB | 	rdlong	local03, fp
0ee18     04 4E 05 F1 | 	add	fp, #4
0ee1c     A7 FC 01 FB | 	rdlong	result2, fp
0ee20     10 4E 85 F1 | 	sub	fp, #16
0ee24     A7 FE 01 FB | 	rdlong	result3, fp
0ee28     FF FC 01 FD | 	qmul	result2, result3
0ee2c     10 20 06 F1 | 	add	local02, #16
0ee30     14 4E 05 F1 | 	add	fp, #20
0ee34     A7 FC 01 FB | 	rdlong	result2, fp
0ee38     18 FA 61 FD | 	getqx	result1
0ee3c     FF FC 01 FD | 	qmul	result2, result3
0ee40     FD 22 02 F1 | 	add	local03, result1
0ee44     10 4E 85 F1 | 	sub	fp, #16
0ee48     A7 FE 01 FB | 	rdlong	result3, fp
0ee4c     18 FC 61 FD | 	getqx	result2
0ee50     FF FC 01 FD | 	qmul	result2, result3
0ee54     08 4E 85 F1 | 	sub	fp, #8
0ee58     A7 FE 01 FB | 	rdlong	result3, fp
0ee5c     18 FC 61 FD | 	getqx	result2
0ee60     FE 22 02 F1 | 	add	local03, result2
0ee64     FF 22 02 FD | 	qmul	local03, result3
0ee68     1C 4E 05 F1 | 	add	fp, #28
0ee6c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ee6c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0ee6c                 | ' 
0ee6c                 | ' select case vartype
0ee6c     18 FC 61 FD | 	getqx	result2
0ee70     FE 20 02 F1 | 	add	local02, result2
0ee74     A7 20 62 FC | 	wrlong	local02, fp
0ee78     24 4E 85 F1 | 	sub	fp, #36
0ee7c     A7 24 02 FB | 	rdlong	local04, fp
0ee80     10 4E 85 F1 | 	sub	fp, #16
0ee84     00 25 86 F1 | 	sub	local04, #256
0ee88     0C 24 26 F3 | 	fle	local04, #12
0ee8c     30 24 62 FD | 	jmprel	local04
0ee90                 | LR__1158
0ee90     30 00 90 FD | 	jmp	#LR__1159
0ee94     58 00 90 FD | 	jmp	#LR__1160
0ee98     8C 00 90 FD | 	jmp	#LR__1161
0ee9c     AC 00 90 FD | 	jmp	#LR__1162
0eea0     E8 00 90 FD | 	jmp	#LR__1163
0eea4     08 01 90 FD | 	jmp	#LR__1164
0eea8     24 01 90 FD | 	jmp	#LR__1165
0eeac     40 01 90 FD | 	jmp	#LR__1166
0eeb0     50 01 90 FD | 	jmp	#LR__1167
0eeb4     60 01 90 FD | 	jmp	#LR__1168
0eeb8     7C 01 90 FD | 	jmp	#LR__1169
0eebc     8C 01 90 FD | 	jmp	#LR__1170
0eec0     B8 01 90 FD | 	jmp	#LR__1171
0eec4                 | LR__1159
0eec4     A7 12 02 F6 | 	mov	arg01, fp
0eec8     34 4E 05 F1 | 	add	fp, #52
0eecc     A7 14 02 FB | 	rdlong	arg02, fp
0eed0     34 4E 85 F1 | 	sub	fp, #52
0eed4     0C 16 06 F6 | 	mov	arg03, #12
0eed8     0B 00 00 FF 
0eedc     C0 E4 05 F1 | 	add	objptr, ##5824
0eee0     F8 CC B0 FD | 	call	#_psram_spin2_read1
0eee4     0B 00 00 FF 
0eee8     C0 E4 85 F1 | 	sub	objptr, ##5824
0eeec     8C 01 90 FD | 	jmp	#LR__1171
0eef0                 | LR__1160
0eef0     08 4E 05 F1 | 	add	fp, #8
0eef4     A7 38 68 FC | 	wrlong	#28, fp
0eef8     2C 4E 05 F1 | 	add	fp, #44
0eefc     A7 12 02 FB | 	rdlong	arg01, fp
0ef00     34 4E 85 F1 | 	sub	fp, #52
0ef04     2C A3 B0 FD | 	call	#_pspeek
0ef08     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ef0c     A7 FA 61 FC | 	wrlong	result1, fp
0ef10     80 FA 15 F2 | 	cmp	result1, #128 wc
0ef14     00 1F 66 36 |  if_ae	neg	local01, #256
0ef18     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ef1c     11 1F 42 35 |  if_ae	or	local01, local03
0ef20     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0ef24     54 01 90 FD | 	jmp	#LR__1171
0ef28                 | LR__1161
0ef28     08 4E 05 F1 | 	add	fp, #8
0ef2c     A7 3A 68 FC | 	wrlong	#29, fp
0ef30     2C 4E 05 F1 | 	add	fp, #44
0ef34     A7 12 02 FB | 	rdlong	arg01, fp
0ef38     34 4E 85 F1 | 	sub	fp, #52
0ef3c     F4 A2 B0 FD | 	call	#_pspeek
0ef40     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ef44     A7 FA 61 FC | 	wrlong	result1, fp
0ef48     30 01 90 FD | 	jmp	#LR__1171
0ef4c                 | LR__1162
0ef4c     08 4E 05 F1 | 	add	fp, #8
0ef50     A7 38 68 FC | 	wrlong	#28, fp
0ef54     2C 4E 05 F1 | 	add	fp, #44
0ef58     A7 12 02 FB | 	rdlong	arg01, fp
0ef5c     34 4E 85 F1 | 	sub	fp, #52
0ef60     28 A3 B0 FD | 	call	#_pslpeek
0ef64     FD FA 31 F9 | 	getword	result1, result1, #0
0ef68     A7 FA 61 FC | 	wrlong	result1, fp
0ef6c     40 00 00 FF 
0ef70     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0ef74     FF 7F 00 3F 
0ef78     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0ef7c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ef80     11 1F 42 35 |  if_ae	or	local01, local03
0ef84     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0ef88     F0 00 90 FD | 	jmp	#LR__1171
0ef8c                 | LR__1163
0ef8c     08 4E 05 F1 | 	add	fp, #8
0ef90     A7 3A 68 FC | 	wrlong	#29, fp
0ef94     2C 4E 05 F1 | 	add	fp, #44
0ef98     A7 12 02 FB | 	rdlong	arg01, fp
0ef9c     34 4E 85 F1 | 	sub	fp, #52
0efa0     E8 A2 B0 FD | 	call	#_pslpeek
0efa4     FD FA 31 F9 | 	getword	result1, result1, #0
0efa8     A7 FA 61 FC | 	wrlong	result1, fp
0efac     CC 00 90 FD | 	jmp	#LR__1171
0efb0                 | LR__1164
0efb0     08 4E 05 F1 | 	add	fp, #8
0efb4     A7 38 68 FC | 	wrlong	#28, fp
0efb8     2C 4E 05 F1 | 	add	fp, #44
0efbc     A7 12 02 FB | 	rdlong	arg01, fp
0efc0     34 4E 85 F1 | 	sub	fp, #52
0efc4     C4 A2 B0 FD | 	call	#_pslpeek
0efc8     A7 FA 61 FC | 	wrlong	result1, fp
0efcc     AC 00 90 FD | 	jmp	#LR__1171
0efd0                 | LR__1165
0efd0     08 4E 05 F1 | 	add	fp, #8
0efd4     A7 3A 68 FC | 	wrlong	#29, fp
0efd8     2C 4E 05 F1 | 	add	fp, #44
0efdc     A7 12 02 FB | 	rdlong	arg01, fp
0efe0     34 4E 85 F1 | 	sub	fp, #52
0efe4     A4 A2 B0 FD | 	call	#_pslpeek
0efe8     A7 FA 61 FC | 	wrlong	result1, fp
0efec     8C 00 90 FD | 	jmp	#LR__1171
0eff0                 | LR__1166
0eff0     08 4E 05 F1 | 	add	fp, #8
0eff4     A7 FE 69 FC | 	wrlong	#255, fp
0eff8     08 4E 85 F1 | 	sub	fp, #8
0effc     A7 60 68 FC | 	wrlong	#48, fp
0f000     78 00 90 FD | 	jmp	#LR__1171
0f004                 | LR__1167
0f004     08 4E 05 F1 | 	add	fp, #8
0f008     A7 FE 69 FC | 	wrlong	#255, fp
0f00c     08 4E 85 F1 | 	sub	fp, #8
0f010     A7 60 68 FC | 	wrlong	#48, fp
0f014     64 00 90 FD | 	jmp	#LR__1171
0f018                 | LR__1168
0f018     08 4E 05 F1 | 	add	fp, #8
0f01c     A7 3C 68 FC | 	wrlong	#30, fp
0f020     2C 4E 05 F1 | 	add	fp, #44
0f024     A7 12 02 FB | 	rdlong	arg01, fp
0f028     34 4E 85 F1 | 	sub	fp, #52
0f02c     5C A2 B0 FD | 	call	#_pslpeek
0f030     A7 FA 61 FC | 	wrlong	result1, fp
0f034     44 00 90 FD | 	jmp	#LR__1171
0f038                 | LR__1169
0f038     08 4E 05 F1 | 	add	fp, #8
0f03c     A7 FE 69 FC | 	wrlong	#255, fp
0f040     08 4E 85 F1 | 	sub	fp, #8
0f044     A7 60 68 FC | 	wrlong	#48, fp
0f048     30 00 90 FD | 	jmp	#LR__1171
0f04c                 | LR__1170
0f04c     08 4E 05 F1 | 	add	fp, #8
0f050     A7 3E 68 FC | 	wrlong	#31, fp
0f054     2C 4E 05 F1 | 	add	fp, #44
0f058     A7 12 02 FB | 	rdlong	arg01, fp
0f05c     34 4E 85 F1 | 	sub	fp, #52
0f060     28 A2 B0 FD | 	call	#_pslpeek
0f064     A7 FA 61 FC | 	wrlong	result1, fp
0f068     00 04 00 FF 
0f06c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f070     08 4E 05 31 |  if_ae	add	fp, #8
0f074     A7 56 68 3C |  if_ae	wrlong	#43, fp
0f078     08 4E 85 31 |  if_ae	sub	fp, #8
0f07c                 | LR__1171
0f07c     A7 12 02 F6 | 	mov	arg01, fp
0f080     F4 B1 BF FD | 	call	#_push
0f084                 | LR__1172
0f084     A7 F0 03 F6 | 	mov	ptra, fp
0f088     B2 00 A0 FD | 	call	#popregs_
0f08c                 | _do_getvar_ret
0f08c     2D 00 64 FD | 	ret
0f090                 | 
0f090                 | ' 
0f090                 | ' 
0f090                 | ' sub do_getaddr
0f090                 | _do_getaddr
0f090     01 4A 05 F6 | 	mov	COUNT_, #1
0f094     A8 00 A0 FD | 	call	#pushregs_
0f098     38 F0 07 F1 | 	add	ptra, #56
0f09c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f09c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f09c     6A 00 00 FF 
0f0a0     64 E4 05 F1 | 	add	objptr, ##54372
0f0a4     F2 12 02 FB | 	rdlong	arg01, objptr
0f0a8     09 FD 01 F6 | 	mov	result2, arg01
0f0ac     01 FC 65 F0 | 	shl	result2, #1
0f0b0     09 FD 01 F1 | 	add	result2, arg01
0f0b4     02 FC 65 F0 | 	shl	result2, #2
0f0b8     03 00 00 FF 
0f0bc     04 E4 85 F1 | 	sub	objptr, ##1540
0f0c0     F2 FC 01 F1 | 	add	result2, objptr
0f0c4     04 FC 05 F1 | 	add	result2, #4
0f0c8     FE FC 09 FB | 	rdlong	result2, result2 wz
0f0cc     67 00 00 FF 
0f0d0     60 E4 85 F1 | 	sub	objptr, ##52832
0f0d4     C4 00 90 5D |  if_ne	jmp	#LR__1180
0f0d8     6A 00 00 FF 
0f0dc     64 E4 05 F1 | 	add	objptr, ##54372
0f0e0     F2 12 02 FB | 	rdlong	arg01, objptr
0f0e4     09 FD 01 F6 | 	mov	result2, arg01
0f0e8     01 FC 65 F0 | 	shl	result2, #1
0f0ec     09 FD 01 F1 | 	add	result2, arg01
0f0f0     02 FC 65 F0 | 	shl	result2, #2
0f0f4     03 00 00 FF 
0f0f8     04 E4 85 F1 | 	sub	objptr, ##1540
0f0fc     F2 FC 01 F1 | 	add	result2, objptr
0f100     FE 12 02 FB | 	rdlong	arg01, result2
0f104     04 12 66 F0 | 	shl	arg01, #4
0f108     32 00 00 FF 
0f10c     74 E4 85 F1 | 	sub	objptr, ##25716
0f110     F2 12 02 F1 | 	add	arg01, objptr
0f114     0C 12 06 F1 | 	add	arg01, #12
0f118     09 13 02 FB | 	rdlong	arg01, arg01
0f11c     08 4E 05 F1 | 	add	fp, #8
0f120     A7 12 62 FC | 	wrlong	arg01, fp
0f124                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f124                 | '    if t1.result_type>=array_no_type then goto 2200
0f124     08 4E 85 F1 | 	sub	fp, #8
0f128     00 13 16 F2 | 	cmp	arg01, #256 wc
0f12c     34 00 00 FF 
0f130     EC E5 85 F1 | 	sub	objptr, ##27116
0f134     64 00 90 3D |  if_ae	jmp	#LR__1181
0f138     6A 00 00 FF 
0f13c     64 E4 05 F1 | 	add	objptr, ##54372
0f140     F2 12 02 FB | 	rdlong	arg01, objptr
0f144     09 FB 01 F6 | 	mov	result1, arg01
0f148     01 FA 65 F0 | 	shl	result1, #1
0f14c     09 FB 01 F1 | 	add	result1, arg01
0f150     02 FA 65 F0 | 	shl	result1, #2
0f154     03 00 00 FF 
0f158     04 E4 85 F1 | 	sub	objptr, ##1540
0f15c     F2 FA 01 F1 | 	add	result1, objptr
0f160     FD FA 01 FB | 	rdlong	result1, result1
0f164     04 FA 65 F0 | 	shl	result1, #4
0f168     32 00 00 FF 
0f16c     74 E4 85 F1 | 	sub	objptr, ##25716
0f170     F2 FA 01 F1 | 	add	result1, objptr
0f174     04 FA 05 F1 | 	add	result1, #4
0f178     34 00 00 FF 
0f17c     EC E5 85 F1 | 	sub	objptr, ##27116
0f180     A7 FA 61 FC | 	wrlong	result1, fp
0f184     08 4E 05 F1 | 	add	fp, #8
0f188     A7 3A 68 FC | 	wrlong	#29, fp
0f18c     08 4E 85 F1 | 	sub	fp, #8
0f190     A7 12 02 F6 | 	mov	arg01, fp
0f194     E0 B0 BF FD | 	call	#_push
0f198                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0f198                 | '   t1.result_type=result_uint
0f198                 | '   push t1 : return
0f198     D8 02 90 FD | 	jmp	#LR__1190
0f19c                 | LR__1180
0f19c                 | LR__1181
0f19c     6A 00 00 FF 
0f1a0     64 E4 05 F1 | 	add	objptr, ##54372
0f1a4     F2 FE 01 FB | 	rdlong	result3, objptr
0f1a8     FF 12 02 F6 | 	mov	arg01, result3
0f1ac     01 12 66 F0 | 	shl	arg01, #1
0f1b0     FF 12 02 F1 | 	add	arg01, result3
0f1b4     02 12 66 F0 | 	shl	arg01, #2
0f1b8     03 00 00 FF 
0f1bc     04 E4 85 F1 | 	sub	objptr, ##1540
0f1c0     F2 12 02 F1 | 	add	arg01, objptr
0f1c4     09 13 02 FB | 	rdlong	arg01, arg01
0f1c8     04 12 66 F0 | 	shl	arg01, #4
0f1cc     32 00 00 FF 
0f1d0     74 E4 85 F1 | 	sub	objptr, ##25716
0f1d4     F2 12 02 F1 | 	add	arg01, objptr
0f1d8     04 12 06 F1 | 	add	arg01, #4
0f1dc     09 13 02 FB | 	rdlong	arg01, arg01
0f1e0     0C 4E 05 F1 | 	add	fp, #12
0f1e4     A7 12 62 FC | 	wrlong	arg01, fp
0f1e8     0C 4E 85 F1 | 	sub	fp, #12
0f1ec     34 00 00 FF 
0f1f0     EC E5 85 F1 | 	sub	objptr, ##27116
0f1f4     94 A0 B0 FD | 	call	#_pslpeek
0f1f8     FD FA 31 F9 | 	getword	result1, result1, #0
0f1fc     10 4E 05 F1 | 	add	fp, #16
0f200     A7 FA 61 FC | 	wrlong	result1, fp
0f204     6A 00 00 FF 
0f208     64 E4 05 F1 | 	add	objptr, ##54372
0f20c     F2 FE 01 FB | 	rdlong	result3, objptr
0f210     FF 12 02 F6 | 	mov	arg01, result3
0f214     01 12 66 F0 | 	shl	arg01, #1
0f218     FF 12 02 F1 | 	add	arg01, result3
0f21c     02 12 66 F0 | 	shl	arg01, #2
0f220     03 00 00 FF 
0f224     04 E4 85 F1 | 	sub	objptr, ##1540
0f228     F2 12 02 F1 | 	add	arg01, objptr
0f22c     04 12 06 F1 | 	add	arg01, #4
0f230     09 13 02 FB | 	rdlong	arg01, arg01
0f234     04 4E 05 F1 | 	add	fp, #4
0f238     A7 12 62 FC | 	wrlong	arg01, fp
0f23c     08 4E 85 F1 | 	sub	fp, #8
0f240     A7 12 02 FB | 	rdlong	arg01, fp
0f244     0C 4E 85 F1 | 	sub	fp, #12
0f248     02 12 06 F1 | 	add	arg01, #2
0f24c     67 00 00 FF 
0f250     60 E4 85 F1 | 	sub	objptr, ##52832
0f254     DC 9F B0 FD | 	call	#_pspeek
0f258     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f25c     18 4E 05 F1 | 	add	fp, #24
0f260     A7 FA 61 FC | 	wrlong	result1, fp
0f264     0C 4E 85 F1 | 	sub	fp, #12
0f268     A7 12 02 FB | 	rdlong	arg01, fp
0f26c     0C 4E 85 F1 | 	sub	fp, #12
0f270     04 12 06 F1 | 	add	arg01, #4
0f274     14 A0 B0 FD | 	call	#_pslpeek
0f278     1C 4E 05 F1 | 	add	fp, #28
0f27c     A7 FA 61 FC | 	wrlong	result1, fp
0f280     10 4E 85 F1 | 	sub	fp, #16
0f284     A7 12 02 FB | 	rdlong	arg01, fp
0f288     0C 4E 85 F1 | 	sub	fp, #12
0f28c     08 12 06 F1 | 	add	arg01, #8
0f290     F8 9F B0 FD | 	call	#_pslpeek
0f294     20 4E 05 F1 | 	add	fp, #32
0f298     A7 FA 61 FC | 	wrlong	result1, fp
0f29c     14 4E 85 F1 | 	sub	fp, #20
0f2a0     A7 12 02 FB | 	rdlong	arg01, fp
0f2a4     0C 4E 85 F1 | 	sub	fp, #12
0f2a8     0C 12 06 F1 | 	add	arg01, #12
0f2ac     DC 9F B0 FD | 	call	#_pslpeek
0f2b0     24 4E 05 F1 | 	add	fp, #36
0f2b4     A7 FA 61 FC | 	wrlong	result1, fp
0f2b8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0f2b8                 | ' esize=pspeek(arrptr+2)
0f2b8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0f2b8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0f2b8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0f2b8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0f2b8     10 4E 85 F1 | 	sub	fp, #16
0f2bc     A7 12 02 FB | 	rdlong	arg01, fp
0f2c0     14 4E 85 F1 | 	sub	fp, #20
0f2c4     03 12 16 F2 | 	cmp	arg01, #3 wc
0f2c8     34 00 90 CD |  if_b	jmp	#LR__1182
0f2cc     10 AF BF FD | 	call	#_pop
0f2d0     A7 FA 61 FC | 	wrlong	result1, fp
0f2d4     04 4E 05 F1 | 	add	fp, #4
0f2d8     A7 FC 61 FC | 	wrlong	result2, fp
0f2dc     04 4E 05 F1 | 	add	fp, #4
0f2e0     A7 FE 61 FC | 	wrlong	result3, fp
0f2e4     08 4E 85 F1 | 	sub	fp, #8
0f2e8     A7 12 02 F6 | 	mov	arg01, fp
0f2ec     2C 3B B0 FD | 	call	#_converttoint
0f2f0     30 4E 05 F1 | 	add	fp, #48
0f2f4     A7 FA 61 FC | 	wrlong	result1, fp
0f2f8     30 4E 85 F1 | 	sub	fp, #48
0f2fc     0C 00 90 FD | 	jmp	#LR__1183
0f300                 | LR__1182
0f300     30 4E 05 F1 | 	add	fp, #48
0f304     A7 00 68 FC | 	wrlong	#0, fp
0f308     30 4E 85 F1 | 	sub	fp, #48
0f30c                 | LR__1183
0f30c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0f30c     14 4E 05 F1 | 	add	fp, #20
0f310     A7 12 02 FB | 	rdlong	arg01, fp
0f314     14 4E 85 F1 | 	sub	fp, #20
0f318     02 12 16 F2 | 	cmp	arg01, #2 wc
0f31c     34 00 90 CD |  if_b	jmp	#LR__1184
0f320     BC AE BF FD | 	call	#_pop
0f324     A7 FA 61 FC | 	wrlong	result1, fp
0f328     04 4E 05 F1 | 	add	fp, #4
0f32c     A7 FC 61 FC | 	wrlong	result2, fp
0f330     04 4E 05 F1 | 	add	fp, #4
0f334     A7 FE 61 FC | 	wrlong	result3, fp
0f338     08 4E 85 F1 | 	sub	fp, #8
0f33c     A7 12 02 F6 | 	mov	arg01, fp
0f340     D8 3A B0 FD | 	call	#_converttoint
0f344     2C 4E 05 F1 | 	add	fp, #44
0f348     A7 FA 61 FC | 	wrlong	result1, fp
0f34c     2C 4E 85 F1 | 	sub	fp, #44
0f350     0C 00 90 FD | 	jmp	#LR__1185
0f354                 | LR__1184
0f354     2C 4E 05 F1 | 	add	fp, #44
0f358     A7 00 68 FC | 	wrlong	#0, fp
0f35c     2C 4E 85 F1 | 	sub	fp, #44
0f360                 | LR__1185
0f360                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0f360     14 4E 05 F1 | 	add	fp, #20
0f364     A7 12 02 FB | 	rdlong	arg01, fp
0f368     14 4E 85 F1 | 	sub	fp, #20
0f36c     01 12 16 F2 | 	cmp	arg01, #1 wc
0f370     34 00 90 CD |  if_b	jmp	#LR__1186
0f374     68 AE BF FD | 	call	#_pop
0f378     A7 FA 61 FC | 	wrlong	result1, fp
0f37c     04 4E 05 F1 | 	add	fp, #4
0f380     A7 FC 61 FC | 	wrlong	result2, fp
0f384     04 4E 05 F1 | 	add	fp, #4
0f388     A7 FE 61 FC | 	wrlong	result3, fp
0f38c     08 4E 85 F1 | 	sub	fp, #8
0f390     A7 12 02 F6 | 	mov	arg01, fp
0f394     84 3A B0 FD | 	call	#_converttoint
0f398     28 4E 05 F1 | 	add	fp, #40
0f39c     A7 FA 61 FC | 	wrlong	result1, fp
0f3a0     28 4E 85 F1 | 	sub	fp, #40
0f3a4     0C 00 90 FD | 	jmp	#LR__1187
0f3a8                 | LR__1186
0f3a8     28 4E 05 F1 | 	add	fp, #40
0f3ac     A7 00 68 FC | 	wrlong	#0, fp
0f3b0     28 4E 85 F1 | 	sub	fp, #40
0f3b4                 | LR__1187
0f3b4                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f3b4                 | ' if numpar>0 then
0f3b4     14 4E 05 F1 | 	add	fp, #20
0f3b8     A7 FE 01 FB | 	rdlong	result3, fp
0f3bc     14 4E 85 F1 | 	sub	fp, #20
0f3c0     01 FE 15 F2 | 	cmp	result3, #1 wc
0f3c4     8C 00 90 CD |  if_b	jmp	#LR__1188
0f3c8     0C 4E 05 F1 | 	add	fp, #12
0f3cc     A7 FC 01 FB | 	rdlong	result2, fp
0f3d0     1C 4E 05 F1 | 	add	fp, #28
0f3d4     A7 FE 01 FB | 	rdlong	result3, fp
0f3d8     04 4E 05 F1 | 	add	fp, #4
0f3dc     A7 12 02 FB | 	rdlong	arg01, fp
0f3e0     10 4E 85 F1 | 	sub	fp, #16
0f3e4     A7 FA 01 FB | 	rdlong	result1, fp
0f3e8     FD 12 02 FD | 	qmul	arg01, result1
0f3ec     10 FC 05 F1 | 	add	result2, #16
0f3f0     14 4E 05 F1 | 	add	fp, #20
0f3f4     A7 1E 02 FB | 	rdlong	local01, fp
0f3f8     18 12 62 FD | 	getqx	arg01
0f3fc     FD 1E 02 FD | 	qmul	local01, result1
0f400     09 FF 01 F1 | 	add	result3, arg01
0f404     10 4E 85 F1 | 	sub	fp, #16
0f408     A7 1E 02 FB | 	rdlong	local01, fp
0f40c     18 FA 61 FD | 	getqx	result1
0f410     0F FB 01 FD | 	qmul	result1, local01
0f414     08 4E 85 F1 | 	sub	fp, #8
0f418     A7 1E 02 FB | 	rdlong	local01, fp
0f41c     18 FA 61 FD | 	getqx	result1
0f420     FD FE 01 F1 | 	add	result3, result1
0f424     0F FF 01 FD | 	qmul	result3, local01
0f428     1C 4E 05 F1 | 	add	fp, #28
0f42c     18 1E 62 FD | 	getqx	local01
0f430     0F FD 01 F1 | 	add	result2, local01
0f434     A7 FC 61 FC | 	wrlong	result2, fp
0f438     2C 4E 85 F1 | 	sub	fp, #44
0f43c     A7 3A 68 FC | 	wrlong	#29, fp
0f440     2C 4E 05 F1 | 	add	fp, #44
0f444     A7 1E 02 FB | 	rdlong	local01, fp
0f448     34 4E 85 F1 | 	sub	fp, #52
0f44c     A7 1E 62 FC | 	wrlong	local01, fp
0f450     18 00 90 FD | 	jmp	#LR__1189
0f454                 | LR__1188
0f454     08 4E 05 F1 | 	add	fp, #8
0f458     A7 3A 68 FC | 	wrlong	#29, fp
0f45c     04 4E 05 F1 | 	add	fp, #4
0f460     A7 1E 02 FB | 	rdlong	local01, fp
0f464     0C 4E 85 F1 | 	sub	fp, #12
0f468     A7 1E 62 FC | 	wrlong	local01, fp
0f46c                 | LR__1189
0f46c     A7 12 02 F6 | 	mov	arg01, fp
0f470     04 AE BF FD | 	call	#_push
0f474                 | LR__1190
0f474     A7 F0 03 F6 | 	mov	ptra, fp
0f478     B2 00 A0 FD | 	call	#popregs_
0f47c                 | _do_getaddr_ret
0f47c     2D 00 64 FD | 	ret
0f480                 | 
0f480                 | ' 
0f480                 | ' 
0f480                 | ' sub do_inkey
0f480                 | _do_inkey
0f480     02 4A 05 F6 | 	mov	COUNT_, #2
0f484     A8 00 A0 FD | 	call	#pushregs_
0f488     0C F0 07 F1 | 	add	ptra, #12
0f48c     78 CB B0 FD | 	call	#_usbnew_spin2_get_key
0f490     65 00 00 FF 
0f494     58 E4 05 F1 | 	add	objptr, ##51800
0f498     F2 FA 61 FC | 	wrlong	result1, objptr
0f49c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0f49c     65 00 00 FF 
0f4a0     58 E4 85 F1 | 	sub	objptr, ##51800
0f4a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f4a8     94 00 90 AD |  if_e	jmp	#LR__1201
0f4ac     65 00 00 FF 
0f4b0     58 E4 05 F1 | 	add	objptr, ##51800
0f4b4     F2 1C 02 FB | 	rdlong	arg06, objptr
0f4b8     65 00 00 FF 
0f4bc     58 E4 85 F1 | 	sub	objptr, ##51800
0f4c0     00 00 40 FF 
0f4c4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f4c8     65 00 00 CF 
0f4cc     58 E4 05 C1 |  if_b	add	objptr, ##51800
0f4d0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f4d4     65 00 00 CF 
0f4d8     58 E4 85 C1 |  if_b	sub	objptr, ##51800
0f4dc     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f4e0     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f4e4     58 00 90 3D |  if_ae	jmp	#LR__1201
0f4e8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0f4e8     79 00 00 FF 
0f4ec     C4 E5 05 F1 | 	add	objptr, ##62404
0f4f0     F2 1C 02 FB | 	rdlong	arg06, objptr
0f4f4     79 00 00 FF 
0f4f8     C4 E5 85 F1 | 	sub	objptr, ##62404
0f4fc     01 1C 0E F2 | 	cmp	arg06, #1 wz
0f500     3C 00 90 5D |  if_ne	jmp	#LR__1200
0f504     7B 00 00 FF 
0f508     68 E4 05 F1 | 	add	objptr, ##63080
0f50c     F2 14 02 FB | 	rdlong	arg02, objptr
0f510     04 E4 85 F1 | 	sub	objptr, #4
0f514     F2 1A 02 FB | 	rdlong	arg05, objptr
0f518     07 12 06 F6 | 	mov	arg01, #7
0f51c     56 00 00 FF 
0f520     44 16 06 F6 | 	mov	arg03, ##44100
0f524     0C 18 C6 F9 | 	decod	arg04, #12
0f528     01 1C 66 F6 | 	neg	arg06, #1
0f52c     6F 00 00 FF 
0f530     A4 E5 85 F1 | 	sub	objptr, ##57252
0f534     58 CE B0 FD | 	call	#_audio096_spin2_play
0f538     0B 00 00 FF 
0f53c     C0 E4 85 F1 | 	sub	objptr, ##5824
0f540                 | LR__1200
0f540                 | LR__1201
0f540                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0f540     65 00 00 FF 
0f544     58 E4 05 F1 | 	add	objptr, ##51800
0f548     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0f54c     65 00 00 FF 
0f550     58 E4 85 F1 | 	sub	objptr, ##51800
0f554     D4 01 90 AD |  if_e	jmp	#LR__1210
0f558     65 00 00 FF 
0f55c     58 E4 05 F1 | 	add	objptr, ##51800
0f560     F2 1C 02 FB | 	rdlong	arg06, objptr
0f564     65 00 00 FF 
0f568     58 E4 85 F1 | 	sub	objptr, ##51800
0f56c     00 00 40 FF 
0f570     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f574     65 00 00 CF 
0f578     58 E4 05 C1 |  if_b	add	objptr, ##51800
0f57c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f580     65 00 00 CF 
0f584     58 E4 85 C1 |  if_b	sub	objptr, ##51800
0f588     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f58c     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f590     98 01 90 3D |  if_ae	jmp	#LR__1210
0f594                 | '   if leds and 2 = 2 then 
0f594     7B 00 00 FF 
0f598     8C E4 05 F1 | 	add	objptr, ##63116
0f59c     F2 1E 0A FB | 	rdlong	local01, objptr wz
0f5a0     7B 00 00 FF 
0f5a4     8C E4 85 F1 | 	sub	objptr, ##63116
0f5a8     58 01 90 AD |  if_e	jmp	#LR__1209
0f5ac                 | '     if key>96 andalso key<123 then
0f5ac     65 00 00 FF 
0f5b0     58 E4 05 F1 | 	add	objptr, ##51800
0f5b4     F2 1E 02 FB | 	rdlong	local01, objptr
0f5b8     65 00 00 FF 
0f5bc     58 E4 85 F1 | 	sub	objptr, ##51800
0f5c0     61 1E 16 F2 | 	cmp	local01, #97 wc
0f5c4     3C 00 90 CD |  if_b	jmp	#LR__1202
0f5c8     65 00 00 FF 
0f5cc     58 E4 05 F1 | 	add	objptr, ##51800
0f5d0     F2 1E 02 FB | 	rdlong	local01, objptr
0f5d4     65 00 00 FF 
0f5d8     58 E4 85 F1 | 	sub	objptr, ##51800
0f5dc     7B 1E 16 F2 | 	cmp	local01, #123 wc
0f5e0     20 00 90 3D |  if_ae	jmp	#LR__1202
0f5e4     65 00 00 FF 
0f5e8     58 E4 05 F1 | 	add	objptr, ##51800
0f5ec     F2 1E 02 FB | 	rdlong	local01, objptr
0f5f0     20 1E 86 F1 | 	sub	local01, #32
0f5f4     F2 1E 62 FC | 	wrlong	local01, objptr
0f5f8     65 00 00 FF 
0f5fc     58 E4 85 F1 | 	sub	objptr, ##51800
0f600     00 01 90 FD | 	jmp	#LR__1208
0f604                 | LR__1202
0f604     65 00 00 FF 
0f608     58 E4 05 F1 | 	add	objptr, ##51800
0f60c     F2 1E 02 FB | 	rdlong	local01, objptr
0f610     65 00 00 FF 
0f614     58 E4 85 F1 | 	sub	objptr, ##51800
0f618     41 1E 16 F2 | 	cmp	local01, #65 wc
0f61c     3C 00 90 CD |  if_b	jmp	#LR__1203
0f620     65 00 00 FF 
0f624     58 E4 05 F1 | 	add	objptr, ##51800
0f628     F2 1E 02 FB | 	rdlong	local01, objptr
0f62c     65 00 00 FF 
0f630     58 E4 85 F1 | 	sub	objptr, ##51800
0f634     5B 1E 16 F2 | 	cmp	local01, #91 wc
0f638     20 00 90 3D |  if_ae	jmp	#LR__1203
0f63c     65 00 00 FF 
0f640     58 E4 05 F1 | 	add	objptr, ##51800
0f644     F2 1E 02 FB | 	rdlong	local01, objptr
0f648     20 1E 06 F1 | 	add	local01, #32
0f64c     F2 1E 62 FC | 	wrlong	local01, objptr
0f650     65 00 00 FF 
0f654     58 E4 85 F1 | 	sub	objptr, ##51800
0f658     A8 00 90 FD | 	jmp	#LR__1207
0f65c                 | LR__1203
0f65c     65 00 00 FF 
0f660     58 E4 05 F1 | 	add	objptr, ##51800
0f664     F2 1E 02 FB | 	rdlong	local01, objptr
0f668     65 00 00 FF 
0f66c     58 E4 85 F1 | 	sub	objptr, ##51800
0f670     17 1E 16 F2 | 	cmp	local01, #23 wc
0f674     3C 00 90 CD |  if_b	jmp	#LR__1204
0f678     65 00 00 FF 
0f67c     58 E4 05 F1 | 	add	objptr, ##51800
0f680     F2 1E 02 FB | 	rdlong	local01, objptr
0f684     65 00 00 FF 
0f688     58 E4 85 F1 | 	sub	objptr, ##51800
0f68c     20 1E 16 F2 | 	cmp	local01, #32 wc
0f690     20 00 90 3D |  if_ae	jmp	#LR__1204
0f694     65 00 00 FF 
0f698     58 E4 05 F1 | 	add	objptr, ##51800
0f69c     F2 1E 02 FB | 	rdlong	local01, objptr
0f6a0     09 1E 86 F1 | 	sub	local01, #9
0f6a4     F2 1E 62 FC | 	wrlong	local01, objptr
0f6a8     65 00 00 FF 
0f6ac     58 E4 85 F1 | 	sub	objptr, ##51800
0f6b0     50 00 90 FD | 	jmp	#LR__1206
0f6b4                 | LR__1204
0f6b4     65 00 00 FF 
0f6b8     58 E4 05 F1 | 	add	objptr, ##51800
0f6bc     F2 20 02 FB | 	rdlong	local02, objptr
0f6c0     65 00 00 FF 
0f6c4     58 E4 85 F1 | 	sub	objptr, ##51800
0f6c8     0E 20 16 F2 | 	cmp	local02, #14 wc
0f6cc     34 00 90 CD |  if_b	jmp	#LR__1205
0f6d0     65 00 00 FF 
0f6d4     58 E4 05 F1 | 	add	objptr, ##51800
0f6d8     F2 1E 02 FB | 	rdlong	local01, objptr
0f6dc     65 00 00 FF 
0f6e0     58 E4 85 F1 | 	sub	objptr, ##51800
0f6e4     17 1E 16 F2 | 	cmp	local01, #23 wc
0f6e8     7B 00 00 CF 
0f6ec     9C E4 05 C1 |  if_b	add	objptr, ##63132
0f6f0     F2 20 02 CB |  if_b	rdlong	local02, objptr
0f6f4     27 20 06 C1 |  if_b	add	local02, #39
0f6f8     F2 20 62 CC |  if_b	wrlong	local02, objptr
0f6fc     7B 00 00 CF 
0f700     9C E4 85 C1 |  if_b	sub	objptr, ##63132
0f704                 | LR__1205
0f704                 | LR__1206
0f704                 | LR__1207
0f704                 | LR__1208
0f704                 | LR__1209
0f704     65 00 00 FF 
0f708     58 E4 05 F1 | 	add	objptr, ##51800
0f70c     F2 12 02 FB | 	rdlong	arg01, objptr
0f710     65 00 00 FF 
0f714     58 E4 85 F1 | 	sub	objptr, ##51800
0f718     20 9C B0 FD | 	call	#_scantochar
0f71c     FD 12 02 F6 | 	mov	arg01, result1
0f720     C4 F2 B0 FD | 	call	#__system__Chr_S
0f724     A7 FA 61 FC | 	wrlong	result1, fp
0f728     0C 00 90 FD | 	jmp	#LR__1211
0f72c                 | LR__1210
0f72c     61 01 00 FF 
0f730     EF 21 06 F6 | 	mov	local02, ##@LR__4951
0f734     A7 20 62 FC | 	wrlong	local02, fp
0f738                 | LR__1211
0f738     08 4E 05 F1 | 	add	fp, #8
0f73c     A7 3E 68 FC | 	wrlong	#31, fp
0f740     08 4E 85 F1 | 	sub	fp, #8
0f744     A7 12 02 F6 | 	mov	arg01, fp
0f748     2C AB BF FD | 	call	#_push
0f74c     A7 F0 03 F6 | 	mov	ptra, fp
0f750     B2 00 A0 FD | 	call	#popregs_
0f754                 | _do_inkey_ret
0f754     2D 00 64 FD | 	ret
0f758                 | 
0f758                 | '  
0f758                 | ' '------------------------ Operators 
0f758                 | ' 
0f758                 | ' sub do_plus 
0f758                 | _do_plus
0f758     05 4A 05 F6 | 	mov	COUNT_, #5
0f75c     A8 00 A0 FD | 	call	#pushregs_
0f760     18 F0 07 F1 | 	add	ptra, #24
0f764     78 AA BF FD | 	call	#_pop
0f768     FD 1E 02 F6 | 	mov	local01, result1
0f76c     FE 20 02 F6 | 	mov	local02, result2
0f770     FF 22 02 F6 | 	mov	local03, result3
0f774     0C 4E 05 F1 | 	add	fp, #12
0f778     A7 1E 62 FC | 	wrlong	local01, fp
0f77c     04 4E 05 F1 | 	add	fp, #4
0f780     A7 20 62 FC | 	wrlong	local02, fp
0f784     04 4E 05 F1 | 	add	fp, #4
0f788     A7 22 62 FC | 	wrlong	local03, fp
0f78c     14 4E 85 F1 | 	sub	fp, #20
0f790     4C AA BF FD | 	call	#_pop
0f794     FF 22 02 F6 | 	mov	local03, result3
0f798     A7 FA 61 FC | 	wrlong	result1, fp
0f79c     04 4E 05 F1 | 	add	fp, #4
0f7a0     A7 FC 61 FC | 	wrlong	result2, fp
0f7a4     04 4E 05 F1 | 	add	fp, #4
0f7a8     A7 22 62 FC | 	wrlong	local03, fp
0f7ac                 | ' 
0f7ac                 | ' t2=pop()
0f7ac                 | ' t1=pop()
0f7ac                 | ' 
0f7ac                 | ' 
0f7ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0f7ac     08 4E 85 F1 | 	sub	fp, #8
0f7b0     1D 22 0E F2 | 	cmp	local03, #29 wz
0f7b4     14 4E 05 A1 |  if_e	add	fp, #20
0f7b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f7bc     14 4E 85 A1 |  if_e	sub	fp, #20
0f7c0     12 23 02 A6 |  if_e	mov	local03, local04
0f7c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f7c8     1C 00 90 5D |  if_ne	jmp	#LR__1220
0f7cc     A7 1E 02 FB | 	rdlong	local01, fp
0f7d0     0C 4E 05 F1 | 	add	fp, #12
0f7d4     A7 20 02 FB | 	rdlong	local02, fp
0f7d8     0C 4E 85 F1 | 	sub	fp, #12
0f7dc     10 1F 02 F1 | 	add	local01, local02
0f7e0     A7 1E 62 FC | 	wrlong	local01, fp
0f7e4     48 04 90 FD | 	jmp	#LR__1235
0f7e8                 | LR__1220
0f7e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0f7e8     08 4E 05 F1 | 	add	fp, #8
0f7ec     A7 1E 02 FB | 	rdlong	local01, fp
0f7f0     08 4E 85 F1 | 	sub	fp, #8
0f7f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f7f8     14 4E 05 A1 |  if_e	add	fp, #20
0f7fc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f800     14 4E 85 A1 |  if_e	sub	fp, #20
0f804     12 23 02 A6 |  if_e	mov	local03, local04
0f808     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f80c     28 00 90 5D |  if_ne	jmp	#LR__1221
0f810     A7 1E 02 FB | 	rdlong	local01, fp
0f814     0C 4E 05 F1 | 	add	fp, #12
0f818     A7 20 02 FB | 	rdlong	local02, fp
0f81c     0C 4E 85 F1 | 	sub	fp, #12
0f820     10 1F 02 F1 | 	add	local01, local02
0f824     A7 1E 62 FC | 	wrlong	local01, fp
0f828     08 4E 05 F1 | 	add	fp, #8
0f82c     A7 38 68 FC | 	wrlong	#28, fp
0f830     08 4E 85 F1 | 	sub	fp, #8
0f834     F8 03 90 FD | 	jmp	#LR__1235
0f838                 | LR__1221
0f838                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f838     08 4E 05 F1 | 	add	fp, #8
0f83c     A7 1E 02 FB | 	rdlong	local01, fp
0f840     08 4E 85 F1 | 	sub	fp, #8
0f844     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f848     14 4E 05 A1 |  if_e	add	fp, #20
0f84c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f850     14 4E 85 A1 |  if_e	sub	fp, #20
0f854     12 23 02 A6 |  if_e	mov	local03, local04
0f858     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f85c     30 00 90 5D |  if_ne	jmp	#LR__1222
0f860     A7 12 02 FB | 	rdlong	arg01, fp
0f864     F0 F6 B0 FD | 	call	#__system___float_fromuns
0f868     FD 12 02 F6 | 	mov	arg01, result1
0f86c     0C 4E 05 F1 | 	add	fp, #12
0f870     A7 14 02 FB | 	rdlong	arg02, fp
0f874     0C 4E 85 F1 | 	sub	fp, #12
0f878     10 F7 B0 FD | 	call	#__system___float_add
0f87c     A7 FA 61 FC | 	wrlong	result1, fp
0f880     08 4E 05 F1 | 	add	fp, #8
0f884     A7 3C 68 FC | 	wrlong	#30, fp
0f888     08 4E 85 F1 | 	sub	fp, #8
0f88c     A0 03 90 FD | 	jmp	#LR__1235
0f890                 | LR__1222
0f890                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0f890     08 4E 05 F1 | 	add	fp, #8
0f894     A7 1E 02 FB | 	rdlong	local01, fp
0f898     08 4E 85 F1 | 	sub	fp, #8
0f89c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f8a0     14 4E 05 A1 |  if_e	add	fp, #20
0f8a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f8ac     12 23 02 A6 |  if_e	mov	local03, local04
0f8b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f8b4     1C 00 90 5D |  if_ne	jmp	#LR__1223
0f8b8     A7 1E 02 FB | 	rdlong	local01, fp
0f8bc     0C 4E 05 F1 | 	add	fp, #12
0f8c0     A7 20 02 FB | 	rdlong	local02, fp
0f8c4     0C 4E 85 F1 | 	sub	fp, #12
0f8c8     10 1F 02 F1 | 	add	local01, local02
0f8cc     A7 1E 62 FC | 	wrlong	local01, fp
0f8d0     5C 03 90 FD | 	jmp	#LR__1235
0f8d4                 | LR__1223
0f8d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0f8d4     08 4E 05 F1 | 	add	fp, #8
0f8d8     A7 1E 02 FB | 	rdlong	local01, fp
0f8dc     08 4E 85 F1 | 	sub	fp, #8
0f8e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f8e4     14 4E 05 A1 |  if_e	add	fp, #20
0f8e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8ec     14 4E 85 A1 |  if_e	sub	fp, #20
0f8f0     12 23 02 A6 |  if_e	mov	local03, local04
0f8f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f8f8     1C 00 90 5D |  if_ne	jmp	#LR__1224
0f8fc     A7 1E 02 FB | 	rdlong	local01, fp
0f900     0C 4E 05 F1 | 	add	fp, #12
0f904     A7 20 02 FB | 	rdlong	local02, fp
0f908     0C 4E 85 F1 | 	sub	fp, #12
0f90c     10 1F 02 F1 | 	add	local01, local02
0f910     A7 1E 62 FC | 	wrlong	local01, fp
0f914     18 03 90 FD | 	jmp	#LR__1235
0f918                 | LR__1224
0f918                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f918     08 4E 05 F1 | 	add	fp, #8
0f91c     A7 1E 02 FB | 	rdlong	local01, fp
0f920     08 4E 85 F1 | 	sub	fp, #8
0f924     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f928     14 4E 05 A1 |  if_e	add	fp, #20
0f92c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f930     14 4E 85 A1 |  if_e	sub	fp, #20
0f934     12 23 02 A6 |  if_e	mov	local03, local04
0f938     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f93c     40 00 90 5D |  if_ne	jmp	#LR__1225
0f940     A7 12 02 FB | 	rdlong	arg01, fp
0f944     09 13 52 F6 | 	abs	arg01, arg01 wc
0f948     1F 26 C6 C9 |  if_b	decod	local05, #31
0f94c     00 26 06 36 |  if_ae	mov	local05, #0
0f950     04 F6 B0 FD | 	call	#__system___float_fromuns
0f954     13 FB 61 F5 | 	xor	result1, local05
0f958     FD 12 02 F6 | 	mov	arg01, result1
0f95c     0C 4E 05 F1 | 	add	fp, #12
0f960     A7 14 02 FB | 	rdlong	arg02, fp
0f964     0C 4E 85 F1 | 	sub	fp, #12
0f968     20 F6 B0 FD | 	call	#__system___float_add
0f96c     A7 FA 61 FC | 	wrlong	result1, fp
0f970     08 4E 05 F1 | 	add	fp, #8
0f974     A7 3C 68 FC | 	wrlong	#30, fp
0f978     08 4E 85 F1 | 	sub	fp, #8
0f97c     B0 02 90 FD | 	jmp	#LR__1235
0f980                 | LR__1225
0f980                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0f980     08 4E 05 F1 | 	add	fp, #8
0f984     A7 1E 02 FB | 	rdlong	local01, fp
0f988     08 4E 85 F1 | 	sub	fp, #8
0f98c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f990     14 4E 05 A1 |  if_e	add	fp, #20
0f994     A7 24 02 AB |  if_e	rdlong	local04, fp
0f998     14 4E 85 A1 |  if_e	sub	fp, #20
0f99c     12 23 02 A6 |  if_e	mov	local03, local04
0f9a0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f9a4     28 00 90 5D |  if_ne	jmp	#LR__1226
0f9a8     A7 1E 02 FB | 	rdlong	local01, fp
0f9ac     0C 4E 05 F1 | 	add	fp, #12
0f9b0     A7 12 02 FB | 	rdlong	arg01, fp
0f9b4     0C 4E 85 F1 | 	sub	fp, #12
0f9b8     9C F5 B0 FD | 	call	#__system___float_fromuns
0f9bc     FD 14 02 F6 | 	mov	arg02, result1
0f9c0     0F 13 02 F6 | 	mov	arg01, local01
0f9c4     C4 F5 B0 FD | 	call	#__system___float_add
0f9c8     A7 FA 61 FC | 	wrlong	result1, fp
0f9cc     60 02 90 FD | 	jmp	#LR__1235
0f9d0                 | LR__1226
0f9d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0f9d0     08 4E 05 F1 | 	add	fp, #8
0f9d4     A7 1E 02 FB | 	rdlong	local01, fp
0f9d8     08 4E 85 F1 | 	sub	fp, #8
0f9dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f9e0     14 4E 05 A1 |  if_e	add	fp, #20
0f9e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f9ec     12 23 02 A6 |  if_e	mov	local03, local04
0f9f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f9f4     38 00 90 5D |  if_ne	jmp	#LR__1227
0f9f8     A7 1E 02 FB | 	rdlong	local01, fp
0f9fc     0C 4E 05 F1 | 	add	fp, #12
0fa00     A7 12 02 FB | 	rdlong	arg01, fp
0fa04     0C 4E 85 F1 | 	sub	fp, #12
0fa08     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa0c     1F 26 C6 C9 |  if_b	decod	local05, #31
0fa10     00 26 06 36 |  if_ae	mov	local05, #0
0fa14     40 F5 B0 FD | 	call	#__system___float_fromuns
0fa18     13 FB 61 F5 | 	xor	result1, local05
0fa1c     FD 14 02 F6 | 	mov	arg02, result1
0fa20     0F 13 02 F6 | 	mov	arg01, local01
0fa24     64 F5 B0 FD | 	call	#__system___float_add
0fa28     A7 FA 61 FC | 	wrlong	result1, fp
0fa2c     00 02 90 FD | 	jmp	#LR__1235
0fa30                 | LR__1227
0fa30                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0fa30     08 4E 05 F1 | 	add	fp, #8
0fa34     A7 1E 02 FB | 	rdlong	local01, fp
0fa38     08 4E 85 F1 | 	sub	fp, #8
0fa3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa40     14 4E 05 A1 |  if_e	add	fp, #20
0fa44     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa48     14 4E 85 A1 |  if_e	sub	fp, #20
0fa4c     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0fa50     1C 00 90 5D |  if_ne	jmp	#LR__1228
0fa54     A7 12 02 FB | 	rdlong	arg01, fp
0fa58     0C 4E 05 F1 | 	add	fp, #12
0fa5c     A7 14 02 FB | 	rdlong	arg02, fp
0fa60     0C 4E 85 F1 | 	sub	fp, #12
0fa64     24 F5 B0 FD | 	call	#__system___float_add
0fa68     A7 FA 61 FC | 	wrlong	result1, fp
0fa6c     C0 01 90 FD | 	jmp	#LR__1235
0fa70                 | LR__1228
0fa70                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0fa70     08 4E 05 F1 | 	add	fp, #8
0fa74     A7 1E 02 FB | 	rdlong	local01, fp
0fa78     08 4E 85 F1 | 	sub	fp, #8
0fa7c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fa80     24 00 90 5D |  if_ne	jmp	#LR__1229
0fa84     14 4E 05 F1 | 	add	fp, #20
0fa88     A7 22 02 FB | 	rdlong	local03, fp
0fa8c     14 4E 85 F1 | 	sub	fp, #20
0fa90     1F 22 0E F2 | 	cmp	local03, #31 wz
0fa94     A7 04 68 5C |  if_ne	wrlong	#2, fp
0fa98     08 4E 05 51 |  if_ne	add	fp, #8
0fa9c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0faa0     08 4E 85 51 |  if_ne	sub	fp, #8
0faa4     88 01 90 5D |  if_ne	jmp	#LR__1235
0faa8                 | LR__1229
0faa8                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0faa8     14 4E 05 F1 | 	add	fp, #20
0faac     A7 1E 02 FB | 	rdlong	local01, fp
0fab0     14 4E 85 F1 | 	sub	fp, #20
0fab4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fab8     24 00 90 5D |  if_ne	jmp	#LR__1230
0fabc     08 4E 05 F1 | 	add	fp, #8
0fac0     A7 22 02 FB | 	rdlong	local03, fp
0fac4     08 4E 85 F1 | 	sub	fp, #8
0fac8     1F 22 0E F2 | 	cmp	local03, #31 wz
0facc     A7 04 68 5C |  if_ne	wrlong	#2, fp
0fad0     08 4E 05 51 |  if_ne	add	fp, #8
0fad4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fad8     08 4E 85 51 |  if_ne	sub	fp, #8
0fadc     50 01 90 5D |  if_ne	jmp	#LR__1235
0fae0                 | LR__1230
0fae0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0fae0     08 4E 05 F1 | 	add	fp, #8
0fae4     A7 1E 02 FB | 	rdlong	local01, fp
0fae8     08 4E 85 F1 | 	sub	fp, #8
0faec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0faf0     14 4E 05 A1 |  if_e	add	fp, #20
0faf4     A7 22 02 AB |  if_e	rdlong	local03, fp
0faf8     14 4E 85 A1 |  if_e	sub	fp, #20
0fafc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fb00     1C 00 90 5D |  if_ne	jmp	#LR__1231
0fb04     A7 12 02 FB | 	rdlong	arg01, fp
0fb08     0C 4E 05 F1 | 	add	fp, #12
0fb0c     A7 14 02 FB | 	rdlong	arg02, fp
0fb10     0C 4E 85 F1 | 	sub	fp, #12
0fb14     24 CD B0 FD | 	call	#__system___string_concat
0fb18     A7 FA 61 FC | 	wrlong	result1, fp
0fb1c     10 01 90 FD | 	jmp	#LR__1235
0fb20                 | LR__1231
0fb20                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0fb20     08 4E 05 F1 | 	add	fp, #8
0fb24     A7 1E 02 FB | 	rdlong	local01, fp
0fb28     08 4E 85 F1 | 	sub	fp, #8
0fb2c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fb30     14 4E 05 A1 |  if_e	add	fp, #20
0fb34     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb38     14 4E 85 A1 |  if_e	sub	fp, #20
0fb3c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fb40     30 00 90 5D |  if_ne	jmp	#LR__1232
0fb44     A7 12 02 FB | 	rdlong	arg01, fp
0fb48     20 E9 BF FD | 	call	#_convertstring
0fb4c     FD 12 02 F6 | 	mov	arg01, result1
0fb50     0C 4E 05 F1 | 	add	fp, #12
0fb54     A7 14 02 FB | 	rdlong	arg02, fp
0fb58     0C 4E 85 F1 | 	sub	fp, #12
0fb5c     DC CC B0 FD | 	call	#__system___string_concat
0fb60     A7 FA 61 FC | 	wrlong	result1, fp
0fb64     08 4E 05 F1 | 	add	fp, #8
0fb68     A7 3E 68 FC | 	wrlong	#31, fp
0fb6c     08 4E 85 F1 | 	sub	fp, #8
0fb70     BC 00 90 FD | 	jmp	#LR__1235
0fb74                 | LR__1232
0fb74                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0fb74     08 4E 05 F1 | 	add	fp, #8
0fb78     A7 1E 02 FB | 	rdlong	local01, fp
0fb7c     08 4E 85 F1 | 	sub	fp, #8
0fb80     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fb84     14 4E 05 A1 |  if_e	add	fp, #20
0fb88     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb8c     14 4E 85 A1 |  if_e	sub	fp, #20
0fb90     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fb94     28 00 90 5D |  if_ne	jmp	#LR__1233
0fb98     A7 1E 02 FB | 	rdlong	local01, fp
0fb9c     0C 4E 05 F1 | 	add	fp, #12
0fba0     A7 12 02 FB | 	rdlong	arg01, fp
0fba4     0C 4E 85 F1 | 	sub	fp, #12
0fba8     C0 E8 BF FD | 	call	#_convertstring
0fbac     FD 14 02 F6 | 	mov	arg02, result1
0fbb0     0F 13 02 F6 | 	mov	arg01, local01
0fbb4     84 CC B0 FD | 	call	#__system___string_concat
0fbb8     A7 FA 61 FC | 	wrlong	result1, fp
0fbbc     70 00 90 FD | 	jmp	#LR__1235
0fbc0                 | LR__1233
0fbc0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0fbc0     08 4E 05 F1 | 	add	fp, #8
0fbc4     A7 1E 02 FB | 	rdlong	local01, fp
0fbc8     08 4E 85 F1 | 	sub	fp, #8
0fbcc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fbd0     14 4E 05 A1 |  if_e	add	fp, #20
0fbd4     A7 22 02 AB |  if_e	rdlong	local03, fp
0fbd8     14 4E 85 A1 |  if_e	sub	fp, #20
0fbdc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fbe0     3C 00 90 5D |  if_ne	jmp	#LR__1234
0fbe4     A7 12 02 FB | 	rdlong	arg01, fp
0fbe8     80 E8 BF FD | 	call	#_convertstring
0fbec     FD 1E 02 F6 | 	mov	local01, result1
0fbf0     0C 4E 05 F1 | 	add	fp, #12
0fbf4     A7 12 02 FB | 	rdlong	arg01, fp
0fbf8     0C 4E 85 F1 | 	sub	fp, #12
0fbfc     6C E8 BF FD | 	call	#_convertstring
0fc00     FD 14 02 F6 | 	mov	arg02, result1
0fc04     0F 13 02 F6 | 	mov	arg01, local01
0fc08     30 CC B0 FD | 	call	#__system___string_concat
0fc0c     A7 FA 61 FC | 	wrlong	result1, fp
0fc10     08 4E 05 F1 | 	add	fp, #8
0fc14     A7 3E 68 FC | 	wrlong	#31, fp
0fc18     08 4E 85 F1 | 	sub	fp, #8
0fc1c     10 00 90 FD | 	jmp	#LR__1235
0fc20                 | LR__1234
0fc20     A7 08 68 FC | 	wrlong	#4, fp
0fc24     08 4E 05 F1 | 	add	fp, #8
0fc28     A7 FE 69 FC | 	wrlong	#255, fp
0fc2c     08 4E 85 F1 | 	sub	fp, #8
0fc30                 | LR__1235
0fc30     A7 12 02 F6 | 	mov	arg01, fp
0fc34     40 A6 BF FD | 	call	#_push
0fc38     A7 F0 03 F6 | 	mov	ptra, fp
0fc3c     B2 00 A0 FD | 	call	#popregs_
0fc40                 | _do_plus_ret
0fc40     2D 00 64 FD | 	ret
0fc44                 | 
0fc44                 | ' 
0fc44                 | ' sub do_minus
0fc44                 | _do_minus
0fc44     05 4A 05 F6 | 	mov	COUNT_, #5
0fc48     A8 00 A0 FD | 	call	#pushregs_
0fc4c     18 F0 07 F1 | 	add	ptra, #24
0fc50     8C A5 BF FD | 	call	#_pop
0fc54     FD 1E 02 F6 | 	mov	local01, result1
0fc58     FE 20 02 F6 | 	mov	local02, result2
0fc5c     FF 22 02 F6 | 	mov	local03, result3
0fc60     0C 4E 05 F1 | 	add	fp, #12
0fc64     A7 1E 62 FC | 	wrlong	local01, fp
0fc68     04 4E 05 F1 | 	add	fp, #4
0fc6c     A7 20 62 FC | 	wrlong	local02, fp
0fc70     04 4E 05 F1 | 	add	fp, #4
0fc74     A7 22 62 FC | 	wrlong	local03, fp
0fc78     14 4E 85 F1 | 	sub	fp, #20
0fc7c     60 A5 BF FD | 	call	#_pop
0fc80     FF 22 02 F6 | 	mov	local03, result3
0fc84     A7 FA 61 FC | 	wrlong	result1, fp
0fc88     04 4E 05 F1 | 	add	fp, #4
0fc8c     A7 FC 61 FC | 	wrlong	result2, fp
0fc90     04 4E 05 F1 | 	add	fp, #4
0fc94     A7 22 62 FC | 	wrlong	local03, fp
0fc98                 | ' 
0fc98                 | ' t2=pop()
0fc98                 | ' t1=pop()
0fc98                 | ' 
0fc98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0fc98     08 4E 85 F1 | 	sub	fp, #8
0fc9c     1D 22 0E F2 | 	cmp	local03, #29 wz
0fca0     14 4E 05 A1 |  if_e	add	fp, #20
0fca4     A7 24 02 AB |  if_e	rdlong	local04, fp
0fca8     14 4E 85 A1 |  if_e	sub	fp, #20
0fcac     12 23 02 A6 |  if_e	mov	local03, local04
0fcb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fcb4     5C 00 90 5D |  if_ne	jmp	#LR__1241
0fcb8                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0fcb8     0C 4E 05 F1 | 	add	fp, #12
0fcbc     A7 1E 02 FB | 	rdlong	local01, fp
0fcc0     0C 4E 85 F1 | 	sub	fp, #12
0fcc4     A7 22 02 FB | 	rdlong	local03, fp
0fcc8     11 1F 12 F2 | 	cmp	local01, local03 wc
0fccc     1C 00 90 3D |  if_ae	jmp	#LR__1240
0fcd0     A7 1E 02 FB | 	rdlong	local01, fp
0fcd4     0C 4E 05 F1 | 	add	fp, #12
0fcd8     A7 20 02 FB | 	rdlong	local02, fp
0fcdc     0C 4E 85 F1 | 	sub	fp, #12
0fce0     10 1F 82 F1 | 	sub	local01, local02
0fce4     A7 1E 62 FC | 	wrlong	local01, fp
0fce8     F4 02 90 FD | 	jmp	#LR__1250
0fcec                 | LR__1240
0fcec     A7 1E 02 FB | 	rdlong	local01, fp
0fcf0     0C 4E 05 F1 | 	add	fp, #12
0fcf4     A7 20 02 FB | 	rdlong	local02, fp
0fcf8     0C 4E 85 F1 | 	sub	fp, #12
0fcfc     10 1F 82 F1 | 	sub	local01, local02
0fd00     A7 1E 62 FC | 	wrlong	local01, fp
0fd04     08 4E 05 F1 | 	add	fp, #8
0fd08     A7 38 68 FC | 	wrlong	#28, fp
0fd0c     08 4E 85 F1 | 	sub	fp, #8
0fd10     CC 02 90 FD | 	jmp	#LR__1250
0fd14                 | LR__1241
0fd14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0fd14     08 4E 05 F1 | 	add	fp, #8
0fd18     A7 1E 02 FB | 	rdlong	local01, fp
0fd1c     08 4E 85 F1 | 	sub	fp, #8
0fd20     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fd24     14 4E 05 A1 |  if_e	add	fp, #20
0fd28     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd2c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd30     12 23 02 A6 |  if_e	mov	local03, local04
0fd34     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fd38     28 00 90 5D |  if_ne	jmp	#LR__1242
0fd3c     A7 1E 02 FB | 	rdlong	local01, fp
0fd40     0C 4E 05 F1 | 	add	fp, #12
0fd44     A7 20 02 FB | 	rdlong	local02, fp
0fd48     0C 4E 85 F1 | 	sub	fp, #12
0fd4c     10 1F 82 F1 | 	sub	local01, local02
0fd50     A7 1E 62 FC | 	wrlong	local01, fp
0fd54     08 4E 05 F1 | 	add	fp, #8
0fd58     A7 38 68 FC | 	wrlong	#28, fp
0fd5c     08 4E 85 F1 | 	sub	fp, #8
0fd60     7C 02 90 FD | 	jmp	#LR__1250
0fd64                 | LR__1242
0fd64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0fd64     08 4E 05 F1 | 	add	fp, #8
0fd68     A7 1E 02 FB | 	rdlong	local01, fp
0fd6c     08 4E 85 F1 | 	sub	fp, #8
0fd70     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fd74     14 4E 05 A1 |  if_e	add	fp, #20
0fd78     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd7c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd80     12 23 02 A6 |  if_e	mov	local03, local04
0fd84     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fd88     34 00 90 5D |  if_ne	jmp	#LR__1243
0fd8c     A7 12 02 FB | 	rdlong	arg01, fp
0fd90     C4 F1 B0 FD | 	call	#__system___float_fromuns
0fd94     FD 12 02 F6 | 	mov	arg01, result1
0fd98     0C 4E 05 F1 | 	add	fp, #12
0fd9c     A7 14 02 FB | 	rdlong	arg02, fp
0fda0     0C 4E 85 F1 | 	sub	fp, #12
0fda4     1F 14 E6 F4 | 	bitnot	arg02, #31
0fda8     E0 F1 B0 FD | 	call	#__system___float_add
0fdac     A7 FA 61 FC | 	wrlong	result1, fp
0fdb0     08 4E 05 F1 | 	add	fp, #8
0fdb4     A7 3C 68 FC | 	wrlong	#30, fp
0fdb8     08 4E 85 F1 | 	sub	fp, #8
0fdbc     20 02 90 FD | 	jmp	#LR__1250
0fdc0                 | LR__1243
0fdc0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0fdc0     08 4E 05 F1 | 	add	fp, #8
0fdc4     A7 1E 02 FB | 	rdlong	local01, fp
0fdc8     08 4E 85 F1 | 	sub	fp, #8
0fdcc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fdd0     14 4E 05 A1 |  if_e	add	fp, #20
0fdd4     A7 24 02 AB |  if_e	rdlong	local04, fp
0fdd8     14 4E 85 A1 |  if_e	sub	fp, #20
0fddc     12 23 02 A6 |  if_e	mov	local03, local04
0fde0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fde4     1C 00 90 5D |  if_ne	jmp	#LR__1244
0fde8     A7 1E 02 FB | 	rdlong	local01, fp
0fdec     0C 4E 05 F1 | 	add	fp, #12
0fdf0     A7 20 02 FB | 	rdlong	local02, fp
0fdf4     0C 4E 85 F1 | 	sub	fp, #12
0fdf8     10 1F 82 F1 | 	sub	local01, local02
0fdfc     A7 1E 62 FC | 	wrlong	local01, fp
0fe00     DC 01 90 FD | 	jmp	#LR__1250
0fe04                 | LR__1244
0fe04                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0fe04     08 4E 05 F1 | 	add	fp, #8
0fe08     A7 1E 02 FB | 	rdlong	local01, fp
0fe0c     08 4E 85 F1 | 	sub	fp, #8
0fe10     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe14     14 4E 05 A1 |  if_e	add	fp, #20
0fe18     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe1c     14 4E 85 A1 |  if_e	sub	fp, #20
0fe20     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0fe24     1C 00 90 5D |  if_ne	jmp	#LR__1245
0fe28     A7 1E 02 FB | 	rdlong	local01, fp
0fe2c     0C 4E 05 F1 | 	add	fp, #12
0fe30     A7 20 02 FB | 	rdlong	local02, fp
0fe34     0C 4E 85 F1 | 	sub	fp, #12
0fe38     10 1F 82 F1 | 	sub	local01, local02
0fe3c     A7 1E 62 FC | 	wrlong	local01, fp
0fe40     9C 01 90 FD | 	jmp	#LR__1250
0fe44                 | LR__1245
0fe44                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0fe44     08 4E 05 F1 | 	add	fp, #8
0fe48     A7 1E 02 FB | 	rdlong	local01, fp
0fe4c     08 4E 85 F1 | 	sub	fp, #8
0fe50     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe54     14 4E 05 A1 |  if_e	add	fp, #20
0fe58     A7 22 02 AB |  if_e	rdlong	local03, fp
0fe5c     14 4E 85 A1 |  if_e	sub	fp, #20
0fe60     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fe64     44 00 90 5D |  if_ne	jmp	#LR__1246
0fe68     A7 12 02 FB | 	rdlong	arg01, fp
0fe6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fe70     1F 26 C6 C9 |  if_b	decod	local05, #31
0fe74     00 26 06 36 |  if_ae	mov	local05, #0
0fe78     DC F0 B0 FD | 	call	#__system___float_fromuns
0fe7c     13 FB 61 F5 | 	xor	result1, local05
0fe80     FD 12 02 F6 | 	mov	arg01, result1
0fe84     0C 4E 05 F1 | 	add	fp, #12
0fe88     A7 14 02 FB | 	rdlong	arg02, fp
0fe8c     0C 4E 85 F1 | 	sub	fp, #12
0fe90     1F 14 E6 F4 | 	bitnot	arg02, #31
0fe94     F4 F0 B0 FD | 	call	#__system___float_add
0fe98     A7 FA 61 FC | 	wrlong	result1, fp
0fe9c     08 4E 05 F1 | 	add	fp, #8
0fea0     A7 3C 68 FC | 	wrlong	#30, fp
0fea4     08 4E 85 F1 | 	sub	fp, #8
0fea8     34 01 90 FD | 	jmp	#LR__1250
0feac                 | LR__1246
0feac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0feac     08 4E 05 F1 | 	add	fp, #8
0feb0     A7 1E 02 FB | 	rdlong	local01, fp
0feb4     08 4E 85 F1 | 	sub	fp, #8
0feb8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0febc     14 4E 05 A1 |  if_e	add	fp, #20
0fec0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fec4     14 4E 85 A1 |  if_e	sub	fp, #20
0fec8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fecc     2C 00 90 5D |  if_ne	jmp	#LR__1247
0fed0     A7 1E 02 FB | 	rdlong	local01, fp
0fed4     0C 4E 05 F1 | 	add	fp, #12
0fed8     A7 12 02 FB | 	rdlong	arg01, fp
0fedc     0C 4E 85 F1 | 	sub	fp, #12
0fee0     74 F0 B0 FD | 	call	#__system___float_fromuns
0fee4     FD 14 02 F6 | 	mov	arg02, result1
0fee8     0F 13 02 F6 | 	mov	arg01, local01
0feec     1F 14 E6 F4 | 	bitnot	arg02, #31
0fef0     98 F0 B0 FD | 	call	#__system___float_add
0fef4     A7 FA 61 FC | 	wrlong	result1, fp
0fef8     E4 00 90 FD | 	jmp	#LR__1250
0fefc                 | LR__1247
0fefc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0fefc     08 4E 05 F1 | 	add	fp, #8
0ff00     A7 1E 02 FB | 	rdlong	local01, fp
0ff04     08 4E 85 F1 | 	sub	fp, #8
0ff08     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff0c     14 4E 05 A1 |  if_e	add	fp, #20
0ff10     A7 22 02 AB |  if_e	rdlong	local03, fp
0ff14     14 4E 85 A1 |  if_e	sub	fp, #20
0ff18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff1c     3C 00 90 5D |  if_ne	jmp	#LR__1248
0ff20     A7 1E 02 FB | 	rdlong	local01, fp
0ff24     0C 4E 05 F1 | 	add	fp, #12
0ff28     A7 12 02 FB | 	rdlong	arg01, fp
0ff2c     0C 4E 85 F1 | 	sub	fp, #12
0ff30     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff34     1F 26 C6 C9 |  if_b	decod	local05, #31
0ff38     00 26 06 36 |  if_ae	mov	local05, #0
0ff3c     18 F0 B0 FD | 	call	#__system___float_fromuns
0ff40     13 FB 61 F5 | 	xor	result1, local05
0ff44     FD 14 02 F6 | 	mov	arg02, result1
0ff48     0F 13 02 F6 | 	mov	arg01, local01
0ff4c     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff50     38 F0 B0 FD | 	call	#__system___float_add
0ff54     A7 FA 61 FC | 	wrlong	result1, fp
0ff58     84 00 90 FD | 	jmp	#LR__1250
0ff5c                 | LR__1248
0ff5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0ff5c     08 4E 05 F1 | 	add	fp, #8
0ff60     A7 1E 02 FB | 	rdlong	local01, fp
0ff64     08 4E 85 F1 | 	sub	fp, #8
0ff68     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff6c     14 4E 05 A1 |  if_e	add	fp, #20
0ff70     A7 22 02 AB |  if_e	rdlong	local03, fp
0ff74     14 4E 85 A1 |  if_e	sub	fp, #20
0ff78     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff7c     20 00 90 5D |  if_ne	jmp	#LR__1249
0ff80     A7 12 02 FB | 	rdlong	arg01, fp
0ff84     0C 4E 05 F1 | 	add	fp, #12
0ff88     A7 14 02 FB | 	rdlong	arg02, fp
0ff8c     0C 4E 85 F1 | 	sub	fp, #12
0ff90     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff94     F4 EF B0 FD | 	call	#__system___float_add
0ff98     A7 FA 61 FC | 	wrlong	result1, fp
0ff9c     40 00 90 FD | 	jmp	#LR__1250
0ffa0                 | LR__1249
0ffa0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0ffa0     08 4E 05 F1 | 	add	fp, #8
0ffa4     A7 1E 02 FB | 	rdlong	local01, fp
0ffa8     08 4E 85 F1 | 	sub	fp, #8
0ffac     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ffb0     14 4E 05 51 |  if_ne	add	fp, #20
0ffb4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ffb8     14 4E 85 51 |  if_ne	sub	fp, #20
0ffbc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0ffc0     A7 06 68 AC |  if_e	wrlong	#3, fp
0ffc4     08 4E 05 A1 |  if_e	add	fp, #8
0ffc8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ffcc     08 4E 85 A1 |  if_e	sub	fp, #8
0ffd0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0ffd4     08 4E 05 51 |  if_ne	add	fp, #8
0ffd8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0ffdc     08 4E 85 51 |  if_ne	sub	fp, #8
0ffe0                 | LR__1250
0ffe0     A7 12 02 F6 | 	mov	arg01, fp
0ffe4     90 A2 BF FD | 	call	#_push
0ffe8     A7 F0 03 F6 | 	mov	ptra, fp
0ffec     B2 00 A0 FD | 	call	#popregs_
0fff0                 | _do_minus_ret
0fff0     2D 00 64 FD | 	ret
0fff4                 | 
0fff4                 | ' 
0fff4                 | ' sub do_and 
0fff4                 | _do_and
0fff4     03 4A 05 F6 | 	mov	COUNT_, #3
0fff8     A8 00 A0 FD | 	call	#pushregs_
0fffc     18 F0 07 F1 | 	add	ptra, #24
10000     DC A1 BF FD | 	call	#_pop
10004     FD 12 02 F6 | 	mov	arg01, result1
10008     FE 1E 02 F6 | 	mov	local01, result2
1000c     FF 20 02 F6 | 	mov	local02, result3
10010     0C 4E 05 F1 | 	add	fp, #12
10014     A7 12 62 FC | 	wrlong	arg01, fp
10018     04 4E 05 F1 | 	add	fp, #4
1001c     A7 1E 62 FC | 	wrlong	local01, fp
10020     04 4E 05 F1 | 	add	fp, #4
10024     A7 20 62 FC | 	wrlong	local02, fp
10028     14 4E 85 F1 | 	sub	fp, #20
1002c     B0 A1 BF FD | 	call	#_pop
10030     FF 22 02 F6 | 	mov	local03, result3
10034     A7 FA 61 FC | 	wrlong	result1, fp
10038     04 4E 05 F1 | 	add	fp, #4
1003c     A7 FC 61 FC | 	wrlong	result2, fp
10040     04 4E 05 F1 | 	add	fp, #4
10044     A7 22 62 FC | 	wrlong	local03, fp
10048                 | ' 
10048                 | ' t2=pop()
10048                 | ' t1=pop()
10048                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10048     08 4E 85 F1 | 	sub	fp, #8
1004c     1C 22 0E F2 | 	cmp	local03, #28 wz
10050     A7 22 02 AB |  if_e	rdlong	local03, fp
10054     A7 22 62 AC |  if_e	wrlong	local03, fp
10058     08 4E 05 A1 |  if_e	add	fp, #8
1005c     A7 3A 68 AC |  if_e	wrlong	#29, fp
10060     08 4E 85 A1 |  if_e	sub	fp, #8
10064                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10064     14 4E 05 F1 | 	add	fp, #20
10068     A7 22 02 FB | 	rdlong	local03, fp
1006c     14 4E 85 F1 | 	sub	fp, #20
10070     1C 22 0E F2 | 	cmp	local03, #28 wz
10074     18 00 90 5D |  if_ne	jmp	#LR__1260
10078     0C 4E 05 F1 | 	add	fp, #12
1007c     A7 22 02 FB | 	rdlong	local03, fp
10080     A7 22 62 FC | 	wrlong	local03, fp
10084     08 4E 05 F1 | 	add	fp, #8
10088     A7 3A 68 FC | 	wrlong	#29, fp
1008c     14 4E 85 F1 | 	sub	fp, #20
10090                 | LR__1260
10090                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
10090     08 4E 05 F1 | 	add	fp, #8
10094     A7 22 02 FB | 	rdlong	local03, fp
10098     08 4E 85 F1 | 	sub	fp, #8
1009c     1F 22 0E F2 | 	cmp	local03, #31 wz
100a0     14 4E 05 51 |  if_ne	add	fp, #20
100a4     A7 20 02 5B |  if_ne	rdlong	local02, fp
100a8     14 4E 85 51 |  if_ne	sub	fp, #20
100ac     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
100b0     08 4E 05 51 |  if_ne	add	fp, #8
100b4     A7 22 02 5B |  if_ne	rdlong	local03, fp
100b8     08 4E 85 51 |  if_ne	sub	fp, #8
100bc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
100c0     14 4E 05 51 |  if_ne	add	fp, #20
100c4     14 4E 85 51 |  if_ne	sub	fp, #20
100c8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
100cc     A7 0C 68 AC |  if_e	wrlong	#6, fp
100d0     08 4E 05 A1 |  if_e	add	fp, #8
100d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
100d8     08 4E 85 A1 |  if_e	sub	fp, #8
100dc     18 00 90 AD |  if_e	jmp	#LR__1261
100e0     A7 22 02 FB | 	rdlong	local03, fp
100e4     0C 4E 05 F1 | 	add	fp, #12
100e8     A7 1E 02 FB | 	rdlong	local01, fp
100ec     0C 4E 85 F1 | 	sub	fp, #12
100f0     0F 23 02 F5 | 	and	local03, local01
100f4     A7 22 62 FC | 	wrlong	local03, fp
100f8                 | LR__1261
100f8     A7 12 02 F6 | 	mov	arg01, fp
100fc     78 A1 BF FD | 	call	#_push
10100     A7 F0 03 F6 | 	mov	ptra, fp
10104     B2 00 A0 FD | 	call	#popregs_
10108                 | _do_and_ret
10108     2D 00 64 FD | 	ret
1010c                 | 
1010c                 | ' 
1010c                 | ' sub do_or 
1010c                 | _do_or
1010c     03 4A 05 F6 | 	mov	COUNT_, #3
10110     A8 00 A0 FD | 	call	#pushregs_
10114     18 F0 07 F1 | 	add	ptra, #24
10118     C4 A0 BF FD | 	call	#_pop
1011c     FD 12 02 F6 | 	mov	arg01, result1
10120     FE 1E 02 F6 | 	mov	local01, result2
10124     FF 20 02 F6 | 	mov	local02, result3
10128     0C 4E 05 F1 | 	add	fp, #12
1012c     A7 12 62 FC | 	wrlong	arg01, fp
10130     04 4E 05 F1 | 	add	fp, #4
10134     A7 1E 62 FC | 	wrlong	local01, fp
10138     04 4E 05 F1 | 	add	fp, #4
1013c     A7 20 62 FC | 	wrlong	local02, fp
10140     14 4E 85 F1 | 	sub	fp, #20
10144     98 A0 BF FD | 	call	#_pop
10148     FF 22 02 F6 | 	mov	local03, result3
1014c     A7 FA 61 FC | 	wrlong	result1, fp
10150     04 4E 05 F1 | 	add	fp, #4
10154     A7 FC 61 FC | 	wrlong	result2, fp
10158     04 4E 05 F1 | 	add	fp, #4
1015c     A7 22 62 FC | 	wrlong	local03, fp
10160                 | ' 
10160                 | ' t2=pop()
10160                 | ' t1=pop()
10160                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10160     08 4E 85 F1 | 	sub	fp, #8
10164     1C 22 0E F2 | 	cmp	local03, #28 wz
10168     A7 22 02 AB |  if_e	rdlong	local03, fp
1016c     A7 22 62 AC |  if_e	wrlong	local03, fp
10170     08 4E 05 A1 |  if_e	add	fp, #8
10174     A7 3A 68 AC |  if_e	wrlong	#29, fp
10178     08 4E 85 A1 |  if_e	sub	fp, #8
1017c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1017c     14 4E 05 F1 | 	add	fp, #20
10180     A7 22 02 FB | 	rdlong	local03, fp
10184     14 4E 85 F1 | 	sub	fp, #20
10188     1C 22 0E F2 | 	cmp	local03, #28 wz
1018c     18 00 90 5D |  if_ne	jmp	#LR__1270
10190     0C 4E 05 F1 | 	add	fp, #12
10194     A7 22 02 FB | 	rdlong	local03, fp
10198     A7 22 62 FC | 	wrlong	local03, fp
1019c     08 4E 05 F1 | 	add	fp, #8
101a0     A7 3A 68 FC | 	wrlong	#29, fp
101a4     14 4E 85 F1 | 	sub	fp, #20
101a8                 | LR__1270
101a8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
101a8     08 4E 05 F1 | 	add	fp, #8
101ac     A7 22 02 FB | 	rdlong	local03, fp
101b0     08 4E 85 F1 | 	sub	fp, #8
101b4     1F 22 0E F2 | 	cmp	local03, #31 wz
101b8     14 4E 05 51 |  if_ne	add	fp, #20
101bc     A7 20 02 5B |  if_ne	rdlong	local02, fp
101c0     14 4E 85 51 |  if_ne	sub	fp, #20
101c4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
101c8     08 4E 05 51 |  if_ne	add	fp, #8
101cc     A7 22 02 5B |  if_ne	rdlong	local03, fp
101d0     08 4E 85 51 |  if_ne	sub	fp, #8
101d4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
101d8     14 4E 05 51 |  if_ne	add	fp, #20
101dc     14 4E 85 51 |  if_ne	sub	fp, #20
101e0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
101e4     A7 0C 68 AC |  if_e	wrlong	#6, fp
101e8     08 4E 05 A1 |  if_e	add	fp, #8
101ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
101f0     08 4E 85 A1 |  if_e	sub	fp, #8
101f4     18 00 90 AD |  if_e	jmp	#LR__1271
101f8     A7 22 02 FB | 	rdlong	local03, fp
101fc     0C 4E 05 F1 | 	add	fp, #12
10200     A7 1E 02 FB | 	rdlong	local01, fp
10204     0C 4E 85 F1 | 	sub	fp, #12
10208     0F 23 42 F5 | 	or	local03, local01
1020c     A7 22 62 FC | 	wrlong	local03, fp
10210                 | LR__1271
10210     A7 12 02 F6 | 	mov	arg01, fp
10214     60 A0 BF FD | 	call	#_push
10218     A7 F0 03 F6 | 	mov	ptra, fp
1021c     B2 00 A0 FD | 	call	#popregs_
10220                 | _do_or_ret
10220     2D 00 64 FD | 	ret
10224                 | 
10224                 | ' 
10224                 | ' sub do_mul
10224                 | _do_mul
10224     05 4A 05 F6 | 	mov	COUNT_, #5
10228     A8 00 A0 FD | 	call	#pushregs_
1022c     18 F0 07 F1 | 	add	ptra, #24
10230     AC 9F BF FD | 	call	#_pop
10234     FD 1E 02 F6 | 	mov	local01, result1
10238     FE 20 02 F6 | 	mov	local02, result2
1023c     FF 22 02 F6 | 	mov	local03, result3
10240     0C 4E 05 F1 | 	add	fp, #12
10244     A7 1E 62 FC | 	wrlong	local01, fp
10248     04 4E 05 F1 | 	add	fp, #4
1024c     A7 20 62 FC | 	wrlong	local02, fp
10250     04 4E 05 F1 | 	add	fp, #4
10254     A7 22 62 FC | 	wrlong	local03, fp
10258     14 4E 85 F1 | 	sub	fp, #20
1025c     80 9F BF FD | 	call	#_pop
10260     FF 22 02 F6 | 	mov	local03, result3
10264     A7 FA 61 FC | 	wrlong	result1, fp
10268     04 4E 05 F1 | 	add	fp, #4
1026c     A7 FC 61 FC | 	wrlong	result2, fp
10270     04 4E 05 F1 | 	add	fp, #4
10274     A7 22 62 FC | 	wrlong	local03, fp
10278                 | ' 
10278                 | ' t2=pop()
10278                 | ' t1=pop()
10278                 | ' 
10278                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
10278     08 4E 85 F1 | 	sub	fp, #8
1027c     1D 22 0E F2 | 	cmp	local03, #29 wz
10280     14 4E 05 A1 |  if_e	add	fp, #20
10284     A7 24 02 AB |  if_e	rdlong	local04, fp
10288     14 4E 85 A1 |  if_e	sub	fp, #20
1028c     12 23 02 A6 |  if_e	mov	local03, local04
10290     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10294     20 00 90 5D |  if_ne	jmp	#LR__1280
10298     A7 20 02 FB | 	rdlong	local02, fp
1029c     0C 4E 05 F1 | 	add	fp, #12
102a0     A7 22 02 FB | 	rdlong	local03, fp
102a4     11 21 02 FD | 	qmul	local02, local03
102a8     0C 4E 85 F1 | 	sub	fp, #12
102ac     18 1E 62 FD | 	getqx	local01
102b0     A7 1E 62 FC | 	wrlong	local01, fp
102b4     C4 02 90 FD | 	jmp	#LR__1289
102b8                 | LR__1280
102b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
102b8     08 4E 05 F1 | 	add	fp, #8
102bc     A7 1E 02 FB | 	rdlong	local01, fp
102c0     08 4E 85 F1 | 	sub	fp, #8
102c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
102c8     14 4E 05 A1 |  if_e	add	fp, #20
102cc     A7 24 02 AB |  if_e	rdlong	local04, fp
102d0     14 4E 85 A1 |  if_e	sub	fp, #20
102d4     12 23 02 A6 |  if_e	mov	local03, local04
102d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
102dc     2C 00 90 5D |  if_ne	jmp	#LR__1281
102e0     A7 20 02 FB | 	rdlong	local02, fp
102e4     0C 4E 05 F1 | 	add	fp, #12
102e8     A7 22 02 FB | 	rdlong	local03, fp
102ec     11 21 02 FD | 	qmul	local02, local03
102f0     0C 4E 85 F1 | 	sub	fp, #12
102f4     18 1E 62 FD | 	getqx	local01
102f8     A7 1E 62 FC | 	wrlong	local01, fp
102fc     08 4E 05 F1 | 	add	fp, #8
10300     A7 38 68 FC | 	wrlong	#28, fp
10304     08 4E 85 F1 | 	sub	fp, #8
10308     70 02 90 FD | 	jmp	#LR__1289
1030c                 | LR__1281
1030c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1030c     08 4E 05 F1 | 	add	fp, #8
10310     A7 1E 02 FB | 	rdlong	local01, fp
10314     08 4E 85 F1 | 	sub	fp, #8
10318     1D 1E 0E F2 | 	cmp	local01, #29 wz
1031c     14 4E 05 A1 |  if_e	add	fp, #20
10320     A7 24 02 AB |  if_e	rdlong	local04, fp
10324     14 4E 85 A1 |  if_e	sub	fp, #20
10328     12 23 02 A6 |  if_e	mov	local03, local04
1032c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10330     30 00 90 5D |  if_ne	jmp	#LR__1282
10334     A7 12 02 FB | 	rdlong	arg01, fp
10338     1C EC B0 FD | 	call	#__system___float_fromuns
1033c     FD 12 02 F6 | 	mov	arg01, result1
10340     0C 4E 05 F1 | 	add	fp, #12
10344     A7 14 02 FB | 	rdlong	arg02, fp
10348     0C 4E 85 F1 | 	sub	fp, #12
1034c     0C F0 B0 FD | 	call	#__system___float_mul
10350     A7 FA 61 FC | 	wrlong	result1, fp
10354     08 4E 05 F1 | 	add	fp, #8
10358     A7 3C 68 FC | 	wrlong	#30, fp
1035c     08 4E 85 F1 | 	sub	fp, #8
10360     18 02 90 FD | 	jmp	#LR__1289
10364                 | LR__1282
10364                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
10364     08 4E 05 F1 | 	add	fp, #8
10368     A7 1E 02 FB | 	rdlong	local01, fp
1036c     08 4E 85 F1 | 	sub	fp, #8
10370     1C 1E 0E F2 | 	cmp	local01, #28 wz
10374     14 4E 05 A1 |  if_e	add	fp, #20
10378     A7 24 02 AB |  if_e	rdlong	local04, fp
1037c     14 4E 85 A1 |  if_e	sub	fp, #20
10380     12 23 02 A6 |  if_e	mov	local03, local04
10384     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10388     20 00 90 5D |  if_ne	jmp	#LR__1283
1038c     A7 20 02 FB | 	rdlong	local02, fp
10390     0C 4E 05 F1 | 	add	fp, #12
10394     A7 22 02 FB | 	rdlong	local03, fp
10398     11 21 02 FD | 	qmul	local02, local03
1039c     0C 4E 85 F1 | 	sub	fp, #12
103a0     18 1E 62 FD | 	getqx	local01
103a4     A7 1E 62 FC | 	wrlong	local01, fp
103a8     D0 01 90 FD | 	jmp	#LR__1289
103ac                 | LR__1283
103ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
103ac     08 4E 05 F1 | 	add	fp, #8
103b0     A7 1E 02 FB | 	rdlong	local01, fp
103b4     08 4E 85 F1 | 	sub	fp, #8
103b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
103bc     14 4E 05 A1 |  if_e	add	fp, #20
103c0     A7 24 02 AB |  if_e	rdlong	local04, fp
103c4     14 4E 85 A1 |  if_e	sub	fp, #20
103c8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
103cc     20 00 90 5D |  if_ne	jmp	#LR__1284
103d0     A7 20 02 FB | 	rdlong	local02, fp
103d4     0C 4E 05 F1 | 	add	fp, #12
103d8     A7 22 02 FB | 	rdlong	local03, fp
103dc     11 21 02 FD | 	qmul	local02, local03
103e0     0C 4E 85 F1 | 	sub	fp, #12
103e4     18 1E 62 FD | 	getqx	local01
103e8     A7 1E 62 FC | 	wrlong	local01, fp
103ec     8C 01 90 FD | 	jmp	#LR__1289
103f0                 | LR__1284
103f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
103f0     08 4E 05 F1 | 	add	fp, #8
103f4     A7 1E 02 FB | 	rdlong	local01, fp
103f8     08 4E 85 F1 | 	sub	fp, #8
103fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
10400     14 4E 05 A1 |  if_e	add	fp, #20
10404     A7 22 02 AB |  if_e	rdlong	local03, fp
10408     14 4E 85 A1 |  if_e	sub	fp, #20
1040c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10410     40 00 90 5D |  if_ne	jmp	#LR__1285
10414     A7 12 02 FB | 	rdlong	arg01, fp
10418     09 13 52 F6 | 	abs	arg01, arg01 wc
1041c     1F 26 C6 C9 |  if_b	decod	local05, #31
10420     00 26 06 36 |  if_ae	mov	local05, #0
10424     30 EB B0 FD | 	call	#__system___float_fromuns
10428     13 FB 61 F5 | 	xor	result1, local05
1042c     FD 12 02 F6 | 	mov	arg01, result1
10430     0C 4E 05 F1 | 	add	fp, #12
10434     A7 14 02 FB | 	rdlong	arg02, fp
10438     0C 4E 85 F1 | 	sub	fp, #12
1043c     1C EF B0 FD | 	call	#__system___float_mul
10440     A7 FA 61 FC | 	wrlong	result1, fp
10444     08 4E 05 F1 | 	add	fp, #8
10448     A7 3C 68 FC | 	wrlong	#30, fp
1044c     08 4E 85 F1 | 	sub	fp, #8
10450     28 01 90 FD | 	jmp	#LR__1289
10454                 | LR__1285
10454                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
10454     08 4E 05 F1 | 	add	fp, #8
10458     A7 1E 02 FB | 	rdlong	local01, fp
1045c     08 4E 85 F1 | 	sub	fp, #8
10460     1E 1E 0E F2 | 	cmp	local01, #30 wz
10464     14 4E 05 A1 |  if_e	add	fp, #20
10468     A7 22 02 AB |  if_e	rdlong	local03, fp
1046c     14 4E 85 A1 |  if_e	sub	fp, #20
10470     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10474     28 00 90 5D |  if_ne	jmp	#LR__1286
10478     A7 1E 02 FB | 	rdlong	local01, fp
1047c     0C 4E 05 F1 | 	add	fp, #12
10480     A7 12 02 FB | 	rdlong	arg01, fp
10484     0C 4E 85 F1 | 	sub	fp, #12
10488     CC EA B0 FD | 	call	#__system___float_fromuns
1048c     FD 14 02 F6 | 	mov	arg02, result1
10490     0F 13 02 F6 | 	mov	arg01, local01
10494     C4 EE B0 FD | 	call	#__system___float_mul
10498     A7 FA 61 FC | 	wrlong	result1, fp
1049c     DC 00 90 FD | 	jmp	#LR__1289
104a0                 | LR__1286
104a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
104a0     08 4E 05 F1 | 	add	fp, #8
104a4     A7 1E 02 FB | 	rdlong	local01, fp
104a8     08 4E 85 F1 | 	sub	fp, #8
104ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
104b0     14 4E 05 A1 |  if_e	add	fp, #20
104b4     A7 22 02 AB |  if_e	rdlong	local03, fp
104b8     14 4E 85 A1 |  if_e	sub	fp, #20
104bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
104c0     38 00 90 5D |  if_ne	jmp	#LR__1287
104c4     A7 1E 02 FB | 	rdlong	local01, fp
104c8     0C 4E 05 F1 | 	add	fp, #12
104cc     A7 12 02 FB | 	rdlong	arg01, fp
104d0     0C 4E 85 F1 | 	sub	fp, #12
104d4     09 13 52 F6 | 	abs	arg01, arg01 wc
104d8     1F 26 C6 C9 |  if_b	decod	local05, #31
104dc     00 26 06 36 |  if_ae	mov	local05, #0
104e0     74 EA B0 FD | 	call	#__system___float_fromuns
104e4     13 FB 61 F5 | 	xor	result1, local05
104e8     FD 14 02 F6 | 	mov	arg02, result1
104ec     0F 13 02 F6 | 	mov	arg01, local01
104f0     68 EE B0 FD | 	call	#__system___float_mul
104f4     A7 FA 61 FC | 	wrlong	result1, fp
104f8     80 00 90 FD | 	jmp	#LR__1289
104fc                 | LR__1287
104fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
104fc     08 4E 05 F1 | 	add	fp, #8
10500     A7 1E 02 FB | 	rdlong	local01, fp
10504     08 4E 85 F1 | 	sub	fp, #8
10508     1E 1E 0E F2 | 	cmp	local01, #30 wz
1050c     14 4E 05 A1 |  if_e	add	fp, #20
10510     A7 22 02 AB |  if_e	rdlong	local03, fp
10514     14 4E 85 A1 |  if_e	sub	fp, #20
10518     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1051c     1C 00 90 5D |  if_ne	jmp	#LR__1288
10520     A7 12 02 FB | 	rdlong	arg01, fp
10524     0C 4E 05 F1 | 	add	fp, #12
10528     A7 14 02 FB | 	rdlong	arg02, fp
1052c     0C 4E 85 F1 | 	sub	fp, #12
10530     28 EE B0 FD | 	call	#__system___float_mul
10534     A7 FA 61 FC | 	wrlong	result1, fp
10538     40 00 90 FD | 	jmp	#LR__1289
1053c                 | LR__1288
1053c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1053c     08 4E 05 F1 | 	add	fp, #8
10540     A7 1E 02 FB | 	rdlong	local01, fp
10544     08 4E 85 F1 | 	sub	fp, #8
10548     1F 1E 0E F2 | 	cmp	local01, #31 wz
1054c     14 4E 05 51 |  if_ne	add	fp, #20
10550     A7 22 02 5B |  if_ne	rdlong	local03, fp
10554     14 4E 85 51 |  if_ne	sub	fp, #20
10558     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1055c     A7 10 68 AC |  if_e	wrlong	#8, fp
10560     08 4E 05 A1 |  if_e	add	fp, #8
10564     A7 FE 69 AC |  if_e	wrlong	#255, fp
10568     08 4E 85 A1 |  if_e	sub	fp, #8
1056c     A7 12 68 5C |  if_ne	wrlong	#9, fp
10570     08 4E 05 51 |  if_ne	add	fp, #8
10574     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10578     08 4E 85 51 |  if_ne	sub	fp, #8
1057c                 | LR__1289
1057c     A7 12 02 F6 | 	mov	arg01, fp
10580     F4 9C BF FD | 	call	#_push
10584     A7 F0 03 F6 | 	mov	ptra, fp
10588     B2 00 A0 FD | 	call	#popregs_
1058c                 | _do_mul_ret
1058c     2D 00 64 FD | 	ret
10590                 | 
10590                 | ' 
10590                 | ' sub do_div 
10590                 | _do_div
10590     01 4A 05 F6 | 	mov	COUNT_, #1
10594     A8 00 A0 FD | 	call	#pushregs_
10598     18 F0 07 F1 | 	add	ptra, #24
1059c     40 9C BF FD | 	call	#_pop
105a0     FD 66 02 F6 | 	mov	muldivb_, result1
105a4     FE 64 02 F6 | 	mov	muldiva_, result2
105a8     FF 1E 02 F6 | 	mov	local01, result3
105ac     0C 4E 05 F1 | 	add	fp, #12
105b0     A7 66 62 FC | 	wrlong	muldivb_, fp
105b4     04 4E 05 F1 | 	add	fp, #4
105b8     A7 64 62 FC | 	wrlong	muldiva_, fp
105bc     04 4E 05 F1 | 	add	fp, #4
105c0     A7 1E 62 FC | 	wrlong	local01, fp
105c4     14 4E 85 F1 | 	sub	fp, #20
105c8     14 9C BF FD | 	call	#_pop
105cc     A7 FA 61 FC | 	wrlong	result1, fp
105d0     04 4E 05 F1 | 	add	fp, #4
105d4     A7 FC 61 FC | 	wrlong	result2, fp
105d8     04 4E 05 F1 | 	add	fp, #4
105dc     A7 FE 61 FC | 	wrlong	result3, fp
105e0                 | ' 
105e0                 | ' t2=pop()
105e0                 | ' t1=pop()
105e0                 | ' 
105e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
105e0     08 4E 85 F1 | 	sub	fp, #8
105e4     1F FE 0D F2 | 	cmp	result3, #31 wz
105e8     14 4E 05 51 |  if_ne	add	fp, #20
105ec     A7 12 02 5B |  if_ne	rdlong	arg01, fp
105f0     14 4E 85 51 |  if_ne	sub	fp, #20
105f4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
105f8     A7 14 68 AC |  if_e	wrlong	#10, fp
105fc     08 4E 05 A1 |  if_e	add	fp, #8
10600     A7 FE 69 AC |  if_e	wrlong	#255, fp
10604     08 4E 85 A1 |  if_e	sub	fp, #8
10608     90 01 90 AD |  if_e	jmp	#LR__1296
1060c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1060c     08 4E 05 F1 | 	add	fp, #8
10610     A7 66 02 FB | 	rdlong	muldivb_, fp
10614     08 4E 85 F1 | 	sub	fp, #8
10618     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1061c     1C 00 90 5D |  if_ne	jmp	#LR__1290
10620     08 4E 05 F1 | 	add	fp, #8
10624     A7 38 68 FC | 	wrlong	#28, fp
10628     08 4E 85 F1 | 	sub	fp, #8
1062c     A7 12 02 FB | 	rdlong	arg01, fp
10630     00 14 06 F6 | 	mov	arg02, #0
10634     EC F1 B0 FD | 	call	#__system___float_tointeger
10638     A7 FA 61 FC | 	wrlong	result1, fp
1063c                 | LR__1290
1063c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1063c     14 4E 05 F1 | 	add	fp, #20
10640     A7 66 02 FB | 	rdlong	muldivb_, fp
10644     14 4E 85 F1 | 	sub	fp, #20
10648     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1064c     28 00 90 5D |  if_ne	jmp	#LR__1291
10650     14 4E 05 F1 | 	add	fp, #20
10654     A7 38 68 FC | 	wrlong	#28, fp
10658     08 4E 85 F1 | 	sub	fp, #8
1065c     A7 12 02 FB | 	rdlong	arg01, fp
10660     0C 4E 85 F1 | 	sub	fp, #12
10664     00 14 06 F6 | 	mov	arg02, #0
10668     B8 F1 B0 FD | 	call	#__system___float_tointeger
1066c     0C 4E 05 F1 | 	add	fp, #12
10670     A7 FA 61 FC | 	wrlong	result1, fp
10674     0C 4E 85 F1 | 	sub	fp, #12
10678                 | LR__1291
10678                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10678     08 4E 05 F1 | 	add	fp, #8
1067c     A7 66 02 FB | 	rdlong	muldivb_, fp
10680     08 4E 85 F1 | 	sub	fp, #8
10684     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10688     14 4E 05 A1 |  if_e	add	fp, #20
1068c     A7 1E 02 AB |  if_e	rdlong	local01, fp
10690     14 4E 85 A1 |  if_e	sub	fp, #20
10694     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10698     20 00 90 5D |  if_ne	jmp	#LR__1292
1069c     0C 4E 05 F1 | 	add	fp, #12
106a0     A7 1E 02 FB | 	rdlong	local01, fp
106a4     0C 4E 85 F1 | 	sub	fp, #12
106a8     A7 66 02 FB | 	rdlong	muldivb_, fp
106ac     0F 67 12 FD | 	qdiv	muldivb_, local01
106b0     18 1E 62 FD | 	getqx	local01
106b4     A7 1E 62 FC | 	wrlong	local01, fp
106b8     E0 00 90 FD | 	jmp	#LR__1296
106bc                 | LR__1292
106bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
106bc     08 4E 05 F1 | 	add	fp, #8
106c0     A7 66 02 FB | 	rdlong	muldivb_, fp
106c4     08 4E 85 F1 | 	sub	fp, #8
106c8     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
106cc     14 4E 05 A1 |  if_e	add	fp, #20
106d0     A7 1E 02 AB |  if_e	rdlong	local01, fp
106d4     14 4E 85 A1 |  if_e	sub	fp, #20
106d8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
106dc     2C 00 90 5D |  if_ne	jmp	#LR__1293
106e0     0C 4E 05 F1 | 	add	fp, #12
106e4     A7 1E 02 FB | 	rdlong	local01, fp
106e8     0C 4E 85 F1 | 	sub	fp, #12
106ec     A7 66 02 FB | 	rdlong	muldivb_, fp
106f0     0F 67 12 FD | 	qdiv	muldivb_, local01
106f4     18 1E 62 FD | 	getqx	local01
106f8     A7 1E 62 FC | 	wrlong	local01, fp
106fc     08 4E 05 F1 | 	add	fp, #8
10700     A7 38 68 FC | 	wrlong	#28, fp
10704     08 4E 85 F1 | 	sub	fp, #8
10708     90 00 90 FD | 	jmp	#LR__1296
1070c                 | LR__1293
1070c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1070c     08 4E 05 F1 | 	add	fp, #8
10710     A7 66 02 FB | 	rdlong	muldivb_, fp
10714     08 4E 85 F1 | 	sub	fp, #8
10718     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1071c     14 4E 05 A1 |  if_e	add	fp, #20
10720     A7 1E 02 AB |  if_e	rdlong	local01, fp
10724     14 4E 85 A1 |  if_e	sub	fp, #20
10728     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1072c     1C 00 90 5D |  if_ne	jmp	#LR__1294
10730     A7 64 02 FB | 	rdlong	muldiva_, fp
10734     0C 4E 05 F1 | 	add	fp, #12
10738     A7 66 02 FB | 	rdlong	muldivb_, fp
1073c     0C 4E 85 F1 | 	sub	fp, #12
10740     BA 00 A0 FD | 	call	#divide_
10744     A7 66 62 FC | 	wrlong	muldivb_, fp
10748     50 00 90 FD | 	jmp	#LR__1296
1074c                 | LR__1294
1074c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1074c     08 4E 05 F1 | 	add	fp, #8
10750     A7 66 02 FB | 	rdlong	muldivb_, fp
10754     08 4E 85 F1 | 	sub	fp, #8
10758     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1075c     14 4E 05 A1 |  if_e	add	fp, #20
10760     A7 1E 02 AB |  if_e	rdlong	local01, fp
10764     14 4E 85 A1 |  if_e	sub	fp, #20
10768     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1076c     1C 00 90 5D |  if_ne	jmp	#LR__1295
10770     A7 64 02 FB | 	rdlong	muldiva_, fp
10774     0C 4E 05 F1 | 	add	fp, #12
10778     A7 66 02 FB | 	rdlong	muldivb_, fp
1077c     0C 4E 85 F1 | 	sub	fp, #12
10780     BA 00 A0 FD | 	call	#divide_
10784     A7 66 62 FC | 	wrlong	muldivb_, fp
10788     10 00 90 FD | 	jmp	#LR__1296
1078c                 | LR__1295
1078c     A7 16 68 FC | 	wrlong	#11, fp
10790     08 4E 05 F1 | 	add	fp, #8
10794     A7 FE 69 FC | 	wrlong	#255, fp
10798     08 4E 85 F1 | 	sub	fp, #8
1079c                 | LR__1296
1079c     A7 12 02 F6 | 	mov	arg01, fp
107a0     D4 9A BF FD | 	call	#_push
107a4     A7 F0 03 F6 | 	mov	ptra, fp
107a8     B2 00 A0 FD | 	call	#popregs_
107ac                 | _do_div_ret
107ac     2D 00 64 FD | 	ret
107b0                 | 
107b0                 | ' 
107b0                 | ' sub do_fdiv 
107b0                 | _do_fdiv
107b0     02 4A 05 F6 | 	mov	COUNT_, #2
107b4     A8 00 A0 FD | 	call	#pushregs_
107b8     18 F0 07 F1 | 	add	ptra, #24
107bc     20 9A BF FD | 	call	#_pop
107c0     FD 14 02 F6 | 	mov	arg02, result1
107c4     FE 12 02 F6 | 	mov	arg01, result2
107c8     FF 1E 02 F6 | 	mov	local01, result3
107cc     0C 4E 05 F1 | 	add	fp, #12
107d0     A7 14 62 FC | 	wrlong	arg02, fp
107d4     04 4E 05 F1 | 	add	fp, #4
107d8     A7 12 62 FC | 	wrlong	arg01, fp
107dc     04 4E 05 F1 | 	add	fp, #4
107e0     A7 1E 62 FC | 	wrlong	local01, fp
107e4     14 4E 85 F1 | 	sub	fp, #20
107e8     F4 99 BF FD | 	call	#_pop
107ec     A7 FA 61 FC | 	wrlong	result1, fp
107f0     04 4E 05 F1 | 	add	fp, #4
107f4     A7 FC 61 FC | 	wrlong	result2, fp
107f8     04 4E 05 F1 | 	add	fp, #4
107fc     A7 FE 61 FC | 	wrlong	result3, fp
10800                 | ' 
10800                 | ' t2=pop()
10800                 | ' t1=pop()
10800                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
10800     08 4E 85 F1 | 	sub	fp, #8
10804     1F FE 0D F2 | 	cmp	result3, #31 wz
10808     14 4E 05 51 |  if_ne	add	fp, #20
1080c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10810     14 4E 85 51 |  if_ne	sub	fp, #20
10814     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10818     A7 14 68 AC |  if_e	wrlong	#10, fp
1081c     08 4E 05 A1 |  if_e	add	fp, #8
10820     A7 FE 69 AC |  if_e	wrlong	#255, fp
10824     08 4E 85 A1 |  if_e	sub	fp, #8
10828     38 01 90 AD |  if_e	jmp	#LR__1305
1082c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1082c     08 4E 05 F1 | 	add	fp, #8
10830     A7 14 02 FB | 	rdlong	arg02, fp
10834     08 4E 85 F1 | 	sub	fp, #8
10838     1C 14 0E F2 | 	cmp	arg02, #28 wz
1083c     28 00 90 5D |  if_ne	jmp	#LR__1300
10840     08 4E 05 F1 | 	add	fp, #8
10844     A7 3C 68 FC | 	wrlong	#30, fp
10848     08 4E 85 F1 | 	sub	fp, #8
1084c     A7 12 02 FB | 	rdlong	arg01, fp
10850     09 13 52 F6 | 	abs	arg01, arg01 wc
10854     1F 20 C6 C9 |  if_b	decod	local02, #31
10858     00 20 06 36 |  if_ae	mov	local02, #0
1085c     F8 E6 B0 FD | 	call	#__system___float_fromuns
10860     10 FB 61 F5 | 	xor	result1, local02
10864     A7 FA 61 FC | 	wrlong	result1, fp
10868                 | LR__1300
10868                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
10868     08 4E 05 F1 | 	add	fp, #8
1086c     A7 14 02 FB | 	rdlong	arg02, fp
10870     08 4E 85 F1 | 	sub	fp, #8
10874     1D 14 0E F2 | 	cmp	arg02, #29 wz
10878     18 00 90 5D |  if_ne	jmp	#LR__1301
1087c     08 4E 05 F1 | 	add	fp, #8
10880     A7 3C 68 FC | 	wrlong	#30, fp
10884     08 4E 85 F1 | 	sub	fp, #8
10888     A7 12 02 FB | 	rdlong	arg01, fp
1088c     C8 E6 B0 FD | 	call	#__system___float_fromuns
10890     A7 FA 61 FC | 	wrlong	result1, fp
10894                 | LR__1301
10894                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10894     14 4E 05 F1 | 	add	fp, #20
10898     A7 14 02 FB | 	rdlong	arg02, fp
1089c     14 4E 85 F1 | 	sub	fp, #20
108a0     1C 14 0E F2 | 	cmp	arg02, #28 wz
108a4     34 00 90 5D |  if_ne	jmp	#LR__1302
108a8     14 4E 05 F1 | 	add	fp, #20
108ac     A7 3C 68 FC | 	wrlong	#30, fp
108b0     08 4E 85 F1 | 	sub	fp, #8
108b4     A7 12 02 FB | 	rdlong	arg01, fp
108b8     0C 4E 85 F1 | 	sub	fp, #12
108bc     09 13 52 F6 | 	abs	arg01, arg01 wc
108c0     1F 20 C6 C9 |  if_b	decod	local02, #31
108c4     00 20 06 36 |  if_ae	mov	local02, #0
108c8     8C E6 B0 FD | 	call	#__system___float_fromuns
108cc     10 FB 61 F5 | 	xor	result1, local02
108d0     0C 4E 05 F1 | 	add	fp, #12
108d4     A7 FA 61 FC | 	wrlong	result1, fp
108d8     0C 4E 85 F1 | 	sub	fp, #12
108dc                 | LR__1302
108dc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
108dc     14 4E 05 F1 | 	add	fp, #20
108e0     A7 14 02 FB | 	rdlong	arg02, fp
108e4     14 4E 85 F1 | 	sub	fp, #20
108e8     1D 14 0E F2 | 	cmp	arg02, #29 wz
108ec     24 00 90 5D |  if_ne	jmp	#LR__1303
108f0     14 4E 05 F1 | 	add	fp, #20
108f4     A7 3C 68 FC | 	wrlong	#30, fp
108f8     08 4E 85 F1 | 	sub	fp, #8
108fc     A7 12 02 FB | 	rdlong	arg01, fp
10900     0C 4E 85 F1 | 	sub	fp, #12
10904     50 E6 B0 FD | 	call	#__system___float_fromuns
10908     0C 4E 05 F1 | 	add	fp, #12
1090c     A7 FA 61 FC | 	wrlong	result1, fp
10910     0C 4E 85 F1 | 	sub	fp, #12
10914                 | LR__1303
10914                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
10914     08 4E 05 F1 | 	add	fp, #8
10918     A7 14 02 FB | 	rdlong	arg02, fp
1091c     08 4E 85 F1 | 	sub	fp, #8
10920     1E 14 0E F2 | 	cmp	arg02, #30 wz
10924     14 4E 05 A1 |  if_e	add	fp, #20
10928     A7 1E 02 AB |  if_e	rdlong	local01, fp
1092c     14 4E 85 A1 |  if_e	sub	fp, #20
10930     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
10934     1C 00 90 5D |  if_ne	jmp	#LR__1304
10938     A7 12 02 FB | 	rdlong	arg01, fp
1093c     0C 4E 05 F1 | 	add	fp, #12
10940     A7 14 02 FB | 	rdlong	arg02, fp
10944     0C 4E 85 F1 | 	sub	fp, #12
10948     14 EC B0 FD | 	call	#__system___float_div
1094c     A7 FA 61 FC | 	wrlong	result1, fp
10950     10 00 90 FD | 	jmp	#LR__1305
10954                 | LR__1304
10954     A7 16 68 FC | 	wrlong	#11, fp
10958     08 4E 05 F1 | 	add	fp, #8
1095c     A7 FE 69 FC | 	wrlong	#255, fp
10960     08 4E 85 F1 | 	sub	fp, #8
10964                 | LR__1305
10964     A7 12 02 F6 | 	mov	arg01, fp
10968     0C 99 BF FD | 	call	#_push
1096c     A7 F0 03 F6 | 	mov	ptra, fp
10970     B2 00 A0 FD | 	call	#popregs_
10974                 | _do_fdiv_ret
10974     2D 00 64 FD | 	ret
10978                 | 
10978                 | ' 
10978                 | ' 
10978                 | ' sub do_mod 
10978                 | _do_mod
10978     01 4A 05 F6 | 	mov	COUNT_, #1
1097c     A8 00 A0 FD | 	call	#pushregs_
10980     18 F0 07 F1 | 	add	ptra, #24
10984     58 98 BF FD | 	call	#_pop
10988     FD 66 02 F6 | 	mov	muldivb_, result1
1098c     FE 64 02 F6 | 	mov	muldiva_, result2
10990     FF 1E 02 F6 | 	mov	local01, result3
10994     0C 4E 05 F1 | 	add	fp, #12
10998     A7 66 62 FC | 	wrlong	muldivb_, fp
1099c     04 4E 05 F1 | 	add	fp, #4
109a0     A7 64 62 FC | 	wrlong	muldiva_, fp
109a4     04 4E 05 F1 | 	add	fp, #4
109a8     A7 1E 62 FC | 	wrlong	local01, fp
109ac     14 4E 85 F1 | 	sub	fp, #20
109b0     2C 98 BF FD | 	call	#_pop
109b4     A7 FA 61 FC | 	wrlong	result1, fp
109b8     04 4E 05 F1 | 	add	fp, #4
109bc     A7 FC 61 FC | 	wrlong	result2, fp
109c0     04 4E 05 F1 | 	add	fp, #4
109c4     A7 FE 61 FC | 	wrlong	result3, fp
109c8                 | ' 
109c8                 | ' t2=pop()
109c8                 | ' t1=pop()
109c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
109c8     08 4E 85 F1 | 	sub	fp, #8
109cc     1F FE 0D F2 | 	cmp	result3, #31 wz
109d0     14 4E 05 51 |  if_ne	add	fp, #20
109d4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
109d8     14 4E 85 51 |  if_ne	sub	fp, #20
109dc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
109e0     A7 14 68 AC |  if_e	wrlong	#10, fp
109e4     08 4E 05 A1 |  if_e	add	fp, #8
109e8     A7 FE 69 AC |  if_e	wrlong	#255, fp
109ec     08 4E 85 A1 |  if_e	sub	fp, #8
109f0     90 01 90 AD |  if_e	jmp	#LR__1316
109f4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
109f4     08 4E 05 F1 | 	add	fp, #8
109f8     A7 66 02 FB | 	rdlong	muldivb_, fp
109fc     08 4E 85 F1 | 	sub	fp, #8
10a00     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10a04     1C 00 90 5D |  if_ne	jmp	#LR__1310
10a08     08 4E 05 F1 | 	add	fp, #8
10a0c     A7 38 68 FC | 	wrlong	#28, fp
10a10     08 4E 85 F1 | 	sub	fp, #8
10a14     A7 12 02 FB | 	rdlong	arg01, fp
10a18     00 14 06 F6 | 	mov	arg02, #0
10a1c     04 EE B0 FD | 	call	#__system___float_tointeger
10a20     A7 FA 61 FC | 	wrlong	result1, fp
10a24                 | LR__1310
10a24                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10a24     14 4E 05 F1 | 	add	fp, #20
10a28     A7 66 02 FB | 	rdlong	muldivb_, fp
10a2c     14 4E 85 F1 | 	sub	fp, #20
10a30     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10a34     28 00 90 5D |  if_ne	jmp	#LR__1311
10a38     14 4E 05 F1 | 	add	fp, #20
10a3c     A7 38 68 FC | 	wrlong	#28, fp
10a40     08 4E 85 F1 | 	sub	fp, #8
10a44     A7 12 02 FB | 	rdlong	arg01, fp
10a48     0C 4E 85 F1 | 	sub	fp, #12
10a4c     00 14 06 F6 | 	mov	arg02, #0
10a50     D0 ED B0 FD | 	call	#__system___float_tointeger
10a54     0C 4E 05 F1 | 	add	fp, #12
10a58     A7 FA 61 FC | 	wrlong	result1, fp
10a5c     0C 4E 85 F1 | 	sub	fp, #12
10a60                 | LR__1311
10a60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
10a60     08 4E 05 F1 | 	add	fp, #8
10a64     A7 66 02 FB | 	rdlong	muldivb_, fp
10a68     08 4E 85 F1 | 	sub	fp, #8
10a6c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10a70     14 4E 05 A1 |  if_e	add	fp, #20
10a74     A7 1E 02 AB |  if_e	rdlong	local01, fp
10a78     14 4E 85 A1 |  if_e	sub	fp, #20
10a7c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10a80     20 00 90 5D |  if_ne	jmp	#LR__1312
10a84     0C 4E 05 F1 | 	add	fp, #12
10a88     A7 1E 02 FB | 	rdlong	local01, fp
10a8c     0C 4E 85 F1 | 	sub	fp, #12
10a90     A7 66 02 FB | 	rdlong	muldivb_, fp
10a94     0F 67 12 FD | 	qdiv	muldivb_, local01
10a98     19 1E 62 FD | 	getqy	local01
10a9c     A7 1E 62 FC | 	wrlong	local01, fp
10aa0     E0 00 90 FD | 	jmp	#LR__1316
10aa4                 | LR__1312
10aa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
10aa4     08 4E 05 F1 | 	add	fp, #8
10aa8     A7 66 02 FB | 	rdlong	muldivb_, fp
10aac     08 4E 85 F1 | 	sub	fp, #8
10ab0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10ab4     14 4E 05 A1 |  if_e	add	fp, #20
10ab8     A7 1E 02 AB |  if_e	rdlong	local01, fp
10abc     14 4E 85 A1 |  if_e	sub	fp, #20
10ac0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10ac4     2C 00 90 5D |  if_ne	jmp	#LR__1313
10ac8     0C 4E 05 F1 | 	add	fp, #12
10acc     A7 1E 02 FB | 	rdlong	local01, fp
10ad0     0C 4E 85 F1 | 	sub	fp, #12
10ad4     A7 66 02 FB | 	rdlong	muldivb_, fp
10ad8     0F 67 12 FD | 	qdiv	muldivb_, local01
10adc     19 1E 62 FD | 	getqy	local01
10ae0     A7 1E 62 FC | 	wrlong	local01, fp
10ae4     08 4E 05 F1 | 	add	fp, #8
10ae8     A7 38 68 FC | 	wrlong	#28, fp
10aec     08 4E 85 F1 | 	sub	fp, #8
10af0     90 00 90 FD | 	jmp	#LR__1316
10af4                 | LR__1313
10af4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
10af4     08 4E 05 F1 | 	add	fp, #8
10af8     A7 66 02 FB | 	rdlong	muldivb_, fp
10afc     08 4E 85 F1 | 	sub	fp, #8
10b00     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10b04     14 4E 05 A1 |  if_e	add	fp, #20
10b08     A7 1E 02 AB |  if_e	rdlong	local01, fp
10b0c     14 4E 85 A1 |  if_e	sub	fp, #20
10b10     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10b14     1C 00 90 5D |  if_ne	jmp	#LR__1314
10b18     A7 64 02 FB | 	rdlong	muldiva_, fp
10b1c     0C 4E 05 F1 | 	add	fp, #12
10b20     A7 66 02 FB | 	rdlong	muldivb_, fp
10b24     0C 4E 85 F1 | 	sub	fp, #12
10b28     BA 00 A0 FD | 	call	#divide_
10b2c     A7 64 62 FC | 	wrlong	muldiva_, fp
10b30     50 00 90 FD | 	jmp	#LR__1316
10b34                 | LR__1314
10b34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
10b34     08 4E 05 F1 | 	add	fp, #8
10b38     A7 66 02 FB | 	rdlong	muldivb_, fp
10b3c     08 4E 85 F1 | 	sub	fp, #8
10b40     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10b44     14 4E 05 A1 |  if_e	add	fp, #20
10b48     A7 1E 02 AB |  if_e	rdlong	local01, fp
10b4c     14 4E 85 A1 |  if_e	sub	fp, #20
10b50     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10b54     1C 00 90 5D |  if_ne	jmp	#LR__1315
10b58     A7 64 02 FB | 	rdlong	muldiva_, fp
10b5c     0C 4E 05 F1 | 	add	fp, #12
10b60     A7 66 02 FB | 	rdlong	muldivb_, fp
10b64     0C 4E 85 F1 | 	sub	fp, #12
10b68     BA 00 A0 FD | 	call	#divide_
10b6c     A7 64 62 FC | 	wrlong	muldiva_, fp
10b70     10 00 90 FD | 	jmp	#LR__1316
10b74                 | LR__1315
10b74     A7 16 68 FC | 	wrlong	#11, fp
10b78     08 4E 05 F1 | 	add	fp, #8
10b7c     A7 FE 69 FC | 	wrlong	#255, fp
10b80     08 4E 85 F1 | 	sub	fp, #8
10b84                 | LR__1316
10b84     A7 12 02 F6 | 	mov	arg01, fp
10b88     EC 96 BF FD | 	call	#_push
10b8c     A7 F0 03 F6 | 	mov	ptra, fp
10b90     B2 00 A0 FD | 	call	#popregs_
10b94                 | _do_mod_ret
10b94     2D 00 64 FD | 	ret
10b98                 | 
10b98                 | ' 
10b98                 | ' sub do_shl 
10b98                 | _do_shl
10b98     03 4A 05 F6 | 	mov	COUNT_, #3
10b9c     A8 00 A0 FD | 	call	#pushregs_
10ba0     18 F0 07 F1 | 	add	ptra, #24
10ba4     38 96 BF FD | 	call	#_pop
10ba8     FD 12 02 F6 | 	mov	arg01, result1
10bac     FE 1E 02 F6 | 	mov	local01, result2
10bb0     FF 20 02 F6 | 	mov	local02, result3
10bb4     0C 4E 05 F1 | 	add	fp, #12
10bb8     A7 12 62 FC | 	wrlong	arg01, fp
10bbc     04 4E 05 F1 | 	add	fp, #4
10bc0     A7 1E 62 FC | 	wrlong	local01, fp
10bc4     04 4E 05 F1 | 	add	fp, #4
10bc8     A7 20 62 FC | 	wrlong	local02, fp
10bcc     14 4E 85 F1 | 	sub	fp, #20
10bd0     0C 96 BF FD | 	call	#_pop
10bd4     FF 22 02 F6 | 	mov	local03, result3
10bd8     A7 FA 61 FC | 	wrlong	result1, fp
10bdc     04 4E 05 F1 | 	add	fp, #4
10be0     A7 FC 61 FC | 	wrlong	result2, fp
10be4     04 4E 05 F1 | 	add	fp, #4
10be8     A7 22 62 FC | 	wrlong	local03, fp
10bec                 | ' 
10bec                 | ' t2=pop()
10bec                 | ' t1=pop()
10bec                 | ' 
10bec                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10bec     08 4E 85 F1 | 	sub	fp, #8
10bf0     1C 22 0E F2 | 	cmp	local03, #28 wz
10bf4     A7 22 02 AB |  if_e	rdlong	local03, fp
10bf8     A7 22 62 AC |  if_e	wrlong	local03, fp
10bfc     08 4E 05 A1 |  if_e	add	fp, #8
10c00     A7 3A 68 AC |  if_e	wrlong	#29, fp
10c04     08 4E 85 A1 |  if_e	sub	fp, #8
10c08                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10c08     14 4E 05 F1 | 	add	fp, #20
10c0c     A7 22 02 FB | 	rdlong	local03, fp
10c10     14 4E 85 F1 | 	sub	fp, #20
10c14     1C 22 0E F2 | 	cmp	local03, #28 wz
10c18     18 00 90 5D |  if_ne	jmp	#LR__1320
10c1c     0C 4E 05 F1 | 	add	fp, #12
10c20     A7 22 02 FB | 	rdlong	local03, fp
10c24     A7 22 62 FC | 	wrlong	local03, fp
10c28     08 4E 05 F1 | 	add	fp, #8
10c2c     A7 3A 68 FC | 	wrlong	#29, fp
10c30     14 4E 85 F1 | 	sub	fp, #20
10c34                 | LR__1320
10c34                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
10c34     08 4E 05 F1 | 	add	fp, #8
10c38     A7 22 02 FB | 	rdlong	local03, fp
10c3c     08 4E 85 F1 | 	sub	fp, #8
10c40     1F 22 0E F2 | 	cmp	local03, #31 wz
10c44     14 4E 05 51 |  if_ne	add	fp, #20
10c48     A7 20 02 5B |  if_ne	rdlong	local02, fp
10c4c     14 4E 85 51 |  if_ne	sub	fp, #20
10c50     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10c54     08 4E 05 51 |  if_ne	add	fp, #8
10c58     A7 22 02 5B |  if_ne	rdlong	local03, fp
10c5c     08 4E 85 51 |  if_ne	sub	fp, #8
10c60     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10c64     14 4E 05 51 |  if_ne	add	fp, #20
10c68     14 4E 85 51 |  if_ne	sub	fp, #20
10c6c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10c70     A7 0C 68 AC |  if_e	wrlong	#6, fp
10c74     08 4E 05 A1 |  if_e	add	fp, #8
10c78     A7 FE 69 AC |  if_e	wrlong	#255, fp
10c7c     08 4E 85 A1 |  if_e	sub	fp, #8
10c80     18 00 90 AD |  if_e	jmp	#LR__1321
10c84     A7 22 02 FB | 	rdlong	local03, fp
10c88     0C 4E 05 F1 | 	add	fp, #12
10c8c     A7 1E 02 FB | 	rdlong	local01, fp
10c90     0C 4E 85 F1 | 	sub	fp, #12
10c94     0F 23 62 F0 | 	shl	local03, local01
10c98     A7 22 62 FC | 	wrlong	local03, fp
10c9c                 | LR__1321
10c9c     A7 12 02 F6 | 	mov	arg01, fp
10ca0     D4 95 BF FD | 	call	#_push
10ca4     A7 F0 03 F6 | 	mov	ptra, fp
10ca8     B2 00 A0 FD | 	call	#popregs_
10cac                 | _do_shl_ret
10cac     2D 00 64 FD | 	ret
10cb0                 | 
10cb0                 | ' 
10cb0                 | ' sub do_shr 
10cb0                 | _do_shr
10cb0     03 4A 05 F6 | 	mov	COUNT_, #3
10cb4     A8 00 A0 FD | 	call	#pushregs_
10cb8     18 F0 07 F1 | 	add	ptra, #24
10cbc     20 95 BF FD | 	call	#_pop
10cc0     FD 12 02 F6 | 	mov	arg01, result1
10cc4     FE 1E 02 F6 | 	mov	local01, result2
10cc8     FF 20 02 F6 | 	mov	local02, result3
10ccc     0C 4E 05 F1 | 	add	fp, #12
10cd0     A7 12 62 FC | 	wrlong	arg01, fp
10cd4     04 4E 05 F1 | 	add	fp, #4
10cd8     A7 1E 62 FC | 	wrlong	local01, fp
10cdc     04 4E 05 F1 | 	add	fp, #4
10ce0     A7 20 62 FC | 	wrlong	local02, fp
10ce4     14 4E 85 F1 | 	sub	fp, #20
10ce8     F4 94 BF FD | 	call	#_pop
10cec     FF 22 02 F6 | 	mov	local03, result3
10cf0     A7 FA 61 FC | 	wrlong	result1, fp
10cf4     04 4E 05 F1 | 	add	fp, #4
10cf8     A7 FC 61 FC | 	wrlong	result2, fp
10cfc     04 4E 05 F1 | 	add	fp, #4
10d00     A7 22 62 FC | 	wrlong	local03, fp
10d04                 | ' t2=pop()
10d04                 | ' t1=pop()
10d04                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10d04     08 4E 85 F1 | 	sub	fp, #8
10d08     1C 22 0E F2 | 	cmp	local03, #28 wz
10d0c     A7 22 02 AB |  if_e	rdlong	local03, fp
10d10     A7 22 62 AC |  if_e	wrlong	local03, fp
10d14     08 4E 05 A1 |  if_e	add	fp, #8
10d18     A7 3A 68 AC |  if_e	wrlong	#29, fp
10d1c     08 4E 85 A1 |  if_e	sub	fp, #8
10d20                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10d20     14 4E 05 F1 | 	add	fp, #20
10d24     A7 22 02 FB | 	rdlong	local03, fp
10d28     14 4E 85 F1 | 	sub	fp, #20
10d2c     1C 22 0E F2 | 	cmp	local03, #28 wz
10d30     18 00 90 5D |  if_ne	jmp	#LR__1330
10d34     0C 4E 05 F1 | 	add	fp, #12
10d38     A7 22 02 FB | 	rdlong	local03, fp
10d3c     A7 22 62 FC | 	wrlong	local03, fp
10d40     08 4E 05 F1 | 	add	fp, #8
10d44     A7 3A 68 FC | 	wrlong	#29, fp
10d48     14 4E 85 F1 | 	sub	fp, #20
10d4c                 | LR__1330
10d4c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
10d4c     08 4E 05 F1 | 	add	fp, #8
10d50     A7 22 02 FB | 	rdlong	local03, fp
10d54     08 4E 85 F1 | 	sub	fp, #8
10d58     1F 22 0E F2 | 	cmp	local03, #31 wz
10d5c     14 4E 05 51 |  if_ne	add	fp, #20
10d60     A7 20 02 5B |  if_ne	rdlong	local02, fp
10d64     14 4E 85 51 |  if_ne	sub	fp, #20
10d68     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10d6c     08 4E 05 51 |  if_ne	add	fp, #8
10d70     A7 22 02 5B |  if_ne	rdlong	local03, fp
10d74     08 4E 85 51 |  if_ne	sub	fp, #8
10d78     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10d7c     14 4E 05 51 |  if_ne	add	fp, #20
10d80     14 4E 85 51 |  if_ne	sub	fp, #20
10d84     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10d88     A7 0C 68 AC |  if_e	wrlong	#6, fp
10d8c     08 4E 05 A1 |  if_e	add	fp, #8
10d90     A7 FE 69 AC |  if_e	wrlong	#255, fp
10d94     08 4E 85 A1 |  if_e	sub	fp, #8
10d98     18 00 90 AD |  if_e	jmp	#LR__1331
10d9c     A7 22 02 FB | 	rdlong	local03, fp
10da0     0C 4E 05 F1 | 	add	fp, #12
10da4     A7 1E 02 FB | 	rdlong	local01, fp
10da8     0C 4E 85 F1 | 	sub	fp, #12
10dac     0F 23 42 F0 | 	shr	local03, local01
10db0     A7 22 62 FC | 	wrlong	local03, fp
10db4                 | LR__1331
10db4     A7 12 02 F6 | 	mov	arg01, fp
10db8     BC 94 BF FD | 	call	#_push
10dbc     A7 F0 03 F6 | 	mov	ptra, fp
10dc0     B2 00 A0 FD | 	call	#popregs_
10dc4                 | _do_shr_ret
10dc4     2D 00 64 FD | 	ret
10dc8                 | 
10dc8                 | ' 
10dc8                 | ' sub do_power 
10dc8                 | _do_power
10dc8     02 4A 05 F6 | 	mov	COUNT_, #2
10dcc     A8 00 A0 FD | 	call	#pushregs_
10dd0     18 F0 07 F1 | 	add	ptra, #24
10dd4     08 94 BF FD | 	call	#_pop
10dd8     FD 14 02 F6 | 	mov	arg02, result1
10ddc     FE 12 02 F6 | 	mov	arg01, result2
10de0     FF 1E 02 F6 | 	mov	local01, result3
10de4     0C 4E 05 F1 | 	add	fp, #12
10de8     A7 14 62 FC | 	wrlong	arg02, fp
10dec     04 4E 05 F1 | 	add	fp, #4
10df0     A7 12 62 FC | 	wrlong	arg01, fp
10df4     04 4E 05 F1 | 	add	fp, #4
10df8     A7 1E 62 FC | 	wrlong	local01, fp
10dfc     14 4E 85 F1 | 	sub	fp, #20
10e00     DC 93 BF FD | 	call	#_pop
10e04     A7 FA 61 FC | 	wrlong	result1, fp
10e08     04 4E 05 F1 | 	add	fp, #4
10e0c     A7 FC 61 FC | 	wrlong	result2, fp
10e10     04 4E 05 F1 | 	add	fp, #4
10e14     A7 FE 61 FC | 	wrlong	result3, fp
10e18                 | ' t2=pop()
10e18                 | ' t1=pop()
10e18                 | ' 
10e18                 | ' 
10e18                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
10e18     08 4E 85 F1 | 	sub	fp, #8
10e1c     1F FE 0D F2 | 	cmp	result3, #31 wz
10e20     14 4E 05 51 |  if_ne	add	fp, #20
10e24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10e28     14 4E 85 51 |  if_ne	sub	fp, #20
10e2c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10e30     A7 18 68 AC |  if_e	wrlong	#12, fp
10e34     08 4E 05 A1 |  if_e	add	fp, #8
10e38     A7 FE 69 AC |  if_e	wrlong	#255, fp
10e3c     08 4E 85 A1 |  if_e	sub	fp, #8
10e40     38 01 90 AD |  if_e	jmp	#LR__1345
10e44                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10e44     08 4E 05 F1 | 	add	fp, #8
10e48     A7 14 02 FB | 	rdlong	arg02, fp
10e4c     08 4E 85 F1 | 	sub	fp, #8
10e50     1C 14 0E F2 | 	cmp	arg02, #28 wz
10e54     28 00 90 5D |  if_ne	jmp	#LR__1340
10e58     08 4E 05 F1 | 	add	fp, #8
10e5c     A7 3C 68 FC | 	wrlong	#30, fp
10e60     08 4E 85 F1 | 	sub	fp, #8
10e64     A7 12 02 FB | 	rdlong	arg01, fp
10e68     09 13 52 F6 | 	abs	arg01, arg01 wc
10e6c     1F 20 C6 C9 |  if_b	decod	local02, #31
10e70     00 20 06 36 |  if_ae	mov	local02, #0
10e74     E0 E0 B0 FD | 	call	#__system___float_fromuns
10e78     10 FB 61 F5 | 	xor	result1, local02
10e7c     A7 FA 61 FC | 	wrlong	result1, fp
10e80                 | LR__1340
10e80                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
10e80     08 4E 05 F1 | 	add	fp, #8
10e84     A7 14 02 FB | 	rdlong	arg02, fp
10e88     08 4E 85 F1 | 	sub	fp, #8
10e8c     1D 14 0E F2 | 	cmp	arg02, #29 wz
10e90     18 00 90 5D |  if_ne	jmp	#LR__1341
10e94     08 4E 05 F1 | 	add	fp, #8
10e98     A7 3C 68 FC | 	wrlong	#30, fp
10e9c     08 4E 85 F1 | 	sub	fp, #8
10ea0     A7 12 02 FB | 	rdlong	arg01, fp
10ea4     B0 E0 B0 FD | 	call	#__system___float_fromuns
10ea8     A7 FA 61 FC | 	wrlong	result1, fp
10eac                 | LR__1341
10eac                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10eac     14 4E 05 F1 | 	add	fp, #20
10eb0     A7 14 02 FB | 	rdlong	arg02, fp
10eb4     14 4E 85 F1 | 	sub	fp, #20
10eb8     1C 14 0E F2 | 	cmp	arg02, #28 wz
10ebc     34 00 90 5D |  if_ne	jmp	#LR__1342
10ec0     14 4E 05 F1 | 	add	fp, #20
10ec4     A7 3C 68 FC | 	wrlong	#30, fp
10ec8     08 4E 85 F1 | 	sub	fp, #8
10ecc     A7 12 02 FB | 	rdlong	arg01, fp
10ed0     0C 4E 85 F1 | 	sub	fp, #12
10ed4     09 13 52 F6 | 	abs	arg01, arg01 wc
10ed8     1F 20 C6 C9 |  if_b	decod	local02, #31
10edc     00 20 06 36 |  if_ae	mov	local02, #0
10ee0     74 E0 B0 FD | 	call	#__system___float_fromuns
10ee4     10 FB 61 F5 | 	xor	result1, local02
10ee8     0C 4E 05 F1 | 	add	fp, #12
10eec     A7 FA 61 FC | 	wrlong	result1, fp
10ef0     0C 4E 85 F1 | 	sub	fp, #12
10ef4                 | LR__1342
10ef4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
10ef4     14 4E 05 F1 | 	add	fp, #20
10ef8     A7 14 02 FB | 	rdlong	arg02, fp
10efc     14 4E 85 F1 | 	sub	fp, #20
10f00     1D 14 0E F2 | 	cmp	arg02, #29 wz
10f04     24 00 90 5D |  if_ne	jmp	#LR__1343
10f08     14 4E 05 F1 | 	add	fp, #20
10f0c     A7 3C 68 FC | 	wrlong	#30, fp
10f10     08 4E 85 F1 | 	sub	fp, #8
10f14     A7 12 02 FB | 	rdlong	arg01, fp
10f18     0C 4E 85 F1 | 	sub	fp, #12
10f1c     38 E0 B0 FD | 	call	#__system___float_fromuns
10f20     0C 4E 05 F1 | 	add	fp, #12
10f24     A7 FA 61 FC | 	wrlong	result1, fp
10f28     0C 4E 85 F1 | 	sub	fp, #12
10f2c                 | LR__1343
10f2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
10f2c     08 4E 05 F1 | 	add	fp, #8
10f30     A7 14 02 FB | 	rdlong	arg02, fp
10f34     08 4E 85 F1 | 	sub	fp, #8
10f38     1E 14 0E F2 | 	cmp	arg02, #30 wz
10f3c     14 4E 05 A1 |  if_e	add	fp, #20
10f40     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f44     14 4E 85 A1 |  if_e	sub	fp, #20
10f48     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
10f4c     1C 00 90 5D |  if_ne	jmp	#LR__1344
10f50     A7 12 02 FB | 	rdlong	arg01, fp
10f54     0C 4E 05 F1 | 	add	fp, #12
10f58     A7 14 02 FB | 	rdlong	arg02, fp
10f5c     0C 4E 85 F1 | 	sub	fp, #12
10f60     DC F2 B0 FD | 	call	#__system____builtin_powf
10f64     A7 FA 61 FC | 	wrlong	result1, fp
10f68     10 00 90 FD | 	jmp	#LR__1345
10f6c                 | LR__1344
10f6c     A7 1A 68 FC | 	wrlong	#13, fp
10f70     08 4E 05 F1 | 	add	fp, #8
10f74     A7 FE 69 FC | 	wrlong	#255, fp
10f78     08 4E 85 F1 | 	sub	fp, #8
10f7c                 | LR__1345
10f7c     A7 12 02 F6 | 	mov	arg01, fp
10f80     F4 92 BF FD | 	call	#_push
10f84     A7 F0 03 F6 | 	mov	ptra, fp
10f88     B2 00 A0 FD | 	call	#popregs_
10f8c                 | _do_power_ret
10f8c     2D 00 64 FD | 	ret
10f90                 | 
10f90                 | ' 
10f90                 | ' 
10f90                 | ' sub do_eq
10f90                 | _do_eq
10f90     05 4A 05 F6 | 	mov	COUNT_, #5
10f94     A8 00 A0 FD | 	call	#pushregs_
10f98     18 F0 07 F1 | 	add	ptra, #24
10f9c     40 92 BF FD | 	call	#_pop
10fa0     FD 1E 02 F6 | 	mov	local01, result1
10fa4     FE 20 02 F6 | 	mov	local02, result2
10fa8     FF 22 02 F6 | 	mov	local03, result3
10fac     0C 4E 05 F1 | 	add	fp, #12
10fb0     A7 1E 62 FC | 	wrlong	local01, fp
10fb4     04 4E 05 F1 | 	add	fp, #4
10fb8     A7 20 62 FC | 	wrlong	local02, fp
10fbc     04 4E 05 F1 | 	add	fp, #4
10fc0     A7 22 62 FC | 	wrlong	local03, fp
10fc4     14 4E 85 F1 | 	sub	fp, #20
10fc8     14 92 BF FD | 	call	#_pop
10fcc     FF 22 02 F6 | 	mov	local03, result3
10fd0     A7 FA 61 FC | 	wrlong	result1, fp
10fd4     04 4E 05 F1 | 	add	fp, #4
10fd8     A7 FC 61 FC | 	wrlong	result2, fp
10fdc     04 4E 05 F1 | 	add	fp, #4
10fe0     A7 22 62 FC | 	wrlong	local03, fp
10fe4                 | ' t2=pop()
10fe4                 | ' t1=pop()
10fe4                 | ' 
10fe4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
10fe4     08 4E 85 F1 | 	sub	fp, #8
10fe8     1F 22 0E F2 | 	cmp	local03, #31 wz
10fec     14 4E 05 A1 |  if_e	add	fp, #20
10ff0     A7 24 02 AB |  if_e	rdlong	local04, fp
10ff4     14 4E 85 A1 |  if_e	sub	fp, #20
10ff8     12 23 02 A6 |  if_e	mov	local03, local04
10ffc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11000     28 00 90 5D |  if_ne	jmp	#LR__1350
11004     00 1E 06 F6 | 	mov	local01, #0
11008     A7 12 02 FB | 	rdlong	arg01, fp
1100c     0C 4E 05 F1 | 	add	fp, #12
11010     A7 14 02 FB | 	rdlong	arg02, fp
11014     0C 4E 85 F1 | 	sub	fp, #12
11018     EC B7 B0 FD | 	call	#__system___string_cmp
1101c     00 FA 0D F2 | 	cmp	result1, #0 wz
11020     00 1E 26 A6 |  if_e	not	local01, #0
11024     A7 1E 62 FC | 	wrlong	local01, fp
11028     1C 04 90 FD | 	jmp	#LR__1363
1102c                 | LR__1350
1102c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1102c     08 4E 05 F1 | 	add	fp, #8
11030     A7 1E 02 FB | 	rdlong	local01, fp
11034     08 4E 85 F1 | 	sub	fp, #8
11038     1E 1E 0E F2 | 	cmp	local01, #30 wz
1103c     14 4E 05 A1 |  if_e	add	fp, #20
11040     A7 24 02 AB |  if_e	rdlong	local04, fp
11044     14 4E 85 A1 |  if_e	sub	fp, #20
11048     12 23 02 A6 |  if_e	mov	local03, local04
1104c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11050     2C 00 90 5D |  if_ne	jmp	#LR__1351
11054     00 1E 06 F6 | 	mov	local01, #0
11058     A7 12 02 FB | 	rdlong	arg01, fp
1105c     0C 4E 05 F1 | 	add	fp, #12
11060     A7 14 02 FB | 	rdlong	arg02, fp
11064     0C 4E 85 F1 | 	sub	fp, #12
11068     01 16 06 F6 | 	mov	arg03, #1
1106c     20 E7 B0 FD | 	call	#__system___float_cmp
11070     00 FA 0D F2 | 	cmp	result1, #0 wz
11074     00 1E 26 A6 |  if_e	not	local01, #0
11078     A7 1E 62 FC | 	wrlong	local01, fp
1107c     C8 03 90 FD | 	jmp	#LR__1363
11080                 | LR__1351
11080                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
11080     08 4E 05 F1 | 	add	fp, #8
11084     A7 1E 02 FB | 	rdlong	local01, fp
11088     08 4E 85 F1 | 	sub	fp, #8
1108c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11090     14 4E 05 A1 |  if_e	add	fp, #20
11094     A7 24 02 AB |  if_e	rdlong	local04, fp
11098     14 4E 85 A1 |  if_e	sub	fp, #20
1109c     12 23 02 A6 |  if_e	mov	local03, local04
110a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
110a4     48 00 90 5D |  if_ne	jmp	#LR__1352
110a8     00 1E 06 F6 | 	mov	local01, #0
110ac     A7 20 02 FB | 	rdlong	local02, fp
110b0     0C 4E 05 F1 | 	add	fp, #12
110b4     A7 12 02 FB | 	rdlong	arg01, fp
110b8     0C 4E 85 F1 | 	sub	fp, #12
110bc     09 13 52 F6 | 	abs	arg01, arg01 wc
110c0     1F 26 C6 C9 |  if_b	decod	local05, #31
110c4     00 26 06 36 |  if_ae	mov	local05, #0
110c8     8C DE B0 FD | 	call	#__system___float_fromuns
110cc     13 FB 61 F5 | 	xor	result1, local05
110d0     FD 14 02 F6 | 	mov	arg02, result1
110d4     10 13 02 F6 | 	mov	arg01, local02
110d8     01 16 06 F6 | 	mov	arg03, #1
110dc     B0 E6 B0 FD | 	call	#__system___float_cmp
110e0     00 FA 0D F2 | 	cmp	result1, #0 wz
110e4     00 1E 26 A6 |  if_e	not	local01, #0
110e8     A7 1E 62 FC | 	wrlong	local01, fp
110ec     58 03 90 FD | 	jmp	#LR__1363
110f0                 | LR__1352
110f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
110f0     08 4E 05 F1 | 	add	fp, #8
110f4     A7 1E 02 FB | 	rdlong	local01, fp
110f8     08 4E 85 F1 | 	sub	fp, #8
110fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
11100     14 4E 05 A1 |  if_e	add	fp, #20
11104     A7 24 02 AB |  if_e	rdlong	local04, fp
11108     14 4E 85 A1 |  if_e	sub	fp, #20
1110c     12 23 02 A6 |  if_e	mov	local03, local04
11110     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11114     38 00 90 5D |  if_ne	jmp	#LR__1353
11118     00 1E 06 F6 | 	mov	local01, #0
1111c     A7 20 02 FB | 	rdlong	local02, fp
11120     0C 4E 05 F1 | 	add	fp, #12
11124     A7 12 02 FB | 	rdlong	arg01, fp
11128     0C 4E 85 F1 | 	sub	fp, #12
1112c     28 DE B0 FD | 	call	#__system___float_fromuns
11130     FD 14 02 F6 | 	mov	arg02, result1
11134     10 13 02 F6 | 	mov	arg01, local02
11138     01 16 06 F6 | 	mov	arg03, #1
1113c     50 E6 B0 FD | 	call	#__system___float_cmp
11140     00 FA 0D F2 | 	cmp	result1, #0 wz
11144     00 1E 26 A6 |  if_e	not	local01, #0
11148     A7 1E 62 FC | 	wrlong	local01, fp
1114c     F8 02 90 FD | 	jmp	#LR__1363
11150                 | LR__1353
11150                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
11150     08 4E 05 F1 | 	add	fp, #8
11154     A7 1E 02 FB | 	rdlong	local01, fp
11158     08 4E 85 F1 | 	sub	fp, #8
1115c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11160     14 4E 05 A1 |  if_e	add	fp, #20
11164     A7 24 02 AB |  if_e	rdlong	local04, fp
11168     14 4E 85 A1 |  if_e	sub	fp, #20
1116c     12 23 02 A6 |  if_e	mov	local03, local04
11170     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11174     44 00 90 5D |  if_ne	jmp	#LR__1354
11178     00 1E 06 F6 | 	mov	local01, #0
1117c     A7 12 02 FB | 	rdlong	arg01, fp
11180     09 13 52 F6 | 	abs	arg01, arg01 wc
11184     1F 26 C6 C9 |  if_b	decod	local05, #31
11188     00 26 06 36 |  if_ae	mov	local05, #0
1118c     C8 DD B0 FD | 	call	#__system___float_fromuns
11190     13 FB 61 F5 | 	xor	result1, local05
11194     FD 12 02 F6 | 	mov	arg01, result1
11198     0C 4E 05 F1 | 	add	fp, #12
1119c     A7 14 02 FB | 	rdlong	arg02, fp
111a0     0C 4E 85 F1 | 	sub	fp, #12
111a4     01 16 06 F6 | 	mov	arg03, #1
111a8     E4 E5 B0 FD | 	call	#__system___float_cmp
111ac     00 FA 0D F2 | 	cmp	result1, #0 wz
111b0     00 1E 26 A6 |  if_e	not	local01, #0
111b4     A7 1E 62 FC | 	wrlong	local01, fp
111b8     8C 02 90 FD | 	jmp	#LR__1363
111bc                 | LR__1354
111bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
111bc     08 4E 05 F1 | 	add	fp, #8
111c0     A7 1E 02 FB | 	rdlong	local01, fp
111c4     08 4E 85 F1 | 	sub	fp, #8
111c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
111cc     14 4E 05 A1 |  if_e	add	fp, #20
111d0     A7 24 02 AB |  if_e	rdlong	local04, fp
111d4     14 4E 85 A1 |  if_e	sub	fp, #20
111d8     12 23 02 A6 |  if_e	mov	local03, local04
111dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
111e0     24 00 90 5D |  if_ne	jmp	#LR__1355
111e4     00 1E 06 F6 | 	mov	local01, #0
111e8     A7 20 02 FB | 	rdlong	local02, fp
111ec     0C 4E 05 F1 | 	add	fp, #12
111f0     A7 22 02 FB | 	rdlong	local03, fp
111f4     0C 4E 85 F1 | 	sub	fp, #12
111f8     11 21 0A F2 | 	cmp	local02, local03 wz
111fc     01 1E 66 A6 |  if_e	neg	local01, #1
11200     A7 1E 62 FC | 	wrlong	local01, fp
11204     40 02 90 FD | 	jmp	#LR__1363
11208                 | LR__1355
11208                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
11208     08 4E 05 F1 | 	add	fp, #8
1120c     A7 1E 02 FB | 	rdlong	local01, fp
11210     08 4E 85 F1 | 	sub	fp, #8
11214     1C 1E 0E F2 | 	cmp	local01, #28 wz
11218     14 4E 05 A1 |  if_e	add	fp, #20
1121c     A7 24 02 AB |  if_e	rdlong	local04, fp
11220     14 4E 85 A1 |  if_e	sub	fp, #20
11224     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11228     24 00 90 5D |  if_ne	jmp	#LR__1356
1122c     00 1E 06 F6 | 	mov	local01, #0
11230     A7 20 02 FB | 	rdlong	local02, fp
11234     0C 4E 05 F1 | 	add	fp, #12
11238     A7 22 02 FB | 	rdlong	local03, fp
1123c     0C 4E 85 F1 | 	sub	fp, #12
11240     11 21 0A F2 | 	cmp	local02, local03 wz
11244     01 1E 66 A6 |  if_e	neg	local01, #1
11248     A7 1E 62 FC | 	wrlong	local01, fp
1124c     F8 01 90 FD | 	jmp	#LR__1363
11250                 | LR__1356
11250                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
11250     08 4E 05 F1 | 	add	fp, #8
11254     A7 1E 02 FB | 	rdlong	local01, fp
11258     08 4E 85 F1 | 	sub	fp, #8
1125c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11260     14 4E 05 A1 |  if_e	add	fp, #20
11264     A7 22 02 AB |  if_e	rdlong	local03, fp
11268     14 4E 85 A1 |  if_e	sub	fp, #20
1126c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11270     34 00 90 5D |  if_ne	jmp	#LR__1357
11274     00 1E 06 F6 | 	mov	local01, #0
11278     A7 12 02 FB | 	rdlong	arg01, fp
1127c     D8 DC B0 FD | 	call	#__system___float_fromuns
11280     FD 12 02 F6 | 	mov	arg01, result1
11284     0C 4E 05 F1 | 	add	fp, #12
11288     A7 14 02 FB | 	rdlong	arg02, fp
1128c     0C 4E 85 F1 | 	sub	fp, #12
11290     01 16 06 F6 | 	mov	arg03, #1
11294     F8 E4 B0 FD | 	call	#__system___float_cmp
11298     00 FA 0D F2 | 	cmp	result1, #0 wz
1129c     00 1E 26 A6 |  if_e	not	local01, #0
112a0     A7 1E 62 FC | 	wrlong	local01, fp
112a4     A0 01 90 FD | 	jmp	#LR__1363
112a8                 | LR__1357
112a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
112a8     08 4E 05 F1 | 	add	fp, #8
112ac     A7 1E 02 FB | 	rdlong	local01, fp
112b0     08 4E 85 F1 | 	sub	fp, #8
112b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
112b8     14 4E 05 A1 |  if_e	add	fp, #20
112bc     A7 22 02 AB |  if_e	rdlong	local03, fp
112c0     14 4E 85 A1 |  if_e	sub	fp, #20
112c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
112c8     24 00 90 5D |  if_ne	jmp	#LR__1358
112cc     00 1E 06 F6 | 	mov	local01, #0
112d0     A7 20 02 FB | 	rdlong	local02, fp
112d4     0C 4E 05 F1 | 	add	fp, #12
112d8     A7 22 02 FB | 	rdlong	local03, fp
112dc     0C 4E 85 F1 | 	sub	fp, #12
112e0     11 21 0A F2 | 	cmp	local02, local03 wz
112e4     01 1E 66 A6 |  if_e	neg	local01, #1
112e8     A7 1E 62 FC | 	wrlong	local01, fp
112ec     58 01 90 FD | 	jmp	#LR__1363
112f0                 | LR__1358
112f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
112f0     08 4E 05 F1 | 	add	fp, #8
112f4     A7 1E 02 FB | 	rdlong	local01, fp
112f8     08 4E 85 F1 | 	sub	fp, #8
112fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
11300     14 4E 05 A1 |  if_e	add	fp, #20
11304     A7 22 02 AB |  if_e	rdlong	local03, fp
11308     14 4E 85 A1 |  if_e	sub	fp, #20
1130c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11310     24 00 90 5D |  if_ne	jmp	#LR__1359
11314     00 1E 06 F6 | 	mov	local01, #0
11318     A7 20 02 FB | 	rdlong	local02, fp
1131c     0C 4E 05 F1 | 	add	fp, #12
11320     A7 22 02 FB | 	rdlong	local03, fp
11324     0C 4E 85 F1 | 	sub	fp, #12
11328     11 21 0A F2 | 	cmp	local02, local03 wz
1132c     01 1E 66 A6 |  if_e	neg	local01, #1
11330     A7 1E 62 FC | 	wrlong	local01, fp
11334     10 01 90 FD | 	jmp	#LR__1363
11338                 | LR__1359
11338                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
11338     08 4E 05 F1 | 	add	fp, #8
1133c     A7 1E 02 FB | 	rdlong	local01, fp
11340     08 4E 85 F1 | 	sub	fp, #8
11344     2B 1E 0E F2 | 	cmp	local01, #43 wz
11348     14 4E 05 A1 |  if_e	add	fp, #20
1134c     A7 22 02 AB |  if_e	rdlong	local03, fp
11350     14 4E 85 A1 |  if_e	sub	fp, #20
11354     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11358     30 00 90 5D |  if_ne	jmp	#LR__1360
1135c     00 1E 06 F6 | 	mov	local01, #0
11360     A7 12 02 FB | 	rdlong	arg01, fp
11364     04 D1 BF FD | 	call	#_convertstring
11368     FD 12 02 F6 | 	mov	arg01, result1
1136c     0C 4E 05 F1 | 	add	fp, #12
11370     A7 14 02 FB | 	rdlong	arg02, fp
11374     0C 4E 85 F1 | 	sub	fp, #12
11378     8C B4 B0 FD | 	call	#__system___string_cmp
1137c     00 FA 0D F2 | 	cmp	result1, #0 wz
11380     00 1E 26 A6 |  if_e	not	local01, #0
11384     A7 1E 62 FC | 	wrlong	local01, fp
11388     BC 00 90 FD | 	jmp	#LR__1363
1138c                 | LR__1360
1138c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1138c     08 4E 05 F1 | 	add	fp, #8
11390     A7 1E 02 FB | 	rdlong	local01, fp
11394     08 4E 85 F1 | 	sub	fp, #8
11398     1F 1E 0E F2 | 	cmp	local01, #31 wz
1139c     14 4E 05 A1 |  if_e	add	fp, #20
113a0     A7 22 02 AB |  if_e	rdlong	local03, fp
113a4     14 4E 85 A1 |  if_e	sub	fp, #20
113a8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
113ac     34 00 90 5D |  if_ne	jmp	#LR__1361
113b0     00 1E 06 F6 | 	mov	local01, #0
113b4     A7 20 02 FB | 	rdlong	local02, fp
113b8     0C 4E 05 F1 | 	add	fp, #12
113bc     A7 12 02 FB | 	rdlong	arg01, fp
113c0     0C 4E 85 F1 | 	sub	fp, #12
113c4     A4 D0 BF FD | 	call	#_convertstring
113c8     FD 14 02 F6 | 	mov	arg02, result1
113cc     10 13 02 F6 | 	mov	arg01, local02
113d0     34 B4 B0 FD | 	call	#__system___string_cmp
113d4     00 FA 0D F2 | 	cmp	result1, #0 wz
113d8     00 1E 26 A6 |  if_e	not	local01, #0
113dc     A7 1E 62 FC | 	wrlong	local01, fp
113e0     64 00 90 FD | 	jmp	#LR__1363
113e4                 | LR__1361
113e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
113e4     08 4E 05 F1 | 	add	fp, #8
113e8     A7 1E 02 FB | 	rdlong	local01, fp
113ec     08 4E 85 F1 | 	sub	fp, #8
113f0     2B 1E 0E F2 | 	cmp	local01, #43 wz
113f4     14 4E 05 A1 |  if_e	add	fp, #20
113f8     A7 22 02 AB |  if_e	rdlong	local03, fp
113fc     14 4E 85 A1 |  if_e	sub	fp, #20
11400     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11404     3C 00 90 5D |  if_ne	jmp	#LR__1362
11408     00 1E 06 F6 | 	mov	local01, #0
1140c     A7 12 02 FB | 	rdlong	arg01, fp
11410     58 D0 BF FD | 	call	#_convertstring
11414     FD 20 02 F6 | 	mov	local02, result1
11418     0C 4E 05 F1 | 	add	fp, #12
1141c     A7 12 02 FB | 	rdlong	arg01, fp
11420     0C 4E 85 F1 | 	sub	fp, #12
11424     44 D0 BF FD | 	call	#_convertstring
11428     FD 14 02 F6 | 	mov	arg02, result1
1142c     10 13 02 F6 | 	mov	arg01, local02
11430     D4 B3 B0 FD | 	call	#__system___string_cmp
11434     00 FA 0D F2 | 	cmp	result1, #0 wz
11438     00 1E 26 A6 |  if_e	not	local01, #0
1143c     A7 1E 62 FC | 	wrlong	local01, fp
11440     04 00 90 FD | 	jmp	#LR__1363
11444                 | LR__1362
11444     A7 00 68 FC | 	wrlong	#0, fp
11448                 | LR__1363
11448     08 4E 05 F1 | 	add	fp, #8
1144c     A7 38 68 FC | 	wrlong	#28, fp
11450     08 4E 85 F1 | 	sub	fp, #8
11454     A7 12 02 F6 | 	mov	arg01, fp
11458     1C 8E BF FD | 	call	#_push
1145c     A7 F0 03 F6 | 	mov	ptra, fp
11460     B2 00 A0 FD | 	call	#popregs_
11464                 | _do_eq_ret
11464     2D 00 64 FD | 	ret
11468                 | 
11468                 | ' 
11468                 | ' sub do_gt
11468                 | _do_gt
11468     05 4A 05 F6 | 	mov	COUNT_, #5
1146c     A8 00 A0 FD | 	call	#pushregs_
11470     18 F0 07 F1 | 	add	ptra, #24
11474     68 8D BF FD | 	call	#_pop
11478     FD 1E 02 F6 | 	mov	local01, result1
1147c     FE 20 02 F6 | 	mov	local02, result2
11480     FF 22 02 F6 | 	mov	local03, result3
11484     0C 4E 05 F1 | 	add	fp, #12
11488     A7 1E 62 FC | 	wrlong	local01, fp
1148c     04 4E 05 F1 | 	add	fp, #4
11490     A7 20 62 FC | 	wrlong	local02, fp
11494     04 4E 05 F1 | 	add	fp, #4
11498     A7 22 62 FC | 	wrlong	local03, fp
1149c     14 4E 85 F1 | 	sub	fp, #20
114a0     3C 8D BF FD | 	call	#_pop
114a4     FF 22 02 F6 | 	mov	local03, result3
114a8     A7 FA 61 FC | 	wrlong	result1, fp
114ac     04 4E 05 F1 | 	add	fp, #4
114b0     A7 FC 61 FC | 	wrlong	result2, fp
114b4     04 4E 05 F1 | 	add	fp, #4
114b8     A7 22 62 FC | 	wrlong	local03, fp
114bc                 | ' t2=pop()
114bc                 | ' t1=pop()
114bc                 | ' 
114bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
114bc     08 4E 85 F1 | 	sub	fp, #8
114c0     1F 22 0E F2 | 	cmp	local03, #31 wz
114c4     14 4E 05 A1 |  if_e	add	fp, #20
114c8     A7 24 02 AB |  if_e	rdlong	local04, fp
114cc     14 4E 85 A1 |  if_e	sub	fp, #20
114d0     12 23 02 A6 |  if_e	mov	local03, local04
114d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
114d8     28 00 90 5D |  if_ne	jmp	#LR__1370
114dc     00 1E 06 F6 | 	mov	local01, #0
114e0     A7 12 02 FB | 	rdlong	arg01, fp
114e4     0C 4E 05 F1 | 	add	fp, #12
114e8     A7 14 02 FB | 	rdlong	arg02, fp
114ec     0C 4E 85 F1 | 	sub	fp, #12
114f0     14 B3 B0 FD | 	call	#__system___string_cmp
114f4     01 FA 55 F2 | 	cmps	result1, #1 wc
114f8     00 1E 26 36 |  if_ae	not	local01, #0
114fc     A7 1E 62 FC | 	wrlong	local01, fp
11500     1C 04 90 FD | 	jmp	#LR__1383
11504                 | LR__1370
11504                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
11504     08 4E 05 F1 | 	add	fp, #8
11508     A7 1E 02 FB | 	rdlong	local01, fp
1150c     08 4E 85 F1 | 	sub	fp, #8
11510     1E 1E 0E F2 | 	cmp	local01, #30 wz
11514     14 4E 05 A1 |  if_e	add	fp, #20
11518     A7 24 02 AB |  if_e	rdlong	local04, fp
1151c     14 4E 85 A1 |  if_e	sub	fp, #20
11520     12 23 02 A6 |  if_e	mov	local03, local04
11524     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11528     2C 00 90 5D |  if_ne	jmp	#LR__1371
1152c     00 1E 06 F6 | 	mov	local01, #0
11530     A7 12 02 FB | 	rdlong	arg01, fp
11534     0C 4E 05 F1 | 	add	fp, #12
11538     A7 14 02 FB | 	rdlong	arg02, fp
1153c     0C 4E 85 F1 | 	sub	fp, #12
11540     01 16 66 F6 | 	neg	arg03, #1
11544     48 E2 B0 FD | 	call	#__system___float_cmp
11548     01 FA 55 F2 | 	cmps	result1, #1 wc
1154c     00 1E 26 36 |  if_ae	not	local01, #0
11550     A7 1E 62 FC | 	wrlong	local01, fp
11554     C8 03 90 FD | 	jmp	#LR__1383
11558                 | LR__1371
11558                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11558     08 4E 05 F1 | 	add	fp, #8
1155c     A7 1E 02 FB | 	rdlong	local01, fp
11560     08 4E 85 F1 | 	sub	fp, #8
11564     1E 1E 0E F2 | 	cmp	local01, #30 wz
11568     14 4E 05 A1 |  if_e	add	fp, #20
1156c     A7 24 02 AB |  if_e	rdlong	local04, fp
11570     14 4E 85 A1 |  if_e	sub	fp, #20
11574     12 23 02 A6 |  if_e	mov	local03, local04
11578     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1157c     48 00 90 5D |  if_ne	jmp	#LR__1372
11580     00 1E 06 F6 | 	mov	local01, #0
11584     A7 20 02 FB | 	rdlong	local02, fp
11588     0C 4E 05 F1 | 	add	fp, #12
1158c     A7 12 02 FB | 	rdlong	arg01, fp
11590     0C 4E 85 F1 | 	sub	fp, #12
11594     09 13 52 F6 | 	abs	arg01, arg01 wc
11598     1F 26 C6 C9 |  if_b	decod	local05, #31
1159c     00 26 06 36 |  if_ae	mov	local05, #0
115a0     B4 D9 B0 FD | 	call	#__system___float_fromuns
115a4     13 FB 61 F5 | 	xor	result1, local05
115a8     FD 14 02 F6 | 	mov	arg02, result1
115ac     10 13 02 F6 | 	mov	arg01, local02
115b0     01 16 66 F6 | 	neg	arg03, #1
115b4     D8 E1 B0 FD | 	call	#__system___float_cmp
115b8     01 FA 55 F2 | 	cmps	result1, #1 wc
115bc     00 1E 26 36 |  if_ae	not	local01, #0
115c0     A7 1E 62 FC | 	wrlong	local01, fp
115c4     58 03 90 FD | 	jmp	#LR__1383
115c8                 | LR__1372
115c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
115c8     08 4E 05 F1 | 	add	fp, #8
115cc     A7 1E 02 FB | 	rdlong	local01, fp
115d0     08 4E 85 F1 | 	sub	fp, #8
115d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
115d8     14 4E 05 A1 |  if_e	add	fp, #20
115dc     A7 24 02 AB |  if_e	rdlong	local04, fp
115e0     14 4E 85 A1 |  if_e	sub	fp, #20
115e4     12 23 02 A6 |  if_e	mov	local03, local04
115e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
115ec     38 00 90 5D |  if_ne	jmp	#LR__1373
115f0     00 1E 06 F6 | 	mov	local01, #0
115f4     A7 20 02 FB | 	rdlong	local02, fp
115f8     0C 4E 05 F1 | 	add	fp, #12
115fc     A7 12 02 FB | 	rdlong	arg01, fp
11600     0C 4E 85 F1 | 	sub	fp, #12
11604     50 D9 B0 FD | 	call	#__system___float_fromuns
11608     FD 14 02 F6 | 	mov	arg02, result1
1160c     10 13 02 F6 | 	mov	arg01, local02
11610     01 16 66 F6 | 	neg	arg03, #1
11614     78 E1 B0 FD | 	call	#__system___float_cmp
11618     01 FA 55 F2 | 	cmps	result1, #1 wc
1161c     00 1E 26 36 |  if_ae	not	local01, #0
11620     A7 1E 62 FC | 	wrlong	local01, fp
11624     F8 02 90 FD | 	jmp	#LR__1383
11628                 | LR__1373
11628                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11628     08 4E 05 F1 | 	add	fp, #8
1162c     A7 1E 02 FB | 	rdlong	local01, fp
11630     08 4E 85 F1 | 	sub	fp, #8
11634     1C 1E 0E F2 | 	cmp	local01, #28 wz
11638     14 4E 05 A1 |  if_e	add	fp, #20
1163c     A7 24 02 AB |  if_e	rdlong	local04, fp
11640     14 4E 85 A1 |  if_e	sub	fp, #20
11644     12 23 02 A6 |  if_e	mov	local03, local04
11648     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1164c     44 00 90 5D |  if_ne	jmp	#LR__1374
11650     00 1E 06 F6 | 	mov	local01, #0
11654     A7 12 02 FB | 	rdlong	arg01, fp
11658     09 13 52 F6 | 	abs	arg01, arg01 wc
1165c     1F 26 C6 C9 |  if_b	decod	local05, #31
11660     00 26 06 36 |  if_ae	mov	local05, #0
11664     F0 D8 B0 FD | 	call	#__system___float_fromuns
11668     13 FB 61 F5 | 	xor	result1, local05
1166c     FD 12 02 F6 | 	mov	arg01, result1
11670     0C 4E 05 F1 | 	add	fp, #12
11674     A7 14 02 FB | 	rdlong	arg02, fp
11678     0C 4E 85 F1 | 	sub	fp, #12
1167c     01 16 66 F6 | 	neg	arg03, #1
11680     0C E1 B0 FD | 	call	#__system___float_cmp
11684     01 FA 55 F2 | 	cmps	result1, #1 wc
11688     00 1E 26 36 |  if_ae	not	local01, #0
1168c     A7 1E 62 FC | 	wrlong	local01, fp
11690     8C 02 90 FD | 	jmp	#LR__1383
11694                 | LR__1374
11694                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
11694     08 4E 05 F1 | 	add	fp, #8
11698     A7 1E 02 FB | 	rdlong	local01, fp
1169c     08 4E 85 F1 | 	sub	fp, #8
116a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
116a4     14 4E 05 A1 |  if_e	add	fp, #20
116a8     A7 24 02 AB |  if_e	rdlong	local04, fp
116ac     14 4E 85 A1 |  if_e	sub	fp, #20
116b0     12 23 02 A6 |  if_e	mov	local03, local04
116b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
116b8     24 00 90 5D |  if_ne	jmp	#LR__1375
116bc     00 1E 06 F6 | 	mov	local01, #0
116c0     A7 20 02 FB | 	rdlong	local02, fp
116c4     0C 4E 05 F1 | 	add	fp, #12
116c8     A7 22 02 FB | 	rdlong	local03, fp
116cc     0C 4E 85 F1 | 	sub	fp, #12
116d0     11 21 5A F2 | 	cmps	local02, local03 wcz
116d4     01 1E 66 16 |  if_a	neg	local01, #1
116d8     A7 1E 62 FC | 	wrlong	local01, fp
116dc     40 02 90 FD | 	jmp	#LR__1383
116e0                 | LR__1375
116e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
116e0     08 4E 05 F1 | 	add	fp, #8
116e4     A7 1E 02 FB | 	rdlong	local01, fp
116e8     08 4E 85 F1 | 	sub	fp, #8
116ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
116f0     14 4E 05 A1 |  if_e	add	fp, #20
116f4     A7 24 02 AB |  if_e	rdlong	local04, fp
116f8     14 4E 85 A1 |  if_e	sub	fp, #20
116fc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11700     24 00 90 5D |  if_ne	jmp	#LR__1376
11704     00 1E 06 F6 | 	mov	local01, #0
11708     A7 20 02 FB | 	rdlong	local02, fp
1170c     0C 4E 05 F1 | 	add	fp, #12
11710     A7 22 02 FB | 	rdlong	local03, fp
11714     0C 4E 85 F1 | 	sub	fp, #12
11718     11 21 5A F2 | 	cmps	local02, local03 wcz
1171c     01 1E 66 16 |  if_a	neg	local01, #1
11720     A7 1E 62 FC | 	wrlong	local01, fp
11724     F8 01 90 FD | 	jmp	#LR__1383
11728                 | LR__1376
11728                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11728     08 4E 05 F1 | 	add	fp, #8
1172c     A7 1E 02 FB | 	rdlong	local01, fp
11730     08 4E 85 F1 | 	sub	fp, #8
11734     1D 1E 0E F2 | 	cmp	local01, #29 wz
11738     14 4E 05 A1 |  if_e	add	fp, #20
1173c     A7 22 02 AB |  if_e	rdlong	local03, fp
11740     14 4E 85 A1 |  if_e	sub	fp, #20
11744     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11748     34 00 90 5D |  if_ne	jmp	#LR__1377
1174c     00 1E 06 F6 | 	mov	local01, #0
11750     A7 12 02 FB | 	rdlong	arg01, fp
11754     00 D8 B0 FD | 	call	#__system___float_fromuns
11758     FD 12 02 F6 | 	mov	arg01, result1
1175c     0C 4E 05 F1 | 	add	fp, #12
11760     A7 14 02 FB | 	rdlong	arg02, fp
11764     0C 4E 85 F1 | 	sub	fp, #12
11768     01 16 66 F6 | 	neg	arg03, #1
1176c     20 E0 B0 FD | 	call	#__system___float_cmp
11770     01 FA 55 F2 | 	cmps	result1, #1 wc
11774     00 1E 26 36 |  if_ae	not	local01, #0
11778     A7 1E 62 FC | 	wrlong	local01, fp
1177c     A0 01 90 FD | 	jmp	#LR__1383
11780                 | LR__1377
11780                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
11780     08 4E 05 F1 | 	add	fp, #8
11784     A7 1E 02 FB | 	rdlong	local01, fp
11788     08 4E 85 F1 | 	sub	fp, #8
1178c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11790     14 4E 05 A1 |  if_e	add	fp, #20
11794     A7 22 02 AB |  if_e	rdlong	local03, fp
11798     14 4E 85 A1 |  if_e	sub	fp, #20
1179c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
117a0     24 00 90 5D |  if_ne	jmp	#LR__1378
117a4     00 1E 06 F6 | 	mov	local01, #0
117a8     A7 20 02 FB | 	rdlong	local02, fp
117ac     0C 4E 05 F1 | 	add	fp, #12
117b0     A7 22 02 FB | 	rdlong	local03, fp
117b4     0C 4E 85 F1 | 	sub	fp, #12
117b8     11 21 5A F2 | 	cmps	local02, local03 wcz
117bc     01 1E 66 16 |  if_a	neg	local01, #1
117c0     A7 1E 62 FC | 	wrlong	local01, fp
117c4     58 01 90 FD | 	jmp	#LR__1383
117c8                 | LR__1378
117c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
117c8     08 4E 05 F1 | 	add	fp, #8
117cc     A7 1E 02 FB | 	rdlong	local01, fp
117d0     08 4E 85 F1 | 	sub	fp, #8
117d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
117d8     14 4E 05 A1 |  if_e	add	fp, #20
117dc     A7 22 02 AB |  if_e	rdlong	local03, fp
117e0     14 4E 85 A1 |  if_e	sub	fp, #20
117e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
117e8     24 00 90 5D |  if_ne	jmp	#LR__1379
117ec     00 1E 06 F6 | 	mov	local01, #0
117f0     A7 20 02 FB | 	rdlong	local02, fp
117f4     0C 4E 05 F1 | 	add	fp, #12
117f8     A7 22 02 FB | 	rdlong	local03, fp
117fc     0C 4E 85 F1 | 	sub	fp, #12
11800     11 21 1A F2 | 	cmp	local02, local03 wcz
11804     01 1E 66 16 |  if_a	neg	local01, #1
11808     A7 1E 62 FC | 	wrlong	local01, fp
1180c     10 01 90 FD | 	jmp	#LR__1383
11810                 | LR__1379
11810                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
11810     08 4E 05 F1 | 	add	fp, #8
11814     A7 1E 02 FB | 	rdlong	local01, fp
11818     08 4E 85 F1 | 	sub	fp, #8
1181c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11820     14 4E 05 A1 |  if_e	add	fp, #20
11824     A7 22 02 AB |  if_e	rdlong	local03, fp
11828     14 4E 85 A1 |  if_e	sub	fp, #20
1182c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11830     30 00 90 5D |  if_ne	jmp	#LR__1380
11834     00 1E 06 F6 | 	mov	local01, #0
11838     A7 12 02 FB | 	rdlong	arg01, fp
1183c     2C CC BF FD | 	call	#_convertstring
11840     FD 12 02 F6 | 	mov	arg01, result1
11844     0C 4E 05 F1 | 	add	fp, #12
11848     A7 14 02 FB | 	rdlong	arg02, fp
1184c     0C 4E 85 F1 | 	sub	fp, #12
11850     B4 AF B0 FD | 	call	#__system___string_cmp
11854     01 FA 55 F2 | 	cmps	result1, #1 wc
11858     00 1E 26 36 |  if_ae	not	local01, #0
1185c     A7 1E 62 FC | 	wrlong	local01, fp
11860     BC 00 90 FD | 	jmp	#LR__1383
11864                 | LR__1380
11864                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
11864     08 4E 05 F1 | 	add	fp, #8
11868     A7 1E 02 FB | 	rdlong	local01, fp
1186c     08 4E 85 F1 | 	sub	fp, #8
11870     1F 1E 0E F2 | 	cmp	local01, #31 wz
11874     14 4E 05 A1 |  if_e	add	fp, #20
11878     A7 22 02 AB |  if_e	rdlong	local03, fp
1187c     14 4E 85 A1 |  if_e	sub	fp, #20
11880     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11884     34 00 90 5D |  if_ne	jmp	#LR__1381
11888     00 1E 06 F6 | 	mov	local01, #0
1188c     A7 20 02 FB | 	rdlong	local02, fp
11890     0C 4E 05 F1 | 	add	fp, #12
11894     A7 12 02 FB | 	rdlong	arg01, fp
11898     0C 4E 85 F1 | 	sub	fp, #12
1189c     CC CB BF FD | 	call	#_convertstring
118a0     FD 14 02 F6 | 	mov	arg02, result1
118a4     10 13 02 F6 | 	mov	arg01, local02
118a8     5C AF B0 FD | 	call	#__system___string_cmp
118ac     01 FA 55 F2 | 	cmps	result1, #1 wc
118b0     00 1E 26 36 |  if_ae	not	local01, #0
118b4     A7 1E 62 FC | 	wrlong	local01, fp
118b8     64 00 90 FD | 	jmp	#LR__1383
118bc                 | LR__1381
118bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
118bc     08 4E 05 F1 | 	add	fp, #8
118c0     A7 1E 02 FB | 	rdlong	local01, fp
118c4     08 4E 85 F1 | 	sub	fp, #8
118c8     2B 1E 0E F2 | 	cmp	local01, #43 wz
118cc     14 4E 05 A1 |  if_e	add	fp, #20
118d0     A7 22 02 AB |  if_e	rdlong	local03, fp
118d4     14 4E 85 A1 |  if_e	sub	fp, #20
118d8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
118dc     3C 00 90 5D |  if_ne	jmp	#LR__1382
118e0     00 1E 06 F6 | 	mov	local01, #0
118e4     A7 12 02 FB | 	rdlong	arg01, fp
118e8     80 CB BF FD | 	call	#_convertstring
118ec     FD 20 02 F6 | 	mov	local02, result1
118f0     0C 4E 05 F1 | 	add	fp, #12
118f4     A7 12 02 FB | 	rdlong	arg01, fp
118f8     0C 4E 85 F1 | 	sub	fp, #12
118fc     6C CB BF FD | 	call	#_convertstring
11900     FD 14 02 F6 | 	mov	arg02, result1
11904     10 13 02 F6 | 	mov	arg01, local02
11908     FC AE B0 FD | 	call	#__system___string_cmp
1190c     01 FA 55 F2 | 	cmps	result1, #1 wc
11910     00 1E 26 36 |  if_ae	not	local01, #0
11914     A7 1E 62 FC | 	wrlong	local01, fp
11918     04 00 90 FD | 	jmp	#LR__1383
1191c                 | LR__1382
1191c     A7 00 68 FC | 	wrlong	#0, fp
11920                 | LR__1383
11920     08 4E 05 F1 | 	add	fp, #8
11924     A7 38 68 FC | 	wrlong	#28, fp
11928     08 4E 85 F1 | 	sub	fp, #8
1192c     A7 12 02 F6 | 	mov	arg01, fp
11930     44 89 BF FD | 	call	#_push
11934     A7 F0 03 F6 | 	mov	ptra, fp
11938     B2 00 A0 FD | 	call	#popregs_
1193c                 | _do_gt_ret
1193c     2D 00 64 FD | 	ret
11940                 | 
11940                 | ' 
11940                 | ' sub do_lt
11940                 | _do_lt
11940     05 4A 05 F6 | 	mov	COUNT_, #5
11944     A8 00 A0 FD | 	call	#pushregs_
11948     18 F0 07 F1 | 	add	ptra, #24
1194c     90 88 BF FD | 	call	#_pop
11950     FD 1E 02 F6 | 	mov	local01, result1
11954     FE 20 02 F6 | 	mov	local02, result2
11958     FF 22 02 F6 | 	mov	local03, result3
1195c     0C 4E 05 F1 | 	add	fp, #12
11960     A7 1E 62 FC | 	wrlong	local01, fp
11964     04 4E 05 F1 | 	add	fp, #4
11968     A7 20 62 FC | 	wrlong	local02, fp
1196c     04 4E 05 F1 | 	add	fp, #4
11970     A7 22 62 FC | 	wrlong	local03, fp
11974     14 4E 85 F1 | 	sub	fp, #20
11978     64 88 BF FD | 	call	#_pop
1197c     FF 22 02 F6 | 	mov	local03, result3
11980     A7 FA 61 FC | 	wrlong	result1, fp
11984     04 4E 05 F1 | 	add	fp, #4
11988     A7 FC 61 FC | 	wrlong	result2, fp
1198c     04 4E 05 F1 | 	add	fp, #4
11990     A7 22 62 FC | 	wrlong	local03, fp
11994                 | ' t2=pop()
11994                 | ' t1=pop()
11994                 | ' 
11994                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
11994     08 4E 85 F1 | 	sub	fp, #8
11998     1F 22 0E F2 | 	cmp	local03, #31 wz
1199c     14 4E 05 A1 |  if_e	add	fp, #20
119a0     A7 24 02 AB |  if_e	rdlong	local04, fp
119a4     14 4E 85 A1 |  if_e	sub	fp, #20
119a8     12 23 02 A6 |  if_e	mov	local03, local04
119ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
119b0     28 00 90 5D |  if_ne	jmp	#LR__1390
119b4     00 1E 06 F6 | 	mov	local01, #0
119b8     A7 12 02 FB | 	rdlong	arg01, fp
119bc     0C 4E 05 F1 | 	add	fp, #12
119c0     A7 14 02 FB | 	rdlong	arg02, fp
119c4     0C 4E 85 F1 | 	sub	fp, #12
119c8     3C AE B0 FD | 	call	#__system___string_cmp
119cc     00 FA 55 F2 | 	cmps	result1, #0 wc
119d0     00 1E 26 C6 |  if_b	not	local01, #0
119d4     A7 1E 62 FC | 	wrlong	local01, fp
119d8     0C 04 90 FD | 	jmp	#LR__1403
119dc                 | LR__1390
119dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
119dc     08 4E 05 F1 | 	add	fp, #8
119e0     A7 1E 02 FB | 	rdlong	local01, fp
119e4     08 4E 85 F1 | 	sub	fp, #8
119e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
119ec     14 4E 05 A1 |  if_e	add	fp, #20
119f0     A7 24 02 AB |  if_e	rdlong	local04, fp
119f4     14 4E 85 A1 |  if_e	sub	fp, #20
119f8     12 23 02 A6 |  if_e	mov	local03, local04
119fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11a00     2C 00 90 5D |  if_ne	jmp	#LR__1391
11a04     00 1E 06 F6 | 	mov	local01, #0
11a08     A7 12 02 FB | 	rdlong	arg01, fp
11a0c     0C 4E 05 F1 | 	add	fp, #12
11a10     A7 14 02 FB | 	rdlong	arg02, fp
11a14     0C 4E 85 F1 | 	sub	fp, #12
11a18     01 16 06 F6 | 	mov	arg03, #1
11a1c     70 DD B0 FD | 	call	#__system___float_cmp
11a20     00 FA 55 F2 | 	cmps	result1, #0 wc
11a24     00 1E 26 C6 |  if_b	not	local01, #0
11a28     A7 1E 62 FC | 	wrlong	local01, fp
11a2c     B8 03 90 FD | 	jmp	#LR__1403
11a30                 | LR__1391
11a30                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
11a30     08 4E 05 F1 | 	add	fp, #8
11a34     A7 1E 02 FB | 	rdlong	local01, fp
11a38     08 4E 85 F1 | 	sub	fp, #8
11a3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11a40     14 4E 05 A1 |  if_e	add	fp, #20
11a44     A7 24 02 AB |  if_e	rdlong	local04, fp
11a48     14 4E 85 A1 |  if_e	sub	fp, #20
11a4c     12 23 02 A6 |  if_e	mov	local03, local04
11a50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11a54     48 00 90 5D |  if_ne	jmp	#LR__1392
11a58     00 1E 06 F6 | 	mov	local01, #0
11a5c     A7 20 02 FB | 	rdlong	local02, fp
11a60     0C 4E 05 F1 | 	add	fp, #12
11a64     A7 12 02 FB | 	rdlong	arg01, fp
11a68     0C 4E 85 F1 | 	sub	fp, #12
11a6c     09 13 52 F6 | 	abs	arg01, arg01 wc
11a70     1F 26 C6 C9 |  if_b	decod	local05, #31
11a74     00 26 06 36 |  if_ae	mov	local05, #0
11a78     DC D4 B0 FD | 	call	#__system___float_fromuns
11a7c     13 FB 61 F5 | 	xor	result1, local05
11a80     FD 14 02 F6 | 	mov	arg02, result1
11a84     10 13 02 F6 | 	mov	arg01, local02
11a88     01 16 06 F6 | 	mov	arg03, #1
11a8c     00 DD B0 FD | 	call	#__system___float_cmp
11a90     00 FA 55 F2 | 	cmps	result1, #0 wc
11a94     00 1E 26 C6 |  if_b	not	local01, #0
11a98     A7 1E 62 FC | 	wrlong	local01, fp
11a9c     48 03 90 FD | 	jmp	#LR__1403
11aa0                 | LR__1392
11aa0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
11aa0     08 4E 05 F1 | 	add	fp, #8
11aa4     A7 1E 02 FB | 	rdlong	local01, fp
11aa8     08 4E 85 F1 | 	sub	fp, #8
11aac     1E 1E 0E F2 | 	cmp	local01, #30 wz
11ab0     14 4E 05 A1 |  if_e	add	fp, #20
11ab4     A7 24 02 AB |  if_e	rdlong	local04, fp
11ab8     14 4E 85 A1 |  if_e	sub	fp, #20
11abc     12 23 02 A6 |  if_e	mov	local03, local04
11ac0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11ac4     38 00 90 5D |  if_ne	jmp	#LR__1393
11ac8     00 1E 06 F6 | 	mov	local01, #0
11acc     A7 20 02 FB | 	rdlong	local02, fp
11ad0     0C 4E 05 F1 | 	add	fp, #12
11ad4     A7 12 02 FB | 	rdlong	arg01, fp
11ad8     0C 4E 85 F1 | 	sub	fp, #12
11adc     78 D4 B0 FD | 	call	#__system___float_fromuns
11ae0     FD 14 02 F6 | 	mov	arg02, result1
11ae4     10 13 02 F6 | 	mov	arg01, local02
11ae8     01 16 06 F6 | 	mov	arg03, #1
11aec     A0 DC B0 FD | 	call	#__system___float_cmp
11af0     00 FA 55 F2 | 	cmps	result1, #0 wc
11af4     00 1E 26 C6 |  if_b	not	local01, #0
11af8     A7 1E 62 FC | 	wrlong	local01, fp
11afc     E8 02 90 FD | 	jmp	#LR__1403
11b00                 | LR__1393
11b00                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
11b00     08 4E 05 F1 | 	add	fp, #8
11b04     A7 1E 02 FB | 	rdlong	local01, fp
11b08     08 4E 85 F1 | 	sub	fp, #8
11b0c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11b10     14 4E 05 A1 |  if_e	add	fp, #20
11b14     A7 24 02 AB |  if_e	rdlong	local04, fp
11b18     14 4E 85 A1 |  if_e	sub	fp, #20
11b1c     12 23 02 A6 |  if_e	mov	local03, local04
11b20     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11b24     44 00 90 5D |  if_ne	jmp	#LR__1394
11b28     00 1E 06 F6 | 	mov	local01, #0
11b2c     A7 12 02 FB | 	rdlong	arg01, fp
11b30     09 13 52 F6 | 	abs	arg01, arg01 wc
11b34     1F 26 C6 C9 |  if_b	decod	local05, #31
11b38     00 26 06 36 |  if_ae	mov	local05, #0
11b3c     18 D4 B0 FD | 	call	#__system___float_fromuns
11b40     13 FB 61 F5 | 	xor	result1, local05
11b44     FD 12 02 F6 | 	mov	arg01, result1
11b48     0C 4E 05 F1 | 	add	fp, #12
11b4c     A7 14 02 FB | 	rdlong	arg02, fp
11b50     0C 4E 85 F1 | 	sub	fp, #12
11b54     01 16 06 F6 | 	mov	arg03, #1
11b58     34 DC B0 FD | 	call	#__system___float_cmp
11b5c     00 FA 55 F2 | 	cmps	result1, #0 wc
11b60     00 1E 26 C6 |  if_b	not	local01, #0
11b64     A7 1E 62 FC | 	wrlong	local01, fp
11b68     7C 02 90 FD | 	jmp	#LR__1403
11b6c                 | LR__1394
11b6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
11b6c     08 4E 05 F1 | 	add	fp, #8
11b70     A7 1E 02 FB | 	rdlong	local01, fp
11b74     08 4E 85 F1 | 	sub	fp, #8
11b78     1C 1E 0E F2 | 	cmp	local01, #28 wz
11b7c     14 4E 05 A1 |  if_e	add	fp, #20
11b80     A7 24 02 AB |  if_e	rdlong	local04, fp
11b84     14 4E 85 A1 |  if_e	sub	fp, #20
11b88     12 23 02 A6 |  if_e	mov	local03, local04
11b8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b90     20 00 90 5D |  if_ne	jmp	#LR__1395
11b94     A7 20 02 FB | 	rdlong	local02, fp
11b98     0C 4E 05 F1 | 	add	fp, #12
11b9c     A7 22 02 FB | 	rdlong	local03, fp
11ba0     0C 4E 85 F1 | 	sub	fp, #12
11ba4     11 21 52 F2 | 	cmps	local02, local03 wc
11ba8     0F 1F A2 F1 | 	subx	local01, local01
11bac     A7 1E 62 FC | 	wrlong	local01, fp
11bb0     34 02 90 FD | 	jmp	#LR__1403
11bb4                 | LR__1395
11bb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
11bb4     08 4E 05 F1 | 	add	fp, #8
11bb8     A7 1E 02 FB | 	rdlong	local01, fp
11bbc     08 4E 85 F1 | 	sub	fp, #8
11bc0     1C 1E 0E F2 | 	cmp	local01, #28 wz
11bc4     14 4E 05 A1 |  if_e	add	fp, #20
11bc8     A7 24 02 AB |  if_e	rdlong	local04, fp
11bcc     14 4E 85 A1 |  if_e	sub	fp, #20
11bd0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11bd4     20 00 90 5D |  if_ne	jmp	#LR__1396
11bd8     A7 20 02 FB | 	rdlong	local02, fp
11bdc     0C 4E 05 F1 | 	add	fp, #12
11be0     A7 22 02 FB | 	rdlong	local03, fp
11be4     0C 4E 85 F1 | 	sub	fp, #12
11be8     11 21 52 F2 | 	cmps	local02, local03 wc
11bec     0F 1F A2 F1 | 	subx	local01, local01
11bf0     A7 1E 62 FC | 	wrlong	local01, fp
11bf4     F0 01 90 FD | 	jmp	#LR__1403
11bf8                 | LR__1396
11bf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
11bf8     08 4E 05 F1 | 	add	fp, #8
11bfc     A7 1E 02 FB | 	rdlong	local01, fp
11c00     08 4E 85 F1 | 	sub	fp, #8
11c04     1D 1E 0E F2 | 	cmp	local01, #29 wz
11c08     14 4E 05 A1 |  if_e	add	fp, #20
11c0c     A7 22 02 AB |  if_e	rdlong	local03, fp
11c10     14 4E 85 A1 |  if_e	sub	fp, #20
11c14     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11c18     34 00 90 5D |  if_ne	jmp	#LR__1397
11c1c     00 1E 06 F6 | 	mov	local01, #0
11c20     A7 12 02 FB | 	rdlong	arg01, fp
11c24     30 D3 B0 FD | 	call	#__system___float_fromuns
11c28     FD 12 02 F6 | 	mov	arg01, result1
11c2c     0C 4E 05 F1 | 	add	fp, #12
11c30     A7 14 02 FB | 	rdlong	arg02, fp
11c34     0C 4E 85 F1 | 	sub	fp, #12
11c38     01 16 06 F6 | 	mov	arg03, #1
11c3c     50 DB B0 FD | 	call	#__system___float_cmp
11c40     00 FA 55 F2 | 	cmps	result1, #0 wc
11c44     00 1E 26 C6 |  if_b	not	local01, #0
11c48     A7 1E 62 FC | 	wrlong	local01, fp
11c4c     98 01 90 FD | 	jmp	#LR__1403
11c50                 | LR__1397
11c50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
11c50     08 4E 05 F1 | 	add	fp, #8
11c54     A7 1E 02 FB | 	rdlong	local01, fp
11c58     08 4E 85 F1 | 	sub	fp, #8
11c5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11c60     14 4E 05 A1 |  if_e	add	fp, #20
11c64     A7 22 02 AB |  if_e	rdlong	local03, fp
11c68     14 4E 85 A1 |  if_e	sub	fp, #20
11c6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11c70     20 00 90 5D |  if_ne	jmp	#LR__1398
11c74     A7 20 02 FB | 	rdlong	local02, fp
11c78     0C 4E 05 F1 | 	add	fp, #12
11c7c     A7 22 02 FB | 	rdlong	local03, fp
11c80     0C 4E 85 F1 | 	sub	fp, #12
11c84     11 21 52 F2 | 	cmps	local02, local03 wc
11c88     0F 1F A2 F1 | 	subx	local01, local01
11c8c     A7 1E 62 FC | 	wrlong	local01, fp
11c90     54 01 90 FD | 	jmp	#LR__1403
11c94                 | LR__1398
11c94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
11c94     08 4E 05 F1 | 	add	fp, #8
11c98     A7 1E 02 FB | 	rdlong	local01, fp
11c9c     08 4E 85 F1 | 	sub	fp, #8
11ca0     1D 1E 0E F2 | 	cmp	local01, #29 wz
11ca4     14 4E 05 A1 |  if_e	add	fp, #20
11ca8     A7 22 02 AB |  if_e	rdlong	local03, fp
11cac     14 4E 85 A1 |  if_e	sub	fp, #20
11cb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11cb4     20 00 90 5D |  if_ne	jmp	#LR__1399
11cb8     A7 20 02 FB | 	rdlong	local02, fp
11cbc     0C 4E 05 F1 | 	add	fp, #12
11cc0     A7 22 02 FB | 	rdlong	local03, fp
11cc4     0C 4E 85 F1 | 	sub	fp, #12
11cc8     11 21 12 F2 | 	cmp	local02, local03 wc
11ccc     0F 1F A2 F1 | 	subx	local01, local01
11cd0     A7 1E 62 FC | 	wrlong	local01, fp
11cd4     10 01 90 FD | 	jmp	#LR__1403
11cd8                 | LR__1399
11cd8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
11cd8     08 4E 05 F1 | 	add	fp, #8
11cdc     A7 1E 02 FB | 	rdlong	local01, fp
11ce0     08 4E 85 F1 | 	sub	fp, #8
11ce4     2B 1E 0E F2 | 	cmp	local01, #43 wz
11ce8     14 4E 05 A1 |  if_e	add	fp, #20
11cec     A7 22 02 AB |  if_e	rdlong	local03, fp
11cf0     14 4E 85 A1 |  if_e	sub	fp, #20
11cf4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11cf8     30 00 90 5D |  if_ne	jmp	#LR__1400
11cfc     00 1E 06 F6 | 	mov	local01, #0
11d00     A7 12 02 FB | 	rdlong	arg01, fp
11d04     64 C7 BF FD | 	call	#_convertstring
11d08     FD 12 02 F6 | 	mov	arg01, result1
11d0c     0C 4E 05 F1 | 	add	fp, #12
11d10     A7 14 02 FB | 	rdlong	arg02, fp
11d14     0C 4E 85 F1 | 	sub	fp, #12
11d18     EC AA B0 FD | 	call	#__system___string_cmp
11d1c     00 FA 55 F2 | 	cmps	result1, #0 wc
11d20     00 1E 26 C6 |  if_b	not	local01, #0
11d24     A7 1E 62 FC | 	wrlong	local01, fp
11d28     BC 00 90 FD | 	jmp	#LR__1403
11d2c                 | LR__1400
11d2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
11d2c     08 4E 05 F1 | 	add	fp, #8
11d30     A7 1E 02 FB | 	rdlong	local01, fp
11d34     08 4E 85 F1 | 	sub	fp, #8
11d38     1F 1E 0E F2 | 	cmp	local01, #31 wz
11d3c     14 4E 05 A1 |  if_e	add	fp, #20
11d40     A7 22 02 AB |  if_e	rdlong	local03, fp
11d44     14 4E 85 A1 |  if_e	sub	fp, #20
11d48     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11d4c     34 00 90 5D |  if_ne	jmp	#LR__1401
11d50     00 1E 06 F6 | 	mov	local01, #0
11d54     A7 20 02 FB | 	rdlong	local02, fp
11d58     0C 4E 05 F1 | 	add	fp, #12
11d5c     A7 12 02 FB | 	rdlong	arg01, fp
11d60     0C 4E 85 F1 | 	sub	fp, #12
11d64     04 C7 BF FD | 	call	#_convertstring
11d68     FD 14 02 F6 | 	mov	arg02, result1
11d6c     10 13 02 F6 | 	mov	arg01, local02
11d70     94 AA B0 FD | 	call	#__system___string_cmp
11d74     00 FA 55 F2 | 	cmps	result1, #0 wc
11d78     00 1E 26 C6 |  if_b	not	local01, #0
11d7c     A7 1E 62 FC | 	wrlong	local01, fp
11d80     64 00 90 FD | 	jmp	#LR__1403
11d84                 | LR__1401
11d84                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
11d84     08 4E 05 F1 | 	add	fp, #8
11d88     A7 1E 02 FB | 	rdlong	local01, fp
11d8c     08 4E 85 F1 | 	sub	fp, #8
11d90     2B 1E 0E F2 | 	cmp	local01, #43 wz
11d94     14 4E 05 A1 |  if_e	add	fp, #20
11d98     A7 22 02 AB |  if_e	rdlong	local03, fp
11d9c     14 4E 85 A1 |  if_e	sub	fp, #20
11da0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11da4     3C 00 90 5D |  if_ne	jmp	#LR__1402
11da8     00 1E 06 F6 | 	mov	local01, #0
11dac     A7 12 02 FB | 	rdlong	arg01, fp
11db0     B8 C6 BF FD | 	call	#_convertstring
11db4     FD 20 02 F6 | 	mov	local02, result1
11db8     0C 4E 05 F1 | 	add	fp, #12
11dbc     A7 12 02 FB | 	rdlong	arg01, fp
11dc0     0C 4E 85 F1 | 	sub	fp, #12
11dc4     A4 C6 BF FD | 	call	#_convertstring
11dc8     FD 14 02 F6 | 	mov	arg02, result1
11dcc     10 13 02 F6 | 	mov	arg01, local02
11dd0     34 AA B0 FD | 	call	#__system___string_cmp
11dd4     00 FA 55 F2 | 	cmps	result1, #0 wc
11dd8     00 1E 26 C6 |  if_b	not	local01, #0
11ddc     A7 1E 62 FC | 	wrlong	local01, fp
11de0     04 00 90 FD | 	jmp	#LR__1403
11de4                 | LR__1402
11de4     A7 00 68 FC | 	wrlong	#0, fp
11de8                 | LR__1403
11de8     08 4E 05 F1 | 	add	fp, #8
11dec     A7 38 68 FC | 	wrlong	#28, fp
11df0     08 4E 85 F1 | 	sub	fp, #8
11df4     A7 12 02 F6 | 	mov	arg01, fp
11df8     7C 84 BF FD | 	call	#_push
11dfc     A7 F0 03 F6 | 	mov	ptra, fp
11e00     B2 00 A0 FD | 	call	#popregs_
11e04                 | _do_lt_ret
11e04     2D 00 64 FD | 	ret
11e08                 | 
11e08                 | ' 
11e08                 | ' sub do_ge
11e08                 | _do_ge
11e08     05 4A 05 F6 | 	mov	COUNT_, #5
11e0c     A8 00 A0 FD | 	call	#pushregs_
11e10     18 F0 07 F1 | 	add	ptra, #24
11e14     C8 83 BF FD | 	call	#_pop
11e18     FD 1E 02 F6 | 	mov	local01, result1
11e1c     FE 20 02 F6 | 	mov	local02, result2
11e20     FF 22 02 F6 | 	mov	local03, result3
11e24     0C 4E 05 F1 | 	add	fp, #12
11e28     A7 1E 62 FC | 	wrlong	local01, fp
11e2c     04 4E 05 F1 | 	add	fp, #4
11e30     A7 20 62 FC | 	wrlong	local02, fp
11e34     04 4E 05 F1 | 	add	fp, #4
11e38     A7 22 62 FC | 	wrlong	local03, fp
11e3c     14 4E 85 F1 | 	sub	fp, #20
11e40     9C 83 BF FD | 	call	#_pop
11e44     FF 22 02 F6 | 	mov	local03, result3
11e48     A7 FA 61 FC | 	wrlong	result1, fp
11e4c     04 4E 05 F1 | 	add	fp, #4
11e50     A7 FC 61 FC | 	wrlong	result2, fp
11e54     04 4E 05 F1 | 	add	fp, #4
11e58     A7 22 62 FC | 	wrlong	local03, fp
11e5c                 | ' t2=pop()
11e5c                 | ' t1=pop()
11e5c                 | ' 
11e5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
11e5c     08 4E 85 F1 | 	sub	fp, #8
11e60     1F 22 0E F2 | 	cmp	local03, #31 wz
11e64     14 4E 05 A1 |  if_e	add	fp, #20
11e68     A7 24 02 AB |  if_e	rdlong	local04, fp
11e6c     14 4E 85 A1 |  if_e	sub	fp, #20
11e70     12 23 02 A6 |  if_e	mov	local03, local04
11e74     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11e78     28 00 90 5D |  if_ne	jmp	#LR__1410
11e7c     00 1E 06 F6 | 	mov	local01, #0
11e80     A7 12 02 FB | 	rdlong	arg01, fp
11e84     0C 4E 05 F1 | 	add	fp, #12
11e88     A7 14 02 FB | 	rdlong	arg02, fp
11e8c     0C 4E 85 F1 | 	sub	fp, #12
11e90     74 A9 B0 FD | 	call	#__system___string_cmp
11e94     00 FA 55 F2 | 	cmps	result1, #0 wc
11e98     00 1E 26 36 |  if_ae	not	local01, #0
11e9c     A7 1E 62 FC | 	wrlong	local01, fp
11ea0     1C 04 90 FD | 	jmp	#LR__1423
11ea4                 | LR__1410
11ea4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
11ea4     08 4E 05 F1 | 	add	fp, #8
11ea8     A7 1E 02 FB | 	rdlong	local01, fp
11eac     08 4E 85 F1 | 	sub	fp, #8
11eb0     1E 1E 0E F2 | 	cmp	local01, #30 wz
11eb4     14 4E 05 A1 |  if_e	add	fp, #20
11eb8     A7 24 02 AB |  if_e	rdlong	local04, fp
11ebc     14 4E 85 A1 |  if_e	sub	fp, #20
11ec0     12 23 02 A6 |  if_e	mov	local03, local04
11ec4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ec8     2C 00 90 5D |  if_ne	jmp	#LR__1411
11ecc     00 1E 06 F6 | 	mov	local01, #0
11ed0     A7 12 02 FB | 	rdlong	arg01, fp
11ed4     0C 4E 05 F1 | 	add	fp, #12
11ed8     A7 14 02 FB | 	rdlong	arg02, fp
11edc     0C 4E 85 F1 | 	sub	fp, #12
11ee0     01 16 66 F6 | 	neg	arg03, #1
11ee4     A8 D8 B0 FD | 	call	#__system___float_cmp
11ee8     00 FA 55 F2 | 	cmps	result1, #0 wc
11eec     00 1E 26 36 |  if_ae	not	local01, #0
11ef0     A7 1E 62 FC | 	wrlong	local01, fp
11ef4     C8 03 90 FD | 	jmp	#LR__1423
11ef8                 | LR__1411
11ef8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
11ef8     08 4E 05 F1 | 	add	fp, #8
11efc     A7 1E 02 FB | 	rdlong	local01, fp
11f00     08 4E 85 F1 | 	sub	fp, #8
11f04     1E 1E 0E F2 | 	cmp	local01, #30 wz
11f08     14 4E 05 A1 |  if_e	add	fp, #20
11f0c     A7 24 02 AB |  if_e	rdlong	local04, fp
11f10     14 4E 85 A1 |  if_e	sub	fp, #20
11f14     12 23 02 A6 |  if_e	mov	local03, local04
11f18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11f1c     48 00 90 5D |  if_ne	jmp	#LR__1412
11f20     00 1E 06 F6 | 	mov	local01, #0
11f24     A7 20 02 FB | 	rdlong	local02, fp
11f28     0C 4E 05 F1 | 	add	fp, #12
11f2c     A7 12 02 FB | 	rdlong	arg01, fp
11f30     0C 4E 85 F1 | 	sub	fp, #12
11f34     09 13 52 F6 | 	abs	arg01, arg01 wc
11f38     1F 26 C6 C9 |  if_b	decod	local05, #31
11f3c     00 26 06 36 |  if_ae	mov	local05, #0
11f40     14 D0 B0 FD | 	call	#__system___float_fromuns
11f44     13 FB 61 F5 | 	xor	result1, local05
11f48     FD 14 02 F6 | 	mov	arg02, result1
11f4c     10 13 02 F6 | 	mov	arg01, local02
11f50     01 16 66 F6 | 	neg	arg03, #1
11f54     38 D8 B0 FD | 	call	#__system___float_cmp
11f58     00 FA 55 F2 | 	cmps	result1, #0 wc
11f5c     00 1E 26 36 |  if_ae	not	local01, #0
11f60     A7 1E 62 FC | 	wrlong	local01, fp
11f64     58 03 90 FD | 	jmp	#LR__1423
11f68                 | LR__1412
11f68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
11f68     08 4E 05 F1 | 	add	fp, #8
11f6c     A7 1E 02 FB | 	rdlong	local01, fp
11f70     08 4E 85 F1 | 	sub	fp, #8
11f74     1E 1E 0E F2 | 	cmp	local01, #30 wz
11f78     14 4E 05 A1 |  if_e	add	fp, #20
11f7c     A7 24 02 AB |  if_e	rdlong	local04, fp
11f80     14 4E 85 A1 |  if_e	sub	fp, #20
11f84     12 23 02 A6 |  if_e	mov	local03, local04
11f88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11f8c     38 00 90 5D |  if_ne	jmp	#LR__1413
11f90     00 1E 06 F6 | 	mov	local01, #0
11f94     A7 20 02 FB | 	rdlong	local02, fp
11f98     0C 4E 05 F1 | 	add	fp, #12
11f9c     A7 12 02 FB | 	rdlong	arg01, fp
11fa0     0C 4E 85 F1 | 	sub	fp, #12
11fa4     B0 CF B0 FD | 	call	#__system___float_fromuns
11fa8     FD 14 02 F6 | 	mov	arg02, result1
11fac     10 13 02 F6 | 	mov	arg01, local02
11fb0     01 16 66 F6 | 	neg	arg03, #1
11fb4     D8 D7 B0 FD | 	call	#__system___float_cmp
11fb8     00 FA 55 F2 | 	cmps	result1, #0 wc
11fbc     00 1E 26 36 |  if_ae	not	local01, #0
11fc0     A7 1E 62 FC | 	wrlong	local01, fp
11fc4     F8 02 90 FD | 	jmp	#LR__1423
11fc8                 | LR__1413
11fc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
11fc8     08 4E 05 F1 | 	add	fp, #8
11fcc     A7 1E 02 FB | 	rdlong	local01, fp
11fd0     08 4E 85 F1 | 	sub	fp, #8
11fd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
11fd8     14 4E 05 A1 |  if_e	add	fp, #20
11fdc     A7 24 02 AB |  if_e	rdlong	local04, fp
11fe0     14 4E 85 A1 |  if_e	sub	fp, #20
11fe4     12 23 02 A6 |  if_e	mov	local03, local04
11fe8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11fec     44 00 90 5D |  if_ne	jmp	#LR__1414
11ff0     00 1E 06 F6 | 	mov	local01, #0
11ff4     A7 12 02 FB | 	rdlong	arg01, fp
11ff8     09 13 52 F6 | 	abs	arg01, arg01 wc
11ffc     1F 26 C6 C9 |  if_b	decod	local05, #31
12000     00 26 06 36 |  if_ae	mov	local05, #0
12004     50 CF B0 FD | 	call	#__system___float_fromuns
12008     13 FB 61 F5 | 	xor	result1, local05
1200c     FD 12 02 F6 | 	mov	arg01, result1
12010     0C 4E 05 F1 | 	add	fp, #12
12014     A7 14 02 FB | 	rdlong	arg02, fp
12018     0C 4E 85 F1 | 	sub	fp, #12
1201c     01 16 66 F6 | 	neg	arg03, #1
12020     6C D7 B0 FD | 	call	#__system___float_cmp
12024     00 FA 55 F2 | 	cmps	result1, #0 wc
12028     00 1E 26 36 |  if_ae	not	local01, #0
1202c     A7 1E 62 FC | 	wrlong	local01, fp
12030     8C 02 90 FD | 	jmp	#LR__1423
12034                 | LR__1414
12034                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
12034     08 4E 05 F1 | 	add	fp, #8
12038     A7 1E 02 FB | 	rdlong	local01, fp
1203c     08 4E 85 F1 | 	sub	fp, #8
12040     1C 1E 0E F2 | 	cmp	local01, #28 wz
12044     14 4E 05 A1 |  if_e	add	fp, #20
12048     A7 24 02 AB |  if_e	rdlong	local04, fp
1204c     14 4E 85 A1 |  if_e	sub	fp, #20
12050     12 23 02 A6 |  if_e	mov	local03, local04
12054     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12058     24 00 90 5D |  if_ne	jmp	#LR__1415
1205c     00 1E 06 F6 | 	mov	local01, #0
12060     A7 20 02 FB | 	rdlong	local02, fp
12064     0C 4E 05 F1 | 	add	fp, #12
12068     A7 22 02 FB | 	rdlong	local03, fp
1206c     0C 4E 85 F1 | 	sub	fp, #12
12070     11 21 52 F2 | 	cmps	local02, local03 wc
12074     01 1E 66 36 |  if_ae	neg	local01, #1
12078     A7 1E 62 FC | 	wrlong	local01, fp
1207c     40 02 90 FD | 	jmp	#LR__1423
12080                 | LR__1415
12080                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
12080     08 4E 05 F1 | 	add	fp, #8
12084     A7 1E 02 FB | 	rdlong	local01, fp
12088     08 4E 85 F1 | 	sub	fp, #8
1208c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12090     14 4E 05 A1 |  if_e	add	fp, #20
12094     A7 24 02 AB |  if_e	rdlong	local04, fp
12098     14 4E 85 A1 |  if_e	sub	fp, #20
1209c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
120a0     24 00 90 5D |  if_ne	jmp	#LR__1416
120a4     00 1E 06 F6 | 	mov	local01, #0
120a8     A7 20 02 FB | 	rdlong	local02, fp
120ac     0C 4E 05 F1 | 	add	fp, #12
120b0     A7 22 02 FB | 	rdlong	local03, fp
120b4     0C 4E 85 F1 | 	sub	fp, #12
120b8     11 21 52 F2 | 	cmps	local02, local03 wc
120bc     01 1E 66 36 |  if_ae	neg	local01, #1
120c0     A7 1E 62 FC | 	wrlong	local01, fp
120c4     F8 01 90 FD | 	jmp	#LR__1423
120c8                 | LR__1416
120c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
120c8     08 4E 05 F1 | 	add	fp, #8
120cc     A7 1E 02 FB | 	rdlong	local01, fp
120d0     08 4E 85 F1 | 	sub	fp, #8
120d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
120d8     14 4E 05 A1 |  if_e	add	fp, #20
120dc     A7 22 02 AB |  if_e	rdlong	local03, fp
120e0     14 4E 85 A1 |  if_e	sub	fp, #20
120e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
120e8     34 00 90 5D |  if_ne	jmp	#LR__1417
120ec     00 1E 06 F6 | 	mov	local01, #0
120f0     A7 12 02 FB | 	rdlong	arg01, fp
120f4     60 CE B0 FD | 	call	#__system___float_fromuns
120f8     FD 12 02 F6 | 	mov	arg01, result1
120fc     0C 4E 05 F1 | 	add	fp, #12
12100     A7 14 02 FB | 	rdlong	arg02, fp
12104     0C 4E 85 F1 | 	sub	fp, #12
12108     01 16 66 F6 | 	neg	arg03, #1
1210c     80 D6 B0 FD | 	call	#__system___float_cmp
12110     00 FA 55 F2 | 	cmps	result1, #0 wc
12114     00 1E 26 36 |  if_ae	not	local01, #0
12118     A7 1E 62 FC | 	wrlong	local01, fp
1211c     A0 01 90 FD | 	jmp	#LR__1423
12120                 | LR__1417
12120                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
12120     08 4E 05 F1 | 	add	fp, #8
12124     A7 1E 02 FB | 	rdlong	local01, fp
12128     08 4E 85 F1 | 	sub	fp, #8
1212c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12130     14 4E 05 A1 |  if_e	add	fp, #20
12134     A7 22 02 AB |  if_e	rdlong	local03, fp
12138     14 4E 85 A1 |  if_e	sub	fp, #20
1213c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12140     24 00 90 5D |  if_ne	jmp	#LR__1418
12144     00 1E 06 F6 | 	mov	local01, #0
12148     A7 20 02 FB | 	rdlong	local02, fp
1214c     0C 4E 05 F1 | 	add	fp, #12
12150     A7 22 02 FB | 	rdlong	local03, fp
12154     0C 4E 85 F1 | 	sub	fp, #12
12158     11 21 52 F2 | 	cmps	local02, local03 wc
1215c     01 1E 66 36 |  if_ae	neg	local01, #1
12160     A7 1E 62 FC | 	wrlong	local01, fp
12164     58 01 90 FD | 	jmp	#LR__1423
12168                 | LR__1418
12168                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
12168     08 4E 05 F1 | 	add	fp, #8
1216c     A7 1E 02 FB | 	rdlong	local01, fp
12170     08 4E 85 F1 | 	sub	fp, #8
12174     1D 1E 0E F2 | 	cmp	local01, #29 wz
12178     14 4E 05 A1 |  if_e	add	fp, #20
1217c     A7 22 02 AB |  if_e	rdlong	local03, fp
12180     14 4E 85 A1 |  if_e	sub	fp, #20
12184     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12188     24 00 90 5D |  if_ne	jmp	#LR__1419
1218c     00 1E 06 F6 | 	mov	local01, #0
12190     A7 20 02 FB | 	rdlong	local02, fp
12194     0C 4E 05 F1 | 	add	fp, #12
12198     A7 22 02 FB | 	rdlong	local03, fp
1219c     0C 4E 85 F1 | 	sub	fp, #12
121a0     11 21 12 F2 | 	cmp	local02, local03 wc
121a4     01 1E 66 36 |  if_ae	neg	local01, #1
121a8     A7 1E 62 FC | 	wrlong	local01, fp
121ac     10 01 90 FD | 	jmp	#LR__1423
121b0                 | LR__1419
121b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
121b0     08 4E 05 F1 | 	add	fp, #8
121b4     A7 1E 02 FB | 	rdlong	local01, fp
121b8     08 4E 85 F1 | 	sub	fp, #8
121bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
121c0     14 4E 05 A1 |  if_e	add	fp, #20
121c4     A7 22 02 AB |  if_e	rdlong	local03, fp
121c8     14 4E 85 A1 |  if_e	sub	fp, #20
121cc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
121d0     30 00 90 5D |  if_ne	jmp	#LR__1420
121d4     00 1E 06 F6 | 	mov	local01, #0
121d8     A7 12 02 FB | 	rdlong	arg01, fp
121dc     8C C2 BF FD | 	call	#_convertstring
121e0     FD 12 02 F6 | 	mov	arg01, result1
121e4     0C 4E 05 F1 | 	add	fp, #12
121e8     A7 14 02 FB | 	rdlong	arg02, fp
121ec     0C 4E 85 F1 | 	sub	fp, #12
121f0     14 A6 B0 FD | 	call	#__system___string_cmp
121f4     00 FA 55 F2 | 	cmps	result1, #0 wc
121f8     00 1E 26 36 |  if_ae	not	local01, #0
121fc     A7 1E 62 FC | 	wrlong	local01, fp
12200     BC 00 90 FD | 	jmp	#LR__1423
12204                 | LR__1420
12204                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
12204     08 4E 05 F1 | 	add	fp, #8
12208     A7 1E 02 FB | 	rdlong	local01, fp
1220c     08 4E 85 F1 | 	sub	fp, #8
12210     1F 1E 0E F2 | 	cmp	local01, #31 wz
12214     14 4E 05 A1 |  if_e	add	fp, #20
12218     A7 22 02 AB |  if_e	rdlong	local03, fp
1221c     14 4E 85 A1 |  if_e	sub	fp, #20
12220     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12224     34 00 90 5D |  if_ne	jmp	#LR__1421
12228     00 1E 06 F6 | 	mov	local01, #0
1222c     A7 20 02 FB | 	rdlong	local02, fp
12230     0C 4E 05 F1 | 	add	fp, #12
12234     A7 12 02 FB | 	rdlong	arg01, fp
12238     0C 4E 85 F1 | 	sub	fp, #12
1223c     2C C2 BF FD | 	call	#_convertstring
12240     FD 14 02 F6 | 	mov	arg02, result1
12244     10 13 02 F6 | 	mov	arg01, local02
12248     BC A5 B0 FD | 	call	#__system___string_cmp
1224c     00 FA 55 F2 | 	cmps	result1, #0 wc
12250     00 1E 26 36 |  if_ae	not	local01, #0
12254     A7 1E 62 FC | 	wrlong	local01, fp
12258     64 00 90 FD | 	jmp	#LR__1423
1225c                 | LR__1421
1225c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1225c     08 4E 05 F1 | 	add	fp, #8
12260     A7 1E 02 FB | 	rdlong	local01, fp
12264     08 4E 85 F1 | 	sub	fp, #8
12268     2B 1E 0E F2 | 	cmp	local01, #43 wz
1226c     14 4E 05 A1 |  if_e	add	fp, #20
12270     A7 22 02 AB |  if_e	rdlong	local03, fp
12274     14 4E 85 A1 |  if_e	sub	fp, #20
12278     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1227c     3C 00 90 5D |  if_ne	jmp	#LR__1422
12280     00 1E 06 F6 | 	mov	local01, #0
12284     A7 12 02 FB | 	rdlong	arg01, fp
12288     E0 C1 BF FD | 	call	#_convertstring
1228c     FD 20 02 F6 | 	mov	local02, result1
12290     0C 4E 05 F1 | 	add	fp, #12
12294     A7 12 02 FB | 	rdlong	arg01, fp
12298     0C 4E 85 F1 | 	sub	fp, #12
1229c     CC C1 BF FD | 	call	#_convertstring
122a0     FD 14 02 F6 | 	mov	arg02, result1
122a4     10 13 02 F6 | 	mov	arg01, local02
122a8     5C A5 B0 FD | 	call	#__system___string_cmp
122ac     00 FA 55 F2 | 	cmps	result1, #0 wc
122b0     00 1E 26 36 |  if_ae	not	local01, #0
122b4     A7 1E 62 FC | 	wrlong	local01, fp
122b8     04 00 90 FD | 	jmp	#LR__1423
122bc                 | LR__1422
122bc     A7 00 68 FC | 	wrlong	#0, fp
122c0                 | LR__1423
122c0     08 4E 05 F1 | 	add	fp, #8
122c4     A7 38 68 FC | 	wrlong	#28, fp
122c8     08 4E 85 F1 | 	sub	fp, #8
122cc     A7 12 02 F6 | 	mov	arg01, fp
122d0     A4 7F BF FD | 	call	#_push
122d4     A7 F0 03 F6 | 	mov	ptra, fp
122d8     B2 00 A0 FD | 	call	#popregs_
122dc                 | _do_ge_ret
122dc     2D 00 64 FD | 	ret
122e0                 | 
122e0                 | ' 
122e0                 | ' sub do_le
122e0                 | _do_le
122e0     05 4A 05 F6 | 	mov	COUNT_, #5
122e4     A8 00 A0 FD | 	call	#pushregs_
122e8     18 F0 07 F1 | 	add	ptra, #24
122ec     F0 7E BF FD | 	call	#_pop
122f0     FD 1E 02 F6 | 	mov	local01, result1
122f4     FE 20 02 F6 | 	mov	local02, result2
122f8     FF 22 02 F6 | 	mov	local03, result3
122fc     0C 4E 05 F1 | 	add	fp, #12
12300     A7 1E 62 FC | 	wrlong	local01, fp
12304     04 4E 05 F1 | 	add	fp, #4
12308     A7 20 62 FC | 	wrlong	local02, fp
1230c     04 4E 05 F1 | 	add	fp, #4
12310     A7 22 62 FC | 	wrlong	local03, fp
12314     14 4E 85 F1 | 	sub	fp, #20
12318     C4 7E BF FD | 	call	#_pop
1231c     FF 22 02 F6 | 	mov	local03, result3
12320     A7 FA 61 FC | 	wrlong	result1, fp
12324     04 4E 05 F1 | 	add	fp, #4
12328     A7 FC 61 FC | 	wrlong	result2, fp
1232c     04 4E 05 F1 | 	add	fp, #4
12330     A7 22 62 FC | 	wrlong	local03, fp
12334                 | ' t2=pop()
12334                 | ' t1=pop()
12334                 | ' 
12334                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
12334     08 4E 85 F1 | 	sub	fp, #8
12338     1F 22 0E F2 | 	cmp	local03, #31 wz
1233c     14 4E 05 A1 |  if_e	add	fp, #20
12340     A7 24 02 AB |  if_e	rdlong	local04, fp
12344     14 4E 85 A1 |  if_e	sub	fp, #20
12348     12 23 02 A6 |  if_e	mov	local03, local04
1234c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12350     28 00 90 5D |  if_ne	jmp	#LR__1430
12354     00 1E 06 F6 | 	mov	local01, #0
12358     A7 12 02 FB | 	rdlong	arg01, fp
1235c     0C 4E 05 F1 | 	add	fp, #12
12360     A7 14 02 FB | 	rdlong	arg02, fp
12364     0C 4E 85 F1 | 	sub	fp, #12
12368     9C A4 B0 FD | 	call	#__system___string_cmp
1236c     01 FA 55 F2 | 	cmps	result1, #1 wc
12370     00 1E 26 C6 |  if_b	not	local01, #0
12374     A7 1E 62 FC | 	wrlong	local01, fp
12378     1C 04 90 FD | 	jmp	#LR__1443
1237c                 | LR__1430
1237c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1237c     08 4E 05 F1 | 	add	fp, #8
12380     A7 1E 02 FB | 	rdlong	local01, fp
12384     08 4E 85 F1 | 	sub	fp, #8
12388     1E 1E 0E F2 | 	cmp	local01, #30 wz
1238c     14 4E 05 A1 |  if_e	add	fp, #20
12390     A7 24 02 AB |  if_e	rdlong	local04, fp
12394     14 4E 85 A1 |  if_e	sub	fp, #20
12398     12 23 02 A6 |  if_e	mov	local03, local04
1239c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
123a0     2C 00 90 5D |  if_ne	jmp	#LR__1431
123a4     00 1E 06 F6 | 	mov	local01, #0
123a8     A7 12 02 FB | 	rdlong	arg01, fp
123ac     0C 4E 05 F1 | 	add	fp, #12
123b0     A7 14 02 FB | 	rdlong	arg02, fp
123b4     0C 4E 85 F1 | 	sub	fp, #12
123b8     01 16 06 F6 | 	mov	arg03, #1
123bc     D0 D3 B0 FD | 	call	#__system___float_cmp
123c0     01 FA 55 F2 | 	cmps	result1, #1 wc
123c4     00 1E 26 C6 |  if_b	not	local01, #0
123c8     A7 1E 62 FC | 	wrlong	local01, fp
123cc     C8 03 90 FD | 	jmp	#LR__1443
123d0                 | LR__1431
123d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
123d0     08 4E 05 F1 | 	add	fp, #8
123d4     A7 1E 02 FB | 	rdlong	local01, fp
123d8     08 4E 85 F1 | 	sub	fp, #8
123dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
123e0     14 4E 05 A1 |  if_e	add	fp, #20
123e4     A7 24 02 AB |  if_e	rdlong	local04, fp
123e8     14 4E 85 A1 |  if_e	sub	fp, #20
123ec     12 23 02 A6 |  if_e	mov	local03, local04
123f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
123f4     48 00 90 5D |  if_ne	jmp	#LR__1432
123f8     00 1E 06 F6 | 	mov	local01, #0
123fc     A7 20 02 FB | 	rdlong	local02, fp
12400     0C 4E 05 F1 | 	add	fp, #12
12404     A7 12 02 FB | 	rdlong	arg01, fp
12408     0C 4E 85 F1 | 	sub	fp, #12
1240c     09 13 52 F6 | 	abs	arg01, arg01 wc
12410     1F 26 C6 C9 |  if_b	decod	local05, #31
12414     00 26 06 36 |  if_ae	mov	local05, #0
12418     3C CB B0 FD | 	call	#__system___float_fromuns
1241c     13 FB 61 F5 | 	xor	result1, local05
12420     FD 14 02 F6 | 	mov	arg02, result1
12424     10 13 02 F6 | 	mov	arg01, local02
12428     01 16 06 F6 | 	mov	arg03, #1
1242c     60 D3 B0 FD | 	call	#__system___float_cmp
12430     01 FA 55 F2 | 	cmps	result1, #1 wc
12434     00 1E 26 C6 |  if_b	not	local01, #0
12438     A7 1E 62 FC | 	wrlong	local01, fp
1243c     58 03 90 FD | 	jmp	#LR__1443
12440                 | LR__1432
12440                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12440     08 4E 05 F1 | 	add	fp, #8
12444     A7 1E 02 FB | 	rdlong	local01, fp
12448     08 4E 85 F1 | 	sub	fp, #8
1244c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12450     14 4E 05 A1 |  if_e	add	fp, #20
12454     A7 24 02 AB |  if_e	rdlong	local04, fp
12458     14 4E 85 A1 |  if_e	sub	fp, #20
1245c     12 23 02 A6 |  if_e	mov	local03, local04
12460     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12464     38 00 90 5D |  if_ne	jmp	#LR__1433
12468     00 1E 06 F6 | 	mov	local01, #0
1246c     A7 20 02 FB | 	rdlong	local02, fp
12470     0C 4E 05 F1 | 	add	fp, #12
12474     A7 12 02 FB | 	rdlong	arg01, fp
12478     0C 4E 85 F1 | 	sub	fp, #12
1247c     D8 CA B0 FD | 	call	#__system___float_fromuns
12480     FD 14 02 F6 | 	mov	arg02, result1
12484     10 13 02 F6 | 	mov	arg01, local02
12488     01 16 06 F6 | 	mov	arg03, #1
1248c     00 D3 B0 FD | 	call	#__system___float_cmp
12490     01 FA 55 F2 | 	cmps	result1, #1 wc
12494     00 1E 26 C6 |  if_b	not	local01, #0
12498     A7 1E 62 FC | 	wrlong	local01, fp
1249c     F8 02 90 FD | 	jmp	#LR__1443
124a0                 | LR__1433
124a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
124a0     08 4E 05 F1 | 	add	fp, #8
124a4     A7 1E 02 FB | 	rdlong	local01, fp
124a8     08 4E 85 F1 | 	sub	fp, #8
124ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
124b0     14 4E 05 A1 |  if_e	add	fp, #20
124b4     A7 24 02 AB |  if_e	rdlong	local04, fp
124b8     14 4E 85 A1 |  if_e	sub	fp, #20
124bc     12 23 02 A6 |  if_e	mov	local03, local04
124c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
124c4     44 00 90 5D |  if_ne	jmp	#LR__1434
124c8     00 1E 06 F6 | 	mov	local01, #0
124cc     A7 12 02 FB | 	rdlong	arg01, fp
124d0     09 13 52 F6 | 	abs	arg01, arg01 wc
124d4     1F 26 C6 C9 |  if_b	decod	local05, #31
124d8     00 26 06 36 |  if_ae	mov	local05, #0
124dc     78 CA B0 FD | 	call	#__system___float_fromuns
124e0     13 FB 61 F5 | 	xor	result1, local05
124e4     FD 12 02 F6 | 	mov	arg01, result1
124e8     0C 4E 05 F1 | 	add	fp, #12
124ec     A7 14 02 FB | 	rdlong	arg02, fp
124f0     0C 4E 85 F1 | 	sub	fp, #12
124f4     01 16 06 F6 | 	mov	arg03, #1
124f8     94 D2 B0 FD | 	call	#__system___float_cmp
124fc     01 FA 55 F2 | 	cmps	result1, #1 wc
12500     00 1E 26 C6 |  if_b	not	local01, #0
12504     A7 1E 62 FC | 	wrlong	local01, fp
12508     8C 02 90 FD | 	jmp	#LR__1443
1250c                 | LR__1434
1250c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1250c     08 4E 05 F1 | 	add	fp, #8
12510     A7 1E 02 FB | 	rdlong	local01, fp
12514     08 4E 85 F1 | 	sub	fp, #8
12518     1C 1E 0E F2 | 	cmp	local01, #28 wz
1251c     14 4E 05 A1 |  if_e	add	fp, #20
12520     A7 24 02 AB |  if_e	rdlong	local04, fp
12524     14 4E 85 A1 |  if_e	sub	fp, #20
12528     12 23 02 A6 |  if_e	mov	local03, local04
1252c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12530     24 00 90 5D |  if_ne	jmp	#LR__1435
12534     00 1E 06 F6 | 	mov	local01, #0
12538     A7 20 02 FB | 	rdlong	local02, fp
1253c     0C 4E 05 F1 | 	add	fp, #12
12540     A7 22 02 FB | 	rdlong	local03, fp
12544     0C 4E 85 F1 | 	sub	fp, #12
12548     11 21 5A F2 | 	cmps	local02, local03 wcz
1254c     01 1E 66 E6 |  if_be	neg	local01, #1
12550     A7 1E 62 FC | 	wrlong	local01, fp
12554     40 02 90 FD | 	jmp	#LR__1443
12558                 | LR__1435
12558                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12558     08 4E 05 F1 | 	add	fp, #8
1255c     A7 1E 02 FB | 	rdlong	local01, fp
12560     08 4E 85 F1 | 	sub	fp, #8
12564     1C 1E 0E F2 | 	cmp	local01, #28 wz
12568     14 4E 05 A1 |  if_e	add	fp, #20
1256c     A7 24 02 AB |  if_e	rdlong	local04, fp
12570     14 4E 85 A1 |  if_e	sub	fp, #20
12574     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12578     24 00 90 5D |  if_ne	jmp	#LR__1436
1257c     00 1E 06 F6 | 	mov	local01, #0
12580     A7 20 02 FB | 	rdlong	local02, fp
12584     0C 4E 05 F1 | 	add	fp, #12
12588     A7 22 02 FB | 	rdlong	local03, fp
1258c     0C 4E 85 F1 | 	sub	fp, #12
12590     11 21 5A F2 | 	cmps	local02, local03 wcz
12594     01 1E 66 E6 |  if_be	neg	local01, #1
12598     A7 1E 62 FC | 	wrlong	local01, fp
1259c     F8 01 90 FD | 	jmp	#LR__1443
125a0                 | LR__1436
125a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
125a0     08 4E 05 F1 | 	add	fp, #8
125a4     A7 1E 02 FB | 	rdlong	local01, fp
125a8     08 4E 85 F1 | 	sub	fp, #8
125ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
125b0     14 4E 05 A1 |  if_e	add	fp, #20
125b4     A7 22 02 AB |  if_e	rdlong	local03, fp
125b8     14 4E 85 A1 |  if_e	sub	fp, #20
125bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
125c0     34 00 90 5D |  if_ne	jmp	#LR__1437
125c4     00 1E 06 F6 | 	mov	local01, #0
125c8     A7 12 02 FB | 	rdlong	arg01, fp
125cc     88 C9 B0 FD | 	call	#__system___float_fromuns
125d0     FD 12 02 F6 | 	mov	arg01, result1
125d4     0C 4E 05 F1 | 	add	fp, #12
125d8     A7 14 02 FB | 	rdlong	arg02, fp
125dc     0C 4E 85 F1 | 	sub	fp, #12
125e0     01 16 06 F6 | 	mov	arg03, #1
125e4     A8 D1 B0 FD | 	call	#__system___float_cmp
125e8     01 FA 55 F2 | 	cmps	result1, #1 wc
125ec     00 1E 26 C6 |  if_b	not	local01, #0
125f0     A7 1E 62 FC | 	wrlong	local01, fp
125f4     A0 01 90 FD | 	jmp	#LR__1443
125f8                 | LR__1437
125f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
125f8     08 4E 05 F1 | 	add	fp, #8
125fc     A7 1E 02 FB | 	rdlong	local01, fp
12600     08 4E 85 F1 | 	sub	fp, #8
12604     1D 1E 0E F2 | 	cmp	local01, #29 wz
12608     14 4E 05 A1 |  if_e	add	fp, #20
1260c     A7 22 02 AB |  if_e	rdlong	local03, fp
12610     14 4E 85 A1 |  if_e	sub	fp, #20
12614     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12618     24 00 90 5D |  if_ne	jmp	#LR__1438
1261c     00 1E 06 F6 | 	mov	local01, #0
12620     A7 20 02 FB | 	rdlong	local02, fp
12624     0C 4E 05 F1 | 	add	fp, #12
12628     A7 22 02 FB | 	rdlong	local03, fp
1262c     0C 4E 85 F1 | 	sub	fp, #12
12630     11 21 5A F2 | 	cmps	local02, local03 wcz
12634     01 1E 66 E6 |  if_be	neg	local01, #1
12638     A7 1E 62 FC | 	wrlong	local01, fp
1263c     58 01 90 FD | 	jmp	#LR__1443
12640                 | LR__1438
12640                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12640     08 4E 05 F1 | 	add	fp, #8
12644     A7 1E 02 FB | 	rdlong	local01, fp
12648     08 4E 85 F1 | 	sub	fp, #8
1264c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12650     14 4E 05 A1 |  if_e	add	fp, #20
12654     A7 22 02 AB |  if_e	rdlong	local03, fp
12658     14 4E 85 A1 |  if_e	sub	fp, #20
1265c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12660     24 00 90 5D |  if_ne	jmp	#LR__1439
12664     00 1E 06 F6 | 	mov	local01, #0
12668     A7 20 02 FB | 	rdlong	local02, fp
1266c     0C 4E 05 F1 | 	add	fp, #12
12670     A7 22 02 FB | 	rdlong	local03, fp
12674     0C 4E 85 F1 | 	sub	fp, #12
12678     11 21 1A F2 | 	cmp	local02, local03 wcz
1267c     01 1E 66 E6 |  if_be	neg	local01, #1
12680     A7 1E 62 FC | 	wrlong	local01, fp
12684     10 01 90 FD | 	jmp	#LR__1443
12688                 | LR__1439
12688                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12688     08 4E 05 F1 | 	add	fp, #8
1268c     A7 1E 02 FB | 	rdlong	local01, fp
12690     08 4E 85 F1 | 	sub	fp, #8
12694     2B 1E 0E F2 | 	cmp	local01, #43 wz
12698     14 4E 05 A1 |  if_e	add	fp, #20
1269c     A7 22 02 AB |  if_e	rdlong	local03, fp
126a0     14 4E 85 A1 |  if_e	sub	fp, #20
126a4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
126a8     30 00 90 5D |  if_ne	jmp	#LR__1440
126ac     00 1E 06 F6 | 	mov	local01, #0
126b0     A7 12 02 FB | 	rdlong	arg01, fp
126b4     B4 BD BF FD | 	call	#_convertstring
126b8     FD 12 02 F6 | 	mov	arg01, result1
126bc     0C 4E 05 F1 | 	add	fp, #12
126c0     A7 14 02 FB | 	rdlong	arg02, fp
126c4     0C 4E 85 F1 | 	sub	fp, #12
126c8     3C A1 B0 FD | 	call	#__system___string_cmp
126cc     01 FA 55 F2 | 	cmps	result1, #1 wc
126d0     00 1E 26 C6 |  if_b	not	local01, #0
126d4     A7 1E 62 FC | 	wrlong	local01, fp
126d8     BC 00 90 FD | 	jmp	#LR__1443
126dc                 | LR__1440
126dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
126dc     08 4E 05 F1 | 	add	fp, #8
126e0     A7 1E 02 FB | 	rdlong	local01, fp
126e4     08 4E 85 F1 | 	sub	fp, #8
126e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
126ec     14 4E 05 A1 |  if_e	add	fp, #20
126f0     A7 22 02 AB |  if_e	rdlong	local03, fp
126f4     14 4E 85 A1 |  if_e	sub	fp, #20
126f8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
126fc     34 00 90 5D |  if_ne	jmp	#LR__1441
12700     00 1E 06 F6 | 	mov	local01, #0
12704     A7 20 02 FB | 	rdlong	local02, fp
12708     0C 4E 05 F1 | 	add	fp, #12
1270c     A7 12 02 FB | 	rdlong	arg01, fp
12710     0C 4E 85 F1 | 	sub	fp, #12
12714     54 BD BF FD | 	call	#_convertstring
12718     FD 14 02 F6 | 	mov	arg02, result1
1271c     10 13 02 F6 | 	mov	arg01, local02
12720     E4 A0 B0 FD | 	call	#__system___string_cmp
12724     01 FA 55 F2 | 	cmps	result1, #1 wc
12728     00 1E 26 C6 |  if_b	not	local01, #0
1272c     A7 1E 62 FC | 	wrlong	local01, fp
12730     64 00 90 FD | 	jmp	#LR__1443
12734                 | LR__1441
12734                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
12734     08 4E 05 F1 | 	add	fp, #8
12738     A7 1E 02 FB | 	rdlong	local01, fp
1273c     08 4E 85 F1 | 	sub	fp, #8
12740     2B 1E 0E F2 | 	cmp	local01, #43 wz
12744     14 4E 05 A1 |  if_e	add	fp, #20
12748     A7 22 02 AB |  if_e	rdlong	local03, fp
1274c     14 4E 85 A1 |  if_e	sub	fp, #20
12750     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12754     3C 00 90 5D |  if_ne	jmp	#LR__1442
12758     00 1E 06 F6 | 	mov	local01, #0
1275c     A7 12 02 FB | 	rdlong	arg01, fp
12760     08 BD BF FD | 	call	#_convertstring
12764     FD 20 02 F6 | 	mov	local02, result1
12768     0C 4E 05 F1 | 	add	fp, #12
1276c     A7 12 02 FB | 	rdlong	arg01, fp
12770     0C 4E 85 F1 | 	sub	fp, #12
12774     F4 BC BF FD | 	call	#_convertstring
12778     FD 14 02 F6 | 	mov	arg02, result1
1277c     10 13 02 F6 | 	mov	arg01, local02
12780     84 A0 B0 FD | 	call	#__system___string_cmp
12784     01 FA 55 F2 | 	cmps	result1, #1 wc
12788     00 1E 26 C6 |  if_b	not	local01, #0
1278c     A7 1E 62 FC | 	wrlong	local01, fp
12790     04 00 90 FD | 	jmp	#LR__1443
12794                 | LR__1442
12794     A7 00 68 FC | 	wrlong	#0, fp
12798                 | LR__1443
12798     08 4E 05 F1 | 	add	fp, #8
1279c     A7 38 68 FC | 	wrlong	#28, fp
127a0     08 4E 85 F1 | 	sub	fp, #8
127a4     A7 12 02 F6 | 	mov	arg01, fp
127a8     CC 7A BF FD | 	call	#_push
127ac     A7 F0 03 F6 | 	mov	ptra, fp
127b0     B2 00 A0 FD | 	call	#popregs_
127b4                 | _do_le_ret
127b4     2D 00 64 FD | 	ret
127b8                 | 
127b8                 | ' 
127b8                 | ' 
127b8                 | ' sub do_ne
127b8                 | _do_ne
127b8     05 4A 05 F6 | 	mov	COUNT_, #5
127bc     A8 00 A0 FD | 	call	#pushregs_
127c0     18 F0 07 F1 | 	add	ptra, #24
127c4     18 7A BF FD | 	call	#_pop
127c8     FD 1E 02 F6 | 	mov	local01, result1
127cc     FE 20 02 F6 | 	mov	local02, result2
127d0     FF 22 02 F6 | 	mov	local03, result3
127d4     0C 4E 05 F1 | 	add	fp, #12
127d8     A7 1E 62 FC | 	wrlong	local01, fp
127dc     04 4E 05 F1 | 	add	fp, #4
127e0     A7 20 62 FC | 	wrlong	local02, fp
127e4     04 4E 05 F1 | 	add	fp, #4
127e8     A7 22 62 FC | 	wrlong	local03, fp
127ec     14 4E 85 F1 | 	sub	fp, #20
127f0     EC 79 BF FD | 	call	#_pop
127f4     FF 22 02 F6 | 	mov	local03, result3
127f8     A7 FA 61 FC | 	wrlong	result1, fp
127fc     04 4E 05 F1 | 	add	fp, #4
12800     A7 FC 61 FC | 	wrlong	result2, fp
12804     04 4E 05 F1 | 	add	fp, #4
12808     A7 22 62 FC | 	wrlong	local03, fp
1280c                 | ' t2=pop()
1280c                 | ' t1=pop()
1280c                 | ' 
1280c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1280c     08 4E 85 F1 | 	sub	fp, #8
12810     1F 22 0E F2 | 	cmp	local03, #31 wz
12814     14 4E 05 A1 |  if_e	add	fp, #20
12818     A7 24 02 AB |  if_e	rdlong	local04, fp
1281c     14 4E 85 A1 |  if_e	sub	fp, #20
12820     12 23 02 A6 |  if_e	mov	local03, local04
12824     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12828     28 00 90 5D |  if_ne	jmp	#LR__1450
1282c     00 1E 06 F6 | 	mov	local01, #0
12830     A7 12 02 FB | 	rdlong	arg01, fp
12834     0C 4E 05 F1 | 	add	fp, #12
12838     A7 14 02 FB | 	rdlong	arg02, fp
1283c     0C 4E 85 F1 | 	sub	fp, #12
12840     C4 9F B0 FD | 	call	#__system___string_cmp
12844     00 FA 0D F2 | 	cmp	result1, #0 wz
12848     00 1E 26 56 |  if_ne	not	local01, #0
1284c     A7 1E 62 FC | 	wrlong	local01, fp
12850     1C 04 90 FD | 	jmp	#LR__1463
12854                 | LR__1450
12854                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
12854     08 4E 05 F1 | 	add	fp, #8
12858     A7 1E 02 FB | 	rdlong	local01, fp
1285c     08 4E 85 F1 | 	sub	fp, #8
12860     1E 1E 0E F2 | 	cmp	local01, #30 wz
12864     14 4E 05 A1 |  if_e	add	fp, #20
12868     A7 24 02 AB |  if_e	rdlong	local04, fp
1286c     14 4E 85 A1 |  if_e	sub	fp, #20
12870     12 23 02 A6 |  if_e	mov	local03, local04
12874     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12878     2C 00 90 5D |  if_ne	jmp	#LR__1451
1287c     00 1E 06 F6 | 	mov	local01, #0
12880     A7 12 02 FB | 	rdlong	arg01, fp
12884     0C 4E 05 F1 | 	add	fp, #12
12888     A7 14 02 FB | 	rdlong	arg02, fp
1288c     0C 4E 85 F1 | 	sub	fp, #12
12890     01 16 06 F6 | 	mov	arg03, #1
12894     F8 CE B0 FD | 	call	#__system___float_cmp
12898     00 FA 0D F2 | 	cmp	result1, #0 wz
1289c     00 1E 26 56 |  if_ne	not	local01, #0
128a0     A7 1E 62 FC | 	wrlong	local01, fp
128a4     C8 03 90 FD | 	jmp	#LR__1463
128a8                 | LR__1451
128a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
128a8     08 4E 05 F1 | 	add	fp, #8
128ac     A7 1E 02 FB | 	rdlong	local01, fp
128b0     08 4E 85 F1 | 	sub	fp, #8
128b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
128b8     14 4E 05 A1 |  if_e	add	fp, #20
128bc     A7 24 02 AB |  if_e	rdlong	local04, fp
128c0     14 4E 85 A1 |  if_e	sub	fp, #20
128c4     12 23 02 A6 |  if_e	mov	local03, local04
128c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
128cc     48 00 90 5D |  if_ne	jmp	#LR__1452
128d0     00 1E 06 F6 | 	mov	local01, #0
128d4     A7 20 02 FB | 	rdlong	local02, fp
128d8     0C 4E 05 F1 | 	add	fp, #12
128dc     A7 12 02 FB | 	rdlong	arg01, fp
128e0     0C 4E 85 F1 | 	sub	fp, #12
128e4     09 13 52 F6 | 	abs	arg01, arg01 wc
128e8     1F 26 C6 C9 |  if_b	decod	local05, #31
128ec     00 26 06 36 |  if_ae	mov	local05, #0
128f0     64 C6 B0 FD | 	call	#__system___float_fromuns
128f4     13 FB 61 F5 | 	xor	result1, local05
128f8     FD 14 02 F6 | 	mov	arg02, result1
128fc     10 13 02 F6 | 	mov	arg01, local02
12900     01 16 06 F6 | 	mov	arg03, #1
12904     88 CE B0 FD | 	call	#__system___float_cmp
12908     00 FA 0D F2 | 	cmp	result1, #0 wz
1290c     00 1E 26 56 |  if_ne	not	local01, #0
12910     A7 1E 62 FC | 	wrlong	local01, fp
12914     58 03 90 FD | 	jmp	#LR__1463
12918                 | LR__1452
12918                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
12918     08 4E 05 F1 | 	add	fp, #8
1291c     A7 1E 02 FB | 	rdlong	local01, fp
12920     08 4E 85 F1 | 	sub	fp, #8
12924     1E 1E 0E F2 | 	cmp	local01, #30 wz
12928     14 4E 05 A1 |  if_e	add	fp, #20
1292c     A7 24 02 AB |  if_e	rdlong	local04, fp
12930     14 4E 85 A1 |  if_e	sub	fp, #20
12934     12 23 02 A6 |  if_e	mov	local03, local04
12938     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1293c     38 00 90 5D |  if_ne	jmp	#LR__1453
12940     00 1E 06 F6 | 	mov	local01, #0
12944     A7 20 02 FB | 	rdlong	local02, fp
12948     0C 4E 05 F1 | 	add	fp, #12
1294c     A7 12 02 FB | 	rdlong	arg01, fp
12950     0C 4E 85 F1 | 	sub	fp, #12
12954     00 C6 B0 FD | 	call	#__system___float_fromuns
12958     FD 14 02 F6 | 	mov	arg02, result1
1295c     10 13 02 F6 | 	mov	arg01, local02
12960     01 16 06 F6 | 	mov	arg03, #1
12964     28 CE B0 FD | 	call	#__system___float_cmp
12968     00 FA 0D F2 | 	cmp	result1, #0 wz
1296c     00 1E 26 56 |  if_ne	not	local01, #0
12970     A7 1E 62 FC | 	wrlong	local01, fp
12974     F8 02 90 FD | 	jmp	#LR__1463
12978                 | LR__1453
12978                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
12978     08 4E 05 F1 | 	add	fp, #8
1297c     A7 1E 02 FB | 	rdlong	local01, fp
12980     08 4E 85 F1 | 	sub	fp, #8
12984     1C 1E 0E F2 | 	cmp	local01, #28 wz
12988     14 4E 05 A1 |  if_e	add	fp, #20
1298c     A7 24 02 AB |  if_e	rdlong	local04, fp
12990     14 4E 85 A1 |  if_e	sub	fp, #20
12994     12 23 02 A6 |  if_e	mov	local03, local04
12998     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1299c     44 00 90 5D |  if_ne	jmp	#LR__1454
129a0     00 1E 06 F6 | 	mov	local01, #0
129a4     A7 12 02 FB | 	rdlong	arg01, fp
129a8     09 13 52 F6 | 	abs	arg01, arg01 wc
129ac     1F 26 C6 C9 |  if_b	decod	local05, #31
129b0     00 26 06 36 |  if_ae	mov	local05, #0
129b4     A0 C5 B0 FD | 	call	#__system___float_fromuns
129b8     13 FB 61 F5 | 	xor	result1, local05
129bc     FD 12 02 F6 | 	mov	arg01, result1
129c0     0C 4E 05 F1 | 	add	fp, #12
129c4     A7 14 02 FB | 	rdlong	arg02, fp
129c8     0C 4E 85 F1 | 	sub	fp, #12
129cc     01 16 06 F6 | 	mov	arg03, #1
129d0     BC CD B0 FD | 	call	#__system___float_cmp
129d4     00 FA 0D F2 | 	cmp	result1, #0 wz
129d8     00 1E 26 56 |  if_ne	not	local01, #0
129dc     A7 1E 62 FC | 	wrlong	local01, fp
129e0     8C 02 90 FD | 	jmp	#LR__1463
129e4                 | LR__1454
129e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
129e4     08 4E 05 F1 | 	add	fp, #8
129e8     A7 1E 02 FB | 	rdlong	local01, fp
129ec     08 4E 85 F1 | 	sub	fp, #8
129f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
129f4     14 4E 05 A1 |  if_e	add	fp, #20
129f8     A7 24 02 AB |  if_e	rdlong	local04, fp
129fc     14 4E 85 A1 |  if_e	sub	fp, #20
12a00     12 23 02 A6 |  if_e	mov	local03, local04
12a04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12a08     24 00 90 5D |  if_ne	jmp	#LR__1455
12a0c     00 1E 06 F6 | 	mov	local01, #0
12a10     A7 20 02 FB | 	rdlong	local02, fp
12a14     0C 4E 05 F1 | 	add	fp, #12
12a18     A7 22 02 FB | 	rdlong	local03, fp
12a1c     0C 4E 85 F1 | 	sub	fp, #12
12a20     11 21 0A F2 | 	cmp	local02, local03 wz
12a24     01 1E 66 56 |  if_ne	neg	local01, #1
12a28     A7 1E 62 FC | 	wrlong	local01, fp
12a2c     40 02 90 FD | 	jmp	#LR__1463
12a30                 | LR__1455
12a30                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
12a30     08 4E 05 F1 | 	add	fp, #8
12a34     A7 1E 02 FB | 	rdlong	local01, fp
12a38     08 4E 85 F1 | 	sub	fp, #8
12a3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12a40     14 4E 05 A1 |  if_e	add	fp, #20
12a44     A7 24 02 AB |  if_e	rdlong	local04, fp
12a48     14 4E 85 A1 |  if_e	sub	fp, #20
12a4c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12a50     24 00 90 5D |  if_ne	jmp	#LR__1456
12a54     00 1E 06 F6 | 	mov	local01, #0
12a58     A7 20 02 FB | 	rdlong	local02, fp
12a5c     0C 4E 05 F1 | 	add	fp, #12
12a60     A7 22 02 FB | 	rdlong	local03, fp
12a64     0C 4E 85 F1 | 	sub	fp, #12
12a68     11 21 0A F2 | 	cmp	local02, local03 wz
12a6c     01 1E 66 56 |  if_ne	neg	local01, #1
12a70     A7 1E 62 FC | 	wrlong	local01, fp
12a74     F8 01 90 FD | 	jmp	#LR__1463
12a78                 | LR__1456
12a78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
12a78     08 4E 05 F1 | 	add	fp, #8
12a7c     A7 1E 02 FB | 	rdlong	local01, fp
12a80     08 4E 85 F1 | 	sub	fp, #8
12a84     1D 1E 0E F2 | 	cmp	local01, #29 wz
12a88     14 4E 05 A1 |  if_e	add	fp, #20
12a8c     A7 22 02 AB |  if_e	rdlong	local03, fp
12a90     14 4E 85 A1 |  if_e	sub	fp, #20
12a94     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12a98     34 00 90 5D |  if_ne	jmp	#LR__1457
12a9c     00 1E 06 F6 | 	mov	local01, #0
12aa0     A7 12 02 FB | 	rdlong	arg01, fp
12aa4     B0 C4 B0 FD | 	call	#__system___float_fromuns
12aa8     FD 12 02 F6 | 	mov	arg01, result1
12aac     0C 4E 05 F1 | 	add	fp, #12
12ab0     A7 14 02 FB | 	rdlong	arg02, fp
12ab4     0C 4E 85 F1 | 	sub	fp, #12
12ab8     01 16 06 F6 | 	mov	arg03, #1
12abc     D0 CC B0 FD | 	call	#__system___float_cmp
12ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
12ac4     00 1E 26 56 |  if_ne	not	local01, #0
12ac8     A7 1E 62 FC | 	wrlong	local01, fp
12acc     A0 01 90 FD | 	jmp	#LR__1463
12ad0                 | LR__1457
12ad0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
12ad0     08 4E 05 F1 | 	add	fp, #8
12ad4     A7 1E 02 FB | 	rdlong	local01, fp
12ad8     08 4E 85 F1 | 	sub	fp, #8
12adc     1D 1E 0E F2 | 	cmp	local01, #29 wz
12ae0     14 4E 05 A1 |  if_e	add	fp, #20
12ae4     A7 22 02 AB |  if_e	rdlong	local03, fp
12ae8     14 4E 85 A1 |  if_e	sub	fp, #20
12aec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12af0     24 00 90 5D |  if_ne	jmp	#LR__1458
12af4     00 1E 06 F6 | 	mov	local01, #0
12af8     A7 20 02 FB | 	rdlong	local02, fp
12afc     0C 4E 05 F1 | 	add	fp, #12
12b00     A7 22 02 FB | 	rdlong	local03, fp
12b04     0C 4E 85 F1 | 	sub	fp, #12
12b08     11 21 0A F2 | 	cmp	local02, local03 wz
12b0c     01 1E 66 56 |  if_ne	neg	local01, #1
12b10     A7 1E 62 FC | 	wrlong	local01, fp
12b14     58 01 90 FD | 	jmp	#LR__1463
12b18                 | LR__1458
12b18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
12b18     08 4E 05 F1 | 	add	fp, #8
12b1c     A7 1E 02 FB | 	rdlong	local01, fp
12b20     08 4E 85 F1 | 	sub	fp, #8
12b24     1D 1E 0E F2 | 	cmp	local01, #29 wz
12b28     14 4E 05 A1 |  if_e	add	fp, #20
12b2c     A7 22 02 AB |  if_e	rdlong	local03, fp
12b30     14 4E 85 A1 |  if_e	sub	fp, #20
12b34     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12b38     24 00 90 5D |  if_ne	jmp	#LR__1459
12b3c     00 1E 06 F6 | 	mov	local01, #0
12b40     A7 20 02 FB | 	rdlong	local02, fp
12b44     0C 4E 05 F1 | 	add	fp, #12
12b48     A7 22 02 FB | 	rdlong	local03, fp
12b4c     0C 4E 85 F1 | 	sub	fp, #12
12b50     11 21 0A F2 | 	cmp	local02, local03 wz
12b54     01 1E 66 56 |  if_ne	neg	local01, #1
12b58     A7 1E 62 FC | 	wrlong	local01, fp
12b5c     10 01 90 FD | 	jmp	#LR__1463
12b60                 | LR__1459
12b60                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
12b60     08 4E 05 F1 | 	add	fp, #8
12b64     A7 1E 02 FB | 	rdlong	local01, fp
12b68     08 4E 85 F1 | 	sub	fp, #8
12b6c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12b70     14 4E 05 A1 |  if_e	add	fp, #20
12b74     A7 22 02 AB |  if_e	rdlong	local03, fp
12b78     14 4E 85 A1 |  if_e	sub	fp, #20
12b7c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12b80     30 00 90 5D |  if_ne	jmp	#LR__1460
12b84     00 1E 06 F6 | 	mov	local01, #0
12b88     A7 12 02 FB | 	rdlong	arg01, fp
12b8c     DC B8 BF FD | 	call	#_convertstring
12b90     FD 12 02 F6 | 	mov	arg01, result1
12b94     0C 4E 05 F1 | 	add	fp, #12
12b98     A7 14 02 FB | 	rdlong	arg02, fp
12b9c     0C 4E 85 F1 | 	sub	fp, #12
12ba0     64 9C B0 FD | 	call	#__system___string_cmp
12ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
12ba8     00 1E 26 56 |  if_ne	not	local01, #0
12bac     A7 1E 62 FC | 	wrlong	local01, fp
12bb0     BC 00 90 FD | 	jmp	#LR__1463
12bb4                 | LR__1460
12bb4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
12bb4     08 4E 05 F1 | 	add	fp, #8
12bb8     A7 1E 02 FB | 	rdlong	local01, fp
12bbc     08 4E 85 F1 | 	sub	fp, #8
12bc0     1F 1E 0E F2 | 	cmp	local01, #31 wz
12bc4     14 4E 05 A1 |  if_e	add	fp, #20
12bc8     A7 22 02 AB |  if_e	rdlong	local03, fp
12bcc     14 4E 85 A1 |  if_e	sub	fp, #20
12bd0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12bd4     34 00 90 5D |  if_ne	jmp	#LR__1461
12bd8     00 1E 06 F6 | 	mov	local01, #0
12bdc     A7 20 02 FB | 	rdlong	local02, fp
12be0     0C 4E 05 F1 | 	add	fp, #12
12be4     A7 12 02 FB | 	rdlong	arg01, fp
12be8     0C 4E 85 F1 | 	sub	fp, #12
12bec     7C B8 BF FD | 	call	#_convertstring
12bf0     FD 14 02 F6 | 	mov	arg02, result1
12bf4     10 13 02 F6 | 	mov	arg01, local02
12bf8     0C 9C B0 FD | 	call	#__system___string_cmp
12bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
12c00     00 1E 26 56 |  if_ne	not	local01, #0
12c04     A7 1E 62 FC | 	wrlong	local01, fp
12c08     64 00 90 FD | 	jmp	#LR__1463
12c0c                 | LR__1461
12c0c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
12c0c     08 4E 05 F1 | 	add	fp, #8
12c10     A7 1E 02 FB | 	rdlong	local01, fp
12c14     08 4E 85 F1 | 	sub	fp, #8
12c18     2B 1E 0E F2 | 	cmp	local01, #43 wz
12c1c     14 4E 05 A1 |  if_e	add	fp, #20
12c20     A7 22 02 AB |  if_e	rdlong	local03, fp
12c24     14 4E 85 A1 |  if_e	sub	fp, #20
12c28     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12c2c     3C 00 90 5D |  if_ne	jmp	#LR__1462
12c30     00 1E 06 F6 | 	mov	local01, #0
12c34     A7 12 02 FB | 	rdlong	arg01, fp
12c38     30 B8 BF FD | 	call	#_convertstring
12c3c     FD 20 02 F6 | 	mov	local02, result1
12c40     0C 4E 05 F1 | 	add	fp, #12
12c44     A7 12 02 FB | 	rdlong	arg01, fp
12c48     0C 4E 85 F1 | 	sub	fp, #12
12c4c     1C B8 BF FD | 	call	#_convertstring
12c50     FD 14 02 F6 | 	mov	arg02, result1
12c54     10 13 02 F6 | 	mov	arg01, local02
12c58     AC 9B B0 FD | 	call	#__system___string_cmp
12c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
12c60     00 1E 26 56 |  if_ne	not	local01, #0
12c64     A7 1E 62 FC | 	wrlong	local01, fp
12c68     04 00 90 FD | 	jmp	#LR__1463
12c6c                 | LR__1462
12c6c     A7 00 68 FC | 	wrlong	#0, fp
12c70                 | LR__1463
12c70     08 4E 05 F1 | 	add	fp, #8
12c74     A7 38 68 FC | 	wrlong	#28, fp
12c78     08 4E 85 F1 | 	sub	fp, #8
12c7c     A7 12 02 F6 | 	mov	arg01, fp
12c80     F4 75 BF FD | 	call	#_push
12c84     A7 F0 03 F6 | 	mov	ptra, fp
12c88     B2 00 A0 FD | 	call	#popregs_
12c8c                 | _do_ne_ret
12c8c     2D 00 64 FD | 	ret
12c90                 | 
12c90                 | ' 
12c90                 | ' 
12c90                 | ' 
12c90                 | ' ' -------------------   convert a variable on the top of stack to integer
12c90                 | ' 
12c90                 | ' sub do_converttoint
12c90                 | _do_converttoint
12c90     02 4A 05 F6 | 	mov	COUNT_, #2
12c94     A8 00 A0 FD | 	call	#pushregs_
12c98     18 F0 07 F1 | 	add	ptra, #24
12c9c     40 75 BF FD | 	call	#_pop
12ca0     FE 1E 02 F6 | 	mov	local01, result2
12ca4     FF 20 02 F6 | 	mov	local02, result3
12ca8     A7 FA 61 FC | 	wrlong	result1, fp
12cac     04 4E 05 F1 | 	add	fp, #4
12cb0     A7 1E 62 FC | 	wrlong	local01, fp
12cb4     04 4E 05 F1 | 	add	fp, #4
12cb8     A7 20 62 FC | 	wrlong	local02, fp
12cbc                 | ' t1=pop() 
12cbc                 | ' select case t1.result_type
12cbc     08 4E 85 F1 | 	sub	fp, #8
12cc0     1C 20 0E F2 | 	cmp	local02, #28 wz
12cc4     2C 00 90 AD |  if_e	jmp	#LR__1470
12cc8     1D 20 0E F2 | 	cmp	local02, #29 wz
12ccc     40 00 90 AD |  if_e	jmp	#LR__1471
12cd0     1E 20 0E F2 | 	cmp	local02, #30 wz
12cd4     54 00 90 AD |  if_e	jmp	#LR__1472
12cd8     1F 20 0E F2 | 	cmp	local02, #31 wz
12cdc     70 00 90 AD |  if_e	jmp	#LR__1473
12ce0     2B 20 0E F2 | 	cmp	local02, #43 wz
12ce4     94 00 90 AD |  if_e	jmp	#LR__1474
12ce8     FF 20 0E F2 | 	cmp	local02, #255 wz
12cec     C0 00 90 AD |  if_e	jmp	#LR__1475
12cf0     DC 00 90 FD | 	jmp	#LR__1476
12cf4                 | LR__1470
12cf4     A7 20 02 FB | 	rdlong	local02, fp
12cf8     0C 4E 05 F1 | 	add	fp, #12
12cfc     A7 20 62 FC | 	wrlong	local02, fp
12d00     04 4E 05 F1 | 	add	fp, #4
12d04     A7 38 68 FC | 	wrlong	#28, fp
12d08     10 4E 85 F1 | 	sub	fp, #16
12d0c     D4 00 90 FD | 	jmp	#LR__1477
12d10                 | LR__1471
12d10     A7 20 02 FB | 	rdlong	local02, fp
12d14     0C 4E 05 F1 | 	add	fp, #12
12d18     A7 20 62 FC | 	wrlong	local02, fp
12d1c     04 4E 05 F1 | 	add	fp, #4
12d20     A7 38 68 FC | 	wrlong	#28, fp
12d24     10 4E 85 F1 | 	sub	fp, #16
12d28     B8 00 90 FD | 	jmp	#LR__1477
12d2c                 | LR__1472
12d2c     A7 12 02 FB | 	rdlong	arg01, fp
12d30     01 14 06 F6 | 	mov	arg02, #1
12d34     EC CA B0 FD | 	call	#__system___float_tointeger
12d38     0C 4E 05 F1 | 	add	fp, #12
12d3c     A7 FA 61 FC | 	wrlong	result1, fp
12d40     04 4E 05 F1 | 	add	fp, #4
12d44     A7 38 68 FC | 	wrlong	#28, fp
12d48     10 4E 85 F1 | 	sub	fp, #16
12d4c     94 00 90 FD | 	jmp	#LR__1477
12d50                 | LR__1473
12d50     A7 12 02 FB | 	rdlong	arg01, fp
12d54     EC CD B0 FD | 	call	#__system____builtin_atof
12d58     FD 12 02 F6 | 	mov	arg01, result1
12d5c     00 14 06 F6 | 	mov	arg02, #0
12d60     C0 CA B0 FD | 	call	#__system___float_tointeger
12d64     0C 4E 05 F1 | 	add	fp, #12
12d68     A7 FA 61 FC | 	wrlong	result1, fp
12d6c     04 4E 05 F1 | 	add	fp, #4
12d70     A7 38 68 FC | 	wrlong	#28, fp
12d74     10 4E 85 F1 | 	sub	fp, #16
12d78     68 00 90 FD | 	jmp	#LR__1477
12d7c                 | LR__1474
12d7c     A7 12 02 FB | 	rdlong	arg01, fp
12d80     E8 B6 BF FD | 	call	#_convertstring
12d84     FD 12 02 F6 | 	mov	arg01, result1
12d88     B8 CD B0 FD | 	call	#__system____builtin_atof
12d8c     FD 12 02 F6 | 	mov	arg01, result1
12d90     00 14 06 F6 | 	mov	arg02, #0
12d94     8C CA B0 FD | 	call	#__system___float_tointeger
12d98     0C 4E 05 F1 | 	add	fp, #12
12d9c     A7 FA 61 FC | 	wrlong	result1, fp
12da0     04 4E 05 F1 | 	add	fp, #4
12da4     A7 38 68 FC | 	wrlong	#28, fp
12da8     10 4E 85 F1 | 	sub	fp, #16
12dac     34 00 90 FD | 	jmp	#LR__1477
12db0                 | LR__1475
12db0     0C 4E 05 F1 | 	add	fp, #12
12db4     A7 00 68 FC | 	wrlong	#0, fp
12db8     0C 4E 85 F1 | 	sub	fp, #12
12dbc     A7 20 02 FB | 	rdlong	local02, fp
12dc0     10 4E 05 F1 | 	add	fp, #16
12dc4     A7 20 62 FC | 	wrlong	local02, fp
12dc8     10 4E 85 F1 | 	sub	fp, #16
12dcc     14 00 90 FD | 	jmp	#LR__1477
12dd0                 | LR__1476
12dd0     0C 4E 05 F1 | 	add	fp, #12
12dd4     A7 00 68 FC | 	wrlong	#0, fp
12dd8     04 4E 05 F1 | 	add	fp, #4
12ddc     A7 02 68 FC | 	wrlong	#1, fp
12de0     10 4E 85 F1 | 	sub	fp, #16
12de4                 | LR__1477
12de4     0C 4E 05 F1 | 	add	fp, #12
12de8     A7 20 02 FB | 	rdlong	local02, fp
12dec     0C 4E 85 F1 | 	sub	fp, #12
12df0     A7 20 62 FC | 	wrlong	local02, fp
12df4     10 4E 05 F1 | 	add	fp, #16
12df8     A7 20 02 FB | 	rdlong	local02, fp
12dfc     08 4E 85 F1 | 	sub	fp, #8
12e00     A7 20 62 FC | 	wrlong	local02, fp
12e04     08 4E 85 F1 | 	sub	fp, #8
12e08     A7 12 02 F6 | 	mov	arg01, fp
12e0c     68 74 BF FD | 	call	#_push
12e10     A7 F0 03 F6 | 	mov	ptra, fp
12e14     B2 00 A0 FD | 	call	#popregs_
12e18                 | _do_converttoint_ret
12e18     2D 00 64 FD | 	ret
12e1c                 | 
12e1c                 | ' 
12e1c                 | ' function converttoint (t1 as expr_result) as integer
12e1c                 | _converttoint
12e1c     02 4A 05 F6 | 	mov	COUNT_, #2
12e20     A8 00 A0 FD | 	call	#pushregs_
12e24     09 1F 02 F6 | 	mov	local01, arg01
12e28                 | ' 
12e28                 | ' select case t1.result_type
12e28     08 1E 06 F1 | 	add	local01, #8
12e2c     0F 21 02 FB | 	rdlong	local02, local01
12e30     08 1E 86 F1 | 	sub	local01, #8
12e34     1C 20 0E F2 | 	cmp	local02, #28 wz
12e38     24 00 90 AD |  if_e	jmp	#LR__1480
12e3c     1D 20 0E F2 | 	cmp	local02, #29 wz
12e40     24 00 90 AD |  if_e	jmp	#LR__1481
12e44     1E 20 0E F2 | 	cmp	local02, #30 wz
12e48     24 00 90 AD |  if_e	jmp	#LR__1482
12e4c     1F 20 0E F2 | 	cmp	local02, #31 wz
12e50     2C 00 90 AD |  if_e	jmp	#LR__1483
12e54     2B 20 0E F2 | 	cmp	local02, #43 wz
12e58     3C 00 90 AD |  if_e	jmp	#LR__1484
12e5c     58 00 90 FD | 	jmp	#LR__1485
12e60                 | LR__1480
12e60     0F FB 01 FB | 	rdlong	result1, local01
12e64     54 00 90 FD | 	jmp	#LR__1486
12e68                 | LR__1481
12e68     0F FB 01 FB | 	rdlong	result1, local01
12e6c     4C 00 90 FD | 	jmp	#LR__1486
12e70                 | LR__1482
12e70     0F 13 02 FB | 	rdlong	arg01, local01
12e74     01 14 06 F6 | 	mov	arg02, #1
12e78     A8 C9 B0 FD | 	call	#__system___float_tointeger
12e7c     3C 00 90 FD | 	jmp	#LR__1486
12e80                 | LR__1483
12e80     0F 13 02 FB | 	rdlong	arg01, local01
12e84     BC CC B0 FD | 	call	#__system____builtin_atof
12e88     FD 12 02 F6 | 	mov	arg01, result1
12e8c     00 14 06 F6 | 	mov	arg02, #0
12e90     90 C9 B0 FD | 	call	#__system___float_tointeger
12e94     24 00 90 FD | 	jmp	#LR__1486
12e98                 | LR__1484
12e98     0F 13 02 FB | 	rdlong	arg01, local01
12e9c     CC B5 BF FD | 	call	#_convertstring
12ea0     FD 12 02 F6 | 	mov	arg01, result1
12ea4     9C CC B0 FD | 	call	#__system____builtin_atof
12ea8     FD 12 02 F6 | 	mov	arg01, result1
12eac     00 14 06 F6 | 	mov	arg02, #0
12eb0     70 C9 B0 FD | 	call	#__system___float_tointeger
12eb4     04 00 90 FD | 	jmp	#LR__1486
12eb8                 | LR__1485
12eb8     00 FA 05 F6 | 	mov	result1, #0
12ebc                 | LR__1486
12ebc     A7 F0 03 F6 | 	mov	ptra, fp
12ec0     B2 00 A0 FD | 	call	#popregs_
12ec4                 | _converttoint_ret
12ec4     2D 00 64 FD | 	ret
12ec8                 | 
12ec8                 | ' 
12ec8                 | ' function converttofloat (t1 as expr_result) as single
12ec8                 | _converttofloat
12ec8     03 4A 05 F6 | 	mov	COUNT_, #3
12ecc     A8 00 A0 FD | 	call	#pushregs_
12ed0     09 1F 02 F6 | 	mov	local01, arg01
12ed4                 | ' 
12ed4                 | ' select case t1.result_type
12ed4     08 1E 06 F1 | 	add	local01, #8
12ed8     0F 21 02 FB | 	rdlong	local02, local01
12edc     08 1E 86 F1 | 	sub	local01, #8
12ee0     1C 20 0E F2 | 	cmp	local02, #28 wz
12ee4     24 00 90 AD |  if_e	jmp	#LR__1490
12ee8     1D 20 0E F2 | 	cmp	local02, #29 wz
12eec     38 00 90 AD |  if_e	jmp	#LR__1491
12ef0     1E 20 0E F2 | 	cmp	local02, #30 wz
12ef4     3C 00 90 AD |  if_e	jmp	#LR__1492
12ef8     1F 20 0E F2 | 	cmp	local02, #31 wz
12efc     3C 00 90 AD |  if_e	jmp	#LR__1493
12f00     2B 20 0E F2 | 	cmp	local02, #43 wz
12f04     40 00 90 AD |  if_e	jmp	#LR__1494
12f08     50 00 90 FD | 	jmp	#LR__1495
12f0c                 | LR__1490
12f0c     0F 13 02 FB | 	rdlong	arg01, local01
12f10     09 13 52 F6 | 	abs	arg01, arg01 wc
12f14     1F 22 C6 C9 |  if_b	decod	local03, #31
12f18     00 22 06 36 |  if_ae	mov	local03, #0
12f1c     38 C0 B0 FD | 	call	#__system___float_fromuns
12f20     11 FB 61 F5 | 	xor	result1, local03
12f24     38 00 90 FD | 	jmp	#LR__1496
12f28                 | LR__1491
12f28     0F 13 02 FB | 	rdlong	arg01, local01
12f2c     28 C0 B0 FD | 	call	#__system___float_fromuns
12f30     2C 00 90 FD | 	jmp	#LR__1496
12f34                 | LR__1492
12f34     0F FB 01 FB | 	rdlong	result1, local01
12f38     24 00 90 FD | 	jmp	#LR__1496
12f3c                 | LR__1493
12f3c     0F 13 02 FB | 	rdlong	arg01, local01
12f40     00 CC B0 FD | 	call	#__system____builtin_atof
12f44     18 00 90 FD | 	jmp	#LR__1496
12f48                 | LR__1494
12f48     0F 13 02 FB | 	rdlong	arg01, local01
12f4c     1C B5 BF FD | 	call	#_convertstring
12f50     FD 12 02 F6 | 	mov	arg01, result1
12f54     EC CB B0 FD | 	call	#__system____builtin_atof
12f58     04 00 90 FD | 	jmp	#LR__1496
12f5c                 | LR__1495
12f5c     00 FA 05 F6 | 	mov	result1, #0
12f60                 | LR__1496
12f60     A7 F0 03 F6 | 	mov	ptra, fp
12f64     B2 00 A0 FD | 	call	#popregs_
12f68                 | _converttofloat_ret
12f68     2D 00 64 FD | 	ret
12f6c                 | 
12f6c                 | ' 
12f6c                 | ' sub do_rnd
12f6c                 | _do_rnd
12f6c     01 4A 05 F6 | 	mov	COUNT_, #1
12f70     A8 00 A0 FD | 	call	#pushregs_
12f74     10 F0 07 F1 | 	add	ptra, #16
12f78     6A 00 00 FF 
12f7c     64 E4 05 F1 | 	add	objptr, ##54372
12f80     F2 1E 02 FB | 	rdlong	local01, objptr
12f84     0F 17 02 F6 | 	mov	arg03, local01
12f88     01 16 66 F0 | 	shl	arg03, #1
12f8c     0F 17 02 F1 | 	add	arg03, local01
12f90     02 16 66 F0 | 	shl	arg03, #2
12f94     03 00 00 FF 
12f98     04 E4 85 F1 | 	sub	objptr, ##1540
12f9c     F2 16 02 F1 | 	add	arg03, objptr
12fa0     0B 17 02 FB | 	rdlong	arg03, arg03
12fa4     0C 4E 05 F1 | 	add	fp, #12
12fa8     A7 16 62 FC | 	wrlong	arg03, fp
12fac                 | ' 
12fac                 | ' numpar=compiledline(lineptr_e).result.uresult
12fac                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
12fac     0C 4E 85 F1 | 	sub	fp, #12
12fb0     02 16 16 F2 | 	cmp	arg03, #2 wc
12fb4     67 00 00 FF 
12fb8     60 E4 85 F1 | 	sub	objptr, ##52832
12fbc     3C 00 90 CD |  if_b	jmp	#LR__1500
12fc0     00 12 06 F6 | 	mov	arg01, #0
12fc4     A8 F1 B0 FD | 	call	#__system___getiolock_0474
12fc8     FD 12 02 F6 | 	mov	arg01, result1
12fcc     10 98 B0 FD | 	call	#__system___lockmem
12fd0     61 01 00 FF 
12fd4     F0 15 06 F6 | 	mov	arg02, ##@LR__4952
12fd8     00 12 06 F6 | 	mov	arg01, #0
12fdc     00 16 06 F6 | 	mov	arg03, #0
12fe0     00 A5 B0 FD | 	call	#__system___basic_print_string
12fe4     00 12 06 F6 | 	mov	arg01, #0
12fe8     84 F1 B0 FD | 	call	#__system___getiolock_0474
12fec     FD 00 68 FC | 	wrlong	#0, result1
12ff0     27 12 06 F6 | 	mov	arg01, #39
12ff4     00 60 B0 FD | 	call	#_printerror
12ff8     2C 01 90 FD | 	jmp	#LR__1507
12ffc                 | LR__1500
12ffc                 | ' if numpar=0 then
12ffc     0C 4E 05 F1 | 	add	fp, #12
13000     A7 FE 09 FB | 	rdlong	result3, fp wz
13004     0C 4E 85 F1 | 	sub	fp, #12
13008     20 00 90 5D |  if_ne	jmp	#LR__1501
1300c     08 4E 05 F1 | 	add	fp, #8
13010     A7 3A 68 FC | 	wrlong	#29, fp
13014     08 4E 85 F1 | 	sub	fp, #8
13018     1B FA 61 FD | 	getrnd	result1
1301c     A7 FA 61 FC | 	wrlong	result1, fp
13020     A7 12 02 F6 | 	mov	arg01, fp
13024     50 72 BF FD | 	call	#_push
13028     FC 00 90 FD | 	jmp	#LR__1506
1302c                 | LR__1501
1302c     B0 71 BF FD | 	call	#_pop
13030     A7 FA 61 FC | 	wrlong	result1, fp
13034     04 4E 05 F1 | 	add	fp, #4
13038     A7 FC 61 FC | 	wrlong	result2, fp
1303c     04 4E 05 F1 | 	add	fp, #4
13040     A7 FE 61 FC | 	wrlong	result3, fp
13044                 | '   t1=pop()
13044                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
13044     08 4E 85 F1 | 	sub	fp, #8
13048     1C FE 0D F2 | 	cmp	result3, #28 wz
1304c     08 4E 05 51 |  if_ne	add	fp, #8
13050     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13054     08 4E 85 51 |  if_ne	sub	fp, #8
13058     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1305c     2C 00 90 5D |  if_ne	jmp	#LR__1502
13060     1B FA 61 FD | 	getrnd	result1
13064     A7 1E 02 FB | 	rdlong	local01, fp
13068     0F FB 11 FD | 	qdiv	result1, local01
1306c     A7 12 02 F6 | 	mov	arg01, fp
13070     19 1E 62 FD | 	getqy	local01
13074     A7 1E 62 FC | 	wrlong	local01, fp
13078     08 4E 05 F1 | 	add	fp, #8
1307c     A7 3A 68 FC | 	wrlong	#29, fp
13080     08 4E 85 F1 | 	sub	fp, #8
13084     F0 71 BF FD | 	call	#_push
13088     9C 00 90 FD | 	jmp	#LR__1505
1308c                 | LR__1502
1308c     08 4E 05 F1 | 	add	fp, #8
13090     A7 1E 02 FB | 	rdlong	local01, fp
13094     08 4E 85 F1 | 	sub	fp, #8
13098     1E 1E 0E F2 | 	cmp	local01, #30 wz
1309c     48 00 90 5D |  if_ne	jmp	#LR__1503
130a0     A7 12 02 FB | 	rdlong	arg01, fp
130a4     00 C0 24 FF 
130a8     00 14 06 F6 | 	mov	arg02, ##1233125376
130ac     B0 C4 B0 FD | 	call	#__system___float_div
130b0     FD 1E 02 F6 | 	mov	local01, result1
130b4     1B 12 62 FD | 	getrnd	arg01
130b8     74 13 06 F4 | 	bitl	arg01, #372
130bc     98 BE B0 FD | 	call	#__system___float_fromuns
130c0     FD 14 02 F6 | 	mov	arg02, result1
130c4     0F 13 02 F6 | 	mov	arg01, local01
130c8     90 C2 B0 FD | 	call	#__system___float_mul
130cc     A7 FA 61 FC | 	wrlong	result1, fp
130d0     08 4E 05 F1 | 	add	fp, #8
130d4     A7 3C 68 FC | 	wrlong	#30, fp
130d8     08 4E 85 F1 | 	sub	fp, #8
130dc     A7 12 02 F6 | 	mov	arg01, fp
130e0     94 71 BF FD | 	call	#_push
130e4     40 00 90 FD | 	jmp	#LR__1504
130e8                 | LR__1503
130e8                 | '     print "rnd: "; : printerror(40) 
130e8     00 12 06 F6 | 	mov	arg01, #0
130ec     80 F0 B0 FD | 	call	#__system___getiolock_0474
130f0     FD 12 02 F6 | 	mov	arg01, result1
130f4     E8 96 B0 FD | 	call	#__system___lockmem
130f8     61 01 00 FF 
130fc     F6 15 06 F6 | 	mov	arg02, ##@LR__4953
13100     00 12 06 F6 | 	mov	arg01, #0
13104     00 16 06 F6 | 	mov	arg03, #0
13108     D8 A3 B0 FD | 	call	#__system___basic_print_string
1310c     00 12 06 F6 | 	mov	arg01, #0
13110     5C F0 B0 FD | 	call	#__system___getiolock_0474
13114     FD 00 68 FC | 	wrlong	#0, result1
13118     28 12 06 F6 | 	mov	arg01, #40
1311c     D8 5E B0 FD | 	call	#_printerror
13120     A7 12 02 F6 | 	mov	arg01, fp
13124     50 71 BF FD | 	call	#_push
13128                 | LR__1504
13128                 | LR__1505
13128                 | LR__1506
13128                 | LR__1507
13128     A7 F0 03 F6 | 	mov	ptra, fp
1312c     B2 00 A0 FD | 	call	#popregs_
13130                 | _do_rnd_ret
13130     2D 00 64 FD | 	ret
13134                 | 
13134                 | ' 
13134                 | ' sub do_getenvsustain
13134                 | _do_getenvsustain
13134     01 4A 05 F6 | 	mov	COUNT_, #1
13138     A8 00 A0 FD | 	call	#pushregs_
1313c     10 F0 07 F1 | 	add	ptra, #16
13140     6A 00 00 FF 
13144     64 E4 05 F1 | 	add	objptr, ##54372
13148     F2 1E 02 FB | 	rdlong	local01, objptr
1314c     0F 17 02 F6 | 	mov	arg03, local01
13150     01 16 66 F0 | 	shl	arg03, #1
13154     0F 17 02 F1 | 	add	arg03, local01
13158     02 16 66 F0 | 	shl	arg03, #2
1315c     03 00 00 FF 
13160     04 E4 85 F1 | 	sub	objptr, ##1540
13164     F2 16 02 F1 | 	add	arg03, objptr
13168     0B 17 02 FB | 	rdlong	arg03, arg03
1316c     0C 4E 05 F1 | 	add	fp, #12
13170     A7 16 62 FC | 	wrlong	arg03, fp
13174                 | ' 
13174                 | ' numpar=compiledline(lineptr_e).result.uresult
13174                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
13174     0C 4E 85 F1 | 	sub	fp, #12
13178     02 16 16 F2 | 	cmp	arg03, #2 wc
1317c     67 00 00 FF 
13180     60 E4 85 F1 | 	sub	objptr, ##52832
13184     0C 4E 05 C1 |  if_b	add	fp, #12
13188     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1318c     0C 4E 85 C1 |  if_b	sub	fp, #12
13190     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1510
13194     00 12 06 F6 | 	mov	arg01, #0
13198     D4 EF B0 FD | 	call	#__system___getiolock_0474
1319c     FD 12 02 F6 | 	mov	arg01, result1
131a0     3C 96 B0 FD | 	call	#__system___lockmem
131a4     61 01 00 FF 
131a8     FC 15 06 F6 | 	mov	arg02, ##@LR__4954
131ac     00 12 06 F6 | 	mov	arg01, #0
131b0     00 16 06 F6 | 	mov	arg03, #0
131b4     2C A3 B0 FD | 	call	#__system___basic_print_string
131b8     00 12 06 F6 | 	mov	arg01, #0
131bc     B0 EF B0 FD | 	call	#__system___getiolock_0474
131c0     FD 00 68 FC | 	wrlong	#0, result1
131c4     27 12 06 F6 | 	mov	arg01, #39
131c8     2C 5E B0 FD | 	call	#_printerror
131cc     64 00 90 FD | 	jmp	#LR__1511
131d0                 | LR__1510
131d0     0C 70 BF FD | 	call	#_pop
131d4     FD 1E 02 F6 | 	mov	local01, result1
131d8     FE 16 02 F6 | 	mov	arg03, result2
131dc     A7 1E 62 FC | 	wrlong	local01, fp
131e0     04 4E 05 F1 | 	add	fp, #4
131e4     A7 16 62 FC | 	wrlong	arg03, fp
131e8     04 4E 05 F1 | 	add	fp, #4
131ec     A7 FE 61 FC | 	wrlong	result3, fp
131f0     08 4E 85 F1 | 	sub	fp, #8
131f4     A7 12 02 F6 | 	mov	arg01, fp
131f8     20 FC BF FD | 	call	#_converttoint
131fc     FD 1E 02 F6 | 	mov	local01, result1
13200     01 1E 66 F0 | 	shl	local01, #1
13204     7B 00 00 FF 
13208     78 E4 05 F1 | 	add	objptr, ##63096
1320c     F2 1E 02 F1 | 	add	local01, objptr
13210     0F 1F E2 FA | 	rdword	local01, local01
13214     A7 1E 62 FC | 	wrlong	local01, fp
13218     08 4E 05 F1 | 	add	fp, #8
1321c     A7 38 68 FC | 	wrlong	#28, fp
13220     08 4E 85 F1 | 	sub	fp, #8
13224     A7 12 02 F6 | 	mov	arg01, fp
13228     7B 00 00 FF 
1322c     78 E4 85 F1 | 	sub	objptr, ##63096
13230     44 70 BF FD | 	call	#_push
13234                 | LR__1511
13234     A7 F0 03 F6 | 	mov	ptra, fp
13238     B2 00 A0 FD | 	call	#popregs_
1323c                 | _do_getenvsustain_ret
1323c     2D 00 64 FD | 	ret
13240                 | 
13240                 | ' 
13240                 | ' sub do_sin
13240                 | _do_sin
13240     01 4A 05 F6 | 	mov	COUNT_, #1
13244     A8 00 A0 FD | 	call	#pushregs_
13248     10 F0 07 F1 | 	add	ptra, #16
1324c     6A 00 00 FF 
13250     64 E4 05 F1 | 	add	objptr, ##54372
13254     F2 1E 02 FB | 	rdlong	local01, objptr
13258     0F 17 02 F6 | 	mov	arg03, local01
1325c     01 16 66 F0 | 	shl	arg03, #1
13260     0F 17 02 F1 | 	add	arg03, local01
13264     02 16 66 F0 | 	shl	arg03, #2
13268     03 00 00 FF 
1326c     04 E4 85 F1 | 	sub	objptr, ##1540
13270     F2 16 02 F1 | 	add	arg03, objptr
13274     0B 17 02 FB | 	rdlong	arg03, arg03
13278     0C 4E 05 F1 | 	add	fp, #12
1327c     A7 16 62 FC | 	wrlong	arg03, fp
13280                 | ' 
13280                 | ' numpar=compiledline(lineptr_e).result.uresult
13280                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
13280     0C 4E 85 F1 | 	sub	fp, #12
13284     02 16 16 F2 | 	cmp	arg03, #2 wc
13288     67 00 00 FF 
1328c     60 E4 85 F1 | 	sub	objptr, ##52832
13290     0C 4E 05 C1 |  if_b	add	fp, #12
13294     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13298     0C 4E 85 C1 |  if_b	sub	fp, #12
1329c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1520
132a0     00 12 06 F6 | 	mov	arg01, #0
132a4     C8 EE B0 FD | 	call	#__system___getiolock_0474
132a8     FD 12 02 F6 | 	mov	arg01, result1
132ac     30 95 B0 FD | 	call	#__system___lockmem
132b0     62 01 00 FF 
132b4     0C 14 06 F6 | 	mov	arg02, ##@LR__4955
132b8     00 12 06 F6 | 	mov	arg01, #0
132bc     00 16 06 F6 | 	mov	arg03, #0
132c0     20 A2 B0 FD | 	call	#__system___basic_print_string
132c4     00 12 06 F6 | 	mov	arg01, #0
132c8     A4 EE B0 FD | 	call	#__system___getiolock_0474
132cc     FD 00 68 FC | 	wrlong	#0, result1
132d0     27 12 06 F6 | 	mov	arg01, #39
132d4     20 5D B0 FD | 	call	#_printerror
132d8     64 00 90 FD | 	jmp	#LR__1521
132dc                 | LR__1520
132dc     00 6F BF FD | 	call	#_pop
132e0     A7 FA 61 FC | 	wrlong	result1, fp
132e4     04 4E 05 F1 | 	add	fp, #4
132e8     A7 FC 61 FC | 	wrlong	result2, fp
132ec     04 4E 05 F1 | 	add	fp, #4
132f0     A7 FE 61 FC | 	wrlong	result3, fp
132f4     08 4E 85 F1 | 	sub	fp, #8
132f8     7B 00 00 FF 
132fc     6C E4 05 F1 | 	add	objptr, ##63084
13300     F2 1E 02 FB | 	rdlong	local01, objptr
13304     7B 00 00 FF 
13308     6C E4 85 F1 | 	sub	objptr, ##63084
1330c     A7 12 02 F6 | 	mov	arg01, fp
13310     B4 FB BF FD | 	call	#_converttofloat
13314     FD 14 02 F6 | 	mov	arg02, result1
13318     0F 13 02 F6 | 	mov	arg01, local01
1331c     3C C0 B0 FD | 	call	#__system___float_mul
13320     FD 12 02 F6 | 	mov	arg01, result1
13324     70 C9 B0 FD | 	call	#__system____builtin_sinf
13328     A7 FA 61 FC | 	wrlong	result1, fp
1332c     08 4E 05 F1 | 	add	fp, #8
13330     A7 3C 68 FC | 	wrlong	#30, fp
13334     08 4E 85 F1 | 	sub	fp, #8
13338     A7 12 02 F6 | 	mov	arg01, fp
1333c     38 6F BF FD | 	call	#_push
13340                 | LR__1521
13340     A7 F0 03 F6 | 	mov	ptra, fp
13344     B2 00 A0 FD | 	call	#popregs_
13348                 | _do_sin_ret
13348     2D 00 64 FD | 	ret
1334c                 | 
1334c                 | ' 
1334c                 | ' sub do_cos
1334c                 | _do_cos
1334c     01 4A 05 F6 | 	mov	COUNT_, #1
13350     A8 00 A0 FD | 	call	#pushregs_
13354     10 F0 07 F1 | 	add	ptra, #16
13358     6A 00 00 FF 
1335c     64 E4 05 F1 | 	add	objptr, ##54372
13360     F2 1E 02 FB | 	rdlong	local01, objptr
13364     0F 17 02 F6 | 	mov	arg03, local01
13368     01 16 66 F0 | 	shl	arg03, #1
1336c     0F 17 02 F1 | 	add	arg03, local01
13370     02 16 66 F0 | 	shl	arg03, #2
13374     03 00 00 FF 
13378     04 E4 85 F1 | 	sub	objptr, ##1540
1337c     F2 16 02 F1 | 	add	arg03, objptr
13380     0B 17 02 FB | 	rdlong	arg03, arg03
13384     0C 4E 05 F1 | 	add	fp, #12
13388     A7 16 62 FC | 	wrlong	arg03, fp
1338c                 | ' 
1338c                 | ' numpar=compiledline(lineptr_e).result.uresult
1338c                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
1338c     0C 4E 85 F1 | 	sub	fp, #12
13390     02 16 16 F2 | 	cmp	arg03, #2 wc
13394     67 00 00 FF 
13398     60 E4 85 F1 | 	sub	objptr, ##52832
1339c     0C 4E 05 C1 |  if_b	add	fp, #12
133a0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
133a4     0C 4E 85 C1 |  if_b	sub	fp, #12
133a8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1530
133ac     00 12 06 F6 | 	mov	arg01, #0
133b0     BC ED B0 FD | 	call	#__system___getiolock_0474
133b4     FD 12 02 F6 | 	mov	arg01, result1
133b8     24 94 B0 FD | 	call	#__system___lockmem
133bc     62 01 00 FF 
133c0     12 14 06 F6 | 	mov	arg02, ##@LR__4956
133c4     00 12 06 F6 | 	mov	arg01, #0
133c8     00 16 06 F6 | 	mov	arg03, #0
133cc     14 A1 B0 FD | 	call	#__system___basic_print_string
133d0     00 12 06 F6 | 	mov	arg01, #0
133d4     98 ED B0 FD | 	call	#__system___getiolock_0474
133d8     FD 00 68 FC | 	wrlong	#0, result1
133dc     27 12 06 F6 | 	mov	arg01, #39
133e0     14 5C B0 FD | 	call	#_printerror
133e4     78 00 90 FD | 	jmp	#LR__1531
133e8                 | LR__1530
133e8     F4 6D BF FD | 	call	#_pop
133ec     A7 FA 61 FC | 	wrlong	result1, fp
133f0     04 4E 05 F1 | 	add	fp, #4
133f4     A7 FC 61 FC | 	wrlong	result2, fp
133f8     04 4E 05 F1 | 	add	fp, #4
133fc     A7 FE 61 FC | 	wrlong	result3, fp
13400     08 4E 85 F1 | 	sub	fp, #8
13404     7B 00 00 FF 
13408     6C E4 05 F1 | 	add	objptr, ##63084
1340c     F2 1E 02 FB | 	rdlong	local01, objptr
13410     7B 00 00 FF 
13414     6C E4 85 F1 | 	sub	objptr, ##63084
13418     A7 12 02 F6 | 	mov	arg01, fp
1341c     A8 FA BF FD | 	call	#_converttofloat
13420     FD 14 02 F6 | 	mov	arg02, result1
13424     0F 13 02 F6 | 	mov	arg01, local01
13428     30 BF B0 FD | 	call	#__system___float_mul
1342c     FD 14 02 F6 | 	mov	arg02, result1
13430     87 E4 1F FF 
13434     DB 13 06 F6 | 	mov	arg01, ##1070141403
13438     1F 14 E6 F4 | 	bitnot	arg02, #31
1343c     4C BB B0 FD | 	call	#__system___float_add
13440     FD 12 02 F6 | 	mov	arg01, result1
13444     50 C8 B0 FD | 	call	#__system____builtin_sinf
13448     A7 FA 61 FC | 	wrlong	result1, fp
1344c     08 4E 05 F1 | 	add	fp, #8
13450     A7 3C 68 FC | 	wrlong	#30, fp
13454     08 4E 85 F1 | 	sub	fp, #8
13458     A7 12 02 F6 | 	mov	arg01, fp
1345c     18 6E BF FD | 	call	#_push
13460                 | LR__1531
13460     A7 F0 03 F6 | 	mov	ptra, fp
13464     B2 00 A0 FD | 	call	#popregs_
13468                 | _do_cos_ret
13468     2D 00 64 FD | 	ret
1346c                 | 
1346c                 | ' 
1346c                 | ' sub do_tan
1346c                 | _do_tan
1346c     01 4A 05 F6 | 	mov	COUNT_, #1
13470     A8 00 A0 FD | 	call	#pushregs_
13474     10 F0 07 F1 | 	add	ptra, #16
13478     6A 00 00 FF 
1347c     64 E4 05 F1 | 	add	objptr, ##54372
13480     F2 1E 02 FB | 	rdlong	local01, objptr
13484     0F 17 02 F6 | 	mov	arg03, local01
13488     01 16 66 F0 | 	shl	arg03, #1
1348c     0F 17 02 F1 | 	add	arg03, local01
13490     02 16 66 F0 | 	shl	arg03, #2
13494     03 00 00 FF 
13498     04 E4 85 F1 | 	sub	objptr, ##1540
1349c     F2 16 02 F1 | 	add	arg03, objptr
134a0     0B 17 02 FB | 	rdlong	arg03, arg03
134a4     0C 4E 05 F1 | 	add	fp, #12
134a8     A7 16 62 FC | 	wrlong	arg03, fp
134ac                 | ' 
134ac                 | ' numpar=compiledline(lineptr_e).result.uresult
134ac                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
134ac     0C 4E 85 F1 | 	sub	fp, #12
134b0     02 16 16 F2 | 	cmp	arg03, #2 wc
134b4     67 00 00 FF 
134b8     60 E4 85 F1 | 	sub	objptr, ##52832
134bc     0C 4E 05 C1 |  if_b	add	fp, #12
134c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
134c4     0C 4E 85 C1 |  if_b	sub	fp, #12
134c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1540
134cc     00 12 06 F6 | 	mov	arg01, #0
134d0     9C EC B0 FD | 	call	#__system___getiolock_0474
134d4     FD 12 02 F6 | 	mov	arg01, result1
134d8     04 93 B0 FD | 	call	#__system___lockmem
134dc     62 01 00 FF 
134e0     18 14 06 F6 | 	mov	arg02, ##@LR__4957
134e4     00 12 06 F6 | 	mov	arg01, #0
134e8     00 16 06 F6 | 	mov	arg03, #0
134ec     F4 9F B0 FD | 	call	#__system___basic_print_string
134f0     00 12 06 F6 | 	mov	arg01, #0
134f4     78 EC B0 FD | 	call	#__system___getiolock_0474
134f8     FD 00 68 FC | 	wrlong	#0, result1
134fc     27 12 06 F6 | 	mov	arg01, #39
13500     F4 5A B0 FD | 	call	#_printerror
13504     64 00 90 FD | 	jmp	#LR__1541
13508                 | LR__1540
13508     D4 6C BF FD | 	call	#_pop
1350c     A7 FA 61 FC | 	wrlong	result1, fp
13510     04 4E 05 F1 | 	add	fp, #4
13514     A7 FC 61 FC | 	wrlong	result2, fp
13518     04 4E 05 F1 | 	add	fp, #4
1351c     A7 FE 61 FC | 	wrlong	result3, fp
13520     08 4E 85 F1 | 	sub	fp, #8
13524     7B 00 00 FF 
13528     6C E4 05 F1 | 	add	objptr, ##63084
1352c     F2 1E 02 FB | 	rdlong	local01, objptr
13530     7B 00 00 FF 
13534     6C E4 85 F1 | 	sub	objptr, ##63084
13538     A7 12 02 F6 | 	mov	arg01, fp
1353c     88 F9 BF FD | 	call	#_converttofloat
13540     FD 14 02 F6 | 	mov	arg02, result1
13544     0F 13 02 F6 | 	mov	arg01, local01
13548     10 BE B0 FD | 	call	#__system___float_mul
1354c     FD 12 02 F6 | 	mov	arg01, result1
13550     90 C8 B0 FD | 	call	#__system____builtin_tanf
13554     A7 FA 61 FC | 	wrlong	result1, fp
13558     08 4E 05 F1 | 	add	fp, #8
1355c     A7 3C 68 FC | 	wrlong	#30, fp
13560     08 4E 85 F1 | 	sub	fp, #8
13564     A7 12 02 F6 | 	mov	arg01, fp
13568     0C 6D BF FD | 	call	#_push
1356c                 | LR__1541
1356c     A7 F0 03 F6 | 	mov	ptra, fp
13570     B2 00 A0 FD | 	call	#popregs_
13574                 | _do_tan_ret
13574     2D 00 64 FD | 	ret
13578                 | 
13578                 | ' 
13578                 | ' sub do_asin
13578                 | _do_asin
13578     01 4A 05 F6 | 	mov	COUNT_, #1
1357c     A8 00 A0 FD | 	call	#pushregs_
13580     10 F0 07 F1 | 	add	ptra, #16
13584     6A 00 00 FF 
13588     64 E4 05 F1 | 	add	objptr, ##54372
1358c     F2 1E 02 FB | 	rdlong	local01, objptr
13590     0F 17 02 F6 | 	mov	arg03, local01
13594     01 16 66 F0 | 	shl	arg03, #1
13598     0F 17 02 F1 | 	add	arg03, local01
1359c     02 16 66 F0 | 	shl	arg03, #2
135a0     03 00 00 FF 
135a4     04 E4 85 F1 | 	sub	objptr, ##1540
135a8     F2 16 02 F1 | 	add	arg03, objptr
135ac     0B 17 02 FB | 	rdlong	arg03, arg03
135b0     0C 4E 05 F1 | 	add	fp, #12
135b4     A7 16 62 FC | 	wrlong	arg03, fp
135b8                 | ' 
135b8                 | ' numpar=compiledline(lineptr_e).result.uresult
135b8                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
135b8     0C 4E 85 F1 | 	sub	fp, #12
135bc     02 16 16 F2 | 	cmp	arg03, #2 wc
135c0     67 00 00 FF 
135c4     60 E4 85 F1 | 	sub	objptr, ##52832
135c8     0C 4E 05 C1 |  if_b	add	fp, #12
135cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
135d0     0C 4E 85 C1 |  if_b	sub	fp, #12
135d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1550
135d8     00 12 06 F6 | 	mov	arg01, #0
135dc     90 EB B0 FD | 	call	#__system___getiolock_0474
135e0     FD 12 02 F6 | 	mov	arg01, result1
135e4     F8 91 B0 FD | 	call	#__system___lockmem
135e8     62 01 00 FF 
135ec     1E 14 06 F6 | 	mov	arg02, ##@LR__4958
135f0     00 12 06 F6 | 	mov	arg01, #0
135f4     00 16 06 F6 | 	mov	arg03, #0
135f8     E8 9E B0 FD | 	call	#__system___basic_print_string
135fc     00 12 06 F6 | 	mov	arg01, #0
13600     6C EB B0 FD | 	call	#__system___getiolock_0474
13604     FD 00 68 FC | 	wrlong	#0, result1
13608     27 12 06 F6 | 	mov	arg01, #39
1360c     E8 59 B0 FD | 	call	#_printerror
13610     64 00 90 FD | 	jmp	#LR__1551
13614                 | LR__1550
13614     C8 6B BF FD | 	call	#_pop
13618     FF 1E 02 F6 | 	mov	local01, result3
1361c     A7 FA 61 FC | 	wrlong	result1, fp
13620     04 4E 05 F1 | 	add	fp, #4
13624     A7 FC 61 FC | 	wrlong	result2, fp
13628     04 4E 05 F1 | 	add	fp, #4
1362c     A7 1E 62 FC | 	wrlong	local01, fp
13630     08 4E 85 F1 | 	sub	fp, #8
13634     A7 12 02 F6 | 	mov	arg01, fp
13638     8C F8 BF FD | 	call	#_converttofloat
1363c     FD 12 02 F6 | 	mov	arg01, result1
13640     E8 C7 B0 FD | 	call	#__system____builtin_asinf
13644     FD 12 02 F6 | 	mov	arg01, result1
13648     7B 00 00 FF 
1364c     70 E4 05 F1 | 	add	objptr, ##63088
13650     F2 14 02 FB | 	rdlong	arg02, objptr
13654     7B 00 00 FF 
13658     70 E4 85 F1 | 	sub	objptr, ##63088
1365c     FC BC B0 FD | 	call	#__system___float_mul
13660     A7 FA 61 FC | 	wrlong	result1, fp
13664     08 4E 05 F1 | 	add	fp, #8
13668     A7 3C 68 FC | 	wrlong	#30, fp
1366c     08 4E 85 F1 | 	sub	fp, #8
13670     A7 12 02 F6 | 	mov	arg01, fp
13674     00 6C BF FD | 	call	#_push
13678                 | LR__1551
13678     A7 F0 03 F6 | 	mov	ptra, fp
1367c     B2 00 A0 FD | 	call	#popregs_
13680                 | _do_asin_ret
13680     2D 00 64 FD | 	ret
13684                 | 
13684                 | ' 
13684                 | ' sub do_acos
13684                 | _do_acos
13684     01 4A 05 F6 | 	mov	COUNT_, #1
13688     A8 00 A0 FD | 	call	#pushregs_
1368c     10 F0 07 F1 | 	add	ptra, #16
13690     6A 00 00 FF 
13694     64 E4 05 F1 | 	add	objptr, ##54372
13698     F2 1E 02 FB | 	rdlong	local01, objptr
1369c     0F 17 02 F6 | 	mov	arg03, local01
136a0     01 16 66 F0 | 	shl	arg03, #1
136a4     0F 17 02 F1 | 	add	arg03, local01
136a8     02 16 66 F0 | 	shl	arg03, #2
136ac     03 00 00 FF 
136b0     04 E4 85 F1 | 	sub	objptr, ##1540
136b4     F2 16 02 F1 | 	add	arg03, objptr
136b8     0B 17 02 FB | 	rdlong	arg03, arg03
136bc     0C 4E 05 F1 | 	add	fp, #12
136c0     A7 16 62 FC | 	wrlong	arg03, fp
136c4                 | ' 
136c4                 | ' numpar=compiledline(lineptr_e).result.uresult
136c4                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
136c4     0C 4E 85 F1 | 	sub	fp, #12
136c8     02 16 16 F2 | 	cmp	arg03, #2 wc
136cc     67 00 00 FF 
136d0     60 E4 85 F1 | 	sub	objptr, ##52832
136d4     0C 4E 05 C1 |  if_b	add	fp, #12
136d8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
136dc     0C 4E 85 C1 |  if_b	sub	fp, #12
136e0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
136e4     00 12 06 F6 | 	mov	arg01, #0
136e8     84 EA B0 FD | 	call	#__system___getiolock_0474
136ec     FD 12 02 F6 | 	mov	arg01, result1
136f0     EC 90 B0 FD | 	call	#__system___lockmem
136f4     62 01 00 FF 
136f8     25 14 06 F6 | 	mov	arg02, ##@LR__4959
136fc     00 12 06 F6 | 	mov	arg01, #0
13700     00 16 06 F6 | 	mov	arg03, #0
13704     DC 9D B0 FD | 	call	#__system___basic_print_string
13708     00 12 06 F6 | 	mov	arg01, #0
1370c     60 EA B0 FD | 	call	#__system___getiolock_0474
13710     FD 00 68 FC | 	wrlong	#0, result1
13714     27 12 06 F6 | 	mov	arg01, #39
13718     DC 58 B0 FD | 	call	#_printerror
1371c     64 00 90 FD | 	jmp	#LR__1561
13720                 | LR__1560
13720     BC 6A BF FD | 	call	#_pop
13724     FF 1E 02 F6 | 	mov	local01, result3
13728     A7 FA 61 FC | 	wrlong	result1, fp
1372c     04 4E 05 F1 | 	add	fp, #4
13730     A7 FC 61 FC | 	wrlong	result2, fp
13734     04 4E 05 F1 | 	add	fp, #4
13738     A7 1E 62 FC | 	wrlong	local01, fp
1373c     08 4E 85 F1 | 	sub	fp, #8
13740     A7 12 02 F6 | 	mov	arg01, fp
13744     80 F7 BF FD | 	call	#_converttofloat
13748     FD 12 02 F6 | 	mov	arg01, result1
1374c     28 C7 B0 FD | 	call	#__system____builtin_acosf
13750     FD 12 02 F6 | 	mov	arg01, result1
13754     7B 00 00 FF 
13758     70 E4 05 F1 | 	add	objptr, ##63088
1375c     F2 14 02 FB | 	rdlong	arg02, objptr
13760     7B 00 00 FF 
13764     70 E4 85 F1 | 	sub	objptr, ##63088
13768     F0 BB B0 FD | 	call	#__system___float_mul
1376c     A7 FA 61 FC | 	wrlong	result1, fp
13770     08 4E 05 F1 | 	add	fp, #8
13774     A7 3C 68 FC | 	wrlong	#30, fp
13778     08 4E 85 F1 | 	sub	fp, #8
1377c     A7 12 02 F6 | 	mov	arg01, fp
13780     F4 6A BF FD | 	call	#_push
13784                 | LR__1561
13784     A7 F0 03 F6 | 	mov	ptra, fp
13788     B2 00 A0 FD | 	call	#popregs_
1378c                 | _do_acos_ret
1378c     2D 00 64 FD | 	ret
13790                 | 
13790                 | ' 
13790                 | ' sub do_atn
13790                 | _do_atn
13790     01 4A 05 F6 | 	mov	COUNT_, #1
13794     A8 00 A0 FD | 	call	#pushregs_
13798     10 F0 07 F1 | 	add	ptra, #16
1379c     6A 00 00 FF 
137a0     64 E4 05 F1 | 	add	objptr, ##54372
137a4     F2 1E 02 FB | 	rdlong	local01, objptr
137a8     0F 17 02 F6 | 	mov	arg03, local01
137ac     01 16 66 F0 | 	shl	arg03, #1
137b0     0F 17 02 F1 | 	add	arg03, local01
137b4     02 16 66 F0 | 	shl	arg03, #2
137b8     03 00 00 FF 
137bc     04 E4 85 F1 | 	sub	objptr, ##1540
137c0     F2 16 02 F1 | 	add	arg03, objptr
137c4     0B 17 02 FB | 	rdlong	arg03, arg03
137c8     0C 4E 05 F1 | 	add	fp, #12
137cc     A7 16 62 FC | 	wrlong	arg03, fp
137d0                 | ' 
137d0                 | ' numpar=compiledline(lineptr_e).result.uresult
137d0                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
137d0     0C 4E 85 F1 | 	sub	fp, #12
137d4     02 16 16 F2 | 	cmp	arg03, #2 wc
137d8     67 00 00 FF 
137dc     60 E4 85 F1 | 	sub	objptr, ##52832
137e0     0C 4E 05 C1 |  if_b	add	fp, #12
137e4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
137e8     0C 4E 85 C1 |  if_b	sub	fp, #12
137ec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
137f0     00 12 06 F6 | 	mov	arg01, #0
137f4     78 E9 B0 FD | 	call	#__system___getiolock_0474
137f8     FD 12 02 F6 | 	mov	arg01, result1
137fc     E0 8F B0 FD | 	call	#__system___lockmem
13800     62 01 00 FF 
13804     2C 14 06 F6 | 	mov	arg02, ##@LR__4960
13808     00 12 06 F6 | 	mov	arg01, #0
1380c     00 16 06 F6 | 	mov	arg03, #0
13810     D0 9C B0 FD | 	call	#__system___basic_print_string
13814     00 12 06 F6 | 	mov	arg01, #0
13818     54 E9 B0 FD | 	call	#__system___getiolock_0474
1381c     FD 00 68 FC | 	wrlong	#0, result1
13820     27 12 06 F6 | 	mov	arg01, #39
13824     D0 57 B0 FD | 	call	#_printerror
13828     6C 00 90 FD | 	jmp	#LR__1571
1382c                 | LR__1570
1382c     B0 69 BF FD | 	call	#_pop
13830     FF 1E 02 F6 | 	mov	local01, result3
13834     A7 FA 61 FC | 	wrlong	result1, fp
13838     04 4E 05 F1 | 	add	fp, #4
1383c     A7 FC 61 FC | 	wrlong	result2, fp
13840     04 4E 05 F1 | 	add	fp, #4
13844     A7 1E 62 FC | 	wrlong	local01, fp
13848     08 4E 85 F1 | 	sub	fp, #8
1384c     A7 12 02 F6 | 	mov	arg01, fp
13850     74 F6 BF FD | 	call	#_converttofloat
13854     FD 12 02 F6 | 	mov	arg01, result1
13858     00 C0 1F FF 
1385c     00 14 06 F6 | 	mov	arg02, ##1065353216
13860     60 C6 B0 FD | 	call	#__system____builtin_atan2f
13864     FD 12 02 F6 | 	mov	arg01, result1
13868     7B 00 00 FF 
1386c     70 E4 05 F1 | 	add	objptr, ##63088
13870     F2 14 02 FB | 	rdlong	arg02, objptr
13874     7B 00 00 FF 
13878     70 E4 85 F1 | 	sub	objptr, ##63088
1387c     DC BA B0 FD | 	call	#__system___float_mul
13880     A7 FA 61 FC | 	wrlong	result1, fp
13884     08 4E 05 F1 | 	add	fp, #8
13888     A7 3C 68 FC | 	wrlong	#30, fp
1388c     08 4E 85 F1 | 	sub	fp, #8
13890     A7 12 02 F6 | 	mov	arg01, fp
13894     E0 69 BF FD | 	call	#_push
13898                 | LR__1571
13898     A7 F0 03 F6 | 	mov	ptra, fp
1389c     B2 00 A0 FD | 	call	#popregs_
138a0                 | _do_atn_ret
138a0     2D 00 64 FD | 	ret
138a4                 | 
138a4                 | ' 
138a4                 | ' sub do_sqr
138a4                 | _do_sqr
138a4     01 4A 05 F6 | 	mov	COUNT_, #1
138a8     A8 00 A0 FD | 	call	#pushregs_
138ac     10 F0 07 F1 | 	add	ptra, #16
138b0     6A 00 00 FF 
138b4     64 E4 05 F1 | 	add	objptr, ##54372
138b8     F2 1E 02 FB | 	rdlong	local01, objptr
138bc     0F 17 02 F6 | 	mov	arg03, local01
138c0     01 16 66 F0 | 	shl	arg03, #1
138c4     0F 17 02 F1 | 	add	arg03, local01
138c8     02 16 66 F0 | 	shl	arg03, #2
138cc     03 00 00 FF 
138d0     04 E4 85 F1 | 	sub	objptr, ##1540
138d4     F2 16 02 F1 | 	add	arg03, objptr
138d8     0B 17 02 FB | 	rdlong	arg03, arg03
138dc     0C 4E 05 F1 | 	add	fp, #12
138e0     A7 16 62 FC | 	wrlong	arg03, fp
138e4                 | ' 
138e4                 | ' numpar=compiledline(lineptr_e).result.uresult
138e4                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
138e4     0C 4E 85 F1 | 	sub	fp, #12
138e8     02 16 16 F2 | 	cmp	arg03, #2 wc
138ec     67 00 00 FF 
138f0     60 E4 85 F1 | 	sub	objptr, ##52832
138f4     0C 4E 05 C1 |  if_b	add	fp, #12
138f8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
138fc     0C 4E 85 C1 |  if_b	sub	fp, #12
13900     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1580
13904     00 12 06 F6 | 	mov	arg01, #0
13908     64 E8 B0 FD | 	call	#__system___getiolock_0474
1390c     FD 12 02 F6 | 	mov	arg01, result1
13910     CC 8E B0 FD | 	call	#__system___lockmem
13914     62 01 00 FF 
13918     32 14 06 F6 | 	mov	arg02, ##@LR__4961
1391c     00 12 06 F6 | 	mov	arg01, #0
13920     00 16 06 F6 | 	mov	arg03, #0
13924     BC 9B B0 FD | 	call	#__system___basic_print_string
13928     00 12 06 F6 | 	mov	arg01, #0
1392c     40 E8 B0 FD | 	call	#__system___getiolock_0474
13930     FD 00 68 FC | 	wrlong	#0, result1
13934     27 12 06 F6 | 	mov	arg01, #39
13938     BC 56 B0 FD | 	call	#_printerror
1393c     48 00 90 FD | 	jmp	#LR__1581
13940                 | LR__1580
13940     9C 68 BF FD | 	call	#_pop
13944     FF 1E 02 F6 | 	mov	local01, result3
13948     A7 FA 61 FC | 	wrlong	result1, fp
1394c     04 4E 05 F1 | 	add	fp, #4
13950     A7 FC 61 FC | 	wrlong	result2, fp
13954     04 4E 05 F1 | 	add	fp, #4
13958     A7 1E 62 FC | 	wrlong	local01, fp
1395c     08 4E 85 F1 | 	sub	fp, #8
13960     A7 12 02 F6 | 	mov	arg01, fp
13964     60 F5 BF FD | 	call	#_converttofloat
13968     FD 12 02 F6 | 	mov	arg01, result1
1396c     14 B9 B0 FD | 	call	#__system___float_sqrt
13970     A7 FA 61 FC | 	wrlong	result1, fp
13974     08 4E 05 F1 | 	add	fp, #8
13978     A7 3C 68 FC | 	wrlong	#30, fp
1397c     08 4E 85 F1 | 	sub	fp, #8
13980     A7 12 02 F6 | 	mov	arg01, fp
13984     F0 68 BF FD | 	call	#_push
13988                 | LR__1581
13988     A7 F0 03 F6 | 	mov	ptra, fp
1398c     B2 00 A0 FD | 	call	#popregs_
13990                 | _do_sqr_ret
13990     2D 00 64 FD | 	ret
13994                 | 
13994                 | ' 
13994                 | ' sub do_stick
13994                 | _do_stick
13994     01 4A 05 F6 | 	mov	COUNT_, #1
13998     A8 00 A0 FD | 	call	#pushregs_
1399c     10 F0 07 F1 | 	add	ptra, #16
139a0     6A 00 00 FF 
139a4     64 E4 05 F1 | 	add	objptr, ##54372
139a8     F2 1E 02 FB | 	rdlong	local01, objptr
139ac     0F 17 02 F6 | 	mov	arg03, local01
139b0     01 16 66 F0 | 	shl	arg03, #1
139b4     0F 17 02 F1 | 	add	arg03, local01
139b8     02 16 66 F0 | 	shl	arg03, #2
139bc     03 00 00 FF 
139c0     04 E4 85 F1 | 	sub	objptr, ##1540
139c4     F2 16 02 F1 | 	add	arg03, objptr
139c8     0B 17 02 FB | 	rdlong	arg03, arg03
139cc     0C 4E 05 F1 | 	add	fp, #12
139d0     A7 16 62 FC | 	wrlong	arg03, fp
139d4                 | ' 
139d4                 | ' numpar=compiledline(lineptr_e).result.uresult
139d4                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
139d4     0C 4E 85 F1 | 	sub	fp, #12
139d8     02 16 16 F2 | 	cmp	arg03, #2 wc
139dc     67 00 00 FF 
139e0     60 E4 85 F1 | 	sub	objptr, ##52832
139e4     3C 00 90 CD |  if_b	jmp	#LR__1590
139e8     00 12 06 F6 | 	mov	arg01, #0
139ec     80 E7 B0 FD | 	call	#__system___getiolock_0474
139f0     FD 12 02 F6 | 	mov	arg01, result1
139f4     E8 8D B0 FD | 	call	#__system___lockmem
139f8     62 01 00 FF 
139fc     38 14 06 F6 | 	mov	arg02, ##@LR__4962
13a00     00 12 06 F6 | 	mov	arg01, #0
13a04     00 16 06 F6 | 	mov	arg03, #0
13a08     D8 9A B0 FD | 	call	#__system___basic_print_string
13a0c     00 12 06 F6 | 	mov	arg01, #0
13a10     5C E7 B0 FD | 	call	#__system___getiolock_0474
13a14     FD 00 68 FC | 	wrlong	#0, result1
13a18     27 12 06 F6 | 	mov	arg01, #39
13a1c     D8 55 B0 FD | 	call	#_printerror
13a20     E8 00 90 FD | 	jmp	#LR__1594
13a24                 | LR__1590
13a24                 | ' 
13a24                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
13a24     0C 4E 05 F1 | 	add	fp, #12
13a28     A7 FE 09 FB | 	rdlong	result3, fp wz
13a2c     0C 4E 85 F1 | 	sub	fp, #12
13a30     30 00 90 5D |  if_ne	jmp	#LR__1591
13a34     7A 00 00 FF 
13a38     E0 E5 05 F1 | 	add	objptr, ##62944
13a3c     F2 1E 02 FB | 	rdlong	local01, objptr
13a40     7A 00 00 FF 
13a44     E0 E5 85 F1 | 	sub	objptr, ##62944
13a48     A7 1E 62 FC | 	wrlong	local01, fp
13a4c     08 4E 05 F1 | 	add	fp, #8
13a50     A7 3A 68 FC | 	wrlong	#29, fp
13a54     08 4E 85 F1 | 	sub	fp, #8
13a58     A7 12 02 F6 | 	mov	arg01, fp
13a5c     18 68 BF FD | 	call	#_push
13a60     A8 00 90 FD | 	jmp	#LR__1594
13a64                 | LR__1591
13a64     78 67 BF FD | 	call	#_pop
13a68     A7 FA 61 FC | 	wrlong	result1, fp
13a6c     04 4E 05 F1 | 	add	fp, #4
13a70     A7 FC 61 FC | 	wrlong	result2, fp
13a74     04 4E 05 F1 | 	add	fp, #4
13a78     A7 FE 61 FC | 	wrlong	result3, fp
13a7c                 | ' 
13a7c                 | ' t1=pop()
13a7c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
13a7c     08 4E 85 F1 | 	sub	fp, #8
13a80     1C FE 0D F2 | 	cmp	result3, #28 wz
13a84     08 4E 05 51 |  if_ne	add	fp, #8
13a88     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13a8c     08 4E 85 51 |  if_ne	sub	fp, #8
13a90     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13a94     6C 00 90 5D |  if_ne	jmp	#LR__1593
13a98     A7 1E 02 FB | 	rdlong	local01, fp
13a9c     7B 00 00 FF 
13aa0     CC E4 05 F1 | 	add	objptr, ##63180
13aa4     F2 1E 62 FC | 	wrlong	local01, objptr
13aa8                 | '   q=t1.result.uresult
13aa8                 | '   if q<7 then 
13aa8     7B 00 00 FF 
13aac     CC E4 85 F1 | 	sub	objptr, ##63180
13ab0     07 1E 56 F2 | 	cmps	local01, #7 wc
13ab4     40 00 90 3D |  if_ae	jmp	#LR__1592
13ab8     7B 00 00 FF 
13abc     CC E4 05 F1 | 	add	objptr, ##63180
13ac0     F2 1E 02 FB | 	rdlong	local01, objptr
13ac4     02 1E 66 F0 | 	shl	local01, #2
13ac8     EC E4 85 F1 | 	sub	objptr, #236
13acc     F2 1E 02 F1 | 	add	local01, objptr
13ad0     0F 1F 02 FB | 	rdlong	local01, local01
13ad4     A7 1E 62 FC | 	wrlong	local01, fp
13ad8     08 4E 05 F1 | 	add	fp, #8
13adc     A7 3A 68 FC | 	wrlong	#29, fp
13ae0     08 4E 85 F1 | 	sub	fp, #8
13ae4     A7 12 02 F6 | 	mov	arg01, fp
13ae8     7A 00 00 FF 
13aec     E0 E5 85 F1 | 	sub	objptr, ##62944
13af0     84 67 BF FD | 	call	#_push
13af4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
13af4     14 00 90 FD | 	jmp	#LR__1594
13af8                 | LR__1592
13af8     29 12 06 F6 | 	mov	arg01, #41
13afc     F8 54 B0 FD | 	call	#_printerror
13b00                 | '      printerror(41) : return
13b00     08 00 90 FD | 	jmp	#LR__1594
13b04                 | LR__1593
13b04     29 12 06 F6 | 	mov	arg01, #41
13b08     EC 54 B0 FD | 	call	#_printerror
13b0c                 | LR__1594
13b0c     A7 F0 03 F6 | 	mov	ptra, fp
13b10     B2 00 A0 FD | 	call	#popregs_
13b14                 | _do_stick_ret
13b14     2D 00 64 FD | 	ret
13b18                 | 
13b18                 | ' 
13b18                 | ' sub do_strig
13b18                 | _do_strig
13b18     01 4A 05 F6 | 	mov	COUNT_, #1
13b1c     A8 00 A0 FD | 	call	#pushregs_
13b20     10 F0 07 F1 | 	add	ptra, #16
13b24     6A 00 00 FF 
13b28     64 E4 05 F1 | 	add	objptr, ##54372
13b2c     F2 1E 02 FB | 	rdlong	local01, objptr
13b30     0F 17 02 F6 | 	mov	arg03, local01
13b34     01 16 66 F0 | 	shl	arg03, #1
13b38     0F 17 02 F1 | 	add	arg03, local01
13b3c     02 16 66 F0 | 	shl	arg03, #2
13b40     03 00 00 FF 
13b44     04 E4 85 F1 | 	sub	objptr, ##1540
13b48     F2 16 02 F1 | 	add	arg03, objptr
13b4c     0B 17 02 FB | 	rdlong	arg03, arg03
13b50     0C 4E 05 F1 | 	add	fp, #12
13b54     A7 16 62 FC | 	wrlong	arg03, fp
13b58                 | ' 
13b58                 | ' numpar=compiledline(lineptr_e).result.uresult
13b58                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
13b58     0C 4E 85 F1 | 	sub	fp, #12
13b5c     02 16 16 F2 | 	cmp	arg03, #2 wc
13b60     67 00 00 FF 
13b64     60 E4 85 F1 | 	sub	objptr, ##52832
13b68     3C 00 90 CD |  if_b	jmp	#LR__1600
13b6c     00 12 06 F6 | 	mov	arg01, #0
13b70     FC E5 B0 FD | 	call	#__system___getiolock_0474
13b74     FD 12 02 F6 | 	mov	arg01, result1
13b78     64 8C B0 FD | 	call	#__system___lockmem
13b7c     62 01 00 FF 
13b80     40 14 06 F6 | 	mov	arg02, ##@LR__4963
13b84     00 12 06 F6 | 	mov	arg01, #0
13b88     00 16 06 F6 | 	mov	arg03, #0
13b8c     54 99 B0 FD | 	call	#__system___basic_print_string
13b90     00 12 06 F6 | 	mov	arg01, #0
13b94     D8 E5 B0 FD | 	call	#__system___getiolock_0474
13b98     FD 00 68 FC | 	wrlong	#0, result1
13b9c     27 12 06 F6 | 	mov	arg01, #39
13ba0     54 54 B0 FD | 	call	#_printerror
13ba4     E8 00 90 FD | 	jmp	#LR__1604
13ba8                 | LR__1600
13ba8                 | ' 
13ba8                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
13ba8     0C 4E 05 F1 | 	add	fp, #12
13bac     A7 FE 09 FB | 	rdlong	result3, fp wz
13bb0     0C 4E 85 F1 | 	sub	fp, #12
13bb4     30 00 90 5D |  if_ne	jmp	#LR__1601
13bb8     7A 00 00 FF 
13bbc     FC E5 05 F1 | 	add	objptr, ##62972
13bc0     F2 1E 02 FB | 	rdlong	local01, objptr
13bc4     7A 00 00 FF 
13bc8     FC E5 85 F1 | 	sub	objptr, ##62972
13bcc     A7 1E 62 FC | 	wrlong	local01, fp
13bd0     08 4E 05 F1 | 	add	fp, #8
13bd4     A7 3A 68 FC | 	wrlong	#29, fp
13bd8     08 4E 85 F1 | 	sub	fp, #8
13bdc     A7 12 02 F6 | 	mov	arg01, fp
13be0     94 66 BF FD | 	call	#_push
13be4     A8 00 90 FD | 	jmp	#LR__1604
13be8                 | LR__1601
13be8     F4 65 BF FD | 	call	#_pop
13bec     A7 FA 61 FC | 	wrlong	result1, fp
13bf0     04 4E 05 F1 | 	add	fp, #4
13bf4     A7 FC 61 FC | 	wrlong	result2, fp
13bf8     04 4E 05 F1 | 	add	fp, #4
13bfc     A7 FE 61 FC | 	wrlong	result3, fp
13c00                 | ' 
13c00                 | ' t1=pop()
13c00                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
13c00     08 4E 85 F1 | 	sub	fp, #8
13c04     1C FE 0D F2 | 	cmp	result3, #28 wz
13c08     08 4E 05 51 |  if_ne	add	fp, #8
13c0c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13c10     08 4E 85 51 |  if_ne	sub	fp, #8
13c14     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13c18     6C 00 90 5D |  if_ne	jmp	#LR__1603
13c1c     A7 1E 02 FB | 	rdlong	local01, fp
13c20     7B 00 00 FF 
13c24     CC E4 05 F1 | 	add	objptr, ##63180
13c28     F2 1E 62 FC | 	wrlong	local01, objptr
13c2c                 | '   q=t1.result.uresult
13c2c                 | '   if q<7 then 
13c2c     7B 00 00 FF 
13c30     CC E4 85 F1 | 	sub	objptr, ##63180
13c34     07 1E 56 F2 | 	cmps	local01, #7 wc
13c38     40 00 90 3D |  if_ae	jmp	#LR__1602
13c3c     7B 00 00 FF 
13c40     CC E4 05 F1 | 	add	objptr, ##63180
13c44     F2 1E 02 FB | 	rdlong	local01, objptr
13c48     02 1E 66 F0 | 	shl	local01, #2
13c4c     D0 E4 85 F1 | 	sub	objptr, #208
13c50     F2 1E 02 F1 | 	add	local01, objptr
13c54     0F 1F 02 FB | 	rdlong	local01, local01
13c58     A7 1E 62 FC | 	wrlong	local01, fp
13c5c     08 4E 05 F1 | 	add	fp, #8
13c60     A7 3A 68 FC | 	wrlong	#29, fp
13c64     08 4E 85 F1 | 	sub	fp, #8
13c68     A7 12 02 F6 | 	mov	arg01, fp
13c6c     7A 00 00 FF 
13c70     FC E5 85 F1 | 	sub	objptr, ##62972
13c74     00 66 BF FD | 	call	#_push
13c78                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
13c78     14 00 90 FD | 	jmp	#LR__1604
13c7c                 | LR__1602
13c7c     29 12 06 F6 | 	mov	arg01, #41
13c80     74 53 B0 FD | 	call	#_printerror
13c84                 | '      printerror(41) : return
13c84     08 00 90 FD | 	jmp	#LR__1604
13c88                 | LR__1603
13c88     29 12 06 F6 | 	mov	arg01, #41
13c8c     68 53 B0 FD | 	call	#_printerror
13c90                 | LR__1604
13c90     A7 F0 03 F6 | 	mov	ptra, fp
13c94     B2 00 A0 FD | 	call	#popregs_
13c98                 | _do_strig_ret
13c98     2D 00 64 FD | 	ret
13c9c                 | 
13c9c                 | ' 
13c9c                 | ' sub do_getpixel
13c9c                 | _do_getpixel
13c9c     00 4A 05 F6 | 	mov	COUNT_, #0
13ca0     A8 00 A0 FD | 	call	#pushregs_
13ca4     24 F0 07 F1 | 	add	ptra, #36
13ca8     6A 00 00 FF 
13cac     64 E4 05 F1 | 	add	objptr, ##54372
13cb0     F2 16 02 FB | 	rdlong	arg03, objptr
13cb4     0B 15 02 F6 | 	mov	arg02, arg03
13cb8     01 14 66 F0 | 	shl	arg02, #1
13cbc     0B 15 02 F1 | 	add	arg02, arg03
13cc0     02 14 66 F0 | 	shl	arg02, #2
13cc4     03 00 00 FF 
13cc8     04 E4 85 F1 | 	sub	objptr, ##1540
13ccc     F2 14 02 F1 | 	add	arg02, objptr
13cd0     0A 17 02 FB | 	rdlong	arg03, arg02
13cd4     18 4E 05 F1 | 	add	fp, #24
13cd8     A7 16 62 FC | 	wrlong	arg03, fp
13cdc                 | ' 
13cdc                 | ' numpar=compiledline(lineptr_e).result.uresult
13cdc                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
13cdc     18 4E 85 F1 | 	sub	fp, #24
13ce0     02 16 0E F2 | 	cmp	arg03, #2 wz
13ce4     67 00 00 FF 
13ce8     60 E4 85 F1 | 	sub	objptr, ##52832
13cec     3C 00 90 AD |  if_e	jmp	#LR__1610
13cf0     00 12 06 F6 | 	mov	arg01, #0
13cf4     78 E4 B0 FD | 	call	#__system___getiolock_0474
13cf8     FD 12 02 F6 | 	mov	arg01, result1
13cfc     E0 8A B0 FD | 	call	#__system___lockmem
13d00     62 01 00 FF 
13d04     48 14 06 F6 | 	mov	arg02, ##@LR__4964
13d08     00 12 06 F6 | 	mov	arg01, #0
13d0c     00 16 06 F6 | 	mov	arg03, #0
13d10     D0 97 B0 FD | 	call	#__system___basic_print_string
13d14     00 12 06 F6 | 	mov	arg01, #0
13d18     54 E4 B0 FD | 	call	#__system___getiolock_0474
13d1c     FD 00 68 FC | 	wrlong	#0, result1
13d20     27 12 06 F6 | 	mov	arg01, #39
13d24     D0 52 B0 FD | 	call	#_printerror
13d28     B4 00 90 FD | 	jmp	#LR__1611
13d2c                 | LR__1610
13d2c     B0 64 BF FD | 	call	#_pop
13d30     FD 16 02 F6 | 	mov	arg03, result1
13d34     FE 14 02 F6 | 	mov	arg02, result2
13d38     FF 12 02 F6 | 	mov	arg01, result3
13d3c     0C 4E 05 F1 | 	add	fp, #12
13d40     A7 16 62 FC | 	wrlong	arg03, fp
13d44     04 4E 05 F1 | 	add	fp, #4
13d48     A7 14 62 FC | 	wrlong	arg02, fp
13d4c     04 4E 05 F1 | 	add	fp, #4
13d50     A7 12 62 FC | 	wrlong	arg01, fp
13d54     14 4E 85 F1 | 	sub	fp, #20
13d58     84 64 BF FD | 	call	#_pop
13d5c     FF 16 02 F6 | 	mov	arg03, result3
13d60     A7 FA 61 FC | 	wrlong	result1, fp
13d64     04 4E 05 F1 | 	add	fp, #4
13d68     A7 FC 61 FC | 	wrlong	result2, fp
13d6c     04 4E 05 F1 | 	add	fp, #4
13d70     A7 16 62 FC | 	wrlong	arg03, fp
13d74     08 4E 85 F1 | 	sub	fp, #8
13d78     A7 12 02 F6 | 	mov	arg01, fp
13d7c     9C F0 BF FD | 	call	#_converttoint
13d80     1C 4E 05 F1 | 	add	fp, #28
13d84     A7 FA 61 FC | 	wrlong	result1, fp
13d88     10 4E 85 F1 | 	sub	fp, #16
13d8c     A7 12 02 F6 | 	mov	arg01, fp
13d90     0C 4E 85 F1 | 	sub	fp, #12
13d94     84 F0 BF FD | 	call	#_converttoint
13d98     FD 16 02 F6 | 	mov	arg03, result1
13d9c     20 4E 05 F1 | 	add	fp, #32
13da0     A7 16 62 FC | 	wrlong	arg03, fp
13da4     F2 12 02 FB | 	rdlong	arg01, objptr
13da8     04 4E 85 F1 | 	sub	fp, #4
13dac     A7 FE 01 FB | 	rdlong	result3, fp
13db0     FF 12 02 F1 | 	add	arg01, result3
13db4     1C 4E 85 F1 | 	sub	fp, #28
13db8     0A 16 66 F0 | 	shl	arg03, #10
13dbc     0B 13 02 F1 | 	add	arg01, arg03
13dc0     70 54 B0 FD | 	call	#_pspeek
13dc4     FD FA E1 F8 | 	getbyte	result1, result1, #0
13dc8     A7 FA 61 FC | 	wrlong	result1, fp
13dcc     08 4E 05 F1 | 	add	fp, #8
13dd0     A7 3A 68 FC | 	wrlong	#29, fp
13dd4     08 4E 85 F1 | 	sub	fp, #8
13dd8     A7 12 02 F6 | 	mov	arg01, fp
13ddc     98 64 BF FD | 	call	#_push
13de0                 | LR__1611
13de0     A7 F0 03 F6 | 	mov	ptra, fp
13de4     B2 00 A0 FD | 	call	#popregs_
13de8                 | _do_getpixel_ret
13de8     2D 00 64 FD | 	ret
13dec                 | 
13dec                 | ' 
13dec                 | ' 
13dec                 | ' 
13dec                 | ' sub do_defsprite
13dec                 | _do_defsprite
13dec     07 4A 05 F6 | 	mov	COUNT_, #7
13df0     A8 00 A0 FD | 	call	#pushregs_
13df4     5C F0 07 F1 | 	add	ptra, #92
13df8     E4 63 BF FD | 	call	#_pop
13dfc     FD 16 02 F6 | 	mov	arg03, result1
13e00     FE 14 02 F6 | 	mov	arg02, result2
13e04     FF 12 02 F6 | 	mov	arg01, result3
13e08     30 4E 05 F1 | 	add	fp, #48
13e0c     A7 16 62 FC | 	wrlong	arg03, fp
13e10     04 4E 05 F1 | 	add	fp, #4
13e14     A7 14 62 FC | 	wrlong	arg02, fp
13e18     04 4E 05 F1 | 	add	fp, #4
13e1c     A7 12 62 FC | 	wrlong	arg01, fp
13e20     38 4E 85 F1 | 	sub	fp, #56
13e24     B8 63 BF FD | 	call	#_pop
13e28     FD 16 02 F6 | 	mov	arg03, result1
13e2c     FE 14 02 F6 | 	mov	arg02, result2
13e30     FF 12 02 F6 | 	mov	arg01, result3
13e34     24 4E 05 F1 | 	add	fp, #36
13e38     A7 16 62 FC | 	wrlong	arg03, fp
13e3c     04 4E 05 F1 | 	add	fp, #4
13e40     A7 14 62 FC | 	wrlong	arg02, fp
13e44     04 4E 05 F1 | 	add	fp, #4
13e48     A7 12 62 FC | 	wrlong	arg01, fp
13e4c     2C 4E 85 F1 | 	sub	fp, #44
13e50     8C 63 BF FD | 	call	#_pop
13e54     FD 16 02 F6 | 	mov	arg03, result1
13e58     FE 14 02 F6 | 	mov	arg02, result2
13e5c     FF 12 02 F6 | 	mov	arg01, result3
13e60     18 4E 05 F1 | 	add	fp, #24
13e64     A7 16 62 FC | 	wrlong	arg03, fp
13e68     04 4E 05 F1 | 	add	fp, #4
13e6c     A7 14 62 FC | 	wrlong	arg02, fp
13e70     04 4E 05 F1 | 	add	fp, #4
13e74     A7 12 62 FC | 	wrlong	arg01, fp
13e78     20 4E 85 F1 | 	sub	fp, #32
13e7c     60 63 BF FD | 	call	#_pop
13e80     FD 16 02 F6 | 	mov	arg03, result1
13e84     FE 14 02 F6 | 	mov	arg02, result2
13e88     FF 12 02 F6 | 	mov	arg01, result3
13e8c     0C 4E 05 F1 | 	add	fp, #12
13e90     A7 16 62 FC | 	wrlong	arg03, fp
13e94     04 4E 05 F1 | 	add	fp, #4
13e98     A7 14 62 FC | 	wrlong	arg02, fp
13e9c     04 4E 05 F1 | 	add	fp, #4
13ea0     A7 12 62 FC | 	wrlong	arg01, fp
13ea4     14 4E 85 F1 | 	sub	fp, #20
13ea8     34 63 BF FD | 	call	#_pop
13eac     FF 16 02 F6 | 	mov	arg03, result3
13eb0     A7 FA 61 FC | 	wrlong	result1, fp
13eb4     04 4E 05 F1 | 	add	fp, #4
13eb8     A7 FC 61 FC | 	wrlong	result2, fp
13ebc     04 4E 05 F1 | 	add	fp, #4
13ec0     A7 16 62 FC | 	wrlong	arg03, fp
13ec4     08 4E 85 F1 | 	sub	fp, #8
13ec8     A7 12 02 F6 | 	mov	arg01, fp
13ecc     4C EF BF FD | 	call	#_converttoint
13ed0     3C 4E 05 F1 | 	add	fp, #60
13ed4     A7 FA 61 FC | 	wrlong	result1, fp
13ed8     30 4E 85 F1 | 	sub	fp, #48
13edc     A7 12 02 F6 | 	mov	arg01, fp
13ee0     0C 4E 85 F1 | 	sub	fp, #12
13ee4     34 EF BF FD | 	call	#_converttoint
13ee8     40 4E 05 F1 | 	add	fp, #64
13eec     A7 FA 61 FC | 	wrlong	result1, fp
13ef0     28 4E 85 F1 | 	sub	fp, #40
13ef4     A7 12 02 F6 | 	mov	arg01, fp
13ef8     18 4E 85 F1 | 	sub	fp, #24
13efc     1C EF BF FD | 	call	#_converttoint
13f00     44 4E 05 F1 | 	add	fp, #68
13f04     A7 FA 61 FC | 	wrlong	result1, fp
13f08     20 4E 85 F1 | 	sub	fp, #32
13f0c     A7 12 02 F6 | 	mov	arg01, fp
13f10     24 4E 85 F1 | 	sub	fp, #36
13f14     04 EF BF FD | 	call	#_converttoint
13f18     48 4E 05 F1 | 	add	fp, #72
13f1c     A7 FA 61 FC | 	wrlong	result1, fp
13f20     18 4E 85 F1 | 	sub	fp, #24
13f24     A7 12 02 F6 | 	mov	arg01, fp
13f28     30 4E 85 F1 | 	sub	fp, #48
13f2c     EC EE BF FD | 	call	#_converttoint
13f30     4C 4E 05 F1 | 	add	fp, #76
13f34     A7 FA 61 FC | 	wrlong	result1, fp
13f38                 | ' 
13f38                 | ' t5=pop()
13f38                 | ' t4=pop()
13f38                 | ' t3=pop()
13f38                 | ' t2=pop()
13f38                 | ' t1=pop()
13f38                 | ' 
13f38                 | ' ' do convert, defsprite is not a racing command
13f38                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
13f38                 | '  
13f38                 | ' ' todo: check parameters for linits
13f38                 | ' if sprite(a1)<> nil then delete(sprite(a1))
13f38     10 4E 85 F1 | 	sub	fp, #16
13f3c     A7 16 02 FB | 	rdlong	arg03, fp
13f40     3C 4E 85 F1 | 	sub	fp, #60
13f44     02 16 66 F0 | 	shl	arg03, #2
13f48     7B 00 00 FF 
13f4c     18 E4 05 F1 | 	add	objptr, ##63000
13f50     F2 16 02 F1 | 	add	arg03, objptr
13f54     0B 17 0A FB | 	rdlong	arg03, arg03 wz
13f58     7B 00 00 FF 
13f5c     18 E4 85 F1 | 	sub	objptr, ##63000
13f60     2C 00 90 AD |  if_e	jmp	#LR__1620
13f64     3C 4E 05 F1 | 	add	fp, #60
13f68     A7 16 02 FB | 	rdlong	arg03, fp
13f6c     3C 4E 85 F1 | 	sub	fp, #60
13f70     02 16 66 F0 | 	shl	arg03, #2
13f74     7B 00 00 FF 
13f78     18 E4 05 F1 | 	add	objptr, ##63000
13f7c     F2 16 02 F1 | 	add	arg03, objptr
13f80     0B 13 02 FB | 	rdlong	arg01, arg03
13f84     7B 00 00 FF 
13f88     18 E4 85 F1 | 	sub	objptr, ##63000
13f8c     D4 C7 B0 FD | 	call	#__system___gc_free
13f90                 | LR__1620
13f90     3C 4E 05 F1 | 	add	fp, #60
13f94     A7 1E 02 FB | 	rdlong	local01, fp
13f98     0C 4E 05 F1 | 	add	fp, #12
13f9c     A7 16 02 FB | 	rdlong	arg03, fp
13fa0     04 4E 05 F1 | 	add	fp, #4
13fa4     A7 14 02 FB | 	rdlong	arg02, fp
13fa8     0A 17 02 FD | 	qmul	arg03, arg02
13fac     02 1E 66 F0 | 	shl	local01, #2
13fb0     7B 00 00 FF 
13fb4     18 E4 05 F1 | 	add	objptr, ##63000
13fb8     F2 1E 02 F1 | 	add	local01, objptr
13fbc     4C 4E 85 F1 | 	sub	fp, #76
13fc0     7B 00 00 FF 
13fc4     18 E4 85 F1 | 	sub	objptr, ##63000
13fc8     18 12 62 FD | 	getqx	arg01
13fcc     58 C6 B0 FD | 	call	#__system___gc_alloc_managed
13fd0     0F FB 61 FC | 	wrlong	result1, local01
13fd4                 | ' for y=a3 to a3+a5-1
13fd4     44 4E 05 F1 | 	add	fp, #68
13fd8     A7 20 02 FB | 	rdlong	local02, fp
13fdc     0C 4E 05 F1 | 	add	fp, #12
13fe0     A7 20 62 FC | 	wrlong	local02, fp
13fe4     0C 4E 85 F1 | 	sub	fp, #12
13fe8     A7 22 02 FB | 	rdlong	local03, fp
13fec     08 4E 05 F1 | 	add	fp, #8
13ff0     A7 24 02 FB | 	rdlong	local04, fp
13ff4     4C 4E 85 F1 | 	sub	fp, #76
13ff8     12 23 02 F1 | 	add	local03, local04
13ffc                 | LR__1621
13ffc     50 4E 05 F1 | 	add	fp, #80
14000     A7 20 02 FB | 	rdlong	local02, fp
14004     50 4E 85 F1 | 	sub	fp, #80
14008     11 21 52 F2 | 	cmps	local02, local03 wc
1400c     10 01 90 3D |  if_ae	jmp	#LR__1624
14010                 | '   for x=a2 to a4+a2-1
14010     40 4E 05 F1 | 	add	fp, #64
14014     A7 1E 02 FB | 	rdlong	local01, fp
14018     7B 00 00 FF 
1401c     A0 E4 05 F1 | 	add	objptr, ##63136
14020     F2 1E 62 FC | 	wrlong	local01, objptr
14024     7B 00 00 FF 
14028     A0 E4 85 F1 | 	sub	objptr, ##63136
1402c     08 4E 05 F1 | 	add	fp, #8
14030     A7 26 02 FB | 	rdlong	local05, fp
14034     08 4E 85 F1 | 	sub	fp, #8
14038     A7 28 02 FB | 	rdlong	local06, fp
1403c     40 4E 85 F1 | 	sub	fp, #64
14040     14 27 02 F1 | 	add	local05, local06
14044                 | LR__1622
14044     7B 00 00 FF 
14048     A0 E4 05 F1 | 	add	objptr, ##63136
1404c     F2 1E 02 FB | 	rdlong	local01, objptr
14050     7B 00 00 FF 
14054     A0 E4 85 F1 | 	sub	objptr, ##63136
14058     13 1F 52 F2 | 	cmps	local01, local05 wc
1405c     A8 00 90 3D |  if_ae	jmp	#LR__1623
14060     3C 4E 05 F1 | 	add	fp, #60
14064     A7 28 02 FB | 	rdlong	local06, fp
14068     04 4E 05 F1 | 	add	fp, #4
1406c     A7 24 02 FB | 	rdlong	local04, fp
14070     10 4E 05 F1 | 	add	fp, #16
14074     A7 20 02 FB | 	rdlong	local02, fp
14078     10 1F 02 F6 | 	mov	local01, local02
1407c     0C 4E 85 F1 | 	sub	fp, #12
14080     A7 16 02 FB | 	rdlong	arg03, fp
14084     0B 1F 82 F1 | 	sub	local01, arg03
14088     04 4E 05 F1 | 	add	fp, #4
1408c     A7 16 02 FB | 	rdlong	arg03, fp
14090     0B 1F 02 FD | 	qmul	local01, arg03
14094     02 28 66 F0 | 	shl	local06, #2
14098     7B 00 00 FF 
1409c     18 E4 05 F1 | 	add	objptr, ##63000
140a0     F2 28 02 F1 | 	add	local06, objptr
140a4     14 29 02 FB | 	rdlong	local06, local06
140a8     88 E4 05 F1 | 	add	objptr, #136
140ac     F2 1E 02 FB | 	rdlong	local01, objptr
140b0     7B 00 00 FF 
140b4     A0 E4 85 F1 | 	sub	objptr, ##63136
140b8     0F 2B 02 F6 | 	mov	local07, local01
140bc     12 2B 82 F1 | 	sub	local07, local04
140c0     F2 12 02 FB | 	rdlong	arg01, objptr
140c4     0F 13 02 F1 | 	add	arg01, local01
140c8     48 4E 85 F1 | 	sub	fp, #72
140cc     0A 20 66 F0 | 	shl	local02, #10
140d0     10 13 02 F1 | 	add	arg01, local02
140d4     18 24 62 FD | 	getqx	local04
140d8     12 2B 02 F1 | 	add	local07, local04
140dc     14 2B 02 F1 | 	add	local07, local06
140e0     50 51 B0 FD | 	call	#_pspeek
140e4     15 FB 41 FC | 	wrbyte	result1, local07
140e8     7B 00 00 FF 
140ec     A0 E4 05 F1 | 	add	objptr, ##63136
140f0     F2 2A 02 FB | 	rdlong	local07, objptr
140f4     01 2A 06 F1 | 	add	local07, #1
140f8     F2 2A 62 FC | 	wrlong	local07, objptr
140fc     7B 00 00 FF 
14100     A0 E4 85 F1 | 	sub	objptr, ##63136
14104     3C FF 9F FD | 	jmp	#LR__1622
14108                 | LR__1623
14108     50 4E 05 F1 | 	add	fp, #80
1410c     A7 2A 02 FB | 	rdlong	local07, fp
14110     01 2A 06 F1 | 	add	local07, #1
14114     A7 2A 62 FC | 	wrlong	local07, fp
14118     50 4E 85 F1 | 	sub	fp, #80
1411c     DC FE 9F FD | 	jmp	#LR__1621
14120                 | LR__1624
14120     3C 4E 05 F1 | 	add	fp, #60
14124     A7 2A 02 FB | 	rdlong	local07, fp
14128     15 13 02 F6 | 	mov	arg01, local07
1412c     3C 4E 85 F1 | 	sub	fp, #60
14130     02 2A 66 F0 | 	shl	local07, #2
14134     7B 00 00 FF 
14138     18 E4 05 F1 | 	add	objptr, ##63000
1413c     F2 2A 02 F1 | 	add	local07, objptr
14140     15 15 02 FB | 	rdlong	arg02, local07
14144     7B 00 00 FF 
14148     18 E4 85 F1 | 	sub	objptr, ##63000
1414c     24 65 B0 FD | 	call	#_hg010b_spin2_setspriteptr
14150     3C 4E 05 F1 | 	add	fp, #60
14154     A7 12 02 FB | 	rdlong	arg01, fp
14158     0C 4E 05 F1 | 	add	fp, #12
1415c     A7 14 02 FB | 	rdlong	arg02, fp
14160     04 4E 05 F1 | 	add	fp, #4
14164     A7 16 02 FB | 	rdlong	arg03, fp
14168     4C 4E 85 F1 | 	sub	fp, #76
1416c     94 65 B0 FD | 	call	#_hg010b_spin2_setspritesize
14170     A7 F0 03 F6 | 	mov	ptra, fp
14174     B2 00 A0 FD | 	call	#popregs_
14178                 | _do_defsprite_ret
14178     2D 00 64 FD | 	ret
1417c                 | 
1417c                 | ' 
1417c                 | ' sub do_sprite
1417c                 | _do_sprite
1417c     00 4A 05 F6 | 	mov	COUNT_, #0
14180     A8 00 A0 FD | 	call	#pushregs_
14184     30 F0 07 F1 | 	add	ptra, #48
14188     54 60 BF FD | 	call	#_pop
1418c     FD 16 02 F6 | 	mov	arg03, result1
14190     FE 14 02 F6 | 	mov	arg02, result2
14194     FF 12 02 F6 | 	mov	arg01, result3
14198     18 4E 05 F1 | 	add	fp, #24
1419c     A7 16 62 FC | 	wrlong	arg03, fp
141a0     04 4E 05 F1 | 	add	fp, #4
141a4     A7 14 62 FC | 	wrlong	arg02, fp
141a8     04 4E 05 F1 | 	add	fp, #4
141ac     A7 12 62 FC | 	wrlong	arg01, fp
141b0     20 4E 85 F1 | 	sub	fp, #32
141b4     28 60 BF FD | 	call	#_pop
141b8     FD 16 02 F6 | 	mov	arg03, result1
141bc     FE 14 02 F6 | 	mov	arg02, result2
141c0     FF 12 02 F6 | 	mov	arg01, result3
141c4     0C 4E 05 F1 | 	add	fp, #12
141c8     A7 16 62 FC | 	wrlong	arg03, fp
141cc     04 4E 05 F1 | 	add	fp, #4
141d0     A7 14 62 FC | 	wrlong	arg02, fp
141d4     04 4E 05 F1 | 	add	fp, #4
141d8     A7 12 62 FC | 	wrlong	arg01, fp
141dc     14 4E 85 F1 | 	sub	fp, #20
141e0     FC 5F BF FD | 	call	#_pop
141e4     FF 16 02 F6 | 	mov	arg03, result3
141e8     A7 FA 61 FC | 	wrlong	result1, fp
141ec     04 4E 05 F1 | 	add	fp, #4
141f0     A7 FC 61 FC | 	wrlong	result2, fp
141f4     04 4E 05 F1 | 	add	fp, #4
141f8     A7 16 62 FC | 	wrlong	arg03, fp
141fc     08 4E 85 F1 | 	sub	fp, #8
14200     A7 12 02 F6 | 	mov	arg01, fp
14204     14 EC BF FD | 	call	#_converttoint
14208     24 4E 05 F1 | 	add	fp, #36
1420c     A7 FA 61 FC | 	wrlong	result1, fp
14210     18 4E 85 F1 | 	sub	fp, #24
14214     A7 12 02 F6 | 	mov	arg01, fp
14218     0C 4E 85 F1 | 	sub	fp, #12
1421c     FC EB BF FD | 	call	#_converttoint
14220     28 4E 05 F1 | 	add	fp, #40
14224     A7 FA 61 FC | 	wrlong	result1, fp
14228     10 4E 85 F1 | 	sub	fp, #16
1422c     A7 12 02 F6 | 	mov	arg01, fp
14230     18 4E 85 F1 | 	sub	fp, #24
14234     E4 EB BF FD | 	call	#_converttoint
14238     2C 4E 05 F1 | 	add	fp, #44
1423c     A7 FA 61 FC | 	wrlong	result1, fp
14240     08 4E 85 F1 | 	sub	fp, #8
14244     A7 12 02 FB | 	rdlong	arg01, fp
14248     04 4E 05 F1 | 	add	fp, #4
1424c     A7 14 02 FB | 	rdlong	arg02, fp
14250     FD 16 02 F6 | 	mov	arg03, result1
14254     28 4E 85 F1 | 	sub	fp, #40
14258     40 64 B0 FD | 	call	#_hg010b_spin2_setspritepos
1425c     A7 F0 03 F6 | 	mov	ptra, fp
14260     B2 00 A0 FD | 	call	#popregs_
14264                 | _do_sprite_ret
14264     2D 00 64 FD | 	ret
14268                 | 
14268                 | ' 
14268                 | ' sub do_mousex
14268                 | _do_mousex
14268     00 4A 05 F6 | 	mov	COUNT_, #0
1426c     A8 00 A0 FD | 	call	#pushregs_
14270     0C F0 07 F1 | 	add	ptra, #12
14274     08 4E 05 F1 | 	add	fp, #8
14278     A7 3A 68 FC | 	wrlong	#29, fp
1427c     08 4E 85 F1 | 	sub	fp, #8
14280     7A 00 00 FF 
14284     D0 E5 05 F1 | 	add	objptr, ##62928
14288     F2 12 02 FB | 	rdlong	arg01, objptr
1428c     7A 00 00 FF 
14290     D0 E5 85 F1 | 	sub	objptr, ##62928
14294     A7 12 62 FC | 	wrlong	arg01, fp
14298     A7 12 02 F6 | 	mov	arg01, fp
1429c     D8 5F BF FD | 	call	#_push
142a0     A7 F0 03 F6 | 	mov	ptra, fp
142a4     B2 00 A0 FD | 	call	#popregs_
142a8                 | _do_mousex_ret
142a8     2D 00 64 FD | 	ret
142ac                 | 
142ac                 | ' 
142ac                 | ' sub do_mousey
142ac                 | _do_mousey
142ac     00 4A 05 F6 | 	mov	COUNT_, #0
142b0     A8 00 A0 FD | 	call	#pushregs_
142b4     0C F0 07 F1 | 	add	ptra, #12
142b8     08 4E 05 F1 | 	add	fp, #8
142bc     A7 3A 68 FC | 	wrlong	#29, fp
142c0     08 4E 85 F1 | 	sub	fp, #8
142c4     7A 00 00 FF 
142c8     D4 E5 05 F1 | 	add	objptr, ##62932
142cc     F2 12 02 FB | 	rdlong	arg01, objptr
142d0     7A 00 00 FF 
142d4     D4 E5 85 F1 | 	sub	objptr, ##62932
142d8     A7 12 62 FC | 	wrlong	arg01, fp
142dc     A7 12 02 F6 | 	mov	arg01, fp
142e0     94 5F BF FD | 	call	#_push
142e4     A7 F0 03 F6 | 	mov	ptra, fp
142e8     B2 00 A0 FD | 	call	#popregs_
142ec                 | _do_mousey_ret
142ec     2D 00 64 FD | 	ret
142f0                 | 
142f0                 | ' 
142f0                 | ' sub do_mousew
142f0                 | _do_mousew
142f0     00 4A 05 F6 | 	mov	COUNT_, #0
142f4     A8 00 A0 FD | 	call	#pushregs_
142f8     0C F0 07 F1 | 	add	ptra, #12
142fc     08 4E 05 F1 | 	add	fp, #8
14300     A7 38 68 FC | 	wrlong	#28, fp
14304     08 4E 85 F1 | 	sub	fp, #8
14308     7A 00 00 FF 
1430c     DC E5 05 F1 | 	add	objptr, ##62940
14310     F2 12 02 FB | 	rdlong	arg01, objptr
14314     7A 00 00 FF 
14318     DC E5 85 F1 | 	sub	objptr, ##62940
1431c     A7 12 62 FC | 	wrlong	arg01, fp
14320     A7 12 02 F6 | 	mov	arg01, fp
14324     50 5F BF FD | 	call	#_push
14328     A7 F0 03 F6 | 	mov	ptra, fp
1432c     B2 00 A0 FD | 	call	#popregs_
14330                 | _do_mousew_ret
14330     2D 00 64 FD | 	ret
14334                 | 
14334                 | ' 
14334                 | ' sub do_mousek
14334                 | _do_mousek
14334     00 4A 05 F6 | 	mov	COUNT_, #0
14338     A8 00 A0 FD | 	call	#pushregs_
1433c     0C F0 07 F1 | 	add	ptra, #12
14340     08 4E 05 F1 | 	add	fp, #8
14344     A7 3A 68 FC | 	wrlong	#29, fp
14348     08 4E 85 F1 | 	sub	fp, #8
1434c     7A 00 00 FF 
14350     D8 E5 05 F1 | 	add	objptr, ##62936
14354     F2 12 02 FB | 	rdlong	arg01, objptr
14358     7A 00 00 FF 
1435c     D8 E5 85 F1 | 	sub	objptr, ##62936
14360     A7 12 62 FC | 	wrlong	arg01, fp
14364     A7 12 02 F6 | 	mov	arg01, fp
14368     0C 5F BF FD | 	call	#_push
1436c     A7 F0 03 F6 | 	mov	ptra, fp
14370     B2 00 A0 FD | 	call	#popregs_
14374                 | _do_mousek_ret
14374     2D 00 64 FD | 	ret
14378                 | 
14378                 | ' 
14378                 | ' 
14378                 | ' sub do_rdpin
14378                 | _do_rdpin
14378     00 4A 05 F6 | 	mov	COUNT_, #0
1437c     A8 00 A0 FD | 	call	#pushregs_
14380     0C F0 07 F1 | 	add	ptra, #12
14384     58 5E BF FD | 	call	#_pop
14388     A7 FA 61 FC | 	wrlong	result1, fp
1438c     04 4E 05 F1 | 	add	fp, #4
14390     A7 FC 61 FC | 	wrlong	result2, fp
14394     04 4E 05 F1 | 	add	fp, #4
14398     A7 FE 61 FC | 	wrlong	result3, fp
1439c     08 4E 85 F1 | 	sub	fp, #8
143a0     A7 12 02 F6 | 	mov	arg01, fp
143a4     74 EA BF FD | 	call	#_converttoint
143a8     FD FA 89 FA | 	rdpin	result1, result1
143ac     7B 00 00 FF 
143b0     F8 E4 05 F1 | 	add	objptr, ##63224
143b4     F2 FA 61 FC | 	wrlong	result1, objptr
143b8     7B 00 00 FF 
143bc     F8 E4 85 F1 | 	sub	objptr, ##63224
143c0     08 4E 05 F1 | 	add	fp, #8
143c4     A7 3A 68 FC | 	wrlong	#29, fp
143c8     08 4E 85 F1 | 	sub	fp, #8
143cc     A7 08 68 FC | 	wrlong	#4, fp
143d0     A7 12 02 F6 | 	mov	arg01, fp
143d4     A0 5E BF FD | 	call	#_push
143d8     A7 F0 03 F6 | 	mov	ptra, fp
143dc     B2 00 A0 FD | 	call	#popregs_
143e0                 | _do_rdpin_ret
143e0     2D 00 64 FD | 	ret
143e4                 | 
143e4                 | ' 
143e4                 | ' sub do_rqpin
143e4                 | _do_rqpin
143e4     00 4A 05 F6 | 	mov	COUNT_, #0
143e8     A8 00 A0 FD | 	call	#pushregs_
143ec     0C F0 07 F1 | 	add	ptra, #12
143f0     EC 5D BF FD | 	call	#_pop
143f4     A7 FA 61 FC | 	wrlong	result1, fp
143f8     04 4E 05 F1 | 	add	fp, #4
143fc     A7 FC 61 FC | 	wrlong	result2, fp
14400     04 4E 05 F1 | 	add	fp, #4
14404     A7 FE 61 FC | 	wrlong	result3, fp
14408     08 4E 85 F1 | 	sub	fp, #8
1440c     A7 12 02 F6 | 	mov	arg01, fp
14410     08 EA BF FD | 	call	#_converttoint
14414     FD 12 02 F6 | 	mov	arg01, result1
14418     00 FA 05 F6 | 	mov	result1, #0
1441c     09 FB 81 FA | 	rqpin	result1, arg01
14420     7B 00 00 FF 
14424     F8 E4 05 F1 | 	add	objptr, ##63224
14428     F2 FA 61 FC | 	wrlong	result1, objptr
1442c     7B 00 00 FF 
14430     F8 E4 85 F1 | 	sub	objptr, ##63224
14434     08 4E 05 F1 | 	add	fp, #8
14438     A7 3A 68 FC | 	wrlong	#29, fp
1443c     08 4E 85 F1 | 	sub	fp, #8
14440     A7 08 68 FC | 	wrlong	#4, fp
14444     A7 12 02 F6 | 	mov	arg01, fp
14448     2C 5E BF FD | 	call	#_push
1444c     A7 F0 03 F6 | 	mov	ptra, fp
14450     B2 00 A0 FD | 	call	#popregs_
14454                 | _do_rqpin_ret
14454     2D 00 64 FD | 	ret
14458                 | 
14458                 | ' 
14458                 | ' sub do_pinread
14458                 | _do_pinread
14458     00 4A 05 F6 | 	mov	COUNT_, #0
1445c     A8 00 A0 FD | 	call	#pushregs_
14460     0C F0 07 F1 | 	add	ptra, #12
14464     78 5D BF FD | 	call	#_pop
14468     A7 FA 61 FC | 	wrlong	result1, fp
1446c     04 4E 05 F1 | 	add	fp, #4
14470     A7 FC 61 FC | 	wrlong	result2, fp
14474     04 4E 05 F1 | 	add	fp, #4
14478     A7 FE 61 FC | 	wrlong	result3, fp
1447c     08 4E 85 F1 | 	sub	fp, #8
14480     A7 12 02 F6 | 	mov	arg01, fp
14484     94 E9 BF FD | 	call	#_converttoint
14488     FD 12 02 F6 | 	mov	arg01, result1
1448c     20 12 CE F7 | 	test	arg01, #32 wz
14490     FF FB 01 56 |  if_ne	mov	result1, inb
14494     FE FB 01 A6 |  if_e	mov	result1, ina
14498     09 FB 41 F0 | 	shr	result1, arg01
1449c     06 12 46 F0 | 	shr	arg01, #6
144a0     09 FB 41 F7 | 	zerox	result1, arg01
144a4     7B 00 00 FF 
144a8     F8 E4 05 F1 | 	add	objptr, ##63224
144ac     F2 FA 61 FC | 	wrlong	result1, objptr
144b0     7B 00 00 FF 
144b4     F8 E4 85 F1 | 	sub	objptr, ##63224
144b8     08 4E 05 F1 | 	add	fp, #8
144bc     A7 3A 68 FC | 	wrlong	#29, fp
144c0     08 4E 85 F1 | 	sub	fp, #8
144c4     A7 08 68 FC | 	wrlong	#4, fp
144c8     A7 12 02 F6 | 	mov	arg01, fp
144cc     A8 5D BF FD | 	call	#_push
144d0     A7 F0 03 F6 | 	mov	ptra, fp
144d4     B2 00 A0 FD | 	call	#popregs_
144d8                 | _do_pinread_ret
144d8     2D 00 64 FD | 	ret
144dc                 | 
144dc                 | ' 
144dc                 | ' sub do_gettime
144dc                 | _do_gettime
144dc     02 4A 05 F6 | 	mov	COUNT_, #2
144e0     A8 00 A0 FD | 	call	#pushregs_
144e4     14 F0 07 F1 | 	add	ptra, #20
144e8                 | ' 
144e8                 | ' const asm 
144e8     1A 1E 72 FD | 	getct	local01 wc
144ec     1A 20 62 FD | 	getct	local02
144f0                 | ' 
144f0                 | ' return hi1, lo1
144f0     10 FD 01 F6 | 	mov	result2, local02
144f4     A7 1E 62 FC | 	wrlong	local01, fp
144f8     04 4E 05 F1 | 	add	fp, #4
144fc     A7 FC 61 FC | 	wrlong	result2, fp
14500     0C 4E 05 F1 | 	add	fp, #12
14504     A7 3A 68 FC | 	wrlong	#29, fp
14508     0C 4E 85 F1 | 	sub	fp, #12
1450c     A7 12 02 FB | 	rdlong	arg01, fp
14510     04 4E 05 F1 | 	add	fp, #4
14514     A7 12 62 FC | 	wrlong	arg01, fp
14518     08 4E 85 F1 | 	sub	fp, #8
1451c     A7 12 02 FB | 	rdlong	arg01, fp
14520     0C 4E 05 F1 | 	add	fp, #12
14524     A7 12 62 FC | 	wrlong	arg01, fp
14528     04 4E 85 F1 | 	sub	fp, #4
1452c     A7 12 02 F6 | 	mov	arg01, fp
14530     08 4E 85 F1 | 	sub	fp, #8
14534     40 5D BF FD | 	call	#_push
14538     A7 F0 03 F6 | 	mov	ptra, fp
1453c     B2 00 A0 FD | 	call	#popregs_
14540                 | _do_gettime_ret
14540     2D 00 64 FD | 	ret
14544                 | 
14544                 | '    
14544                 | ' 
14544                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
14544                 | ' 
14544                 | ' '' ----------------------------- Clear the screen
14544                 | ' 
14544                 | ' sub do_cls
14544                 | _do_cls
14544     57 00 00 FF 
14548     20 E4 05 F1 | 	add	objptr, ##44576
1454c     F2 12 02 FB | 	rdlong	arg01, objptr
14550     04 E4 85 F1 | 	sub	objptr, #4
14554     F2 14 02 FB | 	rdlong	arg02, objptr
14558     57 00 00 FF 
1455c     1C E4 85 F1 | 	sub	objptr, ##44572
14560     84 6E B0 FD | 	call	#_hg010b_spin2_cls
14564     57 00 00 FF 
14568     20 E4 05 F1 | 	add	objptr, ##44576
1456c     F2 14 02 FB | 	rdlong	arg02, objptr
14570     14 E4 85 F1 | 	sub	objptr, #20
14574     F2 14 62 FC | 	wrlong	arg02, objptr
14578     57 00 00 FF 
1457c     0C E4 85 F1 | 	sub	objptr, ##44556
14580                 | ' cls(ink,paper): plot_color=ink: print
14580     00 12 06 F6 | 	mov	arg01, #0
14584     E8 DB B0 FD | 	call	#__system___getiolock_0474
14588     FD 12 02 F6 | 	mov	arg01, result1
1458c     50 82 B0 FD | 	call	#__system___lockmem
14590     00 12 06 F6 | 	mov	arg01, #0
14594     0A 14 06 F6 | 	mov	arg02, #10
14598     00 16 06 F6 | 	mov	arg03, #0
1459c     EC 8E B0 FD | 	call	#__system___basic_print_char
145a0     00 12 06 F6 | 	mov	arg01, #0
145a4     C8 DB B0 FD | 	call	#__system___getiolock_0474
145a8     FD 00 68 FC | 	wrlong	#0, result1
145ac                 | _do_cls_ret
145ac     2D 00 64 FD | 	ret
145b0                 | 
145b0                 | ' 
145b0                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
145b0                 | ' 
145b0                 | ' sub do_color
145b0                 | _do_color
145b0     03 4A 05 F6 | 	mov	COUNT_, #3
145b4     A8 00 A0 FD | 	call	#pushregs_
145b8     24 5C BF FD | 	call	#_pop
145bc     FD 1E 02 F6 | 	mov	local01, result1
145c0     FE 20 02 F6 | 	mov	local02, result2
145c4     FF 22 02 F6 | 	mov	local03, result3
145c8     57 00 00 FF 
145cc     0C E4 05 F1 | 	add	objptr, ##44556
145d0     F2 1E 62 FC | 	wrlong	local01, objptr
145d4     57 00 00 FF 
145d8     0C E4 85 F1 | 	sub	objptr, ##44556
145dc     A7 F0 03 F6 | 	mov	ptra, fp
145e0     B2 00 A0 FD | 	call	#popregs_
145e4                 | _do_color_ret
145e4     2D 00 64 FD | 	ret
145e8                 | 
145e8                 | ' 
145e8                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
145e8                 | ' 
145e8                 | ' sub do_plot
145e8                 | _do_plot
145e8     00 4A 05 F6 | 	mov	COUNT_, #0
145ec     A8 00 A0 FD | 	call	#pushregs_
145f0     20 F0 07 F1 | 	add	ptra, #32
145f4     E8 5B BF FD | 	call	#_pop
145f8     FD 16 02 F6 | 	mov	arg03, result1
145fc     FE 14 02 F6 | 	mov	arg02, result2
14600     FF 12 02 F6 | 	mov	arg01, result3
14604     0C 4E 05 F1 | 	add	fp, #12
14608     A7 16 62 FC | 	wrlong	arg03, fp
1460c     04 4E 05 F1 | 	add	fp, #4
14610     A7 14 62 FC | 	wrlong	arg02, fp
14614     04 4E 05 F1 | 	add	fp, #4
14618     A7 12 62 FC | 	wrlong	arg01, fp
1461c     14 4E 85 F1 | 	sub	fp, #20
14620     BC 5B BF FD | 	call	#_pop
14624     FF 16 02 F6 | 	mov	arg03, result3
14628     A7 FA 61 FC | 	wrlong	result1, fp
1462c     04 4E 05 F1 | 	add	fp, #4
14630     A7 FC 61 FC | 	wrlong	result2, fp
14634     04 4E 05 F1 | 	add	fp, #4
14638     A7 16 62 FC | 	wrlong	arg03, fp
1463c     08 4E 85 F1 | 	sub	fp, #8
14640     A7 12 02 F6 | 	mov	arg01, fp
14644     D4 E7 BF FD | 	call	#_converttoint
14648     18 4E 05 F1 | 	add	fp, #24
1464c     A7 FA 61 FC | 	wrlong	result1, fp
14650     0C 4E 85 F1 | 	sub	fp, #12
14654     A7 12 02 F6 | 	mov	arg01, fp
14658     0C 4E 85 F1 | 	sub	fp, #12
1465c     BC E7 BF FD | 	call	#_converttoint
14660     1C 4E 05 F1 | 	add	fp, #28
14664     A7 FA 61 FC | 	wrlong	result1, fp
14668     04 4E 85 F1 | 	sub	fp, #4
1466c     A7 16 02 FB | 	rdlong	arg03, fp
14670     57 00 00 FF 
14674     10 E4 05 F1 | 	add	objptr, ##44560
14678     F2 16 62 FC | 	wrlong	arg03, objptr
1467c     04 4E 05 F1 | 	add	fp, #4
14680     A7 14 02 FB | 	rdlong	arg02, fp
14684     1C 4E 85 F1 | 	sub	fp, #28
14688     04 E4 05 F1 | 	add	objptr, #4
1468c     F2 14 62 FC | 	wrlong	arg02, objptr
14690     04 E4 85 F1 | 	sub	objptr, #4
14694     F2 12 02 FB | 	rdlong	arg01, objptr
14698     04 E4 85 F1 | 	sub	objptr, #4
1469c     F2 16 02 FB | 	rdlong	arg03, objptr
146a0     57 00 00 FF 
146a4     0C E4 85 F1 | 	sub	objptr, ##44556
146a8     A4 60 B0 FD | 	call	#_hg010b_spin2_putpixel
146ac     A7 F0 03 F6 | 	mov	ptra, fp
146b0     B2 00 A0 FD | 	call	#popregs_
146b4                 | _do_plot_ret
146b4     2D 00 64 FD | 	ret
146b8                 | 
146b8                 | ' 
146b8                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
146b8                 | ' 
146b8                 | ' sub do_draw
146b8                 | _do_draw
146b8     00 4A 05 F6 | 	mov	COUNT_, #0
146bc     A8 00 A0 FD | 	call	#pushregs_
146c0     20 F0 07 F1 | 	add	ptra, #32
146c4     18 5B BF FD | 	call	#_pop
146c8     FD 1A 02 F6 | 	mov	arg05, result1
146cc     FE 18 02 F6 | 	mov	arg04, result2
146d0     FF 16 02 F6 | 	mov	arg03, result3
146d4     0C 4E 05 F1 | 	add	fp, #12
146d8     A7 1A 62 FC | 	wrlong	arg05, fp
146dc     04 4E 05 F1 | 	add	fp, #4
146e0     A7 18 62 FC | 	wrlong	arg04, fp
146e4     04 4E 05 F1 | 	add	fp, #4
146e8     A7 16 62 FC | 	wrlong	arg03, fp
146ec     14 4E 85 F1 | 	sub	fp, #20
146f0     EC 5A BF FD | 	call	#_pop
146f4     FF 1A 02 F6 | 	mov	arg05, result3
146f8     A7 FA 61 FC | 	wrlong	result1, fp
146fc     04 4E 05 F1 | 	add	fp, #4
14700     A7 FC 61 FC | 	wrlong	result2, fp
14704     04 4E 05 F1 | 	add	fp, #4
14708     A7 1A 62 FC | 	wrlong	arg05, fp
1470c     08 4E 85 F1 | 	sub	fp, #8
14710     A7 12 02 F6 | 	mov	arg01, fp
14714     04 E7 BF FD | 	call	#_converttoint
14718     18 4E 05 F1 | 	add	fp, #24
1471c     A7 FA 61 FC | 	wrlong	result1, fp
14720     0C 4E 85 F1 | 	sub	fp, #12
14724     A7 12 02 F6 | 	mov	arg01, fp
14728     0C 4E 85 F1 | 	sub	fp, #12
1472c     EC E6 BF FD | 	call	#_converttoint
14730     1C 4E 05 F1 | 	add	fp, #28
14734     A7 FA 61 FC | 	wrlong	result1, fp
14738     57 00 00 FF 
1473c     10 E4 05 F1 | 	add	objptr, ##44560
14740     F2 12 02 FB | 	rdlong	arg01, objptr
14744     04 E4 05 F1 | 	add	objptr, #4
14748     F2 14 02 FB | 	rdlong	arg02, objptr
1474c     04 4E 85 F1 | 	sub	fp, #4
14750     A7 16 02 FB | 	rdlong	arg03, fp
14754     FD 18 02 F6 | 	mov	arg04, result1
14758     18 4E 85 F1 | 	sub	fp, #24
1475c     08 E4 85 F1 | 	sub	objptr, #8
14760     F2 1A 02 FB | 	rdlong	arg05, objptr
14764     57 00 00 FF 
14768     0C E4 85 F1 | 	sub	objptr, ##44556
1476c     90 62 B0 FD | 	call	#_hg010b_spin2_draw
14770     18 4E 05 F1 | 	add	fp, #24
14774     A7 1A 02 FB | 	rdlong	arg05, fp
14778     57 00 00 FF 
1477c     10 E4 05 F1 | 	add	objptr, ##44560
14780     F2 1A 62 FC | 	wrlong	arg05, objptr
14784     04 4E 05 F1 | 	add	fp, #4
14788     A7 1A 02 FB | 	rdlong	arg05, fp
1478c     1C 4E 85 F1 | 	sub	fp, #28
14790     04 E4 05 F1 | 	add	objptr, #4
14794     F2 1A 62 FC | 	wrlong	arg05, objptr
14798     57 00 00 FF 
1479c     14 E4 85 F1 | 	sub	objptr, ##44564
147a0     A7 F0 03 F6 | 	mov	ptra, fp
147a4     B2 00 A0 FD | 	call	#popregs_
147a8                 | _do_draw_ret
147a8     2D 00 64 FD | 	ret
147ac                 | 
147ac                 | ' 
147ac                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
147ac                 | ' 
147ac                 | ' sub do_fcircle
147ac                 | _do_fcircle
147ac     02 4A 05 F6 | 	mov	COUNT_, #2
147b0     A8 00 A0 FD | 	call	#pushregs_
147b4     24 F0 07 F1 | 	add	ptra, #36
147b8     24 5A BF FD | 	call	#_pop
147bc     FD 18 02 F6 | 	mov	arg04, result1
147c0     FE 16 02 F6 | 	mov	arg03, result2
147c4     FF 14 02 F6 | 	mov	arg02, result3
147c8     18 4E 05 F1 | 	add	fp, #24
147cc     A7 18 62 FC | 	wrlong	arg04, fp
147d0     04 4E 05 F1 | 	add	fp, #4
147d4     A7 16 62 FC | 	wrlong	arg03, fp
147d8     04 4E 05 F1 | 	add	fp, #4
147dc     A7 14 62 FC | 	wrlong	arg02, fp
147e0     20 4E 85 F1 | 	sub	fp, #32
147e4     F8 59 BF FD | 	call	#_pop
147e8     FD 18 02 F6 | 	mov	arg04, result1
147ec     FE 16 02 F6 | 	mov	arg03, result2
147f0     FF 1E 02 F6 | 	mov	local01, result3
147f4     0C 4E 05 F1 | 	add	fp, #12
147f8     A7 18 62 FC | 	wrlong	arg04, fp
147fc     04 4E 05 F1 | 	add	fp, #4
14800     A7 16 62 FC | 	wrlong	arg03, fp
14804     04 4E 05 F1 | 	add	fp, #4
14808     A7 1E 62 FC | 	wrlong	local01, fp
1480c     14 4E 85 F1 | 	sub	fp, #20
14810     CC 59 BF FD | 	call	#_pop
14814     A7 FA 61 FC | 	wrlong	result1, fp
14818     04 4E 05 F1 | 	add	fp, #4
1481c     A7 FC 61 FC | 	wrlong	result2, fp
14820     04 4E 05 F1 | 	add	fp, #4
14824     A7 FE 61 FC | 	wrlong	result3, fp
14828                 | ' 
14828                 | ' t3=pop()
14828                 | ' t2=pop()
14828                 | ' t1=pop()
14828                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
14828     FF 18 02 F6 | 	mov	arg04, result3
1482c     08 4E 85 F1 | 	sub	fp, #8
14830     1C 18 0E F2 | 	cmp	arg04, #28 wz
14834     08 4E 05 51 |  if_ne	add	fp, #8
14838     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1483c     08 4E 85 51 |  if_ne	sub	fp, #8
14840     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14844     7C 00 90 5D |  if_ne	jmp	#LR__1630
14848     14 4E 05 F1 | 	add	fp, #20
1484c     A7 1E 02 FB | 	rdlong	local01, fp
14850     14 4E 85 F1 | 	sub	fp, #20
14854     1C 1E 0E F2 | 	cmp	local01, #28 wz
14858     14 4E 05 51 |  if_ne	add	fp, #20
1485c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14860     14 4E 85 51 |  if_ne	sub	fp, #20
14864     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14868     58 00 90 5D |  if_ne	jmp	#LR__1630
1486c     20 4E 05 F1 | 	add	fp, #32
14870     A7 1E 02 FB | 	rdlong	local01, fp
14874     20 4E 85 F1 | 	sub	fp, #32
14878     1C 1E 0E F2 | 	cmp	local01, #28 wz
1487c     20 4E 05 51 |  if_ne	add	fp, #32
14880     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14884     20 4E 85 51 |  if_ne	sub	fp, #32
14888     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1488c     34 00 90 5D |  if_ne	jmp	#LR__1630
14890     A7 12 02 FB | 	rdlong	arg01, fp
14894     0C 4E 05 F1 | 	add	fp, #12
14898     A7 14 02 FB | 	rdlong	arg02, fp
1489c     0C 4E 05 F1 | 	add	fp, #12
148a0     A7 16 02 FB | 	rdlong	arg03, fp
148a4     18 4E 85 F1 | 	sub	fp, #24
148a8     57 00 00 FF 
148ac     0C E4 05 F1 | 	add	objptr, ##44556
148b0     F2 18 02 FB | 	rdlong	arg04, objptr
148b4     57 00 00 FF 
148b8     0C E4 85 F1 | 	sub	objptr, ##44556
148bc     C4 65 B0 FD | 	call	#_hg010b_spin2_fcircle
148c0                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
148c0     54 00 90 FD | 	jmp	#LR__1631
148c4                 | LR__1630
148c4     A7 12 02 F6 | 	mov	arg01, fp
148c8     50 E5 BF FD | 	call	#_converttoint
148cc     FD 1E 02 F6 | 	mov	local01, result1
148d0     0C 4E 05 F1 | 	add	fp, #12
148d4     A7 12 02 F6 | 	mov	arg01, fp
148d8     0C 4E 85 F1 | 	sub	fp, #12
148dc     3C E5 BF FD | 	call	#_converttoint
148e0     FD 20 02 F6 | 	mov	local02, result1
148e4     18 4E 05 F1 | 	add	fp, #24
148e8     A7 12 02 F6 | 	mov	arg01, fp
148ec     18 4E 85 F1 | 	sub	fp, #24
148f0     28 E5 BF FD | 	call	#_converttoint
148f4     FD 16 02 F6 | 	mov	arg03, result1
148f8     57 00 00 FF 
148fc     0C E4 05 F1 | 	add	objptr, ##44556
14900     F2 18 02 FB | 	rdlong	arg04, objptr
14904     57 00 00 FF 
14908     0C E4 85 F1 | 	sub	objptr, ##44556
1490c     0F 13 02 F6 | 	mov	arg01, local01
14910     10 15 02 F6 | 	mov	arg02, local02
14914     6C 65 B0 FD | 	call	#_hg010b_spin2_fcircle
14918                 | LR__1631
14918     A7 F0 03 F6 | 	mov	ptra, fp
1491c     B2 00 A0 FD | 	call	#popregs_
14920                 | _do_fcircle_ret
14920     2D 00 64 FD | 	ret
14924                 | 
14924                 | ' 
14924                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
14924                 | ' 
14924                 | ' sub do_circle
14924                 | _do_circle
14924     02 4A 05 F6 | 	mov	COUNT_, #2
14928     A8 00 A0 FD | 	call	#pushregs_
1492c     24 F0 07 F1 | 	add	ptra, #36
14930     AC 58 BF FD | 	call	#_pop
14934     FD 18 02 F6 | 	mov	arg04, result1
14938     FE 16 02 F6 | 	mov	arg03, result2
1493c     FF 14 02 F6 | 	mov	arg02, result3
14940     18 4E 05 F1 | 	add	fp, #24
14944     A7 18 62 FC | 	wrlong	arg04, fp
14948     04 4E 05 F1 | 	add	fp, #4
1494c     A7 16 62 FC | 	wrlong	arg03, fp
14950     04 4E 05 F1 | 	add	fp, #4
14954     A7 14 62 FC | 	wrlong	arg02, fp
14958     20 4E 85 F1 | 	sub	fp, #32
1495c     80 58 BF FD | 	call	#_pop
14960     FD 18 02 F6 | 	mov	arg04, result1
14964     FE 16 02 F6 | 	mov	arg03, result2
14968     FF 1E 02 F6 | 	mov	local01, result3
1496c     0C 4E 05 F1 | 	add	fp, #12
14970     A7 18 62 FC | 	wrlong	arg04, fp
14974     04 4E 05 F1 | 	add	fp, #4
14978     A7 16 62 FC | 	wrlong	arg03, fp
1497c     04 4E 05 F1 | 	add	fp, #4
14980     A7 1E 62 FC | 	wrlong	local01, fp
14984     14 4E 85 F1 | 	sub	fp, #20
14988     54 58 BF FD | 	call	#_pop
1498c     A7 FA 61 FC | 	wrlong	result1, fp
14990     04 4E 05 F1 | 	add	fp, #4
14994     A7 FC 61 FC | 	wrlong	result2, fp
14998     04 4E 05 F1 | 	add	fp, #4
1499c     A7 FE 61 FC | 	wrlong	result3, fp
149a0                 | ' 
149a0                 | ' t3=pop()
149a0                 | ' t2=pop()
149a0                 | ' t1=pop()
149a0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
149a0     FF 18 02 F6 | 	mov	arg04, result3
149a4     08 4E 85 F1 | 	sub	fp, #8
149a8     1C 18 0E F2 | 	cmp	arg04, #28 wz
149ac     08 4E 05 51 |  if_ne	add	fp, #8
149b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
149b4     08 4E 85 51 |  if_ne	sub	fp, #8
149b8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
149bc     7C 00 90 5D |  if_ne	jmp	#LR__1640
149c0     14 4E 05 F1 | 	add	fp, #20
149c4     A7 1E 02 FB | 	rdlong	local01, fp
149c8     14 4E 85 F1 | 	sub	fp, #20
149cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
149d0     14 4E 05 51 |  if_ne	add	fp, #20
149d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
149d8     14 4E 85 51 |  if_ne	sub	fp, #20
149dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
149e0     58 00 90 5D |  if_ne	jmp	#LR__1640
149e4     20 4E 05 F1 | 	add	fp, #32
149e8     A7 1E 02 FB | 	rdlong	local01, fp
149ec     20 4E 85 F1 | 	sub	fp, #32
149f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
149f4     20 4E 05 51 |  if_ne	add	fp, #32
149f8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
149fc     20 4E 85 51 |  if_ne	sub	fp, #32
14a00     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14a04     34 00 90 5D |  if_ne	jmp	#LR__1640
14a08     A7 12 02 FB | 	rdlong	arg01, fp
14a0c     0C 4E 05 F1 | 	add	fp, #12
14a10     A7 14 02 FB | 	rdlong	arg02, fp
14a14     0C 4E 05 F1 | 	add	fp, #12
14a18     A7 16 02 FB | 	rdlong	arg03, fp
14a1c     18 4E 85 F1 | 	sub	fp, #24
14a20     57 00 00 FF 
14a24     0C E4 05 F1 | 	add	objptr, ##44556
14a28     F2 18 02 FB | 	rdlong	arg04, objptr
14a2c     57 00 00 FF 
14a30     0C E4 85 F1 | 	sub	objptr, ##44556
14a34     58 65 B0 FD | 	call	#_hg010b_spin2_circle
14a38                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
14a38     54 00 90 FD | 	jmp	#LR__1641
14a3c                 | LR__1640
14a3c     A7 12 02 F6 | 	mov	arg01, fp
14a40     D8 E3 BF FD | 	call	#_converttoint
14a44     FD 1E 02 F6 | 	mov	local01, result1
14a48     0C 4E 05 F1 | 	add	fp, #12
14a4c     A7 12 02 F6 | 	mov	arg01, fp
14a50     0C 4E 85 F1 | 	sub	fp, #12
14a54     C4 E3 BF FD | 	call	#_converttoint
14a58     FD 20 02 F6 | 	mov	local02, result1
14a5c     18 4E 05 F1 | 	add	fp, #24
14a60     A7 12 02 F6 | 	mov	arg01, fp
14a64     18 4E 85 F1 | 	sub	fp, #24
14a68     B0 E3 BF FD | 	call	#_converttoint
14a6c     FD 16 02 F6 | 	mov	arg03, result1
14a70     57 00 00 FF 
14a74     0C E4 05 F1 | 	add	objptr, ##44556
14a78     F2 18 02 FB | 	rdlong	arg04, objptr
14a7c     57 00 00 FF 
14a80     0C E4 85 F1 | 	sub	objptr, ##44556
14a84     0F 13 02 F6 | 	mov	arg01, local01
14a88     10 15 02 F6 | 	mov	arg02, local02
14a8c     00 65 B0 FD | 	call	#_hg010b_spin2_circle
14a90                 | LR__1641
14a90     A7 F0 03 F6 | 	mov	ptra, fp
14a94     B2 00 A0 FD | 	call	#popregs_
14a98                 | _do_circle_ret
14a98     2D 00 64 FD | 	ret
14a9c                 | 
14a9c                 | ' 
14a9c                 | ' ' -------------------------- Draw a rectangle
14a9c                 | ' 
14a9c                 | ' sub do_box
14a9c                 | _do_box
14a9c     03 4A 05 F6 | 	mov	COUNT_, #3
14aa0     A8 00 A0 FD | 	call	#pushregs_
14aa4     30 F0 07 F1 | 	add	ptra, #48
14aa8     34 57 BF FD | 	call	#_pop
14aac     FD 1A 02 F6 | 	mov	arg05, result1
14ab0     FE 18 02 F6 | 	mov	arg04, result2
14ab4     FF 16 02 F6 | 	mov	arg03, result3
14ab8     24 4E 05 F1 | 	add	fp, #36
14abc     A7 1A 62 FC | 	wrlong	arg05, fp
14ac0     04 4E 05 F1 | 	add	fp, #4
14ac4     A7 18 62 FC | 	wrlong	arg04, fp
14ac8     04 4E 05 F1 | 	add	fp, #4
14acc     A7 16 62 FC | 	wrlong	arg03, fp
14ad0     2C 4E 85 F1 | 	sub	fp, #44
14ad4     08 57 BF FD | 	call	#_pop
14ad8     FD 1A 02 F6 | 	mov	arg05, result1
14adc     FE 18 02 F6 | 	mov	arg04, result2
14ae0     FF 16 02 F6 | 	mov	arg03, result3
14ae4     18 4E 05 F1 | 	add	fp, #24
14ae8     A7 1A 62 FC | 	wrlong	arg05, fp
14aec     04 4E 05 F1 | 	add	fp, #4
14af0     A7 18 62 FC | 	wrlong	arg04, fp
14af4     04 4E 05 F1 | 	add	fp, #4
14af8     A7 16 62 FC | 	wrlong	arg03, fp
14afc     20 4E 85 F1 | 	sub	fp, #32
14b00     DC 56 BF FD | 	call	#_pop
14b04     FD 1A 02 F6 | 	mov	arg05, result1
14b08     FE 18 02 F6 | 	mov	arg04, result2
14b0c     FF 1E 02 F6 | 	mov	local01, result3
14b10     0C 4E 05 F1 | 	add	fp, #12
14b14     A7 1A 62 FC | 	wrlong	arg05, fp
14b18     04 4E 05 F1 | 	add	fp, #4
14b1c     A7 18 62 FC | 	wrlong	arg04, fp
14b20     04 4E 05 F1 | 	add	fp, #4
14b24     A7 1E 62 FC | 	wrlong	local01, fp
14b28     14 4E 85 F1 | 	sub	fp, #20
14b2c     B0 56 BF FD | 	call	#_pop
14b30     A7 FA 61 FC | 	wrlong	result1, fp
14b34     04 4E 05 F1 | 	add	fp, #4
14b38     A7 FC 61 FC | 	wrlong	result2, fp
14b3c     04 4E 05 F1 | 	add	fp, #4
14b40     A7 FE 61 FC | 	wrlong	result3, fp
14b44                 | ' 
14b44                 | ' t4=pop()
14b44                 | ' t3=pop()
14b44                 | ' t2=pop()
14b44                 | ' t1=pop()
14b44                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14b44     FF 1A 02 F6 | 	mov	arg05, result3
14b48     08 4E 85 F1 | 	sub	fp, #8
14b4c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14b50     08 4E 05 51 |  if_ne	add	fp, #8
14b54     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14b58     08 4E 85 51 |  if_ne	sub	fp, #8
14b5c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14b60     A8 00 90 5D |  if_ne	jmp	#LR__1650
14b64     14 4E 05 F1 | 	add	fp, #20
14b68     A7 1E 02 FB | 	rdlong	local01, fp
14b6c     14 4E 85 F1 | 	sub	fp, #20
14b70     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b74     14 4E 05 51 |  if_ne	add	fp, #20
14b78     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b7c     14 4E 85 51 |  if_ne	sub	fp, #20
14b80     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b84     84 00 90 5D |  if_ne	jmp	#LR__1650
14b88     20 4E 05 F1 | 	add	fp, #32
14b8c     A7 1E 02 FB | 	rdlong	local01, fp
14b90     20 4E 85 F1 | 	sub	fp, #32
14b94     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b98     20 4E 05 51 |  if_ne	add	fp, #32
14b9c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14ba0     20 4E 85 51 |  if_ne	sub	fp, #32
14ba4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14ba8     60 00 90 5D |  if_ne	jmp	#LR__1650
14bac     2C 4E 05 F1 | 	add	fp, #44
14bb0     A7 1E 02 FB | 	rdlong	local01, fp
14bb4     2C 4E 85 F1 | 	sub	fp, #44
14bb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
14bbc     2C 4E 05 51 |  if_ne	add	fp, #44
14bc0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14bc4     2C 4E 85 51 |  if_ne	sub	fp, #44
14bc8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14bcc     3C 00 90 5D |  if_ne	jmp	#LR__1650
14bd0     A7 12 02 FB | 	rdlong	arg01, fp
14bd4     0C 4E 05 F1 | 	add	fp, #12
14bd8     A7 14 02 FB | 	rdlong	arg02, fp
14bdc     0C 4E 05 F1 | 	add	fp, #12
14be0     A7 16 02 FB | 	rdlong	arg03, fp
14be4     0C 4E 05 F1 | 	add	fp, #12
14be8     A7 18 02 FB | 	rdlong	arg04, fp
14bec     24 4E 85 F1 | 	sub	fp, #36
14bf0     57 00 00 FF 
14bf4     0C E4 05 F1 | 	add	objptr, ##44556
14bf8     F2 1A 02 FB | 	rdlong	arg05, objptr
14bfc     57 00 00 FF 
14c00     0C E4 85 F1 | 	sub	objptr, ##44556
14c04     54 65 B0 FD | 	call	#_hg010b_spin2_box
14c08                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14c08     6C 00 90 FD | 	jmp	#LR__1651
14c0c                 | LR__1650
14c0c     A7 12 02 F6 | 	mov	arg01, fp
14c10     08 E2 BF FD | 	call	#_converttoint
14c14     FD 20 02 F6 | 	mov	local02, result1
14c18     0C 4E 05 F1 | 	add	fp, #12
14c1c     A7 12 02 F6 | 	mov	arg01, fp
14c20     0C 4E 85 F1 | 	sub	fp, #12
14c24     F4 E1 BF FD | 	call	#_converttoint
14c28     FD 22 02 F6 | 	mov	local03, result1
14c2c     18 4E 05 F1 | 	add	fp, #24
14c30     A7 12 02 F6 | 	mov	arg01, fp
14c34     18 4E 85 F1 | 	sub	fp, #24
14c38     E0 E1 BF FD | 	call	#_converttoint
14c3c     FD 1E 02 F6 | 	mov	local01, result1
14c40     24 4E 05 F1 | 	add	fp, #36
14c44     A7 12 02 F6 | 	mov	arg01, fp
14c48     24 4E 85 F1 | 	sub	fp, #36
14c4c     CC E1 BF FD | 	call	#_converttoint
14c50     FD 18 02 F6 | 	mov	arg04, result1
14c54     57 00 00 FF 
14c58     0C E4 05 F1 | 	add	objptr, ##44556
14c5c     F2 1A 02 FB | 	rdlong	arg05, objptr
14c60     57 00 00 FF 
14c64     0C E4 85 F1 | 	sub	objptr, ##44556
14c68     10 13 02 F6 | 	mov	arg01, local02
14c6c     11 15 02 F6 | 	mov	arg02, local03
14c70     0F 17 02 F6 | 	mov	arg03, local01
14c74     E4 64 B0 FD | 	call	#_hg010b_spin2_box
14c78                 | LR__1651
14c78     A7 F0 03 F6 | 	mov	ptra, fp
14c7c     B2 00 A0 FD | 	call	#popregs_
14c80                 | _do_box_ret
14c80     2D 00 64 FD | 	ret
14c84                 | 
14c84                 | ' 
14c84                 | ' sub do_fill
14c84                 | _do_fill
14c84     03 4A 05 F6 | 	mov	COUNT_, #3
14c88     A8 00 A0 FD | 	call	#pushregs_
14c8c     30 F0 07 F1 | 	add	ptra, #48
14c90     4C 55 BF FD | 	call	#_pop
14c94     FD 18 02 F6 | 	mov	arg04, result1
14c98     FE 16 02 F6 | 	mov	arg03, result2
14c9c     FF 14 02 F6 | 	mov	arg02, result3
14ca0     24 4E 05 F1 | 	add	fp, #36
14ca4     A7 18 62 FC | 	wrlong	arg04, fp
14ca8     04 4E 05 F1 | 	add	fp, #4
14cac     A7 16 62 FC | 	wrlong	arg03, fp
14cb0     04 4E 05 F1 | 	add	fp, #4
14cb4     A7 14 62 FC | 	wrlong	arg02, fp
14cb8     2C 4E 85 F1 | 	sub	fp, #44
14cbc     20 55 BF FD | 	call	#_pop
14cc0     FD 18 02 F6 | 	mov	arg04, result1
14cc4     FE 16 02 F6 | 	mov	arg03, result2
14cc8     FF 14 02 F6 | 	mov	arg02, result3
14ccc     18 4E 05 F1 | 	add	fp, #24
14cd0     A7 18 62 FC | 	wrlong	arg04, fp
14cd4     04 4E 05 F1 | 	add	fp, #4
14cd8     A7 16 62 FC | 	wrlong	arg03, fp
14cdc     04 4E 05 F1 | 	add	fp, #4
14ce0     A7 14 62 FC | 	wrlong	arg02, fp
14ce4     20 4E 85 F1 | 	sub	fp, #32
14ce8     F4 54 BF FD | 	call	#_pop
14cec     FD 18 02 F6 | 	mov	arg04, result1
14cf0     FE 16 02 F6 | 	mov	arg03, result2
14cf4     FF 1E 02 F6 | 	mov	local01, result3
14cf8     0C 4E 05 F1 | 	add	fp, #12
14cfc     A7 18 62 FC | 	wrlong	arg04, fp
14d00     04 4E 05 F1 | 	add	fp, #4
14d04     A7 16 62 FC | 	wrlong	arg03, fp
14d08     04 4E 05 F1 | 	add	fp, #4
14d0c     A7 1E 62 FC | 	wrlong	local01, fp
14d10     14 4E 85 F1 | 	sub	fp, #20
14d14     C8 54 BF FD | 	call	#_pop
14d18     A7 FA 61 FC | 	wrlong	result1, fp
14d1c     04 4E 05 F1 | 	add	fp, #4
14d20     A7 FC 61 FC | 	wrlong	result2, fp
14d24     04 4E 05 F1 | 	add	fp, #4
14d28     A7 FE 61 FC | 	wrlong	result3, fp
14d2c                 | ' 
14d2c                 | ' t4=pop()
14d2c                 | ' t3=pop()
14d2c                 | ' t2=pop()
14d2c                 | ' t1=pop()
14d2c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14d2c     FF 18 02 F6 | 	mov	arg04, result3
14d30     08 4E 85 F1 | 	sub	fp, #8
14d34     1C 18 0E F2 | 	cmp	arg04, #28 wz
14d38     08 4E 05 51 |  if_ne	add	fp, #8
14d3c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14d40     08 4E 85 51 |  if_ne	sub	fp, #8
14d44     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14d48     94 00 90 5D |  if_ne	jmp	#LR__1660
14d4c     14 4E 05 F1 | 	add	fp, #20
14d50     A7 1E 02 FB | 	rdlong	local01, fp
14d54     14 4E 85 F1 | 	sub	fp, #20
14d58     1C 1E 0E F2 | 	cmp	local01, #28 wz
14d5c     14 4E 05 51 |  if_ne	add	fp, #20
14d60     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14d64     14 4E 85 51 |  if_ne	sub	fp, #20
14d68     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14d6c     70 00 90 5D |  if_ne	jmp	#LR__1660
14d70     20 4E 05 F1 | 	add	fp, #32
14d74     A7 1E 02 FB | 	rdlong	local01, fp
14d78     20 4E 85 F1 | 	sub	fp, #32
14d7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14d80     20 4E 05 51 |  if_ne	add	fp, #32
14d84     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14d88     20 4E 85 51 |  if_ne	sub	fp, #32
14d8c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14d90     4C 00 90 5D |  if_ne	jmp	#LR__1660
14d94     2C 4E 05 F1 | 	add	fp, #44
14d98     A7 1E 02 FB | 	rdlong	local01, fp
14d9c     2C 4E 85 F1 | 	sub	fp, #44
14da0     1C 1E 0E F2 | 	cmp	local01, #28 wz
14da4     2C 4E 05 51 |  if_ne	add	fp, #44
14da8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14dac     2C 4E 85 51 |  if_ne	sub	fp, #44
14db0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14db4     28 00 90 5D |  if_ne	jmp	#LR__1660
14db8     A7 12 02 FB | 	rdlong	arg01, fp
14dbc     0C 4E 05 F1 | 	add	fp, #12
14dc0     A7 14 02 FB | 	rdlong	arg02, fp
14dc4     0C 4E 05 F1 | 	add	fp, #12
14dc8     A7 16 02 FB | 	rdlong	arg03, fp
14dcc     0C 4E 05 F1 | 	add	fp, #12
14dd0     A7 18 02 FB | 	rdlong	arg04, fp
14dd4     24 4E 85 F1 | 	sub	fp, #36
14dd8     14 5E B0 FD | 	call	#_hg010b_spin2_fill
14ddc                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
14ddc     58 00 90 FD | 	jmp	#LR__1661
14de0                 | LR__1660
14de0     A7 12 02 F6 | 	mov	arg01, fp
14de4     34 E0 BF FD | 	call	#_converttoint
14de8     FD 20 02 F6 | 	mov	local02, result1
14dec     0C 4E 05 F1 | 	add	fp, #12
14df0     A7 12 02 F6 | 	mov	arg01, fp
14df4     0C 4E 85 F1 | 	sub	fp, #12
14df8     20 E0 BF FD | 	call	#_converttoint
14dfc     FD 22 02 F6 | 	mov	local03, result1
14e00     18 4E 05 F1 | 	add	fp, #24
14e04     A7 12 02 F6 | 	mov	arg01, fp
14e08     18 4E 85 F1 | 	sub	fp, #24
14e0c     0C E0 BF FD | 	call	#_converttoint
14e10     FD 1E 02 F6 | 	mov	local01, result1
14e14     24 4E 05 F1 | 	add	fp, #36
14e18     A7 12 02 F6 | 	mov	arg01, fp
14e1c     24 4E 85 F1 | 	sub	fp, #36
14e20     F8 DF BF FD | 	call	#_converttoint
14e24     FD 18 02 F6 | 	mov	arg04, result1
14e28     10 13 02 F6 | 	mov	arg01, local02
14e2c     11 15 02 F6 | 	mov	arg02, local03
14e30     0F 17 02 F6 | 	mov	arg03, local01
14e34     B8 5D B0 FD | 	call	#_hg010b_spin2_fill
14e38                 | LR__1661
14e38     A7 F0 03 F6 | 	mov	ptra, fp
14e3c     B2 00 A0 FD | 	call	#popregs_
14e40                 | _do_fill_ret
14e40     2D 00 64 FD | 	ret
14e44                 | 
14e44                 | ' 
14e44                 | ' ' -------------------------- Draw a frane
14e44                 | ' 
14e44                 | ' sub do_frame
14e44                 | _do_frame
14e44     03 4A 05 F6 | 	mov	COUNT_, #3
14e48     A8 00 A0 FD | 	call	#pushregs_
14e4c     30 F0 07 F1 | 	add	ptra, #48
14e50     8C 53 BF FD | 	call	#_pop
14e54     FD 1A 02 F6 | 	mov	arg05, result1
14e58     FE 18 02 F6 | 	mov	arg04, result2
14e5c     FF 16 02 F6 | 	mov	arg03, result3
14e60     24 4E 05 F1 | 	add	fp, #36
14e64     A7 1A 62 FC | 	wrlong	arg05, fp
14e68     04 4E 05 F1 | 	add	fp, #4
14e6c     A7 18 62 FC | 	wrlong	arg04, fp
14e70     04 4E 05 F1 | 	add	fp, #4
14e74     A7 16 62 FC | 	wrlong	arg03, fp
14e78     2C 4E 85 F1 | 	sub	fp, #44
14e7c     60 53 BF FD | 	call	#_pop
14e80     FD 1A 02 F6 | 	mov	arg05, result1
14e84     FE 18 02 F6 | 	mov	arg04, result2
14e88     FF 16 02 F6 | 	mov	arg03, result3
14e8c     18 4E 05 F1 | 	add	fp, #24
14e90     A7 1A 62 FC | 	wrlong	arg05, fp
14e94     04 4E 05 F1 | 	add	fp, #4
14e98     A7 18 62 FC | 	wrlong	arg04, fp
14e9c     04 4E 05 F1 | 	add	fp, #4
14ea0     A7 16 62 FC | 	wrlong	arg03, fp
14ea4     20 4E 85 F1 | 	sub	fp, #32
14ea8     34 53 BF FD | 	call	#_pop
14eac     FD 1A 02 F6 | 	mov	arg05, result1
14eb0     FE 18 02 F6 | 	mov	arg04, result2
14eb4     FF 1E 02 F6 | 	mov	local01, result3
14eb8     0C 4E 05 F1 | 	add	fp, #12
14ebc     A7 1A 62 FC | 	wrlong	arg05, fp
14ec0     04 4E 05 F1 | 	add	fp, #4
14ec4     A7 18 62 FC | 	wrlong	arg04, fp
14ec8     04 4E 05 F1 | 	add	fp, #4
14ecc     A7 1E 62 FC | 	wrlong	local01, fp
14ed0     14 4E 85 F1 | 	sub	fp, #20
14ed4     08 53 BF FD | 	call	#_pop
14ed8     A7 FA 61 FC | 	wrlong	result1, fp
14edc     04 4E 05 F1 | 	add	fp, #4
14ee0     A7 FC 61 FC | 	wrlong	result2, fp
14ee4     04 4E 05 F1 | 	add	fp, #4
14ee8     A7 FE 61 FC | 	wrlong	result3, fp
14eec                 | ' 
14eec                 | ' t4=pop()
14eec                 | ' t3=pop()
14eec                 | ' t2=pop()
14eec                 | ' t1=pop()
14eec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14eec     FF 1A 02 F6 | 	mov	arg05, result3
14ef0     08 4E 85 F1 | 	sub	fp, #8
14ef4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14ef8     08 4E 05 51 |  if_ne	add	fp, #8
14efc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14f00     08 4E 85 51 |  if_ne	sub	fp, #8
14f04     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14f08     A8 00 90 5D |  if_ne	jmp	#LR__1670
14f0c     14 4E 05 F1 | 	add	fp, #20
14f10     A7 1E 02 FB | 	rdlong	local01, fp
14f14     14 4E 85 F1 | 	sub	fp, #20
14f18     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f1c     14 4E 05 51 |  if_ne	add	fp, #20
14f20     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14f24     14 4E 85 51 |  if_ne	sub	fp, #20
14f28     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14f2c     84 00 90 5D |  if_ne	jmp	#LR__1670
14f30     20 4E 05 F1 | 	add	fp, #32
14f34     A7 1E 02 FB | 	rdlong	local01, fp
14f38     20 4E 85 F1 | 	sub	fp, #32
14f3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f40     20 4E 05 51 |  if_ne	add	fp, #32
14f44     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14f48     20 4E 85 51 |  if_ne	sub	fp, #32
14f4c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14f50     60 00 90 5D |  if_ne	jmp	#LR__1670
14f54     2C 4E 05 F1 | 	add	fp, #44
14f58     A7 1E 02 FB | 	rdlong	local01, fp
14f5c     2C 4E 85 F1 | 	sub	fp, #44
14f60     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f64     2C 4E 05 51 |  if_ne	add	fp, #44
14f68     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14f6c     2C 4E 85 51 |  if_ne	sub	fp, #44
14f70     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14f74     3C 00 90 5D |  if_ne	jmp	#LR__1670
14f78     A7 12 02 FB | 	rdlong	arg01, fp
14f7c     0C 4E 05 F1 | 	add	fp, #12
14f80     A7 14 02 FB | 	rdlong	arg02, fp
14f84     0C 4E 05 F1 | 	add	fp, #12
14f88     A7 16 02 FB | 	rdlong	arg03, fp
14f8c     0C 4E 05 F1 | 	add	fp, #12
14f90     A7 18 02 FB | 	rdlong	arg04, fp
14f94     24 4E 85 F1 | 	sub	fp, #36
14f98     57 00 00 FF 
14f9c     0C E4 05 F1 | 	add	objptr, ##44556
14fa0     F2 1A 02 FB | 	rdlong	arg05, objptr
14fa4     57 00 00 FF 
14fa8     0C E4 85 F1 | 	sub	objptr, ##44556
14fac     2C 61 B0 FD | 	call	#_hg010b_spin2_frame
14fb0                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14fb0     6C 00 90 FD | 	jmp	#LR__1671
14fb4                 | LR__1670
14fb4     A7 12 02 F6 | 	mov	arg01, fp
14fb8     60 DE BF FD | 	call	#_converttoint
14fbc     FD 20 02 F6 | 	mov	local02, result1
14fc0     0C 4E 05 F1 | 	add	fp, #12
14fc4     A7 12 02 F6 | 	mov	arg01, fp
14fc8     0C 4E 85 F1 | 	sub	fp, #12
14fcc     4C DE BF FD | 	call	#_converttoint
14fd0     FD 22 02 F6 | 	mov	local03, result1
14fd4     18 4E 05 F1 | 	add	fp, #24
14fd8     A7 12 02 F6 | 	mov	arg01, fp
14fdc     18 4E 85 F1 | 	sub	fp, #24
14fe0     38 DE BF FD | 	call	#_converttoint
14fe4     FD 1E 02 F6 | 	mov	local01, result1
14fe8     24 4E 05 F1 | 	add	fp, #36
14fec     A7 12 02 F6 | 	mov	arg01, fp
14ff0     24 4E 85 F1 | 	sub	fp, #36
14ff4     24 DE BF FD | 	call	#_converttoint
14ff8     FD 18 02 F6 | 	mov	arg04, result1
14ffc     57 00 00 FF 
15000     0C E4 05 F1 | 	add	objptr, ##44556
15004     F2 1A 02 FB | 	rdlong	arg05, objptr
15008     57 00 00 FF 
1500c     0C E4 85 F1 | 	sub	objptr, ##44556
15010     10 13 02 F6 | 	mov	arg01, local02
15014     11 15 02 F6 | 	mov	arg02, local03
15018     0F 17 02 F6 | 	mov	arg03, local01
1501c     BC 60 B0 FD | 	call	#_hg010b_spin2_frame
15020                 | LR__1671
15020     A7 F0 03 F6 | 	mov	ptra, fp
15024     B2 00 A0 FD | 	call	#popregs_
15028                 | _do_frame_ret
15028     2D 00 64 FD | 	ret
1502c                 | 
1502c                 | ' 
1502c                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
1502c                 | ' 
1502c                 | ' ' ------------------------- Print to the screem
1502c                 | ' 
1502c                 | ' sub do_print  
1502c                 | _do_print
1502c     0A 4A 05 F6 | 	mov	COUNT_, #10
15030     A8 00 A0 FD | 	call	#pushregs_
15034     00 24 06 F6 | 	mov	local04, #0
15038     A4 51 BF FD | 	call	#_pop
1503c     FD 26 02 F6 | 	mov	local05, result1
15040     FE 28 02 F6 | 	mov	local06, result2
15044     FF 2A 02 F6 | 	mov	local07, result3
15048     13 1F 02 F6 | 	mov	local01, local05
1504c     14 21 02 F6 | 	mov	local02, local06
15050     15 23 02 F6 | 	mov	local03, local07
15054                 | '  
15054                 | ' r=0
15054                 | ' t1=pop() 
15054                 | ' 'print t1.result_type,t1.result.uresult
15054                 | ' 
15054                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
15054     21 22 0E F2 | 	cmp	local03, #33 wz
15058     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
1505c     20 00 90 5D |  if_ne	jmp	#LR__1680
15060     11 25 02 F6 | 	mov	local04, local03
15064     78 51 BF FD | 	call	#_pop
15068     FD 26 02 F6 | 	mov	local05, result1
1506c     FE 28 02 F6 | 	mov	local06, result2
15070     FF 2A 02 F6 | 	mov	local07, result3
15074     13 1F 02 F6 | 	mov	local01, local05
15078     14 21 02 F6 | 	mov	local02, local06
1507c     15 23 02 F6 | 	mov	local03, local07
15080                 | LR__1680
15080                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
15080     20 22 0E F2 | 	cmp	local03, #32 wz
15084     11 25 02 A6 |  if_e	mov	local04, local03
15088                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
15088     FF 22 0E F2 | 	cmp	local03, #255 wz
1508c     0C 00 90 5D |  if_ne	jmp	#LR__1681
15090     0F 13 02 F6 | 	mov	arg01, local01
15094     60 3F B0 FD | 	call	#_printerror
15098     4C 04 90 FD | 	jmp	#LR__1699
1509c                 | LR__1681
1509c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
1509c     2B 22 0E F2 | 	cmp	local03, #43 wz
150a0     14 00 90 5D |  if_ne	jmp	#LR__1682
150a4     0F 13 02 F6 | 	mov	arg01, local01
150a8     C0 93 BF FD | 	call	#_convertstring
150ac     FD 26 02 F6 | 	mov	local05, result1
150b0     13 1F 02 F6 | 	mov	local01, local05
150b4     1F 22 06 F6 | 	mov	local03, #31
150b8                 | LR__1682
150b8                 | ' 
150b8                 | ' if r=print_mod_comma  then
150b8     21 24 0E F2 | 	cmp	local04, #33 wz
150bc     AC 01 90 5D |  if_ne	jmp	#LR__1687
150c0                 | '   if t1.result_type=result_int then print t1.result.iresult,
150c0     1C 22 0E F2 | 	cmp	local03, #28 wz
150c4     64 00 90 5D |  if_ne	jmp	#LR__1683
150c8     00 12 06 F6 | 	mov	arg01, #0
150cc     A0 D0 B0 FD | 	call	#__system___getiolock_0474
150d0     FD 12 02 F6 | 	mov	arg01, result1
150d4     08 77 B0 FD | 	call	#__system___lockmem
150d8     00 28 06 F6 | 	mov	local06, #0
150dc     00 12 06 F6 | 	mov	arg01, #0
150e0     0F 15 02 F6 | 	mov	arg02, local01
150e4     00 16 06 F6 | 	mov	arg03, #0
150e8     0A 18 06 F6 | 	mov	arg04, #10
150ec     38 84 B0 FD | 	call	#__system___basic_print_integer
150f0     FD 2A 02 F6 | 	mov	local07, result1
150f4     14 27 02 F6 | 	mov	local05, local06
150f8     15 27 02 F1 | 	add	local05, local07
150fc     00 2C 06 F6 | 	mov	local08, #0
15100     00 12 06 F6 | 	mov	arg01, #0
15104     09 14 06 F6 | 	mov	arg02, #9
15108     00 16 06 F6 | 	mov	arg03, #0
1510c     7C 83 B0 FD | 	call	#__system___basic_print_char
15110     FD 2E 02 F6 | 	mov	local09, result1
15114     FD 26 02 F1 | 	add	local05, result1
15118     00 12 06 F6 | 	mov	arg01, #0
1511c     50 D0 B0 FD | 	call	#__system___getiolock_0474
15120     FD 00 68 FC | 	wrlong	#0, result1
15124     00 FA 05 F6 | 	mov	result1, #0
15128     00 30 06 F6 | 	mov	local10, #0
1512c                 | LR__1683
1512c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1512c     1D 22 0E F2 | 	cmp	local03, #29 wz
15130     64 00 90 5D |  if_ne	jmp	#LR__1684
15134     00 12 06 F6 | 	mov	arg01, #0
15138     34 D0 B0 FD | 	call	#__system___getiolock_0474
1513c     FD 12 02 F6 | 	mov	arg01, result1
15140     9C 76 B0 FD | 	call	#__system___lockmem
15144     00 28 06 F6 | 	mov	local06, #0
15148     00 12 06 F6 | 	mov	arg01, #0
1514c     0F 15 02 F6 | 	mov	arg02, local01
15150     00 16 06 F6 | 	mov	arg03, #0
15154     0A 18 06 F6 | 	mov	arg04, #10
15158     0C 84 B0 FD | 	call	#__system___basic_print_unsigned
1515c     FD 2A 02 F6 | 	mov	local07, result1
15160     14 27 02 F6 | 	mov	local05, local06
15164     15 27 02 F1 | 	add	local05, local07
15168     00 2C 06 F6 | 	mov	local08, #0
1516c     00 12 06 F6 | 	mov	arg01, #0
15170     09 14 06 F6 | 	mov	arg02, #9
15174     00 16 06 F6 | 	mov	arg03, #0
15178     10 83 B0 FD | 	call	#__system___basic_print_char
1517c     FD 2E 02 F6 | 	mov	local09, result1
15180     FD 26 02 F1 | 	add	local05, result1
15184     00 12 06 F6 | 	mov	arg01, #0
15188     E4 CF B0 FD | 	call	#__system___getiolock_0474
1518c     FD 00 68 FC | 	wrlong	#0, result1
15190     00 FA 05 F6 | 	mov	result1, #0
15194     00 30 06 F6 | 	mov	local10, #0
15198                 | LR__1684
15198                 | '   if t1.result_type=result_float then print t1.result.fresult,
15198     1E 22 0E F2 | 	cmp	local03, #30 wz
1519c     64 00 90 5D |  if_ne	jmp	#LR__1685
151a0     00 12 06 F6 | 	mov	arg01, #0
151a4     C8 CF B0 FD | 	call	#__system___getiolock_0474
151a8     FD 12 02 F6 | 	mov	arg01, result1
151ac     30 76 B0 FD | 	call	#__system___lockmem
151b0     00 28 06 F6 | 	mov	local06, #0
151b4     00 12 06 F6 | 	mov	arg01, #0
151b8     0F 15 02 F6 | 	mov	arg02, local01
151bc     00 16 06 F6 | 	mov	arg03, #0
151c0     23 18 06 F6 | 	mov	arg04, #35
151c4     AC A7 B0 FD | 	call	#__system___basic_print_float
151c8     FD 2A 02 F6 | 	mov	local07, result1
151cc     14 27 02 F6 | 	mov	local05, local06
151d0     15 27 02 F1 | 	add	local05, local07
151d4     00 2C 06 F6 | 	mov	local08, #0
151d8     00 12 06 F6 | 	mov	arg01, #0
151dc     09 14 06 F6 | 	mov	arg02, #9
151e0     00 16 06 F6 | 	mov	arg03, #0
151e4     A4 82 B0 FD | 	call	#__system___basic_print_char
151e8     FD 2E 02 F6 | 	mov	local09, result1
151ec     FD 26 02 F1 | 	add	local05, result1
151f0     00 12 06 F6 | 	mov	arg01, #0
151f4     78 CF B0 FD | 	call	#__system___getiolock_0474
151f8     FD 00 68 FC | 	wrlong	#0, result1
151fc     00 FA 05 F6 | 	mov	result1, #0
15200     00 30 06 F6 | 	mov	local10, #0
15204                 | LR__1685
15204                 | '   if t1.result_type=result_string then print t1.result.sresult,
15204     1F 22 0E F2 | 	cmp	local03, #31 wz
15208     60 00 90 5D |  if_ne	jmp	#LR__1686
1520c     00 12 06 F6 | 	mov	arg01, #0
15210     5C CF B0 FD | 	call	#__system___getiolock_0474
15214     FD 12 02 F6 | 	mov	arg01, result1
15218     C4 75 B0 FD | 	call	#__system___lockmem
1521c     00 28 06 F6 | 	mov	local06, #0
15220     00 12 06 F6 | 	mov	arg01, #0
15224     0F 15 02 F6 | 	mov	arg02, local01
15228     00 16 06 F6 | 	mov	arg03, #0
1522c     B4 82 B0 FD | 	call	#__system___basic_print_string
15230     FD 2A 02 F6 | 	mov	local07, result1
15234     14 27 02 F6 | 	mov	local05, local06
15238     15 27 02 F1 | 	add	local05, local07
1523c     00 2C 06 F6 | 	mov	local08, #0
15240     00 12 06 F6 | 	mov	arg01, #0
15244     09 14 06 F6 | 	mov	arg02, #9
15248     00 16 06 F6 | 	mov	arg03, #0
1524c     3C 82 B0 FD | 	call	#__system___basic_print_char
15250     FD 2E 02 F6 | 	mov	local09, result1
15254     FD 26 02 F1 | 	add	local05, result1
15258     00 12 06 F6 | 	mov	arg01, #0
1525c     10 CF B0 FD | 	call	#__system___getiolock_0474
15260     FD 00 68 FC | 	wrlong	#0, result1
15264     00 FA 05 F6 | 	mov	result1, #0
15268     00 30 06 F6 | 	mov	local10, #0
1526c                 | LR__1686
1526c                 | LR__1687
1526c                 | ' if r=print_mod_semicolon then 
1526c     22 24 0E F2 | 	cmp	local04, #34 wz
15270     1C 01 90 5D |  if_ne	jmp	#LR__1692
15274                 | '   if t1.result_type=result_int then print t1.result.iresult;
15274     1C 22 0E F2 | 	cmp	local03, #28 wz
15278     50 00 90 5D |  if_ne	jmp	#LR__1688
1527c     00 12 06 F6 | 	mov	arg01, #0
15280     EC CE B0 FD | 	call	#__system___getiolock_0474
15284     FD 12 02 F6 | 	mov	arg01, result1
15288     54 75 B0 FD | 	call	#__system___lockmem
1528c     00 28 06 F6 | 	mov	local06, #0
15290     00 30 06 F6 | 	mov	local10, #0
15294     0A 2C 06 F6 | 	mov	local08, #10
15298     00 12 06 F6 | 	mov	arg01, #0
1529c     0F 15 02 F6 | 	mov	arg02, local01
152a0     00 16 06 F6 | 	mov	arg03, #0
152a4     0A 18 06 F6 | 	mov	arg04, #10
152a8     7C 82 B0 FD | 	call	#__system___basic_print_integer
152ac     FD 2A 02 F6 | 	mov	local07, result1
152b0     14 27 02 F6 | 	mov	local05, local06
152b4     15 27 02 F1 | 	add	local05, local07
152b8     00 12 06 F6 | 	mov	arg01, #0
152bc     B0 CE B0 FD | 	call	#__system___getiolock_0474
152c0     FD 00 68 FC | 	wrlong	#0, result1
152c4     00 FA 05 F6 | 	mov	result1, #0
152c8     00 2E 06 F6 | 	mov	local09, #0
152cc                 | LR__1688
152cc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
152cc     1D 22 0E F2 | 	cmp	local03, #29 wz
152d0     50 00 90 5D |  if_ne	jmp	#LR__1689
152d4     00 12 06 F6 | 	mov	arg01, #0
152d8     94 CE B0 FD | 	call	#__system___getiolock_0474
152dc     FD 12 02 F6 | 	mov	arg01, result1
152e0     FC 74 B0 FD | 	call	#__system___lockmem
152e4     00 28 06 F6 | 	mov	local06, #0
152e8     00 30 06 F6 | 	mov	local10, #0
152ec     0A 2C 06 F6 | 	mov	local08, #10
152f0     00 12 06 F6 | 	mov	arg01, #0
152f4     0F 15 02 F6 | 	mov	arg02, local01
152f8     00 16 06 F6 | 	mov	arg03, #0
152fc     0A 18 06 F6 | 	mov	arg04, #10
15300     64 82 B0 FD | 	call	#__system___basic_print_unsigned
15304     FD 2A 02 F6 | 	mov	local07, result1
15308     14 27 02 F6 | 	mov	local05, local06
1530c     15 27 02 F1 | 	add	local05, local07
15310     00 12 06 F6 | 	mov	arg01, #0
15314     58 CE B0 FD | 	call	#__system___getiolock_0474
15318     FD 00 68 FC | 	wrlong	#0, result1
1531c     00 FA 05 F6 | 	mov	result1, #0
15320     00 2E 06 F6 | 	mov	local09, #0
15324                 | LR__1689
15324                 | '   if t1.result_type=result_float then print t1.result.fresult;
15324     1E 22 0E F2 | 	cmp	local03, #30 wz
15328     30 00 90 5D |  if_ne	jmp	#LR__1690
1532c     00 12 06 F6 | 	mov	arg01, #0
15330     3C CE B0 FD | 	call	#__system___getiolock_0474
15334     FD 12 02 F6 | 	mov	arg01, result1
15338     A4 74 B0 FD | 	call	#__system___lockmem
1533c     00 12 06 F6 | 	mov	arg01, #0
15340     0F 15 02 F6 | 	mov	arg02, local01
15344     00 16 06 F6 | 	mov	arg03, #0
15348     23 18 06 F6 | 	mov	arg04, #35
1534c     24 A6 B0 FD | 	call	#__system___basic_print_float
15350     00 12 06 F6 | 	mov	arg01, #0
15354     18 CE B0 FD | 	call	#__system___getiolock_0474
15358     FD 00 68 FC | 	wrlong	#0, result1
1535c                 | LR__1690
1535c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1535c     1F 22 0E F2 | 	cmp	local03, #31 wz
15360     2C 00 90 5D |  if_ne	jmp	#LR__1691
15364     00 12 06 F6 | 	mov	arg01, #0
15368     04 CE B0 FD | 	call	#__system___getiolock_0474
1536c     FD 12 02 F6 | 	mov	arg01, result1
15370     6C 74 B0 FD | 	call	#__system___lockmem
15374     00 12 06 F6 | 	mov	arg01, #0
15378     0F 15 02 F6 | 	mov	arg02, local01
1537c     00 16 06 F6 | 	mov	arg03, #0
15380     60 81 B0 FD | 	call	#__system___basic_print_string
15384     00 12 06 F6 | 	mov	arg01, #0
15388     E4 CD B0 FD | 	call	#__system___getiolock_0474
1538c     FD 00 68 FC | 	wrlong	#0, result1
15390                 | LR__1691
15390                 | LR__1692
15390                 | ' if r=0 then 
15390     00 24 0E F2 | 	cmp	local04, #0 wz
15394     1C 01 90 5D |  if_ne	jmp	#LR__1697
15398                 | '   if t1.result_type=result_int then print t1.result.iresult
15398     1C 22 0E F2 | 	cmp	local03, #28 wz
1539c     40 00 90 5D |  if_ne	jmp	#LR__1693
153a0     00 12 06 F6 | 	mov	arg01, #0
153a4     C8 CD B0 FD | 	call	#__system___getiolock_0474
153a8     FD 12 02 F6 | 	mov	arg01, result1
153ac     30 74 B0 FD | 	call	#__system___lockmem
153b0     00 12 06 F6 | 	mov	arg01, #0
153b4     0F 15 02 F6 | 	mov	arg02, local01
153b8     00 16 06 F6 | 	mov	arg03, #0
153bc     0A 18 06 F6 | 	mov	arg04, #10
153c0     64 81 B0 FD | 	call	#__system___basic_print_integer
153c4     00 12 06 F6 | 	mov	arg01, #0
153c8     0A 14 06 F6 | 	mov	arg02, #10
153cc     00 16 06 F6 | 	mov	arg03, #0
153d0     B8 80 B0 FD | 	call	#__system___basic_print_char
153d4     00 12 06 F6 | 	mov	arg01, #0
153d8     94 CD B0 FD | 	call	#__system___getiolock_0474
153dc     FD 00 68 FC | 	wrlong	#0, result1
153e0                 | LR__1693
153e0                 | '   if t1.result_type=result_uint then print t1.result.uresult
153e0     1D 22 0E F2 | 	cmp	local03, #29 wz
153e4     40 00 90 5D |  if_ne	jmp	#LR__1694
153e8     00 12 06 F6 | 	mov	arg01, #0
153ec     80 CD B0 FD | 	call	#__system___getiolock_0474
153f0     FD 12 02 F6 | 	mov	arg01, result1
153f4     E8 73 B0 FD | 	call	#__system___lockmem
153f8     00 12 06 F6 | 	mov	arg01, #0
153fc     0F 15 02 F6 | 	mov	arg02, local01
15400     00 16 06 F6 | 	mov	arg03, #0
15404     0A 18 06 F6 | 	mov	arg04, #10
15408     5C 81 B0 FD | 	call	#__system___basic_print_unsigned
1540c     00 12 06 F6 | 	mov	arg01, #0
15410     0A 14 06 F6 | 	mov	arg02, #10
15414     00 16 06 F6 | 	mov	arg03, #0
15418     70 80 B0 FD | 	call	#__system___basic_print_char
1541c     00 12 06 F6 | 	mov	arg01, #0
15420     4C CD B0 FD | 	call	#__system___getiolock_0474
15424     FD 00 68 FC | 	wrlong	#0, result1
15428                 | LR__1694
15428                 | '   if t1.result_type=result_float then print t1.result.fresult
15428     1E 22 0E F2 | 	cmp	local03, #30 wz
1542c     40 00 90 5D |  if_ne	jmp	#LR__1695
15430     00 12 06 F6 | 	mov	arg01, #0
15434     38 CD B0 FD | 	call	#__system___getiolock_0474
15438     FD 12 02 F6 | 	mov	arg01, result1
1543c     A0 73 B0 FD | 	call	#__system___lockmem
15440     00 12 06 F6 | 	mov	arg01, #0
15444     0F 15 02 F6 | 	mov	arg02, local01
15448     00 16 06 F6 | 	mov	arg03, #0
1544c     23 18 06 F6 | 	mov	arg04, #35
15450     20 A5 B0 FD | 	call	#__system___basic_print_float
15454     00 12 06 F6 | 	mov	arg01, #0
15458     0A 14 06 F6 | 	mov	arg02, #10
1545c     00 16 06 F6 | 	mov	arg03, #0
15460     28 80 B0 FD | 	call	#__system___basic_print_char
15464     00 12 06 F6 | 	mov	arg01, #0
15468     04 CD B0 FD | 	call	#__system___getiolock_0474
1546c     FD 00 68 FC | 	wrlong	#0, result1
15470                 | LR__1695
15470                 | '   if t1.result_type=result_string then print t1.result.sresult
15470     1F 22 0E F2 | 	cmp	local03, #31 wz
15474     3C 00 90 5D |  if_ne	jmp	#LR__1696
15478     00 12 06 F6 | 	mov	arg01, #0
1547c     F0 CC B0 FD | 	call	#__system___getiolock_0474
15480     FD 12 02 F6 | 	mov	arg01, result1
15484     58 73 B0 FD | 	call	#__system___lockmem
15488     00 12 06 F6 | 	mov	arg01, #0
1548c     0F 15 02 F6 | 	mov	arg02, local01
15490     00 16 06 F6 | 	mov	arg03, #0
15494     4C 80 B0 FD | 	call	#__system___basic_print_string
15498     00 12 06 F6 | 	mov	arg01, #0
1549c     0A 14 06 F6 | 	mov	arg02, #10
154a0     00 16 06 F6 | 	mov	arg03, #0
154a4     E4 7F B0 FD | 	call	#__system___basic_print_char
154a8     00 12 06 F6 | 	mov	arg01, #0
154ac     C0 CC B0 FD | 	call	#__system___getiolock_0474
154b0     FD 00 68 FC | 	wrlong	#0, result1
154b4                 | LR__1696
154b4                 | LR__1697
154b4                 | ' if r=print_mod_empty then print
154b4     20 24 0E F2 | 	cmp	local04, #32 wz
154b8     2C 00 90 5D |  if_ne	jmp	#LR__1698
154bc     00 12 06 F6 | 	mov	arg01, #0
154c0     AC CC B0 FD | 	call	#__system___getiolock_0474
154c4     FD 12 02 F6 | 	mov	arg01, result1
154c8     14 73 B0 FD | 	call	#__system___lockmem
154cc     00 12 06 F6 | 	mov	arg01, #0
154d0     0A 14 06 F6 | 	mov	arg02, #10
154d4     00 16 06 F6 | 	mov	arg03, #0
154d8     B0 7F B0 FD | 	call	#__system___basic_print_char
154dc     00 12 06 F6 | 	mov	arg01, #0
154e0     8C CC B0 FD | 	call	#__system___getiolock_0474
154e4     FD 00 68 FC | 	wrlong	#0, result1
154e8                 | LR__1698
154e8                 | LR__1699
154e8     A7 F0 03 F6 | 	mov	ptra, fp
154ec     B2 00 A0 FD | 	call	#popregs_
154f0                 | _do_print_ret
154f0     2D 00 64 FD | 	ret
154f4                 | 
154f4                 | ' 
154f4                 | ' 
154f4                 | ' sub do_paper
154f4                 | _do_paper
154f4     03 4A 05 F6 | 	mov	COUNT_, #3
154f8     A8 00 A0 FD | 	call	#pushregs_
154fc     E0 4C BF FD | 	call	#_pop
15500     FD 1E 02 F6 | 	mov	local01, result1
15504     FE 20 02 F6 | 	mov	local02, result2
15508     FF 22 02 F6 | 	mov	local03, result3
1550c                 | ' t1=pop() 
1550c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1550c     1E 22 0E F2 | 	cmp	local03, #30 wz
15510     10 00 90 5D |  if_ne	jmp	#LR__1700
15514     0F 13 02 F6 | 	mov	arg01, local01
15518     00 14 06 F6 | 	mov	arg02, #0
1551c     04 A3 B0 FD | 	call	#__system___float_tointeger
15520     FD 1E 02 F6 | 	mov	local01, result1
15524                 | LR__1700
15524                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15524     1F 22 0E F2 | 	cmp	local03, #31 wz
15528     18 00 90 5D |  if_ne	jmp	#LR__1701
1552c     0F 13 02 F6 | 	mov	arg01, local01
15530     10 A6 B0 FD | 	call	#__system____builtin_atof
15534     FD 12 02 F6 | 	mov	arg01, result1
15538     00 14 06 F6 | 	mov	arg02, #0
1553c     E4 A2 B0 FD | 	call	#__system___float_tointeger
15540     FD 1E 02 F6 | 	mov	local01, result1
15544                 | LR__1701
15544     57 00 00 FF 
15548     1C E4 05 F1 | 	add	objptr, ##44572
1554c     F2 1E 62 FC | 	wrlong	local01, objptr
15550     04 E4 05 F1 | 	add	objptr, #4
15554     F2 12 02 FB | 	rdlong	arg01, objptr
15558                 | ' 
15558                 | ' write_color:=ff
15558     56 00 00 FF 
1555c     E3 E5 85 F1 | 	sub	objptr, ##44515
15560     F2 12 62 FC | 	wrlong	arg01, objptr
15564                 | ' write_background:=bb
15564     04 E4 05 F1 | 	add	objptr, #4
15568     F2 1E 62 FC | 	wrlong	local01, objptr
1556c     41 E4 85 F1 | 	sub	objptr, #65
15570     A7 F0 03 F6 | 	mov	ptra, fp
15574     B2 00 A0 FD | 	call	#popregs_
15578                 | _do_paper_ret
15578     2D 00 64 FD | 	ret
1557c                 | 
1557c                 | ' 
1557c                 | ' sub do_ink
1557c                 | _do_ink
1557c     03 4A 05 F6 | 	mov	COUNT_, #3
15580     A8 00 A0 FD | 	call	#pushregs_
15584     58 4C BF FD | 	call	#_pop
15588     FD 1E 02 F6 | 	mov	local01, result1
1558c     FE 20 02 F6 | 	mov	local02, result2
15590     FF 22 02 F6 | 	mov	local03, result3
15594                 | ' t1=pop() 
15594                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15594     1E 22 0E F2 | 	cmp	local03, #30 wz
15598     10 00 90 5D |  if_ne	jmp	#LR__1710
1559c     0F 13 02 F6 | 	mov	arg01, local01
155a0     00 14 06 F6 | 	mov	arg02, #0
155a4     7C A2 B0 FD | 	call	#__system___float_tointeger
155a8     FD 1E 02 F6 | 	mov	local01, result1
155ac                 | LR__1710
155ac                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
155ac     1F 22 0E F2 | 	cmp	local03, #31 wz
155b0     18 00 90 5D |  if_ne	jmp	#LR__1711
155b4     0F 13 02 F6 | 	mov	arg01, local01
155b8     88 A5 B0 FD | 	call	#__system____builtin_atof
155bc     FD 12 02 F6 | 	mov	arg01, result1
155c0     00 14 06 F6 | 	mov	arg02, #0
155c4     5C A2 B0 FD | 	call	#__system___float_tointeger
155c8     FD 1E 02 F6 | 	mov	local01, result1
155cc                 | LR__1711
155cc     57 00 00 FF 
155d0     20 E4 05 F1 | 	add	objptr, ##44576
155d4     F2 1E 62 FC | 	wrlong	local01, objptr
155d8     04 E4 85 F1 | 	sub	objptr, #4
155dc     F2 14 02 FB | 	rdlong	arg02, objptr
155e0                 | ' 
155e0                 | ' write_color:=ff
155e0     56 00 00 FF 
155e4     DF E5 85 F1 | 	sub	objptr, ##44511
155e8     F2 1E 62 FC | 	wrlong	local01, objptr
155ec                 | ' write_background:=bb
155ec     04 E4 05 F1 | 	add	objptr, #4
155f0     F2 14 62 FC | 	wrlong	arg02, objptr
155f4     56 00 00 FF 
155f8     DF E5 05 F1 | 	add	objptr, ##44511
155fc     F2 12 02 FB | 	rdlong	arg01, objptr
15600     57 00 00 FF 
15604     20 E4 85 F1 | 	sub	objptr, ##44576
15608     4C 4D B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1560c     A7 F0 03 F6 | 	mov	ptra, fp
15610     B2 00 A0 FD | 	call	#popregs_
15614                 | _do_ink_ret
15614     2D 00 64 FD | 	ret
15618                 | 
15618                 | ' 
15618                 | ' 
15618                 | ' sub do_font
15618                 | _do_font
15618     03 4A 05 F6 | 	mov	COUNT_, #3
1561c     A8 00 A0 FD | 	call	#pushregs_
15620     BC 4B BF FD | 	call	#_pop
15624     FD 1E 02 F6 | 	mov	local01, result1
15628     FE 20 02 F6 | 	mov	local02, result2
1562c     FF 22 02 F6 | 	mov	local03, result3
15630                 | ' t1=pop() 
15630                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15630     1E 22 0E F2 | 	cmp	local03, #30 wz
15634     10 00 90 5D |  if_ne	jmp	#LR__1720
15638     0F 13 02 F6 | 	mov	arg01, local01
1563c     00 14 06 F6 | 	mov	arg02, #0
15640     E0 A1 B0 FD | 	call	#__system___float_tointeger
15644     FD 1E 02 F6 | 	mov	local01, result1
15648                 | LR__1720
15648                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15648     1F 22 0E F2 | 	cmp	local03, #31 wz
1564c     18 00 90 5D |  if_ne	jmp	#LR__1721
15650     0F 13 02 F6 | 	mov	arg01, local01
15654     EC A4 B0 FD | 	call	#__system____builtin_atof
15658     FD 12 02 F6 | 	mov	arg01, result1
1565c     00 14 06 F6 | 	mov	arg02, #0
15660     C0 A1 B0 FD | 	call	#__system___float_tointeger
15664     FD 1E 02 F6 | 	mov	local01, result1
15668                 | LR__1721
15668     57 00 00 FF 
1566c     24 E4 05 F1 | 	add	objptr, ##44580
15670     F2 1E 62 FC | 	wrlong	local01, objptr
15674     57 00 00 FF 
15678     24 E4 85 F1 | 	sub	objptr, ##44580
1567c     02 1E 66 F0 | 	shl	local01, #2
15680     0F 13 02 F6 | 	mov	arg01, local01
15684     4C 5C B0 FD | 	call	#_hg010b_spin2_setfontfamily
15688     A7 F0 03 F6 | 	mov	ptra, fp
1568c     B2 00 A0 FD | 	call	#popregs_
15690                 | _do_font_ret
15690     2D 00 64 FD | 	ret
15694                 | 
15694                 | ' 
15694                 | ' sub do_mode
15694                 | _do_mode
15694     04 4A 05 F6 | 	mov	COUNT_, #4
15698     A8 00 A0 FD | 	call	#pushregs_
1569c     40 4B BF FD | 	call	#_pop
156a0     FD 1E 02 F6 | 	mov	local01, result1
156a4     FE 20 02 F6 | 	mov	local02, result2
156a8     FF 22 02 F6 | 	mov	local03, result3
156ac                 | ' t1=pop() 
156ac                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
156ac     1E 22 0E F2 | 	cmp	local03, #30 wz
156b0     10 00 90 5D |  if_ne	jmp	#LR__1730
156b4     0F 13 02 F6 | 	mov	arg01, local01
156b8     00 14 06 F6 | 	mov	arg02, #0
156bc     64 A1 B0 FD | 	call	#__system___float_tointeger
156c0     FD 1E 02 F6 | 	mov	local01, result1
156c4                 | LR__1730
156c4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
156c4     1F 22 0E F2 | 	cmp	local03, #31 wz
156c8     18 00 90 5D |  if_ne	jmp	#LR__1731
156cc     0F 13 02 F6 | 	mov	arg01, local01
156d0     70 A4 B0 FD | 	call	#__system____builtin_atof
156d4     FD 12 02 F6 | 	mov	arg01, result1
156d8     00 14 06 F6 | 	mov	arg02, #0
156dc     44 A1 B0 FD | 	call	#__system___float_tointeger
156e0     FD 1E 02 F6 | 	mov	local01, result1
156e4                 | LR__1731
156e4                 | ' select case t1.result.iresult
156e4     0F 25 02 F6 | 	mov	local04, local01
156e8     05 24 26 F3 | 	fle	local04, #5
156ec     30 24 62 FD | 	jmprel	local04
156f0                 | LR__1732
156f0     14 00 90 FD | 	jmp	#LR__1733
156f4     A8 00 90 FD | 	jmp	#LR__1734
156f8     10 01 90 FD | 	jmp	#LR__1735
156fc     78 01 90 FD | 	jmp	#LR__1736
15700     E0 01 90 FD | 	jmp	#LR__1737
15704     70 02 90 FD | 	jmp	#LR__1738
15708                 | LR__1733
15708     57 00 00 FF 
1570c     24 E4 05 F1 | 	add	objptr, ##44580
15710     F2 02 68 FC | 	wrlong	#1, objptr
15714     04 E4 85 F1 | 	sub	objptr, #4
15718     F2 34 69 FC | 	wrlong	#154, objptr
1571c     22 00 00 FF 
15720     A4 E5 05 F1 | 	add	objptr, ##17828
15724     F2 02 68 FC | 	wrlong	#1, objptr
15728     22 00 00 FF 
1572c     A8 E5 85 F1 | 	sub	objptr, ##17832
15730     F2 26 69 FC | 	wrlong	#147, objptr
15734     57 00 00 FF 
15738     1C E4 85 F1 | 	sub	objptr, ##44572
1573c     04 12 06 F6 | 	mov	arg01, #4
15740     90 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
15744     57 00 00 FF 
15748     20 E4 05 F1 | 	add	objptr, ##44576
1574c     F2 12 02 FB | 	rdlong	arg01, objptr
15750     04 E4 85 F1 | 	sub	objptr, #4
15754     F2 14 02 FB | 	rdlong	arg02, objptr
15758                 | ' 
15758                 | ' write_color:=ff
15758     56 00 00 FF 
1575c     DF E5 85 F1 | 	sub	objptr, ##44511
15760     F2 12 62 FC | 	wrlong	arg01, objptr
15764                 | ' write_background:=bb
15764     04 E4 05 F1 | 	add	objptr, #4
15768     F2 14 62 FC | 	wrlong	arg02, objptr
1576c     01 00 00 FF 
15770     00 EA 05 F1 | 	add	ptr__dat__, ##512
15774     7B 00 00 FF 
15778     27 E4 05 F1 | 	add	objptr, ##63015
1577c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15780     04 E4 85 F1 | 	sub	objptr, #4
15784     03 00 80 FF 
15788     F2 30 69 FC | 	wrlong	##1688, objptr
1578c     7B 00 00 FF 
15790     64 E4 85 F1 | 	sub	objptr, ##63076
15794     01 00 00 FF 
15798     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1579c     D8 01 90 FD | 	jmp	#LR__1738
157a0                 | LR__1734
157a0     57 00 00 FF 
157a4     24 E4 05 F1 | 	add	objptr, ##44580
157a8     F2 00 68 FC | 	wrlong	#0, objptr
157ac     04 E4 85 F1 | 	sub	objptr, #4
157b0     F2 2E 68 FC | 	wrlong	#23, objptr
157b4     22 00 00 FF 
157b8     A4 E5 05 F1 | 	add	objptr, ##17828
157bc     F2 00 68 FC | 	wrlong	#0, objptr
157c0     22 00 00 FF 
157c4     A8 E5 85 F1 | 	sub	objptr, ##17832
157c8     F2 00 68 FC | 	wrlong	#0, objptr
157cc     57 00 00 FF 
157d0     1C E4 85 F1 | 	sub	objptr, ##44572
157d4     00 12 06 F6 | 	mov	arg01, #0
157d8     F8 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
157dc     57 00 00 FF 
157e0     20 E4 05 F1 | 	add	objptr, ##44576
157e4     F2 12 02 FB | 	rdlong	arg01, objptr
157e8     04 E4 85 F1 | 	sub	objptr, #4
157ec     F2 14 02 FB | 	rdlong	arg02, objptr
157f0                 | ' 
157f0                 | ' write_color:=ff
157f0     56 00 00 FF 
157f4     DF E5 85 F1 | 	sub	objptr, ##44511
157f8     F2 12 62 FC | 	wrlong	arg01, objptr
157fc                 | ' write_background:=bb
157fc     04 E4 05 F1 | 	add	objptr, #4
15800     F2 14 62 FC | 	wrlong	arg02, objptr
15804     41 E4 85 F1 | 	sub	objptr, #65
15808     6C 01 90 FD | 	jmp	#LR__1738
1580c                 | LR__1735
1580c     57 00 00 FF 
15810     24 E4 05 F1 | 	add	objptr, ##44580
15814     F2 00 68 FC | 	wrlong	#0, objptr
15818     04 E4 85 F1 | 	sub	objptr, #4
1581c     F2 6A 69 FC | 	wrlong	#181, objptr
15820     22 00 00 FF 
15824     A4 E5 05 F1 | 	add	objptr, ##17828
15828     F2 00 68 FC | 	wrlong	#0, objptr
1582c     22 00 00 FF 
15830     A8 E5 85 F1 | 	sub	objptr, ##17832
15834     F2 00 68 FC | 	wrlong	#0, objptr
15838     57 00 00 FF 
1583c     1C E4 85 F1 | 	sub	objptr, ##44572
15840     00 12 06 F6 | 	mov	arg01, #0
15844     8C 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
15848     57 00 00 FF 
1584c     20 E4 05 F1 | 	add	objptr, ##44576
15850     F2 12 02 FB | 	rdlong	arg01, objptr
15854     04 E4 85 F1 | 	sub	objptr, #4
15858     F2 14 02 FB | 	rdlong	arg02, objptr
1585c                 | ' 
1585c                 | ' write_color:=ff
1585c     56 00 00 FF 
15860     DF E5 85 F1 | 	sub	objptr, ##44511
15864     F2 12 62 FC | 	wrlong	arg01, objptr
15868                 | ' write_background:=bb
15868     04 E4 05 F1 | 	add	objptr, #4
1586c     F2 14 62 FC | 	wrlong	arg02, objptr
15870     41 E4 85 F1 | 	sub	objptr, #65
15874     00 01 90 FD | 	jmp	#LR__1738
15878                 | LR__1736
15878     57 00 00 FF 
1587c     24 E4 05 F1 | 	add	objptr, ##44580
15880     F2 00 68 FC | 	wrlong	#0, objptr
15884     04 E4 85 F1 | 	sub	objptr, #4
15888     F2 1E 68 FC | 	wrlong	#15, objptr
1588c     22 00 00 FF 
15890     A4 E5 05 F1 | 	add	objptr, ##17828
15894     F2 00 68 FC | 	wrlong	#0, objptr
15898     22 00 00 FF 
1589c     A8 E5 85 F1 | 	sub	objptr, ##17832
158a0     F2 00 68 FC | 	wrlong	#0, objptr
158a4     57 00 00 FF 
158a8     1C E4 85 F1 | 	sub	objptr, ##44572
158ac     00 12 06 F6 | 	mov	arg01, #0
158b0     20 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
158b4     57 00 00 FF 
158b8     20 E4 05 F1 | 	add	objptr, ##44576
158bc     F2 12 02 FB | 	rdlong	arg01, objptr
158c0     04 E4 85 F1 | 	sub	objptr, #4
158c4     F2 14 02 FB | 	rdlong	arg02, objptr
158c8                 | ' 
158c8                 | ' write_color:=ff
158c8     56 00 00 FF 
158cc     DF E5 85 F1 | 	sub	objptr, ##44511
158d0     F2 12 62 FC | 	wrlong	arg01, objptr
158d4                 | ' write_background:=bb
158d4     04 E4 05 F1 | 	add	objptr, #4
158d8     F2 14 62 FC | 	wrlong	arg02, objptr
158dc     41 E4 85 F1 | 	sub	objptr, #65
158e0     94 00 90 FD | 	jmp	#LR__1738
158e4                 | LR__1737
158e4     57 00 00 FF 
158e8     24 E4 05 F1 | 	add	objptr, ##44580
158ec     F2 02 68 FC | 	wrlong	#1, objptr
158f0     04 E4 85 F1 | 	sub	objptr, #4
158f4     F2 02 68 FC | 	wrlong	#1, objptr
158f8     22 00 00 FF 
158fc     A4 E5 05 F1 | 	add	objptr, ##17828
15900     F2 02 68 FC | 	wrlong	#1, objptr
15904     22 00 00 FF 
15908     A8 E5 85 F1 | 	sub	objptr, ##17832
1590c     F2 1C 68 FC | 	wrlong	#14, objptr
15910     57 00 00 FF 
15914     1C E4 85 F1 | 	sub	objptr, ##44572
15918     04 12 06 F6 | 	mov	arg01, #4
1591c     B4 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15920     57 00 00 FF 
15924     20 E4 05 F1 | 	add	objptr, ##44576
15928     F2 12 02 FB | 	rdlong	arg01, objptr
1592c     04 E4 85 F1 | 	sub	objptr, #4
15930     F2 14 02 FB | 	rdlong	arg02, objptr
15934                 | ' 
15934                 | ' write_color:=ff
15934     56 00 00 FF 
15938     DF E5 85 F1 | 	sub	objptr, ##44511
1593c     F2 12 62 FC | 	wrlong	arg01, objptr
15940                 | ' write_background:=bb
15940     04 E4 05 F1 | 	add	objptr, #4
15944     F2 14 62 FC | 	wrlong	arg02, objptr
15948     07 00 00 FF 
1594c     8A EB 05 F1 | 	add	ptr__dat__, ##3978
15950     7B 00 00 FF 
15954     27 E4 05 F1 | 	add	objptr, ##63015
15958     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1595c     04 E4 85 F1 | 	sub	objptr, #4
15960     03 00 80 FF 
15964     F2 30 69 FC | 	wrlong	##1688, objptr
15968     7B 00 00 FF 
1596c     64 E4 85 F1 | 	sub	objptr, ##63076
15970     07 00 00 FF 
15974     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
15978                 | LR__1738
15978     7B 00 00 FF 
1597c     60 E4 05 F1 | 	add	objptr, ##63072
15980     F2 1E 62 FC | 	wrlong	local01, objptr
15984     24 00 00 FF 
15988     40 E4 85 F1 | 	sub	objptr, ##18496
1598c     F2 12 02 FB | 	rdlong	arg01, objptr
15990     04 E4 85 F1 | 	sub	objptr, #4
15994     F2 14 02 FB | 	rdlong	arg02, objptr
15998     57 00 00 FF 
1599c     1C E4 85 F1 | 	sub	objptr, ##44572
159a0     44 5A B0 FD | 	call	#_hg010b_spin2_cls
159a4     62 01 00 FF 
159a8     53 12 06 F6 | 	mov	arg01, ##@LR__4965
159ac                 | ' 
159ac                 | ' write(text)
159ac     F4 5C B0 FD | 	call	#_hg010b_spin2_write
159b0                 | ' crlf
159b0     50 5E B0 FD | 	call	#_hg010b_spin2_crlf
159b4     18 00 00 FF 
159b8     4C EB 05 F1 | 	add	ptr__dat__, ##12620
159bc     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
159c0     18 00 00 FF 
159c4     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
159c8                 | ' 
159c8                 | ' write(text)
159c8     D8 5C B0 FD | 	call	#_hg010b_spin2_write
159cc                 | ' crlf
159cc     34 5E B0 FD | 	call	#_hg010b_spin2_crlf
159d0     79 00 00 FF 
159d4     C0 E5 05 F1 | 	add	objptr, ##62400
159d8     F2 12 02 FB | 	rdlong	arg01, objptr
159dc     79 00 00 FF 
159e0     C0 E5 85 F1 | 	sub	objptr, ##62400
159e4                 | ' 
159e4                 | ' write(text)
159e4     BC 5C B0 FD | 	call	#_hg010b_spin2_write
159e8                 | ' crlf
159e8     18 5E B0 FD | 	call	#_hg010b_spin2_crlf
159ec     A7 F0 03 F6 | 	mov	ptra, fp
159f0     B2 00 A0 FD | 	call	#popregs_
159f4                 | _do_mode_ret
159f4     2D 00 64 FD | 	ret
159f8                 | 
159f8                 | ' 
159f8                 | ' sub do_setwave
159f8                 | _do_setwave
159f8     02 4A 05 F6 | 	mov	COUNT_, #2
159fc     A8 00 A0 FD | 	call	#pushregs_
15a00     18 F0 07 F1 | 	add	ptra, #24
15a04     D8 47 BF FD | 	call	#_pop
15a08     FD 12 02 F6 | 	mov	arg01, result1
15a0c     FE 1E 02 F6 | 	mov	local01, result2
15a10     FF 20 02 F6 | 	mov	local02, result3
15a14     A7 12 62 FC | 	wrlong	arg01, fp
15a18     04 4E 05 F1 | 	add	fp, #4
15a1c     A7 1E 62 FC | 	wrlong	local01, fp
15a20     04 4E 05 F1 | 	add	fp, #4
15a24     A7 20 62 FC | 	wrlong	local02, fp
15a28     08 4E 85 F1 | 	sub	fp, #8
15a2c     B0 47 BF FD | 	call	#_pop
15a30     FD 20 02 F6 | 	mov	local02, result1
15a34     0C 4E 05 F1 | 	add	fp, #12
15a38     A7 20 62 FC | 	wrlong	local02, fp
15a3c     04 4E 05 F1 | 	add	fp, #4
15a40     A7 FC 61 FC | 	wrlong	result2, fp
15a44     04 4E 05 F1 | 	add	fp, #4
15a48     A7 FE 61 FC | 	wrlong	result3, fp
15a4c     08 4E 85 F1 | 	sub	fp, #8
15a50     A7 12 02 F6 | 	mov	arg01, fp
15a54     0C 4E 85 F1 | 	sub	fp, #12
15a58     C0 D3 BF FD | 	call	#_converttoint
15a5c     FD 20 02 F6 | 	mov	local02, result1
15a60     10 1F 02 F6 | 	mov	local01, local02
15a64     01 1E 66 F0 | 	shl	local01, #1
15a68     10 1F 02 F1 | 	add	local01, local02
15a6c     03 1E 66 F0 | 	shl	local01, #3
15a70     34 00 00 FF 
15a74     2C E5 05 F1 | 	add	objptr, ##26924
15a78     F2 1E 02 F1 | 	add	local01, objptr
15a7c     A7 12 02 F6 | 	mov	arg01, fp
15a80     34 00 00 FF 
15a84     2C E5 85 F1 | 	sub	objptr, ##26924
15a88     90 D3 BF FD | 	call	#_converttoint
15a8c     04 1E 06 F1 | 	add	local01, #4
15a90     0F FB 41 FC | 	wrbyte	result1, local01
15a94     A7 F0 03 F6 | 	mov	ptra, fp
15a98     B2 00 A0 FD | 	call	#popregs_
15a9c                 | _do_setwave_ret
15a9c     2D 00 64 FD | 	ret
15aa0                 | 
15aa0                 | ' 
15aa0                 | ' sub do_setsustain
15aa0                 | _do_setsustain
15aa0     02 4A 05 F6 | 	mov	COUNT_, #2
15aa4     A8 00 A0 FD | 	call	#pushregs_
15aa8     18 F0 07 F1 | 	add	ptra, #24
15aac     30 47 BF FD | 	call	#_pop
15ab0     FD 12 02 F6 | 	mov	arg01, result1
15ab4     FE 1E 02 F6 | 	mov	local01, result2
15ab8     FF 20 02 F6 | 	mov	local02, result3
15abc     A7 12 62 FC | 	wrlong	arg01, fp
15ac0     04 4E 05 F1 | 	add	fp, #4
15ac4     A7 1E 62 FC | 	wrlong	local01, fp
15ac8     04 4E 05 F1 | 	add	fp, #4
15acc     A7 20 62 FC | 	wrlong	local02, fp
15ad0     08 4E 85 F1 | 	sub	fp, #8
15ad4     08 47 BF FD | 	call	#_pop
15ad8     FD 20 02 F6 | 	mov	local02, result1
15adc     0C 4E 05 F1 | 	add	fp, #12
15ae0     A7 20 62 FC | 	wrlong	local02, fp
15ae4     04 4E 05 F1 | 	add	fp, #4
15ae8     A7 FC 61 FC | 	wrlong	result2, fp
15aec     04 4E 05 F1 | 	add	fp, #4
15af0     A7 FE 61 FC | 	wrlong	result3, fp
15af4     08 4E 85 F1 | 	sub	fp, #8
15af8     A7 12 02 F6 | 	mov	arg01, fp
15afc     0C 4E 85 F1 | 	sub	fp, #12
15b00     18 D3 BF FD | 	call	#_converttoint
15b04     FD 20 02 F6 | 	mov	local02, result1
15b08     10 1F 02 F6 | 	mov	local01, local02
15b0c     01 1E 66 F0 | 	shl	local01, #1
15b10     10 1F 02 F1 | 	add	local01, local02
15b14     03 1E 66 F0 | 	shl	local01, #3
15b18     34 00 00 FF 
15b1c     2C E5 05 F1 | 	add	objptr, ##26924
15b20     F2 1E 02 F1 | 	add	local01, objptr
15b24     A7 12 02 F6 | 	mov	arg01, fp
15b28     34 00 00 FF 
15b2c     2C E5 85 F1 | 	sub	objptr, ##26924
15b30     E8 D2 BF FD | 	call	#_converttoint
15b34     14 1E 06 F1 | 	add	local01, #20
15b38     0F FB 51 FC | 	wrword	result1, local01
15b3c     A7 F0 03 F6 | 	mov	ptra, fp
15b40     B2 00 A0 FD | 	call	#popregs_
15b44                 | _do_setsustain_ret
15b44     2D 00 64 FD | 	ret
15b48                 | 
15b48                 | ' 
15b48                 | ' sub do_setenv
15b48                 | _do_setenv
15b48     02 4A 05 F6 | 	mov	COUNT_, #2
15b4c     A8 00 A0 FD | 	call	#pushregs_
15b50     18 F0 07 F1 | 	add	ptra, #24
15b54     88 46 BF FD | 	call	#_pop
15b58     FD 12 02 F6 | 	mov	arg01, result1
15b5c     FE 1E 02 F6 | 	mov	local01, result2
15b60     FF 20 02 F6 | 	mov	local02, result3
15b64     A7 12 62 FC | 	wrlong	arg01, fp
15b68     04 4E 05 F1 | 	add	fp, #4
15b6c     A7 1E 62 FC | 	wrlong	local01, fp
15b70     04 4E 05 F1 | 	add	fp, #4
15b74     A7 20 62 FC | 	wrlong	local02, fp
15b78     08 4E 85 F1 | 	sub	fp, #8
15b7c     60 46 BF FD | 	call	#_pop
15b80     FD 20 02 F6 | 	mov	local02, result1
15b84     0C 4E 05 F1 | 	add	fp, #12
15b88     A7 20 62 FC | 	wrlong	local02, fp
15b8c     04 4E 05 F1 | 	add	fp, #4
15b90     A7 FC 61 FC | 	wrlong	result2, fp
15b94     04 4E 05 F1 | 	add	fp, #4
15b98     A7 FE 61 FC | 	wrlong	result3, fp
15b9c     08 4E 85 F1 | 	sub	fp, #8
15ba0     A7 12 02 F6 | 	mov	arg01, fp
15ba4     0C 4E 85 F1 | 	sub	fp, #12
15ba8     70 D2 BF FD | 	call	#_converttoint
15bac     FD 20 02 F6 | 	mov	local02, result1
15bb0     10 1F 02 F6 | 	mov	local01, local02
15bb4     01 1E 66 F0 | 	shl	local01, #1
15bb8     10 1F 02 F1 | 	add	local01, local02
15bbc     03 1E 66 F0 | 	shl	local01, #3
15bc0     34 00 00 FF 
15bc4     2C E5 05 F1 | 	add	objptr, ##26924
15bc8     F2 1E 02 F1 | 	add	local01, objptr
15bcc     A7 12 02 F6 | 	mov	arg01, fp
15bd0     34 00 00 FF 
15bd4     2C E5 85 F1 | 	sub	objptr, ##26924
15bd8     40 D2 BF FD | 	call	#_converttoint
15bdc     05 1E 06 F1 | 	add	local01, #5
15be0     0F FB 41 FC | 	wrbyte	result1, local01
15be4     A7 F0 03 F6 | 	mov	ptra, fp
15be8     B2 00 A0 FD | 	call	#popregs_
15bec                 | _do_setenv_ret
15bec     2D 00 64 FD | 	ret
15bf0                 | 
15bf0                 | ' 
15bf0                 | ' sub do_setdelay
15bf0                 | _do_setdelay
15bf0     02 4A 05 F6 | 	mov	COUNT_, #2
15bf4     A8 00 A0 FD | 	call	#pushregs_
15bf8     18 F0 07 F1 | 	add	ptra, #24
15bfc     E0 45 BF FD | 	call	#_pop
15c00     FD 12 02 F6 | 	mov	arg01, result1
15c04     FE 1E 02 F6 | 	mov	local01, result2
15c08     FF 20 02 F6 | 	mov	local02, result3
15c0c     A7 12 62 FC | 	wrlong	arg01, fp
15c10     04 4E 05 F1 | 	add	fp, #4
15c14     A7 1E 62 FC | 	wrlong	local01, fp
15c18     04 4E 05 F1 | 	add	fp, #4
15c1c     A7 20 62 FC | 	wrlong	local02, fp
15c20     08 4E 85 F1 | 	sub	fp, #8
15c24     B8 45 BF FD | 	call	#_pop
15c28     FD 20 02 F6 | 	mov	local02, result1
15c2c     0C 4E 05 F1 | 	add	fp, #12
15c30     A7 20 62 FC | 	wrlong	local02, fp
15c34     04 4E 05 F1 | 	add	fp, #4
15c38     A7 FC 61 FC | 	wrlong	result2, fp
15c3c     04 4E 05 F1 | 	add	fp, #4
15c40     A7 FE 61 FC | 	wrlong	result3, fp
15c44     08 4E 85 F1 | 	sub	fp, #8
15c48     A7 12 02 F6 | 	mov	arg01, fp
15c4c     0C 4E 85 F1 | 	sub	fp, #12
15c50     C8 D1 BF FD | 	call	#_converttoint
15c54     FD 20 02 F6 | 	mov	local02, result1
15c58     10 1F 02 F6 | 	mov	local01, local02
15c5c     01 1E 66 F0 | 	shl	local01, #1
15c60     10 1F 02 F1 | 	add	local01, local02
15c64     03 1E 66 F0 | 	shl	local01, #3
15c68     34 00 00 FF 
15c6c     2C E5 05 F1 | 	add	objptr, ##26924
15c70     F2 1E 02 F1 | 	add	local01, objptr
15c74     A7 12 02 F6 | 	mov	arg01, fp
15c78     34 00 00 FF 
15c7c     2C E5 85 F1 | 	sub	objptr, ##26924
15c80     98 D1 BF FD | 	call	#_converttoint
15c84     06 1E 06 F1 | 	add	local01, #6
15c88     0F FB 51 FC | 	wrword	result1, local01
15c8c     A7 F0 03 F6 | 	mov	ptra, fp
15c90     B2 00 A0 FD | 	call	#popregs_
15c94                 | _do_setdelay_ret
15c94     2D 00 64 FD | 	ret
15c98                 | 
15c98                 | ' 
15c98                 | ' sub do_setlen
15c98                 | _do_setlen
15c98     02 4A 05 F6 | 	mov	COUNT_, #2
15c9c     A8 00 A0 FD | 	call	#pushregs_
15ca0     18 F0 07 F1 | 	add	ptra, #24
15ca4     38 45 BF FD | 	call	#_pop
15ca8     FD 12 02 F6 | 	mov	arg01, result1
15cac     FE 1E 02 F6 | 	mov	local01, result2
15cb0     FF 20 02 F6 | 	mov	local02, result3
15cb4     A7 12 62 FC | 	wrlong	arg01, fp
15cb8     04 4E 05 F1 | 	add	fp, #4
15cbc     A7 1E 62 FC | 	wrlong	local01, fp
15cc0     04 4E 05 F1 | 	add	fp, #4
15cc4     A7 20 62 FC | 	wrlong	local02, fp
15cc8     08 4E 85 F1 | 	sub	fp, #8
15ccc     10 45 BF FD | 	call	#_pop
15cd0     FD 20 02 F6 | 	mov	local02, result1
15cd4     0C 4E 05 F1 | 	add	fp, #12
15cd8     A7 20 62 FC | 	wrlong	local02, fp
15cdc     04 4E 05 F1 | 	add	fp, #4
15ce0     A7 FC 61 FC | 	wrlong	result2, fp
15ce4     04 4E 05 F1 | 	add	fp, #4
15ce8     A7 FE 61 FC | 	wrlong	result3, fp
15cec     08 4E 85 F1 | 	sub	fp, #8
15cf0     A7 12 02 F6 | 	mov	arg01, fp
15cf4     0C 4E 85 F1 | 	sub	fp, #12
15cf8     20 D1 BF FD | 	call	#_converttoint
15cfc     FD 20 02 F6 | 	mov	local02, result1
15d00     10 1F 02 F6 | 	mov	local01, local02
15d04     01 1E 66 F0 | 	shl	local01, #1
15d08     10 1F 02 F1 | 	add	local01, local02
15d0c     03 1E 66 F0 | 	shl	local01, #3
15d10     34 00 00 FF 
15d14     2C E5 05 F1 | 	add	objptr, ##26924
15d18     F2 1E 02 F1 | 	add	local01, objptr
15d1c     A7 12 02 F6 | 	mov	arg01, fp
15d20     34 00 00 FF 
15d24     2C E5 85 F1 | 	sub	objptr, ##26924
15d28     9C D1 BF FD | 	call	#_converttofloat
15d2c     08 1E 06 F1 | 	add	local01, #8
15d30     0F FB 61 FC | 	wrlong	result1, local01
15d34     A7 F0 03 F6 | 	mov	ptra, fp
15d38     B2 00 A0 FD | 	call	#popregs_
15d3c                 | _do_setlen_ret
15d3c     2D 00 64 FD | 	ret
15d40                 | 
15d40                 | ' 
15d40                 | ' sub do_setvol
15d40                 | _do_setvol
15d40     02 4A 05 F6 | 	mov	COUNT_, #2
15d44     A8 00 A0 FD | 	call	#pushregs_
15d48     18 F0 07 F1 | 	add	ptra, #24
15d4c     90 44 BF FD | 	call	#_pop
15d50     FD 12 02 F6 | 	mov	arg01, result1
15d54     FE 1E 02 F6 | 	mov	local01, result2
15d58     FF 20 02 F6 | 	mov	local02, result3
15d5c     A7 12 62 FC | 	wrlong	arg01, fp
15d60     04 4E 05 F1 | 	add	fp, #4
15d64     A7 1E 62 FC | 	wrlong	local01, fp
15d68     04 4E 05 F1 | 	add	fp, #4
15d6c     A7 20 62 FC | 	wrlong	local02, fp
15d70     08 4E 85 F1 | 	sub	fp, #8
15d74     68 44 BF FD | 	call	#_pop
15d78     FD 20 02 F6 | 	mov	local02, result1
15d7c     0C 4E 05 F1 | 	add	fp, #12
15d80     A7 20 62 FC | 	wrlong	local02, fp
15d84     04 4E 05 F1 | 	add	fp, #4
15d88     A7 FC 61 FC | 	wrlong	result2, fp
15d8c     04 4E 05 F1 | 	add	fp, #4
15d90     A7 FE 61 FC | 	wrlong	result3, fp
15d94     08 4E 85 F1 | 	sub	fp, #8
15d98     A7 12 02 F6 | 	mov	arg01, fp
15d9c     0C 4E 85 F1 | 	sub	fp, #12
15da0     78 D0 BF FD | 	call	#_converttoint
15da4     FD 20 02 F6 | 	mov	local02, result1
15da8     10 1F 02 F6 | 	mov	local01, local02
15dac     01 1E 66 F0 | 	shl	local01, #1
15db0     10 1F 02 F1 | 	add	local01, local02
15db4     03 1E 66 F0 | 	shl	local01, #3
15db8     34 00 00 FF 
15dbc     2C E5 05 F1 | 	add	objptr, ##26924
15dc0     F2 1E 02 F1 | 	add	local01, objptr
15dc4     A7 12 02 F6 | 	mov	arg01, fp
15dc8     34 00 00 FF 
15dcc     2C E5 85 F1 | 	sub	objptr, ##26924
15dd0     F4 D0 BF FD | 	call	#_converttofloat
15dd4     0C 1E 06 F1 | 	add	local01, #12
15dd8     0F FB 61 FC | 	wrlong	result1, local01
15ddc     A7 F0 03 F6 | 	mov	ptra, fp
15de0     B2 00 A0 FD | 	call	#popregs_
15de4                 | _do_setvol_ret
15de4     2D 00 64 FD | 	ret
15de8                 | 
15de8                 | ' 
15de8                 | ' sub do_setpan
15de8                 | _do_setpan
15de8     02 4A 05 F6 | 	mov	COUNT_, #2
15dec     A8 00 A0 FD | 	call	#pushregs_
15df0     18 F0 07 F1 | 	add	ptra, #24
15df4     E8 43 BF FD | 	call	#_pop
15df8     FD 12 02 F6 | 	mov	arg01, result1
15dfc     FE 1E 02 F6 | 	mov	local01, result2
15e00     FF 20 02 F6 | 	mov	local02, result3
15e04     A7 12 62 FC | 	wrlong	arg01, fp
15e08     04 4E 05 F1 | 	add	fp, #4
15e0c     A7 1E 62 FC | 	wrlong	local01, fp
15e10     04 4E 05 F1 | 	add	fp, #4
15e14     A7 20 62 FC | 	wrlong	local02, fp
15e18     08 4E 85 F1 | 	sub	fp, #8
15e1c     C0 43 BF FD | 	call	#_pop
15e20     FD 20 02 F6 | 	mov	local02, result1
15e24     0C 4E 05 F1 | 	add	fp, #12
15e28     A7 20 62 FC | 	wrlong	local02, fp
15e2c     04 4E 05 F1 | 	add	fp, #4
15e30     A7 FC 61 FC | 	wrlong	result2, fp
15e34     04 4E 05 F1 | 	add	fp, #4
15e38     A7 FE 61 FC | 	wrlong	result3, fp
15e3c     08 4E 85 F1 | 	sub	fp, #8
15e40     A7 12 02 F6 | 	mov	arg01, fp
15e44     0C 4E 85 F1 | 	sub	fp, #12
15e48     D0 CF BF FD | 	call	#_converttoint
15e4c     FD 20 02 F6 | 	mov	local02, result1
15e50     10 1F 02 F6 | 	mov	local01, local02
15e54     01 1E 66 F0 | 	shl	local01, #1
15e58     10 1F 02 F1 | 	add	local01, local02
15e5c     03 1E 66 F0 | 	shl	local01, #3
15e60     34 00 00 FF 
15e64     2C E5 05 F1 | 	add	objptr, ##26924
15e68     F2 1E 02 F1 | 	add	local01, objptr
15e6c     A7 12 02 F6 | 	mov	arg01, fp
15e70     34 00 00 FF 
15e74     2C E5 85 F1 | 	sub	objptr, ##26924
15e78     4C D0 BF FD | 	call	#_converttofloat
15e7c     10 1E 06 F1 | 	add	local01, #16
15e80     0F FB 61 FC | 	wrlong	result1, local01
15e84     A7 F0 03 F6 | 	mov	ptra, fp
15e88     B2 00 A0 FD | 	call	#popregs_
15e8c                 | _do_setpan_ret
15e8c     2D 00 64 FD | 	ret
15e90                 | 
15e90                 | ' 
15e90                 | ' 
15e90                 | ' sub do_pinwrite
15e90                 | _do_pinwrite
15e90     01 4A 05 F6 | 	mov	COUNT_, #1
15e94     A8 00 A0 FD | 	call	#pushregs_
15e98     18 F0 07 F1 | 	add	ptra, #24
15e9c     40 43 BF FD | 	call	#_pop
15ea0     FD 14 02 F6 | 	mov	arg02, result1
15ea4     FE 12 02 F6 | 	mov	arg01, result2
15ea8     FF 1E 02 F6 | 	mov	local01, result3
15eac     A7 14 62 FC | 	wrlong	arg02, fp
15eb0     04 4E 05 F1 | 	add	fp, #4
15eb4     A7 12 62 FC | 	wrlong	arg01, fp
15eb8     04 4E 05 F1 | 	add	fp, #4
15ebc     A7 1E 62 FC | 	wrlong	local01, fp
15ec0     08 4E 85 F1 | 	sub	fp, #8
15ec4     18 43 BF FD | 	call	#_pop
15ec8     FF 1E 02 F6 | 	mov	local01, result3
15ecc     0C 4E 05 F1 | 	add	fp, #12
15ed0     A7 FA 61 FC | 	wrlong	result1, fp
15ed4     04 4E 05 F1 | 	add	fp, #4
15ed8     A7 FC 61 FC | 	wrlong	result2, fp
15edc     04 4E 05 F1 | 	add	fp, #4
15ee0     A7 1E 62 FC | 	wrlong	local01, fp
15ee4     08 4E 85 F1 | 	sub	fp, #8
15ee8     A7 12 02 F6 | 	mov	arg01, fp
15eec     0C 4E 85 F1 | 	sub	fp, #12
15ef0     28 CF BF FD | 	call	#_converttoint
15ef4     FD 1E 02 F6 | 	mov	local01, result1
15ef8     A7 12 02 F6 | 	mov	arg01, fp
15efc     1C CF BF FD | 	call	#_converttoint
15f00     FD 14 02 F6 | 	mov	arg02, result1
15f04     0F 13 02 F6 | 	mov	arg01, local01
15f08     88 6A B0 FD | 	call	#__system___pinwrite
15f0c     A7 F0 03 F6 | 	mov	ptra, fp
15f10     B2 00 A0 FD | 	call	#popregs_
15f14                 | _do_pinwrite_ret
15f14     2D 00 64 FD | 	ret
15f18                 | 
15f18                 | ' 
15f18                 | ' sub do_pinfloat
15f18                 | _do_pinfloat
15f18     00 4A 05 F6 | 	mov	COUNT_, #0
15f1c     A8 00 A0 FD | 	call	#pushregs_
15f20     0C F0 07 F1 | 	add	ptra, #12
15f24     B8 42 BF FD | 	call	#_pop
15f28     A7 FA 61 FC | 	wrlong	result1, fp
15f2c     04 4E 05 F1 | 	add	fp, #4
15f30     A7 FC 61 FC | 	wrlong	result2, fp
15f34     04 4E 05 F1 | 	add	fp, #4
15f38     A7 FE 61 FC | 	wrlong	result3, fp
15f3c     08 4E 85 F1 | 	sub	fp, #8
15f40     A7 12 02 F6 | 	mov	arg01, fp
15f44     D4 CE BF FD | 	call	#_converttoint
15f48     50 FA 61 FD | 	fltl	result1
15f4c     A7 F0 03 F6 | 	mov	ptra, fp
15f50     B2 00 A0 FD | 	call	#popregs_
15f54                 | _do_pinfloat_ret
15f54     2D 00 64 FD | 	ret
15f58                 | 
15f58                 | ' 
15f58                 | ' sub do_pinlo
15f58                 | _do_pinlo
15f58     00 4A 05 F6 | 	mov	COUNT_, #0
15f5c     A8 00 A0 FD | 	call	#pushregs_
15f60     0C F0 07 F1 | 	add	ptra, #12
15f64     78 42 BF FD | 	call	#_pop
15f68     A7 FA 61 FC | 	wrlong	result1, fp
15f6c     04 4E 05 F1 | 	add	fp, #4
15f70     A7 FC 61 FC | 	wrlong	result2, fp
15f74     04 4E 05 F1 | 	add	fp, #4
15f78     A7 FE 61 FC | 	wrlong	result3, fp
15f7c     08 4E 85 F1 | 	sub	fp, #8
15f80     A7 12 02 F6 | 	mov	arg01, fp
15f84     94 CE BF FD | 	call	#_converttoint
15f88     58 FA 61 FD | 	drvl	result1
15f8c     A7 F0 03 F6 | 	mov	ptra, fp
15f90     B2 00 A0 FD | 	call	#popregs_
15f94                 | _do_pinlo_ret
15f94     2D 00 64 FD | 	ret
15f98                 | 
15f98                 | ' 
15f98                 | ' sub do_pinhi
15f98                 | _do_pinhi
15f98     00 4A 05 F6 | 	mov	COUNT_, #0
15f9c     A8 00 A0 FD | 	call	#pushregs_
15fa0     0C F0 07 F1 | 	add	ptra, #12
15fa4     38 42 BF FD | 	call	#_pop
15fa8     A7 FA 61 FC | 	wrlong	result1, fp
15fac     04 4E 05 F1 | 	add	fp, #4
15fb0     A7 FC 61 FC | 	wrlong	result2, fp
15fb4     04 4E 05 F1 | 	add	fp, #4
15fb8     A7 FE 61 FC | 	wrlong	result3, fp
15fbc     08 4E 85 F1 | 	sub	fp, #8
15fc0     A7 12 02 F6 | 	mov	arg01, fp
15fc4     54 CE BF FD | 	call	#_converttoint
15fc8     59 FA 61 FD | 	drvh	result1
15fcc     A7 F0 03 F6 | 	mov	ptra, fp
15fd0     B2 00 A0 FD | 	call	#popregs_
15fd4                 | _do_pinhi_ret
15fd4     2D 00 64 FD | 	ret
15fd8                 | 
15fd8                 | ' 
15fd8                 | ' sub do_pintoggle
15fd8                 | _do_pintoggle
15fd8     00 4A 05 F6 | 	mov	COUNT_, #0
15fdc     A8 00 A0 FD | 	call	#pushregs_
15fe0     0C F0 07 F1 | 	add	ptra, #12
15fe4     F8 41 BF FD | 	call	#_pop
15fe8     A7 FA 61 FC | 	wrlong	result1, fp
15fec     04 4E 05 F1 | 	add	fp, #4
15ff0     A7 FC 61 FC | 	wrlong	result2, fp
15ff4     04 4E 05 F1 | 	add	fp, #4
15ff8     A7 FE 61 FC | 	wrlong	result3, fp
15ffc     08 4E 85 F1 | 	sub	fp, #8
16000     A7 12 02 F6 | 	mov	arg01, fp
16004     14 CE BF FD | 	call	#_converttoint
16008     5F FA 61 FD | 	drvnot	result1
1600c     A7 F0 03 F6 | 	mov	ptra, fp
16010     B2 00 A0 FD | 	call	#popregs_
16014                 | _do_pintoggle_ret
16014     2D 00 64 FD | 	ret
16018                 | 
16018                 | ' 
16018                 | ' 
16018                 | ' sub do_pinstart
16018                 | _do_pinstart
16018     03 4A 05 F6 | 	mov	COUNT_, #3
1601c     A8 00 A0 FD | 	call	#pushregs_
16020     30 F0 07 F1 | 	add	ptra, #48
16024     B8 41 BF FD | 	call	#_pop
16028     FD 16 02 F6 | 	mov	arg03, result1
1602c     FE 14 02 F6 | 	mov	arg02, result2
16030     FF 18 02 F6 | 	mov	arg04, result3
16034     A7 16 62 FC | 	wrlong	arg03, fp
16038     04 4E 05 F1 | 	add	fp, #4
1603c     A7 14 62 FC | 	wrlong	arg02, fp
16040     04 4E 05 F1 | 	add	fp, #4
16044     A7 18 62 FC | 	wrlong	arg04, fp
16048     08 4E 85 F1 | 	sub	fp, #8
1604c     90 41 BF FD | 	call	#_pop
16050     FD 16 02 F6 | 	mov	arg03, result1
16054     FE 14 02 F6 | 	mov	arg02, result2
16058     FF 18 02 F6 | 	mov	arg04, result3
1605c     0C 4E 05 F1 | 	add	fp, #12
16060     A7 16 62 FC | 	wrlong	arg03, fp
16064     04 4E 05 F1 | 	add	fp, #4
16068     A7 14 62 FC | 	wrlong	arg02, fp
1606c     04 4E 05 F1 | 	add	fp, #4
16070     A7 18 62 FC | 	wrlong	arg04, fp
16074     14 4E 85 F1 | 	sub	fp, #20
16078     64 41 BF FD | 	call	#_pop
1607c     FD 16 02 F6 | 	mov	arg03, result1
16080     FE 14 02 F6 | 	mov	arg02, result2
16084     FF 18 02 F6 | 	mov	arg04, result3
16088     18 4E 05 F1 | 	add	fp, #24
1608c     A7 16 62 FC | 	wrlong	arg03, fp
16090     04 4E 05 F1 | 	add	fp, #4
16094     A7 14 62 FC | 	wrlong	arg02, fp
16098     04 4E 05 F1 | 	add	fp, #4
1609c     A7 18 62 FC | 	wrlong	arg04, fp
160a0     20 4E 85 F1 | 	sub	fp, #32
160a4     38 41 BF FD | 	call	#_pop
160a8     FF 16 02 F6 | 	mov	arg03, result3
160ac     24 4E 05 F1 | 	add	fp, #36
160b0     A7 FA 61 FC | 	wrlong	result1, fp
160b4     04 4E 05 F1 | 	add	fp, #4
160b8     A7 FC 61 FC | 	wrlong	result2, fp
160bc     04 4E 05 F1 | 	add	fp, #4
160c0     A7 16 62 FC | 	wrlong	arg03, fp
160c4     08 4E 85 F1 | 	sub	fp, #8
160c8     A7 12 02 F6 | 	mov	arg01, fp
160cc     24 4E 85 F1 | 	sub	fp, #36
160d0     48 CD BF FD | 	call	#_converttoint
160d4     FD 1E 02 F6 | 	mov	local01, result1
160d8     18 4E 05 F1 | 	add	fp, #24
160dc     A7 12 02 F6 | 	mov	arg01, fp
160e0     18 4E 85 F1 | 	sub	fp, #24
160e4     34 CD BF FD | 	call	#_converttoint
160e8     FD 20 02 F6 | 	mov	local02, result1
160ec     0C 4E 05 F1 | 	add	fp, #12
160f0     A7 12 02 F6 | 	mov	arg01, fp
160f4     0C 4E 85 F1 | 	sub	fp, #12
160f8     20 CD BF FD | 	call	#_converttoint
160fc     FD 22 02 F6 | 	mov	local03, result1
16100     A7 12 02 F6 | 	mov	arg01, fp
16104     14 CD BF FD | 	call	#_converttoint
16108     40 1E 62 FD | 	dirl	local01
1610c     0F 21 02 FC | 	wrpin	local02, local01
16110     0F 23 12 FC | 	wxpin	local03, local01
16114     0F FB 21 FC | 	wypin	result1, local01
16118     41 1E 62 FD | 	dirh	local01
1611c     A7 F0 03 F6 | 	mov	ptra, fp
16120     B2 00 A0 FD | 	call	#popregs_
16124                 | _do_pinstart_ret
16124     2D 00 64 FD | 	ret
16128                 | 
16128                 | ' 
16128                 | ' 
16128                 | ' sub do_wrpin
16128                 | _do_wrpin
16128     01 4A 05 F6 | 	mov	COUNT_, #1
1612c     A8 00 A0 FD | 	call	#pushregs_
16130     18 F0 07 F1 | 	add	ptra, #24
16134     A8 40 BF FD | 	call	#_pop
16138     FD 14 02 F6 | 	mov	arg02, result1
1613c     FE 12 02 F6 | 	mov	arg01, result2
16140     FF 1E 02 F6 | 	mov	local01, result3
16144     A7 14 62 FC | 	wrlong	arg02, fp
16148     04 4E 05 F1 | 	add	fp, #4
1614c     A7 12 62 FC | 	wrlong	arg01, fp
16150     04 4E 05 F1 | 	add	fp, #4
16154     A7 1E 62 FC | 	wrlong	local01, fp
16158     08 4E 85 F1 | 	sub	fp, #8
1615c     80 40 BF FD | 	call	#_pop
16160     FF 1E 02 F6 | 	mov	local01, result3
16164     0C 4E 05 F1 | 	add	fp, #12
16168     A7 FA 61 FC | 	wrlong	result1, fp
1616c     04 4E 05 F1 | 	add	fp, #4
16170     A7 FC 61 FC | 	wrlong	result2, fp
16174     04 4E 05 F1 | 	add	fp, #4
16178     A7 1E 62 FC | 	wrlong	local01, fp
1617c     08 4E 85 F1 | 	sub	fp, #8
16180     A7 12 02 F6 | 	mov	arg01, fp
16184     0C 4E 85 F1 | 	sub	fp, #12
16188     90 CC BF FD | 	call	#_converttoint
1618c     FD 1E 02 F6 | 	mov	local01, result1
16190     A7 12 02 F6 | 	mov	arg01, fp
16194     84 CC BF FD | 	call	#_converttoint
16198     0F FB 01 FC | 	wrpin	result1, local01
1619c     A7 F0 03 F6 | 	mov	ptra, fp
161a0     B2 00 A0 FD | 	call	#popregs_
161a4                 | _do_wrpin_ret
161a4     2D 00 64 FD | 	ret
161a8                 | 
161a8                 | ' 
161a8                 | ' sub do_wxpin
161a8                 | _do_wxpin
161a8     01 4A 05 F6 | 	mov	COUNT_, #1
161ac     A8 00 A0 FD | 	call	#pushregs_
161b0     18 F0 07 F1 | 	add	ptra, #24
161b4     28 40 BF FD | 	call	#_pop
161b8     FD 14 02 F6 | 	mov	arg02, result1
161bc     FE 12 02 F6 | 	mov	arg01, result2
161c0     FF 1E 02 F6 | 	mov	local01, result3
161c4     A7 14 62 FC | 	wrlong	arg02, fp
161c8     04 4E 05 F1 | 	add	fp, #4
161cc     A7 12 62 FC | 	wrlong	arg01, fp
161d0     04 4E 05 F1 | 	add	fp, #4
161d4     A7 1E 62 FC | 	wrlong	local01, fp
161d8     08 4E 85 F1 | 	sub	fp, #8
161dc     00 40 BF FD | 	call	#_pop
161e0     FF 1E 02 F6 | 	mov	local01, result3
161e4     0C 4E 05 F1 | 	add	fp, #12
161e8     A7 FA 61 FC | 	wrlong	result1, fp
161ec     04 4E 05 F1 | 	add	fp, #4
161f0     A7 FC 61 FC | 	wrlong	result2, fp
161f4     04 4E 05 F1 | 	add	fp, #4
161f8     A7 1E 62 FC | 	wrlong	local01, fp
161fc     08 4E 85 F1 | 	sub	fp, #8
16200     A7 12 02 F6 | 	mov	arg01, fp
16204     0C 4E 85 F1 | 	sub	fp, #12
16208     10 CC BF FD | 	call	#_converttoint
1620c     FD 1E 02 F6 | 	mov	local01, result1
16210     A7 12 02 F6 | 	mov	arg01, fp
16214     04 CC BF FD | 	call	#_converttoint
16218     0F FB 11 FC | 	wxpin	result1, local01
1621c     A7 F0 03 F6 | 	mov	ptra, fp
16220     B2 00 A0 FD | 	call	#popregs_
16224                 | _do_wxpin_ret
16224     2D 00 64 FD | 	ret
16228                 | 
16228                 | ' 
16228                 | ' sub do_wypin
16228                 | _do_wypin
16228     01 4A 05 F6 | 	mov	COUNT_, #1
1622c     A8 00 A0 FD | 	call	#pushregs_
16230     18 F0 07 F1 | 	add	ptra, #24
16234     A8 3F BF FD | 	call	#_pop
16238     FD 14 02 F6 | 	mov	arg02, result1
1623c     FE 12 02 F6 | 	mov	arg01, result2
16240     FF 1E 02 F6 | 	mov	local01, result3
16244     A7 14 62 FC | 	wrlong	arg02, fp
16248     04 4E 05 F1 | 	add	fp, #4
1624c     A7 12 62 FC | 	wrlong	arg01, fp
16250     04 4E 05 F1 | 	add	fp, #4
16254     A7 1E 62 FC | 	wrlong	local01, fp
16258     08 4E 85 F1 | 	sub	fp, #8
1625c     80 3F BF FD | 	call	#_pop
16260     FF 1E 02 F6 | 	mov	local01, result3
16264     0C 4E 05 F1 | 	add	fp, #12
16268     A7 FA 61 FC | 	wrlong	result1, fp
1626c     04 4E 05 F1 | 	add	fp, #4
16270     A7 FC 61 FC | 	wrlong	result2, fp
16274     04 4E 05 F1 | 	add	fp, #4
16278     A7 1E 62 FC | 	wrlong	local01, fp
1627c     08 4E 85 F1 | 	sub	fp, #8
16280     A7 12 02 F6 | 	mov	arg01, fp
16284     0C 4E 85 F1 | 	sub	fp, #12
16288     90 CB BF FD | 	call	#_converttoint
1628c     FD 1E 02 F6 | 	mov	local01, result1
16290     A7 12 02 F6 | 	mov	arg01, fp
16294     84 CB BF FD | 	call	#_converttoint
16298     0F FB 21 FC | 	wypin	result1, local01
1629c     A7 F0 03 F6 | 	mov	ptra, fp
162a0     B2 00 A0 FD | 	call	#popregs_
162a4                 | _do_wypin_ret
162a4     2D 00 64 FD | 	ret
162a8                 | 
162a8                 | ' 
162a8                 | ' sub do_position
162a8                 | _do_position
162a8     01 4A 05 F6 | 	mov	COUNT_, #1
162ac     A8 00 A0 FD | 	call	#pushregs_
162b0     18 F0 07 F1 | 	add	ptra, #24
162b4     28 3F BF FD | 	call	#_pop
162b8     FD 14 02 F6 | 	mov	arg02, result1
162bc     FE 12 02 F6 | 	mov	arg01, result2
162c0     FF 1E 02 F6 | 	mov	local01, result3
162c4     A7 14 62 FC | 	wrlong	arg02, fp
162c8     04 4E 05 F1 | 	add	fp, #4
162cc     A7 12 62 FC | 	wrlong	arg01, fp
162d0     04 4E 05 F1 | 	add	fp, #4
162d4     A7 1E 62 FC | 	wrlong	local01, fp
162d8     08 4E 85 F1 | 	sub	fp, #8
162dc     00 3F BF FD | 	call	#_pop
162e0     FF 1E 02 F6 | 	mov	local01, result3
162e4     0C 4E 05 F1 | 	add	fp, #12
162e8     A7 FA 61 FC | 	wrlong	result1, fp
162ec     04 4E 05 F1 | 	add	fp, #4
162f0     A7 FC 61 FC | 	wrlong	result2, fp
162f4     04 4E 05 F1 | 	add	fp, #4
162f8     A7 1E 62 FC | 	wrlong	local01, fp
162fc     08 4E 85 F1 | 	sub	fp, #8
16300     A7 12 02 F6 | 	mov	arg01, fp
16304     0C 4E 85 F1 | 	sub	fp, #12
16308     10 CB BF FD | 	call	#_converttoint
1630c     FD 1E 02 F6 | 	mov	local01, result1
16310     A7 12 02 F6 | 	mov	arg01, fp
16314     04 CB BF FD | 	call	#_converttoint
16318     FD 14 02 F6 | 	mov	arg02, result1
1631c     0F 13 02 F6 | 	mov	arg01, local01
16320     F0 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
16324     A7 F0 03 F6 | 	mov	ptra, fp
16328     B2 00 A0 FD | 	call	#popregs_
1632c                 | _do_position_ret
1632c     2D 00 64 FD | 	ret
16330                 | 
16330                 | ' 
16330                 | ' sub do_poke
16330                 | _do_poke
16330     01 4A 05 F6 | 	mov	COUNT_, #1
16334     A8 00 A0 FD | 	call	#pushregs_
16338     20 F0 07 F1 | 	add	ptra, #32
1633c     A0 3E BF FD | 	call	#_pop
16340     FD 14 02 F6 | 	mov	arg02, result1
16344     FE 12 02 F6 | 	mov	arg01, result2
16348     FF 1E 02 F6 | 	mov	local01, result3
1634c     A7 14 62 FC | 	wrlong	arg02, fp
16350     04 4E 05 F1 | 	add	fp, #4
16354     A7 12 62 FC | 	wrlong	arg01, fp
16358     04 4E 05 F1 | 	add	fp, #4
1635c     A7 1E 62 FC | 	wrlong	local01, fp
16360     08 4E 85 F1 | 	sub	fp, #8
16364     78 3E BF FD | 	call	#_pop
16368     FF 1E 02 F6 | 	mov	local01, result3
1636c     0C 4E 05 F1 | 	add	fp, #12
16370     A7 FA 61 FC | 	wrlong	result1, fp
16374     04 4E 05 F1 | 	add	fp, #4
16378     A7 FC 61 FC | 	wrlong	result2, fp
1637c     04 4E 05 F1 | 	add	fp, #4
16380     A7 1E 62 FC | 	wrlong	local01, fp
16384     08 4E 85 F1 | 	sub	fp, #8
16388     A7 12 02 F6 | 	mov	arg01, fp
1638c     0C 4E 85 F1 | 	sub	fp, #12
16390     88 CA BF FD | 	call	#_converttoint
16394     18 4E 05 F1 | 	add	fp, #24
16398     A7 FA 61 FC | 	wrlong	result1, fp
1639c     18 4E 85 F1 | 	sub	fp, #24
163a0     A7 12 02 F6 | 	mov	arg01, fp
163a4     74 CA BF FD | 	call	#_converttoint
163a8     1C 4E 05 F1 | 	add	fp, #28
163ac     A7 FA 61 FC | 	wrlong	result1, fp
163b0                 | ' t1=pop() 'value
163b0                 | ' t2=pop() 
163b0                 | ' a=converttoint(t2) : v=converttoint(t1)
163b0                 | ' if a<$80000 then poke a,v else pspoke a,v
163b0     04 4E 85 F1 | 	sub	fp, #4
163b4     A7 1E 02 FB | 	rdlong	local01, fp
163b8     18 4E 85 F1 | 	sub	fp, #24
163bc     00 04 00 FF 
163c0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
163c4     1C 00 90 3D |  if_ae	jmp	#LR__1740
163c8     18 4E 05 F1 | 	add	fp, #24
163cc     A7 12 02 FB | 	rdlong	arg01, fp
163d0     04 4E 05 F1 | 	add	fp, #4
163d4     A7 14 02 FB | 	rdlong	arg02, fp
163d8     1C 4E 85 F1 | 	sub	fp, #28
163dc     09 15 42 FC | 	wrbyte	arg02, arg01
163e0     18 00 90 FD | 	jmp	#LR__1741
163e4                 | LR__1740
163e4     18 4E 05 F1 | 	add	fp, #24
163e8     A7 12 02 FB | 	rdlong	arg01, fp
163ec     04 4E 05 F1 | 	add	fp, #4
163f0     A7 14 02 FB | 	rdlong	arg02, fp
163f4     1C 4E 85 F1 | 	sub	fp, #28
163f8     F0 2D B0 FD | 	call	#_pspoke
163fc                 | LR__1741
163fc     A7 F0 03 F6 | 	mov	ptra, fp
16400     B2 00 A0 FD | 	call	#popregs_
16404                 | _do_poke_ret
16404     2D 00 64 FD | 	ret
16408                 | 
16408                 | ' 
16408                 | ' sub do_dpoke
16408                 | _do_dpoke
16408     01 4A 05 F6 | 	mov	COUNT_, #1
1640c     A8 00 A0 FD | 	call	#pushregs_
16410     20 F0 07 F1 | 	add	ptra, #32
16414     C8 3D BF FD | 	call	#_pop
16418     FD 14 02 F6 | 	mov	arg02, result1
1641c     FE 12 02 F6 | 	mov	arg01, result2
16420     FF 1E 02 F6 | 	mov	local01, result3
16424     A7 14 62 FC | 	wrlong	arg02, fp
16428     04 4E 05 F1 | 	add	fp, #4
1642c     A7 12 62 FC | 	wrlong	arg01, fp
16430     04 4E 05 F1 | 	add	fp, #4
16434     A7 1E 62 FC | 	wrlong	local01, fp
16438     08 4E 85 F1 | 	sub	fp, #8
1643c     A0 3D BF FD | 	call	#_pop
16440     FF 1E 02 F6 | 	mov	local01, result3
16444     0C 4E 05 F1 | 	add	fp, #12
16448     A7 FA 61 FC | 	wrlong	result1, fp
1644c     04 4E 05 F1 | 	add	fp, #4
16450     A7 FC 61 FC | 	wrlong	result2, fp
16454     04 4E 05 F1 | 	add	fp, #4
16458     A7 1E 62 FC | 	wrlong	local01, fp
1645c     08 4E 85 F1 | 	sub	fp, #8
16460     A7 12 02 F6 | 	mov	arg01, fp
16464     0C 4E 85 F1 | 	sub	fp, #12
16468     B0 C9 BF FD | 	call	#_converttoint
1646c     18 4E 05 F1 | 	add	fp, #24
16470     A7 FA 61 FC | 	wrlong	result1, fp
16474     18 4E 85 F1 | 	sub	fp, #24
16478     A7 12 02 F6 | 	mov	arg01, fp
1647c     9C C9 BF FD | 	call	#_converttoint
16480     1C 4E 05 F1 | 	add	fp, #28
16484     A7 FA 61 FC | 	wrlong	result1, fp
16488                 | ' t1=pop() 'value
16488                 | ' t2=pop() 
16488                 | ' a=converttoint(t2) : v=converttoint(t1)
16488                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
16488     04 4E 85 F1 | 	sub	fp, #4
1648c     A7 1E 02 FB | 	rdlong	local01, fp
16490     18 4E 85 F1 | 	sub	fp, #24
16494     00 04 00 FF 
16498     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1649c     1C 00 90 3D |  if_ae	jmp	#LR__1750
164a0     18 4E 05 F1 | 	add	fp, #24
164a4     A7 12 02 FB | 	rdlong	arg01, fp
164a8     04 4E 05 F1 | 	add	fp, #4
164ac     A7 14 02 FB | 	rdlong	arg02, fp
164b0     1C 4E 85 F1 | 	sub	fp, #28
164b4     09 15 52 FC | 	wrword	arg02, arg01
164b8     18 00 90 FD | 	jmp	#LR__1751
164bc                 | LR__1750
164bc     18 4E 05 F1 | 	add	fp, #24
164c0     A7 12 02 FB | 	rdlong	arg01, fp
164c4     04 4E 05 F1 | 	add	fp, #4
164c8     A7 14 02 FB | 	rdlong	arg02, fp
164cc     1C 4E 85 F1 | 	sub	fp, #28
164d0     D0 2C B0 FD | 	call	#_psdpoke
164d4                 | LR__1751
164d4     A7 F0 03 F6 | 	mov	ptra, fp
164d8     B2 00 A0 FD | 	call	#popregs_
164dc                 | _do_dpoke_ret
164dc     2D 00 64 FD | 	ret
164e0                 | 
164e0                 | ' 
164e0                 | ' sub do_lpoke
164e0                 | _do_lpoke
164e0     01 4A 05 F6 | 	mov	COUNT_, #1
164e4     A8 00 A0 FD | 	call	#pushregs_
164e8     20 F0 07 F1 | 	add	ptra, #32
164ec     F0 3C BF FD | 	call	#_pop
164f0     FD 14 02 F6 | 	mov	arg02, result1
164f4     FE 12 02 F6 | 	mov	arg01, result2
164f8     FF 1E 02 F6 | 	mov	local01, result3
164fc     A7 14 62 FC | 	wrlong	arg02, fp
16500     04 4E 05 F1 | 	add	fp, #4
16504     A7 12 62 FC | 	wrlong	arg01, fp
16508     04 4E 05 F1 | 	add	fp, #4
1650c     A7 1E 62 FC | 	wrlong	local01, fp
16510     08 4E 85 F1 | 	sub	fp, #8
16514     C8 3C BF FD | 	call	#_pop
16518     FF 1E 02 F6 | 	mov	local01, result3
1651c     0C 4E 05 F1 | 	add	fp, #12
16520     A7 FA 61 FC | 	wrlong	result1, fp
16524     04 4E 05 F1 | 	add	fp, #4
16528     A7 FC 61 FC | 	wrlong	result2, fp
1652c     04 4E 05 F1 | 	add	fp, #4
16530     A7 1E 62 FC | 	wrlong	local01, fp
16534     08 4E 85 F1 | 	sub	fp, #8
16538     A7 12 02 F6 | 	mov	arg01, fp
1653c     0C 4E 85 F1 | 	sub	fp, #12
16540     D8 C8 BF FD | 	call	#_converttoint
16544     18 4E 05 F1 | 	add	fp, #24
16548     A7 FA 61 FC | 	wrlong	result1, fp
1654c     18 4E 85 F1 | 	sub	fp, #24
16550     A7 12 02 F6 | 	mov	arg01, fp
16554     C4 C8 BF FD | 	call	#_converttoint
16558     1C 4E 05 F1 | 	add	fp, #28
1655c     A7 FA 61 FC | 	wrlong	result1, fp
16560                 | ' t1=pop() 'value
16560                 | ' t2=pop() 
16560                 | ' a=converttoint(t2) : v=converttoint(t1)
16560                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
16560     04 4E 85 F1 | 	sub	fp, #4
16564     A7 1E 02 FB | 	rdlong	local01, fp
16568     18 4E 85 F1 | 	sub	fp, #24
1656c     00 04 00 FF 
16570     00 1E 16 F2 | 	cmp	local01, ##524288 wc
16574     1C 00 90 3D |  if_ae	jmp	#LR__1760
16578     18 4E 05 F1 | 	add	fp, #24
1657c     A7 12 02 FB | 	rdlong	arg01, fp
16580     04 4E 05 F1 | 	add	fp, #4
16584     A7 14 02 FB | 	rdlong	arg02, fp
16588     1C 4E 85 F1 | 	sub	fp, #28
1658c     09 15 62 FC | 	wrlong	arg02, arg01
16590     18 00 90 FD | 	jmp	#LR__1761
16594                 | LR__1760
16594     18 4E 05 F1 | 	add	fp, #24
16598     A7 12 02 FB | 	rdlong	arg01, fp
1659c     04 4E 05 F1 | 	add	fp, #4
165a0     A7 14 02 FB | 	rdlong	arg02, fp
165a4     1C 4E 85 F1 | 	sub	fp, #28
165a8     B0 2B B0 FD | 	call	#_pslpoke
165ac                 | LR__1761
165ac     A7 F0 03 F6 | 	mov	ptra, fp
165b0     B2 00 A0 FD | 	call	#popregs_
165b4                 | _do_lpoke_ret
165b4     2D 00 64 FD | 	ret
165b8                 | 
165b8                 | ' 
165b8                 | ' sub do_peek
165b8                 | _do_peek
165b8     00 4A 05 F6 | 	mov	COUNT_, #0
165bc     A8 00 A0 FD | 	call	#pushregs_
165c0     14 F0 07 F1 | 	add	ptra, #20
165c4     18 3C BF FD | 	call	#_pop
165c8     A7 FA 61 FC | 	wrlong	result1, fp
165cc     04 4E 05 F1 | 	add	fp, #4
165d0     A7 FC 61 FC | 	wrlong	result2, fp
165d4     04 4E 05 F1 | 	add	fp, #4
165d8     A7 FE 61 FC | 	wrlong	result3, fp
165dc     08 4E 85 F1 | 	sub	fp, #8
165e0     A7 12 02 F6 | 	mov	arg01, fp
165e4     34 C8 BF FD | 	call	#_converttoint
165e8     0C 4E 05 F1 | 	add	fp, #12
165ec     A7 FA 61 FC | 	wrlong	result1, fp
165f0                 | ' t1=pop()
165f0                 | ' a=converttoint(t1)
165f0                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
165f0     0C 4E 85 F1 | 	sub	fp, #12
165f4     00 04 00 FF 
165f8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
165fc     1C 00 90 3D |  if_ae	jmp	#LR__1770
16600     0C 4E 05 F1 | 	add	fp, #12
16604     A7 12 02 FB | 	rdlong	arg01, fp
16608     09 FB C1 FA | 	rdbyte	result1, arg01
1660c     04 4E 05 F1 | 	add	fp, #4
16610     A7 FA 61 FC | 	wrlong	result1, fp
16614     10 4E 85 F1 | 	sub	fp, #16
16618     20 00 90 FD | 	jmp	#LR__1771
1661c                 | LR__1770
1661c     0C 4E 05 F1 | 	add	fp, #12
16620     A7 12 02 FB | 	rdlong	arg01, fp
16624     0C 4E 85 F1 | 	sub	fp, #12
16628     08 2C B0 FD | 	call	#_pspeek
1662c     FD FA E1 F8 | 	getbyte	result1, result1, #0
16630     10 4E 05 F1 | 	add	fp, #16
16634     A7 FA 61 FC | 	wrlong	result1, fp
16638     10 4E 85 F1 | 	sub	fp, #16
1663c                 | LR__1771
1663c     08 4E 05 F1 | 	add	fp, #8
16640     A7 3A 68 FC | 	wrlong	#29, fp
16644     08 4E 05 F1 | 	add	fp, #8
16648     A7 12 02 FB | 	rdlong	arg01, fp
1664c     10 4E 85 F1 | 	sub	fp, #16
16650     A7 12 62 FC | 	wrlong	arg01, fp
16654     A7 12 02 F6 | 	mov	arg01, fp
16658     1C 3C BF FD | 	call	#_push
1665c     A7 F0 03 F6 | 	mov	ptra, fp
16660     B2 00 A0 FD | 	call	#popregs_
16664                 | _do_peek_ret
16664     2D 00 64 FD | 	ret
16668                 | 
16668                 | ' 
16668                 | ' sub do_dpeek
16668                 | _do_dpeek
16668     00 4A 05 F6 | 	mov	COUNT_, #0
1666c     A8 00 A0 FD | 	call	#pushregs_
16670     14 F0 07 F1 | 	add	ptra, #20
16674     68 3B BF FD | 	call	#_pop
16678     A7 FA 61 FC | 	wrlong	result1, fp
1667c     04 4E 05 F1 | 	add	fp, #4
16680     A7 FC 61 FC | 	wrlong	result2, fp
16684     04 4E 05 F1 | 	add	fp, #4
16688     A7 FE 61 FC | 	wrlong	result3, fp
1668c     08 4E 85 F1 | 	sub	fp, #8
16690     A7 12 02 F6 | 	mov	arg01, fp
16694     84 C7 BF FD | 	call	#_converttoint
16698     0C 4E 05 F1 | 	add	fp, #12
1669c     A7 FA 61 FC | 	wrlong	result1, fp
166a0                 | ' t1=pop()
166a0                 | ' a=converttoint(t1)
166a0                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
166a0     0C 4E 85 F1 | 	sub	fp, #12
166a4     00 04 00 FF 
166a8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
166ac     1C 00 90 3D |  if_ae	jmp	#LR__1780
166b0     0C 4E 05 F1 | 	add	fp, #12
166b4     A7 12 02 FB | 	rdlong	arg01, fp
166b8     09 FB E1 FA | 	rdword	result1, arg01
166bc     04 4E 05 F1 | 	add	fp, #4
166c0     A7 FA 61 FC | 	wrlong	result1, fp
166c4     10 4E 85 F1 | 	sub	fp, #16
166c8     1C 00 90 FD | 	jmp	#LR__1781
166cc                 | LR__1780
166cc     0C 4E 05 F1 | 	add	fp, #12
166d0     A7 12 02 FB | 	rdlong	arg01, fp
166d4     0C 4E 85 F1 | 	sub	fp, #12
166d8     08 2C B0 FD | 	call	#_psdpeek
166dc     10 4E 05 F1 | 	add	fp, #16
166e0     A7 FA 61 FC | 	wrlong	result1, fp
166e4     10 4E 85 F1 | 	sub	fp, #16
166e8                 | LR__1781
166e8     08 4E 05 F1 | 	add	fp, #8
166ec     A7 3A 68 FC | 	wrlong	#29, fp
166f0     08 4E 05 F1 | 	add	fp, #8
166f4     A7 12 02 FB | 	rdlong	arg01, fp
166f8     10 4E 85 F1 | 	sub	fp, #16
166fc     A7 12 62 FC | 	wrlong	arg01, fp
16700     A7 12 02 F6 | 	mov	arg01, fp
16704     70 3B BF FD | 	call	#_push
16708     A7 F0 03 F6 | 	mov	ptra, fp
1670c     B2 00 A0 FD | 	call	#popregs_
16710                 | _do_dpeek_ret
16710     2D 00 64 FD | 	ret
16714                 | 
16714                 | ' 
16714                 | ' 
16714                 | ' sub do_lpeek
16714                 | _do_lpeek
16714     00 4A 05 F6 | 	mov	COUNT_, #0
16718     A8 00 A0 FD | 	call	#pushregs_
1671c     14 F0 07 F1 | 	add	ptra, #20
16720     BC 3A BF FD | 	call	#_pop
16724     A7 FA 61 FC | 	wrlong	result1, fp
16728     04 4E 05 F1 | 	add	fp, #4
1672c     A7 FC 61 FC | 	wrlong	result2, fp
16730     04 4E 05 F1 | 	add	fp, #4
16734     A7 FE 61 FC | 	wrlong	result3, fp
16738     08 4E 85 F1 | 	sub	fp, #8
1673c     A7 12 02 F6 | 	mov	arg01, fp
16740     D8 C6 BF FD | 	call	#_converttoint
16744     0C 4E 05 F1 | 	add	fp, #12
16748     A7 FA 61 FC | 	wrlong	result1, fp
1674c                 | ' t1=pop()
1674c                 | ' a=converttoint(t1)
1674c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1674c     0C 4E 85 F1 | 	sub	fp, #12
16750     00 04 00 FF 
16754     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16758     1C 00 90 3D |  if_ae	jmp	#LR__1790
1675c     0C 4E 05 F1 | 	add	fp, #12
16760     A7 12 02 FB | 	rdlong	arg01, fp
16764     09 FB 01 FB | 	rdlong	result1, arg01
16768     04 4E 05 F1 | 	add	fp, #4
1676c     A7 FA 61 FC | 	wrlong	result1, fp
16770     10 4E 85 F1 | 	sub	fp, #16
16774     1C 00 90 FD | 	jmp	#LR__1791
16778                 | LR__1790
16778     0C 4E 05 F1 | 	add	fp, #12
1677c     A7 12 02 FB | 	rdlong	arg01, fp
16780     0C 4E 85 F1 | 	sub	fp, #12
16784     04 2B B0 FD | 	call	#_pslpeek
16788     10 4E 05 F1 | 	add	fp, #16
1678c     A7 FA 61 FC | 	wrlong	result1, fp
16790     10 4E 85 F1 | 	sub	fp, #16
16794                 | LR__1791
16794     08 4E 05 F1 | 	add	fp, #8
16798     A7 3A 68 FC | 	wrlong	#29, fp
1679c     08 4E 05 F1 | 	add	fp, #8
167a0     A7 12 02 FB | 	rdlong	arg01, fp
167a4     10 4E 85 F1 | 	sub	fp, #16
167a8     A7 12 62 FC | 	wrlong	arg01, fp
167ac     A7 12 02 F6 | 	mov	arg01, fp
167b0     C4 3A BF FD | 	call	#_push
167b4     A7 F0 03 F6 | 	mov	ptra, fp
167b8     B2 00 A0 FD | 	call	#popregs_
167bc                 | _do_lpeek_ret
167bc     2D 00 64 FD | 	ret
167c0                 | 
167c0                 | ' 
167c0                 | ' sub do_fre
167c0                 | _do_fre
167c0     01 4A 05 F6 | 	mov	COUNT_, #1
167c4     A8 00 A0 FD | 	call	#pushregs_
167c8     0C F0 07 F1 | 	add	ptra, #12
167cc     7B 00 00 FF 
167d0     5C E4 05 F1 | 	add	objptr, ##63068
167d4     F2 12 02 FB | 	rdlong	arg01, objptr
167d8     18 00 00 FF 
167dc     1C E4 85 F1 | 	sub	objptr, ##12316
167e0     F2 1E 02 FB | 	rdlong	local01, objptr
167e4     0F 13 82 F1 | 	sub	arg01, local01
167e8     18 00 00 FF 
167ec     B8 E4 05 F1 | 	add	objptr, ##12472
167f0     F2 12 62 FC | 	wrlong	arg01, objptr
167f4     08 4E 05 F1 | 	add	fp, #8
167f8     A7 3A 68 FC | 	wrlong	#29, fp
167fc     08 4E 85 F1 | 	sub	fp, #8
16800     F2 1E 02 FB | 	rdlong	local01, objptr
16804     7B 00 00 FF 
16808     F8 E4 85 F1 | 	sub	objptr, ##63224
1680c     A7 1E 62 FC | 	wrlong	local01, fp
16810     A7 12 02 F6 | 	mov	arg01, fp
16814     60 3A BF FD | 	call	#_push
16818     A7 F0 03 F6 | 	mov	ptra, fp
1681c     B2 00 A0 FD | 	call	#popregs_
16820                 | _do_fre_ret
16820     2D 00 64 FD | 	ret
16824                 | 
16824                 | ' 
16824                 | ' sub do_adr
16824                 | _do_adr
16824                 | _do_adr_ret
16824     2D 00 64 FD | 	ret
16828                 | 
16828                 | ' 
16828                 | ' sub do_getnotevalue
16828                 | _do_getnotevalue
16828     01 4A 05 F6 | 	mov	COUNT_, #1
1682c     A8 00 A0 FD | 	call	#pushregs_
16830     1C F0 07 F1 | 	add	ptra, #28
16834     A8 39 BF FD | 	call	#_pop
16838     FF 14 02 F6 | 	mov	arg02, result3
1683c     10 4E 05 F1 | 	add	fp, #16
16840     A7 FA 61 FC | 	wrlong	result1, fp
16844     04 4E 05 F1 | 	add	fp, #4
16848     A7 FC 61 FC | 	wrlong	result2, fp
1684c     04 4E 05 F1 | 	add	fp, #4
16850     A7 14 62 FC | 	wrlong	arg02, fp
16854     08 4E 85 F1 | 	sub	fp, #8
16858     A7 12 02 F6 | 	mov	arg01, fp
1685c     10 4E 85 F1 | 	sub	fp, #16
16860     B8 C5 BF FD | 	call	#_converttoint
16864     FD 14 52 F6 | 	abs	arg02, result1 wc
16868     0C 14 16 FD | 	qdiv	arg02, #12
1686c     0C 4E 05 F1 | 	add	fp, #12
16870     A7 FA 61 FC | 	wrlong	result1, fp
16874     34 00 00 FF 
16878     CC E4 05 F1 | 	add	objptr, ##26828
1687c     08 4E 85 F1 | 	sub	fp, #8
16880     19 14 62 FD | 	getqy	arg02
16884     0A 15 82 F6 | 	negc	arg02, arg02
16888     02 14 66 F0 | 	shl	arg02, #2
1688c     F2 14 02 F1 | 	add	arg02, objptr
16890     0A 15 02 FB | 	rdlong	arg02, arg02
16894     A7 14 62 FC | 	wrlong	arg02, fp
16898     08 4E 05 F1 | 	add	fp, #8
1689c     A7 14 02 FB | 	rdlong	arg02, fp
168a0     0A 15 52 F6 | 	abs	arg02, arg02 wc
168a4     0C 14 16 FD | 	qdiv	arg02, #12
168a8     0C 4E 85 F1 | 	sub	fp, #12
168ac     34 00 00 FF 
168b0     CC E4 85 F1 | 	sub	objptr, ##26828
168b4     18 14 62 FD | 	getqx	arg02
168b8     0A 13 82 F6 | 	negc	arg01, arg02
168bc     09 13 52 F6 | 	abs	arg01, arg01 wc
168c0     1F 1E C6 C9 |  if_b	decod	local01, #31
168c4     00 1E 06 36 |  if_ae	mov	local01, #0
168c8     8C 86 B0 FD | 	call	#__system___float_fromuns
168cc     0F FB 61 F5 | 	xor	result1, local01
168d0     08 4E 05 F1 | 	add	fp, #8
168d4     A7 FA 61 FC | 	wrlong	result1, fp
168d8     FD 14 02 F6 | 	mov	arg02, result1
168dc     08 4E 85 F1 | 	sub	fp, #8
168e0     1E 12 C6 F9 | 	decod	arg01, #30
168e4     58 99 B0 FD | 	call	#__system____builtin_powf
168e8     FD 12 02 F6 | 	mov	arg01, result1
168ec     04 4E 05 F1 | 	add	fp, #4
168f0     A7 14 02 FB | 	rdlong	arg02, fp
168f4     04 4E 85 F1 | 	sub	fp, #4
168f8     60 8A B0 FD | 	call	#__system___float_mul
168fc     A7 FA 61 FC | 	wrlong	result1, fp
16900     10 4E 05 F1 | 	add	fp, #16
16904     A7 FA 61 FC | 	wrlong	result1, fp
16908     08 4E 05 F1 | 	add	fp, #8
1690c     A7 3C 68 FC | 	wrlong	#30, fp
16910     08 4E 85 F1 | 	sub	fp, #8
16914     A7 12 02 F6 | 	mov	arg01, fp
16918     10 4E 85 F1 | 	sub	fp, #16
1691c     58 39 BF FD | 	call	#_push
16920     A7 F0 03 F6 | 	mov	ptra, fp
16924     B2 00 A0 FD | 	call	#popregs_
16928                 | _do_getnotevalue_ret
16928     2D 00 64 FD | 	ret
1692c                 | 
1692c                 | ' 
1692c                 | ' 
1692c                 | ' sub do_waitms
1692c                 | _do_waitms
1692c     01 4A 05 F6 | 	mov	COUNT_, #1
16930     A8 00 A0 FD | 	call	#pushregs_
16934     18 F0 07 F1 | 	add	ptra, #24
16938     A4 38 BF FD | 	call	#_pop
1693c     A7 FA 61 FC | 	wrlong	result1, fp
16940     04 4E 05 F1 | 	add	fp, #4
16944     A7 FC 61 FC | 	wrlong	result2, fp
16948     04 4E 05 F1 | 	add	fp, #4
1694c     A7 FE 61 FC | 	wrlong	result3, fp
16950                 | ' 
16950                 | ' t1=pop() 'value
16950                 | ' 
16950                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
16950     08 4E 85 F1 | 	sub	fp, #8
16954     1C FE 0D F2 | 	cmp	result3, #28 wz
16958     08 4E 05 51 |  if_ne	add	fp, #8
1695c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
16960     08 4E 85 51 |  if_ne	sub	fp, #8
16964     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
16968     A7 12 02 AB |  if_e	rdlong	arg01, fp
1696c     0C 4E 05 A1 |  if_e	add	fp, #12
16970     A7 12 62 AC |  if_e	wrlong	arg01, fp
16974     0C 4E 85 A1 |  if_e	sub	fp, #12
16978     14 00 90 AD |  if_e	jmp	#LR__1800
1697c     A7 12 02 F6 | 	mov	arg01, fp
16980     98 C4 BF FD | 	call	#_converttoint
16984     0C 4E 05 F1 | 	add	fp, #12
16988     A7 FA 61 FC | 	wrlong	result1, fp
1698c     0C 4E 85 F1 | 	sub	fp, #12
16990                 | LR__1800
16990                 | ' if t<0 then return
16990     0C 4E 05 F1 | 	add	fp, #12
16994     A7 12 02 FB | 	rdlong	arg01, fp
16998     0C 4E 85 F1 | 	sub	fp, #12
1699c     00 12 56 F2 | 	cmps	arg01, #0 wc
169a0     B8 00 90 CD |  if_b	jmp	#LR__1805
169a4                 | ' if t < 5000 then 
169a4     0C 4E 05 F1 | 	add	fp, #12
169a8     A7 12 02 FB | 	rdlong	arg01, fp
169ac     0C 4E 85 F1 | 	sub	fp, #12
169b0     09 00 00 FF 
169b4     88 13 56 F2 | 	cmps	arg01, ##5000 wc
169b8     14 00 90 3D |  if_ae	jmp	#LR__1801
169bc     0C 4E 05 F1 | 	add	fp, #12
169c0     A7 12 02 FB | 	rdlong	arg01, fp
169c4     0C 4E 85 F1 | 	sub	fp, #12
169c8     08 61 B0 FD | 	call	#__system___waitms
169cc     8C 00 90 FD | 	jmp	#LR__1804
169d0                 | LR__1801
169d0     10 4E 05 F1 | 	add	fp, #16
169d4     A7 02 68 FC | 	wrlong	#1, fp
169d8     04 4E 85 F1 | 	sub	fp, #4
169dc     A7 12 02 FB | 	rdlong	arg01, fp
169e0     09 13 52 F6 | 	abs	arg01, arg01 wc
169e4     09 00 00 FF 
169e8     88 13 16 FD | 	qdiv	arg01, ##5000
169ec                 | '   for i=1 to t/5000
169ec     0C 4E 85 F1 | 	sub	fp, #12
169f0     18 1E 62 FD | 	getqx	local01
169f4     0F 1F 82 F6 | 	negc	local01, local01
169f8     01 1E 06 F1 | 	add	local01, #1
169fc                 | LR__1802
169fc     10 4E 05 F1 | 	add	fp, #16
16a00     A7 12 02 FB | 	rdlong	arg01, fp
16a04     10 4E 85 F1 | 	sub	fp, #16
16a08     0F 13 52 F2 | 	cmps	arg01, local01 wc
16a0c     28 00 90 3D |  if_ae	jmp	#LR__1803
16a10     0C 4E 05 F1 | 	add	fp, #12
16a14     A7 12 02 FB | 	rdlong	arg01, fp
16a18     0C 4E 85 F1 | 	sub	fp, #12
16a1c     B4 60 B0 FD | 	call	#__system___waitms
16a20     10 4E 05 F1 | 	add	fp, #16
16a24     A7 12 02 FB | 	rdlong	arg01, fp
16a28     01 12 06 F1 | 	add	arg01, #1
16a2c     A7 12 62 FC | 	wrlong	arg01, fp
16a30     10 4E 85 F1 | 	sub	fp, #16
16a34     C4 FF 9F FD | 	jmp	#LR__1802
16a38                 | LR__1803
16a38     0C 4E 05 F1 | 	add	fp, #12
16a3c     A7 1E 02 FB | 	rdlong	local01, fp
16a40     0F 1F 52 F6 | 	abs	local01, local01 wc
16a44     09 00 00 FF 
16a48     88 1F 16 FD | 	qdiv	local01, ##5000
16a4c     0C 4E 85 F1 | 	sub	fp, #12
16a50     19 1E 62 FD | 	getqy	local01
16a54     0F 13 82 F6 | 	negc	arg01, local01
16a58     78 60 B0 FD | 	call	#__system___waitms
16a5c                 | LR__1804
16a5c                 | LR__1805
16a5c     A7 F0 03 F6 | 	mov	ptra, fp
16a60     B2 00 A0 FD | 	call	#popregs_
16a64                 | _do_waitms_ret
16a64     2D 00 64 FD | 	ret
16a68                 | 
16a68                 | ' 
16a68                 | ' sub do_waitvbl
16a68                 | _do_waitvbl
16a68     01 12 06 F6 | 	mov	arg01, #1
16a6c     08 49 B0 FD | 	call	#_hg010b_spin2_waitvbl
16a70                 | _do_waitvbl_ret
16a70     2D 00 64 FD | 	ret
16a74                 | 
16a74                 | ' 
16a74                 | ' sub do_waitclock
16a74                 | _do_waitclock
16a74     7B 00 00 FF 
16a78     58 E4 05 F1 | 	add	objptr, ##63064
16a7c     F2 00 02 FB | 	rdlong	_var01, objptr
16a80                 | ' c=hkcnt
16a80                 | ' do: loop until hkcnt<>c
16a80                 | LR__1810
16a80     F2 02 02 FB | 	rdlong	_var02, objptr
16a84     00 03 0A F2 | 	cmp	_var02, _var01 wz
16a88     F4 FF 9F AD |  if_e	jmp	#LR__1810
16a8c     7B 00 00 FF 
16a90     58 E4 85 F1 | 	sub	objptr, ##63064
16a94                 | _do_waitclock_ret
16a94     2D 00 64 FD | 	ret
16a98                 | 
16a98                 | ' 
16a98                 | ' sub do_dir
16a98                 | _do_dir
16a98     05 4A 05 F6 | 	mov	COUNT_, #5
16a9c     A8 00 A0 FD | 	call	#pushregs_
16aa0     62 01 00 FF 
16aa4     54 12 06 F6 | 	mov	arg01, ##@LR__4966
16aa8     C0 63 B0 FD | 	call	#__system___chdir
16aac                 | ' chdir("/sd/bas")       ' set working directory
16aac                 | ' print "Working directory: "; currentdir$ 
16aac     00 12 06 F6 | 	mov	arg01, #0
16ab0     BC B6 B0 FD | 	call	#__system___getiolock_0474
16ab4     FD 12 02 F6 | 	mov	arg01, result1
16ab8     24 5D B0 FD | 	call	#__system___lockmem
16abc     62 01 00 FF 
16ac0     5C 14 06 F6 | 	mov	arg02, ##@LR__4967
16ac4     00 12 06 F6 | 	mov	arg01, #0
16ac8     00 16 06 F6 | 	mov	arg03, #0
16acc     14 6A B0 FD | 	call	#__system___basic_print_string
16ad0     72 00 00 FF 
16ad4     78 E4 05 F1 | 	add	objptr, ##58488
16ad8     F2 14 02 FB | 	rdlong	arg02, objptr
16adc     72 00 00 FF 
16ae0     78 E4 85 F1 | 	sub	objptr, ##58488
16ae4     00 12 06 F6 | 	mov	arg01, #0
16ae8     00 16 06 F6 | 	mov	arg03, #0
16aec     F4 69 B0 FD | 	call	#__system___basic_print_string
16af0     00 12 06 F6 | 	mov	arg01, #0
16af4     0A 14 06 F6 | 	mov	arg02, #10
16af8     00 16 06 F6 | 	mov	arg03, #0
16afc     8C 69 B0 FD | 	call	#__system___basic_print_char
16b00     00 12 06 F6 | 	mov	arg01, #0
16b04     68 B6 B0 FD | 	call	#__system___getiolock_0474
16b08     FD 00 68 FC | 	wrlong	#0, result1
16b0c     00 1E 06 F6 | 	mov	local01, #0
16b10     62 01 00 FF 
16b14     70 12 06 F6 | 	mov	arg01, ##@LR__4968
16b18     10 14 06 F6 | 	mov	arg02, #16
16b1c     88 B7 B0 FD | 	call	#__system___basic_dir
16b20     FD 20 02 F6 | 	mov	local02, result1
16b24                 | ' px=0:
16b24                 | ' filename=dir$("*", fbDirectory)
16b24                 | ' while filename <> "" and filename <> nil
16b24                 | LR__1820
16b24     00 22 06 F6 | 	mov	local03, #0
16b28     62 01 00 FF 
16b2c     72 14 06 F6 | 	mov	arg02, ##@LR__4969
16b30     10 13 02 F6 | 	mov	arg01, local02
16b34     D0 5C B0 FD | 	call	#__system___string_cmp
16b38     00 FA 0D F2 | 	cmp	result1, #0 wz
16b3c     00 22 26 56 |  if_ne	not	local03, #0
16b40     00 24 06 F6 | 	mov	local04, #0
16b44     10 13 02 F6 | 	mov	arg01, local02
16b48     00 14 06 F6 | 	mov	arg02, #0
16b4c     B8 5C B0 FD | 	call	#__system___string_cmp
16b50     00 FA 0D F2 | 	cmp	result1, #0 wz
16b54     00 24 26 56 |  if_ne	not	local04, #0
16b58     12 23 CA F7 | 	test	local03, local04 wz
16b5c     9C 00 90 AD |  if_e	jmp	#LR__1822
16b60                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
16b60     00 12 06 F6 | 	mov	arg01, #0
16b64     08 B6 B0 FD | 	call	#__system___getiolock_0474
16b68     FD 12 02 F6 | 	mov	arg01, result1
16b6c     70 5C B0 FD | 	call	#__system___lockmem
16b70     62 01 00 FF 
16b74     73 14 06 F6 | 	mov	arg02, ##@LR__4970
16b78     00 12 06 F6 | 	mov	arg01, #0
16b7c     00 16 06 F6 | 	mov	arg03, #0
16b80     60 69 B0 FD | 	call	#__system___basic_print_string
16b84     00 26 06 F6 | 	mov	local05, #0
16b88     00 12 06 F6 | 	mov	arg01, #0
16b8c     10 15 02 F6 | 	mov	arg02, local02
16b90     00 16 06 F6 | 	mov	arg03, #0
16b94     4C 69 B0 FD | 	call	#__system___basic_print_string
16b98     00 12 06 F6 | 	mov	arg01, #0
16b9c     D0 B5 B0 FD | 	call	#__system___getiolock_0474
16ba0     FD 00 68 FC | 	wrlong	#0, result1
16ba4     40 1E 06 F1 | 	add	local01, #64
16ba8     0F 13 02 F6 | 	mov	arg01, local01
16bac     9C 47 B0 FD | 	call	#_hg010b_spin2_setcursorx
16bb0     00 1F 56 F2 | 	cmps	local01, #256 wc
16bb4     30 00 90 CD |  if_b	jmp	#LR__1821
16bb8     00 1E 06 F6 | 	mov	local01, #0
16bbc     00 12 06 F6 | 	mov	arg01, #0
16bc0     AC B5 B0 FD | 	call	#__system___getiolock_0474
16bc4     FD 12 02 F6 | 	mov	arg01, result1
16bc8     14 5C B0 FD | 	call	#__system___lockmem
16bcc     00 12 06 F6 | 	mov	arg01, #0
16bd0     0A 14 06 F6 | 	mov	arg02, #10
16bd4     00 16 06 F6 | 	mov	arg03, #0
16bd8     B0 68 B0 FD | 	call	#__system___basic_print_char
16bdc     00 12 06 F6 | 	mov	arg01, #0
16be0     8C B5 B0 FD | 	call	#__system___getiolock_0474
16be4     FD 00 68 FC | 	wrlong	#0, result1
16be8                 | LR__1821
16be8     00 12 06 F6 | 	mov	arg01, #0
16bec     00 14 06 F6 | 	mov	arg02, #0
16bf0     B4 B6 B0 FD | 	call	#__system___basic_dir
16bf4     FD 20 02 F6 | 	mov	local02, result1
16bf8     28 FF 9F FD | 	jmp	#LR__1820
16bfc                 | LR__1822
16bfc                 | ' print
16bfc     00 12 06 F6 | 	mov	arg01, #0
16c00     6C B5 B0 FD | 	call	#__system___getiolock_0474
16c04     FD 12 02 F6 | 	mov	arg01, result1
16c08     D4 5B B0 FD | 	call	#__system___lockmem
16c0c     00 12 06 F6 | 	mov	arg01, #0
16c10     0A 14 06 F6 | 	mov	arg02, #10
16c14     00 16 06 F6 | 	mov	arg03, #0
16c18     70 68 B0 FD | 	call	#__system___basic_print_char
16c1c     00 12 06 F6 | 	mov	arg01, #0
16c20     4C B5 B0 FD | 	call	#__system___getiolock_0474
16c24     FD 00 68 FC | 	wrlong	#0, result1
16c28     00 1E 06 F6 | 	mov	local01, #0
16c2c                 | ' return cursor_y
16c2c     62 01 00 FF 
16c30     7A 12 06 F6 | 	mov	arg01, ##@LR__4971
16c34     21 14 06 F6 | 	mov	arg02, #33
16c38     6C B6 B0 FD | 	call	#__system___basic_dir
16c3c     FD 20 02 F6 | 	mov	local02, result1
16c40                 | ' px=0: py=v.getcursory()
16c40                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
16c40                 | ' do while filename <> "" and filename <> nil
16c40                 | LR__1823
16c40     00 22 06 F6 | 	mov	local03, #0
16c44     62 01 00 FF 
16c48     7C 14 06 F6 | 	mov	arg02, ##@LR__4972
16c4c     10 13 02 F6 | 	mov	arg01, local02
16c50     B4 5B B0 FD | 	call	#__system___string_cmp
16c54     00 FA 0D F2 | 	cmp	result1, #0 wz
16c58     00 22 26 56 |  if_ne	not	local03, #0
16c5c     00 24 06 F6 | 	mov	local04, #0
16c60     10 13 02 F6 | 	mov	arg01, local02
16c64     00 14 06 F6 | 	mov	arg02, #0
16c68     9C 5B B0 FD | 	call	#__system___string_cmp
16c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
16c70     00 24 26 56 |  if_ne	not	local04, #0
16c74     12 23 CA F7 | 	test	local03, local04 wz
16c78     80 01 90 AD |  if_e	jmp	#LR__1828
16c7c                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
16c7c     00 12 06 F6 | 	mov	arg01, #0
16c80     EC B4 B0 FD | 	call	#__system___getiolock_0474
16c84     FD 12 02 F6 | 	mov	arg01, result1
16c88     54 5B B0 FD | 	call	#__system___lockmem
16c8c     00 12 06 F6 | 	mov	arg01, #0
16c90     10 15 02 F6 | 	mov	arg02, local02
16c94     00 16 06 F6 | 	mov	arg03, #0
16c98     48 68 B0 FD | 	call	#__system___basic_print_string
16c9c     00 12 06 F6 | 	mov	arg01, #0
16ca0     CC B4 B0 FD | 	call	#__system___getiolock_0474
16ca4     FD 00 68 FC | 	wrlong	#0, result1
16ca8     40 1E 06 F1 | 	add	local01, #64
16cac     0F 13 02 F6 | 	mov	arg01, local01
16cb0     98 46 B0 FD | 	call	#_hg010b_spin2_setcursorx
16cb4     00 1F 56 F2 | 	cmps	local01, #256 wc
16cb8     30 00 90 CD |  if_b	jmp	#LR__1824
16cbc     00 1E 06 F6 | 	mov	local01, #0
16cc0     00 12 06 F6 | 	mov	arg01, #0
16cc4     A8 B4 B0 FD | 	call	#__system___getiolock_0474
16cc8     FD 12 02 F6 | 	mov	arg01, result1
16ccc     10 5B B0 FD | 	call	#__system___lockmem
16cd0     00 12 06 F6 | 	mov	arg01, #0
16cd4     0A 14 06 F6 | 	mov	arg02, #10
16cd8     00 16 06 F6 | 	mov	arg03, #0
16cdc     AC 67 B0 FD | 	call	#__system___basic_print_char
16ce0     00 12 06 F6 | 	mov	arg01, #0
16ce4     88 B4 B0 FD | 	call	#__system___getiolock_0474
16ce8     FD 00 68 FC | 	wrlong	#0, result1
16cec                 | LR__1824
16cec     00 12 06 F6 | 	mov	arg01, #0
16cf0     00 14 06 F6 | 	mov	arg02, #0
16cf4     B0 B5 B0 FD | 	call	#__system___basic_dir
16cf8     FD 20 02 F6 | 	mov	local02, result1
16cfc                 | '   filename = dir$()      ' continue scan
16cfc                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
16cfc                 | ' return cursor_y
16cfc     3A E4 05 F1 | 	add	objptr, #58
16d00     F2 FA C1 FA | 	rdbyte	result1, objptr
16d04     3A E4 85 F1 | 	sub	objptr, #58
16d08     22 FA 0D F2 | 	cmp	result1, #34 wz
16d0c     30 FF 9F 5D |  if_ne	jmp	#LR__1823
16d10                 | '     print "-----more, press any key";
16d10     00 12 06 F6 | 	mov	arg01, #0
16d14     58 B4 B0 FD | 	call	#__system___getiolock_0474
16d18     FD 12 02 F6 | 	mov	arg01, result1
16d1c     C0 5A B0 FD | 	call	#__system___lockmem
16d20     62 01 00 FF 
16d24     7D 14 06 F6 | 	mov	arg02, ##@LR__4973
16d28     00 12 06 F6 | 	mov	arg01, #0
16d2c     00 16 06 F6 | 	mov	arg03, #0
16d30     B0 67 B0 FD | 	call	#__system___basic_print_string
16d34     00 12 06 F6 | 	mov	arg01, #0
16d38     34 B4 B0 FD | 	call	#__system___getiolock_0474
16d3c     FD 00 68 FC | 	wrlong	#0, result1
16d40                 | '     do 
16d40                 | LR__1825
16d40     C4 52 B0 FD | 	call	#_usbnew_spin2_get_key
16d44     00 FA 0D F2 | 	cmp	result1, #0 wz
16d48     F4 FF 9F 5D |  if_ne	jmp	#LR__1825
16d4c                 | '     do
16d4c                 | LR__1826
16d4c     B8 52 B0 FD | 	call	#_usbnew_spin2_get_key
16d50     00 FA 0D F2 | 	cmp	result1, #0 wz
16d54     F4 FF 9F AD |  if_e	jmp	#LR__1826
16d58                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
16d58     79 00 00 FF 
16d5c     C4 E5 05 F1 | 	add	objptr, ##62404
16d60     F2 22 02 FB | 	rdlong	local03, objptr
16d64     79 00 00 FF 
16d68     C4 E5 85 F1 | 	sub	objptr, ##62404
16d6c     01 22 0E F2 | 	cmp	local03, #1 wz
16d70     3C 00 90 5D |  if_ne	jmp	#LR__1827
16d74     7B 00 00 FF 
16d78     68 E4 05 F1 | 	add	objptr, ##63080
16d7c     F2 14 02 FB | 	rdlong	arg02, objptr
16d80     04 E4 85 F1 | 	sub	objptr, #4
16d84     F2 1A 02 FB | 	rdlong	arg05, objptr
16d88     07 12 06 F6 | 	mov	arg01, #7
16d8c     56 00 00 FF 
16d90     44 16 06 F6 | 	mov	arg03, ##44100
16d94     0C 18 C6 F9 | 	decod	arg04, #12
16d98     01 1C 66 F6 | 	neg	arg06, #1
16d9c     6F 00 00 FF 
16da0     A4 E5 85 F1 | 	sub	objptr, ##57252
16da4     E8 55 B0 FD | 	call	#_audio096_spin2_play
16da8     0B 00 00 FF 
16dac     C0 E4 85 F1 | 	sub	objptr, ##5824
16db0                 | LR__1827
16db0     00 12 06 F6 | 	mov	arg01, #0
16db4     23 14 06 F6 | 	mov	arg02, #35
16db8     58 45 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16dbc                 | '     position 0,35: print "                             ";: position 4,35  
16dbc     00 12 06 F6 | 	mov	arg01, #0
16dc0     AC B3 B0 FD | 	call	#__system___getiolock_0474
16dc4     FD 12 02 F6 | 	mov	arg01, result1
16dc8     14 5A B0 FD | 	call	#__system___lockmem
16dcc     62 01 00 FF 
16dd0     96 14 06 F6 | 	mov	arg02, ##@LR__4974
16dd4     00 12 06 F6 | 	mov	arg01, #0
16dd8     00 16 06 F6 | 	mov	arg03, #0
16ddc     04 67 B0 FD | 	call	#__system___basic_print_string
16de0     00 12 06 F6 | 	mov	arg01, #0
16de4     88 B3 B0 FD | 	call	#__system___getiolock_0474
16de8     FD 00 68 FC | 	wrlong	#0, result1
16dec     04 12 06 F6 | 	mov	arg01, #4
16df0     23 14 06 F6 | 	mov	arg02, #35
16df4     1C 45 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16df8     44 FE 9F FD | 	jmp	#LR__1823
16dfc                 | LR__1828
16dfc     A7 F0 03 F6 | 	mov	ptra, fp
16e00     B2 00 A0 FD | 	call	#popregs_
16e04                 | _do_dir_ret
16e04     2D 00 64 FD | 	ret
16e08                 | 
16e08                 | ' 
16e08                 | ' sub do_if
16e08                 | _do_if
16e08     05 4A 05 F6 | 	mov	COUNT_, #5
16e0c     A8 00 A0 FD | 	call	#pushregs_
16e10     CC 33 BF FD | 	call	#_pop
16e14     FD 1E 0A F6 | 	mov	local01, result1 wz
16e18     FE 20 02 F6 | 	mov	local02, result2
16e1c     FF 22 02 F6 | 	mov	local03, result3
16e20                 | ' t1=pop()
16e20                 | ' ' if uresult=0, jump over else
16e20                 | ' if t1.result.uresult = 0 then 
16e20     BC 00 90 5D |  if_ne	jmp	#LR__1832
16e24                 | '   for i=lineptr_e to lineptr-1
16e24     6A 00 00 FF 
16e28     64 E4 05 F1 | 	add	objptr, ##54372
16e2c     F2 24 02 FB | 	rdlong	local04, objptr
16e30     04 E4 85 F1 | 	sub	objptr, #4
16e34     F2 26 02 FB | 	rdlong	local05, objptr
16e38     6A 00 00 FF 
16e3c     60 E4 85 F1 | 	sub	objptr, ##54368
16e40                 | LR__1830
16e40     13 25 52 F2 | 	cmps	local04, local05 wc
16e44     78 00 90 3D |  if_ae	jmp	#LR__1831
16e48     12 FF 01 F6 | 	mov	result3, local04
16e4c     01 FE 65 F0 | 	shl	result3, #1
16e50     12 FF 01 F1 | 	add	result3, local04
16e54     02 FE 65 F0 | 	shl	result3, #2
16e58     67 00 00 FF 
16e5c     60 E4 05 F1 | 	add	objptr, ##52832
16e60     F2 FE 01 F1 | 	add	result3, objptr
16e64     FF 1E 02 FB | 	rdlong	local01, result3
16e68     04 FE 05 F1 | 	add	result3, #4
16e6c     FF FC 01 FB | 	rdlong	result2, result3
16e70     12 FF 01 F6 | 	mov	result3, local04
16e74     01 FE 65 F0 | 	shl	result3, #1
16e78     12 FF 01 F1 | 	add	result3, local04
16e7c     02 FE 65 F0 | 	shl	result3, #2
16e80     F2 FE 01 F1 | 	add	result3, objptr
16e84     08 FE 05 F1 | 	add	result3, #8
16e88     FF FE 01 FB | 	rdlong	result3, result3
16e8c     FE 20 02 F6 | 	mov	local02, result2
16e90     FF 22 02 F6 | 	mov	local03, result3
16e94                 | '     t1=compiledline(i)
16e94                 | '     if t1.result_type=token_else then lineptr_e=i : return
16e94     5A 22 0E F2 | 	cmp	local03, #90 wz
16e98     67 00 00 FF 
16e9c     60 E4 85 F1 | 	sub	objptr, ##52832
16ea0     6A 00 00 AF 
16ea4     64 E4 05 A1 |  if_e	add	objptr, ##54372
16ea8     F2 24 62 AC |  if_e	wrlong	local04, objptr
16eac     6A 00 00 AF 
16eb0     64 E4 85 A1 |  if_e	sub	objptr, ##54372
16eb4     28 00 90 AD |  if_e	jmp	#LR__1833
16eb8     01 24 06 F1 | 	add	local04, #1
16ebc     80 FF 9F FD | 	jmp	#LR__1830
16ec0                 | LR__1831
16ec0     6A 00 00 FF 
16ec4     60 E4 05 F1 | 	add	objptr, ##54368
16ec8     F2 26 02 FB | 	rdlong	local05, objptr
16ecc     01 26 86 F1 | 	sub	local05, #1
16ed0     04 E4 05 F1 | 	add	objptr, #4
16ed4     F2 26 62 FC | 	wrlong	local05, objptr
16ed8     6A 00 00 FF 
16edc     64 E4 85 F1 | 	sub	objptr, ##54372
16ee0                 | LR__1832
16ee0                 | LR__1833
16ee0     A7 F0 03 F6 | 	mov	ptra, fp
16ee4     B2 00 A0 FD | 	call	#popregs_
16ee8                 | _do_if_ret
16ee8     2D 00 64 FD | 	ret
16eec                 | 
16eec                 | ' 
16eec                 | ' sub do_else
16eec                 | _do_else
16eec     6A 00 00 FF 
16ef0     60 E4 05 F1 | 	add	objptr, ##54368
16ef4     F2 00 02 FB | 	rdlong	_var01, objptr
16ef8     01 00 86 F1 | 	sub	_var01, #1
16efc     04 E4 05 F1 | 	add	objptr, #4
16f00     F2 00 62 FC | 	wrlong	_var01, objptr
16f04     6A 00 00 FF 
16f08     64 E4 85 F1 | 	sub	objptr, ##54372
16f0c                 | _do_else_ret
16f0c     2D 00 64 FD | 	ret
16f10                 | 
16f10                 | ' 
16f10                 | ' sub do_rad
16f10                 | _do_rad
16f10     7B 00 00 FF 
16f14     6C E4 05 F1 | 	add	objptr, ##63084
16f18     00 C0 9F FF 
16f1c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16f20     04 E4 05 F1 | 	add	objptr, #4
16f24     00 C0 9F FF 
16f28     F2 00 68 FC | 	wrlong	##1065353216, objptr
16f2c     7B 00 00 FF 
16f30     70 E4 85 F1 | 	sub	objptr, ##63088
16f34                 | _do_rad_ret
16f34     2D 00 64 FD | 	ret
16f38                 | 
16f38                 | ' 
16f38                 | ' sub do_deg
16f38                 | _do_deg
16f38     7B 00 00 FF 
16f3c     6C E4 05 F1 | 	add	objptr, ##63084
16f40     7D 47 9E FF 
16f44     F2 6A 68 FC | 	wrlong	##1016003125, objptr
16f48     04 E4 05 F1 | 	add	objptr, #4
16f4c     97 32 A1 FF 
16f50     F2 C2 69 FC | 	wrlong	##1113927393, objptr
16f54     7B 00 00 FF 
16f58     70 E4 85 F1 | 	sub	objptr, ##63088
16f5c                 | _do_deg_ret
16f5c     2D 00 64 FD | 	ret
16f60                 | 
16f60                 | ' 
16f60                 | ' sub do_int
16f60                 | _do_int
16f60     00 4A 05 F6 | 	mov	COUNT_, #0
16f64     A8 00 A0 FD | 	call	#pushregs_
16f68     0C F0 07 F1 | 	add	ptra, #12
16f6c     70 32 BF FD | 	call	#_pop
16f70     A7 FA 61 FC | 	wrlong	result1, fp
16f74     04 4E 05 F1 | 	add	fp, #4
16f78     A7 FC 61 FC | 	wrlong	result2, fp
16f7c     04 4E 05 F1 | 	add	fp, #4
16f80     A7 FE 61 FC | 	wrlong	result3, fp
16f84     08 4E 85 F1 | 	sub	fp, #8
16f88     A7 12 02 F6 | 	mov	arg01, fp
16f8c     8C BE BF FD | 	call	#_converttoint
16f90     A7 FA 61 FC | 	wrlong	result1, fp
16f94     08 4E 05 F1 | 	add	fp, #8
16f98     A7 38 68 FC | 	wrlong	#28, fp
16f9c     08 4E 85 F1 | 	sub	fp, #8
16fa0     A7 12 02 F6 | 	mov	arg01, fp
16fa4     D0 32 BF FD | 	call	#_push
16fa8     A7 F0 03 F6 | 	mov	ptra, fp
16fac     B2 00 A0 FD | 	call	#popregs_
16fb0                 | _do_int_ret
16fb0     2D 00 64 FD | 	ret
16fb4                 | 
16fb4                 | ' 
16fb4                 | ' sub do_nothing
16fb4                 | _do_nothing
16fb4                 | _do_nothing_ret
16fb4     2D 00 64 FD | 	ret
16fb8                 | 
16fb8                 | ' 
16fb8                 | ' sub do_brun
16fb8                 | _do_brun
16fb8     08 4A 05 F6 | 	mov	COUNT_, #8
16fbc     A8 00 A0 FD | 	call	#pushregs_
16fc0     1C 32 BF FD | 	call	#_pop
16fc4     FE 1A 02 F6 | 	mov	arg05, result2
16fc8     FF 18 02 F6 | 	mov	arg04, result3
16fcc     FD 1E 02 F6 | 	mov	local01, result1
16fd0     0D 21 02 F6 | 	mov	local02, arg05
16fd4     0C 23 02 F6 | 	mov	local03, arg04
16fd8                 | ' 
16fd8                 | ' t1=pop() 
16fd8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
16fd8     2B 22 0E F2 | 	cmp	local03, #43 wz
16fdc     10 00 90 5D |  if_ne	jmp	#LR__1840
16fe0     0F 13 02 F6 | 	mov	arg01, local01
16fe4     84 74 BF FD | 	call	#_convertstring
16fe8     FD 1E 02 F6 | 	mov	local01, result1
16fec     1F 22 06 F6 | 	mov	local03, #31
16ff0                 | LR__1840
16ff0                 | ' if t1.result_type=result_string then
16ff0     1F 22 0E F2 | 	cmp	local03, #31 wz
16ff4     EC 01 90 5D |  if_ne	jmp	#LR__1844
16ff8     0F 25 02 F6 | 	mov	local04, local01
16ffc                 | '   filename=t1.result.sresult
16ffc                 | '   if left$(filename,1)="/" then 
16ffc     12 13 02 F6 | 	mov	arg01, local04
17000     01 14 06 F6 | 	mov	arg02, #1
17004     1C 78 B0 FD | 	call	#__system__Left_S
17008     FD 12 02 F6 | 	mov	arg01, result1
1700c     62 01 00 FF 
17010     B4 14 06 F6 | 	mov	arg02, ##@LR__4975
17014     F0 57 B0 FD | 	call	#__system___string_cmp
17018     00 FA 0D F2 | 	cmp	result1, #0 wz
1701c     12 27 02 A6 |  if_e	mov	local05, local04
17020     14 00 90 AD |  if_e	jmp	#LR__1841
17024     62 01 00 FF 
17028     B6 12 06 F6 | 	mov	arg01, ##@LR__4976
1702c     12 15 02 F6 | 	mov	arg02, local04
17030     08 58 B0 FD | 	call	#__system___string_concat
17034     FD 26 02 F6 | 	mov	local05, result1
17038                 | LR__1841
17038                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
17038                 | '   open fullfilename for input as #9
17038     09 12 06 F6 | 	mov	arg01, #9
1703c     13 15 02 F6 | 	mov	arg02, local05
17040     00 16 06 F6 | 	mov	arg03, #0
17044     98 63 B0 FD | 	call	#__system___basic_open_string
17048     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1704c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
17050     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
17054     FD 28 0A F6 | 	mov	local06, result1 wz
17058                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
17058     8C 00 90 AD |  if_e	jmp	#LR__1842
1705c     00 12 06 F6 | 	mov	arg01, #0
17060     0C B1 B0 FD | 	call	#__system___getiolock_0474
17064     FD 12 02 F6 | 	mov	arg01, result1
17068     74 57 B0 FD | 	call	#__system___lockmem
1706c     62 01 00 FF 
17070     BF 14 06 F6 | 	mov	arg02, ##@LR__4977
17074     00 12 06 F6 | 	mov	arg01, #0
17078     00 16 06 F6 | 	mov	arg03, #0
1707c     64 64 B0 FD | 	call	#__system___basic_print_string
17080     00 12 06 F6 | 	mov	arg01, #0
17084     14 15 02 F6 | 	mov	arg02, local06
17088     00 16 06 F6 | 	mov	arg03, #0
1708c     0A 18 06 F6 | 	mov	arg04, #10
17090     94 64 B0 FD | 	call	#__system___basic_print_integer
17094     62 01 00 FF 
17098     CD 14 06 F6 | 	mov	arg02, ##@LR__4978
1709c     00 12 06 F6 | 	mov	arg01, #0
170a0     00 16 06 F6 | 	mov	arg03, #0
170a4     3C 64 B0 FD | 	call	#__system___basic_print_string
170a8     14 13 02 F6 | 	mov	arg01, local06
170ac     C0 7D B0 FD | 	call	#__system___strerror
170b0     FD 14 02 F6 | 	mov	arg02, result1
170b4     00 12 06 F6 | 	mov	arg01, #0
170b8     00 16 06 F6 | 	mov	arg03, #0
170bc     24 64 B0 FD | 	call	#__system___basic_print_string
170c0     00 12 06 F6 | 	mov	arg01, #0
170c4     0A 14 06 F6 | 	mov	arg02, #10
170c8     00 16 06 F6 | 	mov	arg03, #0
170cc     BC 63 B0 FD | 	call	#__system___basic_print_char
170d0     00 12 06 F6 | 	mov	arg01, #0
170d4     98 B0 B0 FD | 	call	#__system___getiolock_0474
170d8     FD 00 68 FC | 	wrlong	#0, result1
170dc     09 12 06 F6 | 	mov	arg01, #9
170e0     C0 A6 B0 FD | 	call	#__system__close
170e4     FC 00 90 FD | 	jmp	#LR__1845
170e8                 | LR__1842
170e8     01 2A 06 F6 | 	mov	local07, #1
170ec     00 2C 06 F6 | 	mov	local08, #0
170f0                 | '   do
170f0                 | LR__1843
170f0                 | '     get #9,pos,block(0),1024,r : pos+=r	
170f0     77 00 00 FF 
170f4     90 E5 05 F1 | 	add	objptr, ##61328
170f8     F2 16 02 F6 | 	mov	arg03, objptr
170fc     77 00 00 FF 
17100     90 E5 85 F1 | 	sub	objptr, ##61328
17104     09 12 06 F6 | 	mov	arg01, #9
17108     15 15 02 F6 | 	mov	arg02, local07
1710c     0A 18 C6 F9 | 	decod	arg04, #10
17110     01 1A 06 F6 | 	mov	arg05, #1
17114     DC 64 B0 FD | 	call	#__system___basic_get
17118     FD 28 02 F6 | 	mov	local06, result1
1711c     FD 2A 02 F1 | 	add	local07, result1
17120     77 00 00 FF 
17124     90 E5 05 F1 | 	add	objptr, ##61328
17128     F2 12 02 F6 | 	mov	arg01, objptr
1712c     16 15 02 F6 | 	mov	arg02, local08
17130     0A 16 C6 F9 | 	decod	arg03, #10
17134     6C 00 00 FF 
17138     D0 E4 85 F1 | 	sub	objptr, ##55504
1713c     38 4B B0 FD | 	call	#_psram_spin2_write
17140     0B 00 00 FF 
17144     C0 E4 85 F1 | 	sub	objptr, ##5824
17148     14 2D 02 F1 | 	add	local08, local06
1714c     02 00 00 FF 
17150     00 28 0E F2 | 	cmp	local06, ##1024 wz
17154     E0 03 00 AF 
17158     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1715c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1843
17160     56 00 00 FF 
17164     E0 E5 05 F1 | 	add	objptr, ##44512
17168     F2 12 02 FB | 	rdlong	arg01, objptr
1716c     03 12 62 FD | 	cogstop	arg01
17170     04 E4 05 F1 | 	add	objptr, #4
17174     F2 12 02 FB | 	rdlong	arg01, objptr
17178     03 12 62 FD | 	cogstop	arg01
1717c     04 E4 05 F1 | 	add	objptr, #4
17180     F2 12 02 FB | 	rdlong	arg01, objptr
17184     03 12 62 FD | 	cogstop	arg01
17188     22 00 00 FF 
1718c     E0 E5 05 F1 | 	add	objptr, ##17888
17190     F2 12 02 FB | 	rdlong	arg01, objptr
17194     03 12 62 FD | 	cogstop	arg01
17198     18 00 00 FF 
1719c     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
171a0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
171a4     18 00 00 FF 
171a8     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
171ac     22 00 00 FF 
171b0     D8 E5 85 F1 | 	sub	objptr, ##17880
171b4     1E 2C 06 F6 | 	mov	local08, #30
171b8     28 E4 61 FD | 	setq	objptr
171bc     0A 2D F2 FC | 	coginit	local08, arg02 wc
171c0     01 2C 66 C6 |  if_b	neg	local08, #1
171c4     24 00 00 FF 
171c8     10 E5 05 F1 | 	add	objptr, ##18704
171cc     F2 2C 62 FC | 	wrlong	local08, objptr
171d0     7B 00 00 FF 
171d4     00 E5 85 F1 | 	sub	objptr, ##63232
171d8     00 12 06 F6 | 	mov	arg01, #0
171dc     01 12 62 FD | 	cogid	arg01
171e0     03 12 62 FD | 	cogstop	arg01
171e4                 | LR__1844
171e4                 | LR__1845
171e4     A7 F0 03 F6 | 	mov	ptra, fp
171e8     B2 00 A0 FD | 	call	#popregs_
171ec                 | _do_brun_ret
171ec     2D 00 64 FD | 	ret
171f0                 | 
171f0                 | ' 
171f0                 | ' 
171f0                 | ' sub do_mouse
171f0                 | _do_mouse
171f0     EC 2F BF FD | 	call	#_pop
171f4     00 FA 4D F2 | 	cmps	result1, #0 wz
171f8                 | ' t1=pop()
171f8                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
171f8     14 00 90 5D |  if_ne	jmp	#LR__1850
171fc     10 12 06 F6 | 	mov	arg01, #16
17200     00 14 06 F6 | 	mov	arg02, #0
17204     00 16 06 F6 | 	mov	arg03, #0
17208     F8 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
1720c     10 00 90 FD | 	jmp	#LR__1851
17210                 | LR__1850
17210     10 12 06 F6 | 	mov	arg01, #16
17214     20 14 06 F6 | 	mov	arg02, #32
17218     20 16 06 F6 | 	mov	arg03, #32
1721c     E4 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
17220                 | LR__1851
17220                 | _do_mouse_ret
17220     2D 00 64 FD | 	ret
17224                 | 
17224                 | ' 
17224                 | ' sub do_cursor
17224                 | _do_cursor
17224     B8 2F BF FD | 	call	#_pop
17228     00 FA 4D F2 | 	cmps	result1, #0 wz
1722c                 | ' t1=pop()
1722c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1722c     14 00 90 5D |  if_ne	jmp	#LR__1860
17230     11 12 06 F6 | 	mov	arg01, #17
17234     00 14 06 F6 | 	mov	arg02, #0
17238     00 16 06 F6 | 	mov	arg03, #0
1723c     C4 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
17240     10 00 90 FD | 	jmp	#LR__1861
17244                 | LR__1860
17244     11 12 06 F6 | 	mov	arg01, #17
17248     08 14 06 F6 | 	mov	arg02, #8
1724c     10 16 06 F6 | 	mov	arg03, #16
17250     B0 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
17254                 | LR__1861
17254                 | _do_cursor_ret
17254     2D 00 64 FD | 	ret
17258                 | 
17258                 | ' 
17258                 | ' 
17258                 | ' sub do_click
17258                 | _do_click
17258     84 2F BF FD | 	call	#_pop
1725c     00 FA 4D F2 | 	cmps	result1, #0 wz
17260                 | ' t1=pop()
17260                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
17260     79 00 00 AF 
17264     C4 E5 05 A1 |  if_e	add	objptr, ##62404
17268     F2 00 68 AC |  if_e	wrlong	#0, objptr
1726c     79 00 00 FF 
17270     C4 E5 C5 F3 | 	sumz	objptr, ##62404
17274     F2 02 68 5C |  if_ne	wrlong	#1, objptr
17278     79 00 00 5F 
1727c     C4 E5 85 51 |  if_ne	sub	objptr, ##62404
17280                 | _do_click_ret
17280     2D 00 64 FD | 	ret
17284                 | 
17284                 | ' 
17284                 | ' 
17284                 | ' sub do_beep
17284                 | _do_beep
17284     02 4A 05 F6 | 	mov	COUNT_, #2
17288     A8 00 A0 FD | 	call	#pushregs_
1728c     20 F0 07 F1 | 	add	ptra, #32
17290     4C 2F BF FD | 	call	#_pop
17294     FD 1E 02 F6 | 	mov	local01, result1
17298     FE 1C 02 F6 | 	mov	arg06, result2
1729c     FF 20 02 F6 | 	mov	local02, result3
172a0     0C 4E 05 F1 | 	add	fp, #12
172a4     A7 1E 62 FC | 	wrlong	local01, fp
172a8     04 4E 05 F1 | 	add	fp, #4
172ac     A7 1C 62 FC | 	wrlong	arg06, fp
172b0     04 4E 05 F1 | 	add	fp, #4
172b4     A7 20 62 FC | 	wrlong	local02, fp
172b8     14 4E 85 F1 | 	sub	fp, #20
172bc     20 2F BF FD | 	call	#_pop
172c0     A7 FA 61 FC | 	wrlong	result1, fp
172c4     04 4E 05 F1 | 	add	fp, #4
172c8     A7 FC 61 FC | 	wrlong	result2, fp
172cc     04 4E 05 F1 | 	add	fp, #4
172d0     A7 FE 61 FC | 	wrlong	result3, fp
172d4                 | ' 
172d4                 | ' t2=pop()
172d4                 | ' t1=pop()
172d4                 | ' 
172d4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
172d4     08 4E 85 F1 | 	sub	fp, #8
172d8     1C FE 0D F2 | 	cmp	result3, #28 wz
172dc     08 4E 05 51 |  if_ne	add	fp, #8
172e0     A7 20 02 5B |  if_ne	rdlong	local02, fp
172e4     08 4E 85 51 |  if_ne	sub	fp, #8
172e8     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
172ec     A7 1E 02 AB |  if_e	rdlong	local01, fp
172f0     18 4E 05 A1 |  if_e	add	fp, #24
172f4     A7 1E 62 AC |  if_e	wrlong	local01, fp
172f8     18 4E 85 A1 |  if_e	sub	fp, #24
172fc     14 00 90 AD |  if_e	jmp	#LR__1870
17300     A7 12 02 F6 | 	mov	arg01, fp
17304     14 BB BF FD | 	call	#_converttoint
17308     18 4E 05 F1 | 	add	fp, #24
1730c     A7 FA 61 FC | 	wrlong	result1, fp
17310     18 4E 85 F1 | 	sub	fp, #24
17314                 | LR__1870
17314     1C 4E 05 F1 | 	add	fp, #28
17318     A7 FE 48 FC | 	wrbyte	#127, fp
1731c     01 4E 05 F1 | 	add	fp, #1
17320     A7 00 49 FC | 	wrbyte	#128, fp
17324     01 4E 85 F1 | 	sub	fp, #1
17328     A7 14 02 F6 | 	mov	arg02, fp
1732c     04 4E 85 F1 | 	sub	fp, #4
17330     A7 16 02 FB | 	rdlong	arg03, fp
17334     18 4E 85 F1 | 	sub	fp, #24
17338     01 16 66 F0 | 	shl	arg03, #1
1733c     07 12 06 F6 | 	mov	arg01, #7
17340     0E 18 C6 F9 | 	decod	arg04, #14
17344     02 1A 06 F6 | 	mov	arg05, #2
17348     00 1C 06 F6 | 	mov	arg06, #0
1734c     0B 00 00 FF 
17350     C0 E4 05 F1 | 	add	objptr, ##5824
17354     D4 50 B0 FD | 	call	#_audio096_spin2_play8
17358     0B 00 00 FF 
1735c     C0 E4 85 F1 | 	sub	objptr, ##5824
17360     0C 4E 05 F1 | 	add	fp, #12
17364     A7 12 02 F6 | 	mov	arg01, fp
17368     0C 4E 85 F1 | 	sub	fp, #12
1736c     08 2F BF FD | 	call	#_push
17370     B8 F5 BF FD | 	call	#_do_waitms
17374     07 12 06 F6 | 	mov	arg01, #7
17378     0B 00 00 FF 
1737c     C0 E4 05 F1 | 	add	objptr, ##5824
17380     5C 51 B0 FD | 	call	#_audio096_spin2_stop
17384     0B 00 00 FF 
17388     C0 E4 85 F1 | 	sub	objptr, ##5824
1738c     A7 F0 03 F6 | 	mov	ptra, fp
17390     B2 00 A0 FD | 	call	#popregs_
17394                 | _do_beep_ret
17394     2D 00 64 FD | 	ret
17398                 | 
17398                 | ' 
17398                 | ' sub do_no_command
17398                 | _do_no_command
17398     17 12 06 F6 | 	mov	arg01, #23
1739c     58 1C B0 FD | 	call	#_printerror
173a0                 | _do_no_command_ret
173a0     2D 00 64 FD | 	ret
173a4                 | 
173a4                 | ' 
173a4                 | ' sub do_negative
173a4                 | _do_negative
173a4     02 4A 05 F6 | 	mov	COUNT_, #2
173a8     A8 00 A0 FD | 	call	#pushregs_
173ac     0C F0 07 F1 | 	add	ptra, #12
173b0     2C 2E BF FD | 	call	#_pop
173b4     FF 1E 02 F6 | 	mov	local01, result3
173b8     A7 FA 61 FC | 	wrlong	result1, fp
173bc     04 4E 05 F1 | 	add	fp, #4
173c0     A7 FC 61 FC | 	wrlong	result2, fp
173c4     04 4E 05 F1 | 	add	fp, #4
173c8     A7 1E 62 FC | 	wrlong	local01, fp
173cc                 | ' t1=pop()
173cc                 | ' if t1.result_type=result_int then 
173cc     08 4E 85 F1 | 	sub	fp, #8
173d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
173d4     A7 20 02 AB |  if_e	rdlong	local02, fp
173d8     10 1F 62 A6 |  if_e	neg	local01, local02
173dc     A7 1E 62 AC |  if_e	wrlong	local01, fp
173e0     5C 00 90 AD |  if_e	jmp	#LR__1882
173e4     08 4E 05 F1 | 	add	fp, #8
173e8     A7 1E 02 FB | 	rdlong	local01, fp
173ec     08 4E 85 F1 | 	sub	fp, #8
173f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
173f4     1C 00 90 5D |  if_ne	jmp	#LR__1880
173f8     A7 20 02 FB | 	rdlong	local02, fp
173fc     10 1F 62 F6 | 	neg	local01, local02
17400     A7 1E 62 FC | 	wrlong	local01, fp
17404     08 4E 05 F1 | 	add	fp, #8
17408     A7 38 68 FC | 	wrlong	#28, fp
1740c     08 4E 85 F1 | 	sub	fp, #8
17410     2C 00 90 FD | 	jmp	#LR__1881
17414                 | LR__1880
17414     08 4E 05 F1 | 	add	fp, #8
17418     A7 1E 02 FB | 	rdlong	local01, fp
1741c     08 4E 85 F1 | 	sub	fp, #8
17420     1E 1E 0E F2 | 	cmp	local01, #30 wz
17424     A7 FA 01 AB |  if_e	rdlong	result1, fp
17428     1F FA E5 A4 |  if_e	bitnot	result1, #31
1742c     A7 FA 61 AC |  if_e	wrlong	result1, fp
17430     08 4E 05 51 |  if_ne	add	fp, #8
17434     A7 FE 69 5C |  if_ne	wrlong	#255, fp
17438     08 4E 85 51 |  if_ne	sub	fp, #8
1743c     A7 50 68 5C |  if_ne	wrlong	#40, fp
17440                 | LR__1881
17440                 | LR__1882
17440     A7 12 02 F6 | 	mov	arg01, fp
17444     30 2E BF FD | 	call	#_push
17448     A7 F0 03 F6 | 	mov	ptra, fp
1744c     B2 00 A0 FD | 	call	#popregs_
17450                 | _do_negative_ret
17450     2D 00 64 FD | 	ret
17454                 | 
17454                 | ' 
17454                 | ' sub do_abs
17454                 | _do_abs
17454     01 4A 05 F6 | 	mov	COUNT_, #1
17458     A8 00 A0 FD | 	call	#pushregs_
1745c     0C F0 07 F1 | 	add	ptra, #12
17460     7C 2D BF FD | 	call	#_pop
17464     FF 1E 02 F6 | 	mov	local01, result3
17468     A7 FA 61 FC | 	wrlong	result1, fp
1746c     04 4E 05 F1 | 	add	fp, #4
17470     A7 FC 61 FC | 	wrlong	result2, fp
17474     04 4E 05 F1 | 	add	fp, #4
17478     A7 1E 62 FC | 	wrlong	local01, fp
1747c                 | ' t1=pop()
1747c                 | ' if t1.result_type=result_int then 
1747c     08 4E 85 F1 | 	sub	fp, #8
17480     1C 1E 0E F2 | 	cmp	local01, #28 wz
17484     A7 12 02 AB |  if_e	rdlong	arg01, fp
17488     09 1F 42 A6 |  if_e	abs	local01, arg01
1748c     A7 1E 62 AC |  if_e	wrlong	local01, fp
17490     2C 00 90 AD |  if_e	jmp	#LR__1890
17494     08 4E 05 F1 | 	add	fp, #8
17498     A7 1E 02 FB | 	rdlong	local01, fp
1749c     08 4E 85 F1 | 	sub	fp, #8
174a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
174a4     A7 FA 01 AB |  if_e	rdlong	result1, fp
174a8     1F FA 05 A4 |  if_e	bitl	result1, #31
174ac     A7 FA 61 AC |  if_e	wrlong	result1, fp
174b0     08 4E 05 51 |  if_ne	add	fp, #8
174b4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
174b8     08 4E 85 51 |  if_ne	sub	fp, #8
174bc     A7 50 68 5C |  if_ne	wrlong	#40, fp
174c0                 | LR__1890
174c0     A7 12 02 F6 | 	mov	arg01, fp
174c4     B0 2D BF FD | 	call	#_push
174c8     A7 F0 03 F6 | 	mov	ptra, fp
174cc     B2 00 A0 FD | 	call	#popregs_
174d0                 | _do_abs_ret
174d0     2D 00 64 FD | 	ret
174d4                 | 
174d4                 | ' 
174d4                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
174d4                 | ' 
174d4                 | ' ''----------------------------------------------------------------------------------------------------
174d4                 | ' ''------------------ Initialization procedures -------------------------------------------------------
174d4                 | ' ''----------------------------------------------------------------------------------------------------
174d4                 | ' 
174d4                 | ' ''--------------------------- Command function pointers
174d4                 | ' 
174d4                 | ' sub init_commands
174d4                 | _init_commands
174d4                 | ' 
174d4                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
174d4     00 00 06 F6 | 	mov	_var01, #0
174d8     97 16 48 FB | 	callpa	#(@LR__1901-@LR__1900)>>2,fcache_load_ptr_
174dc                 | LR__1900
174dc     00 FB 01 F6 | 	mov	result1, _var01
174e0     02 FA 65 F0 | 	shl	result1, #2
174e4     63 00 00 FF 
174e8     44 E4 05 F1 | 	add	objptr, ##50756
174ec     F2 FA 01 F1 | 	add	result1, objptr
174f0     63 00 00 FF 
174f4     44 E4 85 F1 | 	sub	objptr, ##50756
174f8     FD E4 61 FC | 	wrlong	objptr, result1
174fc     01 00 06 F1 | 	add	_var01, #1
17500     00 01 56 F2 | 	cmps	_var01, #256 wc
17504     D4 FF 9F CD |  if_b	jmp	#LR__1900
17508                 | LR__1901
17508     F2 FA 01 F6 | 	mov	result1, objptr
1750c     14 FA 25 F4 | 	bith	result1, #20
17510     63 00 00 FF 
17514     48 E4 05 F1 | 	add	objptr, ##50760
17518     F2 FA 61 FC | 	wrlong	result1, objptr
1751c     63 00 00 FF 
17520     48 E4 85 F1 | 	sub	objptr, ##50760
17524     F2 FA 01 F6 | 	mov	result1, objptr
17528     15 FA 25 F4 | 	bith	result1, #21
1752c     63 00 00 FF 
17530     4C E4 05 F1 | 	add	objptr, ##50764
17534     F2 FA 61 FC | 	wrlong	result1, objptr
17538     63 00 00 FF 
1753c     4C E4 85 F1 | 	sub	objptr, ##50764
17540     F2 FA 01 F6 | 	mov	result1, objptr
17544     34 FA 25 F4 | 	bith	result1, #52
17548     63 00 00 FF 
1754c     50 E4 05 F1 | 	add	objptr, ##50768
17550     F2 FA 61 FC | 	wrlong	result1, objptr
17554     63 00 00 FF 
17558     50 E4 85 F1 | 	sub	objptr, ##50768
1755c     F2 FA 01 F6 | 	mov	result1, objptr
17560     16 FA 25 F4 | 	bith	result1, #22
17564     63 00 00 FF 
17568     58 E4 05 F1 | 	add	objptr, ##50776
1756c     F2 FA 61 FC | 	wrlong	result1, objptr
17570     63 00 00 FF 
17574     58 E4 85 F1 | 	sub	objptr, ##50776
17578     F2 FA 01 F6 | 	mov	result1, objptr
1757c     00 28 00 FF 
17580     00 FA 45 F5 | 	or	result1, ##5242880
17584     63 00 00 FF 
17588     5C E4 05 F1 | 	add	objptr, ##50780
1758c     F2 FA 61 FC | 	wrlong	result1, objptr
17590     63 00 00 FF 
17594     5C E4 85 F1 | 	sub	objptr, ##50780
17598     F2 FA 01 F6 | 	mov	result1, objptr
1759c     35 FA 25 F4 | 	bith	result1, #53
175a0     63 00 00 FF 
175a4     60 E4 05 F1 | 	add	objptr, ##50784
175a8     F2 FA 61 FC | 	wrlong	result1, objptr
175ac     63 00 00 FF 
175b0     60 E4 85 F1 | 	sub	objptr, ##50784
175b4     F2 FA 01 F6 | 	mov	result1, objptr
175b8     54 FA 25 F4 | 	bith	result1, #84
175bc     63 00 00 FF 
175c0     64 E4 05 F1 | 	add	objptr, ##50788
175c4     F2 FA 61 FC | 	wrlong	result1, objptr
175c8     63 00 00 FF 
175cc     64 E4 85 F1 | 	sub	objptr, ##50788
175d0     F2 FA 01 F6 | 	mov	result1, objptr
175d4     17 FA 25 F4 | 	bith	result1, #23
175d8     63 00 00 FF 
175dc     68 E4 05 F1 | 	add	objptr, ##50792
175e0     F2 FA 61 FC | 	wrlong	result1, objptr
175e4     63 00 00 FF 
175e8     68 E4 85 F1 | 	sub	objptr, ##50792
175ec     F2 FA 01 F6 | 	mov	result1, objptr
175f0     00 48 00 FF 
175f4     00 FA 45 F5 | 	or	result1, ##9437184
175f8     63 00 00 FF 
175fc     6C E4 05 F1 | 	add	objptr, ##50796
17600     F2 FA 61 FC | 	wrlong	result1, objptr
17604     63 00 00 FF 
17608     6C E4 85 F1 | 	sub	objptr, ##50796
1760c     F2 FA 01 F6 | 	mov	result1, objptr
17610     00 50 00 FF 
17614     00 FA 45 F5 | 	or	result1, ##10485760
17618     63 00 00 FF 
1761c     70 E4 05 F1 | 	add	objptr, ##50800
17620     F2 FA 61 FC | 	wrlong	result1, objptr
17624     63 00 00 FF 
17628     70 E4 85 F1 | 	sub	objptr, ##50800
1762c     F2 FA 01 F6 | 	mov	result1, objptr
17630     00 58 00 FF 
17634     00 FA 45 F5 | 	or	result1, ##11534336
17638     63 00 00 FF 
1763c     74 E4 05 F1 | 	add	objptr, ##50804
17640     F2 FA 61 FC | 	wrlong	result1, objptr
17644     63 00 00 FF 
17648     74 E4 85 F1 | 	sub	objptr, ##50804
1764c     F2 FA 01 F6 | 	mov	result1, objptr
17650     36 FA 25 F4 | 	bith	result1, #54
17654     63 00 00 FF 
17658     88 E4 05 F1 | 	add	objptr, ##50824
1765c     F2 FA 61 FC | 	wrlong	result1, objptr
17660     63 00 00 FF 
17664     88 E4 85 F1 | 	sub	objptr, ##50824
17668     F2 FA 01 F6 | 	mov	result1, objptr
1766c     00 68 00 FF 
17670     00 FA 45 F5 | 	or	result1, ##13631488
17674     63 00 00 FF 
17678     B8 E4 05 F1 | 	add	objptr, ##50872
1767c     F2 FA 61 FC | 	wrlong	result1, objptr
17680     63 00 00 FF 
17684     B8 E4 85 F1 | 	sub	objptr, ##50872
17688     F2 FA 01 F6 | 	mov	result1, objptr
1768c     00 68 00 FF 
17690     00 FA 45 F5 | 	or	result1, ##13631488
17694     63 00 00 FF 
17698     B4 E4 05 F1 | 	add	objptr, ##50868
1769c     F2 FA 61 FC | 	wrlong	result1, objptr
176a0     63 00 00 FF 
176a4     B4 E4 85 F1 | 	sub	objptr, ##50868
176a8     F2 FA 01 F6 | 	mov	result1, objptr
176ac     00 68 00 FF 
176b0     00 FA 45 F5 | 	or	result1, ##13631488
176b4     63 00 00 FF 
176b8     BC E4 05 F1 | 	add	objptr, ##50876
176bc     F2 FA 61 FC | 	wrlong	result1, objptr
176c0     63 00 00 FF 
176c4     BC E4 85 F1 | 	sub	objptr, ##50876
176c8     F2 FA 01 F6 | 	mov	result1, objptr
176cc     00 68 00 FF 
176d0     00 FA 45 F5 | 	or	result1, ##13631488
176d4     63 00 00 FF 
176d8     C0 E4 05 F1 | 	add	objptr, ##50880
176dc     F2 FA 61 FC | 	wrlong	result1, objptr
176e0     63 00 00 FF 
176e4     C0 E4 85 F1 | 	sub	objptr, ##50880
176e8     F2 FA 01 F6 | 	mov	result1, objptr
176ec     00 68 00 FF 
176f0     00 FA 45 F5 | 	or	result1, ##13631488
176f4     63 00 00 FF 
176f8     F0 E4 05 F1 | 	add	objptr, ##50928
176fc     F2 FA 61 FC | 	wrlong	result1, objptr
17700     63 00 00 FF 
17704     F0 E4 85 F1 | 	sub	objptr, ##50928
17708     F2 FA 01 F6 | 	mov	result1, objptr
1770c     55 FA 25 F4 | 	bith	result1, #85
17710     63 00 00 FF 
17714     A0 E4 05 F1 | 	add	objptr, ##50848
17718     F2 FA 61 FC | 	wrlong	result1, objptr
1771c     63 00 00 FF 
17720     A0 E4 85 F1 | 	sub	objptr, ##50848
17724     F2 FA 01 F6 | 	mov	result1, objptr
17728     00 68 00 FF 
1772c     00 FA 45 F5 | 	or	result1, ##13631488
17730     63 00 00 FF 
17734     C4 E4 05 F1 | 	add	objptr, ##50884
17738     F2 FA 61 FC | 	wrlong	result1, objptr
1773c     63 00 00 FF 
17740     C4 E4 85 F1 | 	sub	objptr, ##50884
17744     F2 FA 01 F6 | 	mov	result1, objptr
17748     00 68 00 FF 
1774c     00 FA 45 F5 | 	or	result1, ##13631488
17750     63 00 00 FF 
17754     C8 E4 05 F1 | 	add	objptr, ##50888
17758     F2 FA 61 FC | 	wrlong	result1, objptr
1775c     63 00 00 FF 
17760     C8 E4 85 F1 | 	sub	objptr, ##50888
17764     F2 FA 01 F6 | 	mov	result1, objptr
17768     00 68 00 FF 
1776c     00 FA 45 F5 | 	or	result1, ##13631488
17770     63 00 00 FF 
17774     CC E4 05 F1 | 	add	objptr, ##50892
17778     F2 FA 61 FC | 	wrlong	result1, objptr
1777c     63 00 00 FF 
17780     CC E4 85 F1 | 	sub	objptr, ##50892
17784     F2 FA 01 F6 | 	mov	result1, objptr
17788     74 FA 25 F4 | 	bith	result1, #116
1778c     63 00 00 FF 
17790     44 E5 05 F1 | 	add	objptr, ##51012
17794     F2 FA 61 FC | 	wrlong	result1, objptr
17798     63 00 00 FF 
1779c     44 E5 85 F1 | 	sub	objptr, ##51012
177a0     F2 FA 01 F6 | 	mov	result1, objptr
177a4     18 FA 25 F4 | 	bith	result1, #24
177a8     63 00 00 FF 
177ac     48 E5 05 F1 | 	add	objptr, ##51016
177b0     F2 FA 61 FC | 	wrlong	result1, objptr
177b4     63 00 00 FF 
177b8     48 E5 85 F1 | 	sub	objptr, ##51016
177bc     F2 FA 01 F6 | 	mov	result1, objptr
177c0     00 88 00 FF 
177c4     00 FA 45 F5 | 	or	result1, ##17825792
177c8     63 00 00 FF 
177cc     4C E5 05 F1 | 	add	objptr, ##51020
177d0     F2 FA 61 FC | 	wrlong	result1, objptr
177d4     63 00 00 FF 
177d8     4C E5 85 F1 | 	sub	objptr, ##51020
177dc     F2 FA 01 F6 | 	mov	result1, objptr
177e0     00 90 00 FF 
177e4     00 FA 45 F5 | 	or	result1, ##18874368
177e8     63 00 00 FF 
177ec     50 E5 05 F1 | 	add	objptr, ##51024
177f0     F2 FA 61 FC | 	wrlong	result1, objptr
177f4     63 00 00 FF 
177f8     50 E5 85 F1 | 	sub	objptr, ##51024
177fc     F2 FA 01 F6 | 	mov	result1, objptr
17800     00 98 00 FF 
17804     00 FA 45 F5 | 	or	result1, ##19922944
17808     63 00 00 FF 
1780c     54 E5 05 F1 | 	add	objptr, ##51028
17810     F2 FA 61 FC | 	wrlong	result1, objptr
17814     63 00 00 FF 
17818     54 E5 85 F1 | 	sub	objptr, ##51028
1781c     F2 FA 01 F6 | 	mov	result1, objptr
17820     00 A0 00 FF 
17824     00 FA 45 F5 | 	or	result1, ##20971520
17828     63 00 00 FF 
1782c     58 E5 05 F1 | 	add	objptr, ##51032
17830     F2 FA 61 FC | 	wrlong	result1, objptr
17834     63 00 00 FF 
17838     58 E5 85 F1 | 	sub	objptr, ##51032
1783c     F2 FA 01 F6 | 	mov	result1, objptr
17840     00 A8 00 FF 
17844     00 FA 45 F5 | 	or	result1, ##22020096
17848     63 00 00 FF 
1784c     5C E5 05 F1 | 	add	objptr, ##51036
17850     F2 FA 61 FC | 	wrlong	result1, objptr
17854     63 00 00 FF 
17858     5C E5 85 F1 | 	sub	objptr, ##51036
1785c     F2 FA 01 F6 | 	mov	result1, objptr
17860     00 B0 00 FF 
17864     00 FA 45 F5 | 	or	result1, ##23068672
17868     63 00 00 FF 
1786c     60 E5 05 F1 | 	add	objptr, ##51040
17870     F2 FA 61 FC | 	wrlong	result1, objptr
17874     63 00 00 FF 
17878     60 E5 85 F1 | 	sub	objptr, ##51040
1787c     F2 FA 01 F6 | 	mov	result1, objptr
17880     00 B8 00 FF 
17884     00 FA 45 F5 | 	or	result1, ##24117248
17888     63 00 00 FF 
1788c     64 E5 05 F1 | 	add	objptr, ##51044
17890     F2 FA 61 FC | 	wrlong	result1, objptr
17894     63 00 00 FF 
17898     64 E5 85 F1 | 	sub	objptr, ##51044
1789c     F2 FA 01 F6 | 	mov	result1, objptr
178a0     37 FA 25 F4 | 	bith	result1, #55
178a4     63 00 00 FF 
178a8     68 E5 05 F1 | 	add	objptr, ##51048
178ac     F2 FA 61 FC | 	wrlong	result1, objptr
178b0     63 00 00 FF 
178b4     68 E5 85 F1 | 	sub	objptr, ##51048
178b8     F2 FA 01 F6 | 	mov	result1, objptr
178bc     00 C8 00 FF 
178c0     00 FA 45 F5 | 	or	result1, ##26214400
178c4     63 00 00 FF 
178c8     6C E5 05 F1 | 	add	objptr, ##51052
178cc     F2 FA 61 FC | 	wrlong	result1, objptr
178d0     63 00 00 FF 
178d4     6C E5 85 F1 | 	sub	objptr, ##51052
178d8     F2 FA 01 F6 | 	mov	result1, objptr
178dc     00 D0 00 FF 
178e0     00 FA 45 F5 | 	or	result1, ##27262976
178e4     63 00 00 FF 
178e8     70 E5 05 F1 | 	add	objptr, ##51056
178ec     F2 FA 61 FC | 	wrlong	result1, objptr
178f0     63 00 00 FF 
178f4     70 E5 85 F1 | 	sub	objptr, ##51056
178f8     F2 FA 01 F6 | 	mov	result1, objptr
178fc     00 D8 00 FF 
17900     00 FA 45 F5 | 	or	result1, ##28311552
17904     63 00 00 FF 
17908     74 E5 05 F1 | 	add	objptr, ##51060
1790c     F2 FA 61 FC | 	wrlong	result1, objptr
17910     63 00 00 FF 
17914     74 E5 85 F1 | 	sub	objptr, ##51060
17918     F2 FA 01 F6 | 	mov	result1, objptr
1791c     56 FA 25 F4 | 	bith	result1, #86
17920     63 00 00 FF 
17924     78 E5 05 F1 | 	add	objptr, ##51064
17928     F2 FA 61 FC | 	wrlong	result1, objptr
1792c     63 00 00 FF 
17930     78 E5 85 F1 | 	sub	objptr, ##51064
17934     F2 FA 01 F6 | 	mov	result1, objptr
17938     00 E8 00 FF 
1793c     00 FA 45 F5 | 	or	result1, ##30408704
17940     65 00 00 FF 
17944     40 E4 05 F1 | 	add	objptr, ##51776
17948     F2 FA 61 FC | 	wrlong	result1, objptr
1794c     65 00 00 FF 
17950     40 E4 85 F1 | 	sub	objptr, ##51776
17954     F2 FA 01 F6 | 	mov	result1, objptr
17958     75 FA 25 F4 | 	bith	result1, #117
1795c     63 00 00 FF 
17960     7C E5 05 F1 | 	add	objptr, ##51068
17964     F2 FA 61 FC | 	wrlong	result1, objptr
17968     63 00 00 FF 
1796c     7C E5 85 F1 | 	sub	objptr, ##51068
17970     F2 FA 01 F6 | 	mov	result1, objptr
17974     94 FA 25 F4 | 	bith	result1, #148
17978     63 00 00 FF 
1797c     90 E5 05 F1 | 	add	objptr, ##51088
17980     F2 FA 61 FC | 	wrlong	result1, objptr
17984     63 00 00 FF 
17988     90 E5 85 F1 | 	sub	objptr, ##51088
1798c     F2 FA 01 F6 | 	mov	result1, objptr
17990     19 FA 25 F4 | 	bith	result1, #25
17994     63 00 00 FF 
17998     80 E5 05 F1 | 	add	objptr, ##51072
1799c     F2 FA 61 FC | 	wrlong	result1, objptr
179a0     63 00 00 FF 
179a4     80 E5 85 F1 | 	sub	objptr, ##51072
179a8     F2 FA 01 F6 | 	mov	result1, objptr
179ac     00 08 01 FF 
179b0     00 FA 45 F5 | 	or	result1, ##34603008
179b4     63 00 00 FF 
179b8     9C E4 05 F1 | 	add	objptr, ##50844
179bc     F2 FA 61 FC | 	wrlong	result1, objptr
179c0     63 00 00 FF 
179c4     9C E4 85 F1 | 	sub	objptr, ##50844
179c8     F2 FA 01 F6 | 	mov	result1, objptr
179cc     00 10 01 FF 
179d0     00 FA 45 F5 | 	or	result1, ##35651584
179d4     63 00 00 FF 
179d8     84 E5 05 F1 | 	add	objptr, ##51076
179dc     F2 FA 61 FC | 	wrlong	result1, objptr
179e0     63 00 00 FF 
179e4     84 E5 85 F1 | 	sub	objptr, ##51076
179e8     F2 FA 01 F6 | 	mov	result1, objptr
179ec     00 18 01 FF 
179f0     00 FA 45 F5 | 	or	result1, ##36700160
179f4     63 00 00 FF 
179f8     88 E5 05 F1 | 	add	objptr, ##51080
179fc     F2 FA 61 FC | 	wrlong	result1, objptr
17a00     63 00 00 FF 
17a04     88 E5 85 F1 | 	sub	objptr, ##51080
17a08     F2 FA 01 F6 | 	mov	result1, objptr
17a0c     00 20 01 FF 
17a10     00 FA 45 F5 | 	or	result1, ##37748736
17a14     63 00 00 FF 
17a18     8C E5 05 F1 | 	add	objptr, ##51084
17a1c     F2 FA 61 FC | 	wrlong	result1, objptr
17a20     63 00 00 FF 
17a24     8C E5 85 F1 | 	sub	objptr, ##51084
17a28     F2 FA 01 F6 | 	mov	result1, objptr
17a2c     00 28 01 FF 
17a30     00 FA 45 F5 | 	or	result1, ##38797312
17a34     63 00 00 FF 
17a38     98 E5 05 F1 | 	add	objptr, ##51096
17a3c     F2 FA 61 FC | 	wrlong	result1, objptr
17a40     63 00 00 FF 
17a44     98 E5 85 F1 | 	sub	objptr, ##51096
17a48     F2 FA 01 F6 | 	mov	result1, objptr
17a4c     00 30 01 FF 
17a50     00 FA 45 F5 | 	or	result1, ##39845888
17a54     63 00 00 FF 
17a58     9C E5 05 F1 | 	add	objptr, ##51100
17a5c     F2 FA 61 FC | 	wrlong	result1, objptr
17a60     63 00 00 FF 
17a64     9C E5 85 F1 | 	sub	objptr, ##51100
17a68     F2 FA 01 F6 | 	mov	result1, objptr
17a6c     00 38 01 FF 
17a70     00 FA 45 F5 | 	or	result1, ##40894464
17a74     63 00 00 FF 
17a78     A0 E5 05 F1 | 	add	objptr, ##51104
17a7c     F2 FA 61 FC | 	wrlong	result1, objptr
17a80     63 00 00 FF 
17a84     A0 E5 85 F1 | 	sub	objptr, ##51104
17a88     F2 FA 01 F6 | 	mov	result1, objptr
17a8c     00 40 01 FF 
17a90     00 FA 45 F5 | 	or	result1, ##41943040
17a94     63 00 00 FF 
17a98     A4 E5 05 F1 | 	add	objptr, ##51108
17a9c     F2 FA 61 FC | 	wrlong	result1, objptr
17aa0     63 00 00 FF 
17aa4     A4 E5 85 F1 | 	sub	objptr, ##51108
17aa8     F2 FA 01 F6 | 	mov	result1, objptr
17aac     00 48 01 FF 
17ab0     00 FA 45 F5 | 	or	result1, ##42991616
17ab4     63 00 00 FF 
17ab8     AC E5 05 F1 | 	add	objptr, ##51116
17abc     F2 FA 61 FC | 	wrlong	result1, objptr
17ac0     63 00 00 FF 
17ac4     AC E5 85 F1 | 	sub	objptr, ##51116
17ac8     F2 FA 01 F6 | 	mov	result1, objptr
17acc     00 50 01 FF 
17ad0     00 FA 45 F5 | 	or	result1, ##44040192
17ad4     63 00 00 FF 
17ad8     B0 E5 05 F1 | 	add	objptr, ##51120
17adc     F2 FA 61 FC | 	wrlong	result1, objptr
17ae0     63 00 00 FF 
17ae4     B0 E5 85 F1 | 	sub	objptr, ##51120
17ae8     F2 FA 01 F6 | 	mov	result1, objptr
17aec     00 58 01 FF 
17af0     00 FA 45 F5 | 	or	result1, ##45088768
17af4     63 00 00 FF 
17af8     B0 E4 05 F1 | 	add	objptr, ##50864
17afc     F2 FA 61 FC | 	wrlong	result1, objptr
17b00     63 00 00 FF 
17b04     B0 E4 85 F1 | 	sub	objptr, ##50864
17b08     F2 FA 01 F6 | 	mov	result1, objptr
17b0c     00 60 01 FF 
17b10     00 FA 45 F5 | 	or	result1, ##46137344
17b14     63 00 00 FF 
17b18     E0 E4 05 F1 | 	add	objptr, ##50912
17b1c     F2 FA 61 FC | 	wrlong	result1, objptr
17b20     63 00 00 FF 
17b24     E0 E4 85 F1 | 	sub	objptr, ##50912
17b28     F2 FA 01 F6 | 	mov	result1, objptr
17b2c     00 68 01 FF 
17b30     00 FA 45 F5 | 	or	result1, ##47185920
17b34     63 00 00 FF 
17b38     DC E4 05 F1 | 	add	objptr, ##50908
17b3c     F2 FA 61 FC | 	wrlong	result1, objptr
17b40     63 00 00 FF 
17b44     DC E4 85 F1 | 	sub	objptr, ##50908
17b48     F2 FA 01 F6 | 	mov	result1, objptr
17b4c     00 70 01 FF 
17b50     00 FA 45 F5 | 	or	result1, ##48234496
17b54     63 00 00 FF 
17b58     80 E4 05 F1 | 	add	objptr, ##50816
17b5c     F2 FA 61 FC | 	wrlong	result1, objptr
17b60     63 00 00 FF 
17b64     80 E4 85 F1 | 	sub	objptr, ##50816
17b68     F2 FA 01 F6 | 	mov	result1, objptr
17b6c     00 78 01 FF 
17b70     00 FA 45 F5 | 	or	result1, ##49283072
17b74     63 00 00 FF 
17b78     84 E4 05 F1 | 	add	objptr, ##50820
17b7c     F2 FA 61 FC | 	wrlong	result1, objptr
17b80     63 00 00 FF 
17b84     84 E4 85 F1 | 	sub	objptr, ##50820
17b88     F2 FA 01 F6 | 	mov	result1, objptr
17b8c     38 FA 25 F4 | 	bith	result1, #56
17b90     63 00 00 FF 
17b94     EC E4 05 F1 | 	add	objptr, ##50924
17b98     F2 FA 61 FC | 	wrlong	result1, objptr
17b9c     63 00 00 FF 
17ba0     EC E4 85 F1 | 	sub	objptr, ##50924
17ba4     F2 FA 01 F6 | 	mov	result1, objptr
17ba8     00 88 01 FF 
17bac     00 FA 45 F5 | 	or	result1, ##51380224
17bb0     63 00 00 FF 
17bb4     94 E5 05 F1 | 	add	objptr, ##51092
17bb8     F2 FA 61 FC | 	wrlong	result1, objptr
17bbc     63 00 00 FF 
17bc0     94 E5 85 F1 | 	sub	objptr, ##51092
17bc4     F2 FA 01 F6 | 	mov	result1, objptr
17bc8     00 90 01 FF 
17bcc     00 FA 45 F5 | 	or	result1, ##52428800
17bd0     63 00 00 FF 
17bd4     A8 E5 05 F1 | 	add	objptr, ##51112
17bd8     F2 FA 61 FC | 	wrlong	result1, objptr
17bdc     63 00 00 FF 
17be0     A8 E5 85 F1 | 	sub	objptr, ##51112
17be4     F2 FA 01 F6 | 	mov	result1, objptr
17be8     00 98 01 FF 
17bec     00 FA 45 F5 | 	or	result1, ##53477376
17bf0     63 00 00 FF 
17bf4     B4 E5 05 F1 | 	add	objptr, ##51124
17bf8     F2 FA 61 FC | 	wrlong	result1, objptr
17bfc     63 00 00 FF 
17c00     B4 E5 85 F1 | 	sub	objptr, ##51124
17c04     F2 FA 01 F6 | 	mov	result1, objptr
17c08     00 A0 01 FF 
17c0c     00 FA 45 F5 | 	or	result1, ##54525952
17c10     63 00 00 FF 
17c14     B8 E5 05 F1 | 	add	objptr, ##51128
17c18     F2 FA 61 FC | 	wrlong	result1, objptr
17c1c     63 00 00 FF 
17c20     B8 E5 85 F1 | 	sub	objptr, ##51128
17c24     F2 FA 01 F6 | 	mov	result1, objptr
17c28     00 A8 01 FF 
17c2c     00 FA 45 F5 | 	or	result1, ##55574528
17c30     63 00 00 FF 
17c34     BC E5 05 F1 | 	add	objptr, ##51132
17c38     F2 FA 61 FC | 	wrlong	result1, objptr
17c3c     63 00 00 FF 
17c40     BC E5 85 F1 | 	sub	objptr, ##51132
17c44     F2 FA 01 F6 | 	mov	result1, objptr
17c48     00 B0 01 FF 
17c4c     00 FA 45 F5 | 	or	result1, ##56623104
17c50     63 00 00 FF 
17c54     C0 E5 05 F1 | 	add	objptr, ##51136
17c58     F2 FA 61 FC | 	wrlong	result1, objptr
17c5c     63 00 00 FF 
17c60     C0 E5 85 F1 | 	sub	objptr, ##51136
17c64     F2 FA 01 F6 | 	mov	result1, objptr
17c68     00 B8 01 FF 
17c6c     00 FA 45 F5 | 	or	result1, ##57671680
17c70     63 00 00 FF 
17c74     C4 E5 05 F1 | 	add	objptr, ##51140
17c78     F2 FA 61 FC | 	wrlong	result1, objptr
17c7c     63 00 00 FF 
17c80     C4 E5 85 F1 | 	sub	objptr, ##51140
17c84     F2 FA 01 F6 | 	mov	result1, objptr
17c88     57 FA 25 F4 | 	bith	result1, #87
17c8c     63 00 00 FF 
17c90     C8 E5 05 F1 | 	add	objptr, ##51144
17c94     F2 FA 61 FC | 	wrlong	result1, objptr
17c98     63 00 00 FF 
17c9c     C8 E5 85 F1 | 	sub	objptr, ##51144
17ca0     F2 FA 01 F6 | 	mov	result1, objptr
17ca4     94 FA 25 F4 | 	bith	result1, #148
17ca8     63 00 00 FF 
17cac     90 E5 05 F1 | 	add	objptr, ##51088
17cb0     F2 FA 61 FC | 	wrlong	result1, objptr
17cb4     63 00 00 FF 
17cb8     90 E5 85 F1 | 	sub	objptr, ##51088
17cbc     F2 FA 01 F6 | 	mov	result1, objptr
17cc0     00 C8 01 FF 
17cc4     00 FA 45 F5 | 	or	result1, ##59768832
17cc8     63 00 00 FF 
17ccc     D0 E5 05 F1 | 	add	objptr, ##51152
17cd0     F2 FA 61 FC | 	wrlong	result1, objptr
17cd4     63 00 00 FF 
17cd8     D0 E5 85 F1 | 	sub	objptr, ##51152
17cdc     F2 FA 01 F6 | 	mov	result1, objptr
17ce0     00 D0 01 FF 
17ce4     00 FA 45 F5 | 	or	result1, ##60817408
17ce8     63 00 00 FF 
17cec     CC E5 05 F1 | 	add	objptr, ##51148
17cf0     F2 FA 61 FC | 	wrlong	result1, objptr
17cf4     63 00 00 FF 
17cf8     CC E5 85 F1 | 	sub	objptr, ##51148
17cfc     F2 FA 01 F6 | 	mov	result1, objptr
17d00     00 D8 01 FF 
17d04     00 FA 45 F5 | 	or	result1, ##61865984
17d08     63 00 00 FF 
17d0c     E4 E5 05 F1 | 	add	objptr, ##51172
17d10     F2 FA 61 FC | 	wrlong	result1, objptr
17d14     63 00 00 FF 
17d18     E4 E5 85 F1 | 	sub	objptr, ##51172
17d1c     F2 FA 01 F6 | 	mov	result1, objptr
17d20     76 FA 25 F4 | 	bith	result1, #118
17d24     63 00 00 FF 
17d28     E8 E5 05 F1 | 	add	objptr, ##51176
17d2c     F2 FA 61 FC | 	wrlong	result1, objptr
17d30     63 00 00 FF 
17d34     E8 E5 85 F1 | 	sub	objptr, ##51176
17d38     F2 FA 01 F6 | 	mov	result1, objptr
17d3c     00 E8 01 FF 
17d40     00 FA 45 F5 | 	or	result1, ##63963136
17d44     63 00 00 FF 
17d48     D4 E5 05 F1 | 	add	objptr, ##51156
17d4c     F2 FA 61 FC | 	wrlong	result1, objptr
17d50     63 00 00 FF 
17d54     D4 E5 85 F1 | 	sub	objptr, ##51156
17d58     F2 FA 01 F6 | 	mov	result1, objptr
17d5c     95 FA 25 F4 | 	bith	result1, #149
17d60     63 00 00 FF 
17d64     D8 E5 05 F1 | 	add	objptr, ##51160
17d68     F2 FA 61 FC | 	wrlong	result1, objptr
17d6c     63 00 00 FF 
17d70     D8 E5 85 F1 | 	sub	objptr, ##51160
17d74     F2 FA 01 F6 | 	mov	result1, objptr
17d78     B4 FA 25 F4 | 	bith	result1, #180
17d7c     63 00 00 FF 
17d80     DC E5 05 F1 | 	add	objptr, ##51164
17d84     F2 FA 61 FC | 	wrlong	result1, objptr
17d88     63 00 00 FF 
17d8c     DC E5 85 F1 | 	sub	objptr, ##51164
17d90     F2 FA 01 F6 | 	mov	result1, objptr
17d94     1A FA 25 F4 | 	bith	result1, #26
17d98     63 00 00 FF 
17d9c     E0 E5 05 F1 | 	add	objptr, ##51168
17da0     F2 FA 61 FC | 	wrlong	result1, objptr
17da4     63 00 00 FF 
17da8     E0 E5 85 F1 | 	sub	objptr, ##51168
17dac     F2 FA 01 F6 | 	mov	result1, objptr
17db0     00 08 02 FF 
17db4     00 FA 45 F5 | 	or	result1, ##68157440
17db8     63 00 00 FF 
17dbc     F0 E5 05 F1 | 	add	objptr, ##51184
17dc0     F2 FA 61 FC | 	wrlong	result1, objptr
17dc4     63 00 00 FF 
17dc8     F0 E5 85 F1 | 	sub	objptr, ##51184
17dcc     F2 FA 01 F6 | 	mov	result1, objptr
17dd0     00 10 02 FF 
17dd4     00 FA 45 F5 | 	or	result1, ##69206016
17dd8     63 00 00 FF 
17ddc     EC E5 05 F1 | 	add	objptr, ##51180
17de0     F2 FA 61 FC | 	wrlong	result1, objptr
17de4     63 00 00 FF 
17de8     EC E5 85 F1 | 	sub	objptr, ##51180
17dec     F2 FA 01 F6 | 	mov	result1, objptr
17df0     00 18 02 FF 
17df4     00 FA 45 F5 | 	or	result1, ##70254592
17df8     63 00 00 FF 
17dfc     FC E5 05 F1 | 	add	objptr, ##51196
17e00     F2 FA 61 FC | 	wrlong	result1, objptr
17e04     63 00 00 FF 
17e08     FC E5 85 F1 | 	sub	objptr, ##51196
17e0c     F2 FA 01 F6 | 	mov	result1, objptr
17e10     00 20 02 FF 
17e14     00 FA 45 F5 | 	or	result1, ##71303168
17e18     63 00 00 FF 
17e1c     F8 E5 05 F1 | 	add	objptr, ##51192
17e20     F2 FA 61 FC | 	wrlong	result1, objptr
17e24     63 00 00 FF 
17e28     F8 E5 85 F1 | 	sub	objptr, ##51192
17e2c     F2 FA 01 F6 | 	mov	result1, objptr
17e30     00 28 02 FF 
17e34     00 FA 45 F5 | 	or	result1, ##72351744
17e38     63 00 00 FF 
17e3c     F4 E5 05 F1 | 	add	objptr, ##51188
17e40     F2 FA 61 FC | 	wrlong	result1, objptr
17e44     63 00 00 FF 
17e48     F4 E5 85 F1 | 	sub	objptr, ##51188
17e4c     F2 FA 01 F6 | 	mov	result1, objptr
17e50     00 30 02 FF 
17e54     00 FA 45 F5 | 	or	result1, ##73400320
17e58     64 00 00 FF 
17e5c     00 E4 05 F1 | 	add	objptr, ##51200
17e60     F2 FA 61 FC | 	wrlong	result1, objptr
17e64     64 00 00 FF 
17e68     00 E4 85 F1 | 	sub	objptr, ##51200
17e6c     F2 FA 01 F6 | 	mov	result1, objptr
17e70     00 38 02 FF 
17e74     00 FA 45 F5 | 	or	result1, ##74448896
17e78     64 00 00 FF 
17e7c     04 E4 05 F1 | 	add	objptr, ##51204
17e80     F2 FA 61 FC | 	wrlong	result1, objptr
17e84     64 00 00 FF 
17e88     04 E4 85 F1 | 	sub	objptr, ##51204
17e8c     F2 FA 01 F6 | 	mov	result1, objptr
17e90     00 40 02 FF 
17e94     00 FA 45 F5 | 	or	result1, ##75497472
17e98     63 00 00 FF 
17e9c     98 E4 05 F1 | 	add	objptr, ##50840
17ea0     F2 FA 61 FC | 	wrlong	result1, objptr
17ea4     63 00 00 FF 
17ea8     98 E4 85 F1 | 	sub	objptr, ##50840
17eac     F2 FA 01 F6 | 	mov	result1, objptr
17eb0     00 48 02 FF 
17eb4     00 FA 45 F5 | 	or	result1, ##76546048
17eb8     64 00 00 FF 
17ebc     1C E4 05 F1 | 	add	objptr, ##51228
17ec0     F2 FA 61 FC | 	wrlong	result1, objptr
17ec4     64 00 00 FF 
17ec8     1C E4 85 F1 | 	sub	objptr, ##51228
17ecc     F2 FA 01 F6 | 	mov	result1, objptr
17ed0     00 50 02 FF 
17ed4     00 FA 45 F5 | 	or	result1, ##77594624
17ed8     64 00 00 FF 
17edc     2C E4 05 F1 | 	add	objptr, ##51244
17ee0     F2 FA 61 FC | 	wrlong	result1, objptr
17ee4     64 00 00 FF 
17ee8     2C E4 85 F1 | 	sub	objptr, ##51244
17eec     F2 FA 01 F6 | 	mov	result1, objptr
17ef0     00 58 02 FF 
17ef4     00 FA 45 F5 | 	or	result1, ##78643200
17ef8     64 00 00 FF 
17efc     30 E4 05 F1 | 	add	objptr, ##51248
17f00     F2 FA 61 FC | 	wrlong	result1, objptr
17f04     64 00 00 FF 
17f08     30 E4 85 F1 | 	sub	objptr, ##51248
17f0c     F2 FA 01 F6 | 	mov	result1, objptr
17f10     00 60 02 FF 
17f14     00 FA 45 F5 | 	or	result1, ##79691776
17f18     64 00 00 FF 
17f1c     28 E4 05 F1 | 	add	objptr, ##51240
17f20     F2 FA 61 FC | 	wrlong	result1, objptr
17f24     64 00 00 FF 
17f28     28 E4 85 F1 | 	sub	objptr, ##51240
17f2c     F2 FA 01 F6 | 	mov	result1, objptr
17f30     00 68 02 FF 
17f34     00 FA 45 F5 | 	or	result1, ##80740352
17f38     64 00 00 FF 
17f3c     20 E4 05 F1 | 	add	objptr, ##51232
17f40     F2 FA 61 FC | 	wrlong	result1, objptr
17f44     64 00 00 FF 
17f48     20 E4 85 F1 | 	sub	objptr, ##51232
17f4c     F2 FA 01 F6 | 	mov	result1, objptr
17f50     00 70 02 FF 
17f54     00 FA 45 F5 | 	or	result1, ##81788928
17f58     64 00 00 FF 
17f5c     24 E4 05 F1 | 	add	objptr, ##51236
17f60     F2 FA 61 FC | 	wrlong	result1, objptr
17f64     64 00 00 FF 
17f68     24 E4 85 F1 | 	sub	objptr, ##51236
17f6c     F2 FA 01 F6 | 	mov	result1, objptr
17f70     00 78 02 FF 
17f74     00 FA 45 F5 | 	or	result1, ##82837504
17f78     64 00 00 FF 
17f7c     34 E4 05 F1 | 	add	objptr, ##51252
17f80     F2 FA 61 FC | 	wrlong	result1, objptr
17f84     64 00 00 FF 
17f88     34 E4 85 F1 | 	sub	objptr, ##51252
17f8c     F2 FA 01 F6 | 	mov	result1, objptr
17f90     00 80 02 FF 
17f94     00 FA 45 F5 | 	or	result1, ##83886080
17f98     64 00 00 FF 
17f9c     38 E4 05 F1 | 	add	objptr, ##51256
17fa0     F2 FA 61 FC | 	wrlong	result1, objptr
17fa4     64 00 00 FF 
17fa8     38 E4 85 F1 | 	sub	objptr, ##51256
17fac     F2 FA 01 F6 | 	mov	result1, objptr
17fb0     00 88 02 FF 
17fb4     00 FA 45 F5 | 	or	result1, ##84934656
17fb8     64 00 00 FF 
17fbc     3C E4 05 F1 | 	add	objptr, ##51260
17fc0     F2 FA 61 FC | 	wrlong	result1, objptr
17fc4     64 00 00 FF 
17fc8     3C E4 85 F1 | 	sub	objptr, ##51260
17fcc     F2 FA 01 F6 | 	mov	result1, objptr
17fd0     00 90 02 FF 
17fd4     00 FA 45 F5 | 	or	result1, ##85983232
17fd8     64 00 00 FF 
17fdc     40 E4 05 F1 | 	add	objptr, ##51264
17fe0     F2 FA 61 FC | 	wrlong	result1, objptr
17fe4     64 00 00 FF 
17fe8     40 E4 85 F1 | 	sub	objptr, ##51264
17fec     F2 FA 01 F6 | 	mov	result1, objptr
17ff0     00 98 02 FF 
17ff4     00 FA 45 F5 | 	or	result1, ##87031808
17ff8     64 00 00 FF 
17ffc     44 E4 05 F1 | 	add	objptr, ##51268
18000     F2 FA 61 FC | 	wrlong	result1, objptr
18004     64 00 00 FF 
18008     44 E4 85 F1 | 	sub	objptr, ##51268
1800c     F2 FA 01 F6 | 	mov	result1, objptr
18010     00 A0 02 FF 
18014     00 FA 45 F5 | 	or	result1, ##88080384
18018     64 00 00 FF 
1801c     48 E4 05 F1 | 	add	objptr, ##51272
18020     F2 FA 61 FC | 	wrlong	result1, objptr
18024     64 00 00 FF 
18028     48 E4 85 F1 | 	sub	objptr, ##51272
1802c     F2 FA 01 F6 | 	mov	result1, objptr
18030     00 A8 02 FF 
18034     00 FA 45 F5 | 	or	result1, ##89128960
18038     64 00 00 FF 
1803c     4C E4 05 F1 | 	add	objptr, ##51276
18040     F2 FA 61 FC | 	wrlong	result1, objptr
18044     64 00 00 FF 
18048     4C E4 85 F1 | 	sub	objptr, ##51276
1804c     F2 FA 01 F6 | 	mov	result1, objptr
18050     00 B0 02 FF 
18054     00 FA 45 F5 | 	or	result1, ##90177536
18058     64 00 00 FF 
1805c     50 E4 05 F1 | 	add	objptr, ##51280
18060     F2 FA 61 FC | 	wrlong	result1, objptr
18064     64 00 00 FF 
18068     50 E4 85 F1 | 	sub	objptr, ##51280
1806c     F2 FA 01 F6 | 	mov	result1, objptr
18070     00 B8 02 FF 
18074     00 FA 45 F5 | 	or	result1, ##91226112
18078     64 00 00 FF 
1807c     5C E4 05 F1 | 	add	objptr, ##51292
18080     F2 FA 61 FC | 	wrlong	result1, objptr
18084     64 00 00 FF 
18088     5C E4 85 F1 | 	sub	objptr, ##51292
1808c     F2 FA 01 F6 | 	mov	result1, objptr
18090     00 C0 02 FF 
18094     00 FA 45 F5 | 	or	result1, ##92274688
18098     64 00 00 FF 
1809c     54 E4 05 F1 | 	add	objptr, ##51284
180a0     F2 FA 61 FC | 	wrlong	result1, objptr
180a4     64 00 00 FF 
180a8     54 E4 85 F1 | 	sub	objptr, ##51284
180ac     F2 FA 01 F6 | 	mov	result1, objptr
180b0     00 C8 02 FF 
180b4     00 FA 45 F5 | 	or	result1, ##93323264
180b8     64 00 00 FF 
180bc     58 E4 05 F1 | 	add	objptr, ##51288
180c0     F2 FA 61 FC | 	wrlong	result1, objptr
180c4     64 00 00 FF 
180c8     58 E4 85 F1 | 	sub	objptr, ##51288
180cc     F2 FA 01 F6 | 	mov	result1, objptr
180d0     00 D0 02 FF 
180d4     00 FA 45 F5 | 	or	result1, ##94371840
180d8     64 00 00 FF 
180dc     60 E4 05 F1 | 	add	objptr, ##51296
180e0     F2 FA 61 FC | 	wrlong	result1, objptr
180e4     64 00 00 FF 
180e8     60 E4 85 F1 | 	sub	objptr, ##51296
180ec     F2 FA 01 F6 | 	mov	result1, objptr
180f0     00 D8 02 FF 
180f4     00 FA 45 F5 | 	or	result1, ##95420416
180f8     64 00 00 FF 
180fc     08 E4 05 F1 | 	add	objptr, ##51208
18100     F2 FA 61 FC | 	wrlong	result1, objptr
18104     64 00 00 FF 
18108     08 E4 85 F1 | 	sub	objptr, ##51208
1810c     F2 FA 01 F6 | 	mov	result1, objptr
18110     00 E0 02 FF 
18114     00 FA 45 F5 | 	or	result1, ##96468992
18118     64 00 00 FF 
1811c     10 E4 05 F1 | 	add	objptr, ##51216
18120     F2 FA 61 FC | 	wrlong	result1, objptr
18124     64 00 00 FF 
18128     10 E4 85 F1 | 	sub	objptr, ##51216
1812c     F2 FA 01 F6 | 	mov	result1, objptr
18130     00 E8 02 FF 
18134     00 FA 45 F5 | 	or	result1, ##97517568
18138     64 00 00 FF 
1813c     14 E4 05 F1 | 	add	objptr, ##51220
18140     F2 FA 61 FC | 	wrlong	result1, objptr
18144     64 00 00 FF 
18148     14 E4 85 F1 | 	sub	objptr, ##51220
1814c     F2 FA 01 F6 | 	mov	result1, objptr
18150     00 F0 02 FF 
18154     00 FA 45 F5 | 	or	result1, ##98566144
18158     64 00 00 FF 
1815c     64 E4 05 F1 | 	add	objptr, ##51300
18160     F2 FA 61 FC | 	wrlong	result1, objptr
18164     64 00 00 FF 
18168     64 E4 85 F1 | 	sub	objptr, ##51300
1816c     F2 FA 01 F6 | 	mov	result1, objptr
18170     00 F8 02 FF 
18174     00 FA 45 F5 | 	or	result1, ##99614720
18178     64 00 00 FF 
1817c     68 E4 05 F1 | 	add	objptr, ##51304
18180     F2 FA 61 FC | 	wrlong	result1, objptr
18184     64 00 00 FF 
18188     68 E4 85 F1 | 	sub	objptr, ##51304
1818c     F2 FA 01 F6 | 	mov	result1, objptr
18190     39 FA 25 F4 | 	bith	result1, #57
18194     64 00 00 FF 
18198     6C E4 05 F1 | 	add	objptr, ##51308
1819c     F2 FA 61 FC | 	wrlong	result1, objptr
181a0     64 00 00 FF 
181a4     6C E4 85 F1 | 	sub	objptr, ##51308
181a8     F2 FA 01 F6 | 	mov	result1, objptr
181ac     00 08 03 FF 
181b0     00 FA 45 F5 | 	or	result1, ##101711872
181b4     64 00 00 FF 
181b8     18 E4 05 F1 | 	add	objptr, ##51224
181bc     F2 FA 61 FC | 	wrlong	result1, objptr
181c0     64 00 00 FF 
181c4     18 E4 85 F1 | 	sub	objptr, ##51224
181c8     F2 FA 01 F6 | 	mov	result1, objptr
181cc     00 10 03 FF 
181d0     00 FA 45 F5 | 	or	result1, ##102760448
181d4     64 00 00 FF 
181d8     7C E4 05 F1 | 	add	objptr, ##51324
181dc     F2 FA 61 FC | 	wrlong	result1, objptr
181e0     64 00 00 FF 
181e4     7C E4 85 F1 | 	sub	objptr, ##51324
181e8     F2 FA 01 F6 | 	mov	result1, objptr
181ec     00 18 03 FF 
181f0     00 FA 45 F5 | 	or	result1, ##103809024
181f4     64 00 00 FF 
181f8     84 E4 05 F1 | 	add	objptr, ##51332
181fc     F2 FA 61 FC | 	wrlong	result1, objptr
18200     64 00 00 FF 
18204     84 E4 85 F1 | 	sub	objptr, ##51332
18208     F2 FA 01 F6 | 	mov	result1, objptr
1820c     00 20 03 FF 
18210     00 FA 45 F5 | 	or	result1, ##104857600
18214     64 00 00 FF 
18218     78 E4 05 F1 | 	add	objptr, ##51320
1821c     F2 FA 61 FC | 	wrlong	result1, objptr
18220     64 00 00 FF 
18224     78 E4 85 F1 | 	sub	objptr, ##51320
18228     F2 FA 01 F6 | 	mov	result1, objptr
1822c     00 28 03 FF 
18230     00 FA 45 F5 | 	or	result1, ##105906176
18234     64 00 00 FF 
18238     74 E4 05 F1 | 	add	objptr, ##51316
1823c     F2 FA 61 FC | 	wrlong	result1, objptr
18240     64 00 00 FF 
18244     74 E4 85 F1 | 	sub	objptr, ##51316
18248     F2 FA 01 F6 | 	mov	result1, objptr
1824c     00 30 03 FF 
18250     00 FA 45 F5 | 	or	result1, ##106954752
18254     64 00 00 FF 
18258     70 E4 05 F1 | 	add	objptr, ##51312
1825c     F2 FA 61 FC | 	wrlong	result1, objptr
18260     64 00 00 FF 
18264     70 E4 85 F1 | 	sub	objptr, ##51312
18268     F2 FA 01 F6 | 	mov	result1, objptr
1826c     00 38 03 FF 
18270     00 FA 45 F5 | 	or	result1, ##108003328
18274     64 00 00 FF 
18278     80 E4 05 F1 | 	add	objptr, ##51328
1827c     F2 FA 61 FC | 	wrlong	result1, objptr
18280     64 00 00 FF 
18284     80 E4 85 F1 | 	sub	objptr, ##51328
18288     F2 FA 01 F6 | 	mov	result1, objptr
1828c     00 40 03 FF 
18290     00 FA 45 F5 | 	or	result1, ##109051904
18294     64 00 00 FF 
18298     88 E4 05 F1 | 	add	objptr, ##51336
1829c     F2 FA 61 FC | 	wrlong	result1, objptr
182a0     64 00 00 FF 
182a4     88 E4 85 F1 | 	sub	objptr, ##51336
182a8     F2 FA 01 F6 | 	mov	result1, objptr
182ac     00 48 03 FF 
182b0     00 FA 45 F5 | 	or	result1, ##110100480
182b4     64 00 00 FF 
182b8     8C E4 05 F1 | 	add	objptr, ##51340
182bc     F2 FA 61 FC | 	wrlong	result1, objptr
182c0     64 00 00 FF 
182c4     8C E4 85 F1 | 	sub	objptr, ##51340
182c8     F2 FA 01 F6 | 	mov	result1, objptr
182cc     00 50 03 FF 
182d0     00 FA 45 F5 | 	or	result1, ##111149056
182d4     64 00 00 FF 
182d8     90 E4 05 F1 | 	add	objptr, ##51344
182dc     F2 FA 61 FC | 	wrlong	result1, objptr
182e0     64 00 00 FF 
182e4     90 E4 85 F1 | 	sub	objptr, ##51344
182e8     F2 FA 01 F6 | 	mov	result1, objptr
182ec     00 58 03 FF 
182f0     00 FA 45 F5 | 	or	result1, ##112197632
182f4     64 00 00 FF 
182f8     98 E4 05 F1 | 	add	objptr, ##51352
182fc     F2 FA 61 FC | 	wrlong	result1, objptr
18300     64 00 00 FF 
18304     98 E4 85 F1 | 	sub	objptr, ##51352
18308     F2 FA 01 F6 | 	mov	result1, objptr
1830c     00 60 03 FF 
18310     00 FA 45 F5 | 	or	result1, ##113246208
18314     64 00 00 FF 
18318     9C E4 05 F1 | 	add	objptr, ##51356
1831c     F2 FA 61 FC | 	wrlong	result1, objptr
18320     64 00 00 FF 
18324     9C E4 85 F1 | 	sub	objptr, ##51356
18328     F2 FA 01 F6 | 	mov	result1, objptr
1832c     00 68 03 FF 
18330     00 FA 45 F5 | 	or	result1, ##114294784
18334     64 00 00 FF 
18338     A0 E4 05 F1 | 	add	objptr, ##51360
1833c     F2 FA 61 FC | 	wrlong	result1, objptr
18340     64 00 00 FF 
18344     A0 E4 85 F1 | 	sub	objptr, ##51360
18348     F2 FA 01 F6 | 	mov	result1, objptr
1834c     00 70 03 FF 
18350     00 FA 45 F5 | 	or	result1, ##115343360
18354     64 00 00 FF 
18358     A4 E4 05 F1 | 	add	objptr, ##51364
1835c     F2 FA 61 FC | 	wrlong	result1, objptr
18360     64 00 00 FF 
18364     A4 E4 85 F1 | 	sub	objptr, ##51364
18368     F2 FA 01 F6 | 	mov	result1, objptr
1836c     00 78 03 FF 
18370     00 FA 45 F5 | 	or	result1, ##116391936
18374     64 00 00 FF 
18378     A8 E4 05 F1 | 	add	objptr, ##51368
1837c     F2 FA 61 FC | 	wrlong	result1, objptr
18380     64 00 00 FF 
18384     A8 E4 85 F1 | 	sub	objptr, ##51368
18388     F2 FA 01 F6 | 	mov	result1, objptr
1838c     58 FA 25 F4 | 	bith	result1, #88
18390     64 00 00 FF 
18394     AC E4 05 F1 | 	add	objptr, ##51372
18398     F2 FA 61 FC | 	wrlong	result1, objptr
1839c     64 00 00 FF 
183a0     AC E4 85 F1 | 	sub	objptr, ##51372
183a4     F2 FA 01 F6 | 	mov	result1, objptr
183a8     00 88 03 FF 
183ac     00 FA 45 F5 | 	or	result1, ##118489088
183b0     64 00 00 FF 
183b4     B0 E4 05 F1 | 	add	objptr, ##51376
183b8     F2 FA 61 FC | 	wrlong	result1, objptr
183bc     64 00 00 FF 
183c0     B0 E4 85 F1 | 	sub	objptr, ##51376
183c4     F2 FA 01 F6 | 	mov	result1, objptr
183c8     00 90 03 FF 
183cc     00 FA 45 F5 | 	or	result1, ##119537664
183d0     64 00 00 FF 
183d4     B4 E4 05 F1 | 	add	objptr, ##51380
183d8     F2 FA 61 FC | 	wrlong	result1, objptr
183dc     64 00 00 FF 
183e0     B4 E4 85 F1 | 	sub	objptr, ##51380
183e4     F2 FA 01 F6 | 	mov	result1, objptr
183e8     00 98 03 FF 
183ec     00 FA 45 F5 | 	or	result1, ##120586240
183f0     64 00 00 FF 
183f4     94 E4 05 F1 | 	add	objptr, ##51348
183f8     F2 FA 61 FC | 	wrlong	result1, objptr
183fc     64 00 00 FF 
18400     94 E4 85 F1 | 	sub	objptr, ##51348
18404     F2 FA 01 F6 | 	mov	result1, objptr
18408     00 A0 03 FF 
1840c     00 FA 45 F5 | 	or	result1, ##121634816
18410     63 00 00 FF 
18414     8C E4 05 F1 | 	add	objptr, ##50828
18418     F2 FA 61 FC | 	wrlong	result1, objptr
1841c     63 00 00 FF 
18420     8C E4 85 F1 | 	sub	objptr, ##50828
18424     F2 FA 01 F6 | 	mov	result1, objptr
18428     00 A8 03 FF 
1842c     00 FA 45 F5 | 	or	result1, ##122683392
18430     64 00 00 FF 
18434     B8 E4 05 F1 | 	add	objptr, ##51384
18438     F2 FA 61 FC | 	wrlong	result1, objptr
1843c     64 00 00 FF 
18440     B8 E4 85 F1 | 	sub	objptr, ##51384
18444     F2 FA 01 F6 | 	mov	result1, objptr
18448     00 B0 03 FF 
1844c     00 FA 45 F5 | 	or	result1, ##123731968
18450     64 00 00 FF 
18454     BC E4 05 F1 | 	add	objptr, ##51388
18458     F2 FA 61 FC | 	wrlong	result1, objptr
1845c     64 00 00 FF 
18460     BC E4 85 F1 | 	sub	objptr, ##51388
18464                 | _init_commands_ret
18464     2D 00 64 FD | 	ret
18468                 | 
18468                 | ' 
18468                 | ' ''--------------------------------Error strings -------------------------------------
18468                 | ' sub init_audio
18468                 | _init_audio
18468     05 4A 05 F6 | 	mov	COUNT_, #5
1846c     A8 00 A0 FD | 	call	#pushregs_
18470     00 C0 1F FF 
18474     00 1E 06 F6 | 	mov	local01, ##1065353216
18478                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
18478     00 20 06 F6 | 	mov	local02, #0
1847c                 | LR__1910
1847c     10 23 02 F6 | 	mov	local03, local02
18480     01 22 66 F0 | 	shl	local03, #1
18484     0C 00 00 FF 
18488     CC E4 05 F1 | 	add	objptr, ##6348
1848c     F2 22 02 F1 | 	add	local03, objptr
18490     58 7F 23 FF 
18494     00 24 06 F6 | 	mov	local04, ##1191096320
18498     0C 00 00 FF 
1849c     CC E4 85 F1 | 	sub	objptr, ##6348
184a0     10 13 52 F6 | 	abs	arg01, local02 wc
184a4     1F 26 C6 C9 |  if_b	decod	local05, #31
184a8     00 26 06 36 |  if_ae	mov	local05, #0
184ac     A8 6A B0 FD | 	call	#__system___float_fromuns
184b0     13 FB 61 F5 | 	xor	result1, local05
184b4     FD 12 02 F6 | 	mov	arg01, result1
184b8     87 24 20 FF 
184bc     DB 15 06 F6 | 	mov	arg02, ##1078530011
184c0     98 6E B0 FD | 	call	#__system___float_mul
184c4     FD 12 02 F6 | 	mov	arg01, result1
184c8     00 00 22 FF 
184cc     00 14 06 F6 | 	mov	arg02, ##1140850688
184d0     8C 70 B0 FD | 	call	#__system___float_div
184d4     FD 12 02 F6 | 	mov	arg01, result1
184d8     BC 77 B0 FD | 	call	#__system____builtin_sinf
184dc     FD 14 02 F6 | 	mov	arg02, result1
184e0     12 13 02 F6 | 	mov	arg01, local04
184e4     74 6E B0 FD | 	call	#__system___float_mul
184e8     FD 12 02 F6 | 	mov	arg01, result1
184ec     01 14 06 F6 | 	mov	arg02, #1
184f0     30 73 B0 FD | 	call	#__system___float_tointeger
184f4     11 FB 51 FC | 	wrword	result1, local03
184f8     01 20 06 F1 | 	add	local02, #1
184fc     02 00 00 FF 
18500     00 20 56 F2 | 	cmps	local02, ##1024 wc
18504     74 FF 9F CD |  if_b	jmp	#LR__1910
18508                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
18508     00 20 06 F6 | 	mov	local02, #0
1850c     10 00 00 FF 
18510     CC E4 05 F1 | 	add	objptr, ##8396
18514     97 6A 48 FB | 	callpa	#(@LR__1914-@LR__1911)>>2,fcache_load_ptr_
18518                 | LR__1911
18518     10 23 02 F6 | 	mov	local03, local02
1851c     01 22 66 F0 | 	shl	local03, #1
18520     F2 22 02 F1 | 	add	local03, objptr
18524     10 27 02 F6 | 	mov	local05, local02
18528     07 26 66 F0 | 	shl	local05, #7
1852c     10 27 82 F1 | 	sub	local05, local02
18530     C0 FF 7F FF 
18534     00 25 06 F6 | 	mov	local04, ##-32512
18538     13 25 02 F1 | 	add	local04, local05
1853c     11 25 52 FC | 	wrword	local04, local03
18540     09 22 C6 F9 | 	decod	local03, #9
18544     10 23 02 F1 | 	add	local03, local02
18548     01 22 66 F0 | 	shl	local03, #1
1854c     F2 22 02 F1 | 	add	local03, objptr
18550     10 25 02 F6 | 	mov	local04, local02
18554     01 24 66 F0 | 	shl	local04, #1
18558     F2 24 02 F1 | 	add	local04, objptr
1855c     12 25 E2 FA | 	rdword	local04, local04
18560     0F 24 66 F7 | 	signx	local04, #15
18564     12 25 62 F6 | 	neg	local04, local04
18568     11 25 52 FC | 	wrword	local04, local03
1856c     01 20 06 F1 | 	add	local02, #1
18570     01 00 00 FF 
18574     00 20 56 F2 | 	cmps	local02, ##512 wc
18578     9C FF 9F CD |  if_b	jmp	#LR__1911
1857c                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1857c     00 20 06 F6 | 	mov	local02, #0
18580     04 00 00 FF 
18584     00 E4 05 F1 | 	add	objptr, ##2048
18588                 | LR__1912
18588     10 23 02 F6 | 	mov	local03, local02
1858c     01 22 66 F0 | 	shl	local03, #1
18590     F2 22 02 F1 | 	add	local03, objptr
18594     10 27 02 F6 | 	mov	local05, local02
18598     06 26 66 F0 | 	shl	local05, #6
1859c     10 27 82 F1 | 	sub	local05, local02
185a0     C1 FF 7F FF 
185a4     00 24 06 F6 | 	mov	local04, ##-32256
185a8     13 25 02 F1 | 	add	local04, local05
185ac     11 25 52 FC | 	wrword	local04, local03
185b0     01 20 06 F1 | 	add	local02, #1
185b4     02 00 00 FF 
185b8     00 20 56 F2 | 	cmps	local02, ##1024 wc
185bc     C8 FF 9F CD |  if_b	jmp	#LR__1912
185c0                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
185c0     00 20 06 F6 | 	mov	local02, #0
185c4     04 00 00 FF 
185c8     00 E4 05 F1 | 	add	objptr, ##2048
185cc                 | LR__1913
185cc     10 23 02 F6 | 	mov	local03, local02
185d0     01 22 66 F0 | 	shl	local03, #1
185d4     F2 22 02 F1 | 	add	local03, objptr
185d8     40 00 80 FF 
185dc     11 51 59 FC | 	wrword	##32936, local03
185e0     01 20 06 F1 | 	add	local02, #1
185e4     80 20 56 F2 | 	cmps	local02, #128 wc
185e8     E0 FF 9F CD |  if_b	jmp	#LR__1913
185ec                 | LR__1914
185ec     80 20 06 F6 | 	mov	local02, #128
185f0     97 68 48 FB | 	callpa	#(@LR__1920-@LR__1915)>>2,fcache_load_ptr_
185f4                 | LR__1915
185f4     10 23 02 F6 | 	mov	local03, local02
185f8     01 22 66 F0 | 	shl	local03, #1
185fc     F2 22 02 F1 | 	add	local03, objptr
18600     3F 00 80 FF 
18604     11 B1 5A FC | 	wrword	##32600, local03
18608     01 20 06 F1 | 	add	local02, #1
1860c     02 00 00 FF 
18610     00 20 16 F2 | 	cmp	local02, ##1024 wc
18614     DC FF 9F CD |  if_b	jmp	#LR__1915
18618                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
18618     00 20 06 F6 | 	mov	local02, #0
1861c     04 00 00 FF 
18620     00 E4 05 F1 | 	add	objptr, ##2048
18624                 | LR__1916
18624     10 23 02 F6 | 	mov	local03, local02
18628     01 22 66 F0 | 	shl	local03, #1
1862c     F2 22 02 F1 | 	add	local03, objptr
18630     40 00 80 FF 
18634     11 51 59 FC | 	wrword	##32936, local03
18638     01 20 06 F1 | 	add	local02, #1
1863c     01 00 00 FF 
18640     00 20 56 F2 | 	cmps	local02, ##512 wc
18644     DC FF 9F CD |  if_b	jmp	#LR__1916
18648     09 20 C6 F9 | 	decod	local02, #9
1864c                 | LR__1917
1864c     10 23 02 F6 | 	mov	local03, local02
18650     01 22 66 F0 | 	shl	local03, #1
18654     F2 22 02 F1 | 	add	local03, objptr
18658     3F 00 80 FF 
1865c     11 B1 5A FC | 	wrword	##32600, local03
18660     01 20 06 F1 | 	add	local02, #1
18664     02 00 00 FF 
18668     00 20 16 F2 | 	cmp	local02, ##1024 wc
1866c     DC FF 9F CD |  if_b	jmp	#LR__1917
18670                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
18670     00 20 06 F6 | 	mov	local02, #0
18674     04 00 00 FF 
18678     00 E4 05 F1 | 	add	objptr, ##2048
1867c                 | LR__1918
1867c     10 23 02 F6 | 	mov	local03, local02
18680     01 22 66 F0 | 	shl	local03, #1
18684     F2 22 02 F1 | 	add	local03, objptr
18688     40 00 80 FF 
1868c     11 51 59 FC | 	wrword	##32936, local03
18690     01 20 06 F1 | 	add	local02, #1
18694     00 21 56 F2 | 	cmps	local02, #256 wc
18698     E0 FF 9F CD |  if_b	jmp	#LR__1918
1869c     00 21 06 F6 | 	mov	local02, #256
186a0                 | LR__1919
186a0     10 23 02 F6 | 	mov	local03, local02
186a4     01 22 66 F0 | 	shl	local03, #1
186a8     F2 22 02 F1 | 	add	local03, objptr
186ac     3F 00 80 FF 
186b0     11 B1 5A FC | 	wrword	##32600, local03
186b4     01 20 06 F1 | 	add	local02, #1
186b8     02 00 00 FF 
186bc     00 20 16 F2 | 	cmp	local02, ##1024 wc
186c0     DC FF 9F CD |  if_b	jmp	#LR__1919
186c4                 | LR__1920
186c4                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
186c4     00 20 06 F6 | 	mov	local02, #0
186c8     04 00 00 FF 
186cc     00 E4 05 F1 | 	add	objptr, ##2048
186d0     14 00 00 FF 
186d4     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
186d8     97 1C 48 FB | 	callpa	#(@LR__1922-@LR__1921)>>2,fcache_load_ptr_
186dc                 | LR__1921
186dc     10 23 02 F6 | 	mov	local03, local02
186e0     01 22 66 F0 | 	shl	local03, #1
186e4     F2 22 02 F1 | 	add	local03, objptr
186e8     F5 12 02 F6 | 	mov	arg01, ptr__dat__
186ec     10 12 06 F1 | 	add	arg01, #16
186f0     10 FB 01 F6 | 	mov	result1, local02
186f4     01 FA 65 F0 | 	shl	result1, #1
186f8     FD 12 02 F1 | 	add	arg01, result1
186fc     09 FB E1 FA | 	rdword	result1, arg01
18700     11 FB 51 FC | 	wrword	result1, local03
18704     01 20 06 F1 | 	add	local02, #1
18708     02 00 00 FF 
1870c     00 20 56 F2 | 	cmps	local02, ##1024 wc
18710     C8 FF 9F CD |  if_b	jmp	#LR__1921
18714                 | LR__1922
18714                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
18714     00 20 06 F6 | 	mov	local02, #0
18718     04 00 00 FF 
1871c     00 E4 05 F1 | 	add	objptr, ##2048
18720     04 00 00 FF 
18724     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
18728     97 1C 48 FB | 	callpa	#(@LR__1924-@LR__1923)>>2,fcache_load_ptr_
1872c                 | LR__1923
1872c     10 23 02 F6 | 	mov	local03, local02
18730     01 22 66 F0 | 	shl	local03, #1
18734     F2 22 02 F1 | 	add	local03, objptr
18738     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1873c     10 12 06 F1 | 	add	arg01, #16
18740     10 FB 01 F6 | 	mov	result1, local02
18744     01 FA 65 F0 | 	shl	result1, #1
18748     FD 12 02 F1 | 	add	arg01, result1
1874c     09 FB E1 FA | 	rdword	result1, arg01
18750     11 FB 51 FC | 	wrword	result1, local03
18754     01 20 06 F1 | 	add	local02, #1
18758     02 00 00 FF 
1875c     00 20 56 F2 | 	cmps	local02, ##1024 wc
18760     C8 FF 9F CD |  if_b	jmp	#LR__1923
18764                 | LR__1924
18764     10 00 00 FF 
18768     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1876c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1876c     00 20 06 F6 | 	mov	local02, #0
18770     04 00 00 FF 
18774     00 E4 05 F1 | 	add	objptr, ##2048
18778     97 18 48 FB | 	callpa	#(@LR__1926-@LR__1925)>>2,fcache_load_ptr_
1877c                 | LR__1925
1877c     10 23 02 F6 | 	mov	local03, local02
18780     01 22 66 F0 | 	shl	local03, #1
18784     F2 22 02 F1 | 	add	local03, objptr
18788     10 27 02 F6 | 	mov	local05, local02
1878c     08 26 66 F0 | 	shl	local05, #8
18790     7F 00 00 FF 
18794     00 25 06 F6 | 	mov	local04, ##65280
18798     13 25 82 F1 | 	sub	local04, local05
1879c     11 25 52 FC | 	wrword	local04, local03
187a0     01 20 06 F1 | 	add	local02, #1
187a4     00 21 56 F2 | 	cmps	local02, #256 wc
187a8     D0 FF 9F CD |  if_b	jmp	#LR__1925
187ac                 | LR__1926
187ac     2C 00 00 FF 
187b0     CC E4 85 F1 | 	sub	objptr, ##22732
187b4                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
187b4     00 20 06 F6 | 	mov	local02, #0
187b8                 | LR__1927
187b8     10 23 02 F6 | 	mov	local03, local02
187bc     01 22 66 F0 | 	shl	local03, #1
187c0     2D 00 00 FF 
187c4     CC E4 05 F1 | 	add	objptr, ##23244
187c8     F2 22 02 F1 | 	add	local03, objptr
187cc     80 BF 23 FF 
187d0     00 12 06 F6 | 	mov	arg01, ##1199505408
187d4     0F 15 02 F6 | 	mov	arg02, local01
187d8     2D 00 00 FF 
187dc     CC E4 85 F1 | 	sub	objptr, ##23244
187e0     78 6B B0 FD | 	call	#__system___float_mul
187e4     FD 12 02 F6 | 	mov	arg01, result1
187e8     01 14 06 F6 | 	mov	arg02, #1
187ec     34 70 B0 FD | 	call	#__system___float_tointeger
187f0     11 FB 51 FC | 	wrword	result1, local03
187f4     0F 13 02 F6 | 	mov	arg01, local01
187f8     CC BC 1F FF 
187fc     9A 15 06 F6 | 	mov	arg02, ##1064933786
18800     58 6B B0 FD | 	call	#__system___float_mul
18804     FD 1E 02 F6 | 	mov	local01, result1
18808     01 20 06 F1 | 	add	local02, #1
1880c     00 21 56 F2 | 	cmps	local02, #256 wc
18810     A4 FF 9F CD |  if_b	jmp	#LR__1927
18814     2E 00 00 FF 
18818     CA E4 05 F1 | 	add	objptr, ##23754
1881c     F2 00 58 FC | 	wrword	#0, objptr
18820                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
18820     00 20 06 F6 | 	mov	local02, #0
18824     02 E4 05 F1 | 	add	objptr, #2
18828     97 10 48 FB | 	callpa	#(@LR__1929-@LR__1928)>>2,fcache_load_ptr_
1882c                 | LR__1928
1882c     10 23 02 F6 | 	mov	local03, local02
18830     01 22 66 F0 | 	shl	local03, #1
18834     F2 22 02 F1 | 	add	local03, objptr
18838     7F 00 80 FF 
1883c     11 01 5A FC | 	wrword	##65280, local03
18840     01 20 06 F1 | 	add	local02, #1
18844     FF 20 56 F2 | 	cmps	local02, #255 wc
18848     E0 FF 9F CD |  if_b	jmp	#LR__1928
1884c                 | LR__1929
1884c     FE E5 05 F1 | 	add	objptr, #510
18850     F2 00 58 FC | 	wrword	#0, objptr
18854                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
18854     00 20 06 F6 | 	mov	local02, #0
18858     02 E4 05 F1 | 	add	objptr, #2
1885c     97 52 48 FB | 	callpa	#(@LR__1934-@LR__1930)>>2,fcache_load_ptr_
18860                 | LR__1930
18860     10 23 02 F6 | 	mov	local03, local02
18864     01 22 66 F0 | 	shl	local03, #1
18868     F2 22 02 F1 | 	add	local03, objptr
1886c     10 25 02 F6 | 	mov	local04, local02
18870     0C 24 66 F0 | 	shl	local04, #12
18874     11 25 52 FC | 	wrword	local04, local03
18878     01 20 06 F1 | 	add	local02, #1
1887c     10 20 56 F2 | 	cmps	local02, #16 wc
18880     DC FF 9F CD |  if_b	jmp	#LR__1930
18884                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
18884     10 20 06 F6 | 	mov	local02, #16
18888                 | LR__1931
18888     10 23 02 F6 | 	mov	local03, local02
1888c     01 22 66 F0 | 	shl	local03, #1
18890     F2 22 02 F1 | 	add	local03, objptr
18894     7F 00 80 FF 
18898     11 01 5A FC | 	wrword	##65280, local03
1889c     01 20 06 F1 | 	add	local02, #1
188a0     F0 20 16 F2 | 	cmp	local02, #240 wc
188a4     E0 FF 9F CD |  if_b	jmp	#LR__1931
188a8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
188a8     F0 20 06 F6 | 	mov	local02, #240
188ac                 | LR__1932
188ac     10 23 02 F6 | 	mov	local03, local02
188b0     01 22 66 F0 | 	shl	local03, #1
188b4     F2 22 02 F1 | 	add	local03, objptr
188b8     FF 26 06 F6 | 	mov	local05, #255
188bc     10 27 82 F1 | 	sub	local05, local02
188c0     0C 26 66 F0 | 	shl	local05, #12
188c4     11 27 52 FC | 	wrword	local05, local03
188c8     01 20 06 F1 | 	add	local02, #1
188cc     00 21 16 F2 | 	cmp	local02, #256 wc
188d0     D8 FF 9F CD |  if_b	jmp	#LR__1932
188d4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
188d4     00 20 06 F6 | 	mov	local02, #0
188d8     01 00 00 FF 
188dc     00 E4 05 F1 | 	add	objptr, ##512
188e0                 | LR__1933
188e0     10 23 02 F6 | 	mov	local03, local02
188e4     01 22 66 F0 | 	shl	local03, #1
188e8     F2 22 02 F1 | 	add	local03, objptr
188ec     10 25 02 F6 | 	mov	local04, local02
188f0     08 24 66 F0 | 	shl	local04, #8
188f4     11 25 52 FC | 	wrword	local04, local03
188f8     01 20 06 F1 | 	add	local02, #1
188fc     00 21 56 F2 | 	cmps	local02, #256 wc
18900     DC FF 9F CD |  if_b	jmp	#LR__1933
18904                 | LR__1934
18904     FE E5 05 F1 | 	add	objptr, #510
18908     F2 00 58 FC | 	wrword	#0, objptr
1890c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1890c     00 20 06 F6 | 	mov	local02, #0
18910     02 E4 05 F1 | 	add	objptr, #2
18914     97 6A 48 FB | 	callpa	#(@LR__1939-@LR__1935)>>2,fcache_load_ptr_
18918                 | LR__1935
18918     10 23 02 F6 | 	mov	local03, local02
1891c     01 22 66 F0 | 	shl	local03, #1
18920     F2 22 02 F1 | 	add	local03, objptr
18924     10 25 02 F6 | 	mov	local04, local02
18928     04 24 66 F0 | 	shl	local04, #4
1892c     10 25 02 F1 | 	add	local04, local02
18930     04 24 66 F0 | 	shl	local04, #4
18934     11 25 52 FC | 	wrword	local04, local03
18938     01 20 06 F1 | 	add	local02, #1
1893c     F0 20 56 F2 | 	cmps	local02, #240 wc
18940     D4 FF 9F CD |  if_b	jmp	#LR__1935
18944     F0 20 06 F6 | 	mov	local02, #240
18948                 | LR__1936
18948     10 23 02 F6 | 	mov	local03, local02
1894c     01 22 66 F0 | 	shl	local03, #1
18950     F2 22 02 F1 | 	add	local03, objptr
18954     FF 26 06 F6 | 	mov	local05, #255
18958     10 27 82 F1 | 	sub	local05, local02
1895c     0C 26 66 F0 | 	shl	local05, #12
18960     11 27 52 FC | 	wrword	local05, local03
18964     01 20 06 F1 | 	add	local02, #1
18968     00 21 16 F2 | 	cmp	local02, #256 wc
1896c     D8 FF 9F CD |  if_b	jmp	#LR__1936
18970                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
18970     00 20 06 F6 | 	mov	local02, #0
18974     01 00 00 FF 
18978     00 E4 05 F1 | 	add	objptr, ##512
1897c                 | LR__1937
1897c     10 23 02 F6 | 	mov	local03, local02
18980     01 22 66 F0 | 	shl	local03, #1
18984     F2 22 02 F1 | 	add	local03, objptr
18988     10 25 02 F6 | 	mov	local04, local02
1898c     09 24 66 F0 | 	shl	local04, #9
18990     11 25 52 FC | 	wrword	local04, local03
18994     FF 22 06 F6 | 	mov	local03, #255
18998     10 23 82 F1 | 	sub	local03, local02
1899c     01 22 66 F0 | 	shl	local03, #1
189a0     F2 22 02 F1 | 	add	local03, objptr
189a4     10 25 02 F6 | 	mov	local04, local02
189a8     09 24 66 F0 | 	shl	local04, #9
189ac     11 25 52 FC | 	wrword	local04, local03
189b0     01 20 06 F1 | 	add	local02, #1
189b4     80 20 56 F2 | 	cmps	local02, #128 wc
189b8     C0 FF 9F CD |  if_b	jmp	#LR__1937
189bc                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
189bc     00 20 06 F6 | 	mov	local02, #0
189c0     01 00 00 FF 
189c4     00 E4 05 F1 | 	add	objptr, ##512
189c8                 | LR__1938
189c8     10 23 02 F6 | 	mov	local03, local02
189cc     01 22 66 F0 | 	shl	local03, #1
189d0     F2 22 02 F1 | 	add	local03, objptr
189d4     10 25 02 F6 | 	mov	local04, local02
189d8     0D 24 66 F0 | 	shl	local04, #13
189dc     11 25 52 FC | 	wrword	local04, local03
189e0     01 20 06 F1 | 	add	local02, #1
189e4     08 20 56 F2 | 	cmps	local02, #8 wc
189e8     DC FF 9F CD |  if_b	jmp	#LR__1938
189ec                 | LR__1939
189ec                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
189ec     08 20 06 F6 | 	mov	local02, #8
189f0     97 42 48 FB | 	callpa	#(@LR__1943-@LR__1940)>>2,fcache_load_ptr_
189f4                 | LR__1940
189f4     10 23 02 F6 | 	mov	local03, local02
189f8     01 22 66 F0 | 	shl	local03, #1
189fc     F2 22 02 F1 | 	add	local03, objptr
18a00     10 1F 02 F6 | 	mov	local01, local02
18a04     08 1E 86 F1 | 	sub	local01, #8
18a08     0B 1E 66 F0 | 	shl	local01, #11
18a0c     7F 00 00 FF 
18a10     00 25 06 F6 | 	mov	local04, ##65280
18a14     0F 25 82 F1 | 	sub	local04, local01
18a18     11 25 52 FC | 	wrword	local04, local03
18a1c     01 20 06 F1 | 	add	local02, #1
18a20     18 20 16 F2 | 	cmp	local02, #24 wc
18a24     CC FF 9F CD |  if_b	jmp	#LR__1940
18a28                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
18a28     18 20 06 F6 | 	mov	local02, #24
18a2c                 | LR__1941
18a2c     10 23 02 F6 | 	mov	local03, local02
18a30     01 22 66 F0 | 	shl	local03, #1
18a34     F2 22 02 F1 | 	add	local03, objptr
18a38     40 00 80 FF 
18a3c     11 01 58 FC | 	wrword	##32768, local03
18a40     01 20 06 F1 | 	add	local02, #1
18a44     81 20 16 F2 | 	cmp	local02, #129 wc
18a48     E0 FF 9F CD |  if_b	jmp	#LR__1941
18a4c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
18a4c     81 20 06 F6 | 	mov	local02, #129
18a50                 | LR__1942
18a50     10 23 02 F6 | 	mov	local03, local02
18a54     01 22 66 F0 | 	shl	local03, #1
18a58     F2 22 02 F1 | 	add	local03, objptr
18a5c     FF 26 06 F6 | 	mov	local05, #255
18a60     10 27 82 F1 | 	sub	local05, local02
18a64     08 26 66 F0 | 	shl	local05, #8
18a68     11 27 52 FC | 	wrword	local05, local03
18a6c     01 20 06 F1 | 	add	local02, #1
18a70     00 21 16 F2 | 	cmp	local02, #256 wc
18a74     D8 FF 9F CD |  if_b	jmp	#LR__1942
18a78                 | LR__1943
18a78     47 00 00 FF 
18a7c     BA E5 05 F1 | 	add	objptr, ##36794
18a80     F2 00 59 FC | 	wrword	#128, objptr
18a84     7B 00 00 FF 
18a88     86 E4 85 F1 | 	sub	objptr, ##63110
18a8c                 | ' for i=0 to 7
18a8c     00 20 06 F6 | 	mov	local02, #0
18a90     97 8E 48 FB | 	callpa	#(@LR__1945-@LR__1944)>>2,fcache_load_ptr_
18a94                 | LR__1944
18a94     10 23 02 F6 | 	mov	local03, local02
18a98     01 22 66 F0 | 	shl	local03, #1
18a9c     10 23 02 F1 | 	add	local03, local02
18aa0     03 22 66 F0 | 	shl	local03, #3
18aa4     34 00 00 FF 
18aa8     2C E5 05 F1 | 	add	objptr, ##26924
18aac     F2 22 02 F1 | 	add	local03, objptr
18ab0     00 EE A1 FF 
18ab4     11 01 68 FC | 	wrlong	##1138491392, local03
18ab8     10 23 02 F6 | 	mov	local03, local02
18abc     01 22 66 F0 | 	shl	local03, #1
18ac0     10 23 02 F1 | 	add	local03, local02
18ac4     03 22 66 F0 | 	shl	local03, #3
18ac8     F2 22 02 F1 | 	add	local03, objptr
18acc     04 22 06 F1 | 	add	local03, #4
18ad0     11 21 42 FC | 	wrbyte	local02, local03
18ad4     10 23 02 F6 | 	mov	local03, local02
18ad8     01 22 66 F0 | 	shl	local03, #1
18adc     10 23 02 F1 | 	add	local03, local02
18ae0     03 22 66 F0 | 	shl	local03, #3
18ae4     F2 22 02 F1 | 	add	local03, objptr
18ae8     05 22 06 F1 | 	add	local03, #5
18aec     11 21 42 FC | 	wrbyte	local02, local03
18af0     10 23 02 F6 | 	mov	local03, local02
18af4     01 22 66 F0 | 	shl	local03, #1
18af8     10 23 02 F1 | 	add	local03, local02
18afc     03 22 66 F0 | 	shl	local03, #3
18b00     F2 22 02 F1 | 	add	local03, objptr
18b04     06 22 06 F1 | 	add	local03, #6
18b08     11 01 58 FC | 	wrword	#0, local03
18b0c     10 23 02 F6 | 	mov	local03, local02
18b10     01 22 66 F0 | 	shl	local03, #1
18b14     10 23 02 F1 | 	add	local03, local02
18b18     03 22 66 F0 | 	shl	local03, #3
18b1c     F2 22 02 F1 | 	add	local03, objptr
18b20     08 22 06 F1 | 	add	local03, #8
18b24     00 C0 9F FF 
18b28     11 01 68 FC | 	wrlong	##1065353216, local03
18b2c     10 23 02 F6 | 	mov	local03, local02
18b30     01 22 66 F0 | 	shl	local03, #1
18b34     10 23 02 F1 | 	add	local03, local02
18b38     03 22 66 F0 | 	shl	local03, #3
18b3c     F2 22 02 F1 | 	add	local03, objptr
18b40     0C 22 06 F1 | 	add	local03, #12
18b44     00 40 A0 FF 
18b48     11 01 68 FC | 	wrlong	##1082130432, local03
18b4c     10 23 02 F6 | 	mov	local03, local02
18b50     01 22 66 F0 | 	shl	local03, #1
18b54     10 23 02 F1 | 	add	local03, local02
18b58     03 22 66 F0 | 	shl	local03, #3
18b5c     F2 22 02 F1 | 	add	local03, objptr
18b60     10 22 06 F1 | 	add	local03, #16
18b64     11 01 68 FC | 	wrlong	#0, local03
18b68     10 23 02 F6 | 	mov	local03, local02
18b6c     01 22 66 F0 | 	shl	local03, #1
18b70     10 23 02 F1 | 	add	local03, local02
18b74     03 22 66 F0 | 	shl	local03, #3
18b78     F2 22 02 F1 | 	add	local03, objptr
18b7c     14 22 06 F1 | 	add	local03, #20
18b80     11 FF 59 FC | 	wrword	#255, local03
18b84     10 23 02 F6 | 	mov	local03, local02
18b88     01 22 66 F0 | 	shl	local03, #1
18b8c     46 00 00 FF 
18b90     4C E5 05 F1 | 	add	objptr, ##36172
18b94     F2 22 02 F1 | 	add	local03, objptr
18b98     11 FF 59 FC | 	wrword	#255, local03
18b9c     01 20 06 F1 | 	add	local02, #1
18ba0     08 20 56 F2 | 	cmps	local02, #8 wc
18ba4     7B 00 00 FF 
18ba8     78 E4 85 F1 | 	sub	objptr, ##63096
18bac     E4 FE 9F CD |  if_b	jmp	#LR__1944
18bb0                 | LR__1945
18bb0     00 6E 20 FF 
18bb4     00 1E 06 F6 | 	mov	local01, ##1088159744
18bb8                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
18bb8     03 26 06 F6 | 	mov	local05, #3
18bbc                 | LR__1946
18bbc     0F 13 02 F6 | 	mov	arg01, local01
18bc0     CE C3 1F FF 
18bc4     7D 14 06 F6 | 	mov	arg02, ##1065852029
18bc8     90 67 B0 FD | 	call	#__system___float_mul
18bcc     FD 1E 02 F6 | 	mov	local01, result1
18bd0     FA 27 6E FB | 	djnz	local05, #LR__1946
18bd4     00 20 06 F6 | 	mov	local02, #0
18bd8                 | LR__1947
18bd8     10 27 02 F6 | 	mov	local05, local02
18bdc     02 26 66 F0 | 	shl	local05, #2
18be0     34 00 00 FF 
18be4     CC E4 05 F1 | 	add	objptr, ##26828
18be8     F2 26 02 F1 | 	add	local05, objptr
18bec     13 1F 62 FC | 	wrlong	local01, local05
18bf0     0F 13 02 F6 | 	mov	arg01, local01
18bf4     CE C3 1F FF 
18bf8     7D 14 06 F6 | 	mov	arg02, ##1065852029
18bfc     34 00 00 FF 
18c00     CC E4 85 F1 | 	sub	objptr, ##26828
18c04     54 67 B0 FD | 	call	#__system___float_mul
18c08     FD 1E 02 F6 | 	mov	local01, result1
18c0c     01 20 06 F1 | 	add	local02, #1
18c10     0C 20 56 F2 | 	cmps	local02, #12 wc
18c14     C0 FF 9F CD |  if_b	jmp	#LR__1947
18c18     7B 00 00 FF 
18c1c     86 E4 05 F1 | 	add	objptr, ##63110
18c20     F2 00 59 FC | 	wrword	#128, objptr
18c24     02 E4 85 F1 | 	sub	objptr, #2
18c28     F2 00 59 FC | 	wrword	#128, objptr
18c2c     7B 00 00 FF 
18c30     84 E4 85 F1 | 	sub	objptr, ##63108
18c34     A7 F0 03 F6 | 	mov	ptra, fp
18c38     B2 00 A0 FD | 	call	#popregs_
18c3c                 | _init_audio_ret
18c3c     2D 00 64 FD | 	ret
18c40                 | 
18c40                 | ' 
18c40                 | ' 
18c40                 | ' function getnoteval(token) as single
18c40                 | _getnoteval
18c40     02 4A 05 F6 | 	mov	COUNT_, #2
18c44     A8 00 A0 FD | 	call	#pushregs_
18c48     01 00 00 FF 
18c4c     00 13 86 F1 | 	sub	arg01, ##768
18c50     09 15 52 F6 | 	abs	arg02, arg01 wc
18c54     0C 14 16 FD | 	qdiv	arg02, #12
18c58     34 00 00 FF 
18c5c     CC E4 05 F1 | 	add	objptr, ##26828
18c60     19 14 62 FD | 	getqy	arg02
18c64     0A 15 82 F6 | 	negc	arg02, arg02
18c68     02 14 66 F0 | 	shl	arg02, #2
18c6c     F2 14 02 F1 | 	add	arg02, objptr
18c70     0A 1F 02 FB | 	rdlong	local01, arg02
18c74     09 15 52 F6 | 	abs	arg02, arg01 wc
18c78     0C 14 16 FD | 	qdiv	arg02, #12
18c7c     34 00 00 FF 
18c80     CC E4 85 F1 | 	sub	objptr, ##26828
18c84     01 12 06 F6 | 	mov	arg01, #1
18c88                 | ' noteexp=1+(note/12) 
18c88                 | ' return (2.0^noteexp)*notebase
18c88     18 14 62 FD | 	getqx	arg02
18c8c     0A 13 82 F3 | 	sumc	arg01, arg02
18c90     09 13 52 F6 | 	abs	arg01, arg01 wc
18c94     1F 20 C6 C9 |  if_b	decod	local02, #31
18c98     00 20 06 36 |  if_ae	mov	local02, #0
18c9c     B8 62 B0 FD | 	call	#__system___float_fromuns
18ca0     10 FB 61 F5 | 	xor	result1, local02
18ca4     FD 14 02 F6 | 	mov	arg02, result1
18ca8     1E 12 C6 F9 | 	decod	arg01, #30
18cac     90 75 B0 FD | 	call	#__system____builtin_powf
18cb0     FD 12 02 F6 | 	mov	arg01, result1
18cb4     0F 15 02 F6 | 	mov	arg02, local01
18cb8     A0 66 B0 FD | 	call	#__system___float_mul
18cbc     A7 F0 03 F6 | 	mov	ptra, fp
18cc0     B2 00 A0 FD | 	call	#popregs_
18cc4                 | _getnoteval_ret
18cc4     2D 00 64 FD | 	ret
18cc8                 | 
18cc8                 | ' 
18cc8                 | ' 
18cc8                 | ' 
18cc8                 | ' sub init_error_strings
18cc8                 | _init_error_strings
18cc8     62 01 00 FF 
18ccc     D0 00 06 F6 | 	mov	_var01, ##@LR__4979
18cd0     65 00 00 FF 
18cd4     60 E4 05 F1 | 	add	objptr, ##51808
18cd8     F2 00 62 FC | 	wrlong	_var01, objptr
18cdc     62 01 00 FF 
18ce0     D1 00 06 F6 | 	mov	_var01, ##@LR__4980
18ce4     04 E4 05 F1 | 	add	objptr, #4
18ce8     F2 00 62 FC | 	wrlong	_var01, objptr
18cec     62 01 00 FF 
18cf0     F6 00 06 F6 | 	mov	_var01, ##@LR__4981
18cf4     04 E4 05 F1 | 	add	objptr, #4
18cf8     F2 00 62 FC | 	wrlong	_var01, objptr
18cfc     62 01 00 FF 
18d00     17 01 06 F6 | 	mov	_var01, ##@LR__4982
18d04     04 E4 05 F1 | 	add	objptr, #4
18d08     F2 00 62 FC | 	wrlong	_var01, objptr
18d0c     62 01 00 FF 
18d10     31 01 06 F6 | 	mov	_var01, ##@LR__4983
18d14     04 E4 05 F1 | 	add	objptr, #4
18d18     F2 00 62 FC | 	wrlong	_var01, objptr
18d1c     62 01 00 FF 
18d20     4D 01 06 F6 | 	mov	_var01, ##@LR__4984
18d24     04 E4 05 F1 | 	add	objptr, #4
18d28     F2 00 62 FC | 	wrlong	_var01, objptr
18d2c     62 01 00 FF 
18d30     6F 01 06 F6 | 	mov	_var01, ##@LR__4985
18d34     04 E4 05 F1 | 	add	objptr, #4
18d38     F2 00 62 FC | 	wrlong	_var01, objptr
18d3c     62 01 00 FF 
18d40     9D 01 06 F6 | 	mov	_var01, ##@LR__4986
18d44     04 E4 05 F1 | 	add	objptr, #4
18d48     F2 00 62 FC | 	wrlong	_var01, objptr
18d4c     62 01 00 FF 
18d50     C8 01 06 F6 | 	mov	_var01, ##@LR__4987
18d54     04 E4 05 F1 | 	add	objptr, #4
18d58     F2 00 62 FC | 	wrlong	_var01, objptr
18d5c     62 01 00 FF 
18d60     E1 01 06 F6 | 	mov	_var01, ##@LR__4988
18d64     04 E4 05 F1 | 	add	objptr, #4
18d68     F2 00 62 FC | 	wrlong	_var01, objptr
18d6c     63 01 00 FF 
18d70     02 00 06 F6 | 	mov	_var01, ##@LR__4989
18d74     04 E4 05 F1 | 	add	objptr, #4
18d78     F2 00 62 FC | 	wrlong	_var01, objptr
18d7c     63 01 00 FF 
18d80     19 00 06 F6 | 	mov	_var01, ##@LR__4990
18d84     04 E4 05 F1 | 	add	objptr, #4
18d88     F2 00 62 FC | 	wrlong	_var01, objptr
18d8c     63 01 00 FF 
18d90     37 00 06 F6 | 	mov	_var01, ##@LR__4991
18d94     04 E4 05 F1 | 	add	objptr, #4
18d98     F2 00 62 FC | 	wrlong	_var01, objptr
18d9c     63 01 00 FF 
18da0     5B 00 06 F6 | 	mov	_var01, ##@LR__4992
18da4     04 E4 05 F1 | 	add	objptr, #4
18da8     F2 00 62 FC | 	wrlong	_var01, objptr
18dac     63 01 00 FF 
18db0     82 00 06 F6 | 	mov	_var01, ##@LR__4993
18db4     04 E4 05 F1 | 	add	objptr, #4
18db8     F2 00 62 FC | 	wrlong	_var01, objptr
18dbc     63 01 00 FF 
18dc0     9E 00 06 F6 | 	mov	_var01, ##@LR__4994
18dc4     04 E4 05 F1 | 	add	objptr, #4
18dc8     F2 00 62 FC | 	wrlong	_var01, objptr
18dcc     63 01 00 FF 
18dd0     AF 00 06 F6 | 	mov	_var01, ##@LR__4995
18dd4     04 E4 05 F1 | 	add	objptr, #4
18dd8     F2 00 62 FC | 	wrlong	_var01, objptr
18ddc     63 01 00 FF 
18de0     BF 00 06 F6 | 	mov	_var01, ##@LR__4996
18de4     04 E4 05 F1 | 	add	objptr, #4
18de8     F2 00 62 FC | 	wrlong	_var01, objptr
18dec     63 01 00 FF 
18df0     DA 00 06 F6 | 	mov	_var01, ##@LR__4997
18df4     04 E4 05 F1 | 	add	objptr, #4
18df8     F2 00 62 FC | 	wrlong	_var01, objptr
18dfc     63 01 00 FF 
18e00     EC 00 06 F6 | 	mov	_var01, ##@LR__4998
18e04     04 E4 05 F1 | 	add	objptr, #4
18e08     F2 00 62 FC | 	wrlong	_var01, objptr
18e0c     63 01 00 FF 
18e10     04 01 06 F6 | 	mov	_var01, ##@LR__4999
18e14     04 E4 05 F1 | 	add	objptr, #4
18e18     F2 00 62 FC | 	wrlong	_var01, objptr
18e1c     63 01 00 FF 
18e20     18 01 06 F6 | 	mov	_var01, ##@LR__5000
18e24     04 E4 05 F1 | 	add	objptr, #4
18e28     F2 00 62 FC | 	wrlong	_var01, objptr
18e2c     63 01 00 FF 
18e30     28 01 06 F6 | 	mov	_var01, ##@LR__5001
18e34     04 E4 05 F1 | 	add	objptr, #4
18e38     F2 00 62 FC | 	wrlong	_var01, objptr
18e3c     63 01 00 FF 
18e40     45 01 06 F6 | 	mov	_var01, ##@LR__5002
18e44     04 E4 05 F1 | 	add	objptr, #4
18e48     F2 00 62 FC | 	wrlong	_var01, objptr
18e4c     63 01 00 FF 
18e50     56 01 06 F6 | 	mov	_var01, ##@LR__5003
18e54     04 E4 05 F1 | 	add	objptr, #4
18e58     F2 00 62 FC | 	wrlong	_var01, objptr
18e5c     63 01 00 FF 
18e60     67 01 06 F6 | 	mov	_var01, ##@LR__5004
18e64     04 E4 05 F1 | 	add	objptr, #4
18e68     F2 00 62 FC | 	wrlong	_var01, objptr
18e6c     63 01 00 FF 
18e70     92 01 06 F6 | 	mov	_var01, ##@LR__5005
18e74     04 E4 05 F1 | 	add	objptr, #4
18e78     F2 00 62 FC | 	wrlong	_var01, objptr
18e7c     63 01 00 FF 
18e80     AE 01 06 F6 | 	mov	_var01, ##@LR__5006
18e84     04 E4 05 F1 | 	add	objptr, #4
18e88     F2 00 62 FC | 	wrlong	_var01, objptr
18e8c     63 01 00 FF 
18e90     C4 01 06 F6 | 	mov	_var01, ##@LR__5007
18e94     04 E4 05 F1 | 	add	objptr, #4
18e98     F2 00 62 FC | 	wrlong	_var01, objptr
18e9c     63 01 00 FF 
18ea0     D1 01 06 F6 | 	mov	_var01, ##@LR__5008
18ea4     04 E4 05 F1 | 	add	objptr, #4
18ea8     F2 00 62 FC | 	wrlong	_var01, objptr
18eac     63 01 00 FF 
18eb0     E3 01 06 F6 | 	mov	_var01, ##@LR__5009
18eb4     04 E4 05 F1 | 	add	objptr, #4
18eb8     F2 00 62 FC | 	wrlong	_var01, objptr
18ebc     63 01 00 FF 
18ec0     F4 01 06 F6 | 	mov	_var01, ##@LR__5010
18ec4     04 E4 05 F1 | 	add	objptr, #4
18ec8     F2 00 62 FC | 	wrlong	_var01, objptr
18ecc     64 01 00 FF 
18ed0     10 00 06 F6 | 	mov	_var01, ##@LR__5011
18ed4     04 E4 05 F1 | 	add	objptr, #4
18ed8     F2 00 62 FC | 	wrlong	_var01, objptr
18edc     64 01 00 FF 
18ee0     21 00 06 F6 | 	mov	_var01, ##@LR__5012
18ee4     04 E4 05 F1 | 	add	objptr, #4
18ee8     F2 00 62 FC | 	wrlong	_var01, objptr
18eec     64 01 00 FF 
18ef0     30 00 06 F6 | 	mov	_var01, ##@LR__5013
18ef4     04 E4 05 F1 | 	add	objptr, #4
18ef8     F2 00 62 FC | 	wrlong	_var01, objptr
18efc     64 01 00 FF 
18f00     4B 00 06 F6 | 	mov	_var01, ##@LR__5014
18f04     04 E4 05 F1 | 	add	objptr, #4
18f08     F2 00 62 FC | 	wrlong	_var01, objptr
18f0c     64 01 00 FF 
18f10     7F 00 06 F6 | 	mov	_var01, ##@LR__5015
18f14     04 E4 05 F1 | 	add	objptr, #4
18f18     F2 00 62 FC | 	wrlong	_var01, objptr
18f1c     64 01 00 FF 
18f20     98 00 06 F6 | 	mov	_var01, ##@LR__5016
18f24     04 E4 05 F1 | 	add	objptr, #4
18f28     F2 00 62 FC | 	wrlong	_var01, objptr
18f2c     64 01 00 FF 
18f30     B4 00 06 F6 | 	mov	_var01, ##@LR__5017
18f34     04 E4 05 F1 | 	add	objptr, #4
18f38     F2 00 62 FC | 	wrlong	_var01, objptr
18f3c     64 01 00 FF 
18f40     D2 00 06 F6 | 	mov	_var01, ##@LR__5018
18f44     04 E4 05 F1 | 	add	objptr, #4
18f48     F2 00 62 FC | 	wrlong	_var01, objptr
18f4c     64 01 00 FF 
18f50     EB 00 06 F6 | 	mov	_var01, ##@LR__5019
18f54     04 E4 05 F1 | 	add	objptr, #4
18f58     F2 00 62 FC | 	wrlong	_var01, objptr
18f5c     64 01 00 FF 
18f60     0A 01 06 F6 | 	mov	_var01, ##@LR__5020
18f64     04 E4 05 F1 | 	add	objptr, #4
18f68     F2 00 62 FC | 	wrlong	_var01, objptr
18f6c     64 01 00 FF 
18f70     19 01 06 F6 | 	mov	_var01, ##@LR__5021
18f74     04 E4 05 F1 | 	add	objptr, #4
18f78     F2 00 62 FC | 	wrlong	_var01, objptr
18f7c     64 01 00 FF 
18f80     47 01 06 F6 | 	mov	_var01, ##@LR__5022
18f84     04 E4 05 F1 | 	add	objptr, #4
18f88     F2 00 62 FC | 	wrlong	_var01, objptr
18f8c     64 01 00 FF 
18f90     55 01 06 F6 | 	mov	_var01, ##@LR__5023
18f94     04 E4 05 F1 | 	add	objptr, #4
18f98     F2 00 62 FC | 	wrlong	_var01, objptr
18f9c     64 01 00 FF 
18fa0     6A 01 06 F6 | 	mov	_var01, ##@LR__5024
18fa4     04 E4 05 F1 | 	add	objptr, #4
18fa8     F2 00 62 FC | 	wrlong	_var01, objptr
18fac     64 01 00 FF 
18fb0     8E 01 06 F6 | 	mov	_var01, ##@LR__5025
18fb4     04 E4 05 F1 | 	add	objptr, #4
18fb8     F2 00 62 FC | 	wrlong	_var01, objptr
18fbc     64 01 00 FF 
18fc0     A5 01 06 F6 | 	mov	_var01, ##@LR__5026
18fc4     04 E4 05 F1 | 	add	objptr, #4
18fc8     F2 00 62 FC | 	wrlong	_var01, objptr
18fcc     64 01 00 FF 
18fd0     B8 01 06 F6 | 	mov	_var01, ##@LR__5027
18fd4     04 E4 05 F1 | 	add	objptr, #4
18fd8     F2 00 62 FC | 	wrlong	_var01, objptr
18fdc     64 01 00 FF 
18fe0     CF 01 06 F6 | 	mov	_var01, ##@LR__5028
18fe4     04 E4 05 F1 | 	add	objptr, #4
18fe8     F2 00 62 FC | 	wrlong	_var01, objptr
18fec     65 00 00 FF 
18ff0     24 E5 85 F1 | 	sub	objptr, ##52004
18ff4                 | _init_error_strings_ret
18ff4     2D 00 64 FD | 	ret
18ff8                 | 
18ff8                 | '         
18ff8                 | ' sub printerror(err as integer)
18ff8                 | _printerror
18ff8     01 4A 05 F6 | 	mov	COUNT_, #1
18ffc     A8 00 A0 FD | 	call	#pushregs_
19000     09 1F 02 F6 | 	mov	local01, arg01
19004     64 01 00 FF 
19008     E8 13 06 F6 | 	mov	arg01, ##@LR__5029
1900c     94 26 B0 FD | 	call	#_hg010b_spin2_write
19010     0F 13 02 F6 | 	mov	arg01, local01
19014     8C 28 B0 FD | 	call	#_hg010b_spin2_inttostr
19018     FD 12 02 F6 | 	mov	arg01, result1
1901c     84 26 B0 FD | 	call	#_hg010b_spin2_write
19020     64 01 00 FF 
19024     EF 13 06 F6 | 	mov	arg01, ##@LR__5030
19028     78 26 B0 FD | 	call	#_hg010b_spin2_write
1902c     02 1E 66 F0 | 	shl	local01, #2
19030     65 00 00 FF 
19034     60 E4 05 F1 | 	add	objptr, ##51808
19038     F2 1E 02 F1 | 	add	local01, objptr
1903c     0F 13 02 FB | 	rdlong	arg01, local01
19040     65 00 00 FF 
19044     60 E4 85 F1 | 	sub	objptr, ##51808
19048                 | ' 
19048                 | ' write(text)
19048     58 26 B0 FD | 	call	#_hg010b_spin2_write
1904c                 | ' crlf
1904c     B4 27 B0 FD | 	call	#_hg010b_spin2_crlf
19050     A7 F0 03 F6 | 	mov	ptra, fp
19054     B2 00 A0 FD | 	call	#popregs_
19058                 | _printerror_ret
19058     2D 00 64 FD | 	ret
1905c                 | 
1905c                 | ' 
1905c                 | ' '' ------------------------------- Hardware start/stop/initialization 
1905c                 | ' 
1905c                 | ' sub startpsram
1905c                 | _startpsram
1905c     00 12 06 F6 | 	mov	arg01, #0
19060     0A 14 C6 F9 | 	decod	arg02, #10
19064     0B 16 06 F6 | 	mov	arg03, #11
19068     07 18 06 F6 | 	mov	arg04, #7
1906c     0B 00 00 FF 
19070     C0 E4 05 F1 | 	add	objptr, ##5824
19074     38 29 B0 FD | 	call	#_psram_spin2_startx
19078     4B 00 00 FF 
1907c     2C E5 05 F1 | 	add	objptr, ##38700
19080     F2 FA 61 FC | 	wrlong	result1, objptr
19084                 | '     return $7FF00 + cog*12
19084     0C E4 05 F1 | 	add	objptr, #12
19088     FF 03 80 FF 
1908c     F2 00 6A FC | 	wrlong	##524032, objptr
19090     56 00 00 FF 
19094     F8 E5 85 F1 | 	sub	objptr, ##44536
19098                 | _startpsram_ret
19098     2D 00 64 FD | 	ret
1909c                 | 
1909c                 | ' 
1909c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1909c                 | _startvideo
1909c     01 4A 05 F6 | 	mov	COUNT_, #1
190a0     A8 00 A0 FD | 	call	#pushregs_
190a4     56 00 00 FF 
190a8     F8 E5 05 F1 | 	add	objptr, ##44536
190ac     F2 18 02 FB | 	rdlong	arg04, objptr
190b0     56 00 00 FF 
190b4     F8 E5 85 F1 | 	sub	objptr, ##44536
190b8     0A 13 02 F6 | 	mov	arg01, arg02
190bc     0C 15 02 F6 | 	mov	arg02, arg04
190c0     B8 10 B0 FD | 	call	#_hg010b_spin2_start
190c4     56 00 00 FF 
190c8     E4 E5 05 F1 | 	add	objptr, ##44516
190cc     F2 FA 61 FC | 	wrlong	result1, objptr
190d0                 | ' 
190d0                 | ' videocog=v.start(pin,mbox)
190d0                 | ' 
190d0                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
190d0     00 1E 06 F6 | 	mov	local01, #0
190d4     4B 00 00 FF 
190d8     24 E5 85 F1 | 	sub	objptr, ##38692
190dc                 | LR__1950
190dc     0F 13 02 F6 | 	mov	arg01, local01
190e0     00 28 00 FF 
190e4     00 14 06 F6 | 	mov	arg02, ##5242880
190e8     1C 2D B0 FD | 	call	#_psram_spin2_setQos
190ec     01 1E 06 F1 | 	add	local01, #1
190f0     08 1E 56 F2 | 	cmps	local01, #8 wc
190f4     E4 FF 9F CD |  if_b	jmp	#LR__1950
190f8     4B 00 00 FF 
190fc     24 E5 05 F1 | 	add	objptr, ##38692
19100     F2 12 02 FB | 	rdlong	arg01, objptr
19104     7A 00 02 FF 
19108     00 14 06 F6 | 	mov	arg02, ##67171328
1910c     4B 00 00 FF 
19110     24 E5 85 F1 | 	sub	objptr, ##38692
19114     F0 2C B0 FD | 	call	#_psram_spin2_setQos
19118     0B 00 00 FF 
1911c     C0 E4 85 F1 | 	sub	objptr, ##5824
19120                 | ' psram.setQoS(videocog, $0400f400) 
19120                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
19120     F2 14 02 F6 | 	mov	arg02, objptr
19124     00 B8 03 FF 
19128     00 14 46 F5 | 	or	arg02, ##124780544
1912c     00 16 06 F6 | 	mov	arg03, #0
19130     00 18 06 F6 | 	mov	arg04, #0
19134     00 12 06 F6 | 	mov	arg01, #0
19138     4C 41 B0 FD | 	call	#__system___basic_open
1913c                 | ' return videocog
1913c     56 00 00 FF 
19140     E4 E5 05 F1 | 	add	objptr, ##44516
19144     F2 FA 01 FB | 	rdlong	result1, objptr
19148     56 00 00 FF 
1914c     E4 E5 85 F1 | 	sub	objptr, ##44516
19150     A7 F0 03 F6 | 	mov	ptra, fp
19154     B2 00 A0 FD | 	call	#popregs_
19158                 | _startvideo_ret
19158     2D 00 64 FD | 	ret
1915c                 | 
1915c                 | ' 
1915c                 | ' 
1915c                 | ' 
1915c                 | ' 
1915c                 | ' '' ------------------------------- Convenient psram peek/poke
1915c                 | ' 
1915c                 | ' sub pslpoke(addr as ulong,value as ulong)
1915c                 | _pslpoke
1915c     00 4A 05 F6 | 	mov	COUNT_, #0
19160     A8 00 A0 FD | 	call	#pushregs_
19164     08 F0 07 F1 | 	add	ptra, #8
19168     A7 12 62 FC | 	wrlong	arg01, fp
1916c     04 4E 05 F1 | 	add	fp, #4
19170     A7 14 62 FC | 	wrlong	arg02, fp
19174     A7 12 02 F6 | 	mov	arg01, fp
19178     04 4E 85 F1 | 	sub	fp, #4
1917c     A7 14 02 FB | 	rdlong	arg02, fp
19180     04 16 06 F6 | 	mov	arg03, #4
19184     0B 00 00 FF 
19188     C0 E4 05 F1 | 	add	objptr, ##5824
1918c     E8 2A B0 FD | 	call	#_psram_spin2_write
19190     0B 00 00 FF 
19194     C0 E4 85 F1 | 	sub	objptr, ##5824
19198     A7 F0 03 F6 | 	mov	ptra, fp
1919c     B2 00 A0 FD | 	call	#popregs_
191a0                 | _pslpoke_ret
191a0     2D 00 64 FD | 	ret
191a4                 | 
191a4                 | ' 
191a4                 | ' sub psdpoke(addr as ulong,value as ulong)
191a4                 | _psdpoke
191a4     00 4A 05 F6 | 	mov	COUNT_, #0
191a8     A8 00 A0 FD | 	call	#pushregs_
191ac     08 F0 07 F1 | 	add	ptra, #8
191b0     A7 12 62 FC | 	wrlong	arg01, fp
191b4     04 4E 05 F1 | 	add	fp, #4
191b8     A7 14 62 FC | 	wrlong	arg02, fp
191bc     A7 12 02 F6 | 	mov	arg01, fp
191c0     04 4E 85 F1 | 	sub	fp, #4
191c4     A7 14 02 FB | 	rdlong	arg02, fp
191c8     02 16 06 F6 | 	mov	arg03, #2
191cc     0B 00 00 FF 
191d0     C0 E4 05 F1 | 	add	objptr, ##5824
191d4     A0 2A B0 FD | 	call	#_psram_spin2_write
191d8     0B 00 00 FF 
191dc     C0 E4 85 F1 | 	sub	objptr, ##5824
191e0     A7 F0 03 F6 | 	mov	ptra, fp
191e4     B2 00 A0 FD | 	call	#popregs_
191e8                 | _psdpoke_ret
191e8     2D 00 64 FD | 	ret
191ec                 | 
191ec                 | ' 
191ec                 | ' sub pspoke(addr as ulong,value as ulong)
191ec                 | _pspoke
191ec     00 4A 05 F6 | 	mov	COUNT_, #0
191f0     A8 00 A0 FD | 	call	#pushregs_
191f4     08 F0 07 F1 | 	add	ptra, #8
191f8     A7 12 62 FC | 	wrlong	arg01, fp
191fc     04 4E 05 F1 | 	add	fp, #4
19200     A7 14 62 FC | 	wrlong	arg02, fp
19204     A7 12 02 F6 | 	mov	arg01, fp
19208     04 4E 85 F1 | 	sub	fp, #4
1920c     A7 14 02 FB | 	rdlong	arg02, fp
19210     01 16 06 F6 | 	mov	arg03, #1
19214     0B 00 00 FF 
19218     C0 E4 05 F1 | 	add	objptr, ##5824
1921c     58 2A B0 FD | 	call	#_psram_spin2_write
19220     0B 00 00 FF 
19224     C0 E4 85 F1 | 	sub	objptr, ##5824
19228     A7 F0 03 F6 | 	mov	ptra, fp
1922c     B2 00 A0 FD | 	call	#popregs_
19230                 | _pspoke_ret
19230     2D 00 64 FD | 	ret
19234                 | 
19234                 | ' 
19234                 | ' function pspeek(adr as ulong) as ubyte
19234                 | _pspeek
19234     00 4A 05 F6 | 	mov	COUNT_, #0
19238     A8 00 A0 FD | 	call	#pushregs_
1923c     0C F0 07 F1 | 	add	ptra, #12
19240     04 4E 05 F1 | 	add	fp, #4
19244     A7 12 62 FC | 	wrlong	arg01, fp
19248     04 4E 05 F1 | 	add	fp, #4
1924c     A7 12 02 F6 | 	mov	arg01, fp
19250     04 4E 85 F1 | 	sub	fp, #4
19254     A7 14 02 FB | 	rdlong	arg02, fp
19258     04 4E 85 F1 | 	sub	fp, #4
1925c     01 16 06 F6 | 	mov	arg03, #1
19260     0B 00 00 FF 
19264     C0 E4 05 F1 | 	add	objptr, ##5824
19268     70 29 B0 FD | 	call	#_psram_spin2_read1
1926c     0B 00 00 FF 
19270     C0 E4 85 F1 | 	sub	objptr, ##5824
19274                 | ' psram.read1(varptr(res),adr,1)
19274                 | ' return res
19274     08 4E 05 F1 | 	add	fp, #8
19278     A7 FA C1 FA | 	rdbyte	result1, fp
1927c     08 4E 85 F1 | 	sub	fp, #8
19280     A7 F0 03 F6 | 	mov	ptra, fp
19284     B2 00 A0 FD | 	call	#popregs_
19288                 | _pspeek_ret
19288     2D 00 64 FD | 	ret
1928c                 | 
1928c                 | ' 
1928c                 | ' function pslpeek(adr as ulong) as ulong
1928c                 | _pslpeek
1928c     00 4A 05 F6 | 	mov	COUNT_, #0
19290     A8 00 A0 FD | 	call	#pushregs_
19294     0C F0 07 F1 | 	add	ptra, #12
19298     04 4E 05 F1 | 	add	fp, #4
1929c     A7 12 62 FC | 	wrlong	arg01, fp
192a0     04 4E 05 F1 | 	add	fp, #4
192a4     A7 12 02 F6 | 	mov	arg01, fp
192a8     04 4E 85 F1 | 	sub	fp, #4
192ac     A7 14 02 FB | 	rdlong	arg02, fp
192b0     04 4E 85 F1 | 	sub	fp, #4
192b4     04 16 06 F6 | 	mov	arg03, #4
192b8     0B 00 00 FF 
192bc     C0 E4 05 F1 | 	add	objptr, ##5824
192c0     18 29 B0 FD | 	call	#_psram_spin2_read1
192c4     0B 00 00 FF 
192c8     C0 E4 85 F1 | 	sub	objptr, ##5824
192cc                 | ' psram.read1(varptr(res),adr,4)
192cc                 | ' return res
192cc     08 4E 05 F1 | 	add	fp, #8
192d0     A7 FA 01 FB | 	rdlong	result1, fp
192d4     08 4E 85 F1 | 	sub	fp, #8
192d8     A7 F0 03 F6 | 	mov	ptra, fp
192dc     B2 00 A0 FD | 	call	#popregs_
192e0                 | _pslpeek_ret
192e0     2D 00 64 FD | 	ret
192e4                 | 
192e4                 | ' 
192e4                 | ' function psdpeek(adr as ulong) as ulong
192e4                 | _psdpeek
192e4     00 4A 05 F6 | 	mov	COUNT_, #0
192e8     A8 00 A0 FD | 	call	#pushregs_
192ec     0C F0 07 F1 | 	add	ptra, #12
192f0     04 4E 05 F1 | 	add	fp, #4
192f4     A7 12 62 FC | 	wrlong	arg01, fp
192f8     04 4E 05 F1 | 	add	fp, #4
192fc     A7 12 02 F6 | 	mov	arg01, fp
19300     04 4E 85 F1 | 	sub	fp, #4
19304     A7 14 02 FB | 	rdlong	arg02, fp
19308     04 4E 85 F1 | 	sub	fp, #4
1930c     02 16 06 F6 | 	mov	arg03, #2
19310     0B 00 00 FF 
19314     C0 E4 05 F1 | 	add	objptr, ##5824
19318     C0 28 B0 FD | 	call	#_psram_spin2_read1
1931c     0B 00 00 FF 
19320     C0 E4 85 F1 | 	sub	objptr, ##5824
19324                 | ' psram.read1(varptr(res),adr,2)
19324                 | ' return res
19324     08 4E 05 F1 | 	add	fp, #8
19328     A7 FA E1 FA | 	rdword	result1, fp
1932c     08 4E 85 F1 | 	sub	fp, #8
19330     A7 F0 03 F6 | 	mov	ptra, fp
19334     B2 00 A0 FD | 	call	#popregs_
19338                 | _psdpeek_ret
19338     2D 00 64 FD | 	ret
1933c                 | 
1933c                 | ' 
1933c                 | ' '' ------------------------------- USB keyboard scan to char translator
1933c                 | ' 
1933c                 | ' function scantochar(key)
1933c                 | _scantochar
1933c                 | ' 
1933c                 | ' select case (key shr 8) and 255
1933c     09 01 02 F6 | 	mov	_var01, arg01
19340     08 00 C6 F0 | 	sar	_var01, #8
19344     FF 00 0E F5 | 	and	_var01, #255 wz
19348     24 00 90 AD |  if_e	jmp	#LR__1960
1934c     02 00 0E F2 | 	cmp	_var01, #2 wz
19350     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
19354     30 00 90 AD |  if_e	jmp	#LR__1961
19358     40 00 0E F2 | 	cmp	_var01, #64 wz
1935c     44 00 90 AD |  if_e	jmp	#LR__1962
19360     42 00 0E F2 | 	cmp	_var01, #66 wz
19364     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
19368     70 00 90 5D |  if_ne	jmp	#LR__1964
1936c     50 00 90 FD | 	jmp	#LR__1963
19370                 | LR__1960
19370     09 FB 01 F6 | 	mov	result1, arg01
19374     7F FA 05 F5 | 	and	result1, #127
19378     02 FA 65 F0 | 	shl	result1, #2
1937c     F5 FA 01 F1 | 	add	result1, ptr__dat__
19380     FD FA C1 FA | 	rdbyte	result1, result1
19384     54 00 90 FD | 	jmp	#_scantochar_ret
19388                 | LR__1961
19388     09 FB 01 F6 | 	mov	result1, arg01
1938c     7F FA 05 F5 | 	and	result1, #127
19390     02 FA 65 F0 | 	shl	result1, #2
19394     01 FA 05 F1 | 	add	result1, #1
19398     F5 FA 01 F1 | 	add	result1, ptr__dat__
1939c     FD FA C1 FA | 	rdbyte	result1, result1
193a0     38 00 90 FD | 	jmp	#_scantochar_ret
193a4                 | LR__1962
193a4     09 FB 01 F6 | 	mov	result1, arg01
193a8     7F FA 05 F5 | 	and	result1, #127
193ac     02 FA 65 F0 | 	shl	result1, #2
193b0     02 FA 05 F1 | 	add	result1, #2
193b4     F5 FA 01 F1 | 	add	result1, ptr__dat__
193b8     FD FA C1 FA | 	rdbyte	result1, result1
193bc     1C 00 90 FD | 	jmp	#_scantochar_ret
193c0                 | LR__1963
193c0     09 FB 01 F6 | 	mov	result1, arg01
193c4     7F FA 05 F5 | 	and	result1, #127
193c8     02 FA 65 F0 | 	shl	result1, #2
193cc     03 FA 05 F1 | 	add	result1, #3
193d0     F5 FA 01 F1 | 	add	result1, ptr__dat__
193d4     FD FA C1 FA | 	rdbyte	result1, result1
193d8     00 00 90 FD | 	jmp	#_scantochar_ret
193dc                 | LR__1964
193dc                 | _scantochar_ret
193dc     2D 00 64 FD | 	ret
193e0                 | 
193e0                 | _program
193e0     0B 4A 05 F6 | 	mov	COUNT_, #11
193e4     A8 00 A0 FD | 	call	#pushregs_
193e8     70 FC BF FD | 	call	#_startpsram
193ec     40 12 06 F6 | 	mov	arg01, #64
193f0     00 14 06 F6 | 	mov	arg02, #0
193f4     00 16 06 F6 | 	mov	arg03, #0
193f8     A0 FC BF FD | 	call	#_startvideo
193fc     00 12 06 F6 | 	mov	arg01, #0
19400     00 14 06 F6 | 	mov	arg02, #0
19404     00 16 06 F6 | 	mov	arg03, #0
19408     0B 00 00 FF 
1940c     C0 E4 05 F1 | 	add	objptr, ##5824
19410     A4 2D B0 FD | 	call	#_audio096_spin2_start
19414     FE 1C 02 F6 | 	mov	arg06, result2
19418     4B 00 00 FF 
1941c     20 E5 05 F1 | 	add	objptr, ##38688
19420     F2 FA 61 FC | 	wrlong	result1, objptr
19424     14 E4 05 F1 | 	add	objptr, #20
19428     F2 1C 62 FC | 	wrlong	arg06, objptr
1942c     56 00 00 FF 
19430     F4 E5 85 F1 | 	sub	objptr, ##44532
19434     32 12 06 F6 | 	mov	arg01, #50
19438     98 36 B0 FD | 	call	#__system___waitms
1943c     56 00 00 FF 
19440     F4 E5 05 F1 | 	add	objptr, ##44532
19444     F2 12 02 FB | 	rdlong	arg01, objptr
19448     56 00 00 FF 
1944c     F4 E5 85 F1 | 	sub	objptr, ##44532
19450     14 12 06 F1 | 	add	arg01, #20
19454     20 00 80 FF 
19458     09 01 58 FC | 	wrword	##16384, arg01
1945c     B0 2A B0 FD | 	call	#_usbnew_spin2_start
19460     56 00 00 FF 
19464     E8 E5 05 F1 | 	add	objptr, ##44520
19468     F2 FA 61 FC | 	wrlong	result1, objptr
1946c                 | '   mouse_limits[0] := xlim
1946c     0F 00 00 FF 
19470     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
19474     01 00 80 FF 
19478     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1947c                 | '   mouse_limits[1] := ylim
1947c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
19480     01 00 80 FF 
19484     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
19488     56 00 00 FF 
1948c     DB E4 85 F1 | 	sub	objptr, ##44251
19490     F2 12 02 F6 | 	mov	arg01, objptr
19494     0D E5 85 F1 | 	sub	objptr, #269
19498     C4 12 06 F1 | 	add	arg01, #196
1949c                 | '   mouse_outptr := ptr
1949c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
194a0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
194a4     0F 00 00 FF 
194a8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
194ac     0E 00 00 FF 
194b0     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
194b4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
194b8     0E 00 00 FF 
194bc     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
194c0     10 12 06 F6 | 	mov	arg01, #16
194c4     AC 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
194c8     10 12 06 F6 | 	mov	arg01, #16
194cc     20 14 06 F6 | 	mov	arg02, #32
194d0     20 16 06 F6 | 	mov	arg03, #32
194d4     2C 12 B0 FD | 	call	#_hg010b_spin2_setspritesize
194d8     09 12 C6 F9 | 	decod	arg01, #9
194dc     20 15 06 F6 | 	mov	arg02, #288
194e0     84 2B B0 FD | 	call	#_usbnew_spin2_mouse_move
194e4     F2 1C 02 F6 | 	mov	arg06, objptr
194e8     79 00 00 FF 
194ec     CC E5 05 F1 | 	add	objptr, ##62412
194f0     F2 1A 02 F6 | 	mov	arg05, objptr
194f4     0D 1D 62 FC | 	wrlong	arg06, arg05
194f8     04 1A 06 F1 | 	add	arg05, #4
194fc     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
19500     EF 14 02 F6 | 	mov	arg02, entryptr__
19504     F2 1E 02 F6 | 	mov	local01, objptr
19508     1E FA 05 F6 | 	mov	result1, #30
1950c     28 1E 62 FD | 	setq	local01
19510     0A FB F1 FC | 	coginit	result1, arg02 wc
19514     01 FA 65 C6 |  if_b	neg	result1, #1
19518     04 E4 85 F1 | 	sub	objptr, #4
1951c     F2 FA 61 FC | 	wrlong	result1, objptr
19520     01 00 00 FF 
19524     90 E4 05 F1 | 	add	objptr, ##656
19528     F2 00 68 FC | 	wrlong	#0, objptr
1952c     24 00 00 FF 
19530     40 E4 85 F1 | 	sub	objptr, ##18496
19534     F2 04 68 FC | 	wrlong	#2, objptr
19538     04 E4 05 F1 | 	add	objptr, #4
1953c     F2 26 69 FC | 	wrlong	#147, objptr
19540     04 E4 05 F1 | 	add	objptr, #4
19544     F2 34 69 FC | 	wrlong	#154, objptr
19548     04 E4 05 F1 | 	add	objptr, #4
1954c     F2 08 68 FC | 	wrlong	#4, objptr
19550     04 E4 85 F1 | 	sub	objptr, #4
19554     F2 1C 02 FB | 	rdlong	arg06, objptr
19558     14 E4 85 F1 | 	sub	objptr, #20
1955c     F2 1C 62 FC | 	wrlong	arg06, objptr
19560     04 E4 05 F1 | 	add	objptr, #4
19564     F2 00 68 FC | 	wrlong	#0, objptr
19568     04 E4 05 F1 | 	add	objptr, #4
1956c     F2 00 68 FC | 	wrlong	#0, objptr
19570     22 00 00 FF 
19574     B0 E5 05 F1 | 	add	objptr, ##17840
19578     F2 02 68 FC | 	wrlong	#1, objptr
1957c     01 00 00 FF 
19580     9C E4 05 F1 | 	add	objptr, ##668
19584     F2 00 68 FC | 	wrlong	#0, objptr
19588     01 00 00 FF 
1958c     00 EA 05 F1 | 	add	ptr__dat__, ##512
19590     08 E4 05 F1 | 	add	objptr, #8
19594     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
19598     04 E4 85 F1 | 	sub	objptr, #4
1959c     03 00 80 FF 
195a0     F2 3C 69 FC | 	wrlong	##1694, objptr
195a4     16 00 00 FF 
195a8     1C E4 85 F1 | 	sub	objptr, ##11292
195ac     F2 18 68 FC | 	wrlong	#12, objptr
195b0     65 00 00 FF 
195b4     48 E4 85 F1 | 	sub	objptr, ##51784
195b8     01 00 00 FF 
195bc     00 EA 85 F1 | 	sub	ptr__dat__, ##512
195c0     10 DF BF FD | 	call	#_init_commands
195c4     00 F7 BF FD | 	call	#_init_error_strings
195c8     9C EE BF FD | 	call	#_init_audio
195cc     14 49 BF FD | 	call	#_do_new
195d0     57 00 00 FF 
195d4     20 E4 05 F1 | 	add	objptr, ##44576
195d8     F2 12 02 FB | 	rdlong	arg01, objptr
195dc     04 E4 85 F1 | 	sub	objptr, #4
195e0     F2 14 02 FB | 	rdlong	arg02, objptr
195e4     57 00 00 FF 
195e8     1C E4 85 F1 | 	sub	objptr, ##44572
195ec     F8 1D B0 FD | 	call	#_hg010b_spin2_cls
195f0     57 00 00 FF 
195f4     24 E4 05 F1 | 	add	objptr, ##44580
195f8     F2 12 02 FB | 	rdlong	arg01, objptr
195fc     57 00 00 FF 
19600     24 E4 85 F1 | 	sub	objptr, ##44580
19604     CC 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
19608                 | ' 
19608                 | ' leading_spaces:=amount
19608     01 00 00 FF 
1960c     B2 E4 05 F1 | 	add	objptr, ##690
19610     F2 04 68 FC | 	wrlong	#2, objptr
19614     01 00 00 FF 
19618     B2 E4 85 F1 | 	sub	objptr, ##690
1961c     64 01 00 FF 
19620     F2 21 06 F6 | 	mov	local02, ##@LR__5031
19624     3D 12 06 F6 | 	mov	arg01, #61
19628     3C 14 06 F6 | 	mov	arg02, #60
1962c     3B 16 06 F6 | 	mov	arg03, #59
19630     3A 18 06 F6 | 	mov	arg04, #58
19634     D4 7B B0 FD | 	call	#__system___vfs_open_sdcardx
19638     FD 14 02 F6 | 	mov	arg02, result1
1963c     10 13 02 F6 | 	mov	arg01, local02
19640     68 35 B0 FD | 	call	#__system___mount
19644     64 01 00 FF 
19648     F6 13 06 F6 | 	mov	arg01, ##@LR__5032
1964c     1C 38 B0 FD | 	call	#__system___chdir
19650     64 01 00 FF 
19654     FE 21 06 F6 | 	mov	local02, ##@LR__5033
19658     72 00 00 FF 
1965c     78 E4 05 F1 | 	add	objptr, ##58488
19660     F2 20 62 FC | 	wrlong	local02, objptr
19664     1B 00 00 FF 
19668     60 E4 85 F1 | 	sub	objptr, ##13920
1966c     F2 12 02 FB | 	rdlong	arg01, objptr
19670     57 00 00 FF 
19674     18 E4 85 F1 | 	sub	objptr, ##44568
19678     01 12 66 F0 | 	shl	arg01, #1
1967c     01 14 06 F6 | 	mov	arg02, #1
19680     90 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
19684                 | ' 
19684                 | ' init_commands
19684                 | ' init_error_strings
19684                 | ' init_audio
19684                 | ' do_new
19684                 | ' 
19684                 | ' 
19684                 | ' cls(ink, paper)
19684                 | ' v.setfontfamily(font) 				' use ST Mono font
19684                 | ' v.setleadingspaces(2)
19684                 | ' mount "/sd", _vfs_open_sdcard()
19684                 | ' chdir "/sd/bas"
19684                 | ' 
19684                 | ' currentdir$="/sd/bas"
19684                 | ' 
19684                 | ' position 2*editor_spaces,1 : print ver$
19684     00 12 06 F6 | 	mov	arg01, #0
19688     E4 8A B0 FD | 	call	#__system___getiolock_0474
1968c     FD 12 02 F6 | 	mov	arg01, result1
19690     4C 31 B0 FD | 	call	#__system___lockmem
19694     18 00 00 FF 
19698     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1969c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
196a0     18 00 00 FF 
196a4     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
196a8     00 12 06 F6 | 	mov	arg01, #0
196ac     00 16 06 F6 | 	mov	arg03, #0
196b0     30 3E B0 FD | 	call	#__system___basic_print_string
196b4     00 12 06 F6 | 	mov	arg01, #0
196b8     0A 14 06 F6 | 	mov	arg02, #10
196bc     00 16 06 F6 | 	mov	arg03, #0
196c0     C8 3D B0 FD | 	call	#__system___basic_print_char
196c4     00 12 06 F6 | 	mov	arg01, #0
196c8     A4 8A B0 FD | 	call	#__system___getiolock_0474
196cc     FD 00 68 FC | 	wrlong	#0, result1
196d0     F2 12 02 FB | 	rdlong	arg01, objptr
196d4     00 14 06 F6 | 	mov	arg02, #0
196d8     0A 16 06 F6 | 	mov	arg03, #10
196dc     98 53 B0 FD | 	call	#__system__Number_S
196e0     FD 12 02 F6 | 	mov	arg01, result1
196e4     65 01 00 FF 
196e8     06 14 06 F6 | 	mov	arg02, ##@LR__5034
196ec     4C 31 B0 FD | 	call	#__system___string_concat
196f0     FD 20 02 F6 | 	mov	local02, result1
196f4     79 00 00 FF 
196f8     C0 E5 05 F1 | 	add	objptr, ##62400
196fc     F2 20 62 FC | 	wrlong	local02, objptr
19700     79 00 00 FF 
19704     C0 E5 85 F1 | 	sub	objptr, ##62400
19708                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
19708     00 12 06 F6 | 	mov	arg01, #0
1970c     60 8A B0 FD | 	call	#__system___getiolock_0474
19710     FD 12 02 F6 | 	mov	arg01, result1
19714     C8 30 B0 FD | 	call	#__system___lockmem
19718     79 00 00 FF 
1971c     C0 E5 05 F1 | 	add	objptr, ##62400
19720     F2 14 02 FB | 	rdlong	arg02, objptr
19724     79 00 00 FF 
19728     C0 E5 85 F1 | 	sub	objptr, ##62400
1972c     00 12 06 F6 | 	mov	arg01, #0
19730     00 16 06 F6 | 	mov	arg03, #0
19734     AC 3D B0 FD | 	call	#__system___basic_print_string
19738     00 12 06 F6 | 	mov	arg01, #0
1973c     0A 14 06 F6 | 	mov	arg02, #10
19740     00 16 06 F6 | 	mov	arg03, #0
19744     44 3D B0 FD | 	call	#__system___basic_print_char
19748     00 12 06 F6 | 	mov	arg01, #0
1974c     20 8A B0 FD | 	call	#__system___getiolock_0474
19750     FD 00 68 FC | 	wrlong	#0, result1
19754     57 00 00 FF 
19758     18 E4 05 F1 | 	add	objptr, ##44568
1975c     F2 12 02 FB | 	rdlong	arg01, objptr
19760     57 00 00 FF 
19764     18 E4 85 F1 | 	sub	objptr, ##44568
19768     01 12 66 F0 | 	shl	arg01, #1
1976c     04 14 06 F6 | 	mov	arg02, #4
19770     A0 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
19774                 | ' position 2*editor_spaces,4 : print "Ready"
19774     00 12 06 F6 | 	mov	arg01, #0
19778     F4 89 B0 FD | 	call	#__system___getiolock_0474
1977c     FD 12 02 F6 | 	mov	arg01, result1
19780     5C 30 B0 FD | 	call	#__system___lockmem
19784     65 01 00 FF 
19788     18 14 06 F6 | 	mov	arg02, ##@LR__5035
1978c     00 12 06 F6 | 	mov	arg01, #0
19790     00 16 06 F6 | 	mov	arg03, #0
19794     4C 3D B0 FD | 	call	#__system___basic_print_string
19798     FD 22 02 F6 | 	mov	local03, result1
1979c     00 12 06 F6 | 	mov	arg01, #0
197a0     0A 14 06 F6 | 	mov	arg02, #10
197a4     00 16 06 F6 | 	mov	arg03, #0
197a8     E0 3C B0 FD | 	call	#__system___basic_print_char
197ac     01 24 06 F6 | 	mov	local04, #1
197b0     00 12 06 F6 | 	mov	arg01, #0
197b4     B8 89 B0 FD | 	call	#__system___getiolock_0474
197b8     FD 00 68 FC | 	wrlong	#0, result1
197bc     00 26 06 F6 | 	mov	local05, #0
197c0     00 14 06 F6 | 	mov	arg02, #0
197c4     01 14 D6 F7 | 	test	arg02, #1 wc
197c8     5A 4C 64 FD | 	drvc	#38
197cc     01 14 D6 F7 | 	test	arg02, #1 wc
197d0     5A 4E 64 FD | 	drvc	#39
197d4     65 01 00 FF 
197d8     1E 20 06 F6 | 	mov	local02, ##@LR__5036
197dc     7B 00 00 FF 
197e0     88 E4 05 F1 | 	add	objptr, ##63112
197e4     F2 20 62 FC | 	wrlong	local02, objptr
197e8     7B 00 00 FF 
197ec     88 E4 85 F1 | 	sub	objptr, ##63112
197f0                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
197f0                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
197f0                 | ' 
197f0                 | ' loadname="noname.bas"
197f0                 | ' 
197f0                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
197f0                 | ' 
197f0                 | ' 'base2:=@channel1[0]+64*channel
197f0                 | ' 'long[base2+8]:=sample+$C0000000 
197f0                 | ' 'long[base2+12]:= len
197f0                 | ' 'if loop >=0 
197f0                 | ' '  long[base2+16]:= loop
197f0                 | ' 'else
197f0                 | ' '  long[base2+16]:= len+2
197f0                 | ' 'word[base2+20]:=vol
197f0                 | ' 'word[base2+24]:= 3546911/splfreq 
197f0                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
197f0                 | ' 'long[base2+28]:=$40000000
197f0                 | ' 
197f0                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
197f0                 | ' 'lpoke base+16,2048
197f0                 | ' 'lpoke base+12,0
197f0                 | ' 'dpoke base+20,16383
197f0                 | ' 'dpoke base+22,8192
197f0                 | ' 'dpoke base+24,60
197f0                 | ' 'dpoke base+26,256 ' todo: use skip to make accurate sample rate
197f0                 | ' 'dpoke base+28,$4000_0000
197f0                 | ' 'lpoke base+32,0 
197f0                 | ' 'lpoke base+36, 0
197f0                 | ' 'lpoke base+40,25600' speed
197f0                 | ' 'lpoke base+44,1023 'len
197f0                 | ' 
197f0                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
197f0                 | ' 
197f0                 | ' '-------------------------------------------------------------------------------------------------------- 
197f0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
197f0                 | ' '--------------------------------------------------------------------------------------------------------
197f0                 | ' 
197f0                 | ' do
197f0                 | LR__1970
197f0     01 12 06 F6 | 	mov	arg01, #1
197f4     80 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
197f8     07 12 06 F6 | 	mov	arg01, #7
197fc     0B 00 00 FF 
19800     C0 E4 05 F1 | 	add	objptr, ##5824
19804     D8 2C B0 FD | 	call	#_audio096_spin2_stop
19808     0B 00 00 FF 
1980c     C0 E4 85 F1 | 	sub	objptr, ##5824
19810     F4 27 B0 FD | 	call	#_usbnew_spin2_get_key
19814     65 00 00 FF 
19818     58 E4 05 F1 | 	add	objptr, ##51800
1981c     F2 FA 61 FC | 	wrlong	result1, objptr
19820                 | '   return hkbd_led_rep
19820     13 00 00 FF 
19824     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
19828     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
1982c     13 00 00 FF 
19830     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
19834     16 00 00 FF 
19838     34 E4 05 F1 | 	add	objptr, ##11316
1983c     F2 FA 61 FC | 	wrlong	result1, objptr
19840                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
19840     16 00 00 FF 
19844     34 E4 85 F1 | 	sub	objptr, ##11316
19848     F2 20 02 FB | 	rdlong	local02, objptr
1984c     65 00 00 FF 
19850     58 E4 85 F1 | 	sub	objptr, ##51800
19854     01 20 16 F2 | 	cmp	local02, #1 wc
19858     BC 00 90 CD |  if_b	jmp	#LR__1971
1985c     65 00 00 FF 
19860     58 E4 05 F1 | 	add	objptr, ##51800
19864     F2 24 02 FB | 	rdlong	local04, objptr
19868     65 00 00 FF 
1986c     58 E4 85 F1 | 	sub	objptr, ##51800
19870     12 23 02 F6 | 	mov	local03, local04
19874     04 22 16 F2 | 	cmp	local03, #4 wc
19878     9C 00 90 3D |  if_ae	jmp	#LR__1971
1987c     79 00 00 FF 
19880     C4 E5 05 F1 | 	add	objptr, ##62404
19884     F2 1E 02 FB | 	rdlong	local01, objptr
19888     79 00 00 FF 
1988c     C4 E5 85 F1 | 	sub	objptr, ##62404
19890     0F 27 02 F6 | 	mov	local05, local01
19894     01 26 0E F2 | 	cmp	local05, #1 wz
19898     7C 00 90 5D |  if_ne	jmp	#LR__1971
1989c     04 00 00 FF 
198a0     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
198a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
198a8     04 00 00 FF 
198ac     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
198b0     56 00 00 FF 
198b4     44 22 06 F6 | 	mov	local03, ##44100
198b8     0C 24 C6 F9 | 	decod	local04, #12
198bc     00 26 06 F6 | 	mov	local05, #0
198c0     03 00 00 FF 
198c4     DE 1E 06 F6 | 	mov	local01, ##1758
198c8     07 12 06 F6 | 	mov	arg01, #7
198cc     56 00 00 FF 
198d0     44 16 06 F6 | 	mov	arg03, ##44100
198d4     0C 18 C6 F9 | 	decod	arg04, #12
198d8     00 1A 06 F6 | 	mov	arg05, #0
198dc     03 00 00 FF 
198e0     DE 1C 06 F6 | 	mov	arg06, ##1758
198e4     0B 00 00 FF 
198e8     C0 E4 05 F1 | 	add	objptr, ##5824
198ec     A0 2A B0 FD | 	call	#_audio096_spin2_play
198f0     0B 00 00 FF 
198f4     C0 E4 85 F1 | 	sub	objptr, ##5824
198f8     0A 12 06 F6 | 	mov	arg01, #10
198fc     D4 31 B0 FD | 	call	#__system___waitms
19900     07 12 06 F6 | 	mov	arg01, #7
19904     0B 00 00 FF 
19908     C0 E4 05 F1 | 	add	objptr, ##5824
1990c     D0 2B B0 FD | 	call	#_audio096_spin2_stop
19910     0B 00 00 FF 
19914     C0 E4 85 F1 | 	sub	objptr, ##5824
19918                 | LR__1971
19918                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
19918     65 00 00 FF 
1991c     58 E4 05 F1 | 	add	objptr, ##51800
19920     F2 20 02 FB | 	rdlong	local02, objptr
19924     65 00 00 FF 
19928     58 E4 85 F1 | 	sub	objptr, ##51800
1992c     04 20 16 F2 | 	cmp	local02, #4 wc
19930     80 00 90 CD |  if_b	jmp	#LR__1972
19934     65 00 00 FF 
19938     58 E4 05 F1 | 	add	objptr, ##51800
1993c     F2 24 02 FB | 	rdlong	local04, objptr
19940     65 00 00 FF 
19944     58 E4 85 F1 | 	sub	objptr, ##51800
19948     12 23 02 F6 | 	mov	local03, local04
1994c     00 00 40 FF 
19950     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
19954     65 00 00 CF 
19958     58 E4 05 C1 |  if_b	add	objptr, ##51800
1995c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
19960     65 00 00 CF 
19964     58 E4 85 C1 |  if_b	sub	objptr, ##51800
19968     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
1996c     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
19970     40 00 90 3D |  if_ae	jmp	#LR__1972
19974     65 00 00 FF 
19978     58 E4 05 F1 | 	add	objptr, ##51800
1997c     F2 20 02 FB | 	rdlong	local02, objptr
19980     04 E4 05 F1 | 	add	objptr, #4
19984     F2 20 62 FC | 	wrlong	local02, objptr
19988     16 00 00 FF 
1998c     34 E4 05 F1 | 	add	objptr, ##11316
19990     F2 02 68 FC | 	wrlong	#1, objptr
19994     16 00 00 FF 
19998     34 E4 85 F1 | 	sub	objptr, ##11316
1999c     F2 20 02 FB | 	rdlong	local02, objptr
199a0     16 00 00 FF 
199a4     38 E4 05 F1 | 	add	objptr, ##11320
199a8     F2 20 62 FC | 	wrlong	local02, objptr
199ac     7B 00 00 FF 
199b0     94 E4 85 F1 | 	sub	objptr, ##63124
199b4                 | LR__1972
199b4                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
199b4     65 00 00 FF 
199b8     58 E4 05 F1 | 	add	objptr, ##51800
199bc     F2 20 02 FB | 	rdlong	local02, objptr
199c0     65 00 00 FF 
199c4     58 E4 85 F1 | 	sub	objptr, ##51800
199c8     00 00 40 FF 
199cc     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
199d0     7B 00 00 3F 
199d4     98 E4 05 31 |  if_ae	add	objptr, ##63128
199d8     F2 00 68 3C |  if_ae	wrlong	#0, objptr
199dc     08 E4 85 31 |  if_ae	sub	objptr, #8
199e0     F2 00 68 3C |  if_ae	wrlong	#0, objptr
199e4     7B 00 00 3F 
199e8     90 E4 85 31 |  if_ae	sub	objptr, ##63120
199ec                 | ' if key=0 andalso rpt=1 then rptcnt+=1
199ec     65 00 00 FF 
199f0     58 E4 05 F1 | 	add	objptr, ##51800
199f4     F2 20 0A FB | 	rdlong	local02, objptr wz
199f8     65 00 00 FF 
199fc     58 E4 85 F1 | 	sub	objptr, ##51800
19a00     7B 00 00 AF 
19a04     90 E4 05 A1 |  if_e	add	objptr, ##63120
19a08     F2 24 02 AB |  if_e	rdlong	local04, objptr
19a0c     7B 00 00 AF 
19a10     90 E4 85 A1 |  if_e	sub	objptr, ##63120
19a14     12 23 02 A6 |  if_e	mov	local03, local04
19a18     01 22 0E A2 |  if_e	cmp	local03, #1 wz
19a1c     7B 00 00 AF 
19a20     98 E4 05 A1 |  if_e	add	objptr, ##63128
19a24     F2 20 02 AB |  if_e	rdlong	local02, objptr
19a28     01 20 06 A1 |  if_e	add	local02, #1
19a2c     F2 20 62 AC |  if_e	wrlong	local02, objptr
19a30     7B 00 00 AF 
19a34     98 E4 85 A1 |  if_e	sub	objptr, ##63128
19a38                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
19a38     65 00 00 FF 
19a3c     58 E4 05 F1 | 	add	objptr, ##51800
19a40     F2 20 02 FB | 	rdlong	local02, objptr
19a44     65 00 00 FF 
19a48     58 E4 85 F1 | 	sub	objptr, ##51800
19a4c     00 00 40 FF 
19a50     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
19a54     44 00 90 3D |  if_ae	jmp	#LR__1974
19a58     7B 00 00 FF 
19a5c     98 E4 05 F1 | 	add	objptr, ##63128
19a60     F2 20 02 FB | 	rdlong	local02, objptr
19a64     7B 00 00 FF 
19a68     98 E4 85 F1 | 	sub	objptr, ##63128
19a6c     19 20 0E F2 | 	cmp	local02, #25 wz
19a70     28 00 90 5D |  if_ne	jmp	#LR__1973
19a74     65 00 00 FF 
19a78     5C E4 05 F1 | 	add	objptr, ##51804
19a7c     F2 20 02 FB | 	rdlong	local02, objptr
19a80     16 00 00 FF 
19a84     38 E4 05 F1 | 	add	objptr, ##11320
19a88     F2 20 62 FC | 	wrlong	local02, objptr
19a8c     04 E4 05 F1 | 	add	objptr, #4
19a90     F2 2A 68 FC | 	wrlong	#21, objptr
19a94     7B 00 00 FF 
19a98     98 E4 85 F1 | 	sub	objptr, ##63128
19a9c                 | LR__1973
19a9c                 | LR__1974
19a9c                 | ' 
19a9c                 | ' 
19a9c                 | ' if key3<>0 then
19a9c     7B 00 00 FF 
19aa0     94 E4 05 F1 | 	add	objptr, ##63124
19aa4     F2 28 0A FB | 	rdlong	local06, objptr wz
19aa8     7B 00 00 FF 
19aac     94 E4 85 F1 | 	sub	objptr, ##63124
19ab0     3C FD 9F AD |  if_e	jmp	#LR__1970
19ab4                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
19ab4     79 00 00 FF 
19ab8     C4 E5 05 F1 | 	add	objptr, ##62404
19abc     F2 20 02 FB | 	rdlong	local02, objptr
19ac0     79 00 00 FF 
19ac4     C4 E5 85 F1 | 	sub	objptr, ##62404
19ac8     01 20 0E F2 | 	cmp	local02, #1 wz
19acc     50 00 90 5D |  if_ne	jmp	#LR__1975
19ad0     7B 00 00 FF 
19ad4     68 E4 05 F1 | 	add	objptr, ##63080
19ad8     F2 14 02 FB | 	rdlong	arg02, objptr
19adc     56 00 00 FF 
19ae0     44 22 06 F6 | 	mov	local03, ##44100
19ae4     0C 24 C6 F9 | 	decod	local04, #12
19ae8     04 E4 85 F1 | 	sub	objptr, #4
19aec     F2 26 02 FB | 	rdlong	local05, objptr
19af0     01 1E 66 F6 | 	neg	local01, #1
19af4     07 12 06 F6 | 	mov	arg01, #7
19af8     56 00 00 FF 
19afc     44 16 06 F6 | 	mov	arg03, ##44100
19b00     0C 18 C6 F9 | 	decod	arg04, #12
19b04     13 1B 02 F6 | 	mov	arg05, local05
19b08     01 1C 66 F6 | 	neg	arg06, #1
19b0c     6F 00 00 FF 
19b10     A4 E5 85 F1 | 	sub	objptr, ##57252
19b14     78 28 B0 FD | 	call	#_audio096_spin2_play
19b18     0B 00 00 FF 
19b1c     C0 E4 85 F1 | 	sub	objptr, ##5824
19b20                 | LR__1975
19b20     7B 00 00 FF 
19b24     94 E4 05 F1 | 	add	objptr, ##63124
19b28     F2 12 02 FB | 	rdlong	arg01, objptr
19b2c     7B 00 00 FF 
19b30     94 E4 85 F1 | 	sub	objptr, ##63124
19b34     04 F8 BF FD | 	call	#_scantochar
19b38     7B 00 00 FF 
19b3c     9C E4 05 F1 | 	add	objptr, ##63132
19b40     F2 FA 61 FC | 	wrlong	result1, objptr
19b44                 | '   if leds and 2 = 2 then 
19b44     10 E4 85 F1 | 	sub	objptr, #16
19b48     F2 20 0A FB | 	rdlong	local02, objptr wz
19b4c     7B 00 00 FF 
19b50     8C E4 85 F1 | 	sub	objptr, ##63116
19b54     68 01 90 AD |  if_e	jmp	#LR__1983
19b58                 | '     if key4>96 andalso key4<123 then
19b58     7B 00 00 FF 
19b5c     9C E4 05 F1 | 	add	objptr, ##63132
19b60     F2 20 02 FB | 	rdlong	local02, objptr
19b64     7B 00 00 FF 
19b68     9C E4 85 F1 | 	sub	objptr, ##63132
19b6c     61 20 56 F2 | 	cmps	local02, #97 wc
19b70     40 00 90 CD |  if_b	jmp	#LR__1976
19b74     7B 00 00 FF 
19b78     9C E4 05 F1 | 	add	objptr, ##63132
19b7c     F2 24 02 FB | 	rdlong	local04, objptr
19b80     7B 00 00 FF 
19b84     9C E4 85 F1 | 	sub	objptr, ##63132
19b88     12 23 02 F6 | 	mov	local03, local04
19b8c     7B 22 56 F2 | 	cmps	local03, #123 wc
19b90     20 00 90 3D |  if_ae	jmp	#LR__1976
19b94     7B 00 00 FF 
19b98     9C E4 05 F1 | 	add	objptr, ##63132
19b9c     F2 20 02 FB | 	rdlong	local02, objptr
19ba0     20 20 86 F1 | 	sub	local02, #32
19ba4     F2 20 62 FC | 	wrlong	local02, objptr
19ba8     7B 00 00 FF 
19bac     9C E4 85 F1 | 	sub	objptr, ##63132
19bb0     0C 01 90 FD | 	jmp	#LR__1982
19bb4                 | LR__1976
19bb4     7B 00 00 FF 
19bb8     9C E4 05 F1 | 	add	objptr, ##63132
19bbc     F2 20 02 FB | 	rdlong	local02, objptr
19bc0     7B 00 00 FF 
19bc4     9C E4 85 F1 | 	sub	objptr, ##63132
19bc8     41 20 56 F2 | 	cmps	local02, #65 wc
19bcc     40 00 90 CD |  if_b	jmp	#LR__1977
19bd0     7B 00 00 FF 
19bd4     9C E4 05 F1 | 	add	objptr, ##63132
19bd8     F2 24 02 FB | 	rdlong	local04, objptr
19bdc     7B 00 00 FF 
19be0     9C E4 85 F1 | 	sub	objptr, ##63132
19be4     12 23 02 F6 | 	mov	local03, local04
19be8     5B 22 56 F2 | 	cmps	local03, #91 wc
19bec     20 00 90 3D |  if_ae	jmp	#LR__1977
19bf0     7B 00 00 FF 
19bf4     9C E4 05 F1 | 	add	objptr, ##63132
19bf8     F2 20 02 FB | 	rdlong	local02, objptr
19bfc     20 20 06 F1 | 	add	local02, #32
19c00     F2 20 62 FC | 	wrlong	local02, objptr
19c04     7B 00 00 FF 
19c08     9C E4 85 F1 | 	sub	objptr, ##63132
19c0c     B0 00 90 FD | 	jmp	#LR__1981
19c10                 | LR__1977
19c10     7B 00 00 FF 
19c14     9C E4 05 F1 | 	add	objptr, ##63132
19c18     F2 20 02 FB | 	rdlong	local02, objptr
19c1c     7B 00 00 FF 
19c20     9C E4 85 F1 | 	sub	objptr, ##63132
19c24     17 20 56 F2 | 	cmps	local02, #23 wc
19c28     40 00 90 CD |  if_b	jmp	#LR__1978
19c2c     7B 00 00 FF 
19c30     9C E4 05 F1 | 	add	objptr, ##63132
19c34     F2 24 02 FB | 	rdlong	local04, objptr
19c38     7B 00 00 FF 
19c3c     9C E4 85 F1 | 	sub	objptr, ##63132
19c40     12 23 02 F6 | 	mov	local03, local04
19c44     20 22 56 F2 | 	cmps	local03, #32 wc
19c48     20 00 90 3D |  if_ae	jmp	#LR__1978
19c4c     7B 00 00 FF 
19c50     9C E4 05 F1 | 	add	objptr, ##63132
19c54     F2 20 02 FB | 	rdlong	local02, objptr
19c58     09 20 86 F1 | 	sub	local02, #9
19c5c     F2 20 62 FC | 	wrlong	local02, objptr
19c60     7B 00 00 FF 
19c64     9C E4 85 F1 | 	sub	objptr, ##63132
19c68     54 00 90 FD | 	jmp	#LR__1980
19c6c                 | LR__1978
19c6c     7B 00 00 FF 
19c70     9C E4 05 F1 | 	add	objptr, ##63132
19c74     F2 20 02 FB | 	rdlong	local02, objptr
19c78     7B 00 00 FF 
19c7c     9C E4 85 F1 | 	sub	objptr, ##63132
19c80     0E 20 56 F2 | 	cmps	local02, #14 wc
19c84     38 00 90 CD |  if_b	jmp	#LR__1979
19c88     7B 00 00 FF 
19c8c     9C E4 05 F1 | 	add	objptr, ##63132
19c90     F2 24 02 FB | 	rdlong	local04, objptr
19c94     7B 00 00 FF 
19c98     9C E4 85 F1 | 	sub	objptr, ##63132
19c9c     12 23 02 F6 | 	mov	local03, local04
19ca0     17 22 56 F2 | 	cmps	local03, #23 wc
19ca4     7B 00 00 CF 
19ca8     9C E4 05 C1 |  if_b	add	objptr, ##63132
19cac     F2 20 02 CB |  if_b	rdlong	local02, objptr
19cb0     27 20 06 C1 |  if_b	add	local02, #39
19cb4     F2 20 62 CC |  if_b	wrlong	local02, objptr
19cb8     7B 00 00 CF 
19cbc     9C E4 85 C1 |  if_b	sub	objptr, ##63132
19cc0                 | LR__1979
19cc0                 | LR__1980
19cc0                 | LR__1981
19cc0                 | LR__1982
19cc0                 | LR__1983
19cc0                 | '  
19cc0                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
19cc0     7B 00 00 FF 
19cc4     9C E4 05 F1 | 	add	objptr, ##63132
19cc8     F2 20 02 FB | 	rdlong	local02, objptr
19ccc     7B 00 00 FF 
19cd0     9C E4 85 F1 | 	sub	objptr, ##63132
19cd4     01 20 56 F2 | 	cmps	local02, #1 wc
19cd8     90 00 90 CD |  if_b	jmp	#LR__1984
19cdc     7B 00 00 FF 
19ce0     9C E4 05 F1 | 	add	objptr, ##63132
19ce4     F2 24 02 FB | 	rdlong	local04, objptr
19ce8     7B 00 00 FF 
19cec     9C E4 85 F1 | 	sub	objptr, ##63132
19cf0     12 23 02 F6 | 	mov	local03, local04
19cf4     7F 22 56 F2 | 	cmps	local03, #127 wc
19cf8     38 E4 05 C1 |  if_b	add	objptr, #56
19cfc     F2 1E E2 CA |  if_b	rdword	local01, objptr
19d00     38 E4 85 C1 |  if_b	sub	objptr, #56
19d04     0F 27 32 C9 |  if_b	getword	local05, local01, #0
19d08     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
19d0c     5C 00 90 3D |  if_ae	jmp	#LR__1984
19d10     7B 00 00 FF 
19d14     9C E4 05 F1 | 	add	objptr, ##63132
19d18     F2 12 02 FB | 	rdlong	arg01, objptr
19d1c     7B 00 00 FF 
19d20     9C E4 85 F1 | 	sub	objptr, ##63132
19d24     C0 4C B0 FD | 	call	#__system__Chr_S
19d28     FD 2A 02 F6 | 	mov	local07, result1
19d2c     57 00 00 FF 
19d30     00 E4 05 F1 | 	add	objptr, ##44544
19d34     F2 12 02 FB | 	rdlong	arg01, objptr
19d38     57 00 00 FF 
19d3c     00 E4 85 F1 | 	sub	objptr, ##44544
19d40     15 15 02 F6 | 	mov	arg02, local07
19d44     F4 2A B0 FD | 	call	#__system___string_concat
19d48     57 00 00 FF 
19d4c     00 E4 05 F1 | 	add	objptr, ##44544
19d50     F2 FA 61 FC | 	wrlong	result1, objptr
19d54     24 00 00 FF 
19d58     9C E4 05 F1 | 	add	objptr, ##18588
19d5c     F2 12 02 FB | 	rdlong	arg01, objptr
19d60     7B 00 00 FF 
19d64     9C E4 85 F1 | 	sub	objptr, ##63132
19d68     1C 17 B0 FD | 	call	#_hg010b_spin2_putchar
19d6c                 | LR__1984
19d6c                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
19d6c     7B 00 00 FF 
19d70     9C E4 05 F1 | 	add	objptr, ##63132
19d74     F2 20 02 FB | 	rdlong	local02, objptr
19d78     7B 00 00 FF 
19d7c     9C E4 85 F1 | 	sub	objptr, ##63132
19d80     01 20 56 F2 | 	cmps	local02, #1 wc
19d84     D0 00 90 CD |  if_b	jmp	#LR__1985
19d88     7B 00 00 FF 
19d8c     9C E4 05 F1 | 	add	objptr, ##63132
19d90     F2 24 02 FB | 	rdlong	local04, objptr
19d94     7B 00 00 FF 
19d98     9C E4 85 F1 | 	sub	objptr, ##63132
19d9c     12 23 02 F6 | 	mov	local03, local04
19da0     7F 22 56 F2 | 	cmps	local03, #127 wc
19da4     B0 00 90 3D |  if_ae	jmp	#LR__1985
19da8     38 E4 05 F1 | 	add	objptr, #56
19dac     F2 1E E2 FA | 	rdword	local01, objptr
19db0     38 E4 85 F1 | 	sub	objptr, #56
19db4     0F 27 32 F9 | 	getword	local05, local01, #0
19db8     FE 26 0E F2 | 	cmp	local05, #254 wz
19dbc     79 00 00 AF 
19dc0     C4 E5 05 A1 |  if_e	add	objptr, ##62404
19dc4     F2 2C 02 AB |  if_e	rdlong	local08, objptr
19dc8     79 00 00 AF 
19dcc     C4 E5 85 A1 |  if_e	sub	objptr, ##62404
19dd0     16 2F 02 A6 |  if_e	mov	local09, local08
19dd4     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
19dd8     7C 00 90 5D |  if_ne	jmp	#LR__1985
19ddc     04 00 00 FF 
19de0     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19de4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19de8     04 00 00 FF 
19dec     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19df0     56 00 00 FF 
19df4     44 22 06 F6 | 	mov	local03, ##44100
19df8     0C 24 C6 F9 | 	decod	local04, #12
19dfc     00 26 06 F6 | 	mov	local05, #0
19e00     03 00 00 FF 
19e04     DE 1E 06 F6 | 	mov	local01, ##1758
19e08     07 12 06 F6 | 	mov	arg01, #7
19e0c     56 00 00 FF 
19e10     44 16 06 F6 | 	mov	arg03, ##44100
19e14     0C 18 C6 F9 | 	decod	arg04, #12
19e18     00 1A 06 F6 | 	mov	arg05, #0
19e1c     03 00 00 FF 
19e20     DE 1C 06 F6 | 	mov	arg06, ##1758
19e24     0B 00 00 FF 
19e28     C0 E4 05 F1 | 	add	objptr, ##5824
19e2c     60 25 B0 FD | 	call	#_audio096_spin2_play
19e30     0B 00 00 FF 
19e34     C0 E4 85 F1 | 	sub	objptr, ##5824
19e38     2C 13 06 F6 | 	mov	arg01, #300
19e3c     94 2C B0 FD | 	call	#__system___waitms
19e40     07 12 06 F6 | 	mov	arg01, #7
19e44     0B 00 00 FF 
19e48     C0 E4 05 F1 | 	add	objptr, ##5824
19e4c     90 26 B0 FD | 	call	#_audio096_spin2_stop
19e50     0B 00 00 FF 
19e54     C0 E4 85 F1 | 	sub	objptr, ##5824
19e58                 | LR__1985
19e58                 | '  
19e58                 | '   'tab
19e58                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
19e58     7B 00 00 FF 
19e5c     94 E4 05 F1 | 	add	objptr, ##63124
19e60     F2 20 02 FB | 	rdlong	local02, objptr
19e64     7B 00 00 FF 
19e68     94 E4 85 F1 | 	sub	objptr, ##63124
19e6c     10 21 E2 F8 | 	getbyte	local02, local02, #0
19e70     2B 20 0E F2 | 	cmp	local02, #43 wz
19e74     B4 00 90 5D |  if_ne	jmp	#LR__1986
19e78     38 E4 05 F1 | 	add	objptr, #56
19e7c     F2 24 E2 FA | 	rdword	local04, objptr
19e80     38 E4 85 F1 | 	sub	objptr, #56
19e84     12 23 32 F9 | 	getword	local03, local04, #0
19e88     F0 22 16 F2 | 	cmp	local03, #240 wc
19e8c     9C 00 90 CD |  if_b	jmp	#LR__1986
19e90     79 00 00 FF 
19e94     C4 E5 05 F1 | 	add	objptr, ##62404
19e98     F2 1E 02 FB | 	rdlong	local01, objptr
19e9c     79 00 00 FF 
19ea0     C4 E5 85 F1 | 	sub	objptr, ##62404
19ea4     0F 27 02 F6 | 	mov	local05, local01
19ea8     01 26 0E F2 | 	cmp	local05, #1 wz
19eac     7C 00 90 5D |  if_ne	jmp	#LR__1986
19eb0     04 00 00 FF 
19eb4     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19eb8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19ebc     04 00 00 FF 
19ec0     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19ec4     56 00 00 FF 
19ec8     44 22 06 F6 | 	mov	local03, ##44100
19ecc     0E 24 C6 F9 | 	decod	local04, #14
19ed0     00 26 06 F6 | 	mov	local05, #0
19ed4     03 00 00 FF 
19ed8     DE 1E 06 F6 | 	mov	local01, ##1758
19edc     00 12 06 F6 | 	mov	arg01, #0
19ee0     56 00 00 FF 
19ee4     44 16 06 F6 | 	mov	arg03, ##44100
19ee8     0E 18 C6 F9 | 	decod	arg04, #14
19eec     00 1A 06 F6 | 	mov	arg05, #0
19ef0     03 00 00 FF 
19ef4     DE 1C 06 F6 | 	mov	arg06, ##1758
19ef8     0B 00 00 FF 
19efc     C0 E4 05 F1 | 	add	objptr, ##5824
19f00     8C 24 B0 FD | 	call	#_audio096_spin2_play
19f04     0B 00 00 FF 
19f08     C0 E4 85 F1 | 	sub	objptr, ##5824
19f0c     2C 13 06 F6 | 	mov	arg01, #300
19f10     C0 2B B0 FD | 	call	#__system___waitms
19f14     00 12 06 F6 | 	mov	arg01, #0
19f18     0B 00 00 FF 
19f1c     C0 E4 05 F1 | 	add	objptr, ##5824
19f20     BC 25 B0 FD | 	call	#_audio096_spin2_stop
19f24     0B 00 00 FF 
19f28     C0 E4 85 F1 | 	sub	objptr, ##5824
19f2c                 | LR__1986
19f2c                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
19f2c     7B 00 00 FF 
19f30     94 E4 05 F1 | 	add	objptr, ##63124
19f34     F2 20 02 FB | 	rdlong	local02, objptr
19f38     7B 00 00 FF 
19f3c     94 E4 85 F1 | 	sub	objptr, ##63124
19f40     10 21 E2 F8 | 	getbyte	local02, local02, #0
19f44     2B 20 0E F2 | 	cmp	local02, #43 wz
19f48     AC 00 90 5D |  if_ne	jmp	#LR__1989
19f4c     38 E4 05 F1 | 	add	objptr, #56
19f50     F2 24 E2 FA | 	rdword	local04, objptr
19f54     38 E4 85 F1 | 	sub	objptr, #56
19f58     12 23 32 F9 | 	getword	local03, local04, #0
19f5c     F0 22 16 F2 | 	cmp	local03, #240 wc
19f60     94 00 90 3D |  if_ae	jmp	#LR__1989
19f64     38 E4 05 F1 | 	add	objptr, #56
19f68     F2 20 E2 FA | 	rdword	local02, objptr
19f6c     10 23 52 F6 | 	abs	local03, local02 wc
19f70     11 23 42 F8 | 	getnib	local03, local03, #0
19f74     11 23 82 F6 | 	negc	local03, local03
19f78     11 25 52 F6 | 	abs	local04, local03 wc
19f7c     01 24 46 F0 | 	shr	local04, #1
19f80     12 25 82 F6 | 	negc	local04, local04
19f84     7B 00 00 FF 
19f88     68 E4 05 F1 | 	add	objptr, ##63080
19f8c     F2 24 62 FC | 	wrlong	local04, objptr
19f90     12 31 02 F6 | 	mov	local10, local04
19f94     7B 00 00 FF 
19f98     A0 E4 85 F1 | 	sub	objptr, ##63136
19f9c                 | LR__1987
19f9c     08 30 56 F2 | 	cmps	local10, #8 wc
19fa0     54 00 90 3D |  if_ae	jmp	#LR__1988
19fa4     57 00 00 FF 
19fa8     00 E4 05 F1 | 	add	objptr, ##44544
19fac     F2 12 02 FB | 	rdlong	arg01, objptr
19fb0     57 00 00 FF 
19fb4     00 E4 85 F1 | 	sub	objptr, ##44544
19fb8     65 01 00 FF 
19fbc     29 24 06 F6 | 	mov	local04, ##@LR__5037
19fc0     12 15 02 F6 | 	mov	arg02, local04
19fc4     74 28 B0 FD | 	call	#__system___string_concat
19fc8     57 00 00 FF 
19fcc     00 E4 05 F1 | 	add	objptr, ##44544
19fd0     F2 FA 61 FC | 	wrlong	result1, objptr
19fd4     57 00 00 FF 
19fd8     00 E4 85 F1 | 	sub	objptr, ##44544
19fdc     65 01 00 FF 
19fe0     2B 12 06 F6 | 	mov	arg01, ##@LR__5038
19fe4     BC 16 B0 FD | 	call	#_hg010b_spin2_write
19fe8     18 23 02 F6 | 	mov	local03, local10
19fec     01 22 06 F1 | 	add	local03, #1
19ff0     11 31 02 F6 | 	mov	local10, local03
19ff4     A4 FF 9F FD | 	jmp	#LR__1987
19ff8                 | LR__1988
19ff8                 | LR__1989
19ff8                 | '  
19ff8                 | '   'backspace
19ff8                 | '   if (key3 and 255) = 42 then 
19ff8     7B 00 00 FF 
19ffc     94 E4 05 F1 | 	add	objptr, ##63124
1a000     F2 20 02 FB | 	rdlong	local02, objptr
1a004     7B 00 00 FF 
1a008     94 E4 85 F1 | 	sub	objptr, ##63124
1a00c     10 21 E2 F8 | 	getbyte	local02, local02, #0
1a010     2A 20 0E F2 | 	cmp	local02, #42 wz
1a014     D4 00 90 5D |  if_ne	jmp	#LR__1994
1a018                 | '       if v.cursor_x>4 then 
1a018     38 E4 05 F1 | 	add	objptr, #56
1a01c     F2 20 E2 FA | 	rdword	local02, objptr
1a020     38 E4 85 F1 | 	sub	objptr, #56
1a024     05 20 16 F2 | 	cmp	local02, #5 wc
1a028     9C 00 90 CD |  if_b	jmp	#LR__1992
1a02c     57 00 00 FF 
1a030     00 E4 05 F1 | 	add	objptr, ##44544
1a034     F2 26 02 FB | 	rdlong	local05, objptr
1a038     57 00 00 FF 
1a03c     00 E4 85 F1 | 	sub	objptr, ##44544
1a040     13 13 02 F6 | 	mov	arg01, local05
1a044     09 33 02 F6 | 	mov	local11, arg01
1a048     97 06 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
1a04c                 | LR__1990
1a04c     19 FB C9 FA | 	rdbyte	result1, local11 wz
1a050     01 32 06 51 |  if_ne	add	local11, #1
1a054     F4 FF 9F 5D |  if_ne	jmp	#LR__1990
1a058                 | LR__1991
1a058     09 33 82 F1 | 	sub	local11, arg01
1a05c     19 15 02 F6 | 	mov	arg02, local11
1a060     01 14 86 F1 | 	sub	arg02, #1
1a064     13 13 02 F6 | 	mov	arg01, local05
1a068     B8 47 B0 FD | 	call	#__system__Left_S
1a06c     57 00 00 FF 
1a070     00 E4 05 F1 | 	add	objptr, ##44544
1a074     F2 FA 61 FC | 	wrlong	result1, objptr
1a078     56 00 00 FF 
1a07c     C8 E5 85 F1 | 	sub	objptr, ##44488
1a080     F2 12 E2 FA | 	rdword	arg01, objptr
1a084     02 12 86 F1 | 	sub	arg01, #2
1a088     02 E4 05 F1 | 	add	objptr, #2
1a08c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1a090     3A E4 85 F1 | 	sub	objptr, #58
1a094     7C 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a098     20 12 06 F6 | 	mov	arg01, #32
1a09c     E8 13 B0 FD | 	call	#_hg010b_spin2_putchar
1a0a0     38 E4 05 F1 | 	add	objptr, #56
1a0a4     F2 12 E2 FA | 	rdword	arg01, objptr
1a0a8     02 12 86 F1 | 	sub	arg01, #2
1a0ac     02 E4 05 F1 | 	add	objptr, #2
1a0b0     F2 24 C2 FA | 	rdbyte	local04, objptr
1a0b4     3A E4 85 F1 | 	sub	objptr, #58
1a0b8     12 23 E2 F8 | 	getbyte	local03, local04, #0
1a0bc     11 15 02 F6 | 	mov	arg02, local03
1a0c0     50 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a0c4     24 00 90 FD | 	jmp	#LR__1993
1a0c8                 | LR__1992
1a0c8     65 01 00 FF 
1a0cc     2D 20 06 F6 | 	mov	local02, ##@LR__5039
1a0d0     57 00 00 FF 
1a0d4     00 E4 05 F1 | 	add	objptr, ##44544
1a0d8     F2 20 62 FC | 	wrlong	local02, objptr
1a0dc     56 00 00 FF 
1a0e0     C8 E5 85 F1 | 	sub	objptr, ##44488
1a0e4     F2 08 58 FC | 	wrword	#4, objptr
1a0e8     38 E4 85 F1 | 	sub	objptr, #56
1a0ec                 | LR__1993
1a0ec                 | LR__1994
1a0ec                 | '    
1a0ec                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
1a0ec                 | '  
1a0ec                 | '   if key4=key_enter then 
1a0ec     7B 00 00 FF 
1a0f0     9C E4 05 F1 | 	add	objptr, ##63132
1a0f4     F2 28 02 FB | 	rdlong	local06, objptr
1a0f8     7B 00 00 FF 
1a0fc     9C E4 85 F1 | 	sub	objptr, ##63132
1a100     8D 28 0E F2 | 	cmp	local06, #141 wz
1a104     50 00 90 5D |  if_ne	jmp	#LR__1995
1a108     F8 16 B0 FD | 	call	#_hg010b_spin2_crlf
1a10c     0C 69 BE FD | 	call	#_interpret
1a110     65 01 00 FF 
1a114     2E 20 06 F6 | 	mov	local02, ##@LR__5040
1a118     57 00 00 FF 
1a11c     00 E4 05 F1 | 	add	objptr, ##44544
1a120     F2 20 62 FC | 	wrlong	local02, objptr
1a124     1A FA 61 FD | 	getct	result1
1a128     24 00 00 FF 
1a12c     A4 E4 05 F1 | 	add	objptr, ##18596
1a130     F2 24 02 FB | 	rdlong	local04, objptr
1a134     12 23 02 F6 | 	mov	local03, local04
1a138     11 FB 81 F1 | 	sub	result1, local03
1a13c     F2 FA 61 FC | 	wrlong	result1, objptr
1a140     14 E4 85 F1 | 	sub	objptr, #20
1a144     F2 00 68 FC | 	wrlong	#0, objptr
1a148     08 E4 05 F1 | 	add	objptr, #8
1a14c     F2 00 68 FC | 	wrlong	#0, objptr
1a150     7B 00 00 FF 
1a154     98 E4 85 F1 | 	sub	objptr, ##63128
1a158                 | LR__1995
1a158     7B 00 00 FF 
1a15c     94 E4 05 F1 | 	add	objptr, ##63124
1a160     F2 00 68 FC | 	wrlong	#0, objptr
1a164     7B 00 00 FF 
1a168     94 E4 85 F1 | 	sub	objptr, ##63124
1a16c     80 F6 9F FD | 	jmp	#LR__1970
1a170     A7 F0 03 F6 | 	mov	ptra, fp
1a174     B2 00 A0 FD | 	call	#popregs_
1a178                 | _program_ret
1a178     2D 00 64 FD | 	ret
1a17c                 | 
1a17c                 | ' '' this is not a main program.
1a17c                 | ' 
1a17c                 | ' '****************************************************************************************************************
1a17c                 | ' '                                                                                                             	*
1a17c                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
1a17c                 | ' '                                                                                                            	*
1a17c                 | ' ' mode - mode #, see below											*
1a17c                 | ' ' base - HDMI base pin												*
1a17c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1a17c                 | ' '														*
1a17c                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
1a17c                 | ' '' set bit #15 for custom timings														*
1a17c                 | ' '' p - 1 - psram, 0 - hub											*
1a17c                 | ' '' t - 1 - graphics, 0 - text											*
1a17c                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
1a17c                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
1a17c                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
1a17c                 | ' '														*
1a17c                 | ' '****************************************************************************************************************
1a17c                 | ' 
1a17c                 | ' pub start(base,mb):result |i
1a17c                 | _hg010b_spin2_start
1a17c                 | ' 
1a17c                 | ' '--------------------------- initialize pointers and variables
1a17c                 | ' 
1a17c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1a17c     30 E4 05 F1 | 	add	objptr, #48
1a180     F2 FA 01 F6 | 	mov	result1, objptr
1a184     28 E4 85 F1 | 	sub	objptr, #40
1a188     F2 FA 61 FC | 	wrlong	result1, objptr
1a18c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1a18c                 | ' hdmibase:=base							' HDMI base pin, 8*n
1a18c     18 E4 05 F1 | 	add	objptr, #24
1a190     F2 12 62 FC | 	wrlong	arg01, objptr
1a194                 | ' mailbox_ptr:=mb		
1a194     04 E4 05 F1 | 	add	objptr, #4
1a198     F2 14 62 FC | 	wrlong	arg02, objptr
1a19c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1a19c     C1 E5 05 F1 | 	add	objptr, #449
1a1a0     F2 14 62 FC | 	wrlong	arg02, objptr
1a1a4                 | ' sprite_ptr:=@spr1ptr
1a1a4     D8 E4 85 F1 | 	sub	objptr, #216
1a1a8     F2 FA 01 F6 | 	mov	result1, objptr
1a1ac     E5 E4 85 F1 | 	sub	objptr, #229
1a1b0     F2 FA 61 FC | 	wrlong	result1, objptr
1a1b4                 | ' 
1a1b4                 | ' 		'
1a1b4                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1a1b4     E5 E4 05 F1 | 	add	objptr, #229
1a1b8     F2 FA 01 FB | 	rdlong	result1, objptr
1a1bc     D0 FA 05 F1 | 	add	result1, #208
1a1c0     FD 10 58 FC | 	wrword	#8, result1
1a1c4                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1a1c4     F2 16 02 FB | 	rdlong	arg03, objptr
1a1c8     D2 16 06 F1 | 	add	arg03, #210
1a1cc     0B 21 58 FC | 	wrword	#16, arg03
1a1d0                 | ' leading_spaces:=0				'
1a1d0     A5 E5 05 F1 | 	add	objptr, #421
1a1d4     F2 00 68 FC | 	wrlong	#0, objptr
1a1d8                 | ' 
1a1d8                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1a1d8     99 E4 85 F1 | 	sub	objptr, #153
1a1dc     00 00 A0 FF 
1a1e0     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1a1e4                 | ' emptydl[1]:=0
1a1e4     04 E4 05 F1 | 	add	objptr, #4
1a1e8     F2 00 68 FC | 	wrlong	#0, objptr
1a1ec                 | ' 
1a1ec                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1a1ec                 | ' 
1a1ec                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1a1ec     28 E5 85 F1 | 	sub	objptr, #296
1a1f0     F2 02 68 FC | 	wrlong	#1, objptr
1a1f4                 | ' if s_debug<>0
1a1f4                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1a1f4     20 00 80 FF 
1a1f8     F2 00 68 FC | 	wrlong	##16384, objptr
1a1fc     F5 E4 85 F1 | 	sub	objptr, #245
1a200                 | ' setmode()							' set the mode, see below
1a200     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
1a204                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1a204     45 E4 05 F1 | 	add	objptr, #69
1a208     F2 FA 01 F6 | 	mov	result1, objptr
1a20c     35 E4 85 F1 | 	sub	objptr, #53
1a210     F2 FA 61 FC | 	wrlong	result1, objptr
1a214                 | ' cursor_ptr:=@cursor_x						
1a214     28 E4 05 F1 | 	add	objptr, #40
1a218     F2 16 02 F6 | 	mov	arg03, objptr
1a21c     2C E4 85 F1 | 	sub	objptr, #44
1a220     F2 16 62 FC | 	wrlong	arg03, objptr
1a224                 | ' fontnum:=0  							' start with a PC type font 
1a224     55 E4 05 F1 | 	add	objptr, #85
1a228     F2 00 68 FC | 	wrlong	#0, objptr
1a22c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1a22c     1C E4 05 F1 | 	add	objptr, #28
1a230     F2 12 02 F6 | 	mov	arg01, objptr
1a234     7D E4 85 F1 | 	sub	objptr, #125
1a238     10 00 00 FF 
1a23c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1a240     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1a244     10 00 00 FF 
1a248     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1a24c     10 16 06 F6 | 	mov	arg03, #16
1a250     AC 24 B0 FD | 	call	#__system____builtin_memmove
1a254                 | ' leading_spaces:=0
1a254     01 00 00 FF 
1a258     B2 E4 05 F1 | 	add	objptr, ##690
1a25c     F2 00 68 FC | 	wrlong	#0, objptr
1a260     01 00 00 FF 
1a264     B2 E4 85 F1 | 	sub	objptr, ##690
1a268                 | ' '---------------------------- initialize a cursor (MSDOS type)
1a268                 | ' 
1a268                 | ' initcursor(154)
1a268     9A 12 06 F6 | 	mov	arg01, #154
1a26c     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1a270                 | ' 
1a270                 | ' '---------------------------- start the cog
1a270                 | ' 
1a270                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1a270     10 00 00 FF 
1a274     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1a278     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1a27c     10 00 00 FF 
1a280     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1a284     10 E4 05 F1 | 	add	objptr, #16
1a288     10 FA 05 F6 | 	mov	result1, #16
1a28c     28 E4 61 FD | 	setq	objptr
1a290     0A FB F1 FC | 	coginit	result1, arg02 wc
1a294     01 FA 65 C6 |  if_b	neg	result1, #1
1a298     1C E4 05 F1 | 	add	objptr, #28
1a29c     F2 FA 61 FC | 	wrlong	result1, objptr
1a2a0     2C E4 85 F1 | 	sub	objptr, #44
1a2a4                 | ' waitms(40)							' wait for stabilize
1a2a4     28 12 06 F6 | 	mov	arg01, #40
1a2a8     28 28 B0 FD | 	call	#__system___waitms
1a2ac                 | ' return cog							' return the driver's cog #
1a2ac     2C E4 05 F1 | 	add	objptr, #44
1a2b0     F2 FA 01 FB | 	rdlong	result1, objptr
1a2b4     2C E4 85 F1 | 	sub	objptr, #44
1a2b8                 | _hg010b_spin2_start_ret
1a2b8     2D 00 64 FD | 	ret
1a2bc                 | 
1a2bc                 | ' 
1a2bc                 | ' 
1a2bc                 | ' '**************************************************************************************************************** 
1a2bc                 | ' '                                                                                                             	*
1a2bc                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1a2bc                 | ' '  Mode number - see start() above or bits below								*
1a2bc                 | ' '                                                                                                             	*
1a2bc                 | ' '****************************************************************************************************************
1a2bc                 | ' 
1a2bc                 | ' '---------------------------- initialize a cursor (MSDOS type)
1a2bc                 | ' pub initcursor(color) |i
1a2bc                 | _hg010b_spin2_initcursor
1a2bc     03 4A 05 F6 | 	mov	COUNT_, #3
1a2c0     A8 00 A0 FD | 	call	#pushregs_
1a2c4     09 1F 02 F6 | 	mov	local01, arg01
1a2c8                 | ' 
1a2c8                 | ' cursor_x:=0							' place the cursor at 0:0
1a2c8     38 E4 05 F1 | 	add	objptr, #56
1a2cc     F2 00 58 FC | 	wrword	#0, objptr
1a2d0                 | ' cursor_y:=0
1a2d0     02 E4 05 F1 | 	add	objptr, #2
1a2d4     F2 00 48 FC | 	wrbyte	#0, objptr
1a2d8                 | ' repeat i from 0 to 111
1a2d8     00 20 06 F6 | 	mov	local02, #0
1a2dc     F8 E5 05 F1 | 	add	objptr, #504
1a2e0     97 1A 48 FB | 	callpa	#(@LR__2002-@LR__2000)>>2,fcache_load_ptr_
1a2e4                 | LR__2000
1a2e4                 | '   cursor[i]:=0
1a2e4     10 23 02 F6 | 	mov	local03, local02
1a2e8     F2 22 02 F1 | 	add	local03, objptr
1a2ec     11 01 48 FC | 	wrbyte	#0, local03
1a2f0     01 20 06 F1 | 	add	local02, #1
1a2f4     70 20 56 F2 | 	cmps	local02, #112 wc
1a2f8     E8 FF 9F CD |  if_b	jmp	#LR__2000
1a2fc                 | ' repeat i from 112 to 127
1a2fc     70 20 06 F6 | 	mov	local02, #112
1a300                 | LR__2001
1a300                 | '   cursor[i]:=color  
1a300     10 23 02 F6 | 	mov	local03, local02
1a304     F2 22 02 F1 | 	add	local03, objptr
1a308     11 1F 42 FC | 	wrbyte	local01, local03
1a30c     01 20 06 F1 | 	add	local02, #1
1a310     80 20 16 F2 | 	cmp	local02, #128 wc
1a314     E8 FF 9F CD |  if_b	jmp	#LR__2001
1a318                 | LR__2002
1a318                 | ' 'repeat i from 0 to 127
1a318                 | ' '  if ((i/8)//2)
1a318                 | ' '    cursor[i]:=15
1a318                 | ' '  else
1a318                 | ' '    cursor[i]:=0
1a318                 | ' '  if i>=120    
1a318                 | ' '    cursor[i]:=40
1a318                 | ' setspriteptr(17,@cursor)
1a318     F2 14 02 F6 | 	mov	arg02, objptr
1a31c     01 00 00 FF 
1a320     32 E4 85 F1 | 	sub	objptr, ##562
1a324     11 12 06 F6 | 	mov	arg01, #17
1a328     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1a32c                 | ' setspritesize(17,8,16)
1a32c     11 12 06 F6 | 	mov	arg01, #17
1a330     08 14 06 F6 | 	mov	arg02, #8
1a334     10 16 06 F6 | 	mov	arg03, #16
1a338     C8 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
1a33c                 | ' setspritepos(17,0,0)
1a33c     11 12 06 F6 | 	mov	arg01, #17
1a340     00 14 06 F6 | 	mov	arg02, #0
1a344     00 16 06 F6 | 	mov	arg03, #0
1a348     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
1a34c     A7 F0 03 F6 | 	mov	ptra, fp
1a350     B2 00 A0 FD | 	call	#popregs_
1a354                 | _hg010b_spin2_initcursor_ret
1a354     2D 00 64 FD | 	ret
1a358                 | 
1a358                 | ' 
1a358                 | '  
1a358                 | ' pub setcursorcolor(color) |i
1a358                 | _hg010b_spin2_setcursorcolor
1a358                 | ' 
1a358                 | ' 
1a358                 | ' repeat i from 0 to 111
1a358     00 00 06 F6 | 	mov	_var01, #0
1a35c     01 00 00 FF 
1a360     32 E4 05 F1 | 	add	objptr, ##562
1a364     97 1A 48 FB | 	callpa	#(@LR__2012-@LR__2010)>>2,fcache_load_ptr_
1a368                 | LR__2010
1a368                 | '   cursor[i]:=0
1a368     00 03 02 F6 | 	mov	_var02, _var01
1a36c     F2 02 02 F1 | 	add	_var02, objptr
1a370     01 01 48 FC | 	wrbyte	#0, _var02
1a374     01 00 06 F1 | 	add	_var01, #1
1a378     70 00 56 F2 | 	cmps	_var01, #112 wc
1a37c     E8 FF 9F CD |  if_b	jmp	#LR__2010
1a380                 | ' repeat i from 112 to 127
1a380     70 00 06 F6 | 	mov	_var01, #112
1a384                 | LR__2011
1a384                 | '   cursor[i]:=color  
1a384     00 03 02 F6 | 	mov	_var02, _var01
1a388     F2 02 02 F1 | 	add	_var02, objptr
1a38c     01 13 42 FC | 	wrbyte	arg01, _var02
1a390     01 00 06 F1 | 	add	_var01, #1
1a394     80 00 16 F2 | 	cmp	_var01, #128 wc
1a398     E8 FF 9F CD |  if_b	jmp	#LR__2011
1a39c                 | LR__2012
1a39c     01 00 00 FF 
1a3a0     32 E4 85 F1 | 	sub	objptr, ##562
1a3a4                 | _hg010b_spin2_setcursorcolor_ret
1a3a4     2D 00 64 FD | 	ret
1a3a8                 | 
1a3a8                 | '  
1a3a8                 | ' 
1a3a8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1a3a8                 | _hg010b_spin2_setmode
1a3a8     02 4A 05 F6 | 	mov	COUNT_, #2
1a3ac     A8 00 A0 FD | 	call	#pushregs_
1a3b0                 | ' 
1a3b0                 | ' 
1a3b0                 | ' dl_ptr:=@emptydl[0]
1a3b0     01 00 00 FF 
1a3b4     19 E4 05 F1 | 	add	objptr, ##537
1a3b8     F2 66 02 F6 | 	mov	muldivb_, objptr
1a3bc     FD E5 85 F1 | 	sub	objptr, #509
1a3c0     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a3c4                 | ' 
1a3c4                 | ' if cog>0 
1a3c4     10 E4 05 F1 | 	add	objptr, #16
1a3c8     F2 66 02 FB | 	rdlong	muldivb_, objptr
1a3cc     2C E4 85 F1 | 	sub	objptr, #44
1a3d0     01 66 56 F2 | 	cmps	muldivb_, #1 wc
1a3d4                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1a3d4     01 12 06 36 |  if_ae	mov	arg01, #1
1a3d8     9C 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1a3dc                 | ' xres:=1024
1a3dc     01 00 00 FF 
1a3e0     22 E4 05 F1 | 	add	objptr, ##546
1a3e4     02 00 80 FF 
1a3e8     F2 00 68 FC | 	wrlong	##1024, objptr
1a3ec                 | ' yres:=576  
1a3ec     04 E4 05 F1 | 	add	objptr, #4
1a3f0     01 00 80 FF 
1a3f4     F2 80 68 FC | 	wrlong	##576, objptr
1a3f8                 | ' ppl:=(timings[3])
1a3f8     10 00 00 FF 
1a3fc     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1a400     F7 66 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
1a404     51 E5 85 F1 | 	sub	objptr, #337
1a408     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a40c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1a40c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1a410     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1a414     01 1E 66 F0 | 	shl	local01, #1
1a418     80 E4 85 F1 | 	sub	objptr, #128
1a41c     F2 1E 62 FC | 	wrlong	local01, objptr
1a420                 | ' cpl1:=cpl '' todo remove
1a420     04 E4 05 F1 | 	add	objptr, #4
1a424     F2 1E 62 FC | 	wrlong	local01, objptr
1a428                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1a428     02 00 00 FF 
1a42c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1a430     41 E4 85 F1 | 	sub	objptr, #65
1a434     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1a438                 | ' repeat i from 0 to 3
1a438     00 20 06 F6 | 	mov	local02, #0
1a43c     02 00 00 FF 
1a440     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1a444     08 E4 05 F1 | 	add	objptr, #8
1a448     97 20 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
1a44c                 | LR__2020
1a44c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1a44c     10 1F 02 F6 | 	mov	local01, local02
1a450     02 1E 66 F0 | 	shl	local01, #2
1a454     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1a458     F2 66 02 FB | 	rdlong	muldivb_, objptr
1a45c     11 66 66 F0 | 	shl	muldivb_, #17
1a460     0F 1F 02 FB | 	rdlong	local01, local01
1a464     33 1F 02 F1 | 	add	local01, muldivb_
1a468     80 40 38 FF 
1a46c     00 1E 06 F1 | 	add	local01, ##1887502336
1a470     10 67 02 F6 | 	mov	muldivb_, local02
1a474     02 66 66 F0 | 	shl	muldivb_, #2
1a478     F7 66 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
1a47c     33 1F 62 FC | 	wrlong	local01, muldivb_
1a480     01 20 06 F1 | 	add	local02, #1
1a484     04 20 56 F2 | 	cmps	local02, #4 wc
1a488     C0 FF 9F CD |  if_b	jmp	#LR__2020
1a48c                 | LR__2021
1a48c     20 E4 85 F1 | 	sub	objptr, #32
1a490                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1a490     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1a494     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1a498     14 1E 66 FC | 	wrlong	local01, #20
1a49c                 | ' hubset(timings[10])
1a49c     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1a4a0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1a4a4     10 00 00 FF 
1a4a8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1a4ac     00 12 62 FD | 	hubset	arg01
1a4b0                 | ' waitms(1)                                                   	' wait for stabilization
1a4b0     01 12 06 F6 | 	mov	arg01, #1
1a4b4     1C 26 B0 FD | 	call	#__system___waitms
1a4b8     10 00 00 FF 
1a4bc     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1a4c0     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1a4c4     5D E4 05 F1 | 	add	objptr, #93
1a4c8     F2 20 62 FC | 	wrlong	local02, objptr
1a4cc     10 1F 52 F6 | 	abs	local01, local02 wc
1a4d0     04 1E 46 F0 | 	shr	local01, #4
1a4d4     0F 1F 82 F6 | 	negc	local01, local01
1a4d8     9C E4 05 F1 | 	add	objptr, #156
1a4dc     F2 1E 62 FC | 	wrlong	local01, objptr
1a4e0     A4 E4 85 F1 | 	sub	objptr, #164
1a4e4     F2 20 02 FB | 	rdlong	local02, objptr
1a4e8     08 E4 05 F1 | 	add	objptr, #8
1a4ec     F2 1E 02 FB | 	rdlong	local01, objptr
1a4f0     0F 21 02 FD | 	qmul	local02, local01
1a4f4                 | ' lines:=timings[11]
1a4f4                 | ' t_lines:=lines/16
1a4f4                 | ' buflen:=cpl*lines						' framebuffer length in longs
1a4f4     29 E4 85 F1 | 	sub	objptr, #41
1a4f8                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1a4f8     19 1E C6 F9 | 	decod	local01, #25
1a4fc                 | ' mode_ptr:=@timings						' set pointers to timings
1a4fc     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
1a500                 | ' graphmode:=1024+512+192+48							' det global variable
1a500                 | ' makedl(graphmode)							' make a DL for the mode
1a500     03 00 00 FF 
1a504     F0 12 06 F6 | 	mov	arg01, ##1776
1a508     18 20 62 FD | 	getqx	local02
1a50c     F2 20 62 FC | 	wrlong	local02, objptr
1a510     34 E4 85 F1 | 	sub	objptr, #52
1a514     02 20 66 F0 | 	shl	local02, #2
1a518     10 1F 82 F1 | 	sub	local01, local02
1a51c     F2 1E 62 FC | 	wrlong	local01, objptr
1a520     14 E4 05 F1 | 	add	objptr, #20
1a524     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1a528     79 E4 05 F1 | 	add	objptr, #121
1a52c     03 00 80 FF 
1a530     F2 E0 69 FC | 	wrlong	##1776, objptr
1a534     8D E4 85 F1 | 	sub	objptr, #141
1a538     10 00 00 FF 
1a53c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1a540     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
1a544                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1a544     F2 1E 02 FB | 	rdlong	local01, objptr
1a548     D9 E4 05 F1 | 	add	objptr, #217
1a54c     F2 1E 62 FC | 	wrlong	local01, objptr
1a550                 | ' s_font_ptr:=font_ptr
1a550     D5 E4 85 F1 | 	sub	objptr, #213
1a554     F2 1E 02 FB | 	rdlong	local01, objptr
1a558     D9 E4 05 F1 | 	add	objptr, #217
1a55c     F2 1E 62 FC | 	wrlong	local01, objptr
1a560                 | ' s_lines:=lines
1a560     80 E4 85 F1 | 	sub	objptr, #128
1a564     F2 1E 02 FB | 	rdlong	local01, objptr
1a568     84 E4 05 F1 | 	add	objptr, #132
1a56c     F2 1E 62 FC | 	wrlong	local01, objptr
1a570                 | ' s_buflen:=buflen
1a570     AD E4 85 F1 | 	sub	objptr, #173
1a574     F2 1E 02 FB | 	rdlong	local01, objptr
1a578     B5 E4 05 F1 | 	add	objptr, #181
1a57c     F2 1E 62 FC | 	wrlong	local01, objptr
1a580                 | ' s_cpl:=cpl
1a580     94 E4 85 F1 | 	sub	objptr, #148
1a584     F2 1E 02 FB | 	rdlong	local01, objptr
1a588     90 E4 05 F1 | 	add	objptr, #144
1a58c     F2 1E 62 FC | 	wrlong	local01, objptr
1a590                 | ' s_cpl1:=cpl
1a590     90 E4 85 F1 | 	sub	objptr, #144
1a594     F2 1E 02 FB | 	rdlong	local01, objptr
1a598     98 E4 05 F1 | 	add	objptr, #152
1a59c     F2 1E 62 FC | 	wrlong	local01, objptr
1a5a0                 | ' st_lines:=t_lines
1a5a0     0C E4 05 F1 | 	add	objptr, #12
1a5a4     F2 1E 02 FB | 	rdlong	local01, objptr
1a5a8     04 E4 05 F1 | 	add	objptr, #4
1a5ac     F2 1E 62 FC | 	wrlong	local01, objptr
1a5b0                 | ' ppl:=ppl/xzoom  
1a5b0     28 E4 85 F1 | 	sub	objptr, #40
1a5b4     F2 64 02 FB | 	rdlong	muldiva_, objptr
1a5b8     2C E4 05 F1 | 	add	objptr, #44
1a5bc     F2 66 02 FB | 	rdlong	muldivb_, objptr
1a5c0     01 E5 85 F1 | 	sub	objptr, #257
1a5c4     BA 00 A0 FD | 	call	#divide_
1a5c8     D5 E4 05 F1 | 	add	objptr, #213
1a5cc     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a5d0                 | ' s_ppl:=ppl
1a5d0     1C E4 05 F1 | 	add	objptr, #28
1a5d4     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a5d8     F1 E4 85 F1 | 	sub	objptr, #241
1a5dc                 | ' waitms(20)							' wait 
1a5dc     14 12 06 F6 | 	mov	arg01, #20
1a5e0     F0 24 B0 FD | 	call	#__system___waitms
1a5e4     A7 F0 03 F6 | 	mov	ptra, fp
1a5e8     B2 00 A0 FD | 	call	#popregs_
1a5ec                 | _hg010b_spin2_setmode_ret
1a5ec     2D 00 64 FD | 	ret
1a5f0                 | 
1a5f0                 | ' 
1a5f0                 | ' 
1a5f0                 | ' '****************************************************************************************************************
1a5f0                 | ' '                                                                                                             	*
1a5f0                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1a5f0                 | ' '                                                                                                             	*
1a5f0                 | ' '****************************************************************************************************************
1a5f0                 | ' 
1a5f0                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1a5f0                 | _hg010b_spin2_makedl
1a5f0                 | ' 
1a5f0                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1a5f0                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1a5f0                 | ' repeat i from 0 to 11                                                           ' clear DL
1a5f0     00 00 06 F6 | 	mov	_var01, #0
1a5f4     E9 E5 05 F1 | 	add	objptr, #489
1a5f8     97 0E 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
1a5fc                 | LR__2030
1a5fc                 | '   displaylist[i]:=0 
1a5fc     00 03 02 F6 | 	mov	_var02, _var01
1a600     02 02 66 F0 | 	shl	_var02, #2
1a604     F2 02 02 F1 | 	add	_var02, objptr
1a608     01 01 68 FC | 	wrlong	#0, _var02
1a60c     01 00 06 F1 | 	add	_var01, #1
1a610     0C 00 56 F2 | 	cmps	_var01, #12 wc
1a614     E4 FF 9F CD |  if_b	jmp	#LR__2030
1a618                 | LR__2031
1a618                 | '                         ' 
1a618                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1a618     8C E5 85 F1 | 	sub	objptr, #396
1a61c     F2 02 02 FB | 	rdlong	_var02, objptr
1a620     14 02 66 F0 | 	shl	_var02, #20
1a624     01 02 06 F1 | 	add	_var02, #1
1a628     04 E4 85 F1 | 	sub	objptr, #4
1a62c     F2 00 02 FB | 	rdlong	_var01, objptr
1a630     02 00 66 F0 | 	shl	_var01, #2
1a634     04 00 66 F0 | 	shl	_var01, #4
1a638     00 03 02 F1 | 	add	_var02, _var01
1a63c     90 E5 05 F1 | 	add	objptr, #400
1a640     F2 02 62 FC | 	wrlong	_var02, objptr
1a644     E9 E5 85 F1 | 	sub	objptr, #489
1a648                 | ' displaylist[1]:=buf_ptr<<4+%10  
1a648     F2 02 02 FB | 	rdlong	_var02, objptr
1a64c     04 02 66 F0 | 	shl	_var02, #4
1a650     02 02 06 F1 | 	add	_var02, #2
1a654     ED E5 05 F1 | 	add	objptr, #493
1a658     F2 02 62 FC | 	wrlong	_var02, objptr
1a65c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1a65c     04 E4 85 F1 | 	sub	objptr, #4
1a660     F2 02 02 F6 | 	mov	_var02, objptr
1a664     CD E5 85 F1 | 	sub	objptr, #461
1a668     F2 02 62 FC | 	wrlong	_var02, objptr
1a66c     1C E4 85 F1 | 	sub	objptr, #28
1a670                 | _hg010b_spin2_makedl_ret
1a670     2D 00 64 FD | 	ret
1a674                 | 
1a674                 | ' 
1a674                 | ' 
1a674                 | ' '****************************************************************************************************************
1a674                 | ' '                                                                        					*
1a674                 | ' '  Graphic primitives                                                    					*
1a674                 | ' '                                                                        					*
1a674                 | ' '****************************************************************************************************************
1a674                 | ' 
1a674                 | ' pub setspriteptr(num,ptr)
1a674                 | _hg010b_spin2_setspriteptr
1a674                 | ' long[@spr1ptr+12*num]:=ptr
1a674     0D E5 05 F1 | 	add	objptr, #269
1a678     F2 00 02 F6 | 	mov	_var01, objptr
1a67c     09 03 02 F6 | 	mov	_var02, arg01
1a680     01 02 66 F0 | 	shl	_var02, #1
1a684     09 03 02 F1 | 	add	_var02, arg01
1a688     02 02 66 F0 | 	shl	_var02, #2
1a68c     01 01 02 F1 | 	add	_var01, _var02
1a690     00 15 62 FC | 	wrlong	arg02, _var01
1a694     0D E5 85 F1 | 	sub	objptr, #269
1a698                 | _hg010b_spin2_setspriteptr_ret
1a698     2D 00 64 FD | 	ret
1a69c                 | 
1a69c                 | ' 
1a69c                 | ' pub setspritepos(num,x,y)
1a69c                 | _hg010b_spin2_setspritepos
1a69c                 | ' if y>601
1a69c     01 00 00 FF 
1a6a0     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1a6a4                 | '   y:=601
1a6a4     01 00 00 3F 
1a6a8     59 16 06 36 |  if_ae	mov	arg03, ##601
1a6ac                 | ' if x>1024
1a6ac     02 00 00 FF 
1a6b0     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1a6b4                 | '   x:=1024
1a6b4     0A 14 C6 39 |  if_ae	decod	arg02, #10
1a6b8                 | ' word[@spr1ptr+12*num+4]:=x
1a6b8     0D E5 05 F1 | 	add	objptr, #269
1a6bc     F2 00 02 F6 | 	mov	_var01, objptr
1a6c0     09 03 02 F6 | 	mov	_var02, arg01
1a6c4     01 02 66 F0 | 	shl	_var02, #1
1a6c8     09 03 02 F1 | 	add	_var02, arg01
1a6cc     02 02 66 F0 | 	shl	_var02, #2
1a6d0     01 01 02 F1 | 	add	_var01, _var02
1a6d4     04 00 06 F1 | 	add	_var01, #4
1a6d8     00 15 52 FC | 	wrword	arg02, _var01
1a6dc                 | ' word[@spr1ptr+12*num+6]:=y
1a6dc     F2 00 02 F6 | 	mov	_var01, objptr
1a6e0     09 03 02 F6 | 	mov	_var02, arg01
1a6e4     01 02 66 F0 | 	shl	_var02, #1
1a6e8     09 03 02 F1 | 	add	_var02, arg01
1a6ec     02 02 66 F0 | 	shl	_var02, #2
1a6f0     01 01 02 F1 | 	add	_var01, _var02
1a6f4     06 00 06 F1 | 	add	_var01, #6
1a6f8     00 17 52 FC | 	wrword	arg03, _var01
1a6fc     0D E5 85 F1 | 	sub	objptr, #269
1a700                 | _hg010b_spin2_setspritepos_ret
1a700     2D 00 64 FD | 	ret
1a704                 | 
1a704                 | ' 
1a704                 | ' pub setspritesize(num,w,h)
1a704                 | _hg010b_spin2_setspritesize
1a704                 | ' word[@spr1ptr+12*num+8]:=w
1a704     0D E5 05 F1 | 	add	objptr, #269
1a708     F2 00 02 F6 | 	mov	_var01, objptr
1a70c     09 03 02 F6 | 	mov	_var02, arg01
1a710     01 02 66 F0 | 	shl	_var02, #1
1a714     09 03 02 F1 | 	add	_var02, arg01
1a718     02 02 66 F0 | 	shl	_var02, #2
1a71c     01 01 02 F1 | 	add	_var01, _var02
1a720     08 00 06 F1 | 	add	_var01, #8
1a724     00 15 52 FC | 	wrword	arg02, _var01
1a728                 | ' word[@spr1ptr+12*num+10]:=h
1a728     F2 00 02 F6 | 	mov	_var01, objptr
1a72c     09 03 02 F6 | 	mov	_var02, arg01
1a730     01 02 66 F0 | 	shl	_var02, #1
1a734     09 03 02 F1 | 	add	_var02, arg01
1a738     02 02 66 F0 | 	shl	_var02, #2
1a73c     01 01 02 F1 | 	add	_var01, _var02
1a740     0A 00 06 F1 | 	add	_var01, #10
1a744     00 17 52 FC | 	wrword	arg03, _var01
1a748     0D E5 85 F1 | 	sub	objptr, #269
1a74c                 | _hg010b_spin2_setspritesize_ret
1a74c     2D 00 64 FD | 	ret
1a750                 | 
1a750                 | ' 
1a750                 | ' 
1a750                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1a750                 | ' 
1a750                 | ' 
1a750                 | ' pub putpixel(x,y,c)
1a750                 | _hg010b_spin2_putpixel
1a750     04 4A 05 F6 | 	mov	COUNT_, #4
1a754     A8 00 A0 FD | 	call	#pushregs_
1a758     09 1F 02 F6 | 	mov	local01, arg01
1a75c                 | ' 
1a75c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1a75c     00 20 06 F6 | 	mov	local02, #0
1a760     00 1E 56 F2 | 	cmps	local01, #0 wc
1a764     01 20 66 36 |  if_ae	neg	local02, #1
1a768     E5 E4 05 F1 | 	add	objptr, #229
1a76c     F2 1A 02 FB | 	rdlong	arg05, objptr
1a770     02 1A 66 F0 | 	shl	arg05, #2
1a774     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1a778     11 23 A2 F1 | 	subx	local03, local03
1a77c     11 21 02 F5 | 	and	local02, local03
1a780     00 22 06 F6 | 	mov	local03, #0
1a784     00 14 56 F2 | 	cmps	arg02, #0 wc
1a788     01 22 66 36 |  if_ae	neg	local03, #1
1a78c     11 21 02 F5 | 	and	local02, local03
1a790     04 E4 85 F1 | 	sub	objptr, #4
1a794     F2 22 02 FB | 	rdlong	local03, objptr
1a798     E1 E4 85 F1 | 	sub	objptr, #225
1a79c     11 15 52 F2 | 	cmps	arg02, local03 wc
1a7a0     12 25 A2 F1 | 	subx	local04, local04
1a7a4     12 21 CA F7 | 	test	local02, local04 wz
1a7a8     48 00 90 AD |  if_e	jmp	#LR__2040
1a7ac     D9 E4 05 F1 | 	add	objptr, #217
1a7b0     F2 12 02 FB | 	rdlong	arg01, objptr
1a7b4     14 E4 05 F1 | 	add	objptr, #20
1a7b8     F2 24 02 FB | 	rdlong	local04, objptr
1a7bc     02 24 66 F0 | 	shl	local04, #2
1a7c0     0A 25 02 FD | 	qmul	local04, arg02
1a7c4                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1a7c4     0B 15 02 F6 | 	mov	arg02, arg03
1a7c8     01 16 06 F6 | 	mov	arg03, #1
1a7cc     00 18 06 F6 | 	mov	arg04, #0
1a7d0     01 1A 06 F6 | 	mov	arg05, #1
1a7d4     0A 00 00 FF 
1a7d8     D3 E5 05 F1 | 	add	objptr, ##5587
1a7dc     18 24 62 FD | 	getqx	local04
1a7e0     0F 25 02 F1 | 	add	local04, local01
1a7e4     12 13 02 F1 | 	add	arg01, local04
1a7e8     28 15 B0 FD | 	call	#_psram_spin2_fill
1a7ec     0B 00 00 FF 
1a7f0     C0 E4 85 F1 | 	sub	objptr, ##5824
1a7f4                 | LR__2040
1a7f4     A7 F0 03 F6 | 	mov	ptra, fp
1a7f8     B2 00 A0 FD | 	call	#popregs_
1a7fc                 | _hg010b_spin2_putpixel_ret
1a7fc     2D 00 64 FD | 	ret
1a800                 | 
1a800                 | ' 
1a800                 | ' pub putpixel2(x,y,c)
1a800                 | _hg010b_spin2_putpixel2
1a800     02 4A 05 F6 | 	mov	COUNT_, #2
1a804     A8 00 A0 FD | 	call	#pushregs_
1a808     D9 E4 05 F1 | 	add	objptr, #217
1a80c     F2 1E 02 FB | 	rdlong	local01, objptr
1a810     14 E4 05 F1 | 	add	objptr, #20
1a814     F2 1A 02 FB | 	rdlong	arg05, objptr
1a818     02 1A 66 F0 | 	shl	arg05, #2
1a81c     0A 1B 02 FD | 	qmul	arg05, arg02
1a820                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1a820     0B 15 02 F6 | 	mov	arg02, arg03
1a824     01 16 06 F6 | 	mov	arg03, #1
1a828     00 18 06 F6 | 	mov	arg04, #0
1a82c     01 1A 06 F6 | 	mov	arg05, #1
1a830     0A 00 00 FF 
1a834     D3 E5 05 F1 | 	add	objptr, ##5587
1a838     18 20 62 FD | 	getqx	local02
1a83c     09 21 02 F1 | 	add	local02, arg01
1a840     10 1F 02 F1 | 	add	local01, local02
1a844     0F 13 02 F6 | 	mov	arg01, local01
1a848     C8 14 B0 FD | 	call	#_psram_spin2_fill
1a84c     0B 00 00 FF 
1a850     C0 E4 85 F1 | 	sub	objptr, ##5824
1a854     A7 F0 03 F6 | 	mov	ptra, fp
1a858     B2 00 A0 FD | 	call	#popregs_
1a85c                 | _hg010b_spin2_putpixel2_ret
1a85c     2D 00 64 FD | 	ret
1a860                 | 
1a860                 | ' 
1a860                 | ' pub getpixel2(x,y): c 
1a860                 | _hg010b_spin2_getpixel2
1a860     02 4A 05 F6 | 	mov	COUNT_, #2
1a864     A8 00 A0 FD | 	call	#pushregs_
1a868     0C F0 07 F1 | 	add	ptra, #12
1a86c     04 4E 05 F1 | 	add	fp, #4
1a870     A7 12 62 FC | 	wrlong	arg01, fp
1a874     04 4E 05 F1 | 	add	fp, #4
1a878     A7 14 62 FC | 	wrlong	arg02, fp
1a87c     08 4E 85 F1 | 	sub	fp, #8
1a880     A7 00 68 FC | 	wrlong	#0, fp
1a884     A7 12 02 F6 | 	mov	arg01, fp
1a888     D9 E4 05 F1 | 	add	objptr, #217
1a88c     F2 14 02 FB | 	rdlong	arg02, objptr
1a890     14 E4 05 F1 | 	add	objptr, #20
1a894     F2 16 02 FB | 	rdlong	arg03, objptr
1a898     02 16 66 F0 | 	shl	arg03, #2
1a89c     08 4E 05 F1 | 	add	fp, #8
1a8a0     A7 FA 01 FB | 	rdlong	result1, fp
1a8a4     FD 16 02 FD | 	qmul	arg03, result1
1a8a8                 | ' 
1a8a8                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1a8a8     04 4E 85 F1 | 	sub	fp, #4
1a8ac     A7 1E 02 FB | 	rdlong	local01, fp
1a8b0     04 4E 85 F1 | 	sub	fp, #4
1a8b4     01 16 06 F6 | 	mov	arg03, #1
1a8b8     0A 00 00 FF 
1a8bc     D3 E5 05 F1 | 	add	objptr, ##5587
1a8c0     18 20 62 FD | 	getqx	local02
1a8c4     0F 21 02 F1 | 	add	local02, local01
1a8c8     10 15 02 F1 | 	add	arg02, local02
1a8cc     0C 13 B0 FD | 	call	#_psram_spin2_read1
1a8d0     0B 00 00 FF 
1a8d4     C0 E4 85 F1 | 	sub	objptr, ##5824
1a8d8                 | ' return c
1a8d8     A7 FA 01 FB | 	rdlong	result1, fp
1a8dc     A7 F0 03 F6 | 	mov	ptra, fp
1a8e0     B2 00 A0 FD | 	call	#popregs_
1a8e4                 | _hg010b_spin2_getpixel2_ret
1a8e4     2D 00 64 FD | 	ret
1a8e8                 | 
1a8e8                 | '   
1a8e8                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1a8e8                 | ' 
1a8e8                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1a8e8                 | _hg010b_spin2_fastline
1a8e8     02 4A 05 F6 | 	mov	COUNT_, #2
1a8ec     A8 00 A0 FD | 	call	#pushregs_
1a8f0     09 1F 02 F6 | 	mov	local01, arg01
1a8f4     0A 21 02 F6 | 	mov	local02, arg02
1a8f8                 | ' 
1a8f8                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1a8f8     00 16 56 F2 | 	cmps	arg03, #0 wc
1a8fc     F4 00 90 CD |  if_b	jmp	#LR__2050
1a900     01 00 00 FF 
1a904     26 E4 05 F1 | 	add	objptr, ##550
1a908     F2 1A 02 FB | 	rdlong	arg05, objptr
1a90c     01 00 00 FF 
1a910     26 E4 85 F1 | 	sub	objptr, ##550
1a914     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1a918     D8 00 90 3D |  if_ae	jmp	#LR__2050
1a91c     00 1E 56 F2 | 	cmps	local01, #0 wc
1a920     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1a924     CC 00 90 CD |  if_b	jmp	#LR__2050
1a928     01 00 00 FF 
1a92c     22 E4 05 F1 | 	add	objptr, ##546
1a930     F2 1A 02 FB | 	rdlong	arg05, objptr
1a934     01 00 00 FF 
1a938     22 E4 85 F1 | 	sub	objptr, ##546
1a93c     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1a940     01 00 00 1F 
1a944     22 E4 05 11 |  if_a	add	objptr, ##546
1a948     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1a94c     01 00 00 1F 
1a950     22 E4 85 11 |  if_a	sub	objptr, ##546
1a954     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1a958                 | '   return
1a958     98 00 90 1D |  if_a	jmp	#LR__2050
1a95c     10 1F 5A F2 | 	cmps	local01, local02 wcz
1a960     0F 1B 02 16 |  if_a	mov	arg05, local01
1a964     10 1F 02 16 |  if_a	mov	local01, local02
1a968     0D 21 02 16 |  if_a	mov	local02, arg05
1a96c     00 1E 56 F2 | 	cmps	local01, #0 wc
1a970     00 1E 06 C6 |  if_b	mov	local01, #0
1a974     01 00 00 FF 
1a978     22 E4 05 F1 | 	add	objptr, ##546
1a97c     F2 1A 02 FB | 	rdlong	arg05, objptr
1a980     01 00 00 FF 
1a984     22 E4 85 F1 | 	sub	objptr, ##546
1a988     0D 21 52 F2 | 	cmps	local02, arg05 wc
1a98c     01 00 00 3F 
1a990     22 E4 05 31 |  if_ae	add	objptr, ##546
1a994     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1a998     01 00 00 3F 
1a99c     22 E4 85 31 |  if_ae	sub	objptr, ##546
1a9a0     D9 E4 05 F1 | 	add	objptr, #217
1a9a4     F2 12 02 FB | 	rdlong	arg01, objptr
1a9a8     14 E4 05 F1 | 	add	objptr, #20
1a9ac     F2 1A 02 FB | 	rdlong	arg05, objptr
1a9b0     02 1A 66 F0 | 	shl	arg05, #2
1a9b4     0B 1B 02 FD | 	qmul	arg05, arg03
1a9b8                 | ' if x1>x2
1a9b8                 | '   x1,x2:=x2,x1
1a9b8                 | ' if x1<0 
1a9b8                 | '   x1:=0
1a9b8                 | ' if x2>=xres
1a9b8                 | '   x2:=xres-1  
1a9b8     01 20 86 31 |  if_ae	sub	local02, #1
1a9bc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1a9bc     01 16 06 F6 | 	mov	arg03, #1
1a9c0     10 17 02 F1 | 	add	arg03, local02
1a9c4     0F 17 82 F1 | 	sub	arg03, local01
1a9c8     0C 15 02 F6 | 	mov	arg02, arg04
1a9cc     00 18 06 F6 | 	mov	arg04, #0
1a9d0     01 1A 06 F6 | 	mov	arg05, #1
1a9d4     0A 00 00 FF 
1a9d8     D3 E5 05 F1 | 	add	objptr, ##5587
1a9dc     18 20 62 FD | 	getqx	local02
1a9e0     0F 21 02 F1 | 	add	local02, local01
1a9e4     10 13 02 F1 | 	add	arg01, local02
1a9e8     28 13 B0 FD | 	call	#_psram_spin2_fill
1a9ec     0B 00 00 FF 
1a9f0     C0 E4 85 F1 | 	sub	objptr, ##5824
1a9f4                 | LR__2050
1a9f4     A7 F0 03 F6 | 	mov	ptra, fp
1a9f8     B2 00 A0 FD | 	call	#popregs_
1a9fc                 | _hg010b_spin2_fastline_ret
1a9fc     2D 00 64 FD | 	ret
1aa00                 | 
1aa00                 | ' 
1aa00                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1aa00                 | _hg010b_spin2_draw
1aa00     0E 4A 05 F6 | 	mov	COUNT_, #14
1aa04     A8 00 A0 FD | 	call	#pushregs_
1aa08     09 1F 02 F6 | 	mov	local01, arg01
1aa0c     0A 21 02 F6 | 	mov	local02, arg02
1aa10     0B 23 02 F6 | 	mov	local03, arg03
1aa14     0C 25 02 F6 | 	mov	local04, arg04
1aa18     0D 27 02 F6 | 	mov	local05, arg05
1aa1c                 | ' 
1aa1c                 | ' if (y1==y2)
1aa1c     12 21 0A F2 | 	cmp	local02, local04 wz
1aa20     18 00 90 5D |  if_ne	jmp	#LR__2060
1aa24                 | '   fastline(x1,x2,y1,c)
1aa24     0F 13 02 F6 | 	mov	arg01, local01
1aa28     11 15 02 F6 | 	mov	arg02, local03
1aa2c     10 17 02 F6 | 	mov	arg03, local02
1aa30     13 19 02 F6 | 	mov	arg04, local05
1aa34     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1aa38     F8 00 90 FD | 	jmp	#LR__2066
1aa3c                 | LR__2060
1aa3c                 | ' else  
1aa3c                 | '   x:=x1
1aa3c     0F 29 02 F6 | 	mov	local06, local01
1aa40                 | '   y:=y1
1aa40     10 2B 02 F6 | 	mov	local07, local02
1aa44                 | ' 
1aa44                 | '   if (x1<x2) 
1aa44     11 1F 52 F2 | 	cmps	local01, local03 wc
1aa48                 | '     xi:=1
1aa48     01 2C 06 C6 |  if_b	mov	local08, #1
1aa4c                 | '     dx:=x2-x1
1aa4c     11 2F 02 C6 |  if_b	mov	local09, local03
1aa50     0F 2F 82 C1 |  if_b	sub	local09, local01
1aa54                 | '   else
1aa54                 | '     xi:=-1
1aa54     01 2C 66 36 |  if_ae	neg	local08, #1
1aa58                 | '     dx:=x1-x2
1aa58     11 1F 82 31 |  if_ae	sub	local01, local03
1aa5c     0F 2F 02 36 |  if_ae	mov	local09, local01
1aa60                 | '   
1aa60                 | '   if (y1<y2) 
1aa60     12 21 52 F2 | 	cmps	local02, local04 wc
1aa64                 | '     yi:=1
1aa64     01 30 06 C6 |  if_b	mov	local10, #1
1aa68                 | '     dy:=y2-y1
1aa68     12 33 02 C6 |  if_b	mov	local11, local04
1aa6c     10 33 82 C1 |  if_b	sub	local11, local02
1aa70                 | '   else
1aa70                 | '     yi:=-1
1aa70     01 30 66 36 |  if_ae	neg	local10, #1
1aa74                 | '     dy:=y1-y2
1aa74     12 21 82 31 |  if_ae	sub	local02, local04
1aa78     10 33 02 36 |  if_ae	mov	local11, local02
1aa7c                 | ' 
1aa7c                 | '   putpixel(x,y,c)
1aa7c     13 17 02 F6 | 	mov	arg03, local05
1aa80     14 13 02 F6 | 	mov	arg01, local06
1aa84     15 15 02 F6 | 	mov	arg02, local07
1aa88     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1aa8c                 | ' 
1aa8c                 | '   if (dx>dy)
1aa8c     19 2F 5A F2 | 	cmps	local09, local11 wcz
1aa90     50 00 90 ED |  if_be	jmp	#LR__2062
1aa94                 | '     ai:=(dy-dx)*2
1aa94     19 35 02 F6 | 	mov	local12, local11
1aa98     17 35 82 F1 | 	sub	local12, local09
1aa9c     01 34 66 F0 | 	shl	local12, #1
1aaa0                 | '     bi:=dy*2
1aaa0     01 32 66 F0 | 	shl	local11, #1
1aaa4     19 37 02 F6 | 	mov	local13, local11
1aaa8                 | '     d:= bi-dx
1aaa8     1B 39 02 F6 | 	mov	local14, local13
1aaac     17 39 82 F1 | 	sub	local14, local09
1aab0                 | '     repeat while (x<>x2) 
1aab0                 | LR__2061
1aab0     11 29 0A F2 | 	cmp	local06, local03 wz
1aab4     7C 00 90 AD |  if_e	jmp	#LR__2065
1aab8                 | '       if (d>=0) 
1aab8     00 38 56 F2 | 	cmps	local14, #0 wc
1aabc                 | '         x+=xi
1aabc     16 29 02 31 |  if_ae	add	local06, local08
1aac0                 | '         y+=yi
1aac0     18 2B 02 31 |  if_ae	add	local07, local10
1aac4                 | '         d+=ai
1aac4     1A 39 02 31 |  if_ae	add	local14, local12
1aac8                 | '       else
1aac8                 | '         d+=bi
1aac8     1B 39 02 C1 |  if_b	add	local14, local13
1aacc                 | '         x+=xi
1aacc     16 29 02 C1 |  if_b	add	local06, local08
1aad0                 | '       putpixel(x,y,c)
1aad0     14 13 02 F6 | 	mov	arg01, local06
1aad4     15 15 02 F6 | 	mov	arg02, local07
1aad8     13 17 02 F6 | 	mov	arg03, local05
1aadc     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1aae0     CC FF 9F FD | 	jmp	#LR__2061
1aae4                 | LR__2062
1aae4                 | '   else
1aae4                 | '     ai:=(dx-dy)*2
1aae4     17 35 02 F6 | 	mov	local12, local09
1aae8     19 35 82 F1 | 	sub	local12, local11
1aaec     01 34 66 F0 | 	shl	local12, #1
1aaf0                 | '     bi:=dx*2
1aaf0     01 2E 66 F0 | 	shl	local09, #1
1aaf4     17 37 02 F6 | 	mov	local13, local09
1aaf8                 | '     d:=bi-dy
1aaf8     1B 39 02 F6 | 	mov	local14, local13
1aafc     19 39 82 F1 | 	sub	local14, local11
1ab00                 | '     repeat while (y<>y2)
1ab00                 | LR__2063
1ab00     12 2B 0A F2 | 	cmp	local07, local04 wz
1ab04     2C 00 90 AD |  if_e	jmp	#LR__2064
1ab08                 | '       if (d>=0)
1ab08     00 38 56 F2 | 	cmps	local14, #0 wc
1ab0c                 | '         x+=xi
1ab0c     16 29 02 31 |  if_ae	add	local06, local08
1ab10                 | '         y+=yi
1ab10     18 2B 02 31 |  if_ae	add	local07, local10
1ab14                 | '         d+=ai
1ab14     1A 39 02 31 |  if_ae	add	local14, local12
1ab18                 | '       else
1ab18                 | '         d+=bi
1ab18     1B 39 02 C1 |  if_b	add	local14, local13
1ab1c                 | '         y+=yi
1ab1c     18 2B 02 C1 |  if_b	add	local07, local10
1ab20                 | '       putpixel(x, y,c)
1ab20     14 13 02 F6 | 	mov	arg01, local06
1ab24     15 15 02 F6 | 	mov	arg02, local07
1ab28     13 17 02 F6 | 	mov	arg03, local05
1ab2c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1ab30     CC FF 9F FD | 	jmp	#LR__2063
1ab34                 | LR__2064
1ab34                 | LR__2065
1ab34                 | LR__2066
1ab34     A7 F0 03 F6 | 	mov	ptra, fp
1ab38     B2 00 A0 FD | 	call	#popregs_
1ab3c                 | _hg010b_spin2_draw_ret
1ab3c     2D 00 64 FD | 	ret
1ab40                 | 
1ab40                 | '  
1ab40                 | ' pub fillpush(val) 
1ab40                 | _hg010b_spin2_fillpush
1ab40                 | ' fillstack[fillptr]:=val
1ab40     0B 00 00 FF 
1ab44     B6 E4 05 F1 | 	add	objptr, ##5814
1ab48     F2 00 02 FB | 	rdlong	_var01, objptr
1ab4c     02 00 66 F0 | 	shl	_var01, #2
1ab50     0A 00 00 FF 
1ab54     00 E4 85 F1 | 	sub	objptr, ##5120
1ab58     F2 00 02 F1 | 	add	_var01, objptr
1ab5c     00 13 62 FC | 	wrlong	arg01, _var01
1ab60                 | ' fillptr+=1   
1ab60     0A 00 00 FF 
1ab64     00 E4 05 F1 | 	add	objptr, ##5120
1ab68     F2 00 02 FB | 	rdlong	_var01, objptr
1ab6c     01 00 06 F1 | 	add	_var01, #1
1ab70     F2 00 62 FC | 	wrlong	_var01, objptr
1ab74     0B 00 00 FF 
1ab78     B6 E4 85 F1 | 	sub	objptr, ##5814
1ab7c                 | _hg010b_spin2_fillpush_ret
1ab7c     2D 00 64 FD | 	ret
1ab80                 | 
1ab80                 | ' 
1ab80                 | '     
1ab80                 | ' pub fillpop() : val
1ab80                 | _hg010b_spin2_fillpop
1ab80                 | ' 
1ab80                 | ' fillptr-=1
1ab80     0B 00 00 FF 
1ab84     B6 E4 05 F1 | 	add	objptr, ##5814
1ab88     F2 FA 01 FB | 	rdlong	result1, objptr
1ab8c     01 FA 85 F1 | 	sub	result1, #1
1ab90     F2 FA 61 FC | 	wrlong	result1, objptr
1ab94                 | ' if fillptr<0
1ab94     0B 00 00 FF 
1ab98     B6 E4 85 F1 | 	sub	objptr, ##5814
1ab9c     00 FA 55 F2 | 	cmps	result1, #0 wc
1aba0                 | '   fillptr:=0
1aba0     0B 00 00 CF 
1aba4     B6 E4 05 C1 |  if_b	add	objptr, ##5814
1aba8     F2 00 68 CC |  if_b	wrlong	#0, objptr
1abac     0B 00 00 CF 
1abb0     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
1abb4                 | '   val:=-12345
1abb4     E7 FF 7F CF 
1abb8     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1abbc     28 00 90 CD |  if_b	jmp	#LR__2070
1abc0                 | ' else 
1abc0                 | '   val:=fillstack[fillptr]
1abc0     0B 00 00 FF 
1abc4     B6 E4 05 F1 | 	add	objptr, ##5814
1abc8     F2 00 02 FB | 	rdlong	_var01, objptr
1abcc     02 00 66 F0 | 	shl	_var01, #2
1abd0     0A 00 00 FF 
1abd4     00 E4 85 F1 | 	sub	objptr, ##5120
1abd8     F2 00 02 F1 | 	add	_var01, objptr
1abdc     00 01 02 FB | 	rdlong	_var01, _var01
1abe0     01 00 00 FF 
1abe4     B6 E4 85 F1 | 	sub	objptr, ##694
1abe8                 | LR__2070
1abe8                 | ' return val
1abe8     00 FB 01 F6 | 	mov	result1, _var01
1abec                 | _hg010b_spin2_fillpop_ret
1abec     2D 00 64 FD | 	ret
1abf0                 | 
1abf0                 | ' 
1abf0                 | '       
1abf0                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1abf0                 | _hg010b_spin2_fill
1abf0     0B 4A 05 F6 | 	mov	COUNT_, #11
1abf4     A8 00 A0 FD | 	call	#pushregs_
1abf8                 | ' 
1abf8                 | ' newcolor:=newcolor & 255
1abf8     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1abfc                 | ' oldcolor:=oldcolor & 255
1abfc     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1ac00                 | ' 
1ac00                 | ' if (oldcolor == newcolor) 
1ac00     0F 21 0A F2 | 	cmp	local02, local01 wz
1ac04                 | '   return
1ac04     70 02 90 AD |  if_e	jmp	#LR__2089
1ac08                 | ' 
1ac08                 | ' fillptr:=0
1ac08     0B 00 00 FF 
1ac0c     B6 E4 05 F1 | 	add	objptr, ##5814
1ac10     F2 00 68 FC | 	wrlong	#0, objptr
1ac14                 | ' fillmax:=0
1ac14     04 E4 05 F1 | 	add	objptr, #4
1ac18     F2 00 68 FC | 	wrlong	#0, objptr
1ac1c     0B 00 00 FF 
1ac20     BA E4 85 F1 | 	sub	objptr, ##5818
1ac24                 | ' fillpush(x)
1ac24     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ac28                 | ' fillpush(y)
1ac28     0A 13 02 F6 | 	mov	arg01, arg02
1ac2c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ac30                 | ' y:=fillpop()
1ac30     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1ac34     FD 22 02 F6 | 	mov	local03, result1
1ac38                 | ' x:=fillpop()
1ac38     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1ac3c     FD 24 02 F6 | 	mov	local04, result1
1ac40                 | ' 'pinhigh(38)
1ac40                 | ' repeat while (x>-1)       
1ac40                 | LR__2080
1ac40     00 24 56 F2 | 	cmps	local04, #0 wc
1ac44     30 02 90 CD |  if_b	jmp	#LR__2088
1ac48                 | '  ' pintoggle(39)
1ac48                 | '   x1 := x
1ac48     12 27 02 F6 | 	mov	local05, local04
1ac4c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1ac4c                 | LR__2081
1ac4c     00 28 06 F6 | 	mov	local06, #0
1ac50     00 2A 06 F6 | 	mov	local07, #0
1ac54     00 26 56 F2 | 	cmps	local05, #0 wc
1ac58     01 2A 66 36 |  if_ae	neg	local07, #1
1ac5c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ac60     00 28 26 56 |  if_ne	not	local06, #0
1ac64     00 2C 06 F6 | 	mov	local08, #0
1ac68     00 2E 06 F6 | 	mov	local09, #0
1ac6c     11 15 02 F6 | 	mov	arg02, local03
1ac70     13 13 02 F6 | 	mov	arg01, local05
1ac74     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ac78     10 FB 09 F2 | 	cmp	result1, local02 wz
1ac7c     00 2E 26 A6 |  if_e	not	local09, #0
1ac80     00 2E 0E F2 | 	cmp	local09, #0 wz
1ac84     00 2C 26 56 |  if_ne	not	local08, #0
1ac88     16 29 CA F7 | 	test	local06, local08 wz
1ac8c                 | '     x1--
1ac8c     01 26 86 51 |  if_ne	sub	local05, #1
1ac90     B8 FF 9F 5D |  if_ne	jmp	#LR__2081
1ac94                 | '   x1++
1ac94     01 26 06 F1 | 	add	local05, #1
1ac98                 | '   spanabove := 0
1ac98     00 30 06 F6 | 	mov	local10, #0
1ac9c                 | '   spanbelow := 0
1ac9c     00 32 06 F6 | 	mov	local11, #0
1aca0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1aca0                 | LR__2082
1aca0     00 28 06 F6 | 	mov	local06, #0
1aca4     02 00 00 FF 
1aca8     00 26 56 F2 | 	cmps	local05, ##1024 wc
1acac     00 28 26 C6 |  if_b	not	local06, #0
1acb0     00 2C 06 F6 | 	mov	local08, #0
1acb4     00 2E 06 F6 | 	mov	local09, #0
1acb8     11 15 02 F6 | 	mov	arg02, local03
1acbc     13 13 02 F6 | 	mov	arg01, local05
1acc0     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1acc4     10 FB 09 F2 | 	cmp	result1, local02 wz
1acc8     00 2E 26 A6 |  if_e	not	local09, #0
1accc     00 2E 0E F2 | 	cmp	local09, #0 wz
1acd0     00 2C 26 56 |  if_ne	not	local08, #0
1acd4     16 29 CA F7 | 	test	local06, local08 wz
1acd8     88 01 90 AD |  if_e	jmp	#LR__2087
1acdc                 | '     putpixel2 (x1,y, newcolor & 255)
1acdc     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1ace0     13 13 02 F6 | 	mov	arg01, local05
1ace4     11 15 02 F6 | 	mov	arg02, local03
1ace8     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1acec                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1acec     00 28 06 F6 | 	mov	local06, #0
1acf0     00 2A 06 F6 | 	mov	local07, #0
1acf4     00 30 0E F2 | 	cmp	local10, #0 wz
1acf8     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1acfc     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1ad00     00 2A 0E F2 | 	cmp	local07, #0 wz
1ad04     00 28 26 56 |  if_ne	not	local06, #0
1ad08     00 2C 06 F6 | 	mov	local08, #0
1ad0c     00 2E 06 F6 | 	mov	local09, #0
1ad10     11 15 02 F6 | 	mov	arg02, local03
1ad14     01 14 86 F1 | 	sub	arg02, #1
1ad18     13 13 02 F6 | 	mov	arg01, local05
1ad1c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ad20     10 FB 09 F2 | 	cmp	result1, local02 wz
1ad24     00 2E 26 A6 |  if_e	not	local09, #0
1ad28     00 2E 0E F2 | 	cmp	local09, #0 wz
1ad2c     00 2C 26 56 |  if_ne	not	local08, #0
1ad30     16 29 CA F7 | 	test	local06, local08 wz
1ad34     1C 00 90 AD |  if_e	jmp	#LR__2083
1ad38                 | '       fillpush(x1)
1ad38     13 13 02 F6 | 	mov	arg01, local05
1ad3c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1ad40                 | '       fillpush(y-1)
1ad40     11 13 02 F6 | 	mov	arg01, local03
1ad44     01 12 86 F1 | 	sub	arg01, #1
1ad48     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ad4c                 | '       spanabove := 1 
1ad4c     01 30 06 F6 | 	mov	local10, #1
1ad50     4C 00 90 FD | 	jmp	#LR__2084
1ad54                 | LR__2083
1ad54                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1ad54     00 28 06 F6 | 	mov	local06, #0
1ad58     00 2A 06 F6 | 	mov	local07, #0
1ad5c     00 30 0E F2 | 	cmp	local10, #0 wz
1ad60     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1ad64     01 2A 66 16 |  if_a	neg	local07, #1
1ad68     00 2A 0E F2 | 	cmp	local07, #0 wz
1ad6c     00 28 26 56 |  if_ne	not	local06, #0
1ad70     00 2C 06 F6 | 	mov	local08, #0
1ad74     00 2E 06 F6 | 	mov	local09, #0
1ad78     11 15 02 F6 | 	mov	arg02, local03
1ad7c     01 14 86 F1 | 	sub	arg02, #1
1ad80     13 13 02 F6 | 	mov	arg01, local05
1ad84     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ad88     10 FB 09 F2 | 	cmp	result1, local02 wz
1ad8c     00 2E 26 56 |  if_ne	not	local09, #0
1ad90     00 2E 0E F2 | 	cmp	local09, #0 wz
1ad94     00 2C 26 56 |  if_ne	not	local08, #0
1ad98     16 29 CA F7 | 	test	local06, local08 wz
1ad9c                 | '       spanabove := 0 
1ad9c     00 30 06 56 |  if_ne	mov	local10, #0
1ada0                 | LR__2084
1ada0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1ada0     00 28 06 F6 | 	mov	local06, #0
1ada4     00 2A 06 F6 | 	mov	local07, #0
1ada8     00 32 0E F2 | 	cmp	local11, #0 wz
1adac     01 00 00 AF 
1adb0     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1adb4     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1adb8     00 2A 0E F2 | 	cmp	local07, #0 wz
1adbc     00 28 26 56 |  if_ne	not	local06, #0
1adc0     00 2C 06 F6 | 	mov	local08, #0
1adc4     00 2E 06 F6 | 	mov	local09, #0
1adc8     11 15 02 F6 | 	mov	arg02, local03
1adcc     01 14 06 F1 | 	add	arg02, #1
1add0     13 13 02 F6 | 	mov	arg01, local05
1add4     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1add8     10 FB 09 F2 | 	cmp	result1, local02 wz
1addc     00 2E 26 A6 |  if_e	not	local09, #0
1ade0     00 2E 0E F2 | 	cmp	local09, #0 wz
1ade4     00 2C 26 56 |  if_ne	not	local08, #0
1ade8     16 29 CA F7 | 	test	local06, local08 wz
1adec     1C 00 90 AD |  if_e	jmp	#LR__2085
1adf0                 | '       fillpush(x1)
1adf0     13 13 02 F6 | 	mov	arg01, local05
1adf4     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1adf8                 | '       fillpush(y + 1)
1adf8     11 13 02 F6 | 	mov	arg01, local03
1adfc     01 12 06 F1 | 	add	arg01, #1
1ae00     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1ae04                 | '       spanBelow := 1
1ae04     01 32 06 F6 | 	mov	local11, #1
1ae08     50 00 90 FD | 	jmp	#LR__2086
1ae0c                 | LR__2085
1ae0c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ae0c     00 28 06 F6 | 	mov	local06, #0
1ae10     00 2A 06 F6 | 	mov	local07, #0
1ae14     00 32 0E F2 | 	cmp	local11, #0 wz
1ae18     01 00 00 5F 
1ae1c     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1ae20     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ae24     00 2A 0E F2 | 	cmp	local07, #0 wz
1ae28     00 28 26 56 |  if_ne	not	local06, #0
1ae2c     00 2C 06 F6 | 	mov	local08, #0
1ae30     00 2E 06 F6 | 	mov	local09, #0
1ae34     11 15 02 F6 | 	mov	arg02, local03
1ae38     01 14 06 F1 | 	add	arg02, #1
1ae3c     13 13 02 F6 | 	mov	arg01, local05
1ae40     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ae44     10 FB 09 F2 | 	cmp	result1, local02 wz
1ae48     00 2E 26 56 |  if_ne	not	local09, #0
1ae4c     00 2E 0E F2 | 	cmp	local09, #0 wz
1ae50     00 2C 26 56 |  if_ne	not	local08, #0
1ae54     16 29 CA F7 | 	test	local06, local08 wz
1ae58                 | '       spanbelow := 0
1ae58     00 32 06 56 |  if_ne	mov	local11, #0
1ae5c                 | LR__2086
1ae5c                 | '     x1++
1ae5c     01 26 06 F1 | 	add	local05, #1
1ae60     3C FE 9F FD | 	jmp	#LR__2082
1ae64                 | LR__2087
1ae64                 | '   y:=fillpop()
1ae64     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ae68     FD 22 02 F6 | 	mov	local03, result1
1ae6c                 | '   x:=fillpop()
1ae6c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ae70     FD 24 02 F6 | 	mov	local04, result1
1ae74     C8 FD 9F FD | 	jmp	#LR__2080
1ae78                 | LR__2088
1ae78                 | LR__2089
1ae78     A7 F0 03 F6 | 	mov	ptra, fp
1ae7c     B2 00 A0 FD | 	call	#popregs_
1ae80                 | _hg010b_spin2_fill_ret
1ae80     2D 00 64 FD | 	ret
1ae84                 | 
1ae84                 | ' 'pinlow(38)    
1ae84                 | ' 
1ae84                 | ' '-- A filled circle -----------------------------------------------------
1ae84                 | ' 
1ae84                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1ae84                 | _hg010b_spin2_fcircle
1ae84     08 4A 05 F6 | 	mov	COUNT_, #8
1ae88     A8 00 A0 FD | 	call	#pushregs_
1ae8c     0B 1F 02 F6 | 	mov	local01, arg03
1ae90     FF FF 7F FF 
1ae94     FE 1F 06 FD | 	qmul	local01, ##-2
1ae98     09 21 02 F6 | 	mov	local02, arg01
1ae9c     0A 23 02 F6 | 	mov	local03, arg02
1aea0     0C 25 02 F6 | 	mov	local04, arg04
1aea4                 | ' 
1aea4                 | ' d:=5-4*r
1aea4     0F 19 02 F6 | 	mov	arg04, local01
1aea8     02 18 66 F0 | 	shl	arg04, #2
1aeac     05 26 06 F6 | 	mov	local05, #5
1aeb0     0C 27 82 F1 | 	sub	local05, arg04
1aeb4                 | ' x:=0
1aeb4     00 28 06 F6 | 	mov	local06, #0
1aeb8                 | ' y:=r
1aeb8                 | ' da:=(-2*r+5)*4
1aeb8                 | ' db:=3*4
1aeb8     0C 2A 06 F6 | 	mov	local07, #12
1aebc                 | ' repeat while (x<=y) 
1aebc     18 2C 62 FD | 	getqx	local08
1aec0     05 2C 06 F1 | 	add	local08, #5
1aec4     02 2C 66 F0 | 	shl	local08, #2
1aec8                 | LR__2090
1aec8     0F 29 5A F2 | 	cmps	local06, local01 wcz
1aecc     B4 00 90 1D |  if_a	jmp	#LR__2092
1aed0                 | '   fastline(x0-x,x0+x,y0-y,c)
1aed0     10 13 02 F6 | 	mov	arg01, local02
1aed4     14 13 82 F1 | 	sub	arg01, local06
1aed8     10 15 02 F6 | 	mov	arg02, local02
1aedc     14 15 02 F1 | 	add	arg02, local06
1aee0     11 17 02 F6 | 	mov	arg03, local03
1aee4     0F 17 82 F1 | 	sub	arg03, local01
1aee8     12 19 02 F6 | 	mov	arg04, local04
1aeec     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1aef0                 | '   fastline(x0-x,x0+x,y0+y,c)
1aef0     10 13 02 F6 | 	mov	arg01, local02
1aef4     14 13 82 F1 | 	sub	arg01, local06
1aef8     10 15 02 F6 | 	mov	arg02, local02
1aefc     14 15 02 F1 | 	add	arg02, local06
1af00     11 17 02 F6 | 	mov	arg03, local03
1af04     0F 17 02 F1 | 	add	arg03, local01
1af08     12 19 02 F6 | 	mov	arg04, local04
1af0c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1af10                 | '   fastline(x0-y,x0+y,y0-x,c)
1af10     10 13 02 F6 | 	mov	arg01, local02
1af14     0F 13 82 F1 | 	sub	arg01, local01
1af18     10 15 02 F6 | 	mov	arg02, local02
1af1c     0F 15 02 F1 | 	add	arg02, local01
1af20     11 17 02 F6 | 	mov	arg03, local03
1af24     14 17 82 F1 | 	sub	arg03, local06
1af28     12 19 02 F6 | 	mov	arg04, local04
1af2c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1af30                 | '   fastline(x0-y,x0+y,y0+x,c)
1af30     10 13 02 F6 | 	mov	arg01, local02
1af34     0F 13 82 F1 | 	sub	arg01, local01
1af38     10 15 02 F6 | 	mov	arg02, local02
1af3c     0F 15 02 F1 | 	add	arg02, local01
1af40     11 17 02 F6 | 	mov	arg03, local03
1af44     14 17 02 F1 | 	add	arg03, local06
1af48     12 19 02 F6 | 	mov	arg04, local04
1af4c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1af50                 | '   if d>0 
1af50     01 26 56 F2 | 	cmps	local05, #1 wc
1af54     18 00 90 CD |  if_b	jmp	#LR__2091
1af58                 | '     d+=da
1af58     16 27 02 F1 | 	add	local05, local08
1af5c                 | '     y-=1
1af5c     01 1E 86 F1 | 	sub	local01, #1
1af60                 | '     x+=1
1af60     01 28 06 F1 | 	add	local06, #1
1af64                 | '     da+=4*4
1af64     10 2C 06 F1 | 	add	local08, #16
1af68                 | '     db+=2*4
1af68     08 2A 06 F1 | 	add	local07, #8
1af6c     58 FF 9F FD | 	jmp	#LR__2090
1af70                 | LR__2091
1af70                 | '   else
1af70                 | '     d+=db
1af70     15 27 02 F1 | 	add	local05, local07
1af74                 | '     x+=1
1af74     01 28 06 F1 | 	add	local06, #1
1af78                 | '     da+=2*4
1af78     08 2C 06 F1 | 	add	local08, #8
1af7c                 | '     db+=2*4
1af7c     08 2A 06 F1 | 	add	local07, #8
1af80     44 FF 9F FD | 	jmp	#LR__2090
1af84                 | LR__2092
1af84     A7 F0 03 F6 | 	mov	ptra, fp
1af88     B2 00 A0 FD | 	call	#popregs_
1af8c                 | _hg010b_spin2_fcircle_ret
1af8c     2D 00 64 FD | 	ret
1af90                 | 
1af90                 | '  
1af90                 | ' '-- A circle ------------------------------------------------------------ 
1af90                 | '  
1af90                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1af90                 | _hg010b_spin2_circle
1af90     08 4A 05 F6 | 	mov	COUNT_, #8
1af94     A8 00 A0 FD | 	call	#pushregs_
1af98     0B 1F 02 F6 | 	mov	local01, arg03
1af9c     FF FF 7F FF 
1afa0     FE 1F 06 FD | 	qmul	local01, ##-2
1afa4     09 21 02 F6 | 	mov	local02, arg01
1afa8     0A 23 02 F6 | 	mov	local03, arg02
1afac     0C 25 02 F6 | 	mov	local04, arg04
1afb0                 | ' 
1afb0                 | '  
1afb0                 | ' d:=5-4*r
1afb0     0F 19 02 F6 | 	mov	arg04, local01
1afb4     02 18 66 F0 | 	shl	arg04, #2
1afb8     05 26 06 F6 | 	mov	local05, #5
1afbc     0C 27 82 F1 | 	sub	local05, arg04
1afc0                 | ' x:=0
1afc0     00 28 06 F6 | 	mov	local06, #0
1afc4                 | ' y:=r
1afc4                 | ' da:=(-2*r+5)*4
1afc4                 | ' db:=3*4
1afc4     0C 2A 06 F6 | 	mov	local07, #12
1afc8                 | ' repeat while (x<=y) 
1afc8     18 2C 62 FD | 	getqx	local08
1afcc     05 2C 06 F1 | 	add	local08, #5
1afd0     02 2C 66 F0 | 	shl	local08, #2
1afd4                 | LR__2100
1afd4     0F 29 5A F2 | 	cmps	local06, local01 wcz
1afd8     F4 00 90 1D |  if_a	jmp	#LR__2102
1afdc                 | '   putpixel(x0-x,y0-y,c)
1afdc     10 13 02 F6 | 	mov	arg01, local02
1afe0     14 13 82 F1 | 	sub	arg01, local06
1afe4     11 15 02 F6 | 	mov	arg02, local03
1afe8     0F 15 82 F1 | 	sub	arg02, local01
1afec     12 17 02 F6 | 	mov	arg03, local04
1aff0     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1aff4                 | '   putpixel(x0-x,y0+y,c)
1aff4     10 13 02 F6 | 	mov	arg01, local02
1aff8     14 13 82 F1 | 	sub	arg01, local06
1affc     11 15 02 F6 | 	mov	arg02, local03
1b000     0F 15 02 F1 | 	add	arg02, local01
1b004     12 17 02 F6 | 	mov	arg03, local04
1b008     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b00c                 | '   putpixel(x0+x,y0-y,c)
1b00c     10 13 02 F6 | 	mov	arg01, local02
1b010     14 13 02 F1 | 	add	arg01, local06
1b014     11 15 02 F6 | 	mov	arg02, local03
1b018     0F 15 82 F1 | 	sub	arg02, local01
1b01c     12 17 02 F6 | 	mov	arg03, local04
1b020     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b024                 | '   putpixel(x0+x,y0+y,c)
1b024     10 13 02 F6 | 	mov	arg01, local02
1b028     14 13 02 F1 | 	add	arg01, local06
1b02c     11 15 02 F6 | 	mov	arg02, local03
1b030     0F 15 02 F1 | 	add	arg02, local01
1b034     12 17 02 F6 | 	mov	arg03, local04
1b038     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b03c                 | '   putpixel(x0-y,y0-x,c)
1b03c     10 13 02 F6 | 	mov	arg01, local02
1b040     0F 13 82 F1 | 	sub	arg01, local01
1b044     11 15 02 F6 | 	mov	arg02, local03
1b048     14 15 82 F1 | 	sub	arg02, local06
1b04c     12 17 02 F6 | 	mov	arg03, local04
1b050     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1b054                 | '   putpixel(x0-y,y0+x,c)
1b054     10 13 02 F6 | 	mov	arg01, local02
1b058     0F 13 82 F1 | 	sub	arg01, local01
1b05c     11 15 02 F6 | 	mov	arg02, local03
1b060     14 15 02 F1 | 	add	arg02, local06
1b064     12 17 02 F6 | 	mov	arg03, local04
1b068     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1b06c                 | '   putpixel(x0+y,y0-x,c)
1b06c     10 13 02 F6 | 	mov	arg01, local02
1b070     0F 13 02 F1 | 	add	arg01, local01
1b074     11 15 02 F6 | 	mov	arg02, local03
1b078     14 15 82 F1 | 	sub	arg02, local06
1b07c     12 17 02 F6 | 	mov	arg03, local04
1b080     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1b084                 | '   putpixel(x0+y,y0+x,c)
1b084     10 13 02 F6 | 	mov	arg01, local02
1b088     0F 13 02 F1 | 	add	arg01, local01
1b08c     11 15 02 F6 | 	mov	arg02, local03
1b090     14 15 02 F1 | 	add	arg02, local06
1b094     12 17 02 F6 | 	mov	arg03, local04
1b098     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1b09c                 | '   if d>0 
1b09c     01 26 56 F2 | 	cmps	local05, #1 wc
1b0a0     18 00 90 CD |  if_b	jmp	#LR__2101
1b0a4                 | '     d+=da
1b0a4     16 27 02 F1 | 	add	local05, local08
1b0a8                 | '     y-=1
1b0a8     01 1E 86 F1 | 	sub	local01, #1
1b0ac                 | '     x+=1
1b0ac     01 28 06 F1 | 	add	local06, #1
1b0b0                 | '     da+=4*4
1b0b0     10 2C 06 F1 | 	add	local08, #16
1b0b4                 | '     db+=2*4
1b0b4     08 2A 06 F1 | 	add	local07, #8
1b0b8     18 FF 9F FD | 	jmp	#LR__2100
1b0bc                 | LR__2101
1b0bc                 | '   else
1b0bc                 | '     d+=db
1b0bc     15 27 02 F1 | 	add	local05, local07
1b0c0                 | '     x+=1
1b0c0     01 28 06 F1 | 	add	local06, #1
1b0c4                 | '     da+=2*4
1b0c4     08 2C 06 F1 | 	add	local08, #8
1b0c8                 | '     db+=2*4
1b0c8     08 2A 06 F1 | 	add	local07, #8
1b0cc     04 FF 9F FD | 	jmp	#LR__2100
1b0d0                 | LR__2102
1b0d0     A7 F0 03 F6 | 	mov	ptra, fp
1b0d4     B2 00 A0 FD | 	call	#popregs_
1b0d8                 | _hg010b_spin2_circle_ret
1b0d8     2D 00 64 FD | 	ret
1b0dc                 | 
1b0dc                 | '     
1b0dc                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1b0dc                 | ' 
1b0dc                 | ' pub frame(x1,y1,x2,y2,c)
1b0dc                 | _hg010b_spin2_frame
1b0dc     05 4A 05 F6 | 	mov	COUNT_, #5
1b0e0     A8 00 A0 FD | 	call	#pushregs_
1b0e4     09 1F 02 F6 | 	mov	local01, arg01
1b0e8     0A 21 02 F6 | 	mov	local02, arg02
1b0ec     0B 23 02 F6 | 	mov	local03, arg03
1b0f0     0C 25 02 F6 | 	mov	local04, arg04
1b0f4     0D 27 02 F6 | 	mov	local05, arg05
1b0f8                 | ' 
1b0f8                 | ' fastline(x1,x2,y1,c)
1b0f8     0F 13 02 F6 | 	mov	arg01, local01
1b0fc     11 15 02 F6 | 	mov	arg02, local03
1b100     10 17 02 F6 | 	mov	arg03, local02
1b104     13 19 02 F6 | 	mov	arg04, local05
1b108     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1b10c                 | ' fastline(x1,x2,y2,c)
1b10c     0F 13 02 F6 | 	mov	arg01, local01
1b110     11 15 02 F6 | 	mov	arg02, local03
1b114     12 17 02 F6 | 	mov	arg03, local04
1b118     13 19 02 F6 | 	mov	arg04, local05
1b11c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1b120                 | ' line(x1,y1,x1,y2,c)
1b120     0F 13 02 F6 | 	mov	arg01, local01
1b124     10 15 02 F6 | 	mov	arg02, local02
1b128     0F 17 02 F6 | 	mov	arg03, local01
1b12c     12 19 02 F6 | 	mov	arg04, local04
1b130     13 1B 02 F6 | 	mov	arg05, local05
1b134                 | ' draw(x1,y1,x2,y2,c)
1b134     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1b138                 | ' line(x2,y1,x2,y2,c)
1b138     11 13 02 F6 | 	mov	arg01, local03
1b13c     10 15 02 F6 | 	mov	arg02, local02
1b140     11 17 02 F6 | 	mov	arg03, local03
1b144     12 19 02 F6 | 	mov	arg04, local04
1b148     13 1B 02 F6 | 	mov	arg05, local05
1b14c                 | ' draw(x1,y1,x2,y2,c)
1b14c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1b150     A7 F0 03 F6 | 	mov	ptra, fp
1b154     B2 00 A0 FD | 	call	#popregs_
1b158                 | _hg010b_spin2_frame_ret
1b158     2D 00 64 FD | 	ret
1b15c                 | 
1b15c                 | ' 
1b15c                 | ' '-- A box (a filled rectangle) ----------------------------------------
1b15c                 | ' 
1b15c                 | ' pub box(x1,y1,x2,y2,c) |yy
1b15c                 | _hg010b_spin2_box
1b15c     06 4A 05 F6 | 	mov	COUNT_, #6
1b160     A8 00 A0 FD | 	call	#pushregs_
1b164     09 1F 02 F6 | 	mov	local01, arg01
1b168     0A 21 02 F6 | 	mov	local02, arg02
1b16c     0B 23 02 F6 | 	mov	local03, arg03
1b170     0C 25 02 F6 | 	mov	local04, arg04
1b174     0D 27 02 F6 | 	mov	local05, arg05
1b178                 | ' 
1b178                 | ' repeat yy from y1 to y2
1b178     10 25 52 F2 | 	cmps	local04, local02 wc
1b17c     01 28 86 F6 | 	negc	local06, #1
1b180     14 25 02 F1 | 	add	local04, local06
1b184                 | LR__2110
1b184                 | '   fastline(x1,x2,yy,c)
1b184     0F 13 02 F6 | 	mov	arg01, local01
1b188     11 15 02 F6 | 	mov	arg02, local03
1b18c     13 19 02 F6 | 	mov	arg04, local05
1b190     10 17 02 F6 | 	mov	arg03, local02
1b194     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1b198     14 21 02 F1 | 	add	local02, local06
1b19c     12 21 0A F2 | 	cmp	local02, local04 wz
1b1a0     E0 FF 9F 5D |  if_ne	jmp	#LR__2110
1b1a4     A7 F0 03 F6 | 	mov	ptra, fp
1b1a8     B2 00 A0 FD | 	call	#popregs_
1b1ac                 | _hg010b_spin2_box_ret
1b1ac     2D 00 64 FD | 	ret
1b1b0                 | 
1b1b0                 | '       
1b1b0                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1b1b0                 | _hg010b_spin2_putcharxycgf
1b1b0                 | ' 
1b1b0                 | '  
1b1b0                 | ' repeat yy from 0 to 15
1b1b0     00 00 06 F6 | 	mov	_var01, #0
1b1b4     97 8C 48 FB | 	callpa	#(@LR__2122-@LR__2120)>>2,fcache_load_ptr_
1b1b8                 | LR__2120
1b1b8                 | ' 
1b1b8                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1b1b8     91 E4 05 F1 | 	add	objptr, #145
1b1bc     F2 02 02 FB | 	rdlong	_var02, objptr
1b1c0     0A 02 66 F0 | 	shl	_var02, #10
1b1c4     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1b1c8     01 05 02 F1 | 	add	_var03, _var02
1b1cc     0B 03 02 F6 | 	mov	_var02, arg03
1b1d0     04 02 66 F0 | 	shl	_var02, #4
1b1d4     01 05 02 F1 | 	add	_var03, _var02
1b1d8     00 05 02 F1 | 	add	_var03, _var01
1b1dc     02 05 C2 FA | 	rdbyte	_var03, _var03
1b1e0                 | '   asm
1b1e0     00 04 0E F4 | 	testb	_var03, #0 wz
1b1e4     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1b1e8     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1b1ec     01 04 0E F4 | 	testb	_var03, #1 wz
1b1f0     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1b1f4     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1b1f8     02 04 0E F4 | 	testb	_var03, #2 wz
1b1fc     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1b200     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1b204     03 04 0E F4 | 	testb	_var03, #3 wz
1b208     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1b20c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1b210     04 04 0E F4 | 	testb	_var03, #4 wz
1b214     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1b218     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1b21c     05 04 0E F4 | 	testb	_var03, #5 wz
1b220     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1b224     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1b228     06 04 0E F4 | 	testb	_var03, #6 wz
1b22c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1b230     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1b234     07 04 0E F4 | 	testb	_var03, #7 wz
1b238     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1b23c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1b240                 | '   
1b240                 | '   ccc[0]:=c1
1b240     99 E5 05 F1 | 	add	objptr, #409
1b244     F2 06 62 FC | 	wrlong	_var04, objptr
1b248                 | '   ccc[1]:=c2 
1b248     04 E4 05 F1 | 	add	objptr, #4
1b24c     F2 08 62 FC | 	wrlong	_var05, objptr
1b250                 | '   long[mailbox0][2]:=8
1b250     49 E4 85 F1 | 	sub	objptr, #73
1b254     F2 04 02 FB | 	rdlong	_var03, objptr
1b258     08 04 06 F1 | 	add	_var03, #8
1b25c     02 11 68 FC | 	wrlong	#8, _var03
1b260                 | '   long[mailbox0][1]:=@ccc
1b260     45 E4 05 F1 | 	add	objptr, #69
1b264     F2 04 02 F6 | 	mov	_var03, objptr
1b268     45 E4 85 F1 | 	sub	objptr, #69
1b26c     F2 02 02 FB | 	rdlong	_var02, objptr
1b270     04 02 06 F1 | 	add	_var02, #4
1b274     01 05 62 FC | 	wrlong	_var03, _var02
1b278                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1b278     0C E5 85 F1 | 	sub	objptr, #268
1b27c     F2 04 02 FB | 	rdlong	_var03, objptr
1b280     0A 03 02 F6 | 	mov	_var02, arg02
1b284     00 03 02 F1 | 	add	_var02, _var01
1b288     0A 02 66 F0 | 	shl	_var02, #10
1b28c     09 0B 02 F6 | 	mov	_var06, arg01
1b290     02 0A 66 F0 | 	shl	_var06, #2
1b294     05 03 02 F1 | 	add	_var02, _var06
1b298     01 05 02 F1 | 	add	_var03, _var02
1b29c     00 00 78 FF 
1b2a0     00 04 06 F1 | 	add	_var03, ##-268435456
1b2a4     0C E5 05 F1 | 	add	objptr, #268
1b2a8     F2 0A 02 FB | 	rdlong	_var06, objptr
1b2ac     05 05 62 FC | 	wrlong	_var03, _var06
1b2b0                 | '   repeat
1b2b0                 | LR__2121
1b2b0     F2 04 02 FB | 	rdlong	_var03, objptr
1b2b4     02 03 02 FB | 	rdlong	_var02, _var03
1b2b8     00 02 56 F2 | 	cmps	_var02, #0 wc
1b2bc     F0 FF 9F CD |  if_b	jmp	#LR__2121
1b2c0     E5 E5 85 F1 | 	sub	objptr, #485
1b2c4     01 00 06 F1 | 	add	_var01, #1
1b2c8     10 00 56 F2 | 	cmps	_var01, #16 wc
1b2cc     E8 FE 9F CD |  if_b	jmp	#LR__2120
1b2d0                 | LR__2122
1b2d0                 | _hg010b_spin2_putcharxycgf_ret
1b2d0     2D 00 64 FD | 	ret
1b2d4                 | 
1b2d4                 | ' 
1b2d4                 | ' 
1b2d4                 | ' '**********************************************************************r***
1b2d4                 | ' '                                                                        *
1b2d4                 | ' ' Font related functions                                                 *
1b2d4                 | ' '                                                                        *
1b2d4                 | ' '*************************************************************************
1b2d4                 | ' 
1b2d4                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1b2d4                 | ' 
1b2d4                 | ' pub setfontfamily(afontnum)
1b2d4                 | _hg010b_spin2_setfontfamily
1b2d4                 | ' 
1b2d4                 | ' font_family:=afontnum
1b2d4     91 E4 05 F1 | 	add	objptr, #145
1b2d8     F2 12 62 FC | 	wrlong	arg01, objptr
1b2dc     91 E4 85 F1 | 	sub	objptr, #145
1b2e0                 | ' 'if afontnum==8
1b2e0                 | ' '  font_ptr:=@amiga_font
1b2e0                 | ' 
1b2e0                 | ' if afontnum==4
1b2e0     04 12 0E F2 | 	cmp	arg01, #4 wz
1b2e4                 | '   font_ptr:=@st_font
1b2e4     08 00 00 AF 
1b2e8     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1b2ec     04 E4 05 A1 |  if_e	add	objptr, #4
1b2f0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1b2f4     04 E4 85 A1 |  if_e	sub	objptr, #4
1b2f8     08 00 00 AF 
1b2fc     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1b300                 | ' if afontnum==0
1b300     00 12 0E F2 | 	cmp	arg01, #0 wz
1b304                 | '   font_ptr:=@vga_font
1b304     04 E4 05 A1 |  if_e	add	objptr, #4
1b308     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1b30c     04 E4 85 A1 |  if_e	sub	objptr, #4
1b310                 | _hg010b_spin2_setfontfamily_ret
1b310     2D 00 64 FD | 	ret
1b314                 | 
1b314                 | ' 
1b314                 | ' '*************************************************************************
1b314                 | ' '                                                                        *
1b314                 | ' '  Cursor functions                                                      *
1b314                 | ' '                                                                        *
1b314                 | ' '*************************************************************************
1b314                 | ' 
1b314                 | ' 
1b314                 | ' pub setcursorpos(x,y)
1b314                 | _hg010b_spin2_setcursorpos
1b314                 | ' 
1b314                 | ' ''---------- Set the (x,y) position of cursor
1b314                 | ' 
1b314                 | ' cursor_x:=x
1b314     38 E4 05 F1 | 	add	objptr, #56
1b318     F2 12 52 FC | 	wrword	arg01, objptr
1b31c                 | ' cursor_y:=y
1b31c     02 E4 05 F1 | 	add	objptr, #2
1b320     F2 14 42 FC | 	wrbyte	arg02, objptr
1b324                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1b324     02 E4 85 F1 | 	sub	objptr, #2
1b328     F2 14 E2 FA | 	rdword	arg02, objptr
1b32c     02 14 66 F0 | 	shl	arg02, #2
1b330     02 E4 05 F1 | 	add	objptr, #2
1b334     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b338     3A E4 85 F1 | 	sub	objptr, #58
1b33c     04 16 66 F0 | 	shl	arg03, #4
1b340     11 12 06 F6 | 	mov	arg01, #17
1b344     54 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1b348                 | _hg010b_spin2_setcursorpos_ret
1b348     2D 00 64 FD | 	ret
1b34c                 | 
1b34c                 | ' 
1b34c                 | ' pub setcursorx(x)
1b34c                 | _hg010b_spin2_setcursorx
1b34c                 | ' cursor_x:=x
1b34c     38 E4 05 F1 | 	add	objptr, #56
1b350     F2 12 52 FC | 	wrword	arg01, objptr
1b354                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1b354     F2 14 E2 FA | 	rdword	arg02, objptr
1b358     02 14 66 F0 | 	shl	arg02, #2
1b35c     02 E4 05 F1 | 	add	objptr, #2
1b360     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b364     3A E4 85 F1 | 	sub	objptr, #58
1b368     04 16 66 F0 | 	shl	arg03, #4
1b36c     11 12 06 F6 | 	mov	arg01, #17
1b370     28 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1b374                 | _hg010b_spin2_setcursorx_ret
1b374     2D 00 64 FD | 	ret
1b378                 | 
1b378                 | ' 
1b378                 | ' '*************************************************************************
1b378                 | ' '                                                                        *
1b378                 | ' '  VBlank functions                                                      *
1b378                 | ' '                                                                        *
1b378                 | ' '*************************************************************************
1b378                 | ' 
1b378                 | ' pub waitvbl(amount) | i
1b378                 | _hg010b_spin2_waitvbl
1b378     03 4A 05 F6 | 	mov	COUNT_, #3
1b37c     A8 00 A0 FD | 	call	#pushregs_
1b380     09 1F 02 F6 | 	mov	local01, arg01
1b384                 | ' 
1b384                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1b384                 | ' 
1b384                 | ' repeat i from 1 to amount
1b384     01 20 06 F6 | 	mov	local02, #1
1b388     01 1E 56 F2 | 	cmps	local01, #1 wc
1b38c     01 22 86 F6 | 	negc	local03, #1
1b390     11 1F 02 F1 | 	add	local01, local03
1b394                 | LR__2130
1b394                 | '   repeat until vblank==0
1b394                 | LR__2131
1b394     45 E4 05 F1 | 	add	objptr, #69
1b398     F2 12 0A FB | 	rdlong	arg01, objptr wz
1b39c     45 E4 85 F1 | 	sub	objptr, #69
1b3a0     0C 00 90 AD |  if_e	jmp	#LR__2132
1b3a4                 | '     waitus(100)
1b3a4     64 12 06 F6 | 	mov	arg01, #100
1b3a8     94 17 B0 FD | 	call	#__system___waitus
1b3ac     E4 FF 9F FD | 	jmp	#LR__2131
1b3b0                 | LR__2132
1b3b0                 | '   repeat until vblank==1
1b3b0                 | LR__2133
1b3b0     45 E4 05 F1 | 	add	objptr, #69
1b3b4     F2 12 02 FB | 	rdlong	arg01, objptr
1b3b8     45 E4 85 F1 | 	sub	objptr, #69
1b3bc     01 12 0E F2 | 	cmp	arg01, #1 wz
1b3c0     0C 00 90 AD |  if_e	jmp	#LR__2134
1b3c4                 | '     waitus(100)
1b3c4     64 12 06 F6 | 	mov	arg01, #100
1b3c8     74 17 B0 FD | 	call	#__system___waitus
1b3cc     E0 FF 9F FD | 	jmp	#LR__2133
1b3d0                 | LR__2134
1b3d0     11 21 02 F1 | 	add	local02, local03
1b3d4     0F 21 0A F2 | 	cmp	local02, local01 wz
1b3d8     B8 FF 9F 5D |  if_ne	jmp	#LR__2130
1b3dc     A7 F0 03 F6 | 	mov	ptra, fp
1b3e0     B2 00 A0 FD | 	call	#popregs_
1b3e4                 | _hg010b_spin2_waitvbl_ret
1b3e4     2D 00 64 FD | 	ret
1b3e8                 | 
1b3e8                 | ' 
1b3e8                 | ' 
1b3e8                 | ' pub cls(fc,bc)   :c,i
1b3e8                 | _hg010b_spin2_cls
1b3e8     02 4A 05 F6 | 	mov	COUNT_, #2
1b3ec     A8 00 A0 FD | 	call	#pushregs_
1b3f0     09 1F 02 F6 | 	mov	local01, arg01
1b3f4     0A 21 02 F6 | 	mov	local02, arg02
1b3f8                 | ' 
1b3f8                 | ' c:=bc
1b3f8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1b3f8     D9 E4 05 F1 | 	add	objptr, #217
1b3fc     F2 12 02 FB | 	rdlong	arg01, objptr
1b400     A5 E4 85 F1 | 	sub	objptr, #165
1b404     F2 16 02 FB | 	rdlong	arg03, objptr
1b408     02 16 66 F0 | 	shl	arg03, #2
1b40c     10 15 02 F6 | 	mov	arg02, local02
1b410     00 18 06 F6 | 	mov	arg04, #0
1b414     01 1A 06 F6 | 	mov	arg05, #1
1b418     0B 00 00 FF 
1b41c     8C E4 05 F1 | 	add	objptr, ##5772
1b420     F0 08 B0 FD | 	call	#_psram_spin2_fill
1b424                 | ' setwritecolors(fc,bc)
1b424                 | ' 
1b424                 | ' write_color:=ff
1b424     0B 00 00 FF 
1b428     83 E4 85 F1 | 	sub	objptr, ##5763
1b42c     F2 1E 62 FC | 	wrlong	local01, objptr
1b430                 | ' write_background:=bb
1b430     04 E4 05 F1 | 	add	objptr, #4
1b434     F2 20 62 FC | 	wrlong	local02, objptr
1b438                 | ' cursor_x:=0
1b438     09 E4 85 F1 | 	sub	objptr, #9
1b43c     F2 00 58 FC | 	wrword	#0, objptr
1b440                 | ' cursor_y:=0
1b440     02 E4 05 F1 | 	add	objptr, #2
1b444     F2 00 48 FC | 	wrbyte	#0, objptr
1b448                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1b448     02 E4 85 F1 | 	sub	objptr, #2
1b44c     F2 14 E2 FA | 	rdword	arg02, objptr
1b450     02 14 66 F0 | 	shl	arg02, #2
1b454     02 E4 05 F1 | 	add	objptr, #2
1b458     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b45c     3A E4 85 F1 | 	sub	objptr, #58
1b460     04 16 66 F0 | 	shl	arg03, #4
1b464     11 12 06 F6 | 	mov	arg01, #17
1b468     30 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1b46c                 | ' setcursorcolor(fc)
1b46c     0F 13 02 F6 | 	mov	arg01, local01
1b470     E4 EE BF FD | 	call	#_hg010b_spin2_setcursorcolor
1b474     10 FB 01 F6 | 	mov	result1, local02
1b478     00 FC 05 F6 | 	mov	result2, #0
1b47c     A7 F0 03 F6 | 	mov	ptra, fp
1b480     B2 00 A0 FD | 	call	#popregs_
1b484                 | _hg010b_spin2_cls_ret
1b484     2D 00 64 FD | 	ret
1b488                 | 
1b488                 | ' 
1b488                 | ' ''---------- Output a char at the cursor position, move the cursor 
1b488                 | ' 
1b488                 | ' pub putchar(achar) | c,x,y,l,newcpl
1b488                 | _hg010b_spin2_putchar
1b488     01 4A 05 F6 | 	mov	COUNT_, #1
1b48c     A8 00 A0 FD | 	call	#pushregs_
1b490     09 1F 02 F6 | 	mov	local01, arg01
1b494                 | ' 
1b494                 | ' if achar==10
1b494     0A 1E 0E F2 | 	cmp	local01, #10 wz
1b498                 | '   crlf()
1b498     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1b49c                 | ' if achar==9
1b49c     09 1E 0E F2 | 	cmp	local01, #9 wz
1b4a0     18 00 90 5D |  if_ne	jmp	#LR__2140
1b4a4                 | '   cursor_x:=(cursor_x& %11110000)+16
1b4a4     38 E4 05 F1 | 	add	objptr, #56
1b4a8     F2 16 E2 FA | 	rdword	arg03, objptr
1b4ac     F0 16 06 F5 | 	and	arg03, #240
1b4b0     10 16 06 F1 | 	add	arg03, #16
1b4b4     F2 16 52 FC | 	wrword	arg03, objptr
1b4b8     38 E4 85 F1 | 	sub	objptr, #56
1b4bc                 | LR__2140
1b4bc                 | '   
1b4bc                 | ' if (achar<>9) && (achar<>10) 
1b4bc     09 1E 0E F2 | 	cmp	local01, #9 wz
1b4c0     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1b4c4     44 00 90 AD |  if_e	jmp	#LR__2141
1b4c8                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1b4c8     38 E4 05 F1 | 	add	objptr, #56
1b4cc     F2 12 E2 FA | 	rdword	arg01, objptr
1b4d0     02 E4 05 F1 | 	add	objptr, #2
1b4d4     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b4d8     04 14 66 F0 | 	shl	arg02, #4
1b4dc     03 E4 05 F1 | 	add	objptr, #3
1b4e0     F2 18 02 FB | 	rdlong	arg04, objptr
1b4e4     04 E4 05 F1 | 	add	objptr, #4
1b4e8     F2 1A 02 FB | 	rdlong	arg05, objptr
1b4ec     41 E4 85 F1 | 	sub	objptr, #65
1b4f0     0F 17 02 F6 | 	mov	arg03, local01
1b4f4     B8 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1b4f8                 | '   cursor_x+=2
1b4f8     38 E4 05 F1 | 	add	objptr, #56
1b4fc     F2 1E E2 FA | 	rdword	local01, objptr
1b500     02 1E 06 F1 | 	add	local01, #2
1b504     F2 1E 52 FC | 	wrword	local01, objptr
1b508     38 E4 85 F1 | 	sub	objptr, #56
1b50c                 | LR__2141
1b50c                 | ' 
1b50c                 | ' if cursor_x>=256
1b50c     38 E4 05 F1 | 	add	objptr, #56
1b510     F2 1E E2 FA | 	rdword	local01, objptr
1b514     38 E4 85 F1 | 	sub	objptr, #56
1b518     00 1F 56 F2 | 	cmps	local01, #256 wc
1b51c     64 00 90 CD |  if_b	jmp	#LR__2143
1b520                 | '   cursor_x:=0
1b520     38 E4 05 F1 | 	add	objptr, #56
1b524     F2 00 58 FC | 	wrword	#0, objptr
1b528                 | '   cursor_y+=1
1b528     02 E4 05 F1 | 	add	objptr, #2
1b52c     F2 1E C2 FA | 	rdbyte	local01, objptr
1b530     01 1E 06 F1 | 	add	local01, #1
1b534     F2 1E 42 FC | 	wrbyte	local01, objptr
1b538                 | '   if cursor_y>st_lines-1
1b538     C3 E4 05 F1 | 	add	objptr, #195
1b53c     F2 1E 02 FB | 	rdlong	local01, objptr
1b540     01 1E 86 F1 | 	sub	local01, #1
1b544     C3 E4 85 F1 | 	sub	objptr, #195
1b548     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b54c     3A E4 85 F1 | 	sub	objptr, #58
1b550     0F 17 5A F2 | 	cmps	arg03, local01 wcz
1b554     2C 00 90 ED |  if_be	jmp	#LR__2142
1b558                 | '     scrollup()
1b558     00 12 06 F6 | 	mov	arg01, #0
1b55c     01 00 00 FF 
1b560     40 14 06 F6 | 	mov	arg02, ##576
1b564     10 16 06 F6 | 	mov	arg03, #16
1b568     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
1b56c                 | '     cursor_y:=st_lines-1
1b56c     FD E4 05 F1 | 	add	objptr, #253
1b570     F2 1E 02 FB | 	rdlong	local01, objptr
1b574     01 1E 86 F1 | 	sub	local01, #1
1b578     C3 E4 85 F1 | 	sub	objptr, #195
1b57c     F2 1E 42 FC | 	wrbyte	local01, objptr
1b580     3A E4 85 F1 | 	sub	objptr, #58
1b584                 | LR__2142
1b584                 | LR__2143
1b584                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1b584     38 E4 05 F1 | 	add	objptr, #56
1b588     F2 14 E2 FA | 	rdword	arg02, objptr
1b58c     02 14 66 F0 | 	shl	arg02, #2
1b590     02 E4 05 F1 | 	add	objptr, #2
1b594     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b598     3A E4 85 F1 | 	sub	objptr, #58
1b59c     04 16 66 F0 | 	shl	arg03, #4
1b5a0     11 12 06 F6 | 	mov	arg01, #17
1b5a4     F4 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1b5a8     A7 F0 03 F6 | 	mov	ptra, fp
1b5ac     B2 00 A0 FD | 	call	#popregs_
1b5b0                 | _hg010b_spin2_putchar_ret
1b5b0     2D 00 64 FD | 	ret
1b5b4                 | 
1b5b4                 | '     
1b5b4                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1b5b4                 | ' 
1b5b4                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1b5b4                 | _hg010b_spin2_putchar2
1b5b4     01 4A 05 F6 | 	mov	COUNT_, #1
1b5b8     A8 00 A0 FD | 	call	#pushregs_
1b5bc                 | ' 
1b5bc                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1b5bc     38 E4 05 F1 | 	add	objptr, #56
1b5c0     F2 1E E2 FA | 	rdword	local01, objptr
1b5c4     02 E4 05 F1 | 	add	objptr, #2
1b5c8     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b5cc     04 14 66 F0 | 	shl	arg02, #4
1b5d0     09 17 02 F6 | 	mov	arg03, arg01
1b5d4     03 E4 05 F1 | 	add	objptr, #3
1b5d8     F2 18 02 FB | 	rdlong	arg04, objptr
1b5dc     04 E4 05 F1 | 	add	objptr, #4
1b5e0     F2 1A 02 FB | 	rdlong	arg05, objptr
1b5e4     41 E4 85 F1 | 	sub	objptr, #65
1b5e8     0F 13 02 F6 | 	mov	arg01, local01
1b5ec     C0 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
1b5f0                 | ' cursor_x+=2
1b5f0     38 E4 05 F1 | 	add	objptr, #56
1b5f4     F2 1E E2 FA | 	rdword	local01, objptr
1b5f8     02 1E 06 F1 | 	add	local01, #2
1b5fc     F2 1E 52 FC | 	wrword	local01, objptr
1b600                 | ' if cursor_x>=256
1b600     F2 1E E2 FA | 	rdword	local01, objptr
1b604     38 E4 85 F1 | 	sub	objptr, #56
1b608     00 1F 56 F2 | 	cmps	local01, #256 wc
1b60c     64 00 90 CD |  if_b	jmp	#LR__2151
1b610                 | '   cursor_x:=0
1b610     38 E4 05 F1 | 	add	objptr, #56
1b614     F2 00 58 FC | 	wrword	#0, objptr
1b618                 | '   cursor_y+=1
1b618     02 E4 05 F1 | 	add	objptr, #2
1b61c     F2 1E C2 FA | 	rdbyte	local01, objptr
1b620     01 1E 06 F1 | 	add	local01, #1
1b624     F2 1E 42 FC | 	wrbyte	local01, objptr
1b628                 | '   if cursor_y>st_lines-1
1b628     C3 E4 05 F1 | 	add	objptr, #195
1b62c     F2 1E 02 FB | 	rdlong	local01, objptr
1b630     01 1E 86 F1 | 	sub	local01, #1
1b634     C3 E4 85 F1 | 	sub	objptr, #195
1b638     F2 1A C2 FA | 	rdbyte	arg05, objptr
1b63c     3A E4 85 F1 | 	sub	objptr, #58
1b640     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
1b644     2C 00 90 ED |  if_be	jmp	#LR__2150
1b648                 | '     scrollup()
1b648     00 12 06 F6 | 	mov	arg01, #0
1b64c     01 00 00 FF 
1b650     40 14 06 F6 | 	mov	arg02, ##576
1b654     10 16 06 F6 | 	mov	arg03, #16
1b658     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
1b65c                 | '     cursor_y:=st_lines-1
1b65c     FD E4 05 F1 | 	add	objptr, #253
1b660     F2 1E 02 FB | 	rdlong	local01, objptr
1b664     01 1E 86 F1 | 	sub	local01, #1
1b668     C3 E4 85 F1 | 	sub	objptr, #195
1b66c     F2 1E 42 FC | 	wrbyte	local01, objptr
1b670     3A E4 85 F1 | 	sub	objptr, #58
1b674                 | LR__2150
1b674                 | LR__2151
1b674                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
1b674     38 E4 05 F1 | 	add	objptr, #56
1b678     F2 14 E2 FA | 	rdword	arg02, objptr
1b67c     02 14 66 F0 | 	shl	arg02, #2
1b680     02 E4 05 F1 | 	add	objptr, #2
1b684     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b688     3A E4 85 F1 | 	sub	objptr, #58
1b68c     04 16 66 F0 | 	shl	arg03, #4
1b690     11 12 06 F6 | 	mov	arg01, #17
1b694     04 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1b698     A7 F0 03 F6 | 	mov	ptra, fp
1b69c     B2 00 A0 FD | 	call	#popregs_
1b6a0                 | _hg010b_spin2_putchar2_ret
1b6a0     2D 00 64 FD | 	ret
1b6a4                 | 
1b6a4                 | ' ''--------- Output a string at the cursor position, move the cursor  
1b6a4                 | ' 
1b6a4                 | ' pub write(text) | iii,c,ncx,ncy
1b6a4                 | _hg010b_spin2_write
1b6a4     04 4A 05 F6 | 	mov	COUNT_, #4
1b6a8     A8 00 A0 FD | 	call	#pushregs_
1b6ac     09 1F 02 F6 | 	mov	local01, arg01
1b6b0                 | ' 
1b6b0                 | ' repeat iii from 0 to strsize(text)-1
1b6b0     00 20 06 F6 | 	mov	local02, #0
1b6b4     0F 13 02 F6 | 	mov	arg01, local01
1b6b8     09 23 02 F6 | 	mov	local03, arg01
1b6bc     97 06 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
1b6c0                 | LR__2160
1b6c0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1b6c4     01 22 06 51 |  if_ne	add	local03, #1
1b6c8     F4 FF 9F 5D |  if_ne	jmp	#LR__2160
1b6cc                 | LR__2161
1b6cc     09 23 82 F1 | 	sub	local03, arg01
1b6d0     01 22 86 F1 | 	sub	local03, #1
1b6d4     00 22 56 F2 | 	cmps	local03, #0 wc
1b6d8     01 24 86 F6 | 	negc	local04, #1
1b6dc     12 23 02 F1 | 	add	local03, local04
1b6e0                 | LR__2162
1b6e0                 | '   putchar2(byte[text+iii])
1b6e0     0F 13 02 F6 | 	mov	arg01, local01
1b6e4     10 13 02 F1 | 	add	arg01, local02
1b6e8     09 13 C2 FA | 	rdbyte	arg01, arg01
1b6ec     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
1b6f0     12 21 02 F1 | 	add	local02, local04
1b6f4     11 21 0A F2 | 	cmp	local02, local03 wz
1b6f8     E4 FF 9F 5D |  if_ne	jmp	#LR__2162
1b6fc     A7 F0 03 F6 | 	mov	ptra, fp
1b700     B2 00 A0 FD | 	call	#popregs_
1b704                 | _hg010b_spin2_write_ret
1b704     2D 00 64 FD | 	ret
1b708                 | 
1b708                 | ' 
1b708                 | ' ''-----------  Scroll the screen one line up
1b708                 | ' 
1b708                 | ' pub scrollup(start=0, end=576 , amount=16) | i
1b708                 | _hg010b_spin2_scrollup
1b708     01 4A 05 F6 | 	mov	COUNT_, #1
1b70c     A8 00 A0 FD | 	call	#pushregs_
1b710                 | ' 	
1b710                 | ' repeat i from 0 to 559 
1b710     00 1E 06 F6 | 	mov	local01, #0
1b714                 | LR__2170
1b714     F5 E4 05 F1 | 	add	objptr, #245
1b718     F2 18 02 FB | 	rdlong	arg04, objptr
1b71c     1C E4 85 F1 | 	sub	objptr, #28
1b720     F2 14 02 FB | 	rdlong	arg02, objptr
1b724     0F 13 02 F6 | 	mov	arg01, local01
1b728     10 12 06 F1 | 	add	arg01, #16
1b72c     02 12 66 F0 | 	shl	arg01, #2
1b730     14 E4 05 F1 | 	add	objptr, #20
1b734     F2 16 02 FB | 	rdlong	arg03, objptr
1b738     0B 13 02 FD | 	qmul	arg01, arg03
1b73c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1b73c     F6 03 00 FF 
1b740     00 12 06 F6 | 	mov	arg01, ##519168
1b744     0C 13 82 F1 | 	sub	arg01, arg04
1b748     02 16 66 F0 | 	shl	arg03, #2
1b74c     0A 00 00 FF 
1b750     D3 E5 05 F1 | 	add	objptr, ##5587
1b754     18 18 62 FD | 	getqx	arg04
1b758     0C 15 02 F1 | 	add	arg02, arg04
1b75c     7C 04 B0 FD | 	call	#_psram_spin2_read1
1b760     0A 00 00 FF 
1b764     CB E5 85 F1 | 	sub	objptr, ##5579
1b768     F2 18 02 FB | 	rdlong	arg04, objptr
1b76c     1C E4 85 F1 | 	sub	objptr, #28
1b770     F2 14 02 FB | 	rdlong	arg02, objptr
1b774     0F 13 02 F6 | 	mov	arg01, local01
1b778     02 12 66 F0 | 	shl	arg01, #2
1b77c     14 E4 05 F1 | 	add	objptr, #20
1b780     F2 16 02 FB | 	rdlong	arg03, objptr
1b784     0B 13 02 FD | 	qmul	arg01, arg03
1b788                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1b788     F6 03 00 FF 
1b78c     00 12 06 F6 | 	mov	arg01, ##519168
1b790     0C 13 82 F1 | 	sub	arg01, arg04
1b794     02 16 66 F0 | 	shl	arg03, #2
1b798     0A 00 00 FF 
1b79c     D3 E5 05 F1 | 	add	objptr, ##5587
1b7a0     18 18 62 FD | 	getqx	arg04
1b7a4     0C 15 02 F1 | 	add	arg02, arg04
1b7a8     CC 04 B0 FD | 	call	#_psram_spin2_write
1b7ac     0B 00 00 FF 
1b7b0     C0 E4 85 F1 | 	sub	objptr, ##5824
1b7b4     01 1E 06 F1 | 	add	local01, #1
1b7b8     01 00 00 FF 
1b7bc     30 1E 56 F2 | 	cmps	local01, ##560 wc
1b7c0     50 FF 9F CD |  if_b	jmp	#LR__2170
1b7c4                 | ' 
1b7c4                 | ' repeat i from 560 to 575
1b7c4     01 00 00 FF 
1b7c8     30 1E 06 F6 | 	mov	local01, ##560
1b7cc                 | LR__2171
1b7cc                 | '    fastline(0,1023,i,write_background)   
1b7cc     41 E4 05 F1 | 	add	objptr, #65
1b7d0     F2 18 02 FB | 	rdlong	arg04, objptr
1b7d4     41 E4 85 F1 | 	sub	objptr, #65
1b7d8     00 12 06 F6 | 	mov	arg01, #0
1b7dc     09 14 CE F9 | 	bmask	arg02, #9
1b7e0     0F 17 02 F6 | 	mov	arg03, local01
1b7e4     00 F1 BF FD | 	call	#_hg010b_spin2_fastline
1b7e8     01 1E 06 F1 | 	add	local01, #1
1b7ec     01 00 00 FF 
1b7f0     40 1E 16 F2 | 	cmp	local01, ##576 wc
1b7f4     D4 FF 9F CD |  if_b	jmp	#LR__2171
1b7f8     A7 F0 03 F6 | 	mov	ptra, fp
1b7fc     B2 00 A0 FD | 	call	#popregs_
1b800                 | _hg010b_spin2_scrollup_ret
1b800     2D 00 64 FD | 	ret
1b804                 | 
1b804                 | ' 
1b804                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1b804                 | ' 
1b804                 | ' pub crlf()
1b804                 | _hg010b_spin2_crlf
1b804                 | ' 
1b804                 | ' cursor_x:=leading_spaces*2
1b804     01 00 00 FF 
1b808     B2 E4 05 F1 | 	add	objptr, ##690
1b80c     F2 16 02 FB | 	rdlong	arg03, objptr
1b810     01 16 66 F0 | 	shl	arg03, #1
1b814     01 00 00 FF 
1b818     7A E4 85 F1 | 	sub	objptr, ##634
1b81c     F2 16 52 FC | 	wrword	arg03, objptr
1b820                 | ' cursor_y+=1
1b820     02 E4 05 F1 | 	add	objptr, #2
1b824     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b828     01 16 06 F1 | 	add	arg03, #1
1b82c     F2 16 42 FC | 	wrbyte	arg03, objptr
1b830                 | ' if cursor_y>st_lines-1
1b830     C3 E4 05 F1 | 	add	objptr, #195
1b834     F2 16 02 FB | 	rdlong	arg03, objptr
1b838     01 16 86 F1 | 	sub	arg03, #1
1b83c     C3 E4 85 F1 | 	sub	objptr, #195
1b840     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b844     3A E4 85 F1 | 	sub	objptr, #58
1b848     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1b84c     2C 00 90 ED |  if_be	jmp	#LR__2180
1b850                 | '   scrollup()
1b850     00 12 06 F6 | 	mov	arg01, #0
1b854     01 00 00 FF 
1b858     40 14 06 F6 | 	mov	arg02, ##576
1b85c     10 16 06 F6 | 	mov	arg03, #16
1b860     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
1b864                 | '   cursor_y:=st_lines-1
1b864     FD E4 05 F1 | 	add	objptr, #253
1b868     F2 16 02 FB | 	rdlong	arg03, objptr
1b86c     01 16 86 F1 | 	sub	arg03, #1
1b870     C3 E4 85 F1 | 	sub	objptr, #195
1b874     F2 16 42 FC | 	wrbyte	arg03, objptr
1b878     3A E4 85 F1 | 	sub	objptr, #58
1b87c                 | LR__2180
1b87c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
1b87c     38 E4 05 F1 | 	add	objptr, #56
1b880     F2 14 E2 FA | 	rdword	arg02, objptr
1b884     02 14 66 F0 | 	shl	arg02, #2
1b888     02 E4 05 F1 | 	add	objptr, #2
1b88c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b890     3A E4 85 F1 | 	sub	objptr, #58
1b894     04 16 66 F0 | 	shl	arg03, #4
1b898     11 12 06 F6 | 	mov	arg01, #17
1b89c     FC ED BF FD | 	call	#_hg010b_spin2_setspritepos
1b8a0                 | _hg010b_spin2_crlf_ret
1b8a0     2D 00 64 FD | 	ret
1b8a4                 | 
1b8a4                 | ' 
1b8a4                 | ' 
1b8a4                 | ' '*************************************************************************
1b8a4                 | ' '                                                                        *
1b8a4                 | ' '  Conversions                                                           *
1b8a4                 | ' '                                                                        *
1b8a4                 | ' '*************************************************************************
1b8a4                 | ' 
1b8a4                 | ' ''---------- Convert a integer to dec string, return a pointer
1b8a4                 | ' 
1b8a4                 | ' pub inttostr(i):result |q,pos,k,j
1b8a4                 | _hg010b_spin2_inttostr
1b8a4     03 4A 05 F6 | 	mov	COUNT_, #3
1b8a8     A8 00 A0 FD | 	call	#pushregs_
1b8ac     09 1F 0A F6 | 	mov	local01, arg01 wz
1b8b0                 | ' 
1b8b0                 | ' j:=i
1b8b0                 | ' pos:=10
1b8b0     0A 20 06 F6 | 	mov	local02, #10
1b8b4                 | ' k:=0
1b8b4     00 22 06 F6 | 	mov	local03, #0
1b8b8                 | ' 
1b8b8                 | ' if (j==0)
1b8b8     18 00 90 5D |  if_ne	jmp	#LR__2190
1b8bc                 | '   n_string[0]:=48
1b8bc     49 E4 05 F1 | 	add	objptr, #73
1b8c0     F2 60 48 FC | 	wrbyte	#48, objptr
1b8c4                 | '   n_string[1]:=0
1b8c4     01 E4 05 F1 | 	add	objptr, #1
1b8c8     F2 00 48 FC | 	wrbyte	#0, objptr
1b8cc     4A E4 85 F1 | 	sub	objptr, #74
1b8d0     C4 00 90 FD | 	jmp	#LR__2197
1b8d4                 | LR__2190
1b8d4                 | ' 
1b8d4                 | ' else
1b8d4                 | '   if (j<0)
1b8d4     0F 1F 52 F6 | 	abs	local01, local01 wc
1b8d8                 | '     j:=0-j
1b8d8                 | '     k:=45
1b8d8     2D 22 06 C6 |  if_b	mov	local03, #45
1b8dc                 | ' 
1b8dc                 | '   n_string[11]:=0
1b8dc     54 E4 05 F1 | 	add	objptr, #84
1b8e0     F2 00 48 FC | 	wrbyte	#0, objptr
1b8e4     54 E4 85 F1 | 	sub	objptr, #84
1b8e8     97 24 48 FB | 	callpa	#(@LR__2192-@LR__2191)>>2,fcache_load_ptr_
1b8ec                 | '   repeat while (pos>-1)
1b8ec                 | LR__2191
1b8ec     00 20 56 F2 | 	cmps	local02, #0 wc
1b8f0     40 00 90 CD |  if_b	jmp	#LR__2193
1b8f4     0F FB 51 F6 | 	abs	result1, local01 wc
1b8f8     0A FA 15 FD | 	qdiv	result1, #10
1b8fc                 | '     q:=j//10
1b8fc     19 FA 61 FD | 	getqy	result1
1b900     FD FA 81 F6 | 	negc	result1, result1
1b904     0F 1F 52 F6 | 	abs	local01, local01 wc
1b908     0A 1E 16 FD | 	qdiv	local01, #10
1b90c                 | '     q:=48+q
1b90c     30 FA 05 F1 | 	add	result1, #48
1b910                 | '     n_string[pos]:=q
1b910     10 1F 02 F6 | 	mov	local01, local02
1b914     49 E4 05 F1 | 	add	objptr, #73
1b918     F2 1E 02 F1 | 	add	local01, objptr
1b91c     0F FB 41 FC | 	wrbyte	result1, local01
1b920                 | '     j:=j/10
1b920     49 E4 85 F1 | 	sub	objptr, #73
1b924                 | '     pos-=1
1b924     01 20 86 F1 | 	sub	local02, #1
1b928     18 1E 62 FD | 	getqx	local01
1b92c     0F 1F 82 F6 | 	negc	local01, local01
1b930     B8 FF 9F FD | 	jmp	#LR__2191
1b934                 | LR__2192
1b934                 | LR__2193
1b934                 | '   repeat while n_string[0]==48
1b934                 | LR__2194
1b934     49 E4 05 F1 | 	add	objptr, #73
1b938     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b93c     49 E4 85 F1 | 	sub	objptr, #73
1b940     30 16 0E F2 | 	cmp	arg03, #48 wz
1b944     20 00 90 5D |  if_ne	jmp	#LR__2195
1b948                 | '     bytemove(@n_string,@n_string+1,12)
1b948     49 E4 05 F1 | 	add	objptr, #73
1b94c     F2 12 02 F6 | 	mov	arg01, objptr
1b950     F2 14 02 F6 | 	mov	arg02, objptr
1b954     49 E4 85 F1 | 	sub	objptr, #73
1b958     01 14 06 F1 | 	add	arg02, #1
1b95c     0C 16 06 F6 | 	mov	arg03, #12
1b960     9C 0D B0 FD | 	call	#__system____builtin_memmove
1b964     CC FF 9F FD | 	jmp	#LR__2194
1b968                 | LR__2195
1b968                 | ' 
1b968                 | '   if k==45
1b968     2D 22 0E F2 | 	cmp	local03, #45 wz
1b96c     28 00 90 5D |  if_ne	jmp	#LR__2196
1b970                 | '      bytemove(@n_string+1,@n_string,12)
1b970     49 E4 05 F1 | 	add	objptr, #73
1b974     F2 12 02 F6 | 	mov	arg01, objptr
1b978     01 12 06 F1 | 	add	arg01, #1
1b97c     F2 14 02 F6 | 	mov	arg02, objptr
1b980     49 E4 85 F1 | 	sub	objptr, #73
1b984     0C 16 06 F6 | 	mov	arg03, #12
1b988     74 0D B0 FD | 	call	#__system____builtin_memmove
1b98c                 | '      n_string[0]:=k
1b98c     49 E4 05 F1 | 	add	objptr, #73
1b990     F2 22 42 FC | 	wrbyte	local03, objptr
1b994     49 E4 85 F1 | 	sub	objptr, #73
1b998                 | LR__2196
1b998                 | LR__2197
1b998                 | ' 
1b998                 | ' q:=@n_string
1b998     49 E4 05 F1 | 	add	objptr, #73
1b99c     F2 FA 01 F6 | 	mov	result1, objptr
1b9a0     49 E4 85 F1 | 	sub	objptr, #73
1b9a4                 | ' return q
1b9a4     A7 F0 03 F6 | 	mov	ptra, fp
1b9a8     B2 00 A0 FD | 	call	#popregs_
1b9ac                 | _hg010b_spin2_inttostr_ret
1b9ac     2D 00 64 FD | 	ret
1b9b0                 | 
1b9b0                 | ' 
1b9b0                 | ' '..............................................................................
1b9b0                 | ' 
1b9b0                 | ' {{
1b9b0                 | ' }}
1b9b0                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1b9b0                 | _psram_spin2_startx
1b9b0     04 4A 05 F6 | 	mov	COUNT_, #4
1b9b4     A8 00 A0 FD | 	call	#pushregs_
1b9b8     09 1F 02 F6 | 	mov	local01, arg01
1b9bc     0B 21 02 F6 | 	mov	local02, arg03
1b9c0     0C 23 02 F6 | 	mov	local03, arg04
1b9c4                 | '     stop() ' restart driver if required
1b9c4     54 01 B0 FD | 	call	#_psram_spin2_stop
1b9c8     00 1E 0E F2 | 	cmp	local01, #0 wz
1b9cc     14 1E 06 AB |  if_e	rdlong	local01, #20
1b9d0     0F 15 52 F6 | 	abs	arg02, local01 wc
1b9d4     A1 07 00 FF 
1b9d8     40 14 16 FD | 	qdiv	arg02, ##1000000
1b9dc                 | ' 
1b9dc                 | '     ' use current frequency if none specified
1b9dc                 | ' 
1b9dc                 | '     if freq == 0 
1b9dc                 | '         freq := clkfreq 
1b9dc                 | ' 
1b9dc                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1b9dc                 | ' 
1b9dc                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1b9dc                 | '     if burst < 0
1b9dc                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1b9dc     18 14 62 FD | 	getqx	arg02
1b9e0     0A 19 82 F6 | 	negc	arg04, arg02
1b9e4     03 18 66 F0 | 	shl	arg04, #3
1b9e8     84 18 86 F1 | 	sub	arg04, #132
1b9ec     04 18 46 F0 | 	shr	arg04, #4
1b9f0     04 18 66 F0 | 	shl	arg04, #4
1b9f4     00 18 56 F2 | 	cmps	arg04, #0 wc
1b9f8     0E FA 65 C6 |  if_b	neg	result1, #14
1b9fc     10 01 90 CD |  if_b	jmp	#LR__2203
1ba00                 | ' 
1ba00                 | '     ' compute the input delay
1ba00                 | ' 
1ba00                 | '     if delay <= 0
1ba00     01 20 56 F2 | 	cmps	local02, #1 wc
1ba04     10 00 90 3D |  if_ae	jmp	#LR__2200
1ba08                 | '         delay := lookupDelay(freq)
1ba08     0F 13 02 F6 | 	mov	arg01, local01
1ba0c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1ba10     FD 20 02 F6 | 	mov	local02, result1
1ba14     04 00 90 FD | 	jmp	#LR__2201
1ba18                 | LR__2200
1ba18                 | '     else
1ba18                 | '         delay <#= $f ' limit to 15
1ba18     0F 20 66 F3 | 	fles	local02, #15
1ba1c                 | LR__2201
1ba1c                 | ' 
1ba1c                 | '     ' create our lock
1ba1c                 | ' 
1ba1c                 | '     driverlock := LOCKNEW()  
1ba1c     00 FA 05 F6 | 	mov	result1, #0
1ba20     04 FA 61 FD | 	locknew	result1
1ba24     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1ba28     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1ba2c                 | '     if driverlock == -1
1ba2c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ba30     FF FF 7F FF 
1ba34     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1ba38                 | '         return ERR_NO_LOCK
1ba38     1A FA 65 A6 |  if_e	neg	result1, #26
1ba3c     D0 00 90 AD |  if_e	jmp	#LR__2203
1ba40                 | ' 
1ba40                 | '     ' patch in the proper data and HUB addresses to the startup structure
1ba40                 | ' 
1ba40                 | '     long[@startupData][0]:=clkfreq
1ba40     14 1E 06 FB | 	rdlong	local01, #20
1ba44     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1ba48     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1ba4c                 | ' '    long[@startupData][1]:=$1000_0000
1ba4c                 | '     long[@startupData][5]:=@deviceData
1ba4c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1ba50     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ba54     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1ba58     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1ba5c     14 14 06 F1 | 	add	arg02, #20
1ba60     0A 1F 62 FC | 	wrlong	local01, arg02
1ba64                 | '     long[@startupData][6]:=@qosData
1ba64     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1ba68     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ba6c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1ba70     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1ba74     18 14 06 F1 | 	add	arg02, #24
1ba78     0A 1F 62 FC | 	wrlong	local01, arg02
1ba7c                 | '     long[@startupData][7]:=$7FF00
1ba7c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ba80     1C 1E 06 F1 | 	add	local01, #28
1ba84     FF 03 80 FF 
1ba88     0F 01 6A FC | 	wrlong	##524032, local01
1ba8c                 | ' 
1ba8c                 | '     ' setup some default bank and QoS parameter values
1ba8c                 | ' 
1ba8c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1ba8c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1ba90     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1ba94     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1ba98     10 18 66 F0 | 	shl	arg04, #16
1ba9c     0C 20 66 F0 | 	shl	local02, #12
1baa0     10 19 42 F5 | 	or	arg04, local02
1baa4     18 18 46 F5 | 	or	arg04, #24
1baa8     0C 15 02 F6 | 	mov	arg02, arg04
1baac     02 16 06 F6 | 	mov	arg03, #2
1bab0     A0 00 A0 FD | 	call	#\builtin_longfill_
1bab4                 | '     longfill(@qosData, $FFFF0000, 8)
1bab4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1bab8     07 16 06 F6 | 	mov	arg03, #7
1babc     28 16 62 FD | 	setq	arg03
1bac0     80 FF FF FF 
1bac4     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1bac8                 | ' 
1bac8                 | '     ' get the address of the PSRAM memory driver so we can start it
1bac8                 | ' 
1bac8                 | '     driverAddr:= driver.getDriverAddr()
1bac8                 | '     return @driver_start
1bac8     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1bacc     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1bad0     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1bad4                 | ' 
1bad4                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1bad4                 | ' 
1bad4                 | '     if desiredcog < 0
1bad4     00 22 56 F2 | 	cmps	local03, #0 wc
1bad8                 | '         desiredcog := NEWCOG
1bad8     10 22 06 C6 |  if_b	mov	local03, #16
1badc                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1badc     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1bae0     11 25 02 F6 | 	mov	local04, local03
1bae4     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1bae8     0A 25 F2 FC | 	coginit	local04, arg02 wc
1baec     01 24 66 C6 |  if_b	neg	local04, #1
1baf0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1baf4     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1baf8                 | '     repeat until long[@startupData] == 0 
1baf8     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1bafc                 | LR__2202
1bafc     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1bb00     F8 FF 9F 5D |  if_ne	jmp	#LR__2202
1bb04                 | ' 
1bb04                 | '     return drivercog
1bb04     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1bb08     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1bb0c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1bb10                 | LR__2203
1bb10     A7 F0 03 F6 | 	mov	ptra, fp
1bb14     B2 00 A0 FD | 	call	#popregs_
1bb18                 | _psram_spin2_startx_ret
1bb18     2D 00 64 FD | 	ret
1bb1c                 | 
1bb1c                 | ' 
1bb1c                 | ' '..............................................................................
1bb1c                 | ' 
1bb1c                 | ' {{
1bb1c                 | ' }}
1bb1c                 | ' PUB stop() : i
1bb1c                 | _psram_spin2_stop
1bb1c     00 00 06 F6 | 	mov	_var01, #0
1bb20                 | '     if drivercog <> -1
1bb20     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1bb24     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1bb28     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1bb2c     FF FF 7F FF 
1bb30     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1bb34     70 00 90 AD |  if_e	jmp	#LR__2213
1bb38                 | '         cogstop(drivercog) ' a rather brutal stop
1bb38     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1bb3c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1bb40     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1bb44     03 12 62 FD | 	cogstop	arg01
1bb48     97 26 48 FB | 	callpa	#(@LR__2212-@LR__2210)>>2,fcache_load_ptr_
1bb4c                 | '         repeat i from 0 to 7
1bb4c                 | LR__2210
1bb4c                 | '             if long[$7FF00][i*3] < 0
1bb4c     00 FB 01 F6 | 	mov	result1, _var01
1bb50     01 FA 65 F0 | 	shl	result1, #1
1bb54     00 FB 01 F1 | 	add	result1, _var01
1bb58     02 FA 65 F0 | 	shl	result1, #2
1bb5c     FF 03 00 FF 
1bb60     00 FB 05 F1 | 	add	result1, ##524032
1bb64     FD FA 01 FB | 	rdlong	result1, result1
1bb68     00 FA 55 F2 | 	cmps	result1, #0 wc
1bb6c     1C 00 90 3D |  if_ae	jmp	#LR__2211
1bb70                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1bb70     00 FB 01 F6 | 	mov	result1, _var01
1bb74     01 FA 65 F0 | 	shl	result1, #1
1bb78     00 FB 01 F1 | 	add	result1, _var01
1bb7c     02 FA 65 F0 | 	shl	result1, #2
1bb80     FF 03 00 FF 
1bb84     00 FB 05 F1 | 	add	result1, ##524032
1bb88     FD 20 68 FC | 	wrlong	#16, result1
1bb8c                 | LR__2211
1bb8c     01 00 06 F1 | 	add	_var01, #1
1bb90     08 00 56 F2 | 	cmps	_var01, #8 wc
1bb94     B4 FF 9F CD |  if_b	jmp	#LR__2210
1bb98                 | LR__2212
1bb98                 | '         drivercog := -1
1bb98     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1bb9c     FF FF FF FF 
1bba0     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1bba4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1bba8                 | LR__2213
1bba8                 | '     if driverlock <> -1
1bba8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1bbac     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1bbb0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1bbb4     FF FF 7F FF 
1bbb8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1bbbc                 | '         LOCKRET(driverlock)
1bbbc     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1bbc0     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1bbc4     05 12 62 5D |  if_ne	lockret	arg01
1bbc8                 | '         driverlock := -1
1bbc8     FF FF FF 5F 
1bbcc     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1bbd0     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1bbd4     00 FB 01 F6 | 	mov	result1, _var01
1bbd8                 | _psram_spin2_stop_ret
1bbd8     2D 00 64 FD | 	ret
1bbdc                 | 
1bbdc                 | ' 
1bbdc                 | ' '..............................................................................
1bbdc                 | ' 
1bbdc                 | ' {{
1bbdc                 | ' }}
1bbdc                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1bbdc                 | _psram_spin2_read1
1bbdc                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1bbdc                 | '     if drivercog == -1 ' driver must be running
1bbdc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1bbe0     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1bbe4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1bbe8     FF FF 7F FF 
1bbec     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1bbf0                 | '         return ERR_INACTIVE
1bbf0     0F FA 65 A6 |  if_e	neg	result1, #15
1bbf4     7C 00 90 AD |  if_e	jmp	#LR__2221
1bbf8                 | '     if count == 0 ' don't even bother reading
1bbf8     00 16 0E F2 | 	cmp	arg03, #0 wz
1bbfc                 | '         return 0
1bbfc     00 FA 05 A6 |  if_e	mov	result1, #0
1bc00     70 00 90 AD |  if_e	jmp	#LR__2221
1bc04                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1bc04     00 FA 05 F6 | 	mov	result1, #0
1bc08     01 FA 61 FD | 	cogid	result1
1bc0c     FD 00 02 F6 | 	mov	_var01, result1
1bc10     01 00 66 F0 | 	shl	_var01, #1
1bc14     FD 00 02 F1 | 	add	_var01, result1
1bc18     02 00 66 F0 | 	shl	_var01, #2
1bc1c     FF 03 00 FF 
1bc20     00 03 06 F6 | 	mov	_var02, ##524032
1bc24     00 03 02 F1 | 	add	_var02, _var01
1bc28                 | '     if long[mailbox] < 0
1bc28     01 01 02 FB | 	rdlong	_var01, _var02
1bc2c     00 00 56 F2 | 	cmps	_var01, #0 wc
1bc30                 | '         return ERR_MAILBOX_BUSY
1bc30     1C FA 65 C6 |  if_b	neg	result1, #28
1bc34     3C 00 90 CD |  if_b	jmp	#LR__2221
1bc38                 | '     long[mailbox][2] := count
1bc38     08 02 06 F1 | 	add	_var02, #8
1bc3c     01 17 62 FC | 	wrlong	arg03, _var02
1bc40                 | '     long[mailbox][1] := dstHubAddr
1bc40     04 02 86 F1 | 	sub	_var02, #4
1bc44     01 13 62 FC | 	wrlong	arg01, _var02
1bc48     04 02 86 F1 | 	sub	_var02, #4
1bc4c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1bc4c     0A 05 02 F6 | 	mov	_var03, arg02
1bc50     D9 04 06 F4 | 	bitl	_var03, #217
1bc54     00 00 58 FF 
1bc58     00 00 06 F6 | 	mov	_var01, ##-1342177280
1bc5c     02 01 02 F1 | 	add	_var01, _var03
1bc60     01 01 62 FC | 	wrlong	_var01, _var02
1bc64                 | '     repeat
1bc64                 | LR__2220
1bc64                 | '         result := long[mailbox]    
1bc64     01 05 02 FB | 	rdlong	_var03, _var02
1bc68     00 04 56 F2 | 	cmps	_var03, #0 wc
1bc6c     F4 FF 9F CD |  if_b	jmp	#LR__2220
1bc70                 | '     while result < 0   
1bc70                 | '     return -result                       'return success or error
1bc70     02 FB 61 F6 | 	neg	result1, _var03
1bc74                 | LR__2221
1bc74                 | _psram_spin2_read1_ret
1bc74     2D 00 64 FD | 	ret
1bc78                 | 
1bc78                 | ' 
1bc78                 | ' '..............................................................................
1bc78                 | ' 
1bc78                 | ' {{
1bc78                 | ' }}
1bc78                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1bc78                 | _psram_spin2_write
1bc78                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1bc78                 | '     if drivercog == -1 ' driver must be running
1bc78     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1bc7c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1bc80     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1bc84     FF FF 7F FF 
1bc88     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1bc8c                 | '         return ERR_INACTIVE
1bc8c     0F FA 65 A6 |  if_e	neg	result1, #15
1bc90     7C 00 90 AD |  if_e	jmp	#LR__2231
1bc94                 | '     if count == 0 ' don't even bother writing
1bc94     00 16 0E F2 | 	cmp	arg03, #0 wz
1bc98                 | '         return 0
1bc98     00 FA 05 A6 |  if_e	mov	result1, #0
1bc9c     70 00 90 AD |  if_e	jmp	#LR__2231
1bca0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1bca0     00 FA 05 F6 | 	mov	result1, #0
1bca4     01 FA 61 FD | 	cogid	result1
1bca8     FD 00 02 F6 | 	mov	_var01, result1
1bcac     01 00 66 F0 | 	shl	_var01, #1
1bcb0     FD 00 02 F1 | 	add	_var01, result1
1bcb4     02 00 66 F0 | 	shl	_var01, #2
1bcb8     FF 03 00 FF 
1bcbc     00 03 06 F6 | 	mov	_var02, ##524032
1bcc0     00 03 02 F1 | 	add	_var02, _var01
1bcc4                 | '     if long[mailbox] < 0
1bcc4     01 01 02 FB | 	rdlong	_var01, _var02
1bcc8     00 00 56 F2 | 	cmps	_var01, #0 wc
1bccc                 | '         return ERR_MAILBOX_BUSY
1bccc     1C FA 65 C6 |  if_b	neg	result1, #28
1bcd0     3C 00 90 CD |  if_b	jmp	#LR__2231
1bcd4                 | '     long[mailbox][2] := count
1bcd4     08 02 06 F1 | 	add	_var02, #8
1bcd8     01 17 62 FC | 	wrlong	arg03, _var02
1bcdc                 | '     long[mailbox][1] := srcHubAddr
1bcdc     04 02 86 F1 | 	sub	_var02, #4
1bce0     01 13 62 FC | 	wrlong	arg01, _var02
1bce4     04 02 86 F1 | 	sub	_var02, #4
1bce8                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1bce8     0A 05 02 F6 | 	mov	_var03, arg02
1bcec     D9 04 06 F4 | 	bitl	_var03, #217
1bcf0     00 00 78 FF 
1bcf4     00 00 06 F6 | 	mov	_var01, ##-268435456
1bcf8     02 01 02 F1 | 	add	_var01, _var03
1bcfc     01 01 62 FC | 	wrlong	_var01, _var02
1bd00                 | '     repeat
1bd00                 | LR__2230
1bd00                 | '         result := long[mailbox]    
1bd00     01 05 02 FB | 	rdlong	_var03, _var02
1bd04     00 04 56 F2 | 	cmps	_var03, #0 wc
1bd08     F4 FF 9F CD |  if_b	jmp	#LR__2230
1bd0c                 | '     while result < 0   
1bd0c                 | '     return -result                       'return success or error
1bd0c     02 FB 61 F6 | 	neg	result1, _var03
1bd10                 | LR__2231
1bd10                 | _psram_spin2_write_ret
1bd10     2D 00 64 FD | 	ret
1bd14                 | 
1bd14                 | ' 
1bd14                 | ' ' generalized fill
1bd14                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1bd14                 | _psram_spin2_fill
1bd14     09 01 02 F6 | 	mov	_var01, arg01
1bd18     0A 03 02 F6 | 	mov	_var02, arg02
1bd1c     0B 05 02 F6 | 	mov	_var03, arg03
1bd20     0D 07 02 F6 | 	mov	_var04, arg05
1bd24                 | '     case datasize 
1bd24     01 06 86 F1 | 	sub	_var04, #1
1bd28     04 06 26 F3 | 	fle	_var04, #4
1bd2c     30 06 62 FD | 	jmprel	_var04
1bd30                 | LR__2240
1bd30     10 00 90 FD | 	jmp	#LR__2241
1bd34     18 00 90 FD | 	jmp	#LR__2242
1bd38     2C 00 90 FD | 	jmp	#LR__2244
1bd3c     1C 00 90 FD | 	jmp	#LR__2243
1bd40     24 00 90 FD | 	jmp	#LR__2244
1bd44                 | LR__2241
1bd44                 | '         1: req := driver.R_WRITEBYTE
1bd44     00 00 60 FF 
1bd48     00 08 06 F6 | 	mov	_var05, ##-1073741824
1bd4c     20 00 90 FD | 	jmp	#LR__2245
1bd50                 | LR__2242
1bd50                 | '         2: req := driver.R_WRITEWORD
1bd50     00 00 68 FF 
1bd54     00 08 06 F6 | 	mov	_var05, ##-805306368
1bd58     14 00 90 FD | 	jmp	#LR__2245
1bd5c                 | LR__2243
1bd5c                 | '         4: req := driver.R_WRITELONG
1bd5c     00 00 70 FF 
1bd60     00 08 06 F6 | 	mov	_var05, ##-536870912
1bd64     08 00 90 FD | 	jmp	#LR__2245
1bd68                 | LR__2244
1bd68                 | '         other : return ERR_INVALID
1bd68     06 FA 65 F6 | 	neg	result1, #6
1bd6c     94 00 90 FD | 	jmp	#LR__2247
1bd70                 | LR__2245
1bd70                 | '     if count == 0   ' nothing to do
1bd70     00 04 0E F2 | 	cmp	_var03, #0 wz
1bd74                 | '         return 0
1bd74     00 FA 05 A6 |  if_e	mov	result1, #0
1bd78     88 00 90 AD |  if_e	jmp	#LR__2247
1bd7c                 | '     if drivercog == -1
1bd7c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1bd80     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1bd84     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1bd88     FF FF 7F FF 
1bd8c     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1bd90                 | '         return ERR_INACTIVE
1bd90     0F FA 65 A6 |  if_e	neg	result1, #15
1bd94     6C 00 90 AD |  if_e	jmp	#LR__2247
1bd98                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1bd98     00 FA 05 F6 | 	mov	result1, #0
1bd9c     01 FA 61 FD | 	cogid	result1
1bda0     FD 06 02 F6 | 	mov	_var04, result1
1bda4     01 06 66 F0 | 	shl	_var04, #1
1bda8     FD 06 02 F1 | 	add	_var04, result1
1bdac     02 06 66 F0 | 	shl	_var04, #2
1bdb0     FF 03 00 FF 
1bdb4     00 0B 06 F6 | 	mov	_var06, ##524032
1bdb8     03 0B 02 F1 | 	add	_var06, _var04
1bdbc                 | '     if long[mailbox] < 0
1bdbc     05 07 02 FB | 	rdlong	_var04, _var06
1bdc0     00 06 56 F2 | 	cmps	_var04, #0 wc
1bdc4                 | '         return ERR_MAILBOX_BUSY
1bdc4     1C FA 65 C6 |  if_b	neg	result1, #28
1bdc8     38 00 90 CD |  if_b	jmp	#LR__2247
1bdcc                 | '     long[mailbox][2] := count
1bdcc     08 0A 06 F1 | 	add	_var06, #8
1bdd0     05 05 62 FC | 	wrlong	_var03, _var06
1bdd4                 | '     long[mailbox][1] := pattern
1bdd4     04 0A 86 F1 | 	sub	_var06, #4
1bdd8     05 03 62 FC | 	wrlong	_var02, _var06
1bddc     04 0A 86 F1 | 	sub	_var06, #4
1bde0                 | '     long[mailbox] := req + (addr & $1ffffff)
1bde0     04 0D 02 F6 | 	mov	_var07, _var05
1bde4     00 0F 02 F6 | 	mov	_var08, _var01
1bde8     D9 0E 06 F4 | 	bitl	_var08, #217
1bdec     07 0D 02 F1 | 	add	_var07, _var08
1bdf0     05 0D 62 FC | 	wrlong	_var07, _var06
1bdf4                 | '     repeat
1bdf4                 | LR__2246
1bdf4                 | '         r := long[mailbox]
1bdf4     05 0F 02 FB | 	rdlong	_var08, _var06
1bdf8     00 0E 56 F2 | 	cmps	_var08, #0 wc
1bdfc     F4 FF 9F CD |  if_b	jmp	#LR__2246
1be00                 | '     while r < 0
1be00                 | '     return -r                  ' return 0 for success or negated error code
1be00     07 FB 61 F6 | 	neg	result1, _var08
1be04                 | LR__2247
1be04                 | _psram_spin2_fill_ret
1be04     2D 00 64 FD | 	ret
1be08                 | 
1be08                 | ' 
1be08                 | ' '..............................................................................
1be08                 | ' 
1be08                 | ' {{
1be08                 | ' }}
1be08                 | ' PUB setQos(cog, qos) : result | mailbox
1be08                 | _psram_spin2_setQos
1be08     09 01 02 F6 | 	mov	_var01, arg01
1be0c                 | '     if drivercog == -1 ' driver must be running
1be0c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1be10     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1be14     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1be18     FF FF 7F FF 
1be1c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1be20                 | '         return ERR_INACTIVE
1be20     0F FA 65 A6 |  if_e	neg	result1, #15
1be24     9C 00 90 AD |  if_e	jmp	#LR__2254
1be28                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1be28     00 00 56 F2 | 	cmps	_var01, #0 wc
1be2c     08 00 90 CD |  if_b	jmp	#LR__2250
1be30     08 00 56 F2 | 	cmps	_var01, #8 wc
1be34     08 00 90 CD |  if_b	jmp	#LR__2251
1be38                 | LR__2250
1be38                 | '         return ERR_INVALID
1be38     06 FA 65 F6 | 	neg	result1, #6
1be3c     84 00 90 FD | 	jmp	#LR__2254
1be40                 | LR__2251
1be40                 | '     long[@qosData][cog] := qos & !$1ff
1be40     FF 15 26 F5 | 	andn	arg02, #511
1be44     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1be48     02 00 66 F0 | 	shl	_var01, #2
1be4c     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1be50     00 15 62 FC | 	wrlong	arg02, _var01
1be54                 | '     mailbox := $7FF00 + drivercog*12
1be54     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1be58     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1be5c     02 07 02 F6 | 	mov	_var04, _var03
1be60     01 06 66 F0 | 	shl	_var04, #1
1be64     02 07 02 F1 | 	add	_var04, _var03
1be68     02 06 66 F0 | 	shl	_var04, #2
1be6c     FF 03 00 FF 
1be70     00 09 06 F6 | 	mov	_var05, ##524032
1be74     03 09 02 F1 | 	add	_var05, _var04
1be78                 | '     repeat until LOCKTRY(driverlock)
1be78     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1be7c                 | LR__2252
1be7c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1be80     06 12 72 FD | 	locktry	arg01 wc
1be84     F4 FF 9F 3D |  if_ae	jmp	#LR__2252
1be88     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1be8c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1be8c     00 06 06 F6 | 	mov	_var04, #0
1be90     01 06 62 FD | 	cogid	_var04
1be94     00 00 78 FF 
1be98     00 02 06 F6 | 	mov	_var02, ##-268435456
1be9c     03 03 02 F1 | 	add	_var02, _var04
1bea0     04 03 62 FC | 	wrlong	_var02, _var05
1bea4                 | '     repeat while long[mailbox] < 0
1bea4                 | LR__2253
1bea4     04 03 02 FB | 	rdlong	_var02, _var05
1bea8     00 02 56 F2 | 	cmps	_var02, #0 wc
1beac     F4 FF 9F CD |  if_b	jmp	#LR__2253
1beb0                 | '     LOCKREL(driverlock)
1beb0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1beb4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1beb8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1bebc     07 12 72 FD | 	lockrel	arg01 wc
1bec0     00 FA 05 F6 | 	mov	result1, #0
1bec4                 | LR__2254
1bec4                 | _psram_spin2_setQos_ret
1bec4     2D 00 64 FD | 	ret
1bec8                 | 
1bec8                 | ' 
1bec8                 | ' '..............................................................................
1bec8                 | ' 
1bec8                 | ' {{
1bec8                 | ' }}
1bec8                 | ' PRI lookupDelay(freq) : delay | profile
1bec8                 | _psram_spin2_lookupDelay
1bec8                 | '     profile := @delayTable
1bec8     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1becc     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1bed0                 | '     delay := long[profile][0]
1bed0     00 03 02 FB | 	rdlong	_var02, _var01
1bed4                 | '     repeat while long[profile][1] 
1bed4     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1bed8     97 16 48 FB | 	callpa	#(@LR__2261-@LR__2260)>>2,fcache_load_ptr_
1bedc                 | LR__2260
1bedc     04 00 06 F1 | 	add	_var01, #4
1bee0     00 FB 09 FB | 	rdlong	result1, _var01 wz
1bee4     04 00 86 F1 | 	sub	_var01, #4
1bee8     1C 00 90 AD |  if_e	jmp	#LR__2262
1beec                 | '         if freq +< long[profile][1] 
1beec     04 00 06 F1 | 	add	_var01, #4
1bef0     00 FB 01 FB | 	rdlong	result1, _var01
1bef4     04 00 86 F1 | 	sub	_var01, #4
1bef8     FD 12 12 F2 | 	cmp	arg01, result1 wc
1befc                 | '             quit
1befc                 | '         profile += 4
1befc     04 00 06 31 |  if_ae	add	_var01, #4
1bf00                 | '         delay++
1bf00     01 02 06 31 |  if_ae	add	_var02, #1
1bf04     D4 FF 9F 3D |  if_ae	jmp	#LR__2260
1bf08                 | LR__2261
1bf08                 | LR__2262
1bf08     01 FB 01 F6 | 	mov	result1, _var02
1bf0c                 | _psram_spin2_lookupDelay_ret
1bf0c     2D 00 64 FD | 	ret
1bf10                 | 
1bf10                 | ' 
1bf10                 | ' PUB start() : r
1bf10                 | _usbnew_spin2_start
1bf10     00 00 06 F6 | 	mov	_var01, #0
1bf14                 | '   ifnot driver_cog
1bf14     15 00 00 FF 
1bf18     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1bf1c     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1bf20     15 00 00 FF 
1bf24     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1bf28     38 00 90 5D |  if_ne	jmp	#LR__2270
1bf2c                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1bf2c     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1bf30     10 00 06 F6 | 	mov	_var01, #16
1bf34     00 16 06 F6 | 	mov	arg03, #0
1bf38     28 16 62 FD | 	setq	arg03
1bf3c     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1bf40     01 00 66 C6 |  if_b	neg	_var01, #1
1bf44                 | '     if r >= 0
1bf44     00 00 56 F2 | 	cmps	_var01, #0 wc
1bf48                 | '       driver_cog := r+1
1bf48     00 03 02 36 |  if_ae	mov	_var02, _var01
1bf4c     01 02 06 31 |  if_ae	add	_var02, #1
1bf50     15 00 00 3F 
1bf54     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1bf58     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1bf5c     15 00 00 3F 
1bf60     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1bf64                 | LR__2270
1bf64     00 FB 01 F6 | 	mov	result1, _var01
1bf68                 | _usbnew_spin2_start_ret
1bf68     2D 00 64 FD | 	ret
1bf6c                 | 
1bf6c                 | '     '' (Always enabled)
1bf6c                 | ' 
1bf6c                 | ' '' Get current pressed state of a keyboard key
1bf6c                 | ' PUB keystate(key) : r | buf[2],tmp
1bf6c                 | _usbnew_spin2_keystate
1bf6c     00 04 06 F6 | 	mov	_var03, #0
1bf70                 | '   if key >= $E0 && key < $E8
1bf70     E0 12 56 F2 | 	cmps	arg01, #224 wc
1bf74     34 00 90 CD |  if_b	jmp	#LR__2280
1bf78     E8 12 56 F2 | 	cmps	arg01, #232 wc
1bf7c     2C 00 90 3D |  if_ae	jmp	#LR__2280
1bf80                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1bf80     00 FA 05 F6 | 	mov	result1, #0
1bf84     13 00 00 FF 
1bf88     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1bf8c     09 07 02 F6 | 	mov	_var04, arg01
1bf90     E0 06 86 F1 | 	sub	_var04, #224
1bf94     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1bf98     03 09 4A F0 | 	shr	_var05, _var04 wz
1bf9c     13 00 00 FF 
1bfa0     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1bfa4     01 FA 65 56 |  if_ne	neg	result1, #1
1bfa8     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1bfac                 | LR__2280
1bfac                 | '   else
1bfac                 | '     '' Do this in inline ASM to ensure atomicity
1bfac                 | '     tmp := @hkbd_report
1bfac     13 00 00 FF 
1bfb0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1bfb4     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1bfb8                 | '     org
1bfb8     13 00 00 FF 
1bfbc     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1bfc0     97 1E 48 FB | 	callpa	#(@LR__2282-@LR__2281)>>2,fcache_load_ptr_
1bfc4                 | LR__2281
1bfc4 000             | 	org	0
1bfc4 000 28 02 64 FD | 	setq	#1
1bfc8 001 04 01 02 FB | 	rdlong	_var01, _var05
1bfcc 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1bfd0 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1bfd4 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1bfd8 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bfdc 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1bfe0 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bfe4 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1bfe8 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bfec 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1bff0 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bff4 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1bff8 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bffc 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1c000 00f             | LR__2282
1c000                 | 	orgh
1c000     02 FB 01 F6 | 	mov	result1, _var03
1c004                 | _usbnew_spin2_keystate_ret
1c004     2D 00 64 FD | 	ret
1c008                 | 
1c008                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1c008                 | ' 
1c008                 | ' '' Return key event from buffer if there is one
1c008                 | ' PUB get_key() : r | tail
1c008                 | _usbnew_spin2_get_key
1c008                 | '   tail := keyq_tail
1c008     0F 00 00 FF 
1c00c     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1c010     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1c014                 | '   if keyq_head == tail
1c014     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1c018     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1c01c     0F 00 00 FF 
1c020     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1c024     00 03 0A F2 | 	cmp	_var02, _var01 wz
1c028                 | '     return 0 ' No event
1c028     00 FA 05 A6 |  if_e	mov	result1, #0
1c02c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1c030                 | '   r := keyq_data[tail]
1c030     00 03 02 F6 | 	mov	_var02, _var01
1c034     02 02 66 F0 | 	shl	_var02, #2
1c038     0F 00 00 FF 
1c03c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1c040     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1c044     01 FB 01 FB | 	rdlong	result1, _var02
1c048                 | '   if ++tail == KEYQUEUE_SIZE
1c048     01 00 06 F1 | 	add	_var01, #1
1c04c     80 00 0E F2 | 	cmp	_var01, #128 wz
1c050                 | '     tail := 0
1c050     00 00 06 A6 |  if_e	mov	_var01, #0
1c054                 | '   keyq_tail := tail
1c054     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1c058     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1c05c     0F 00 00 FF 
1c060     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1c064                 | _usbnew_spin2_get_key_ret
1c064     2D 00 64 FD | 	ret
1c068                 | 
1c068                 | ' 
1c068                 | ' '' Emulate mouse movement
1c068                 | ' PUB mouse_move(x,y)
1c068                 | _usbnew_spin2_mouse_move
1c068     02 4A 05 F6 | 	mov	COUNT_, #2
1c06c     A8 00 A0 FD | 	call	#pushregs_
1c070     09 1F 02 F6 | 	mov	local01, arg01
1c074     0A 21 02 F6 | 	mov	local02, arg02
1c078                 | '   mouse_lock := 1
1c078     14 00 00 FF 
1c07c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1c080     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1c084     14 00 00 FF 
1c088     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1c08c                 | '   waitus(2) ' hope driver is now done
1c08c     02 12 06 F6 | 	mov	arg01, #2
1c090     AC 0A B0 FD | 	call	#__system___waitus
1c094                 | '   mouse_xacc := x
1c094     14 00 00 FF 
1c098     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1c09c     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1c0a0                 | '   mouse_yacc := y
1c0a0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1c0a4     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1c0a8                 | '   if mouse_outptr
1c0a8     04 00 00 FF 
1c0ac     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1c0b0     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1c0b4     0F 00 00 FF 
1c0b8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1c0bc     24 00 90 AD |  if_e	jmp	#LR__2290
1c0c0                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1c0c0     10 20 66 F0 | 	shl	local02, #16
1c0c4     0F 1F 32 F9 | 	getword	local01, local01, #0
1c0c8     0F 21 42 F5 | 	or	local02, local01
1c0cc     0F 00 00 FF 
1c0d0     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1c0d4     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1c0d8     0F 00 00 FF 
1c0dc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1c0e0     0F 21 62 FC | 	wrlong	local02, local01
1c0e4                 | LR__2290
1c0e4                 | '   mouse_lock := 0
1c0e4     14 00 00 FF 
1c0e8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1c0ec     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1c0f0     14 00 00 FF 
1c0f4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1c0f8     A7 F0 03 F6 | 	mov	ptra, fp
1c0fc     B2 00 A0 FD | 	call	#popregs_
1c100                 | _usbnew_spin2_mouse_move_ret
1c100     2D 00 64 FD | 	ret
1c104                 | 
1c104                 | '     '' Set HAVE_HIDPAD to enable.
1c104                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1c104                 | ' 
1c104                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1c104                 | ' PUB hidpad_id(dev) : r
1c104                 | _usbnew_spin2_hidpad_id
1c104                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1c104     13 00 00 FF 
1c108     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1c10c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1c110     09 01 02 F6 | 	mov	_var01, arg01
1c114     03 00 66 F0 | 	shl	_var01, #3
1c118     09 01 82 F1 | 	sub	_var01, arg01
1c11c     02 00 66 F0 | 	shl	_var01, #2
1c120     00 FB 01 F1 | 	add	result1, _var01
1c124     FD FA 01 FB | 	rdlong	result1, result1
1c128     13 00 00 FF 
1c12c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1c130                 | _usbnew_spin2_hidpad_id_ret
1c130     2D 00 64 FD | 	ret
1c134                 | 
1c134                 | ' 
1c134                 | ' '' Get all button states for a device
1c134                 | ' PUB hidpad_buttons(dev) : r 
1c134                 | _usbnew_spin2_hidpad_buttons
1c134                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1c134     13 00 00 FF 
1c138     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1c13c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1c140     09 01 02 F6 | 	mov	_var01, arg01
1c144     03 00 66 F0 | 	shl	_var01, #3
1c148     09 01 82 F1 | 	sub	_var01, arg01
1c14c     02 00 66 F0 | 	shl	_var01, #2
1c150     00 FB 01 F1 | 	add	result1, _var01
1c154     14 FA 05 F1 | 	add	result1, #20
1c158     FD FA 01 FB | 	rdlong	result1, result1
1c15c     13 00 00 FF 
1c160     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1c164                 | _usbnew_spin2_hidpad_buttons_ret
1c164     2D 00 64 FD | 	ret
1c168                 | 
1c168                 | ' 
1c168                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1c168                 | ' PUB hidpad_axis(dev,axnum) : r
1c168                 | _usbnew_spin2_hidpad_axis
1c168                 | '   if axnum +>= 6
1c168     06 14 16 F2 | 	cmp	arg02, #6 wc
1c16c                 | '     return 0
1c16c     00 FA 05 36 |  if_ae	mov	result1, #0
1c170     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1c174                 | '   else 
1c174                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1c174     13 00 00 FF 
1c178     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1c17c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1c180     09 01 02 F6 | 	mov	_var01, arg01
1c184     03 00 66 F0 | 	shl	_var01, #3
1c188     09 01 82 F1 | 	sub	_var01, arg01
1c18c     02 00 66 F0 | 	shl	_var01, #2
1c190     00 FB 01 F1 | 	add	result1, _var01
1c194     04 00 06 F6 | 	mov	_var01, #4
1c198     0A 01 02 F1 | 	add	_var01, arg02
1c19c     01 00 66 F0 | 	shl	_var01, #1
1c1a0     FD 00 02 F1 | 	add	_var01, result1
1c1a4     00 FB E1 FA | 	rdword	result1, _var01
1c1a8     0F FA 65 F7 | 	signx	result1, #15
1c1ac     13 00 00 FF 
1c1b0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1c1b4                 | _usbnew_spin2_hidpad_axis_ret
1c1b4     2D 00 64 FD | 	ret
1c1b8                 | 
1c1b8                 | ' 
1c1b8                 | ' 
1c1b8                 | ' '--------------------------------------------------------------
1c1b8                 | ' '---------- Init the variables, start the cog. ----------------
1c1b8                 | ' '--------------------------------------------------------------
1c1b8                 | ' 
1c1b8                 | ' pub start(mbox,scope,cache) :cog,base | iii
1c1b8                 | _audio096_spin2_start
1c1b8     04 4A 05 F6 | 	mov	COUNT_, #4
1c1bc     A8 00 A0 FD | 	call	#pushregs_
1c1c0     09 1F 02 F6 | 	mov	local01, arg01
1c1c4                 | ' 
1c1c4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1c1c4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1c1c4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1c1c4                 | ' 
1c1c4                 | ' mailboxaddr:=mbox 
1c1c4     F2 1E 62 FC | 	wrlong	local01, objptr
1c1c8                 | ' scope_ptr:=scope
1c1c8     04 E4 05 F1 | 	add	objptr, #4
1c1cc     F2 14 62 FC | 	wrlong	arg02, objptr
1c1d0                 | ' cache_ptr:=cache
1c1d0     04 E4 05 F1 | 	add	objptr, #4
1c1d4     F2 16 62 FC | 	wrlong	arg03, objptr
1c1d8                 | ' base:=@channel1[0]
1c1d8     04 E4 05 F1 | 	add	objptr, #4
1c1dc     F2 20 02 F6 | 	mov	local02, objptr
1c1e0                 | ' 
1c1e0                 | ' repeat iii from 0 to 7
1c1e0     00 22 06 F6 | 	mov	local03, #0
1c1e4     02 00 00 FF 
1c1e8     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1c1ec     0C E4 85 F1 | 	sub	objptr, #12
1c1f0     97 B0 48 FB | 	callpa	#(@LR__2301-@LR__2300)>>2,fcache_load_ptr_
1c1f4                 | LR__2300
1c1f4                 | '   long[base+64*iii]:=0
1c1f4     10 1F 02 F6 | 	mov	local01, local02
1c1f8     11 FD 01 F6 | 	mov	result2, local03
1c1fc     06 FC 65 F0 | 	shl	result2, #6
1c200     FE 1E 02 F1 | 	add	local01, result2
1c204     0F 01 68 FC | 	wrlong	#0, local01
1c208                 | '   long[base+64*iii+4]:=0
1c208     10 1F 02 F6 | 	mov	local01, local02
1c20c     11 FD 01 F6 | 	mov	result2, local03
1c210     06 FC 65 F0 | 	shl	result2, #6
1c214     FE 1E 02 F1 | 	add	local01, result2
1c218     04 1E 06 F1 | 	add	local01, #4
1c21c     0F 01 68 FC | 	wrlong	#0, local01
1c220                 | '   long[base+64*iii+12]:=0
1c220     10 25 02 F6 | 	mov	local04, local02
1c224     11 1F 02 F6 | 	mov	local01, local03
1c228     06 1E 66 F0 | 	shl	local01, #6
1c22c     0F 25 02 F1 | 	add	local04, local01
1c230     0C 24 06 F1 | 	add	local04, #12
1c234     12 01 68 FC | 	wrlong	#0, local04
1c238                 | '   long[base+64*iii+16]:=2 
1c238     10 25 02 F6 | 	mov	local04, local02
1c23c     11 1F 02 F6 | 	mov	local01, local03
1c240     06 1E 66 F0 | 	shl	local01, #6
1c244     0F 25 02 F1 | 	add	local04, local01
1c248     10 24 06 F1 | 	add	local04, #16
1c24c     12 05 68 FC | 	wrlong	#2, local04
1c250                 | '   word[base+64*iii+20]:=0
1c250     10 25 02 F6 | 	mov	local04, local02
1c254     11 1F 02 F6 | 	mov	local01, local03
1c258     06 1E 66 F0 | 	shl	local01, #6
1c25c     0F 25 02 F1 | 	add	local04, local01
1c260     14 24 06 F1 | 	add	local04, #20
1c264     12 01 58 FC | 	wrword	#0, local04
1c268                 | '   word[base+64*iii+22]:=8192
1c268     10 25 02 F6 | 	mov	local04, local02
1c26c     11 1F 02 F6 | 	mov	local01, local03
1c270     06 1E 66 F0 | 	shl	local01, #6
1c274     0F 25 02 F1 | 	add	local04, local01
1c278     16 24 06 F1 | 	add	local04, #22
1c27c     10 00 80 FF 
1c280     12 01 58 FC | 	wrword	##8192, local04
1c284                 | '   word[base+64*iii+24]:=4000+2*iii
1c284     11 25 02 F6 | 	mov	local04, local03
1c288     01 24 66 F0 | 	shl	local04, #1
1c28c     07 00 00 FF 
1c290     A0 1F 06 F6 | 	mov	local01, ##4000
1c294     12 1F 02 F1 | 	add	local01, local04
1c298     10 25 02 F6 | 	mov	local04, local02
1c29c     11 FD 01 F6 | 	mov	result2, local03
1c2a0     06 FC 65 F0 | 	shl	result2, #6
1c2a4     FE 24 02 F1 | 	add	local04, result2
1c2a8     18 24 06 F1 | 	add	local04, #24
1c2ac     12 1F 52 FC | 	wrword	local01, local04
1c2b0                 | '   word[base+64*iii+26]:=2
1c2b0     10 25 02 F6 | 	mov	local04, local02
1c2b4     11 1F 02 F6 | 	mov	local01, local03
1c2b8     06 1E 66 F0 | 	shl	local01, #6
1c2bc     0F 25 02 F1 | 	add	local04, local01
1c2c0     1A 24 06 F1 | 	add	local04, #26
1c2c4     12 05 58 FC | 	wrword	#2, local04
1c2c8                 | '   long [base+64*iii+8]:=@null | $C0000000
1c2c8     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1c2cc     3E 1E 26 F4 | 	bith	local01, #62
1c2d0     10 25 02 F6 | 	mov	local04, local02
1c2d4     11 17 02 F6 | 	mov	arg03, local03
1c2d8     06 16 66 F0 | 	shl	arg03, #6
1c2dc     0B 25 02 F1 | 	add	local04, arg03
1c2e0     08 24 06 F1 | 	add	local04, #8
1c2e4     12 1F 62 FC | 	wrlong	local01, local04
1c2e8                 | '   long[base+64*iii+32]:=0
1c2e8     10 25 02 F6 | 	mov	local04, local02
1c2ec     11 1F 02 F6 | 	mov	local01, local03
1c2f0     06 1E 66 F0 | 	shl	local01, #6
1c2f4     0F 25 02 F1 | 	add	local04, local01
1c2f8     20 24 06 F1 | 	add	local04, #32
1c2fc     12 01 68 FC | 	wrlong	#0, local04
1c300                 | '   long[base+64*iii+36]:=0
1c300     10 25 02 F6 | 	mov	local04, local02
1c304     11 1F 02 F6 | 	mov	local01, local03
1c308     06 1E 66 F0 | 	shl	local01, #6
1c30c     0F 25 02 F1 | 	add	local04, local01
1c310     24 24 06 F1 | 	add	local04, #36
1c314     12 01 68 FC | 	wrlong	#0, local04
1c318                 | '   long[base+64*iii+40]:=0
1c318     10 25 02 F6 | 	mov	local04, local02
1c31c     11 1F 02 F6 | 	mov	local01, local03
1c320     06 1E 66 F0 | 	shl	local01, #6
1c324     0F 25 02 F1 | 	add	local04, local01
1c328     28 24 06 F1 | 	add	local04, #40
1c32c     12 01 68 FC | 	wrlong	#0, local04
1c330                 | '   long[base+64*iii+44]:=0
1c330     10 25 02 F6 | 	mov	local04, local02
1c334     11 1F 02 F6 | 	mov	local01, local03
1c338     06 1E 66 F0 | 	shl	local01, #6
1c33c     0F 25 02 F1 | 	add	local04, local01
1c340     2C 24 06 F1 | 	add	local04, #44
1c344     12 01 68 FC | 	wrlong	#0, local04
1c348     01 22 06 F1 | 	add	local03, #1
1c34c     08 22 56 F2 | 	cmps	local03, #8 wc
1c350     A0 FE 9F CD |  if_b	jmp	#LR__2300
1c354                 | LR__2301
1c354     02 00 00 FF 
1c358     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1c35c                 | '   
1c35c                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1c35c     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1c360     F2 16 02 F6 | 	mov	arg03, objptr
1c364     10 24 06 F6 | 	mov	local04, #16
1c368     28 16 62 FD | 	setq	arg03
1c36c     0A 25 F2 FC | 	coginit	local04, arg02 wc
1c370     01 24 66 C6 |  if_b	neg	local04, #1
1c374                 | ' waitms(100)
1c374     64 12 06 F6 | 	mov	arg01, #100
1c378     58 07 B0 FD | 	call	#__system___waitms
1c37c                 | ' return cog,base
1c37c     10 FD 01 F6 | 	mov	result2, local02
1c380     12 FB 01 F6 | 	mov	result1, local04
1c384     A7 F0 03 F6 | 	mov	ptra, fp
1c388     B2 00 A0 FD | 	call	#popregs_
1c38c                 | _audio096_spin2_start_ret
1c38c     2D 00 64 FD | 	ret
1c390                 | 
1c390                 | ' 
1c390                 | ' ' a simple play procedure to not poke everything. 
1c390                 | ' 
1c390                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1c390                 | _audio096_spin2_play
1c390     0C E4 05 F1 | 	add	objptr, #12
1c394     F2 00 02 F6 | 	mov	_var01, objptr
1c398     06 12 66 F0 | 	shl	arg01, #6
1c39c     09 01 02 F1 | 	add	_var01, arg01
1c3a0     00 13 02 F6 | 	mov	arg01, _var01
1c3a4     0C 12 06 F1 | 	add	arg01, #12
1c3a8     09 1B 62 FC | 	wrlong	arg05, arg01
1c3ac     00 1C 56 F2 | 	cmps	arg06, #0 wc
1c3b0     00 13 02 36 |  if_ae	mov	arg01, _var01
1c3b4     10 12 06 31 |  if_ae	add	arg01, #16
1c3b8     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1c3bc     02 1A 06 C1 |  if_b	add	arg05, #2
1c3c0     00 13 02 C6 |  if_b	mov	arg01, _var01
1c3c4     10 12 06 C1 |  if_b	add	arg01, #16
1c3c8     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1c3cc     0B 13 52 F6 | 	abs	arg01, arg03 wc
1c3d0     0B 0A 80 FF 
1c3d4     09 6D 18 FD | 	qdiv	##1316406, arg01
1c3d8                 | ' 
1c3d8                 | ' base2:=@channel1[0]+64*channel
1c3d8                 | ' 
1c3d8                 | ' 
1c3d8                 | ' long[base2+12]:= len
1c3d8                 | ' if loop >=0 
1c3d8                 | '   long[base2+16]:= loop
1c3d8     0C E4 85 F1 | 	sub	objptr, #12
1c3dc                 | ' else
1c3dc                 | '   long[base2+16]:= len+2
1c3dc                 | ' word[base2+20]:=vol
1c3dc     00 13 02 F6 | 	mov	arg01, _var01
1c3e0     14 12 06 F1 | 	add	arg01, #20
1c3e4     09 19 52 FC | 	wrword	arg04, arg01
1c3e8                 | ' word[base2+24]:= 1316406/splfreq 
1c3e8     00 19 02 F6 | 	mov	arg04, _var01
1c3ec     18 18 06 F1 | 	add	arg04, #24
1c3f0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1c3f0                 | ' long[base2+28]:=$40000000
1c3f0                 | ' long[base2+8]:=sample+$C0000000 
1c3f0     00 00 60 FF 
1c3f4     00 14 06 F1 | 	add	arg02, ##-1073741824
1c3f8     18 12 62 FD | 	getqx	arg01
1c3fc     09 13 82 F6 | 	negc	arg01, arg01
1c400     0C 13 52 FC | 	wrword	arg01, arg04
1c404     00 13 02 F6 | 	mov	arg01, _var01
1c408     1A 12 06 F1 | 	add	arg01, #26
1c40c     09 01 5A FC | 	wrword	#256, arg01
1c410     00 13 02 F6 | 	mov	arg01, _var01
1c414     1C 12 06 F1 | 	add	arg01, #28
1c418     00 00 A0 FF 
1c41c     09 01 68 FC | 	wrlong	##1073741824, arg01
1c420     08 00 06 F1 | 	add	_var01, #8
1c424     00 15 62 FC | 	wrlong	arg02, _var01
1c428                 | _audio096_spin2_play_ret
1c428     2D 00 64 FD | 	ret
1c42c                 | 
1c42c                 | ' 
1c42c                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1c42c                 | _audio096_spin2_play8
1c42c                 | ' 
1c42c                 | ' base2:=@channel1[0]+64*channel
1c42c     0C E4 05 F1 | 	add	objptr, #12
1c430     F2 00 02 F6 | 	mov	_var01, objptr
1c434     06 12 66 F0 | 	shl	arg01, #6
1c438     09 01 02 F1 | 	add	_var01, arg01
1c43c                 | ' long[base2]:=0
1c43c     00 01 68 FC | 	wrlong	#0, _var01
1c440                 | ' long[base2+8]:=sample+$40000000 
1c440     00 00 20 FF 
1c444     00 14 06 F1 | 	add	arg02, ##1073741824
1c448     00 13 02 F6 | 	mov	arg01, _var01
1c44c     08 12 06 F1 | 	add	arg01, #8
1c450     09 15 62 FC | 	wrlong	arg02, arg01
1c454                 | ' if loop>=0
1c454     00 1C 56 F2 | 	cmps	arg06, #0 wc
1c458     0C E4 85 F1 | 	sub	objptr, #12
1c45c     1C 00 90 CD |  if_b	jmp	#LR__2310
1c460                 | '   long[base2+12]:=loop
1c460     00 15 02 F6 | 	mov	arg02, _var01
1c464     0C 14 06 F1 | 	add	arg02, #12
1c468     0A 1D 62 FC | 	wrlong	arg06, arg02
1c46c                 | '   long[base2+16]:= len
1c46c     00 1D 02 F6 | 	mov	arg06, _var01
1c470     10 1C 06 F1 | 	add	arg06, #16
1c474     0E 1B 62 FC | 	wrlong	arg05, arg06
1c478     1C 00 90 FD | 	jmp	#LR__2311
1c47c                 | LR__2310
1c47c                 | ' else
1c47c                 | '   long[base2+12]:= len
1c47c     00 1D 02 F6 | 	mov	arg06, _var01
1c480     0C 1C 06 F1 | 	add	arg06, #12
1c484     0E 1B 62 FC | 	wrlong	arg05, arg06
1c488                 | '   long[base2+16]:= len+1
1c488     01 1A 06 F1 | 	add	arg05, #1
1c48c     00 13 02 F6 | 	mov	arg01, _var01
1c490     10 12 06 F1 | 	add	arg01, #16
1c494     09 1B 62 FC | 	wrlong	arg05, arg01
1c498                 | LR__2311
1c498     0B 17 52 F6 | 	abs	arg03, arg03 wc
1c49c     0B 0A 80 FF 
1c4a0     0B 6D 18 FD | 	qdiv	##1316406, arg03
1c4a4                 | ' word[base2+20]:=vol
1c4a4     00 17 02 F6 | 	mov	arg03, _var01
1c4a8     14 16 06 F1 | 	add	arg03, #20
1c4ac     0B 19 52 FC | 	wrword	arg04, arg03
1c4b0                 | ' word[base2+24]:= 1316406 /splfreq 
1c4b0     00 13 02 F6 | 	mov	arg01, _var01
1c4b4     18 12 06 F1 | 	add	arg01, #24
1c4b8                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1c4b8                 | ' long[base2+28]:=$40000000
1c4b8     18 18 62 FD | 	getqx	arg04
1c4bc     0C 19 82 F6 | 	negc	arg04, arg04
1c4c0     09 19 52 FC | 	wrword	arg04, arg01
1c4c4     00 19 02 F6 | 	mov	arg04, _var01
1c4c8     1A 18 06 F1 | 	add	arg04, #26
1c4cc     0C 01 5A FC | 	wrword	#256, arg04
1c4d0     1C 00 06 F1 | 	add	_var01, #28
1c4d4     00 00 A0 FF 
1c4d8     00 01 68 FC | 	wrlong	##1073741824, _var01
1c4dc                 | _audio096_spin2_play8_ret
1c4dc     2D 00 64 FD | 	ret
1c4e0                 | 
1c4e0                 | ' 
1c4e0                 | '     
1c4e0                 | ' pub stop(channel) 'silence it
1c4e0                 | _audio096_spin2_stop
1c4e0                 | ' 
1c4e0                 | ' word[@channel1[0]+64*channel+20]:=0
1c4e0     0C E4 05 F1 | 	add	objptr, #12
1c4e4     F2 00 02 F6 | 	mov	_var01, objptr
1c4e8     09 03 02 F6 | 	mov	_var02, arg01
1c4ec     06 02 66 F0 | 	shl	_var02, #6
1c4f0     01 01 02 F1 | 	add	_var01, _var02
1c4f4     14 00 06 F1 | 	add	_var01, #20
1c4f8     00 01 58 FC | 	wrword	#0, _var01
1c4fc                 | ' word[@channel1[0]+64*channel+20]:=0
1c4fc     F2 00 02 F6 | 	mov	_var01, objptr
1c500     06 12 66 F0 | 	shl	arg01, #6
1c504     09 01 02 F1 | 	add	_var01, arg01
1c508     14 00 06 F1 | 	add	_var01, #20
1c50c     00 01 58 FC | 	wrword	#0, _var01
1c510     0C E4 85 F1 | 	sub	objptr, #12
1c514                 | _audio096_spin2_stop_ret
1c514     2D 00 64 FD | 	ret
1c518                 | hubexit
1c518     81 00 80 FD | 	jmp	#cogexit
1c51c                 | 
1c51c                 | __system___setbaud
1c51c     14 64 06 FB | 	rdlong	muldiva_, #20
1c520     09 67 02 F6 | 	mov	muldivb_, arg01
1c524     BA 00 A0 FD | 	call	#divide_
1c528     97 06 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1c52c                 | LR__2320
1c52c     3E FA 9D FA | 	rdpin	result1, #62 wc
1c530     FE FC A1 F1 | 	subx	result2, result2
1c534     F4 FF 9F CD |  if_b	jmp	#LR__2320
1c538                 | LR__2321
1c538     40 7C 64 FD | 	dirl	#62
1c53c     40 7E 64 FD | 	dirl	#63
1c540     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1c544     10 66 66 F0 | 	shl	muldivb_, #16
1c548     07 14 06 F6 | 	mov	arg02, #7
1c54c     33 15 02 F1 | 	add	arg02, muldivb_
1c550     3E F8 0C FC | 	wrpin	#124, #62
1c554     3E 14 16 FC | 	wxpin	arg02, #62
1c558     3F 7C 0C FC | 	wrpin	#62, #63
1c55c     14 14 06 F1 | 	add	arg02, #20
1c560     3F 14 16 FC | 	wxpin	arg02, #63
1c564     41 7C 64 FD | 	dirh	#62
1c568     41 7E 64 FD | 	dirh	#63
1c56c                 | __system___setbaud_ret
1c56c     2D 00 64 FD | 	ret
1c570                 | 
1c570                 | __system___txraw
1c570     01 4A 05 F6 | 	mov	COUNT_, #1
1c574     A8 00 A0 FD | 	call	#pushregs_
1c578     09 1F 02 F6 | 	mov	local01, arg01
1c57c     97 06 48 FB | 	callpa	#(@LR__2331-@LR__2330)>>2,fcache_load_ptr_
1c580                 | LR__2330
1c580     3E FA 9D FA | 	rdpin	result1, #62 wc
1c584     FE FC A1 F1 | 	subx	result2, result2
1c588     F4 FF 9F CD |  if_b	jmp	#LR__2330
1c58c                 | LR__2331
1c58c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1c590     C2 01 00 AF 
1c594     00 12 06 A6 |  if_e	mov	arg01, ##230400
1c598     80 FF BF AD |  if_e	call	#__system___setbaud
1c59c     58 7C 64 FD | 	drvl	#62
1c5a0     3E 1E 26 FC | 	wypin	local01, #62
1c5a4     01 FA 05 F6 | 	mov	result1, #1
1c5a8     A7 F0 03 F6 | 	mov	ptra, fp
1c5ac     B2 00 A0 FD | 	call	#popregs_
1c5b0                 | __system___txraw_ret
1c5b0     2D 00 64 FD | 	ret
1c5b4                 | 
1c5b4                 | __system___rxraw
1c5b4     0D 4A 05 F6 | 	mov	COUNT_, #13
1c5b8     A8 00 A0 FD | 	call	#pushregs_
1c5bc     09 1F 02 F6 | 	mov	local01, arg01
1c5c0     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1c5c4     C2 01 00 AF 
1c5c8     00 12 06 A6 |  if_e	mov	arg01, ##230400
1c5cc     4C FF BF AD |  if_e	call	#__system___setbaud
1c5d0     00 1E 0E F2 | 	cmp	local01, #0 wz
1c5d4     20 00 90 AD |  if_e	jmp	#LR__2340
1c5d8     14 22 06 FB | 	rdlong	local03, #20
1c5dc     0A 22 46 F0 | 	shr	local03, #10
1c5e0     11 1F 02 FD | 	qmul	local01, local03
1c5e4     1A FA 61 FD | 	getct	result1
1c5e8     18 24 62 FD | 	getqx	local04
1c5ec     12 FB 01 F1 | 	add	result1, local04
1c5f0     FD 26 02 F6 | 	mov	local05, result1
1c5f4     04 00 90 FD | 	jmp	#LR__2341
1c5f8                 | LR__2340
1c5f8     00 26 06 F6 | 	mov	local05, #0
1c5fc                 | LR__2341
1c5fc     01 28 66 F6 | 	neg	local06, #1
1c600     3F 2A 06 F6 | 	mov	local07, #63
1c604     00 2C 06 F6 | 	mov	local08, #0
1c608     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1c60c     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1c610     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1c614                 | LR__2342
1c614     08 2E 16 F4 | 	testb	local09, #8 wc
1c618     09 2E 76 F4 | 	testbn	local09, #9 andc
1c61c     0A 2E 46 F0 | 	shr	local09, #10
1c620     01 2C 06 C6 |  if_b	mov	local08, #1
1c624     40 7E 6C 3D |  if_ae	testp	#63 wz
1c628     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1c62c     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1c630     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1c634                 | LR__2343
1c634     00 20 06 F6 | 	mov	local02, #0
1c638     00 2C 0E F2 | 	cmp	local08, #0 wz
1c63c     01 20 66 56 |  if_ne	neg	local02, #1
1c640     00 30 06 F6 | 	mov	local10, #0
1c644     00 22 06 F6 | 	mov	local03, #0
1c648     00 1E 0E F2 | 	cmp	local01, #0 wz
1c64c     01 22 66 56 |  if_ne	neg	local03, #1
1c650     00 24 06 F6 | 	mov	local04, #0
1c654     00 32 06 F6 | 	mov	local11, #0
1c658     1A FA 61 FD | 	getct	result1
1c65c     FD 34 02 F6 | 	mov	local12, result1
1c660     1A 37 02 F6 | 	mov	local13, local12
1c664     13 37 82 F1 | 	sub	local13, local05
1c668     00 36 56 F2 | 	cmps	local13, #0 wc
1c66c     00 32 26 C6 |  if_b	not	local11, #0
1c670     00 32 0E F2 | 	cmp	local11, #0 wz
1c674     00 24 26 56 |  if_ne	not	local04, #0
1c678     12 23 CA F7 | 	test	local03, local04 wz
1c67c     00 30 26 56 |  if_ne	not	local10, #0
1c680     18 21 4A F5 | 	or	local02, local10 wz
1c684     8C FF 9F AD |  if_e	jmp	#LR__2342
1c688     00 2C 0E F2 | 	cmp	local08, #0 wz
1c68c     17 29 02 56 |  if_ne	mov	local06, local09
1c690     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1c694     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1c698     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1c69c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1c6a0     14 FB 01 F6 | 	mov	result1, local06
1c6a4     A7 F0 03 F6 | 	mov	ptra, fp
1c6a8     B2 00 A0 FD | 	call	#popregs_
1c6ac                 | __system___rxraw_ret
1c6ac     2D 00 64 FD | 	ret
1c6b0                 | 
1c6b0                 | __system___getus
1c6b0     1A FC 71 FD | 	getct	result2 wc
1c6b4     1A 00 62 FD | 	getct	_var01
1c6b8     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1c6bc     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1c6c0     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c6c4     20 00 90 5D |  if_ne	jmp	#LR__2350
1c6c8     14 02 06 FB | 	rdlong	_var02, #20
1c6cc     A1 07 00 FF 
1c6d0     40 02 16 FD | 	qdiv	_var02, ##1000000
1c6d4     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1c6d8     18 FA 61 FD | 	getqx	result1
1c6dc     FD 02 02 F6 | 	mov	_var02, result1
1c6e0     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1c6e4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c6e8                 | LR__2350
1c6e8     01 FD 11 FD | 	qdiv	result2, _var02
1c6ec     19 FC 61 FD | 	getqy	result2
1c6f0     28 FC 61 FD | 	setq	result2
1c6f4     01 01 12 FD | 	qdiv	_var01, _var02
1c6f8     18 FA 61 FD | 	getqx	result1
1c6fc                 | __system___getus_ret
1c6fc     2D 00 64 FD | 	ret
1c700                 | 
1c700                 | __system____builtin_memmove
1c700     09 01 02 F6 | 	mov	_var01, arg01
1c704     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1c708     10 00 90 CD |  if_b	jmp	#LR__2360
1c70c     0A 03 02 F6 | 	mov	_var02, arg02
1c710     0B 03 02 F1 | 	add	_var02, arg03
1c714     01 13 52 F2 | 	cmps	arg01, _var02 wc
1c718     48 00 90 CD |  if_b	jmp	#LR__2366
1c71c                 | LR__2360
1c71c     0B 05 02 F6 | 	mov	_var03, arg03
1c720     02 04 4E F0 | 	shr	_var03, #2 wz
1c724     18 00 90 AD |  if_e	jmp	#LR__2365
1c728     97 0A 48 FB | 	callpa	#(@LR__2363-@LR__2361)>>2,fcache_load_ptr_
1c72c                 | LR__2361
1c72c     02 09 D8 FC | 	rep	@LR__2364, _var03
1c730                 | LR__2362
1c730     0A 05 02 FB | 	rdlong	_var03, arg02
1c734     09 05 62 FC | 	wrlong	_var03, arg01
1c738     04 12 06 F1 | 	add	arg01, #4
1c73c     04 14 06 F1 | 	add	arg02, #4
1c740                 | LR__2363
1c740                 | LR__2364
1c740                 | LR__2365
1c740     02 16 CE F7 | 	test	arg03, #2 wz
1c744     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1c748     09 03 52 5C |  if_ne	wrword	_var02, arg01
1c74c     02 12 06 51 |  if_ne	add	arg01, #2
1c750     02 14 06 51 |  if_ne	add	arg02, #2
1c754     01 16 CE F7 | 	test	arg03, #1 wz
1c758     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1c75c     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1c760     28 00 90 FD | 	jmp	#LR__2372
1c764                 | LR__2366
1c764     0B 13 02 F1 | 	add	arg01, arg03
1c768     0B 15 02 F1 | 	add	arg02, arg03
1c76c     0B 07 0A F6 | 	mov	_var04, arg03 wz
1c770     18 00 90 AD |  if_e	jmp	#LR__2371
1c774     97 0A 48 FB | 	callpa	#(@LR__2369-@LR__2367)>>2,fcache_load_ptr_
1c778                 | LR__2367
1c778     03 09 D8 FC | 	rep	@LR__2370, _var04
1c77c                 | LR__2368
1c77c     01 12 86 F1 | 	sub	arg01, #1
1c780     01 14 86 F1 | 	sub	arg02, #1
1c784     0A 03 C2 FA | 	rdbyte	_var02, arg02
1c788     09 03 42 FC | 	wrbyte	_var02, arg01
1c78c                 | LR__2369
1c78c                 | LR__2370
1c78c                 | LR__2371
1c78c                 | LR__2372
1c78c     00 FB 01 F6 | 	mov	result1, _var01
1c790                 | __system____builtin_memmove_ret
1c790     2D 00 64 FD | 	ret
1c794                 | 
1c794                 | __system____builtin_strcpy
1c794     09 01 02 F6 | 	mov	_var01, arg01
1c798     97 0A 48 FB | 	callpa	#(@LR__2381-@LR__2380)>>2,fcache_load_ptr_
1c79c                 | LR__2380
1c79c     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1c7a0     09 FB 41 FC | 	wrbyte	result1, arg01
1c7a4     01 14 06 F1 | 	add	arg02, #1
1c7a8     01 12 06 F1 | 	add	arg01, #1
1c7ac     EC FF 9F 5D |  if_ne	jmp	#LR__2380
1c7b0                 | LR__2381
1c7b0     00 FB 01 F6 | 	mov	result1, _var01
1c7b4                 | __system____builtin_strcpy_ret
1c7b4     2D 00 64 FD | 	ret
1c7b8                 | 
1c7b8                 | __system____topofstack
1c7b8     00 4A 05 F6 | 	mov	COUNT_, #0
1c7bc     A8 00 A0 FD | 	call	#pushregs_
1c7c0     08 F0 07 F1 | 	add	ptra, #8
1c7c4     04 4E 05 F1 | 	add	fp, #4
1c7c8     A7 12 62 FC | 	wrlong	arg01, fp
1c7cc     A7 FA 01 F6 | 	mov	result1, fp
1c7d0     04 4E 85 F1 | 	sub	fp, #4
1c7d4     A7 F0 03 F6 | 	mov	ptra, fp
1c7d8     B2 00 A0 FD | 	call	#popregs_
1c7dc                 | __system____topofstack_ret
1c7dc     2D 00 64 FD | 	ret
1c7e0                 | 
1c7e0                 | __system___lockmem
1c7e0     00 FA 05 F6 | 	mov	result1, #0
1c7e4     01 FA 61 FD | 	cogid	result1
1c7e8     00 FB 05 F1 | 	add	result1, #256
1c7ec                 | LR__2390
1c7ec     09 01 0A FB | 	rdlong	_var01, arg01 wz
1c7f0     09 FB 61 AC |  if_e	wrlong	result1, arg01
1c7f4     09 01 02 AB |  if_e	rdlong	_var01, arg01
1c7f8     09 01 02 AB |  if_e	rdlong	_var01, arg01
1c7fc     FD 00 0A F2 | 	cmp	_var01, result1 wz
1c800     E8 FF 9F 5D |  if_ne	jmp	#LR__2390
1c804                 | __system___lockmem_ret
1c804     2D 00 64 FD | 	ret
1c808                 | 
1c808                 | __system___string_cmp
1c808     97 14 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1c80c                 | LR__2400
1c80c     09 01 C2 FA | 	rdbyte	_var01, arg01
1c810     0A 03 C2 FA | 	rdbyte	_var02, arg02
1c814     00 05 02 F6 | 	mov	_var03, _var01
1c818     01 05 8A F1 | 	sub	_var03, _var02 wz
1c81c     01 12 06 F1 | 	add	arg01, #1
1c820     01 14 06 F1 | 	add	arg02, #1
1c824     0C 00 90 5D |  if_ne	jmp	#LR__2402
1c828     00 00 0E F2 | 	cmp	_var01, #0 wz
1c82c     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1c830     D8 FF 9F 5D |  if_ne	jmp	#LR__2400
1c834                 | LR__2401
1c834                 | LR__2402
1c834     02 FB 01 F6 | 	mov	result1, _var03
1c838                 | __system___string_cmp_ret
1c838     2D 00 64 FD | 	ret
1c83c                 | 
1c83c                 | __system___string_concat
1c83c     05 4A 05 F6 | 	mov	COUNT_, #5
1c840     A8 00 A0 FD | 	call	#pushregs_
1c844     09 1F 02 F6 | 	mov	local01, arg01
1c848     0A 21 02 F6 | 	mov	local02, arg02
1c84c     0F 13 02 F6 | 	mov	arg01, local01
1c850     09 23 02 F6 | 	mov	local03, arg01
1c854     97 06 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1c858                 | LR__2410
1c858     11 FB C9 FA | 	rdbyte	result1, local03 wz
1c85c     01 22 06 51 |  if_ne	add	local03, #1
1c860     F4 FF 9F 5D |  if_ne	jmp	#LR__2410
1c864                 | LR__2411
1c864     09 23 82 F1 | 	sub	local03, arg01
1c868     11 25 02 F6 | 	mov	local04, local03
1c86c     10 13 02 F6 | 	mov	arg01, local02
1c870     09 23 02 F6 | 	mov	local03, arg01
1c874     97 06 48 FB | 	callpa	#(@LR__2413-@LR__2412)>>2,fcache_load_ptr_
1c878                 | LR__2412
1c878     11 FB C9 FA | 	rdbyte	result1, local03 wz
1c87c     01 22 06 51 |  if_ne	add	local03, #1
1c880     F4 FF 9F 5D |  if_ne	jmp	#LR__2412
1c884                 | LR__2413
1c884     09 23 82 F1 | 	sub	local03, arg01
1c888     12 13 02 F6 | 	mov	arg01, local04
1c88c     11 13 02 F1 | 	add	arg01, local03
1c890     01 12 06 F1 | 	add	arg01, #1
1c894     90 3D B0 FD | 	call	#__system___gc_alloc_managed
1c898     FD 26 0A F6 | 	mov	local05, result1 wz
1c89c     28 00 90 AD |  if_e	jmp	#LR__2414
1c8a0     13 13 02 F6 | 	mov	arg01, local05
1c8a4     0F 15 02 F6 | 	mov	arg02, local01
1c8a8     12 17 02 F6 | 	mov	arg03, local04
1c8ac     50 FE BF FD | 	call	#__system____builtin_memmove
1c8b0     13 13 02 F6 | 	mov	arg01, local05
1c8b4     12 13 02 F1 | 	add	arg01, local04
1c8b8     01 22 06 F1 | 	add	local03, #1
1c8bc     10 15 02 F6 | 	mov	arg02, local02
1c8c0     11 17 02 F6 | 	mov	arg03, local03
1c8c4     38 FE BF FD | 	call	#__system____builtin_memmove
1c8c8                 | LR__2414
1c8c8     13 FB 01 F6 | 	mov	result1, local05
1c8cc     A7 F0 03 F6 | 	mov	ptra, fp
1c8d0     B2 00 A0 FD | 	call	#popregs_
1c8d4                 | __system___string_concat_ret
1c8d4     2D 00 64 FD | 	ret
1c8d8                 | 
1c8d8                 | __system___tx
1c8d8     02 4A 05 F6 | 	mov	COUNT_, #2
1c8dc     A8 00 A0 FD | 	call	#pushregs_
1c8e0     09 1F 02 F6 | 	mov	local01, arg01
1c8e4     0A 1E 0E F2 | 	cmp	local01, #10 wz
1c8e8     18 00 90 5D |  if_ne	jmp	#LR__2420
1c8ec     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c8f0     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1c8f4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c8f8     02 20 CE F7 | 	test	local02, #2 wz
1c8fc     0D 12 06 56 |  if_ne	mov	arg01, #13
1c900     6C FC BF 5D |  if_ne	call	#__system___txraw
1c904                 | LR__2420
1c904     0F 13 02 F6 | 	mov	arg01, local01
1c908     64 FC BF FD | 	call	#__system___txraw
1c90c     A7 F0 03 F6 | 	mov	ptra, fp
1c910     B2 00 A0 FD | 	call	#popregs_
1c914                 | __system___tx_ret
1c914     2D 00 64 FD | 	ret
1c918                 | 
1c918                 | __system___rx
1c918     01 4A 05 F6 | 	mov	COUNT_, #1
1c91c     A8 00 A0 FD | 	call	#pushregs_
1c920                 | LR__2430
1c920     00 12 06 F6 | 	mov	arg01, #0
1c924     8C FC BF FD | 	call	#__system___rxraw
1c928     FD 1E 02 F6 | 	mov	local01, result1
1c92c     FF FF 7F FF 
1c930     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1c934     E8 FF 9F AD |  if_e	jmp	#LR__2430
1c938     0D 1E 0E F2 | 	cmp	local01, #13 wz
1c93c     14 00 90 5D |  if_ne	jmp	#LR__2431
1c940     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c944     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1c948     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c94c     02 FA CD F7 | 	test	result1, #2 wz
1c950     0A 1E 06 56 |  if_ne	mov	local01, #10
1c954                 | LR__2431
1c954     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c958     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1c95c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c960     01 12 CE F7 | 	test	arg01, #1 wz
1c964     1C 00 90 AD |  if_e	jmp	#LR__2434
1c968     7F 1E 0E F2 | 	cmp	local01, #127 wz
1c96c     0C 00 90 5D |  if_ne	jmp	#LR__2432
1c970     08 12 06 F6 | 	mov	arg01, #8
1c974     60 FF BF FD | 	call	#__system___tx
1c978     08 00 90 FD | 	jmp	#LR__2433
1c97c                 | LR__2432
1c97c     0F 13 02 F6 | 	mov	arg01, local01
1c980     54 FF BF FD | 	call	#__system___tx
1c984                 | LR__2433
1c984                 | LR__2434
1c984     0F FB 01 F6 | 	mov	result1, local01
1c988     A7 F0 03 F6 | 	mov	ptra, fp
1c98c     B2 00 A0 FD | 	call	#popregs_
1c990                 | __system___rx_ret
1c990     2D 00 64 FD | 	ret
1c994                 | 
1c994                 | __system___pinwrite
1c994     09 01 02 F6 | 	mov	_var01, arg01
1c998     1F 00 06 F5 | 	and	_var01, #31
1c99c     20 12 CE F7 | 	test	arg01, #32 wz
1c9a0     06 12 46 F0 | 	shr	arg01, #6
1c9a4     09 13 CA F9 | 	bmask	arg01, arg01
1c9a8     00 13 62 F0 | 	shl	arg01, _var01
1c9ac     00 15 62 F0 | 	shl	arg02, _var01
1c9b0     1C 00 90 AD |  if_e	jmp	#LR__2440
1c9b4     09 F7 43 F5 | 	or	dirb, arg01
1c9b8     FD 01 02 F6 | 	mov	_var01, outb
1c9bc     09 01 22 F5 | 	andn	_var01, arg01
1c9c0     09 15 02 F5 | 	and	arg02, arg01
1c9c4     0A 01 42 F5 | 	or	_var01, arg02
1c9c8     00 FB 03 F6 | 	mov	outb, _var01
1c9cc     18 00 90 FD | 	jmp	#LR__2441
1c9d0                 | LR__2440
1c9d0     09 F5 43 F5 | 	or	dira, arg01
1c9d4     FC 01 02 F6 | 	mov	_var01, outa
1c9d8     09 01 22 F5 | 	andn	_var01, arg01
1c9dc     09 15 02 F5 | 	and	arg02, arg01
1c9e0     0A 01 42 F5 | 	or	_var01, arg02
1c9e4     00 F9 03 F6 | 	mov	outa, _var01
1c9e8                 | LR__2441
1c9e8                 | __system___pinwrite_ret
1c9e8     2D 00 64 FD | 	ret
1c9ec                 | 
1c9ec                 | __system___basic_read_line
1c9ec     06 4A 05 F6 | 	mov	COUNT_, #6
1c9f0     A8 00 A0 FD | 	call	#pushregs_
1c9f4     09 1F 02 F6 | 	mov	local01, arg01
1c9f8     00 20 06 F6 | 	mov	local02, #0
1c9fc     18 22 06 F6 | 	mov	local03, #24
1ca00     00 24 06 F6 | 	mov	local04, #0
1ca04     18 12 06 F6 | 	mov	arg01, #24
1ca08     1C 3C B0 FD | 	call	#__system___gc_alloc_managed
1ca0c     FD 26 0A F6 | 	mov	local05, result1 wz
1ca10     13 FB 01 A6 |  if_e	mov	result1, local05
1ca14     B0 00 90 AD |  if_e	jmp	#LR__2453
1ca18                 | LR__2450
1ca18     0F 13 02 F6 | 	mov	arg01, local01
1ca1c     88 0B B0 FD | 	call	#__system___basic_get_char
1ca20     FD 28 02 F6 | 	mov	local06, result1
1ca24     01 28 56 F2 | 	cmps	local06, #1 wc
1ca28     8C 00 90 CD |  if_b	jmp	#LR__2452
1ca2c     0A 28 0E F2 | 	cmp	local06, #10 wz
1ca30     10 00 90 5D |  if_ne	jmp	#LR__2451
1ca34     00 24 0E F2 | 	cmp	local04, #0 wz
1ca38     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1ca3c     01 20 86 11 |  if_a	sub	local02, #1
1ca40     74 00 90 FD | 	jmp	#LR__2452
1ca44                 | LR__2451
1ca44     0D 28 0E F2 | 	cmp	local06, #13 wz
1ca48     01 24 06 A6 |  if_e	mov	local04, #1
1ca4c     00 24 06 56 |  if_ne	mov	local04, #0
1ca50     08 28 0E F2 | 	cmp	local06, #8 wz
1ca54     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1ca58     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1ca5c     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1ca60     B4 FF 9F AD |  if_e	jmp	#LR__2450
1ca64     13 17 02 F6 | 	mov	arg03, local05
1ca68     10 17 02 F1 | 	add	arg03, local02
1ca6c     0B 29 42 FC | 	wrbyte	local06, arg03
1ca70     01 20 06 F1 | 	add	local02, #1
1ca74     11 21 0A F2 | 	cmp	local02, local03 wz
1ca78     9C FF 9F 5D |  if_ne	jmp	#LR__2450
1ca7c     11 13 02 F6 | 	mov	arg01, local03
1ca80     20 12 06 F1 | 	add	arg01, #32
1ca84     A0 3B B0 FD | 	call	#__system___gc_alloc_managed
1ca88     FD 28 0A F6 | 	mov	local06, result1 wz
1ca8c     14 FB 01 A6 |  if_e	mov	result1, local06
1ca90     34 00 90 AD |  if_e	jmp	#LR__2453
1ca94     14 13 02 F6 | 	mov	arg01, local06
1ca98     13 15 02 F6 | 	mov	arg02, local05
1ca9c     11 17 02 F6 | 	mov	arg03, local03
1caa0     5C FC BF FD | 	call	#__system____builtin_memmove
1caa4     20 22 06 F1 | 	add	local03, #32
1caa8     13 13 02 F6 | 	mov	arg01, local05
1caac     B4 3C B0 FD | 	call	#__system___gc_free
1cab0     14 27 02 F6 | 	mov	local05, local06
1cab4     60 FF 9F FD | 	jmp	#LR__2450
1cab8                 | LR__2452
1cab8     13 29 02 F6 | 	mov	local06, local05
1cabc     10 29 02 F1 | 	add	local06, local02
1cac0     14 01 48 FC | 	wrbyte	#0, local06
1cac4     13 FB 01 F6 | 	mov	result1, local05
1cac8                 | LR__2453
1cac8     A7 F0 03 F6 | 	mov	ptra, fp
1cacc     B2 00 A0 FD | 	call	#popregs_
1cad0                 | __system___basic_read_line_ret
1cad0     2D 00 64 FD | 	ret
1cad4                 | 
1cad4                 | __system___waitms
1cad4     09 01 02 F6 | 	mov	_var01, arg01
1cad8     1A 02 62 FD | 	getct	_var02
1cadc     14 04 06 FB | 	rdlong	_var03, #20
1cae0     97 14 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1cae4                 | LR__2460
1cae4     01 00 00 FF 
1cae8     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1caec     1C 00 90 CD |  if_b	jmp	#LR__2462
1caf0     02 03 02 F1 | 	add	_var02, _var03
1caf4     01 13 02 F6 | 	mov	arg01, _var02
1caf8     00 12 66 FA | 	addct1	arg01, #0
1cafc     24 22 60 FD | 	waitct1
1cb00     01 00 00 FF 
1cb04     E8 01 86 F1 | 	sub	_var01, ##1000
1cb08     D8 FF 9F FD | 	jmp	#LR__2460
1cb0c                 | LR__2461
1cb0c                 | LR__2462
1cb0c     01 00 56 F2 | 	cmps	_var01, #1 wc
1cb10     28 00 90 CD |  if_b	jmp	#LR__2463
1cb14     02 01 02 FD | 	qmul	_var01, _var03
1cb18     01 00 00 FF 
1cb1c     E8 17 06 F6 | 	mov	arg03, ##1000
1cb20     19 FA 61 FD | 	getqy	result1
1cb24     18 12 62 FD | 	getqx	arg01
1cb28     28 FA 61 FD | 	setq	result1
1cb2c     0B 13 12 FD | 	qdiv	arg01, arg03
1cb30     18 12 62 FD | 	getqx	arg01
1cb34     01 13 62 FA | 	addct1	arg01, _var02
1cb38     24 22 60 FD | 	waitct1
1cb3c                 | LR__2463
1cb3c                 | __system___waitms_ret
1cb3c     2D 00 64 FD | 	ret
1cb40                 | 
1cb40                 | __system___waitus
1cb40     09 01 02 F6 | 	mov	_var01, arg01
1cb44     1A 02 62 FD | 	getct	_var02
1cb48     14 04 06 FB | 	rdlong	_var03, #20
1cb4c     97 14 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1cb50                 | LR__2470
1cb50     A1 07 00 FF 
1cb54     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1cb58     1C 00 90 CD |  if_b	jmp	#LR__2472
1cb5c     02 03 02 F1 | 	add	_var02, _var03
1cb60     01 13 02 F6 | 	mov	arg01, _var02
1cb64     00 12 66 FA | 	addct1	arg01, #0
1cb68     24 22 60 FD | 	waitct1
1cb6c     A1 07 00 FF 
1cb70     40 00 86 F1 | 	sub	_var01, ##1000000
1cb74     D8 FF 9F FD | 	jmp	#LR__2470
1cb78                 | LR__2471
1cb78                 | LR__2472
1cb78     01 00 56 F2 | 	cmps	_var01, #1 wc
1cb7c     28 00 90 CD |  if_b	jmp	#LR__2473
1cb80     02 01 02 FD | 	qmul	_var01, _var03
1cb84     A1 07 00 FF 
1cb88     40 16 06 F6 | 	mov	arg03, ##1000000
1cb8c     19 FA 61 FD | 	getqy	result1
1cb90     18 12 62 FD | 	getqx	arg01
1cb94     28 FA 61 FD | 	setq	result1
1cb98     0B 13 12 FD | 	qdiv	arg01, arg03
1cb9c     18 FA 61 FD | 	getqx	result1
1cba0     FD 02 62 FA | 	addct1	_var02, result1
1cba4     24 22 60 FD | 	waitct1
1cba8                 | LR__2473
1cba8                 | __system___waitus_ret
1cba8     2D 00 64 FD | 	ret
1cbac                 | 
1cbac                 | __system___mount
1cbac     0B 4A 05 F6 | 	mov	COUNT_, #11
1cbb0     A8 00 A0 FD | 	call	#pushregs_
1cbb4     09 1F 02 F6 | 	mov	local01, arg01
1cbb8     0A 21 0A F6 | 	mov	local02, arg02 wz
1cbbc     01 22 66 F6 | 	neg	local03, #1
1cbc0     01 FA 65 A6 |  if_e	neg	result1, #1
1cbc4     98 02 90 AD |  if_e	jmp	#LR__2495
1cbc8     0F FB C1 FA | 	rdbyte	result1, local01
1cbcc     2F FA 0D F2 | 	cmp	result1, #47 wz
1cbd0     28 00 90 5D |  if_ne	jmp	#LR__2482
1cbd4     0F 13 02 F6 | 	mov	arg01, local01
1cbd8     09 25 02 F6 | 	mov	local04, arg01
1cbdc     97 06 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
1cbe0                 | LR__2480
1cbe0     12 FB C9 FA | 	rdbyte	result1, local04 wz
1cbe4     01 24 06 51 |  if_ne	add	local04, #1
1cbe8     F4 FF 9F 5D |  if_ne	jmp	#LR__2480
1cbec                 | LR__2481
1cbec     09 25 82 F1 | 	sub	local04, arg01
1cbf0     12 FB 01 F6 | 	mov	result1, local04
1cbf4     10 FA 55 F2 | 	cmps	result1, #16 wc
1cbf8     14 00 90 CD |  if_b	jmp	#LR__2483
1cbfc                 | LR__2482
1cbfc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1cc00     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1cc04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1cc08     01 FA 65 F6 | 	neg	result1, #1
1cc0c     50 02 90 FD | 	jmp	#LR__2495
1cc10                 | LR__2483
1cc10     00 26 06 F6 | 	mov	local05, #0
1cc14                 | LR__2484
1cc14     04 26 56 F2 | 	cmps	local05, #4 wc
1cc18     B0 00 90 3D |  if_ae	jmp	#LR__2489
1cc1c     13 13 02 F6 | 	mov	arg01, local05
1cc20     02 12 66 F0 | 	shl	arg01, #2
1cc24     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cc28     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1cc2c     09 FB 09 FB | 	rdlong	result1, arg01 wz
1cc30     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cc34     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1cc38     13 23 02 86 |  if_c_and_z	mov	local03, local05
1cc3c     84 00 90 8D |  if_c_and_z	jmp	#LR__2488
1cc40     13 13 02 F6 | 	mov	arg01, local05
1cc44     02 12 66 F0 | 	shl	arg01, #2
1cc48     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cc4c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1cc50     09 13 02 FB | 	rdlong	arg01, arg01
1cc54     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cc58     09 25 02 F6 | 	mov	local04, arg01
1cc5c     97 06 48 FB | 	callpa	#(@LR__2486-@LR__2485)>>2,fcache_load_ptr_
1cc60                 | LR__2485
1cc60     12 FB C9 FA | 	rdbyte	result1, local04 wz
1cc64     01 24 06 51 |  if_ne	add	local04, #1
1cc68     F4 FF 9F 5D |  if_ne	jmp	#LR__2485
1cc6c                 | LR__2486
1cc6c     09 25 82 F1 | 	sub	local04, arg01
1cc70     12 29 02 F6 | 	mov	local06, local04
1cc74     14 13 02 F6 | 	mov	arg01, local06
1cc78     0F 13 02 F1 | 	add	arg01, local01
1cc7c     09 FB C1 FA | 	rdbyte	result1, arg01
1cc80     2F FA 0D F2 | 	cmp	result1, #47 wz
1cc84     14 2B 02 56 |  if_ne	mov	local07, local06
1cc88     0F 2B 02 51 |  if_ne	add	local07, local01
1cc8c     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1cc90     30 00 90 5D |  if_ne	jmp	#LR__2487
1cc94     13 17 02 F6 | 	mov	arg03, local05
1cc98     02 16 66 F0 | 	shl	arg03, #2
1cc9c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cca0     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1cca4     0B 15 02 FB | 	rdlong	arg02, arg03
1cca8     0F 13 02 F6 | 	mov	arg01, local01
1ccac     14 17 02 F6 | 	mov	arg03, local06
1ccb0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ccb4     B4 4D B0 FD | 	call	#__system__strncmp
1ccb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ccbc     13 23 02 A6 |  if_e	mov	local03, local05
1ccc0     08 00 90 AD |  if_e	jmp	#LR__2489
1ccc4                 | LR__2487
1ccc4                 | LR__2488
1ccc4     01 26 06 F1 | 	add	local05, #1
1ccc8     48 FF 9F FD | 	jmp	#LR__2484
1cccc                 | LR__2489
1cccc     FF FF 7F FF 
1ccd0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1ccd4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1ccd8     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1ccdc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1cce0     01 FA 65 A6 |  if_e	neg	result1, #1
1cce4     78 01 90 AD |  if_e	jmp	#LR__2495
1cce8     11 27 02 F6 | 	mov	local05, local03
1ccec     13 2B 02 F6 | 	mov	local07, local05
1ccf0     02 2A 66 F0 | 	shl	local07, #2
1ccf4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1ccf8     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1ccfc     15 29 0A FB | 	rdlong	local06, local07 wz
1cd00     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1cd04     58 00 90 AD |  if_e	jmp	#LR__2490
1cd08     4C 28 06 F1 | 	add	local06, #76
1cd0c     14 2B 0A FB | 	rdlong	local07, local06 wz
1cd10     4C 28 86 F1 | 	sub	local06, #76
1cd14     48 00 90 AD |  if_e	jmp	#LR__2490
1cd18     4C 28 06 F1 | 	add	local06, #76
1cd1c     14 2B 02 FB | 	rdlong	local07, local06
1cd20     15 23 02 F6 | 	mov	local03, local07
1cd24     13 2A 46 F7 | 	zerox	local07, #19
1cd28     14 22 46 F0 | 	shr	local03, #20
1cd2c     02 22 66 F0 | 	shl	local03, #2
1cd30     ED 22 02 F1 | 	add	local03, __methods__
1cd34     11 23 02 FB | 	rdlong	local03, local03
1cd38     13 29 02 F6 | 	mov	local06, local05
1cd3c     02 28 66 F0 | 	shl	local06, #2
1cd40     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cd44     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1cd48     14 13 02 FB | 	rdlong	arg01, local06
1cd4c     F2 28 02 F6 | 	mov	local06, objptr
1cd50     15 E5 01 F6 | 	mov	objptr, local07
1cd54     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cd58     2D 22 62 FD | 	call	local03
1cd5c     14 E5 01 F6 | 	mov	objptr, local06
1cd60                 | LR__2490
1cd60     13 2D 02 F6 | 	mov	local08, local05
1cd64     02 2C 66 F0 | 	shl	local08, #2
1cd68     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1cd6c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1cd70     16 21 62 FC | 	wrlong	local02, local08
1cd74     00 20 0E F2 | 	cmp	local02, #0 wz
1cd78     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1cd7c     18 00 90 5D |  if_ne	jmp	#LR__2491
1cd80     02 26 66 F0 | 	shl	local05, #2
1cd84     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cd88     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1cd8c     13 01 68 FC | 	wrlong	#0, local05
1cd90     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cd94     C4 00 90 FD | 	jmp	#LR__2494
1cd98                 | LR__2491
1cd98     13 2F 02 F6 | 	mov	local09, local05
1cd9c     04 2E 66 F0 | 	shl	local09, #4
1cda0     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1cda4     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1cda8     17 13 02 F6 | 	mov	arg01, local09
1cdac     0F 15 02 F6 | 	mov	arg02, local01
1cdb0     10 16 06 F6 | 	mov	arg03, #16
1cdb4     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1cdb8     04 4C B0 FD | 	call	#__system__strncpy
1cdbc     48 20 06 F1 | 	add	local02, #72
1cdc0     10 2D 0A FB | 	rdlong	local08, local02 wz
1cdc4     48 20 86 F1 | 	sub	local02, #72
1cdc8     7C 00 90 AD |  if_e	jmp	#LR__2493
1cdcc     48 20 06 F1 | 	add	local02, #72
1cdd0     10 2D 02 FB | 	rdlong	local08, local02
1cdd4     16 31 02 F6 | 	mov	local10, local08
1cdd8     13 2C 46 F7 | 	zerox	local08, #19
1cddc     14 30 46 F0 | 	shr	local10, #20
1cde0     02 30 66 F0 | 	shl	local10, #2
1cde4     ED 30 02 F1 | 	add	local10, __methods__
1cde8     18 31 02 FB | 	rdlong	local10, local10
1cdec     17 13 02 F6 | 	mov	arg01, local09
1cdf0     F2 32 02 F6 | 	mov	local11, objptr
1cdf4     16 E5 01 F6 | 	mov	objptr, local08
1cdf8     2D 30 62 FD | 	call	local10
1cdfc     19 E5 01 F6 | 	mov	objptr, local11
1ce00     FD 12 0A F6 | 	mov	arg01, result1 wz
1ce04     40 00 90 AD |  if_e	jmp	#LR__2492
1ce08     13 2D 02 F6 | 	mov	local08, local05
1ce0c     02 2C 66 F0 | 	shl	local08, #2
1ce10     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1ce14     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1ce18     16 01 68 FC | 	wrlong	#0, local08
1ce1c     02 26 66 F0 | 	shl	local05, #2
1ce20     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ce24     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1ce28     13 01 68 FC | 	wrlong	#0, local05
1ce2c     09 13 6A F6 | 	neg	arg01, arg01 wz
1ce30     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1ce34     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1ce38     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1ce3c     01 FA 65 56 |  if_ne	neg	result1, #1
1ce40     00 FA 05 A6 |  if_e	mov	result1, #0
1ce44     18 00 90 FD | 	jmp	#LR__2495
1ce48                 | LR__2492
1ce48                 | LR__2493
1ce48     02 26 66 F0 | 	shl	local05, #2
1ce4c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ce50     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1ce54     13 2F 62 FC | 	wrlong	local09, local05
1ce58     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ce5c                 | LR__2494
1ce5c     00 FA 05 F6 | 	mov	result1, #0
1ce60                 | LR__2495
1ce60     A7 F0 03 F6 | 	mov	ptra, fp
1ce64     B2 00 A0 FD | 	call	#popregs_
1ce68                 | __system___mount_ret
1ce68     2D 00 64 FD | 	ret
1ce6c                 | 
1ce6c                 | __system___chdir
1ce6c     00 4A 05 F6 | 	mov	COUNT_, #0
1ce70     A8 00 A0 FD | 	call	#pushregs_
1ce74     40 F0 07 F1 | 	add	ptra, #64
1ce78     04 4E 05 F1 | 	add	fp, #4
1ce7c     A7 12 62 FC | 	wrlong	arg01, fp
1ce80     04 4E 05 F1 | 	add	fp, #4
1ce84     A7 14 02 F6 | 	mov	arg02, fp
1ce88     08 4E 85 F1 | 	sub	fp, #8
1ce8c     10 48 B0 FD | 	call	#__system__stat
1ce90     3C 4E 05 F1 | 	add	fp, #60
1ce94     A7 FA 61 FC | 	wrlong	result1, fp
1ce98     3C 4E 85 F1 | 	sub	fp, #60
1ce9c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cea0     3C 4E 05 51 |  if_ne	add	fp, #60
1cea4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1cea8     3C 4E 85 51 |  if_ne	sub	fp, #60
1ceac     BC 00 90 5D |  if_ne	jmp	#LR__2502
1ceb0     10 4E 05 F1 | 	add	fp, #16
1ceb4     A7 12 02 FB | 	rdlong	arg01, fp
1ceb8     10 4E 85 F1 | 	sub	fp, #16
1cebc     78 00 00 FF 
1cec0     00 12 06 F5 | 	and	arg01, ##61440
1cec4     08 00 00 FF 
1cec8     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1cecc     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1ced0     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1ced4     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1ced8     01 FA 65 56 |  if_ne	neg	result1, #1
1cedc     8C 00 90 5D |  if_ne	jmp	#LR__2502
1cee0     04 4E 05 F1 | 	add	fp, #4
1cee4     A7 16 02 FB | 	rdlong	arg03, fp
1cee8     04 4E 85 F1 | 	sub	fp, #4
1ceec     0B 17 C2 FA | 	rdbyte	arg03, arg03
1cef0     2F 16 0E F2 | 	cmp	arg03, #47 wz
1cef4     24 00 90 5D |  if_ne	jmp	#LR__2500
1cef8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1cefc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cf00     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1cf04     04 4E 05 F1 | 	add	fp, #4
1cf08     A7 14 02 FB | 	rdlong	arg02, fp
1cf0c     04 4E 85 F1 | 	sub	fp, #4
1cf10     00 17 06 F6 | 	mov	arg03, #256
1cf14     A8 4A B0 FD | 	call	#__system__strncpy
1cf18     4C 00 90 FD | 	jmp	#LR__2501
1cf1c                 | LR__2500
1cf1c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1cf20     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cf24     38 4E 05 F1 | 	add	fp, #56
1cf28     A7 12 62 FC | 	wrlong	arg01, fp
1cf2c     38 4E 85 F1 | 	sub	fp, #56
1cf30     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1cf34     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1cf38     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1cf3c     00 17 06 F6 | 	mov	arg03, #256
1cf40     7C 4A B0 FD | 	call	#__system__strncpy
1cf44     38 4E 05 F1 | 	add	fp, #56
1cf48     A7 12 02 FB | 	rdlong	arg01, fp
1cf4c     34 4E 85 F1 | 	sub	fp, #52
1cf50     A7 14 02 FB | 	rdlong	arg02, fp
1cf54     04 4E 85 F1 | 	sub	fp, #4
1cf58     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1cf5c     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1cf60     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1cf64     10 00 B0 FD | 	call	#__system____getvfsforfile
1cf68                 | LR__2501
1cf68     00 FA 05 F6 | 	mov	result1, #0
1cf6c                 | LR__2502
1cf6c     A7 F0 03 F6 | 	mov	ptra, fp
1cf70     B2 00 A0 FD | 	call	#popregs_
1cf74                 | __system___chdir_ret
1cf74     2D 00 64 FD | 	ret
1cf78                 | 
1cf78                 | __system____getvfsforfile
1cf78     0E 4A 05 F6 | 	mov	COUNT_, #14
1cf7c     A8 00 A0 FD | 	call	#pushregs_
1cf80     09 1F 02 F6 | 	mov	local01, arg01
1cf84     0A 21 02 F6 | 	mov	local02, arg02
1cf88     0B 23 02 F6 | 	mov	local03, arg03
1cf8c     97 10 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1cf90                 | LR__2510
1cf90     10 FB C1 FA | 	rdbyte	result1, local02
1cf94     2F FA 0D F2 | 	cmp	result1, #47 wz
1cf98     01 20 06 A1 |  if_e	add	local02, #1
1cf9c     10 25 C2 AA |  if_e	rdbyte	local04, local02
1cfa0     01 20 86 A1 |  if_e	sub	local02, #1
1cfa4     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1cfa8     01 20 06 A1 |  if_e	add	local02, #1
1cfac     E0 FF 9F AD |  if_e	jmp	#LR__2510
1cfb0                 | LR__2511
1cfb0     10 25 C2 FA | 	rdbyte	local04, local02
1cfb4     2F 24 0E F2 | 	cmp	local04, #47 wz
1cfb8     14 00 90 5D |  if_ne	jmp	#LR__2512
1cfbc     0F 13 02 F6 | 	mov	arg01, local01
1cfc0     10 15 02 F6 | 	mov	arg02, local02
1cfc4     00 17 06 F6 | 	mov	arg03, #256
1cfc8     F4 49 B0 FD | 	call	#__system__strncpy
1cfcc     7C 00 90 FD | 	jmp	#LR__2514
1cfd0                 | LR__2512
1cfd0     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1cfd4     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1cfd8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1cfdc     0F 13 02 F6 | 	mov	arg01, local01
1cfe0     00 17 06 F6 | 	mov	arg03, #256
1cfe4     D8 49 B0 FD | 	call	#__system__strncpy
1cfe8     10 25 CA FA | 	rdbyte	local04, local02 wz
1cfec     5C 00 90 AD |  if_e	jmp	#LR__2513
1cff0     10 25 C2 FA | 	rdbyte	local04, local02
1cff4     2E 24 0E F2 | 	cmp	local04, #46 wz
1cff8     01 20 06 A1 |  if_e	add	local02, #1
1cffc     10 27 C2 AA |  if_e	rdbyte	local05, local02
1d000     01 20 86 A1 |  if_e	sub	local02, #1
1d004     13 29 02 A6 |  if_e	mov	local06, local05
1d008     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1d00c     3C 00 90 AD |  if_e	jmp	#LR__2513
1d010     0F 27 C2 FA | 	rdbyte	local05, local01
1d014     2F 26 0E F2 | 	cmp	local05, #47 wz
1d018     01 1E 06 A1 |  if_e	add	local01, #1
1d01c     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1d020     01 1E 86 A1 |  if_e	sub	local01, #1
1d024     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1d028     5E 01 00 5F 
1d02c     8C 15 06 56 |  if_ne	mov	arg02, ##@LR__4570
1d030     0F 13 02 56 |  if_ne	mov	arg01, local01
1d034     00 17 06 56 |  if_ne	mov	arg03, #256
1d038     D0 49 B0 5D |  if_ne	call	#__system__strncat
1d03c     0F 13 02 F6 | 	mov	arg01, local01
1d040     10 15 02 F6 | 	mov	arg02, local02
1d044     00 17 06 F6 | 	mov	arg03, #256
1d048     C0 49 B0 FD | 	call	#__system__strncat
1d04c                 | LR__2513
1d04c                 | LR__2514
1d04c     0F 13 02 F6 | 	mov	arg01, local01
1d050     78 4B B0 FD | 	call	#__system___normalizeName
1d054     0F 25 CA FA | 	rdbyte	local04, local01 wz
1d058     1C 00 90 AD |  if_e	jmp	#LR__2515
1d05c     0F 25 C2 FA | 	rdbyte	local04, local01
1d060     2F 24 0E F2 | 	cmp	local04, #47 wz
1d064     01 1E 06 A1 |  if_e	add	local01, #1
1d068     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1d06c     01 1E 86 A1 |  if_e	sub	local01, #1
1d070     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1d074     18 00 90 5D |  if_ne	jmp	#LR__2516
1d078                 | LR__2515
1d078     01 00 00 FF 
1d07c     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1d080     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1d084     01 00 00 FF 
1d088     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1d08c     EC 01 90 FD | 	jmp	#LR__2530
1d090                 | LR__2516
1d090     00 2A 06 F6 | 	mov	local07, #0
1d094                 | LR__2517
1d094     04 2A 56 F2 | 	cmps	local07, #4 wc
1d098     CC 01 90 3D |  if_ae	jmp	#LR__2529
1d09c     15 29 02 F6 | 	mov	local06, local07
1d0a0     02 28 66 F0 | 	shl	local06, #2
1d0a4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d0a8     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1d0ac     14 29 0A FB | 	rdlong	local06, local06 wz
1d0b0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d0b4     A8 01 90 AD |  if_e	jmp	#LR__2528
1d0b8     15 25 02 F6 | 	mov	local04, local07
1d0bc     02 24 66 F0 | 	shl	local04, #2
1d0c0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d0c4     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1d0c8     12 13 02 FB | 	rdlong	arg01, local04
1d0cc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d0d0     09 2D 02 F6 | 	mov	local08, arg01
1d0d4     97 06 48 FB | 	callpa	#(@LR__2519-@LR__2518)>>2,fcache_load_ptr_
1d0d8                 | LR__2518
1d0d8     16 FB C9 FA | 	rdbyte	result1, local08 wz
1d0dc     01 2C 06 51 |  if_ne	add	local08, #1
1d0e0     F4 FF 9F 5D |  if_ne	jmp	#LR__2518
1d0e4                 | LR__2519
1d0e4     09 2D 82 F1 | 	sub	local08, arg01
1d0e8     16 2F 02 F6 | 	mov	local09, local08
1d0ec     17 25 02 F6 | 	mov	local04, local09
1d0f0     0F 25 02 F1 | 	add	local04, local01
1d0f4     12 29 C2 FA | 	rdbyte	local06, local04
1d0f8     2F 28 0E F2 | 	cmp	local06, #47 wz
1d0fc     17 31 02 56 |  if_ne	mov	local10, local09
1d100     0F 31 02 51 |  if_ne	add	local10, local01
1d104     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1d108     54 01 90 5D |  if_ne	jmp	#LR__2527
1d10c     15 17 02 F6 | 	mov	arg03, local07
1d110     02 16 66 F0 | 	shl	arg03, #2
1d114     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d118     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1d11c     0B 15 02 FB | 	rdlong	arg02, arg03
1d120     17 17 02 F6 | 	mov	arg03, local09
1d124     0F 13 02 F6 | 	mov	arg01, local01
1d128     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d12c     3C 49 B0 FD | 	call	#__system__strncmp
1d130     00 FA 4D F2 | 	cmps	result1, #0 wz
1d134     28 01 90 5D |  if_ne	jmp	#LR__2527
1d138     15 33 02 F6 | 	mov	local11, local07
1d13c     02 32 66 F0 | 	shl	local11, #2
1d140     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1d144     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1d148     19 35 02 FB | 	rdlong	local12, local11
1d14c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1d150     97 22 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
1d154                 | LR__2520
1d154     17 29 02 F6 | 	mov	local06, local09
1d158     01 28 06 F1 | 	add	local06, #1
1d15c     0F 29 02 F1 | 	add	local06, local01
1d160     14 33 C2 FA | 	rdbyte	local11, local06
1d164     2E 32 0E F2 | 	cmp	local11, #46 wz
1d168     2C 00 90 5D |  if_ne	jmp	#LR__2522
1d16c     17 33 02 F6 | 	mov	local11, local09
1d170     02 32 06 F1 | 	add	local11, #2
1d174     0F 33 02 F1 | 	add	local11, local01
1d178     19 31 C2 FA | 	rdbyte	local10, local11
1d17c     2F 30 0E F2 | 	cmp	local10, #47 wz
1d180     17 37 02 56 |  if_ne	mov	local13, local09
1d184     02 36 06 51 |  if_ne	add	local13, #2
1d188     0F 37 02 51 |  if_ne	add	local13, local01
1d18c     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1d190     01 2E 06 A1 |  if_e	add	local09, #1
1d194     BC FF 9F AD |  if_e	jmp	#LR__2520
1d198                 | LR__2521
1d198                 | LR__2522
1d198     00 22 0E F2 | 	cmp	local03, #0 wz
1d19c     11 13 02 56 |  if_ne	mov	arg01, local03
1d1a0     0F 15 02 56 |  if_ne	mov	arg02, local01
1d1a4     00 17 06 56 |  if_ne	mov	arg03, #256
1d1a8     14 48 B0 5D |  if_ne	call	#__system__strncpy
1d1ac     0F 15 02 F6 | 	mov	arg02, local01
1d1b0     17 15 02 F1 | 	add	arg02, local09
1d1b4     01 14 06 F1 | 	add	arg02, #1
1d1b8     0F 13 02 F6 | 	mov	arg01, local01
1d1bc     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1d1c0     0F 13 02 F6 | 	mov	arg01, local01
1d1c4     09 2D 02 F6 | 	mov	local08, arg01
1d1c8     97 06 48 FB | 	callpa	#(@LR__2524-@LR__2523)>>2,fcache_load_ptr_
1d1cc                 | LR__2523
1d1cc     16 FB C9 FA | 	rdbyte	result1, local08 wz
1d1d0     01 2C 06 51 |  if_ne	add	local08, #1
1d1d4     F4 FF 9F 5D |  if_ne	jmp	#LR__2523
1d1d8                 | LR__2524
1d1d8     09 2D 82 F1 | 	sub	local08, arg01
1d1dc     16 2F 02 F6 | 	mov	local09, local08
1d1e0                 | LR__2525
1d1e0     01 2E 56 F2 | 	cmps	local09, #1 wc
1d1e4     70 00 90 CD |  if_b	jmp	#LR__2526
1d1e8     17 25 02 F6 | 	mov	local04, local09
1d1ec     0F 25 02 F1 | 	add	local04, local01
1d1f0     12 33 C2 FA | 	rdbyte	local11, local04
1d1f4     2F 32 0E F2 | 	cmp	local11, #47 wz
1d1f8     17 33 02 A6 |  if_e	mov	local11, local09
1d1fc     0F 33 02 A1 |  if_e	add	local11, local01
1d200     19 01 48 AC |  if_e	wrbyte	#0, local11
1d204     01 2E 86 A1 |  if_e	sub	local09, #1
1d208     D4 FF 9F AD |  if_e	jmp	#LR__2525
1d20c     17 25 02 F6 | 	mov	local04, local09
1d210     0F 25 02 F1 | 	add	local04, local01
1d214     12 33 C2 FA | 	rdbyte	local11, local04
1d218     2E 32 0E F2 | 	cmp	local11, #46 wz
1d21c     38 00 90 5D |  if_ne	jmp	#LR__2526
1d220     02 2E 56 F2 | 	cmps	local09, #2 wc
1d224     30 00 90 CD |  if_b	jmp	#LR__2526
1d228     17 39 02 F6 | 	mov	local14, local09
1d22c     01 38 86 F1 | 	sub	local14, #1
1d230     0F 39 02 F1 | 	add	local14, local01
1d234     1C 27 C2 FA | 	rdbyte	local05, local14
1d238     2F 26 0E F2 | 	cmp	local05, #47 wz
1d23c     18 00 90 5D |  if_ne	jmp	#LR__2526
1d240     17 25 02 F6 | 	mov	local04, local09
1d244     01 24 86 F1 | 	sub	local04, #1
1d248     0F 25 02 F1 | 	add	local04, local01
1d24c     12 01 48 FC | 	wrbyte	#0, local04
1d250     02 2E 86 F1 | 	sub	local09, #2
1d254     88 FF 9F FD | 	jmp	#LR__2525
1d258                 | LR__2526
1d258     1A FB 01 F6 | 	mov	result1, local12
1d25c     1C 00 90 FD | 	jmp	#LR__2530
1d260                 | LR__2527
1d260                 | LR__2528
1d260     01 2A 06 F1 | 	add	local07, #1
1d264     2C FE 9F FD | 	jmp	#LR__2517
1d268                 | LR__2529
1d268     03 00 00 FF 
1d26c     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1d270     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1d274     03 00 00 FF 
1d278     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1d27c                 | LR__2530
1d27c     A7 F0 03 F6 | 	mov	ptra, fp
1d280     B2 00 A0 FD | 	call	#popregs_
1d284                 | __system____getvfsforfile_ret
1d284     2D 00 64 FD | 	ret
1d288                 | 
1d288                 | __system___basic_open
1d288     05 4A 05 F6 | 	mov	COUNT_, #5
1d28c     A8 00 A0 FD | 	call	#pushregs_
1d290     0A 1F 02 F6 | 	mov	local01, arg02
1d294     0B 21 02 F6 | 	mov	local02, arg03
1d298     0C 23 02 F6 | 	mov	local03, arg04
1d29c     00 24 06 F6 | 	mov	local04, #0
1d2a0     F4 46 B0 FD | 	call	#__system____getftab
1d2a4     FD 26 0A F6 | 	mov	local05, result1 wz
1d2a8     18 00 90 5D |  if_ne	jmp	#LR__2540
1d2ac     EE 12 02 F6 | 	mov	arg01, abortchain
1d2b0     0C 14 06 F6 | 	mov	arg02, #12
1d2b4     01 16 06 F6 | 	mov	arg03, #1
1d2b8     DA 00 A0 FD | 	call	#__longjmp
1d2bc     01 FA 65 F6 | 	neg	result1, #1
1d2c0     10 01 90 FD | 	jmp	#LR__2549
1d2c4                 | LR__2540
1d2c4     08 26 06 F1 | 	add	local05, #8
1d2c8     13 FB 09 FB | 	rdlong	result1, local05 wz
1d2cc     08 26 86 F1 | 	sub	local05, #8
1d2d0     13 13 02 56 |  if_ne	mov	arg01, local05
1d2d4     50 3E B0 5D |  if_ne	call	#__system___closeraw
1d2d8     00 1E 0E F2 | 	cmp	local01, #0 wz
1d2dc     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1d2e0     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1d2e4     3C 00 90 AD |  if_e	jmp	#LR__2542
1d2e8     0C 12 06 F6 | 	mov	arg01, #12
1d2ec     38 33 B0 FD | 	call	#__system___gc_alloc_managed
1d2f0     FD 24 0A F6 | 	mov	local04, result1 wz
1d2f4     18 00 90 5D |  if_ne	jmp	#LR__2541
1d2f8     EE 12 02 F6 | 	mov	arg01, abortchain
1d2fc     07 14 06 F6 | 	mov	arg02, #7
1d300     01 16 06 F6 | 	mov	arg03, #1
1d304     DA 00 A0 FD | 	call	#__longjmp
1d308     01 FA 65 F6 | 	neg	result1, #1
1d30c     C4 00 90 FD | 	jmp	#LR__2549
1d310                 | LR__2541
1d310     12 01 68 FC | 	wrlong	#0, local04
1d314     04 24 06 F1 | 	add	local04, #4
1d318     12 01 68 FC | 	wrlong	#0, local04
1d31c     04 24 86 F1 | 	sub	local04, #4
1d320     13 25 62 FC | 	wrlong	local04, local05
1d324                 | LR__2542
1d324     00 1E 0E F2 | 	cmp	local01, #0 wz
1d328     1C 00 90 AD |  if_e	jmp	#LR__2543
1d32c     12 1F 62 FC | 	wrlong	local01, local04
1d330     12 FB 01 F6 | 	mov	result1, local04
1d334     77 FA 25 F4 | 	bith	result1, #119
1d338     1C 26 06 F1 | 	add	local05, #28
1d33c     13 FB 61 FC | 	wrlong	result1, local05
1d340     1C 26 86 F1 | 	sub	local05, #28
1d344     0C 00 90 FD | 	jmp	#LR__2544
1d348                 | LR__2543
1d348     1C 26 06 F1 | 	add	local05, #28
1d34c     13 01 68 FC | 	wrlong	#0, local05
1d350     1C 26 86 F1 | 	sub	local05, #28
1d354                 | LR__2544
1d354     00 20 0E F2 | 	cmp	local02, #0 wz
1d358     28 00 90 AD |  if_e	jmp	#LR__2545
1d35c     04 24 06 F1 | 	add	local04, #4
1d360     12 21 62 FC | 	wrlong	local02, local04
1d364     04 24 86 F1 | 	sub	local04, #4
1d368     12 FB 01 F6 | 	mov	result1, local04
1d36c     00 C8 03 FF 
1d370     00 FA 45 F5 | 	or	result1, ##126877696
1d374     20 26 06 F1 | 	add	local05, #32
1d378     13 FB 61 FC | 	wrlong	result1, local05
1d37c     20 26 86 F1 | 	sub	local05, #32
1d380     0C 00 90 FD | 	jmp	#LR__2546
1d384                 | LR__2545
1d384     20 26 06 F1 | 	add	local05, #32
1d388     13 01 68 FC | 	wrlong	#0, local05
1d38c     20 26 86 F1 | 	sub	local05, #32
1d390                 | LR__2546
1d390     00 22 0E F2 | 	cmp	local03, #0 wz
1d394     24 00 90 AD |  if_e	jmp	#LR__2547
1d398     08 24 06 F1 | 	add	local04, #8
1d39c     12 23 62 FC | 	wrlong	local03, local04
1d3a0     08 24 86 F1 | 	sub	local04, #8
1d3a4     00 D0 03 FF 
1d3a8     00 24 46 F5 | 	or	local04, ##127926272
1d3ac     24 26 06 F1 | 	add	local05, #36
1d3b0     13 25 62 FC | 	wrlong	local04, local05
1d3b4     24 26 86 F1 | 	sub	local05, #36
1d3b8     0C 00 90 FD | 	jmp	#LR__2548
1d3bc                 | LR__2547
1d3bc     24 26 06 F1 | 	add	local05, #36
1d3c0     13 01 68 FC | 	wrlong	#0, local05
1d3c4     24 26 86 F1 | 	sub	local05, #36
1d3c8                 | LR__2548
1d3c8     08 26 06 F1 | 	add	local05, #8
1d3cc     13 0F 68 FC | 	wrlong	#7, local05
1d3d0     00 FA 05 F6 | 	mov	result1, #0
1d3d4                 | LR__2549
1d3d4     A7 F0 03 F6 | 	mov	ptra, fp
1d3d8     B2 00 A0 FD | 	call	#popregs_
1d3dc                 | __system___basic_open_ret
1d3dc     2D 00 64 FD | 	ret
1d3e0                 | 
1d3e0                 | __system___basic_open_string
1d3e0     04 4A 05 F6 | 	mov	COUNT_, #4
1d3e4     A8 00 A0 FD | 	call	#pushregs_
1d3e8     0A 1F 02 F6 | 	mov	local01, arg02
1d3ec     0B 21 02 F6 | 	mov	local02, arg03
1d3f0     A4 45 B0 FD | 	call	#__system____getftab
1d3f4     FD 22 0A F6 | 	mov	local03, result1 wz
1d3f8     18 00 90 5D |  if_ne	jmp	#LR__2550
1d3fc     EE 12 02 F6 | 	mov	arg01, abortchain
1d400     0C 14 06 F6 | 	mov	arg02, #12
1d404     01 16 06 F6 | 	mov	arg03, #1
1d408     DA 00 A0 FD | 	call	#__longjmp
1d40c     01 FA 65 F6 | 	neg	result1, #1
1d410     58 00 90 FD | 	jmp	#LR__2552
1d414                 | LR__2550
1d414     08 22 06 F1 | 	add	local03, #8
1d418     11 19 0A FB | 	rdlong	arg04, local03 wz
1d41c     08 22 86 F1 | 	sub	local03, #8
1d420     11 13 02 56 |  if_ne	mov	arg01, local03
1d424     00 3D B0 5D |  if_ne	call	#__system___closeraw
1d428     0F 15 02 F6 | 	mov	arg02, local01
1d42c     10 17 02 F6 | 	mov	arg03, local02
1d430     11 13 02 F6 | 	mov	arg01, local03
1d434     B6 19 06 F6 | 	mov	arg04, #438
1d438     E8 39 B0 FD | 	call	#__system___openraw
1d43c     FD 24 02 F6 | 	mov	local04, result1
1d440     00 24 56 F2 | 	cmps	local04, #0 wc
1d444     20 00 90 3D |  if_ae	jmp	#LR__2551
1d448     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1d44c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1d450     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1d454     EE 12 02 F6 | 	mov	arg01, abortchain
1d458     01 16 06 F6 | 	mov	arg03, #1
1d45c     DA 00 A0 FD | 	call	#__longjmp
1d460     01 FA 65 F6 | 	neg	result1, #1
1d464     04 00 90 FD | 	jmp	#LR__2552
1d468                 | LR__2551
1d468     12 FB 01 F6 | 	mov	result1, local04
1d46c                 | LR__2552
1d46c     A7 F0 03 F6 | 	mov	ptra, fp
1d470     B2 00 A0 FD | 	call	#popregs_
1d474                 | __system___basic_open_string_ret
1d474     2D 00 64 FD | 	ret
1d478                 | 
1d478                 | __system___basic_print_nl
1d478     0A 14 06 F6 | 	mov	arg02, #10
1d47c     00 16 06 F6 | 	mov	arg03, #0
1d480     08 00 B0 FD | 	call	#__system___basic_print_char
1d484     01 FA 05 F6 | 	mov	result1, #1
1d488                 | __system___basic_print_nl_ret
1d488     2D 00 64 FD | 	ret
1d48c                 | 
1d48c                 | __system___basic_print_char
1d48c     03 4A 05 F6 | 	mov	COUNT_, #3
1d490     A8 00 A0 FD | 	call	#pushregs_
1d494     0A 1F 02 F6 | 	mov	local01, arg02
1d498     50 4C B0 FD | 	call	#__system___gettxfunc
1d49c     FD 20 0A F6 | 	mov	local02, result1 wz
1d4a0     00 FA 05 A6 |  if_e	mov	result1, #0
1d4a4     30 00 90 AD |  if_e	jmp	#LR__2560
1d4a8     10 23 02 F6 | 	mov	local03, local02
1d4ac     13 20 46 F7 | 	zerox	local02, #19
1d4b0     14 22 46 F0 | 	shr	local03, #20
1d4b4     02 22 66 F0 | 	shl	local03, #2
1d4b8     ED 22 02 F1 | 	add	local03, __methods__
1d4bc     11 23 02 FB | 	rdlong	local03, local03
1d4c0     0F 13 02 F6 | 	mov	arg01, local01
1d4c4     F2 1E 02 F6 | 	mov	local01, objptr
1d4c8     10 E5 01 F6 | 	mov	objptr, local02
1d4cc     2D 22 62 FD | 	call	local03
1d4d0     0F E5 01 F6 | 	mov	objptr, local01
1d4d4     01 FA 05 F6 | 	mov	result1, #1
1d4d8                 | LR__2560
1d4d8     A7 F0 03 F6 | 	mov	ptra, fp
1d4dc     B2 00 A0 FD | 	call	#popregs_
1d4e0                 | __system___basic_print_char_ret
1d4e0     2D 00 64 FD | 	ret
1d4e4                 | 
1d4e4                 | __system___basic_print_string
1d4e4     03 4A 05 F6 | 	mov	COUNT_, #3
1d4e8     A8 00 A0 FD | 	call	#pushregs_
1d4ec     0A 1F 02 F6 | 	mov	local01, arg02
1d4f0     0B 21 02 F6 | 	mov	local02, arg03
1d4f4     F4 4B B0 FD | 	call	#__system___gettxfunc
1d4f8     FD 22 0A F6 | 	mov	local03, result1 wz
1d4fc     00 FA 05 A6 |  if_e	mov	result1, #0
1d500     18 00 90 AD |  if_e	jmp	#LR__2570
1d504     00 1E 0E F2 | 	cmp	local01, #0 wz
1d508     00 FA 05 A6 |  if_e	mov	result1, #0
1d50c     11 13 02 56 |  if_ne	mov	arg01, local03
1d510     10 15 02 56 |  if_ne	mov	arg02, local02
1d514     0F 17 02 56 |  if_ne	mov	arg03, local01
1d518     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1d51c                 | LR__2570
1d51c     A7 F0 03 F6 | 	mov	ptra, fp
1d520     B2 00 A0 FD | 	call	#popregs_
1d524                 | __system___basic_print_string_ret
1d524     2D 00 64 FD | 	ret
1d528                 | 
1d528                 | __system___basic_print_integer
1d528     04 4A 05 F6 | 	mov	COUNT_, #4
1d52c     A8 00 A0 FD | 	call	#pushregs_
1d530     0A 1F 02 F6 | 	mov	local01, arg02
1d534     0B 21 02 F6 | 	mov	local02, arg03
1d538     0C 23 02 F6 | 	mov	local03, arg04
1d53c     AC 4B B0 FD | 	call	#__system___gettxfunc
1d540     FD 24 0A F6 | 	mov	local04, result1 wz
1d544     00 FA 05 A6 |  if_e	mov	result1, #0
1d548     12 13 02 56 |  if_ne	mov	arg01, local04
1d54c     10 15 02 56 |  if_ne	mov	arg02, local02
1d550     0F 17 02 56 |  if_ne	mov	arg03, local01
1d554     11 19 02 56 |  if_ne	mov	arg04, local03
1d558     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1d55c     A7 F0 03 F6 | 	mov	ptra, fp
1d560     B2 00 A0 FD | 	call	#popregs_
1d564                 | __system___basic_print_integer_ret
1d564     2D 00 64 FD | 	ret
1d568                 | 
1d568                 | __system___basic_print_unsigned
1d568     03 4A 05 F6 | 	mov	COUNT_, #3
1d56c     A8 00 A0 FD | 	call	#pushregs_
1d570     0A 1F 02 F6 | 	mov	local01, arg02
1d574     0B 21 02 F6 | 	mov	local02, arg03
1d578     0C 23 02 F6 | 	mov	local03, arg04
1d57c     6C 4B B0 FD | 	call	#__system___gettxfunc
1d580     FD 12 0A F6 | 	mov	arg01, result1 wz
1d584     00 FA 05 A6 |  if_e	mov	result1, #0
1d588     3A 20 26 54 |  if_ne	bith	local02, #58
1d58c     10 15 02 56 |  if_ne	mov	arg02, local02
1d590     0F 17 02 56 |  if_ne	mov	arg03, local01
1d594     11 19 02 56 |  if_ne	mov	arg04, local03
1d598     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1d59c     A7 F0 03 F6 | 	mov	ptra, fp
1d5a0     B2 00 A0 FD | 	call	#popregs_
1d5a4                 | __system___basic_print_unsigned_ret
1d5a4     2D 00 64 FD | 	ret
1d5a8                 | 
1d5a8                 | __system___basic_get_char
1d5a8     03 4A 05 F6 | 	mov	COUNT_, #3
1d5ac     A8 00 A0 FD | 	call	#pushregs_
1d5b0     7C 4B B0 FD | 	call	#__system___getrxfunc
1d5b4     FD 1E 0A F6 | 	mov	local01, result1 wz
1d5b8     01 FA 65 A6 |  if_e	neg	result1, #1
1d5bc     28 00 90 AD |  if_e	jmp	#LR__2580
1d5c0     0F 21 02 F6 | 	mov	local02, local01
1d5c4     13 1E 46 F7 | 	zerox	local01, #19
1d5c8     14 20 46 F0 | 	shr	local02, #20
1d5cc     02 20 66 F0 | 	shl	local02, #2
1d5d0     ED 20 02 F1 | 	add	local02, __methods__
1d5d4     10 21 02 FB | 	rdlong	local02, local02
1d5d8     F2 22 02 F6 | 	mov	local03, objptr
1d5dc     0F E5 01 F6 | 	mov	objptr, local01
1d5e0     2D 20 62 FD | 	call	local02
1d5e4     11 E5 01 F6 | 	mov	objptr, local03
1d5e8                 | LR__2580
1d5e8     A7 F0 03 F6 | 	mov	ptra, fp
1d5ec     B2 00 A0 FD | 	call	#popregs_
1d5f0                 | __system___basic_get_char_ret
1d5f0     2D 00 64 FD | 	ret
1d5f4                 | 
1d5f4                 | __system___basic_get
1d5f4     04 4A 05 F6 | 	mov	COUNT_, #4
1d5f8     A8 00 A0 FD | 	call	#pushregs_
1d5fc     0D 1F 02 F6 | 	mov	local01, arg05
1d600     0F 19 02 FD | 	qmul	arg04, local01
1d604     09 21 02 F6 | 	mov	local02, arg01
1d608     0B 23 02 F6 | 	mov	local03, arg03
1d60c     00 14 0E F2 | 	cmp	arg02, #0 wz
1d610     01 14 86 51 |  if_ne	sub	arg02, #1
1d614     10 13 02 56 |  if_ne	mov	arg01, local02
1d618     00 16 06 56 |  if_ne	mov	arg03, #0
1d61c     18 24 62 FD | 	getqx	local04
1d620     BC 41 B0 5D |  if_ne	call	#__system__lseek
1d624     11 15 02 F6 | 	mov	arg02, local03
1d628     12 17 02 F6 | 	mov	arg03, local04
1d62c     10 13 02 F6 | 	mov	arg01, local02
1d630     34 41 B0 FD | 	call	#__system__read
1d634     FD 24 02 F6 | 	mov	local04, result1
1d638     01 24 56 F2 | 	cmps	local04, #1 wc
1d63c     10 00 90 CD |  if_b	jmp	#LR__2590
1d640     12 65 02 F6 | 	mov	muldiva_, local04
1d644     0F 67 02 F6 | 	mov	muldivb_, local01
1d648     BA 00 A0 FD | 	call	#divide_
1d64c     33 25 02 F6 | 	mov	local04, muldivb_
1d650                 | LR__2590
1d650     12 FB 01 F6 | 	mov	result1, local04
1d654     A7 F0 03 F6 | 	mov	ptra, fp
1d658     B2 00 A0 FD | 	call	#popregs_
1d65c                 | __system___basic_get_ret
1d65c     2D 00 64 FD | 	ret
1d660                 | 
1d660                 | __system____lockio
1d660     0C 4B B0 FD | 	call	#__system___getiolock_0474
1d664     FD 12 02 F6 | 	mov	arg01, result1
1d668     74 F1 BF FD | 	call	#__system___lockmem
1d66c     00 FA 05 F6 | 	mov	result1, #0
1d670                 | __system____lockio_ret
1d670     2D 00 64 FD | 	ret
1d674                 | 
1d674                 | __system____unlockio
1d674     F8 4A B0 FD | 	call	#__system___getiolock_0474
1d678     FD 00 68 FC | 	wrlong	#0, result1
1d67c     00 FA 05 F6 | 	mov	result1, #0
1d680                 | __system____unlockio_ret
1d680     2D 00 64 FD | 	ret
1d684                 | 
1d684                 | __system___fmtchar
1d684     00 4A 05 F6 | 	mov	COUNT_, #0
1d688     A8 00 A0 FD | 	call	#pushregs_
1d68c     10 F0 07 F1 | 	add	ptra, #16
1d690     04 4E 05 F1 | 	add	fp, #4
1d694     A7 12 62 FC | 	wrlong	arg01, fp
1d698     04 4E 05 F1 | 	add	fp, #4
1d69c     A7 14 62 FC | 	wrlong	arg02, fp
1d6a0     04 4E 05 F1 | 	add	fp, #4
1d6a4     A7 16 62 FC | 	wrlong	arg03, fp
1d6a8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1d6ac     A7 16 62 FC | 	wrlong	arg03, fp
1d6b0     08 4E 85 F1 | 	sub	fp, #8
1d6b4     A7 12 02 FB | 	rdlong	arg01, fp
1d6b8     04 4E 05 F1 | 	add	fp, #4
1d6bc     A7 14 02 FB | 	rdlong	arg02, fp
1d6c0     04 4E 05 F1 | 	add	fp, #4
1d6c4     A7 16 02 F6 | 	mov	arg03, fp
1d6c8     0C 4E 85 F1 | 	sub	fp, #12
1d6cc     0C 00 B0 FD | 	call	#__system___fmtstr
1d6d0     A7 F0 03 F6 | 	mov	ptra, fp
1d6d4     B2 00 A0 FD | 	call	#popregs_
1d6d8                 | __system___fmtchar_ret
1d6d8     2D 00 64 FD | 	ret
1d6dc                 | 
1d6dc                 | __system___fmtstr
1d6dc     09 4A 05 F6 | 	mov	COUNT_, #9
1d6e0     A8 00 A0 FD | 	call	#pushregs_
1d6e4     09 1F 02 F6 | 	mov	local01, arg01
1d6e8     0A 21 02 F6 | 	mov	local02, arg02
1d6ec     0B 23 02 F6 | 	mov	local03, arg03
1d6f0     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1d6f4     11 13 02 F6 | 	mov	arg01, local03
1d6f8     09 25 02 F6 | 	mov	local04, arg01
1d6fc     97 06 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
1d700                 | LR__2600
1d700     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d704     01 24 06 51 |  if_ne	add	local04, #1
1d708     F4 FF 9F 5D |  if_ne	jmp	#LR__2600
1d70c                 | LR__2601
1d70c     09 25 82 F1 | 	sub	local04, arg01
1d710     00 18 0E F2 | 	cmp	arg04, #0 wz
1d714     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1d718     10 15 02 F6 | 	mov	arg02, local02
1d71c     12 17 02 F6 | 	mov	arg03, local04
1d720     0F 13 02 F6 | 	mov	arg01, local01
1d724     02 18 06 F6 | 	mov	arg04, #2
1d728     60 46 B0 FD | 	call	#__system___fmtpad
1d72c     FD 26 02 F6 | 	mov	local05, result1
1d730     00 26 56 F2 | 	cmps	local05, #0 wc
1d734     13 FB 01 C6 |  if_b	mov	result1, local05
1d738     80 00 90 CD |  if_b	jmp	#LR__2604
1d73c     01 24 56 F2 | 	cmps	local04, #1 wc
1d740     50 00 90 CD |  if_b	jmp	#LR__2603
1d744     12 29 02 F6 | 	mov	local06, local04
1d748                 | LR__2602
1d748     0F 2B 02 F6 | 	mov	local07, local01
1d74c     0F 2D 02 F6 | 	mov	local08, local01
1d750     13 2A 46 F7 | 	zerox	local07, #19
1d754     14 2C 46 F0 | 	shr	local08, #20
1d758     02 2C 66 F0 | 	shl	local08, #2
1d75c     ED 2C 02 F1 | 	add	local08, __methods__
1d760     16 2D 02 FB | 	rdlong	local08, local08
1d764     11 13 C2 FA | 	rdbyte	arg01, local03
1d768     F2 2E 02 F6 | 	mov	local09, objptr
1d76c     15 E5 01 F6 | 	mov	objptr, local07
1d770     01 22 06 F1 | 	add	local03, #1
1d774     2D 2C 62 FD | 	call	local08
1d778     17 E5 01 F6 | 	mov	objptr, local09
1d77c     FD 2E 02 F6 | 	mov	local09, result1
1d780     00 2E 56 F2 | 	cmps	local09, #0 wc
1d784     17 FB 01 C6 |  if_b	mov	result1, local09
1d788     30 00 90 CD |  if_b	jmp	#LR__2604
1d78c     17 27 02 F1 | 	add	local05, local09
1d790     ED 29 6E FB | 	djnz	local06, #LR__2602
1d794                 | LR__2603
1d794     10 15 02 F6 | 	mov	arg02, local02
1d798     12 17 02 F6 | 	mov	arg03, local04
1d79c     0F 13 02 F6 | 	mov	arg01, local01
1d7a0     01 18 06 F6 | 	mov	arg04, #1
1d7a4     E4 45 B0 FD | 	call	#__system___fmtpad
1d7a8     FD 2E 02 F6 | 	mov	local09, result1
1d7ac     00 2E 56 F2 | 	cmps	local09, #0 wc
1d7b0     17 FB 01 C6 |  if_b	mov	result1, local09
1d7b4     17 27 02 31 |  if_ae	add	local05, local09
1d7b8     13 FB 01 36 |  if_ae	mov	result1, local05
1d7bc                 | LR__2604
1d7bc     A7 F0 03 F6 | 	mov	ptra, fp
1d7c0     B2 00 A0 FD | 	call	#popregs_
1d7c4                 | __system___fmtstr_ret
1d7c4     2D 00 64 FD | 	ret
1d7c8                 | 
1d7c8                 | __system___fmtnum
1d7c8     0B 4A 05 F6 | 	mov	COUNT_, #11
1d7cc     A8 00 A0 FD | 	call	#pushregs_
1d7d0     09 1F 02 F6 | 	mov	local01, arg01
1d7d4     0A 21 02 F6 | 	mov	local02, arg02
1d7d8     0B 23 02 F6 | 	mov	local03, arg03
1d7dc     0C 25 02 F6 | 	mov	local04, arg04
1d7e0     F8 27 02 F6 | 	mov	local05, ptra
1d7e4     13 29 02 F6 | 	mov	local06, local05
1d7e8     00 2A 06 F6 | 	mov	local07, #0
1d7ec     10 2D 02 F6 | 	mov	local08, local02
1d7f0     10 2C 46 F0 | 	shr	local08, #16
1d7f4     3F 2C 06 F5 | 	and	local08, #63
1d7f8     10 2F E2 F8 | 	getbyte	local09, local02, #0
1d7fc     10 31 02 F6 | 	mov	local10, local02
1d800     1A 30 46 F0 | 	shr	local10, #26
1d804     03 30 06 F5 | 	and	local10, #3
1d808     18 33 02 F6 | 	mov	local11, local10
1d80c     01 2C 56 F2 | 	cmps	local08, #1 wc
1d810     44 F0 07 F1 | 	add	ptra, #68
1d814     01 2C 86 31 |  if_ae	sub	local08, #1
1d818     41 2E 56 F2 | 	cmps	local09, #65 wc
1d81c     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1d820     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1d824     03 32 0E F2 | 	cmp	local11, #3 wz
1d828     00 32 06 A6 |  if_e	mov	local11, #0
1d82c     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1d830     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1d834     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1d838     00 32 0E F2 | 	cmp	local11, #0 wz
1d83c     4C 00 90 AD |  if_e	jmp	#LR__2613
1d840     01 2A 06 F6 | 	mov	local07, #1
1d844     17 2D 0A F2 | 	cmp	local08, local09 wz
1d848     18 00 90 5D |  if_ne	jmp	#LR__2611
1d84c     05 2C 6E FB | 	djnz	local08, #LR__2610
1d850     0F 13 02 F6 | 	mov	arg01, local01
1d854     10 15 02 F6 | 	mov	arg02, local02
1d858     23 16 06 F6 | 	mov	arg03, #35
1d85c     24 FE BF FD | 	call	#__system___fmtchar
1d860     88 00 90 FD | 	jmp	#LR__2617
1d864                 | LR__2610
1d864                 | LR__2611
1d864     02 32 0E F2 | 	cmp	local11, #2 wz
1d868     14 31 02 A6 |  if_e	mov	local10, local06
1d86c     01 28 06 A1 |  if_e	add	local06, #1
1d870     18 41 48 AC |  if_e	wrbyte	#32, local10
1d874     14 00 90 AD |  if_e	jmp	#LR__2612
1d878     04 32 0E F2 | 	cmp	local11, #4 wz
1d87c     14 5B 48 AC |  if_e	wrbyte	#45, local06
1d880     01 28 06 A1 |  if_e	add	local06, #1
1d884     14 57 48 5C |  if_ne	wrbyte	#43, local06
1d888     01 28 06 51 |  if_ne	add	local06, #1
1d88c                 | LR__2612
1d88c                 | LR__2613
1d88c     14 13 02 F6 | 	mov	arg01, local06
1d890     11 15 02 F6 | 	mov	arg02, local03
1d894     12 17 02 F6 | 	mov	arg03, local04
1d898     16 19 02 F6 | 	mov	arg04, local08
1d89c     00 1A 06 F6 | 	mov	arg05, #0
1d8a0     1D 20 2E F4 | 	testbn	local02, #29 wz
1d8a4     01 1A 06 56 |  if_ne	mov	arg05, #1
1d8a8     A8 45 B0 FD | 	call	#__system___uitoa
1d8ac     FD 2A 02 F1 | 	add	local07, result1
1d8b0     17 2B 5A F2 | 	cmps	local07, local09 wcz
1d8b4     24 00 90 ED |  if_be	jmp	#LR__2616
1d8b8     97 0E 48 FB | 	callpa	#(@LR__2615-@LR__2614)>>2,fcache_load_ptr_
1d8bc                 | LR__2614
1d8bc     17 31 02 F6 | 	mov	local10, local09
1d8c0     01 30 56 F2 | 	cmps	local10, #1 wc
1d8c4     01 2E 86 F1 | 	sub	local09, #1
1d8c8     14 31 02 36 |  if_ae	mov	local10, local06
1d8cc     01 28 06 31 |  if_ae	add	local06, #1
1d8d0     18 47 48 3C |  if_ae	wrbyte	#35, local10
1d8d4     E4 FF 9F 3D |  if_ae	jmp	#LR__2614
1d8d8                 | LR__2615
1d8d8     14 01 48 FC | 	wrbyte	#0, local06
1d8dc                 | LR__2616
1d8dc     0F 13 02 F6 | 	mov	arg01, local01
1d8e0     10 15 02 F6 | 	mov	arg02, local02
1d8e4     13 17 02 F6 | 	mov	arg03, local05
1d8e8     F0 FD BF FD | 	call	#__system___fmtstr
1d8ec                 | LR__2617
1d8ec     A7 F0 03 F6 | 	mov	ptra, fp
1d8f0     B2 00 A0 FD | 	call	#popregs_
1d8f4                 | __system___fmtnum_ret
1d8f4     2D 00 64 FD | 	ret
1d8f8                 | 
1d8f8                 | __system___fmtfloat
1d8f8     10 4A 05 F6 | 	mov	COUNT_, #16
1d8fc     A8 00 A0 FD | 	call	#pushregs_
1d900     24 F1 07 F1 | 	add	ptra, #292
1d904     04 4E 05 F1 | 	add	fp, #4
1d908     A7 12 62 FC | 	wrlong	arg01, fp
1d90c     04 4E 05 F1 | 	add	fp, #4
1d910     A7 14 62 FC | 	wrlong	arg02, fp
1d914     04 4E 05 F1 | 	add	fp, #4
1d918     A7 16 62 FC | 	wrlong	arg03, fp
1d91c     04 4E 05 F1 | 	add	fp, #4
1d920     A7 18 62 FC | 	wrlong	arg04, fp
1d924     0C 4E 05 F1 | 	add	fp, #12
1d928     A7 14 68 FC | 	wrlong	#10, fp
1d92c     08 4E 05 F1 | 	add	fp, #8
1d930     A7 00 68 FC | 	wrlong	#0, fp
1d934     08 4E 05 F1 | 	add	fp, #8
1d938     A7 00 68 FC | 	wrlong	#0, fp
1d93c     08 4E 05 F1 | 	add	fp, #8
1d940     A7 00 68 FC | 	wrlong	#0, fp
1d944     04 4E 05 F1 | 	add	fp, #4
1d948     A7 04 68 FC | 	wrlong	#2, fp
1d94c     04 4E 05 F1 | 	add	fp, #4
1d950     A7 00 68 FC | 	wrlong	#0, fp
1d954     04 4E 05 F1 | 	add	fp, #4
1d958     A7 00 68 FC | 	wrlong	#0, fp
1d95c     04 4E 05 F1 | 	add	fp, #4
1d960     A7 00 68 FC | 	wrlong	#0, fp
1d964     04 4E 05 F1 | 	add	fp, #4
1d968     A7 00 68 FC | 	wrlong	#0, fp
1d96c     18 4E 05 F1 | 	add	fp, #24
1d970     A7 00 68 FC | 	wrlong	#0, fp
1d974     68 4E 05 F1 | 	add	fp, #104
1d978     A7 1E 02 F6 | 	mov	local01, fp
1d97c     08 4E 85 F1 | 	sub	fp, #8
1d980     A7 1E 62 FC | 	wrlong	local01, fp
1d984     04 4E 05 F1 | 	add	fp, #4
1d988     A7 1E 62 FC | 	wrlong	local01, fp
1d98c     BC 4E 85 F1 | 	sub	fp, #188
1d990     A7 1E 02 FB | 	rdlong	local01, fp
1d994     10 1E 46 F0 | 	shr	local01, #16
1d998     3F 1E 06 F5 | 	and	local01, #63
1d99c     B0 4E 05 F1 | 	add	fp, #176
1d9a0     A7 1E 62 FC | 	wrlong	local01, fp
1d9a4     B0 4E 85 F1 | 	sub	fp, #176
1d9a8     A7 1E 02 FB | 	rdlong	local01, fp
1d9ac     1C 1E 46 F0 | 	shr	local01, #28
1d9b0     01 1E 06 F5 | 	and	local01, #1
1d9b4     08 4F 05 F1 | 	add	fp, #264
1d9b8     A7 1E 62 FC | 	wrlong	local01, fp
1d9bc     58 4E 85 F1 | 	sub	fp, #88
1d9c0     A7 1E 0A FB | 	rdlong	local01, fp wz
1d9c4     B8 4E 85 F1 | 	sub	fp, #184
1d9c8     3C 00 90 5D |  if_ne	jmp	#LR__2621
1d9cc     10 4E 05 F1 | 	add	fp, #16
1d9d0     A7 1E 02 FB | 	rdlong	local01, fp
1d9d4     10 4E 85 F1 | 	sub	fp, #16
1d9d8     61 1E 0E F2 | 	cmp	local01, #97 wz
1d9dc     18 00 90 5D |  if_ne	jmp	#LR__2620
1d9e0     B8 4E 05 F1 | 	add	fp, #184
1d9e4     A7 1A 68 FC | 	wrlong	#13, fp
1d9e8     84 4E 85 F1 | 	sub	fp, #132
1d9ec     A7 02 68 FC | 	wrlong	#1, fp
1d9f0     34 4E 85 F1 | 	sub	fp, #52
1d9f4     24 00 90 FD | 	jmp	#LR__2622
1d9f8                 | LR__2620
1d9f8     B8 4E 05 F1 | 	add	fp, #184
1d9fc     A7 0C 68 FC | 	wrlong	#6, fp
1da00     B8 4E 85 F1 | 	sub	fp, #184
1da04     14 00 90 FD | 	jmp	#LR__2622
1da08                 | LR__2621
1da08     B8 4E 05 F1 | 	add	fp, #184
1da0c     A7 1E 02 FB | 	rdlong	local01, fp
1da10     01 1E 86 F1 | 	sub	local01, #1
1da14     A7 1E 62 FC | 	wrlong	local01, fp
1da18     B8 4E 85 F1 | 	sub	fp, #184
1da1c                 | LR__2622
1da1c     08 4E 05 F1 | 	add	fp, #8
1da20     A7 1E 02 FB | 	rdlong	local01, fp
1da24     16 1E 46 F0 | 	shr	local01, #22
1da28     03 1E 06 F5 | 	and	local01, #3
1da2c     04 4F 05 F1 | 	add	fp, #260
1da30     A7 1E 62 FC | 	wrlong	local01, fp
1da34     04 4F 85 F1 | 	sub	fp, #260
1da38     A7 1E 02 FB | 	rdlong	local01, fp
1da3c     1D 1E 46 F0 | 	shr	local01, #29
1da40     01 1E 06 F5 | 	and	local01, #1
1da44     B4 4E 05 F1 | 	add	fp, #180
1da48     A7 1E 62 FC | 	wrlong	local01, fp
1da4c     B4 4E 85 F1 | 	sub	fp, #180
1da50     A7 1E 02 FB | 	rdlong	local01, fp
1da54     0F 1F EA F8 | 	getbyte	local01, local01, #1
1da58     60 4E 05 F1 | 	add	fp, #96
1da5c     A7 1E 62 FC | 	wrlong	local01, fp
1da60     60 4E 85 F1 | 	sub	fp, #96
1da64     A7 1E 02 FB | 	rdlong	local01, fp
1da68     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1da6c     64 4E 05 F1 | 	add	fp, #100
1da70     A7 1E 62 FC | 	wrlong	local01, fp
1da74     00 1E 06 F6 | 	mov	local01, #0
1da78     5C 4E 85 F1 | 	sub	fp, #92
1da7c     A7 1A 02 FB | 	rdlong	arg05, fp
1da80     65 1A 0E F2 | 	cmp	arg05, #101 wz
1da84     01 1E 06 A6 |  if_e	mov	local01, #1
1da88     14 4E 05 F1 | 	add	fp, #20
1da8c     A7 1E 62 FC | 	wrlong	local01, fp
1da90     98 4E 05 F1 | 	add	fp, #152
1da94     A7 20 0A FB | 	rdlong	local02, fp wz
1da98     45 1E 06 56 |  if_ne	mov	local01, #69
1da9c     65 1E 06 A6 |  if_e	mov	local01, #101
1daa0     8C 4E 85 F1 | 	sub	fp, #140
1daa4     A7 1E 62 FC | 	wrlong	local01, fp
1daa8     20 4E 85 F1 | 	sub	fp, #32
1daac     A7 1E 02 FB | 	rdlong	local01, fp
1dab0     10 4E 85 F1 | 	sub	fp, #16
1dab4     61 1E 0E F2 | 	cmp	local01, #97 wz
1dab8     4C 00 90 5D |  if_ne	jmp	#LR__2623
1dabc     24 4E 05 F1 | 	add	fp, #36
1dac0     A7 02 68 FC | 	wrlong	#1, fp
1dac4     98 4E 05 F1 | 	add	fp, #152
1dac8     A7 20 0A FB | 	rdlong	local02, fp wz
1dacc     50 1E 06 56 |  if_ne	mov	local01, #80
1dad0     70 1E 06 A6 |  if_e	mov	local01, #112
1dad4     8C 4E 85 F1 | 	sub	fp, #140
1dad8     A7 1E 62 FC | 	wrlong	local01, fp
1dadc     14 4E 85 F1 | 	sub	fp, #20
1dae0     A7 04 68 FC | 	wrlong	#2, fp
1dae4     1C 4E 05 F1 | 	add	fp, #28
1dae8     A7 02 68 FC | 	wrlong	#1, fp
1daec     84 4E 05 F1 | 	add	fp, #132
1daf0     A7 20 0A FB | 	rdlong	local02, fp wz
1daf4     58 1E 06 56 |  if_ne	mov	local01, #88
1daf8     78 1E 06 A6 |  if_e	mov	local01, #120
1dafc     7C 4E 85 F1 | 	sub	fp, #124
1db00     A7 1E 62 FC | 	wrlong	local01, fp
1db04     40 4E 85 F1 | 	sub	fp, #64
1db08                 | LR__2623
1db08     10 4E 05 F1 | 	add	fp, #16
1db0c     A7 1E 02 FB | 	rdlong	local01, fp
1db10     10 4E 85 F1 | 	sub	fp, #16
1db14     23 1E 0E F2 | 	cmp	local01, #35 wz
1db18     3C 00 90 5D |  if_ne	jmp	#LR__2626
1db1c     48 4E 05 F1 | 	add	fp, #72
1db20     A7 02 68 FC | 	wrlong	#1, fp
1db24     C8 4E 05 F1 | 	add	fp, #200
1db28     A7 1E 0A FB | 	rdlong	local01, fp wz
1db2c     10 4F 85 F1 | 	sub	fp, #272
1db30     18 00 90 AD |  if_e	jmp	#LR__2624
1db34     10 4E 05 F1 | 	add	fp, #16
1db38     A7 CC 68 FC | 	wrlong	#102, fp
1db3c     00 4F 05 F1 | 	add	fp, #256
1db40     A7 00 68 FC | 	wrlong	#0, fp
1db44     10 4F 85 F1 | 	sub	fp, #272
1db48     0C 00 90 FD | 	jmp	#LR__2625
1db4c                 | LR__2624
1db4c     10 4F 05 F1 | 	add	fp, #272
1db50     A7 02 68 FC | 	wrlong	#1, fp
1db54     10 4F 85 F1 | 	sub	fp, #272
1db58                 | LR__2625
1db58                 | LR__2626
1db58     08 4E 05 F1 | 	add	fp, #8
1db5c     A7 1E 02 FB | 	rdlong	local01, fp
1db60     1A 1E 46 F0 | 	shr	local01, #26
1db64     03 1E 06 F5 | 	and	local01, #3
1db68     5C 4E 05 F1 | 	add	fp, #92
1db6c     A7 1E 62 FC | 	wrlong	local01, fp
1db70     58 4E 85 F1 | 	sub	fp, #88
1db74     A7 FA 01 FB | 	rdlong	result1, fp
1db78     0C 4E 85 F1 | 	sub	fp, #12
1db7c     1F FA 4D F0 | 	shr	result1, #31 wz
1db80     20 00 90 AD |  if_e	jmp	#LR__2627
1db84     2C 4E 05 F1 | 	add	fp, #44
1db88     A7 5A 68 FC | 	wrlong	#45, fp
1db8c     20 4E 85 F1 | 	sub	fp, #32
1db90     A7 FA 01 FB | 	rdlong	result1, fp
1db94     1F FA E5 F4 | 	bitnot	result1, #31
1db98     A7 FA 61 FC | 	wrlong	result1, fp
1db9c     0C 4E 85 F1 | 	sub	fp, #12
1dba0     3C 00 90 FD | 	jmp	#LR__2629
1dba4                 | LR__2627
1dba4     64 4E 05 F1 | 	add	fp, #100
1dba8     A7 1E 02 FB | 	rdlong	local01, fp
1dbac     64 4E 85 F1 | 	sub	fp, #100
1dbb0     01 1E 0E F2 | 	cmp	local01, #1 wz
1dbb4     2C 4E 05 A1 |  if_e	add	fp, #44
1dbb8     A7 56 68 AC |  if_e	wrlong	#43, fp
1dbbc     2C 4E 85 A1 |  if_e	sub	fp, #44
1dbc0     1C 00 90 AD |  if_e	jmp	#LR__2628
1dbc4     64 4E 05 F1 | 	add	fp, #100
1dbc8     A7 1E 02 FB | 	rdlong	local01, fp
1dbcc     64 4E 85 F1 | 	sub	fp, #100
1dbd0     02 1E 0E F2 | 	cmp	local01, #2 wz
1dbd4     2C 4E 05 A1 |  if_e	add	fp, #44
1dbd8     A7 40 68 AC |  if_e	wrlong	#32, fp
1dbdc     2C 4E 85 A1 |  if_e	sub	fp, #44
1dbe0                 | LR__2628
1dbe0                 | LR__2629
1dbe0     08 4E 05 F1 | 	add	fp, #8
1dbe4     A7 1E 02 FB | 	rdlong	local01, fp
1dbe8     18 1E 46 F0 | 	shr	local01, #24
1dbec     03 1E 06 F5 | 	and	local01, #3
1dbf0     3C 4E 05 F1 | 	add	fp, #60
1dbf4     A7 1E 62 FC | 	wrlong	local01, fp
1dbf8     00 1E 06 F6 | 	mov	local01, #0
1dbfc     18 4E 85 F1 | 	sub	fp, #24
1dc00     A7 22 0A FB | 	rdlong	local03, fp wz
1dc04     2C 4E 85 F1 | 	sub	fp, #44
1dc08     18 00 90 5D |  if_ne	jmp	#LR__2630
1dc0c     1C 4E 05 F1 | 	add	fp, #28
1dc10     A7 24 02 FB | 	rdlong	local04, fp
1dc14     1C 4E 85 F1 | 	sub	fp, #28
1dc18     12 27 02 F6 | 	mov	local05, local04
1dc1c     0A 26 0E F2 | 	cmp	local05, #10 wz
1dc20     04 00 90 AD |  if_e	jmp	#LR__2631
1dc24                 | LR__2630
1dc24     01 1E 66 F5 | 	xor	local01, #1
1dc28                 | LR__2631
1dc28     3C 4E 05 F1 | 	add	fp, #60
1dc2c     A7 1E 62 FC | 	wrlong	local01, fp
1dc30     3C 4E 85 F1 | 	sub	fp, #60
1dc34     00 1E 0E F2 | 	cmp	local01, #0 wz
1dc38     0C 01 90 AD |  if_e	jmp	#LR__2633
1dc3c     44 4E 05 F1 | 	add	fp, #68
1dc40     A7 26 02 FB | 	rdlong	local05, fp
1dc44     44 4E 85 F1 | 	sub	fp, #68
1dc48     13 23 02 F6 | 	mov	local03, local05
1dc4c     02 22 0E F2 | 	cmp	local03, #2 wz
1dc50     F4 00 90 5D |  if_ne	jmp	#LR__2633
1dc54     0C 4F 05 F1 | 	add	fp, #268
1dc58     A7 28 02 FB | 	rdlong	local06, fp
1dc5c     0C 4F 85 F1 | 	sub	fp, #268
1dc60     14 25 02 F6 | 	mov	local04, local06
1dc64     02 24 0E F2 | 	cmp	local04, #2 wz
1dc68     DC 00 90 AD |  if_e	jmp	#LR__2633
1dc6c     C0 4E 05 F1 | 	add	fp, #192
1dc70     A7 12 02 FB | 	rdlong	arg01, fp
1dc74     94 4E 85 F1 | 	sub	fp, #148
1dc78     A7 14 02 FB | 	rdlong	arg02, fp
1dc7c     14 4E 05 F1 | 	add	fp, #20
1dc80     A7 16 02 FB | 	rdlong	arg03, fp
1dc84     40 4E 85 F1 | 	sub	fp, #64
1dc88     30 44 B0 FD | 	call	#__system__emitsign_0434
1dc8c     14 4F 05 F1 | 	add	fp, #276
1dc90     A7 FA 61 FC | 	wrlong	result1, fp
1dc94     14 4F 85 F1 | 	sub	fp, #276
1dc98     00 FA 55 F2 | 	cmps	result1, #0 wc
1dc9c     14 4F 05 C1 |  if_b	add	fp, #276
1dca0     A7 FA 01 CB |  if_b	rdlong	result1, fp
1dca4     14 4F 85 C1 |  if_b	sub	fp, #276
1dca8     6C 0B 90 CD |  if_b	jmp	#LR__2683
1dcac     C0 4E 05 F1 | 	add	fp, #192
1dcb0     A7 1E 02 FB | 	rdlong	local01, fp
1dcb4     54 4E 05 F1 | 	add	fp, #84
1dcb8     A7 26 02 FB | 	rdlong	local05, fp
1dcbc     13 23 02 F6 | 	mov	local03, local05
1dcc0     13 1F 02 F1 | 	add	local01, local05
1dcc4     54 4E 85 F1 | 	sub	fp, #84
1dcc8     A7 1E 62 FC | 	wrlong	local01, fp
1dccc     58 4E 85 F1 | 	sub	fp, #88
1dcd0     A7 1E 0A FB | 	rdlong	local01, fp wz
1dcd4     68 4E 85 F1 | 	sub	fp, #104
1dcd8     60 00 90 AD |  if_e	jmp	#LR__2632
1dcdc     68 4E 05 F1 | 	add	fp, #104
1dce0     A7 1E 02 FB | 	rdlong	local01, fp
1dce4     AC 4E 05 F1 | 	add	fp, #172
1dce8     A7 22 02 FB | 	rdlong	local03, fp
1dcec     11 1F 82 F1 | 	sub	local01, local03
1dcf0     AC 4E 85 F1 | 	sub	fp, #172
1dcf4     A7 1E 62 FC | 	wrlong	local01, fp
1dcf8     68 4E 85 F1 | 	sub	fp, #104
1dcfc     00 1E 56 F2 | 	cmps	local01, #0 wc
1dd00     68 4E 05 C1 |  if_b	add	fp, #104
1dd04     A7 00 68 CC |  if_b	wrlong	#0, fp
1dd08     68 4E 85 C1 |  if_b	sub	fp, #104
1dd0c     08 4E 05 F1 | 	add	fp, #8
1dd10     A7 1E 02 FB | 	rdlong	local01, fp
1dd14     E8 1E 06 F4 | 	bitl	local01, #232
1dd18     A7 1E 62 FC | 	wrlong	local01, fp
1dd1c     60 4E 05 F1 | 	add	fp, #96
1dd20     A7 26 02 FB | 	rdlong	local05, fp
1dd24     13 23 02 F6 | 	mov	local03, local05
1dd28     08 22 66 F0 | 	shl	local03, #8
1dd2c     11 1F 42 F5 | 	or	local01, local03
1dd30     60 4E 85 F1 | 	sub	fp, #96
1dd34     A7 1E 62 FC | 	wrlong	local01, fp
1dd38     08 4E 85 F1 | 	sub	fp, #8
1dd3c                 | LR__2632
1dd3c     3C 4E 05 F1 | 	add	fp, #60
1dd40     A7 00 68 FC | 	wrlong	#0, fp
1dd44     3C 4E 85 F1 | 	sub	fp, #60
1dd48                 | LR__2633
1dd48     0C 4E 05 F1 | 	add	fp, #12
1dd4c     A7 12 02 FB | 	rdlong	arg01, fp
1dd50     0C 4E 85 F1 | 	sub	fp, #12
1dd54     04 1F B0 FD | 	call	#__system____builtin_ilogb
1dd58     FF FF 3F FF 
1dd5c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1dd60     50 00 90 5D |  if_ne	jmp	#LR__2635
1dd64     2C 4E 05 F1 | 	add	fp, #44
1dd68     A7 1E 0A FB | 	rdlong	local01, fp wz
1dd6c     2C 4E 85 F1 | 	sub	fp, #44
1dd70     24 00 90 AD |  if_e	jmp	#LR__2634
1dd74     C0 4E 05 F1 | 	add	fp, #192
1dd78     A7 20 02 FB | 	rdlong	local02, fp
1dd7c     10 23 02 F6 | 	mov	local03, local02
1dd80     01 22 06 F1 | 	add	local03, #1
1dd84     A7 22 62 FC | 	wrlong	local03, fp
1dd88     94 4E 85 F1 | 	sub	fp, #148
1dd8c     A7 24 02 FB | 	rdlong	local04, fp
1dd90     2C 4E 85 F1 | 	sub	fp, #44
1dd94     10 25 42 FC | 	wrbyte	local04, local02
1dd98                 | LR__2634
1dd98     C0 4E 05 F1 | 	add	fp, #192
1dd9c     A7 12 02 FB | 	rdlong	arg01, fp
1dda0     C0 4E 85 F1 | 	sub	fp, #192
1dda4     5E 01 00 FF 
1dda8     8E 15 06 F6 | 	mov	arg02, ##@LR__4571
1ddac     E4 E9 BF FD | 	call	#__system____builtin_strcpy
1ddb0     A4 08 90 FD | 	jmp	#LR__2671
1ddb4                 | LR__2635
1ddb4     0C 4E 05 F1 | 	add	fp, #12
1ddb8     A7 20 02 FB | 	rdlong	local02, fp
1ddbc     0C 4E 85 F1 | 	sub	fp, #12
1ddc0     10 13 02 F6 | 	mov	arg01, local02
1ddc4     94 1E B0 FD | 	call	#__system____builtin_ilogb
1ddc8     00 00 40 FF 
1ddcc     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1ddd0     50 00 90 5D |  if_ne	jmp	#LR__2637
1ddd4     2C 4E 05 F1 | 	add	fp, #44
1ddd8     A7 1E 0A FB | 	rdlong	local01, fp wz
1dddc     2C 4E 85 F1 | 	sub	fp, #44
1dde0     24 00 90 AD |  if_e	jmp	#LR__2636
1dde4     C0 4E 05 F1 | 	add	fp, #192
1dde8     A7 20 02 FB | 	rdlong	local02, fp
1ddec     10 23 02 F6 | 	mov	local03, local02
1ddf0     01 22 06 F1 | 	add	local03, #1
1ddf4     A7 22 62 FC | 	wrlong	local03, fp
1ddf8     94 4E 85 F1 | 	sub	fp, #148
1ddfc     A7 24 02 FB | 	rdlong	local04, fp
1de00     2C 4E 85 F1 | 	sub	fp, #44
1de04     10 25 42 FC | 	wrbyte	local04, local02
1de08                 | LR__2636
1de08     C0 4E 05 F1 | 	add	fp, #192
1de0c     A7 12 02 FB | 	rdlong	arg01, fp
1de10     C0 4E 85 F1 | 	sub	fp, #192
1de14     5E 01 00 FF 
1de18     92 15 06 F6 | 	mov	arg02, ##@LR__4572
1de1c     74 E9 BF FD | 	call	#__system____builtin_strcpy
1de20     34 08 90 FD | 	jmp	#LR__2671
1de24                 | LR__2637
1de24     10 4E 05 F1 | 	add	fp, #16
1de28     A7 1E 02 FB | 	rdlong	local01, fp
1de2c     10 4E 85 F1 | 	sub	fp, #16
1de30     67 1E 0E F2 | 	cmp	local01, #103 wz
1de34     10 4E 05 51 |  if_ne	add	fp, #16
1de38     A7 22 02 5B |  if_ne	rdlong	local03, fp
1de3c     10 4E 85 51 |  if_ne	sub	fp, #16
1de40     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1de44     94 01 90 5D |  if_ne	jmp	#LR__2642
1de48     0C 4E 05 F1 | 	add	fp, #12
1de4c     A7 12 02 FB | 	rdlong	arg01, fp
1de50     08 4E 05 F1 | 	add	fp, #8
1de54     A7 14 02 F6 | 	mov	arg02, fp
1de58     0C 4E 05 F1 | 	add	fp, #12
1de5c     A7 16 02 F6 | 	mov	arg03, fp
1de60     98 4E 05 F1 | 	add	fp, #152
1de64     A7 18 02 FB | 	rdlong	arg04, fp
1de68     9C 4E 85 F1 | 	sub	fp, #156
1de6c     A7 1A 02 FB | 	rdlong	arg05, fp
1de70     1C 4E 85 F1 | 	sub	fp, #28
1de74     50 40 B0 FD | 	call	#__system__disassemble_0432
1de78     10 4E 05 F1 | 	add	fp, #16
1de7c     A7 1E 02 FB | 	rdlong	local01, fp
1de80     10 4E 85 F1 | 	sub	fp, #16
1de84     23 1E 0E F2 | 	cmp	local01, #35 wz
1de88     A0 00 90 5D |  if_ne	jmp	#LR__2639
1de8c     20 4E 05 F1 | 	add	fp, #32
1de90     A7 1E 02 FB | 	rdlong	local01, fp
1de94     98 4E 05 F1 | 	add	fp, #152
1de98     A7 22 02 FB | 	rdlong	local03, fp
1de9c     B8 4E 85 F1 | 	sub	fp, #184
1dea0     11 1F 5A F2 | 	cmps	local01, local03 wcz
1dea4     24 4E 05 11 |  if_a	add	fp, #36
1dea8     A7 02 68 1C |  if_a	wrlong	#1, fp
1deac     24 4E 85 11 |  if_a	sub	fp, #36
1deb0     A4 01 90 1D |  if_a	jmp	#LR__2645
1deb4     20 4E 05 F1 | 	add	fp, #32
1deb8     A7 1E 02 FB | 	rdlong	local01, fp
1debc     20 4E 85 F1 | 	sub	fp, #32
1dec0     00 1E 56 F2 | 	cmps	local01, #0 wc
1dec4     2C 00 90 3D |  if_ae	jmp	#LR__2638
1dec8     B8 4E 05 F1 | 	add	fp, #184
1decc     A7 1E 02 FB | 	rdlong	local01, fp
1ded0     0F 1F 62 F6 | 	neg	local01, local01
1ded4     98 4E 85 F1 | 	sub	fp, #152
1ded8     A7 22 02 FB | 	rdlong	local03, fp
1dedc     20 4E 85 F1 | 	sub	fp, #32
1dee0     0F 23 5A F2 | 	cmps	local03, local01 wcz
1dee4     24 4E 05 E1 |  if_be	add	fp, #36
1dee8     A7 02 68 EC |  if_be	wrlong	#1, fp
1deec     24 4E 85 E1 |  if_be	sub	fp, #36
1def0     64 01 90 FD | 	jmp	#LR__2645
1def4                 | LR__2638
1def4     20 4E 05 F1 | 	add	fp, #32
1def8     A7 1E 02 FB | 	rdlong	local01, fp
1defc     20 4E 85 F1 | 	sub	fp, #32
1df00     01 1E 56 F2 | 	cmps	local01, #1 wc
1df04     50 01 90 CD |  if_b	jmp	#LR__2645
1df08     B8 4E 05 F1 | 	add	fp, #184
1df0c     A7 1E 02 FB | 	rdlong	local01, fp
1df10     98 4E 85 F1 | 	sub	fp, #152
1df14     A7 22 02 FB | 	rdlong	local03, fp
1df18     11 1F 82 F1 | 	sub	local01, local03
1df1c     98 4E 05 F1 | 	add	fp, #152
1df20     A7 1E 62 FC | 	wrlong	local01, fp
1df24     B8 4E 85 F1 | 	sub	fp, #184
1df28     2C 01 90 FD | 	jmp	#LR__2645
1df2c                 | LR__2639
1df2c     00 1E 06 F6 | 	mov	local01, #0
1df30     08 4E 05 F1 | 	add	fp, #8
1df34     A7 20 02 FB | 	rdlong	local02, fp
1df38     1C 20 46 F0 | 	shr	local02, #28
1df3c     01 20 0E F5 | 	and	local02, #1 wz
1df40     01 1E 06 A6 |  if_e	mov	local01, #1
1df44     2C 4E 05 F1 | 	add	fp, #44
1df48     A7 1E 62 FC | 	wrlong	local01, fp
1df4c     14 4E 85 F1 | 	sub	fp, #20
1df50     A7 1E 02 FB | 	rdlong	local01, fp
1df54     98 4E 05 F1 | 	add	fp, #152
1df58     A7 22 02 FB | 	rdlong	local03, fp
1df5c     B8 4E 85 F1 | 	sub	fp, #184
1df60     11 1F 52 F2 | 	cmps	local01, local03 wc
1df64     18 00 90 3D |  if_ae	jmp	#LR__2640
1df68     20 4E 05 F1 | 	add	fp, #32
1df6c     A7 24 02 FB | 	rdlong	local04, fp
1df70     20 4E 85 F1 | 	sub	fp, #32
1df74     FF FF 7F FF 
1df78     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1df7c     10 00 90 3D |  if_ae	jmp	#LR__2641
1df80                 | LR__2640
1df80     24 4E 05 F1 | 	add	fp, #36
1df84     A7 02 68 FC | 	wrlong	#1, fp
1df88     24 4E 85 F1 | 	sub	fp, #36
1df8c     C8 00 90 FD | 	jmp	#LR__2645
1df90                 | LR__2641
1df90     B8 4E 05 F1 | 	add	fp, #184
1df94     A7 24 02 FB | 	rdlong	local04, fp
1df98     98 4E 85 F1 | 	sub	fp, #152
1df9c     A7 22 02 FB | 	rdlong	local03, fp
1dfa0     11 25 82 F1 | 	sub	local04, local03
1dfa4     98 4E 05 F1 | 	add	fp, #152
1dfa8     A7 24 62 FC | 	wrlong	local04, fp
1dfac     AC 4E 85 F1 | 	sub	fp, #172
1dfb0     A7 12 02 FB | 	rdlong	arg01, fp
1dfb4     08 4E 05 F1 | 	add	fp, #8
1dfb8     A7 14 02 F6 | 	mov	arg02, fp
1dfbc     0C 4E 05 F1 | 	add	fp, #12
1dfc0     A7 16 02 F6 | 	mov	arg03, fp
1dfc4     12 19 62 F6 | 	neg	arg04, local04
1dfc8     04 4E 85 F1 | 	sub	fp, #4
1dfcc     A7 1A 02 FB | 	rdlong	arg05, fp
1dfd0     1C 4E 85 F1 | 	sub	fp, #28
1dfd4     F0 3E B0 FD | 	call	#__system__disassemble_0432
1dfd8     7C 00 90 FD | 	jmp	#LR__2645
1dfdc                 | LR__2642
1dfdc     24 4E 05 F1 | 	add	fp, #36
1dfe0     A7 1E 0A FB | 	rdlong	local01, fp wz
1dfe4     24 4E 85 F1 | 	sub	fp, #36
1dfe8     34 00 90 AD |  if_e	jmp	#LR__2643
1dfec     0C 4E 05 F1 | 	add	fp, #12
1dff0     A7 12 02 FB | 	rdlong	arg01, fp
1dff4     08 4E 05 F1 | 	add	fp, #8
1dff8     A7 14 02 F6 | 	mov	arg02, fp
1dffc     0C 4E 05 F1 | 	add	fp, #12
1e000     A7 16 02 F6 | 	mov	arg03, fp
1e004     98 4E 05 F1 | 	add	fp, #152
1e008     A7 18 02 FB | 	rdlong	arg04, fp
1e00c     9C 4E 85 F1 | 	sub	fp, #156
1e010     A7 1A 02 FB | 	rdlong	arg05, fp
1e014     1C 4E 85 F1 | 	sub	fp, #28
1e018     AC 3E B0 FD | 	call	#__system__disassemble_0432
1e01c     38 00 90 FD | 	jmp	#LR__2644
1e020                 | LR__2643
1e020     0C 4E 05 F1 | 	add	fp, #12
1e024     A7 12 02 FB | 	rdlong	arg01, fp
1e028     08 4E 05 F1 | 	add	fp, #8
1e02c     A7 14 02 F6 | 	mov	arg02, fp
1e030     0C 4E 05 F1 | 	add	fp, #12
1e034     A7 16 02 F6 | 	mov	arg03, fp
1e038     98 4E 05 F1 | 	add	fp, #152
1e03c     A7 24 02 FB | 	rdlong	local04, fp
1e040     01 24 06 F1 | 	add	local04, #1
1e044     12 19 62 F6 | 	neg	arg04, local04
1e048     9C 4E 85 F1 | 	sub	fp, #156
1e04c     A7 1A 02 FB | 	rdlong	arg05, fp
1e050     1C 4E 85 F1 | 	sub	fp, #28
1e054     70 3E B0 FD | 	call	#__system__disassemble_0432
1e058                 | LR__2644
1e058                 | LR__2645
1e058     1C 4E 05 F1 | 	add	fp, #28
1e05c     A7 1E 02 FB | 	rdlong	local01, fp
1e060     1C 4E 85 F1 | 	sub	fp, #28
1e064     02 1E 0E F2 | 	cmp	local01, #2 wz
1e068     4C 00 90 5D |  if_ne	jmp	#LR__2648
1e06c     1C 4E 05 F1 | 	add	fp, #28
1e070     A7 20 68 FC | 	wrlong	#16, fp
1e074     1C 4E 85 F1 | 	sub	fp, #28
1e078                 | LR__2646
1e078     14 4E 05 F1 | 	add	fp, #20
1e07c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e080     14 4E 85 F1 | 	sub	fp, #20
1e084     30 00 90 AD |  if_e	jmp	#LR__2647
1e088     14 4E 05 F1 | 	add	fp, #20
1e08c     A7 22 02 FB | 	rdlong	local03, fp
1e090     14 4E 85 F1 | 	sub	fp, #20
1e094     00 80 00 FF 
1e098     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1e09c     18 00 90 3D |  if_ae	jmp	#LR__2647
1e0a0     14 4E 05 F1 | 	add	fp, #20
1e0a4     A7 1E 02 FB | 	rdlong	local01, fp
1e0a8     01 1E 66 F0 | 	shl	local01, #1
1e0ac     A7 1E 62 FC | 	wrlong	local01, fp
1e0b0     14 4E 85 F1 | 	sub	fp, #20
1e0b4     C0 FF 9F FD | 	jmp	#LR__2646
1e0b8                 | LR__2647
1e0b8                 | LR__2648
1e0b8     70 4E 05 F1 | 	add	fp, #112
1e0bc     A7 12 02 F6 | 	mov	arg01, fp
1e0c0     5C 4E 85 F1 | 	sub	fp, #92
1e0c4     A7 14 02 FB | 	rdlong	arg02, fp
1e0c8     08 4E 05 F1 | 	add	fp, #8
1e0cc     A7 16 02 FB | 	rdlong	arg03, fp
1e0d0     A0 4E 05 F1 | 	add	fp, #160
1e0d4     A7 1A 02 FB | 	rdlong	arg05, fp
1e0d8     BC 4E 85 F1 | 	sub	fp, #188
1e0dc     01 18 06 F6 | 	mov	arg04, #1
1e0e0     70 3D B0 FD | 	call	#__system___uitoa
1e0e4     58 4E 05 F1 | 	add	fp, #88
1e0e8     A7 FA 61 FC | 	wrlong	result1, fp
1e0ec     38 4E 85 F1 | 	sub	fp, #56
1e0f0     A7 1E 02 FB | 	rdlong	local01, fp
1e0f4     20 4E 85 F1 | 	sub	fp, #32
1e0f8     00 1E 56 F2 | 	cmps	local01, #0 wc
1e0fc     50 00 90 3D |  if_ae	jmp	#LR__2649
1e100     60 4E 05 F1 | 	add	fp, #96
1e104     A7 5A 68 FC | 	wrlong	#45, fp
1e108     50 4E 05 F1 | 	add	fp, #80
1e10c     A7 12 02 F6 | 	mov	arg01, fp
1e110     90 4E 85 F1 | 	sub	fp, #144
1e114     A7 22 02 FB | 	rdlong	local03, fp
1e118     11 15 62 F6 | 	neg	arg02, local03
1e11c     18 4E 05 F1 | 	add	fp, #24
1e120     A7 18 02 FB | 	rdlong	arg04, fp
1e124     84 4E 05 F1 | 	add	fp, #132
1e128     A7 28 02 FB | 	rdlong	local06, fp
1e12c     BC 4E 85 F1 | 	sub	fp, #188
1e130     14 25 02 F6 | 	mov	local04, local06
1e134     0A 16 06 F6 | 	mov	arg03, #10
1e138     12 1B 02 F6 | 	mov	arg05, local04
1e13c     14 3D B0 FD | 	call	#__system___uitoa
1e140     5C 4E 05 F1 | 	add	fp, #92
1e144     A7 FA 61 FC | 	wrlong	result1, fp
1e148     5C 4E 85 F1 | 	sub	fp, #92
1e14c     48 00 90 FD | 	jmp	#LR__2650
1e150                 | LR__2649
1e150     60 4E 05 F1 | 	add	fp, #96
1e154     A7 56 68 FC | 	wrlong	#43, fp
1e158     50 4E 05 F1 | 	add	fp, #80
1e15c     A7 12 02 F6 | 	mov	arg01, fp
1e160     90 4E 85 F1 | 	sub	fp, #144
1e164     A7 14 02 FB | 	rdlong	arg02, fp
1e168     18 4E 05 F1 | 	add	fp, #24
1e16c     A7 18 02 FB | 	rdlong	arg04, fp
1e170     84 4E 05 F1 | 	add	fp, #132
1e174     A7 28 02 FB | 	rdlong	local06, fp
1e178     BC 4E 85 F1 | 	sub	fp, #188
1e17c     14 25 02 F6 | 	mov	local04, local06
1e180     0A 16 06 F6 | 	mov	arg03, #10
1e184     12 1B 02 F6 | 	mov	arg05, local04
1e188     C8 3C B0 FD | 	call	#__system___uitoa
1e18c     5C 4E 05 F1 | 	add	fp, #92
1e190     A7 FA 61 FC | 	wrlong	result1, fp
1e194     5C 4E 85 F1 | 	sub	fp, #92
1e198                 | LR__2650
1e198     24 4E 05 F1 | 	add	fp, #36
1e19c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e1a0     24 4E 85 F1 | 	sub	fp, #36
1e1a4     2C 00 90 AD |  if_e	jmp	#LR__2651
1e1a8     50 4E 05 F1 | 	add	fp, #80
1e1ac     A7 00 68 FC | 	wrlong	#0, fp
1e1b0     04 4E 85 F1 | 	sub	fp, #4
1e1b4     A7 00 68 FC | 	wrlong	#0, fp
1e1b8     6C 4E 05 F1 | 	add	fp, #108
1e1bc     A7 1E 02 FB | 	rdlong	local01, fp
1e1c0     01 1E 06 F1 | 	add	local01, #1
1e1c4     64 4E 85 F1 | 	sub	fp, #100
1e1c8     A7 1E 62 FC | 	wrlong	local01, fp
1e1cc     54 4E 85 F1 | 	sub	fp, #84
1e1d0     88 00 90 FD | 	jmp	#LR__2654
1e1d4                 | LR__2651
1e1d4     20 4E 05 F1 | 	add	fp, #32
1e1d8     A7 1E 02 FB | 	rdlong	local01, fp
1e1dc     20 4E 85 F1 | 	sub	fp, #32
1e1e0     00 1E 56 F2 | 	cmps	local01, #0 wc
1e1e4     40 00 90 3D |  if_ae	jmp	#LR__2652
1e1e8     20 4E 05 F1 | 	add	fp, #32
1e1ec     A7 20 02 FB | 	rdlong	local02, fp
1e1f0     30 4E 05 F1 | 	add	fp, #48
1e1f4     A7 20 62 FC | 	wrlong	local02, fp
1e1f8     04 4E 85 F1 | 	sub	fp, #4
1e1fc     A7 20 62 FC | 	wrlong	local02, fp
1e200     2C 4E 85 F1 | 	sub	fp, #44
1e204     A7 1E 02 FB | 	rdlong	local01, fp
1e208     98 4E 05 F1 | 	add	fp, #152
1e20c     A7 22 02 FB | 	rdlong	local03, fp
1e210     11 1F 02 F1 | 	add	local01, local03
1e214     01 1E 06 F1 | 	add	local01, #1
1e218     64 4E 85 F1 | 	sub	fp, #100
1e21c     A7 1E 62 FC | 	wrlong	local01, fp
1e220     54 4E 85 F1 | 	sub	fp, #84
1e224     34 00 90 FD | 	jmp	#LR__2653
1e228                 | LR__2652
1e228     4C 4E 05 F1 | 	add	fp, #76
1e22c     A7 00 68 FC | 	wrlong	#0, fp
1e230     2C 4E 85 F1 | 	sub	fp, #44
1e234     A7 1E 02 FB | 	rdlong	local01, fp
1e238     30 4E 05 F1 | 	add	fp, #48
1e23c     A7 1E 62 FC | 	wrlong	local01, fp
1e240     68 4E 05 F1 | 	add	fp, #104
1e244     A7 22 02 FB | 	rdlong	local03, fp
1e248     11 1F 02 F1 | 	add	local01, local03
1e24c     01 1E 06 F1 | 	add	local01, #1
1e250     64 4E 85 F1 | 	sub	fp, #100
1e254     A7 1E 62 FC | 	wrlong	local01, fp
1e258     54 4E 85 F1 | 	sub	fp, #84
1e25c                 | LR__2653
1e25c                 | LR__2654
1e25c     54 4E 05 F1 | 	add	fp, #84
1e260     A7 1E 02 FB | 	rdlong	local01, fp
1e264     08 4E 85 F1 | 	sub	fp, #8
1e268     A7 22 02 FB | 	rdlong	local03, fp
1e26c     11 1F 82 F1 | 	sub	local01, local03
1e270     01 1E 06 F1 | 	add	local01, #1
1e274     24 4E 85 F1 | 	sub	fp, #36
1e278     A7 1E 62 FC | 	wrlong	local01, fp
1e27c     04 4E 05 F1 | 	add	fp, #4
1e280     A7 1E 0A FB | 	rdlong	local01, fp wz
1e284     2C 4E 85 F1 | 	sub	fp, #44
1e288     28 4E 05 51 |  if_ne	add	fp, #40
1e28c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1e290     01 22 06 51 |  if_ne	add	local03, #1
1e294     A7 22 62 5C |  if_ne	wrlong	local03, fp
1e298     28 4E 85 51 |  if_ne	sub	fp, #40
1e29c     1C 4E 05 F1 | 	add	fp, #28
1e2a0     A7 1E 02 FB | 	rdlong	local01, fp
1e2a4     1C 4E 85 F1 | 	sub	fp, #28
1e2a8     10 1E 0E F2 | 	cmp	local01, #16 wz
1e2ac     28 4E 05 A1 |  if_e	add	fp, #40
1e2b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
1e2b4     02 1E 06 A1 |  if_e	add	local01, #2
1e2b8     A7 1E 62 AC |  if_e	wrlong	local01, fp
1e2bc     28 4E 85 A1 |  if_e	sub	fp, #40
1e2c0     24 4E 05 F1 | 	add	fp, #36
1e2c4     A7 1E 0A FB | 	rdlong	local01, fp wz
1e2c8     24 4E 85 F1 | 	sub	fp, #36
1e2cc     28 00 90 AD |  if_e	jmp	#LR__2655
1e2d0     28 4E 05 F1 | 	add	fp, #40
1e2d4     A7 1E 02 FB | 	rdlong	local01, fp
1e2d8     02 22 06 F6 | 	mov	local03, #2
1e2dc     34 4E 05 F1 | 	add	fp, #52
1e2e0     A7 26 02 FB | 	rdlong	local05, fp
1e2e4     13 23 02 F1 | 	add	local03, local05
1e2e8     11 1F 02 F1 | 	add	local01, local03
1e2ec     34 4E 85 F1 | 	sub	fp, #52
1e2f0     A7 1E 62 FC | 	wrlong	local01, fp
1e2f4     28 4E 85 F1 | 	sub	fp, #40
1e2f8                 | LR__2655
1e2f8     28 4E 05 F1 | 	add	fp, #40
1e2fc     A7 1E 02 FB | 	rdlong	local01, fp
1e300     28 4E 85 F1 | 	sub	fp, #40
1e304     41 1E 56 F2 | 	cmps	local01, #65 wc
1e308     01 FA 65 36 |  if_ae	neg	result1, #1
1e30c     08 05 90 3D |  if_ae	jmp	#LR__2683
1e310     3C 4E 05 F1 | 	add	fp, #60
1e314     A7 1E 0A FB | 	rdlong	local01, fp wz
1e318     3C 4E 85 F1 | 	sub	fp, #60
1e31c     60 00 90 AD |  if_e	jmp	#LR__2656
1e320     C0 4E 05 F1 | 	add	fp, #192
1e324     A7 12 02 FB | 	rdlong	arg01, fp
1e328     94 4E 85 F1 | 	sub	fp, #148
1e32c     A7 14 02 FB | 	rdlong	arg02, fp
1e330     14 4E 05 F1 | 	add	fp, #20
1e334     A7 16 02 FB | 	rdlong	arg03, fp
1e338     40 4E 85 F1 | 	sub	fp, #64
1e33c     7C 3D B0 FD | 	call	#__system__emitsign_0434
1e340     18 4F 05 F1 | 	add	fp, #280
1e344     A7 FA 61 FC | 	wrlong	result1, fp
1e348     18 4F 85 F1 | 	sub	fp, #280
1e34c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e350     18 4F 05 C1 |  if_b	add	fp, #280
1e354     A7 FA 01 CB |  if_b	rdlong	result1, fp
1e358     18 4F 85 C1 |  if_b	sub	fp, #280
1e35c     B8 04 90 CD |  if_b	jmp	#LR__2683
1e360     C0 4E 05 F1 | 	add	fp, #192
1e364     A7 1E 02 FB | 	rdlong	local01, fp
1e368     58 4E 05 F1 | 	add	fp, #88
1e36c     A7 22 02 FB | 	rdlong	local03, fp
1e370     11 1F 02 F1 | 	add	local01, local03
1e374     58 4E 85 F1 | 	sub	fp, #88
1e378     A7 1E 62 FC | 	wrlong	local01, fp
1e37c     C0 4E 85 F1 | 	sub	fp, #192
1e380                 | LR__2656
1e380     4C 4E 05 F1 | 	add	fp, #76
1e384     A7 1E 02 FB | 	rdlong	local01, fp
1e388     34 4E 85 F1 | 	sub	fp, #52
1e38c     A7 1E 62 FC | 	wrlong	local01, fp
1e390     18 4E 85 F1 | 	sub	fp, #24
1e394     97 9E 48 FB | 	callpa	#(@LR__2662-@LR__2657)>>2,fcache_load_ptr_
1e398                 | LR__2657
1e398     18 4E 05 F1 | 	add	fp, #24
1e39c     A7 20 02 FB | 	rdlong	local02, fp
1e3a0     3C 4E 05 F1 | 	add	fp, #60
1e3a4     A7 26 02 FB | 	rdlong	local05, fp
1e3a8     54 4E 85 F1 | 	sub	fp, #84
1e3ac     13 21 52 F2 | 	cmps	local02, local05 wc
1e3b0     20 01 90 3D |  if_ae	jmp	#LR__2663
1e3b4     18 4E 05 F1 | 	add	fp, #24
1e3b8     A7 28 02 FB | 	rdlong	local06, fp
1e3bc     18 4E 85 F1 | 	sub	fp, #24
1e3c0     00 28 56 F2 | 	cmps	local06, #0 wc
1e3c4     58 00 90 CD |  if_b	jmp	#LR__2658
1e3c8     18 4E 05 F1 | 	add	fp, #24
1e3cc     A7 28 02 FB | 	rdlong	local06, fp
1e3d0     40 4E 05 F1 | 	add	fp, #64
1e3d4     A7 2A 02 FB | 	rdlong	local07, fp
1e3d8     58 4E 85 F1 | 	sub	fp, #88
1e3dc     15 29 52 F2 | 	cmps	local06, local07 wc
1e3e0     3C 00 90 3D |  if_ae	jmp	#LR__2658
1e3e4     C0 4E 05 F1 | 	add	fp, #192
1e3e8     A7 2C 02 FB | 	rdlong	local08, fp
1e3ec     16 2B 02 F6 | 	mov	local07, local08
1e3f0     01 2A 06 F1 | 	add	local07, #1
1e3f4     A7 2A 62 FC | 	wrlong	local07, fp
1e3f8     A8 4E 85 F1 | 	sub	fp, #168
1e3fc     A7 2A 02 FB | 	rdlong	local07, fp
1e400     15 2F 02 F6 | 	mov	local09, local07
1e404     58 4E 05 F1 | 	add	fp, #88
1e408     A7 30 02 F6 | 	mov	local10, fp
1e40c     A7 2E 02 F1 | 	add	local09, fp
1e410     17 33 C2 FA | 	rdbyte	local11, local09
1e414     16 33 42 FC | 	wrbyte	local11, local08
1e418     70 4E 85 F1 | 	sub	fp, #112
1e41c     20 00 90 FD | 	jmp	#LR__2659
1e420                 | LR__2658
1e420     C0 4E 05 F1 | 	add	fp, #192
1e424     A7 2C 02 FB | 	rdlong	local08, fp
1e428     16 2F 02 F6 | 	mov	local09, local08
1e42c     01 2E 06 F1 | 	add	local09, #1
1e430     A7 2E 62 FC | 	wrlong	local09, fp
1e434     C0 4E 85 F1 | 	sub	fp, #192
1e438     30 2E 06 F6 | 	mov	local09, #48
1e43c     16 61 48 FC | 	wrbyte	#48, local08
1e440                 | LR__2659
1e440     18 4E 05 F1 | 	add	fp, #24
1e444     A7 28 02 FB | 	rdlong	local06, fp
1e448     38 4E 05 F1 | 	add	fp, #56
1e44c     A7 34 02 FB | 	rdlong	local12, fp
1e450     50 4E 85 F1 | 	sub	fp, #80
1e454     1A 29 0A F2 | 	cmp	local06, local12 wz
1e458     5C 00 90 5D |  if_ne	jmp	#LR__2661
1e45c     10 4F 05 F1 | 	add	fp, #272
1e460     A7 2A 02 FB | 	rdlong	local07, fp
1e464     10 4F 85 F1 | 	sub	fp, #272
1e468     15 2F 0A F6 | 	mov	local09, local07 wz
1e46c     28 00 90 5D |  if_ne	jmp	#LR__2660
1e470     54 4E 05 F1 | 	add	fp, #84
1e474     A7 32 02 FB | 	rdlong	local11, fp
1e478     19 31 02 F6 | 	mov	local10, local11
1e47c     01 30 86 F1 | 	sub	local10, #1
1e480     3C 4E 85 F1 | 	sub	fp, #60
1e484     A7 36 02 FB | 	rdlong	local13, fp
1e488     18 4E 85 F1 | 	sub	fp, #24
1e48c     1B 39 02 F6 | 	mov	local14, local13
1e490     18 39 52 F2 | 	cmps	local14, local10 wc
1e494     20 00 90 3D |  if_ae	jmp	#LR__2661
1e498                 | LR__2660
1e498     C0 4E 05 F1 | 	add	fp, #192
1e49c     A7 2C 02 FB | 	rdlong	local08, fp
1e4a0     16 35 02 F6 | 	mov	local12, local08
1e4a4     01 34 06 F1 | 	add	local12, #1
1e4a8     A7 34 62 FC | 	wrlong	local12, fp
1e4ac     C0 4E 85 F1 | 	sub	fp, #192
1e4b0     2E 2E 06 F6 | 	mov	local09, #46
1e4b4     16 5D 48 FC | 	wrbyte	#46, local08
1e4b8                 | LR__2661
1e4b8     18 4E 05 F1 | 	add	fp, #24
1e4bc     A7 3A 02 FB | 	rdlong	local15, fp
1e4c0     1D 35 02 F6 | 	mov	local12, local15
1e4c4     01 34 06 F1 | 	add	local12, #1
1e4c8     A7 34 62 FC | 	wrlong	local12, fp
1e4cc     18 4E 85 F1 | 	sub	fp, #24
1e4d0     C4 FE 9F FD | 	jmp	#LR__2657
1e4d4                 | LR__2662
1e4d4                 | LR__2663
1e4d4     34 4E 05 F1 | 	add	fp, #52
1e4d8     A7 1E 0A FB | 	rdlong	local01, fp wz
1e4dc     34 4E 85 F1 | 	sub	fp, #52
1e4e0     A0 00 90 AD |  if_e	jmp	#LR__2667
1e4e4     C0 4E 05 F1 | 	add	fp, #192
1e4e8     A7 1E 02 FB | 	rdlong	local01, fp
1e4ec     01 1E 86 F1 | 	sub	local01, #1
1e4f0     A7 1E 62 FC | 	wrlong	local01, fp
1e4f4     C0 4E 85 F1 | 	sub	fp, #192
1e4f8     97 26 48 FB | 	callpa	#(@LR__2665-@LR__2664)>>2,fcache_load_ptr_
1e4fc                 | LR__2664
1e4fc     C0 4E 05 F1 | 	add	fp, #192
1e500     A7 1E 02 FB | 	rdlong	local01, fp
1e504     04 4E 05 F1 | 	add	fp, #4
1e508     A7 22 02 FB | 	rdlong	local03, fp
1e50c     C4 4E 85 F1 | 	sub	fp, #196
1e510     11 1F 5A F2 | 	cmps	local01, local03 wcz
1e514     30 00 90 ED |  if_be	jmp	#LR__2666
1e518     C0 4E 05 F1 | 	add	fp, #192
1e51c     A7 28 02 FB | 	rdlong	local06, fp
1e520     C0 4E 85 F1 | 	sub	fp, #192
1e524     14 25 C2 FA | 	rdbyte	local04, local06
1e528     30 24 0E F2 | 	cmp	local04, #48 wz
1e52c     18 00 90 5D |  if_ne	jmp	#LR__2666
1e530     C0 4E 05 F1 | 	add	fp, #192
1e534     A7 1E 02 FB | 	rdlong	local01, fp
1e538     01 1E 86 F1 | 	sub	local01, #1
1e53c     A7 1E 62 FC | 	wrlong	local01, fp
1e540     C0 4E 85 F1 | 	sub	fp, #192
1e544     B4 FF 9F FD | 	jmp	#LR__2664
1e548                 | LR__2665
1e548                 | LR__2666
1e548     C0 4E 05 F1 | 	add	fp, #192
1e54c     A7 20 02 FB | 	rdlong	local02, fp
1e550     C0 4E 85 F1 | 	sub	fp, #192
1e554     10 1F C2 FA | 	rdbyte	local01, local02
1e558     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e55c     C0 4E 05 A1 |  if_e	add	fp, #192
1e560     A7 1E 02 AB |  if_e	rdlong	local01, fp
1e564     01 1E 86 A1 |  if_e	sub	local01, #1
1e568     A7 1E 62 AC |  if_e	wrlong	local01, fp
1e56c     C0 4E 85 A1 |  if_e	sub	fp, #192
1e570     C0 4E 05 F1 | 	add	fp, #192
1e574     A7 22 02 FB | 	rdlong	local03, fp
1e578     01 22 06 F1 | 	add	local03, #1
1e57c     A7 22 62 FC | 	wrlong	local03, fp
1e580     C0 4E 85 F1 | 	sub	fp, #192
1e584                 | LR__2667
1e584     24 4E 05 F1 | 	add	fp, #36
1e588     A7 1E 0A FB | 	rdlong	local01, fp wz
1e58c     24 4E 85 F1 | 	sub	fp, #36
1e590     B4 00 90 AD |  if_e	jmp	#LR__2670
1e594     C0 4E 05 F1 | 	add	fp, #192
1e598     A7 20 02 FB | 	rdlong	local02, fp
1e59c     10 23 02 F6 | 	mov	local03, local02
1e5a0     01 22 06 F1 | 	add	local03, #1
1e5a4     A7 22 62 FC | 	wrlong	local03, fp
1e5a8     90 4E 85 F1 | 	sub	fp, #144
1e5ac     A7 24 02 FB | 	rdlong	local04, fp
1e5b0     10 25 42 FC | 	wrbyte	local04, local02
1e5b4     90 4E 05 F1 | 	add	fp, #144
1e5b8     A7 20 02 FB | 	rdlong	local02, fp
1e5bc     10 23 02 F6 | 	mov	local03, local02
1e5c0     01 22 06 F1 | 	add	local03, #1
1e5c4     A7 22 62 FC | 	wrlong	local03, fp
1e5c8     60 4E 85 F1 | 	sub	fp, #96
1e5cc     A7 24 02 FB | 	rdlong	local04, fp
1e5d0     10 25 42 FC | 	wrbyte	local04, local02
1e5d4     48 4E 85 F1 | 	sub	fp, #72
1e5d8     A7 00 68 FC | 	wrlong	#0, fp
1e5dc     18 4E 85 F1 | 	sub	fp, #24
1e5e0                 | LR__2668
1e5e0     18 4E 05 F1 | 	add	fp, #24
1e5e4     A7 20 02 FB | 	rdlong	local02, fp
1e5e8     44 4E 05 F1 | 	add	fp, #68
1e5ec     A7 26 02 FB | 	rdlong	local05, fp
1e5f0     5C 4E 85 F1 | 	sub	fp, #92
1e5f4     13 21 52 F2 | 	cmps	local02, local05 wc
1e5f8     4C 00 90 3D |  if_ae	jmp	#LR__2669
1e5fc     C0 4E 05 F1 | 	add	fp, #192
1e600     A7 2C 02 FB | 	rdlong	local08, fp
1e604     16 35 02 F6 | 	mov	local12, local08
1e608     01 34 06 F1 | 	add	local12, #1
1e60c     A7 34 62 FC | 	wrlong	local12, fp
1e610     A8 4E 85 F1 | 	sub	fp, #168
1e614     A7 2A 02 FB | 	rdlong	local07, fp
1e618     15 2F 02 F6 | 	mov	local09, local07
1e61c     98 4E 05 F1 | 	add	fp, #152
1e620     A7 30 02 F6 | 	mov	local10, fp
1e624     A7 2E 02 F1 | 	add	local09, fp
1e628     17 33 C2 FA | 	rdbyte	local11, local09
1e62c     16 33 42 FC | 	wrbyte	local11, local08
1e630     98 4E 85 F1 | 	sub	fp, #152
1e634     A7 34 02 FB | 	rdlong	local12, fp
1e638     01 34 06 F1 | 	add	local12, #1
1e63c     A7 34 62 FC | 	wrlong	local12, fp
1e640     18 4E 85 F1 | 	sub	fp, #24
1e644     98 FF 9F FD | 	jmp	#LR__2668
1e648                 | LR__2669
1e648                 | LR__2670
1e648     C0 4E 05 F1 | 	add	fp, #192
1e64c     A7 1E 02 FB | 	rdlong	local01, fp
1e650     C0 4E 85 F1 | 	sub	fp, #192
1e654     0F 01 48 FC | 	wrbyte	#0, local01
1e658                 | LR__2671
1e658     6C 4E 05 F1 | 	add	fp, #108
1e65c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e660     6C 4E 85 F1 | 	sub	fp, #108
1e664     90 01 90 AD |  if_e	jmp	#LR__2682
1e668     48 4E 05 F1 | 	add	fp, #72
1e66c     A7 22 0A FB | 	rdlong	local03, fp wz
1e670     48 4E 85 F1 | 	sub	fp, #72
1e674     80 01 90 AD |  if_e	jmp	#LR__2682
1e678     C4 4E 05 F1 | 	add	fp, #196
1e67c     A7 12 02 FB | 	rdlong	arg01, fp
1e680     C4 4E 85 F1 | 	sub	fp, #196
1e684     09 3D 02 F6 | 	mov	local16, arg01
1e688     97 06 48 FB | 	callpa	#(@LR__2673-@LR__2672)>>2,fcache_load_ptr_
1e68c                 | LR__2672
1e68c     1E FB C9 FA | 	rdbyte	result1, local16 wz
1e690     01 3C 06 51 |  if_ne	add	local16, #1
1e694     F4 FF 9F 5D |  if_ne	jmp	#LR__2672
1e698                 | LR__2673
1e698     09 3D 82 F1 | 	sub	local16, arg01
1e69c     1E 25 02 F6 | 	mov	local04, local16
1e6a0     6C 4E 05 F1 | 	add	fp, #108
1e6a4     A7 28 02 FB | 	rdlong	local06, fp
1e6a8     6C 4E 85 F1 | 	sub	fp, #108
1e6ac     14 25 5A F2 | 	cmps	local04, local06 wcz
1e6b0     44 01 90 ED |  if_be	jmp	#LR__2682
1e6b4     C4 4E 05 F1 | 	add	fp, #196
1e6b8     A7 1E 02 FB | 	rdlong	local01, fp
1e6bc     5C 4E 05 F1 | 	add	fp, #92
1e6c0     A7 1E 62 FC | 	wrlong	local01, fp
1e6c4     FC 4E 85 F1 | 	sub	fp, #252
1e6c8     A7 1E 0A FB | 	rdlong	local01, fp wz
1e6cc     24 4E 85 F1 | 	sub	fp, #36
1e6d0     20 00 90 AD |  if_e	jmp	#LR__2674
1e6d4     B8 4E 05 F1 | 	add	fp, #184
1e6d8     A7 00 68 FC | 	wrlong	#0, fp
1e6dc     4C 4E 85 F1 | 	sub	fp, #76
1e6e0     A7 1E 02 FB | 	rdlong	local01, fp
1e6e4     B0 4E 05 F1 | 	add	fp, #176
1e6e8     A7 1E 62 FC | 	wrlong	local01, fp
1e6ec     1C 4F 85 F1 | 	sub	fp, #284
1e6f0     24 00 90 FD | 	jmp	#LR__2675
1e6f4                 | LR__2674
1e6f4     6C 4E 05 F1 | 	add	fp, #108
1e6f8     A7 1E 02 FB | 	rdlong	local01, fp
1e6fc     01 1E 86 F1 | 	sub	local01, #1
1e700     4C 4E 05 F1 | 	add	fp, #76
1e704     A7 22 02 FB | 	rdlong	local03, fp
1e708     11 1F 82 F1 | 	sub	local01, local03
1e70c     64 4E 05 F1 | 	add	fp, #100
1e710     A7 1E 62 FC | 	wrlong	local01, fp
1e714     1C 4F 85 F1 | 	sub	fp, #284
1e718                 | LR__2675
1e718     97 20 48 FB | 	callpa	#(@LR__2677-@LR__2676)>>2,fcache_load_ptr_
1e71c                 | LR__2676
1e71c     1C 4F 05 F1 | 	add	fp, #284
1e720     A7 1E 0A FB | 	rdlong	local01, fp wz
1e724     1C 4F 85 F1 | 	sub	fp, #284
1e728     30 00 90 AD |  if_e	jmp	#LR__2678
1e72c     20 4F 05 F1 | 	add	fp, #288
1e730     A7 20 02 FB | 	rdlong	local02, fp
1e734     10 23 02 F6 | 	mov	local03, local02
1e738     01 22 06 F1 | 	add	local03, #1
1e73c     A7 22 62 FC | 	wrlong	local03, fp
1e740     10 55 48 FC | 	wrbyte	#42, local02
1e744     04 4E 85 F1 | 	sub	fp, #4
1e748     A7 1E 02 FB | 	rdlong	local01, fp
1e74c     01 1E 86 F1 | 	sub	local01, #1
1e750     A7 1E 62 FC | 	wrlong	local01, fp
1e754     1C 4F 85 F1 | 	sub	fp, #284
1e758     C0 FF 9F FD | 	jmp	#LR__2676
1e75c                 | LR__2677
1e75c                 | LR__2678
1e75c     B8 4E 05 F1 | 	add	fp, #184
1e760     A7 1E 0A FB | 	rdlong	local01, fp wz
1e764     B8 4E 85 F1 | 	sub	fp, #184
1e768     70 00 90 AD |  if_e	jmp	#LR__2681
1e76c     20 4F 05 F1 | 	add	fp, #288
1e770     A7 20 02 FB | 	rdlong	local02, fp
1e774     10 23 02 F6 | 	mov	local03, local02
1e778     01 22 06 F1 | 	add	local03, #1
1e77c     A7 22 62 FC | 	wrlong	local03, fp
1e780     10 5D 48 FC | 	wrbyte	#46, local02
1e784     04 4E 85 F1 | 	sub	fp, #4
1e788     A7 00 68 FC | 	wrlong	#0, fp
1e78c     1C 4F 85 F1 | 	sub	fp, #284
1e790                 | LR__2679
1e790     1C 4F 05 F1 | 	add	fp, #284
1e794     A7 20 02 FB | 	rdlong	local02, fp
1e798     64 4E 85 F1 | 	sub	fp, #100
1e79c     A7 26 02 FB | 	rdlong	local05, fp
1e7a0     B8 4E 85 F1 | 	sub	fp, #184
1e7a4     13 21 52 F2 | 	cmps	local02, local05 wc
1e7a8     30 00 90 3D |  if_ae	jmp	#LR__2680
1e7ac     20 4F 05 F1 | 	add	fp, #288
1e7b0     A7 2C 02 FB | 	rdlong	local08, fp
1e7b4     16 35 02 F6 | 	mov	local12, local08
1e7b8     01 34 06 F1 | 	add	local12, #1
1e7bc     A7 34 62 FC | 	wrlong	local12, fp
1e7c0     16 55 48 FC | 	wrbyte	#42, local08
1e7c4     04 4E 85 F1 | 	sub	fp, #4
1e7c8     A7 34 02 FB | 	rdlong	local12, fp
1e7cc     01 34 06 F1 | 	add	local12, #1
1e7d0     A7 34 62 FC | 	wrlong	local12, fp
1e7d4     1C 4F 85 F1 | 	sub	fp, #284
1e7d8     B4 FF 9F FD | 	jmp	#LR__2679
1e7dc                 | LR__2680
1e7dc                 | LR__2681
1e7dc     20 4F 05 F1 | 	add	fp, #288
1e7e0     A7 20 02 FB | 	rdlong	local02, fp
1e7e4     10 23 02 F6 | 	mov	local03, local02
1e7e8     01 22 06 F1 | 	add	local03, #1
1e7ec     A7 22 62 FC | 	wrlong	local03, fp
1e7f0     20 4F 85 F1 | 	sub	fp, #288
1e7f4     10 01 48 FC | 	wrbyte	#0, local02
1e7f8                 | LR__2682
1e7f8     04 4E 05 F1 | 	add	fp, #4
1e7fc     A7 12 02 FB | 	rdlong	arg01, fp
1e800     04 4E 05 F1 | 	add	fp, #4
1e804     A7 14 02 FB | 	rdlong	arg02, fp
1e808     BC 4E 05 F1 | 	add	fp, #188
1e80c     A7 16 02 FB | 	rdlong	arg03, fp
1e810     C4 4E 85 F1 | 	sub	fp, #196
1e814     C4 EE BF FD | 	call	#__system___fmtstr
1e818                 | LR__2683
1e818     A7 F0 03 F6 | 	mov	ptra, fp
1e81c     B2 00 A0 FD | 	call	#popregs_
1e820                 | __system___fmtfloat_ret
1e820     2D 00 64 FD | 	ret
1e824                 | 
1e824                 | __system__Left_S
1e824     04 4A 05 F6 | 	mov	COUNT_, #4
1e828     A8 00 A0 FD | 	call	#pushregs_
1e82c     09 1F 02 F6 | 	mov	local01, arg01
1e830     0A 21 02 F6 | 	mov	local02, arg02
1e834     01 20 56 F2 | 	cmps	local02, #1 wc
1e838     5E 01 00 CF 
1e83c     96 FB 05 C6 |  if_b	mov	result1, ##@LR__4573
1e840     5C 00 90 CD |  if_b	jmp	#LR__2693
1e844     0F 13 02 F6 | 	mov	arg01, local01
1e848     09 23 02 F6 | 	mov	local03, arg01
1e84c     97 06 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
1e850                 | LR__2690
1e850     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e854     01 22 06 51 |  if_ne	add	local03, #1
1e858     F4 FF 9F 5D |  if_ne	jmp	#LR__2690
1e85c                 | LR__2691
1e85c     09 23 82 F1 | 	sub	local03, arg01
1e860     11 FB 01 F6 | 	mov	result1, local03
1e864     10 FB 59 F2 | 	cmps	result1, local02 wcz
1e868     0F FB 01 E6 |  if_be	mov	result1, local01
1e86c     30 00 90 ED |  if_be	jmp	#LR__2693
1e870     10 13 02 F6 | 	mov	arg01, local02
1e874     02 12 06 F1 | 	add	arg01, #2
1e878     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
1e87c     FD 24 0A F6 | 	mov	local04, result1 wz
1e880     18 00 90 AD |  if_e	jmp	#LR__2692
1e884     12 13 02 F6 | 	mov	arg01, local04
1e888     0F 15 02 F6 | 	mov	arg02, local01
1e88c     10 17 02 F6 | 	mov	arg03, local02
1e890     6C DE BF FD | 	call	#__system____builtin_memmove
1e894     12 21 02 F1 | 	add	local02, local04
1e898     10 01 48 FC | 	wrbyte	#0, local02
1e89c                 | LR__2692
1e89c     12 FB 01 F6 | 	mov	result1, local04
1e8a0                 | LR__2693
1e8a0     A7 F0 03 F6 | 	mov	ptra, fp
1e8a4     B2 00 A0 FD | 	call	#popregs_
1e8a8                 | __system__Left_S_ret
1e8a8     2D 00 64 FD | 	ret
1e8ac                 | 
1e8ac                 | __system__Right_S
1e8ac     05 4A 05 F6 | 	mov	COUNT_, #5
1e8b0     A8 00 A0 FD | 	call	#pushregs_
1e8b4     09 1F 02 F6 | 	mov	local01, arg01
1e8b8     0A 21 02 F6 | 	mov	local02, arg02
1e8bc     01 20 56 F2 | 	cmps	local02, #1 wc
1e8c0     5E 01 00 CF 
1e8c4     97 FB 05 C6 |  if_b	mov	result1, ##@LR__4574
1e8c8     64 00 90 CD |  if_b	jmp	#LR__2703
1e8cc     0F 13 02 F6 | 	mov	arg01, local01
1e8d0     09 23 02 F6 | 	mov	local03, arg01
1e8d4     97 06 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1e8d8                 | LR__2700
1e8d8     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e8dc     01 22 06 51 |  if_ne	add	local03, #1
1e8e0     F4 FF 9F 5D |  if_ne	jmp	#LR__2700
1e8e4                 | LR__2701
1e8e4     09 23 82 F1 | 	sub	local03, arg01
1e8e8     11 FB 01 F6 | 	mov	result1, local03
1e8ec     FD 24 02 F6 | 	mov	local04, result1
1e8f0     10 25 5A F2 | 	cmps	local04, local02 wcz
1e8f4     0F FB 01 E6 |  if_be	mov	result1, local01
1e8f8     34 00 90 ED |  if_be	jmp	#LR__2703
1e8fc     10 13 02 F6 | 	mov	arg01, local02
1e900     02 12 06 F1 | 	add	arg01, #2
1e904     20 1D B0 FD | 	call	#__system___gc_alloc_managed
1e908     FD 26 0A F6 | 	mov	local05, result1 wz
1e90c     1C 00 90 AD |  if_e	jmp	#LR__2702
1e910     10 25 82 F1 | 	sub	local04, local02
1e914     0F 25 02 F1 | 	add	local04, local01
1e918     01 20 06 F1 | 	add	local02, #1
1e91c     13 13 02 F6 | 	mov	arg01, local05
1e920     12 15 02 F6 | 	mov	arg02, local04
1e924     10 17 02 F6 | 	mov	arg03, local02
1e928     D4 DD BF FD | 	call	#__system____builtin_memmove
1e92c                 | LR__2702
1e92c     13 FB 01 F6 | 	mov	result1, local05
1e930                 | LR__2703
1e930     A7 F0 03 F6 | 	mov	ptra, fp
1e934     B2 00 A0 FD | 	call	#popregs_
1e938                 | __system__Right_S_ret
1e938     2D 00 64 FD | 	ret
1e93c                 | 
1e93c                 | __system__Mid_S
1e93c     05 4A 05 F6 | 	mov	COUNT_, #5
1e940     A8 00 A0 FD | 	call	#pushregs_
1e944     09 1F 02 F6 | 	mov	local01, arg01
1e948     0A 21 02 F6 | 	mov	local02, arg02
1e94c     01 16 56 F2 | 	cmps	arg03, #1 wc
1e950     5E 01 00 CF 
1e954     98 FB 05 C6 |  if_b	mov	result1, ##@LR__4575
1e958     80 00 90 CD |  if_b	jmp	#LR__2713
1e95c     01 20 86 F1 | 	sub	local02, #1
1e960     00 20 56 F3 | 	fges	local02, #0 wc
1e964     0F 13 02 F6 | 	mov	arg01, local01
1e968     09 23 02 F6 | 	mov	local03, arg01
1e96c     97 06 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
1e970                 | LR__2710
1e970     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e974     01 22 06 51 |  if_ne	add	local03, #1
1e978     F4 FF 9F 5D |  if_ne	jmp	#LR__2710
1e97c                 | LR__2711
1e97c     09 23 82 F1 | 	sub	local03, arg01
1e980     11 FB 01 F6 | 	mov	result1, local03
1e984     FD 14 02 F6 | 	mov	arg02, result1
1e988     10 15 52 F2 | 	cmps	arg02, local02 wc
1e98c     5E 01 00 CF 
1e990     99 FB 05 C6 |  if_b	mov	result1, ##@LR__4576
1e994     44 00 90 CD |  if_b	jmp	#LR__2713
1e998     0A 25 02 F6 | 	mov	local04, arg02
1e99c     10 25 82 F1 | 	sub	local04, local02
1e9a0     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1e9a4     0B 25 02 16 |  if_a	mov	local04, arg03
1e9a8     12 13 02 F6 | 	mov	arg01, local04
1e9ac     02 12 06 F1 | 	add	arg01, #2
1e9b0     74 1C B0 FD | 	call	#__system___gc_alloc_managed
1e9b4     FD 26 0A F6 | 	mov	local05, result1 wz
1e9b8     1C 00 90 AD |  if_e	jmp	#LR__2712
1e9bc     0F 21 02 F1 | 	add	local02, local01
1e9c0     13 13 02 F6 | 	mov	arg01, local05
1e9c4     10 15 02 F6 | 	mov	arg02, local02
1e9c8     12 17 02 F6 | 	mov	arg03, local04
1e9cc     30 DD BF FD | 	call	#__system____builtin_memmove
1e9d0     13 25 02 F1 | 	add	local04, local05
1e9d4     12 01 48 FC | 	wrbyte	#0, local04
1e9d8                 | LR__2712
1e9d8     13 FB 01 F6 | 	mov	result1, local05
1e9dc                 | LR__2713
1e9dc     A7 F0 03 F6 | 	mov	ptra, fp
1e9e0     B2 00 A0 FD | 	call	#popregs_
1e9e4                 | __system__Mid_S_ret
1e9e4     2D 00 64 FD | 	ret
1e9e8                 | 
1e9e8                 | __system__Chr_S
1e9e8     01 4A 05 F6 | 	mov	COUNT_, #1
1e9ec     A8 00 A0 FD | 	call	#pushregs_
1e9f0     09 1F 02 F6 | 	mov	local01, arg01
1e9f4     03 12 06 F6 | 	mov	arg01, #3
1e9f8     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
1e9fc     00 FA 4D F2 | 	cmps	result1, #0 wz
1ea00     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1ea04     01 FA 05 51 |  if_ne	add	result1, #1
1ea08     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1ea0c     01 FA 85 51 |  if_ne	sub	result1, #1
1ea10     A7 F0 03 F6 | 	mov	ptra, fp
1ea14     B2 00 A0 FD | 	call	#popregs_
1ea18                 | __system__Chr_S_ret
1ea18     2D 00 64 FD | 	ret
1ea1c                 | 
1ea1c                 | __system__str_S
1ea1c     02 4A 05 F6 | 	mov	COUNT_, #2
1ea20     A8 00 A0 FD | 	call	#pushregs_
1ea24     09 1F 02 F6 | 	mov	local01, arg01
1ea28     10 12 06 F6 | 	mov	arg01, #16
1ea2c     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
1ea30     FD 20 0A F6 | 	mov	local02, result1 wz
1ea34     30 00 90 AD |  if_e	jmp	#LR__2720
1ea38     F8 13 02 F6 | 	mov	arg01, ptra
1ea3c     08 F0 07 F1 | 	add	ptra, #8
1ea40     09 21 62 FC | 	wrlong	local02, arg01
1ea44     04 12 06 F1 | 	add	arg01, #4
1ea48     09 01 68 FC | 	wrlong	#0, arg01
1ea4c     04 12 86 F1 | 	sub	arg01, #4
1ea50     00 E8 03 FF 
1ea54     00 12 46 F5 | 	or	arg01, ##131072000
1ea58     00 14 06 F6 | 	mov	arg02, #0
1ea5c     0F 17 02 F6 | 	mov	arg03, local01
1ea60     67 18 06 F6 | 	mov	arg04, #103
1ea64     90 EE BF FD | 	call	#__system___fmtfloat
1ea68                 | LR__2720
1ea68     10 FB 01 F6 | 	mov	result1, local02
1ea6c     A7 F0 03 F6 | 	mov	ptra, fp
1ea70     B2 00 A0 FD | 	call	#popregs_
1ea74                 | __system__str_S_ret
1ea74     2D 00 64 FD | 	ret
1ea78                 | 
1ea78                 | __system__Number_S
1ea78     08 4A 05 F6 | 	mov	COUNT_, #8
1ea7c     A8 00 A0 FD | 	call	#pushregs_
1ea80     09 1F 02 F6 | 	mov	local01, arg01
1ea84     0A 21 0A F6 | 	mov	local02, arg02 wz
1ea88     0B 23 02 F6 | 	mov	local03, arg03
1ea8c     3C 00 90 5D |  if_ne	jmp	#LR__2732
1ea90     01 20 06 F6 | 	mov	local02, #1
1ea94     11 25 02 F6 | 	mov	local04, local03
1ea98     01 26 06 F6 | 	mov	local05, #1
1ea9c     97 16 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
1eaa0                 | LR__2730
1eaa0     00 28 06 F6 | 	mov	local06, #0
1eaa4     0F 25 1A F2 | 	cmp	local04, local01 wcz
1eaa8     01 28 66 E6 |  if_be	neg	local06, #1
1eaac     12 27 12 F2 | 	cmp	local05, local04 wc
1eab0     15 2B A2 F1 | 	subx	local07, local07
1eab4     15 29 CA F7 | 	test	local06, local07 wz
1eab8     11 25 02 5D |  if_ne	qmul	local04, local03
1eabc     12 27 02 56 |  if_ne	mov	local05, local04
1eac0     01 20 06 51 |  if_ne	add	local02, #1
1eac4     18 24 62 5D |  if_ne	getqx	local04
1eac8     D4 FF 9F 5D |  if_ne	jmp	#LR__2730
1eacc                 | LR__2731
1eacc                 | LR__2732
1eacc     20 20 36 F3 | 	fle	local02, #32 wc
1ead0     10 13 02 F6 | 	mov	arg01, local02
1ead4     02 12 06 F1 | 	add	arg01, #2
1ead8     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1eadc     FD 28 02 F6 | 	mov	local06, result1
1eae0     10 2B 02 F6 | 	mov	local07, local02
1eae4     14 2B 02 F1 | 	add	local07, local06
1eae8     15 01 48 FC | 	wrbyte	#0, local07
1eaec     97 1A 48 FB | 	callpa	#(@LR__2734-@LR__2733)>>2,fcache_load_ptr_
1eaf0                 | LR__2733
1eaf0     01 20 16 F2 | 	cmp	local02, #1 wc
1eaf4     2C 00 90 CD |  if_b	jmp	#LR__2735
1eaf8     11 1F 12 FD | 	qdiv	local01, local03
1eafc     01 20 86 F1 | 	sub	local02, #1
1eb00     10 2B 02 F6 | 	mov	local07, local02
1eb04     14 2B 02 F1 | 	add	local07, local06
1eb08     19 2C 62 FD | 	getqy	local08
1eb0c     0A 2C 16 F2 | 	cmp	local08, #10 wc
1eb10     30 2C 06 C1 |  if_b	add	local08, #48
1eb14     37 2C 06 31 |  if_ae	add	local08, #55
1eb18     15 2D 42 FC | 	wrbyte	local08, local07
1eb1c     18 1E 62 FD | 	getqx	local01
1eb20     CC FF 9F FD | 	jmp	#LR__2733
1eb24                 | LR__2734
1eb24                 | LR__2735
1eb24     14 FB 01 F6 | 	mov	result1, local06
1eb28     A7 F0 03 F6 | 	mov	ptra, fp
1eb2c     B2 00 A0 FD | 	call	#popregs_
1eb30                 | __system__Number_S_ret
1eb30     2D 00 64 FD | 	ret
1eb34                 | 
1eb34                 | __system__LCase_S
1eb34     07 4A 05 F6 | 	mov	COUNT_, #7
1eb38     A8 00 A0 FD | 	call	#pushregs_
1eb3c     09 1F 02 F6 | 	mov	local01, arg01
1eb40     09 21 02 F6 | 	mov	local02, arg01
1eb44     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1eb48                 | LR__2740
1eb48     10 FB C9 FA | 	rdbyte	result1, local02 wz
1eb4c     01 20 06 51 |  if_ne	add	local02, #1
1eb50     F4 FF 9F 5D |  if_ne	jmp	#LR__2740
1eb54                 | LR__2741
1eb54     09 21 82 F1 | 	sub	local02, arg01
1eb58     10 FB 01 F6 | 	mov	result1, local02
1eb5c     FD 20 0A F6 | 	mov	local02, result1 wz
1eb60     5E 01 00 AF 
1eb64     9A FB 05 A6 |  if_e	mov	result1, ##@LR__4577
1eb68     7C 00 90 AD |  if_e	jmp	#LR__2747
1eb6c     10 13 02 F6 | 	mov	arg01, local02
1eb70     02 12 06 F1 | 	add	arg01, #2
1eb74     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1eb78     FD 22 0A F6 | 	mov	local03, result1 wz
1eb7c     64 00 90 AD |  if_e	jmp	#LR__2746
1eb80     01 24 66 F6 | 	neg	local04, #1
1eb84     97 26 48 FB | 	callpa	#(@LR__2745-@LR__2742)>>2,fcache_load_ptr_
1eb88                 | LR__2742
1eb88     01 24 06 F1 | 	add	local04, #1
1eb8c     12 27 02 F6 | 	mov	local05, local04
1eb90     0F 27 02 F1 | 	add	local05, local01
1eb94     13 29 C2 FA | 	rdbyte	local06, local05
1eb98     41 28 56 F2 | 	cmps	local06, #65 wc
1eb9c     18 00 90 CD |  if_b	jmp	#LR__2743
1eba0     5B 28 56 F2 | 	cmps	local06, #91 wc
1eba4     12 2B 02 C6 |  if_b	mov	local07, local04
1eba8     11 2B 02 C1 |  if_b	add	local07, local03
1ebac     20 28 06 C1 |  if_b	add	local06, #32
1ebb0     15 29 42 CC |  if_b	wrbyte	local06, local07
1ebb4     0C 00 90 CD |  if_b	jmp	#LR__2744
1ebb8                 | LR__2743
1ebb8     12 2B 02 F6 | 	mov	local07, local04
1ebbc     11 2B 02 F1 | 	add	local07, local03
1ebc0     15 29 42 FC | 	wrbyte	local06, local07
1ebc4                 | LR__2744
1ebc4     10 29 02 F6 | 	mov	local06, local02
1ebc8     01 28 86 F1 | 	sub	local06, #1
1ebcc     14 25 0A F2 | 	cmp	local04, local06 wz
1ebd0     B4 FF 9F 5D |  if_ne	jmp	#LR__2742
1ebd4                 | LR__2745
1ebd4     11 21 02 F1 | 	add	local02, local03
1ebd8     10 01 48 FC | 	wrbyte	#0, local02
1ebdc     11 FB 01 F6 | 	mov	result1, local03
1ebe0     04 00 90 FD | 	jmp	#LR__2747
1ebe4                 | LR__2746
1ebe4     11 FB 01 F6 | 	mov	result1, local03
1ebe8                 | LR__2747
1ebe8     A7 F0 03 F6 | 	mov	ptra, fp
1ebec     B2 00 A0 FD | 	call	#popregs_
1ebf0                 | __system__LCase_S_ret
1ebf0     2D 00 64 FD | 	ret
1ebf4                 | 
1ebf4                 | __system__LTrim_S
1ebf4     05 4A 05 F6 | 	mov	COUNT_, #5
1ebf8     A8 00 A0 FD | 	call	#pushregs_
1ebfc     09 1F 02 F6 | 	mov	local01, arg01
1ec00     09 21 02 F6 | 	mov	local02, arg01
1ec04     97 06 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
1ec08                 | LR__2750
1ec08     10 FB C9 FA | 	rdbyte	result1, local02 wz
1ec0c     01 20 06 51 |  if_ne	add	local02, #1
1ec10     F4 FF 9F 5D |  if_ne	jmp	#LR__2750
1ec14                 | LR__2751
1ec14     09 21 82 F1 | 	sub	local02, arg01
1ec18     10 FB 01 F6 | 	mov	result1, local02
1ec1c     FD 20 0A F6 | 	mov	local02, result1 wz
1ec20     5E 01 00 AF 
1ec24     9B FB 05 A6 |  if_e	mov	result1, ##@LR__4578
1ec28     7C 00 90 AD |  if_e	jmp	#LR__2756
1ec2c     00 22 06 F6 | 	mov	local03, #0
1ec30     10 25 02 F6 | 	mov	local04, local02
1ec34                 | LR__2752
1ec34     12 23 52 F2 | 	cmps	local03, local04 wc
1ec38     68 00 90 3D |  if_ae	jmp	#LR__2755
1ec3c     11 17 02 F6 | 	mov	arg03, local03
1ec40     0F 17 02 F1 | 	add	arg03, local01
1ec44     0B 17 C2 FA | 	rdbyte	arg03, arg03
1ec48     20 16 0E F2 | 	cmp	arg03, #32 wz
1ec4c     4C 00 90 AD |  if_e	jmp	#LR__2754
1ec50     10 13 02 F6 | 	mov	arg01, local02
1ec54     11 13 82 F1 | 	sub	arg01, local03
1ec58     02 12 06 F1 | 	add	arg01, #2
1ec5c     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1ec60     FD 26 0A F6 | 	mov	local05, result1 wz
1ec64     2C 00 90 AD |  if_e	jmp	#LR__2753
1ec68     11 15 02 F6 | 	mov	arg02, local03
1ec6c     0F 15 02 F1 | 	add	arg02, local01
1ec70     10 17 02 F6 | 	mov	arg03, local02
1ec74     11 17 82 F1 | 	sub	arg03, local03
1ec78     13 13 02 F6 | 	mov	arg01, local05
1ec7c     80 DA BF FD | 	call	#__system____builtin_memmove
1ec80     11 21 82 F1 | 	sub	local02, local03
1ec84     13 21 02 F1 | 	add	local02, local05
1ec88     10 01 48 FC | 	wrbyte	#0, local02
1ec8c     13 FB 01 F6 | 	mov	result1, local05
1ec90     14 00 90 FD | 	jmp	#LR__2756
1ec94                 | LR__2753
1ec94     13 FB 01 F6 | 	mov	result1, local05
1ec98     0C 00 90 FD | 	jmp	#LR__2756
1ec9c                 | LR__2754
1ec9c     01 22 06 F1 | 	add	local03, #1
1eca0     90 FF 9F FD | 	jmp	#LR__2752
1eca4                 | LR__2755
1eca4     0F FB 01 F6 | 	mov	result1, local01
1eca8                 | LR__2756
1eca8     A7 F0 03 F6 | 	mov	ptra, fp
1ecac     B2 00 A0 FD | 	call	#popregs_
1ecb0                 | __system__LTrim_S_ret
1ecb0     2D 00 64 FD | 	ret
1ecb4                 | 
1ecb4                 | __system__RTrim_S
1ecb4     04 4A 05 F6 | 	mov	COUNT_, #4
1ecb8     A8 00 A0 FD | 	call	#pushregs_
1ecbc     09 1F 02 F6 | 	mov	local01, arg01
1ecc0     09 21 02 F6 | 	mov	local02, arg01
1ecc4     97 06 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1ecc8                 | LR__2760
1ecc8     10 FB C9 FA | 	rdbyte	result1, local02 wz
1eccc     01 20 06 51 |  if_ne	add	local02, #1
1ecd0     F4 FF 9F 5D |  if_ne	jmp	#LR__2760
1ecd4                 | LR__2761
1ecd4     09 21 82 F1 | 	sub	local02, arg01
1ecd8     10 FB 01 F6 | 	mov	result1, local02
1ecdc     FD 20 0A F6 | 	mov	local02, result1 wz
1ece0     5E 01 00 AF 
1ece4     9C FB 05 A6 |  if_e	mov	result1, ##@LR__4579
1ece8     74 00 90 AD |  if_e	jmp	#LR__2765
1ecec     10 23 02 F6 | 	mov	local03, local02
1ecf0     01 22 86 F1 | 	sub	local03, #1
1ecf4                 | LR__2762
1ecf4     11 15 02 F6 | 	mov	arg02, local03
1ecf8     0F 15 02 F1 | 	add	arg02, local01
1ecfc     0A 21 C2 FA | 	rdbyte	local02, arg02
1ed00     20 20 0E F2 | 	cmp	local02, #32 wz
1ed04     44 00 90 AD |  if_e	jmp	#LR__2764
1ed08     11 13 02 F6 | 	mov	arg01, local03
1ed0c     02 12 06 F1 | 	add	arg01, #2
1ed10     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1ed14     FD 24 0A F6 | 	mov	local04, result1 wz
1ed18     28 00 90 AD |  if_e	jmp	#LR__2763
1ed1c     11 17 02 F6 | 	mov	arg03, local03
1ed20     01 16 06 F1 | 	add	arg03, #1
1ed24     12 13 02 F6 | 	mov	arg01, local04
1ed28     0F 15 02 F6 | 	mov	arg02, local01
1ed2c     D0 D9 BF FD | 	call	#__system____builtin_memmove
1ed30     01 22 06 F1 | 	add	local03, #1
1ed34     12 23 02 F1 | 	add	local03, local04
1ed38     11 01 48 FC | 	wrbyte	#0, local03
1ed3c     12 FB 01 F6 | 	mov	result1, local04
1ed40     1C 00 90 FD | 	jmp	#LR__2765
1ed44                 | LR__2763
1ed44     12 FB 01 F6 | 	mov	result1, local04
1ed48     14 00 90 FD | 	jmp	#LR__2765
1ed4c                 | LR__2764
1ed4c     01 22 86 F1 | 	sub	local03, #1
1ed50     00 22 56 F2 | 	cmps	local03, #0 wc
1ed54     9C FF 9F 3D |  if_ae	jmp	#LR__2762
1ed58     5E 01 00 FF 
1ed5c     9D FB 05 F6 | 	mov	result1, ##@LR__4580
1ed60                 | LR__2765
1ed60     A7 F0 03 F6 | 	mov	ptra, fp
1ed64     B2 00 A0 FD | 	call	#popregs_
1ed68                 | __system__RTrim_S_ret
1ed68     2D 00 64 FD | 	ret
1ed6c                 | 
1ed6c                 | __system__Instr
1ed6c     07 4A 05 F6 | 	mov	COUNT_, #7
1ed70     A8 00 A0 FD | 	call	#pushregs_
1ed74     09 1F 02 F6 | 	mov	local01, arg01
1ed78     0A 21 02 F6 | 	mov	local02, arg02
1ed7c     0B 23 02 F6 | 	mov	local03, arg03
1ed80     11 13 02 F6 | 	mov	arg01, local03
1ed84     09 25 02 F6 | 	mov	local04, arg01
1ed88     97 06 48 FB | 	callpa	#(@LR__2771-@LR__2770)>>2,fcache_load_ptr_
1ed8c                 | LR__2770
1ed8c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1ed90     01 24 06 51 |  if_ne	add	local04, #1
1ed94     F4 FF 9F 5D |  if_ne	jmp	#LR__2770
1ed98                 | LR__2771
1ed98     09 25 82 F1 | 	sub	local04, arg01
1ed9c     12 27 02 F6 | 	mov	local05, local04
1eda0     10 13 02 F6 | 	mov	arg01, local02
1eda4     09 25 02 F6 | 	mov	local04, arg01
1eda8     97 06 48 FB | 	callpa	#(@LR__2773-@LR__2772)>>2,fcache_load_ptr_
1edac                 | LR__2772
1edac     12 FB C9 FA | 	rdbyte	result1, local04 wz
1edb0     01 24 06 51 |  if_ne	add	local04, #1
1edb4     F4 FF 9F 5D |  if_ne	jmp	#LR__2772
1edb8                 | LR__2773
1edb8     09 25 82 F1 | 	sub	local04, arg01
1edbc     12 FB 01 F6 | 	mov	result1, local04
1edc0     FD 18 0A F6 | 	mov	arg04, result1 wz
1edc4     00 FA 05 A6 |  if_e	mov	result1, #0
1edc8     98 00 90 AD |  if_e	jmp	#LR__2777
1edcc     00 26 0E F2 | 	cmp	local05, #0 wz
1edd0     00 FA 05 A6 |  if_e	mov	result1, #0
1edd4     8C 00 90 AD |  if_e	jmp	#LR__2777
1edd8     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1eddc     00 FA 05 16 |  if_a	mov	result1, #0
1ede0     80 00 90 1D |  if_a	jmp	#LR__2777
1ede4     01 1E 56 F2 | 	cmps	local01, #1 wc
1ede8     01 1E 06 C6 |  if_b	mov	local01, #1
1edec     11 29 C2 FA | 	rdbyte	local06, local03
1edf0     01 26 0E F2 | 	cmp	local05, #1 wz
1edf4     18 00 90 5D |  if_ne	jmp	#LR__2774
1edf8     10 13 02 F6 | 	mov	arg01, local02
1edfc     14 15 02 F6 | 	mov	arg02, local06
1ee00     0F 17 02 F6 | 	mov	arg03, local01
1ee04     00 18 06 F6 | 	mov	arg04, #0
1ee08     B4 33 B0 FD | 	call	#__system____ScanForChar
1ee0c     54 00 90 FD | 	jmp	#LR__2777
1ee10                 | LR__2774
1ee10     0F 2B 02 F6 | 	mov	local07, local01
1ee14                 | LR__2775
1ee14     10 13 02 F6 | 	mov	arg01, local02
1ee18     14 15 02 F6 | 	mov	arg02, local06
1ee1c     15 17 02 F6 | 	mov	arg03, local07
1ee20     00 18 06 F6 | 	mov	arg04, #0
1ee24     98 33 B0 FD | 	call	#__system____ScanForChar
1ee28     FD 2A 0A F6 | 	mov	local07, result1 wz
1ee2c     30 00 90 AD |  if_e	jmp	#LR__2776
1ee30     13 17 02 F6 | 	mov	arg03, local05
1ee34     10 13 02 F6 | 	mov	arg01, local02
1ee38     15 15 02 F6 | 	mov	arg02, local07
1ee3c     FC FA BF FD | 	call	#__system__Mid_S
1ee40     FD 12 02 F6 | 	mov	arg01, result1
1ee44     11 15 02 F6 | 	mov	arg02, local03
1ee48     BC D9 BF FD | 	call	#__system___string_cmp
1ee4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ee50     15 FB 01 A6 |  if_e	mov	result1, local07
1ee54     0C 00 90 AD |  if_e	jmp	#LR__2777
1ee58     13 2B 02 F1 | 	add	local07, local05
1ee5c     B4 FF 9F FD | 	jmp	#LR__2775
1ee60                 | LR__2776
1ee60     00 FA 05 F6 | 	mov	result1, #0
1ee64                 | LR__2777
1ee64     A7 F0 03 F6 | 	mov	ptra, fp
1ee68     B2 00 A0 FD | 	call	#popregs_
1ee6c                 | __system__Instr_ret
1ee6c     2D 00 64 FD | 	ret
1ee70                 | 
1ee70                 | __system___strerror
1ee70     00 12 56 F2 | 	cmps	arg01, #0 wc
1ee74     08 00 90 CD |  if_b	jmp	#LR__2780
1ee78     1A 12 56 F2 | 	cmps	arg01, #26 wc
1ee7c     04 00 90 CD |  if_b	jmp	#LR__2781
1ee80                 | LR__2780
1ee80     19 12 06 F6 | 	mov	arg01, #25
1ee84                 | LR__2781
1ee84     02 12 66 F0 | 	shl	arg01, #2
1ee88     01 00 00 FF 
1ee8c     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
1ee90     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1ee94     09 FB 01 FB | 	rdlong	result1, arg01
1ee98     01 00 00 FF 
1ee9c     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
1eea0                 | __system___strerror_ret
1eea0     2D 00 64 FD | 	ret
1eea4                 | 
1eea4                 | __system___int64_shl
1eea4     20 16 CE F7 | 	test	arg03, #32 wz
1eea8     09 15 02 56 |  if_ne	mov	arg02, arg01
1eeac     00 12 06 56 |  if_ne	mov	arg01, #0
1eeb0     1F 16 CE F7 | 	test	arg03, #31 wz
1eeb4     18 00 90 AD |  if_e	jmp	#LR__2790
1eeb8     0B 15 62 F0 | 	shl	arg02, arg03
1eebc     09 FB 01 F6 | 	mov	result1, arg01
1eec0     0B FD 61 F6 | 	neg	result2, arg03
1eec4     FE FA 41 F0 | 	shr	result1, result2
1eec8     FD 14 42 F5 | 	or	arg02, result1
1eecc     0B 13 62 F0 | 	shl	arg01, arg03
1eed0                 | LR__2790
1eed0     0A FD 01 F6 | 	mov	result2, arg02
1eed4     09 FB 01 F6 | 	mov	result1, arg01
1eed8                 | __system___int64_shl_ret
1eed8     2D 00 64 FD | 	ret
1eedc                 | 
1eedc                 | __system___usepins
1eedc     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1eee0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1eee4     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
1eee8     00 13 CA F7 | 	test	arg01, _var01 wz
1eeec     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
1eef0     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1eef4     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
1eef8     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1eefc     00 FA 05 56 |  if_ne	mov	result1, #0
1ef00     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1ef04     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1ef08     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1ef0c     09 03 42 F5 | 	or	_var02, arg01
1ef10     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1ef14     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ef18     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1ef1c     0A 03 42 F5 | 	or	_var02, arg02
1ef20     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1ef24     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1ef28     01 FA 65 F6 | 	neg	result1, #1
1ef2c                 | __system___usepins_ret
1ef2c     2D 00 64 FD | 	ret
1ef30                 | 
1ef30                 | __system___freepins
1ef30     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1ef34     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ef38     09 01 22 F5 | 	andn	_var01, arg01
1ef3c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ef40     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ef44     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ef48     0A 01 22 F5 | 	andn	_var01, arg02
1ef4c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ef50     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1ef54                 | __system___freepins_ret
1ef54     2D 00 64 FD | 	ret
1ef58                 | 
1ef58                 | __system___float_fromuns
1ef58     09 17 0A F6 | 	mov	arg03, arg01 wz
1ef5c     0B FB 01 A6 |  if_e	mov	result1, arg03
1ef60     24 00 90 AD |  if_e	jmp	#LR__2800
1ef64     0B 15 92 F7 | 	encod	arg02, arg03 wc
1ef68     01 14 06 C1 |  if_b	add	arg02, #1
1ef6c     01 14 86 F1 | 	sub	arg02, #1
1ef70     1F 12 06 F6 | 	mov	arg01, #31
1ef74     0A 13 82 F1 | 	sub	arg01, arg02
1ef78     09 17 62 F0 | 	shl	arg03, arg01
1ef7c     02 16 46 F0 | 	shr	arg03, #2
1ef80     00 12 06 F6 | 	mov	arg01, #0
1ef84     4C 09 B0 FD | 	call	#__system___float_Pack
1ef88                 | LR__2800
1ef88                 | __system___float_fromuns_ret
1ef88     2D 00 64 FD | 	ret
1ef8c                 | 
1ef8c                 | __system___float_add
1ef8c     0F 4A 05 F6 | 	mov	COUNT_, #15
1ef90     A8 00 A0 FD | 	call	#pushregs_
1ef94     09 1F 02 F6 | 	mov	local01, arg01
1ef98     0A 21 02 F6 | 	mov	local02, arg02
1ef9c     00 22 06 F6 | 	mov	local03, #0
1efa0     0F 25 02 F6 | 	mov	local04, local01
1efa4     12 27 02 F6 | 	mov	local05, local04
1efa8     16 26 46 F7 | 	zerox	local05, #22
1efac     12 29 02 F6 | 	mov	local06, local04
1efb0     01 28 66 F0 | 	shl	local06, #1
1efb4     18 28 46 F0 | 	shr	local06, #24
1efb8     1F 24 46 F0 | 	shr	local04, #31
1efbc     10 13 02 F6 | 	mov	arg01, local02
1efc0     09 FB 01 F6 | 	mov	result1, arg01
1efc4     FD 2A 02 F6 | 	mov	local07, result1
1efc8     15 2D 02 F6 | 	mov	local08, local07
1efcc     16 2C 46 F7 | 	zerox	local08, #22
1efd0     15 2F 02 F6 | 	mov	local09, local07
1efd4     01 2E 66 F0 | 	shl	local09, #1
1efd8     18 2E 46 F0 | 	shr	local09, #24
1efdc     17 31 02 F6 | 	mov	local10, local09
1efe0     1F 2A 46 F0 | 	shr	local07, #31
1efe4     00 32 06 F6 | 	mov	local11, #0
1efe8     00 34 06 F6 | 	mov	local12, #0
1efec     18 29 12 F2 | 	cmp	local06, local10 wc
1eff0     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1eff4     2C 00 90 1D |  if_a	jmp	#LR__2810
1eff8     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1effc     24 00 90 3D |  if_ae	jmp	#LR__2810
1f000     13 37 02 F6 | 	mov	local13, local05
1f004     16 27 02 F6 | 	mov	local05, local08
1f008     1B 2D 02 F6 | 	mov	local08, local13
1f00c     14 37 02 F6 | 	mov	local13, local06
1f010     18 29 02 F6 | 	mov	local06, local10
1f014     1B 31 02 F6 | 	mov	local10, local13
1f018     12 37 02 F6 | 	mov	local13, local04
1f01c     15 25 02 F6 | 	mov	local04, local07
1f020     1B 2B 02 F6 | 	mov	local07, local13
1f024                 | LR__2810
1f024     FF 28 0E F2 | 	cmp	local06, #255 wz
1f028     70 01 90 AD |  if_e	jmp	#LR__2825
1f02c     00 28 0E F2 | 	cmp	local06, #0 wz
1f030     AC 01 90 AD |  if_e	jmp	#LR__2827
1f034     17 26 26 F4 | 	bith	local05, #23
1f038                 | LR__2811
1f038     00 30 0E F2 | 	cmp	local10, #0 wz
1f03c     F0 01 90 AD |  if_e	jmp	#LR__2831
1f040     17 2C 26 F4 | 	bith	local08, #23
1f044                 | LR__2812
1f044     7F 28 86 F1 | 	sub	local06, #127
1f048     7F 30 86 F1 | 	sub	local10, #127
1f04c     14 39 02 F6 | 	mov	local14, local06
1f050     18 39 82 F1 | 	sub	local14, local10
1f054     97 14 48 FB | 	callpa	#(@LR__2814-@LR__2813)>>2,fcache_load_ptr_
1f058                 | LR__2813
1f058     20 38 56 F2 | 	cmps	local14, #32 wc
1f05c     20 00 90 CD |  if_b	jmp	#LR__2815
1f060     16 2F 02 F6 | 	mov	local09, local08
1f064     00 32 0E F2 | 	cmp	local11, #0 wz
1f068     6F 32 62 FD | 	wrnz	local11
1f06c     19 2F 42 F5 | 	or	local09, local11
1f070     17 33 02 F6 | 	mov	local11, local09
1f074     00 2C 06 F6 | 	mov	local08, #0
1f078     20 38 86 F1 | 	sub	local14, #32
1f07c     D8 FF 9F FD | 	jmp	#LR__2813
1f080                 | LR__2814
1f080                 | LR__2815
1f080     00 38 0E F2 | 	cmp	local14, #0 wz
1f084     38 00 90 AD |  if_e	jmp	#LR__2816
1f088     16 37 02 F6 | 	mov	local13, local08
1f08c     20 30 06 F6 | 	mov	local10, #32
1f090     1C 31 82 F1 | 	sub	local10, local14
1f094     18 37 62 F0 | 	shl	local13, local10
1f098     19 31 02 F6 | 	mov	local10, local11
1f09c     20 2E 06 F6 | 	mov	local09, #32
1f0a0     1C 2F 82 F1 | 	sub	local09, local14
1f0a4     17 31 6A F0 | 	shl	local10, local09 wz
1f0a8     1C 33 42 F0 | 	shr	local11, local14
1f0ac     1C 2D 42 F0 | 	shr	local08, local14
1f0b0     1B 33 42 F5 | 	or	local11, local13
1f0b4     00 3A 06 F6 | 	mov	local15, #0
1f0b8     01 3A 06 56 |  if_ne	mov	local15, #1
1f0bc     1D 33 42 F5 | 	or	local11, local15
1f0c0                 | LR__2816
1f0c0     12 3B 02 F6 | 	mov	local15, local04
1f0c4     15 3B 62 F5 | 	xor	local15, local07
1f0c8     01 3A CE F7 | 	test	local15, #1 wz
1f0cc     18 00 90 AD |  if_e	jmp	#LR__2817
1f0d0     16 2D 22 F6 | 	not	local08, local08
1f0d4     19 33 22 F6 | 	not	local11, local11
1f0d8     01 32 0E F1 | 	add	local11, #1 wz
1f0dc     00 3A 06 F6 | 	mov	local15, #0
1f0e0     01 3A 06 A6 |  if_e	mov	local15, #1
1f0e4     1D 2D 02 F1 | 	add	local08, local15
1f0e8                 | LR__2817
1f0e8     19 35 12 F1 | 	add	local12, local11 wc
1f0ec     16 27 22 F1 | 	addx	local05, local08
1f0f0     00 26 56 F2 | 	cmps	local05, #0 wc
1f0f4     1C 00 90 3D |  if_ae	jmp	#LR__2818
1f0f8     01 24 66 F5 | 	xor	local04, #1
1f0fc     13 27 22 F6 | 	not	local05, local05
1f100     1A 35 22 F6 | 	not	local12, local12
1f104     01 34 0E F1 | 	add	local12, #1 wz
1f108     00 3A 06 F6 | 	mov	local15, #0
1f10c     01 3A 06 A6 |  if_e	mov	local15, #1
1f110     1D 27 02 F1 | 	add	local05, local15
1f114                 | LR__2818
1f114     00 80 00 FF 
1f118     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1f11c     28 00 90 CD |  if_b	jmp	#LR__2819
1f120     01 28 06 F1 | 	add	local06, #1
1f124     1A 39 02 F6 | 	mov	local14, local12
1f128     01 38 06 F5 | 	and	local14, #1
1f12c     01 34 46 F0 | 	shr	local12, #1
1f130     13 3B 02 F6 | 	mov	local15, local05
1f134     1F 3A 66 F0 | 	shl	local15, #31
1f138     1D 35 42 F5 | 	or	local12, local15
1f13c     1C 35 42 F5 | 	or	local12, local14
1f140     01 26 46 F0 | 	shr	local05, #1
1f144     3C 00 90 FD | 	jmp	#LR__2824
1f148                 | LR__2819
1f148     00 40 00 FF 
1f14c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1f150     30 00 90 3D |  if_ae	jmp	#LR__2823
1f154     00 26 0E F2 | 	cmp	local05, #0 wz
1f158     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1f15c     08 24 46 A5 |  if_e	or	local04, #8
1f160     01 24 26 A5 |  if_e	andn	local04, #1
1f164     1C 00 90 AD |  if_e	jmp	#LR__2822
1f168                 | LR__2820
1f168     00 40 00 FF 
1f16c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1f170     10 00 90 3D |  if_ae	jmp	#LR__2821
1f174     1A 35 12 F1 | 	add	local12, local12 wc
1f178     13 27 22 F1 | 	addx	local05, local05
1f17c     01 28 86 F1 | 	sub	local06, #1
1f180     E4 FF 9F FD | 	jmp	#LR__2820
1f184                 | LR__2821
1f184                 | LR__2822
1f184                 | LR__2823
1f184                 | LR__2824
1f184     13 13 02 F6 | 	mov	arg01, local05
1f188     1A 15 02 F6 | 	mov	arg02, local12
1f18c     14 17 02 F6 | 	mov	arg03, local06
1f190     12 19 02 F6 | 	mov	arg04, local04
1f194     6C 34 B0 FD | 	call	#__system__pack_0540
1f198     DC 00 90 FD | 	jmp	#LR__2835
1f19c                 | LR__2825
1f19c     FF 30 0E F2 | 	cmp	local10, #255 wz
1f1a0     10 00 90 5D |  if_ne	jmp	#LR__2826
1f1a4     12 2B 0A F2 | 	cmp	local07, local04 wz
1f1a8     00 F8 3F 5F 
1f1ac     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1f1b0     C4 00 90 5D |  if_ne	jmp	#LR__2835
1f1b4                 | LR__2826
1f1b4     00 26 0E F2 | 	cmp	local05, #0 wz
1f1b8     00 F8 3F 5F 
1f1bc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1f1c0     B4 00 90 5D |  if_ne	jmp	#LR__2835
1f1c4     1A 15 02 F6 | 	mov	arg02, local12
1f1c8     14 17 02 F6 | 	mov	arg03, local06
1f1cc     12 19 02 F6 | 	mov	arg04, local04
1f1d0     02 18 46 F5 | 	or	arg04, #2
1f1d4     13 13 02 F6 | 	mov	arg01, local05
1f1d8     28 34 B0 FD | 	call	#__system__pack_0540
1f1dc     98 00 90 FD | 	jmp	#LR__2835
1f1e0                 | LR__2827
1f1e0     00 26 0E F2 | 	cmp	local05, #0 wz
1f1e4     28 00 90 AD |  if_e	jmp	#LR__2830
1f1e8     01 26 66 F0 | 	shl	local05, #1
1f1ec     97 0E 48 FB | 	callpa	#(@LR__2829-@LR__2828)>>2,fcache_load_ptr_
1f1f0                 | LR__2828
1f1f0     00 40 00 FF 
1f1f4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1f1f8     14 3B 02 C6 |  if_b	mov	local15, local06
1f1fc     01 3A 86 C1 |  if_b	sub	local15, #1
1f200     1D 29 02 C6 |  if_b	mov	local06, local15
1f204     01 26 66 C0 |  if_b	shl	local05, #1
1f208     E4 FF 9F CD |  if_b	jmp	#LR__2828
1f20c                 | LR__2829
1f20c     28 FE 9F FD | 	jmp	#LR__2811
1f210                 | LR__2830
1f210     15 25 02 F5 | 	and	local04, local07
1f214     12 19 02 F6 | 	mov	arg04, local04
1f218     08 18 46 F5 | 	or	arg04, #8
1f21c     00 12 06 F6 | 	mov	arg01, #0
1f220     00 14 06 F6 | 	mov	arg02, #0
1f224     00 16 06 F6 | 	mov	arg03, #0
1f228     D8 33 B0 FD | 	call	#__system__pack_0540
1f22c     48 00 90 FD | 	jmp	#LR__2835
1f230                 | LR__2831
1f230     00 2C 0E F2 | 	cmp	local08, #0 wz
1f234     28 00 90 AD |  if_e	jmp	#LR__2834
1f238     01 2C 66 F0 | 	shl	local08, #1
1f23c     97 0E 48 FB | 	callpa	#(@LR__2833-@LR__2832)>>2,fcache_load_ptr_
1f240                 | LR__2832
1f240     00 40 00 FF 
1f244     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1f248     18 3B 02 C6 |  if_b	mov	local15, local10
1f24c     01 3A 86 C1 |  if_b	sub	local15, #1
1f250     1D 31 02 C6 |  if_b	mov	local10, local15
1f254     01 2C 66 C0 |  if_b	shl	local08, #1
1f258     E4 FF 9F CD |  if_b	jmp	#LR__2832
1f25c                 | LR__2833
1f25c     E4 FD 9F FD | 	jmp	#LR__2812
1f260                 | LR__2834
1f260     7F 28 86 F1 | 	sub	local06, #127
1f264     13 13 02 F6 | 	mov	arg01, local05
1f268     1A 15 02 F6 | 	mov	arg02, local12
1f26c     14 17 02 F6 | 	mov	arg03, local06
1f270     12 19 02 F6 | 	mov	arg04, local04
1f274     8C 33 B0 FD | 	call	#__system__pack_0540
1f278                 | LR__2835
1f278     A7 F0 03 F6 | 	mov	ptra, fp
1f27c     B2 00 A0 FD | 	call	#popregs_
1f280                 | __system___float_add_ret
1f280     2D 00 64 FD | 	ret
1f284                 | 
1f284                 | __system___float_sqrt
1f284     04 4A 05 F6 | 	mov	COUNT_, #4
1f288     A8 00 A0 FD | 	call	#pushregs_
1f28c     09 1F 02 F6 | 	mov	local01, arg01
1f290     09 FB 01 F6 | 	mov	result1, arg01
1f294     FD 20 02 F6 | 	mov	local02, result1
1f298     10 23 02 F6 | 	mov	local03, local02
1f29c     16 22 46 F7 | 	zerox	local03, #22
1f2a0     10 25 02 F6 | 	mov	local04, local02
1f2a4     01 24 66 F0 | 	shl	local04, #1
1f2a8     18 24 4E F0 | 	shr	local04, #24 wz
1f2ac     1F 20 46 F0 | 	shr	local02, #31
1f2b0     70 00 90 AD |  if_e	jmp	#LR__2841
1f2b4     17 22 26 F4 | 	bith	local03, #23
1f2b8                 | LR__2840
1f2b8     00 20 0E F2 | 	cmp	local02, #0 wz
1f2bc     00 F8 3F 5F 
1f2c0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1f2c4     88 00 90 5D |  if_ne	jmp	#LR__2844
1f2c8     FF 24 0E F2 | 	cmp	local04, #255 wz
1f2cc     0F FB 01 A6 |  if_e	mov	result1, local01
1f2d0     7C 00 90 AD |  if_e	jmp	#LR__2844
1f2d4     7F 24 86 F1 | 	sub	local04, #127
1f2d8     01 24 CE F7 | 	test	local04, #1 wz
1f2dc     01 22 66 50 |  if_ne	shl	local03, #1
1f2e0     05 22 66 F0 | 	shl	local03, #5
1f2e4     11 01 38 FD | 	qsqrt	#0, local03
1f2e8     01 24 86 51 |  if_ne	sub	local04, #1
1f2ec     12 25 52 F6 | 	abs	local04, local04 wc
1f2f0     01 24 46 F0 | 	shr	local04, #1
1f2f4     12 17 82 F6 | 	negc	arg03, local04
1f2f8     10 19 02 F6 | 	mov	arg04, local02
1f2fc     18 12 62 FD | 	getqx	arg01
1f300     09 15 02 F6 | 	mov	arg02, arg01
1f304     19 14 66 F0 | 	shl	arg02, #25
1f308     07 12 46 F0 | 	shr	arg01, #7
1f30c     00 80 00 FF 
1f310     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1f314     01 16 06 31 |  if_ae	add	arg03, #1
1f318     01 12 46 30 |  if_ae	shr	arg01, #1
1f31c     E4 32 B0 FD | 	call	#__system__pack_0540
1f320     2C 00 90 FD | 	jmp	#LR__2844
1f324                 | LR__2841
1f324     00 22 0E F2 | 	cmp	local03, #0 wz
1f328     0F FB 01 A6 |  if_e	mov	result1, local01
1f32c     20 00 90 AD |  if_e	jmp	#LR__2844
1f330     01 22 66 F0 | 	shl	local03, #1
1f334     97 0A 48 FB | 	callpa	#(@LR__2843-@LR__2842)>>2,fcache_load_ptr_
1f338                 | LR__2842
1f338     00 40 00 FF 
1f33c     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1f340     01 24 86 C1 |  if_b	sub	local04, #1
1f344     01 22 66 C0 |  if_b	shl	local03, #1
1f348     EC FF 9F CD |  if_b	jmp	#LR__2842
1f34c                 | LR__2843
1f34c     68 FF 9F FD | 	jmp	#LR__2840
1f350                 | LR__2844
1f350     A7 F0 03 F6 | 	mov	ptra, fp
1f354     B2 00 A0 FD | 	call	#popregs_
1f358                 | __system___float_sqrt_ret
1f358     2D 00 64 FD | 	ret
1f35c                 | 
1f35c                 | __system___float_mul
1f35c     0B 4A 05 F6 | 	mov	COUNT_, #11
1f360     A8 00 A0 FD | 	call	#pushregs_
1f364     09 1F 02 F6 | 	mov	local01, arg01
1f368     0A 21 02 F6 | 	mov	local02, arg02
1f36c     0F 23 02 F6 | 	mov	local03, local01
1f370     11 25 02 F6 | 	mov	local04, local03
1f374     16 24 46 F7 | 	zerox	local04, #22
1f378     11 27 02 F6 | 	mov	local05, local03
1f37c     01 26 66 F0 | 	shl	local05, #1
1f380     18 26 46 F0 | 	shr	local05, #24
1f384     1F 22 46 F0 | 	shr	local03, #31
1f388     10 FB 01 F6 | 	mov	result1, local02
1f38c     FD 28 02 F6 | 	mov	local06, result1
1f390     14 2B 02 F6 | 	mov	local07, local06
1f394     16 2A 46 F7 | 	zerox	local07, #22
1f398     14 2D 02 F6 | 	mov	local08, local06
1f39c     01 2C 66 F0 | 	shl	local08, #1
1f3a0     18 2C 46 F0 | 	shr	local08, #24
1f3a4     1F 28 46 F0 | 	shr	local06, #31
1f3a8     14 23 62 F5 | 	xor	local03, local06
1f3ac     FF 26 0E F2 | 	cmp	local05, #255 wz
1f3b0     90 00 90 AD |  if_e	jmp	#LR__2853
1f3b4     FF 2C 0E F2 | 	cmp	local08, #255 wz
1f3b8     D8 00 90 AD |  if_e	jmp	#LR__2855
1f3bc     00 26 0E F2 | 	cmp	local05, #0 wz
1f3c0     0C 01 90 AD |  if_e	jmp	#LR__2856
1f3c4     17 24 26 F4 | 	bith	local04, #23
1f3c8                 | LR__2850
1f3c8     00 2C 0E F2 | 	cmp	local08, #0 wz
1f3cc     44 01 90 AD |  if_e	jmp	#LR__2860
1f3d0     17 2A 26 F4 | 	bith	local07, #23
1f3d4                 | LR__2851
1f3d4     12 21 02 F6 | 	mov	local02, local04
1f3d8     04 20 66 F0 | 	shl	local02, #4
1f3dc     15 29 02 F6 | 	mov	local06, local07
1f3e0     05 28 66 F0 | 	shl	local06, #5
1f3e4     14 21 02 FD | 	qmul	local02, local06
1f3e8     16 27 02 F1 | 	add	local05, local08
1f3ec     FE 26 86 F1 | 	sub	local05, #254
1f3f0     13 2F 02 F6 | 	mov	local09, local05
1f3f4     04 24 66 F0 | 	shl	local04, #4
1f3f8     05 2A 66 F0 | 	shl	local07, #5
1f3fc     18 30 62 FD | 	getqx	local10
1f400     15 25 02 FD | 	qmul	local04, local07
1f404     19 32 62 FD | 	getqy	local11
1f408     00 80 00 FF 
1f40c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1f410     18 00 90 CD |  if_b	jmp	#LR__2852
1f414     01 2E 06 F1 | 	add	local09, #1
1f418     01 30 46 F0 | 	shr	local10, #1
1f41c     19 2D 02 F6 | 	mov	local08, local11
1f420     1F 2C 66 F0 | 	shl	local08, #31
1f424     16 31 42 F5 | 	or	local10, local08
1f428     01 32 46 F0 | 	shr	local11, #1
1f42c                 | LR__2852
1f42c     19 13 02 F6 | 	mov	arg01, local11
1f430     18 15 02 F6 | 	mov	arg02, local10
1f434     17 17 02 F6 | 	mov	arg03, local09
1f438     11 19 02 F6 | 	mov	arg04, local03
1f43c     C4 31 B0 FD | 	call	#__system__pack_0540
1f440     10 01 90 FD | 	jmp	#LR__2864
1f444                 | LR__2853
1f444     00 24 0E F2 | 	cmp	local04, #0 wz
1f448     0F FB 01 56 |  if_ne	mov	result1, local01
1f44c     04 01 90 5D |  if_ne	jmp	#LR__2864
1f450     FF 2C 56 F2 | 	cmps	local08, #255 wc
1f454     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1f458     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1f45c     18 00 90 4D |  if_c_and_nz	jmp	#LR__2854
1f460     00 F8 3F CF 
1f464     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1f468     E8 00 90 CD |  if_b	jmp	#LR__2864
1f46c     00 2A 0E F2 | 	cmp	local07, #0 wz
1f470     10 FB 01 56 |  if_ne	mov	result1, local02
1f474     DC 00 90 5D |  if_ne	jmp	#LR__2864
1f478                 | LR__2854
1f478     02 22 46 F5 | 	or	local03, #2
1f47c     00 12 06 F6 | 	mov	arg01, #0
1f480     00 14 06 F6 | 	mov	arg02, #0
1f484     13 17 02 F6 | 	mov	arg03, local05
1f488     11 19 02 F6 | 	mov	arg04, local03
1f48c     74 31 B0 FD | 	call	#__system__pack_0540
1f490     C0 00 90 FD | 	jmp	#LR__2864
1f494                 | LR__2855
1f494     00 26 0E F2 | 	cmp	local05, #0 wz
1f498     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1f49c     00 F8 3F AF 
1f4a0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1f4a4     AC 00 90 AD |  if_e	jmp	#LR__2864
1f4a8     00 2A 0E F2 | 	cmp	local07, #0 wz
1f4ac     10 FB 01 56 |  if_ne	mov	result1, local02
1f4b0     A0 00 90 5D |  if_ne	jmp	#LR__2864
1f4b4     16 17 02 F6 | 	mov	arg03, local08
1f4b8     11 19 02 F6 | 	mov	arg04, local03
1f4bc     02 18 46 F5 | 	or	arg04, #2
1f4c0     00 12 06 F6 | 	mov	arg01, #0
1f4c4     00 14 06 F6 | 	mov	arg02, #0
1f4c8     38 31 B0 FD | 	call	#__system__pack_0540
1f4cc     84 00 90 FD | 	jmp	#LR__2864
1f4d0                 | LR__2856
1f4d0     00 24 0E F2 | 	cmp	local04, #0 wz
1f4d4     20 00 90 AD |  if_e	jmp	#LR__2859
1f4d8     01 24 66 F0 | 	shl	local04, #1
1f4dc     97 0A 48 FB | 	callpa	#(@LR__2858-@LR__2857)>>2,fcache_load_ptr_
1f4e0                 | LR__2857
1f4e0     00 40 00 FF 
1f4e4     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1f4e8     01 26 86 C1 |  if_b	sub	local05, #1
1f4ec     01 24 66 C0 |  if_b	shl	local04, #1
1f4f0     EC FF 9F CD |  if_b	jmp	#LR__2857
1f4f4                 | LR__2858
1f4f4     D0 FE 9F FD | 	jmp	#LR__2850
1f4f8                 | LR__2859
1f4f8     08 22 46 F5 | 	or	local03, #8
1f4fc     00 12 06 F6 | 	mov	arg01, #0
1f500     00 14 06 F6 | 	mov	arg02, #0
1f504     00 16 06 F6 | 	mov	arg03, #0
1f508     11 19 02 F6 | 	mov	arg04, local03
1f50c     F4 30 B0 FD | 	call	#__system__pack_0540
1f510     40 00 90 FD | 	jmp	#LR__2864
1f514                 | LR__2860
1f514     00 2A 0E F2 | 	cmp	local07, #0 wz
1f518     20 00 90 AD |  if_e	jmp	#LR__2863
1f51c     01 2A 66 F0 | 	shl	local07, #1
1f520     97 0A 48 FB | 	callpa	#(@LR__2862-@LR__2861)>>2,fcache_load_ptr_
1f524                 | LR__2861
1f524     00 40 00 FF 
1f528     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1f52c     01 2C 86 C1 |  if_b	sub	local08, #1
1f530     01 2A 66 C0 |  if_b	shl	local07, #1
1f534     EC FF 9F CD |  if_b	jmp	#LR__2861
1f538                 | LR__2862
1f538     98 FE 9F FD | 	jmp	#LR__2851
1f53c                 | LR__2863
1f53c     08 22 46 F5 | 	or	local03, #8
1f540     00 12 06 F6 | 	mov	arg01, #0
1f544     00 14 06 F6 | 	mov	arg02, #0
1f548     00 16 06 F6 | 	mov	arg03, #0
1f54c     11 19 02 F6 | 	mov	arg04, local03
1f550     B0 30 B0 FD | 	call	#__system__pack_0540
1f554                 | LR__2864
1f554     A7 F0 03 F6 | 	mov	ptra, fp
1f558     B2 00 A0 FD | 	call	#popregs_
1f55c                 | __system___float_mul_ret
1f55c     2D 00 64 FD | 	ret
1f560                 | 
1f560                 | __system___float_div
1f560     0E 4A 05 F6 | 	mov	COUNT_, #14
1f564     A8 00 A0 FD | 	call	#pushregs_
1f568     09 23 02 F6 | 	mov	local03, arg01
1f56c     0A 25 02 F6 | 	mov	local04, arg02
1f570     11 27 02 F6 | 	mov	local05, local03
1f574     13 29 02 F6 | 	mov	local06, local05
1f578     16 28 46 F7 | 	zerox	local06, #22
1f57c     13 2B 02 F6 | 	mov	local07, local05
1f580     01 2A 66 F0 | 	shl	local07, #1
1f584     18 2A 46 F0 | 	shr	local07, #24
1f588     1F 26 46 F0 | 	shr	local05, #31
1f58c     12 FB 01 F6 | 	mov	result1, local04
1f590     FD 2C 02 F6 | 	mov	local08, result1
1f594     16 2F 02 F6 | 	mov	local09, local08
1f598     16 2E 46 F7 | 	zerox	local09, #22
1f59c     16 31 02 F6 | 	mov	local10, local08
1f5a0     01 30 66 F0 | 	shl	local10, #1
1f5a4     18 30 46 F0 | 	shr	local10, #24
1f5a8     1F 2C 46 F0 | 	shr	local08, #31
1f5ac     16 27 62 F5 | 	xor	local05, local08
1f5b0     FF 2A 0E F2 | 	cmp	local07, #255 wz
1f5b4     D4 00 90 AD |  if_e	jmp	#LR__2875
1f5b8     FF 30 0E F2 | 	cmp	local10, #255 wz
1f5bc     04 01 90 AD |  if_e	jmp	#LR__2876
1f5c0     00 2A 0E F2 | 	cmp	local07, #0 wz
1f5c4     24 01 90 AD |  if_e	jmp	#LR__2877
1f5c8     17 28 26 F4 | 	bith	local06, #23
1f5cc                 | LR__2870
1f5cc     00 30 0E F2 | 	cmp	local10, #0 wz
1f5d0     70 01 90 AD |  if_e	jmp	#LR__2881
1f5d4     17 2E 26 F4 | 	bith	local09, #23
1f5d8                 | LR__2871
1f5d8     18 2B 82 F1 | 	sub	local07, local10
1f5dc     15 33 02 F6 | 	mov	local11, local07
1f5e0     14 13 02 F6 | 	mov	arg01, local06
1f5e4     02 12 46 F0 | 	shr	arg01, #2
1f5e8     1E 28 66 F0 | 	shl	local06, #30
1f5ec     14 15 02 F6 | 	mov	arg02, local06
1f5f0     17 17 02 F6 | 	mov	arg03, local09
1f5f4     28 12 62 FD | 	setq	arg01
1f5f8     0B 15 12 FD | 	qdiv	arg02, arg03
1f5fc     00 34 06 F6 | 	mov	local12, #0
1f600     18 1E 62 FD | 	getqx	local01
1f604     19 FC 61 FD | 	getqy	result2
1f608     FE 20 02 F6 | 	mov	local02, result2
1f60c     0F 37 02 F6 | 	mov	local13, local01
1f610     00 20 4E F2 | 	cmps	local02, #0 wz
1f614     1B 39 02 F6 | 	mov	local14, local13
1f618     19 38 66 F0 | 	shl	local14, #25
1f61c     01 34 06 56 |  if_ne	mov	local12, #1
1f620     1A 39 42 F5 | 	or	local14, local12
1f624     07 36 46 F0 | 	shr	local13, #7
1f628     00 80 00 FF 
1f62c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1f630     1C 00 90 CD |  if_b	jmp	#LR__2872
1f634     01 32 06 F1 | 	add	local11, #1
1f638     01 38 46 F0 | 	shr	local14, #1
1f63c     1B 35 02 F6 | 	mov	local12, local13
1f640     1F 34 66 F0 | 	shl	local12, #31
1f644     1A 39 42 F5 | 	or	local14, local12
1f648     01 36 46 F0 | 	shr	local13, #1
1f64c     24 00 90 FD | 	jmp	#LR__2874
1f650                 | LR__2872
1f650     00 40 00 FF 
1f654     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1f658     18 00 90 3D |  if_ae	jmp	#LR__2873
1f65c     01 32 86 F1 | 	sub	local11, #1
1f660     01 36 66 F0 | 	shl	local13, #1
1f664     1C 35 02 F6 | 	mov	local12, local14
1f668     1F 34 46 F0 | 	shr	local12, #31
1f66c     1A 37 42 F5 | 	or	local13, local12
1f670     01 38 66 F0 | 	shl	local14, #1
1f674                 | LR__2873
1f674                 | LR__2874
1f674     1B 13 02 F6 | 	mov	arg01, local13
1f678     1C 15 02 F6 | 	mov	arg02, local14
1f67c     19 17 02 F6 | 	mov	arg03, local11
1f680     13 19 02 F6 | 	mov	arg04, local05
1f684     7C 2F B0 FD | 	call	#__system__pack_0540
1f688     F8 00 90 FD | 	jmp	#LR__2885
1f68c                 | LR__2875
1f68c     00 28 0E F2 | 	cmp	local06, #0 wz
1f690     11 FB 01 56 |  if_ne	mov	result1, local03
1f694     EC 00 90 5D |  if_ne	jmp	#LR__2885
1f698     FF 30 0E F2 | 	cmp	local10, #255 wz
1f69c     00 F8 3F AF 
1f6a0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1f6a4     DC 00 90 AD |  if_e	jmp	#LR__2885
1f6a8     02 26 46 F5 | 	or	local05, #2
1f6ac     00 12 06 F6 | 	mov	arg01, #0
1f6b0     00 14 06 F6 | 	mov	arg02, #0
1f6b4     15 17 02 F6 | 	mov	arg03, local07
1f6b8     13 19 02 F6 | 	mov	arg04, local05
1f6bc     44 2F B0 FD | 	call	#__system__pack_0540
1f6c0     C0 00 90 FD | 	jmp	#LR__2885
1f6c4                 | LR__2876
1f6c4     00 2E 0E F2 | 	cmp	local09, #0 wz
1f6c8     12 FB 01 56 |  if_ne	mov	result1, local04
1f6cc     B4 00 90 5D |  if_ne	jmp	#LR__2885
1f6d0     13 19 02 F6 | 	mov	arg04, local05
1f6d4     08 18 46 F5 | 	or	arg04, #8
1f6d8     00 12 06 F6 | 	mov	arg01, #0
1f6dc     00 14 06 F6 | 	mov	arg02, #0
1f6e0     00 16 06 F6 | 	mov	arg03, #0
1f6e4     1C 2F B0 FD | 	call	#__system__pack_0540
1f6e8     98 00 90 FD | 	jmp	#LR__2885
1f6ec                 | LR__2877
1f6ec     00 28 0E F2 | 	cmp	local06, #0 wz
1f6f0     20 00 90 AD |  if_e	jmp	#LR__2880
1f6f4     01 28 66 F0 | 	shl	local06, #1
1f6f8     97 0A 48 FB | 	callpa	#(@LR__2879-@LR__2878)>>2,fcache_load_ptr_
1f6fc                 | LR__2878
1f6fc     00 40 00 FF 
1f700     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1f704     01 2A 86 C1 |  if_b	sub	local07, #1
1f708     01 28 66 C0 |  if_b	shl	local06, #1
1f70c     EC FF 9F CD |  if_b	jmp	#LR__2878
1f710                 | LR__2879
1f710     B8 FE 9F FD | 	jmp	#LR__2870
1f714                 | LR__2880
1f714     00 30 0E F2 | 	cmp	local10, #0 wz
1f718     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1f71c     00 F8 3F AF 
1f720     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1f724     5C 00 90 AD |  if_e	jmp	#LR__2885
1f728     13 19 02 F6 | 	mov	arg04, local05
1f72c     08 18 46 F5 | 	or	arg04, #8
1f730     00 12 06 F6 | 	mov	arg01, #0
1f734     00 14 06 F6 | 	mov	arg02, #0
1f738     00 16 06 F6 | 	mov	arg03, #0
1f73c     C4 2E B0 FD | 	call	#__system__pack_0540
1f740     40 00 90 FD | 	jmp	#LR__2885
1f744                 | LR__2881
1f744     00 2E 0E F2 | 	cmp	local09, #0 wz
1f748     20 00 90 AD |  if_e	jmp	#LR__2884
1f74c     01 2E 66 F0 | 	shl	local09, #1
1f750     97 0A 48 FB | 	callpa	#(@LR__2883-@LR__2882)>>2,fcache_load_ptr_
1f754                 | LR__2882
1f754     00 40 00 FF 
1f758     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1f75c     01 30 86 C1 |  if_b	sub	local10, #1
1f760     01 2E 66 C0 |  if_b	shl	local09, #1
1f764     EC FF 9F CD |  if_b	jmp	#LR__2882
1f768                 | LR__2883
1f768     6C FE 9F FD | 	jmp	#LR__2871
1f76c                 | LR__2884
1f76c     02 26 46 F5 | 	or	local05, #2
1f770     00 12 06 F6 | 	mov	arg01, #0
1f774     00 14 06 F6 | 	mov	arg02, #0
1f778     00 16 06 F6 | 	mov	arg03, #0
1f77c     13 19 02 F6 | 	mov	arg04, local05
1f780     80 2E B0 FD | 	call	#__system__pack_0540
1f784                 | LR__2885
1f784     A7 F0 03 F6 | 	mov	ptra, fp
1f788     B2 00 A0 FD | 	call	#popregs_
1f78c                 | __system___float_div_ret
1f78c     2D 00 64 FD | 	ret
1f790                 | 
1f790                 | __system___float_cmp
1f790     00 C0 3F FF 
1f794     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1f798     00 C0 3F CF 
1f79c     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1f7a0     0B FB 01 36 |  if_ae	mov	result1, arg03
1f7a4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1f7a8     00 C0 7F FF 
1f7ac     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1f7b0     00 C0 7F CF 
1f7b4     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1f7b8     0B FB 01 36 |  if_ae	mov	result1, arg03
1f7bc     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1f7c0     00 12 56 F2 | 	cmps	arg01, #0 wc
1f7c4     2C 00 90 3D |  if_ae	jmp	#LR__2890
1f7c8     00 14 56 F2 | 	cmps	arg02, #0 wc
1f7cc     0A FB 01 C6 |  if_b	mov	result1, arg02
1f7d0     09 FB 81 C1 |  if_b	sub	result1, arg01
1f7d4     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1f7d8     00 14 0E F2 | 	cmp	arg02, #0 wz
1f7dc     00 00 40 AF 
1f7e0     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1f7e4     00 FA 05 A6 |  if_e	mov	result1, #0
1f7e8     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1f7ec     01 FA 65 F6 | 	neg	result1, #1
1f7f0     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1f7f4                 | LR__2890
1f7f4     00 14 56 F2 | 	cmps	arg02, #0 wc
1f7f8     1C 00 90 3D |  if_ae	jmp	#LR__2891
1f7fc     00 12 0E F2 | 	cmp	arg01, #0 wz
1f800     00 00 40 AF 
1f804     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1f808     00 FA 05 A6 |  if_e	mov	result1, #0
1f80c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1f810     01 FA 05 F6 | 	mov	result1, #1
1f814     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1f818                 | LR__2891
1f818     0A 13 82 F1 | 	sub	arg01, arg02
1f81c     09 FB 01 F6 | 	mov	result1, arg01
1f820                 | __system___float_cmp_ret
1f820     2D 00 64 FD | 	ret
1f824                 | 
1f824                 | __system___float_tointeger
1f824     02 4A 05 F6 | 	mov	COUNT_, #2
1f828     A8 00 A0 FD | 	call	#pushregs_
1f82c     50 00 B0 FD | 	call	#__system___float_Unpack
1f830     FF FF 7F FF 
1f834     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1f838     34 00 90 CD |  if_b	jmp	#LR__2900
1f83c     1F FC 55 F2 | 	cmps	result2, #31 wc
1f840     2C 00 90 3D |  if_ae	jmp	#LR__2900
1f844     02 FE 65 F0 | 	shl	result3, #2
1f848     1E 1E 06 F6 | 	mov	local01, #30
1f84c     FE 1E 82 F1 | 	sub	local01, result2
1f850     0F FF 41 F0 | 	shr	result3, local01
1f854     FF 20 02 F6 | 	mov	local02, result3
1f858     0A 21 02 F1 | 	add	local02, arg02
1f85c     01 20 46 F0 | 	shr	local02, #1
1f860     00 FA 0D F2 | 	cmp	result1, #0 wz
1f864     10 21 62 56 |  if_ne	neg	local02, local02
1f868     10 FB 01 F6 | 	mov	result1, local02
1f86c     04 00 90 FD | 	jmp	#LR__2901
1f870                 | LR__2900
1f870     00 FA 05 F6 | 	mov	result1, #0
1f874                 | LR__2901
1f874     A7 F0 03 F6 | 	mov	ptra, fp
1f878     B2 00 A0 FD | 	call	#popregs_
1f87c                 | __system___float_tointeger_ret
1f87c     2D 00 64 FD | 	ret
1f880                 | 
1f880                 | __system___float_Unpack
1f880     09 01 02 F6 | 	mov	_var01, arg01
1f884     1F 00 46 F0 | 	shr	_var01, #31
1f888     09 03 02 F6 | 	mov	_var02, arg01
1f88c     01 02 66 F0 | 	shl	_var02, #1
1f890     18 02 4E F0 | 	shr	_var02, #24 wz
1f894     17 13 06 F4 | 	bitl	arg01, #279
1f898     06 12 66 50 |  if_ne	shl	arg01, #6
1f89c     1D 12 26 54 |  if_ne	bith	arg01, #29
1f8a0     1C 00 90 5D |  if_ne	jmp	#LR__2910
1f8a4     09 05 92 F7 | 	encod	_var03, arg01 wc
1f8a8     01 04 06 C1 |  if_b	add	_var03, #1
1f8ac     17 04 86 F1 | 	sub	_var03, #23
1f8b0     02 03 02 F6 | 	mov	_var02, _var03
1f8b4     07 FC 05 F6 | 	mov	result2, #7
1f8b8     02 FD 81 F1 | 	sub	result2, _var03
1f8bc     FE 12 62 F0 | 	shl	arg01, result2
1f8c0                 | LR__2910
1f8c0     7F 02 86 F1 | 	sub	_var02, #127
1f8c4     09 FF 01 F6 | 	mov	result3, arg01
1f8c8     00 FB 01 F6 | 	mov	result1, _var01
1f8cc     01 FD 01 F6 | 	mov	result2, _var02
1f8d0                 | __system___float_Unpack_ret
1f8d0     2D 00 64 FD | 	ret
1f8d4                 | 
1f8d4                 | __system___float_Pack
1f8d4     00 00 06 F6 | 	mov	_var01, #0
1f8d8     00 16 0E F2 | 	cmp	arg03, #0 wz
1f8dc     8C 00 90 AD |  if_e	jmp	#LR__2921
1f8e0     0B 03 92 F7 | 	encod	_var02, arg03 wc
1f8e4     01 02 06 C1 |  if_b	add	_var02, #1
1f8e8     21 00 06 F6 | 	mov	_var01, #33
1f8ec     01 01 82 F1 | 	sub	_var01, _var02
1f8f0     00 17 62 F0 | 	shl	arg03, _var01
1f8f4     03 02 06 F6 | 	mov	_var02, #3
1f8f8     00 03 82 F1 | 	sub	_var02, _var01
1f8fc     01 15 02 F1 | 	add	arg02, _var02
1f900     0A 05 02 F6 | 	mov	_var03, arg02
1f904     00 17 06 F1 | 	add	arg03, #256
1f908     0B 03 02 F6 | 	mov	_var02, arg03
1f90c     FF 02 2E F5 | 	andn	_var02, #255 wz
1f910     01 04 06 A1 |  if_e	add	_var03, #1
1f914     7F 04 06 F1 | 	add	_var03, #127
1f918     FF FF 7F FF 
1f91c     E9 05 46 F3 | 	fges	_var03, ##-23
1f920     FF 04 66 F3 | 	fles	_var03, #255
1f924     01 04 56 F2 | 	cmps	_var03, #1 wc
1f928     1C 00 90 3D |  if_ae	jmp	#LR__2920
1f92c     01 16 46 F0 | 	shr	arg03, #1
1f930     1F 02 C6 F9 | 	decod	_var02, #31
1f934     0B 03 02 F1 | 	add	_var02, arg03
1f938     02 05 62 F6 | 	neg	_var03, _var03
1f93c     02 03 42 F0 | 	shr	_var02, _var03
1f940     01 17 02 F6 | 	mov	arg03, _var02
1f944     00 04 06 F6 | 	mov	_var03, #0
1f948                 | LR__2920
1f948     09 FB 01 F6 | 	mov	result1, arg01
1f94c     1F FA 65 F0 | 	shl	result1, #31
1f950     02 03 02 F6 | 	mov	_var02, _var03
1f954     17 02 66 F0 | 	shl	_var02, #23
1f958     01 FB 41 F5 | 	or	result1, _var02
1f95c     0B 07 02 F6 | 	mov	_var04, arg03
1f960     09 06 46 F0 | 	shr	_var04, #9
1f964     03 FB 41 F5 | 	or	result1, _var04
1f968     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1f96c                 | LR__2921
1f96c     00 FB 01 F6 | 	mov	result1, _var01
1f970                 | __system___float_Pack_ret
1f970     2D 00 64 FD | 	ret
1f974                 | 
1f974                 | __system___basic_print_float
1f974     05 4A 05 F6 | 	mov	COUNT_, #5
1f978     A8 00 A0 FD | 	call	#pushregs_
1f97c     09 1F 02 F6 | 	mov	local01, arg01
1f980     0A 21 02 F6 | 	mov	local02, arg02
1f984     0B 23 0A F6 | 	mov	local03, arg03 wz
1f988     0C 25 02 F6 | 	mov	local04, arg04
1f98c     14 00 90 5D |  if_ne	jmp	#LR__2930
1f990     23 24 0E F2 | 	cmp	local04, #35 wz
1f994     80 02 10 AF 
1f998     00 26 06 A6 |  if_e	mov	local05, ##537198592
1f99c     1D 26 C6 59 |  if_ne	decod	local05, #29
1f9a0     13 23 02 F6 | 	mov	local03, local05
1f9a4                 | LR__2930
1f9a4     0F 13 02 F6 | 	mov	arg01, local01
1f9a8     40 27 B0 FD | 	call	#__system___gettxfunc
1f9ac     FD 26 0A F6 | 	mov	local05, result1 wz
1f9b0     00 FA 05 A6 |  if_e	mov	result1, #0
1f9b4     13 13 02 56 |  if_ne	mov	arg01, local05
1f9b8     11 15 02 56 |  if_ne	mov	arg02, local03
1f9bc     10 17 02 56 |  if_ne	mov	arg03, local02
1f9c0     12 19 02 56 |  if_ne	mov	arg04, local04
1f9c4     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
1f9c8     A7 F0 03 F6 | 	mov	ptra, fp
1f9cc     B2 00 A0 FD | 	call	#popregs_
1f9d0                 | __system___basic_print_float_ret
1f9d0     2D 00 64 FD | 	ret
1f9d4                 | 
1f9d4                 | __system____builtin_atoi
1f9d4     07 4A 05 F6 | 	mov	COUNT_, #7
1f9d8     A8 00 A0 FD | 	call	#pushregs_
1f9dc                 | __system____builtin_atoi_enter
1f9dc     09 1F 02 F6 | 	mov	local01, arg01
1f9e0     0A 21 02 F6 | 	mov	local02, arg02
1f9e4     00 22 06 F6 | 	mov	local03, #0
1f9e8     00 24 06 F6 | 	mov	local04, #0
1f9ec     00 26 06 F6 | 	mov	local05, #0
1f9f0     97 08 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
1f9f4                 | LR__2940
1f9f4     0F 29 C2 FA | 	rdbyte	local06, local01
1f9f8     20 28 0E F2 | 	cmp	local06, #32 wz
1f9fc     01 1E 06 A1 |  if_e	add	local01, #1
1fa00     F0 FF 9F AD |  if_e	jmp	#LR__2940
1fa04                 | LR__2941
1fa04     0F 2B C2 FA | 	rdbyte	local07, local01
1fa08                 | LR__2942
1fa08     2D 2A 0E F2 | 	cmp	local07, #45 wz
1fa0c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1fa10     18 00 90 5D |  if_ne	jmp	#LR__2943
1fa14     01 1E 06 F1 | 	add	local01, #1
1fa18     2D 2A 0E F2 | 	cmp	local07, #45 wz
1fa1c     01 28 06 A6 |  if_e	mov	local06, #1
1fa20     14 27 C2 A2 |  if_e	subr	local05, local06
1fa24     0F 2B C2 FA | 	rdbyte	local07, local01
1fa28     DC FF 9F FD | 	jmp	#LR__2942
1fa2c                 | LR__2943
1fa2c     97 48 48 FB | 	callpa	#(@LR__2951-@LR__2944)>>2,fcache_load_ptr_
1fa30                 | LR__2944
1fa30                 | LR__2945
1fa30     0F 2B C2 FA | 	rdbyte	local07, local01
1fa34     5F 2A 0E F2 | 	cmp	local07, #95 wz
1fa38     01 1E 06 F1 | 	add	local01, #1
1fa3c     F0 FF 9F AD |  if_e	jmp	#LR__2945
1fa40     30 2A 0E F2 | 	cmp	local07, #48 wz
1fa44     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1fa48     00 24 06 A6 |  if_e	mov	local04, #0
1fa4c     60 00 90 AD |  if_e	jmp	#LR__2950
1fa50     31 2A 56 F2 | 	cmps	local07, #49 wc
1fa54     18 00 90 CD |  if_b	jmp	#LR__2946
1fa58     3A 2A 56 F2 | 	cmps	local07, #58 wc
1fa5c     15 25 02 C6 |  if_b	mov	local04, local07
1fa60     30 24 86 C1 |  if_b	sub	local04, #48
1fa64     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1fa68     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1fa6c     40 00 90 CD |  if_b	jmp	#LR__2949
1fa70                 | LR__2946
1fa70     0B 20 56 F2 | 	cmps	local02, #11 wc
1fa74     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1fa78     14 00 90 CD |  if_b	jmp	#LR__2947
1fa7c     67 2A 56 F2 | 	cmps	local07, #103 wc
1fa80     61 2A 86 C1 |  if_b	sub	local07, #97
1fa84     0A 24 06 C6 |  if_b	mov	local04, #10
1fa88     15 25 02 C1 |  if_b	add	local04, local07
1fa8c     20 00 90 CD |  if_b	jmp	#LR__2948
1fa90                 | LR__2947
1fa90     0B 20 56 F2 | 	cmps	local02, #11 wc
1fa94     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1fa98     24 00 90 CD |  if_b	jmp	#LR__2952
1fa9c     47 2A 56 F2 | 	cmps	local07, #71 wc
1faa0     41 2A 86 C1 |  if_b	sub	local07, #65
1faa4     0A 24 06 C6 |  if_b	mov	local04, #10
1faa8     15 25 02 C1 |  if_b	add	local04, local07
1faac     10 00 90 3D |  if_ae	jmp	#LR__2952
1fab0                 | LR__2948
1fab0                 | LR__2949
1fab0                 | LR__2950
1fab0     11 21 02 FD | 	qmul	local02, local03
1fab4     18 22 62 FD | 	getqx	local03
1fab8     12 23 02 F1 | 	add	local03, local04
1fabc     70 FF 9F FD | 	jmp	#LR__2944
1fac0                 | LR__2951
1fac0                 | LR__2952
1fac0     00 20 0E F2 | 	cmp	local02, #0 wz
1fac4     64 00 90 5D |  if_ne	jmp	#LR__2958
1fac8     78 2A 0E F2 | 	cmp	local07, #120 wz
1facc     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1fad0     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1fad4     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1fad8     14 00 90 5D |  if_ne	jmp	#LR__2953
1fadc     0F 13 02 F6 | 	mov	arg01, local01
1fae0     10 14 06 F6 | 	mov	arg02, #16
1fae4     EC FE BF FD | 	call	#__system____builtin_atoi
1fae8     FD 22 02 F6 | 	mov	local03, result1
1faec     3C 00 90 FD | 	jmp	#LR__2957
1faf0                 | LR__2953
1faf0     62 2A 0E F2 | 	cmp	local07, #98 wz
1faf4     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1faf8     14 00 90 5D |  if_ne	jmp	#LR__2954
1fafc     0F 13 02 F6 | 	mov	arg01, local01
1fb00     02 14 06 F6 | 	mov	arg02, #2
1fb04     CC FE BF FD | 	call	#__system____builtin_atoi
1fb08     FD 22 02 F6 | 	mov	local03, result1
1fb0c     1C 00 90 FD | 	jmp	#LR__2956
1fb10                 | LR__2954
1fb10     6F 2A 0E F2 | 	cmp	local07, #111 wz
1fb14     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1fb18     10 00 90 5D |  if_ne	jmp	#LR__2955
1fb1c     0F 13 02 F6 | 	mov	arg01, local01
1fb20     08 14 06 F6 | 	mov	arg02, #8
1fb24     AC FE BF FD | 	call	#__system____builtin_atoi
1fb28     FD 22 02 F6 | 	mov	local03, result1
1fb2c                 | LR__2955
1fb2c                 | LR__2956
1fb2c                 | LR__2957
1fb2c                 | LR__2958
1fb2c     00 26 0E F2 | 	cmp	local05, #0 wz
1fb30     11 23 62 56 |  if_ne	neg	local03, local03
1fb34     11 FB 01 F6 | 	mov	result1, local03
1fb38     A7 F0 03 F6 | 	mov	ptra, fp
1fb3c     B2 00 A0 FD | 	call	#popregs_
1fb40                 | __system____builtin_atoi_ret
1fb40     2D 00 64 FD | 	ret
1fb44                 | 
1fb44                 | __system____builtin_atof
1fb44     07 4A 05 F6 | 	mov	COUNT_, #7
1fb48     A8 00 A0 FD | 	call	#pushregs_
1fb4c     09 1F 02 F6 | 	mov	local01, arg01
1fb50     00 20 06 F6 | 	mov	local02, #0
1fb54     00 22 06 F6 | 	mov	local03, #0
1fb58     00 24 06 F6 | 	mov	local04, #0
1fb5c     00 26 06 F6 | 	mov	local05, #0
1fb60     97 08 48 FB | 	callpa	#(@LR__2961-@LR__2960)>>2,fcache_load_ptr_
1fb64                 | LR__2960
1fb64     0F 17 C2 FA | 	rdbyte	arg03, local01
1fb68     20 16 0E F2 | 	cmp	arg03, #32 wz
1fb6c     01 1E 06 A1 |  if_e	add	local01, #1
1fb70     F0 FF 9F AD |  if_e	jmp	#LR__2960
1fb74                 | LR__2961
1fb74     0F 29 C2 FA | 	rdbyte	local06, local01
1fb78                 | LR__2962
1fb78     2B 28 0E F2 | 	cmp	local06, #43 wz
1fb7c     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1fb80     14 00 90 5D |  if_ne	jmp	#LR__2963
1fb84     2D 28 0E F2 | 	cmp	local06, #45 wz
1fb88     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1fb8c     01 1E 06 F1 | 	add	local01, #1
1fb90     0F 29 C2 FA | 	rdbyte	local06, local01
1fb94     E0 FF 9F FD | 	jmp	#LR__2962
1fb98                 | LR__2963
1fb98                 | LR__2964
1fb98     97 08 48 FB | 	callpa	#(@LR__2966-@LR__2965)>>2,fcache_load_ptr_
1fb9c                 | LR__2965
1fb9c     0F 29 C2 FA | 	rdbyte	local06, local01
1fba0     5F 28 0E F2 | 	cmp	local06, #95 wz
1fba4     01 1E 06 F1 | 	add	local01, #1
1fba8     F0 FF 9F AD |  if_e	jmp	#LR__2965
1fbac                 | LR__2966
1fbac     00 28 0E F2 | 	cmp	local06, #0 wz
1fbb0     5C 00 90 AD |  if_e	jmp	#LR__2968
1fbb4     30 28 56 F2 | 	cmps	local06, #48 wc
1fbb8     44 00 90 CD |  if_b	jmp	#LR__2967
1fbbc     3A 28 56 F2 | 	cmps	local06, #58 wc
1fbc0     3C 00 90 3D |  if_ae	jmp	#LR__2967
1fbc4     10 13 02 F6 | 	mov	arg01, local02
1fbc8     00 90 20 FF 
1fbcc     00 14 06 F6 | 	mov	arg02, ##1092616192
1fbd0     88 F7 BF FD | 	call	#__system___float_mul
1fbd4     FD 20 02 F6 | 	mov	local02, result1
1fbd8     30 28 86 F1 | 	sub	local06, #48
1fbdc     14 13 02 F6 | 	mov	arg01, local06
1fbe0     74 F3 BF FD | 	call	#__system___float_fromuns
1fbe4     FD 14 02 F6 | 	mov	arg02, result1
1fbe8     10 13 02 F6 | 	mov	arg01, local02
1fbec     9C F3 BF FD | 	call	#__system___float_add
1fbf0     FD 20 02 F6 | 	mov	local02, result1
1fbf4     00 26 0E F2 | 	cmp	local05, #0 wz
1fbf8     01 22 86 51 |  if_ne	sub	local03, #1
1fbfc     98 FF 9F FD | 	jmp	#LR__2964
1fc00                 | LR__2967
1fc00     2E 28 0E F2 | 	cmp	local06, #46 wz
1fc04     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1fc08     01 26 06 A6 |  if_e	mov	local05, #1
1fc0c     88 FF 9F AD |  if_e	jmp	#LR__2964
1fc10                 | LR__2968
1fc10     45 28 0E F2 | 	cmp	local06, #69 wz
1fc14     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1fc18     18 00 90 5D |  if_ne	jmp	#LR__2969
1fc1c     0F 13 02 F6 | 	mov	arg01, local01
1fc20     00 14 06 F6 | 	mov	arg02, #0
1fc24     AC FD BF FD | 	call	#__system____builtin_atoi
1fc28     11 FB 01 F1 | 	add	result1, local03
1fc2c     FD 2A 02 F6 | 	mov	local07, result1
1fc30     04 00 90 FD | 	jmp	#LR__2970
1fc34                 | LR__2969
1fc34     11 2B 02 F6 | 	mov	local07, local03
1fc38                 | LR__2970
1fc38     15 17 02 F6 | 	mov	arg03, local07
1fc3c     10 13 02 F6 | 	mov	arg01, local02
1fc40     00 90 20 FF 
1fc44     00 14 06 F6 | 	mov	arg02, ##1092616192
1fc48     BC 06 B0 FD | 	call	#__system___float_pow_n
1fc4c     12 FB 61 F5 | 	xor	result1, local04
1fc50     A7 F0 03 F6 | 	mov	ptra, fp
1fc54     B2 00 A0 FD | 	call	#popregs_
1fc58                 | __system____builtin_atof_ret
1fc58     2D 00 64 FD | 	ret
1fc5c                 | 
1fc5c                 | __system____builtin_ilogb
1fc5c     20 FC BF FD | 	call	#__system___float_Unpack
1fc60     00 FE 0D F2 | 	cmp	result3, #0 wz
1fc64     00 00 40 AF 
1fc68     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1fc6c     24 00 90 AD |  if_e	jmp	#LR__2981
1fc70     80 FC 0D F2 | 	cmp	result2, #128 wz
1fc74     18 00 90 5D |  if_ne	jmp	#LR__2980
1fc78     00 00 10 FF 
1fc7c     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1fc80     1E FA CD A9 |  if_e	bmask	result1, #30
1fc84     0C 00 90 AD |  if_e	jmp	#LR__2981
1fc88     1F FA C5 F9 | 	decod	result1, #31
1fc8c     04 00 90 FD | 	jmp	#LR__2981
1fc90                 | LR__2980
1fc90     FE FA 01 F6 | 	mov	result1, result2
1fc94                 | LR__2981
1fc94                 | __system____builtin_ilogb_ret
1fc94     2D 00 64 FD | 	ret
1fc98                 | 
1fc98                 | __system____builtin_sinf
1fc98     03 4A 05 F6 | 	mov	COUNT_, #3
1fc9c     A8 00 A0 FD | 	call	#pushregs_
1fca0     09 1F 02 F6 | 	mov	local01, arg01
1fca4     87 64 20 FF 
1fca8     DB 15 06 F6 | 	mov	arg02, ##1086918619
1fcac     B0 F8 BF FD | 	call	#__system___float_div
1fcb0     FD 12 02 F6 | 	mov	arg01, result1
1fcb4     00 14 06 F6 | 	mov	arg02, #0
1fcb8     68 FB BF FD | 	call	#__system___float_tointeger
1fcbc     FD 16 0A F6 | 	mov	arg03, result1 wz
1fcc0     44 00 90 AD |  if_e	jmp	#LR__2990
1fcc4     0B 13 52 F6 | 	abs	arg01, arg03 wc
1fcc8     1F 20 C6 C9 |  if_b	decod	local02, #31
1fccc     00 20 06 36 |  if_ae	mov	local02, #0
1fcd0     84 F2 BF FD | 	call	#__system___float_fromuns
1fcd4     10 FB 61 F5 | 	xor	result1, local02
1fcd8     FD 12 02 F6 | 	mov	arg01, result1
1fcdc     1E 14 C6 F9 | 	decod	arg02, #30
1fce0     78 F6 BF FD | 	call	#__system___float_mul
1fce4     FD 12 02 F6 | 	mov	arg01, result1
1fce8     87 24 20 FF 
1fcec     DB 15 06 F6 | 	mov	arg02, ##1078530011
1fcf0     68 F6 BF FD | 	call	#__system___float_mul
1fcf4     FD 14 02 F6 | 	mov	arg02, result1
1fcf8     0F 13 02 F6 | 	mov	arg01, local01
1fcfc     1F 14 E6 F4 | 	bitnot	arg02, #31
1fd00     88 F2 BF FD | 	call	#__system___float_add
1fd04     FD 1E 02 F6 | 	mov	local01, result1
1fd08                 | LR__2990
1fd08     0F 13 02 F6 | 	mov	arg01, local01
1fd0c     66 E6 1E FF 
1fd10     CD 14 06 F6 | 	mov	arg02, ##1036831949
1fd14     01 16 06 F6 | 	mov	arg03, #1
1fd18     74 FA BF FD | 	call	#__system___float_cmp
1fd1c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fd20     5C 00 90 3D |  if_ae	jmp	#LR__2991
1fd24     0F 13 02 F6 | 	mov	arg01, local01
1fd28     66 E6 5E FF 
1fd2c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1fd30     01 16 66 F6 | 	neg	arg03, #1
1fd34     58 FA BF FD | 	call	#__system___float_cmp
1fd38     01 FA 55 F2 | 	cmps	result1, #1 wc
1fd3c     40 00 90 CD |  if_b	jmp	#LR__2991
1fd40     0F 13 02 F6 | 	mov	arg01, local01
1fd44     0F 15 02 F6 | 	mov	arg02, local01
1fd48     10 F6 BF FD | 	call	#__system___float_mul
1fd4c     FD 12 02 F6 | 	mov	arg01, result1
1fd50     0F 15 02 F6 | 	mov	arg02, local01
1fd54     04 F6 BF FD | 	call	#__system___float_mul
1fd58     FD 12 02 F6 | 	mov	arg01, result1
1fd5c     00 60 20 FF 
1fd60     00 14 06 F6 | 	mov	arg02, ##1086324736
1fd64     F8 F7 BF FD | 	call	#__system___float_div
1fd68     FD 14 02 F6 | 	mov	arg02, result1
1fd6c     0F 13 02 F6 | 	mov	arg01, local01
1fd70     1F 14 E6 F4 | 	bitnot	arg02, #31
1fd74     14 F2 BF FD | 	call	#__system___float_add
1fd78     FD 22 02 F6 | 	mov	local03, result1
1fd7c     54 00 90 FD | 	jmp	#LR__2992
1fd80                 | LR__2991
1fd80     0F 13 02 F6 | 	mov	arg01, local01
1fd84     7C 91 26 FF 
1fd88     83 15 06 F6 | 	mov	arg02, ##1294137731
1fd8c     CC F5 BF FD | 	call	#__system___float_mul
1fd90     FD 12 02 F6 | 	mov	arg01, result1
1fd94     00 14 06 F6 | 	mov	arg02, #0
1fd98     88 FA BF FD | 	call	#__system___float_tointeger
1fd9c     02 FA 65 F0 | 	shl	result1, #2
1fda0     00 00 A0 FF 
1fda4     FD 00 48 FD | 	qrotate	##1073741824, result1
1fda8     19 12 62 FD | 	getqy	arg01
1fdac     09 13 52 F6 | 	abs	arg01, arg01 wc
1fdb0     1F 20 C6 C9 |  if_b	decod	local02, #31
1fdb4     00 20 06 36 |  if_ae	mov	local02, #0
1fdb8     9C F1 BF FD | 	call	#__system___float_fromuns
1fdbc     10 FB 61 F5 | 	xor	result1, local02
1fdc0     FD 12 02 F6 | 	mov	arg01, result1
1fdc4     00 40 27 FF 
1fdc8     00 14 06 F6 | 	mov	arg02, ##1317011456
1fdcc     90 F7 BF FD | 	call	#__system___float_div
1fdd0     FD 22 02 F6 | 	mov	local03, result1
1fdd4                 | LR__2992
1fdd4     11 FB 01 F6 | 	mov	result1, local03
1fdd8     A7 F0 03 F6 | 	mov	ptra, fp
1fddc     B2 00 A0 FD | 	call	#popregs_
1fde0                 | __system____builtin_sinf_ret
1fde0     2D 00 64 FD | 	ret
1fde4                 | 
1fde4                 | __system____builtin_tanf
1fde4     02 4A 05 F6 | 	mov	COUNT_, #2
1fde8     A8 00 A0 FD | 	call	#pushregs_
1fdec     09 1F 02 F6 | 	mov	local01, arg01
1fdf0     A4 FE BF FD | 	call	#__system____builtin_sinf
1fdf4     FD 20 02 F6 | 	mov	local02, result1
1fdf8     0F 15 02 F6 | 	mov	arg02, local01
1fdfc     87 E4 1F FF 
1fe00     DB 13 06 F6 | 	mov	arg01, ##1070141403
1fe04     1F 14 E6 F4 | 	bitnot	arg02, #31
1fe08     80 F1 BF FD | 	call	#__system___float_add
1fe0c     FD 12 02 F6 | 	mov	arg01, result1
1fe10     84 FE BF FD | 	call	#__system____builtin_sinf
1fe14     FD 14 02 F6 | 	mov	arg02, result1
1fe18     10 13 02 F6 | 	mov	arg01, local02
1fe1c     40 F7 BF FD | 	call	#__system___float_div
1fe20     A7 F0 03 F6 | 	mov	ptra, fp
1fe24     B2 00 A0 FD | 	call	#popregs_
1fe28                 | __system____builtin_tanf_ret
1fe28     2D 00 64 FD | 	ret
1fe2c                 | 
1fe2c                 | __system____builtin_asinf
1fe2c     01 4A 05 F6 | 	mov	COUNT_, #1
1fe30     A8 00 A0 FD | 	call	#pushregs_
1fe34     09 1F 02 F6 | 	mov	local01, arg01
1fe38     0F 15 02 F6 | 	mov	arg02, local01
1fe3c     0F 13 02 F6 | 	mov	arg01, local01
1fe40     18 F5 BF FD | 	call	#__system___float_mul
1fe44     FD 14 02 F6 | 	mov	arg02, result1
1fe48     00 C0 1F FF 
1fe4c     00 12 06 F6 | 	mov	arg01, ##1065353216
1fe50     1F 14 E6 F4 | 	bitnot	arg02, #31
1fe54     34 F1 BF FD | 	call	#__system___float_add
1fe58     FD 12 02 F6 | 	mov	arg01, result1
1fe5c     24 F4 BF FD | 	call	#__system___float_sqrt
1fe60     FD 14 02 F6 | 	mov	arg02, result1
1fe64     0F 13 02 F6 | 	mov	arg01, local01
1fe68     58 00 B0 FD | 	call	#__system____builtin_atan2f
1fe6c     A7 F0 03 F6 | 	mov	ptra, fp
1fe70     B2 00 A0 FD | 	call	#popregs_
1fe74                 | __system____builtin_asinf_ret
1fe74     2D 00 64 FD | 	ret
1fe78                 | 
1fe78                 | __system____builtin_acosf
1fe78     01 4A 05 F6 | 	mov	COUNT_, #1
1fe7c     A8 00 A0 FD | 	call	#pushregs_
1fe80     09 1F 02 F6 | 	mov	local01, arg01
1fe84     0F 15 02 F6 | 	mov	arg02, local01
1fe88     0F 13 02 F6 | 	mov	arg01, local01
1fe8c     CC F4 BF FD | 	call	#__system___float_mul
1fe90     FD 14 02 F6 | 	mov	arg02, result1
1fe94     00 C0 1F FF 
1fe98     00 12 06 F6 | 	mov	arg01, ##1065353216
1fe9c     1F 14 E6 F4 | 	bitnot	arg02, #31
1fea0     E8 F0 BF FD | 	call	#__system___float_add
1fea4     FD 12 02 F6 | 	mov	arg01, result1
1fea8     D8 F3 BF FD | 	call	#__system___float_sqrt
1feac     FD 12 02 F6 | 	mov	arg01, result1
1feb0     0F 15 02 F6 | 	mov	arg02, local01
1feb4     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1feb8     A7 F0 03 F6 | 	mov	ptra, fp
1febc     B2 00 A0 FD | 	call	#popregs_
1fec0                 | __system____builtin_acosf_ret
1fec0     2D 00 64 FD | 	ret
1fec4                 | 
1fec4                 | __system____builtin_atan2f
1fec4     04 4A 05 F6 | 	mov	COUNT_, #4
1fec8     A8 00 A0 FD | 	call	#pushregs_
1fecc     09 1F 02 F6 | 	mov	local01, arg01
1fed0     0A 21 02 F6 | 	mov	local02, arg02
1fed4     0F 13 02 F6 | 	mov	arg01, local01
1fed8     00 14 06 F6 | 	mov	arg02, #0
1fedc     01 16 06 F6 | 	mov	arg03, #1
1fee0     AC F8 BF FD | 	call	#__system___float_cmp
1fee4     00 FA 0D F2 | 	cmp	result1, #0 wz
1fee8     28 00 90 5D |  if_ne	jmp	#LR__3000
1feec     10 13 02 F6 | 	mov	arg01, local02
1fef0     00 14 06 F6 | 	mov	arg02, #0
1fef4     01 16 06 F6 | 	mov	arg03, #1
1fef8     94 F8 BF FD | 	call	#__system___float_cmp
1fefc     00 FA 55 F2 | 	cmps	result1, #0 wc
1ff00     87 24 60 CF 
1ff04     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1ff08     DC 00 90 CD |  if_b	jmp	#LR__3001
1ff0c     00 FA 05 F6 | 	mov	result1, #0
1ff10     D4 00 90 FD | 	jmp	#LR__3001
1ff14                 | LR__3000
1ff14     10 13 02 F6 | 	mov	arg01, local02
1ff18     10 15 02 F6 | 	mov	arg02, local02
1ff1c     3C F4 BF FD | 	call	#__system___float_mul
1ff20     FD 22 02 F6 | 	mov	local03, result1
1ff24     0F 13 02 F6 | 	mov	arg01, local01
1ff28     0F 15 02 F6 | 	mov	arg02, local01
1ff2c     2C F4 BF FD | 	call	#__system___float_mul
1ff30     FD 14 02 F6 | 	mov	arg02, result1
1ff34     11 13 02 F6 | 	mov	arg01, local03
1ff38     50 F0 BF FD | 	call	#__system___float_add
1ff3c     FD 12 02 F6 | 	mov	arg01, result1
1ff40     40 F3 BF FD | 	call	#__system___float_sqrt
1ff44     FD 22 02 F6 | 	mov	local03, result1
1ff48     10 13 02 F6 | 	mov	arg01, local02
1ff4c     11 15 02 F6 | 	mov	arg02, local03
1ff50     0C F6 BF FD | 	call	#__system___float_div
1ff54     FD 20 02 F6 | 	mov	local02, result1
1ff58     0F 13 02 F6 | 	mov	arg01, local01
1ff5c     11 15 02 F6 | 	mov	arg02, local03
1ff60     FC F5 BF FD | 	call	#__system___float_div
1ff64     FD 1E 02 F6 | 	mov	local01, result1
1ff68     00 40 27 FF 
1ff6c     00 12 06 F6 | 	mov	arg01, ##1317011456
1ff70     10 15 02 F6 | 	mov	arg02, local02
1ff74     E4 F3 BF FD | 	call	#__system___float_mul
1ff78     FD 12 02 F6 | 	mov	arg01, result1
1ff7c     00 14 06 F6 | 	mov	arg02, #0
1ff80     A0 F8 BF FD | 	call	#__system___float_tointeger
1ff84     FD 22 02 F6 | 	mov	local03, result1
1ff88     00 40 27 FF 
1ff8c     00 12 06 F6 | 	mov	arg01, ##1317011456
1ff90     0F 15 02 F6 | 	mov	arg02, local01
1ff94     C4 F3 BF FD | 	call	#__system___float_mul
1ff98     FD 12 02 F6 | 	mov	arg01, result1
1ff9c     00 14 06 F6 | 	mov	arg02, #0
1ffa0     80 F8 BF FD | 	call	#__system___float_tointeger
1ffa4     FD 22 52 FD | 	qvector	local03, result1
1ffa8     87 24 20 FF 
1ffac     DB 23 06 F6 | 	mov	local03, ##1078530011
1ffb0     19 12 62 FD | 	getqy	arg01
1ffb4     01 12 C6 F0 | 	sar	arg01, #1
1ffb8     09 13 52 F6 | 	abs	arg01, arg01 wc
1ffbc     1F 24 C6 C9 |  if_b	decod	local04, #31
1ffc0     00 24 06 36 |  if_ae	mov	local04, #0
1ffc4     90 EF BF FD | 	call	#__system___float_fromuns
1ffc8     12 FB 61 F5 | 	xor	result1, local04
1ffcc     FD 12 02 F6 | 	mov	arg01, result1
1ffd0     00 40 27 FF 
1ffd4     00 14 06 F6 | 	mov	arg02, ##1317011456
1ffd8     84 F5 BF FD | 	call	#__system___float_div
1ffdc     FD 14 02 F6 | 	mov	arg02, result1
1ffe0     11 13 02 F6 | 	mov	arg01, local03
1ffe4     74 F3 BF FD | 	call	#__system___float_mul
1ffe8                 | LR__3001
1ffe8     A7 F0 03 F6 | 	mov	ptra, fp
1ffec     B2 00 A0 FD | 	call	#popregs_
1fff0                 | __system____builtin_atan2f_ret
1fff0     2D 00 64 FD | 	ret
1fff4                 | 
1fff4                 | __system____builtin_exp2f
1fff4     04 4A 05 F6 | 	mov	COUNT_, #4
1fff8     A8 00 A0 FD | 	call	#pushregs_
1fffc     09 1F 02 F6 | 	mov	local01, arg01
20000     00 7F 21 FF 
20004     00 14 06 F6 | 	mov	arg02, ##1123942400
20008     01 16 66 F6 | 	neg	arg03, #1
2000c     80 F7 BF FD | 	call	#__system___float_cmp
20010     00 FA 55 F2 | 	cmps	result1, #0 wc
20014     00 C0 3F 3F 
20018     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2001c     DC 00 90 3D |  if_ae	jmp	#LR__3011
20020     0F 13 02 F6 | 	mov	arg01, local01
20024     00 7F 61 FF 
20028     00 14 06 F6 | 	mov	arg02, ##-1023541248
2002c     01 16 06 F6 | 	mov	arg03, #1
20030     5C F7 BF FD | 	call	#__system___float_cmp
20034     00 FA 55 F2 | 	cmps	result1, #0 wc
20038     00 FA 05 C6 |  if_b	mov	result1, #0
2003c     BC 00 90 CD |  if_b	jmp	#LR__3011
20040     0F 13 02 F6 | 	mov	arg01, local01
20044     00 14 06 F6 | 	mov	arg02, #0
20048     D8 F7 BF FD | 	call	#__system___float_tointeger
2004c     FD 20 02 F6 | 	mov	local02, result1
20050     10 13 52 F6 | 	abs	arg01, local02 wc
20054     1F 22 C6 C9 |  if_b	decod	local03, #31
20058     00 22 06 36 |  if_ae	mov	local03, #0
2005c     F8 EE BF FD | 	call	#__system___float_fromuns
20060     11 FB 61 F5 | 	xor	result1, local03
20064     FD 14 02 F6 | 	mov	arg02, result1
20068     0F 13 02 F6 | 	mov	arg01, local01
2006c     1F 14 E6 F4 | 	bitnot	arg02, #31
20070     18 EF BF FD | 	call	#__system___float_add
20074     FD 24 02 F6 | 	mov	local04, result1
20078     12 13 02 F6 | 	mov	arg01, local04
2007c     00 14 06 F6 | 	mov	arg02, #0
20080     01 16 06 F6 | 	mov	arg03, #1
20084     08 F7 BF FD | 	call	#__system___float_cmp
20088     00 FA 55 F2 | 	cmps	result1, #0 wc
2008c     18 00 90 3D |  if_ae	jmp	#LR__3010
20090     12 13 02 F6 | 	mov	arg01, local04
20094     00 C0 1F FF 
20098     00 14 06 F6 | 	mov	arg02, ##1065353216
2009c     EC EE BF FD | 	call	#__system___float_add
200a0     FD 24 02 F6 | 	mov	local04, result1
200a4     01 20 86 F1 | 	sub	local02, #1
200a8                 | LR__3010
200a8     7F 20 06 F1 | 	add	local02, #127
200ac     17 20 66 F0 | 	shl	local02, #23
200b0     12 13 02 F6 | 	mov	arg01, local04
200b4     00 80 26 FF 
200b8     00 14 06 F6 | 	mov	arg02, ##1291845632
200bc     9C F2 BF FD | 	call	#__system___float_mul
200c0     FD 12 02 F6 | 	mov	arg01, result1
200c4     00 14 06 F6 | 	mov	arg02, #0
200c8     58 F7 BF FD | 	call	#__system___float_tointeger
200cc     FD 24 0A F6 | 	mov	local04, result1 wz
200d0     10 FB 01 A6 |  if_e	mov	result1, local02
200d4     24 00 90 AD |  if_e	jmp	#LR__3011
200d8     3E 24 26 F4 | 	bith	local04, #62
200dc     0F 24 62 FD | 	qexp	local04
200e0     10 13 02 F6 | 	mov	arg01, local02
200e4     18 14 62 FD | 	getqx	arg02
200e8     01 14 06 F1 | 	add	arg02, #1
200ec     01 14 46 F0 | 	shr	arg02, #1
200f0     00 80 1F FF 
200f4     00 14 06 F1 | 	add	arg02, ##1056964608
200f8     60 F2 BF FD | 	call	#__system___float_mul
200fc                 | LR__3011
200fc     A7 F0 03 F6 | 	mov	ptra, fp
20100     B2 00 A0 FD | 	call	#popregs_
20104                 | __system____builtin_exp2f_ret
20104     2D 00 64 FD | 	ret
20108                 | 
20108                 | __system____builtin_log2f
20108     06 4A 05 F6 | 	mov	COUNT_, #6
2010c     A8 00 A0 FD | 	call	#pushregs_
20110     09 1F 02 F6 | 	mov	local01, arg01
20114     09 21 0A F6 | 	mov	local02, arg01 wz
20118     00 00 40 5F 
2011c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
20120     00 40 00 AF 
20124     00 FA 65 A6 |  if_e	neg	result1, ##8388608
20128     08 01 90 AD |  if_e	jmp	#LR__3024
2012c     00 20 56 F2 | 	cmps	local02, #0 wc
20130     00 E0 3F CF 
20134     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
20138     F8 00 90 CD |  if_b	jmp	#LR__3024
2013c     0F 13 02 F6 | 	mov	arg01, local01
20140     00 90 20 FF 
20144     00 14 06 F6 | 	mov	arg02, ##1092616192
20148     01 16 06 F6 | 	mov	arg03, #1
2014c     40 F6 BF FD | 	call	#__system___float_cmp
20150     00 FA 0D F2 | 	cmp	result1, #0 wz
20154     4D 2A 20 AF 
20158     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2015c     D4 00 90 AD |  if_e	jmp	#LR__3024
20160     0F 13 02 F6 | 	mov	arg01, local01
20164     FC 16 20 FF 
20168     54 14 06 F6 | 	mov	arg02, ##1076754516
2016c     01 16 06 F6 | 	mov	arg03, #1
20170     1C F6 BF FD | 	call	#__system___float_cmp
20174     00 FA 0D F2 | 	cmp	result1, #0 wz
20178     55 DC 1F AF 
2017c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
20180     B0 00 90 AD |  if_e	jmp	#LR__3024
20184     10 23 02 F6 | 	mov	local03, local02
20188     17 22 46 F0 | 	shr	local03, #23
2018c     11 23 E2 F8 | 	getbyte	local03, local03, #0
20190     17 21 06 F4 | 	bitl	local02, #279
20194     10 25 02 F6 | 	mov	local04, local02
20198     FF 22 0E F2 | 	cmp	local03, #255 wz
2019c     1C 00 90 5D |  if_ne	jmp	#LR__3020
201a0     00 24 0E F2 | 	cmp	local04, #0 wz
201a4     00 C0 3F 5F 
201a8     00 26 06 56 |  if_ne	mov	local05, ##2139095040
201ac     00 E0 3F AF 
201b0     00 26 06 A6 |  if_e	mov	local05, ##2143289344
201b4     13 FB 01 F6 | 	mov	result1, local05
201b8     78 00 90 FD | 	jmp	#LR__3024
201bc                 | LR__3020
201bc     00 22 0E F2 | 	cmp	local03, #0 wz
201c0     17 24 26 54 |  if_ne	bith	local04, #23
201c4     7F 22 86 51 |  if_ne	sub	local03, #127
201c8     28 00 90 5D |  if_ne	jmp	#LR__3023
201cc     00 24 0E F2 | 	cmp	local04, #0 wz
201d0     00 40 00 AF 
201d4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
201d8     58 00 90 AD |  if_e	jmp	#LR__3024
201dc     7E 22 66 F6 | 	neg	local03, #126
201e0     97 08 48 FB | 	callpa	#(@LR__3022-@LR__3021)>>2,fcache_load_ptr_
201e4                 | LR__3021
201e4     17 24 2E F4 | 	testbn	local04, #23 wz
201e8     01 24 66 A0 |  if_e	shl	local04, #1
201ec     01 22 06 A1 |  if_e	add	local03, #1
201f0     F0 FF 9F AD |  if_e	jmp	#LR__3021
201f4                 | LR__3022
201f4                 | LR__3023
201f4     0E 24 62 FD | 	qlog	local04
201f8     01 22 86 F1 | 	sub	local03, #1
201fc     11 13 52 F6 | 	abs	arg01, local03 wc
20200     1F 28 C6 C9 |  if_b	decod	local06, #31
20204     00 28 06 36 |  if_ae	mov	local06, #0
20208     18 26 62 FD | 	getqx	local05
2020c     9B 26 06 F4 | 	bitl	local05, #155
20210     08 26 06 F1 | 	add	local05, #8
20214     04 26 46 F0 | 	shr	local05, #4
20218     00 C0 1F FF 
2021c     00 26 06 F1 | 	add	local05, ##1065353216
20220     34 ED BF FD | 	call	#__system___float_fromuns
20224     14 FB 61 F5 | 	xor	result1, local06
20228     FD 14 02 F6 | 	mov	arg02, result1
2022c     13 13 02 F6 | 	mov	arg01, local05
20230     58 ED BF FD | 	call	#__system___float_add
20234                 | LR__3024
20234     A7 F0 03 F6 | 	mov	ptra, fp
20238     B2 00 A0 FD | 	call	#popregs_
2023c                 | __system____builtin_log2f_ret
2023c     2D 00 64 FD | 	ret
20240                 | 
20240                 | __system____builtin_powf
20240     04 4A 05 F6 | 	mov	COUNT_, #4
20244     A8 00 A0 FD | 	call	#pushregs_
20248     09 1F 02 F6 | 	mov	local01, arg01
2024c     0A 21 02 F6 | 	mov	local02, arg02
20250     10 13 02 F6 | 	mov	arg01, local02
20254     00 14 06 F6 | 	mov	arg02, #0
20258     C8 F5 BF FD | 	call	#__system___float_tointeger
2025c     FD 22 02 F6 | 	mov	local03, result1
20260     11 13 52 F6 | 	abs	arg01, local03 wc
20264     1F 24 C6 C9 |  if_b	decod	local04, #31
20268     00 24 06 36 |  if_ae	mov	local04, #0
2026c     E8 EC BF FD | 	call	#__system___float_fromuns
20270     12 FB 61 F5 | 	xor	result1, local04
20274     FD 12 02 F6 | 	mov	arg01, result1
20278     10 15 02 F6 | 	mov	arg02, local02
2027c     01 16 06 F6 | 	mov	arg03, #1
20280     0C F5 BF FD | 	call	#__system___float_cmp
20284     00 FA 0D F2 | 	cmp	result1, #0 wz
20288     18 00 90 5D |  if_ne	jmp	#LR__3030
2028c     00 C0 1F FF 
20290     00 12 06 F6 | 	mov	arg01, ##1065353216
20294     0F 15 02 F6 | 	mov	arg02, local01
20298     11 17 02 F6 | 	mov	arg03, local03
2029c     68 00 B0 FD | 	call	#__system___float_pow_n
202a0     58 00 90 FD | 	jmp	#LR__3031
202a4                 | LR__3030
202a4     0F 13 02 F6 | 	mov	arg01, local01
202a8     00 14 06 F6 | 	mov	arg02, #0
202ac     01 16 06 F6 | 	mov	arg03, #1
202b0     DC F4 BF FD | 	call	#__system___float_cmp
202b4     00 FA 55 F2 | 	cmps	result1, #0 wc
202b8     00 E0 3F CF 
202bc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
202c0     38 00 90 CD |  if_b	jmp	#LR__3031
202c4     0F 13 02 F6 | 	mov	arg01, local01
202c8     00 14 06 F6 | 	mov	arg02, #0
202cc     01 16 06 F6 | 	mov	arg03, #1
202d0     BC F4 BF FD | 	call	#__system___float_cmp
202d4     00 FA 0D F2 | 	cmp	result1, #0 wz
202d8     00 FA 05 A6 |  if_e	mov	result1, #0
202dc     1C 00 90 AD |  if_e	jmp	#LR__3031
202e0     0F 13 02 F6 | 	mov	arg01, local01
202e4     20 FE BF FD | 	call	#__system____builtin_log2f
202e8     FD 12 02 F6 | 	mov	arg01, result1
202ec     10 15 02 F6 | 	mov	arg02, local02
202f0     68 F0 BF FD | 	call	#__system___float_mul
202f4     FD 12 02 F6 | 	mov	arg01, result1
202f8     F8 FC BF FD | 	call	#__system____builtin_exp2f
202fc                 | LR__3031
202fc     A7 F0 03 F6 | 	mov	ptra, fp
20300     B2 00 A0 FD | 	call	#popregs_
20304                 | __system____builtin_powf_ret
20304     2D 00 64 FD | 	ret
20308                 | 
20308                 | __system___float_pow_n
20308     05 4A 05 F6 | 	mov	COUNT_, #5
2030c     A8 00 A0 FD | 	call	#pushregs_
20310     09 1F 02 F6 | 	mov	local01, arg01
20314     0A 21 02 F6 | 	mov	local02, arg02
20318     0B 23 02 F6 | 	mov	local03, arg03
2031c     00 22 56 F2 | 	cmps	local03, #0 wc
20320     18 00 90 3D |  if_ae	jmp	#LR__3040
20324     01 24 06 F6 | 	mov	local04, #1
20328     11 23 62 F6 | 	neg	local03, local03
2032c     00 22 56 F2 | 	cmps	local03, #0 wc
20330     00 FA 05 C6 |  if_b	mov	result1, #0
20334     94 00 90 CD |  if_b	jmp	#LR__3048
20338     04 00 90 FD | 	jmp	#LR__3041
2033c                 | LR__3040
2033c     00 24 06 F6 | 	mov	local04, #0
20340                 | LR__3041
20340     00 C0 1F FF 
20344     00 26 06 F6 | 	mov	local05, ##1065353216
20348                 | LR__3042
20348     01 22 56 F2 | 	cmps	local03, #1 wc
2034c     30 00 90 CD |  if_b	jmp	#LR__3044
20350     01 22 CE F7 | 	test	local03, #1 wz
20354     10 00 90 AD |  if_e	jmp	#LR__3043
20358     13 13 02 F6 | 	mov	arg01, local05
2035c     10 15 02 F6 | 	mov	arg02, local02
20360     F8 EF BF FD | 	call	#__system___float_mul
20364     FD 26 02 F6 | 	mov	local05, result1
20368                 | LR__3043
20368     01 22 C6 F0 | 	sar	local03, #1
2036c     10 13 02 F6 | 	mov	arg01, local02
20370     10 15 02 F6 | 	mov	arg02, local02
20374     E4 EF BF FD | 	call	#__system___float_mul
20378     FD 20 02 F6 | 	mov	local02, result1
2037c     C8 FF 9F FD | 	jmp	#LR__3042
20380                 | LR__3044
20380     00 24 0E F2 | 	cmp	local04, #0 wz
20384     14 00 90 AD |  if_e	jmp	#LR__3045
20388     0F 13 02 F6 | 	mov	arg01, local01
2038c     13 15 02 F6 | 	mov	arg02, local05
20390     CC F1 BF FD | 	call	#__system___float_div
20394     FD 26 02 F6 | 	mov	local05, result1
20398     2C 00 90 FD | 	jmp	#LR__3047
2039c                 | LR__3045
2039c     0F 13 02 F6 | 	mov	arg01, local01
203a0     00 C0 1F FF 
203a4     00 14 06 F6 | 	mov	arg02, ##1065353216
203a8     01 16 06 F6 | 	mov	arg03, #1
203ac     E0 F3 BF FD | 	call	#__system___float_cmp
203b0     00 FA 0D F2 | 	cmp	result1, #0 wz
203b4     10 00 90 AD |  if_e	jmp	#LR__3046
203b8     0F 13 02 F6 | 	mov	arg01, local01
203bc     13 15 02 F6 | 	mov	arg02, local05
203c0     98 EF BF FD | 	call	#__system___float_mul
203c4     FD 26 02 F6 | 	mov	local05, result1
203c8                 | LR__3046
203c8                 | LR__3047
203c8     13 FB 01 F6 | 	mov	result1, local05
203cc                 | LR__3048
203cc     A7 F0 03 F6 | 	mov	ptra, fp
203d0     B2 00 A0 FD | 	call	#popregs_
203d4                 | __system___float_pow_n_ret
203d4     2D 00 64 FD | 	ret
203d8                 | 
203d8                 | __system___gc_ptrs
203d8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
203dc     00 03 02 F6 | 	mov	_var02, _var01
203e0     76 01 00 FF 
203e4     F8 03 06 F1 | 	add	_var02, ##191992
203e8     00 FD 09 FB | 	rdlong	result2, _var01 wz
203ec     74 00 90 5D |  if_ne	jmp	#LR__3050
203f0     01 FD 01 F6 | 	mov	result2, _var02
203f4     00 FD 81 F1 | 	sub	result2, _var01
203f8     00 03 58 FC | 	wrword	#1, _var01
203fc     00 FB 01 F6 | 	mov	result1, _var01
20400     02 FA 05 F1 | 	add	result1, #2
20404     36 00 80 FF 
20408     FD 20 59 FC | 	wrword	##27792, result1
2040c     00 FB 01 F6 | 	mov	result1, _var01
20410     04 FA 05 F1 | 	add	result1, #4
20414     FD 00 58 FC | 	wrword	#0, result1
20418     00 FB 01 F6 | 	mov	result1, _var01
2041c     06 FA 05 F1 | 	add	result1, #6
20420     FD 02 58 FC | 	wrword	#1, result1
20424     10 00 06 F1 | 	add	_var01, #16
20428     FE FC 51 F6 | 	abs	result2, result2 wc
2042c     04 FC 45 F0 | 	shr	result2, #4
20430     FE FC 81 F6 | 	negc	result2, result2
20434     00 FD 51 FC | 	wrword	result2, _var01
20438     00 FD 01 F6 | 	mov	result2, _var01
2043c     02 FC 05 F1 | 	add	result2, #2
20440     36 00 80 FF 
20444     FE 1E 59 FC | 	wrword	##27791, result2
20448     00 FD 01 F6 | 	mov	result2, _var01
2044c     04 FC 05 F1 | 	add	result2, #4
20450     FE 00 58 FC | 	wrword	#0, result2
20454     00 FD 01 F6 | 	mov	result2, _var01
20458     06 FC 05 F1 | 	add	result2, #6
2045c     FE 00 58 FC | 	wrword	#0, result2
20460     10 00 86 F1 | 	sub	_var01, #16
20464                 | LR__3050
20464     00 FB 01 F6 | 	mov	result1, _var01
20468     01 FD 01 F6 | 	mov	result2, _var02
2046c                 | __system___gc_ptrs_ret
2046c     2D 00 64 FD | 	ret
20470                 | 
20470                 | __system___gc_tryalloc
20470     0B 4A 05 F6 | 	mov	COUNT_, #11
20474     A8 00 A0 FD | 	call	#pushregs_
20478     09 1F 02 F6 | 	mov	local01, arg01
2047c     0A 21 02 F6 | 	mov	local02, arg02
20480     54 FF BF FD | 	call	#__system___gc_ptrs
20484     FD 22 02 F6 | 	mov	local03, result1
20488     FE 24 02 F6 | 	mov	local04, result2
2048c     11 27 02 F6 | 	mov	local05, local03
20490     00 28 06 F6 | 	mov	local06, #0
20494     97 1E 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
20498                 | LR__3060
20498     13 2B 02 F6 | 	mov	local07, local05
2049c     06 26 06 F1 | 	add	local05, #6
204a0     13 15 EA FA | 	rdword	arg02, local05 wz
204a4     11 13 02 F6 | 	mov	arg01, local03
204a8     00 FA 05 A6 |  if_e	mov	result1, #0
204ac     04 14 66 50 |  if_ne	shl	arg02, #4
204b0     0A 13 02 51 |  if_ne	add	arg01, arg02
204b4     09 FB 01 56 |  if_ne	mov	result1, arg01
204b8     FD 26 0A F6 | 	mov	local05, result1 wz
204bc     13 29 E2 5A |  if_ne	rdword	local06, local05
204c0     00 26 0E F2 | 	cmp	local05, #0 wz
204c4     12 27 52 52 |  if_ne	cmps	local05, local04 wc
204c8     08 00 90 1D |  if_a	jmp	#LR__3062
204cc     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
204d0     C4 FF 9F 1D |  if_a	jmp	#LR__3060
204d4                 | LR__3061
204d4                 | LR__3062
204d4     00 26 0E F2 | 	cmp	local05, #0 wz
204d8     13 FB 01 A6 |  if_e	mov	result1, local05
204dc     3C 01 90 AD |  if_e	jmp	#LR__3065
204e0     13 FD 01 F6 | 	mov	result2, local05
204e4     06 FC 05 F1 | 	add	result2, #6
204e8     FE 2C E2 FA | 	rdword	local08, result2
204ec     14 1F 52 F2 | 	cmps	local01, local06 wc
204f0     C0 00 90 3D |  if_ae	jmp	#LR__3064
204f4     13 1F 52 FC | 	wrword	local01, local05
204f8     13 13 02 F6 | 	mov	arg01, local05
204fc     0F 2D 02 F6 | 	mov	local08, local01
20500     04 2C 66 F0 | 	shl	local08, #4
20504     16 13 02 F1 | 	add	arg01, local08
20508     0F 29 82 F1 | 	sub	local06, local01
2050c     09 29 52 FC | 	wrword	local06, arg01
20510     09 2D 02 F6 | 	mov	local08, arg01
20514     02 2C 06 F1 | 	add	local08, #2
20518     36 00 80 FF 
2051c     16 1F 59 FC | 	wrword	##27791, local08
20520     13 15 0A F6 | 	mov	arg02, local05 wz
20524     00 FA 05 A6 |  if_e	mov	result1, #0
20528     11 15 82 51 |  if_ne	sub	arg02, local03
2052c     04 14 46 50 |  if_ne	shr	arg02, #4
20530     0A FB 01 56 |  if_ne	mov	result1, arg02
20534     09 2D 02 F6 | 	mov	local08, arg01
20538     04 2C 06 F1 | 	add	local08, #4
2053c     16 FB 51 FC | 	wrword	result1, local08
20540     13 2D 02 F6 | 	mov	local08, local05
20544     06 2C 06 F1 | 	add	local08, #6
20548     09 15 02 F6 | 	mov	arg02, arg01
2054c     16 2D E2 FA | 	rdword	local08, local08
20550     06 14 06 F1 | 	add	arg02, #6
20554     0A 2D 52 FC | 	wrword	local08, arg02
20558     09 2F 02 F6 | 	mov	local09, arg01
2055c     17 15 0A F6 | 	mov	arg02, local09 wz
20560     00 FA 05 A6 |  if_e	mov	result1, #0
20564     11 15 82 51 |  if_ne	sub	arg02, local03
20568     04 14 46 50 |  if_ne	shr	arg02, #4
2056c     0A FB 01 56 |  if_ne	mov	result1, arg02
20570     FD 2C 02 F6 | 	mov	local08, result1
20574     09 31 EA FA | 	rdword	local10, arg01 wz
20578     00 FA 05 A6 |  if_e	mov	result1, #0
2057c     04 30 66 50 |  if_ne	shl	local10, #4
20580     18 13 02 51 |  if_ne	add	arg01, local10
20584     09 FB 01 56 |  if_ne	mov	result1, arg01
20588     FD 32 0A F6 | 	mov	local11, result1 wz
2058c     24 00 90 AD |  if_e	jmp	#LR__3063
20590     12 33 52 F2 | 	cmps	local11, local04 wc
20594     1C 00 90 3D |  if_ae	jmp	#LR__3063
20598     17 15 0A F6 | 	mov	arg02, local09 wz
2059c     00 FA 05 A6 |  if_e	mov	result1, #0
205a0     11 15 82 51 |  if_ne	sub	arg02, local03
205a4     04 14 46 50 |  if_ne	shr	arg02, #4
205a8     0A FB 01 56 |  if_ne	mov	result1, arg02
205ac     04 32 06 F1 | 	add	local11, #4
205b0     19 FB 51 FC | 	wrword	result1, local11
205b4                 | LR__3063
205b4                 | LR__3064
205b4     06 2A 06 F1 | 	add	local07, #6
205b8     15 2D 52 FC | 	wrword	local08, local07
205bc     36 00 00 FF 
205c0     80 2E 06 F6 | 	mov	local09, ##27776
205c4     10 2F 42 F5 | 	or	local09, local02
205c8     00 FA 05 F6 | 	mov	result1, #0
205cc     01 FA 61 FD | 	cogid	result1
205d0     FD 2E 42 F5 | 	or	local09, result1
205d4     13 33 02 F6 | 	mov	local11, local05
205d8     02 32 06 F1 | 	add	local11, #2
205dc     19 2F 52 FC | 	wrword	local09, local11
205e0     11 2F 02 F6 | 	mov	local09, local03
205e4     08 2E 06 F1 | 	add	local09, #8
205e8     13 33 02 F6 | 	mov	local11, local05
205ec     17 2F E2 FA | 	rdword	local09, local09
205f0     06 32 06 F1 | 	add	local11, #6
205f4     19 2F 52 FC | 	wrword	local09, local11
205f8     13 15 0A F6 | 	mov	arg02, local05 wz
205fc     00 FA 05 A6 |  if_e	mov	result1, #0
20600     11 15 82 51 |  if_ne	sub	arg02, local03
20604     04 14 46 50 |  if_ne	shr	arg02, #4
20608     0A FB 01 56 |  if_ne	mov	result1, arg02
2060c     08 22 06 F1 | 	add	local03, #8
20610     11 FB 51 FC | 	wrword	result1, local03
20614     08 26 06 F1 | 	add	local05, #8
20618     13 FB 01 F6 | 	mov	result1, local05
2061c                 | LR__3065
2061c     A7 F0 03 F6 | 	mov	ptra, fp
20620     B2 00 A0 FD | 	call	#popregs_
20624                 | __system___gc_tryalloc_ret
20624     2D 00 64 FD | 	ret
20628                 | 
20628                 | __system___gc_alloc_managed
20628     01 4A 05 F6 | 	mov	COUNT_, #1
2062c     A8 00 A0 FD | 	call	#pushregs_
20630     09 1F 02 F6 | 	mov	local01, arg01
20634     00 14 06 F6 | 	mov	arg02, #0
20638     1C 00 B0 FD | 	call	#__system___gc_doalloc
2063c     FD 14 0A F6 | 	mov	arg02, result1 wz
20640     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
20644     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
20648     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2064c     A7 F0 03 F6 | 	mov	ptra, fp
20650     B2 00 A0 FD | 	call	#popregs_
20654                 | __system___gc_alloc_managed_ret
20654     2D 00 64 FD | 	ret
20658                 | 
20658                 | __system___gc_doalloc
20658     06 4A 05 F6 | 	mov	COUNT_, #6
2065c     A8 00 A0 FD | 	call	#pushregs_
20660     09 1F 0A F6 | 	mov	local01, arg01 wz
20664     0A 21 02 F6 | 	mov	local02, arg02
20668     00 FA 05 A6 |  if_e	mov	result1, #0
2066c     8C 00 90 AD |  if_e	jmp	#LR__3077
20670     17 1E 06 F1 | 	add	local01, #23
20674     0F 1E 26 F5 | 	andn	local01, #15
20678     04 1E 46 F0 | 	shr	local01, #4
2067c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
20680     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20684     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
20688     54 C1 BF FD | 	call	#__system___lockmem
2068c     0F 13 02 F6 | 	mov	arg01, local01
20690     10 15 02 F6 | 	mov	arg02, local02
20694     D8 FD BF FD | 	call	#__system___gc_tryalloc
20698     FD 22 0A F6 | 	mov	local03, result1 wz
2069c     14 00 90 5D |  if_ne	jmp	#LR__3070
206a0     70 03 B0 FD | 	call	#__system___gc_docollect
206a4     0F 13 02 F6 | 	mov	arg01, local01
206a8     10 15 02 F6 | 	mov	arg02, local02
206ac     C0 FD BF FD | 	call	#__system___gc_tryalloc
206b0     FD 22 02 F6 | 	mov	local03, result1
206b4                 | LR__3070
206b4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
206b8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
206bc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
206c0     09 01 68 FC | 	wrlong	#0, arg01
206c4     00 22 0E F2 | 	cmp	local03, #0 wz
206c8     2C 00 90 AD |  if_e	jmp	#LR__3076
206cc     04 1E 66 F0 | 	shl	local01, #4
206d0     08 1E 86 F1 | 	sub	local01, #8
206d4     0F 25 52 F6 | 	abs	local04, local01 wc
206d8     02 24 46 F0 | 	shr	local04, #2
206dc     12 27 8A F6 | 	negc	local05, local04 wz
206e0     11 29 02 F6 | 	mov	local06, local03
206e4     10 00 90 AD |  if_e	jmp	#LR__3075
206e8     97 06 48 FB | 	callpa	#(@LR__3073-@LR__3071)>>2,fcache_load_ptr_
206ec                 | LR__3071
206ec     13 05 D8 FC | 	rep	@LR__3074, local05
206f0                 | LR__3072
206f0     14 01 68 FC | 	wrlong	#0, local06
206f4     04 28 06 F1 | 	add	local06, #4
206f8                 | LR__3073
206f8                 | LR__3074
206f8                 | LR__3075
206f8                 | LR__3076
206f8     11 FB 01 F6 | 	mov	result1, local03
206fc                 | LR__3077
206fc     A7 F0 03 F6 | 	mov	ptra, fp
20700     B2 00 A0 FD | 	call	#popregs_
20704                 | __system___gc_doalloc_ret
20704     2D 00 64 FD | 	ret
20708                 | 
20708                 | __system___gc_isvalidptr
20708     F8 16 06 F4 | 	bitl	arg03, #248
2070c     08 16 86 F1 | 	sub	arg03, #8
20710     09 17 52 F2 | 	cmps	arg03, arg01 wc
20714     08 00 90 CD |  if_b	jmp	#LR__3080
20718     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2071c     08 00 90 CD |  if_b	jmp	#LR__3081
20720                 | LR__3080
20720     00 FA 05 F6 | 	mov	result1, #0
20724     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
20728                 | LR__3081
20728     0B 01 02 F6 | 	mov	_var01, arg03
2072c     09 01 62 F5 | 	xor	_var01, arg01
20730     0F 00 CE F7 | 	test	_var01, #15 wz
20734     00 FA 05 56 |  if_ne	mov	result1, #0
20738     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2073c     0B 01 02 F6 | 	mov	_var01, arg03
20740     02 00 06 F1 | 	add	_var01, #2
20744     00 01 E2 FA | 	rdword	_var01, _var01
20748     7F 00 00 FF 
2074c     C0 01 06 F5 | 	and	_var01, ##65472
20750     36 00 00 FF 
20754     80 00 0E F2 | 	cmp	_var01, ##27776 wz
20758     00 FA 05 56 |  if_ne	mov	result1, #0
2075c     0B FB 01 A6 |  if_e	mov	result1, arg03
20760                 | __system___gc_isvalidptr_ret
20760     2D 00 64 FD | 	ret
20764                 | 
20764                 | __system___gc_free
20764     09 17 02 F6 | 	mov	arg03, arg01
20768     6C FC BF FD | 	call	#__system___gc_ptrs
2076c     FD 12 02 F6 | 	mov	arg01, result1
20770     FE 14 02 F6 | 	mov	arg02, result2
20774     90 FF BF FD | 	call	#__system___gc_isvalidptr
20778     FD 14 0A F6 | 	mov	arg02, result1 wz
2077c     28 00 90 AD |  if_e	jmp	#LR__3090
20780     1C E6 05 F1 | 	add	ptr___system__dat__, #28
20784     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20788     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2078c     50 C0 BF FD | 	call	#__system___lockmem
20790     0A 13 02 F6 | 	mov	arg01, arg02
20794     14 00 B0 FD | 	call	#__system___gc_dofree
20798     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2079c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
207a0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
207a4     09 01 68 FC | 	wrlong	#0, arg01
207a8                 | LR__3090
207a8                 | __system___gc_free_ret
207a8     2D 00 64 FD | 	ret
207ac                 | 
207ac                 | __system___gc_dofree
207ac     06 4A 05 F6 | 	mov	COUNT_, #6
207b0     A8 00 A0 FD | 	call	#pushregs_
207b4     09 1F 02 F6 | 	mov	local01, arg01
207b8     1C FC BF FD | 	call	#__system___gc_ptrs
207bc     FD 20 02 F6 | 	mov	local02, result1
207c0     FE 22 02 F6 | 	mov	local03, result2
207c4     0F 15 02 F6 | 	mov	arg02, local01
207c8     02 14 06 F1 | 	add	arg02, #2
207cc     36 00 80 FF 
207d0     0A 1F 59 FC | 	wrword	##27791, arg02
207d4     0F 25 02 F6 | 	mov	local04, local01
207d8     0F 13 02 F6 | 	mov	arg01, local01
207dc     09 27 EA FA | 	rdword	local05, arg01 wz
207e0     00 FA 05 A6 |  if_e	mov	result1, #0
207e4     04 26 66 50 |  if_ne	shl	local05, #4
207e8     13 13 02 51 |  if_ne	add	arg01, local05
207ec     09 FB 01 56 |  if_ne	mov	result1, arg01
207f0     FD 28 02 F6 | 	mov	local06, result1
207f4     97 24 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
207f8                 | LR__3100
207f8     04 24 06 F1 | 	add	local04, #4
207fc     12 15 EA FA | 	rdword	arg02, local04 wz
20800     10 13 02 F6 | 	mov	arg01, local02
20804     00 FA 05 A6 |  if_e	mov	result1, #0
20808     04 14 66 50 |  if_ne	shl	arg02, #4
2080c     0A 13 02 51 |  if_ne	add	arg01, arg02
20810     09 FB 01 56 |  if_ne	mov	result1, arg01
20814     FD 24 0A F6 | 	mov	local04, result1 wz
20818     24 00 90 AD |  if_e	jmp	#LR__3102
2081c     12 13 02 F6 | 	mov	arg01, local04
20820     00 FA 05 F6 | 	mov	result1, #0
20824     02 12 06 F1 | 	add	arg01, #2
20828     09 13 E2 FA | 	rdword	arg01, arg01
2082c     36 00 00 FF 
20830     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
20834     01 FA 65 A6 |  if_e	neg	result1, #1
20838     00 FA 0D F2 | 	cmp	result1, #0 wz
2083c     B8 FF 9F AD |  if_e	jmp	#LR__3100
20840                 | LR__3101
20840                 | LR__3102
20840     00 24 0E F2 | 	cmp	local04, #0 wz
20844     10 25 02 A6 |  if_e	mov	local04, local02
20848     12 15 02 F6 | 	mov	arg02, local04
2084c     06 14 06 F1 | 	add	arg02, #6
20850     0F 13 02 F6 | 	mov	arg01, local01
20854     0A 15 E2 FA | 	rdword	arg02, arg02
20858     06 12 06 F1 | 	add	arg01, #6
2085c     09 15 52 FC | 	wrword	arg02, arg01
20860     0F 15 0A F6 | 	mov	arg02, local01 wz
20864     00 FA 05 A6 |  if_e	mov	result1, #0
20868     10 15 82 51 |  if_ne	sub	arg02, local02
2086c     04 14 46 50 |  if_ne	shr	arg02, #4
20870     0A FB 01 56 |  if_ne	mov	result1, arg02
20874     12 15 02 F6 | 	mov	arg02, local04
20878     06 14 06 F1 | 	add	arg02, #6
2087c     0A FB 51 FC | 	wrword	result1, arg02
20880     10 25 0A F2 | 	cmp	local04, local02 wz
20884     A4 00 90 AD |  if_e	jmp	#LR__3105
20888     12 13 02 F6 | 	mov	arg01, local04
2088c     09 27 EA FA | 	rdword	local05, arg01 wz
20890     00 FA 05 A6 |  if_e	mov	result1, #0
20894     04 26 66 50 |  if_ne	shl	local05, #4
20898     13 13 02 51 |  if_ne	add	arg01, local05
2089c     09 FB 01 56 |  if_ne	mov	result1, arg01
208a0     0F FB 09 F2 | 	cmp	result1, local01 wz
208a4     84 00 90 5D |  if_ne	jmp	#LR__3104
208a8     12 29 E2 FA | 	rdword	local06, local04
208ac     0F 15 E2 FA | 	rdword	arg02, local01
208b0     0A 29 02 F1 | 	add	local06, arg02
208b4     12 29 52 FC | 	wrword	local06, local04
208b8     0F 29 02 F6 | 	mov	local06, local01
208bc     02 28 06 F1 | 	add	local06, #2
208c0     14 01 58 FC | 	wrword	#0, local06
208c4     0F 13 02 F6 | 	mov	arg01, local01
208c8     09 27 EA FA | 	rdword	local05, arg01 wz
208cc     00 FA 05 A6 |  if_e	mov	result1, #0
208d0     04 26 66 50 |  if_ne	shl	local05, #4
208d4     13 13 02 51 |  if_ne	add	arg01, local05
208d8     09 FB 01 56 |  if_ne	mov	result1, arg01
208dc     FD 28 02 F6 | 	mov	local06, result1
208e0     11 29 52 F2 | 	cmps	local06, local03 wc
208e4     20 00 90 3D |  if_ae	jmp	#LR__3103
208e8     12 15 0A F6 | 	mov	arg02, local04 wz
208ec     00 FA 05 A6 |  if_e	mov	result1, #0
208f0     10 15 82 51 |  if_ne	sub	arg02, local02
208f4     04 14 46 50 |  if_ne	shr	arg02, #4
208f8     0A FB 01 56 |  if_ne	mov	result1, arg02
208fc     14 15 02 F6 | 	mov	arg02, local06
20900     04 14 06 F1 | 	add	arg02, #4
20904     0A FB 51 FC | 	wrword	result1, arg02
20908                 | LR__3103
20908     0F 15 02 F6 | 	mov	arg02, local01
2090c     06 14 06 F1 | 	add	arg02, #6
20910     12 FD 01 F6 | 	mov	result2, local04
20914     0A 15 E2 FA | 	rdword	arg02, arg02
20918     06 FC 05 F1 | 	add	result2, #6
2091c     FE 14 52 FC | 	wrword	arg02, result2
20920     06 1E 06 F1 | 	add	local01, #6
20924     0F 01 58 FC | 	wrword	#0, local01
20928     12 1F 02 F6 | 	mov	local01, local04
2092c                 | LR__3104
2092c                 | LR__3105
2092c     0F 13 02 F6 | 	mov	arg01, local01
20930     09 27 EA FA | 	rdword	local05, arg01 wz
20934     00 FA 05 A6 |  if_e	mov	result1, #0
20938     04 26 66 50 |  if_ne	shl	local05, #4
2093c     13 13 02 51 |  if_ne	add	arg01, local05
20940     09 FB 01 56 |  if_ne	mov	result1, arg01
20944     FD 14 0A F6 | 	mov	arg02, result1 wz
20948     B8 00 90 AD |  if_e	jmp	#LR__3107
2094c     11 15 52 F2 | 	cmps	arg02, local03 wc
20950     B0 00 90 3D |  if_ae	jmp	#LR__3107
20954     0A 13 02 F6 | 	mov	arg01, arg02
20958     00 FA 05 F6 | 	mov	result1, #0
2095c     02 12 06 F1 | 	add	arg01, #2
20960     09 13 E2 FA | 	rdword	arg01, arg01
20964     36 00 00 FF 
20968     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2096c     01 FA 65 A6 |  if_e	neg	result1, #1
20970     00 FA 0D F2 | 	cmp	result1, #0 wz
20974     8C 00 90 AD |  if_e	jmp	#LR__3107
20978     0F 25 02 F6 | 	mov	local04, local01
2097c     12 29 E2 FA | 	rdword	local06, local04
20980     0A 13 02 F6 | 	mov	arg01, arg02
20984     09 1F E2 FA | 	rdword	local01, arg01
20988     0F 29 02 F1 | 	add	local06, local01
2098c     12 29 52 FC | 	wrword	local06, local04
20990     09 29 02 F6 | 	mov	local06, arg01
20994     06 28 06 F1 | 	add	local06, #6
20998     12 1F 02 F6 | 	mov	local01, local04
2099c     14 29 E2 FA | 	rdword	local06, local06
209a0     06 1E 06 F1 | 	add	local01, #6
209a4     0F 29 52 FC | 	wrword	local06, local01
209a8     09 29 02 F6 | 	mov	local06, arg01
209ac     02 28 06 F1 | 	add	local06, #2
209b0     14 55 59 FC | 	wrword	#170, local06
209b4     09 29 02 F6 | 	mov	local06, arg01
209b8     06 28 06 F1 | 	add	local06, #6
209bc     14 01 58 FC | 	wrword	#0, local06
209c0     09 27 EA FA | 	rdword	local05, arg01 wz
209c4     00 FA 05 A6 |  if_e	mov	result1, #0
209c8     04 26 66 50 |  if_ne	shl	local05, #4
209cc     13 13 02 51 |  if_ne	add	arg01, local05
209d0     09 FB 01 56 |  if_ne	mov	result1, arg01
209d4     FD 28 0A F6 | 	mov	local06, result1 wz
209d8     28 00 90 AD |  if_e	jmp	#LR__3106
209dc     11 29 52 F2 | 	cmps	local06, local03 wc
209e0     20 00 90 3D |  if_ae	jmp	#LR__3106
209e4     12 15 0A F6 | 	mov	arg02, local04 wz
209e8     00 FA 05 A6 |  if_e	mov	result1, #0
209ec     10 15 82 51 |  if_ne	sub	arg02, local02
209f0     04 14 46 50 |  if_ne	shr	arg02, #4
209f4     0A FB 01 56 |  if_ne	mov	result1, arg02
209f8     14 25 02 F6 | 	mov	local04, local06
209fc     04 24 06 F1 | 	add	local04, #4
20a00     12 FB 51 FC | 	wrword	result1, local04
20a04                 | LR__3106
20a04                 | LR__3107
20a04     14 FB 01 F6 | 	mov	result1, local06
20a08     A7 F0 03 F6 | 	mov	ptra, fp
20a0c     B2 00 A0 FD | 	call	#popregs_
20a10                 | __system___gc_dofree_ret
20a10     2D 00 64 FD | 	ret
20a14                 | 
20a14                 | __system___gc_docollect
20a14     05 4A 05 F6 | 	mov	COUNT_, #5
20a18     A8 00 A0 FD | 	call	#pushregs_
20a1c     B8 F9 BF FD | 	call	#__system___gc_ptrs
20a20     FE 1E 02 F6 | 	mov	local01, result2
20a24     FD 20 02 F6 | 	mov	local02, result1
20a28     10 13 02 F6 | 	mov	arg01, local02
20a2c     09 23 EA FA | 	rdword	local03, arg01 wz
20a30     00 FA 05 A6 |  if_e	mov	result1, #0
20a34     04 22 66 50 |  if_ne	shl	local03, #4
20a38     11 13 02 51 |  if_ne	add	arg01, local03
20a3c     09 FB 01 56 |  if_ne	mov	result1, arg01
20a40     FD 24 0A F6 | 	mov	local04, result1 wz
20a44     00 FA 05 F6 | 	mov	result1, #0
20a48     01 FA 61 FD | 	cogid	result1
20a4c     FD 26 02 F6 | 	mov	local05, result1
20a50     48 00 90 AD |  if_e	jmp	#LR__3112
20a54     97 22 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
20a58                 | LR__3110
20a58     0F 25 52 F2 | 	cmps	local04, local01 wc
20a5c     3C 00 90 3D |  if_ae	jmp	#LR__3112
20a60     12 15 02 F6 | 	mov	arg02, local04
20a64     02 14 06 F1 | 	add	arg02, #2
20a68     0A 15 E2 FA | 	rdword	arg02, arg02
20a6c     20 14 26 F5 | 	andn	arg02, #32
20a70     12 13 02 F6 | 	mov	arg01, local04
20a74     02 12 06 F1 | 	add	arg01, #2
20a78     09 15 52 FC | 	wrword	arg02, arg01
20a7c     12 13 02 F6 | 	mov	arg01, local04
20a80     09 23 EA FA | 	rdword	local03, arg01 wz
20a84     00 FA 05 A6 |  if_e	mov	result1, #0
20a88     04 22 66 50 |  if_ne	shl	local03, #4
20a8c     11 13 02 51 |  if_ne	add	arg01, local03
20a90     09 FB 01 56 |  if_ne	mov	result1, arg01
20a94     FD 24 0A F6 | 	mov	local04, result1 wz
20a98     BC FF 9F 5D |  if_ne	jmp	#LR__3110
20a9c                 | LR__3111
20a9c                 | LR__3112
20a9c     00 22 06 F6 | 	mov	local03, #0
20aa0     00 12 06 F6 | 	mov	arg01, #0
20aa4     10 BD BF FD | 	call	#__system____topofstack
20aa8     FD 14 02 F6 | 	mov	arg02, result1
20aac     11 13 02 F6 | 	mov	arg01, local03
20ab0     90 00 B0 FD | 	call	#__system___gc_markhub
20ab4     1C 01 B0 FD | 	call	#__system___gc_markcog
20ab8     10 13 02 F6 | 	mov	arg01, local02
20abc     09 23 EA FA | 	rdword	local03, arg01 wz
20ac0     00 FA 05 A6 |  if_e	mov	result1, #0
20ac4     04 22 66 50 |  if_ne	shl	local03, #4
20ac8     11 13 02 51 |  if_ne	add	arg01, local03
20acc     09 FB 01 56 |  if_ne	mov	result1, arg01
20ad0     FD 20 0A F6 | 	mov	local02, result1 wz
20ad4     60 00 90 AD |  if_e	jmp	#LR__3116
20ad8                 | LR__3113
20ad8     10 25 02 F6 | 	mov	local04, local02
20adc     12 13 02 F6 | 	mov	arg01, local04
20ae0     09 23 EA FA | 	rdword	local03, arg01 wz
20ae4     00 FA 05 A6 |  if_e	mov	result1, #0
20ae8     04 22 66 50 |  if_ne	shl	local03, #4
20aec     11 13 02 51 |  if_ne	add	arg01, local03
20af0     09 FB 01 56 |  if_ne	mov	result1, arg01
20af4     FD 20 02 F6 | 	mov	local02, result1
20af8     12 15 02 F6 | 	mov	arg02, local04
20afc     02 14 06 F1 | 	add	arg02, #2
20b00     0A 15 E2 FA | 	rdword	arg02, arg02
20b04     20 14 CE F7 | 	test	arg02, #32 wz
20b08     10 14 CE A7 |  if_e	test	arg02, #16 wz
20b0c     1C 00 90 5D |  if_ne	jmp	#LR__3115
20b10     0A 15 42 F8 | 	getnib	arg02, arg02, #0
20b14     13 15 0A F2 | 	cmp	arg02, local05 wz
20b18     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
20b1c     0C 00 90 5D |  if_ne	jmp	#LR__3114
20b20     12 13 02 F6 | 	mov	arg01, local04
20b24     84 FC BF FD | 	call	#__system___gc_dofree
20b28     FD 20 02 F6 | 	mov	local02, result1
20b2c                 | LR__3114
20b2c                 | LR__3115
20b2c     00 20 0E F2 | 	cmp	local02, #0 wz
20b30     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
20b34     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3113
20b38                 | LR__3116
20b38     A7 F0 03 F6 | 	mov	ptra, fp
20b3c     B2 00 A0 FD | 	call	#popregs_
20b40                 | __system___gc_docollect_ret
20b40     2D 00 64 FD | 	ret
20b44                 | 
20b44                 | __system___gc_markhub
20b44     04 4A 05 F6 | 	mov	COUNT_, #4
20b48     A8 00 A0 FD | 	call	#pushregs_
20b4c     09 1F 02 F6 | 	mov	local01, arg01
20b50     0A 21 02 F6 | 	mov	local02, arg02
20b54     80 F8 BF FD | 	call	#__system___gc_ptrs
20b58     FD 22 02 F6 | 	mov	local03, result1
20b5c     FE 24 02 F6 | 	mov	local04, result2
20b60                 | LR__3120
20b60     10 1F 52 F2 | 	cmps	local01, local02 wc
20b64     60 00 90 3D |  if_ae	jmp	#LR__3121
20b68     0F 17 02 FB | 	rdlong	arg03, local01
20b6c     04 1E 06 F1 | 	add	local01, #4
20b70     12 15 02 F6 | 	mov	arg02, local04
20b74     11 13 02 F6 | 	mov	arg01, local03
20b78     8C FB BF FD | 	call	#__system___gc_isvalidptr
20b7c     FD 16 0A F6 | 	mov	arg03, result1 wz
20b80     DC FF 9F AD |  if_e	jmp	#LR__3120
20b84     0B 13 02 F6 | 	mov	arg01, arg03
20b88     00 FA 05 F6 | 	mov	result1, #0
20b8c     02 12 06 F1 | 	add	arg01, #2
20b90     09 13 E2 FA | 	rdword	arg01, arg01
20b94     36 00 00 FF 
20b98     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
20b9c     01 FA 65 A6 |  if_e	neg	result1, #1
20ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
20ba4     B8 FF 9F 5D |  if_ne	jmp	#LR__3120
20ba8     0B FD 01 F6 | 	mov	result2, arg03
20bac     02 FC 05 F1 | 	add	result2, #2
20bb0     FE FC E1 FA | 	rdword	result2, result2
20bb4     0F FC 25 F5 | 	andn	result2, #15
20bb8     2E FC 45 F5 | 	or	result2, #46
20bbc     02 16 06 F1 | 	add	arg03, #2
20bc0     0B FD 51 FC | 	wrword	result2, arg03
20bc4     98 FF 9F FD | 	jmp	#LR__3120
20bc8                 | LR__3121
20bc8     A7 F0 03 F6 | 	mov	ptra, fp
20bcc     B2 00 A0 FD | 	call	#popregs_
20bd0                 | __system___gc_markhub_ret
20bd0     2D 00 64 FD | 	ret
20bd4                 | 
20bd4                 | __system___gc_markcog
20bd4     04 4A 05 F6 | 	mov	COUNT_, #4
20bd8     A8 00 A0 FD | 	call	#pushregs_
20bdc     F8 F7 BF FD | 	call	#__system___gc_ptrs
20be0     FD 1E 02 F6 | 	mov	local01, result1
20be4     FE 20 02 F6 | 	mov	local02, result2
20be8     EF 23 06 F6 | 	mov	local03, #495
20bec                 | LR__3130
20bec                 | 	'.live	local03
20bec     00 22 96 F9 | 	alts	local03, #0
20bf0     11 25 02 F6 | 	mov	local04, local03
20bf4     0F 13 02 F6 | 	mov	arg01, local01
20bf8     10 15 02 F6 | 	mov	arg02, local02
20bfc     12 17 02 F6 | 	mov	arg03, local04
20c00     04 FB BF FD | 	call	#__system___gc_isvalidptr
20c04     00 FA 0D F2 | 	cmp	result1, #0 wz
20c08     18 00 90 AD |  if_e	jmp	#LR__3131
20c0c     FD 24 02 F6 | 	mov	local04, result1
20c10     02 24 06 F1 | 	add	local04, #2
20c14     12 25 E2 FA | 	rdword	local04, local04
20c18     20 24 46 F5 | 	or	local04, #32
20c1c     02 FA 05 F1 | 	add	result1, #2
20c20     FD 24 52 FC | 	wrword	local04, result1
20c24                 | LR__3131
20c24     01 22 86 F1 | 	sub	local03, #1
20c28     00 22 56 F2 | 	cmps	local03, #0 wc
20c2c     BC FF 9F 3D |  if_ae	jmp	#LR__3130
20c30     A7 F0 03 F6 | 	mov	ptra, fp
20c34     B2 00 A0 FD | 	call	#popregs_
20c38                 | __system___gc_markcog_ret
20c38     2D 00 64 FD | 	ret
20c3c                 | 
20c3c                 | __system__opendir
20c3c     06 4A 05 F6 | 	mov	COUNT_, #6
20c40     A8 00 A0 FD | 	call	#pushregs_
20c44     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20c48     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
20c4c     09 15 02 F6 | 	mov	arg02, arg01
20c50     0F 13 02 F6 | 	mov	arg01, local01
20c54     00 16 06 F6 | 	mov	arg03, #0
20c58     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
20c5c     18 C3 BF FD | 	call	#__system____getvfsforfile
20c60     FD 20 0A F6 | 	mov	local02, result1 wz
20c64     10 00 90 AD |  if_e	jmp	#LR__3140
20c68     28 20 06 F1 | 	add	local02, #40
20c6c     10 17 0A FB | 	rdlong	arg03, local02 wz
20c70     28 20 86 F1 | 	sub	local02, #40
20c74     14 00 90 5D |  if_ne	jmp	#LR__3141
20c78                 | LR__3140
20c78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20c7c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
20c80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20c84     00 FA 05 F6 | 	mov	result1, #0
20c88     90 00 90 FD | 	jmp	#LR__3143
20c8c                 | LR__3141
20c8c     5C 12 06 F6 | 	mov	arg01, #92
20c90     10 14 06 F6 | 	mov	arg02, #16
20c94     C0 F9 BF FD | 	call	#__system___gc_doalloc
20c98     FD 22 0A F6 | 	mov	local03, result1 wz
20c9c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20ca0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
20ca4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20ca8     00 FA 05 A6 |  if_e	mov	result1, #0
20cac     6C 00 90 AD |  if_e	jmp	#LR__3143
20cb0     28 20 06 F1 | 	add	local02, #40
20cb4     10 25 02 FB | 	rdlong	local04, local02
20cb8     12 27 02 F6 | 	mov	local05, local04
20cbc     28 20 86 F1 | 	sub	local02, #40
20cc0     13 26 46 F7 | 	zerox	local05, #19
20cc4     14 24 46 F0 | 	shr	local04, #20
20cc8     02 24 66 F0 | 	shl	local04, #2
20ccc     ED 24 02 F1 | 	add	local04, __methods__
20cd0     12 25 02 FB | 	rdlong	local04, local04
20cd4     11 13 02 F6 | 	mov	arg01, local03
20cd8     0F 15 02 F6 | 	mov	arg02, local01
20cdc     F2 28 02 F6 | 	mov	local06, objptr
20ce0     13 E5 01 F6 | 	mov	objptr, local05
20ce4     2D 24 62 FD | 	call	local04
20ce8     14 E5 01 F6 | 	mov	objptr, local06
20cec     FD 16 0A F6 | 	mov	arg03, result1 wz
20cf0     20 00 90 AD |  if_e	jmp	#LR__3142
20cf4     00 16 4E F2 | 	cmps	arg03, #0 wz
20cf8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20cfc     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
20d00     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20d04     11 13 02 F6 | 	mov	arg01, local03
20d08     58 FA BF FD | 	call	#__system___gc_free
20d0c     00 FA 05 F6 | 	mov	result1, #0
20d10     08 00 90 FD | 	jmp	#LR__3143
20d14                 | LR__3142
20d14     11 21 62 FC | 	wrlong	local02, local03
20d18     11 FB 01 F6 | 	mov	result1, local03
20d1c                 | LR__3143
20d1c     A7 F0 03 F6 | 	mov	ptra, fp
20d20     B2 00 A0 FD | 	call	#popregs_
20d24                 | __system__opendir_ret
20d24     2D 00 64 FD | 	ret
20d28                 | 
20d28                 | __system__closedir
20d28     04 4A 05 F6 | 	mov	COUNT_, #4
20d2c     A8 00 A0 FD | 	call	#pushregs_
20d30     09 1F 02 F6 | 	mov	local01, arg01
20d34     0F 13 02 FB | 	rdlong	arg01, local01
20d38     2C 12 06 F1 | 	add	arg01, #44
20d3c     09 21 02 FB | 	rdlong	local02, arg01
20d40     10 23 02 F6 | 	mov	local03, local02
20d44     13 22 46 F7 | 	zerox	local03, #19
20d48     14 20 46 F0 | 	shr	local02, #20
20d4c     02 20 66 F0 | 	shl	local02, #2
20d50     ED 20 02 F1 | 	add	local02, __methods__
20d54     10 21 02 FB | 	rdlong	local02, local02
20d58     0F 13 02 F6 | 	mov	arg01, local01
20d5c     F2 24 02 F6 | 	mov	local04, objptr
20d60     11 E5 01 F6 | 	mov	objptr, local03
20d64     2D 20 62 FD | 	call	local02
20d68     12 E5 01 F6 | 	mov	objptr, local04
20d6c     FD 24 02 F6 | 	mov	local04, result1
20d70     0F 13 02 F6 | 	mov	arg01, local01
20d74     EC F9 BF FD | 	call	#__system___gc_free
20d78     00 24 4E F2 | 	cmps	local04, #0 wz
20d7c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20d80     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
20d84     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20d88     01 FA 65 56 |  if_ne	neg	result1, #1
20d8c     00 FA 05 A6 |  if_e	mov	result1, #0
20d90     A7 F0 03 F6 | 	mov	ptra, fp
20d94     B2 00 A0 FD | 	call	#popregs_
20d98                 | __system__closedir_ret
20d98     2D 00 64 FD | 	ret
20d9c                 | 
20d9c                 | __system__readdir
20d9c     04 4A 05 F6 | 	mov	COUNT_, #4
20da0     A8 00 A0 FD | 	call	#pushregs_
20da4     09 15 0A FB | 	rdlong	arg02, arg01 wz
20da8     08 12 06 F1 | 	add	arg01, #8
20dac     09 1F 02 F6 | 	mov	local01, arg01
20db0     08 12 86 F1 | 	sub	arg01, #8
20db4     00 FA 05 A6 |  if_e	mov	result1, #0
20db8     5C 00 90 AD |  if_e	jmp	#LR__3151
20dbc     30 14 06 F1 | 	add	arg02, #48
20dc0     0A 21 02 FB | 	rdlong	local02, arg02
20dc4     10 23 02 F6 | 	mov	local03, local02
20dc8     13 22 46 F7 | 	zerox	local03, #19
20dcc     14 20 46 F0 | 	shr	local02, #20
20dd0     02 20 66 F0 | 	shl	local02, #2
20dd4     ED 20 02 F1 | 	add	local02, __methods__
20dd8     10 21 02 FB | 	rdlong	local02, local02
20ddc     0F 15 02 F6 | 	mov	arg02, local01
20de0     F2 24 02 F6 | 	mov	local04, objptr
20de4     11 E5 01 F6 | 	mov	objptr, local03
20de8     2D 20 62 FD | 	call	local02
20dec     12 E5 01 F6 | 	mov	objptr, local04
20df0     00 FA 4D F2 | 	cmps	result1, #0 wz
20df4     1C 00 90 AD |  if_e	jmp	#LR__3150
20df8     01 FA 55 F2 | 	cmps	result1, #1 wc
20dfc     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
20e00     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
20e04     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
20e08     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
20e0c     00 FA 05 F6 | 	mov	result1, #0
20e10     04 00 90 FD | 	jmp	#LR__3151
20e14                 | LR__3150
20e14     0F FB 01 F6 | 	mov	result1, local01
20e18                 | LR__3151
20e18     A7 F0 03 F6 | 	mov	ptra, fp
20e1c     B2 00 A0 FD | 	call	#popregs_
20e20                 | __system__readdir_ret
20e20     2D 00 64 FD | 	ret
20e24                 | 
20e24                 | __system___openraw
20e24     15 4A 05 F6 | 	mov	COUNT_, #21
20e28     A8 00 A0 FD | 	call	#pushregs_
20e2c     09 1F 02 F6 | 	mov	local01, arg01
20e30     0A 21 02 F6 | 	mov	local02, arg02
20e34     0B 23 02 F6 | 	mov	local03, arg03
20e38     0C 25 02 F6 | 	mov	local04, arg04
20e3c     04 26 06 F6 | 	mov	local05, #4
20e40     0F 29 02 F6 | 	mov	local06, local01
20e44     00 2A 06 F6 | 	mov	local07, #0
20e48     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20e4c     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
20e50     16 13 02 F6 | 	mov	arg01, local08
20e54     10 15 02 F6 | 	mov	arg02, local02
20e58     00 16 06 F6 | 	mov	arg03, #0
20e5c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
20e60     14 C1 BF FD | 	call	#__system____getvfsforfile
20e64     FD 2E 0A F6 | 	mov	local09, result1 wz
20e68     10 00 90 AD |  if_e	jmp	#LR__3160
20e6c     20 2E 06 F1 | 	add	local09, #32
20e70     17 FB 09 FB | 	rdlong	result1, local09 wz
20e74     20 2E 86 F1 | 	sub	local09, #32
20e78     14 00 90 5D |  if_ne	jmp	#LR__3161
20e7c                 | LR__3160
20e7c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20e80     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
20e84     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20e88     01 FA 65 F6 | 	neg	result1, #1
20e8c     8C 02 90 FD | 	jmp	#LR__3174
20e90                 | LR__3161
20e90     14 13 02 F6 | 	mov	arg01, local06
20e94     00 14 06 F6 | 	mov	arg02, #0
20e98     34 16 06 F6 | 	mov	arg03, #52
20e9c     09 31 02 F6 | 	mov	local10, arg01
20ea0     98 00 A0 FD | 	call	#\builtin_bytefill_
20ea4     20 2E 06 F1 | 	add	local09, #32
20ea8     17 33 02 FB | 	rdlong	local11, local09
20eac     19 35 02 F6 | 	mov	local12, local11
20eb0     19 37 02 F6 | 	mov	local13, local11
20eb4     20 2E 86 F1 | 	sub	local09, #32
20eb8     1B 39 02 F6 | 	mov	local14, local13
20ebc     13 34 46 F7 | 	zerox	local12, #19
20ec0     14 38 46 F0 | 	shr	local14, #20
20ec4     02 38 66 F0 | 	shl	local14, #2
20ec8     ED 38 02 F1 | 	add	local14, __methods__
20ecc     1C 39 02 FB | 	rdlong	local14, local14
20ed0     14 3B 02 F6 | 	mov	local15, local06
20ed4     16 3D 02 F6 | 	mov	local16, local08
20ed8     11 3F 02 F6 | 	mov	local17, local03
20edc     1D 13 02 F6 | 	mov	arg01, local15
20ee0     1E 15 02 F6 | 	mov	arg02, local16
20ee4     1F 17 02 F6 | 	mov	arg03, local17
20ee8     F2 40 02 F6 | 	mov	local18, objptr
20eec     1A E5 01 F6 | 	mov	objptr, local12
20ef0     2D 38 62 FD | 	call	local14
20ef4     20 E5 01 F6 | 	mov	objptr, local18
20ef8     FD 42 0A F6 | 	mov	local19, result1 wz
20efc     04 22 CE 57 |  if_ne	test	local03, #4 wz
20f00     58 00 90 AD |  if_e	jmp	#LR__3162
20f04     24 2E 06 F1 | 	add	local09, #36
20f08     17 33 02 FB | 	rdlong	local11, local09
20f0c     19 35 02 F6 | 	mov	local12, local11
20f10     19 37 02 F6 | 	mov	local13, local11
20f14     24 2E 86 F1 | 	sub	local09, #36
20f18     1B 39 02 F6 | 	mov	local14, local13
20f1c     13 34 46 F7 | 	zerox	local12, #19
20f20     14 38 46 F0 | 	shr	local14, #20
20f24     02 38 66 F0 | 	shl	local14, #2
20f28     ED 38 02 F1 | 	add	local14, __methods__
20f2c     1C 39 02 FB | 	rdlong	local14, local14
20f30     14 3B 02 F6 | 	mov	local15, local06
20f34     16 3D 02 F6 | 	mov	local16, local08
20f38     12 3F 02 F6 | 	mov	local17, local04
20f3c     1D 13 02 F6 | 	mov	arg01, local15
20f40     1E 15 02 F6 | 	mov	arg02, local16
20f44     1F 17 02 F6 | 	mov	arg03, local17
20f48     F2 40 02 F6 | 	mov	local18, objptr
20f4c     1A E5 01 F6 | 	mov	objptr, local12
20f50     2D 38 62 FD | 	call	local14
20f54     20 E5 01 F6 | 	mov	objptr, local18
20f58     FD 42 02 F6 | 	mov	local19, result1
20f5c                 | LR__3162
20f5c     00 42 0E F2 | 	cmp	local19, #0 wz
20f60     8C 01 90 5D |  if_ne	jmp	#LR__3172
20f64     11 45 02 F6 | 	mov	local20, local03
20f68     03 44 0E F5 | 	and	local20, #3 wz
20f6c     02 26 46 55 |  if_ne	or	local05, #2
20f70     01 44 0E F2 | 	cmp	local20, #1 wz
20f74     01 26 46 55 |  if_ne	or	local05, #1
20f78     20 22 CE F7 | 	test	local03, #32 wz
20f7c     C0 26 46 55 |  if_ne	or	local05, #192
20f80     08 28 06 F1 | 	add	local06, #8
20f84     14 27 62 FC | 	wrlong	local05, local06
20f88     0C 28 06 F1 | 	add	local06, #12
20f8c     14 47 0A FB | 	rdlong	local21, local06 wz
20f90     14 28 86 F1 | 	sub	local06, #20
20f94     18 00 90 5D |  if_ne	jmp	#LR__3163
20f98     04 2E 06 F1 | 	add	local09, #4
20f9c     17 47 02 FB | 	rdlong	local21, local09
20fa0     04 2E 86 F1 | 	sub	local09, #4
20fa4     14 28 06 F1 | 	add	local06, #20
20fa8     14 47 62 FC | 	wrlong	local21, local06
20fac     14 28 86 F1 | 	sub	local06, #20
20fb0                 | LR__3163
20fb0     18 28 06 F1 | 	add	local06, #24
20fb4     14 47 0A FB | 	rdlong	local21, local06 wz
20fb8     18 28 86 F1 | 	sub	local06, #24
20fbc     18 00 90 5D |  if_ne	jmp	#LR__3164
20fc0     08 2E 06 F1 | 	add	local09, #8
20fc4     17 47 02 FB | 	rdlong	local21, local09
20fc8     08 2E 86 F1 | 	sub	local09, #8
20fcc     18 28 06 F1 | 	add	local06, #24
20fd0     14 47 62 FC | 	wrlong	local21, local06
20fd4     18 28 86 F1 | 	sub	local06, #24
20fd8                 | LR__3164
20fd8     24 28 06 F1 | 	add	local06, #36
20fdc     14 47 0A FB | 	rdlong	local21, local06 wz
20fe0     24 28 86 F1 | 	sub	local06, #36
20fe4     17 47 02 AB |  if_e	rdlong	local21, local09
20fe8     24 28 06 A1 |  if_e	add	local06, #36
20fec     14 47 62 AC |  if_e	wrlong	local21, local06
20ff0     24 28 86 A1 |  if_e	sub	local06, #36
20ff4     28 28 06 F1 | 	add	local06, #40
20ff8     14 47 0A FB | 	rdlong	local21, local06 wz
20ffc     28 28 86 F1 | 	sub	local06, #40
21000     18 00 90 5D |  if_ne	jmp	#LR__3165
21004     10 2E 06 F1 | 	add	local09, #16
21008     17 47 02 FB | 	rdlong	local21, local09
2100c     10 2E 86 F1 | 	sub	local09, #16
21010     28 28 06 F1 | 	add	local06, #40
21014     14 47 62 FC | 	wrlong	local21, local06
21018     28 28 86 F1 | 	sub	local06, #40
2101c                 | LR__3165
2101c     30 28 06 F1 | 	add	local06, #48
21020     14 47 0A FB | 	rdlong	local21, local06 wz
21024     30 28 86 F1 | 	sub	local06, #48
21028     18 00 90 5D |  if_ne	jmp	#LR__3166
2102c     0C 2E 06 F1 | 	add	local09, #12
21030     17 47 02 FB | 	rdlong	local21, local09
21034     0C 2E 86 F1 | 	sub	local09, #12
21038     30 28 06 F1 | 	add	local06, #48
2103c     14 47 62 FC | 	wrlong	local21, local06
21040     30 28 86 F1 | 	sub	local06, #48
21044                 | LR__3166
21044     1C 28 06 F1 | 	add	local06, #28
21048     14 47 0A FB | 	rdlong	local21, local06 wz
2104c     1C 28 86 F1 | 	sub	local06, #28
21050     1C 00 90 5D |  if_ne	jmp	#LR__3167
21054     01 2A 06 F6 | 	mov	local07, #1
21058     F2 12 02 F6 | 	mov	arg01, objptr
2105c     00 10 04 FF 
21060     00 12 46 F5 | 	or	arg01, ##136314880
21064     1C 28 06 F1 | 	add	local06, #28
21068     14 13 62 FC | 	wrlong	arg01, local06
2106c     1C 28 86 F1 | 	sub	local06, #28
21070                 | LR__3167
21070     20 28 06 F1 | 	add	local06, #32
21074     14 47 0A FB | 	rdlong	local21, local06 wz
21078     20 28 86 F1 | 	sub	local06, #32
2107c     1C 00 90 5D |  if_ne	jmp	#LR__3168
21080     01 2A 06 F6 | 	mov	local07, #1
21084     F2 12 02 F6 | 	mov	arg01, objptr
21088     00 18 04 FF 
2108c     00 12 46 F5 | 	or	arg01, ##137363456
21090     20 28 06 F1 | 	add	local06, #32
21094     14 13 62 FC | 	wrlong	arg01, local06
21098     20 28 86 F1 | 	sub	local06, #32
2109c                 | LR__3168
2109c     2C 28 06 F1 | 	add	local06, #44
210a0     14 47 0A FB | 	rdlong	local21, local06 wz
210a4     2C 28 86 F1 | 	sub	local06, #44
210a8     44 00 90 5D |  if_ne	jmp	#LR__3171
210ac     14 2E 06 F1 | 	add	local09, #20
210b0     17 47 0A FB | 	rdlong	local21, local09 wz
210b4     14 2E 86 F1 | 	sub	local09, #20
210b8     18 00 90 AD |  if_e	jmp	#LR__3169
210bc     14 2E 06 F1 | 	add	local09, #20
210c0     17 47 02 FB | 	rdlong	local21, local09
210c4     2C 28 06 F1 | 	add	local06, #44
210c8     14 47 62 FC | 	wrlong	local21, local06
210cc     2C 28 86 F1 | 	sub	local06, #44
210d0     1C 00 90 FD | 	jmp	#LR__3170
210d4                 | LR__3169
210d4     01 2A 06 F6 | 	mov	local07, #1
210d8     F2 12 02 F6 | 	mov	arg01, objptr
210dc     00 20 04 FF 
210e0     00 12 46 F5 | 	or	arg01, ##138412032
210e4     2C 28 06 F1 | 	add	local06, #44
210e8     14 13 62 FC | 	wrlong	arg01, local06
210ec     2C 28 86 F1 | 	sub	local06, #44
210f0                 | LR__3170
210f0                 | LR__3171
210f0                 | LR__3172
210f0     00 2A 0E F2 | 	cmp	local07, #0 wz
210f4     14 13 02 56 |  if_ne	mov	arg01, local06
210f8     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
210fc     00 42 0E F2 | 	cmp	local19, #0 wz
21100     00 12 06 A6 |  if_e	mov	arg01, #0
21104     10 00 90 5D |  if_ne	jmp	#LR__3173
21108     00 12 4E F2 | 	cmps	arg01, #0 wz
2110c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21110     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21114     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21118                 | LR__3173
21118     21 FB 01 F6 | 	mov	result1, local19
2111c                 | LR__3174
2111c     A7 F0 03 F6 | 	mov	ptra, fp
21120     B2 00 A0 FD | 	call	#popregs_
21124                 | __system___openraw_ret
21124     2D 00 64 FD | 	ret
21128                 | 
21128                 | __system___closeraw
21128     05 4A 05 F6 | 	mov	COUNT_, #5
2112c     A8 00 A0 FD | 	call	#pushregs_
21130     09 1F 02 F6 | 	mov	local01, arg01
21134     00 20 06 F6 | 	mov	local02, #0
21138     08 1E 06 F1 | 	add	local01, #8
2113c     0F FB 09 FB | 	rdlong	result1, local01 wz
21140     08 1E 86 F1 | 	sub	local01, #8
21144     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21148     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2114c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21150     01 FA 65 A6 |  if_e	neg	result1, #1
21154     A8 00 90 AD |  if_e	jmp	#LR__3182
21158     2C 1E 06 F1 | 	add	local01, #44
2115c     0F FB 09 FB | 	rdlong	result1, local01 wz
21160     2C 1E 86 F1 | 	sub	local01, #44
21164     38 00 90 AD |  if_e	jmp	#LR__3180
21168     2C 1E 06 F1 | 	add	local01, #44
2116c     0F 23 02 FB | 	rdlong	local03, local01
21170     11 25 02 F6 | 	mov	local04, local03
21174     2C 1E 86 F1 | 	sub	local01, #44
21178     13 24 46 F7 | 	zerox	local04, #19
2117c     14 22 46 F0 | 	shr	local03, #20
21180     02 22 66 F0 | 	shl	local03, #2
21184     ED 22 02 F1 | 	add	local03, __methods__
21188     11 23 02 FB | 	rdlong	local03, local03
2118c     0F 13 02 F6 | 	mov	arg01, local01
21190     F2 26 02 F6 | 	mov	local05, objptr
21194     12 E5 01 F6 | 	mov	objptr, local04
21198     2D 22 62 FD | 	call	local03
2119c     13 E5 01 F6 | 	mov	objptr, local05
211a0                 | LR__3180
211a0     24 1E 06 F1 | 	add	local01, #36
211a4     0F 27 0A FB | 	rdlong	local05, local01 wz
211a8     24 1E 86 F1 | 	sub	local01, #36
211ac     3C 00 90 AD |  if_e	jmp	#LR__3181
211b0     24 1E 06 F1 | 	add	local01, #36
211b4     0F 23 02 FB | 	rdlong	local03, local01
211b8     11 25 02 F6 | 	mov	local04, local03
211bc     24 1E 86 F1 | 	sub	local01, #36
211c0     13 24 46 F7 | 	zerox	local04, #19
211c4     14 22 46 F0 | 	shr	local03, #20
211c8     02 22 66 F0 | 	shl	local03, #2
211cc     ED 22 02 F1 | 	add	local03, __methods__
211d0     11 23 02 FB | 	rdlong	local03, local03
211d4     0F 13 02 F6 | 	mov	arg01, local01
211d8     F2 26 02 F6 | 	mov	local05, objptr
211dc     12 E5 01 F6 | 	mov	objptr, local04
211e0     2D 22 62 FD | 	call	local03
211e4     13 E5 01 F6 | 	mov	objptr, local05
211e8     FD 20 02 F6 | 	mov	local02, result1
211ec                 | LR__3181
211ec     0F 13 02 F6 | 	mov	arg01, local01
211f0     00 14 06 F6 | 	mov	arg02, #0
211f4     34 16 06 F6 | 	mov	arg03, #52
211f8     98 00 A0 FD | 	call	#\builtin_bytefill_
211fc     10 FB 01 F6 | 	mov	result1, local02
21200                 | LR__3182
21200     A7 F0 03 F6 | 	mov	ptra, fp
21204     B2 00 A0 FD | 	call	#popregs_
21208                 | __system___closeraw_ret
21208     2D 00 64 FD | 	ret
2120c                 | 
2120c                 | __system___vfs_open_sdcardx
2120c     0B 4A 05 F6 | 	mov	COUNT_, #11
21210     A8 00 A0 FD | 	call	#pushregs_
21214     09 23 02 F6 | 	mov	local03, arg01
21218     0A 25 02 F6 | 	mov	local04, arg02
2121c     0B 27 02 F6 | 	mov	local05, arg03
21220     0C 29 02 F6 | 	mov	local06, arg04
21224     01 00 00 FF 
21228     24 12 06 F6 | 	mov	arg01, ##548
2122c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
21230     FD 2A 02 F6 | 	mov	local07, result1
21234     01 00 00 FF 
21238     34 12 06 F6 | 	mov	arg01, ##564
2123c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
21240     FD 2C 02 F6 | 	mov	local08, result1
21244     11 19 02 F6 | 	mov	arg04, local03
21248     1F 18 C6 F0 | 	sar	arg04, #31
2124c     11 17 02 F6 | 	mov	arg03, local03
21250     01 12 06 F6 | 	mov	arg01, #1
21254     00 14 06 F6 | 	mov	arg02, #0
21258     48 DC BF FD | 	call	#__system___int64_shl
2125c     FD 1E 02 F6 | 	mov	local01, result1
21260     FE 2E 02 F6 | 	mov	local09, result2
21264     12 19 02 F6 | 	mov	arg04, local04
21268     1F 18 C6 F0 | 	sar	arg04, #31
2126c     12 17 02 F6 | 	mov	arg03, local04
21270     01 12 06 F6 | 	mov	arg01, #1
21274     00 14 06 F6 | 	mov	arg02, #0
21278     28 DC BF FD | 	call	#__system___int64_shl
2127c     FD 1E 42 F5 | 	or	local01, result1
21280     FE 2E 42 F5 | 	or	local09, result2
21284     13 19 02 F6 | 	mov	arg04, local05
21288     1F 18 C6 F0 | 	sar	arg04, #31
2128c     13 17 02 F6 | 	mov	arg03, local05
21290     01 12 06 F6 | 	mov	arg01, #1
21294     00 14 06 F6 | 	mov	arg02, #0
21298     08 DC BF FD | 	call	#__system___int64_shl
2129c     FD 1E 42 F5 | 	or	local01, result1
212a0     FE 2E 42 F5 | 	or	local09, result2
212a4     14 19 02 F6 | 	mov	arg04, local06
212a8     1F 18 C6 F0 | 	sar	arg04, #31
212ac     14 17 02 F6 | 	mov	arg03, local06
212b0     01 12 06 F6 | 	mov	arg01, #1
212b4     00 14 06 F6 | 	mov	arg02, #0
212b8     E8 DB BF FD | 	call	#__system___int64_shl
212bc     17 15 02 F6 | 	mov	arg02, local09
212c0     FD 1E 42 F5 | 	or	local01, result1
212c4     0A FD 41 F5 | 	or	result2, arg02
212c8     FE 20 02 F6 | 	mov	local02, result2
212cc     0F 13 02 F6 | 	mov	arg01, local01
212d0     10 15 02 F6 | 	mov	arg02, local02
212d4     04 DC BF FD | 	call	#__system___usepins
212d8     00 FA 0D F2 | 	cmp	result1, #0 wz
212dc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
212e0     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
212e4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
212e8     00 FA 05 A6 |  if_e	mov	result1, #0
212ec     B4 00 90 AD |  if_e	jmp	#LR__3192
212f0     0F 31 02 F6 | 	mov	local10, local01
212f4     10 2F 02 F6 | 	mov	local09, local02
212f8     01 00 00 FF 
212fc     08 2A 06 F1 | 	add	local07, ##520
21300     15 31 62 FC | 	wrlong	local10, local07
21304     04 2A 06 F1 | 	add	local07, #4
21308     15 2F 62 FC | 	wrlong	local09, local07
2130c     01 00 00 FF 
21310     0C 2A 86 F1 | 	sub	local07, ##524
21314     14 1B 02 F6 | 	mov	arg05, local06
21318     00 12 06 F6 | 	mov	arg01, #0
2131c     11 15 02 F6 | 	mov	arg02, local03
21320     12 17 02 F6 | 	mov	arg03, local04
21324     13 19 02 F6 | 	mov	arg04, local05
21328     F2 30 02 F6 | 	mov	local10, objptr
2132c     15 E5 01 F6 | 	mov	objptr, local07
21330     78 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
21334     18 E5 01 F6 | 	mov	objptr, local10
21338     FD 32 0A F6 | 	mov	local11, result1 wz
2133c     24 00 90 5D |  if_ne	jmp	#LR__3190
21340     5E 01 00 FF 
21344     F6 15 06 F6 | 	mov	arg02, ##@LR__4587
21348     16 13 02 F6 | 	mov	arg01, local08
2134c     00 16 06 F6 | 	mov	arg03, #0
21350     F2 32 02 F6 | 	mov	local11, objptr
21354     15 E5 01 F6 | 	mov	objptr, local07
21358     A8 5E B0 FD | 	call	#_fatfs_cc_f_mount
2135c     19 E5 01 F6 | 	mov	objptr, local11
21360     FD 32 02 F6 | 	mov	local11, result1
21364                 | LR__3190
21364     00 32 0E F2 | 	cmp	local11, #0 wz
21368     24 00 90 AD |  if_e	jmp	#LR__3191
2136c     0F 13 02 F6 | 	mov	arg01, local01
21370     10 15 02 F6 | 	mov	arg02, local02
21374     B8 DB BF FD | 	call	#__system___freepins
21378     19 13 6A F6 | 	neg	arg01, local11 wz
2137c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21380     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21384     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21388     00 FA 05 F6 | 	mov	result1, #0
2138c     14 00 90 FD | 	jmp	#LR__3192
21390                 | LR__3191
21390     15 13 02 F6 | 	mov	arg01, local07
21394     F2 32 02 F6 | 	mov	local11, objptr
21398     15 E5 01 F6 | 	mov	objptr, local07
2139c     44 9B B0 FD | 	call	#_fatfs_cc_get_vfs
213a0     19 E5 01 F6 | 	mov	objptr, local11
213a4                 | LR__3192
213a4     A7 F0 03 F6 | 	mov	ptra, fp
213a8     B2 00 A0 FD | 	call	#popregs_
213ac                 | __system___vfs_open_sdcardx_ret
213ac     2D 00 64 FD | 	ret
213b0                 | 
213b0                 | __system____default_getc
213b0     03 4A 05 F6 | 	mov	COUNT_, #3
213b4     A8 00 A0 FD | 	call	#pushregs_
213b8     09 1F 02 F6 | 	mov	local01, arg01
213bc     0F 21 02 FB | 	rdlong	local02, local01
213c0     08 20 06 F1 | 	add	local02, #8
213c4     10 23 02 FB | 	rdlong	local03, local02
213c8     02 22 CE F7 | 	test	local03, #2 wz
213cc     0F 13 02 56 |  if_ne	mov	arg01, local01
213d0     00 01 B0 5D |  if_ne	call	#__system____default_flush
213d4     10 23 02 FB | 	rdlong	local03, local02
213d8     01 22 46 F5 | 	or	local03, #1
213dc     10 23 62 FC | 	wrlong	local03, local02
213e0     08 20 86 F1 | 	sub	local02, #8
213e4     10 23 0A FB | 	rdlong	local03, local02 wz
213e8     0C 00 90 5D |  if_ne	jmp	#LR__3200
213ec     0F 13 02 F6 | 	mov	arg01, local01
213f0     60 16 B0 FD | 	call	#__system____default_filbuf
213f4     FD 22 02 F6 | 	mov	local03, result1
213f8                 | LR__3200
213f8     01 22 56 F2 | 	cmps	local03, #1 wc
213fc     01 FA 65 C6 |  if_b	neg	result1, #1
21400     1C 00 90 CD |  if_b	jmp	#LR__3201
21404     01 22 86 F1 | 	sub	local03, #1
21408     10 23 62 FC | 	wrlong	local03, local02
2140c     04 20 06 F1 | 	add	local02, #4
21410     10 23 02 FB | 	rdlong	local03, local02
21414     11 FB C1 FA | 	rdbyte	result1, local03
21418     01 22 06 F1 | 	add	local03, #1
2141c     10 23 62 FC | 	wrlong	local03, local02
21420                 | LR__3201
21420     A7 F0 03 F6 | 	mov	ptra, fp
21424     B2 00 A0 FD | 	call	#popregs_
21428                 | __system____default_getc_ret
21428     2D 00 64 FD | 	ret
2142c                 | 
2142c                 | __system____default_putc
2142c     06 4A 05 F6 | 	mov	COUNT_, #6
21430     A8 00 A0 FD | 	call	#pushregs_
21434     09 1F 02 F6 | 	mov	local01, arg01
21438     0A 21 02 F6 | 	mov	local02, arg02
2143c     10 23 02 FB | 	rdlong	local03, local02
21440     08 22 06 F1 | 	add	local03, #8
21444     11 FB 01 FB | 	rdlong	result1, local03
21448     01 FA CD F7 | 	test	result1, #1 wz
2144c     10 13 02 56 |  if_ne	mov	arg01, local02
21450     80 00 B0 5D |  if_ne	call	#__system____default_flush
21454     11 25 02 FB | 	rdlong	local04, local03
21458     02 24 46 F5 | 	or	local04, #2
2145c     11 25 62 FC | 	wrlong	local04, local03
21460     08 22 86 F1 | 	sub	local03, #8
21464     11 27 02 FB | 	rdlong	local05, local03
21468     10 22 06 F1 | 	add	local03, #16
2146c     11 15 02 FB | 	rdlong	arg02, local03
21470     10 22 86 F1 | 	sub	local03, #16
21474     13 FB 01 F6 | 	mov	result1, local05
21478     0A FB 01 F1 | 	add	result1, arg02
2147c     FD 1E 42 FC | 	wrbyte	local01, result1
21480     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21484     01 26 06 F1 | 	add	local05, #1
21488     11 27 62 FC | 	wrlong	local05, local03
2148c     06 20 06 F1 | 	add	local02, #6
21490     10 29 EA FA | 	rdword	local06, local02 wz
21494     06 20 86 F1 | 	sub	local02, #6
21498     0C 22 06 51 |  if_ne	add	local03, #12
2149c     11 25 02 5B |  if_ne	rdlong	local04, local03
214a0     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
214a4     0C 00 90 AD |  if_e	jmp	#LR__3210
214a8     0A 1E 0E F2 | 	cmp	local01, #10 wz
214ac     01 28 0E A2 |  if_e	cmp	local06, #1 wz
214b0     10 00 90 5D |  if_ne	jmp	#LR__3211
214b4                 | LR__3210
214b4     10 13 02 F6 | 	mov	arg01, local02
214b8     18 00 B0 FD | 	call	#__system____default_flush
214bc     00 FA 0D F2 | 	cmp	result1, #0 wz
214c0     01 1E 66 56 |  if_ne	neg	local01, #1
214c4                 | LR__3211
214c4     0F FB 01 F6 | 	mov	result1, local01
214c8     A7 F0 03 F6 | 	mov	ptra, fp
214cc     B2 00 A0 FD | 	call	#popregs_
214d0                 | __system____default_putc_ret
214d0     2D 00 64 FD | 	ret
214d4                 | 
214d4                 | __system____default_flush
214d4     06 4A 05 F6 | 	mov	COUNT_, #6
214d8     A8 00 A0 FD | 	call	#pushregs_
214dc     09 1F 02 F6 | 	mov	local01, arg01
214e0     0F 21 02 FB | 	rdlong	local02, local01
214e4     10 23 02 FB | 	rdlong	local03, local02
214e8     08 20 06 F1 | 	add	local02, #8
214ec     10 FB 01 FB | 	rdlong	result1, local02
214f0     08 20 86 F1 | 	sub	local02, #8
214f4     02 FA CD F7 | 	test	result1, #2 wz
214f8     D0 00 90 AD |  if_e	jmp	#LR__3222
214fc     01 22 56 F2 | 	cmps	local03, #1 wc
21500     20 01 90 CD |  if_b	jmp	#LR__3224
21504     08 1E 06 F1 | 	add	local01, #8
21508     0F FB 01 FB | 	rdlong	result1, local01
2150c     08 1E 86 F1 | 	sub	local01, #8
21510     40 FA CD F7 | 	test	result1, #64 wz
21514     68 00 90 AD |  if_e	jmp	#LR__3221
21518     08 1E 06 F1 | 	add	local01, #8
2151c     0F 17 02 FB | 	rdlong	arg03, local01
21520     08 1E 86 F1 | 	sub	local01, #8
21524     80 16 CE F7 | 	test	arg03, #128 wz
21528     54 00 90 AD |  if_e	jmp	#LR__3220
2152c     30 1E 06 F1 | 	add	local01, #48
21530     0F 25 02 FB | 	rdlong	local04, local01
21534     12 27 02 F6 | 	mov	local05, local04
21538     30 1E 86 F1 | 	sub	local01, #48
2153c     13 26 46 F7 | 	zerox	local05, #19
21540     14 24 46 F0 | 	shr	local04, #20
21544     02 24 66 F0 | 	shl	local04, #2
21548     ED 24 02 F1 | 	add	local04, __methods__
2154c     12 25 02 FB | 	rdlong	local04, local04
21550     0F 13 02 F6 | 	mov	arg01, local01
21554     00 14 06 F6 | 	mov	arg02, #0
21558     02 16 06 F6 | 	mov	arg03, #2
2155c     F2 28 02 F6 | 	mov	local06, objptr
21560     13 E5 01 F6 | 	mov	objptr, local05
21564     2D 24 62 FD | 	call	local04
21568     14 E5 01 F6 | 	mov	objptr, local06
2156c     08 1E 06 F1 | 	add	local01, #8
21570     0F 29 02 FB | 	rdlong	local06, local01
21574     80 28 26 F5 | 	andn	local06, #128
21578     0F 29 62 FC | 	wrlong	local06, local01
2157c     08 1E 86 F1 | 	sub	local01, #8
21580                 | LR__3220
21580                 | LR__3221
21580     18 1E 06 F1 | 	add	local01, #24
21584     0F 25 02 FB | 	rdlong	local04, local01
21588     12 27 02 F6 | 	mov	local05, local04
2158c     18 1E 86 F1 | 	sub	local01, #24
21590     13 26 46 F7 | 	zerox	local05, #19
21594     14 24 46 F0 | 	shr	local04, #20
21598     02 24 66 F0 | 	shl	local04, #2
2159c     ED 24 02 F1 | 	add	local04, __methods__
215a0     12 25 02 FB | 	rdlong	local04, local04
215a4     10 20 06 F1 | 	add	local02, #16
215a8     10 15 02 FB | 	rdlong	arg02, local02
215ac     10 20 86 F1 | 	sub	local02, #16
215b0     0F 13 02 F6 | 	mov	arg01, local01
215b4     11 17 02 F6 | 	mov	arg03, local03
215b8     F2 28 02 F6 | 	mov	local06, objptr
215bc     13 E5 01 F6 | 	mov	objptr, local05
215c0     2D 24 62 FD | 	call	local04
215c4     14 E5 01 F6 | 	mov	objptr, local06
215c8     58 00 90 FD | 	jmp	#LR__3224
215cc                 | LR__3222
215cc     08 20 06 F1 | 	add	local02, #8
215d0     10 29 02 FB | 	rdlong	local06, local02
215d4     08 20 86 F1 | 	sub	local02, #8
215d8     01 28 CE F7 | 	test	local06, #1 wz
215dc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
215e0     40 00 90 AD |  if_e	jmp	#LR__3223
215e4     30 1E 06 F1 | 	add	local01, #48
215e8     0F 25 02 FB | 	rdlong	local04, local01
215ec     12 27 02 F6 | 	mov	local05, local04
215f0     30 1E 86 F1 | 	sub	local01, #48
215f4     13 26 46 F7 | 	zerox	local05, #19
215f8     14 24 46 F0 | 	shr	local04, #20
215fc     02 24 66 F0 | 	shl	local04, #2
21600     ED 24 02 F1 | 	add	local04, __methods__
21604     12 25 02 FB | 	rdlong	local04, local04
21608     0F 13 02 F6 | 	mov	arg01, local01
2160c     11 15 62 F6 | 	neg	arg02, local03
21610     01 16 06 F6 | 	mov	arg03, #1
21614     F2 28 02 F6 | 	mov	local06, objptr
21618     13 E5 01 F6 | 	mov	objptr, local05
2161c     2D 24 62 FD | 	call	local04
21620     14 E5 01 F6 | 	mov	objptr, local06
21624                 | LR__3223
21624                 | LR__3224
21624     10 01 68 FC | 	wrlong	#0, local02
21628     04 20 06 F1 | 	add	local02, #4
2162c     10 01 68 FC | 	wrlong	#0, local02
21630     04 20 06 F1 | 	add	local02, #4
21634     10 01 68 FC | 	wrlong	#0, local02
21638     00 FA 05 F6 | 	mov	result1, #0
2163c     A7 F0 03 F6 | 	mov	ptra, fp
21640     B2 00 A0 FD | 	call	#popregs_
21644                 | __system____default_flush_ret
21644     2D 00 64 FD | 	ret
21648                 | 
21648                 | __system____default_buffer_init
21648     02 4A 05 F6 | 	mov	COUNT_, #2
2164c     A8 00 A0 FD | 	call	#pushregs_
21650     09 1F 02 F6 | 	mov	local01, arg01
21654     0F 21 02 FB | 	rdlong	local02, local01
21658     0F 13 02 F6 | 	mov	arg01, local01
2165c     F8 02 B0 FD | 	call	#__system___isatty
21660     00 FA 0D F2 | 	cmp	result1, #0 wz
21664     06 1E 06 51 |  if_ne	add	local01, #6
21668     0F 0B 58 5C |  if_ne	wrword	#5, local01
2166c     06 1E 06 A1 |  if_e	add	local01, #6
21670     0F 0D 58 AC |  if_e	wrword	#6, local01
21674     14 20 06 F1 | 	add	local02, #20
21678     10 1F 02 F6 | 	mov	local01, local02
2167c     04 20 86 F1 | 	sub	local02, #4
21680     10 1F 62 FC | 	wrlong	local01, local02
21684     04 20 86 F1 | 	sub	local02, #4
21688     02 00 80 FF 
2168c     10 01 68 FC | 	wrlong	##1024, local02
21690     00 FA 05 F6 | 	mov	result1, #0
21694     A7 F0 03 F6 | 	mov	ptra, fp
21698     B2 00 A0 FD | 	call	#popregs_
2169c                 | __system____default_buffer_init_ret
2169c     2D 00 64 FD | 	ret
216a0                 | 
216a0                 | __system__stat
216a0     04 4A 05 F6 | 	mov	COUNT_, #4
216a4     A8 00 A0 FD | 	call	#pushregs_
216a8     0A 1F 02 F6 | 	mov	local01, arg02
216ac     84 E7 05 F1 | 	add	ptr___system__dat__, #388
216b0     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
216b4     09 15 02 F6 | 	mov	arg02, arg01
216b8     10 13 02 F6 | 	mov	arg01, local02
216bc     00 16 06 F6 | 	mov	arg03, #0
216c0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
216c4     B0 B8 BF FD | 	call	#__system____getvfsforfile
216c8     FD 22 0A F6 | 	mov	local03, result1 wz
216cc     10 00 90 AD |  if_e	jmp	#LR__3230
216d0     34 22 06 F1 | 	add	local03, #52
216d4     11 17 0A FB | 	rdlong	arg03, local03 wz
216d8     34 22 86 F1 | 	sub	local03, #52
216dc     14 00 90 5D |  if_ne	jmp	#LR__3231
216e0                 | LR__3230
216e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
216e4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
216e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
216ec     01 FA 65 F6 | 	neg	result1, #1
216f0     68 00 90 FD | 	jmp	#LR__3232
216f4                 | LR__3231
216f4     0F 13 02 F6 | 	mov	arg01, local01
216f8     00 14 06 F6 | 	mov	arg02, #0
216fc     30 16 06 F6 | 	mov	arg03, #48
21700     09 25 02 F6 | 	mov	local04, arg01
21704     98 00 A0 FD | 	call	#\builtin_bytefill_
21708     12 FB 01 F6 | 	mov	result1, local04
2170c     10 13 CA FA | 	rdbyte	arg01, local02 wz
21710     08 1E 06 A1 |  if_e	add	local01, #8
21714     08 00 80 AF 
21718     0F FF 6B AC |  if_e	wrlong	##4607, local01
2171c     00 FA 05 A6 |  if_e	mov	result1, #0
21720     38 00 90 AD |  if_e	jmp	#LR__3232
21724     34 22 06 F1 | 	add	local03, #52
21728     11 23 02 FB | 	rdlong	local03, local03
2172c     11 25 02 F6 | 	mov	local04, local03
21730     13 22 46 F7 | 	zerox	local03, #19
21734     14 24 46 F0 | 	shr	local04, #20
21738     02 24 66 F0 | 	shl	local04, #2
2173c     ED 24 02 F1 | 	add	local04, __methods__
21740     12 25 02 FB | 	rdlong	local04, local04
21744     10 13 02 F6 | 	mov	arg01, local02
21748     0F 15 02 F6 | 	mov	arg02, local01
2174c     F2 20 02 F6 | 	mov	local02, objptr
21750     11 E5 01 F6 | 	mov	objptr, local03
21754     2D 24 62 FD | 	call	local04
21758     10 E5 01 F6 | 	mov	objptr, local02
2175c                 | LR__3232
2175c     A7 F0 03 F6 | 	mov	ptra, fp
21760     B2 00 A0 FD | 	call	#popregs_
21764                 | __system__stat_ret
21764     2D 00 64 FD | 	ret
21768                 | 
21768                 | __system__read
21768     0A 12 16 F2 | 	cmp	arg01, #10 wc
2176c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
21770     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
21774     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
21778     01 FA 65 36 |  if_ae	neg	result1, #1
2177c     20 00 90 3D |  if_ae	jmp	#LR__3240
21780     34 12 06 FD | 	qmul	arg01, #52
21784     02 00 00 FF 
21788     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
2178c     18 12 62 FD | 	getqx	arg01
21790     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
21794     02 00 00 FF 
21798     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
2179c     CC 0F B0 FD | 	call	#__system___vfsread
217a0                 | LR__3240
217a0                 | __system__read_ret
217a0     2D 00 64 FD | 	ret
217a4                 | 
217a4                 | __system__close
217a4     0A 12 16 F2 | 	cmp	arg01, #10 wc
217a8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
217ac     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
217b0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
217b4     01 FA 65 36 |  if_ae	neg	result1, #1
217b8     20 00 90 3D |  if_ae	jmp	#LR__3250
217bc     34 12 06 FD | 	qmul	arg01, #52
217c0     02 00 00 FF 
217c4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
217c8     18 12 62 FD | 	getqx	arg01
217cc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
217d0     02 00 00 FF 
217d4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
217d8     4C F9 BF FD | 	call	#__system___closeraw
217dc                 | LR__3250
217dc                 | __system__close_ret
217dc     2D 00 64 FD | 	ret
217e0                 | 
217e0                 | __system__lseek
217e0     06 4A 05 F6 | 	mov	COUNT_, #6
217e4     A8 00 A0 FD | 	call	#pushregs_
217e8     0A 12 16 F2 | 	cmp	arg01, #10 wc
217ec     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
217f0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
217f4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
217f8     01 FA 65 36 |  if_ae	neg	result1, #1
217fc     C4 00 90 3D |  if_ae	jmp	#LR__3261
21800     34 12 06 FD | 	qmul	arg01, #52
21804     02 00 00 FF 
21808     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
2180c     18 1E 62 FD | 	getqx	local01
21810     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
21814     30 1E 06 F1 | 	add	local01, #48
21818     0F 13 0A FB | 	rdlong	arg01, local01 wz
2181c     30 1E 86 F1 | 	sub	local01, #48
21820     02 00 00 FF 
21824     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
21828     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2182c     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
21830     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21834     01 FA 65 A6 |  if_e	neg	result1, #1
21838     88 00 90 AD |  if_e	jmp	#LR__3261
2183c     08 1E 06 F1 | 	add	local01, #8
21840     0F 21 02 FB | 	rdlong	local02, local01
21844     08 1E 86 F1 | 	sub	local01, #8
21848     40 20 CE F7 | 	test	local02, #64 wz
2184c     08 1E 06 51 |  if_ne	add	local01, #8
21850     0F 21 02 5B |  if_ne	rdlong	local02, local01
21854     80 20 46 55 |  if_ne	or	local02, #128
21858     0F 21 62 5C |  if_ne	wrlong	local02, local01
2185c     08 1E 86 51 |  if_ne	sub	local01, #8
21860     30 1E 06 F1 | 	add	local01, #48
21864     0F 23 02 FB | 	rdlong	local03, local01
21868     11 25 02 F6 | 	mov	local04, local03
2186c     30 1E 86 F1 | 	sub	local01, #48
21870     13 24 46 F7 | 	zerox	local04, #19
21874     14 22 46 F0 | 	shr	local03, #20
21878     02 22 66 F0 | 	shl	local03, #2
2187c     ED 22 02 F1 | 	add	local03, __methods__
21880     11 23 02 FB | 	rdlong	local03, local03
21884     0F 13 02 F6 | 	mov	arg01, local01
21888     F2 26 02 F6 | 	mov	local05, objptr
2188c     12 E5 01 F6 | 	mov	objptr, local04
21890     2D 22 62 FD | 	call	local03
21894     13 E5 01 F6 | 	mov	objptr, local05
21898     FD 28 02 F6 | 	mov	local06, result1
2189c     00 28 56 F2 | 	cmps	local06, #0 wc
218a0     1C 00 90 3D |  if_ae	jmp	#LR__3260
218a4     14 13 6A F6 | 	neg	arg01, local06 wz
218a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
218ac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
218b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
218b4     01 FA 65 56 |  if_ne	neg	result1, #1
218b8     00 FA 05 A6 |  if_e	mov	result1, #0
218bc     04 00 90 FD | 	jmp	#LR__3261
218c0                 | LR__3260
218c0     14 FB 01 F6 | 	mov	result1, local06
218c4                 | LR__3261
218c4     A7 F0 03 F6 | 	mov	ptra, fp
218c8     B2 00 A0 FD | 	call	#popregs_
218cc                 | __system__lseek_ret
218cc     2D 00 64 FD | 	ret
218d0                 | 
218d0                 | __system___ioctl
218d0     03 4A 05 F6 | 	mov	COUNT_, #3
218d4     A8 00 A0 FD | 	call	#pushregs_
218d8     00 12 4E F2 | 	cmps	arg01, #0 wz
218dc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
218e0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
218e4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
218e8     01 FA 65 A6 |  if_e	neg	result1, #1
218ec     5C 00 90 AD |  if_e	jmp	#LR__3271
218f0     28 12 06 F1 | 	add	arg01, #40
218f4     09 1F 02 FB | 	rdlong	local01, arg01
218f8     0F 21 02 F6 | 	mov	local02, local01
218fc     28 12 86 F1 | 	sub	arg01, #40
21900     13 20 46 F7 | 	zerox	local02, #19
21904     14 1E 46 F0 | 	shr	local01, #20
21908     02 1E 66 F0 | 	shl	local01, #2
2190c     ED 1E 02 F1 | 	add	local01, __methods__
21910     0F 1F 02 FB | 	rdlong	local01, local01
21914     F2 22 02 F6 | 	mov	local03, objptr
21918     10 E5 01 F6 | 	mov	objptr, local02
2191c     2D 1E 62 FD | 	call	local01
21920     11 E5 01 F6 | 	mov	objptr, local03
21924     FD 12 0A F6 | 	mov	arg01, result1 wz
21928     1C 00 90 AD |  if_e	jmp	#LR__3270
2192c     00 12 4E F2 | 	cmps	arg01, #0 wz
21930     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21934     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21938     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2193c     01 FA 65 56 |  if_ne	neg	result1, #1
21940     00 FA 05 A6 |  if_e	mov	result1, #0
21944     04 00 90 FD | 	jmp	#LR__3271
21948                 | LR__3270
21948     00 FA 05 F6 | 	mov	result1, #0
2194c                 | LR__3271
2194c     A7 F0 03 F6 | 	mov	ptra, fp
21950     B2 00 A0 FD | 	call	#popregs_
21954                 | __system___ioctl_ret
21954     2D 00 64 FD | 	ret
21958                 | 
21958                 | __system___isatty
21958     00 4A 05 F6 | 	mov	COUNT_, #0
2195c     A8 00 A0 FD | 	call	#pushregs_
21960     0C F0 07 F1 | 	add	ptra, #12
21964     04 4E 05 F1 | 	add	fp, #4
21968     A7 12 62 FC | 	wrlong	arg01, fp
2196c     04 4E 05 F1 | 	add	fp, #4
21970     A7 16 02 F6 | 	mov	arg03, fp
21974     08 4E 85 F1 | 	sub	fp, #8
21978     00 15 06 F6 | 	mov	arg02, #256
2197c     50 FF BF FD | 	call	#__system___ioctl
21980     00 FA 0D F2 | 	cmp	result1, #0 wz
21984     01 FA 05 A6 |  if_e	mov	result1, #1
21988     00 FA 05 56 |  if_ne	mov	result1, #0
2198c     A7 F0 03 F6 | 	mov	ptra, fp
21990     B2 00 A0 FD | 	call	#popregs_
21994                 | __system___isatty_ret
21994     2D 00 64 FD | 	ret
21998                 | 
21998                 | __system____getftab
21998     0A 12 16 F2 | 	cmp	arg01, #10 wc
2199c     34 12 06 CD |  if_b	qmul	arg01, #52
219a0     00 FA 05 36 |  if_ae	mov	result1, #0
219a4     02 00 00 CF 
219a8     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
219ac     18 FA 61 CD |  if_b	getqx	result1
219b0     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
219b4     02 00 00 CF 
219b8     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
219bc                 | __system____getftab_ret
219bc     2D 00 64 FD | 	ret
219c0                 | 
219c0                 | __system__strncpy
219c0     09 01 02 F6 | 	mov	_var01, arg01
219c4                 | LR__3280
219c4     01 16 86 F1 | 	sub	arg03, #1
219c8     00 16 56 F2 | 	cmps	arg03, #0 wc
219cc     18 00 90 CD |  if_b	jmp	#LR__3281
219d0     0A FB C1 FA | 	rdbyte	result1, arg02
219d4     00 FB 41 FC | 	wrbyte	result1, _var01
219d8     01 14 06 F1 | 	add	arg02, #1
219dc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
219e0     01 00 06 F1 | 	add	_var01, #1
219e4     DC FF 9F 5D |  if_ne	jmp	#LR__3280
219e8                 | LR__3281
219e8     97 0C 48 FB | 	callpa	#(@LR__3283-@LR__3282)>>2,fcache_load_ptr_
219ec                 | LR__3282
219ec     01 16 86 F1 | 	sub	arg03, #1
219f0     00 16 56 F2 | 	cmps	arg03, #0 wc
219f4     00 03 02 36 |  if_ae	mov	_var02, _var01
219f8     01 00 06 31 |  if_ae	add	_var01, #1
219fc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
21a00     E8 FF 9F 3D |  if_ae	jmp	#LR__3282
21a04                 | LR__3283
21a04     09 FB 01 F6 | 	mov	result1, arg01
21a08                 | __system__strncpy_ret
21a08     2D 00 64 FD | 	ret
21a0c                 | 
21a0c                 | __system__strncat
21a0c     00 14 4E F2 | 	cmps	arg02, #0 wz
21a10     50 00 90 AD |  if_e	jmp	#LR__3294
21a14     01 16 16 F2 | 	cmp	arg03, #1 wc
21a18     48 00 90 CD |  if_b	jmp	#LR__3294
21a1c     09 01 02 F6 | 	mov	_var01, arg01
21a20     97 1E 48 FB | 	callpa	#(@LR__3292-@LR__3290)>>2,fcache_load_ptr_
21a24                 | LR__3290
21a24     00 FB C9 FA | 	rdbyte	result1, _var01 wz
21a28     01 00 06 51 |  if_ne	add	_var01, #1
21a2c     F4 FF 9F 5D |  if_ne	jmp	#LR__3290
21a30     0B 03 02 F6 | 	mov	_var02, arg03
21a34                 | LR__3291
21a34     0A 05 C2 FA | 	rdbyte	_var03, arg02
21a38     02 07 02 F6 | 	mov	_var04, _var03
21a3c     07 06 4E F7 | 	zerox	_var04, #7 wz
21a40     01 14 06 F1 | 	add	arg02, #1
21a44     18 00 90 AD |  if_e	jmp	#LR__3293
21a48     01 02 86 F1 | 	sub	_var02, #1
21a4c     00 02 56 F2 | 	cmps	_var02, #0 wc
21a50     00 07 02 36 |  if_ae	mov	_var04, _var01
21a54     01 00 06 31 |  if_ae	add	_var01, #1
21a58     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
21a5c     D4 FF 9F 3D |  if_ae	jmp	#LR__3291
21a60                 | LR__3292
21a60                 | LR__3293
21a60     00 01 48 FC | 	wrbyte	#0, _var01
21a64                 | LR__3294
21a64     09 FB 01 F6 | 	mov	result1, arg01
21a68                 | __system__strncat_ret
21a68     2D 00 64 FD | 	ret
21a6c                 | 
21a6c                 | __system__strncmp
21a6c     09 01 0A F6 | 	mov	_var01, arg01 wz
21a70     14 00 90 5D |  if_ne	jmp	#LR__3300
21a74     00 14 0E F2 | 	cmp	arg02, #0 wz
21a78     01 02 66 56 |  if_ne	neg	_var02, #1
21a7c     00 02 06 A6 |  if_e	mov	_var02, #0
21a80     01 FB 01 F6 | 	mov	result1, _var02
21a84     74 00 90 FD | 	jmp	#__system__strncmp_ret
21a88                 | LR__3300
21a88     00 14 0E F2 | 	cmp	arg02, #0 wz
21a8c     01 FA 05 A6 |  if_e	mov	result1, #1
21a90     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
21a94     0B 05 02 F6 | 	mov	_var03, arg03
21a98     97 16 48 FB | 	callpa	#(@LR__3302-@LR__3301)>>2,fcache_load_ptr_
21a9c                 | LR__3301
21a9c     00 07 C2 FA | 	rdbyte	_var04, _var01
21aa0     0A 09 02 F6 | 	mov	_var05, arg02
21aa4     04 0B C2 FA | 	rdbyte	_var06, _var05
21aa8     01 04 86 F1 | 	sub	_var03, #1
21aac     00 04 56 F2 | 	cmps	_var03, #0 wc
21ab0     01 00 06 F1 | 	add	_var01, #1
21ab4     01 14 06 F1 | 	add	arg02, #1
21ab8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
21abc     08 00 90 2D |  if_nc_and_z	jmp	#LR__3303
21ac0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
21ac4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3301
21ac8                 | LR__3302
21ac8                 | LR__3303
21ac8     00 04 56 F2 | 	cmps	_var03, #0 wc
21acc     00 FA 05 C6 |  if_b	mov	result1, #0
21ad0     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
21ad4     05 07 0A F2 | 	cmp	_var04, _var06 wz
21ad8     00 FA 05 A6 |  if_e	mov	result1, #0
21adc     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
21ae0     00 06 0E F2 | 	cmp	_var04, #0 wz
21ae4     01 FA 65 A6 |  if_e	neg	result1, #1
21ae8     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
21aec     00 0A 0E F2 | 	cmp	_var06, #0 wz
21af0     01 FA 05 A6 |  if_e	mov	result1, #1
21af4     03 FB 01 56 |  if_ne	mov	result1, _var04
21af8     05 FB 81 51 |  if_ne	sub	result1, _var06
21afc                 | __system__strncmp_ret
21afc     2D 00 64 FD | 	ret
21b00                 | 
21b00                 | __system____root_opendir
21b00     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21b04     04 12 06 F1 | 	add	arg01, #4
21b08     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
21b0c     00 FA 05 F6 | 	mov	result1, #0
21b10     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21b14                 | __system____root_opendir_ret
21b14     2D 00 64 FD | 	ret
21b18                 | 
21b18                 | __system____root_readdir
21b18     03 4A 05 F6 | 	mov	COUNT_, #3
21b1c     A8 00 A0 FD | 	call	#pushregs_
21b20     09 1F 02 F6 | 	mov	local01, arg01
21b24     0A 21 02 F6 | 	mov	local02, arg02
21b28     04 1E 06 F1 | 	add	local01, #4
21b2c     0F 23 02 FB | 	rdlong	local03, local01
21b30     04 1E 86 F1 | 	sub	local01, #4
21b34                 | LR__3310
21b34     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21b38     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
21b3c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21b40     01 FA 65 A6 |  if_e	neg	result1, #1
21b44     48 00 90 AD |  if_e	jmp	#LR__3311
21b48     11 17 0A FB | 	rdlong	arg03, local03 wz
21b4c     04 22 06 A1 |  if_e	add	local03, #4
21b50     E0 FF 9F AD |  if_e	jmp	#LR__3310
21b54     11 15 02 FB | 	rdlong	arg02, local03
21b58     01 14 06 F1 | 	add	arg02, #1
21b5c     10 13 02 F6 | 	mov	arg01, local02
21b60     40 16 06 F6 | 	mov	arg03, #64
21b64     58 FE BF FD | 	call	#__system__strncpy
21b68     50 20 06 F1 | 	add	local02, #80
21b6c     10 03 48 FC | 	wrbyte	#1, local02
21b70     08 20 86 F1 | 	sub	local02, #8
21b74     10 01 68 FC | 	wrlong	#0, local02
21b78     04 20 06 F1 | 	add	local02, #4
21b7c     10 01 68 FC | 	wrlong	#0, local02
21b80     04 22 06 F1 | 	add	local03, #4
21b84     04 1E 06 F1 | 	add	local01, #4
21b88     0F 23 62 FC | 	wrlong	local03, local01
21b8c     00 FA 05 F6 | 	mov	result1, #0
21b90                 | LR__3311
21b90     A7 F0 03 F6 | 	mov	ptra, fp
21b94     B2 00 A0 FD | 	call	#popregs_
21b98                 | __system____root_readdir_ret
21b98     2D 00 64 FD | 	ret
21b9c                 | 
21b9c                 | __system____root_closedir
21b9c     00 FA 05 F6 | 	mov	result1, #0
21ba0                 | __system____root_closedir_ret
21ba0     2D 00 64 FD | 	ret
21ba4                 | 
21ba4                 | __system____root_stat
21ba4     0A 01 02 F6 | 	mov	_var01, arg02
21ba8     00 13 02 F6 | 	mov	arg01, _var01
21bac     00 14 06 F6 | 	mov	arg02, #0
21bb0     30 16 06 F6 | 	mov	arg03, #48
21bb4     98 00 A0 FD | 	call	#\builtin_bytefill_
21bb8     08 00 06 F1 | 	add	_var01, #8
21bbc     08 00 80 FF 
21bc0     00 FF 6B FC | 	wrlong	##4607, _var01
21bc4     00 FA 05 F6 | 	mov	result1, #0
21bc8                 | __system____root_stat_ret
21bc8     2D 00 64 FD | 	ret
21bcc                 | 
21bcc                 | __system___normalizeName
21bcc     00 00 06 F6 | 	mov	_var01, #0
21bd0     09 03 02 F6 | 	mov	_var02, arg01
21bd4     01 05 02 F6 | 	mov	_var03, _var02
21bd8                 | LR__3320
21bd8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
21bdc     5C 01 90 AD |  if_e	jmp	#LR__3339
21be0     00 00 0E F2 | 	cmp	_var01, #0 wz
21be4     02 07 02 56 |  if_ne	mov	_var04, _var03
21be8     01 04 06 51 |  if_ne	add	_var03, #1
21bec     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
21bf0     00 00 06 56 |  if_ne	mov	_var01, #0
21bf4     01 07 C2 FA | 	rdbyte	_var04, _var02
21bf8     2E 06 0E F2 | 	cmp	_var04, #46 wz
21bfc     D8 00 90 5D |  if_ne	jmp	#LR__3332
21c00     01 02 06 F1 | 	add	_var02, #1
21c04     01 07 C2 FA | 	rdbyte	_var04, _var02
21c08     01 02 86 F1 | 	sub	_var02, #1
21c0c     2F 06 0E F2 | 	cmp	_var04, #47 wz
21c10     18 00 90 AD |  if_e	jmp	#LR__3321
21c14     01 02 06 F1 | 	add	_var02, #1
21c18     01 09 C2 FA | 	rdbyte	_var05, _var02
21c1c     01 02 86 F1 | 	sub	_var02, #1
21c20     04 0B 02 F6 | 	mov	_var06, _var05
21c24     07 0A 4E F7 | 	zerox	_var06, #7 wz
21c28     10 00 90 5D |  if_ne	jmp	#LR__3322
21c2c                 | LR__3321
21c2c     01 0D 02 F6 | 	mov	_var07, _var02
21c30     01 0C 06 F1 | 	add	_var07, #1
21c34     06 03 02 F6 | 	mov	_var02, _var07
21c38     E0 00 90 FD | 	jmp	#LR__3336
21c3c                 | LR__3322
21c3c     01 02 06 F1 | 	add	_var02, #1
21c40     01 0D C2 FA | 	rdbyte	_var07, _var02
21c44     01 02 86 F1 | 	sub	_var02, #1
21c48     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
21c4c     2E 06 0E F2 | 	cmp	_var04, #46 wz
21c50     84 00 90 5D |  if_ne	jmp	#LR__3331
21c54     02 02 06 F1 | 	add	_var02, #2
21c58     01 0D C2 FA | 	rdbyte	_var07, _var02
21c5c     02 02 86 F1 | 	sub	_var02, #2
21c60     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
21c64     2F 06 0E F2 | 	cmp	_var04, #47 wz
21c68     18 00 90 AD |  if_e	jmp	#LR__3323
21c6c     02 02 06 F1 | 	add	_var02, #2
21c70     01 09 C2 FA | 	rdbyte	_var05, _var02
21c74     02 02 86 F1 | 	sub	_var02, #2
21c78     04 0B 02 F6 | 	mov	_var06, _var05
21c7c     07 0A 4E F7 | 	zerox	_var06, #7 wz
21c80     54 00 90 5D |  if_ne	jmp	#LR__3330
21c84                 | LR__3323
21c84     02 02 06 F1 | 	add	_var02, #2
21c88     09 05 5A F2 | 	cmps	_var03, arg01 wcz
21c8c     40 00 90 ED |  if_be	jmp	#LR__3329
21c90     02 0F 02 F6 | 	mov	_var08, _var03
21c94     01 0E 86 F1 | 	sub	_var08, #1
21c98                 | LR__3324
21c98     07 07 C2 FA | 	rdbyte	_var04, _var08
21c9c     2F 06 0E F2 | 	cmp	_var04, #47 wz
21ca0     0C 00 90 5D |  if_ne	jmp	#LR__3325
21ca4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
21ca8     01 0E 86 11 |  if_a	sub	_var08, #1
21cac     E8 FF 9F 1D |  if_a	jmp	#LR__3324
21cb0                 | LR__3325
21cb0     97 0C 48 FB | 	callpa	#(@LR__3327-@LR__3326)>>2,fcache_load_ptr_
21cb4                 | LR__3326
21cb4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
21cb8     10 00 90 ED |  if_be	jmp	#LR__3328
21cbc     07 07 C2 FA | 	rdbyte	_var04, _var08
21cc0     2F 06 0E F2 | 	cmp	_var04, #47 wz
21cc4     01 0E 86 51 |  if_ne	sub	_var08, #1
21cc8     E8 FF 9F 5D |  if_ne	jmp	#LR__3326
21ccc                 | LR__3327
21ccc                 | LR__3328
21ccc     07 05 02 F6 | 	mov	_var03, _var08
21cd0                 | LR__3329
21cd0     01 00 06 F6 | 	mov	_var01, #1
21cd4     44 00 90 FD | 	jmp	#LR__3336
21cd8                 | LR__3330
21cd8                 | LR__3331
21cd8                 | LR__3332
21cd8     97 18 48 FB | 	callpa	#(@LR__3334-@LR__3333)>>2,fcache_load_ptr_
21cdc                 | LR__3333
21cdc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
21ce0     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
21ce4     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
21ce8     20 00 90 AD |  if_e	jmp	#LR__3335
21cec     01 0B 02 F6 | 	mov	_var06, _var02
21cf0     01 09 02 F6 | 	mov	_var05, _var02
21cf4     01 08 06 F1 | 	add	_var05, #1
21cf8     05 11 C2 FA | 	rdbyte	_var09, _var06
21cfc     04 03 02 F6 | 	mov	_var02, _var05
21d00     02 11 42 FC | 	wrbyte	_var09, _var03
21d04     01 04 06 F1 | 	add	_var03, #1
21d08     D0 FF 9F FD | 	jmp	#LR__3333
21d0c                 | LR__3334
21d0c                 | LR__3335
21d0c     01 07 C2 FA | 	rdbyte	_var04, _var02
21d10     2F 06 0E F2 | 	cmp	_var04, #47 wz
21d14     C0 FE 9F 5D |  if_ne	jmp	#LR__3320
21d18     01 00 06 F6 | 	mov	_var01, #1
21d1c                 | LR__3336
21d1c     97 0C 48 FB | 	callpa	#(@LR__3338-@LR__3337)>>2,fcache_load_ptr_
21d20                 | LR__3337
21d20     01 07 C2 FA | 	rdbyte	_var04, _var02
21d24     2F 06 0E F2 | 	cmp	_var04, #47 wz
21d28     01 0D 02 A6 |  if_e	mov	_var07, _var02
21d2c     01 0C 06 A1 |  if_e	add	_var07, #1
21d30     06 03 02 A6 |  if_e	mov	_var02, _var07
21d34     E8 FF 9F AD |  if_e	jmp	#LR__3337
21d38                 | LR__3338
21d38     9C FE 9F FD | 	jmp	#LR__3320
21d3c                 | LR__3339
21d3c     02 01 48 FC | 	wrbyte	#0, _var03
21d40                 | __system___normalizeName_ret
21d40     2D 00 64 FD | 	ret
21d44                 | 
21d44                 | __system___strrev
21d44     09 01 CA FA | 	rdbyte	_var01, arg01 wz
21d48     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
21d4c     09 03 02 F6 | 	mov	_var02, arg01
21d50     97 1A 48 FB | 	callpa	#(@LR__3342-@LR__3340)>>2,fcache_load_ptr_
21d54                 | LR__3340
21d54     01 01 CA FA | 	rdbyte	_var01, _var02 wz
21d58     01 02 06 51 |  if_ne	add	_var02, #1
21d5c     F4 FF 9F 5D |  if_ne	jmp	#LR__3340
21d60     01 02 86 F1 | 	sub	_var02, #1
21d64                 | LR__3341
21d64     09 03 5A F2 | 	cmps	_var02, arg01 wcz
21d68     1C 00 90 ED |  if_be	jmp	#LR__3343
21d6c     09 01 C2 FA | 	rdbyte	_var01, arg01
21d70     01 05 C2 FA | 	rdbyte	_var03, _var02
21d74     09 05 42 FC | 	wrbyte	_var03, arg01
21d78     01 01 42 FC | 	wrbyte	_var01, _var02
21d7c     01 12 06 F1 | 	add	arg01, #1
21d80     01 02 86 F1 | 	sub	_var02, #1
21d84     DC FF 9F FD | 	jmp	#LR__3341
21d88                 | LR__3342
21d88                 | LR__3343
21d88                 | __system___strrev_ret
21d88     2D 00 64 FD | 	ret
21d8c                 | 
21d8c                 | __system___fmtpad
21d8c     06 4A 05 F6 | 	mov	COUNT_, #6
21d90     A8 00 A0 FD | 	call	#pushregs_
21d94     09 1F 02 F6 | 	mov	local01, arg01
21d98     0A 21 02 F6 | 	mov	local02, arg02
21d9c     0B 23 02 F6 | 	mov	local03, arg03
21da0     10 13 EA F8 | 	getbyte	arg01, local02, #1
21da4     16 20 46 F0 | 	shr	local02, #22
21da8     03 20 0E F5 | 	and	local02, #3 wz
21dac     00 24 06 F6 | 	mov	local04, #0
21db0     01 20 06 A6 |  if_e	mov	local02, #1
21db4     0C 21 CA F7 | 	test	local02, arg04 wz
21db8     00 FA 05 A6 |  if_e	mov	result1, #0
21dbc     88 00 90 AD |  if_e	jmp	#LR__3353
21dc0     09 23 C2 F2 | 	subr	local03, arg01
21dc4     01 22 56 F2 | 	cmps	local03, #1 wc
21dc8     00 FA 05 C6 |  if_b	mov	result1, #0
21dcc     78 00 90 CD |  if_b	jmp	#LR__3353
21dd0     03 20 0E F2 | 	cmp	local02, #3 wz
21dd4     18 00 90 5D |  if_ne	jmp	#LR__3350
21dd8     01 18 0E F2 | 	cmp	arg04, #1 wz
21ddc     6E 20 62 FD | 	wrz	local02
21de0     10 23 02 F1 | 	add	local03, local02
21de4     11 23 52 F6 | 	abs	local03, local03 wc
21de8     01 22 46 F0 | 	shr	local03, #1
21dec     11 23 82 F6 | 	negc	local03, local03
21df0                 | LR__3350
21df0     01 22 56 F2 | 	cmps	local03, #1 wc
21df4     4C 00 90 CD |  if_b	jmp	#LR__3352
21df8     11 27 02 F6 | 	mov	local05, local03
21dfc                 | LR__3351
21dfc     0F 21 02 F6 | 	mov	local02, local01
21e00     0F 29 02 F6 | 	mov	local06, local01
21e04     13 20 46 F7 | 	zerox	local02, #19
21e08     14 28 46 F0 | 	shr	local06, #20
21e0c     02 28 66 F0 | 	shl	local06, #2
21e10     ED 28 02 F1 | 	add	local06, __methods__
21e14     14 29 02 FB | 	rdlong	local06, local06
21e18     20 12 06 F6 | 	mov	arg01, #32
21e1c     F2 22 02 F6 | 	mov	local03, objptr
21e20     10 E5 01 F6 | 	mov	objptr, local02
21e24     2D 28 62 FD | 	call	local06
21e28     11 E5 01 F6 | 	mov	objptr, local03
21e2c     FD 28 02 F6 | 	mov	local06, result1
21e30     00 28 56 F2 | 	cmps	local06, #0 wc
21e34     14 FB 01 C6 |  if_b	mov	result1, local06
21e38     0C 00 90 CD |  if_b	jmp	#LR__3353
21e3c     14 25 02 F1 | 	add	local04, local06
21e40     EE 27 6E FB | 	djnz	local05, #LR__3351
21e44                 | LR__3352
21e44     12 FB 01 F6 | 	mov	result1, local04
21e48                 | LR__3353
21e48     A7 F0 03 F6 | 	mov	ptra, fp
21e4c     B2 00 A0 FD | 	call	#popregs_
21e50                 | __system___fmtpad_ret
21e50     2D 00 64 FD | 	ret
21e54                 | 
21e54                 | __system___uitoa
21e54     04 4A 05 F6 | 	mov	COUNT_, #4
21e58     A8 00 A0 FD | 	call	#pushregs_
21e5c     09 1F 02 F6 | 	mov	local01, arg01
21e60     00 1A 4E F2 | 	cmps	arg05, #0 wz
21e64     0F 1B 02 F6 | 	mov	arg05, local01
21e68     00 20 06 F6 | 	mov	local02, #0
21e6c     37 22 06 56 |  if_ne	mov	local03, #55
21e70     57 22 06 A6 |  if_e	mov	local03, #87
21e74                 | LR__3360
21e74     0B 15 12 FD | 	qdiv	arg02, arg03
21e78     19 24 62 FD | 	getqy	local04
21e7c     0B 15 12 FD | 	qdiv	arg02, arg03
21e80     0A 24 16 F2 | 	cmp	local04, #10 wc
21e84     30 24 06 C1 |  if_b	add	local04, #48
21e88     11 25 02 31 |  if_ae	add	local04, local03
21e8c     0D 25 42 FC | 	wrbyte	local04, arg05
21e90     01 1A 06 F1 | 	add	arg05, #1
21e94     01 20 06 F1 | 	add	local02, #1
21e98     18 14 62 FD | 	getqx	arg02
21e9c     00 14 0E F2 | 	cmp	arg02, #0 wz
21ea0     D0 FF 9F 5D |  if_ne	jmp	#LR__3360
21ea4     0C 21 12 F2 | 	cmp	local02, arg04 wc
21ea8     C8 FF 9F CD |  if_b	jmp	#LR__3360
21eac     0D 01 48 FC | 	wrbyte	#0, arg05
21eb0     0F 13 02 F6 | 	mov	arg01, local01
21eb4     8C FE BF FD | 	call	#__system___strrev
21eb8     10 FB 01 F6 | 	mov	result1, local02
21ebc     A7 F0 03 F6 | 	mov	ptra, fp
21ec0     B2 00 A0 FD | 	call	#popregs_
21ec4                 | __system___uitoa_ret
21ec4     2D 00 64 FD | 	ret
21ec8                 | 
21ec8                 | __system__disassemble_0432
21ec8     10 4A 05 F6 | 	mov	COUNT_, #16
21ecc     A8 00 A0 FD | 	call	#pushregs_
21ed0     09 1F 02 F6 | 	mov	local01, arg01
21ed4     0A 21 02 F6 | 	mov	local02, arg02
21ed8     0B 23 02 F6 | 	mov	local03, arg03
21edc     0C 25 02 F6 | 	mov	local04, arg04
21ee0     0D 27 02 F6 | 	mov	local05, arg05
21ee4     13 13 52 F6 | 	abs	arg01, local05 wc
21ee8     1F 28 C6 C9 |  if_b	decod	local06, #31
21eec     00 28 06 36 |  if_ae	mov	local06, #0
21ef0     64 D0 BF FD | 	call	#__system___float_fromuns
21ef4     14 FB 61 F5 | 	xor	result1, local06
21ef8     FD 2A 02 F6 | 	mov	local07, result1
21efc     00 2C 06 F6 | 	mov	local08, #0
21f00     0F 13 02 F6 | 	mov	arg01, local01
21f04     00 14 06 F6 | 	mov	arg02, #0
21f08     01 16 06 F6 | 	mov	arg03, #1
21f0c     80 D8 BF FD | 	call	#__system___float_cmp
21f10     00 FA 0D F2 | 	cmp	result1, #0 wz
21f14     00 2E 06 A6 |  if_e	mov	local09, #0
21f18     10 01 68 AC |  if_e	wrlong	#0, local02
21f1c     11 2F 62 AC |  if_e	wrlong	local09, local03
21f20     8C 01 90 AD |  if_e	jmp	#LR__3382
21f24     0F 13 02 F6 | 	mov	arg01, local01
21f28     30 DD BF FD | 	call	#__system____builtin_ilogb
21f2c     FD 30 02 F6 | 	mov	local10, result1
21f30     0A 26 0E F2 | 	cmp	local05, #10 wz
21f34     24 00 90 5D |  if_ne	jmp	#LR__3370
21f38     18 2F 02 F6 | 	mov	local09, local10
21f3c     01 2E 66 F0 | 	shl	local09, #1
21f40     18 2F 02 F1 | 	add	local09, local10
21f44     17 31 52 F6 | 	abs	local10, local09 wc
21f48     0A 30 16 FD | 	qdiv	local10, #10
21f4c     09 32 06 F6 | 	mov	local11, #9
21f50     18 30 62 FD | 	getqx	local10
21f54     18 31 82 F6 | 	negc	local10, local10
21f58     04 00 90 FD | 	jmp	#LR__3371
21f5c                 | LR__3370
21f5c     18 32 06 F6 | 	mov	local11, #24
21f60                 | LR__3371
21f60                 | LR__3372
21f60     08 2C 56 F2 | 	cmps	local08, #8 wc
21f64     01 2C 06 F1 | 	add	local08, #1
21f68     60 00 90 3D |  if_ae	jmp	#LR__3373
21f6c     00 C0 1F FF 
21f70     00 12 06 F6 | 	mov	arg01, ##1065353216
21f74     15 15 02 F6 | 	mov	arg02, local07
21f78     18 17 02 F6 | 	mov	arg03, local10
21f7c     88 E3 BF FD | 	call	#__system___float_pow_n
21f80     FD 14 02 F6 | 	mov	arg02, result1
21f84     0F 13 02 F6 | 	mov	arg01, local01
21f88     D4 D5 BF FD | 	call	#__system___float_div
21f8c     FD 34 02 F6 | 	mov	local12, result1
21f90     1A 13 02 F6 | 	mov	arg01, local12
21f94     00 C0 1F FF 
21f98     00 14 06 F6 | 	mov	arg02, ##1065353216
21f9c     01 16 06 F6 | 	mov	arg03, #1
21fa0     EC D7 BF FD | 	call	#__system___float_cmp
21fa4     00 FA 55 F2 | 	cmps	result1, #0 wc
21fa8     01 30 86 C1 |  if_b	sub	local10, #1
21fac     B0 FF 9F CD |  if_b	jmp	#LR__3372
21fb0     15 15 02 F6 | 	mov	arg02, local07
21fb4     1A 13 02 F6 | 	mov	arg01, local12
21fb8     01 16 66 F6 | 	neg	arg03, #1
21fbc     D0 D7 BF FD | 	call	#__system___float_cmp
21fc0     00 FA 55 F2 | 	cmps	result1, #0 wc
21fc4     01 30 06 31 |  if_ae	add	local10, #1
21fc8     94 FF 9F 3D |  if_ae	jmp	#LR__3372
21fcc                 | LR__3373
21fcc     1A 13 02 F6 | 	mov	arg01, local12
21fd0     88 DC BF FD | 	call	#__system____builtin_ilogb
21fd4     FD 36 02 F6 | 	mov	local13, result1
21fd8     1A 39 02 F6 | 	mov	local14, local12
21fdc     17 39 06 F4 | 	bitl	local14, #279
21fe0     17 38 26 F4 | 	bith	local14, #23
21fe4     1B 39 62 F0 | 	shl	local14, local13
21fe8     02 26 0E F2 | 	cmp	local05, #2 wz
21fec     02 24 66 A0 |  if_e	shl	local04, #2
21ff0     00 3A 06 F6 | 	mov	local15, #0
21ff4     00 24 56 F2 | 	cmps	local04, #0 wc
21ff8     10 00 90 3D |  if_ae	jmp	#LR__3374
21ffc     18 25 C2 F2 | 	subr	local04, local10
22000     00 24 56 F2 | 	cmps	local04, #0 wc
22004     A0 00 90 CD |  if_b	jmp	#LR__3381
22008     04 00 90 FD | 	jmp	#LR__3375
2200c                 | LR__3374
2200c     01 24 06 F1 | 	add	local04, #1
22010                 | LR__3375
22010     19 25 7A F3 | 	fles	local04, local11 wcz
22014     01 3C 06 F6 | 	mov	local16, #1
22018     97 22 48 FB | 	callpa	#(@LR__3377-@LR__3376)>>2,fcache_load_ptr_
2201c                 | LR__3376
2201c     00 40 00 FF 
22020     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
22024     38 00 90 3D |  if_ae	jmp	#LR__3378
22028     01 24 56 F2 | 	cmps	local04, #1 wc
2202c     01 24 86 F1 | 	sub	local04, #1
22030     2C 00 90 CD |  if_b	jmp	#LR__3378
22034     13 3B 02 FD | 	qmul	local15, local05
22038     1C 37 02 F6 | 	mov	local13, local14
2203c     17 36 46 F0 | 	shr	local13, #23
22040     17 39 06 F4 | 	bitl	local14, #279
22044     18 3A 62 FD | 	getqx	local15
22048     13 3D 02 FD | 	qmul	local16, local05
2204c     18 3C 62 FD | 	getqx	local16
22050     13 39 02 FD | 	qmul	local14, local05
22054     1B 3B 02 F1 | 	add	local15, local13
22058     18 38 62 FD | 	getqx	local14
2205c     BC FF 9F FD | 	jmp	#LR__3376
22060                 | LR__3377
22060                 | LR__3378
22060     13 2F 02 F6 | 	mov	local09, local05
22064     17 2E 66 F0 | 	shl	local09, #23
22068     17 37 52 F6 | 	abs	local13, local09 wc
2206c     01 36 46 F0 | 	shr	local13, #1
22070     1B 37 82 F6 | 	negc	local13, local13
22074     1B 39 1A F2 | 	cmp	local14, local13 wcz
22078     20 00 90 1D |  if_a	jmp	#LR__3379
2207c     17 26 66 F0 | 	shl	local05, #23
22080     13 37 52 F6 | 	abs	local13, local05 wc
22084     01 36 46 F0 | 	shr	local13, #1
22088     1B 37 82 F6 | 	negc	local13, local13
2208c     1B 39 0A F2 | 	cmp	local14, local13 wz
22090     14 00 90 5D |  if_ne	jmp	#LR__3380
22094     01 3A CE F7 | 	test	local15, #1 wz
22098     0C 00 90 AD |  if_e	jmp	#LR__3380
2209c                 | LR__3379
2209c     01 3A 06 F1 | 	add	local15, #1
220a0     1E 3B 0A F2 | 	cmp	local15, local16 wz
220a4     01 30 06 A1 |  if_e	add	local10, #1
220a8                 | LR__3380
220a8                 | LR__3381
220a8     10 3B 62 FC | 	wrlong	local15, local02
220ac     11 31 62 FC | 	wrlong	local10, local03
220b0                 | LR__3382
220b0     A7 F0 03 F6 | 	mov	ptra, fp
220b4     B2 00 A0 FD | 	call	#popregs_
220b8                 | __system__disassemble_0432_ret
220b8     2D 00 64 FD | 	ret
220bc                 | 
220bc                 | __system__emitsign_0434
220bc     00 FA 05 F6 | 	mov	result1, #0
220c0     00 14 0E F2 | 	cmp	arg02, #0 wz
220c4     09 01 02 56 |  if_ne	mov	_var01, arg01
220c8     01 12 06 51 |  if_ne	add	arg01, #1
220cc     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
220d0     01 FA 05 56 |  if_ne	mov	result1, #1
220d4     00 16 0E F2 | 	cmp	arg03, #0 wz
220d8     09 61 48 5C |  if_ne	wrbyte	#48, arg01
220dc     01 12 06 51 |  if_ne	add	arg01, #1
220e0     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
220e4     02 FA 05 51 |  if_ne	add	result1, #2
220e8                 | __system__emitsign_0434_ret
220e8     2D 00 64 FD | 	ret
220ec                 | 
220ec                 | __system___gettxfunc
220ec     01 4A 05 F6 | 	mov	COUNT_, #1
220f0     A8 00 A0 FD | 	call	#pushregs_
220f4     A0 F8 BF FD | 	call	#__system____getftab
220f8     FD 1E 0A F6 | 	mov	local01, result1 wz
220fc     10 00 90 AD |  if_e	jmp	#LR__3390
22100     08 1E 06 F1 | 	add	local01, #8
22104     0F 15 0A FB | 	rdlong	arg02, local01 wz
22108     08 1E 86 F1 | 	sub	local01, #8
2210c     08 00 90 5D |  if_ne	jmp	#LR__3391
22110                 | LR__3390
22110     00 FA 05 F6 | 	mov	result1, #0
22114     0C 00 90 FD | 	jmp	#LR__3392
22118                 | LR__3391
22118     00 D8 03 FF 
2211c     00 1E 46 F5 | 	or	local01, ##128974848
22120     0F FB 01 F6 | 	mov	result1, local01
22124                 | LR__3392
22124     A7 F0 03 F6 | 	mov	ptra, fp
22128     B2 00 A0 FD | 	call	#popregs_
2212c                 | __system___gettxfunc_ret
2212c     2D 00 64 FD | 	ret
22130                 | 
22130                 | __system___getrxfunc
22130     01 4A 05 F6 | 	mov	COUNT_, #1
22134     A8 00 A0 FD | 	call	#pushregs_
22138     5C F8 BF FD | 	call	#__system____getftab
2213c     FD 1E 0A F6 | 	mov	local01, result1 wz
22140     10 00 90 AD |  if_e	jmp	#LR__3400
22144     08 1E 06 F1 | 	add	local01, #8
22148     0F 15 0A FB | 	rdlong	arg02, local01 wz
2214c     08 1E 86 F1 | 	sub	local01, #8
22150     08 00 90 5D |  if_ne	jmp	#LR__3401
22154                 | LR__3400
22154     00 FA 05 F6 | 	mov	result1, #0
22158     08 00 90 FD | 	jmp	#LR__3402
2215c                 | LR__3401
2215c     96 1E 26 F4 | 	bith	local01, #150
22160     0F FB 01 F6 | 	mov	result1, local01
22164                 | LR__3402
22164     A7 F0 03 F6 | 	mov	ptra, fp
22168     B2 00 A0 FD | 	call	#popregs_
2216c                 | __system___getrxfunc_ret
2216c     2D 00 64 FD | 	ret
22170                 | 
22170                 | __system___getiolock_0474
22170     01 4A 05 F6 | 	mov	COUNT_, #1
22174     A8 00 A0 FD | 	call	#pushregs_
22178     1C F8 BF FD | 	call	#__system____getftab
2217c     FD 1E 0A F6 | 	mov	local01, result1 wz
22180     10 00 90 AD |  if_e	jmp	#LR__3410
22184     08 1E 06 F1 | 	add	local01, #8
22188     0F FB 09 FB | 	rdlong	result1, local01 wz
2218c     08 1E 86 F1 | 	sub	local01, #8
22190     18 00 90 5D |  if_ne	jmp	#LR__3411
22194                 | LR__3410
22194     01 00 00 FF 
22198     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2219c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
221a0     01 00 00 FF 
221a4     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
221a8     08 00 90 FD | 	jmp	#LR__3412
221ac                 | LR__3411
221ac     0C 1E 06 F1 | 	add	local01, #12
221b0     0F FB 01 F6 | 	mov	result1, local01
221b4                 | LR__3412
221b4     A7 F0 03 F6 | 	mov	ptra, fp
221b8     B2 00 A0 FD | 	call	#popregs_
221bc                 | __system___getiolock_0474_ret
221bc     2D 00 64 FD | 	ret
221c0                 | 
221c0                 | __system____ScanForChar
221c0     09 01 02 F6 | 	mov	_var01, arg01
221c4     09 03 02 F6 | 	mov	_var02, arg01
221c8     97 06 48 FB | 	callpa	#(@LR__3421-@LR__3420)>>2,fcache_load_ptr_
221cc                 | LR__3420
221cc     01 FB C9 FA | 	rdbyte	result1, _var02 wz
221d0     01 02 06 51 |  if_ne	add	_var02, #1
221d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3420
221d8                 | LR__3421
221d8     09 03 82 F1 | 	sub	_var02, arg01
221dc     01 FB 01 F6 | 	mov	result1, _var02
221e0     FD 12 0A F6 | 	mov	arg01, result1 wz
221e4     00 FA 05 A6 |  if_e	mov	result1, #0
221e8     B8 00 90 AD |  if_e	jmp	#LR__3428
221ec     0A 05 02 F6 | 	mov	_var03, arg02
221f0     07 04 4E F7 | 	zerox	_var03, #7 wz
221f4     00 FA 05 A6 |  if_e	mov	result1, #0
221f8     A8 00 90 AD |  if_e	jmp	#LR__3428
221fc     01 16 16 F2 | 	cmp	arg03, #1 wc
22200     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
22204     01 16 06 86 |  if_c_and_z	mov	arg03, #1
22208     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2220c     94 00 90 4D |  if_c_and_nz	jmp	#LR__3428
22210     09 17 1A F2 | 	cmp	arg03, arg01 wcz
22214     10 00 90 ED |  if_be	jmp	#LR__3422
22218     00 18 0E F2 | 	cmp	arg04, #0 wz
2221c     00 FA 05 A6 |  if_e	mov	result1, #0
22220     80 00 90 AD |  if_e	jmp	#LR__3428
22224     09 17 02 F6 | 	mov	arg03, arg01
22228                 | LR__3422
22228     01 16 86 F1 | 	sub	arg03, #1
2222c     00 18 0E F2 | 	cmp	arg04, #0 wz
22230     38 00 90 5D |  if_ne	jmp	#LR__3424
22234     0B 07 02 F6 | 	mov	_var04, arg03
22238     09 09 02 F6 | 	mov	_var05, arg01
2223c                 | LR__3423
2223c     04 07 12 F2 | 	cmp	_var04, _var05 wc
22240     5C 00 90 3D |  if_ae	jmp	#LR__3427
22244     03 05 02 F6 | 	mov	_var03, _var04
22248     00 05 02 F1 | 	add	_var03, _var01
2224c     02 05 C2 FA | 	rdbyte	_var03, _var03
22250     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
22254     0C 05 0A F2 | 	cmp	_var03, arg04 wz
22258     01 06 06 A1 |  if_e	add	_var04, #1
2225c     03 FB 01 A6 |  if_e	mov	result1, _var04
22260     40 00 90 AD |  if_e	jmp	#LR__3428
22264     01 06 06 F1 | 	add	_var04, #1
22268     D0 FF 9F FD | 	jmp	#LR__3423
2226c                 | LR__3424
2226c     0B 07 02 F6 | 	mov	_var04, arg03
22270                 | LR__3425
22270     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
22274     28 00 90 1D |  if_a	jmp	#LR__3426
22278     03 09 02 F6 | 	mov	_var05, _var04
2227c     00 09 02 F1 | 	add	_var05, _var01
22280     04 05 C2 FA | 	rdbyte	_var03, _var05
22284     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
22288     04 05 0A F2 | 	cmp	_var03, _var05 wz
2228c     01 06 06 A1 |  if_e	add	_var04, #1
22290     03 FB 01 A6 |  if_e	mov	result1, _var04
22294     0C 00 90 AD |  if_e	jmp	#LR__3428
22298     01 06 86 F1 | 	sub	_var04, #1
2229c     D0 FF 9F FD | 	jmp	#LR__3425
222a0                 | LR__3426
222a0                 | LR__3427
222a0     00 FA 05 F6 | 	mov	result1, #0
222a4                 | LR__3428
222a4                 | __system____ScanForChar_ret
222a4     2D 00 64 FD | 	ret
222a8                 | 
222a8                 | __system___basic_dir
222a8     05 4A 05 F6 | 	mov	COUNT_, #5
222ac     A8 00 A0 FD | 	call	#pushregs_
222b0     4C F0 07 F1 | 	add	ptra, #76
222b4     04 4E 05 F1 | 	add	fp, #4
222b8     A7 12 62 FC | 	wrlong	arg01, fp
222bc     04 4E 05 F1 | 	add	fp, #4
222c0     A7 14 62 FC | 	wrlong	arg02, fp
222c4     04 4E 85 F1 | 	sub	fp, #4
222c8     A7 14 0A FB | 	rdlong	arg02, fp wz
222cc     04 4E 85 F1 | 	sub	fp, #4
222d0     04 4E 05 51 |  if_ne	add	fp, #4
222d4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
222d8     04 4E 85 51 |  if_ne	sub	fp, #4
222dc     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
222e0     70 00 90 AD |  if_e	jmp	#LR__3430
222e4     03 00 00 FF 
222e8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
222ec     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
222f0     03 00 00 FF 
222f4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
222f8     03 00 00 5F 
222fc     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
22300     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
22304     03 00 00 5F 
22308     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
2230c     18 EA BF 5D |  if_ne	call	#__system__closedir
22310     5E 01 00 FF 
22314     F8 13 06 F6 | 	mov	arg01, ##@LR__4588
22318     20 E9 BF FD | 	call	#__system__opendir
2231c     03 00 00 FF 
22320     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22324     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
22328     08 4E 05 F1 | 	add	fp, #8
2232c     A7 20 02 FB | 	rdlong	local02, fp
22330     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22334     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
22338     04 4E 85 F1 | 	sub	fp, #4
2233c     A7 20 02 FB | 	rdlong	local02, fp
22340     04 4E 85 F1 | 	sub	fp, #4
22344     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22348     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
2234c     03 00 00 FF 
22350     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
22354                 | LR__3430
22354     03 00 00 FF 
22358     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2235c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
22360     03 00 00 FF 
22364     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22368     5E 01 00 AF 
2236c     FA FB 05 A6 |  if_e	mov	result1, ##@LR__4589
22370     84 02 90 AD |  if_e	jmp	#LR__3443
22374                 | LR__3431
22374     03 00 00 FF 
22378     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2237c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
22380     03 00 00 FF 
22384     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22388     10 EA BF FD | 	call	#__system__readdir
2238c     0C 4E 05 F1 | 	add	fp, #12
22390     A7 FA 61 FC | 	wrlong	result1, fp
22394     0C 4E 85 F1 | 	sub	fp, #12
22398     00 FA 0D F2 | 	cmp	result1, #0 wz
2239c     38 00 90 5D |  if_ne	jmp	#LR__3432
223a0     03 00 00 FF 
223a4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
223a8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
223ac     03 00 00 FF 
223b0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
223b4     70 E9 BF FD | 	call	#__system__closedir
223b8     03 00 00 FF 
223bc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
223c0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
223c4     03 00 00 FF 
223c8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
223cc     5E 01 00 FF 
223d0     FC FB 05 F6 | 	mov	result1, ##@LR__4590
223d4     20 02 90 FD | 	jmp	#LR__3443
223d8                 | LR__3432
223d8     0C 4E 05 F1 | 	add	fp, #12
223dc     A7 12 02 FB | 	rdlong	arg01, fp
223e0     0C 4E 85 F1 | 	sub	fp, #12
223e4     03 00 00 FF 
223e8     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
223ec     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
223f0     03 00 00 FF 
223f4     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
223f8     48 07 B0 FD | 	call	#__system___pat_match
223fc     00 FA 0D F2 | 	cmp	result1, #0 wz
22400     70 FF 9F AD |  if_e	jmp	#LR__3431
22404     03 00 00 FF 
22408     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2240c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
22410     03 00 00 FF 
22414     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
22418     78 01 90 AD |  if_e	jmp	#LR__3439
2241c     0C 4E 05 F1 | 	add	fp, #12
22420     A7 12 02 FB | 	rdlong	arg01, fp
22424     04 4E 05 F1 | 	add	fp, #4
22428     A7 14 02 F6 | 	mov	arg02, fp
2242c     10 4E 85 F1 | 	sub	fp, #16
22430     6C F2 BF FD | 	call	#__system__stat
22434     40 4E 05 F1 | 	add	fp, #64
22438     A7 FA 61 FC | 	wrlong	result1, fp
2243c     40 4E 85 F1 | 	sub	fp, #64
22440     00 FA 0D F2 | 	cmp	result1, #0 wz
22444     5E 01 00 5F 
22448     FE FB 05 56 |  if_ne	mov	result1, ##@LR__4591
2244c     A8 01 90 5D |  if_ne	jmp	#LR__3443
22450     18 4E 05 F1 | 	add	fp, #24
22454     A7 20 02 FB | 	rdlong	local02, fp
22458     78 00 00 FF 
2245c     00 20 06 F5 | 	and	local02, ##61440
22460     2C 4E 05 F1 | 	add	fp, #44
22464     A7 20 62 FC | 	wrlong	local02, fp
22468     38 4E 85 F1 | 	sub	fp, #56
2246c     A7 20 02 FB | 	rdlong	local02, fp
22470     0C 4E 85 F1 | 	sub	fp, #12
22474     10 21 C2 FA | 	rdbyte	local02, local02
22478     2E 20 0E F2 | 	cmp	local02, #46 wz
2247c     08 4E 05 A1 |  if_e	add	fp, #8
22480     A7 04 68 AC |  if_e	wrlong	#2, fp
22484     08 4E C5 F3 | 	sumz	fp, #8
22488     A7 00 68 5C |  if_ne	wrlong	#0, fp
2248c     08 4E 85 51 |  if_ne	sub	fp, #8
22490     44 4E 05 F1 | 	add	fp, #68
22494     A7 20 02 FB | 	rdlong	local02, fp
22498     44 4E 85 F1 | 	sub	fp, #68
2249c     08 00 00 FF 
224a0     00 20 0E F2 | 	cmp	local02, ##4096 wz
224a4     18 00 90 5D |  if_ne	jmp	#LR__3433
224a8     08 4E 05 F1 | 	add	fp, #8
224ac     A7 20 02 FB | 	rdlong	local02, fp
224b0     10 20 46 F5 | 	or	local02, #16
224b4     A7 20 62 FC | 	wrlong	local02, fp
224b8     08 4E 85 F1 | 	sub	fp, #8
224bc     AC 00 90 FD | 	jmp	#LR__3438
224c0                 | LR__3433
224c0     44 4E 05 F1 | 	add	fp, #68
224c4     A7 20 02 FB | 	rdlong	local02, fp
224c8     44 4E 85 F1 | 	sub	fp, #68
224cc     10 00 00 FF 
224d0     00 20 0E F2 | 	cmp	local02, ##8192 wz
224d4     44 4E 05 51 |  if_ne	add	fp, #68
224d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
224dc     44 4E 85 51 |  if_ne	sub	fp, #68
224e0     18 00 00 5F 
224e4     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
224e8     44 4E 05 51 |  if_ne	add	fp, #68
224ec     0F 23 02 56 |  if_ne	mov	local03, local01
224f0     44 4E 85 51 |  if_ne	sub	fp, #68
224f4     20 00 00 5F 
224f8     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
224fc     18 00 90 5D |  if_ne	jmp	#LR__3434
22500     08 4E 05 F1 | 	add	fp, #8
22504     A7 20 02 FB | 	rdlong	local02, fp
22508     04 20 46 F5 | 	or	local02, #4
2250c     A7 20 62 FC | 	wrlong	local02, fp
22510     08 4E 85 F1 | 	sub	fp, #8
22514     54 00 90 FD | 	jmp	#LR__3437
22518                 | LR__3434
22518     18 4E 05 F1 | 	add	fp, #24
2251c     A7 20 02 FB | 	rdlong	local02, fp
22520     18 4E 85 F1 | 	sub	fp, #24
22524     92 20 CE F7 | 	test	local02, #146 wz
22528     18 00 90 5D |  if_ne	jmp	#LR__3435
2252c     08 4E 05 F1 | 	add	fp, #8
22530     A7 20 02 FB | 	rdlong	local02, fp
22534     01 20 46 F5 | 	or	local02, #1
22538     A7 20 62 FC | 	wrlong	local02, fp
2253c     08 4E 85 F1 | 	sub	fp, #8
22540     28 00 90 FD | 	jmp	#LR__3436
22544                 | LR__3435
22544     44 4E 05 F1 | 	add	fp, #68
22548     A7 24 02 FB | 	rdlong	local04, fp
2254c     44 4E 85 F1 | 	sub	fp, #68
22550     08 00 00 FF 
22554     00 24 0E F2 | 	cmp	local04, ##4096 wz
22558     08 4E 05 51 |  if_ne	add	fp, #8
2255c     A7 24 02 5B |  if_ne	rdlong	local04, fp
22560     20 24 46 55 |  if_ne	or	local04, #32
22564     A7 24 62 5C |  if_ne	wrlong	local04, fp
22568     08 4E 85 51 |  if_ne	sub	fp, #8
2256c                 | LR__3436
2256c                 | LR__3437
2256c                 | LR__3438
2256c     08 4E 05 F1 | 	add	fp, #8
22570     A7 24 02 FB | 	rdlong	local04, fp
22574     08 4E 85 F1 | 	sub	fp, #8
22578     03 00 00 FF 
2257c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
22580     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
22584     03 00 00 FF 
22588     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2258c     0F 25 CA F7 | 	test	local04, local01 wz
22590     E0 FD 9F AD |  if_e	jmp	#LR__3431
22594                 | LR__3439
22594     0C 4E 05 F1 | 	add	fp, #12
22598     A7 12 02 FB | 	rdlong	arg01, fp
2259c     0C 4E 85 F1 | 	sub	fp, #12
225a0     09 27 02 F6 | 	mov	local05, arg01
225a4     97 06 48 FB | 	callpa	#(@LR__3441-@LR__3440)>>2,fcache_load_ptr_
225a8                 | LR__3440
225a8     13 FB C9 FA | 	rdbyte	result1, local05 wz
225ac     01 26 06 51 |  if_ne	add	local05, #1
225b0     F4 FF 9F 5D |  if_ne	jmp	#LR__3440
225b4                 | LR__3441
225b4     13 13 C2 F2 | 	subr	arg01, local05
225b8     01 12 06 F1 | 	add	arg01, #1
225bc     68 E0 BF FD | 	call	#__system___gc_alloc_managed
225c0     48 4E 05 F1 | 	add	fp, #72
225c4     A7 FA 61 FC | 	wrlong	result1, fp
225c8     48 4E 85 F1 | 	sub	fp, #72
225cc     00 FA 0D F2 | 	cmp	result1, #0 wz
225d0     18 00 90 AD |  if_e	jmp	#LR__3442
225d4     48 4E 05 F1 | 	add	fp, #72
225d8     A7 12 02 FB | 	rdlong	arg01, fp
225dc     3C 4E 85 F1 | 	sub	fp, #60
225e0     A7 14 02 FB | 	rdlong	arg02, fp
225e4     0C 4E 85 F1 | 	sub	fp, #12
225e8     A8 A1 BF FD | 	call	#__system____builtin_strcpy
225ec                 | LR__3442
225ec     48 4E 05 F1 | 	add	fp, #72
225f0     A7 FA 01 FB | 	rdlong	result1, fp
225f4     48 4E 85 F1 | 	sub	fp, #72
225f8                 | LR__3443
225f8     A7 F0 03 F6 | 	mov	ptra, fp
225fc     B2 00 A0 FD | 	call	#popregs_
22600                 | __system___basic_dir_ret
22600     2D 00 64 FD | 	ret
22604                 | 
22604                 | __system__pack_0540
22604     09 01 02 F6 | 	mov	_var01, arg01
22608     7F 16 06 F1 | 	add	arg03, #127
2260c     04 18 CE F7 | 	test	arg04, #4 wz
22610     10 00 90 AD |  if_e	jmp	#LR__3450
22614     00 00 0E F2 | 	cmp	_var01, #0 wz
22618     16 00 C6 A9 |  if_e	decod	_var01, #22
2261c     F7 00 26 F4 | 	bith	_var01, #247
22620     B4 00 90 FD | 	jmp	#LR__3459
22624                 | LR__3450
22624     02 18 CE F7 | 	test	arg04, #2 wz
22628     00 C0 3F 5F 
2262c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
22630     00 14 06 56 |  if_ne	mov	arg02, #0
22634     A0 00 90 5D |  if_ne	jmp	#LR__3458
22638     08 18 CE F7 | 	test	arg04, #8 wz
2263c     00 00 06 56 |  if_ne	mov	_var01, #0
22640     94 00 90 5D |  if_ne	jmp	#LR__3457
22644     FF 16 56 F2 | 	cmps	arg03, #255 wc
22648     00 C0 3F 3F 
2264c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
22650     00 14 06 36 |  if_ae	mov	arg02, #0
22654     80 00 90 3D |  if_ae	jmp	#LR__3456
22658     01 16 56 F2 | 	cmps	arg03, #1 wc
2265c     6C 00 90 3D |  if_ae	jmp	#LR__3454
22660     01 14 46 F0 | 	shr	arg02, #1
22664     00 03 02 F6 | 	mov	_var02, _var01
22668     01 02 06 F5 | 	and	_var02, #1
2266c     1F 02 66 F0 | 	shl	_var02, #31
22670     01 15 42 F5 | 	or	arg02, _var02
22674     01 00 46 F0 | 	shr	_var01, #1
22678     97 1E 48 FB | 	callpa	#(@LR__3452-@LR__3451)>>2,fcache_load_ptr_
2267c                 | LR__3451
2267c     00 16 56 F2 | 	cmps	arg03, #0 wc
22680     34 00 90 3D |  if_ae	jmp	#LR__3453
22684     00 00 0E F2 | 	cmp	_var01, #0 wz
22688     2C 00 90 AD |  if_e	jmp	#LR__3453
2268c     0A 13 02 F6 | 	mov	arg01, arg02
22690     01 12 06 F5 | 	and	arg01, #1
22694     01 16 06 F1 | 	add	arg03, #1
22698     01 14 46 F0 | 	shr	arg02, #1
2269c     00 03 02 F6 | 	mov	_var02, _var01
226a0     01 02 06 F5 | 	and	_var02, #1
226a4     1F 02 66 F0 | 	shl	_var02, #31
226a8     01 15 42 F5 | 	or	arg02, _var02
226ac     09 15 42 F5 | 	or	arg02, arg01
226b0     01 00 46 F0 | 	shr	_var01, #1
226b4     C4 FF 9F FD | 	jmp	#LR__3451
226b8                 | LR__3452
226b8                 | LR__3453
226b8     00 16 56 F2 | 	cmps	arg03, #0 wc
226bc     18 00 90 3D |  if_ae	jmp	#LR__3455
226c0     00 14 0E F2 | 	cmp	arg02, #0 wz
226c4     6F 14 62 FD | 	wrnz	arg02
226c8     0C 00 90 FD | 	jmp	#LR__3455
226cc                 | LR__3454
226cc     17 01 06 F4 | 	bitl	_var01, #279
226d0     17 16 66 F0 | 	shl	arg03, #23
226d4     0B 01 42 F5 | 	or	_var01, arg03
226d8                 | LR__3455
226d8                 | LR__3456
226d8                 | LR__3457
226d8                 | LR__3458
226d8                 | LR__3459
226d8     01 00 CE F7 | 	test	_var01, #1 wz
226dc     01 14 46 55 |  if_ne	or	arg02, #1
226e0     0A 17 02 F6 | 	mov	arg03, arg02
226e4     00 02 06 F6 | 	mov	_var02, #0
226e8     FF FF 3F FF 
226ec     FF 15 06 F1 | 	add	arg02, ##2147483647
226f0     0B 15 12 F2 | 	cmp	arg02, arg03 wc
226f4     01 02 06 C6 |  if_b	mov	_var02, #1
226f8     01 01 02 F1 | 	add	_var01, _var02
226fc     01 18 CE F7 | 	test	arg04, #1 wz
22700     1F 00 26 54 |  if_ne	bith	_var01, #31
22704     00 FB 01 F6 | 	mov	result1, _var01
22708                 | __system__pack_0540_ret
22708     2D 00 64 FD | 	ret
2270c                 | 
2270c                 | __system___rxtxioctl_0630
2270c     00 15 0E F2 | 	cmp	arg02, #256 wz
22710     0C 00 90 AD |  if_e	jmp	#LR__3460
22714     01 15 0E F2 | 	cmp	arg02, #257 wz
22718     1C 00 90 AD |  if_e	jmp	#LR__3461
2271c     30 00 90 FD | 	jmp	#LR__3462
22720                 | LR__3460
22720     08 E6 05 F1 | 	add	ptr___system__dat__, #8
22724     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22728     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2272c     0B FB 61 FC | 	wrlong	result1, arg03
22730     00 FA 05 F6 | 	mov	result1, #0
22734     28 00 90 FD | 	jmp	#LR__3463
22738                 | LR__3461
22738     0B 13 02 FB | 	rdlong	arg01, arg03
2273c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
22740     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
22744     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
22748     00 FA 05 F6 | 	mov	result1, #0
2274c     10 00 90 FD | 	jmp	#LR__3463
22750                 | LR__3462
22750     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22754     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
22758     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2275c     01 FA 65 F6 | 	neg	result1, #1
22760                 | LR__3463
22760                 | __system___rxtxioctl_0630_ret
22760     2D 00 64 FD | 	ret
22764                 | 
22764                 | __system____dummy_flush_0631
22764     00 FA 05 F6 | 	mov	result1, #0
22768                 | __system____dummy_flush_0631_ret
22768     2D 00 64 FD | 	ret
2276c                 | 
2276c                 | __system___vfsread
2276c     03 4A 05 F6 | 	mov	COUNT_, #3
22770     A8 00 A0 FD | 	call	#pushregs_
22774     28 F0 07 F1 | 	add	ptra, #40
22778     04 4E 05 F1 | 	add	fp, #4
2277c     A7 12 62 FC | 	wrlong	arg01, fp
22780     04 4E 05 F1 | 	add	fp, #4
22784     A7 14 62 FC | 	wrlong	arg02, fp
22788     04 4E 05 F1 | 	add	fp, #4
2278c     A7 16 62 FC | 	wrlong	arg03, fp
22790     04 4E 85 F1 | 	sub	fp, #4
22794     A7 FA 01 FB | 	rdlong	result1, fp
22798     14 4E 05 F1 | 	add	fp, #20
2279c     A7 FA 61 FC | 	wrlong	result1, fp
227a0     04 4E 05 F1 | 	add	fp, #4
227a4     A7 00 68 FC | 	wrlong	#0, fp
227a8     1C 4E 85 F1 | 	sub	fp, #28
227ac     A7 12 02 FB | 	rdlong	arg01, fp
227b0     04 4E 85 F1 | 	sub	fp, #4
227b4     08 12 06 F1 | 	add	arg01, #8
227b8     09 FB 01 FB | 	rdlong	result1, arg01
227bc     01 FA CD F7 | 	test	result1, #1 wz
227c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
227c4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
227c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
227cc     01 FA 65 A6 |  if_e	neg	result1, #1
227d0     74 02 90 AD |  if_e	jmp	#LR__3476
227d4     04 4E 05 F1 | 	add	fp, #4
227d8     A7 12 02 FB | 	rdlong	arg01, fp
227dc     04 4E 85 F1 | 	sub	fp, #4
227e0     14 12 06 F1 | 	add	arg01, #20
227e4     09 FB 09 FB | 	rdlong	result1, arg01 wz
227e8     B8 00 90 AD |  if_e	jmp	#LR__3471
227ec     04 4E 05 F1 | 	add	fp, #4
227f0     A7 12 02 FB | 	rdlong	arg01, fp
227f4     09 17 02 F6 | 	mov	arg03, arg01
227f8     14 16 06 F1 | 	add	arg03, #20
227fc     0B 1F 02 FB | 	rdlong	local01, arg03
22800     0F 21 02 F6 | 	mov	local02, local01
22804     13 1E 46 F7 | 	zerox	local01, #19
22808     14 20 46 F0 | 	shr	local02, #20
2280c     02 20 66 F0 | 	shl	local02, #2
22810     ED 20 02 F1 | 	add	local02, __methods__
22814     10 21 02 FB | 	rdlong	local02, local02
22818     04 4E 05 F1 | 	add	fp, #4
2281c     A7 14 02 FB | 	rdlong	arg02, fp
22820     04 4E 05 F1 | 	add	fp, #4
22824     A7 16 02 FB | 	rdlong	arg03, fp
22828     0C 4E 85 F1 | 	sub	fp, #12
2282c     F2 22 02 F6 | 	mov	local03, objptr
22830     0F E5 01 F6 | 	mov	objptr, local01
22834     2D 20 62 FD | 	call	local02
22838     11 E5 01 F6 | 	mov	objptr, local03
2283c     10 4E 05 F1 | 	add	fp, #16
22840     A7 FA 61 FC | 	wrlong	result1, fp
22844     10 4E 85 F1 | 	sub	fp, #16
22848     00 FA 55 F2 | 	cmps	result1, #0 wc
2284c     44 00 90 3D |  if_ae	jmp	#LR__3470
22850     04 4E 05 F1 | 	add	fp, #4
22854     A7 22 02 FB | 	rdlong	local03, fp
22858     11 1F 02 F6 | 	mov	local01, local03
2285c     08 22 06 F1 | 	add	local03, #8
22860     11 21 02 FB | 	rdlong	local02, local03
22864     20 20 46 F5 | 	or	local02, #32
22868     08 1E 06 F1 | 	add	local01, #8
2286c     0F 21 62 FC | 	wrlong	local02, local01
22870     0C 4E 05 F1 | 	add	fp, #12
22874     A7 12 0A FB | 	rdlong	arg01, fp wz
22878     10 4E 85 F1 | 	sub	fp, #16
2287c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22880     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
22884     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22888     01 FA 65 56 |  if_ne	neg	result1, #1
2288c     00 FA 05 A6 |  if_e	mov	result1, #0
22890     B4 01 90 FD | 	jmp	#LR__3476
22894                 | LR__3470
22894     10 4E 05 F1 | 	add	fp, #16
22898     A7 FA 01 FB | 	rdlong	result1, fp
2289c     10 4E 85 F1 | 	sub	fp, #16
228a0     A4 01 90 FD | 	jmp	#LR__3476
228a4                 | LR__3471
228a4     04 4E 05 F1 | 	add	fp, #4
228a8     A7 12 02 FB | 	rdlong	arg01, fp
228ac     20 12 06 F1 | 	add	arg01, #32
228b0     09 13 0A FB | 	rdlong	arg01, arg01 wz
228b4     14 4E 05 F1 | 	add	fp, #20
228b8     A7 12 62 FC | 	wrlong	arg01, fp
228bc     18 4E 85 F1 | 	sub	fp, #24
228c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
228c4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
228c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
228cc     01 FA 65 A6 |  if_e	neg	result1, #1
228d0     74 01 90 AD |  if_e	jmp	#LR__3476
228d4     04 4E 05 F1 | 	add	fp, #4
228d8     A7 22 02 FB | 	rdlong	local03, fp
228dc     04 4E 85 F1 | 	sub	fp, #4
228e0     28 22 06 F1 | 	add	local03, #40
228e4     11 21 0A FB | 	rdlong	local02, local03 wz
228e8     7C 00 90 AD |  if_e	jmp	#LR__3473
228ec     04 4E 05 F1 | 	add	fp, #4
228f0     A7 12 02 FB | 	rdlong	arg01, fp
228f4     09 23 02 F6 | 	mov	local03, arg01
228f8     28 22 06 F1 | 	add	local03, #40
228fc     11 1F 02 FB | 	rdlong	local01, local03
22900     0F 21 02 F6 | 	mov	local02, local01
22904     13 1E 46 F7 | 	zerox	local01, #19
22908     14 20 46 F0 | 	shr	local02, #20
2290c     02 20 66 F0 | 	shl	local02, #2
22910     ED 20 02 F1 | 	add	local02, __methods__
22914     10 21 02 FB | 	rdlong	local02, local02
22918     20 4E 05 F1 | 	add	fp, #32
2291c     A7 16 02 F6 | 	mov	arg03, fp
22920     24 4E 85 F1 | 	sub	fp, #36
22924     00 15 06 F6 | 	mov	arg02, #256
22928     F2 22 02 F6 | 	mov	local03, objptr
2292c     0F E5 01 F6 | 	mov	objptr, local01
22930     2D 20 62 FD | 	call	local02
22934     11 E5 01 F6 | 	mov	objptr, local03
22938     10 4E 05 F1 | 	add	fp, #16
2293c     A7 FA 61 FC | 	wrlong	result1, fp
22940     00 FA 4D F2 | 	cmps	result1, #0 wz
22944     10 4E 85 F1 | 	sub	fp, #16
22948     1C 00 90 5D |  if_ne	jmp	#LR__3472
2294c     24 4E 05 F1 | 	add	fp, #36
22950     A7 20 02 FB | 	rdlong	local02, fp
22954     24 4E 85 F1 | 	sub	fp, #36
22958     02 20 CE F7 | 	test	local02, #2 wz
2295c     20 4E 05 51 |  if_ne	add	fp, #32
22960     A7 02 68 5C |  if_ne	wrlong	#1, fp
22964     20 4E 85 51 |  if_ne	sub	fp, #32
22968                 | LR__3472
22968                 | LR__3473
22968     10 4E 05 F1 | 	add	fp, #16
2296c     A7 00 68 FC | 	wrlong	#0, fp
22970     10 4E 85 F1 | 	sub	fp, #16
22974                 | LR__3474
22974     0C 4E 05 F1 | 	add	fp, #12
22978     A7 22 02 FB | 	rdlong	local03, fp
2297c     0C 4E 85 F1 | 	sub	fp, #12
22980     01 22 16 F2 | 	cmp	local03, #1 wc
22984     B4 00 90 CD |  if_b	jmp	#LR__3475
22988     18 4E 05 F1 | 	add	fp, #24
2298c     A7 20 02 FB | 	rdlong	local02, fp
22990     10 23 02 F6 | 	mov	local03, local02
22994     13 22 46 F7 | 	zerox	local03, #19
22998     14 20 46 F0 | 	shr	local02, #20
2299c     02 20 66 F0 | 	shl	local02, #2
229a0     ED 20 02 F1 | 	add	local02, __methods__
229a4     10 21 02 FB | 	rdlong	local02, local02
229a8     14 4E 85 F1 | 	sub	fp, #20
229ac     A7 12 02 FB | 	rdlong	arg01, fp
229b0     04 4E 85 F1 | 	sub	fp, #4
229b4     F2 1E 02 F6 | 	mov	local01, objptr
229b8     11 E5 01 F6 | 	mov	objptr, local03
229bc     2D 20 62 FD | 	call	local02
229c0     0F E5 01 F6 | 	mov	objptr, local01
229c4     14 4E 05 F1 | 	add	fp, #20
229c8     A7 FA 61 FC | 	wrlong	result1, fp
229cc     14 4E 85 F1 | 	sub	fp, #20
229d0     00 FA 55 F2 | 	cmps	result1, #0 wc
229d4     64 00 90 CD |  if_b	jmp	#LR__3475
229d8     1C 4E 05 F1 | 	add	fp, #28
229dc     A7 22 02 FB | 	rdlong	local03, fp
229e0     11 21 02 F6 | 	mov	local02, local03
229e4     01 20 06 F1 | 	add	local02, #1
229e8     A7 20 62 FC | 	wrlong	local02, fp
229ec     08 4E 85 F1 | 	sub	fp, #8
229f0     A7 20 02 FB | 	rdlong	local02, fp
229f4     11 21 42 FC | 	wrbyte	local02, local03
229f8     04 4E 85 F1 | 	sub	fp, #4
229fc     A7 22 02 FB | 	rdlong	local03, fp
22a00     01 22 06 F1 | 	add	local03, #1
22a04     A7 22 62 FC | 	wrlong	local03, fp
22a08     04 4E 85 F1 | 	sub	fp, #4
22a0c     A7 22 02 FB | 	rdlong	local03, fp
22a10     01 22 86 F1 | 	sub	local03, #1
22a14     A7 22 62 FC | 	wrlong	local03, fp
22a18     14 4E 05 F1 | 	add	fp, #20
22a1c     A7 22 0A FB | 	rdlong	local03, fp wz
22a20     20 4E 85 F1 | 	sub	fp, #32
22a24     4C FF 9F AD |  if_e	jmp	#LR__3474
22a28     14 4E 05 F1 | 	add	fp, #20
22a2c     A7 20 02 FB | 	rdlong	local02, fp
22a30     14 4E 85 F1 | 	sub	fp, #20
22a34     0A 20 0E F2 | 	cmp	local02, #10 wz
22a38     38 FF 9F 5D |  if_ne	jmp	#LR__3474
22a3c                 | LR__3475
22a3c     10 4E 05 F1 | 	add	fp, #16
22a40     A7 FA 01 FB | 	rdlong	result1, fp
22a44     10 4E 85 F1 | 	sub	fp, #16
22a48                 | LR__3476
22a48     A7 F0 03 F6 | 	mov	ptra, fp
22a4c     B2 00 A0 FD | 	call	#popregs_
22a50                 | __system___vfsread_ret
22a50     2D 00 64 FD | 	ret
22a54                 | 
22a54                 | __system____default_filbuf
22a54     04 4A 05 F6 | 	mov	COUNT_, #4
22a58     A8 00 A0 FD | 	call	#pushregs_
22a5c     09 1F 02 F6 | 	mov	local01, arg01
22a60     0F 21 02 FB | 	rdlong	local02, local01
22a64     0C 20 06 F1 | 	add	local02, #12
22a68     10 FB 09 FB | 	rdlong	result1, local02 wz
22a6c     0C 20 86 F1 | 	sub	local02, #12
22a70     20 00 90 5D |  if_ne	jmp	#LR__3480
22a74     14 20 06 F1 | 	add	local02, #20
22a78     10 FB 01 F6 | 	mov	result1, local02
22a7c     04 20 86 F1 | 	sub	local02, #4
22a80     10 FB 61 FC | 	wrlong	result1, local02
22a84     04 20 86 F1 | 	sub	local02, #4
22a88     02 00 80 FF 
22a8c     10 01 68 FC | 	wrlong	##1024, local02
22a90     0C 20 86 F1 | 	sub	local02, #12
22a94                 | LR__3480
22a94     14 1E 06 F1 | 	add	local01, #20
22a98     0F 23 02 FB | 	rdlong	local03, local01
22a9c     11 25 02 F6 | 	mov	local04, local03
22aa0     14 1E 86 F1 | 	sub	local01, #20
22aa4     13 24 46 F7 | 	zerox	local04, #19
22aa8     14 22 46 F0 | 	shr	local03, #20
22aac     02 22 66 F0 | 	shl	local03, #2
22ab0     ED 22 02 F1 | 	add	local03, __methods__
22ab4     11 23 02 FB | 	rdlong	local03, local03
22ab8     10 20 06 F1 | 	add	local02, #16
22abc     10 15 02 FB | 	rdlong	arg02, local02
22ac0     04 20 86 F1 | 	sub	local02, #4
22ac4     10 17 02 FB | 	rdlong	arg03, local02
22ac8     0C 20 86 F1 | 	sub	local02, #12
22acc     0F 13 02 F6 | 	mov	arg01, local01
22ad0     F2 1E 02 F6 | 	mov	local01, objptr
22ad4     12 E5 01 F6 | 	mov	objptr, local04
22ad8     2D 22 62 FD | 	call	local03
22adc     0F E5 01 F6 | 	mov	objptr, local01
22ae0     FD 24 02 F6 | 	mov	local04, result1
22ae4     00 24 56 F2 | 	cmps	local04, #0 wc
22ae8     01 FA 65 C6 |  if_b	neg	result1, #1
22aec     28 00 90 CD |  if_b	jmp	#LR__3481
22af0     10 25 62 FC | 	wrlong	local04, local02
22af4     10 20 06 F1 | 	add	local02, #16
22af8     10 23 02 FB | 	rdlong	local03, local02
22afc     0C 20 86 F1 | 	sub	local02, #12
22b00     10 23 62 FC | 	wrlong	local03, local02
22b04     04 20 06 F1 | 	add	local02, #4
22b08     10 23 02 FB | 	rdlong	local03, local02
22b0c     01 22 46 F5 | 	or	local03, #1
22b10     10 23 62 FC | 	wrlong	local03, local02
22b14     12 FB 01 F6 | 	mov	result1, local04
22b18                 | LR__3481
22b18     A7 F0 03 F6 | 	mov	ptra, fp
22b1c     B2 00 A0 FD | 	call	#popregs_
22b20                 | __system____default_filbuf_ret
22b20     2D 00 64 FD | 	ret
22b24                 | 
22b24                 | __system__getlower_1016
22b24     41 12 56 F2 | 	cmps	arg01, #65 wc
22b28     10 00 90 CD |  if_b	jmp	#LR__3490
22b2c     5B 12 56 F2 | 	cmps	arg01, #91 wc
22b30     09 FB 01 C6 |  if_b	mov	result1, arg01
22b34     20 FA 05 C1 |  if_b	add	result1, #32
22b38     04 00 90 CD |  if_b	jmp	#__system__getlower_1016_ret
22b3c                 | LR__3490
22b3c     09 FB 01 F6 | 	mov	result1, arg01
22b40                 | __system__getlower_1016_ret
22b40     2D 00 64 FD | 	ret
22b44                 | 
22b44                 | __system___pat_match
22b44     08 4A 05 F6 | 	mov	COUNT_, #8
22b48     A8 00 A0 FD | 	call	#pushregs_
22b4c     09 1F 02 F6 | 	mov	local01, arg01
22b50                 | LR__3500
22b50     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
22b54     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
22b58     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
22b5c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
22b60     2C 00 90 AD |  if_e	jmp	#LR__3501
22b64     0A 13 C2 FA | 	rdbyte	arg01, arg02
22b68     B8 FF BF FD | 	call	#__system__getlower_1016
22b6c     FD 22 02 F6 | 	mov	local03, result1
22b70     0F 13 C2 FA | 	rdbyte	arg01, local01
22b74     AC FF BF FD | 	call	#__system__getlower_1016
22b78     11 FB 09 F2 | 	cmp	result1, local03 wz
22b7c     00 FA 05 56 |  if_ne	mov	result1, #0
22b80     FC 00 90 5D |  if_ne	jmp	#LR__3509
22b84     01 1E 06 F1 | 	add	local01, #1
22b88     01 14 06 F1 | 	add	arg02, #1
22b8c     C0 FF 9F FD | 	jmp	#LR__3500
22b90                 | LR__3501
22b90     0A 23 C2 FA | 	rdbyte	local03, arg02
22b94     2A 22 0E F2 | 	cmp	local03, #42 wz
22b98     D4 00 90 5D |  if_ne	jmp	#LR__3508
22b9c     01 14 06 F1 | 	add	arg02, #1
22ba0     0A 21 C2 FA | 	rdbyte	local02, arg02
22ba4     01 14 86 F1 | 	sub	arg02, #1
22ba8     2E 20 0E F2 | 	cmp	local02, #46 wz
22bac     28 00 90 5D |  if_ne	jmp	#LR__3502
22bb0     02 14 06 F1 | 	add	arg02, #2
22bb4     0A 21 C2 FA | 	rdbyte	local02, arg02
22bb8     02 14 86 F1 | 	sub	arg02, #2
22bbc     2A 20 0E F2 | 	cmp	local02, #42 wz
22bc0     03 14 06 A1 |  if_e	add	arg02, #3
22bc4     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
22bc8     03 14 86 A1 |  if_e	sub	arg02, #3
22bcc     12 27 0A A6 |  if_e	mov	local05, local04 wz
22bd0     01 FA 05 A6 |  if_e	mov	result1, #1
22bd4     A8 00 90 AD |  if_e	jmp	#LR__3509
22bd8                 | LR__3502
22bd8     01 14 06 F1 | 	add	arg02, #1
22bdc     00 28 06 F6 | 	mov	local06, #0
22be0     97 1E 48 FB | 	callpa	#(@LR__3505-@LR__3503)>>2,fcache_load_ptr_
22be4                 | LR__3503
22be4     14 2B 02 F6 | 	mov	local07, local06
22be8     0A 2B 02 F1 | 	add	local07, arg02
22bec     15 2B CA FA | 	rdbyte	local07, local07 wz
22bf0     14 27 02 56 |  if_ne	mov	local05, local06
22bf4     01 26 06 51 |  if_ne	add	local05, #1
22bf8     13 29 02 56 |  if_ne	mov	local06, local05
22bfc     E4 FF 9F 5D |  if_ne	jmp	#LR__3503
22c00     00 2C 06 F6 | 	mov	local08, #0
22c04                 | LR__3504
22c04     16 2B 02 F6 | 	mov	local07, local08
22c08     0F 2B 02 F1 | 	add	local07, local01
22c0c     15 2B CA FA | 	rdbyte	local07, local07 wz
22c10     16 27 02 56 |  if_ne	mov	local05, local08
22c14     01 26 06 51 |  if_ne	add	local05, #1
22c18     13 2D 02 56 |  if_ne	mov	local08, local05
22c1c     E4 FF 9F 5D |  if_ne	jmp	#LR__3504
22c20                 | LR__3505
22c20     14 2D 52 F2 | 	cmps	local08, local06 wc
22c24     00 FA 05 C6 |  if_b	mov	result1, #0
22c28     54 00 90 CD |  if_b	jmp	#LR__3509
22c2c     16 21 02 F6 | 	mov	local02, local08
22c30     14 21 82 F1 | 	sub	local02, local06
22c34     10 1F 02 F1 | 	add	local01, local02
22c38                 | LR__3506
22c38     01 28 56 F2 | 	cmps	local06, #1 wc
22c3c     30 00 90 CD |  if_b	jmp	#LR__3507
22c40     0F 13 C2 FA | 	rdbyte	arg01, local01
22c44     DC FE BF FD | 	call	#__system__getlower_1016
22c48     FD 2C 02 F6 | 	mov	local08, result1
22c4c     0A 13 C2 FA | 	rdbyte	arg01, arg02
22c50     D0 FE BF FD | 	call	#__system__getlower_1016
22c54     FD 2C 0A F2 | 	cmp	local08, result1 wz
22c58     00 FA 05 56 |  if_ne	mov	result1, #0
22c5c     20 00 90 5D |  if_ne	jmp	#LR__3509
22c60     01 1E 06 F1 | 	add	local01, #1
22c64     01 14 06 F1 | 	add	arg02, #1
22c68     01 28 86 F1 | 	sub	local06, #1
22c6c     C8 FF 9F FD | 	jmp	#LR__3506
22c70                 | LR__3507
22c70                 | LR__3508
22c70     0A 2D CA FA | 	rdbyte	local08, arg02 wz
22c74     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
22c78     01 FA 05 A6 |  if_e	mov	result1, #1
22c7c     00 FA 05 56 |  if_ne	mov	result1, #0
22c80                 | LR__3509
22c80     A7 F0 03 F6 | 	mov	ptra, fp
22c84     B2 00 A0 FD | 	call	#popregs_
22c88                 | __system___pat_match_ret
22c88     2D 00 64 FD | 	ret
22c8c                 | 
22c8c                 | _fatfs_cc_ff_uni2oem
22c8c     00 00 06 F6 | 	mov	_var01, #0
22c90     80 12 16 F2 | 	cmp	arg01, #128 wc
22c94     09 01 02 C6 |  if_b	mov	_var01, arg01
22c98     58 00 90 CD |  if_b	jmp	#LR__3514
22c9c     80 00 00 FF 
22ca0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
22ca4     4C 00 90 3D |  if_ae	jmp	#LR__3513
22ca8     0A FB 31 F9 | 	getword	result1, arg02, #0
22cac     01 00 00 FF 
22cb0     52 FB 0D F2 | 	cmp	result1, ##850 wz
22cb4     3C 00 90 5D |  if_ne	jmp	#LR__3513
22cb8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
22cb8     00 00 06 F6 | 	mov	_var01, #0
22cbc     97 14 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
22cc0                 | LR__3510
22cc0     00 FB 31 F9 | 	getword	result1, _var01, #0
22cc4     80 FA 15 F2 | 	cmp	result1, #128 wc
22cc8     1C 00 90 3D |  if_ae	jmp	#LR__3512
22ccc     00 FB 31 F9 | 	getword	result1, _var01, #0
22cd0     01 FA 65 F0 | 	shl	result1, #1
22cd4     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
22cd8     FD FA E1 FA | 	rdword	result1, result1
22cdc     FD 12 0A F2 | 	cmp	arg01, result1 wz
22ce0     01 00 06 51 |  if_ne	add	_var01, #1
22ce4     D8 FF 9F 5D |  if_ne	jmp	#LR__3510
22ce8                 | LR__3511
22ce8                 | LR__3512
22ce8     00 01 32 F9 | 	getword	_var01, _var01, #0
22cec     80 00 06 F1 | 	add	_var01, #128
22cf0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
22cf4                 | LR__3513
22cf4                 | LR__3514
22cf4                 | ' 			c = (c + 0x80) & 0xFF;
22cf4                 | ' 		}
22cf4                 | ' 	}
22cf4                 | ' 
22cf4                 | ' 	return c;
22cf4     00 FB 01 F6 | 	mov	result1, _var01
22cf8                 | _fatfs_cc_ff_uni2oem_ret
22cf8     2D 00 64 FD | 	ret
22cfc                 | 
22cfc                 | _fatfs_cc_ff_oem2uni
22cfc     00 00 06 F6 | 	mov	_var01, #0
22d00     09 FB 31 F9 | 	getword	result1, arg01, #0
22d04     80 FA 15 F2 | 	cmp	result1, #128 wc
22d08     09 01 02 C6 |  if_b	mov	_var01, arg01
22d0c     2C 00 90 CD |  if_b	jmp	#LR__3521
22d10     0A 15 32 F9 | 	getword	arg02, arg02, #0
22d14     01 00 00 FF 
22d18     52 15 0E F2 | 	cmp	arg02, ##850 wz
22d1c     1C 00 90 5D |  if_ne	jmp	#LR__3520
22d20     09 FB 31 F9 | 	getword	result1, arg01, #0
22d24     00 FB 15 F2 | 	cmp	result1, #256 wc
22d28     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
22d2c     80 12 86 C1 |  if_b	sub	arg01, #128
22d30     01 12 66 C0 |  if_b	shl	arg01, #1
22d34     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
22d38     09 01 E2 CA |  if_b	rdword	_var01, arg01
22d3c                 | LR__3520
22d3c                 | LR__3521
22d3c                 | ' 		}
22d3c                 | ' 	}
22d3c                 | ' 
22d3c                 | ' 	return c;
22d3c     00 FB 01 F6 | 	mov	result1, _var01
22d40                 | _fatfs_cc_ff_oem2uni_ret
22d40     2D 00 64 FD | 	ret
22d44                 | 
22d44                 | _fatfs_cc_ff_wtoupper
22d44     09 01 02 F6 | 	mov	_var01, arg01
22d48     80 00 00 FF 
22d4c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
22d50     60 01 90 3D |  if_ae	jmp	#LR__3543
22d54     00 03 02 F6 | 	mov	_var02, _var01
22d58     01 01 32 F9 | 	getword	_var01, _var02, #0
22d5c     08 00 00 FF 
22d60     00 00 16 F2 | 	cmp	_var01, ##4096 wc
22d64     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
22d68     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
22d6c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
22d70     01 00 00 3F 
22d74     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
22d78     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
22d7c     01 00 00 3F 
22d80     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
22d84     02 07 02 F6 | 	mov	_var04, _var03
22d88                 | ' 		uc = (WORD)uni;
22d88                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
22d88                 | ' 		for (;;) {
22d88                 | LR__3530
22d88     03 09 E2 FA | 	rdword	_var05, _var04
22d8c     04 05 02 F6 | 	mov	_var03, _var05
22d90     0F 04 4E F7 | 	zerox	_var03, #15 wz
22d94     02 06 06 F1 | 	add	_var04, #2
22d98     14 01 90 AD |  if_e	jmp	#LR__3542
22d9c     01 05 32 F9 | 	getword	_var03, _var02, #0
22da0     04 01 32 F9 | 	getword	_var01, _var05, #0
22da4     00 05 12 F2 | 	cmp	_var03, _var01 wc
22da8     04 01 90 CD |  if_b	jmp	#LR__3542
22dac     03 0B E2 FA | 	rdword	_var06, _var04
22db0     05 0D 32 F9 | 	getword	_var07, _var06, #0
22db4     08 0C 46 F0 | 	shr	_var07, #8
22db8     05 0B 32 F9 | 	getword	_var06, _var06, #0
22dbc     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
22dc0     01 05 32 F9 | 	getword	_var03, _var02, #0
22dc4     04 0F 32 F9 | 	getword	_var08, _var05, #0
22dc8     05 01 32 F9 | 	getword	_var01, _var06, #0
22dcc     00 0F 02 F1 | 	add	_var08, _var01
22dd0     07 05 52 F2 | 	cmps	_var03, _var08 wc
22dd4     02 06 06 F1 | 	add	_var04, #2
22dd8     C4 00 90 3D |  if_ae	jmp	#LR__3541
22ddc                 | ' 				switch (cmd) {
22ddc     06 11 32 F9 | 	getword	_var09, _var07, #0
22de0     09 10 26 F3 | 	fle	_var09, #9
22de4     30 10 62 FD | 	jmprel	_var09
22de8                 | LR__3531
22de8     24 00 90 FD | 	jmp	#LR__3532
22dec     3C 00 90 FD | 	jmp	#LR__3533
22df0     54 00 90 FD | 	jmp	#LR__3534
22df4     5C 00 90 FD | 	jmp	#LR__3535
22df8     64 00 90 FD | 	jmp	#LR__3536
22dfc     6C 00 90 FD | 	jmp	#LR__3537
22e00     74 00 90 FD | 	jmp	#LR__3538
22e04     7C 00 90 FD | 	jmp	#LR__3539
22e08     84 00 90 FD | 	jmp	#LR__3540
22e0c     A0 00 90 FD | 	jmp	#LR__3542
22e10                 | LR__3532
22e10     01 03 32 F9 | 	getword	_var02, _var02, #0
22e14     04 09 32 F9 | 	getword	_var05, _var05, #0
22e18     04 03 82 F1 | 	sub	_var02, _var05
22e1c     01 02 66 F0 | 	shl	_var02, #1
22e20     03 03 02 F1 | 	add	_var02, _var04
22e24     01 03 E2 FA | 	rdword	_var02, _var02
22e28     84 00 90 FD | 	jmp	#LR__3542
22e2c                 | LR__3533
22e2c     01 05 32 F9 | 	getword	_var03, _var02, #0
22e30     01 03 32 F9 | 	getword	_var02, _var02, #0
22e34     04 09 32 F9 | 	getword	_var05, _var05, #0
22e38     04 03 82 F1 | 	sub	_var02, _var05
22e3c     01 02 06 F5 | 	and	_var02, #1
22e40     02 03 C2 F2 | 	subr	_var02, _var03
22e44     68 00 90 FD | 	jmp	#LR__3542
22e48                 | LR__3534
22e48     01 03 32 F9 | 	getword	_var02, _var02, #0
22e4c     10 02 86 F1 | 	sub	_var02, #16
22e50     5C 00 90 FD | 	jmp	#LR__3542
22e54                 | LR__3535
22e54     01 03 32 F9 | 	getword	_var02, _var02, #0
22e58     20 02 86 F1 | 	sub	_var02, #32
22e5c     50 00 90 FD | 	jmp	#LR__3542
22e60                 | LR__3536
22e60     01 03 32 F9 | 	getword	_var02, _var02, #0
22e64     30 02 86 F1 | 	sub	_var02, #48
22e68     44 00 90 FD | 	jmp	#LR__3542
22e6c                 | LR__3537
22e6c     01 03 32 F9 | 	getword	_var02, _var02, #0
22e70     1A 02 86 F1 | 	sub	_var02, #26
22e74     38 00 90 FD | 	jmp	#LR__3542
22e78                 | LR__3538
22e78     01 03 32 F9 | 	getword	_var02, _var02, #0
22e7c     08 02 06 F1 | 	add	_var02, #8
22e80     2C 00 90 FD | 	jmp	#LR__3542
22e84                 | LR__3539
22e84     01 03 32 F9 | 	getword	_var02, _var02, #0
22e88     50 02 86 F1 | 	sub	_var02, #80
22e8c     20 00 90 FD | 	jmp	#LR__3542
22e90                 | LR__3540
22e90     01 03 32 F9 | 	getword	_var02, _var02, #0
22e94     0E 00 00 FF 
22e98     60 02 86 F1 | 	sub	_var02, ##7264
22e9c                 | ' 				}
22e9c                 | ' 				break;
22e9c     10 00 90 FD | 	jmp	#LR__3542
22ea0                 | LR__3541
22ea0     0F 0C 4E F7 | 	zerox	_var07, #15 wz
22ea4     02 0A 06 AA |  if_e	mul	_var06, #2
22ea8     05 07 02 A1 |  if_e	add	_var04, _var06
22eac     D8 FE 9F FD | 	jmp	#LR__3530
22eb0                 | LR__3542
22eb0     01 01 32 F9 | 	getword	_var01, _var02, #0
22eb4                 | LR__3543
22eb4                 | ' 		}
22eb4                 | ' 		uni = uc;
22eb4                 | ' 	}
22eb4                 | ' 
22eb4                 | ' 	return uni;
22eb4     00 FB 01 F6 | 	mov	result1, _var01
22eb8                 | _fatfs_cc_ff_wtoupper_ret
22eb8     2D 00 64 FD | 	ret
22ebc                 | 
22ebc                 | _fatfs_cc_strncpy
22ebc     09 01 02 F6 | 	mov	_var01, arg01
22ec0     97 12 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
22ec4                 | ' 
22ec4                 | ' 	dscan = dst;
22ec4                 | ' 	sscan = src;
22ec4                 | ' 	count = n;
22ec4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
22ec4                 | LR__3550
22ec4     01 16 86 F1 | 	sub	arg03, #1
22ec8     00 16 56 F2 | 	cmps	arg03, #0 wc
22ecc     18 00 90 CD |  if_b	jmp	#LR__3552
22ed0     0A FB C1 FA | 	rdbyte	result1, arg02
22ed4     00 FB 41 FC | 	wrbyte	result1, _var01
22ed8     01 14 06 F1 | 	add	arg02, #1
22edc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
22ee0                 | ' 		continue;
22ee0     01 00 06 F1 | 	add	_var01, #1
22ee4     DC FF 9F 5D |  if_ne	jmp	#LR__3550
22ee8                 | LR__3551
22ee8                 | LR__3552
22ee8     97 0C 48 FB | 	callpa	#(@LR__3554-@LR__3553)>>2,fcache_load_ptr_
22eec                 | ' 	while (--count >= 0)
22eec                 | LR__3553
22eec     01 16 86 F1 | 	sub	arg03, #1
22ef0     00 16 56 F2 | 	cmps	arg03, #0 wc
22ef4     00 03 02 36 |  if_ae	mov	_var02, _var01
22ef8     01 00 06 31 |  if_ae	add	_var01, #1
22efc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
22f00     E8 FF 9F 3D |  if_ae	jmp	#LR__3553
22f04                 | LR__3554
22f04                 | ' 		*dscan++ = '\0';
22f04                 | ' 	return(dst);
22f04     09 FB 01 F6 | 	mov	result1, arg01
22f08                 | _fatfs_cc_strncpy_ret
22f08     2D 00 64 FD | 	ret
22f0c                 | 
22f0c                 | _fatfs_cc_memcmp
22f0c                 | ' 	for (n = size; n > 0; n--)
22f0c     00 16 0E F2 | 	cmp	arg03, #0 wz
22f10     28 00 90 AD |  if_e	jmp	#LR__3561
22f14                 | LR__3560
22f14     09 01 C2 FA | 	rdbyte	_var01, arg01
22f18     0A 03 C2 FA | 	rdbyte	_var02, arg02
22f1c     01 01 0A F2 | 	cmp	_var01, _var02 wz
22f20     01 12 06 A1 |  if_e	add	arg01, #1
22f24     01 14 06 A1 |  if_e	add	arg02, #1
22f28                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
22f28     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
22f2c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
22f30     01 FB 81 51 |  if_ne	sub	result1, _var02
22f34     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
22f38     F6 17 6E FB | 	djnz	arg03, #LR__3560
22f3c                 | LR__3561
22f3c                 | ' 
22f3c                 | ' 	return(0);
22f3c     00 FA 05 F6 | 	mov	result1, #0
22f40                 | _fatfs_cc_memcmp_ret
22f40     2D 00 64 FD | 	ret
22f44                 | 
22f44                 | _fatfs_cc_strncmp
22f44     09 01 0A F6 | 	mov	_var01, arg01 wz
22f48     14 00 90 5D |  if_ne	jmp	#LR__3570
22f4c                 | ' 		return scan2 ? -1 : 0;
22f4c     00 14 0E F2 | 	cmp	arg02, #0 wz
22f50     01 02 66 56 |  if_ne	neg	_var02, #1
22f54     00 02 06 A6 |  if_e	mov	_var02, #0
22f58     01 FB 01 F6 | 	mov	result1, _var02
22f5c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
22f60                 | LR__3570
22f60     00 14 0E F2 | 	cmp	arg02, #0 wz
22f64     01 FA 05 A6 |  if_e	mov	result1, #1
22f68     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22f6c     0B 05 02 F6 | 	mov	_var03, arg03
22f70     97 16 48 FB | 	callpa	#(@LR__3572-@LR__3571)>>2,fcache_load_ptr_
22f74                 | ' 	count = n;
22f74                 | ' 	do {
22f74                 | LR__3571
22f74     00 07 C2 FA | 	rdbyte	_var04, _var01
22f78     0A 09 02 F6 | 	mov	_var05, arg02
22f7c     04 0B C2 FA | 	rdbyte	_var06, _var05
22f80     01 04 86 F1 | 	sub	_var03, #1
22f84     00 04 56 F2 | 	cmps	_var03, #0 wc
22f88     01 00 06 F1 | 	add	_var01, #1
22f8c     01 14 06 F1 | 	add	arg02, #1
22f90     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
22f94     08 00 90 2D |  if_nc_and_z	jmp	#LR__3573
22f98     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
22f9c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3571
22fa0                 | LR__3572
22fa0                 | LR__3573
22fa0     00 04 56 F2 | 	cmps	_var03, #0 wc
22fa4                 | ' 		return(0);
22fa4     00 FA 05 C6 |  if_b	mov	result1, #0
22fa8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
22fac     05 07 0A F2 | 	cmp	_var04, _var06 wz
22fb0                 | ' 		return(0);
22fb0     00 FA 05 A6 |  if_e	mov	result1, #0
22fb4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22fb8     00 06 0E F2 | 	cmp	_var04, #0 wz
22fbc                 | ' 		return(-1);
22fbc     01 FA 65 A6 |  if_e	neg	result1, #1
22fc0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22fc4     00 0A 0E F2 | 	cmp	_var06, #0 wz
22fc8                 | ' 		return(1);
22fc8     01 FA 05 A6 |  if_e	mov	result1, #1
22fcc                 | ' 		return(c1 - c2);
22fcc     03 FB 01 56 |  if_ne	mov	result1, _var04
22fd0     05 FB 81 51 |  if_ne	sub	result1, _var06
22fd4                 | _fatfs_cc_strncmp_ret
22fd4     2D 00 64 FD | 	ret
22fd8                 | 
22fd8                 | _fatfs_cc_strchr
22fd8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
22fd8                 | ' 	while ((c = *s++) != (char) charwanted)
22fd8                 | LR__3580
22fd8     09 01 02 F6 | 	mov	_var01, arg01
22fdc     00 03 C2 FA | 	rdbyte	_var02, _var01
22fe0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
22fe4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
22fe8     03 05 0A F2 | 	cmp	_var03, _var04 wz
22fec     01 12 06 F1 | 	add	arg01, #1
22ff0     14 00 90 AD |  if_e	jmp	#LR__3581
22ff4     01 05 02 F6 | 	mov	_var03, _var02
22ff8     07 04 4E F7 | 	zerox	_var03, #7 wz
22ffc     00 FA 05 A6 |  if_e	mov	result1, #0
23000     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
23004     D0 FF 9F FD | 	jmp	#LR__3580
23008                 | LR__3581
23008                 | ' 	return((char *)--s);
23008     01 12 86 F1 | 	sub	arg01, #1
2300c     09 FB 01 F6 | 	mov	result1, arg01
23010                 | _fatfs_cc_strchr_ret
23010     2D 00 64 FD | 	ret
23014                 | 
23014                 | _fatfs_cc_disk_initialize
23014     04 4A 05 F6 | 	mov	COUNT_, #4
23018     A8 00 A0 FD | 	call	#pushregs_
2301c     40 F0 07 F1 | 	add	ptra, #64
23020     04 4E 05 F1 | 	add	fp, #4
23024     A7 12 42 FC | 	wrbyte	arg01, fp
23028     01 00 00 FF 
2302c     14 E4 05 F1 | 	add	objptr, ##532
23030     F2 18 02 FB | 	rdlong	arg04, objptr
23034     2C 4E 05 F1 | 	add	fp, #44
23038     A7 18 62 FC | 	wrlong	arg04, fp
2303c     04 E4 85 F1 | 	sub	objptr, #4
23040     F2 18 02 FB | 	rdlong	arg04, objptr
23044     04 4E 05 F1 | 	add	fp, #4
23048     A7 18 62 FC | 	wrlong	arg04, fp
2304c     08 E4 05 F1 | 	add	objptr, #8
23050     F2 18 02 FB | 	rdlong	arg04, objptr
23054     04 4E 05 F1 | 	add	fp, #4
23058     A7 18 62 FC | 	wrlong	arg04, fp
2305c     04 E4 05 F1 | 	add	objptr, #4
23060     F2 18 02 FB | 	rdlong	arg04, objptr
23064     04 4E 05 F1 | 	add	fp, #4
23068     A7 18 62 FC | 	wrlong	arg04, fp
2306c     04 E4 05 F1 | 	add	objptr, #4
23070     F2 02 48 FC | 	wrbyte	#1, objptr
23074     01 00 00 FF 
23078     20 E4 85 F1 | 	sub	objptr, ##544
2307c     38 4E 85 F1 | 	sub	fp, #56
23080     A7 18 CA FA | 	rdbyte	arg04, fp wz
23084     04 4E 85 F1 | 	sub	fp, #4
23088                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
23088                 | '             return RES_NOTRDY;
23088     03 FA 05 56 |  if_ne	mov	result1, #3
2308c     D8 05 90 5D |  if_ne	jmp	#LR__3608
23090     13 00 00 FF 
23094     10 13 06 F6 | 	mov	arg01, ##10000
23098     A4 9A BF FD | 	call	#__system___waitus
2309c     30 4E 05 F1 | 	add	fp, #48
230a0     A7 12 02 FB | 	rdlong	arg01, fp
230a4     09 01 08 FC | 	wrpin	#0, arg01
230a8     04 4E 05 F1 | 	add	fp, #4
230ac     A7 12 02 FB | 	rdlong	arg01, fp
230b0     09 01 08 FC | 	wrpin	#0, arg01
230b4     04 4E 05 F1 | 	add	fp, #4
230b8     A7 12 02 FB | 	rdlong	arg01, fp
230bc     09 01 08 FC | 	wrpin	#0, arg01
230c0     04 4E 05 F1 | 	add	fp, #4
230c4     A7 12 02 FB | 	rdlong	arg01, fp
230c8     09 00 80 FF 
230cc     09 01 08 FC | 	wrpin	##4608, arg01
230d0     0C 4E 85 F1 | 	sub	fp, #12
230d4     A7 12 02 FB | 	rdlong	arg01, fp
230d8     59 12 62 FD | 	drvh	arg01
230dc     04 4E 05 F1 | 	add	fp, #4
230e0     A7 12 02 FB | 	rdlong	arg01, fp
230e4     59 12 62 FD | 	drvh	arg01
230e8     04 4E 05 F1 | 	add	fp, #4
230ec     A7 12 02 FB | 	rdlong	arg01, fp
230f0     59 12 62 FD | 	drvh	arg01
230f4     04 4E 05 F1 | 	add	fp, #4
230f8     A7 12 02 FB | 	rdlong	arg01, fp
230fc     59 12 62 FD | 	drvh	arg01
23100     20 4E 85 F1 | 	sub	fp, #32
23104     00 04 80 FF 
23108     A7 20 68 FC | 	wrlong	##524304, fp
2310c     04 4E 05 F1 | 	add	fp, #4
23110     20 03 80 FF 
23114     A7 90 68 FC | 	wrlong	##409672, fp
23118     14 4E 05 F1 | 	add	fp, #20
2311c     A7 1E 02 FB | 	rdlong	local01, fp
23120     18 4E 85 F1 | 	sub	fp, #24
23124     A7 16 02 FB | 	rdlong	arg03, fp
23128     40 1E 62 FD | 	dirl	local01
2312c     A0 03 80 FF 
23130     0F 91 08 FC | 	wrpin	##475208, local01
23134     0F 17 12 FC | 	wxpin	arg03, local01
23138     0F 01 28 FC | 	wypin	#0, local01
2313c     41 1E 62 FD | 	dirh	local01
23140     1C 4E 05 F1 | 	add	fp, #28
23144     A7 20 02 FB | 	rdlong	local02, fp
23148     10 1F 82 F1 | 	sub	local01, local02
2314c     07 1E 06 F5 | 	and	local01, #7
23150     18 1E 66 F0 | 	shl	local01, #24
23154     78 14 06 F6 | 	mov	arg02, #120
23158     0F 15 42 F5 | 	or	arg02, local01
2315c     14 4E 85 F1 | 	sub	fp, #20
23160     A7 14 62 FC | 	wrlong	arg02, fp
23164     14 4E 05 F1 | 	add	fp, #20
23168     A7 12 02 FB | 	rdlong	arg01, fp
2316c     10 14 26 F4 | 	bith	arg02, #16
23170     40 12 62 FD | 	dirl	arg01
23174     09 15 02 FC | 	wrpin	arg02, arg01
23178     09 3F 18 FC | 	wxpin	#31, arg01
2317c     FF FF FF FF 
23180     09 FF 2B FC | 	wypin	##-1, arg01
23184     41 12 62 FD | 	dirh	arg01
23188     04 4E 85 F1 | 	sub	fp, #4
2318c     A7 14 02 FB | 	rdlong	arg02, fp
23190     08 4E 05 F1 | 	add	fp, #8
23194     A7 22 02 FB | 	rdlong	local03, fp
23198     11 15 82 F1 | 	sub	arg02, local03
2319c     07 14 06 F5 | 	and	arg02, #7
231a0     18 14 66 F0 | 	shl	arg02, #24
231a4     14 4E 85 F1 | 	sub	fp, #20
231a8     A7 14 62 FC | 	wrlong	arg02, fp
231ac     29 00 00 FF 
231b0     7A 14 46 F5 | 	or	arg02, ##21114
231b4     A7 14 62 FC | 	wrlong	arg02, fp
231b8     14 4E 05 F1 | 	add	fp, #20
231bc     A7 12 02 FB | 	rdlong	arg01, fp
231c0     40 12 62 FD | 	dirl	arg01
231c4     09 15 02 FC | 	wrpin	arg02, arg01
231c8     09 4F 18 FC | 	wxpin	#39, arg01
231cc     09 01 28 FC | 	wypin	#0, arg01
231d0     41 12 62 FD | 	dirh	arg01
231d4     28 4E 85 F1 | 	sub	fp, #40
231d8     A7 12 02 F6 | 	mov	arg01, fp
231dc     14 4E 85 F1 | 	sub	fp, #20
231e0     0A 14 06 F6 | 	mov	arg02, #10
231e4     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
231e8     00 12 06 F6 | 	mov	arg01, #0
231ec     00 14 06 F6 | 	mov	arg02, #0
231f0     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
231f4     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1060
231f8     64 12 06 F6 | 	mov	arg01, #100
231fc     40 99 BF FD | 	call	#__system___waitus
23200     14 4E 05 F1 | 	add	fp, #20
23204     A7 12 02 F6 | 	mov	arg01, fp
23208     14 4E 85 F1 | 	sub	fp, #20
2320c     0A 14 06 F6 | 	mov	arg02, #10
23210     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
23214     0C 4E 05 F1 | 	add	fp, #12
23218     A7 00 48 FC | 	wrbyte	#0, fp
2321c     0C 4E 85 F1 | 	sub	fp, #12
23220     00 12 06 F6 | 	mov	arg01, #0
23224     00 14 06 F6 | 	mov	arg02, #0
23228     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
2322c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
23230     01 18 0E F2 | 	cmp	arg04, #1 wz
23234     B8 03 90 5D |  if_ne	jmp	#LR__3607
23238     08 12 06 F6 | 	mov	arg01, #8
2323c     AA 15 06 F6 | 	mov	arg02, #426
23240     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23244     FD FA E1 F8 | 	getbyte	result1, result1, #0
23248     01 FA 0D F2 | 	cmp	result1, #1 wz
2324c     98 01 90 5D |  if_ne	jmp	#LR__3593
23250     14 4E 05 F1 | 	add	fp, #20
23254     A7 12 02 F6 | 	mov	arg01, fp
23258     14 4E 85 F1 | 	sub	fp, #20
2325c     04 14 06 F6 | 	mov	arg02, #4
23260     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
23264     16 4E 05 F1 | 	add	fp, #22
23268     A7 24 C2 FA | 	rdbyte	local04, fp
2326c     16 4E 85 F1 | 	sub	fp, #22
23270     01 24 0E F2 | 	cmp	local04, #1 wz
23274     17 4E 05 A1 |  if_e	add	fp, #23
23278     A7 22 C2 AA |  if_e	rdbyte	local03, fp
2327c     17 4E 85 A1 |  if_e	sub	fp, #23
23280     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
23284     68 03 90 5D |  if_ne	jmp	#LR__3606
23288                 | ' 				for (tmr = 1000; tmr; tmr--) {
23288     18 4E 05 F1 | 	add	fp, #24
2328c     01 00 80 FF 
23290     A7 D0 6B FC | 	wrlong	##1000, fp
23294     18 4E 85 F1 | 	sub	fp, #24
23298                 | LR__3590
23298     18 4E 05 F1 | 	add	fp, #24
2329c     A7 1E 0A FB | 	rdlong	local01, fp wz
232a0     18 4E 85 F1 | 	sub	fp, #24
232a4     3C 00 90 AD |  if_e	jmp	#LR__3591
232a8     A9 12 06 F6 | 	mov	arg01, #169
232ac     1E 14 C6 F9 | 	decod	arg02, #30
232b0     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
232b4     FD 24 02 F6 | 	mov	local04, result1
232b8     07 24 4E F7 | 	zerox	local04, #7 wz
232bc     24 00 90 AD |  if_e	jmp	#LR__3591
232c0     01 00 00 FF 
232c4     E8 13 06 F6 | 	mov	arg01, ##1000
232c8     74 98 BF FD | 	call	#__system___waitus
232cc     18 4E 05 F1 | 	add	fp, #24
232d0     A7 24 02 FB | 	rdlong	local04, fp
232d4     01 24 86 F1 | 	sub	local04, #1
232d8     A7 24 62 FC | 	wrlong	local04, fp
232dc     18 4E 85 F1 | 	sub	fp, #24
232e0     B4 FF 9F FD | 	jmp	#LR__3590
232e4                 | LR__3591
232e4     18 4E 05 F1 | 	add	fp, #24
232e8     A7 24 0A FB | 	rdlong	local04, fp wz
232ec     18 4E 85 F1 | 	sub	fp, #24
232f0     4C 00 90 AD |  if_e	jmp	#LR__3592
232f4     3A 12 06 F6 | 	mov	arg01, #58
232f8     00 14 06 F6 | 	mov	arg02, #0
232fc     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23300     FD 22 02 F6 | 	mov	local03, result1
23304     07 22 4E F7 | 	zerox	local03, #7 wz
23308     34 00 90 5D |  if_ne	jmp	#LR__3592
2330c     14 4E 05 F1 | 	add	fp, #20
23310     A7 12 02 F6 | 	mov	arg01, fp
23314     14 4E 85 F1 | 	sub	fp, #20
23318     04 14 06 F6 | 	mov	arg02, #4
2331c     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
23320     14 4E 05 F1 | 	add	fp, #20
23324     A7 1E C2 FA | 	rdbyte	local01, fp
23328     40 1E CE F7 | 	test	local01, #64 wz
2332c     0C 24 06 56 |  if_ne	mov	local04, #12
23330     04 24 06 A6 |  if_e	mov	local04, #4
23334     08 4E 85 F1 | 	sub	fp, #8
23338     A7 24 42 FC | 	wrbyte	local04, fp
2333c     0C 4E 85 F1 | 	sub	fp, #12
23340                 | LR__3592
23340     14 24 06 FB | 	rdlong	local04, #20
23344     18 4E 05 F1 | 	add	fp, #24
23348     A7 24 62 FC | 	wrlong	local04, fp
2334c     0C 4E 05 F1 | 	add	fp, #12
23350     A7 24 02 FB | 	rdlong	local04, fp
23354     1B 24 26 F4 | 	bith	local04, #27
23358     A7 24 62 FC | 	wrlong	local04, fp
2335c     0C 4E 85 F1 | 	sub	fp, #12
23360     A7 24 02 FB | 	rdlong	local04, fp
23364     18 4E 85 F1 | 	sub	fp, #24
23368     68 78 04 FF 
2336c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
23370     1C 4E 05 C1 |  if_b	add	fp, #28
23374     00 01 80 CF 
23378     A7 08 68 CC |  if_b	wrlong	##131076, fp
2337c     1C 4E 85 C1 |  if_b	sub	fp, #28
23380     6C 02 90 CD |  if_b	jmp	#LR__3606
23384     18 4E 05 F1 | 	add	fp, #24
23388     A7 24 02 FB | 	rdlong	local04, fp
2338c     18 4E 85 F1 | 	sub	fp, #24
23390     E1 F5 05 FF 
23394     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23398     1C 4E 05 C1 |  if_b	add	fp, #28
2339c     00 01 80 CF 
233a0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
233a4     1C 4E 85 C1 |  if_b	sub	fp, #28
233a8     44 02 90 CD |  if_b	jmp	#LR__3606
233ac     18 4E 05 F1 | 	add	fp, #24
233b0     A7 24 02 FB | 	rdlong	local04, fp
233b4     18 4E 85 F1 | 	sub	fp, #24
233b8     3B 58 08 FF 
233bc     01 24 16 F2 | 	cmp	local04, ##280000001 wc
233c0     1C 4E 05 C1 |  if_b	add	fp, #28
233c4     00 01 80 CF 
233c8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
233cc     1C 4E 85 C1 |  if_b	sub	fp, #28
233d0     1C 02 90 CD |  if_b	jmp	#LR__3606
233d4     1C 4E 05 F1 | 	add	fp, #28
233d8     80 01 80 FF 
233dc     A7 10 68 FC | 	wrlong	##196616, fp
233e0     1C 4E 85 F1 | 	sub	fp, #28
233e4     08 02 90 FD | 	jmp	#LR__3606
233e8                 | LR__3593
233e8     A9 12 06 F6 | 	mov	arg01, #169
233ec     00 14 06 F6 | 	mov	arg02, #0
233f0     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
233f4     FD 24 E2 F8 | 	getbyte	local04, result1, #0
233f8     02 24 16 F2 | 	cmp	local04, #2 wc
233fc     18 00 90 3D |  if_ae	jmp	#LR__3594
23400     0C 4E 05 F1 | 	add	fp, #12
23404     A7 04 48 FC | 	wrbyte	#2, fp
23408     04 4E 05 F1 | 	add	fp, #4
2340c     A7 52 49 FC | 	wrbyte	#169, fp
23410     10 4E 85 F1 | 	sub	fp, #16
23414     14 00 90 FD | 	jmp	#LR__3595
23418                 | LR__3594
23418     0C 4E 05 F1 | 	add	fp, #12
2341c     A7 02 48 FC | 	wrbyte	#1, fp
23420     04 4E 05 F1 | 	add	fp, #4
23424     A7 02 48 FC | 	wrbyte	#1, fp
23428     10 4E 85 F1 | 	sub	fp, #16
2342c                 | LR__3595
2342c                 | ' 				ty =  0x01 ; cmd =  (1) ;
2342c                 | ' 			}
2342c                 | ' 			for (tmr = 1000; tmr; tmr--) {
2342c     18 4E 05 F1 | 	add	fp, #24
23430     01 00 80 FF 
23434     A7 D0 6B FC | 	wrlong	##1000, fp
23438     18 4E 85 F1 | 	sub	fp, #24
2343c                 | LR__3596
2343c     18 4E 05 F1 | 	add	fp, #24
23440     A7 22 0A FB | 	rdlong	local03, fp wz
23444     18 4E 85 F1 | 	sub	fp, #24
23448     44 00 90 AD |  if_e	jmp	#LR__3597
2344c     10 4E 05 F1 | 	add	fp, #16
23450     A7 12 C2 FA | 	rdbyte	arg01, fp
23454     10 4E 85 F1 | 	sub	fp, #16
23458     00 14 06 F6 | 	mov	arg02, #0
2345c     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23460     FD 24 02 F6 | 	mov	local04, result1
23464     07 24 4E F7 | 	zerox	local04, #7 wz
23468     24 00 90 AD |  if_e	jmp	#LR__3597
2346c     01 00 00 FF 
23470     E8 13 06 F6 | 	mov	arg01, ##1000
23474     C8 96 BF FD | 	call	#__system___waitus
23478     18 4E 05 F1 | 	add	fp, #24
2347c     A7 24 02 FB | 	rdlong	local04, fp
23480     01 24 86 F1 | 	sub	local04, #1
23484     A7 24 62 FC | 	wrlong	local04, fp
23488     18 4E 85 F1 | 	sub	fp, #24
2348c     AC FF 9F FD | 	jmp	#LR__3596
23490                 | LR__3597
23490     18 4E 05 F1 | 	add	fp, #24
23494     A7 24 0A FB | 	rdlong	local04, fp wz
23498     18 4E 85 F1 | 	sub	fp, #24
2349c     14 00 90 AD |  if_e	jmp	#LR__3598
234a0     10 12 06 F6 | 	mov	arg01, #16
234a4     09 14 C6 F9 | 	decod	arg02, #9
234a8     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
234ac     07 FA 4D F7 | 	zerox	result1, #7 wz
234b0     0C 00 90 AD |  if_e	jmp	#LR__3599
234b4                 | LR__3598
234b4     0C 4E 05 F1 | 	add	fp, #12
234b8     A7 00 48 FC | 	wrbyte	#0, fp
234bc     0C 4E 85 F1 | 	sub	fp, #12
234c0                 | LR__3599
234c0     14 24 06 FB | 	rdlong	local04, #20
234c4     18 4E 05 F1 | 	add	fp, #24
234c8     A7 24 62 FC | 	wrlong	local04, fp
234cc     18 4E 85 F1 | 	sub	fp, #24
234d0     F0 FA 02 FF 
234d4     01 25 16 F2 | 	cmp	local04, ##100000001 wc
234d8     18 00 90 3D |  if_ae	jmp	#LR__3600
234dc     24 4E 05 F1 | 	add	fp, #36
234e0     A7 24 02 FB | 	rdlong	local04, fp
234e4     1B 24 26 F4 | 	bith	local04, #27
234e8     A7 24 62 FC | 	wrlong	local04, fp
234ec     24 4E 85 F1 | 	sub	fp, #36
234f0     2C 00 90 FD | 	jmp	#LR__3601
234f4                 | LR__3600
234f4     18 4E 05 F1 | 	add	fp, #24
234f8     A7 24 02 FB | 	rdlong	local04, fp
234fc     18 4E 85 F1 | 	sub	fp, #24
23500     E1 F5 05 FF 
23504     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23508     24 4E 05 C1 |  if_b	add	fp, #36
2350c     A7 24 02 CB |  if_b	rdlong	local04, fp
23510     80 00 04 CF 
23514     00 24 46 C5 |  if_b	or	local04, ##134283264
23518     A7 24 62 CC |  if_b	wrlong	local04, fp
2351c     24 4E 85 C1 |  if_b	sub	fp, #36
23520                 | LR__3601
23520     18 4E 05 F1 | 	add	fp, #24
23524     A7 24 02 FB | 	rdlong	local04, fp
23528     18 4E 85 F1 | 	sub	fp, #24
2352c     F0 FA 02 FF 
23530     01 25 16 F2 | 	cmp	local04, ##100000001 wc
23534     1C 4E 05 C1 |  if_b	add	fp, #28
23538     00 01 80 CF 
2353c     A7 08 68 CC |  if_b	wrlong	##131076, fp
23540     1C 4E 85 C1 |  if_b	sub	fp, #28
23544     A8 00 90 CD |  if_b	jmp	#LR__3605
23548     18 4E 05 F1 | 	add	fp, #24
2354c     A7 24 02 FB | 	rdlong	local04, fp
23550     18 4E 85 F1 | 	sub	fp, #24
23554     68 78 04 FF 
23558     81 25 16 F2 | 	cmp	local04, ##150000001 wc
2355c     1C 4E 05 C1 |  if_b	add	fp, #28
23560     80 01 80 CF 
23564     A7 0C 68 CC |  if_b	wrlong	##196614, fp
23568     1C 4E 85 C1 |  if_b	sub	fp, #28
2356c     80 00 90 CD |  if_b	jmp	#LR__3604
23570     18 4E 05 F1 | 	add	fp, #24
23574     A7 24 02 FB | 	rdlong	local04, fp
23578     18 4E 85 F1 | 	sub	fp, #24
2357c     E1 F5 05 FF 
23580     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23584     1C 4E 05 C1 |  if_b	add	fp, #28
23588     00 02 80 CF 
2358c     A7 10 68 CC |  if_b	wrlong	##262152, fp
23590     1C 4E 85 C1 |  if_b	sub	fp, #28
23594     58 00 90 CD |  if_b	jmp	#LR__3603
23598     18 4E 05 F1 | 	add	fp, #24
2359c     A7 24 02 FB | 	rdlong	local04, fp
235a0     18 4E 85 F1 | 	sub	fp, #24
235a4     59 73 07 FF 
235a8     81 24 16 F2 | 	cmp	local04, ##250000001 wc
235ac     1C 4E 05 C1 |  if_b	add	fp, #28
235b0     80 02 80 CF 
235b4     A7 14 68 CC |  if_b	wrlong	##327690, fp
235b8     1C 4E 85 C1 |  if_b	sub	fp, #28
235bc     30 00 90 CD |  if_b	jmp	#LR__3602
235c0     18 4E 05 F1 | 	add	fp, #24
235c4     A7 24 02 FB | 	rdlong	local04, fp
235c8     18 4E 85 F1 | 	sub	fp, #24
235cc     D1 F0 08 FF 
235d0     01 25 16 F2 | 	cmp	local04, ##300000001 wc
235d4     1C 4E 05 C1 |  if_b	add	fp, #28
235d8     00 03 80 CF 
235dc     A7 18 68 CC |  if_b	wrlong	##393228, fp
235e0     1C 4E 85 F3 | 	sumc	fp, #28
235e4     80 03 80 3F 
235e8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
235ec     1C 4E 85 31 |  if_ae	sub	fp, #28
235f0                 | LR__3602
235f0                 | LR__3603
235f0                 | LR__3604
235f0                 | LR__3605
235f0                 | LR__3606
235f0                 | LR__3607
235f0     0C 4E 05 F1 | 	add	fp, #12
235f4     A7 24 C2 FA | 	rdbyte	local04, fp
235f8     01 00 00 FF 
235fc     21 E4 05 F1 | 	add	objptr, ##545
23600     F2 24 42 FC | 	wrbyte	local04, objptr
23604     A7 1E CA FA | 	rdbyte	local01, fp wz
23608     00 24 06 56 |  if_ne	mov	local04, #0
2360c     01 24 06 A6 |  if_e	mov	local04, #1
23610     20 4E 05 F1 | 	add	fp, #32
23614     A7 24 42 FC | 	wrbyte	local04, fp
23618     A7 24 C2 FA | 	rdbyte	local04, fp
2361c     2C 4E 85 F1 | 	sub	fp, #44
23620     01 E4 85 F1 | 	sub	objptr, #1
23624     F2 24 42 FC | 	wrbyte	local04, objptr
23628     01 00 00 FF 
2362c     20 E4 85 F1 | 	sub	objptr, ##544
23630     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1060
23634     34 4E 05 F1 | 	add	fp, #52
23638     A7 12 02 FB | 	rdlong	arg01, fp
2363c     18 4E 85 F1 | 	sub	fp, #24
23640     A7 14 02 FB | 	rdlong	arg02, fp
23644     09 15 12 FC | 	wxpin	arg02, arg01
23648     1C 4E 05 F1 | 	add	fp, #28
2364c     A7 12 02 FB | 	rdlong	arg01, fp
23650     14 4E 85 F1 | 	sub	fp, #20
23654     A7 14 02 FB | 	rdlong	arg02, fp
23658     09 15 02 FC | 	wrpin	arg02, arg01
2365c                 | ' 
2365c                 | ' 		}
2365c                 | ' 	}
2365c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2365c                 | ' 	CardType = ty;
2365c                 | ' 	s = ty ? 0 :  0x01 ;
2365c                 | ' 	Stat = s;
2365c                 | ' 
2365c                 | ' 	deselect();
2365c                 | ' 
2365c                 | ' 
2365c                 | ' 	_wxpin( PIN_CLK, ck_div );
2365c                 | ' 	_wrpin( PIN_DI, spm_tx );
2365c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2365c                 | ' 	return s;
2365c     08 4E 05 F1 | 	add	fp, #8
23660     A7 FA C1 FA | 	rdbyte	result1, fp
23664     2C 4E 85 F1 | 	sub	fp, #44
23668                 | LR__3608
23668     A7 F0 03 F6 | 	mov	ptra, fp
2366c     B2 00 A0 FD | 	call	#popregs_
23670                 | _fatfs_cc_disk_initialize_ret
23670     2D 00 64 FD | 	ret
23674                 | 
23674                 | _fatfs_cc_disk_read
23674     05 4A 05 F6 | 	mov	COUNT_, #5
23678     A8 00 A0 FD | 	call	#pushregs_
2367c     0A 1F 02 F6 | 	mov	local01, arg02
23680     0B 21 02 F6 | 	mov	local02, arg03
23684     0C 23 02 F6 | 	mov	local03, arg04
23688     00 12 0E F2 | 	cmp	arg01, #0 wz
2368c     01 FA 05 56 |  if_ne	mov	result1, #1
23690                 | ' 
23690                 | ' 	return Stat;
23690     01 00 00 AF 
23694     20 E4 05 A1 |  if_e	add	objptr, ##544
23698     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2369c     01 00 00 AF 
236a0     20 E4 85 A1 |  if_e	sub	objptr, ##544
236a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
236a8     01 FA CD F7 | 	test	result1, #1 wz
236ac     03 FA 05 56 |  if_ne	mov	result1, #3
236b0     84 00 90 5D |  if_ne	jmp	#LR__3612
236b4     01 00 00 FF 
236b8     21 E4 05 F1 | 	add	objptr, ##545
236bc     F2 24 C2 FA | 	rdbyte	local04, objptr
236c0     01 00 00 FF 
236c4     21 E4 85 F1 | 	sub	objptr, ##545
236c8     08 24 CE F7 | 	test	local04, #8 wz
236cc     09 20 66 A0 |  if_e	shl	local02, #9
236d0     02 22 16 F2 | 	cmp	local03, #2 wc
236d4     12 24 06 36 |  if_ae	mov	local04, #18
236d8     11 24 06 C6 |  if_b	mov	local04, #17
236dc     10 15 02 F6 | 	mov	arg02, local02
236e0     12 13 02 F6 | 	mov	arg01, local04
236e4     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1074
236e8     FD 26 02 F6 | 	mov	local05, result1
236ec     07 26 4E F7 | 	zerox	local05, #7 wz
236f0     30 00 90 5D |  if_ne	jmp	#LR__3611
236f4                 | ' 		do {
236f4                 | LR__3610
236f4     0F 13 02 F6 | 	mov	arg01, local01
236f8     09 14 C6 F9 | 	decod	arg02, #9
236fc     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1068
23700     00 FA 0D F2 | 	cmp	result1, #0 wz
23704     01 00 00 5F 
23708     00 1E 06 51 |  if_ne	add	local01, ##512
2370c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3610
23710     12 25 E2 F8 | 	getbyte	local04, local04, #0
23714     12 24 0E F2 | 	cmp	local04, #18 wz
23718     0C 12 06 A6 |  if_e	mov	arg01, #12
2371c     00 14 06 A6 |  if_e	mov	arg02, #0
23720     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1074
23724                 | LR__3611
23724     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1060
23728                 | ' 	}
23728                 | ' 	deselect();
23728                 | ' 
23728                 | ' 	return count ? RES_ERROR : RES_OK;
23728     00 22 0E F2 | 	cmp	local03, #0 wz
2372c     01 26 06 56 |  if_ne	mov	local05, #1
23730     00 26 06 A6 |  if_e	mov	local05, #0
23734     13 FB 01 F6 | 	mov	result1, local05
23738                 | LR__3612
23738     A7 F0 03 F6 | 	mov	ptra, fp
2373c     B2 00 A0 FD | 	call	#popregs_
23740                 | _fatfs_cc_disk_read_ret
23740     2D 00 64 FD | 	ret
23744                 | 
23744                 | _fatfs_cc_disk_write
23744     04 4A 05 F6 | 	mov	COUNT_, #4
23748     A8 00 A0 FD | 	call	#pushregs_
2374c     0A 1F 02 F6 | 	mov	local01, arg02
23750     0C 21 02 F6 | 	mov	local02, arg04
23754     0B 23 02 F6 | 	mov	local03, arg03
23758     00 12 0E F2 | 	cmp	arg01, #0 wz
2375c     01 FA 05 56 |  if_ne	mov	result1, #1
23760                 | ' 
23760                 | ' 	return Stat;
23760     01 00 00 AF 
23764     20 E4 05 A1 |  if_e	add	objptr, ##544
23768     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2376c     01 00 00 AF 
23770     20 E4 85 A1 |  if_e	sub	objptr, ##544
23774     FD FA E1 F8 | 	getbyte	result1, result1, #0
23778     01 FA CD F7 | 	test	result1, #1 wz
2377c     03 FA 05 56 |  if_ne	mov	result1, #3
23780     D4 00 90 5D |  if_ne	jmp	#LR__3624
23784     01 00 00 FF 
23788     21 E4 05 F1 | 	add	objptr, ##545
2378c     F2 16 C2 FA | 	rdbyte	arg03, objptr
23790     01 00 00 FF 
23794     21 E4 85 F1 | 	sub	objptr, ##545
23798     08 16 CE F7 | 	test	arg03, #8 wz
2379c     09 22 66 A0 |  if_e	shl	local03, #9
237a0     01 20 0E F2 | 	cmp	local02, #1 wz
237a4     30 00 90 5D |  if_ne	jmp	#LR__3620
237a8     18 12 06 F6 | 	mov	arg01, #24
237ac     11 15 02 F6 | 	mov	arg02, local03
237b0     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1074
237b4     FD 24 02 F6 | 	mov	local04, result1
237b8     07 24 4E F7 | 	zerox	local04, #7 wz
237bc     84 00 90 5D |  if_ne	jmp	#LR__3623
237c0     0F 13 02 F6 | 	mov	arg01, local01
237c4     FE 14 06 F6 | 	mov	arg02, #254
237c8     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
237cc     00 FA 0D F2 | 	cmp	result1, #0 wz
237d0     00 20 06 56 |  if_ne	mov	local02, #0
237d4     6C 00 90 FD | 	jmp	#LR__3623
237d8                 | LR__3620
237d8     01 00 00 FF 
237dc     21 E4 05 F1 | 	add	objptr, ##545
237e0     F2 24 C2 FA | 	rdbyte	local04, objptr
237e4     01 00 00 FF 
237e8     21 E4 85 F1 | 	sub	objptr, ##545
237ec     06 24 CE F7 | 	test	local04, #6 wz
237f0     97 12 06 56 |  if_ne	mov	arg01, #151
237f4     10 15 02 56 |  if_ne	mov	arg02, local02
237f8     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1074
237fc     11 15 02 F6 | 	mov	arg02, local03
23800     19 12 06 F6 | 	mov	arg01, #25
23804     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23808     FD 24 02 F6 | 	mov	local04, result1
2380c     07 24 4E F7 | 	zerox	local04, #7 wz
23810     30 00 90 5D |  if_ne	jmp	#LR__3622
23814                 | ' 			do {
23814                 | LR__3621
23814     0F 13 02 F6 | 	mov	arg01, local01
23818     FC 14 06 F6 | 	mov	arg02, #252
2381c     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
23820     00 FA 0D F2 | 	cmp	result1, #0 wz
23824     01 00 00 5F 
23828     00 1E 06 51 |  if_ne	add	local01, ##512
2382c     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3621
23830     00 12 06 F6 | 	mov	arg01, #0
23834     FD 14 06 F6 | 	mov	arg02, #253
23838     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
2383c     00 FA 0D F2 | 	cmp	result1, #0 wz
23840     01 20 06 A6 |  if_e	mov	local02, #1
23844                 | LR__3622
23844                 | LR__3623
23844     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1060
23848                 | ' 				count = 1;
23848                 | ' 		}
23848                 | ' 	}
23848                 | ' 	deselect();
23848                 | ' 
23848                 | ' 	return count ? RES_ERROR : RES_OK;
23848     00 20 0E F2 | 	cmp	local02, #0 wz
2384c     01 24 06 56 |  if_ne	mov	local04, #1
23850     00 24 06 A6 |  if_e	mov	local04, #0
23854     12 FB 01 F6 | 	mov	result1, local04
23858                 | LR__3624
23858     A7 F0 03 F6 | 	mov	ptra, fp
2385c     B2 00 A0 FD | 	call	#popregs_
23860                 | _fatfs_cc_disk_write_ret
23860     2D 00 64 FD | 	ret
23864                 | 
23864                 | _fatfs_cc_disk_ioctl
23864     01 4A 05 F6 | 	mov	COUNT_, #1
23868     A8 00 A0 FD | 	call	#pushregs_
2386c     30 F0 07 F1 | 	add	ptra, #48
23870     04 4E 05 F1 | 	add	fp, #4
23874     A7 12 42 FC | 	wrbyte	arg01, fp
23878     04 4E 05 F1 | 	add	fp, #4
2387c     A7 14 42 FC | 	wrbyte	arg02, fp
23880     04 4E 05 F1 | 	add	fp, #4
23884     A7 16 62 FC | 	wrlong	arg03, fp
23888     08 4E 85 F1 | 	sub	fp, #8
2388c     A7 12 CA FA | 	rdbyte	arg01, fp wz
23890     04 4E 85 F1 | 	sub	fp, #4
23894     01 FA 05 56 |  if_ne	mov	result1, #1
23898                 | ' 
23898                 | ' 	return Stat;
23898     01 00 00 AF 
2389c     20 E4 05 A1 |  if_e	add	objptr, ##544
238a0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
238a4     01 00 00 AF 
238a8     20 E4 85 A1 |  if_e	sub	objptr, ##544
238ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
238b0     01 FA CD F7 | 	test	result1, #1 wz
238b4     03 FA 05 56 |  if_ne	mov	result1, #3
238b8     E4 01 90 5D |  if_ne	jmp	#LR__3638
238bc     10 4E 05 F1 | 	add	fp, #16
238c0     A7 02 68 FC | 	wrlong	#1, fp
238c4                 | ' 
238c4                 | ' 	res = RES_ERROR;
238c4                 | ' 	switch (ctrl) {
238c4     08 4E 85 F1 | 	sub	fp, #8
238c8     A7 1E C2 FA | 	rdbyte	local01, fp
238cc     08 4E 85 F1 | 	sub	fp, #8
238d0     04 1E 26 F3 | 	fle	local01, #4
238d4     30 1E 62 FD | 	jmprel	local01
238d8                 | LR__3630
238d8     10 00 90 FD | 	jmp	#LR__3631
238dc     24 00 90 FD | 	jmp	#LR__3632
238e0     A0 01 90 FD | 	jmp	#LR__3636
238e4     80 01 90 FD | 	jmp	#LR__3635
238e8     98 01 90 FD | 	jmp	#LR__3636
238ec                 | LR__3631
238ec     B4 79 B0 FD | 	call	#_fatfs_cc_select_1064
238f0     00 FA 0D F2 | 	cmp	result1, #0 wz
238f4     10 4E 05 51 |  if_ne	add	fp, #16
238f8     A7 00 68 5C |  if_ne	wrlong	#0, fp
238fc     10 4E 85 51 |  if_ne	sub	fp, #16
23900                 | ' 			break;
23900     8C 01 90 FD | 	jmp	#LR__3637
23904                 | LR__3632
23904     09 12 06 F6 | 	mov	arg01, #9
23908     00 14 06 F6 | 	mov	arg02, #0
2390c     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23910     FD 1E 02 F6 | 	mov	local01, result1
23914     07 1E 4E F7 | 	zerox	local01, #7 wz
23918     74 01 90 5D |  if_ne	jmp	#LR__3637
2391c     18 4E 05 F1 | 	add	fp, #24
23920     A7 12 02 F6 | 	mov	arg01, fp
23924     18 4E 85 F1 | 	sub	fp, #24
23928     10 14 06 F6 | 	mov	arg02, #16
2392c     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1068
23930     00 FA 0D F2 | 	cmp	result1, #0 wz
23934     58 01 90 AD |  if_e	jmp	#LR__3637
23938     18 4E 05 F1 | 	add	fp, #24
2393c     A7 1E C2 FA | 	rdbyte	local01, fp
23940     18 4E 85 F1 | 	sub	fp, #24
23944     06 1E 46 F0 | 	shr	local01, #6
23948     01 1E 0E F2 | 	cmp	local01, #1 wz
2394c     5C 00 90 5D |  if_ne	jmp	#LR__3633
23950     21 4E 05 F1 | 	add	fp, #33
23954     A7 1E C2 FA | 	rdbyte	local01, fp
23958     01 4E 85 F1 | 	sub	fp, #1
2395c     A7 FA C1 FA | 	rdbyte	result1, fp
23960     FD FA 31 F9 | 	getword	result1, result1, #0
23964     08 FA 65 F0 | 	shl	result1, #8
23968     FD 1E 02 F1 | 	add	local01, result1
2396c     01 4E 85 F1 | 	sub	fp, #1
23970     A7 FA C1 FA | 	rdbyte	result1, fp
23974     3F FA 05 F5 | 	and	result1, #63
23978     10 FA 65 F0 | 	shl	result1, #16
2397c     FD 1E 02 F1 | 	add	local01, result1
23980     01 1E 06 F1 | 	add	local01, #1
23984     09 4E 05 F1 | 	add	fp, #9
23988     A7 1E 62 FC | 	wrlong	local01, fp
2398c     1C 4E 85 F1 | 	sub	fp, #28
23990     A7 1E 02 FB | 	rdlong	local01, fp
23994     1C 4E 05 F1 | 	add	fp, #28
23998     A7 FA 01 FB | 	rdlong	result1, fp
2399c     28 4E 85 F1 | 	sub	fp, #40
239a0     0A FA 65 F0 | 	shl	result1, #10
239a4     0F FB 61 FC | 	wrlong	result1, local01
239a8     AC 00 90 FD | 	jmp	#LR__3634
239ac                 | LR__3633
239ac     1D 4E 05 F1 | 	add	fp, #29
239b0     A7 1E C2 FA | 	rdbyte	local01, fp
239b4     0F 1F 42 F8 | 	getnib	local01, local01, #0
239b8     05 4E 05 F1 | 	add	fp, #5
239bc     A7 FA C1 FA | 	rdbyte	result1, fp
239c0     80 FA 05 F5 | 	and	result1, #128
239c4     07 FA C5 F0 | 	sar	result1, #7
239c8     FD 1E 02 F1 | 	add	local01, result1
239cc     01 4E 85 F1 | 	sub	fp, #1
239d0     A7 FA C1 FA | 	rdbyte	result1, fp
239d4     03 FA 05 F5 | 	and	result1, #3
239d8     01 FA 65 F0 | 	shl	result1, #1
239dc     FD 1E 02 F1 | 	add	local01, result1
239e0     02 1E 06 F1 | 	add	local01, #2
239e4     0D 4E 85 F1 | 	sub	fp, #13
239e8     A7 1E 42 FC | 	wrbyte	local01, fp
239ec     0C 4E 05 F1 | 	add	fp, #12
239f0     A7 1E C2 FA | 	rdbyte	local01, fp
239f4     06 1E 46 F0 | 	shr	local01, #6
239f8     01 4E 85 F1 | 	sub	fp, #1
239fc     A7 FA C1 FA | 	rdbyte	result1, fp
23a00     FD FA 31 F9 | 	getword	result1, result1, #0
23a04     02 FA 65 F0 | 	shl	result1, #2
23a08     FD 1E 02 F1 | 	add	local01, result1
23a0c     01 4E 85 F1 | 	sub	fp, #1
23a10     A7 FA C1 FA | 	rdbyte	result1, fp
23a14     03 FA 05 F5 | 	and	result1, #3
23a18     FD FA 31 F9 | 	getword	result1, result1, #0
23a1c     0A FA 65 F0 | 	shl	result1, #10
23a20     FD 1E 02 F1 | 	add	local01, result1
23a24     01 1E 06 F1 | 	add	local01, #1
23a28     0A 4E 05 F1 | 	add	fp, #10
23a2c     A7 1E 62 FC | 	wrlong	local01, fp
23a30     1C 4E 85 F1 | 	sub	fp, #28
23a34     A7 1E 02 FB | 	rdlong	local01, fp
23a38     1C 4E 05 F1 | 	add	fp, #28
23a3c     A7 FA 01 FB | 	rdlong	result1, fp
23a40     14 4E 85 F1 | 	sub	fp, #20
23a44     A7 16 C2 FA | 	rdbyte	arg03, fp
23a48     14 4E 85 F1 | 	sub	fp, #20
23a4c     09 16 86 F1 | 	sub	arg03, #9
23a50     0B FB 61 F0 | 	shl	result1, arg03
23a54     0F FB 61 FC | 	wrlong	result1, local01
23a58                 | LR__3634
23a58     10 4E 05 F1 | 	add	fp, #16
23a5c     A7 00 68 FC | 	wrlong	#0, fp
23a60     10 4E 85 F1 | 	sub	fp, #16
23a64                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
23a64                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
23a64                 | ' 					*(LBA_t*)buff = cs << (n - 9);
23a64                 | ' 				}
23a64                 | ' 				res = RES_OK;
23a64                 | ' 			}
23a64                 | ' 			break;
23a64     28 00 90 FD | 	jmp	#LR__3637
23a68                 | LR__3635
23a68     0C 4E 05 F1 | 	add	fp, #12
23a6c     A7 1E 02 FB | 	rdlong	local01, fp
23a70     0F 01 69 FC | 	wrlong	#128, local01
23a74     04 4E 05 F1 | 	add	fp, #4
23a78     A7 00 68 FC | 	wrlong	#0, fp
23a7c     10 4E 85 F1 | 	sub	fp, #16
23a80                 | ' 			*(DWORD*)buff = 128;
23a80                 | ' 			res = RES_OK;
23a80                 | ' 			break;
23a80     0C 00 90 FD | 	jmp	#LR__3637
23a84                 | LR__3636
23a84     10 4E 05 F1 | 	add	fp, #16
23a88     A7 08 68 FC | 	wrlong	#4, fp
23a8c     10 4E 85 F1 | 	sub	fp, #16
23a90                 | LR__3637
23a90     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1060
23a94                 | ' 			res = RES_PARERR;
23a94                 | ' 	}
23a94                 | ' 
23a94                 | ' 	deselect();
23a94                 | ' 
23a94                 | ' 	return res;
23a94     10 4E 05 F1 | 	add	fp, #16
23a98     A7 FA 01 FB | 	rdlong	result1, fp
23a9c     10 4E 85 F1 | 	sub	fp, #16
23aa0                 | LR__3638
23aa0     A7 F0 03 F6 | 	mov	ptra, fp
23aa4     B2 00 A0 FD | 	call	#popregs_
23aa8                 | _fatfs_cc_disk_ioctl_ret
23aa8     2D 00 64 FD | 	ret
23aac                 | 
23aac                 | _fatfs_cc_disk_setpins
23aac     00 12 0E F2 | 	cmp	arg01, #0 wz
23ab0     01 FA 65 56 |  if_ne	neg	result1, #1
23ab4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
23ab8     01 00 00 FF 
23abc     10 E4 05 F1 | 	add	objptr, ##528
23ac0     F2 14 62 FC | 	wrlong	arg02, objptr
23ac4     04 E4 05 F1 | 	add	objptr, #4
23ac8     F2 16 62 FC | 	wrlong	arg03, objptr
23acc     04 E4 05 F1 | 	add	objptr, #4
23ad0     F2 18 62 FC | 	wrlong	arg04, objptr
23ad4     04 E4 05 F1 | 	add	objptr, #4
23ad8     F2 1A 62 FC | 	wrlong	arg05, objptr
23adc     01 00 00 FF 
23ae0     1C E4 85 F1 | 	sub	objptr, ##540
23ae4     00 FA 05 F6 | 	mov	result1, #0
23ae8                 | _fatfs_cc_disk_setpins_ret
23ae8     2D 00 64 FD | 	ret
23aec                 | 
23aec                 | _fatfs_cc_tchar2uni
23aec     09 01 02 FB | 	rdlong	_var01, arg01
23af0     00 03 02 F6 | 	mov	_var02, _var01
23af4     01 00 06 F1 | 	add	_var01, #1
23af8     00 05 02 F6 | 	mov	_var03, _var01
23afc     01 07 C2 FA | 	rdbyte	_var04, _var02
23b00     80 06 CE F7 | 	test	_var04, #128 wz
23b04     E8 00 90 AD |  if_e	jmp	#LR__3647
23b08     03 09 02 F6 | 	mov	_var05, _var04
23b0c     E0 08 06 F5 | 	and	_var05, #224
23b10     C0 08 0E F2 | 	cmp	_var05, #192 wz
23b14     1F 06 06 A5 |  if_e	and	_var04, #31
23b18     01 0A 06 A6 |  if_e	mov	_var06, #1
23b1c     34 00 90 AD |  if_e	jmp	#LR__3641
23b20     03 09 02 F6 | 	mov	_var05, _var04
23b24     F0 08 06 F5 | 	and	_var05, #240
23b28     E0 08 0E F2 | 	cmp	_var05, #224 wz
23b2c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
23b30     02 0A 06 A6 |  if_e	mov	_var06, #2
23b34     1C 00 90 AD |  if_e	jmp	#LR__3640
23b38     03 09 02 F6 | 	mov	_var05, _var04
23b3c     F8 08 06 F5 | 	and	_var05, #248
23b40     F0 08 0E F2 | 	cmp	_var05, #240 wz
23b44     07 06 06 A5 |  if_e	and	_var04, #7
23b48     03 0A 06 A6 |  if_e	mov	_var06, #3
23b4c                 | ' 			return 0xFFFFFFFF;
23b4c     01 FA 65 56 |  if_ne	neg	result1, #1
23b50     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
23b54                 | LR__3640
23b54                 | LR__3641
23b54                 | ' 		}
23b54                 | ' 		do {
23b54                 | LR__3642
23b54     02 0D C2 FA | 	rdbyte	_var07, _var03
23b58     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
23b5c     C0 08 06 F5 | 	and	_var05, #192
23b60     80 08 0E F2 | 	cmp	_var05, #128 wz
23b64     01 04 06 F1 | 	add	_var03, #1
23b68     01 FA 65 56 |  if_ne	neg	result1, #1
23b6c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
23b70     06 06 66 F0 | 	shl	_var04, #6
23b74     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
23b78     3F 02 06 F5 | 	and	_var02, #63
23b7c     01 07 42 F5 | 	or	_var04, _var02
23b80     F4 0B 6E FB | 	djnz	_var06, #LR__3642
23b84     80 06 16 F2 | 	cmp	_var04, #128 wc
23b88     24 00 90 CD |  if_b	jmp	#LR__3644
23b8c     6C 00 00 FF 
23b90     00 06 16 F2 | 	cmp	_var04, ##55296 wc
23b94     0C 00 90 CD |  if_b	jmp	#LR__3643
23b98     70 00 00 FF 
23b9c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
23ba0     0C 00 90 CD |  if_b	jmp	#LR__3644
23ba4                 | LR__3643
23ba4     80 08 00 FF 
23ba8     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
23bac     08 00 90 CD |  if_b	jmp	#LR__3645
23bb0                 | LR__3644
23bb0     01 FA 65 F6 | 	neg	result1, #1
23bb4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
23bb8                 | LR__3645
23bb8     80 00 00 FF 
23bbc     00 06 16 F2 | 	cmp	_var04, ##65536 wc
23bc0     2C 00 90 CD |  if_b	jmp	#LR__3646
23bc4     03 03 02 F6 | 	mov	_var02, _var04
23bc8     80 00 00 FF 
23bcc     00 02 86 F1 | 	sub	_var02, ##65536
23bd0     06 02 66 F0 | 	shl	_var02, #6
23bd4     80 FF 01 FF 
23bd8     00 02 06 F5 | 	and	_var02, ##67043328
23bdc     6E 00 6C FF 
23be0     00 08 06 F6 | 	mov	_var05, ##-671032320
23be4     01 09 42 F5 | 	or	_var05, _var02
23be8     09 06 46 F7 | 	zerox	_var04, #9
23bec     04 07 42 F5 | 	or	_var04, _var05
23bf0                 | LR__3646
23bf0                 | LR__3647
23bf0     09 05 62 FC | 	wrlong	_var03, arg01
23bf4                 | ' 	}
23bf4                 | ' #line 811 "ff.c"
23bf4                 | ' 	*str = p;
23bf4                 | ' 	return uc;
23bf4     03 FB 01 F6 | 	mov	result1, _var04
23bf8                 | _fatfs_cc_tchar2uni_ret
23bf8     2D 00 64 FD | 	ret
23bfc                 | 
23bfc                 | _fatfs_cc_put_utf
23bfc     80 12 16 F2 | 	cmp	arg01, #128 wc
23c00     18 00 90 3D |  if_ae	jmp	#LR__3650
23c04     01 16 16 F2 | 	cmp	arg03, #1 wc
23c08     00 FA 05 C6 |  if_b	mov	result1, #0
23c0c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
23c10     0A 13 42 FC | 	wrbyte	arg01, arg02
23c14                 | ' 		*buf = (TCHAR)chr;
23c14                 | ' 		return 1;
23c14     01 FA 05 F6 | 	mov	result1, #1
23c18     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23c1c                 | LR__3650
23c1c     04 00 00 FF 
23c20     00 12 16 F2 | 	cmp	arg01, ##2048 wc
23c24     40 00 90 3D |  if_ae	jmp	#LR__3651
23c28     02 16 16 F2 | 	cmp	arg03, #2 wc
23c2c     00 FA 05 C6 |  if_b	mov	result1, #0
23c30     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
23c34     09 FB 01 F6 | 	mov	result1, arg01
23c38     06 FA 45 F0 | 	shr	result1, #6
23c3c     1F FA 05 F5 | 	and	result1, #31
23c40     C0 16 06 F6 | 	mov	arg03, #192
23c44     FD 16 42 F5 | 	or	arg03, result1
23c48     0A 17 42 FC | 	wrbyte	arg03, arg02
23c4c     01 14 06 F1 | 	add	arg02, #1
23c50     3F 12 06 F5 | 	and	arg01, #63
23c54     80 FA 05 F6 | 	mov	result1, #128
23c58     09 FB 41 F5 | 	or	result1, arg01
23c5c     0A FB 41 FC | 	wrbyte	result1, arg02
23c60                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
23c60                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
23c60                 | ' 		return 2;
23c60     02 FA 05 F6 | 	mov	result1, #2
23c64     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23c68                 | LR__3651
23c68     80 00 00 FF 
23c6c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
23c70     70 00 90 3D |  if_ae	jmp	#LR__3654
23c74     03 16 16 F2 | 	cmp	arg03, #3 wc
23c78     18 00 90 CD |  if_b	jmp	#LR__3652
23c7c     6C 00 00 FF 
23c80     00 12 16 F2 | 	cmp	arg01, ##55296 wc
23c84     14 00 90 CD |  if_b	jmp	#LR__3653
23c88     70 00 00 FF 
23c8c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
23c90     08 00 90 3D |  if_ae	jmp	#LR__3653
23c94                 | LR__3652
23c94     00 FA 05 F6 | 	mov	result1, #0
23c98     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23c9c                 | LR__3653
23c9c     09 FB 59 F8 | 	getnib	result1, arg01, #3
23ca0     E0 16 06 F6 | 	mov	arg03, #224
23ca4     FD 16 42 F5 | 	or	arg03, result1
23ca8     0A 17 42 FC | 	wrbyte	arg03, arg02
23cac     01 14 06 F1 | 	add	arg02, #1
23cb0     09 FB 01 F6 | 	mov	result1, arg01
23cb4     06 FA 45 F0 | 	shr	result1, #6
23cb8     3F FA 05 F5 | 	and	result1, #63
23cbc     80 16 06 F6 | 	mov	arg03, #128
23cc0     FD 16 42 F5 | 	or	arg03, result1
23cc4     0A 17 42 FC | 	wrbyte	arg03, arg02
23cc8     01 14 06 F1 | 	add	arg02, #1
23ccc     3F 12 06 F5 | 	and	arg01, #63
23cd0     80 FA 05 F6 | 	mov	result1, #128
23cd4     09 FB 41 F5 | 	or	result1, arg01
23cd8     0A FB 41 FC | 	wrbyte	result1, arg02
23cdc                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
23cdc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
23cdc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
23cdc                 | ' 		return 3;
23cdc     03 FA 05 F6 | 	mov	result1, #3
23ce0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23ce4                 | LR__3654
23ce4     04 16 16 F2 | 	cmp	arg03, #4 wc
23ce8     00 FA 05 C6 |  if_b	mov	result1, #0
23cec     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
23cf0     09 01 02 F6 | 	mov	_var01, arg01
23cf4     E0 01 06 F4 | 	bitl	_var01, #480
23cf8     00 00 6C FF 
23cfc     00 00 86 F1 | 	sub	_var01, ##-671088640
23d00     06 00 46 F0 | 	shr	_var01, #6
23d04     09 13 32 F9 | 	getword	arg01, arg01, #0
23d08     6E 00 00 FF 
23d0c     00 12 86 F1 | 	sub	arg01, ##56320
23d10     00 08 00 FF 
23d14     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
23d18     02 00 00 CF 
23d1c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
23d20     00 FA 05 36 |  if_ae	mov	result1, #0
23d24     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
23d28     09 01 42 F5 | 	or	_var01, arg01
23d2c     80 00 00 FF 
23d30     00 00 06 F1 | 	add	_var01, ##65536
23d34     00 FB 01 F6 | 	mov	result1, _var01
23d38     12 FA 45 F0 | 	shr	result1, #18
23d3c     07 FA 05 F5 | 	and	result1, #7
23d40     F0 16 06 F6 | 	mov	arg03, #240
23d44     FD 16 42 F5 | 	or	arg03, result1
23d48     0A 17 42 FC | 	wrbyte	arg03, arg02
23d4c     01 14 06 F1 | 	add	arg02, #1
23d50     00 FB 01 F6 | 	mov	result1, _var01
23d54     0C FA 45 F0 | 	shr	result1, #12
23d58     3F FA 05 F5 | 	and	result1, #63
23d5c     80 16 06 F6 | 	mov	arg03, #128
23d60     FD 16 42 F5 | 	or	arg03, result1
23d64     0A 17 42 FC | 	wrbyte	arg03, arg02
23d68     01 14 06 F1 | 	add	arg02, #1
23d6c     00 FB 01 F6 | 	mov	result1, _var01
23d70     06 FA 45 F0 | 	shr	result1, #6
23d74     3F FA 05 F5 | 	and	result1, #63
23d78     80 16 06 F6 | 	mov	arg03, #128
23d7c     FD 16 42 F5 | 	or	arg03, result1
23d80     0A 17 42 FC | 	wrbyte	arg03, arg02
23d84     01 14 06 F1 | 	add	arg02, #1
23d88     3F 00 06 F5 | 	and	_var01, #63
23d8c     80 FA 05 F6 | 	mov	result1, #128
23d90     00 FB 41 F5 | 	or	result1, _var01
23d94     0A FB 41 FC | 	wrbyte	result1, arg02
23d98                 | ' 	chr = (hc | chr) + 0x10000;
23d98                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
23d98                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
23d98                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
23d98                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
23d98                 | ' 	return 4;
23d98     04 FA 05 F6 | 	mov	result1, #4
23d9c                 | _fatfs_cc_put_utf_ret
23d9c     2D 00 64 FD | 	ret
23da0                 | 
23da0                 | _fatfs_cc_sync_window
23da0     02 4A 05 F6 | 	mov	COUNT_, #2
23da4     A8 00 A0 FD | 	call	#pushregs_
23da8     09 1F 02 F6 | 	mov	local01, arg01
23dac     00 20 06 F6 | 	mov	local02, #0
23db0     03 1E 06 F1 | 	add	local01, #3
23db4     0F FB C9 FA | 	rdbyte	result1, local01 wz
23db8     03 1E 86 F1 | 	sub	local01, #3
23dbc     A4 00 90 AD |  if_e	jmp	#LR__3662
23dc0     01 1E 06 F1 | 	add	local01, #1
23dc4     0F 13 C2 FA | 	rdbyte	arg01, local01
23dc8     33 1E 06 F1 | 	add	local01, #51
23dcc     0F 15 02 F6 | 	mov	arg02, local01
23dd0     04 1E 86 F1 | 	sub	local01, #4
23dd4     0F 17 02 FB | 	rdlong	arg03, local01
23dd8     30 1E 86 F1 | 	sub	local01, #48
23ddc     01 18 06 F6 | 	mov	arg04, #1
23de0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
23de4     00 FA 0D F2 | 	cmp	result1, #0 wz
23de8     74 00 90 5D |  if_ne	jmp	#LR__3660
23dec     03 1E 06 F1 | 	add	local01, #3
23df0     0F 01 48 FC | 	wrbyte	#0, local01
23df4     2D 1E 06 F1 | 	add	local01, #45
23df8     0F FB 01 FB | 	rdlong	result1, local01
23dfc     0C 1E 86 F1 | 	sub	local01, #12
23e00     0F 19 02 FB | 	rdlong	arg04, local01
23e04     0C FB 81 F1 | 	sub	result1, arg04
23e08     08 1E 86 F1 | 	sub	local01, #8
23e0c     0F 19 02 FB | 	rdlong	arg04, local01
23e10     1C 1E 86 F1 | 	sub	local01, #28
23e14     0C FB 11 F2 | 	cmp	result1, arg04 wc
23e18     48 00 90 3D |  if_ae	jmp	#LR__3661
23e1c     02 1E 06 F1 | 	add	local01, #2
23e20     0F 19 C2 FA | 	rdbyte	arg04, local01
23e24     02 1E 86 F1 | 	sub	local01, #2
23e28     02 18 0E F2 | 	cmp	arg04, #2 wz
23e2c     34 00 90 5D |  if_ne	jmp	#LR__3661
23e30     01 1E 06 F1 | 	add	local01, #1
23e34     0F 13 C2 FA | 	rdbyte	arg01, local01
23e38     33 1E 06 F1 | 	add	local01, #51
23e3c     0F 15 02 F6 | 	mov	arg02, local01
23e40     04 1E 86 F1 | 	sub	local01, #4
23e44     0F 17 02 FB | 	rdlong	arg03, local01
23e48     14 1E 86 F1 | 	sub	local01, #20
23e4c     0F 1F 02 FB | 	rdlong	local01, local01
23e50     0F 17 02 F1 | 	add	arg03, local01
23e54     01 18 06 F6 | 	mov	arg04, #1
23e58     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
23e5c     04 00 90 FD | 	jmp	#LR__3661
23e60                 | LR__3660
23e60     01 20 06 F6 | 	mov	local02, #1
23e64                 | LR__3661
23e64                 | LR__3662
23e64                 | ' 			res = FR_DISK_ERR;
23e64                 | ' 		}
23e64                 | ' 	}
23e64                 | ' 	return res;
23e64     10 FB 01 F6 | 	mov	result1, local02
23e68     A7 F0 03 F6 | 	mov	ptra, fp
23e6c     B2 00 A0 FD | 	call	#popregs_
23e70                 | _fatfs_cc_sync_window_ret
23e70     2D 00 64 FD | 	ret
23e74                 | 
23e74                 | _fatfs_cc_move_window
23e74     03 4A 05 F6 | 	mov	COUNT_, #3
23e78     A8 00 A0 FD | 	call	#pushregs_
23e7c     09 1F 02 F6 | 	mov	local01, arg01
23e80     0A 21 02 F6 | 	mov	local02, arg02
23e84     00 22 06 F6 | 	mov	local03, #0
23e88     30 1E 06 F1 | 	add	local01, #48
23e8c     0F 19 02 FB | 	rdlong	arg04, local01
23e90     30 1E 86 F1 | 	sub	local01, #48
23e94     0C 21 0A F2 | 	cmp	local02, arg04 wz
23e98     40 00 90 AD |  if_e	jmp	#LR__3671
23e9c     0F 13 02 F6 | 	mov	arg01, local01
23ea0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
23ea4     FD 22 0A F6 | 	mov	local03, result1 wz
23ea8     30 00 90 5D |  if_ne	jmp	#LR__3670
23eac     01 1E 06 F1 | 	add	local01, #1
23eb0     0F 13 C2 FA | 	rdbyte	arg01, local01
23eb4     33 1E 06 F1 | 	add	local01, #51
23eb8     0F 15 02 F6 | 	mov	arg02, local01
23ebc     10 17 02 F6 | 	mov	arg03, local02
23ec0     01 18 06 F6 | 	mov	arg04, #1
23ec4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
23ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
23ecc     01 20 66 56 |  if_ne	neg	local02, #1
23ed0     01 22 06 56 |  if_ne	mov	local03, #1
23ed4     04 1E 86 F1 | 	sub	local01, #4
23ed8     0F 21 62 FC | 	wrlong	local02, local01
23edc                 | LR__3670
23edc                 | LR__3671
23edc                 | ' 				sect = (LBA_t)0 - 1;
23edc                 | ' 				res = FR_DISK_ERR;
23edc                 | ' 			}
23edc                 | ' 			fs->winsect = sect;
23edc                 | ' 		}
23edc                 | ' 	}
23edc                 | ' 	return res;
23edc     11 FB 01 F6 | 	mov	result1, local03
23ee0     A7 F0 03 F6 | 	mov	ptra, fp
23ee4     B2 00 A0 FD | 	call	#popregs_
23ee8                 | _fatfs_cc_move_window_ret
23ee8     2D 00 64 FD | 	ret
23eec                 | 
23eec                 | _fatfs_cc_sync_fs
23eec     02 4A 05 F6 | 	mov	COUNT_, #2
23ef0     A8 00 A0 FD | 	call	#pushregs_
23ef4     09 1F 02 F6 | 	mov	local01, arg01
23ef8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
23efc     FD 20 0A F6 | 	mov	local02, result1 wz
23f00     D8 00 90 5D |  if_ne	jmp	#LR__3681
23f04     0F 19 C2 FA | 	rdbyte	arg04, local01
23f08     03 18 0E F2 | 	cmp	arg04, #3 wz
23f0c     04 1E 06 A1 |  if_e	add	local01, #4
23f10     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
23f14     04 1E 86 A1 |  if_e	sub	local01, #4
23f18     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
23f1c     A0 00 90 5D |  if_ne	jmp	#LR__3680
23f20     34 1E 06 F1 | 	add	local01, #52
23f24     0F 13 02 F6 | 	mov	arg01, local01
23f28     00 14 06 F6 | 	mov	arg02, #0
23f2c     09 16 C6 F9 | 	decod	arg03, #9
23f30     98 00 A0 FD | 	call	#\builtin_bytefill_
23f34     0F 13 02 F6 | 	mov	arg01, local01
23f38     FE 13 06 F1 | 	add	arg01, #510
23f3c     55 00 80 FF 
23f40     09 AB 58 FC | 	wrword	##43605, arg01
23f44     A9 B0 A0 FF 
23f48     0F A5 68 FC | 	wrlong	##1096897106, local01
23f4c     0F 13 02 F6 | 	mov	arg01, local01
23f50     E4 13 06 F1 | 	add	arg01, #484
23f54     B9 A0 B0 FF 
23f58     09 E5 68 FC | 	wrlong	##1631679090, arg01
23f5c     0F 13 02 F6 | 	mov	arg01, local01
23f60     E8 13 06 F1 | 	add	arg01, #488
23f64     20 1E 86 F1 | 	sub	local01, #32
23f68     0F 15 02 FB | 	rdlong	arg02, local01
23f6c     09 15 62 FC | 	wrlong	arg02, arg01
23f70     20 1E 06 F1 | 	add	local01, #32
23f74     0F 13 02 F6 | 	mov	arg01, local01
23f78     EC 13 06 F1 | 	add	arg01, #492
23f7c     24 1E 86 F1 | 	sub	local01, #36
23f80     0F 15 02 FB | 	rdlong	arg02, local01
23f84     09 15 62 FC | 	wrlong	arg02, arg01
23f88     10 1E 06 F1 | 	add	local01, #16
23f8c     0F 17 02 FB | 	rdlong	arg03, local01
23f90     01 16 06 F1 | 	add	arg03, #1
23f94     10 1E 06 F1 | 	add	local01, #16
23f98     0F 17 62 FC | 	wrlong	arg03, local01
23f9c     2F 1E 86 F1 | 	sub	local01, #47
23fa0     0F 13 C2 FA | 	rdbyte	arg01, local01
23fa4     33 1E 06 F1 | 	add	local01, #51
23fa8     0F 15 02 F6 | 	mov	arg02, local01
23fac     01 18 06 F6 | 	mov	arg04, #1
23fb0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
23fb4     30 1E 86 F1 | 	sub	local01, #48
23fb8     0F 01 48 FC | 	wrbyte	#0, local01
23fbc     04 1E 86 F1 | 	sub	local01, #4
23fc0                 | LR__3680
23fc0     01 1E 06 F1 | 	add	local01, #1
23fc4     0F 13 C2 FA | 	rdbyte	arg01, local01
23fc8     00 14 06 F6 | 	mov	arg02, #0
23fcc     00 16 06 F6 | 	mov	arg03, #0
23fd0     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
23fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
23fd8     01 20 06 56 |  if_ne	mov	local02, #1
23fdc                 | LR__3681
23fdc                 | ' 	}
23fdc                 | ' 
23fdc                 | ' 	return res;
23fdc     10 FB 01 F6 | 	mov	result1, local02
23fe0     A7 F0 03 F6 | 	mov	ptra, fp
23fe4     B2 00 A0 FD | 	call	#popregs_
23fe8                 | _fatfs_cc_sync_fs_ret
23fe8     2D 00 64 FD | 	ret
23fec                 | 
23fec                 | _fatfs_cc_clst2sect
23fec     02 14 86 F1 | 	sub	arg02, #2
23ff0     18 12 06 F1 | 	add	arg01, #24
23ff4     09 01 02 FB | 	rdlong	_var01, arg01
23ff8     18 12 86 F1 | 	sub	arg01, #24
23ffc     02 00 86 F1 | 	sub	_var01, #2
24000     00 15 12 F2 | 	cmp	arg02, _var01 wc
24004     00 FA 05 36 |  if_ae	mov	result1, #0
24008     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2400c     0A 12 06 F1 | 	add	arg01, #10
24010     09 01 E2 FA | 	rdword	_var01, arg01
24014     0A 01 02 FD | 	qmul	_var01, arg02
24018                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
24018     22 12 06 F1 | 	add	arg01, #34
2401c     09 FB 01 FB | 	rdlong	result1, arg01
24020     18 00 62 FD | 	getqx	_var01
24024     00 FB 01 F1 | 	add	result1, _var01
24028                 | _fatfs_cc_clst2sect_ret
24028     2D 00 64 FD | 	ret
2402c                 | 
2402c                 | _fatfs_cc_get_fat
2402c     07 4A 05 F6 | 	mov	COUNT_, #7
24030     A8 00 A0 FD | 	call	#pushregs_
24034     0A 1F 02 F6 | 	mov	local01, arg02
24038     09 21 02 FB | 	rdlong	local02, arg01
2403c     02 1E 16 F2 | 	cmp	local01, #2 wc
24040     14 00 90 CD |  if_b	jmp	#LR__3690
24044     18 20 06 F1 | 	add	local02, #24
24048     10 23 02 FB | 	rdlong	local03, local02
2404c     18 20 86 F1 | 	sub	local02, #24
24050     11 1F 12 F2 | 	cmp	local01, local03 wc
24054     08 00 90 CD |  if_b	jmp	#LR__3691
24058                 | LR__3690
24058     01 24 06 F6 | 	mov	local04, #1
2405c     60 01 90 FD | 	jmp	#LR__3698
24060                 | LR__3691
24060     01 24 66 F6 | 	neg	local04, #1
24064                 | ' 		val = 0xFFFFFFFF;
24064                 | ' 
24064                 | ' 		switch (fs->fs_type) {
24064     10 27 C2 FA | 	rdbyte	local05, local02
24068     01 26 86 F1 | 	sub	local05, #1
2406c     03 26 26 F3 | 	fle	local05, #3
24070     30 26 62 FD | 	jmprel	local05
24074                 | LR__3692
24074     0C 00 90 FD | 	jmp	#LR__3693
24078     B8 00 90 FD | 	jmp	#LR__3694
2407c     F8 00 90 FD | 	jmp	#LR__3695
24080     38 01 90 FD | 	jmp	#LR__3696
24084                 | LR__3693
24084     0F 27 02 F6 | 	mov	local05, local01
24088     0F 13 02 F6 | 	mov	arg01, local01
2408c     01 12 46 F0 | 	shr	arg01, #1
24090     09 27 02 F1 | 	add	local05, arg01
24094     10 13 02 F6 | 	mov	arg01, local02
24098     13 29 02 F6 | 	mov	local06, local05
2409c     09 28 46 F0 | 	shr	local06, #9
240a0     24 20 06 F1 | 	add	local02, #36
240a4     10 15 02 FB | 	rdlong	arg02, local02
240a8     24 20 86 F1 | 	sub	local02, #36
240ac     14 15 02 F1 | 	add	arg02, local06
240b0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
240b4     00 FA 0D F2 | 	cmp	result1, #0 wz
240b8     04 01 90 5D |  if_ne	jmp	#LR__3697
240bc     13 29 02 F6 | 	mov	local06, local05
240c0     FF 29 06 F5 | 	and	local06, #511
240c4     34 20 06 F1 | 	add	local02, #52
240c8     10 29 02 F1 | 	add	local06, local02
240cc     14 2B C2 FA | 	rdbyte	local07, local06
240d0     34 20 86 F1 | 	sub	local02, #52
240d4     10 13 02 F6 | 	mov	arg01, local02
240d8     01 26 06 F1 | 	add	local05, #1
240dc     13 29 02 F6 | 	mov	local06, local05
240e0     09 28 46 F0 | 	shr	local06, #9
240e4     24 20 06 F1 | 	add	local02, #36
240e8     10 15 02 FB | 	rdlong	arg02, local02
240ec     24 20 86 F1 | 	sub	local02, #36
240f0     14 15 02 F1 | 	add	arg02, local06
240f4     7C FD BF FD | 	call	#_fatfs_cc_move_window
240f8     00 FA 0D F2 | 	cmp	result1, #0 wz
240fc     C0 00 90 5D |  if_ne	jmp	#LR__3697
24100     FF 27 06 F5 | 	and	local05, #511
24104     34 20 06 F1 | 	add	local02, #52
24108     10 27 02 F1 | 	add	local05, local02
2410c     13 29 C2 FA | 	rdbyte	local06, local05
24110     08 28 66 F0 | 	shl	local06, #8
24114     14 2B 42 F5 | 	or	local07, local06
24118     01 1E CE F7 | 	test	local01, #1 wz
2411c     04 2A 46 50 |  if_ne	shr	local07, #4
24120     15 23 02 56 |  if_ne	mov	local03, local07
24124     0B 2A 46 A7 |  if_e	zerox	local07, #11
24128     15 23 02 A6 |  if_e	mov	local03, local07
2412c     11 25 02 F6 | 	mov	local04, local03
24130                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
24130                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24130                 | ' 			break;
24130     8C 00 90 FD | 	jmp	#LR__3697
24134                 | LR__3694
24134     10 13 02 F6 | 	mov	arg01, local02
24138     0F 29 02 F6 | 	mov	local06, local01
2413c     08 28 46 F0 | 	shr	local06, #8
24140     24 20 06 F1 | 	add	local02, #36
24144     10 15 02 FB | 	rdlong	arg02, local02
24148     24 20 86 F1 | 	sub	local02, #36
2414c     14 15 02 F1 | 	add	arg02, local06
24150     20 FD BF FD | 	call	#_fatfs_cc_move_window
24154     00 FA 0D F2 | 	cmp	result1, #0 wz
24158     64 00 90 5D |  if_ne	jmp	#LR__3697
2415c     34 20 06 F1 | 	add	local02, #52
24160     01 1E 66 F0 | 	shl	local01, #1
24164     FF 1F 06 F5 | 	and	local01, #511
24168     0F 21 02 F1 | 	add	local02, local01
2416c                 | ' {
2416c                 | ' 
2416c                 | ' 	return *((WORD*)ptr);
2416c     10 FB E1 FA | 	rdword	result1, local02
24170     FD 24 32 F9 | 	getword	local04, result1, #0
24174                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
24174                 | ' 			break;
24174     48 00 90 FD | 	jmp	#LR__3697
24178                 | LR__3695
24178     10 13 02 F6 | 	mov	arg01, local02
2417c     0F 29 02 F6 | 	mov	local06, local01
24180     07 28 46 F0 | 	shr	local06, #7
24184     24 20 06 F1 | 	add	local02, #36
24188     10 15 02 FB | 	rdlong	arg02, local02
2418c     24 20 86 F1 | 	sub	local02, #36
24190     14 15 02 F1 | 	add	arg02, local06
24194     DC FC BF FD | 	call	#_fatfs_cc_move_window
24198     00 FA 0D F2 | 	cmp	result1, #0 wz
2419c     20 00 90 5D |  if_ne	jmp	#LR__3697
241a0     34 20 06 F1 | 	add	local02, #52
241a4     02 1E 66 F0 | 	shl	local01, #2
241a8     FF 1F 06 F5 | 	and	local01, #511
241ac     0F 21 02 F1 | 	add	local02, local01
241b0                 | ' {
241b0                 | ' 
241b0                 | ' 	return *((DWORD*)ptr);
241b0     10 25 02 FB | 	rdlong	local04, local02
241b4     7C 24 06 F4 | 	bitl	local04, #124
241b8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
241b8                 | ' 			break;
241b8     04 00 90 FD | 	jmp	#LR__3697
241bc                 | LR__3696
241bc     01 24 06 F6 | 	mov	local04, #1
241c0                 | LR__3697
241c0                 | LR__3698
241c0                 | ' 			val = 1;
241c0                 | ' 		}
241c0                 | ' 	}
241c0                 | ' 
241c0                 | ' 	return val;
241c0     12 FB 01 F6 | 	mov	result1, local04
241c4     A7 F0 03 F6 | 	mov	ptra, fp
241c8     B2 00 A0 FD | 	call	#popregs_
241cc                 | _fatfs_cc_get_fat_ret
241cc     2D 00 64 FD | 	ret
241d0                 | 
241d0                 | _fatfs_cc_put_fat
241d0     08 4A 05 F6 | 	mov	COUNT_, #8
241d4     A8 00 A0 FD | 	call	#pushregs_
241d8     09 1F 02 F6 | 	mov	local01, arg01
241dc     0A 21 02 F6 | 	mov	local02, arg02
241e0     0B 23 02 F6 | 	mov	local03, arg03
241e4     02 24 06 F6 | 	mov	local04, #2
241e8     02 20 16 F2 | 	cmp	local02, #2 wc
241ec     E0 01 90 CD |  if_b	jmp	#LR__3707
241f0     18 1E 06 F1 | 	add	local01, #24
241f4     0F 27 02 FB | 	rdlong	local05, local01
241f8     18 1E 86 F1 | 	sub	local01, #24
241fc     13 21 12 F2 | 	cmp	local02, local05 wc
24200     CC 01 90 3D |  if_ae	jmp	#LR__3707
24204                 | ' 		switch (fs->fs_type) {
24204     0F 29 C2 FA | 	rdbyte	local06, local01
24208     01 28 86 F1 | 	sub	local06, #1
2420c     03 28 26 F3 | 	fle	local06, #3
24210     30 28 62 FD | 	jmprel	local06
24214                 | LR__3700
24214     0C 00 90 FD | 	jmp	#LR__3701
24218     F8 00 90 FD | 	jmp	#LR__3704
2421c     40 01 90 FD | 	jmp	#LR__3705
24220     AC 01 90 FD | 	jmp	#LR__3706
24224                 | LR__3701
24224     10 2B 02 F6 | 	mov	local07, local02
24228     10 27 02 F6 | 	mov	local05, local02
2422c     01 26 46 F0 | 	shr	local05, #1
24230     13 2B 02 F1 | 	add	local07, local05
24234     0F 13 02 F6 | 	mov	arg01, local01
24238     15 29 02 F6 | 	mov	local06, local07
2423c     09 28 46 F0 | 	shr	local06, #9
24240     24 1E 06 F1 | 	add	local01, #36
24244     0F 15 02 FB | 	rdlong	arg02, local01
24248     24 1E 86 F1 | 	sub	local01, #36
2424c     14 15 02 F1 | 	add	arg02, local06
24250     20 FC BF FD | 	call	#_fatfs_cc_move_window
24254     FD 24 0A F6 | 	mov	local04, result1 wz
24258     74 01 90 5D |  if_ne	jmp	#LR__3706
2425c     34 1E 06 F1 | 	add	local01, #52
24260     0F 2D 02 F6 | 	mov	local08, local01
24264     15 27 02 F6 | 	mov	local05, local07
24268     FF 27 06 F5 | 	and	local05, #511
2426c     13 2D 02 F1 | 	add	local08, local05
24270     01 20 CE F7 | 	test	local02, #1 wz
24274     34 1E 86 F1 | 	sub	local01, #52
24278     01 2A 06 F1 | 	add	local07, #1
2427c     18 00 90 AD |  if_e	jmp	#LR__3702
24280     16 27 C2 FA | 	rdbyte	local05, local08
24284     13 27 42 F8 | 	getnib	local05, local05, #0
24288     11 29 E2 F8 | 	getbyte	local06, local03, #0
2428c     04 28 66 F0 | 	shl	local06, #4
24290     14 27 42 F5 | 	or	local05, local06
24294     04 00 90 FD | 	jmp	#LR__3703
24298                 | LR__3702
24298     11 27 02 F6 | 	mov	local05, local03
2429c                 | LR__3703
2429c     16 27 42 FC | 	wrbyte	local05, local08
242a0     03 1E 06 F1 | 	add	local01, #3
242a4     0F 03 48 FC | 	wrbyte	#1, local01
242a8     03 1E 86 F1 | 	sub	local01, #3
242ac     0F 13 02 F6 | 	mov	arg01, local01
242b0     15 2D 02 F6 | 	mov	local08, local07
242b4     09 2C 46 F0 | 	shr	local08, #9
242b8     24 1E 06 F1 | 	add	local01, #36
242bc     0F 15 02 FB | 	rdlong	arg02, local01
242c0     24 1E 86 F1 | 	sub	local01, #36
242c4     16 15 02 F1 | 	add	arg02, local08
242c8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
242cc     FD 24 0A F6 | 	mov	local04, result1 wz
242d0     FC 00 90 5D |  if_ne	jmp	#LR__3706
242d4     34 1E 06 F1 | 	add	local01, #52
242d8     0F 2D 02 F6 | 	mov	local08, local01
242dc     FF 2B 06 F5 | 	and	local07, #511
242e0     15 2D 02 F1 | 	add	local08, local07
242e4     01 20 CE F7 | 	test	local02, #1 wz
242e8     04 22 46 50 |  if_ne	shr	local03, #4
242ec     11 27 02 56 |  if_ne	mov	local05, local03
242f0     16 27 C2 AA |  if_e	rdbyte	local05, local08
242f4     F0 26 06 A5 |  if_e	and	local05, #240
242f8     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
242fc     11 23 42 A8 |  if_e	getnib	local03, local03, #0
24300     11 27 42 A5 |  if_e	or	local05, local03
24304     16 27 42 FC | 	wrbyte	local05, local08
24308     31 1E 86 F1 | 	sub	local01, #49
2430c     0F 03 48 FC | 	wrbyte	#1, local01
24310                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
24310                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
24310                 | ' 			fs->wflag = 1;
24310                 | ' 			break;
24310     BC 00 90 FD | 	jmp	#LR__3706
24314                 | LR__3704
24314     0F 13 02 F6 | 	mov	arg01, local01
24318     10 2D 02 F6 | 	mov	local08, local02
2431c     08 2C 46 F0 | 	shr	local08, #8
24320     24 1E 06 F1 | 	add	local01, #36
24324     0F 15 02 FB | 	rdlong	arg02, local01
24328     24 1E 86 F1 | 	sub	local01, #36
2432c     16 15 02 F1 | 	add	arg02, local08
24330     40 FB BF FD | 	call	#_fatfs_cc_move_window
24334     FD 24 0A F6 | 	mov	local04, result1 wz
24338     94 00 90 5D |  if_ne	jmp	#LR__3706
2433c     34 1E 06 F1 | 	add	local01, #52
24340     0F 13 02 F6 | 	mov	arg01, local01
24344     01 20 66 F0 | 	shl	local02, #1
24348     FF 21 06 F5 | 	and	local02, #511
2434c     10 13 02 F1 | 	add	arg01, local02
24350     09 23 52 FC | 	wrword	local03, arg01
24354     31 1E 86 F1 | 	sub	local01, #49
24358     0F 03 48 FC | 	wrbyte	#1, local01
2435c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2435c                 | ' 			fs->wflag = 1;
2435c                 | ' 			break;
2435c     70 00 90 FD | 	jmp	#LR__3706
24360                 | LR__3705
24360     0F 13 02 F6 | 	mov	arg01, local01
24364     10 2D 02 F6 | 	mov	local08, local02
24368     07 2C 46 F0 | 	shr	local08, #7
2436c     24 1E 06 F1 | 	add	local01, #36
24370     0F 15 02 FB | 	rdlong	arg02, local01
24374     24 1E 86 F1 | 	sub	local01, #36
24378     16 15 02 F1 | 	add	arg02, local08
2437c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
24380     FD 24 0A F6 | 	mov	local04, result1 wz
24384     48 00 90 5D |  if_ne	jmp	#LR__3706
24388     7C 22 06 F4 | 	bitl	local03, #124
2438c     34 1E 06 F1 | 	add	local01, #52
24390     10 2D 02 F6 | 	mov	local08, local02
24394     02 2C 66 F0 | 	shl	local08, #2
24398     FF 2D 06 F5 | 	and	local08, #511
2439c     0F 13 02 F6 | 	mov	arg01, local01
243a0     16 13 02 F1 | 	add	arg01, local08
243a4                 | ' {
243a4                 | ' 
243a4                 | ' 	return *((DWORD*)ptr);
243a4     09 2D 02 FB | 	rdlong	local08, arg01
243a8     00 00 78 FF 
243ac     00 2C 06 F5 | 	and	local08, ##-268435456
243b0     16 23 42 F5 | 	or	local03, local08
243b4     0F 13 02 F6 | 	mov	arg01, local01
243b8     02 20 66 F0 | 	shl	local02, #2
243bc     FF 21 06 F5 | 	and	local02, #511
243c0     10 13 02 F1 | 	add	arg01, local02
243c4     09 23 62 FC | 	wrlong	local03, arg01
243c8     31 1E 86 F1 | 	sub	local01, #49
243cc     0F 03 48 FC | 	wrbyte	#1, local01
243d0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
243d0                 | ' 			}
243d0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
243d0                 | ' 			fs->wflag = 1;
243d0                 | ' 			break;
243d0                 | LR__3706
243d0                 | LR__3707
243d0                 | ' 		}
243d0                 | ' 	}
243d0                 | ' 	return res;
243d0     12 FB 01 F6 | 	mov	result1, local04
243d4     A7 F0 03 F6 | 	mov	ptra, fp
243d8     B2 00 A0 FD | 	call	#popregs_
243dc                 | _fatfs_cc_put_fat_ret
243dc     2D 00 64 FD | 	ret
243e0                 | 
243e0                 | _fatfs_cc_remove_chain
243e0     05 4A 05 F6 | 	mov	COUNT_, #5
243e4     A8 00 A0 FD | 	call	#pushregs_
243e8     09 1F 02 F6 | 	mov	local01, arg01
243ec     0A 21 02 F6 | 	mov	local02, arg02
243f0     0B 23 02 F6 | 	mov	local03, arg03
243f4     0F 25 02 FB | 	rdlong	local04, local01
243f8     02 20 16 F2 | 	cmp	local02, #2 wc
243fc     14 00 90 CD |  if_b	jmp	#LR__3710
24400     18 24 06 F1 | 	add	local04, #24
24404     12 FB 01 FB | 	rdlong	result1, local04
24408     18 24 86 F1 | 	sub	local04, #24
2440c     FD 20 12 F2 | 	cmp	local02, result1 wc
24410     08 00 90 CD |  if_b	jmp	#LR__3711
24414                 | LR__3710
24414     02 FA 05 F6 | 	mov	result1, #2
24418     CC 00 90 FD | 	jmp	#LR__3716
2441c                 | LR__3711
2441c     00 22 0E F2 | 	cmp	local03, #0 wz
24420     18 00 90 AD |  if_e	jmp	#LR__3712
24424     11 15 02 F6 | 	mov	arg02, local03
24428     12 13 02 F6 | 	mov	arg01, local04
2442c     01 16 66 F6 | 	neg	arg03, #1
24430     9C FD BF FD | 	call	#_fatfs_cc_put_fat
24434     00 FA 0D F2 | 	cmp	result1, #0 wz
24438     AC 00 90 5D |  if_ne	jmp	#LR__3716
2443c                 | LR__3712
2443c                 | ' 	}
2443c                 | ' 
2443c                 | ' 
2443c                 | ' 	do {
2443c                 | LR__3713
2443c     10 15 02 F6 | 	mov	arg02, local02
24440     0F 13 02 F6 | 	mov	arg01, local01
24444     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
24448     FD 26 0A F6 | 	mov	local05, result1 wz
2444c     94 00 90 AD |  if_e	jmp	#LR__3715
24450     01 26 0E F2 | 	cmp	local05, #1 wz
24454     02 FA 05 A6 |  if_e	mov	result1, #2
24458     8C 00 90 AD |  if_e	jmp	#LR__3716
2445c     FF FF 7F FF 
24460     FF 27 0E F2 | 	cmp	local05, ##-1 wz
24464     01 FA 05 A6 |  if_e	mov	result1, #1
24468     7C 00 90 AD |  if_e	jmp	#LR__3716
2446c     10 15 02 F6 | 	mov	arg02, local02
24470     12 13 02 F6 | 	mov	arg01, local04
24474     00 16 06 F6 | 	mov	arg03, #0
24478     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2447c     FD 22 0A F6 | 	mov	local03, result1 wz
24480     11 FB 01 56 |  if_ne	mov	result1, local03
24484     60 00 90 5D |  if_ne	jmp	#LR__3716
24488     18 24 06 F1 | 	add	local04, #24
2448c     12 23 02 FB | 	rdlong	local03, local04
24490     02 22 86 F1 | 	sub	local03, #2
24494     04 24 86 F1 | 	sub	local04, #4
24498     12 21 02 FB | 	rdlong	local02, local04
2449c     14 24 86 F1 | 	sub	local04, #20
244a0     11 21 12 F2 | 	cmp	local02, local03 wc
244a4     24 00 90 3D |  if_ae	jmp	#LR__3714
244a8     14 24 06 F1 | 	add	local04, #20
244ac     12 23 02 FB | 	rdlong	local03, local04
244b0     01 22 06 F1 | 	add	local03, #1
244b4     12 23 62 FC | 	wrlong	local03, local04
244b8     10 24 86 F1 | 	sub	local04, #16
244bc     12 23 C2 FA | 	rdbyte	local03, local04
244c0     01 22 46 F5 | 	or	local03, #1
244c4     12 23 42 FC | 	wrbyte	local03, local04
244c8     04 24 86 F1 | 	sub	local04, #4
244cc                 | LR__3714
244cc     13 21 02 F6 | 	mov	local02, local05
244d0     18 24 06 F1 | 	add	local04, #24
244d4     12 27 02 FB | 	rdlong	local05, local04
244d8     18 24 86 F1 | 	sub	local04, #24
244dc     13 21 12 F2 | 	cmp	local02, local05 wc
244e0     58 FF 9F CD |  if_b	jmp	#LR__3713
244e4                 | LR__3715
244e4                 | ' #line 1500 "ff.c"
244e4                 | ' 	return FR_OK;
244e4     00 FA 05 F6 | 	mov	result1, #0
244e8                 | LR__3716
244e8     A7 F0 03 F6 | 	mov	ptra, fp
244ec     B2 00 A0 FD | 	call	#popregs_
244f0                 | _fatfs_cc_remove_chain_ret
244f0     2D 00 64 FD | 	ret
244f4                 | 
244f4                 | _fatfs_cc_create_chain
244f4     09 4A 05 F6 | 	mov	COUNT_, #9
244f8     A8 00 A0 FD | 	call	#pushregs_
244fc     09 1F 02 F6 | 	mov	local01, arg01
24500     0A 21 0A F6 | 	mov	local02, arg02 wz
24504     0F 23 02 FB | 	rdlong	local03, local01
24508     28 00 90 5D |  if_ne	jmp	#LR__3720
2450c     10 22 06 F1 | 	add	local03, #16
24510     11 25 0A FB | 	rdlong	local04, local03 wz
24514     10 22 86 F1 | 	sub	local03, #16
24518     18 22 06 51 |  if_ne	add	local03, #24
2451c     11 27 02 5B |  if_ne	rdlong	local05, local03
24520     18 22 86 51 |  if_ne	sub	local03, #24
24524     13 25 12 52 |  if_ne	cmp	local04, local05 wc
24528     50 00 90 4D |  if_c_and_nz	jmp	#LR__3721
2452c     01 24 06 F6 | 	mov	local04, #1
24530     48 00 90 FD | 	jmp	#LR__3721
24534                 | LR__3720
24534     10 15 02 F6 | 	mov	arg02, local02
24538     0F 13 02 F6 | 	mov	arg01, local01
2453c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
24540     FD 24 02 F6 | 	mov	local04, result1
24544     02 24 16 F2 | 	cmp	local04, #2 wc
24548     01 FA 05 C6 |  if_b	mov	result1, #1
2454c     BC 01 90 CD |  if_b	jmp	#LR__3731
24550     FF FF 7F FF 
24554     FF 25 0E F2 | 	cmp	local04, ##-1 wz
24558     12 FB 01 A6 |  if_e	mov	result1, local04
2455c     AC 01 90 AD |  if_e	jmp	#LR__3731
24560     18 22 06 F1 | 	add	local03, #24
24564     11 27 02 FB | 	rdlong	local05, local03
24568     18 22 86 F1 | 	sub	local03, #24
2456c     13 25 12 F2 | 	cmp	local04, local05 wc
24570     12 FB 01 C6 |  if_b	mov	result1, local04
24574     94 01 90 CD |  if_b	jmp	#LR__3731
24578     10 25 02 F6 | 	mov	local04, local02
2457c                 | LR__3721
2457c     14 22 06 F1 | 	add	local03, #20
24580     11 27 0A FB | 	rdlong	local05, local03 wz
24584     14 22 86 F1 | 	sub	local03, #20
24588     00 FA 05 A6 |  if_e	mov	result1, #0
2458c     7C 01 90 AD |  if_e	jmp	#LR__3731
24590     00 28 06 F6 | 	mov	local06, #0
24594     10 25 0A F2 | 	cmp	local04, local02 wz
24598     74 00 90 5D |  if_ne	jmp	#LR__3724
2459c     12 29 02 F6 | 	mov	local06, local04
245a0     01 28 06 F1 | 	add	local06, #1
245a4     18 22 06 F1 | 	add	local03, #24
245a8     11 27 02 FB | 	rdlong	local05, local03
245ac     18 22 86 F1 | 	sub	local03, #24
245b0     13 29 12 F2 | 	cmp	local06, local05 wc
245b4     02 28 06 36 |  if_ae	mov	local06, #2
245b8     14 15 02 F6 | 	mov	arg02, local06
245bc     0F 13 02 F6 | 	mov	arg01, local01
245c0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
245c4     FD 26 02 F6 | 	mov	local05, result1
245c8     01 26 0E F2 | 	cmp	local05, #1 wz
245cc     FF FF 7F 5F 
245d0     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
245d4     13 FB 01 A6 |  if_e	mov	result1, local05
245d8     30 01 90 AD |  if_e	jmp	#LR__3731
245dc     00 26 0E F2 | 	cmp	local05, #0 wz
245e0     2C 00 90 AD |  if_e	jmp	#LR__3723
245e4     10 22 06 F1 | 	add	local03, #16
245e8     11 2B 02 FB | 	rdlong	local07, local03
245ec     10 22 86 F1 | 	sub	local03, #16
245f0     02 2A 16 F2 | 	cmp	local07, #2 wc
245f4     14 00 90 CD |  if_b	jmp	#LR__3722
245f8     18 22 06 F1 | 	add	local03, #24
245fc     11 27 02 FB | 	rdlong	local05, local03
24600     18 22 86 F1 | 	sub	local03, #24
24604     13 2B 12 F2 | 	cmp	local07, local05 wc
24608     15 25 02 C6 |  if_b	mov	local04, local07
2460c                 | LR__3722
2460c     00 28 06 F6 | 	mov	local06, #0
24610                 | LR__3723
24610                 | LR__3724
24610     00 28 0E F2 | 	cmp	local06, #0 wz
24614     60 00 90 5D |  if_ne	jmp	#LR__3727
24618     12 29 02 F6 | 	mov	local06, local04
2461c                 | ' 			ncl = scl;
2461c                 | ' 			for (;;) {
2461c                 | LR__3725
2461c     01 28 06 F1 | 	add	local06, #1
24620     18 22 06 F1 | 	add	local03, #24
24624     11 27 02 FB | 	rdlong	local05, local03
24628     18 22 86 F1 | 	sub	local03, #24
2462c     13 29 12 F2 | 	cmp	local06, local05 wc
24630     02 28 06 36 |  if_ae	mov	local06, #2
24634     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
24638     00 FA 05 16 |  if_a	mov	result1, #0
2463c     CC 00 90 1D |  if_a	jmp	#LR__3731
24640     14 15 02 F6 | 	mov	arg02, local06
24644     0F 13 02 F6 | 	mov	arg01, local01
24648     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2464c     FD 2A 0A F6 | 	mov	local07, result1 wz
24650     24 00 90 AD |  if_e	jmp	#LR__3726
24654     01 2A 0E F2 | 	cmp	local07, #1 wz
24658     FF FF 7F 5F 
2465c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
24660     15 FB 01 A6 |  if_e	mov	result1, local07
24664     A4 00 90 AD |  if_e	jmp	#LR__3731
24668     12 29 0A F2 | 	cmp	local06, local04 wz
2466c     00 FA 05 A6 |  if_e	mov	result1, #0
24670     98 00 90 AD |  if_e	jmp	#LR__3731
24674     A4 FF 9F FD | 	jmp	#LR__3725
24678                 | LR__3726
24678                 | LR__3727
24678     11 13 02 F6 | 	mov	arg01, local03
2467c     14 15 02 F6 | 	mov	arg02, local06
24680     01 16 66 F6 | 	neg	arg03, #1
24684     48 FB BF FD | 	call	#_fatfs_cc_put_fat
24688     FD 2C 0A F6 | 	mov	local08, result1 wz
2468c     1C 00 90 5D |  if_ne	jmp	#LR__3728
24690     00 20 0E F2 | 	cmp	local02, #0 wz
24694     14 00 90 AD |  if_e	jmp	#LR__3728
24698     11 13 02 F6 | 	mov	arg01, local03
2469c     10 15 02 F6 | 	mov	arg02, local02
246a0     14 17 02 F6 | 	mov	arg03, local06
246a4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
246a8     FD 2C 02 F6 | 	mov	local08, result1
246ac                 | LR__3728
246ac     00 2C 0E F2 | 	cmp	local08, #0 wz
246b0     4C 00 90 5D |  if_ne	jmp	#LR__3729
246b4     10 22 06 F1 | 	add	local03, #16
246b8     11 29 62 FC | 	wrlong	local06, local03
246bc     08 22 06 F1 | 	add	local03, #8
246c0     11 27 02 FB | 	rdlong	local05, local03
246c4     02 26 86 F1 | 	sub	local05, #2
246c8     04 22 86 F1 | 	sub	local03, #4
246cc     11 2F 02 FB | 	rdlong	local09, local03
246d0     14 22 86 F1 | 	sub	local03, #20
246d4     13 2F 1A F2 | 	cmp	local09, local05 wcz
246d8     14 22 06 E1 |  if_be	add	local03, #20
246dc     11 2F 02 EB |  if_be	rdlong	local09, local03
246e0     01 2E 86 E1 |  if_be	sub	local09, #1
246e4     11 2F 62 EC |  if_be	wrlong	local09, local03
246e8     14 22 86 E1 |  if_be	sub	local03, #20
246ec     04 22 06 F1 | 	add	local03, #4
246f0     11 27 C2 FA | 	rdbyte	local05, local03
246f4     01 26 46 F5 | 	or	local05, #1
246f8     11 27 42 FC | 	wrbyte	local05, local03
246fc     08 00 90 FD | 	jmp	#LR__3730
24700                 | LR__3729
24700     01 2C 0E F2 | 	cmp	local08, #1 wz
24704     01 28 C6 F6 | 	negz	local06, #1
24708                 | LR__3730
24708                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
24708                 | ' 	}
24708                 | ' 
24708                 | ' 	return ncl;
24708     14 FB 01 F6 | 	mov	result1, local06
2470c                 | LR__3731
2470c     A7 F0 03 F6 | 	mov	ptra, fp
24710     B2 00 A0 FD | 	call	#popregs_
24714                 | _fatfs_cc_create_chain_ret
24714     2D 00 64 FD | 	ret
24718                 | 
24718                 | _fatfs_cc_dir_clear
24718     06 4A 05 F6 | 	mov	COUNT_, #6
2471c     A8 00 A0 FD | 	call	#pushregs_
24720     09 1F 02 F6 | 	mov	local01, arg01
24724     0A 21 02 F6 | 	mov	local02, arg02
24728     0F 13 02 F6 | 	mov	arg01, local01
2472c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
24730     00 FA 0D F2 | 	cmp	result1, #0 wz
24734     01 FA 05 56 |  if_ne	mov	result1, #1
24738     90 00 90 5D |  if_ne	jmp	#LR__3742
2473c     0F 13 02 F6 | 	mov	arg01, local01
24740     10 15 02 F6 | 	mov	arg02, local02
24744     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
24748     FD 22 02 F6 | 	mov	local03, result1
2474c     30 1E 06 F1 | 	add	local01, #48
24750     0F 23 62 FC | 	wrlong	local03, local01
24754     04 1E 06 F1 | 	add	local01, #4
24758     0F 13 02 F6 | 	mov	arg01, local01
2475c     00 14 06 F6 | 	mov	arg02, #0
24760     09 16 C6 F9 | 	decod	arg03, #9
24764     98 00 A0 FD | 	call	#\builtin_bytefill_
24768     0F 25 02 F6 | 	mov	local04, local01
2476c                 | ' #line 1667 "ff.c"
2476c                 | ' 	{
2476c                 | ' 		ibuf = fs->win; szb = 1;
2476c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2476c     00 26 06 F6 | 	mov	local05, #0
24770     34 1E 86 F1 | 	sub	local01, #52
24774                 | LR__3740
24774     0A 1E 06 F1 | 	add	local01, #10
24778     0F 29 E2 FA | 	rdword	local06, local01
2477c     0A 1E 86 F1 | 	sub	local01, #10
24780     14 27 12 F2 | 	cmp	local05, local06 wc
24784     2C 00 90 3D |  if_ae	jmp	#LR__3741
24788     01 1E 06 F1 | 	add	local01, #1
2478c     0F 13 C2 FA | 	rdbyte	arg01, local01
24790     01 1E 86 F1 | 	sub	local01, #1
24794     12 15 02 F6 | 	mov	arg02, local04
24798     11 17 02 F6 | 	mov	arg03, local03
2479c     13 17 02 F1 | 	add	arg03, local05
247a0     01 18 06 F6 | 	mov	arg04, #1
247a4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
247a8     00 FA 0D F2 | 	cmp	result1, #0 wz
247ac     01 26 06 A1 |  if_e	add	local05, #1
247b0     C0 FF 9F AD |  if_e	jmp	#LR__3740
247b4                 | LR__3741
247b4                 | ' 	}
247b4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
247b4     0A 1E 06 F1 | 	add	local01, #10
247b8     0F 25 E2 FA | 	rdword	local04, local01
247bc     12 27 0A F2 | 	cmp	local05, local04 wz
247c0     00 28 06 A6 |  if_e	mov	local06, #0
247c4     01 28 06 56 |  if_ne	mov	local06, #1
247c8     14 FB 01 F6 | 	mov	result1, local06
247cc                 | LR__3742
247cc     A7 F0 03 F6 | 	mov	ptra, fp
247d0     B2 00 A0 FD | 	call	#popregs_
247d4                 | _fatfs_cc_dir_clear_ret
247d4     2D 00 64 FD | 	ret
247d8                 | 
247d8                 | _fatfs_cc_dir_sdi
247d8     06 4A 05 F6 | 	mov	COUNT_, #6
247dc     A8 00 A0 FD | 	call	#pushregs_
247e0     09 1F 02 F6 | 	mov	local01, arg01
247e4     0A 21 02 F6 | 	mov	local02, arg02
247e8     0F 23 02 FB | 	rdlong	local03, local01
247ec     00 10 00 FF 
247f0     00 20 16 F2 | 	cmp	local02, ##2097152 wc
247f4     1F 20 CE C7 |  if_b	test	local02, #31 wz
247f8                 | ' 		return FR_INT_ERR;
247f8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
247fc     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3756
24800     10 1E 06 F1 | 	add	local01, #16
24804     0F 21 62 FC | 	wrlong	local02, local01
24808     08 1E 86 F1 | 	sub	local01, #8
2480c     0F 25 0A FB | 	rdlong	local04, local01 wz
24810     08 1E 86 F1 | 	sub	local01, #8
24814     11 27 C2 AA |  if_e	rdbyte	local05, local03
24818     03 26 16 A2 |  if_e	cmp	local05, #3 wc
2481c     28 22 06 21 |  if_nc_and_z	add	local03, #40
24820     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
24824     28 22 86 21 |  if_nc_and_z	sub	local03, #40
24828     00 24 0E F2 | 	cmp	local04, #0 wz
2482c     3C 00 90 5D |  if_ne	jmp	#LR__3750
24830     10 27 02 F6 | 	mov	local05, local02
24834     05 26 46 F0 | 	shr	local05, #5
24838     08 22 06 F1 | 	add	local03, #8
2483c     11 15 E2 FA | 	rdword	arg02, local03
24840     08 22 86 F1 | 	sub	local03, #8
24844     0A 27 12 F2 | 	cmp	local05, arg02 wc
24848     02 FA 05 36 |  if_ae	mov	result1, #2
2484c     E4 00 90 3D |  if_ae	jmp	#LR__3756
24850     28 22 06 F1 | 	add	local03, #40
24854     11 27 02 FB | 	rdlong	local05, local03
24858     28 22 86 F1 | 	sub	local03, #40
2485c     18 1E 06 F1 | 	add	local01, #24
24860     0F 27 62 FC | 	wrlong	local05, local01
24864     18 1E 86 F1 | 	sub	local01, #24
24868     7C 00 90 FD | 	jmp	#LR__3755
2486c                 | LR__3750
2486c     0A 22 06 F1 | 	add	local03, #10
24870     11 29 E2 FA | 	rdword	local06, local03
24874     0A 22 86 F1 | 	sub	local03, #10
24878     09 28 66 F0 | 	shl	local06, #9
2487c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2487c                 | ' 		while (ofs >= csz) {
2487c                 | LR__3751
2487c     14 21 12 F2 | 	cmp	local02, local06 wc
24880     4C 00 90 CD |  if_b	jmp	#LR__3754
24884     0F 13 02 F6 | 	mov	arg01, local01
24888     12 15 02 F6 | 	mov	arg02, local04
2488c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
24890     FD 24 02 F6 | 	mov	local04, result1
24894     FF FF 7F FF 
24898     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2489c     01 FA 05 A6 |  if_e	mov	result1, #1
248a0     90 00 90 AD |  if_e	jmp	#LR__3756
248a4     02 24 16 F2 | 	cmp	local04, #2 wc
248a8     14 00 90 CD |  if_b	jmp	#LR__3752
248ac     18 22 06 F1 | 	add	local03, #24
248b0     11 27 02 FB | 	rdlong	local05, local03
248b4     18 22 86 F1 | 	sub	local03, #24
248b8     13 25 12 F2 | 	cmp	local04, local05 wc
248bc     08 00 90 CD |  if_b	jmp	#LR__3753
248c0                 | LR__3752
248c0     02 FA 05 F6 | 	mov	result1, #2
248c4     6C 00 90 FD | 	jmp	#LR__3756
248c8                 | LR__3753
248c8     14 21 82 F1 | 	sub	local02, local06
248cc     AC FF 9F FD | 	jmp	#LR__3751
248d0                 | LR__3754
248d0     11 13 02 F6 | 	mov	arg01, local03
248d4     12 15 02 F6 | 	mov	arg02, local04
248d8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
248dc     18 1E 06 F1 | 	add	local01, #24
248e0     0F FB 61 FC | 	wrlong	result1, local01
248e4     18 1E 86 F1 | 	sub	local01, #24
248e8                 | LR__3755
248e8     14 1E 06 F1 | 	add	local01, #20
248ec     0F 25 62 FC | 	wrlong	local04, local01
248f0     04 1E 06 F1 | 	add	local01, #4
248f4     0F 27 0A FB | 	rdlong	local05, local01 wz
248f8     18 1E 86 F1 | 	sub	local01, #24
248fc     02 FA 05 A6 |  if_e	mov	result1, #2
24900     30 00 90 AD |  if_e	jmp	#LR__3756
24904     10 29 02 F6 | 	mov	local06, local02
24908     09 28 46 F0 | 	shr	local06, #9
2490c     18 1E 06 F1 | 	add	local01, #24
24910     0F 27 02 FB | 	rdlong	local05, local01
24914     14 27 02 F1 | 	add	local05, local06
24918     0F 27 62 FC | 	wrlong	local05, local01
2491c     34 22 06 F1 | 	add	local03, #52
24920     FF 21 06 F5 | 	and	local02, #511
24924     10 23 02 F1 | 	add	local03, local02
24928     04 1E 06 F1 | 	add	local01, #4
2492c     0F 23 62 FC | 	wrlong	local03, local01
24930                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
24930                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
24930                 | ' 
24930                 | ' 	return FR_OK;
24930     00 FA 05 F6 | 	mov	result1, #0
24934                 | LR__3756
24934     A7 F0 03 F6 | 	mov	ptra, fp
24938     B2 00 A0 FD | 	call	#popregs_
2493c                 | _fatfs_cc_dir_sdi_ret
2493c     2D 00 64 FD | 	ret
24940                 | 
24940                 | _fatfs_cc_dir_next
24940     05 4A 05 F6 | 	mov	COUNT_, #5
24944     A8 00 A0 FD | 	call	#pushregs_
24948     09 1F 02 F6 | 	mov	local01, arg01
2494c     0A 21 02 F6 | 	mov	local02, arg02
24950     0F 23 02 FB | 	rdlong	local03, local01
24954     10 1E 06 F1 | 	add	local01, #16
24958     0F 25 02 FB | 	rdlong	local04, local01
2495c     10 1E 86 F1 | 	sub	local01, #16
24960     20 24 06 F1 | 	add	local04, #32
24964     00 10 00 FF 
24968     00 24 16 F2 | 	cmp	local04, ##2097152 wc
2496c     18 1E 06 31 |  if_ae	add	local01, #24
24970     0F 01 68 3C |  if_ae	wrlong	#0, local01
24974     18 1E 86 31 |  if_ae	sub	local01, #24
24978     18 1E 06 F1 | 	add	local01, #24
2497c     0F 15 0A FB | 	rdlong	arg02, local01 wz
24980     18 1E 86 F1 | 	sub	local01, #24
24984     04 FA 05 A6 |  if_e	mov	result1, #4
24988     64 01 90 AD |  if_e	jmp	#LR__3765
2498c     FF 25 CE F7 | 	test	local04, #511 wz
24990     3C 01 90 5D |  if_ne	jmp	#LR__3764
24994     18 1E 06 F1 | 	add	local01, #24
24998     0F 15 02 FB | 	rdlong	arg02, local01
2499c     01 14 06 F1 | 	add	arg02, #1
249a0     0F 15 62 FC | 	wrlong	arg02, local01
249a4     04 1E 86 F1 | 	sub	local01, #4
249a8     0F 15 0A FB | 	rdlong	arg02, local01 wz
249ac     14 1E 86 F1 | 	sub	local01, #20
249b0     2C 00 90 5D |  if_ne	jmp	#LR__3760
249b4     12 15 02 F6 | 	mov	arg02, local04
249b8     05 14 46 F0 | 	shr	arg02, #5
249bc     08 22 06 F1 | 	add	local03, #8
249c0     11 21 E2 FA | 	rdword	local02, local03
249c4     08 22 86 F1 | 	sub	local03, #8
249c8     10 15 12 F2 | 	cmp	arg02, local02 wc
249cc     18 1E 06 31 |  if_ae	add	local01, #24
249d0     0F 01 68 3C |  if_ae	wrlong	#0, local01
249d4                 | ' 				dp->sect = 0; return FR_NO_FILE;
249d4     04 FA 05 36 |  if_ae	mov	result1, #4
249d8     14 01 90 3D |  if_ae	jmp	#LR__3765
249dc     F0 00 90 FD | 	jmp	#LR__3763
249e0                 | LR__3760
249e0     12 13 02 F6 | 	mov	arg01, local04
249e4     09 12 46 F0 | 	shr	arg01, #9
249e8     0A 22 06 F1 | 	add	local03, #10
249ec     11 15 E2 FA | 	rdword	arg02, local03
249f0     0A 22 86 F1 | 	sub	local03, #10
249f4     01 14 86 F1 | 	sub	arg02, #1
249f8     0A 13 CA F7 | 	test	arg01, arg02 wz
249fc     D0 00 90 5D |  if_ne	jmp	#LR__3762
24a00     0F 13 02 F6 | 	mov	arg01, local01
24a04     14 1E 06 F1 | 	add	local01, #20
24a08     0F 15 02 FB | 	rdlong	arg02, local01
24a0c     14 1E 86 F1 | 	sub	local01, #20
24a10     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
24a14     FD 26 02 F6 | 	mov	local05, result1
24a18     02 26 16 F2 | 	cmp	local05, #2 wc
24a1c     02 FA 05 C6 |  if_b	mov	result1, #2
24a20     CC 00 90 CD |  if_b	jmp	#LR__3765
24a24     FF FF 7F FF 
24a28     FF 27 0E F2 | 	cmp	local05, ##-1 wz
24a2c     01 FA 05 A6 |  if_e	mov	result1, #1
24a30     BC 00 90 AD |  if_e	jmp	#LR__3765
24a34     18 22 06 F1 | 	add	local03, #24
24a38     11 15 02 FB | 	rdlong	arg02, local03
24a3c     18 22 86 F1 | 	sub	local03, #24
24a40     0A 27 12 F2 | 	cmp	local05, arg02 wc
24a44     68 00 90 CD |  if_b	jmp	#LR__3761
24a48     00 20 0E F2 | 	cmp	local02, #0 wz
24a4c     18 1E 06 A1 |  if_e	add	local01, #24
24a50     0F 01 68 AC |  if_e	wrlong	#0, local01
24a54                 | ' 						dp->sect = 0; return FR_NO_FILE;
24a54     04 FA 05 A6 |  if_e	mov	result1, #4
24a58     94 00 90 AD |  if_e	jmp	#LR__3765
24a5c     0F 13 02 F6 | 	mov	arg01, local01
24a60     14 1E 06 F1 | 	add	local01, #20
24a64     0F 15 02 FB | 	rdlong	arg02, local01
24a68     14 1E 86 F1 | 	sub	local01, #20
24a6c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
24a70     FD 26 0A F6 | 	mov	local05, result1 wz
24a74     07 FA 05 A6 |  if_e	mov	result1, #7
24a78     74 00 90 AD |  if_e	jmp	#LR__3765
24a7c     01 26 0E F2 | 	cmp	local05, #1 wz
24a80     02 FA 05 A6 |  if_e	mov	result1, #2
24a84     68 00 90 AD |  if_e	jmp	#LR__3765
24a88     FF FF 7F FF 
24a8c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
24a90     01 FA 05 A6 |  if_e	mov	result1, #1
24a94     58 00 90 AD |  if_e	jmp	#LR__3765
24a98     13 15 02 F6 | 	mov	arg02, local05
24a9c     11 13 02 F6 | 	mov	arg01, local03
24aa0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
24aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
24aa8     01 FA 05 56 |  if_ne	mov	result1, #1
24aac     40 00 90 5D |  if_ne	jmp	#LR__3765
24ab0                 | LR__3761
24ab0     14 1E 06 F1 | 	add	local01, #20
24ab4     0F 27 62 FC | 	wrlong	local05, local01
24ab8     11 13 02 F6 | 	mov	arg01, local03
24abc     13 15 02 F6 | 	mov	arg02, local05
24ac0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
24ac4     04 1E 06 F1 | 	add	local01, #4
24ac8     0F FB 61 FC | 	wrlong	result1, local01
24acc     18 1E 86 F1 | 	sub	local01, #24
24ad0                 | LR__3762
24ad0                 | LR__3763
24ad0                 | LR__3764
24ad0     10 1E 06 F1 | 	add	local01, #16
24ad4     0F 25 62 FC | 	wrlong	local04, local01
24ad8     34 22 06 F1 | 	add	local03, #52
24adc     FF 25 06 F5 | 	and	local04, #511
24ae0     12 23 02 F1 | 	add	local03, local04
24ae4     0C 1E 06 F1 | 	add	local01, #12
24ae8     0F 23 62 FC | 	wrlong	local03, local01
24aec                 | ' #line 1771 "ff.c"
24aec                 | ' 				}
24aec                 | ' 				dp->clust = clst;
24aec                 | ' 				dp->sect = clst2sect(fs, clst);
24aec                 | ' 			}
24aec                 | ' 		}
24aec                 | ' 	}
24aec                 | ' 	dp->dptr = ofs;
24aec                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
24aec                 | ' 
24aec                 | ' 	return FR_OK;
24aec     00 FA 05 F6 | 	mov	result1, #0
24af0                 | LR__3765
24af0     A7 F0 03 F6 | 	mov	ptra, fp
24af4     B2 00 A0 FD | 	call	#popregs_
24af8                 | _fatfs_cc_dir_next_ret
24af8     2D 00 64 FD | 	ret
24afc                 | 
24afc                 | _fatfs_cc_dir_alloc
24afc     08 4A 05 F6 | 	mov	COUNT_, #8
24b00     A8 00 A0 FD | 	call	#pushregs_
24b04     09 1F 02 F6 | 	mov	local01, arg01
24b08     0A 21 02 F6 | 	mov	local02, arg02
24b0c     0F 23 02 FB | 	rdlong	local03, local01
24b10     0F 13 02 F6 | 	mov	arg01, local01
24b14     00 14 06 F6 | 	mov	arg02, #0
24b18     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
24b1c     FD 24 0A F6 | 	mov	local04, result1 wz
24b20     70 00 90 5D |  if_ne	jmp	#LR__3774
24b24     00 26 06 F6 | 	mov	local05, #0
24b28                 | ' 		n = 0;
24b28                 | ' 		do {
24b28                 | LR__3770
24b28     18 1E 06 F1 | 	add	local01, #24
24b2c     0F 15 02 FB | 	rdlong	arg02, local01
24b30     18 1E 86 F1 | 	sub	local01, #24
24b34     11 13 02 F6 | 	mov	arg01, local03
24b38     38 F3 BF FD | 	call	#_fatfs_cc_move_window
24b3c     FD 24 0A F6 | 	mov	local04, result1 wz
24b40     50 00 90 5D |  if_ne	jmp	#LR__3773
24b44     1C 1E 06 F1 | 	add	local01, #28
24b48     0F 29 02 FB | 	rdlong	local06, local01
24b4c     1C 1E 86 F1 | 	sub	local01, #28
24b50     14 29 C2 FA | 	rdbyte	local06, local06
24b54     E5 28 0E F2 | 	cmp	local06, #229 wz
24b58     1C 1E 06 51 |  if_ne	add	local01, #28
24b5c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
24b60     1C 1E 86 51 |  if_ne	sub	local01, #28
24b64     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
24b68     10 00 90 5D |  if_ne	jmp	#LR__3771
24b6c     01 26 06 F1 | 	add	local05, #1
24b70     10 27 0A F2 | 	cmp	local05, local02 wz
24b74     1C 00 90 AD |  if_e	jmp	#LR__3773
24b78     04 00 90 FD | 	jmp	#LR__3772
24b7c                 | LR__3771
24b7c     00 26 06 F6 | 	mov	local05, #0
24b80                 | LR__3772
24b80     0F 13 02 F6 | 	mov	arg01, local01
24b84     01 14 06 F6 | 	mov	arg02, #1
24b88     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
24b8c     FD 24 0A F6 | 	mov	local04, result1 wz
24b90     94 FF 9F AD |  if_e	jmp	#LR__3770
24b94                 | LR__3773
24b94                 | LR__3774
24b94     04 24 0E F2 | 	cmp	local04, #4 wz
24b98     07 24 06 A6 |  if_e	mov	local04, #7
24b9c                 | ' 	return res;
24b9c     12 FB 01 F6 | 	mov	result1, local04
24ba0     A7 F0 03 F6 | 	mov	ptra, fp
24ba4     B2 00 A0 FD | 	call	#popregs_
24ba8                 | _fatfs_cc_dir_alloc_ret
24ba8     2D 00 64 FD | 	ret
24bac                 | 
24bac                 | _fatfs_cc_ld_clust
24bac     09 01 02 F6 | 	mov	_var01, arg01
24bb0     0A 13 02 F6 | 	mov	arg01, arg02
24bb4     1A 12 06 F1 | 	add	arg01, #26
24bb8                 | ' {
24bb8                 | ' 
24bb8                 | ' 	return *((WORD*)ptr);
24bb8     09 FB E1 FA | 	rdword	result1, arg01
24bbc     FD 12 32 F9 | 	getword	arg01, result1, #0
24bc0     00 01 C2 FA | 	rdbyte	_var01, _var01
24bc4     03 00 0E F2 | 	cmp	_var01, #3 wz
24bc8     14 14 06 A1 |  if_e	add	arg02, #20
24bcc                 | ' {
24bcc                 | ' 
24bcc                 | ' 	return *((WORD*)ptr);
24bcc     0A FB E1 AA |  if_e	rdword	result1, arg02
24bd0     10 FA 65 A0 |  if_e	shl	result1, #16
24bd4     FD 12 42 A5 |  if_e	or	arg01, result1
24bd8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
24bd8                 | ' 	}
24bd8                 | ' 
24bd8                 | ' 	return cl;
24bd8     09 FB 01 F6 | 	mov	result1, arg01
24bdc                 | _fatfs_cc_ld_clust_ret
24bdc     2D 00 64 FD | 	ret
24be0                 | 
24be0                 | _fatfs_cc_st_clust
24be0     09 01 02 F6 | 	mov	_var01, arg01
24be4     0A 13 02 F6 | 	mov	arg01, arg02
24be8     1A 12 06 F1 | 	add	arg01, #26
24bec     09 17 52 FC | 	wrword	arg03, arg01
24bf0     00 01 C2 FA | 	rdbyte	_var01, _var01
24bf4     03 00 0E F2 | 	cmp	_var01, #3 wz
24bf8     14 14 06 A1 |  if_e	add	arg02, #20
24bfc     10 16 46 A0 |  if_e	shr	arg03, #16
24c00     0A 17 52 AC |  if_e	wrword	arg03, arg02
24c04                 | _fatfs_cc_st_clust_ret
24c04     2D 00 64 FD | 	ret
24c08                 | 
24c08                 | _fatfs_cc_cmp_lfn
24c08     07 4A 05 F6 | 	mov	COUNT_, #7
24c0c     A8 00 A0 FD | 	call	#pushregs_
24c10     09 1F 02 F6 | 	mov	local01, arg01
24c14     0A 13 02 F6 | 	mov	arg01, arg02
24c18     1A 12 06 F1 | 	add	arg01, #26
24c1c                 | ' {
24c1c                 | ' 
24c1c                 | ' 	return *((WORD*)ptr);
24c1c     09 FB E9 FA | 	rdword	result1, arg01 wz
24c20     00 FA 05 56 |  if_ne	mov	result1, #0
24c24     E0 00 90 5D |  if_ne	jmp	#LR__3786
24c28     0A 21 C2 FA | 	rdbyte	local02, arg02
24c2c     3F 20 06 F5 | 	and	local02, #63
24c30     01 20 86 F1 | 	sub	local02, #1
24c34     0D 20 06 FD | 	qmul	local02, #13
24c38                 | ' 
24c38                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
24c38                 | ' 
24c38                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
24c38     01 22 06 F6 | 	mov	local03, #1
24c3c     00 24 06 F6 | 	mov	local04, #0
24c40     18 26 62 FD | 	getqx	local05
24c44                 | LR__3780
24c44     0D 24 16 F2 | 	cmp	local04, #13 wc
24c48     9C 00 90 3D |  if_ae	jmp	#LR__3785
24c4c     0A 13 02 F6 | 	mov	arg01, arg02
24c50     12 21 02 F6 | 	mov	local02, local04
24c54     01 00 00 FF 
24c58     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
24c5c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
24c60     10 21 C2 FA | 	rdbyte	local02, local02
24c64     01 20 06 FA | 	mul	local02, #1
24c68     10 13 02 F1 | 	add	arg01, local02
24c6c     01 00 00 FF 
24c70     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
24c74                 | ' {
24c74                 | ' 
24c74                 | ' 	return *((WORD*)ptr);
24c74     09 FB E1 FA | 	rdword	result1, arg01
24c78     FD 28 02 F6 | 	mov	local06, result1
24c7c     11 21 02 F6 | 	mov	local02, local03
24c80     0F 20 4E F7 | 	zerox	local02, #15 wz
24c84     44 00 90 AD |  if_e	jmp	#LR__3783
24c88     00 27 16 F2 | 	cmp	local05, #256 wc
24c8c     2C 00 90 3D |  if_ae	jmp	#LR__3781
24c90     14 13 32 F9 | 	getword	arg01, local06, #0
24c94     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
24c98     FD 20 02 F6 | 	mov	local02, result1
24c9c     13 23 02 F6 | 	mov	local03, local05
24ca0     01 22 66 F0 | 	shl	local03, #1
24ca4     0F 23 02 F1 | 	add	local03, local01
24ca8     11 13 E2 FA | 	rdword	arg01, local03
24cac     01 26 06 F1 | 	add	local05, #1
24cb0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
24cb4     FD 20 0A F2 | 	cmp	local02, result1 wz
24cb8     08 00 90 AD |  if_e	jmp	#LR__3782
24cbc                 | LR__3781
24cbc                 | ' 				return 0;
24cbc     00 FA 05 F6 | 	mov	result1, #0
24cc0     44 00 90 FD | 	jmp	#LR__3786
24cc4                 | LR__3782
24cc4     14 23 02 F6 | 	mov	local03, local06
24cc8     14 00 90 FD | 	jmp	#LR__3784
24ccc                 | LR__3783
24ccc     14 29 32 F9 | 	getword	local06, local06, #0
24cd0     7F 00 00 FF 
24cd4     FF 29 0E F2 | 	cmp	local06, ##65535 wz
24cd8     00 FA 05 56 |  if_ne	mov	result1, #0
24cdc     28 00 90 5D |  if_ne	jmp	#LR__3786
24ce0                 | LR__3784
24ce0     01 24 06 F1 | 	add	local04, #1
24ce4     5C FF 9F FD | 	jmp	#LR__3780
24ce8                 | LR__3785
24ce8     0A 21 C2 FA | 	rdbyte	local02, arg02
24cec     40 20 CE F7 | 	test	local02, #64 wz
24cf0     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
24cf4     01 26 66 50 |  if_ne	shl	local05, #1
24cf8     0F 27 02 51 |  if_ne	add	local05, local01
24cfc     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
24d00     00 FA 05 56 |  if_ne	mov	result1, #0
24d04                 | ' 
24d04                 | ' 	return 1;
24d04     01 FA 05 A6 |  if_e	mov	result1, #1
24d08                 | LR__3786
24d08     A7 F0 03 F6 | 	mov	ptra, fp
24d0c     B2 00 A0 FD | 	call	#popregs_
24d10                 | _fatfs_cc_cmp_lfn_ret
24d10     2D 00 64 FD | 	ret
24d14                 | 
24d14                 | _fatfs_cc_pick_lfn
24d14     09 01 02 F6 | 	mov	_var01, arg01
24d18     0A 13 02 F6 | 	mov	arg01, arg02
24d1c     1A 12 06 F1 | 	add	arg01, #26
24d20                 | ' {
24d20                 | ' 
24d20                 | ' 	return *((WORD*)ptr);
24d20     09 FB E9 FA | 	rdword	result1, arg01 wz
24d24     00 FA 05 56 |  if_ne	mov	result1, #0
24d28     D4 00 90 5D |  if_ne	jmp	#LR__3795
24d2c     0A 03 C2 FA | 	rdbyte	_var02, arg02
24d30     40 02 26 F5 | 	andn	_var02, #64
24d34     01 02 86 F1 | 	sub	_var02, #1
24d38     0D 02 06 FD | 	qmul	_var02, #13
24d3c                 | ' 
24d3c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
24d3c                 | ' 
24d3c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
24d3c     01 04 06 F6 | 	mov	_var03, #1
24d40     00 06 06 F6 | 	mov	_var04, #0
24d44     18 08 62 FD | 	getqx	_var05
24d48                 | LR__3790
24d48     0D 06 16 F2 | 	cmp	_var04, #13 wc
24d4c     80 00 90 3D |  if_ae	jmp	#LR__3793
24d50     0A 13 02 F6 | 	mov	arg01, arg02
24d54     03 03 02 F6 | 	mov	_var02, _var04
24d58     01 00 00 FF 
24d5c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
24d60     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
24d64     01 03 C2 FA | 	rdbyte	_var02, _var02
24d68     01 02 06 FA | 	mul	_var02, #1
24d6c     01 13 02 F1 | 	add	arg01, _var02
24d70     01 00 00 FF 
24d74     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
24d78                 | ' {
24d78                 | ' 
24d78                 | ' 	return *((WORD*)ptr);
24d78     09 FB E1 FA | 	rdword	result1, arg01
24d7c     FD 0A 02 F6 | 	mov	_var06, result1
24d80     02 03 02 F6 | 	mov	_var02, _var03
24d84     0F 02 4E F7 | 	zerox	_var02, #15 wz
24d88     28 00 90 AD |  if_e	jmp	#LR__3791
24d8c     00 09 16 F2 | 	cmp	_var05, #256 wc
24d90     00 FA 05 36 |  if_ae	mov	result1, #0
24d94     68 00 90 3D |  if_ae	jmp	#LR__3795
24d98     04 03 02 F6 | 	mov	_var02, _var05
24d9c     01 02 66 F0 | 	shl	_var02, #1
24da0     00 03 02 F1 | 	add	_var02, _var01
24da4     05 05 02 F6 | 	mov	_var03, _var06
24da8     01 05 52 FC | 	wrword	_var03, _var02
24dac     01 08 06 F1 | 	add	_var05, #1
24db0     14 00 90 FD | 	jmp	#LR__3792
24db4                 | LR__3791
24db4     05 0B 32 F9 | 	getword	_var06, _var06, #0
24db8     7F 00 00 FF 
24dbc     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
24dc0     00 FA 05 56 |  if_ne	mov	result1, #0
24dc4     38 00 90 5D |  if_ne	jmp	#LR__3795
24dc8                 | LR__3792
24dc8     01 06 06 F1 | 	add	_var04, #1
24dcc     78 FF 9F FD | 	jmp	#LR__3790
24dd0                 | LR__3793
24dd0     0A 03 C2 FA | 	rdbyte	_var02, arg02
24dd4     40 02 CE F7 | 	test	_var02, #64 wz
24dd8     02 0D 02 56 |  if_ne	mov	_var07, _var03
24ddc     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
24de0     18 00 90 AD |  if_e	jmp	#LR__3794
24de4     00 09 16 F2 | 	cmp	_var05, #256 wc
24de8     00 FA 05 36 |  if_ae	mov	result1, #0
24dec     10 00 90 3D |  if_ae	jmp	#LR__3795
24df0     01 08 66 F0 | 	shl	_var05, #1
24df4     00 09 02 F1 | 	add	_var05, _var01
24df8     04 01 58 FC | 	wrword	#0, _var05
24dfc                 | LR__3794
24dfc                 | ' 		lfnbuf[i] = 0;
24dfc                 | ' 	}
24dfc                 | ' 
24dfc                 | ' 	return 1;
24dfc     01 FA 05 F6 | 	mov	result1, #1
24e00                 | LR__3795
24e00                 | _fatfs_cc_pick_lfn_ret
24e00     2D 00 64 FD | 	ret
24e04                 | 
24e04                 | _fatfs_cc_put_lfn
24e04     0D 14 06 F1 | 	add	arg02, #13
24e08     0A 19 42 FC | 	wrbyte	arg04, arg02
24e0c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
24e10     01 18 86 F1 | 	sub	arg04, #1
24e14     0D 18 06 FD | 	qmul	arg04, #13
24e18     09 01 02 F6 | 	mov	_var01, arg01
24e1c     02 14 86 F1 | 	sub	arg02, #2
24e20     0A 1F 48 FC | 	wrbyte	#15, arg02
24e24     01 14 06 F1 | 	add	arg02, #1
24e28     0A 01 48 FC | 	wrbyte	#0, arg02
24e2c     0C 14 86 F1 | 	sub	arg02, #12
24e30     0A 13 02 F6 | 	mov	arg01, arg02
24e34     1A 12 06 F1 | 	add	arg01, #26
24e38     09 01 58 FC | 	wrword	#0, arg01
24e3c     00 02 06 F6 | 	mov	_var02, #0
24e40     00 04 06 F6 | 	mov	_var03, #0
24e44                 | ' 	BYTE* dir,
24e44                 | ' 	BYTE ord,
24e44                 | ' 	BYTE sum
24e44                 | ' )
24e44                 | ' {
24e44                 | ' 	UINT i, s;
24e44                 | ' 	WCHAR wc;
24e44                 | ' 
24e44                 | ' 
24e44                 | ' 	dir[ 13 ] = sum;
24e44                 | ' 	dir[ 11 ] =  0x0F ;
24e44                 | ' 	dir[ 12 ] = 0;
24e44                 | ' 	st_word(dir +  26 , 0);
24e44                 | ' 
24e44                 | ' 	i = (ord - 1) * 13;
24e44                 | ' 	s = wc = 0;
24e44                 | ' 	do {
24e44     01 00 00 FF 
24e48     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
24e4c     18 06 62 FD | 	getqx	_var04
24e50     97 2A 48 FB | 	callpa	#(@LR__3801-@LR__3800)>>2,fcache_load_ptr_
24e54                 | LR__3800
24e54     01 19 32 F9 | 	getword	arg04, _var02, #0
24e58     7F 00 00 FF 
24e5c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
24e60     03 13 02 56 |  if_ne	mov	arg01, _var04
24e64     01 06 06 51 |  if_ne	add	_var04, #1
24e68     01 12 66 50 |  if_ne	shl	arg01, #1
24e6c     00 13 02 51 |  if_ne	add	arg01, _var01
24e70     09 03 E2 5A |  if_ne	rdword	_var02, arg01
24e74     0A 13 02 F6 | 	mov	arg01, arg02
24e78     02 19 02 F6 | 	mov	arg04, _var03
24e7c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
24e80     0C 19 C2 FA | 	rdbyte	arg04, arg04
24e84     01 18 06 FA | 	mul	arg04, #1
24e88     0C 13 02 F1 | 	add	arg01, arg04
24e8c     09 03 52 FC | 	wrword	_var02, arg01
24e90     01 19 02 F6 | 	mov	arg04, _var02
24e94     0F 18 4E F7 | 	zerox	arg04, #15 wz
24e98     0F 02 CE A9 |  if_e	bmask	_var02, #15
24e9c     01 04 06 F1 | 	add	_var03, #1
24ea0     0D 04 16 F2 | 	cmp	_var03, #13 wc
24ea4     AC FF 9F CD |  if_b	jmp	#LR__3800
24ea8                 | LR__3801
24ea8     01 00 00 FF 
24eac     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
24eb0     01 03 32 F9 | 	getword	_var02, _var02, #0
24eb4     7F 00 00 FF 
24eb8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
24ebc     01 06 66 50 |  if_ne	shl	_var04, #1
24ec0     00 07 02 51 |  if_ne	add	_var04, _var01
24ec4     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
24ec8     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
24ecc     40 16 46 A5 |  if_e	or	arg03, #64
24ed0     0A 17 42 FC | 	wrbyte	arg03, arg02
24ed4                 | _fatfs_cc_put_lfn_ret
24ed4     2D 00 64 FD | 	ret
24ed8                 | 
24ed8                 | _fatfs_cc_gen_numname
24ed8     08 4A 05 F6 | 	mov	COUNT_, #8
24edc     A8 00 A0 FD | 	call	#pushregs_
24ee0     2C F0 07 F1 | 	add	ptra, #44
24ee4     09 1F 02 F6 | 	mov	local01, arg01
24ee8     0A 21 02 F6 | 	mov	local02, arg02
24eec     0B 23 02 F6 | 	mov	local03, arg03
24ef0     0C 25 02 F6 | 	mov	local04, arg04
24ef4     0F 13 02 F6 | 	mov	arg01, local01
24ef8     10 15 02 F6 | 	mov	arg02, local02
24efc     0B 16 06 F6 | 	mov	arg03, #11
24f00     FC 77 BF FD | 	call	#__system____builtin_memmove
24f04     06 24 16 F2 | 	cmp	local04, #6 wc
24f08     48 00 90 CD |  if_b	jmp	#LR__3815
24f0c     12 27 02 F6 | 	mov	local05, local04
24f10     97 1E 48 FB | 	callpa	#(@LR__3813-@LR__3810)>>2,fcache_load_ptr_
24f14                 | ' 		sreg = seq;
24f14                 | ' 		while (*lfn) {
24f14                 | LR__3810
24f14     11 29 EA FA | 	rdword	local06, local03 wz
24f18     34 00 90 AD |  if_e	jmp	#LR__3814
24f1c     11 2B E2 FA | 	rdword	local07, local03
24f20                 | ' 			wc = *lfn++;
24f20                 | ' 			for (i = 0; i < 16; i++) {
24f20     02 22 06 F1 | 	add	local03, #2
24f24     10 12 DC FC | 	rep	@LR__3812, #16
24f28                 | LR__3811
24f28     01 26 66 F0 | 	shl	local05, #1
24f2c     15 29 32 F9 | 	getword	local06, local07, #0
24f30     01 28 06 F5 | 	and	local06, #1
24f34     14 27 02 F1 | 	add	local05, local06
24f38     15 2B 32 F9 | 	getword	local07, local07, #0
24f3c     01 2A 46 F0 | 	shr	local07, #1
24f40     10 26 2E F4 | 	testbn	local05, #16 wz
24f44     88 00 00 5F 
24f48     21 26 66 55 |  if_ne	xor	local05, ##69665
24f4c                 | LR__3812
24f4c     C4 FF 9F FD | 	jmp	#LR__3810
24f50                 | LR__3813
24f50                 | LR__3814
24f50     13 25 02 F6 | 	mov	local04, local05
24f54                 | LR__3815
24f54     07 2A 06 F6 | 	mov	local07, #7
24f58                 | ' 			}
24f58                 | ' 		}
24f58                 | ' 		seq = (UINT)sreg;
24f58                 | ' 	}
24f58                 | ' 
24f58                 | ' 
24f58                 | ' 	i = 7;
24f58                 | ' 	do {
24f58     10 4E 05 F1 | 	add	fp, #16
24f5c     97 1A 48 FB | 	callpa	#(@LR__3817-@LR__3816)>>2,fcache_load_ptr_
24f60                 | LR__3816
24f60     12 27 42 F8 | 	getnib	local05, local04, #0
24f64     30 26 06 F1 | 	add	local05, #48
24f68     04 24 46 F0 | 	shr	local04, #4
24f6c     13 29 E2 F8 | 	getbyte	local06, local05, #0
24f70     3A 28 16 F2 | 	cmp	local06, #58 wc
24f74     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
24f78     07 26 06 31 |  if_ae	add	local05, #7
24f7c     15 29 02 F6 | 	mov	local06, local07
24f80     01 2A 8E F1 | 	sub	local07, #1 wz
24f84     A7 28 02 F1 | 	add	local06, fp
24f88     14 27 42 FC | 	wrbyte	local05, local06
24f8c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
24f90     CC FF 9F 5D |  if_ne	jmp	#LR__3816
24f94                 | LR__3817
24f94     15 29 02 F6 | 	mov	local06, local07
24f98     A7 28 02 F1 | 	add	local06, fp
24f9c     14 FD 48 FC | 	wrbyte	#126, local06
24fa0                 | ' 	ns[i] = '~';
24fa0                 | ' 
24fa0                 | ' 
24fa0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
24fa0     00 26 06 F6 | 	mov	local05, #0
24fa4     10 4E 85 F1 | 	sub	fp, #16
24fa8     97 2A 48 FB | 	callpa	#(@LR__3820-@LR__3818)>>2,fcache_load_ptr_
24fac                 | LR__3818
24fac     15 27 12 F2 | 	cmp	local05, local07 wc
24fb0     4C 00 90 3D |  if_ae	jmp	#LR__3821
24fb4     13 29 02 F6 | 	mov	local06, local05
24fb8     0F 29 02 F1 | 	add	local06, local01
24fbc     14 29 C2 FA | 	rdbyte	local06, local06
24fc0     20 28 0E F2 | 	cmp	local06, #32 wz
24fc4     38 00 90 AD |  if_e	jmp	#LR__3821
24fc8     13 13 02 F6 | 	mov	arg01, local05
24fcc     0F 13 02 F1 | 	add	arg01, local01
24fd0     09 13 CA FA | 	rdbyte	arg01, arg01 wz
24fd4     00 FA 05 56 |  if_ne	mov	result1, #0
24fd8                 | ' 
24fd8                 | ' 	return 0;
24fd8     00 FA 05 A6 |  if_e	mov	result1, #0
24fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
24fe0     14 00 90 AD |  if_e	jmp	#LR__3819
24fe4     15 29 02 F6 | 	mov	local06, local07
24fe8     01 28 86 F1 | 	sub	local06, #1
24fec     14 27 0A F2 | 	cmp	local05, local06 wz
24ff0     0C 00 90 AD |  if_e	jmp	#LR__3821
24ff4     01 26 06 F1 | 	add	local05, #1
24ff8                 | LR__3819
24ff8     01 26 06 F1 | 	add	local05, #1
24ffc     AC FF 9F FD | 	jmp	#LR__3818
25000                 | LR__3820
25000                 | LR__3821
25000     97 20 48 FB | 	callpa	#(@LR__3825-@LR__3822)>>2,fcache_load_ptr_
25004                 | ' 			j++;
25004                 | ' 		}
25004                 | ' 	}
25004                 | ' 	do {
25004                 | LR__3822
25004     13 29 02 F6 | 	mov	local06, local05
25008     0F 29 02 F1 | 	add	local06, local01
2500c     08 2A 16 F2 | 	cmp	local07, #8 wc
25010     01 26 06 F1 | 	add	local05, #1
25014     1C 00 90 3D |  if_ae	jmp	#LR__3823
25018     15 25 02 F6 | 	mov	local04, local07
2501c     10 4E 05 F1 | 	add	fp, #16
25020     A7 24 02 F1 | 	add	local04, fp
25024     12 2D C2 FA | 	rdbyte	local08, local04
25028     01 2A 06 F1 | 	add	local07, #1
2502c     10 4E 85 F1 | 	sub	fp, #16
25030     04 00 90 FD | 	jmp	#LR__3824
25034                 | LR__3823
25034     20 2C 06 F6 | 	mov	local08, #32
25038                 | LR__3824
25038     14 2D 42 FC | 	wrbyte	local08, local06
2503c     08 26 16 F2 | 	cmp	local05, #8 wc
25040     C0 FF 9F CD |  if_b	jmp	#LR__3822
25044                 | LR__3825
25044     A7 F0 03 F6 | 	mov	ptra, fp
25048     B2 00 A0 FD | 	call	#popregs_
2504c                 | _fatfs_cc_gen_numname_ret
2504c     2D 00 64 FD | 	ret
25050                 | 
25050                 | _fatfs_cc_sum_sfn
25050     00 00 06 F6 | 	mov	_var01, #0
25054                 | ' )
25054                 | ' {
25054                 | ' 	BYTE sum = 0;
25054                 | ' 	UINT n = 11;
25054                 | ' 
25054                 | ' 	do {
25054     97 12 48 FB | 	callpa	#(@LR__3832-@LR__3830)>>2,fcache_load_ptr_
25058                 | LR__3830
25058     0B 10 DC FC | 	rep	@LR__3833, #11
2505c                 | LR__3831
2505c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
25060     01 FA 45 F0 | 	shr	result1, #1
25064     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
25068     07 00 66 F0 | 	shl	_var01, #7
2506c     00 FB 01 F1 | 	add	result1, _var01
25070     09 01 C2 FA | 	rdbyte	_var01, arg01
25074     FD 00 02 F1 | 	add	_var01, result1
25078     01 12 06 F1 | 	add	arg01, #1
2507c                 | LR__3832
2507c                 | LR__3833
2507c                 | ' 	return sum;
2507c     00 FB 01 F6 | 	mov	result1, _var01
25080                 | _fatfs_cc_sum_sfn_ret
25080     2D 00 64 FD | 	ret
25084                 | 
25084                 | _fatfs_cc_dir_read
25084     0C 4A 05 F6 | 	mov	COUNT_, #12
25088     A8 00 A0 FD | 	call	#pushregs_
2508c     09 1F 02 F6 | 	mov	local01, arg01
25090     0A 21 02 F6 | 	mov	local02, arg02
25094     04 22 06 F6 | 	mov	local03, #4
25098     0F 25 02 FB | 	rdlong	local04, local01
2509c     FF 26 06 F6 | 	mov	local05, #255
250a0     FF 28 06 F6 | 	mov	local06, #255
250a4                 | ' )
250a4                 | ' {
250a4                 | ' 	FRESULT res = FR_NO_FILE;
250a4                 | ' 	FATFS *fs = dp->obj.fs;
250a4                 | ' 	BYTE attr, b;
250a4                 | ' 
250a4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
250a4                 | ' 
250a4                 | ' 
250a4                 | ' 	while (dp->sect) {
250a4                 | LR__3840
250a4     18 1E 06 F1 | 	add	local01, #24
250a8     0F FB 09 FB | 	rdlong	result1, local01 wz
250ac     18 1E 86 F1 | 	sub	local01, #24
250b0     AC 01 90 AD |  if_e	jmp	#LR__3850
250b4     18 1E 06 F1 | 	add	local01, #24
250b8     0F 15 02 FB | 	rdlong	arg02, local01
250bc     18 1E 86 F1 | 	sub	local01, #24
250c0     12 13 02 F6 | 	mov	arg01, local04
250c4     AC ED BF FD | 	call	#_fatfs_cc_move_window
250c8     FD 22 0A F6 | 	mov	local03, result1 wz
250cc     90 01 90 5D |  if_ne	jmp	#LR__3850
250d0     1C 1E 06 F1 | 	add	local01, #28
250d4     0F FB 01 FB | 	rdlong	result1, local01
250d8     1C 1E 86 F1 | 	sub	local01, #28
250dc     FD 2A C2 FA | 	rdbyte	local07, result1
250e0     15 FB 01 F6 | 	mov	result1, local07
250e4     07 FA 4D F7 | 	zerox	result1, #7 wz
250e8     04 22 06 A6 |  if_e	mov	local03, #4
250ec                 | ' 			res = FR_NO_FILE; break;
250ec     70 01 90 AD |  if_e	jmp	#LR__3850
250f0     1C 1E 06 F1 | 	add	local01, #28
250f4     0F 2D 02 FB | 	rdlong	local08, local01
250f8     0B 2C 06 F1 | 	add	local08, #11
250fc     16 2F C2 FA | 	rdbyte	local09, local08
25100     3F 2E 06 F5 | 	and	local09, #63
25104     16 1E 86 F1 | 	sub	local01, #22
25108     0F 2F 42 FC | 	wrbyte	local09, local01
2510c     06 1E 86 F1 | 	sub	local01, #6
25110     15 FB E1 F8 | 	getbyte	result1, local07, #0
25114     E5 FA 0D F2 | 	cmp	result1, #229 wz
25118     15 2D 02 56 |  if_ne	mov	local08, local07
2511c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
25120     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
25124     1C 00 90 AD |  if_e	jmp	#LR__3841
25128     00 30 06 F6 | 	mov	local10, #0
2512c     17 2D E2 F8 | 	getbyte	local08, local09, #0
25130     20 2C 26 F5 | 	andn	local08, #32
25134     08 2C 0E F2 | 	cmp	local08, #8 wz
25138     01 30 06 A6 |  if_e	mov	local10, #1
2513c     10 31 0A F2 | 	cmp	local10, local02 wz
25140     08 00 90 AD |  if_e	jmp	#LR__3842
25144                 | LR__3841
25144     FF 26 06 F6 | 	mov	local05, #255
25148     00 01 90 FD | 	jmp	#LR__3849
2514c                 | LR__3842
2514c     17 2F E2 F8 | 	getbyte	local09, local09, #0
25150     0F 2E 0E F2 | 	cmp	local09, #15 wz
25154     B4 00 90 5D |  if_ne	jmp	#LR__3846
25158     15 33 E2 F8 | 	getbyte	local11, local07, #0
2515c     40 32 CE F7 | 	test	local11, #64 wz
25160     30 00 90 AD |  if_e	jmp	#LR__3843
25164     1C 1E 06 F1 | 	add	local01, #28
25168     0F 33 02 FB | 	rdlong	local11, local01
2516c     0D 32 06 F1 | 	add	local11, #13
25170     19 29 C2 FA | 	rdbyte	local06, local11
25174     15 2B E2 F8 | 	getbyte	local07, local07, #0
25178     BF 2A 06 F5 | 	and	local07, #191
2517c     15 27 02 F6 | 	mov	local05, local07
25180     0C 1E 86 F1 | 	sub	local01, #12
25184     0F 33 02 FB | 	rdlong	local11, local01
25188     1C 1E 06 F1 | 	add	local01, #28
2518c     0F 33 62 FC | 	wrlong	local11, local01
25190     2C 1E 86 F1 | 	sub	local01, #44
25194                 | LR__3843
25194     15 2D E2 F8 | 	getbyte	local08, local07, #0
25198     13 31 E2 F8 | 	getbyte	local10, local05, #0
2519c     18 2D 0A F2 | 	cmp	local08, local10 wz
251a0     5C 00 90 5D |  if_ne	jmp	#LR__3844
251a4     14 31 E2 F8 | 	getbyte	local10, local06, #0
251a8     1C 1E 06 F1 | 	add	local01, #28
251ac     0F 2F 02 FB | 	rdlong	local09, local01
251b0     1C 1E 86 F1 | 	sub	local01, #28
251b4     0D 2E 06 F1 | 	add	local09, #13
251b8     17 2D C2 FA | 	rdbyte	local08, local09
251bc     16 2F E2 F8 | 	getbyte	local09, local08, #0
251c0     17 31 0A F2 | 	cmp	local10, local09 wz
251c4     38 00 90 5D |  if_ne	jmp	#LR__3844
251c8     0C 24 06 F1 | 	add	local04, #12
251cc     12 13 02 FB | 	rdlong	arg01, local04
251d0     0C 24 86 F1 | 	sub	local04, #12
251d4     1C 1E 06 F1 | 	add	local01, #28
251d8     0F 35 02 FB | 	rdlong	local12, local01
251dc     1C 1E 86 F1 | 	sub	local01, #28
251e0     1A 15 02 F6 | 	mov	arg02, local12
251e4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
251e8     00 FA 4D F2 | 	cmps	result1, #0 wz
251ec     13 35 02 56 |  if_ne	mov	local12, local05
251f0     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
251f4     01 34 86 51 |  if_ne	sub	local12, #1
251f8     1A 33 02 56 |  if_ne	mov	local11, local12
251fc     04 00 90 5D |  if_ne	jmp	#LR__3845
25200                 | LR__3844
25200     FF 32 06 F6 | 	mov	local11, #255
25204                 | LR__3845
25204     19 27 02 F6 | 	mov	local05, local11
25208     40 00 90 FD | 	jmp	#LR__3848
2520c                 | LR__3846
2520c     13 33 02 F6 | 	mov	local11, local05
25210     07 32 4E F7 | 	zerox	local11, #7 wz
25214     20 00 90 5D |  if_ne	jmp	#LR__3847
25218     14 29 E2 F8 | 	getbyte	local06, local06, #0
2521c     1C 1E 06 F1 | 	add	local01, #28
25220     0F 13 02 FB | 	rdlong	arg01, local01
25224     1C 1E 86 F1 | 	sub	local01, #28
25228     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2522c     FD FA E1 F8 | 	getbyte	result1, result1, #0
25230     FD 28 0A F2 | 	cmp	local06, result1 wz
25234     28 00 90 AD |  if_e	jmp	#LR__3850
25238                 | LR__3847
25238     2C 1E 06 F1 | 	add	local01, #44
2523c     FF FF FF FF 
25240     0F FF 6B FC | 	wrlong	##-1, local01
25244     2C 1E 86 F1 | 	sub	local01, #44
25248                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
25248                 | ' 					}
25248                 | ' 					break;
25248     14 00 90 FD | 	jmp	#LR__3850
2524c                 | LR__3848
2524c                 | LR__3849
2524c     0F 13 02 F6 | 	mov	arg01, local01
25250     00 14 06 F6 | 	mov	arg02, #0
25254     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
25258     FD 22 0A F6 | 	mov	local03, result1 wz
2525c     44 FE 9F AD |  if_e	jmp	#LR__3840
25260                 | LR__3850
25260     00 22 0E F2 | 	cmp	local03, #0 wz
25264     18 1E 06 51 |  if_ne	add	local01, #24
25268     0F 01 68 5C |  if_ne	wrlong	#0, local01
2526c                 | ' 	return res;
2526c     11 FB 01 F6 | 	mov	result1, local03
25270     A7 F0 03 F6 | 	mov	ptra, fp
25274     B2 00 A0 FD | 	call	#popregs_
25278                 | _fatfs_cc_dir_read_ret
25278     2D 00 64 FD | 	ret
2527c                 | 
2527c                 | _fatfs_cc_dir_find
2527c     0B 4A 05 F6 | 	mov	COUNT_, #11
25280     A8 00 A0 FD | 	call	#pushregs_
25284     09 1F 02 F6 | 	mov	local01, arg01
25288     0F 21 02 FB | 	rdlong	local02, local01
2528c     0F 13 02 F6 | 	mov	arg01, local01
25290     00 14 06 F6 | 	mov	arg02, #0
25294     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
25298     00 FA 0D F2 | 	cmp	result1, #0 wz
2529c     18 02 90 5D |  if_ne	jmp	#LR__3872
252a0     FF 22 06 F6 | 	mov	local03, #255
252a4     FF 24 06 F6 | 	mov	local04, #255
252a8     2C 1E 06 F1 | 	add	local01, #44
252ac     FF FF FF FF 
252b0     0F FF 6B FC | 	wrlong	##-1, local01
252b4     2C 1E 86 F1 | 	sub	local01, #44
252b8                 | ' #line 2404 "ff.c"
252b8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
252b8                 | ' 
252b8                 | ' 	do {
252b8                 | LR__3860
252b8     18 1E 06 F1 | 	add	local01, #24
252bc     0F 15 02 FB | 	rdlong	arg02, local01
252c0     18 1E 86 F1 | 	sub	local01, #24
252c4     10 13 02 F6 | 	mov	arg01, local02
252c8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
252cc     FD 26 0A F6 | 	mov	local05, result1 wz
252d0     E0 01 90 5D |  if_ne	jmp	#LR__3871
252d4     1C 1E 06 F1 | 	add	local01, #28
252d8     0F 17 02 FB | 	rdlong	arg03, local01
252dc     1C 1E 86 F1 | 	sub	local01, #28
252e0     0B 29 C2 FA | 	rdbyte	local06, arg03
252e4     14 17 02 F6 | 	mov	arg03, local06
252e8     07 16 4E F7 | 	zerox	arg03, #7 wz
252ec     04 26 06 A6 |  if_e	mov	local05, #4
252f0     C0 01 90 AD |  if_e	jmp	#LR__3871
252f4     1C 1E 06 F1 | 	add	local01, #28
252f8     0F 2B 02 FB | 	rdlong	local07, local01
252fc     15 17 02 F6 | 	mov	arg03, local07
25300     0B 16 06 F1 | 	add	arg03, #11
25304     0B 2D C2 FA | 	rdbyte	local08, arg03
25308     3F 2C 06 F5 | 	and	local08, #63
2530c     16 1E 86 F1 | 	sub	local01, #22
25310     0F 2D 42 FC | 	wrbyte	local08, local01
25314     06 1E 86 F1 | 	sub	local01, #6
25318     14 17 E2 F8 | 	getbyte	arg03, local06, #0
2531c     E5 16 0E F2 | 	cmp	arg03, #229 wz
25320     18 00 90 AD |  if_e	jmp	#LR__3861
25324     16 17 E2 F8 | 	getbyte	arg03, local08, #0
25328     08 16 CE F7 | 	test	arg03, #8 wz
2532c     16 2B 02 56 |  if_ne	mov	local07, local08
25330     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
25334     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
25338     18 00 90 AD |  if_e	jmp	#LR__3862
2533c                 | LR__3861
2533c     FF 24 06 F6 | 	mov	local04, #255
25340     2C 1E 06 F1 | 	add	local01, #44
25344     FF FF FF FF 
25348     0F FF 6B FC | 	wrlong	##-1, local01
2534c     2C 1E 86 F1 | 	sub	local01, #44
25350     4C 01 90 FD | 	jmp	#LR__3870
25354                 | LR__3862
25354     16 2D E2 F8 | 	getbyte	local08, local08, #0
25358     0F 2C 0E F2 | 	cmp	local08, #15 wz
2535c     C8 00 90 5D |  if_ne	jmp	#LR__3866
25360     2B 1E 06 F1 | 	add	local01, #43
25364     0F 2D C2 FA | 	rdbyte	local08, local01
25368     2B 1E 86 F1 | 	sub	local01, #43
2536c     40 2C CE F7 | 	test	local08, #64 wz
25370     2C 01 90 5D |  if_ne	jmp	#LR__3869
25374     14 2F E2 F8 | 	getbyte	local09, local06, #0
25378     40 2E CE F7 | 	test	local09, #64 wz
2537c     30 00 90 AD |  if_e	jmp	#LR__3863
25380     1C 1E 06 F1 | 	add	local01, #28
25384     0F 2F 02 FB | 	rdlong	local09, local01
25388     0D 2E 06 F1 | 	add	local09, #13
2538c     17 23 C2 FA | 	rdbyte	local03, local09
25390     14 29 E2 F8 | 	getbyte	local06, local06, #0
25394     BF 28 06 F5 | 	and	local06, #191
25398     14 25 02 F6 | 	mov	local04, local06
2539c     0C 1E 86 F1 | 	sub	local01, #12
253a0     0F 2F 02 FB | 	rdlong	local09, local01
253a4     1C 1E 06 F1 | 	add	local01, #28
253a8     0F 2F 62 FC | 	wrlong	local09, local01
253ac     2C 1E 86 F1 | 	sub	local01, #44
253b0                 | LR__3863
253b0     14 31 E2 F8 | 	getbyte	local10, local06, #0
253b4     12 2B E2 F8 | 	getbyte	local07, local04, #0
253b8     15 31 0A F2 | 	cmp	local10, local07 wz
253bc     5C 00 90 5D |  if_ne	jmp	#LR__3864
253c0     11 2D E2 F8 | 	getbyte	local08, local03, #0
253c4     1C 1E 06 F1 | 	add	local01, #28
253c8     0F 2B 02 FB | 	rdlong	local07, local01
253cc     1C 1E 86 F1 | 	sub	local01, #28
253d0     0D 2A 06 F1 | 	add	local07, #13
253d4     15 29 C2 FA | 	rdbyte	local06, local07
253d8     14 2B E2 F8 | 	getbyte	local07, local06, #0
253dc     15 2D 0A F2 | 	cmp	local08, local07 wz
253e0     38 00 90 5D |  if_ne	jmp	#LR__3864
253e4     0C 20 06 F1 | 	add	local02, #12
253e8     10 13 02 FB | 	rdlong	arg01, local02
253ec     0C 20 86 F1 | 	sub	local02, #12
253f0     1C 1E 06 F1 | 	add	local01, #28
253f4     0F 33 02 FB | 	rdlong	local11, local01
253f8     1C 1E 86 F1 | 	sub	local01, #28
253fc     19 15 02 F6 | 	mov	arg02, local11
25400     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
25404     00 FA 4D F2 | 	cmps	result1, #0 wz
25408     12 33 02 56 |  if_ne	mov	local11, local04
2540c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
25410     01 32 86 51 |  if_ne	sub	local11, #1
25414     19 2F 02 56 |  if_ne	mov	local09, local11
25418     04 00 90 5D |  if_ne	jmp	#LR__3865
2541c                 | LR__3864
2541c     FF 2E 06 F6 | 	mov	local09, #255
25420                 | LR__3865
25420     17 25 02 F6 | 	mov	local04, local09
25424     78 00 90 FD | 	jmp	#LR__3869
25428                 | LR__3866
25428     12 2F 02 F6 | 	mov	local09, local04
2542c     07 2E 4E F7 | 	zerox	local09, #7 wz
25430     20 00 90 5D |  if_ne	jmp	#LR__3867
25434     11 31 E2 F8 | 	getbyte	local10, local03, #0
25438     1C 1E 06 F1 | 	add	local01, #28
2543c     0F 13 02 FB | 	rdlong	arg01, local01
25440     1C 1E 86 F1 | 	sub	local01, #28
25444     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
25448     FD FA E1 F8 | 	getbyte	result1, result1, #0
2544c     FD 30 0A F2 | 	cmp	local10, result1 wz
25450     60 00 90 AD |  if_e	jmp	#LR__3871
25454                 | LR__3867
25454     2B 1E 06 F1 | 	add	local01, #43
25458     0F 2F C2 FA | 	rdbyte	local09, local01
2545c     2B 1E 86 F1 | 	sub	local01, #43
25460     01 2E CE F7 | 	test	local09, #1 wz
25464     24 00 90 5D |  if_ne	jmp	#LR__3868
25468     1C 1E 06 F1 | 	add	local01, #28
2546c     0F 13 02 FB | 	rdlong	arg01, local01
25470     04 1E 06 F1 | 	add	local01, #4
25474     0F 15 02 F6 | 	mov	arg02, local01
25478     20 1E 86 F1 | 	sub	local01, #32
2547c     0B 16 06 F6 | 	mov	arg03, #11
25480     88 DA BF FD | 	call	#_fatfs_cc_memcmp
25484     00 FA 0D F2 | 	cmp	result1, #0 wz
25488     28 00 90 AD |  if_e	jmp	#LR__3871
2548c                 | LR__3868
2548c     FF 24 06 F6 | 	mov	local04, #255
25490     2C 1E 06 F1 | 	add	local01, #44
25494     FF FF FF FF 
25498     0F FF 6B FC | 	wrlong	##-1, local01
2549c     2C 1E 86 F1 | 	sub	local01, #44
254a0                 | LR__3869
254a0                 | LR__3870
254a0     0F 13 02 F6 | 	mov	arg01, local01
254a4     00 14 06 F6 | 	mov	arg02, #0
254a8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
254ac     FD 26 0A F6 | 	mov	local05, result1 wz
254b0     04 FE 9F AD |  if_e	jmp	#LR__3860
254b4                 | LR__3871
254b4                 | ' 
254b4                 | ' 	return res;
254b4     13 FB 01 F6 | 	mov	result1, local05
254b8                 | LR__3872
254b8     A7 F0 03 F6 | 	mov	ptra, fp
254bc     B2 00 A0 FD | 	call	#popregs_
254c0                 | _fatfs_cc_dir_find_ret
254c0     2D 00 64 FD | 	ret
254c4                 | 
254c4                 | _fatfs_cc_dir_register
254c4     0A 4A 05 F6 | 	mov	COUNT_, #10
254c8     A8 00 A0 FD | 	call	#pushregs_
254cc     2C F0 07 F1 | 	add	ptra, #44
254d0     04 4E 05 F1 | 	add	fp, #4
254d4     A7 12 62 FC | 	wrlong	arg01, fp
254d8     09 1F 02 FB | 	rdlong	local01, arg01
254dc     08 4E 05 F1 | 	add	fp, #8
254e0     A7 1E 62 FC | 	wrlong	local01, fp
254e4     08 4E 85 F1 | 	sub	fp, #8
254e8     A7 20 02 FB | 	rdlong	local02, fp
254ec     04 4E 85 F1 | 	sub	fp, #4
254f0     2B 20 06 F1 | 	add	local02, #43
254f4     10 21 C2 FA | 	rdbyte	local02, local02
254f8     A0 20 CE F7 | 	test	local02, #160 wz
254fc     06 FA 05 56 |  if_ne	mov	result1, #6
25500     F8 03 90 5D |  if_ne	jmp	#LR__3895
25504                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
25504     14 4E 05 F1 | 	add	fp, #20
25508     A7 00 68 FC | 	wrlong	#0, fp
2550c     14 4E 85 F1 | 	sub	fp, #20
25510     97 28 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
25514                 | LR__3880
25514     0C 4E 05 F1 | 	add	fp, #12
25518     A7 20 02 FB | 	rdlong	local02, fp
2551c     0C 20 06 F1 | 	add	local02, #12
25520     10 23 02 FB | 	rdlong	local03, local02
25524     08 4E 05 F1 | 	add	fp, #8
25528     A7 24 02 FB | 	rdlong	local04, fp
2552c     14 4E 85 F1 | 	sub	fp, #20
25530     01 24 66 F0 | 	shl	local04, #1
25534     11 25 02 F1 | 	add	local04, local03
25538     12 21 EA FA | 	rdword	local02, local04 wz
2553c     24 00 90 AD |  if_e	jmp	#LR__3882
25540     14 4E 05 F1 | 	add	fp, #20
25544     A7 26 02 FB | 	rdlong	local05, fp
25548     13 29 02 F6 | 	mov	local06, local05
2554c     13 2B 02 F6 | 	mov	local07, local05
25550     15 2D 02 F6 | 	mov	local08, local07
25554     01 2C 06 F1 | 	add	local08, #1
25558     A7 2C 62 FC | 	wrlong	local08, fp
2555c     14 4E 85 F1 | 	sub	fp, #20
25560     B0 FF 9F FD | 	jmp	#LR__3880
25564                 | LR__3881
25564                 | LR__3882
25564     1C 4E 05 F1 | 	add	fp, #28
25568     A7 12 02 F6 | 	mov	arg01, fp
2556c     18 4E 85 F1 | 	sub	fp, #24
25570     A7 14 02 FB | 	rdlong	arg02, fp
25574     04 4E 85 F1 | 	sub	fp, #4
25578     20 14 06 F1 | 	add	arg02, #32
2557c     0C 16 06 F6 | 	mov	arg03, #12
25580     7C 71 BF FD | 	call	#__system____builtin_memmove
25584     27 4E 05 F1 | 	add	fp, #39
25588     A7 2E C2 FA | 	rdbyte	local09, fp
2558c     27 4E 85 F1 | 	sub	fp, #39
25590     01 2E CE F7 | 	test	local09, #1 wz
25594     F4 00 90 AD |  if_e	jmp	#LR__3885
25598     04 4E 05 F1 | 	add	fp, #4
2559c     A7 30 02 FB | 	rdlong	local10, fp
255a0     2B 30 06 F1 | 	add	local10, #43
255a4     18 81 48 FC | 	wrbyte	#64, local10
255a8                 | ' 		dp->fn[ 11 ] =  0x40 ;
255a8                 | ' 		for (n = 1; n < 100; n++) {
255a8     0C 4E 05 F1 | 	add	fp, #12
255ac     A7 02 68 FC | 	wrlong	#1, fp
255b0     10 4E 85 F1 | 	sub	fp, #16
255b4                 | LR__3883
255b4     10 4E 05 F1 | 	add	fp, #16
255b8     A7 20 02 FB | 	rdlong	local02, fp
255bc     10 4E 85 F1 | 	sub	fp, #16
255c0     64 20 16 F2 | 	cmp	local02, #100 wc
255c4     70 00 90 3D |  if_ae	jmp	#LR__3884
255c8     04 4E 05 F1 | 	add	fp, #4
255cc     A7 12 02 FB | 	rdlong	arg01, fp
255d0     20 12 06 F1 | 	add	arg01, #32
255d4     18 4E 05 F1 | 	add	fp, #24
255d8     A7 14 02 F6 | 	mov	arg02, fp
255dc     10 4E 85 F1 | 	sub	fp, #16
255e0     A7 30 02 FB | 	rdlong	local10, fp
255e4     0C 30 06 F1 | 	add	local10, #12
255e8     18 17 02 FB | 	rdlong	arg03, local10
255ec     04 4E 05 F1 | 	add	fp, #4
255f0     A7 18 02 FB | 	rdlong	arg04, fp
255f4     10 4E 85 F1 | 	sub	fp, #16
255f8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
255fc     04 4E 05 F1 | 	add	fp, #4
25600     A7 12 02 FB | 	rdlong	arg01, fp
25604     04 4E 85 F1 | 	sub	fp, #4
25608     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2560c     08 4E 05 F1 | 	add	fp, #8
25610     A7 FA 61 FC | 	wrlong	result1, fp
25614     00 FA 4D F2 | 	cmps	result1, #0 wz
25618     08 4E 85 F1 | 	sub	fp, #8
2561c     18 00 90 5D |  if_ne	jmp	#LR__3884
25620     10 4E 05 F1 | 	add	fp, #16
25624     A7 30 02 FB | 	rdlong	local10, fp
25628     01 30 06 F1 | 	add	local10, #1
2562c     A7 30 62 FC | 	wrlong	local10, fp
25630     10 4E 85 F1 | 	sub	fp, #16
25634     7C FF 9F FD | 	jmp	#LR__3883
25638                 | LR__3884
25638     10 4E 05 F1 | 	add	fp, #16
2563c     A7 30 02 FB | 	rdlong	local10, fp
25640     10 4E 85 F1 | 	sub	fp, #16
25644     64 30 0E F2 | 	cmp	local10, #100 wz
25648     07 FA 05 A6 |  if_e	mov	result1, #7
2564c     AC 02 90 AD |  if_e	jmp	#LR__3895
25650     08 4E 05 F1 | 	add	fp, #8
25654     A7 30 02 FB | 	rdlong	local10, fp
25658     08 4E 85 F1 | 	sub	fp, #8
2565c     04 30 0E F2 | 	cmp	local10, #4 wz
25660     08 4E 05 51 |  if_ne	add	fp, #8
25664     A7 FA 01 5B |  if_ne	rdlong	result1, fp
25668     08 4E 85 51 |  if_ne	sub	fp, #8
2566c     8C 02 90 5D |  if_ne	jmp	#LR__3895
25670     04 4E 05 F1 | 	add	fp, #4
25674     A7 30 02 FB | 	rdlong	local10, fp
25678     23 4E 05 F1 | 	add	fp, #35
2567c     A7 1E C2 FA | 	rdbyte	local01, fp
25680     27 4E 85 F1 | 	sub	fp, #39
25684     2B 30 06 F1 | 	add	local10, #43
25688     18 1F 42 FC | 	wrbyte	local01, local10
2568c                 | LR__3885
2568c     27 4E 05 F1 | 	add	fp, #39
25690     A7 20 C2 FA | 	rdbyte	local02, fp
25694     27 4E 85 F1 | 	sub	fp, #39
25698     02 20 CE F7 | 	test	local02, #2 wz
2569c     20 00 90 AD |  if_e	jmp	#LR__3886
256a0     14 4E 05 F1 | 	add	fp, #20
256a4     A7 30 02 FB | 	rdlong	local10, fp
256a8     0C 30 06 F1 | 	add	local10, #12
256ac     0D 30 16 FD | 	qdiv	local10, #13
256b0     14 4E 85 F1 | 	sub	fp, #20
256b4     18 30 62 FD | 	getqx	local10
256b8     01 30 06 F1 | 	add	local10, #1
256bc     04 00 90 FD | 	jmp	#LR__3887
256c0                 | LR__3886
256c0     01 30 06 F6 | 	mov	local10, #1
256c4                 | LR__3887
256c4     18 4E 05 F1 | 	add	fp, #24
256c8     A7 30 62 FC | 	wrlong	local10, fp
256cc     14 4E 85 F1 | 	sub	fp, #20
256d0     A7 12 02 FB | 	rdlong	arg01, fp
256d4     18 15 02 F6 | 	mov	arg02, local10
256d8     04 4E 85 F1 | 	sub	fp, #4
256dc     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
256e0     08 4E 05 F1 | 	add	fp, #8
256e4     A7 FA 61 FC | 	wrlong	result1, fp
256e8     08 4E 85 F1 | 	sub	fp, #8
256ec     00 FA 0D F2 | 	cmp	result1, #0 wz
256f0     38 01 90 5D |  if_ne	jmp	#LR__3892
256f4     18 4E 05 F1 | 	add	fp, #24
256f8     A7 30 02 FB | 	rdlong	local10, fp
256fc     01 30 8E F1 | 	sub	local10, #1 wz
25700     A7 30 62 FC | 	wrlong	local10, fp
25704     18 4E 85 F1 | 	sub	fp, #24
25708     20 01 90 AD |  if_e	jmp	#LR__3892
2570c     04 4E 05 F1 | 	add	fp, #4
25710     A7 30 02 FB | 	rdlong	local10, fp
25714     18 13 02 F6 | 	mov	arg01, local10
25718     14 4E 05 F1 | 	add	fp, #20
2571c     A7 18 02 FB | 	rdlong	arg04, fp
25720     18 4E 85 F1 | 	sub	fp, #24
25724     05 18 66 F0 | 	shl	arg04, #5
25728     10 30 06 F1 | 	add	local10, #16
2572c     18 15 02 FB | 	rdlong	arg02, local10
25730     0C 15 82 F1 | 	sub	arg02, arg04
25734     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
25738     08 4E 05 F1 | 	add	fp, #8
2573c     A7 FA 61 FC | 	wrlong	result1, fp
25740     08 4E 85 F1 | 	sub	fp, #8
25744     00 FA 0D F2 | 	cmp	result1, #0 wz
25748     E0 00 90 5D |  if_ne	jmp	#LR__3891
2574c     04 4E 05 F1 | 	add	fp, #4
25750     A7 12 02 FB | 	rdlong	arg01, fp
25754     04 4E 85 F1 | 	sub	fp, #4
25758     20 12 06 F1 | 	add	arg01, #32
2575c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
25760     FD 30 02 F6 | 	mov	local10, result1
25764     28 4E 05 F1 | 	add	fp, #40
25768     A7 30 42 FC | 	wrbyte	local10, fp
2576c     28 4E 85 F1 | 	sub	fp, #40
25770                 | ' 			sum = sum_sfn(dp->fn);
25770                 | ' 			do {
25770                 | LR__3888
25770     0C 4E 05 F1 | 	add	fp, #12
25774     A7 12 02 FB | 	rdlong	arg01, fp
25778     08 4E 85 F1 | 	sub	fp, #8
2577c     A7 1E 02 FB | 	rdlong	local01, fp
25780     04 4E 85 F1 | 	sub	fp, #4
25784     18 1E 06 F1 | 	add	local01, #24
25788     0F 15 02 FB | 	rdlong	arg02, local01
2578c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
25790     08 4E 05 F1 | 	add	fp, #8
25794     A7 FA 61 FC | 	wrlong	result1, fp
25798     00 FA 4D F2 | 	cmps	result1, #0 wz
2579c     08 4E 85 F1 | 	sub	fp, #8
257a0     88 00 90 5D |  if_ne	jmp	#LR__3890
257a4     0C 4E 05 F1 | 	add	fp, #12
257a8     A7 20 02 FB | 	rdlong	local02, fp
257ac     0C 20 06 F1 | 	add	local02, #12
257b0     10 13 02 FB | 	rdlong	arg01, local02
257b4     08 4E 85 F1 | 	sub	fp, #8
257b8     A7 1E 02 FB | 	rdlong	local01, fp
257bc     1C 1E 06 F1 | 	add	local01, #28
257c0     0F 15 02 FB | 	rdlong	arg02, local01
257c4     14 4E 05 F1 | 	add	fp, #20
257c8     A7 16 02 FB | 	rdlong	arg03, fp
257cc     10 4E 05 F1 | 	add	fp, #16
257d0     A7 18 C2 FA | 	rdbyte	arg04, fp
257d4     28 4E 85 F1 | 	sub	fp, #40
257d8     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
257dc     0C 4E 05 F1 | 	add	fp, #12
257e0     A7 30 02 FB | 	rdlong	local10, fp
257e4     03 30 06 F1 | 	add	local10, #3
257e8     18 03 48 FC | 	wrbyte	#1, local10
257ec     08 4E 85 F1 | 	sub	fp, #8
257f0     A7 12 02 FB | 	rdlong	arg01, fp
257f4     04 4E 85 F1 | 	sub	fp, #4
257f8     00 14 06 F6 | 	mov	arg02, #0
257fc     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
25800     08 4E 05 F1 | 	add	fp, #8
25804     A7 FA 61 FC | 	wrlong	result1, fp
25808     00 FA 4D F2 | 	cmps	result1, #0 wz
2580c     08 4E 85 F1 | 	sub	fp, #8
25810     18 00 90 5D |  if_ne	jmp	#LR__3889
25814     18 4E 05 F1 | 	add	fp, #24
25818     A7 30 02 FB | 	rdlong	local10, fp
2581c     01 30 8E F1 | 	sub	local10, #1 wz
25820     A7 30 62 FC | 	wrlong	local10, fp
25824     18 4E 85 F1 | 	sub	fp, #24
25828     44 FF 9F 5D |  if_ne	jmp	#LR__3888
2582c                 | LR__3889
2582c                 | LR__3890
2582c                 | LR__3891
2582c                 | LR__3892
2582c     08 4E 05 F1 | 	add	fp, #8
25830     A7 30 0A FB | 	rdlong	local10, fp wz
25834     08 4E 85 F1 | 	sub	fp, #8
25838     B4 00 90 5D |  if_ne	jmp	#LR__3894
2583c     0C 4E 05 F1 | 	add	fp, #12
25840     A7 12 02 FB | 	rdlong	arg01, fp
25844     08 4E 85 F1 | 	sub	fp, #8
25848     A7 1E 02 FB | 	rdlong	local01, fp
2584c     04 4E 85 F1 | 	sub	fp, #4
25850     18 1E 06 F1 | 	add	local01, #24
25854     0F 15 02 FB | 	rdlong	arg02, local01
25858     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2585c     08 4E 05 F1 | 	add	fp, #8
25860     A7 FA 61 FC | 	wrlong	result1, fp
25864     08 4E 85 F1 | 	sub	fp, #8
25868     00 FA 0D F2 | 	cmp	result1, #0 wz
2586c     80 00 90 5D |  if_ne	jmp	#LR__3893
25870     04 4E 05 F1 | 	add	fp, #4
25874     A7 20 02 FB | 	rdlong	local02, fp
25878     04 4E 85 F1 | 	sub	fp, #4
2587c     1C 20 06 F1 | 	add	local02, #28
25880     10 13 02 FB | 	rdlong	arg01, local02
25884     00 14 06 F6 | 	mov	arg02, #0
25888     20 16 06 F6 | 	mov	arg03, #32
2588c     98 00 A0 FD | 	call	#\builtin_bytefill_
25890     04 4E 05 F1 | 	add	fp, #4
25894     A7 14 02 FB | 	rdlong	arg02, fp
25898     0A 1F 02 F6 | 	mov	local01, arg02
2589c     1C 1E 06 F1 | 	add	local01, #28
258a0     0F 13 02 FB | 	rdlong	arg01, local01
258a4     04 4E 85 F1 | 	sub	fp, #4
258a8     20 14 06 F1 | 	add	arg02, #32
258ac     0B 16 06 F6 | 	mov	arg03, #11
258b0     4C 6E BF FD | 	call	#__system____builtin_memmove
258b4     04 4E 05 F1 | 	add	fp, #4
258b8     A7 2E 02 FB | 	rdlong	local09, fp
258bc     17 31 02 F6 | 	mov	local10, local09
258c0     1C 30 06 F1 | 	add	local10, #28
258c4     18 1F 02 FB | 	rdlong	local01, local10
258c8     2B 2E 06 F1 | 	add	local09, #43
258cc     17 31 C2 FA | 	rdbyte	local10, local09
258d0     18 30 06 F5 | 	and	local10, #24
258d4     0C 1E 06 F1 | 	add	local01, #12
258d8     0F 31 42 FC | 	wrbyte	local10, local01
258dc     08 4E 05 F1 | 	add	fp, #8
258e0     A7 30 02 FB | 	rdlong	local10, fp
258e4     0C 4E 85 F1 | 	sub	fp, #12
258e8     03 30 06 F1 | 	add	local10, #3
258ec     18 03 48 FC | 	wrbyte	#1, local10
258f0                 | LR__3893
258f0                 | LR__3894
258f0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
258f0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
258f0                 | ' 
258f0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
258f0                 | ' 
258f0                 | ' 			fs->wflag = 1;
258f0                 | ' 		}
258f0                 | ' 	}
258f0                 | ' 
258f0                 | ' 	return res;
258f0     08 4E 05 F1 | 	add	fp, #8
258f4     A7 FA 01 FB | 	rdlong	result1, fp
258f8     08 4E 85 F1 | 	sub	fp, #8
258fc                 | LR__3895
258fc     A7 F0 03 F6 | 	mov	ptra, fp
25900     B2 00 A0 FD | 	call	#popregs_
25904                 | _fatfs_cc_dir_register_ret
25904     2D 00 64 FD | 	ret
25908                 | 
25908                 | _fatfs_cc_dir_remove
25908     05 4A 05 F6 | 	mov	COUNT_, #5
2590c     A8 00 A0 FD | 	call	#pushregs_
25910     09 1F 02 F6 | 	mov	local01, arg01
25914     0F 21 02 FB | 	rdlong	local02, local01
25918     10 1E 06 F1 | 	add	local01, #16
2591c     0F 23 02 FB | 	rdlong	local03, local01
25920     1C 1E 06 F1 | 	add	local01, #28
25924     0F 15 02 FB | 	rdlong	arg02, local01
25928     2C 1E 86 F1 | 	sub	local01, #44
2592c     FF FF 7F FF 
25930     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
25934     00 24 06 A6 |  if_e	mov	local04, #0
25938     18 00 90 AD |  if_e	jmp	#LR__3900
2593c     0F 13 02 F6 | 	mov	arg01, local01
25940     2C 1E 06 F1 | 	add	local01, #44
25944     0F 15 02 FB | 	rdlong	arg02, local01
25948     2C 1E 86 F1 | 	sub	local01, #44
2594c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
25950     FD 24 02 F6 | 	mov	local04, result1
25954                 | LR__3900
25954     12 27 0A F6 | 	mov	local05, local04 wz
25958     64 00 90 5D |  if_ne	jmp	#LR__3903
2595c                 | ' 		do {
2595c                 | LR__3901
2595c     18 1E 06 F1 | 	add	local01, #24
25960     0F 15 02 FB | 	rdlong	arg02, local01
25964     18 1E 86 F1 | 	sub	local01, #24
25968     10 13 02 F6 | 	mov	arg01, local02
2596c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
25970     FD 26 0A F6 | 	mov	local05, result1 wz
25974     40 00 90 5D |  if_ne	jmp	#LR__3902
25978     1C 1E 06 F1 | 	add	local01, #28
2597c     0F 25 02 FB | 	rdlong	local04, local01
25980     12 CB 49 FC | 	wrbyte	#229, local04
25984     03 20 06 F1 | 	add	local02, #3
25988     10 03 48 FC | 	wrbyte	#1, local02
2598c     03 20 86 F1 | 	sub	local02, #3
25990     0C 1E 86 F1 | 	sub	local01, #12
25994     0F 25 02 FB | 	rdlong	local04, local01
25998     10 1E 86 F1 | 	sub	local01, #16
2599c     11 25 12 F2 | 	cmp	local04, local03 wc
259a0     14 00 90 3D |  if_ae	jmp	#LR__3902
259a4     0F 13 02 F6 | 	mov	arg01, local01
259a8     00 14 06 F6 | 	mov	arg02, #0
259ac     90 EF BF FD | 	call	#_fatfs_cc_dir_next
259b0     FD 26 0A F6 | 	mov	local05, result1 wz
259b4     A4 FF 9F AD |  if_e	jmp	#LR__3901
259b8                 | LR__3902
259b8     04 26 0E F2 | 	cmp	local05, #4 wz
259bc     02 26 06 A6 |  if_e	mov	local05, #2
259c0                 | LR__3903
259c0                 | ' 	}
259c0                 | ' #line 2590 "ff.c"
259c0                 | ' 	return res;
259c0     13 FB 01 F6 | 	mov	result1, local05
259c4     A7 F0 03 F6 | 	mov	ptra, fp
259c8     B2 00 A0 FD | 	call	#popregs_
259cc                 | _fatfs_cc_dir_remove_ret
259cc     2D 00 64 FD | 	ret
259d0                 | 
259d0                 | _fatfs_cc_get_fileinfo
259d0     0F 4A 05 F6 | 	mov	COUNT_, #15
259d4     A8 00 A0 FD | 	call	#pushregs_
259d8     09 1F 02 F6 | 	mov	local01, arg01
259dc     0A 21 02 F6 | 	mov	local02, arg02
259e0     0F 23 02 FB | 	rdlong	local03, local01
259e4     1C 20 06 F1 | 	add	local02, #28
259e8     10 01 48 FC | 	wrbyte	#0, local02
259ec     1C 20 86 F1 | 	sub	local02, #28
259f0     18 1E 06 F1 | 	add	local01, #24
259f4     0F 25 0A FB | 	rdlong	local04, local01 wz
259f8     18 1E 86 F1 | 	sub	local01, #24
259fc     90 03 90 AD |  if_e	jmp	#LR__3924
25a00     2C 1E 06 F1 | 	add	local01, #44
25a04     0F 25 02 FB | 	rdlong	local04, local01
25a08     2C 1E 86 F1 | 	sub	local01, #44
25a0c     FF FF 7F FF 
25a10     FF 25 0E F2 | 	cmp	local04, ##-1 wz
25a14     D8 00 90 AD |  if_e	jmp	#LR__3913
25a18     00 26 06 F6 | 	mov	local05, #0
25a1c     00 28 06 F6 | 	mov	local06, #0
25a20     00 2A 06 F6 | 	mov	local07, #0
25a24                 | ' 			si = di = 0;
25a24                 | ' 			hs = 0;
25a24                 | ' 			while (fs->lfnbuf[si] != 0) {
25a24                 | LR__3910
25a24     0C 22 06 F1 | 	add	local03, #12
25a28     11 25 02 FB | 	rdlong	local04, local03
25a2c     0C 22 86 F1 | 	sub	local03, #12
25a30     14 2D 02 F6 | 	mov	local08, local06
25a34     01 2C 66 F0 | 	shl	local08, #1
25a38     12 2D 02 F1 | 	add	local08, local04
25a3c     16 25 EA FA | 	rdword	local04, local08 wz
25a40     90 00 90 AD |  if_e	jmp	#LR__3912
25a44     0C 22 06 F1 | 	add	local03, #12
25a48     11 2F 02 FB | 	rdlong	local09, local03
25a4c     0C 22 86 F1 | 	sub	local03, #12
25a50     14 31 02 F6 | 	mov	local10, local06
25a54     01 30 66 F0 | 	shl	local10, #1
25a58     17 31 02 F1 | 	add	local10, local09
25a5c     18 33 E2 FA | 	rdword	local11, local10
25a60     15 25 02 F6 | 	mov	local04, local07
25a64     0F 24 4E F7 | 	zerox	local04, #15 wz
25a68     01 28 06 F1 | 	add	local06, #1
25a6c     24 00 90 5D |  if_ne	jmp	#LR__3911
25a70     19 35 32 F9 | 	getword	local12, local11, #0
25a74     6C 00 00 FF 
25a78     00 34 16 F2 | 	cmp	local12, ##55296 wc
25a7c     14 00 90 CD |  if_b	jmp	#LR__3911
25a80     19 37 32 F9 | 	getword	local13, local11, #0
25a84     70 00 00 FF 
25a88     00 36 16 F2 | 	cmp	local13, ##57344 wc
25a8c     19 2B 02 C6 |  if_b	mov	local07, local11
25a90                 | ' 					hs = wc; continue;
25a90     90 FF 9F CD |  if_b	jmp	#LR__3910
25a94                 | LR__3911
25a94     15 13 32 F9 | 	getword	arg01, local07, #0
25a98     10 12 66 F0 | 	shl	arg01, #16
25a9c     19 33 32 F9 | 	getword	local11, local11, #0
25aa0     19 13 42 F5 | 	or	arg01, local11
25aa4     13 15 02 F6 | 	mov	arg02, local05
25aa8     1C 20 06 F1 | 	add	local02, #28
25aac     10 15 02 F1 | 	add	arg02, local02
25ab0     FF 16 06 F6 | 	mov	arg03, #255
25ab4     13 17 82 F1 | 	sub	arg03, local05
25ab8     1C 20 86 F1 | 	sub	local02, #28
25abc     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
25ac0     FD 38 0A F6 | 	mov	local14, result1 wz
25ac4     00 26 06 A6 |  if_e	mov	local05, #0
25ac8     1C 27 02 51 |  if_ne	add	local05, local14
25acc     00 2A 06 56 |  if_ne	mov	local07, #0
25ad0     50 FF 9F 5D |  if_ne	jmp	#LR__3910
25ad4                 | LR__3912
25ad4     15 25 02 F6 | 	mov	local04, local07
25ad8     0F 24 4E F7 | 	zerox	local04, #15 wz
25adc     00 26 06 56 |  if_ne	mov	local05, #0
25ae0     1C 20 06 F1 | 	add	local02, #28
25ae4     10 27 02 F1 | 	add	local05, local02
25ae8     13 01 48 FC | 	wrbyte	#0, local05
25aec     1C 20 86 F1 | 	sub	local02, #28
25af0                 | LR__3913
25af0     00 26 06 F6 | 	mov	local05, #0
25af4     00 28 06 F6 | 	mov	local06, #0
25af8                 | ' 			fno->fname[di] = 0;
25af8                 | ' 		}
25af8                 | ' 	}
25af8                 | ' 
25af8                 | ' 	si = di = 0;
25af8                 | ' 	while (si < 11) {
25af8                 | LR__3914
25af8     0B 28 16 F2 | 	cmp	local06, #11 wc
25afc     20 01 90 3D |  if_ae	jmp	#LR__3917
25b00     1C 1E 06 F1 | 	add	local01, #28
25b04     0F 2F 02 FB | 	rdlong	local09, local01
25b08     1C 1E 86 F1 | 	sub	local01, #28
25b0c     14 31 02 F6 | 	mov	local10, local06
25b10     17 31 02 F1 | 	add	local10, local09
25b14     18 33 C2 FA | 	rdbyte	local11, local10
25b18     19 25 32 F9 | 	getword	local04, local11, #0
25b1c     20 24 0E F2 | 	cmp	local04, #32 wz
25b20     01 28 06 F1 | 	add	local06, #1
25b24     D0 FF 9F AD |  if_e	jmp	#LR__3914
25b28     19 25 32 F9 | 	getword	local04, local11, #0
25b2c     05 24 0E F2 | 	cmp	local04, #5 wz
25b30     E5 32 06 A6 |  if_e	mov	local11, #229
25b34     09 28 0E F2 | 	cmp	local06, #9 wz
25b38     20 00 90 5D |  if_ne	jmp	#LR__3915
25b3c     0C 26 16 F2 | 	cmp	local05, #12 wc
25b40     18 00 90 3D |  if_ae	jmp	#LR__3915
25b44     13 37 02 F6 | 	mov	local13, local05
25b48     0C 20 06 F1 | 	add	local02, #12
25b4c     10 37 02 F1 | 	add	local13, local02
25b50     1B 5D 48 FC | 	wrbyte	#46, local13
25b54     01 26 06 F1 | 	add	local05, #1
25b58     0C 20 86 F1 | 	sub	local02, #12
25b5c                 | LR__3915
25b5c     19 13 32 F9 | 	getword	arg01, local11, #0
25b60     07 12 4E F7 | 	zerox	arg01, #7 wz
25b64     00 FA 05 56 |  if_ne	mov	result1, #0
25b68                 | ' 
25b68                 | ' 	return 0;
25b68     00 FA 05 A6 |  if_e	mov	result1, #0
25b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
25b70     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
25b74     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
25b78     50 00 90 AD |  if_e	jmp	#LR__3916
25b7c     1C 1E 06 F1 | 	add	local01, #28
25b80     0F 31 02 FB | 	rdlong	local10, local01
25b84     1C 1E 86 F1 | 	sub	local01, #28
25b88     14 2D 02 F6 | 	mov	local08, local06
25b8c     18 2D 02 F1 | 	add	local08, local10
25b90     16 13 CA FA | 	rdbyte	arg01, local08 wz
25b94     00 FA 05 56 |  if_ne	mov	result1, #0
25b98                 | ' 
25b98                 | ' 	return 0;
25b98     00 FA 05 A6 |  if_e	mov	result1, #0
25b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
25ba0     28 00 90 AD |  if_e	jmp	#LR__3916
25ba4     19 33 32 F9 | 	getword	local11, local11, #0
25ba8     08 32 66 F0 | 	shl	local11, #8
25bac     1C 1E 06 F1 | 	add	local01, #28
25bb0     0F 39 02 FB | 	rdlong	local14, local01
25bb4     1C 1E 86 F1 | 	sub	local01, #28
25bb8     14 2F 02 F6 | 	mov	local09, local06
25bbc     1C 2F 02 F1 | 	add	local09, local14
25bc0     17 35 C2 FA | 	rdbyte	local12, local09
25bc4     1A 33 42 F5 | 	or	local11, local12
25bc8     01 28 06 F1 | 	add	local06, #1
25bcc                 | LR__3916
25bcc     19 13 02 F6 | 	mov	arg01, local11
25bd0     01 00 00 FF 
25bd4     52 15 06 F6 | 	mov	arg02, ##850
25bd8     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
25bdc     FD 32 02 F6 | 	mov	local11, result1
25be0     19 25 02 F6 | 	mov	local04, local11
25be4     0F 24 4E F7 | 	zerox	local04, #15 wz
25be8     00 26 06 A6 |  if_e	mov	local05, #0
25bec     30 00 90 AD |  if_e	jmp	#LR__3917
25bf0     19 13 32 F9 | 	getword	arg01, local11, #0
25bf4     13 15 02 F6 | 	mov	arg02, local05
25bf8     0C 20 06 F1 | 	add	local02, #12
25bfc     10 15 02 F1 | 	add	arg02, local02
25c00     0C 16 06 F6 | 	mov	arg03, #12
25c04     13 17 82 F1 | 	sub	arg03, local05
25c08     0C 20 86 F1 | 	sub	local02, #12
25c0c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
25c10     FD 38 0A F6 | 	mov	local14, result1 wz
25c14     00 26 06 A6 |  if_e	mov	local05, #0
25c18     1C 27 02 51 |  if_ne	add	local05, local14
25c1c     D8 FE 9F 5D |  if_ne	jmp	#LR__3914
25c20                 | LR__3917
25c20     13 25 02 F6 | 	mov	local04, local05
25c24     0C 20 06 F1 | 	add	local02, #12
25c28     10 25 02 F1 | 	add	local04, local02
25c2c     12 01 48 FC | 	wrbyte	#0, local04
25c30     10 20 06 F1 | 	add	local02, #16
25c34     10 25 CA FA | 	rdbyte	local04, local02 wz
25c38     1C 20 86 F1 | 	sub	local02, #28
25c3c     F8 00 90 5D |  if_ne	jmp	#LR__3923
25c40     00 26 0E F2 | 	cmp	local05, #0 wz
25c44     1C 00 90 5D |  if_ne	jmp	#LR__3918
25c48     13 37 02 F6 | 	mov	local13, local05
25c4c     1C 20 06 F1 | 	add	local02, #28
25c50     10 37 02 F1 | 	add	local13, local02
25c54     1B 7F 48 FC | 	wrbyte	#63, local13
25c58     01 26 06 F1 | 	add	local05, #1
25c5c     1C 20 86 F1 | 	sub	local02, #28
25c60     A4 00 90 FD | 	jmp	#LR__3922
25c64                 | LR__3918
25c64                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
25c64     00 26 06 F6 | 	mov	local05, #0
25c68     00 28 06 F6 | 	mov	local06, #0
25c6c     08 3A 06 F6 | 	mov	local15, #8
25c70                 | LR__3919
25c70     14 25 02 F6 | 	mov	local04, local06
25c74     0C 20 06 F1 | 	add	local02, #12
25c78     10 25 02 F1 | 	add	local04, local02
25c7c     12 37 CA FA | 	rdbyte	local13, local04 wz
25c80     0C 20 86 F1 | 	sub	local02, #12
25c84     80 00 90 AD |  if_e	jmp	#LR__3921
25c88     14 2D 02 F6 | 	mov	local08, local06
25c8c     0C 20 06 F1 | 	add	local02, #12
25c90     10 2D 02 F1 | 	add	local08, local02
25c94     16 33 C2 FA | 	rdbyte	local11, local08
25c98     19 39 32 F9 | 	getword	local14, local11, #0
25c9c     2E 38 0E F2 | 	cmp	local14, #46 wz
25ca0     0C 20 86 F1 | 	sub	local02, #12
25ca4     10 3A 06 A6 |  if_e	mov	local15, #16
25ca8     19 39 32 F9 | 	getword	local14, local11, #0
25cac     41 38 16 F2 | 	cmp	local14, #65 wc
25cb0     30 00 90 CD |  if_b	jmp	#LR__3920
25cb4     19 2D 32 F9 | 	getword	local08, local11, #0
25cb8     5B 2C 16 F2 | 	cmp	local08, #91 wc
25cbc     24 00 90 3D |  if_ae	jmp	#LR__3920
25cc0     1C 1E 06 F1 | 	add	local01, #28
25cc4     0F 2F 02 FB | 	rdlong	local09, local01
25cc8     1C 1E 86 F1 | 	sub	local01, #28
25ccc     0C 2E 06 F1 | 	add	local09, #12
25cd0     17 31 C2 FA | 	rdbyte	local10, local09
25cd4     1D 39 E2 F8 | 	getbyte	local14, local15, #0
25cd8     1C 31 CA F7 | 	test	local10, local14 wz
25cdc     19 33 32 59 |  if_ne	getword	local11, local11, #0
25ce0     20 32 06 51 |  if_ne	add	local11, #32
25ce4                 | LR__3920
25ce4     13 39 02 F6 | 	mov	local14, local05
25ce8     1C 20 06 F1 | 	add	local02, #28
25cec     10 39 02 F1 | 	add	local14, local02
25cf0     19 33 32 F9 | 	getword	local11, local11, #0
25cf4     1C 33 42 FC | 	wrbyte	local11, local14
25cf8     01 28 06 F1 | 	add	local06, #1
25cfc     01 26 06 F1 | 	add	local05, #1
25d00     1C 20 86 F1 | 	sub	local02, #28
25d04     68 FF 9F FD | 	jmp	#LR__3919
25d08                 | LR__3921
25d08                 | LR__3922
25d08     1C 20 06 F1 | 	add	local02, #28
25d0c     10 27 02 F1 | 	add	local05, local02
25d10     13 01 48 FC | 	wrbyte	#0, local05
25d14     1C 1E 06 F1 | 	add	local01, #28
25d18     0F 25 02 FB | 	rdlong	local04, local01
25d1c     1C 1E 86 F1 | 	sub	local01, #28
25d20     0C 24 06 F1 | 	add	local04, #12
25d24     12 37 CA FA | 	rdbyte	local13, local04 wz
25d28     1C 20 86 F1 | 	sub	local02, #28
25d2c     0C 20 06 A1 |  if_e	add	local02, #12
25d30     10 01 48 AC |  if_e	wrbyte	#0, local02
25d34     0C 20 86 A1 |  if_e	sub	local02, #12
25d38                 | LR__3923
25d38     1C 1E 06 F1 | 	add	local01, #28
25d3c     0F 35 02 FB | 	rdlong	local12, local01
25d40     0B 34 06 F1 | 	add	local12, #11
25d44     1A 25 C2 FA | 	rdbyte	local04, local12
25d48     3F 24 06 F5 | 	and	local04, #63
25d4c     08 20 06 F1 | 	add	local02, #8
25d50     10 25 42 FC | 	wrbyte	local04, local02
25d54     08 20 86 F1 | 	sub	local02, #8
25d58     0F 13 02 FB | 	rdlong	arg01, local01
25d5c     1C 12 06 F1 | 	add	arg01, #28
25d60                 | ' {
25d60                 | ' 
25d60                 | ' 	return *((DWORD*)ptr);
25d60     09 FB 01 FB | 	rdlong	result1, arg01
25d64     10 FB 61 FC | 	wrlong	result1, local02
25d68     0F 13 02 FB | 	rdlong	arg01, local01
25d6c     16 12 06 F1 | 	add	arg01, #22
25d70                 | ' {
25d70                 | ' 
25d70                 | ' 	return *((WORD*)ptr);
25d70     09 FB E1 FA | 	rdword	result1, arg01
25d74     06 20 06 F1 | 	add	local02, #6
25d78     10 FB 51 FC | 	wrword	result1, local02
25d7c     0F 13 02 FB | 	rdlong	arg01, local01
25d80     18 12 06 F1 | 	add	arg01, #24
25d84                 | ' {
25d84                 | ' 
25d84                 | ' 	return *((WORD*)ptr);
25d84     09 FB E1 FA | 	rdword	result1, arg01
25d88     02 20 86 F1 | 	sub	local02, #2
25d8c     10 FB 51 FC | 	wrword	result1, local02
25d90                 | LR__3924
25d90     A7 F0 03 F6 | 	mov	ptra, fp
25d94     B2 00 A0 FD | 	call	#popregs_
25d98                 | _fatfs_cc_get_fileinfo_ret
25d98     2D 00 64 FD | 	ret
25d9c                 | 
25d9c                 | _fatfs_cc_create_name
25d9c     0D 4A 05 F6 | 	mov	COUNT_, #13
25da0     A8 00 A0 FD | 	call	#pushregs_
25da4     34 F0 07 F1 | 	add	ptra, #52
25da8     04 4E 05 F1 | 	add	fp, #4
25dac     A7 12 62 FC | 	wrlong	arg01, fp
25db0     04 4E 05 F1 | 	add	fp, #4
25db4     A7 14 62 FC | 	wrlong	arg02, fp
25db8     0A FB 01 FB | 	rdlong	result1, arg02
25dbc     28 4E 05 F1 | 	add	fp, #40
25dc0     A7 FA 61 FC | 	wrlong	result1, fp
25dc4     2C 4E 85 F1 | 	sub	fp, #44
25dc8     A7 FA 01 FB | 	rdlong	result1, fp
25dcc     FD 1E 02 FB | 	rdlong	local01, result1
25dd0     0C 1E 06 F1 | 	add	local01, #12
25dd4     0F 21 02 FB | 	rdlong	local02, local01
25dd8     14 4E 05 F1 | 	add	fp, #20
25ddc     A7 20 62 FC | 	wrlong	local02, fp
25de0     14 4E 05 F1 | 	add	fp, #20
25de4     A7 00 68 FC | 	wrlong	#0, fp
25de8     2C 4E 85 F1 | 	sub	fp, #44
25dec                 | ' 
25dec                 | ' 
25dec                 | ' 
25dec                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
25dec                 | ' 	for (;;) {
25dec                 | LR__3930
25dec     30 4E 05 F1 | 	add	fp, #48
25df0     A7 12 02 F6 | 	mov	arg01, fp
25df4     30 4E 85 F1 | 	sub	fp, #48
25df8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
25dfc     1C 4E 05 F1 | 	add	fp, #28
25e00     A7 FA 61 FC | 	wrlong	result1, fp
25e04     1C 4E 85 F1 | 	sub	fp, #28
25e08     FF FF 7F FF 
25e0c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25e10     06 FA 05 A6 |  if_e	mov	result1, #6
25e14     74 08 90 AD |  if_e	jmp	#LR__3970
25e18     1C 4E 05 F1 | 	add	fp, #28
25e1c     A7 1E 02 FB | 	rdlong	local01, fp
25e20     1C 4E 85 F1 | 	sub	fp, #28
25e24     80 00 00 FF 
25e28     00 1E 16 F2 | 	cmp	local01, ##65536 wc
25e2c     3C 00 90 CD |  if_b	jmp	#LR__3931
25e30     18 4E 05 F1 | 	add	fp, #24
25e34     A7 22 02 FB | 	rdlong	local03, fp
25e38     14 4E 05 F1 | 	add	fp, #20
25e3c     A7 1E 02 FB | 	rdlong	local01, fp
25e40     0F 25 02 F6 | 	mov	local04, local01
25e44     01 24 06 F1 | 	add	local04, #1
25e48     A7 24 62 FC | 	wrlong	local04, fp
25e4c     01 1E 66 F0 | 	shl	local01, #1
25e50     11 1F 02 F1 | 	add	local01, local03
25e54     10 4E 85 F1 | 	sub	fp, #16
25e58     A7 26 02 FB | 	rdlong	local05, fp
25e5c     1C 4E 85 F1 | 	sub	fp, #28
25e60     13 29 02 F6 | 	mov	local06, local05
25e64     10 28 46 F0 | 	shr	local06, #16
25e68     0F 29 52 FC | 	wrword	local06, local01
25e6c                 | LR__3931
25e6c     1C 4E 05 F1 | 	add	fp, #28
25e70     A7 1E 02 FB | 	rdlong	local01, fp
25e74     08 4E 85 F1 | 	sub	fp, #8
25e78     A7 1E 52 FC | 	wrword	local01, fp
25e7c     A7 1E E2 FA | 	rdword	local01, fp
25e80     14 4E 85 F1 | 	sub	fp, #20
25e84     20 1E 16 F2 | 	cmp	local01, #32 wc
25e88     B0 00 90 CD |  if_b	jmp	#LR__3933
25e8c     14 4E 05 F1 | 	add	fp, #20
25e90     A7 1E E2 FA | 	rdword	local01, fp
25e94     14 4E 85 F1 | 	sub	fp, #20
25e98     2F 1E 0E F2 | 	cmp	local01, #47 wz
25e9c     14 4E 05 51 |  if_ne	add	fp, #20
25ea0     A7 24 E2 5A |  if_ne	rdword	local04, fp
25ea4     14 4E 85 51 |  if_ne	sub	fp, #20
25ea8     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
25eac     8C 00 90 AD |  if_e	jmp	#LR__3933
25eb0     14 4E 05 F1 | 	add	fp, #20
25eb4     A7 12 E2 FA | 	rdword	arg01, fp
25eb8     14 4E 85 F1 | 	sub	fp, #20
25ebc     80 12 16 F2 | 	cmp	arg01, #128 wc
25ec0     24 00 90 3D |  if_ae	jmp	#LR__3932
25ec4     5F 01 00 FF 
25ec8     00 12 06 F6 | 	mov	arg01, ##@LR__4592
25ecc     14 4E 05 F1 | 	add	fp, #20
25ed0     A7 14 E2 FA | 	rdword	arg02, fp
25ed4     14 4E 85 F1 | 	sub	fp, #20
25ed8     FC D0 BF FD | 	call	#_fatfs_cc_strchr
25edc     00 FA 0D F2 | 	cmp	result1, #0 wz
25ee0     06 FA 05 56 |  if_ne	mov	result1, #6
25ee4     A4 07 90 5D |  if_ne	jmp	#LR__3970
25ee8                 | LR__3932
25ee8     2C 4E 05 F1 | 	add	fp, #44
25eec     A7 28 02 FB | 	rdlong	local06, fp
25ef0     2C 4E 85 F1 | 	sub	fp, #44
25ef4     FF 28 16 F2 | 	cmp	local06, #255 wc
25ef8     06 FA 05 36 |  if_ae	mov	result1, #6
25efc     8C 07 90 3D |  if_ae	jmp	#LR__3970
25f00     18 4E 05 F1 | 	add	fp, #24
25f04     A7 22 02 FB | 	rdlong	local03, fp
25f08     14 4E 05 F1 | 	add	fp, #20
25f0c     A7 20 02 FB | 	rdlong	local02, fp
25f10     10 25 02 F6 | 	mov	local04, local02
25f14     01 24 06 F1 | 	add	local04, #1
25f18     A7 24 62 FC | 	wrlong	local04, fp
25f1c     10 1F 02 F6 | 	mov	local01, local02
25f20     01 1E 66 F0 | 	shl	local01, #1
25f24     11 1F 02 F1 | 	add	local01, local03
25f28     18 4E 85 F1 | 	sub	fp, #24
25f2c     A7 28 E2 FA | 	rdword	local06, fp
25f30     14 4E 85 F1 | 	sub	fp, #20
25f34     0F 29 52 FC | 	wrword	local06, local01
25f38     B0 FE 9F FD | 	jmp	#LR__3930
25f3c                 | LR__3933
25f3c     14 4E 05 F1 | 	add	fp, #20
25f40     A7 2A E2 FA | 	rdword	local07, fp
25f44     14 4E 85 F1 | 	sub	fp, #20
25f48     20 2A 16 F2 | 	cmp	local07, #32 wc
25f4c     10 4E 05 C1 |  if_b	add	fp, #16
25f50     A7 08 48 CC |  if_b	wrbyte	#4, fp
25f54     10 4E 85 C1 |  if_b	sub	fp, #16
25f58     74 00 90 CD |  if_b	jmp	#LR__3938
25f5c     97 24 48 FB | 	callpa	#(@LR__3936-@LR__3934)>>2,fcache_load_ptr_
25f60                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
25f60                 | LR__3934
25f60     30 4E 05 F1 | 	add	fp, #48
25f64     A7 24 02 FB | 	rdlong	local04, fp
25f68     30 4E 85 F1 | 	sub	fp, #48
25f6c     12 2B C2 FA | 	rdbyte	local07, local04
25f70     2F 2A 0E F2 | 	cmp	local07, #47 wz
25f74     18 00 90 AD |  if_e	jmp	#LR__3935
25f78     30 4E 05 F1 | 	add	fp, #48
25f7c     A7 24 02 FB | 	rdlong	local04, fp
25f80     30 4E 85 F1 | 	sub	fp, #48
25f84     12 21 C2 FA | 	rdbyte	local02, local04
25f88     5C 20 0E F2 | 	cmp	local02, #92 wz
25f8c     18 00 90 5D |  if_ne	jmp	#LR__3937
25f90                 | LR__3935
25f90     30 4E 05 F1 | 	add	fp, #48
25f94     A7 1E 02 FB | 	rdlong	local01, fp
25f98     01 1E 06 F1 | 	add	local01, #1
25f9c     A7 1E 62 FC | 	wrlong	local01, fp
25fa0     30 4E 85 F1 | 	sub	fp, #48
25fa4     B8 FF 9F FD | 	jmp	#LR__3934
25fa8                 | LR__3936
25fa8                 | LR__3937
25fa8     10 4E 05 F1 | 	add	fp, #16
25fac     A7 00 48 FC | 	wrbyte	#0, fp
25fb0     20 4E 05 F1 | 	add	fp, #32
25fb4     A7 28 02 FB | 	rdlong	local06, fp
25fb8     30 4E 85 F1 | 	sub	fp, #48
25fbc     14 2B C2 FA | 	rdbyte	local07, local06
25fc0     20 2A 16 F2 | 	cmp	local07, #32 wc
25fc4     10 4E 05 C1 |  if_b	add	fp, #16
25fc8     A7 08 48 CC |  if_b	wrbyte	#4, fp
25fcc     10 4E 85 C1 |  if_b	sub	fp, #16
25fd0                 | LR__3938
25fd0     08 4E 05 F1 | 	add	fp, #8
25fd4     A7 2A 02 FB | 	rdlong	local07, fp
25fd8     28 4E 05 F1 | 	add	fp, #40
25fdc     A7 1E 02 FB | 	rdlong	local01, fp
25fe0     30 4E 85 F1 | 	sub	fp, #48
25fe4     15 1F 62 FC | 	wrlong	local01, local07
25fe8     97 38 48 FB | 	callpa	#(@LR__3940-@LR__3939)>>2,fcache_load_ptr_
25fec                 | ' 	}
25fec                 | ' 	*path = p;
25fec                 | ' #line 2862 "ff.c"
25fec                 | ' 	while (di) {
25fec                 | LR__3939
25fec     2C 4E 05 F1 | 	add	fp, #44
25ff0     A7 2A 0A FB | 	rdlong	local07, fp wz
25ff4     2C 4E 85 F1 | 	sub	fp, #44
25ff8     60 00 90 AD |  if_e	jmp	#LR__3941
25ffc     18 4E 05 F1 | 	add	fp, #24
26000     A7 28 02 FB | 	rdlong	local06, fp
26004     14 4E 05 F1 | 	add	fp, #20
26008     A7 24 02 FB | 	rdlong	local04, fp
2600c     01 24 86 F1 | 	sub	local04, #1
26010     01 24 66 F0 | 	shl	local04, #1
26014     14 25 02 F1 | 	add	local04, local06
26018     12 29 E2 FA | 	rdword	local06, local04
2601c     18 4E 85 F1 | 	sub	fp, #24
26020     A7 28 52 FC | 	wrword	local06, fp
26024     A7 2A E2 FA | 	rdword	local07, fp
26028     14 4E 85 F1 | 	sub	fp, #20
2602c     20 2A 0E F2 | 	cmp	local07, #32 wz
26030     14 4E 05 51 |  if_ne	add	fp, #20
26034     A7 1E E2 5A |  if_ne	rdword	local01, fp
26038     14 4E 85 51 |  if_ne	sub	fp, #20
2603c     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
26040     18 00 90 5D |  if_ne	jmp	#LR__3941
26044     2C 4E 05 F1 | 	add	fp, #44
26048     A7 1E 02 FB | 	rdlong	local01, fp
2604c     01 1E 86 F1 | 	sub	local01, #1
26050     A7 1E 62 FC | 	wrlong	local01, fp
26054     2C 4E 85 F1 | 	sub	fp, #44
26058     90 FF 9F FD | 	jmp	#LR__3939
2605c                 | LR__3940
2605c                 | LR__3941
2605c     18 4E 05 F1 | 	add	fp, #24
26060     A7 2C 02 FB | 	rdlong	local08, fp
26064     14 4E 05 F1 | 	add	fp, #20
26068     A7 24 02 FB | 	rdlong	local04, fp
2606c     01 24 66 F0 | 	shl	local04, #1
26070     16 25 02 F1 | 	add	local04, local08
26074     12 01 58 FC | 	wrword	#0, local04
26078     A7 2A 0A FB | 	rdlong	local07, fp wz
2607c     2C 4E 85 F1 | 	sub	fp, #44
26080     06 FA 05 A6 |  if_e	mov	result1, #6
26084     04 06 90 AD |  if_e	jmp	#LR__3970
26088                 | ' 
26088                 | ' 
26088                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
26088     28 4E 05 F1 | 	add	fp, #40
2608c     A7 00 68 FC | 	wrlong	#0, fp
26090     28 4E 85 F1 | 	sub	fp, #40
26094     97 22 48 FB | 	callpa	#(@LR__3943-@LR__3942)>>2,fcache_load_ptr_
26098                 | LR__3942
26098     18 4E 05 F1 | 	add	fp, #24
2609c     A7 2E 02 FB | 	rdlong	local09, fp
260a0     10 4E 05 F1 | 	add	fp, #16
260a4     A7 30 02 FB | 	rdlong	local10, fp
260a8     28 4E 85 F1 | 	sub	fp, #40
260ac     01 30 66 F0 | 	shl	local10, #1
260b0     17 31 02 F1 | 	add	local10, local09
260b4     18 33 E2 FA | 	rdword	local11, local10
260b8     20 32 0E F2 | 	cmp	local11, #32 wz
260bc     1C 00 90 5D |  if_ne	jmp	#LR__3944
260c0     28 4E 05 F1 | 	add	fp, #40
260c4     A7 34 02 FB | 	rdlong	local12, fp
260c8     1A 27 02 F6 | 	mov	local05, local12
260cc     01 26 06 F1 | 	add	local05, #1
260d0     A7 26 62 FC | 	wrlong	local05, fp
260d4     28 4E 85 F1 | 	sub	fp, #40
260d8     BC FF 9F FD | 	jmp	#LR__3942
260dc                 | LR__3943
260dc                 | LR__3944
260dc     28 4E 05 F1 | 	add	fp, #40
260e0     A7 2A 02 FB | 	rdlong	local07, fp
260e4     28 4E 85 F1 | 	sub	fp, #40
260e8     01 2A 16 F2 | 	cmp	local07, #1 wc
260ec     28 00 90 3D |  if_ae	jmp	#LR__3945
260f0     18 4E 05 F1 | 	add	fp, #24
260f4     A7 22 02 FB | 	rdlong	local03, fp
260f8     10 4E 05 F1 | 	add	fp, #16
260fc     A7 2E 02 FB | 	rdlong	local09, fp
26100     28 4E 85 F1 | 	sub	fp, #40
26104     01 2E 66 F0 | 	shl	local09, #1
26108     11 2F 02 F1 | 	add	local09, local03
2610c     17 1F E2 FA | 	rdword	local01, local09
26110     2E 1E 0E F2 | 	cmp	local01, #46 wz
26114     14 00 90 5D |  if_ne	jmp	#LR__3946
26118                 | LR__3945
26118     10 4E 05 F1 | 	add	fp, #16
2611c     A7 2A C2 FA | 	rdbyte	local07, fp
26120     03 2A 46 F5 | 	or	local07, #3
26124     A7 2A 42 FC | 	wrbyte	local07, fp
26128     10 4E 85 F1 | 	sub	fp, #16
2612c                 | LR__3946
2612c     97 2C 48 FB | 	callpa	#(@LR__3948-@LR__3947)>>2,fcache_load_ptr_
26130                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
26130                 | LR__3947
26130     2C 4E 05 F1 | 	add	fp, #44
26134     A7 2A 02 FB | 	rdlong	local07, fp
26138     2C 4E 85 F1 | 	sub	fp, #44
2613c     01 2A 16 F2 | 	cmp	local07, #1 wc
26140     44 00 90 CD |  if_b	jmp	#LR__3949
26144     18 4E 05 F1 | 	add	fp, #24
26148     A7 28 02 FB | 	rdlong	local06, fp
2614c     14 4E 05 F1 | 	add	fp, #20
26150     A7 22 02 FB | 	rdlong	local03, fp
26154     2C 4E 85 F1 | 	sub	fp, #44
26158     01 22 86 F1 | 	sub	local03, #1
2615c     01 22 66 F0 | 	shl	local03, #1
26160     14 23 02 F1 | 	add	local03, local06
26164     11 1F E2 FA | 	rdword	local01, local03
26168     2E 1E 0E F2 | 	cmp	local01, #46 wz
2616c     18 00 90 AD |  if_e	jmp	#LR__3949
26170     2C 4E 05 F1 | 	add	fp, #44
26174     A7 1E 02 FB | 	rdlong	local01, fp
26178     01 1E 86 F1 | 	sub	local01, #1
2617c     A7 1E 62 FC | 	wrlong	local01, fp
26180     2C 4E 85 F1 | 	sub	fp, #44
26184     A8 FF 9F FD | 	jmp	#LR__3947
26188                 | LR__3948
26188                 | LR__3949
26188     04 4E 05 F1 | 	add	fp, #4
2618c     A7 12 02 FB | 	rdlong	arg01, fp
26190     04 4E 85 F1 | 	sub	fp, #4
26194     20 12 06 F1 | 	add	arg01, #32
26198     20 14 06 F6 | 	mov	arg02, #32
2619c     0B 16 06 F6 | 	mov	arg03, #11
261a0     09 37 02 F6 | 	mov	local13, arg01
261a4     98 00 A0 FD | 	call	#\builtin_bytefill_
261a8     1B FB 01 F6 | 	mov	result1, local13
261ac     0C 4E 05 F1 | 	add	fp, #12
261b0     A7 00 48 FC | 	wrbyte	#0, fp
261b4     A7 2A C2 FA | 	rdbyte	local07, fp
261b8     14 4E 05 F1 | 	add	fp, #20
261bc     A7 2A 62 FC | 	wrlong	local07, fp
261c0     04 4E 05 F1 | 	add	fp, #4
261c4     A7 10 68 FC | 	wrlong	#8, fp
261c8     24 4E 85 F1 | 	sub	fp, #36
261cc                 | ' 
261cc                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
261cc                 | ' 	i = b = 0; ni = 8;
261cc                 | ' 	for (;;) {
261cc                 | LR__3950
261cc     18 4E 05 F1 | 	add	fp, #24
261d0     A7 22 02 FB | 	rdlong	local03, fp
261d4     10 4E 05 F1 | 	add	fp, #16
261d8     A7 2E 02 FB | 	rdlong	local09, fp
261dc     17 25 02 F6 | 	mov	local04, local09
261e0     01 24 06 F1 | 	add	local04, #1
261e4     A7 24 62 FC | 	wrlong	local04, fp
261e8     01 2E 66 F0 | 	shl	local09, #1
261ec     11 2F 02 F1 | 	add	local09, local03
261f0     17 29 E2 FA | 	rdword	local06, local09
261f4     14 4E 85 F1 | 	sub	fp, #20
261f8     A7 28 52 FC | 	wrword	local06, fp
261fc     A7 2A EA FA | 	rdword	local07, fp wz
26200     14 4E 85 F1 | 	sub	fp, #20
26204     74 03 90 AD |  if_e	jmp	#LR__3966
26208     14 4E 05 F1 | 	add	fp, #20
2620c     A7 2A E2 FA | 	rdword	local07, fp
26210     14 4E 85 F1 | 	sub	fp, #20
26214     20 2A 0E F2 | 	cmp	local07, #32 wz
26218     30 00 90 AD |  if_e	jmp	#LR__3951
2621c     14 4E 05 F1 | 	add	fp, #20
26220     A7 1E E2 FA | 	rdword	local01, fp
26224     14 4E 85 F1 | 	sub	fp, #20
26228     2E 1E 0E F2 | 	cmp	local01, #46 wz
2622c     34 00 90 5D |  if_ne	jmp	#LR__3952
26230     28 4E 05 F1 | 	add	fp, #40
26234     A7 24 02 FB | 	rdlong	local04, fp
26238     04 4E 05 F1 | 	add	fp, #4
2623c     A7 30 02 FB | 	rdlong	local10, fp
26240     2C 4E 85 F1 | 	sub	fp, #44
26244     18 25 0A F2 | 	cmp	local04, local10 wz
26248     18 00 90 AD |  if_e	jmp	#LR__3952
2624c                 | LR__3951
2624c     10 4E 05 F1 | 	add	fp, #16
26250     A7 2A C2 FA | 	rdbyte	local07, fp
26254     03 2A 46 F5 | 	or	local07, #3
26258     A7 2A 42 FC | 	wrbyte	local07, fp
2625c     10 4E 85 F1 | 	sub	fp, #16
26260                 | ' 			cf |=  0x01  |  0x02 ;
26260                 | ' 			continue;
26260     68 FF 9F FD | 	jmp	#LR__3950
26264                 | LR__3952
26264     20 4E 05 F1 | 	add	fp, #32
26268     A7 2A 02 FB | 	rdlong	local07, fp
2626c     04 4E 05 F1 | 	add	fp, #4
26270     A7 1E 02 FB | 	rdlong	local01, fp
26274     24 4E 85 F1 | 	sub	fp, #36
26278     0F 2B 12 F2 | 	cmp	local07, local01 wc
2627c     1C 00 90 3D |  if_ae	jmp	#LR__3953
26280     28 4E 05 F1 | 	add	fp, #40
26284     A7 2C 02 FB | 	rdlong	local08, fp
26288     04 4E 05 F1 | 	add	fp, #4
2628c     A7 30 02 FB | 	rdlong	local10, fp
26290     2C 4E 85 F1 | 	sub	fp, #44
26294     18 2D 0A F2 | 	cmp	local08, local10 wz
26298     B0 00 90 5D |  if_ne	jmp	#LR__3955
2629c                 | LR__3953
2629c     24 4E 05 F1 | 	add	fp, #36
262a0     A7 2A 02 FB | 	rdlong	local07, fp
262a4     24 4E 85 F1 | 	sub	fp, #36
262a8     0B 2A 0E F2 | 	cmp	local07, #11 wz
262ac     18 00 90 5D |  if_ne	jmp	#LR__3954
262b0     10 4E 05 F1 | 	add	fp, #16
262b4     A7 2A C2 FA | 	rdbyte	local07, fp
262b8     03 2A 46 F5 | 	or	local07, #3
262bc     A7 2A 42 FC | 	wrbyte	local07, fp
262c0     10 4E 85 F1 | 	sub	fp, #16
262c4                 | ' 				cf |=  0x01  |  0x02 ;
262c4                 | ' 				break;
262c4     B4 02 90 FD | 	jmp	#LR__3966
262c8                 | LR__3954
262c8     28 4E 05 F1 | 	add	fp, #40
262cc     A7 2A 02 FB | 	rdlong	local07, fp
262d0     04 4E 05 F1 | 	add	fp, #4
262d4     A7 1E 02 FB | 	rdlong	local01, fp
262d8     2C 4E 85 F1 | 	sub	fp, #44
262dc     0F 2B 0A F2 | 	cmp	local07, local01 wz
262e0     10 4E 05 51 |  if_ne	add	fp, #16
262e4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
262e8     03 2A 46 55 |  if_ne	or	local07, #3
262ec     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
262f0     10 4E 85 51 |  if_ne	sub	fp, #16
262f4     28 4E 05 F1 | 	add	fp, #40
262f8     A7 2A 02 FB | 	rdlong	local07, fp
262fc     04 4E 05 F1 | 	add	fp, #4
26300     A7 20 02 FB | 	rdlong	local02, fp
26304     2C 4E 85 F1 | 	sub	fp, #44
26308     10 2B 1A F2 | 	cmp	local07, local02 wcz
2630c     6C 02 90 1D |  if_a	jmp	#LR__3966
26310     2C 4E 05 F1 | 	add	fp, #44
26314     A7 2A 02 FB | 	rdlong	local07, fp
26318     04 4E 85 F1 | 	sub	fp, #4
2631c     A7 2A 62 FC | 	wrlong	local07, fp
26320     08 4E 85 F1 | 	sub	fp, #8
26324     A7 10 68 FC | 	wrlong	#8, fp
26328     04 4E 05 F1 | 	add	fp, #4
2632c     A7 16 68 FC | 	wrlong	#11, fp
26330     18 4E 85 F1 | 	sub	fp, #24
26334     A7 32 C2 FA | 	rdbyte	local11, fp
26338     19 2B E2 F8 | 	getbyte	local07, local11, #0
2633c     02 2A 66 F0 | 	shl	local07, #2
26340     A7 2A 42 FC | 	wrbyte	local07, fp
26344     0C 4E 85 F1 | 	sub	fp, #12
26348                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
26348                 | ' 			continue;
26348     80 FE 9F FD | 	jmp	#LR__3950
2634c                 | LR__3955
2634c     14 4E 05 F1 | 	add	fp, #20
26350     A7 2A E2 FA | 	rdword	local07, fp
26354     14 4E 85 F1 | 	sub	fp, #20
26358     80 2A 16 F2 | 	cmp	local07, #128 wc
2635c     6C 00 90 CD |  if_b	jmp	#LR__3957
26360     10 4E 05 F1 | 	add	fp, #16
26364     A7 2A C2 FA | 	rdbyte	local07, fp
26368     02 2A 46 F5 | 	or	local07, #2
2636c     A7 2A 42 FC | 	wrbyte	local07, fp
26370     04 4E 05 F1 | 	add	fp, #4
26374     A7 12 E2 FA | 	rdword	arg01, fp
26378     14 4E 85 F1 | 	sub	fp, #20
2637c     01 00 00 FF 
26380     52 15 06 F6 | 	mov	arg02, ##850
26384     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
26388     14 4E 05 F1 | 	add	fp, #20
2638c     A7 FA 51 FC | 	wrword	result1, fp
26390     A7 2A E2 FA | 	rdword	local07, fp
26394     14 4E 85 F1 | 	sub	fp, #20
26398     80 2A CE F7 | 	test	local07, #128 wz
2639c     2C 00 90 AD |  if_e	jmp	#LR__3956
263a0     14 4E 05 F1 | 	add	fp, #20
263a4     A7 20 E2 FA | 	rdword	local02, fp
263a8     7F 20 06 F5 | 	and	local02, #127
263ac     01 00 00 FF 
263b0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
263b4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
263b8     10 2B C2 FA | 	rdbyte	local07, local02
263bc     A7 2A 52 FC | 	wrword	local07, fp
263c0     14 4E 85 F1 | 	sub	fp, #20
263c4     01 00 00 FF 
263c8     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
263cc                 | LR__3956
263cc                 | LR__3957
263cc     14 4E 05 F1 | 	add	fp, #20
263d0     A7 2A E2 FA | 	rdword	local07, fp
263d4     14 4E 85 F1 | 	sub	fp, #20
263d8     00 2B 16 F2 | 	cmp	local07, #256 wc
263dc     88 00 90 CD |  if_b	jmp	#LR__3959
263e0     24 4E 05 F1 | 	add	fp, #36
263e4     A7 2A 02 FB | 	rdlong	local07, fp
263e8     01 2A 86 F1 | 	sub	local07, #1
263ec     04 4E 85 F1 | 	sub	fp, #4
263f0     A7 20 02 FB | 	rdlong	local02, fp
263f4     20 4E 85 F1 | 	sub	fp, #32
263f8     15 21 12 F2 | 	cmp	local02, local07 wc
263fc     2C 00 90 CD |  if_b	jmp	#LR__3958
26400     10 4E 05 F1 | 	add	fp, #16
26404     A7 32 C2 FA | 	rdbyte	local11, fp
26408     19 2B E2 F8 | 	getbyte	local07, local11, #0
2640c     03 2A 46 F5 | 	or	local07, #3
26410     A7 2A 42 FC | 	wrbyte	local07, fp
26414     14 4E 05 F1 | 	add	fp, #20
26418     A7 2A 02 FB | 	rdlong	local07, fp
2641c     04 4E 85 F1 | 	sub	fp, #4
26420     A7 2A 62 FC | 	wrlong	local07, fp
26424     20 4E 85 F1 | 	sub	fp, #32
26428                 | ' 				cf |=  0x01  |  0x02 ;
26428                 | ' 				i = ni; continue;
26428     A0 FD 9F FD | 	jmp	#LR__3950
2642c                 | LR__3958
2642c     04 4E 05 F1 | 	add	fp, #4
26430     A7 2E 02 FB | 	rdlong	local09, fp
26434     1C 4E 05 F1 | 	add	fp, #28
26438     A7 30 02 FB | 	rdlong	local10, fp
2643c     18 25 02 F6 | 	mov	local04, local10
26440     01 24 06 F1 | 	add	local04, #1
26444     A7 24 62 FC | 	wrlong	local04, fp
26448     20 2E 06 F1 | 	add	local09, #32
2644c     17 31 02 F1 | 	add	local10, local09
26450     0C 4E 85 F1 | 	sub	fp, #12
26454     A7 22 E2 FA | 	rdword	local03, fp
26458     14 4E 85 F1 | 	sub	fp, #20
2645c     08 22 46 F0 | 	shr	local03, #8
26460     18 23 42 FC | 	wrbyte	local03, local10
26464     D4 00 90 FD | 	jmp	#LR__3965
26468                 | LR__3959
26468     14 4E 05 F1 | 	add	fp, #20
2646c     A7 2A EA FA | 	rdword	local07, fp wz
26470     14 4E 85 F1 | 	sub	fp, #20
26474     20 00 90 AD |  if_e	jmp	#LR__3960
26478     5F 01 00 FF 
2647c     09 12 06 F6 | 	mov	arg01, ##@LR__4593
26480     14 4E 05 F1 | 	add	fp, #20
26484     A7 14 E2 FA | 	rdword	arg02, fp
26488     14 4E 85 F1 | 	sub	fp, #20
2648c     48 CB BF FD | 	call	#_fatfs_cc_strchr
26490     00 FA 0D F2 | 	cmp	result1, #0 wz
26494     20 00 90 AD |  if_e	jmp	#LR__3961
26498                 | LR__3960
26498     14 4E 05 F1 | 	add	fp, #20
2649c     A7 BE 58 FC | 	wrword	#95, fp
264a0     04 4E 85 F1 | 	sub	fp, #4
264a4     A7 2A C2 FA | 	rdbyte	local07, fp
264a8     03 2A 46 F5 | 	or	local07, #3
264ac     A7 2A 42 FC | 	wrbyte	local07, fp
264b0     10 4E 85 F1 | 	sub	fp, #16
264b4     84 00 90 FD | 	jmp	#LR__3964
264b8                 | LR__3961
264b8     14 4E 05 F1 | 	add	fp, #20
264bc     A7 2A E2 FA | 	rdword	local07, fp
264c0     14 4E 85 F1 | 	sub	fp, #20
264c4     41 2A 16 F2 | 	cmp	local07, #65 wc
264c8     24 00 90 CD |  if_b	jmp	#LR__3962
264cc     14 4E 05 F1 | 	add	fp, #20
264d0     A7 1E E2 FA | 	rdword	local01, fp
264d4     14 4E 85 F1 | 	sub	fp, #20
264d8     5B 1E 16 F2 | 	cmp	local01, #91 wc
264dc     0C 4E 05 C1 |  if_b	add	fp, #12
264e0     A7 2A C2 CA |  if_b	rdbyte	local07, fp
264e4     02 2A 46 C5 |  if_b	or	local07, #2
264e8     A7 2A 42 CC |  if_b	wrbyte	local07, fp
264ec     0C 4E 85 C1 |  if_b	sub	fp, #12
264f0                 | LR__3962
264f0     14 4E 05 F1 | 	add	fp, #20
264f4     A7 2A E2 FA | 	rdword	local07, fp
264f8     14 4E 85 F1 | 	sub	fp, #20
264fc     61 2A 16 F2 | 	cmp	local07, #97 wc
26500     38 00 90 CD |  if_b	jmp	#LR__3963
26504     14 4E 05 F1 | 	add	fp, #20
26508     A7 1E E2 FA | 	rdword	local01, fp
2650c     14 4E 85 F1 | 	sub	fp, #20
26510     7B 1E 16 F2 | 	cmp	local01, #123 wc
26514     24 00 90 3D |  if_ae	jmp	#LR__3963
26518     0C 4E 05 F1 | 	add	fp, #12
2651c     A7 2A C2 FA | 	rdbyte	local07, fp
26520     01 2A 46 F5 | 	or	local07, #1
26524     A7 2A 42 FC | 	wrbyte	local07, fp
26528     08 4E 05 F1 | 	add	fp, #8
2652c     A7 2A E2 FA | 	rdword	local07, fp
26530     20 2A 86 F1 | 	sub	local07, #32
26534     A7 2A 52 FC | 	wrword	local07, fp
26538     14 4E 85 F1 | 	sub	fp, #20
2653c                 | LR__3963
2653c                 | LR__3964
2653c                 | LR__3965
2653c     04 4E 05 F1 | 	add	fp, #4
26540     A7 32 02 FB | 	rdlong	local11, fp
26544     19 2F 02 F6 | 	mov	local09, local11
26548     1C 4E 05 F1 | 	add	fp, #28
2654c     A7 20 02 FB | 	rdlong	local02, fp
26550     10 25 02 F6 | 	mov	local04, local02
26554     01 24 06 F1 | 	add	local04, #1
26558     A7 24 62 FC | 	wrlong	local04, fp
2655c     10 31 02 F6 | 	mov	local10, local02
26560     20 2E 06 F1 | 	add	local09, #32
26564     17 31 02 F1 | 	add	local10, local09
26568     0C 4E 85 F1 | 	sub	fp, #12
2656c     A7 22 E2 FA | 	rdword	local03, fp
26570     14 4E 85 F1 | 	sub	fp, #20
26574     18 23 42 FC | 	wrbyte	local03, local10
26578     50 FC 9F FD | 	jmp	#LR__3950
2657c                 | LR__3966
2657c     04 4E 05 F1 | 	add	fp, #4
26580     A7 32 02 FB | 	rdlong	local11, fp
26584     04 4E 85 F1 | 	sub	fp, #4
26588     20 32 06 F1 | 	add	local11, #32
2658c     19 2B C2 FA | 	rdbyte	local07, local11
26590     E5 2A 0E F2 | 	cmp	local07, #229 wz
26594     04 4E 05 A1 |  if_e	add	fp, #4
26598     A7 2A 02 AB |  if_e	rdlong	local07, fp
2659c     04 4E 85 A1 |  if_e	sub	fp, #4
265a0     20 2A 06 A1 |  if_e	add	local07, #32
265a4     15 0B 48 AC |  if_e	wrbyte	#5, local07
265a8     24 4E 05 F1 | 	add	fp, #36
265ac     A7 2A 02 FB | 	rdlong	local07, fp
265b0     24 4E 85 F1 | 	sub	fp, #36
265b4     08 2A 0E F2 | 	cmp	local07, #8 wz
265b8     0C 4E 05 A1 |  if_e	add	fp, #12
265bc     A7 2A C2 AA |  if_e	rdbyte	local07, fp
265c0     02 2A 66 A0 |  if_e	shl	local07, #2
265c4     A7 2A 42 AC |  if_e	wrbyte	local07, fp
265c8     0C 4E 85 A1 |  if_e	sub	fp, #12
265cc     0C 4E 05 F1 | 	add	fp, #12
265d0     A7 2A C2 FA | 	rdbyte	local07, fp
265d4     0C 4E 85 F1 | 	sub	fp, #12
265d8     0C 2A 06 F5 | 	and	local07, #12
265dc     0C 2A 0E F2 | 	cmp	local07, #12 wz
265e0     18 00 90 AD |  if_e	jmp	#LR__3967
265e4     0C 4E 05 F1 | 	add	fp, #12
265e8     A7 1E C2 FA | 	rdbyte	local01, fp
265ec     0C 4E 85 F1 | 	sub	fp, #12
265f0     03 1E 06 F5 | 	and	local01, #3
265f4     03 1E 0E F2 | 	cmp	local01, #3 wz
265f8     14 00 90 5D |  if_ne	jmp	#LR__3968
265fc                 | LR__3967
265fc     10 4E 05 F1 | 	add	fp, #16
26600     A7 2A C2 FA | 	rdbyte	local07, fp
26604     02 2A 46 F5 | 	or	local07, #2
26608     A7 2A 42 FC | 	wrbyte	local07, fp
2660c     10 4E 85 F1 | 	sub	fp, #16
26610                 | LR__3968
26610     10 4E 05 F1 | 	add	fp, #16
26614     A7 2A C2 FA | 	rdbyte	local07, fp
26618     10 4E 85 F1 | 	sub	fp, #16
2661c     02 2A CE F7 | 	test	local07, #2 wz
26620     48 00 90 5D |  if_ne	jmp	#LR__3969
26624     0C 4E 05 F1 | 	add	fp, #12
26628     A7 2A C2 FA | 	rdbyte	local07, fp
2662c     0C 4E 85 F1 | 	sub	fp, #12
26630     01 2A CE F7 | 	test	local07, #1 wz
26634     10 4E 05 51 |  if_ne	add	fp, #16
26638     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2663c     10 2A 46 55 |  if_ne	or	local07, #16
26640     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
26644     10 4E 85 51 |  if_ne	sub	fp, #16
26648     0C 4E 05 F1 | 	add	fp, #12
2664c     A7 2A C2 FA | 	rdbyte	local07, fp
26650     0C 4E 85 F1 | 	sub	fp, #12
26654     04 2A CE F7 | 	test	local07, #4 wz
26658     10 4E 05 51 |  if_ne	add	fp, #16
2665c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
26660     08 2A 46 55 |  if_ne	or	local07, #8
26664     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
26668     10 4E 85 51 |  if_ne	sub	fp, #16
2666c                 | LR__3969
2666c     04 4E 05 F1 | 	add	fp, #4
26670     A7 2A 02 FB | 	rdlong	local07, fp
26674     0C 4E 05 F1 | 	add	fp, #12
26678     A7 1E C2 FA | 	rdbyte	local01, fp
2667c     10 4E 85 F1 | 	sub	fp, #16
26680     2B 2A 06 F1 | 	add	local07, #43
26684     15 1F 42 FC | 	wrbyte	local01, local07
26688                 | ' 	}
26688                 | ' 
26688                 | ' 	dp->fn[ 11 ] = cf;
26688                 | ' 
26688                 | ' 	return FR_OK;
26688     00 FA 05 F6 | 	mov	result1, #0
2668c                 | LR__3970
2668c     A7 F0 03 F6 | 	mov	ptra, fp
26690     B2 00 A0 FD | 	call	#popregs_
26694                 | _fatfs_cc_create_name_ret
26694     2D 00 64 FD | 	ret
26698                 | 
26698                 | _fatfs_cc_follow_path
26698     02 4A 05 F6 | 	mov	COUNT_, #2
2669c     A8 00 A0 FD | 	call	#pushregs_
266a0     18 F0 07 F1 | 	add	ptra, #24
266a4     04 4E 05 F1 | 	add	fp, #4
266a8     A7 12 62 FC | 	wrlong	arg01, fp
266ac     04 4E 05 F1 | 	add	fp, #4
266b0     A7 14 62 FC | 	wrlong	arg02, fp
266b4     04 4E 85 F1 | 	sub	fp, #4
266b8     A7 FA 01 FB | 	rdlong	result1, fp
266bc     FD 1E 02 FB | 	rdlong	local01, result1
266c0     10 4E 05 F1 | 	add	fp, #16
266c4     A7 1E 62 FC | 	wrlong	local01, fp
266c8     14 4E 85 F1 | 	sub	fp, #20
266cc     97 24 48 FB | 	callpa	#(@LR__3982-@LR__3980)>>2,fcache_load_ptr_
266d0                 | ' )
266d0                 | ' {
266d0                 | ' 	FRESULT res;
266d0                 | ' 	BYTE ns;
266d0                 | ' 	FATFS *fs = dp->obj.fs;
266d0                 | ' #line 3034 "ff.c"
266d0                 | ' 	{
266d0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
266d0                 | LR__3980
266d0     08 4E 05 F1 | 	add	fp, #8
266d4     A7 1E 02 FB | 	rdlong	local01, fp
266d8     08 4E 85 F1 | 	sub	fp, #8
266dc     0F 1F C2 FA | 	rdbyte	local01, local01
266e0     2F 1E 0E F2 | 	cmp	local01, #47 wz
266e4     18 00 90 AD |  if_e	jmp	#LR__3981
266e8     08 4E 05 F1 | 	add	fp, #8
266ec     A7 1E 02 FB | 	rdlong	local01, fp
266f0     08 4E 85 F1 | 	sub	fp, #8
266f4     0F 1F C2 FA | 	rdbyte	local01, local01
266f8     5C 1E 0E F2 | 	cmp	local01, #92 wz
266fc     18 00 90 5D |  if_ne	jmp	#LR__3983
26700                 | LR__3981
26700     08 4E 05 F1 | 	add	fp, #8
26704     A7 1E 02 FB | 	rdlong	local01, fp
26708     01 1E 06 F1 | 	add	local01, #1
2670c     A7 1E 62 FC | 	wrlong	local01, fp
26710     08 4E 85 F1 | 	sub	fp, #8
26714     B8 FF 9F FD | 	jmp	#LR__3980
26718                 | LR__3982
26718                 | LR__3983
26718     04 4E 05 F1 | 	add	fp, #4
2671c     A7 1E 02 FB | 	rdlong	local01, fp
26720     08 1E 06 F1 | 	add	local01, #8
26724     0F 01 68 FC | 	wrlong	#0, local01
26728     04 4E 05 F1 | 	add	fp, #4
2672c     A7 1E 02 FB | 	rdlong	local01, fp
26730     08 4E 85 F1 | 	sub	fp, #8
26734     0F 1F C2 FA | 	rdbyte	local01, local01
26738     20 1E 16 F2 | 	cmp	local01, #32 wc
2673c     30 00 90 3D |  if_ae	jmp	#LR__3984
26740     04 4E 05 F1 | 	add	fp, #4
26744     A7 1E 02 FB | 	rdlong	local01, fp
26748     2B 1E 06 F1 | 	add	local01, #43
2674c     0F 01 49 FC | 	wrbyte	#128, local01
26750     A7 12 02 FB | 	rdlong	arg01, fp
26754     04 4E 85 F1 | 	sub	fp, #4
26758     00 14 06 F6 | 	mov	arg02, #0
2675c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
26760     0C 4E 05 F1 | 	add	fp, #12
26764     A7 FA 61 FC | 	wrlong	result1, fp
26768     0C 4E 85 F1 | 	sub	fp, #12
2676c     1C 01 90 FD | 	jmp	#LR__3988
26770                 | LR__3984
26770                 | ' 		for (;;) {
26770                 | LR__3985
26770     04 4E 05 F1 | 	add	fp, #4
26774     A7 12 02 FB | 	rdlong	arg01, fp
26778     04 4E 05 F1 | 	add	fp, #4
2677c     A7 14 02 F6 | 	mov	arg02, fp
26780     08 4E 85 F1 | 	sub	fp, #8
26784     14 F6 BF FD | 	call	#_fatfs_cc_create_name
26788     0C 4E 05 F1 | 	add	fp, #12
2678c     A7 FA 61 FC | 	wrlong	result1, fp
26790     00 FA 4D F2 | 	cmps	result1, #0 wz
26794     0C 4E 85 F1 | 	sub	fp, #12
26798     F0 00 90 5D |  if_ne	jmp	#LR__3987
2679c     04 4E 05 F1 | 	add	fp, #4
267a0     A7 12 02 FB | 	rdlong	arg01, fp
267a4     04 4E 85 F1 | 	sub	fp, #4
267a8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
267ac     0C 4E 05 F1 | 	add	fp, #12
267b0     A7 FA 61 FC | 	wrlong	result1, fp
267b4     08 4E 85 F1 | 	sub	fp, #8
267b8     A7 1E 02 FB | 	rdlong	local01, fp
267bc     2B 1E 06 F1 | 	add	local01, #43
267c0     0F 1F C2 FA | 	rdbyte	local01, local01
267c4     0C 4E 05 F1 | 	add	fp, #12
267c8     A7 1E 42 FC | 	wrbyte	local01, fp
267cc     04 4E 85 F1 | 	sub	fp, #4
267d0     A7 1E 0A FB | 	rdlong	local01, fp wz
267d4     0C 4E 85 F1 | 	sub	fp, #12
267d8     34 00 90 AD |  if_e	jmp	#LR__3986
267dc     0C 4E 05 F1 | 	add	fp, #12
267e0     A7 1E 02 FB | 	rdlong	local01, fp
267e4     0C 4E 85 F1 | 	sub	fp, #12
267e8     04 1E 0E F2 | 	cmp	local01, #4 wz
267ec     9C 00 90 5D |  if_ne	jmp	#LR__3987
267f0     10 4E 05 F1 | 	add	fp, #16
267f4     A7 1E C2 FA | 	rdbyte	local01, fp
267f8     10 4E 85 F1 | 	sub	fp, #16
267fc     04 1E CE F7 | 	test	local01, #4 wz
26800     0C 4E 05 A1 |  if_e	add	fp, #12
26804     A7 0A 68 AC |  if_e	wrlong	#5, fp
26808     0C 4E 85 A1 |  if_e	sub	fp, #12
2680c                 | ' 					}
2680c                 | ' 				}
2680c                 | ' 				break;
2680c     7C 00 90 FD | 	jmp	#LR__3987
26810                 | LR__3986
26810     10 4E 05 F1 | 	add	fp, #16
26814     A7 1E C2 FA | 	rdbyte	local01, fp
26818     10 4E 85 F1 | 	sub	fp, #16
2681c     04 1E CE F7 | 	test	local01, #4 wz
26820     68 00 90 5D |  if_ne	jmp	#LR__3987
26824     04 4E 05 F1 | 	add	fp, #4
26828     A7 1E 02 FB | 	rdlong	local01, fp
2682c     04 4E 85 F1 | 	sub	fp, #4
26830     06 1E 06 F1 | 	add	local01, #6
26834     0F 1F C2 FA | 	rdbyte	local01, local01
26838     10 1E CE F7 | 	test	local01, #16 wz
2683c     0C 4E 05 A1 |  if_e	add	fp, #12
26840     A7 0A 68 AC |  if_e	wrlong	#5, fp
26844     0C 4E 85 A1 |  if_e	sub	fp, #12
26848                 | ' 				res = FR_NO_PATH; break;
26848     40 00 90 AD |  if_e	jmp	#LR__3987
2684c     04 4E 05 F1 | 	add	fp, #4
26850     A7 20 02 FB | 	rdlong	local02, fp
26854     10 1F 02 F6 | 	mov	local01, local02
26858     10 4E 05 F1 | 	add	fp, #16
2685c     A7 14 02 FB | 	rdlong	arg02, fp
26860     0A 13 02 F6 | 	mov	arg01, arg02
26864     34 14 06 F1 | 	add	arg02, #52
26868     14 4E 85 F1 | 	sub	fp, #20
2686c     10 20 06 F1 | 	add	local02, #16
26870     10 21 02 FB | 	rdlong	local02, local02
26874     FF 21 06 F5 | 	and	local02, #511
26878     10 15 02 F1 | 	add	arg02, local02
2687c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
26880     08 1E 06 F1 | 	add	local01, #8
26884     0F FB 61 FC | 	wrlong	result1, local01
26888     E4 FE 9F FD | 	jmp	#LR__3985
2688c                 | LR__3987
2688c                 | LR__3988
2688c                 | ' 			}
2688c                 | ' #line 3090 "ff.c"
2688c                 | ' 			{
2688c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2688c                 | ' 			}
2688c                 | ' 		}
2688c                 | ' 	}
2688c                 | ' 
2688c                 | ' 	return res;
2688c     0C 4E 05 F1 | 	add	fp, #12
26890     A7 FA 01 FB | 	rdlong	result1, fp
26894     0C 4E 85 F1 | 	sub	fp, #12
26898     A7 F0 03 F6 | 	mov	ptra, fp
2689c     B2 00 A0 FD | 	call	#popregs_
268a0                 | _fatfs_cc_follow_path_ret
268a0     2D 00 64 FD | 	ret
268a4                 | 
268a4                 | _fatfs_cc_get_ldnumber
268a4     01 00 66 F6 | 	neg	_var01, #1
268a8     09 03 0A FB | 	rdlong	_var02, arg01 wz
268ac     01 05 02 F6 | 	mov	_var03, _var02
268b0     01 FA 65 A6 |  if_e	neg	result1, #1
268b4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
268b8     97 10 48 FB | 	callpa	#(@LR__3991-@LR__3990)>>2,fcache_load_ptr_
268bc                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
268bc                 | LR__3990
268bc     02 07 C2 FA | 	rdbyte	_var04, _var03
268c0     03 FB E1 F8 | 	getbyte	result1, _var04, #0
268c4     20 FA 15 F2 | 	cmp	result1, #32 wc
268c8     01 04 06 F1 | 	add	_var03, #1
268cc     03 09 02 36 |  if_ae	mov	_var05, _var04
268d0     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
268d4     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
268d8     E0 FF 9F 1D |  if_a	jmp	#LR__3990
268dc                 | LR__3991
268dc     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
268e0     3A 06 0E F2 | 	cmp	_var04, #58 wz
268e4     40 00 90 5D |  if_ne	jmp	#LR__3993
268e8     01 0A 06 F6 | 	mov	_var06, #1
268ec     01 09 C2 FA | 	rdbyte	_var05, _var02
268f0     30 08 16 F2 | 	cmp	_var05, #48 wc
268f4     1C 00 90 CD |  if_b	jmp	#LR__3992
268f8     01 09 C2 FA | 	rdbyte	_var05, _var02
268fc     3A 08 16 F2 | 	cmp	_var05, #58 wc
26900     01 0D 02 C6 |  if_b	mov	_var07, _var02
26904     02 0C 06 C1 |  if_b	add	_var07, #2
26908     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2690c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
26910     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
26914                 | LR__3992
26914     01 0A 56 F2 | 	cmps	_var06, #1 wc
26918     05 01 02 C6 |  if_b	mov	_var01, _var06
2691c     09 05 62 CC |  if_b	wrlong	_var03, arg01
26920                 | ' 			vol = i;
26920                 | ' 			*path = tt;
26920                 | ' 		}
26920                 | ' 		return vol;
26920     00 FB 01 F6 | 	mov	result1, _var01
26924     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
26928                 | LR__3993
26928                 | ' 	}
26928                 | ' #line 3170 "ff.c"
26928                 | ' 	vol = 0;
26928                 | ' 
26928                 | ' 	return vol;
26928     00 FA 05 F6 | 	mov	result1, #0
2692c                 | _fatfs_cc_get_ldnumber_ret
2692c     2D 00 64 FD | 	ret
26930                 | 
26930                 | _fatfs_cc_check_fs
26930     04 4A 05 F6 | 	mov	COUNT_, #4
26934     A8 00 A0 FD | 	call	#pushregs_
26938     09 1F 02 F6 | 	mov	local01, arg01
2693c     03 1E 06 F1 | 	add	local01, #3
26940     0F 01 48 FC | 	wrbyte	#0, local01
26944     2D 1E 06 F1 | 	add	local01, #45
26948     FF FF FF FF 
2694c     0F FF 6B FC | 	wrlong	##-1, local01
26950     30 1E 86 F1 | 	sub	local01, #48
26954     0F 13 02 F6 | 	mov	arg01, local01
26958     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2695c     00 FA 0D F2 | 	cmp	result1, #0 wz
26960     04 FA 05 56 |  if_ne	mov	result1, #4
26964     94 01 90 5D |  if_ne	jmp	#LR__4004
26968     34 1E 06 F1 | 	add	local01, #52
2696c     0F 13 02 F6 | 	mov	arg01, local01
26970     FE 13 06 F1 | 	add	arg01, #510
26974                 | ' {
26974                 | ' 
26974                 | ' 	return *((WORD*)ptr);
26974     09 21 E2 FA | 	rdword	local02, arg01
26978     0F 23 C2 FA | 	rdbyte	local03, local01
2697c     34 1E 86 F1 | 	sub	local01, #52
26980     11 25 E2 F8 | 	getbyte	local04, local03, #0
26984     EB 24 0E F2 | 	cmp	local04, #235 wz
26988     11 17 02 56 |  if_ne	mov	arg03, local03
2698c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
26990     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
26994     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
26998     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2699c     44 01 90 5D |  if_ne	jmp	#LR__4003
269a0     10 25 32 F9 | 	getword	local04, local02, #0
269a4     55 00 00 FF 
269a8     55 24 0E F2 | 	cmp	local04, ##43605 wz
269ac     2C 00 90 5D |  if_ne	jmp	#LR__4000
269b0     34 1E 06 F1 | 	add	local01, #52
269b4     0F 13 02 F6 | 	mov	arg01, local01
269b8     34 1E 86 F1 | 	sub	local01, #52
269bc     52 12 06 F1 | 	add	arg01, #82
269c0     5F 01 00 FF 
269c4     10 14 06 F6 | 	mov	arg02, ##@LR__4594
269c8     08 16 06 F6 | 	mov	arg03, #8
269cc     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
269d0     00 FA 0D F2 | 	cmp	result1, #0 wz
269d4                 | ' 			return 0;
269d4     00 FA 05 A6 |  if_e	mov	result1, #0
269d8     20 01 90 AD |  if_e	jmp	#LR__4004
269dc                 | LR__4000
269dc     34 1E 06 F1 | 	add	local01, #52
269e0     0F 13 02 F6 | 	mov	arg01, local01
269e4     0B 12 06 F1 | 	add	arg01, #11
269e8                 | ' {
269e8                 | ' 
269e8                 | ' 	return *((WORD*)ptr);
269e8     09 FB E1 FA | 	rdword	result1, arg01
269ec     0D 1E 06 F1 | 	add	local01, #13
269f0     0F 23 C2 FA | 	rdbyte	local03, local01
269f4     41 1E 86 F1 | 	sub	local01, #65
269f8     FD 24 32 F9 | 	getword	local04, result1, #0
269fc     FD 14 32 F9 | 	getword	arg02, result1, #0
26a00     01 14 86 F1 | 	sub	arg02, #1
26a04     0A 25 CA F7 | 	test	local04, arg02 wz
26a08     D8 00 90 5D |  if_ne	jmp	#LR__4002
26a0c     FD 14 32 F9 | 	getword	arg02, result1, #0
26a10     01 00 00 FF 
26a14     00 14 16 F2 | 	cmp	arg02, ##512 wc
26a18     C8 00 90 CD |  if_b	jmp	#LR__4002
26a1c     FD 14 32 F9 | 	getword	arg02, result1, #0
26a20     01 00 00 FF 
26a24     01 14 16 F2 | 	cmp	arg02, ##513 wc
26a28     B8 00 90 3D |  if_ae	jmp	#LR__4002
26a2c     11 13 02 F6 | 	mov	arg01, local03
26a30     07 12 4E F7 | 	zerox	arg01, #7 wz
26a34     AC 00 90 AD |  if_e	jmp	#LR__4002
26a38     11 13 E2 F8 | 	getbyte	arg01, local03, #0
26a3c     11 23 E2 F8 | 	getbyte	local03, local03, #0
26a40     01 22 86 F1 | 	sub	local03, #1
26a44     11 13 CA F7 | 	test	arg01, local03 wz
26a48     98 00 90 5D |  if_ne	jmp	#LR__4002
26a4c     34 1E 06 F1 | 	add	local01, #52
26a50     0F 13 02 F6 | 	mov	arg01, local01
26a54     34 1E 86 F1 | 	sub	local01, #52
26a58     0E 12 06 F1 | 	add	arg01, #14
26a5c                 | ' {
26a5c                 | ' 
26a5c                 | ' 	return *((WORD*)ptr);
26a5c     09 FB E9 FA | 	rdword	result1, arg01 wz
26a60     80 00 90 AD |  if_e	jmp	#LR__4002
26a64     44 1E 06 F1 | 	add	local01, #68
26a68     0F 13 C2 FA | 	rdbyte	arg01, local01
26a6c     44 1E 86 F1 | 	sub	local01, #68
26a70     01 12 86 F1 | 	sub	arg01, #1
26a74     02 12 16 F2 | 	cmp	arg01, #2 wc
26a78     68 00 90 3D |  if_ae	jmp	#LR__4002
26a7c     34 1E 06 F1 | 	add	local01, #52
26a80     0F 13 02 F6 | 	mov	arg01, local01
26a84     34 1E 86 F1 | 	sub	local01, #52
26a88     11 12 06 F1 | 	add	arg01, #17
26a8c                 | ' {
26a8c                 | ' 
26a8c                 | ' 	return *((WORD*)ptr);
26a8c     09 FB E9 FA | 	rdword	result1, arg01 wz
26a90     50 00 90 AD |  if_e	jmp	#LR__4002
26a94     34 1E 06 F1 | 	add	local01, #52
26a98     0F 13 02 F6 | 	mov	arg01, local01
26a9c     34 1E 86 F1 | 	sub	local01, #52
26aa0     13 12 06 F1 | 	add	arg01, #19
26aa4                 | ' {
26aa4                 | ' 
26aa4                 | ' 	return *((WORD*)ptr);
26aa4     09 FB E1 FA | 	rdword	result1, arg01
26aa8     FD 22 32 F9 | 	getword	local03, result1, #0
26aac     80 22 16 F2 | 	cmp	local03, #128 wc
26ab0     20 00 90 3D |  if_ae	jmp	#LR__4001
26ab4     34 1E 06 F1 | 	add	local01, #52
26ab8     0F 13 02 F6 | 	mov	arg01, local01
26abc     34 1E 86 F1 | 	sub	local01, #52
26ac0     20 12 06 F1 | 	add	arg01, #32
26ac4                 | ' {
26ac4                 | ' 
26ac4                 | ' 	return *((DWORD*)ptr);
26ac4     09 FB 01 FB | 	rdlong	result1, arg01
26ac8     80 00 00 FF 
26acc     00 FA 15 F2 | 	cmp	result1, ##65536 wc
26ad0     10 00 90 CD |  if_b	jmp	#LR__4002
26ad4                 | LR__4001
26ad4     4A 1E 06 F1 | 	add	local01, #74
26ad8                 | ' {
26ad8                 | ' 
26ad8                 | ' 	return *((WORD*)ptr);
26ad8     0F FB E9 FA | 	rdword	result1, local01 wz
26adc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
26adc                 | ' 			&& ld_word(fs->win +  14 ) != 0
26adc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
26adc                 | ' 			&& ld_word(fs->win +  17 ) != 0
26adc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
26adc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
26adc                 | ' 				return 0;
26adc     00 FA 05 56 |  if_ne	mov	result1, #0
26ae0     18 00 90 5D |  if_ne	jmp	#LR__4004
26ae4                 | LR__4002
26ae4                 | LR__4003
26ae4                 | ' 		}
26ae4                 | ' 	}
26ae4                 | ' 	return sign == 0xAA55 ? 2 : 3;
26ae4     10 23 32 F9 | 	getword	local03, local02, #0
26ae8     55 00 00 FF 
26aec     55 22 0E F2 | 	cmp	local03, ##43605 wz
26af0     02 24 06 A6 |  if_e	mov	local04, #2
26af4     03 24 06 56 |  if_ne	mov	local04, #3
26af8     12 FB 01 F6 | 	mov	result1, local04
26afc                 | LR__4004
26afc     A7 F0 03 F6 | 	mov	ptra, fp
26b00     B2 00 A0 FD | 	call	#popregs_
26b04                 | _fatfs_cc_check_fs_ret
26b04     2D 00 64 FD | 	ret
26b08                 | 
26b08                 | _fatfs_cc_find_volume
26b08     05 4A 05 F6 | 	mov	COUNT_, #5
26b0c     A8 00 A0 FD | 	call	#pushregs_
26b10     24 F0 07 F1 | 	add	ptra, #36
26b14     09 1F 02 F6 | 	mov	local01, arg01
26b18     0A 21 02 F6 | 	mov	local02, arg02
26b1c     0F 13 02 F6 | 	mov	arg01, local01
26b20     00 14 06 F6 | 	mov	arg02, #0
26b24     08 FE BF FD | 	call	#_fatfs_cc_check_fs
26b28     02 FA 0D F2 | 	cmp	result1, #2 wz
26b2c     0C 00 90 AD |  if_e	jmp	#LR__4010
26b30     03 FA 15 F2 | 	cmp	result1, #3 wc
26b34     00 20 0E C2 |  if_b	cmp	local02, #0 wz
26b38     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4018
26b3c                 | LR__4010
26b3c                 | ' 	for (i = 0; i < 4; i++) {
26b3c     00 22 06 F6 | 	mov	local03, #0
26b40     97 26 48 FB | 	callpa	#(@LR__4012-@LR__4011)>>2,fcache_load_ptr_
26b44                 | LR__4011
26b44     04 22 16 F2 | 	cmp	local03, #4 wc
26b48     44 00 90 3D |  if_ae	jmp	#LR__4013
26b4c     11 25 02 F6 | 	mov	local04, local03
26b50     02 24 66 F0 | 	shl	local04, #2
26b54     14 4E 05 F1 | 	add	fp, #20
26b58     A7 24 02 F1 | 	add	local04, fp
26b5c     34 1E 06 F1 | 	add	local01, #52
26b60     0F 13 02 F6 | 	mov	arg01, local01
26b64     34 1E 86 F1 | 	sub	local01, #52
26b68     BE 13 06 F1 | 	add	arg01, #446
26b6c     11 15 02 F6 | 	mov	arg02, local03
26b70     04 14 66 F0 | 	shl	arg02, #4
26b74     0A 13 02 F1 | 	add	arg01, arg02
26b78     08 12 06 F1 | 	add	arg01, #8
26b7c                 | ' {
26b7c                 | ' 
26b7c                 | ' 	return *((DWORD*)ptr);
26b7c     09 FB 01 FB | 	rdlong	result1, arg01
26b80     14 4E 85 F1 | 	sub	fp, #20
26b84     12 FB 61 FC | 	wrlong	result1, local04
26b88     01 22 06 F1 | 	add	local03, #1
26b8c     B4 FF 9F FD | 	jmp	#LR__4011
26b90                 | LR__4012
26b90                 | LR__4013
26b90     00 20 0E F2 | 	cmp	local02, #0 wz
26b94     10 25 02 56 |  if_ne	mov	local04, local02
26b98     01 24 86 51 |  if_ne	sub	local04, #1
26b9c     00 24 06 A6 |  if_e	mov	local04, #0
26ba0     12 23 02 F6 | 	mov	local03, local04
26ba4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
26ba4                 | ' 	}
26ba4                 | ' 	i = part ? part - 1 : 0;
26ba4                 | ' 	do {
26ba4                 | LR__4014
26ba4     11 25 02 F6 | 	mov	local04, local03
26ba8     02 24 66 F0 | 	shl	local04, #2
26bac     14 4E 05 F1 | 	add	fp, #20
26bb0     A7 24 02 F1 | 	add	local04, fp
26bb4     12 25 0A FB | 	rdlong	local04, local04 wz
26bb8     14 4E 85 F1 | 	sub	fp, #20
26bbc     28 00 90 AD |  if_e	jmp	#LR__4015
26bc0     11 25 02 F6 | 	mov	local04, local03
26bc4     02 24 66 F0 | 	shl	local04, #2
26bc8     14 4E 05 F1 | 	add	fp, #20
26bcc     A7 24 02 F1 | 	add	local04, fp
26bd0     12 15 02 FB | 	rdlong	arg02, local04
26bd4     0F 13 02 F6 | 	mov	arg01, local01
26bd8     14 4E 85 F1 | 	sub	fp, #20
26bdc     50 FD BF FD | 	call	#_fatfs_cc_check_fs
26be0     FD 24 02 F6 | 	mov	local04, result1
26be4     04 00 90 FD | 	jmp	#LR__4016
26be8                 | LR__4015
26be8     03 24 06 F6 | 	mov	local04, #3
26bec                 | LR__4016
26bec     12 27 02 F6 | 	mov	local05, local04
26bf0     00 20 0E F2 | 	cmp	local02, #0 wz
26bf4     02 26 16 A2 |  if_e	cmp	local05, #2 wc
26bf8     0C 00 90 8D |  if_c_and_z	jmp	#LR__4017
26bfc     01 22 06 A1 |  if_e	add	local03, #1
26c00     04 22 16 A2 |  if_e	cmp	local03, #4 wc
26c04     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4014
26c08                 | LR__4017
26c08                 | ' 	return fmt;
26c08     13 FB 01 F6 | 	mov	result1, local05
26c0c                 | LR__4018
26c0c     A7 F0 03 F6 | 	mov	ptra, fp
26c10     B2 00 A0 FD | 	call	#popregs_
26c14                 | _fatfs_cc_find_volume_ret
26c14     2D 00 64 FD | 	ret
26c18                 | 
26c18                 | _fatfs_cc_mount_volume
26c18     0B 4A 05 F6 | 	mov	COUNT_, #11
26c1c     A8 00 A0 FD | 	call	#pushregs_
26c20     0A 1F 02 F6 | 	mov	local01, arg02
26c24     0B 21 02 F6 | 	mov	local02, arg03
26c28     0F 01 68 FC | 	wrlong	#0, local01
26c2c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
26c30     FD 22 02 F6 | 	mov	local03, result1
26c34     00 22 56 F2 | 	cmps	local03, #0 wc
26c38     0B FA 05 C6 |  if_b	mov	result1, #11
26c3c     3C 05 90 CD |  if_b	jmp	#LR__4030
26c40     11 17 02 F6 | 	mov	arg03, local03
26c44     02 16 66 F0 | 	shl	arg03, #2
26c48     F2 16 02 F1 | 	add	arg03, objptr
26c4c     0B 25 0A FB | 	rdlong	local04, arg03 wz
26c50     0C FA 05 A6 |  if_e	mov	result1, #12
26c54     24 05 90 AD |  if_e	jmp	#LR__4030
26c58     0F 25 62 FC | 	wrlong	local04, local01
26c5c     10 21 E2 F8 | 	getbyte	local02, local02, #0
26c60     FE 20 06 F5 | 	and	local02, #254
26c64     12 17 CA FA | 	rdbyte	arg03, local04 wz
26c68     4C 00 90 AD |  if_e	jmp	#LR__4021
26c6c     01 24 06 F1 | 	add	local04, #1
26c70     12 13 CA FA | 	rdbyte	arg01, local04 wz
26c74     01 24 86 F1 | 	sub	local04, #1
26c78     01 FA 05 56 |  if_ne	mov	result1, #1
26c7c                 | ' 
26c7c                 | ' 	return Stat;
26c7c     01 00 00 AF 
26c80     20 E4 05 A1 |  if_e	add	objptr, ##544
26c84     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
26c88     01 00 00 AF 
26c8c     20 E4 85 A1 |  if_e	sub	objptr, ##544
26c90     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
26c94     01 16 CE F7 | 	test	arg03, #1 wz
26c98     1C 00 90 5D |  if_ne	jmp	#LR__4020
26c9c     00 20 0E F2 | 	cmp	local02, #0 wz
26ca0     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
26ca4     04 FA CD 57 |  if_ne	test	result1, #4 wz
26ca8                 | ' 				return FR_WRITE_PROTECTED;
26ca8     0A FA 05 56 |  if_ne	mov	result1, #10
26cac     CC 04 90 5D |  if_ne	jmp	#LR__4030
26cb0                 | ' 			}
26cb0                 | ' 			return FR_OK;
26cb0     00 FA 05 F6 | 	mov	result1, #0
26cb4     C4 04 90 FD | 	jmp	#LR__4030
26cb8                 | LR__4020
26cb8                 | LR__4021
26cb8     12 01 48 FC | 	wrbyte	#0, local04
26cbc     01 24 06 F1 | 	add	local04, #1
26cc0     12 23 42 FC | 	wrbyte	local03, local04
26cc4     12 13 C2 FA | 	rdbyte	arg01, local04
26cc8     01 24 86 F1 | 	sub	local04, #1
26ccc     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
26cd0     FD 16 02 F6 | 	mov	arg03, result1
26cd4     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
26cd8     01 26 CE F7 | 	test	local05, #1 wz
26cdc                 | ' 		return FR_NOT_READY;
26cdc     03 FA 05 56 |  if_ne	mov	result1, #3
26ce0     98 04 90 5D |  if_ne	jmp	#LR__4030
26ce4     00 20 0E F2 | 	cmp	local02, #0 wz
26ce8     0B 27 02 56 |  if_ne	mov	local05, arg03
26cec     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
26cf0     04 26 CE 57 |  if_ne	test	local05, #4 wz
26cf4                 | ' 		return FR_WRITE_PROTECTED;
26cf4     0A FA 05 56 |  if_ne	mov	result1, #10
26cf8     80 04 90 5D |  if_ne	jmp	#LR__4030
26cfc     12 13 02 F6 | 	mov	arg01, local04
26d00     00 14 06 F6 | 	mov	arg02, #0
26d04     00 FE BF FD | 	call	#_fatfs_cc_find_volume
26d08     FD 12 02 F6 | 	mov	arg01, result1
26d0c     04 12 0E F2 | 	cmp	arg01, #4 wz
26d10     01 FA 05 A6 |  if_e	mov	result1, #1
26d14     64 04 90 AD |  if_e	jmp	#LR__4030
26d18     02 12 16 F2 | 	cmp	arg01, #2 wc
26d1c     0D FA 05 36 |  if_ae	mov	result1, #13
26d20     58 04 90 3D |  if_ae	jmp	#LR__4030
26d24     30 24 06 F1 | 	add	local04, #48
26d28     12 29 02 FB | 	rdlong	local06, local04
26d2c     04 24 06 F1 | 	add	local04, #4
26d30     12 13 02 F6 | 	mov	arg01, local04
26d34     34 24 86 F1 | 	sub	local04, #52
26d38     0B 12 06 F1 | 	add	arg01, #11
26d3c                 | ' {
26d3c                 | ' 
26d3c                 | ' 	return *((WORD*)ptr);
26d3c     09 FB E1 FA | 	rdword	result1, arg01
26d40     01 00 00 FF 
26d44     00 FA 0D F2 | 	cmp	result1, ##512 wz
26d48     0D FA 05 56 |  if_ne	mov	result1, #13
26d4c     2C 04 90 5D |  if_ne	jmp	#LR__4030
26d50     34 24 06 F1 | 	add	local04, #52
26d54     12 13 02 F6 | 	mov	arg01, local04
26d58     34 24 86 F1 | 	sub	local04, #52
26d5c     16 12 06 F1 | 	add	arg01, #22
26d60                 | ' {
26d60                 | ' 
26d60                 | ' 	return *((WORD*)ptr);
26d60     09 FB E1 FA | 	rdword	result1, arg01
26d64     FD 2A 0A F6 | 	mov	local07, result1 wz
26d68     18 00 90 5D |  if_ne	jmp	#LR__4022
26d6c     34 24 06 F1 | 	add	local04, #52
26d70     12 13 02 F6 | 	mov	arg01, local04
26d74     34 24 86 F1 | 	sub	local04, #52
26d78     24 12 06 F1 | 	add	arg01, #36
26d7c                 | ' {
26d7c                 | ' 
26d7c                 | ' 	return *((DWORD*)ptr);
26d7c     09 FB 01 FB | 	rdlong	result1, arg01
26d80     FD 2A 02 F6 | 	mov	local07, result1
26d84                 | LR__4022
26d84     1C 24 06 F1 | 	add	local04, #28
26d88     12 2B 62 FC | 	wrlong	local07, local04
26d8c     28 24 06 F1 | 	add	local04, #40
26d90     12 27 C2 FA | 	rdbyte	local05, local04
26d94     42 24 86 F1 | 	sub	local04, #66
26d98     12 27 42 FC | 	wrbyte	local05, local04
26d9c     12 27 C2 FA | 	rdbyte	local05, local04
26da0     02 24 86 F1 | 	sub	local04, #2
26da4     01 26 0E F2 | 	cmp	local05, #1 wz
26da8     02 24 06 51 |  if_ne	add	local04, #2
26dac     12 27 C2 5A |  if_ne	rdbyte	local05, local04
26db0     02 24 86 51 |  if_ne	sub	local04, #2
26db4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
26db8     0D FA 05 56 |  if_ne	mov	result1, #13
26dbc     BC 03 90 5D |  if_ne	jmp	#LR__4030
26dc0     02 24 06 F1 | 	add	local04, #2
26dc4     12 27 C2 FA | 	rdbyte	local05, local04
26dc8     13 2B 02 FD | 	qmul	local07, local05
26dcc     3F 24 06 F1 | 	add	local04, #63
26dd0     12 27 C2 FA | 	rdbyte	local05, local04
26dd4     37 24 86 F1 | 	sub	local04, #55
26dd8     12 27 52 FC | 	wrword	local05, local04
26ddc     12 27 EA FA | 	rdword	local05, local04 wz
26de0     0A 24 86 F1 | 	sub	local04, #10
26de4     18 2A 62 FD | 	getqx	local07
26de8     20 00 90 AD |  if_e	jmp	#LR__4023
26dec     0A 24 06 F1 | 	add	local04, #10
26df0     12 27 E2 FA | 	rdword	local05, local04
26df4     13 23 32 F9 | 	getword	local03, local05, #0
26df8     0A 24 86 F1 | 	sub	local04, #10
26dfc     13 27 32 F9 | 	getword	local05, local05, #0
26e00     01 26 86 F1 | 	sub	local05, #1
26e04     13 23 CA F7 | 	test	local03, local05 wz
26e08     08 00 90 AD |  if_e	jmp	#LR__4024
26e0c                 | LR__4023
26e0c     0D FA 05 F6 | 	mov	result1, #13
26e10     68 03 90 FD | 	jmp	#LR__4030
26e14                 | LR__4024
26e14     34 24 06 F1 | 	add	local04, #52
26e18     12 13 02 F6 | 	mov	arg01, local04
26e1c     11 12 06 F1 | 	add	arg01, #17
26e20                 | ' {
26e20                 | ' 
26e20                 | ' 	return *((WORD*)ptr);
26e20     09 FB E1 FA | 	rdword	result1, arg01
26e24     2C 24 86 F1 | 	sub	local04, #44
26e28     12 FB 51 FC | 	wrword	result1, local04
26e2c     12 27 E2 FA | 	rdword	local05, local04
26e30     08 24 86 F1 | 	sub	local04, #8
26e34     13 13 52 F6 | 	abs	arg01, local05 wc
26e38     09 13 42 F8 | 	getnib	arg01, arg01, #0
26e3c     09 13 8A F6 | 	negc	arg01, arg01 wz
26e40     0D FA 05 56 |  if_ne	mov	result1, #13
26e44     34 03 90 5D |  if_ne	jmp	#LR__4030
26e48     34 24 06 F1 | 	add	local04, #52
26e4c     12 13 02 F6 | 	mov	arg01, local04
26e50     34 24 86 F1 | 	sub	local04, #52
26e54     13 12 06 F1 | 	add	arg01, #19
26e58                 | ' {
26e58                 | ' 
26e58                 | ' 	return *((WORD*)ptr);
26e58     09 FB E1 FA | 	rdword	result1, arg01
26e5c     FD 2C 0A F6 | 	mov	local08, result1 wz
26e60     34 24 06 A1 |  if_e	add	local04, #52
26e64     12 13 02 A6 |  if_e	mov	arg01, local04
26e68     34 24 86 A1 |  if_e	sub	local04, #52
26e6c     20 12 06 A1 |  if_e	add	arg01, #32
26e70                 | ' {
26e70                 | ' 
26e70                 | ' 	return *((DWORD*)ptr);
26e70     09 2D 02 AB |  if_e	rdlong	local08, arg01
26e74     34 24 06 F1 | 	add	local04, #52
26e78     12 13 02 F6 | 	mov	arg01, local04
26e7c     34 24 86 F1 | 	sub	local04, #52
26e80     0E 12 06 F1 | 	add	arg01, #14
26e84                 | ' {
26e84                 | ' 
26e84                 | ' 	return *((WORD*)ptr);
26e84     09 FB E1 FA | 	rdword	result1, arg01
26e88     FD 12 02 F6 | 	mov	arg01, result1
26e8c     09 27 02 F6 | 	mov	local05, arg01
26e90     0F 26 4E F7 | 	zerox	local05, #15 wz
26e94     0D FA 05 A6 |  if_e	mov	result1, #13
26e98     E0 02 90 AD |  if_e	jmp	#LR__4030
26e9c     09 2F 32 F9 | 	getword	local09, arg01, #0
26ea0     15 2F 02 F1 | 	add	local09, local07
26ea4     08 24 06 F1 | 	add	local04, #8
26ea8     12 27 E2 FA | 	rdword	local05, local04
26eac     08 24 86 F1 | 	sub	local04, #8
26eb0     13 27 52 F6 | 	abs	local05, local05 wc
26eb4     04 26 46 F0 | 	shr	local05, #4
26eb8     13 2F 82 F3 | 	sumc	local09, local05
26ebc     17 2D 12 F2 | 	cmp	local08, local09 wc
26ec0     0D FA 05 C6 |  if_b	mov	result1, #13
26ec4     B4 02 90 CD |  if_b	jmp	#LR__4030
26ec8     17 2D 82 F1 | 	sub	local08, local09
26ecc     0A 24 06 F1 | 	add	local04, #10
26ed0     12 27 E2 FA | 	rdword	local05, local04
26ed4     13 2D 12 FD | 	qdiv	local08, local05
26ed8     0A 24 86 F1 | 	sub	local04, #10
26edc     18 26 62 FD | 	getqx	local05
26ee0     00 26 0E F2 | 	cmp	local05, #0 wz
26ee4     0D FA 05 A6 |  if_e	mov	result1, #13
26ee8     90 02 90 AD |  if_e	jmp	#LR__4030
26eec     00 30 06 F6 | 	mov	local10, #0
26ef0     FF FF 07 FF 
26ef4     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
26ef8     03 30 06 C6 |  if_b	mov	local10, #3
26efc     7F 00 00 FF 
26f00     F6 27 16 F2 | 	cmp	local05, ##65526 wc
26f04     02 30 06 C6 |  if_b	mov	local10, #2
26f08     07 00 00 FF 
26f0c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
26f10     01 30 06 C6 |  if_b	mov	local10, #1
26f14     00 30 0E F2 | 	cmp	local10, #0 wz
26f18     0D FA 05 A6 |  if_e	mov	result1, #13
26f1c     5C 02 90 AD |  if_e	jmp	#LR__4030
26f20     02 26 06 F1 | 	add	local05, #2
26f24     18 24 06 F1 | 	add	local04, #24
26f28     12 27 62 FC | 	wrlong	local05, local04
26f2c     08 24 06 F1 | 	add	local04, #8
26f30     12 29 62 FC | 	wrlong	local06, local04
26f34     14 27 02 F6 | 	mov	local05, local06
26f38     09 13 32 F9 | 	getword	arg01, arg01, #0
26f3c     09 27 02 F1 | 	add	local05, arg01
26f40     04 24 06 F1 | 	add	local04, #4
26f44     12 27 62 FC | 	wrlong	local05, local04
26f48     14 27 02 F6 | 	mov	local05, local06
26f4c     17 27 02 F1 | 	add	local05, local09
26f50     08 24 06 F1 | 	add	local04, #8
26f54     12 27 62 FC | 	wrlong	local05, local04
26f58     2C 24 86 F1 | 	sub	local04, #44
26f5c     03 30 0E F2 | 	cmp	local10, #3 wz
26f60     5C 00 90 5D |  if_ne	jmp	#LR__4025
26f64     34 24 06 F1 | 	add	local04, #52
26f68     12 13 02 F6 | 	mov	arg01, local04
26f6c     34 24 86 F1 | 	sub	local04, #52
26f70     2A 12 06 F1 | 	add	arg01, #42
26f74                 | ' {
26f74                 | ' 
26f74                 | ' 	return *((WORD*)ptr);
26f74     09 FB E9 FA | 	rdword	result1, arg01 wz
26f78     0D FA 05 56 |  if_ne	mov	result1, #13
26f7c     FC 01 90 5D |  if_ne	jmp	#LR__4030
26f80     08 24 06 F1 | 	add	local04, #8
26f84     12 27 EA FA | 	rdword	local05, local04 wz
26f88     08 24 86 F1 | 	sub	local04, #8
26f8c     0D FA 05 56 |  if_ne	mov	result1, #13
26f90     E8 01 90 5D |  if_ne	jmp	#LR__4030
26f94     34 24 06 F1 | 	add	local04, #52
26f98     12 13 02 F6 | 	mov	arg01, local04
26f9c     2C 12 06 F1 | 	add	arg01, #44
26fa0                 | ' {
26fa0                 | ' 
26fa0                 | ' 	return *((DWORD*)ptr);
26fa0     09 FB 01 FB | 	rdlong	result1, arg01
26fa4     0C 24 86 F1 | 	sub	local04, #12
26fa8     12 FB 61 FC | 	wrlong	result1, local04
26fac     10 24 86 F1 | 	sub	local04, #16
26fb0     12 33 02 FB | 	rdlong	local11, local04
26fb4     18 24 86 F1 | 	sub	local04, #24
26fb8     02 32 66 F0 | 	shl	local11, #2
26fbc     6C 00 90 FD | 	jmp	#LR__4027
26fc0                 | LR__4025
26fc0     08 24 06 F1 | 	add	local04, #8
26fc4     12 27 EA FA | 	rdword	local05, local04 wz
26fc8     08 24 86 F1 | 	sub	local04, #8
26fcc     0D FA 05 A6 |  if_e	mov	result1, #13
26fd0     A8 01 90 AD |  if_e	jmp	#LR__4030
26fd4     24 24 06 F1 | 	add	local04, #36
26fd8     12 27 02 FB | 	rdlong	local05, local04
26fdc     15 27 02 F1 | 	add	local05, local07
26fe0     04 24 06 F1 | 	add	local04, #4
26fe4     12 27 62 FC | 	wrlong	local05, local04
26fe8     28 24 86 F1 | 	sub	local04, #40
26fec     02 30 0E F2 | 	cmp	local10, #2 wz
26ff0     18 24 06 A1 |  if_e	add	local04, #24
26ff4     12 27 02 AB |  if_e	rdlong	local05, local04
26ff8     18 24 86 A1 |  if_e	sub	local04, #24
26ffc     01 26 66 A0 |  if_e	shl	local05, #1
27000     24 00 90 AD |  if_e	jmp	#LR__4026
27004     18 24 06 F1 | 	add	local04, #24
27008     12 33 02 FB | 	rdlong	local11, local04
2700c     19 27 02 F6 | 	mov	local05, local11
27010     01 26 66 F0 | 	shl	local05, #1
27014     19 27 02 F1 | 	add	local05, local11
27018     01 26 46 F0 | 	shr	local05, #1
2701c     18 24 86 F1 | 	sub	local04, #24
27020     01 32 06 F5 | 	and	local11, #1
27024     19 27 02 F1 | 	add	local05, local11
27028                 | LR__4026
27028     13 33 02 F6 | 	mov	local11, local05
2702c                 | LR__4027
2702c     FF 33 06 F1 | 	add	local11, #511
27030     09 32 46 F0 | 	shr	local11, #9
27034     1C 24 06 F1 | 	add	local04, #28
27038     12 17 02 FB | 	rdlong	arg03, local04
2703c     1C 24 86 F1 | 	sub	local04, #28
27040     19 17 12 F2 | 	cmp	arg03, local11 wc
27044     0D FA 05 C6 |  if_b	mov	result1, #13
27048     30 01 90 CD |  if_b	jmp	#LR__4030
2704c     14 24 06 F1 | 	add	local04, #20
27050     FF FF FF FF 
27054     12 FF 6B FC | 	wrlong	##-1, local04
27058     04 24 86 F1 | 	sub	local04, #4
2705c     FF FF FF FF 
27060     12 FF 6B FC | 	wrlong	##-1, local04
27064     0C 24 86 F1 | 	sub	local04, #12
27068     12 01 49 FC | 	wrbyte	#128, local04
2706c     04 24 86 F1 | 	sub	local04, #4
27070     03 30 0E F2 | 	cmp	local10, #3 wz
27074     D0 00 90 5D |  if_ne	jmp	#LR__4029
27078     34 24 06 F1 | 	add	local04, #52
2707c     12 13 02 F6 | 	mov	arg01, local04
27080     34 24 86 F1 | 	sub	local04, #52
27084     30 12 06 F1 | 	add	arg01, #48
27088                 | ' {
27088                 | ' 
27088                 | ' 	return *((WORD*)ptr);
27088     09 FB E1 FA | 	rdword	result1, arg01
2708c     FD 26 32 F9 | 	getword	local05, result1, #0
27090     01 26 0E F2 | 	cmp	local05, #1 wz
27094     B0 00 90 5D |  if_ne	jmp	#LR__4029
27098     01 28 06 F1 | 	add	local06, #1
2709c     12 13 02 F6 | 	mov	arg01, local04
270a0     14 15 02 F6 | 	mov	arg02, local06
270a4     CC CD BF FD | 	call	#_fatfs_cc_move_window
270a8     00 FA 0D F2 | 	cmp	result1, #0 wz
270ac     98 00 90 5D |  if_ne	jmp	#LR__4029
270b0     04 24 06 F1 | 	add	local04, #4
270b4     12 01 48 FC | 	wrbyte	#0, local04
270b8     30 24 06 F1 | 	add	local04, #48
270bc     12 13 02 F6 | 	mov	arg01, local04
270c0     34 24 86 F1 | 	sub	local04, #52
270c4     FE 13 06 F1 | 	add	arg01, #510
270c8                 | ' {
270c8                 | ' 
270c8                 | ' 	return *((WORD*)ptr);
270c8     09 FB E1 FA | 	rdword	result1, arg01
270cc     FD 26 32 F9 | 	getword	local05, result1, #0
270d0     55 00 00 FF 
270d4     55 26 0E F2 | 	cmp	local05, ##43605 wz
270d8     34 24 06 A1 |  if_e	add	local04, #52
270dc     12 13 02 A6 |  if_e	mov	arg01, local04
270e0     34 24 86 A1 |  if_e	sub	local04, #52
270e4                 | ' {
270e4                 | ' 
270e4                 | ' 	return *((DWORD*)ptr);
270e4     09 FB 01 AB |  if_e	rdlong	result1, arg01
270e8     A9 B0 20 AF 
270ec     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
270f0     54 00 90 5D |  if_ne	jmp	#LR__4028
270f4     34 24 06 F1 | 	add	local04, #52
270f8     12 13 02 F6 | 	mov	arg01, local04
270fc     34 24 86 F1 | 	sub	local04, #52
27100     E4 13 06 F1 | 	add	arg01, #484
27104                 | ' {
27104                 | ' 
27104                 | ' 	return *((DWORD*)ptr);
27104     09 FB 01 FB | 	rdlong	result1, arg01
27108     B9 A0 30 FF 
2710c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
27110     34 00 90 5D |  if_ne	jmp	#LR__4028
27114     34 24 06 F1 | 	add	local04, #52
27118     12 13 02 F6 | 	mov	arg01, local04
2711c     E8 13 06 F1 | 	add	arg01, #488
27120                 | ' {
27120                 | ' 
27120                 | ' 	return *((DWORD*)ptr);
27120     09 FB 01 FB | 	rdlong	result1, arg01
27124     20 24 86 F1 | 	sub	local04, #32
27128     12 FB 61 FC | 	wrlong	result1, local04
2712c     20 24 06 F1 | 	add	local04, #32
27130     12 13 02 F6 | 	mov	arg01, local04
27134     EC 13 06 F1 | 	add	arg01, #492
27138                 | ' {
27138                 | ' 
27138                 | ' 	return *((DWORD*)ptr);
27138     09 FB 01 FB | 	rdlong	result1, arg01
2713c     24 24 86 F1 | 	sub	local04, #36
27140     12 FB 61 FC | 	wrlong	result1, local04
27144     10 24 86 F1 | 	sub	local04, #16
27148                 | LR__4028
27148                 | LR__4029
27148     12 31 42 FC | 	wrbyte	local10, local04
2714c     04 E4 05 F1 | 	add	objptr, #4
27150     F2 26 E2 FA | 	rdword	local05, objptr
27154     01 26 06 F1 | 	add	local05, #1
27158     F2 26 52 FC | 	wrword	local05, objptr
2715c     F2 32 E2 FA | 	rdword	local11, objptr
27160     06 24 06 F1 | 	add	local04, #6
27164     12 33 52 FC | 	wrword	local11, local04
27168     04 E4 05 F1 | 	add	objptr, #4
2716c     06 24 06 F1 | 	add	local04, #6
27170     12 E5 61 FC | 	wrlong	objptr, local04
27174                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
27174                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
27174                 | ' 			{
27174                 | ' 
27174                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
27174                 | ' 
27174                 | ' 
27174                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
27174                 | ' 
27174                 | ' 			}
27174                 | ' 		}
27174                 | ' 
27174                 | ' 
27174                 | ' 	}
27174                 | ' 
27174                 | ' 	fs->fs_type = (BYTE)fmt;
27174                 | ' 	fs->id = ++Fsid;
27174                 | ' 
27174                 | ' 	fs->lfnbuf = LfnBuf;
27174                 | ' #line 3567 "ff.c"
27174                 | ' 	return FR_OK;
27174     00 FA 05 F6 | 	mov	result1, #0
27178     08 E4 85 F1 | 	sub	objptr, #8
2717c                 | LR__4030
2717c     A7 F0 03 F6 | 	mov	ptra, fp
27180     B2 00 A0 FD | 	call	#popregs_
27184                 | _fatfs_cc_mount_volume_ret
27184     2D 00 64 FD | 	ret
27188                 | 
27188                 | _fatfs_cc_validate
27188     09 01 0A F6 | 	mov	_var01, arg01 wz
2718c     09 02 06 F6 | 	mov	_var02, #9
27190     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
27194     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
27198     50 00 90 AD |  if_e	jmp	#LR__4040
2719c     04 00 06 F1 | 	add	_var01, #4
271a0     00 07 E2 FA | 	rdword	_var04, _var01
271a4     04 00 86 F1 | 	sub	_var01, #4
271a8     00 13 02 FB | 	rdlong	arg01, _var01
271ac     06 12 06 F1 | 	add	arg01, #6
271b0     09 FB E1 FA | 	rdword	result1, arg01
271b4     FD 06 0A F2 | 	cmp	_var04, result1 wz
271b8     30 00 90 5D |  if_ne	jmp	#LR__4040
271bc     00 07 02 FB | 	rdlong	_var04, _var01
271c0     01 06 06 F1 | 	add	_var04, #1
271c4     03 13 CA FA | 	rdbyte	arg01, _var04 wz
271c8     01 FA 05 56 |  if_ne	mov	result1, #1
271cc                 | ' 
271cc                 | ' 	return Stat;
271cc     01 00 00 AF 
271d0     20 E4 05 A1 |  if_e	add	objptr, ##544
271d4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
271d8     01 00 00 AF 
271dc     20 E4 85 A1 |  if_e	sub	objptr, ##544
271e0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
271e4     01 04 CE F7 | 	test	_var03, #1 wz
271e8     00 02 06 A6 |  if_e	mov	_var02, #0
271ec                 | LR__4040
271ec     00 02 0E F2 | 	cmp	_var02, #0 wz
271f0     00 05 02 AB |  if_e	rdlong	_var03, _var01
271f4     00 04 06 56 |  if_ne	mov	_var03, #0
271f8     0A 05 62 FC | 	wrlong	_var03, arg02
271fc                 | ' 			res = FR_OK;
271fc                 | ' 		}
271fc                 | ' 
271fc                 | ' 	}
271fc                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
271fc                 | ' 	return res;
271fc     01 FB 01 F6 | 	mov	result1, _var02
27200                 | _fatfs_cc_validate_ret
27200     2D 00 64 FD | 	ret
27204                 | 
27204                 | _fatfs_cc_f_mount
27204     01 4A 05 F6 | 	mov	COUNT_, #1
27208     A8 00 A0 FD | 	call	#pushregs_
2720c     20 F0 07 F1 | 	add	ptra, #32
27210     04 4E 05 F1 | 	add	fp, #4
27214     A7 12 62 FC | 	wrlong	arg01, fp
27218     04 4E 05 F1 | 	add	fp, #4
2721c     A7 14 62 FC | 	wrlong	arg02, fp
27220     04 4E 05 F1 | 	add	fp, #4
27224     A7 16 42 FC | 	wrbyte	arg03, fp
27228     04 4E 85 F1 | 	sub	fp, #4
2722c     A7 16 02 FB | 	rdlong	arg03, fp
27230     14 4E 05 F1 | 	add	fp, #20
27234     A7 16 62 FC | 	wrlong	arg03, fp
27238     A7 12 02 F6 | 	mov	arg01, fp
2723c     1C 4E 85 F1 | 	sub	fp, #28
27240     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
27244     14 4E 05 F1 | 	add	fp, #20
27248     A7 FA 61 FC | 	wrlong	result1, fp
2724c     14 4E 85 F1 | 	sub	fp, #20
27250     00 FA 55 F2 | 	cmps	result1, #0 wc
27254     0B FA 05 C6 |  if_b	mov	result1, #11
27258     C0 00 90 CD |  if_b	jmp	#LR__4051
2725c     14 4E 05 F1 | 	add	fp, #20
27260     A7 16 02 FB | 	rdlong	arg03, fp
27264     02 16 66 F0 | 	shl	arg03, #2
27268     F2 16 02 F1 | 	add	arg03, objptr
2726c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
27270     04 4E 85 F1 | 	sub	fp, #4
27274     A7 16 62 FC | 	wrlong	arg03, fp
27278     10 4E 85 F1 | 	sub	fp, #16
2727c     28 00 90 AD |  if_e	jmp	#LR__4050
27280     10 4E 05 F1 | 	add	fp, #16
27284     A7 16 02 FB | 	rdlong	arg03, fp
27288     10 4E 85 F1 | 	sub	fp, #16
2728c     01 16 06 F1 | 	add	arg03, #1
27290     0B 13 C2 FA | 	rdbyte	arg01, arg03
27294     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
27298     10 4E 05 F1 | 	add	fp, #16
2729c     A7 16 02 FB | 	rdlong	arg03, fp
272a0     10 4E 85 F1 | 	sub	fp, #16
272a4     0B 01 48 FC | 	wrbyte	#0, arg03
272a8                 | LR__4050
272a8     04 4E 05 F1 | 	add	fp, #4
272ac     A7 1E 0A FB | 	rdlong	local01, fp wz
272b0     04 4E 85 F1 | 	sub	fp, #4
272b4     04 4E 05 51 |  if_ne	add	fp, #4
272b8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
272bc     04 4E 85 51 |  if_ne	sub	fp, #4
272c0     0F 01 48 5C |  if_ne	wrbyte	#0, local01
272c4     14 4E 05 F1 | 	add	fp, #20
272c8     A7 1E 02 FB | 	rdlong	local01, fp
272cc     02 1E 66 F0 | 	shl	local01, #2
272d0     F2 1E 02 F1 | 	add	local01, objptr
272d4     10 4E 85 F1 | 	sub	fp, #16
272d8     A7 16 02 FB | 	rdlong	arg03, fp
272dc     0F 17 62 FC | 	wrlong	arg03, local01
272e0     08 4E 05 F1 | 	add	fp, #8
272e4     A7 1E CA FA | 	rdbyte	local01, fp wz
272e8     0C 4E 85 F1 | 	sub	fp, #12
272ec     00 FA 05 A6 |  if_e	mov	result1, #0
272f0     28 00 90 AD |  if_e	jmp	#LR__4051
272f4     08 4E 05 F1 | 	add	fp, #8
272f8     A7 12 02 F6 | 	mov	arg01, fp
272fc     04 4E 85 F1 | 	sub	fp, #4
27300     A7 14 02 F6 | 	mov	arg02, fp
27304     04 4E 85 F1 | 	sub	fp, #4
27308     00 16 06 F6 | 	mov	arg03, #0
2730c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
27310     18 4E 05 F1 | 	add	fp, #24
27314     A7 FA 61 FC | 	wrlong	result1, fp
27318                 | ' 
27318                 | ' 	res = mount_volume(&path, &fs, 0);
27318                 | ' 	return res ;
27318     18 4E 85 F1 | 	sub	fp, #24
2731c                 | LR__4051
2731c     A7 F0 03 F6 | 	mov	ptra, fp
27320     B2 00 A0 FD | 	call	#popregs_
27324                 | _fatfs_cc_f_mount_ret
27324     2D 00 64 FD | 	ret
27328                 | 
27328                 | _fatfs_cc_f_open
27328     02 4A 05 F6 | 	mov	COUNT_, #2
2732c     A8 00 A0 FD | 	call	#pushregs_
27330     60 F0 07 F1 | 	add	ptra, #96
27334     04 4E 05 F1 | 	add	fp, #4
27338     A7 12 62 FC | 	wrlong	arg01, fp
2733c     04 4E 05 F1 | 	add	fp, #4
27340     A7 14 62 FC | 	wrlong	arg02, fp
27344     04 4E 05 F1 | 	add	fp, #4
27348     A7 16 42 FC | 	wrbyte	arg03, fp
2734c     08 4E 85 F1 | 	sub	fp, #8
27350     A7 18 0A FB | 	rdlong	arg04, fp wz
27354     04 4E 85 F1 | 	sub	fp, #4
27358     09 FA 05 A6 |  if_e	mov	result1, #9
2735c     98 06 90 AD |  if_e	jmp	#LR__4077
27360     0C 4E 05 F1 | 	add	fp, #12
27364     A7 18 C2 FA | 	rdbyte	arg04, fp
27368     3F 18 06 F5 | 	and	arg04, #63
2736c     A7 18 42 FC | 	wrbyte	arg04, fp
27370     04 4E 85 F1 | 	sub	fp, #4
27374     A7 12 02 F6 | 	mov	arg01, fp
27378     3C 4E 05 F1 | 	add	fp, #60
2737c     A7 14 02 F6 | 	mov	arg02, fp
27380     38 4E 85 F1 | 	sub	fp, #56
27384     A7 16 C2 FA | 	rdbyte	arg03, fp
27388     0C 4E 85 F1 | 	sub	fp, #12
2738c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
27390     10 4E 05 F1 | 	add	fp, #16
27394     A7 FA 61 FC | 	wrlong	result1, fp
27398     10 4E 85 F1 | 	sub	fp, #16
2739c     00 FA 0D F2 | 	cmp	result1, #0 wz
273a0     2C 06 90 5D |  if_ne	jmp	#LR__4076
273a4     44 4E 05 F1 | 	add	fp, #68
273a8     A7 18 02 FB | 	rdlong	arg04, fp
273ac     30 4E 85 F1 | 	sub	fp, #48
273b0     A7 18 62 FC | 	wrlong	arg04, fp
273b4     A7 12 02 F6 | 	mov	arg01, fp
273b8     0C 4E 85 F1 | 	sub	fp, #12
273bc     A7 1E 02 FB | 	rdlong	local01, fp
273c0     08 4E 85 F1 | 	sub	fp, #8
273c4     0F 15 02 F6 | 	mov	arg02, local01
273c8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
273cc     10 4E 05 F1 | 	add	fp, #16
273d0     A7 FA 61 FC | 	wrlong	result1, fp
273d4     10 4E 85 F1 | 	sub	fp, #16
273d8     00 FA 0D F2 | 	cmp	result1, #0 wz
273dc     1C 00 90 5D |  if_ne	jmp	#LR__4060
273e0     3F 4E 05 F1 | 	add	fp, #63
273e4     A7 18 C2 FA | 	rdbyte	arg04, fp
273e8     3F 4E 85 F1 | 	sub	fp, #63
273ec     80 18 CE F7 | 	test	arg04, #128 wz
273f0     10 4E 05 51 |  if_ne	add	fp, #16
273f4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
273f8     10 4E 85 51 |  if_ne	sub	fp, #16
273fc                 | LR__4060
273fc     0C 4E 05 F1 | 	add	fp, #12
27400     A7 18 C2 FA | 	rdbyte	arg04, fp
27404     0C 4E 85 F1 | 	sub	fp, #12
27408     1C 18 CE F7 | 	test	arg04, #28 wz
2740c     F0 01 90 AD |  if_e	jmp	#LR__4065
27410     10 4E 05 F1 | 	add	fp, #16
27414     A7 1E 0A FB | 	rdlong	local01, fp wz
27418     10 4E 85 F1 | 	sub	fp, #16
2741c     48 00 90 AD |  if_e	jmp	#LR__4062
27420     10 4E 05 F1 | 	add	fp, #16
27424     A7 18 02 FB | 	rdlong	arg04, fp
27428     10 4E 85 F1 | 	sub	fp, #16
2742c     04 18 0E F2 | 	cmp	arg04, #4 wz
27430     1C 00 90 5D |  if_ne	jmp	#LR__4061
27434     14 4E 05 F1 | 	add	fp, #20
27438     A7 12 02 F6 | 	mov	arg01, fp
2743c     14 4E 85 F1 | 	sub	fp, #20
27440     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
27444     10 4E 05 F1 | 	add	fp, #16
27448     A7 FA 61 FC | 	wrlong	result1, fp
2744c     10 4E 85 F1 | 	sub	fp, #16
27450                 | LR__4061
27450     0C 4E 05 F1 | 	add	fp, #12
27454     A7 1E C2 FA | 	rdbyte	local01, fp
27458     08 1E 46 F5 | 	or	local01, #8
2745c     A7 1E 42 FC | 	wrbyte	local01, fp
27460     0C 4E 85 F1 | 	sub	fp, #12
27464     3C 00 90 FD | 	jmp	#LR__4064
27468                 | LR__4062
27468     1A 4E 05 F1 | 	add	fp, #26
2746c     A7 1E C2 FA | 	rdbyte	local01, fp
27470     1A 4E 85 F1 | 	sub	fp, #26
27474     11 1E CE F7 | 	test	local01, #17 wz
27478     10 4E 05 51 |  if_ne	add	fp, #16
2747c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
27480     10 4E 85 51 |  if_ne	sub	fp, #16
27484     1C 00 90 5D |  if_ne	jmp	#LR__4063
27488     0C 4E 05 F1 | 	add	fp, #12
2748c     A7 1E C2 FA | 	rdbyte	local01, fp
27490     0C 4E 85 F1 | 	sub	fp, #12
27494     04 1E CE F7 | 	test	local01, #4 wz
27498     10 4E 05 51 |  if_ne	add	fp, #16
2749c     A7 10 68 5C |  if_ne	wrlong	#8, fp
274a0     10 4E 85 51 |  if_ne	sub	fp, #16
274a4                 | LR__4063
274a4                 | LR__4064
274a4     10 4E 05 F1 | 	add	fp, #16
274a8     A7 1E 0A FB | 	rdlong	local01, fp wz
274ac     10 4E 85 F1 | 	sub	fp, #16
274b0     A8 01 90 5D |  if_ne	jmp	#LR__4068
274b4     0C 4E 05 F1 | 	add	fp, #12
274b8     A7 1E C2 FA | 	rdbyte	local01, fp
274bc     0C 4E 85 F1 | 	sub	fp, #12
274c0     08 1E CE F7 | 	test	local01, #8 wz
274c4     94 01 90 AD |  if_e	jmp	#LR__4068
274c8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
274cc     54 4E 05 F1 | 	add	fp, #84
274d0     A7 FA 61 FC | 	wrlong	result1, fp
274d4     24 4E 85 F1 | 	sub	fp, #36
274d8     A7 12 02 FB | 	rdlong	arg01, fp
274dc     0E 12 06 F1 | 	add	arg01, #14
274e0     09 FB 61 FC | 	wrlong	result1, arg01
274e4     A7 12 02 FB | 	rdlong	arg01, fp
274e8     16 12 06 F1 | 	add	arg01, #22
274ec     24 4E 05 F1 | 	add	fp, #36
274f0     A7 14 02 FB | 	rdlong	arg02, fp
274f4     09 15 62 FC | 	wrlong	arg02, arg01
274f8     10 4E 85 F1 | 	sub	fp, #16
274fc     A7 12 02 FB | 	rdlong	arg01, fp
27500     14 4E 85 F1 | 	sub	fp, #20
27504     A7 14 02 FB | 	rdlong	arg02, fp
27508     30 4E 85 F1 | 	sub	fp, #48
2750c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
27510     48 4E 05 F1 | 	add	fp, #72
27514     A7 FA 61 FC | 	wrlong	result1, fp
27518     18 4E 85 F1 | 	sub	fp, #24
2751c     A7 1E 02 FB | 	rdlong	local01, fp
27520     0B 1E 06 F1 | 	add	local01, #11
27524     0F 41 48 FC | 	wrbyte	#32, local01
27528     14 4E 05 F1 | 	add	fp, #20
2752c     A7 12 02 FB | 	rdlong	arg01, fp
27530     14 4E 85 F1 | 	sub	fp, #20
27534     A7 14 02 FB | 	rdlong	arg02, fp
27538     30 4E 85 F1 | 	sub	fp, #48
2753c     00 16 06 F6 | 	mov	arg03, #0
27540     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
27544     30 4E 05 F1 | 	add	fp, #48
27548     A7 12 02 FB | 	rdlong	arg01, fp
2754c     1C 12 06 F1 | 	add	arg01, #28
27550     09 01 68 FC | 	wrlong	#0, arg01
27554     14 4E 05 F1 | 	add	fp, #20
27558     A7 1E 02 FB | 	rdlong	local01, fp
2755c     03 1E 06 F1 | 	add	local01, #3
27560     0F 03 48 FC | 	wrbyte	#1, local01
27564     04 4E 05 F1 | 	add	fp, #4
27568     A7 1E 0A FB | 	rdlong	local01, fp wz
2756c     48 4E 85 F1 | 	sub	fp, #72
27570     E8 00 90 AD |  if_e	jmp	#LR__4068
27574     44 4E 05 F1 | 	add	fp, #68
27578     A7 1E 02 FB | 	rdlong	local01, fp
2757c     30 1E 06 F1 | 	add	local01, #48
27580     0F 1F 02 FB | 	rdlong	local01, local01
27584     14 4E 05 F1 | 	add	fp, #20
27588     A7 1E 62 FC | 	wrlong	local01, fp
2758c     44 4E 85 F1 | 	sub	fp, #68
27590     A7 12 02 F6 | 	mov	arg01, fp
27594     34 4E 05 F1 | 	add	fp, #52
27598     A7 14 02 FB | 	rdlong	arg02, fp
2759c     48 4E 85 F1 | 	sub	fp, #72
275a0     00 16 06 F6 | 	mov	arg03, #0
275a4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
275a8     10 4E 05 F1 | 	add	fp, #16
275ac     A7 FA 61 FC | 	wrlong	result1, fp
275b0     10 4E 85 F1 | 	sub	fp, #16
275b4     00 FA 0D F2 | 	cmp	result1, #0 wz
275b8     A0 00 90 5D |  if_ne	jmp	#LR__4068
275bc     44 4E 05 F1 | 	add	fp, #68
275c0     A7 12 02 FB | 	rdlong	arg01, fp
275c4     14 4E 05 F1 | 	add	fp, #20
275c8     A7 14 02 FB | 	rdlong	arg02, fp
275cc     58 4E 85 F1 | 	sub	fp, #88
275d0     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
275d4     10 4E 05 F1 | 	add	fp, #16
275d8     A7 FA 61 FC | 	wrlong	result1, fp
275dc     34 4E 05 F1 | 	add	fp, #52
275e0     A7 18 02 FB | 	rdlong	arg04, fp
275e4     04 4E 05 F1 | 	add	fp, #4
275e8     A7 1E 02 FB | 	rdlong	local01, fp
275ec     48 4E 85 F1 | 	sub	fp, #72
275f0     01 1E 86 F1 | 	sub	local01, #1
275f4     10 18 06 F1 | 	add	arg04, #16
275f8     0C 1F 62 FC | 	wrlong	local01, arg04
275fc     5C 00 90 FD | 	jmp	#LR__4068
27600                 | LR__4065
27600     10 4E 05 F1 | 	add	fp, #16
27604     A7 18 0A FB | 	rdlong	arg04, fp wz
27608     10 4E 85 F1 | 	sub	fp, #16
2760c     4C 00 90 5D |  if_ne	jmp	#LR__4067
27610     1A 4E 05 F1 | 	add	fp, #26
27614     A7 18 C2 FA | 	rdbyte	arg04, fp
27618     1A 4E 85 F1 | 	sub	fp, #26
2761c     10 18 CE F7 | 	test	arg04, #16 wz
27620     10 4E 05 51 |  if_ne	add	fp, #16
27624     A7 08 68 5C |  if_ne	wrlong	#4, fp
27628     10 4E 85 51 |  if_ne	sub	fp, #16
2762c     2C 00 90 5D |  if_ne	jmp	#LR__4066
27630     0C 4E 05 F1 | 	add	fp, #12
27634     A7 18 C2 FA | 	rdbyte	arg04, fp
27638     0C 4E 85 F1 | 	sub	fp, #12
2763c     02 18 CE F7 | 	test	arg04, #2 wz
27640     1A 4E 05 51 |  if_ne	add	fp, #26
27644     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
27648     1A 4E 85 51 |  if_ne	sub	fp, #26
2764c     01 1E CE 57 |  if_ne	test	local01, #1 wz
27650     10 4E 05 51 |  if_ne	add	fp, #16
27654     A7 0E 68 5C |  if_ne	wrlong	#7, fp
27658     10 4E 85 51 |  if_ne	sub	fp, #16
2765c                 | LR__4066
2765c                 | LR__4067
2765c                 | LR__4068
2765c     10 4E 05 F1 | 	add	fp, #16
27660     A7 1E 0A FB | 	rdlong	local01, fp wz
27664     10 4E 85 F1 | 	sub	fp, #16
27668     60 00 90 5D |  if_ne	jmp	#LR__4069
2766c     0C 4E 05 F1 | 	add	fp, #12
27670     A7 20 C2 FA | 	rdbyte	local02, fp
27674     0C 4E 85 F1 | 	sub	fp, #12
27678     08 20 CE F7 | 	test	local02, #8 wz
2767c     0C 4E 05 51 |  if_ne	add	fp, #12
27680     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
27684     40 20 46 55 |  if_ne	or	local02, #64
27688     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2768c     0C 4E 85 51 |  if_ne	sub	fp, #12
27690     04 4E 05 F1 | 	add	fp, #4
27694     A7 20 02 FB | 	rdlong	local02, fp
27698     40 4E 05 F1 | 	add	fp, #64
2769c     A7 1E 02 FB | 	rdlong	local01, fp
276a0     30 1E 06 F1 | 	add	local01, #48
276a4     0F 1F 02 FB | 	rdlong	local01, local01
276a8     20 20 06 F1 | 	add	local02, #32
276ac     10 1F 62 FC | 	wrlong	local01, local02
276b0     40 4E 85 F1 | 	sub	fp, #64
276b4     A7 20 02 FB | 	rdlong	local02, fp
276b8     2C 4E 05 F1 | 	add	fp, #44
276bc     A7 1E 02 FB | 	rdlong	local01, fp
276c0     30 4E 85 F1 | 	sub	fp, #48
276c4     24 20 06 F1 | 	add	local02, #36
276c8     10 1F 62 FC | 	wrlong	local01, local02
276cc                 | LR__4069
276cc     10 4E 05 F1 | 	add	fp, #16
276d0     A7 20 0A FB | 	rdlong	local02, fp wz
276d4     10 4E 85 F1 | 	sub	fp, #16
276d8     F4 02 90 5D |  if_ne	jmp	#LR__4075
276dc     04 4E 05 F1 | 	add	fp, #4
276e0     A7 20 02 FB | 	rdlong	local02, fp
276e4     40 4E 05 F1 | 	add	fp, #64
276e8     A7 12 02 FB | 	rdlong	arg01, fp
276ec     14 4E 85 F1 | 	sub	fp, #20
276f0     A7 14 02 FB | 	rdlong	arg02, fp
276f4     30 4E 85 F1 | 	sub	fp, #48
276f8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
276fc     08 20 06 F1 | 	add	local02, #8
27700     10 FB 61 FC | 	wrlong	result1, local02
27704     04 4E 05 F1 | 	add	fp, #4
27708     A7 20 02 FB | 	rdlong	local02, fp
2770c     2C 4E 05 F1 | 	add	fp, #44
27710     A7 12 02 FB | 	rdlong	arg01, fp
27714     1C 12 06 F1 | 	add	arg01, #28
27718                 | ' {
27718                 | ' 
27718                 | ' 	return *((DWORD*)ptr);
27718     09 FB 01 FB | 	rdlong	result1, arg01
2771c     0C 20 06 F1 | 	add	local02, #12
27720     10 FB 61 FC | 	wrlong	result1, local02
27724     2C 4E 85 F1 | 	sub	fp, #44
27728     A7 20 02 FB | 	rdlong	local02, fp
2772c     40 4E 05 F1 | 	add	fp, #64
27730     A7 1E 02 FB | 	rdlong	local01, fp
27734     10 1F 62 FC | 	wrlong	local01, local02
27738     40 4E 85 F1 | 	sub	fp, #64
2773c     A7 20 02 FB | 	rdlong	local02, fp
27740     40 4E 05 F1 | 	add	fp, #64
27744     A7 1E 02 FB | 	rdlong	local01, fp
27748     06 1E 06 F1 | 	add	local01, #6
2774c     0F 1F E2 FA | 	rdword	local01, local01
27750     04 20 06 F1 | 	add	local02, #4
27754     10 1F 52 FC | 	wrword	local01, local02
27758     40 4E 85 F1 | 	sub	fp, #64
2775c     A7 20 02 FB | 	rdlong	local02, fp
27760     08 4E 05 F1 | 	add	fp, #8
27764     A7 1E C2 FA | 	rdbyte	local01, fp
27768     10 20 06 F1 | 	add	local02, #16
2776c     10 1F 42 FC | 	wrbyte	local01, local02
27770     08 4E 85 F1 | 	sub	fp, #8
27774     A7 20 02 FB | 	rdlong	local02, fp
27778     11 20 06 F1 | 	add	local02, #17
2777c     10 01 48 FC | 	wrbyte	#0, local02
27780     A7 20 02 FB | 	rdlong	local02, fp
27784     1C 20 06 F1 | 	add	local02, #28
27788     10 01 68 FC | 	wrlong	#0, local02
2778c     A7 20 02 FB | 	rdlong	local02, fp
27790     14 20 06 F1 | 	add	local02, #20
27794     10 01 68 FC | 	wrlong	#0, local02
27798     A7 12 02 FB | 	rdlong	arg01, fp
2779c     04 4E 85 F1 | 	sub	fp, #4
277a0     28 12 06 F1 | 	add	arg01, #40
277a4     00 14 06 F6 | 	mov	arg02, #0
277a8     09 16 C6 F9 | 	decod	arg03, #9
277ac     98 00 A0 FD | 	call	#\builtin_bytefill_
277b0     0C 4E 05 F1 | 	add	fp, #12
277b4     A7 20 C2 FA | 	rdbyte	local02, fp
277b8     0C 4E 85 F1 | 	sub	fp, #12
277bc     20 20 CE F7 | 	test	local02, #32 wz
277c0     0C 02 90 AD |  if_e	jmp	#LR__4074
277c4     04 4E 05 F1 | 	add	fp, #4
277c8     A7 1E 02 FB | 	rdlong	local01, fp
277cc     04 4E 85 F1 | 	sub	fp, #4
277d0     0C 1E 06 F1 | 	add	local01, #12
277d4     0F 21 02 FB | 	rdlong	local02, local01
277d8     01 20 16 F2 | 	cmp	local02, #1 wc
277dc     F0 01 90 CD |  if_b	jmp	#LR__4074
277e0     04 4E 05 F1 | 	add	fp, #4
277e4     A7 1E 02 FB | 	rdlong	local01, fp
277e8     0F 21 02 F6 | 	mov	local02, local01
277ec     0C 1E 06 F1 | 	add	local01, #12
277f0     0F 1F 02 FB | 	rdlong	local01, local01
277f4     14 20 06 F1 | 	add	local02, #20
277f8     10 1F 62 FC | 	wrlong	local01, local02
277fc     40 4E 05 F1 | 	add	fp, #64
27800     A7 20 02 FB | 	rdlong	local02, fp
27804     0A 20 06 F1 | 	add	local02, #10
27808     10 21 E2 FA | 	rdword	local02, local02
2780c     09 20 66 F0 | 	shl	local02, #9
27810     08 4E 05 F1 | 	add	fp, #8
27814     A7 20 62 FC | 	wrlong	local02, fp
27818     48 4E 85 F1 | 	sub	fp, #72
2781c     A7 20 02 FB | 	rdlong	local02, fp
27820     08 20 06 F1 | 	add	local02, #8
27824     10 1F 02 FB | 	rdlong	local01, local02
27828     4C 4E 05 F1 | 	add	fp, #76
2782c     A7 1E 62 FC | 	wrlong	local01, fp
27830                 | ' 				fp->fptr = fp->obj.objsize;
27830                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
27830                 | ' 				clst = fp->obj.sclust;
27830                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
27830     4C 4E 85 F1 | 	sub	fp, #76
27834     A7 20 02 FB | 	rdlong	local02, fp
27838     0C 20 06 F1 | 	add	local02, #12
2783c     10 1F 02 FB | 	rdlong	local01, local02
27840     58 4E 05 F1 | 	add	fp, #88
27844     A7 1E 62 FC | 	wrlong	local01, fp
27848     5C 4E 85 F1 | 	sub	fp, #92
2784c                 | LR__4070
2784c     10 4E 05 F1 | 	add	fp, #16
27850     A7 20 0A FB | 	rdlong	local02, fp wz
27854     10 4E 85 F1 | 	sub	fp, #16
27858     94 00 90 5D |  if_ne	jmp	#LR__4071
2785c     5C 4E 05 F1 | 	add	fp, #92
27860     A7 20 02 FB | 	rdlong	local02, fp
27864     10 4E 85 F1 | 	sub	fp, #16
27868     A7 1E 02 FB | 	rdlong	local01, fp
2786c     4C 4E 85 F1 | 	sub	fp, #76
27870     0F 21 1A F2 | 	cmp	local02, local01 wcz
27874     78 00 90 ED |  if_be	jmp	#LR__4071
27878     04 4E 05 F1 | 	add	fp, #4
2787c     A7 12 02 FB | 	rdlong	arg01, fp
27880     4C 4E 05 F1 | 	add	fp, #76
27884     A7 14 02 FB | 	rdlong	arg02, fp
27888     50 4E 85 F1 | 	sub	fp, #80
2788c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
27890     50 4E 05 F1 | 	add	fp, #80
27894     A7 FA 61 FC | 	wrlong	result1, fp
27898     50 4E 85 F1 | 	sub	fp, #80
2789c     02 FA 15 F2 | 	cmp	result1, #2 wc
278a0     10 4E 05 C1 |  if_b	add	fp, #16
278a4     A7 04 68 CC |  if_b	wrlong	#2, fp
278a8     10 4E 85 C1 |  if_b	sub	fp, #16
278ac     50 4E 05 F1 | 	add	fp, #80
278b0     A7 20 02 FB | 	rdlong	local02, fp
278b4     50 4E 85 F1 | 	sub	fp, #80
278b8     FF FF 7F FF 
278bc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
278c0     10 4E 05 A1 |  if_e	add	fp, #16
278c4     A7 02 68 AC |  if_e	wrlong	#1, fp
278c8     10 4E 85 A1 |  if_e	sub	fp, #16
278cc     5C 4E 05 F1 | 	add	fp, #92
278d0     A7 20 02 FB | 	rdlong	local02, fp
278d4     10 4E 85 F1 | 	sub	fp, #16
278d8     A7 1E 02 FB | 	rdlong	local01, fp
278dc     0F 21 82 F1 | 	sub	local02, local01
278e0     10 4E 05 F1 | 	add	fp, #16
278e4     A7 20 62 FC | 	wrlong	local02, fp
278e8     5C 4E 85 F1 | 	sub	fp, #92
278ec     5C FF 9F FD | 	jmp	#LR__4070
278f0                 | LR__4071
278f0     04 4E 05 F1 | 	add	fp, #4
278f4     A7 20 02 FB | 	rdlong	local02, fp
278f8     4C 4E 05 F1 | 	add	fp, #76
278fc     A7 1E 02 FB | 	rdlong	local01, fp
27900     18 20 06 F1 | 	add	local02, #24
27904     10 1F 62 FC | 	wrlong	local01, local02
27908     40 4E 85 F1 | 	sub	fp, #64
2790c     A7 20 0A FB | 	rdlong	local02, fp wz
27910     10 4E 85 F1 | 	sub	fp, #16
27914     B8 00 90 5D |  if_ne	jmp	#LR__4073
27918     5C 4E 05 F1 | 	add	fp, #92
2791c     A7 1E 02 FB | 	rdlong	local01, fp
27920     5C 4E 85 F1 | 	sub	fp, #92
27924     FF 1F CE F7 | 	test	local01, #511 wz
27928     A4 00 90 AD |  if_e	jmp	#LR__4073
2792c     44 4E 05 F1 | 	add	fp, #68
27930     A7 12 02 FB | 	rdlong	arg01, fp
27934     0C 4E 05 F1 | 	add	fp, #12
27938     A7 14 02 FB | 	rdlong	arg02, fp
2793c     50 4E 85 F1 | 	sub	fp, #80
27940     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
27944     58 4E 05 F1 | 	add	fp, #88
27948     A7 FA 61 FC | 	wrlong	result1, fp
2794c     00 FA 4D F2 | 	cmps	result1, #0 wz
27950     58 4E 85 F1 | 	sub	fp, #88
27954     10 4E 05 A1 |  if_e	add	fp, #16
27958     A7 04 68 AC |  if_e	wrlong	#2, fp
2795c     10 4E 85 A1 |  if_e	sub	fp, #16
27960     6C 00 90 AD |  if_e	jmp	#LR__4072
27964     04 4E 05 F1 | 	add	fp, #4
27968     A7 20 02 FB | 	rdlong	local02, fp
2796c     54 4E 05 F1 | 	add	fp, #84
27970     A7 1E 02 FB | 	rdlong	local01, fp
27974     04 4E 05 F1 | 	add	fp, #4
27978     A7 18 02 FB | 	rdlong	arg04, fp
2797c     09 18 46 F0 | 	shr	arg04, #9
27980     0C 1F 02 F1 | 	add	local01, arg04
27984     1C 20 06 F1 | 	add	local02, #28
27988     10 1F 62 FC | 	wrlong	local01, local02
2798c     18 4E 85 F1 | 	sub	fp, #24
27990     A7 20 02 FB | 	rdlong	local02, fp
27994     01 20 06 F1 | 	add	local02, #1
27998     10 13 C2 FA | 	rdbyte	arg01, local02
2799c     40 4E 85 F1 | 	sub	fp, #64
279a0     A7 20 02 FB | 	rdlong	local02, fp
279a4     10 15 02 F6 | 	mov	arg02, local02
279a8     28 14 06 F1 | 	add	arg02, #40
279ac     04 4E 85 F1 | 	sub	fp, #4
279b0     1C 20 06 F1 | 	add	local02, #28
279b4     10 17 02 FB | 	rdlong	arg03, local02
279b8     01 18 06 F6 | 	mov	arg04, #1
279bc     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
279c0     00 FA 0D F2 | 	cmp	result1, #0 wz
279c4     10 4E 05 51 |  if_ne	add	fp, #16
279c8     A7 02 68 5C |  if_ne	wrlong	#1, fp
279cc     10 4E 85 51 |  if_ne	sub	fp, #16
279d0                 | LR__4072
279d0                 | LR__4073
279d0                 | LR__4074
279d0                 | LR__4075
279d0                 | LR__4076
279d0     10 4E 05 F1 | 	add	fp, #16
279d4     A7 20 0A FB | 	rdlong	local02, fp wz
279d8     10 4E 85 F1 | 	sub	fp, #16
279dc     04 4E 05 51 |  if_ne	add	fp, #4
279e0     A7 20 02 5B |  if_ne	rdlong	local02, fp
279e4     04 4E 85 51 |  if_ne	sub	fp, #4
279e8     10 01 68 5C |  if_ne	wrlong	#0, local02
279ec                 | ' 
279ec                 | ' 	return res ;
279ec     10 4E 05 F1 | 	add	fp, #16
279f0     A7 FA 01 FB | 	rdlong	result1, fp
279f4     10 4E 85 F1 | 	sub	fp, #16
279f8                 | LR__4077
279f8     A7 F0 03 F6 | 	mov	ptra, fp
279fc     B2 00 A0 FD | 	call	#popregs_
27a00                 | _fatfs_cc_f_open_ret
27a00     2D 00 64 FD | 	ret
27a04                 | 
27a04                 | _fatfs_cc_f_read
27a04     0E 4A 05 F6 | 	mov	COUNT_, #14
27a08     A8 00 A0 FD | 	call	#pushregs_
27a0c     38 F0 07 F1 | 	add	ptra, #56
27a10     04 4E 05 F1 | 	add	fp, #4
27a14     A7 12 62 FC | 	wrlong	arg01, fp
27a18     04 4E 05 F1 | 	add	fp, #4
27a1c     A7 14 62 FC | 	wrlong	arg02, fp
27a20     04 4E 05 F1 | 	add	fp, #4
27a24     A7 16 62 FC | 	wrlong	arg03, fp
27a28     04 4E 05 F1 | 	add	fp, #4
27a2c     A7 18 62 FC | 	wrlong	arg04, fp
27a30     08 4E 85 F1 | 	sub	fp, #8
27a34     A7 FA 01 FB | 	rdlong	result1, fp
27a38     2C 4E 05 F1 | 	add	fp, #44
27a3c     A7 FA 61 FC | 	wrlong	result1, fp
27a40     24 4E 85 F1 | 	sub	fp, #36
27a44     A7 FA 01 FB | 	rdlong	result1, fp
27a48     FD 00 68 FC | 	wrlong	#0, result1
27a4c     0C 4E 85 F1 | 	sub	fp, #12
27a50     A7 12 02 FB | 	rdlong	arg01, fp
27a54     14 4E 05 F1 | 	add	fp, #20
27a58     A7 14 02 F6 | 	mov	arg02, fp
27a5c     18 4E 85 F1 | 	sub	fp, #24
27a60     24 F7 BF FD | 	call	#_fatfs_cc_validate
27a64     14 4E 05 F1 | 	add	fp, #20
27a68     A7 FA 61 FC | 	wrlong	result1, fp
27a6c     00 FA 4D F2 | 	cmps	result1, #0 wz
27a70     14 4E 85 F1 | 	sub	fp, #20
27a74     20 00 90 5D |  if_ne	jmp	#LR__4080
27a78     04 4E 05 F1 | 	add	fp, #4
27a7c     A7 14 02 FB | 	rdlong	arg02, fp
27a80     11 14 06 F1 | 	add	arg02, #17
27a84     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
27a88     10 4E 05 F1 | 	add	fp, #16
27a8c     A7 14 62 FC | 	wrlong	arg02, fp
27a90     14 4E 85 F1 | 	sub	fp, #20
27a94     10 00 90 AD |  if_e	jmp	#LR__4081
27a98                 | LR__4080
27a98     14 4E 05 F1 | 	add	fp, #20
27a9c     A7 FA 01 FB | 	rdlong	result1, fp
27aa0     14 4E 85 F1 | 	sub	fp, #20
27aa4     EC 05 90 FD | 	jmp	#LR__4100
27aa8                 | LR__4081
27aa8     04 4E 05 F1 | 	add	fp, #4
27aac     A7 18 02 FB | 	rdlong	arg04, fp
27ab0     04 4E 85 F1 | 	sub	fp, #4
27ab4     10 18 06 F1 | 	add	arg04, #16
27ab8     0C 19 C2 FA | 	rdbyte	arg04, arg04
27abc     01 18 CE F7 | 	test	arg04, #1 wz
27ac0     07 FA 05 A6 |  if_e	mov	result1, #7
27ac4     CC 05 90 AD |  if_e	jmp	#LR__4100
27ac8     04 4E 05 F1 | 	add	fp, #4
27acc     A7 1E 02 FB | 	rdlong	local01, fp
27ad0     0F 21 02 F6 | 	mov	local02, local01
27ad4     0C 20 06 F1 | 	add	local02, #12
27ad8     10 23 02 FB | 	rdlong	local03, local02
27adc     14 1E 06 F1 | 	add	local01, #20
27ae0     0F 1F 02 FB | 	rdlong	local01, local01
27ae4     0F 23 82 F1 | 	sub	local03, local01
27ae8     20 4E 05 F1 | 	add	fp, #32
27aec     A7 22 62 FC | 	wrlong	local03, fp
27af0     18 4E 85 F1 | 	sub	fp, #24
27af4     A7 24 02 FB | 	rdlong	local04, fp
27af8     0C 4E 85 F1 | 	sub	fp, #12
27afc     11 25 1A F2 | 	cmp	local04, local03 wcz
27b00     24 4E 05 11 |  if_a	add	fp, #36
27b04     A7 24 02 1B |  if_a	rdlong	local04, fp
27b08     18 4E 85 11 |  if_a	sub	fp, #24
27b0c     A7 24 62 1C |  if_a	wrlong	local04, fp
27b10     0C 4E 85 11 |  if_a	sub	fp, #12
27b14                 | ' 
27b14                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
27b14                 | LR__4082
27b14     0C 4E 05 F1 | 	add	fp, #12
27b18     A7 20 02 FB | 	rdlong	local02, fp
27b1c     0C 4E 85 F1 | 	sub	fp, #12
27b20     10 25 02 F6 | 	mov	local04, local02
27b24     01 24 16 F2 | 	cmp	local04, #1 wc
27b28     64 05 90 CD |  if_b	jmp	#LR__4099
27b2c     04 4E 05 F1 | 	add	fp, #4
27b30     A7 22 02 FB | 	rdlong	local03, fp
27b34     04 4E 85 F1 | 	sub	fp, #4
27b38     14 22 06 F1 | 	add	local03, #20
27b3c     11 23 02 FB | 	rdlong	local03, local03
27b40     FF 23 CE F7 | 	test	local03, #511 wz
27b44     3C 04 90 5D |  if_ne	jmp	#LR__4097
27b48     04 4E 05 F1 | 	add	fp, #4
27b4c     A7 1E 02 FB | 	rdlong	local01, fp
27b50     14 1E 06 F1 | 	add	local01, #20
27b54     0F 23 02 FB | 	rdlong	local03, local01
27b58     09 22 46 F0 | 	shr	local03, #9
27b5c     14 4E 05 F1 | 	add	fp, #20
27b60     A7 26 02 FB | 	rdlong	local05, fp
27b64     13 29 02 F6 | 	mov	local06, local05
27b68     0A 28 06 F1 | 	add	local06, #10
27b6c     14 2B E2 FA | 	rdword	local07, local06
27b70     0A 28 86 F1 | 	sub	local06, #10
27b74     15 2D 32 F9 | 	getword	local08, local07, #0
27b78     01 2C 86 F1 | 	sub	local08, #1
27b7c     16 23 0A F5 | 	and	local03, local08 wz
27b80     18 4E 05 F1 | 	add	fp, #24
27b84     A7 22 62 FC | 	wrlong	local03, fp
27b88     30 4E 85 F1 | 	sub	fp, #48
27b8c     E0 00 90 5D |  if_ne	jmp	#LR__4087
27b90     04 4E 05 F1 | 	add	fp, #4
27b94     A7 22 02 FB | 	rdlong	local03, fp
27b98     04 4E 85 F1 | 	sub	fp, #4
27b9c     14 22 06 F1 | 	add	local03, #20
27ba0     11 23 0A FB | 	rdlong	local03, local03 wz
27ba4     20 00 90 5D |  if_ne	jmp	#LR__4083
27ba8     04 4E 05 F1 | 	add	fp, #4
27bac     A7 22 02 FB | 	rdlong	local03, fp
27bb0     08 22 06 F1 | 	add	local03, #8
27bb4     11 23 02 FB | 	rdlong	local03, local03
27bb8     18 4E 05 F1 | 	add	fp, #24
27bbc     A7 22 62 FC | 	wrlong	local03, fp
27bc0     1C 4E 85 F1 | 	sub	fp, #28
27bc4     28 00 90 FD | 	jmp	#LR__4084
27bc8                 | LR__4083
27bc8     04 4E 05 F1 | 	add	fp, #4
27bcc     A7 2C 02 FB | 	rdlong	local08, fp
27bd0     16 13 02 F6 | 	mov	arg01, local08
27bd4     04 4E 85 F1 | 	sub	fp, #4
27bd8     18 2C 06 F1 | 	add	local08, #24
27bdc     16 15 02 FB | 	rdlong	arg02, local08
27be0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
27be4     1C 4E 05 F1 | 	add	fp, #28
27be8     A7 FA 61 FC | 	wrlong	result1, fp
27bec     1C 4E 85 F1 | 	sub	fp, #28
27bf0                 | LR__4084
27bf0     1C 4E 05 F1 | 	add	fp, #28
27bf4     A7 22 02 FB | 	rdlong	local03, fp
27bf8     1C 4E 85 F1 | 	sub	fp, #28
27bfc     02 22 16 F2 | 	cmp	local03, #2 wc
27c00     1C 00 90 3D |  if_ae	jmp	#LR__4085
27c04     04 4E 05 F1 | 	add	fp, #4
27c08     A7 22 02 FB | 	rdlong	local03, fp
27c0c     04 4E 85 F1 | 	sub	fp, #4
27c10     11 22 06 F1 | 	add	local03, #17
27c14     11 05 48 FC | 	wrbyte	#2, local03
27c18     02 FA 05 F6 | 	mov	result1, #2
27c1c     74 04 90 FD | 	jmp	#LR__4100
27c20                 | LR__4085
27c20     1C 4E 05 F1 | 	add	fp, #28
27c24     A7 22 02 FB | 	rdlong	local03, fp
27c28     1C 4E 85 F1 | 	sub	fp, #28
27c2c     FF FF 7F FF 
27c30     FF 23 0E F2 | 	cmp	local03, ##-1 wz
27c34     1C 00 90 5D |  if_ne	jmp	#LR__4086
27c38     04 4E 05 F1 | 	add	fp, #4
27c3c     A7 22 02 FB | 	rdlong	local03, fp
27c40     04 4E 85 F1 | 	sub	fp, #4
27c44     11 22 06 F1 | 	add	local03, #17
27c48     11 03 48 FC | 	wrbyte	#1, local03
27c4c     01 FA 05 F6 | 	mov	result1, #1
27c50     40 04 90 FD | 	jmp	#LR__4100
27c54                 | LR__4086
27c54     04 4E 05 F1 | 	add	fp, #4
27c58     A7 22 02 FB | 	rdlong	local03, fp
27c5c     18 4E 05 F1 | 	add	fp, #24
27c60     A7 2C 02 FB | 	rdlong	local08, fp
27c64     1C 4E 85 F1 | 	sub	fp, #28
27c68     18 22 06 F1 | 	add	local03, #24
27c6c     11 2D 62 FC | 	wrlong	local08, local03
27c70                 | LR__4087
27c70     18 4E 05 F1 | 	add	fp, #24
27c74     A7 12 02 FB | 	rdlong	arg01, fp
27c78     14 4E 85 F1 | 	sub	fp, #20
27c7c     A7 22 02 FB | 	rdlong	local03, fp
27c80     04 4E 85 F1 | 	sub	fp, #4
27c84     18 22 06 F1 | 	add	local03, #24
27c88     11 15 02 FB | 	rdlong	arg02, local03
27c8c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
27c90     20 4E 05 F1 | 	add	fp, #32
27c94     A7 FA 61 FC | 	wrlong	result1, fp
27c98     20 4E 85 F1 | 	sub	fp, #32
27c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
27ca0     1C 00 90 5D |  if_ne	jmp	#LR__4088
27ca4     04 4E 05 F1 | 	add	fp, #4
27ca8     A7 22 02 FB | 	rdlong	local03, fp
27cac     04 4E 85 F1 | 	sub	fp, #4
27cb0     11 22 06 F1 | 	add	local03, #17
27cb4     11 05 48 FC | 	wrbyte	#2, local03
27cb8     02 FA 05 F6 | 	mov	result1, #2
27cbc     D4 03 90 FD | 	jmp	#LR__4100
27cc0                 | LR__4088
27cc0     20 4E 05 F1 | 	add	fp, #32
27cc4     A7 22 02 FB | 	rdlong	local03, fp
27cc8     10 4E 05 F1 | 	add	fp, #16
27ccc     A7 2C 02 FB | 	rdlong	local08, fp
27cd0     16 23 02 F1 | 	add	local03, local08
27cd4     10 4E 85 F1 | 	sub	fp, #16
27cd8     A7 22 62 FC | 	wrlong	local03, fp
27cdc     14 4E 85 F1 | 	sub	fp, #20
27ce0     A7 22 02 FB | 	rdlong	local03, fp
27ce4     09 22 46 F0 | 	shr	local03, #9
27ce8     20 4E 05 F1 | 	add	fp, #32
27cec     A7 22 62 FC | 	wrlong	local03, fp
27cf0     2C 4E 85 F1 | 	sub	fp, #44
27cf4     01 22 16 F2 | 	cmp	local03, #1 wc
27cf8     5C 01 90 CD |  if_b	jmp	#LR__4092
27cfc     30 4E 05 F1 | 	add	fp, #48
27d00     A7 22 02 FB | 	rdlong	local03, fp
27d04     04 4E 85 F1 | 	sub	fp, #4
27d08     A7 2C 02 FB | 	rdlong	local08, fp
27d0c     16 23 02 F1 | 	add	local03, local08
27d10     14 4E 85 F1 | 	sub	fp, #20
27d14     A7 2C 02 FB | 	rdlong	local08, fp
27d18     18 4E 85 F1 | 	sub	fp, #24
27d1c     0A 2C 06 F1 | 	add	local08, #10
27d20     16 2D E2 FA | 	rdword	local08, local08
27d24     16 23 1A F2 | 	cmp	local03, local08 wcz
27d28     28 00 90 ED |  if_be	jmp	#LR__4089
27d2c     18 4E 05 F1 | 	add	fp, #24
27d30     A7 1E 02 FB | 	rdlong	local01, fp
27d34     0A 1E 06 F1 | 	add	local01, #10
27d38     0F 23 E2 FA | 	rdword	local03, local01
27d3c     18 4E 05 F1 | 	add	fp, #24
27d40     A7 2C 02 FB | 	rdlong	local08, fp
27d44     16 23 82 F1 | 	sub	local03, local08
27d48     04 4E 85 F1 | 	sub	fp, #4
27d4c     A7 22 62 FC | 	wrlong	local03, fp
27d50     2C 4E 85 F1 | 	sub	fp, #44
27d54                 | LR__4089
27d54     18 4E 05 F1 | 	add	fp, #24
27d58     A7 1E 02 FB | 	rdlong	local01, fp
27d5c     01 1E 06 F1 | 	add	local01, #1
27d60     0F 13 C2 FA | 	rdbyte	arg01, local01
27d64     1C 4E 05 F1 | 	add	fp, #28
27d68     A7 14 02 FB | 	rdlong	arg02, fp
27d6c     14 4E 85 F1 | 	sub	fp, #20
27d70     A7 16 02 FB | 	rdlong	arg03, fp
27d74     0C 4E 05 F1 | 	add	fp, #12
27d78     A7 18 02 FB | 	rdlong	arg04, fp
27d7c     2C 4E 85 F1 | 	sub	fp, #44
27d80     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
27d84     00 FA 0D F2 | 	cmp	result1, #0 wz
27d88     1C 00 90 AD |  if_e	jmp	#LR__4090
27d8c     04 4E 05 F1 | 	add	fp, #4
27d90     A7 22 02 FB | 	rdlong	local03, fp
27d94     04 4E 85 F1 | 	sub	fp, #4
27d98     11 22 06 F1 | 	add	local03, #17
27d9c     11 03 48 FC | 	wrbyte	#1, local03
27da0     01 FA 05 F6 | 	mov	result1, #1
27da4     EC 02 90 FD | 	jmp	#LR__4100
27da8                 | LR__4090
27da8     04 4E 05 F1 | 	add	fp, #4
27dac     A7 1E 02 FB | 	rdlong	local01, fp
27db0     04 4E 85 F1 | 	sub	fp, #4
27db4     10 1E 06 F1 | 	add	local01, #16
27db8     0F 23 C2 FA | 	rdbyte	local03, local01
27dbc     80 22 CE F7 | 	test	local03, #128 wz
27dc0     78 00 90 AD |  if_e	jmp	#LR__4091
27dc4     04 4E 05 F1 | 	add	fp, #4
27dc8     A7 2C 02 FB | 	rdlong	local08, fp
27dcc     1C 2C 06 F1 | 	add	local08, #28
27dd0     16 2D 02 FB | 	rdlong	local08, local08
27dd4     1C 4E 05 F1 | 	add	fp, #28
27dd8     A7 2E 02 FB | 	rdlong	local09, fp
27ddc     17 2D 82 F1 | 	sub	local08, local09
27de0     0C 4E 05 F1 | 	add	fp, #12
27de4     A7 30 02 FB | 	rdlong	local10, fp
27de8     2C 4E 85 F1 | 	sub	fp, #44
27dec     18 33 02 F6 | 	mov	local11, local10
27df0     19 2D 12 F2 | 	cmp	local08, local11 wc
27df4     44 00 90 3D |  if_ae	jmp	#LR__4091
27df8     34 4E 05 F1 | 	add	fp, #52
27dfc     A7 12 02 FB | 	rdlong	arg01, fp
27e00     30 4E 85 F1 | 	sub	fp, #48
27e04     A7 14 02 FB | 	rdlong	arg02, fp
27e08     0A 33 02 F6 | 	mov	local11, arg02
27e0c     1C 32 06 F1 | 	add	local11, #28
27e10     19 2F 02 FB | 	rdlong	local09, local11
27e14     1C 4E 05 F1 | 	add	fp, #28
27e18     A7 26 02 FB | 	rdlong	local05, fp
27e1c     13 2F 82 F1 | 	sub	local09, local05
27e20     09 2E 66 F0 | 	shl	local09, #9
27e24     17 33 02 F6 | 	mov	local11, local09
27e28     17 13 02 F1 | 	add	arg01, local09
27e2c     20 4E 85 F1 | 	sub	fp, #32
27e30     28 14 06 F1 | 	add	arg02, #40
27e34     09 16 C6 F9 | 	decod	arg03, #9
27e38     C4 48 BF FD | 	call	#__system____builtin_memmove
27e3c                 | LR__4091
27e3c     2C 4E 05 F1 | 	add	fp, #44
27e40     A7 22 02 FB | 	rdlong	local03, fp
27e44     09 22 66 F0 | 	shl	local03, #9
27e48     04 4E 85 F1 | 	sub	fp, #4
27e4c     A7 22 62 FC | 	wrlong	local03, fp
27e50     28 4E 85 F1 | 	sub	fp, #40
27e54                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
27e54                 | ' 				}
27e54                 | ' 
27e54                 | ' 
27e54                 | ' 				rcnt =  ((UINT) 512 )  * cc;
27e54                 | ' 				continue;
27e54     B4 01 90 FD | 	jmp	#LR__4098
27e58                 | LR__4092
27e58     04 4E 05 F1 | 	add	fp, #4
27e5c     A7 22 02 FB | 	rdlong	local03, fp
27e60     1C 22 06 F1 | 	add	local03, #28
27e64     11 23 02 FB | 	rdlong	local03, local03
27e68     1C 4E 05 F1 | 	add	fp, #28
27e6c     A7 1E 02 FB | 	rdlong	local01, fp
27e70     20 4E 85 F1 | 	sub	fp, #32
27e74     0F 23 0A F2 | 	cmp	local03, local01 wz
27e78     EC 00 90 AD |  if_e	jmp	#LR__4096
27e7c     04 4E 05 F1 | 	add	fp, #4
27e80     A7 1E 02 FB | 	rdlong	local01, fp
27e84     04 4E 85 F1 | 	sub	fp, #4
27e88     10 1E 06 F1 | 	add	local01, #16
27e8c     0F 23 C2 FA | 	rdbyte	local03, local01
27e90     80 22 CE F7 | 	test	local03, #128 wz
27e94     7C 00 90 AD |  if_e	jmp	#LR__4094
27e98     18 4E 05 F1 | 	add	fp, #24
27e9c     A7 1E 02 FB | 	rdlong	local01, fp
27ea0     01 1E 06 F1 | 	add	local01, #1
27ea4     0F 13 C2 FA | 	rdbyte	arg01, local01
27ea8     14 4E 85 F1 | 	sub	fp, #20
27eac     A7 22 02 FB | 	rdlong	local03, fp
27eb0     11 15 02 F6 | 	mov	arg02, local03
27eb4     28 14 06 F1 | 	add	arg02, #40
27eb8     04 4E 85 F1 | 	sub	fp, #4
27ebc     1C 22 06 F1 | 	add	local03, #28
27ec0     11 17 02 FB | 	rdlong	arg03, local03
27ec4     01 18 06 F6 | 	mov	arg04, #1
27ec8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
27ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
27ed0     1C 00 90 AD |  if_e	jmp	#LR__4093
27ed4     04 4E 05 F1 | 	add	fp, #4
27ed8     A7 22 02 FB | 	rdlong	local03, fp
27edc     04 4E 85 F1 | 	sub	fp, #4
27ee0     11 22 06 F1 | 	add	local03, #17
27ee4     11 03 48 FC | 	wrbyte	#1, local03
27ee8     01 FA 05 F6 | 	mov	result1, #1
27eec     A4 01 90 FD | 	jmp	#LR__4100
27ef0                 | LR__4093
27ef0     04 4E 05 F1 | 	add	fp, #4
27ef4     A7 32 02 FB | 	rdlong	local11, fp
27ef8     19 23 02 F6 | 	mov	local03, local11
27efc     04 4E 85 F1 | 	sub	fp, #4
27f00     10 32 06 F1 | 	add	local11, #16
27f04     19 33 C2 FA | 	rdbyte	local11, local11
27f08     7F 32 06 F5 | 	and	local11, #127
27f0c     10 22 06 F1 | 	add	local03, #16
27f10     11 33 42 FC | 	wrbyte	local11, local03
27f14                 | LR__4094
27f14     18 4E 05 F1 | 	add	fp, #24
27f18     A7 1E 02 FB | 	rdlong	local01, fp
27f1c     01 1E 06 F1 | 	add	local01, #1
27f20     0F 13 C2 FA | 	rdbyte	arg01, local01
27f24     14 4E 85 F1 | 	sub	fp, #20
27f28     A7 14 02 FB | 	rdlong	arg02, fp
27f2c     28 14 06 F1 | 	add	arg02, #40
27f30     1C 4E 05 F1 | 	add	fp, #28
27f34     A7 16 02 FB | 	rdlong	arg03, fp
27f38     20 4E 85 F1 | 	sub	fp, #32
27f3c     01 18 06 F6 | 	mov	arg04, #1
27f40     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
27f44     00 FA 0D F2 | 	cmp	result1, #0 wz
27f48     1C 00 90 AD |  if_e	jmp	#LR__4095
27f4c     04 4E 05 F1 | 	add	fp, #4
27f50     A7 22 02 FB | 	rdlong	local03, fp
27f54     04 4E 85 F1 | 	sub	fp, #4
27f58     11 22 06 F1 | 	add	local03, #17
27f5c     11 03 48 FC | 	wrbyte	#1, local03
27f60     01 FA 05 F6 | 	mov	result1, #1
27f64     2C 01 90 FD | 	jmp	#LR__4100
27f68                 | LR__4095
27f68                 | LR__4096
27f68     04 4E 05 F1 | 	add	fp, #4
27f6c     A7 22 02 FB | 	rdlong	local03, fp
27f70     1C 4E 05 F1 | 	add	fp, #28
27f74     A7 32 02 FB | 	rdlong	local11, fp
27f78     20 4E 85 F1 | 	sub	fp, #32
27f7c     1C 22 06 F1 | 	add	local03, #28
27f80     11 33 62 FC | 	wrlong	local11, local03
27f84                 | LR__4097
27f84     04 4E 05 F1 | 	add	fp, #4
27f88     A7 1E 02 FB | 	rdlong	local01, fp
27f8c     14 1E 06 F1 | 	add	local01, #20
27f90     0F 33 02 FB | 	rdlong	local11, local01
27f94     FF 33 06 F5 | 	and	local11, #511
27f98     09 22 C6 F9 | 	decod	local03, #9
27f9c     19 23 82 F1 | 	sub	local03, local11
27fa0     24 4E 05 F1 | 	add	fp, #36
27fa4     A7 22 62 FC | 	wrlong	local03, fp
27fa8     1C 4E 85 F1 | 	sub	fp, #28
27fac     A7 32 02 FB | 	rdlong	local11, fp
27fb0     0C 4E 85 F1 | 	sub	fp, #12
27fb4     19 23 1A F2 | 	cmp	local03, local11 wcz
27fb8     0C 4E 05 11 |  if_a	add	fp, #12
27fbc     A7 22 02 1B |  if_a	rdlong	local03, fp
27fc0     1C 4E 05 11 |  if_a	add	fp, #28
27fc4     A7 22 62 1C |  if_a	wrlong	local03, fp
27fc8     28 4E 85 11 |  if_a	sub	fp, #40
27fcc     34 4E 05 F1 | 	add	fp, #52
27fd0     A7 12 02 FB | 	rdlong	arg01, fp
27fd4     30 4E 85 F1 | 	sub	fp, #48
27fd8     A7 28 02 FB | 	rdlong	local06, fp
27fdc     14 15 02 F6 | 	mov	arg02, local06
27fe0     28 14 06 F1 | 	add	arg02, #40
27fe4     14 28 06 F1 | 	add	local06, #20
27fe8     14 33 02 FB | 	rdlong	local11, local06
27fec     19 2F 02 F6 | 	mov	local09, local11
27ff0     17 31 02 F6 | 	mov	local10, local09
27ff4     FF 31 06 F5 | 	and	local10, #511
27ff8     18 15 02 F1 | 	add	arg02, local10
27ffc     24 4E 05 F1 | 	add	fp, #36
28000     A7 16 02 FB | 	rdlong	arg03, fp
28004     28 4E 85 F1 | 	sub	fp, #40
28008     F4 46 BF FD | 	call	#__system____builtin_memmove
2800c                 | LR__4098
2800c     0C 4E 05 F1 | 	add	fp, #12
28010     A7 22 02 FB | 	rdlong	local03, fp
28014     1C 4E 05 F1 | 	add	fp, #28
28018     A7 2C 02 FB | 	rdlong	local08, fp
2801c     16 23 82 F1 | 	sub	local03, local08
28020     1C 4E 85 F1 | 	sub	fp, #28
28024     A7 22 62 FC | 	wrlong	local03, fp
28028     04 4E 05 F1 | 	add	fp, #4
2802c     A7 1E 02 FB | 	rdlong	local01, fp
28030     0F 2B 02 FB | 	rdlong	local07, local01
28034     18 4E 05 F1 | 	add	fp, #24
28038     A7 2C 02 FB | 	rdlong	local08, fp
2803c     16 2B 02 F1 | 	add	local07, local08
28040     0F 2B 62 FC | 	wrlong	local07, local01
28044     0C 4E 05 F1 | 	add	fp, #12
28048     A7 22 02 FB | 	rdlong	local03, fp
2804c     0C 4E 85 F1 | 	sub	fp, #12
28050     A7 34 02 FB | 	rdlong	local12, fp
28054     1A 23 02 F1 | 	add	local03, local12
28058     0C 4E 05 F1 | 	add	fp, #12
2805c     A7 22 62 FC | 	wrlong	local03, fp
28060     30 4E 85 F1 | 	sub	fp, #48
28064     A7 36 02 FB | 	rdlong	local13, fp
28068     1B 23 02 F6 | 	mov	local03, local13
2806c     14 36 06 F1 | 	add	local13, #20
28070     1B 39 02 FB | 	rdlong	local14, local13
28074     24 4E 05 F1 | 	add	fp, #36
28078     A7 28 02 FB | 	rdlong	local06, fp
2807c     28 4E 85 F1 | 	sub	fp, #40
28080     14 39 02 F1 | 	add	local14, local06
28084     14 22 06 F1 | 	add	local03, #20
28088     11 39 62 FC | 	wrlong	local14, local03
2808c     84 FA 9F FD | 	jmp	#LR__4082
28090                 | LR__4099
28090                 | ' 
28090                 | ' 
28090                 | ' 
28090                 | ' 
28090                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
28090                 | ' 
28090                 | ' 	}
28090                 | ' 
28090                 | ' 	return FR_OK ;
28090     00 FA 05 F6 | 	mov	result1, #0
28094                 | LR__4100
28094     A7 F0 03 F6 | 	mov	ptra, fp
28098     B2 00 A0 FD | 	call	#popregs_
2809c                 | _fatfs_cc_f_read_ret
2809c     2D 00 64 FD | 	ret
280a0                 | 
280a0                 | _fatfs_cc_f_write
280a0     15 4A 05 F6 | 	mov	COUNT_, #21
280a4     A8 00 A0 FD | 	call	#pushregs_
280a8     34 F0 07 F1 | 	add	ptra, #52
280ac     04 4E 05 F1 | 	add	fp, #4
280b0     A7 12 62 FC | 	wrlong	arg01, fp
280b4     04 4E 05 F1 | 	add	fp, #4
280b8     A7 14 62 FC | 	wrlong	arg02, fp
280bc     04 4E 05 F1 | 	add	fp, #4
280c0     A7 16 62 FC | 	wrlong	arg03, fp
280c4     04 4E 05 F1 | 	add	fp, #4
280c8     A7 18 62 FC | 	wrlong	arg04, fp
280cc     08 4E 85 F1 | 	sub	fp, #8
280d0     A7 FA 01 FB | 	rdlong	result1, fp
280d4     28 4E 05 F1 | 	add	fp, #40
280d8     A7 FA 61 FC | 	wrlong	result1, fp
280dc     20 4E 85 F1 | 	sub	fp, #32
280e0     A7 FA 01 FB | 	rdlong	result1, fp
280e4     FD 00 68 FC | 	wrlong	#0, result1
280e8     0C 4E 85 F1 | 	sub	fp, #12
280ec     A7 12 02 FB | 	rdlong	arg01, fp
280f0     14 4E 05 F1 | 	add	fp, #20
280f4     A7 14 02 F6 | 	mov	arg02, fp
280f8     18 4E 85 F1 | 	sub	fp, #24
280fc     88 F0 BF FD | 	call	#_fatfs_cc_validate
28100     14 4E 05 F1 | 	add	fp, #20
28104     A7 FA 61 FC | 	wrlong	result1, fp
28108     00 FA 4D F2 | 	cmps	result1, #0 wz
2810c     14 4E 85 F1 | 	sub	fp, #20
28110     20 00 90 5D |  if_ne	jmp	#LR__4110
28114     04 4E 05 F1 | 	add	fp, #4
28118     A7 14 02 FB | 	rdlong	arg02, fp
2811c     11 14 06 F1 | 	add	arg02, #17
28120     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
28124     10 4E 05 F1 | 	add	fp, #16
28128     A7 14 62 FC | 	wrlong	arg02, fp
2812c     14 4E 85 F1 | 	sub	fp, #20
28130     10 00 90 AD |  if_e	jmp	#LR__4111
28134                 | LR__4110
28134     14 4E 05 F1 | 	add	fp, #20
28138     A7 FA 01 FB | 	rdlong	result1, fp
2813c     14 4E 85 F1 | 	sub	fp, #20
28140     44 07 90 FD | 	jmp	#LR__4133
28144                 | LR__4111
28144     04 4E 05 F1 | 	add	fp, #4
28148     A7 14 02 FB | 	rdlong	arg02, fp
2814c     04 4E 85 F1 | 	sub	fp, #4
28150     10 14 06 F1 | 	add	arg02, #16
28154     0A 15 C2 FA | 	rdbyte	arg02, arg02
28158     02 14 CE F7 | 	test	arg02, #2 wz
2815c     07 FA 05 A6 |  if_e	mov	result1, #7
28160     24 07 90 AD |  if_e	jmp	#LR__4133
28164     04 4E 05 F1 | 	add	fp, #4
28168     A7 14 02 FB | 	rdlong	arg02, fp
2816c     0A 13 02 F6 | 	mov	arg01, arg02
28170     14 12 06 F1 | 	add	arg01, #20
28174     09 13 02 FB | 	rdlong	arg01, arg01
28178     08 4E 05 F1 | 	add	fp, #8
2817c     A7 FA 01 FB | 	rdlong	result1, fp
28180     FD 12 02 F1 | 	add	arg01, result1
28184     0C 4E 85 F1 | 	sub	fp, #12
28188     14 14 06 F1 | 	add	arg02, #20
2818c     0A FB 01 FB | 	rdlong	result1, arg02
28190     FD 12 12 F2 | 	cmp	arg01, result1 wc
28194     24 00 90 3D |  if_ae	jmp	#LR__4112
28198     04 4E 05 F1 | 	add	fp, #4
2819c     A7 14 02 FB | 	rdlong	arg02, fp
281a0     01 FA 65 F6 | 	neg	result1, #1
281a4     14 14 06 F1 | 	add	arg02, #20
281a8     0A 15 02 FB | 	rdlong	arg02, arg02
281ac     0A FB 81 F1 | 	sub	result1, arg02
281b0     08 4E 05 F1 | 	add	fp, #8
281b4     A7 FA 61 FC | 	wrlong	result1, fp
281b8     0C 4E 85 F1 | 	sub	fp, #12
281bc                 | LR__4112
281bc                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
281bc                 | ' 	}
281bc                 | ' 
281bc                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
281bc                 | LR__4113
281bc     0C 4E 05 F1 | 	add	fp, #12
281c0     A7 FA 01 FB | 	rdlong	result1, fp
281c4     0C 4E 85 F1 | 	sub	fp, #12
281c8     01 FA 15 F2 | 	cmp	result1, #1 wc
281cc     90 06 90 CD |  if_b	jmp	#LR__4132
281d0     04 4E 05 F1 | 	add	fp, #4
281d4     A7 FA 01 FB | 	rdlong	result1, fp
281d8     04 4E 85 F1 | 	sub	fp, #4
281dc     14 FA 05 F1 | 	add	result1, #20
281e0     FD FA 01 FB | 	rdlong	result1, result1
281e4     FF FB CD F7 | 	test	result1, #511 wz
281e8     D8 04 90 5D |  if_ne	jmp	#LR__4128
281ec     04 4E 05 F1 | 	add	fp, #4
281f0     A7 FA 01 FB | 	rdlong	result1, fp
281f4     14 FA 05 F1 | 	add	result1, #20
281f8     FD FA 01 FB | 	rdlong	result1, result1
281fc     09 FA 45 F0 | 	shr	result1, #9
28200     14 4E 05 F1 | 	add	fp, #20
28204     A7 14 02 FB | 	rdlong	arg02, fp
28208     0A 14 06 F1 | 	add	arg02, #10
2820c     0A 19 E2 FA | 	rdword	arg04, arg02
28210     0C 15 32 F9 | 	getword	arg02, arg04, #0
28214     01 14 86 F1 | 	sub	arg02, #1
28218     0A FB 09 F5 | 	and	result1, arg02 wz
2821c     14 4E 05 F1 | 	add	fp, #20
28220     A7 FA 61 FC | 	wrlong	result1, fp
28224     2C 4E 85 F1 | 	sub	fp, #44
28228     44 01 90 5D |  if_ne	jmp	#LR__4119
2822c     04 4E 05 F1 | 	add	fp, #4
28230     A7 FA 01 FB | 	rdlong	result1, fp
28234     04 4E 85 F1 | 	sub	fp, #4
28238     14 FA 05 F1 | 	add	result1, #20
2823c     FD 14 0A FB | 	rdlong	arg02, result1 wz
28240     44 00 90 5D |  if_ne	jmp	#LR__4114
28244     04 4E 05 F1 | 	add	fp, #4
28248     A7 14 02 FB | 	rdlong	arg02, fp
2824c     08 14 06 F1 | 	add	arg02, #8
28250     0A 15 0A FB | 	rdlong	arg02, arg02 wz
28254     18 4E 05 F1 | 	add	fp, #24
28258     A7 14 62 FC | 	wrlong	arg02, fp
2825c     1C 4E 85 F1 | 	sub	fp, #28
28260     4C 00 90 5D |  if_ne	jmp	#LR__4115
28264     04 4E 05 F1 | 	add	fp, #4
28268     A7 12 02 FB | 	rdlong	arg01, fp
2826c     04 4E 85 F1 | 	sub	fp, #4
28270     00 14 06 F6 | 	mov	arg02, #0
28274     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
28278     1C 4E 05 F1 | 	add	fp, #28
2827c     A7 FA 61 FC | 	wrlong	result1, fp
28280     1C 4E 85 F1 | 	sub	fp, #28
28284     28 00 90 FD | 	jmp	#LR__4115
28288                 | LR__4114
28288     04 4E 05 F1 | 	add	fp, #4
2828c     A7 18 02 FB | 	rdlong	arg04, fp
28290     0C 13 02 F6 | 	mov	arg01, arg04
28294     04 4E 85 F1 | 	sub	fp, #4
28298     18 18 06 F1 | 	add	arg04, #24
2829c     0C 15 02 FB | 	rdlong	arg02, arg04
282a0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
282a4     1C 4E 05 F1 | 	add	fp, #28
282a8     A7 FA 61 FC | 	wrlong	result1, fp
282ac     1C 4E 85 F1 | 	sub	fp, #28
282b0                 | LR__4115
282b0     1C 4E 05 F1 | 	add	fp, #28
282b4     A7 FA 09 FB | 	rdlong	result1, fp wz
282b8     1C 4E 85 F1 | 	sub	fp, #28
282bc     A0 05 90 AD |  if_e	jmp	#LR__4132
282c0     1C 4E 05 F1 | 	add	fp, #28
282c4     A7 FA 01 FB | 	rdlong	result1, fp
282c8     1C 4E 85 F1 | 	sub	fp, #28
282cc     01 FA 0D F2 | 	cmp	result1, #1 wz
282d0     1C 00 90 5D |  if_ne	jmp	#LR__4116
282d4     04 4E 05 F1 | 	add	fp, #4
282d8     A7 FA 01 FB | 	rdlong	result1, fp
282dc     04 4E 85 F1 | 	sub	fp, #4
282e0     11 FA 05 F1 | 	add	result1, #17
282e4     FD 04 48 FC | 	wrbyte	#2, result1
282e8     02 FA 05 F6 | 	mov	result1, #2
282ec     98 05 90 FD | 	jmp	#LR__4133
282f0                 | LR__4116
282f0     1C 4E 05 F1 | 	add	fp, #28
282f4     A7 FA 01 FB | 	rdlong	result1, fp
282f8     1C 4E 85 F1 | 	sub	fp, #28
282fc     FF FF 7F FF 
28300     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28304     1C 00 90 5D |  if_ne	jmp	#LR__4117
28308     04 4E 05 F1 | 	add	fp, #4
2830c     A7 FA 01 FB | 	rdlong	result1, fp
28310     04 4E 85 F1 | 	sub	fp, #4
28314     11 FA 05 F1 | 	add	result1, #17
28318     FD 02 48 FC | 	wrbyte	#1, result1
2831c     01 FA 05 F6 | 	mov	result1, #1
28320     64 05 90 FD | 	jmp	#LR__4133
28324                 | LR__4117
28324     04 4E 05 F1 | 	add	fp, #4
28328     A7 FA 01 FB | 	rdlong	result1, fp
2832c     18 4E 05 F1 | 	add	fp, #24
28330     A7 18 02 FB | 	rdlong	arg04, fp
28334     18 FA 05 F1 | 	add	result1, #24
28338     FD 18 62 FC | 	wrlong	arg04, result1
2833c     18 4E 85 F1 | 	sub	fp, #24
28340     A7 FA 01 FB | 	rdlong	result1, fp
28344     04 4E 85 F1 | 	sub	fp, #4
28348     08 FA 05 F1 | 	add	result1, #8
2834c     FD FA 09 FB | 	rdlong	result1, result1 wz
28350     1C 00 90 5D |  if_ne	jmp	#LR__4118
28354     04 4E 05 F1 | 	add	fp, #4
28358     A7 18 02 FB | 	rdlong	arg04, fp
2835c     18 4E 05 F1 | 	add	fp, #24
28360     A7 FA 01 FB | 	rdlong	result1, fp
28364     1C 4E 85 F1 | 	sub	fp, #28
28368     08 18 06 F1 | 	add	arg04, #8
2836c     0C FB 61 FC | 	wrlong	result1, arg04
28370                 | LR__4118
28370                 | LR__4119
28370     04 4E 05 F1 | 	add	fp, #4
28374     A7 18 02 FB | 	rdlong	arg04, fp
28378     04 4E 85 F1 | 	sub	fp, #4
2837c     10 18 06 F1 | 	add	arg04, #16
28380     0C 19 C2 FA | 	rdbyte	arg04, arg04
28384     80 18 CE F7 | 	test	arg04, #128 wz
28388     7C 00 90 AD |  if_e	jmp	#LR__4121
2838c     18 4E 05 F1 | 	add	fp, #24
28390     A7 18 02 FB | 	rdlong	arg04, fp
28394     01 18 06 F1 | 	add	arg04, #1
28398     0C 13 C2 FA | 	rdbyte	arg01, arg04
2839c     14 4E 85 F1 | 	sub	fp, #20
283a0     A7 18 02 FB | 	rdlong	arg04, fp
283a4     0C 15 02 F6 | 	mov	arg02, arg04
283a8     28 14 06 F1 | 	add	arg02, #40
283ac     04 4E 85 F1 | 	sub	fp, #4
283b0     1C 18 06 F1 | 	add	arg04, #28
283b4     0C 17 02 FB | 	rdlong	arg03, arg04
283b8     01 18 06 F6 | 	mov	arg04, #1
283bc     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
283c0     00 FA 0D F2 | 	cmp	result1, #0 wz
283c4     1C 00 90 AD |  if_e	jmp	#LR__4120
283c8     04 4E 05 F1 | 	add	fp, #4
283cc     A7 FA 01 FB | 	rdlong	result1, fp
283d0     04 4E 85 F1 | 	sub	fp, #4
283d4     11 FA 05 F1 | 	add	result1, #17
283d8     FD 02 48 FC | 	wrbyte	#1, result1
283dc     01 FA 05 F6 | 	mov	result1, #1
283e0     A4 04 90 FD | 	jmp	#LR__4133
283e4                 | LR__4120
283e4     04 4E 05 F1 | 	add	fp, #4
283e8     A7 18 02 FB | 	rdlong	arg04, fp
283ec     0C FB 01 F6 | 	mov	result1, arg04
283f0     04 4E 85 F1 | 	sub	fp, #4
283f4     10 18 06 F1 | 	add	arg04, #16
283f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
283fc     7F 18 06 F5 | 	and	arg04, #127
28400     10 FA 05 F1 | 	add	result1, #16
28404     FD 18 42 FC | 	wrbyte	arg04, result1
28408                 | LR__4121
28408     18 4E 05 F1 | 	add	fp, #24
2840c     A7 12 02 FB | 	rdlong	arg01, fp
28410     14 4E 85 F1 | 	sub	fp, #20
28414     A7 14 02 FB | 	rdlong	arg02, fp
28418     04 4E 85 F1 | 	sub	fp, #4
2841c     18 14 06 F1 | 	add	arg02, #24
28420     0A 15 02 FB | 	rdlong	arg02, arg02
28424     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
28428     20 4E 05 F1 | 	add	fp, #32
2842c     A7 FA 61 FC | 	wrlong	result1, fp
28430     20 4E 85 F1 | 	sub	fp, #32
28434     00 FA 0D F2 | 	cmp	result1, #0 wz
28438     1C 00 90 5D |  if_ne	jmp	#LR__4122
2843c     04 4E 05 F1 | 	add	fp, #4
28440     A7 FA 01 FB | 	rdlong	result1, fp
28444     04 4E 85 F1 | 	sub	fp, #4
28448     11 FA 05 F1 | 	add	result1, #17
2844c     FD 04 48 FC | 	wrbyte	#2, result1
28450     02 FA 05 F6 | 	mov	result1, #2
28454     30 04 90 FD | 	jmp	#LR__4133
28458                 | LR__4122
28458     20 4E 05 F1 | 	add	fp, #32
2845c     A7 FA 01 FB | 	rdlong	result1, fp
28460     0C 4E 05 F1 | 	add	fp, #12
28464     A7 1E 02 FB | 	rdlong	local01, fp
28468     0F FB 01 F1 | 	add	result1, local01
2846c     0C 4E 85 F1 | 	sub	fp, #12
28470     A7 FA 61 FC | 	wrlong	result1, fp
28474     14 4E 85 F1 | 	sub	fp, #20
28478     A7 FA 01 FB | 	rdlong	result1, fp
2847c     09 FA 45 F0 | 	shr	result1, #9
28480     1C 4E 05 F1 | 	add	fp, #28
28484     A7 FA 61 FC | 	wrlong	result1, fp
28488     28 4E 85 F1 | 	sub	fp, #40
2848c     01 FA 15 F2 | 	cmp	result1, #1 wc
28490     60 01 90 CD |  if_b	jmp	#LR__4126
28494     2C 4E 05 F1 | 	add	fp, #44
28498     A7 FA 01 FB | 	rdlong	result1, fp
2849c     04 4E 85 F1 | 	sub	fp, #4
284a0     A7 18 02 FB | 	rdlong	arg04, fp
284a4     0C FB 01 F1 | 	add	result1, arg04
284a8     10 4E 85 F1 | 	sub	fp, #16
284ac     A7 18 02 FB | 	rdlong	arg04, fp
284b0     18 4E 85 F1 | 	sub	fp, #24
284b4     0A 18 06 F1 | 	add	arg04, #10
284b8     0C 19 E2 FA | 	rdword	arg04, arg04
284bc     0C FB 19 F2 | 	cmp	result1, arg04 wcz
284c0     28 00 90 ED |  if_be	jmp	#LR__4123
284c4     18 4E 05 F1 | 	add	fp, #24
284c8     A7 FA 01 FB | 	rdlong	result1, fp
284cc     0A FA 05 F1 | 	add	result1, #10
284d0     FD FA E1 FA | 	rdword	result1, result1
284d4     14 4E 05 F1 | 	add	fp, #20
284d8     A7 18 02 FB | 	rdlong	arg04, fp
284dc     0C FB 81 F1 | 	sub	result1, arg04
284e0     04 4E 85 F1 | 	sub	fp, #4
284e4     A7 FA 61 FC | 	wrlong	result1, fp
284e8     28 4E 85 F1 | 	sub	fp, #40
284ec                 | LR__4123
284ec     18 4E 05 F1 | 	add	fp, #24
284f0     A7 18 02 FB | 	rdlong	arg04, fp
284f4     01 18 06 F1 | 	add	arg04, #1
284f8     0C 13 C2 FA | 	rdbyte	arg01, arg04
284fc     18 4E 05 F1 | 	add	fp, #24
28500     A7 14 02 FB | 	rdlong	arg02, fp
28504     10 4E 85 F1 | 	sub	fp, #16
28508     A7 16 02 FB | 	rdlong	arg03, fp
2850c     08 4E 05 F1 | 	add	fp, #8
28510     A7 18 02 FB | 	rdlong	arg04, fp
28514     28 4E 85 F1 | 	sub	fp, #40
28518     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2851c     00 FA 0D F2 | 	cmp	result1, #0 wz
28520     1C 00 90 AD |  if_e	jmp	#LR__4124
28524     04 4E 05 F1 | 	add	fp, #4
28528     A7 1E 02 FB | 	rdlong	local01, fp
2852c     04 4E 85 F1 | 	sub	fp, #4
28530     11 1E 06 F1 | 	add	local01, #17
28534     0F 03 48 FC | 	wrbyte	#1, local01
28538     01 FA 05 F6 | 	mov	result1, #1
2853c     48 03 90 FD | 	jmp	#LR__4133
28540                 | LR__4124
28540     04 4E 05 F1 | 	add	fp, #4
28544     A7 FA 01 FB | 	rdlong	result1, fp
28548     1C FA 05 F1 | 	add	result1, #28
2854c     FD FA 01 FB | 	rdlong	result1, result1
28550     1C 4E 05 F1 | 	add	fp, #28
28554     A7 20 02 FB | 	rdlong	local02, fp
28558     10 FB 81 F1 | 	sub	result1, local02
2855c     08 4E 05 F1 | 	add	fp, #8
28560     A7 18 02 FB | 	rdlong	arg04, fp
28564     28 4E 85 F1 | 	sub	fp, #40
28568     0C FB 11 F2 | 	cmp	result1, arg04 wc
2856c     68 00 90 3D |  if_ae	jmp	#LR__4125
28570     04 4E 05 F1 | 	add	fp, #4
28574     A7 12 02 FB | 	rdlong	arg01, fp
28578     28 12 06 F1 | 	add	arg01, #40
2857c     2C 4E 05 F1 | 	add	fp, #44
28580     A7 14 02 FB | 	rdlong	arg02, fp
28584     2C 4E 85 F1 | 	sub	fp, #44
28588     A7 FA 01 FB | 	rdlong	result1, fp
2858c     1C FA 05 F1 | 	add	result1, #28
28590     FD 22 02 FB | 	rdlong	local03, result1
28594     1C 4E 05 F1 | 	add	fp, #28
28598     A7 18 02 FB | 	rdlong	arg04, fp
2859c     20 4E 85 F1 | 	sub	fp, #32
285a0     0C 23 82 F1 | 	sub	local03, arg04
285a4     09 22 66 F0 | 	shl	local03, #9
285a8     11 15 02 F1 | 	add	arg02, local03
285ac     09 16 C6 F9 | 	decod	arg03, #9
285b0     4C 41 BF FD | 	call	#__system____builtin_memmove
285b4     04 4E 05 F1 | 	add	fp, #4
285b8     A7 18 02 FB | 	rdlong	arg04, fp
285bc     0C FB 01 F6 | 	mov	result1, arg04
285c0     04 4E 85 F1 | 	sub	fp, #4
285c4     10 18 06 F1 | 	add	arg04, #16
285c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
285cc     7F 18 06 F5 | 	and	arg04, #127
285d0     10 FA 05 F1 | 	add	result1, #16
285d4     FD 18 42 FC | 	wrbyte	arg04, result1
285d8                 | LR__4125
285d8     28 4E 05 F1 | 	add	fp, #40
285dc     A7 FA 01 FB | 	rdlong	result1, fp
285e0     09 FA 65 F0 | 	shl	result1, #9
285e4     04 4E 85 F1 | 	sub	fp, #4
285e8     A7 FA 61 FC | 	wrlong	result1, fp
285ec     24 4E 85 F1 | 	sub	fp, #36
285f0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
285f0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
285f0                 | ' 				}
285f0                 | ' 
285f0                 | ' 
285f0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
285f0                 | ' 				continue;
285f0     74 01 90 FD | 	jmp	#LR__4129
285f4                 | LR__4126
285f4     04 4E 05 F1 | 	add	fp, #4
285f8     A7 20 02 FB | 	rdlong	local02, fp
285fc     1C 20 06 F1 | 	add	local02, #28
28600     10 FB 01 FB | 	rdlong	result1, local02
28604     1C 4E 05 F1 | 	add	fp, #28
28608     A7 20 02 FB | 	rdlong	local02, fp
2860c     20 4E 85 F1 | 	sub	fp, #32
28610     10 FB 09 F2 | 	cmp	result1, local02 wz
28614     90 00 90 AD |  if_e	jmp	#LR__4127
28618     04 4E 05 F1 | 	add	fp, #4
2861c     A7 FA 01 FB | 	rdlong	result1, fp
28620     FD 22 02 F6 | 	mov	local03, result1
28624     04 4E 85 F1 | 	sub	fp, #4
28628     14 22 06 F1 | 	add	local03, #20
2862c     11 23 02 FB | 	rdlong	local03, local03
28630     0C FA 05 F1 | 	add	result1, #12
28634     FD 24 02 FB | 	rdlong	local04, result1
28638     12 27 02 F6 | 	mov	local05, local04
2863c     13 23 12 F2 | 	cmp	local03, local05 wc
28640     64 00 90 3D |  if_ae	jmp	#LR__4127
28644     18 4E 05 F1 | 	add	fp, #24
28648     A7 18 02 FB | 	rdlong	arg04, fp
2864c     01 18 06 F1 | 	add	arg04, #1
28650     0C 13 C2 FA | 	rdbyte	arg01, arg04
28654     14 4E 85 F1 | 	sub	fp, #20
28658     A7 28 02 FB | 	rdlong	local06, fp
2865c     28 28 06 F1 | 	add	local06, #40
28660     14 2B 02 F6 | 	mov	local07, local06
28664     1C 4E 05 F1 | 	add	fp, #28
28668     A7 2C 02 FB | 	rdlong	local08, fp
2866c     20 4E 85 F1 | 	sub	fp, #32
28670     01 2E 06 F6 | 	mov	local09, #1
28674     15 15 02 F6 | 	mov	arg02, local07
28678     16 17 02 F6 | 	mov	arg03, local08
2867c     01 18 06 F6 | 	mov	arg04, #1
28680     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
28684     FD 30 0A F6 | 	mov	local10, result1 wz
28688     1C 00 90 AD |  if_e	jmp	#LR__4127
2868c     04 4E 05 F1 | 	add	fp, #4
28690     A7 30 02 FB | 	rdlong	local10, fp
28694     04 4E 85 F1 | 	sub	fp, #4
28698     11 30 06 F1 | 	add	local10, #17
2869c     18 03 48 FC | 	wrbyte	#1, local10
286a0                 | ' 				fp->fptr < fp->obj.objsize &&
286a0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
286a0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
286a0     01 FA 05 F6 | 	mov	result1, #1
286a4     E0 01 90 FD | 	jmp	#LR__4133
286a8                 | LR__4127
286a8     04 4E 05 F1 | 	add	fp, #4
286ac     A7 18 02 FB | 	rdlong	arg04, fp
286b0     1C 4E 05 F1 | 	add	fp, #28
286b4     A7 FA 01 FB | 	rdlong	result1, fp
286b8     20 4E 85 F1 | 	sub	fp, #32
286bc     1C 18 06 F1 | 	add	arg04, #28
286c0     0C FB 61 FC | 	wrlong	result1, arg04
286c4                 | LR__4128
286c4     04 4E 05 F1 | 	add	fp, #4
286c8     A7 FA 01 FB | 	rdlong	result1, fp
286cc     14 FA 05 F1 | 	add	result1, #20
286d0     FD FA 01 FB | 	rdlong	result1, result1
286d4     FF FB 05 F5 | 	and	result1, #511
286d8     09 32 C6 F9 | 	decod	local11, #9
286dc     FD 32 82 F1 | 	sub	local11, result1
286e0     20 4E 05 F1 | 	add	fp, #32
286e4     A7 32 62 FC | 	wrlong	local11, fp
286e8     18 4E 85 F1 | 	sub	fp, #24
286ec     A7 FA 01 FB | 	rdlong	result1, fp
286f0     0C 4E 85 F1 | 	sub	fp, #12
286f4     FD 32 1A F2 | 	cmp	local11, result1 wcz
286f8     0C 4E 05 11 |  if_a	add	fp, #12
286fc     A7 32 02 1B |  if_a	rdlong	local11, fp
28700     18 4E 05 11 |  if_a	add	fp, #24
28704     A7 32 62 1C |  if_a	wrlong	local11, fp
28708     24 4E 85 11 |  if_a	sub	fp, #36
2870c     04 4E 05 F1 | 	add	fp, #4
28710     A7 32 02 FB | 	rdlong	local11, fp
28714     19 13 02 F6 | 	mov	arg01, local11
28718     28 12 06 F1 | 	add	arg01, #40
2871c     14 32 06 F1 | 	add	local11, #20
28720     19 33 02 FB | 	rdlong	local11, local11
28724     FF 33 06 F5 | 	and	local11, #511
28728     19 13 02 F1 | 	add	arg01, local11
2872c     2C 4E 05 F1 | 	add	fp, #44
28730     A7 14 02 FB | 	rdlong	arg02, fp
28734     0C 4E 85 F1 | 	sub	fp, #12
28738     A7 16 02 FB | 	rdlong	arg03, fp
2873c     24 4E 85 F1 | 	sub	fp, #36
28740     BC 3F BF FD | 	call	#__system____builtin_memmove
28744     04 4E 05 F1 | 	add	fp, #4
28748     A7 FA 01 FB | 	rdlong	result1, fp
2874c     FD 32 02 F6 | 	mov	local11, result1
28750     04 4E 85 F1 | 	sub	fp, #4
28754     10 FA 05 F1 | 	add	result1, #16
28758     FD FA C1 FA | 	rdbyte	result1, result1
2875c     80 FA 45 F5 | 	or	result1, #128
28760     10 32 06 F1 | 	add	local11, #16
28764     19 FB 41 FC | 	wrbyte	result1, local11
28768                 | LR__4129
28768     0C 4E 05 F1 | 	add	fp, #12
2876c     A7 32 02 FB | 	rdlong	local11, fp
28770     18 4E 05 F1 | 	add	fp, #24
28774     A7 FA 01 FB | 	rdlong	result1, fp
28778     FD 32 82 F1 | 	sub	local11, result1
2877c     18 4E 85 F1 | 	sub	fp, #24
28780     A7 32 62 FC | 	wrlong	local11, fp
28784     04 4E 05 F1 | 	add	fp, #4
28788     A7 34 02 FB | 	rdlong	local12, fp
2878c     1A 33 02 FB | 	rdlong	local11, local12
28790     14 4E 05 F1 | 	add	fp, #20
28794     A7 36 02 FB | 	rdlong	local13, fp
28798     1B 33 02 F1 | 	add	local11, local13
2879c     1A 33 62 FC | 	wrlong	local11, local12
287a0     0C 4E 05 F1 | 	add	fp, #12
287a4     A7 32 02 FB | 	rdlong	local11, fp
287a8     0C 4E 85 F1 | 	sub	fp, #12
287ac     A7 38 02 FB | 	rdlong	local14, fp
287b0     1C 33 02 F1 | 	add	local11, local14
287b4     0C 4E 05 F1 | 	add	fp, #12
287b8     A7 32 62 FC | 	wrlong	local11, fp
287bc     2C 4E 85 F1 | 	sub	fp, #44
287c0     A7 3A 02 FB | 	rdlong	local15, fp
287c4     1D 33 02 F6 | 	mov	local11, local15
287c8     14 3A 06 F1 | 	add	local15, #20
287cc     1D 3B 02 FB | 	rdlong	local15, local15
287d0     20 4E 05 F1 | 	add	fp, #32
287d4     A7 3C 02 FB | 	rdlong	local16, fp
287d8     1E 3B 02 F1 | 	add	local15, local16
287dc     14 32 06 F1 | 	add	local11, #20
287e0     19 3B 62 FC | 	wrlong	local15, local11
287e4     20 4E 85 F1 | 	sub	fp, #32
287e8     A7 3E 02 FB | 	rdlong	local17, fp
287ec     1F 33 02 F6 | 	mov	local11, local17
287f0     1F 41 02 F6 | 	mov	local18, local17
287f4     04 4E 85 F1 | 	sub	fp, #4
287f8     14 3E 06 F1 | 	add	local17, #20
287fc     1F 43 02 FB | 	rdlong	local19, local17
28800     0C 40 06 F1 | 	add	local18, #12
28804     20 45 02 FB | 	rdlong	local20, local18
28808     22 43 1A F2 | 	cmp	local19, local20 wcz
2880c     24 00 90 ED |  if_be	jmp	#LR__4130
28810     04 4E 05 F1 | 	add	fp, #4
28814     A7 26 02 FB | 	rdlong	local05, fp
28818     04 4E 85 F1 | 	sub	fp, #4
2881c     13 23 02 F6 | 	mov	local03, local05
28820     14 22 06 F1 | 	add	local03, #20
28824     11 25 02 FB | 	rdlong	local04, local03
28828     14 22 86 F1 | 	sub	local03, #20
2882c     12 47 02 F6 | 	mov	local21, local04
28830     20 00 90 FD | 	jmp	#LR__4131
28834                 | LR__4130
28834     04 4E 05 F1 | 	add	fp, #4
28838     A7 2A 02 FB | 	rdlong	local07, fp
2883c     04 4E 85 F1 | 	sub	fp, #4
28840     15 31 02 F6 | 	mov	local10, local07
28844     0C 30 06 F1 | 	add	local10, #12
28848     18 2D 02 FB | 	rdlong	local08, local10
2884c     0C 30 86 F1 | 	sub	local10, #12
28850     16 47 02 F6 | 	mov	local21, local08
28854                 | LR__4131
28854     0C 32 06 F1 | 	add	local11, #12
28858     19 47 62 FC | 	wrlong	local21, local11
2885c     5C F9 9F FD | 	jmp	#LR__4113
28860                 | LR__4132
28860     04 4E 05 F1 | 	add	fp, #4
28864     A7 34 02 FB | 	rdlong	local12, fp
28868     1A 1F 02 F6 | 	mov	local01, local12
2886c     04 4E 85 F1 | 	sub	fp, #4
28870     10 34 06 F1 | 	add	local12, #16
28874     1A 33 C2 FA | 	rdbyte	local11, local12
28878     40 32 46 F5 | 	or	local11, #64
2887c     10 1E 06 F1 | 	add	local01, #16
28880     0F 33 42 FC | 	wrbyte	local11, local01
28884                 | ' 
28884                 | ' 
28884                 | ' 
28884                 | ' 
28884                 | ' 
28884                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
28884                 | ' 		fp->flag |=  0x80 ;
28884                 | ' 
28884                 | ' 	}
28884                 | ' 
28884                 | ' 	fp->flag |=  0x40 ;
28884                 | ' 
28884                 | ' 	return FR_OK ;
28884     00 FA 05 F6 | 	mov	result1, #0
28888                 | LR__4133
28888     A7 F0 03 F6 | 	mov	ptra, fp
2888c     B2 00 A0 FD | 	call	#popregs_
28890                 | _fatfs_cc_f_write_ret
28890     2D 00 64 FD | 	ret
28894                 | 
28894                 | _fatfs_cc_f_sync
28894     00 4A 05 F6 | 	mov	COUNT_, #0
28898     A8 00 A0 FD | 	call	#pushregs_
2889c     18 F0 07 F1 | 	add	ptra, #24
288a0     04 4E 05 F1 | 	add	fp, #4
288a4     A7 12 62 FC | 	wrlong	arg01, fp
288a8     08 4E 05 F1 | 	add	fp, #8
288ac     A7 14 02 F6 | 	mov	arg02, fp
288b0     0C 4E 85 F1 | 	sub	fp, #12
288b4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
288b8     08 4E 05 F1 | 	add	fp, #8
288bc     A7 FA 61 FC | 	wrlong	result1, fp
288c0     08 4E 85 F1 | 	sub	fp, #8
288c4     00 FA 0D F2 | 	cmp	result1, #0 wz
288c8     C0 01 90 5D |  if_ne	jmp	#LR__4143
288cc     04 4E 05 F1 | 	add	fp, #4
288d0     A7 18 02 FB | 	rdlong	arg04, fp
288d4     04 4E 85 F1 | 	sub	fp, #4
288d8     10 18 06 F1 | 	add	arg04, #16
288dc     0C 19 C2 FA | 	rdbyte	arg04, arg04
288e0     40 18 CE F7 | 	test	arg04, #64 wz
288e4     A4 01 90 AD |  if_e	jmp	#LR__4142
288e8     04 4E 05 F1 | 	add	fp, #4
288ec     A7 18 02 FB | 	rdlong	arg04, fp
288f0     04 4E 85 F1 | 	sub	fp, #4
288f4     10 18 06 F1 | 	add	arg04, #16
288f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
288fc     80 18 CE F7 | 	test	arg04, #128 wz
28900     64 00 90 AD |  if_e	jmp	#LR__4140
28904     0C 4E 05 F1 | 	add	fp, #12
28908     A7 18 02 FB | 	rdlong	arg04, fp
2890c     01 18 06 F1 | 	add	arg04, #1
28910     0C 13 C2 FA | 	rdbyte	arg01, arg04
28914     08 4E 85 F1 | 	sub	fp, #8
28918     A7 18 02 FB | 	rdlong	arg04, fp
2891c     0C 15 02 F6 | 	mov	arg02, arg04
28920     28 14 06 F1 | 	add	arg02, #40
28924     04 4E 85 F1 | 	sub	fp, #4
28928     1C 18 06 F1 | 	add	arg04, #28
2892c     0C 17 02 FB | 	rdlong	arg03, arg04
28930     01 18 06 F6 | 	mov	arg04, #1
28934     0C AE BF FD | 	call	#_fatfs_cc_disk_write
28938     00 FA 0D F2 | 	cmp	result1, #0 wz
2893c     01 FA 05 56 |  if_ne	mov	result1, #1
28940     54 01 90 5D |  if_ne	jmp	#LR__4144
28944     04 4E 05 F1 | 	add	fp, #4
28948     A7 18 02 FB | 	rdlong	arg04, fp
2894c     0C 17 02 F6 | 	mov	arg03, arg04
28950     04 4E 85 F1 | 	sub	fp, #4
28954     10 18 06 F1 | 	add	arg04, #16
28958     0C 19 C2 FA | 	rdbyte	arg04, arg04
2895c     7F 18 06 F5 | 	and	arg04, #127
28960     10 16 06 F1 | 	add	arg03, #16
28964     0B 19 42 FC | 	wrbyte	arg04, arg03
28968                 | LR__4140
28968     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2896c     10 4E 05 F1 | 	add	fp, #16
28970     A7 FA 61 FC | 	wrlong	result1, fp
28974     04 4E 85 F1 | 	sub	fp, #4
28978     A7 12 02 FB | 	rdlong	arg01, fp
2897c     08 4E 85 F1 | 	sub	fp, #8
28980     A7 18 02 FB | 	rdlong	arg04, fp
28984     04 4E 85 F1 | 	sub	fp, #4
28988     20 18 06 F1 | 	add	arg04, #32
2898c     0C 15 02 FB | 	rdlong	arg02, arg04
28990     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
28994     08 4E 05 F1 | 	add	fp, #8
28998     A7 FA 61 FC | 	wrlong	result1, fp
2899c     08 4E 85 F1 | 	sub	fp, #8
289a0     00 FA 0D F2 | 	cmp	result1, #0 wz
289a4     E4 00 90 5D |  if_ne	jmp	#LR__4141
289a8     04 4E 05 F1 | 	add	fp, #4
289ac     A7 18 02 FB | 	rdlong	arg04, fp
289b0     24 18 06 F1 | 	add	arg04, #36
289b4     0C 19 02 FB | 	rdlong	arg04, arg04
289b8     10 4E 05 F1 | 	add	fp, #16
289bc     A7 18 62 FC | 	wrlong	arg04, fp
289c0     0C 17 02 F6 | 	mov	arg03, arg04
289c4     0B 16 06 F1 | 	add	arg03, #11
289c8     0B 17 C2 FA | 	rdbyte	arg03, arg03
289cc     20 16 46 F5 | 	or	arg03, #32
289d0     0B 18 06 F1 | 	add	arg04, #11
289d4     0C 17 42 FC | 	wrbyte	arg03, arg04
289d8     10 4E 85 F1 | 	sub	fp, #16
289dc     A7 18 02 FB | 	rdlong	arg04, fp
289e0     0C 13 02 FB | 	rdlong	arg01, arg04
289e4     10 4E 05 F1 | 	add	fp, #16
289e8     A7 14 02 FB | 	rdlong	arg02, fp
289ec     14 4E 85 F1 | 	sub	fp, #20
289f0     08 18 06 F1 | 	add	arg04, #8
289f4     0C 17 02 FB | 	rdlong	arg03, arg04
289f8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
289fc     14 4E 05 F1 | 	add	fp, #20
28a00     A7 12 02 FB | 	rdlong	arg01, fp
28a04     1C 12 06 F1 | 	add	arg01, #28
28a08     10 4E 85 F1 | 	sub	fp, #16
28a0c     A7 18 02 FB | 	rdlong	arg04, fp
28a10     0C 18 06 F1 | 	add	arg04, #12
28a14     0C 15 02 FB | 	rdlong	arg02, arg04
28a18     09 15 62 FC | 	wrlong	arg02, arg01
28a1c     10 4E 05 F1 | 	add	fp, #16
28a20     A7 12 02 FB | 	rdlong	arg01, fp
28a24     16 12 06 F1 | 	add	arg01, #22
28a28     04 4E 85 F1 | 	sub	fp, #4
28a2c     A7 14 02 FB | 	rdlong	arg02, fp
28a30     09 15 62 FC | 	wrlong	arg02, arg01
28a34     04 4E 05 F1 | 	add	fp, #4
28a38     A7 12 02 FB | 	rdlong	arg01, fp
28a3c     12 12 06 F1 | 	add	arg01, #18
28a40     09 01 58 FC | 	wrword	#0, arg01
28a44     08 4E 85 F1 | 	sub	fp, #8
28a48     A7 18 02 FB | 	rdlong	arg04, fp
28a4c     03 18 06 F1 | 	add	arg04, #3
28a50     0C 03 48 FC | 	wrbyte	#1, arg04
28a54     A7 12 02 FB | 	rdlong	arg01, fp
28a58     0C 4E 85 F1 | 	sub	fp, #12
28a5c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
28a60     08 4E 05 F1 | 	add	fp, #8
28a64     A7 FA 61 FC | 	wrlong	result1, fp
28a68     04 4E 85 F1 | 	sub	fp, #4
28a6c     A7 18 02 FB | 	rdlong	arg04, fp
28a70     0C 17 02 F6 | 	mov	arg03, arg04
28a74     04 4E 85 F1 | 	sub	fp, #4
28a78     10 18 06 F1 | 	add	arg04, #16
28a7c     0C 19 C2 FA | 	rdbyte	arg04, arg04
28a80     BF 18 06 F5 | 	and	arg04, #191
28a84     10 16 06 F1 | 	add	arg03, #16
28a88     0B 19 42 FC | 	wrbyte	arg04, arg03
28a8c                 | LR__4141
28a8c                 | LR__4142
28a8c                 | LR__4143
28a8c                 | ' 					dir = fp->dir_ptr;
28a8c                 | ' 					dir[ 11 ] |=  0x20 ;
28a8c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
28a8c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
28a8c                 | ' 					st_dword(dir +  22 , tm);
28a8c                 | ' 					st_word(dir +  18 , 0);
28a8c                 | ' 					fs->wflag = 1;
28a8c                 | ' 					res = sync_fs(fs);
28a8c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
28a8c                 | ' 				}
28a8c                 | ' 			}
28a8c                 | ' 		}
28a8c                 | ' 	}
28a8c                 | ' 
28a8c                 | ' 	return res ;
28a8c     08 4E 05 F1 | 	add	fp, #8
28a90     A7 FA 01 FB | 	rdlong	result1, fp
28a94     08 4E 85 F1 | 	sub	fp, #8
28a98                 | LR__4144
28a98     A7 F0 03 F6 | 	mov	ptra, fp
28a9c     B2 00 A0 FD | 	call	#popregs_
28aa0                 | _fatfs_cc_f_sync_ret
28aa0     2D 00 64 FD | 	ret
28aa4                 | 
28aa4                 | _fatfs_cc_f_close
28aa4     01 4A 05 F6 | 	mov	COUNT_, #1
28aa8     A8 00 A0 FD | 	call	#pushregs_
28aac     10 F0 07 F1 | 	add	ptra, #16
28ab0     04 4E 05 F1 | 	add	fp, #4
28ab4     A7 12 62 FC | 	wrlong	arg01, fp
28ab8     04 4E 85 F1 | 	sub	fp, #4
28abc     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
28ac0     08 4E 05 F1 | 	add	fp, #8
28ac4     A7 FA 61 FC | 	wrlong	result1, fp
28ac8     08 4E 85 F1 | 	sub	fp, #8
28acc     00 FA 0D F2 | 	cmp	result1, #0 wz
28ad0     38 00 90 5D |  if_ne	jmp	#LR__4150
28ad4     04 4E 05 F1 | 	add	fp, #4
28ad8     A7 12 02 FB | 	rdlong	arg01, fp
28adc     08 4E 05 F1 | 	add	fp, #8
28ae0     A7 14 02 F6 | 	mov	arg02, fp
28ae4     0C 4E 85 F1 | 	sub	fp, #12
28ae8     9C E6 BF FD | 	call	#_fatfs_cc_validate
28aec     08 4E 05 F1 | 	add	fp, #8
28af0     A7 FA 61 FC | 	wrlong	result1, fp
28af4     08 4E 85 F1 | 	sub	fp, #8
28af8     00 FA 0D F2 | 	cmp	result1, #0 wz
28afc     04 4E 05 A1 |  if_e	add	fp, #4
28b00     A7 1E 02 AB |  if_e	rdlong	local01, fp
28b04     04 4E 85 A1 |  if_e	sub	fp, #4
28b08     0F 01 68 AC |  if_e	wrlong	#0, local01
28b0c                 | LR__4150
28b0c                 | ' 
28b0c                 | ' 
28b0c                 | ' 
28b0c                 | ' 
28b0c                 | ' 			fp->obj.fs = 0;
28b0c                 | ' #line 4192 "ff.c"
28b0c                 | ' 		}
28b0c                 | ' 	}
28b0c                 | ' 	return res;
28b0c     08 4E 05 F1 | 	add	fp, #8
28b10     A7 FA 01 FB | 	rdlong	result1, fp
28b14     08 4E 85 F1 | 	sub	fp, #8
28b18     A7 F0 03 F6 | 	mov	ptra, fp
28b1c     B2 00 A0 FD | 	call	#popregs_
28b20                 | _fatfs_cc_f_close_ret
28b20     2D 00 64 FD | 	ret
28b24                 | 
28b24                 | _fatfs_cc_f_lseek
28b24     00 4A 05 F6 | 	mov	COUNT_, #0
28b28     A8 00 A0 FD | 	call	#pushregs_
28b2c     24 F0 07 F1 | 	add	ptra, #36
28b30     04 4E 05 F1 | 	add	fp, #4
28b34     A7 12 62 FC | 	wrlong	arg01, fp
28b38     04 4E 05 F1 | 	add	fp, #4
28b3c     A7 14 62 FC | 	wrlong	arg02, fp
28b40     04 4E 85 F1 | 	sub	fp, #4
28b44     A7 12 02 FB | 	rdlong	arg01, fp
28b48     0C 4E 05 F1 | 	add	fp, #12
28b4c     A7 14 02 F6 | 	mov	arg02, fp
28b50     10 4E 85 F1 | 	sub	fp, #16
28b54     30 E6 BF FD | 	call	#_fatfs_cc_validate
28b58     0C 4E 05 F1 | 	add	fp, #12
28b5c     A7 FA 61 FC | 	wrlong	result1, fp
28b60     0C 4E 85 F1 | 	sub	fp, #12
28b64     00 FA 0D F2 | 	cmp	result1, #0 wz
28b68     1C 00 90 5D |  if_ne	jmp	#LR__4160
28b6c     04 4E 05 F1 | 	add	fp, #4
28b70     A7 18 02 FB | 	rdlong	arg04, fp
28b74     11 18 06 F1 | 	add	arg04, #17
28b78     0C 19 C2 FA | 	rdbyte	arg04, arg04
28b7c     08 4E 05 F1 | 	add	fp, #8
28b80     A7 18 62 FC | 	wrlong	arg04, fp
28b84     0C 4E 85 F1 | 	sub	fp, #12
28b88                 | LR__4160
28b88     0C 4E 05 F1 | 	add	fp, #12
28b8c     A7 18 0A FB | 	rdlong	arg04, fp wz
28b90     0C 4E 85 F1 | 	sub	fp, #12
28b94     0C 4E 05 51 |  if_ne	add	fp, #12
28b98     A7 FA 01 5B |  if_ne	rdlong	result1, fp
28b9c     0C 4E 85 51 |  if_ne	sub	fp, #12
28ba0     40 06 90 5D |  if_ne	jmp	#LR__4183
28ba4     04 4E 05 F1 | 	add	fp, #4
28ba8     A7 18 02 FB | 	rdlong	arg04, fp
28bac     04 4E 05 F1 | 	add	fp, #4
28bb0     A7 16 02 FB | 	rdlong	arg03, fp
28bb4     08 4E 85 F1 | 	sub	fp, #8
28bb8     0C 18 06 F1 | 	add	arg04, #12
28bbc     0C 19 02 FB | 	rdlong	arg04, arg04
28bc0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
28bc4     3C 00 90 ED |  if_be	jmp	#LR__4161
28bc8     04 4E 05 F1 | 	add	fp, #4
28bcc     A7 16 02 FB | 	rdlong	arg03, fp
28bd0     04 4E 85 F1 | 	sub	fp, #4
28bd4     10 16 06 F1 | 	add	arg03, #16
28bd8     0B 17 C2 FA | 	rdbyte	arg03, arg03
28bdc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
28be0     02 16 CE F7 | 	test	arg03, #2 wz
28be4     1C 00 90 5D |  if_ne	jmp	#LR__4161
28be8     04 4E 05 F1 | 	add	fp, #4
28bec     A7 16 02 FB | 	rdlong	arg03, fp
28bf0     0C 16 06 F1 | 	add	arg03, #12
28bf4     0B 17 02 FB | 	rdlong	arg03, arg03
28bf8     04 4E 05 F1 | 	add	fp, #4
28bfc     A7 16 62 FC | 	wrlong	arg03, fp
28c00     08 4E 85 F1 | 	sub	fp, #8
28c04                 | LR__4161
28c04     04 4E 05 F1 | 	add	fp, #4
28c08     A7 16 02 FB | 	rdlong	arg03, fp
28c0c     14 16 06 F1 | 	add	arg03, #20
28c10     0B 17 02 FB | 	rdlong	arg03, arg03
28c14     1C 4E 05 F1 | 	add	fp, #28
28c18     A7 16 62 FC | 	wrlong	arg03, fp
28c1c     1C 4E 85 F1 | 	sub	fp, #28
28c20     A7 16 02 FB | 	rdlong	arg03, fp
28c24     18 4E 05 F1 | 	add	fp, #24
28c28     A7 00 68 FC | 	wrlong	#0, fp
28c2c     14 16 06 F1 | 	add	arg03, #20
28c30     0B 01 68 FC | 	wrlong	#0, arg03
28c34     14 4E 85 F1 | 	sub	fp, #20
28c38     A7 16 02 FB | 	rdlong	arg03, fp
28c3c     08 4E 85 F1 | 	sub	fp, #8
28c40     01 16 16 F2 | 	cmp	arg03, #1 wc
28c44     E4 03 90 CD |  if_b	jmp	#LR__4177
28c48     10 4E 05 F1 | 	add	fp, #16
28c4c     A7 16 02 FB | 	rdlong	arg03, fp
28c50     0A 16 06 F1 | 	add	arg03, #10
28c54     0B 19 E2 FA | 	rdword	arg04, arg03
28c58     09 18 66 F0 | 	shl	arg04, #9
28c5c     08 4E 05 F1 | 	add	fp, #8
28c60     A7 18 62 FC | 	wrlong	arg04, fp
28c64     08 4E 05 F1 | 	add	fp, #8
28c68     A7 18 02 FB | 	rdlong	arg04, fp
28c6c     20 4E 85 F1 | 	sub	fp, #32
28c70     01 18 16 F2 | 	cmp	arg04, #1 wc
28c74     AC 00 90 CD |  if_b	jmp	#LR__4162
28c78     08 4E 05 F1 | 	add	fp, #8
28c7c     A7 18 02 FB | 	rdlong	arg04, fp
28c80     01 18 86 F1 | 	sub	arg04, #1
28c84     10 4E 05 F1 | 	add	fp, #16
28c88     A7 16 02 FB | 	rdlong	arg03, fp
28c8c     0B 19 12 FD | 	qdiv	arg04, arg03
28c90     08 4E 05 F1 | 	add	fp, #8
28c94     A7 FA 01 FB | 	rdlong	result1, fp
28c98     01 FA 85 F1 | 	sub	result1, #1
28c9c     18 18 62 FD | 	getqx	arg04
28ca0     0B FB 11 FD | 	qdiv	result1, arg03
28ca4     20 4E 85 F1 | 	sub	fp, #32
28ca8     18 16 62 FD | 	getqx	arg03
28cac     0B 19 12 F2 | 	cmp	arg04, arg03 wc
28cb0     70 00 90 CD |  if_b	jmp	#LR__4162
28cb4     04 4E 05 F1 | 	add	fp, #4
28cb8     A7 16 02 FB | 	rdlong	arg03, fp
28cbc     1C 4E 05 F1 | 	add	fp, #28
28cc0     A7 FA 01 FB | 	rdlong	result1, fp
28cc4     01 FA 85 F1 | 	sub	result1, #1
28cc8     08 4E 85 F1 | 	sub	fp, #8
28ccc     A7 18 02 FB | 	rdlong	arg04, fp
28cd0     01 18 86 F1 | 	sub	arg04, #1
28cd4     0C FB 21 F5 | 	andn	result1, arg04
28cd8     14 16 06 F1 | 	add	arg03, #20
28cdc     0B FB 61 FC | 	wrlong	result1, arg03
28ce0     10 4E 85 F1 | 	sub	fp, #16
28ce4     A7 16 02 FB | 	rdlong	arg03, fp
28ce8     04 4E 85 F1 | 	sub	fp, #4
28cec     A7 18 02 FB | 	rdlong	arg04, fp
28cf0     14 18 06 F1 | 	add	arg04, #20
28cf4     0C 19 02 FB | 	rdlong	arg04, arg04
28cf8     0C 17 82 F1 | 	sub	arg03, arg04
28cfc     04 4E 05 F1 | 	add	fp, #4
28d00     A7 16 62 FC | 	wrlong	arg03, fp
28d04     04 4E 85 F1 | 	sub	fp, #4
28d08     A7 16 02 FB | 	rdlong	arg03, fp
28d0c     18 16 06 F1 | 	add	arg03, #24
28d10     0B 17 02 FB | 	rdlong	arg03, arg03
28d14     10 4E 05 F1 | 	add	fp, #16
28d18     A7 16 62 FC | 	wrlong	arg03, fp
28d1c     14 4E 85 F1 | 	sub	fp, #20
28d20     D0 00 90 FD | 	jmp	#LR__4166
28d24                 | LR__4162
28d24     04 4E 05 F1 | 	add	fp, #4
28d28     A7 16 02 FB | 	rdlong	arg03, fp
28d2c     08 16 06 F1 | 	add	arg03, #8
28d30     0B 17 0A FB | 	rdlong	arg03, arg03 wz
28d34     10 4E 05 F1 | 	add	fp, #16
28d38     A7 16 62 FC | 	wrlong	arg03, fp
28d3c     14 4E 85 F1 | 	sub	fp, #20
28d40     94 00 90 5D |  if_ne	jmp	#LR__4165
28d44     04 4E 05 F1 | 	add	fp, #4
28d48     A7 12 02 FB | 	rdlong	arg01, fp
28d4c     04 4E 85 F1 | 	sub	fp, #4
28d50     00 14 06 F6 | 	mov	arg02, #0
28d54     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
28d58     14 4E 05 F1 | 	add	fp, #20
28d5c     A7 FA 61 FC | 	wrlong	result1, fp
28d60     14 4E 85 F1 | 	sub	fp, #20
28d64     01 FA 0D F2 | 	cmp	result1, #1 wz
28d68     1C 00 90 5D |  if_ne	jmp	#LR__4163
28d6c     04 4E 05 F1 | 	add	fp, #4
28d70     A7 16 02 FB | 	rdlong	arg03, fp
28d74     04 4E 85 F1 | 	sub	fp, #4
28d78     11 16 06 F1 | 	add	arg03, #17
28d7c     0B 05 48 FC | 	wrbyte	#2, arg03
28d80     02 FA 05 F6 | 	mov	result1, #2
28d84     5C 04 90 FD | 	jmp	#LR__4183
28d88                 | LR__4163
28d88     14 4E 05 F1 | 	add	fp, #20
28d8c     A7 FA 01 FB | 	rdlong	result1, fp
28d90     14 4E 85 F1 | 	sub	fp, #20
28d94     FF FF 7F FF 
28d98     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28d9c     1C 00 90 5D |  if_ne	jmp	#LR__4164
28da0     04 4E 05 F1 | 	add	fp, #4
28da4     A7 16 02 FB | 	rdlong	arg03, fp
28da8     04 4E 85 F1 | 	sub	fp, #4
28dac     11 16 06 F1 | 	add	arg03, #17
28db0     0B 03 48 FC | 	wrbyte	#1, arg03
28db4     01 FA 05 F6 | 	mov	result1, #1
28db8     28 04 90 FD | 	jmp	#LR__4183
28dbc                 | LR__4164
28dbc     04 4E 05 F1 | 	add	fp, #4
28dc0     A7 16 02 FB | 	rdlong	arg03, fp
28dc4     10 4E 05 F1 | 	add	fp, #16
28dc8     A7 18 02 FB | 	rdlong	arg04, fp
28dcc     14 4E 85 F1 | 	sub	fp, #20
28dd0     08 16 06 F1 | 	add	arg03, #8
28dd4     0B 19 62 FC | 	wrlong	arg04, arg03
28dd8                 | LR__4165
28dd8     04 4E 05 F1 | 	add	fp, #4
28ddc     A7 16 02 FB | 	rdlong	arg03, fp
28de0     10 4E 05 F1 | 	add	fp, #16
28de4     A7 18 02 FB | 	rdlong	arg04, fp
28de8     14 4E 85 F1 | 	sub	fp, #20
28dec     18 16 06 F1 | 	add	arg03, #24
28df0     0B 19 62 FC | 	wrlong	arg04, arg03
28df4                 | LR__4166
28df4     14 4E 05 F1 | 	add	fp, #20
28df8     A7 16 0A FB | 	rdlong	arg03, fp wz
28dfc     14 4E 85 F1 | 	sub	fp, #20
28e00     28 02 90 AD |  if_e	jmp	#LR__4176
28e04                 | ' 				while (ofs > bcs) {
28e04                 | LR__4167
28e04     08 4E 05 F1 | 	add	fp, #8
28e08     A7 18 02 FB | 	rdlong	arg04, fp
28e0c     10 4E 05 F1 | 	add	fp, #16
28e10     A7 16 02 FB | 	rdlong	arg03, fp
28e14     18 4E 85 F1 | 	sub	fp, #24
28e18     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
28e1c     68 01 90 ED |  if_be	jmp	#LR__4173
28e20     08 4E 05 F1 | 	add	fp, #8
28e24     A7 18 02 FB | 	rdlong	arg04, fp
28e28     10 4E 05 F1 | 	add	fp, #16
28e2c     A7 16 02 FB | 	rdlong	arg03, fp
28e30     0B 19 82 F1 | 	sub	arg04, arg03
28e34     10 4E 85 F1 | 	sub	fp, #16
28e38     A7 18 62 FC | 	wrlong	arg04, fp
28e3c     04 4E 85 F1 | 	sub	fp, #4
28e40     A7 18 02 FB | 	rdlong	arg04, fp
28e44     0C FB 01 F6 | 	mov	result1, arg04
28e48     14 18 06 F1 | 	add	arg04, #20
28e4c     0C 19 02 FB | 	rdlong	arg04, arg04
28e50     14 4E 05 F1 | 	add	fp, #20
28e54     A7 16 02 FB | 	rdlong	arg03, fp
28e58     0B 19 02 F1 | 	add	arg04, arg03
28e5c     14 FA 05 F1 | 	add	result1, #20
28e60     FD 18 62 FC | 	wrlong	arg04, result1
28e64     14 4E 85 F1 | 	sub	fp, #20
28e68     A7 16 02 FB | 	rdlong	arg03, fp
28e6c     04 4E 85 F1 | 	sub	fp, #4
28e70     10 16 06 F1 | 	add	arg03, #16
28e74     0B 17 C2 FA | 	rdbyte	arg03, arg03
28e78     02 16 CE F7 | 	test	arg03, #2 wz
28e7c     3C 00 90 AD |  if_e	jmp	#LR__4168
28e80     04 4E 05 F1 | 	add	fp, #4
28e84     A7 12 02 FB | 	rdlong	arg01, fp
28e88     10 4E 05 F1 | 	add	fp, #16
28e8c     A7 14 02 FB | 	rdlong	arg02, fp
28e90     14 4E 85 F1 | 	sub	fp, #20
28e94     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
28e98     14 4E 05 F1 | 	add	fp, #20
28e9c     A7 FA 61 FC | 	wrlong	result1, fp
28ea0     00 FA 4D F2 | 	cmps	result1, #0 wz
28ea4     14 4E 85 F1 | 	sub	fp, #20
28ea8     08 4E 05 A1 |  if_e	add	fp, #8
28eac     A7 00 68 AC |  if_e	wrlong	#0, fp
28eb0     08 4E 85 A1 |  if_e	sub	fp, #8
28eb4                 | ' 							ofs = 0; break;
28eb4     D0 00 90 AD |  if_e	jmp	#LR__4173
28eb8     24 00 90 FD | 	jmp	#LR__4169
28ebc                 | LR__4168
28ebc     04 4E 05 F1 | 	add	fp, #4
28ec0     A7 12 02 FB | 	rdlong	arg01, fp
28ec4     10 4E 05 F1 | 	add	fp, #16
28ec8     A7 14 02 FB | 	rdlong	arg02, fp
28ecc     14 4E 85 F1 | 	sub	fp, #20
28ed0     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
28ed4     14 4E 05 F1 | 	add	fp, #20
28ed8     A7 FA 61 FC | 	wrlong	result1, fp
28edc     14 4E 85 F1 | 	sub	fp, #20
28ee0                 | LR__4169
28ee0     14 4E 05 F1 | 	add	fp, #20
28ee4     A7 16 02 FB | 	rdlong	arg03, fp
28ee8     14 4E 85 F1 | 	sub	fp, #20
28eec     FF FF 7F FF 
28ef0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
28ef4     1C 00 90 5D |  if_ne	jmp	#LR__4170
28ef8     04 4E 05 F1 | 	add	fp, #4
28efc     A7 16 02 FB | 	rdlong	arg03, fp
28f00     04 4E 85 F1 | 	sub	fp, #4
28f04     11 16 06 F1 | 	add	arg03, #17
28f08     0B 03 48 FC | 	wrbyte	#1, arg03
28f0c     01 FA 05 F6 | 	mov	result1, #1
28f10     D0 02 90 FD | 	jmp	#LR__4183
28f14                 | LR__4170
28f14     14 4E 05 F1 | 	add	fp, #20
28f18     A7 16 02 FB | 	rdlong	arg03, fp
28f1c     14 4E 85 F1 | 	sub	fp, #20
28f20     02 16 16 F2 | 	cmp	arg03, #2 wc
28f24     24 00 90 CD |  if_b	jmp	#LR__4171
28f28     10 4E 05 F1 | 	add	fp, #16
28f2c     A7 18 02 FB | 	rdlong	arg04, fp
28f30     04 4E 05 F1 | 	add	fp, #4
28f34     A7 16 02 FB | 	rdlong	arg03, fp
28f38     14 4E 85 F1 | 	sub	fp, #20
28f3c     18 18 06 F1 | 	add	arg04, #24
28f40     0C 19 02 FB | 	rdlong	arg04, arg04
28f44     0C 17 12 F2 | 	cmp	arg03, arg04 wc
28f48     1C 00 90 CD |  if_b	jmp	#LR__4172
28f4c                 | LR__4171
28f4c     04 4E 05 F1 | 	add	fp, #4
28f50     A7 16 02 FB | 	rdlong	arg03, fp
28f54     04 4E 85 F1 | 	sub	fp, #4
28f58     11 16 06 F1 | 	add	arg03, #17
28f5c     0B 05 48 FC | 	wrbyte	#2, arg03
28f60     02 FA 05 F6 | 	mov	result1, #2
28f64     7C 02 90 FD | 	jmp	#LR__4183
28f68                 | LR__4172
28f68     04 4E 05 F1 | 	add	fp, #4
28f6c     A7 18 02 FB | 	rdlong	arg04, fp
28f70     10 4E 05 F1 | 	add	fp, #16
28f74     A7 16 02 FB | 	rdlong	arg03, fp
28f78     14 4E 85 F1 | 	sub	fp, #20
28f7c     18 18 06 F1 | 	add	arg04, #24
28f80     0C 17 62 FC | 	wrlong	arg03, arg04
28f84     7C FE 9F FD | 	jmp	#LR__4167
28f88                 | LR__4173
28f88     04 4E 05 F1 | 	add	fp, #4
28f8c     A7 16 02 FB | 	rdlong	arg03, fp
28f90     0B 13 02 F6 | 	mov	arg01, arg03
28f94     14 16 06 F1 | 	add	arg03, #20
28f98     0B 15 02 FB | 	rdlong	arg02, arg03
28f9c     04 4E 05 F1 | 	add	fp, #4
28fa0     A7 16 02 FB | 	rdlong	arg03, fp
28fa4     0B 15 02 F1 | 	add	arg02, arg03
28fa8     14 12 06 F1 | 	add	arg01, #20
28fac     09 15 62 FC | 	wrlong	arg02, arg01
28fb0     A7 16 02 FB | 	rdlong	arg03, fp
28fb4     08 4E 85 F1 | 	sub	fp, #8
28fb8     FF 17 CE F7 | 	test	arg03, #511 wz
28fbc     6C 00 90 AD |  if_e	jmp	#LR__4175
28fc0     10 4E 05 F1 | 	add	fp, #16
28fc4     A7 12 02 FB | 	rdlong	arg01, fp
28fc8     04 4E 05 F1 | 	add	fp, #4
28fcc     A7 14 02 FB | 	rdlong	arg02, fp
28fd0     14 4E 85 F1 | 	sub	fp, #20
28fd4     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
28fd8     1C 4E 05 F1 | 	add	fp, #28
28fdc     A7 FA 61 FC | 	wrlong	result1, fp
28fe0     1C 4E 85 F1 | 	sub	fp, #28
28fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
28fe8     1C 00 90 5D |  if_ne	jmp	#LR__4174
28fec     04 4E 05 F1 | 	add	fp, #4
28ff0     A7 16 02 FB | 	rdlong	arg03, fp
28ff4     04 4E 85 F1 | 	sub	fp, #4
28ff8     11 16 06 F1 | 	add	arg03, #17
28ffc     0B 05 48 FC | 	wrbyte	#2, arg03
29000     02 FA 05 F6 | 	mov	result1, #2
29004     DC 01 90 FD | 	jmp	#LR__4183
29008                 | LR__4174
29008     1C 4E 05 F1 | 	add	fp, #28
2900c     A7 18 02 FB | 	rdlong	arg04, fp
29010     14 4E 85 F1 | 	sub	fp, #20
29014     A7 16 02 FB | 	rdlong	arg03, fp
29018     09 16 46 F0 | 	shr	arg03, #9
2901c     0B 19 02 F1 | 	add	arg04, arg03
29020     14 4E 05 F1 | 	add	fp, #20
29024     A7 18 62 FC | 	wrlong	arg04, fp
29028     1C 4E 85 F1 | 	sub	fp, #28
2902c                 | LR__4175
2902c                 | LR__4176
2902c                 | LR__4177
2902c     04 4E 05 F1 | 	add	fp, #4
29030     A7 18 02 FB | 	rdlong	arg04, fp
29034     0C 17 02 F6 | 	mov	arg03, arg04
29038     04 4E 85 F1 | 	sub	fp, #4
2903c     14 16 06 F1 | 	add	arg03, #20
29040     0B 17 02 FB | 	rdlong	arg03, arg03
29044     0C 18 06 F1 | 	add	arg04, #12
29048     0C 19 02 FB | 	rdlong	arg04, arg04
2904c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
29050     3C 00 90 ED |  if_be	jmp	#LR__4178
29054     04 4E 05 F1 | 	add	fp, #4
29058     A7 18 02 FB | 	rdlong	arg04, fp
2905c     0C 17 02 F6 | 	mov	arg03, arg04
29060     14 18 06 F1 | 	add	arg04, #20
29064     0C 19 02 FB | 	rdlong	arg04, arg04
29068     0C 16 06 F1 | 	add	arg03, #12
2906c     0B 19 62 FC | 	wrlong	arg04, arg03
29070     A7 18 02 FB | 	rdlong	arg04, fp
29074     0C 17 02 F6 | 	mov	arg03, arg04
29078     04 4E 85 F1 | 	sub	fp, #4
2907c     10 18 06 F1 | 	add	arg04, #16
29080     0C 19 C2 FA | 	rdbyte	arg04, arg04
29084     40 18 46 F5 | 	or	arg04, #64
29088     10 16 06 F1 | 	add	arg03, #16
2908c     0B 19 42 FC | 	wrbyte	arg04, arg03
29090                 | LR__4178
29090     04 4E 05 F1 | 	add	fp, #4
29094     A7 16 02 FB | 	rdlong	arg03, fp
29098     04 4E 85 F1 | 	sub	fp, #4
2909c     14 16 06 F1 | 	add	arg03, #20
290a0     0B 17 02 FB | 	rdlong	arg03, arg03
290a4     FF 17 CE F7 | 	test	arg03, #511 wz
290a8     2C 01 90 AD |  if_e	jmp	#LR__4182
290ac     04 4E 05 F1 | 	add	fp, #4
290b0     A7 18 02 FB | 	rdlong	arg04, fp
290b4     18 4E 05 F1 | 	add	fp, #24
290b8     A7 16 02 FB | 	rdlong	arg03, fp
290bc     1C 4E 85 F1 | 	sub	fp, #28
290c0     1C 18 06 F1 | 	add	arg04, #28
290c4     0C 19 02 FB | 	rdlong	arg04, arg04
290c8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
290cc     08 01 90 AD |  if_e	jmp	#LR__4182
290d0     04 4E 05 F1 | 	add	fp, #4
290d4     A7 16 02 FB | 	rdlong	arg03, fp
290d8     04 4E 85 F1 | 	sub	fp, #4
290dc     10 16 06 F1 | 	add	arg03, #16
290e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
290e4     80 16 CE F7 | 	test	arg03, #128 wz
290e8     7C 00 90 AD |  if_e	jmp	#LR__4180
290ec     10 4E 05 F1 | 	add	fp, #16
290f0     A7 16 02 FB | 	rdlong	arg03, fp
290f4     01 16 06 F1 | 	add	arg03, #1
290f8     0B 13 C2 FA | 	rdbyte	arg01, arg03
290fc     0C 4E 85 F1 | 	sub	fp, #12
29100     A7 16 02 FB | 	rdlong	arg03, fp
29104     0B 15 02 F6 | 	mov	arg02, arg03
29108     28 14 06 F1 | 	add	arg02, #40
2910c     04 4E 85 F1 | 	sub	fp, #4
29110     1C 16 06 F1 | 	add	arg03, #28
29114     0B 17 02 FB | 	rdlong	arg03, arg03
29118     01 18 06 F6 | 	mov	arg04, #1
2911c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
29120     00 FA 0D F2 | 	cmp	result1, #0 wz
29124     1C 00 90 AD |  if_e	jmp	#LR__4179
29128     04 4E 05 F1 | 	add	fp, #4
2912c     A7 16 02 FB | 	rdlong	arg03, fp
29130     04 4E 85 F1 | 	sub	fp, #4
29134     11 16 06 F1 | 	add	arg03, #17
29138     0B 03 48 FC | 	wrbyte	#1, arg03
2913c     01 FA 05 F6 | 	mov	result1, #1
29140     A0 00 90 FD | 	jmp	#LR__4183
29144                 | LR__4179
29144     04 4E 05 F1 | 	add	fp, #4
29148     A7 18 02 FB | 	rdlong	arg04, fp
2914c     0C 17 02 F6 | 	mov	arg03, arg04
29150     04 4E 85 F1 | 	sub	fp, #4
29154     10 18 06 F1 | 	add	arg04, #16
29158     0C 19 C2 FA | 	rdbyte	arg04, arg04
2915c     7F 18 06 F5 | 	and	arg04, #127
29160     10 16 06 F1 | 	add	arg03, #16
29164     0B 19 42 FC | 	wrbyte	arg04, arg03
29168                 | LR__4180
29168     10 4E 05 F1 | 	add	fp, #16
2916c     A7 16 02 FB | 	rdlong	arg03, fp
29170     01 16 06 F1 | 	add	arg03, #1
29174     0B 13 C2 FA | 	rdbyte	arg01, arg03
29178     0C 4E 85 F1 | 	sub	fp, #12
2917c     A7 14 02 FB | 	rdlong	arg02, fp
29180     28 14 06 F1 | 	add	arg02, #40
29184     18 4E 05 F1 | 	add	fp, #24
29188     A7 16 02 FB | 	rdlong	arg03, fp
2918c     1C 4E 85 F1 | 	sub	fp, #28
29190     01 18 06 F6 | 	mov	arg04, #1
29194     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
29198     00 FA 0D F2 | 	cmp	result1, #0 wz
2919c     1C 00 90 AD |  if_e	jmp	#LR__4181
291a0     04 4E 05 F1 | 	add	fp, #4
291a4     A7 16 02 FB | 	rdlong	arg03, fp
291a8     04 4E 85 F1 | 	sub	fp, #4
291ac     11 16 06 F1 | 	add	arg03, #17
291b0     0B 03 48 FC | 	wrbyte	#1, arg03
291b4     01 FA 05 F6 | 	mov	result1, #1
291b8     28 00 90 FD | 	jmp	#LR__4183
291bc                 | LR__4181
291bc     04 4E 05 F1 | 	add	fp, #4
291c0     A7 18 02 FB | 	rdlong	arg04, fp
291c4     18 4E 05 F1 | 	add	fp, #24
291c8     A7 16 02 FB | 	rdlong	arg03, fp
291cc     1C 4E 85 F1 | 	sub	fp, #28
291d0     1C 18 06 F1 | 	add	arg04, #28
291d4     0C 17 62 FC | 	wrlong	arg03, arg04
291d8                 | LR__4182
291d8                 | ' 
291d8                 | ' 			fp->sect = nsect;
291d8                 | ' 		}
291d8                 | ' 	}
291d8                 | ' 
291d8                 | ' 	return res ;
291d8     0C 4E 05 F1 | 	add	fp, #12
291dc     A7 FA 01 FB | 	rdlong	result1, fp
291e0     0C 4E 85 F1 | 	sub	fp, #12
291e4                 | LR__4183
291e4     A7 F0 03 F6 | 	mov	ptra, fp
291e8     B2 00 A0 FD | 	call	#popregs_
291ec                 | _fatfs_cc_f_lseek_ret
291ec     2D 00 64 FD | 	ret
291f0                 | 
291f0                 | _fatfs_cc_f_opendir
291f0     01 4A 05 F6 | 	mov	COUNT_, #1
291f4     A8 00 A0 FD | 	call	#pushregs_
291f8     14 F0 07 F1 | 	add	ptra, #20
291fc     04 4E 05 F1 | 	add	fp, #4
29200     A7 12 62 FC | 	wrlong	arg01, fp
29204     04 4E 05 F1 | 	add	fp, #4
29208     A7 14 62 FC | 	wrlong	arg02, fp
2920c     04 4E 85 F1 | 	sub	fp, #4
29210     A7 16 0A FB | 	rdlong	arg03, fp wz
29214     04 4E 85 F1 | 	sub	fp, #4
29218     09 FA 05 A6 |  if_e	mov	result1, #9
2921c     78 01 90 AD |  if_e	jmp	#LR__4196
29220     08 4E 05 F1 | 	add	fp, #8
29224     A7 12 02 F6 | 	mov	arg01, fp
29228     08 4E 05 F1 | 	add	fp, #8
2922c     A7 14 02 F6 | 	mov	arg02, fp
29230     10 4E 85 F1 | 	sub	fp, #16
29234     00 16 06 F6 | 	mov	arg03, #0
29238     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2923c     0C 4E 05 F1 | 	add	fp, #12
29240     A7 FA 61 FC | 	wrlong	result1, fp
29244     0C 4E 85 F1 | 	sub	fp, #12
29248     00 FA 0D F2 | 	cmp	result1, #0 wz
2924c     20 01 90 5D |  if_ne	jmp	#LR__4195
29250     04 4E 05 F1 | 	add	fp, #4
29254     A7 16 02 FB | 	rdlong	arg03, fp
29258     0C 4E 05 F1 | 	add	fp, #12
2925c     A7 FA 01 FB | 	rdlong	result1, fp
29260     0B FB 61 FC | 	wrlong	result1, arg03
29264     0C 4E 85 F1 | 	sub	fp, #12
29268     A7 12 02 FB | 	rdlong	arg01, fp
2926c     04 4E 05 F1 | 	add	fp, #4
29270     A7 14 02 FB | 	rdlong	arg02, fp
29274     08 4E 85 F1 | 	sub	fp, #8
29278     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2927c     0C 4E 05 F1 | 	add	fp, #12
29280     A7 FA 61 FC | 	wrlong	result1, fp
29284     0C 4E 85 F1 | 	sub	fp, #12
29288     00 FA 0D F2 | 	cmp	result1, #0 wz
2928c     C4 00 90 5D |  if_ne	jmp	#LR__4194
29290     04 4E 05 F1 | 	add	fp, #4
29294     A7 16 02 FB | 	rdlong	arg03, fp
29298     04 4E 85 F1 | 	sub	fp, #4
2929c     2B 16 06 F1 | 	add	arg03, #43
292a0     0B 17 C2 FA | 	rdbyte	arg03, arg03
292a4     80 16 CE F7 | 	test	arg03, #128 wz
292a8     58 00 90 5D |  if_ne	jmp	#LR__4192
292ac     04 4E 05 F1 | 	add	fp, #4
292b0     A7 16 02 FB | 	rdlong	arg03, fp
292b4     04 4E 85 F1 | 	sub	fp, #4
292b8     06 16 06 F1 | 	add	arg03, #6
292bc     0B 17 C2 FA | 	rdbyte	arg03, arg03
292c0     10 16 CE F7 | 	test	arg03, #16 wz
292c4     30 00 90 AD |  if_e	jmp	#LR__4190
292c8     04 4E 05 F1 | 	add	fp, #4
292cc     A7 16 02 FB | 	rdlong	arg03, fp
292d0     0B 1F 02 F6 | 	mov	local01, arg03
292d4     0C 4E 05 F1 | 	add	fp, #12
292d8     A7 12 02 FB | 	rdlong	arg01, fp
292dc     10 4E 85 F1 | 	sub	fp, #16
292e0     1C 16 06 F1 | 	add	arg03, #28
292e4     0B 15 02 FB | 	rdlong	arg02, arg03
292e8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
292ec     08 1E 06 F1 | 	add	local01, #8
292f0     0F FB 61 FC | 	wrlong	result1, local01
292f4     0C 00 90 FD | 	jmp	#LR__4191
292f8                 | LR__4190
292f8     0C 4E 05 F1 | 	add	fp, #12
292fc     A7 0A 68 FC | 	wrlong	#5, fp
29300     0C 4E 85 F1 | 	sub	fp, #12
29304                 | LR__4191
29304                 | LR__4192
29304     0C 4E 05 F1 | 	add	fp, #12
29308     A7 1E 0A FB | 	rdlong	local01, fp wz
2930c     0C 4E 85 F1 | 	sub	fp, #12
29310     40 00 90 5D |  if_ne	jmp	#LR__4193
29314     04 4E 05 F1 | 	add	fp, #4
29318     A7 1E 02 FB | 	rdlong	local01, fp
2931c     0C 4E 05 F1 | 	add	fp, #12
29320     A7 16 02 FB | 	rdlong	arg03, fp
29324     06 16 06 F1 | 	add	arg03, #6
29328     0B 17 E2 FA | 	rdword	arg03, arg03
2932c     04 1E 06 F1 | 	add	local01, #4
29330     0F 17 52 FC | 	wrword	arg03, local01
29334     0C 4E 85 F1 | 	sub	fp, #12
29338     A7 12 02 FB | 	rdlong	arg01, fp
2933c     04 4E 85 F1 | 	sub	fp, #4
29340     00 14 06 F6 | 	mov	arg02, #0
29344     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
29348     0C 4E 05 F1 | 	add	fp, #12
2934c     A7 FA 61 FC | 	wrlong	result1, fp
29350     0C 4E 85 F1 | 	sub	fp, #12
29354                 | LR__4193
29354                 | LR__4194
29354     0C 4E 05 F1 | 	add	fp, #12
29358     A7 1E 02 FB | 	rdlong	local01, fp
2935c     0C 4E 85 F1 | 	sub	fp, #12
29360     04 1E 0E F2 | 	cmp	local01, #4 wz
29364     0C 4E 05 A1 |  if_e	add	fp, #12
29368     A7 0A 68 AC |  if_e	wrlong	#5, fp
2936c     0C 4E 85 A1 |  if_e	sub	fp, #12
29370                 | LR__4195
29370     0C 4E 05 F1 | 	add	fp, #12
29374     A7 1E 0A FB | 	rdlong	local01, fp wz
29378     0C 4E 85 F1 | 	sub	fp, #12
2937c     04 4E 05 51 |  if_ne	add	fp, #4
29380     A7 1E 02 5B |  if_ne	rdlong	local01, fp
29384     04 4E 85 51 |  if_ne	sub	fp, #4
29388     0F 01 68 5C |  if_ne	wrlong	#0, local01
2938c                 | ' 
2938c                 | ' 	return res ;
2938c     0C 4E 05 F1 | 	add	fp, #12
29390     A7 FA 01 FB | 	rdlong	result1, fp
29394     0C 4E 85 F1 | 	sub	fp, #12
29398                 | LR__4196
29398     A7 F0 03 F6 | 	mov	ptra, fp
2939c     B2 00 A0 FD | 	call	#popregs_
293a0                 | _fatfs_cc_f_opendir_ret
293a0     2D 00 64 FD | 	ret
293a4                 | 
293a4                 | _fatfs_cc_f_closedir
293a4     00 4A 05 F6 | 	mov	COUNT_, #0
293a8     A8 00 A0 FD | 	call	#pushregs_
293ac     10 F0 07 F1 | 	add	ptra, #16
293b0     04 4E 05 F1 | 	add	fp, #4
293b4     A7 12 62 FC | 	wrlong	arg01, fp
293b8     08 4E 05 F1 | 	add	fp, #8
293bc     A7 14 02 F6 | 	mov	arg02, fp
293c0     0C 4E 85 F1 | 	sub	fp, #12
293c4     C0 DD BF FD | 	call	#_fatfs_cc_validate
293c8     08 4E 05 F1 | 	add	fp, #8
293cc     A7 FA 61 FC | 	wrlong	result1, fp
293d0     08 4E 85 F1 | 	sub	fp, #8
293d4     00 FA 0D F2 | 	cmp	result1, #0 wz
293d8     04 4E 05 A1 |  if_e	add	fp, #4
293dc     A7 FA 01 AB |  if_e	rdlong	result1, fp
293e0     04 4E 85 A1 |  if_e	sub	fp, #4
293e4     FD 00 68 AC |  if_e	wrlong	#0, result1
293e8                 | ' 
293e8                 | ' 
293e8                 | ' 
293e8                 | ' 
293e8                 | ' 		dp->obj.fs = 0;
293e8                 | ' #line 4633 "ff.c"
293e8                 | ' 	}
293e8                 | ' 	return res;
293e8     08 4E 05 F1 | 	add	fp, #8
293ec     A7 FA 01 FB | 	rdlong	result1, fp
293f0     08 4E 85 F1 | 	sub	fp, #8
293f4     A7 F0 03 F6 | 	mov	ptra, fp
293f8     B2 00 A0 FD | 	call	#popregs_
293fc                 | _fatfs_cc_f_closedir_ret
293fc     2D 00 64 FD | 	ret
29400                 | 
29400                 | _fatfs_cc_f_readdir
29400     00 4A 05 F6 | 	mov	COUNT_, #0
29404     A8 00 A0 FD | 	call	#pushregs_
29408     14 F0 07 F1 | 	add	ptra, #20
2940c     04 4E 05 F1 | 	add	fp, #4
29410     A7 12 62 FC | 	wrlong	arg01, fp
29414     04 4E 05 F1 | 	add	fp, #4
29418     A7 14 62 FC | 	wrlong	arg02, fp
2941c     04 4E 85 F1 | 	sub	fp, #4
29420     A7 12 02 FB | 	rdlong	arg01, fp
29424     0C 4E 05 F1 | 	add	fp, #12
29428     A7 14 02 F6 | 	mov	arg02, fp
2942c     10 4E 85 F1 | 	sub	fp, #16
29430     54 DD BF FD | 	call	#_fatfs_cc_validate
29434     0C 4E 05 F1 | 	add	fp, #12
29438     A7 FA 61 FC | 	wrlong	result1, fp
2943c     0C 4E 85 F1 | 	sub	fp, #12
29440     00 FA 0D F2 | 	cmp	result1, #0 wz
29444     BC 00 90 5D |  if_ne	jmp	#LR__4203
29448     08 4E 05 F1 | 	add	fp, #8
2944c     A7 FA 09 FB | 	rdlong	result1, fp wz
29450     08 4E 85 F1 | 	sub	fp, #8
29454     24 00 90 5D |  if_ne	jmp	#LR__4200
29458     04 4E 05 F1 | 	add	fp, #4
2945c     A7 12 02 FB | 	rdlong	arg01, fp
29460     04 4E 85 F1 | 	sub	fp, #4
29464     00 14 06 F6 | 	mov	arg02, #0
29468     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2946c     0C 4E 05 F1 | 	add	fp, #12
29470     A7 FA 61 FC | 	wrlong	result1, fp
29474     0C 4E 85 F1 | 	sub	fp, #12
29478     88 00 90 FD | 	jmp	#LR__4202
2947c                 | LR__4200
2947c     04 4E 05 F1 | 	add	fp, #4
29480     A7 12 02 FB | 	rdlong	arg01, fp
29484     04 4E 85 F1 | 	sub	fp, #4
29488     00 14 06 F6 | 	mov	arg02, #0
2948c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
29490     0C 4E 05 F1 | 	add	fp, #12
29494     A7 FA 61 FC | 	wrlong	result1, fp
29498     0C 4E 85 F1 | 	sub	fp, #12
2949c     04 FA 0D F2 | 	cmp	result1, #4 wz
294a0     0C 4E 05 A1 |  if_e	add	fp, #12
294a4     A7 00 68 AC |  if_e	wrlong	#0, fp
294a8     0C 4E 85 A1 |  if_e	sub	fp, #12
294ac     0C 4E 05 F1 | 	add	fp, #12
294b0     A7 FA 09 FB | 	rdlong	result1, fp wz
294b4     0C 4E 85 F1 | 	sub	fp, #12
294b8     48 00 90 5D |  if_ne	jmp	#LR__4201
294bc     04 4E 05 F1 | 	add	fp, #4
294c0     A7 12 02 FB | 	rdlong	arg01, fp
294c4     04 4E 05 F1 | 	add	fp, #4
294c8     A7 14 02 FB | 	rdlong	arg02, fp
294cc     08 4E 85 F1 | 	sub	fp, #8
294d0     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
294d4     04 4E 05 F1 | 	add	fp, #4
294d8     A7 12 02 FB | 	rdlong	arg01, fp
294dc     04 4E 85 F1 | 	sub	fp, #4
294e0     00 14 06 F6 | 	mov	arg02, #0
294e4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
294e8     0C 4E 05 F1 | 	add	fp, #12
294ec     A7 FA 61 FC | 	wrlong	result1, fp
294f0     0C 4E 85 F1 | 	sub	fp, #12
294f4     04 FA 0D F2 | 	cmp	result1, #4 wz
294f8     0C 4E 05 A1 |  if_e	add	fp, #12
294fc     A7 00 68 AC |  if_e	wrlong	#0, fp
29500     0C 4E 85 A1 |  if_e	sub	fp, #12
29504                 | LR__4201
29504                 | LR__4202
29504                 | LR__4203
29504                 | ' 			}
29504                 | ' 			;
29504                 | ' 		}
29504                 | ' 	}
29504                 | ' 	return res ;
29504     0C 4E 05 F1 | 	add	fp, #12
29508     A7 FA 01 FB | 	rdlong	result1, fp
2950c     0C 4E 85 F1 | 	sub	fp, #12
29510     A7 F0 03 F6 | 	mov	ptra, fp
29514     B2 00 A0 FD | 	call	#popregs_
29518                 | _fatfs_cc_f_readdir_ret
29518     2D 00 64 FD | 	ret
2951c                 | 
2951c                 | _fatfs_cc_f_stat
2951c     00 4A 05 F6 | 	mov	COUNT_, #0
29520     A8 00 A0 FD | 	call	#pushregs_
29524     40 F0 07 F1 | 	add	ptra, #64
29528     04 4E 05 F1 | 	add	fp, #4
2952c     A7 12 62 FC | 	wrlong	arg01, fp
29530     04 4E 05 F1 | 	add	fp, #4
29534     A7 14 62 FC | 	wrlong	arg02, fp
29538     04 4E 85 F1 | 	sub	fp, #4
2953c     A7 12 02 F6 | 	mov	arg01, fp
29540     0C 4E 05 F1 | 	add	fp, #12
29544     A7 14 02 F6 | 	mov	arg02, fp
29548     10 4E 85 F1 | 	sub	fp, #16
2954c     00 16 06 F6 | 	mov	arg03, #0
29550     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
29554     0C 4E 05 F1 | 	add	fp, #12
29558     A7 FA 61 FC | 	wrlong	result1, fp
2955c     0C 4E 85 F1 | 	sub	fp, #12
29560     00 FA 0D F2 | 	cmp	result1, #0 wz
29564     74 00 90 5D |  if_ne	jmp	#LR__4213
29568     10 4E 05 F1 | 	add	fp, #16
2956c     A7 12 02 F6 | 	mov	arg01, fp
29570     0C 4E 85 F1 | 	sub	fp, #12
29574     A7 14 02 FB | 	rdlong	arg02, fp
29578     04 4E 85 F1 | 	sub	fp, #4
2957c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
29580     0C 4E 05 F1 | 	add	fp, #12
29584     A7 FA 61 FC | 	wrlong	result1, fp
29588     0C 4E 85 F1 | 	sub	fp, #12
2958c     00 FA 0D F2 | 	cmp	result1, #0 wz
29590     48 00 90 5D |  if_ne	jmp	#LR__4212
29594     3B 4E 05 F1 | 	add	fp, #59
29598     A7 FA C1 FA | 	rdbyte	result1, fp
2959c     3B 4E 85 F1 | 	sub	fp, #59
295a0     80 FA CD F7 | 	test	result1, #128 wz
295a4     0C 4E 05 51 |  if_ne	add	fp, #12
295a8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
295ac     0C 4E 85 51 |  if_ne	sub	fp, #12
295b0     28 00 90 5D |  if_ne	jmp	#LR__4211
295b4     08 4E 05 F1 | 	add	fp, #8
295b8     A7 FA 09 FB | 	rdlong	result1, fp wz
295bc     08 4E 85 F1 | 	sub	fp, #8
295c0     18 00 90 AD |  if_e	jmp	#LR__4210
295c4     10 4E 05 F1 | 	add	fp, #16
295c8     A7 12 02 F6 | 	mov	arg01, fp
295cc     08 4E 85 F1 | 	sub	fp, #8
295d0     A7 14 02 FB | 	rdlong	arg02, fp
295d4     08 4E 85 F1 | 	sub	fp, #8
295d8     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
295dc                 | LR__4210
295dc                 | LR__4211
295dc                 | LR__4212
295dc                 | LR__4213
295dc                 | ' 			}
295dc                 | ' 		}
295dc                 | ' 		;
295dc                 | ' 	}
295dc                 | ' 
295dc                 | ' 	return res ;
295dc     0C 4E 05 F1 | 	add	fp, #12
295e0     A7 FA 01 FB | 	rdlong	result1, fp
295e4     0C 4E 85 F1 | 	sub	fp, #12
295e8     A7 F0 03 F6 | 	mov	ptra, fp
295ec     B2 00 A0 FD | 	call	#popregs_
295f0                 | _fatfs_cc_f_stat_ret
295f0     2D 00 64 FD | 	ret
295f4                 | 
295f4                 | _fatfs_cc_f_unlink
295f4     00 4A 05 F6 | 	mov	COUNT_, #0
295f8     A8 00 A0 FD | 	call	#pushregs_
295fc     74 F0 07 F1 | 	add	ptra, #116
29600     04 4E 05 F1 | 	add	fp, #4
29604     A7 12 62 FC | 	wrlong	arg01, fp
29608     68 4E 05 F1 | 	add	fp, #104
2960c     A7 00 68 FC | 	wrlong	#0, fp
29610     68 4E 85 F1 | 	sub	fp, #104
29614     A7 12 02 F6 | 	mov	arg01, fp
29618     6C 4E 05 F1 | 	add	fp, #108
2961c     A7 14 02 F6 | 	mov	arg02, fp
29620     70 4E 85 F1 | 	sub	fp, #112
29624     02 16 06 F6 | 	mov	arg03, #2
29628     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2962c     08 4E 05 F1 | 	add	fp, #8
29630     A7 FA 61 FC | 	wrlong	result1, fp
29634     08 4E 85 F1 | 	sub	fp, #8
29638     00 FA 0D F2 | 	cmp	result1, #0 wz
2963c     E4 01 90 5D |  if_ne	jmp	#LR__4228
29640     70 4E 05 F1 | 	add	fp, #112
29644     A7 16 02 FB | 	rdlong	arg03, fp
29648     64 4E 85 F1 | 	sub	fp, #100
2964c     A7 16 62 FC | 	wrlong	arg03, fp
29650     A7 12 02 F6 | 	mov	arg01, fp
29654     08 4E 85 F1 | 	sub	fp, #8
29658     A7 14 02 FB | 	rdlong	arg02, fp
2965c     04 4E 85 F1 | 	sub	fp, #4
29660     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
29664     08 4E 05 F1 | 	add	fp, #8
29668     A7 FA 61 FC | 	wrlong	result1, fp
2966c     00 FA 4D F2 | 	cmps	result1, #0 wz
29670     08 4E 85 F1 | 	sub	fp, #8
29674     AC 01 90 5D |  if_ne	jmp	#LR__4227
29678     37 4E 05 F1 | 	add	fp, #55
2967c     A7 FA C1 FA | 	rdbyte	result1, fp
29680     37 4E 85 F1 | 	sub	fp, #55
29684     80 FA CD F7 | 	test	result1, #128 wz
29688     08 4E 05 51 |  if_ne	add	fp, #8
2968c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29690     08 4E 85 51 |  if_ne	sub	fp, #8
29694     1C 00 90 5D |  if_ne	jmp	#LR__4220
29698     12 4E 05 F1 | 	add	fp, #18
2969c     A7 FA C1 FA | 	rdbyte	result1, fp
296a0     12 4E 85 F1 | 	sub	fp, #18
296a4     01 FA CD F7 | 	test	result1, #1 wz
296a8     08 4E 05 51 |  if_ne	add	fp, #8
296ac     A7 0E 68 5C |  if_ne	wrlong	#7, fp
296b0     08 4E 85 51 |  if_ne	sub	fp, #8
296b4                 | LR__4220
296b4     08 4E 05 F1 | 	add	fp, #8
296b8     A7 FA 09 FB | 	rdlong	result1, fp wz
296bc     08 4E 85 F1 | 	sub	fp, #8
296c0     C8 00 90 5D |  if_ne	jmp	#LR__4223
296c4     70 4E 05 F1 | 	add	fp, #112
296c8     A7 12 02 FB | 	rdlong	arg01, fp
296cc     48 4E 85 F1 | 	sub	fp, #72
296d0     A7 14 02 FB | 	rdlong	arg02, fp
296d4     28 4E 85 F1 | 	sub	fp, #40
296d8     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
296dc     6C 4E 05 F1 | 	add	fp, #108
296e0     A7 FA 61 FC | 	wrlong	result1, fp
296e4     5A 4E 85 F1 | 	sub	fp, #90
296e8     A7 FA C1 FA | 	rdbyte	result1, fp
296ec     12 4E 85 F1 | 	sub	fp, #18
296f0     10 FA CD F7 | 	test	result1, #16 wz
296f4     94 00 90 AD |  if_e	jmp	#LR__4222
296f8     70 4E 05 F1 | 	add	fp, #112
296fc     A7 FA 01 FB | 	rdlong	result1, fp
29700     34 4E 85 F1 | 	sub	fp, #52
29704     A7 FA 61 FC | 	wrlong	result1, fp
29708     30 4E 05 F1 | 	add	fp, #48
2970c     A7 16 02 FB | 	rdlong	arg03, fp
29710     28 4E 85 F1 | 	sub	fp, #40
29714     A7 16 62 FC | 	wrlong	arg03, fp
29718     08 4E 85 F1 | 	sub	fp, #8
2971c     A7 12 02 F6 | 	mov	arg01, fp
29720     3C 4E 85 F1 | 	sub	fp, #60
29724     00 14 06 F6 | 	mov	arg02, #0
29728     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2972c     08 4E 05 F1 | 	add	fp, #8
29730     A7 FA 61 FC | 	wrlong	result1, fp
29734     08 4E 85 F1 | 	sub	fp, #8
29738     00 FA 0D F2 | 	cmp	result1, #0 wz
2973c     4C 00 90 5D |  if_ne	jmp	#LR__4221
29740     3C 4E 05 F1 | 	add	fp, #60
29744     A7 12 02 F6 | 	mov	arg01, fp
29748     3C 4E 85 F1 | 	sub	fp, #60
2974c     00 14 06 F6 | 	mov	arg02, #0
29750     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
29754     08 4E 05 F1 | 	add	fp, #8
29758     A7 FA 61 FC | 	wrlong	result1, fp
2975c     00 FA 4D F2 | 	cmps	result1, #0 wz
29760     08 4E 85 F1 | 	sub	fp, #8
29764     08 4E 05 A1 |  if_e	add	fp, #8
29768     A7 0E 68 AC |  if_e	wrlong	#7, fp
2976c     08 4E 85 A1 |  if_e	sub	fp, #8
29770     08 4E 05 F1 | 	add	fp, #8
29774     A7 FA 01 FB | 	rdlong	result1, fp
29778     08 4E 85 F1 | 	sub	fp, #8
2977c     04 FA 0D F2 | 	cmp	result1, #4 wz
29780     08 4E 05 A1 |  if_e	add	fp, #8
29784     A7 00 68 AC |  if_e	wrlong	#0, fp
29788     08 4E 85 A1 |  if_e	sub	fp, #8
2978c                 | LR__4221
2978c                 | LR__4222
2978c                 | LR__4223
2978c     08 4E 05 F1 | 	add	fp, #8
29790     A7 FA 09 FB | 	rdlong	result1, fp wz
29794     08 4E 85 F1 | 	sub	fp, #8
29798     88 00 90 5D |  if_ne	jmp	#LR__4226
2979c     0C 4E 05 F1 | 	add	fp, #12
297a0     A7 12 02 F6 | 	mov	arg01, fp
297a4     0C 4E 85 F1 | 	sub	fp, #12
297a8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
297ac     08 4E 05 F1 | 	add	fp, #8
297b0     A7 FA 61 FC | 	wrlong	result1, fp
297b4     08 4E 85 F1 | 	sub	fp, #8
297b8     00 FA 0D F2 | 	cmp	result1, #0 wz
297bc     38 00 90 5D |  if_ne	jmp	#LR__4224
297c0     6C 4E 05 F1 | 	add	fp, #108
297c4     A7 FA 09 FB | 	rdlong	result1, fp wz
297c8     6C 4E 85 F1 | 	sub	fp, #108
297cc     28 00 90 AD |  if_e	jmp	#LR__4224
297d0     0C 4E 05 F1 | 	add	fp, #12
297d4     A7 12 02 F6 | 	mov	arg01, fp
297d8     60 4E 05 F1 | 	add	fp, #96
297dc     A7 14 02 FB | 	rdlong	arg02, fp
297e0     6C 4E 85 F1 | 	sub	fp, #108
297e4     00 16 06 F6 | 	mov	arg03, #0
297e8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
297ec     08 4E 05 F1 | 	add	fp, #8
297f0     A7 FA 61 FC | 	wrlong	result1, fp
297f4     08 4E 85 F1 | 	sub	fp, #8
297f8                 | LR__4224
297f8     08 4E 05 F1 | 	add	fp, #8
297fc     A7 FA 09 FB | 	rdlong	result1, fp wz
29800     08 4E 85 F1 | 	sub	fp, #8
29804     1C 00 90 5D |  if_ne	jmp	#LR__4225
29808     70 4E 05 F1 | 	add	fp, #112
2980c     A7 12 02 FB | 	rdlong	arg01, fp
29810     70 4E 85 F1 | 	sub	fp, #112
29814     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
29818     08 4E 05 F1 | 	add	fp, #8
2981c     A7 FA 61 FC | 	wrlong	result1, fp
29820     08 4E 85 F1 | 	sub	fp, #8
29824                 | LR__4225
29824                 | LR__4226
29824                 | LR__4227
29824                 | LR__4228
29824                 | ' 			}
29824                 | ' 		}
29824                 | ' 		;
29824                 | ' 	}
29824                 | ' 
29824                 | ' 	return res ;
29824     08 4E 05 F1 | 	add	fp, #8
29828     A7 FA 01 FB | 	rdlong	result1, fp
2982c     08 4E 85 F1 | 	sub	fp, #8
29830     A7 F0 03 F6 | 	mov	ptra, fp
29834     B2 00 A0 FD | 	call	#popregs_
29838                 | _fatfs_cc_f_unlink_ret
29838     2D 00 64 FD | 	ret
2983c                 | 
2983c                 | _fatfs_cc_f_mkdir
2983c     00 4A 05 F6 | 	mov	COUNT_, #0
29840     A8 00 A0 FD | 	call	#pushregs_
29844     5C F0 07 F1 | 	add	ptra, #92
29848     04 4E 05 F1 | 	add	fp, #4
2984c     A7 12 62 FC | 	wrlong	arg01, fp
29850     A7 12 02 F6 | 	mov	arg01, fp
29854     48 4E 05 F1 | 	add	fp, #72
29858     A7 14 02 F6 | 	mov	arg02, fp
2985c     4C 4E 85 F1 | 	sub	fp, #76
29860     02 16 06 F6 | 	mov	arg03, #2
29864     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
29868     08 4E 05 F1 | 	add	fp, #8
2986c     A7 FA 61 FC | 	wrlong	result1, fp
29870     08 4E 85 F1 | 	sub	fp, #8
29874     00 FA 0D F2 | 	cmp	result1, #0 wz
29878     C4 02 90 5D |  if_ne	jmp	#LR__4235
2987c     4C 4E 05 F1 | 	add	fp, #76
29880     A7 16 02 FB | 	rdlong	arg03, fp
29884     40 4E 85 F1 | 	sub	fp, #64
29888     A7 16 62 FC | 	wrlong	arg03, fp
2988c     A7 12 02 F6 | 	mov	arg01, fp
29890     08 4E 85 F1 | 	sub	fp, #8
29894     A7 14 02 FB | 	rdlong	arg02, fp
29898     04 4E 85 F1 | 	sub	fp, #4
2989c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
298a0     08 4E 05 F1 | 	add	fp, #8
298a4     A7 FA 61 FC | 	wrlong	result1, fp
298a8     00 FA 4D F2 | 	cmps	result1, #0 wz
298ac     08 4E 85 F1 | 	sub	fp, #8
298b0     08 4E 05 A1 |  if_e	add	fp, #8
298b4     A7 10 68 AC |  if_e	wrlong	#8, fp
298b8     08 4E 85 A1 |  if_e	sub	fp, #8
298bc     08 4E 05 F1 | 	add	fp, #8
298c0     A7 FA 01 FB | 	rdlong	result1, fp
298c4     08 4E 85 F1 | 	sub	fp, #8
298c8     04 FA 0D F2 | 	cmp	result1, #4 wz
298cc     70 02 90 5D |  if_ne	jmp	#LR__4234
298d0     4C 4E 05 F1 | 	add	fp, #76
298d4     A7 16 02 FB | 	rdlong	arg03, fp
298d8     10 4E 85 F1 | 	sub	fp, #16
298dc     A7 16 62 FC | 	wrlong	arg03, fp
298e0     A7 12 02 F6 | 	mov	arg01, fp
298e4     3C 4E 85 F1 | 	sub	fp, #60
298e8     00 14 06 F6 | 	mov	arg02, #0
298ec     04 AC BF FD | 	call	#_fatfs_cc_create_chain
298f0     50 4E 05 F1 | 	add	fp, #80
298f4     A7 FA 61 FC | 	wrlong	result1, fp
298f8     48 4E 85 F1 | 	sub	fp, #72
298fc     A7 00 68 FC | 	wrlong	#0, fp
29900     48 4E 05 F1 | 	add	fp, #72
29904     A7 FA 09 FB | 	rdlong	result1, fp wz
29908     50 4E 85 F1 | 	sub	fp, #80
2990c     08 4E 05 A1 |  if_e	add	fp, #8
29910     A7 0E 68 AC |  if_e	wrlong	#7, fp
29914     08 4E 85 A1 |  if_e	sub	fp, #8
29918     50 4E 05 F1 | 	add	fp, #80
2991c     A7 FA 01 FB | 	rdlong	result1, fp
29920     50 4E 85 F1 | 	sub	fp, #80
29924     01 FA 0D F2 | 	cmp	result1, #1 wz
29928     08 4E 05 A1 |  if_e	add	fp, #8
2992c     A7 04 68 AC |  if_e	wrlong	#2, fp
29930     08 4E 85 A1 |  if_e	sub	fp, #8
29934     50 4E 05 F1 | 	add	fp, #80
29938     A7 16 02 FB | 	rdlong	arg03, fp
2993c     50 4E 85 F1 | 	sub	fp, #80
29940     FF FF 7F FF 
29944     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
29948     08 4E 05 A1 |  if_e	add	fp, #8
2994c     A7 02 68 AC |  if_e	wrlong	#1, fp
29950     08 4E 85 A1 |  if_e	sub	fp, #8
29954     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
29958     58 4E 05 F1 | 	add	fp, #88
2995c     A7 FA 61 FC | 	wrlong	result1, fp
29960     50 4E 85 F1 | 	sub	fp, #80
29964     A7 FA 09 FB | 	rdlong	result1, fp wz
29968     08 4E 85 F1 | 	sub	fp, #8
2996c     1C 01 90 5D |  if_ne	jmp	#LR__4231
29970     4C 4E 05 F1 | 	add	fp, #76
29974     A7 12 02 FB | 	rdlong	arg01, fp
29978     04 4E 05 F1 | 	add	fp, #4
2997c     A7 14 02 FB | 	rdlong	arg02, fp
29980     50 4E 85 F1 | 	sub	fp, #80
29984     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
29988     08 4E 05 F1 | 	add	fp, #8
2998c     A7 FA 61 FC | 	wrlong	result1, fp
29990     00 FA 4D F2 | 	cmps	result1, #0 wz
29994     08 4E 85 F1 | 	sub	fp, #8
29998     F0 00 90 5D |  if_ne	jmp	#LR__4230
2999c     4C 4E 05 F1 | 	add	fp, #76
299a0     A7 12 02 FB | 	rdlong	arg01, fp
299a4     4C 4E 85 F1 | 	sub	fp, #76
299a8     34 12 06 F1 | 	add	arg01, #52
299ac     20 14 06 F6 | 	mov	arg02, #32
299b0     0B 16 06 F6 | 	mov	arg03, #11
299b4     98 00 A0 FD | 	call	#\builtin_bytefill_
299b8     4C 4E 05 F1 | 	add	fp, #76
299bc     A7 FA 01 FB | 	rdlong	result1, fp
299c0     34 FA 05 F1 | 	add	result1, #52
299c4     FD 5C 48 FC | 	wrbyte	#46, result1
299c8     A7 16 02 FB | 	rdlong	arg03, fp
299cc     3F 16 06 F1 | 	add	arg03, #63
299d0     0B 21 48 FC | 	wrbyte	#16, arg03
299d4     A7 12 02 FB | 	rdlong	arg01, fp
299d8     4A 12 06 F1 | 	add	arg01, #74
299dc     0C 4E 05 F1 | 	add	fp, #12
299e0     A7 14 02 FB | 	rdlong	arg02, fp
299e4     09 15 62 FC | 	wrlong	arg02, arg01
299e8     0C 4E 85 F1 | 	sub	fp, #12
299ec     A7 14 02 FB | 	rdlong	arg02, fp
299f0     0A 13 02 F6 | 	mov	arg01, arg02
299f4     34 14 06 F1 | 	add	arg02, #52
299f8     04 4E 05 F1 | 	add	fp, #4
299fc     A7 16 02 FB | 	rdlong	arg03, fp
29a00     50 4E 85 F1 | 	sub	fp, #80
29a04     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
29a08     4C 4E 05 F1 | 	add	fp, #76
29a0c     A7 14 02 FB | 	rdlong	arg02, fp
29a10     0A 13 02 F6 | 	mov	arg01, arg02
29a14     54 12 06 F1 | 	add	arg01, #84
29a18     4C 4E 85 F1 | 	sub	fp, #76
29a1c     34 14 06 F1 | 	add	arg02, #52
29a20     20 16 06 F6 | 	mov	arg03, #32
29a24     D8 2C BF FD | 	call	#__system____builtin_memmove
29a28     4C 4E 05 F1 | 	add	fp, #76
29a2c     A7 16 02 FB | 	rdlong	arg03, fp
29a30     55 16 06 F1 | 	add	arg03, #85
29a34     0B 5D 48 FC | 	wrbyte	#46, arg03
29a38     38 4E 85 F1 | 	sub	fp, #56
29a3c     A7 16 02 FB | 	rdlong	arg03, fp
29a40     40 4E 05 F1 | 	add	fp, #64
29a44     A7 16 62 FC | 	wrlong	arg03, fp
29a48     08 4E 85 F1 | 	sub	fp, #8
29a4c     A7 14 02 FB | 	rdlong	arg02, fp
29a50     0A 13 02 F6 | 	mov	arg01, arg02
29a54     54 14 06 F1 | 	add	arg02, #84
29a58     4C 4E 85 F1 | 	sub	fp, #76
29a5c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
29a60     4C 4E 05 F1 | 	add	fp, #76
29a64     A7 16 02 FB | 	rdlong	arg03, fp
29a68     03 16 06 F1 | 	add	arg03, #3
29a6c     0B 03 48 FC | 	wrbyte	#1, arg03
29a70     40 4E 85 F1 | 	sub	fp, #64
29a74     A7 12 02 F6 | 	mov	arg01, fp
29a78     0C 4E 85 F1 | 	sub	fp, #12
29a7c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
29a80     08 4E 05 F1 | 	add	fp, #8
29a84     A7 FA 61 FC | 	wrlong	result1, fp
29a88     08 4E 85 F1 | 	sub	fp, #8
29a8c                 | LR__4230
29a8c                 | LR__4231
29a8c     08 4E 05 F1 | 	add	fp, #8
29a90     A7 FA 09 FB | 	rdlong	result1, fp wz
29a94     08 4E 85 F1 | 	sub	fp, #8
29a98     88 00 90 5D |  if_ne	jmp	#LR__4232
29a9c     28 4E 05 F1 | 	add	fp, #40
29aa0     A7 12 02 FB | 	rdlong	arg01, fp
29aa4     16 12 06 F1 | 	add	arg01, #22
29aa8     30 4E 05 F1 | 	add	fp, #48
29aac     A7 14 02 FB | 	rdlong	arg02, fp
29ab0     09 15 62 FC | 	wrlong	arg02, arg01
29ab4     0C 4E 85 F1 | 	sub	fp, #12
29ab8     A7 12 02 FB | 	rdlong	arg01, fp
29abc     24 4E 85 F1 | 	sub	fp, #36
29ac0     A7 14 02 FB | 	rdlong	arg02, fp
29ac4     28 4E 05 F1 | 	add	fp, #40
29ac8     A7 16 02 FB | 	rdlong	arg03, fp
29acc     50 4E 85 F1 | 	sub	fp, #80
29ad0     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
29ad4     28 4E 05 F1 | 	add	fp, #40
29ad8     A7 FA 01 FB | 	rdlong	result1, fp
29adc     0B FA 05 F1 | 	add	result1, #11
29ae0     FD 20 48 FC | 	wrbyte	#16, result1
29ae4     24 4E 05 F1 | 	add	fp, #36
29ae8     A7 FA 01 FB | 	rdlong	result1, fp
29aec     03 FA 05 F1 | 	add	result1, #3
29af0     FD 02 48 FC | 	wrbyte	#1, result1
29af4     44 4E 85 F1 | 	sub	fp, #68
29af8     A7 FA 09 FB | 	rdlong	result1, fp wz
29afc     08 4E 85 F1 | 	sub	fp, #8
29b00     3C 00 90 5D |  if_ne	jmp	#LR__4233
29b04     4C 4E 05 F1 | 	add	fp, #76
29b08     A7 12 02 FB | 	rdlong	arg01, fp
29b0c     4C 4E 85 F1 | 	sub	fp, #76
29b10     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
29b14     08 4E 05 F1 | 	add	fp, #8
29b18     A7 FA 61 FC | 	wrlong	result1, fp
29b1c     08 4E 85 F1 | 	sub	fp, #8
29b20     1C 00 90 FD | 	jmp	#LR__4233
29b24                 | LR__4232
29b24     3C 4E 05 F1 | 	add	fp, #60
29b28     A7 12 02 F6 | 	mov	arg01, fp
29b2c     14 4E 05 F1 | 	add	fp, #20
29b30     A7 14 02 FB | 	rdlong	arg02, fp
29b34     50 4E 85 F1 | 	sub	fp, #80
29b38     00 16 06 F6 | 	mov	arg03, #0
29b3c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
29b40                 | LR__4233
29b40                 | LR__4234
29b40                 | LR__4235
29b40                 | ' 				remove_chain(&sobj, dcl, 0);
29b40                 | ' 			}
29b40                 | ' 		}
29b40                 | ' 		;
29b40                 | ' 	}
29b40                 | ' 
29b40                 | ' 	return res ;
29b40     08 4E 05 F1 | 	add	fp, #8
29b44     A7 FA 01 FB | 	rdlong	result1, fp
29b48     08 4E 85 F1 | 	sub	fp, #8
29b4c     A7 F0 03 F6 | 	mov	ptra, fp
29b50     B2 00 A0 FD | 	call	#popregs_
29b54                 | _fatfs_cc_f_mkdir_ret
29b54     2D 00 64 FD | 	ret
29b58                 | 
29b58                 | _fatfs_cc_f_rename
29b58     01 4A 05 F6 | 	mov	COUNT_, #1
29b5c     A8 00 A0 FD | 	call	#pushregs_
29b60     9C F0 07 F1 | 	add	ptra, #156
29b64     04 4E 05 F1 | 	add	fp, #4
29b68     A7 12 62 FC | 	wrlong	arg01, fp
29b6c     04 4E 05 F1 | 	add	fp, #4
29b70     A7 14 62 FC | 	wrlong	arg02, fp
29b74     A7 12 02 F6 | 	mov	arg01, fp
29b78     08 4E 85 F1 | 	sub	fp, #8
29b7c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
29b80     04 4E 05 F1 | 	add	fp, #4
29b84     A7 12 02 F6 | 	mov	arg01, fp
29b88     6C 4E 05 F1 | 	add	fp, #108
29b8c     A7 14 02 F6 | 	mov	arg02, fp
29b90     70 4E 85 F1 | 	sub	fp, #112
29b94     02 16 06 F6 | 	mov	arg03, #2
29b98     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
29b9c     0C 4E 05 F1 | 	add	fp, #12
29ba0     A7 FA 61 FC | 	wrlong	result1, fp
29ba4     0C 4E 85 F1 | 	sub	fp, #12
29ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
29bac     44 03 90 5D |  if_ne	jmp	#LR__4253
29bb0     70 4E 05 F1 | 	add	fp, #112
29bb4     A7 16 02 FB | 	rdlong	arg03, fp
29bb8     60 4E 85 F1 | 	sub	fp, #96
29bbc     A7 16 62 FC | 	wrlong	arg03, fp
29bc0     A7 12 02 F6 | 	mov	arg01, fp
29bc4     0C 4E 85 F1 | 	sub	fp, #12
29bc8     A7 14 02 FB | 	rdlong	arg02, fp
29bcc     04 4E 85 F1 | 	sub	fp, #4
29bd0     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
29bd4     0C 4E 05 F1 | 	add	fp, #12
29bd8     A7 FA 61 FC | 	wrlong	result1, fp
29bdc     00 FA 4D F2 | 	cmps	result1, #0 wz
29be0     0C 4E 85 F1 | 	sub	fp, #12
29be4     1C 00 90 5D |  if_ne	jmp	#LR__4240
29be8     3B 4E 05 F1 | 	add	fp, #59
29bec     A7 FA C1 FA | 	rdbyte	result1, fp
29bf0     3B 4E 85 F1 | 	sub	fp, #59
29bf4     A0 FA CD F7 | 	test	result1, #160 wz
29bf8     0C 4E 05 51 |  if_ne	add	fp, #12
29bfc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29c00     0C 4E 85 51 |  if_ne	sub	fp, #12
29c04                 | LR__4240
29c04     0C 4E 05 F1 | 	add	fp, #12
29c08     A7 1E 0A FB | 	rdlong	local01, fp wz
29c0c     0C 4E 85 F1 | 	sub	fp, #12
29c10     E0 02 90 5D |  if_ne	jmp	#LR__4252
29c14     74 4E 05 F1 | 	add	fp, #116
29c18     A7 12 02 F6 | 	mov	arg01, fp
29c1c     48 4E 85 F1 | 	sub	fp, #72
29c20     A7 14 02 FB | 	rdlong	arg02, fp
29c24     2C 4E 85 F1 | 	sub	fp, #44
29c28     20 16 06 F6 | 	mov	arg03, #32
29c2c     D0 2A BF FD | 	call	#__system____builtin_memmove
29c30     40 4E 05 F1 | 	add	fp, #64
29c34     A7 12 02 F6 | 	mov	arg01, fp
29c38     30 4E 85 F1 | 	sub	fp, #48
29c3c     A7 14 02 F6 | 	mov	arg02, fp
29c40     10 4E 85 F1 | 	sub	fp, #16
29c44     30 16 06 F6 | 	mov	arg03, #48
29c48     B4 2A BF FD | 	call	#__system____builtin_memmove
29c4c     40 4E 05 F1 | 	add	fp, #64
29c50     A7 12 02 F6 | 	mov	arg01, fp
29c54     38 4E 85 F1 | 	sub	fp, #56
29c58     A7 14 02 FB | 	rdlong	arg02, fp
29c5c     08 4E 85 F1 | 	sub	fp, #8
29c60     34 CA BF FD | 	call	#_fatfs_cc_follow_path
29c64     0C 4E 05 F1 | 	add	fp, #12
29c68     A7 FA 61 FC | 	wrlong	result1, fp
29c6c     0C 4E 85 F1 | 	sub	fp, #12
29c70     00 FA 0D F2 | 	cmp	result1, #0 wz
29c74     4C 00 90 5D |  if_ne	jmp	#LR__4243
29c78     48 4E 05 F1 | 	add	fp, #72
29c7c     A7 FA 01 FB | 	rdlong	result1, fp
29c80     30 4E 85 F1 | 	sub	fp, #48
29c84     A7 16 02 FB | 	rdlong	arg03, fp
29c88     18 4E 85 F1 | 	sub	fp, #24
29c8c     0B FB 09 F2 | 	cmp	result1, arg03 wz
29c90     20 00 90 5D |  if_ne	jmp	#LR__4241
29c94     50 4E 05 F1 | 	add	fp, #80
29c98     A7 FA 01 FB | 	rdlong	result1, fp
29c9c     30 4E 85 F1 | 	sub	fp, #48
29ca0     A7 16 02 FB | 	rdlong	arg03, fp
29ca4     20 4E 85 F1 | 	sub	fp, #32
29ca8     0B FB 09 F2 | 	cmp	result1, arg03 wz
29cac     04 1E 06 A6 |  if_e	mov	local01, #4
29cb0     04 00 90 AD |  if_e	jmp	#LR__4242
29cb4                 | LR__4241
29cb4     08 1E 06 F6 | 	mov	local01, #8
29cb8                 | LR__4242
29cb8     0C 4E 05 F1 | 	add	fp, #12
29cbc     A7 1E 62 FC | 	wrlong	local01, fp
29cc0     0C 4E 85 F1 | 	sub	fp, #12
29cc4                 | LR__4243
29cc4     0C 4E 05 F1 | 	add	fp, #12
29cc8     A7 1E 02 FB | 	rdlong	local01, fp
29ccc     0C 4E 85 F1 | 	sub	fp, #12
29cd0     04 1E 0E F2 | 	cmp	local01, #4 wz
29cd4     CC 01 90 5D |  if_ne	jmp	#LR__4249
29cd8     40 4E 05 F1 | 	add	fp, #64
29cdc     A7 12 02 F6 | 	mov	arg01, fp
29ce0     40 4E 85 F1 | 	sub	fp, #64
29ce4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
29ce8     0C 4E 05 F1 | 	add	fp, #12
29cec     A7 FA 61 FC | 	wrlong	result1, fp
29cf0     0C 4E 85 F1 | 	sub	fp, #12
29cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
29cf8     A8 01 90 5D |  if_ne	jmp	#LR__4248
29cfc     5C 4E 05 F1 | 	add	fp, #92
29d00     A7 12 02 FB | 	rdlong	arg01, fp
29d04     38 4E 05 F1 | 	add	fp, #56
29d08     A7 12 62 FC | 	wrlong	arg01, fp
29d0c     0D 12 06 F1 | 	add	arg01, #13
29d10     20 4E 85 F1 | 	sub	fp, #32
29d14     A7 14 02 F6 | 	mov	arg02, fp
29d18     74 4E 85 F1 | 	sub	fp, #116
29d1c     0D 14 06 F1 | 	add	arg02, #13
29d20     13 16 06 F6 | 	mov	arg03, #19
29d24     D8 29 BF FD | 	call	#__system____builtin_memmove
29d28     94 4E 05 F1 | 	add	fp, #148
29d2c     A7 1E 02 FB | 	rdlong	local01, fp
29d30     15 4E 85 F1 | 	sub	fp, #21
29d34     A7 FA C1 FA | 	rdbyte	result1, fp
29d38     0B 1E 06 F1 | 	add	local01, #11
29d3c     0F FB 41 FC | 	wrbyte	result1, local01
29d40     15 4E 05 F1 | 	add	fp, #21
29d44     A7 1E 02 FB | 	rdlong	local01, fp
29d48     94 4E 85 F1 | 	sub	fp, #148
29d4c     0B 1E 06 F1 | 	add	local01, #11
29d50     0F 1F C2 FA | 	rdbyte	local01, local01
29d54     10 1E CE F7 | 	test	local01, #16 wz
29d58     24 00 90 5D |  if_ne	jmp	#LR__4244
29d5c     94 4E 05 F1 | 	add	fp, #148
29d60     A7 FA 01 FB | 	rdlong	result1, fp
29d64     FD 1E 02 F6 | 	mov	local01, result1
29d68     94 4E 85 F1 | 	sub	fp, #148
29d6c     0B FA 05 F1 | 	add	result1, #11
29d70     FD FA C1 FA | 	rdbyte	result1, result1
29d74     20 FA 45 F5 | 	or	result1, #32
29d78     0B 1E 06 F1 | 	add	local01, #11
29d7c     0F FB 41 FC | 	wrbyte	result1, local01
29d80                 | LR__4244
29d80     70 4E 05 F1 | 	add	fp, #112
29d84     A7 1E 02 FB | 	rdlong	local01, fp
29d88     03 1E 06 F1 | 	add	local01, #3
29d8c     0F 03 48 FC | 	wrbyte	#1, local01
29d90     24 4E 05 F1 | 	add	fp, #36
29d94     A7 1E 02 FB | 	rdlong	local01, fp
29d98     94 4E 85 F1 | 	sub	fp, #148
29d9c     0B 1E 06 F1 | 	add	local01, #11
29da0     0F 1F C2 FA | 	rdbyte	local01, local01
29da4     10 1E CE F7 | 	test	local01, #16 wz
29da8     F8 00 90 AD |  if_e	jmp	#LR__4247
29dac     18 4E 05 F1 | 	add	fp, #24
29db0     A7 16 02 FB | 	rdlong	arg03, fp
29db4     30 4E 05 F1 | 	add	fp, #48
29db8     A7 1E 02 FB | 	rdlong	local01, fp
29dbc     48 4E 85 F1 | 	sub	fp, #72
29dc0     0F 17 0A F2 | 	cmp	arg03, local01 wz
29dc4     DC 00 90 AD |  if_e	jmp	#LR__4247
29dc8     70 4E 05 F1 | 	add	fp, #112
29dcc     A7 12 02 FB | 	rdlong	arg01, fp
29dd0     09 1F 02 F6 | 	mov	local01, arg01
29dd4     24 4E 05 F1 | 	add	fp, #36
29dd8     A7 14 02 FB | 	rdlong	arg02, fp
29ddc     94 4E 85 F1 | 	sub	fp, #148
29de0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
29de4     FD 14 02 F6 | 	mov	arg02, result1
29de8     0F 13 02 F6 | 	mov	arg01, local01
29dec     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
29df0     98 4E 05 F1 | 	add	fp, #152
29df4     A7 FA 61 FC | 	wrlong	result1, fp
29df8     00 FA 4D F2 | 	cmps	result1, #0 wz
29dfc     98 4E 85 F1 | 	sub	fp, #152
29e00     0C 4E 05 A1 |  if_e	add	fp, #12
29e04     A7 04 68 AC |  if_e	wrlong	#2, fp
29e08     0C 4E 85 A1 |  if_e	sub	fp, #12
29e0c     94 00 90 AD |  if_e	jmp	#LR__4246
29e10     70 4E 05 F1 | 	add	fp, #112
29e14     A7 12 02 FB | 	rdlong	arg01, fp
29e18     28 4E 05 F1 | 	add	fp, #40
29e1c     A7 14 02 FB | 	rdlong	arg02, fp
29e20     98 4E 85 F1 | 	sub	fp, #152
29e24     4C A0 BF FD | 	call	#_fatfs_cc_move_window
29e28     0C 4E 05 F1 | 	add	fp, #12
29e2c     A7 FA 61 FC | 	wrlong	result1, fp
29e30     64 4E 05 F1 | 	add	fp, #100
29e34     A7 1E 02 FB | 	rdlong	local01, fp
29e38     54 1E 06 F1 | 	add	local01, #84
29e3c     24 4E 05 F1 | 	add	fp, #36
29e40     A7 1E 62 FC | 	wrlong	local01, fp
29e44     88 4E 85 F1 | 	sub	fp, #136
29e48     A7 1E 0A FB | 	rdlong	local01, fp wz
29e4c     0C 4E 85 F1 | 	sub	fp, #12
29e50     50 00 90 5D |  if_ne	jmp	#LR__4245
29e54     94 4E 05 F1 | 	add	fp, #148
29e58     A7 1E 02 FB | 	rdlong	local01, fp
29e5c     94 4E 85 F1 | 	sub	fp, #148
29e60     01 1E 06 F1 | 	add	local01, #1
29e64     0F 1F C2 FA | 	rdbyte	local01, local01
29e68     2E 1E 0E F2 | 	cmp	local01, #46 wz
29e6c     34 00 90 5D |  if_ne	jmp	#LR__4245
29e70     70 4E 05 F1 | 	add	fp, #112
29e74     A7 12 02 FB | 	rdlong	arg01, fp
29e78     24 4E 05 F1 | 	add	fp, #36
29e7c     A7 14 02 FB | 	rdlong	arg02, fp
29e80     4C 4E 85 F1 | 	sub	fp, #76
29e84     A7 16 02 FB | 	rdlong	arg03, fp
29e88     48 4E 85 F1 | 	sub	fp, #72
29e8c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
29e90     70 4E 05 F1 | 	add	fp, #112
29e94     A7 1E 02 FB | 	rdlong	local01, fp
29e98     70 4E 85 F1 | 	sub	fp, #112
29e9c     03 1E 06 F1 | 	add	local01, #3
29ea0     0F 03 48 FC | 	wrbyte	#1, local01
29ea4                 | LR__4245
29ea4                 | LR__4246
29ea4                 | LR__4247
29ea4                 | LR__4248
29ea4                 | LR__4249
29ea4     0C 4E 05 F1 | 	add	fp, #12
29ea8     A7 1E 0A FB | 	rdlong	local01, fp wz
29eac     0C 4E 85 F1 | 	sub	fp, #12
29eb0     40 00 90 5D |  if_ne	jmp	#LR__4251
29eb4     10 4E 05 F1 | 	add	fp, #16
29eb8     A7 12 02 F6 | 	mov	arg01, fp
29ebc     10 4E 85 F1 | 	sub	fp, #16
29ec0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
29ec4     0C 4E 05 F1 | 	add	fp, #12
29ec8     A7 FA 61 FC | 	wrlong	result1, fp
29ecc     0C 4E 85 F1 | 	sub	fp, #12
29ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
29ed4     1C 00 90 5D |  if_ne	jmp	#LR__4250
29ed8     70 4E 05 F1 | 	add	fp, #112
29edc     A7 12 02 FB | 	rdlong	arg01, fp
29ee0     70 4E 85 F1 | 	sub	fp, #112
29ee4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
29ee8     0C 4E 05 F1 | 	add	fp, #12
29eec     A7 FA 61 FC | 	wrlong	result1, fp
29ef0     0C 4E 85 F1 | 	sub	fp, #12
29ef4                 | LR__4250
29ef4                 | LR__4251
29ef4                 | LR__4252
29ef4                 | LR__4253
29ef4                 | ' 					res = sync_fs(fs);
29ef4                 | ' 				}
29ef4                 | ' 			}
29ef4                 | ' 
29ef4                 | ' 		}
29ef4                 | ' 		;
29ef4                 | ' 	}
29ef4                 | ' 
29ef4                 | ' 	return res ;
29ef4     0C 4E 05 F1 | 	add	fp, #12
29ef8     A7 FA 01 FB | 	rdlong	result1, fp
29efc     0C 4E 85 F1 | 	sub	fp, #12
29f00     A7 F0 03 F6 | 	mov	ptra, fp
29f04     B2 00 A0 FD | 	call	#popregs_
29f08                 | _fatfs_cc_f_rename_ret
29f08     2D 00 64 FD | 	ret
29f0c                 | 
29f0c                 | _fatfs_cc_time
29f0c     00 4A 05 F6 | 	mov	COUNT_, #0
29f10     A8 00 A0 FD | 	call	#pushregs_
29f14     14 F0 07 F1 | 	add	ptra, #20
29f18     04 4E 05 F1 | 	add	fp, #4
29f1c     A7 12 62 FC | 	wrlong	arg01, fp
29f20     04 4E 05 F1 | 	add	fp, #4
29f24     A7 12 02 F6 | 	mov	arg01, fp
29f28     08 4E 85 F1 | 	sub	fp, #8
29f2c     00 14 06 F6 | 	mov	arg02, #0
29f30     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
29f34     08 4E 05 F1 | 	add	fp, #8
29f38     A7 FA 01 FB | 	rdlong	result1, fp
29f3c     08 4E 05 F1 | 	add	fp, #8
29f40     A7 FA 61 FC | 	wrlong	result1, fp
29f44     0C 4E 85 F1 | 	sub	fp, #12
29f48     A7 FA 09 FB | 	rdlong	result1, fp wz
29f4c     04 4E 85 F1 | 	sub	fp, #4
29f50     18 00 90 AD |  if_e	jmp	#LR__4260
29f54     04 4E 05 F1 | 	add	fp, #4
29f58     A7 FA 01 FB | 	rdlong	result1, fp
29f5c     0C 4E 05 F1 | 	add	fp, #12
29f60     A7 14 02 FB | 	rdlong	arg02, fp
29f64     10 4E 85 F1 | 	sub	fp, #16
29f68     FD 14 62 FC | 	wrlong	arg02, result1
29f6c                 | LR__4260
29f6c                 | '         *tp = now;
29f6c                 | '     return now;
29f6c     10 4E 05 F1 | 	add	fp, #16
29f70     A7 FA 01 FB | 	rdlong	result1, fp
29f74     10 4E 85 F1 | 	sub	fp, #16
29f78     A7 F0 03 F6 | 	mov	ptra, fp
29f7c     B2 00 A0 FD | 	call	#popregs_
29f80                 | _fatfs_cc_time_ret
29f80     2D 00 64 FD | 	ret
29f84                 | 
29f84                 | _fatfs_cc_mktime
29f84     06 4A 05 F6 | 	mov	COUNT_, #6
29f88     A8 00 A0 FD | 	call	#pushregs_
29f8c     09 1F 02 F6 | 	mov	local01, arg01
29f90     14 1E 06 F1 | 	add	local01, #20
29f94     0F 13 02 FB | 	rdlong	arg01, local01
29f98     14 1E 86 F1 | 	sub	local01, #20
29f9c     46 12 56 F2 | 	cmps	arg01, #70 wc
29fa0                 | '                 return (time_t) -1;
29fa0     01 FA 65 C6 |  if_b	neg	result1, #1
29fa4     7C 01 90 CD |  if_b	jmp	#LR__4274
29fa8     03 00 00 FF 
29fac     6C 21 06 F6 | 	mov	local02, ##1900
29fb0     14 1E 06 F1 | 	add	local01, #20
29fb4     0F FB 01 FB | 	rdlong	result1, local01
29fb8     FD 20 02 F1 | 	add	local02, result1
29fbc     08 1E 86 F1 | 	sub	local01, #8
29fc0     0F 23 02 FB | 	rdlong	local03, local01
29fc4     01 22 86 F1 | 	sub	local03, #1
29fc8     04 1E 06 F1 | 	add	local01, #4
29fcc     0F 13 02 FB | 	rdlong	arg01, local01
29fd0     10 1E 86 F1 | 	sub	local01, #16
29fd4     02 12 66 F0 | 	shl	arg01, #2
29fd8     02 00 00 FF 
29fdc     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
29fe0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29fe4     09 FB 01 FB | 	rdlong	result1, arg01
29fe8     FD 22 02 F1 | 	add	local03, result1
29fec     10 13 02 F6 | 	mov	arg01, local02
29ff0     02 00 00 FF 
29ff4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
29ff8     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
29ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a000     1C 00 90 AD |  if_e	jmp	#LR__4270
2a004     00 24 06 F6 | 	mov	local04, #0
2a008     10 1E 06 F1 | 	add	local01, #16
2a00c     0F FB 01 FB | 	rdlong	result1, local01
2a010     10 1E 86 F1 | 	sub	local01, #16
2a014     02 FA 55 F2 | 	cmps	result1, #2 wc
2a018     01 24 06 36 |  if_ae	mov	local04, #1
2a01c     04 00 90 FD | 	jmp	#LR__4271
2a020                 | LR__4270
2a020     00 24 06 F6 | 	mov	local04, #0
2a024                 | LR__4271
2a024     04 1E 06 F1 | 	add	local01, #4
2a028     0F FB 01 FB | 	rdlong	result1, local01
2a02c     04 1E 86 F1 | 	sub	local01, #4
2a030     0F 27 02 FB | 	rdlong	local05, local01
2a034     08 1E 06 F1 | 	add	local01, #8
2a038     0F 13 02 FB | 	rdlong	arg01, local01
2a03c     07 00 00 FF 
2a040     10 12 06 FD | 	qmul	arg01, ##3600
2a044     12 23 02 F1 | 	add	local03, local04
2a048     FD 24 02 F6 | 	mov	local04, result1
2a04c     04 24 66 F0 | 	shl	local04, #4
2a050     FD 24 82 F1 | 	sub	local04, result1
2a054     02 24 66 F0 | 	shl	local04, #2
2a058     12 27 02 F1 | 	add	local05, local04
2a05c     08 1E 86 F1 | 	sub	local01, #8
2a060     18 24 62 FD | 	getqx	local04
2a064     A8 00 00 FF 
2a068     80 23 06 FD | 	qmul	local03, ##86400
2a06c     12 27 02 F1 | 	add	local05, local04
2a070     10 23 02 F6 | 	mov	local03, local02
2a074     03 00 00 FF 
2a078     B2 23 86 F1 | 	sub	local03, ##1970
2a07c     18 24 62 FD | 	getqx	local04
2a080     99 F0 00 FF 
2a084     80 23 06 FD | 	qmul	local03, ##31536000
2a088     12 27 02 F1 | 	add	local05, local04
2a08c     10 23 02 F6 | 	mov	local03, local02
2a090     03 00 00 FF 
2a094     B1 23 86 F1 | 	sub	local03, ##1969
2a098     11 29 52 F6 | 	abs	local06, local03 wc
2a09c     02 28 46 F0 | 	shr	local06, #2
2a0a0     14 29 82 F6 | 	negc	local06, local06
2a0a4     03 00 00 FF 
2a0a8     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2a0ac     18 24 62 FD | 	getqx	local04
2a0b0     12 27 02 F1 | 	add	local05, local04
2a0b4     18 00 90 CD |  if_b	jmp	#LR__4272
2a0b8     03 00 00 FF 
2a0bc     D0 21 86 F1 | 	sub	local02, ##2000
2a0c0     10 25 52 F6 | 	abs	local04, local02 wc
2a0c4     64 24 16 FD | 	qdiv	local04, #100
2a0c8     18 24 62 FD | 	getqx	local04
2a0cc     12 29 A2 F3 | 	sumnc	local06, local04
2a0d0                 | LR__4272
2a0d0     A8 00 00 FF 
2a0d4     80 29 06 FD | 	qmul	local06, ##86400
2a0d8     18 28 62 FD | 	getqx	local06
2a0dc     14 27 02 F1 | 	add	local05, local06
2a0e0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2a0e4     02 00 00 FF 
2a0e8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2a0ec     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2a0f0     14 27 02 F1 | 	add	local05, local06
2a0f4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2a0f8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2a0fc     02 00 00 FF 
2a100     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2a104     01 22 0E F2 | 	cmp	local03, #1 wz
2a108     14 00 90 5D |  if_ne	jmp	#LR__4273
2a10c     0F 13 02 F6 | 	mov	arg01, local01
2a110     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2a114     00 FA 0D F2 | 	cmp	result1, #0 wz
2a118     07 00 00 5F 
2a11c     10 26 86 51 |  if_ne	sub	local05, ##3600
2a120                 | LR__4273
2a120                 | '                 s -=  (3600L) ;
2a120                 | ' 
2a120                 | '         return s;
2a120     13 FB 01 F6 | 	mov	result1, local05
2a124                 | LR__4274
2a124     A7 F0 03 F6 | 	mov	ptra, fp
2a128     B2 00 A0 FD | 	call	#popregs_
2a12c                 | _fatfs_cc_mktime_ret
2a12c     2D 00 64 FD | 	ret
2a130                 | 
2a130                 | _fatfs_cc__gmtime_r
2a130     03 4A 05 F6 | 	mov	COUNT_, #3
2a134     A8 00 A0 FD | 	call	#pushregs_
2a138     09 1F 02 FB | 	rdlong	local01, arg01
2a13c     A8 00 00 FF 
2a140     80 1F 16 FD | 	qdiv	local01, ##86400
2a144     18 FA 61 FD | 	getqx	result1
2a148     04 FA 05 F1 | 	add	result1, #4
2a14c     07 FA 15 FD | 	qdiv	result1, #7
2a150     18 14 06 F1 | 	add	arg02, #24
2a154     D1 7F 27 FF 
2a158     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2a15c     D1 7F 27 3F 
2a160     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2a164     03 00 00 3F 
2a168     DC 21 06 36 |  if_ae	mov	local02, ##2012
2a16c     03 00 00 CF 
2a170     B2 21 06 C6 |  if_b	mov	local02, ##1970
2a174                 | ' 	  year = 1970;
2a174                 | ' 	}
2a174                 | ' 
2a174                 | ' 	for(;;) {
2a174     19 FA 61 FD | 	getqy	result1
2a178     0A FB 61 FC | 	wrlong	result1, arg02
2a17c     18 14 86 F1 | 	sub	arg02, #24
2a180                 | LR__4280
2a180     10 13 02 F6 | 	mov	arg01, local02
2a184     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2a188     00 FA 0D F2 | 	cmp	result1, #0 wz
2a18c     42 F1 00 5F 
2a190     00 23 06 56 |  if_ne	mov	local03, ##31622400
2a194     99 F0 00 AF 
2a198     80 23 06 A6 |  if_e	mov	local03, ##31536000
2a19c     11 1F 12 F2 | 	cmp	local01, local03 wc
2a1a0                 | ' 	    break;
2a1a0     01 20 06 31 |  if_ae	add	local02, #1
2a1a4     11 1F 82 31 |  if_ae	sub	local01, local03
2a1a8     D4 FF 9F 3D |  if_ae	jmp	#LR__4280
2a1ac     A8 00 00 FF 
2a1b0     80 1F 16 FD | 	qdiv	local01, ##86400
2a1b4     10 23 02 F6 | 	mov	local03, local02
2a1b8     03 00 00 FF 
2a1bc     6C 23 86 F1 | 	sub	local03, ##1900
2a1c0     14 14 06 F1 | 	add	arg02, #20
2a1c4     0A 23 62 FC | 	wrlong	local03, arg02
2a1c8     08 14 06 F1 | 	add	arg02, #8
2a1cc     10 13 02 F6 | 	mov	arg01, local02
2a1d0     18 20 62 FD | 	getqx	local02
2a1d4     0A 21 62 FC | 	wrlong	local02, arg02
2a1d8     1C 14 86 F1 | 	sub	arg02, #28
2a1dc     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2a1e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a1e4     1D 22 06 56 |  if_ne	mov	local03, #29
2a1e8     1C 22 06 A6 |  if_e	mov	local03, #28
2a1ec     02 00 00 FF 
2a1f0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2a1f4     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2a1f8     02 00 00 FF 
2a1fc     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2a200                 | ' 
2a200                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2a200                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2a200     00 12 06 F6 | 	mov	arg01, #0
2a204     97 2A 48 FB | 	callpa	#(@LR__4282-@LR__4281)>>2,fcache_load_ptr_
2a208                 | LR__4281
2a208     09 23 02 F6 | 	mov	local03, arg01
2a20c     02 22 66 F0 | 	shl	local03, #2
2a210     02 00 00 FF 
2a214     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2a218     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2a21c     11 23 02 FB | 	rdlong	local03, local03
2a220     11 21 52 F2 | 	cmps	local02, local03 wc
2a224     02 00 00 FF 
2a228     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2a22c     2C 00 90 CD |  if_b	jmp	#LR__4283
2a230     09 23 02 F6 | 	mov	local03, arg01
2a234     02 22 66 F0 | 	shl	local03, #2
2a238     02 00 00 FF 
2a23c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2a240     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2a244     11 23 02 FB | 	rdlong	local03, local03
2a248     11 21 82 F1 | 	sub	local02, local03
2a24c     01 12 06 F1 | 	add	arg01, #1
2a250     02 00 00 FF 
2a254     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2a258     AC FF 9F FD | 	jmp	#LR__4281
2a25c                 | LR__4282
2a25c                 | LR__4283
2a25c     A8 00 00 FF 
2a260     80 1F 16 FD | 	qdiv	local01, ##86400
2a264     10 14 06 F1 | 	add	arg02, #16
2a268     0A 13 62 FC | 	wrlong	arg01, arg02
2a26c     01 20 06 F1 | 	add	local02, #1
2a270     04 14 86 F1 | 	sub	arg02, #4
2a274     0A 21 62 FC | 	wrlong	local02, arg02
2a278     19 1E 62 FD | 	getqy	local01
2a27c     07 00 00 FF 
2a280     10 1E 16 FD | 	qdiv	local01, ##3600
2a284     18 22 62 FD | 	getqx	local03
2a288     07 00 00 FF 
2a28c     10 1E 16 FD | 	qdiv	local01, ##3600
2a290     04 14 86 F1 | 	sub	arg02, #4
2a294     0A 23 62 FC | 	wrlong	local03, arg02
2a298     19 1E 62 FD | 	getqy	local01
2a29c     3C 1E 16 FD | 	qdiv	local01, #60
2a2a0     18 22 62 FD | 	getqx	local03
2a2a4     3C 1E 16 FD | 	qdiv	local01, #60
2a2a8     04 14 86 F1 | 	sub	arg02, #4
2a2ac     0A 23 62 FC | 	wrlong	local03, arg02
2a2b0     04 14 86 F1 | 	sub	arg02, #4
2a2b4                 | '         stm->tm_isdst = 0;
2a2b4                 | ' 
2a2b4                 | ' ;
2a2b4                 | '         return stm;
2a2b4     0A FB 01 F6 | 	mov	result1, arg02
2a2b8     19 22 62 FD | 	getqy	local03
2a2bc     0A 23 62 FC | 	wrlong	local03, arg02
2a2c0     20 14 06 F1 | 	add	arg02, #32
2a2c4     0A 01 68 FC | 	wrlong	#0, arg02
2a2c8     A7 F0 03 F6 | 	mov	ptra, fp
2a2cc     B2 00 A0 FD | 	call	#popregs_
2a2d0                 | _fatfs_cc__gmtime_r_ret
2a2d0     2D 00 64 FD | 	ret
2a2d4                 | 
2a2d4                 | _fatfs_cc__tzset
2a2d4     5F 01 00 FF 
2a2d8     19 12 06 F6 | 	mov	arg01, ##@LR__4595
2a2dc     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2a2e0     FD 12 02 F6 | 	mov	arg01, result1
2a2e4     02 00 00 FF 
2a2e8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2a2ec     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2a2f0     02 00 00 FF 
2a2f4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2a2f8     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2a2fc     02 00 00 FF 
2a300     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2a304     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2a308     02 00 00 FF 
2a30c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2a310                 | _fatfs_cc__tzset_ret
2a310     2D 00 64 FD | 	ret
2a314                 | 
2a314                 | _fatfs_cc_getenv
2a314     06 4A 05 F6 | 	mov	COUNT_, #6
2a318     A8 00 A0 FD | 	call	#pushregs_
2a31c     09 1F 02 F6 | 	mov	local01, arg01
2a320     09 21 02 F6 | 	mov	local02, arg01
2a324     97 06 48 FB | 	callpa	#(@LR__4291-@LR__4290)>>2,fcache_load_ptr_
2a328                 | LR__4290
2a328     10 FB C9 FA | 	rdbyte	result1, local02 wz
2a32c     01 20 06 51 |  if_ne	add	local02, #1
2a330     F4 FF 9F 5D |  if_ne	jmp	#LR__4290
2a334                 | LR__4291
2a334     09 21 82 F1 | 	sub	local02, arg01
2a338     10 FB 01 F6 | 	mov	result1, local02
2a33c     02 00 00 FF 
2a340     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2a344     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2a348     02 00 00 FF 
2a34c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2a350                 | '             return 0;
2a350     00 FA 05 A6 |  if_e	mov	result1, #0
2a354     5C 00 90 AD |  if_e	jmp	#LR__4294
2a358                 | ' 
2a358                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2a358     02 00 00 FF 
2a35c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2a360     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2a364     02 00 00 FF 
2a368     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2a36c                 | LR__4292
2a36c     11 25 0A FB | 	rdlong	local04, local03 wz
2a370     3C 00 90 AD |  if_e	jmp	#LR__4293
2a374     12 13 02 F6 | 	mov	arg01, local04
2a378     0F 15 02 F6 | 	mov	arg02, local01
2a37c     10 17 02 F6 | 	mov	arg03, local02
2a380     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2a384     00 FA 0D F2 | 	cmp	result1, #0 wz
2a388     10 27 02 A6 |  if_e	mov	local05, local02
2a38c     12 27 02 A1 |  if_e	add	local05, local04
2a390     13 29 C2 AA |  if_e	rdbyte	local06, local05
2a394     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2a398                 | ' 			return name+len+1;
2a398     10 25 02 A1 |  if_e	add	local04, local02
2a39c     01 24 06 A1 |  if_e	add	local04, #1
2a3a0     12 FB 01 A6 |  if_e	mov	result1, local04
2a3a4     0C 00 90 AD |  if_e	jmp	#LR__4294
2a3a8     04 22 06 F1 | 	add	local03, #4
2a3ac     BC FF 9F FD | 	jmp	#LR__4292
2a3b0                 | LR__4293
2a3b0                 | ' 	}
2a3b0                 | ' 	return 0;
2a3b0     00 FA 05 F6 | 	mov	result1, #0
2a3b4                 | LR__4294
2a3b4     A7 F0 03 F6 | 	mov	ptra, fp
2a3b8     B2 00 A0 FD | 	call	#popregs_
2a3bc                 | _fatfs_cc_getenv_ret
2a3bc     2D 00 64 FD | 	ret
2a3c0                 | 
2a3c0                 | _fatfs_cc__get_fattime
2a3c0     00 4A 05 F6 | 	mov	COUNT_, #0
2a3c4     A8 00 A0 FD | 	call	#pushregs_
2a3c8     34 F0 07 F1 | 	add	ptra, #52
2a3cc     00 12 06 F6 | 	mov	arg01, #0
2a3d0     38 FB BF FD | 	call	#_fatfs_cc_time
2a3d4     04 4E 05 F1 | 	add	fp, #4
2a3d8     A7 FA 61 FC | 	wrlong	result1, fp
2a3dc     A7 12 02 F6 | 	mov	arg01, fp
2a3e0     0C 4E 05 F1 | 	add	fp, #12
2a3e4     A7 14 02 F6 | 	mov	arg02, fp
2a3e8     10 4E 85 F1 | 	sub	fp, #16
2a3ec     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2a3f0     24 4E 05 F1 | 	add	fp, #36
2a3f4     A7 14 02 FB | 	rdlong	arg02, fp
2a3f8     50 14 86 F1 | 	sub	arg02, #80
2a3fc     09 14 66 F0 | 	shl	arg02, #9
2a400     04 4E 85 F1 | 	sub	fp, #4
2a404     A7 FA 01 FB | 	rdlong	result1, fp
2a408     01 FA 05 F1 | 	add	result1, #1
2a40c     05 FA 65 F0 | 	shl	result1, #5
2a410     FD 14 42 F5 | 	or	arg02, result1
2a414     04 4E 85 F1 | 	sub	fp, #4
2a418     A7 FA 01 FB | 	rdlong	result1, fp
2a41c     FD 14 42 F5 | 	or	arg02, result1
2a420     14 4E 85 F1 | 	sub	fp, #20
2a424     A7 14 62 FC | 	wrlong	arg02, fp
2a428     10 4E 05 F1 | 	add	fp, #16
2a42c     A7 14 02 FB | 	rdlong	arg02, fp
2a430     0B 14 66 F0 | 	shl	arg02, #11
2a434     04 4E 85 F1 | 	sub	fp, #4
2a438     A7 FA 01 FB | 	rdlong	result1, fp
2a43c     05 FA 65 F0 | 	shl	result1, #5
2a440     FD 14 42 F5 | 	or	arg02, result1
2a444     04 4E 85 F1 | 	sub	fp, #4
2a448     A7 FA 01 FB | 	rdlong	result1, fp
2a44c     FD 14 42 F5 | 	or	arg02, result1
2a450     04 4E 85 F1 | 	sub	fp, #4
2a454     A7 14 62 FC | 	wrlong	arg02, fp
2a458                 | ' 
2a458                 | '     now = time(0);
2a458                 | '     _gmtime_r (&now, &date);
2a458                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2a458                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2a458                 | '     return (ffdate << 16) | fftime;
2a458     04 4E 85 F1 | 	sub	fp, #4
2a45c     A7 FA 01 FB | 	rdlong	result1, fp
2a460     10 FA 65 F0 | 	shl	result1, #16
2a464     08 4E 85 F1 | 	sub	fp, #8
2a468     0A FB 41 F5 | 	or	result1, arg02
2a46c     A7 F0 03 F6 | 	mov	ptra, fp
2a470     B2 00 A0 FD | 	call	#popregs_
2a474                 | _fatfs_cc__get_fattime_ret
2a474     2D 00 64 FD | 	ret
2a478                 | 
2a478                 | _fatfs_cc_unixtime_0894
2a478     00 4A 05 F6 | 	mov	COUNT_, #0
2a47c     A8 00 A0 FD | 	call	#pushregs_
2a480     34 F0 07 F1 | 	add	ptra, #52
2a484     04 4E 05 F1 | 	add	fp, #4
2a488     A7 12 62 FC | 	wrlong	arg01, fp
2a48c     04 4E 05 F1 | 	add	fp, #4
2a490     A7 14 62 FC | 	wrlong	arg02, fp
2a494     04 4E 85 F1 | 	sub	fp, #4
2a498     A7 14 02 FB | 	rdlong	arg02, fp
2a49c     09 14 46 F0 | 	shr	arg02, #9
2a4a0     7F 14 06 F5 | 	and	arg02, #127
2a4a4     50 FA 05 F6 | 	mov	result1, #80
2a4a8     0A FB 01 F1 | 	add	result1, arg02
2a4ac     20 4E 05 F1 | 	add	fp, #32
2a4b0     A7 FA 61 FC | 	wrlong	result1, fp
2a4b4     20 4E 85 F1 | 	sub	fp, #32
2a4b8     A7 FA 01 FB | 	rdlong	result1, fp
2a4bc     05 FA 45 F0 | 	shr	result1, #5
2a4c0     FD FA 41 F8 | 	getnib	result1, result1, #0
2a4c4     01 FA 85 F1 | 	sub	result1, #1
2a4c8     1C 4E 05 F1 | 	add	fp, #28
2a4cc     A7 FA 61 FC | 	wrlong	result1, fp
2a4d0     1C 4E 85 F1 | 	sub	fp, #28
2a4d4     A7 FA 01 FB | 	rdlong	result1, fp
2a4d8     1F FA 05 F5 | 	and	result1, #31
2a4dc     18 4E 05 F1 | 	add	fp, #24
2a4e0     A7 FA 61 FC | 	wrlong	result1, fp
2a4e4     14 4E 85 F1 | 	sub	fp, #20
2a4e8     A7 FA 01 FB | 	rdlong	result1, fp
2a4ec     0B FA 45 F0 | 	shr	result1, #11
2a4f0     1F FA 05 F5 | 	and	result1, #31
2a4f4     10 4E 05 F1 | 	add	fp, #16
2a4f8     A7 FA 61 FC | 	wrlong	result1, fp
2a4fc     10 4E 85 F1 | 	sub	fp, #16
2a500     A7 FA 01 FB | 	rdlong	result1, fp
2a504     05 FA 45 F0 | 	shr	result1, #5
2a508     3F FA 05 F5 | 	and	result1, #63
2a50c     0C 4E 05 F1 | 	add	fp, #12
2a510     A7 FA 61 FC | 	wrlong	result1, fp
2a514     0C 4E 85 F1 | 	sub	fp, #12
2a518     A7 14 02 FB | 	rdlong	arg02, fp
2a51c     1F 14 06 F5 | 	and	arg02, #31
2a520     01 14 66 F0 | 	shl	arg02, #1
2a524     08 4E 05 F1 | 	add	fp, #8
2a528     A7 14 62 FC | 	wrlong	arg02, fp
2a52c     A7 12 02 F6 | 	mov	arg01, fp
2a530     10 4E 85 F1 | 	sub	fp, #16
2a534     4C FA BF FD | 	call	#_fatfs_cc_mktime
2a538     0C 4E 05 F1 | 	add	fp, #12
2a53c     A7 FA 61 FC | 	wrlong	result1, fp
2a540                 | ' 
2a540                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2a540                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2a540                 | '     date.tm_mday = (dosdate & 0x1f);
2a540                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2a540                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2a540                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2a540                 | ' 
2a540                 | '     t = mktime(&date);
2a540                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a540                 | '     return t;
2a540     0C 4E 85 F1 | 	sub	fp, #12
2a544     A7 F0 03 F6 | 	mov	ptra, fp
2a548     B2 00 A0 FD | 	call	#popregs_
2a54c                 | _fatfs_cc_unixtime_0894_ret
2a54c     2D 00 64 FD | 	ret
2a550                 | 
2a550                 | _fatfs_cc__set_dos_error_0896
2a550     09 01 02 F6 | 	mov	_var01, arg01
2a554                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a554                 | '     switch (derr) {
2a554     14 00 26 F3 | 	fle	_var01, #20
2a558     30 00 62 FD | 	jmprel	_var01
2a55c                 | LR__4300
2a55c     50 00 90 FD | 	jmp	#LR__4301
2a560     84 00 90 FD | 	jmp	#LR__4315
2a564     80 00 90 FD | 	jmp	#LR__4316
2a568     7C 00 90 FD | 	jmp	#LR__4317
2a56c     48 00 90 FD | 	jmp	#LR__4302
2a570     44 00 90 FD | 	jmp	#LR__4303
2a574     40 00 90 FD | 	jmp	#LR__4304
2a578     44 00 90 FD | 	jmp	#LR__4305
2a57c     48 00 90 FD | 	jmp	#LR__4307
2a580     54 00 90 FD | 	jmp	#LR__4310
2a584     38 00 90 FD | 	jmp	#LR__4306
2a588     4C 00 90 FD | 	jmp	#LR__4311
2a58c     48 00 90 FD | 	jmp	#LR__4312
2a590     44 00 90 FD | 	jmp	#LR__4313
2a594     50 00 90 FD | 	jmp	#LR__4318
2a598     4C 00 90 FD | 	jmp	#LR__4318
2a59c     48 00 90 FD | 	jmp	#LR__4318
2a5a0     2C 00 90 FD | 	jmp	#LR__4308
2a5a4     38 00 90 FD | 	jmp	#LR__4314
2a5a8     2C 00 90 FD | 	jmp	#LR__4309
2a5ac     38 00 90 FD | 	jmp	#LR__4318
2a5b0                 | LR__4301
2a5b0     00 02 06 F6 | 	mov	_var02, #0
2a5b4                 | '         r = 0;
2a5b4                 | '         break;
2a5b4     34 00 90 FD | 	jmp	#LR__4319
2a5b8                 | LR__4302
2a5b8                 | LR__4303
2a5b8                 | LR__4304
2a5b8     04 02 06 F6 | 	mov	_var02, #4
2a5bc                 | '         r =  4 ;
2a5bc                 | '         break;
2a5bc     2C 00 90 FD | 	jmp	#LR__4319
2a5c0                 | LR__4305
2a5c0                 | LR__4306
2a5c0     06 02 06 F6 | 	mov	_var02, #6
2a5c4                 | '         r =  6 ;
2a5c4                 | '         break;
2a5c4     24 00 90 FD | 	jmp	#LR__4319
2a5c8                 | LR__4307
2a5c8     09 02 06 F6 | 	mov	_var02, #9
2a5cc                 | '         r =  9 ;
2a5cc                 | '         break;
2a5cc     1C 00 90 FD | 	jmp	#LR__4319
2a5d0                 | LR__4308
2a5d0     07 02 06 F6 | 	mov	_var02, #7
2a5d4                 | '         r =  7 ;
2a5d4                 | '         break;
2a5d4     14 00 90 FD | 	jmp	#LR__4319
2a5d8                 | LR__4309
2a5d8                 | LR__4310
2a5d8                 | LR__4311
2a5d8                 | LR__4312
2a5d8                 | LR__4313
2a5d8     0A 02 06 F6 | 	mov	_var02, #10
2a5dc                 | '         r =  10 ;
2a5dc                 | '         break;
2a5dc     0C 00 90 FD | 	jmp	#LR__4319
2a5e0                 | LR__4314
2a5e0     0B 02 06 F6 | 	mov	_var02, #11
2a5e4                 | '         r =  11 ;
2a5e4                 | '         break;
2a5e4     04 00 90 FD | 	jmp	#LR__4319
2a5e8                 | LR__4315
2a5e8                 | LR__4316
2a5e8                 | LR__4317
2a5e8                 | LR__4318
2a5e8     0C 02 06 F6 | 	mov	_var02, #12
2a5ec                 | '         r =  12 ;
2a5ec                 | '         break;
2a5ec                 | LR__4319
2a5ec                 | '     }
2a5ec                 | '     return _seterror(r);
2a5ec     00 02 4E F2 | 	cmps	_var02, #0 wz
2a5f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a5f4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2a5f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a5fc     01 FA 65 56 |  if_ne	neg	result1, #1
2a600     00 FA 05 A6 |  if_e	mov	result1, #0
2a604                 | _fatfs_cc__set_dos_error_0896_ret
2a604     2D 00 64 FD | 	ret
2a608                 | 
2a608                 | _fatfs_cc_v_creat
2a608     04 4A 05 F6 | 	mov	COUNT_, #4
2a60c     A8 00 A0 FD | 	call	#pushregs_
2a610     09 1F 02 F6 | 	mov	local01, arg01
2a614     0A 21 02 F6 | 	mov	local02, arg02
2a618     03 00 00 FF 
2a61c     3C 12 06 F6 | 	mov	arg01, ##1596
2a620                 | '     return _gc_alloc(size);
2a620     10 14 06 F6 | 	mov	arg02, #16
2a624     30 60 BF FD | 	call	#__system___gc_doalloc
2a628     FD 22 0A F6 | 	mov	local03, result1 wz
2a62c                 | '       return _seterror( 7 );
2a62c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a630     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a634     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a638     01 FA 65 A6 |  if_e	neg	result1, #1
2a63c     58 00 90 AD |  if_e	jmp	#LR__4321
2a640     11 13 02 F6 | 	mov	arg01, local03
2a644     00 14 06 F6 | 	mov	arg02, #0
2a648     03 00 00 FF 
2a64c     3C 16 06 F6 | 	mov	arg03, ##1596
2a650     98 00 A0 FD | 	call	#\builtin_bytefill_
2a654     02 00 00 FF 
2a658     14 22 06 F1 | 	add	local03, ##1044
2a65c     11 13 02 F6 | 	mov	arg01, local03
2a660     02 00 00 FF 
2a664     14 22 86 F1 | 	sub	local03, ##1044
2a668     10 15 02 F6 | 	mov	arg02, local02
2a66c     07 16 06 F6 | 	mov	arg03, #7
2a670     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2a674     FD 24 0A F6 | 	mov	local04, result1 wz
2a678     14 00 90 AD |  if_e	jmp	#LR__4320
2a67c     11 13 02 F6 | 	mov	arg01, local03
2a680                 | '     return _gc_free(ptr);
2a680     E0 60 BF FD | 	call	#__system___gc_free
2a684                 | '     free(f);
2a684                 | '     return _set_dos_error(r);
2a684     12 13 02 F6 | 	mov	arg01, local04
2a688     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a68c     08 00 90 FD | 	jmp	#LR__4321
2a690                 | LR__4320
2a690     0F 23 62 FC | 	wrlong	local03, local01
2a694                 | '   }
2a694                 | '   fil->vfsdata = f;
2a694                 | '   return 0;
2a694     00 FA 05 F6 | 	mov	result1, #0
2a698                 | LR__4321
2a698     A7 F0 03 F6 | 	mov	ptra, fp
2a69c     B2 00 A0 FD | 	call	#popregs_
2a6a0                 | _fatfs_cc_v_creat_ret
2a6a0     2D 00 64 FD | 	ret
2a6a4                 | 
2a6a4                 | _fatfs_cc_v_close
2a6a4     02 4A 05 F6 | 	mov	COUNT_, #2
2a6a8     A8 00 A0 FD | 	call	#pushregs_
2a6ac     09 1F 02 FB | 	rdlong	local01, arg01
2a6b0     02 00 00 FF 
2a6b4     14 1E 06 F1 | 	add	local01, ##1044
2a6b8     0F 13 02 F6 | 	mov	arg01, local01
2a6bc     02 00 00 FF 
2a6c0     14 1E 86 F1 | 	sub	local01, ##1044
2a6c4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2a6c8     FD 20 02 F6 | 	mov	local02, result1
2a6cc     0F 13 02 F6 | 	mov	arg01, local01
2a6d0                 | '     return _gc_free(ptr);
2a6d0     90 60 BF FD | 	call	#__system___gc_free
2a6d4                 | '     FAT_FIL *f = fil->vfsdata;
2a6d4                 | '     r=f_close(&f->fil);
2a6d4                 | '     free(f);
2a6d4                 | '     return _set_dos_error(r);
2a6d4     10 13 02 F6 | 	mov	arg01, local02
2a6d8     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a6dc     A7 F0 03 F6 | 	mov	ptra, fp
2a6e0     B2 00 A0 FD | 	call	#popregs_
2a6e4                 | _fatfs_cc_v_close_ret
2a6e4     2D 00 64 FD | 	ret
2a6e8                 | 
2a6e8                 | _fatfs_cc_v_opendir
2a6e8     04 4A 05 F6 | 	mov	COUNT_, #4
2a6ec     A8 00 A0 FD | 	call	#pushregs_
2a6f0     09 1F 02 F6 | 	mov	local01, arg01
2a6f4     0A 21 02 F6 | 	mov	local02, arg02
2a6f8     30 12 06 F6 | 	mov	arg01, #48
2a6fc                 | '     return _gc_alloc(size);
2a6fc     10 14 06 F6 | 	mov	arg02, #16
2a700     54 5F BF FD | 	call	#__system___gc_doalloc
2a704     FD 22 0A F6 | 	mov	local03, result1 wz
2a708                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a708                 | '       return _seterror( 7 );
2a708     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a70c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a710     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a714     01 FA 65 A6 |  if_e	neg	result1, #1
2a718     34 00 90 AD |  if_e	jmp	#LR__4331
2a71c     10 15 02 F6 | 	mov	arg02, local02
2a720     11 13 02 F6 | 	mov	arg01, local03
2a724     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2a728     FD 24 0A F6 | 	mov	local04, result1 wz
2a72c     14 00 90 AD |  if_e	jmp	#LR__4330
2a730     11 13 02 F6 | 	mov	arg01, local03
2a734                 | '     return _gc_free(ptr);
2a734     2C 60 BF FD | 	call	#__system___gc_free
2a738                 | '         free(f);
2a738                 | '         return _set_dos_error(r);
2a738     12 13 02 F6 | 	mov	arg01, local04
2a73c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a740     0C 00 90 FD | 	jmp	#LR__4331
2a744                 | LR__4330
2a744     04 1E 06 F1 | 	add	local01, #4
2a748     0F 23 62 FC | 	wrlong	local03, local01
2a74c                 | '     }
2a74c                 | '     dir->vfsdata = f;
2a74c                 | '     return 0;
2a74c     00 FA 05 F6 | 	mov	result1, #0
2a750                 | LR__4331
2a750     A7 F0 03 F6 | 	mov	ptra, fp
2a754     B2 00 A0 FD | 	call	#popregs_
2a758                 | _fatfs_cc_v_opendir_ret
2a758     2D 00 64 FD | 	ret
2a75c                 | 
2a75c                 | _fatfs_cc_v_closedir
2a75c     02 4A 05 F6 | 	mov	COUNT_, #2
2a760     A8 00 A0 FD | 	call	#pushregs_
2a764     04 12 06 F1 | 	add	arg01, #4
2a768     09 1F 02 FB | 	rdlong	local01, arg01
2a76c     0F 13 02 F6 | 	mov	arg01, local01
2a770     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2a774     FD 20 02 F6 | 	mov	local02, result1
2a778     0F 13 02 F6 | 	mov	arg01, local01
2a77c                 | '     return _gc_free(ptr);
2a77c     E4 5F BF FD | 	call	#__system___gc_free
2a780     00 20 0E F2 | 	cmp	local02, #0 wz
2a784     10 13 02 56 |  if_ne	mov	arg01, local02
2a788     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0896
2a78c                 | '     return r;
2a78c     10 FB 01 F6 | 	mov	result1, local02
2a790     A7 F0 03 F6 | 	mov	ptra, fp
2a794     B2 00 A0 FD | 	call	#popregs_
2a798                 | _fatfs_cc_v_closedir_ret
2a798     2D 00 64 FD | 	ret
2a79c                 | 
2a79c                 | _fatfs_cc_v_readdir
2a79c     01 4A 05 F6 | 	mov	COUNT_, #1
2a7a0     A8 00 A0 FD | 	call	#pushregs_
2a7a4     2C F1 07 F1 | 	add	ptra, #300
2a7a8     04 4E 05 F1 | 	add	fp, #4
2a7ac     A7 12 62 FC | 	wrlong	arg01, fp
2a7b0     04 4E 05 F1 | 	add	fp, #4
2a7b4     A7 14 62 FC | 	wrlong	arg02, fp
2a7b8     04 4E 85 F1 | 	sub	fp, #4
2a7bc     A7 16 02 FB | 	rdlong	arg03, fp
2a7c0     04 16 06 F1 | 	add	arg03, #4
2a7c4     0B 13 02 FB | 	rdlong	arg01, arg03
2a7c8     08 4E 05 F1 | 	add	fp, #8
2a7cc     A7 14 02 F6 | 	mov	arg02, fp
2a7d0     0C 4E 85 F1 | 	sub	fp, #12
2a7d4     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2a7d8     28 4F 05 F1 | 	add	fp, #296
2a7dc     A7 FA 61 FC | 	wrlong	result1, fp
2a7e0     28 4F 85 F1 | 	sub	fp, #296
2a7e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a7e8     14 00 90 AD |  if_e	jmp	#LR__4340
2a7ec                 | '         return _set_dos_error(r);
2a7ec     28 4F 05 F1 | 	add	fp, #296
2a7f0     A7 12 02 FB | 	rdlong	arg01, fp
2a7f4     28 4F 85 F1 | 	sub	fp, #296
2a7f8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a7fc     C4 00 90 FD | 	jmp	#LR__4343
2a800                 | LR__4340
2a800     28 4E 05 F1 | 	add	fp, #40
2a804     A7 16 CA FA | 	rdbyte	arg03, fp wz
2a808     28 4E 85 F1 | 	sub	fp, #40
2a80c                 | '         return -1;
2a80c     01 FA 65 A6 |  if_e	neg	result1, #1
2a810     B0 00 90 AD |  if_e	jmp	#LR__4343
2a814     08 4E 05 F1 | 	add	fp, #8
2a818     A7 12 02 FB | 	rdlong	arg01, fp
2a81c     20 4E 05 F1 | 	add	fp, #32
2a820     A7 14 02 F6 | 	mov	arg02, fp
2a824     28 4E 85 F1 | 	sub	fp, #40
2a828     3F 16 06 F6 | 	mov	arg03, #63
2a82c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2a830     08 4E 05 F1 | 	add	fp, #8
2a834     A7 16 02 FB | 	rdlong	arg03, fp
2a838     3F 16 06 F1 | 	add	arg03, #63
2a83c     0B 01 48 FC | 	wrbyte	#0, arg03
2a840     0C 4E 05 F1 | 	add	fp, #12
2a844     A7 16 C2 FA | 	rdbyte	arg03, fp
2a848     14 4E 85 F1 | 	sub	fp, #20
2a84c     10 16 CE F7 | 	test	arg03, #16 wz
2a850     18 00 90 AD |  if_e	jmp	#LR__4341
2a854     08 4E 05 F1 | 	add	fp, #8
2a858     A7 16 02 FB | 	rdlong	arg03, fp
2a85c     08 4E 85 F1 | 	sub	fp, #8
2a860     50 16 06 F1 | 	add	arg03, #80
2a864     0B 03 48 FC | 	wrbyte	#1, arg03
2a868     14 00 90 FD | 	jmp	#LR__4342
2a86c                 | LR__4341
2a86c     08 4E 05 F1 | 	add	fp, #8
2a870     A7 16 02 FB | 	rdlong	arg03, fp
2a874     08 4E 85 F1 | 	sub	fp, #8
2a878     50 16 06 F1 | 	add	arg03, #80
2a87c     0B 01 48 FC | 	wrbyte	#0, arg03
2a880                 | LR__4342
2a880     08 4E 05 F1 | 	add	fp, #8
2a884     A7 16 02 FB | 	rdlong	arg03, fp
2a888     04 4E 05 F1 | 	add	fp, #4
2a88c     A7 14 02 FB | 	rdlong	arg02, fp
2a890     48 16 06 F1 | 	add	arg03, #72
2a894     0B 15 62 FC | 	wrlong	arg02, arg03
2a898     04 4E 85 F1 | 	sub	fp, #4
2a89c     A7 1E 02 FB | 	rdlong	local01, fp
2a8a0     08 4E 05 F1 | 	add	fp, #8
2a8a4     A7 12 E2 FA | 	rdword	arg01, fp
2a8a8     02 4E 05 F1 | 	add	fp, #2
2a8ac     A7 14 E2 FA | 	rdword	arg02, fp
2a8b0     12 4E 85 F1 | 	sub	fp, #18
2a8b4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0894
2a8b8     4C 1E 06 F1 | 	add	local01, #76
2a8bc     0F FB 61 FC | 	wrlong	result1, local01
2a8c0                 | '         ent->d_type =  (0) ;
2a8c0                 | '     }
2a8c0                 | '     ent->d_size = finfo.fsize;
2a8c0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2a8c0                 | '     return 0;
2a8c0     00 FA 05 F6 | 	mov	result1, #0
2a8c4                 | LR__4343
2a8c4     A7 F0 03 F6 | 	mov	ptra, fp
2a8c8     B2 00 A0 FD | 	call	#popregs_
2a8cc                 | _fatfs_cc_v_readdir_ret
2a8cc     2D 00 64 FD | 	ret
2a8d0                 | 
2a8d0                 | _fatfs_cc_v_stat
2a8d0     03 4A 05 F6 | 	mov	COUNT_, #3
2a8d4     A8 00 A0 FD | 	call	#pushregs_
2a8d8     30 F1 07 F1 | 	add	ptra, #304
2a8dc     04 4E 05 F1 | 	add	fp, #4
2a8e0     A7 12 62 FC | 	wrlong	arg01, fp
2a8e4     04 4E 05 F1 | 	add	fp, #4
2a8e8     A7 14 62 FC | 	wrlong	arg02, fp
2a8ec     08 4E 85 F1 | 	sub	fp, #8
2a8f0     0A 13 02 F6 | 	mov	arg01, arg02
2a8f4     00 14 06 F6 | 	mov	arg02, #0
2a8f8     30 16 06 F6 | 	mov	arg03, #48
2a8fc     98 00 A0 FD | 	call	#\builtin_bytefill_
2a900     04 4E 05 F1 | 	add	fp, #4
2a904     A7 FA 01 FB | 	rdlong	result1, fp
2a908     04 4E 85 F1 | 	sub	fp, #4
2a90c     FD FA C9 FA | 	rdbyte	result1, result1 wz
2a910     2C 00 90 AD |  if_e	jmp	#LR__4350
2a914     04 4E 05 F1 | 	add	fp, #4
2a918     A7 FA 01 FB | 	rdlong	result1, fp
2a91c     04 4E 85 F1 | 	sub	fp, #4
2a920     FD FA C1 FA | 	rdbyte	result1, result1
2a924     2E FA 0D F2 | 	cmp	result1, #46 wz
2a928     04 4E 05 A1 |  if_e	add	fp, #4
2a92c     A7 1E 02 AB |  if_e	rdlong	local01, fp
2a930     04 4E 85 A1 |  if_e	sub	fp, #4
2a934     01 1E 06 A1 |  if_e	add	local01, #1
2a938     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2a93c     18 00 90 5D |  if_ne	jmp	#LR__4351
2a940                 | LR__4350
2a940     18 4E 05 F1 | 	add	fp, #24
2a944     A7 20 48 FC | 	wrbyte	#16, fp
2a948     0C 4E 85 F1 | 	sub	fp, #12
2a94c     A7 00 68 FC | 	wrlong	#0, fp
2a950     0C 4E 85 F1 | 	sub	fp, #12
2a954     24 00 90 FD | 	jmp	#LR__4352
2a958                 | LR__4351
2a958     04 4E 05 F1 | 	add	fp, #4
2a95c     A7 12 02 FB | 	rdlong	arg01, fp
2a960     0C 4E 05 F1 | 	add	fp, #12
2a964     A7 14 02 F6 | 	mov	arg02, fp
2a968     10 4E 85 F1 | 	sub	fp, #16
2a96c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2a970     0C 4E 05 F1 | 	add	fp, #12
2a974     A7 FA 61 FC | 	wrlong	result1, fp
2a978     0C 4E 85 F1 | 	sub	fp, #12
2a97c                 | LR__4352
2a97c     0C 4E 05 F1 | 	add	fp, #12
2a980     A7 20 0A FB | 	rdlong	local02, fp wz
2a984     0C 4E 85 F1 | 	sub	fp, #12
2a988     14 00 90 AD |  if_e	jmp	#LR__4353
2a98c                 | '         return _set_dos_error(r);
2a98c     0C 4E 05 F1 | 	add	fp, #12
2a990     A7 12 02 FB | 	rdlong	arg01, fp
2a994     0C 4E 85 F1 | 	sub	fp, #12
2a998     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a99c     14 01 90 FD | 	jmp	#LR__4354
2a9a0                 | LR__4353
2a9a0     2C 4F 05 F1 | 	add	fp, #300
2a9a4     A7 48 6A FC | 	wrlong	#292, fp
2a9a8     14 4F 85 F1 | 	sub	fp, #276
2a9ac     A7 22 C2 FA | 	rdbyte	local03, fp
2a9b0     18 4E 85 F1 | 	sub	fp, #24
2a9b4     01 22 CE F7 | 	test	local03, #1 wz
2a9b8     2C 4F 05 A1 |  if_e	add	fp, #300
2a9bc     A7 22 02 AB |  if_e	rdlong	local03, fp
2a9c0     92 22 46 A5 |  if_e	or	local03, #146
2a9c4     A7 22 62 AC |  if_e	wrlong	local03, fp
2a9c8     2C 4F 85 A1 |  if_e	sub	fp, #300
2a9cc     18 4E 05 F1 | 	add	fp, #24
2a9d0     A7 22 C2 FA | 	rdbyte	local03, fp
2a9d4     18 4E 85 F1 | 	sub	fp, #24
2a9d8     10 22 CE F7 | 	test	local03, #16 wz
2a9dc     2C 4F 05 51 |  if_ne	add	fp, #300
2a9e0     A7 22 02 5B |  if_ne	rdlong	local03, fp
2a9e4     08 00 00 5F 
2a9e8     49 22 46 55 |  if_ne	or	local03, ##4169
2a9ec     A7 22 62 5C |  if_ne	wrlong	local03, fp
2a9f0     2C 4F 85 51 |  if_ne	sub	fp, #300
2a9f4     08 4E 05 F1 | 	add	fp, #8
2a9f8     A7 22 02 FB | 	rdlong	local03, fp
2a9fc     24 4F 05 F1 | 	add	fp, #292
2aa00     A7 20 02 FB | 	rdlong	local02, fp
2aa04     08 22 06 F1 | 	add	local03, #8
2aa08     11 21 62 FC | 	wrlong	local02, local03
2aa0c     24 4F 85 F1 | 	sub	fp, #292
2aa10     A7 22 02 FB | 	rdlong	local03, fp
2aa14     0C 22 06 F1 | 	add	local03, #12
2aa18     11 03 68 FC | 	wrlong	#1, local03
2aa1c     A7 22 02 FB | 	rdlong	local03, fp
2aa20     08 4E 05 F1 | 	add	fp, #8
2aa24     A7 20 02 FB | 	rdlong	local02, fp
2aa28     18 22 06 F1 | 	add	local03, #24
2aa2c     11 21 62 FC | 	wrlong	local02, local03
2aa30     08 4E 85 F1 | 	sub	fp, #8
2aa34     A7 22 02 FB | 	rdlong	local03, fp
2aa38     1C 22 06 F1 | 	add	local03, #28
2aa3c     01 00 80 FF 
2aa40     11 01 68 FC | 	wrlong	##512, local03
2aa44     A7 20 02 FB | 	rdlong	local02, fp
2aa48     10 23 02 F6 | 	mov	local03, local02
2aa4c     18 20 06 F1 | 	add	local02, #24
2aa50     10 21 02 FB | 	rdlong	local02, local02
2aa54     FF 21 06 F1 | 	add	local02, #511
2aa58     10 21 52 F6 | 	abs	local02, local02 wc
2aa5c     09 20 46 F0 | 	shr	local02, #9
2aa60     10 21 82 F6 | 	negc	local02, local02
2aa64     20 22 06 F1 | 	add	local03, #32
2aa68     11 21 62 FC | 	wrlong	local02, local03
2aa6c     A7 20 02 FB | 	rdlong	local02, fp
2aa70     10 23 02 F6 | 	mov	local03, local02
2aa74     10 1F 02 F6 | 	mov	local01, local02
2aa78     0C 4E 05 F1 | 	add	fp, #12
2aa7c     A7 12 E2 FA | 	rdword	arg01, fp
2aa80     02 4E 05 F1 | 	add	fp, #2
2aa84     A7 14 E2 FA | 	rdword	arg02, fp
2aa88     16 4E 85 F1 | 	sub	fp, #22
2aa8c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0894
2aa90     2C 1E 06 F1 | 	add	local01, #44
2aa94     0F FB 61 FC | 	wrlong	result1, local01
2aa98     28 20 06 F1 | 	add	local02, #40
2aa9c     10 FB 61 FC | 	wrlong	result1, local02
2aaa0     24 22 06 F1 | 	add	local03, #36
2aaa4     11 FB 61 FC | 	wrlong	result1, local03
2aaa8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2aaa8                 | '     }
2aaa8                 | '     buf->st_mode = mode;
2aaa8                 | '     buf->st_nlink = 1;
2aaa8                 | '     buf->st_size = finfo.fsize;
2aaa8                 | '     buf->st_blksize = 512;
2aaa8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2aaa8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2aaa8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2aaa8                 | '     return r;
2aaa8     0C 4E 05 F1 | 	add	fp, #12
2aaac     A7 FA 01 FB | 	rdlong	result1, fp
2aab0     0C 4E 85 F1 | 	sub	fp, #12
2aab4                 | LR__4354
2aab4     A7 F0 03 F6 | 	mov	ptra, fp
2aab8     B2 00 A0 FD | 	call	#popregs_
2aabc                 | _fatfs_cc_v_stat_ret
2aabc     2D 00 64 FD | 	ret
2aac0                 | 
2aac0                 | _fatfs_cc_v_read
2aac0     00 4A 05 F6 | 	mov	COUNT_, #0
2aac4     A8 00 A0 FD | 	call	#pushregs_
2aac8     1C F0 07 F1 | 	add	ptra, #28
2aacc     04 4E 05 F1 | 	add	fp, #4
2aad0     A7 12 62 FC | 	wrlong	arg01, fp
2aad4     04 4E 05 F1 | 	add	fp, #4
2aad8     A7 14 62 FC | 	wrlong	arg02, fp
2aadc     04 4E 05 F1 | 	add	fp, #4
2aae0     A7 16 62 FC | 	wrlong	arg03, fp
2aae4     08 4E 85 F1 | 	sub	fp, #8
2aae8     A7 12 02 FB | 	rdlong	arg01, fp
2aaec     09 13 0A FB | 	rdlong	arg01, arg01 wz
2aaf0     0C 4E 05 F1 | 	add	fp, #12
2aaf4     A7 12 62 FC | 	wrlong	arg01, fp
2aaf8     10 4E 85 F1 | 	sub	fp, #16
2aafc                 | '         return _seterror( 5 );
2aafc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ab00     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ab04     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ab08     01 FA 65 A6 |  if_e	neg	result1, #1
2ab0c     B8 00 90 AD |  if_e	jmp	#LR__4362
2ab10     10 4E 05 F1 | 	add	fp, #16
2ab14     A7 12 02 FB | 	rdlong	arg01, fp
2ab18     02 00 00 FF 
2ab1c     14 12 06 F1 | 	add	arg01, ##1044
2ab20     08 4E 85 F1 | 	sub	fp, #8
2ab24     A7 14 02 FB | 	rdlong	arg02, fp
2ab28     04 4E 05 F1 | 	add	fp, #4
2ab2c     A7 16 02 FB | 	rdlong	arg03, fp
2ab30     0C 4E 05 F1 | 	add	fp, #12
2ab34     A7 18 02 F6 | 	mov	arg04, fp
2ab38     18 4E 85 F1 | 	sub	fp, #24
2ab3c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2ab40     14 4E 05 F1 | 	add	fp, #20
2ab44     A7 FA 61 FC | 	wrlong	result1, fp
2ab48     14 4E 85 F1 | 	sub	fp, #20
2ab4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab50     34 00 90 AD |  if_e	jmp	#LR__4360
2ab54     04 4E 05 F1 | 	add	fp, #4
2ab58     A7 18 02 FB | 	rdlong	arg04, fp
2ab5c     0C 17 02 F6 | 	mov	arg03, arg04
2ab60     08 18 06 F1 | 	add	arg04, #8
2ab64     0C 19 02 FB | 	rdlong	arg04, arg04
2ab68     20 18 46 F5 | 	or	arg04, #32
2ab6c     08 16 06 F1 | 	add	arg03, #8
2ab70     0B 19 62 FC | 	wrlong	arg04, arg03
2ab74                 | '         fil->state |=  (0x20) ;
2ab74                 | '         return _set_dos_error(r);
2ab74     10 4E 05 F1 | 	add	fp, #16
2ab78     A7 12 02 FB | 	rdlong	arg01, fp
2ab7c     14 4E 85 F1 | 	sub	fp, #20
2ab80     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2ab84     40 00 90 FD | 	jmp	#LR__4362
2ab88                 | LR__4360
2ab88     18 4E 05 F1 | 	add	fp, #24
2ab8c     A7 FA 09 FB | 	rdlong	result1, fp wz
2ab90     18 4E 85 F1 | 	sub	fp, #24
2ab94     24 00 90 5D |  if_ne	jmp	#LR__4361
2ab98     04 4E 05 F1 | 	add	fp, #4
2ab9c     A7 FA 01 FB | 	rdlong	result1, fp
2aba0     FD 18 02 F6 | 	mov	arg04, result1
2aba4     04 4E 85 F1 | 	sub	fp, #4
2aba8     08 FA 05 F1 | 	add	result1, #8
2abac     FD FA 01 FB | 	rdlong	result1, result1
2abb0     10 FA 45 F5 | 	or	result1, #16
2abb4     08 18 06 F1 | 	add	arg04, #8
2abb8     0C FB 61 FC | 	wrlong	result1, arg04
2abbc                 | LR__4361
2abbc                 | '         fil->state |=  (0x10) ;
2abbc                 | '     }
2abbc                 | '     return x;
2abbc     18 4E 05 F1 | 	add	fp, #24
2abc0     A7 FA 01 FB | 	rdlong	result1, fp
2abc4     18 4E 85 F1 | 	sub	fp, #24
2abc8                 | LR__4362
2abc8     A7 F0 03 F6 | 	mov	ptra, fp
2abcc     B2 00 A0 FD | 	call	#popregs_
2abd0                 | _fatfs_cc_v_read_ret
2abd0     2D 00 64 FD | 	ret
2abd4                 | 
2abd4                 | _fatfs_cc_v_write
2abd4     00 4A 05 F6 | 	mov	COUNT_, #0
2abd8     A8 00 A0 FD | 	call	#pushregs_
2abdc     1C F0 07 F1 | 	add	ptra, #28
2abe0     04 4E 05 F1 | 	add	fp, #4
2abe4     A7 12 62 FC | 	wrlong	arg01, fp
2abe8     04 4E 05 F1 | 	add	fp, #4
2abec     A7 14 62 FC | 	wrlong	arg02, fp
2abf0     04 4E 05 F1 | 	add	fp, #4
2abf4     A7 16 62 FC | 	wrlong	arg03, fp
2abf8     08 4E 85 F1 | 	sub	fp, #8
2abfc     A7 12 02 FB | 	rdlong	arg01, fp
2ac00     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ac04     0C 4E 05 F1 | 	add	fp, #12
2ac08     A7 12 62 FC | 	wrlong	arg01, fp
2ac0c     10 4E 85 F1 | 	sub	fp, #16
2ac10                 | '         return _seterror( 5 );
2ac10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ac14     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ac18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ac1c     01 FA 65 A6 |  if_e	neg	result1, #1
2ac20     84 00 90 AD |  if_e	jmp	#LR__4371
2ac24     10 4E 05 F1 | 	add	fp, #16
2ac28     A7 12 02 FB | 	rdlong	arg01, fp
2ac2c     02 00 00 FF 
2ac30     14 12 06 F1 | 	add	arg01, ##1044
2ac34     08 4E 85 F1 | 	sub	fp, #8
2ac38     A7 14 02 FB | 	rdlong	arg02, fp
2ac3c     04 4E 05 F1 | 	add	fp, #4
2ac40     A7 16 02 FB | 	rdlong	arg03, fp
2ac44     0C 4E 05 F1 | 	add	fp, #12
2ac48     A7 18 02 F6 | 	mov	arg04, fp
2ac4c     18 4E 85 F1 | 	sub	fp, #24
2ac50     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2ac54     14 4E 05 F1 | 	add	fp, #20
2ac58     A7 FA 61 FC | 	wrlong	result1, fp
2ac5c     14 4E 85 F1 | 	sub	fp, #20
2ac60     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac64     34 00 90 AD |  if_e	jmp	#LR__4370
2ac68     04 4E 05 F1 | 	add	fp, #4
2ac6c     A7 18 02 FB | 	rdlong	arg04, fp
2ac70     0C 17 02 F6 | 	mov	arg03, arg04
2ac74     08 18 06 F1 | 	add	arg04, #8
2ac78     0C 19 02 FB | 	rdlong	arg04, arg04
2ac7c     20 18 46 F5 | 	or	arg04, #32
2ac80     08 16 06 F1 | 	add	arg03, #8
2ac84     0B 19 62 FC | 	wrlong	arg04, arg03
2ac88                 | '         fil->state |=  (0x20) ;
2ac88                 | '         return _set_dos_error(r);
2ac88     10 4E 05 F1 | 	add	fp, #16
2ac8c     A7 12 02 FB | 	rdlong	arg01, fp
2ac90     14 4E 85 F1 | 	sub	fp, #20
2ac94     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2ac98     0C 00 90 FD | 	jmp	#LR__4371
2ac9c                 | LR__4370
2ac9c                 | '     }
2ac9c                 | '     return x;
2ac9c     18 4E 05 F1 | 	add	fp, #24
2aca0     A7 FA 01 FB | 	rdlong	result1, fp
2aca4     18 4E 85 F1 | 	sub	fp, #24
2aca8                 | LR__4371
2aca8     A7 F0 03 F6 | 	mov	ptra, fp
2acac     B2 00 A0 FD | 	call	#popregs_
2acb0                 | _fatfs_cc_v_write_ret
2acb0     2D 00 64 FD | 	ret
2acb4                 | 
2acb4                 | _fatfs_cc_v_lseek
2acb4     04 4A 05 F6 | 	mov	COUNT_, #4
2acb8     A8 00 A0 FD | 	call	#pushregs_
2acbc     0A 1F 02 F6 | 	mov	local01, arg02
2acc0     0B 21 02 F6 | 	mov	local02, arg03
2acc4     09 23 02 FB | 	rdlong	local03, arg01
2acc8     02 00 00 FF 
2accc     14 22 0E F1 | 	add	local03, ##1044 wz
2acd0                 | '         return _seterror( 5 );
2acd0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2acd4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2acd8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2acdc     01 FA 65 A6 |  if_e	neg	result1, #1
2ace0     4C 00 90 AD |  if_e	jmp	#LR__4382
2ace4     00 20 0E F2 | 	cmp	local02, #0 wz
2ace8     24 00 90 AD |  if_e	jmp	#LR__4380
2acec     01 20 0E F2 | 	cmp	local02, #1 wz
2acf0     14 22 06 A1 |  if_e	add	local03, #20
2acf4     11 25 02 AB |  if_e	rdlong	local04, local03
2acf8     14 22 86 A1 |  if_e	sub	local03, #20
2acfc     12 1F 02 A1 |  if_e	add	local01, local04
2ad00     0C 22 06 51 |  if_ne	add	local03, #12
2ad04     11 25 02 5B |  if_ne	rdlong	local04, local03
2ad08     0C 22 86 51 |  if_ne	sub	local03, #12
2ad0c     12 1F 02 51 |  if_ne	add	local01, local04
2ad10                 | LR__4380
2ad10     0F 15 02 F6 | 	mov	arg02, local01
2ad14     11 13 02 F6 | 	mov	arg01, local03
2ad18     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2ad1c     FD 12 0A F6 | 	mov	arg01, result1 wz
2ad20     08 00 90 AD |  if_e	jmp	#LR__4381
2ad24                 | '         return _set_dos_error(result);
2ad24     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2ad28     04 00 90 FD | 	jmp	#LR__4382
2ad2c                 | LR__4381
2ad2c                 | '     }
2ad2c                 | '     return offset;
2ad2c     0F FB 01 F6 | 	mov	result1, local01
2ad30                 | LR__4382
2ad30     A7 F0 03 F6 | 	mov	ptra, fp
2ad34     B2 00 A0 FD | 	call	#popregs_
2ad38                 | _fatfs_cc_v_lseek_ret
2ad38     2D 00 64 FD | 	ret
2ad3c                 | 
2ad3c                 | _fatfs_cc_v_ioctl
2ad3c                 | ' {
2ad3c                 | '     return _seterror( 10 );
2ad3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ad40     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2ad44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ad48     01 FA 65 F6 | 	neg	result1, #1
2ad4c                 | _fatfs_cc_v_ioctl_ret
2ad4c     2D 00 64 FD | 	ret
2ad50                 | 
2ad50                 | _fatfs_cc_v_mkdir
2ad50     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2ad54     FD 12 02 F6 | 	mov	arg01, result1
2ad58                 | ' 
2ad58                 | '     r = f_mkdir(name);
2ad58                 | '     return _set_dos_error(r);
2ad58     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2ad5c                 | _fatfs_cc_v_mkdir_ret
2ad5c     2D 00 64 FD | 	ret
2ad60                 | 
2ad60                 | _fatfs_cc_v_remove
2ad60     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2ad64     FD 12 02 F6 | 	mov	arg01, result1
2ad68                 | ' 
2ad68                 | '     r = f_unlink(name);
2ad68                 | '     return _set_dos_error(r);
2ad68     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2ad6c                 | _fatfs_cc_v_remove_ret
2ad6c     2D 00 64 FD | 	ret
2ad70                 | 
2ad70                 | _fatfs_cc_v_rmdir
2ad70     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2ad74     FD 12 02 F6 | 	mov	arg01, result1
2ad78                 | ' 
2ad78                 | '     r = f_unlink(name);
2ad78                 | '     return _set_dos_error(r);
2ad78     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2ad7c                 | _fatfs_cc_v_rmdir_ret
2ad7c     2D 00 64 FD | 	ret
2ad80                 | 
2ad80                 | _fatfs_cc_v_rename
2ad80     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2ad84     FD 12 02 F6 | 	mov	arg01, result1
2ad88                 | '     return _set_dos_error(r);
2ad88     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2ad8c                 | _fatfs_cc_v_rename_ret
2ad8c     2D 00 64 FD | 	ret
2ad90                 | 
2ad90                 | _fatfs_cc_v_open
2ad90     07 4A 05 F6 | 	mov	COUNT_, #7
2ad94     A8 00 A0 FD | 	call	#pushregs_
2ad98     09 1F 02 F6 | 	mov	local01, arg01
2ad9c     0A 21 02 F6 | 	mov	local02, arg02
2ada0     0B 23 02 F6 | 	mov	local03, arg03
2ada4     03 00 00 FF 
2ada8     3C 12 06 F6 | 	mov	arg01, ##1596
2adac                 | '     return _gc_alloc(size);
2adac     10 14 06 F6 | 	mov	arg02, #16
2adb0     A4 58 BF FD | 	call	#__system___gc_doalloc
2adb4     FD 24 0A F6 | 	mov	local04, result1 wz
2adb8                 | '       return _seterror( 7 );
2adb8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2adbc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2adc0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2adc4     01 FA 65 A6 |  if_e	neg	result1, #1
2adc8     98 00 90 AD |  if_e	jmp	#LR__4396
2adcc     12 13 02 F6 | 	mov	arg01, local04
2add0     00 14 06 F6 | 	mov	arg02, #0
2add4     03 00 00 FF 
2add8     3C 16 06 F6 | 	mov	arg03, ##1596
2addc     98 00 A0 FD | 	call	#\builtin_bytefill_
2ade0                 | '   switch (flags & 3) {
2ade0     11 27 02 F6 | 	mov	local05, local03
2ade4     03 26 0E F5 | 	and	local05, #3 wz
2ade8     0C 00 90 AD |  if_e	jmp	#LR__4390
2adec     01 26 0E F2 | 	cmp	local05, #1 wz
2adf0     0C 00 90 AD |  if_e	jmp	#LR__4391
2adf4     10 00 90 FD | 	jmp	#LR__4392
2adf8                 | LR__4390
2adf8     01 28 06 F6 | 	mov	local06, #1
2adfc                 | '       fs_flags =  0x01 ;
2adfc                 | '       break;
2adfc     0C 00 90 FD | 	jmp	#LR__4393
2ae00                 | LR__4391
2ae00     02 28 06 F6 | 	mov	local06, #2
2ae04                 | '       fs_flags =  0x02 ;
2ae04                 | '       break;
2ae04     04 00 90 FD | 	jmp	#LR__4393
2ae08                 | LR__4392
2ae08     03 28 06 F6 | 	mov	local06, #3
2ae0c                 | '       fs_flags =  0x01  |  0x02 ;
2ae0c                 | '       break;
2ae0c                 | LR__4393
2ae0c     08 22 CE F7 | 	test	local03, #8 wz
2ae10     18 28 46 55 |  if_ne	or	local06, #24
2ae14     08 00 90 5D |  if_ne	jmp	#LR__4394
2ae18     20 22 CE F7 | 	test	local03, #32 wz
2ae1c     30 28 46 55 |  if_ne	or	local06, #48
2ae20                 | LR__4394
2ae20     02 00 00 FF 
2ae24     14 24 06 F1 | 	add	local04, ##1044
2ae28     12 13 02 F6 | 	mov	arg01, local04
2ae2c     02 00 00 FF 
2ae30     14 24 86 F1 | 	sub	local04, ##1044
2ae34     10 15 02 F6 | 	mov	arg02, local02
2ae38     14 17 02 F6 | 	mov	arg03, local06
2ae3c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2ae40     FD 2A 0A F6 | 	mov	local07, result1 wz
2ae44     14 00 90 AD |  if_e	jmp	#LR__4395
2ae48     12 13 02 F6 | 	mov	arg01, local04
2ae4c                 | '     return _gc_free(ptr);
2ae4c     14 59 BF FD | 	call	#__system___gc_free
2ae50                 | '     free(f);
2ae50                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ae50                 | '     return _set_dos_error(r);
2ae50     15 13 02 F6 | 	mov	arg01, local07
2ae54     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2ae58     08 00 90 FD | 	jmp	#LR__4396
2ae5c                 | LR__4395
2ae5c     0F 25 62 FC | 	wrlong	local04, local01
2ae60                 | '   }
2ae60                 | '   fil->vfsdata = f;
2ae60                 | '   return 0;
2ae60     00 FA 05 F6 | 	mov	result1, #0
2ae64                 | LR__4396
2ae64     A7 F0 03 F6 | 	mov	ptra, fp
2ae68     B2 00 A0 FD | 	call	#popregs_
2ae6c                 | _fatfs_cc_v_open_ret
2ae6c     2D 00 64 FD | 	ret
2ae70                 | 
2ae70                 | _fatfs_cc_v_flush
2ae70     09 13 02 FB | 	rdlong	arg01, arg01
2ae74     02 00 00 FF 
2ae78     14 12 0E F1 | 	add	arg01, ##1044 wz
2ae7c                 | '         return _seterror( 5 );
2ae7c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ae80     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ae84     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ae88     01 FA 65 A6 |  if_e	neg	result1, #1
2ae8c     0C 00 90 AD |  if_e	jmp	#LR__4400
2ae90     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2ae94     FD 12 02 F6 | 	mov	arg01, result1
2ae98                 | '     }
2ae98                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ae98                 | '     result = f_sync(f);
2ae98                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ae98                 | '     return _set_dos_error(result);
2ae98     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2ae9c                 | LR__4400
2ae9c                 | _fatfs_cc_v_flush_ret
2ae9c     2D 00 64 FD | 	ret
2aea0                 | 
2aea0                 | _fatfs_cc_v_init
2aea0                 | ' {
2aea0                 | '     return 0;
2aea0     00 FA 05 F6 | 	mov	result1, #0
2aea4                 | _fatfs_cc_v_init_ret
2aea4     2D 00 64 FD | 	ret
2aea8                 | 
2aea8                 | _fatfs_cc_v_deinit
2aea8     5F 01 00 FF 
2aeac     1C 14 06 F6 | 	mov	arg02, ##@LR__4596
2aeb0     00 12 06 F6 | 	mov	arg01, #0
2aeb4     00 16 06 F6 | 	mov	arg03, #0
2aeb8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2aebc     01 00 00 FF 
2aec0     08 E4 05 F1 | 	add	objptr, ##520
2aec4     F2 12 02 FB | 	rdlong	arg01, objptr
2aec8     04 E4 05 F1 | 	add	objptr, #4
2aecc     F2 14 02 FB | 	rdlong	arg02, objptr
2aed0     01 00 00 FF 
2aed4     0C E4 85 F1 | 	sub	objptr, ##524
2aed8     54 40 BF FD | 	call	#__system___freepins
2aedc                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2aedc                 | '     _freepins(f_pinmask);
2aedc                 | '     return 0;
2aedc     00 FA 05 F6 | 	mov	result1, #0
2aee0                 | _fatfs_cc_v_deinit_ret
2aee0     2D 00 64 FD | 	ret
2aee4                 | 
2aee4                 | _fatfs_cc_get_vfs
2aee4     01 4A 05 F6 | 	mov	COUNT_, #1
2aee8     A8 00 A0 FD | 	call	#pushregs_
2aeec     09 1F 02 F6 | 	mov	local01, arg01
2aef0     50 12 06 F6 | 	mov	arg01, #80
2aef4     30 57 BF FD | 	call	#__system___gc_alloc_managed
2aef8     FD 12 02 F6 | 	mov	arg01, result1
2aefc     F2 FA 01 F6 | 	mov	result1, objptr
2af00     00 28 04 FF 
2af04     00 FA 45 F5 | 	or	result1, ##139460608
2af08     09 FB 61 FC | 	wrlong	result1, arg01
2af0c     F2 FA 01 F6 | 	mov	result1, objptr
2af10     00 30 04 FF 
2af14     00 FA 45 F5 | 	or	result1, ##140509184
2af18     04 12 06 F1 | 	add	arg01, #4
2af1c     09 FB 61 FC | 	wrlong	result1, arg01
2af20     F2 FA 01 F6 | 	mov	result1, objptr
2af24     00 38 04 FF 
2af28     00 FA 45 F5 | 	or	result1, ##141557760
2af2c     04 12 06 F1 | 	add	arg01, #4
2af30     09 FB 61 FC | 	wrlong	result1, arg01
2af34     F2 FA 01 F6 | 	mov	result1, objptr
2af38     00 40 04 FF 
2af3c     00 FA 45 F5 | 	or	result1, ##142606336
2af40     04 12 06 F1 | 	add	arg01, #4
2af44     09 FB 61 FC | 	wrlong	result1, arg01
2af48     F2 FA 01 F6 | 	mov	result1, objptr
2af4c     00 48 04 FF 
2af50     00 FA 45 F5 | 	or	result1, ##143654912
2af54     04 12 06 F1 | 	add	arg01, #4
2af58     09 FB 61 FC | 	wrlong	result1, arg01
2af5c     04 12 06 F1 | 	add	arg01, #4
2af60     09 01 68 FC | 	wrlong	#0, arg01
2af64     04 12 06 F1 | 	add	arg01, #4
2af68     09 1F 62 FC | 	wrlong	local01, arg01
2af6c     04 12 06 F1 | 	add	arg01, #4
2af70     09 01 68 FC | 	wrlong	#0, arg01
2af74     F2 FA 01 F6 | 	mov	result1, objptr
2af78     00 50 04 FF 
2af7c     00 FA 45 F5 | 	or	result1, ##144703488
2af80     04 12 06 F1 | 	add	arg01, #4
2af84     09 FB 61 FC | 	wrlong	result1, arg01
2af88     F2 FA 01 F6 | 	mov	result1, objptr
2af8c     00 58 04 FF 
2af90     00 FA 45 F5 | 	or	result1, ##145752064
2af94     04 12 06 F1 | 	add	arg01, #4
2af98     09 FB 61 FC | 	wrlong	result1, arg01
2af9c     F2 FA 01 F6 | 	mov	result1, objptr
2afa0     00 60 04 FF 
2afa4     00 FA 45 F5 | 	or	result1, ##146800640
2afa8     04 12 06 F1 | 	add	arg01, #4
2afac     09 FB 61 FC | 	wrlong	result1, arg01
2afb0     F2 FA 01 F6 | 	mov	result1, objptr
2afb4     00 68 04 FF 
2afb8     00 FA 45 F5 | 	or	result1, ##147849216
2afbc     04 12 06 F1 | 	add	arg01, #4
2afc0     09 FB 61 FC | 	wrlong	result1, arg01
2afc4     F2 FA 01 F6 | 	mov	result1, objptr
2afc8     00 70 04 FF 
2afcc     00 FA 45 F5 | 	or	result1, ##148897792
2afd0     04 12 06 F1 | 	add	arg01, #4
2afd4     09 FB 61 FC | 	wrlong	result1, arg01
2afd8     F2 FA 01 F6 | 	mov	result1, objptr
2afdc     00 78 04 FF 
2afe0     00 FA 45 F5 | 	or	result1, ##149946368
2afe4     04 12 06 F1 | 	add	arg01, #4
2afe8     09 FB 61 FC | 	wrlong	result1, arg01
2afec     F2 FA 01 F6 | 	mov	result1, objptr
2aff0     00 80 04 FF 
2aff4     00 FA 45 F5 | 	or	result1, ##150994944
2aff8     04 12 06 F1 | 	add	arg01, #4
2affc     09 FB 61 FC | 	wrlong	result1, arg01
2b000     F2 FA 01 F6 | 	mov	result1, objptr
2b004     00 88 04 FF 
2b008     00 FA 45 F5 | 	or	result1, ##152043520
2b00c     04 12 06 F1 | 	add	arg01, #4
2b010     09 FB 61 FC | 	wrlong	result1, arg01
2b014     F2 FA 01 F6 | 	mov	result1, objptr
2b018     00 90 04 FF 
2b01c     00 FA 45 F5 | 	or	result1, ##153092096
2b020     04 12 06 F1 | 	add	arg01, #4
2b024     09 FB 61 FC | 	wrlong	result1, arg01
2b028     F2 FA 01 F6 | 	mov	result1, objptr
2b02c     00 98 04 FF 
2b030     00 FA 45 F5 | 	or	result1, ##154140672
2b034     04 12 06 F1 | 	add	arg01, #4
2b038     09 FB 61 FC | 	wrlong	result1, arg01
2b03c     F2 FA 01 F6 | 	mov	result1, objptr
2b040     00 A0 04 FF 
2b044     00 FA 45 F5 | 	or	result1, ##155189248
2b048     04 12 06 F1 | 	add	arg01, #4
2b04c     09 FB 61 FC | 	wrlong	result1, arg01
2b050     F2 FA 01 F6 | 	mov	result1, objptr
2b054     00 A8 04 FF 
2b058     00 FA 45 F5 | 	or	result1, ##156237824
2b05c     04 12 06 F1 | 	add	arg01, #4
2b060     09 FB 61 FC | 	wrlong	result1, arg01
2b064     4C 12 86 F1 | 	sub	arg01, #76
2b068                 | ' 
2b068                 | '     v->close = &v_close;
2b068                 | '     v->read = &v_read;
2b068                 | '     v->write = &v_write;
2b068                 | '     v->lseek = &v_lseek;
2b068                 | '     v->ioctl = &v_ioctl;
2b068                 | '     v->flush = 0;
2b068                 | '     v->vfs_data = ptr;
2b068                 | '     v->reserved = 0;
2b068                 | ' 
2b068                 | '     v->open = &v_open;
2b068                 | '     v->creat = &v_creat;
2b068                 | '     v->opendir = &v_opendir;
2b068                 | '     v->closedir = &v_closedir;
2b068                 | '     v->readdir = &v_readdir;
2b068                 | '     v->stat = &v_stat;
2b068                 | ' 
2b068                 | '     v->mkdir = &v_mkdir;
2b068                 | '     v->rmdir = &v_rmdir;
2b068                 | ' 
2b068                 | '     v->remove = &v_remove;
2b068                 | '     v->rename = &v_rename;
2b068                 | ' 
2b068                 | '     v->init = &v_init;
2b068                 | '     v->deinit = &v_deinit;
2b068                 | ' 
2b068                 | '     return v;
2b068     09 FB 01 F6 | 	mov	result1, arg01
2b06c     A7 F0 03 F6 | 	mov	ptra, fp
2b070     B2 00 A0 FD | 	call	#popregs_
2b074                 | _fatfs_cc_get_vfs_ret
2b074     2D 00 64 FD | 	ret
2b078                 | 
2b078                 | _fatfs_cc_xmit_mmc_1043
2b078     01 00 00 FF 
2b07c     10 E4 05 F1 | 	add	objptr, ##528
2b080     F2 00 02 FB | 	rdlong	_var01, objptr
2b084     08 E4 05 F1 | 	add	objptr, #8
2b088     F2 02 02 FB | 	rdlong	_var02, objptr
2b08c     01 00 00 FF 
2b090     18 E4 85 F1 | 	sub	objptr, ##536
2b094     40 02 62 FD | 	dirl	_var02
2b098     28 02 64 FD | 	setq	#1
2b09c     09 05 02 FB | 	rdlong	_var03, arg01
2b0a0     69 04 62 FD | 	rev	_var03
2b0a4     1B 04 FE F9 | 	movbyts	_var03, #27
2b0a8     01 05 22 FC | 	wypin	_var03, _var02
2b0ac     0A 05 02 F6 | 	mov	_var03, arg02
2b0b0     02 14 4E F0 | 	shr	arg02, #2 wz
2b0b4     03 04 66 F0 | 	shl	_var03, #3
2b0b8     00 05 22 FC | 	wypin	_var03, _var01
2b0bc     41 02 62 FD | 	dirh	_var02
2b0c0     08 12 06 F1 | 	add	arg01, #8
2b0c4     69 06 62 FD | 	rev	_var04
2b0c8     1B 06 FE F9 | 	movbyts	_var04, #27
2b0cc                 | LR__4410
2b0cc     01 07 22 5C |  if_ne	wypin	_var04, _var02
2b0d0     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2b0d4     04 12 06 51 |  if_ne	add	arg01, #4
2b0d8     69 06 62 5D |  if_ne	rev	_var04
2b0dc     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2b0e0                 | LR__4411
2b0e0     40 02 72 5D |  if_ne	testp	_var02 wc
2b0e4     F8 FF 9F 1D |  if_a	jmp	#LR__4411
2b0e8     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4410
2b0ec                 | LR__4412
2b0ec     40 00 72 FD | 	testp	_var01 wc
2b0f0     F8 FF 9F 3D |  if_ae	jmp	#LR__4412
2b0f4     40 02 62 FD | 	dirl	_var02
2b0f8     FF FF FF FF 
2b0fc     01 FF 2B FC | 	wypin	##-1, _var02
2b100     41 02 62 FD | 	dirh	_var02
2b104                 | _fatfs_cc_xmit_mmc_1043_ret
2b104     2D 00 64 FD | 	ret
2b108                 | 
2b108                 | _fatfs_cc_rcvr_mmc_1050
2b108     01 00 00 FF 
2b10c     10 E4 05 F1 | 	add	objptr, ##528
2b110     F2 00 02 FB | 	rdlong	_var01, objptr
2b114     0C E4 05 F1 | 	add	objptr, #12
2b118     F2 02 02 FB | 	rdlong	_var02, objptr
2b11c     01 00 00 FF 
2b120     1C E4 85 F1 | 	sub	objptr, ##540
2b124     01 03 08 FC | 	akpin	_var02
2b128     0A 05 0A F6 | 	mov	_var03, arg02 wz
2b12c     02 04 4E F0 | 	shr	_var03, #2 wz
2b130     30 00 90 AD |  if_e	jmp	#LR__4422
2b134     02 07 02 F6 | 	mov	_var04, _var03
2b138     05 06 66 F0 | 	shl	_var04, #5
2b13c     00 07 22 FC | 	wypin	_var04, _var01
2b140     01 7F 18 FC | 	wxpin	#63, _var02
2b144                 | LR__4420
2b144                 | LR__4421
2b144     40 02 72 FD | 	testp	_var02 wc
2b148     F8 FF 9F 3D |  if_ae	jmp	#LR__4421
2b14c     01 07 8A FA | 	rdpin	_var04, _var02
2b150     69 06 62 FD | 	rev	_var04
2b154     1B 06 FE F9 | 	movbyts	_var04, #27
2b158     09 07 62 FC | 	wrlong	_var04, arg01
2b15c     04 12 06 F1 | 	add	arg01, #4
2b160     F8 05 6E FB | 	djnz	_var03, #LR__4420
2b164                 | LR__4422
2b164     03 14 0E F5 | 	and	arg02, #3 wz
2b168     24 00 90 AD |  if_e	jmp	#LR__4425
2b16c     01 4F 18 FC | 	wxpin	#39, _var02
2b170                 | LR__4423
2b170     00 11 28 FC | 	wypin	#8, _var01
2b174                 | LR__4424
2b174     40 02 72 FD | 	testp	_var02 wc
2b178     F8 FF 9F 3D |  if_ae	jmp	#LR__4424
2b17c     01 07 8A FA | 	rdpin	_var04, _var02
2b180     69 06 62 FD | 	rev	_var04
2b184     09 07 42 FC | 	wrbyte	_var04, arg01
2b188     01 12 06 F1 | 	add	arg01, #1
2b18c     F8 15 6E FB | 	djnz	arg02, #LR__4423
2b190                 | LR__4425
2b190                 | _fatfs_cc_rcvr_mmc_1050_ret
2b190     2D 00 64 FD | 	ret
2b194                 | 
2b194                 | _fatfs_cc_wait_ready_1054
2b194     01 4A 05 F6 | 	mov	COUNT_, #1
2b198     A8 00 A0 FD | 	call	#pushregs_
2b19c     10 F0 07 F1 | 	add	ptra, #16
2b1a0     1A FA 61 FD | 	getct	result1
2b1a4     08 4E 05 F1 | 	add	fp, #8
2b1a8     A7 FA 61 FC | 	wrlong	result1, fp
2b1ac     14 1E 06 FB | 	rdlong	local01, #20
2b1b0     01 1E 46 F0 | 	shr	local01, #1
2b1b4     04 4E 05 F1 | 	add	fp, #4
2b1b8     A7 1E 62 FC | 	wrlong	local01, fp
2b1bc     0C 4E 85 F1 | 	sub	fp, #12
2b1c0                 | ' {
2b1c0                 | ' 	BYTE d;
2b1c0                 | ' 	UINT tmr, tmout;
2b1c0                 | ' 
2b1c0                 | ' 	tmr = _cnt();
2b1c0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2b1c0                 | ' 	for(;;) {
2b1c0                 | LR__4430
2b1c0     04 4E 05 F1 | 	add	fp, #4
2b1c4     A7 12 02 F6 | 	mov	arg01, fp
2b1c8     04 4E 85 F1 | 	sub	fp, #4
2b1cc     01 14 06 F6 | 	mov	arg02, #1
2b1d0     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b1d4     04 4E 05 F1 | 	add	fp, #4
2b1d8     A7 1E C2 FA | 	rdbyte	local01, fp
2b1dc     04 4E 85 F1 | 	sub	fp, #4
2b1e0     FF 1E 0E F2 | 	cmp	local01, #255 wz
2b1e4     01 FA 05 A6 |  if_e	mov	result1, #1
2b1e8     28 00 90 AD |  if_e	jmp	#LR__4431
2b1ec     1A FA 61 FD | 	getct	result1
2b1f0     08 4E 05 F1 | 	add	fp, #8
2b1f4     A7 1E 02 FB | 	rdlong	local01, fp
2b1f8     0F FB 81 F1 | 	sub	result1, local01
2b1fc     04 4E 05 F1 | 	add	fp, #4
2b200     A7 1E 02 FB | 	rdlong	local01, fp
2b204     0C 4E 85 F1 | 	sub	fp, #12
2b208     0F FB 11 F2 | 	cmp	result1, local01 wc
2b20c     00 FA 05 36 |  if_ae	mov	result1, #0
2b210     AC FF 9F CD |  if_b	jmp	#LR__4430
2b214                 | LR__4431
2b214     A7 F0 03 F6 | 	mov	ptra, fp
2b218     B2 00 A0 FD | 	call	#popregs_
2b21c                 | _fatfs_cc_wait_ready_1054_ret
2b21c     2D 00 64 FD | 	ret
2b220                 | 
2b220                 | _fatfs_cc_deselect_1060
2b220     00 4A 05 F6 | 	mov	COUNT_, #0
2b224     A8 00 A0 FD | 	call	#pushregs_
2b228     14 F0 07 F1 | 	add	ptra, #20
2b22c     01 00 00 FF 
2b230     14 E4 05 F1 | 	add	objptr, ##532
2b234     F2 14 02 FB | 	rdlong	arg02, objptr
2b238     04 4E 05 F1 | 	add	fp, #4
2b23c     A7 14 62 FC | 	wrlong	arg02, fp
2b240     04 E4 85 F1 | 	sub	objptr, #4
2b244     F2 14 02 FB | 	rdlong	arg02, objptr
2b248     04 4E 05 F1 | 	add	fp, #4
2b24c     A7 14 62 FC | 	wrlong	arg02, fp
2b250     08 E4 05 F1 | 	add	objptr, #8
2b254     F2 14 02 FB | 	rdlong	arg02, objptr
2b258     04 4E 05 F1 | 	add	fp, #4
2b25c     A7 14 62 FC | 	wrlong	arg02, fp
2b260     04 E4 05 F1 | 	add	objptr, #4
2b264     F2 14 02 FB | 	rdlong	arg02, objptr
2b268     01 00 00 FF 
2b26c     1C E4 85 F1 | 	sub	objptr, ##540
2b270     04 4E 05 F1 | 	add	fp, #4
2b274     A7 14 62 FC | 	wrlong	arg02, fp
2b278     0C 4E 85 F1 | 	sub	fp, #12
2b27c     A7 12 02 FB | 	rdlong	arg01, fp
2b280     04 4E 85 F1 | 	sub	fp, #4
2b284     59 12 62 FD | 	drvh	arg01
2b288     1F 20 64 FD | 	waitx	#16
2b28c     A7 12 02 F6 | 	mov	arg01, fp
2b290     01 14 06 F6 | 	mov	arg02, #1
2b294     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b298     A7 F0 03 F6 | 	mov	ptra, fp
2b29c     B2 00 A0 FD | 	call	#popregs_
2b2a0                 | _fatfs_cc_deselect_1060_ret
2b2a0     2D 00 64 FD | 	ret
2b2a4                 | 
2b2a4                 | _fatfs_cc_select_1064
2b2a4     00 4A 05 F6 | 	mov	COUNT_, #0
2b2a8     A8 00 A0 FD | 	call	#pushregs_
2b2ac     10 F0 07 F1 | 	add	ptra, #16
2b2b0     01 00 00 FF 
2b2b4     14 E4 05 F1 | 	add	objptr, ##532
2b2b8     F2 14 02 FB | 	rdlong	arg02, objptr
2b2bc     08 4E 05 F1 | 	add	fp, #8
2b2c0     A7 14 62 FC | 	wrlong	arg02, fp
2b2c4     08 E4 05 F1 | 	add	objptr, #8
2b2c8     F2 12 02 FB | 	rdlong	arg01, objptr
2b2cc     01 00 00 FF 
2b2d0     1C E4 85 F1 | 	sub	objptr, ##540
2b2d4     04 4E 05 F1 | 	add	fp, #4
2b2d8     A7 12 62 FC | 	wrlong	arg01, fp
2b2dc     50 12 62 FD | 	fltl	arg01
2b2e0     04 4E 85 F1 | 	sub	fp, #4
2b2e4     A7 12 02 FB | 	rdlong	arg01, fp
2b2e8     58 12 62 FD | 	drvl	arg01
2b2ec     1F 20 64 FD | 	waitx	#16
2b2f0     04 4E 05 F1 | 	add	fp, #4
2b2f4     A7 12 02 FB | 	rdlong	arg01, fp
2b2f8     41 12 62 FD | 	dirh	arg01
2b2fc     08 4E 85 F1 | 	sub	fp, #8
2b300     A7 12 02 F6 | 	mov	arg01, fp
2b304     04 4E 85 F1 | 	sub	fp, #4
2b308     01 14 06 F6 | 	mov	arg02, #1
2b30c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b310     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1054
2b314     00 FA 0D F2 | 	cmp	result1, #0 wz
2b318     01 FA 05 56 |  if_ne	mov	result1, #1
2b31c     08 00 90 5D |  if_ne	jmp	#LR__4440
2b320     FC FE BF FD | 	call	#_fatfs_cc_deselect_1060
2b324                 | ' 
2b324                 | ' 	deselect();
2b324                 | ' 	return 0;
2b324     00 FA 05 F6 | 	mov	result1, #0
2b328                 | LR__4440
2b328     A7 F0 03 F6 | 	mov	ptra, fp
2b32c     B2 00 A0 FD | 	call	#popregs_
2b330                 | _fatfs_cc_select_1064_ret
2b330     2D 00 64 FD | 	ret
2b334                 | 
2b334                 | _fatfs_cc_rcvr_datablock_1068
2b334     01 4A 05 F6 | 	mov	COUNT_, #1
2b338     A8 00 A0 FD | 	call	#pushregs_
2b33c     18 F0 07 F1 | 	add	ptra, #24
2b340     04 4E 05 F1 | 	add	fp, #4
2b344     A7 12 62 FC | 	wrlong	arg01, fp
2b348     04 4E 05 F1 | 	add	fp, #4
2b34c     A7 14 62 FC | 	wrlong	arg02, fp
2b350     1A FA 61 FD | 	getct	result1
2b354     08 4E 05 F1 | 	add	fp, #8
2b358     A7 FA 61 FC | 	wrlong	result1, fp
2b35c     14 1E 06 FB | 	rdlong	local01, #20
2b360     03 1E 46 F0 | 	shr	local01, #3
2b364     04 4E 05 F1 | 	add	fp, #4
2b368     A7 1E 62 FC | 	wrlong	local01, fp
2b36c     14 4E 85 F1 | 	sub	fp, #20
2b370                 | ' 	BYTE *buff,
2b370                 | ' 	UINT btr
2b370                 | ' )
2b370                 | ' {
2b370                 | ' 	BYTE d[2];
2b370                 | ' 	UINT tmr, tmout;
2b370                 | ' 
2b370                 | ' 	tmr = _cnt();
2b370                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2b370                 | ' 	for(;;) {
2b370                 | LR__4450
2b370     0C 4E 05 F1 | 	add	fp, #12
2b374     A7 12 02 F6 | 	mov	arg01, fp
2b378     0C 4E 85 F1 | 	sub	fp, #12
2b37c     01 14 06 F6 | 	mov	arg02, #1
2b380     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b384     0C 4E 05 F1 | 	add	fp, #12
2b388     A7 1E C2 FA | 	rdbyte	local01, fp
2b38c     0C 4E 85 F1 | 	sub	fp, #12
2b390     FF 1E 0E F2 | 	cmp	local01, #255 wz
2b394     28 00 90 5D |  if_ne	jmp	#LR__4451
2b398     1A FA 61 FD | 	getct	result1
2b39c     FD 1E 02 F6 | 	mov	local01, result1
2b3a0     10 4E 05 F1 | 	add	fp, #16
2b3a4     A7 14 02 FB | 	rdlong	arg02, fp
2b3a8     0A 1F 82 F1 | 	sub	local01, arg02
2b3ac     04 4E 05 F1 | 	add	fp, #4
2b3b0     A7 14 02 FB | 	rdlong	arg02, fp
2b3b4     14 4E 85 F1 | 	sub	fp, #20
2b3b8     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2b3bc     B0 FF 9F CD |  if_b	jmp	#LR__4450
2b3c0                 | LR__4451
2b3c0     0C 4E 05 F1 | 	add	fp, #12
2b3c4     A7 1E C2 FA | 	rdbyte	local01, fp
2b3c8     0C 4E 85 F1 | 	sub	fp, #12
2b3cc     FE 1E 0E F2 | 	cmp	local01, #254 wz
2b3d0     00 FA 05 56 |  if_ne	mov	result1, #0
2b3d4     30 00 90 5D |  if_ne	jmp	#LR__4452
2b3d8     04 4E 05 F1 | 	add	fp, #4
2b3dc     A7 12 02 FB | 	rdlong	arg01, fp
2b3e0     04 4E 05 F1 | 	add	fp, #4
2b3e4     A7 14 02 FB | 	rdlong	arg02, fp
2b3e8     08 4E 85 F1 | 	sub	fp, #8
2b3ec     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b3f0     0C 4E 05 F1 | 	add	fp, #12
2b3f4     A7 12 02 F6 | 	mov	arg01, fp
2b3f8     0C 4E 85 F1 | 	sub	fp, #12
2b3fc     02 14 06 F6 | 	mov	arg02, #2
2b400     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b404                 | ' 
2b404                 | ' 	rcvr_mmc(buff, btr);
2b404                 | ' 	rcvr_mmc(d, 2);
2b404                 | ' 
2b404                 | ' 	return 1;
2b404     01 FA 05 F6 | 	mov	result1, #1
2b408                 | LR__4452
2b408     A7 F0 03 F6 | 	mov	ptra, fp
2b40c     B2 00 A0 FD | 	call	#popregs_
2b410                 | _fatfs_cc_rcvr_datablock_1068_ret
2b410     2D 00 64 FD | 	ret
2b414                 | 
2b414                 | _fatfs_cc_xmit_datablock_1070
2b414     00 4A 05 F6 | 	mov	COUNT_, #0
2b418     A8 00 A0 FD | 	call	#pushregs_
2b41c     10 F0 07 F1 | 	add	ptra, #16
2b420     04 4E 05 F1 | 	add	fp, #4
2b424     A7 12 62 FC | 	wrlong	arg01, fp
2b428     04 4E 05 F1 | 	add	fp, #4
2b42c     A7 14 42 FC | 	wrbyte	arg02, fp
2b430     08 4E 85 F1 | 	sub	fp, #8
2b434     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1054
2b438     00 FA 0D F2 | 	cmp	result1, #0 wz
2b43c     00 FA 05 A6 |  if_e	mov	result1, #0
2b440     90 00 90 AD |  if_e	jmp	#LR__4461
2b444     08 4E 05 F1 | 	add	fp, #8
2b448     A7 14 C2 FA | 	rdbyte	arg02, fp
2b44c     04 4E 05 F1 | 	add	fp, #4
2b450     A7 14 42 FC | 	wrbyte	arg02, fp
2b454     A7 12 02 F6 | 	mov	arg01, fp
2b458     0C 4E 85 F1 | 	sub	fp, #12
2b45c     01 14 06 F6 | 	mov	arg02, #1
2b460     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2b464     08 4E 05 F1 | 	add	fp, #8
2b468     A7 14 C2 FA | 	rdbyte	arg02, fp
2b46c     08 4E 85 F1 | 	sub	fp, #8
2b470     FD 14 0E F2 | 	cmp	arg02, #253 wz
2b474     58 00 90 AD |  if_e	jmp	#LR__4460
2b478     04 4E 05 F1 | 	add	fp, #4
2b47c     A7 12 02 FB | 	rdlong	arg01, fp
2b480     04 4E 85 F1 | 	sub	fp, #4
2b484     09 14 C6 F9 | 	decod	arg02, #9
2b488     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2b48c     0C 4E 05 F1 | 	add	fp, #12
2b490     A7 12 02 F6 | 	mov	arg01, fp
2b494     0C 4E 85 F1 | 	sub	fp, #12
2b498     02 14 06 F6 | 	mov	arg02, #2
2b49c     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b4a0     0C 4E 05 F1 | 	add	fp, #12
2b4a4     A7 12 02 F6 | 	mov	arg01, fp
2b4a8     0C 4E 85 F1 | 	sub	fp, #12
2b4ac     01 14 06 F6 | 	mov	arg02, #1
2b4b0     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b4b4     0C 4E 05 F1 | 	add	fp, #12
2b4b8     A7 14 C2 FA | 	rdbyte	arg02, fp
2b4bc     0C 4E 85 F1 | 	sub	fp, #12
2b4c0     1F 14 06 F5 | 	and	arg02, #31
2b4c4     05 14 0E F2 | 	cmp	arg02, #5 wz
2b4c8                 | ' 			return 0;
2b4c8     00 FA 05 56 |  if_ne	mov	result1, #0
2b4cc     04 00 90 5D |  if_ne	jmp	#LR__4461
2b4d0                 | LR__4460
2b4d0                 | ' 	}
2b4d0                 | ' 
2b4d0                 | ' 	return 1;
2b4d0     01 FA 05 F6 | 	mov	result1, #1
2b4d4                 | LR__4461
2b4d4     A7 F0 03 F6 | 	mov	ptra, fp
2b4d8     B2 00 A0 FD | 	call	#popregs_
2b4dc                 | _fatfs_cc_xmit_datablock_1070_ret
2b4dc     2D 00 64 FD | 	ret
2b4e0                 | 
2b4e0                 | _fatfs_cc_send_cmd_1074
2b4e0     01 4A 05 F6 | 	mov	COUNT_, #1
2b4e4     A8 00 A0 FD | 	call	#pushregs_
2b4e8     1C F0 07 F1 | 	add	ptra, #28
2b4ec                 | _fatfs_cc_send_cmd_1074_enter
2b4ec     04 4E 05 F1 | 	add	fp, #4
2b4f0     A7 12 42 FC | 	wrbyte	arg01, fp
2b4f4     04 4E 05 F1 | 	add	fp, #4
2b4f8     A7 14 62 FC | 	wrlong	arg02, fp
2b4fc     04 4E 85 F1 | 	sub	fp, #4
2b500     A7 FA C1 FA | 	rdbyte	result1, fp
2b504     04 4E 85 F1 | 	sub	fp, #4
2b508     80 FA CD F7 | 	test	result1, #128 wz
2b50c     44 00 90 AD |  if_e	jmp	#LR__4470
2b510     04 4E 05 F1 | 	add	fp, #4
2b514     A7 14 C2 FA | 	rdbyte	arg02, fp
2b518     7F 14 06 F5 | 	and	arg02, #127
2b51c     A7 14 42 FC | 	wrbyte	arg02, fp
2b520     04 4E 85 F1 | 	sub	fp, #4
2b524     37 12 06 F6 | 	mov	arg01, #55
2b528     00 14 06 F6 | 	mov	arg02, #0
2b52c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1074
2b530     0C 4E 05 F1 | 	add	fp, #12
2b534     A7 FA 41 FC | 	wrbyte	result1, fp
2b538     A7 14 C2 FA | 	rdbyte	arg02, fp
2b53c     0C 4E 85 F1 | 	sub	fp, #12
2b540     02 14 16 F2 | 	cmp	arg02, #2 wc
2b544     0C 4E 05 31 |  if_ae	add	fp, #12
2b548     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2b54c     0C 4E 85 31 |  if_ae	sub	fp, #12
2b550     6C 01 90 3D |  if_ae	jmp	#LR__4474
2b554                 | LR__4470
2b554     04 4E 05 F1 | 	add	fp, #4
2b558     A7 14 C2 FA | 	rdbyte	arg02, fp
2b55c     04 4E 85 F1 | 	sub	fp, #4
2b560     0C 14 0E F2 | 	cmp	arg02, #12 wz
2b564     14 00 90 AD |  if_e	jmp	#LR__4471
2b568     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1060
2b56c     34 FD BF FD | 	call	#_fatfs_cc_select_1064
2b570     00 FA 0D F2 | 	cmp	result1, #0 wz
2b574     FF FA 05 A6 |  if_e	mov	result1, #255
2b578     44 01 90 AD |  if_e	jmp	#LR__4474
2b57c                 | LR__4471
2b57c     04 4E 05 F1 | 	add	fp, #4
2b580     A7 14 C2 FA | 	rdbyte	arg02, fp
2b584     40 FA 05 F6 | 	mov	result1, #64
2b588     0A FB 41 F5 | 	or	result1, arg02
2b58c     10 4E 05 F1 | 	add	fp, #16
2b590     A7 FA 41 FC | 	wrbyte	result1, fp
2b594     0C 4E 85 F1 | 	sub	fp, #12
2b598     A7 FA 01 FB | 	rdlong	result1, fp
2b59c     18 FA 45 F0 | 	shr	result1, #24
2b5a0     0D 4E 05 F1 | 	add	fp, #13
2b5a4     A7 FA 41 FC | 	wrbyte	result1, fp
2b5a8     0D 4E 85 F1 | 	sub	fp, #13
2b5ac     A7 FA 01 FB | 	rdlong	result1, fp
2b5b0     10 FA 45 F0 | 	shr	result1, #16
2b5b4     0E 4E 05 F1 | 	add	fp, #14
2b5b8     A7 FA 41 FC | 	wrbyte	result1, fp
2b5bc     0E 4E 85 F1 | 	sub	fp, #14
2b5c0     A7 FA 01 FB | 	rdlong	result1, fp
2b5c4     08 FA 45 F0 | 	shr	result1, #8
2b5c8     0F 4E 05 F1 | 	add	fp, #15
2b5cc     A7 FA 41 FC | 	wrbyte	result1, fp
2b5d0     0F 4E 85 F1 | 	sub	fp, #15
2b5d4     A7 FA 01 FB | 	rdlong	result1, fp
2b5d8     10 4E 05 F1 | 	add	fp, #16
2b5dc     A7 FA 41 FC | 	wrbyte	result1, fp
2b5e0     0C 4E 85 F1 | 	sub	fp, #12
2b5e4     A7 02 48 FC | 	wrbyte	#1, fp
2b5e8     08 4E 85 F1 | 	sub	fp, #8
2b5ec     A7 FA C9 FA | 	rdbyte	result1, fp wz
2b5f0     04 4E 85 F1 | 	sub	fp, #4
2b5f4     0C 4E 05 A1 |  if_e	add	fp, #12
2b5f8     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2b5fc     0C 4E 85 A1 |  if_e	sub	fp, #12
2b600     04 4E 05 F1 | 	add	fp, #4
2b604     A7 FA C1 FA | 	rdbyte	result1, fp
2b608     04 4E 85 F1 | 	sub	fp, #4
2b60c     08 FA 0D F2 | 	cmp	result1, #8 wz
2b610     0C 4E 05 A1 |  if_e	add	fp, #12
2b614     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2b618     0C 4E 85 A1 |  if_e	sub	fp, #12
2b61c     0C 4E 05 F1 | 	add	fp, #12
2b620     A7 14 C2 FA | 	rdbyte	arg02, fp
2b624     0D 4E 05 F1 | 	add	fp, #13
2b628     A7 14 42 FC | 	wrbyte	arg02, fp
2b62c     05 4E 85 F1 | 	sub	fp, #5
2b630     A7 12 02 F6 | 	mov	arg01, fp
2b634     14 4E 85 F1 | 	sub	fp, #20
2b638     06 14 06 F6 | 	mov	arg02, #6
2b63c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2b640     04 4E 05 F1 | 	add	fp, #4
2b644     A7 1E C2 FA | 	rdbyte	local01, fp
2b648     04 4E 85 F1 | 	sub	fp, #4
2b64c     0C 1E 0E F2 | 	cmp	local01, #12 wz
2b650     10 4E 05 A1 |  if_e	add	fp, #16
2b654     A7 12 02 A6 |  if_e	mov	arg01, fp
2b658     10 4E 85 A1 |  if_e	sub	fp, #16
2b65c     01 14 06 A6 |  if_e	mov	arg02, #1
2b660     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1050
2b664     0C 4E 05 F1 | 	add	fp, #12
2b668     A7 14 48 FC | 	wrbyte	#10, fp
2b66c     0C 4E 85 F1 | 	sub	fp, #12
2b670                 | ' 	n = 10;
2b670                 | ' 	do
2b670                 | LR__4472
2b670     10 4E 05 F1 | 	add	fp, #16
2b674     A7 12 02 F6 | 	mov	arg01, fp
2b678     10 4E 85 F1 | 	sub	fp, #16
2b67c     01 14 06 F6 | 	mov	arg02, #1
2b680     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b684     10 4E 05 F1 | 	add	fp, #16
2b688     A7 1E C2 FA | 	rdbyte	local01, fp
2b68c     10 4E 85 F1 | 	sub	fp, #16
2b690     80 1E CE F7 | 	test	local01, #128 wz
2b694     1C 00 90 AD |  if_e	jmp	#LR__4473
2b698     0C 4E 05 F1 | 	add	fp, #12
2b69c     A7 1E C2 FA | 	rdbyte	local01, fp
2b6a0     01 1E 86 F1 | 	sub	local01, #1
2b6a4     A7 1E 42 FC | 	wrbyte	local01, fp
2b6a8     A7 1E CA FA | 	rdbyte	local01, fp wz
2b6ac     0C 4E 85 F1 | 	sub	fp, #12
2b6b0     BC FF 9F 5D |  if_ne	jmp	#LR__4472
2b6b4                 | LR__4473
2b6b4                 | ' 
2b6b4                 | ' 	return d;
2b6b4     10 4E 05 F1 | 	add	fp, #16
2b6b8     A7 FA C1 FA | 	rdbyte	result1, fp
2b6bc     10 4E 85 F1 | 	sub	fp, #16
2b6c0                 | LR__4474
2b6c0     A7 F0 03 F6 | 	mov	ptra, fp
2b6c4     B2 00 A0 FD | 	call	#popregs_
2b6c8                 | _fatfs_cc_send_cmd_1074_ret
2b6c8     2D 00 64 FD | 	ret
2b6cc                 | 
2b6cc                 | _fatfs_cc_disk_deinitialize
2b6cc     03 4A 05 F6 | 	mov	COUNT_, #3
2b6d0     A8 00 A0 FD | 	call	#pushregs_
2b6d4     00 12 4E F2 | 	cmps	arg01, #0 wz
2b6d8     01 00 00 FF 
2b6dc     14 E4 05 F1 | 	add	objptr, ##532
2b6e0     F2 12 02 FB | 	rdlong	arg01, objptr
2b6e4     04 E4 85 F1 | 	sub	objptr, #4
2b6e8     F2 1E 02 FB | 	rdlong	local01, objptr
2b6ec     08 E4 05 F1 | 	add	objptr, #8
2b6f0     F2 20 02 FB | 	rdlong	local02, objptr
2b6f4     04 E4 05 F1 | 	add	objptr, #4
2b6f8     F2 22 02 FB | 	rdlong	local03, objptr
2b6fc     01 00 00 FF 
2b700     1C E4 85 F1 | 	sub	objptr, ##540
2b704                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b704                 | '         return RES_NOTRDY;
2b704     03 FA 05 56 |  if_ne	mov	result1, #3
2b708     2C 00 90 5D |  if_ne	jmp	#LR__4480
2b70c     50 12 62 FD | 	fltl	arg01
2b710     09 01 08 FC | 	wrpin	#0, arg01
2b714     50 1E 62 FD | 	fltl	local01
2b718     0F 01 08 FC | 	wrpin	#0, local01
2b71c     50 20 62 FD | 	fltl	local02
2b720     10 01 08 FC | 	wrpin	#0, local02
2b724     50 22 62 FD | 	fltl	local03
2b728     11 01 08 FC | 	wrpin	#0, local03
2b72c     0A 12 06 F6 | 	mov	arg01, #10
2b730     A0 13 BF FD | 	call	#__system___waitms
2b734                 | '     }
2b734                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b734                 | '     _pinclear(PIN_SS);
2b734                 | '     _pinclear(PIN_CLK);
2b734                 | '     _pinclear(PIN_DI);
2b734                 | '     _pinclear(PIN_DO);
2b734                 | ' 
2b734                 | '     _waitms(10);
2b734                 | ' 
2b734                 | '     return 0;
2b734     00 FA 05 F6 | 	mov	result1, #0
2b738                 | LR__4480
2b738     A7 F0 03 F6 | 	mov	ptra, fp
2b73c     B2 00 A0 FD | 	call	#popregs_
2b740                 | _fatfs_cc_disk_deinitialize_ret
2b740     2D 00 64 FD | 	ret
2b744                 | 
2b744                 | _fatfs_cc_gettimeofday
2b744     04 4A 05 F6 | 	mov	COUNT_, #4
2b748     A8 00 A0 FD | 	call	#pushregs_
2b74c     09 1F 02 F6 | 	mov	local01, arg01
2b750     5C 0F BF FD | 	call	#__system___getus
2b754     FD 12 02 F6 | 	mov	arg01, result1
2b758     02 00 00 FF 
2b75c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2b760     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2b764     09 FB 01 F6 | 	mov	result1, arg01
2b768     10 FB 81 F1 | 	sub	result1, local02
2b76c     A1 07 00 FF 
2b770     40 FA 15 FD | 	qdiv	result1, ##1000000
2b774     02 00 00 FF 
2b778     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2b77c     18 20 62 FD | 	getqx	local02
2b780     A1 07 00 FF 
2b784     40 FA 15 FD | 	qdiv	result1, ##1000000
2b788     00 20 0E F2 | 	cmp	local02, #0 wz
2b78c     19 22 62 FD | 	getqy	local03
2b790     28 00 90 AD |  if_e	jmp	#LR__4490
2b794     02 00 00 FF 
2b798     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2b79c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2b7a0     10 25 02 F1 | 	add	local04, local02
2b7a4     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2b7a8     11 13 82 F1 | 	sub	arg01, local03
2b7ac     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2b7b0     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2b7b4     02 00 00 FF 
2b7b8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2b7bc                 | LR__4490
2b7bc     02 00 00 FF 
2b7c0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2b7c4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2b7c8     02 00 00 FF 
2b7cc     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2b7d0     0F 25 62 FC | 	wrlong	local04, local01
2b7d4     04 1E 06 F1 | 	add	local01, #4
2b7d8     0F 23 62 FC | 	wrlong	local03, local01
2b7dc                 | '         lastsec += secs;
2b7dc                 | '         lastus = now - leftover;
2b7dc                 | '     }
2b7dc                 | '     tv->tv_sec = lastsec;
2b7dc                 | '     tv->tv_usec = leftover;
2b7dc                 | '     return 0;
2b7dc     00 FA 05 F6 | 	mov	result1, #0
2b7e0     A7 F0 03 F6 | 	mov	ptra, fp
2b7e4     B2 00 A0 FD | 	call	#popregs_
2b7e8                 | _fatfs_cc_gettimeofday_ret
2b7e8     2D 00 64 FD | 	ret
2b7ec                 | 
2b7ec                 | _fatfs_cc__is_leap_year
2b7ec     09 FB 51 F6 | 	abs	result1, arg01 wc
2b7f0     03 FA 05 F5 | 	and	result1, #3
2b7f4     FD FA 89 F6 | 	negc	result1, result1 wz
2b7f8     38 00 90 5D |  if_ne	jmp	#LR__4501
2b7fc     09 FB 51 F6 | 	abs	result1, arg01 wc
2b800     64 FA 15 FD | 	qdiv	result1, #100
2b804     19 FA 61 FD | 	getqy	result1
2b808     FD FA 89 F6 | 	negc	result1, result1 wz
2b80c     1C 00 90 5D |  if_ne	jmp	#LR__4500
2b810     09 FB 51 F6 | 	abs	result1, arg01 wc
2b814     90 FB 15 FD | 	qdiv	result1, #400
2b818                 | '       return (0 == y % 400);
2b818     00 FA 05 F6 | 	mov	result1, #0
2b81c     19 00 62 FD | 	getqy	_var01
2b820     00 01 8A F6 | 	negc	_var01, _var01 wz
2b824     01 FA 05 A6 |  if_e	mov	result1, #1
2b828     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2b82c                 | LR__4500
2b82c                 | '     return 1;
2b82c     01 FA 05 F6 | 	mov	result1, #1
2b830     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2b834                 | LR__4501
2b834                 | '   }
2b834                 | '   return 0;
2b834     00 FA 05 F6 | 	mov	result1, #0
2b838                 | _fatfs_cc__is_leap_year_ret
2b838     2D 00 64 FD | 	ret
2b83c                 | 
2b83c                 | _fatfs_cc___tzoffset
2b83c     09 01 0A F6 | 	mov	_var01, arg01 wz
2b840     FF FF FF FF 
2b844     0A FF 6B FC | 	wrlong	##-1, arg02
2b848     01 02 06 F6 | 	mov	_var02, #1
2b84c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2b850                 | '                 return 0;
2b850     00 FA 05 A6 |  if_e	mov	result1, #0
2b854     94 02 90 AD |  if_e	jmp	#LR__4527
2b858     0A 01 68 FC | 	wrlong	#0, arg02
2b85c     02 00 00 FF 
2b860     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b864     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2b868                 | ' 
2b868                 | '        *hasdst = 0;
2b868                 | ' 
2b868                 | ' 	n = stdname;
2b868                 | '         while (*s && isalpha(*s)) {
2b868     02 00 00 FF 
2b86c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2b870     97 28 48 FB | 	callpa	#(@LR__4511-@LR__4510)>>2,fcache_load_ptr_
2b874                 | LR__4510
2b874     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2b878     48 00 90 AD |  if_e	jmp	#LR__4512
2b87c     00 13 C2 FA | 	rdbyte	arg01, _var01
2b880                 | ' {
2b880                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b880     80 12 36 F3 | 	fle	arg01, #128 wc
2b884                 | '     return __ctype[c];
2b884     02 00 00 FF 
2b888     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b88c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b890     09 FB C1 FA | 	rdbyte	result1, arg01
2b894     02 00 00 FF 
2b898     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b89c     0C FA CD F7 | 	test	result1, #12 wz
2b8a0     20 00 90 AD |  if_e	jmp	#LR__4512
2b8a4     00 09 02 F6 | 	mov	_var05, _var01
2b8a8     00 0B 02 F6 | 	mov	_var06, _var01
2b8ac     01 0A 06 F1 | 	add	_var06, #1
2b8b0     04 0D C2 FA | 	rdbyte	_var07, _var05
2b8b4     05 01 02 F6 | 	mov	_var01, _var06
2b8b8     03 0D 42 FC | 	wrbyte	_var07, _var04
2b8bc     01 06 06 F1 | 	add	_var04, #1
2b8c0     B0 FF 9F FD | 	jmp	#LR__4510
2b8c4                 | LR__4511
2b8c4                 | LR__4512
2b8c4     03 01 48 FC | 	wrbyte	#0, _var04
2b8c8     00 0E 06 F6 | 	mov	_var08, #0
2b8cc     00 05 C2 FA | 	rdbyte	_var03, _var01
2b8d0     2D 04 0E F2 | 	cmp	_var03, #45 wz
2b8d4     01 02 66 A6 |  if_e	neg	_var02, #1
2b8d8     01 00 06 A1 |  if_e	add	_var01, #1
2b8dc     97 28 48 FB | 	callpa	#(@LR__4514-@LR__4513)>>2,fcache_load_ptr_
2b8e0                 | '                 sgn = -1;
2b8e0                 | '                 s++;
2b8e0                 | '         }
2b8e0                 | '         while (isdigit(*s)) {
2b8e0                 | LR__4513
2b8e0     00 13 C2 FA | 	rdbyte	arg01, _var01
2b8e4                 | ' {
2b8e4                 | '   return  (__ctype_get(c) & 0x02 ) ;
2b8e4     80 12 36 F3 | 	fle	arg01, #128 wc
2b8e8                 | '     return __ctype[c];
2b8e8     02 00 00 FF 
2b8ec     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b8f0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b8f4     09 FB C1 FA | 	rdbyte	result1, arg01
2b8f8     02 00 00 FF 
2b8fc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b900     02 FA CD F7 | 	test	result1, #2 wz
2b904     28 00 90 AD |  if_e	jmp	#LR__4515
2b908     07 05 02 F6 | 	mov	_var03, _var08
2b90c     02 04 66 F0 | 	shl	_var03, #2
2b910     07 05 02 F1 | 	add	_var03, _var08
2b914     01 04 66 F0 | 	shl	_var03, #1
2b918     00 09 C2 FA | 	rdbyte	_var05, _var01
2b91c     30 08 86 F1 | 	sub	_var05, #48
2b920     04 05 02 F1 | 	add	_var03, _var05
2b924     02 0F 02 F6 | 	mov	_var08, _var03
2b928     01 00 06 F1 | 	add	_var01, #1
2b92c     B0 FF 9F FD | 	jmp	#LR__4513
2b930                 | LR__4514
2b930                 | LR__4515
2b930     07 00 00 FF 
2b934     10 0E 06 FD | 	qmul	_var08, ##3600
2b938     00 05 C2 FA | 	rdbyte	_var03, _var01
2b93c     3A 04 0E F2 | 	cmp	_var03, #58 wz
2b940     18 10 62 FD | 	getqx	_var09
2b944     70 00 90 5D |  if_ne	jmp	#LR__4519
2b948     00 0E 06 F6 | 	mov	_var08, #0
2b94c     01 00 06 F1 | 	add	_var01, #1
2b950     97 28 48 FB | 	callpa	#(@LR__4517-@LR__4516)>>2,fcache_load_ptr_
2b954                 | '                 x = 0;
2b954                 | '                 s++;
2b954                 | '                 while (isdigit(*s)) {
2b954                 | LR__4516
2b954     00 13 C2 FA | 	rdbyte	arg01, _var01
2b958                 | ' {
2b958                 | '   return  (__ctype_get(c) & 0x02 ) ;
2b958     80 12 36 F3 | 	fle	arg01, #128 wc
2b95c                 | '     return __ctype[c];
2b95c     02 00 00 FF 
2b960     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b964     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b968     09 FB C1 FA | 	rdbyte	result1, arg01
2b96c     02 00 00 FF 
2b970     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b974     02 FA CD F7 | 	test	result1, #2 wz
2b978     28 00 90 AD |  if_e	jmp	#LR__4518
2b97c     07 05 02 F6 | 	mov	_var03, _var08
2b980     02 04 66 F0 | 	shl	_var03, #2
2b984     07 05 02 F1 | 	add	_var03, _var08
2b988     01 04 66 F0 | 	shl	_var03, #1
2b98c     00 09 C2 FA | 	rdbyte	_var05, _var01
2b990     30 08 86 F1 | 	sub	_var05, #48
2b994     04 05 02 F1 | 	add	_var03, _var05
2b998     02 0F 02 F6 | 	mov	_var08, _var03
2b99c     01 00 06 F1 | 	add	_var01, #1
2b9a0     B0 FF 9F FD | 	jmp	#LR__4516
2b9a4                 | LR__4517
2b9a4                 | LR__4518
2b9a4     07 0D 02 F6 | 	mov	_var07, _var08
2b9a8     04 0C 66 F0 | 	shl	_var07, #4
2b9ac     07 0D 82 F1 | 	sub	_var07, _var08
2b9b0     02 0C 66 F0 | 	shl	_var07, #2
2b9b4     06 11 02 F1 | 	add	_var09, _var07
2b9b8                 | LR__4519
2b9b8     02 00 00 FF 
2b9bc     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b9c0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2b9c4     00 13 C2 FA | 	rdbyte	arg01, _var01
2b9c8                 | ' {
2b9c8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b9c8     80 12 36 F3 | 	fle	arg01, #128 wc
2b9cc                 | '     return __ctype[c];
2b9cc     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2b9d0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b9d4     09 FB C1 FA | 	rdbyte	result1, arg01
2b9d8     02 00 00 FF 
2b9dc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b9e0     0C FA CD F7 | 	test	result1, #12 wz
2b9e4     50 00 90 AD |  if_e	jmp	#LR__4522
2b9e8     0A 03 68 FC | 	wrlong	#1, arg02
2b9ec                 | '                 *hasdst = 1;
2b9ec                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2b9ec                 | LR__4520
2b9ec     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2b9f0     44 00 90 AD |  if_e	jmp	#LR__4521
2b9f4     00 13 C2 FA | 	rdbyte	arg01, _var01
2b9f8                 | ' {
2b9f8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b9f8     80 12 36 F3 | 	fle	arg01, #128 wc
2b9fc                 | '     return __ctype[c];
2b9fc     02 00 00 FF 
2ba00     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2ba04     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2ba08     09 FB C1 FA | 	rdbyte	result1, arg01
2ba0c     02 00 00 FF 
2ba10     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ba14     0C FA CD F7 | 	test	result1, #12 wz
2ba18     1C 00 90 AD |  if_e	jmp	#LR__4521
2ba1c     00 0B 02 F6 | 	mov	_var06, _var01
2ba20     01 0A 06 F1 | 	add	_var06, #1
2ba24     00 0D C2 FA | 	rdbyte	_var07, _var01
2ba28     05 01 02 F6 | 	mov	_var01, _var06
2ba2c     03 0D 42 FC | 	wrbyte	_var07, _var04
2ba30     01 06 06 F1 | 	add	_var04, #1
2ba34     B4 FF 9F FD | 	jmp	#LR__4520
2ba38                 | LR__4521
2ba38                 | LR__4522
2ba38     03 01 48 FC | 	wrbyte	#0, _var04
2ba3c     02 00 00 FF 
2ba40     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ba44     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2ba48     02 00 00 FF 
2ba4c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2ba50     20 00 90 AD |  if_e	jmp	#LR__4523
2ba54     02 00 00 FF 
2ba58     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ba5c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ba60     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2ba64     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ba68     02 00 00 FF 
2ba6c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ba70     1C 00 90 FD | 	jmp	#LR__4524
2ba74                 | LR__4523
2ba74     02 00 00 FF 
2ba78     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2ba7c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ba80     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2ba84     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ba88     02 00 00 FF 
2ba8c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ba90                 | LR__4524
2ba90     02 00 00 FF 
2ba94     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ba98     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2ba9c     02 00 00 FF 
2baa0     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2baa4     20 00 90 AD |  if_e	jmp	#LR__4525
2baa8     02 00 00 FF 
2baac     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2bab0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2bab4     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2bab8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2babc     02 00 00 FF 
2bac0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2bac4     1C 00 90 FD | 	jmp	#LR__4526
2bac8                 | LR__4525
2bac8     02 00 00 FF 
2bacc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2bad0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2bad4     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2bad8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2badc     02 00 00 FF 
2bae0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2bae4                 | LR__4526
2bae4     08 03 02 FD | 	qmul	_var02, _var09
2bae8                 | ' 		_tzname[1] = stdname;
2bae8                 | ' 
2bae8                 | '         return sgn * off;
2bae8     18 FA 61 FD | 	getqx	result1
2baec                 | LR__4527
2baec                 | _fatfs_cc___tzoffset_ret
2baec     2D 00 64 FD | 	ret
2baf0                 | 
2baf0                 | _fatfs_cc___indst
2baf0     10 12 06 F1 | 	add	arg01, #16
2baf4     09 01 02 FB | 	rdlong	_var01, arg01
2baf8     10 12 86 F1 | 	sub	arg01, #16
2bafc     02 00 0E F2 | 	cmp	_var01, #2 wz
2bb00     30 00 90 5D |  if_ne	jmp	#LR__4530
2bb04     07 00 06 F6 | 	mov	_var01, #7
2bb08     18 12 06 F1 | 	add	arg01, #24
2bb0c     09 03 02 FB | 	rdlong	_var02, arg01
2bb10     01 01 02 F1 | 	add	_var01, _var02
2bb14     0C 12 86 F1 | 	sub	arg01, #12
2bb18     09 05 02 FB | 	rdlong	_var03, arg01
2bb1c     02 01 82 F1 | 	sub	_var01, _var03
2bb20     00 00 56 F2 | 	cmps	_var01, #0 wc
2bb24                 | '                         return 1;
2bb24     01 FA 05 C6 |  if_b	mov	result1, #1
2bb28     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2bb2c                 | '                 return 0;
2bb2c     00 FA 05 F6 | 	mov	result1, #0
2bb30     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2bb34                 | LR__4530
2bb34     10 12 06 F1 | 	add	arg01, #16
2bb38     09 01 02 FB | 	rdlong	_var01, arg01
2bb3c     10 12 86 F1 | 	sub	arg01, #16
2bb40     0A 00 0E F2 | 	cmp	_var01, #10 wz
2bb44     28 00 90 5D |  if_ne	jmp	#LR__4531
2bb48     18 12 06 F1 | 	add	arg01, #24
2bb4c     09 01 02 FB | 	rdlong	_var01, arg01
2bb50     0C 12 86 F1 | 	sub	arg01, #12
2bb54     09 07 02 FB | 	rdlong	_var04, arg01
2bb58     03 01 82 F1 | 	sub	_var01, _var04
2bb5c     00 00 56 F2 | 	cmps	_var01, #0 wc
2bb60                 | '                         return 0;
2bb60     00 FA 05 C6 |  if_b	mov	result1, #0
2bb64     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2bb68                 | '                 return 1;
2bb68     01 FA 05 F6 | 	mov	result1, #1
2bb6c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2bb70                 | LR__4531
2bb70                 | '         }
2bb70                 | ' 
2bb70                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2bb70     00 00 06 F6 | 	mov	_var01, #0
2bb74     10 12 06 F1 | 	add	arg01, #16
2bb78     09 03 02 FB | 	rdlong	_var02, arg01
2bb7c     10 12 86 F1 | 	sub	arg01, #16
2bb80     03 02 56 F2 | 	cmps	_var02, #3 wc
2bb84     10 00 90 CD |  if_b	jmp	#LR__4532
2bb88     10 12 06 F1 | 	add	arg01, #16
2bb8c     09 05 02 FB | 	rdlong	_var03, arg01
2bb90     0A 04 56 F2 | 	cmps	_var03, #10 wc
2bb94     01 00 06 C6 |  if_b	mov	_var01, #1
2bb98                 | LR__4532
2bb98     00 FB 01 F6 | 	mov	result1, _var01
2bb9c                 | _fatfs_cc___indst_ret
2bb9c     2D 00 64 FD | 	ret
2bba0                 | 
2bba0                 | ' 	
2bba0                 | ' 	FUNCTION pfunc(c as integer) as integer
2bba0                 | ___strs_cl_pfunc
2bba0                 | ' 		if (i < 16) then
2bba0     04 E4 05 F1 | 	add	objptr, #4
2bba4     F2 FA 01 FB | 	rdlong	result1, objptr
2bba8     04 E4 85 F1 | 	sub	objptr, #4
2bbac     10 FA 55 F2 | 	cmps	result1, #16 wc
2bbb0     2C 00 90 3D |  if_ae	jmp	#LR__4540
2bbb4     F2 FA 01 FB | 	rdlong	result1, objptr
2bbb8     04 E4 05 F1 | 	add	objptr, #4
2bbbc     F2 00 02 FB | 	rdlong	_var01, objptr
2bbc0     FD 00 02 F1 | 	add	_var01, result1
2bbc4     00 13 42 FC | 	wrbyte	arg01, _var01
2bbc8     F2 FA 01 FB | 	rdlong	result1, objptr
2bbcc     01 FA 05 F1 | 	add	result1, #1
2bbd0     F2 FA 61 FC | 	wrlong	result1, objptr
2bbd4     04 E4 85 F1 | 	sub	objptr, #4
2bbd8                 | ' 			p(i) = c
2bbd8                 | ' 			i = i+1
2bbd8                 | ' 			return 1
2bbd8     01 FA 05 F6 | 	mov	result1, #1
2bbdc     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2bbe0                 | LR__4540
2bbe0                 | ' 			return -1
2bbe0     01 FA 65 F6 | 	neg	result1, #1
2bbe4                 | ___strs_cl_pfunc_ret
2bbe4     2D 00 64 FD | 	ret
2bbe8                 | 
2bbe8                 | __struct__s_vfs_file_t_putchar
2bbe8     04 4A 05 F6 | 	mov	COUNT_, #4
2bbec     A8 00 A0 FD | 	call	#pushregs_
2bbf0     1C E4 05 F1 | 	add	objptr, #28
2bbf4     F2 1E 0A FB | 	rdlong	local01, objptr wz
2bbf8     1C E4 85 F1 | 	sub	objptr, #28
2bbfc     00 FA 05 A6 |  if_e	mov	result1, #0
2bc00     48 00 90 AD |  if_e	jmp	#LR__4550
2bc04     1C E4 05 F1 | 	add	objptr, #28
2bc08     F2 20 02 FB | 	rdlong	local02, objptr
2bc0c     10 23 02 F6 | 	mov	local03, local02
2bc10     1C E4 85 F1 | 	sub	objptr, #28
2bc14     13 22 46 F7 | 	zerox	local03, #19
2bc18     14 20 46 F0 | 	shr	local02, #20
2bc1c     02 20 66 F0 | 	shl	local02, #2
2bc20     ED 20 02 F1 | 	add	local02, __methods__
2bc24     10 21 02 FB | 	rdlong	local02, local02
2bc28     F2 14 02 F6 | 	mov	arg02, objptr
2bc2c     F2 24 02 F6 | 	mov	local04, objptr
2bc30     11 E5 01 F6 | 	mov	objptr, local03
2bc34     2D 20 62 FD | 	call	local02
2bc38     12 E5 01 F6 | 	mov	objptr, local04
2bc3c                 | '     return (i < 0) ? 0 : 1;
2bc3c     00 FA 55 F2 | 	cmps	result1, #0 wc
2bc40     00 1E 06 C6 |  if_b	mov	local01, #0
2bc44     01 1E 06 36 |  if_ae	mov	local01, #1
2bc48     0F FB 01 F6 | 	mov	result1, local01
2bc4c                 | LR__4550
2bc4c     A7 F0 03 F6 | 	mov	ptra, fp
2bc50     B2 00 A0 FD | 	call	#popregs_
2bc54                 | __struct__s_vfs_file_t_putchar_ret
2bc54     2D 00 64 FD | 	ret
2bc58                 | 
2bc58                 | __struct__s_vfs_file_t_getchar
2bc58     03 4A 05 F6 | 	mov	COUNT_, #3
2bc5c     A8 00 A0 FD | 	call	#pushregs_
2bc60     20 E4 05 F1 | 	add	objptr, #32
2bc64     F2 12 0A FB | 	rdlong	arg01, objptr wz
2bc68     20 E4 85 F1 | 	sub	objptr, #32
2bc6c     01 FA 65 A6 |  if_e	neg	result1, #1
2bc70     38 00 90 AD |  if_e	jmp	#LR__4560
2bc74                 | '     return getcf(__this);
2bc74     20 E4 05 F1 | 	add	objptr, #32
2bc78     F2 1E 02 FB | 	rdlong	local01, objptr
2bc7c     0F 21 02 F6 | 	mov	local02, local01
2bc80     20 E4 85 F1 | 	sub	objptr, #32
2bc84     13 20 46 F7 | 	zerox	local02, #19
2bc88     14 1E 46 F0 | 	shr	local01, #20
2bc8c     02 1E 66 F0 | 	shl	local01, #2
2bc90     ED 1E 02 F1 | 	add	local01, __methods__
2bc94     0F 1F 02 FB | 	rdlong	local01, local01
2bc98     F2 12 02 F6 | 	mov	arg01, objptr
2bc9c     F2 22 02 F6 | 	mov	local03, objptr
2bca0     10 E5 01 F6 | 	mov	objptr, local02
2bca4     2D 1E 62 FD | 	call	local01
2bca8     11 E5 01 F6 | 	mov	objptr, local03
2bcac                 | LR__4560
2bcac     A7 F0 03 F6 | 	mov	ptra, fp
2bcb0     B2 00 A0 FD | 	call	#popregs_
2bcb4                 | __struct__s_vfs_file_t_getchar_ret
2bcb4     2D 00 64 FD | 	ret
2bcb8                 | 
2bcb8                 | __struct___bas_wrap_sender_tx
2bcb8     03 4A 05 F6 | 	mov	COUNT_, #3
2bcbc     A8 00 A0 FD | 	call	#pushregs_
2bcc0     F2 1E 02 FB | 	rdlong	local01, objptr
2bcc4     0F 21 02 F6 | 	mov	local02, local01
2bcc8     13 1E 46 F7 | 	zerox	local01, #19
2bccc     14 20 46 F0 | 	shr	local02, #20
2bcd0     02 20 66 F0 | 	shl	local02, #2
2bcd4     ED 20 02 F1 | 	add	local02, __methods__
2bcd8     10 21 02 FB | 	rdlong	local02, local02
2bcdc     F2 22 02 F6 | 	mov	local03, objptr
2bce0     0F E5 01 F6 | 	mov	objptr, local01
2bce4     2D 20 62 FD | 	call	local02
2bce8     11 E5 01 F6 | 	mov	objptr, local03
2bcec     01 FA 05 F6 | 	mov	result1, #1
2bcf0     A7 F0 03 F6 | 	mov	ptra, fp
2bcf4     B2 00 A0 FD | 	call	#popregs_
2bcf8                 | __struct___bas_wrap_sender_tx_ret
2bcf8     2D 00 64 FD | 	ret
2bcfc                 | 
2bcfc                 | __struct___bas_wrap_sender_rx
2bcfc     03 4A 05 F6 | 	mov	COUNT_, #3
2bd00     A8 00 A0 FD | 	call	#pushregs_
2bd04     04 E4 05 F1 | 	add	objptr, #4
2bd08     F2 1E 02 FB | 	rdlong	local01, objptr
2bd0c     0F 21 02 F6 | 	mov	local02, local01
2bd10     04 E4 85 F1 | 	sub	objptr, #4
2bd14     13 20 46 F7 | 	zerox	local02, #19
2bd18     14 1E 46 F0 | 	shr	local01, #20
2bd1c     02 1E 66 F0 | 	shl	local01, #2
2bd20     ED 1E 02 F1 | 	add	local01, __methods__
2bd24     0F 1F 02 FB | 	rdlong	local01, local01
2bd28     F2 22 02 F6 | 	mov	local03, objptr
2bd2c     10 E5 01 F6 | 	mov	objptr, local02
2bd30     2D 1E 62 FD | 	call	local01
2bd34     11 E5 01 F6 | 	mov	objptr, local03
2bd38     A7 F0 03 F6 | 	mov	ptra, fp
2bd3c     B2 00 A0 FD | 	call	#popregs_
2bd40                 | __struct___bas_wrap_sender_rx_ret
2bd40     2D 00 64 FD | 	ret
2bd44                 | 
2bd44                 | __struct___bas_wrap_sender_close
2bd44     03 4A 05 F6 | 	mov	COUNT_, #3
2bd48     A8 00 A0 FD | 	call	#pushregs_
2bd4c     08 E4 05 F1 | 	add	objptr, #8
2bd50     F2 1E 02 FB | 	rdlong	local01, objptr
2bd54     0F 21 02 F6 | 	mov	local02, local01
2bd58     08 E4 85 F1 | 	sub	objptr, #8
2bd5c     13 20 46 F7 | 	zerox	local02, #19
2bd60     14 1E 46 F0 | 	shr	local01, #20
2bd64     02 1E 66 F0 | 	shl	local01, #2
2bd68     ED 1E 02 F1 | 	add	local01, __methods__
2bd6c     0F 1F 02 FB | 	rdlong	local01, local01
2bd70     F2 22 02 F6 | 	mov	local03, objptr
2bd74     10 E5 01 F6 | 	mov	objptr, local02
2bd78     2D 1E 62 FD | 	call	local01
2bd7c     11 E5 01 F6 | 	mov	objptr, local03
2bd80     A7 F0 03 F6 | 	mov	ptra, fp
2bd84     B2 00 A0 FD | 	call	#popregs_
2bd88                 | __struct___bas_wrap_sender_close_ret
2bd88     2D 00 64 FD | 	ret
2bd8c                 | 
2bd8c                 | LR__4570
2bd8c     2F          | 	byte	"/"
2bd8d     00          | 	byte	0
2bd8e                 | LR__4571
2bd8e     69 6E 66    | 	byte	"inf"
2bd91     00          | 	byte	0
2bd92                 | LR__4572
2bd92     6E 61 6E    | 	byte	"nan"
2bd95     00          | 	byte	0
2bd96                 | LR__4573
2bd96                 | 	byte	
2bd96     00          | 	byte	0
2bd97                 | LR__4574
2bd97                 | 	byte	
2bd97     00          | 	byte	0
2bd98                 | LR__4575
2bd98                 | 	byte	
2bd98     00          | 	byte	0
2bd99                 | LR__4576
2bd99                 | 	byte	
2bd99     00          | 	byte	0
2bd9a                 | LR__4577
2bd9a                 | 	byte	
2bd9a     00          | 	byte	0
2bd9b                 | LR__4578
2bd9b                 | 	byte	
2bd9b     00          | 	byte	0
2bd9c                 | LR__4579
2bd9c                 | 	byte	
2bd9c     00          | 	byte	0
2bd9d                 | LR__4580
2bd9d                 | 	byte	
2bd9d     00          | 	byte	0
2bd9e                 | LR__4581
2bd9e     00          | 	byte	0
2bd9f     00          | 	byte	0
2bda0                 | LR__4582
2bda0     00          | 	byte	0
2bda1     00          | 	byte	0
2bda2                 | LR__4583
2bda2     00          | 	byte	0
2bda3     00          | 	byte	0
2bda4                 | LR__4584
2bda4     20 21 21 21 
2bda8     20 63 6F 72 
2bdac     72 75 70 74 
2bdb0     65 64 20 68 
2bdb4     65 61 70 3F 
2bdb8     3F 3F 20 21 
2bdbc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2bdbf     00          | 	byte	0
2bdc0                 | LR__4585
2bdc0     20 21 21 21 
2bdc4     20 6F 75 74 
2bdc8     20 6F 66 20 
2bdcc     68 65 61 70 
2bdd0     20 6D 65 6D 
2bdd4     6F 72 79 20 
2bdd8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2bddc     00          | 	byte	0
2bddd                 | LR__4586
2bddd     20 21 21 21 
2bde1     20 63 6F 72 
2bde5     72 75 70 74 
2bde9     65 64 20 68 
2bded     65 61 70 20 
2bdf1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2bdf5     00          | 	byte	0
2bdf6                 | LR__4587
2bdf6     00          | 	byte	0
2bdf7     00          | 	byte	0
2bdf8                 | LR__4588
2bdf8     2E          | 	byte	"."
2bdf9     00          | 	byte	0
2bdfa                 | LR__4589
2bdfa     00          | 	byte	0
2bdfb     00          | 	byte	0
2bdfc                 | LR__4590
2bdfc     00          | 	byte	0
2bdfd     00          | 	byte	0
2bdfe                 | LR__4591
2bdfe     00          | 	byte	0
2bdff     00          | 	byte	0
2be00                 | LR__4592
2be00     2A 3A 3C 3E 
2be04     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2be08     00          | 	byte	0
2be09                 | LR__4593
2be09     2B 2C 3B 3D 
2be0d     5B 5D       | 	byte	"+,;=[]"
2be0f     00          | 	byte	0
2be10                 | LR__4594
2be10     46 41 54 33 
2be14     32 20 20 20 | 	byte	"FAT32   "
2be18     00          | 	byte	0
2be19                 | LR__4595
2be19     54 5A       | 	byte	"TZ"
2be1b     00          | 	byte	0
2be1c                 | LR__4596
2be1c     00          | 	byte	0
2be1d     00          | 	byte	0
2be1e                 | LR__4597
2be1e                 | 	byte	
2be1e     00          | 	byte	0
2be1f                 | LR__4598
2be1f                 | 	byte	
2be1f     00          | 	byte	0
2be20                 | LR__4599
2be20     22          | 	byte	34
2be21     00          | 	byte	0
2be22                 | LR__4600
2be22     22          | 	byte	34
2be23     00          | 	byte	0
2be24                 | LR__4601
2be24     3A          | 	byte	":"
2be25     00          | 	byte	0
2be26                 | LR__4602
2be26                 | 	byte	
2be26     00          | 	byte	0
2be27                 | LR__4603
2be27                 | 	byte	
2be27     00          | 	byte	0
2be28                 | LR__4604
2be28                 | 	byte	
2be28     00          | 	byte	0
2be29                 | LR__4605
2be29                 | 	byte	
2be29     00          | 	byte	0
2be2a                 | LR__4606
2be2a                 | 	byte	
2be2a     00          | 	byte	0
2be2b                 | LR__4607
2be2b                 | 	byte	
2be2b     00          | 	byte	0
2be2c                 | LR__4608
2be2c                 | 	byte	
2be2c     00          | 	byte	0
2be2d                 | LR__4609
2be2d     22          | 	byte	34
2be2e     00          | 	byte	0
2be2f                 | LR__4610
2be2f     22          | 	byte	34
2be30     00          | 	byte	0
2be31                 | LR__4611
2be31     22          | 	byte	34
2be32     00          | 	byte	0
2be33                 | LR__4612
2be33     22          | 	byte	34
2be34     00          | 	byte	0
2be35                 | LR__4613
2be35     22          | 	byte	34
2be36     00          | 	byte	0
2be37                 | LR__4614
2be37     3E          | 	byte	">"
2be38     00          | 	byte	0
2be39                 | LR__4615
2be39     3C          | 	byte	"<"
2be3a     00          | 	byte	0
2be3b                 | LR__4616
2be3b     2B          | 	byte	"+"
2be3c     00          | 	byte	0
2be3d                 | LR__4617
2be3d     2D          | 	byte	"-"
2be3e     00          | 	byte	0
2be3f                 | LR__4618
2be3f     2A          | 	byte	"*"
2be40     00          | 	byte	0
2be41                 | LR__4619
2be41     2F          | 	byte	"/"
2be42     00          | 	byte	0
2be43                 | LR__4620
2be43     5E          | 	byte	"^"
2be44     00          | 	byte	0
2be45                 | LR__4621
2be45     3D          | 	byte	"="
2be46     00          | 	byte	0
2be47                 | LR__4622
2be47     2B          | 	byte	"+"
2be48     00          | 	byte	0
2be49                 | LR__4623
2be49     2B          | 	byte	"+"
2be4a     00          | 	byte	0
2be4b                 | LR__4624
2be4b     2D          | 	byte	"-"
2be4c     00          | 	byte	0
2be4d                 | LR__4625
2be4d     2D          | 	byte	"-"
2be4e     00          | 	byte	0
2be4f                 | LR__4626
2be4f     3C          | 	byte	"<"
2be50     00          | 	byte	0
2be51                 | LR__4627
2be51     3E          | 	byte	">"
2be52     00          | 	byte	0
2be53                 | LR__4628
2be53     22          | 	byte	34
2be54     00          | 	byte	0
2be55                 | LR__4629
2be55     22          | 	byte	34
2be56     00          | 	byte	0
2be57                 | LR__4630
2be57     2E          | 	byte	"."
2be58     00          | 	byte	0
2be59                 | LR__4631
2be59     3F          | 	byte	"?"
2be5a     00          | 	byte	0
2be5b                 | LR__4632
2be5b     3F          | 	byte	"?"
2be5c     00          | 	byte	0
2be5d                 | LR__4633
2be5d     6D 6F 75 73 
2be61     65          | 	byte	"mouse"
2be62     00          | 	byte	0
2be63                 | LR__4634
2be63     63 75 72 73 
2be67     6F 72       | 	byte	"cursor"
2be69     00          | 	byte	0
2be6a                 | LR__4635
2be6a     63 6C 69 63 
2be6e     6B          | 	byte	"click"
2be6f     00          | 	byte	0
2be70                 | LR__4636
2be70     6F 6E       | 	byte	"on"
2be72     00          | 	byte	0
2be73                 | LR__4637
2be73     31          | 	byte	"1"
2be74     00          | 	byte	0
2be75                 | LR__4638
2be75     6F 66 66    | 	byte	"off"
2be78     00          | 	byte	0
2be79                 | LR__4639
2be79     30          | 	byte	"0"
2be7a     00          | 	byte	0
2be7b                 | LR__4640
2be7b     6D 6F 64 65 | 	byte	"mode"
2be7f     00          | 	byte	0
2be80                 | LR__4641
2be80     6D 2E       | 	byte	"m."
2be82     00          | 	byte	0
2be83                 | LR__4642
2be83     61 74 61 72 
2be87     69          | 	byte	"atari"
2be88     00          | 	byte	0
2be89                 | LR__4643
2be89     30          | 	byte	"0"
2be8a     00          | 	byte	0
2be8b                 | LR__4644
2be8b     70 63 5F 61 
2be8f     6D 62 65 72 | 	byte	"pc_amber"
2be93     00          | 	byte	0
2be94                 | LR__4645
2be94     31          | 	byte	"1"
2be95     00          | 	byte	0
2be96                 | LR__4646
2be96     70 63 5F 67 
2be9a     72 65 65 6E | 	byte	"pc_green"
2be9e     00          | 	byte	0
2be9f                 | LR__4647
2be9f     32          | 	byte	"2"
2bea0     00          | 	byte	0
2bea1                 | LR__4648
2bea1     70 63 5F 77 
2bea5     68 69 74 65 | 	byte	"pc_white"
2bea9     00          | 	byte	0
2beaa                 | LR__4649
2beaa     33          | 	byte	"3"
2beab     00          | 	byte	0
2beac                 | LR__4650
2beac     73 74       | 	byte	"st"
2beae     00          | 	byte	0
2beaf                 | LR__4651
2beaf     34          | 	byte	"4"
2beb0     00          | 	byte	0
2beb1                 | LR__4652
2beb1                 | 	byte	
2beb1     00          | 	byte	0
2beb2                 | LR__4653
2beb2     6C 6F 61 64 | 	byte	"load"
2beb6     00          | 	byte	0
2beb7                 | LR__4654
2beb7     73 61 76 65 | 	byte	"save"
2bebb     00          | 	byte	0
2bebc                 | LR__4655
2bebc     62 72 75 6E | 	byte	"brun"
2bec0     00          | 	byte	0
2bec1                 | LR__4656
2bec1     72 75 6E    | 	byte	"run"
2bec4     00          | 	byte	0
2bec5                 | LR__4657
2bec5     6C 6F 2E    | 	byte	"lo."
2bec8     00          | 	byte	0
2bec9                 | LR__4658
2bec9     73 2E       | 	byte	"s."
2becb     00          | 	byte	0
2becc                 | LR__4659
2becc     62 72 2E    | 	byte	"br."
2becf     00          | 	byte	0
2bed0                 | LR__4660
2bed0                 | 	byte	
2bed0     00          | 	byte	0
2bed1                 | LR__4661
2bed1                 | 	byte	
2bed1     00          | 	byte	0
2bed2                 | LR__4662
2bed2                 | 	byte	
2bed2     00          | 	byte	0
2bed3                 | LR__4663
2bed3                 | 	byte	
2bed3     00          | 	byte	0
2bed4                 | LR__4664
2bed4     20 55 73 65 
2bed8     72 20 66 75 
2bedc     6E 63 74 69 
2bee0     6F 6E 73 20 
2bee4     61 6E 64 20 
2bee8     61 72 72 61 
2beec     79 73 20 6E 
2bef0     6F 74 20 79 
2bef4     65 74 20 69 
2bef8     6D 70 6C 65 
2befc     6D 65 6E 74 
2bf00     65 64       | 	byte	" User functions and arrays not yet implemented"
2bf02     00          | 	byte	0
2bf03                 | LR__4665
2bf03                 | 	byte	
2bf03     00          | 	byte	0
2bf04                 | LR__4666
2bf04                 | 	byte	
2bf04     00          | 	byte	0
2bf05                 | LR__4667
2bf05     52 65 61 64 
2bf09     79          | 	byte	"Ready"
2bf0a     00          | 	byte	0
2bf0b                 | LR__4668
2bf0b     2B          | 	byte	"+"
2bf0c     00          | 	byte	0
2bf0d                 | LR__4669
2bf0d     2D          | 	byte	"-"
2bf0e     00          | 	byte	0
2bf0f                 | LR__4670
2bf0f     6F 72       | 	byte	"or"
2bf11     00          | 	byte	0
2bf12                 | LR__4671
2bf12     78 6F 72    | 	byte	"xor"
2bf15     00          | 	byte	0
2bf16                 | LR__4672
2bf16     2A          | 	byte	"*"
2bf17     00          | 	byte	0
2bf18                 | LR__4673
2bf18     2F          | 	byte	"/"
2bf19     00          | 	byte	0
2bf1a                 | LR__4674
2bf1a     61 6E 64    | 	byte	"and"
2bf1d     00          | 	byte	0
2bf1e                 | LR__4675
2bf1e     64 69 76    | 	byte	"div"
2bf21     00          | 	byte	0
2bf22                 | LR__4676
2bf22     6D 6F 64    | 	byte	"mod"
2bf25     00          | 	byte	0
2bf26                 | LR__4677
2bf26     73 68 6C    | 	byte	"shl"
2bf29     00          | 	byte	0
2bf2a                 | LR__4678
2bf2a     73 68 72    | 	byte	"shr"
2bf2d     00          | 	byte	0
2bf2e                 | LR__4679
2bf2e     5E          | 	byte	"^"
2bf2f     00          | 	byte	0
2bf30                 | LR__4680
2bf30     6E 6F 74    | 	byte	"not"
2bf33     00          | 	byte	0
2bf34                 | LR__4681
2bf34     40          | 	byte	"@"
2bf35     00          | 	byte	0
2bf36                 | LR__4682
2bf36     3D          | 	byte	"="
2bf37     00          | 	byte	0
2bf38                 | LR__4683
2bf38     3E 3D       | 	byte	">="
2bf3a     00          | 	byte	0
2bf3b                 | LR__4684
2bf3b     3C 3D       | 	byte	"<="
2bf3d     00          | 	byte	0
2bf3e                 | LR__4685
2bf3e     3C          | 	byte	"<"
2bf3f     00          | 	byte	0
2bf40                 | LR__4686
2bf40     3E          | 	byte	">"
2bf41     00          | 	byte	0
2bf42                 | LR__4687
2bf42     3C 3E       | 	byte	"<>"
2bf44     00          | 	byte	0
2bf45                 | LR__4688
2bf45     2B 2B       | 	byte	"++"
2bf47     00          | 	byte	0
2bf48                 | LR__4689
2bf48     2D 2D       | 	byte	"--"
2bf4a     00          | 	byte	0
2bf4b                 | LR__4690
2bf4b     23          | 	byte	"#"
2bf4c     00          | 	byte	0
2bf4d                 | LR__4691
2bf4d     23          | 	byte	"#"
2bf4e     00          | 	byte	0
2bf4f                 | LR__4692
2bf4f     2D          | 	byte	"-"
2bf50     00          | 	byte	0
2bf51                 | LR__4693
2bf51     30          | 	byte	"0"
2bf52     00          | 	byte	0
2bf53                 | LR__4694
2bf53     63          | 	byte	"c"
2bf54     00          | 	byte	0
2bf55                 | LR__4695
2bf55     63 23       | 	byte	"c#"
2bf57     00          | 	byte	0
2bf58                 | LR__4696
2bf58     64          | 	byte	"d"
2bf59     00          | 	byte	0
2bf5a                 | LR__4697
2bf5a     64 23       | 	byte	"d#"
2bf5c     00          | 	byte	0
2bf5d                 | LR__4698
2bf5d     65          | 	byte	"e"
2bf5e     00          | 	byte	0
2bf5f                 | LR__4699
2bf5f     66          | 	byte	"f"
2bf60     00          | 	byte	0
2bf61                 | LR__4700
2bf61     66 23       | 	byte	"f#"
2bf63     00          | 	byte	0
2bf64                 | LR__4701
2bf64     67          | 	byte	"g"
2bf65     00          | 	byte	0
2bf66                 | LR__4702
2bf66     67 23       | 	byte	"g#"
2bf68     00          | 	byte	0
2bf69                 | LR__4703
2bf69     61          | 	byte	"a"
2bf6a     00          | 	byte	0
2bf6b                 | LR__4704
2bf6b     61 23       | 	byte	"a#"
2bf6d     00          | 	byte	0
2bf6e                 | LR__4705
2bf6e     68          | 	byte	"h"
2bf6f     00          | 	byte	0
2bf70                 | LR__4706
2bf70     62          | 	byte	"b"
2bf71     00          | 	byte	0
2bf72                 | LR__4707
2bf72     2B          | 	byte	"+"
2bf73     00          | 	byte	0
2bf74                 | LR__4708
2bf74     2D          | 	byte	"-"
2bf75     00          | 	byte	0
2bf76                 | LR__4709
2bf76     3D          | 	byte	"="
2bf77     00          | 	byte	0
2bf78                 | LR__4710
2bf78     2C          | 	byte	","
2bf79     00          | 	byte	0
2bf7a                 | LR__4711
2bf7a     2A          | 	byte	"*"
2bf7b     00          | 	byte	0
2bf7c                 | LR__4712
2bf7c     2F          | 	byte	"/"
2bf7d     00          | 	byte	0
2bf7e                 | LR__4713
2bf7e     3B          | 	byte	";"
2bf7f     00          | 	byte	0
2bf80                 | LR__4714
2bf80     22          | 	byte	34
2bf81     00          | 	byte	0
2bf82                 | LR__4715
2bf82     5E          | 	byte	"^"
2bf83     00          | 	byte	0
2bf84                 | LR__4716
2bf84     29          | 	byte	")"
2bf85     00          | 	byte	0
2bf86                 | LR__4717
2bf86     28          | 	byte	"("
2bf87     00          | 	byte	0
2bf88                 | LR__4718
2bf88     3A          | 	byte	":"
2bf89     00          | 	byte	0
2bf8a                 | LR__4719
2bf8a     20          | 	byte	" "
2bf8b     00          | 	byte	0
2bf8c                 | LR__4720
2bf8c     3E          | 	byte	">"
2bf8d     00          | 	byte	0
2bf8e                 | LR__4721
2bf8e     3C          | 	byte	"<"
2bf8f     00          | 	byte	0
2bf90                 | LR__4722
2bf90     3D          | 	byte	"="
2bf91     00          | 	byte	0
2bf92                 | LR__4723
2bf92     62 65 65 70 | 	byte	"beep"
2bf96     00          | 	byte	0
2bf97                 | LR__4724
2bf97     62 2E       | 	byte	"b."
2bf99     00          | 	byte	0
2bf9a                 | LR__4725
2bf9a     62 6F 78    | 	byte	"box"
2bf9d     00          | 	byte	0
2bf9e                 | LR__4726
2bf9e     62 72 75 6E | 	byte	"brun"
2bfa2     00          | 	byte	0
2bfa3                 | LR__4727
2bfa3     62 72 2E    | 	byte	"br."
2bfa6     00          | 	byte	0
2bfa7                 | LR__4728
2bfa7     63 69 72 63 
2bfab     6C 65       | 	byte	"circle"
2bfad     00          | 	byte	0
2bfae                 | LR__4729
2bfae     63 69 2E    | 	byte	"ci."
2bfb1     00          | 	byte	0
2bfb2                 | LR__4730
2bfb2     63 6C 69 63 
2bfb6     6B          | 	byte	"click"
2bfb7     00          | 	byte	0
2bfb8                 | LR__4731
2bfb8     63 6C 73    | 	byte	"cls"
2bfbb     00          | 	byte	0
2bfbc                 | LR__4732
2bfbc     63 6F 6C 6F 
2bfc0     72          | 	byte	"color"
2bfc1     00          | 	byte	0
2bfc2                 | LR__4733
2bfc2     63 2E       | 	byte	"c."
2bfc4     00          | 	byte	0
2bfc5                 | LR__4734
2bfc5     63 73 61 76 
2bfc9     65          | 	byte	"csave"
2bfca     00          | 	byte	0
2bfcb                 | LR__4735
2bfcb     63 73 2E    | 	byte	"cs."
2bfce     00          | 	byte	0
2bfcf                 | LR__4736
2bfcf     63 75 72 73 
2bfd3     6F 72       | 	byte	"cursor"
2bfd5     00          | 	byte	0
2bfd6                 | LR__4737
2bfd6     64 65 66 73 
2bfda     6E 64       | 	byte	"defsnd"
2bfdc     00          | 	byte	0
2bfdd                 | LR__4738
2bfdd     64 65 66 65 
2bfe1     6E 76       | 	byte	"defenv"
2bfe3     00          | 	byte	0
2bfe4                 | LR__4739
2bfe4     64 65 66 73 
2bfe8     70 72 69 74 
2bfec     65          | 	byte	"defsprite"
2bfed     00          | 	byte	0
2bfee                 | LR__4740
2bfee     64 73 2E    | 	byte	"ds."
2bff1     00          | 	byte	0
2bff2                 | LR__4741
2bff2     64 65 67    | 	byte	"deg"
2bff5     00          | 	byte	0
2bff6                 | LR__4742
2bff6     64 69 6D    | 	byte	"dim"
2bff9     00          | 	byte	0
2bffa                 | LR__4743
2bffa     64 69 72    | 	byte	"dir"
2bffd     00          | 	byte	0
2bffe                 | LR__4744
2bffe     64 70 6F 6B 
2c002     65          | 	byte	"dpoke"
2c003     00          | 	byte	0
2c004                 | LR__4745
2c004     64 72 61 77 | 	byte	"draw"
2c008     00          | 	byte	0
2c009                 | LR__4746
2c009     64 72 2E    | 	byte	"dr."
2c00c     00          | 	byte	0
2c00d                 | LR__4747
2c00d     65 6C 73 65 | 	byte	"else"
2c011     00          | 	byte	0
2c012                 | LR__4748
2c012     66 63 69 72 
2c016     63 6C 65    | 	byte	"fcircle"
2c019     00          | 	byte	0
2c01a                 | LR__4749
2c01a     66 63 2E    | 	byte	"fc."
2c01d     00          | 	byte	0
2c01e                 | LR__4750
2c01e     66 69 6C 6C | 	byte	"fill"
2c022     00          | 	byte	0
2c023                 | LR__4751
2c023     66 69 2E    | 	byte	"fi."
2c026     00          | 	byte	0
2c027                 | LR__4752
2c027     66 6F 6E 74 | 	byte	"font"
2c02b     00          | 	byte	0
2c02c                 | LR__4753
2c02c     66 6F 72    | 	byte	"for"
2c02f     00          | 	byte	0
2c030                 | LR__4754
2c030     66 2E       | 	byte	"f."
2c032     00          | 	byte	0
2c033                 | LR__4755
2c033     66 72 61 6D 
2c037     65          | 	byte	"frame"
2c038     00          | 	byte	0
2c039                 | LR__4756
2c039     66 72 2E    | 	byte	"fr."
2c03c     00          | 	byte	0
2c03d                 | LR__4757
2c03d     67 6F 74 6F | 	byte	"goto"
2c041     00          | 	byte	0
2c042                 | LR__4758
2c042     67 2E       | 	byte	"g."
2c044     00          | 	byte	0
2c045                 | LR__4759
2c045     69 66       | 	byte	"if"
2c047     00          | 	byte	0
2c048                 | LR__4760
2c048     69 6E 6B    | 	byte	"ink"
2c04b     00          | 	byte	0
2c04c                 | LR__4761
2c04c     69 2E       | 	byte	"i."
2c04e     00          | 	byte	0
2c04f                 | LR__4762
2c04f     69 6E 74    | 	byte	"int"
2c052     00          | 	byte	0
2c053                 | LR__4763
2c053     6C 69 73 74 | 	byte	"list"
2c057     00          | 	byte	0
2c058                 | LR__4764
2c058     6C 2E       | 	byte	"l."
2c05a     00          | 	byte	0
2c05b                 | LR__4765
2c05b     6C 6F 61 64 | 	byte	"load"
2c05f     00          | 	byte	0
2c060                 | LR__4766
2c060     6C 6F 2E    | 	byte	"lo."
2c063     00          | 	byte	0
2c064                 | LR__4767
2c064     6C 70 6F 6B 
2c068     65          | 	byte	"lpoke"
2c069     00          | 	byte	0
2c06a                 | LR__4768
2c06a     6D 6F 64 65 | 	byte	"mode"
2c06e     00          | 	byte	0
2c06f                 | LR__4769
2c06f     6D 2E       | 	byte	"m."
2c071     00          | 	byte	0
2c072                 | LR__4770
2c072     6D 6F 75 73 
2c076     65          | 	byte	"mouse"
2c077     00          | 	byte	0
2c078                 | LR__4771
2c078     6E 65 77    | 	byte	"new"
2c07b     00          | 	byte	0
2c07c                 | LR__4772
2c07c     6E 65 78 74 | 	byte	"next"
2c080     00          | 	byte	0
2c081                 | LR__4773
2c081     6E 2E       | 	byte	"n."
2c083     00          | 	byte	0
2c084                 | LR__4774
2c084     70 61 70 65 
2c088     72          | 	byte	"paper"
2c089     00          | 	byte	0
2c08a                 | LR__4775
2c08a     70 2E       | 	byte	"p."
2c08c     00          | 	byte	0
2c08d                 | LR__4776
2c08d     70 69 6E 66 
2c091     6C 6F 61 74 | 	byte	"pinfloat"
2c095     00          | 	byte	0
2c096                 | LR__4777
2c096     70 69 6E 68 
2c09a     69          | 	byte	"pinhi"
2c09b     00          | 	byte	0
2c09c                 | LR__4778
2c09c     70 69 6E 6C 
2c0a0     6F          | 	byte	"pinlo"
2c0a1     00          | 	byte	0
2c0a2                 | LR__4779
2c0a2     70 69 6E 73 
2c0a6     74 61 72 74 | 	byte	"pinstart"
2c0aa     00          | 	byte	0
2c0ab                 | LR__4780
2c0ab     70 69 6E 74 
2c0af     6F 67 67 6C 
2c0b3     65          | 	byte	"pintoggle"
2c0b4     00          | 	byte	0
2c0b5                 | LR__4781
2c0b5     70 69 6E 77 
2c0b9     72 69 74 65 | 	byte	"pinwrite"
2c0bd     00          | 	byte	0
2c0be                 | LR__4782
2c0be     70 6C 61 79 | 	byte	"play"
2c0c2     00          | 	byte	0
2c0c3                 | LR__4783
2c0c3     70 6C 6F 74 | 	byte	"plot"
2c0c7     00          | 	byte	0
2c0c8                 | LR__4784
2c0c8     70 6C 2E    | 	byte	"pl."
2c0cb     00          | 	byte	0
2c0cc                 | LR__4785
2c0cc     70 6F 6B 65 | 	byte	"poke"
2c0d0     00          | 	byte	0
2c0d1                 | LR__4786
2c0d1     70 6F 73 69 
2c0d5     74 69 6F 6E | 	byte	"position"
2c0d9     00          | 	byte	0
2c0da                 | LR__4787
2c0da     70 6F 73 2E | 	byte	"pos."
2c0de     00          | 	byte	0
2c0df                 | LR__4788
2c0df     70 72 69 6E 
2c0e3     74          | 	byte	"print"
2c0e4     00          | 	byte	0
2c0e5                 | LR__4789
2c0e5     3F          | 	byte	"?"
2c0e6     00          | 	byte	0
2c0e7                 | LR__4790
2c0e7     72 61 64    | 	byte	"rad"
2c0ea     00          | 	byte	0
2c0eb                 | LR__4791
2c0eb     72 65 6C 65 
2c0ef     61 73 65    | 	byte	"release"
2c0f2     00          | 	byte	0
2c0f3                 | LR__4792
2c0f3     72 75 6E    | 	byte	"run"
2c0f6     00          | 	byte	0
2c0f7                 | LR__4793
2c0f7     73 61 76 65 | 	byte	"save"
2c0fb     00          | 	byte	0
2c0fc                 | LR__4794
2c0fc     73 2E       | 	byte	"s."
2c0fe     00          | 	byte	0
2c0ff                 | LR__4795
2c0ff     73 65 74 64 
2c103     65 6C 61 79 | 	byte	"setdelay"
2c107     00          | 	byte	0
2c108                 | LR__4796
2c108     73 65 74 65 
2c10c     6E 76       | 	byte	"setenv"
2c10e     00          | 	byte	0
2c10f                 | LR__4797
2c10f     73 65 74 6C 
2c113     65 6E       | 	byte	"setlen"
2c115     00          | 	byte	0
2c116                 | LR__4798
2c116     73 65 74 70 
2c11a     61 6E       | 	byte	"setpan"
2c11c     00          | 	byte	0
2c11d                 | LR__4799
2c11d     73 65 74 73 
2c121     75 73 74 61 
2c125     69 6E       | 	byte	"setsustain"
2c127     00          | 	byte	0
2c128                 | LR__4800
2c128     73 65 74 76 
2c12c     6F 6C       | 	byte	"setvol"
2c12e     00          | 	byte	0
2c12f                 | LR__4801
2c12f     73 65 74 77 
2c133     61 76 65    | 	byte	"setwave"
2c136     00          | 	byte	0
2c137                 | LR__4802
2c137     73 6F 75 6E 
2c13b     64          | 	byte	"sound"
2c13c     00          | 	byte	0
2c13d                 | LR__4803
2c13d     73 6F 2E    | 	byte	"so."
2c140     00          | 	byte	0
2c141                 | LR__4804
2c141     73 70 72 69 
2c145     74 65       | 	byte	"sprite"
2c147     00          | 	byte	0
2c148                 | LR__4805
2c148     73 70 2E    | 	byte	"sp."
2c14b     00          | 	byte	0
2c14c                 | LR__4806
2c14c     74 68 65 6E | 	byte	"then"
2c150     00          | 	byte	0
2c151                 | LR__4807
2c151     77 61 69 74 
2c155     6D 73       | 	byte	"waitms"
2c157     00          | 	byte	0
2c158                 | LR__4808
2c158     77 61 69 74 
2c15c     63 6C 6F 63 
2c160     6B          | 	byte	"waitclock"
2c161     00          | 	byte	0
2c162                 | LR__4809
2c162     77 63 2E    | 	byte	"wc."
2c165     00          | 	byte	0
2c166                 | LR__4810
2c166     77 61 69 74 
2c16a     76 62 6C    | 	byte	"waitvbl"
2c16d     00          | 	byte	0
2c16e                 | LR__4811
2c16e     77 76 2E    | 	byte	"wv."
2c171     00          | 	byte	0
2c172                 | LR__4812
2c172     77 78 70 69 
2c176     6E          | 	byte	"wxpin"
2c177     00          | 	byte	0
2c178                 | LR__4813
2c178     77 79 70 69 
2c17c     6E          | 	byte	"wypin"
2c17d     00          | 	byte	0
2c17e                 | LR__4814
2c17e     61 62 73    | 	byte	"abs"
2c181     00          | 	byte	0
2c182                 | LR__4815
2c182     61 63 6F 73 | 	byte	"acos"
2c186     00          | 	byte	0
2c187                 | LR__4816
2c187     61 64 72    | 	byte	"adr"
2c18a     00          | 	byte	0
2c18b                 | LR__4817
2c18b     61 64 64 72 | 	byte	"addr"
2c18f     00          | 	byte	0
2c190                 | LR__4818
2c190     76 61 72 70 
2c194     74 72       | 	byte	"varptr"
2c196     00          | 	byte	0
2c197                 | LR__4819
2c197     61 73 69 6E | 	byte	"asin"
2c19b     00          | 	byte	0
2c19c                 | LR__4820
2c19c     61 74 6E    | 	byte	"atn"
2c19f     00          | 	byte	0
2c1a0                 | LR__4821
2c1a0     63 6F 73    | 	byte	"cos"
2c1a3     00          | 	byte	0
2c1a4                 | LR__4822
2c1a4     64 70 65 65 
2c1a8     6B          | 	byte	"dpeek"
2c1a9     00          | 	byte	0
2c1aa                 | LR__4823
2c1aa     66 72 65    | 	byte	"fre"
2c1ad     00          | 	byte	0
2c1ae                 | LR__4824
2c1ae     67 65 74 70 
2c1b2     69 78 65 6C | 	byte	"getpixel"
2c1b6     00          | 	byte	0
2c1b7                 | LR__4825
2c1b7     67 65 2E    | 	byte	"ge."
2c1ba     00          | 	byte	0
2c1bb                 | LR__4826
2c1bb     67 65 74 65 
2c1bf     6E 76 73 75 
2c1c3     73 74 61 69 
2c1c7     6E          | 	byte	"getenvsustain"
2c1c8     00          | 	byte	0
2c1c9                 | LR__4827
2c1c9     67 65 74 6E 
2c1cd     6F 74 65 76 
2c1d1     61 6C 75 65 | 	byte	"getnotevalue"
2c1d5     00          | 	byte	0
2c1d6                 | LR__4828
2c1d6     67 65 74 74 
2c1da     69 6D 65    | 	byte	"gettime"
2c1dd     00          | 	byte	0
2c1de                 | LR__4829
2c1de     69 6E 6B 65 
2c1e2     79 24       | 	byte	"inkey$"
2c1e4     00          | 	byte	0
2c1e5                 | LR__4830
2c1e5     6C 70 65 65 
2c1e9     6B          | 	byte	"lpeek"
2c1ea     00          | 	byte	0
2c1eb                 | LR__4831
2c1eb     6D 6F 75 73 
2c1ef     65 6B       | 	byte	"mousek"
2c1f1     00          | 	byte	0
2c1f2                 | LR__4832
2c1f2     6D 6F 75 73 
2c1f6     65 77       | 	byte	"mousew"
2c1f8     00          | 	byte	0
2c1f9                 | LR__4833
2c1f9     6D 6F 75 73 
2c1fd     65 78       | 	byte	"mousex"
2c1ff     00          | 	byte	0
2c200                 | LR__4834
2c200     6D 6F 75 73 
2c204     65 79       | 	byte	"mousey"
2c206     00          | 	byte	0
2c207                 | LR__4835
2c207     70 65 65 6B | 	byte	"peek"
2c20b     00          | 	byte	0
2c20c                 | LR__4836
2c20c     70 69 6E 72 
2c210     65 61 64    | 	byte	"pinread"
2c213     00          | 	byte	0
2c214                 | LR__4837
2c214     72 64 70 69 
2c218     6E          | 	byte	"rdpin"
2c219     00          | 	byte	0
2c21a                 | LR__4838
2c21a     72 71 70 69 
2c21e     6E          | 	byte	"rqpin"
2c21f     00          | 	byte	0
2c220                 | LR__4839
2c220     72 6E 64    | 	byte	"rnd"
2c223     00          | 	byte	0
2c224                 | LR__4840
2c224     73 69 6E    | 	byte	"sin"
2c227     00          | 	byte	0
2c228                 | LR__4841
2c228     73 71 72    | 	byte	"sqr"
2c22b     00          | 	byte	0
2c22c                 | LR__4842
2c22c     73 74 69 63 
2c230     6B          | 	byte	"stick"
2c231     00          | 	byte	0
2c232                 | LR__4843
2c232     73 74 72 69 
2c236     67          | 	byte	"strig"
2c237     00          | 	byte	0
2c238                 | LR__4844
2c238     74 61 6E    | 	byte	"tan"
2c23b     00          | 	byte	0
2c23c                 | LR__4845
2c23c     61          | 	byte	"a"
2c23d     00          | 	byte	0
2c23e                 | LR__4846
2c23e     7A          | 	byte	"z"
2c23f     00          | 	byte	0
2c240                 | LR__4847
2c240     5F          | 	byte	"_"
2c241     00          | 	byte	0
2c242                 | LR__4848
2c242     61          | 	byte	"a"
2c243     00          | 	byte	0
2c244                 | LR__4849
2c244     7A          | 	byte	"z"
2c245     00          | 	byte	0
2c246                 | LR__4850
2c246     30          | 	byte	"0"
2c247     00          | 	byte	0
2c248                 | LR__4851
2c248     39          | 	byte	"9"
2c249     00          | 	byte	0
2c24a                 | LR__4852
2c24a     5F          | 	byte	"_"
2c24b     00          | 	byte	0
2c24c                 | LR__4853
2c24c     2E          | 	byte	"."
2c24d     00          | 	byte	0
2c24e                 | LR__4854
2c24e     61          | 	byte	"a"
2c24f     00          | 	byte	0
2c250                 | LR__4855
2c250     7A          | 	byte	"z"
2c251     00          | 	byte	0
2c252                 | LR__4856
2c252     30          | 	byte	"0"
2c253     00          | 	byte	0
2c254                 | LR__4857
2c254     39          | 	byte	"9"
2c255     00          | 	byte	0
2c256                 | LR__4858
2c256     5F          | 	byte	"_"
2c257     00          | 	byte	0
2c258                 | LR__4859
2c258     24          | 	byte	"$"
2c259     00          | 	byte	0
2c25a                 | LR__4860
2c25a     25          | 	byte	"%"
2c25b     00          | 	byte	0
2c25c                 | LR__4861
2c25c     21          | 	byte	"!"
2c25d     00          | 	byte	0
2c25e                 | LR__4862
2c25e     30          | 	byte	"0"
2c25f     00          | 	byte	0
2c260                 | LR__4863
2c260     39          | 	byte	"9"
2c261     00          | 	byte	0
2c262                 | LR__4864
2c262     2E          | 	byte	"."
2c263     00          | 	byte	0
2c264                 | LR__4865
2c264     24          | 	byte	"$"
2c265     00          | 	byte	0
2c266                 | LR__4866
2c266     25          | 	byte	"%"
2c267     00          | 	byte	0
2c268                 | LR__4867
2c268     2D          | 	byte	"-"
2c269     00          | 	byte	0
2c26a                 | LR__4868
2c26a     2E          | 	byte	"."
2c26b     00          | 	byte	0
2c26c                 | LR__4869
2c26c     30          | 	byte	"0"
2c26d     00          | 	byte	0
2c26e                 | LR__4870
2c26e     39          | 	byte	"9"
2c26f     00          | 	byte	0
2c270                 | LR__4871
2c270     5F          | 	byte	"_"
2c271     00          | 	byte	0
2c272                 | LR__4872
2c272     2E          | 	byte	"."
2c273     00          | 	byte	0
2c274                 | LR__4873
2c274     45          | 	byte	"E"
2c275     00          | 	byte	0
2c276                 | LR__4874
2c276     65          | 	byte	"e"
2c277     00          | 	byte	0
2c278                 | LR__4875
2c278     2D          | 	byte	"-"
2c279     00          | 	byte	0
2c27a                 | LR__4876
2c27a     2D          | 	byte	"-"
2c27b     00          | 	byte	0
2c27c                 | LR__4877
2c27c     65          | 	byte	"e"
2c27d     00          | 	byte	0
2c27e                 | LR__4878
2c27e     2E          | 	byte	"."
2c27f     00          | 	byte	0
2c280                 | LR__4879
2c280     45          | 	byte	"E"
2c281     00          | 	byte	0
2c282                 | LR__4880
2c282     65          | 	byte	"e"
2c283     00          | 	byte	0
2c284                 | LR__4881
2c284     30          | 	byte	"0"
2c285     00          | 	byte	0
2c286                 | LR__4882
2c286     39          | 	byte	"9"
2c287     00          | 	byte	0
2c288                 | LR__4883
2c288     24          | 	byte	"$"
2c289     00          | 	byte	0
2c28a                 | LR__4884
2c28a     25          | 	byte	"%"
2c28b     00          | 	byte	0
2c28c                 | LR__4885
2c28c     2D          | 	byte	"-"
2c28d     00          | 	byte	0
2c28e                 | LR__4886
2c28e     30          | 	byte	"0"
2c28f     00          | 	byte	0
2c290                 | LR__4887
2c290     39          | 	byte	"9"
2c291     00          | 	byte	0
2c292                 | LR__4888
2c292     5F          | 	byte	"_"
2c293     00          | 	byte	0
2c294                 | LR__4889
2c294     30          | 	byte	"0"
2c295     00          | 	byte	0
2c296                 | LR__4890
2c296     39          | 	byte	"9"
2c297     00          | 	byte	0
2c298                 | LR__4891
2c298     5F          | 	byte	"_"
2c299     00          | 	byte	0
2c29a                 | LR__4892
2c29a     22          | 	byte	34
2c29b     00          | 	byte	0
2c29c                 | LR__4893
2c29c     22          | 	byte	34
2c29d     00          | 	byte	0
2c29e                 | LR__4894
2c29e     44 69 6D 3A 
2c2a2     20 61 74 20 
2c2a6     6C 69 6E 65 
2c2aa     20          | 	byte	"Dim: at line "
2c2ab     00          | 	byte	0
2c2ac                 | LR__4895
2c2ac     3A 20 77 61 
2c2b0     72 6E 69 6E 
2c2b4     67 3A 20 74 
2c2b8     68 65 20 76 
2c2bc     61 72 69 61 
2c2c0     62 6C 65 20 
2c2c4     65 78 69 73 
2c2c8     74 65 64 2E | 	byte	": warning: the variable existed."
2c2cc     00          | 	byte	0
2c2cd                 | LR__4896
2c2cd     28          | 	byte	"("
2c2ce     00          | 	byte	0
2c2cf                 | LR__4897
2c2cf     61 73       | 	byte	"as"
2c2d1     00          | 	byte	0
2c2d2                 | LR__4898
2c2d2     61 73       | 	byte	"as"
2c2d4     00          | 	byte	0
2c2d5                 | LR__4899
2c2d5     2C          | 	byte	","
2c2d6     00          | 	byte	0
2c2d7                 | LR__4900
2c2d7     29          | 	byte	")"
2c2d8     00          | 	byte	0
2c2d9                 | LR__4901
2c2d9     29          | 	byte	")"
2c2da     00          | 	byte	0
2c2db                 | LR__4902
2c2db     61 73       | 	byte	"as"
2c2dd     00          | 	byte	0
2c2de                 | LR__4903
2c2de     62 79 74 65 | 	byte	"byte"
2c2e2     00          | 	byte	0
2c2e3                 | LR__4904
2c2e3     75 62 79 74 
2c2e7     65          | 	byte	"ubyte"
2c2e8     00          | 	byte	0
2c2e9                 | LR__4905
2c2e9     73 68 6F 72 
2c2ed     74          | 	byte	"short"
2c2ee     00          | 	byte	0
2c2ef                 | LR__4906
2c2ef     75 73 68 6F 
2c2f3     72 74       | 	byte	"ushort"
2c2f5     00          | 	byte	0
2c2f6                 | LR__4907
2c2f6     6C 6F 6E 67 | 	byte	"long"
2c2fa     00          | 	byte	0
2c2fb                 | LR__4908
2c2fb     69 6E 74 65 
2c2ff     67 65 72    | 	byte	"integer"
2c302     00          | 	byte	0
2c303                 | LR__4909
2c303     75 6C 6F 6E 
2c307     67          | 	byte	"ulong"
2c308     00          | 	byte	0
2c309                 | LR__4910
2c309     69 6E 74 36 
2c30d     34          | 	byte	"int64"
2c30e     00          | 	byte	0
2c30f                 | LR__4911
2c30f     75 69 6E 74 
2c313     36 34       | 	byte	"uint64"
2c315     00          | 	byte	0
2c316                 | LR__4912
2c316     73 69 6E 67 
2c31a     6C 65       | 	byte	"single"
2c31c     00          | 	byte	0
2c31d                 | LR__4913
2c31d     64 6F 75 62 
2c321     6C 65       | 	byte	"double"
2c323     00          | 	byte	0
2c324                 | LR__4914
2c324     73 74 72 69 
2c328     6E 67       | 	byte	"string"
2c32a     00          | 	byte	0
2c32b                 | LR__4915
2c32b     74 6F       | 	byte	"to"
2c32d     00          | 	byte	0
2c32e                 | LR__4916
2c32e     73 74 65 70 | 	byte	"step"
2c332     00          | 	byte	0
2c333                 | LR__4917
2c333     73 2E       | 	byte	"s."
2c335     00          | 	byte	0
2c336                 | LR__4918
2c336     57 65 20 68 
2c33a     61 76 65 20 
2c33e     61 20 73 6C 
2c342     6F 77 20 67 
2c346     6F 74 6F 2C 
2c34a     20 74 6F 64 
2c34e     6F 20 20    | 	byte	"We have a slow goto, todo  "
2c351     00          | 	byte	0
2c352                 | LR__4919
2c352                 | 	byte	
2c352     00          | 	byte	0
2c353                 | LR__4920
2c353     2F          | 	byte	"/"
2c354     00          | 	byte	0
2c355                 | LR__4921
2c355                 | 	byte	
2c355     00          | 	byte	0
2c356                 | LR__4922
2c356     53 61 76 65 
2c35a     64 20 61 73 
2c35e     20          | 	byte	"Saved as "
2c35f     00          | 	byte	0
2c360                 | LR__4923
2c360     2F          | 	byte	"/"
2c361     00          | 	byte	0
2c362                 | LR__4924
2c362                 | 	byte	
2c362     00          | 	byte	0
2c363                 | LR__4925
2c363     2F          | 	byte	"/"
2c364     00          | 	byte	0
2c365                 | LR__4926
2c365     2F          | 	byte	"/"
2c366     00          | 	byte	0
2c367                 | LR__4927
2c367     2E 62 61 73 | 	byte	".bas"
2c36b     00          | 	byte	0
2c36c                 | LR__4928
2c36c     53 79 73 74 
2c370     65 6D 20 65 
2c374     72 72 6F 72 
2c378     20          | 	byte	"System error "
2c379     00          | 	byte	0
2c37a                 | LR__4929
2c37a     3A 20       | 	byte	": "
2c37c     00          | 	byte	0
2c37d                 | LR__4930
2c37d     2E 62 61 73 | 	byte	".bas"
2c381     00          | 	byte	0
2c382                 | LR__4931
2c382     2F          | 	byte	"/"
2c383     00          | 	byte	0
2c384                 | LR__4932
2c384     30          | 	byte	"0"
2c385     00          | 	byte	0
2c386                 | LR__4933
2c386     39          | 	byte	"9"
2c387     00          | 	byte	0
2c388                 | LR__4934
2c388                 | 	byte	
2c388     00          | 	byte	0
2c389                 | LR__4935
2c389     4C 6F 61 64 
2c38d     65 64 20    | 	byte	"Loaded "
2c390     00          | 	byte	0
2c391                 | LR__4936
2c391     2F          | 	byte	"/"
2c392     00          | 	byte	0
2c393                 | LR__4937
2c393     53 74 6F 70 
2c397     70 65 64 20 
2c39b     61 74 20 6C 
2c39f     69 6E 65 20 | 	byte	"Stopped at line "
2c3a3     00          | 	byte	0
2c3a4                 | LR__4938
2c3a4                 | 	byte	
2c3a4     00          | 	byte	0
2c3a5                 | LR__4939
2c3a5                 | 	byte	
2c3a5     00          | 	byte	0
2c3a6                 | LR__4940
2c3a6     2F 73 64 2F 
2c3aa     6D 65 64 69 
2c3ae     61 2F 68 2F | 	byte	"/sd/media/h/"
2c3b2     00          | 	byte	0
2c3b3                 | LR__4941
2c3b3     53 79 73 74 
2c3b7     65 6D 20 65 
2c3bb     72 72 6F 72 
2c3bf     20          | 	byte	"System error "
2c3c0     00          | 	byte	0
2c3c1                 | LR__4942
2c3c1     3A 20       | 	byte	": "
2c3c3     00          | 	byte	0
2c3c4                 | LR__4943
2c3c4                 | 	byte	
2c3c4     00          | 	byte	0
2c3c5                 | LR__4944
2c3c5                 | 	byte	
2c3c5     00          | 	byte	0
2c3c6                 | LR__4945
2c3c6     2F 73 64 2F 
2c3ca     6D 65 64 69 
2c3ce     61 2F 73 2F | 	byte	"/sd/media/s/"
2c3d2     00          | 	byte	0
2c3d3                 | LR__4946
2c3d3     53 79 73 74 
2c3d7     65 6D 20 65 
2c3db     72 72 6F 72 
2c3df     20          | 	byte	"System error "
2c3e0     00          | 	byte	0
2c3e1                 | LR__4947
2c3e1     3A 20       | 	byte	": "
2c3e3     00          | 	byte	0
2c3e4                 | LR__4948
2c3e4     45 72 72 6F 
2c3e8     72 20       | 	byte	"Error "
2c3ea     00          | 	byte	0
2c3eb                 | LR__4949
2c3eb     3A 20       | 	byte	": "
2c3ed     00          | 	byte	0
2c3ee                 | LR__4950
2c3ee                 | 	byte	
2c3ee     00          | 	byte	0
2c3ef                 | LR__4951
2c3ef                 | 	byte	
2c3ef     00          | 	byte	0
2c3f0                 | LR__4952
2c3f0     72 6E 64 3A 
2c3f4     20          | 	byte	"rnd: "
2c3f5     00          | 	byte	0
2c3f6                 | LR__4953
2c3f6     72 6E 64 3A 
2c3fa     20          | 	byte	"rnd: "
2c3fb     00          | 	byte	0
2c3fc                 | LR__4954
2c3fc     67 65 74 65 
2c400     6E 76 73 75 
2c404     73 74 61 69 
2c408     6E 3A 20    | 	byte	"getenvsustain: "
2c40b     00          | 	byte	0
2c40c                 | LR__4955
2c40c     73 69 6E 3A 
2c410     20          | 	byte	"sin: "
2c411     00          | 	byte	0
2c412                 | LR__4956
2c412     63 6F 73 3A 
2c416     20          | 	byte	"cos: "
2c417     00          | 	byte	0
2c418                 | LR__4957
2c418     74 61 6E 3A 
2c41c     20          | 	byte	"tan: "
2c41d     00          | 	byte	0
2c41e                 | LR__4958
2c41e     61 73 69 6E 
2c422     3A 20       | 	byte	"asin: "
2c424     00          | 	byte	0
2c425                 | LR__4959
2c425     61 63 6F 73 
2c429     3A 20       | 	byte	"acos: "
2c42b     00          | 	byte	0
2c42c                 | LR__4960
2c42c     61 74 6E 3A 
2c430     20          | 	byte	"atn: "
2c431     00          | 	byte	0
2c432                 | LR__4961
2c432     73 71 72 3A 
2c436     20          | 	byte	"sqr: "
2c437     00          | 	byte	0
2c438                 | LR__4962
2c438     73 74 69 63 
2c43c     6B 3A 20    | 	byte	"stick: "
2c43f     00          | 	byte	0
2c440                 | LR__4963
2c440     73 74 72 69 
2c444     67 3A 20    | 	byte	"strig: "
2c447     00          | 	byte	0
2c448                 | LR__4964
2c448     67 65 74 70 
2c44c     69 78 65 6C 
2c450     3A 20       | 	byte	"getpixel: "
2c452     00          | 	byte	0
2c453                 | LR__4965
2c453                 | 	byte	
2c453     00          | 	byte	0
2c454                 | LR__4966
2c454     2F 73 64 2F 
2c458     62 61 73    | 	byte	"/sd/bas"
2c45b     00          | 	byte	0
2c45c                 | LR__4967
2c45c     57 6F 72 6B 
2c460     69 6E 67 20 
2c464     64 69 72 65 
2c468     63 74 6F 72 
2c46c     79 3A 20    | 	byte	"Working directory: "
2c46f     00          | 	byte	0
2c470                 | LR__4968
2c470     2A          | 	byte	"*"
2c471     00          | 	byte	0
2c472                 | LR__4969
2c472                 | 	byte	
2c472     00          | 	byte	0
2c473                 | LR__4970
2c473     5B 64 69 72 
2c477     5D 20       | 	byte	"[dir] "
2c479     00          | 	byte	0
2c47a                 | LR__4971
2c47a     2A          | 	byte	"*"
2c47b     00          | 	byte	0
2c47c                 | LR__4972
2c47c                 | 	byte	
2c47c     00          | 	byte	0
2c47d                 | LR__4973
2c47d     2D 2D 2D 2D 
2c481     2D 6D 6F 72 
2c485     65 2C 20 70 
2c489     72 65 73 73 
2c48d     20 61 6E 79 
2c491     20 6B 65 79 | 	byte	"-----more, press any key"
2c495     00          | 	byte	0
2c496                 | LR__4974
2c496     20 20 20 20 
      ...             
2c4ae     20 20 20 20 
2c4b2     20          | 	byte	"                             "
2c4b3     00          | 	byte	0
2c4b4                 | LR__4975
2c4b4     2F          | 	byte	"/"
2c4b5     00          | 	byte	0
2c4b6                 | LR__4976
2c4b6     2F 73 64 2F 
2c4ba     62 69 6E 2F | 	byte	"/sd/bin/"
2c4be     00          | 	byte	0
2c4bf                 | LR__4977
2c4bf     53 79 73 74 
2c4c3     65 6D 20 65 
2c4c7     72 72 6F 72 
2c4cb     20          | 	byte	"System error "
2c4cc     00          | 	byte	0
2c4cd                 | LR__4978
2c4cd     3A 20       | 	byte	": "
2c4cf     00          | 	byte	0
2c4d0                 | LR__4979
2c4d0                 | 	byte	
2c4d0     00          | 	byte	0
2c4d1                 | LR__4980
2c4d1     45 78 70 65 
2c4d5     63 74 65 64 
2c4d9     20 6E 75 6D 
2c4dd     62 65 72 2C 
2c4e1     20 67 6F 74 
2c4e5     20 73 6F 6D 
2c4e9     65 74 68 69 
2c4ed     6E 67 20 65 
2c4f1     6C 73 65 2E | 	byte	"Expected number, got something else."
2c4f5     00          | 	byte	0
2c4f6                 | LR__4981
2c4f6     43 61 6E 6E 
2c4fa     6F 74 20 61 
2c4fe     64 64 20 61 
2c502     20 6E 75 6D 
2c506     62 65 72 20 
2c50a     74 6F 20 61 
2c50e     20 73 74 72 
2c512     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2c516     00          | 	byte	0
2c517                 | LR__4982
2c517     43 61 6E 6E 
2c51b     6F 74 20 73 
2c51f     75 62 73 74 
2c523     72 61 63 74 
2c527     20 73 74 72 
2c52b     69 6E 67 73 
2c52f     2E          | 	byte	"Cannot substract strings."
2c530     00          | 	byte	0
2c531                 | LR__4983
2c531     55 6E 6B 6E 
2c535     6F 77 6E 20 
2c539     65 72 72 6F 
2c53d     72 20 77 68 
2c541     69 6C 65 20 
2c545     61 64 64 69 
2c549     6E 67 2E    | 	byte	"Unknown error while adding."
2c54c     00          | 	byte	0
2c54d                 | LR__4984
2c54d     55 6E 6B 6E 
2c551     6F 77 6E 20 
2c555     65 72 72 6F 
2c559     72 20 77 68 
2c55d     69 6C 65 20 
2c561     73 75 62 73 
2c565     74 72 61 63 
2c569     74 69 6E 67 
2c56d     2E          | 	byte	"Unknown error while substracting."
2c56e     00          | 	byte	0
2c56f                 | LR__4985
2c56f     43 61 6E 6E 
2c573     6F 74 20 64 
2c577     6F 20 6C 6F 
2c57b     67 69 63 20 
2c57f     6F 70 65 72 
2c583     61 74 69 6F 
2c587     6E 20 6F 6E 
2c58b     20 73 74 72 
2c58f     69 6E 67 20 
2c593     6F 72 20 66 
2c597     6C 6F 61 74 
2c59b     2E          | 	byte	"Cannot do logic operation on string or float."
2c59c     00          | 	byte	0
2c59d                 | LR__4986
2c59d     55 6E 6B 6E 
2c5a1     6F 77 6E 20 
2c5a5     65 72 72 6F 
2c5a9     72 20 77 68 
2c5ad     69 6C 65 20 
2c5b1     64 6F 69 6E 
2c5b5     67 20 6C 6F 
2c5b9     67 69 63 20 
2c5bd     6F 70 65 72 
2c5c1     61 74 69 6F 
2c5c5     6E 2E       | 	byte	"Unknown error while doing logic operation."
2c5c7     00          | 	byte	0
2c5c8                 | LR__4987
2c5c8     43 61 6E 6E 
2c5cc     6F 74 20 6D 
2c5d0     75 6C 74 69 
2c5d4     70 6C 79 20 
2c5d8     73 74 72 69 
2c5dc     6E 67 73 2E | 	byte	"Cannot multiply strings."
2c5e0     00          | 	byte	0
2c5e1                 | LR__4988
2c5e1     55 6E 6B 6E 
2c5e5     6F 77 6E 20 
2c5e9     65 72 72 6F 
2c5ed     72 20 77 68 
2c5f1     69 6C 65 20 
2c5f5     6D 75 6C 74 
2c5f9     69 70 6C 79 
2c5fd     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2c601     00          | 	byte	0
2c602                 | LR__4989
2c602     43 61 6E 6E 
2c606     6F 74 20 64 
2c60a     69 76 69 64 
2c60e     65 20 73 74 
2c612     72 69 6E 67 
2c616     73 2E       | 	byte	"Cannot divide strings."
2c618     00          | 	byte	0
2c619                 | LR__4990
2c619     55 6E 6B 6E 
2c61d     6F 77 6E 20 
2c621     65 72 72 6F 
2c625     72 20 77 68 
2c629     69 6C 65 20 
2c62d     64 69 76 69 
2c631     64 69 6E 67 
2c635     2E          | 	byte	"Unknown error while dividing."
2c636     00          | 	byte	0
2c637                 | LR__4991
2c637     43 61 6E 6E 
2c63b     6F 74 20 63 
2c63f     6F 6D 70 75 
2c643     74 65 20 61 
2c647     20 70 6F 77 
2c64b     65 72 20 6F 
2c64f     66 20 61 20 
2c653     73 74 72 69 
2c657     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2c65a     00          | 	byte	0
2c65b                 | LR__4992
2c65b     55 6E 6B 6E 
2c65f     6F 77 6E 20 
2c663     65 72 72 6F 
2c667     72 20 77 68 
2c66b     69 6C 65 20 
2c66f     63 6F 6D 70 
2c673     75 74 69 6E 
2c677     67 20 61 20 
2c67b     70 6F 77 65 
2c67f     72 2E       | 	byte	"Unknown error while computing a power."
2c681     00          | 	byte	0
2c682                 | LR__4993
2c682     52 69 67 68 
2c686     74 20 70 61 
2c68a     72 65 6E 74 
2c68e     68 65 73 69 
2c692     73 20 65 78 
2c696     70 65 63 74 
2c69a     65 64 2E    | 	byte	"Right parenthesis expected."
2c69d     00          | 	byte	0
2c69e                 | LR__4994
2c69e     45 78 70 65 
2c6a2     63 74 65 64 
2c6a6     20 73 74 72 
2c6aa     69 6E 67 2E | 	byte	"Expected string."
2c6ae     00          | 	byte	0
2c6af                 | LR__4995
2c6af     45 78 70 65 
2c6b3     63 74 65 64 
2c6b7     20 66 6C 6F 
2c6bb     61 74 2E    | 	byte	"Expected float."
2c6be     00          | 	byte	0
2c6bf                 | LR__4996
2c6bf     45 78 70 65 
2c6c3     63 74 65 64 
2c6c7     20 75 6E 73 
2c6cb     69 67 6E 65 
2c6cf     64 20 69 6E 
2c6d3     74 65 67 65 
2c6d7     72 2E       | 	byte	"Expected unsigned integer."
2c6d9     00          | 	byte	0
2c6da                 | LR__4997
2c6da     45 78 70 65 
2c6de     63 74 65 64 
2c6e2     20 69 6E 74 
2c6e6     65 67 65 72 
2c6ea     2E          | 	byte	"Expected integer."
2c6eb     00          | 	byte	0
2c6ec                 | LR__4998
2c6ec     4E 6F 20 6D 
2c6f0     6F 72 65 20 
2c6f4     76 61 72 69 
2c6f8     61 62 6C 65 
2c6fc     20 73 6C 6F 
2c700     74 73 2E    | 	byte	"No more variable slots."
2c703     00          | 	byte	0
2c704                 | LR__4999
2c704     56 61 72 69 
2c708     61 62 6C 65 
2c70c     20 6E 6F 74 
2c710     20 66 6F 75 
2c714     6E 64 2E    | 	byte	"Variable not found."
2c717     00          | 	byte	0
2c718                 | LR__5000
2c718     43 6F 6D 6D 
2c71c     61 20 65 78 
2c720     70 65 63 74 
2c724     65 64 2E    | 	byte	"Comma expected."
2c727     00          | 	byte	0
2c728                 | LR__5001
2c728     43 6F 6D 6D 
2c72c     61 20 6F 72 
2c730     20 73 65 6D 
2c734     69 63 6F 6C 
2c738     6F 6E 20 65 
2c73c     78 70 65 63 
2c740     74 65 64 2E | 	byte	"Comma or semicolon expected."
2c744     00          | 	byte	0
2c745                 | LR__5002
2c745     55 6E 6B 6E 
2c749     6F 77 6E 20 
2c74d     63 6F 6D 6D 
2c751     61 6E 64 2E | 	byte	"Unknown command."
2c755     00          | 	byte	0
2c756                 | LR__5003
2c756     53 74 61 63 
2c75a     6B 20 75 6E 
2c75e     64 65 72 66 
2c762     6C 6F 77 2E | 	byte	"Stack underflow."
2c766     00          | 	byte	0
2c767                 | LR__5004
2c767     43 61 6E 6E 
2c76b     6F 74 20 65 
2c76f     78 65 63 75 
2c773     74 65 20 67 
2c777     6F 74 6F 20 
2c77b     69 6E 20 74 
2c77f     68 65 20 69 
2c783     6D 6D 65 64 
2c787     69 61 74 65 
2c78b     20 6D 6F 64 
2c78f     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2c791     00          | 	byte	0
2c792                 | LR__5005
2c792     43 61 6E 6E 
2c796     6F 74 20 6C 
2c79a     6F 61 64 20 
2c79e     66 72 6F 6D 
2c7a2     20 74 68 69 
2c7a6     73 20 66 69 
2c7aa     6C 65 2E    | 	byte	"Cannot load from this file."
2c7ad     00          | 	byte	0
2c7ae                 | LR__5006
2c7ae     54 68 65 20 
2c7b2     70 72 6F 67 
2c7b6     72 61 6D 20 
2c7ba     69 73 20 65 
2c7be     6D 70 74 79 
2c7c2     2E          | 	byte	"The program is empty."
2c7c3     00          | 	byte	0
2c7c4                 | LR__5007
2c7c4     49 66 20 61 
2c7c8     66 74 65 72 
2c7cc     20 69 66 2E | 	byte	"If after if."
2c7d0     00          | 	byte	0
2c7d1                 | LR__5008
2c7d1     45 6D 70 74 
2c7d5     79 20 65 78 
2c7d9     70 72 65 73 
2c7dd     73 69 6F 6E 
2c7e1     2E          | 	byte	"Empty expression."
2c7e2     00          | 	byte	0
2c7e3                 | LR__5009
2c7e3     53 74 72 69 
2c7e7     6E 67 20 65 
2c7eb     78 70 65 63 
2c7ef     74 65 64 2E | 	byte	"String expected."
2c7f3     00          | 	byte	0
2c7f4                 | LR__5010
2c7f4     49 6E 74 65 
2c7f8     72 70 72 65 
2c7fc     74 65 72 20 
2c800     69 6E 74 65 
2c804     72 6E 61 6C 
2c808     20 65 72 72 
2c80c     6F 72 2E    | 	byte	"Interpreter internal error."
2c80f     00          | 	byte	0
2c810                 | LR__5011
2c810     45 78 70 65 
2c814     63 74 65 64 
2c818     20 61 73 73 
2c81c     69 67 6E 2E | 	byte	"Expected assign."
2c820     00          | 	byte	0
2c821                 | LR__5012
2c821     45 78 70 65 
2c825     63 74 65 64 
2c829     20 27 74 6F 
2c82d     27 2E       | 	byte	"Expected 'to'."
2c82f     00          | 	byte	0
2c830                 | LR__5013
2c830     45 78 70 65 
2c834     63 74 65 64 
2c838     20 69 6E 74 
2c83c     65 67 65 72 
2c840     20 76 61 72 
2c844     69 61 62 6C 
2c848     65 2E       | 	byte	"Expected integer variable."
2c84a     00          | 	byte	0
2c84b                 | LR__5014
2c84b     55 6E 69 6E 
2c84f     69 74 69 61 
2c853     6C 69 7A 65 
2c857     64 20 76 61 
2c85b     72 69 61 62 
2c85f     6C 65 20 69 
2c863     6E 20 27 6E 
2c867     65 78 74 27 
2c86b     2C 20 75 73 
2c86f     65 20 27 66 
2c873     6F 72 27 20 
2c877     62 65 66 6F 
2c87b     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2c87e     00          | 	byte	0
2c87f                 | LR__5015
2c87f     4E 6F 20 6D 
2c883     6F 72 65 20 
2c887     73 6C 6F 74 
2c88b     73 20 66 6F 
2c88f     72 20 27 66 
2c893     6F 72 27 2E | 	byte	"No more slots for 'for'."
2c897     00          | 	byte	0
2c898                 | LR__5016
2c898     27 4E 65 78 
2c89c     74 27 20 64 
2c8a0     6F 65 73 6E 
2c8a4     27 74 20 6D 
2c8a8     61 74 63 68 
2c8ac     20 27 66 6F 
2c8b0     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2c8b3     00          | 	byte	0
2c8b4                 | LR__5017
2c8b4     27 47 6F 74 
2c8b8     6F 27 20 74 
2c8bc     61 72 67 65 
2c8c0     74 20 6C 69 
2c8c4     6E 65 20 6E 
2c8c8     6F 74 20 66 
2c8cc     6F 75 6E 64 
2c8d0     2E          | 	byte	"'Goto' target line not found."
2c8d1     00          | 	byte	0
2c8d2                 | LR__5018
2c8d2     42 61 64 20 
2c8d6     6E 75 6D 62 
2c8da     65 72 20 6F 
2c8de     66 20 70 61 
2c8e2     72 61 6D 65 
2c8e6     74 65 72 73 | 	byte	"Bad number of parameters"
2c8ea     00          | 	byte	0
2c8eb                 | LR__5019
2c8eb     46 75 6E 63 
2c8ef     74 69 6F 6E 
2c8f3     20 75 6E 64 
2c8f7     65 66 69 6E 
2c8fb     65 64 20 66 
2c8ff     6F 72 20 73 
2c903     74 72 69 6E 
2c907     67 73       | 	byte	"Function undefined for strings"
2c909     00          | 	byte	0
2c90a                 | LR__5020
2c90a     42 61 64 20 
2c90e     70 61 72 61 
2c912     6D 65 74 65 
2c916     72 2E       | 	byte	"Bad parameter."
2c918     00          | 	byte	0
2c919                 | LR__5021
2c919     43 61 6E 6E 
2c91d     6F 74 20 64 
2c921     65 63 6C 61 
2c925     72 65 20 61 
2c929     6E 20 61 72 
2c92d     72 61 79 3A 
2c931     20 74 68 65 
2c935     20 76 61 72 
2c939     69 61 62 6C 
2c93d     65 20 65 78 
2c941     69 73 74 73 
2c945     2E          | 	byte	"Cannot declare an array: the variable exists."
2c946     00          | 	byte	0
2c947                 | LR__5022
2c947     45 78 70 65 
2c94b     63 74 65 64 
2c94f     20 27 28 27 
2c953     2E          | 	byte	"Expected '('."
2c954     00          | 	byte	0
2c955                 | LR__5023
2c955     45 78 70 65 
2c959     63 74 65 64 
2c95d     20 27 29 27 
2c961     20 6F 72 20 
2c965     27 2C 27 2E | 	byte	"Expected ')' or ','."
2c969     00          | 	byte	0
2c96a                 | LR__5024
2c96a     4E 6F 20 6D 
2c96e     6F 72 65 20 
2c972     74 68 61 6E 
2c976     20 33 20 64 
2c97a     69 6D 65 6E 
2c97e     73 69 6F 6E 
2c982     73 20 73 75 
2c986     70 70 6F 72 
2c98a     74 65 64    | 	byte	"No more than 3 dimensions supported"
2c98d     00          | 	byte	0
2c98e                 | LR__5025
2c98e     56 61 72 69 
2c992     61 62 6C 65 
2c996     20 6E 61 6D 
2c99a     65 20 65 78 
2c99e     70 65 63 74 
2c9a2     65 64       | 	byte	"Variable name expected"
2c9a4     00          | 	byte	0
2c9a5                 | LR__5026
2c9a5     54 79 70 65 
2c9a9     20 6E 61 6D 
2c9ad     65 20 65 78 
2c9b1     70 65 63 74 
2c9b5     65 64       | 	byte	"Type name expected"
2c9b7     00          | 	byte	0
2c9b8                 | LR__5027
2c9b8     54 79 70 65 
2c9bc     20 6E 6F 74 
2c9c0     20 73 75 70 
2c9c4     70 6F 72 74 
2c9c8     65 64 20 79 
2c9cc     65 74       | 	byte	"Type not supported yet"
2c9ce     00          | 	byte	0
2c9cf                 | LR__5028
2c9cf     41 72 72 61 
2c9d3     79 20 69 6E 
2c9d7     64 65 78 20 
2c9db     6F 75 74 20 
2c9df     6F 66 20 72 
2c9e3     61 6E 67 65 | 	byte	"Array index out of range"
2c9e7     00          | 	byte	0
2c9e8                 | LR__5029
2c9e8     45 72 72 6F 
2c9ec     72 20       | 	byte	"Error "
2c9ee     00          | 	byte	0
2c9ef                 | LR__5030
2c9ef     3A 20       | 	byte	": "
2c9f1     00          | 	byte	0
2c9f2                 | LR__5031
2c9f2     2F 73 64    | 	byte	"/sd"
2c9f5     00          | 	byte	0
2c9f6                 | LR__5032
2c9f6     2F 73 64 2F 
2c9fa     62 61 73    | 	byte	"/sd/bas"
2c9fd     00          | 	byte	0
2c9fe                 | LR__5033
2c9fe     2F 73 64 2F 
2ca02     62 61 73    | 	byte	"/sd/bas"
2ca05     00          | 	byte	0
2ca06                 | LR__5034
2ca06     20 42 41 53 
2ca0a     49 43 20 62 
2ca0e     79 74 65 73 
2ca12     20 66 72 65 
2ca16     65          | 	byte	" BASIC bytes free"
2ca17     00          | 	byte	0
2ca18                 | LR__5035
2ca18     52 65 61 64 
2ca1c     79          | 	byte	"Ready"
2ca1d     00          | 	byte	0
2ca1e                 | LR__5036
2ca1e     6E 6F 6E 61 
2ca22     6D 65 2E 62 
2ca26     61 73       | 	byte	"noname.bas"
2ca28     00          | 	byte	0
2ca29                 | LR__5037
2ca29     20          | 	byte	" "
2ca2a     00          | 	byte	0
2ca2b                 | LR__5038
2ca2b     20          | 	byte	" "
2ca2c     00          | 	byte	0
2ca2d                 | LR__5039
2ca2d                 | 	byte	
2ca2d     00          | 	byte	0
2ca2e                 | LR__5040
2ca2e                 | 	byte	
2ca2e     00          | 	byte	0
2ca2f     00          | 	alignl
2ca30                 | _dat_
2ca30     00 00 00 00 
2ca34     00 00 00 00 
2ca38     00 00 00 00 
2ca3c     00 00 00 00 | 	byte	$00[16]
2ca40     61 41 17 0E 
2ca44     62 42 00 00 
2ca48     63 43 19 10 
2ca4c     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2ca50     65 45 18 0F 
2ca54     66 46 00 00 
2ca58     67 47 00 00 
2ca5c     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2ca60     69 49 00 00 
2ca64     6A 4A 00 00 
2ca68     6B 4B 00 00 
2ca6c     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2ca70     6D 4D 00 00 
2ca74     6E 4E 1A 11 
2ca78     6F 4F 1E 15 
2ca7c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2ca80     71 51 00 00 
2ca84     72 52 00 00 
2ca88     73 53 1B 12 
2ca8c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2ca90     75 55 00 00 
2ca94     76 56 00 00 
2ca98     77 57 00 00 
2ca9c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2caa0     79 59 00 00 
2caa4     7A 5A 1D 14 
2caa8     31 21 04 00 
2caac     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2cab0     33 23 06 00 
2cab4     34 24 07 00 
2cab8     35 25 08 00 
2cabc     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2cac0     37 26 0A 00 
2cac4     38 2A 0B 00 
2cac8     39 28 0C 00 
2cacc     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2cad0     8D 8D 00 00 
2cad4     9B 9B 00 00 
2cad8     88 88 00 00 
2cadc     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2cae0     20 20 00 00 
2cae4     2D 5F 00 00 
2cae8     3D 2B 00 00 
2caec     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2caf0     5D 7D 00 00 
2caf4     5C 7C 00 00 
2caf8     23 7E 00 00 
2cafc     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2cb00     27 22 00 00 
2cb04     60 7E 03 00 
2cb08     2C 3C 00 00 
2cb0c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2cb10     2F 3F 00 00 
2cb14     B9 B9 00 00 
2cb18     BA 00 00 00 
2cb1c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2cb20     BC 00 00 00 
2cb24     BD 00 00 00 
2cb28     BE 00 00 00 
2cb2c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2cb30     C0 00 00 00 
2cb34     C1 00 00 00 
2cb38     C2 00 00 00 
2cb3c     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2cb40     C4 00 00 00 
2cb44     C5 00 00 00 
2cb48     C6 00 00 00 
2cb4c     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2cb50     C8 00 00 00 
2cb54     C9 00 00 00 
2cb58     CA 00 00 00 
2cb5c     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2cb60     7F 7F 00 00 
2cb64     CC 00 00 00 
2cb68     CD 00 00 00 
2cb6c     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2cb70     CF 00 00 00 
2cb74     D0 00 00 00 
2cb78     D1 00 00 00 
2cb7c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2cb80     2F 2F 00 00 
2cb84     2A 2A 00 00 
2cb88     2D 2D 00 00 
2cb8c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2cb90     8D 8D 00 00 
2cb94     31 31 00 00 
2cb98     32 32 00 00 
2cb9c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2cba0     34 34 00 00 
2cba4     35 35 00 00 
2cba8     36 36 00 00 
2cbac     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2cbb0     38 38 00 00 
2cbb4     39 39 00 00 
2cbb8     30 30 00 00 
2cbbc     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2cbc0     5C 7C 00 00 
2cbc4     00 00 00 00 
2cbc8     00 00 00 00 
2cbcc     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2cbd0     00 00 00 00 
      ...             
2cc28     00 00 00 00 
2cc2c     00 00 00 00 | 	byte	$00[96]
2cc30     2B 00 A6 F2 
2cc34     24 A7 09 80 
2cc38     5B 88 4D 89 
2cc3c     80 88 A5 88 | atari_spl file "atari.spl"
2cc40     6D 88 B8 88 
2cc44     80 88 CB 88 
2cc48     92 88 A5 88 
2cc4c     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2cc50     A5 88 CA 88 
2cc54     A6 88 DD 88 
2cc58     B8 88 AB 89 
2cc5c     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2cc60     C8 AD C6 F1 
2cc64     91 06 B6 FF 
2cc68     13 00 4A 00 
2cc6c     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2cc70     5D 00 5E 00 
2cc74     5D 00 5E 00 
2cc78     5E 00 5D 00 
2cc7c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2cc80     38 00 83 00 
2cc84     25 00 83 00 
2cc88     C3 FE D1 04 
2cc8c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2cc90     48 88 38 85 
2cc94     41 8A CB 88 
2cc98     28 89 B8 88 
2cc9c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2cca0     15 89 03 89 
2cca4     02 89 15 89 
2cca8     16 89 15 89 
2ccac     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2ccb0     15 89 3A 89 
2ccb4     72 89 E3 89 
2ccb8     52 83 AD 97 
2ccbc     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2ccc0     0C 02 B6 FF 
2ccc4     E1 00 A8 00 
2ccc8     F3 00 A8 00 
2cccc     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2ccd0     CE 00 CD 00 
2ccd4     CD 00 BA 00 
2ccd8     E1 00 BB 00 
2ccdc     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2cce0     DF 00 C9 FF 
2cce4     E6 01 B6 06 
2cce8     EE DD 8D 98 
2ccec     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2ccf0     97 89 73 89 
2ccf4     3B 89 60 89 
2ccf8     60 89 60 89 
2ccfc     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2cd00     73 89 72 89 
2cd04     85 89 73 89 
2cd08     AA 89 60 89 
2cd0c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2cd10     E8 8A 18 86 
2cd14     92 88 A5 C2 
2cd18     E0 00 C3 05 
2cd1c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2cd20     F2 00 64 01 
2cd24     06 01 3E 01 
2cd28     2B 01 2B 01 
2cd2c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2cd30     2B 01 2A 01 
2cd34     2B 01 2B 01 
2cd38     2B 01 18 01 
2cd3c     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2cd40     39 07 61 F3 
2cd44     C0 AF 37 85 
2cd48     0F 88 8B 8A 
2cd4c     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2cd50     AB 89 D0 89 
2cd54     AB 89 D0 89 
2cd58     D0 89 CF 89 
2cd5c     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2cd60     D0 89 F5 89 
2cd64     BD 89 08 8A 
2cd68     CF 89 E8 8A 
2cd6c     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2cd70     53 B3 0D F8 
2cd74     F4 07 38 00 
2cd78     63 01 63 01 
2cd7c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2cd80     88 01 88 01 
2cd84     76 01 88 01 
2cd88     88 01 89 01 
2cd8c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2cd90     75 01 AE 01 
2cd94     76 01 88 01 
2cd98     4A 00 46 06 
2cd9c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2cda0     08 8A 9A 86 
2cda4     33 8B 08 8A 
2cda8     2D 8A F5 89 
2cdac     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2cdb0     2D 8A 2D 8A 
2cdb4     2E 8A 1B 8A 
2cdb8     40 8A 2D 8A 
2cdbc     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2cdc0     2E 8A 79 8A 
2cdc4     66 8A C8 8B 
2cdc8     72 82 2B 97 
2cdcc     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2cdd0     1D 02 05 01 
2cdd4     F8 01 C0 01 
2cdd8     0B 02 C0 01 
2cddc     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2cde0     F9 01 D3 01 
2cde4     F8 01 D3 01 
2cde8     F8 01 D2 01 
2cdec     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2cdf0     E6 01 2B 01 
2cdf4     8E 02 5F 07 
2cdf8     F7 E2 ED 9C 
2cdfc     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2ce00     E8 8A 78 8A 
2ce04     78 8A 65 8A 
2ce08     8B 8A 78 8A 
2ce0c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2ce10     8B 8A 9D 8A 
2ce14     9D 8A 8B 8A 
2ce18     C2 8A 78 8A 
2ce1c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2ce20     70 8C 18 86 
2ce24     8B 8A 23 C9 
2ce28     CB 03 C4 05 
2ce2c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2ce30     0B 02 7B 02 
2ce34     1E 02 55 02 
2ce38     30 02 43 02 
2ce3c     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2ce40     43 02 44 02 
2ce44     43 02 30 02 
2ce48     68 02 31 02 
2ce4c     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2ce50     07 08 3F F7 
2ce54     73 B2 13 85 
2ce58     15 89 ED 8B 
2ce5c     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2ce60     B0 8A FB 8A 
2ce64     D5 8A FA 8A 
2ce68     E8 8A FB 8A 
2ce6c     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2ce70     E8 8A 21 8B 
2ce74     E7 8A 33 8B 
2ce78     E8 8A 26 8C 
2ce7c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2ce80     8D B0 27 F6 
2ce84     9C 08 AD 01 
2ce88     7B 02 8D 02 
2ce8c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2ce90     A1 02 A0 02 
2ce94     A1 02 A0 02 
2ce98     A0 02 A0 02 
2ce9c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2cea0     7B 02 D8 02 
2cea4     7B 02 C6 02 
2cea8     3E 01 C3 05 
2ceac     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2ceb0     00 8C 2A 86 
2ceb4     E0 8C FA 8A 
2ceb8     6A 8B FB 8A 
2cebc     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2cec0     45 8B 45 8B 
2cec4     45 8B 6B 8B 
2cec8     46 8B 59 8B 
2cecc     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2ced0     6B 8B 6B 8B 
2ced4     6B 8B 6B 8B 
2ced8     7D 8B 7D 8B 
2cedc     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2cee0     90 8B 91 8B 
2cee4     90 8B 90 8B 
2cee8     A3 8B A3 8B 
2ceec     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2cef0     B5 8B B6 8B 
2cef4     B5 8B B5 8B 
2cef8     B6 8B C8 8B 
2cefc     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2cf00     C8 8B DA 8B 
2cf04     DB 8B DB 8B 
2cf08     DB 8B DC 8B 
2cf0c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2cf10     EE 8B EE 8B 
2cf14     00 8C 01 8C 
2cf18     00 8C 01 8C 
2cf1c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2cf20     12 8C 13 8C 
2cf24     13 8C 26 8C 
2cf28     26 8C 26 8C 
2cf2c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2cf30     38 8C 38 8C 
2cf34     38 8C 38 8C 
2cf38     4B 8C 4B 8C 
2cf3c     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2cf40     5E 8C 5E 8C 
2cf44     5E 8C 5E 8C 
2cf48     70 8C 70 8C 
2cf4c     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2cf50     70 8C 83 8C 
2cf54     83 8C 83 8C 
2cf58     83 8C 96 8C 
2cf5c     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2cf60     95 8C A9 8C 
2cf64     A9 8C A8 8C 
2cf68     A8 8C A8 8C 
2cf6c     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2cf70     BB 8C BB 8C 
2cf74     BB 8C CE 8C 
2cf78     CE 8C CE 8C 
2cf7c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2cf80     E0 8C E1 8C 
2cf84     E1 8C E0 8C 
2cf88     F4 8C F2 8C 
2cf8c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2cf90     05 8D 05 8D 
2cf94     06 8D 06 8D 
2cf98     19 8D 19 8D 
2cf9c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2cfa0     18 8D 2B 8D 
2cfa4     2B 8D 2B 8D 
2cfa8     2A 8D 3E 8D 
2cfac     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2cfb0     3E 8D 51 8D 
2cfb4     50 8D 50 8D 
2cfb8     50 8D 51 8D 
2cfbc     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2cfc0     63 8D 64 8D 
2cfc4     76 8D 75 8D 
2cfc8     75 8D 76 8D 
2cfcc     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2cfd0     88 8D 88 8D 
2cfd4     89 8D 9B 8D 
2cfd8     9A 8D 9B 8D 
2cfdc     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2cfe0     AD 8D AE 8D 
2cfe4     AD 8D AE 8D 
2cfe8     C1 8D C1 8D 
2cfec     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2cff0     D3 8D D3 8D 
2cff4     D3 8D D3 8D 
2cff8     D3 8D E6 8D 
2cffc     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2d000     E6 8D E6 8D 
2d004     F9 8D F9 8D 
2d008     F9 8D F8 8D 
2d00c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2d010     0B 8E 0B 8E 
2d014     1D 8E 1D 8E 
2d018     1E 8E 1E 8E 
2d01c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2d020     31 8E 31 8E 
2d024     31 8E 42 8E 
2d028     43 8E 43 8E 
2d02c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2d030     56 8E 56 8E 
2d034     55 8E 56 8E 
2d038     68 8E 69 8E 
2d03c     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2d040     69 8E 7B 8E 
2d044     7C 8E 7B 8E 
2d048     7B 8E 8D 8E 
2d04c     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2d050     8D 8E A1 8E 
2d054     A0 8E A1 8E 
2d058     A1 8E A0 8E 
2d05c     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2d060     B3 8E B3 8E 
2d064     C6 8E C5 8E 
2d068     C6 8E C6 8E 
2d06c     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2d070     D8 8E D9 8E 
2d074     D8 8E EC 8E 
2d078     EB 8E EC 8E 
2d07c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2d080     FE 8E FE 8E 
2d084     FE 8E FE 8E 
2d088     10 8F 10 8F 
2d08c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2d090     11 8F 23 8F 
2d094     24 8F 23 8F 
2d098     24 8F 37 8F 
2d09c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2d0a0     36 8F 36 8F 
2d0a4     48 8F 49 8F 
2d0a8     49 8F 49 8F 
2d0ac     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2d0b0     5B 8F 5C 8F 
2d0b4     5B 8F 6E 8F 
2d0b8     6E 8F 6E 8F 
2d0bc     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2d0c0     81 8F 81 8F 
2d0c4     81 8F 81 8F 
2d0c8     93 8F 93 8F 
2d0cc     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2d0d0     93 8F A6 8F 
2d0d4     A6 8F A6 8F 
2d0d8     A6 8F B9 8F 
2d0dc     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2d0e0     B9 8F B9 8F 
2d0e4     CC 8F CB 8F 
2d0e8     CB 8F CC 8F 
2d0ec     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2d0f0     DF 8F DE 8F 
2d0f4     DE 8F F1 8F 
2d0f8     F1 8F F1 8F 
2d0fc     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2d100     03 90 04 90 
2d104     04 90 04 90 
2d108     16 90 17 90 
2d10c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2d110     29 90 28 90 
2d114     29 90 28 90 
2d118     29 90 3C 90 
2d11c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2d120     3C 90 4F 90 
2d124     4E 90 4E 90 
2d128     4E 90 4E 90 
2d12c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2d130     61 90 61 90 
2d134     73 90 74 90 
2d138     74 90 74 90 
2d13c     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2d140     87 90 86 90 
2d144     87 90 86 90 
2d148     99 90 99 90 
2d14c     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2d150     AB 90 AB 90 
2d154     AC 90 AB 90 
2d158     AB 90 BF 90 
2d15c     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2d160     BE 90 D1 90 
2d164     D0 90 D1 90 
2d168     D1 90 D1 90 
2d16c     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2d170     E3 90 E4 90 
2d174     F6 90 F6 90 
2d178     F6 90 F6 90 
2d17c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2d180     09 91 0A 91 
2d184     0A 91 1C 91 
2d188     1C 91 1C 91 
2d18c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2d190     2F 91 2E 91 
2d194     2F 91 2F 91 
2d198     2E 91 41 91 
2d19c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2d1a0     41 91 53 91 
2d1a4     54 91 54 91 
2d1a8     53 91 54 91 
2d1ac     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2d1b0     67 91 67 91 
2d1b4     79 91 7A 91 
2d1b8     79 91 78 91 
2d1bc     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2d1c0     8C 91 8B 91 
2d1c4     8C 91 8C 91 
2d1c8     9E 91 9E 91 
2d1cc     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2d1d0     B1 91 B1 91 
2d1d4     B2 91 B1 91 
2d1d8     B1 91 C4 91 
2d1dc     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2d1e0     C4 91 D6 91 
2d1e4     D7 91 D7 91 
2d1e8     D7 91 D6 91 
2d1ec     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2d1f0     EA 91 EA 91 
2d1f4     EA 91 FC 91 
2d1f8     FC 91 FB 91 
2d1fc     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2d200     0E 92 0F 92 
2d204     0F 92 0E 92 
2d208     21 92 21 92 
2d20c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2d210     21 92 34 92 
2d214     33 92 34 92 
2d218     34 92 47 92 
2d21c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2d220     46 92 47 92 
2d224     59 92 59 92 
2d228     59 92 59 92 
2d22c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2d230     6C 92 6C 92 
2d234     6B 92 7E 92 
2d238     7E 92 7E 92 
2d23c     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2d240     92 92 91 92 
2d244     91 92 90 92 
2d248     91 92 A4 92 
2d24c     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2d250     A3 92 B6 92 
2d254     B6 92 B7 92 
2d258     B7 92 B6 92 
2d25c     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2d260     CA 92 C9 92 
2d264     CA 92 DC 92 
2d268     DC 92 DC 92 
2d26c     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2d270     EF 92 EF 92 
2d274     EF 92 EF 92 
2d278     01 93 01 93 
2d27c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2d280     15 93 14 93 
2d284     14 93 14 93 
2d288     14 93 27 93 
2d28c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2d290     27 93 39 93 
2d294     3A 93 39 93 
2d298     39 93 39 93 
2d29c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2d2a0     4B 93 4C 93 
2d2a4     5F 93 5F 93 
2d2a8     5F 93 5E 93 
2d2ac     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2d2b0     5F 93 84 93 
2d2b4     4C 93 96 93 
2d2b8     5F 93 AE 94 
2d2bc     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2d2c0     7B C1 00 00 
2d2c4     00 00 00 00 
2d2c8     00 00 00 00 
2d2cc     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d2d0     00 00 00 00 | 	byte	$00, $00, $00, $00
2d2d4     00 00 00 00 | zero long 0
2d2d8     7A D7 00 80 
2d2dc     87 8A 48 8F 
2d2e0     EC 8C 76 8D 
2d2e4     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2d2e8     3C 8D 82 8D 
2d2ec     42 8D 88 8D 
2d2f0     8C 8D 8E 8D 
2d2f4     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2d2f8     97 8D DE 8D 
2d2fc     E1 8D F1 8E 
2d300     D8 8C A3 83 
2d304     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2d308     65 71 C9 65 
2d30c     FC 64 C4 65 
2d310     C1 65 BF 65 
2d314     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2d318     B6 65 B4 65 
2d31c     B2 65 AE 65 
2d320     AC 65 ED 65 
2d324     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2d328     5E 65 25 66 
2d32c     FA 62 23 6B 
2d330     B5 6C 61 0A 
2d334     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2d338     5D 90 BE 8D 
2d33c     47 8E C3 8D 
2d340     09 8E C9 8D 
2d344     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2d348     15 8E 19 8E 
2d34c     1B 8E 62 8E 
2d350     64 8E 68 8E 
2d354     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2d358     B5 8E 4C 90 
2d35c     FA 84 3C 9D 
2d360     98 13 79 6D 
2d364     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2d368     D9 66 50 66 
2d36c     D4 66 4B 66 
2d370     8C 66 46 66 
2d374     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2d378     81 66 3A 66 
2d37c     7C 66 36 66 
2d380     76 66 30 66 
2d384     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2d388     6B 66 88 72 
2d38c     BF 37 E7 B7 
2d390     75 83 8B 8E 
2d394     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2d398     94 8E 96 8E 
2d39c     DD 8E 9C 8E 
2d3a0     E2 8E A2 8E 
2d3a4     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2d3a8     EE 8E AE 8E 
2d3ac     38 8F B5 8E 
2d3b0     3F 8F FD 8E 
2d3b4     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2d3b8     A5 87 1E E3 
2d3bc     6D 5D FA 71 
2d3c0     41 64 25 67 
2d3c4     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2d3c8     D9 66 1A 67 
2d3cc     18 67 15 67 
2d3d0     12 67 0F 67 
2d3d4     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2d3d8     07 67 C0 66 
2d3dc     01 67 BC 66 
2d3e0     B8 66 DE 64 
2d3e4     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2d3e8     43 E5 1F 8B 
2d3ec     14 8A F1 90 
2d3f0     1C 8F 63 8F 
2d3f4     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2d3f8     29 8F 6E 8F 
2d3fc     72 8F 75 8F 
2d400     34 8F BE 8F 
2d404     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2d408     84 8F 87 8F 
2d40c     CC 8F 56 90 
2d410     67 91 49 80 
2d414     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2d418     46 77 A6 66 
2d41c     E8 66 B0 67 
2d420     AD 67 ED 67 
2d424     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2d428     A2 67 E3 67 
2d42c     9D 67 9A 67 
2d430     98 67 94 67 
2d434     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2d438     49 67 CD 67 
2d43c     28 65 5F 6E 
2d440     82 67 3A 01 
2d444     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2d448     C2 91 A9 8F 
2d44c     EF 8F AE 8F 
2d450     F4 8F B5 8F 
2d454     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2d458     01 90 03 90 
2d45c     07 90 09 90 
2d460     0C 90 53 90 
2d464     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2d468     18 90 44 93 
2d46c     85 84 D6 9D 
2d470     87 1F 2F 75 
2d474     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2d478     C4 68 F6 67 
2d47c     BE 68 F1 67 
2d480     76 68 2E 68 
2d484     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2d488     27 68 24 68 
2d48c     64 68 1E 68 
2d490     5F 68 19 68 
2d494     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2d498     DC 68 56 72 
2d49c     7E 36 C2 B8 
2d4a0     D7 84 73 90 
2d4a4     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2d4a8     7B 90 7F 90 
2d4ac     82 90 84 90 
2d4b0     CB 90 8B 90 
2d4b4     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2d4b8     D7 90 96 90 
2d4bc     20 91 59 90 
2d4c0     25 91 A2 90 
2d4c4     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2d4c8     D0 89 40 EE 
2d4cc     12 64 C4 71 
2d4d0     29 66 0C 69 
2d4d4     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2d4d8     C0 68 02 69 
2d4dc     FE 68 FB 68 
2d4e0     F9 68 F6 68 
2d4e4     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2d4e8     EE 68 A8 68 
2d4ec     2C 69 5F 68 
2d4f0     E2 68 81 66 
2d4f4     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2d4f8     1E EB A6 8A 
2d4fc     73 8B 5E 93 
2d500     7B 90 48 91 
2d504     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2d508     0D 91 11 91 
2d50c     14 91 16 91 
2d510     5C 91 1C 91 
2d514     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2d518     68 91 AF 91 
2d51c     2A 91 B5 91 
2d520     75 91 1A 94 
2d524     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2d528     70 0E CB 6C 
2d52c     5D 6E C4 67 
2d530     99 69 54 69 
2d534     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2d538     D2 69 49 69 
2d53c     89 69 86 69 
2d540     40 69 C4 69 
2d544     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2d548     35 69 76 69 
2d54c     58 67 EB 6D 
2d550     E9 6D 89 0F 
2d554     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2d558     33 94 94 91 
2d55c     D9 91 56 91 
2d560     E0 91 9F 91 
2d564     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2d568     EC 91 EE 91 
2d56c     F1 91 F4 91 
2d570     F7 91 3D 92 
2d574     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2d578     46 92 21 94 
2d57c     11 89 A4 9D 
2d580     FD 0E 8F 6C 
2d584     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2d588     28 6A E1 69 
2d58c     65 6A 1F 6A 
2d590     5F 6A 1A 6A 
2d594     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2d598     54 6A 0F 6A 
2d59c     4F 6A 09 6A 
2d5a0     06 6A 03 6A 
2d5a4     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2d5a8     23 68 69 77 
2d5ac     3A 4D 38 CA 
2d5b0     38 86 4E 91 
2d5b4     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2d5b8     64 92 24 92 
2d5bc     6A 92 2A 92 
2d5c0     70 92 30 92 
2d5c4     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2d5c8     7B 92 7E 92 
2d5cc     C5 92 84 92 
2d5d0     CB 92 8A 92 
2d5d4     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2d5d8     4D 8D F9 E2 
2d5dc     97 59 FE 74 
2d5e0     DB 68 6D 6A 
2d5e4     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2d5e8     A8 6A A5 6A 
2d5ec     A3 6A 9F 6A 
2d5f0     9D 6A 9B 6A 
2d5f4     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2d5f8     D6 6A 8F 6A 
2d5fc     CF 6A 46 6A 
2d600     CA 6A E1 67 
2d604     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2d608     D3 F7 15 92 
2d60c     90 8C BF 94 
2d610     A6 92 EB 92 
2d614     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2d618     B1 92 F7 92 
2d61c     FA 92 FD 92 
2d620     00 93 02 93 
2d624     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2d628     4F 93 52 93 
2d62c     54 93 22 94 
2d630     5A 93 8F 88 
2d634     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2d638     1C 77 07 6C 
2d63c     E8 69 7A 6B 
2d640     34 6B 75 6B 
2d644     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2d648     29 6B 26 6B 
2d64c     24 6B 21 6B 
2d650     1D 6B 5E 6B 
2d654     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2d658     12 6B 52 6B 
2d65c     34 69 34 6E 
2d660     BA 73 A4 24 
2d664     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2d668     7A 94 B3 93 
2d66c     72 93 31 93 
2d670     78 93 7A 93 
2d674     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2d678     83 93 86 93 
2d67c     89 93 D0 93 
2d680     D2 93 D5 93 
2d684     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2d688     DD 93 40 96 
2d68c     30 8B 99 9C 
2d690     52 10 94 71 
2d694     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2d698     46 6C 79 6B 
2d69c     40 6C B7 6B 
2d6a0     F7 6B B1 6B 
2d6a4     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2d6a8     EC 6B A5 6B 
2d6ac     A2 6B 9F 6B 
2d6b0     9D 6B 9A 6B 
2d6b4     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2d6b8     C8 6A E4 76 
2d6bc     20 4B F9 CE 
2d6c0     2E 8A 1A 92 
2d6c4     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2d6c8     FB 93 BA 93 
2d6cc     01 94 03 94 
2d6d0     4A 94 09 94 
2d6d4     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2d6d8     55 94 14 94 
2d6dc     9E 94 1A 94 
2d6e0     61 94 20 94 
2d6e4     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2d6e8     3E 87 E5 CD 
2d6ec     5F 50 6C 78 
2d6f0     B5 6A 04 6C 
2d6f4     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2d6f8     83 6C 7F 6C 
2d6fc     7C 6C 36 6C 
2d700     76 6C 74 6C 
2d704     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2d708     6B 6C 25 6C 
2d70c     66 6C 1F 6C 
2d710     1D 6C 41 6A 
2d714     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2d718     BA FA FC 94 
2d71c     5B 8D 97 96 
2d720     3B 94 C5 94 
2d724     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2d728     89 94 8C 94 
2d72c     8F 94 92 94 
2d730     94 94 DB 94 
2d734     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2d738     E4 94 E7 94 
2d73c     2D 95 74 95 
2d740     C8 96 15 89 
2d744     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2d748     CB 75 31 6F 
2d74c     7E 6B 10 6D 
2d750     C9 6C 0A 6D 
2d754     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2d758     BD 6C FF 6C 
2d75c     FB 6C F9 6C 
2d760     B2 6C F3 6C 
2d764     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2d768     A7 6C E8 6C 
2d76c     0D 6B 85 6F 
2d770     C7 74 10 28 
2d774     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2d778     96 96 47 95 
2d77c     06 95 0A 95 
2d780     0C 95 0F 95 
2d784     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2d788     17 95 5E 95 
2d78c     61 95 63 95 
2d790     22 95 AC 95 
2d794     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2d798     72 95 17 98 
2d79c     59 8E 01 96 
2d7a0     CF FC 5A 68 
2d7a4     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2d7a8     96 6D 50 6D 
2d7ac     D5 6D 4A 6D 
2d7b0     8C 6D 89 6D 
2d7b4     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2d7b8     80 6D 3A 6D 
2d7bc     7A 6D 77 6D 
2d7c0     75 6D 71 6D 
2d7c4     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2d7c8     18 6C BC 78 
2d7cc     9A 4F 7E CF 
2d7d0     1F 89 F1 93 
2d7d4     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2d7d8     D2 95 4E 95 
2d7dc     D7 95 53 95 
2d7e0     DD 95 E0 95 
2d7e4     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2d7e8     A5 95 EB 95 
2d7ec     EE 95 F0 95 
2d7f0     37 96 B3 95 
2d7f4     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2d7f8     1A 98 D5 8D 
2d7fc     C5 9F CD 0F 
2d800     0F 71 F3 73 
2d804     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2d808     D9 6D 5E 6E 
2d80c     D3 6D 58 6E 
2d810     12 6E 0F 6E 
2d814     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2d818     49 6E BF 6D 
2d81c     87 6E 76 6D 
2d820     81 6E 11 6B 
2d824     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2d828     3F 09 44 95 
2d82c     E5 8D 3F 99 
2d830     D4 95 A2 96 
2d834     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2d838     23 96 69 96 
2d83c     6B 96 6E 96 
2d840     71 96 74 96 
2d844     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2d848     BF 96 3C 96 
2d84c     C6 96 C8 96 
2d850     A3 98 51 8D 
2d854     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2d858     CF 75 29 73 
2d85c     90 6C EC 6E 
2d860     62 6E E7 6E 
2d864     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2d868     9A 6E 98 6E 
2d86c     95 6E 91 6E 
2d870     8E 6E CF 6E 
2d874     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2d878     40 6E C3 6E 
2d87c     E8 6C 45 6F 
2d880     A5 7B C9 35 
2d884     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2d888     2D 98 23 97 
2d88c     E1 96 A0 96 
2d890     A4 96 EA 96 
2d894     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2d898     AF 96 F4 96 
2d89c     F8 96 3E 97 
2d8a0     FD 96 43 97 
2d8a4     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2d8a8     08 97 6B 99 
2d8ac     D6 92 88 91 
2d8b0     D8 EE 84 66 
2d8b4     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2d8b8     2E 6F E7 6E 
2d8bc     6C 6F 24 6F 
2d8c0     21 6F 1F 6F 
2d8c4     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2d8c8     17 6F 13 6F 
2d8cc     54 6F 0E 6F 
2d8d0     0B 6F 4B 6F 
2d8d4     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2d8d8     27 6D 1C 7B 
2d8dc     19 59 9F DB 
2d8e0     66 8E BC 94 
2d8e4     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2d8e8     67 97 26 97 
2d8ec     6D 97 2B 97 
2d8f0     72 97 32 97 
2d8f4     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2d8f8     C1 97 7F 97 
2d8fc     C6 97 85 97 
2d900     CB 97 CE 97 
2d904     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2d908     EC 8A C4 C6 
2d90c     68 4C F4 7D 
2d910     63 6E E8 6E 
2d914     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2d918     ED 6F A7 6F 
2d91c     E7 6F A0 6F 
2d920     E1 6F 9B 6F 
2d924     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2d928     D5 6F 8F 6F 
2d92c     CE 6F 45 6F 
2d930     86 6F 68 6D 
2d934     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2d938     C0 13 AD A2 
2d93c     A7 8E 79 99 
2d940     E6 97 E8 97 
2d944     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2d948     F1 97 F3 97 
2d94c     F6 97 F9 97 
2d950     FB 97 FE 97 
2d954     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2d958     4A 98 0A 98 
2d95c     93 98 0F 98 
2d960     7F 9B BF 8C 
2d964     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2d968     91 7B 62 73 
2d96c     1A 6E B9 70 
2d970     EB 6F B3 70 
2d974     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2d978     25 70 20 70 
2d97c     1E 70 1B 70 
2d980     18 70 15 70 
2d984     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2d988     0D 70 09 70 
2d98c     07 70 03 70 
2d990     01 70 FD 6F 
2d994     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2d998     F6 6F F2 6F 
2d99c     EF 6F EC 6F 
2d9a0     2C 70 E6 6F 
2d9a4     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2d9a8     DD 6F 97 6F 
2d9ac     D7 6F 84 6E 
2d9b0     8F 6F 3F 7D 
2d9b4     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2d9b6     00 00 00 00 | zero1 long 0
2d9ba     FF FF FF FF 
2d9be     FF FF       | atarist_spl file "atarist.spl" '512
2d9c0     00 00 00 00 
2d9c4     00 00 00 00 
2d9c8     00 00       | 	byte	$00[10]
2d9ca     17 7F F2 7F 
2d9ce     B2 7F 72 7F 
2d9d2     33 7F F4 7E 
2d9d6     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2d9da     36 7E F5 7D 
2d9de     E9 51 F2 0D 
2d9e2     8E 00 F3 FD 
2d9e6     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2d9ea     57 FD 58 FD 
2d9ee     5B FD 5C FD 
2d9f2     5C FD 60 7D 
2d9f6     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2d9fa     D6 7C 98 7C 
2d9fe     59 7C 1A 7C 
2da02     DC 7B 9E 7B 
2da06     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2da0a     F3 05 00 FD 
2da0e     41 FB EA FA 
2da12     D9 FA DB FA 
2da16     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2da1a     E4 FA 9B 36 
2da1e     F8 7A C0 7A 
2da22     84 7A 45 7A 
2da26     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2da2a     8E 79 51 79 
2da2e     15 79 D7 78 
2da32     3C 1F EB FF 
2da36     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2da3a     6D F8 65 F8 
2da3e     68 F8 6D F8 
2da42     70 F8 74 F8 
2da46     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2da4a     AB 60 79 60 
2da4e     4B 60 1A 60 
2da52     E9 5F B9 5F 
2da56     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2da5a     FB 59 B2 0B 
2da5e     92 FA 3A F7 
2da62     96 F6 79 F6 
2da66     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2da6a     82 F6 86 F6 
2da6e     8C F6 DB 5D 
2da72     F1 5E C1 5E 
2da76     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2da7a     34 5E 04 5E 
2da7e     D6 5D A6 5D 
2da82     78 5D D4 3E 
2da86     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2da8a     27 F5 BA F4 
2da8e     AB F4 AD F4 
2da92     B2 F4 B8 F4 
2da96     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2da9a     26 5D 2B 5D 
2da9e     FC 5C CD 5C 
2daa2     9F 5C 70 5C 
2daa6     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2daaa     E5 5B B8 5B 
2daae     DB 24 A7 FC 
2dab2     D1 F4 4D F3 
2dab6     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2daba     04 F3 0B F3 
2dabe     11 F3 16 F3 
2dac2     DE 18 98 5B 
2dac6     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2daca     4E 4A 29 48 
2dace     A0 47 6A 47 
2dad2     43 47 20 47 
2dad6     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2dada     E2 F6 98 F2 
2dade     C5 F1 A3 F1 
2dae2     A3 F1 A8 F1 
2dae6     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2daea     BF F1 00 3D 
2daee     EF 46 CD 46 
2daf2     AA 46 86 46 
2daf6     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2dafa     1C 46 F9 45 
2dafe     D7 45 EE 43 
2db02     DE 02 E8 F3 
2db06     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2db0a     61 F0 65 F0 
2db0e     6D F0 74 F0 
2db12     7C F0 84 F0 
2db16     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2db1a     8E 45 6D 45 
2db1e     49 45 27 45 
2db22     05 45 E1 44 
2db26     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2db2a     F1 2F A9 FB 
2db2e     8B F1 9B EF 
2db32     40 EF 36 EF 
2db36     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2db3a     4D EF 56 EF 
2db3e     5E EF 7B 44 
2db42     8C 44 69 44 
2db46     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2db4a     03 44 E1 43 
2db4e     C0 43 F5 37 
2db52     69 33 0F 11 
2db56     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2db5a     66 EE 37 EE 
2db5e     38 EE 40 EE 
2db62     48 EE 51 EE 
2db66     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2db6a     7D 32 6A 32 
2db6e     51 32 37 32 
2db72     1F 32 05 32 
2db76     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2db7a     B9 31 A1 31 
2db7e     F1 04 F4 F1 
2db82     50 EE A0 ED 
2db86     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2db8a     93 ED 9A ED 
2db8e     A4 ED AD ED 
2db92     F4 27 C1 31 
2db96     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2db9a     78 31 5F 31 
2db9e     46 31 2E 31 
2dba2     15 31 FC 30 
2dba6     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2dbaa     C4 EF 4A ED 
2dbae     DC EC CB EC 
2dbb2     D2 EC DA EC 
2dbb6     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2dbba     F9 EC 64 2F 
2dbbe     0A 31 F1 30 
2dbc2     D9 30 C0 30 
2dbc6     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2dbca     78 30 5F 30 
2dbce     46 30 38 23 
2dbd2     A6 F6 19 EE 
2dbd6     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2dbda     20 EC 28 EC 
2dbde     32 EC 3C EC 
2dbe2     47 EC 51 EC 
2dbe6     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2dbea     A3 22 93 22 
2dbee     7F 22 6E 22 
2dbf2     5D 22 4C 22 
2dbf6     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2dbfa     77 09 76 F1 
2dbfe     CC EC F0 EB 
2dc02     CD EB CE EB 
2dc06     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2dc0a     ED EB F5 EB 
2dc0e     3E F6 6B 22 
2dc12     5F 22 4E 22 
2dc16     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2dc1a     1B 22 0B 22 
2dc1e     FA 21 E9 21 
2dc22     D8 21 4D FF 
2dc26     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2dc2a     92 EB 7B EB 
2dc2e     82 EB 8C EB 
2dc32     97 EB A1 EB 
2dc36     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2dc3a     15 22 04 22 
2dc3e     F3 21 E3 21 
2dc42     D2 21 C0 21 
2dc46     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2dc4a     8E 21 7D 21 
2dc4e     9A F8 A4 ED 
2dc52     8E EB 2F EB 
2dc56     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2dc5a     37 EB 42 EB 
2dc5e     4C EB 57 EB 
2dc62     B2 17 22 19 
2dc66     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2dc6a     FD 18 EF 18 
2dc6e     E3 18 D6 18 
2dc72     CA 18 BD 18 
2dc76     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2dc7a     60 EC 35 EB 
2dc7e     01 EB 01 EB 
2dc82     0C EB 16 EB 
2dc86     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2dc8a     34 EB D0 18 
2dc8e     00 19 F4 18 
2dc92     E8 18 DA 18 
2dc96     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2dc9a     B6 18 A9 18 
2dc9e     9D 18 91 05 
2dca2     F0 EF CA EB 
2dca6     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2dcaa     E8 EA F2 EA 
2dcae     FE EA 07 EB 
2dcb2     12 EB C2 EF 
2dcb6     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2dcba     D9 18 CD 18 
2dcbe     C0 18 B3 18 
2dcc2     A7 18 9B 18 
2dcc6     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2dcca     B8 FC 30 EE 
2dcce     61 EB DC EA 
2dcd2     CD EA D2 EA 
2dcd6     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2dcda     F3 EA FE EA 
2dcde     D2 09 D1 18 
2dce2     C3 18 17 18 
2dce6     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2dcea     66 11 52 11 
2dcee     49 11 41 11 
2dcf2     38 11 E0 F4 
2dcf6     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2dcfa     C9 EA C5 EA 
2dcfe     CF EA DB EA 
2dd02     E6 EA EF EA 
2dd06     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2dd0a     89 11 80 11 
2dd0e     78 11 6E 11 
2dd12     67 11 5D 11 
2dd16     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2dd1a     43 11 32 0D 
2dd1e     9C F1 07 EC 
2dd22     F8 EA CD EA 
2dd26     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2dd2a     E4 EA ED EA 
2dd2e     F8 EA 02 EB 
2dd32     55 11 91 11 
2dd36     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2dd3a     75 11 6E 11 
2dd3e     64 11 5E 11 
2dd42     54 11 4A 11 
2dd46     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2dd4a     A8 EB F1 EA 
2dd4e     D9 EA DC EA 
2dd52     E8 EA F1 EA 
2dd56     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2dd5a     A6 EB 9E 11 
2dd5e     A0 11 96 11 
2dd62     8D 11 85 11 
2dd66     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2dd6a     6A 11 CA 0D 
2dd6e     36 0B 57 F8 
2dd72     6C ED 57 EB 
2dd76     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2dd7a     F4 EA FF EA 
2dd7e     09 EB 15 EB 
2dd82     1E EB 1A FD 
2dd86     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2dd8a     ED 0A E8 0A 
2dd8e     E2 0A DC 0A 
2dd92     D6 0A D1 0A 
2dd96     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2dd9a     F8 F3 BC EC 
2dd9e     57 EB 1E EB 
2dda2     18 EB 24 EB 
2dda6     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2ddaa     42 EB 4D EB 
2ddae     08 09 20 0B 
2ddb2     1A 0B 14 0B 
2ddb6     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2ddba     04 0B FE 0A 
2ddbe     F9 0A F2 0A 
2ddc2     84 08 3A F1 
2ddc6     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2ddca     42 EB 42 EB 
2ddce     4E EB 57 EB 
2ddd2     62 EB 6B EB 
2ddd6     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2ddda     48 0B 43 0B 
2ddde     3C 0B 36 0B 
2dde2     31 0B 2C 0B 
2dde6     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2ddea     1B 0B 5C 00 
2ddee     6A EF 1B EC 
2ddf2     81 EB 6A EB 
2ddf6     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2ddfa     85 EB 8E EB 
2ddfe     99 EB A3 EB 
2de02     DD 05 E5 05 
2de06     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2de0a     DB 05 D8 05 
2de0e     D5 05 D1 05 
2de12     D0 05 CB 05 
2de16     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2de1a     0C EC BB EB 
2de1e     B3 EB BB EB 
2de22     C5 EB D0 EB 
2de26     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2de2a     E4 F7 2C 06 
2de2e     28 06 24 06 
2de32     22 06 1F 06 
2de36     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2de3a     16 06 14 06 
2de3e     0F 06 D0 F3 
2de42     65 ED 2D EC 
2de46     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2de4a     01 EC 0A EC 
2de4e     14 EC 1E EC 
2de52     29 EC FB 03 
2de56     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2de5a     63 06 60 06 
2de5e     5E 06 59 06 
2de62     58 06 54 06 
2de66     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2de6a     69 F1 21 ED 
2de6e     55 EC 33 EC 
2de72     36 EC 40 EC 
2de76     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2de7a     5C EC 68 EC 
2de7e     92 02 D9 02 
2de82     D7 02 D7 02 
2de86     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2de8a     D1 02 D1 02 
2de8e     CE 02 CD 02 
2de92     5D FC 80 EF 
2de96     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2de9a     83 EC 8A EC 
2de9e     93 EC 9C EC 
2dea2     A5 EC B1 EC 
2dea6     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2deaa     2B 03 2A 03 
2deae     29 03 26 03 
2deb2     25 03 24 03 
2deb6     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2deba     1F 03 70 F7 
2debe     D0 EE 27 ED 
2dec2     DB EC D4 EC 
2dec6     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2deca     F0 EC FA EC 
2dece     02 ED F9 F4 
2ded2     7B 03 7C 03 
2ded6     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2deda     75 03 73 03 
2dede     72 03 70 03 
2dee2     6D 03 6C 03 
2dee6     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2deea     54 ED 22 ED 
2deee     22 ED 2C ED 
2def2     35 ED 3F ED 
2def6     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2defa     14 01 C3 03 
2defe     C1 03 C0 03 
2df02     5F 01 A5 00 
2df06     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2df0a     7B 00 7C 00 
2df0e     20 00 85 F1 
2df12     2A EE 89 ED 
2df16     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2df1a     80 ED 87 ED 
2df1e     90 ED 9A ED 
2df22     A3 ED 73 00 
2df26     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2df2a     D0 00 D0 00 
2df2e     D0 00 D0 00 
2df32     D0 00 CF 00 
2df36     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2df3a     80 F0 3D EE 
2df3e     D5 ED C7 ED 
2df42     CD ED D6 ED 
2df46     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2df4a     F2 ED FA ED 
2df4e     1D 01 29 01 
2df52     27 01 27 01 
2df56     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2df5a     25 01 26 01 
2df5e     26 01 23 01 
2df62     D0 F7 EC EF 
2df66     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2df6a     1C EE 24 EE 
2df6e     2D EE 37 EE 
2df72     40 EE 47 EE 
2df76     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2df7a     7D 01 7B 01 
2df7e     7A 01 7A 01 
2df82     79 01 78 01 
2df86     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2df8a     84 FE DE F3 
2df8e     6C EF 93 EE 
2df92     72 EE 72 EE 
2df96     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2df9a     8B EE 95 EE 
2df9e     9E EE 15 FC 
2dfa2     67 FE 67 FE 
2dfa6     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2dfaa     6B FE 6B FE 
2dfae     6D FE 6D FE 
2dfb2     6D FE 6F FE 
2dfb6     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2dfba     DF EE CC EE 
2dfbe     CF EE D9 EE 
2dfc2     E1 EE EA EE 
2dfc6     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2dfca     5A FE C4 FE 
2dfce     C3 FE C5 FE 
2dfd2     C6 FE C6 FE 
2dfd6     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2dfda     C8 FE C7 FE 
2dfde     DA FB 85 F1 
2dfe2     8D EF 31 EF 
2dfe6     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2dfea     34 EF 3E EF 
2dfee     46 EF 4F EF 
2dff2     57 EF 0D FF 
2dff6     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2dffa     1F FF 1F FF 
2dffe     21 FF 21 FF 
2e002     21 FF 21 FF 
2e006     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2e00a     15 F1 BE EF 
2e00e     84 EF 7E EF 
2e012     88 EF 8F EF 
2e016     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2e01a     A9 EF 06 F2 
2e01e     A6 FC AB FC 
2e022     AD FC AE FC 
2e026     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2e02a     B2 FC B4 FC 
2e02e     B6 FC B7 FC 
2e032     8B F4 BD F0 
2e036     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2e03a     E4 EF EE EF 
2e03e     F6 EF FD EF 
2e042     04 F0 0E F0 
2e046     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2e04a     0B FD 0D FD 
2e04e     0F FD 11 FD 
2e052     11 FD 13 FD 
2e056     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2e05a     17 FD 64 F3 
2e05e     CD F0 52 F0 
2e062     41 F0 45 F0 
2e066     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2e06a     5B F0 64 F0 
2e06e     6D F0 FB FC 
2e072     65 FD 68 FD 
2e076     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2e07a     6C FD 6D FD 
2e07e     6F FD 70 FD 
2e082     72 FD B3 FB 
2e086     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2e08a     A4 F0 99 F0 
2e08e     A0 F0 A8 F0 
2e092     AE F0 B9 F0 
2e096     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2e09a     CB FB DD FB 
2e09e     DE FB E0 FB 
2e0a2     E3 FB E3 FB 
2e0a6     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2e0aa     E9 FB EC FB 
2e0ae     62 F7 27 F2 
2e0b2     2A F1 FF F0 
2e0b6     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2e0ba     0C F1 13 F1 
2e0be     1B F1 23 F1 
2e0c2     33 F2 3C FC 
2e0c6     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2e0ca     42 FC 45 FC 
2e0ce     47 FC 48 FC 
2e0d2     4A FC 4C FC 
2e0d6     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2e0da     20 F2 77 F1 
2e0de     5C F1 5F F1 
2e0e2     64 F1 6C F1 
2e0e6     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2e0ea     83 F1 DC F8 
2e0ee     9A FC 9A FC 
2e0f2     9B FC 9E FC 
2e0f6     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2e0fa     A3 FC A4 FC 
2e0fe     A6 FC A9 FC 
2e102     90 F4 33 F2 
2e106     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2e10a     BA F1 BF F1 
2e10e     C7 F1 CE F1 
2e112     D6 F1 DC F1 
2e116     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2e11a     F3 FC F5 FC 
2e11e     FE FB 79 FB 
2e122     62 FB 5F FB 
2e126     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2e12a     6F FA AF F3 
2e12e     53 F2 12 F2 
2e132     0F F2 15 F2 
2e136     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2e13a     2A F2 32 F2 
2e13e     38 F2 9A FB 
2e142     AF FB B1 FB 
2e146     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2e14a     B7 FB B8 FB 
2e14e     BA FB BC FB 
2e152     C1 FB 3B F8 
2e156     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2e15a     6E F2 6C F2 
2e15e     74 F2 7A F2 
2e162     81 F2 87 F2 
2e166     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2e16a     06 FC 09 FC 
2e16e     0C FC 0E FC 
2e172     0F FC 12 FC 
2e176     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2e17a     17 FC 1A FC 
2e17e     B2 F6 7B F3 
2e182     DD F2 C5 F2 
2e186     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2e18a     D4 F2 DB F2 
2e18e     E0 F2 E8 F2 
2e192     28 F8 60 FC 
2e196     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2e19a     64 FC 66 FC 
2e19e     68 FC 6A FC 
2e1a2     6D FC 52 FC 
2e1a6     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2e1aa     78 F3 24 F3 
2e1ae     1A F3 1E F3 
2e1b2     24 F3 2A F3 
2e1b6     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2e1ba     3D F3 80 FA 
2e1be     0C FB 0F FB 
2e1c2     10 FB 14 FB 
2e1c6     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2e1ca     1B FB 1D FB 
2e1ce     1F FB 92 FA 
2e1d2     DE F4 AE F3 
2e1d6     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2e1da     79 F3 7E F3 
2e1de     84 F3 8C F3 
2e1e2     92 F3 97 F3 
2e1e6     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2e1ea     67 FB 69 FB 
2e1ee     6B FB 6F FB 
2e1f2     71 FB 72 FB 
2e1f6     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2e1fa     E3 F8 BA F4 
2e1fe     EE F3 CC F3 
2e202     CA F3 CF F3 
2e206     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2e20a     E2 F3 E8 F3 
2e20e     ED F3 B7 FB 
2e212     BC FB BE FB 
2e216     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2e21a     C4 FB C6 FB 
2e21e     C8 FB C9 FB 
2e222     CC FB 8F F7 
2e226     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2e22a     1E F4 1E F4 
2e22e     24 F4 2A F4 
2e232     30 F4 38 F4 
2e236     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2e23a     AD FA B1 FA 
2e23e     B4 FA B6 FA 
2e242     BA FA BB FA 
2e246     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2e24a     C2 FA C6 FA 
2e24e     55 F6 C6 F4 
2e252     7D F4 72 F4 
2e256     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2e25a     83 F4 89 F4 
2e25e     8F F4 94 F4 
2e262     66 FA 03 FB 
2e266     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2e26a     0A FB 0E FB 
2e26e     10 FB 11 FB 
2e272     16 FB 18 FB 
2e276     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2e27a     F9 F4 CA F4 
2e27e     C5 F4 CB F4 
2e282     D1 F4 D7 F4 
2e286     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2e28a     E8 F4 3F FB 
2e28e     56 FB 58 FB 
2e292     5A FB 5E FB 
2e296     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2e29a     64 FB 64 FB 
2e29e     69 FB 99 F9 
2e2a2     E9 F5 33 F5 
2e2a6     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2e2aa     1D F5 22 F5 
2e2ae     27 F5 2E F5 
2e2b2     32 F5 37 F5 
2e2b6     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2e2ba     BC FA BC FA 
2e2be     C1 FA C2 FA 
2e2c2     C4 FA C8 FA 
2e2c6     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2e2ca     F9 F7 DB F5 
2e2ce     78 F5 69 F5 
2e2d2     6A F5 70 F5 
2e2d6     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2e2da     7F F5 85 F5 
2e2de     6E F7 06 FB 
2e2e2     0A FB 0B FB 
2e2e6     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2e2ea     14 FB 15 FB 
2e2ee     18 FB 1B FB 
2e2f2     1D FB 70 F7 
2e2f6     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2e2fa     B6 F5 BB F5 
2e2fe     C0 F5 C6 F5 
2e302     CA F5 CF F5 
2e306     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2e30a     54 FB 56 FB 
2e30e     5A FB 5B FB 
2e312     5E FB 5F FB 
2e316     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2e31a     67 FB 52 FB 
2e31e     29 F7 33 F6 
2e322     06 F6 02 F6 
2e326     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2e32a     10 F6 16 F6 
2e32e     1A F6 1F F6 
2e332     81 FB 9F FB 
2e336     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2e33a     51 FB F2 FA 
2e33e     E3 FA E3 FA 
2e342     E5 FA E9 FA 
2e346     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2e34a     64 F6 4D F6 
2e34e     4D F6 53 F6 
2e352     57 F6 5C F6 
2e356     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2e35a     6A F6 19 FB 
2e35e     1E FB 22 FB 
2e362     23 FB 24 FB 
2e366     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2e36a     2C FB 2E FB 
2e36e     32 FB F0 F8 
2e372     01 F7 A5 F6 
2e376     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2e37a     9F F6 A3 F6 
2e37e     A6 F6 AC F6 
2e382     B0 F6 EB F7 
2e386     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2e38a     68 FB 6C FB 
2e38e     6E FB 71 FB 
2e392     72 FB 74 FB 
2e396     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2e39a     71 F8 21 F7 
2e39e     E5 F6 DD F6 
2e3a2     E1 F6 E6 F6 
2e3a6     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2e3aa     F5 F6 F7 F6 
2e3ae     F7 FA AB FB 
2e3b2     AD FB AF FB 
2e3b6     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2e3ba     B6 FB B9 FB 
2e3be     BB FB BC FB 
2e3c2     21 FB 07 F8 
2e3c6     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2e3ca     22 F7 26 F7 
2e3ce     2B F7 2E F7 
2e3d2     34 F7 38 F7 
2e3d6     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2e3da     13 FB 16 FB 
2e3de     17 FB 1B FB 
2e3e2     1E FB 20 FB 
2e3e6     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2e3ea     26 FB 77 FA 
2e3ee     F3 F7 7C F7 
2e3f2     67 F7 6A F7 
2e3f6     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2e3fa     74 F7 7A F7 
2e3fe     7E F7 82 F7 
2e402     53 FB 5A FB 
2e406     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2e40a     5F FB 63 FB 
2e40e     65 FB 67 FB 
2e412     69 FB 6A FB 
2e416     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2e41a     B5 F7 A9 F7 
2e41e     AD F7 B0 F7 
2e422     B5 F7 B8 F7 
2e426     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2e42a     6E F8 99 FB 
2e42e     9C FB 9D FB 
2e432     9F FB A4 FB 
2e436     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2e43a     A9 FB AB FB 
2e43e     AD FB 46 F9 
2e442     26 F8 F0 F7 
2e446     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2e44a     F4 F7 F8 F7 
2e44e     FB F7 FF F7 
2e452     03 F8 65 FA 
2e456     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2e45a     2B FB 2F FB 
2e45e     30 FB 32 FB 
2e462     34 FB 38 FB 
2e466     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2e46a     E9 F8 4A F8 
2e46e     2E F8 2C F8 
2e472     2F F8 36 F8 
2e476     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2e47a     41 F8 44 F8 
2e47e     4A FB 67 FB 
2e482     68 FB 6B FB 
2e486     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2e48a     73 FB 74 FB 
2e48e     78 FB 7A FB 
2e492     14 FB E7 F8 
2e496     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2e49a     6D F8 70 F8 
2e49e     73 F8 78 F8 
2e4a2     7C F8 80 F8 
2e4a6     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2e4aa     A6 FB A7 FB 
2e4ae     A9 FB AC FB 
2e4b2     AF FB B1 FB 
2e4b6     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2e4ba     B7 FB 73 FA 
2e4be     F8 F8 B4 F8 
2e4c2     A9 F8 AB F8 
2e4c6     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2e4ca     B4 F8 B8 F8 
2e4ce     BB F8 FA F8 
2e4d2     64 FB 65 FB 
2e4d6     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2e4da     6D FB 6F FB 
2e4de     70 FB 74 FB 
2e4e2     77 FB 77 FB 
2e4e6     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2e4ea     E9 F8 E4 F8 
2e4ee     E8 F8 EB F8 
2e4f2     EE F8 F2 F8 
2e4f6     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2e4fa     B5 FA 9F FB 
2e4fe     A1 FB A4 FB 
2e502     A5 FB A9 FB 
2e506     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2e50a     AE FB B1 FB 
2e50e     B2 FB C7 F9 
2e512     39 F9 22 F9 
2e516     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2e51a     26 F9 2A F9 
2e51e     2E F9 32 F9 
2e522     33 F9 BA FB 
2e526     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2e52a     DE FB E1 FB 
2e52e     E2 FB E4 FB 
2e532     E5 FB E7 FB 
2e536     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2e53a     C5 F9 67 F9 
2e53e     57 F9 56 F9 
2e542     5B F9 5F F9 
2e546     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2e54a     68 F9 6C F9 
2e54e     0B FC 11 FC 
2e552     14 FC 15 FC 
2e556     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2e55a     B5 FB B5 FB 
2e55e     B6 FB B8 FB 
2e562     E9 FA C8 F9 
2e566     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2e56a     90 F9 94 F9 
2e56e     95 F9 99 F9 
2e572     9D F9 9F F9 
2e576     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2e57a     DE FB DF FB 
2e57e     E2 FB E4 FB 
2e582     E6 FB E8 FB 
2e586     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2e58a     EF FB AC FA 
2e58e     E9 F9 C7 F9 
2e592     C3 F9 C8 F9 
2e596     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2e59a     D0 F9 D4 F9 
2e59e     D6 F9 0E FB 
2e5a2     11 FC 13 FC 
2e5a6     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2e5aa     19 FC 1B FC 
2e5ae     1D FC 1E FC 
2e5b2     21 FC 22 FC 
2e5b6     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2e5ba     F7 F9 F7 F9 
2e5be     FB F9 FE F9 
2e5c2     00 FA 03 FA 
2e5c6     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2e5ca     1B FC 45 FC 
2e5ce     46 FC 48 FC 
2e5d2     4A FC 4B FC 
2e5d6     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2e5da     52 FC 54 FC 
2e5de     F3 FB 82 FA 
2e5e2     35 FA 28 FA 
2e5e6     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2e5ea     31 FA 32 FA 
2e5ee     37 FA 37 FA 
2e5f2     3C FA 00 FC 
2e5f6     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2e5fa     09 FC 0B FC 
2e5fe     0F FC 12 FC 
2e602     12 FC 15 FC 
2e606     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2e60a     8D FA 60 FA 
2e60e     5B FA 5C FA 
2e612     60 FA 61 FA 
2e616     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2e61a     6C FA 6D FA 
2e61e     37 FC 3A FC 
2e622     3B FC 3D FC 
2e626     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2e62a     43 FC 44 FC 
2e62e     45 FC 47 FC 
2e632     51 FB AB FA 
2e636     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2e63a     8E FA 91 FA 
2e63e     93 FA 95 FA 
2e642     98 FA 9B FA 
2e646     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2e64a     68 FC 6A FC 
2e64e     6C FC 6E FC 
2e652     70 FC 72 FC 
2e656     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2e65a     76 FC 3B FB 
2e65e     D0 FA BB FA 
2e662     B9 FA BD FA 
2e666     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2e66a     C4 FA C6 FA 
2e66e     CA FA 13 FC 
2e672     3A FC 3A FC 
2e676     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2e67a     41 FC 43 FC 
2e67e     44 FC 47 FC 
2e682     48 FC 3C FC 
2e686     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2e68a     E6 FA E8 FA 
2e68e     EB FA EE FA 
2e692     F0 FA F2 FA 
2e696     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2e69a     61 FC 66 FC 
2e69e     68 FC 6B FC 
2e6a2     6C FC 6E FC 
2e6a6     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2e6aa     73 FC 75 FC 
2e6ae     13 FC 3F FB 
2e6b2     17 FB 12 FB 
2e6b6     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2e6ba     1A FB 1D FB 
2e6be     1F FB 20 FB 
2e6c2     23 FB 92 FC 
2e6c6     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2e6ca     96 FC 97 FC 
2e6ce     9A FC 9C FC 
2e6d2     9E FC 9F FC 
2e6d6     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2e6da     5A FB 41 FB 
2e6de     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2e6e2     00 00 00 00 | zero2 long 0
2e6e6     01 00 00 00 
2e6ea     00 00 00 00 
2e6ee     00 00 00 00 
2e6f2     00 00 00 00 | mouse  file "mouse2.def"
2e6f6     00 00 00 00 
2e6fa     00 00 00 00 
2e6fe     00 00 00 00 
2e702     00 00 00 00 | 	byte	$00[16]
2e706     01 01 00 00 
2e70a     00 00 00 00 
2e70e     00 00 00 00 
2e712     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e716     00 00 00 00 
2e71a     00 00 00 00 
2e71e     00 00 00 00 
2e722     00 00 00 00 | 	byte	$00[16]
2e726     01 0D 01 00 
2e72a     00 00 00 00 
2e72e     00 00 00 00 
2e732     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e736     00 00 00 00 
2e73a     00 00 00 00 
2e73e     00 00 00 00 
2e742     00 00 00 00 | 	byte	$00[16]
2e746     01 0D 0D 01 
2e74a     00 00 00 00 
2e74e     00 00 00 00 
2e752     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e756     00 00 00 00 
2e75a     00 00 00 00 
2e75e     00 00 00 00 
2e762     00 00 00 00 | 	byte	$00[16]
2e766     01 0D 0D 0D 
2e76a     01 00 00 00 
2e76e     00 00 00 00 
2e772     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e776     00 00 00 00 
2e77a     00 00 00 00 
2e77e     00 00 00 00 
2e782     00 00 00 00 | 	byte	$00[16]
2e786     01 0D 0D 0D 
2e78a     0D 01 00 00 
2e78e     00 00 00 00 
2e792     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e796     00 00 00 00 
2e79a     00 00 00 00 
2e79e     00 00 00 00 
2e7a2     00 00 00 00 | 	byte	$00[16]
2e7a6     01 0D 0D 0D 
2e7aa     0D 0D 01 00 
2e7ae     00 00 00 00 
2e7b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e7b6     00 00 00 00 
2e7ba     00 00 00 00 
2e7be     00 00 00 00 
2e7c2     00 00 00 00 | 	byte	$00[16]
2e7c6     01 0D 0D 0D 
2e7ca     0D 0D 0D 01 
2e7ce     00 00 00 00 
2e7d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2e7d6     00 00 00 00 
2e7da     00 00 00 00 
2e7de     00 00 00 00 
2e7e2     00 00 00 00 | 	byte	$00[16]
2e7e6     01 0D 0D 0D 
2e7ea     0D 0D 0D 0C 
2e7ee     01 00 00 00 
2e7f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2e7f6     00 00 00 00 
2e7fa     00 00 00 00 
2e7fe     00 00 00 00 
2e802     00 00 00 00 | 	byte	$00[16]
2e806     01 0D 0D 0D 
2e80a     0D 0D 0D 0D 
2e80e     0C 01 00 00 
2e812     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2e816     00 00 00 00 
2e81a     00 00 00 00 
2e81e     00 00 00 00 
2e822     00 00 00 00 | 	byte	$00[16]
2e826     01 0D 0D 0D 
2e82a     0D 0D 0D 0D 
2e82e     0D 0C 01 00 
2e832     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2e836     00 00 00 00 
2e83a     00 00 00 00 
2e83e     00 00 00 00 
2e842     00 00 00 00 | 	byte	$00[16]
2e846     01 0D 0D 0D 
2e84a     0D 0D 0D 0D 
2e84e     0D 0D 0B 01 
2e852     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2e856     00 00 00 00 
2e85a     00 00 00 00 
2e85e     00 00 00 00 
2e862     00 00 00 00 | 	byte	$00[16]
2e866     01 0D 0D 0D 
2e86a     0C 0D 0D 03 
2e86e     01 01 01 01 
2e872     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2e876     00 00 00 00 
2e87a     00 00 00 00 
2e87e     00 00 00 00 
2e882     00 00 00 00 | 	byte	$00[16]
2e886     01 0D 0D 0C 
2e88a     01 09 0D 03 
2e88e     00 00 00 00 
2e892     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2e896     00 00 00 00 
2e89a     00 00 00 00 
2e89e     00 00 00 00 
2e8a2     00 00 00 00 | 	byte	$00[16]
2e8a6     01 0D 0C 01 
2e8aa     00 01 0D 0B 
2e8ae     01 00 00 00 
2e8b2     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2e8b6     00 00 00 00 
2e8ba     00 00 00 00 
2e8be     00 00 00 00 
2e8c2     00 00 00 00 | 	byte	$00[16]
2e8c6     01 0C 01 00 
2e8ca     00 01 0A 0D 
2e8ce     01 00 00 00 
2e8d2     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2e8d6     00 00 00 00 
2e8da     00 00 00 00 
2e8de     00 00 00 00 
2e8e2     00 00 00 00 | 	byte	$00[16]
2e8e6     01 01 00 00 
2e8ea     00 00 01 0D 
2e8ee     0B 01 00 00 
2e8f2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2e8f6     00 00 00 00 
2e8fa     00 00 00 00 
2e8fe     00 00 00 00 
2e902     00 00 00 00 
2e906     00 00 00 00 
2e90a     00 00       | 	byte	$00[22]
2e90c     01 0B 0D 01 
2e910     00 00 00 00 
2e914     00 00 00 00 
2e918     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e91c     00 00 00 00 
2e920     00 00 00 00 
2e924     00 00 00 00 
2e928     00 00 00 00 
2e92c     00          | 	byte	$00[17]
2e92d     01 01 00 00 
2e931     00 00 00 00 
2e935     00 00 00 00 
2e939     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e93d     00 00 00 00 
      ...             
2eae1     00 00 00 00 
2eae5     00          | 	byte	$00[425]
2eae6     73 32 00 04 
2eaea     00 00 10 00 
2eaee     00 00 00 00 
2eaf2     00 00 00 00 | atari2 file "atari2.s2"
2eaf6     43 87 43 87 
2eafa     43 87 44 87 
2eafe     43 87 44 87 
2eb02     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2eb06     43 87 43 87 
2eb0a     43 87 44 87 
2eb0e     43 87 43 87 
2eb12     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2eb16     44 87 43 87 
2eb1a     44 87 43 87 
2eb1e     43 87 43 87 
2eb22     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2eb26     43 87 43 87 
2eb2a     44 87 43 87 
2eb2e     44 87 44 87 
2eb32     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
2eb36     43 87 43 87 
2eb3a     44 87 43 87 
2eb3e     43 87 42 87 
2eb42     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2eb46     43 87 43 87 
2eb4a     43 87 43 87 
2eb4e     44 87 43 87 
2eb52     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2eb56     44 87 44 87 
2eb5a     43 87 44 87 
2eb5e     43 87 44 87 
2eb62     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
2eb66     44 87 43 87 
2eb6a     44 87 44 87 
2eb6e     43 87 43 87 
2eb72     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2eb76     43 87 44 87 
2eb7a     44 87 43 87 
2eb7e     43 87 44 87 
2eb82     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2eb86     43 87 43 87 
2eb8a     43 87 43 87 
2eb8e     43 87 43 87 
2eb92     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
2eb96     42 87 43 87 
2eb9a     44 87 42 87 
2eb9e     43 87 43 87 
2eba2     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
2eba6     43 87 44 87 
2ebaa     44 87 43 87 
2ebae     43 87 43 87 
2ebb2     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2ebb6     43 87 5C 87 
2ebba     EE 86 AC 87 
2ebbe     4C 7C A3 78 
2ebc2     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
2ebc6     BC 78 BB 78 
2ebca     BD 78 BC 78 
2ebce     BB 78 BD 78 
2ebd2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
2ebd6     BB 78 BB 78 
2ebda     BC 78 BC 78 
2ebde     BC 78 BB 78 
2ebe2     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ebe6     BC 78 BC 78 
2ebea     BC 78 BC 78 
2ebee     BC 78 BC 78 
2ebf2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2ebf6     BB 78 BC 78 
2ebfa     A0 78 4C 7C 
2ebfe     11 7A 29 89 
2ec02     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
2ec06     44 87 43 87 
2ec0a     44 87 43 87 
2ec0e     43 87 42 87 
2ec12     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2ec16     43 87 43 87 
2ec1a     44 87 ED 85 
2ec1e     71 85 52 79 
2ec22     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
2ec26     BC 78 BC 78 
2ec2a     BC 78 BC 78 
2ec2e     BC 78 BC 78 
2ec32     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2ec36     BC 78 BC 78 
2ec3a     BC 78 A0 78 
2ec3e     CF 7A B9 81 
2ec42     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
2ec46     44 87 43 87 
2ec4a     43 87 44 87 
2ec4e     43 87 44 87 
2ec52     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2ec56     43 87 43 87 
2ec5a     43 87 43 87 
2ec5e     44 87 43 87 
2ec62     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2ec66     43 87 43 87 
2ec6a     44 87 43 87 
2ec6e     44 87 43 87 
2ec72     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2ec76     44 87 43 87 
2ec7a     43 87 43 87 
2ec7e     5A 87 39 81 
2ec82     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
2ec86     A5 78 BC 78 
2ec8a     BB 78 BC 78 
2ec8e     BB 78 BC 78 
2ec92     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
2ec96     BC 78 BC 78 
2ec9a     BC 78 BC 78 
2ec9e     BC 78 8F 79 
2eca2     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
2eca6     09 85 47 87 
2ecaa     43 87 43 87 
2ecae     42 87 42 87 
2ecb2     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
2ecb6     43 87 43 87 
2ecba     43 87 43 87 
2ecbe     43 87 44 87 
2ecc2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2ecc6     43 87 43 87 
2ecca     44 87 43 87 
2ecce     42 87 43 87 
2ecd2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
2ecd6     44 87 43 87 
2ecda     43 87 43 87 
2ecde     44 87 44 87 
2ece2     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
2ece6     94 78 55 7A 
2ecea     B9 78 BC 78 
2ecee     BC 78 BC 78 
2ecf2     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2ecf6     BC 78 BB 78 
2ecfa     BC 78 BC 78 
2ecfe     BC 78 BC 78 
2ed02     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2ed06     BB 78 BC 78 
2ed0a     BC 78 BC 78 
2ed0e     BB 78 BC 78 
2ed12     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2ed16     BC 78 BC 78 
2ed1a     BD 78 BC 78 
2ed1e     BC 78 BB 78 
2ed22     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
2ed26     94 78 B3 84 
2ed2a     36 84 4A 87 
2ed2e     43 87 43 87 
2ed32     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
2ed36     43 87 44 87 
2ed3a     43 87 43 87 
2ed3e     43 87 43 87 
2ed42     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2ed46     43 87 44 87 
2ed4a     43 87 44 87 
2ed4e     43 87 43 87 
2ed52     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2ed56     43 87 43 87 
2ed5a     43 87 45 87 
2ed5e     43 87 43 87 
2ed62     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
2ed66     43 87 44 87 
2ed6a     44 87 44 87 
2ed6e     43 87 43 87 
2ed72     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2ed76     43 87 42 87 
2ed7a     43 87 43 87 
2ed7e     44 87 43 87 
2ed82     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2ed86     54 87 3C 82 
2ed8a     36 83 52 79 
2ed8e     C6 78 BC 78 
2ed92     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
2ed96     BB 78 BB 78 
2ed9a     BC 78 BC 78 
2ed9e     BC 78 BC 78 
2eda2     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2eda6     BD 78 ED 78 
2edaa     1B 79 F4 83 
2edae     4D 83 4E 87 
2edb2     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
2edb6     44 87 43 87 
2edba     42 87 44 87 
2edbe     43 87 42 87 
2edc2     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
2edc6     43 87 54 87 
2edca     26 82 B3 84 
2edce     D6 77 BB 78 
2edd2     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
2edd6     BC 78 BB 78 
2edda     BB 78 BB 78 
2edde     BB 78 BB 78 
2ede2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
2ede6     BC 78 BC 78 
2edea     26 79 18 75 
2edee     36 83 1F 84 
2edf2     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
2edf6     43 87 43 87 
2edfa     43 87 43 87 
2edfe     43 87 44 87 
2ee02     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2ee06     43 87 44 87 
2ee0a     44 87 43 87 
2ee0e     43 87 43 87 
2ee12     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
2ee16     43 87 43 87 
2ee1a     43 87 43 87 
2ee1e     44 87 44 87 
2ee22     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
2ee26     44 87 43 87 
2ee2a     43 87 43 87 
2ee2e     43 87 44 87 
2ee32     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2ee36     44 87 44 87 
2ee3a     44 87 43 87 
2ee3e     44 87 43 87 
2ee42     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2ee46     43 87 43 87 
2ee4a     43 87 44 87 
2ee4e     44 87 43 87 
2ee52     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2ee56     43 87 43 87 
2ee5a     43 87 43 87 
2ee5e     43 87 44 87 
2ee62     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2ee66     43 87 44 87 
2ee6a     43 87 44 87 
2ee6e     19 87 7D 86 
2ee72     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
2ee76     B1 78 BC 78 
2ee7a     BC 78 BC 78 
2ee7e     BC 78 BC 78 
2ee82     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2ee86     BC 78 BC 78 
2ee8a     BD 78 BC 78 
2ee8e     B7 78 3B 7B 
2ee92     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
2ee96     96 86 44 87 
2ee9a     43 87 43 87 
2ee9e     43 87 43 87 
2eea2     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
2eea6     44 87 44 87 
2eeaa     43 87 44 87 
2eeae     43 87 44 87 
2eeb2     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
2eeb6     43 87 44 87 
2eeba     43 87 44 87 
2eebe     43 87 44 87 
2eec2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2eec6     43 87 44 87 
2eeca     43 87 43 87 
2eece     44 87 43 87 
2eed2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2eed6     44 87 44 87 
2eeda     43 87 43 87 
2eede     43 87 44 87 
2eee2     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2eee6     43 87 43 87 
2eeea     43 87 43 87 
2eeee     44 87 44 87 
2eef2     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
2eef6     36 83 CF 7A 
2eefa     AB 78 BB 78 
2eefe     BC 78 BC 78 
2ef02     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
2ef06     BB 78 BC 78 
2ef0a     BC 78 BC 78 
2ef0e     BC 78 BC 78 
2ef12     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2ef16     BC 78 BC 78 
2ef1a     BC 78 BB 78 
2ef1e     BC 78 BC 78 
2ef22     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2ef26     BB 78 BC 78 
2ef2a     BB 78 BC 78 
2ef2e     BC 78 BD 78 
2ef32     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
2ef36     BC 78 BC 78 
2ef3a     BC 78 BC 78 
2ef3e     BC 78 BD 78 
2ef42     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
2ef46     BC 78 BB 78 
2ef4a     BC 78 BB 78 
2ef4e     BB 78 BC 78 
2ef52     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
2ef56     BC 78 BC 78 
2ef5a     BC 78 BC 78 
2ef5e     BC 78 BB 78 
2ef62     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
2ef66     BC 78 BC 78 
2ef6a     BC 78 BD 78 
2ef6e     BB 78 BC 78 
2ef72     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2ef76     BC 78 BC 78 
2ef7a     BC 78 BB 78 
2ef7e     BC 78 BB 78 
2ef82     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2ef86     BB 78 BC 78 
2ef8a     BC 78 BC 78 
2ef8e     BC 78 BB 78 
2ef92     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ef96     BC 78 BC 78 
2ef9a     BC 78 BB 78 
2ef9e     BC 78 BB 78 
2efa2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2efa6     BC 78 BC 78 
2efaa     BC 78 BC 78 
2efae     BB 78 BC 78 
2efb2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2efb6     BC 78 9F 78 
2efba     52 79 B3 84 
2efbe     2F 86 60 87 
2efc2     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
2efc6     44 87 43 87 
2efca     43 87 43 87 
2efce     43 87 43 87 
2efd2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2efd6     43 87 43 87 
2efda     43 87 44 87 
2efde     43 87 43 87 
2efe2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2efe6     43 87 43 87 
2efea     43 87 43 87 
2efee     43 87 44 87 
2eff2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2eff6     44 87 44 87 
2effa     5E 87 BC 80 
2effe     FB 80 94 78 
2f002     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
2f006     BD 78 BC 78 
2f00a     BB 78 BC 78 
2f00e     BB 78 BB 78 
2f012     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
2f016     BC 78 BB 78 
2f01a     BB 78 6B 79 
2f01e     D6 77 AC 87 
2f022     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
2f026     43 87 44 87 
2f02a     43 87 43 87 
2f02e     44 87 43 87 
2f032     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2f036     43 87 44 87 
2f03a     43 87 5C 87 
2f03e     E7 80 00 80 
2f042     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
2f046     BC 78 BD 78 
2f04a     BC 78 BC 78 
2f04e     BC 78 BB 78 
2f052     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f056     BC 78 BC 78 
2f05a     BB 78 BC 78 
2f05e     BB 78 BC 78 
2f062     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2f066     BB 78 BC 78 
2f06a     BC 78 BC 78 
2f06e     BC 78 BC 78 
2f072     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2f076     BC 78 BC 78 
2f07a     BC 78 BC 78 
2f07e     A0 78 8D 7B 
2f082     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
2f086     60 87 43 87 
2f08a     44 87 44 87 
2f08e     43 87 43 87 
2f092     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f096     44 87 43 87 
2f09a     43 87 43 87 
2f09e     44 87 73 86 
2f0a2     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
2f0a6     51 7B B6 78 
2f0aa     BC 78 BD 78 
2f0ae     BC 78 BC 78 
2f0b2     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2f0b6     BB 78 BC 78 
2f0ba     BD 78 BB 78 
2f0be     BC 78 BB 78 
2f0c2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2f0c6     BC 78 BC 78 
2f0ca     BC 78 BC 78 
2f0ce     BB 78 BC 78 
2f0d2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2f0d6     BC 78 BB 78 
2f0da     BB 78 BC 78 
2f0de     BC 78 BB 78 
2f0e2     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
2f0e6     22 8C AF 84 
2f0ea     48 87 43 87 
2f0ee     44 87 43 87 
2f0f2     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
2f0f6     43 87 42 87 
2f0fa     43 87 43 87 
2f0fe     44 87 43 87 
2f102     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2f106     43 87 43 87 
2f10a     44 87 44 87 
2f10e     43 87 43 87 
2f112     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2f116     43 87 43 87 
2f11a     43 87 43 87 
2f11e     44 87 43 87 
2f122     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
2f126     9F 8B D6 77 
2f12a     16 7C B3 78 
2f12e     BC 78 BB 78 
2f132     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2f136     BB 78 BC 78 
2f13a     BB 78 BC 78 
2f13e     BC 78 BC 78 
2f142     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2f146     BC 78 BB 78 
2f14a     BB 78 BC 78 
2f14e     BB 78 BC 78 
2f152     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2f156     BB 78 BB 78 
2f15a     BC 78 BC 78 
2f15e     BC 78 BB 78 
2f162     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2f166     BC 78 BC 78 
2f16a     BC 78 BD 78 
2f16e     BB 78 BC 78 
2f172     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
2f176     BC 78 BC 78 
2f17a     BC 78 BB 78 
2f17e     BC 78 BC 78 
2f182     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2f186     A8 78 54 7E 
2f18a     F4 83 17 82 
2f18e     50 87 43 87 
2f192     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
2f196     44 87 43 87 
2f19a     44 87 43 87 
2f19e     43 87 44 87 
2f1a2     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2f1a6     43 87 28 87 
2f1aa     20 85 CF 7A 
2f1ae     70 7D AD 78 
2f1b2     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
2f1b6     BB 78 BC 78 
2f1ba     BC 78 BC 78 
2f1be     BB 78 BB 78 
2f1c2     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
2f1c6     BB 78 B2 78 
2f1ca     9A 7C CF 7A 
2f1ce     4A 87 0D 87 
2f1d2     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
2f1d6     43 87 44 87 
2f1da     43 87 44 87 
2f1de     43 87 43 87 
2f1e2     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
2f1e6     44 87 43 87 
2f1ea     28 87 51 85 
2f1ee     11 7A 1E 7D 
2f1f2     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
2f1f6     BC 78 BB 78 
2f1fa     BC 78 BC 78 
2f1fe     BC 78 BC 78 
2f202     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2f206     BB 78 BC 78 
2f20a     BB 78 BC 78 
2f20e     BC 78 BC 78 
2f212     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2f216     BB 78 BC 78 
2f21a     BC 78 BC 78 
2f21e     BD 78 BB 78 
2f222     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
2f226     BC 78 BB 78 
2f22a     BC 78 BC 78 
2f22e     BC 78 BB 78 
2f232     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f236     BC 78 BC 78 
2f23a     BC 78 BC 78 
2f23e     BB 78 BC 78 
2f242     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2f246     BC 78 BD 78 
2f24a     BC 78 BC 78 
2f24e     BC 78 BB 78 
2f252     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f256     BC 78 BB 78 
2f25a     BB 78 BC 78 
2f25e     BC 78 BB 78 
2f262     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f266     BB 78 BB 78 
2f26a     BB 78 BC 78 
2f26e     B6 78 48 7D 
2f272     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
2f276     56 87 43 87 
2f27a     42 87 44 87 
2f27e     44 87 43 87 
2f282     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2f286     43 87 44 87 
2f28a     43 87 44 87 
2f28e     4C 87 7E 83 
2f292     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
2f296     F7 78 BC 78 
2f29a     BC 78 BB 78 
2f29e     BB 78 BC 78 
2f2a2     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2f2a6     BC 78 BB 78 
2f2aa     BC 78 BC 78 
2f2ae     BB 78 BC 78 
2f2b2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2f2b6     BB 78 BC 78 
2f2ba     BC 78 BC 78 
2f2be     BC 78 BB 78 
2f2c2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f2c6     BC 78 BC 78 
2f2ca     BC 78 BC 78 
2f2ce     BC 78 BB 78 
2f2d2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f2d6     BC 78 BB 78 
2f2da     BB 78 BC 78 
2f2de     BC 78 BB 78 
2f2e2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f2e6     BC 78 BC 78 
2f2ea     BB 78 BC 78 
2f2ee     BC 78 BC 78 
2f2f2     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
2f2f6     73 32 00 04 
2f2fa     00 00 10 00 
2f2fe     00 00 00 00 
2f302     00 00 00 00 | atari12 file "atari12.s2"
2f306     00 6D 00 6D 
2f30a     00 6D 00 6D 
2f30e     00 6D 00 6D 
2f312     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f316     00 6D 00 6D 
2f31a     00 6D 00 6D 
2f31e     00 6D 00 6D 
2f322     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f326     00 6D 00 6D 
2f32a     00 6D 00 6D 
2f32e     00 6D 00 6D 
2f332     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f336     00 6D 00 6D 
2f33a     00 6D 00 6D 
2f33e     00 6D 00 6D 
2f342     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f346     00 6D 00 6D 
2f34a     00 6D 00 6D 
2f34e     00 6D 00 6D 
2f352     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
2f356     00 6C 00 6C 
2f35a     00 6C 00 6C 
2f35e     00 6C 00 6C 
2f362     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f366     00 6C 00 6C 
2f36a     00 6C 00 6C 
2f36e     00 6C 00 6C 
2f372     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f376     00 6C 00 6C 
2f37a     00 6C 00 6C 
2f37e     00 6C 00 6C 
2f382     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f386     00 6C 00 6C 
2f38a     00 6C 00 6C 
2f38e     00 6C 00 6C 
2f392     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f396     00 6C 00 6C 
2f39a     00 6C 00 6C 
2f39e     00 6C 00 6C 
2f3a2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f3a6     00 6C 00 6C 
2f3aa     00 6C 00 6C 
2f3ae     00 6C 00 6C 
2f3b2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f3b6     00 6C 00 6C 
2f3ba     00 6C 00 6C 
2f3be     00 6C 00 6C 
2f3c2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f3c6     00 6C 00 6C 
2f3ca     00 6C 00 6C 
2f3ce     00 6C 00 6C 
2f3d2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f3d6     00 6C 00 6C 
2f3da     00 6C 00 6C 
2f3de     00 6C 00 6C 
2f3e2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f3e6     00 6C 00 6C 
2f3ea     00 6C 00 6C 
2f3ee     00 6C 00 6C 
2f3f2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f3f6     00 6C 00 6C 
2f3fa     00 6C 00 6C 
2f3fe     00 6C 00 6C 
2f402     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f406     00 6C 00 6B 
2f40a     00 6B 00 6B 
2f40e     00 6B 00 6B 
2f412     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f416     00 6B 00 6B 
2f41a     00 6B 00 6B 
2f41e     00 6B 00 6B 
2f422     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f426     00 6B 00 6B 
2f42a     00 6B 00 6B 
2f42e     00 6B 00 6B 
2f432     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f436     00 6B 00 6B 
2f43a     00 6B 00 6B 
2f43e     00 6B 00 6B 
2f442     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f446     00 6B 00 6B 
2f44a     00 6B 00 6B 
2f44e     00 6B 00 6B 
2f452     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f456     00 6B 00 6B 
2f45a     00 6B 00 6B 
2f45e     00 6B 00 6B 
2f462     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f466     00 6B 00 6B 
2f46a     00 6B 00 6B 
2f46e     00 6B 00 6B 
2f472     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f476     00 6B 00 6B 
2f47a     00 6B 00 6B 
2f47e     00 6B 00 6B 
2f482     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f486     00 6B 00 6B 
2f48a     00 6B 00 6B 
2f48e     00 6B 00 6B 
2f492     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f496     00 6B 00 6B 
2f49a     00 6B 00 6B 
2f49e     00 6A 00 9D 
2f4a2     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
2f4a6     00 9E 00 9E 
2f4aa     00 9E 00 9E 
2f4ae     00 9E 00 9E 
2f4b2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f4b6     00 9E 00 9E 
2f4ba     00 9E 00 9E 
2f4be     00 9E 00 9E 
2f4c2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f4c6     00 9E 00 9E 
2f4ca     00 9E 00 9E 
2f4ce     00 9E 00 9E 
2f4d2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f4d6     00 9E 00 9E 
2f4da     00 9E 00 9E 
2f4de     00 9E 00 9E 
2f4e2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f4e6     00 9E 00 9E 
2f4ea     00 9E 00 9E 
2f4ee     00 9E 00 9E 
2f4f2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f4f6     00 9E 00 9E 
2f4fa     00 9E 00 9E 
2f4fe     00 9E 00 9E 
2f502     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f506     00 9E 00 9E 
2f50a     00 9E 00 9E 
2f50e     00 9E 00 9E 
2f512     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f516     00 9E 00 9E 
2f51a     00 9E 00 9E 
2f51e     00 9E 00 9E 
2f522     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f526     00 9E 00 9E 
2f52a     00 9E 00 9E 
2f52e     00 9E 00 9E 
2f532     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
2f536     00 9F 00 9F 
2f53a     00 9F 00 9F 
2f53e     00 9F 00 9F 
2f542     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f546     00 9F 00 9F 
2f54a     00 9F 00 9F 
2f54e     00 9F 00 9F 
2f552     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f556     00 9F 00 9F 
2f55a     00 9F 00 9F 
2f55e     00 9F 00 9F 
2f562     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f566     00 9F 00 9F 
2f56a     00 9F 00 9F 
2f56e     00 9F 00 9F 
2f572     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f576     00 9F 00 9F 
2f57a     00 9F 00 9F 
2f57e     00 9F 00 9F 
2f582     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f586     00 9F 00 9F 
2f58a     00 9F 00 9F 
2f58e     00 9F 00 9F 
2f592     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f596     00 9F 00 9F 
2f59a     00 9F 00 9F 
2f59e     00 9F 00 9F 
2f5a2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f5a6     00 9F 00 9F 
2f5aa     00 9F 00 9F 
2f5ae     00 9F 00 9F 
2f5b2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f5b6     00 9F 00 9F 
2f5ba     00 9F 00 9F 
2f5be     00 9F 00 9F 
2f5c2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f5c6     00 9F 00 9F 
2f5ca     00 9F 00 9F 
2f5ce     00 9F 00 9F 
2f5d2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f5d6     00 9F 00 9F 
2f5da     00 9F 00 9F 
2f5de     00 9F 00 9F 
2f5e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f5e6     00 9F 00 9F 
2f5ea     00 9F 00 9F 
2f5ee     00 9F 00 9F 
2f5f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f5f6     00 9F 00 9F 
2f5fa     00 9F 00 A0 
2f5fe     00 A0 00 A0 
2f602     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f606     00 A0 00 A0 
2f60a     00 A0 00 A0 
2f60e     00 A0 00 A0 
2f612     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f616     00 A0 00 A0 
2f61a     00 A0 00 A0 
2f61e     00 A0 00 A0 
2f622     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f626     00 A0 00 A0 
2f62a     00 A0 00 A0 
2f62e     00 A0 00 A0 
2f632     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f636     00 A0 00 A0 
2f63a     00 A0 00 A0 
2f63e     00 A0 00 A0 
2f642     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f646     00 A0 00 A0 
2f64a     00 A0 00 A0 
2f64e     00 A0 00 A0 
2f652     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f656     00 A0 00 A0 
2f65a     00 A0 00 A0 
2f65e     00 A0 00 A0 
2f662     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f666     00 A0 00 A0 
2f66a     00 A0 00 A0 
2f66e     00 A0 00 A0 
2f672     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f676     00 A0 00 A0 
2f67a     00 A0 00 A0 
2f67e     00 A0 00 A0 
2f682     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f686     00 A0 00 A0 
2f68a     00 A0 00 A0 
2f68e     00 A0 00 A0 
2f692     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f696     00 A0 00 A0 
2f69a     00 A0 00 A0 
2f69e     00 A0 00 A0 
2f6a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f6a6     00 A0 00 A0 
2f6aa     00 A0 00 A0 
2f6ae     00 A0 00 A0 
2f6b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f6b6     00 A0 00 A0 
2f6ba     00 A0 00 A0 
2f6be     00 A0 00 A0 
2f6c2     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
2f6c6     00 6D 00 6D 
2f6ca     00 6D 00 6D 
2f6ce     00 6D 00 6D 
2f6d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f6d6     00 6D 00 6D 
2f6da     00 6D 00 6D 
2f6de     00 6D 00 6D 
2f6e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f6e6     00 6D 00 6D 
2f6ea     00 6D 00 6D 
2f6ee     00 6D 00 6D 
2f6f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f6f6     00 6D 00 6D 
2f6fa     00 6D 00 6D 
2f6fe     00 6D 00 6D 
2f702     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f706     00 6D 00 6D 
2f70a     00 6D 00 6D 
2f70e     00 6D 00 6D 
2f712     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f716     00 6D 00 6D 
2f71a     00 6D 00 6D 
2f71e     00 6D 00 6D 
2f722     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f726     00 6D 00 6D 
2f72a     00 6D 00 6D 
2f72e     00 6D 00 6D 
2f732     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f736     00 6D 00 6D 
2f73a     00 6D 00 6D 
2f73e     00 6D 00 6D 
2f742     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f746     00 6D 00 6D 
2f74a     00 A0 00 A0 
2f74e     00 A0 00 A0 
2f752     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f756     00 A0 00 A0 
2f75a     00 A0 00 A0 
2f75e     00 A0 00 A0 
2f762     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f766     00 A0 00 A0 
2f76a     00 A0 00 A0 
2f76e     00 A0 00 A0 
2f772     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f776     00 A0 00 A0 
2f77a     00 A0 00 A0 
2f77e     00 A0 00 A0 
2f782     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f786     00 A0 00 A0 
2f78a     00 A0 00 A0 
2f78e     00 A0 00 A0 
2f792     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f796     00 A0 00 A0 
2f79a     00 A0 00 A0 
2f79e     00 A0 00 A0 
2f7a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f7a6     00 A0 00 A0 
2f7aa     00 A0 00 A0 
2f7ae     00 A0 00 A0 
2f7b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f7b6     00 A0 00 A0 
2f7ba     00 A0 00 A0 
2f7be     00 A0 00 A0 
2f7c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f7c6     00 A0 00 A0 
2f7ca     00 A0 00 A0 
2f7ce     00 A0 00 A0 
2f7d2     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
2f7d6     00 6D 00 6D 
2f7da     00 6D 00 6D 
2f7de     00 6D 00 6D 
2f7e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f7e6     00 6D 00 6D 
2f7ea     00 6D 00 6D 
2f7ee     00 6D 00 6D 
2f7f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f7f6     00 6D 00 6D 
2f7fa     00 6D 00 6D 
2f7fe     00 6D 00 6D 
2f802     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f806     00 6D 00 6D 
2f80a     00 6D 00 6D 
2f80e     00 6D 00 6D 
2f812     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f816     00 6D 00 6D 
2f81a     00 6D 00 6D 
2f81e     00 6D 00 6D 
2f822     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f826     00 6D 00 6D 
2f82a     00 6D 00 6D 
2f82e     00 6D 00 6D 
2f832     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f836     00 6D 00 6D 
2f83a     00 6D 00 6D 
2f83e     00 6D 00 6D 
2f842     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f846     00 6D 00 6D 
2f84a     00 6D 00 6D 
2f84e     00 6D 00 6D 
2f852     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f856     00 6D 00 6D 
2f85a     00 6C 00 A0 
2f85e     00 9F 00 A0 
2f862     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
2f866     00 A0 00 A0 
2f86a     00 A0 00 A0 
2f86e     00 A0 00 A0 
2f872     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f876     00 A0 00 A0 
2f87a     00 A0 00 A0 
2f87e     00 A0 00 A0 
2f882     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f886     00 A0 00 A0 
2f88a     00 A0 00 A0 
2f88e     00 A0 00 A0 
2f892     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f896     00 A0 00 A0 
2f89a     00 A0 00 A0 
2f89e     00 A0 00 A0 
2f8a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f8a6     00 A0 00 A0 
2f8aa     00 A0 00 A0 
2f8ae     00 A0 00 A0 
2f8b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f8b6     00 A0 00 A0 
2f8ba     00 A0 00 A0 
2f8be     00 A0 00 A0 
2f8c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f8c6     00 A0 00 A0 
2f8ca     00 A0 00 A0 
2f8ce     00 A0 00 A0 
2f8d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f8d6     00 A0 00 A0 
2f8da     00 A0 00 A0 
2f8de     00 A0 00 A0 
2f8e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f8e6     00 A0 00 A0 
2f8ea     00 A0 00 A0 
2f8ee     00 A0 00 A0 
2f8f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f8f6     00 A0 00 A0 
2f8fa     00 A0 00 A0 
2f8fe     00 A0 00 A0 
2f902     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f906     00 A0 00 A0 
2f90a     00 A0 00 A0 
2f90e     00 A0 00 A0 
2f912     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
2f916     00 A1 00 A1 
2f91a     00 A1 00 A1 
2f91e     00 A1 00 A1 
2f922     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f926     00 A1 00 A1 
2f92a     00 A1 00 A1 
2f92e     00 A1 00 A1 
2f932     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f936     00 A1 00 A1 
2f93a     00 A1 00 A1 
2f93e     00 A1 00 A1 
2f942     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f946     00 A1 00 A1 
2f94a     00 A1 00 A1 
2f94e     00 A1 00 A1 
2f952     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f956     00 A1 00 A1 
2f95a     00 A1 00 A1 
2f95e     00 A1 00 A1 
2f962     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f966     00 A1 00 A1 
2f96a     00 A1 00 A1 
2f96e     00 6E 00 6E 
2f972     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f976     00 6E 00 6E 
2f97a     00 6E 00 6E 
2f97e     00 6E 00 6E 
2f982     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f986     00 6E 00 6E 
2f98a     00 6E 00 6E 
2f98e     00 6E 00 6E 
2f992     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f996     00 6E 00 6E 
2f99a     00 6E 00 6E 
2f99e     00 6E 00 6E 
2f9a2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f9a6     00 6E 00 6D 
2f9aa     00 6D 00 6D 
2f9ae     00 6D 00 6D 
2f9b2     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f9b6     00 6D 00 6D 
2f9ba     00 6D 00 6D 
2f9be     00 6D 00 6D 
2f9c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f9c6     00 6D 00 6D 
2f9ca     00 6D 00 6D 
2f9ce     00 6D 00 6D 
2f9d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f9d6     00 6D 00 6D 
2f9da     00 6D 00 6D 
2f9de     00 6D 00 6D 
2f9e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f9e6     00 6D 00 6D 
2f9ea     00 6D 00 6D 
2f9ee     00 6D 00 6D 
2f9f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f9f6     00 6D 00 6D 
2f9fa     00 6D 00 6D 
2f9fe     00 6D 00 6D 
2fa02     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fa06     00 6D 00 6D 
2fa0a     00 6D 00 6D 
2fa0e     00 6D 00 6D 
2fa12     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fa16     00 6D 00 6D 
2fa1a     00 6D 00 6D 
2fa1e     00 6D 00 6D 
2fa22     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fa26     00 6D 00 6D 
2fa2a     00 6D 00 6D 
2fa2e     00 6D 00 6D 
2fa32     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fa36     00 6D 00 6D 
2fa3a     00 6D 00 6D 
2fa3e     00 6D 00 6D 
2fa42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fa46     00 6D 00 6D 
2fa4a     00 6D 00 6D 
2fa4e     00 6D 00 6D 
2fa52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fa56     00 6D 00 6D 
2fa5a     00 6C 00 6C 
2fa5e     00 6C 00 6C 
2fa62     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fa66     00 6C 00 6C 
2fa6a     00 6C 00 6C 
2fa6e     00 6C 00 6C 
2fa72     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fa76     00 6C 00 6C 
2fa7a     00 6C 00 6C 
2fa7e     00 9D 00 9F 
2fa82     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
2fa86     00 9F 00 9F 
2fa8a     00 9F 00 9F 
2fa8e     00 A0 00 A0 
2fa92     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2fa96     00 A0 00 A0 
2fa9a     00 A0 00 A0 
2fa9e     00 A0 00 A0 
2faa2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2faa6     00 A0 00 A0 
2faaa     00 A0 00 A0 
2faae     00 A0 00 A0 
2fab2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2fab6     00 A0 00 A0 
2faba     00 A0 00 A0 
2fabe     00 A0 00 A0 
2fac2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2fac6     00 A0 00 A0 
2faca     00 A0 00 A0 
2face     00 A0 00 A0 
2fad2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2fad6     00 A0 00 A0 
2fada     00 A0 00 A0 
2fade     00 A0 00 A0 
2fae2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2fae6     00 A0 00 A0 
2faea     00 A0 00 A0 
2faee     00 A0 00 A0 
2faf2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2faf6     00 A0 00 A0 
2fafa     00 A0 00 A0 
2fafe     00 A0 00 A0 
2fb02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2fb06                 | 
2fb06     00 00       |              	org
2fb08 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2fb0c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2fb10 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2fb14 003             | 
2fb14 003 00 30 04 F6 |                 mov     psramaddr,#0
2fb18 004             | 
2fb18 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2fb1c 005 20 00 00 FF 
2fb20 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2fb24 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2fb28 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2fb2c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2fb30 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2fb34 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2fb38 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2fb3c 00d             | 
2fb3c 00d 20 00 00 FF 
2fb40 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2fb44 00f E0 03 00 FF 
2fb48 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2fb4c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2fb50 012             | 
2fb50 012             |                 
2fb50 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2fb54 013             |     
2fb54 013 01 2C 60 FD |                 cogid 	t11				' get id
2fb58 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2fb5c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2fb60 016             | 
2fb60 016 00 00 00 00 | t11 		long 	0
2fb64 017 00 FF 07 00 | mailbox 	long 	$7FF00
2fb68 018 00 00 00 00 | psramaddr 	long 	0
2fb6c 019 00 00 00 00 | pslockval	long 	0
2fb70 01a 00 00 00 00 | cmd             long    0
2fb74 01b 00 00 00 00 | buf1            long    0
2fb78 01c 00 40 00 00 | buf2            long    16384
2fb7c 01d 80 FB 02 00 | 	long	@@@_dat_ + 12624
2fb80 01e 50 32 20 52 
2fb84 01f 65 74 72 6F 
2fb88 020 6D 61 63 68 
2fb8c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2fb90 022 42 41 53 49 
2fb94 023 43 20 76 65 
2fb98 024 72 73 69 6F 
2fb9c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2fba0 026 32 37 00 00 | 	byte	$32, $37, $00, $00
2fba4 027             | 	alignl
2fba4 027             | _hg010b_spin2_dat_
2fba4 027             | 
2fba4 027 00 00 00 00 
2fba8 028 00 00 00 00 
2fbac 029 00 00 00 00 
2fbb0 02a 00 00 00 00 
2fbb4 02b 00 00 00    | vga_font       file "vgafont.def"
2fbb7 02b 7E 81 A5 81 
2fbbb 02c 81 BD 99 81 
2fbbf 02d 81 7E 00 00 
2fbc3 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2fbc7 02f 7E FF DB FF 
2fbcb 030 FF C3 E7 FF 
2fbcf 031 FF 7E 00 00 
2fbd3 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2fbd7 033 00 36 7F 7F 
2fbdb 034 7F 7F 3E 1C 
2fbdf 035 08 00 00 00 
2fbe3 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2fbe7 037 00 08 1C 3E 
2fbeb 038 7F 3E 1C 08 
2fbef 039 00 00 00 00 
2fbf3 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2fbf7 03b 18 3C 3C E7 
2fbfb 03c E7 E7 18 18 
2fbff 03d 3C 00 00 00 
2fc03 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2fc07 03f 18 3C 7E FF 
2fc0b 040 FF 7E 18 18 
2fc0f 041 3C 00 00 00 
2fc13 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2fc17 043 00 00 00 18 
2fc1b 044 3C 3C 18 00 
2fc1f 045 00 00 00 00 
2fc23 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2fc27 047 FF FF FF E7 
2fc2b 048 C3 C3 E7 FF 
2fc2f 049 FF FF FF FF 
2fc33 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2fc37 04b 00 00 3C 66 
2fc3b 04c 42 42 66 3C 
2fc3f 04d 00 00 00 00 
2fc43 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2fc47 04f FF FF C3 99 
2fc4b 050 BD BD 99 C3 
2fc4f 051 FF FF FF FF 
2fc53 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2fc57 053 78 70 58 4C 
2fc5b 054 1E 33 33 33 
2fc5f 055 33 1E 00 00 
2fc63 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2fc67 057 3C 66 66 66 
2fc6b 058 66 3C 18 7E 
2fc6f 059 18 18 00 00 
2fc73 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2fc77 05b FC CC FC 0C 
2fc7b 05c 0C 0C 0C 0E 
2fc7f 05d 0F 07 00 00 
2fc83 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2fc87 05f FE C6 FE C6 
2fc8b 060 C6 C6 C6 E6 
2fc8f 061 E7 67 03 00 
2fc93 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2fc97 063 18 18 DB 3C 
2fc9b 064 E7 3C DB 18 
2fc9f 065 18 00 00 00 
2fca3 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2fca7 067 03 07 0F 1F 
2fcab 068 7F 1F 0F 07 
2fcaf 069 03 01 00 00 
2fcb3 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2fcb7 06b 60 70 78 7C 
2fcbb 06c 7F 7C 78 70 
2fcbf 06d 60 40 00 00 
2fcc3 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2fcc7 06f 18 3C 7E 18 
2fccb 070 18 18 7E 3C 
2fccf 071 18 00 00 00 
2fcd3 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2fcd7 073 66 66 66 66 
2fcdb 074 66 66 66    | 	byte	$66[7]
2fcde 075 00 66 66 00 
2fce2 076 00 00 00 00 
2fce6 077 00 FE DB DB 
2fcea 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2fcee 079 D8 D8 D8 00 
2fcf2 07a 00 00 00 3E 
2fcf6 07b 63 06 1C 36 
2fcfa 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2fcfe 07d 30 63 3E 00 
2fd02 07e 00 00 00 00 
2fd06 07f 00 00 00 00 
2fd0a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2fd0e 081 7F 7F 7F 00 
2fd12 082 00 00 00 00 
2fd16 083 00 18 3C 7E 
2fd1a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2fd1e 085 3C 18 7E 00 
2fd22 086 00 00 00 00 
2fd26 087 00 18 3C 7E 
2fd2a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2fd2e 089 18 18 18 00 
2fd32 08a 00 00 00 00 
2fd36 08b 00 18 18 18 
2fd3a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2fd3e 08d 7E 3C 18 00 
2fd42 08e 00 00 00 00 
2fd46 08f 00 00 00 18 
2fd4a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2fd4e 091 00 00 00 00 
2fd52 092 00 00 00 00 
2fd56 093 00 00 00    | 	byte	$00[11]
2fd59 094 0C 06 7F 06 
2fd5d 095 0C 00 00 00 
2fd61 096 00 00 00 00 
2fd65 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fd69 098 00 03 03 03 
2fd6d 099 7F 00 00 00 
2fd71 09a 00 00 00 00 
2fd75 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fd79 09c 14 36 7F 36 
2fd7d 09d 14 00 00 00 
2fd81 09e 00 00 00 00 
2fd85 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2fd89 0a0 1C 1C 3E 3E 
2fd8d 0a1 7F 7F 00 00 
2fd91 0a2 00 00 00 00 
2fd95 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2fd99 0a4 7F 3E 3E 1C 
2fd9d 0a5 1C 08 00 00 
2fda1 0a6 00 00 00 00 
2fda5 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fda9 0a8 00 00 00 00 
2fdad 0a9 00 00 00 00 
2fdb1 0aa 00 00 00 00 
2fdb5 0ab 00 00       | 	byte	$00[14]
2fdb7 0ab 18 3C 3C 3C 
2fdbb 0ac 18 18 18 00 
2fdbf 0ad 18 18 00 00 
2fdc3 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2fdc7 0af 66 24 00 00 
2fdcb 0b0 00 00 00 00 
2fdcf 0b1 00 00 00 00 
2fdd3 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fdd7 0b3 00 36 36 7F 
2fddb 0b4 36 36 36 7F 
2fddf 0b5 36 36 00 00 
2fde3 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2fde7 0b7 3E 63 43 03 
2fdeb 0b8 3E 60 60 61 
2fdef 0b9 63 3E 18 18 
2fdf3 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2fdf7 0bb 00 00 43 63 
2fdfb 0bc 30 18 0C 06 
2fdff 0bd 63 61 00 00 
2fe03 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2fe07 0bf 1C 36 36 1C 
2fe0b 0c0 6E 3B 33 33 
2fe0f 0c1 33 6E 00 00 
2fe13 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2fe17 0c3 0C 0C 0C 06 
2fe1b 0c4 00 00 00 00 
2fe1f 0c5 00 00 00 00 
2fe23 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fe27 0c7 30 18 0C 0C 
2fe2b 0c8 0C 0C 0C 0C 
2fe2f 0c9 18 30 00 00 
2fe33 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2fe37 0cb 0C 18 30 30 
2fe3b 0cc 30 30 30 30 
2fe3f 0cd 18 0C 00 00 
2fe43 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2fe47 0cf 00 00 00 66 
2fe4b 0d0 3C FF 3C 66 
2fe4f 0d1 00 00 00 00 
2fe53 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2fe57 0d3 00 00 00 18 
2fe5b 0d4 18 7E 18 18 
2fe5f 0d5 00 00 00 00 
2fe63 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2fe67 0d7 00 00 00 00 
2fe6b 0d8 00 00 00 00 | 	byte	$00[8]
2fe6f 0d9 18 18 18 0C 
2fe73 0da 00 00 00 00 
2fe77 0db 00 00 00 00 
2fe7b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2fe7f 0dd 00 00 00 00 
2fe83 0de 00 00 00 00 
2fe87 0df 00 00 00 00 
2fe8b 0e0 00 00 00 00 | 	byte	$00[16]
2fe8f 0e1 18 18 00 00 
2fe93 0e2 00 00 00 00 
2fe97 0e3 00 00 40 60 
2fe9b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2fe9f 0e5 03 01 00 00 
2fea3 0e6 00 00 00 00 
2fea7 0e7 1C 36 63 63 
2feab 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2feaf 0e9 36 1C 00 00 
2feb3 0ea 00 00 00 00 
2feb7 0eb 18 1C 1E 18 
2febb 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2febf 0ed 18 7E 00 00 
2fec3 0ee 00 00 00 00 
2fec7 0ef 3E 63 60 30 
2fecb 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2fecf 0f1 63 7F 00 00 
2fed3 0f2 00 00 00 00 
2fed7 0f3 3E 63 60 60 
2fedb 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2fedf 0f5 63 3E 00 00 
2fee3 0f6 00 00 00 00 
2fee7 0f7 30 38 3C 36 
2feeb 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2feef 0f9 30 78 00 00 
2fef3 0fa 00 00 00 00 
2fef7 0fb 7F 03 03 03 
2fefb 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2feff 0fd 63 3E 00 00 
2ff03 0fe 00 00 00 00 
2ff07 0ff 1C 06 03 03 
2ff0b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2ff0f 101 63 3E 00 00 
2ff13 102 00 00 00 00 
2ff17 103 7F 63 60 60 
2ff1b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2ff1f 105 0C 0C 00 00 
2ff23 106 00 00 00 00 
2ff27 107 3E 63 63 63 
2ff2b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2ff2f 109 63 3E 00 00 
2ff33 10a 00 00 00 00 
2ff37 10b 3E 63 63 63 
2ff3b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2ff3f 10d 30 1E 00 00 
2ff43 10e 00 00 00 00 
2ff47 10f 00 00 00 18 
2ff4b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2ff4f 111 18 18 00 00 
2ff53 112 00 00 00 00 
2ff57 113 00 00 00 18 
2ff5b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2ff5f 115 18 18 0C 00 
2ff63 116 00 00 00 00 
2ff67 117 00 60 30 18 
2ff6b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2ff6f 119 30 60 00 00 
2ff73 11a 00 00 00 00 
2ff77 11b 00 00 00 7E 
2ff7b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2ff7f 11d 00 00 00 00 
2ff83 11e 00 00 00 00 
2ff87 11f 00          | 	byte	$00[9]
2ff88 120 06 0C 18 30 
2ff8c 121 60 30 18 0C 
2ff90 122 06 00 00 00 
2ff94 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2ff98 124 63 63 30 18 
2ff9c 125 18 18 00 18 
2ffa0 126 18 00 00 00 
2ffa4 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2ffa8 128 3E 63 63 7B 
2ffac 129 7B 7B 3B 03 
2ffb0 12a 3E 00 00 00 
2ffb4 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2ffb8 12c 1C 36 63 63 
2ffbc 12d 7F 63 63 63 
2ffc0 12e 63 00 00 00 
2ffc4 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2ffc8 130 66 66 66 3E 
2ffcc 131 66 66 66 66 
2ffd0 132 3F 00 00 00 
2ffd4 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2ffd8 134 66 43 03 03 
2ffdc 135 03 03 43 66 
2ffe0 136 3C 00 00 00 
2ffe4 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2ffe8 138 36 66 66 66 
2ffec 139 66 66 66 36 
2fff0 13a 1F 00 00 00 
2fff4 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2fff8 13c 66 46 16 1E 
2fffc 13d 16 06 46 66 
30000 13e 7F 00 00 00 
30004 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
30008 140 66 46 16 1E 
3000c 141 16 06 06 06 
30010 142 0F 00 00 00 
30014 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
30018 144 66 43 03 03 
3001c 145 7B 63 63 66 
30020 146 5C 00 00 00 
30024 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
30028 148 63 63 63 7F 
3002c 149 63 63 63 63 
30030 14a 63 00 00 00 
30034 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
30038 14c 18 18 18 18 
3003c 14d 18 18 18 18 | 	byte	$18[8]
30040 14e 3C 00 00 00 
30044 14f 00 00 00 78 
30048 150 30 30 30 30 
3004c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
30050 152 1E 00 00 00 
30054 153 00 00 00 67 
30058 154 66 66 36 1E 
3005c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
30060 156 67 00 00 00 
30064 157 00 00 00 0F 
30068 158 06 06 06 06 
3006c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
30070 15a 7F 00 00 00 
30074 15b 00 00 00 63 
30078 15c 77 7F 7F 6B 
3007c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
30080 15e 63 00 00 00 
30084 15f 00 00 00 63 
30088 160 67 6F 7F 7B 
3008c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
30090 162 63 00 00 00 
30094 163 00 00 00 3E 
30098 164 63 63 63 63 
3009c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
300a0 166 3E 00 00 00 
300a4 167 00 00 00 3F 
300a8 168 66 66 66 3E 
300ac 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
300b0 16a 0F 00 00 00 
300b4 16b 00 00 00 3E 
300b8 16c 63 63 63 63 
300bc 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
300c0 16e 3E 30 70 00 
300c4 16f 00 00 00 3F 
300c8 170 66 66 66 3E 
300cc 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
300d0 172 67 00 00 00 
300d4 173 00 00 00 3E 
300d8 174 63 63 06 1C 
300dc 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
300e0 176 3E 00 00 00 
300e4 177 00 00 00 7E 
300e8 178 7E 5A 18 18 
300ec 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
300f0 17a 3C 00 00 00 
300f4 17b 00 00 00 63 
300f8 17c 63 63 63 63 
300fc 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
30100 17e 3E 00 00 00 
30104 17f 00 00 00 63 
30108 180 63 63 63 63 
3010c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
30110 182 08 00 00 00 
30114 183 00 00 00 63 
30118 184 63 63 63 6B 
3011c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
30120 186 36 00 00 00 
30124 187 00 00 00 63 
30128 188 63 36 3E 1C 
3012c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
30130 18a 63 00 00 00 
30134 18b 00 00 00 66 
30138 18c 66 66 66 3C 
3013c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
30140 18e 3C 00 00 00 
30144 18f 00 00 00 7F 
30148 190 63 61 30 18 
3014c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
30150 192 7F 00 00 00 
30154 193 00 00 00 3C 
30158 194 0C 0C 0C 0C 
3015c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
30160 196 3C 00 00 00 
30164 197 00 00 00 00 
30168 198 01 03 07 0E 
3016c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
30170 19a 40 00 00 00 
30174 19b 00 00 00 3C 
30178 19c 30 30 30 30 
3017c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
30180 19e 3C 00 00 00 
30184 19f 1C 36 00 00 
30188 1a0 00 00 00 00 
3018c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30190 1a2 00 00 00 00 
30194 1a3 00 00 00 00 
30198 1a4 00 00 00 00 
3019c 1a5 00 00 00 00 
301a0 1a6 00          | 	byte	$00[17]
301a1 1a6 FF 00 00 0C 
301a5 1a7 18 00 00 00 
301a9 1a8 00 00 00 00 
301ad 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
301b1 1aa 00 00 00 00 
301b5 1ab 00 00 00 00 
301b9 1ac 00          | 	byte	$00[9]
301ba 1ac 1E 30 3E 33 
301be 1ad 33 33 6E 00 
301c2 1ae 00 00 00 00 
301c6 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
301ca 1b0 1E 36 66 66 
301ce 1b1 66 66 3E 00 
301d2 1b2 00 00 00 00 
301d6 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
301da 1b4 3E 63 03 03 
301de 1b5 03 63 3E 00 
301e2 1b6 00 00 00 00 
301e6 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
301ea 1b8 3C 36 33 33 
301ee 1b9 33 33 6E 00 
301f2 1ba 00 00 00 00 
301f6 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
301fa 1bc 3E 63 7F 03 
301fe 1bd 03 63 3E 00 
30202 1be 00 00 00 00 
30206 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3020a 1c0 0C 1E 0C 0C 
3020e 1c1 0C 0C 1E 00 
30212 1c2 00 00 00 00 
30216 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3021a 1c4 6E 33 33 33 
3021e 1c5 33 33 3E 30 
30222 1c6 33 1E 00 00 
30226 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3022a 1c8 36 6E 66 66 
3022e 1c9 66 66 67 00 
30232 1ca 00 00 00 00 
30236 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3023a 1cc 1C 18 18 18 
3023e 1cd 18 18 3C 00 
30242 1ce 00 00 00 00 
30246 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3024a 1d0 70 60 60 60 
3024e 1d1 60 60 60 66 
30252 1d2 66 3C 00 00 
30256 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3025a 1d4 66 36 1E 1E 
3025e 1d5 36 66 67 00 
30262 1d6 00 00 00 00 
30266 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3026a 1d8 18 18 18 18 
3026e 1d9 18 18       | 	byte	$18[6]
30270 1da 3C 00 00 00 
30274 1db 00 00 00 00 
30278 1dc 00 00 37 7F 
3027c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
30280 1de 63 00 00 00 
30284 1df 00 00 00 00 
30288 1e0 00 00 3B 66 
3028c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
30290 1e2 66 00 00 00 
30294 1e3 00 00 00 00 
30298 1e4 00 00 3E 63 
3029c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
302a0 1e6 3E 00 00 00 
302a4 1e7 00 00 00 00 
302a8 1e8 00 00 3B 66 
302ac 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
302b0 1ea 3E 06 06 0F 
302b4 1eb 00 00 00 00 
302b8 1ec 00 00 6E 33 
302bc 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
302c0 1ee 3E 30 30 78 
302c4 1ef 00 00 00 00 
302c8 1f0 00 00 3B 6E 
302cc 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
302d0 1f2 0F 00 00 00 
302d4 1f3 00 00 00 00 
302d8 1f4 00 00 3E 63 
302dc 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
302e0 1f6 3E 00 00 00 
302e4 1f7 00 00 00 08 
302e8 1f8 0C 0C 3F 0C 
302ec 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
302f0 1fa 38 00 00 00 
302f4 1fb 00 00 00 00 
302f8 1fc 00 00 33 33 
302fc 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
30300 1fe 6E 00 00 00 
30304 1ff 00 00 00 00 
30308 200 00 00 63 63 
3030c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
30310 202 1C 00 00 00 
30314 203 00 00 00 00 
30318 204 00 00 63 63 
3031c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
30320 206 36 00 00 00 
30324 207 00 00 00 00 
30328 208 00 00 63 36 
3032c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
30330 20a 63 00 00 00 
30334 20b 00 00 00 00 
30338 20c 00 00 63 63 
3033c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
30340 20e 7E 60 30 1F 
30344 20f 00 00 00 00 
30348 210 00 00 7F 33 
3034c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
30350 212 7F 00 00 00 
30354 213 00 00 00 70 
30358 214 18 18 18 0E 
3035c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
30360 216 70 00 00 00 
30364 217 00 00 00 18 
30368 218 18 18 18 18 
3036c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
30370 21a 18 00 00 00 
30374 21b 00 00 00 0E 
30378 21c 18 18 18 70 
3037c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
30380 21e 0E 00 00 00 
30384 21f 6E 3B 00 00 
30388 220 00 00 00 00 
3038c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30390 222 00 00 00 00 
30394 223 00 00 00 00 
30398 224 00 00       | 	byte	$00[10]
3039a 224 08 1C 36 63 
3039e 225 63 63 7F 00 
303a2 226 00 00 00 00 
303a6 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
303aa 228 03 03 03 03 
303ae 229 43 66 3C 18 
303b2 22a 30 1E 00 00 
303b6 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
303ba 22c 33 33 33 33 
303be 22d 33 33       | 	byte	$33[6]
303c0 22e 6E 00 00 00 
303c4 22f 00 00 60 30 
303c8 230 18 00 3E 63 
303cc 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
303d0 232 3E 00 00 00 
303d4 233 00 00 08 1C 
303d8 234 36 00 1E 30 
303dc 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
303e0 236 6E 00 00 00 
303e4 237 00 00 00 00 
303e8 238 33 00 1E 30 
303ec 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
303f0 23a 6E 00 00 00 
303f4 23b 00 00 1C 36 
303f8 23c 1C 00 33 33 
303fc 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
30400 23e 6E 00 00 00 
30404 23f 00 00 60 30 
30408 240 18 00 3E 63 
3040c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
30410 242 3E 00 00 00 
30414 243 00 00 00 00 
30418 244 00 00 3E 63 
3041c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
30420 246 3E 18 30 1E 
30424 247 00 00 00 1C 
30428 248 58 78 38 18 
3042c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
30430 24a 3C 00 00 00 
30434 24b 00 00 00 00 
30438 24c 63 00 3E 63 
3043c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
30440 24e 3E 00 00 00 
30444 24f 66 33 00 3E 
30448 250 63 63 63 63 
3044c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
30450 252 3E 00 00 00 
30454 253 00 00 CC 66 
30458 254 33 00 3E 63 
3045c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
30460 256 3E 00 00 00 
30464 257 00 00 18 3C 
30468 258 66 00 1C 18 
3046c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
30470 25a 3C 00 00 00 
30474 25b 30 18 00 7F 
30478 25c 63 61 30 18 
3047c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
30480 25e 7F 00 00 00 
30484 25f 00 63 00 08 
30488 260 1C 36 63 63 
3048c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
30490 262 63 00 00 00 
30494 263 30 18 00 3C 
30498 264 66 43 03 03 
3049c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
304a0 266 3C 00 00 00 
304a4 267 30 18 00 7F 
304a8 268 66 46 16 1E 
304ac 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
304b0 26a 7F 00 00 00 
304b4 26b 0C 06 00 0F 
304b8 26c 06 06 06 06 
304bc 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
304c0 26e 7F 00 00 00 
304c4 26f 30 18 00 1C 
304c8 270 18 18 18 18 
304cc 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
304d0 272 3C 00 00 00 
304d4 273 00 00 08 1C 
304d8 274 36 00 3E 63 
304dc 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
304e0 276 3E 00 00 00 
304e4 277 00 00 00 00 
304e8 278 63 00 3E 63 
304ec 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
304f0 27a 3E 00 00 00 
304f4 27b 00 00 00 6F 
304f8 27c 46 26 06 06 
304fc 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
30500 27e 7F 00 00 00 
30504 27f 00 00 00 6E 
30508 280 4C 2C 0C 0C 
3050c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
30510 282 1E 00 00 00 
30514 283 30 18 00 3E 
30518 284 63 63 06 1C 
3051c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
30520 286 3E 00 00 00 
30524 287 00 00 60 30 
30528 288 18 00 3E 63 
3052c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
30530 28a 3E 00 00 00 
30534 28b 00 63 00 3E 
30538 28c 63 63 63 63 
3053c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
30540 28e 3E 00 00 00 
30544 28f 00 63 00 63 
30548 290 63 63 63 63 
3054c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
30550 292 3E 00 00 00 
30554 293 6C 38 00 7E 
30558 294 7E 5A 18 18 
3055c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
30560 296 3C 00 00 00 
30564 297 00 00 60 48 
30568 298 2C 0C 3F 0C 
3056c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
30570 29a 38 00 00 00 
30574 29b 00 00 00 0F 
30578 29c 26 36 1E 0E 
3057c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
30580 29e 7F 00 00 00 
30584 29f 00 00 00 00 
30588 2a0 00 63 36 1C 
3058c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
30590 2a2 00 00 00 00 
30594 2a3 00 00       | 	byte	$00[6]
30596 2a3 36 1C 08 00 
3059a 2a4 3E 63 03 03 
3059e 2a5 03 63 3E 00 
305a2 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
305a6 2a7 30 18 0C 00 
305aa 2a8 1E 30 3E 33 
305ae 2a9 33 33 6E 00 
305b2 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
305b6 2ab 60 30 18 00 
305ba 2ac 1C 18 18 18 
305be 2ad 18 18 3C 00 
305c2 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
305c6 2af 60 30 18 00 
305ca 2b0 3E 63 63 63 
305ce 2b1 63 63 3E 00 
305d2 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
305d6 2b3 30 18 0C 00 
305da 2b4 33 33 33 33 
305de 2b5 33 33 6E 00 
305e2 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
305e6 2b7 00 08 1C 36 
305ea 2b8 63 63 7F 63 
305ee 2b9 63 63 63 18 
305f2 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
305f6 2bb 00 00 00 00 
305fa 2bc 1E 30 3E 33 
305fe 2bd 33 33 6E 18 
30602 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
30606 2bf 00 7F 63 61 
3060a 2c0 30 18 0C 06 
3060e 2c1 43 63 7F 00 
30612 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
30616 2c3 36 1C 08 00 
3061a 2c4 7F 33 18 0C 
3061e 2c5 06 63 7F 00 
30622 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
30626 2c7 00 7F 66 46 
3062a 2c8 16 1E 16 06 
3062e 2c9 46 66 7F 18 
30632 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
30636 2cb 00 00 00 00 
3063a 2cc 3E 63 7F 03 
3063e 2cd 03 63 3E 18 
30642 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
30646 2cf 00 3C 66 03 
3064a 2d0 1F 03 0F 03 
3064e 2d1 03 66 3C 00 
30652 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
30656 2d3 60 30 18 00 
3065a 2d4 7F 33 18 0C 
3065e 2d5 06 63 7F 00 
30662 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
30666 2d7 00 3C 66 43 
3066a 2d8 03 03 03 03 
3066e 2d9 43 66 3C 00 
30672 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
30676 2db 00 00 00 00 
3067a 2dc 3E 63 06 1C 
3067e 2dd 30 63 3E 18 
30682 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
30686 2df 00 00 00 00 
3068a 2e0 00 00       | 	byte	$00[6]
3068c 2e1 6C 36 1B 36 
30690 2e2 6C 00 00 00 
30694 2e3 00 00 00 00 
30698 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3069c 2e5 1B 36 6C 36 
306a0 2e6 1B 00 00 00 
306a4 2e7 88 22 88 22 
306a8 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
306ac 2e9 88 22 88 22 
306b0 2ea 88 22 88 22 
306b4 2eb AA 55 AA 55 
306b8 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
306bc 2ed AA 55 AA 55 
306c0 2ee AA 55 AA 55 
306c4 2ef BB EE BB EE 
306c8 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
306cc 2f1 BB EE BB EE 
306d0 2f2 BB EE BB EE 
306d4 2f3 18 18 18 18 
306d8 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
306dc 2f5 18 18 18 18 
306e0 2f6 18 18 18 18 
306e4 2f7 18 18 18 18 
306e8 2f8 18 18 18    | 	byte	$18[15]
306eb 2f8 1F 18 18 18 
306ef 2f9 18 18 18 18 
306f3 2fa 18 30 18 00 
306f7 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
306fb 2fc 63 7F 63 63 
306ff 2fd 63 63 00 00 
30703 2fe 00 1C 36 00 
30707 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3070b 300 63 7F 63 63 
3070f 301 63 63 00 00 
30713 302 00 36 1C 00 
30717 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3071b 304 1E 16 06 46 
3071f 305 66 7F 00 00 
30723 306 00 00 00 00 
30727 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3072b 308 1C 30 60 63 
3072f 309 63 3E 18 30 
30733 30a 1E 6C 6C 6C 
30737 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3073b 30c 6F 6C 6C 6C 
3073f 30d 6C 6C 6C 6C 
30743 30e 6C 6C 6C 6C 
30747 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3074b 310 6C 6C 6C 6C 
3074f 311 6C 6C 6C 6C 
30753 312 6C          | 	byte	$6c[9]
30754 313 00 00 00 00 
30758 314 00          | 	byte	$00[5]
30759 314 7F 60 6F 6C 
3075d 315 6C 6C 6C 6C 
30761 316 6C 6C 6C 6C 
30765 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30769 318 6F 60 7F 00 
3076d 319 00 00 00 00 
30771 31a 00 00 00 18 
30775 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
30779 31c 61 30 18 0C 
3077d 31d 06 43 63 7F 
30781 31e 00 00 00 00 
30785 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
30789 320 00 7F 33 18 
3078d 321 0C 06 63 7F 
30791 322 00 00 00 00 
30795 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
30799 324 00 00 1F 18 
3079d 325 18 18 18 18 
307a1 326 18 18 18 18 
307a5 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
307a9 328 18 18 F8 00 
307ad 329 00 00 00 00 
307b1 32a 00 00 00 18 
307b5 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
307b9 32c 18 18 FF 00 
307bd 32d 00 00 00 00 
307c1 32e 00 00 00 00 
307c5 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
307c9 330 00 00 FF 18 
307cd 331 18 18 18 18 
307d1 332 18 18 18 18 
307d5 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
307d9 334 18 18 F8 18 
307dd 335 18 18 18 18 
307e1 336 18 18 18 00 
307e5 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
307e9 338 00 00 FF 00 
307ed 339 00 00 00 00 
307f1 33a 00 00 00 18 
307f5 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
307f9 33c 18 18 FF 18 
307fd 33d 18 18 18 18 
30801 33e 18 18 18 63 
30805 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
30809 340 36 63 63 7F 
3080d 341 63 63 63 63 
30811 342 00 00 00 00 
30815 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
30819 344 00 1E 30 3E 
3081d 345 33 33 33 6E 
30821 346 00 00 00 6C 
30825 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
30829 348 EC 0C FC 00 
3082d 349 00 00 00 00 
30831 34a 00 00 00 00 
30835 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30839 34c FC 0C EC 6C 
3083d 34d 6C 6C 6C 6C 
30841 34e 6C 6C 6C 6C 
30845 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30849 350 EF 00 FF 00 
3084d 351 00 00 00 00 
30851 352 00 00 00 00 
30855 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30859 354 FF 00 EF 6C 
3085d 355 6C 6C 6C 6C 
30861 356 6C 6C 6C 6C 
30865 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30869 358 EC 0C EC 6C 
3086d 359 6C 6C 6C 6C 
30871 35a 6C 6C 6C 00 
30875 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
30879 35c FF 00 FF 00 
3087d 35d 00 00 00 00 
30881 35e 00 00 00 6C 
30885 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
30889 360 EF 00 EF 6C 
3088d 361 6C 6C 6C 6C 
30891 362 6C 6C 6C 00 
30895 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
30899 364 63 3E 63 63 
3089d 365 63 63 3E 63 
308a1 366 00 00 00 00 
308a5 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
308a9 368 30 3C 36 33 
308ad 369 33 33 33 6E 
308b1 36a 00 00 00 00 
308b5 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
308b9 36c 66 66 6F 66 
308bd 36d 66 66 36 1F 
308c1 36e 00 00 00 36 
308c5 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
308c9 370 66 66 66 66 
308cd 371 66 66       | 	byte	$66[6]
308cf 371 36 1F 00 00 
308d3 372 00 00 63 00 
308d7 373 7F 66 46 16 
308db 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
308df 375 66 7F 00 00 
308e3 376 00 6C 38 00 
308e7 377 38 30 30 3C 
308eb 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
308ef 379 33 6E 00 00 
308f3 37a 00 36 1C 00 
308f7 37b 63 67 6F 7F 
308fb 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
308ff 37d 63 63 00 00 
30903 37e 00 30 18 00 
30907 37f 3C 18 18 18 
3090b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3090f 381 18 3C 00 00 
30913 382 00 3C 66 00 
30917 383 3C 18 18 18 
3091b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3091f 385 18 3C 00 00 
30923 386 00 00 00 36 
30927 387 1C 08 00 3E 
3092b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3092f 389 63 3E 00 00 
30933 38a 00 18 18 18 
30937 38b 18 18 18 18 
3093b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3093f 38d 00 00 00 00 
30943 38e 00 00 00 00 
30947 38f 00 00 00 00 | 	byte	$00[12]
3094b 390 F8 18 18 18 
3094f 391 18 18 18 18 
30953 392 18 FF FF FF 
30957 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3095b 394 FF FF FF FF 
3095f 395 FF FF FF FF 
30963 396 FF          | 	byte	$ff[9]
30964 397 00 00 00 00 
30968 398 00 00 00    | 	byte	$00[7]
3096b 398 FF FF FF FF 
3096f 399 FF FF FF FF 
30973 39a FF          | 	byte	$ff[9]
30974 39b 00 00 00 7E 
30978 39c 7E 5A 18 18 
3097c 39d 18 18 18 18 
30980 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
30984 39f 1C 36 1C 63 
30988 3a0 63 63 63 63 
3098c 3a1 63 63 63 63 
30990 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
30994 3a3 FF FF FF FF 
30998 3a4 FF FF FF    | 	byte	$ff[7]
3099b 3a4 00 00 00 00 
3099f 3a5 00 00 00 00 
309a3 3a6 00          | 	byte	$00[9]
309a4 3a7 30 18 00 3E 
309a8 3a8 63 63 63 63 
309ac 3a9 63 63 63 63 
309b0 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
309b4 3ab 00 00 00 1E 
309b8 3ac 33 33 33 1B 
309bc 3ad 33 63 63 63 
309c0 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
309c4 3af 1C 36 00 3E 
309c8 3b0 63 63 63 63 
309cc 3b1 63 63 63 63 
309d0 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
309d4 3b3 30 18 00 63 
309d8 3b4 67 6F 7F 7B 
309dc 3b5 73 63 63 63 
309e0 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
309e4 3b7 00 00 60 30 
309e8 3b8 18 00 3B 66 
309ec 3b9 66 66 66 66 
309f0 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
309f4 3bb 00 00 36 1C 
309f8 3bc 08 00 3B 66 
309fc 3bd 66 66 66 66 
30a00 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
30a04 3bf 36 1C 00 3E 
30a08 3c0 63 63 06 1C 
30a0c 3c1 30 60 63 63 
30a10 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
30a14 3c3 00 00 36 1C 
30a18 3c4 08 00 3E 63 
30a1c 3c5 06 1C 30 63 
30a20 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
30a24 3c7 30 18 00 3F 
30a28 3c8 66 66 66 3E 
30a2c 3c9 36 66 66 66 
30a30 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
30a34 3cb 30 18 00 63 
30a38 3cc 63 63 63 63 
30a3c 3cd 63 63 63 63 
30a40 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
30a44 3cf 00 00 60 30 
30a48 3d0 18 00 3B 6E 
30a4c 3d1 66 06 06 06 
30a50 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
30a54 3d3 66 33 00 63 
30a58 3d4 63 63 63 63 
30a5c 3d5 63 63 63 63 
30a60 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
30a64 3d7 00 00 60 30 
30a68 3d8 18 00 63 63 
30a6c 3d9 63 63 63 63 
30a70 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
30a74 3db 30 18 00 66 
30a78 3dc 66 66 66 3C 
30a7c 3dd 18 18 18 18 
30a80 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
30a84 3df 00 00 00 08 
30a88 3e0 0C 0C 3F 0C 
30a8c 3e1 0C 0C 0C 6C 
30a90 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
30a94 3e3 30 18 00 00 
30a98 3e4 00 00 00 00 
30a9c 3e5 00 00 00 00 
30aa0 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30aa4 3e7 00 00 00 00 
30aa8 3e8 00 00 00 00 | 	byte	$00[8]
30aac 3e9 7F 00 00 00 
30ab0 3ea 00 00 00 00 
30ab4 3eb 66 33 00 00 
30ab8 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
30abc 3ed 00 00 00 00 
30ac0 3ee 00 00 00 00 
30ac4 3ef 00 00 00 00 
30ac8 3f0 00 00 00 00 
30acc 3f1 00 00 00 00 
30ad0 3f2 00          | 	byte	$00[21]
30ad1 3f2 0C 06 3C 36 
30ad5 3f3 1C 00 00 00 
30ad9 3f4 00 00 00 00 
30add 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30ae1 3f6 00 00 00 63 
30ae5 3f7 3E 00 00 00 
30ae9 3f8 00 00 00 00 
30aed 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30af1 3fa 00 00 00 00 
30af5 3fb 3E 63 06 1C 
30af9 3fc 36 63 63 36 
30afd 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
30b01 3fe 00 00 00 00 
30b05 3ff 00 00 00 00 | 	byte	$00[8]
30b09 400 18 00 7E 00 
30b0d 401 18 00 00 00 
30b11 402 00 00 00 00 
30b15 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b19 404 00 00 00 00 
30b1d 405 00 00 00 00 | 	byte	$00[8]
30b21 406 18 30 1E 00 
30b25 407 00 00 1C 36 
30b29 408 36 1C 00 00 
30b2d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
30b31 40a 00 00 00 00 
30b35 40b 63 00 00 00 
30b39 40c 00 00 00 00 
30b3d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b41 40e 00 00 00 18 
30b45 40f 18 00 00 00 
30b49 410 00 00 00 00 
30b4d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b51 412 00 00 00 00 
30b55 413 00          | 	byte	$00[5]
30b56 413 CC 66 33 00 
30b5a 414 33 33 33 33 
30b5e 415 33 33 6E 00 
30b62 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
30b66 417 00 3F 66 66 
30b6a 418 66 3E 36 66 
30b6e 419 66 66 6F 00 
30b72 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
30b76 41b 36 1C 08 00 
30b7a 41c 3B 6E 66 06 
30b7e 41d 06 06 0F 00 
30b82 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
30b86 41f 00 00 00 7E 
30b8a 420 7E 7E 7E 7E 
30b8e 421 7E 7E 00 00 
30b92 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
30b96 423 00 00 00 00 
30b9a 424 00 00 00 00 
30b9e 425 00 00 00 00 
30ba2 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30ba4 427             | 'vga_font       file "vgafont.def"
30ba4 427 00 00 00 00 
      ...             
30bd4 433 00 00 00 00 
30bd8 434 00 00 00    | st_font        file "st4font.def"
30bdb 434 FF FF 00 00 
30bdf 435 00 00 00 00 
30be3 436 00 18 18 18 
30be7 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30beb 438 18 18 18 18 
30bef 439 18 18 18 18 
30bf3 43a 18          | 	byte	$18[9]
30bf4 43b 00 00 00 00 
30bf8 43c 00 00 00    | 	byte	$00[7]
30bfb 43c FF FF 18 18 
30bff 43d 18 18 18 18 
30c03 43e 18 18 18 18 
30c07 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30c0b 440 FF FF 00 00 
30c0f 441 00 00 00 00 
30c13 442 00 18 18 18 
30c17 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30c1b 444 1F 1F 18 18 
30c1f 445 18 18 18 18 
30c23 446 18 18 18 18 
30c27 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30c2b 448 F8 F8 18 18 
30c2f 449 18 18 18 18 
30c33 44a 18 00 00 00 
30c37 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30c3b 44c 1F 1F 18 18 
30c3f 44d 18 18 18 18 
30c43 44e 18 00 00 00 
30c47 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30c4b 450 F8 F8 18 18 
30c4f 451 18 18 18 18 
30c53 452 18 18 18 18 
30c57 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30c5b 454 1F 1F 00 00 
30c5f 455 00 00 00 00 
30c63 456 00 18 18 18 
30c67 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30c6b 458 F8 F8 00 00 
30c6f 459 00 00 00 00 
30c73 45a 00 18 18 18 
30c77 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30c7b 45c FF FF 18 18 
30c7f 45d 18 18 18 18 
30c83 45e 18 00 00 18 
30c87 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
30c8b 460 66 7E 7E 66 
30c8f 461 66 66 66 30 
30c93 462 18 00 00 7E 
30c97 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
30c9b 464 3E 06 06 06 
30c9f 465 06 7E 7E 18 
30ca3 466 0C 30 18 3C 
30ca7 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
30cab 468 06 06 06 66 
30caf 469 66 7E 3C 00 
30cb3 46a 00 30 18 66 
30cb7 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
30cbb 46c 7E 7E 76 76 
30cbf 46d 66 66 66 00 
30cc3 46e 00 30 18 7C 
30cc7 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
30ccb 470 1C 38 70 60 
30ccf 471 60 7E 3E 00 
30cd3 472 00 30 18 7E 
30cd7 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
30cdb 474 18 0C 0C 06 
30cdf 475 06 7E 7E 00 
30ce3 476 00 18 18 00 
30ce7 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
30ceb 478 18 18 0C 0C 
30cef 479 06 7E 7E 00 
30cf3 47a 00 30 18 3C 
30cf7 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
30cfb 47c 66 66 66 66 
30cff 47d 66          | 	byte	$66[5]
30d00 47e 7E 3C 00 00 
30d04 47f 00 00 06 06 
30d08 480 06 06 16 1E 
30d0c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
30d10 482 7E 7E 00 00 
30d14 483 00 00 00 00 
30d18 484 00 3C 7C 60 
30d1c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
30d20 486 7E 7C 30 18 
30d24 487 00 00 00 00 
30d28 488 00 3C 7E 66 
30d2c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
30d30 48a 7E 7C 18 0C 
30d34 48b 00 00 30 18 
30d38 48c 00 3C 3E 06 
30d3c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
30d40 48e 7E 7C 00 00 
30d44 48f 00 00 30 18 
30d48 490 00 3E 7E 66 
30d4c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
30d50 492 66 66 00 00 
30d54 493 00 00 30 18 
30d58 494 00 7C 7E 06 
30d5c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
30d60 496 7E 3E 00 00 
30d64 497 00 00 30 18 
30d68 498 00 7E 7E 30 
30d6c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
30d70 49a 7E 7E 00 00 
30d74 49b 00 00 18 18 
30d78 49c 00 7E 7E 30 
30d7c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
30d80 49e 7E 7E 00 00 
30d84 49f 00 00 30 18 
30d88 4a0 00 3C 7E 66 
30d8c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
30d90 4a2 7E 3C 00 00 
30d94 4a3 00 00 1C 1C 
30d98 4a4 18 18 38 3C 
30d9c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
30da0 4a6 3C 3C 00 00 
30da4 4a7 00 00 00 00 
30da8 4a8 00 00 00 00 
30dac 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30db0 4aa 00 00 00 00 
30db4 4ab 00 00       | 	byte	$00[6]
30db6 4ab 18 18 18 18 
30dba 4ac 18 18 18 18 | 	byte	$18[8]
30dbe 4ad 00 00 18 18 
30dc2 4ae 00 00 00 00 
30dc6 4af 66 66 66 66 
30dca 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
30dce 4b1 00 00 00 00 
30dd2 4b2 00 00 00 00 
30dd6 4b3 00          | 	byte	$00[9]
30dd7 4b3 66 66 FF FF 
30ddb 4b4 66 66 FF FF 
30ddf 4b5 66 66 00 00 
30de3 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
30de7 4b7 7C 7E 06 06 
30deb 4b8 3E 7C 60 60 
30def 4b9 7E 3E 18 18 
30df3 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
30df7 4bb 66 30 30 18 
30dfb 4bc 18 0C 0C 66 
30dff 4bd 66 00 00 00 
30e03 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
30e07 4bf 66 66 3C 1C 
30e0b 4c0 1C FC FE 66 
30e0f 4c1 66 FE FC 00 
30e13 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
30e17 4c3 18 18 18 18 
30e1b 4c4 00 00 00 00 
30e1f 4c5 00 00 00 00 
30e23 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
30e27 4c7 18 1C 0C 0C 
30e2b 4c8 0C 0C 0C 0C 
30e2f 4c9 1C 18 30 00 
30e33 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
30e37 4cb 18 38 30 30 
30e3b 4cc 30 30 30 30 
30e3f 4cd 38 18 0C 00 
30e43 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
30e47 4cf 66 66 3C 3C 
30e4b 4d0 FF FF 3C 3C 
30e4f 4d1 66 66 00 00 
30e53 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
30e57 4d3 00 18 18 18 
30e5b 4d4 7E 7E 18 18 
30e5f 4d5 18 00 00 00 
30e63 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30e67 4d7 00 00 00 00 
30e6b 4d8 00 00       | 	byte	$00[6]
30e6d 4d9 18 18 18 18 
30e71 4da 18          | 	byte	$18[5]
30e72 4da 0C 04 00 00 
30e76 4db 00 00 00 00 
30e7a 4dc 7E 7E 00 00 
30e7e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
30e82 4de 00 00 00 00 
30e86 4df 00 00 00 00 
30e8a 4e0 00 00 00 00 
30e8e 4e1 00          | 	byte	$00[13]
30e8f 4e1 18 18 18 00 
30e93 4e2 00 00 00 60 
30e97 4e3 60 60 30 30 
30e9b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
30e9f 4e5 06 06 06 00 
30ea3 4e6 00 00 00 3C 
30ea7 4e7 7E 66 66 66 
30eab 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
30eaf 4e9 66 7E 3C 00 
30eb3 4ea 00 00 00 18 
30eb7 4eb 18 1C 1C 18 
30ebb 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
30ebf 4ed 18 7E 7E 00 
30ec3 4ee 00 00 00 3C 
30ec7 4ef 7E 66 66 30 
30ecb 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
30ecf 4f1 0C 7E 7E 00 
30ed3 4f2 00 00 00 7E 
30ed7 4f3 7E 30 30 18 
30edb 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
30edf 4f5 66 7E 3C 00 
30ee3 4f6 00 00 00 30 
30ee7 4f7 30 38 38 3C 
30eeb 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
30eef 4f9 7E 30 30 00 
30ef3 4fa 00 00 00 7E 
30ef7 4fb 7E 06 06 3E 
30efb 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
30eff 4fd 66 7E 3C 00 
30f03 4fe 00 00 00 38 
30f07 4ff 3C 0E 06 06 
30f0b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
30f0f 501 66 7E 3C 00 
30f13 502 00 00 00 7E 
30f17 503 7E 60 60 30 
30f1b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
30f1f 505 0C 0C 0C 00 
30f23 506 00 00 00 3C 
30f27 507 7E 66 66 3C 
30f2b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
30f2f 509 66 7E 3C 00 
30f33 50a 00 00 00 3C 
30f37 50b 7E 66 66 7E 
30f3b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
30f3f 50d 70 3C 1C 00 
30f43 50e 00 00 00 00 
30f47 50f 00 00 18 18 
30f4b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
30f4f 511 18 18 18 00 
30f53 512 00 00 00 00 
30f57 513 00 00 18 18 
30f5b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
30f5f 515 18 18 18 0C 
30f63 516 04 00 00 00 
30f67 517 70 38 1C 0E 
30f6b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
30f6f 519 70 00 00 00 
30f73 51a 00 00 00 00 
30f77 51b 00 00 7E 7E 
30f7b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
30f7f 51d 00 00 00 00 
30f83 51e 00 00 00 00 | 	byte	$00[8]
30f87 51f 0E 1C 38 70 
30f8b 520 E0 70 38 1C 
30f8f 521 0E 00 00 00 
30f93 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
30f97 523 7E 66 66 30 
30f9b 524 30 18 18 18 
30f9f 525 00 18 18 00 
30fa3 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
30fa7 527 7E 66 66 66 
30fab 528 66 36 06 66 
30faf 529 66 7E 3C 00 
30fb3 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
30fb7 52b 3C 7E 66 66 
30fbb 52c 66 7E 7E 66 
30fbf 52d 66 66 66 00 
30fc3 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
30fc7 52f 7E 66 66 7E 
30fcb 530 3E 66 66 66 
30fcf 531 66 7E 3E 00 
30fd3 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
30fd7 533 7E 66 66 06 
30fdb 534 06 06 06 66 
30fdf 535 66 7E 3C 00 
30fe3 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
30fe7 537 7E 66 66 66 
30feb 538 66 66 66 66 
30fef 539 66 7E 3E 00 
30ff3 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
30ff7 53b 7E 06 06 3E 
30ffb 53c 3E 06 06 06 
30fff 53d 06 7E 7E 00 
31003 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
31007 53f 7E 06 06 3E 
3100b 540 3E 06 06 06 
3100f 541 06 06 06 00 
31013 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
31017 543 7E 06 06 76 
3101b 544 76 66 66 66 
3101f 545 66 7E 3C 00 
31023 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
31027 547 66 66 66 7E 
3102b 548 7E 66 66 66 
3102f 549 66 66 66 00 
31033 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
31037 54b 7E 18 18 18 
3103b 54c 18 18 18 18 
3103f 54d 18 7E 7E 00 
31043 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
31047 54f 60 60 60 60 
3104b 550 60 60 60    | 	byte	$60[7]
3104e 551 66 66 7E 3C 
31052 552 00 00 00 00 
31056 553 66 66 36 36 
3105a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3105e 555 66 66 C6 C6 
31062 556 00 00 00 00 
31066 557 06 06 06 06 
3106a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3106e 559 06 06 7E 7E 
31072 55a 00 00 00 00 
31076 55b C6 C6 EE EE 
3107a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3107e 55d C6 C6 C6 C6 
31082 55e 00 00 00 00 
31086 55f 66 66 66 6E 
3108a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3108e 561 76 66 66 66 
31092 562 00 00 00 00 
31096 563 3C 7E 66 66 
3109a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3109e 565 66 66 7E 3C 
310a2 566 00 00 00 00 
310a6 567 3E 7E 66 66 
310aa 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
310ae 569 06 06 06 06 
310b2 56a 00 00 00 00 
310b6 56b 3C 7E 66 66 
310ba 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
310be 56d 66 56 3E 6C 
310c2 56e 00 00 00 00 
310c6 56f 3E 7E 66 66 
310ca 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
310ce 571 66 66 C6 C6 
310d2 572 00 00 00 00 
310d6 573 7C 7E 06 06 
310da 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
310de 575 60 60 7E 3E 
310e2 576 00 00 00 00 
310e6 577 7E 7E 18 18 
310ea 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
310ee 579 18 18 18 18 
310f2 57a 00 00 00 00 
310f6 57b 66 66 66 66 
310fa 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
310fe 57d 66 66 7E 3C 
31102 57e 00 00 00 00 
31106 57f 66 66 66 66 
3110a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3110e 581 3C 3C 18 18 
31112 582 00 00 00 00 
31116 583 C6 C6 C6 C6 
3111a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3111e 585 FE EE C6 82 
31122 586 00 00 00 00 
31126 587 66 66 66 3C 
3112a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3112e 589 3C 66 66 66 
31132 58a 00 00 00 00 
31136 58b 66 66 66 66 
3113a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3113e 58d 18 18 18 18 
31142 58e 00 00 00 00 
31146 58f 7E 7E 30 30 
3114a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3114e 591 06 06 7E 7E 
31152 592 00 00 00 00 
31156 593 3C 3C 0C 0C 
3115a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3115e 595 0C 0C 3C 3C 
31162 596 00 00 00 00 
31166 597 06 06 0C 0C 
3116a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3116e 599 60 60 C0 C0 
31172 59a 00 00 00 00 
31176 59b 3C 3C 30 30 
3117a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3117e 59d 30 30 3C 3C 
31182 59e 00 00 00 00 
31186 59f 18 18 3C 3C 
3118a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3118e 5a1 00 00 00 00 
31192 5a2 00 00 00 00 
31196 5a3 00 00 00 00 
3119a 5a4 00 00 00 00 
3119e 5a5 00 00       | 	byte	$00[18]
311a0 5a6 FE FE 00 00 
311a4 5a7 00 00 0C 0C 
311a8 5a8 18 18 00 00 
311ac 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
311b0 5aa 00 00 00 00 
311b4 5ab 00 00 00 00 
311b8 5ac 00          | 	byte	$00[9]
311b9 5ac 3C 7C 60 7C 
311bd 5ad 7E 66 66 7E 
311c1 5ae 7C 00 00 00 
311c5 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
311c9 5b0 3E 7E 66 66 
311cd 5b1 66 66 66 7E 
311d1 5b2 3E 00 00 00 
311d5 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
311d9 5b4 3C 3E 06 06 
311dd 5b5 06 06 06 7E 
311e1 5b6 7C 00 00 00 
311e5 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
311e9 5b8 7C 7E 66 66 
311ed 5b9 66 66 66 7E 
311f1 5ba 7C 00 00 00 
311f5 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
311f9 5bc 3C 7E 66 66 
311fd 5bd 7E 06 06 7E 
31201 5be 7C 00 00 00 
31205 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
31209 5c0 18 7E 7E 18 
3120d 5c1 18 18 18 18 
31211 5c2 18 00 00 00 
31215 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
31219 5c4 7C 7E 66 66 
3121d 5c5 66 66 7E 7C 
31221 5c6 60 7E 3E 00 
31225 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
31229 5c8 3E 7E 66 66 
3122d 5c9 66 66 66 66 
31231 5ca 66 00 00 00 
31235 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
31239 5cc 1C 1C 18 18 
3123d 5cd 18 18 18 3C 
31241 5ce 3C 00 00 00 
31245 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
31249 5d0 30 30 30 30 
3124d 5d1 30 30 30 30 
31251 5d2 30          | 	byte	$30[9]
31252 5d2 3E 1E 00 00 
31256 5d3 06 06 06 36 
3125a 5d4 36 1E 1E 1E 
3125e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
31262 5d6 00 00 00 00 
31266 5d7 1C 1C 18 18 
3126a 5d8 18 18 18 18 
3126e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
31272 5da 00 00 00 00 
31276 5db 00 00 00    | 	byte	$00[7]
31279 5dc 6C FE FE D6 
3127d 5dd D6 C6 C6 C6 
31281 5de C6 00 00 00 
31285 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
31289 5e0 3E 7E 66 66 
3128d 5e1 66 66 66 66 
31291 5e2 66 00 00 00 
31295 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
31299 5e4 3C 7E 66 66 
3129d 5e5 66 66 66 7E 
312a1 5e6 3C 00 00 00 
312a5 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
312a9 5e8 3E 7E 66 66 
312ad 5e9 66 66 66 7E 
312b1 5ea 3E 06 06 00 
312b5 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
312b9 5ec 7C 7E 66 66 
312bd 5ed 66 66 66 7E 
312c1 5ee 7C 60 60 00 
312c5 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
312c9 5f0 3E 7E 66 06 
312cd 5f1 06 06 06 06 
312d1 5f2 06 00 00 00 
312d5 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
312d9 5f4 7C 7E 06 0E 
312dd 5f5 3C 70 60 7E 
312e1 5f6 3E 00 00 00 
312e5 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
312e9 5f8 7E 7E 18 18 
312ed 5f9 18 18 18 78 
312f1 5fa 70 00 00 00 
312f5 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
312f9 5fc 66 66 66 66 
312fd 5fd 66 66 66    | 	byte	$66[7]
31300 5fe 7E 7C 00 00 
31304 5ff 00 00 00 00 
31308 600 00 66 66 66 
3130c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
31310 602 18 18 00 00 
31314 603 00 00 00 00 
31318 604 00 C6 C6 D6 
3131c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
31320 606 C6 82 00 00 
31324 607 00 00 00 00 
31328 608 00 66 66 3C 
3132c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
31330 60a 66 66 00 00 
31334 60b 00 00 00 00 
31338 60c 00 66 66 66 
3133c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
31340 60e 7C 60 7E 3E 
31344 60f 00 00 00 00 
31348 610 00 7E 7E 30 
3134c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
31350 612 7E 7E 00 00 
31354 613 00 00 30 18 
31358 614 18 18 18 0C 
3135c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
31360 616 18 30 00 00 
31364 617 00 00 18 18 
31368 618 18 18 18 18 
3136c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
31370 61a 18 18 00 00 
31374 61b 00 00 0C 18 
31378 61c 18 18 18 30 
3137c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
31380 61e 18 0C 00 00 
31384 61f 00 00 6C 7E 
31388 620 36 00 00 00 
3138c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
31390 622 00 00 00 00 
31394 623 00 00 00 00 
31398 624 00          | 	byte	$00[9]
31399 624 18 18 18 18 
3139d 625 18 18 00 00 
313a1 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
313a4 627             | 'amiga_font     file "amigafont.def"
313a4 627 00 6C FE FE 
313a8 628 7C 38 10 00 
313ac 629 18 18 18 F8 
313b0 62a F8 18 18 18 | a8_font        file "atari8.fnt"
313b4 62b C0 C0 C0 C0 
313b8 62c C0 C0 C0 C0 | 	byte	$c0[8]
313bc 62d 18 18 18 1F 
313c0 62e 1F 00 00 00 
313c4 62f 18 18 18 1F 
313c8 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
313cc 631 00 00 00 1F 
313d0 632 1F 18 18 18 
313d4 633 C0 E0 70 38 
313d8 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
313dc 635 03 07 0E 1C 
313e0 636 38 70 E0 C0 
313e4 637 80 C0 E0 F0 
313e8 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
313ec 639 00 00 00 00 
313f0 63a F0 F0 F0 F0 
313f4 63b 01 03 07 0F 
313f8 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
313fc 63d F0 F0 F0 F0 
31400 63e 00 00 00 00 
31404 63f 0F 0F 0F 0F 
31408 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3140c 641 FF FF 00 00 
31410 642 00 00 00 00 
31414 643 00 00 00 00 
31418 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3141c 645 00 00 00 00 
31420 646 0F 0F 0F 0F 
31424 647 00 38 38 EE 
31428 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3142c 649 00 00 00 F8 
31430 64a F8 18 18 18 
31434 64b 00 00 00 FF 
31438 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3143c 64d 18 18 18 FF 
31440 64e FF 18 18 18 
31444 64f 00 00 3C 7E 
31448 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3144c 651 00 00 00 00 
31450 652 FF FF FF FF 
31454 653 03 03 03 03 
31458 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3145c 655 00 00 00 FF 
31460 656 FF 18 18 18 
31464 657 18 18 18 FF 
31468 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3146c 659 0F 0F 0F 0F 
31470 65a 0F 0F 0F 0F | 	byte	$0f[8]
31474 65b 18 18 18 F8 
31478 65c F8 00 00 00 
3147c 65d 1E 06 1E 06 
31480 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
31484 65f 00 18 3C 7E 
31488 660 18 18 18 00 
3148c 661 00 18 18 18 
31490 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
31494 663 00 18 0C 7E 
31498 664 0C 18 00 00 
3149c 665 00 18 30 7E 
314a0 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
314a4 667 00 00 00 00 
314a8 668 00 00 00 00 
314ac 669 00          | 	byte	$00[9]
314ad 669 18 18 18 18 
314b1 66a 00 18 00 00 
314b5 66b 66 66 66 00 
314b9 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
314bd 66d 66 FF 66 66 
314c1 66e FF 66 00 18 
314c5 66f 7C 06 3C 60 
314c9 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
314cd 671 66 36 18 0C 
314d1 672 66 62 00 38 
314d5 673 6C 38 1C F6 
314d9 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
314dd 675 18 18 18 00 
314e1 676 00 00 00 00 
314e5 677 70 38 18 18 
314e9 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
314ed 679 0E 1C 18 18 
314f1 67a 1C 0E 00 00 
314f5 67b 66 3C FF 3C 
314f9 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
314fd 67d 18 18 7E 18 
31501 67e 18 00 00 00 
31505 67f 00 00 00 00 
31509 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3150d 681 00 00 7E 00 
31511 682 00 00 00 00 
31515 683 00 00 00 00 
31519 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3151d 685 60 30 18 0C 
31521 686 06 02 00 00 
31525 687 3C 66 76 6E 
31529 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3152d 689 18 1C 18 18 
31531 68a 18 7E 00 00 
31535 68b 3C 66 30 18 
31539 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3153d 68d 7E 30 18 30 
31541 68e 66 3C 00 00 
31545 68f 30 38 3C 36 
31549 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3154d 691 7E 06 3E 60 
31551 692 66 3C 00 00 
31555 693 3C 06 3E 66 
31559 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3155d 695 7E 60 30 18 
31561 696 0C 0C 00 00 
31565 697 3C 66 3C 66 
31569 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3156d 699 3C 66 7C 60 
31571 69a 30 1C 00 00 
31575 69b 00 18 18 00 
31579 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3157d 69d 00 18 18 00 
31581 69e 18 18 0C 60 
31585 69f 30 18 0C 18 
31589 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3158d 6a1 00 7E 00 00 
31591 6a2 7E 00 00 06 
31595 6a3 0C 18 30 18 
31599 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3159d 6a5 3C 66 30 18 
315a1 6a6 00 18 00 00 
315a5 6a7 3C 66 76 76 
315a9 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
315ad 6a9 18 3C 66 66 
315b1 6aa 7E 66 00 00 
315b5 6ab 3E 66 3E 66 
315b9 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
315bd 6ad 3C 66 06 06 
315c1 6ae 66 3C 00 00 
315c5 6af 1E 36 66 66 
315c9 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
315cd 6b1 7E 06 3E 06 
315d1 6b2 06 7E 00 00 
315d5 6b3 7E 06 3E 06 
315d9 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
315dd 6b5 7C 06 06 76 
315e1 6b6 66 7C 00 00 
315e5 6b7 66 66 7E 66 
315e9 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
315ed 6b9 7E 18 18 18 
315f1 6ba 18 7E 00 00 
315f5 6bb 60 60 60 60 
315f9 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
315fd 6bd 66 36 1E 1E 
31601 6be 36 66 00 00 
31605 6bf 06 06 06 06 
31609 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3160d 6c1 C6 EE FE D6 
31611 6c2 C6 C6 00 00 
31615 6c3 66 6E 7E 7E 
31619 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3161d 6c5 3C 66 66 66 
31621 6c6 66 3C 00 00 
31625 6c7 3E 66 66 3E 
31629 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3162d 6c9 3C 66 66 66 
31631 6ca 36 6C 00 00 
31635 6cb 3E 66 66 3E 
31639 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3163d 6cd 3C 06 3C 60 
31641 6ce 60 3C 00 00 
31645 6cf 7E 18 18 18 
31649 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3164d 6d1 66 66 66 66 
31651 6d2 66          | 	byte	$66[5]
31652 6d2 7E 00 00 66 
31656 6d3 66 66 66 3C 
3165a 6d4 18 00 00 C6 
3165e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
31662 6d6 C6 00 00 66 
31666 6d7 66 3C 3C 66 
3166a 6d8 66 00 00 66 
3166e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
31672 6da 18 00 00 7E 
31676 6db 30 18 0C 06 
3167a 6dc 7E 00 00 78 
3167e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
31682 6de 78 00 00 02 
31686 6df 06 0C 18 30 
3168a 6e0 60 00 00 1E 
3168e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
31692 6e2 1E 00 00 10 
31696 6e3 38 6C C6 00 
3169a 6e4 00 00 00 00 
3169e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
316a2 6e6 FF 00 00 18 
316a6 6e7 3C 7E 7E 3C 
316aa 6e8 18 00 00 00 
316ae 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
316b2 6ea 7C 00 00 06 
316b6 6eb 06 3E 66 66 
316ba 6ec 3E 00 00 00 
316be 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
316c2 6ee 3C 00 00 60 
316c6 6ef 60 7C 66 66 
316ca 6f0 7C 00 00 00 
316ce 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
316d2 6f2 3C 00 00 70 
316d6 6f3 18 7C 18 18 
316da 6f4 18 00 00 00 
316de 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
316e2 6f6 60 3E 00 06 
316e6 6f7 06 3E 66 66 
316ea 6f8 66 00 00 18 
316ee 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
316f2 6fa 3C 00 00 60 
316f6 6fb 00 60 60 60 
316fa 6fc 60 3C 00 06 
316fe 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
31702 6fe 66 00 00 1C 
31706 6ff 18 18 18 18 
3170a 700 3C 00 00 00 
3170e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
31712 702 C6 00 00 00 
31716 703 3E 66 66 66 
3171a 704 66 00 00 00 
3171e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
31722 706 3C 00 00 00 
31726 707 3E 66 66 3E 
3172a 708 06 06 00 00 
3172e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
31732 70a 60 60 00 00 
31736 70b 3E 66 06 06 
3173a 70c 06 00 00 00 
3173e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
31742 70e 3E 00 00 18 
31746 70f 7E 18 18 18 
3174a 710 70 00 00 00 
3174e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
31752 712 7C 00 00 00 
31756 713 66 66 66 3C 
3175a 714 18 00 00 00 
3175e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
31762 716 6C 00 00 00 
31766 717 66 3C 18 3C 
3176a 718 66 00 00 00 
3176e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
31772 71a 30 1E 00 00 
31776 71b 7E 30 18 0C 
3177a 71c 7E 00 00 18 
3177e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
31782 71e 3C 00 18 18 
31786 71f 18 18 18 18 
3178a 720 18 18 00 7E 
3178e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
31792 722 60 00 10 18 
31796 723 1C 1E 1C 18 
3179a 724 10 00 08 18 
3179e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
317a2 726 08 00       | 	byte	$08, $00
317a4 727 00 00 00 00 
317a8 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
317a9 728 80 00 00 00 
317ad 729 00 80 00 00 
317b1 72a 80 80 00 00 
317b5 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
317b9 72c 80 00 80 00 
317bd 72d 00 40 80 00 
317c1 72e AA AA AA 00 
317c5 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
317c9 730 FF 00 00 00 
317cd 731 00 FF 00 00 
317d1 732 FF FF 00 00 
317d5 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
317d9 734 FF 00 FF 00 
317dd 735 00 FF FF 00 
317e1 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
317e4 737 00 00 00 00 
317e8 738 00          | ataripalette   file "ataripalettep2.def"
317e9 738 11 11 11 00 
317ed 739 22 22 22 00 
317f1 73a 33 33 33 00 
317f5 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
317f9 73c 55 55 55 00 
317fd 73d 66 66 66 00 
31801 73e 77 77 77 00 
31805 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
31809 740 99 99 99 00 
3180d 741 AA AA AA 00 
31811 742 BB BB BB 00 
31815 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
31819 744 DD DD DD 00 
3181d 745 EE EE EE 00 
31821 746 FF FF FF 00 
31825 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
31829 748 00 14 40 00 
3182d 749 00 1E 60 00 
31831 74a 00 28 80 00 
31835 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
31839 74c 00 3C BF 00 
3183d 74d 00 46 DF 00 
31841 74e 00 50 FF 00 
31845 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
31849 750 39 77 FF 00 
3184d 751 55 8A FF 00 
31851 752 71 9E FF 00 
31855 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
31859 754 AA C5 FF 00 
3185d 755 C6 D8 FF 00 
31861 756 E3 EC FF 00 
31865 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
31869 758 00 00 40 00 
3186d 759 00 00 60 00 
31871 75a 00 00 80 00 
31875 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
31879 75c 00 00 BF 00 
3187d 75d 00 00 DF 00 
31881 75e 00 00 FF 00 
31885 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
31889 760 39 39 FF 00 
3188d 761 55 55 FF 00 
31891 762 71 71 FF 00 
31895 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
31899 764 AA AA FF 00 
3189d 765 C6 C6 FF 00 
318a1 766 E3 E3 FF 00 
318a5 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
318a9 768 20 00 40 00 
318ad 769 30 00 60 00 
318b1 76a 40 00 80 00 
318b5 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
318b9 76c 60 00 BF 00 
318bd 76d 70 00 DF 00 
318c1 76e 80 00 FF 00 
318c5 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
318c9 770 9C 39 FF 00 
318cd 771 AA 55 FF 00 
318d1 772 B8 71 FF 00 
318d5 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
318d9 774 D5 AA FF 00 
318dd 775 E3 C6 FF 00 
318e1 776 F1 E3 FF 00 
318e5 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
318e9 778 40 00 40 00 
318ed 779 60 00 60 00 
318f1 77a 80 00 80 00 
318f5 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
318f9 77c BF 00 BF 00 
318fd 77d DF 00 DF 00 
31901 77e FF 00 FF 00 
31905 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
31909 780 FF 39 FF 00 
3190d 781 FF 55 FF 00 
31911 782 FF 71 FF 00 
31915 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
31919 784 FF AA FF 00 
3191d 785 FF C6 FF 00 
31921 786 FF E3 FF 00 
31925 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
31929 788 40 00 20 00 
3192d 789 60 00 30 00 
31931 78a 80 00 40 00 
31935 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
31939 78c BF 00 60 00 
3193d 78d DF 00 70 00 
31941 78e FF 00 80 00 
31945 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
31949 790 FF 39 9C 00 
3194d 791 FF 55 AA 00 
31951 792 FF 71 B8 00 
31955 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
31959 794 FF AA D5 00 
3195d 795 FF C6 E3 00 
31961 796 FF E3 F1 00 
31965 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
31969 798 40 00 00 00 
3196d 799 60 00 00 00 
31971 79a 80 00 00 00 
31975 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
31979 79c BF 00 00 00 
3197d 79d DF 00 00 00 
31981 79e FF 00 00 00 
31985 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
31989 7a0 FF 39 39 00 
3198d 7a1 FF 55 55 00 
31991 7a2 FF 71 71 00 
31995 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
31999 7a4 FF AA AA 00 
3199d 7a5 FF C6 C6 00 
319a1 7a6 FF E3 E3 00 
319a5 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
319a9 7a8 40 10 00 00 
319ad 7a9 60 18 00 00 
319b1 7aa 80 20 00 00 
319b5 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
319b9 7ac BF 30 00 00 
319bd 7ad DF 38 00 00 
319c1 7ae FF 40 00 00 
319c5 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
319c9 7b0 FF 6A 39 00 
319cd 7b1 FF 80 55 00 
319d1 7b2 FF 95 71 00 
319d5 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
319d9 7b4 FF BF AA 00 
319dd 7b5 FF D5 C6 00 
319e1 7b6 FF EA E3 00 
319e5 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
319e9 7b8 40 20 00 00 
319ed 7b9 60 30 00 00 
319f1 7ba 80 40 00 00 
319f5 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
319f9 7bc BF 60 00 00 
319fd 7bd DF 70 00 00 
31a01 7be FF 80 00 00 
31a05 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
31a09 7c0 FF 9C 39 00 
31a0d 7c1 FF AA 55 00 
31a11 7c2 FF B8 71 00 
31a15 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
31a19 7c4 FF D5 AA 00 
31a1d 7c5 FF E3 C6 00 
31a21 7c6 FF F1 E3 00 
31a25 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
31a29 7c8 40 30 00 00 
31a2d 7c9 60 48 00 00 
31a31 7ca 80 60 00 00 
31a35 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
31a39 7cc BF 90 00 00 
31a3d 7cd DF A8 00 00 
31a41 7ce FF C0 00 00 
31a45 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
31a49 7d0 FF CE 39 00 
31a4d 7d1 FF D5 55 00 
31a51 7d2 FF DC 71 00 
31a55 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
31a59 7d4 FF EA AA 00 
31a5d 7d5 FF F1 C6 00 
31a61 7d6 FF F8 E3 00 
31a65 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
31a69 7d8 30 40 00 00 
31a6d 7d9 48 60 00 00 
31a71 7da 60 80 00 00 
31a75 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
31a79 7dc 90 BF 00 00 
31a7d 7dd A8 DF 00 00 
31a81 7de C0 FF 00 00 
31a85 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
31a89 7e0 CE FF 39 00 
31a8d 7e1 D5 FF 55 00 
31a91 7e2 DC FF 71 00 
31a95 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
31a99 7e4 EA FF AA 00 
31a9d 7e5 F1 FF C6 00 
31aa1 7e6 F8 FF E3 00 
31aa5 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
31aa9 7e8 00 40 00 00 
31aad 7e9 00 60 00 00 
31ab1 7ea 00 80 00 00 
31ab5 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
31ab9 7ec 00 BF 00 00 
31abd 7ed 00 DF 00 00 
31ac1 7ee 00 FF 00 00 
31ac5 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
31ac9 7f0 39 FF 39 00 
31acd 7f1 55 FF 55 00 
31ad1 7f2 71 FF 71 00 
31ad5 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
31ad9 7f4 AA FF AA 00 
31add 7f5 C6 FF C6 00 
31ae1 7f6 E3 FF E3 00 
31ae5 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
31ae9 7f8 00 40 14 00 
31aed 7f9 00 60 1E 00 
31af1 7fa 00 80 28 00 
31af5 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
31af9 7fc 00 BF 3C 00 
31afd 7fd 00 DF 46 00 
31b01 7fe 00 FF 50 00 
31b05 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
31b09 800 39 FF 77 00 
31b0d 801 55 FF 8A 00 
31b11 802 71 FF 9E 00 
31b15 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
31b19 804 AA FF C5 00 
31b1d 805 C6 FF D8 00 
31b21 806 E3 FF EC 00 
31b25 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
31b29 808 00 40 28 00 
31b2d 809 00 60 3C 00 
31b31 80a 00 80 50 00 
31b35 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
31b39 80c 00 BF 78 00 
31b3d 80d 00 DF 8C 00 
31b41 80e 00 FF A0 00 
31b45 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
31b49 810 39 FF B5 00 
31b4d 811 55 FF C0 00 
31b51 812 71 FF CA 00 
31b55 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
31b59 814 AA FF DF 00 
31b5d 815 C6 FF EA 00 
31b61 816 E3 FF F4 00 
31b65 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
31b69 818 00 40 40 00 
31b6d 819 00 60 60 00 
31b71 81a 00 80 80 00 
31b75 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
31b79 81c 00 BF BF 00 
31b7d 81d 00 DF DF 00 
31b81 81e 00 FF FF 00 
31b85 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
31b89 820 39 FF FF 00 
31b8d 821 55 FF FF 00 
31b91 822 71 FF FF 00 
31b95 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
31b99 824 AA FF FF 00 
31b9d 825 C6 FF FF 00 
31ba1 826 E3 FF FF 00 
31ba5 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
31ba9 828 00 28 40 00 
31bad 829 00 3C 60 00 
31bb1 82a 00 50 80 00 
31bb5 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
31bb9 82c 00 78 BF 00 
31bbd 82d 00 8C DF 00 
31bc1 82e 00 A0 FF 00 
31bc5 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
31bc9 830 39 B5 FF 00 
31bcd 831 55 C0 FF 00 
31bd1 832 71 CA FF 00 
31bd5 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
31bd9 834 AA DF FF 00 
31bdd 835 C6 EA FF 00 
31be1 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
31be4 837             | 
31be4 837             | '**********************************************************************************
31be4 837             | '
31be4 837             | '        Timings and colors definitions
31be4 837             | '
31be4 837             | '**********************************************************************************
31be4 837             | 
31be4 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
31be4 837 10 00 00 00 
31be8 838 50 00 00 00 
31bec 839 0C 00 00 00 
31bf0 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
31bf4 83b 08 00 00 00 
31bf8 83c 04 00 00 00 
31bfc 83d 08 00 00 00 
31c00 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
31c04 83f 40 02 00 00 
31c08 840 6A 8C 15 14 
31c0c 841 FB 06 B7 01 
31c10 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
31c14 843 00 00 00 00 
31c18 844 C0 00 00 00 
31c1c 845 00 00 00 00 
31c20 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31c24 847 00 75 C7 97 
31c28 848 27 47 F6 0A 
31c2c 849 05 79 CB 9B 
31c30 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
31c34 84b             | 
31c34 84b             | ''--------  Initialization  ----------------------------------------------------------------
31c34 84b             | 
31c34 84b 28 0C 64 FD | hdmi            setq    #6
31c38 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
31c3c 84d 28 10 64 FD |                 setq    #8
31c40 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
31c44 84f             | 
31c44 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
31c48 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
31c4c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
31c50 852 D6 C6 01 F1 |                 add     t1,hbase
31c54 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
31c58 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
31c5c 855 7B 0B 80 5F 
31c60 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
31c64 857 66 66 86 FF 
31c68 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
31c6c 859             | '
31c6c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
31c70 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
31c74 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
31c78 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
31c7c 85d             | 
31c7c 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
31c80 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
31c84 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
31c88 860             | 
31c88 860             | ''--------  frame rendering main loop  ---------------------------------------------------
31c88 860             | 
31c88 860 28 06 64 FD | p101            setq 	#3
31c8c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
31c90 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
31c94 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
31c98 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
31c9c 865 00 A0 05 F6 |                 mov     dlinum, #0
31ca0 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
31ca4 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
31ca8 868             | 
31ca8 868             | 
31ca8 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
31cac 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
31cb0 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
31cb4 86b             |                 
31cb4 86b             | 
31cb4 86b             | 
31cb4 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
31cb4 86b             |   
31cb4 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
31cb8 86c 29 FE 65 3D |          if_nc  setq2   #255
31cbc 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
31cc0 86e             | 
31cc0 86e             | '' -----   up porch (before the picture)
31cc0 86e             | 
31cc0 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
31cc4 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
31cc8 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
31ccc 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
31cd0 872             |  
31cd0 872             |    
31cd0 872             |  
31cd0 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
31cd4 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
31cd8 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
31cdc 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
31ce0 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
31ce4 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
31ce8 878             | 
31ce8 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
31cec 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
31cf0 87a 48 00 B0 FD | 		call    #dli
31cf4 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
31cf8 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
31cfc 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
31d00 87e             |                 	
31d00 87e             |                 
31d00 87e             | 
31d00 87e             |  
31d00 87e             | '' ------- the main screen drawing starts here
31d00 87e             | 
31d00 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
31d04 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
31d08 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
31d0c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
31d10 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
31d14 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
31d18 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
31d1c 885             |               
31d1c 885             | 
31d1c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
31d20 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
31d24 887             | 
31d24 887             | ' ---------------- All visible lines displayed now, start vblank  
31d24 887             | 
31d24 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
31d28 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
31d2c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
31d30 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
31d34 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
31d38 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
31d3c 88d             | 
31d3c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
31d3c 88d             | 
31d3c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
31d3c 88d             | 
31d3c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
31d40 88e             | 
31d40 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
31d44 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
31d48 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
31d4c 891             | 
31d4c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
31d50 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
31d54 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
31d58 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
31d5c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
31d60 896             | 
31d60 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
31d64 897 DD C6 41 F8 |                 getnib  t1,dl,#0
31d68 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
31d6c 899 70 00 90 AD |     if_z        jmp     #preload
31d70 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
31d74 89b 94 00 90 AD |     if_z        jmp     #preload2
31d78 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
31d7c 89d 0C 00 90 AD |     if_z        jmp     #p390
31d80 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
31d84 89f 28 00 90 AD |     if_z        jmp     #p391  
31d88 8a0             | 
31d88 8a0 2D 00 64 FD | p308            ret
31d8c 8a1             |    
31d8c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
31d90 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
31d94 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
31d98 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
31d9c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
31da0 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
31da4 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
31da8 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
31dac 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
31db0 8aa             |  
31db0 8aa             | '' --------  Reload palette. To do 
31db0 8aa             | 
31db0 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
31db4 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
31db8 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
31dbc 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
31dc0 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
31dc4 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
31dc8 8b0 70 FF 9F FD |         	jmp     #dli                
31dcc 8b1             |       
31dcc 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
31dcc 8b1             | 
31dcc 8b1             | 
31dcc 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
31dcc 8b1             | 
31dcc 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
31dd0 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
31dd4 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
31dd8 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
31ddc 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
31de0 8b6             |         
31de0 8b6             | '' -------------- Preload a line from PSRAM        
31de0 8b6             |         
31de0 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
31de4 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
31de8 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
31dec 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
31df0 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
31df4 8bb             | 
31df4 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
31df8 8bc 32 B7 01 F6 |                 mov     buf2,a1024
31dfc 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
31e00 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
31e04 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
31e08 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
31e0c 8c1             |  
31e0c 8c1             |  
31e0c 8c1             | preload2      '  incmod  dlinum,#3
31e0c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
31e10 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
31e14 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
31e18 8c4 28 02 64 FD |                 setq	#1
31e1c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
31e20 8c6             |                 
31e20 8c6             | 
31e20 8c6             | '' -------------- Draw sprites
31e20 8c6             | 
31e20 8c6 CF 5C 02 F6 | sprite          mov t8,frames
31e24 8c7 10 5C 0E F5 | 		and t8,#16 wz
31e28 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
31e2c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
31e30 8ca             | 		
31e30 8ca             | 
31e30 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
31e34 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
31e38 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
31e3c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
31e40 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
31e44 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
31e48 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
31e4c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
31e50 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
31e54 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
31e58 8d4 01 52 86 F1 |                 sub     sprite_h,#1
31e5c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
31e60 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
31e64 8d7             | 
31e64 8d7             | 
31e64 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
31e68 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
31e6c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
31e70 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
31e74 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
31e78 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
31e7c 8dd 00 5E 06 F6 |                 mov 	t9,#0
31e80 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
31e84 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
31e88 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
31e8c 8e1             |      
31e8c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
31e90 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
31e94 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
31e98 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
31e9c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
31ea0 8e6             |                 
31ea0 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
31ea4 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
31ea8 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
31eac 8e9             |   		
31eac 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
31eb0 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
31eb4 8eb             | 
31eb4 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
31eb8 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
31ebc 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
31ec0 8ee             |  
31ec0 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
31ec4 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
31ec8 8f0 10 00 90 CD |      if_c 	jmp     #p899		
31ecc 8f1             | 	
31ecc 8f1             | 	
31ecc 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
31ed0 8f2 28 CD 01 F1 | 		add	t4,sprite_w
31ed4 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
31ed8 8f4             | 
31ed8 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
31edc 8f5             | 
31edc 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
31ee0 8f6 01 58 86 F1 | 	 	sub     t6,#1
31ee4 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
31ee8 8f8             | 
31ee8 8f8 28 58 62 FD |                 setq   	t6
31eec 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
31ef0 8fa 28 5D 02 F6 |                 mov t8,sprite_w
31ef4 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
31ef8 8fc 24 00 90 AD |         if_z    jmp #p898
31efc 8fd             |          
31efc 8fd             |         
31efc 8fd 70 5F 06 F6 |                 mov  t9,#368
31f00 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
31f04 8ff             | 
31f04 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
31f08 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
31f0c 901 FF FF 7F FF 
31f10 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
31f14 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
31f18 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
31f1c 905 2D 01 00 F5 |                 and 0-0, t7
31f20 906             |                
31f20 906             | 
31f20 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
31f24 907 E5 E0 7A FA |                 wmlong 368,t3				
31f28 908             |                 
31f28 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
31f2c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
31f30 90a 2D 00 64 FD |                 ret
31f34 90b             | 	
31f34 90b             | 	
31f34 90b             |                
31f34 90b             |  
31f34 90b             | '' -------------- Graphics line ------------------------------------------------------------
31f34 90b             |  
31f34 90b             | 
31f34 90b             | '' consts and vars
31f34 90b             | 
31f34 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
31f38 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
31f3c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
31f40 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
31f44 90f             | 
31f44 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
31f48 910             | 
31f48 910             | '------ these longs will be set by setmode function
31f48 910             | 
31f48 910 00 00 00 00 | m_bs            long    0        'blanks before sync
31f4c 911 00 00 00 00 | m_sn            long    0        'sync
31f50 912 00 00 00 00 | m_bv            long    0        'blanks before visible
31f54 913 00 00 00 00 | m_vi            long    0        'visible pixels #
31f58 914             | 'm_border        long    0        'left/right borders
31f58 914 00 00 00 00 | i_upporch       long    0        'up porch lines
31f5c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
31f60 916 00 00 00 00 | i_downporch     long    0        'down porch lines
31f64 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
31f68 918 00 00 00 00 | i_totalvis      long    0
31f6c 919             | 
31f6c 919             | '-------------------------------------
31f6c 919             |  
31f6c 919 00 00 00 00 | linenum         long    0
31f70 91a 00 00 00 00 | frames          long    0
31f74 91b 00 00 00 00 | dlinum long 0
31f78 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
31f7c 91d             | 
31f7c 91d 00 00 00 00 | vblankptr       long    0
31f80 91e 00 00 00 00 | modeptr         long    0
31f84 91f 00 00 00 00 | paletteptr      long    0
31f88 920 00 00 00 00 | dlptr           long    0
31f8c 921 01 00 00 00 | hbase           long    1
31f90 922 00 00 00 00 | mailbox         long    0
31f94 923 00 00 00 00 | spriteptr          long 0
31f98 924             | 
31f98 924 00 00 00 00 | cmd             long    0
31f9c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
31fa0 926 00 04 00 00 | buf2            long    1024
31fa4 927 01 00 00 00 | dlptr2          long    1
31fa8 928 01 00 00 00 | dl              long    1
31fac 929             | 
31fac 929 00 00 00 00 | buf1c long 0
31fb0 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
31fb4 92b 01 00 00 00 | framebuf2       long    1
31fb8 92c 01 00 00 00 | hsync0          long    1
31fbc 92d 01 00 00 00 | hsync1          long    1
31fc0 92e             | 
31fc0 92e 01 00 00 00 | t1              long    1
31fc4 92f 00 00 00 00 | t2 long 0
31fc8 930 00 00 00 00 | t3 long 0
31fcc 931 00 00 00 00 | t4 long 0
31fd0 932             | 
31fd0 932 00 00 00 00 | rcnt            long    0  'dl repeat count
31fd4 933 00 00 00 00 | rcnt2           long    0
31fd8 934 00 00 00 00 | rcnt2a          long    0
31fdc 935 00 00 00 00 | roffset         long    0
31fe0 936 00 00 00 00 | rdl             long    0  'dl repeat line
31fe4 937 00 00 00 00 | dlc             long    0  'dl command
31fe8 938             | 
31fe8 938 FF FF FF FF | affffffff       long    $ffffffff
31fec 939 00 00 00 00 | sprite1pointer long 0
31ff0 93a 00 00 00 00 | sprite1xy      long 0
31ff4 93b 00 00 00 00 | sprite1wh      long 0
31ff8 93c 00 00 00 00 | sprite2pointer long 0
31ffc 93d 00 00 00 00 | sprite2xy      long 0
32000 93e 00 00 00 00 | sprite2wh      long 0
32004 93f 00 00 00 00 | sprite3pointer long 0
32008 940 00 00 00 00 | sprite3xy      long 0
3200c 941 00 00 00 00 | sprite3wh      long 0
32010 942 00 00 00 00 | sprite4pointer long 0
32014 943 00 00 00 00 | sprite4xy      long 0
32018 944 00 00 00 00 | sprite4wh      long 0
3201c 945 00 00 00 00 | sprite5pointer long 0
32020 946 00 00 00 00 | sprite5xy      long 0
32024 947 00 00 00 00 | sprite5wh      long 0
32028 948 00 00 00 00 | sprite6pointer long 0
3202c 949 00 00 00 00 | sprite6xy      long 0
32030 94a 00 00 00 00 | sprite6wh      long 0
32034 94b 00 00 00 00 | sprite7pointer long 0
32038 94c 00 00 00 00 | sprite7xy      long 0
3203c 94d 00 00 00 00 | sprite7wh      long 0
32040 94e 00 00 00 00 | sprite8pointer long 0
32044 94f 00 00 00 00 | sprite8xy      long 0
32048 950 00 00 00 00 | sprite8wh      long 0
3204c 951 00 00 00 00 | sprite9pointer long 0
32050 952 00 00 00 00 | sprite9xy      long 0
32054 953 00 00 00 00 | sprite9wh      long 0
32058 954 00 00 00 00 | sprite10pointer long 0
3205c 955 00 00 00 00 | sprite10xy      long 0
32060 956 00 00 00 00 | sprite10wh      long 0
32064 957 00 00 00 00 | sprite11pointer long 0
32068 958 00 00 00 00 | sprite11xy      long 0
3206c 959 00 00 00 00 | sprite11wh      long 0
32070 95a 00 00 00 00 | sprite12pointer long 0
32074 95b 00 00 00 00 | sprite12xy      long 0
32078 95c 00 00 00 00 | sprite12wh      long 0
3207c 95d 00 00 00 00 | sprite13pointer long 0
32080 95e 00 00 00 00 | sprite13xy      long 0
32084 95f 00 00 00 00 | sprite13wh      long 0
32088 960 00 00 00 00 | sprite14pointer long 0
3208c 961 00 00 00 00 | sprite14xy      long 0
32090 962 00 00 00 00 | sprite14wh      long 0
32094 963 00 00 00 00 | sprite15pointer long 0
32098 964 00 00 00 00 | sprite15xy      long 0
3209c 965 00 00 00 00 | sprite15wh      long 0
320a0 966 00 00 00 00 | sprite16pointer long 0
320a4 967 00 00 00 00 | sprite16xy      long 0
320a8 968 00 00 00 00 | sprite16wh      long 0
320ac 969 00 00 00 00 | sprite17pointer long 0
320b0 96a 00 00 00 00 | sprite17xy      long 0
320b4 96b 00 00 00 00 | sprite17wh      long 0
320b8 96c 00 00 00 00 | sprite18pointer long 0
320bc 96d 00 00 00 00 | sprite18xy      long 0
320c0 96e 00 00 00 00 | sprite18wh      long 0
320c4 96f 00 00 00 00 | spritenum long 0
320c8 970             | 
320c8 970 00 00 00 00 | spriteline long 0
320cc 971 84 03 00 00 | sprite_x long 900
320d0 972 00 00 00 00 | sprite_y long 0
320d4 973 10 00 00 00 | sprite_w long 16
320d8 974 40 00 00 00 | sprite_h long 64
320dc 975 00 00 00 00 | l2 long 0
320e0 976 00 00 00 00 | t5 long 0
320e4 977 00 00 00 00 | t6 long 0
320e8 978 00 00 00 00 | t7 long 0
320ec 979 00 00 00 00 | t8 long 0
320f0 97a 00 00 00 00 | t9 long 0
320f4 97b 00 00 00 00 | preloadaddr long 0
320f8 97c 00 00 00 00 | preloadlineaddr long 0
320fc 97d 00 04 00 00 | a1024 long 1024
32100 97e             | 
32100 97e E0 03 00 00 | aa long 992
32104 97f FF 03 00 00 | a1023 long 1023
32108 980 00 10 00 00 | a4096 long 4096
3210c 981             |  fit 368
3210c 981             | _psram_spin2_dat_
3210c 981 00 00 00 00 
      ...             
32204 9bf 00 00 00 00 
32208 9c0 00 00 00 00 |     listdata long 0[8*8]
3220c 9c1             |             orgh
3220c                 | 
3220c                 | ' driver state
3220c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
32210     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
32214                 | 
32214                 | ' delay profile
32214     07 00 00 00 
32218     00 CF 7B 05 
3221c     80 D1 F0 08 
32220     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
32224     80 C4 60 0F 
32228     80 39 7A 12 
3222c     40 2D D9 13 
32230     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
32234                 | 
32234                 | ' data to be passed to driver when starting it
32234                 | startupData
32234     00 00 00 00 |     long    0           ' current frequency
32238     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3223c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
32240     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
32244     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
32248     54 22 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3224c     D4 22 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
32250     F4 22 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
32254                 | 
32254                 | ' data for memory
32254                 | deviceData
32254                 |     ' 16 bank parameters follow (16MB per bank)
32254     00 00 00 00 
      ...             
3228c     00 00 00 00 
32290     00 00 00 00 |     long    0[16]                               ' banks 0-15
32294                 |     ' 16 banks of pin parameters follow
32294     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
32298     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3229c     FF FF FF FF 
      ...             
322cc     FF FF FF FF 
322d0     FF FF FF FF |     long    -1[14]                              ' banks 2-15
322d4                 | 
322d4                 | ' data for COG polling
322d4                 | qosData 
322d4     00 00 FF FF 
322d8     00 00 FF FF 
322dc     00 00 FF FF 
322e0     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
322e4     00 00 FF FF 
322e8     00 00 FF FF 
322ec     00 00 FF FF 
322f0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
322f4                 |     
322f4                 | ' mailbox storage
322f4                 | 
322f4                 | mailboxes
322f4     00 00 00 00 
      ...             
3234c     00 00 00 00 
32350     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
32354                 | 	alignl
32354                 | _psram16drv_spin2_dat_
32354                 |                             orgh
32354     00 00 00 00 
      ...             
3236c     00 00 00 00 
32370     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
32374                 | 
32374                 | driver_start
32374                 |                             org
32374 000             | '..................................................................................................
32374 000             | ' Memory layout for COG RAM once operational:
32374 000             | '
32374 000             | '  COG RAM address      Usage
32374 000             | '  ---------------      ----
32374 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
32374 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
32374 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
32374 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
32374 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
32374 000             | '  ~$198-$1F3           State and register variables
32374 000             | '
32374 000             | ' Also during driver COG startup:
32374 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
32374 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
32374 000             | '..................................................................................................
32374 000             |                             
32374 000             | ' Mailbox storage after vector initialization
32374 000             | 
32374 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
32378 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3237c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
32380 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
32384 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
32388 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3238c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
32390 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
32394 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
32398 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3239c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
323a0 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
323a4 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
323a8 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
323ac 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
323b0 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
323b4 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
323b8 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
323bc 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
323c0 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
323c4 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
323c8 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
323cc 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
323d0 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
323d4 018             | 
323d4 018             | ' Mailbox parameter addresses per COG once patched
323d4 018             |                             
323d4 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
323d8 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
323dc 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
323e0 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
323e4 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
323e8 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
323ec 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
323f0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
323f4 020             | 
323f4 020             | '..................................................................................................
323f4 020             | ' Per COG request and state setup and service branching
323f4 020             |         
323f4 020             | cog0                 
323f4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
323f8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
323fc 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
32400 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
32404 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32408 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3240c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
32410 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
32414 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
32418 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3241c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32420 02b 33 CA 63 FD |                             execf   request-0               'jump to service
32424 02c             | cog1                        
32424 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
32428 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3242c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
32430 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
32434 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32438 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3243c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
32440 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
32444 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
32448 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3244c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32450 037 33 CA 63 FD |                             execf   request-0               'jump to service
32454 038             | cog2                         
32454 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
32458 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3245c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
32460 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
32464 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32468 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3246c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
32470 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
32474 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
32478 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3247c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32480 043 33 CA 63 FD |                             execf   request-0               'jump to service
32484 044             | cog3                        
32484 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
32488 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3248c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
32490 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
32494 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32498 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3249c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
324a0 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
324a4 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
324a8 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
324ac 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
324b0 04f 33 CA 63 FD |                             execf   request-0               'jump to service
324b4 050             | cog4                        
324b4 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
324b8 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
324bc 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
324c0 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
324c4 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
324c8 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
324cc 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
324d0 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
324d4 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
324d8 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
324dc 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
324e0 05b 33 CA 63 FD |                             execf   request-0               'jump to service
324e4 05c             | cog5                        
324e4 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
324e8 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
324ec 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
324f0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
324f4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
324f8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
324fc 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
32500 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
32504 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
32508 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3250c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32510 067 33 CA 63 FD |                             execf   request-0               'jump to service
32514 068             | cog6                        
32514 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
32518 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3251c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
32520 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
32524 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32528 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3252c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
32530 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
32534 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
32538 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3253c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32540 073 33 CA 63 FD |                             execf   request-0               'jump to service
32544 074             | cog7                        
32544 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
32548 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3254c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
32550 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
32554 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32558 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3255c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
32560 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
32564 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
32568 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3256c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32570 07f 33 CA 63 FD |                             execf   request-0               'jump to service
32574 080             |                             fit     128
32574 080             | 
32574 080             |                             fit     128
32574 080             | pad                         long    0[128-$]                'align init code to $80
32574 080             | 
32574 080             | '..................................................................................................
32574 080             | 
32574 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
32574 080             | 
32574 080             | init                        
32574 080             |                             ' get driver scratch long address in hub
32574 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
32578 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3257c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
32580 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
32584 084             |                     
32584 084             |                             ' read in the additional LUT RAM code
32584 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
32588 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3258c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
32590 087             | 
32590 087             |                             ' read the startup parameters
32590 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
32594 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
32598 089             | 
32598 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
32598 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3259c 08a             | 
3259c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
325a0 08b 01 00 00 5F 
325a4 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
325a8 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
325ac 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
325b0 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
325b4 090             | 
325b4 090             |                             ' setup data pin modes and data bus pin group in streamer commands
325b4 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
325b8 091 01 00 00 FF 
325bc 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
325c0 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
325c4 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
325c8 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
325cc 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
325d0 097 08 DE 47 F5 |                             or      a, #8
325d4 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
325d8 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
325dc 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
325e0 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
325e4 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
325e8 09d 01 DE 07 F1 |                             add     a, #1
325ec 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
325f0 09f             |  
325f0 09f             |                             ' setup device control pin states
325f0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
325f4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
325f8 0a1 01 00 00 FF 
325fc 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
32600 0a3             | 
32600 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
32604 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
32608 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3260c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
32610 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
32614 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
32618 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3261c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
32620 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
32624 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
32628 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3262c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
32630 0af             | pinloop
32630 0af             |                             ' generate minimum CE high time before access
32630 0af A1 07 00 FF 
32634 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
32638 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3263c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
32640 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
32644 0b4 1F DE 63 FD |                             waitx   a                       'delay
32648 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3264c 0b6             | 
3264c 0b6             |                             ' setup the COG mailboxes and addresses 
3264c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
32650 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
32654 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
32658 0b9             | 
32658 0b9 28 2E 64 FD |                             setq    #24-1
3265c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
32660 0bb             | 
32660 0bb             |                             ' setup the polling loop for active COGs 
32660 0bb 01 C2 63 FD |                             cogid   id
32664 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
32668 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3266c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
32670 0bf 0A F0 07 F6 |                             mov     ptra, #10
32674 0c0 E1 F1 03 FA |                             mul     ptra, id
32678 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3267c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
32680 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
32684 0c4 03 C2 07 FA |                             mul     id, #3
32688 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3268c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
32690 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
32694 0c8 D8 01 B0 FD |                             call    #reloadcogs
32698 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3269c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
326a0 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
326a0 0cb D8 E5 B7 F9 |                             setd    d, #addr1
326a4 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
326a8 0cd 08 04 DC FC |                             rep     #2, #8
326ac 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
326b0 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
326b4 0d0             | 
326b4 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
326b4 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
326b4 0d0 01 C2 63 FD |                             cogid   id
326b8 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
326bc 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
326c0 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
326c4 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
326c8 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
326cc 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
326d0 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
326d4 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
326d8 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
326dc 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
326e0 0db 3F E4 A7 F9 |                             alti    d, #%111_111
326e4 0dc 00 00 00 F6 |                             mov     0-0, 0-0
326e8 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
326ec 0de A5 E5 03 F1 |                             add     d, const512
326f0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
326f4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
326f8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
326fc 0e2             |                             
326fc 0e2             |                             ' setup register values for control vector loop setup after we return
326fc 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
32700 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
32704 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
32708 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3270c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
32710 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
32714 0e8 D0 C3 8F F9 |                             altd    id, #id0
32718 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3271c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
32720 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
32724 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
32728 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3272c 0ee             |  
3272c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
32730 0ef 07 CA 07 F5 |                             and     request, #7
32734 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
32738 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3273c 0f2             |                             fit     $100                    'ensure all init code fits this space
3273c 0f2             | 
3273c 0f2             |                             fit     $100                    'ensure all init code fits this space
3273c 0f2             | 
3273c 0f2 00 00 00 00 
      ...             
3276c 0fe 00 00 00 00 
32770 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
32774 100             | 
32774 100             | '..................................................................................................
32774 100             | ' Error result handling and COG notification of request completion
32774 100             | 
32774 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
32778 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3277c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
32780 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
32784 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
32788 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3278c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
32790 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
32794 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
32798 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3279c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
327a0 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
327a4 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
327a8 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
327ac 10e             | ' Poller re-starts here after a COG is serviced
327ac 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
327b0 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
327b4 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
327b8 111             | ' Main dynamic polling loop repeats until a request arrives
327b8 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
327bc 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
327c0 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
327c4 114             | 
327c4 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
327c8 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
327cc 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
327d0 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
327d4 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
327d8 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
327dc 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
327e0 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
327e4 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
327e8 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
327ec 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
327f0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
327f4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
327f8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
327fc 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
32800 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
32804 124             | 
32804 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
32808 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3280c 126             |  
3280c 126             | '..................................................................................................
3280c 126             | ' List handler                               
3280c 126             | 
3280c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
32810 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
32814 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
32818 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3281c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
32820 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
32824 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
32828 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3282c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
32830 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
32834 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
32838 131 33 00 60 FD |                             execf   0-0                     'process the request 
3283c 132             | 
3283c 132             | '..................................................................................................
3283c 132             | ' Restoring per COG state and resuming where we left off
3283c 132             | 
3283c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
32840 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
32844 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
32848 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3284c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
32850 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
32854 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
32858 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3285c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
32860 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
32864 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
32868 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3286c 13e             |                    
3286c 13e             | '..................................................................................................
3286c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3286c 13e             | 
3286c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
32870 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
32874 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
32878 141 D0 DF B7 F9 |                             setd    a, #id0
3287c 142 D8 DF BF F9 |                             sets    a, #addr1
32880 143 FE FF FF FF 
32884 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
32888 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3288c 146 3F DE A7 F9 |                             alti    a, #%111_111 
32890 147 00 00 F0 F9 |                             muxq    0-0, 0-0
32894 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
32898 149 01 E2 63 FD |                             cogid   c
3289c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
328a0 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
328a4 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
328a8 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
328ac 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
328b0 14f 00 E0 03 F6 |                             mov     b, 0-0
328b4 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
328b8 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
328bc 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
328c0 153 0C 00 90 AD |             if_z            jmp     #excluded               
328c4 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
328c8 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
328cc 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
328d0 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
328d4 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
328d8 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
328dc 15a             | 
328dc 15a             | 'determine priority cogs and build instructions for the polling sequence
328dc 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
328e0 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
328e4 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
328e8 15d             | 
328e8 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
328ec 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
328f0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
328f4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
328f8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
328fc 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
32900 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
32904 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
32908 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3290c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
32910 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
32914 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
32918 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3291c 16a             | endprioloop
3291c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
32920 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
32924 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
32928 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3292c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
32930 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
32934 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
32938 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3293c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
32940 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
32944 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
32948 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3294c 176             | 
3294c 176             | ' populate the round robin COG polling instructions
3294c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
32950 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
32954 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
32958 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3295c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
32960 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
32964 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
32968 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3296c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
32970 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
32974 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
32978 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3297c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
32980 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
32984 184             | '..................................................................................................
32984 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
32984 184             | 
32984 184             | set_latency                                                 '            (a) set latency
32984 184             | get_latency                                                 '            (b) get latency
32984 184             | set_burst                                                   '            (c) set burst size of bank
32984 184             | get_burst                                                   '            (d) get burst size of bank
32984 184             |                                                             '            (e) dump state
32984 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
32988 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3298c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
32990 187             |                                                             ' | | | | e  account for following AUGS
32990 187 04 00 00 FF 
32994 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
32998 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3299c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
329a0 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
329a4 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
329a8 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
329ac 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
329b0 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
329b4 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
329b8 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
329bc 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
329c0 193             | 
329c0 193             | '..................................................................................................
329c0 193             | ' Misc EXECF code
329c0 193             | 
329c0 193 33 72 63 FD | start_read_exec             execf   newburstr
329c4 194 33 7C 63 FD | start_write_exec            execf   resumewrites
329c8 195 33 78 63 FD | continue_read_exec          execf   lockedreads
329cc 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
329d0 197             | 
329d0 197             | '..................................................................................................
329d0 197             | ' Variables
329d0 197             | 
329d0 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
329d4 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
329d8 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
329dc 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
329e0 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
329e4 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
329e8 19d             | 
329e8 19d 00 00 00 80 | xfreq1          long    $80000000
329ec 19e 00 00 00 40 | xfreq2          long    $40000000
329f0 19f 03 00 00 00 | delay           long    3
329f4 1a0             | 
329f4 1a0             | lutcodeaddr                 
329f4 1a0             | startupparams
329f4 1a0             | excludedcogs                                    'careful: shared register use!
329f4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
329f8 1a1 00 00 00 00 | flags           long    0
329fc 1a2             | mask                                            'careful: shared register use!
329fc 1a2 00 00 00 00 | resetmaskA      long    0
32a00 1a3             | limit                                           'careful: shared register use!
32a00 1a3 00 00 00 00 | resetmaskB      long    0
32a04 1a4 00 00 00 00 | datapins        long    0
32a08 1a5             | const512                                        'careful: shared register use!
32a08 1a5 00 00 00 00 | devicelist      long    0
32a0c 1a6 00 00 00 00 | coglist         long    0
32a10 1a7 00 00 00 00 | mbox            long    0 
32a14 1a8             | 
32a14 1a8             | clkpin                                          'shared with code patched during init
32a14 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
32a18 1a9             | cspin                                           'shared with code patched during init
32a18 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
32a1c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
32a20 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
32a24 1ac 01 00 00 00 | clkdelay        long    1
32a28 1ad 00 00 00 00 | regdatabus      long    0
32a2c 1ae             | 
32a2c 1ae 10 00 00 00 | deviceaddr      long    $10
32a30 1af             | rrcounter
32a30 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
32a34 1b0             | 
32a34 1b0             | ' jump addresses for the per COG handlers
32a34 1b0 20 00 00 00 | cog0_handler    long    cog0
32a38 1b1 2C 00 00 00 | cog1_handler    long    cog1
32a3c 1b2 38 00 00 00 | cog2_handler    long    cog2
32a40 1b3 44 00 00 00 | cog3_handler    long    cog3
32a44 1b4 50 00 00 00 | cog4_handler    long    cog4
32a48 1b5 5C 00 00 00 | cog5_handler    long    cog5
32a4c 1b6 68 00 00 00 | cog6_handler    long    cog6
32a50 1b7 74 00 00 00 | cog7_handler    long    cog7
32a54 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
32a58 1b9             | 
32a58 1b9             | ' EXECF sequences
32a58 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
32a5c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
32a60 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
32a64 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
32a68 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
32a6c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
32a70 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
32a74 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
32a74 1c0             | 
32a74 1c0             | 
32a74 1c0             | ' SKIPF sequences
32a74 1c0             | skiptable
32a74 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
32a78 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
32a7c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
32a80 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
32a84 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
32a88 1c5 00 00 00 00 | pattern2        long    0
32a8c 1c6 00 00 00 00 | pattern3        long    0
32a90 1c7 77 02 00 00 | singlelong      long    %1001110111  
32a94 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
32a98 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
32a9c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
32aa0 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
32aa4 1cc             | 
32aa4 1cc             | ' LUT RAM address values
32aa4 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
32aa8 1cd DD 02 00 00 | continue_read   long    continue_read_lut
32aac 1ce DB 02 00 00 | continue_write  long    continue_write_lut
32ab0 1cf F6 02 00 00 | noread          long    noread_lut
32ab4 1d0             | 
32ab4 1d0 00 00 00 00 | id0             long    0
32ab8 1d1 01 00 00 00 | id1             long    1
32abc 1d2 02 00 00 00 | id2             long    2
32ac0 1d3 03 00 00 00 | id3             long    3
32ac4 1d4 04 00 00 00 | id4             long    4
32ac8 1d5 05 00 00 00 | id5             long    5
32acc 1d6 06 00 00 00 | id6             long    6
32ad0 1d7 07 00 00 00 | id7             long    7
32ad4 1d8             | 
32ad4 1d8             | 'These next 10 request registers below are also temporarily reused during init 
32ad4 1d8             | 'and COG updates and need to follow immediately after id0-id7
32ad4 1d8 00 00 00 00 | addr1           long    0
32ad8 1d9 00 00 00 00 | hubdata         long    0
32adc 1da 00 00 00 00 | count           long    0
32ae0 1db 00 00 00 00 | addr2           long    0
32ae4 1dc 00 00 00 00 | total           long    0
32ae8 1dd 00 00 00 00 | offset1         long    0
32aec 1de 00 00 00 00 | offset2         long    0
32af0 1df 00 00 00 00 | link            long    0
32af4 1e0             | 
32af4 1e0             | burstwrite                                      'note shared register use during init
32af4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
32af8 1e1 00 00 00 00 | id              long    0
32afc 1e2             | 
32afc 1e2 00 00 00 00 | header          long    0
32b00 1e3 00 00 00 00 | trailer         long    0
32b04 1e4 00 00 00 00 | cmdaddr         long    0
32b08 1e5 00 00 00 00 | request         long    0
32b0c 1e6 00 00 00 00 | rrlimit         long    0
32b10 1e7 00 00 00 00 | pinconfig       long    0
32b14 1e8 00 00 00 00 | clks            long    0
32b18 1e9 00 00 00 00 | resume          long    0
32b1c 1ea 00 00 00 00 | orighubsize     long    0
32b20 1eb 00 00 00 00 | wrclks          long    0
32b24 1ec             | 
32b24 1ec 00 00 00 00 | pattern         long    0
32b28 1ed 00 00 00 00 | hubscratch      long    0
32b2c 1ee 00 10 00 00 | val4k           long    4096
32b30 1ef             | 
32b30 1ef             | ' temporary general purpose regs
32b30 1ef 00 00 00 00 | a               long    0
32b34 1f0 00 00 00 00 | b               long    0
32b38 1f1 00 00 00 00 | c               long    0
32b3c 1f2 00 00 00 00 | d               long    0
32b40 1f3             |                 fit     502
32b40 1f3             | 
32b40 1f3             |                 fit     502
32b40 1f3             | 
32b40 1f3             | '..................................................................................................
32b40 1f3             | 
32b40 1f3             |             orgh
32b40                 | 
32b40                 | lut_code
32b40                 | 'HW init code up to 80 longs
32b40                 | 
32b40                 | '..................................................................................................
32b40                 | ' Memory layout for LUT RAM once operational:
32b40                 | '
32b40                 | '  LUT RAM address      Usage
32b40                 | '  ---------------      ----
32b40                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
32b40                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
32b40                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
32b40                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
32b40                 | '
32b40                 | ' Also during driver COG startup:
32b40                 | ' $230-$24F is used for HW init setup
32b40                 | ' $250-$26F is used as temporary vector storage 
32b40                 | '..................................................................................................
32b40                 | 
32b40                 |                 org $230    
32b40 230             | 
32b40 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
32b40 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
32b44 231 24 16 60 FD |                             pollxfi
32b48 232 FF AA 2A FF 
32b4c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
32b50 234 28 00 B0 FD |                             call    #sendqspi
32b54 235 07 F8 07 FF 
32b58 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
32b5c 237 28 00 B0 FD |                             call    #sendspi
32b60 238 F8 07 78 FF 
32b64 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
32b68 23a 1C 00 B0 FD |                             call    #sendspi
32b6c 23b 7F 78 78 FF 
32b70 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
32b74 23d 10 00 B0 FD |                             call    #sendspi 
32b78 23e 2D 00 64 FD |                             ret
32b7c 23f             | 
32b7c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
32b80 240 32 0C 64 FD |                             skipf   #%110
32b84 241 9C EF 03 F6 |                             mov     pb, xsendimm
32b88 242             | 
32b88 242 10 D0 07 F6 | sendspi                     mov     clks, #16
32b8c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
32b90 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
32b94 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
32b98 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
32b9c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
32ba0 248 24 36 60 FD |                             waitxfi                         'wait for the completion
32ba4 249 50 48 63 FD |                             fltl    datapins                'float data bus
32ba8 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
32bac 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
32bb0 24c             | 
32bb0 24c 00 00 00 00 
32bb4 24d 00 00 00 00 
32bb8 24e 00 00 00 00 
32bbc 24f 00 00 00 00 |                 long    0[$270-32-$]
32bc0 250             |                 fit     $270-32  ' keep room for 32 vector longs
32bc0 250             |     
32bc0 250             |                 fit     $270-32  ' keep room for 32 vector longs
32bc0 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
32bc0 250             | rw_vect ' PSRAM jump vectors
32bc0 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
32bc4 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
32bc8 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
32bcc 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
32bd0 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
32bd4 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
32bd8 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
32bdc 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
32be0 258             | ro_vect ' R/O PSRAM jump vectors
32be0 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
32be4 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
32be8 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
32bec 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
32bf0 25c 00 01 00 00 |                 long    unsupported
32bf4 25d 00 01 00 00 |                 long    unsupported
32bf8 25e 00 01 00 00 |                 long    unsupported
32bfc 25f 00 01 00 00 |                 long    unsupported
32c00 260             | ctrl_vect ' Control jump vectors
32c00 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
32c04 261 00 01 00 00 |                 long    unsupported
32c08 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
32c0c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
32c10 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
32c14 265 00 01 00 00 |                 long    unsupported
32c18 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
32c1c 267 3E 01 00 00 |                 long    reconfig 
32c20 268             | no_vect ' Invalid bank jump vectors
32c20 268 01 01 00 00 |                 long    invalidbank
32c24 269 01 01 00 00 |                 long    invalidbank
32c28 26a 01 01 00 00 |                 long    invalidbank
32c2c 26b 01 01 00 00 |                 long    invalidbank
32c30 26c 01 01 00 00 |                 long    invalidbank
32c34 26d 01 01 00 00 |                 long    invalidbank
32c38 26e 01 01 00 00 |                 long    invalidbank
32c3c 26f 01 01 00 00 |                 long    invalidbank
32c40 270             |                 fit     $270
32c40 270             | 
32c40 270             |                 fit     $270
32c40 270             | '..................................................................................................
32c40 270             | ' PSRAM READS
32c40 270             |                                                             ' a b c d e f
32c40 270             |                                                             ' B W L B R L  (a) byte read
32c40 270             |                                                             ' Y O O U E O  (b) word read
32c40 270             |                                                             ' T R N R S C  (c) long read
32c40 270             |                                                             ' E D G S U K  (d) new burst read
32c40 270             |                                                             '       T M E  (e) resumed sub-burst
32c40 270             |                                                             '         E D  (f) locked sub-burst
32c40 270             | 
32c40 270             | 
32c40 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
32c44 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
32c48 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
32c4c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
32c50 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
32c54 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
32c58 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
32c5c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
32c60 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
32c64 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
32c68 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
32c6c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
32c70 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
32c74 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
32c78 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
32c7c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
32c80 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
32c84 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
32c88 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
32c8c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
32c90 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
32c94 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
32c98 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
32c9c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
32ca0 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
32ca4 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
32ca8 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
32cac 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
32cb0 28c             | 
32cb0 28c             |                             ' fall through to read bursts
32cb0 28c             |                         
32cb0 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
32cb0 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
32cb4 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
32cb8 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
32cbc 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
32cc0 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
32cc4 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
32cc8 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
32ccc 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
32cd0 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
32cd4 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
32cd8 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
32cdc 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
32ce0 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
32ce4 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
32ce8 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
32cec 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
32cf0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
32cf4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
32cf8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
32cfc 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
32d00 2a0 E8 D1 03 F1 |                             add     clks, clks
32d04 2a1             | readcommon
32d04 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
32d08 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
32d0c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
32d10 2a4             | 
32d10 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
32d14 2a5 69 C8 63 FD |                             rev     cmdaddr
32d18 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
32d1c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
32d20 2a8             | 
32d20 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
32d24 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
32d28 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
32d28 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
32d2c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
32d30 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
32d34 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
32d38 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
32d38 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
32d3c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
32d40 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
32d44 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
32d48 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
32d4c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
32d50 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
32d50 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
32d54 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
32d58 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
32d5c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
32d60 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
32d64 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
32d68 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
32d6c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
32d70 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
32d74 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
32d78 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
32d7c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
32d80 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
32d84 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
32d88 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
32d88 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
32d8c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
32d90 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
32d94 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
32d98 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
32d9c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
32da0 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
32da4 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
32da8 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
32dac 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
32db0 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
32db4 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
32db8 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
32dbc 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
32dc0 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
32dc4 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
32dc8 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
32dcc 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
32dd0 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
32dd4 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
32dd8 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
32ddc 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
32de0 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
32de4 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
32de8 2da 10 03 90 FD |                             jmp     #writecommon
32dec 2db             | 
32dec 2db             | '..................................................................................................
32dec 2db             | ' Burst continuation testing
32dec 2db             | 
32dec 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
32df0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
32df4 2dd             | continue_read_lut          
32df4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
32df8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
32dfc 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
32e00 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
32e04 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
32e08 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
32e0c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
32e10 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
32e14 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
32e18 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
32e1c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
32e20 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
32e24 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
32e28 2ea             | 
32e28 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
32e2c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
32e30 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
32e34 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
32e38 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
32e3c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
32e40 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
32e44 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
32e48 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
32e4c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
32e50 2f4 2A 1C 66 0D |             _ret_           push    #poller
32e54 2f5             | 
32e54 2f5             | 
32e54 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
32e58 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
32e58 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
32e5c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
32e60 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
32e64 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
32e68 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
32e6c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
32e70 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
32e74 2fd 2D 00 64 FD |                             ret                             ' | continue processing
32e78 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
32e7c 2ff             | '..................................................................................................
32e7c 2ff             | ' Completion of requests
32e7c 2ff             | 
32e7c 2ff             | complete_rw_lut             
32e7c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
32e80 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
32e84 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
32e88 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
32e8c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
32e90 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
32e94 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
32e98 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
32e9c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
32ea0 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
32ea4 309 32 62 64 AD |             if_z            skipf   #%110001
32ea8 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
32eac 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
32eb0 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
32eb4 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
32eb8 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
32ebc 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
32ec0 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
32ec4 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
32ec8 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
32ecc 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
32ed0 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
32ed4 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
32ed8 316             |                                                             ' skipcase (a) gfx copy to/from hub
32ed8 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
32ed8 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
32ed8 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
32edc 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
32ee0 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
32ee4 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
32ee8 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
32eec 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
32ef0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
32ef4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
32ef8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
32efc 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
32f00 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
32f04 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
32f08 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
32f0c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
32f10 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
32f14 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
32f18 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
32f1c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
32f20 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
32f24 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
32f28 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
32f2c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
32f30 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
32f34 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
32f38 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
32f3c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
32f40 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
32f44 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
32f48 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
32f4c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
32f50 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
32f54 335 DF B7 03 A6 |             if_z            mov     addr2, link
32f58 336 34 FF 9F AD |             if_z            jmp     #checknext
32f5c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
32f60 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
32f64 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
32f68 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
32f6c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
32f70 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
32f74 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
32f78 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
32f7c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
32f80 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
32f84 341             | 
32f84 341             | '..................................................................................................
32f84 341             | ' PSRAM WRITES
32f84 341             |                                                             '  a b c d e f g h
32f84 341             | 
32f84 341             |                                                             '  B W L F B R L L (a) byte write(s)
32f84 341             |                                                             '  Y O O I U E O O (b) word write(s)
32f84 341             |                                                             '  T R N L R S C C (c) long write(s)
32f84 341             |                                                             '  E D G L S U K K (d) resumed fill
32f84 341             |                                                             '          T M E E (e) new burst write
32f84 341             |                                                             '            E D D (f) resumed burst
32f84 341             |                                                             '              F B (g) locked fill
32f84 341             |                                                             '              I U (h) locked burst write
32f84 341             |                                                             '              L R 
32f84 341             |                                                             '              L S 
32f84 341             |                                                             '                T 
32f84 341             | 
32f84 341             | w_single                   
32f84 341             | w_fill_cont           
32f84 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
32f88 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
32f8c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
32f90 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
32f94 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
32f98 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
32f9c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
32fa0 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
32fa4 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
32fa8 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
32fac 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
32fb0 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
32fb4 34d             |                ' disable call to r_resume_burst for single longs when z=0
32fb4 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
32fb8 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
32fbc 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
32fc0 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
32fc4 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
32fc8 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
32fcc 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
32fd0 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
32fd4 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
32fd8 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
32fdc 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
32fe0 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
32fe4 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
32fe8 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
32fec 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
32ff0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
32ff4 35d             |         
32ff4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
32ff4 35d             |             '
32ff4 35d             |             '  At least one of these 3 optional components will be sent
32ff4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
32ff4 35d             |             '     body - N x full longs of data
32ff4 35d             |             '     trailer - last partial long of data
32ff4 35d             |             '
32ff4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
32ff4 35d             |             '
32ff4 35d             |             'Case    Type                           Sends
32ff4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
32ff4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
32ff4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
32ff4 35d             |             ' 4)     Multiple long fill             body only
32ff4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
32ff4 35d             | 
32ff4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
32ff4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
32ff8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
32ffc 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
33000 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
33004 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
33008 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3300c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
33010 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
33014 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
33018 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3301c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
33020 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
33024 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
33028 36a             |                             
33028 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3302c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
33030 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
33034 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
33038 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3303c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
33040 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
33044 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
33048 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3304c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
33050 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
33054 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
33058 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3305c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
33060 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
33064 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
33068 37a             | 
33068 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3306c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
33070 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
33074 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
33078 37e             |                  
33078 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3307c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
33080 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
33084 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
33088 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3308c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
33090 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
33094 385             | 
33094 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
33098 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3309c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
330a0 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
330a4 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
330a8 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
330ac 38b             | 
330ac 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
330ac 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
330b0 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
330b4 38d 2A B0 63 FD |                             push    addr1                   'save address
330b8 38e             | 
330b8 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
330b8 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
330bc 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
330c0 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
330c4 391             |             
330c4 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
330c8 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
330cc 393 2B B0 63 FD |                             pop     addr1                   'restore address
330d0 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
330d4 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
330d8 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
330dc 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
330e0 398             | 
330e0 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
330e4 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
330e8 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
330ec 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
330f0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
330f4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
330f8 39e             | 
330f8 39e             |                             'trailer is done
330f8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
330fc 39f             | 
330fc 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
33100 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
33104 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
33108 3a2             | 
33108 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3310c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
33110 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
33114 3a5 61 C8 63 FD |                             mergeb  cmdaddr
33118 3a6             |                             
33118 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3311c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
33120 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
33124 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
33128 3aa             |                                                          
33128 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3312c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
33130 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
33134 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
33138 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3313c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
33140 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
33144 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
33148 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3314c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
33150 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
33154 3b5             |  
33154 3b5 59 52 63 FD |                             drvh    cspin
33158 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3315c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
33160 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
33164 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
33168 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3316c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
33170 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
33174 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
33178 3be EA E5 03 F6 |                             mov     d, orighubsize
3317c 3bf EF E5 63 F0 |                             shl     d, a
33180 3c0 F2 E3 83 F1 |                             sub     c, d
33184 3c1 DD E3 03 F1 |                             add     c, offset1
33188 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3318c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
33190 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
33194 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
33198 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3319c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
331a0 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
331a4 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
331a8 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
331ac 3cb BB D3 03 F6 |                             mov     resume, restorefill
331b0 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
331b4 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
331b8 3ce 6C FC BF CD |             if_c            call    #yield
331bc 3cf 2D 00 64 FD |                             ret
331c0 3d0             |                            
331c0 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
331c0 3d0             |                       '     rczl    pa                      'rotate left into address offset
331c0 3d0             |                       '     rczl    c wcz                   'restore count and flags
331c0 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
331c4 3d1 02 EC 67 F0 |                             shl     pa, #2
331c8 3d2 28 06 64 AD |             if_z            setq    #3
331cc 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
331d0 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
331d4 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
331d8 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
331dc 3d7             | 
331dc 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
331e0 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
331e4 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
331e8 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
331ec 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
331f0 3dc             |                 fit 1024-32
331f0 3dc             |         
331f0 3dc             | 
331f0 3dc             | '..................................................................................................
331f0 3dc             | 
331f0 3dc             |                 fit 1024-32
331f0 3dc 00 00 00 00 
331f4 3dd 00 00 00 00 
331f8 3de 00 00 00 00 
331fc 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
33200 3e0             |                 org 1024-32
33200 000             | 
33200 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
33200 000 00 00 00 00 |                 long $0000
33204 001 11 11 00 00 |                 long $1111
33208 002 22 22 00 00 |                 long $2222
3320c 003 33 33 00 00 |                 long $3333
33210 004 44 44 00 00 |                 long $4444
33214 005 55 55 00 00 |                 long $5555
33218 006 66 66 00 00 |                 long $6666
3321c 007 77 77 00 00 |                 long $7777
33220 008 88 88 00 00 |                 long $8888
33224 009 99 99 00 00 |                 long $9999
33228 00a AA AA 00 00 |                 long $aaaa
3322c 00b BB BB 00 00 |                 long $bbbb
33230 00c CC CC 00 00 |                 long $cccc
33234 00d DD DD 00 00 |                 long $dddd
33238 00e EE EE 00 00 |                 long $eeee
3323c 00f FF FF 00 00 |                 long $ffff
33240 010             | 
33240 010             | 'masks
33240 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
33244 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
33248 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3324c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
33250 014             | 
33250 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
33254 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
33258 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3325c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
33260 018             | 
33260 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
33264 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
33268 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3326c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
33270 01c             | 
33270 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
33274 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
33278 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3327c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
33280 020             |         fit 1024
33280 020             | 
33280 020             |         fit 1024
33280 020             | 
33280 020             | '--------------------------------------------------------------------------------------------------
33280 020             |         orgh
33280                 | 
33280                 | gfxexpansion
33280                 |                             'simple line drawing graphics expansion of memory driver
33280                 |                             'jmp     #donerepeats                'just return for now
33280                 | 
33280     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
33284     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
33288     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3328c     DD E1 03 F6 |                             mov     b, offset1              'get error term
33290     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
33294     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
33298     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3329c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
332a0     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
332a4     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
332a8     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
332ac     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
332b0     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
332b4     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
332b8     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
332bc     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
332c0     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
332c4     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
332c8     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
332cc     DC E5 33 F9 |                             getword d, total, #0            'get line width
332d0     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
332d4     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
332d8     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
332dc     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
332e0     C3 03 80 FD |                             jmp     #readmask               'continue filling
332e4                 | 	alignl
332e4                 | _usbnew_spin2_dat_
332e4                 |                 org     $000
332e4 000             | 
332e4 000             | usb_host_start
332e4 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
332e8 001             | 
332e8 001 03 00 00 FF 
332ec 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
332f0 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
332f4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
332f8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
332fc 006 29 70 63 FD |                 setq2   htmp
33300 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
33304 008             | 
33304 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
33308 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3330c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
33310 00b             | 
33310 00b             | '------------------------------------------------------------------------------
33310 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
33310 00b             | ' special because the receiving function must not respond with either STALL or
33310 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
33310 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
33310 00b             | ' corrupt packet, it must ignore the transaction
33310 00b             | '------------------------------------------------------------------------------
33310 00b             | ' On entry:
33310 00b             | '   PTRA - start address of the SETUP data struct.
33310 00b             | ' On exit:
33310 00b             | '   retval - PID_ACK on success, otherwise error code.
33310 00b             | '------------------------------------------------------------------------------
33310 00b             | txn_setup
33310 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
33314 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
33318 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3331c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
33320 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
33324 010             | .setup
33324 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
33328 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3332c 012 2D 00 64 AD |         if_z    ret
33330 013 7C 0B B0 FD |                 call    #retry_wait
33334 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33338 015 2D 00 64 AD |         if_z    ret
3333c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
33340 017 E0 FF 9F FD |                 jmp     #.setup
33344 018             | 
33344 018             | '------------------------------------------------------------------------------
33344 018             | ' IN/INTERRUPT transaction.
33344 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
33344 018             | '------------------------------------------------------------------------------
33344 018             | ' On entry:
33344 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
33344 018             | '     CRC(b19..23).
33344 018             | ' On exit:
33344 018             | '------------------------------------------------------------------------------
33344 018             | txn_in
33344 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
33348 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3334c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
33350 01b             | 
33350 01b             |                 ' Fall through to urx_packet
33350 01b             | 
33350 01b             | '------------------------------------------------------------------------------
33350 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
33350 01b             | ' received are handshakes and IN DATAx.
33350 01b             | '------------------------------------------------------------------------------
33350 01b             | ' On entry:
33350 01b             | ' On exit:
33350 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
33350 01b             | '     returned.
33350 01b             | '------------------------------------------------------------------------------
33350 01b             | urx_packet
33350 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
33354 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
33358 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3335c 01e 1A 92 63 FD |                 getct   hct2
33360 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
33364 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
33368 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3336c 022             | .wait_sop
3336c 022 22 A7 8A FA |                 rdpin   urx, dm
33370 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
33374 024 08 00 90 CD |         if_c    jmp     #.get_pid
33378 025 FC 25 CC FB |                 jnct2   #.wait_sop
3337c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
33380 027             | .get_pid
33380 027 28 02 B0 FD |                 call    #urx_next
33384 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
33388 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3338c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
33390 02b             | .chk_pid
33390 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33394 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
33398 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3339c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
333a0 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
333a4 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
333a8 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
333ac 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
333b0 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
333b4 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
333b8 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
333bc 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
333c0 037             | .ack_resend
333c0 037 22 A7 82 FA |                 rqpin   urx, dm
333c4 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
333c8 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
333cc 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
333d0 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
333d4 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
333d8 03d             | .chk_eop
333d8 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
333dc 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
333e0 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
333e4 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
333e8 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
333ec 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
333f0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
333f4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
333f8 045 2D 00 64 FD |                 ret
333fc 046             | .idle
333fc 046 22 A7 82 FA |                 rqpin   urx, dm
33400 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
33404 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
33408 049 2D 00 64 FD |                 ret
3340c 04a             | 
3340c 04a             | '------------------------------------------------------------------------------
3340c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3340c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3340c 04a             | ' if one is required.
3340c 04a             | '------------------------------------------------------------------------------
3340c 04a             | ' On entry:
3340c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3340c 04a             | ' On exit:
3340c 04a             | '------------------------------------------------------------------------------
3340c 04a             | utx_token
3340c 04a 22 A7 82 FA |                 rqpin   urx, dm
33410 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
33414 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
33418 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3341c 04e 34 0D B0 CD |         if_c    call    #utx_pre
33420 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
33424 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
33428 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3342c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
33430 053             | .next_byte
33430 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
33434 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
33438 055             | .wait
33438 055 40 46 72 FD |                 testp   dp                      wc
3343c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
33440 057 23 03 08 FC |                 akpin   dp
33444 058 22 A5 22 FC |                 wypin   utx, dm
33448 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3344c 05a             | 
3344c 05a             | '------------------------------------------------------------------------------
3344c 05a             | ' SETUP/OUT/INTERRUPT transaction.
3344c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3344c 05a             | '------------------------------------------------------------------------------
3344c 05a             | ' On entry:
3344c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3344c 05a             | '     CRC(b19..23).
3344c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3344c 05a             | '   pkt_data - count of DATAx payload bytes to send.
3344c 05a             | ' On exit:
3344c 05a             | '------------------------------------------------------------------------------
3344c 05a             | txn_out
3344c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
33450 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
33454 05c 00 00 C0 FF 
33458 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3345c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
33460 05f             | 
33460 05f             |                 ' Fall through to utx_data
33460 05f             | 
33460 05f             | '------------------------------------------------------------------------------
33460 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
33460 05f             | ' calculated while the data byte is being shifted out. Since data stage
33460 05f             | ' success/fail is not determined until the status stage of the transaction,
33460 05f             | ' this routine is only concerned about the current DATAx packet.
33460 05f             | '------------------------------------------------------------------------------
33460 05f             | ' On entry:
33460 05f             | '   PTRA - hub start address of the data to read.
33460 05f             | '   pkt_cnt - data payload size.
33460 05f             | ' On exit:
33460 05f             | '------------------------------------------------------------------------------
33460 05f             | utx_data
33460 05f 22 A7 82 FA |                 rqpin   urx, dm
33464 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
33468 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3346c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
33470 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
33474 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
33478 065 D8 0C B0 CD |         if_c    call    #utx_pre
3347c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
33480 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
33484 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
33488 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3348c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
33490 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
33494 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
33498 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3349c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
334a0 06f             | .read_byte
334a0 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
334a4 070 F0 00 B0 FD |                 call    #utx_byte
334a8 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
334ac 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
334b0 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
334b4 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
334b8 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
334bc 076             | .send_crc
334bc 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
334c0 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
334c4 078 D0 00 B0 FD |                 call    #utx_byte
334c8 079 5D A5 EA F8 |                 getbyte utx, crc, #1
334cc 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
334d0 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
334d4 07c             | 
334d4 07c             | '------------------------------------------------------------------------------
334d4 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
334d4 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
334d4 07c             | ' expects that the packet includes at least the CRC word.
334d4 07c             | '
334d4 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
334d4 07c             | ' was requested, which makes it difficult to determine where the data stops
334d4 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
334d4 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
334d4 07c             | ' USB-16 expected residual value of 0xB001.
334d4 07c             | '
334d4 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
334d4 07c             | ' so the caller can verify IN success before writing the data to its final
334d4 07c             | ' destination.
334d4 07c             | '------------------------------------------------------------------------------
334d4 07c             | ' On entry:
334d4 07c             | '   pkt_data - max byte count expected to be in the packet.
334d4 07c             | '   newb_flg - signals new byte ready when toggled.
334d4 07c             | ' On exit:
334d4 07c             | '   pkt_cnt - actual number of bytes read.
334d4 07c             | '------------------------------------------------------------------------------
334d4 07c             | urx_data
334d4 07c F7 75 03 F6 |                 mov     htmp2, pb
334d8 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
334dc 07e 00 00 C0 FF 
334e0 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
334e4 080 BA EF 03 F6 |                 mov     pb, htmp2
334e8 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
334ec 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
334f0 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
334f4 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
334f8 085             | .wait_byte
334f8 085             | ' In-line rx for max speed
334f8 085 22 A7 82 FA |                 rqpin   urx, dm
334fc 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
33500 087 53 A5 02 F5 |                 and     utx, urx
33504 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
33508 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3350c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
33510 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
33514 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
33518 08d DC FF 9F FD |                 jmp     #.wait_byte
3351c 08e             | .get_byte
3351c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
33520 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
33524 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
33528 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3352c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
33530 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
33534 094             | .end_crc
33534 094 01 B8 06 F1 |                 add     pkt_cnt, #1
33538 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3353c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
33540 097 2D 00 64 1D |         if_a    ret
33544 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
33544 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
33544 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
33544 098             | ' to miss it, so cheat a bit and look for SOP clear here.
33544 098 22 A7 82 FA |                 rqpin   urx, dm
33548 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3354c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
33550 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
33550 09b             | .chk_crc
33550 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
33554 09c 58 00 00 FF 
33558 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3355c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
33560 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
33564 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
33568 0a1 34 09 B0 FD |                 call    #poll_waitx
3356c 0a2             | 
3356c 0a2             |                 ' Fall through to utx_handshake
3356c 0a2             | 
3356c 0a2             | '------------------------------------------------------------------------------
3356c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3356c 0a2             | ' the appropriate IP delay has been inserted.
3356c 0a2             | '------------------------------------------------------------------------------
3356c 0a2             | ' On entry:
3356c 0a2             | '   retval - handshake PID to send.
3356c 0a2             | ' On exit:
3356c 0a2             | '   retval unchanged.
3356c 0a2             | '------------------------------------------------------------------------------
3356c 0a2             | utx_handshake
3356c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
33570 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
33574 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
33578 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3357c 0a6 5F A5 02 F6 |                 mov     utx, retval
33580 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
33584 0a8             | .idle
33584 0a8 22 A7 82 FA |                 rqpin   urx, dm
33588 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3358c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
33590 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
33594 0ac 08 09 90 FD |                 jmp     #poll_waitx
33598 0ad             | 
33598 0ad             | '------------------------------------------------------------------------------
33598 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
33598 0ad             | '------------------------------------------------------------------------------
33598 0ad             | ' On entry:
33598 0ad             | '   utx - byte to transmit.
33598 0ad             | ' On exit:
33598 0ad             | '------------------------------------------------------------------------------
33598 0ad             | utx_byte
33598 0ad 40 46 72 FD |                 testp   dp                      wc
3359c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
335a0 0af 23 03 08 FC |                 akpin   dp
335a4 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
335a8 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
335ac 0b2             | 
335ac 0b2             | '------------------------------------------------------------------------------
335ac 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
335ac 0b2             | '------------------------------------------------------------------------------
335ac 0b2             | ' On entry:
335ac 0b2             | ' On exit:
335ac 0b2             | '   retval - the byte read.
335ac 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
335ac 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
335ac 0b2             | '     received.
335ac 0b2             | '------------------------------------------------------------------------------
335ac 0b2             | urx_next
335ac 0b2 22 A7 8A FA |                 rdpin   urx, dm
335b0 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
335b4 0b4 53 A5 02 F5 |                 and     utx, urx
335b8 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
335bc 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
335c0 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
335c4 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
335c8 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
335cc 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
335d0 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
335d4 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
335d8 0bd 2D 00 64 FD |                 ret
335dc 0be             | 
335dc 0be             | '------------------------------------------------------------------------------
335dc 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
335dc 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
335dc 0be             | ' length, and the PID is not included in the CRC calculation:
335dc 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
335dc 0be             | '  CRC5  ENDP ADDRESS PID
335dc 0be             | ' %00000_1111_1111111_xxxxxxxx
335dc 0be             | '------------------------------------------------------------------------------
335dc 0be             | ' On entry:
335dc 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
335dc 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
335dc 0be             | ' On exit:
335dc 0be             | '   ep_addr_pid - CRC value appended to the packet.
335dc 0be             | '------------------------------------------------------------------------------
335dc 0be             | calc_crc5
335dc 0be FF 03 00 FF 
335e0 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
335e4 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
335e8 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
335ec 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
335f0 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
335f4 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
335f8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
335fc 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
33600 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
33604 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
33608 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3360c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
33610 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
33614 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
33618 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3361c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
33620 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
33624 0d0             | 
33624 0d0             | '------------------------------------------------------------------------------
33624 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
33624 0d0             | '------------------------------------------------------------------------------
33624 0d0             | isr1_fsframe
33624 0d0 1A 92 62 FD |                 getct   iframe_ct_base
33628 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3362c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33630 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
33634 0d4             | .wait
33634 0d4 40 46 72 FD |                 testp   dp                      wc
33638 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3363c 0d6 23 03 08 FC |                 akpin   dp
33640 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
33644 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
33648 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3364c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
33650 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
33654 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
33658 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3365c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
33660 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
33664 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
33668 0e1 2C FF BF FD |                 call    #utx_byte
3366c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
33670 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
33674 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
33678 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3367c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
33680 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
33684 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
33688 0e9 5B A5 42 F5 |                 or      utx, icrc
3368c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
33690 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
33694 0ec 20 00 90 FD |                 jmp     #isr1_wait
33698 0ed             | isr1_lsframe
33698 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3369c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
336a0 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
336a4 0f0             | .wait
336a4 0f0 40 46 72 FD |                 testp   dp                      wc
336a8 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
336ac 0f2 23 03 08 FC |                 akpin   dp
336b0 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
336b4 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
336b8 0f5             | isr1_wait
336b8 0f5 22 A5 82 FA |                 rqpin   utx, dm
336bc 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
336c0 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
336c4 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
336c8 0f9 03 00 00 FF 
336cc 0fa FF B3 06 F5 |                 and     frame, ##$7ff
336d0 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
336d4 0fc F5 FF 3B FB |                 reti1
336d8 0fd             | 
336d8 0fd             | '------------------------------------------------------------------------------
336d8 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
336d8 0fd             | ' transaction will complete before the next frame is triggered.
336d8 0fd             | '------------------------------------------------------------------------------
336d8 0fd             | ' On entry:
336d8 0fd             | ' On exit:
336d8 0fd             | '------------------------------------------------------------------------------
336d8 0fd             | wait_txn_ok
336d8 0fd 1A 74 63 FD |                 getct   htmp2
336dc 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
336e0 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
336e4 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
336e8 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
336ec 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
336f0 103 2D 00 64 FD |                 ret
336f4 104             | 
336f4 104             | '------------------------------------------------------------------------------
336f4 104             | ' A device connection was detected, or a bus reset was requested by the USB
336f4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
336f4 104             | ' and perform a reset sequence prior to device enumeration.
336f4 104             | '------------------------------------------------------------------------------
336f4 104             | dev_reset
336f4 104 22 A7 82 FA |                 rqpin   urx, dm
336f8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
336fc 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
33700 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
33704 108             | reset
33704 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
33708 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3370c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
33710 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33714 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
33718 10d 1A 92 62 FD |                 getct   iframe_ct_base
3371c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33720 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33724 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
33728 111 24 70 07 F1 |                 add     htmp, #36
3372c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
33730 113             | .framewait
33730 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
33734 114 F8 FF 9F CD |         if_b    jmp     #.framewait
33738 115 2D 00 64 FD |                 ret
3373c 116             | 
3373c 116             | '------------------------------------------------------------------------------
3373c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3373c 116             | '------------------------------------------------------------------------------
3373c 116             | ' On entry:
3373c 116             | '   PTRA - source address.
3373c 116             | '   PB - destination address.
3373c 116             | '   hr0 - length of copy, in bytes.
3373c 116             | ' On exit:
3373c 116             | '------------------------------------------------------------------------------
3373c 116             | hmemcpy
3373c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
33740 117 F7 71 43 FC |                 wrbyte  htmp, pb
33744 118 01 EE 07 F1 |                 add     pb, #1
33748 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3374c 11a             | 
3374c 11a             | '------------------------------------------------------------------------------
3374c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3374c 11a             | ' loop until the errant device is disconnected.
3374c 11a             | '------------------------------------------------------------------------------
3374c 11a             | ' On entry:
3374c 11a             | ' On exit:
3374c 11a             | '------------------------------------------------------------------------------
3374c 11a             | host_error
3374c 11a             |           if ERROR_LED >= 0
3374c 11a             |           end
3374c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
33750 11b             | 
33750 11b             | '------------------------------------------------------------------------------
33750 11b             | ' Get HID descriptor buffer for current port
33750 11b             | '------------------------------------------------------------------------------
33750 11b             | ' On entry:
33750 11b             | ' On exit:
33750 11b             | '   PB - HID descriptor buffer pointer
33750 11b             | '------------------------------------------------------------------------------
33750 11b             | get_hid_descr_buffer
33750 11b 2D EF 03 F6 |                 mov     pb, hdev_port
33754 11c 01 EE E7 F2 |                 cmpsub  pb, #1
33758 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3375c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
33760 11f             | 
33760 11f             | 
33760 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
33764 120             | 
33764 120             | ' USB commands and error codes
33764 120 00 00 00 00 | cmd_data        long    0
33768 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3376c 122             | 
3376c 122             | ' Parameters block assigned at cog startup
3376c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
33770 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
33774 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
33778 125             | if ACTIVITY_LED >= 0
33778 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
33778 125             | end
33778 125             | if ERROR_LED >= 0
33778 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
33778 125             | end
33778 125 00 00 00 00 | hid_descr_p     long    0
3377c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3377c 126             | 'hkbd_report_p   long    0
3377c 126 00 00 00 00 | hub_descr_p     long    0
33780 127 00 00 00 00 | urx_buff_p      long    0
33784 128 00 00 00 00 | dev_desc_buff_p long    0
33788 129 00 00 00 00 | con_desc_buff_p long    0
3378c 12a 00 00 00 00 | cache_start_p   long    0
33790 12b 00 00 00 00 | cache_end_p     long    0
33794 12c             | if EMUPAD_MAX_PLAYER > 0
33794 12c             | emupad_out_ptr  long    0
33794 12c             | end
33794 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
33798 12d             | 
33798 12d             | hdev_init_start
33798 12d             | hdev_port       res     1
33798 12d             | hdev_port       res     1
33798 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
33798 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
33798 12d             | kbm_next_datax  res     1
33798 12d             | kbm_next_datax  res     1
33798 12d             | hub_intf_num    res     1
33798 12d             | hub_intf_num    res     1
33798 12d             | hub_next_datax  res     1
33798 12d             | hub_next_datax  res     1
33798 12d             | hub_status_chg  res     1
33798 12d             | hub_status_chg  res     1
33798 12d             | hub_port_status res     1
33798 12d             | hub_port_status res     1
33798 12d             | if HAVE_MOUSE
33798 12d             | ms_intf_num     res     1
33798 12d             | ms_intf_num     res     1
33798 12d             | ms_in_max_pkt   res     1
33798 12d             | ms_in_max_pkt   res     1
33798 12d             | end
33798 12d             | kb_intf_num     res     1
33798 12d             | kb_intf_num     res     1
33798 12d             | kb_interval     res     1
33798 12d             | kb_interval     res     1
33798 12d             | kb_in_max_pkt   res     1
33798 12d             | kb_in_max_pkt   res     1
33798 12d             | kb_max_index    res     1
33798 12d             | kb_max_index    res     1
33798 12d             | kb_led_states   res     1
33798 12d             | kb_led_states   res     1
33798 12d             | gp_intf_num     res     1
33798 12d             | gp_intf_num     res     1
33798 12d             | gp_interval     res     1
33798 12d             | gp_interval     res     1
33798 12d             | gp_max_index    res     1
33798 12d             | gp_max_index    res     1
33798 12d             | gp_descr_len    res     1+MAX_DEVICES
33798 12d             | gp_descr_len    res     1+MAX_DEVICES
33798 12d             | hdev_init_end
33798 12d             | 
33798 12d             | ' Initialized at cog startup:
33798 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
33798 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
33798 12d             | iframe_ct_new   res     1
33798 12d             | iframe_ct_new   res     1
33798 12d             | iframe_ct_base  res     1
33798 12d             | iframe_ct_base  res     1
33798 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
33798 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
33798 12d             | 
33798 12d             | ' This register block is reset to zero when a USB device connects
33798 12d             | hreg_init_start
33798 12d             | hstatus         res     1         ' Host status flags
33798 12d             | hstatus         res     1         ' Host status flags
33798 12d             | hctwait         res     1         ' Poll-based wait clocks
33798 12d             | hctwait         res     1         ' Poll-based wait clocks
33798 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
33798 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
33798 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
33798 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
33798 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
33798 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
33798 12d             | xfer_retry      res     1         ' Control transfer retry count
33798 12d             | xfer_retry      res     1         ' Control transfer retry count
33798 12d             | retry           res     1         ' Transaction retry count
33798 12d             | retry           res     1         ' Transaction retry count
33798 12d             | utx             res     1         ' Byte to transmit on USB
33798 12d             | utx             res     1         ' Byte to transmit on USB
33798 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
33798 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
33798 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
33798 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
33798 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
33798 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
33798 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
33798 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
33798 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
33798 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
33798 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
33798 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
33798 12d             | frame           res     1         ' USB 1ms frame counter value
33798 12d             | frame           res     1         ' USB 1ms frame counter value
33798 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
33798 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
33798 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
33798 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
33798 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
33798 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
33798 12d             | crc             res     1         ' Used for CRC16 calculation
33798 12d             | crc             res     1         ' Used for CRC16 calculation
33798 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
33798 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
33798 12d             | retval          res     1         ' Global success/fail return parameter
33798 12d             | retval          res     1         ' Global success/fail return parameter
33798 12d             | context_retval  res     1         ' Operation contextual return parameter
33798 12d             | context_retval  res     1         ' Operation contextual return parameter
33798 12d             | ' Device stuff
33798 12d             | hdev_id         res     1+MAX_DEVICES
33798 12d             | hdev_id         res     1+MAX_DEVICES
33798 12d             | hdev_bcd        res     1
33798 12d             | hdev_bcd        res     1
33798 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
33798 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
33798 12d             | ' Keyboard/mouse stuff
33798 12d             | hctrl_ep_addr   res     1
33798 12d             | hctrl_ep_addr   res     1
33798 12d             | hctrl_max_pkt   res     1
33798 12d             | hctrl_max_pkt   res     1
33798 12d             | hconfig_base    res     1
33798 12d             | hconfig_base    res     1
33798 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
33798 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
33798 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
33798 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
33798 12d             | hdev_class      res     1
33798 12d             | hdev_class      res     1
33798 12d             | hdev_subclass   res     1
33798 12d             | hdev_subclass   res     1
33798 12d             | hdev_protocol   res     1
33798 12d             | hdev_protocol   res     1
33798 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
33798 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
33798 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
33798 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
33798 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
33798 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
33798 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
33798 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
33798 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
33798 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
33798 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
33798 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
33798 12d             | if HAVE_MOUSE
33798 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
33798 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
33798 12d             | end
33798 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
33798 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
33798 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
33798 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
33798 12d             | hdev_ep_addr    res     1+MAX_DEVICES
33798 12d             | hdev_ep_addr    res     1+MAX_DEVICES
33798 12d             | hdev_out_addr   res     1
33798 12d             | hdev_out_addr   res     1
33798 12d             | 
33798 12d             | if EMUPAD_MAX_PLAYER > 0
33798 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
33798 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
33798 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
33798 12d             | end
33798 12d             | 
33798 12d             | hreg_init_end
33798 12d             | 
33798 12d             | hidr_start
33798 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
33798 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
33798 12d             | hidr_flags      res     1
33798 12d             | hidr_flags      res     1
33798 12d             | hidr_axis       res     3
33798 12d             | hidr_axis       res     3
33798 12d             | hidr_buttons    res     1
33798 12d             | hidr_buttons    res     1
33798 12d             | hidr_hats       res     1
33798 12d             | hidr_hats       res     1
33798 12d             | '' Above are actually useful values, 6 longs
33798 12d             | hidr_id         res     1
33798 12d             | hidr_id         res     1
33798 12d             | hidr_state      res     1
33798 12d             | hidr_state      res     1
33798 12d             | hidr_size       res     1
33798 12d             | hidr_size       res     1
33798 12d             | hidr_count      res     1
33798 12d             | hidr_count      res     1
33798 12d             | hidr_offset     res     1
33798 12d             | hidr_offset     res     1
33798 12d             | hidr_usage_idx  res     1
33798 12d             | hidr_usage_idx  res     1
33798 12d             | hidr_lminmax    res     1
33798 12d             | hidr_lminmax    res     1
33798 12d             | hidr_pminmax    res     1
33798 12d             | hidr_pminmax    res     1
33798 12d             | hidr_type       res     1
33798 12d             | hidr_type       res     1
33798 12d             | hidr_end
33798 12d             | 
33798 12d             | ' Variables dependent on the system freqency
33798 12d             | _var_64_lower_  res     1
33798 12d             | _var_64_lower_  res     1
33798 12d             | _var_64_upper_  res     1
33798 12d             | _var_64_upper_  res     1
33798 12d             | _12Mbps_        res     1
33798 12d             | _12Mbps_        res     1
33798 12d             | _1_5Mbps_       res     1
33798 12d             | _1_5Mbps_       res     1
33798 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
33798 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
33798 12d             | _1us_           res     1         ' 1us
33798 12d             | _1us_           res     1         ' 1us
33798 12d             | _10us_          res     1         ' 10us
33798 12d             | _10us_          res     1         ' 10us
33798 12d             | _33us_          res     1         ' 33us
33798 12d             | _33us_          res     1         ' 33us
33798 12d             | _txn_err_       res     1         ' 250us
33798 12d             | _txn_err_       res     1         ' 250us
33798 12d             | _500us_         res     1         ' 500us
33798 12d             | _500us_         res     1         ' 500us
33798 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
33798 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
33798 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
33798 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
33798 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
33798 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
33798 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
33798 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
33798 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
33798 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
33798 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
33798 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
33798 12d             | _preamble_wait_ res     1
33798 12d             | _preamble_wait_ res     1
33798 12d             | _1ms_           res     1         ' 1ms
33798 12d             | _1ms_           res     1         ' 1ms
33798 12d             | _2ms_           res     1         ' 2ms
33798 12d             | _2ms_           res     1         ' 2ms
33798 12d             | _suspend_wait_  res     1         ' 3ms
33798 12d             | _suspend_wait_  res     1         ' 3ms
33798 12d             | _4ms_           res     1         ' 4ms
33798 12d             | _4ms_           res     1         ' 4ms
33798 12d             | _xfer_wait_     res     1         ' 5ms
33798 12d             | _xfer_wait_     res     1         ' 5ms
33798 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
33798 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
33798 12d             | _reset_hold_    res     1         ' 15ms
33798 12d             | _reset_hold_    res     1         ' 15ms
33798 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
33798 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
33798 12d             | _21ms_          res     1         ' 21ms
33798 12d             | _21ms_          res     1         ' 21ms
33798 12d             | _100ms_         res     1         ' 100ms
33798 12d             | _100ms_         res     1         ' 100ms
33798 12d             | _500ms_         res     1         ' 500ms
33798 12d             | _500ms_         res     1         ' 500ms
33798 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
33798 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
33798 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
33798 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
33798 12d             | '------------------------------------------------------------------------------
33798 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
33798 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
33798 12d             | _usb_d_ls_nco_  res     1
33798 12d             | _usb_d_ls_nco_  res     1
33798 12d             | _usb_h_fs_nco_  res     1
33798 12d             | _usb_h_fs_nco_  res     1
33798 12d             | _usb_d_fs_nco_  res     1
33798 12d             | _usb_d_fs_nco_  res     1
33798 12d             | '------------------------------------------------------------------------------
33798 12d             | ' Scratch registers
33798 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
33798 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
33798 12d             | htmp1           res     1
33798 12d             | htmp1           res     1
33798 12d             | htmp2           res     1
33798 12d             | htmp2           res     1
33798 12d             | htmp3           res     1
33798 12d             | htmp3           res     1
33798 12d             | hrep            res     1         ' Repeat count
33798 12d             | hrep            res     1         ' Repeat count
33798 12d             | hsave0          res     1         ' Subroutine parameter saves
33798 12d             | hsave0          res     1         ' Subroutine parameter saves
33798 12d             | hsave1          res     1
33798 12d             | hsave1          res     1
33798 12d             | hsave2          res     1
33798 12d             | hsave2          res     1
33798 12d             | isrtmp1         res     1
33798 12d             | isrtmp1         res     1
33798 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
33798 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
33798 12d             | hr0             res     1         ' Multi-purpose registers
33798 12d             | hr0             res     1         ' Multi-purpose registers
33798 12d             | hr1             res     1
33798 12d             | hr1             res     1
33798 12d             | hr2             res     1
33798 12d             | hr2             res     1
33798 12d             | hr3             res     1
33798 12d             | hr3             res     1
33798 12d             | hpar1           res     1         ' Routine entry/exit parameters
33798 12d             | hpar1           res     1         ' Routine entry/exit parameters
33798 12d             | hpar2           res     1
33798 12d             | hpar2           res     1
33798 12d             | hpar3           res     1
33798 12d             | hpar3           res     1
33798 12d             | hct2            res     1         ' Function response bus turn-around timer
33798 12d             | hct2            res     1         ' Function response bus turn-around timer
33798 12d             | hct3            res     1         ' Keyboard/mouse poll timer
33798 12d             | hct3            res     1         ' Keyboard/mouse poll timer
33798 12d             | mod_cnt         res     1         ' Used in idle loops
33798 12d             | mod_cnt         res     1         ' Used in idle loops
33798 12d             |                 fit     $1F0
33798 12d             |                 org     $200
33798 200             | hlut_start
33798 200             | 
33798 200             | '------------------------------------------------------------------------------
33798 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
33798 200             | ' settings to startup defaults.
33798 200             | '------------------------------------------------------------------------------
33798 200             | ' On entry:
33798 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
33798 200             | '------------------------------------------------------------------------------
33798 200             | set_speed_full
33798 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3379c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
337a0 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
337a4 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
337a8 204             | '                ret                             wcz     ' Restore caller flags on exit
337a8 204             | 
337a8 204             | '------------------------------------------------------------------------------
337a8 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
337a8 204             | ' is a downstream hub connected (not yet implemented), the baud generator
337a8 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
337a8 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
337a8 204             | ' putting the smart pins into reset.
337a8 204             | '------------------------------------------------------------------------------
337a8 204             | ' On entry:
337a8 204             | ' On exit: CZ flags restored to caller states
337a8 204             | '------------------------------------------------------------------------------
337a8 204             | set_speed_low
337a8 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
337ac 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
337b0 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
337b4 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
337b8 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
337bc 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
337c0 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
337c4 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
337c8 20c             | 
337c8 20c             | '------------------------------------------------------------------------------
337c8 20c             | ' Perform configuration stuff required when a device intitially connects.
337c8 20c             | '------------------------------------------------------------------------------
337c8 20c             | ' On entry:
337c8 20c             | ' On exit:
337c8 20c             | '------------------------------------------------------------------------------
337c8 20c             | on_connect
337c8 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
337cc 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
337d0 20e             | .retry
337d0 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
337d4 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
337d8 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
337dc 211 00 08 00 FF 
337e0 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
337e4 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
337e8 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
337ec 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
337f0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
337f4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
337f8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
337fc 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
33800 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
33804 21b 4C 03 B0 FD |                 call    #poll_waitx
33808 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3380c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
33810 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
33814 21f B8 FF 9F FD |                 jmp     #.retry
33818 220             | .get_dev_desc
33818 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3381c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
33820 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
33824 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
33828 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3382c 225 88 FB BF FD |                 call    #reset
33830 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
33834 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
33838 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3383c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
33840 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33844 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
33848 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3384c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
33850 22e 04 00 00 FF 
33854 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
33858 230 34 FA BF FD |                 call    #calc_crc5
3385c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
33860 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
33864 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
33868 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3386c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
33870 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
33874 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33878 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3387c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
33880 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
33884 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
33888 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3388c 23d C4 02 B0 FD |                 call    #poll_waitx
33890 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
33894 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
33898 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3389c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
338a0 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
338a4 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
338a8 244 2D 00 64 5D |         if_nz   ret
338ac 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
338b0 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
338b4 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
338b8 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
338bc 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
338c0 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
338c4 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
338c8 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
338cc 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
338d0 24e 2C FB 9F CD |         if_b    jmp     #host_error
338d4 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
338d8 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
338dc 251 2D EC 63 FD |                 call    pa
338e0 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
338e4 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
338e8 254 2C EC 63 FD |                 jmp     pa
338ec 255             | 
338ec 255             | '------------------------------------------------------------------------------
338ec 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
338ec 255             | ' Status reporting is always in the function-to-host direction.
338ec 255             | '------------------------------------------------------------------------------
338ec 255             | ' On entry:
338ec 255             | '   PTRA - start address of the SETUP data in hub.
338ec 255             | '   PB - start address of the buffer/struct to be written to during the IN data
338ec 255             | '     stage.
338ec 255             | '   ep_addr_pid - device address, endpoint and CRC5.
338ec 255             | ' On exit:
338ec 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
338ec 255             | '     contains the count of data stage bytes actually received, which must
338ec 255             | '     always be <= the count requested.
338ec 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
338ec 255             | '     more specific USB operation error code.
338ec 255             | '------------------------------------------------------------------------------
338ec 255             | control_read
338ec 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
338f0 256 F8 8F 03 F6 |                 mov     hpar2, ptra
338f4 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
338f8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
338fc 259             | .xfer_start
338fc 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
33900 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
33904 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33908 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3390c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
33910 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
33914 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
33918 260 61 00 00 FF 
3391c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
33920 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
33924 263             | .data
33924 263 56 B1 02 F6 |                 mov     pkt_data, total_data
33928 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3392c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
33930 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
33934 267             | .nak_retry
33934 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
33938 268             | .in_retry
33938 268 BC F6 BF FD |                 call    #txn_in
3393c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
33940 26a 28 00 90 AD |         if_z    jmp     #.commit
33944 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
33948 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3394c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
33950 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
33954 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
33958 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3395c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
33960 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33964 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
33968 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3396c 275             | .commit
3396c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
33970 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
33974 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
33978 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3397c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
33980 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
33984 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
33988 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3398c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
33990 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
33994 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
33998 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3399c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
339a0 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
339a4 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
339a8 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
339ac 285             | .pre_status
339ac 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
339b0 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
339b4 287 00 B0 06 F6 |                 mov     pkt_data, #0
339b8 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
339bc 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
339c0 28a 61 00 00 FF 
339c4 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
339c8 28c             | .out_retry
339c8 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
339cc 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
339d0 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
339d4 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
339d8 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
339dc 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
339e0 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
339e4 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
339e8 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
339ec 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
339f0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
339f4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
339f4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
339f4 297             | ' ControlRead() transfer gets things unstuck most of the time...
339f4 297             | .xfer_retry
339f4 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
339f8 298 58 01 B0 FD |                 call    #poll_waitx
339fc 299 8C F9 BF FD |                 call    #wait_txn_ok
33a00 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
33a04 29b C7 F1 03 F6 |                 mov     ptra, hpar2
33a08 29c C8 EF 03 F6 |                 mov     pb, hpar3
33a0c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
33a10 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
33a14 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
33a18 2a0             | 
33a18 2a0             | '------------------------------------------------------------------------------
33a18 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
33a18 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
33a18 2a0             | ' the SETUP data struct is filled with the required values.
33a18 2a0             | '------------------------------------------------------------------------------
33a18 2a0             | ' On entry:
33a18 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
33a18 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
33a18 2a0             | '     stage.
33a18 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
33a18 2a0             | ' On exit:
33a18 2a0             | '   retval - used to convey the success/failure of each stage.
33a18 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
33a18 2a0             | '     more specific USB operation error code.
33a18 2a0             | '------------------------------------------------------------------------------
33a18 2a0             | control_write
33a18 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
33a1c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
33a20 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
33a24 2a3             | 
33a24 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
33a28 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
33a2c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
33a30 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
33a34 2a7             | .xfer_start
33a34 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
33a38 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
33a3c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
33a40 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33a44 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
33a48 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
33a4c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
33a50 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
33a54 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
33a58 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
33a5c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
33a60 2b2             | .data
33a60 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
33a64 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
33a68 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
33a6c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
33a70 2b6             | .out_retry
33a70 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
33a74 2b7 88 F6 BF FD |                 call    #txn_out
33a78 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33a7c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
33a80 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
33a84 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
33a88 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
33a8c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
33a90 2be             | .commit
33a90 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
33a94 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
33a98 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
33a9c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
33aa0 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
33aa4 2c3             | pre_status_in
33aa4 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
33aa8 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
33aac 2c5             | .status_retry
33aac 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
33ab0 2c6 44 F5 BF FD |                 call    #txn_in
33ab4 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
33ab8 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
33abc 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
33ac0 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
33ac4 2cb 2D 00 64 AD |         if_z    ret
33ac8 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
33acc 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33ad0 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
33ad4 2cf             | '               ret                                     ' Caller must handle transfer retirement
33ad4 2cf             | 
33ad4 2cf             | '------------------------------------------------------------------------------
33ad4 2cf             | ' Execute an IN interrupt transaction.
33ad4 2cf             | '------------------------------------------------------------------------------
33ad4 2cf             | ' On entry:
33ad4 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
33ad4 2cf             | '   hpar2 - Address of the IN data buffer
33ad4 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
33ad4 2cf             | ' On exit:
33ad4 2cf             | '   retval - the result of the operation.
33ad4 2cf             | '   hpar3 - the count of IN data bytes actually received.
33ad4 2cf             | '------------------------------------------------------------------------------
33ad4 2cf             | do_int_in
33ad4 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
33ad8 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
33adc 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
33ae0 2d2             | 
33ae0 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
33ae4 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
33ae8 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
33aec 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
33af0 2d6             | .retry
33af0 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
33af4 2d7 00 F5 BF FD |                 call    #txn_in
33af8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
33afc 2d9 1C 00 90 AD |         if_z    jmp     #.commit
33b00 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
33b04 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
33b08 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
33b0c 2dd 54 00 B0 FD |                 call    #retry_wait
33b10 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33b14 2df 18 00 90 AD |         if_z    jmp     #.post_ret
33b18 2e0 D4 FF 9F FD |                 jmp     #.retry
33b1c 2e1             | .commit
33b1c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
33b20 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
33b24 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
33b28 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
33b2c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
33b30 2e6             | .post_ret
33b30 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
33b34 2e7             | 
33b34 2e7             | 
33b34 2e7             | '------------------------------------------------------------------------------
33b34 2e7             | ' Resets the downstream hub port to FS
33b34 2e7             | '------------------------------------------------------------------------------
33b34 2e7             | dwnstream_reset
33b34 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
33b38 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
33b3c 2e9             | 
33b3c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
33b40 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
33b44 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
33b48 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
33b4c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
33b50 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
33b54 2ef             | 
33b54 2ef             | '------------------------------------------------------------------------------
33b54 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
33b54 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
33b54 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
33b54 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
33b54 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
33b54 2ef             | '------------------------------------------------------------------------------
33b54 2ef             | ' On entry:
33b54 2ef             | '   hctwait - wait interval in sysclocks.
33b54 2ef             | ' On exit:
33b54 2ef             | '------------------------------------------------------------------------------
33b54 2ef             | poll_waitx
33b54 2ef 1A 92 63 FD |                 getct   hct2
33b58 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
33b5c 2f1             | .wait
33b5c 2f1 FF 25 CC FB |                 jnct2   #.wait
33b60 2f2 2D 00 64 FD |                 ret
33b64 2f3             | 
33b64 2f3             | '------------------------------------------------------------------------------
33b64 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
33b64 2f3             | '------------------------------------------------------------------------------
33b64 2f3             | ' On entry:
33b64 2f3             | '   retval - transaction response PID or error code.
33b64 2f3             | ' On exit:
33b64 2f3             | '------------------------------------------------------------------------------
33b64 2f3             | retry_wait
33b64 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
33b68 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
33b6c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
33b70 2f6 14 00 90 AD |         if_z    jmp     #.nak
33b74 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
33b78 2f8 D8 FF BF FD |                 call    #poll_waitx
33b7c 2f9             | .dec
33b7c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
33b80 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
33b84 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
33b88 2fc             | .nak
33b88 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
33b8c 2fd C4 FF BF FD |                 call    #poll_waitx
33b90 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
33b94 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
33b98 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
33b9c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
33ba0 302 2D 00 64 FD |                 ret
33ba4 303             | 
33ba4 303             | host_reset
33ba4 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
33ba8 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
33bac 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
33bac 305 BD 01 05 FF 
33bb0 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
33bb4 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
33bb8 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
33bbc 309             | ' Check to see if the system clock has been changed.
33bbc 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
33bc0 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
33bc4 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
33bc8 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
33bcc 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33bd0 30e 40 46 62 FD |                 dirl    dp
33bd4 30f             | 
33bd4 30f 28 02 64 FD |                 setq    #1
33bd8 310 80 00 80 FF 
33bdc 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
33be0 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
33be4 313             | .enable
33be4 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
33be8 314 41 46 62 FD |                 dirh    dp
33bec 315 1F 36 63 FD |                 waitx   _1us_
33bf0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33bf4 317             | 
33bf4 317             |                 ' Handle Port protection enable and startup delay
33bf4 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
33bf8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
33bfc 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
33c00 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
33c04 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
33c08 31c             | 
33c08 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
33c0c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
33c10 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
33c14 31f 00 00 04 F6 |                 mov     0-0, #0
33c18 320             | .regloop
33c18 320             | 
33c18 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
33c18 320             | 
33c18 320             | discon_entry
33c18 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
33c1c 321             | 
33c1c 321             |               
33c1c 321             |         if HAVE_HIDPAD
33c1c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
33c20 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
33c24 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
33c28 324 F7 01 68 FC |                 wrlong  #0,pb
33c2c 325             |         end
33c2c 325             |         if EMUPAD_MAX_PLAYER > 0
33c2c 325             |         end
33c2c 325             | 
33c2c 325             |                 ' Fall through to disconnected loop
33c2c 325             | 
33c2c 325             | '-----------------------------------------------------------------------------------------------------------------
33c2c 325             | ' Device connect handling (Section 7.1.7.3).
33c2c 325             | '-----------------------------------------------------------------------------------------------------------------
33c2c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
33c2c 325             | ' device to connect (Section 7.1.7.3).
33c2c 325             | '-----------------------------------------------------------------------------------------------------------------
33c2c 325             | disconnected
33c2c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
33c30 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
33c34 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
33c38 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
33c3c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
33c40 32a             |         if ACTIVITY_LED >= 0
33c40 32a             |         end
33c40 32a 22 A7 82 FA |                 rqpin   urx, dm
33c44 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
33c48 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
33c4c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
33c50 32e             | .se1_test
33c50 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
33c54 32f FC FE BF FD |                 call    #poll_waitx
33c58 330 22 A7 82 FA |                 rqpin   urx, dm
33c5c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
33c60 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
33c64 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
33c68 334             | .se1            'SE1 is a fatal error condition
33c68 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
33c6c 335 E4 FE BF FD |                 call    #poll_waitx
33c70 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
33c74 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
33c78 338             | .connect_test                                           ' Test lines until stable J/K state seen
33c78 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
33c7c 339 22 A7 82 FA |                 rqpin   urx, dm
33c80 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
33c84 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
33c88 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
33c8c 33d             | connected
33c8c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
33c90 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
33c94 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
33c98 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
33c9c 341             | .set_pulse
33c9c 341 1A 64 63 FD |                 getct   _pulse_time_
33ca0 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
33ca4 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
33ca4 343             | ' of 1ms and make a correction, if necessary.
33ca4 343             | '                mov     htmp, _1ms_
33ca4 343             | '                subs    htmp, iframe_delta
33ca4 343             | '                adds    _frame1ms_clks_, htmp
33ca4 343             | '                debug(udec(_frame1ms_clks_))
33ca4 343             | 
33ca4 343             |                 ' Fall through to idle/processing loop
33ca4 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
33ca8 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
33cac 345             | 
33cac 345             | hidle
33cac 345 22 A7 82 FA |                 rqpin   urx, dm
33cb0 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
33cb4 347 98 00 90 CD |         if_c    jmp     #.se0_test
33cb8 348 24 06 70 FD |                 pollct3                         wc
33cbc 349 68 00 90 3D |         if_nc   jmp     #.nopoll
33cc0 34a 1A 94 63 FD |                 getct   hct3
33cc4 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
33cc8 34c             | 
33cc8 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
33ccc 34d 00 70 E3 F8 |                 getbyte htmp
33cd0 34e             | 
33cd0 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
33cd4 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
33cd8 350 40 00 90 AD |         if_z    jmp     #.poll
33cdc 351             | 
33cdc 351             |         if _HAVE_GAMEPAD
33cdc 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
33ce0 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
33ce4 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
33ce8 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
33cec 355 2C 00 90 AD |         if_z    jmp     #.poll
33cf0 356             |         end
33cf0 356             | 
33cf0 356             |         if HAVE_MOUSE
33cf0 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
33cf4 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
33cf8 358 20 00 90 AD |         if_z    jmp     #.poll
33cfc 359             |         end
33cfc 359             | 
33cfc 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
33d00 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
33d04 35b 14 00 90 AD |         if_z    jmp     #.poll
33d08 35c             | 
33d08 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
33d0c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
33d10 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
33d14 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
33d18 360             |         if HAVE_MOUSE
33d18 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
33d1c 361             |         else
33d1c 361             |         end
33d1c 361             | 
33d1c 361             | .poll
33d1c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
33d20 362 2D EC 63 FD |                 call    pa
33d24 363             | .skip_poll
33d24 363             | 
33d24 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
33d28 364             | 
33d28 364             | .nopoll
33d28 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
33d2c 365 44 00 90 AD |         if_z    jmp     #hsuspend
33d30 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
33d34 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
33d38 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
33d3c 369 1A 84 63 FD |                 getct   hr0
33d40 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
33d44 36b             |         if ACTIVITY_LED >= 0
33d44 36b             |         end
33d44 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
33d48 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
33d4c 36d 5C FF 9F FD |                 jmp     #hidle
33d50 36e             | ' Check for extended SE0 state on the bus
33d50 36e             | .se0_test
33d50 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
33d54 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
33d58 370 22 A7 82 FA |                 rqpin   urx, dm
33d5c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
33d60 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
33d64 373 24 F6 BF FD |                 call    #wait_txn_ok
33d68 374 00 00 80 FF 
33d6c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
33d70 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
33d70 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
33d74 377             | 
33d74 377             | hsuspend
33d74 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
33d78 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
33d7c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
33d80 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
33d84 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
33d88 37c 00 96 07 F6 |                 mov     mod_cnt, #0
33d8c 37d             | 
33d8c 37d             |                 ' Fall through to resume wait loop
33d8c 37d             | 
33d8c 37d             | hwait_resume
33d8c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
33d90 37e 02 86 47 F0 |                 shr     hr1, #2
33d94 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
33d98 380             |         if ACTIVITY_LED >= 0
33d98 380             |         end
33d98 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
33d9c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
33da0 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
33da4 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
33da8 384 18 00 90 AD |         if_z    jmp     #.resume
33dac 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
33db0 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
33db4 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
33db8 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
33dbc 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
33dc0 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
33dc4 38b             | .resume
33dc4 38b 22 05 28 FC |                 wypin   #OUT_K, dm
33dc8 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
33dcc 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
33dd0 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
33dd4 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
33dd8 390 1F 70 63 FD |                 waitx   htmp
33ddc 391 22 07 28 FC |                 wypin   #OUT_J, dm
33de0 392 01 70 47 F0 |                 shr     htmp, #1
33de4 393 1F 70 63 FD |                 waitx   htmp
33de8 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33dec 395 1A 92 62 FD |                 getct   iframe_ct_base
33df0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33df4 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33df8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
33dfc 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
33e00 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
33e04 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
33e08 39c             | 
33e08 39c             | '------------------------------------------------------------------------------
33e08 39c             | ' Send preamble to enable low-speed HUB ports
33e08 39c             | '------------------------------------------------------------------------------
33e08 39c             | ' On entry:
33e08 39c             | ' On exit:
33e08 39c             | '   USB baud rate set to low-speed
33e08 39c             | '------------------------------------------------------------------------------
33e08 39c             | utx_pre
33e08 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33e0c 39d 40 46 62 FD |                 dirl    dp
33e10 39e 28 02 64 FD |                 setq    #1
33e14 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
33e18 3a0 58 44 62 FD |                 drvl    dm
33e1c 3a1 59 46 62 FD |                 drvh    dp
33e20 3a2             | 
33e20 3a2 1E 00 00 FF 
33e24 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
33e28 3a4             | 
33e28 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
33e2c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
33e30 3a6 28 02 64 3D |         if_nc   setq    #1
33e34 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
33e38 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
33e3c 3a9             | .l1
33e3c 3a9             | 
33e3c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33e40 3aa 40 46 62 FD |                 dirl    dp
33e44 3ab 28 02 64 FD |                 setq    #1
33e48 3ac 80 00 80 FF 
33e4c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
33e50 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
33e54 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
33e58 3b0 41 46 62 FD |                 dirh    dp
33e5c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33e60 3b2             | 
33e60 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
33e64 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
33e68 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
33e6c 3b5             | 
33e6c 3b5             | hlut_end
33e6c 3b5             |                 fit     $400
33e6c 3b5             |                 orgh
33e6c                 | if OVERLAP_MEMORY
33e6c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
33e6c                 | end
33e6c                 | '------------------------------------------------------------------------------
33e6c                 | ' Routines called from cog space.
33e6c                 | '------------------------------------------------------------------------------
33e6c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
33e6c                 | '------------------------------------------------------------------------------
33e6c                 | 
33e6c                 | '------------------------------------------------------------------------------
33e6c                 | ' USB host cog initialization.
33e6c                 | '------------------------------------------------------------------------------
33e6c                 | usb_host_init
33e6c                 |                 ' Initialize buffer pointers
33e6c                 |         if OVERLAP_MEMORY
33e6c                 |         else
33e6c     40 15 B0 FE |                 loc     pb, #hid_descr
33e70                 |         end
33e70     F7 4B 02 F6 |                 mov     hid_descr_p, pb
33e74                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
33e74                 |                 {
33e74                 |                 }
33e74                 |         
33e74                 |                 {
33e74                 |                 }
33e74                 |                 'loc     pb,#hkbd_report
33e74                 |                 'mov     hkbd_report_p,pb
33e74                 | 
33e74     08 1D B0 FE |                 loc     pb, #hub_descr
33e78     F7 4D 02 F6 |                 mov     hub_descr_p, pb
33e7c     1D 1D B0 FE |                 loc     pb, #urx_buff
33e80     F7 4F 02 F6 |                 mov     urx_buff_p, pb
33e84     95 1D B0 FE |                 loc     pb, #dev_desc_buff
33e88     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
33e8c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
33e90     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
33e94     18 15 B0 FE |                 loc     pb, #usb_cache_start
33e98     F7 55 02 F6 |                 mov     cache_start_p, pb
33e9c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
33ea0     F7 57 02 F6 |                 mov     cache_end_p, pb
33ea4                 | 
33ea4                 |         if ERROR_LED >= 0
33ea4                 |         end
33ea4                 | 
33ea4                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
33ea4                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
33ea4                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
33ea4                 | ' Configure and enable the Serial Host USB port.
33ea4     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
33ea8                 | 
33ea8                 | '------------------------------------------------------------------------------
33ea8                 | ' Timing calculations happen before any interrupt(s) are enabled.
33ea8                 | '------------------------------------------------------------------------------
33ea8                 | ' On entry:
33ea8                 | '   htmp - current CLKFREQ value.
33ea8                 | '------------------------------------------------------------------------------
33ea8                 | hinit_usb_timings
33ea8                 | '                getct   htmp2
33ea8     B8 59 02 F6 |                 mov     save_sysclk, htmp
33eac     8D 5B 80 FF 
33eb0     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
33eb4     18 30 63 FD |                 getqx   _12Mbps_
33eb8     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
33ebc     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
33ec0     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
33ec4     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
33ec8     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
33ecc     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
33ed0     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
33ed4     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
33ed8     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
33edc     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
33ee0     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
33ee4     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
33ee8     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
33eec     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
33ef0     80 00 00 FF 
33ef4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
33ef8     18 2C 63 FD |                 getqx   _var_64_lower_
33efc     19 2E 63 FD |                 getqy   _var_64_upper_
33f00     28 2C 63 FD |                 setq    _var_64_lower_
33f04     65 CD 1D FF 
33f08     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
33f0c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
33f10     01 00 00 FF 
33f14     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
33f18     18 2C 63 FD |                 getqx   _var_64_lower_
33f1c     19 2E 63 FD |                 getqy   _var_64_upper_
33f20     28 2C 63 FD |                 setq    _var_64_lower_
33f24     A1 07 00 FF 
33f28     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
33f2c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
33f30     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
33f34     09 36 57 F0 |                 shr     _1us_, #9               wc
33f38     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
33f3c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
33f40     18 38 63 FD |                 getqx   _10us_
33f44     09 38 57 F0 |                 shr     _10us_, #9              wc
33f48     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
33f4c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
33f50     18 3A 63 FD |                 getqx   _33us_
33f54     09 3A 57 F0 |                 shr     _33us_, #9              wc
33f58     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
33f5c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
33f60     18 3C 63 FD |                 getqx   _txn_err_
33f64     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
33f68     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
33f6c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
33f70     18 3E 63 FD |                 getqx   _500us_
33f74     09 3E 57 F0 |                 shr     _500us_, #9             wc
33f78     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
33f7c     01 00 00 FF 
33f80     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
33f84     18 40 63 FD |                 getqx   _txn_ok_ls_
33f88     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
33f8c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
33f90     01 00 00 FF 
33f94     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
33f98     18 42 63 FD |                 getqx   _txn_ok_fs_
33f9c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
33fa0     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
33fa4     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
33fa8     05 00 00 FF 
33fac     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
33fb0     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
33fb4     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
33fb8     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
33fbc     1C 00 00 FF 
33fc0     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
33fc4     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
33fc8     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
33fcc     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
33fd0     00 00 00 FF 
33fd4     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
33fd8     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
33fdc     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
33fe0     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
33fe4     04 00 00 FF 
33fe8     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
33fec     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
33ff0     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
33ff4     8D 5B 00 FF 
33ff8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
33ffc     18 4C 63 FD |                 getqx   _preamble_wait_
34000     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
34004     01 00 00 FF 
34008     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3400c     18 2C 63 FD |                 getqx   _var_64_lower_
34010     19 2E 63 FD |                 getqy   _var_64_upper_
34014     28 2C 63 FD |                 setq    _var_64_lower_
34018     01 00 00 FF 
3401c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
34020     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
34024     09 4E 57 F0 |                 shr     _1ms_, #9               wc
34028     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3402c     FF FF 7F FF 
34030     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
34034     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
34038     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3403c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
34040     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
34044     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
34048     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3404c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
34050     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
34054     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
34058     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3405c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
34060     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
34064     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
34068     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3406c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
34070     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
34074     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
34078     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3407c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
34080     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
34084     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
34088     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3408c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
34090     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
34094     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
34098     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3409c                 | '        _ret_   mov     _1sec_, save_sysclk
3409c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3409c                 | '                ret
3409c                 | {
3409c                 | }
3409c                 | 
3409c                 | '------------------------------------------------------------------------------
3409c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3409c                 | ' one. If it is, start the task progression that will configure the device for
3409c                 | ' use.
3409c                 | '------------------------------------------------------------------------------
3409c                 | ' On entry:
3409c                 | '   hconfig_base - start address of the cached config descriptor chain.
3409c                 | ' On exit:
3409c                 | '------------------------------------------------------------------------------
3409c                 | hparse_con_desc
3409c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
340a0     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
340a4     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
340a8     4E 70 FF F9 |                 movbyts htmp,#%%1032
340ac     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
340b0                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
340b0                 | 
340b0     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
340b4     6E ED 03 F1 |                 add     pa, hconfig_base
340b8     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
340bc                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
340bc                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
340bc                 | ' that defines a keyboard and/or mouse.
340bc     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
340c0                 | .next_intf
340c0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
340c4     BC 01 90 3D |         if_ae   jmp     #hset_config
340c8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
340cc     75 F3 03 F1 |                 add     ptrb, hnext_desc
340d0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
340d4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
340d8     0C 00 90 AD |         if_z    jmp     #.intf
340dc     80 71 C7 FA |                 rdbyte  htmp, ptrb
340e0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
340e4     D8 FF 9F FD |                 jmp     #.next_intf
340e8                 | .intf
340e8     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
340ec     00 90 07 F6 |                 mov     hpar3, #0
340f0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
340f4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
340f8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
340fc     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
34100                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
34100                 | 
34100                 | .endp
34100     80 71 C7 FA |                 rdbyte  htmp, ptrb
34104     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
34108     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3410c     78 00 90 3D |         if_ae   jmp     #.get_device
34110     6E F3 03 F6 |                 mov     ptrb, hconfig_base
34114     75 F3 03 F1 |                 add     ptrb, hnext_desc
34118     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3411c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
34120     64 00 90 AD |         if_z    jmp     #.get_device
34124     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
34128     04 00 90 AD |         if_z    jmp     #.get_ep
3412c     D0 FF 9F FD |                 jmp     #.endp
34130                 | .get_ep
34130     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
34134     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
34138     0F 86 67 F0 |                 shl     hr1, #8 + 7
3413c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
34140     3F 00 00 FF 
34144     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
34148     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3414c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
34150     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
34154     00 90 0F F2 |                 cmp     hpar3, #0               wz
34158     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3415c     A0 FF 9F FD |                 jmp     #.endp
34160                 | .in_ep
34160     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
34164     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
34168                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
34168     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3416c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
34170     8C FF 9F FD |                 jmp     #.endp
34174                 | .out_ep
34174     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
34178     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3417c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3417c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
34180     C2 8B DB F8 |                 setbyte hr3, hr0, #3
34184     78 FF 9F FD |                 jmp     #.endp
34188                 | 
34188                 | .get_device
34188     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3418c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
34190     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
34194     68 00 90 AD |         if_z    jmp     #.gamepad
34198     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3419c     AC 00 90 AD |         if_z    jmp     #.hub
341a0     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
341a4     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
341a8     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
341ac     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
341b0     4C 00 90 AD |         if_z    jmp     #.gamepad
341b4     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
341b8     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
341bc                 | .keyboard
341bc     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
341c0                 |         if HAVE_MOUSE
341c0     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
341c4                 |         else
341c4                 |         end
341c4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
341c8     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
341cc     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
341d0     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
341d4     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
341d8     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
341dc                 |                 'debug(udec(kb_intf_num))
341dc                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
341dc     E0 FE 9F FD |                 jmp     #.next_intf
341e0                 | if HAVE_MOUSE
341e0                 | .mouse
341e0     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
341e4     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
341e8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
341ec     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
341f0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
341f4                 |                 'getbyte ms_interval, hr2, #3
341f4     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
341f8     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
341fc                 |                 'debug(udec(kb_intf_num))
341fc                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
341fc     C0 FE 9F FD |                 jmp     #.next_intf
34200                 | end
34200                 | .gamepad
34200     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
34204     C7 71 63 F5 |                 xor     htmp, hpar2
34208     3F 00 00 FF 
3420c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34210     AC FE 9F AD |         if_z    jmp     #.next_intf
34214                 |         if HAVE_MOUSE
34214     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
34218     C7 71 63 F5 |                 xor     htmp, hpar2
3421c     3F 00 00 FF 
34220     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34224     98 FE 9F AD |         if_z    jmp     #.next_intf
34228                 |         end
34228     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3422c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
34230     8C FE 9F 5D |         if_nz   jmp     #.next_intf
34234                 | 
34234     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
34238     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3423c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34240     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
34244     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
34248                 |                 'debug(udec(gp_intf_num))
34248                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
34248     74 FE 9F FD |                 jmp     #.next_intf
3424c                 | .hub
3424c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
34250     6C FE 9F 5D |         if_nz   jmp     #.next_intf
34254     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
34258     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3425c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
34260     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
34264     58 FE 9F 5D |         if_nz   jmp     #.next_intf
34268     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3426c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
34270     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
34274     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34278     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3427c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
34280                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
34280     3C FE 9F FD |                 jmp     #.next_intf
34284                 | 
34284                 | '------------------------------------------------------------------------------
34284                 | ' If a newly-connected device is recognized, do whatever is needed to configure
34284                 | ' it according to its function, or functions. In the case of this boot protocol
34284                 | ' keyboard/mouse class driver:
34284                 | ' - SetConfiguration(config_num)
34284                 | ' - SetProtocol(boot)
34284                 | ' - SetIdle(indefinite)
34284                 | ' - Enter the device interrupt IN polling task stage.
34284                 | '------------------------------------------------------------------------------
34284                 | ' On entry:
34284                 | ' On exit:
34284                 | '------------------------------------------------------------------------------
34284                 | hset_config
34284                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
34284                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
34284     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
34288     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3428c     00 00 0C F2 |                 cmp     0-0, #0                 wz
34290     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
34294                 |         if HAVE_MOUSE
34294     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
34298                 |         end
34298     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3429c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
342a0                 | .set_config
342a0     6C 0E D0 FE |                 loc     ptra, #set_config
342a4     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
342a8     6E ED 03 F1 |                 add     pa, hconfig_base
342ac     F6 8D C3 FA |                 rdbyte  hpar1, pa
342b0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
342b4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
342b8     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
342bc     A0 02 A0 FD |                 call    #control_write
342c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
342c4     2D 00 64 5D |         if_nz   ret
342c8                 | .kbd_config
342c8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
342cc     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
342d0                 | 
342d0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
342d4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
342d8     3F 00 00 FF 
342dc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
342e0     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
342e4                 | 
342e4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
342e8     34 0E D0 FE |                 loc     ptra, #set_protocol
342ec     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
342f0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
342f4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
342f8     A0 02 A0 FD |                 call    #control_write
342fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34300     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
34304     E4 02 90 5D |         if_nz   jmp     #.notify_client
34308     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3430c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
34310     30 03 B0 FD |                 call    #hset_idle
34314                 |                 'cmp     retval, #PID_ACK        wz
34314                 |         'if_nz   mov     hkbd_ep_addr, #0
34314                 |         'if_nz   jmp     #.notify_client
34314     A8 99 02 F6 |                 mov     hctwait, _2ms_
34318     EF 02 A0 FD |                 call    #poll_waitx
3431c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
34320     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
34324     90 17 90 FE |                 loc     pa, #hkbd_led_rep
34328     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3432c     2C 03 B0 FD |                 call    #hset_kbdled_report
34330     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34334     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
34338     B0 02 90 5D |         if_nz   jmp     #.notify_client
3433c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
34340     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34344     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34348     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3434c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
34350     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
34354     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
34358     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3435c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
34360     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
34364     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
34368                 |         if !!HAVE_MOUSE
34368                 |         end
34368                 | 
34368                 | .mouse_config
34368                 | if HAVE_MOUSE
34368     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3436c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
34370     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
34374     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
34378     3F 00 00 FF 
3437c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34380     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
34384                 | 
34384                 |                 debug("mouse passed addr check")
34384                 | 
34384     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
34388     00 00 80 FF 
3438c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
34390     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
34394     1B 01 A0 FD |                 call    #get_hid_descr_buffer
34398     55 02 A0 FD |                 call    #control_read
3439c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
343a0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
343a4     44 02 90 5D |         if_nz   jmp     #.notify_client
343a8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
343ac     56 01 00 F6 |                 mov     0-0, total_data
343b0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
343b4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
343b4                 | 
343b4     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
343b8     64 0D D0 FE |                 loc     ptra, #set_protocol
343bc     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
343c0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
343c4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
343c8     A0 02 A0 FD |                 call    #control_write
343cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
343d0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
343d4     14 02 90 5D |         if_nz   jmp     #.notify_client
343d8                 |                 debug("mouse passed SetProtocol")
343d8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
343dc     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
343e0     60 02 B0 FD |                 call    #hset_idle
343e4                 |                 'cmp     retval, #PID_ACK        wz
343e4                 |         'if_nz   mov     hmouse_ep_addr, #0
343e4                 |         'if_nz   jmp     #.notify_client
343e4                 |                 debug("mouse passed SetIdle")
343e4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
343e8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
343ec     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
343f0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
343f4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
343f8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
343fc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
34400     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
34404     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
34408     3F 00 00 FF 
3440c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
34410     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
34414     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
34418     D0 01 90 FD |                 jmp     #.notify_client
3441c                 | end
3441c                 | .gamepad_config
3441c                 | if _HAVE_GAMEPAD
3441c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34420     00 00 0C F2 |                 cmp     0-0, #0                 wz
34424     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
34428     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3442c     00 70 03 F6 |                 mov     htmp, 0-0
34430     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
34434     3F 00 00 FF 
34438     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3443c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
34440                 | 
34440     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
34444     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
34448     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3444c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34450     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
34454     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34458     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3445c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
34460     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
34464     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34468     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3446c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
34470     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
34474     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
34478                 | 
34478                 |                 if EMUPAD_MAX_PLAYER > 0
34478                 |                 
34478                 | .rule_loop           
34478                 |                 end
34478                 | 
34478     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3447c     5C 00 90 AD |         if_e    jmp     #.xinput
34480     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
34484     00 70 03 F6 |                 mov     htmp,0-0
34488     01 A6 02 FF 
3448c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
34490     7C 00 90 AD |         if_e    jmp     #.ps3
34494                 | 
34494     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
34498     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3449c     00 00 80 5F 
344a0     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
344a4     03 00 80 AF 
344a8     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
344ac     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
344b0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
344b4     55 02 A0 FD |                 call    #control_read
344b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
344bc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
344c0     00 00 04 56 |         if_nz   mov     0-0, #0
344c4     24 01 90 5D |         if_nz   jmp     #.notify_client
344c8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
344cc     56 01 00 F6 |                 mov     0-0, total_data
344d0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
344d4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
344d4                 | 
344d4     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
344d8     10 01 90 FD |                 jmp     #.notify_client
344dc                 | .xinput
344dc     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
344e0     2D EF 03 F6 |                 mov     pb,hdev_port
344e4     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
344e8     03 EE 27 F3 |                 fle     pb,#3
344ec     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
344f0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
344f4                 | 
344f4     03 B0 06 F6 |                 mov     pkt_data, #3
344f8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
344fc     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
34500     5A 00 A0 FD |                 call    #txn_out
34504     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
34508                 | 
34508     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3450c     DC 00 90 FD |                 jmp     #.notify_client
34510                 | .ps3
34510     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
34514     2D EF 03 F6 |                 mov     pb,hdev_port
34518     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3451c     04 EE 27 F3 |                 fle     pb,#4
34520     F7 EF C3 F9 |                 decod   pb
34524     09 EF 47 FC |                 wrbyte  pb, ptra[9]
34528                 | 
34528     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3452c     00 0C D0 FE |                 loc     ptra, #set_report
34530     01 00 80 FF 
34534     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
34538     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3453c     03 61 5C FC |                 wrword  #48, ptra[wLength]
34540     20 0C B0 FE |                 loc     pb, #ps3_command_buff
34544     A0 02 A0 FD |                 call    #control_write
34548                 | 
34548     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3454c     E0 0B D0 FE |                 loc     ptra, #set_report
34550     01 00 80 FF 
34554     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
34558     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3455c     03 09 5C FC |                 wrword  #4, ptra[wLength]
34560     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
34564     A0 02 A0 FD |                 call    #control_write
34568     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3456c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
34570     00 00 04 56 |         if_nz   mov     0-0, #0
34574     74 00 90 5D |         if_nz   jmp     #.notify_client
34578                 | 
34578     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3457c     6C 00 90 FD |                 jmp     #.notify_client
34580                 | end
34580                 | 
34580                 | .hub_config
34580     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
34584     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
34588     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3458c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
34590     3F 00 00 FF 
34594     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34598     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3459c                 | 
3459c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
345a0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
345a4     26 EF 03 F6 |                 mov     pb, hub_descr_p
345a8     55 02 A0 FD |                 call    #control_read
345ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
345b0     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
345b4     34 00 90 5D |         if_nz   jmp     #.notify_client
345b8                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
345b8                 | 
345b8     26 F1 03 F6 |                 mov     ptra, hub_descr_p
345bc     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
345c0     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
345c4                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
345c4                 | .pwr_loop
345c4     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
345c8     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
345cc     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
345d0     A0 02 A0 FD |                 call    #control_write
345d4     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
345d8                 | 
345d8     B1 99 02 F6 |                 mov     hctwait, _500ms_
345dc     B0 99 02 F1 |                 add     hctwait, _100ms_
345e0     EF 02 A0 FD |                 call    #poll_waitx
345e4                 | 
345e4     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
345e8     00 00 90 FD |                 jmp     #.notify_client
345ec                 | 
345ec                 | .notify_client
345ec     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
345f0     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
345f4                 |                 debug(uhex_long(hdev_type,hdev_type+1))
345f4                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
345f4     2D 00 64 FD |                 ret
345f8                 | 
345f8                 | '------------------------------------------------------------------------------
345f8                 | ' Initialize the keyboard/mouse data area to start-up values.
345f8                 | '------------------------------------------------------------------------------
345f8                 | ' On entry:
345f8                 | ' On exit:
345f8                 | '------------------------------------------------------------------------------
345f8                 | init_kbdm_data
345f8     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
345fc     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
34600                 | 
34600     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
34604     2B ED 03 F6 |                 mov     pa, cache_end_p
34608                 | .loop
34608     61 01 4C FC |                 wrbyte  #0, ptra++
3460c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
34610     F4 FF 9F CD |         if_b    jmp     #.loop
34614                 |         
34614                 |         if EMUPAD_MAX_PLAYER > 0
34614                 |         end
34614                 | 
34614                 | 
34614     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
34618                 | .regloop
34618     00 EC 8F F9 |                 altd    pa
3461c     00 00 04 F6 |                 mov     0-0, #0
34620     01 EC 07 F1 |                 add     pa, #1
34624     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
34628     EC FF 9F 5D |         if_nz   jmp     #.regloop
3462c                 | 
3462c     E1 E1 61 FF 
34630     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
34634     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
34638     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3463c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
34640                 | 
34640     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
34644                 | 
34644                 | '------------------------------------------------------------------------------
34644                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
34644                 | ' function.
34644                 | '------------------------------------------------------------------------------
34644                 | ' On entry:
34644                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
34644                 | '   hpar2 - index number of the target interface.
34644                 | ' On exit:
34644                 | '------------------------------------------------------------------------------
34644                 | hset_idle
34644     A8 99 02 F6 |                 mov     hctwait, _2ms_
34648     EF 02 A0 FD |                 call    #poll_waitx
3464c     D8 0A D0 FE |                 loc     ptra, #set_idle
34650     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
34654     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
34658     A0 02 80 FD |                 jmp     #control_write
3465c                 | 
3465c                 | '------------------------------------------------------------------------------
3465c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3465c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3465c                 | '------------------------------------------------------------------------------
3465c                 | ' On entry:
3465c                 | '   ep_addr_pid - device address and enpoint for the request.
3465c                 | ' On exit:
3465c                 | '   retval - transaction result.
3465c                 | '------------------------------------------------------------------------------
3465c                 | hset_kbdled_report
3465c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
34660     CC 0A D0 FE |                 loc     ptra, #set_report
34664     01 00 80 FF 
34668     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3466c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34670     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
34674     27 EF 03 F6 |                 mov     pb, urx_buff_p
34678     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3467c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
34680                 | 
34680                 | '------------------------------------------------------------------------------
34680                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
34680                 | '------------------------------------------------------------------------------
34680                 | ' On entry:
34680                 | ' On exit:
34680                 | '------------------------------------------------------------------------------
34680                 | hget_kbd_in_report
34680     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
34684     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34688     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3468c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
34690     CF 02 A0 FD |                 call    #do_int_in
34694     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34698     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3469c                 | 
3469c     00 90 0F F2 |                 cmp     hpar3, #0               wz
346a0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
346a4                 | 
346a4     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
346a8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
346ac     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
346b0     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
346b4                 | 
346b4     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
346b8     18 00 B0 FD |                 call    #hkbd_compare
346bc                 |         if EMUPAD_MAX_PLAYER > 0
346bc                 |         end
346bc                 | 
346bc                 | .led_check
346bc     3B 71 03 F6 |                 mov     htmp, kb_led_states
346c0     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
346c4     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
346c8     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
346cc     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
346d0     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
346d4                 | 
346d4                 | '------------------------------------------------------------------------------
346d4                 | ' Compare current and previous keyboard data buffers for keypress changes.
346d4                 | '------------------------------------------------------------------------------
346d4                 | hkbd_compare
346d4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
346d8     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
346dc     61 73 07 FB |                 rdlong  htmp1, ptra++
346e0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
346e4     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
346e8     61 73 07 FB |                 rdlong  htmp1, ptra++
346ec     E1 75 07 FB |                 rdlong  htmp2, ptrb++
346f0     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
346f4     2D 00 64 AD |         if_z    ret
346f8                 | 
346f8     B4 13 D0 FE |                 loc     ptra, #hkbd_report
346fc                 | 
346fc                 |                 ' Handle modifiers
346fc     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
34700     00 87 C7 FA |                 rdbyte  hr1, ptra
34704     C7 87 43 F9 |                 rolword hr1,hpar2,#0
34708     63 86 63 FD |                 mergew  hr1
3470c     08 EC 07 F6 |                 mov     pa,#8
34710                 | .modloop
34710     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
34714     E8 8C 07 F6 |                 mov     hpar1,#$E8
34718     F6 8D 83 F1 |                 sub     hpar1,pa
3471c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
34720     FB ED 6F FB |                 djnz    pa,#.modloop
34724                 | 
34724     6F E0 75 FD | .release        modc    _set    wc
34728                 |                 'alts    hdev_port, #hid_report_p
34728                 |                 'mov     ptra, hid_report_p
34728     02 F0 07 F1 |                 add     ptra, #2
3472c     06 EC 07 F6 |                 mov     pa, #6
34730     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
34734     20 00 90 AD |         if_z    jmp     #.rl3
34738     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3473c     02 F2 07 F1 |                 add     ptrb, #2
34740     06 EE 07 F6 |                 mov     pb, #6
34744     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
34748     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3474c     08 00 90 AD |         if_z    jmp     #.rl3
34750     FC EF 6F FB |                 djnz    pb, #.rl2
34754     68 00 B0 FD |                 call    #hkbd_translate
34758     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3475c                 | 
3475c     00 90 07 F6 |                 mov     hpar3, #0
34760     1F 90 27 F4 |                 bith    hpar3, #31
34764                 | 
34764     6F 00 74 FD | .press          modc    _clr    wc
34768     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3476c     02 F0 07 F1 |                 add     ptra, #2
34770     06 EC 07 F6 |                 mov     pa, #6
34774     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
34778     20 00 90 AD |         if_z    jmp     #.pl3
3477c     30 13 F0 FE |                 loc     ptrb, #hkbd_report
34780     02 F2 07 F1 |                 add     ptrb, #2
34784     06 EE 07 F6 |                 mov     pb, #6
34788     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3478c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
34790     08 00 90 AD |         if_z    jmp     #.pl3
34794     FC EF 6F FB |                 djnz    pb, #.pl2
34798     24 00 B0 FD |                 call    #hkbd_translate
3479c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
347a0                 | 
347a0     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
347a4     08 13 F0 FE |                 loc     ptrb, #hkbd_report
347a8     28 02 64 FD |                 setq #1
347ac     61 73 07 FB |                 rdlong  htmp1, ptra++
347b0     28 02 64 FD |                 setq #1
347b4     E1 73 67 FC |                 wrlong  htmp1, ptrb++
347b8     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
347bc                 | 
347bc     2D 00 64 FD |                 ret
347c0                 | 
347c0                 | '------------------------------------------------------------------------------
347c0                 | ' Translate keyboard scancode to ASCII
347c0                 | '------------------------------------------------------------------------------
347c0                 | ' On entry:
347c0                 | '   hpar1 - scancode
347c0                 | '   hpar2 - key modifiers state
347c0                 | '       c - pressed (0) or released (1) flag
347c0                 | ' On exit:
347c0                 | '   hpar1 - bit     31 = 0 pressed, 1 released
347c0                 | '               30..17 = unused
347c0                 | '                   18 = scroll-lock state 
347c0                 | '                   17 = caps-lock state
347c0                 | '                   16 = num-lock state 
347c0                 | '                15..8 = key modifiers state
347c0                 | '                 7..0 = scancode
347c0                 | '------------------------------------------------------------------------------
347c0                 | hkbd_translate
347c0     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
347c4     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
347c8     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
347cc     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
347d0     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
347d4     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
347d8                 | 
347d8                 |         if EMUPAD_MAX_PLAYER > 0
347d8                 | 
347d8                 |         if EMUPAD_BT0_BIT >= 0
347d8                 |         end
347d8                 |         if EMUPAD_BT1_BIT >= 0
347d8                 |         end
347d8                 |         if EMUPAD_BT2_BIT >= 0
347d8                 |         end
347d8                 |         if EMUPAD_BT3_BIT >= 0
347d8                 |         end
347d8                 |         if EMUPAD_BT4_BIT >= 0
347d8                 |         end
347d8                 |         if EMUPAD_BT5_BIT >= 0
347d8                 |         end
347d8                 |         if EMUPAD_BT6_BIT >= 0
347d8                 |         end
347d8                 |         if EMUPAD_BT7_BIT >= 0
347d8                 |         end
347d8                 |         if EMUPAD_BT8_BIT >= 0
347d8                 |         end
347d8                 |         if EMUPAD_BT9_BIT >= 0
347d8                 |         end
347d8                 | 
347d8                 |         end
347d8     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
347dc     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
347e0     1F 8C 47 F4 |                 bitc    hpar1, #31
347e4                 |         if KEYQUEUE_SIZE > 0
347e4     C4 09 B0 FE |                 loc pb,#keyq_head
347e8     F7 71 E3 FA |                 rdword htmp,pb
347ec     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
347f0     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
347f4     B8 75 03 F6 |                 mov htmp2,htmp
347f8     04 74 07 FA |                 mul htmp2,#4
347fc     F7 75 03 F1 |                 add htmp2,pb
34800     02 74 07 F1 |                 add htmp2,#2
34804     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
34808     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3480c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
34810     F7 71 43 5C |         if_nz   wrbyte htmp,pb
34814                 |         end
34814     2D 00 7C FD |                 ret wcz
34818                 | 
34818                 | if HAVE_MOUSE
34818                 | '------------------------------------------------------------------------------
34818                 | ' Execute an IN interrupt transaction to poll for mouse activity.
34818                 | '------------------------------------------------------------------------------
34818                 | ' On entry:
34818                 | ' On exit:
34818                 | '------------------------------------------------------------------------------
34818                 | hget_mouse_in_report
34818     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3481c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34820     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
34824     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
34828     CF 02 A0 FD |                 call    #do_int_in
3482c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34830     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
34834                 | 
34834     00 90 0F F2 |                 cmp     hpar3, #0               wz
34838     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3483c                 | 
3483c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
34840     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
34844     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
34848     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3484c                 | 
3484c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
34850     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
34854     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
34858     01 90 87 31 |         if_ae   sub     hpar3, #1
3485c                 | 
3485c     40 09 90 FE |                 loc     pa, #mouse_limits
34860     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
34864                 | 
34864                 |                 ' load xacc,yacc,zacc
34864     28 04 64 FD |                 setq    #3-1
34868     80 87 07 FB |                 rdlong  hr1,ptrb
3486c                 |                 ' load limits and outptr
3486c     28 04 64 FD |                 setq    #3-1
34870     F6 73 03 FB |                 rdlong  htmp1,pa
34874                 | 
34874     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
34878     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3487c     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
34880     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
34884     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
34888     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3488c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
34890     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
34894                 |               
34894                 | 
34894     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
34898     07 70 67 F7 |                 signx   htmp, #7
3489c     B8 87 03 F1 |                 add     hr1,htmp
348a0     00 72 0F F2 |                 cmp     htmp1,#0 wz
348a4     B9 87 63 53 |         if_ne   fles    hr1,htmp1
348a8     00 86 47 53 |         if_ne   fges    hr1,#0
348ac                 | 
348ac     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
348b0     07 70 67 F7 |                 signx   htmp, #7
348b4     B8 89 03 F1 |                 add     hr2,htmp
348b8     00 74 0F F2 |                 cmp     htmp2,#0 wz
348bc     BA 89 63 53 |         if_ne   fles    hr2,htmp2
348c0     00 88 47 53 |         if_ne   fges    hr2,#0
348c4                 |                 
348c4                 | 
348c4     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
348c8     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
348cc     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
348d0     B8 8B 03 A1 |         if_z    add     hr3,htmp
348d4                 | 
348d4     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
348d8     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
348dc                 | 
348dc                 |                 ' write back accumulators
348dc     28 04 64 FD |                 setq    #3-1
348e0     80 87 67 FC |                 wrlong  hr1,ptrb
348e4                 |                 ' if outptr set, write X/Y words
348e4     00 76 0F F2 |                 cmp htmp3,#0                    wz
348e8     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
348ec     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
348f0     2D 00 64 FD |                 ret
348f4                 | end
348f4                 | 
348f4                 | '------------------------------------------------------------------------------
348f4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
348f4                 | '------------------------------------------------------------------------------
348f4                 | ' On entry:
348f4                 | ' On exit:
348f4                 | '------------------------------------------------------------------------------
348f4                 | if _HAVE_GAMEPAD
348f4                 | hget_gp_in_report
348f4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
348f8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
348fc                 | 
348fc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34900     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
34904     00 90 E3 F8 |                 getbyte hpar3
34908     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3490c     CF 02 A0 FD |                 call    #do_int_in
34910     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34914     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
34918                 | 
34918     00 90 0F F2 |                 cmp     hpar3, #0               wz
3491c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
34920                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
34920                 | 
34920     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
34924     00 70 E3 F8 |                 getbyte htmp                            ' |
34928     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3492c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
34930     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
34934     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
34938     B8 01 C0 F8 |                 setbyte htmp                            ' |
3493c                 | 
3493c                 | ' Note: the following code compares the current and previous reports
3493c                 | ' and process the data if there are changes to ease the debug output.
3493c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3493c                 | ' gpPreReport buffer.
3493c                 | 
3493c                 |                 ' ----- start of block to remove
3493c                 |                 {
3493c                 |                 }
3493c                 |                 ' ----- end of block to remove
3493c     F4 04 90 FE |                 loc pa,#hpad_translate
34940     2A EC 63 FD |                 push pa
34944                 | 
34944                 |                 ' FALL THROUGH !!!!
34944                 | 
34944                 | '------------------------------------------------------------------------------
34944                 | ' Decode controller report
34944                 | '------------------------------------------------------------------------------
34944                 | hid_decode
34944                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
34944     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
34948     00 04 00 FF 
3494c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
34950                 | 
34950     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
34954                 | 
34954     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
34958     00 2A E3 F8 |                 getbyte hidr_type
3495c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
34960     34 02 90 AD |         if_z    jmp     #hpad_xinput
34964     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
34968     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3496c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
34970     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
34974     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
34978                 |                 
34978                 | 
34978                 | '------------------------------------------------------------------------------
34978                 | ' Handle HID controller (or mouse now
34978                 | ' On entry:
34978                 | '   ptrb - controller report
34978                 | '------------------------------------------------------------------------------
34978                 | hpad_hid
34978     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3497c     F7 F1 03 F6 |                 mov     ptra, pb
34980     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
34984     00 EC 03 F6 |                 mov     pa, 0-0
34988                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
34988     19 2A 3B FF 
3498c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
34990                 | 
34990                 | .next
34990     00 EC 5F F2 |                 cmps    pa, #0      wcz
34994     2D 00 7C ED |         if_be   ret     wcz
34998                 | 
34998     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3499c     01 EC 87 F1 |                 sub     pa, #1
349a0     00 8E 07 F6 |                 mov     hpar2, #0
349a4                 | 
349a4     C6 71 03 F6 |                 mov     htmp, hpar1
349a8     03 70 07 F5 |                 and     htmp, #$03
349ac     01 70 0F F2 |                 cmp     htmp, #1    wz
349b0     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
349b4     07 8E 67 A7 |         if_z    signx   hpar2,#7
349b8     01 EC 87 A1 |         if_z    sub     pa, #1
349bc     02 70 0F F2 |                 cmp     htmp, #2    wz
349c0     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
349c4     0F 8E 67 A7 |         if_z    signx   hpar2,#15
349c8     02 EC 87 A1 |         if_z    sub     pa, #2
349cc     03 70 0F F2 |                 cmp     htmp, #3    wz
349d0     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
349d4     04 EC 87 A1 |         if_z    sub     pa, #4
349d8                 | 
349d8     FC 8C 07 F5 |                 and     hpar1, #$FC
349dc                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
349dc                 | 
349dc     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
349e0     0C 01 90 AD |         if_z    jmp     #.report_id
349e4     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
349e8     24 01 90 AD |         if_z    jmp     #.usage_page
349ec     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
349f0     2C 01 90 AD |         if_z    jmp     #.usage
349f4     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
349f8     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
349fc     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
34a00     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
34a04     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
34a08     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
34a0c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
34a10     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
34a14     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
34a18     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
34a1c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
34a20     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
34a24     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
34a28     64 FF 9F 5D |         if_nz   jmp     #.next
34a2c                 | 
34a2c     D8 1D A7 FB |                 tjf     hidr_state,#.next
34a30                 | 
34a30     03 8E 07 F5 |                 and     hpar2, #$03
34a34     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
34a38     18 00 90 5D |         if_nz   jmp     #.skip
34a3c                 | 
34a3c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
34a40     20 00 90 AD |         if_z    jmp     #.axes
34a44     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
34a48     5C 00 90 AD |         if_z    jmp     #.hats
34a4c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
34a50     70 00 90 AD |         if_z    jmp     #.buttons
34a54                 | .skip
34a54     8F 71 03 F6 |                 mov     htmp, hidr_size
34a58     90 71 03 FA |                 mul     htmp, hidr_count
34a5c     B8 23 03 F1 |                 add     hidr_offset, htmp
34a60     2C FF 9F FD |                 jmp     #.next
34a64                 | .axes
34a64                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
34a64     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
34a68     90 87 03 F6 |                 mov     hr1, hidr_count
34a6c                 | .l1
34a6c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
34a70     8F 8F 03 F6 |                 mov     hpar2, hidr_size
34a74     04 03 B0 FD |                 call    #hpad_getbits
34a78     64 03 B0 FD |                 call    #hpad_normalize
34a7c     06 84 1F F2 |                 cmp     hr0, #6         wcz
34a80     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
34a84     00 88 43 C8 |         if_b    getnib  hr2
34a88     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
34a8c     5F 01 20 C9 |         if_b    setword retval
34a90     01 84 07 C1 |         if_b    add     hr0, #1
34a94     8F 23 03 F1 |                 add     hidr_offset, hidr_size
34a98     F4 87 6F FB |                 djnz    hr1, #.l1
34a9c                 | 
34a9c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
34aa0     01 1C 07 F6 |                 mov     hidr_state, #1
34aa4     E8 FE 9F FD |                 jmp     #.next
34aa8                 | .hats
34aa8                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
34aa8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
34aac     8F 8F 03 F6 |                 mov     hpar2, hidr_size
34ab0     C8 02 B0 FD |                 call    #hpad_getbits
34ab4     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
34ab8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
34abc     01 1C 07 F6 |                 mov     hidr_state, #1
34ac0     90 FF 9F FD |                 jmp     #.skip
34ac4                 | .buttons
34ac4                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
34ac4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
34ac8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
34acc     90 8F 03 FA |                 mul     hpar2, hidr_count
34ad0     A8 02 B0 FD |                 call    #hpad_getbits
34ad4     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
34ad8     B8 BF 62 F0 |                 shl     retval, htmp
34adc     5F 17 43 F5 |                 or      hidr_buttons, retval
34ae0     90 71 03 F1 |                 add     htmp, hidr_count
34ae4     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
34ae8     01 1C 07 F6 |                 mov     hidr_state, #1
34aec     64 FF 9F FD |                 jmp     #.skip
34af0                 | .report_id
34af0     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
34af4     2D 00 7C 5D |         if_nz   ret     wcz
34af8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
34afc     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
34b00     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
34b04     01 1C 67 56 |         if_nz   neg     hidr_state,#1
34b08     01 F2 87 51 |         if_nz   sub     ptrb,#1
34b0c     80 FE 9F FD |                 jmp     #.next
34b10                 | .usage_page
34b10     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
34b14     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
34b18     04 1C 07 A6 |         if_z    mov     hidr_state, #4
34b1c     70 FE 9F FD |                 jmp     #.next
34b20                 | .usage
34b20     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
34b24     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
34b28     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
34b2c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
34b30     5C FE 9F AD |         if_z    jmp     #.next
34b34     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
34b38     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
34b3c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
34b40     4C FE 9F AD |         if_z    jmp     #.next
34b44     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
34b48     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
34b4c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
34b50     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
34b54     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
34b58     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
34b5c     10 00 90 AD |         if_z    jmp     #.usage_axis
34b60     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
34b64     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
34b68     03 1C 07 A6 |         if_z    mov     hidr_state, #3
34b6c     20 FE 9F FD |                 jmp     #.next
34b70                 | .usage_axis
34b70     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
34b74     18 FE 9F CD |         if_b    jmp     #.next
34b78     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
34b7c     C7 01 00 F8 |                 setnib  hpar2
34b80                 | 
34b80     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
34b84     C7 8F C3 F9 |                 decod   hpar2
34b88     C7 0F 43 F5 |                 or      hidr_flags, hpar2
34b8c                 | 
34b8c     01 24 07 F1 |                 add     hidr_usage_idx, #1
34b90     02 1C 07 F6 |                 mov     hidr_state, #2
34b94     F8 FD 9F FD |                 jmp     #.next
34b98                 | 
34b98                 | '------------------------------------------------------------------------------
34b98                 | ' Handle XInput controller
34b98                 | ' On entry:
34b98                 | '   ptrb - controller report
34b98                 | '------------------------------------------------------------------------------
34b98                 | '   Default implementation translates the report to a pseudo-defacto hid
34b98                 | '   standard and jumps to hpad_translate for actions.
34b98                 | '   Implementors may take specific actions for this kind of controller.
34b98                 | '------------------------------------------------------------------------------
34b98                 | hpad_xinput
34b98     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
34b9c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
34ba0     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
34ba4     14 70 0F F2 |                 cmp     htmp, #$14      wz
34ba8     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
34bac                 | 
34bac                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
34bac                 | 
34bac     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
34bb0     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
34bb4                 | 
34bb4     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
34bb8     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
34bbc     5F BF 22 F6 |                 not     retval
34bc0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
34bc4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
34bc8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
34bcc     5F BF 22 F6 |                 not     retval
34bd0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
34bd4                 | 
34bd4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
34bd8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
34bdc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
34be0     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
34be4     F8 01 B0 FD |                 call    #hpad_normalize
34be8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
34bec     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
34bf0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
34bf4     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
34bf8     E4 01 B0 FD |                 call    #hpad_normalize
34bfc     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
34c00                 | 
34c00     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
34c04     81 BF E6 FA |                 rdword  retval, ptrb[1]
34c08     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
34c0c     00 16 47 F4 |                 bitc    hidr_buttons, #0
34c10     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
34c14     01 16 47 F4 |                 bitc    hidr_buttons, #1
34c18     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
34c1c     02 16 47 F4 |                 bitc    hidr_buttons, #2
34c20     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
34c24     03 16 47 F4 |                 bitc    hidr_buttons, #3
34c28     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
34c2c     04 16 47 F4 |                 bitc    hidr_buttons, #4
34c30     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
34c34     05 16 47 F4 |                 bitc    hidr_buttons, #5
34c38     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
34c3c     08 16 47 F4 |                 bitc    hidr_buttons, #8
34c40     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
34c44     09 16 47 F4 |                 bitc    hidr_buttons, #9
34c48     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
34c4c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
34c50     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
34c54     0B 16 47 F4 |                 bitc    hidr_buttons, #11
34c58     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
34c5c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
34c60                 | 
34c60     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
34c64     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
34c68     7A BB 7A FF 
34c6c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
34c70     F9 FF 7F FF 
34c74     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
34c78     B9 71 5F F9 |                 altgn   htmp, #htmp1
34c7c     00 70 43 F8 |                 getnib  htmp
34c80     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
34c84                 | 
34c84     AC 01 90 FD |                 jmp     #hpad_translate
34c88                 | 
34c88                 | '------------------------------------------------------------------------------
34c88                 | ' Handle PS3 controller
34c88                 | ' On entry:
34c88                 | '   ptrb - controller report
34c88                 | '------------------------------------------------------------------------------
34c88                 | '   Default implementation translates the report to a pseudo-defacto hid
34c88                 | '   standard and jumps to hpad_translate for actions.
34c88                 | '   Implementors may take specific actions for this kind of controller.
34c88                 | '------------------------------------------------------------------------------
34c88                 | hpad_ps3
34c88     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
34c8c     01 70 0F F2 |                 cmp     htmp, #$01      wz
34c90     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
34c94                 | 
34c94                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
34c94                 | 
34c94     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
34c98     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
34c9c     40 01 B0 FD |                 call    #hpad_normalize
34ca0     5F 11 23 F9 |                 setword hidr_axis, retval, #0
34ca4     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
34ca8     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
34cac     30 01 B0 FD |                 call    #hpad_normalize
34cb0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
34cb4     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
34cb8     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
34cbc     20 01 B0 FD |                 call    #hpad_normalize
34cc0     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
34cc4     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
34cc8     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
34ccc     10 01 B0 FD |                 call    #hpad_normalize
34cd0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
34cd4     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
34cd8     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
34cdc                 | 
34cdc     08 8C 07 F6 |                 mov     hpar1, #8
34ce0     13 8E 07 F6 |                 mov     hpar2, #19
34ce4     94 00 B0 FD |                 call    #hpad_getbits
34ce8                 | 
34ce8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
34cec     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
34cf0     00 16 47 F4 |                 bitc    hidr_buttons, #0
34cf4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
34cf8     01 16 47 F4 |                 bitc    hidr_buttons, #1
34cfc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
34d00     02 16 47 F4 |                 bitc    hidr_buttons, #2
34d04     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
34d08     03 16 47 F4 |                 bitc    hidr_buttons, #3
34d0c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
34d10     04 16 47 F4 |                 bitc    hidr_buttons, #4
34d14     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
34d18     05 16 47 F4 |                 bitc    hidr_buttons, #5
34d1c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
34d20     06 16 47 F4 |                 bitc    hidr_buttons, #6
34d24     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
34d28     07 16 47 F4 |                 bitc    hidr_buttons, #7
34d2c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
34d30     08 16 47 F4 |                 bitc    hidr_buttons, #8
34d34     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
34d38     09 16 47 F4 |                 bitc    hidr_buttons, #9
34d3c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
34d40     0A 16 47 F4 |                 bitc    hidr_buttons, #10
34d44     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
34d48     0B 16 47 F4 |                 bitc    hidr_buttons, #11
34d4c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
34d50     0C 16 47 F4 |                 bitc    hidr_buttons, #12
34d54                 | 
34d54     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
34d58     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
34d5c     09 FA 79 FF 
34d60     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
34d64     FF FA 7F FF 
34d68     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
34d6c     B9 71 5F F9 |                 altgn   htmp, #htmp1
34d70     00 70 43 F8 |                 getnib  htmp
34d74     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
34d78                 | 
34d78     B8 00 90 FD |                 jmp     #hpad_translate
34d7c                 | 
34d7c                 | '------------------------------------------------------------------------------
34d7c                 | ' Read bits from report data buffer
34d7c                 | '------------------------------------------------------------------------------
34d7c                 | ' On entry:
34d7c                 | '   PTRB - report buffer
34d7c                 | '   hpar1 - start bit
34d7c                 | '   hpar2 - number of bits
34d7c                 | ' On exit:
34d7c                 | '   retval - bits
34d7c                 | '------------------------------------------------------------------------------
34d7c                 | hpad_getbits
34d7c     C6 71 03 F6 |                 mov     htmp, hpar1
34d80     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
34d84     F9 71 03 F1 |                 add     htmp, ptrb
34d88     B8 BF 02 FB |                 rdlong  retval, htmp
34d8c                 | 
34d8c     C6 73 03 F6 |                 mov     htmp1, hpar1
34d90     07 72 07 F5 |                 and     htmp1, #$07     ' shift
34d94     B9 BF 42 F0 |                 shr     retval, htmp1
34d98                 | 
34d98     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
34d9c     10 00 90 1D |         if_a    jmp     #.l1
34da0                 | 
34da0     C7 8F C3 F9 |                 decod   hpar2
34da4     01 8E 87 F1 |                 sub     hpar2, #1
34da8     C7 BF 02 F5 |                 and     retval, hpar2
34dac     2D 00 64 FD |                 ret
34db0                 | .l1
34db0     FF 7F 00 FF 
34db4     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
34db8     03 70 07 F1 |                 add     htmp, #3
34dbc     B8 75 03 FB |                 rdlong  htmp2, htmp
34dc0     18 8E 87 F1 |                 sub     hpar2, #24
34dc4     C7 8F C3 F9 |                 decod   hpar2
34dc8     01 8E 87 F1 |                 sub     hpar2, #1
34dcc     B9 75 43 F0 |                 shr     htmp2, htmp1
34dd0     C7 75 03 F5 |                 and     htmp2, hpar2
34dd4     18 74 67 F0 |                 shl     htmp2, #24
34dd8     BA BF 42 F5 |                 or      retval, htmp2
34ddc     2D 00 64 FD |                 ret
34de0                 | 
34de0                 | '------------------------------------------------------------------------------
34de0                 | ' Normalize value to signed word (-32768 / 32767)
34de0                 | '------------------------------------------------------------------------------
34de0                 | ' On entry:
34de0                 | '   retval - value to normalize
34de0                 | '   hidr_lminmax - min (word 1) max (word 0) value range
34de0                 | '   - or -
34de0                 | '   hidr_pminmax - min (word 1) max (word 0) value range
34de0                 | '   hidr_size - value bits length
34de0                 | ' On exit:
34de0                 | '   retval - normalized value
34de0                 | '------------------------------------------------------------------------------
34de0                 | hpad_normalize
34de0     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
34de4     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
34de8     2D 00 64 AD |         if_z    ret
34dec     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
34df0     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
34df4     0F 72 77 F7 |                 signx   htmp1, #15      wc
34df8     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
34dfc     00 BE 66 C7 |         if_c    signx   retval, #0-0
34e00     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
34e04     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
34e08     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
34e0c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
34e10     B8 71 53 F6 |                 abs     htmp            wc
34e14     1F BE 0E F4 |                 testb   retval, #31     wz
34e18     5F BF 42 F6 |                 abs     retval
34e1c     B8 BF 12 FD |                 qdiv    retval, htmp
34e20     18 BE 62 FD |                 getqx   retval
34e24     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
34e28     C0 FF 7F FF 
34e2c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
34e30     2D 00 64 FD |                 ret
34e34                 | 
34e34                 | '------------------------------------------------------------------------------
34e34                 | ' Perform controller actions
34e34                 | ' On entry:
34e34                 | '    hidr_id        report id
34e34                 | '    hidr_axis      axis value (signed word, 2 axes per long)
34e34                 | '                      X = hidr_axis+0, #0
34e34                 | '                      Y = hidr_axis+0, #1
34e34                 | '                      Z = hidr_axis+1, #0
34e34                 | '                     RX = hidr_axis+1, #1
34e34                 | '                     RY = hidr_axis+2, #0
34e34                 | '                     RZ = hidr_axis+2, #1
34e34                 | '    hidr_buttons   buttons state (bits 0 to 31)
34e34                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
34e34                 | '
34e34                 | '                     -------3 -------2 -------1 -------0 byte
34e34                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
34e34                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
34e34                 | '                                zyx||| |||||||| ++++++++ n. buttons
34e34                 | '                                |||||| ||||++++--------- n. axes
34e34                 | '                                |||||| ++++------------- n. hats
34e34                 | '                                ++++++------------------ valid axes
34e34                 | '------------------------------------------------------------------------------
34e34                 | hpad_translate
34e34                 | 
34e34                 | 
34e34                 |         if HAVE_HIDPAD
34e34     84 0C F0 FE |                 loc     ptrb,#hidpad_report
34e38     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
34e3c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
34e40     01 70 E7 F2 |                 cmpsub  htmp,#1
34e44     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
34e48     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
34e4c     2D 00 7C 3D |         if_ae   ret     wcz
34e50     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
34e54     B8 F3 03 F1 |                 add     ptrb,htmp
34e58     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
34e5c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
34e60     28 0C 64 FD |                 setq    #7-1
34e64     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
34e68                 |         end
34e68                 | 
34e68                 | 
34e68                 |         if EMUPAD_MAX_PLAYER > 0
34e68                 | .emupad_no_hat
34e68                 |         if EMUPAD_BT0_BIT >= 0
34e68                 |         end
34e68                 |         if EMUPAD_BT1_BIT >= 0
34e68                 |         end
34e68                 |         if EMUPAD_BT2_BIT >= 0
34e68                 |         end
34e68                 |         if EMUPAD_BT3_BIT >= 0
34e68                 |         end
34e68                 |         if EMUPAD_BT4_BIT >= 0
34e68                 |         end
34e68                 |         if EMUPAD_BT5_BIT >= 0
34e68                 |         end
34e68                 |         if EMUPAD_BT6_BIT >= 0
34e68                 |         end
34e68                 |         if EMUPAD_BT7_BIT >= 0
34e68                 |         end
34e68                 |         if EMUPAD_BT8_BIT >= 0
34e68                 |         end
34e68                 |         if EMUPAD_BT9_BIT >= 0
34e68                 |         end
34e68                 | .emupad_slot_over
34e68                 |         end
34e68                 | 
34e68                 |         if 0
34e68                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
34e68                 | 
34e68                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
34e68                 | 
34e68                 |         end
34e68     2D 00 64 FD |                 ret
34e6c                 | end
34e6c                 | 
34e6c                 | if EMUPAD_MAX_PLAYER > 0
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | ' Clear EmuPad state
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | emupad_reset
34e6c                 | 
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | ' Get EmuPad Player number for current device (into retval)
34e6c                 | ' Z flag is also set if current device is valid
34e6c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | emupad_getnum
34e6c                 | .loop
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | emupad_discon
34e6c                 | .loop         
34e6c                 |         
34e6c                 |         ' FALL THROUGH!!!
34e6c                 | 
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | ' Update EmuPad reports (all of them...)
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | emupad_write_reports
34e6c                 | .devloop
34e6c                 | 
34e6c                 | end
34e6c                 | 
34e6c                 | 
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | ' On entry:
34e6c                 | ' On exit:
34e6c                 | '------------------------------------------------------------------------------
34e6c                 | hget_hub_status
34e6c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
34e70     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34e74     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
34e78     01 90 2F F9 |                 setword hpar3, #1, #1
34e7c     CF 02 A0 FD |                 call    #do_int_in
34e80     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34e84     0C 00 90 AD |         if_z    jmp     #.data
34e88     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
34e8c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
34e90     2D 00 64 FD |                 ret
34e94                 | .data
34e94     00 90 0F F2 |                 cmp     hpar3, #0               wz
34e98     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
34e9c                 | 
34e9c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
34ea0     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
34ea4     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
34ea8     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
34eac                 |                 debug(ubin_long(hub_status_chg))
34eac                 | 
34eac     01 5A 06 F6 |                 mov     hdev_port, #1
34eb0                 | .loop
34eb0     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
34eb4     0C 00 B0 AD |         if_x1   call    #hub_port_handler
34eb8     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
34ebc     F0 FF 9F 3D |         if_nc   jmp     #.loop
34ec0     2D 00 64 FD |                 ret
34ec4                 | 
34ec4                 | hub_port_handler
34ec4     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
34ec8     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34ecc     27 EF 03 F6 |                 mov     pb, urx_buff_p
34ed0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34ed4     55 02 A0 FD |                 call    #control_read
34ed8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
34edc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
34edc                 | 
34edc     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
34ee0     50 01 90 5D |         if_x0   jmp     #.other
34ee4     68 02 D0 FE |                 loc     ptra, #clr_port_feat
34ee8     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
34eec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34ef0     A0 02 A0 FD |                 call    #control_write
34ef4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
34ef8     7C 01 90 5D |         if_x0   jmp     #.disconnect
34efc     B0 99 02 F6 |                 mov     hctwait, _100ms_
34f00     EF 02 A0 FD |                 call    #poll_waitx
34f04                 | 
34f04     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
34f08     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
34f0c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34f10     A0 02 A0 FD |                 call    #control_write
34f14                 | 
34f14     02 76 07 F6 |                 mov     htmp3, #2
34f18                 | .wait_reset
34f18     AC 99 02 F6 |                 mov     hctwait, _8ms_
34f1c     EF 02 A0 FD |                 call    #poll_waitx
34f20     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34f24     27 EF 03 F6 |                 mov     pb, urx_buff_p
34f28     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34f2c     55 02 A0 FD |                 call    #control_read
34f30     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
34f34     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
34f38     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
34f3c                 | 
34f3c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
34f40     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
34f44     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34f48     A0 02 A0 FD |                 call    #control_write
34f4c                 | 
34f4c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
34f50                 | .wait_recover
34f50     A7 99 02 F6 |                 mov     hctwait, _1ms_
34f54     EF 02 A0 FD |                 call    #poll_waitx
34f58     FD 71 6F FB |                 djnz    htmp,#.wait_recover
34f5c                 | 
34f5c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34f60     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
34f64     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
34f68                 | 
34f68     00 08 00 FF 
34f6c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
34f70     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
34f74     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
34f78     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
34f7c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
34f80     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34f84     48 01 90 5D |         if_nz   jmp     #.done
34f88                 | .get_dev_desc
34f88     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
34f8c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
34f90     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
34f94     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
34f98     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
34f9c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
34fa0     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
34fa4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34fa8     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
34fac     AC 99 02 F6 |                 mov     hctwait, _8ms_
34fb0     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
34fb4     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
34fb8     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
34fbc     BE 00 A0 FD |                 call    #calc_crc5
34fc0     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
34fc4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
34fc8     F7 AD C2 FA |                 rdbyte  total_data, pb
34fcc     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
34fd0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
34fd4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34fd8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
34fdc     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
34fe0     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
34fe4                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
34fe4     9F 99 02 F6 |                 mov     hctwait, _500us_
34fe8     EF 02 A0 FD |                 call    #poll_waitx
34fec     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
34ff0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
34ff4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
34ff8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
34ffc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35000     CC 00 90 5D |         if_nz   jmp     #.done
35004     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
35008     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3500c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
35010     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
35014     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
35018     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3501c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
35020     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
35024     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
35028     A4 00 90 CD |         if_b    jmp     #.done
3502c     6C F0 BF FD |                 call    #hparse_con_desc
35030     9C 00 90 FD |                 jmp     #.done
35034                 | 
35034                 | .other
35034     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
35038     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3503c     28 00 90 AD |         if_x1   jmp     #.reset_feature
35040     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
35044     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
35048     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3504c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
35050     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
35054     10 00 90 AD |         if_x1   jmp     #.reset_feature
35058     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3505c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
35060     04 00 90 AD |         if_x1   jmp     #.reset_feature
35064     68 00 90 FD |                 jmp     #.done
35068                 | .reset_feature
35068     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3506c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
35070     A0 02 A0 FD |                 call    #control_write
35074     58 00 90 FD |                 jmp     #.done
35078                 | .disconnect
35078                 | 
35078     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3507c     00 70 E3 F8 |                 getbyte htmp
35080     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
35084     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
35088     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3508c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
35090     00 76 06 A6 |         if_z    mov     kb_led_states, #0
35094     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
35098                 |         if EMUPAD_MAX_PLAYER > 0
35098                 |         end
35098                 |         if HAVE_MOUSE
35098     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3509c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
350a0     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
350a4                 |         end
350a4                 |         if HAVE_HIDPAD
350a4     14 0A F0 FE |                 loc ptrb,#hidpad_report
350a8     2D 71 03 F6 |                 mov htmp,hdev_port
350ac     01 70 E7 F2 |                 cmpsub htmp,#1
350b0     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
350b4     B8 F3 03 F1 |                 add ptrb,htmp
350b8     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
350bc     80 01 6C FC |                 wrlong #0,ptrb
350c0                 |         end
350c0                 | 
350c0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
350c4     00 00 C4 F8 |                 setbyte #0
350c8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
350cc     00 00 04 F6 |                 mov     0-0, #0
350d0                 | 
350d0                 | .done
350d0     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
350d4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
350d8     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
350dc     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
350e0     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
350e4     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
350e8                 | 
350e8     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
350ec     27 EF 03 F6 |                 mov     pb, urx_buff_p
350f0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
350f4     55 02 A0 FD |                 call    #control_read
350f8     00 69 06 FB |                 rdlong  hub_port_status, ptra
350fc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
350fc     2D 00 64 FD |                 ret
35100                 | 
35100                 | '------------------------------------------------------------------------------
35100                 | ' Partially populated SETUP packets
35100                 | '------------------------------------------------------------------------------
35100     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
35101     06          |                 byte    REQ_GET_DESC
35102     00 01       |                 word    TYPE_DEVICE << 8
35104     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
35106     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35108     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
35109     06          |                 byte    REQ_GET_DESC
3510a     00 02       |                 word    TYPE_CONFIG << 8
3510c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3510e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35110     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
35111     09          |                 byte    REQ_SET_CONFIG
35112     00 00       |                 word    0       ' Configuration value
35114     00 00       |                 word    0       ' Zero
35116     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
35118     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
35119     05          |                 byte    REQ_SET_ADDR
3511a     00 00       |                 word    0       ' Zero
3511c     00 00       |                 word    0       ' Zero
3511e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
35120                 | '------------------------------------------------------------------------------
35120                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
35120                 | ' wValue field dictates which protocol should be used.
35120                 | '
35120                 | ' When initialized, all devices default to report protocol. However the host
35120                 | ' should not make any assumptions about the device state and should set the
35120                 | ' desired protocol whenever initializing a device.
35120                 | '------------------------------------------------------------------------------
35120     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
35121     0B          |                 byte    HID_SET_PROTO
35122     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
35124                 |                                                 ' (HID 1.11 Section 7.2.6).
35124     00 00       |                 word    0               ' Interface index number.
35126     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
35128                 | '------------------------------------------------------------------------------
35128     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
35129     0A          |                 byte    HID_SET_IDLE
3512a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3512c                 |                                         ' reporting until a change is detected in the report data
3512c                 | 
3512c                 |                                         ' (HID 1.11 Section 7.2.4).
3512c     00 00       |                 word    0       ' Interface index number.
3512e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
35130     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
35131     09          |                 byte    HID_SET_REPORT
35132     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
35134                 |                                         ' (HID 1.11 Section 7.2.2).
35134     00 00       |                 word    0       ' Interface index number.
35136     00 00       |                 word    0       ' Size of the report, in bytes.
35138     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
35139     06          |                 byte    REQ_GET_DESC
3513a     00 22       |                 word    TYPE_REPORT << 8
3513c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3513e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35140                 | '------------------------------------------------------------------------------
35140     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
35141     06          |                 byte    REQ_GET_DESC
35142     00 29       |                 word    TYPE_HUB << 8
35144     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
35146     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35148     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
35149     03          |                 byte    REQ_SET_FEATURE
3514a     00 00       |                 word    0       ' port power
3514c     01 00       |                 word    1       ' Port index number (1+)
3514e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35150     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
35151     01          |                 byte    REQ_CLEAR_FEATURE
35152     00 00       |                 word    0       ' port power
35154     01 00       |                 word    1       ' Port index number (1+)
35156     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35158     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
35159     00          |                 byte    REQ_GET_STATUS
3515a     00 00       |                 word    0
3515c     01 00       |                 word    1       ' Port index number (1+)
3515e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
35160                 | '------------------------------------------------------------------------------
35160                 | if _HAVE_GAMEPAD
35160     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
35164                 | ps3_command_buff
35164     00 00 00 00 
35168     00          |                 byte    $00, $00, $00, $00, $00
35169     00 00 00 00 
3516d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3516e     FF 27 10 00 
35172     32          |                 byte    $FF, $27, $10, $00, $32
35173     FF 27 10 00 
35177     32          |                 byte    $FF, $27, $10, $00, $32
35178     FF 27 10 00 
3517c     32          |                 byte    $FF, $27, $10, $00, $32
3517d     FF 27 10 00 
35181     32          |                 byte    $FF, $27, $10, $00, $32
35182     00 00 00 00 
35186     00          |                 byte    $00, $00, $00, $00, $00
35187     00 00 00 00 
3518b     00          |                 byte    $00, $00, $00, $00, $00
3518c     00 00 00 00 
35190     00          |                 byte    $00, $00, $00, $00, $00
35191     00 00 00    |                 byte    $00, $00, $00
35194                 | '------------------------------------------------------------------------------
35194     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
35197                 |                                         ' 0x01 All blinking
35197                 |                                         ' 0x02 1 flashes, then on
35197                 |                                         ' 0x03 2 flashes, then on
35197                 |                                         ' 0x04 3 flashes, then on
35197                 |                                         ' 0x05 4 flashes, then on
35197                 |                                         ' 0x06 1 on
35197                 |                                         ' 0x07 2 on
35197                 |                                         ' 0x08 3 on
35197                 |                                         ' 0x09 4 on
35197                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
35197                 |                                         ' 0x0B Blinking*
35197                 |                                         ' 0x0C Slow blinking*
35197                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
35197     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3519a     00          |                 byte    $00             ' Left rumble
3519b     00          |                 byte    $00             ' Right rumble
3519c     00 00 00    |                 byte    $00, $00, $00
3519f     00          | end
351a0                 | alignl
351a0                 | 
351a0                 | if HAVE_MOUSE
351a0     00 00 00 00 
351a4     00 00 00 00 | mouse_limits long 0[2]
351a8     00 00 00 00 | mouse_outptr long 0
351ac                 | end
351ac                 | 
351ac                 | if KEYQUEUE_SIZE > 0
351ac     00          | keyq_head byte 0
351ad     00          | keyq_tail byte 0
351ae     00 00 00 00 
      ...             
353aa     00 00 00 00 
353ae     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
353b0                 | alignl
353b0                 | end
353b0                 | 
353b0                 | if EMUPAD_MAX_PLAYER > 0
353b0                 | emupad_rule_buffer
353b0                 | if EMUPAD_BUILTIN_RULES
353b0                 | file "padmap_builtin.dat"
353b0                 | end
353b0                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
353b0                 | '' Default rule directly follows!
353b0                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
353b0                 | end
353b0                 | 
353b0                 | '------------------------------------------------------------------------------
353b0                 | ' The USB data cache area gets zero-filled at every device disconnect
353b0                 | '------------------------------------------------------------------------------
353b0                 | usb_cache_start
353b0                 | 
353b0                 | ' HID descriptor and report buffers
353b0                 | if !!OVERLAP_MEMORY
353b0     00 00 00 00 
      ...             
35aa8     00 00 00 00 
35aac     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
35ab0                 | end
35ab0     00 00 00 00 
35ab4     00 00 00 00 | hkbd_report     byte    0[8]
35ab8     00 00 00 00 | hkbd_led_rep    byte    0
35abc                 | alignl
35abc                 | 
35abc                 | if HAVE_HIDPAD
35abc     00 00 00 00 
      ...             
35b78     00 00 00 00 
35b7c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
35b80                 | end
35b80                 | 
35b80                 | ' HUB descriptor
35b80     00          | hub_descr       byte    0   ' bDescLength
35b81     00          |                 byte    0   ' bDescriptorType
35b82     00          |                 byte    0   ' bNbrPorts
35b83     00 00       |                 word    0   ' wHubCharacteristics
35b85     00          |                 byte    0   ' bPwrOn2PwrGood
35b86     00          |                 byte    0   ' bHubContrCurrent
35b87     00          |                 byte    0   ' DeviceRemoveable
35b88     00          |                 byte    0   ' PortPwrCtrlMask
35b89                 | 
35b89                 | usb_cache_end
35b89                 | 
35b89                 | if HAVE_MOUSE
35b89     00 00 00 00 | mouse_xacc      long 0
35b8d     00 00 00 00 | mouse_yacc      long 0
35b91     00 00 00 00 | mouse_zacc      long 0
35b95     00          | mouse_bstate    byte 0
35b96     00          | mouse_lpending  byte 0
35b97     00          | mouse_rpending  byte 0
35b98     00          | mouse_mpending  byte 0
35b99     00          | mouse_lock      byte 0
35b9a     00 00 00    |                 byte 0[3] ' padding
35b9d                 | end
35b9d                 | 
35b9d     00 00 00 00 
      ...             
35c15     00 00 00 00 
35c19     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
35c1d     00 00 00 00 
35c21     00 00 00 00 
35c25     00 00 00 00 
35c29     00 00 00 00 
35c2d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
35c2f     00 00 00 00 
      ...             
35d27     00 00 00 00 
35d2b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
35d2f                 | 
35d2f     00          | driver_cog      byte    0                       ' Current driver cog + 1
35d30                 | 	alignl
35d30                 | _audio096_spin2_dat_
35d30                 | 
35d30                 | audio       org     0
35d30                 | 
35d30     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
35d34     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
35d38     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
35d3c                 | 
35d3c     01 EC 63 FD |             cogid   pa                   ' compute cogid
35d40     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
35d44     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
35d48     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
35d4c                 | 
35d4c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
35d50     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
35d54     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
35d58     0F 20 06 FC |             wrpin   dac2,#right
35d5c     0F 00 1E FC |             wxpin   #256,#right    
35d60     41 9C 64 FD |             dirh    #left addpins 1
35d64     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
35d68     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
35d6c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
35d70                 |             
35d70                 | '---------------------------------------------------------------------------------        
35d70                 | '----------------- The main loop -------------------------------------------------
35d70                 | '---------------------------------------------------------------------------------
35d70                 | 
35d70     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
35d74     10 00 90 CD |       if_c  jmp     #loop1
35d78                 |   
35d78     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
35d7c     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
35d80     D3 00 80 F1 |             sub     0-0,a40000000
35d84     FD FD 6D FB |             djnz    cn,#p402
35d88                 |     
35d88     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
35d8c     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
35d90     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
35d94     01 FC 05 C6 |     if_c    mov     cn,#1
35d98     D8 FE 39 F3 |             fle     ct,time3 wcz
35d9c     02 FC 05 C6 |     if_c    mov     cn,#2     
35da0     D9 FE 39 F3 |             fle     ct,time4 wcz
35da4     03 FC 05 C6 |     if_c    mov     cn,#3
35da8     DA FE 39 F3 |             fle     ct,time5 wcz
35dac     04 FC 05 C6 |     if_c    mov     cn,#4
35db0     DB FE 39 F3 |             fle     ct,time6 wcz
35db4     05 FC 05 C6 |     if_c    mov     cn,#5
35db8     DC FE 39 F3 |             fle     ct,time7 wcz
35dbc     06 FC 05 C6 |     if_c    mov     cn,#6
35dc0     DD FE 39 F3 |             fle     ct,time8 wcz
35dc4     07 FC 05 C6 |     if_c    mov     cn,#7
35dc8                 | 
35dc8                 | 
35dc8                 | '----------------------------------------------------------------------------------
35dc8                 | '------------- Compute channel samples --------------------------------------------
35dc8                 | '----------------------------------------------------------------------------------
35dc8                 | 
35dc8                 | 
35dc8     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
35dcc     06 BC 65 F0 |             shl     channeladd,#6
35dd0     DE F0 03 F1 |             add     ptra,channeladd
35dd4                 | 
35dd4     28 16 64 FD |             setq    #11                        	' read parameters
35dd8     00 D3 05 FB |             rdlong  pointer0,ptra
35ddc                 |     	    
35ddc     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
35de0     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
35de4     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
35de8     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
35dec     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
35df0     00 C0 0D F2 |             cmp     qq,#0 wz                         
35df4     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
35df8     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
35dfc                 |             
35dfc     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
35e00     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
35e04     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
35e08                 | 
35e08     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
35e0c     EA 04 3A F9 |             getword oldrs,sample0,#1
35e10     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
35e14     EE F6 31 F9 |     	    getword avol0,volpan0,#0
35e18     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
35e1c     EF F2 31 F9 |             getword afreq0,freqskip0,#0
35e20                 | 
35e20     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
35e24     00 00 02 F6 |             mov     dt0,0-0    
35e28     D5 00 82 F1 |             sub     dt0,time0
35e2c                 |             
35e2c     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
35e30     F9 00 00 F1 |             add     0-0,afreq0  	
35e34                 |             
35e34                 | '---- envelopes
35e34                 |             
35e34     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
35e38     20 00 00 AF 
35e3c     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
35e40     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
35e44                 | 
35e44     F9 44 02 F6 |             mov     envs1,afreq0
35e48     F3 44 02 FA |             mul     envs1,envspd0
35e4c     22 E3 01 F1 |             add     envph0,envs1 
35e50                 | 
35e50     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
35e54     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
35e58     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
35e5c     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
35e60     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
35e64     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
35e68     00 42 06 36 |     if_ge   mov     envlo,#0
35e6c     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
35e70     16 E2 65 30 |     if_ge   shl     envph0,#22
35e74                 | 
35e74     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
35e78     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
35e7c     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
35e80     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
35e84     22 47 3A F9 |             getword envs2,envs1,#1		' next value
35e88     22 45 32 F9 |             getword envs1,envs1,#0		' current value
35e8c     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
35e90     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
35e94     21 45 02 FA |             mul     envs1,envlo
35e98     23 45 02 F1 |             add     envs1,envs2
35e9c     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
35ea0                 |             
35ea0     1B D6 0D F4 | p410        testb   sstart0, #27 wz
35ea4     1B C2 61 AD |     if_z    getrnd  spl
35ea8     58 00 90 AD |     if_z    jmp     #p406
35eac                 |  
35eac     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
35eb0     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
35eb4     08 D2 45 F0 |             shr     pointer0,#8
35eb8                 |          
35eb8     1F D6 0D F4 |             testb   sstart0,#31 wz            
35ebc     01 D2 65 A0 |     if_z    shl     pointer0,#1        
35ec0     1C D6 0D F4 |             testb   sstart0,#28 wz            
35ec4     01 D2 65 A0 |     if_z    shl     pointer0,#1        
35ec8                 |         
35ec8     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
35ecc     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
35ed0     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
35ed4                 |             
35ed4     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
35ed8     EB C0 01 F1 |             add     qq,sstart0            
35edc                 | 
35edc     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
35ee0     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
35ee4     14 01 B0 1D |     if_gt   call    #cache_read
35ee8                 |          
35ee8     1F D6 0D F4 |             testb   sstart0,#31 wz 
35eec     08 C2 65 50 |     if_nz   shl     spl,#8
35ef0     08 D2 65 50 |     if_nz   shl     pointer0,#8
35ef4     07 D2 65 A0 |     if_z    shl     pointer0,#7
35ef8     1C D6 0D F4 |             testb   sstart0,#28 wz            
35efc     01 D2 45 A0 |     if_z    shr     pointer0,#1    
35f00     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
35f04                 | 
35f04                 | 
35f04     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
35f08     00 C2 01 F6 |             mov     spl,0-0
35f0c     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
35f10     00 C2 01 F6 |             mov     spl,0-0
35f14                 | 
35f14     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
35f18     00 06 02 F6 |             mov     ls0,0-0
35f1c     20 00 00 FF 
35f20     00 C0 05 F6 |             mov     qq,##16384
35f24     FC C0 81 F1 |             sub     qq,apan0
35f28     E0 C2 31 FA |             scas    spl,qq
35f2c     00 08 02 F6 |             mov     rs0, 0-0
35f30                 | 
35f30     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
35f34     04 0D 02 F1 |             add     rs,rs0
35f38     01 0B 82 F1 |             sub     ls,oldls
35f3c     03 0B 02 F1 |             add     ls,ls0
35f40                 |    
35f40     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
35f44     03 D5 21 F9 |             setword sample0,ls0,#0
35f48                 |             
35f48     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
35f4c     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
35f50     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
35f54                 |   '  if_z    mov     sample0,#0
35f54     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
35f58     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
35f5c     04 00 00 AF 
35f60     00 AC 05 A1 |     if_z    add     time1,##2048
35f64     D6 AE 01 A6 |     if_z    mov     time2,time1
35f68     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
35f6c                 | 
35f6c     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
35f70     00 D3 65 FC |             wrlong  pointer0,ptra
35f74     08 E3 65 FC |             wrlong  envph0,ptra[8]
35f78     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
35f7c                 |                       
35f7c     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
35f80     FF BF 25 A7 |     if_z    decmod  front, #511          
35f84                 |          
35f84     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
35f88     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
35f8c     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
35f90     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
35f94                 | 	    
35f94                 | 		    
35f94     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
35f98     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
35f9c     02 11 02 F6 |             mov     newsample, oldrs       
35fa0                 | 
35fa0     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
35fa4     00 AB 01 F1 |             add     time0,dt0    
35fa8                 |                                      
35fa8     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
35fac     D8 FD 9F AD |     if_z    jmp     #loop1
35fb0     00 C1 01 F6 |             mov     qq,dt0
35fb4                 |   
35fb4     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
35fb8     00 BE 9D F2 |             cmpr    front, #0-0 wcz
35fbc     F4 FF 9F AD |     if_e    jmp     #p301    
35fc0                 | 		
35fc0     00 16 0E F2 | 	    cmp     scbase,#0 wz
35fc4     20 00 90 AD |     if_z    jmp     #p302	   
35fc8                 |   
35fc8     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
35fcc     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
35fd0     02 1A 66 C0 |     if_c    shl     scptr2,#2
35fd4     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
35fd8     60 1A 66 FC |             wrlong  scptr2,#$60
35fdc     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
35fe0     01 00 00 CF 
35fe4     7F 18 06 C7 |     if_c    incmod  scptr,##639
35fe8                 | 			    
35fe8     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
35fec     00 00 00 FF 
35ff0     FF BF 05 F7 |             incmod  front, ##511
35ff4     EF C1 6D FB |             djnz    qq,#p301
35ff8                 |             
35ff8     74 FD 9F FD |             jmp     #loop            'loop
35ffc                 | 
35ffc                 | '----------------------------------------------------------------------------------
35ffc                 | '------------- This is the end of the main loop -----------------------------------
35ffc                 | '----------------------------------------------------------------------------------
35ffc                 | 
35ffc                 | '----------------------------------------------------------------------------------
35ffc                 | '------------- PSRAM cache ----------- --------------------------------------------
35ffc                 | '----------------------------------------------------------------------------------
35ffc                 | 
35ffc                 | ' There are 8 cache pointers for 8 channels
35ffc                 | ' if 24 higher bits of address=cache, then get a word from the cache
35ffc                 | ' else load the cache from PSRAM, update the pointer, then read a sample
35ffc                 | 
35ffc                 | 
35ffc     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
36000                 |             
36000     E0 3C 02 F6 | 	    mov     addrhi,qq		
36004     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
36008     12 FD 95 F9 | 	    alts    cn,#cache1            
3600c     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
36010     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
36014                 | 	
36014     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
36018     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3601c     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
36020     08 34 66 F0 | 	    shl     cmd,#8
36024     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
36028     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3602c     08 36 66 F0 |             shl     hubaddr,#8                  '
36030     11 37 02 F1 |             add     hubaddr,hubptr 
36034     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
36038     28 04 64 FD |             setq    #2                          ' write 3 longs
3603c     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
36040     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
36044     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
36048                 |             
36048                 | 	
36048     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
3604c     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
36050     11 C1 01 F1 | 	    add     qq,hubptr
36054     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
36058     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3605c                 |           
3605c                 | 
3605c                 | '--------------------------------------------------------------------------
3605c                 | '------ Interrupt service -------------------------------------------------
3605c                 | '------ Output the sample, get the next one if exists ---------------------
3605c                 | '--------------------------------------------------------------------------
3605c                 | 
3605c     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
36060     0F CC 25 FC |             wypin   rsample,#right       '4
36064     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
36068     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3606c     FF F3 07 57 |     if_ne   incmod  ptrb,#511
36070     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
36074     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
36078                 |     
36078     F5 FF 3B FB |             reti1                        '17/19 
3607c                 |           
3607c                 | '---------------------------------------------------------------------------
3607c                 | '-------- End of interrupt -------------------------------------------------
3607c                 | '---------------------------------------------------------------------------    
3607c                 | 
3607c                 | 
3607c                 | '---------------------------------------------------------------------------
3607c                 | '------- Variables ---------------------------------------------------------
3607c                 | '---------------------------------------------------------------------------
3607c                 | 
3607c                 | ' constants
3607c                 | 
3607c     00 00 00 40 | a40000000   long $40000000
36080     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
36084                 | 
36084                 | ' Time variables
36084                 | 
36084     00 00 00 00 | time0       long 0    ' Global sample computing time
36088     01 00 00 00 | time1       long 1    ' Local channels time
3608c     02 00 00 00 | time2       long 2
36090     03 00 00 00 | time3       long 3
36094     04 00 00 00 | time4       long 4
36098     05 00 00 00 | time5       long 5
3609c     06 00 00 00 | time6       long 6
360a0     07 00 00 00 | time7       long 7
360a4     08 00 00 00 | time8       long 8
360a8                 | 
360a8     00 00 00 00 | channeladd long 0
360ac                 | 
360ac     00 00 00 00 | front       long 0
360b0                 | 
360b0                 | ' temporary variables 
360b0     00 00 00 00 | qq          long 0
360b4     00 00 00 00 | spl         long 0
360b8     00 00 00 00 | zero        long 0
360bc     00 00 00 00 | mailbox     long 0
360c0     00 00 00 00 | mailbox2 long 0
360c4                 | 
360c4                 | ' Interrupt ISR variables
360c4                 | 
360c4     00 00 00 00 | lsample     long 0
360c8     00 00 00 00 | rsample     long 0
360cc     00 00 00 00 | lsnext      long 0
360d0     00 00 00 00 | rsnext      long 0 
360d4                 | 
360d4                 | ' channel parameter block
360d4                 | 
360d4     00 00 00 00 | pointer0    long 0     
360d8     00 00 00 00 | sample0     long 0
360dc     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
360e0     00 00 00 00 | lstart0     long 0
360e4     00 00 00 00 | lend0       long 0
360e8     00 00 00 00 | volpan0     long 0
360ec     00 00 00 00 | freqskip0   long 0
360f0     00 00 00 00 | command0    long 0
360f4     00 00 00 00 | envph0	    long 0
360f8     00 00 00 00 | envptr0	    long 0
360fc     00 00 00 00 | envspd0	    long 0
36100     00 00 00 00 | envlen0	    long 0
36104     00 00 00 00 | res5	    long 0
36108     00 00 00 00 | res6	    long 0
3610c     00 00 00 00 | res7	    long 0
36110     00 00 00 00 | res8	    long 0
36114                 | 
36114     00 00 00 00 | afreq0      long 0
36118     00 00 00 00 | askip0      long 0
3611c     00 00 00 00 | avol0       long 0
36120     00 00 00 00 | apan0       long 0
36124                 | 
36124     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
36128     00 00 00 00 | cn          long 0
3612c     00 00 00 00 | ct          long 0
36130     00 00 00 00 | dt0         long 0
36134                 | 
36134                 | ' Samples
36134     00 00 00 00 | oldls       long 0
36138     00 00 00 00 | oldrs       long 0
3613c                 | 
3613c     00 00 00 00 | ls0         long 0
36140     00 00 00 00 | rs0         long 0
36144                 | 
36144     00 00 00 00 | ls          long 0    
36148     00 00 00 00 | rs          long 0
3614c                 | 
3614c     00 00 00 00 | oldsample   long 0
36150     00 00 00 00 | newsample   long 0
36154                 | 
36154     00 00 00 00 | nrsample    long 0
36158     00 00 00 00 | nlsample    long 0
3615c                 | 
3615c     00 00 00 00 | scbase long 0
36160     00 00 00 00 | scptr long 0
36164     00 00 00 00 | scptr2 long 0
36168     00 00 00 00 | scope long 0
3616c                 | 
3616c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
36170     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
36174                 | 
36174     00 18 07 00 | hubptr      long $71800
36178     00 00 00 00 | cache1      long 0
3617c     00 00 00 00 | cache2      long 0
36180     00 00 00 00 | cache3      long 0
36184     00 00 00 00 | cache4      long 0
36188     00 00 00 00 | cache5      long 0
3618c     00 00 00 00 | cache6      long 0
36190     00 00 00 00 | cache7      long 0
36194     00 00 00 00 | cache8      long 0
36198                 | 
36198                 | 
36198     00 00 00 00 | cmd         long 0
3619c     00 00 00 00 | hubaddr     long 0
361a0     00 01 00 00 | count       long 256
361a4     00 00 00 00 | addrlo long 0
361a8     00 00 00 00 | addrhi long 0
361ac     00 00 00 00 | pointer00 long 0
361b0     00 00 00 00 | envhi long 0
361b4     00 00 00 00 | envlo long 0
361b8     00 00 00 00 | envs1 long 0
361bc     00 00 00 00 | envs2 long 0
361c0     00 00 00 00 | noise0 long 0
361c4     00 00 00 00 
361c8     00 00 00 00 | null  			long 	0,0           ' for channel reset
361cc                 | 	alignl
361cc                 | __system__dat_
361cc     00 00 00 00 
361d0     00 00 00 00 | 	byte	$00[8]
361d4     03 00 00 00 
361d8     00 00 00 00 
361dc     00 00 00 00 
361e0     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361e4     00 00 00 00 
      ...             
36470     00 00 00 00 
36474     00 00 00 00 | 	byte	$00[660]
36478     00 00 E0 07 | 	long	(126 {__system____root_opendir})<<20
3647c     00 00 F0 07 | 	long	(127 {__system____root_closedir})<<20
36480     00 00 00 08 | 	long	(128 {__system____root_readdir})<<20
36484     00 00 10 08 | 	long	(129 {__system____root_stat})<<20
36488     00 00 00 00 
3648c     00 00 00 00 
36490     00 00 00 00 
36494     00 00 00 00 
36498     00 00 00 00 
3649c     00 00 00 00 
364a0     00 00 00 00 | 	byte	$00[28]
364a4     0C 65 03 00 | 	long	@@@__system__dat_ + 832
364a8     0F 65 03 00 | 	long	@@@__system__dat_ + 835
364ac     30 65 03 00 | 	long	@@@__system__dat_ + 868
364b0     49 65 03 00 | 	long	@@@__system__dat_ + 893
364b4     64 65 03 00 | 	long	@@@__system__dat_ + 920
364b8     7E 65 03 00 | 	long	@@@__system__dat_ + 946
364bc     8E 65 03 00 | 	long	@@@__system__dat_ + 962
364c0     A0 65 03 00 | 	long	@@@__system__dat_ + 980
364c4     B2 65 03 00 | 	long	@@@__system__dat_ + 998
364c8     C4 65 03 00 | 	long	@@@__system__dat_ + 1016
364cc     D0 65 03 00 | 	long	@@@__system__dat_ + 1028
364d0     E1 65 03 00 | 	long	@@@__system__dat_ + 1045
364d4     F5 65 03 00 | 	long	@@@__system__dat_ + 1065
364d8     FF 65 03 00 | 	long	@@@__system__dat_ + 1075
364dc     0F 66 03 00 | 	long	@@@__system__dat_ + 1091
364e0     1E 66 03 00 | 	long	@@@__system__dat_ + 1106
364e4     34 66 03 00 | 	long	@@@__system__dat_ + 1128
364e8     4D 66 03 00 | 	long	@@@__system__dat_ + 1153
364ec     61 66 03 00 | 	long	@@@__system__dat_ + 1173
364f0     6F 66 03 00 | 	long	@@@__system__dat_ + 1187
364f4     83 66 03 00 | 	long	@@@__system__dat_ + 1207
364f8     8F 66 03 00 | 	long	@@@__system__dat_ + 1219
364fc     A1 66 03 00 | 	long	@@@__system__dat_ + 1237
36500     B9 66 03 00 | 	long	@@@__system__dat_ + 1261
36504     CB 66 03 00 | 	long	@@@__system__dat_ + 1279
36508     DE 66 03 00 | 	long	@@@__system__dat_ + 1298
3650c     4F 4B 00 4E 
36510     75 6D 65 72 
36514     69 63 61 6C 
36518     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3651c     75 6D 65 6E 
36520     74 20 6F 75 
36524     74 20 6F 66 
36528     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3652c     61 69 6E 00 
36530     52 65 73 75 
36534     6C 74 20 6E 
36538     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3653c     65 70 72 65 
36540     73 65 6E 74 
36544     61 62 6C 65 
36548     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3654c     65 67 61 6C 
36550     20 6D 75 6C 
36554     74 69 62 79 
36558     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3655c     65 71 75 65 
36560     6E 63 65 00 
36564     4E 6F 20 73 
36568     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3656c     66 69 6C 65 
36570     20 6F 72 20 
36574     64 69 72 65 
36578     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3657c     79 00 42 61 
36580     64 20 66 69 
36584     6C 65 20 6E 
36588     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3658c     72 00 50 65 
36590     72 6D 69 73 
36594     73 69 6F 6E 
36598     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3659c     69 65 64 00 
365a0     4E 6F 74 20 
365a4     65 6E 6F 75 
365a8     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
365ac     65 6D 6F 72 
365b0     79 00 54 65 
365b4     6D 70 6F 72 
365b8     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
365bc     66 61 69 6C 
365c0     75 72 65 00 
365c4     46 69 6C 65 
365c8     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
365cc     73 74 73 00 
365d0     49 6E 76 61 
365d4     6C 69 64 20 
365d8     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
365dc     6D 65 6E 74 
365e0     00 54 6F 6F 
365e4     20 6D 61 6E 
365e8     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
365ec     65 6E 20 66 
365f0     69 6C 65 73 
365f4     00 49 2F 4F 
365f8     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
365fc     6F 72 00 4E 
36600     6F 74 20 61 
36604     20 64 69 72 
36608     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3660c     72 79 00 49 
36610     73 20 61 20 
36614     64 69 72 65 
36618     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3661c     79 00 52 65 
36620     61 64 20 6F 
36624     6E 6C 79 20 
36628     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3662c     20 73 79 73 
36630     74 65 6D 00 
36634     46 75 6E 63 
36638     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3663c     20 6E 6F 74 
36640     20 69 6D 70 
36644     6C 65 6D 65 
36648     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3664c     00 44 69 72 
36650     65 63 74 6F 
36654     72 79 20 6E 
36658     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3665c     6D 70 74 79 
36660     00 4E 61 6D 
36664     65 20 74 6F 
36668     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3666c     6E 67 00 44 
36670     65 76 69 63 
36674     65 20 6E 6F 
36678     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3667c     65 6B 61 62 
36680     6C 65 00 42 
36684     61 64 20 61 
36688     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3668c     73 73 00 42 
36690     72 6F 6B 65 
36694     6E 20 63 6F 
36698     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3669c     74 69 6F 6E 
366a0     00 44 65 76 
366a4     69 63 65 20 
366a8     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
366ac     65 73 6F 75 
366b0     72 63 65 20 
366b4     62 75 73 79 
366b8     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
366bc     73 73 20 64 
366c0     65 76 69 63 
366c4     65 20 6C 69 
366c8     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
366cc     6F 20 73 70 
366d0     61 63 65 20 
366d4     6F 6E 20 64 
366d8     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
366dc     65 00 55 6E 
366e0     6B 6E 6F 77 
366e4     6E 20 65 72 
366e8     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
366ec     00 00 00 00 
366f0     00 00 00 00 | 	byte	$00[8]
366f4     05 00 00 00 
366f8     00 00 00 00 
366fc     00 00 00 00 
36700     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36704     00 00 00 00 | 	byte	$00, $00, $00, $00
36708     00 00 60 09 | 	long	(150 {__system___tx})<<20
3670c     00 00 70 09 | 	long	(151 {__system___rx})<<20
36710     00 00 00 00 | 	byte	$00, $00, $00, $00
36714     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
36718     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
3671c     00 00 00 00 
36720     00 00 00 00 | 	byte	$00[8]
36724     01 00 00 00 
36728     06 00 00 00 
3672c     00 00 00 00 
36730     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36734     00 00 00 00 
36738     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3673c     00 00 60 09 | 	long	(150 {__system___tx})<<20
36740     00 00 70 09 | 	long	(151 {__system___rx})<<20
36744     00 00 00 00 | 	byte	$00, $00, $00, $00
36748     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
3674c     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
36750     00 00 00 00 
36754     00 00 00 00 | 	byte	$00[8]
36758     01 00 00 00 
3675c     06 00 00 00 
36760     00 00 00 00 
36764     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36768     00 00 00 00 
3676c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
36770     00 00 60 09 | 	long	(150 {__system___tx})<<20
36774     00 00 70 09 | 	long	(151 {__system___rx})<<20
36778     00 00 00 00 | 	byte	$00, $00, $00, $00
3677c     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
36780     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
36784     00 00 00 00 
      ...             
368f4     00 00 00 00 
368f8     00 00 00 00 | 	byte	$00[376]
368fc     00 69 03 00 | 	long	@@@__system__dat_ + 1844
36900     00 00 00 00 
36904     00 00 00 00 
36908     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3690c                 | 	alignl
3690c                 | _fatfs_cc_dat_
3690c     C7 00 FC 00 
36910     E9 00 E2 00 
36914     E4 00 E0 00 
36918     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3691c     EA 00 EB 00 
36920     E8 00 EF 00 
36924     EE 00 EC 00 
36928     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3692c     C9 00 E6 00 
36930     C6 00 F4 00 
36934     F6 00 F2 00 
36938     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3693c     FF 00 D6 00 
36940     DC 00 F8 00 
36944     A3 00 D8 00 
36948     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3694c     E1 00 ED 00 
36950     F3 00 FA 00 
36954     F1 00 D1 00 
36958     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3695c     BF 00 AE 00 
36960     AC 00 BD 00 
36964     BC 00 A1 00 
36968     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3696c     91 25 92 25 
36970     93 25 02 25 
36974     24 25 C1 00 
36978     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3697c     A9 00 63 25 
36980     51 25 57 25 
36984     5D 25 A2 00 
36988     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3698c     14 25 34 25 
36990     2C 25 1C 25 
36994     00 25 3C 25 
36998     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3699c     5A 25 54 25 
369a0     69 25 66 25 
369a4     60 25 50 25 
369a8     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
369ac     F0 00 D0 00 
369b0     CA 00 CB 00 
369b4     C8 00 31 01 
369b8     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
369bc     CF 00 18 25 
369c0     0C 25 88 25 
369c4     84 25 A6 00 
369c8     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
369cc     D3 00 DF 00 
369d0     D4 00 D2 00 
369d4     F5 00 D5 00 
369d8     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
369dc     DE 00 DA 00 
369e0     DB 00 D9 00 
369e4     FD 00 DD 00 
369e8     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
369ec     AD 00 B1 00 
369f0     17 20 BE 00 
369f4     B6 00 A7 00 
369f8     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
369fc     B0 00 A8 00 
36a00     B7 00 B9 00 
36a04     B3 00 B2 00 
36a08     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
36a0c     61 00 1A 03 
36a10     E0 00 17 03 
36a14     F8 00 07 03 
36a18     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
36a1c     78 01 00 01 
36a20     30 01 32 01 
36a24     06 01 39 01 
36a28     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
36a2c     2E 01 79 01 
36a30     06 01 80 01 
36a34     4D 00 43 02 
36a38     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
36a3c     82 01 84 01 
36a40     84 01 86 01 
36a44     87 01 87 01 
36a48     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
36a4c     8B 01 8B 01 
36a50     8D 01 8E 01 
36a54     8F 01 90 01 
36a58     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
36a5c     93 01 94 01 
36a60     F6 01 96 01 
36a64     97 01 98 01 
36a68     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
36a6c     9B 01 9C 01 
36a70     9D 01 20 02 
36a74     9F 01 A0 01 
36a78     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
36a7c     A2 01 A4 01 
36a80     A4 01 A6 01 
36a84     A7 01 A7 01 
36a88     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
36a8c     AB 01 AC 01 
36a90     AC 01 AE 01 
36a94     AF 01 AF 01 
36a98     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
36a9c     B3 01 B3 01 
36aa0     B5 01 B5 01 
36aa4     B7 01 B8 01 
36aa8     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
36aac     BB 01 BC 01 
36ab0     BC 01 BE 01 
36ab4     F7 01 C0 01 
36ab8     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
36abc     C3 01 C4 01 
36ac0     C5 01 C4 01 
36ac4     C7 01 C8 01 
36ac8     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
36acc     CB 01 CA 01 
36ad0     CD 01 10 01 
36ad4     DD 01 01 00 
36ad8     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
36adc     12 01 F3 01 
36ae0     03 00 F1 01 
36ae4     F4 01 F4 01 
36ae8     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
36aec     22 02 12 01 
36af0     3A 02 09 00 
36af4     65 2C 3B 02 
36af8     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
36afc     66 2C 3F 02 
36b00     40 02 41 02 
36b04     41 02 46 02 
36b08     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
36b0c     40 00 81 01 
36b10     86 01 55 02 
36b14     89 01 8A 01 
36b18     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
36b1c     5A 02 90 01 
36b20     5C 02 5D 02 
36b24     5E 02 5F 02 
36b28     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
36b2c     62 02 94 01 
36b30     64 02 65 02 
36b34     66 02 67 02 
36b38     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
36b3c     6A 02 62 2C 
36b40     6C 02 6D 02 
36b44     6E 02 9C 01 
36b48     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
36b4c     9D 01 73 02 
36b50     74 02 9F 01 
36b54     76 02 77 02 
36b58     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
36b5c     7A 02 7B 02 
36b60     7C 02 64 2C 
36b64     7E 02 7F 02 
36b68     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
36b6c     82 02 A9 01 
36b70     84 02 85 02 
36b74     86 02 87 02 
36b78     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
36b7c     B1 01 B2 01 
36b80     45 02 8D 02 
36b84     8E 02 8F 02 
36b88     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
36b8c     B7 01 7B 03 
36b90     03 00 FD 03 
36b94     FE 03 FF 03 
36b98     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
36b9c     86 03 88 03 
36ba0     89 03 8A 03 
36ba4     B1 03 11 03 
36ba8     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
36bac     A3 03 A3 03 
36bb0     C4 03 08 03 
36bb4     CC 03 03 00 
36bb8     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
36bbc     8F 03 D8 03 
36bc0     18 01 F2 03 
36bc4     0A 00 F9 03 
36bc8     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
36bcc     F5 03 F6 03 
36bd0     F7 03 F7 03 
36bd4     F9 03 FA 03 
36bd8     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
36bdc     20 03 50 04 
36be0     10 07 60 04 
36be4     22 01 8A 04 
36be8     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
36bec     0E 01 CF 04 
36bf0     01 00 C0 04 
36bf4     D0 04 44 01 
36bf8     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
36bfc     00 00 7D 1D 
36c00     01 00 63 2C 
36c04     00 1E 96 01 
36c08     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
36c0c     00 1F 08 06 
36c10     10 1F 06 06 
36c14     20 1F 08 06 
36c18     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
36c1c     40 1F 06 06 
36c20     51 1F 07 00 
36c24     59 1F 52 1F 
36c28     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
36c2c     5D 1F 56 1F 
36c30     5F 1F 60 1F 
36c34     08 06 70 1F 
36c38     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
36c3c     BB 1F C8 1F 
36c40     C9 1F CA 1F 
36c44     CB 1F DA 1F 
36c48     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
36c4c     F9 1F EA 1F 
36c50     EB 1F FA 1F 
36c54     FB 1F 80 1F 
36c58     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
36c5c     08 06 A0 1F 
36c60     08 06 B0 1F 
36c64     04 00 B8 1F 
36c68     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
36c6c     BC 1F CC 1F 
36c70     01 00 C3 1F 
36c74     D0 1F 02 06 
36c78     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
36c7c     E5 1F 01 00 
36c80     EC 1F F3 1F 
36c84     01 00 FC 1F 
36c88     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
36c8c     32 21 70 21 
36c90     10 02 84 21 
36c94     01 00 83 21 
36c98     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
36c9c     30 2C 2F 04 
36ca0     60 2C 02 01 
36ca4     67 2C 06 01 
36ca8     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
36cac     80 2C 64 01 
36cb0     00 2D 26 08 
36cb4     41 FF 1A 03 
36cb8     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
36cbc     05 07 09 0E 
36cc0     10 12 14 16 
36cc4     18 1C 1E 43 
36cc8     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
36ccc     41 41 43 45 
36cd0     45 45 49 49 
36cd4     49 41 41 45 
36cd8     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
36cdc     4F 55 55 59 
36ce0     4F 55 4F 9C 
36ce4     4F 9E 9F 41 
36ce8     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
36cec     A5 A6 A7 A8 
36cf0     A9 AA AB AC 
36cf4     AD AE AF B0 
36cf8     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
36cfc     41 41 41 B8 
36d00     B9 BA BB BC 
36d04     BD BE BF C0 
36d08     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
36d0c     C5 41 41 C8 
36d10     C9 CA CB CC 
36d14     CD CE CF D1 
36d18     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
36d1c     49 49 49 49 
36d20     D9 DA DB DC 
36d24     DD 49 DF 4F 
36d28     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
36d2c     4F E6 E8 E8 
36d30     55 55 55 59 
36d34     59 EE EF F0 
36d38     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
36d3c     F5 F6 F7 F8 
36d40     F9 FA FB FC 
36d44     FD FE FF 00 
36d48     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
36d4c     00 00 00 00 | 	byte	$00, $00, $00, $00
36d50     00 00 50 08 | 	long	(133 {_fatfs_cc_v_close})<<20
36d54     00 00 60 08 | 	long	(134 {_fatfs_cc_v_read})<<20
36d58     00 00 70 08 | 	long	(135 {_fatfs_cc_v_write})<<20
36d5c     00 00 80 08 | 	long	(136 {_fatfs_cc_v_lseek})<<20
36d60     00 00 90 08 | 	long	(137 {_fatfs_cc_v_ioctl})<<20
36d64     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_flush})<<20
36d68     00 00 00 00 
36d6c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
36d70     00 00 A0 08 | 	long	(138 {_fatfs_cc_v_open})<<20
36d74     00 00 B0 08 | 	long	(139 {_fatfs_cc_v_creat})<<20
36d78     00 00 C0 08 | 	long	(140 {_fatfs_cc_v_opendir})<<20
36d7c     00 00 D0 08 | 	long	(141 {_fatfs_cc_v_closedir})<<20
36d80     00 00 E0 08 | 	long	(142 {_fatfs_cc_v_readdir})<<20
36d84     00 00 F0 08 | 	long	(143 {_fatfs_cc_v_stat})<<20
36d88     00 00 00 09 | 	long	(144 {_fatfs_cc_v_mkdir})<<20
36d8c     00 00 10 09 | 	long	(145 {_fatfs_cc_v_rmdir})<<20
36d90     00 00 20 09 | 	long	(146 {_fatfs_cc_v_remove})<<20
36d94     00 00 30 09 | 	long	(147 {_fatfs_cc_v_rename})<<20
36d98     00 00 40 09 | 	long	(148 {_fatfs_cc_v_init})<<20
36d9c     00 00 50 09 | 	long	(149 {_fatfs_cc_v_deinit})<<20
36da0     FF FF FF FF 
36da4     1F 00 00 00 
36da8     1C 00 00 00 
36dac     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
36db0     1E 00 00 00 
36db4     1F 00 00 00 
36db8     1E 00 00 00 
36dbc     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
36dc0     1F 00 00 00 
36dc4     1E 00 00 00 
36dc8     1F 00 00 00 
36dcc     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
36dd0     1F 00 00 00 
36dd4     00 00 00 00 
36dd8     1F 00 00 00 
36ddc     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
36de0     5A 00 00 00 
36de4     78 00 00 00 
36de8     97 00 00 00 
36dec     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
36df0     D4 00 00 00 
36df4     F3 00 00 00 
36df8     11 01 00 00 
36dfc     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
36e00     4E 01 00 00 
36e04     6D 01 00 00 
36e08     FF FF FF FF 
36e0c     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
36e10     00 00 00 00 
      ...             
36e28     00 00 00 00 
36e2c     00 00 00 00 | 	byte	$00[32]
36e30     4E 6E 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
36e34     52 6E 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
36e38     00 00 00 00 
36e3c     00 00 00 00 
36e40     00 00 00 00 
36e44     00 00 00 00 
36e48     00 00       | 	byte	$00[18]
36e4a     3F 3F 3F 00 
36e4e     55 43 54 00 
36e52     55 43 54 00 
36e56     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
36e5a     00 00 00 00 
36e5e     00 00 00    | 	byte	$00[7]
36e61     CA 9A 3B 00 
36e65     00 00 00 01 
36e69     01 01 01 01 
36e6d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
36e71     91 11 11 11 
36e75     11 01 01 01 
36e79     01 01 01 01 
36e7d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
36e81     01 01 01 01 
36e85     01 01 01    | 	byte	$01[7]
36e88     90 20 20 20 
36e8c     20 20 20 20 
36e90     20 20 20 20 
36e94     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
36e98     42 42 42 42 
36e9c     42 42 42 42 
36ea0     42 42       | 	byte	$42[10]
36ea2     20 20 20 20 
36ea6     20 20 20    | 	byte	$20[7]
36ea9     44 44 44 44 
36ead     44 44       | 	byte	$44[6]
36eaf     04 04 04 04 
36eb3     04 04 04 04 
36eb7     04 04 04 04 
36ebb     04 04 04 04 
36ebf     04 04 04 04 | 	byte	$04[20]
36ec3     20 20 20 20 
36ec7     20 20       | 	byte	$20[6]
36ec9     48 48 48 48 
36ecd     48 48       | 	byte	$48[6]
36ecf     08 08 08 08 
36ed3     08 08 08 08 
36ed7     08 08 08 08 
36edb     08 08 08 08 
36edf     08 08 08 08 | 	byte	$08[20]
36ee3     20 20 20 20 
36ee7     01 00 00 00 
36eeb     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
36eec                 | __methodtable__
36eec     98 73 01 00 | 	long	@_do_no_command
36ef0     58 F7 00 00 | 	long	@_do_plus
36ef4     44 FC 00 00 | 	long	@_do_minus
36ef8     0C 01 01 00 | 	long	@_do_or
36efc     24 02 01 00 | 	long	@_do_mul
36f00     B0 07 01 00 | 	long	@_do_fdiv
36f04     F4 FF 00 00 | 	long	@_do_and
36f08     90 05 01 00 | 	long	@_do_div
36f0c     78 09 01 00 | 	long	@_do_mod
36f10     98 0B 01 00 | 	long	@_do_shl
36f14     B0 0C 01 00 | 	long	@_do_shr
36f18     C8 0D 01 00 | 	long	@_do_power
36f1c     D8 EA 00 00 | 	long	@_do_getvar
36f20     58 A3 00 00 | 	long	@_do_push
36f24     D8 E4 00 00 | 	long	@_do_assign
36f28     44 45 01 00 | 	long	@_do_cls
36f2c     E4 DE 00 00 | 	long	@_do_new
36f30     E8 45 01 00 | 	long	@_do_plot
36f34     B8 46 01 00 | 	long	@_do_draw
36f38     2C 50 01 00 | 	long	@_do_print
36f3c     24 49 01 00 | 	long	@_do_circle
36f40     AC 47 01 00 | 	long	@_do_fcircle
36f44     9C 4A 01 00 | 	long	@_do_box
36f48     44 4E 01 00 | 	long	@_do_frame
36f4c     B0 45 01 00 | 	long	@_do_color
36f50     BC 82 00 00 | 	long	@_do_for
36f54     30 85 00 00 | 	long	@_do_next
36f58     48 DC 00 00 | 	long	@_do_list
36f5c     B0 B6 00 00 | 	long	@_do_run
36f60     94 E3 00 00 | 	long	@_do_error
36f64     90 E0 00 00 | 	long	@_do_fast_goto
36f68     80 E1 00 00 | 	long	@_do_find_goto
36f6c     90 E3 00 00 | 	long	@_do_slow_goto
36f70     90 2C 01 00 | 	long	@_do_converttoint
36f74     9C A9 00 00 | 	long	@_test_csave
36f78     00 AD 00 00 | 	long	@_do_save
36f7c     FC B0 00 00 | 	long	@_do_load
36f80     90 5E 01 00 | 	long	@_do_pinwrite
36f84     2C 69 01 00 | 	long	@_do_waitms
36f88     68 6A 01 00 | 	long	@_do_waitvbl
36f8c     08 6E 01 00 | 	long	@_do_if
36f90     EC 6E 01 00 | 	long	@_do_else
36f94     B4 6F 01 00 | 	long	@_do_nothing
36f98     90 0F 01 00 | 	long	@_do_eq
36f9c     08 1E 01 00 | 	long	@_do_ge
36fa0     E0 22 01 00 | 	long	@_do_le
36fa4     68 14 01 00 | 	long	@_do_gt
36fa8     40 19 01 00 | 	long	@_do_lt
36fac     B8 27 01 00 | 	long	@_do_ne
36fb0     6C 2F 01 00 | 	long	@_do_rnd
36fb4     B8 6F 01 00 | 	long	@_do_brun
36fb8     84 72 01 00 | 	long	@_do_beep
36fbc     98 6A 01 00 | 	long	@_do_dir
36fc0     F4 54 01 00 | 	long	@_do_paper
36fc4     7C 55 01 00 | 	long	@_do_ink
36fc8     18 56 01 00 | 	long	@_do_font
36fcc     94 56 01 00 | 	long	@_do_mode
36fd0     F0 71 01 00 | 	long	@_do_mouse
36fd4     DC 44 01 00 | 	long	@_do_gettime
36fd8     24 72 01 00 | 	long	@_do_cursor
36fdc     58 72 01 00 | 	long	@_do_click
36fe0     68 42 01 00 | 	long	@_do_mousex
36fe4     AC 42 01 00 | 	long	@_do_mousey
36fe8     34 43 01 00 | 	long	@_do_mousek
36fec     F0 42 01 00 | 	long	@_do_mousew
36ff0     40 32 01 00 | 	long	@_do_sin
36ff4     94 39 01 00 | 	long	@_do_stick
36ff8     18 3B 01 00 | 	long	@_do_strig
36ffc     7C 41 01 00 | 	long	@_do_sprite
37000     EC 3D 01 00 | 	long	@_do_defsprite
37004     9C 3C 01 00 | 	long	@_do_getpixel
37008     74 6A 01 00 | 	long	@_do_waitclock
3700c     A4 73 01 00 | 	long	@_do_negative
37010     78 43 01 00 | 	long	@_do_rdpin
37014     E4 43 01 00 | 	long	@_do_rqpin
37018     58 44 01 00 | 	long	@_do_pinread
3701c     28 61 01 00 | 	long	@_do_wrpin
37020     A8 61 01 00 | 	long	@_do_wxpin
37024     28 62 01 00 | 	long	@_do_wypin
37028     18 5F 01 00 | 	long	@_do_pinfloat
3702c     58 5F 01 00 | 	long	@_do_pinlo
37030     98 5F 01 00 | 	long	@_do_pinhi
37034     18 60 01 00 | 	long	@_do_pinstart
37038     D8 5F 01 00 | 	long	@_do_pintoggle
3703c     A8 62 01 00 | 	long	@_do_position
37040     4C 33 01 00 | 	long	@_do_cos
37044     6C 34 01 00 | 	long	@_do_tan
37048     90 37 01 00 | 	long	@_do_atn
3704c     78 35 01 00 | 	long	@_do_asin
37050     84 36 01 00 | 	long	@_do_acos
37054     A4 38 01 00 | 	long	@_do_sqr
37058     84 4C 01 00 | 	long	@_do_fill
3705c     50 D2 00 00 | 	long	@_do_defsnd
37060     38 BA 00 00 | 	long	@_do_defenv
37064     10 6F 01 00 | 	long	@_do_rad
37068     38 6F 01 00 | 	long	@_do_deg
3706c     60 6F 01 00 | 	long	@_do_int
37070     E0 C6 00 00 | 	long	@_do_play
37074     F0 5B 01 00 | 	long	@_do_setdelay
37078     48 5B 01 00 | 	long	@_do_setenv
3707c     98 5C 01 00 | 	long	@_do_setlen
37080     E8 5D 01 00 | 	long	@_do_setpan
37084     40 5D 01 00 | 	long	@_do_setvol
37088     F8 59 01 00 | 	long	@_do_setwave
3708c     A0 5A 01 00 | 	long	@_do_setsustain
37090     B8 D1 00 00 | 	long	@_do_release
37094     34 31 01 00 | 	long	@_do_getenvsustain
37098     30 63 01 00 | 	long	@_do_poke
3709c     08 64 01 00 | 	long	@_do_dpoke
370a0     E0 64 01 00 | 	long	@_do_lpoke
370a4     B8 65 01 00 | 	long	@_do_peek
370a8     68 66 01 00 | 	long	@_do_dpeek
370ac     14 67 01 00 | 	long	@_do_lpeek
370b0     24 68 01 00 | 	long	@_do_adr
370b4     C0 67 01 00 | 	long	@_do_fre
370b8     28 68 01 00 | 	long	@_do_getnotevalue
370bc     90 F0 00 00 | 	long	@_do_getaddr
370c0     80 F4 00 00 | 	long	@_do_inkey
370c4     54 74 01 00 | 	long	@_do_abs
370c8     88 B4 01 00 | 	long	@_hg010b_spin2_putchar
370cc     B8 BC 02 00 | 	long	@__struct___bas_wrap_sender_tx
370d0     FC BC 02 00 | 	long	@__struct___bas_wrap_sender_rx
370d4     44 BD 02 00 | 	long	@__struct___bas_wrap_sender_close
370d8     E8 BB 02 00 | 	long	@__struct__s_vfs_file_t_putchar
370dc     58 BC 02 00 | 	long	@__struct__s_vfs_file_t_getchar
370e0     A0 BB 02 00 | 	long	@___strs_cl_pfunc
370e4     00 1B 02 00 | 	long	@__system____root_opendir
370e8     9C 1B 02 00 | 	long	@__system____root_closedir
370ec     18 1B 02 00 | 	long	@__system____root_readdir
370f0     A4 1B 02 00 | 	long	@__system____root_stat
370f4     2C 14 02 00 | 	long	@__system____default_putc
370f8     B0 13 02 00 | 	long	@__system____default_getc
370fc     D4 14 02 00 | 	long	@__system____default_flush
37100     A4 A6 02 00 | 	long	@_fatfs_cc_v_close
37104     C0 AA 02 00 | 	long	@_fatfs_cc_v_read
37108     D4 AB 02 00 | 	long	@_fatfs_cc_v_write
3710c     B4 AC 02 00 | 	long	@_fatfs_cc_v_lseek
37110     3C AD 02 00 | 	long	@_fatfs_cc_v_ioctl
37114     90 AD 02 00 | 	long	@_fatfs_cc_v_open
37118     08 A6 02 00 | 	long	@_fatfs_cc_v_creat
3711c     E8 A6 02 00 | 	long	@_fatfs_cc_v_opendir
37120     5C A7 02 00 | 	long	@_fatfs_cc_v_closedir
37124     9C A7 02 00 | 	long	@_fatfs_cc_v_readdir
37128     D0 A8 02 00 | 	long	@_fatfs_cc_v_stat
3712c     50 AD 02 00 | 	long	@_fatfs_cc_v_mkdir
37130     70 AD 02 00 | 	long	@_fatfs_cc_v_rmdir
37134     60 AD 02 00 | 	long	@_fatfs_cc_v_remove
37138     80 AD 02 00 | 	long	@_fatfs_cc_v_rename
3713c     A0 AE 02 00 | 	long	@_fatfs_cc_v_init
37140     A8 AE 02 00 | 	long	@_fatfs_cc_v_deinit
37144     D8 C8 01 00 | 	long	@__system___tx
37148     18 C9 01 00 | 	long	@__system___rx
3714c     0C 27 02 00 | 	long	@__system___rxtxioctl_0630
37150     64 27 02 00 | 	long	@__system____dummy_flush_0631
37154     70 AE 02 00 | 	long	@_fatfs_cc_v_flush
37158                 | __heap_base
37158     00 00 00 00 
      ...             
65f58     00 00 00 00 
65f5c     00 00 00 00 | 	long	0[48002]
65f60                 | objmem
65f60     00 00 00 00 
      ...             
7565c     00 00 00 00 
75660     00 00 00 00 | 	long	0[15809]
75664                 | stackspace
75664     00 00 00 00 | 	long	0[1]
75668 100             | 	org	COG_BSS_START
75668 100             | _var01
75668 100             | 	res	1
75668 101             | _var02
75668 101             | 	res	1
75668 102             | _var03
75668 102             | 	res	1
75668 103             | _var04
75668 103             | 	res	1
75668 104             | _var05
75668 104             | 	res	1
75668 105             | _var06
75668 105             | 	res	1
75668 106             | _var07
75668 106             | 	res	1
75668 107             | _var08
75668 107             | 	res	1
75668 108             | _var09
75668 108             | 	res	1
75668 109             | arg01
75668 109             | 	res	1
75668 10a             | arg02
75668 10a             | 	res	1
75668 10b             | arg03
75668 10b             | 	res	1
75668 10c             | arg04
75668 10c             | 	res	1
75668 10d             | arg05
75668 10d             | 	res	1
75668 10e             | arg06
75668 10e             | 	res	1
75668 10f             | local01
75668 10f             | 	res	1
75668 110             | local02
75668 110             | 	res	1
75668 111             | local03
75668 111             | 	res	1
75668 112             | local04
75668 112             | 	res	1
75668 113             | local05
75668 113             | 	res	1
75668 114             | local06
75668 114             | 	res	1
75668 115             | local07
75668 115             | 	res	1
75668 116             | local08
75668 116             | 	res	1
75668 117             | local09
75668 117             | 	res	1
75668 118             | local10
75668 118             | 	res	1
75668 119             | local11
75668 119             | 	res	1
75668 11a             | local12
75668 11a             | 	res	1
75668 11b             | local13
75668 11b             | 	res	1
75668 11c             | local14
75668 11c             | 	res	1
75668 11d             | local15
75668 11d             | 	res	1
75668 11e             | local16
75668 11e             | 	res	1
75668 11f             | local17
75668 11f             | 	res	1
75668 120             | local18
75668 120             | 	res	1
75668 121             | local19
75668 121             | 	res	1
75668 122             | local20
75668 122             | 	res	1
75668 123             | local21
75668 123             | 	res	1
75668 124             | local22
75668 124             | 	res	1
75668 125             | local23
75668 125             | 	res	1
75668 126             | local24
75668 126             | 	res	1
75668 127             | local25
75668 127             | 	res	1
75668 128             | local26
75668 128             | 	res	1
75668 129             | local27
75668 129             | 	res	1
75668 12a             | local28
75668 12a             | 	res	1
75668 12b             | local29
75668 12b             | 	res	1
75668 12c             | local30
75668 12c             | 	res	1
75668 12d             | local31
75668 12d             | 	res	1
75668 12e             | local32
75668 12e             | 	res	1
75668 12f             | local33
75668 12f             | 	res	1
75668 130             | local34
75668 130             | 	res	1
75668 131             | local35
75668 131             | 	res	1
75668 132             | muldiva_
75668 132             | 	res	1
75668 133             | muldivb_
75668 133             | 	res	1
75668 134             | 	fit	480
75668 134             | 
