00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 B0 23 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 58 0D 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 58 0A 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 60 84 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 38 FD 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 90 F8 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 A0 65 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 78 04 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 08 97 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 B8 BE 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 70 BC 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 48 CE 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 2C 29 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     60 34 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     F4 48 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     8C E4 05 F1 | 	add	objptr, ##42124
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     8C E4 85 F1 | 	sub	objptr, ##42124
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     34 4C B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     88 53 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     80 4D B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     50 E4 05 F1 | 	add	objptr, ##42064
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     80 E5 85 F1 | 	sub	objptr, ##36224
009c0     44 4B B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     38 19 B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     8C E4 05 F1 | 	add	objptr, ##42124
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     8C E4 85 F1 | 	sub	objptr, ##42124
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     74 E4 05 F1 | 	add	objptr, ##42100
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     74 E4 85 F1 | 	sub	objptr, ##42100
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     30 17 B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     D0 16 B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     94 E4 05 F1 | 	add	objptr, ##42132
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     56 E4 85 F1 | 	sub	objptr, ##42070
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     58 E4 05 F1 | 	add	objptr, ##42072
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     56 E4 85 F1 | 	sub	objptr, ##42070
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     60 16 B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     A8 2E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     94 E4 05 F1 | 	add	objptr, ##42132
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     94 E4 85 F1 | 	sub	objptr, ##42132
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     C4 31 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     70 48 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     C4 4F B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     C0 49 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     AA 01 00 FF 
00ccc     16 51 06 F6 | 	mov	local22, ##@LR__5387
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     F4 14 B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     A0 6E B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     B0 4C B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     74 E4 05 F1 | 	add	objptr, ##42100
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     74 E4 85 F1 | 	sub	objptr, ##42100
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     14 36 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     44 38 B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     FC 46 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     50 4E B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     4C 48 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     90 13 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     84 2D B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     78 2D B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     08 2D B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     D4 2C B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     F4 2C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     E4 2C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     34 12 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     E0 11 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     B0 11 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     94 E4 05 F1 | 	add	objptr, ##42132
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     56 E4 85 F1 | 	sub	objptr, ##42070
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     58 E4 05 F1 | 	add	objptr, ##42072
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     56 E4 85 F1 | 	sub	objptr, ##42070
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     48 11 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     90 29 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     94 E4 05 F1 | 	add	objptr, ##42132
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     94 E4 85 F1 | 	sub	objptr, ##42132
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     6C 2A B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     30 10 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     DC 0F B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     AC 0F B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     94 E4 05 F1 | 	add	objptr, ##42132
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     56 E4 85 F1 | 	sub	objptr, ##42070
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     58 E4 05 F1 | 	add	objptr, ##42072
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     56 E4 85 F1 | 	sub	objptr, ##42070
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     44 0F B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     8C 27 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     94 E4 05 F1 | 	add	objptr, ##42132
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     94 E4 85 F1 | 	sub	objptr, ##42132
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     AA 01 00 FF 
01328     17 51 06 F6 | 	mov	local22, ##@LR__5388
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     3A E4 05 F1 | 	add	objptr, ##42042
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     78 E4 85 F1 | 	sub	objptr, ##42104
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     78 E4 05 C1 |  if_b	add	objptr, ##42104
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     78 E4 85 C1 |  if_b	sub	objptr, ##42104
0137c     52 00 00 FF 
01380     78 E4 05 F1 | 	add	objptr, ##42104
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     78 E4 85 F1 | 	sub	objptr, ##42104
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     B4 28 B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     3A E4 05 F1 | 	add	objptr, ##42042
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     78 E4 85 F1 | 	sub	objptr, ##42104
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     78 E4 05 31 |  if_ae	add	objptr, ##42104
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     78 E4 85 31 |  if_ae	sub	objptr, ##42104
013dc     52 00 00 FF 
013e0     78 E4 05 F1 | 	add	objptr, ##42104
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     78 E4 85 F1 | 	sub	objptr, ##42104
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     54 28 B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     40 E4 05 F1 | 	add	objptr, ##42048
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     48 E4 85 F1 | 	sub	objptr, ##13896
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     48 E4 05 C1 |  if_b	add	objptr, ##13896
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     7C E4 85 C1 |  if_b	sub	objptr, ##42108
01458     52 00 00 FF 
0145c     7C E4 05 F1 | 	add	objptr, ##42108
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     7C E4 85 F1 | 	sub	objptr, ##42108
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     A8 27 B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     40 E4 05 F1 | 	add	objptr, ##42048
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     7C E4 85 F1 | 	sub	objptr, ##42108
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     7C E4 05 31 |  if_ae	add	objptr, ##42108
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     7C E4 85 31 |  if_ae	sub	objptr, ##42108
014b8     52 00 00 FF 
014bc     7C E4 05 F1 | 	add	objptr, ##42108
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     7C E4 85 F1 | 	sub	objptr, ##42108
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     4C 27 B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     74 E4 05 F1 | 	add	objptr, ##42100
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     74 E4 85 F1 | 	sub	objptr, ##42100
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     98 15 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     88 15 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     F7 E5 05 F1 | 	add	objptr, ##41975
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     40 E4 85 F1 | 	sub	objptr, ##42048
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     04 47 B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     40 E4 05 F1 | 	add	objptr, ##42048
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     40 E4 85 F1 | 	sub	objptr, ##42048
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     DC 46 B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     40 E4 05 F1 | 	add	objptr, ##42048
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     40 E4 85 F1 | 	sub	objptr, ##42048
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     B4 46 B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     40 E4 05 F1 | 	add	objptr, ##42048
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     40 E4 85 F1 | 	sub	objptr, ##42048
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     05 4A 05 F6 | 	mov	COUNT_, #5
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     C4 3B B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     00 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     14 3C B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     04 3C B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     05 14 06 F6 | 	mov	arg02, #5
01684     F4 3B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     34 3C B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 14 02 F6 | 	mov	arg02, result1
0169c     13 FB 01 F6 | 	mov	result1, local01
016a0     02 FA 65 F0 | 	shl	result1, #2
016a4     51 00 00 FF 
016a8     58 E5 05 F1 | 	add	objptr, ##41816
016ac     F2 FA 01 F1 | 	add	result1, objptr
016b0     FD 2A 62 FC | 	wrlong	local03, result1
016b4     13 FB 01 F6 | 	mov	result1, local01
016b8     02 FA 65 F0 | 	shl	result1, #2
016bc     1C E4 05 F1 | 	add	objptr, #28
016c0     F2 FA 01 F1 | 	add	result1, objptr
016c4     FD 2C 62 FC | 	wrlong	local04, result1
016c8     13 FB 01 F6 | 	mov	result1, local01
016cc     02 FA 65 F0 | 	shl	result1, #2
016d0     1C E4 05 F1 | 	add	objptr, #28
016d4     F2 FA 01 F1 | 	add	result1, objptr
016d8     FD 2E 62 FC | 	wrlong	local05, result1
016dc     13 2F 02 F6 | 	mov	local05, local01
016e0     02 2E 66 F0 | 	shl	local05, #2
016e4     1C E4 05 F1 | 	add	objptr, #28
016e8     F2 2E 02 F1 | 	add	local05, objptr
016ec     17 15 62 FC | 	wrlong	arg02, local05
016f0     60 00 00 FF 
016f4     00 2A 06 F1 | 	add	local03, ##49152
016f8     0F 2A 46 F0 | 	shr	local03, #15
016fc     01 2E 06 F6 | 	mov	local05, #1
01700     15 2F 02 F1 | 	add	local05, local03
01704     60 00 00 FF 
01708     00 2C 06 F1 | 	add	local04, ##49152
0170c     0F 2C 46 F0 | 	shr	local04, #15
01710     01 2A 06 F6 | 	mov	local03, #1
01714     16 2B 02 F1 | 	add	local03, local04
01718     13 2D 02 F6 | 	mov	local04, local01
0171c     02 2C 66 F0 | 	shl	local04, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 2C 02 F1 | 	add	local04, objptr
01728     02 2A 66 F0 | 	shl	local03, #2
0172c     15 2F 02 F1 | 	add	local05, local03
01730     16 2F 62 FC | 	wrlong	local05, local04
01734     13 2F 02 F6 | 	mov	local05, local01
01738     02 2E 66 F0 | 	shl	local05, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 2E 02 F1 | 	add	local05, objptr
01744     14 13 02 F6 | 	mov	arg01, local02
01748     51 00 00 FF 
0174c     E4 E5 85 F1 | 	sub	objptr, ##41956
01750     F4 3A B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
01754     17 FB 61 FC | 	wrlong	result1, local05
01758     01 26 06 F1 | 	add	local01, #1
0175c                 | LR__0061
0175c     01 28 06 F1 | 	add	local02, #1
01760     07 28 16 F2 | 	cmp	local02, #7 wc
01764     E4 FE 9F CD |  if_b	jmp	#LR__0060
01768     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
0176c                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
0176c                 | LR__0062
0176c     07 26 16 F2 | 	cmp	local01, #7 wc
01770     3C 00 90 3D |  if_ae	jmp	#LR__0064
01774     13 2F 02 F6 | 	mov	local05, local01
01778     02 2E 66 F0 | 	shl	local05, #2
0177c     51 00 00 FF 
01780     C8 E5 05 F1 | 	add	objptr, ##41928
01784     F2 2E 02 F1 | 	add	local05, objptr
01788     17 01 68 FC | 	wrlong	#0, local05
0178c     13 2F 02 F6 | 	mov	local05, local01
01790     02 2E 66 F0 | 	shl	local05, #2
01794     1C E4 05 F1 | 	add	objptr, #28
01798     F2 2E 02 F1 | 	add	local05, objptr
0179c     17 01 68 FC | 	wrlong	#0, local05
017a0     01 26 06 F1 | 	add	local01, #1
017a4     51 00 00 FF 
017a8     E4 E5 85 F1 | 	sub	objptr, ##41956
017ac     BC FF 9F FD | 	jmp	#LR__0062
017b0                 | LR__0063
017b0                 | LR__0064
017b0     A7 F0 03 F6 | 	mov	ptra, fp
017b4     B2 00 A0 FD | 	call	#popregs_
017b8                 | _gethdi_ret
017b8     2D 00 64 FD | 	ret
017bc                 | 
017bc                 | ' 
017bc                 | ' '-------------------------------------------------------------------------------------------------------------
017bc                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
017bc                 | ' '-------------------------------------------------------------------------------------------------------------
017bc                 | ' 
017bc                 | ' '-------------------------------------------------------------------------------------------------------------
017bc                 | ' '
017bc                 | ' '                                     LINE INTERPRETER/TOKENIZER
017bc                 | ' '
017bc                 | ' '-------------------------------------------------------------------------------------------------------------
017bc                 | ' 
017bc                 | ' 
017bc                 | ' sub interpret
017bc                 | _interpret
017bc     31 4A 05 F6 | 	mov	COUNT_, #49
017c0     A8 00 A0 FD | 	call	#pushregs_
017c4     01 00 00 FF 
017c8     84 F0 07 F1 | 	add	ptra, ##644
017cc     37 00 00 FF 
017d0     1C E4 05 F1 | 	add	objptr, ##28188
017d4     F2 12 02 FB | 	rdlong	arg01, objptr
017d8     37 00 00 FF 
017dc     1C E4 85 F1 | 	sub	objptr, ##28188
017e0     A0 66 B2 FD | 	call	#__system__RTrim_S
017e4     FD 12 02 F6 | 	mov	arg01, result1
017e8     D8 65 B2 FD | 	call	#__system__LTrim_S
017ec     37 00 00 FF 
017f0     20 E4 05 F1 | 	add	objptr, ##28192
017f4     F2 FA 61 FC | 	wrlong	result1, objptr
017f8     04 E4 05 F1 | 	add	objptr, #4
017fc     FF FF FF FF 
01800     F2 FE 6B FC | 	wrlong	##-1, objptr
01804     1B 00 00 FF 
01808     38 E4 05 F1 | 	add	objptr, ##13880
0180c     F2 00 68 FC | 	wrlong	#0, objptr
01810     07 00 00 FF 
01814     E0 E5 85 F1 | 	sub	objptr, ##4064
01818     F2 00 68 FC | 	wrlong	#0, objptr
0181c     4A 00 00 FF 
01820     7C E4 85 F1 | 	sub	objptr, ##38012
01824     00 26 06 F6 | 	mov	local01, #0
01828                 | LR__0070
01828                 | ' 
01828                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01828                 | ' 
01828                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01828                 | ' 
01828                 | ' 108 
01828                 | ' for i=0 to 125: separators(i)=0 :next i
01828     00 28 06 F6 | 	mov	local02, #0
0182c     38 4E 05 F1 | 	add	fp, #56
01830     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01834                 | LR__0071
01834     14 2B 02 F6 | 	mov	local03, local02
01838     02 2A 66 F0 | 	shl	local03, #2
0183c     A7 2A 02 F1 | 	add	local03, fp
01840     15 01 68 FC | 	wrlong	#0, local03
01844     01 28 06 F1 | 	add	local02, #1
01848     7E 28 56 F2 | 	cmps	local02, #126 wc
0184c     E4 FF 9F CD |  if_b	jmp	#LR__0071
01850                 | LR__0072
01850     38 4E 85 F1 | 	sub	fp, #56
01854                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01854     00 28 06 F6 | 	mov	local02, #0
01858     35 00 00 FF 
0185c     0C E4 05 F1 | 	add	objptr, ##27148
01860     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01864                 | LR__0073
01864     14 2D 02 F6 | 	mov	local04, local02
01868     03 2C 66 F0 | 	shl	local04, #3
0186c     F2 2C 02 F1 | 	add	local04, objptr
01870     AA 01 00 FF 
01874     18 17 06 F6 | 	mov	arg03, ##@LR__5389
01878     16 17 62 FC | 	wrlong	arg03, local04
0187c     14 2D 02 F6 | 	mov	local04, local02
01880     03 2C 66 F0 | 	shl	local04, #3
01884     F2 2E 02 F6 | 	mov	local05, objptr
01888     F2 2C 02 F1 | 	add	local04, objptr
0188c     00 30 06 F6 | 	mov	local06, #0
01890     04 2C 06 F1 | 	add	local04, #4
01894     16 01 68 FC | 	wrlong	#0, local04
01898     01 28 06 F1 | 	add	local02, #1
0189c     7E 28 56 F2 | 	cmps	local02, #126 wc
018a0     C0 FF 9F CD |  if_b	jmp	#LR__0073
018a4                 | LR__0074
018a4     02 00 00 FF 
018a8     10 E4 05 F1 | 	add	objptr, ##1040
018ac     F2 12 02 FB | 	rdlong	arg01, objptr
018b0     37 00 00 FF 
018b4     1C E4 85 F1 | 	sub	objptr, ##28188
018b8     C8 65 B2 FD | 	call	#__system__RTrim_S
018bc     FD 12 02 F6 | 	mov	arg01, result1
018c0     00 65 B2 FD | 	call	#__system__LTrim_S
018c4     37 00 00 FF 
018c8     1C E4 05 F1 | 	add	objptr, ##28188
018cc     F2 FA 61 FC | 	wrlong	result1, objptr
018d0     AA 01 00 FF 
018d4     19 2D 06 F6 | 	mov	local04, ##@LR__5390
018d8     1B 00 00 FF 
018dc     7C E4 05 F1 | 	add	objptr, ##13948
018e0     F2 2C 62 FC | 	wrlong	local04, objptr
018e4     1B 00 00 FF 
018e8     7C E4 85 F1 | 	sub	objptr, ##13948
018ec     F2 12 02 FB | 	rdlong	arg01, objptr
018f0     37 00 00 FF 
018f4     1C E4 85 F1 | 	sub	objptr, ##28188
018f8     09 33 02 F6 | 	mov	local07, arg01
018fc     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01900                 | LR__0075
01900     19 FB C9 FA | 	rdbyte	result1, local07 wz
01904     01 32 06 51 |  if_ne	add	local07, #1
01908     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
0190c                 | LR__0076
0190c     09 33 8A F1 | 	sub	local07, arg01 wz
01910     52 00 00 FF 
01914     9C E4 05 F1 | 	add	objptr, ##42140
01918     F2 32 62 FC | 	wrlong	local07, objptr
0191c                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
0191c     52 00 00 FF 
01920     9C E4 85 F1 | 	sub	objptr, ##42140
01924     78 27 90 AD |  if_e	jmp	#LR__0206
01928     00 34 06 F6 | 	mov	local08, #0
0192c                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
0192c                 | ' for i=1 to len(line$)
0192c     01 28 06 F6 | 	mov	local02, #1
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 12 02 FB | 	rdlong	arg01, objptr
0193c     37 00 00 FF 
01940     1C E4 85 F1 | 	sub	objptr, ##28188
01944     09 33 02 F6 | 	mov	local07, arg01
01948     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
0194c                 | LR__0077
0194c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01950     01 32 06 51 |  if_ne	add	local07, #1
01954     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01958                 | LR__0078
01958     09 33 82 F1 | 	sub	local07, arg01
0195c     19 37 02 F6 | 	mov	local09, local07
01960     01 36 06 F1 | 	add	local09, #1
01964                 | LR__0079
01964     1B 29 52 F2 | 	cmps	local02, local09 wc
01968     AC 00 90 3D |  if_ae	jmp	#LR__0081
0196c                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
0196c     37 00 00 FF 
01970     1C E4 05 F1 | 	add	objptr, ##28188
01974     F2 12 02 FB | 	rdlong	arg01, objptr
01978     37 00 00 FF 
0197c     1C E4 85 F1 | 	sub	objptr, ##28188
01980     14 15 02 F6 | 	mov	arg02, local02
01984     01 16 06 F6 | 	mov	arg03, #1
01988     80 61 B2 FD | 	call	#__system__Mid_S
0198c     FD 12 02 F6 | 	mov	arg01, result1
01990     AA 01 00 FF 
01994     1A 15 06 F6 | 	mov	arg02, ##@LR__5391
01998     04 40 B2 FD | 	call	#__system___string_cmp
0199c     00 FA 0D F2 | 	cmp	result1, #0 wz
019a0     00 34 0E A2 |  if_e	cmp	local08, #0 wz
019a4     01 34 06 A6 |  if_e	mov	local08, #1
019a8     3C 00 90 AD |  if_e	jmp	#LR__0080
019ac     37 00 00 FF 
019b0     1C E4 05 F1 | 	add	objptr, ##28188
019b4     F2 12 02 FB | 	rdlong	arg01, objptr
019b8     37 00 00 FF 
019bc     1C E4 85 F1 | 	sub	objptr, ##28188
019c0     14 15 02 F6 | 	mov	arg02, local02
019c4     01 16 06 F6 | 	mov	arg03, #1
019c8     40 61 B2 FD | 	call	#__system__Mid_S
019cc     FD 12 02 F6 | 	mov	arg01, result1
019d0     AA 01 00 FF 
019d4     1C 15 06 F6 | 	mov	arg02, ##@LR__5392
019d8     C4 3F B2 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     01 34 0E A2 |  if_e	cmp	local08, #1 wz
019e4     00 34 06 A6 |  if_e	mov	local08, #0
019e8                 | LR__0080
019e8     14 2D 02 F6 | 	mov	local04, local02
019ec     03 2C 66 F0 | 	shl	local04, #3
019f0     35 00 00 FF 
019f4     0C E4 05 F1 | 	add	objptr, ##27148
019f8     F2 2E 02 F6 | 	mov	local05, objptr
019fc     F2 2C 02 F1 | 	add	local04, objptr
01a00     04 2C 06 F1 | 	add	local04, #4
01a04     16 35 62 FC | 	wrlong	local08, local04
01a08     01 28 06 F1 | 	add	local02, #1
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     4C FF 9F FD | 	jmp	#LR__0079
01a18                 | LR__0081
01a18     01 28 06 F6 | 	mov	local02, #1
01a1c                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a1c                 | LR__0082
01a1c     37 00 00 FF 
01a20     1C E4 05 F1 | 	add	objptr, ##28188
01a24     F2 12 02 FB | 	rdlong	arg01, objptr
01a28     37 00 00 FF 
01a2c     1C E4 85 F1 | 	sub	objptr, ##28188
01a30     14 15 02 F6 | 	mov	arg02, local02
01a34     01 16 06 F6 | 	mov	arg03, #1
01a38     D0 60 B2 FD | 	call	#__system__Mid_S
01a3c     FD 12 02 F6 | 	mov	arg01, result1
01a40     AA 01 00 FF 
01a44     1E 39 06 F6 | 	mov	local10, ##@LR__5393
01a48     1C 15 02 F6 | 	mov	arg02, local10
01a4c     50 3F B2 FD | 	call	#__system___string_cmp
01a50     00 FA 0D F2 | 	cmp	result1, #0 wz
01a54     34 00 90 5D |  if_ne	jmp	#LR__0083
01a58     14 2F 02 F6 | 	mov	local05, local02
01a5c     03 2E 66 F0 | 	shl	local05, #3
01a60     35 00 00 FF 
01a64     0C E4 05 F1 | 	add	objptr, ##27148
01a68     F2 30 02 F6 | 	mov	local06, objptr
01a6c     F2 2E 02 F1 | 	add	local05, objptr
01a70     04 2E 06 F1 | 	add	local05, #4
01a74     17 3B 02 FB | 	rdlong	local11, local05
01a78     04 2E 86 F1 | 	sub	local05, #4
01a7c     1D 3D 0A F6 | 	mov	local12, local11 wz
01a80     35 00 00 FF 
01a84     0C E4 85 F1 | 	sub	objptr, ##27148
01a88     24 00 90 AD |  if_e	jmp	#LR__0084
01a8c                 | LR__0083
01a8c     52 00 00 FF 
01a90     9C E4 05 F1 | 	add	objptr, ##42140
01a94     F2 3E 02 FB | 	rdlong	local13, objptr
01a98     52 00 00 FF 
01a9c     9C E4 85 F1 | 	sub	objptr, ##42140
01aa0     1F 41 02 F6 | 	mov	local14, local13
01aa4     20 29 52 F2 | 	cmps	local02, local14 wc
01aa8     01 28 06 C1 |  if_b	add	local02, #1
01aac     6C FF 9F CD |  if_b	jmp	#LR__0082
01ab0                 | LR__0084
01ab0                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01ab0     52 00 00 FF 
01ab4     9C E4 05 F1 | 	add	objptr, ##42140
01ab8     F2 2C 02 FB | 	rdlong	local04, objptr
01abc     52 00 00 FF 
01ac0     9C E4 85 F1 | 	sub	objptr, ##42140
01ac4     16 29 52 F2 | 	cmps	local02, local04 wc
01ac8     A8 00 90 3D |  if_ae	jmp	#LR__0087
01acc     37 00 00 FF 
01ad0     1C E4 05 F1 | 	add	objptr, ##28188
01ad4     F2 30 02 FB | 	rdlong	local06, objptr
01ad8     37 00 00 FF 
01adc     1C E4 85 F1 | 	sub	objptr, ##28188
01ae0     18 13 02 F6 | 	mov	arg01, local06
01ae4     09 33 02 F6 | 	mov	local07, arg01
01ae8     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01aec                 | LR__0085
01aec     19 FB C9 FA | 	rdbyte	result1, local07 wz
01af0     01 32 06 51 |  if_ne	add	local07, #1
01af4     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01af8                 | LR__0086
01af8     09 33 82 F1 | 	sub	local07, arg01
01afc     19 2F 02 F6 | 	mov	local05, local07
01b00     17 15 02 F6 | 	mov	arg02, local05
01b04     14 15 82 F1 | 	sub	arg02, local02
01b08     18 13 02 F6 | 	mov	arg01, local06
01b0c     6C 5F B2 FD | 	call	#__system__Right_S
01b10     FD 12 02 F6 | 	mov	arg01, result1
01b14     6C 63 B2 FD | 	call	#__system__RTrim_S
01b18     FD 12 02 F6 | 	mov	arg01, result1
01b1c     A4 62 B2 FD | 	call	#__system__LTrim_S
01b20     52 00 00 FF 
01b24     A0 E4 05 F1 | 	add	objptr, ##42144
01b28     F2 FA 61 FC | 	wrlong	result1, objptr
01b2c     1B 00 00 FF 
01b30     84 E4 85 F1 | 	sub	objptr, ##13956
01b34     F2 12 02 FB | 	rdlong	arg01, objptr
01b38     37 00 00 FF 
01b3c     1C E4 85 F1 | 	sub	objptr, ##28188
01b40     01 28 86 F1 | 	sub	local02, #1
01b44     14 15 02 F6 | 	mov	arg02, local02
01b48     A8 5E B2 FD | 	call	#__system__Left_S
01b4c     FD 12 02 F6 | 	mov	arg01, result1
01b50     30 63 B2 FD | 	call	#__system__RTrim_S
01b54     FD 12 02 F6 | 	mov	arg01, result1
01b58     68 62 B2 FD | 	call	#__system__LTrim_S
01b5c     37 00 00 FF 
01b60     1C E4 05 F1 | 	add	objptr, ##28188
01b64     F2 FA 61 FC | 	wrlong	result1, objptr
01b68     37 00 00 FF 
01b6c     1C E4 85 F1 | 	sub	objptr, ##28188
01b70     1C 00 90 FD | 	jmp	#LR__0088
01b74                 | LR__0087
01b74     AA 01 00 FF 
01b78     20 2D 06 F6 | 	mov	local04, ##@LR__5394
01b7c     52 00 00 FF 
01b80     A0 E4 05 F1 | 	add	objptr, ##42144
01b84     F2 2C 62 FC | 	wrlong	local04, objptr
01b88     52 00 00 FF 
01b8c     A0 E4 85 F1 | 	sub	objptr, ##42144
01b90                 | LR__0088
01b90                 | ' 
01b90                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b90     37 00 00 FF 
01b94     24 E4 05 F1 | 	add	objptr, ##28196
01b98     F2 2C 02 FB | 	rdlong	local04, objptr
01b9c     37 00 00 FF 
01ba0     24 E4 85 F1 | 	sub	objptr, ##28196
01ba4     FF FF 7F FF 
01ba8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01bac     40 00 90 5D |  if_ne	jmp	#LR__0089
01bb0     52 00 00 FF 
01bb4     A0 E4 05 F1 | 	add	objptr, ##42144
01bb8     F2 12 02 FB | 	rdlong	arg01, objptr
01bbc     52 00 00 FF 
01bc0     A0 E4 85 F1 | 	sub	objptr, ##42144
01bc4     AA 01 00 FF 
01bc8     21 31 06 F6 | 	mov	local06, ##@LR__5395
01bcc     18 15 02 F6 | 	mov	arg02, local06
01bd0     CC 3D B2 FD | 	call	#__system___string_cmp
01bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bd8     37 00 00 5F 
01bdc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01be0     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01be4     37 00 00 5F 
01be8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01bec     08 01 90 5D |  if_ne	jmp	#LR__0093
01bf0                 | LR__0089
01bf0                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01bf0     37 00 00 FF 
01bf4     24 E4 05 F1 | 	add	objptr, ##28196
01bf8     F2 2C 02 FB | 	rdlong	local04, objptr
01bfc     37 00 00 FF 
01c00     24 E4 85 F1 | 	sub	objptr, ##28196
01c04     FF FF 7F FF 
01c08     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c0c     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c10     52 00 00 FF 
01c14     A0 E4 05 F1 | 	add	objptr, ##42144
01c18     F2 12 02 FB | 	rdlong	arg01, objptr
01c1c     52 00 00 FF 
01c20     A0 E4 85 F1 | 	sub	objptr, ##42144
01c24     AA 01 00 FF 
01c28     22 15 06 F6 | 	mov	arg02, ##@LR__5396
01c2c     70 3D B2 FD | 	call	#__system___string_cmp
01c30     00 FA 0D F2 | 	cmp	result1, #0 wz
01c34     37 00 00 AF 
01c38     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c3c     F2 06 68 AC |  if_e	wrlong	#3, objptr
01c40     37 00 00 AF 
01c44     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c48     AC 00 90 AD |  if_e	jmp	#LR__0093
01c4c                 | LR__0090
01c4c                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01c4c     37 00 00 FF 
01c50     24 E4 05 F1 | 	add	objptr, ##28196
01c54     F2 2C 02 FB | 	rdlong	local04, objptr
01c58     37 00 00 FF 
01c5c     24 E4 85 F1 | 	sub	objptr, ##28196
01c60     04 2C 0E F2 | 	cmp	local04, #4 wz
01c64     3C 00 90 5D |  if_ne	jmp	#LR__0091
01c68     52 00 00 FF 
01c6c     A0 E4 05 F1 | 	add	objptr, ##42144
01c70     F2 12 02 FB | 	rdlong	arg01, objptr
01c74     52 00 00 FF 
01c78     A0 E4 85 F1 | 	sub	objptr, ##42144
01c7c     AA 01 00 FF 
01c80     23 15 06 F6 | 	mov	arg02, ##@LR__5397
01c84     18 3D B2 FD | 	call	#__system___string_cmp
01c88     00 FA 0D F2 | 	cmp	result1, #0 wz
01c8c     37 00 00 5F 
01c90     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c94     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c98     37 00 00 5F 
01c9c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01ca0     54 00 90 5D |  if_ne	jmp	#LR__0093
01ca4                 | LR__0091
01ca4                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01ca4     37 00 00 FF 
01ca8     24 E4 05 F1 | 	add	objptr, ##28196
01cac     F2 2C 02 FB | 	rdlong	local04, objptr
01cb0     37 00 00 FF 
01cb4     24 E4 85 F1 | 	sub	objptr, ##28196
01cb8     04 2C 0E F2 | 	cmp	local04, #4 wz
01cbc     38 00 90 5D |  if_ne	jmp	#LR__0092
01cc0     52 00 00 FF 
01cc4     A0 E4 05 F1 | 	add	objptr, ##42144
01cc8     F2 12 02 FB | 	rdlong	arg01, objptr
01ccc     52 00 00 FF 
01cd0     A0 E4 85 F1 | 	sub	objptr, ##42144
01cd4     AA 01 00 FF 
01cd8     24 15 06 F6 | 	mov	arg02, ##@LR__5398
01cdc     C0 3C B2 FD | 	call	#__system___string_cmp
01ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ce4     37 00 00 AF 
01ce8     24 E4 05 A1 |  if_e	add	objptr, ##28196
01cec     F2 04 68 AC |  if_e	wrlong	#2, objptr
01cf0     37 00 00 AF 
01cf4     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cf8                 | LR__0092
01cf8                 | LR__0093
01cf8     38 4E 05 F1 | 	add	fp, #56
01cfc     A7 00 68 FC | 	wrlong	#0, fp
01d00     38 4E 85 F1 | 	sub	fp, #56
01d04     00 28 06 F6 | 	mov	local02, #0
01d08     01 42 06 F6 | 	mov	local15, #1
01d0c                 | ' 
01d0c                 | ' ' 1b: find separators
01d0c                 | ' 
01d0c                 | ' 107
01d0c                 | ' separators(0)=0
01d0c                 | ' i=0: j=1
01d0c                 | ' do: 
01d0c                 | LR__0094
01d0c     01 28 06 F1 | 	add	local02, #1
01d10     37 00 00 FF 
01d14     1C E4 05 F1 | 	add	objptr, ##28188
01d18     F2 12 02 FB | 	rdlong	arg01, objptr
01d1c     37 00 00 FF 
01d20     1C E4 85 F1 | 	sub	objptr, ##28188
01d24     14 15 02 F6 | 	mov	arg02, local02
01d28     01 16 06 F6 | 	mov	arg03, #1
01d2c     DC 5D B2 FD | 	call	#__system__Mid_S
01d30     FD 44 02 F6 | 	mov	local16, result1
01d34                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01d34     22 13 02 F6 | 	mov	arg01, local16
01d38     CC 2B B0 FD | 	call	#_isseparator
01d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d40     1C 00 90 AD |  if_e	jmp	#LR__0095
01d44     21 2B 02 F6 | 	mov	local03, local15
01d48     02 2A 66 F0 | 	shl	local03, #2
01d4c     38 4E 05 F1 | 	add	fp, #56
01d50     A7 2A 02 F1 | 	add	local03, fp
01d54     15 29 62 FC | 	wrlong	local02, local03
01d58     01 42 06 F1 | 	add	local15, #1
01d5c     38 4E 85 F1 | 	sub	fp, #56
01d60                 | LR__0095
01d60     52 00 00 FF 
01d64     9C E4 05 F1 | 	add	objptr, ##42140
01d68     F2 2C 02 FB | 	rdlong	local04, objptr
01d6c     52 00 00 FF 
01d70     9C E4 85 F1 | 	sub	objptr, ##42140
01d74     16 29 5A F2 | 	cmps	local02, local04 wcz
01d78     90 FF 9F ED |  if_be	jmp	#LR__0094
01d7c     21 2B 02 F6 | 	mov	local03, local15
01d80     02 2A 66 F0 | 	shl	local03, #2
01d84     38 4E 05 F1 | 	add	fp, #56
01d88     A7 38 02 F6 | 	mov	local10, fp
01d8c     A7 2A 02 F1 | 	add	local03, fp
01d90     15 29 62 FC | 	wrlong	local02, local03
01d94     00 46 06 F6 | 	mov	local17, #0
01d98                 | ' for i=0 to j-1 
01d98     00 28 06 F6 | 	mov	local02, #0
01d9c     21 49 02 F6 | 	mov	local18, local15
01da0     38 4E 85 F1 | 	sub	fp, #56
01da4                 | LR__0096
01da4     24 29 52 F2 | 	cmps	local02, local18 wc
01da8     50 01 90 3D |  if_ae	jmp	#LR__0100
01dac     14 2B 02 F6 | 	mov	local03, local02
01db0     02 2A 66 F0 | 	shl	local03, #2
01db4     38 4E 05 F1 | 	add	fp, #56
01db8     A7 2A 02 F1 | 	add	local03, fp
01dbc     15 2F 02 FB | 	rdlong	local05, local03
01dc0     52 00 00 FF 
01dc4     A8 E4 05 F1 | 	add	objptr, ##42152
01dc8     F2 2E 62 FC | 	wrlong	local05, objptr
01dcc     14 2B 02 F6 | 	mov	local03, local02
01dd0     01 2A 06 F1 | 	add	local03, #1
01dd4     02 2A 66 F0 | 	shl	local03, #2
01dd8     A7 38 02 F6 | 	mov	local10, fp
01ddc     A7 2A 02 F1 | 	add	local03, fp
01de0     15 2F 02 FB | 	rdlong	local05, local03
01de4     04 E4 05 F1 | 	add	objptr, #4
01de8     F2 2E 62 FC | 	wrlong	local05, objptr
01dec                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01dec     04 E4 85 F1 | 	sub	objptr, #4
01df0     F2 2C 02 FB | 	rdlong	local04, objptr
01df4     52 00 00 FF 
01df8     A8 E4 85 F1 | 	sub	objptr, ##42152
01dfc     01 2C 56 F2 | 	cmps	local04, #1 wc
01e00     38 4E 85 F1 | 	sub	fp, #56
01e04     68 00 90 CD |  if_b	jmp	#LR__0098
01e08     37 00 00 FF 
01e0c     1C E4 05 F1 | 	add	objptr, ##28188
01e10     F2 12 02 FB | 	rdlong	arg01, objptr
01e14     1B 00 00 FF 
01e18     8C E4 05 F1 | 	add	objptr, ##13964
01e1c     F2 14 02 FB | 	rdlong	arg02, objptr
01e20     52 00 00 FF 
01e24     A8 E4 85 F1 | 	sub	objptr, ##42152
01e28     01 16 06 F6 | 	mov	arg03, #1
01e2c     DC 5C B2 FD | 	call	#__system__Mid_S
01e30     FD 4A 02 F6 | 	mov	local19, result1
01e34     AA 01 00 FF 
01e38     25 15 06 F6 | 	mov	arg02, ##@LR__5399
01e3c     25 13 02 F6 | 	mov	arg01, local19
01e40     5C 3B B2 FD | 	call	#__system___string_cmp
01e44     00 FA 0D F2 | 	cmp	result1, #0 wz
01e48     24 00 90 AD |  if_e	jmp	#LR__0097
01e4c     23 39 02 F6 | 	mov	local10, local17
01e50     03 38 66 F0 | 	shl	local10, #3
01e54     35 00 00 FF 
01e58     0C E4 05 F1 | 	add	objptr, ##27148
01e5c     F2 38 02 F1 | 	add	local10, objptr
01e60     1C 4B 62 FC | 	wrlong	local19, local10
01e64     01 46 06 F1 | 	add	local17, #1
01e68     35 00 00 FF 
01e6c     0C E4 85 F1 | 	sub	objptr, ##27148
01e70                 | LR__0097
01e70                 | LR__0098
01e70     37 00 00 FF 
01e74     1C E4 05 F1 | 	add	objptr, ##28188
01e78     F2 12 02 FB | 	rdlong	arg01, objptr
01e7c     1B 00 00 FF 
01e80     8C E4 05 F1 | 	add	objptr, ##13964
01e84     F2 14 02 FB | 	rdlong	arg02, objptr
01e88     01 14 06 F1 | 	add	arg02, #1
01e8c     04 E4 05 F1 | 	add	objptr, #4
01e90     F2 16 02 FB | 	rdlong	arg03, objptr
01e94     04 E4 85 F1 | 	sub	objptr, #4
01e98     F2 3A 02 FB | 	rdlong	local11, objptr
01e9c     52 00 00 FF 
01ea0     A8 E4 85 F1 | 	sub	objptr, ##42152
01ea4     1D 3D 02 F6 | 	mov	local12, local11
01ea8     1E 17 82 F1 | 	sub	arg03, local12
01eac     01 16 86 F1 | 	sub	arg03, #1
01eb0     58 5C B2 FD | 	call	#__system__Mid_S
01eb4     FD 4A 02 F6 | 	mov	local19, result1
01eb8                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01eb8     AA 01 00 FF 
01ebc     26 15 06 F6 | 	mov	arg02, ##@LR__5400
01ec0     25 13 02 F6 | 	mov	arg01, local19
01ec4     D8 3A B2 FD | 	call	#__system___string_cmp
01ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ecc     24 00 90 AD |  if_e	jmp	#LR__0099
01ed0     23 39 02 F6 | 	mov	local10, local17
01ed4     03 38 66 F0 | 	shl	local10, #3
01ed8     35 00 00 FF 
01edc     0C E4 05 F1 | 	add	objptr, ##27148
01ee0     F2 38 02 F1 | 	add	local10, objptr
01ee4     1C 4B 62 FC | 	wrlong	local19, local10
01ee8     01 46 06 F1 | 	add	local17, #1
01eec     35 00 00 FF 
01ef0     0C E4 85 F1 | 	sub	objptr, ##27148
01ef4                 | LR__0099
01ef4     01 28 06 F1 | 	add	local02, #1
01ef8     A8 FE 9F FD | 	jmp	#LR__0096
01efc                 | LR__0100
01efc                 | ' 
01efc                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01efc                 | ' 
01efc                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01efc     37 00 00 FF 
01f00     24 E4 05 F1 | 	add	objptr, ##28196
01f04     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f08     37 00 00 FF 
01f0c     24 E4 85 F1 | 	sub	objptr, ##28196
01f10     37 00 00 5F 
01f14     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f18     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f1c     37 00 00 5F 
01f20     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f24     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f28     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f2c     35 00 00 FF 
01f30     0C E4 05 F1 | 	add	objptr, ##27148
01f34     F2 3A 02 FB | 	rdlong	local11, objptr
01f38     35 00 00 FF 
01f3c     0C E4 85 F1 | 	sub	objptr, ##27148
01f40     1D 13 02 F6 | 	mov	arg01, local11
01f44     E4 4B B0 FD | 	call	#_isdec
01f48     FD 3C 02 F6 | 	mov	local12, result1
01f4c     1E 31 22 F6 | 	not	local06, local12
01f50     00 30 0E F2 | 	cmp	local06, #0 wz
01f54     8C 00 90 AD |  if_e	jmp	#LR__0103
01f58     23 29 02 F6 | 	mov	local02, local17
01f5c     35 00 00 FF 
01f60     0C E4 05 F1 | 	add	objptr, ##27148
01f64     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01f68                 | LR__0101
01f68     14 2F 02 F6 | 	mov	local05, local02
01f6c     01 2E 86 F1 | 	sub	local05, #1
01f70     03 2E 66 F0 | 	shl	local05, #3
01f74     F2 2E 02 F1 | 	add	local05, objptr
01f78     17 2D 02 FB | 	rdlong	local04, local05
01f7c     14 31 02 F6 | 	mov	local06, local02
01f80     01 30 86 F1 | 	sub	local06, #1
01f84     03 30 66 F0 | 	shl	local06, #3
01f88     F2 30 02 F1 | 	add	local06, objptr
01f8c     04 30 06 F1 | 	add	local06, #4
01f90     18 2B 02 FB | 	rdlong	local03, local06
01f94     14 31 02 F6 | 	mov	local06, local02
01f98     03 30 66 F0 | 	shl	local06, #3
01f9c     F2 3C 02 F6 | 	mov	local12, objptr
01fa0     F2 30 02 F1 | 	add	local06, objptr
01fa4     18 2D 62 FC | 	wrlong	local04, local06
01fa8     14 3B 02 F6 | 	mov	local11, local02
01fac     1D 3F 02 F6 | 	mov	local13, local11
01fb0     03 3E 66 F0 | 	shl	local13, #3
01fb4     F2 3E 02 F1 | 	add	local13, objptr
01fb8     04 3E 06 F1 | 	add	local13, #4
01fbc     1F 2B 62 FC | 	wrlong	local03, local13
01fc0     01 28 86 F1 | 	sub	local02, #1
01fc4     01 28 56 F2 | 	cmps	local02, #1 wc
01fc8     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01fcc                 | LR__0102
01fcc     AA 01 00 FF 
01fd0     27 2D 06 F6 | 	mov	local04, ##@LR__5401
01fd4     F2 2C 62 FC | 	wrlong	local04, objptr
01fd8     35 00 00 FF 
01fdc     0C E4 85 F1 | 	sub	objptr, ##27148
01fe0     01 46 06 F1 | 	add	local17, #1
01fe4                 | LR__0103
01fe4     00 28 06 F6 | 	mov	local02, #0
01fe8                 | ' 
01fe8                 | ' ' 1e : find strings
01fe8                 | ' 
01fe8                 | ' i=0
01fe8                 | ' do
01fe8                 | LR__0104
01fe8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01fe8     14 2F 02 F6 | 	mov	local05, local02
01fec     03 2E 66 F0 | 	shl	local05, #3
01ff0     35 00 00 FF 
01ff4     0C E4 05 F1 | 	add	objptr, ##27148
01ff8     F2 2E 02 F1 | 	add	local05, objptr
01ffc     17 13 02 FB | 	rdlong	arg01, local05
02000     AA 01 00 FF 
02004     29 15 06 F6 | 	mov	arg02, ##@LR__5402
02008     35 00 00 FF 
0200c     0C E4 85 F1 | 	sub	objptr, ##27148
02010     8C 39 B2 FD | 	call	#__system___string_cmp
02014     00 FA 0D F2 | 	cmp	result1, #0 wz
02018     01 28 06 51 |  if_ne	add	local02, #1
0201c     20 01 90 5D |  if_ne	jmp	#LR__0109
02020     14 4D 02 F6 | 	mov	local20, local02
02024                 | LR__0105
02024     14 39 02 F6 | 	mov	local10, local02
02028     01 38 06 F1 | 	add	local10, #1
0202c     03 38 66 F0 | 	shl	local10, #3
02030     35 00 00 FF 
02034     0C E4 05 F1 | 	add	objptr, ##27148
02038     F2 38 02 F1 | 	add	local10, objptr
0203c     1C 4B 02 FB | 	rdlong	local19, local10
02040     26 39 02 F6 | 	mov	local10, local20
02044     03 38 66 F0 | 	shl	local10, #3
02048     F2 38 02 F1 | 	add	local10, objptr
0204c     26 3B 02 F6 | 	mov	local11, local20
02050     1D 41 02 F6 | 	mov	local14, local11
02054     03 40 66 F0 | 	shl	local14, #3
02058     F2 40 02 F1 | 	add	local14, objptr
0205c     20 13 02 FB | 	rdlong	arg01, local14
02060     25 3D 02 F6 | 	mov	local12, local19
02064     1E 15 02 F6 | 	mov	arg02, local12
02068     35 00 00 FF 
0206c     0C E4 85 F1 | 	sub	objptr, ##27148
02070     60 39 B2 FD | 	call	#__system___string_concat
02074     1C FB 61 FC | 	wrlong	result1, local10
02078     14 43 02 F6 | 	mov	local15, local02
0207c     01 42 06 F1 | 	add	local15, #1
02080     23 4F 02 F6 | 	mov	local21, local17
02084     01 4E 06 F1 | 	add	local21, #1
02088     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
0208c                 | LR__0106
0208c     27 43 52 F2 | 	cmps	local15, local21 wc
02090     70 00 90 3D |  if_ae	jmp	#LR__0108
02094     21 2F 02 F6 | 	mov	local05, local15
02098     01 2E 06 F1 | 	add	local05, #1
0209c     03 2E 66 F0 | 	shl	local05, #3
020a0     35 00 00 FF 
020a4     0C E4 05 F1 | 	add	objptr, ##27148
020a8     F2 2E 02 F1 | 	add	local05, objptr
020ac     17 2D 02 FB | 	rdlong	local04, local05
020b0     21 31 02 F6 | 	mov	local06, local15
020b4     01 30 06 F1 | 	add	local06, #1
020b8     03 30 66 F0 | 	shl	local06, #3
020bc     F2 30 02 F1 | 	add	local06, objptr
020c0     04 30 06 F1 | 	add	local06, #4
020c4     18 2B 02 FB | 	rdlong	local03, local06
020c8     21 31 02 F6 | 	mov	local06, local15
020cc     03 30 66 F0 | 	shl	local06, #3
020d0     F2 3C 02 F6 | 	mov	local12, objptr
020d4     F2 30 02 F1 | 	add	local06, objptr
020d8     18 2D 62 FC | 	wrlong	local04, local06
020dc     21 3B 02 F6 | 	mov	local11, local15
020e0     1D 3F 02 F6 | 	mov	local13, local11
020e4     03 3E 66 F0 | 	shl	local13, #3
020e8     F2 3E 02 F1 | 	add	local13, objptr
020ec     04 3E 06 F1 | 	add	local13, #4
020f0     1F 2B 62 FC | 	wrlong	local03, local13
020f4     01 42 06 F1 | 	add	local15, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     88 FF 9F FD | 	jmp	#LR__0106
02104                 | LR__0107
02104                 | LR__0108
02104     01 46 86 F1 | 	sub	local17, #1
02108     AA 01 00 FF 
0210c     2B 15 06 F6 | 	mov	arg02, ##@LR__5403
02110     25 13 02 F6 | 	mov	arg01, local19
02114     88 38 B2 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     23 29 52 52 |  if_ne	cmps	local02, local17 wc
02120     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02124                 | '   if p$<>"""" then k+=1:i+=1
02124     AA 01 00 FF 
02128     2D 15 06 F6 | 	mov	arg02, ##@LR__5404
0212c     25 13 02 F6 | 	mov	arg01, local19
02130     6C 38 B2 FD | 	call	#__system___string_cmp
02134     00 FA 0D F2 | 	cmp	result1, #0 wz
02138     01 46 06 51 |  if_ne	add	local17, #1
0213c     01 28 06 51 |  if_ne	add	local02, #1
02140                 | LR__0109
02140     23 29 52 F2 | 	cmps	local02, local17 wc
02144     A0 FE 9F CD |  if_b	jmp	#LR__0104
02148     00 28 06 F6 | 	mov	local02, #0
0214c                 | ' 
0214c                 | ' ' 1f : concatenate strings if "" detected between
0214c                 | '  
0214c                 | ' i=0
0214c                 | ' do
0214c                 | LR__0110
0214c                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0214c     14 2F 02 F6 | 	mov	local05, local02
02150     03 2E 66 F0 | 	shl	local05, #3
02154     35 00 00 FF 
02158     0C E4 05 F1 | 	add	objptr, ##27148
0215c     F2 30 02 F6 | 	mov	local06, objptr
02160     F2 2E 02 F1 | 	add	local05, objptr
02164     17 13 02 FB | 	rdlong	arg01, local05
02168     01 14 06 F6 | 	mov	arg02, #1
0216c     35 00 00 FF 
02170     0C E4 85 F1 | 	sub	objptr, ##27148
02174     04 59 B2 FD | 	call	#__system__Right_S
02178     FD 12 02 F6 | 	mov	arg01, result1
0217c     AA 01 00 FF 
02180     2F 15 06 F6 | 	mov	arg02, ##@LR__5405
02184     18 38 B2 FD | 	call	#__system___string_cmp
02188     00 FA 0D F2 | 	cmp	result1, #0 wz
0218c     7C 01 90 5D |  if_ne	jmp	#LR__0116
02190     14 31 02 F6 | 	mov	local06, local02
02194     01 30 06 F1 | 	add	local06, #1
02198     03 30 66 F0 | 	shl	local06, #3
0219c     35 00 00 FF 
021a0     0C E4 05 F1 | 	add	objptr, ##27148
021a4     F2 3C 02 F6 | 	mov	local12, objptr
021a8     F2 30 02 F1 | 	add	local06, objptr
021ac     18 13 02 FB | 	rdlong	arg01, local06
021b0     01 14 06 F6 | 	mov	arg02, #1
021b4     35 00 00 FF 
021b8     0C E4 85 F1 | 	sub	objptr, ##27148
021bc     34 58 B2 FD | 	call	#__system__Left_S
021c0     FD 12 02 F6 | 	mov	arg01, result1
021c4     AA 01 00 FF 
021c8     31 15 06 F6 | 	mov	arg02, ##@LR__5406
021cc     D0 37 B2 FD | 	call	#__system___string_cmp
021d0     00 FA 0D F2 | 	cmp	result1, #0 wz
021d4     34 01 90 5D |  if_ne	jmp	#LR__0116
021d8     14 39 02 F6 | 	mov	local10, local02
021dc     03 38 66 F0 | 	shl	local10, #3
021e0     35 00 00 FF 
021e4     0C E4 05 F1 | 	add	objptr, ##27148
021e8     F2 38 02 F1 | 	add	local10, objptr
021ec     14 41 02 F6 | 	mov	local14, local02
021f0     03 40 66 F0 | 	shl	local14, #3
021f4     F2 40 02 F1 | 	add	local14, objptr
021f8     20 31 02 FB | 	rdlong	local06, local14
021fc     14 3F 02 F6 | 	mov	local13, local02
02200     01 3E 06 F1 | 	add	local13, #1
02204     03 3E 66 F0 | 	shl	local13, #3
02208     F2 3E 02 F1 | 	add	local13, objptr
0220c     1F 3D 02 FB | 	rdlong	local12, local13
02210     14 51 02 F6 | 	mov	local22, local02
02214     01 50 06 F1 | 	add	local22, #1
02218     28 53 02 F6 | 	mov	local23, local22
0221c     03 52 66 F0 | 	shl	local23, #3
02220     F2 54 02 F6 | 	mov	local24, objptr
02224     F2 52 02 F1 | 	add	local23, objptr
02228     29 13 02 FB | 	rdlong	arg01, local23
0222c     35 00 00 FF 
02230     0C E4 85 F1 | 	sub	objptr, ##27148
02234     09 33 02 F6 | 	mov	local07, arg01
02238     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
0223c                 | LR__0111
0223c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02240     01 32 06 51 |  if_ne	add	local07, #1
02244     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02248                 | LR__0112
02248     09 33 82 F1 | 	sub	local07, arg01
0224c     19 3B 02 F6 | 	mov	local11, local07
02250     01 3A 86 F1 | 	sub	local11, #1
02254     1E 13 02 F6 | 	mov	arg01, local12
02258     1D 15 02 F6 | 	mov	arg02, local11
0225c     1C 58 B2 FD | 	call	#__system__Right_S
02260     FD 3C 02 F6 | 	mov	local12, result1
02264     18 13 02 F6 | 	mov	arg01, local06
02268     1E 15 02 F6 | 	mov	arg02, local12
0226c     64 37 B2 FD | 	call	#__system___string_concat
02270     FD 30 02 F6 | 	mov	local06, result1
02274     1C 31 62 FC | 	wrlong	local06, local10
02278                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02278     14 43 02 F6 | 	mov	local15, local02
0227c     01 42 06 F1 | 	add	local15, #1
02280     23 57 02 F6 | 	mov	local25, local17
02284     01 56 06 F1 | 	add	local25, #1
02288     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
0228c                 | LR__0113
0228c     2B 43 52 F2 | 	cmps	local15, local25 wc
02290     70 00 90 3D |  if_ae	jmp	#LR__0115
02294     21 2F 02 F6 | 	mov	local05, local15
02298     01 2E 06 F1 | 	add	local05, #1
0229c     03 2E 66 F0 | 	shl	local05, #3
022a0     35 00 00 FF 
022a4     0C E4 05 F1 | 	add	objptr, ##27148
022a8     F2 2E 02 F1 | 	add	local05, objptr
022ac     17 2D 02 FB | 	rdlong	local04, local05
022b0     21 31 02 F6 | 	mov	local06, local15
022b4     01 30 06 F1 | 	add	local06, #1
022b8     03 30 66 F0 | 	shl	local06, #3
022bc     F2 30 02 F1 | 	add	local06, objptr
022c0     04 30 06 F1 | 	add	local06, #4
022c4     18 2B 02 FB | 	rdlong	local03, local06
022c8     21 31 02 F6 | 	mov	local06, local15
022cc     03 30 66 F0 | 	shl	local06, #3
022d0     F2 3C 02 F6 | 	mov	local12, objptr
022d4     F2 30 02 F1 | 	add	local06, objptr
022d8     18 2D 62 FC | 	wrlong	local04, local06
022dc     21 3B 02 F6 | 	mov	local11, local15
022e0     1D 3F 02 F6 | 	mov	local13, local11
022e4     03 3E 66 F0 | 	shl	local13, #3
022e8     F2 3E 02 F1 | 	add	local13, objptr
022ec     04 3E 06 F1 | 	add	local13, #4
022f0     1F 2B 62 FC | 	wrlong	local03, local13
022f4     01 42 06 F1 | 	add	local15, #1
022f8     35 00 00 FF 
022fc     0C E4 85 F1 | 	sub	objptr, ##27148
02300     88 FF 9F FD | 	jmp	#LR__0113
02304                 | LR__0114
02304                 | LR__0115
02304     01 28 86 F1 | 	sub	local02, #1
02308     01 46 86 F1 | 	sub	local17, #1
0230c                 | LR__0116
0230c     01 28 06 F1 | 	add	local02, #1
02310     23 29 52 F2 | 	cmps	local02, local17 wc
02314     34 FE 9F CD |  if_b	jmp	#LR__0110
02318     00 28 06 F6 | 	mov	local02, #0
0231c                 | '  
0231c                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0231c                 | '  
0231c                 | ' i=0 
0231c                 | ' do
0231c                 | LR__0117
0231c     14 39 02 F6 | 	mov	local10, local02
02320     03 38 66 F0 | 	shl	local10, #3
02324     35 00 00 FF 
02328     0C E4 05 F1 | 	add	objptr, ##27148
0232c     F2 38 02 F1 | 	add	local10, objptr
02330     1C 59 02 FB | 	rdlong	local26, local10
02334     14 39 02 F6 | 	mov	local10, local02
02338     01 38 06 F1 | 	add	local10, #1
0233c     03 38 66 F0 | 	shl	local10, #3
02340     F2 38 02 F1 | 	add	local10, objptr
02344     1C 5B 02 FB | 	rdlong	local27, local10
02348                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02348                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02348     AA 01 00 FF 
0234c     33 15 06 F6 | 	mov	arg02, ##@LR__5407
02350     2C 13 02 F6 | 	mov	arg01, local26
02354     35 00 00 FF 
02358     0C E4 85 F1 | 	sub	objptr, ##27148
0235c     40 36 B2 FD | 	call	#__system___string_cmp
02360     00 FA 0D F2 | 	cmp	result1, #0 wz
02364     A8 00 90 AD |  if_e	jmp	#LR__0118
02368     AA 01 00 FF 
0236c     35 15 06 F6 | 	mov	arg02, ##@LR__5408
02370     2C 13 02 F6 | 	mov	arg01, local26
02374     28 36 B2 FD | 	call	#__system___string_cmp
02378     FD 2A 0A F6 | 	mov	local03, result1 wz
0237c     90 00 90 AD |  if_e	jmp	#LR__0118
02380     AA 01 00 FF 
02384     37 31 06 F6 | 	mov	local06, ##@LR__5409
02388     2C 13 02 F6 | 	mov	arg01, local26
0238c     18 15 02 F6 | 	mov	arg02, local06
02390     0C 36 B2 FD | 	call	#__system___string_cmp
02394     00 FA 0D F2 | 	cmp	result1, #0 wz
02398     74 00 90 AD |  if_e	jmp	#LR__0118
0239c     AA 01 00 FF 
023a0     39 3D 06 F6 | 	mov	local12, ##@LR__5410
023a4     2C 13 02 F6 | 	mov	arg01, local26
023a8     1E 15 02 F6 | 	mov	arg02, local12
023ac     F0 35 B2 FD | 	call	#__system___string_cmp
023b0     00 FA 0D F2 | 	cmp	result1, #0 wz
023b4     58 00 90 AD |  if_e	jmp	#LR__0118
023b8     AA 01 00 FF 
023bc     3B 3B 06 F6 | 	mov	local11, ##@LR__5411
023c0     1D 3D 02 F6 | 	mov	local12, local11
023c4     2C 13 02 F6 | 	mov	arg01, local26
023c8     1E 15 02 F6 | 	mov	arg02, local12
023cc     D0 35 B2 FD | 	call	#__system___string_cmp
023d0     FD 30 0A F6 | 	mov	local06, result1 wz
023d4     38 00 90 AD |  if_e	jmp	#LR__0118
023d8     AA 01 00 FF 
023dc     3D 3B 06 F6 | 	mov	local11, ##@LR__5412
023e0     2C 13 02 F6 | 	mov	arg01, local26
023e4     1D 15 02 F6 | 	mov	arg02, local11
023e8     B4 35 B2 FD | 	call	#__system___string_cmp
023ec     FD 3C 0A F6 | 	mov	local12, result1 wz
023f0     1C 00 90 AD |  if_e	jmp	#LR__0118
023f4     AA 01 00 FF 
023f8     3F 41 06 F6 | 	mov	local14, ##@LR__5413
023fc     2C 13 02 F6 | 	mov	arg01, local26
02400     20 15 02 F6 | 	mov	arg02, local14
02404     98 35 B2 FD | 	call	#__system___string_cmp
02408     FD 3A 0A F6 | 	mov	local11, result1 wz
0240c     20 00 90 5D |  if_ne	jmp	#LR__0119
02410                 | LR__0118
02410     AA 01 00 FF 
02414     41 5D 06 F6 | 	mov	local28, ##@LR__5414
02418     2E 3F 02 F6 | 	mov	local13, local28
0241c     2D 13 02 F6 | 	mov	arg01, local27
02420     1F 15 02 F6 | 	mov	arg02, local13
02424     78 35 B2 FD | 	call	#__system___string_cmp
02428     FD 40 0A F6 | 	mov	local14, result1 wz
0242c     B8 00 90 AD |  if_e	jmp	#LR__0122
02430                 | LR__0119
02430     AA 01 00 FF 
02434     43 5D 06 F6 | 	mov	local28, ##@LR__5415
02438     2C 13 02 F6 | 	mov	arg01, local26
0243c     2E 15 02 F6 | 	mov	arg02, local28
02440     5C 35 B2 FD | 	call	#__system___string_cmp
02444     FD 3E 0A F6 | 	mov	local13, result1 wz
02448     20 00 90 5D |  if_ne	jmp	#LR__0120
0244c     AA 01 00 FF 
02450     45 53 06 F6 | 	mov	local23, ##@LR__5416
02454     29 51 02 F6 | 	mov	local22, local23
02458     2D 13 02 F6 | 	mov	arg01, local27
0245c     28 15 02 F6 | 	mov	arg02, local22
02460     3C 35 B2 FD | 	call	#__system___string_cmp
02464     FD 5C 0A F6 | 	mov	local28, result1 wz
02468     7C 00 90 AD |  if_e	jmp	#LR__0122
0246c                 | LR__0120
0246c     AA 01 00 FF 
02470     47 53 06 F6 | 	mov	local23, ##@LR__5417
02474     2C 13 02 F6 | 	mov	arg01, local26
02478     29 15 02 F6 | 	mov	arg02, local23
0247c     20 35 B2 FD | 	call	#__system___string_cmp
02480     FD 50 0A F6 | 	mov	local22, result1 wz
02484     20 00 90 5D |  if_ne	jmp	#LR__0121
02488     AA 01 00 FF 
0248c     49 5F 06 F6 | 	mov	local29, ##@LR__5418
02490     2F 55 02 F6 | 	mov	local24, local29
02494     2D 13 02 F6 | 	mov	arg01, local27
02498     2A 15 02 F6 | 	mov	arg02, local24
0249c     00 35 B2 FD | 	call	#__system___string_cmp
024a0     FD 52 0A F6 | 	mov	local23, result1 wz
024a4     40 00 90 AD |  if_e	jmp	#LR__0122
024a8                 | LR__0121
024a8     AA 01 00 FF 
024ac     4B 61 06 F6 | 	mov	local30, ##@LR__5419
024b0     30 5F 02 F6 | 	mov	local29, local30
024b4     2C 13 02 F6 | 	mov	arg01, local26
024b8     2F 15 02 F6 | 	mov	arg02, local29
024bc     E0 34 B2 FD | 	call	#__system___string_cmp
024c0     FD 54 0A F6 | 	mov	local24, result1 wz
024c4     F0 00 90 5D |  if_ne	jmp	#LR__0126
024c8     AA 01 00 FF 
024cc     4D 63 06 F6 | 	mov	local31, ##@LR__5420
024d0     31 61 02 F6 | 	mov	local30, local31
024d4     2D 13 02 F6 | 	mov	arg01, local27
024d8     30 15 02 F6 | 	mov	arg02, local30
024dc     C0 34 B2 FD | 	call	#__system___string_cmp
024e0     FD 5E 0A F6 | 	mov	local29, result1 wz
024e4     D0 00 90 5D |  if_ne	jmp	#LR__0126
024e8                 | LR__0122
024e8     14 39 02 F6 | 	mov	local10, local02
024ec     03 38 66 F0 | 	shl	local10, #3
024f0     35 00 00 FF 
024f4     0C E4 05 F1 | 	add	objptr, ##27148
024f8     F2 38 02 F1 | 	add	local10, objptr
024fc     2D 3D 02 F6 | 	mov	local12, local27
02500     2C 13 02 F6 | 	mov	arg01, local26
02504     1E 15 02 F6 | 	mov	arg02, local12
02508     35 00 00 FF 
0250c     0C E4 85 F1 | 	sub	objptr, ##27148
02510     C0 34 B2 FD | 	call	#__system___string_concat
02514     1C FB 61 FC | 	wrlong	result1, local10
02518                 | '     lparts(i).part$=s1$+s2$
02518                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02518     14 43 02 F6 | 	mov	local15, local02
0251c     01 42 06 F1 | 	add	local15, #1
02520     23 65 02 F6 | 	mov	local32, local17
02524     01 64 06 F1 | 	add	local32, #1
02528     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
0252c                 | LR__0123
0252c     32 43 52 F2 | 	cmps	local15, local32 wc
02530     7C 00 90 3D |  if_ae	jmp	#LR__0125
02534     21 2F 02 F6 | 	mov	local05, local15
02538     01 2E 06 F1 | 	add	local05, #1
0253c     03 2E 66 F0 | 	shl	local05, #3
02540     35 00 00 FF 
02544     0C E4 05 F1 | 	add	objptr, ##27148
02548     F2 2E 02 F1 | 	add	local05, objptr
0254c     17 2D 02 FB | 	rdlong	local04, local05
02550     21 31 02 F6 | 	mov	local06, local15
02554     01 30 06 F1 | 	add	local06, #1
02558     03 30 66 F0 | 	shl	local06, #3
0255c     F2 30 02 F1 | 	add	local06, objptr
02560     04 30 06 F1 | 	add	local06, #4
02564     18 2B 02 FB | 	rdlong	local03, local06
02568     21 31 02 F6 | 	mov	local06, local15
0256c     03 30 66 F0 | 	shl	local06, #3
02570     F2 3C 02 F6 | 	mov	local12, objptr
02574     F2 30 02 F1 | 	add	local06, objptr
02578     18 2D 62 FC | 	wrlong	local04, local06
0257c     21 3B 02 F6 | 	mov	local11, local15
02580     1D 41 02 F6 | 	mov	local14, local11
02584     20 3F 02 F6 | 	mov	local13, local14
02588     03 3E 66 F0 | 	shl	local13, #3
0258c     F2 5C 02 F6 | 	mov	local28, objptr
02590     F2 3E 02 F1 | 	add	local13, objptr
02594     04 3E 06 F1 | 	add	local13, #4
02598     1F 2B 62 FC | 	wrlong	local03, local13
0259c     04 3E 86 F1 | 	sub	local13, #4
025a0     01 42 06 F1 | 	add	local15, #1
025a4     35 00 00 FF 
025a8     0C E4 85 F1 | 	sub	objptr, ##27148
025ac     7C FF 9F FD | 	jmp	#LR__0123
025b0                 | LR__0124
025b0                 | LR__0125
025b0     01 28 86 F1 | 	sub	local02, #1
025b4     01 46 86 F1 | 	sub	local17, #1
025b8                 | LR__0126
025b8     01 28 06 F1 | 	add	local02, #1
025bc     23 29 52 F2 | 	cmps	local02, local17 wc
025c0     58 FD 9F CD |  if_b	jmp	#LR__0117
025c4                 | '  
025c4                 | ' ' 1h : now remove parts that are spaces
025c4                 | ' 
025c4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
025c4     00 28 06 F6 | 	mov	local02, #0
025c8     23 67 02 F6 | 	mov	local33, local17
025cc     01 66 06 F1 | 	add	local33, #1
025d0                 | LR__0127
025d0     33 29 52 F2 | 	cmps	local02, local33 wc
025d4     50 00 90 3D |  if_ae	jmp	#LR__0128
025d8     14 39 02 F6 | 	mov	local10, local02
025dc     03 38 66 F0 | 	shl	local10, #3
025e0     35 00 00 FF 
025e4     0C E4 05 F1 | 	add	objptr, ##27148
025e8     F2 38 02 F1 | 	add	local10, objptr
025ec     14 3D 02 F6 | 	mov	local12, local02
025f0     1E 3B 02 F6 | 	mov	local11, local12
025f4     1D 41 02 F6 | 	mov	local14, local11
025f8     03 40 66 F0 | 	shl	local14, #3
025fc     F2 3E 02 F6 | 	mov	local13, objptr
02600     F2 40 02 F1 | 	add	local14, objptr
02604     20 13 02 FB | 	rdlong	arg01, local14
02608     35 00 00 FF 
0260c     0C E4 85 F1 | 	sub	objptr, ##27148
02610     70 58 B2 FD | 	call	#__system__RTrim_S
02614     FD 12 02 F6 | 	mov	arg01, result1
02618     A8 57 B2 FD | 	call	#__system__LTrim_S
0261c     1C FB 61 FC | 	wrlong	result1, local10
02620     01 28 06 F1 | 	add	local02, #1
02624     A8 FF 9F FD | 	jmp	#LR__0127
02628                 | LR__0128
02628     00 28 06 F6 | 	mov	local02, #0
0262c     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02630                 | ' i=0
02630                 | ' do 
02630                 | LR__0129
02630                 | '   if len(lparts(i).part$)=0 then 
02630     14 2F 02 F6 | 	mov	local05, local02
02634     03 2E 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 2E 02 F1 | 	add	local05, objptr
02644     17 13 02 FB | 	rdlong	arg01, local05
02648     35 00 00 FF 
0264c     0C E4 85 F1 | 	sub	objptr, ##27148
02650     09 33 02 F6 | 	mov	local07, arg01
02654                 | LR__0130
02654     19 FB C9 FA | 	rdbyte	result1, local07 wz
02658     01 32 06 51 |  if_ne	add	local07, #1
0265c     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
02660     09 33 8A F1 | 	sub	local07, arg01 wz
02664     C4 00 90 5D |  if_ne	jmp	#LR__0134
02668                 | '     if i=k-1 then k-=1  :  exit
02668     23 2D 02 F6 | 	mov	local04, local17
0266c     01 2C 86 F1 | 	sub	local04, #1
02670     16 29 0A F2 | 	cmp	local02, local04 wz
02674     01 46 86 A1 |  if_e	sub	local17, #1
02678     C4 00 90 AD |  if_e	jmp	#LR__0136
0267c                 | '     if i<k-1 then 
0267c     23 2D 02 F6 | 	mov	local04, local17
02680     01 2C 86 F1 | 	sub	local04, #1
02684     16 29 52 F2 | 	cmps	local02, local04 wc
02688     A0 00 90 3D |  if_ae	jmp	#LR__0133
0268c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0268c     14 43 02 F6 | 	mov	local15, local02
02690     23 69 02 F6 | 	mov	local34, local17
02694     01 68 86 F1 | 	sub	local34, #1
02698                 | LR__0131
02698     34 43 52 F2 | 	cmps	local15, local34 wc
0269c     80 00 90 3D |  if_ae	jmp	#LR__0132
026a0     21 2F 02 F6 | 	mov	local05, local15
026a4     01 2E 06 F1 | 	add	local05, #1
026a8     03 2E 66 F0 | 	shl	local05, #3
026ac     35 00 00 FF 
026b0     0C E4 05 F1 | 	add	objptr, ##27148
026b4     F2 2E 02 F1 | 	add	local05, objptr
026b8     17 2D 02 FB | 	rdlong	local04, local05
026bc     21 31 02 F6 | 	mov	local06, local15
026c0     01 30 06 F1 | 	add	local06, #1
026c4     03 30 66 F0 | 	shl	local06, #3
026c8     F2 30 02 F1 | 	add	local06, objptr
026cc     04 30 06 F1 | 	add	local06, #4
026d0     18 2B 02 FB | 	rdlong	local03, local06
026d4     21 39 02 F6 | 	mov	local10, local15
026d8     1C 31 02 F6 | 	mov	local06, local10
026dc     03 30 66 F0 | 	shl	local06, #3
026e0     F2 3C 02 F6 | 	mov	local12, objptr
026e4     F2 30 02 F1 | 	add	local06, objptr
026e8     18 2D 62 FC | 	wrlong	local04, local06
026ec     21 3B 02 F6 | 	mov	local11, local15
026f0     1D 41 02 F6 | 	mov	local14, local11
026f4     20 3F 02 F6 | 	mov	local13, local14
026f8     03 3E 66 F0 | 	shl	local13, #3
026fc     F2 5C 02 F6 | 	mov	local28, objptr
02700     F2 3E 02 F1 | 	add	local13, objptr
02704     04 3E 06 F1 | 	add	local13, #4
02708     1F 2B 62 FC | 	wrlong	local03, local13
0270c     04 3E 86 F1 | 	sub	local13, #4
02710     01 42 06 F1 | 	add	local15, #1
02714     35 00 00 FF 
02718     0C E4 85 F1 | 	sub	objptr, ##27148
0271c     78 FF 9F FD | 	jmp	#LR__0131
02720                 | LR__0132
02720     01 46 86 F1 | 	sub	local17, #1
02724                 | '       if i>0 then i-=1 
02724     01 28 56 F2 | 	cmps	local02, #1 wc
02728     01 28 86 31 |  if_ae	sub	local02, #1
0272c                 | LR__0133
0272c                 | LR__0134
0272c     01 28 06 F1 | 	add	local02, #1
02730     23 2D 02 F6 | 	mov	local04, local17
02734     01 2C 86 F1 | 	sub	local04, #1
02738     16 29 5A F2 | 	cmps	local02, local04 wcz
0273c     F0 FE 9F ED |  if_be	jmp	#LR__0129
02740                 | LR__0135
02740                 | LR__0136
02740                 | ' 
02740                 | ' ' 1i: lowercase all that is not a string
02740                 | ' 
02740                 | ' for j=0 to k-1
02740     00 42 06 F6 | 	mov	local15, #0
02744     23 6B 02 F6 | 	mov	local35, local17
02748                 | LR__0137
02748     35 43 52 F2 | 	cmps	local15, local35 wc
0274c     C8 00 90 3D |  if_ae	jmp	#LR__0140
02750                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
02750     21 2F 02 F6 | 	mov	local05, local15
02754     03 2E 66 F0 | 	shl	local05, #3
02758     35 00 00 FF 
0275c     0C E4 05 F1 | 	add	objptr, ##27148
02760     F2 2E 02 F1 | 	add	local05, objptr
02764     17 13 02 FB | 	rdlong	arg01, local05
02768     01 14 06 F6 | 	mov	arg02, #1
0276c     35 00 00 FF 
02770     0C E4 85 F1 | 	sub	objptr, ##27148
02774     7C 52 B2 FD | 	call	#__system__Left_S
02778     FD 12 02 F6 | 	mov	arg01, result1
0277c     AA 01 00 FF 
02780     4F 15 06 F6 | 	mov	arg02, ##@LR__5421
02784     18 32 B2 FD | 	call	#__system___string_cmp
02788     00 FA 0D F2 | 	cmp	result1, #0 wz
0278c     44 00 90 5D |  if_ne	jmp	#LR__0138
02790     21 31 02 F6 | 	mov	local06, local15
02794     03 30 66 F0 | 	shl	local06, #3
02798     35 00 00 FF 
0279c     0C E4 05 F1 | 	add	objptr, ##27148
027a0     F2 3C 02 F6 | 	mov	local12, objptr
027a4     F2 30 02 F1 | 	add	local06, objptr
027a8     18 13 02 FB | 	rdlong	arg01, local06
027ac     01 14 06 F6 | 	mov	arg02, #1
027b0     35 00 00 FF 
027b4     0C E4 85 F1 | 	sub	objptr, ##27148
027b8     C0 52 B2 FD | 	call	#__system__Right_S
027bc     FD 12 02 F6 | 	mov	arg01, result1
027c0     AA 01 00 FF 
027c4     51 15 06 F6 | 	mov	arg02, ##@LR__5422
027c8     D4 31 B2 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     3C 00 90 AD |  if_e	jmp	#LR__0139
027d4                 | LR__0138
027d4     21 39 02 F6 | 	mov	local10, local15
027d8     03 38 66 F0 | 	shl	local10, #3
027dc     35 00 00 FF 
027e0     0C E4 05 F1 | 	add	objptr, ##27148
027e4     F2 38 02 F1 | 	add	local10, objptr
027e8     21 3B 02 F6 | 	mov	local11, local15
027ec     1D 41 02 F6 | 	mov	local14, local11
027f0     03 40 66 F0 | 	shl	local14, #3
027f4     F2 3E 02 F6 | 	mov	local13, objptr
027f8     F2 40 02 F1 | 	add	local14, objptr
027fc     20 13 02 FB | 	rdlong	arg01, local14
02800     35 00 00 FF 
02804     0C E4 85 F1 | 	sub	objptr, ##27148
02808     F8 54 B2 FD | 	call	#__system__LCase_S
0280c     1C FB 61 FC | 	wrlong	result1, local10
02810                 | LR__0139
02810     01 42 06 F1 | 	add	local15, #1
02814     30 FF 9F FD | 	jmp	#LR__0137
02818                 | LR__0140
02818                 | ' 
02818                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02818                 | ' 
02818                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02818     00 28 06 F6 | 	mov	local02, #0
0281c     23 6D 02 F6 | 	mov	local36, local17
02820     01 6C 06 F1 | 	add	local36, #1
02824     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02828                 | LR__0141
02828     36 29 52 F2 | 	cmps	local02, local36 wc
0282c     30 00 90 3D |  if_ae	jmp	#LR__0143
02830     14 39 02 F6 | 	mov	local10, local02
02834     03 38 66 F0 | 	shl	local10, #3
02838     35 00 00 FF 
0283c     0C E4 05 F1 | 	add	objptr, ##27148
02840     F2 38 02 F1 | 	add	local10, objptr
02844     04 38 06 F1 | 	add	local10, #4
02848     FF FF FF FF 
0284c     1C FF 6B FC | 	wrlong	##-1, local10
02850     01 28 06 F1 | 	add	local02, #1
02854     35 00 00 FF 
02858     0C E4 85 F1 | 	sub	objptr, ##27148
0285c     C8 FF 9F FD | 	jmp	#LR__0141
02860                 | LR__0142
02860                 | LR__0143
02860                 | ' 
02860                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
02860     35 00 00 FF 
02864     0C E4 05 F1 | 	add	objptr, ##27148
02868     F2 12 02 FB | 	rdlong	arg01, objptr
0286c     35 00 00 FF 
02870     0C E4 85 F1 | 	sub	objptr, ##27148
02874     B4 42 B0 FD | 	call	#_isdec
02878     00 FA 0D F2 | 	cmp	result1, #0 wz
0287c     01 6E 06 56 |  if_ne	mov	local37, #1
02880     00 6E 06 A6 |  if_e	mov	local37, #0
02884                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02884     35 00 00 FF 
02888     0C E4 05 F1 | 	add	objptr, ##27148
0288c     F2 12 02 FB | 	rdlong	arg01, objptr
02890     35 00 00 FF 
02894     0C E4 85 F1 | 	sub	objptr, ##27148
02898     AA 01 00 FF 
0289c     53 15 06 F6 | 	mov	arg02, ##@LR__5423
028a0     FC 30 B2 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     01 6E 06 A6 |  if_e	mov	local37, #1
028ac     00 28 06 F6 | 	mov	local02, #0
028b0                 | ' i=0 : do 
028b0                 | LR__0144
028b0                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
028b0     14 2F 02 F6 | 	mov	local05, local02
028b4     03 2E 66 F0 | 	shl	local05, #3
028b8     35 00 00 FF 
028bc     0C E4 05 F1 | 	add	objptr, ##27148
028c0     F2 2E 02 F1 | 	add	local05, objptr
028c4     17 13 02 FB | 	rdlong	arg01, local05
028c8     AA 01 00 FF 
028cc     58 15 06 F6 | 	mov	arg02, ##@LR__5424
028d0     35 00 00 FF 
028d4     0C E4 85 F1 | 	sub	objptr, ##27148
028d8     C4 30 B2 FD | 	call	#__system___string_cmp
028dc     00 FA 0D F2 | 	cmp	result1, #0 wz
028e0     0C 00 90 AD |  if_e	jmp	#LR__0145
028e4     01 28 06 F1 | 	add	local02, #1
028e8     23 29 5A F2 | 	cmps	local02, local17 wcz
028ec     C0 FF 9F ED |  if_be	jmp	#LR__0144
028f0                 | LR__0145
028f0                 | ' if i<k then addptr=i+1	 							' then found
028f0     23 29 52 F2 | 	cmps	local02, local17 wc
028f4     14 6F 02 C6 |  if_b	mov	local37, local02
028f8     01 6E 06 C1 |  if_b	add	local37, #1
028fc     35 00 00 FF 
02900     0C E4 05 F1 | 	add	objptr, ##27148
02904     37 31 02 F6 | 	mov	local06, local37
02908     03 30 66 F0 | 	shl	local06, #3
0290c     F2 3C 02 F6 | 	mov	local12, objptr
02910     F2 30 02 F1 | 	add	local06, objptr
02914     18 15 02 FB | 	rdlong	arg02, local06
02918     AA 01 00 FF 
0291c     5D 17 06 F6 | 	mov	arg03, ##@LR__5425
02920     01 12 06 F6 | 	mov	arg01, #1
02924     35 00 00 FF 
02928     0C E4 85 F1 | 	sub	objptr, ##27148
0292c     0C 56 B2 FD | 	call	#__system__Instr
02930     FD 70 02 F6 | 	mov	local38, result1
02934                 | ' lp$=lparts(addptr).part$ 
02934                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02934                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02934     01 70 56 F2 | 	cmps	local38, #1 wc
02938     68 01 90 CD |  if_b	jmp	#LR__0152
0293c     37 2F 02 F6 | 	mov	local05, local37
02940     03 2E 66 F0 | 	shl	local05, #3
02944     35 00 00 FF 
02948     0C E4 05 F1 | 	add	objptr, ##27148
0294c     F2 2E 02 F1 | 	add	local05, objptr
02950     17 13 02 FB | 	rdlong	arg01, local05
02954     35 00 00 FF 
02958     0C E4 85 F1 | 	sub	objptr, ##27148
0295c     09 33 02 F6 | 	mov	local07, arg01
02960     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02964                 | LR__0146
02964     19 FB C9 FA | 	rdbyte	result1, local07 wz
02968     01 32 06 51 |  if_ne	add	local07, #1
0296c     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02970                 | LR__0147
02970     09 33 82 F1 | 	sub	local07, arg01
02974     19 71 52 F2 | 	cmps	local38, local07 wc
02978     28 01 90 3D |  if_ae	jmp	#LR__0152
0297c     01 46 06 F1 | 	add	local17, #1
02980                 | '   k+=1
02980                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02980     23 29 02 F6 | 	mov	local02, local17
02984     37 73 02 F6 | 	mov	local39, local37
02988     01 72 06 F1 | 	add	local39, #1
0298c     35 00 00 FF 
02990     0C E4 05 F1 | 	add	objptr, ##27148
02994     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02998                 | LR__0148
02998     14 2F 02 F6 | 	mov	local05, local02
0299c     01 2E 86 F1 | 	sub	local05, #1
029a0     03 2E 66 F0 | 	shl	local05, #3
029a4     F2 2E 02 F1 | 	add	local05, objptr
029a8     17 2D 02 FB | 	rdlong	local04, local05
029ac     14 31 02 F6 | 	mov	local06, local02
029b0     01 30 86 F1 | 	sub	local06, #1
029b4     03 30 66 F0 | 	shl	local06, #3
029b8     F2 30 02 F1 | 	add	local06, objptr
029bc     04 30 06 F1 | 	add	local06, #4
029c0     18 2B 02 FB | 	rdlong	local03, local06
029c4     14 31 02 F6 | 	mov	local06, local02
029c8     03 30 66 F0 | 	shl	local06, #3
029cc     F2 30 02 F1 | 	add	local06, objptr
029d0     18 2D 62 FC | 	wrlong	local04, local06
029d4     14 3F 02 F6 | 	mov	local13, local02
029d8     03 3E 66 F0 | 	shl	local13, #3
029dc     F2 3E 02 F1 | 	add	local13, objptr
029e0     04 3E 06 F1 | 	add	local13, #4
029e4     1F 2B 62 FC | 	wrlong	local03, local13
029e8     01 28 86 F1 | 	sub	local02, #1
029ec     39 29 52 F2 | 	cmps	local02, local39 wc
029f0     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
029f4                 | LR__0149
029f4     37 39 02 F6 | 	mov	local10, local37
029f8     01 38 06 F1 | 	add	local10, #1
029fc     03 38 66 F0 | 	shl	local10, #3
02a00     F2 38 02 F1 | 	add	local10, objptr
02a04     37 41 02 F6 | 	mov	local14, local37
02a08     03 40 66 F0 | 	shl	local14, #3
02a0c     F2 40 02 F1 | 	add	local14, objptr
02a10     20 31 02 FB | 	rdlong	local06, local14
02a14     37 5D 02 F6 | 	mov	local28, local37
02a18     2E 51 02 F6 | 	mov	local22, local28
02a1c     03 50 66 F0 | 	shl	local22, #3
02a20     F2 52 02 F6 | 	mov	local23, objptr
02a24     F2 50 02 F1 | 	add	local22, objptr
02a28     28 13 02 FB | 	rdlong	arg01, local22
02a2c     35 00 00 FF 
02a30     0C E4 85 F1 | 	sub	objptr, ##27148
02a34     09 33 02 F6 | 	mov	local07, arg01
02a38     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02a3c                 | LR__0150
02a3c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02a40     01 32 06 51 |  if_ne	add	local07, #1
02a44     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02a48                 | LR__0151
02a48     09 33 82 F1 | 	sub	local07, arg01
02a4c     19 15 02 F6 | 	mov	arg02, local07
02a50     38 15 82 F1 | 	sub	arg02, local38
02a54     18 13 02 F6 | 	mov	arg01, local06
02a58     20 50 B2 FD | 	call	#__system__Right_S
02a5c     1C FB 61 FC | 	wrlong	result1, local10
02a60     37 39 02 F6 | 	mov	local10, local37
02a64     03 38 66 F0 | 	shl	local10, #3
02a68     35 00 00 FF 
02a6c     0C E4 05 F1 | 	add	objptr, ##27148
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 3B 02 F6 | 	mov	local11, local37
02a78     1D 41 02 F6 | 	mov	local14, local11
02a7c     03 40 66 F0 | 	shl	local14, #3
02a80     F2 3E 02 F6 | 	mov	local13, objptr
02a84     F2 40 02 F1 | 	add	local14, objptr
02a88     20 13 02 FB | 	rdlong	arg01, local14
02a8c     38 3D 02 F6 | 	mov	local12, local38
02a90     1E 15 02 F6 | 	mov	arg02, local12
02a94     35 00 00 FF 
02a98     0C E4 85 F1 | 	sub	objptr, ##27148
02a9c     54 4F B2 FD | 	call	#__system__Left_S
02aa0     1C FB 61 FC | 	wrlong	result1, local10
02aa4                 | LR__0152
02aa4                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02aa4     37 2F 02 F6 | 	mov	local05, local37
02aa8     03 2E 66 F0 | 	shl	local05, #3
02aac     35 00 00 FF 
02ab0     0C E4 05 F1 | 	add	objptr, ##27148
02ab4     F2 2E 02 F1 | 	add	local05, objptr
02ab8     17 13 02 FB | 	rdlong	arg01, local05
02abc     01 14 06 F6 | 	mov	arg02, #1
02ac0     35 00 00 FF 
02ac4     0C E4 85 F1 | 	sub	objptr, ##27148
02ac8     28 4F B2 FD | 	call	#__system__Left_S
02acc     FD 12 02 F6 | 	mov	arg01, result1
02ad0     AA 01 00 FF 
02ad4     5F 15 06 F6 | 	mov	arg02, ##@LR__5426
02ad8     C4 2E B2 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     60 01 90 5D |  if_ne	jmp	#LR__0159
02ae4     37 31 02 F6 | 	mov	local06, local37
02ae8     03 30 66 F0 | 	shl	local06, #3
02aec     35 00 00 FF 
02af0     0C E4 05 F1 | 	add	objptr, ##27148
02af4     F2 3C 02 F6 | 	mov	local12, objptr
02af8     F2 30 02 F1 | 	add	local06, objptr
02afc     18 13 02 FB | 	rdlong	arg01, local06
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     09 33 02 F6 | 	mov	local07, arg01
02b0c     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b10                 | LR__0153
02b10     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b14     01 32 06 51 |  if_ne	add	local07, #1
02b18     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b1c                 | LR__0154
02b1c     09 33 82 F1 | 	sub	local07, arg01
02b20     02 32 56 F2 | 	cmps	local07, #2 wc
02b24     1C 01 90 CD |  if_b	jmp	#LR__0159
02b28     01 46 06 F1 | 	add	local17, #1
02b2c                 | '   k+=1
02b2c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b2c     23 29 02 F6 | 	mov	local02, local17
02b30     37 75 02 F6 | 	mov	local40, local37
02b34     01 74 06 F1 | 	add	local40, #1
02b38     35 00 00 FF 
02b3c     0C E4 05 F1 | 	add	objptr, ##27148
02b40     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02b44                 | LR__0155
02b44     14 2F 02 F6 | 	mov	local05, local02
02b48     01 2E 86 F1 | 	sub	local05, #1
02b4c     03 2E 66 F0 | 	shl	local05, #3
02b50     F2 2E 02 F1 | 	add	local05, objptr
02b54     17 2D 02 FB | 	rdlong	local04, local05
02b58     14 31 02 F6 | 	mov	local06, local02
02b5c     01 30 86 F1 | 	sub	local06, #1
02b60     03 30 66 F0 | 	shl	local06, #3
02b64     F2 30 02 F1 | 	add	local06, objptr
02b68     04 30 06 F1 | 	add	local06, #4
02b6c     18 2B 02 FB | 	rdlong	local03, local06
02b70     14 31 02 F6 | 	mov	local06, local02
02b74     03 30 66 F0 | 	shl	local06, #3
02b78     F2 30 02 F1 | 	add	local06, objptr
02b7c     18 2D 62 FC | 	wrlong	local04, local06
02b80     14 3F 02 F6 | 	mov	local13, local02
02b84     03 3E 66 F0 | 	shl	local13, #3
02b88     F2 3E 02 F1 | 	add	local13, objptr
02b8c     04 3E 06 F1 | 	add	local13, #4
02b90     1F 2B 62 FC | 	wrlong	local03, local13
02b94     01 28 86 F1 | 	sub	local02, #1
02b98     3A 29 52 F2 | 	cmps	local02, local40 wc
02b9c     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02ba0                 | LR__0156
02ba0     37 39 02 F6 | 	mov	local10, local37
02ba4     01 38 06 F1 | 	add	local10, #1
02ba8     03 38 66 F0 | 	shl	local10, #3
02bac     F2 38 02 F1 | 	add	local10, objptr
02bb0     37 41 02 F6 | 	mov	local14, local37
02bb4     03 40 66 F0 | 	shl	local14, #3
02bb8     F2 40 02 F1 | 	add	local14, objptr
02bbc     20 31 02 FB | 	rdlong	local06, local14
02bc0     37 3F 02 F6 | 	mov	local13, local37
02bc4     1F 5D 02 F6 | 	mov	local28, local13
02bc8     2E 51 02 F6 | 	mov	local22, local28
02bcc     03 50 66 F0 | 	shl	local22, #3
02bd0     F2 52 02 F6 | 	mov	local23, objptr
02bd4     F2 50 02 F1 | 	add	local22, objptr
02bd8     28 13 02 FB | 	rdlong	arg01, local22
02bdc     35 00 00 FF 
02be0     0C E4 85 F1 | 	sub	objptr, ##27148
02be4     09 33 02 F6 | 	mov	local07, arg01
02be8     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02bec                 | LR__0157
02bec     19 FB C9 FA | 	rdbyte	result1, local07 wz
02bf0     01 32 06 51 |  if_ne	add	local07, #1
02bf4     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02bf8                 | LR__0158
02bf8     09 33 82 F1 | 	sub	local07, arg01
02bfc     19 41 02 F6 | 	mov	local14, local07
02c00     20 3B 02 F6 | 	mov	local11, local14
02c04     01 3A 86 F1 | 	sub	local11, #1
02c08     1D 3D 02 F6 | 	mov	local12, local11
02c0c     18 13 02 F6 | 	mov	arg01, local06
02c10     1E 15 02 F6 | 	mov	arg02, local12
02c14     64 4E B2 FD | 	call	#__system__Right_S
02c18     1C FB 61 FC | 	wrlong	result1, local10
02c1c     37 39 02 F6 | 	mov	local10, local37
02c20     03 38 66 F0 | 	shl	local10, #3
02c24     35 00 00 FF 
02c28     0C E4 05 F1 | 	add	objptr, ##27148
02c2c     F2 38 02 F1 | 	add	local10, objptr
02c30     AA 01 00 FF 
02c34     61 31 06 F6 | 	mov	local06, ##@LR__5427
02c38     1C 31 62 FC | 	wrlong	local06, local10
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44                 | LR__0159
02c44     37 39 02 F6 | 	mov	local10, local37
02c48     03 38 66 F0 | 	shl	local10, #3
02c4c     35 00 00 FF 
02c50     0C E4 05 F1 | 	add	objptr, ##27148
02c54     F2 38 02 F1 | 	add	local10, objptr
02c58     1C 77 02 FB | 	rdlong	local41, local10
02c5c                 | ' 
02c5c                 | ' lp$=lparts(addptr).part$ 
02c5c                 | ' 
02c5c                 | ' ' process mouse/cursor/click on/off
02c5c                 | ' 
02c5c                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02c5c     AA 01 00 FF 
02c60     63 15 06 F6 | 	mov	arg02, ##@LR__5428
02c64     3B 13 02 F6 | 	mov	arg01, local41
02c68     35 00 00 FF 
02c6c     0C E4 85 F1 | 	sub	objptr, ##27148
02c70     2C 2D B2 FD | 	call	#__system___string_cmp
02c74     00 FA 0D F2 | 	cmp	result1, #0 wz
02c78     30 00 90 AD |  if_e	jmp	#LR__0160
02c7c     AA 01 00 FF 
02c80     69 15 06 F6 | 	mov	arg02, ##@LR__5429
02c84     3B 13 02 F6 | 	mov	arg01, local41
02c88     14 2D B2 FD | 	call	#__system___string_cmp
02c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02c90     18 00 90 AD |  if_e	jmp	#LR__0160
02c94     AA 01 00 FF 
02c98     70 15 06 F6 | 	mov	arg02, ##@LR__5430
02c9c     3B 13 02 F6 | 	mov	arg01, local41
02ca0     FC 2C B2 FD | 	call	#__system___string_cmp
02ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ca8     E0 00 90 5D |  if_ne	jmp	#LR__0163
02cac                 | LR__0160
02cac                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02cac     37 2F 02 F6 | 	mov	local05, local37
02cb0     01 2E 06 F1 | 	add	local05, #1
02cb4     03 2E 66 F0 | 	shl	local05, #3
02cb8     35 00 00 FF 
02cbc     0C E4 05 F1 | 	add	objptr, ##27148
02cc0     F2 2E 02 F1 | 	add	local05, objptr
02cc4     17 13 02 FB | 	rdlong	arg01, local05
02cc8     AA 01 00 FF 
02ccc     76 15 06 F6 | 	mov	arg02, ##@LR__5431
02cd0     35 00 00 FF 
02cd4     0C E4 85 F1 | 	sub	objptr, ##27148
02cd8     C4 2C B2 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     38 00 90 5D |  if_ne	jmp	#LR__0161
02ce4     37 39 02 F6 | 	mov	local10, local37
02ce8     01 38 06 F1 | 	add	local10, #1
02cec     03 38 66 F0 | 	shl	local10, #3
02cf0     35 00 00 FF 
02cf4     0C E4 05 F1 | 	add	objptr, ##27148
02cf8     F2 38 02 F1 | 	add	local10, objptr
02cfc     AA 01 00 FF 
02d00     79 31 06 F6 | 	mov	local06, ##@LR__5432
02d04     1C 31 62 FC | 	wrlong	local06, local10
02d08     14 E4 05 F1 | 	add	objptr, #20
02d0c     01 00 80 FF 
02d10     F2 00 68 FC | 	wrlong	##512, objptr
02d14     35 00 00 FF 
02d18     20 E4 85 F1 | 	sub	objptr, ##27168
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     AA 01 00 FF 
02d3c     7B 15 06 F6 | 	mov	arg02, ##@LR__5433
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     54 2C B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     AA 01 00 FF 
02d70     7F 31 06 F6 | 	mov	local06, ##@LR__5434
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | LR__0163
02d8c                 | ' 		
02d8c                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d8c                 | ' 
02d8c                 | ' if (lp$="mode" orelse lp$="m.") then 
02d8c     AA 01 00 FF 
02d90     81 15 06 F6 | 	mov	arg02, ##@LR__5435
02d94     3B 13 02 F6 | 	mov	arg01, local41
02d98     04 2C B2 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     18 00 90 AD |  if_e	jmp	#LR__0164
02da4     AA 01 00 FF 
02da8     86 15 06 F6 | 	mov	arg02, ##@LR__5436
02dac     3B 13 02 F6 | 	mov	arg01, local41
02db0     EC 2B B2 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     F4 01 90 5D |  if_ne	jmp	#LR__0170
02dbc                 | LR__0164
02dbc                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02dbc     37 2F 02 F6 | 	mov	local05, local37
02dc0     01 2E 06 F1 | 	add	local05, #1
02dc4     03 2E 66 F0 | 	shl	local05, #3
02dc8     35 00 00 FF 
02dcc     0C E4 05 F1 | 	add	objptr, ##27148
02dd0     F2 2E 02 F1 | 	add	local05, objptr
02dd4     17 13 02 FB | 	rdlong	arg01, local05
02dd8     AA 01 00 FF 
02ddc     89 15 06 F6 | 	mov	arg02, ##@LR__5437
02de0     35 00 00 FF 
02de4     0C E4 85 F1 | 	sub	objptr, ##27148
02de8     B4 2B B2 FD | 	call	#__system___string_cmp
02dec     00 FA 0D F2 | 	cmp	result1, #0 wz
02df0     2C 00 90 5D |  if_ne	jmp	#LR__0165
02df4     37 39 02 F6 | 	mov	local10, local37
02df8     01 38 06 F1 | 	add	local10, #1
02dfc     03 38 66 F0 | 	shl	local10, #3
02e00     35 00 00 FF 
02e04     0C E4 05 F1 | 	add	objptr, ##27148
02e08     F2 38 02 F1 | 	add	local10, objptr
02e0c     AA 01 00 FF 
02e10     8F 31 06 F6 | 	mov	local06, ##@LR__5438
02e14     1C 31 62 FC | 	wrlong	local06, local10
02e18     35 00 00 FF 
02e1c     0C E4 85 F1 | 	sub	objptr, ##27148
02e20                 | LR__0165
02e20                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e20     37 2F 02 F6 | 	mov	local05, local37
02e24     01 2E 06 F1 | 	add	local05, #1
02e28     03 2E 66 F0 | 	shl	local05, #3
02e2c     35 00 00 FF 
02e30     0C E4 05 F1 | 	add	objptr, ##27148
02e34     F2 2E 02 F1 | 	add	local05, objptr
02e38     17 13 02 FB | 	rdlong	arg01, local05
02e3c     AA 01 00 FF 
02e40     91 15 06 F6 | 	mov	arg02, ##@LR__5439
02e44     35 00 00 FF 
02e48     0C E4 85 F1 | 	sub	objptr, ##27148
02e4c     50 2B B2 FD | 	call	#__system___string_cmp
02e50     00 FA 0D F2 | 	cmp	result1, #0 wz
02e54     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e58     37 39 02 F6 | 	mov	local10, local37
02e5c     01 38 06 F1 | 	add	local10, #1
02e60     03 38 66 F0 | 	shl	local10, #3
02e64     35 00 00 FF 
02e68     0C E4 05 F1 | 	add	objptr, ##27148
02e6c     F2 38 02 F1 | 	add	local10, objptr
02e70     AA 01 00 FF 
02e74     9A 31 06 F6 | 	mov	local06, ##@LR__5440
02e78     1C 31 62 FC | 	wrlong	local06, local10
02e7c     35 00 00 FF 
02e80     0C E4 85 F1 | 	sub	objptr, ##27148
02e84                 | LR__0166
02e84                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e84     37 2F 02 F6 | 	mov	local05, local37
02e88     01 2E 06 F1 | 	add	local05, #1
02e8c     03 2E 66 F0 | 	shl	local05, #3
02e90     35 00 00 FF 
02e94     0C E4 05 F1 | 	add	objptr, ##27148
02e98     F2 2E 02 F1 | 	add	local05, objptr
02e9c     17 13 02 FB | 	rdlong	arg01, local05
02ea0     AA 01 00 FF 
02ea4     9C 15 06 F6 | 	mov	arg02, ##@LR__5441
02ea8     35 00 00 FF 
02eac     0C E4 85 F1 | 	sub	objptr, ##27148
02eb0     EC 2A B2 FD | 	call	#__system___string_cmp
02eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02eb8     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ebc     37 39 02 F6 | 	mov	local10, local37
02ec0     01 38 06 F1 | 	add	local10, #1
02ec4     03 38 66 F0 | 	shl	local10, #3
02ec8     35 00 00 FF 
02ecc     0C E4 05 F1 | 	add	objptr, ##27148
02ed0     F2 38 02 F1 | 	add	local10, objptr
02ed4     AA 01 00 FF 
02ed8     A5 31 06 F6 | 	mov	local06, ##@LR__5442
02edc     1C 31 62 FC | 	wrlong	local06, local10
02ee0     35 00 00 FF 
02ee4     0C E4 85 F1 | 	sub	objptr, ##27148
02ee8                 | LR__0167
02ee8                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02ee8     37 2F 02 F6 | 	mov	local05, local37
02eec     01 2E 06 F1 | 	add	local05, #1
02ef0     03 2E 66 F0 | 	shl	local05, #3
02ef4     35 00 00 FF 
02ef8     0C E4 05 F1 | 	add	objptr, ##27148
02efc     F2 2E 02 F1 | 	add	local05, objptr
02f00     17 13 02 FB | 	rdlong	arg01, local05
02f04     AA 01 00 FF 
02f08     A7 15 06 F6 | 	mov	arg02, ##@LR__5443
02f0c     35 00 00 FF 
02f10     0C E4 85 F1 | 	sub	objptr, ##27148
02f14     88 2A B2 FD | 	call	#__system___string_cmp
02f18     00 FA 0D F2 | 	cmp	result1, #0 wz
02f1c     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f20     37 39 02 F6 | 	mov	local10, local37
02f24     01 38 06 F1 | 	add	local10, #1
02f28     03 38 66 F0 | 	shl	local10, #3
02f2c     35 00 00 FF 
02f30     0C E4 05 F1 | 	add	objptr, ##27148
02f34     F2 38 02 F1 | 	add	local10, objptr
02f38     AA 01 00 FF 
02f3c     B0 31 06 F6 | 	mov	local06, ##@LR__5444
02f40     1C 31 62 FC | 	wrlong	local06, local10
02f44     35 00 00 FF 
02f48     0C E4 85 F1 | 	sub	objptr, ##27148
02f4c                 | LR__0168
02f4c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02f4c     37 2F 02 F6 | 	mov	local05, local37
02f50     01 2E 06 F1 | 	add	local05, #1
02f54     03 2E 66 F0 | 	shl	local05, #3
02f58     35 00 00 FF 
02f5c     0C E4 05 F1 | 	add	objptr, ##27148
02f60     F2 2E 02 F1 | 	add	local05, objptr
02f64     17 13 02 FB | 	rdlong	arg01, local05
02f68     AA 01 00 FF 
02f6c     B2 15 06 F6 | 	mov	arg02, ##@LR__5445
02f70     35 00 00 FF 
02f74     0C E4 85 F1 | 	sub	objptr, ##27148
02f78     24 2A B2 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f84     37 39 02 F6 | 	mov	local10, local37
02f88     01 38 06 F1 | 	add	local10, #1
02f8c     03 38 66 F0 | 	shl	local10, #3
02f90     35 00 00 FF 
02f94     0C E4 05 F1 | 	add	objptr, ##27148
02f98     F2 38 02 F1 | 	add	local10, objptr
02f9c     AA 01 00 FF 
02fa0     B5 31 06 F6 | 	mov	local06, ##@LR__5446
02fa4     1C 31 62 FC | 	wrlong	local06, local10
02fa8     35 00 00 FF 
02fac     0C E4 85 F1 | 	sub	objptr, ##27148
02fb0                 | LR__0169
02fb0                 | LR__0170
02fb0                 | ' 
02fb0                 | ' ' find part types 
02fb0                 | ' 
02fb0                 | ' for i=0 to k-1
02fb0     00 28 06 F6 | 	mov	local02, #0
02fb4     23 79 02 F6 | 	mov	local42, local17
02fb8                 | LR__0171
02fb8     3C 29 52 F2 | 	cmps	local02, local42 wc
02fbc     A4 07 90 3D |  if_ae	jmp	#LR__0183
02fc0     14 39 02 F6 | 	mov	local10, local02
02fc4     03 38 66 F0 | 	shl	local10, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 38 02 F1 | 	add	local10, objptr
02fd4     14 3B 02 F6 | 	mov	local11, local02
02fd8     1D 41 02 F6 | 	mov	local14, local11
02fdc     20 3F 02 F6 | 	mov	local13, local14
02fe0     03 3E 66 F0 | 	shl	local13, #3
02fe4     F2 3E 02 F1 | 	add	local13, objptr
02fe8     1F 13 02 FB | 	rdlong	arg01, local13
02fec     35 00 00 FF 
02ff0     0C E4 85 F1 | 	sub	objptr, ##27148
02ff4     10 19 B0 FD | 	call	#_isseparator
02ff8     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ffc     04 38 06 F1 | 	add	local10, #4
03000     1C FB 61 FC | 	wrlong	result1, local10
03004                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03004     14 39 02 F6 | 	mov	local10, local02
03008     03 38 66 F0 | 	shl	local10, #3
0300c     35 00 00 FF 
03010     0C E4 05 F1 | 	add	objptr, ##27148
03014     F2 38 02 F1 | 	add	local10, objptr
03018     04 38 06 F1 | 	add	local10, #4
0301c     1C 3D 02 FB | 	rdlong	local12, local10
03020     01 3C 56 F2 | 	cmps	local12, #1 wc
03024     35 00 00 FF 
03028     0C E4 85 F1 | 	sub	objptr, ##27148
0302c     2C 07 90 3D |  if_ae	jmp	#LR__0182
03030     14 39 02 F6 | 	mov	local10, local02
03034     03 38 66 F0 | 	shl	local10, #3
03038     35 00 00 FF 
0303c     0C E4 05 F1 | 	add	objptr, ##27148
03040     F2 38 02 F1 | 	add	local10, objptr
03044     14 3B 02 F6 | 	mov	local11, local02
03048     1D 41 02 F6 | 	mov	local14, local11
0304c     20 3F 02 F6 | 	mov	local13, local14
03050     03 3E 66 F0 | 	shl	local13, #3
03054     F2 3E 02 F1 | 	add	local13, objptr
03058     1F 13 02 FB | 	rdlong	arg01, local13
0305c     35 00 00 FF 
03060     0C E4 85 F1 | 	sub	objptr, ##27148
03064     EC 10 B0 FD | 	call	#_isoperator
03068     FD FA E1 F8 | 	getbyte	result1, result1, #0
0306c     04 38 06 F1 | 	add	local10, #4
03070     1C FB 61 FC | 	wrlong	result1, local10
03074                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03074     14 39 02 F6 | 	mov	local10, local02
03078     03 38 66 F0 | 	shl	local10, #3
0307c     35 00 00 FF 
03080     0C E4 05 F1 | 	add	objptr, ##27148
03084     F2 38 02 F1 | 	add	local10, objptr
03088     04 38 06 F1 | 	add	local10, #4
0308c     1C 3D 02 FB | 	rdlong	local12, local10
03090     01 3C 56 F2 | 	cmps	local12, #1 wc
03094     35 00 00 FF 
03098     0C E4 85 F1 | 	sub	objptr, ##27148
0309c     BC 06 90 3D |  if_ae	jmp	#LR__0182
030a0     14 39 02 F6 | 	mov	local10, local02
030a4     03 38 66 F0 | 	shl	local10, #3
030a8     35 00 00 FF 
030ac     0C E4 05 F1 | 	add	objptr, ##27148
030b0     F2 38 02 F1 | 	add	local10, objptr
030b4     14 3B 02 F6 | 	mov	local11, local02
030b8     1D 41 02 F6 | 	mov	local14, local11
030bc     20 3F 02 F6 | 	mov	local13, local14
030c0     03 3E 66 F0 | 	shl	local13, #3
030c4     F2 3E 02 F1 | 	add	local13, objptr
030c8     1F 13 02 FB | 	rdlong	arg01, local13
030cc     35 00 00 FF 
030d0     0C E4 85 F1 | 	sub	objptr, ##27148
030d4                 | ' 
030d4                 | ' select case s
030d4     AB 01 00 FF 
030d8     A8 14 06 F6 | 	mov	arg02, ##@LR__5531
030dc     C0 28 B2 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     1B FA 05 A6 |  if_e	mov	result1, #27
030e8     00 FA 05 56 |  if_ne	mov	result1, #0
030ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
030f0     04 38 06 F1 | 	add	local10, #4
030f4     1C FB 61 FC | 	wrlong	result1, local10
030f8                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
030f8     14 39 02 F6 | 	mov	local10, local02
030fc     03 38 66 F0 | 	shl	local10, #3
03100     35 00 00 FF 
03104     0C E4 05 F1 | 	add	objptr, ##27148
03108     F2 38 02 F1 | 	add	local10, objptr
0310c     04 38 06 F1 | 	add	local10, #4
03110     1C 3D 02 FB | 	rdlong	local12, local10
03114     01 3C 56 F2 | 	cmps	local12, #1 wc
03118     35 00 00 FF 
0311c     0C E4 85 F1 | 	sub	objptr, ##27148
03120     38 06 90 3D |  if_ae	jmp	#LR__0182
03124     14 39 02 F6 | 	mov	local10, local02
03128     03 38 66 F0 | 	shl	local10, #3
0312c     35 00 00 FF 
03130     0C E4 05 F1 | 	add	objptr, ##27148
03134     F2 38 02 F1 | 	add	local10, objptr
03138     14 3B 02 F6 | 	mov	local11, local02
0313c     1D 41 02 F6 | 	mov	local14, local11
03140     20 3F 02 F6 | 	mov	local13, local14
03144     03 3E 66 F0 | 	shl	local13, #3
03148     F2 3E 02 F1 | 	add	local13, objptr
0314c     1F 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     AC 19 B0 FD | 	call	#_iscommand
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     C8 05 90 3D |  if_ae	jmp	#LR__0182
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     20 3F 02 F6 | 	mov	local13, local14
031b4     03 3E 66 F0 | 	shl	local13, #3
031b8     F2 5C 02 F6 | 	mov	local28, objptr
031bc     F2 3E 02 F1 | 	add	local13, objptr
031c0     1F 13 02 FB | 	rdlong	arg01, local13
031c4     35 00 00 FF 
031c8     0C E4 85 F1 | 	sub	objptr, ##27148
031cc     F8 29 B0 FD | 	call	#_isfunction
031d0     FD FA E1 F8 | 	getbyte	result1, result1, #0
031d4     04 38 06 F1 | 	add	local10, #4
031d8     1C FB 61 FC | 	wrlong	result1, local10
031dc                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031dc     14 39 02 F6 | 	mov	local10, local02
031e0     03 38 66 F0 | 	shl	local10, #3
031e4     35 00 00 FF 
031e8     0C E4 05 F1 | 	add	objptr, ##27148
031ec     F2 38 02 F1 | 	add	local10, objptr
031f0     04 38 06 F1 | 	add	local10, #4
031f4     1C 3D 02 FB | 	rdlong	local12, local10
031f8     01 3C 56 F2 | 	cmps	local12, #1 wc
031fc     35 00 00 FF 
03200     0C E4 85 F1 | 	sub	objptr, ##27148
03204     54 05 90 3D |  if_ae	jmp	#LR__0182
03208     14 39 02 F6 | 	mov	local10, local02
0320c     03 38 66 F0 | 	shl	local10, #3
03210     35 00 00 FF 
03214     0C E4 05 F1 | 	add	objptr, ##27148
03218     F2 38 02 F1 | 	add	local10, objptr
0321c     14 3B 02 F6 | 	mov	local11, local02
03220     1D 41 02 F6 | 	mov	local14, local11
03224     03 40 66 F0 | 	shl	local14, #3
03228     F2 3E 02 F6 | 	mov	local13, objptr
0322c     F2 40 02 F1 | 	add	local14, objptr
03230     20 13 02 FB | 	rdlong	arg01, local14
03234     35 00 00 FF 
03238     0C E4 85 F1 | 	sub	objptr, ##27148
0323c     5C 13 B0 FD | 	call	#_isnotename
03240     04 38 06 F1 | 	add	local10, #4
03244     1C FB 61 FC | 	wrlong	result1, local10
03248                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03248                 | ' if lparts(i).token>0 then 
03248     14 39 02 F6 | 	mov	local10, local02
0324c     03 38 66 F0 | 	shl	local10, #3
03250     35 00 00 FF 
03254     0C E4 05 F1 | 	add	objptr, ##27148
03258     F2 38 02 F1 | 	add	local10, objptr
0325c     04 38 06 F1 | 	add	local10, #4
03260     1C 31 02 FB | 	rdlong	local06, local10
03264     01 30 56 F2 | 	cmps	local06, #1 wc
03268     35 00 00 FF 
0326c     0C E4 85 F1 | 	sub	objptr, ##27148
03270     8C 00 90 CD |  if_b	jmp	#LR__0172
03274     14 2F 02 F6 | 	mov	local05, local02
03278     03 2E 66 F0 | 	shl	local05, #3
0327c     35 00 00 FF 
03280     0C E4 05 F1 | 	add	objptr, ##27148
03284     F2 2E 02 F1 | 	add	local05, objptr
03288     04 2E 06 F1 | 	add	local05, #4
0328c     17 3D 02 FB | 	rdlong	local12, local05
03290     1E 13 02 F6 | 	mov	arg01, local12
03294     35 00 00 FF 
03298     0C E4 85 F1 | 	sub	objptr, ##27148
0329c     B0 39 B0 FD | 	call	#_getnoteval
032a0     FD 7A 02 F6 | 	mov	local43, result1
032a4     14 39 02 F6 | 	mov	local10, local02
032a8     03 38 66 F0 | 	shl	local10, #3
032ac     35 00 00 FF 
032b0     0C E4 05 F1 | 	add	objptr, ##27148
032b4     F2 38 02 F1 | 	add	local10, objptr
032b8     3D 13 02 F6 | 	mov	arg01, local43
032bc     35 00 00 FF 
032c0     0C E4 85 F1 | 	sub	objptr, ##27148
032c4     24 49 B2 FD | 	call	#__system__str_S
032c8     1C FB 61 FC | 	wrlong	result1, local10
032cc     14 2D 02 F6 | 	mov	local04, local02
032d0     16 2B 02 F6 | 	mov	local03, local04
032d4     15 39 02 F6 | 	mov	local10, local03
032d8     03 38 66 F0 | 	shl	local10, #3
032dc     35 00 00 FF 
032e0     0C E4 05 F1 | 	add	objptr, ##27148
032e4     F2 38 02 F1 | 	add	local10, objptr
032e8     04 38 06 F1 | 	add	local10, #4
032ec     01 00 80 FF 
032f0     1C 05 68 FC | 	wrlong	##514, local10
032f4     35 00 00 FF 
032f8     0C E4 85 F1 | 	sub	objptr, ##27148
032fc     5C 04 90 FD | 	jmp	#LR__0182
03300                 | LR__0172
03300     14 39 02 F6 | 	mov	local10, local02
03304     03 38 66 F0 | 	shl	local10, #3
03308     35 00 00 FF 
0330c     0C E4 05 F1 | 	add	objptr, ##27148
03310     F2 38 02 F1 | 	add	local10, objptr
03314     14 41 02 F6 | 	mov	local14, local02
03318     03 40 66 F0 | 	shl	local14, #3
0331c     F2 40 02 F1 | 	add	local14, objptr
03320     20 13 02 FB | 	rdlong	arg01, local14
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     04 11 B0 FD | 	call	#_ischannel
03330     04 38 06 F1 | 	add	local10, #4
03334     1C FB 61 FC | 	wrlong	result1, local10
03338                 | ' 
03338                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03338                 | ' 
03338                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03338     14 39 02 F6 | 	mov	local10, local02
0333c     03 38 66 F0 | 	shl	local10, #3
03340     35 00 00 FF 
03344     0C E4 05 F1 | 	add	objptr, ##27148
03348     F2 38 02 F1 | 	add	local10, objptr
0334c     04 38 06 F1 | 	add	local10, #4
03350     1C 31 02 FB | 	rdlong	local06, local10
03354     01 30 56 F2 | 	cmps	local06, #1 wc
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     74 00 90 CD |  if_b	jmp	#LR__0173
03364     14 39 02 F6 | 	mov	local10, local02
03368     03 38 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 38 02 F1 | 	add	local10, objptr
03378     14 3B 02 F6 | 	mov	local11, local02
0337c     1D 41 02 F6 | 	mov	local14, local11
03380     03 40 66 F0 | 	shl	local14, #3
03384     F2 3E 02 F6 | 	mov	local13, objptr
03388     F2 40 02 F1 | 	add	local14, objptr
0338c     20 13 02 FB | 	rdlong	arg01, local14
03390     01 3C 06 F6 | 	mov	local12, #1
03394     01 14 06 F6 | 	mov	arg02, #1
03398     35 00 00 FF 
0339c     0C E4 85 F1 | 	sub	objptr, ##27148
033a0     D8 46 B2 FD | 	call	#__system__Right_S
033a4     1C FB 61 FC | 	wrlong	result1, local10
033a8     14 2D 02 F6 | 	mov	local04, local02
033ac     16 2B 02 F6 | 	mov	local03, local04
033b0     15 39 02 F6 | 	mov	local10, local03
033b4     03 38 66 F0 | 	shl	local10, #3
033b8     35 00 00 FF 
033bc     0C E4 05 F1 | 	add	objptr, ##27148
033c0     F2 38 02 F1 | 	add	local10, objptr
033c4     04 38 06 F1 | 	add	local10, #4
033c8     1C 59 68 FC | 	wrlong	#44, local10
033cc     35 00 00 FF 
033d0     0C E4 85 F1 | 	sub	objptr, ##27148
033d4     84 03 90 FD | 	jmp	#LR__0182
033d8                 | LR__0173
033d8     14 39 02 F6 | 	mov	local10, local02
033dc     03 38 66 F0 | 	shl	local10, #3
033e0     35 00 00 FF 
033e4     0C E4 05 F1 | 	add	objptr, ##27148
033e8     F2 38 02 F1 | 	add	local10, objptr
033ec     14 3B 02 F6 | 	mov	local11, local02
033f0     1D 41 02 F6 | 	mov	local14, local11
033f4     03 40 66 F0 | 	shl	local14, #3
033f8     F2 3E 02 F6 | 	mov	local13, objptr
033fc     F2 40 02 F1 | 	add	local14, objptr
03400     20 13 02 FB | 	rdlong	arg01, local14
03404     35 00 00 FF 
03408     0C E4 85 F1 | 	sub	objptr, ##27148
0340c     0C 11 B0 FD | 	call	#_isconstant
03410     04 38 06 F1 | 	add	local10, #4
03414     1C FB 61 FC | 	wrlong	result1, local10
03418                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03418     14 39 02 F6 | 	mov	local10, local02
0341c     03 38 66 F0 | 	shl	local10, #3
03420     35 00 00 FF 
03424     0C E4 05 F1 | 	add	objptr, ##27148
03428     F2 38 02 F1 | 	add	local10, objptr
0342c     04 38 06 F1 | 	add	local10, #4
03430     1C 3D 02 FB | 	rdlong	local12, local10
03434     01 3C 56 F2 | 	cmps	local12, #1 wc
03438     35 00 00 FF 
0343c     0C E4 85 F1 | 	sub	objptr, ##27148
03440     94 00 90 CD |  if_b	jmp	#LR__0174
03444     14 39 02 F6 | 	mov	local10, local02
03448     03 38 66 F0 | 	shl	local10, #3
0344c     35 00 00 FF 
03450     0C E4 05 F1 | 	add	objptr, ##27148
03454     F2 38 02 F1 | 	add	local10, objptr
03458     14 3D 02 F6 | 	mov	local12, local02
0345c     1E 3B 02 F6 | 	mov	local11, local12
03460     1D 41 02 F6 | 	mov	local14, local11
03464     03 40 66 F0 | 	shl	local14, #3
03468     F2 3E 02 F6 | 	mov	local13, objptr
0346c     F2 40 02 F1 | 	add	local14, objptr
03470     04 40 06 F1 | 	add	local14, #4
03474     20 13 02 FB | 	rdlong	arg01, local14
03478     04 40 86 F1 | 	sub	local14, #4
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     09 13 52 F6 | 	abs	arg01, arg01 wc
03488     1F 7C C6 C9 |  if_b	decod	local44, #31
0348c     00 7C 06 36 |  if_ae	mov	local44, #0
03490     58 4F B2 FD | 	call	#__system___float_fromuns
03494     3E FB 61 F5 | 	xor	result1, local44
03498     FD 12 02 F6 | 	mov	arg01, result1
0349c     4C 47 B2 FD | 	call	#__system__str_S
034a0     1C FB 61 FC | 	wrlong	result1, local10
034a4     14 2D 02 F6 | 	mov	local04, local02
034a8     16 2B 02 F6 | 	mov	local03, local04
034ac     15 39 02 F6 | 	mov	local10, local03
034b0     03 38 66 F0 | 	shl	local10, #3
034b4     35 00 00 FF 
034b8     0C E4 05 F1 | 	add	objptr, ##27148
034bc     F2 38 02 F1 | 	add	local10, objptr
034c0     04 38 06 F1 | 	add	local10, #4
034c4     01 00 80 FF 
034c8     1C 03 68 FC | 	wrlong	##513, local10
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     84 02 90 FD | 	jmp	#LR__0182
034d8                 | LR__0174
034d8     14 2F 02 F6 | 	mov	local05, local02
034dc     03 2E 66 F0 | 	shl	local05, #3
034e0     35 00 00 FF 
034e4     0C E4 05 F1 | 	add	objptr, ##27148
034e8     F2 2E 02 F1 | 	add	local05, objptr
034ec     17 13 02 FB | 	rdlong	arg01, local05
034f0     35 00 00 FF 
034f4     0C E4 85 F1 | 	sub	objptr, ##27148
034f8     A0 2F B0 FD | 	call	#_isnum
034fc     FD 7E 02 F6 | 	mov	local45, result1
03500     14 2F 02 F6 | 	mov	local05, local02
03504     03 2E 66 F0 | 	shl	local05, #3
03508     35 00 00 FF 
0350c     0C E4 05 F1 | 	add	objptr, ##27148
03510     F2 2E 02 F1 | 	add	local05, objptr
03514     17 13 02 FB | 	rdlong	arg01, local05
03518     35 00 00 FF 
0351c     0C E4 85 F1 | 	sub	objptr, ##27148
03520     64 33 B0 FD | 	call	#_isint
03524     FD 80 02 F6 | 	mov	local46, result1
03528     14 2F 02 F6 | 	mov	local05, local02
0352c     03 2E 66 F0 | 	shl	local05, #3
03530     35 00 00 FF 
03534     0C E4 05 F1 | 	add	objptr, ##27148
03538     F2 2E 02 F1 | 	add	local05, objptr
0353c     17 13 02 FB | 	rdlong	arg01, local05
03540     35 00 00 FF 
03544     0C E4 85 F1 | 	sub	objptr, ##27148
03548     E0 35 B0 FD | 	call	#_isdec
0354c     FD 82 02 F6 | 	mov	local47, result1
03550                 | ' 
03550                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03550                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03550     00 7E 0E F2 | 	cmp	local45, #0 wz
03554     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03558     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
0355c     34 00 90 AD |  if_e	jmp	#LR__0175
03560     14 2D 02 F6 | 	mov	local04, local02
03564     16 2B 02 F6 | 	mov	local03, local04
03568     15 39 02 F6 | 	mov	local10, local03
0356c     03 38 66 F0 | 	shl	local10, #3
03570     35 00 00 FF 
03574     0C E4 05 F1 | 	add	objptr, ##27148
03578     F2 38 02 F1 | 	add	local10, objptr
0357c     04 38 06 F1 | 	add	local10, #4
03580     01 00 80 FF 
03584     1C 01 68 FC | 	wrlong	##512, local10
03588     35 00 00 FF 
0358c     0C E4 85 F1 | 	sub	objptr, ##27148
03590     C8 01 90 FD | 	jmp	#LR__0182
03594                 | LR__0175
03594                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03594     00 7E 0E F2 | 	cmp	local45, #0 wz
03598     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0359c     41 2D 22 56 |  if_ne	not	local04, local47
035a0     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
035a4     34 00 90 AD |  if_e	jmp	#LR__0176
035a8     14 2D 02 F6 | 	mov	local04, local02
035ac     16 2B 02 F6 | 	mov	local03, local04
035b0     15 39 02 F6 | 	mov	local10, local03
035b4     03 38 66 F0 | 	shl	local10, #3
035b8     35 00 00 FF 
035bc     0C E4 05 F1 | 	add	objptr, ##27148
035c0     F2 38 02 F1 | 	add	local10, objptr
035c4     04 38 06 F1 | 	add	local10, #4
035c8     01 00 80 FF 
035cc     1C 03 68 FC | 	wrlong	##513, local10
035d0     35 00 00 FF 
035d4     0C E4 85 F1 | 	sub	objptr, ##27148
035d8     80 01 90 FD | 	jmp	#LR__0182
035dc                 | LR__0176
035dc                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
035dc     00 7E 0E F2 | 	cmp	local45, #0 wz
035e0     40 2D 22 56 |  if_ne	not	local04, local46
035e4     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
035e8     41 2B 22 56 |  if_ne	not	local03, local47
035ec     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
035f0     34 00 90 AD |  if_e	jmp	#LR__0177
035f4     14 2D 02 F6 | 	mov	local04, local02
035f8     16 2B 02 F6 | 	mov	local03, local04
035fc     15 39 02 F6 | 	mov	local10, local03
03600     03 38 66 F0 | 	shl	local10, #3
03604     35 00 00 FF 
03608     0C E4 05 F1 | 	add	objptr, ##27148
0360c     F2 38 02 F1 | 	add	local10, objptr
03610     04 38 06 F1 | 	add	local10, #4
03614     01 00 80 FF 
03618     1C 05 68 FC | 	wrlong	##514, local10
0361c     35 00 00 FF 
03620     0C E4 85 F1 | 	sub	objptr, ##27148
03624     34 01 90 FD | 	jmp	#LR__0182
03628                 | LR__0177
03628                 | ' 
03628                 | ' if isstring(lparts(i).part$) then 
03628     14 2F 02 F6 | 	mov	local05, local02
0362c     03 2E 66 F0 | 	shl	local05, #3
03630     35 00 00 FF 
03634     0C E4 05 F1 | 	add	objptr, ##27148
03638     F2 2E 02 F1 | 	add	local05, objptr
0363c     17 13 02 FB | 	rdlong	arg01, local05
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     A0 35 B0 FD | 	call	#_isstring
0364c     00 FA 0D F2 | 	cmp	result1, #0 wz
03650     A8 00 90 AD |  if_e	jmp	#LR__0180
03654     14 39 02 F6 | 	mov	local10, local02
03658     03 38 66 F0 | 	shl	local10, #3
0365c     35 00 00 FF 
03660     0C E4 05 F1 | 	add	objptr, ##27148
03664     F2 38 02 F1 | 	add	local10, objptr
03668     04 38 06 F1 | 	add	local10, #4
0366c     01 00 80 FF 
03670     1C 07 68 FC | 	wrlong	##515, local10
03674     14 2D 02 F6 | 	mov	local04, local02
03678     16 2B 02 F6 | 	mov	local03, local04
0367c     15 39 02 F6 | 	mov	local10, local03
03680     03 38 66 F0 | 	shl	local10, #3
03684     F2 38 02 F1 | 	add	local10, objptr
03688     14 41 02 F6 | 	mov	local14, local02
0368c     03 40 66 F0 | 	shl	local14, #3
03690     F2 40 02 F1 | 	add	local14, objptr
03694     20 31 02 FB | 	rdlong	local06, local14
03698     02 3C 06 F6 | 	mov	local12, #2
0369c     14 51 02 F6 | 	mov	local22, local02
036a0     28 53 02 F6 | 	mov	local23, local22
036a4     03 52 66 F0 | 	shl	local23, #3
036a8     F2 54 02 F6 | 	mov	local24, objptr
036ac     F2 52 02 F1 | 	add	local23, objptr
036b0     29 13 02 FB | 	rdlong	arg01, local23
036b4     35 00 00 FF 
036b8     0C E4 85 F1 | 	sub	objptr, ##27148
036bc     09 33 02 F6 | 	mov	local07, arg01
036c0     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
036c4                 | LR__0178
036c4     19 FB C9 FA | 	rdbyte	result1, local07 wz
036c8     01 32 06 51 |  if_ne	add	local07, #1
036cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
036d0                 | LR__0179
036d0     09 33 82 F1 | 	sub	local07, arg01
036d4     19 3F 02 F6 | 	mov	local13, local07
036d8     1F 41 02 F6 | 	mov	local14, local13
036dc     02 40 86 F1 | 	sub	local14, #2
036e0     20 3B 02 F6 | 	mov	local11, local14
036e4     18 13 02 F6 | 	mov	arg01, local06
036e8     1E 15 02 F6 | 	mov	arg02, local12
036ec     1D 17 02 F6 | 	mov	arg03, local11
036f0     18 44 B2 FD | 	call	#__system__Mid_S
036f4     1C FB 61 FC | 	wrlong	result1, local10
036f8     60 00 90 FD | 	jmp	#LR__0182
036fc                 | LR__0180
036fc                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
036fc     14 2B 02 F6 | 	mov	local03, local02
03700     15 2F 02 F6 | 	mov	local05, local03
03704     03 2E 66 F0 | 	shl	local05, #3
03708     35 00 00 FF 
0370c     0C E4 05 F1 | 	add	objptr, ##27148
03710     F2 2E 02 F1 | 	add	local05, objptr
03714     17 13 02 FB | 	rdlong	arg01, local05
03718     35 00 00 FF 
0371c     0C E4 85 F1 | 	sub	objptr, ##27148
03720     04 2B B0 FD | 	call	#_isname
03724     FD 2C 0A F6 | 	mov	local04, result1 wz
03728     30 00 90 AD |  if_e	jmp	#LR__0181
0372c     14 2D 02 F6 | 	mov	local04, local02
03730     16 2B 02 F6 | 	mov	local03, local04
03734     15 39 02 F6 | 	mov	local10, local03
03738     03 38 66 F0 | 	shl	local10, #3
0373c     35 00 00 FF 
03740     0C E4 05 F1 | 	add	objptr, ##27148
03744     F2 38 02 F1 | 	add	local10, objptr
03748     04 38 06 F1 | 	add	local10, #4
0374c     01 00 80 FF 
03750     1C 09 68 FC | 	wrlong	##516, local10
03754     35 00 00 FF 
03758     0C E4 85 F1 | 	sub	objptr, ##27148
0375c                 | LR__0181
0375c                 | LR__0182
0375c     01 28 06 F1 | 	add	local02, #1
03760     54 F8 9F FD | 	jmp	#LR__0171
03764                 | LR__0183
03764     23 39 02 F6 | 	mov	local10, local17
03768     03 38 66 F0 | 	shl	local10, #3
0376c     35 00 00 FF 
03770     0C E4 05 F1 | 	add	objptr, ##27148
03774     F2 38 02 F1 | 	add	local10, objptr
03778     04 38 06 F1 | 	add	local10, #4
0377c     1C FD 6B FC | 	wrlong	#510, local10
03780     23 39 02 F6 | 	mov	local10, local17
03784     03 38 66 F0 | 	shl	local10, #3
03788     F2 38 02 F1 | 	add	local10, objptr
0378c     AA 01 00 FF 
03790     B7 31 06 F6 | 	mov	local06, ##@LR__5447
03794     1C 31 62 FC | 	wrlong	local06, local10
03798     10 00 00 FF 
0379c     54 E4 05 F1 | 	add	objptr, ##8276
037a0     F2 46 62 FC | 	wrlong	local17, objptr
037a4     45 00 00 FF 
037a8     60 E4 85 F1 | 	sub	objptr, ##35424
037ac                 | ' 
037ac                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
037ac                 | ' 
037ac                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
037ac                 | '  
037ac                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
037ac     AA 01 00 FF 
037b0     B8 15 06 F6 | 	mov	arg02, ##@LR__5448
037b4     3B 13 02 F6 | 	mov	arg01, local41
037b8     E4 21 B2 FD | 	call	#__system___string_cmp
037bc     00 FA 0D F2 | 	cmp	result1, #0 wz
037c0     F0 00 90 AD |  if_e	jmp	#LR__0184
037c4     AA 01 00 FF 
037c8     BD 15 06 F6 | 	mov	arg02, ##@LR__5449
037cc     3B 13 02 F6 | 	mov	arg01, local41
037d0     CC 21 B2 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     D8 00 90 AD |  if_e	jmp	#LR__0184
037dc     AA 01 00 FF 
037e0     C2 31 06 F6 | 	mov	local06, ##@LR__5450
037e4     3B 13 02 F6 | 	mov	arg01, local41
037e8     18 15 02 F6 | 	mov	arg02, local06
037ec     B0 21 B2 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     BC 00 90 AD |  if_e	jmp	#LR__0184
037f8     AA 01 00 FF 
037fc     C7 3D 06 F6 | 	mov	local12, ##@LR__5451
03800     1E 31 02 F6 | 	mov	local06, local12
03804     3B 13 02 F6 | 	mov	arg01, local41
03808     18 15 02 F6 | 	mov	arg02, local06
0380c     90 21 B2 FD | 	call	#__system___string_cmp
03810     00 FA 0D F2 | 	cmp	result1, #0 wz
03814     9C 00 90 AD |  if_e	jmp	#LR__0184
03818     AA 01 00 FF 
0381c     CB 3B 06 F6 | 	mov	local11, ##@LR__5452
03820     1D 3D 02 F6 | 	mov	local12, local11
03824     3B 13 02 F6 | 	mov	arg01, local41
03828     1E 15 02 F6 | 	mov	arg02, local12
0382c     70 21 B2 FD | 	call	#__system___string_cmp
03830     FD 30 0A F6 | 	mov	local06, result1 wz
03834     7C 00 90 AD |  if_e	jmp	#LR__0184
03838     AA 01 00 FF 
0383c     CF 41 06 F6 | 	mov	local14, ##@LR__5453
03840     20 3B 02 F6 | 	mov	local11, local14
03844     3B 13 02 F6 | 	mov	arg01, local41
03848     1D 15 02 F6 | 	mov	arg02, local11
0384c     50 21 B2 FD | 	call	#__system___string_cmp
03850     FD 3C 0A F6 | 	mov	local12, result1 wz
03854     5C 00 90 AD |  if_e	jmp	#LR__0184
03858     AA 01 00 FF 
0385c     D2 3F 06 F6 | 	mov	local13, ##@LR__5454
03860     1F 41 02 F6 | 	mov	local14, local13
03864     3B 13 02 F6 | 	mov	arg01, local41
03868     20 15 02 F6 | 	mov	arg02, local14
0386c     30 21 B2 FD | 	call	#__system___string_cmp
03870     FD 3A 0A F6 | 	mov	local11, result1 wz
03874     3C 00 90 AD |  if_e	jmp	#LR__0184
03878     AA 01 00 FF 
0387c     D6 3F 06 F6 | 	mov	local13, ##@LR__5455
03880     3B 13 02 F6 | 	mov	arg01, local41
03884     1F 15 02 F6 | 	mov	arg02, local13
03888     14 21 B2 FD | 	call	#__system___string_cmp
0388c     FD 40 0A F6 | 	mov	local14, result1 wz
03890     20 00 90 AD |  if_e	jmp	#LR__0184
03894     AA 01 00 FF 
03898     DC 51 06 F6 | 	mov	local22, ##@LR__5456
0389c     28 5D 02 F6 | 	mov	local28, local22
038a0     3B 13 02 F6 | 	mov	arg01, local41
038a4     2E 15 02 F6 | 	mov	arg02, local28
038a8     F4 20 B2 FD | 	call	#__system___string_cmp
038ac     FD 3E 0A F6 | 	mov	local13, result1 wz
038b0     7C 00 90 5D |  if_ne	jmp	#LR__0185
038b4                 | LR__0184
038b4     37 5D 02 F6 | 	mov	local28, local37
038b8     01 5C 06 F1 | 	add	local28, #1
038bc     2E 51 02 F6 | 	mov	local22, local28
038c0     28 53 02 F6 | 	mov	local23, local22
038c4     03 52 66 F0 | 	shl	local23, #3
038c8     35 00 00 FF 
038cc     0C E4 05 F1 | 	add	objptr, ##27148
038d0     F2 54 02 F6 | 	mov	local24, objptr
038d4     F2 52 02 F1 | 	add	local23, objptr
038d8     04 52 06 F1 | 	add	local23, #4
038dc     29 61 02 FB | 	rdlong	local30, local23
038e0     04 52 86 F1 | 	sub	local23, #4
038e4     30 5F 02 F6 | 	mov	local29, local30
038e8     01 00 00 FF 
038ec     04 5E 0E F2 | 	cmp	local29, ##516 wz
038f0     35 00 00 FF 
038f4     0C E4 85 F1 | 	sub	objptr, ##27148
038f8     34 00 90 5D |  if_ne	jmp	#LR__0185
038fc     37 39 02 F6 | 	mov	local10, local37
03900     01 38 06 F1 | 	add	local10, #1
03904     03 38 66 F0 | 	shl	local10, #3
03908     35 00 00 FF 
0390c     0C E4 05 F1 | 	add	objptr, ##27148
03910     F2 38 02 F1 | 	add	local10, objptr
03914     01 00 00 FF 
03918     03 30 06 F6 | 	mov	local06, ##515
0391c     04 38 06 F1 | 	add	local10, #4
03920     01 00 80 FF 
03924     1C 07 68 FC | 	wrlong	##515, local10
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930                 | LR__0185
03930                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03930     AA 01 00 FF 
03934     DF 15 06 F6 | 	mov	arg02, ##@LR__5457
03938     3B 13 02 F6 | 	mov	arg01, local41
0393c     60 20 B2 FD | 	call	#__system___string_cmp
03940     00 FA 0D F2 | 	cmp	result1, #0 wz
03944     1C 00 90 AD |  if_e	jmp	#LR__0186
03948     AA 01 00 FF 
0394c     E6 2F 06 F6 | 	mov	local05, ##@LR__5458
03950     3B 13 02 F6 | 	mov	arg01, local41
03954     17 15 02 F6 | 	mov	arg02, local05
03958     44 20 B2 FD | 	call	#__system___string_cmp
0395c     00 FA 0D F2 | 	cmp	result1, #0 wz
03960     7C 00 90 5D |  if_ne	jmp	#LR__0187
03964                 | LR__0186
03964     37 2F 02 F6 | 	mov	local05, local37
03968     01 2E 06 F1 | 	add	local05, #1
0396c     17 31 02 F6 | 	mov	local06, local05
03970     03 30 66 F0 | 	shl	local06, #3
03974     35 00 00 FF 
03978     0C E4 05 F1 | 	add	objptr, ##27148
0397c     F2 3C 02 F6 | 	mov	local12, objptr
03980     F2 30 02 F1 | 	add	local06, objptr
03984     04 30 06 F1 | 	add	local06, #4
03988     18 41 02 FB | 	rdlong	local14, local06
0398c     04 30 86 F1 | 	sub	local06, #4
03990     20 3B 02 F6 | 	mov	local11, local14
03994     01 00 00 FF 
03998     04 3A 0E F2 | 	cmp	local11, ##516 wz
0399c     35 00 00 FF 
039a0     0C E4 85 F1 | 	sub	objptr, ##27148
039a4     38 00 90 5D |  if_ne	jmp	#LR__0187
039a8     37 39 02 F6 | 	mov	local10, local37
039ac     01 38 06 F1 | 	add	local10, #1
039b0     03 38 66 F0 | 	shl	local10, #3
039b4     35 00 00 FF 
039b8     0C E4 05 F1 | 	add	objptr, ##27148
039bc     F2 2E 02 F6 | 	mov	local05, objptr
039c0     F2 38 02 F1 | 	add	local10, objptr
039c4     01 00 00 FF 
039c8     03 30 06 F6 | 	mov	local06, ##515
039cc     04 38 06 F1 | 	add	local10, #4
039d0     01 00 80 FF 
039d4     1C 07 68 FC | 	wrlong	##515, local10
039d8     35 00 00 FF 
039dc     0C E4 85 F1 | 	sub	objptr, ##27148
039e0                 | LR__0187
039e0                 | ' 
039e0                 | ' ' cd needs special treatment..
039e0                 | ' 
039e0                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
039e0     AA 01 00 FF 
039e4     EC 15 06 F6 | 	mov	arg02, ##@LR__5459
039e8     3B 13 02 F6 | 	mov	arg01, local41
039ec     B0 1F B2 FD | 	call	#__system___string_cmp
039f0     00 FA 0D F2 | 	cmp	result1, #0 wz
039f4     38 00 90 5D |  if_ne	jmp	#LR__0188
039f8     37 39 02 F6 | 	mov	local10, local37
039fc     01 38 06 F1 | 	add	local10, #1
03a00     03 38 66 F0 | 	shl	local10, #3
03a04     35 00 00 FF 
03a08     0C E4 05 F1 | 	add	objptr, ##27148
03a0c     F2 2E 02 F6 | 	mov	local05, objptr
03a10     F2 38 02 F1 | 	add	local10, objptr
03a14     01 00 00 FF 
03a18     03 30 06 F6 | 	mov	local06, ##515
03a1c     04 38 06 F1 | 	add	local10, #4
03a20     01 00 80 FF 
03a24     1C 07 68 FC | 	wrlong	##515, local10
03a28     35 00 00 FF 
03a2c     0C E4 85 F1 | 	sub	objptr, ##27148
03a30                 | LR__0188
03a30                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03a30     AA 01 00 FF 
03a34     EF 15 06 F6 | 	mov	arg02, ##@LR__5460
03a38     3B 13 02 F6 | 	mov	arg01, local41
03a3c     60 1F B2 FD | 	call	#__system___string_cmp
03a40     00 FA 0D F2 | 	cmp	result1, #0 wz
03a44     A4 00 90 5D |  if_ne	jmp	#LR__0189
03a48     37 31 02 F6 | 	mov	local06, local37
03a4c     01 30 06 F1 | 	add	local06, #1
03a50     03 30 66 F0 | 	shl	local06, #3
03a54     35 00 00 FF 
03a58     0C E4 05 F1 | 	add	objptr, ##27148
03a5c     F2 3C 02 F6 | 	mov	local12, objptr
03a60     F2 30 02 F1 | 	add	local06, objptr
03a64     18 13 02 FB | 	rdlong	arg01, local06
03a68     AA 01 00 FF 
03a6c     F3 2F 06 F6 | 	mov	local05, ##@LR__5461
03a70     17 15 02 F6 | 	mov	arg02, local05
03a74     35 00 00 FF 
03a78     0C E4 85 F1 | 	sub	objptr, ##27148
03a7c     20 1F B2 FD | 	call	#__system___string_cmp
03a80     00 FA 0D F2 | 	cmp	result1, #0 wz
03a84     64 00 90 5D |  if_ne	jmp	#LR__0189
03a88     37 39 02 F6 | 	mov	local10, local37
03a8c     01 38 06 F1 | 	add	local10, #1
03a90     03 38 66 F0 | 	shl	local10, #3
03a94     35 00 00 FF 
03a98     0C E4 05 F1 | 	add	objptr, ##27148
03a9c     F2 38 02 F1 | 	add	local10, objptr
03aa0     04 38 06 F1 | 	add	local10, #4
03aa4     01 00 80 FF 
03aa8     1C 07 68 FC | 	wrlong	##515, local10
03aac     37 39 02 F6 | 	mov	local10, local37
03ab0     01 38 06 F1 | 	add	local10, #1
03ab4     03 38 66 F0 | 	shl	local10, #3
03ab8     F2 38 02 F1 | 	add	local10, objptr
03abc     AA 01 00 FF 
03ac0     F5 31 06 F6 | 	mov	local06, ##@LR__5462
03ac4     1C 31 62 FC | 	wrlong	local06, local10
03ac8     37 39 02 F6 | 	mov	local10, local37
03acc     03 38 66 F0 | 	shl	local10, #3
03ad0     F2 2E 02 F6 | 	mov	local05, objptr
03ad4     F2 38 02 F1 | 	add	local10, objptr
03ad8     C3 30 06 F6 | 	mov	local06, #195
03adc     04 38 06 F1 | 	add	local10, #4
03ae0     1C 87 69 FC | 	wrlong	#195, local10
03ae4     35 00 00 FF 
03ae8     0C E4 85 F1 | 	sub	objptr, ##27148
03aec                 | LR__0189
03aec                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03aec     AA 01 00 FF 
03af0     F8 39 06 F6 | 	mov	local10, ##@LR__5463
03af4     3B 13 02 F6 | 	mov	arg01, local41
03af8     1C 15 02 F6 | 	mov	arg02, local10
03afc     A0 1E B2 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     04 01 90 5D |  if_ne	jmp	#LR__0192
03b08     37 31 02 F6 | 	mov	local06, local37
03b0c     01 30 06 F1 | 	add	local06, #1
03b10     03 30 66 F0 | 	shl	local06, #3
03b14     35 00 00 FF 
03b18     0C E4 05 F1 | 	add	objptr, ##27148
03b1c     F2 3C 02 F6 | 	mov	local12, objptr
03b20     F2 30 02 F1 | 	add	local06, objptr
03b24     18 13 02 FB | 	rdlong	arg01, local06
03b28     AA 01 00 FF 
03b2c     FB 2F 06 F6 | 	mov	local05, ##@LR__5464
03b30     17 39 02 F6 | 	mov	local10, local05
03b34     1C 15 02 F6 | 	mov	arg02, local10
03b38     35 00 00 FF 
03b3c     0C E4 85 F1 | 	sub	objptr, ##27148
03b40     5C 1E B2 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     C0 00 90 5D |  if_ne	jmp	#LR__0192
03b4c     37 39 02 F6 | 	mov	local10, local37
03b50     01 38 06 F1 | 	add	local10, #1
03b54     03 38 66 F0 | 	shl	local10, #3
03b58     35 00 00 FF 
03b5c     0C E4 05 F1 | 	add	objptr, ##27148
03b60     F2 2E 02 F6 | 	mov	local05, objptr
03b64     F2 38 02 F1 | 	add	local10, objptr
03b68     01 00 00 FF 
03b6c     03 30 06 F6 | 	mov	local06, ##515
03b70     04 38 06 F1 | 	add	local10, #4
03b74     01 00 80 FF 
03b78     1C 07 68 FC | 	wrlong	##515, local10
03b7c     04 38 86 F1 | 	sub	local10, #4
03b80     37 29 02 F6 | 	mov	local02, local37
03b84     02 28 06 F1 | 	add	local02, #2
03b88     23 85 02 F6 | 	mov	local48, local17
03b8c     01 84 06 F1 | 	add	local48, #1
03b90     35 00 00 FF 
03b94     0C E4 85 F1 | 	sub	objptr, ##27148
03b98                 | LR__0190
03b98     42 29 52 F2 | 	cmps	local02, local48 wc
03b9c     6C 00 90 3D |  if_ae	jmp	#LR__0191
03ba0     14 39 02 F6 | 	mov	local10, local02
03ba4     03 38 66 F0 | 	shl	local10, #3
03ba8     35 00 00 FF 
03bac     0C E4 05 F1 | 	add	objptr, ##27148
03bb0     F2 38 02 F1 | 	add	local10, objptr
03bb4     1C 87 02 FB | 	rdlong	local49, local10
03bb8     37 39 02 F6 | 	mov	local10, local37
03bbc     01 38 06 F1 | 	add	local10, #1
03bc0     03 38 66 F0 | 	shl	local10, #3
03bc4     F2 2E 02 F6 | 	mov	local05, objptr
03bc8     F2 38 02 F1 | 	add	local10, objptr
03bcc     37 3B 02 F6 | 	mov	local11, local37
03bd0     01 3A 06 F1 | 	add	local11, #1
03bd4     1D 41 02 F6 | 	mov	local14, local11
03bd8     03 40 66 F0 | 	shl	local14, #3
03bdc     F2 3E 02 F6 | 	mov	local13, objptr
03be0     F2 40 02 F1 | 	add	local14, objptr
03be4     20 13 02 FB | 	rdlong	arg01, local14
03be8     43 3D 02 F6 | 	mov	local12, local49
03bec     1E 15 02 F6 | 	mov	arg02, local12
03bf0     35 00 00 FF 
03bf4     0C E4 85 F1 | 	sub	objptr, ##27148
03bf8     D8 1D B2 FD | 	call	#__system___string_concat
03bfc     FD 30 02 F6 | 	mov	local06, result1
03c00     1C 31 62 FC | 	wrlong	local06, local10
03c04     01 28 06 F1 | 	add	local02, #1
03c08     8C FF 9F FD | 	jmp	#LR__0190
03c0c                 | LR__0191
03c0c                 | LR__0192
03c0c                 | ' 
03c0c                 | ' ' determine a type of the line and compile it
03c0c                 | ' 
03c0c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03c0c     35 00 00 FF 
03c10     0C E4 05 F1 | 	add	objptr, ##27148
03c14     F2 12 02 FB | 	rdlong	arg01, objptr
03c18     35 00 00 FF 
03c1c     0C E4 85 F1 | 	sub	objptr, ##27148
03c20     08 2F B0 FD | 	call	#_isdec
03c24     00 FA 0D F2 | 	cmp	result1, #0 wz
03c28     30 00 90 AD |  if_e	jmp	#LR__0193
03c2c     35 00 00 FF 
03c30     0C E4 05 F1 | 	add	objptr, ##27148
03c34     F2 12 02 FB | 	rdlong	arg01, objptr
03c38     35 00 00 FF 
03c3c     0C E4 85 F1 | 	sub	objptr, ##27148
03c40     00 14 06 F6 | 	mov	arg02, #0
03c44     20 52 B2 FD | 	call	#__system____builtin_atoi
03c48     52 00 00 FF 
03c4c     5C E4 05 F1 | 	add	objptr, ##42076
03c50     F2 FA 61 FC | 	wrlong	result1, objptr
03c54     52 00 00 FF 
03c58     5C E4 85 F1 | 	sub	objptr, ##42076
03c5c                 | LR__0193
03c5c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03c5c     52 00 00 FF 
03c60     5C E4 05 F1 | 	add	objptr, ##42076
03c64     F2 2C 02 FB | 	rdlong	local04, objptr
03c68     52 00 00 FF 
03c6c     5C E4 85 F1 | 	sub	objptr, ##42076
03c70     01 2C 16 F2 | 	cmp	local04, #1 wc
03c74     40 00 90 CD |  if_b	jmp	#LR__0194
03c78     01 46 0E F2 | 	cmp	local17, #1 wz
03c7c     37 00 00 AF 
03c80     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c84     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03c88     37 00 00 AF 
03c8c     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c90     17 39 02 A6 |  if_e	mov	local10, local05
03c94     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03c98     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c9c     52 00 00 FF 
03ca0     5C E4 05 F1 | 	add	objptr, ##42076
03ca4     F2 12 02 FB | 	rdlong	arg01, objptr
03ca8     52 00 00 FF 
03cac     5C E4 85 F1 | 	sub	objptr, ##42076
03cb0     24 30 B0 FD | 	call	#_deleteline
03cb4     C8 03 90 FD | 	jmp	#LR__0205
03cb8                 | LR__0194
03cb8                 | ' 
03cb8                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03cb8     37 00 00 FF 
03cbc     24 E4 05 F1 | 	add	objptr, ##28196
03cc0     F2 2C 0A FB | 	rdlong	local04, objptr wz
03cc4     37 00 00 FF 
03cc8     24 E4 85 F1 | 	sub	objptr, ##28196
03ccc     20 00 90 AD |  if_e	jmp	#LR__0195
03cd0     37 00 00 FF 
03cd4     24 E4 05 F1 | 	add	objptr, ##28196
03cd8     F2 2E 02 FB | 	rdlong	local05, objptr
03cdc     37 00 00 FF 
03ce0     24 E4 85 F1 | 	sub	objptr, ##28196
03ce4     17 39 02 F6 | 	mov	local10, local05
03ce8     03 38 0E F2 | 	cmp	local10, #3 wz
03cec     C0 00 90 5D |  if_ne	jmp	#LR__0197
03cf0                 | LR__0195
03cf0     35 00 00 FF 
03cf4     20 E4 05 F1 | 	add	objptr, ##27168
03cf8     F2 3C 02 FB | 	rdlong	local12, objptr
03cfc     35 00 00 FF 
03d00     20 E4 85 F1 | 	sub	objptr, ##27168
03d04     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d08     A4 00 90 AD |  if_e	jmp	#LR__0197
03d0c     52 00 00 FF 
03d10     5C E4 05 F1 | 	add	objptr, ##42076
03d14     F2 12 02 FB | 	rdlong	arg01, objptr
03d18     1B 00 00 FF 
03d1c     38 E4 85 F1 | 	sub	objptr, ##13880
03d20     F2 16 02 FB | 	rdlong	arg03, objptr
03d24     37 00 00 FF 
03d28     24 E4 85 F1 | 	sub	objptr, ##28196
03d2c     00 14 06 F6 | 	mov	arg02, #0
03d30     F4 43 B0 FD | 	call	#_compile
03d34     FD 26 0A F6 | 	mov	local01, result1 wz
03d38                 | '   err=compile(linenum,0,cont) 
03d38                 | '   if err<>0 then printerror(err,linenum): goto 101
03d38     20 00 90 AD |  if_e	jmp	#LR__0196
03d3c     52 00 00 FF 
03d40     5C E4 05 F1 | 	add	objptr, ##42076
03d44     F2 14 02 FB | 	rdlong	arg02, objptr
03d48     52 00 00 FF 
03d4c     5C E4 85 F1 | 	sub	objptr, ##42076
03d50     13 13 02 F6 | 	mov	arg01, local01
03d54     34 E2 B1 FD | 	call	#_printerror
03d58     44 03 90 FD | 	jmp	#LR__0206
03d5c                 | LR__0196
03d5c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03d5c     52 00 00 FF 
03d60     A0 E4 05 F1 | 	add	objptr, ##42144
03d64     F2 12 02 FB | 	rdlong	arg01, objptr
03d68     52 00 00 FF 
03d6c     A0 E4 85 F1 | 	sub	objptr, ##42144
03d70     AA 01 00 FF 
03d74     FD 15 06 F6 | 	mov	arg02, ##@LR__5465
03d78     24 1C B2 FD | 	call	#__system___string_cmp
03d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d80     FC 02 90 AD |  if_e	jmp	#LR__0205
03d84     52 00 00 FF 
03d88     A0 E4 05 F1 | 	add	objptr, ##42144
03d8c     F2 2C 02 FB | 	rdlong	local04, objptr
03d90     1B 00 00 FF 
03d94     84 E4 85 F1 | 	sub	objptr, ##13956
03d98     F2 2C 62 FC | 	wrlong	local04, objptr
03d9c     08 E4 05 F1 | 	add	objptr, #8
03da0     F2 08 68 FC | 	wrlong	#4, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     78 DA 9F FD | 	jmp	#LR__0070
03db0                 | LR__0197
03db0                 | '       							
03db0                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03db0     37 00 00 FF 
03db4     24 E4 05 F1 | 	add	objptr, ##28196
03db8     F2 2C 02 FB | 	rdlong	local04, objptr
03dbc     37 00 00 FF 
03dc0     24 E4 85 F1 | 	sub	objptr, ##28196
03dc4     01 2C 0E F2 | 	cmp	local04, #1 wz
03dc8     37 00 00 5F 
03dcc     24 E4 05 51 |  if_ne	add	objptr, ##28196
03dd0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03dd4     37 00 00 5F 
03dd8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03ddc     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03de0     C0 00 90 5D |  if_ne	jmp	#LR__0199
03de4     35 00 00 FF 
03de8     18 E4 05 F1 | 	add	objptr, ##27160
03dec     F2 3C 02 FB | 	rdlong	local12, objptr
03df0     35 00 00 FF 
03df4     18 E4 85 F1 | 	sub	objptr, ##27160
03df8     1B 3C 0E F2 | 	cmp	local12, #27 wz
03dfc     A4 00 90 AD |  if_e	jmp	#LR__0199
03e00     52 00 00 FF 
03e04     5C E4 05 F1 | 	add	objptr, ##42076
03e08     F2 12 02 FB | 	rdlong	arg01, objptr
03e0c     1B 00 00 FF 
03e10     38 E4 85 F1 | 	sub	objptr, ##13880
03e14     F2 16 02 FB | 	rdlong	arg03, objptr
03e18     37 00 00 FF 
03e1c     24 E4 85 F1 | 	sub	objptr, ##28196
03e20     00 14 06 F6 | 	mov	arg02, #0
03e24     00 43 B0 FD | 	call	#_compile
03e28     FD 26 0A F6 | 	mov	local01, result1 wz
03e2c                 | '   err=compile(linenum,0,cont) 
03e2c                 | '   if err<>0 then printerror(err,linenum): goto 101
03e2c     20 00 90 AD |  if_e	jmp	#LR__0198
03e30     52 00 00 FF 
03e34     5C E4 05 F1 | 	add	objptr, ##42076
03e38     F2 14 02 FB | 	rdlong	arg02, objptr
03e3c     52 00 00 FF 
03e40     5C E4 85 F1 | 	sub	objptr, ##42076
03e44     13 13 02 F6 | 	mov	arg01, local01
03e48     40 E1 B1 FD | 	call	#_printerror
03e4c     50 02 90 FD | 	jmp	#LR__0206
03e50                 | LR__0198
03e50                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03e50     52 00 00 FF 
03e54     A0 E4 05 F1 | 	add	objptr, ##42144
03e58     F2 12 02 FB | 	rdlong	arg01, objptr
03e5c     52 00 00 FF 
03e60     A0 E4 85 F1 | 	sub	objptr, ##42144
03e64     AA 01 00 FF 
03e68     FE 15 06 F6 | 	mov	arg02, ##@LR__5466
03e6c     30 1B B2 FD | 	call	#__system___string_cmp
03e70     00 FA 0D F2 | 	cmp	result1, #0 wz
03e74     08 02 90 AD |  if_e	jmp	#LR__0205
03e78     52 00 00 FF 
03e7c     A0 E4 05 F1 | 	add	objptr, ##42144
03e80     F2 2C 02 FB | 	rdlong	local04, objptr
03e84     1B 00 00 FF 
03e88     84 E4 85 F1 | 	sub	objptr, ##13956
03e8c     F2 2C 62 FC | 	wrlong	local04, objptr
03e90     08 E4 05 F1 | 	add	objptr, #8
03e94     F2 08 68 FC | 	wrlong	#4, objptr
03e98     37 00 00 FF 
03e9c     24 E4 85 F1 | 	sub	objptr, ##28196
03ea0     84 D9 9F FD | 	jmp	#LR__0070
03ea4                 | LR__0199
03ea4                 | ' 							 
03ea4                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03ea4     37 00 00 FF 
03ea8     24 E4 05 F1 | 	add	objptr, ##28196
03eac     F2 2C 0A FB | 	rdlong	local04, objptr wz
03eb0     37 00 00 FF 
03eb4     24 E4 85 F1 | 	sub	objptr, ##28196
03eb8     37 00 00 5F 
03ebc     24 E4 05 51 |  if_ne	add	objptr, ##28196
03ec0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03ec4     37 00 00 5F 
03ec8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03ecc     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03ed0     35 00 00 AF 
03ed4     20 E4 05 A1 |  if_e	add	objptr, ##27168
03ed8     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03edc     35 00 00 AF 
03ee0     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03ee4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03ee8     A4 00 90 5D |  if_ne	jmp	#LR__0201
03eec     52 00 00 FF 
03ef0     5C E4 05 F1 | 	add	objptr, ##42076
03ef4     F2 12 02 FB | 	rdlong	arg01, objptr
03ef8     1B 00 00 FF 
03efc     38 E4 85 F1 | 	sub	objptr, ##13880
03f00     F2 16 02 FB | 	rdlong	arg03, objptr
03f04     37 00 00 FF 
03f08     24 E4 85 F1 | 	sub	objptr, ##28196
03f0c     00 14 06 F6 | 	mov	arg02, #0
03f10     DC 42 B0 FD | 	call	#_compile_assign
03f14     FD 26 0A F6 | 	mov	local01, result1 wz
03f18                 | '   err=compile_assign(linenum,0,cont)
03f18                 | '   if err<>0 then printerror(err,linenum): goto 101
03f18     20 00 90 AD |  if_e	jmp	#LR__0200
03f1c     52 00 00 FF 
03f20     5C E4 05 F1 | 	add	objptr, ##42076
03f24     F2 14 02 FB | 	rdlong	arg02, objptr
03f28     52 00 00 FF 
03f2c     5C E4 85 F1 | 	sub	objptr, ##42076
03f30     13 13 02 F6 | 	mov	arg01, local01
03f34     54 E0 B1 FD | 	call	#_printerror
03f38     64 01 90 FD | 	jmp	#LR__0206
03f3c                 | LR__0200
03f3c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03f3c     52 00 00 FF 
03f40     A0 E4 05 F1 | 	add	objptr, ##42144
03f44     F2 12 02 FB | 	rdlong	arg01, objptr
03f48     52 00 00 FF 
03f4c     A0 E4 85 F1 | 	sub	objptr, ##42144
03f50     AA 01 00 FF 
03f54     FF 15 06 F6 | 	mov	arg02, ##@LR__5467
03f58     44 1A B2 FD | 	call	#__system___string_cmp
03f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f60     1C 01 90 AD |  if_e	jmp	#LR__0205
03f64     52 00 00 FF 
03f68     A0 E4 05 F1 | 	add	objptr, ##42144
03f6c     F2 2C 02 FB | 	rdlong	local04, objptr
03f70     1B 00 00 FF 
03f74     84 E4 85 F1 | 	sub	objptr, ##13956
03f78     F2 2C 62 FC | 	wrlong	local04, objptr
03f7c     08 E4 05 F1 | 	add	objptr, #8
03f80     F2 08 68 FC | 	wrlong	#4, objptr
03f84     37 00 00 FF 
03f88     24 E4 85 F1 | 	sub	objptr, ##28196
03f8c     98 D8 9F FD | 	jmp	#LR__0070
03f90                 | LR__0201
03f90                 | '     							 
03f90                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f90     37 00 00 FF 
03f94     24 E4 05 F1 | 	add	objptr, ##28196
03f98     F2 2C 02 FB | 	rdlong	local04, objptr
03f9c     37 00 00 FF 
03fa0     24 E4 85 F1 | 	sub	objptr, ##28196
03fa4     01 2C 0E F2 | 	cmp	local04, #1 wz
03fa8     37 00 00 5F 
03fac     24 E4 05 51 |  if_ne	add	objptr, ##28196
03fb0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03fb4     37 00 00 5F 
03fb8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03fbc     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03fc0     35 00 00 AF 
03fc4     18 E4 05 A1 |  if_e	add	objptr, ##27160
03fc8     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03fcc     35 00 00 AF 
03fd0     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03fd4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03fd8     A4 00 90 5D |  if_ne	jmp	#LR__0204
03fdc     52 00 00 FF 
03fe0     5C E4 05 F1 | 	add	objptr, ##42076
03fe4     F2 12 02 FB | 	rdlong	arg01, objptr
03fe8     1B 00 00 FF 
03fec     38 E4 85 F1 | 	sub	objptr, ##13880
03ff0     F2 16 02 FB | 	rdlong	arg03, objptr
03ff4     37 00 00 FF 
03ff8     24 E4 85 F1 | 	sub	objptr, ##28196
03ffc     00 14 06 F6 | 	mov	arg02, #0
04000     EC 41 B0 FD | 	call	#_compile_assign
04004     FD 26 0A F6 | 	mov	local01, result1 wz
04008                 | '   err=compile_assign(linenum,0,cont) 
04008                 | '   if err<>0 then printerror(err,linenum): goto 101
04008     20 00 90 AD |  if_e	jmp	#LR__0202
0400c     52 00 00 FF 
04010     5C E4 05 F1 | 	add	objptr, ##42076
04014     F2 14 02 FB | 	rdlong	arg02, objptr
04018     52 00 00 FF 
0401c     5C E4 85 F1 | 	sub	objptr, ##42076
04020     13 13 02 F6 | 	mov	arg01, local01
04024     64 DF B1 FD | 	call	#_printerror
04028     74 00 90 FD | 	jmp	#LR__0206
0402c                 | LR__0202
0402c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
0402c     52 00 00 FF 
04030     A0 E4 05 F1 | 	add	objptr, ##42144
04034     F2 12 02 FB | 	rdlong	arg01, objptr
04038     52 00 00 FF 
0403c     A0 E4 85 F1 | 	sub	objptr, ##42144
04040     AB 01 00 FF 
04044     00 14 06 F6 | 	mov	arg02, ##@LR__5468
04048     54 19 B2 FD | 	call	#__system___string_cmp
0404c     00 FA 4D F2 | 	cmps	result1, #0 wz
04050     2C 00 90 AD |  if_e	jmp	#LR__0203
04054     52 00 00 FF 
04058     A0 E4 05 F1 | 	add	objptr, ##42144
0405c     F2 2C 02 FB | 	rdlong	local04, objptr
04060     1B 00 00 FF 
04064     84 E4 85 F1 | 	sub	objptr, ##13956
04068     F2 2C 62 FC | 	wrlong	local04, objptr
0406c     08 E4 05 F1 | 	add	objptr, #8
04070     F2 08 68 FC | 	wrlong	#4, objptr
04074     37 00 00 FF 
04078     24 E4 85 F1 | 	sub	objptr, ##28196
0407c     A8 D7 9F FD | 	jmp	#LR__0070
04080                 | LR__0203
04080                 | LR__0204
04080                 | LR__0205
04080                 | ' 
04080                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04080     52 00 00 FF 
04084     5C E4 05 F1 | 	add	objptr, ##42076
04088     F2 2C 0A FB | 	rdlong	local04, objptr wz
0408c     52 00 00 FF 
04090     5C E4 85 F1 | 	sub	objptr, ##42076
04094     B0 00 90 5D |  if_ne	jmp	#LR__0209
04098     02 12 06 F6 | 	mov	arg01, #2
0409c     DC 8A B0 FD | 	call	#_execute_line
040a0                 | LR__0206
040a0                 | '   execute_line(2)
040a0                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
040a0     52 00 00 FF 
040a4     80 E4 05 F1 | 	add	objptr, ##42112
040a8     F2 2C 0A FB | 	rdlong	local04, objptr wz
040ac     52 00 00 FF 
040b0     80 E4 85 F1 | 	sub	objptr, ##42112
040b4     20 00 90 5D |  if_ne	jmp	#LR__0207
040b8     AB 01 00 FF 
040bc     01 12 06 F6 | 	mov	arg01, ##@LR__5469
040c0                 | ' 
040c0                 | ' write(text)
040c0     F0 FF B1 FD | 	call	#_hg010b_spin2_write
040c4                 | ' crlf
040c4     EC 04 B2 FD | 	call	#_hg010b_spin2_crlf
040c8     AB 01 00 FF 
040cc     02 12 06 F6 | 	mov	arg01, ##@LR__5470
040d0                 | ' 
040d0                 | ' write(text)
040d0     E0 FF B1 FD | 	call	#_hg010b_spin2_write
040d4                 | ' crlf
040d4     DC 04 B2 FD | 	call	#_hg010b_spin2_crlf
040d8                 | LR__0207
040d8                 | '     if inload=1 andalso err>0 then print fullline$
040d8     52 00 00 FF 
040dc     80 E4 05 F1 | 	add	objptr, ##42112
040e0     F2 2C 02 FB | 	rdlong	local04, objptr
040e4     52 00 00 FF 
040e8     80 E4 85 F1 | 	sub	objptr, ##42112
040ec     01 2C 0E F2 | 	cmp	local04, #1 wz
040f0     54 00 90 5D |  if_ne	jmp	#LR__0208
040f4     01 26 56 F2 | 	cmps	local01, #1 wc
040f8     4C 00 90 CD |  if_b	jmp	#LR__0208
040fc     00 12 06 F6 | 	mov	arg01, #0
04100     9C 75 B2 FD | 	call	#__system___getiolock_0599
04104     FD 12 02 F6 | 	mov	arg01, result1
04108     6C 18 B2 FD | 	call	#__system___lockmem
0410c     37 00 00 FF 
04110     20 E4 05 F1 | 	add	objptr, ##28192
04114     F2 14 02 FB | 	rdlong	arg02, objptr
04118     37 00 00 FF 
0411c     20 E4 85 F1 | 	sub	objptr, ##28192
04120     00 12 06 F6 | 	mov	arg01, #0
04124     00 16 06 F6 | 	mov	arg03, #0
04128     40 25 B2 FD | 	call	#__system___basic_print_string
0412c     00 12 06 F6 | 	mov	arg01, #0
04130     0A 14 06 F6 | 	mov	arg02, #10
04134     00 16 06 F6 | 	mov	arg03, #0
04138     D8 24 B2 FD | 	call	#__system___basic_print_char
0413c     00 12 06 F6 | 	mov	arg01, #0
04140     5C 75 B2 FD | 	call	#__system___getiolock_0599
04144     FD 00 68 FC | 	wrlong	#0, result1
04148                 | LR__0208
04148                 | LR__0209
04148     A7 F0 03 F6 | 	mov	ptra, fp
0414c     B2 00 A0 FD | 	call	#popregs_
04150                 | _interpret_ret
04150     2D 00 64 FD | 	ret
04154                 | 
04154                 | ' 
04154                 | ' '---------------------------------------------------------------------------------------------------------------------
04154                 | ' '
04154                 | ' '                          END OF TOKENIZER MAIN CODE
04154                 | ' '
04154                 | ' '---------------------------------------------------------------------------------------------------------------------
04154                 | ' 
04154                 | ' '---------------------------------------------------------------------------------------------------------------------
04154                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04154                 | ' '---------------------------------------------------------------------------------------------------------------------
04154                 | ' 
04154                 | ' ' Check if the part is an operator, return a token or 0 if not found
04154                 | ' 
04154                 | ' function isoperator(s as string) as ubyte
04154                 | _isoperator
04154     01 4A 05 F6 | 	mov	COUNT_, #1
04158     A8 00 A0 FD | 	call	#pushregs_
0415c                 | ' 
0415c                 | ' select case s
0415c     09 27 02 F6 | 	mov	local01, arg01
04160     AB 01 00 FF 
04164     08 14 06 F6 | 	mov	arg02, ##@LR__5471
04168     13 13 02 F6 | 	mov	arg01, local01
0416c     30 18 B2 FD | 	call	#__system___string_cmp
04170     00 FA 0D F2 | 	cmp	result1, #0 wz
04174     FC 01 90 AD |  if_e	jmp	#LR__0210
04178     AB 01 00 FF 
0417c     0A 14 06 F6 | 	mov	arg02, ##@LR__5472
04180     13 13 02 F6 | 	mov	arg01, local01
04184     18 18 B2 FD | 	call	#__system___string_cmp
04188     00 FA 0D F2 | 	cmp	result1, #0 wz
0418c     EC 01 90 AD |  if_e	jmp	#LR__0211
04190     AB 01 00 FF 
04194     0C 14 06 F6 | 	mov	arg02, ##@LR__5473
04198     13 13 02 F6 | 	mov	arg01, local01
0419c     00 18 B2 FD | 	call	#__system___string_cmp
041a0     00 FA 0D F2 | 	cmp	result1, #0 wz
041a4     DC 01 90 AD |  if_e	jmp	#LR__0212
041a8     AB 01 00 FF 
041ac     0F 14 06 F6 | 	mov	arg02, ##@LR__5474
041b0     13 13 02 F6 | 	mov	arg01, local01
041b4     E8 17 B2 FD | 	call	#__system___string_cmp
041b8     00 FA 0D F2 | 	cmp	result1, #0 wz
041bc     CC 01 90 AD |  if_e	jmp	#LR__0213
041c0     AB 01 00 FF 
041c4     13 14 06 F6 | 	mov	arg02, ##@LR__5475
041c8     13 13 02 F6 | 	mov	arg01, local01
041cc     D0 17 B2 FD | 	call	#__system___string_cmp
041d0     00 FA 0D F2 | 	cmp	result1, #0 wz
041d4     BC 01 90 AD |  if_e	jmp	#LR__0214
041d8     AB 01 00 FF 
041dc     15 14 06 F6 | 	mov	arg02, ##@LR__5476
041e0     13 13 02 F6 | 	mov	arg01, local01
041e4     B8 17 B2 FD | 	call	#__system___string_cmp
041e8     00 FA 0D F2 | 	cmp	result1, #0 wz
041ec     AC 01 90 AD |  if_e	jmp	#LR__0215
041f0     AB 01 00 FF 
041f4     17 14 06 F6 | 	mov	arg02, ##@LR__5477
041f8     13 13 02 F6 | 	mov	arg01, local01
041fc     A0 17 B2 FD | 	call	#__system___string_cmp
04200     00 FA 0D F2 | 	cmp	result1, #0 wz
04204     9C 01 90 AD |  if_e	jmp	#LR__0216
04208     AB 01 00 FF 
0420c     1B 14 06 F6 | 	mov	arg02, ##@LR__5478
04210     13 13 02 F6 | 	mov	arg01, local01
04214     88 17 B2 FD | 	call	#__system___string_cmp
04218     00 FA 0D F2 | 	cmp	result1, #0 wz
0421c     8C 01 90 AD |  if_e	jmp	#LR__0217
04220     AB 01 00 FF 
04224     1F 14 06 F6 | 	mov	arg02, ##@LR__5479
04228     13 13 02 F6 | 	mov	arg01, local01
0422c     70 17 B2 FD | 	call	#__system___string_cmp
04230     00 FA 0D F2 | 	cmp	result1, #0 wz
04234     7C 01 90 AD |  if_e	jmp	#LR__0218
04238     AB 01 00 FF 
0423c     23 14 06 F6 | 	mov	arg02, ##@LR__5480
04240     13 13 02 F6 | 	mov	arg01, local01
04244     58 17 B2 FD | 	call	#__system___string_cmp
04248     00 FA 0D F2 | 	cmp	result1, #0 wz
0424c     6C 01 90 AD |  if_e	jmp	#LR__0219
04250     AB 01 00 FF 
04254     27 14 06 F6 | 	mov	arg02, ##@LR__5481
04258     13 13 02 F6 | 	mov	arg01, local01
0425c     40 17 B2 FD | 	call	#__system___string_cmp
04260     00 FA 0D F2 | 	cmp	result1, #0 wz
04264     5C 01 90 AD |  if_e	jmp	#LR__0220
04268     AB 01 00 FF 
0426c     2B 14 06 F6 | 	mov	arg02, ##@LR__5482
04270     13 13 02 F6 | 	mov	arg01, local01
04274     28 17 B2 FD | 	call	#__system___string_cmp
04278     00 FA 0D F2 | 	cmp	result1, #0 wz
0427c     4C 01 90 AD |  if_e	jmp	#LR__0221
04280     AB 01 00 FF 
04284     2D 14 06 F6 | 	mov	arg02, ##@LR__5483
04288     13 13 02 F6 | 	mov	arg01, local01
0428c     10 17 B2 FD | 	call	#__system___string_cmp
04290     00 FA 0D F2 | 	cmp	result1, #0 wz
04294     3C 01 90 AD |  if_e	jmp	#LR__0222
04298     AB 01 00 FF 
0429c     31 14 06 F6 | 	mov	arg02, ##@LR__5484
042a0     13 13 02 F6 | 	mov	arg01, local01
042a4     F8 16 B2 FD | 	call	#__system___string_cmp
042a8     00 FA 0D F2 | 	cmp	result1, #0 wz
042ac     2C 01 90 AD |  if_e	jmp	#LR__0223
042b0     AB 01 00 FF 
042b4     33 14 06 F6 | 	mov	arg02, ##@LR__5485
042b8     13 13 02 F6 | 	mov	arg01, local01
042bc     E0 16 B2 FD | 	call	#__system___string_cmp
042c0     00 FA 0D F2 | 	cmp	result1, #0 wz
042c4     1C 01 90 AD |  if_e	jmp	#LR__0224
042c8     AB 01 00 FF 
042cc     35 14 06 F6 | 	mov	arg02, ##@LR__5486
042d0     13 13 02 F6 | 	mov	arg01, local01
042d4     C8 16 B2 FD | 	call	#__system___string_cmp
042d8     00 FA 0D F2 | 	cmp	result1, #0 wz
042dc     0C 01 90 AD |  if_e	jmp	#LR__0225
042e0     AB 01 00 FF 
042e4     38 14 06 F6 | 	mov	arg02, ##@LR__5487
042e8     13 13 02 F6 | 	mov	arg01, local01
042ec     B0 16 B2 FD | 	call	#__system___string_cmp
042f0     00 FA 0D F2 | 	cmp	result1, #0 wz
042f4     FC 00 90 AD |  if_e	jmp	#LR__0226
042f8     AB 01 00 FF 
042fc     3B 14 06 F6 | 	mov	arg02, ##@LR__5488
04300     13 13 02 F6 | 	mov	arg01, local01
04304     98 16 B2 FD | 	call	#__system___string_cmp
04308     00 FA 0D F2 | 	cmp	result1, #0 wz
0430c     EC 00 90 AD |  if_e	jmp	#LR__0227
04310     AB 01 00 FF 
04314     3D 14 06 F6 | 	mov	arg02, ##@LR__5489
04318     13 13 02 F6 | 	mov	arg01, local01
0431c     80 16 B2 FD | 	call	#__system___string_cmp
04320     00 FA 0D F2 | 	cmp	result1, #0 wz
04324     DC 00 90 AD |  if_e	jmp	#LR__0228
04328     AB 01 00 FF 
0432c     3F 14 06 F6 | 	mov	arg02, ##@LR__5490
04330     13 13 02 F6 | 	mov	arg01, local01
04334     68 16 B2 FD | 	call	#__system___string_cmp
04338     00 FA 0D F2 | 	cmp	result1, #0 wz
0433c     CC 00 90 AD |  if_e	jmp	#LR__0229
04340     AB 01 00 FF 
04344     42 14 06 F6 | 	mov	arg02, ##@LR__5491
04348     13 13 02 F6 | 	mov	arg01, local01
0434c     50 16 B2 FD | 	call	#__system___string_cmp
04350     00 FA 0D F2 | 	cmp	result1, #0 wz
04354     BC 00 90 AD |  if_e	jmp	#LR__0230
04358     AB 01 00 FF 
0435c     45 14 06 F6 | 	mov	arg02, ##@LR__5492
04360     13 13 02 F6 | 	mov	arg01, local01
04364     38 16 B2 FD | 	call	#__system___string_cmp
04368     00 FA 0D F2 | 	cmp	result1, #0 wz
0436c     AC 00 90 AD |  if_e	jmp	#LR__0231
04370     B0 00 90 FD | 	jmp	#LR__0232
04374                 | LR__0210
04374     01 FA 05 F6 | 	mov	result1, #1
04378     AC 00 90 FD | 	jmp	#LR__0233
0437c                 | LR__0211
0437c     02 FA 05 F6 | 	mov	result1, #2
04380     A4 00 90 FD | 	jmp	#LR__0233
04384                 | LR__0212
04384     03 FA 05 F6 | 	mov	result1, #3
04388     9C 00 90 FD | 	jmp	#LR__0233
0438c                 | LR__0213
0438c     04 FA 05 F6 | 	mov	result1, #4
04390     94 00 90 FD | 	jmp	#LR__0233
04394                 | LR__0214
04394     05 FA 05 F6 | 	mov	result1, #5
04398     8C 00 90 FD | 	jmp	#LR__0233
0439c                 | LR__0215
0439c     06 FA 05 F6 | 	mov	result1, #6
043a0     84 00 90 FD | 	jmp	#LR__0233
043a4                 | LR__0216
043a4     07 FA 05 F6 | 	mov	result1, #7
043a8     7C 00 90 FD | 	jmp	#LR__0233
043ac                 | LR__0217
043ac     08 FA 05 F6 | 	mov	result1, #8
043b0     74 00 90 FD | 	jmp	#LR__0233
043b4                 | LR__0218
043b4     09 FA 05 F6 | 	mov	result1, #9
043b8     6C 00 90 FD | 	jmp	#LR__0233
043bc                 | LR__0219
043bc     0A FA 05 F6 | 	mov	result1, #10
043c0     64 00 90 FD | 	jmp	#LR__0233
043c4                 | LR__0220
043c4     0B FA 05 F6 | 	mov	result1, #11
043c8     5C 00 90 FD | 	jmp	#LR__0233
043cc                 | LR__0221
043cc     0C FA 05 F6 | 	mov	result1, #12
043d0     54 00 90 FD | 	jmp	#LR__0233
043d4                 | LR__0222
043d4     0D FA 05 F6 | 	mov	result1, #13
043d8     4C 00 90 FD | 	jmp	#LR__0233
043dc                 | LR__0223
043dc     0E FA 05 F6 | 	mov	result1, #14
043e0     44 00 90 FD | 	jmp	#LR__0233
043e4                 | LR__0224
043e4     1B FA 05 F6 | 	mov	result1, #27
043e8     3C 00 90 FD | 	jmp	#LR__0233
043ec                 | LR__0225
043ec     27 FA 05 F6 | 	mov	result1, #39
043f0     34 00 90 FD | 	jmp	#LR__0233
043f4                 | LR__0226
043f4     26 FA 05 F6 | 	mov	result1, #38
043f8     2C 00 90 FD | 	jmp	#LR__0233
043fc                 | LR__0227
043fc     10 FA 05 F6 | 	mov	result1, #16
04400     24 00 90 FD | 	jmp	#LR__0233
04404                 | LR__0228
04404     0F FA 05 F6 | 	mov	result1, #15
04408     1C 00 90 FD | 	jmp	#LR__0233
0440c                 | LR__0229
0440c     2A FA 05 F6 | 	mov	result1, #42
04410     14 00 90 FD | 	jmp	#LR__0233
04414                 | LR__0230
04414     28 FA 05 F6 | 	mov	result1, #40
04418     0C 00 90 FD | 	jmp	#LR__0233
0441c                 | LR__0231
0441c     29 FA 05 F6 | 	mov	result1, #41
04420     04 00 90 FD | 	jmp	#LR__0233
04424                 | LR__0232
04424     00 FA 05 F6 | 	mov	result1, #0
04428                 | LR__0233
04428     A7 F0 03 F6 | 	mov	ptra, fp
0442c     B2 00 A0 FD | 	call	#popregs_
04430                 | _isoperator_ret
04430     2D 00 64 FD | 	ret
04434                 | 
04434                 | ' 
04434                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04434                 | ' 
04434                 | ' function ischannel(s as string) as ulong
04434                 | _ischannel
04434     02 4A 05 F6 | 	mov	COUNT_, #2
04438     A8 00 A0 FD | 	call	#pushregs_
0443c                 | ' if left$(s,1)<>"#" then return 0
0443c     09 27 02 F6 | 	mov	local01, arg01
04440     01 14 06 F6 | 	mov	arg02, #1
04444     AC 35 B2 FD | 	call	#__system__Left_S
04448     FD 12 02 F6 | 	mov	arg01, result1
0444c     AB 01 00 FF 
04450     48 14 06 F6 | 	mov	arg02, ##@LR__5493
04454     48 15 B2 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     00 FA 05 56 |  if_ne	mov	result1, #0
04460     AC 00 90 5D |  if_ne	jmp	#LR__0244
04464                 | ' if len(s)<>2 then return 0
04464     13 13 02 F6 | 	mov	arg01, local01
04468     09 29 02 F6 | 	mov	local02, arg01
0446c     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
04470                 | LR__0240
04470     14 FB C9 FA | 	rdbyte	result1, local02 wz
04474     01 28 06 51 |  if_ne	add	local02, #1
04478     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
0447c                 | LR__0241
0447c     09 29 82 F1 | 	sub	local02, arg01
04480     14 FB 01 F6 | 	mov	result1, local02
04484     02 FA 0D F2 | 	cmp	result1, #2 wz
04488     00 FA 05 56 |  if_ne	mov	result1, #0
0448c     80 00 90 5D |  if_ne	jmp	#LR__0244
04490                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04490     13 13 02 F6 | 	mov	arg01, local01
04494     01 14 06 F6 | 	mov	arg02, #1
04498     E0 35 B2 FD | 	call	#__system__Right_S
0449c     FD 12 02 F6 | 	mov	arg01, result1
044a0     AB 01 00 FF 
044a4     4A 14 06 F6 | 	mov	arg02, ##@LR__5494
044a8     F4 14 B2 FD | 	call	#__system___string_cmp
044ac     00 FA 55 F2 | 	cmps	result1, #0 wc
044b0     24 00 90 CD |  if_b	jmp	#LR__0242
044b4     13 13 02 F6 | 	mov	arg01, local01
044b8     01 14 06 F6 | 	mov	arg02, #1
044bc     BC 35 B2 FD | 	call	#__system__Right_S
044c0     FD 12 02 F6 | 	mov	arg01, result1
044c4     AB 01 00 FF 
044c8     4C 14 06 F6 | 	mov	arg02, ##@LR__5495
044cc     D0 14 B2 FD | 	call	#__system___string_cmp
044d0     01 FA 55 F2 | 	cmps	result1, #1 wc
044d4     08 00 90 CD |  if_b	jmp	#LR__0243
044d8                 | LR__0242
044d8     00 FA 05 F6 | 	mov	result1, #0
044dc     30 00 90 FD | 	jmp	#LR__0244
044e0                 | LR__0243
044e0                 | ' return token_channel+val(right$(s,1))
044e0     13 13 02 F6 | 	mov	arg01, local01
044e4     01 14 06 F6 | 	mov	arg02, #1
044e8     90 35 B2 FD | 	call	#__system__Right_S
044ec     FD 12 02 F6 | 	mov	arg01, result1
044f0     08 4B B2 FD | 	call	#__system____builtin_atof
044f4     FD 14 02 F6 | 	mov	arg02, result1
044f8     00 18 21 FF 
044fc     00 12 06 F6 | 	mov	arg01, ##1110441984
04500     1C 3F B2 FD | 	call	#__system___float_add
04504     FD 12 02 F6 | 	mov	arg01, result1
04508     00 14 06 F6 | 	mov	arg02, #0
0450c     A8 47 B2 FD | 	call	#__system___float_tointeger
04510                 | LR__0244
04510     A7 F0 03 F6 | 	mov	ptra, fp
04514     B2 00 A0 FD | 	call	#popregs_
04518                 | _ischannel_ret
04518     2D 00 64 FD | 	ret
0451c                 | 
0451c                 | ' 
0451c                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
0451c                 | ' ' todo: add spin2/pasm constants for pin control
0451c                 | ' 
0451c                 | ' function isconstant(s as string) as integer
0451c                 | _isconstant
0451c     01 4A 05 F6 | 	mov	COUNT_, #1
04520     A8 00 A0 FD | 	call	#pushregs_
04524                 | ' 
04524                 | ' select case s
04524     09 27 02 F6 | 	mov	local01, arg01
04528     AB 01 00 FF 
0452c     4E 14 06 F6 | 	mov	arg02, ##@LR__5496
04530     13 13 02 F6 | 	mov	arg01, local01
04534     68 14 B2 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     34 00 90 AD |  if_e	jmp	#LR__0250
04540     AB 01 00 FF 
04544     54 14 06 F6 | 	mov	arg02, ##@LR__5497
04548     13 13 02 F6 | 	mov	arg01, local01
0454c     50 14 B2 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     24 00 90 AD |  if_e	jmp	#LR__0251
04558     AB 01 00 FF 
0455c     5B 14 06 F6 | 	mov	arg02, ##@LR__5498
04560     13 13 02 F6 | 	mov	arg01, local01
04564     38 14 B2 FD | 	call	#__system___string_cmp
04568     00 FA 0D F2 | 	cmp	result1, #0 wz
0456c     14 00 90 AD |  if_e	jmp	#LR__0252
04570     18 00 90 FD | 	jmp	#LR__0253
04574                 | LR__0250
04574     01 FA 05 F6 | 	mov	result1, #1
04578     14 00 90 FD | 	jmp	#LR__0254
0457c                 | LR__0251
0457c     02 FA 05 F6 | 	mov	result1, #2
04580     0C 00 90 FD | 	jmp	#LR__0254
04584                 | LR__0252
04584     04 FA 05 F6 | 	mov	result1, #4
04588     04 00 90 FD | 	jmp	#LR__0254
0458c                 | LR__0253
0458c     00 FA 05 F6 | 	mov	result1, #0
04590                 | LR__0254
04590     A7 F0 03 F6 | 	mov	ptra, fp
04594     B2 00 A0 FD | 	call	#popregs_
04598                 | _isconstant_ret
04598     2D 00 64 FD | 	ret
0459c                 | 
0459c                 | ' 
0459c                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
0459c                 | ' 
0459c                 | ' function isnotename(s as string) as ulong
0459c                 | _isnotename
0459c     07 4A 05 F6 | 	mov	COUNT_, #7
045a0     A8 00 A0 FD | 	call	#pushregs_
045a4                 | ' if left$(s,1)<>"#" then return 0
045a4     09 27 02 F6 | 	mov	local01, arg01
045a8     01 14 06 F6 | 	mov	arg02, #1
045ac     44 34 B2 FD | 	call	#__system__Left_S
045b0     FD 12 02 F6 | 	mov	arg01, result1
045b4     AB 01 00 FF 
045b8     63 14 06 F6 | 	mov	arg02, ##@LR__5499
045bc     E0 13 B2 FD | 	call	#__system___string_cmp
045c0     00 FA 0D F2 | 	cmp	result1, #0 wz
045c4     00 FA 05 56 |  if_ne	mov	result1, #0
045c8     30 03 90 5D |  if_ne	jmp	#LR__0283
045cc                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
045cc     13 13 02 F6 | 	mov	arg01, local01
045d0     03 14 06 F6 | 	mov	arg02, #3
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     30 35 B2 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     AB 01 00 FF 
045e4     65 14 06 F6 | 	mov	arg02, ##@LR__5500
045e8     B4 13 B2 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     18 00 90 5D |  if_ne	jmp	#LR__0260
045f4     13 13 02 F6 | 	mov	arg01, local01
045f8     02 14 06 F6 | 	mov	arg02, #2
045fc     02 16 06 F6 | 	mov	arg03, #2
04600     08 35 B2 FD | 	call	#__system__Mid_S
04604     FD 28 02 F6 | 	mov	local02, result1
04608     14 00 90 FD | 	jmp	#LR__0261
0460c                 | LR__0260
0460c     13 13 02 F6 | 	mov	arg01, local01
04610     02 14 06 F6 | 	mov	arg02, #2
04614     01 16 06 F6 | 	mov	arg03, #1
04618     F0 34 B2 FD | 	call	#__system__Mid_S
0461c     FD 28 02 F6 | 	mov	local02, result1
04620                 | LR__0261
04620                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04620     13 13 02 F6 | 	mov	arg01, local01
04624     09 2B 02 F6 | 	mov	local03, arg01
04628     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
0462c                 | LR__0262
0462c     15 FB C9 FA | 	rdbyte	result1, local03 wz
04630     01 2A 06 51 |  if_ne	add	local03, #1
04634     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
04638                 | LR__0263
04638     09 2B 82 F1 | 	sub	local03, arg01
0463c     15 15 02 F6 | 	mov	arg02, local03
04640     01 14 86 F1 | 	sub	arg02, #1
04644     13 13 02 F6 | 	mov	arg01, local01
04648     01 16 06 F6 | 	mov	arg03, #1
0464c     BC 34 B2 FD | 	call	#__system__Mid_S
04650     FD 12 02 F6 | 	mov	arg01, result1
04654     AB 01 00 FF 
04658     67 14 06 F6 | 	mov	arg02, ##@LR__5501
0465c     40 13 B2 FD | 	call	#__system___string_cmp
04660     00 FA 0D F2 | 	cmp	result1, #0 wz
04664     28 00 90 AD |  if_e	jmp	#LR__0264
04668     13 13 02 F6 | 	mov	arg01, local01
0466c     01 14 06 F6 | 	mov	arg02, #1
04670     08 34 B2 FD | 	call	#__system__Right_S
04674     FD 12 02 F6 | 	mov	arg01, result1
04678     80 49 B2 FD | 	call	#__system____builtin_atof
0467c     FD 12 02 F6 | 	mov	arg01, result1
04680     00 14 06 F6 | 	mov	arg02, #0
04684     30 46 B2 FD | 	call	#__system___float_tointeger
04688     FD 2C 02 F6 | 	mov	local04, result1
0468c     34 00 90 FD | 	jmp	#LR__0265
04690                 | LR__0264
04690     13 13 02 F6 | 	mov	arg01, local01
04694     01 14 06 F6 | 	mov	arg02, #1
04698     E0 33 B2 FD | 	call	#__system__Right_S
0469c     FD 12 02 F6 | 	mov	arg01, result1
046a0     58 49 B2 FD | 	call	#__system____builtin_atof
046a4     FD 14 02 F6 | 	mov	arg02, result1
046a8     00 C0 5F FF 
046ac     00 12 06 F6 | 	mov	arg01, ##-1082130432
046b0     3C 41 B2 FD | 	call	#__system___float_mul
046b4     FD 12 02 F6 | 	mov	arg01, result1
046b8     00 14 06 F6 | 	mov	arg02, #0
046bc     F8 45 B2 FD | 	call	#__system___float_tointeger
046c0     FD 2C 02 F6 | 	mov	local04, result1
046c4                 | LR__0265
046c4                 | ' 
046c4                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
046c4     00 2C 0E F2 | 	cmp	local04, #0 wz
046c8     24 00 90 5D |  if_ne	jmp	#LR__0266
046cc     13 13 02 F6 | 	mov	arg01, local01
046d0     01 14 06 F6 | 	mov	arg02, #1
046d4     A4 33 B2 FD | 	call	#__system__Right_S
046d8     FD 12 02 F6 | 	mov	arg01, result1
046dc     AB 01 00 FF 
046e0     69 14 06 F6 | 	mov	arg02, ##@LR__5502
046e4     B8 12 B2 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     04 2C 06 56 |  if_ne	mov	local04, #4
046f0                 | LR__0266
046f0                 | ' 
046f0                 | ' select case s1
046f0     14 2F 02 F6 | 	mov	local05, local02
046f4     AB 01 00 FF 
046f8     6B 14 06 F6 | 	mov	arg02, ##@LR__5503
046fc     17 13 02 F6 | 	mov	arg01, local05
04700     9C 12 B2 FD | 	call	#__system___string_cmp
04704     00 FA 0D F2 | 	cmp	result1, #0 wz
04708     24 01 90 AD |  if_e	jmp	#LR__0267
0470c     AB 01 00 FF 
04710     6D 14 06 F6 | 	mov	arg02, ##@LR__5504
04714     17 13 02 F6 | 	mov	arg01, local05
04718     84 12 B2 FD | 	call	#__system___string_cmp
0471c     00 FA 0D F2 | 	cmp	result1, #0 wz
04720     18 01 90 AD |  if_e	jmp	#LR__0268
04724     AB 01 00 FF 
04728     70 14 06 F6 | 	mov	arg02, ##@LR__5505
0472c     17 13 02 F6 | 	mov	arg01, local05
04730     6C 12 B2 FD | 	call	#__system___string_cmp
04734     00 FA 0D F2 | 	cmp	result1, #0 wz
04738     0C 01 90 AD |  if_e	jmp	#LR__0269
0473c     AB 01 00 FF 
04740     72 14 06 F6 | 	mov	arg02, ##@LR__5506
04744     17 13 02 F6 | 	mov	arg01, local05
04748     54 12 B2 FD | 	call	#__system___string_cmp
0474c     00 FA 0D F2 | 	cmp	result1, #0 wz
04750     00 01 90 AD |  if_e	jmp	#LR__0270
04754     AB 01 00 FF 
04758     75 14 06 F6 | 	mov	arg02, ##@LR__5507
0475c     17 13 02 F6 | 	mov	arg01, local05
04760     3C 12 B2 FD | 	call	#__system___string_cmp
04764     00 FA 0D F2 | 	cmp	result1, #0 wz
04768     F4 00 90 AD |  if_e	jmp	#LR__0271
0476c     AB 01 00 FF 
04770     77 14 06 F6 | 	mov	arg02, ##@LR__5508
04774     17 13 02 F6 | 	mov	arg01, local05
04778     24 12 B2 FD | 	call	#__system___string_cmp
0477c     00 FA 0D F2 | 	cmp	result1, #0 wz
04780     E8 00 90 AD |  if_e	jmp	#LR__0272
04784     AB 01 00 FF 
04788     79 14 06 F6 | 	mov	arg02, ##@LR__5509
0478c     17 13 02 F6 | 	mov	arg01, local05
04790     0C 12 B2 FD | 	call	#__system___string_cmp
04794     00 FA 0D F2 | 	cmp	result1, #0 wz
04798     DC 00 90 AD |  if_e	jmp	#LR__0273
0479c     AB 01 00 FF 
047a0     7C 14 06 F6 | 	mov	arg02, ##@LR__5510
047a4     17 13 02 F6 | 	mov	arg01, local05
047a8     F4 11 B2 FD | 	call	#__system___string_cmp
047ac     00 FA 0D F2 | 	cmp	result1, #0 wz
047b0     D0 00 90 AD |  if_e	jmp	#LR__0274
047b4     AB 01 00 FF 
047b8     7E 14 06 F6 | 	mov	arg02, ##@LR__5511
047bc     17 13 02 F6 | 	mov	arg01, local05
047c0     DC 11 B2 FD | 	call	#__system___string_cmp
047c4     00 FA 0D F2 | 	cmp	result1, #0 wz
047c8     C4 00 90 AD |  if_e	jmp	#LR__0275
047cc     AB 01 00 FF 
047d0     81 14 06 F6 | 	mov	arg02, ##@LR__5512
047d4     17 13 02 F6 | 	mov	arg01, local05
047d8     C4 11 B2 FD | 	call	#__system___string_cmp
047dc     00 FA 0D F2 | 	cmp	result1, #0 wz
047e0     B8 00 90 AD |  if_e	jmp	#LR__0276
047e4     AB 01 00 FF 
047e8     83 14 06 F6 | 	mov	arg02, ##@LR__5513
047ec     17 13 02 F6 | 	mov	arg01, local05
047f0     AC 11 B2 FD | 	call	#__system___string_cmp
047f4     00 FA 0D F2 | 	cmp	result1, #0 wz
047f8     AC 00 90 AD |  if_e	jmp	#LR__0277
047fc     AB 01 00 FF 
04800     86 14 06 F6 | 	mov	arg02, ##@LR__5514
04804     17 13 02 F6 | 	mov	arg01, local05
04808     94 11 B2 FD | 	call	#__system___string_cmp
0480c     00 FA 0D F2 | 	cmp	result1, #0 wz
04810     A0 00 90 AD |  if_e	jmp	#LR__0278
04814     AB 01 00 FF 
04818     88 14 06 F6 | 	mov	arg02, ##@LR__5515
0481c     17 13 02 F6 | 	mov	arg01, local05
04820     7C 11 B2 FD | 	call	#__system___string_cmp
04824     00 FA 0D F2 | 	cmp	result1, #0 wz
04828     94 00 90 AD |  if_e	jmp	#LR__0279
0482c     9C 00 90 FD | 	jmp	#LR__0280
04830                 | LR__0267
04830     01 00 00 FF 
04834     00 31 06 F6 | 	mov	local06, ##768
04838     98 00 90 FD | 	jmp	#LR__0281
0483c                 | LR__0268
0483c     01 00 00 FF 
04840     01 31 06 F6 | 	mov	local06, ##769
04844     8C 00 90 FD | 	jmp	#LR__0281
04848                 | LR__0269
04848     01 00 00 FF 
0484c     02 31 06 F6 | 	mov	local06, ##770
04850     80 00 90 FD | 	jmp	#LR__0281
04854                 | LR__0270
04854     01 00 00 FF 
04858     03 31 06 F6 | 	mov	local06, ##771
0485c     74 00 90 FD | 	jmp	#LR__0281
04860                 | LR__0271
04860     01 00 00 FF 
04864     04 31 06 F6 | 	mov	local06, ##772
04868     68 00 90 FD | 	jmp	#LR__0281
0486c                 | LR__0272
0486c     01 00 00 FF 
04870     05 31 06 F6 | 	mov	local06, ##773
04874     5C 00 90 FD | 	jmp	#LR__0281
04878                 | LR__0273
04878     01 00 00 FF 
0487c     06 31 06 F6 | 	mov	local06, ##774
04880     50 00 90 FD | 	jmp	#LR__0281
04884                 | LR__0274
04884     01 00 00 FF 
04888     07 31 06 F6 | 	mov	local06, ##775
0488c     44 00 90 FD | 	jmp	#LR__0281
04890                 | LR__0275
04890     01 00 00 FF 
04894     08 31 06 F6 | 	mov	local06, ##776
04898     38 00 90 FD | 	jmp	#LR__0281
0489c                 | LR__0276
0489c     01 00 00 FF 
048a0     09 31 06 F6 | 	mov	local06, ##777
048a4     2C 00 90 FD | 	jmp	#LR__0281
048a8                 | LR__0277
048a8     01 00 00 FF 
048ac     0A 31 06 F6 | 	mov	local06, ##778
048b0     20 00 90 FD | 	jmp	#LR__0281
048b4                 | LR__0278
048b4     01 00 00 FF 
048b8     0B 31 06 F6 | 	mov	local06, ##779
048bc     14 00 90 FD | 	jmp	#LR__0281
048c0                 | LR__0279
048c0     01 00 00 FF 
048c4     0B 31 06 F6 | 	mov	local06, ##779
048c8     08 00 90 FD | 	jmp	#LR__0281
048cc                 | LR__0280
048cc     00 FA 05 F6 | 	mov	result1, #0
048d0     28 00 90 FD | 	jmp	#LR__0283
048d4                 | LR__0281
048d4                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
048d4     FF FF 7F FF 
048d8     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
048dc     18 00 90 CD |  if_b	jmp	#LR__0282
048e0     0A 2C 56 F2 | 	cmps	local04, #10 wc
048e4     16 33 02 C6 |  if_b	mov	local07, local04
048e8     01 32 66 C0 |  if_b	shl	local07, #1
048ec     16 33 02 C1 |  if_b	add	local07, local04
048f0     02 32 66 C0 |  if_b	shl	local07, #2
048f4     19 31 02 C1 |  if_b	add	local06, local07
048f8                 | LR__0282
048f8                 | ' return token
048f8     18 FB 01 F6 | 	mov	result1, local06
048fc                 | LR__0283
048fc     A7 F0 03 F6 | 	mov	ptra, fp
04900     B2 00 A0 FD | 	call	#popregs_
04904                 | _isnotename_ret
04904     2D 00 64 FD | 	ret
04908                 | 
04908                 | ' 
04908                 | ' ' Check if the part is a separator, return a token or 0 if not found
04908                 | ' 
04908                 | ' function isseparator(s as string) as ubyte
04908                 | _isseparator
04908     01 4A 05 F6 | 	mov	COUNT_, #1
0490c     A8 00 A0 FD | 	call	#pushregs_
04910                 | ' 
04910                 | ' select case s
04910     09 27 02 F6 | 	mov	local01, arg01
04914     AB 01 00 FF 
04918     8A 14 06 F6 | 	mov	arg02, ##@LR__5516
0491c     13 13 02 F6 | 	mov	arg01, local01
04920     7C 10 B2 FD | 	call	#__system___string_cmp
04924     00 FA 0D F2 | 	cmp	result1, #0 wz
04928     54 01 90 AD |  if_e	jmp	#LR__0290
0492c     AB 01 00 FF 
04930     8C 14 06 F6 | 	mov	arg02, ##@LR__5517
04934     13 13 02 F6 | 	mov	arg01, local01
04938     64 10 B2 FD | 	call	#__system___string_cmp
0493c     00 FA 0D F2 | 	cmp	result1, #0 wz
04940     44 01 90 AD |  if_e	jmp	#LR__0291
04944     AB 01 00 FF 
04948     8E 14 06 F6 | 	mov	arg02, ##@LR__5518
0494c     13 13 02 F6 | 	mov	arg01, local01
04950     4C 10 B2 FD | 	call	#__system___string_cmp
04954     00 FA 0D F2 | 	cmp	result1, #0 wz
04958     34 01 90 AD |  if_e	jmp	#LR__0292
0495c     AB 01 00 FF 
04960     90 14 06 F6 | 	mov	arg02, ##@LR__5519
04964     13 13 02 F6 | 	mov	arg01, local01
04968     34 10 B2 FD | 	call	#__system___string_cmp
0496c     00 FA 0D F2 | 	cmp	result1, #0 wz
04970     24 01 90 AD |  if_e	jmp	#LR__0293
04974     AB 01 00 FF 
04978     92 14 06 F6 | 	mov	arg02, ##@LR__5520
0497c     13 13 02 F6 | 	mov	arg01, local01
04980     1C 10 B2 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     14 01 90 AD |  if_e	jmp	#LR__0294
0498c     AB 01 00 FF 
04990     94 14 06 F6 | 	mov	arg02, ##@LR__5521
04994     13 13 02 F6 | 	mov	arg01, local01
04998     04 10 B2 FD | 	call	#__system___string_cmp
0499c     00 FA 0D F2 | 	cmp	result1, #0 wz
049a0     04 01 90 AD |  if_e	jmp	#LR__0295
049a4     AB 01 00 FF 
049a8     96 14 06 F6 | 	mov	arg02, ##@LR__5522
049ac     13 13 02 F6 | 	mov	arg01, local01
049b0     EC 0F B2 FD | 	call	#__system___string_cmp
049b4     00 FA 0D F2 | 	cmp	result1, #0 wz
049b8     F4 00 90 AD |  if_e	jmp	#LR__0296
049bc     AB 01 00 FF 
049c0     98 14 06 F6 | 	mov	arg02, ##@LR__5523
049c4     13 13 02 F6 | 	mov	arg01, local01
049c8     D4 0F B2 FD | 	call	#__system___string_cmp
049cc     00 FA 0D F2 | 	cmp	result1, #0 wz
049d0     E4 00 90 AD |  if_e	jmp	#LR__0297
049d4     AB 01 00 FF 
049d8     9A 14 06 F6 | 	mov	arg02, ##@LR__5524
049dc     13 13 02 F6 | 	mov	arg01, local01
049e0     BC 0F B2 FD | 	call	#__system___string_cmp
049e4     00 FA 0D F2 | 	cmp	result1, #0 wz
049e8     D4 00 90 AD |  if_e	jmp	#LR__0298
049ec     AB 01 00 FF 
049f0     9C 14 06 F6 | 	mov	arg02, ##@LR__5525
049f4     13 13 02 F6 | 	mov	arg01, local01
049f8     A4 0F B2 FD | 	call	#__system___string_cmp
049fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04a00     C4 00 90 AD |  if_e	jmp	#LR__0299
04a04     AB 01 00 FF 
04a08     9E 14 06 F6 | 	mov	arg02, ##@LR__5526
04a0c     13 13 02 F6 | 	mov	arg01, local01
04a10     8C 0F B2 FD | 	call	#__system___string_cmp
04a14     00 FA 0D F2 | 	cmp	result1, #0 wz
04a18     B4 00 90 AD |  if_e	jmp	#LR__0300
04a1c     AB 01 00 FF 
04a20     A0 14 06 F6 | 	mov	arg02, ##@LR__5527
04a24     13 13 02 F6 | 	mov	arg01, local01
04a28     74 0F B2 FD | 	call	#__system___string_cmp
04a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a30     A4 00 90 AD |  if_e	jmp	#LR__0301
04a34     AB 01 00 FF 
04a38     A2 14 06 F6 | 	mov	arg02, ##@LR__5528
04a3c     13 13 02 F6 | 	mov	arg01, local01
04a40     5C 0F B2 FD | 	call	#__system___string_cmp
04a44     00 FA 0D F2 | 	cmp	result1, #0 wz
04a48     94 00 90 AD |  if_e	jmp	#LR__0302
04a4c     AB 01 00 FF 
04a50     A4 14 06 F6 | 	mov	arg02, ##@LR__5529
04a54     13 13 02 F6 | 	mov	arg01, local01
04a58     44 0F B2 FD | 	call	#__system___string_cmp
04a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a60     84 00 90 AD |  if_e	jmp	#LR__0303
04a64     AB 01 00 FF 
04a68     A6 14 06 F6 | 	mov	arg02, ##@LR__5530
04a6c     13 13 02 F6 | 	mov	arg01, local01
04a70     2C 0F B2 FD | 	call	#__system___string_cmp
04a74     00 FA 0D F2 | 	cmp	result1, #0 wz
04a78     74 00 90 AD |  if_e	jmp	#LR__0304
04a7c     78 00 90 FD | 	jmp	#LR__0305
04a80                 | LR__0290
04a80     01 FA 05 F6 | 	mov	result1, #1
04a84     74 00 90 FD | 	jmp	#LR__0306
04a88                 | LR__0291
04a88     02 FA 05 F6 | 	mov	result1, #2
04a8c     6C 00 90 FD | 	jmp	#LR__0306
04a90                 | LR__0292
04a90     1B FA 05 F6 | 	mov	result1, #27
04a94     64 00 90 FD | 	jmp	#LR__0306
04a98                 | LR__0293
04a98     11 FA 05 F6 | 	mov	result1, #17
04a9c     5C 00 90 FD | 	jmp	#LR__0306
04aa0                 | LR__0294
04aa0     05 FA 05 F6 | 	mov	result1, #5
04aa4     54 00 90 FD | 	jmp	#LR__0306
04aa8                 | LR__0295
04aa8     06 FA 05 F6 | 	mov	result1, #6
04aac     4C 00 90 FD | 	jmp	#LR__0306
04ab0                 | LR__0296
04ab0     12 FA 05 F6 | 	mov	result1, #18
04ab4     44 00 90 FD | 	jmp	#LR__0306
04ab8                 | LR__0297
04ab8     13 FA 05 F6 | 	mov	result1, #19
04abc     3C 00 90 FD | 	jmp	#LR__0306
04ac0                 | LR__0298
04ac0     0C FA 05 F6 | 	mov	result1, #12
04ac4     34 00 90 FD | 	jmp	#LR__0306
04ac8                 | LR__0299
04ac8     14 FA 05 F6 | 	mov	result1, #20
04acc     2C 00 90 FD | 	jmp	#LR__0306
04ad0                 | LR__0300
04ad0     15 FA 05 F6 | 	mov	result1, #21
04ad4     24 00 90 FD | 	jmp	#LR__0306
04ad8                 | LR__0301
04ad8     16 FA 05 F6 | 	mov	result1, #22
04adc     1C 00 90 FD | 	jmp	#LR__0306
04ae0                 | LR__0302
04ae0     FF FB 05 F6 | 	mov	result1, #511
04ae4     14 00 90 FD | 	jmp	#LR__0306
04ae8                 | LR__0303
04ae8     0F FA 05 F6 | 	mov	result1, #15
04aec     0C 00 90 FD | 	jmp	#LR__0306
04af0                 | LR__0304
04af0     10 FA 05 F6 | 	mov	result1, #16
04af4     04 00 90 FD | 	jmp	#LR__0306
04af8                 | LR__0305
04af8     00 FA 05 F6 | 	mov	result1, #0
04afc                 | LR__0306
04afc     A7 F0 03 F6 | 	mov	ptra, fp
04b00     B2 00 A0 FD | 	call	#popregs_
04b04                 | _isseparator_ret
04b04     2D 00 64 FD | 	ret
04b08                 | 
04b08                 | ' 
04b08                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04b08                 | ' 
04b08                 | ' function iscommand(s as string) as ubyte
04b08                 | _iscommand
04b08     01 4A 05 F6 | 	mov	COUNT_, #1
04b0c     A8 00 A0 FD | 	call	#pushregs_
04b10                 | ' 
04b10                 | ' select case s
04b10     09 27 02 F6 | 	mov	local01, arg01
04b14     AB 01 00 FF 
04b18     AA 14 06 F6 | 	mov	arg02, ##@LR__5532
04b1c     13 13 02 F6 | 	mov	arg01, local01
04b20     7C 0E B2 FD | 	call	#__system___string_cmp
04b24     00 FA 0D F2 | 	cmp	result1, #0 wz
04b28     64 0C 90 AD |  if_e	jmp	#LR__0310
04b2c     AB 01 00 FF 
04b30     AF 14 06 F6 | 	mov	arg02, ##@LR__5533
04b34     13 13 02 F6 | 	mov	arg01, local01
04b38     64 0E B2 FD | 	call	#__system___string_cmp
04b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b40     54 0C 90 AD |  if_e	jmp	#LR__0311
04b44     AB 01 00 FF 
04b48     B2 14 06 F6 | 	mov	arg02, ##@LR__5534
04b4c     13 13 02 F6 | 	mov	arg01, local01
04b50     4C 0E B2 FD | 	call	#__system___string_cmp
04b54     00 FA 0D F2 | 	cmp	result1, #0 wz
04b58     44 0C 90 AD |  if_e	jmp	#LR__0312
04b5c     AB 01 00 FF 
04b60     B7 14 06 F6 | 	mov	arg02, ##@LR__5535
04b64     13 13 02 F6 | 	mov	arg01, local01
04b68     34 0E B2 FD | 	call	#__system___string_cmp
04b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b70     34 0C 90 AD |  if_e	jmp	#LR__0313
04b74     AB 01 00 FF 
04b78     BB 14 06 F6 | 	mov	arg02, ##@LR__5536
04b7c     13 13 02 F6 | 	mov	arg01, local01
04b80     1C 0E B2 FD | 	call	#__system___string_cmp
04b84     00 FA 0D F2 | 	cmp	result1, #0 wz
04b88     24 0C 90 AD |  if_e	jmp	#LR__0314
04b8c     AB 01 00 FF 
04b90     C0 14 06 F6 | 	mov	arg02, ##@LR__5537
04b94     13 13 02 F6 | 	mov	arg01, local01
04b98     04 0E B2 FD | 	call	#__system___string_cmp
04b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba0     14 0C 90 AD |  if_e	jmp	#LR__0315
04ba4     AB 01 00 FF 
04ba8     C4 14 06 F6 | 	mov	arg02, ##@LR__5538
04bac     13 13 02 F6 | 	mov	arg01, local01
04bb0     EC 0D B2 FD | 	call	#__system___string_cmp
04bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb8     04 0C 90 AD |  if_e	jmp	#LR__0316
04bbc     AB 01 00 FF 
04bc0     C7 14 06 F6 | 	mov	arg02, ##@LR__5539
04bc4     13 13 02 F6 | 	mov	arg01, local01
04bc8     D4 0D B2 FD | 	call	#__system___string_cmp
04bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd0     F4 0B 90 AD |  if_e	jmp	#LR__0317
04bd4     AB 01 00 FF 
04bd8     D2 14 06 F6 | 	mov	arg02, ##@LR__5540
04bdc     13 13 02 F6 | 	mov	arg01, local01
04be0     BC 0D B2 FD | 	call	#__system___string_cmp
04be4     00 FA 0D F2 | 	cmp	result1, #0 wz
04be8     E4 0B 90 AD |  if_e	jmp	#LR__0318
04bec     AB 01 00 FF 
04bf0     D6 14 06 F6 | 	mov	arg02, ##@LR__5541
04bf4     13 13 02 F6 | 	mov	arg01, local01
04bf8     A4 0D B2 FD | 	call	#__system___string_cmp
04bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04c00     D4 0B 90 AD |  if_e	jmp	#LR__0319
04c04     AB 01 00 FF 
04c08     E0 14 06 F6 | 	mov	arg02, ##@LR__5542
04c0c     13 13 02 F6 | 	mov	arg01, local01
04c10     8C 0D B2 FD | 	call	#__system___string_cmp
04c14     00 FA 0D F2 | 	cmp	result1, #0 wz
04c18     C4 0B 90 AD |  if_e	jmp	#LR__0320
04c1c     AB 01 00 FF 
04c20     E4 14 06 F6 | 	mov	arg02, ##@LR__5543
04c24     13 13 02 F6 | 	mov	arg01, local01
04c28     74 0D B2 FD | 	call	#__system___string_cmp
04c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c30     B4 0B 90 AD |  if_e	jmp	#LR__0321
04c34     AB 01 00 FF 
04c38     EE 14 06 F6 | 	mov	arg02, ##@LR__5544
04c3c     13 13 02 F6 | 	mov	arg01, local01
04c40     5C 0D B2 FD | 	call	#__system___string_cmp
04c44     00 FA 0D F2 | 	cmp	result1, #0 wz
04c48     A4 0B 90 AD |  if_e	jmp	#LR__0322
04c4c     AB 01 00 FF 
04c50     F2 14 06 F6 | 	mov	arg02, ##@LR__5545
04c54     13 13 02 F6 | 	mov	arg01, local01
04c58     44 0D B2 FD | 	call	#__system___string_cmp
04c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c60     94 0B 90 AD |  if_e	jmp	#LR__0323
04c64     AB 01 00 FF 
04c68     FD 14 06 F6 | 	mov	arg02, ##@LR__5546
04c6c     13 13 02 F6 | 	mov	arg01, local01
04c70     2C 0D B2 FD | 	call	#__system___string_cmp
04c74     00 FA 0D F2 | 	cmp	result1, #0 wz
04c78     84 0B 90 AD |  if_e	jmp	#LR__0324
04c7c     AB 01 00 FF 
04c80     01 15 06 F6 | 	mov	arg02, ##@LR__5547
04c84     13 13 02 F6 | 	mov	arg01, local01
04c88     14 0D B2 FD | 	call	#__system___string_cmp
04c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c90     74 0B 90 AD |  if_e	jmp	#LR__0325
04c94     AB 01 00 FF 
04c98     08 15 06 F6 | 	mov	arg02, ##@LR__5548
04c9c     13 13 02 F6 | 	mov	arg01, local01
04ca0     FC 0C B2 FD | 	call	#__system___string_cmp
04ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca8     64 0B 90 AD |  if_e	jmp	#LR__0326
04cac     AB 01 00 FF 
04cb0     0C 15 06 F6 | 	mov	arg02, ##@LR__5549
04cb4     13 13 02 F6 | 	mov	arg01, local01
04cb8     E4 0C B2 FD | 	call	#__system___string_cmp
04cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc0     54 0B 90 AD |  if_e	jmp	#LR__0327
04cc4     AB 01 00 FF 
04cc8     12 15 06 F6 | 	mov	arg02, ##@LR__5550
04ccc     13 13 02 F6 | 	mov	arg01, local01
04cd0     CC 0C B2 FD | 	call	#__system___string_cmp
04cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd8     44 0B 90 AD |  if_e	jmp	#LR__0328
04cdc     AB 01 00 FF 
04ce0     18 15 06 F6 | 	mov	arg02, ##@LR__5551
04ce4     13 13 02 F6 | 	mov	arg01, local01
04ce8     B4 0C B2 FD | 	call	#__system___string_cmp
04cec     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf0     34 0B 90 AD |  if_e	jmp	#LR__0329
04cf4     AB 01 00 FF 
04cf8     1C 15 06 F6 | 	mov	arg02, ##@LR__5552
04cfc     13 13 02 F6 | 	mov	arg01, local01
04d00     9C 0C B2 FD | 	call	#__system___string_cmp
04d04     00 FA 0D F2 | 	cmp	result1, #0 wz
04d08     24 0B 90 AD |  if_e	jmp	#LR__0330
04d0c     AB 01 00 FF 
04d10     22 15 06 F6 | 	mov	arg02, ##@LR__5553
04d14     13 13 02 F6 | 	mov	arg01, local01
04d18     84 0C B2 FD | 	call	#__system___string_cmp
04d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d20     14 0B 90 AD |  if_e	jmp	#LR__0331
04d24     AB 01 00 FF 
04d28     25 15 06 F6 | 	mov	arg02, ##@LR__5554
04d2c     13 13 02 F6 | 	mov	arg01, local01
04d30     6C 0C B2 FD | 	call	#__system___string_cmp
04d34     00 FA 0D F2 | 	cmp	result1, #0 wz
04d38     04 0B 90 AD |  if_e	jmp	#LR__0332
04d3c     AB 01 00 FF 
04d40     2B 15 06 F6 | 	mov	arg02, ##@LR__5555
04d44     13 13 02 F6 | 	mov	arg01, local01
04d48     54 0C B2 FD | 	call	#__system___string_cmp
04d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d50     F4 0A 90 AD |  if_e	jmp	#LR__0333
04d54     AB 01 00 FF 
04d58     2F 15 06 F6 | 	mov	arg02, ##@LR__5556
04d5c     13 13 02 F6 | 	mov	arg01, local01
04d60     3C 0C B2 FD | 	call	#__system___string_cmp
04d64     00 FA 0D F2 | 	cmp	result1, #0 wz
04d68     E4 0A 90 AD |  if_e	jmp	#LR__0334
04d6c     AB 01 00 FF 
04d70     36 15 06 F6 | 	mov	arg02, ##@LR__5557
04d74     13 13 02 F6 | 	mov	arg01, local01
04d78     24 0C B2 FD | 	call	#__system___string_cmp
04d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d80     D4 0A 90 AD |  if_e	jmp	#LR__0335
04d84     AB 01 00 FF 
04d88     3B 15 06 F6 | 	mov	arg02, ##@LR__5558
04d8c     13 13 02 F6 | 	mov	arg01, local01
04d90     0C 0C B2 FD | 	call	#__system___string_cmp
04d94     00 FA 0D F2 | 	cmp	result1, #0 wz
04d98     C4 0A 90 AD |  if_e	jmp	#LR__0336
04d9c     AB 01 00 FF 
04da0     42 15 06 F6 | 	mov	arg02, ##@LR__5559
04da4     13 13 02 F6 | 	mov	arg01, local01
04da8     F4 0B B2 FD | 	call	#__system___string_cmp
04dac     00 FA 0D F2 | 	cmp	result1, #0 wz
04db0     B4 0A 90 AD |  if_e	jmp	#LR__0337
04db4     AB 01 00 FF 
04db8     49 15 06 F6 | 	mov	arg02, ##@LR__5560
04dbc     13 13 02 F6 | 	mov	arg01, local01
04dc0     DC 0B B2 FD | 	call	#__system___string_cmp
04dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc8     A4 0A 90 AD |  if_e	jmp	#LR__0338
04dcc     AB 01 00 FF 
04dd0     53 15 06 F6 | 	mov	arg02, ##@LR__5561
04dd4     13 13 02 F6 | 	mov	arg01, local01
04dd8     C4 0B B2 FD | 	call	#__system___string_cmp
04ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
04de0     94 0A 90 AD |  if_e	jmp	#LR__0339
04de4     AB 01 00 FF 
04de8     57 15 06 F6 | 	mov	arg02, ##@LR__5562
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     AC 0B B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     84 0A 90 AD |  if_e	jmp	#LR__0340
04dfc     AB 01 00 FF 
04e00     5B 15 06 F6 | 	mov	arg02, ##@LR__5563
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     94 0B B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     74 0A 90 AD |  if_e	jmp	#LR__0341
04e14     AB 01 00 FF 
04e18     62 15 06 F6 | 	mov	arg02, ##@LR__5564
04e1c     13 13 02 F6 | 	mov	arg01, local01
04e20     7C 0B B2 FD | 	call	#__system___string_cmp
04e24     00 FA 0D F2 | 	cmp	result1, #0 wz
04e28     64 0A 90 AD |  if_e	jmp	#LR__0342
04e2c     AB 01 00 FF 
04e30     66 15 06 F6 | 	mov	arg02, ##@LR__5565
04e34     13 13 02 F6 | 	mov	arg01, local01
04e38     64 0B B2 FD | 	call	#__system___string_cmp
04e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e40     54 0A 90 AD |  if_e	jmp	#LR__0343
04e44     AB 01 00 FF 
04e48     6A 15 06 F6 | 	mov	arg02, ##@LR__5566
04e4c     13 13 02 F6 | 	mov	arg01, local01
04e50     4C 0B B2 FD | 	call	#__system___string_cmp
04e54     00 FA 0D F2 | 	cmp	result1, #0 wz
04e58     44 0A 90 AD |  if_e	jmp	#LR__0344
04e5c     AB 01 00 FF 
04e60     70 15 06 F6 | 	mov	arg02, ##@LR__5567
04e64     13 13 02 F6 | 	mov	arg01, local01
04e68     34 0B B2 FD | 	call	#__system___string_cmp
04e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e70     34 0A 90 AD |  if_e	jmp	#LR__0345
04e74     AB 01 00 FF 
04e78     75 15 06 F6 | 	mov	arg02, ##@LR__5568
04e7c     13 13 02 F6 | 	mov	arg01, local01
04e80     1C 0B B2 FD | 	call	#__system___string_cmp
04e84     00 FA 0D F2 | 	cmp	result1, #0 wz
04e88     24 0A 90 AD |  if_e	jmp	#LR__0346
04e8c     AB 01 00 FF 
04e90     7C 15 06 F6 | 	mov	arg02, ##@LR__5569
04e94     13 13 02 F6 | 	mov	arg01, local01
04e98     04 0B B2 FD | 	call	#__system___string_cmp
04e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea0     14 0A 90 AD |  if_e	jmp	#LR__0347
04ea4     AB 01 00 FF 
04ea8     80 15 06 F6 | 	mov	arg02, ##@LR__5570
04eac     13 13 02 F6 | 	mov	arg01, local01
04eb0     EC 0A B2 FD | 	call	#__system___string_cmp
04eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb8     04 0A 90 AD |  if_e	jmp	#LR__0348
04ebc     AB 01 00 FF 
04ec0     85 15 06 F6 | 	mov	arg02, ##@LR__5571
04ec4     13 13 02 F6 | 	mov	arg01, local01
04ec8     D4 0A B2 FD | 	call	#__system___string_cmp
04ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed0     F4 09 90 AD |  if_e	jmp	#LR__0349
04ed4     AB 01 00 FF 
04ed8     89 15 06 F6 | 	mov	arg02, ##@LR__5572
04edc     13 13 02 F6 | 	mov	arg01, local01
04ee0     BC 0A B2 FD | 	call	#__system___string_cmp
04ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee8     E4 09 90 AD |  if_e	jmp	#LR__0350
04eec     AB 01 00 FF 
04ef0     8F 15 06 F6 | 	mov	arg02, ##@LR__5573
04ef4     13 13 02 F6 | 	mov	arg01, local01
04ef8     A4 0A B2 FD | 	call	#__system___string_cmp
04efc     00 FA 0D F2 | 	cmp	result1, #0 wz
04f00     D4 09 90 AD |  if_e	jmp	#LR__0351
04f04     AB 01 00 FF 
04f08     92 15 06 F6 | 	mov	arg02, ##@LR__5574
04f0c     13 13 02 F6 | 	mov	arg01, local01
04f10     8C 0A B2 FD | 	call	#__system___string_cmp
04f14     00 FA 0D F2 | 	cmp	result1, #0 wz
04f18     C4 09 90 AD |  if_e	jmp	#LR__0352
04f1c     AB 01 00 FF 
04f20     9A 15 06 F6 | 	mov	arg02, ##@LR__5575
04f24     13 13 02 F6 | 	mov	arg01, local01
04f28     74 0A B2 FD | 	call	#__system___string_cmp
04f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f30     B4 09 90 AD |  if_e	jmp	#LR__0353
04f34     AB 01 00 FF 
04f38     9E 15 06 F6 | 	mov	arg02, ##@LR__5576
04f3c     13 13 02 F6 | 	mov	arg01, local01
04f40     5C 0A B2 FD | 	call	#__system___string_cmp
04f44     00 FA 0D F2 | 	cmp	result1, #0 wz
04f48     A4 09 90 AD |  if_e	jmp	#LR__0354
04f4c     AB 01 00 FF 
04f50     A3 15 06 F6 | 	mov	arg02, ##@LR__5577
04f54     13 13 02 F6 | 	mov	arg01, local01
04f58     44 0A B2 FD | 	call	#__system___string_cmp
04f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f60     94 09 90 AD |  if_e	jmp	#LR__0355
04f64     AB 01 00 FF 
04f68     A7 15 06 F6 | 	mov	arg02, ##@LR__5578
04f6c     13 13 02 F6 | 	mov	arg01, local01
04f70     2C 0A B2 FD | 	call	#__system___string_cmp
04f74     00 FA 0D F2 | 	cmp	result1, #0 wz
04f78     84 09 90 AD |  if_e	jmp	#LR__0356
04f7c     AB 01 00 FF 
04f80     AC 15 06 F6 | 	mov	arg02, ##@LR__5579
04f84     13 13 02 F6 | 	mov	arg01, local01
04f88     14 0A B2 FD | 	call	#__system___string_cmp
04f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f90     74 09 90 AD |  if_e	jmp	#LR__0357
04f94     AB 01 00 FF 
04f98     B0 15 06 F6 | 	mov	arg02, ##@LR__5580
04f9c     13 13 02 F6 | 	mov	arg01, local01
04fa0     FC 09 B2 FD | 	call	#__system___string_cmp
04fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa8     64 09 90 AD |  if_e	jmp	#LR__0358
04fac     AB 01 00 FF 
04fb0     B3 15 06 F6 | 	mov	arg02, ##@LR__5581
04fb4     13 13 02 F6 | 	mov	arg01, local01
04fb8     E4 09 B2 FD | 	call	#__system___string_cmp
04fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc0     54 09 90 AD |  if_e	jmp	#LR__0359
04fc4     AB 01 00 FF 
04fc8     B9 15 06 F6 | 	mov	arg02, ##@LR__5582
04fcc     13 13 02 F6 | 	mov	arg01, local01
04fd0     CC 09 B2 FD | 	call	#__system___string_cmp
04fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd8     44 09 90 AD |  if_e	jmp	#LR__0360
04fdc     AB 01 00 FF 
04fe0     BD 15 06 F6 | 	mov	arg02, ##@LR__5583
04fe4     13 13 02 F6 | 	mov	arg01, local01
04fe8     B4 09 B2 FD | 	call	#__system___string_cmp
04fec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff0     34 09 90 AD |  if_e	jmp	#LR__0361
04ff4     AB 01 00 FF 
04ff8     C1 15 06 F6 | 	mov	arg02, ##@LR__5584
04ffc     13 13 02 F6 | 	mov	arg01, local01
05000     9C 09 B2 FD | 	call	#__system___string_cmp
05004     00 FA 0D F2 | 	cmp	result1, #0 wz
05008     24 09 90 AD |  if_e	jmp	#LR__0362
0500c     AB 01 00 FF 
05010     C7 15 06 F6 | 	mov	arg02, ##@LR__5585
05014     13 13 02 F6 | 	mov	arg01, local01
05018     84 09 B2 FD | 	call	#__system___string_cmp
0501c     00 FA 0D F2 | 	cmp	result1, #0 wz
05020     14 09 90 AD |  if_e	jmp	#LR__0363
05024     AB 01 00 FF 
05028     CC 15 06 F6 | 	mov	arg02, ##@LR__5586
0502c     13 13 02 F6 | 	mov	arg01, local01
05030     6C 09 B2 FD | 	call	#__system___string_cmp
05034     00 FA 0D F2 | 	cmp	result1, #0 wz
05038     04 09 90 AD |  if_e	jmp	#LR__0364
0503c     AB 01 00 FF 
05040     CF 15 06 F6 | 	mov	arg02, ##@LR__5587
05044     13 13 02 F6 | 	mov	arg01, local01
05048     54 09 B2 FD | 	call	#__system___string_cmp
0504c     00 FA 0D F2 | 	cmp	result1, #0 wz
05050     F4 08 90 AD |  if_e	jmp	#LR__0365
05054     AB 01 00 FF 
05058     D2 15 06 F6 | 	mov	arg02, ##@LR__5588
0505c     13 13 02 F6 | 	mov	arg01, local01
05060     3C 09 B2 FD | 	call	#__system___string_cmp
05064     00 FA 0D F2 | 	cmp	result1, #0 wz
05068     E4 08 90 AD |  if_e	jmp	#LR__0366
0506c     AB 01 00 FF 
05070     D6 15 06 F6 | 	mov	arg02, ##@LR__5589
05074     13 13 02 F6 | 	mov	arg01, local01
05078     24 09 B2 FD | 	call	#__system___string_cmp
0507c     00 FA 0D F2 | 	cmp	result1, #0 wz
05080     D4 08 90 AD |  if_e	jmp	#LR__0367
05084     AB 01 00 FF 
05088     D9 15 06 F6 | 	mov	arg02, ##@LR__5590
0508c     13 13 02 F6 | 	mov	arg01, local01
05090     0C 09 B2 FD | 	call	#__system___string_cmp
05094     00 FA 0D F2 | 	cmp	result1, #0 wz
05098     C4 08 90 AD |  if_e	jmp	#LR__0368
0509c     AB 01 00 FF 
050a0     DF 15 06 F6 | 	mov	arg02, ##@LR__5591
050a4     13 13 02 F6 | 	mov	arg01, local01
050a8     F4 08 B2 FD | 	call	#__system___string_cmp
050ac     00 FA 0D F2 | 	cmp	result1, #0 wz
050b0     B4 08 90 AD |  if_e	jmp	#LR__0369
050b4     AB 01 00 FF 
050b8     E4 15 06 F6 | 	mov	arg02, ##@LR__5592
050bc     13 13 02 F6 | 	mov	arg01, local01
050c0     DC 08 B2 FD | 	call	#__system___string_cmp
050c4     00 FA 0D F2 | 	cmp	result1, #0 wz
050c8     A4 08 90 AD |  if_e	jmp	#LR__0370
050cc     AB 01 00 FF 
050d0     E7 15 06 F6 | 	mov	arg02, ##@LR__5593
050d4     13 13 02 F6 | 	mov	arg01, local01
050d8     C4 08 B2 FD | 	call	#__system___string_cmp
050dc     00 FA 0D F2 | 	cmp	result1, #0 wz
050e0     94 08 90 AD |  if_e	jmp	#LR__0371
050e4     AB 01 00 FF 
050e8     EC 15 06 F6 | 	mov	arg02, ##@LR__5594
050ec     13 13 02 F6 | 	mov	arg01, local01
050f0     AC 08 B2 FD | 	call	#__system___string_cmp
050f4     00 FA 0D F2 | 	cmp	result1, #0 wz
050f8     84 08 90 AD |  if_e	jmp	#LR__0372
050fc     AB 01 00 FF 
05100     F0 15 06 F6 | 	mov	arg02, ##@LR__5595
05104     13 13 02 F6 | 	mov	arg01, local01
05108     94 08 B2 FD | 	call	#__system___string_cmp
0510c     00 FA 0D F2 | 	cmp	result1, #0 wz
05110     74 08 90 AD |  if_e	jmp	#LR__0373
05114     AB 01 00 FF 
05118     F6 15 06 F6 | 	mov	arg02, ##@LR__5596
0511c     13 13 02 F6 | 	mov	arg01, local01
05120     7C 08 B2 FD | 	call	#__system___string_cmp
05124     00 FA 0D F2 | 	cmp	result1, #0 wz
05128     64 08 90 AD |  if_e	jmp	#LR__0374
0512c     AB 01 00 FF 
05130     FC 15 06 F6 | 	mov	arg02, ##@LR__5597
05134     13 13 02 F6 | 	mov	arg01, local01
05138     64 08 B2 FD | 	call	#__system___string_cmp
0513c     00 FA 0D F2 | 	cmp	result1, #0 wz
05140     54 08 90 AD |  if_e	jmp	#LR__0375
05144     AC 01 00 FF 
05148     01 14 06 F6 | 	mov	arg02, ##@LR__5598
0514c     13 13 02 F6 | 	mov	arg01, local01
05150     4C 08 B2 FD | 	call	#__system___string_cmp
05154     00 FA 0D F2 | 	cmp	result1, #0 wz
05158     44 08 90 AD |  if_e	jmp	#LR__0376
0515c     AC 01 00 FF 
05160     04 14 06 F6 | 	mov	arg02, ##@LR__5599
05164     13 13 02 F6 | 	mov	arg01, local01
05168     34 08 B2 FD | 	call	#__system___string_cmp
0516c     00 FA 0D F2 | 	cmp	result1, #0 wz
05170     34 08 90 AD |  if_e	jmp	#LR__0377
05174     AC 01 00 FF 
05178     0A 14 06 F6 | 	mov	arg02, ##@LR__5600
0517c     13 13 02 F6 | 	mov	arg01, local01
05180     1C 08 B2 FD | 	call	#__system___string_cmp
05184     00 FA 0D F2 | 	cmp	result1, #0 wz
05188     24 08 90 AD |  if_e	jmp	#LR__0378
0518c     AC 01 00 FF 
05190     0E 14 06 F6 | 	mov	arg02, ##@LR__5601
05194     13 13 02 F6 | 	mov	arg01, local01
05198     04 08 B2 FD | 	call	#__system___string_cmp
0519c     00 FA 0D F2 | 	cmp	result1, #0 wz
051a0     14 08 90 AD |  if_e	jmp	#LR__0379
051a4     AC 01 00 FF 
051a8     13 14 06 F6 | 	mov	arg02, ##@LR__5602
051ac     13 13 02 F6 | 	mov	arg01, local01
051b0     EC 07 B2 FD | 	call	#__system___string_cmp
051b4     00 FA 0D F2 | 	cmp	result1, #0 wz
051b8     04 08 90 AD |  if_e	jmp	#LR__0380
051bc     AC 01 00 FF 
051c0     16 14 06 F6 | 	mov	arg02, ##@LR__5603
051c4     13 13 02 F6 | 	mov	arg01, local01
051c8     D4 07 B2 FD | 	call	#__system___string_cmp
051cc     00 FA 0D F2 | 	cmp	result1, #0 wz
051d0     F4 07 90 AD |  if_e	jmp	#LR__0381
051d4     AC 01 00 FF 
051d8     19 14 06 F6 | 	mov	arg02, ##@LR__5604
051dc     13 13 02 F6 | 	mov	arg01, local01
051e0     BC 07 B2 FD | 	call	#__system___string_cmp
051e4     00 FA 0D F2 | 	cmp	result1, #0 wz
051e8     E4 07 90 AD |  if_e	jmp	#LR__0382
051ec     AC 01 00 FF 
051f0     1E 14 06 F6 | 	mov	arg02, ##@LR__5605
051f4     13 13 02 F6 | 	mov	arg01, local01
051f8     A4 07 B2 FD | 	call	#__system___string_cmp
051fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05200     D4 07 90 AD |  if_e	jmp	#LR__0383
05204     AC 01 00 FF 
05208     24 14 06 F6 | 	mov	arg02, ##@LR__5606
0520c     13 13 02 F6 | 	mov	arg01, local01
05210     8C 07 B2 FD | 	call	#__system___string_cmp
05214     00 FA 0D F2 | 	cmp	result1, #0 wz
05218     C4 07 90 AD |  if_e	jmp	#LR__0384
0521c     AC 01 00 FF 
05220     28 14 06 F6 | 	mov	arg02, ##@LR__5607
05224     13 13 02 F6 | 	mov	arg01, local01
05228     74 07 B2 FD | 	call	#__system___string_cmp
0522c     00 FA 0D F2 | 	cmp	result1, #0 wz
05230     B4 07 90 AD |  if_e	jmp	#LR__0385
05234     AC 01 00 FF 
05238     31 14 06 F6 | 	mov	arg02, ##@LR__5608
0523c     13 13 02 F6 | 	mov	arg01, local01
05240     5C 07 B2 FD | 	call	#__system___string_cmp
05244     00 FA 0D F2 | 	cmp	result1, #0 wz
05248     A4 07 90 AD |  if_e	jmp	#LR__0386
0524c     AC 01 00 FF 
05250     37 14 06 F6 | 	mov	arg02, ##@LR__5609
05254     13 13 02 F6 | 	mov	arg01, local01
05258     44 07 B2 FD | 	call	#__system___string_cmp
0525c     00 FA 0D F2 | 	cmp	result1, #0 wz
05260     94 07 90 AD |  if_e	jmp	#LR__0387
05264     AC 01 00 FF 
05268     3D 14 06 F6 | 	mov	arg02, ##@LR__5610
0526c     13 13 02 F6 | 	mov	arg01, local01
05270     2C 07 B2 FD | 	call	#__system___string_cmp
05274     00 FA 0D F2 | 	cmp	result1, #0 wz
05278     84 07 90 AD |  if_e	jmp	#LR__0388
0527c     AC 01 00 FF 
05280     46 14 06 F6 | 	mov	arg02, ##@LR__5611
05284     13 13 02 F6 | 	mov	arg01, local01
05288     14 07 B2 FD | 	call	#__system___string_cmp
0528c     00 FA 0D F2 | 	cmp	result1, #0 wz
05290     74 07 90 AD |  if_e	jmp	#LR__0389
05294     AC 01 00 FF 
05298     50 14 06 F6 | 	mov	arg02, ##@LR__5612
0529c     13 13 02 F6 | 	mov	arg01, local01
052a0     FC 06 B2 FD | 	call	#__system___string_cmp
052a4     00 FA 0D F2 | 	cmp	result1, #0 wz
052a8     64 07 90 AD |  if_e	jmp	#LR__0390
052ac     AC 01 00 FF 
052b0     59 14 06 F6 | 	mov	arg02, ##@LR__5613
052b4     13 13 02 F6 | 	mov	arg01, local01
052b8     E4 06 B2 FD | 	call	#__system___string_cmp
052bc     00 FA 0D F2 | 	cmp	result1, #0 wz
052c0     54 07 90 AD |  if_e	jmp	#LR__0391
052c4     AC 01 00 FF 
052c8     5E 14 06 F6 | 	mov	arg02, ##@LR__5614
052cc     13 13 02 F6 | 	mov	arg01, local01
052d0     CC 06 B2 FD | 	call	#__system___string_cmp
052d4     00 FA 0D F2 | 	cmp	result1, #0 wz
052d8     44 07 90 AD |  if_e	jmp	#LR__0392
052dc     AC 01 00 FF 
052e0     61 14 06 F6 | 	mov	arg02, ##@LR__5615
052e4     13 13 02 F6 | 	mov	arg01, local01
052e8     B4 06 B2 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     34 07 90 AD |  if_e	jmp	#LR__0393
052f4     AC 01 00 FF 
052f8     66 14 06 F6 | 	mov	arg02, ##@LR__5616
052fc     13 13 02 F6 | 	mov	arg01, local01
05300     9C 06 B2 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     24 07 90 AD |  if_e	jmp	#LR__0394
0530c     AC 01 00 FF 
05310     6A 14 06 F6 | 	mov	arg02, ##@LR__5617
05314     13 13 02 F6 | 	mov	arg01, local01
05318     84 06 B2 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     14 07 90 AD |  if_e	jmp	#LR__0395
05324     AC 01 00 FF 
05328     6F 14 06 F6 | 	mov	arg02, ##@LR__5618
0532c     13 13 02 F6 | 	mov	arg01, local01
05330     6C 06 B2 FD | 	call	#__system___string_cmp
05334     00 FA 0D F2 | 	cmp	result1, #0 wz
05338     04 07 90 AD |  if_e	jmp	#LR__0396
0533c     AC 01 00 FF 
05340     73 14 06 F6 | 	mov	arg02, ##@LR__5619
05344     13 13 02 F6 | 	mov	arg01, local01
05348     54 06 B2 FD | 	call	#__system___string_cmp
0534c     00 FA 0D F2 | 	cmp	result1, #0 wz
05350     F4 06 90 AD |  if_e	jmp	#LR__0397
05354     AC 01 00 FF 
05358     7C 14 06 F6 | 	mov	arg02, ##@LR__5620
0535c     13 13 02 F6 | 	mov	arg01, local01
05360     3C 06 B2 FD | 	call	#__system___string_cmp
05364     00 FA 0D F2 | 	cmp	result1, #0 wz
05368     E4 06 90 AD |  if_e	jmp	#LR__0398
0536c     AC 01 00 FF 
05370     81 14 06 F6 | 	mov	arg02, ##@LR__5621
05374     13 13 02 F6 | 	mov	arg01, local01
05378     24 06 B2 FD | 	call	#__system___string_cmp
0537c     00 FA 0D F2 | 	cmp	result1, #0 wz
05380     D4 06 90 AD |  if_e	jmp	#LR__0399
05384     AC 01 00 FF 
05388     87 14 06 F6 | 	mov	arg02, ##@LR__5622
0538c     13 13 02 F6 | 	mov	arg01, local01
05390     0C 06 B2 FD | 	call	#__system___string_cmp
05394     00 FA 0D F2 | 	cmp	result1, #0 wz
05398     C4 06 90 AD |  if_e	jmp	#LR__0400
0539c     AC 01 00 FF 
053a0     89 14 06 F6 | 	mov	arg02, ##@LR__5623
053a4     13 13 02 F6 | 	mov	arg01, local01
053a8     F4 05 B2 FD | 	call	#__system___string_cmp
053ac     00 FA 0D F2 | 	cmp	result1, #0 wz
053b0     B4 06 90 AD |  if_e	jmp	#LR__0401
053b4     AC 01 00 FF 
053b8     8D 14 06 F6 | 	mov	arg02, ##@LR__5624
053bc     13 13 02 F6 | 	mov	arg01, local01
053c0     DC 05 B2 FD | 	call	#__system___string_cmp
053c4     00 FA 0D F2 | 	cmp	result1, #0 wz
053c8     A4 06 90 AD |  if_e	jmp	#LR__0402
053cc     AC 01 00 FF 
053d0     91 14 06 F6 | 	mov	arg02, ##@LR__5625
053d4     13 13 02 F6 | 	mov	arg01, local01
053d8     C4 05 B2 FD | 	call	#__system___string_cmp
053dc     00 FA 0D F2 | 	cmp	result1, #0 wz
053e0     94 06 90 AD |  if_e	jmp	#LR__0403
053e4     AC 01 00 FF 
053e8     96 14 06 F6 | 	mov	arg02, ##@LR__5626
053ec     13 13 02 F6 | 	mov	arg01, local01
053f0     AC 05 B2 FD | 	call	#__system___string_cmp
053f4     00 FA 0D F2 | 	cmp	result1, #0 wz
053f8     84 06 90 AD |  if_e	jmp	#LR__0404
053fc     AC 01 00 FF 
05400     9E 14 06 F6 | 	mov	arg02, ##@LR__5627
05404     13 13 02 F6 | 	mov	arg01, local01
05408     94 05 B2 FD | 	call	#__system___string_cmp
0540c     00 FA 0D F2 | 	cmp	result1, #0 wz
05410     74 06 90 AD |  if_e	jmp	#LR__0405
05414     AC 01 00 FF 
05418     A2 14 06 F6 | 	mov	arg02, ##@LR__5628
0541c     13 13 02 F6 | 	mov	arg01, local01
05420     7C 05 B2 FD | 	call	#__system___string_cmp
05424     00 FA 0D F2 | 	cmp	result1, #0 wz
05428     64 06 90 AD |  if_e	jmp	#LR__0406
0542c     AC 01 00 FF 
05430     A4 14 06 F6 | 	mov	arg02, ##@LR__5629
05434     13 13 02 F6 | 	mov	arg01, local01
05438     64 05 B2 FD | 	call	#__system___string_cmp
0543c     00 FA 0D F2 | 	cmp	result1, #0 wz
05440     54 06 90 AD |  if_e	jmp	#LR__0407
05444     AC 01 00 FF 
05448     AC 14 06 F6 | 	mov	arg02, ##@LR__5630
0544c     13 13 02 F6 | 	mov	arg01, local01
05450     4C 05 B2 FD | 	call	#__system___string_cmp
05454     00 FA 0D F2 | 	cmp	result1, #0 wz
05458     44 06 90 AD |  if_e	jmp	#LR__0408
0545c     AC 01 00 FF 
05460     B3 14 06 F6 | 	mov	arg02, ##@LR__5631
05464     13 13 02 F6 | 	mov	arg01, local01
05468     34 05 B2 FD | 	call	#__system___string_cmp
0546c     00 FA 0D F2 | 	cmp	result1, #0 wz
05470     34 06 90 AD |  if_e	jmp	#LR__0409
05474     AC 01 00 FF 
05478     B7 14 06 F6 | 	mov	arg02, ##@LR__5632
0547c     13 13 02 F6 | 	mov	arg01, local01
05480     1C 05 B2 FD | 	call	#__system___string_cmp
05484     00 FA 0D F2 | 	cmp	result1, #0 wz
05488     24 06 90 AD |  if_e	jmp	#LR__0410
0548c     AC 01 00 FF 
05490     BC 14 06 F6 | 	mov	arg02, ##@LR__5633
05494     13 13 02 F6 | 	mov	arg01, local01
05498     04 05 B2 FD | 	call	#__system___string_cmp
0549c     00 FA 0D F2 | 	cmp	result1, #0 wz
054a0     14 06 90 AD |  if_e	jmp	#LR__0411
054a4     AC 01 00 FF 
054a8     BF 14 06 F6 | 	mov	arg02, ##@LR__5634
054ac     13 13 02 F6 | 	mov	arg01, local01
054b0     EC 04 B2 FD | 	call	#__system___string_cmp
054b4     00 FA 0D F2 | 	cmp	result1, #0 wz
054b8     04 06 90 AD |  if_e	jmp	#LR__0412
054bc     AC 01 00 FF 
054c0     C8 14 06 F6 | 	mov	arg02, ##@LR__5635
054c4     13 13 02 F6 | 	mov	arg01, local01
054c8     D4 04 B2 FD | 	call	#__system___string_cmp
054cc     00 FA 0D F2 | 	cmp	result1, #0 wz
054d0     F4 05 90 AD |  if_e	jmp	#LR__0413
054d4     AC 01 00 FF 
054d8     CC 14 06 F6 | 	mov	arg02, ##@LR__5636
054dc     13 13 02 F6 | 	mov	arg01, local01
054e0     BC 04 B2 FD | 	call	#__system___string_cmp
054e4     00 FA 0D F2 | 	cmp	result1, #0 wz
054e8     E4 05 90 AD |  if_e	jmp	#LR__0414
054ec     AC 01 00 FF 
054f0     D3 14 06 F6 | 	mov	arg02, ##@LR__5637
054f4     13 13 02 F6 | 	mov	arg01, local01
054f8     A4 04 B2 FD | 	call	#__system___string_cmp
054fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05500     D4 05 90 AD |  if_e	jmp	#LR__0415
05504     AC 01 00 FF 
05508     D7 14 06 F6 | 	mov	arg02, ##@LR__5638
0550c     13 13 02 F6 | 	mov	arg01, local01
05510     8C 04 B2 FD | 	call	#__system___string_cmp
05514     00 FA 0D F2 | 	cmp	result1, #0 wz
05518     C4 05 90 AD |  if_e	jmp	#LR__0416
0551c     AC 01 00 FF 
05520     DE 14 06 F6 | 	mov	arg02, ##@LR__5639
05524     13 13 02 F6 | 	mov	arg01, local01
05528     74 04 B2 FD | 	call	#__system___string_cmp
0552c     00 FA 0D F2 | 	cmp	result1, #0 wz
05530     B4 05 90 AD |  if_e	jmp	#LR__0417
05534     AC 01 00 FF 
05538     E2 14 06 F6 | 	mov	arg02, ##@LR__5640
0553c     13 13 02 F6 | 	mov	arg01, local01
05540     5C 04 B2 FD | 	call	#__system___string_cmp
05544     00 FA 0D F2 | 	cmp	result1, #0 wz
05548     A4 05 90 AD |  if_e	jmp	#LR__0418
0554c     AC 01 00 FF 
05550     E9 14 06 F6 | 	mov	arg02, ##@LR__5641
05554     13 13 02 F6 | 	mov	arg01, local01
05558     44 04 B2 FD | 	call	#__system___string_cmp
0555c     00 FA 0D F2 | 	cmp	result1, #0 wz
05560     94 05 90 AD |  if_e	jmp	#LR__0419
05564     AC 01 00 FF 
05568     ED 14 06 F6 | 	mov	arg02, ##@LR__5642
0556c     13 13 02 F6 | 	mov	arg01, local01
05570     2C 04 B2 FD | 	call	#__system___string_cmp
05574     00 FA 0D F2 | 	cmp	result1, #0 wz
05578     84 05 90 AD |  if_e	jmp	#LR__0420
0557c     AC 01 00 FF 
05580     F8 14 06 F6 | 	mov	arg02, ##@LR__5643
05584     13 13 02 F6 | 	mov	arg01, local01
05588     14 04 B2 FD | 	call	#__system___string_cmp
0558c     00 FA 0D F2 | 	cmp	result1, #0 wz
05590     74 05 90 AD |  if_e	jmp	#LR__0421
05594     AC 01 00 FF 
05598     FC 14 06 F6 | 	mov	arg02, ##@LR__5644
0559c     13 13 02 F6 | 	mov	arg01, local01
055a0     FC 03 B2 FD | 	call	#__system___string_cmp
055a4     00 FA 0D F2 | 	cmp	result1, #0 wz
055a8     64 05 90 AD |  if_e	jmp	#LR__0422
055ac     AC 01 00 FF 
055b0     03 15 06 F6 | 	mov	arg02, ##@LR__5645
055b4     13 13 02 F6 | 	mov	arg01, local01
055b8     E4 03 B2 FD | 	call	#__system___string_cmp
055bc     00 FA 0D F2 | 	cmp	result1, #0 wz
055c0     54 05 90 AD |  if_e	jmp	#LR__0423
055c4     AC 01 00 FF 
055c8     07 15 06 F6 | 	mov	arg02, ##@LR__5646
055cc     13 13 02 F6 | 	mov	arg01, local01
055d0     CC 03 B2 FD | 	call	#__system___string_cmp
055d4     00 FA 0D F2 | 	cmp	result1, #0 wz
055d8     44 05 90 AD |  if_e	jmp	#LR__0424
055dc     AC 01 00 FF 
055e0     0F 15 06 F6 | 	mov	arg02, ##@LR__5647
055e4     13 13 02 F6 | 	mov	arg01, local01
055e8     B4 03 B2 FD | 	call	#__system___string_cmp
055ec     00 FA 0D F2 | 	cmp	result1, #0 wz
055f0     34 05 90 AD |  if_e	jmp	#LR__0425
055f4     AC 01 00 FF 
055f8     13 15 06 F6 | 	mov	arg02, ##@LR__5648
055fc     13 13 02 F6 | 	mov	arg01, local01
05600     9C 03 B2 FD | 	call	#__system___string_cmp
05604     00 FA 0D F2 | 	cmp	result1, #0 wz
05608     24 05 90 AD |  if_e	jmp	#LR__0426
0560c     AC 01 00 FF 
05610     1A 15 06 F6 | 	mov	arg02, ##@LR__5649
05614     13 13 02 F6 | 	mov	arg01, local01
05618     84 03 B2 FD | 	call	#__system___string_cmp
0561c     00 FA 0D F2 | 	cmp	result1, #0 wz
05620     14 05 90 AD |  if_e	jmp	#LR__0427
05624     AC 01 00 FF 
05628     21 15 06 F6 | 	mov	arg02, ##@LR__5650
0562c     13 13 02 F6 | 	mov	arg01, local01
05630     6C 03 B2 FD | 	call	#__system___string_cmp
05634     00 FA 0D F2 | 	cmp	result1, #0 wz
05638     04 05 90 AD |  if_e	jmp	#LR__0428
0563c     AC 01 00 FF 
05640     25 15 06 F6 | 	mov	arg02, ##@LR__5651
05644     13 13 02 F6 | 	mov	arg01, local01
05648     54 03 B2 FD | 	call	#__system___string_cmp
0564c     00 FA 0D F2 | 	cmp	result1, #0 wz
05650     F4 04 90 AD |  if_e	jmp	#LR__0429
05654     AC 01 00 FF 
05658     2B 15 06 F6 | 	mov	arg02, ##@LR__5652
0565c     13 13 02 F6 | 	mov	arg01, local01
05660     3C 03 B2 FD | 	call	#__system___string_cmp
05664     00 FA 0D F2 | 	cmp	result1, #0 wz
05668     E4 04 90 AD |  if_e	jmp	#LR__0430
0566c     AC 01 00 FF 
05670     2F 15 06 F6 | 	mov	arg02, ##@LR__5653
05674     13 13 02 F6 | 	mov	arg01, local01
05678     24 03 B2 FD | 	call	#__system___string_cmp
0567c     00 FA 0D F2 | 	cmp	result1, #0 wz
05680     D4 04 90 AD |  if_e	jmp	#LR__0431
05684     AC 01 00 FF 
05688     36 15 06 F6 | 	mov	arg02, ##@LR__5654
0568c     13 13 02 F6 | 	mov	arg01, local01
05690     0C 03 B2 FD | 	call	#__system___string_cmp
05694     00 FA 0D F2 | 	cmp	result1, #0 wz
05698     C4 04 90 AD |  if_e	jmp	#LR__0432
0569c     AC 01 00 FF 
056a0     3B 15 06 F6 | 	mov	arg02, ##@LR__5655
056a4     13 13 02 F6 | 	mov	arg01, local01
056a8     F4 02 B2 FD | 	call	#__system___string_cmp
056ac     00 FA 0D F2 | 	cmp	result1, #0 wz
056b0     B4 04 90 AD |  if_e	jmp	#LR__0433
056b4     AC 01 00 FF 
056b8     40 15 06 F6 | 	mov	arg02, ##@LR__5656
056bc     13 13 02 F6 | 	mov	arg01, local01
056c0     DC 02 B2 FD | 	call	#__system___string_cmp
056c4     00 FA 0D F2 | 	cmp	result1, #0 wz
056c8     A4 04 90 AD |  if_e	jmp	#LR__0434
056cc     AC 01 00 FF 
056d0     47 15 06 F6 | 	mov	arg02, ##@LR__5657
056d4     13 13 02 F6 | 	mov	arg01, local01
056d8     C4 02 B2 FD | 	call	#__system___string_cmp
056dc     00 FA 0D F2 | 	cmp	result1, #0 wz
056e0     94 04 90 AD |  if_e	jmp	#LR__0435
056e4     AC 01 00 FF 
056e8     4A 15 06 F6 | 	mov	arg02, ##@LR__5658
056ec     13 13 02 F6 | 	mov	arg01, local01
056f0     AC 02 B2 FD | 	call	#__system___string_cmp
056f4     00 FA 0D F2 | 	cmp	result1, #0 wz
056f8     84 04 90 AD |  if_e	jmp	#LR__0436
056fc     AC 01 00 FF 
05700     54 15 06 F6 | 	mov	arg02, ##@LR__5659
05704     13 13 02 F6 | 	mov	arg01, local01
05708     94 02 B2 FD | 	call	#__system___string_cmp
0570c     00 FA 0D F2 | 	cmp	result1, #0 wz
05710     74 04 90 AD |  if_e	jmp	#LR__0437
05714     AC 01 00 FF 
05718     58 15 06 F6 | 	mov	arg02, ##@LR__5660
0571c     13 13 02 F6 | 	mov	arg01, local01
05720     7C 02 B2 FD | 	call	#__system___string_cmp
05724     00 FA 0D F2 | 	cmp	result1, #0 wz
05728     64 04 90 AD |  if_e	jmp	#LR__0438
0572c     AC 01 00 FF 
05730     60 15 06 F6 | 	mov	arg02, ##@LR__5661
05734     13 13 02 F6 | 	mov	arg01, local01
05738     64 02 B2 FD | 	call	#__system___string_cmp
0573c     00 FA 0D F2 | 	cmp	result1, #0 wz
05740     54 04 90 AD |  if_e	jmp	#LR__0439
05744     AC 01 00 FF 
05748     64 15 06 F6 | 	mov	arg02, ##@LR__5662
0574c     13 13 02 F6 | 	mov	arg01, local01
05750     4C 02 B2 FD | 	call	#__system___string_cmp
05754     00 FA 0D F2 | 	cmp	result1, #0 wz
05758     44 04 90 AD |  if_e	jmp	#LR__0440
0575c     AC 01 00 FF 
05760     6A 15 06 F6 | 	mov	arg02, ##@LR__5663
05764     13 13 02 F6 | 	mov	arg01, local01
05768     34 02 B2 FD | 	call	#__system___string_cmp
0576c     00 FA 0D F2 | 	cmp	result1, #0 wz
05770     34 04 90 AD |  if_e	jmp	#LR__0441
05774     AC 01 00 FF 
05778     70 15 06 F6 | 	mov	arg02, ##@LR__5664
0577c     13 13 02 F6 | 	mov	arg01, local01
05780     1C 02 B2 FD | 	call	#__system___string_cmp
05784     00 FA 0D F2 | 	cmp	result1, #0 wz
05788     24 04 90 AD |  if_e	jmp	#LR__0442
0578c     28 04 90 FD | 	jmp	#LR__0443
05790                 | LR__0310
05790     5C FA 05 F6 | 	mov	result1, #92
05794     24 04 90 FD | 	jmp	#LR__0444
05798                 | LR__0311
05798     5C FA 05 F6 | 	mov	result1, #92
0579c     1C 04 90 FD | 	jmp	#LR__0444
057a0                 | LR__0312
057a0     B9 FA 05 F6 | 	mov	result1, #185
057a4     14 04 90 FD | 	jmp	#LR__0444
057a8                 | LR__0313
057a8     47 FA 05 F6 | 	mov	result1, #71
057ac     0C 04 90 FD | 	jmp	#LR__0444
057b0                 | LR__0314
057b0     59 FA 05 F6 | 	mov	result1, #89
057b4     04 04 90 FD | 	jmp	#LR__0444
057b8                 | LR__0315
057b8     59 FA 05 F6 | 	mov	result1, #89
057bc     FC 03 90 FD | 	jmp	#LR__0444
057c0                 | LR__0316
057c0     C3 FA 05 F6 | 	mov	result1, #195
057c4     F4 03 90 FD | 	jmp	#LR__0444
057c8                 | LR__0317
057c8     AE FA 05 F6 | 	mov	result1, #174
057cc     EC 03 90 FD | 	jmp	#LR__0444
057d0                 | LR__0318
057d0     AE FA 05 F6 | 	mov	result1, #174
057d4     E4 03 90 FD | 	jmp	#LR__0444
057d8                 | LR__0319
057d8     B1 FA 05 F6 | 	mov	result1, #177
057dc     DC 03 90 FD | 	jmp	#LR__0444
057e0                 | LR__0320
057e0     B1 FA 05 F6 | 	mov	result1, #177
057e4     D4 03 90 FD | 	jmp	#LR__0444
057e8                 | LR__0321
057e8     AF FA 05 F6 | 	mov	result1, #175
057ec     CC 03 90 FD | 	jmp	#LR__0444
057f0                 | LR__0322
057f0     AF FA 05 F6 | 	mov	result1, #175
057f4     C4 03 90 FD | 	jmp	#LR__0444
057f8                 | LR__0323
057f8     B0 FA 05 F6 | 	mov	result1, #176
057fc     BC 03 90 FD | 	jmp	#LR__0444
05800                 | LR__0324
05800     B0 FA 05 F6 | 	mov	result1, #176
05804     B4 03 90 FD | 	jmp	#LR__0444
05808                 | LR__0325
05808     45 FA 05 F6 | 	mov	result1, #69
0580c     AC 03 90 FD | 	jmp	#LR__0444
05810                 | LR__0326
05810     45 FA 05 F6 | 	mov	result1, #69
05814     A4 03 90 FD | 	jmp	#LR__0444
05818                 | LR__0327
05818     69 FA 05 F6 | 	mov	result1, #105
0581c     9C 03 90 FD | 	jmp	#LR__0444
05820                 | LR__0328
05820     B4 FA 05 F6 | 	mov	result1, #180
05824     94 03 90 FD | 	jmp	#LR__0444
05828                 | LR__0329
05828     40 FA 05 F6 | 	mov	result1, #64
0582c     8C 03 90 FD | 	jmp	#LR__0444
05830                 | LR__0330
05830     49 FA 05 F6 | 	mov	result1, #73
05834     84 03 90 FD | 	jmp	#LR__0444
05838                 | LR__0331
05838     49 FA 05 F6 | 	mov	result1, #73
0583c     7C 03 90 FD | 	jmp	#LR__0444
05840                 | LR__0332
05840     50 FA 05 F6 | 	mov	result1, #80
05844     74 03 90 FD | 	jmp	#LR__0444
05848                 | LR__0333
05848     50 FA 05 F6 | 	mov	result1, #80
0584c     6C 03 90 FD | 	jmp	#LR__0444
05850                 | LR__0334
05850     68 FA 05 F6 | 	mov	result1, #104
05854     64 03 90 FD | 	jmp	#LR__0444
05858                 | LR__0335
05858     B7 FA 05 F6 | 	mov	result1, #183
0585c     5C 03 90 FD | 	jmp	#LR__0444
05860                 | LR__0336
05860     73 FA 05 F6 | 	mov	result1, #115
05864     54 03 90 FD | 	jmp	#LR__0444
05868                 | LR__0337
05868     74 FA 05 F6 | 	mov	result1, #116
0586c     4C 03 90 FD | 	jmp	#LR__0444
05870                 | LR__0338
05870     6C FA 05 F6 | 	mov	result1, #108
05874     44 03 90 FD | 	jmp	#LR__0444
05878                 | LR__0339
05878     6C FA 05 F6 | 	mov	result1, #108
0587c     3C 03 90 FD | 	jmp	#LR__0444
05880                 | LR__0340
05880     89 FA 05 F6 | 	mov	result1, #137
05884     34 03 90 FD | 	jmp	#LR__0444
05888                 | LR__0341
05888     C2 FA 05 F6 | 	mov	result1, #194
0588c     2C 03 90 FD | 	jmp	#LR__0444
05890                 | LR__0342
05890     72 FA 05 F6 | 	mov	result1, #114
05894     24 03 90 FD | 	jmp	#LR__0444
05898                 | LR__0343
05898     5D FA 05 F6 | 	mov	result1, #93
0589c     1C 03 90 FD | 	jmp	#LR__0444
058a0                 | LR__0344
058a0     96 FA 05 F6 | 	mov	result1, #150
058a4     14 03 90 FD | 	jmp	#LR__0444
058a8                 | LR__0345
058a8     43 FA 05 F6 | 	mov	result1, #67
058ac     0C 03 90 FD | 	jmp	#LR__0444
058b0                 | LR__0346
058b0     43 FA 05 F6 | 	mov	result1, #67
058b4     04 03 90 FD | 	jmp	#LR__0444
058b8                 | LR__0347
058b8     43 FA 05 F6 | 	mov	result1, #67
058bc     FC 02 90 FD | 	jmp	#LR__0444
058c0                 | LR__0348
058c0     5A FA 05 F6 | 	mov	result1, #90
058c4     F4 02 90 FD | 	jmp	#LR__0444
058c8                 | LR__0349
058c8     AB FA 05 F6 | 	mov	result1, #171
058cc     EC 02 90 FD | 	jmp	#LR__0444
058d0                 | LR__0350
058d0     BD FA 05 F6 | 	mov	result1, #189
058d4     E4 02 90 FD | 	jmp	#LR__0444
058d8                 | LR__0351
058d8     BD FA 05 F6 | 	mov	result1, #189
058dc     DC 02 90 FD | 	jmp	#LR__0444
058e0                 | LR__0352
058e0     46 FA 05 F6 | 	mov	result1, #70
058e4     D4 02 90 FD | 	jmp	#LR__0444
058e8                 | LR__0353
058e8     46 FA 05 F6 | 	mov	result1, #70
058ec     CC 02 90 FD | 	jmp	#LR__0444
058f0                 | LR__0354
058f0     71 FA 05 F6 | 	mov	result1, #113
058f4     C4 02 90 FD | 	jmp	#LR__0444
058f8                 | LR__0355
058f8     71 FA 05 F6 | 	mov	result1, #113
058fc     BC 02 90 FD | 	jmp	#LR__0444
05900                 | LR__0356
05900     60 FA 05 F6 | 	mov	result1, #96
05904     B4 02 90 FD | 	jmp	#LR__0444
05908                 | LR__0357
05908     4A FA 05 F6 | 	mov	result1, #74
0590c     AC 02 90 FD | 	jmp	#LR__0444
05910                 | LR__0358
05910     4A FA 05 F6 | 	mov	result1, #74
05914     A4 02 90 FD | 	jmp	#LR__0444
05918                 | LR__0359
05918     48 FA 05 F6 | 	mov	result1, #72
0591c     9C 02 90 FD | 	jmp	#LR__0444
05920                 | LR__0360
05920     48 FA 05 F6 | 	mov	result1, #72
05924     94 02 90 FD | 	jmp	#LR__0444
05928                 | LR__0361
05928     BB FA 05 F6 | 	mov	result1, #187
0592c     8C 02 90 FD | 	jmp	#LR__0444
05930                 | LR__0362
05930     A9 FA 05 F6 | 	mov	result1, #169
05934     84 02 90 FD | 	jmp	#LR__0444
05938                 | LR__0363
05938     4E FA 05 F6 | 	mov	result1, #78
0593c     7C 02 90 FD | 	jmp	#LR__0444
05940                 | LR__0364
05940     4E FA 05 F6 | 	mov	result1, #78
05944     74 02 90 FD | 	jmp	#LR__0444
05948                 | LR__0365
05948     58 FA 05 F6 | 	mov	result1, #88
0594c     6C 02 90 FD | 	jmp	#LR__0444
05950                 | LR__0366
05950     5F FA 05 F6 | 	mov	result1, #95
05954     64 02 90 FD | 	jmp	#LR__0444
05958                 | LR__0367
05958     5F FA 05 F6 | 	mov	result1, #95
0595c     5C 02 90 FD | 	jmp	#LR__0444
05960                 | LR__0368
05960     B5 FA 05 F6 | 	mov	result1, #181
05964     54 02 90 FD | 	jmp	#LR__0444
05968                 | LR__0369
05968     4C FA 05 F6 | 	mov	result1, #76
0596c     4C 02 90 FD | 	jmp	#LR__0444
05970                 | LR__0370
05970     4C FA 05 F6 | 	mov	result1, #76
05974     44 02 90 FD | 	jmp	#LR__0444
05978                 | LR__0371
05978     52 FA 05 F6 | 	mov	result1, #82
0597c     3C 02 90 FD | 	jmp	#LR__0444
05980                 | LR__0372
05980     52 FA 05 F6 | 	mov	result1, #82
05984     34 02 90 FD | 	jmp	#LR__0444
05988                 | LR__0373
05988     97 FA 05 F6 | 	mov	result1, #151
0598c     2C 02 90 FD | 	jmp	#LR__0444
05990                 | LR__0374
05990     C6 FA 05 F6 | 	mov	result1, #198
05994     24 02 90 FD | 	jmp	#LR__0444
05998                 | LR__0375
05998     61 FA 05 F6 | 	mov	result1, #97
0599c     1C 02 90 FD | 	jmp	#LR__0444
059a0                 | LR__0376
059a0     61 FA 05 F6 | 	mov	result1, #97
059a4     14 02 90 FD | 	jmp	#LR__0444
059a8                 | LR__0377
059a8     63 FA 05 F6 | 	mov	result1, #99
059ac     0C 02 90 FD | 	jmp	#LR__0444
059b0                 | LR__0378
059b0     41 FA 05 F6 | 	mov	result1, #65
059b4     04 02 90 FD | 	jmp	#LR__0444
059b8                 | LR__0379
059b8     4B FA 05 F6 | 	mov	result1, #75
059bc     FC 01 90 FD | 	jmp	#LR__0444
059c0                 | LR__0380
059c0     4B FA 05 F6 | 	mov	result1, #75
059c4     F4 01 90 FD | 	jmp	#LR__0444
059c8                 | LR__0381
059c8     C1 FA 05 F6 | 	mov	result1, #193
059cc     EC 01 90 FD | 	jmp	#LR__0444
059d0                 | LR__0382
059d0     B3 FA 05 F6 | 	mov	result1, #179
059d4     E4 01 90 FD | 	jmp	#LR__0444
059d8                 | LR__0383
059d8     5E FA 05 F6 | 	mov	result1, #94
059dc     DC 01 90 FD | 	jmp	#LR__0444
059e0                 | LR__0384
059e0     5E FA 05 F6 | 	mov	result1, #94
059e4     D4 01 90 FD | 	jmp	#LR__0444
059e8                 | LR__0385
059e8     7C FA 05 F6 | 	mov	result1, #124
059ec     CC 01 90 FD | 	jmp	#LR__0444
059f0                 | LR__0386
059f0     7E FA 05 F6 | 	mov	result1, #126
059f4     C4 01 90 FD | 	jmp	#LR__0444
059f8                 | LR__0387
059f8     7D FA 05 F6 | 	mov	result1, #125
059fc     BC 01 90 FD | 	jmp	#LR__0444
05a00                 | LR__0388
05a00     7F FA 05 F6 | 	mov	result1, #127
05a04     B4 01 90 FD | 	jmp	#LR__0444
05a08                 | LR__0389
05a08     80 FA 05 F6 | 	mov	result1, #128
05a0c     AC 01 90 FD | 	jmp	#LR__0444
05a10                 | LR__0390
05a10     55 FA 05 F6 | 	mov	result1, #85
05a14     A4 01 90 FD | 	jmp	#LR__0444
05a18                 | LR__0391
05a18     75 FA 05 F6 | 	mov	result1, #117
05a1c     9C 01 90 FD | 	jmp	#LR__0444
05a20                 | LR__0392
05a20     75 FA 05 F6 | 	mov	result1, #117
05a24     94 01 90 FD | 	jmp	#LR__0444
05a28                 | LR__0393
05a28     42 FA 05 F6 | 	mov	result1, #66
05a2c     8C 01 90 FD | 	jmp	#LR__0444
05a30                 | LR__0394
05a30     42 FA 05 F6 | 	mov	result1, #66
05a34     84 01 90 FD | 	jmp	#LR__0444
05a38                 | LR__0395
05a38     95 FA 05 F6 | 	mov	result1, #149
05a3c     7C 01 90 FD | 	jmp	#LR__0444
05a40                 | LR__0396
05a40     AC FA 05 F6 | 	mov	result1, #172
05a44     74 01 90 FD | 	jmp	#LR__0444
05a48                 | LR__0397
05a48     81 FA 05 F6 | 	mov	result1, #129
05a4c     6C 01 90 FD | 	jmp	#LR__0444
05a50                 | LR__0398
05a50     81 FA 05 F6 | 	mov	result1, #129
05a54     64 01 90 FD | 	jmp	#LR__0444
05a58                 | LR__0399
05a58     44 FA 05 F6 | 	mov	result1, #68
05a5c     5C 01 90 FD | 	jmp	#LR__0444
05a60                 | LR__0400
05a60     44 FA 05 F6 | 	mov	result1, #68
05a64     54 01 90 FD | 	jmp	#LR__0444
05a68                 | LR__0401
05a68     BC FA 05 F6 | 	mov	result1, #188
05a6c     4C 01 90 FD | 	jmp	#LR__0444
05a70                 | LR__0402
05a70     88 FA 05 F6 | 	mov	result1, #136
05a74     44 01 90 FD | 	jmp	#LR__0444
05a78                 | LR__0403
05a78     B6 FA 05 F6 | 	mov	result1, #182
05a7c     3C 01 90 FD | 	jmp	#LR__0444
05a80                 | LR__0404
05a80     92 FA 05 F6 | 	mov	result1, #146
05a84     34 01 90 FD | 	jmp	#LR__0444
05a88                 | LR__0405
05a88     BE FA 05 F6 | 	mov	result1, #190
05a8c     2C 01 90 FD | 	jmp	#LR__0444
05a90                 | LR__0406
05a90     BE FA 05 F6 | 	mov	result1, #190
05a94     24 01 90 FD | 	jmp	#LR__0444
05a98                 | LR__0407
05a98     C7 FA 05 F6 | 	mov	result1, #199
05a9c     1C 01 90 FD | 	jmp	#LR__0444
05aa0                 | LR__0408
05aa0     AA FA 05 F6 | 	mov	result1, #170
05aa4     14 01 90 FD | 	jmp	#LR__0444
05aa8                 | LR__0409
05aa8     4D FA 05 F6 | 	mov	result1, #77
05aac     0C 01 90 FD | 	jmp	#LR__0444
05ab0                 | LR__0410
05ab0     51 FA 05 F6 | 	mov	result1, #81
05ab4     04 01 90 FD | 	jmp	#LR__0444
05ab8                 | LR__0411
05ab8     51 FA 05 F6 | 	mov	result1, #81
05abc     FC 00 90 FD | 	jmp	#LR__0444
05ac0                 | LR__0412
05ac0     8E FA 05 F6 | 	mov	result1, #142
05ac4     F4 00 90 FD | 	jmp	#LR__0444
05ac8                 | LR__0413
05ac8     8E FA 05 F6 | 	mov	result1, #142
05acc     EC 00 90 FD | 	jmp	#LR__0444
05ad0                 | LR__0414
05ad0     90 FA 05 F6 | 	mov	result1, #144
05ad4     E4 00 90 FD | 	jmp	#LR__0444
05ad8                 | LR__0415
05ad8     90 FA 05 F6 | 	mov	result1, #144
05adc     DC 00 90 FD | 	jmp	#LR__0444
05ae0                 | LR__0416
05ae0     8D FA 05 F6 | 	mov	result1, #141
05ae4     D4 00 90 FD | 	jmp	#LR__0444
05ae8                 | LR__0417
05ae8     8D FA 05 F6 | 	mov	result1, #141
05aec     CC 00 90 FD | 	jmp	#LR__0444
05af0                 | LR__0418
05af0     8C FA 05 F6 | 	mov	result1, #140
05af4     C4 00 90 FD | 	jmp	#LR__0444
05af8                 | LR__0419
05af8     8C FA 05 F6 | 	mov	result1, #140
05afc     BC 00 90 FD | 	jmp	#LR__0444
05b00                 | LR__0420
05b00     91 FA 05 F6 | 	mov	result1, #145
05b04     B4 00 90 FD | 	jmp	#LR__0444
05b08                 | LR__0421
05b08     91 FA 05 F6 | 	mov	result1, #145
05b0c     AC 00 90 FD | 	jmp	#LR__0444
05b10                 | LR__0422
05b10     8B FA 05 F6 | 	mov	result1, #139
05b14     A4 00 90 FD | 	jmp	#LR__0444
05b18                 | LR__0423
05b18     8B FA 05 F6 | 	mov	result1, #139
05b1c     9C 00 90 FD | 	jmp	#LR__0444
05b20                 | LR__0424
05b20     8F FA 05 F6 | 	mov	result1, #143
05b24     94 00 90 FD | 	jmp	#LR__0444
05b28                 | LR__0425
05b28     8F FA 05 F6 | 	mov	result1, #143
05b2c     8C 00 90 FD | 	jmp	#LR__0444
05b30                 | LR__0426
05b30     8F FA 05 F6 | 	mov	result1, #143
05b34     84 00 90 FD | 	jmp	#LR__0444
05b38                 | LR__0427
05b38     B2 FA 05 F6 | 	mov	result1, #178
05b3c     7C 00 90 FD | 	jmp	#LR__0444
05b40                 | LR__0428
05b40     B2 FA 05 F6 | 	mov	result1, #178
05b44     74 00 90 FD | 	jmp	#LR__0444
05b48                 | LR__0429
05b48     75 FA 05 F6 | 	mov	result1, #117
05b4c     6C 00 90 FD | 	jmp	#LR__0444
05b50                 | LR__0430
05b50     75 FA 05 F6 | 	mov	result1, #117
05b54     64 00 90 FD | 	jmp	#LR__0444
05b58                 | LR__0431
05b58     6D FA 05 F6 | 	mov	result1, #109
05b5c     5C 00 90 FD | 	jmp	#LR__0444
05b60                 | LR__0432
05b60     6D FA 05 F6 | 	mov	result1, #109
05b64     54 00 90 FD | 	jmp	#LR__0444
05b68                 | LR__0433
05b68     5B FA 05 F6 | 	mov	result1, #91
05b6c     4C 00 90 FD | 	jmp	#LR__0444
05b70                 | LR__0434
05b70     56 FA 05 F6 | 	mov	result1, #86
05b74     44 00 90 FD | 	jmp	#LR__0444
05b78                 | LR__0435
05b78     56 FA 05 F6 | 	mov	result1, #86
05b7c     3C 00 90 FD | 	jmp	#LR__0444
05b80                 | LR__0436
05b80     70 FA 05 F6 | 	mov	result1, #112
05b84     34 00 90 FD | 	jmp	#LR__0444
05b88                 | LR__0437
05b88     70 FA 05 F6 | 	mov	result1, #112
05b8c     2C 00 90 FD | 	jmp	#LR__0444
05b90                 | LR__0438
05b90     57 FA 05 F6 | 	mov	result1, #87
05b94     24 00 90 FD | 	jmp	#LR__0444
05b98                 | LR__0439
05b98     57 FA 05 F6 | 	mov	result1, #87
05b9c     1C 00 90 FD | 	jmp	#LR__0444
05ba0                 | LR__0440
05ba0     79 FA 05 F6 | 	mov	result1, #121
05ba4     14 00 90 FD | 	jmp	#LR__0444
05ba8                 | LR__0441
05ba8     77 FA 05 F6 | 	mov	result1, #119
05bac     0C 00 90 FD | 	jmp	#LR__0444
05bb0                 | LR__0442
05bb0     78 FA 05 F6 | 	mov	result1, #120
05bb4     04 00 90 FD | 	jmp	#LR__0444
05bb8                 | LR__0443
05bb8     00 FA 05 F6 | 	mov	result1, #0
05bbc                 | LR__0444
05bbc     A7 F0 03 F6 | 	mov	ptra, fp
05bc0     B2 00 A0 FD | 	call	#popregs_
05bc4                 | _iscommand_ret
05bc4     2D 00 64 FD | 	ret
05bc8                 | 
05bc8                 | ' 
05bc8                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05bc8                 | ' 
05bc8                 | ' function isfunction(s as string) as ubyte
05bc8                 | _isfunction
05bc8     01 4A 05 F6 | 	mov	COUNT_, #1
05bcc     A8 00 A0 FD | 	call	#pushregs_
05bd0                 | ' 
05bd0                 | ' select case s
05bd0     09 27 02 F6 | 	mov	local01, arg01
05bd4     AC 01 00 FF 
05bd8     76 15 06 F6 | 	mov	arg02, ##@LR__5665
05bdc     13 13 02 F6 | 	mov	arg01, local01
05be0     BC FD B1 FD | 	call	#__system___string_cmp
05be4     00 FA 0D F2 | 	cmp	result1, #0 wz
05be8     9C 04 90 AD |  if_e	jmp	#LR__0450
05bec     AC 01 00 FF 
05bf0     7A 15 06 F6 | 	mov	arg02, ##@LR__5666
05bf4     13 13 02 F6 | 	mov	arg01, local01
05bf8     A4 FD B1 FD | 	call	#__system___string_cmp
05bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
05c00     8C 04 90 AD |  if_e	jmp	#LR__0451
05c04     AC 01 00 FF 
05c08     7F 15 06 F6 | 	mov	arg02, ##@LR__5667
05c0c     13 13 02 F6 | 	mov	arg01, local01
05c10     8C FD B1 FD | 	call	#__system___string_cmp
05c14     00 FA 0D F2 | 	cmp	result1, #0 wz
05c18     7C 04 90 AD |  if_e	jmp	#LR__0452
05c1c     AC 01 00 FF 
05c20     83 15 06 F6 | 	mov	arg02, ##@LR__5668
05c24     13 13 02 F6 | 	mov	arg01, local01
05c28     74 FD B1 FD | 	call	#__system___string_cmp
05c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c30     6C 04 90 AD |  if_e	jmp	#LR__0453
05c34     AC 01 00 FF 
05c38     88 15 06 F6 | 	mov	arg02, ##@LR__5669
05c3c     13 13 02 F6 | 	mov	arg01, local01
05c40     5C FD B1 FD | 	call	#__system___string_cmp
05c44     00 FA 0D F2 | 	cmp	result1, #0 wz
05c48     5C 04 90 AD |  if_e	jmp	#LR__0454
05c4c     AC 01 00 FF 
05c50     8C 15 06 F6 | 	mov	arg02, ##@LR__5670
05c54     13 13 02 F6 | 	mov	arg01, local01
05c58     44 FD B1 FD | 	call	#__system___string_cmp
05c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c60     4C 04 90 AD |  if_e	jmp	#LR__0455
05c64     AC 01 00 FF 
05c68     91 15 06 F6 | 	mov	arg02, ##@LR__5671
05c6c     13 13 02 F6 | 	mov	arg01, local01
05c70     2C FD B1 FD | 	call	#__system___string_cmp
05c74     00 FA 0D F2 | 	cmp	result1, #0 wz
05c78     3C 04 90 AD |  if_e	jmp	#LR__0456
05c7c     AC 01 00 FF 
05c80     95 15 06 F6 | 	mov	arg02, ##@LR__5672
05c84     13 13 02 F6 | 	mov	arg01, local01
05c88     14 FD B1 FD | 	call	#__system___string_cmp
05c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c90     2C 04 90 AD |  if_e	jmp	#LR__0457
05c94     AC 01 00 FF 
05c98     9A 15 06 F6 | 	mov	arg02, ##@LR__5673
05c9c     13 13 02 F6 | 	mov	arg01, local01
05ca0     FC FC B1 FD | 	call	#__system___string_cmp
05ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ca8     1C 04 90 AD |  if_e	jmp	#LR__0458
05cac     AC 01 00 FF 
05cb0     9F 15 06 F6 | 	mov	arg02, ##@LR__5674
05cb4     13 13 02 F6 | 	mov	arg01, local01
05cb8     E4 FC B1 FD | 	call	#__system___string_cmp
05cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc0     0C 04 90 AD |  if_e	jmp	#LR__0459
05cc4     AC 01 00 FF 
05cc8     A3 15 06 F6 | 	mov	arg02, ##@LR__5675
05ccc     13 13 02 F6 | 	mov	arg01, local01
05cd0     CC FC B1 FD | 	call	#__system___string_cmp
05cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
05cd8     FC 03 90 AD |  if_e	jmp	#LR__0460
05cdc     AC 01 00 FF 
05ce0     A9 15 06 F6 | 	mov	arg02, ##@LR__5676
05ce4     13 13 02 F6 | 	mov	arg01, local01
05ce8     B4 FC B1 FD | 	call	#__system___string_cmp
05cec     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf0     EC 03 90 AD |  if_e	jmp	#LR__0461
05cf4     AC 01 00 FF 
05cf8     B2 15 06 F6 | 	mov	arg02, ##@LR__5677
05cfc     13 13 02 F6 | 	mov	arg01, local01
05d00     9C FC B1 FD | 	call	#__system___string_cmp
05d04     00 FA 0D F2 | 	cmp	result1, #0 wz
05d08     DC 03 90 AD |  if_e	jmp	#LR__0462
05d0c     AC 01 00 FF 
05d10     B6 15 06 F6 | 	mov	arg02, ##@LR__5678
05d14     13 13 02 F6 | 	mov	arg01, local01
05d18     84 FC B1 FD | 	call	#__system___string_cmp
05d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d20     CC 03 90 AD |  if_e	jmp	#LR__0463
05d24     AC 01 00 FF 
05d28     BA 15 06 F6 | 	mov	arg02, ##@LR__5679
05d2c     13 13 02 F6 | 	mov	arg01, local01
05d30     6C FC B1 FD | 	call	#__system___string_cmp
05d34     00 FA 0D F2 | 	cmp	result1, #0 wz
05d38     BC 03 90 AD |  if_e	jmp	#LR__0464
05d3c     AC 01 00 FF 
05d40     C3 15 06 F6 | 	mov	arg02, ##@LR__5680
05d44     13 13 02 F6 | 	mov	arg01, local01
05d48     54 FC B1 FD | 	call	#__system___string_cmp
05d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d50     AC 03 90 AD |  if_e	jmp	#LR__0465
05d54     AC 01 00 FF 
05d58     C7 15 06 F6 | 	mov	arg02, ##@LR__5681
05d5c     13 13 02 F6 | 	mov	arg01, local01
05d60     3C FC B1 FD | 	call	#__system___string_cmp
05d64     00 FA 0D F2 | 	cmp	result1, #0 wz
05d68     9C 03 90 AD |  if_e	jmp	#LR__0466
05d6c     AC 01 00 FF 
05d70     D5 15 06 F6 | 	mov	arg02, ##@LR__5682
05d74     13 13 02 F6 | 	mov	arg01, local01
05d78     24 FC B1 FD | 	call	#__system___string_cmp
05d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d80     8C 03 90 AD |  if_e	jmp	#LR__0467
05d84     AC 01 00 FF 
05d88     E2 15 06 F6 | 	mov	arg02, ##@LR__5683
05d8c     13 13 02 F6 | 	mov	arg01, local01
05d90     0C FC B1 FD | 	call	#__system___string_cmp
05d94     00 FA 0D F2 | 	cmp	result1, #0 wz
05d98     7C 03 90 AD |  if_e	jmp	#LR__0468
05d9c     AC 01 00 FF 
05da0     EA 15 06 F6 | 	mov	arg02, ##@LR__5684
05da4     13 13 02 F6 | 	mov	arg01, local01
05da8     F4 FB B1 FD | 	call	#__system___string_cmp
05dac     00 FA 0D F2 | 	cmp	result1, #0 wz
05db0     6C 03 90 AD |  if_e	jmp	#LR__0469
05db4     AC 01 00 FF 
05db8     EF 15 06 F6 | 	mov	arg02, ##@LR__5685
05dbc     13 13 02 F6 | 	mov	arg01, local01
05dc0     DC FB B1 FD | 	call	#__system___string_cmp
05dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
05dc8     5C 03 90 AD |  if_e	jmp	#LR__0470
05dcc     AC 01 00 FF 
05dd0     F6 15 06 F6 | 	mov	arg02, ##@LR__5686
05dd4     13 13 02 F6 | 	mov	arg01, local01
05dd8     C4 FB B1 FD | 	call	#__system___string_cmp
05ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
05de0     4C 03 90 AD |  if_e	jmp	#LR__0471
05de4     AC 01 00 FF 
05de8     FA 15 06 F6 | 	mov	arg02, ##@LR__5687
05dec     13 13 02 F6 | 	mov	arg01, local01
05df0     AC FB B1 FD | 	call	#__system___string_cmp
05df4     00 FA 0D F2 | 	cmp	result1, #0 wz
05df8     3C 03 90 AD |  if_e	jmp	#LR__0472
05dfc     AD 01 00 FF 
05e00     00 14 06 F6 | 	mov	arg02, ##@LR__5688
05e04     13 13 02 F6 | 	mov	arg01, local01
05e08     94 FB B1 FD | 	call	#__system___string_cmp
05e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e10     2C 03 90 AD |  if_e	jmp	#LR__0473
05e14     AD 01 00 FF 
05e18     04 14 06 F6 | 	mov	arg02, ##@LR__5689
05e1c     13 13 02 F6 | 	mov	arg01, local01
05e20     7C FB B1 FD | 	call	#__system___string_cmp
05e24     00 FA 0D F2 | 	cmp	result1, #0 wz
05e28     1C 03 90 AD |  if_e	jmp	#LR__0474
05e2c     AD 01 00 FF 
05e30     08 14 06 F6 | 	mov	arg02, ##@LR__5690
05e34     13 13 02 F6 | 	mov	arg01, local01
05e38     64 FB B1 FD | 	call	#__system___string_cmp
05e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e40     0C 03 90 AD |  if_e	jmp	#LR__0475
05e44     AD 01 00 FF 
05e48     0E 14 06 F6 | 	mov	arg02, ##@LR__5691
05e4c     13 13 02 F6 | 	mov	arg01, local01
05e50     4C FB B1 FD | 	call	#__system___string_cmp
05e54     00 FA 0D F2 | 	cmp	result1, #0 wz
05e58     FC 02 90 AD |  if_e	jmp	#LR__0476
05e5c     AD 01 00 FF 
05e60     13 14 06 F6 | 	mov	arg02, ##@LR__5692
05e64     13 13 02 F6 | 	mov	arg01, local01
05e68     34 FB B1 FD | 	call	#__system___string_cmp
05e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e70     EC 02 90 AD |  if_e	jmp	#LR__0477
05e74     AD 01 00 FF 
05e78     1A 14 06 F6 | 	mov	arg02, ##@LR__5693
05e7c     13 13 02 F6 | 	mov	arg01, local01
05e80     1C FB B1 FD | 	call	#__system___string_cmp
05e84     00 FA 0D F2 | 	cmp	result1, #0 wz
05e88     DC 02 90 AD |  if_e	jmp	#LR__0478
05e8c     AD 01 00 FF 
05e90     21 14 06 F6 | 	mov	arg02, ##@LR__5694
05e94     13 13 02 F6 | 	mov	arg01, local01
05e98     04 FB B1 FD | 	call	#__system___string_cmp
05e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea0     CC 02 90 AD |  if_e	jmp	#LR__0479
05ea4     AD 01 00 FF 
05ea8     28 14 06 F6 | 	mov	arg02, ##@LR__5695
05eac     13 13 02 F6 | 	mov	arg01, local01
05eb0     EC FA B1 FD | 	call	#__system___string_cmp
05eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
05eb8     BC 02 90 AD |  if_e	jmp	#LR__0480
05ebc     AD 01 00 FF 
05ec0     2F 14 06 F6 | 	mov	arg02, ##@LR__5696
05ec4     13 13 02 F6 | 	mov	arg01, local01
05ec8     D4 FA B1 FD | 	call	#__system___string_cmp
05ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed0     AC 02 90 AD |  if_e	jmp	#LR__0481
05ed4     AD 01 00 FF 
05ed8     34 14 06 F6 | 	mov	arg02, ##@LR__5697
05edc     13 13 02 F6 | 	mov	arg01, local01
05ee0     BC FA B1 FD | 	call	#__system___string_cmp
05ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee8     9C 02 90 AD |  if_e	jmp	#LR__0482
05eec     AD 01 00 FF 
05ef0     39 14 06 F6 | 	mov	arg02, ##@LR__5698
05ef4     13 13 02 F6 | 	mov	arg01, local01
05ef8     A4 FA B1 FD | 	call	#__system___string_cmp
05efc     00 FA 0D F2 | 	cmp	result1, #0 wz
05f00     8C 02 90 AD |  if_e	jmp	#LR__0483
05f04     AD 01 00 FF 
05f08     3E 14 06 F6 | 	mov	arg02, ##@LR__5699
05f0c     13 13 02 F6 | 	mov	arg01, local01
05f10     8C FA B1 FD | 	call	#__system___string_cmp
05f14     00 FA 0D F2 | 	cmp	result1, #0 wz
05f18     7C 02 90 AD |  if_e	jmp	#LR__0484
05f1c     AD 01 00 FF 
05f20     43 14 06 F6 | 	mov	arg02, ##@LR__5700
05f24     13 13 02 F6 | 	mov	arg01, local01
05f28     74 FA B1 FD | 	call	#__system___string_cmp
05f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f30     6C 02 90 AD |  if_e	jmp	#LR__0485
05f34     AD 01 00 FF 
05f38     48 14 06 F6 | 	mov	arg02, ##@LR__5701
05f3c     13 13 02 F6 | 	mov	arg01, local01
05f40     5C FA B1 FD | 	call	#__system___string_cmp
05f44     00 FA 0D F2 | 	cmp	result1, #0 wz
05f48     5C 02 90 AD |  if_e	jmp	#LR__0486
05f4c     AD 01 00 FF 
05f50     50 14 06 F6 | 	mov	arg02, ##@LR__5702
05f54     13 13 02 F6 | 	mov	arg01, local01
05f58     44 FA B1 FD | 	call	#__system___string_cmp
05f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f60     4C 02 90 AD |  if_e	jmp	#LR__0487
05f64     AD 01 00 FF 
05f68     56 14 06 F6 | 	mov	arg02, ##@LR__5703
05f6c     13 13 02 F6 | 	mov	arg01, local01
05f70     2C FA B1 FD | 	call	#__system___string_cmp
05f74     00 FA 0D F2 | 	cmp	result1, #0 wz
05f78     3C 02 90 AD |  if_e	jmp	#LR__0488
05f7c     AD 01 00 FF 
05f80     5D 14 06 F6 | 	mov	arg02, ##@LR__5704
05f84     13 13 02 F6 | 	mov	arg01, local01
05f88     14 FA B1 FD | 	call	#__system___string_cmp
05f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f90     2C 02 90 AD |  if_e	jmp	#LR__0489
05f94     AD 01 00 FF 
05f98     63 14 06 F6 | 	mov	arg02, ##@LR__5705
05f9c     13 13 02 F6 | 	mov	arg01, local01
05fa0     FC F9 B1 FD | 	call	#__system___string_cmp
05fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa8     1C 02 90 AD |  if_e	jmp	#LR__0490
05fac     AD 01 00 FF 
05fb0     69 14 06 F6 | 	mov	arg02, ##@LR__5706
05fb4     13 13 02 F6 | 	mov	arg01, local01
05fb8     E4 F9 B1 FD | 	call	#__system___string_cmp
05fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc0     0C 02 90 AD |  if_e	jmp	#LR__0491
05fc4     AD 01 00 FF 
05fc8     6D 14 06 F6 | 	mov	arg02, ##@LR__5707
05fcc     13 13 02 F6 | 	mov	arg01, local01
05fd0     CC F9 B1 FD | 	call	#__system___string_cmp
05fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fd8     FC 01 90 AD |  if_e	jmp	#LR__0492
05fdc     AD 01 00 FF 
05fe0     71 14 06 F6 | 	mov	arg02, ##@LR__5708
05fe4     13 13 02 F6 | 	mov	arg01, local01
05fe8     B4 F9 B1 FD | 	call	#__system___string_cmp
05fec     00 FA 0D F2 | 	cmp	result1, #0 wz
05ff0     EC 01 90 AD |  if_e	jmp	#LR__0493
05ff4     AD 01 00 FF 
05ff8     75 14 06 F6 | 	mov	arg02, ##@LR__5709
05ffc     13 13 02 F6 | 	mov	arg01, local01
06000     9C F9 B1 FD | 	call	#__system___string_cmp
06004     00 FA 0D F2 | 	cmp	result1, #0 wz
06008     DC 01 90 AD |  if_e	jmp	#LR__0494
0600c     AD 01 00 FF 
06010     7B 14 06 F6 | 	mov	arg02, ##@LR__5710
06014     13 13 02 F6 | 	mov	arg01, local01
06018     84 F9 B1 FD | 	call	#__system___string_cmp
0601c     00 FA 0D F2 | 	cmp	result1, #0 wz
06020     CC 01 90 AD |  if_e	jmp	#LR__0495
06024     AD 01 00 FF 
06028     81 14 06 F6 | 	mov	arg02, ##@LR__5711
0602c     13 13 02 F6 | 	mov	arg01, local01
06030     6C F9 B1 FD | 	call	#__system___string_cmp
06034     00 FA 0D F2 | 	cmp	result1, #0 wz
06038     BC 01 90 AD |  if_e	jmp	#LR__0496
0603c     AD 01 00 FF 
06040     86 14 06 F6 | 	mov	arg02, ##@LR__5712
06044     13 13 02 F6 | 	mov	arg01, local01
06048     54 F9 B1 FD | 	call	#__system___string_cmp
0604c     00 FA 0D F2 | 	cmp	result1, #0 wz
06050     AC 01 90 AD |  if_e	jmp	#LR__0497
06054     AD 01 00 FF 
06058     8A 14 06 F6 | 	mov	arg02, ##@LR__5713
0605c     13 13 02 F6 | 	mov	arg01, local01
06060     3C F9 B1 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     9C 01 90 AD |  if_e	jmp	#LR__0498
0606c     AD 01 00 FF 
06070     8E 14 06 F6 | 	mov	arg02, ##@LR__5714
06074     13 13 02 F6 | 	mov	arg01, local01
06078     24 F9 B1 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     8C 01 90 AD |  if_e	jmp	#LR__0499
06084     90 01 90 FD | 	jmp	#LR__0500
06088                 | LR__0450
06088     9E FA 05 F6 | 	mov	result1, #158
0608c     8C 01 90 FD | 	jmp	#LR__0501
06090                 | LR__0451
06090     85 FA 05 F6 | 	mov	result1, #133
06094     84 01 90 FD | 	jmp	#LR__0501
06098                 | LR__0452
06098     9B FA 05 F6 | 	mov	result1, #155
0609c     7C 01 90 FD | 	jmp	#LR__0501
060a0                 | LR__0453
060a0     9B FA 05 F6 | 	mov	result1, #155
060a4     74 01 90 FD | 	jmp	#LR__0501
060a8                 | LR__0454
060a8     A7 FA 05 F6 | 	mov	result1, #167
060ac     6C 01 90 FD | 	jmp	#LR__0501
060b0                 | LR__0455
060b0     84 FA 05 F6 | 	mov	result1, #132
060b4     64 01 90 FD | 	jmp	#LR__0501
060b8                 | LR__0456
060b8     86 FA 05 F6 | 	mov	result1, #134
060bc     5C 01 90 FD | 	jmp	#LR__0501
060c0                 | LR__0457
060c0     A2 FA 05 F6 | 	mov	result1, #162
060c4     54 01 90 FD | 	jmp	#LR__0501
060c8                 | LR__0458
060c8     9F FA 05 F6 | 	mov	result1, #159
060cc     4C 01 90 FD | 	jmp	#LR__0501
060d0                 | LR__0459
060d0     82 FA 05 F6 | 	mov	result1, #130
060d4     44 01 90 FD | 	jmp	#LR__0501
060d8                 | LR__0460
060d8     99 FA 05 F6 | 	mov	result1, #153
060dc     3C 01 90 FD | 	jmp	#LR__0501
060e0                 | LR__0461
060e0     C5 FA 05 F6 | 	mov	result1, #197
060e4     34 01 90 FD | 	jmp	#LR__0501
060e8                 | LR__0462
060e8     C5 FA 05 F6 | 	mov	result1, #197
060ec     2C 01 90 FD | 	jmp	#LR__0501
060f0                 | LR__0463
060f0     9C FA 05 F6 | 	mov	result1, #156
060f4     24 01 90 FD | 	jmp	#LR__0501
060f8                 | LR__0464
060f8     6F FA 05 F6 | 	mov	result1, #111
060fc     1C 01 90 FD | 	jmp	#LR__0501
06100                 | LR__0465
06100     6F FA 05 F6 | 	mov	result1, #111
06104     14 01 90 FD | 	jmp	#LR__0501
06108                 | LR__0466
06108     93 FA 05 F6 | 	mov	result1, #147
0610c     0C 01 90 FD | 	jmp	#LR__0501
06110                 | LR__0467
06110     94 FA 05 F6 | 	mov	result1, #148
06114     04 01 90 FD | 	jmp	#LR__0501
06118                 | LR__0468
06118     62 FA 05 F6 | 	mov	result1, #98
0611c     FC 00 90 FD | 	jmp	#LR__0501
06120                 | LR__0469
06120     A3 FA 05 F6 | 	mov	result1, #163
06124     F4 00 90 FD | 	jmp	#LR__0501
06128                 | LR__0470
06128     9D FA 05 F6 | 	mov	result1, #157
0612c     EC 00 90 FD | 	jmp	#LR__0501
06130                 | LR__0471
06130     8A FA 05 F6 | 	mov	result1, #138
06134     E4 00 90 FD | 	jmp	#LR__0501
06138                 | LR__0472
06138     A4 FA 05 F6 | 	mov	result1, #164
0613c     DC 00 90 FD | 	jmp	#LR__0501
06140                 | LR__0473
06140     A8 FA 05 F6 | 	mov	result1, #168
06144     D4 00 90 FD | 	jmp	#LR__0501
06148                 | LR__0474
06148     AD FA 05 F6 | 	mov	result1, #173
0614c     CC 00 90 FD | 	jmp	#LR__0501
06150                 | LR__0475
06150     9A FA 05 F6 | 	mov	result1, #154
06154     C4 00 90 FD | 	jmp	#LR__0501
06158                 | LR__0476
06158     A6 FA 05 F6 | 	mov	result1, #166
0615c     BC 00 90 FD | 	jmp	#LR__0501
06160                 | LR__0477
06160     66 FA 05 F6 | 	mov	result1, #102
06164     B4 00 90 FD | 	jmp	#LR__0501
06168                 | LR__0478
06168     67 FA 05 F6 | 	mov	result1, #103
0616c     AC 00 90 FD | 	jmp	#LR__0501
06170                 | LR__0479
06170     64 FA 05 F6 | 	mov	result1, #100
06174     A4 00 90 FD | 	jmp	#LR__0501
06178                 | LR__0480
06178     65 FA 05 F6 | 	mov	result1, #101
0617c     9C 00 90 FD | 	jmp	#LR__0501
06180                 | LR__0481
06180     C8 FA 05 F6 | 	mov	result1, #200
06184     94 00 90 FD | 	jmp	#LR__0501
06188                 | LR__0482
06188     C9 FA 05 F6 | 	mov	result1, #201
0618c     8C 00 90 FD | 	jmp	#LR__0501
06190                 | LR__0483
06190     CA FA 05 F6 | 	mov	result1, #202
06194     84 00 90 FD | 	jmp	#LR__0501
06198                 | LR__0484
06198     CB FA 05 F6 | 	mov	result1, #203
0619c     7C 00 90 FD | 	jmp	#LR__0501
061a0                 | LR__0485
061a0     98 FA 05 F6 | 	mov	result1, #152
061a4     74 00 90 FD | 	jmp	#LR__0501
061a8                 | LR__0486
061a8     7B FA 05 F6 | 	mov	result1, #123
061ac     6C 00 90 FD | 	jmp	#LR__0501
061b0                 | LR__0487
061b0     76 FA 05 F6 | 	mov	result1, #118
061b4     64 00 90 FD | 	jmp	#LR__0501
061b8                 | LR__0488
061b8     A5 FA 05 F6 | 	mov	result1, #165
061bc     5C 00 90 FD | 	jmp	#LR__0501
061c0                 | LR__0489
061c0     7A FA 05 F6 | 	mov	result1, #122
061c4     54 00 90 FD | 	jmp	#LR__0501
061c8                 | LR__0490
061c8     BF FA 05 F6 | 	mov	result1, #191
061cc     4C 00 90 FD | 	jmp	#LR__0501
061d0                 | LR__0491
061d0     54 FA 05 F6 | 	mov	result1, #84
061d4     44 00 90 FD | 	jmp	#LR__0501
061d8                 | LR__0492
061d8     6B FA 05 F6 | 	mov	result1, #107
061dc     3C 00 90 FD | 	jmp	#LR__0501
061e0                 | LR__0493
061e0     87 FA 05 F6 | 	mov	result1, #135
061e4     34 00 90 FD | 	jmp	#LR__0501
061e8                 | LR__0494
061e8     6A FA 05 F6 | 	mov	result1, #106
061ec     2C 00 90 FD | 	jmp	#LR__0501
061f0                 | LR__0495
061f0     6E FA 05 F6 | 	mov	result1, #110
061f4     24 00 90 FD | 	jmp	#LR__0501
061f8                 | LR__0496
061f8     A1 FA 05 F6 | 	mov	result1, #161
061fc     1C 00 90 FD | 	jmp	#LR__0501
06200                 | LR__0497
06200     83 FA 05 F6 | 	mov	result1, #131
06204     14 00 90 FD | 	jmp	#LR__0501
06208                 | LR__0498
06208     A0 FA 05 F6 | 	mov	result1, #160
0620c     0C 00 90 FD | 	jmp	#LR__0501
06210                 | LR__0499
06210     9B FA 05 F6 | 	mov	result1, #155
06214     04 00 90 FD | 	jmp	#LR__0501
06218                 | LR__0500
06218     00 FA 05 F6 | 	mov	result1, #0
0621c                 | LR__0501
0621c     A7 F0 03 F6 | 	mov	ptra, fp
06220     B2 00 A0 FD | 	call	#popregs_
06224                 | _isfunction_ret
06224     2D 00 64 FD | 	ret
06228                 | 
06228                 | ' 
06228                 | ' ' Check if the part is a name
06228                 | ' 
06228                 | ' function isname(s as string) as boolean
06228                 | _isname
06228     0D 4A 05 F6 | 	mov	COUNT_, #13
0622c     A8 00 A0 FD | 	call	#pushregs_
06230     09 27 02 F6 | 	mov	local01, arg01
06234     09 29 02 F6 | 	mov	local02, arg01
06238     97 06 48 FB | 	callpa	#(@LR__0511-@LR__0510)>>2,fcache_load_ptr_
0623c                 | LR__0510
0623c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06240     01 28 06 51 |  if_ne	add	local02, #1
06244     F4 FF 9F 5D |  if_ne	jmp	#LR__0510
06248                 | LR__0511
06248     09 29 82 F1 | 	sub	local02, arg01
0624c     14 FB 01 F6 | 	mov	result1, local02
06250     FD 2A 0A F6 | 	mov	local03, result1 wz
06254     00 FA 05 A6 |  if_e	mov	result1, #0
06258     34 02 90 AD |  if_e	jmp	#LR__0523
0625c     13 13 02 F6 | 	mov	arg01, local01
06260     01 14 06 F6 | 	mov	arg02, #1
06264     01 16 06 F6 | 	mov	arg03, #1
06268     A0 18 B2 FD | 	call	#__system__Mid_S
0626c     FD 2C 02 F6 | 	mov	local04, result1
06270                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06270     AD 01 00 FF 
06274     95 14 06 F6 | 	mov	arg02, ##@LR__5715
06278     16 13 02 F6 | 	mov	arg01, local04
0627c     20 F7 B1 FD | 	call	#__system___string_cmp
06280     00 FA 55 F2 | 	cmps	result1, #0 wc
06284     18 00 90 CD |  if_b	jmp	#LR__0512
06288     AD 01 00 FF 
0628c     97 14 06 F6 | 	mov	arg02, ##@LR__5716
06290     16 13 02 F6 | 	mov	arg01, local04
06294     08 F7 B1 FD | 	call	#__system___string_cmp
06298     01 FA 55 F2 | 	cmps	result1, #1 wc
0629c     1C 00 90 CD |  if_b	jmp	#LR__0513
062a0                 | LR__0512
062a0     AD 01 00 FF 
062a4     99 14 06 F6 | 	mov	arg02, ##@LR__5717
062a8     16 13 02 F6 | 	mov	arg01, local04
062ac     F0 F6 B1 FD | 	call	#__system___string_cmp
062b0     00 FA 0D F2 | 	cmp	result1, #0 wz
062b4     00 FA 05 56 |  if_ne	mov	result1, #0
062b8     D4 01 90 5D |  if_ne	jmp	#LR__0523
062bc                 | LR__0513
062bc                 | ' if l>2 then 
062bc     03 2A 56 F2 | 	cmps	local03, #3 wc
062c0     C8 01 90 CD |  if_b	jmp	#LR__0522
062c4                 | '   for i=2 to l
062c4     02 2E 06 F6 | 	mov	local05, #2
062c8     15 31 02 F6 | 	mov	local06, local03
062cc     01 30 06 F1 | 	add	local06, #1
062d0                 | LR__0514
062d0     18 2F 52 F2 | 	cmps	local05, local06 wc
062d4     B4 01 90 3D |  if_ae	jmp	#LR__0521
062d8     13 13 02 F6 | 	mov	arg01, local01
062dc     17 15 02 F6 | 	mov	arg02, local05
062e0     01 16 06 F6 | 	mov	arg03, #1
062e4     24 18 B2 FD | 	call	#__system__Mid_S
062e8     FD 2C 02 F6 | 	mov	local04, result1
062ec                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
062ec     15 2F 52 F2 | 	cmps	local05, local03 wc
062f0     9C 00 90 3D |  if_ae	jmp	#LR__0517
062f4     AD 01 00 FF 
062f8     9B 14 06 F6 | 	mov	arg02, ##@LR__5718
062fc     16 13 02 F6 | 	mov	arg01, local04
06300     9C F6 B1 FD | 	call	#__system___string_cmp
06304     00 FA 55 F2 | 	cmps	result1, #0 wc
06308     18 00 90 CD |  if_b	jmp	#LR__0515
0630c     AD 01 00 FF 
06310     9D 14 06 F6 | 	mov	arg02, ##@LR__5719
06314     16 13 02 F6 | 	mov	arg01, local04
06318     84 F6 B1 FD | 	call	#__system___string_cmp
0631c     01 FA 55 F2 | 	cmps	result1, #1 wc
06320     6C 00 90 CD |  if_b	jmp	#LR__0517
06324                 | LR__0515
06324     AD 01 00 FF 
06328     9F 14 06 F6 | 	mov	arg02, ##@LR__5720
0632c     16 13 02 F6 | 	mov	arg01, local04
06330     6C F6 B1 FD | 	call	#__system___string_cmp
06334     00 FA 55 F2 | 	cmps	result1, #0 wc
06338     18 00 90 CD |  if_b	jmp	#LR__0516
0633c     AD 01 00 FF 
06340     A1 14 06 F6 | 	mov	arg02, ##@LR__5721
06344     16 13 02 F6 | 	mov	arg01, local04
06348     54 F6 B1 FD | 	call	#__system___string_cmp
0634c     01 FA 55 F2 | 	cmps	result1, #1 wc
06350     3C 00 90 CD |  if_b	jmp	#LR__0517
06354                 | LR__0516
06354     AD 01 00 FF 
06358     A3 32 06 F6 | 	mov	local07, ##@LR__5722
0635c     16 13 02 F6 | 	mov	arg01, local04
06360     19 15 02 F6 | 	mov	arg02, local07
06364     38 F6 B1 FD | 	call	#__system___string_cmp
06368     00 FA 0D F2 | 	cmp	result1, #0 wz
0636c     20 00 90 AD |  if_e	jmp	#LR__0517
06370     AD 01 00 FF 
06374     A5 34 06 F6 | 	mov	local08, ##@LR__5723
06378     16 13 02 F6 | 	mov	arg01, local04
0637c     1A 15 02 F6 | 	mov	arg02, local08
06380     1C F6 B1 FD | 	call	#__system___string_cmp
06384     FD 36 0A F6 | 	mov	local09, result1 wz
06388     00 FA 05 56 |  if_ne	mov	result1, #0
0638c     00 01 90 5D |  if_ne	jmp	#LR__0523
06390                 | LR__0517
06390                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06390     15 2F 0A F2 | 	cmp	local05, local03 wz
06394     EC 00 90 5D |  if_ne	jmp	#LR__0520
06398     AD 01 00 FF 
0639c     A7 38 06 F6 | 	mov	local10, ##@LR__5724
063a0     16 13 02 F6 | 	mov	arg01, local04
063a4     1C 15 02 F6 | 	mov	arg02, local10
063a8     F4 F5 B1 FD | 	call	#__system___string_cmp
063ac     FD 3A 02 F6 | 	mov	local11, result1
063b0     00 3A 56 F2 | 	cmps	local11, #0 wc
063b4     1C 00 90 CD |  if_b	jmp	#LR__0518
063b8     AD 01 00 FF 
063bc     A9 14 06 F6 | 	mov	arg02, ##@LR__5725
063c0     16 13 02 F6 | 	mov	arg01, local04
063c4     D8 F5 B1 FD | 	call	#__system___string_cmp
063c8     FD 38 02 F6 | 	mov	local10, result1
063cc     01 38 56 F2 | 	cmps	local10, #1 wc
063d0     B0 00 90 CD |  if_b	jmp	#LR__0520
063d4                 | LR__0518
063d4     AD 01 00 FF 
063d8     AB 14 06 F6 | 	mov	arg02, ##@LR__5726
063dc     16 13 02 F6 | 	mov	arg01, local04
063e0     BC F5 B1 FD | 	call	#__system___string_cmp
063e4     00 FA 55 F2 | 	cmps	result1, #0 wc
063e8     1C 00 90 CD |  if_b	jmp	#LR__0519
063ec     AD 01 00 FF 
063f0     AD 36 06 F6 | 	mov	local09, ##@LR__5727
063f4     16 13 02 F6 | 	mov	arg01, local04
063f8     1B 15 02 F6 | 	mov	arg02, local09
063fc     A0 F5 B1 FD | 	call	#__system___string_cmp
06400     01 FA 55 F2 | 	cmps	result1, #1 wc
06404     7C 00 90 CD |  if_b	jmp	#LR__0520
06408                 | LR__0519
06408     AD 01 00 FF 
0640c     AF 36 06 F6 | 	mov	local09, ##@LR__5728
06410     16 13 02 F6 | 	mov	arg01, local04
06414     1B 15 02 F6 | 	mov	arg02, local09
06418     84 F5 B1 FD | 	call	#__system___string_cmp
0641c     00 FA 4D F2 | 	cmps	result1, #0 wz
06420     60 00 90 AD |  if_e	jmp	#LR__0520
06424     AD 01 00 FF 
06428     B1 34 06 F6 | 	mov	local08, ##@LR__5729
0642c     16 13 02 F6 | 	mov	arg01, local04
06430     1A 15 02 F6 | 	mov	arg02, local08
06434     68 F5 B1 FD | 	call	#__system___string_cmp
06438     FD 36 0A F6 | 	mov	local09, result1 wz
0643c     44 00 90 AD |  if_e	jmp	#LR__0520
06440     AD 01 00 FF 
06444     B3 3C 06 F6 | 	mov	local12, ##@LR__5730
06448     1E 35 02 F6 | 	mov	local08, local12
0644c     16 13 02 F6 | 	mov	arg01, local04
06450     1A 15 02 F6 | 	mov	arg02, local08
06454     48 F5 B1 FD | 	call	#__system___string_cmp
06458     FD 32 0A F6 | 	mov	local07, result1 wz
0645c     24 00 90 AD |  if_e	jmp	#LR__0520
06460     AD 01 00 FF 
06464     B5 3E 06 F6 | 	mov	local13, ##@LR__5731
06468     1F 3D 02 F6 | 	mov	local12, local13
0646c     16 13 02 F6 | 	mov	arg01, local04
06470     1E 15 02 F6 | 	mov	arg02, local12
06474     28 F5 B1 FD | 	call	#__system___string_cmp
06478     FD 34 0A F6 | 	mov	local08, result1 wz
0647c     00 FA 05 56 |  if_ne	mov	result1, #0
06480     0C 00 90 5D |  if_ne	jmp	#LR__0523
06484                 | LR__0520
06484     01 2E 06 F1 | 	add	local05, #1
06488     44 FE 9F FD | 	jmp	#LR__0514
0648c                 | LR__0521
0648c                 | LR__0522
0648c                 | ' return true
0648c     01 FA 65 F6 | 	neg	result1, #1
06490                 | LR__0523
06490     A7 F0 03 F6 | 	mov	ptra, fp
06494     B2 00 A0 FD | 	call	#popregs_
06498                 | _isname_ret
06498     2D 00 64 FD | 	ret
0649c                 | 
0649c                 | ' 
0649c                 | ' ' Check if the part is a number.  
0649c                 | ' 
0649c                 | ' function isnum(s as string) as boolean 
0649c                 | _isnum
0649c     13 4A 05 F6 | 	mov	COUNT_, #19
064a0     A8 00 A0 FD | 	call	#pushregs_
064a4     09 27 02 F6 | 	mov	local01, arg01
064a8     00 28 06 F6 | 	mov	local02, #0
064ac     00 2A 06 F6 | 	mov	local03, #0
064b0     13 13 02 F6 | 	mov	arg01, local01
064b4     09 2D 02 F6 | 	mov	local04, arg01
064b8     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
064bc                 | LR__0530
064bc     16 FB C9 FA | 	rdbyte	result1, local04 wz
064c0     01 2C 06 51 |  if_ne	add	local04, #1
064c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
064c8                 | LR__0531
064c8     09 2D 82 F1 | 	sub	local04, arg01
064cc     16 FB 01 F6 | 	mov	result1, local04
064d0     FD 2E 0A F6 | 	mov	local05, result1 wz
064d4     00 FA 05 A6 |  if_e	mov	result1, #0
064d8     A0 03 90 AD |  if_e	jmp	#LR__0546
064dc     13 13 02 F6 | 	mov	arg01, local01
064e0     01 14 06 F6 | 	mov	arg02, #1
064e4     01 16 06 F6 | 	mov	arg03, #1
064e8     20 16 B2 FD | 	call	#__system__Mid_S
064ec     FD 30 02 F6 | 	mov	local06, result1
064f0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
064f0     AD 01 00 FF 
064f4     B7 14 06 F6 | 	mov	arg02, ##@LR__5732
064f8     18 13 02 F6 | 	mov	arg01, local06
064fc     A0 F4 B1 FD | 	call	#__system___string_cmp
06500     00 FA 55 F2 | 	cmps	result1, #0 wc
06504     1C 00 90 CD |  if_b	jmp	#LR__0532
06508     AD 01 00 FF 
0650c     B9 32 06 F6 | 	mov	local07, ##@LR__5733
06510     18 13 02 F6 | 	mov	arg01, local06
06514     19 15 02 F6 | 	mov	arg02, local07
06518     84 F4 B1 FD | 	call	#__system___string_cmp
0651c     01 FA 55 F2 | 	cmps	result1, #1 wc
06520     84 00 90 CD |  if_b	jmp	#LR__0533
06524                 | LR__0532
06524     AD 01 00 FF 
06528     BB 34 06 F6 | 	mov	local08, ##@LR__5734
0652c     1A 33 02 F6 | 	mov	local07, local08
06530     18 13 02 F6 | 	mov	arg01, local06
06534     19 15 02 F6 | 	mov	arg02, local07
06538     64 F4 B1 FD | 	call	#__system___string_cmp
0653c     00 FA 0D F2 | 	cmp	result1, #0 wz
06540     64 00 90 AD |  if_e	jmp	#LR__0533
06544     AD 01 00 FF 
06548     BD 36 06 F6 | 	mov	local09, ##@LR__5735
0654c     1B 35 02 F6 | 	mov	local08, local09
06550     18 13 02 F6 | 	mov	arg01, local06
06554     1A 15 02 F6 | 	mov	arg02, local08
06558     44 F4 B1 FD | 	call	#__system___string_cmp
0655c     FD 32 0A F6 | 	mov	local07, result1 wz
06560     44 00 90 AD |  if_e	jmp	#LR__0533
06564     AD 01 00 FF 
06568     BF 38 06 F6 | 	mov	local10, ##@LR__5736
0656c     1C 37 02 F6 | 	mov	local09, local10
06570     18 13 02 F6 | 	mov	arg01, local06
06574     1B 15 02 F6 | 	mov	arg02, local09
06578     24 F4 B1 FD | 	call	#__system___string_cmp
0657c     FD 34 0A F6 | 	mov	local08, result1 wz
06580     24 00 90 AD |  if_e	jmp	#LR__0533
06584     AD 01 00 FF 
06588     C1 3A 06 F6 | 	mov	local11, ##@LR__5737
0658c     1D 39 02 F6 | 	mov	local10, local11
06590     18 13 02 F6 | 	mov	arg01, local06
06594     1C 15 02 F6 | 	mov	arg02, local10
06598     04 F4 B1 FD | 	call	#__system___string_cmp
0659c     FD 36 0A F6 | 	mov	local09, result1 wz
065a0     00 FA 05 56 |  if_ne	mov	result1, #0
065a4     D4 02 90 5D |  if_ne	jmp	#LR__0546
065a8                 | LR__0533
065a8                 | ' if m$="." then ds=1
065a8     AD 01 00 FF 
065ac     C3 14 06 F6 | 	mov	arg02, ##@LR__5738
065b0     18 13 02 F6 | 	mov	arg01, local06
065b4     E8 F3 B1 FD | 	call	#__system___string_cmp
065b8     00 FA 0D F2 | 	cmp	result1, #0 wz
065bc     01 28 06 A6 |  if_e	mov	local02, #1
065c0                 | ' if m$="$" then hex=1 else hex=0
065c0     AD 01 00 FF 
065c4     C5 14 06 F6 | 	mov	arg02, ##@LR__5739
065c8     18 13 02 F6 | 	mov	arg01, local06
065cc     D0 F3 B1 FD | 	call	#__system___string_cmp
065d0     00 FA 0D F2 | 	cmp	result1, #0 wz
065d4     01 3C 06 A6 |  if_e	mov	local12, #1
065d8     00 3C 06 56 |  if_ne	mov	local12, #0
065dc                 | ' if m$="%" then bin=1 else bin=0
065dc     AD 01 00 FF 
065e0     C7 14 06 F6 | 	mov	arg02, ##@LR__5740
065e4     18 13 02 F6 | 	mov	arg01, local06
065e8     B4 F3 B1 FD | 	call	#__system___string_cmp
065ec     00 FA 0D F2 | 	cmp	result1, #0 wz
065f0     01 3E 06 A6 |  if_e	mov	local13, #1
065f4     00 3E 06 56 |  if_ne	mov	local13, #0
065f8                 | ' if l>1 then 
065f8     02 2E 56 F2 | 	cmps	local05, #2 wc
065fc     78 02 90 CD |  if_b	jmp	#LR__0545
06600                 | '   for i=2 to l
06600     02 40 06 F6 | 	mov	local14, #2
06604     17 43 02 F6 | 	mov	local15, local05
06608     01 42 06 F1 | 	add	local15, #1
0660c                 | LR__0534
0660c     21 41 52 F2 | 	cmps	local14, local15 wc
06610     64 02 90 3D |  if_ae	jmp	#LR__0544
06614     13 13 02 F6 | 	mov	arg01, local01
06618     20 15 02 F6 | 	mov	arg02, local14
0661c     01 16 06 F6 | 	mov	arg03, #1
06620     E8 14 B2 FD | 	call	#__system__Mid_S
06624     FD 30 02 F6 | 	mov	local06, result1
06628     00 44 06 F6 | 	mov	local16, #0
0662c                 | '     m$=mid$(s,i,1) : b=false
0662c                 | '     if m$>="0" andalso m$<="9" then b=true  
0662c     AD 01 00 FF 
06630     C9 14 06 F6 | 	mov	arg02, ##@LR__5741
06634     18 13 02 F6 | 	mov	arg01, local06
06638     64 F3 B1 FD | 	call	#__system___string_cmp
0663c     00 FA 55 F2 | 	cmps	result1, #0 wc
06640     1C 00 90 CD |  if_b	jmp	#LR__0535
06644     AD 01 00 FF 
06648     CB 32 06 F6 | 	mov	local07, ##@LR__5742
0664c     18 13 02 F6 | 	mov	arg01, local06
06650     19 15 02 F6 | 	mov	arg02, local07
06654     48 F3 B1 FD | 	call	#__system___string_cmp
06658     01 FA 55 F2 | 	cmps	result1, #1 wc
0665c     01 44 66 C6 |  if_b	neg	local16, #1
06660                 | LR__0535
06660                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06660     AD 01 00 FF 
06664     CD 14 06 F6 | 	mov	arg02, ##@LR__5743
06668     18 13 02 F6 | 	mov	arg01, local06
0666c     30 F3 B1 FD | 	call	#__system___string_cmp
06670     00 FA 0D F2 | 	cmp	result1, #0 wz
06674     7C 00 90 AD |  if_e	jmp	#LR__0536
06678     AD 01 00 FF 
0667c     CF 32 06 F6 | 	mov	local07, ##@LR__5744
06680     18 13 02 F6 | 	mov	arg01, local06
06684     19 15 02 F6 | 	mov	arg02, local07
06688     14 F3 B1 FD | 	call	#__system___string_cmp
0668c     00 FA 0D F2 | 	cmp	result1, #0 wz
06690     60 00 90 AD |  if_e	jmp	#LR__0536
06694     AD 01 00 FF 
06698     D1 34 06 F6 | 	mov	local08, ##@LR__5745
0669c     1A 33 02 F6 | 	mov	local07, local08
066a0     18 13 02 F6 | 	mov	arg01, local06
066a4     19 15 02 F6 | 	mov	arg02, local07
066a8     F4 F2 B1 FD | 	call	#__system___string_cmp
066ac     00 FA 0D F2 | 	cmp	result1, #0 wz
066b0     40 00 90 AD |  if_e	jmp	#LR__0536
066b4     AD 01 00 FF 
066b8     D3 36 06 F6 | 	mov	local09, ##@LR__5746
066bc     1B 35 02 F6 | 	mov	local08, local09
066c0     18 13 02 F6 | 	mov	arg01, local06
066c4     1A 15 02 F6 | 	mov	arg02, local08
066c8     D4 F2 B1 FD | 	call	#__system___string_cmp
066cc     FD 32 0A F6 | 	mov	local07, result1 wz
066d0     20 00 90 AD |  if_e	jmp	#LR__0536
066d4     AD 01 00 FF 
066d8     D5 38 06 F6 | 	mov	local10, ##@LR__5747
066dc     1C 37 02 F6 | 	mov	local09, local10
066e0     18 13 02 F6 | 	mov	arg01, local06
066e4     1B 15 02 F6 | 	mov	arg02, local09
066e8     B4 F2 B1 FD | 	call	#__system___string_cmp
066ec     FD 34 0A F6 | 	mov	local08, result1 wz
066f0     04 00 90 5D |  if_ne	jmp	#LR__0537
066f4                 | LR__0536
066f4     01 44 66 F6 | 	neg	local16, #1
066f8                 | LR__0537
066f8                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
066f8     01 3C 0E F2 | 	cmp	local12, #1 wz
066fc     34 00 90 5D |  if_ne	jmp	#LR__0538
06700     AD 01 00 FF 
06704     D7 14 06 F6 | 	mov	arg02, ##@LR__5748
06708     18 13 02 F6 | 	mov	arg01, local06
0670c     90 F2 B1 FD | 	call	#__system___string_cmp
06710     00 FA 55 F2 | 	cmps	result1, #0 wc
06714     1C 00 90 CD |  if_b	jmp	#LR__0538
06718     AD 01 00 FF 
0671c     D9 32 06 F6 | 	mov	local07, ##@LR__5749
06720     18 13 02 F6 | 	mov	arg01, local06
06724     19 15 02 F6 | 	mov	arg02, local07
06728     74 F2 B1 FD | 	call	#__system___string_cmp
0672c     01 FA 55 F2 | 	cmps	result1, #1 wc
06730     01 44 66 C6 |  if_b	neg	local16, #1
06734                 | LR__0538
06734                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06734     01 3E 0E F2 | 	cmp	local13, #1 wz
06738     58 00 90 5D |  if_ne	jmp	#LR__0540
0673c     AD 01 00 FF 
06740     DB 14 06 F6 | 	mov	arg02, ##@LR__5750
06744     18 13 02 F6 | 	mov	arg01, local06
06748     54 F2 B1 FD | 	call	#__system___string_cmp
0674c     00 FA 55 F2 | 	cmps	result1, #0 wc
06750     1C 00 90 CD |  if_b	jmp	#LR__0539
06754     AD 01 00 FF 
06758     DD 32 06 F6 | 	mov	local07, ##@LR__5751
0675c     18 13 02 F6 | 	mov	arg01, local06
06760     19 15 02 F6 | 	mov	arg02, local07
06764     38 F2 B1 FD | 	call	#__system___string_cmp
06768     01 FA 55 F2 | 	cmps	result1, #1 wc
0676c     24 00 90 CD |  if_b	jmp	#LR__0540
06770                 | LR__0539
06770     AD 01 00 FF 
06774     DF 34 06 F6 | 	mov	local08, ##@LR__5752
06778     1A 33 02 F6 | 	mov	local07, local08
0677c     18 13 02 F6 | 	mov	arg01, local06
06780     19 15 02 F6 | 	mov	arg02, local07
06784     18 F2 B1 FD | 	call	#__system___string_cmp
06788     00 FA 0D F2 | 	cmp	result1, #0 wz
0678c     00 FA 05 56 |  if_ne	mov	result1, #0
06790     E8 00 90 5D |  if_ne	jmp	#LR__0546
06794                 | LR__0540
06794                 | '     if not b then return false
06794     22 45 22 F6 | 	not	local16, local16
06798     00 44 0E F2 | 	cmp	local16, #0 wz
0679c     00 FA 05 56 |  if_ne	mov	result1, #0
067a0     D8 00 90 5D |  if_ne	jmp	#LR__0546
067a4                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
067a4     AD 01 00 FF 
067a8     E1 14 06 F6 | 	mov	arg02, ##@LR__5753
067ac     18 13 02 F6 | 	mov	arg01, local06
067b0     EC F1 B1 FD | 	call	#__system___string_cmp
067b4     00 FA 0D F2 | 	cmp	result1, #0 wz
067b8     3C 00 90 5D |  if_ne	jmp	#LR__0541
067bc     20 15 02 F6 | 	mov	arg02, local14
067c0     01 14 86 F1 | 	sub	arg02, #1
067c4     13 13 02 F6 | 	mov	arg01, local01
067c8     01 16 06 F6 | 	mov	arg03, #1
067cc     3C 13 B2 FD | 	call	#__system__Mid_S
067d0     FD 12 02 F6 | 	mov	arg01, result1
067d4     2C 15 B2 FD | 	call	#__system__LCase_S
067d8     FD 12 02 F6 | 	mov	arg01, result1
067dc     AD 01 00 FF 
067e0     E3 32 06 F6 | 	mov	local07, ##@LR__5754
067e4     19 15 02 F6 | 	mov	arg02, local07
067e8     B4 F1 B1 FD | 	call	#__system___string_cmp
067ec     00 FA 0D F2 | 	cmp	result1, #0 wz
067f0     00 FA 05 56 |  if_ne	mov	result1, #0
067f4     84 00 90 5D |  if_ne	jmp	#LR__0546
067f8                 | LR__0541
067f8                 | '     if m$="." then ds+=1: if ds>1 then return false
067f8     AD 01 00 FF 
067fc     E5 14 06 F6 | 	mov	arg02, ##@LR__5755
06800     18 13 02 F6 | 	mov	arg01, local06
06804     98 F1 B1 FD | 	call	#__system___string_cmp
06808     00 FA 0D F2 | 	cmp	result1, #0 wz
0680c     01 28 06 A1 |  if_e	add	local02, #1
06810     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06814     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06818     60 00 90 2D |  if_nc_and_z	jmp	#LR__0546
0681c                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
0681c     AD 01 00 FF 
06820     E7 46 06 F6 | 	mov	local17, ##@LR__5756
06824     23 49 02 F6 | 	mov	local18, local17
06828     18 13 02 F6 | 	mov	arg01, local06
0682c     24 15 02 F6 | 	mov	arg02, local18
06830     6C F1 B1 FD | 	call	#__system___string_cmp
06834     FD 4A 0A F6 | 	mov	local19, result1 wz
06838     20 00 90 AD |  if_e	jmp	#LR__0542
0683c     AD 01 00 FF 
06840     E9 32 06 F6 | 	mov	local07, ##@LR__5757
06844     19 47 02 F6 | 	mov	local17, local07
06848     18 13 02 F6 | 	mov	arg01, local06
0684c     23 15 02 F6 | 	mov	arg02, local17
06850     4C F1 B1 FD | 	call	#__system___string_cmp
06854     FD 48 0A F6 | 	mov	local18, result1 wz
06858     14 00 90 5D |  if_ne	jmp	#LR__0543
0685c                 | LR__0542
0685c     01 2A 06 F1 | 	add	local03, #1
06860     00 3C 0E F2 | 	cmp	local12, #0 wz
06864     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06868     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
0686c     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0546
06870                 | LR__0543
06870     01 40 06 F1 | 	add	local14, #1
06874     94 FD 9F FD | 	jmp	#LR__0534
06878                 | LR__0544
06878                 | LR__0545
06878                 | ' return true
06878     01 FA 65 F6 | 	neg	result1, #1
0687c                 | LR__0546
0687c     A7 F0 03 F6 | 	mov	ptra, fp
06880     B2 00 A0 FD | 	call	#popregs_
06884                 | _isnum_ret
06884     2D 00 64 FD | 	ret
06888                 | 
06888                 | '   
06888                 | ' ' Check if the part is an integer number.    
06888                 | '   
06888                 | ' function isint(s as string) as boolean
06888                 | _isint
06888     0E 4A 05 F6 | 	mov	COUNT_, #14
0688c     A8 00 A0 FD | 	call	#pushregs_
06890     09 27 02 F6 | 	mov	local01, arg01
06894     09 29 02 F6 | 	mov	local02, arg01
06898     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
0689c                 | LR__0550
0689c     14 FB C9 FA | 	rdbyte	result1, local02 wz
068a0     01 28 06 51 |  if_ne	add	local02, #1
068a4     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
068a8                 | LR__0551
068a8     09 29 82 F1 | 	sub	local02, arg01
068ac     14 FB 01 F6 | 	mov	result1, local02
068b0     FD 2A 0A F6 | 	mov	local03, result1 wz
068b4     00 FA 05 A6 |  if_e	mov	result1, #0
068b8     64 02 90 AD |  if_e	jmp	#LR__0564
068bc     13 13 02 F6 | 	mov	arg01, local01
068c0     01 14 06 F6 | 	mov	arg02, #1
068c4     01 16 06 F6 | 	mov	arg03, #1
068c8     40 12 B2 FD | 	call	#__system__Mid_S
068cc     FD 2C 02 F6 | 	mov	local04, result1
068d0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
068d0     AD 01 00 FF 
068d4     EB 14 06 F6 | 	mov	arg02, ##@LR__5758
068d8     16 13 02 F6 | 	mov	arg01, local04
068dc     C0 F0 B1 FD | 	call	#__system___string_cmp
068e0     00 FA 55 F2 | 	cmps	result1, #0 wc
068e4     1C 00 90 CD |  if_b	jmp	#LR__0552
068e8     AD 01 00 FF 
068ec     ED 2E 06 F6 | 	mov	local05, ##@LR__5759
068f0     16 13 02 F6 | 	mov	arg01, local04
068f4     17 15 02 F6 | 	mov	arg02, local05
068f8     A4 F0 B1 FD | 	call	#__system___string_cmp
068fc     01 FA 55 F2 | 	cmps	result1, #1 wc
06900     64 00 90 CD |  if_b	jmp	#LR__0553
06904                 | LR__0552
06904     AD 01 00 FF 
06908     EF 30 06 F6 | 	mov	local06, ##@LR__5760
0690c     18 2F 02 F6 | 	mov	local05, local06
06910     16 13 02 F6 | 	mov	arg01, local04
06914     17 15 02 F6 | 	mov	arg02, local05
06918     84 F0 B1 FD | 	call	#__system___string_cmp
0691c     00 FA 0D F2 | 	cmp	result1, #0 wz
06920     44 00 90 AD |  if_e	jmp	#LR__0553
06924     AD 01 00 FF 
06928     F1 32 06 F6 | 	mov	local07, ##@LR__5761
0692c     19 31 02 F6 | 	mov	local06, local07
06930     16 13 02 F6 | 	mov	arg01, local04
06934     18 15 02 F6 | 	mov	arg02, local06
06938     64 F0 B1 FD | 	call	#__system___string_cmp
0693c     FD 2E 0A F6 | 	mov	local05, result1 wz
06940     24 00 90 AD |  if_e	jmp	#LR__0553
06944     AD 01 00 FF 
06948     F3 34 06 F6 | 	mov	local08, ##@LR__5762
0694c     1A 33 02 F6 | 	mov	local07, local08
06950     16 13 02 F6 | 	mov	arg01, local04
06954     19 15 02 F6 | 	mov	arg02, local07
06958     44 F0 B1 FD | 	call	#__system___string_cmp
0695c     FD 30 0A F6 | 	mov	local06, result1 wz
06960     00 FA 05 56 |  if_ne	mov	result1, #0
06964     B8 01 90 5D |  if_ne	jmp	#LR__0564
06968                 | LR__0553
06968                 | ' if m$="$" then hex=1 else hex=0
06968     AD 01 00 FF 
0696c     F5 14 06 F6 | 	mov	arg02, ##@LR__5763
06970     16 13 02 F6 | 	mov	arg01, local04
06974     28 F0 B1 FD | 	call	#__system___string_cmp
06978     00 FA 0D F2 | 	cmp	result1, #0 wz
0697c     01 36 06 A6 |  if_e	mov	local09, #1
06980     00 36 06 56 |  if_ne	mov	local09, #0
06984                 | ' if m$="%" then bin=1 else bin=0
06984     AD 01 00 FF 
06988     F7 14 06 F6 | 	mov	arg02, ##@LR__5764
0698c     16 13 02 F6 | 	mov	arg01, local04
06990     0C F0 B1 FD | 	call	#__system___string_cmp
06994     00 FA 0D F2 | 	cmp	result1, #0 wz
06998     01 38 06 A6 |  if_e	mov	local10, #1
0699c     00 38 06 56 |  if_ne	mov	local10, #0
069a0                 | ' if l>1 then 
069a0     02 2A 56 F2 | 	cmps	local03, #2 wc
069a4     74 01 90 CD |  if_b	jmp	#LR__0563
069a8                 | '   for i=2 to l
069a8     02 3A 06 F6 | 	mov	local11, #2
069ac     15 3D 02 F6 | 	mov	local12, local03
069b0     01 3C 06 F1 | 	add	local12, #1
069b4                 | LR__0554
069b4     1E 3B 52 F2 | 	cmps	local11, local12 wc
069b8     60 01 90 3D |  if_ae	jmp	#LR__0562
069bc     13 13 02 F6 | 	mov	arg01, local01
069c0     1D 15 02 F6 | 	mov	arg02, local11
069c4     01 16 06 F6 | 	mov	arg03, #1
069c8     40 11 B2 FD | 	call	#__system__Mid_S
069cc     FD 2C 02 F6 | 	mov	local04, result1
069d0                 | '     m$=mid$(s,i,1) 
069d0                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
069d0     00 36 0E F2 | 	cmp	local09, #0 wz
069d4     50 00 90 5D |  if_ne	jmp	#LR__0556
069d8     AD 01 00 FF 
069dc     F9 14 06 F6 | 	mov	arg02, ##@LR__5765
069e0     16 13 02 F6 | 	mov	arg01, local04
069e4     B8 EF B1 FD | 	call	#__system___string_cmp
069e8     00 FA 55 F2 | 	cmps	result1, #0 wc
069ec     18 00 90 CD |  if_b	jmp	#LR__0555
069f0     AD 01 00 FF 
069f4     FB 14 06 F6 | 	mov	arg02, ##@LR__5766
069f8     16 13 02 F6 | 	mov	arg01, local04
069fc     A0 EF B1 FD | 	call	#__system___string_cmp
06a00     01 FA 55 F2 | 	cmps	result1, #1 wc
06a04     20 00 90 CD |  if_b	jmp	#LR__0556
06a08                 | LR__0555
06a08     AD 01 00 FF 
06a0c     FD 30 06 F6 | 	mov	local06, ##@LR__5767
06a10     16 13 02 F6 | 	mov	arg01, local04
06a14     18 15 02 F6 | 	mov	arg02, local06
06a18     84 EF B1 FD | 	call	#__system___string_cmp
06a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a20     00 FA 05 56 |  if_ne	mov	result1, #0
06a24     F8 00 90 5D |  if_ne	jmp	#LR__0564
06a28                 | LR__0556
06a28                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06a28     01 36 0E F2 | 	cmp	local09, #1 wz
06a2c     90 00 90 5D |  if_ne	jmp	#LR__0559
06a30     AD 01 00 FF 
06a34     FF 14 06 F6 | 	mov	arg02, ##@LR__5768
06a38     16 13 02 F6 | 	mov	arg01, local04
06a3c     60 EF B1 FD | 	call	#__system___string_cmp
06a40     00 FA 55 F2 | 	cmps	result1, #0 wc
06a44     1C 00 90 CD |  if_b	jmp	#LR__0557
06a48     AD 01 00 FF 
06a4c     01 15 06 F6 | 	mov	arg02, ##@LR__5769
06a50     16 13 02 F6 | 	mov	arg01, local04
06a54     48 EF B1 FD | 	call	#__system___string_cmp
06a58     FD 3E 02 F6 | 	mov	local13, result1
06a5c     01 3E 56 F2 | 	cmps	local13, #1 wc
06a60     5C 00 90 CD |  if_b	jmp	#LR__0559
06a64                 | LR__0557
06a64     AD 01 00 FF 
06a68     03 2F 06 F6 | 	mov	local05, ##@LR__5770
06a6c     16 13 02 F6 | 	mov	arg01, local04
06a70     17 15 02 F6 | 	mov	arg02, local05
06a74     28 EF B1 FD | 	call	#__system___string_cmp
06a78     FD 40 02 F6 | 	mov	local14, result1
06a7c     00 40 56 F2 | 	cmps	local14, #0 wc
06a80     1C 00 90 CD |  if_b	jmp	#LR__0558
06a84     AD 01 00 FF 
06a88     05 33 06 F6 | 	mov	local07, ##@LR__5771
06a8c     16 13 02 F6 | 	mov	arg01, local04
06a90     19 15 02 F6 | 	mov	arg02, local07
06a94     08 EF B1 FD | 	call	#__system___string_cmp
06a98     01 FA 55 F2 | 	cmps	result1, #1 wc
06a9c     20 00 90 CD |  if_b	jmp	#LR__0559
06aa0                 | LR__0558
06aa0     AD 01 00 FF 
06aa4     07 35 06 F6 | 	mov	local08, ##@LR__5772
06aa8     16 13 02 F6 | 	mov	arg01, local04
06aac     1A 15 02 F6 | 	mov	arg02, local08
06ab0     EC EE B1 FD | 	call	#__system___string_cmp
06ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ab8     00 FA 05 56 |  if_ne	mov	result1, #0
06abc     60 00 90 5D |  if_ne	jmp	#LR__0564
06ac0                 | LR__0559
06ac0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06ac0     01 38 0E F2 | 	cmp	local10, #1 wz
06ac4     4C 00 90 5D |  if_ne	jmp	#LR__0561
06ac8     AD 01 00 FF 
06acc     09 15 06 F6 | 	mov	arg02, ##@LR__5773
06ad0     16 13 02 F6 | 	mov	arg01, local04
06ad4     C8 EE B1 FD | 	call	#__system___string_cmp
06ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
06adc     18 00 90 CD |  if_b	jmp	#LR__0560
06ae0     AD 01 00 FF 
06ae4     0B 15 06 F6 | 	mov	arg02, ##@LR__5774
06ae8     16 13 02 F6 | 	mov	arg01, local04
06aec     B0 EE B1 FD | 	call	#__system___string_cmp
06af0     01 FA 55 F2 | 	cmps	result1, #1 wc
06af4     1C 00 90 CD |  if_b	jmp	#LR__0561
06af8                 | LR__0560
06af8     AD 01 00 FF 
06afc     0D 15 06 F6 | 	mov	arg02, ##@LR__5775
06b00     16 13 02 F6 | 	mov	arg01, local04
06b04     98 EE B1 FD | 	call	#__system___string_cmp
06b08     00 FA 0D F2 | 	cmp	result1, #0 wz
06b0c     00 FA 05 56 |  if_ne	mov	result1, #0
06b10     0C 00 90 5D |  if_ne	jmp	#LR__0564
06b14                 | LR__0561
06b14     01 3A 06 F1 | 	add	local11, #1
06b18     98 FE 9F FD | 	jmp	#LR__0554
06b1c                 | LR__0562
06b1c                 | LR__0563
06b1c                 | ' return true
06b1c     01 FA 65 F6 | 	neg	result1, #1
06b20                 | LR__0564
06b20     A7 F0 03 F6 | 	mov	ptra, fp
06b24     B2 00 A0 FD | 	call	#popregs_
06b28                 | _isint_ret
06b28     2D 00 64 FD | 	ret
06b2c                 | 
06b2c                 | ' 
06b2c                 | ' ' Check if the part is a positive decimal number.  
06b2c                 | ' 
06b2c                 | ' function isdec(s as string) as boolean
06b2c                 | _isdec
06b2c     05 4A 05 F6 | 	mov	COUNT_, #5
06b30     A8 00 A0 FD | 	call	#pushregs_
06b34     09 27 02 F6 | 	mov	local01, arg01
06b38     09 29 02 F6 | 	mov	local02, arg01
06b3c     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06b40                 | LR__0570
06b40     14 FB C9 FA | 	rdbyte	result1, local02 wz
06b44     01 28 06 51 |  if_ne	add	local02, #1
06b48     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06b4c                 | LR__0571
06b4c     09 29 82 F1 | 	sub	local02, arg01
06b50     14 FB 01 F6 | 	mov	result1, local02
06b54     FD 28 0A F6 | 	mov	local02, result1 wz
06b58     00 FA 05 A6 |  if_e	mov	result1, #0
06b5c     80 00 90 AD |  if_e	jmp	#LR__0576
06b60                 | ' for i=1 to l
06b60     01 2A 06 F6 | 	mov	local03, #1
06b64     14 2D 02 F6 | 	mov	local04, local02
06b68     01 2C 06 F1 | 	add	local04, #1
06b6c                 | LR__0572
06b6c     16 2B 52 F2 | 	cmps	local03, local04 wc
06b70     68 00 90 3D |  if_ae	jmp	#LR__0575
06b74     13 13 02 F6 | 	mov	arg01, local01
06b78     15 15 02 F6 | 	mov	arg02, local03
06b7c     01 16 06 F6 | 	mov	arg03, #1
06b80     88 0F B2 FD | 	call	#__system__Mid_S
06b84     FD 2E 02 F6 | 	mov	local05, result1
06b88                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06b88     AD 01 00 FF 
06b8c     0F 15 06 F6 | 	mov	arg02, ##@LR__5776
06b90     17 13 02 F6 | 	mov	arg01, local05
06b94     08 EE B1 FD | 	call	#__system___string_cmp
06b98     00 FA 55 F2 | 	cmps	result1, #0 wc
06b9c     18 00 90 CD |  if_b	jmp	#LR__0573
06ba0     AD 01 00 FF 
06ba4     11 15 06 F6 | 	mov	arg02, ##@LR__5777
06ba8     17 13 02 F6 | 	mov	arg01, local05
06bac     F0 ED B1 FD | 	call	#__system___string_cmp
06bb0     01 FA 55 F2 | 	cmps	result1, #1 wc
06bb4     1C 00 90 CD |  if_b	jmp	#LR__0574
06bb8                 | LR__0573
06bb8     AD 01 00 FF 
06bbc     13 15 06 F6 | 	mov	arg02, ##@LR__5778
06bc0     17 13 02 F6 | 	mov	arg01, local05
06bc4     D8 ED B1 FD | 	call	#__system___string_cmp
06bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bcc     00 FA 05 56 |  if_ne	mov	result1, #0
06bd0     0C 00 90 5D |  if_ne	jmp	#LR__0576
06bd4                 | LR__0574
06bd4     01 2A 06 F1 | 	add	local03, #1
06bd8     90 FF 9F FD | 	jmp	#LR__0572
06bdc                 | LR__0575
06bdc                 | ' return true
06bdc     01 FA 65 F6 | 	neg	result1, #1
06be0                 | LR__0576
06be0     A7 F0 03 F6 | 	mov	ptra, fp
06be4     B2 00 A0 FD | 	call	#popregs_
06be8                 | _isdec_ret
06be8     2D 00 64 FD | 	ret
06bec                 | 
06bec                 | ' 
06bec                 | ' ' Check if the part is a string.  
06bec                 | ' 
06bec                 | ' function isstring(s as string) as boolean
06bec                 | _isstring
06bec     01 4A 05 F6 | 	mov	COUNT_, #1
06bf0     A8 00 A0 FD | 	call	#pushregs_
06bf4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06bf4     09 27 02 F6 | 	mov	local01, arg01
06bf8     01 14 06 F6 | 	mov	arg02, #1
06bfc     F4 0D B2 FD | 	call	#__system__Left_S
06c00     FD 12 02 F6 | 	mov	arg01, result1
06c04     AD 01 00 FF 
06c08     15 15 06 F6 | 	mov	arg02, ##@LR__5779
06c0c     90 ED B1 FD | 	call	#__system___string_cmp
06c10     00 FA 4D F2 | 	cmps	result1, #0 wz
06c14     28 00 90 5D |  if_ne	jmp	#LR__0580
06c18     13 13 02 F6 | 	mov	arg01, local01
06c1c     01 14 06 F6 | 	mov	arg02, #1
06c20     58 0E B2 FD | 	call	#__system__Right_S
06c24     FD 12 02 F6 | 	mov	arg01, result1
06c28     AD 01 00 FF 
06c2c     17 15 06 F6 | 	mov	arg02, ##@LR__5780
06c30     6C ED B1 FD | 	call	#__system___string_cmp
06c34     00 FA 4D F2 | 	cmps	result1, #0 wz
06c38     01 FA 65 A6 |  if_e	neg	result1, #1
06c3c     04 00 90 AD |  if_e	jmp	#LR__0581
06c40                 | LR__0580
06c40     00 FA 05 F6 | 	mov	result1, #0
06c44                 | LR__0581
06c44     A7 F0 03 F6 | 	mov	ptra, fp
06c48     B2 00 A0 FD | 	call	#popregs_
06c4c                 | _isstring_ret
06c4c     2D 00 64 FD | 	ret
06c50                 | 
06c50                 | ' 
06c50                 | ' ' getnoteval. Returns the frequency of note token
06c50                 | ' 
06c50                 | ' function getnoteval(token) as single
06c50                 | _getnoteval
06c50     02 4A 05 F6 | 	mov	COUNT_, #2
06c54     A8 00 A0 FD | 	call	#pushregs_
06c58     01 00 00 FF 
06c5c     00 13 86 F1 | 	sub	arg01, ##768
06c60     09 15 52 F6 | 	abs	arg02, arg01 wc
06c64     0C 14 16 FD | 	qdiv	arg02, #12
06c68     14 00 00 FF 
06c6c     D8 E4 05 F1 | 	add	objptr, ##10456
06c70     19 14 62 FD | 	getqy	arg02
06c74     0A 15 82 F6 | 	negc	arg02, arg02
06c78     02 14 66 F0 | 	shl	arg02, #2
06c7c     F2 14 02 F1 | 	add	arg02, objptr
06c80     0A 27 02 FB | 	rdlong	local01, arg02
06c84     09 15 52 F6 | 	abs	arg02, arg01 wc
06c88     0C 14 16 FD | 	qdiv	arg02, #12
06c8c     14 00 00 FF 
06c90     D8 E4 85 F1 | 	sub	objptr, ##10456
06c94     01 12 06 F6 | 	mov	arg01, #1
06c98                 | ' noteexp=1+(note/12) 
06c98                 | ' return (2.0^noteexp)*notebase
06c98     18 14 62 FD | 	getqx	arg02
06c9c     0A 13 82 F3 | 	sumc	arg01, arg02
06ca0     09 13 52 F6 | 	abs	arg01, arg01 wc
06ca4     1F 28 C6 C9 |  if_b	decod	local02, #31
06ca8     00 28 06 36 |  if_ae	mov	local02, #0
06cac     3C 17 B2 FD | 	call	#__system___float_fromuns
06cb0     14 FB 61 F5 | 	xor	result1, local02
06cb4     FD 14 02 F6 | 	mov	arg02, result1
06cb8     1E 12 C6 F9 | 	decod	arg01, #30
06cbc     38 2A B2 FD | 	call	#__system____builtin_powf
06cc0     FD 12 02 F6 | 	mov	arg01, result1
06cc4     13 15 02 F6 | 	mov	arg02, local01
06cc8     24 1B B2 FD | 	call	#__system___float_mul
06ccc     A7 F0 03 F6 | 	mov	ptra, fp
06cd0     B2 00 A0 FD | 	call	#popregs_
06cd4                 | _getnoteval_ret
06cd4     2D 00 64 FD | 	ret
06cd8                 | 
06cd8                 | ' 
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' 
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' '
06cd8                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06cd8                 | ' '
06cd8                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06cd8                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06cd8                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06cd8                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06cd8                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06cd8                 | ' ' 
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' 
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' ' Helper functions to manage program lines
06cd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06cd8                 | ' 
06cd8                 | ' '----- delete a line from a program
06cd8                 | ' 
06cd8                 | ' function deleteline(aline as ulong) as integer
06cd8                 | _deleteline
06cd8     02 4A 05 F6 | 	mov	COUNT_, #2
06cdc     A8 00 A0 FD | 	call	#pushregs_
06ce0     2C F0 07 F1 | 	add	ptra, #44
06ce4     04 4E 05 F1 | 	add	fp, #4
06ce8     A7 12 62 FC | 	wrlong	arg01, fp
06cec     4A 00 00 FF 
06cf0     88 E4 05 F1 | 	add	objptr, ##38024
06cf4     F2 26 02 FB | 	rdlong	local01, objptr
06cf8     0C 4E 05 F1 | 	add	fp, #12
06cfc     A7 26 62 FC | 	wrlong	local01, fp
06d00     10 4E 85 F1 | 	sub	fp, #16
06d04                 | ' 
06d04                 | ' searchptr=programstart
06d04                 | ' do
06d04     3E 00 00 FF 
06d08     BC E5 85 F1 | 	sub	objptr, ##32188
06d0c                 | LR__0590
06d0c     14 4E 05 F1 | 	add	fp, #20
06d10     A7 12 02 F6 | 	mov	arg01, fp
06d14     04 4E 85 F1 | 	sub	fp, #4
06d18     A7 14 02 FB | 	rdlong	arg02, fp
06d1c     10 4E 85 F1 | 	sub	fp, #16
06d20     18 16 06 F6 | 	mov	arg03, #24
06d24     C8 DF B1 FD | 	call	#_psram_spin2_read1
06d28     10 4E 05 F1 | 	add	fp, #16
06d2c     A7 26 02 FB | 	rdlong	local01, fp
06d30     08 4E 85 F1 | 	sub	fp, #8
06d34     A7 26 62 FC | 	wrlong	local01, fp
06d38     20 4E 05 F1 | 	add	fp, #32
06d3c     A7 26 02 FB | 	rdlong	local01, fp
06d40     18 4E 85 F1 | 	sub	fp, #24
06d44     A7 26 62 FC | 	wrlong	local01, fp
06d48     04 4E 05 F1 | 	add	fp, #4
06d4c     A7 26 02 FB | 	rdlong	local01, fp
06d50     10 4E 85 F1 | 	sub	fp, #16
06d54     A7 16 02 FB | 	rdlong	arg03, fp
06d58     04 4E 85 F1 | 	sub	fp, #4
06d5c     0B 27 12 F2 | 	cmp	local01, arg03 wc
06d60     28 4E 05 C1 |  if_b	add	fp, #40
06d64     A7 28 02 CB |  if_b	rdlong	local02, fp
06d68     28 4E 85 C1 |  if_b	sub	fp, #40
06d6c     FF FF 3F CF 
06d70     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06d74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0590
06d78     0B 00 00 FF 
06d7c     CC E4 85 F1 | 	sub	objptr, ##5836
06d80                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06d80     14 4E 05 F1 | 	add	fp, #20
06d84     A7 26 02 FB | 	rdlong	local01, fp
06d88     10 4E 85 F1 | 	sub	fp, #16
06d8c     A7 28 02 FB | 	rdlong	local02, fp
06d90     04 4E 85 F1 | 	sub	fp, #4
06d94     14 27 0A F2 | 	cmp	local01, local02 wz
06d98     01 FA 65 56 |  if_ne	neg	result1, #1
06d9c     34 02 90 5D |  if_ne	jmp	#LR__0595
06da0     08 4E 05 F1 | 	add	fp, #8
06da4     A7 12 02 FB | 	rdlong	arg01, fp
06da8     08 4E 85 F1 | 	sub	fp, #8
06dac     01 14 66 F6 | 	neg	arg02, #1
06db0     78 B3 B1 FD | 	call	#_pslpoke
06db4                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06db4                 | ' 
06db4                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06db4     28 4E 05 F1 | 	add	fp, #40
06db8     A7 26 02 FB | 	rdlong	local01, fp
06dbc     28 4E 85 F1 | 	sub	fp, #40
06dc0     FF FF 3F FF 
06dc4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06dc8     24 4E 05 A1 |  if_e	add	fp, #36
06dcc     A7 28 02 AB |  if_e	rdlong	local02, fp
06dd0     24 4E 85 A1 |  if_e	sub	fp, #36
06dd4     FF FF 7F AF 
06dd8     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06ddc     88 00 90 5D |  if_ne	jmp	#LR__0591
06de0     4A 00 00 FF 
06de4     88 E4 05 F1 | 	add	objptr, ##38024
06de8     00 04 80 FF 
06dec     F2 00 68 FC | 	wrlong	##524288, objptr
06df0     07 00 00 FF 
06df4     2C E4 85 F1 | 	sub	objptr, ##3628
06df8     00 04 80 FF 
06dfc     F2 00 68 FC | 	wrlong	##524288, objptr
06e00     07 00 00 FF 
06e04     30 E4 05 F1 | 	add	objptr, ##3632
06e08     F2 00 68 FC | 	wrlong	#0, objptr
06e0c     04 E4 05 F1 | 	add	objptr, #4
06e10     FF FF FF FF 
06e14     F2 FE 6B FC | 	wrlong	##-1, objptr
06e18     4A 00 00 FF 
06e1c     90 E4 85 F1 | 	sub	objptr, ##38032
06e20     00 12 06 F6 | 	mov	arg01, #0
06e24     01 14 66 F6 | 	neg	arg02, #1
06e28     00 B3 B1 FD | 	call	#_pslpoke
06e2c     10 12 06 F6 | 	mov	arg01, #16
06e30     01 14 66 F6 | 	neg	arg02, #1
06e34     F4 B2 B1 FD | 	call	#_pslpoke
06e38     14 12 06 F6 | 	mov	arg01, #20
06e3c     1E 14 CE F9 | 	bmask	arg02, #30
06e40     E8 B2 B1 FD | 	call	#_pslpoke
06e44     50 00 00 FF 
06e48     B8 E4 05 F1 | 	add	objptr, ##41144
06e4c     00 04 80 FF 
06e50     F2 00 68 FC | 	wrlong	##524288, objptr
06e54     04 E4 05 F1 | 	add	objptr, #4
06e58     00 04 80 FF 
06e5c     F2 00 68 FC | 	wrlong	##524288, objptr
06e60     50 00 00 FF 
06e64     BC E4 85 F1 | 	sub	objptr, ##41148
06e68                 | LR__0591
06e68                 | ' 
06e68                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06e68     28 4E 05 F1 | 	add	fp, #40
06e6c     A7 26 02 FB | 	rdlong	local01, fp
06e70     28 4E 85 F1 | 	sub	fp, #40
06e74     FF FF 3F FF 
06e78     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e7c     74 00 90 5D |  if_ne	jmp	#LR__0592
06e80     24 4E 05 F1 | 	add	fp, #36
06e84     A7 28 02 FB | 	rdlong	local02, fp
06e88     24 4E 85 F1 | 	sub	fp, #36
06e8c     FF FF 7F FF 
06e90     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06e94     5C 00 90 AD |  if_e	jmp	#LR__0592
06e98     24 4E 05 F1 | 	add	fp, #36
06e9c     A7 12 02 FB | 	rdlong	arg01, fp
06ea0     24 4E 85 F1 | 	sub	fp, #36
06ea4     14 12 06 F1 | 	add	arg01, #20
06ea8     1E 14 CE F9 | 	bmask	arg02, #30
06eac     7C B2 B1 FD | 	call	#_pslpoke
06eb0     24 4E 05 F1 | 	add	fp, #36
06eb4     A7 26 02 FB | 	rdlong	local01, fp
06eb8     4A 00 00 FF 
06ebc     90 E4 05 F1 | 	add	objptr, ##38032
06ec0     F2 26 62 FC | 	wrlong	local01, objptr
06ec4     4A 00 00 FF 
06ec8     90 E4 85 F1 | 	sub	objptr, ##38032
06ecc     A7 12 02 FB | 	rdlong	arg01, fp
06ed0     24 4E 85 F1 | 	sub	fp, #36
06ed4     84 B3 B1 FD | 	call	#_pslpeek
06ed8     4A 00 00 FF 
06edc     8C E4 05 F1 | 	add	objptr, ##38028
06ee0     F2 FA 61 FC | 	wrlong	result1, objptr
06ee4     4A 00 00 FF 
06ee8     8C E4 85 F1 | 	sub	objptr, ##38028
06eec                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06eec                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06eec                 | '   lastline=pslpeek(header(4))
06eec                 | '   return 0
06eec     00 FA 05 F6 | 	mov	result1, #0
06ef0     E0 00 90 FD | 	jmp	#LR__0595
06ef4                 | LR__0592
06ef4                 | ' 
06ef4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06ef4     28 4E 05 F1 | 	add	fp, #40
06ef8     A7 26 02 FB | 	rdlong	local01, fp
06efc     28 4E 85 F1 | 	sub	fp, #40
06f00     FF FF 3F FF 
06f04     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06f08     58 00 90 AD |  if_e	jmp	#LR__0593
06f0c     24 4E 05 F1 | 	add	fp, #36
06f10     A7 28 02 FB | 	rdlong	local02, fp
06f14     24 4E 85 F1 | 	sub	fp, #36
06f18     FF FF 7F FF 
06f1c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06f20     40 00 90 5D |  if_ne	jmp	#LR__0593
06f24     28 4E 05 F1 | 	add	fp, #40
06f28     A7 12 02 FB | 	rdlong	arg01, fp
06f2c     28 4E 85 F1 | 	sub	fp, #40
06f30     10 12 06 F1 | 	add	arg01, #16
06f34     01 14 66 F6 | 	neg	arg02, #1
06f38     F0 B1 B1 FD | 	call	#_pslpoke
06f3c     28 4E 05 F1 | 	add	fp, #40
06f40     A7 26 02 FB | 	rdlong	local01, fp
06f44     28 4E 85 F1 | 	sub	fp, #40
06f48     4A 00 00 FF 
06f4c     88 E4 05 F1 | 	add	objptr, ##38024
06f50     F2 26 62 FC | 	wrlong	local01, objptr
06f54     4A 00 00 FF 
06f58     88 E4 85 F1 | 	sub	objptr, ##38024
06f5c                 | ' '   print "deleted first line"
06f5c                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06f5c                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06f5c                 | '   return 0
06f5c     00 FA 05 F6 | 	mov	result1, #0
06f60     70 00 90 FD | 	jmp	#LR__0595
06f64                 | LR__0593
06f64                 | ' 
06f64                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06f64     28 4E 05 F1 | 	add	fp, #40
06f68     A7 26 02 FB | 	rdlong	local01, fp
06f6c     28 4E 85 F1 | 	sub	fp, #40
06f70     FF FF 3F FF 
06f74     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06f78     24 4E 05 51 |  if_ne	add	fp, #36
06f7c     A7 28 02 5B |  if_ne	rdlong	local02, fp
06f80     24 4E 85 51 |  if_ne	sub	fp, #36
06f84     FF FF 7F 5F 
06f88     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
06f8c     40 00 90 AD |  if_e	jmp	#LR__0594
06f90     28 4E 05 F1 | 	add	fp, #40
06f94     A7 12 02 FB | 	rdlong	arg01, fp
06f98     10 12 06 F1 | 	add	arg01, #16
06f9c     04 4E 85 F1 | 	sub	fp, #4
06fa0     A7 14 02 FB | 	rdlong	arg02, fp
06fa4     24 4E 85 F1 | 	sub	fp, #36
06fa8     80 B1 B1 FD | 	call	#_pslpoke
06fac     24 4E 05 F1 | 	add	fp, #36
06fb0     A7 12 02 FB | 	rdlong	arg01, fp
06fb4     14 12 06 F1 | 	add	arg01, #20
06fb8     04 4E 05 F1 | 	add	fp, #4
06fbc     A7 14 02 FB | 	rdlong	arg02, fp
06fc0     28 4E 85 F1 | 	sub	fp, #40
06fc4     64 B1 B1 FD | 	call	#_pslpoke
06fc8                 | '    pslpoke(header(5)+16,header(4))  
06fc8                 | '    pslpoke(header(4)+20, header(5))
06fc8                 | '    return 0
06fc8     00 FA 05 F6 | 	mov	result1, #0
06fcc     04 00 90 FD | 	jmp	#LR__0595
06fd0                 | LR__0594
06fd0     00 FA 05 F6 | 	mov	result1, #0
06fd4                 | LR__0595
06fd4     A7 F0 03 F6 | 	mov	ptra, fp
06fd8     B2 00 A0 FD | 	call	#popregs_
06fdc                 | _deleteline_ret
06fdc     2D 00 64 FD | 	ret
06fe0                 | 
06fe0                 | ' 
06fe0                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06fe0                 | ' 
06fe0                 | ' sub save_line
06fe0                 | _save_line
06fe0     03 4A 05 F6 | 	mov	COUNT_, #3
06fe4     A8 00 A0 FD | 	call	#pushregs_
06fe8     4A 00 00 FF 
06fec     7C E4 05 F1 | 	add	objptr, ##38012
06ff0     F2 16 02 FB | 	rdlong	arg03, objptr
06ff4     01 16 06 F1 | 	add	arg03, #1
06ff8     05 00 00 FF 
06ffc     18 E4 85 F1 | 	sub	objptr, ##2584
07000     F2 14 02 FB | 	rdlong	arg02, objptr
07004     0B 15 02 FD | 	qmul	arg02, arg03
07008     0E 00 00 FF 
0700c     44 E4 85 F1 | 	sub	objptr, ##7236
07010     F2 12 02 FB | 	rdlong	arg01, objptr
07014     37 00 00 FF 
07018     20 E4 85 F1 | 	sub	objptr, ##28192
0701c     09 27 02 F6 | 	mov	local01, arg01
07020     18 28 62 FD | 	getqx	local02
07024     97 06 48 FB | 	callpa	#(@LR__0601-@LR__0600)>>2,fcache_load_ptr_
07028                 | LR__0600
07028     13 FB C9 FA | 	rdbyte	result1, local01 wz
0702c     01 26 06 51 |  if_ne	add	local01, #1
07030     F4 FF 9F 5D |  if_ne	jmp	#LR__0600
07034                 | LR__0601
07034     09 27 82 F1 | 	sub	local01, arg01
07038     03 26 CE F7 | 	test	local01, #3 wz
0703c     02 26 46 50 |  if_ne	shr	local01, #2
07040     01 26 06 51 |  if_ne	add	local01, #1
07044     02 26 66 50 |  if_ne	shl	local01, #2
07048     14 2B 02 F6 | 	mov	local03, local02
0704c     13 2B 02 F1 | 	add	local03, local01
07050     43 00 00 FF 
07054     5C E4 05 F1 | 	add	objptr, ##34396
07058     F2 16 02 FB | 	rdlong	arg03, objptr
0705c     14 17 02 F1 | 	add	arg03, local02
07060     04 00 00 FF 
07064     28 E4 05 F1 | 	add	objptr, ##2088
07068     F2 16 62 FC | 	wrlong	arg03, objptr
0706c     04 E4 05 F1 | 	add	objptr, #4
07070     F2 26 62 FC | 	wrlong	local01, objptr
07074     0C E4 85 F1 | 	sub	objptr, #12
07078     F2 12 02 F6 | 	mov	arg01, objptr
0707c     04 00 00 FF 
07080     20 E4 85 F1 | 	sub	objptr, ##2080
07084     F2 14 02 FB | 	rdlong	arg02, objptr
07088     14 17 02 F6 | 	mov	arg03, local02
0708c     37 00 00 FF 
07090     90 E5 85 F1 | 	sub	objptr, ##28560
07094     F4 DC B1 FD | 	call	#_psram_spin2_write
07098     2B 00 00 FF 
0709c     54 E5 05 F1 | 	add	objptr, ##22356
070a0     F2 12 02 FB | 	rdlong	arg01, objptr
070a4     0C 00 00 FF 
070a8     3C E4 05 F1 | 	add	objptr, ##6204
070ac     F2 14 02 FB | 	rdlong	arg02, objptr
070b0     14 15 02 F1 | 	add	arg02, local02
070b4     13 17 02 F6 | 	mov	arg03, local01
070b8     37 00 00 FF 
070bc     90 E5 85 F1 | 	sub	objptr, ##28560
070c0     C8 DC B1 FD | 	call	#_psram_spin2_write
070c4     37 00 00 FF 
070c8     90 E5 05 F1 | 	add	objptr, ##28560
070cc     F2 26 02 FB | 	rdlong	local01, objptr
070d0     15 27 02 F1 | 	add	local01, local03
070d4     F2 26 62 FC | 	wrlong	local01, objptr
070d8     43 00 00 FF 
070dc     5C E4 85 F1 | 	sub	objptr, ##34396
070e0     A7 F0 03 F6 | 	mov	ptra, fp
070e4     B2 00 A0 FD | 	call	#popregs_
070e8                 | _save_line_ret
070e8     2D 00 64 FD | 	ret
070ec                 | 
070ec                 | ' 
070ec                 | ' '----- Insert a new line into the middle of the program
070ec                 | ' 
070ec                 | ' function insertline(aline as ulong) as integer
070ec                 | _insertline
070ec     02 4A 05 F6 | 	mov	COUNT_, #2
070f0     A8 00 A0 FD | 	call	#pushregs_
070f4     28 F0 07 F1 | 	add	ptra, #40
070f8     04 4E 05 F1 | 	add	fp, #4
070fc     A7 12 62 FC | 	wrlong	arg01, fp
07100     4A 00 00 FF 
07104     88 E4 05 F1 | 	add	objptr, ##38024
07108     F2 26 02 FB | 	rdlong	local01, objptr
0710c     04 4E 05 F1 | 	add	fp, #4
07110     A7 26 62 FC | 	wrlong	local01, fp
07114     08 4E 85 F1 | 	sub	fp, #8
07118                 | ' 
07118                 | ' do
07118     3E 00 00 FF 
0711c     BC E5 85 F1 | 	sub	objptr, ##32188
07120                 | LR__0610
07120     10 4E 05 F1 | 	add	fp, #16
07124     A7 12 02 F6 | 	mov	arg01, fp
07128     08 4E 85 F1 | 	sub	fp, #8
0712c     A7 14 02 FB | 	rdlong	arg02, fp
07130     08 4E 85 F1 | 	sub	fp, #8
07134     18 16 06 F6 | 	mov	arg03, #24
07138     B4 DB B1 FD | 	call	#_psram_spin2_read1
0713c     08 4E 05 F1 | 	add	fp, #8
07140     A7 26 02 FB | 	rdlong	local01, fp
07144     04 4E 05 F1 | 	add	fp, #4
07148     A7 26 62 FC | 	wrlong	local01, fp
0714c     18 4E 05 F1 | 	add	fp, #24
07150     A7 26 02 FB | 	rdlong	local01, fp
07154     1C 4E 85 F1 | 	sub	fp, #28
07158     A7 26 62 FC | 	wrlong	local01, fp
0715c     08 4E 05 F1 | 	add	fp, #8
07160     A7 26 02 FB | 	rdlong	local01, fp
07164     0C 4E 85 F1 | 	sub	fp, #12
07168     A7 16 02 FB | 	rdlong	arg03, fp
0716c     04 4E 85 F1 | 	sub	fp, #4
07170     0B 27 12 F2 | 	cmp	local01, arg03 wc
07174     24 4E 05 C1 |  if_b	add	fp, #36
07178     A7 28 02 CB |  if_b	rdlong	local02, fp
0717c     24 4E 85 C1 |  if_b	sub	fp, #36
07180     FF FF 3F CF 
07184     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07188     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0610
0718c     0B 00 00 FF 
07190     CC E4 85 F1 | 	sub	objptr, ##5836
07194                 | ' 
07194                 | ' if header(0)=aline then return -1 				' delete it first
07194     10 4E 05 F1 | 	add	fp, #16
07198     A7 26 02 FB | 	rdlong	local01, fp
0719c     0C 4E 85 F1 | 	sub	fp, #12
071a0     A7 28 02 FB | 	rdlong	local02, fp
071a4     04 4E 85 F1 | 	sub	fp, #4
071a8     14 27 0A F2 | 	cmp	local01, local02 wz
071ac     01 FA 65 A6 |  if_e	neg	result1, #1
071b0     48 01 90 AD |  if_e	jmp	#LR__0613
071b4                 | ' if header(0)<aline then return -2 				' end of program reached
071b4     10 4E 05 F1 | 	add	fp, #16
071b8     A7 26 02 FB | 	rdlong	local01, fp
071bc     0C 4E 85 F1 | 	sub	fp, #12
071c0     A7 16 02 FB | 	rdlong	arg03, fp
071c4     04 4E 85 F1 | 	sub	fp, #4
071c8     0B 27 12 F2 | 	cmp	local01, arg03 wc
071cc     02 FA 65 C6 |  if_b	neg	result1, #2
071d0     28 01 90 CD |  if_b	jmp	#LR__0613
071d4                 | ' 
071d4                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
071d4     20 4E 05 F1 | 	add	fp, #32
071d8     A7 26 02 FB | 	rdlong	local01, fp
071dc     20 4E 85 F1 | 	sub	fp, #32
071e0     FF FF 7F FF 
071e4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
071e8     78 00 90 5D |  if_ne	jmp	#LR__0611
071ec     43 00 00 FF 
071f0     5C E4 05 F1 | 	add	objptr, ##34396
071f4     F2 26 02 FB | 	rdlong	local01, objptr
071f8     07 00 00 FF 
071fc     2C E4 05 F1 | 	add	objptr, ##3628
07200     F2 26 62 FC | 	wrlong	local01, objptr
07204     0C 4E 05 F1 | 	add	fp, #12
07208     A7 12 02 FB | 	rdlong	arg01, fp
0720c     0C 4E 85 F1 | 	sub	fp, #12
07210     10 12 06 F1 | 	add	arg01, #16
07214     07 00 00 FF 
07218     2C E4 85 F1 | 	sub	objptr, ##3628
0721c     F2 14 02 FB | 	rdlong	arg02, objptr
07220     43 00 00 FF 
07224     5C E4 85 F1 | 	sub	objptr, ##34396
07228     00 AF B1 FD | 	call	#_pslpoke
0722c     47 00 00 FF 
07230     8C E4 05 F1 | 	add	objptr, ##36492
07234     FF FF FF FF 
07238     F2 FE 6B FC | 	wrlong	##-1, objptr
0723c     0C 4E 05 F1 | 	add	fp, #12
07240     A7 26 02 FB | 	rdlong	local01, fp
07244     0C 4E 85 F1 | 	sub	fp, #12
07248     04 E4 05 F1 | 	add	objptr, #4
0724c     F2 26 62 FC | 	wrlong	local01, objptr
07250     47 00 00 FF 
07254     90 E4 85 F1 | 	sub	objptr, ##36496
07258     84 FD BF FD | 	call	#_save_line
0725c                 | '   programstart=programptr
0725c                 | '   pslpoke(lineptr2+16,programptr)
0725c                 | '   ucompiledline(4)=$FFFF_FFFF
0725c                 | '   ucompiledline(5)=lineptr2
0725c                 | '   save_line
0725c                 | '   return 0
0725c     00 FA 05 F6 | 	mov	result1, #0
07260     98 00 90 FD | 	jmp	#LR__0613
07264                 | LR__0611
07264                 | ' 
07264                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07264     20 4E 05 F1 | 	add	fp, #32
07268     A7 26 02 FB | 	rdlong	local01, fp
0726c     20 4E 85 F1 | 	sub	fp, #32
07270     FF FF 7F FF 
07274     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07278     7C 00 90 AD |  if_e	jmp	#LR__0612
0727c     20 4E 05 F1 | 	add	fp, #32
07280     A7 26 02 FB | 	rdlong	local01, fp
07284     47 00 00 FF 
07288     8C E4 05 F1 | 	add	objptr, ##36492
0728c     F2 26 62 FC | 	wrlong	local01, objptr
07290     14 4E 85 F1 | 	sub	fp, #20
07294     A7 26 02 FB | 	rdlong	local01, fp
07298     04 E4 05 F1 | 	add	objptr, #4
0729c     F2 26 62 FC | 	wrlong	local01, objptr
072a0     A7 12 02 FB | 	rdlong	arg01, fp
072a4     0C 4E 85 F1 | 	sub	fp, #12
072a8     10 12 06 F1 | 	add	arg01, #16
072ac     04 00 00 FF 
072b0     34 E4 85 F1 | 	sub	objptr, ##2100
072b4     F2 14 02 FB | 	rdlong	arg02, objptr
072b8     43 00 00 FF 
072bc     5C E4 85 F1 | 	sub	objptr, ##34396
072c0     68 AE B1 FD | 	call	#_pslpoke
072c4     20 4E 05 F1 | 	add	fp, #32
072c8     A7 12 02 FB | 	rdlong	arg01, fp
072cc     20 4E 85 F1 | 	sub	fp, #32
072d0     14 12 06 F1 | 	add	arg01, #20
072d4     43 00 00 FF 
072d8     5C E4 05 F1 | 	add	objptr, ##34396
072dc     F2 14 02 FB | 	rdlong	arg02, objptr
072e0     43 00 00 FF 
072e4     5C E4 85 F1 | 	sub	objptr, ##34396
072e8     40 AE B1 FD | 	call	#_pslpoke
072ec     F0 FC BF FD | 	call	#_save_line
072f0                 | '   ucompiledline(4)=header(4)
072f0                 | '   ucompiledline(5)=lineptr2
072f0                 | '   pslpoke(lineptr2+16,programptr)
072f0                 | '   pslpoke(header(4)+20,programptr)
072f0                 | '   save_line
072f0                 | '   return 0
072f0     00 FA 05 F6 | 	mov	result1, #0
072f4     04 00 90 FD | 	jmp	#LR__0613
072f8                 | LR__0612
072f8     00 FA 05 F6 | 	mov	result1, #0
072fc                 | LR__0613
072fc     A7 F0 03 F6 | 	mov	ptra, fp
07300     B2 00 A0 FD | 	call	#popregs_
07304                 | _insertline_ret
07304     2D 00 64 FD | 	ret
07308                 | 
07308                 | ' 
07308                 | ' '----- Adds a new line at the end of the program
07308                 | ' 
07308                 | ' sub add_line_at_end(aline) 
07308                 | _add_line_at_end
07308     4A 00 00 FF 
0730c     8C E4 05 F1 | 	add	objptr, ##38028
07310     F2 12 62 FC | 	wrlong	arg01, objptr
07314     04 E4 05 F1 | 	add	objptr, #4
07318     F2 14 02 FB | 	rdlong	arg02, objptr
0731c     03 00 00 FF 
07320     04 E4 85 F1 | 	sub	objptr, ##1540
07324     F2 14 62 FC | 	wrlong	arg02, objptr
07328     03 00 00 FF 
0732c     04 E4 05 F1 | 	add	objptr, ##1540
07330     F2 12 02 FB | 	rdlong	arg01, objptr
07334     14 12 06 F1 | 	add	arg01, #20
07338     07 00 00 FF 
0733c     34 E4 85 F1 | 	sub	objptr, ##3636
07340     F2 14 02 FB | 	rdlong	arg02, objptr
07344     43 00 00 FF 
07348     5C E4 85 F1 | 	sub	objptr, ##34396
0734c     DC AD B1 FD | 	call	#_pslpoke
07350     43 00 00 FF 
07354     5C E4 05 F1 | 	add	objptr, ##34396
07358     F2 14 02 FB | 	rdlong	arg02, objptr
0735c     07 00 00 FF 
07360     34 E4 05 F1 | 	add	objptr, ##3636
07364     F2 14 62 FC | 	wrlong	arg02, objptr
07368     03 00 00 FF 
0736c     00 E4 85 F1 | 	sub	objptr, ##1536
07370     FF FF BF FF 
07374     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07378                 | ' 
07378                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07378                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07378     04 00 00 FF 
0737c     34 E4 85 F1 | 	sub	objptr, ##2100
07380     F2 14 02 FB | 	rdlong	arg02, objptr
07384     43 00 00 FF 
07388     5C E4 85 F1 | 	sub	objptr, ##34396
0738c     00 04 00 FF 
07390     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07394     47 00 00 AF 
07398     8C E4 05 A1 |  if_e	add	objptr, ##36492
0739c     FF FF FF AF 
073a0     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
073a4     47 00 00 AF 
073a8     8C E4 85 A1 |  if_e	sub	objptr, ##36492
073ac     30 FC BF FD | 	call	#_save_line
073b0     43 00 00 FF 
073b4     5C E4 05 F1 | 	add	objptr, ##34396
073b8     F2 12 02 FB | 	rdlong	arg01, objptr
073bc     43 00 00 FF 
073c0     5C E4 85 F1 | 	sub	objptr, ##34396
073c4     01 14 66 F6 | 	neg	arg02, #1
073c8     60 AD B1 FD | 	call	#_pslpoke
073cc                 | _add_line_at_end_ret
073cc     2D 00 64 FD | 	ret
073d0                 | 
073d0                 | ' 
073d0                 | ' '--------------------------------------------------------------------------------------------------------------------------
073d0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
073d0                 | ' '--------------------------------------------------------------------------------------------------------------------------
073d0                 | ' 
073d0                 | ' '--------------------------------------------------------------------------------------------------------------------------
073d0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
073d0                 | ' '--------------------------------------------------------------------------------------------------------------------------
073d0                 | ' 
073d0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
073d0                 | ' 
073d0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
073d0                 | _compile_immediate
073d0     0A 4A 05 F6 | 	mov	COUNT_, #10
073d4     A8 00 A0 FD | 	call	#pushregs_
073d8                 | _compile_immediate_enter
073d8     09 2D 02 F6 | 	mov	local04, arg01
073dc     0A 2F 02 F6 | 	mov	local05, arg02
073e0     00 30 06 F6 | 	mov	local06, #0
073e4     00 32 06 F6 | 	mov	local07, #0
073e8     00 34 06 F6 | 	mov	local08, #0
073ec                 | ' 
073ec                 | ' ' linetype=cont+1
073ec                 | ' ' 1 : this is the first part of the line that will continue
073ec                 | ' ' 2 - this is the continuation of the line
073ec                 | ' ' 3 - this is the last continued line
073ec                 | ' ' 4 - this is the one and only part
073ec                 | ' ' 5 - continued after if/else
073ec                 | ' 
073ec                 | ' err=0
073ec                 | ' cmd=0
073ec                 | ' vars=0
073ec                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
073ec     02 2C 0E F2 | 	cmp	local04, #2 wz
073f0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
073f4     24 00 90 5D |  if_ne	jmp	#LR__0620
073f8     35 00 00 FF 
073fc     10 E4 05 F1 | 	add	objptr, ##27152
07400     F2 32 02 FB | 	rdlong	local07, objptr
07404     01 36 06 F6 | 	mov	local09, #1
07408     02 00 00 FF 
0740c     34 E4 05 F1 | 	add	objptr, ##1076
07410     F2 02 68 FC | 	wrlong	#1, objptr
07414     37 00 00 FF 
07418     44 E4 85 F1 | 	sub	objptr, ##28228
0741c                 | LR__0620
0741c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0741c     04 2C 0E F2 | 	cmp	local04, #4 wz
07420     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07424     30 00 90 5D |  if_ne	jmp	#LR__0621
07428     35 00 00 FF 
0742c     18 E4 05 F1 | 	add	objptr, ##27160
07430     F2 32 02 FB | 	rdlong	local07, objptr
07434     02 36 06 F6 | 	mov	local09, #2
07438     02 00 00 FF 
0743c     2C E4 05 F1 | 	add	objptr, ##1068
07440     F2 04 68 FC | 	wrlong	#2, objptr
07444     13 00 00 FF 
07448     38 E4 05 F1 | 	add	objptr, ##9784
0744c     F2 04 68 FC | 	wrlong	#2, objptr
07450     4A 00 00 FF 
07454     7C E4 85 F1 | 	sub	objptr, ##38012
07458                 | LR__0621
07458                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07458     05 2C 0E F2 | 	cmp	local04, #5 wz
0745c     40 00 90 5D |  if_ne	jmp	#LR__0622
07460     37 00 00 FF 
07464     44 E4 05 F1 | 	add	objptr, ##28228
07468     F2 FC 01 FB | 	rdlong	result2, objptr
0746c     FE 36 02 F6 | 	mov	local09, result2
07470     03 36 66 F0 | 	shl	local09, #3
07474     02 00 00 FF 
07478     38 E4 85 F1 | 	sub	objptr, ##1080
0747c     F2 36 02 F1 | 	add	local09, objptr
07480     04 36 06 F1 | 	add	local09, #4
07484     1B 33 02 FB | 	rdlong	local07, local09
07488     01 FC 05 F1 | 	add	result2, #1
0748c     02 00 00 FF 
07490     38 E4 05 F1 | 	add	objptr, ##1080
07494     F2 FC 61 FC | 	wrlong	result2, objptr
07498     37 00 00 FF 
0749c     44 E4 85 F1 | 	sub	objptr, ##28228
074a0                 | LR__0622
074a0                 | ' 
074a0                 | ' 'print  "In compile_immediate cmd=:", cmd
074a0                 | ' 451 select case cmd
074a0     5C 32 0E F2 | 	cmp	local07, #92 wz
074a4     C4 02 90 AD |  if_e	jmp	#LR__0623
074a8     B9 32 0E F2 | 	cmp	local07, #185 wz
074ac     C8 02 90 AD |  if_e	jmp	#LR__0624
074b0     47 32 0E F2 | 	cmp	local07, #71 wz
074b4     D0 02 90 AD |  if_e	jmp	#LR__0625
074b8     59 32 0E F2 | 	cmp	local07, #89 wz
074bc     D8 02 90 AD |  if_e	jmp	#LR__0626
074c0     C3 32 0E F2 | 	cmp	local07, #195 wz
074c4     E0 02 90 AD |  if_e	jmp	#LR__0627
074c8     45 32 0E F2 | 	cmp	local07, #69 wz
074cc     E4 02 90 AD |  if_e	jmp	#LR__0628
074d0     69 32 0E F2 | 	cmp	local07, #105 wz
074d4     EC 02 90 AD |  if_e	jmp	#LR__0629
074d8     40 32 0E F2 | 	cmp	local07, #64 wz
074dc     C4 06 90 AD |  if_e	jmp	#LR__0702
074e0     B4 32 0E F2 | 	cmp	local07, #180 wz
074e4     E8 02 90 AD |  if_e	jmp	#LR__0630
074e8     49 32 0E F2 | 	cmp	local07, #73 wz
074ec     EC 02 90 AD |  if_e	jmp	#LR__0631
074f0     50 32 0E F2 | 	cmp	local07, #80 wz
074f4     F0 02 90 AD |  if_e	jmp	#LR__0632
074f8     AE 32 0E F2 | 	cmp	local07, #174 wz
074fc     F8 02 90 AD |  if_e	jmp	#LR__0633
07500     B0 32 0E F2 | 	cmp	local07, #176 wz
07504     FC 02 90 AD |  if_e	jmp	#LR__0634
07508     AF 32 0E F2 | 	cmp	local07, #175 wz
0750c     00 03 90 AD |  if_e	jmp	#LR__0635
07510     B1 32 0E F2 | 	cmp	local07, #177 wz
07514     04 03 90 AD |  if_e	jmp	#LR__0636
07518     68 32 0E F2 | 	cmp	local07, #104 wz
0751c     08 03 90 AD |  if_e	jmp	#LR__0637
07520     B7 32 0E F2 | 	cmp	local07, #183 wz
07524     7C 06 90 AD |  if_e	jmp	#LR__0702
07528     74 32 0E F2 | 	cmp	local07, #116 wz
0752c     04 03 90 AD |  if_e	jmp	#LR__0638
07530     73 32 0E F2 | 	cmp	local07, #115 wz
07534     0C 03 90 AD |  if_e	jmp	#LR__0639
07538     6C 32 0E F2 | 	cmp	local07, #108 wz
0753c     14 03 90 AD |  if_e	jmp	#LR__0640
07540     89 32 0E F2 | 	cmp	local07, #137 wz
07544     5C 06 90 AD |  if_e	jmp	#LR__0702
07548     C2 32 0E F2 | 	cmp	local07, #194 wz
0754c     14 03 90 AD |  if_e	jmp	#LR__0641
07550     72 32 0E F2 | 	cmp	local07, #114 wz
07554     18 03 90 AD |  if_e	jmp	#LR__0642
07558     5D 32 0E F2 | 	cmp	local07, #93 wz
0755c     1C 03 90 AD |  if_e	jmp	#LR__0643
07560     96 32 0E F2 | 	cmp	local07, #150 wz
07564     24 03 90 AD |  if_e	jmp	#LR__0644
07568     43 32 0E F2 | 	cmp	local07, #67 wz
0756c     28 03 90 AD |  if_e	jmp	#LR__0645
07570     5A 32 0E F2 | 	cmp	local07, #90 wz
07574     30 03 90 AD |  if_e	jmp	#LR__0646
07578     AB 32 0E F2 | 	cmp	local07, #171 wz
0757c     24 06 90 AD |  if_e	jmp	#LR__0702
07580     BD 32 0E F2 | 	cmp	local07, #189 wz
07584     30 03 90 AD |  if_e	jmp	#LR__0647
07588     BB 32 0E F2 | 	cmp	local07, #187 wz
0758c     38 03 90 AD |  if_e	jmp	#LR__0648
07590     4E 32 0E F2 | 	cmp	local07, #78 wz
07594     40 03 90 AD |  if_e	jmp	#LR__0649
07598     A9 32 0E F2 | 	cmp	local07, #169 wz
0759c     58 03 90 AD |  if_e	jmp	#LR__0651
075a0     46 32 0E F2 | 	cmp	local07, #70 wz
075a4     70 03 90 AD |  if_e	jmp	#LR__0653
075a8     71 32 0E F2 | 	cmp	local07, #113 wz
075ac     78 03 90 AD |  if_e	jmp	#LR__0654
075b0     60 32 0E F2 | 	cmp	local07, #96 wz
075b4     7C 03 90 AD |  if_e	jmp	#LR__0655
075b8     4A 32 0E F2 | 	cmp	local07, #74 wz
075bc     80 03 90 AD |  if_e	jmp	#LR__0656
075c0     48 32 0E F2 | 	cmp	local07, #72 wz
075c4     84 03 90 AD |  if_e	jmp	#LR__0657
075c8     58 32 0E F2 | 	cmp	local07, #88 wz
075cc     8C 03 90 AD |  if_e	jmp	#LR__0658
075d0     5F 32 0E F2 | 	cmp	local07, #95 wz
075d4     94 03 90 AD |  if_e	jmp	#LR__0659
075d8     B5 32 0E F2 | 	cmp	local07, #181 wz
075dc     98 03 90 AD |  if_e	jmp	#LR__0660
075e0     8A 32 0E F2 | 	cmp	local07, #138 wz
075e4     A0 03 90 AD |  if_e	jmp	#LR__0661
075e8     4C 32 0E F2 | 	cmp	local07, #76 wz
075ec     A4 03 90 AD |  if_e	jmp	#LR__0662
075f0     52 32 0E F2 | 	cmp	local07, #82 wz
075f4     AC 03 90 AD |  if_e	jmp	#LR__0663
075f8     97 32 0E F2 | 	cmp	local07, #151 wz
075fc     B4 03 90 AD |  if_e	jmp	#LR__0664
07600     C6 32 0E F2 | 	cmp	local07, #198 wz
07604     B8 03 90 AD |  if_e	jmp	#LR__0665
07608     61 32 0E F2 | 	cmp	local07, #97 wz
0760c     BC 03 90 AD |  if_e	jmp	#LR__0666
07610     63 32 0E F2 | 	cmp	local07, #99 wz
07614     C0 03 90 AD |  if_e	jmp	#LR__0667
07618     41 32 0E F2 | 	cmp	local07, #65 wz
0761c     84 05 90 AD |  if_e	jmp	#LR__0702
07620     4B 32 0E F2 | 	cmp	local07, #75 wz
07624     BC 03 90 AD |  if_e	jmp	#LR__0668
07628     C1 32 0E F2 | 	cmp	local07, #193 wz
0762c     C0 03 90 AD |  if_e	jmp	#LR__0669
07630     B3 32 0E F2 | 	cmp	local07, #179 wz
07634     C4 03 90 AD |  if_e	jmp	#LR__0670
07638     5E 32 0E F2 | 	cmp	local07, #94 wz
0763c     C8 03 90 AD |  if_e	jmp	#LR__0671
07640     7C 32 0E F2 | 	cmp	local07, #124 wz
07644     CC 03 90 AD |  if_e	jmp	#LR__0672
07648     7D 32 0E F2 | 	cmp	local07, #125 wz
0764c     D0 03 90 AD |  if_e	jmp	#LR__0673
07650     7E 32 0E F2 | 	cmp	local07, #126 wz
07654     D4 03 90 AD |  if_e	jmp	#LR__0674
07658     7F 32 0E F2 | 	cmp	local07, #127 wz
0765c     D8 03 90 AD |  if_e	jmp	#LR__0675
07660     80 32 0E F2 | 	cmp	local07, #128 wz
07664     DC 03 90 AD |  if_e	jmp	#LR__0676
07668     55 32 0E F2 | 	cmp	local07, #85 wz
0766c     E0 03 90 AD |  if_e	jmp	#LR__0677
07670     75 32 0E F2 | 	cmp	local07, #117 wz
07674     E4 03 90 AD |  if_e	jmp	#LR__0678
07678     42 32 0E F2 | 	cmp	local07, #66 wz
0767c     EC 03 90 AD |  if_e	jmp	#LR__0679
07680     95 32 0E F2 | 	cmp	local07, #149 wz
07684     F4 03 90 AD |  if_e	jmp	#LR__0680
07688     AC 32 0E F2 | 	cmp	local07, #172 wz
0768c     14 05 90 AD |  if_e	jmp	#LR__0702
07690     81 32 0E F2 | 	cmp	local07, #129 wz
07694     F0 03 90 AD |  if_e	jmp	#LR__0681
07698     44 32 0E F2 | 	cmp	local07, #68 wz
0769c     F4 03 90 AD |  if_e	jmp	#LR__0682
076a0     BC 32 0E F2 | 	cmp	local07, #188 wz
076a4     F8 03 90 AD |  if_e	jmp	#LR__0683
076a8     88 32 0E F2 | 	cmp	local07, #136 wz
076ac     F4 04 90 AD |  if_e	jmp	#LR__0702
076b0     B6 32 0E F2 | 	cmp	local07, #182 wz
076b4     F8 03 90 AD |  if_e	jmp	#LR__0684
076b8     92 32 0E F2 | 	cmp	local07, #146 wz
076bc     00 04 90 AD |  if_e	jmp	#LR__0685
076c0     BE 32 0E F2 | 	cmp	local07, #190 wz
076c4     98 05 90 AD |  if_e	jmp	#LR__0703
076c8     C7 32 0E F2 | 	cmp	local07, #199 wz
076cc     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
076d0     D0 04 90 AD |  if_e	jmp	#LR__0702
076d4     4D 32 0E F2 | 	cmp	local07, #77 wz
076d8     F0 03 90 AD |  if_e	jmp	#LR__0686
076dc     51 32 0E F2 | 	cmp	local07, #81 wz
076e0     F8 03 90 AD |  if_e	jmp	#LR__0687
076e4     8E 32 0E F2 | 	cmp	local07, #142 wz
076e8     00 04 90 AD |  if_e	jmp	#LR__0688
076ec     90 32 0E F2 | 	cmp	local07, #144 wz
076f0     04 04 90 AD |  if_e	jmp	#LR__0689
076f4     8D 32 0E F2 | 	cmp	local07, #141 wz
076f8     08 04 90 AD |  if_e	jmp	#LR__0690
076fc     8C 32 0E F2 | 	cmp	local07, #140 wz
07700     0C 04 90 AD |  if_e	jmp	#LR__0691
07704     91 32 0E F2 | 	cmp	local07, #145 wz
07708     10 04 90 AD |  if_e	jmp	#LR__0692
0770c     8B 32 0E F2 | 	cmp	local07, #139 wz
07710     14 04 90 AD |  if_e	jmp	#LR__0693
07714     8F 32 0E F2 | 	cmp	local07, #143 wz
07718     18 04 90 AD |  if_e	jmp	#LR__0694
0771c     B2 32 0E F2 | 	cmp	local07, #178 wz
07720     1C 04 90 AD |  if_e	jmp	#LR__0695
07724     6D 32 0E F2 | 	cmp	local07, #109 wz
07728     24 04 90 AD |  if_e	jmp	#LR__0696
0772c     70 32 0E F2 | 	cmp	local07, #112 wz
07730     70 04 90 AD |  if_e	jmp	#LR__0702
07734     56 32 0E F2 | 	cmp	local07, #86 wz
07738     20 04 90 AD |  if_e	jmp	#LR__0697
0773c     57 32 0E F2 | 	cmp	local07, #87 wz
07740     60 04 90 AD |  if_e	jmp	#LR__0702
07744     79 32 0E F2 | 	cmp	local07, #121 wz
07748     1C 04 90 AD |  if_e	jmp	#LR__0698
0774c     77 32 0E F2 | 	cmp	local07, #119 wz
07750     20 04 90 AD |  if_e	jmp	#LR__0699
07754     78 32 0E F2 | 	cmp	local07, #120 wz
07758     24 04 90 AD |  if_e	jmp	#LR__0700
0775c     01 00 00 FF 
07760     04 32 0E F2 | 	cmp	local07, ##516 wz
07764     24 04 90 AD |  if_e	jmp	#LR__0701
07768     F4 04 90 FD | 	jmp	#LR__0703
0776c                 | LR__0623
0776c     40 0B B0 FD | 	call	#_compile_fun_2p
07770     FD 30 02 F6 | 	mov	local06, result1
07774     2C 04 90 FD | 	jmp	#LR__0702
07778                 | LR__0624
07778     04 0E B0 FD | 	call	#_compile_fun_varp
0777c     FD 34 02 F6 | 	mov	local08, result1
07780     FE 30 02 F6 | 	mov	local06, result2
07784     1C 04 90 FD | 	jmp	#LR__0702
07788                 | LR__0625
07788     F4 0D B0 FD | 	call	#_compile_fun_varp
0778c     FD 34 02 F6 | 	mov	local08, result1
07790     FE 30 02 F6 | 	mov	local06, result2
07794     0C 04 90 FD | 	jmp	#LR__0702
07798                 | LR__0626
07798     E4 0D B0 FD | 	call	#_compile_fun_varp
0779c     FD 34 02 F6 | 	mov	local08, result1
077a0     FE 30 02 F6 | 	mov	local06, result2
077a4     FC 03 90 FD | 	jmp	#LR__0702
077a8                 | LR__0627
077a8                 | ' return expr()
077a8     B8 3C B0 FD | 	call	#_expr
077ac     FD 30 02 F6 | 	mov	local06, result1
077b0     F0 03 90 FD | 	jmp	#LR__0702
077b4                 | LR__0628
077b4     C8 0D B0 FD | 	call	#_compile_fun_varp
077b8     FD 34 02 F6 | 	mov	local08, result1
077bc     FE 30 02 F6 | 	mov	local06, result2
077c0     E0 03 90 FD | 	jmp	#LR__0702
077c4                 | LR__0629
077c4                 | ' return expr()
077c4     9C 3C B0 FD | 	call	#_expr
077c8     FD 30 02 F6 | 	mov	local06, result1
077cc     D4 03 90 FD | 	jmp	#LR__0702
077d0                 | LR__0630
077d0                 | ' return expr()
077d0     90 3C B0 FD | 	call	#_expr
077d4     FD 30 02 F6 | 	mov	local06, result1
077d8     C8 03 90 FD | 	jmp	#LR__0702
077dc                 | LR__0631
077dc                 | ' return expr()
077dc     84 3C B0 FD | 	call	#_expr
077e0     FD 30 02 F6 | 	mov	local06, result1
077e4     BC 03 90 FD | 	jmp	#LR__0702
077e8                 | LR__0632
077e8     94 0D B0 FD | 	call	#_compile_fun_varp
077ec     FD 34 02 F6 | 	mov	local08, result1
077f0     FE 30 02 F6 | 	mov	local06, result2
077f4     AC 03 90 FD | 	jmp	#LR__0702
077f8                 | LR__0633
077f8     B4 0A B0 FD | 	call	#_compile_fun_2p
077fc     FD 30 02 F6 | 	mov	local06, result1
07800     A0 03 90 FD | 	jmp	#LR__0702
07804                 | LR__0634
07804     A8 0A B0 FD | 	call	#_compile_fun_2p
07808     FD 30 02 F6 | 	mov	local06, result1
0780c     94 03 90 FD | 	jmp	#LR__0702
07810                 | LR__0635
07810     9C 0A B0 FD | 	call	#_compile_fun_2p
07814     FD 30 02 F6 | 	mov	local06, result1
07818     88 03 90 FD | 	jmp	#LR__0702
0781c                 | LR__0636
0781c     90 0A B0 FD | 	call	#_compile_fun_2p
07820     FD 30 02 F6 | 	mov	local06, result1
07824     7C 03 90 FD | 	jmp	#LR__0702
07828                 | LR__0637
07828                 | ' return expr()
07828     38 3C B0 FD | 	call	#_expr
0782c     FD 30 02 F6 | 	mov	local06, result1
07830     70 03 90 FD | 	jmp	#LR__0702
07834                 | LR__0638
07834     48 0D B0 FD | 	call	#_compile_fun_varp
07838     FD 34 02 F6 | 	mov	local08, result1
0783c     FE 30 02 F6 | 	mov	local06, result2
07840     60 03 90 FD | 	jmp	#LR__0702
07844                 | LR__0639
07844     38 0D B0 FD | 	call	#_compile_fun_varp
07848     FD 34 02 F6 | 	mov	local08, result1
0784c     FE 30 02 F6 | 	mov	local06, result2
07850     50 03 90 FD | 	jmp	#LR__0702
07854                 | LR__0640
07854     28 0D B0 FD | 	call	#_compile_fun_varp
07858     FD 34 02 F6 | 	mov	local08, result1
0785c     FE 30 02 F6 | 	mov	local06, result2
07860     40 03 90 FD | 	jmp	#LR__0702
07864                 | LR__0641
07864                 | ' return expr()
07864     FC 3B B0 FD | 	call	#_expr
07868     FD 30 02 F6 | 	mov	local06, result1
0786c     34 03 90 FD | 	jmp	#LR__0702
07870                 | LR__0642
07870     30 22 B0 FD | 	call	#_compile_dim
07874     FD 30 02 F6 | 	mov	local06, result1
07878     E4 03 90 FD | 	jmp	#LR__0703
0787c                 | LR__0643
0787c     00 0D B0 FD | 	call	#_compile_fun_varp
07880     FD 34 02 F6 | 	mov	local08, result1
07884     FE 30 02 F6 | 	mov	local06, result2
07888     18 03 90 FD | 	jmp	#LR__0702
0788c                 | LR__0644
0788c     20 0A B0 FD | 	call	#_compile_fun_2p
07890     FD 30 02 F6 | 	mov	local06, result1
07894     0C 03 90 FD | 	jmp	#LR__0702
07898                 | LR__0645
07898     E4 0C B0 FD | 	call	#_compile_fun_varp
0789c     FD 34 02 F6 | 	mov	local08, result1
078a0     FE 30 02 F6 | 	mov	local06, result2
078a4     FC 02 90 FD | 	jmp	#LR__0702
078a8                 | LR__0646
078a8     17 13 02 F6 | 	mov	arg01, local05
078ac     BC 20 B0 FD | 	call	#_compile_else
078b0     FD 30 02 F6 | 	mov	local06, result1
078b4     A8 03 90 FD | 	jmp	#LR__0703
078b8                 | LR__0647
078b8     C4 0C B0 FD | 	call	#_compile_fun_varp
078bc     FD 34 02 F6 | 	mov	local08, result1
078c0     FE 30 02 F6 | 	mov	local06, result2
078c4     DC 02 90 FD | 	jmp	#LR__0702
078c8                 | LR__0648
078c8     B4 0C B0 FD | 	call	#_compile_fun_varp
078cc     FD 34 02 F6 | 	mov	local08, result1
078d0     FE 30 02 F6 | 	mov	local06, result2
078d4     CC 02 90 FD | 	jmp	#LR__0702
078d8                 | LR__0649
078d8     01 2E 16 F2 | 	cmp	local05, #1 wc
078dc     08 00 90 CD |  if_b	jmp	#LR__0650
078e0     D4 2D B0 FD | 	call	#_compile_goto
078e4     78 03 90 FD | 	jmp	#LR__0703
078e8                 | LR__0650
078e8     19 12 06 F6 | 	mov	arg01, #25
078ec     00 14 06 F6 | 	mov	arg02, #0
078f0     98 A6 B1 FD | 	call	#_printerror
078f4     68 03 90 FD | 	jmp	#LR__0703
078f8                 | LR__0651
078f8     01 2E 16 F2 | 	cmp	local05, #1 wc
078fc     08 00 90 CD |  if_b	jmp	#LR__0652
07900     50 2D B0 FD | 	call	#_compile_gosub
07904     58 03 90 FD | 	jmp	#LR__0703
07908                 | LR__0652
07908     19 12 06 F6 | 	mov	arg01, #25
0790c     00 14 06 F6 | 	mov	arg02, #0
07910     78 A6 B1 FD | 	call	#_printerror
07914     48 03 90 FD | 	jmp	#LR__0703
07918                 | LR__0653
07918     64 0C B0 FD | 	call	#_compile_fun_varp
0791c     FD 34 02 F6 | 	mov	local08, result1
07920     FE 30 02 F6 | 	mov	local06, result2
07924     7C 02 90 FD | 	jmp	#LR__0702
07928                 | LR__0654
07928     FC 0A B0 FD | 	call	#_compile_fun_4p
0792c     FD 30 02 F6 | 	mov	local06, result1
07930     70 02 90 FD | 	jmp	#LR__0702
07934                 | LR__0655
07934                 | ' return expr()
07934     2C 3B B0 FD | 	call	#_expr
07938     FD 30 02 F6 | 	mov	local06, result1
0793c     64 02 90 FD | 	jmp	#LR__0702
07940                 | LR__0656
07940     34 28 B0 FD | 	call	#_compile_for
07944     FD 30 02 F6 | 	mov	local06, result1
07948     14 03 90 FD | 	jmp	#LR__0703
0794c                 | LR__0657
0794c     30 0C B0 FD | 	call	#_compile_fun_varp
07950     FD 34 02 F6 | 	mov	local08, result1
07954     FE 30 02 F6 | 	mov	local06, result2
07958     48 02 90 FD | 	jmp	#LR__0702
0795c                 | LR__0658
0795c     17 13 02 F6 | 	mov	arg01, local05
07960     80 1E B0 FD | 	call	#_compile_if
07964     FD 30 02 F6 | 	mov	local06, result1
07968     F4 02 90 FD | 	jmp	#LR__0703
0796c                 | LR__0659
0796c                 | ' return expr()
0796c     F4 3A B0 FD | 	call	#_expr
07970     FD 30 02 F6 | 	mov	local06, result1
07974     2C 02 90 FD | 	jmp	#LR__0702
07978                 | LR__0660
07978     D0 0D B0 FD | 	call	#_compile_input
0797c     FD 34 02 F6 | 	mov	local08, result1
07980     FE 30 02 F6 | 	mov	local06, result2
07984     1C 02 90 FD | 	jmp	#LR__0702
07988                 | LR__0661
07988                 | ' return expr()
07988     D8 3A B0 FD | 	call	#_expr
0798c     FD 30 02 F6 | 	mov	local06, result1
07990     10 02 90 FD | 	jmp	#LR__0702
07994                 | LR__0662
07994     E8 0B B0 FD | 	call	#_compile_fun_varp
07998     FD 34 02 F6 | 	mov	local08, result1
0799c     FE 30 02 F6 | 	mov	local06, result2
079a0     00 02 90 FD | 	jmp	#LR__0702
079a4                 | LR__0663
079a4     D8 0B B0 FD | 	call	#_compile_fun_varp
079a8     FD 34 02 F6 | 	mov	local08, result1
079ac     FE 30 02 F6 | 	mov	local06, result2
079b0     F0 01 90 FD | 	jmp	#LR__0702
079b4                 | LR__0664
079b4     F8 08 B0 FD | 	call	#_compile_fun_2p
079b8     FD 30 02 F6 | 	mov	local06, result1
079bc     E4 01 90 FD | 	jmp	#LR__0702
079c0                 | LR__0665
079c0                 | ' return expr()
079c0     A0 3A B0 FD | 	call	#_expr
079c4     FD 30 02 F6 | 	mov	local06, result1
079c8     D8 01 90 FD | 	jmp	#LR__0702
079cc                 | LR__0666
079cc                 | ' return expr()
079cc     94 3A B0 FD | 	call	#_expr
079d0     FD 30 02 F6 | 	mov	local06, result1
079d4     CC 01 90 FD | 	jmp	#LR__0702
079d8                 | LR__0667
079d8                 | ' return expr()
079d8     88 3A B0 FD | 	call	#_expr
079dc     FD 30 02 F6 | 	mov	local06, result1
079e0     C0 01 90 FD | 	jmp	#LR__0702
079e4                 | LR__0668
079e4     D4 2A B0 FD | 	call	#_compile_next
079e8     FD 30 02 F6 | 	mov	local06, result1
079ec     70 02 90 FD | 	jmp	#LR__0703
079f0                 | LR__0669
079f0     B4 30 B0 FD | 	call	#_compile_on
079f4     FD 30 02 F6 | 	mov	local06, result1
079f8     64 02 90 FD | 	jmp	#LR__0703
079fc                 | LR__0670
079fc     38 09 B0 FD | 	call	#_compile_fun_3p
07a00     FD 30 02 F6 | 	mov	local06, result1
07a04     9C 01 90 FD | 	jmp	#LR__0702
07a08                 | LR__0671
07a08                 | ' return expr()
07a08     58 3A B0 FD | 	call	#_expr
07a0c     FD 30 02 F6 | 	mov	local06, result1
07a10     90 01 90 FD | 	jmp	#LR__0702
07a14                 | LR__0672
07a14                 | ' return expr()
07a14     4C 3A B0 FD | 	call	#_expr
07a18     FD 30 02 F6 | 	mov	local06, result1
07a1c     84 01 90 FD | 	jmp	#LR__0702
07a20                 | LR__0673
07a20                 | ' return expr()
07a20     40 3A B0 FD | 	call	#_expr
07a24     FD 30 02 F6 | 	mov	local06, result1
07a28     78 01 90 FD | 	jmp	#LR__0702
07a2c                 | LR__0674
07a2c                 | ' return expr()
07a2c     34 3A B0 FD | 	call	#_expr
07a30     FD 30 02 F6 | 	mov	local06, result1
07a34     6C 01 90 FD | 	jmp	#LR__0702
07a38                 | LR__0675
07a38     EC 09 B0 FD | 	call	#_compile_fun_4p
07a3c     FD 30 02 F6 | 	mov	local06, result1
07a40     60 01 90 FD | 	jmp	#LR__0702
07a44                 | LR__0676
07a44                 | ' return expr()
07a44     1C 3A B0 FD | 	call	#_expr
07a48     FD 30 02 F6 | 	mov	local06, result1
07a4c     54 01 90 FD | 	jmp	#LR__0702
07a50                 | LR__0677
07a50     5C 08 B0 FD | 	call	#_compile_fun_2p
07a54     FD 30 02 F6 | 	mov	local06, result1
07a58     48 01 90 FD | 	jmp	#LR__0702
07a5c                 | LR__0678
07a5c     20 0B B0 FD | 	call	#_compile_fun_varp
07a60     FD 34 02 F6 | 	mov	local08, result1
07a64     FE 30 02 F6 | 	mov	local06, result2
07a68     38 01 90 FD | 	jmp	#LR__0702
07a6c                 | LR__0679
07a6c     10 0B B0 FD | 	call	#_compile_fun_varp
07a70     FD 34 02 F6 | 	mov	local08, result1
07a74     FE 30 02 F6 | 	mov	local06, result2
07a78     28 01 90 FD | 	jmp	#LR__0702
07a7c                 | LR__0680
07a7c     30 08 B0 FD | 	call	#_compile_fun_2p
07a80     FD 30 02 F6 | 	mov	local06, result1
07a84     1C 01 90 FD | 	jmp	#LR__0702
07a88                 | LR__0681
07a88     24 08 B0 FD | 	call	#_compile_fun_2p
07a8c     FD 30 02 F6 | 	mov	local06, result1
07a90     10 01 90 FD | 	jmp	#LR__0702
07a94                 | LR__0682
07a94     74 16 B0 FD | 	call	#_compile_print
07a98     FD 30 02 F6 | 	mov	local06, result1
07a9c     C0 01 90 FD | 	jmp	#LR__0703
07aa0                 | LR__0683
07aa0     DC 0A B0 FD | 	call	#_compile_fun_varp
07aa4     FD 34 02 F6 | 	mov	local08, result1
07aa8     FE 30 02 F6 | 	mov	local06, result2
07aac     F4 00 90 FD | 	jmp	#LR__0702
07ab0                 | LR__0684
07ab0     A8 0B B0 FD | 	call	#_compile_read
07ab4     FD 34 02 F6 | 	mov	local08, result1
07ab8     FE 30 02 F6 | 	mov	local06, result2
07abc     E4 00 90 FD | 	jmp	#LR__0702
07ac0                 | LR__0685
07ac0                 | ' return expr()
07ac0     A0 39 B0 FD | 	call	#_expr
07ac4     FD 30 02 F6 | 	mov	local06, result1
07ac8     D8 00 90 FD | 	jmp	#LR__0702
07acc                 | LR__0686
07acc     B0 0A B0 FD | 	call	#_compile_fun_varp
07ad0     FD 34 02 F6 | 	mov	local08, result1
07ad4     FE 30 02 F6 | 	mov	local06, result2
07ad8     C8 00 90 FD | 	jmp	#LR__0702
07adc                 | LR__0687
07adc     A0 0A B0 FD | 	call	#_compile_fun_varp
07ae0     FD 34 02 F6 | 	mov	local08, result1
07ae4     FE 30 02 F6 | 	mov	local06, result2
07ae8     B8 00 90 FD | 	jmp	#LR__0702
07aec                 | LR__0688
07aec     C0 07 B0 FD | 	call	#_compile_fun_2p
07af0     FD 30 02 F6 | 	mov	local06, result1
07af4     AC 00 90 FD | 	jmp	#LR__0702
07af8                 | LR__0689
07af8     B4 07 B0 FD | 	call	#_compile_fun_2p
07afc     FD 30 02 F6 | 	mov	local06, result1
07b00     A0 00 90 FD | 	jmp	#LR__0702
07b04                 | LR__0690
07b04     A8 07 B0 FD | 	call	#_compile_fun_2p
07b08     FD 30 02 F6 | 	mov	local06, result1
07b0c     94 00 90 FD | 	jmp	#LR__0702
07b10                 | LR__0691
07b10     9C 07 B0 FD | 	call	#_compile_fun_2p
07b14     FD 30 02 F6 | 	mov	local06, result1
07b18     88 00 90 FD | 	jmp	#LR__0702
07b1c                 | LR__0692
07b1c     90 07 B0 FD | 	call	#_compile_fun_2p
07b20     FD 30 02 F6 | 	mov	local06, result1
07b24     7C 00 90 FD | 	jmp	#LR__0702
07b28                 | LR__0693
07b28     84 07 B0 FD | 	call	#_compile_fun_2p
07b2c     FD 30 02 F6 | 	mov	local06, result1
07b30     70 00 90 FD | 	jmp	#LR__0702
07b34                 | LR__0694
07b34     78 07 B0 FD | 	call	#_compile_fun_2p
07b38     FD 30 02 F6 | 	mov	local06, result1
07b3c     64 00 90 FD | 	jmp	#LR__0702
07b40                 | LR__0695
07b40     3C 0A B0 FD | 	call	#_compile_fun_varp
07b44     FD 34 02 F6 | 	mov	local08, result1
07b48     FE 30 02 F6 | 	mov	local06, result2
07b4c     54 00 90 FD | 	jmp	#LR__0702
07b50                 | LR__0696
07b50     E4 07 B0 FD | 	call	#_compile_fun_3p
07b54     FD 30 02 F6 | 	mov	local06, result1
07b58     48 00 90 FD | 	jmp	#LR__0702
07b5c                 | LR__0697
07b5c                 | ' return expr()
07b5c     04 39 B0 FD | 	call	#_expr
07b60     FD 30 02 F6 | 	mov	local06, result1
07b64     3C 00 90 FD | 	jmp	#LR__0702
07b68                 | LR__0698
07b68     44 07 B0 FD | 	call	#_compile_fun_2p
07b6c     FD 30 02 F6 | 	mov	local06, result1
07b70     30 00 90 FD | 	jmp	#LR__0702
07b74                 | LR__0699
07b74     38 07 B0 FD | 	call	#_compile_fun_2p
07b78     FD 30 02 F6 | 	mov	local06, result1
07b7c     24 00 90 FD | 	jmp	#LR__0702
07b80                 | LR__0700
07b80     2C 07 B0 FD | 	call	#_compile_fun_2p
07b84     FD 30 02 F6 | 	mov	local06, result1
07b88     18 00 90 FD | 	jmp	#LR__0702
07b8c                 | LR__0701
07b8c     1C 13 B0 FD | 	call	#_compile_array_assign
07b90     FD 30 02 F6 | 	mov	local06, result1
07b94     0E 30 0E F2 | 	cmp	local06, #14 wz
07b98     C4 00 90 5D |  if_ne	jmp	#LR__0703
07b9c                 | ' return 23
07b9c     17 30 06 F6 | 	mov	local06, #23
07ba0     BC 00 90 FD | 	jmp	#LR__0703
07ba4                 | ' return 23
07ba4                 | LR__0702
07ba4     19 2B 02 F6 | 	mov	local03, local07
07ba8     1A 27 02 F6 | 	mov	local01, local08
07bac     13 37 02 F6 | 	mov	local09, local01
07bb0     14 39 02 F6 | 	mov	local10, local02
07bb4     15 33 02 F6 | 	mov	local07, local03
07bb8     4A 00 00 FF 
07bbc     7C E4 05 F1 | 	add	objptr, ##38012
07bc0     F2 26 02 FB | 	rdlong	local01, objptr
07bc4     13 35 02 F6 | 	mov	local08, local01
07bc8     01 34 66 F0 | 	shl	local08, #1
07bcc     13 35 02 F1 | 	add	local08, local01
07bd0     02 34 66 F0 | 	shl	local08, #2
07bd4     03 00 00 FF 
07bd8     00 E4 85 F1 | 	sub	objptr, ##1536
07bdc     F2 34 02 F1 | 	add	local08, objptr
07be0     1A 37 62 FC | 	wrlong	local09, local08
07be4     03 00 00 FF 
07be8     00 E4 05 F1 | 	add	objptr, ##1536
07bec     F2 26 02 FB | 	rdlong	local01, objptr
07bf0     13 37 02 F6 | 	mov	local09, local01
07bf4     01 36 66 F0 | 	shl	local09, #1
07bf8     13 37 02 F1 | 	add	local09, local01
07bfc     02 36 66 F0 | 	shl	local09, #2
07c00     03 00 00 FF 
07c04     00 E4 85 F1 | 	sub	objptr, ##1536
07c08     F2 36 02 F1 | 	add	local09, objptr
07c0c     04 36 06 F1 | 	add	local09, #4
07c10     1B 39 62 FC | 	wrlong	local10, local09
07c14     03 00 00 FF 
07c18     00 E4 05 F1 | 	add	objptr, ##1536
07c1c     F2 26 02 FB | 	rdlong	local01, objptr
07c20     13 39 02 F6 | 	mov	local10, local01
07c24     01 38 66 F0 | 	shl	local10, #1
07c28     13 39 02 F1 | 	add	local10, local01
07c2c     02 38 66 F0 | 	shl	local10, #2
07c30     03 00 00 FF 
07c34     00 E4 85 F1 | 	sub	objptr, ##1536
07c38     F2 38 02 F1 | 	add	local10, objptr
07c3c     08 38 06 F1 | 	add	local10, #8
07c40     1C 33 62 FC | 	wrlong	local07, local10
07c44     03 00 00 FF 
07c48     00 E4 05 F1 | 	add	objptr, ##1536
07c4c     F2 36 02 FB | 	rdlong	local09, objptr
07c50     01 36 06 F1 | 	add	local09, #1
07c54     F2 36 62 FC | 	wrlong	local09, objptr
07c58     4A 00 00 FF 
07c5c     7C E4 85 F1 | 	sub	objptr, ##38012
07c60                 | LR__0703
07c60                 | ' 
07c60                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07c60                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07c60     03 2C 0E F2 | 	cmp	local04, #3 wz
07c64     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07c68     38 00 90 5D |  if_ne	jmp	#LR__0704
07c6c     4A 00 00 FF 
07c70     7C E4 05 F1 | 	add	objptr, ##38012
07c74     F2 38 02 FB | 	rdlong	local10, objptr
07c78     1C 27 02 F6 | 	mov	local01, local10
07c7c     01 26 66 F0 | 	shl	local01, #1
07c80     1C 27 02 F1 | 	add	local01, local10
07c84     02 26 66 F0 | 	shl	local01, #2
07c88     03 00 00 FF 
07c8c     00 E4 85 F1 | 	sub	objptr, ##1536
07c90     F2 26 02 F1 | 	add	local01, objptr
07c94     08 26 06 F1 | 	add	local01, #8
07c98     13 FD 6B FC | 	wrlong	#510, local01
07c9c     47 00 00 FF 
07ca0     7C E4 85 F1 | 	sub	objptr, ##36476
07ca4                 | LR__0704
07ca4                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07ca4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07ca4     4A 00 00 FF 
07ca8     7C E4 05 F1 | 	add	objptr, ##38012
07cac     F2 26 02 FB | 	rdlong	local01, objptr
07cb0     4A 00 00 FF 
07cb4     7C E4 85 F1 | 	sub	objptr, ##38012
07cb8     97 58 48 FB | 	callpa	#(@LR__0707-@LR__0705)>>2,fcache_load_ptr_
07cbc                 | LR__0705
07cbc     13 39 02 F6 | 	mov	local10, local01
07cc0     01 38 66 F0 | 	shl	local10, #1
07cc4     13 39 02 F1 | 	add	local10, local01
07cc8     02 38 66 F0 | 	shl	local10, #2
07ccc     47 00 00 FF 
07cd0     7C E4 05 F1 | 	add	objptr, ##36476
07cd4     F2 38 02 F1 | 	add	local10, objptr
07cd8     08 38 06 F1 | 	add	local10, #8
07cdc     1C 39 02 FB | 	rdlong	local10, local10
07ce0     9B 38 0E F2 | 	cmp	local10, #155 wz
07ce4     47 00 00 FF 
07ce8     7C E4 85 F1 | 	sub	objptr, ##36476
07cec     70 00 90 5D |  if_ne	jmp	#LR__0706
07cf0     13 37 02 F6 | 	mov	local09, local01
07cf4     01 36 86 F1 | 	sub	local09, #1
07cf8     1B 39 02 F6 | 	mov	local10, local09
07cfc     01 38 66 F0 | 	shl	local10, #1
07d00     1B 39 02 F1 | 	add	local10, local09
07d04     02 38 66 F0 | 	shl	local10, #2
07d08     47 00 00 FF 
07d0c     7C E4 05 F1 | 	add	objptr, ##36476
07d10     F2 38 02 F1 | 	add	local10, objptr
07d14     08 38 06 F1 | 	add	local10, #8
07d18     1C 39 02 FB | 	rdlong	local10, local10
07d1c     11 38 0E F2 | 	cmp	local10, #17 wz
07d20     47 00 00 FF 
07d24     7C E4 85 F1 | 	sub	objptr, ##36476
07d28     34 00 90 5D |  if_ne	jmp	#LR__0706
07d2c     13 37 02 F6 | 	mov	local09, local01
07d30     01 36 86 F1 | 	sub	local09, #1
07d34     1B 39 02 F6 | 	mov	local10, local09
07d38     01 38 66 F0 | 	shl	local10, #1
07d3c     1B 39 02 F1 | 	add	local10, local09
07d40     02 38 66 F0 | 	shl	local10, #2
07d44     47 00 00 FF 
07d48     7C E4 05 F1 | 	add	objptr, ##36476
07d4c     F2 38 02 F1 | 	add	local10, objptr
07d50     08 38 06 F1 | 	add	local10, #8
07d54     1C 25 68 FC | 	wrlong	#18, local10
07d58     47 00 00 FF 
07d5c     7C E4 85 F1 | 	sub	objptr, ##36476
07d60                 | LR__0706
07d60     01 26 86 F1 | 	sub	local01, #1
07d64     01 26 56 F2 | 	cmps	local01, #1 wc
07d68     50 FF 9F 3D |  if_ae	jmp	#LR__0705
07d6c                 | LR__0707
07d6c                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07d6c                 | ' return err
07d6c     18 FB 01 F6 | 	mov	result1, local06
07d70     A7 F0 03 F6 | 	mov	ptra, fp
07d74     B2 00 A0 FD | 	call	#popregs_
07d78                 | _compile_immediate_ret
07d78     2D 00 64 FD | 	ret
07d7c                 | 
07d7c                 | ' 
07d7c                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07d7c                 | ' 
07d7c                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07d7c                 | _compile_immediate_assign
07d7c     0C 4A 05 F6 | 	mov	COUNT_, #12
07d80     A8 00 A0 FD | 	call	#pushregs_
07d84     09 2D 02 F6 | 	mov	local04, arg01
07d88     FF 2A 06 F6 | 	mov	local03, #255
07d8c     01 2E 66 F6 | 	neg	local05, #1
07d90     00 30 06 F6 | 	mov	local06, #0
07d94                 | ' 
07d94                 | ' t1.result_type=result_error : t1.result.uresult=0
07d94                 | ' i=-1: j=-1 : err=0
07d94                 | ' 
07d94                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07d94     02 2C 0E F2 | 	cmp	local04, #2 wz
07d98     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07d9c     35 00 00 AF 
07da0     0C E4 05 A1 |  if_e	add	objptr, ##27148
07da4     F2 32 02 AB |  if_e	rdlong	local07, objptr
07da8     02 00 00 AF 
07dac     38 E4 05 A1 |  if_e	add	objptr, ##1080
07db0     F2 04 68 AC |  if_e	wrlong	#2, objptr
07db4     37 00 00 AF 
07db8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07dbc                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07dbc     04 2C 0E F2 | 	cmp	local04, #4 wz
07dc0     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07dc4     2C 00 90 5D |  if_ne	jmp	#LR__0710
07dc8     35 00 00 FF 
07dcc     14 E4 05 F1 | 	add	objptr, ##27156
07dd0     F2 32 02 FB | 	rdlong	local07, objptr
07dd4     02 00 00 FF 
07dd8     30 E4 05 F1 | 	add	objptr, ##1072
07ddc     F2 06 68 FC | 	wrlong	#3, objptr
07de0     13 00 00 FF 
07de4     38 E4 05 F1 | 	add	objptr, ##9784
07de8     F2 04 68 FC | 	wrlong	#2, objptr
07dec     4A 00 00 FF 
07df0     7C E4 85 F1 | 	sub	objptr, ##38012
07df4                 | LR__0710
07df4                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07df4     05 2C 0E F2 | 	cmp	local04, #5 wz
07df8     3C 00 90 5D |  if_ne	jmp	#LR__0711
07dfc     37 00 00 FF 
07e00     44 E4 05 F1 | 	add	objptr, ##28228
07e04     F2 FA 01 FB | 	rdlong	result1, objptr
07e08     FD 32 02 F6 | 	mov	local07, result1
07e0c     03 32 66 F0 | 	shl	local07, #3
07e10     02 00 00 FF 
07e14     38 E4 85 F1 | 	sub	objptr, ##1080
07e18     F2 32 02 F1 | 	add	local07, objptr
07e1c     19 33 02 FB | 	rdlong	local07, local07
07e20     02 FA 05 F1 | 	add	result1, #2
07e24     02 00 00 FF 
07e28     38 E4 05 F1 | 	add	objptr, ##1080
07e2c     F2 FA 61 FC | 	wrlong	result1, objptr
07e30     37 00 00 FF 
07e34     44 E4 85 F1 | 	sub	objptr, ##28228
07e38                 | LR__0711
07e38     19 13 02 F6 | 	mov	arg01, local07
07e3c     01 14 06 F6 | 	mov	arg02, #1
07e40     38 FC B1 FD | 	call	#__system__Right_S
07e44     FD 34 02 F6 | 	mov	local08, result1
07e48     18 36 B0 FD | 	call	#_expr
07e4c                 | ' 
07e4c                 | ' suffix2$=right$(varname2$,1)
07e4c                 | ' expr()
07e4c                 | ' if varnum>0 then					' try to find a variable
07e4c     35 00 00 FF 
07e50     08 E4 05 F1 | 	add	objptr, ##27144
07e54     F2 36 02 FB | 	rdlong	local09, objptr
07e58     35 00 00 FF 
07e5c     08 E4 85 F1 | 	sub	objptr, ##27144
07e60     01 36 56 F2 | 	cmps	local09, #1 wc
07e64     58 00 90 CD |  if_b	jmp	#LR__0714
07e68                 | '   for i=0 to varnum-1
07e68     00 38 06 F6 | 	mov	local10, #0
07e6c     35 00 00 FF 
07e70     08 E4 05 F1 | 	add	objptr, ##27144
07e74     F2 3A 02 FB | 	rdlong	local11, objptr
07e78     35 00 00 FF 
07e7c     08 E4 85 F1 | 	sub	objptr, ##27144
07e80                 | LR__0712
07e80     1D 39 52 F2 | 	cmps	local10, local11 wc
07e84     38 00 90 3D |  if_ae	jmp	#LR__0713
07e88                 | '     if variables(i).name=varname2$ then j=i : exit
07e88     1C 37 02 F6 | 	mov	local09, local10
07e8c     04 36 66 F0 | 	shl	local09, #4
07e90     14 00 00 FF 
07e94     F8 E5 05 F1 | 	add	objptr, ##10744
07e98     F2 36 02 F1 | 	add	local09, objptr
07e9c     1B 13 02 FB | 	rdlong	arg01, local09
07ea0     19 15 02 F6 | 	mov	arg02, local07
07ea4     14 00 00 FF 
07ea8     F8 E5 85 F1 | 	sub	objptr, ##10744
07eac     F0 DA B1 FD | 	call	#__system___string_cmp
07eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
07eb4     1C 2F 02 A6 |  if_e	mov	local05, local10
07eb8     01 38 06 51 |  if_ne	add	local10, #1
07ebc     C0 FF 9F 5D |  if_ne	jmp	#LR__0712
07ec0                 | LR__0713
07ec0                 | LR__0714
07ec0                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07ec0     FF FF 7F FF 
07ec4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07ec8     60 00 90 5D |  if_ne	jmp	#LR__0715
07ecc     35 00 00 FF 
07ed0     08 E4 05 F1 | 	add	objptr, ##27144
07ed4     F2 36 02 FB | 	rdlong	local09, objptr
07ed8     35 00 00 FF 
07edc     08 E4 85 F1 | 	sub	objptr, ##27144
07ee0     02 00 00 FF 
07ee4     00 36 56 F2 | 	cmps	local09, ##1024 wc
07ee8     40 00 90 3D |  if_ae	jmp	#LR__0715
07eec     35 00 00 FF 
07ef0     08 E4 05 F1 | 	add	objptr, ##27144
07ef4     F2 3A 02 FB | 	rdlong	local11, objptr
07ef8     04 3A 66 F0 | 	shl	local11, #4
07efc     20 00 00 FF 
07f00     10 E4 85 F1 | 	sub	objptr, ##16400
07f04     F2 3A 02 F1 | 	add	local11, objptr
07f08     1D 33 62 FC | 	wrlong	local07, local11
07f0c     20 00 00 FF 
07f10     10 E4 05 F1 | 	add	objptr, ##16400
07f14     F2 36 02 FB | 	rdlong	local09, objptr
07f18     1B 2F 02 F6 | 	mov	local05, local09
07f1c     01 36 06 F1 | 	add	local09, #1
07f20     F2 36 62 FC | 	wrlong	local09, objptr
07f24     35 00 00 FF 
07f28     08 E4 85 F1 | 	sub	objptr, ##27144
07f2c                 | LR__0715
07f2c                 | ' if varnum>=maxvars then
07f2c     35 00 00 FF 
07f30     08 E4 05 F1 | 	add	objptr, ##27144
07f34     F2 36 02 FB | 	rdlong	local09, objptr
07f38     35 00 00 FF 
07f3c     08 E4 85 F1 | 	sub	objptr, ##27144
07f40     02 00 00 FF 
07f44     00 36 56 F2 | 	cmps	local09, ##1024 wc
07f48     2D 30 06 36 |  if_ae	mov	local06, #45
07f4c     C8 01 90 3D |  if_ae	jmp	#LR__0720
07f50     17 27 02 F6 | 	mov	local01, local05
07f54     17 2A 06 F6 | 	mov	local03, #23
07f58     13 37 02 F6 | 	mov	local09, local01
07f5c     14 3D 02 F6 | 	mov	local12, local02
07f60     15 27 02 F6 | 	mov	local01, local03
07f64     4A 00 00 FF 
07f68     7C E4 05 F1 | 	add	objptr, ##38012
07f6c     F2 3A 02 FB | 	rdlong	local11, objptr
07f70     1D 39 02 F6 | 	mov	local10, local11
07f74     01 38 66 F0 | 	shl	local10, #1
07f78     1D 39 02 F1 | 	add	local10, local11
07f7c     02 38 66 F0 | 	shl	local10, #2
07f80     03 00 00 FF 
07f84     00 E4 85 F1 | 	sub	objptr, ##1536
07f88     F2 38 02 F1 | 	add	local10, objptr
07f8c     1C 37 62 FC | 	wrlong	local09, local10
07f90     03 00 00 FF 
07f94     00 E4 05 F1 | 	add	objptr, ##1536
07f98     F2 36 02 FB | 	rdlong	local09, objptr
07f9c     1B 3B 02 F6 | 	mov	local11, local09
07fa0     01 3A 66 F0 | 	shl	local11, #1
07fa4     1B 3B 02 F1 | 	add	local11, local09
07fa8     02 3A 66 F0 | 	shl	local11, #2
07fac     03 00 00 FF 
07fb0     00 E4 85 F1 | 	sub	objptr, ##1536
07fb4     F2 3A 02 F1 | 	add	local11, objptr
07fb8     04 3A 06 F1 | 	add	local11, #4
07fbc     1D 3D 62 FC | 	wrlong	local12, local11
07fc0     03 00 00 FF 
07fc4     00 E4 05 F1 | 	add	objptr, ##1536
07fc8     F2 36 02 FB | 	rdlong	local09, objptr
07fcc     1B 3D 02 F6 | 	mov	local12, local09
07fd0     01 3C 66 F0 | 	shl	local12, #1
07fd4     1B 3D 02 F1 | 	add	local12, local09
07fd8     02 3C 66 F0 | 	shl	local12, #2
07fdc     03 00 00 FF 
07fe0     00 E4 85 F1 | 	sub	objptr, ##1536
07fe4     F2 3C 02 F1 | 	add	local12, objptr
07fe8     08 3C 06 F1 | 	add	local12, #8
07fec     1E 27 62 FC | 	wrlong	local01, local12
07ff0     03 00 00 FF 
07ff4     00 E4 05 F1 | 	add	objptr, ##1536
07ff8     F2 36 02 FB | 	rdlong	local09, objptr
07ffc     01 36 06 F1 | 	add	local09, #1
08000     F2 36 62 FC | 	wrlong	local09, objptr
08004     4A 00 00 FF 
08008     7C E4 85 F1 | 	sub	objptr, ##38012
0800c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0800c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0800c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0800c     03 2C 0E F2 | 	cmp	local04, #3 wz
08010     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08014     38 00 90 5D |  if_ne	jmp	#LR__0716
08018     4A 00 00 FF 
0801c     7C E4 05 F1 | 	add	objptr, ##38012
08020     F2 3C 02 FB | 	rdlong	local12, objptr
08024     1E 27 02 F6 | 	mov	local01, local12
08028     01 26 66 F0 | 	shl	local01, #1
0802c     1E 27 02 F1 | 	add	local01, local12
08030     02 26 66 F0 | 	shl	local01, #2
08034     03 00 00 FF 
08038     00 E4 85 F1 | 	sub	objptr, ##1536
0803c     F2 26 02 F1 | 	add	local01, objptr
08040     08 26 06 F1 | 	add	local01, #8
08044     13 FD 6B FC | 	wrlong	#510, local01
08048     47 00 00 FF 
0804c     7C E4 85 F1 | 	sub	objptr, ##36476
08050                 | LR__0716
08050                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08050     4A 00 00 FF 
08054     7C E4 05 F1 | 	add	objptr, ##38012
08058     F2 38 02 FB | 	rdlong	local10, objptr
0805c     4A 00 00 FF 
08060     7C E4 85 F1 | 	sub	objptr, ##38012
08064     97 58 48 FB | 	callpa	#(@LR__0719-@LR__0717)>>2,fcache_load_ptr_
08068                 | LR__0717
08068     1C 3D 02 F6 | 	mov	local12, local10
0806c     01 3C 66 F0 | 	shl	local12, #1
08070     1C 3D 02 F1 | 	add	local12, local10
08074     02 3C 66 F0 | 	shl	local12, #2
08078     47 00 00 FF 
0807c     7C E4 05 F1 | 	add	objptr, ##36476
08080     F2 3C 02 F1 | 	add	local12, objptr
08084     08 3C 06 F1 | 	add	local12, #8
08088     1E 3D 02 FB | 	rdlong	local12, local12
0808c     9B 3C 0E F2 | 	cmp	local12, #155 wz
08090     47 00 00 FF 
08094     7C E4 85 F1 | 	sub	objptr, ##36476
08098     70 00 90 5D |  if_ne	jmp	#LR__0718
0809c     1C 3D 02 F6 | 	mov	local12, local10
080a0     01 3C 86 F1 | 	sub	local12, #1
080a4     1E 27 02 F6 | 	mov	local01, local12
080a8     01 26 66 F0 | 	shl	local01, #1
080ac     1E 27 02 F1 | 	add	local01, local12
080b0     02 26 66 F0 | 	shl	local01, #2
080b4     47 00 00 FF 
080b8     7C E4 05 F1 | 	add	objptr, ##36476
080bc     F2 26 02 F1 | 	add	local01, objptr
080c0     08 26 06 F1 | 	add	local01, #8
080c4     13 27 02 FB | 	rdlong	local01, local01
080c8     11 26 0E F2 | 	cmp	local01, #17 wz
080cc     47 00 00 FF 
080d0     7C E4 85 F1 | 	sub	objptr, ##36476
080d4     34 00 90 5D |  if_ne	jmp	#LR__0718
080d8     1C 3D 02 F6 | 	mov	local12, local10
080dc     01 3C 86 F1 | 	sub	local12, #1
080e0     1E 27 02 F6 | 	mov	local01, local12
080e4     01 26 66 F0 | 	shl	local01, #1
080e8     1E 27 02 F1 | 	add	local01, local12
080ec     02 26 66 F0 | 	shl	local01, #2
080f0     47 00 00 FF 
080f4     7C E4 05 F1 | 	add	objptr, ##36476
080f8     F2 26 02 F1 | 	add	local01, objptr
080fc     08 26 06 F1 | 	add	local01, #8
08100     13 25 68 FC | 	wrlong	#18, local01
08104     47 00 00 FF 
08108     7C E4 85 F1 | 	sub	objptr, ##36476
0810c                 | LR__0718
0810c     01 38 86 F1 | 	sub	local10, #1
08110     01 38 56 F2 | 	cmps	local10, #1 wc
08114     50 FF 9F 3D |  if_ae	jmp	#LR__0717
08118                 | LR__0719
08118                 | LR__0720
08118                 | ' return err
08118     18 FB 01 F6 | 	mov	result1, local06
0811c     A7 F0 03 F6 | 	mov	ptra, fp
08120     B2 00 A0 FD | 	call	#popregs_
08124                 | _compile_immediate_assign_ret
08124     2D 00 64 FD | 	ret
08128                 | 
08128                 | ' 
08128                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08128                 | ' 
08128                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08128                 | _compile
08128     03 4A 05 F6 | 	mov	COUNT_, #3
0812c     A8 00 A0 FD | 	call	#pushregs_
08130     09 27 02 F6 | 	mov	local01, arg01
08134     0B 29 02 F6 | 	mov	local02, arg03
08138     47 00 00 FF 
0813c     7C E4 05 F1 | 	add	objptr, ##36476
08140     F2 26 62 FC | 	wrlong	local01, objptr
08144     04 E4 05 F1 | 	add	objptr, #4
08148     F2 14 62 FC | 	wrlong	arg02, objptr
0814c     47 00 00 FF 
08150     80 E4 85 F1 | 	sub	objptr, ##36480
08154     14 13 02 F6 | 	mov	arg01, local02
08158     01 12 06 F1 | 	add	arg01, #1
0815c     13 15 02 F6 | 	mov	arg02, local01
08160     6C F2 BF FD | 	call	#_compile_immediate
08164     FD 2A 0A F6 | 	mov	local03, result1 wz
08168                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08168                 | ' ucompiledline(0)=alinemajor
08168                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08168                 | ' 
08168                 | ' ' cont: 
08168                 | ' ' 0 - this is the first part of the line that will continue
08168                 | ' ' 1 - this is the continuation of the line
08168                 | ' ' 2 - this is the last continued line
08168                 | ' ' 3 - this is the one and only part
08168                 | ' 
08168                 | ' err=compile_immediate(cont+1,alinemajor) 
08168                 | ' if err=0 andalso alinemajor>0 then
08168     74 00 90 5D |  if_ne	jmp	#LR__0735
0816c     01 26 16 F2 | 	cmp	local01, #1 wc
08170     6C 00 90 CD |  if_b	jmp	#LR__0735
08174                 | '   if cont=3 orelse cont=2 then 
08174     03 28 0E F2 | 	cmp	local02, #3 wz
08178     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
0817c     60 00 90 5D |  if_ne	jmp	#LR__0734
08180                 | '     if alinemajor >lastline then 
08180     4A 00 00 FF 
08184     8C E4 05 F1 | 	add	objptr, ##38028
08188     F2 14 02 FB | 	rdlong	arg02, objptr
0818c     4A 00 00 FF 
08190     8C E4 85 F1 | 	sub	objptr, ##38028
08194     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08198     0C 00 90 ED |  if_be	jmp	#LR__0730
0819c     13 13 02 F6 | 	mov	arg01, local01
081a0     64 F1 BF FD | 	call	#_add_line_at_end
081a4     38 00 90 FD | 	jmp	#LR__0733
081a8                 | LR__0730
081a8     13 13 02 F6 | 	mov	arg01, local01
081ac     28 EB BF FD | 	call	#_deleteline
081b0                 | '       deleteline(alinemajor)  
081b0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
081b0     4A 00 00 FF 
081b4     8C E4 05 F1 | 	add	objptr, ##38028
081b8     F2 14 02 FB | 	rdlong	arg02, objptr
081bc     4A 00 00 FF 
081c0     8C E4 85 F1 | 	sub	objptr, ##38028
081c4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
081c8     0C 00 90 ED |  if_be	jmp	#LR__0731
081cc     13 13 02 F6 | 	mov	arg01, local01
081d0     34 F1 BF FD | 	call	#_add_line_at_end
081d4     08 00 90 FD | 	jmp	#LR__0732
081d8                 | LR__0731
081d8     13 13 02 F6 | 	mov	arg01, local01
081dc     0C EF BF FD | 	call	#_insertline
081e0                 | LR__0732
081e0                 | LR__0733
081e0                 | LR__0734
081e0                 | LR__0735
081e0                 | ' return err
081e0     15 FB 01 F6 | 	mov	result1, local03
081e4     A7 F0 03 F6 | 	mov	ptra, fp
081e8     B2 00 A0 FD | 	call	#popregs_
081ec                 | _compile_ret
081ec     2D 00 64 FD | 	ret
081f0                 | 
081f0                 | ' 
081f0                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
081f0                 | ' 
081f0                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
081f0                 | _compile_assign
081f0     03 4A 05 F6 | 	mov	COUNT_, #3
081f4     A8 00 A0 FD | 	call	#pushregs_
081f8     09 27 02 F6 | 	mov	local01, arg01
081fc     0B 29 02 F6 | 	mov	local02, arg03
08200     47 00 00 FF 
08204     7C E4 05 F1 | 	add	objptr, ##36476
08208     F2 26 62 FC | 	wrlong	local01, objptr
0820c     04 E4 05 F1 | 	add	objptr, #4
08210     F2 14 62 FC | 	wrlong	arg02, objptr
08214     47 00 00 FF 
08218     80 E4 85 F1 | 	sub	objptr, ##36480
0821c     14 13 02 F6 | 	mov	arg01, local02
08220     01 12 06 F1 | 	add	arg01, #1
08224     54 FB BF FD | 	call	#_compile_immediate_assign
08228     FD 2A 02 F6 | 	mov	local03, result1
0822c                 | ' 
0822c                 | ' ucompiledline(0)=alinemajor
0822c                 | ' ucompiledline(1)=alineminor
0822c                 | ' 
0822c                 | ' err=compile_immediate_assign(cont+1) 
0822c                 | ' if alinemajor>0 then
0822c     01 26 16 F2 | 	cmp	local01, #1 wc
08230     6C 00 90 CD |  if_b	jmp	#LR__0745
08234                 | '   if cont=3 orelse cont=2 then 
08234     03 28 0E F2 | 	cmp	local02, #3 wz
08238     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
0823c     60 00 90 5D |  if_ne	jmp	#LR__0744
08240                 | '     if alinemajor >lastline then 
08240     4A 00 00 FF 
08244     8C E4 05 F1 | 	add	objptr, ##38028
08248     F2 14 02 FB | 	rdlong	arg02, objptr
0824c     4A 00 00 FF 
08250     8C E4 85 F1 | 	sub	objptr, ##38028
08254     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08258     0C 00 90 ED |  if_be	jmp	#LR__0740
0825c     13 13 02 F6 | 	mov	arg01, local01
08260     A4 F0 BF FD | 	call	#_add_line_at_end
08264     38 00 90 FD | 	jmp	#LR__0743
08268                 | LR__0740
08268     13 13 02 F6 | 	mov	arg01, local01
0826c     68 EA BF FD | 	call	#_deleteline
08270                 | '       deleteline(alinemajor)  
08270                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08270     4A 00 00 FF 
08274     8C E4 05 F1 | 	add	objptr, ##38028
08278     F2 14 02 FB | 	rdlong	arg02, objptr
0827c     4A 00 00 FF 
08280     8C E4 85 F1 | 	sub	objptr, ##38028
08284     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08288     0C 00 90 ED |  if_be	jmp	#LR__0741
0828c     13 13 02 F6 | 	mov	arg01, local01
08290     74 F0 BF FD | 	call	#_add_line_at_end
08294     08 00 90 FD | 	jmp	#LR__0742
08298                 | LR__0741
08298     13 13 02 F6 | 	mov	arg01, local01
0829c     4C EE BF FD | 	call	#_insertline
082a0                 | LR__0742
082a0                 | LR__0743
082a0                 | LR__0744
082a0                 | LR__0745
082a0                 | ' return err
082a0     15 FB 01 F6 | 	mov	result1, local03
082a4     A7 F0 03 F6 | 	mov	ptra, fp
082a8     B2 00 A0 FD | 	call	#popregs_
082ac                 | _compile_assign_ret
082ac     2D 00 64 FD | 	ret
082b0                 | 
082b0                 | ' 
082b0                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
082b0                 | ' 
082b0                 | ' function compile_fun_2p() as ulong
082b0                 | _compile_fun_2p
082b0     01 4A 05 F6 | 	mov	COUNT_, #1
082b4     A8 00 A0 FD | 	call	#pushregs_
082b8     A8 31 B0 FD | 	call	#_expr
082bc     FD 26 02 F6 | 	mov	local01, result1
082c0                 | ' err=expr() : if err>0 then return err
082c0     01 26 16 F2 | 	cmp	local01, #1 wc
082c4     13 FB 01 36 |  if_ae	mov	result1, local01
082c8     60 00 90 3D |  if_ae	jmp	#LR__0750
082cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
082cc     37 00 00 FF 
082d0     44 E4 05 F1 | 	add	objptr, ##28228
082d4     F2 26 02 FB | 	rdlong	local01, objptr
082d8     03 26 66 F0 | 	shl	local01, #3
082dc     02 00 00 FF 
082e0     38 E4 85 F1 | 	sub	objptr, ##1080
082e4     F2 26 02 F1 | 	add	local01, objptr
082e8     04 26 06 F1 | 	add	local01, #4
082ec     13 27 02 FB | 	rdlong	local01, local01
082f0     11 26 0E F2 | 	cmp	local01, #17 wz
082f4     35 00 00 FF 
082f8     0C E4 85 F1 | 	sub	objptr, ##27148
082fc     15 FA 05 56 |  if_ne	mov	result1, #21
08300     28 00 90 5D |  if_ne	jmp	#LR__0750
08304     37 00 00 FF 
08308     44 E4 05 F1 | 	add	objptr, ##28228
0830c     F2 26 02 FB | 	rdlong	local01, objptr
08310     01 26 06 F1 | 	add	local01, #1
08314     F2 26 62 FC | 	wrlong	local01, objptr
08318     37 00 00 FF 
0831c     44 E4 85 F1 | 	sub	objptr, ##28228
08320     40 31 B0 FD | 	call	#_expr
08324                 | ' err=expr() : if err>0 then return err
08324     01 FA 15 F2 | 	cmp	result1, #1 wc
08328                 | ' return 0
08328     00 FA 05 C6 |  if_b	mov	result1, #0
0832c                 | LR__0750
0832c     A7 F0 03 F6 | 	mov	ptra, fp
08330     B2 00 A0 FD | 	call	#popregs_
08334                 | _compile_fun_2p_ret
08334     2D 00 64 FD | 	ret
08338                 | 
08338                 | ' 
08338                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08338                 | ' 
08338                 | ' function compile_fun_3p() as ulong
08338                 | _compile_fun_3p
08338     01 4A 05 F6 | 	mov	COUNT_, #1
0833c     A8 00 A0 FD | 	call	#pushregs_
08340     20 31 B0 FD | 	call	#_expr
08344     FD 26 02 F6 | 	mov	local01, result1
08348                 | ' err=expr() : if err>0 then return err
08348     01 26 16 F2 | 	cmp	local01, #1 wc
0834c     13 FB 01 36 |  if_ae	mov	result1, local01
08350     C8 00 90 3D |  if_ae	jmp	#LR__0760
08354                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08354     37 00 00 FF 
08358     44 E4 05 F1 | 	add	objptr, ##28228
0835c     F2 26 02 FB | 	rdlong	local01, objptr
08360     03 26 66 F0 | 	shl	local01, #3
08364     02 00 00 FF 
08368     38 E4 85 F1 | 	sub	objptr, ##1080
0836c     F2 26 02 F1 | 	add	local01, objptr
08370     04 26 06 F1 | 	add	local01, #4
08374     13 27 02 FB | 	rdlong	local01, local01
08378     11 26 0E F2 | 	cmp	local01, #17 wz
0837c     35 00 00 FF 
08380     0C E4 85 F1 | 	sub	objptr, ##27148
08384     15 FA 05 56 |  if_ne	mov	result1, #21
08388     90 00 90 5D |  if_ne	jmp	#LR__0760
0838c     37 00 00 FF 
08390     44 E4 05 F1 | 	add	objptr, ##28228
08394     F2 26 02 FB | 	rdlong	local01, objptr
08398     01 26 06 F1 | 	add	local01, #1
0839c     F2 26 62 FC | 	wrlong	local01, objptr
083a0     37 00 00 FF 
083a4     44 E4 85 F1 | 	sub	objptr, ##28228
083a8     B8 30 B0 FD | 	call	#_expr
083ac     FD 26 02 F6 | 	mov	local01, result1
083b0                 | ' err=expr() : if err>0 then return err
083b0     01 26 16 F2 | 	cmp	local01, #1 wc
083b4     13 FB 01 36 |  if_ae	mov	result1, local01
083b8     60 00 90 3D |  if_ae	jmp	#LR__0760
083bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
083bc     37 00 00 FF 
083c0     44 E4 05 F1 | 	add	objptr, ##28228
083c4     F2 26 02 FB | 	rdlong	local01, objptr
083c8     03 26 66 F0 | 	shl	local01, #3
083cc     02 00 00 FF 
083d0     38 E4 85 F1 | 	sub	objptr, ##1080
083d4     F2 26 02 F1 | 	add	local01, objptr
083d8     04 26 06 F1 | 	add	local01, #4
083dc     13 27 02 FB | 	rdlong	local01, local01
083e0     11 26 0E F2 | 	cmp	local01, #17 wz
083e4     35 00 00 FF 
083e8     0C E4 85 F1 | 	sub	objptr, ##27148
083ec     15 FA 05 56 |  if_ne	mov	result1, #21
083f0     28 00 90 5D |  if_ne	jmp	#LR__0760
083f4     37 00 00 FF 
083f8     44 E4 05 F1 | 	add	objptr, ##28228
083fc     F2 26 02 FB | 	rdlong	local01, objptr
08400     01 26 06 F1 | 	add	local01, #1
08404     F2 26 62 FC | 	wrlong	local01, objptr
08408     37 00 00 FF 
0840c     44 E4 85 F1 | 	sub	objptr, ##28228
08410     50 30 B0 FD | 	call	#_expr
08414                 | ' err=expr() : if err>0 then return err
08414     01 FA 15 F2 | 	cmp	result1, #1 wc
08418                 | ' return 0
08418     00 FA 05 C6 |  if_b	mov	result1, #0
0841c                 | LR__0760
0841c     A7 F0 03 F6 | 	mov	ptra, fp
08420     B2 00 A0 FD | 	call	#popregs_
08424                 | _compile_fun_3p_ret
08424     2D 00 64 FD | 	ret
08428                 | 
08428                 | ' 
08428                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08428                 | ' 
08428                 | ' function compile_fun_4p() as ulong
08428                 | _compile_fun_4p
08428     01 4A 05 F6 | 	mov	COUNT_, #1
0842c     A8 00 A0 FD | 	call	#pushregs_
08430     30 30 B0 FD | 	call	#_expr
08434     FD 26 02 F6 | 	mov	local01, result1
08438                 | ' err=expr() : if err>0 then return err
08438     01 26 16 F2 | 	cmp	local01, #1 wc
0843c     13 FB 01 36 |  if_ae	mov	result1, local01
08440     30 01 90 3D |  if_ae	jmp	#LR__0770
08444                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08444     37 00 00 FF 
08448     44 E4 05 F1 | 	add	objptr, ##28228
0844c     F2 26 02 FB | 	rdlong	local01, objptr
08450     03 26 66 F0 | 	shl	local01, #3
08454     02 00 00 FF 
08458     38 E4 85 F1 | 	sub	objptr, ##1080
0845c     F2 26 02 F1 | 	add	local01, objptr
08460     04 26 06 F1 | 	add	local01, #4
08464     13 27 02 FB | 	rdlong	local01, local01
08468     11 26 0E F2 | 	cmp	local01, #17 wz
0846c     35 00 00 FF 
08470     0C E4 85 F1 | 	sub	objptr, ##27148
08474     15 FA 05 56 |  if_ne	mov	result1, #21
08478     F8 00 90 5D |  if_ne	jmp	#LR__0770
0847c     37 00 00 FF 
08480     44 E4 05 F1 | 	add	objptr, ##28228
08484     F2 26 02 FB | 	rdlong	local01, objptr
08488     01 26 06 F1 | 	add	local01, #1
0848c     F2 26 62 FC | 	wrlong	local01, objptr
08490     37 00 00 FF 
08494     44 E4 85 F1 | 	sub	objptr, ##28228
08498     C8 2F B0 FD | 	call	#_expr
0849c     FD 26 02 F6 | 	mov	local01, result1
084a0                 | ' err=expr() : if err>0 then return err
084a0     01 26 16 F2 | 	cmp	local01, #1 wc
084a4     13 FB 01 36 |  if_ae	mov	result1, local01
084a8     C8 00 90 3D |  if_ae	jmp	#LR__0770
084ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
084ac     37 00 00 FF 
084b0     44 E4 05 F1 | 	add	objptr, ##28228
084b4     F2 26 02 FB | 	rdlong	local01, objptr
084b8     03 26 66 F0 | 	shl	local01, #3
084bc     02 00 00 FF 
084c0     38 E4 85 F1 | 	sub	objptr, ##1080
084c4     F2 26 02 F1 | 	add	local01, objptr
084c8     04 26 06 F1 | 	add	local01, #4
084cc     13 27 02 FB | 	rdlong	local01, local01
084d0     11 26 0E F2 | 	cmp	local01, #17 wz
084d4     35 00 00 FF 
084d8     0C E4 85 F1 | 	sub	objptr, ##27148
084dc     15 FA 05 56 |  if_ne	mov	result1, #21
084e0     90 00 90 5D |  if_ne	jmp	#LR__0770
084e4     37 00 00 FF 
084e8     44 E4 05 F1 | 	add	objptr, ##28228
084ec     F2 26 02 FB | 	rdlong	local01, objptr
084f0     01 26 06 F1 | 	add	local01, #1
084f4     F2 26 62 FC | 	wrlong	local01, objptr
084f8     37 00 00 FF 
084fc     44 E4 85 F1 | 	sub	objptr, ##28228
08500     60 2F B0 FD | 	call	#_expr
08504     FD 26 02 F6 | 	mov	local01, result1
08508                 | ' err=expr() : if err>0 then return err
08508     01 26 16 F2 | 	cmp	local01, #1 wc
0850c     13 FB 01 36 |  if_ae	mov	result1, local01
08510     60 00 90 3D |  if_ae	jmp	#LR__0770
08514                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08514     37 00 00 FF 
08518     44 E4 05 F1 | 	add	objptr, ##28228
0851c     F2 26 02 FB | 	rdlong	local01, objptr
08520     03 26 66 F0 | 	shl	local01, #3
08524     02 00 00 FF 
08528     38 E4 85 F1 | 	sub	objptr, ##1080
0852c     F2 26 02 F1 | 	add	local01, objptr
08530     04 26 06 F1 | 	add	local01, #4
08534     13 27 02 FB | 	rdlong	local01, local01
08538     11 26 0E F2 | 	cmp	local01, #17 wz
0853c     35 00 00 FF 
08540     0C E4 85 F1 | 	sub	objptr, ##27148
08544     15 FA 05 56 |  if_ne	mov	result1, #21
08548     28 00 90 5D |  if_ne	jmp	#LR__0770
0854c     37 00 00 FF 
08550     44 E4 05 F1 | 	add	objptr, ##28228
08554     F2 26 02 FB | 	rdlong	local01, objptr
08558     01 26 06 F1 | 	add	local01, #1
0855c     F2 26 62 FC | 	wrlong	local01, objptr
08560     37 00 00 FF 
08564     44 E4 85 F1 | 	sub	objptr, ##28228
08568     F8 2E B0 FD | 	call	#_expr
0856c                 | ' err=expr() : if err>0 then return err
0856c     01 FA 15 F2 | 	cmp	result1, #1 wc
08570                 | ' return 0
08570     00 FA 05 C6 |  if_b	mov	result1, #0
08574                 | LR__0770
08574     A7 F0 03 F6 | 	mov	ptra, fp
08578     B2 00 A0 FD | 	call	#popregs_
0857c                 | _compile_fun_4p_ret
0857c     2D 00 64 FD | 	ret
08580                 | 
08580                 | ' 
08580                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08580                 | ' 
08580                 | ' function compile_fun_varp() as ulong,ulong 
08580                 | _compile_fun_varp
08580     03 4A 05 F6 | 	mov	COUNT_, #3
08584     A8 00 A0 FD | 	call	#pushregs_
08588     00 26 06 F6 | 	mov	local01, #0
0858c                 | ' 
0858c                 | ' i=0 : err=0
0858c                 | ' if lparts(ct).token<>token_end then
0858c     37 00 00 FF 
08590     44 E4 05 F1 | 	add	objptr, ##28228
08594     F2 28 02 FB | 	rdlong	local02, objptr
08598     03 28 66 F0 | 	shl	local02, #3
0859c     02 00 00 FF 
085a0     38 E4 85 F1 | 	sub	objptr, ##1080
085a4     F2 28 02 F1 | 	add	local02, objptr
085a8     04 28 06 F1 | 	add	local02, #4
085ac     14 29 02 FB | 	rdlong	local02, local02
085b0     FE 29 0E F2 | 	cmp	local02, #510 wz
085b4     35 00 00 FF 
085b8     0C E4 85 F1 | 	sub	objptr, ##27148
085bc     88 00 90 AD |  if_e	jmp	#LR__0781
085c0                 | '   do
085c0                 | LR__0780
085c0     A0 2E B0 FD | 	call	#_expr
085c4     01 26 06 F1 | 	add	local01, #1
085c8                 | '     expr()
085c8                 | '     i+=1
085c8                 | '     if lparts(ct).token=token_comma then ct+=1
085c8     37 00 00 FF 
085cc     44 E4 05 F1 | 	add	objptr, ##28228
085d0     F2 28 02 FB | 	rdlong	local02, objptr
085d4     03 28 66 F0 | 	shl	local02, #3
085d8     02 00 00 FF 
085dc     38 E4 85 F1 | 	sub	objptr, ##1080
085e0     F2 28 02 F1 | 	add	local02, objptr
085e4     04 28 06 F1 | 	add	local02, #4
085e8     14 29 02 FB | 	rdlong	local02, local02
085ec     11 28 0E F2 | 	cmp	local02, #17 wz
085f0     35 00 00 FF 
085f4     0C E4 85 F1 | 	sub	objptr, ##27148
085f8     37 00 00 AF 
085fc     44 E4 05 A1 |  if_e	add	objptr, ##28228
08600     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08604     01 2A 06 A1 |  if_e	add	local03, #1
08608     F2 2A 62 AC |  if_e	wrlong	local03, objptr
0860c     37 00 00 AF 
08610     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08614                 | '     if lparts(ct).token=token_end then exit loop
08614     37 00 00 FF 
08618     44 E4 05 F1 | 	add	objptr, ##28228
0861c     F2 28 02 FB | 	rdlong	local02, objptr
08620     03 28 66 F0 | 	shl	local02, #3
08624     02 00 00 FF 
08628     38 E4 85 F1 | 	sub	objptr, ##1080
0862c     F2 28 02 F1 | 	add	local02, objptr
08630     04 28 06 F1 | 	add	local02, #4
08634     14 29 02 FB | 	rdlong	local02, local02
08638     FE 29 0E F2 | 	cmp	local02, #510 wz
0863c     35 00 00 FF 
08640     0C E4 85 F1 | 	sub	objptr, ##27148
08644     78 FF 9F 5D |  if_ne	jmp	#LR__0780
08648                 | LR__0781
08648                 | ' return i,err
08648     13 FB 01 F6 | 	mov	result1, local01
0864c     00 FC 05 F6 | 	mov	result2, #0
08650     A7 F0 03 F6 | 	mov	ptra, fp
08654     B2 00 A0 FD | 	call	#popregs_
08658                 | _compile_fun_varp_ret
08658     2D 00 64 FD | 	ret
0865c                 | 
0865c                 | ' 
0865c                 | ' '----  Compile read. The same as compile_input() except printing a prompt
0865c                 | ' 
0865c                 | ' function compile_read() as ulong,ulong 
0865c                 | _compile_read
0865c     04 4A 05 F6 | 	mov	COUNT_, #4
08660     A8 00 A0 FD | 	call	#pushregs_
08664     00 26 06 F6 | 	mov	local01, #0
08668                 | ' 
08668                 | ' i=0 : err=0
08668                 | ' if lparts(ct).token<>token_end then
08668     37 00 00 FF 
0866c     44 E4 05 F1 | 	add	objptr, ##28228
08670     F2 28 02 FB | 	rdlong	local02, objptr
08674     03 28 66 F0 | 	shl	local02, #3
08678     02 00 00 FF 
0867c     38 E4 85 F1 | 	sub	objptr, ##1080
08680     F2 28 02 F1 | 	add	local02, objptr
08684     04 28 06 F1 | 	add	local02, #4
08688     14 29 02 FB | 	rdlong	local02, local02
0868c     FE 29 0E F2 | 	cmp	local02, #510 wz
08690     35 00 00 FF 
08694     0C E4 85 F1 | 	sub	objptr, ##27148
08698     98 00 90 AD |  if_e	jmp	#LR__0791
0869c                 | '   do
0869c                 | LR__0790
0869c     30 2A B0 FD | 	call	#_getaddr
086a0     FD 2A 02 F6 | 	mov	local03, result1
086a4     37 00 00 FF 
086a8     44 E4 05 F1 | 	add	objptr, ##28228
086ac     F2 28 02 FB | 	rdlong	local02, objptr
086b0     01 28 06 F1 | 	add	local02, #1
086b4     F2 28 62 FC | 	wrlong	local02, objptr
086b8     01 26 06 F1 | 	add	local01, #1
086bc                 | '     err=getaddr() :ct+=1
086bc                 | '     i+=1 
086bc                 | '     if lparts(ct).token=token_comma then ct+=1 
086bc     03 28 66 F0 | 	shl	local02, #3
086c0     02 00 00 FF 
086c4     38 E4 85 F1 | 	sub	objptr, ##1080
086c8     F2 28 02 F1 | 	add	local02, objptr
086cc     04 28 06 F1 | 	add	local02, #4
086d0     14 29 02 FB | 	rdlong	local02, local02
086d4     11 28 0E F2 | 	cmp	local02, #17 wz
086d8     35 00 00 FF 
086dc     0C E4 85 F1 | 	sub	objptr, ##27148
086e0     37 00 00 AF 
086e4     44 E4 05 A1 |  if_e	add	objptr, ##28228
086e8     F2 2C 02 AB |  if_e	rdlong	local04, objptr
086ec     01 2C 06 A1 |  if_e	add	local04, #1
086f0     F2 2C 62 AC |  if_e	wrlong	local04, objptr
086f4     37 00 00 AF 
086f8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
086fc                 | '     if lparts(ct).token=token_end then exit loop
086fc     37 00 00 FF 
08700     44 E4 05 F1 | 	add	objptr, ##28228
08704     F2 28 02 FB | 	rdlong	local02, objptr
08708     03 28 66 F0 | 	shl	local02, #3
0870c     02 00 00 FF 
08710     38 E4 85 F1 | 	sub	objptr, ##1080
08714     F2 28 02 F1 | 	add	local02, objptr
08718     04 28 06 F1 | 	add	local02, #4
0871c     14 29 02 FB | 	rdlong	local02, local02
08720     FE 29 0E F2 | 	cmp	local02, #510 wz
08724     35 00 00 FF 
08728     0C E4 85 F1 | 	sub	objptr, ##27148
0872c     08 00 90 AD |  if_e	jmp	#LR__0792
08730     68 FF 9F FD | 	jmp	#LR__0790
08734                 | LR__0791
08734     36 2A 06 F6 | 	mov	local03, #54
08738                 | LR__0792
08738                 | ' return i,err
08738     13 FB 01 F6 | 	mov	result1, local01
0873c     15 FD 01 F6 | 	mov	result2, local03
08740     A7 F0 03 F6 | 	mov	ptra, fp
08744     B2 00 A0 FD | 	call	#popregs_
08748                 | _compile_read_ret
08748     2D 00 64 FD | 	ret
0874c                 | 
0874c                 | ' 
0874c                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
0874c                 | ' 
0874c                 | ' function compile_input() as ulong,ulong 
0874c                 | _compile_input
0874c     0F 4A 05 F6 | 	mov	COUNT_, #15
08750     A8 00 A0 FD | 	call	#pushregs_
08754                 | ' 
08754                 | ' if lparts(ct).token=token_string then
08754     37 00 00 FF 
08758     44 E4 05 F1 | 	add	objptr, ##28228
0875c     F2 16 02 FB | 	rdlong	arg03, objptr
08760     03 16 66 F0 | 	shl	arg03, #3
08764     02 00 00 FF 
08768     38 E4 85 F1 | 	sub	objptr, ##1080
0876c     F2 16 02 F1 | 	add	arg03, objptr
08770     04 16 06 F1 | 	add	arg03, #4
08774     0B FD 01 FB | 	rdlong	result2, arg03
08778     01 00 00 FF 
0877c     03 FC 0D F2 | 	cmp	result2, ##515 wz
08780     35 00 00 FF 
08784     0C E4 85 F1 | 	sub	objptr, ##27148
08788     38 06 90 5D |  if_ne	jmp	#LR__0807
0878c     37 00 00 FF 
08790     44 E4 05 F1 | 	add	objptr, ##28228
08794     F2 14 02 FB | 	rdlong	arg02, objptr
08798     03 14 66 F0 | 	shl	arg02, #3
0879c     02 00 00 FF 
087a0     38 E4 85 F1 | 	sub	objptr, ##1080
087a4     F2 14 02 F1 | 	add	arg02, objptr
087a8     0A 13 02 FB | 	rdlong	arg01, arg02
087ac     35 00 00 FF 
087b0     0C E4 85 F1 | 	sub	objptr, ##27148
087b4     09 2D 02 F6 | 	mov	local04, arg01
087b8     97 06 48 FB | 	callpa	#(@LR__0801-@LR__0800)>>2,fcache_load_ptr_
087bc                 | LR__0800
087bc     16 FB C9 FA | 	rdbyte	result1, local04 wz
087c0     01 2C 06 51 |  if_ne	add	local04, #1
087c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0800
087c8                 | LR__0801
087c8     09 2D 82 F1 | 	sub	local04, arg01
087cc     16 FB 01 F6 | 	mov	result1, local04
087d0     52 00 00 FF 
087d4     9C E4 05 F1 | 	add	objptr, ##42140
087d8     F2 FA 61 FC | 	wrlong	result1, objptr
087dc     58 E4 85 F1 | 	sub	objptr, #88
087e0     F2 12 02 FB | 	rdlong	arg01, objptr
087e4     FD 12 82 F1 | 	sub	arg01, result1
087e8     04 12 86 F1 | 	sub	arg01, #4
087ec     03 12 26 F5 | 	andn	arg01, #3
087f0     F2 12 62 FC | 	wrlong	arg01, objptr
087f4     58 E4 05 F1 | 	add	objptr, #88
087f8     F2 14 02 FB | 	rdlong	arg02, objptr
087fc     52 00 00 FF 
08800     9C E4 85 F1 | 	sub	objptr, ##42140
08804     24 99 B1 FD | 	call	#_pslpoke
08808                 | '   pslpoke memtop,l
08808                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08808     01 2E 06 F6 | 	mov	local05, #1
0880c     52 00 00 FF 
08810     9C E4 05 F1 | 	add	objptr, ##42140
08814     F2 30 02 FB | 	rdlong	local06, objptr
08818     52 00 00 FF 
0881c     9C E4 85 F1 | 	sub	objptr, ##42140
08820     01 30 06 F1 | 	add	local06, #1
08824                 | LR__0802
08824     18 2F 52 F2 | 	cmps	local05, local06 wc
08828     5C 00 90 3D |  if_ae	jmp	#LR__0803
0882c     52 00 00 FF 
08830     44 E4 05 F1 | 	add	objptr, ##42052
08834     F2 32 02 FB | 	rdlong	local07, objptr
08838     03 32 06 F1 | 	add	local07, #3
0883c     17 33 02 F1 | 	add	local07, local05
08840     1B 00 00 FF 
08844     00 E4 85 F1 | 	sub	objptr, ##13824
08848     F2 14 02 FB | 	rdlong	arg02, objptr
0884c     03 14 66 F0 | 	shl	arg02, #3
08850     02 00 00 FF 
08854     38 E4 85 F1 | 	sub	objptr, ##1080
08858     F2 14 02 F1 | 	add	arg02, objptr
0885c     0A 13 02 FB | 	rdlong	arg01, arg02
08860     17 15 02 F6 | 	mov	arg02, local05
08864     01 16 06 F6 | 	mov	arg03, #1
08868     35 00 00 FF 
0886c     0C E4 85 F1 | 	sub	objptr, ##27148
08870     98 F2 B1 FD | 	call	#__system__Mid_S
08874     FD 14 C2 FA | 	rdbyte	arg02, result1
08878     19 13 02 F6 | 	mov	arg01, local07
0887c     3C 99 B1 FD | 	call	#_pspoke
08880     01 2E 06 F1 | 	add	local05, #1
08884     9C FF 9F FD | 	jmp	#LR__0802
08888                 | LR__0803
08888     52 00 00 FF 
0888c     44 E4 05 F1 | 	add	objptr, ##42052
08890     F2 26 02 FB | 	rdlong	local01, objptr
08894     2B 2A 06 F6 | 	mov	local03, #43
08898     13 35 02 F6 | 	mov	local08, local01
0889c     14 33 02 F6 | 	mov	local07, local02
088a0     15 37 02 F6 | 	mov	local09, local03
088a4     07 00 00 FF 
088a8     C8 E5 85 F1 | 	sub	objptr, ##4040
088ac     F2 30 02 FB | 	rdlong	local06, objptr
088b0     18 2F 02 F6 | 	mov	local05, local06
088b4     01 2E 66 F0 | 	shl	local05, #1
088b8     18 2F 02 F1 | 	add	local05, local06
088bc     02 2E 66 F0 | 	shl	local05, #2
088c0     03 00 00 FF 
088c4     00 E4 85 F1 | 	sub	objptr, ##1536
088c8     F2 2E 02 F1 | 	add	local05, objptr
088cc     17 35 62 FC | 	wrlong	local08, local05
088d0     03 00 00 FF 
088d4     00 E4 05 F1 | 	add	objptr, ##1536
088d8     F2 34 02 FB | 	rdlong	local08, objptr
088dc     1A 31 02 F6 | 	mov	local06, local08
088e0     01 30 66 F0 | 	shl	local06, #1
088e4     1A 31 02 F1 | 	add	local06, local08
088e8     02 30 66 F0 | 	shl	local06, #2
088ec     03 00 00 FF 
088f0     00 E4 85 F1 | 	sub	objptr, ##1536
088f4     F2 30 02 F1 | 	add	local06, objptr
088f8     04 30 06 F1 | 	add	local06, #4
088fc     18 33 62 FC | 	wrlong	local07, local06
08900     03 00 00 FF 
08904     00 E4 05 F1 | 	add	objptr, ##1536
08908     F2 34 02 FB | 	rdlong	local08, objptr
0890c     1A 33 02 F6 | 	mov	local07, local08
08910     01 32 66 F0 | 	shl	local07, #1
08914     1A 33 02 F1 | 	add	local07, local08
08918     02 32 66 F0 | 	shl	local07, #2
0891c     03 00 00 FF 
08920     00 E4 85 F1 | 	sub	objptr, ##1536
08924     F2 32 02 F1 | 	add	local07, objptr
08928     08 32 06 F1 | 	add	local07, #8
0892c     19 37 62 FC | 	wrlong	local09, local07
08930     03 00 00 FF 
08934     00 E4 05 F1 | 	add	objptr, ##1536
08938     F2 34 02 FB | 	rdlong	local08, objptr
0893c     01 34 06 F1 | 	add	local08, #1
08940     F2 34 62 FC | 	wrlong	local08, objptr
08944     13 00 00 FF 
08948     38 E4 85 F1 | 	sub	objptr, ##9784
0894c     F2 34 02 FB | 	rdlong	local08, objptr
08950     01 34 06 F1 | 	add	local08, #1
08954     F2 34 62 FC | 	wrlong	local08, objptr
08958                 | '   t1.result.uresult=memtop
08958                 | '   t1.result_type=result_string2  
08958                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08958                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08958     03 34 66 F0 | 	shl	local08, #3
0895c     02 00 00 FF 
08960     38 E4 85 F1 | 	sub	objptr, ##1080
08964     F2 34 02 F1 | 	add	local08, objptr
08968     04 34 06 F1 | 	add	local08, #4
0896c     1A 35 02 FB | 	rdlong	local08, local08
08970     11 34 0E F2 | 	cmp	local08, #17 wz
08974     35 00 00 FF 
08978     0C E4 85 F1 | 	sub	objptr, ##27148
0897c     60 01 90 5D |  if_ne	jmp	#LR__0804
08980     21 2A 06 F6 | 	mov	local03, #33
08984     13 35 02 F6 | 	mov	local08, local01
08988     14 33 02 F6 | 	mov	local07, local02
0898c     15 39 02 F6 | 	mov	local10, local03
08990     4A 00 00 FF 
08994     7C E4 05 F1 | 	add	objptr, ##38012
08998     F2 3A 02 FB | 	rdlong	local11, objptr
0899c     1D 3D 02 F6 | 	mov	local12, local11
089a0     01 3C 66 F0 | 	shl	local12, #1
089a4     1D 3D 02 F1 | 	add	local12, local11
089a8     02 3C 66 F0 | 	shl	local12, #2
089ac     03 00 00 FF 
089b0     00 E4 85 F1 | 	sub	objptr, ##1536
089b4     F2 3C 02 F1 | 	add	local12, objptr
089b8     1E 35 62 FC | 	wrlong	local08, local12
089bc     03 00 00 FF 
089c0     00 E4 05 F1 | 	add	objptr, ##1536
089c4     F2 3E 02 FB | 	rdlong	local13, objptr
089c8     1F 35 02 F6 | 	mov	local08, local13
089cc     01 34 66 F0 | 	shl	local08, #1
089d0     1F 35 02 F1 | 	add	local08, local13
089d4     02 34 66 F0 | 	shl	local08, #2
089d8     03 00 00 FF 
089dc     00 E4 85 F1 | 	sub	objptr, ##1536
089e0     F2 34 02 F1 | 	add	local08, objptr
089e4     04 34 06 F1 | 	add	local08, #4
089e8     1A 33 62 FC | 	wrlong	local07, local08
089ec     03 00 00 FF 
089f0     00 E4 05 F1 | 	add	objptr, ##1536
089f4     F2 34 02 FB | 	rdlong	local08, objptr
089f8     1A 41 02 F6 | 	mov	local14, local08
089fc     01 40 66 F0 | 	shl	local14, #1
08a00     1A 41 02 F1 | 	add	local14, local08
08a04     02 40 66 F0 | 	shl	local14, #2
08a08     03 00 00 FF 
08a0c     00 E4 85 F1 | 	sub	objptr, ##1536
08a10     F2 40 02 F1 | 	add	local14, objptr
08a14     08 40 06 F1 | 	add	local14, #8
08a18     20 39 62 FC | 	wrlong	local10, local14
08a1c     03 00 00 FF 
08a20     00 E4 05 F1 | 	add	objptr, ##1536
08a24     F2 34 02 FB | 	rdlong	local08, objptr
08a28     01 34 06 F1 | 	add	local08, #1
08a2c     F2 34 62 FC | 	wrlong	local08, objptr
08a30     44 2A 06 F6 | 	mov	local03, #68
08a34     13 35 02 F6 | 	mov	local08, local01
08a38     14 33 02 F6 | 	mov	local07, local02
08a3c     15 39 02 F6 | 	mov	local10, local03
08a40     F2 40 02 FB | 	rdlong	local14, objptr
08a44     20 3F 02 F6 | 	mov	local13, local14
08a48     01 3E 66 F0 | 	shl	local13, #1
08a4c     20 3F 02 F1 | 	add	local13, local14
08a50     02 3E 66 F0 | 	shl	local13, #2
08a54     03 00 00 FF 
08a58     00 E4 85 F1 | 	sub	objptr, ##1536
08a5c     F2 3E 02 F1 | 	add	local13, objptr
08a60     1F 35 62 FC | 	wrlong	local08, local13
08a64     03 00 00 FF 
08a68     00 E4 05 F1 | 	add	objptr, ##1536
08a6c     F2 40 02 FB | 	rdlong	local14, objptr
08a70     20 3F 02 F6 | 	mov	local13, local14
08a74     01 3E 66 F0 | 	shl	local13, #1
08a78     20 3F 02 F1 | 	add	local13, local14
08a7c     02 3E 66 F0 | 	shl	local13, #2
08a80     03 00 00 FF 
08a84     00 E4 85 F1 | 	sub	objptr, ##1536
08a88     F2 3E 02 F1 | 	add	local13, objptr
08a8c     04 3E 06 F1 | 	add	local13, #4
08a90     1F 33 62 FC | 	wrlong	local07, local13
08a94     03 00 00 FF 
08a98     00 E4 05 F1 | 	add	objptr, ##1536
08a9c     F2 3E 02 FB | 	rdlong	local13, objptr
08aa0     1F 41 02 F6 | 	mov	local14, local13
08aa4     01 40 66 F0 | 	shl	local14, #1
08aa8     1F 41 02 F1 | 	add	local14, local13
08aac     02 40 66 F0 | 	shl	local14, #2
08ab0     03 00 00 FF 
08ab4     00 E4 85 F1 | 	sub	objptr, ##1536
08ab8     F2 40 02 F1 | 	add	local14, objptr
08abc     08 40 06 F1 | 	add	local14, #8
08ac0     20 39 62 FC | 	wrlong	local10, local14
08ac4     03 00 00 FF 
08ac8     00 E4 05 F1 | 	add	objptr, ##1536
08acc     F2 34 02 FB | 	rdlong	local08, objptr
08ad0     01 34 06 F1 | 	add	local08, #1
08ad4     F2 34 62 FC | 	wrlong	local08, objptr
08ad8     4A 00 00 FF 
08adc     7C E4 85 F1 | 	sub	objptr, ##38012
08ae0                 | LR__0804
08ae0                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08ae0     37 00 00 FF 
08ae4     44 E4 05 F1 | 	add	objptr, ##28228
08ae8     F2 34 02 FB | 	rdlong	local08, objptr
08aec     03 34 66 F0 | 	shl	local08, #3
08af0     02 00 00 FF 
08af4     38 E4 85 F1 | 	sub	objptr, ##1080
08af8     F2 34 02 F1 | 	add	local08, objptr
08afc     04 34 06 F1 | 	add	local08, #4
08b00     1A 41 02 FB | 	rdlong	local14, local08
08b04     12 40 0E F2 | 	cmp	local14, #18 wz
08b08     35 00 00 FF 
08b0c     0C E4 85 F1 | 	sub	objptr, ##27148
08b10     60 01 90 5D |  if_ne	jmp	#LR__0805
08b14     22 2A 06 F6 | 	mov	local03, #34
08b18     13 35 02 F6 | 	mov	local08, local01
08b1c     14 33 02 F6 | 	mov	local07, local02
08b20     15 39 02 F6 | 	mov	local10, local03
08b24     4A 00 00 FF 
08b28     7C E4 05 F1 | 	add	objptr, ##38012
08b2c     F2 40 02 FB | 	rdlong	local14, objptr
08b30     20 3F 02 F6 | 	mov	local13, local14
08b34     01 3E 66 F0 | 	shl	local13, #1
08b38     20 3F 02 F1 | 	add	local13, local14
08b3c     02 3E 66 F0 | 	shl	local13, #2
08b40     03 00 00 FF 
08b44     00 E4 85 F1 | 	sub	objptr, ##1536
08b48     F2 3E 02 F1 | 	add	local13, objptr
08b4c     1F 35 62 FC | 	wrlong	local08, local13
08b50     03 00 00 FF 
08b54     00 E4 05 F1 | 	add	objptr, ##1536
08b58     F2 40 02 FB | 	rdlong	local14, objptr
08b5c     20 35 02 F6 | 	mov	local08, local14
08b60     01 34 66 F0 | 	shl	local08, #1
08b64     20 35 02 F1 | 	add	local08, local14
08b68     02 34 66 F0 | 	shl	local08, #2
08b6c     03 00 00 FF 
08b70     00 E4 85 F1 | 	sub	objptr, ##1536
08b74     F2 34 02 F1 | 	add	local08, objptr
08b78     04 34 06 F1 | 	add	local08, #4
08b7c     1A 33 62 FC | 	wrlong	local07, local08
08b80     03 00 00 FF 
08b84     00 E4 05 F1 | 	add	objptr, ##1536
08b88     F2 34 02 FB | 	rdlong	local08, objptr
08b8c     1A 41 02 F6 | 	mov	local14, local08
08b90     01 40 66 F0 | 	shl	local14, #1
08b94     1A 41 02 F1 | 	add	local14, local08
08b98     02 40 66 F0 | 	shl	local14, #2
08b9c     03 00 00 FF 
08ba0     00 E4 85 F1 | 	sub	objptr, ##1536
08ba4     F2 40 02 F1 | 	add	local14, objptr
08ba8     08 40 06 F1 | 	add	local14, #8
08bac     20 39 62 FC | 	wrlong	local10, local14
08bb0     03 00 00 FF 
08bb4     00 E4 05 F1 | 	add	objptr, ##1536
08bb8     F2 34 02 FB | 	rdlong	local08, objptr
08bbc     01 34 06 F1 | 	add	local08, #1
08bc0     F2 34 62 FC | 	wrlong	local08, objptr
08bc4     44 2A 06 F6 | 	mov	local03, #68
08bc8     13 35 02 F6 | 	mov	local08, local01
08bcc     14 33 02 F6 | 	mov	local07, local02
08bd0     15 39 02 F6 | 	mov	local10, local03
08bd4     F2 40 02 FB | 	rdlong	local14, objptr
08bd8     20 3F 02 F6 | 	mov	local13, local14
08bdc     01 3E 66 F0 | 	shl	local13, #1
08be0     20 3F 02 F1 | 	add	local13, local14
08be4     02 3E 66 F0 | 	shl	local13, #2
08be8     03 00 00 FF 
08bec     00 E4 85 F1 | 	sub	objptr, ##1536
08bf0     F2 3E 02 F1 | 	add	local13, objptr
08bf4     1F 35 62 FC | 	wrlong	local08, local13
08bf8     03 00 00 FF 
08bfc     00 E4 05 F1 | 	add	objptr, ##1536
08c00     F2 40 02 FB | 	rdlong	local14, objptr
08c04     20 3F 02 F6 | 	mov	local13, local14
08c08     01 3E 66 F0 | 	shl	local13, #1
08c0c     20 3F 02 F1 | 	add	local13, local14
08c10     02 3E 66 F0 | 	shl	local13, #2
08c14     03 00 00 FF 
08c18     00 E4 85 F1 | 	sub	objptr, ##1536
08c1c     F2 3E 02 F1 | 	add	local13, objptr
08c20     04 3E 06 F1 | 	add	local13, #4
08c24     1F 33 62 FC | 	wrlong	local07, local13
08c28     03 00 00 FF 
08c2c     00 E4 05 F1 | 	add	objptr, ##1536
08c30     F2 3E 02 FB | 	rdlong	local13, objptr
08c34     1F 41 02 F6 | 	mov	local14, local13
08c38     01 40 66 F0 | 	shl	local14, #1
08c3c     1F 41 02 F1 | 	add	local14, local13
08c40     02 40 66 F0 | 	shl	local14, #2
08c44     03 00 00 FF 
08c48     00 E4 85 F1 | 	sub	objptr, ##1536
08c4c     F2 40 02 F1 | 	add	local14, objptr
08c50     08 40 06 F1 | 	add	local14, #8
08c54     20 39 62 FC | 	wrlong	local10, local14
08c58     03 00 00 FF 
08c5c     00 E4 05 F1 | 	add	objptr, ##1536
08c60     F2 34 02 FB | 	rdlong	local08, objptr
08c64     01 34 06 F1 | 	add	local08, #1
08c68     F2 34 62 FC | 	wrlong	local08, objptr
08c6c     4A 00 00 FF 
08c70     7C E4 85 F1 | 	sub	objptr, ##38012
08c74                 | LR__0805
08c74                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08c74     37 00 00 FF 
08c78     44 E4 05 F1 | 	add	objptr, ##28228
08c7c     F2 34 02 FB | 	rdlong	local08, objptr
08c80     03 34 66 F0 | 	shl	local08, #3
08c84     02 00 00 FF 
08c88     38 E4 85 F1 | 	sub	objptr, ##1080
08c8c     F2 34 02 F1 | 	add	local08, objptr
08c90     04 34 06 F1 | 	add	local08, #4
08c94     1A 41 02 FB | 	rdlong	local14, local08
08c98     12 40 0E F2 | 	cmp	local14, #18 wz
08c9c     35 00 00 FF 
08ca0     0C E4 85 F1 | 	sub	objptr, ##27148
08ca4     00 01 90 AD |  if_e	jmp	#LR__0806
08ca8     37 00 00 FF 
08cac     44 E4 05 F1 | 	add	objptr, ##28228
08cb0     F2 34 02 FB | 	rdlong	local08, objptr
08cb4     03 34 66 F0 | 	shl	local08, #3
08cb8     02 00 00 FF 
08cbc     38 E4 85 F1 | 	sub	objptr, ##1080
08cc0     F2 34 02 F1 | 	add	local08, objptr
08cc4     04 34 06 F1 | 	add	local08, #4
08cc8     1A 41 02 FB | 	rdlong	local14, local08
08ccc     11 40 0E F2 | 	cmp	local14, #17 wz
08cd0     35 00 00 FF 
08cd4     0C E4 85 F1 | 	sub	objptr, ##27148
08cd8     CC 00 90 AD |  if_e	jmp	#LR__0806
08cdc     44 2A 06 F6 | 	mov	local03, #68
08ce0     13 35 02 F6 | 	mov	local08, local01
08ce4     14 33 02 F6 | 	mov	local07, local02
08ce8     15 39 02 F6 | 	mov	local10, local03
08cec     4A 00 00 FF 
08cf0     7C E4 05 F1 | 	add	objptr, ##38012
08cf4     F2 40 02 FB | 	rdlong	local14, objptr
08cf8     20 3F 02 F6 | 	mov	local13, local14
08cfc     01 3E 66 F0 | 	shl	local13, #1
08d00     20 3F 02 F1 | 	add	local13, local14
08d04     02 3E 66 F0 | 	shl	local13, #2
08d08     03 00 00 FF 
08d0c     00 E4 85 F1 | 	sub	objptr, ##1536
08d10     F2 3E 02 F1 | 	add	local13, objptr
08d14     1F 35 62 FC | 	wrlong	local08, local13
08d18     03 00 00 FF 
08d1c     00 E4 05 F1 | 	add	objptr, ##1536
08d20     F2 40 02 FB | 	rdlong	local14, objptr
08d24     20 3F 02 F6 | 	mov	local13, local14
08d28     01 3E 66 F0 | 	shl	local13, #1
08d2c     20 3F 02 F1 | 	add	local13, local14
08d30     02 3E 66 F0 | 	shl	local13, #2
08d34     03 00 00 FF 
08d38     00 E4 85 F1 | 	sub	objptr, ##1536
08d3c     F2 3E 02 F1 | 	add	local13, objptr
08d40     04 3E 06 F1 | 	add	local13, #4
08d44     1F 33 62 FC | 	wrlong	local07, local13
08d48     03 00 00 FF 
08d4c     00 E4 05 F1 | 	add	objptr, ##1536
08d50     F2 3E 02 FB | 	rdlong	local13, objptr
08d54     1F 41 02 F6 | 	mov	local14, local13
08d58     01 40 66 F0 | 	shl	local14, #1
08d5c     1F 41 02 F1 | 	add	local14, local13
08d60     02 40 66 F0 | 	shl	local14, #2
08d64     03 00 00 FF 
08d68     00 E4 85 F1 | 	sub	objptr, ##1536
08d6c     F2 40 02 F1 | 	add	local14, objptr
08d70     08 40 06 F1 | 	add	local14, #8
08d74     20 39 62 FC | 	wrlong	local10, local14
08d78     03 00 00 FF 
08d7c     00 E4 05 F1 | 	add	objptr, ##1536
08d80     F2 34 02 FB | 	rdlong	local08, objptr
08d84     01 34 06 F1 | 	add	local08, #1
08d88     F2 34 62 FC | 	wrlong	local08, objptr
08d8c     13 00 00 FF 
08d90     38 E4 85 F1 | 	sub	objptr, ##9784
08d94     F2 34 02 FB | 	rdlong	local08, objptr
08d98     01 34 86 F1 | 	sub	local08, #1
08d9c     F2 34 62 FC | 	wrlong	local08, objptr
08da0     37 00 00 FF 
08da4     44 E4 85 F1 | 	sub	objptr, ##28228
08da8                 | LR__0806
08da8     37 00 00 FF 
08dac     44 E4 05 F1 | 	add	objptr, ##28228
08db0     F2 34 02 FB | 	rdlong	local08, objptr
08db4     01 34 06 F1 | 	add	local08, #1
08db8     F2 34 62 FC | 	wrlong	local08, objptr
08dbc     37 00 00 FF 
08dc0     44 E4 85 F1 | 	sub	objptr, ##28228
08dc4                 | LR__0807
08dc4     00 2E 06 F6 | 	mov	local05, #0
08dc8                 | ' i=0 : err=0
08dc8                 | ' if lparts(ct).token<>token_end then
08dc8     37 00 00 FF 
08dcc     44 E4 05 F1 | 	add	objptr, ##28228
08dd0     F2 40 02 FB | 	rdlong	local14, objptr
08dd4     03 40 66 F0 | 	shl	local14, #3
08dd8     02 00 00 FF 
08ddc     38 E4 85 F1 | 	sub	objptr, ##1080
08de0     F2 40 02 F1 | 	add	local14, objptr
08de4     04 40 06 F1 | 	add	local14, #4
08de8     20 41 02 FB | 	rdlong	local14, local14
08dec     FE 41 0E F2 | 	cmp	local14, #510 wz
08df0     35 00 00 FF 
08df4     0C E4 85 F1 | 	sub	objptr, ##27148
08df8     98 00 90 AD |  if_e	jmp	#LR__0809
08dfc                 | '   do
08dfc                 | LR__0808
08dfc     D0 22 B0 FD | 	call	#_getaddr
08e00     FD 42 02 F6 | 	mov	local15, result1
08e04     37 00 00 FF 
08e08     44 E4 05 F1 | 	add	objptr, ##28228
08e0c     F2 40 02 FB | 	rdlong	local14, objptr
08e10     01 40 06 F1 | 	add	local14, #1
08e14     F2 40 62 FC | 	wrlong	local14, objptr
08e18     01 2E 06 F1 | 	add	local05, #1
08e1c                 | '     err=getaddr() :ct+=1
08e1c                 | '     i+=1 
08e1c                 | '     if lparts(ct).token=token_comma then ct+=1 
08e1c     03 40 66 F0 | 	shl	local14, #3
08e20     02 00 00 FF 
08e24     38 E4 85 F1 | 	sub	objptr, ##1080
08e28     F2 40 02 F1 | 	add	local14, objptr
08e2c     04 40 06 F1 | 	add	local14, #4
08e30     20 41 02 FB | 	rdlong	local14, local14
08e34     11 40 0E F2 | 	cmp	local14, #17 wz
08e38     35 00 00 FF 
08e3c     0C E4 85 F1 | 	sub	objptr, ##27148
08e40     37 00 00 AF 
08e44     44 E4 05 A1 |  if_e	add	objptr, ##28228
08e48     F2 34 02 AB |  if_e	rdlong	local08, objptr
08e4c     01 34 06 A1 |  if_e	add	local08, #1
08e50     F2 34 62 AC |  if_e	wrlong	local08, objptr
08e54     37 00 00 AF 
08e58     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08e5c                 | '     if lparts(ct).token=token_end then exit loop
08e5c     37 00 00 FF 
08e60     44 E4 05 F1 | 	add	objptr, ##28228
08e64     F2 40 02 FB | 	rdlong	local14, objptr
08e68     03 40 66 F0 | 	shl	local14, #3
08e6c     02 00 00 FF 
08e70     38 E4 85 F1 | 	sub	objptr, ##1080
08e74     F2 40 02 F1 | 	add	local14, objptr
08e78     04 40 06 F1 | 	add	local14, #4
08e7c     20 41 02 FB | 	rdlong	local14, local14
08e80     FE 41 0E F2 | 	cmp	local14, #510 wz
08e84     35 00 00 FF 
08e88     0C E4 85 F1 | 	sub	objptr, ##27148
08e8c     08 00 90 AD |  if_e	jmp	#LR__0810
08e90     68 FF 9F FD | 	jmp	#LR__0808
08e94                 | LR__0809
08e94     36 42 06 F6 | 	mov	local15, #54
08e98                 | LR__0810
08e98                 | ' return i,err
08e98     17 FB 01 F6 | 	mov	result1, local05
08e9c     21 FD 01 F6 | 	mov	result2, local15
08ea0     A7 F0 03 F6 | 	mov	ptra, fp
08ea4     B2 00 A0 FD | 	call	#popregs_
08ea8                 | _compile_input_ret
08ea8     2D 00 64 FD | 	ret
08eac                 | 
08eac                 | ' 
08eac                 | ' '----- compile assign to an array element
08eac                 | ' 
08eac                 | ' function compile_array_assign() as ulong 
08eac                 | _compile_array_assign
08eac     0B 4A 05 F6 | 	mov	COUNT_, #11
08eb0     A8 00 A0 FD | 	call	#pushregs_
08eb4     00 2C 06 F6 | 	mov	local04, #0
08eb8     00 2E 06 F6 | 	mov	local05, #0
08ebc     37 00 00 FF 
08ec0     44 E4 05 F1 | 	add	objptr, ##28228
08ec4     F2 30 02 FB | 	rdlong	local06, objptr
08ec8     18 FB 01 F6 | 	mov	result1, local06
08ecc     01 FA 85 F1 | 	sub	result1, #1
08ed0     03 FA 65 F0 | 	shl	result1, #3
08ed4     02 00 00 FF 
08ed8     38 E4 85 F1 | 	sub	objptr, ##1080
08edc     F2 FA 01 F1 | 	add	result1, objptr
08ee0     FD 32 02 FB | 	rdlong	local07, result1
08ee4                 | ' numpar=0 : err=0
08ee4                 | ' varname$=lparts(ct-1).part$
08ee4                 | ' if lparts(ct).token=token_lpar then
08ee4     03 30 66 F0 | 	shl	local06, #3
08ee8     F2 30 02 F1 | 	add	local06, objptr
08eec     04 30 06 F1 | 	add	local06, #4
08ef0     18 31 02 FB | 	rdlong	local06, local06
08ef4     15 30 0E F2 | 	cmp	local06, #21 wz
08ef8     35 00 00 FF 
08efc     0C E4 85 F1 | 	sub	objptr, ##27148
08f00     F4 01 90 5D |  if_ne	jmp	#LR__0824
08f04     37 00 00 FF 
08f08     44 E4 05 F1 | 	add	objptr, ##28228
08f0c     F2 34 02 FB | 	rdlong	local08, objptr
08f10     01 34 06 F1 | 	add	local08, #1
08f14     F2 34 62 FC | 	wrlong	local08, objptr
08f18     37 00 00 FF 
08f1c     44 E4 85 F1 | 	sub	objptr, ##28228
08f20                 | '   ct+=1 											' omit this lpar, this is for expr list
08f20                 | '   do
08f20                 | LR__0820
08f20     40 25 B0 FD | 	call	#_expr
08f24     37 00 00 FF 
08f28     44 E4 05 F1 | 	add	objptr, ##28228
08f2c     F2 30 02 FB | 	rdlong	local06, objptr
08f30     01 30 06 F1 | 	add	local06, #1
08f34     F2 30 62 FC | 	wrlong	local06, objptr
08f38     01 2C 06 F1 | 	add	local04, #1
08f3c     01 30 86 F1 | 	sub	local06, #1
08f40     03 30 66 F0 | 	shl	local06, #3
08f44     02 00 00 FF 
08f48     38 E4 85 F1 | 	sub	objptr, ##1080
08f4c     F2 30 02 F1 | 	add	local06, objptr
08f50     04 30 06 F1 | 	add	local06, #4
08f54     18 35 02 FB | 	rdlong	local08, local06
08f58     14 34 0E F2 | 	cmp	local08, #20 wz
08f5c     35 00 00 FF 
08f60     0C E4 85 F1 | 	sub	objptr, ##27148
08f64     34 00 90 AD |  if_e	jmp	#LR__0821
08f68     37 00 00 FF 
08f6c     44 E4 05 F1 | 	add	objptr, ##28228
08f70     F2 34 02 FB | 	rdlong	local08, objptr
08f74     03 34 66 F0 | 	shl	local08, #3
08f78     02 00 00 FF 
08f7c     38 E4 85 F1 | 	sub	objptr, ##1080
08f80     F2 34 02 F1 | 	add	local08, objptr
08f84     04 34 06 F1 | 	add	local08, #4
08f88     1A 35 02 FB | 	rdlong	local08, local08
08f8c     FE 35 0E F2 | 	cmp	local08, #510 wz
08f90     35 00 00 FF 
08f94     0C E4 85 F1 | 	sub	objptr, ##27148
08f98     84 FF 9F 5D |  if_ne	jmp	#LR__0820
08f9c                 | LR__0821
08f9c     37 00 00 FF 
08fa0     44 E4 05 F1 | 	add	objptr, ##28228
08fa4     F2 34 02 FB | 	rdlong	local08, objptr
08fa8     01 34 06 F1 | 	add	local08, #1
08fac     F2 34 62 FC | 	wrlong	local08, objptr
08fb0     37 00 00 FF 
08fb4     44 E4 85 F1 | 	sub	objptr, ##28228
08fb8     A8 24 B0 FD | 	call	#_expr
08fbc     01 36 66 F6 | 	neg	local09, #1
08fc0     00 38 06 F6 | 	mov	local10, #0
08fc4                 | '   ct+=1 : expr()
08fc4                 | '   j=-1 : i=0 
08fc4                 | '   do 
08fc4                 | LR__0822
08fc4                 | '     if variables(i).name=varname$ then j=i: exit loop
08fc4     1C 31 02 F6 | 	mov	local06, local10
08fc8     04 30 66 F0 | 	shl	local06, #4
08fcc     14 00 00 FF 
08fd0     F8 E5 05 F1 | 	add	objptr, ##10744
08fd4     F2 30 02 F1 | 	add	local06, objptr
08fd8     18 13 02 FB | 	rdlong	arg01, local06
08fdc     19 15 02 F6 | 	mov	arg02, local07
08fe0     14 00 00 FF 
08fe4     F8 E5 85 F1 | 	sub	objptr, ##10744
08fe8     B4 C9 B1 FD | 	call	#__system___string_cmp
08fec     00 FA 0D F2 | 	cmp	result1, #0 wz
08ff0     1C 37 02 A6 |  if_e	mov	local09, local10
08ff4     20 00 90 AD |  if_e	jmp	#LR__0823
08ff8     01 38 06 F1 | 	add	local10, #1
08ffc     35 00 00 FF 
09000     08 E4 05 F1 | 	add	objptr, ##27144
09004     F2 34 02 FB | 	rdlong	local08, objptr
09008     35 00 00 FF 
0900c     08 E4 85 F1 | 	sub	objptr, ##27144
09010     1A 39 5A F2 | 	cmps	local10, local08 wcz
09014     AC FF 9F ED |  if_be	jmp	#LR__0822
09018                 | LR__0823
09018     1B 27 02 F6 | 	mov	local01, local09
0901c     16 29 02 F6 | 	mov	local02, local04
09020     17 2A 06 F6 | 	mov	local03, #23
09024     13 35 02 F6 | 	mov	local08, local01
09028     14 3B 02 F6 | 	mov	local11, local02
0902c     15 33 02 F6 | 	mov	local07, local03
09030     4A 00 00 FF 
09034     7C E4 05 F1 | 	add	objptr, ##38012
09038     F2 26 02 FB | 	rdlong	local01, objptr
0903c     13 37 02 F6 | 	mov	local09, local01
09040     01 36 66 F0 | 	shl	local09, #1
09044     13 37 02 F1 | 	add	local09, local01
09048     02 36 66 F0 | 	shl	local09, #2
0904c     03 00 00 FF 
09050     00 E4 85 F1 | 	sub	objptr, ##1536
09054     F2 36 02 F1 | 	add	local09, objptr
09058     1B 35 62 FC | 	wrlong	local08, local09
0905c     03 00 00 FF 
09060     00 E4 05 F1 | 	add	objptr, ##1536
09064     F2 26 02 FB | 	rdlong	local01, objptr
09068     13 37 02 F6 | 	mov	local09, local01
0906c     01 36 66 F0 | 	shl	local09, #1
09070     13 37 02 F1 | 	add	local09, local01
09074     02 36 66 F0 | 	shl	local09, #2
09078     03 00 00 FF 
0907c     00 E4 85 F1 | 	sub	objptr, ##1536
09080     F2 36 02 F1 | 	add	local09, objptr
09084     04 36 06 F1 | 	add	local09, #4
09088     1B 3B 62 FC | 	wrlong	local11, local09
0908c     03 00 00 FF 
09090     00 E4 05 F1 | 	add	objptr, ##1536
09094     F2 3A 02 FB | 	rdlong	local11, objptr
09098     1D 27 02 F6 | 	mov	local01, local11
0909c     01 26 66 F0 | 	shl	local01, #1
090a0     1D 27 02 F1 | 	add	local01, local11
090a4     02 26 66 F0 | 	shl	local01, #2
090a8     03 00 00 FF 
090ac     00 E4 85 F1 | 	sub	objptr, ##1536
090b0     F2 26 02 F1 | 	add	local01, objptr
090b4     08 26 06 F1 | 	add	local01, #8
090b8     13 33 62 FC | 	wrlong	local07, local01
090bc     03 00 00 FF 
090c0     00 E4 05 F1 | 	add	objptr, ##1536
090c4     F2 34 02 FB | 	rdlong	local08, objptr
090c8     01 34 06 F1 | 	add	local08, #1
090cc     F2 34 62 FC | 	wrlong	local08, objptr
090d0                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
090d0                 | '   if numpar>3 then err=45
090d0     04 2C 16 F2 | 	cmp	local04, #4 wc
090d4     2D 2E 06 36 |  if_ae	mov	local05, #45
090d8                 | '   if i>varnum then err=20
090d8     15 00 00 FF 
090dc     74 E4 85 F1 | 	sub	objptr, ##10868
090e0     F2 34 02 FB | 	rdlong	local08, objptr
090e4     35 00 00 FF 
090e8     08 E4 85 F1 | 	sub	objptr, ##27144
090ec     1A 39 5A F2 | 	cmps	local10, local08 wcz
090f0     14 2E 06 16 |  if_a	mov	local05, #20
090f4     04 00 90 FD | 	jmp	#LR__0825
090f8                 | LR__0824
090f8     0E 2E 06 F6 | 	mov	local05, #14
090fc                 | LR__0825
090fc                 | ' return err
090fc     17 FB 01 F6 | 	mov	result1, local05
09100     A7 F0 03 F6 | 	mov	ptra, fp
09104     B2 00 A0 FD | 	call	#popregs_
09108                 | _compile_array_assign_ret
09108     2D 00 64 FD | 	ret
0910c                 | 
0910c                 | ' 
0910c                 | ' '----- compile print command with its ";" and "," modifiers
0910c                 | ' 
0910c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0910c                 | _compile_print
0910c     0B 4A 05 F6 | 	mov	COUNT_, #11
09110     A8 00 A0 FD | 	call	#pushregs_
09114     00 26 06 F6 | 	mov	local01, #0
09118     1D 2A 06 F6 | 	mov	local03, #29
0911c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0911c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0911c     37 00 00 FF 
09120     44 E4 05 F1 | 	add	objptr, ##28228
09124     F2 2C 02 FB | 	rdlong	local04, objptr
09128     03 2C 66 F0 | 	shl	local04, #3
0912c     02 00 00 FF 
09130     38 E4 85 F1 | 	sub	objptr, ##1080
09134     F2 2C 02 F1 | 	add	local04, objptr
09138     04 2C 06 F1 | 	add	local04, #4
0913c     16 2D 02 FB | 	rdlong	local04, local04
09140     FE 2D 0E F2 | 	cmp	local04, #510 wz
09144     35 00 00 FF 
09148     0C E4 85 F1 | 	sub	objptr, ##27148
0914c     68 01 90 5D |  if_ne	jmp	#LR__0830
09150     20 2A 06 F6 | 	mov	local03, #32
09154     13 2F 02 F6 | 	mov	local05, local01
09158     14 31 02 F6 | 	mov	local06, local02
0915c     15 33 02 F6 | 	mov	local07, local03
09160     4A 00 00 FF 
09164     7C E4 05 F1 | 	add	objptr, ##38012
09168     F2 34 02 FB | 	rdlong	local08, objptr
0916c     1A 37 02 F6 | 	mov	local09, local08
09170     01 36 66 F0 | 	shl	local09, #1
09174     1A 37 02 F1 | 	add	local09, local08
09178     02 36 66 F0 | 	shl	local09, #2
0917c     03 00 00 FF 
09180     00 E4 85 F1 | 	sub	objptr, ##1536
09184     F2 36 02 F1 | 	add	local09, objptr
09188     1B 2F 62 FC | 	wrlong	local05, local09
0918c     03 00 00 FF 
09190     00 E4 05 F1 | 	add	objptr, ##1536
09194     F2 2E 02 FB | 	rdlong	local05, objptr
09198     17 39 02 F6 | 	mov	local10, local05
0919c     01 38 66 F0 | 	shl	local10, #1
091a0     17 39 02 F1 | 	add	local10, local05
091a4     02 38 66 F0 | 	shl	local10, #2
091a8     03 00 00 FF 
091ac     00 E4 85 F1 | 	sub	objptr, ##1536
091b0     F2 38 02 F1 | 	add	local10, objptr
091b4     04 38 06 F1 | 	add	local10, #4
091b8     1C 31 62 FC | 	wrlong	local06, local10
091bc     03 00 00 FF 
091c0     00 E4 05 F1 | 	add	objptr, ##1536
091c4     F2 2E 02 FB | 	rdlong	local05, objptr
091c8     17 3B 02 F6 | 	mov	local11, local05
091cc     01 3A 66 F0 | 	shl	local11, #1
091d0     17 3B 02 F1 | 	add	local11, local05
091d4     02 3A 66 F0 | 	shl	local11, #2
091d8     03 00 00 FF 
091dc     00 E4 85 F1 | 	sub	objptr, ##1536
091e0     F2 3A 02 F1 | 	add	local11, objptr
091e4     08 3A 06 F1 | 	add	local11, #8
091e8     1D 33 62 FC | 	wrlong	local07, local11
091ec     03 00 00 FF 
091f0     00 E4 05 F1 | 	add	objptr, ##1536
091f4     F2 2E 02 FB | 	rdlong	local05, objptr
091f8     01 2E 06 F1 | 	add	local05, #1
091fc     F2 2E 62 FC | 	wrlong	local05, objptr
09200     44 2A 06 F6 | 	mov	local03, #68
09204     13 2F 02 F6 | 	mov	local05, local01
09208     14 31 02 F6 | 	mov	local06, local02
0920c     15 33 02 F6 | 	mov	local07, local03
09210     F2 34 02 FB | 	rdlong	local08, objptr
09214     1A 37 02 F6 | 	mov	local09, local08
09218     01 36 66 F0 | 	shl	local09, #1
0921c     1A 37 02 F1 | 	add	local09, local08
09220     02 36 66 F0 | 	shl	local09, #2
09224     03 00 00 FF 
09228     00 E4 85 F1 | 	sub	objptr, ##1536
0922c     F2 36 02 F1 | 	add	local09, objptr
09230     1B 2F 62 FC | 	wrlong	local05, local09
09234     03 00 00 FF 
09238     00 E4 05 F1 | 	add	objptr, ##1536
0923c     F2 3A 02 FB | 	rdlong	local11, objptr
09240     1D 39 02 F6 | 	mov	local10, local11
09244     01 38 66 F0 | 	shl	local10, #1
09248     1D 39 02 F1 | 	add	local10, local11
0924c     02 38 66 F0 | 	shl	local10, #2
09250     03 00 00 FF 
09254     00 E4 85 F1 | 	sub	objptr, ##1536
09258     F2 38 02 F1 | 	add	local10, objptr
0925c     04 38 06 F1 | 	add	local10, #4
09260     1C 31 62 FC | 	wrlong	local06, local10
09264     03 00 00 FF 
09268     00 E4 05 F1 | 	add	objptr, ##1536
0926c     F2 38 02 FB | 	rdlong	local10, objptr
09270     1C 3B 02 F6 | 	mov	local11, local10
09274     01 3A 66 F0 | 	shl	local11, #1
09278     1C 3B 02 F1 | 	add	local11, local10
0927c     02 3A 66 F0 | 	shl	local11, #2
09280     03 00 00 FF 
09284     00 E4 85 F1 | 	sub	objptr, ##1536
09288     F2 3A 02 F1 | 	add	local11, objptr
0928c     08 3A 06 F1 | 	add	local11, #8
09290     1D 33 62 FC | 	wrlong	local07, local11
09294     03 00 00 FF 
09298     00 E4 05 F1 | 	add	objptr, ##1536
0929c     F2 2E 02 FB | 	rdlong	local05, objptr
092a0     01 2E 06 F1 | 	add	local05, #1
092a4     F2 2E 62 FC | 	wrlong	local05, objptr
092a8     4A 00 00 FF 
092ac     7C E4 85 F1 | 	sub	objptr, ##38012
092b0     00 FA 05 F6 | 	mov	result1, #0
092b4     20 05 90 FD | 	jmp	#LR__0837
092b8                 | LR__0830
092b8                 | ' do
092b8                 | LR__0831
092b8     A8 21 B0 FD | 	call	#_expr
092bc                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
092bc                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
092bc     37 00 00 FF 
092c0     44 E4 05 F1 | 	add	objptr, ##28228
092c4     F2 2C 02 FB | 	rdlong	local04, objptr
092c8     03 2C 66 F0 | 	shl	local04, #3
092cc     02 00 00 FF 
092d0     38 E4 85 F1 | 	sub	objptr, ##1080
092d4     F2 2C 02 F1 | 	add	local04, objptr
092d8     04 2C 06 F1 | 	add	local04, #4
092dc     16 35 02 FB | 	rdlong	local08, local04
092e0     11 34 0E F2 | 	cmp	local08, #17 wz
092e4     35 00 00 FF 
092e8     0C E4 85 F1 | 	sub	objptr, ##27148
092ec     60 01 90 5D |  if_ne	jmp	#LR__0832
092f0     21 2A 06 F6 | 	mov	local03, #33
092f4     13 2F 02 F6 | 	mov	local05, local01
092f8     14 31 02 F6 | 	mov	local06, local02
092fc     15 33 02 F6 | 	mov	local07, local03
09300     4A 00 00 FF 
09304     7C E4 05 F1 | 	add	objptr, ##38012
09308     F2 34 02 FB | 	rdlong	local08, objptr
0930c     1A 37 02 F6 | 	mov	local09, local08
09310     01 36 66 F0 | 	shl	local09, #1
09314     1A 37 02 F1 | 	add	local09, local08
09318     02 36 66 F0 | 	shl	local09, #2
0931c     03 00 00 FF 
09320     00 E4 85 F1 | 	sub	objptr, ##1536
09324     F2 36 02 F1 | 	add	local09, objptr
09328     1B 2F 62 FC | 	wrlong	local05, local09
0932c     03 00 00 FF 
09330     00 E4 05 F1 | 	add	objptr, ##1536
09334     F2 3A 02 FB | 	rdlong	local11, objptr
09338     1D 39 02 F6 | 	mov	local10, local11
0933c     01 38 66 F0 | 	shl	local10, #1
09340     1D 39 02 F1 | 	add	local10, local11
09344     02 38 66 F0 | 	shl	local10, #2
09348     03 00 00 FF 
0934c     00 E4 85 F1 | 	sub	objptr, ##1536
09350     F2 38 02 F1 | 	add	local10, objptr
09354     04 38 06 F1 | 	add	local10, #4
09358     1C 31 62 FC | 	wrlong	local06, local10
0935c     03 00 00 FF 
09360     00 E4 05 F1 | 	add	objptr, ##1536
09364     F2 2E 02 FB | 	rdlong	local05, objptr
09368     17 3B 02 F6 | 	mov	local11, local05
0936c     01 3A 66 F0 | 	shl	local11, #1
09370     17 3B 02 F1 | 	add	local11, local05
09374     02 3A 66 F0 | 	shl	local11, #2
09378     03 00 00 FF 
0937c     00 E4 85 F1 | 	sub	objptr, ##1536
09380     F2 3A 02 F1 | 	add	local11, objptr
09384     08 3A 06 F1 | 	add	local11, #8
09388     1D 33 62 FC | 	wrlong	local07, local11
0938c     03 00 00 FF 
09390     00 E4 05 F1 | 	add	objptr, ##1536
09394     F2 2E 02 FB | 	rdlong	local05, objptr
09398     01 2E 06 F1 | 	add	local05, #1
0939c     F2 2E 62 FC | 	wrlong	local05, objptr
093a0     44 2A 06 F6 | 	mov	local03, #68
093a4     13 2F 02 F6 | 	mov	local05, local01
093a8     14 31 02 F6 | 	mov	local06, local02
093ac     15 33 02 F6 | 	mov	local07, local03
093b0     F2 34 02 FB | 	rdlong	local08, objptr
093b4     1A 37 02 F6 | 	mov	local09, local08
093b8     01 36 66 F0 | 	shl	local09, #1
093bc     1A 37 02 F1 | 	add	local09, local08
093c0     02 36 66 F0 | 	shl	local09, #2
093c4     03 00 00 FF 
093c8     00 E4 85 F1 | 	sub	objptr, ##1536
093cc     F2 36 02 F1 | 	add	local09, objptr
093d0     1B 2F 62 FC | 	wrlong	local05, local09
093d4     03 00 00 FF 
093d8     00 E4 05 F1 | 	add	objptr, ##1536
093dc     F2 3A 02 FB | 	rdlong	local11, objptr
093e0     1D 39 02 F6 | 	mov	local10, local11
093e4     01 38 66 F0 | 	shl	local10, #1
093e8     1D 39 02 F1 | 	add	local10, local11
093ec     02 38 66 F0 | 	shl	local10, #2
093f0     03 00 00 FF 
093f4     00 E4 85 F1 | 	sub	objptr, ##1536
093f8     F2 38 02 F1 | 	add	local10, objptr
093fc     04 38 06 F1 | 	add	local10, #4
09400     1C 31 62 FC | 	wrlong	local06, local10
09404     03 00 00 FF 
09408     00 E4 05 F1 | 	add	objptr, ##1536
0940c     F2 38 02 FB | 	rdlong	local10, objptr
09410     1C 3B 02 F6 | 	mov	local11, local10
09414     01 3A 66 F0 | 	shl	local11, #1
09418     1C 3B 02 F1 | 	add	local11, local10
0941c     02 3A 66 F0 | 	shl	local11, #2
09420     03 00 00 FF 
09424     00 E4 85 F1 | 	sub	objptr, ##1536
09428     F2 3A 02 F1 | 	add	local11, objptr
0942c     08 3A 06 F1 | 	add	local11, #8
09430     1D 33 62 FC | 	wrlong	local07, local11
09434     03 00 00 FF 
09438     00 E4 05 F1 | 	add	objptr, ##1536
0943c     F2 2E 02 FB | 	rdlong	local05, objptr
09440     01 2E 06 F1 | 	add	local05, #1
09444     F2 2E 62 FC | 	wrlong	local05, objptr
09448     4A 00 00 FF 
0944c     7C E4 85 F1 | 	sub	objptr, ##38012
09450                 | LR__0832
09450                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09450     37 00 00 FF 
09454     44 E4 05 F1 | 	add	objptr, ##28228
09458     F2 2C 02 FB | 	rdlong	local04, objptr
0945c     03 2C 66 F0 | 	shl	local04, #3
09460     02 00 00 FF 
09464     38 E4 85 F1 | 	sub	objptr, ##1080
09468     F2 2C 02 F1 | 	add	local04, objptr
0946c     04 2C 06 F1 | 	add	local04, #4
09470     16 35 02 FB | 	rdlong	local08, local04
09474     12 34 0E F2 | 	cmp	local08, #18 wz
09478     35 00 00 FF 
0947c     0C E4 85 F1 | 	sub	objptr, ##27148
09480     60 01 90 5D |  if_ne	jmp	#LR__0833
09484     22 2A 06 F6 | 	mov	local03, #34
09488     13 2F 02 F6 | 	mov	local05, local01
0948c     14 31 02 F6 | 	mov	local06, local02
09490     15 33 02 F6 | 	mov	local07, local03
09494     4A 00 00 FF 
09498     7C E4 05 F1 | 	add	objptr, ##38012
0949c     F2 34 02 FB | 	rdlong	local08, objptr
094a0     1A 37 02 F6 | 	mov	local09, local08
094a4     01 36 66 F0 | 	shl	local09, #1
094a8     1A 37 02 F1 | 	add	local09, local08
094ac     02 36 66 F0 | 	shl	local09, #2
094b0     03 00 00 FF 
094b4     00 E4 85 F1 | 	sub	objptr, ##1536
094b8     F2 36 02 F1 | 	add	local09, objptr
094bc     1B 2F 62 FC | 	wrlong	local05, local09
094c0     03 00 00 FF 
094c4     00 E4 05 F1 | 	add	objptr, ##1536
094c8     F2 3A 02 FB | 	rdlong	local11, objptr
094cc     1D 39 02 F6 | 	mov	local10, local11
094d0     01 38 66 F0 | 	shl	local10, #1
094d4     1D 39 02 F1 | 	add	local10, local11
094d8     02 38 66 F0 | 	shl	local10, #2
094dc     03 00 00 FF 
094e0     00 E4 85 F1 | 	sub	objptr, ##1536
094e4     F2 38 02 F1 | 	add	local10, objptr
094e8     04 38 06 F1 | 	add	local10, #4
094ec     1C 31 62 FC | 	wrlong	local06, local10
094f0     03 00 00 FF 
094f4     00 E4 05 F1 | 	add	objptr, ##1536
094f8     F2 2E 02 FB | 	rdlong	local05, objptr
094fc     17 3B 02 F6 | 	mov	local11, local05
09500     01 3A 66 F0 | 	shl	local11, #1
09504     17 3B 02 F1 | 	add	local11, local05
09508     02 3A 66 F0 | 	shl	local11, #2
0950c     03 00 00 FF 
09510     00 E4 85 F1 | 	sub	objptr, ##1536
09514     F2 3A 02 F1 | 	add	local11, objptr
09518     08 3A 06 F1 | 	add	local11, #8
0951c     1D 33 62 FC | 	wrlong	local07, local11
09520     03 00 00 FF 
09524     00 E4 05 F1 | 	add	objptr, ##1536
09528     F2 2E 02 FB | 	rdlong	local05, objptr
0952c     01 2E 06 F1 | 	add	local05, #1
09530     F2 2E 62 FC | 	wrlong	local05, objptr
09534     44 2A 06 F6 | 	mov	local03, #68
09538     13 2F 02 F6 | 	mov	local05, local01
0953c     14 31 02 F6 | 	mov	local06, local02
09540     15 33 02 F6 | 	mov	local07, local03
09544     F2 34 02 FB | 	rdlong	local08, objptr
09548     1A 37 02 F6 | 	mov	local09, local08
0954c     01 36 66 F0 | 	shl	local09, #1
09550     1A 37 02 F1 | 	add	local09, local08
09554     02 36 66 F0 | 	shl	local09, #2
09558     03 00 00 FF 
0955c     00 E4 85 F1 | 	sub	objptr, ##1536
09560     F2 36 02 F1 | 	add	local09, objptr
09564     1B 2F 62 FC | 	wrlong	local05, local09
09568     03 00 00 FF 
0956c     00 E4 05 F1 | 	add	objptr, ##1536
09570     F2 3A 02 FB | 	rdlong	local11, objptr
09574     1D 39 02 F6 | 	mov	local10, local11
09578     01 38 66 F0 | 	shl	local10, #1
0957c     1D 39 02 F1 | 	add	local10, local11
09580     02 38 66 F0 | 	shl	local10, #2
09584     03 00 00 FF 
09588     00 E4 85 F1 | 	sub	objptr, ##1536
0958c     F2 38 02 F1 | 	add	local10, objptr
09590     04 38 06 F1 | 	add	local10, #4
09594     1C 31 62 FC | 	wrlong	local06, local10
09598     03 00 00 FF 
0959c     00 E4 05 F1 | 	add	objptr, ##1536
095a0     F2 38 02 FB | 	rdlong	local10, objptr
095a4     1C 3B 02 F6 | 	mov	local11, local10
095a8     01 3A 66 F0 | 	shl	local11, #1
095ac     1C 3B 02 F1 | 	add	local11, local10
095b0     02 3A 66 F0 | 	shl	local11, #2
095b4     03 00 00 FF 
095b8     00 E4 85 F1 | 	sub	objptr, ##1536
095bc     F2 3A 02 F1 | 	add	local11, objptr
095c0     08 3A 06 F1 | 	add	local11, #8
095c4     1D 33 62 FC | 	wrlong	local07, local11
095c8     03 00 00 FF 
095cc     00 E4 05 F1 | 	add	objptr, ##1536
095d0     F2 2E 02 FB | 	rdlong	local05, objptr
095d4     01 2E 06 F1 | 	add	local05, #1
095d8     F2 2E 62 FC | 	wrlong	local05, objptr
095dc     4A 00 00 FF 
095e0     7C E4 85 F1 | 	sub	objptr, ##38012
095e4                 | LR__0833
095e4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
095e4     37 00 00 FF 
095e8     44 E4 05 F1 | 	add	objptr, ##28228
095ec     F2 2C 02 FB | 	rdlong	local04, objptr
095f0     03 2C 66 F0 | 	shl	local04, #3
095f4     02 00 00 FF 
095f8     38 E4 85 F1 | 	sub	objptr, ##1080
095fc     F2 2C 02 F1 | 	add	local04, objptr
09600     04 2C 06 F1 | 	add	local04, #4
09604     16 35 02 FB | 	rdlong	local08, local04
09608     FE 35 0E F2 | 	cmp	local08, #510 wz
0960c     35 00 00 FF 
09610     0C E4 85 F1 | 	sub	objptr, ##27148
09614     B8 00 90 5D |  if_ne	jmp	#LR__0834
09618     44 2A 06 F6 | 	mov	local03, #68
0961c     13 2F 02 F6 | 	mov	local05, local01
09620     14 31 02 F6 | 	mov	local06, local02
09624     15 33 02 F6 | 	mov	local07, local03
09628     4A 00 00 FF 
0962c     7C E4 05 F1 | 	add	objptr, ##38012
09630     F2 34 02 FB | 	rdlong	local08, objptr
09634     1A 37 02 F6 | 	mov	local09, local08
09638     01 36 66 F0 | 	shl	local09, #1
0963c     1A 37 02 F1 | 	add	local09, local08
09640     02 36 66 F0 | 	shl	local09, #2
09644     03 00 00 FF 
09648     00 E4 85 F1 | 	sub	objptr, ##1536
0964c     F2 36 02 F1 | 	add	local09, objptr
09650     1B 2F 62 FC | 	wrlong	local05, local09
09654     03 00 00 FF 
09658     00 E4 05 F1 | 	add	objptr, ##1536
0965c     F2 3A 02 FB | 	rdlong	local11, objptr
09660     1D 39 02 F6 | 	mov	local10, local11
09664     01 38 66 F0 | 	shl	local10, #1
09668     1D 39 02 F1 | 	add	local10, local11
0966c     02 38 66 F0 | 	shl	local10, #2
09670     03 00 00 FF 
09674     00 E4 85 F1 | 	sub	objptr, ##1536
09678     F2 38 02 F1 | 	add	local10, objptr
0967c     04 38 06 F1 | 	add	local10, #4
09680     1C 31 62 FC | 	wrlong	local06, local10
09684     03 00 00 FF 
09688     00 E4 05 F1 | 	add	objptr, ##1536
0968c     F2 38 02 FB | 	rdlong	local10, objptr
09690     1C 3B 02 F6 | 	mov	local11, local10
09694     01 3A 66 F0 | 	shl	local11, #1
09698     1C 3B 02 F1 | 	add	local11, local10
0969c     02 3A 66 F0 | 	shl	local11, #2
096a0     03 00 00 FF 
096a4     00 E4 85 F1 | 	sub	objptr, ##1536
096a8     F2 3A 02 F1 | 	add	local11, objptr
096ac     08 3A 06 F1 | 	add	local11, #8
096b0     1D 33 62 FC | 	wrlong	local07, local11
096b4     03 00 00 FF 
096b8     00 E4 05 F1 | 	add	objptr, ##1536
096bc     F2 2E 02 FB | 	rdlong	local05, objptr
096c0     01 2E 06 F1 | 	add	local05, #1
096c4     F2 2E 62 FC | 	wrlong	local05, objptr
096c8     4A 00 00 FF 
096cc     7C E4 85 F1 | 	sub	objptr, ##38012
096d0                 | LR__0834
096d0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
096d0     37 00 00 FF 
096d4     44 E4 05 F1 | 	add	objptr, ##28228
096d8     F2 2C 02 FB | 	rdlong	local04, objptr
096dc     03 2C 66 F0 | 	shl	local04, #3
096e0     02 00 00 FF 
096e4     38 E4 85 F1 | 	sub	objptr, ##1080
096e8     F2 2C 02 F1 | 	add	local04, objptr
096ec     04 2C 06 F1 | 	add	local04, #4
096f0     16 35 02 FB | 	rdlong	local08, local04
096f4     11 34 0E F2 | 	cmp	local08, #17 wz
096f8     35 00 00 FF 
096fc     0C E4 85 F1 | 	sub	objptr, ##27148
09700     6C 00 90 AD |  if_e	jmp	#LR__0835
09704     37 00 00 FF 
09708     44 E4 05 F1 | 	add	objptr, ##28228
0970c     F2 34 02 FB | 	rdlong	local08, objptr
09710     03 34 66 F0 | 	shl	local08, #3
09714     02 00 00 FF 
09718     38 E4 85 F1 | 	sub	objptr, ##1080
0971c     F2 34 02 F1 | 	add	local08, objptr
09720     04 34 06 F1 | 	add	local08, #4
09724     1A 35 02 FB | 	rdlong	local08, local08
09728     12 34 0E F2 | 	cmp	local08, #18 wz
0972c     35 00 00 FF 
09730     0C E4 85 F1 | 	sub	objptr, ##27148
09734     38 00 90 AD |  if_e	jmp	#LR__0835
09738     37 00 00 FF 
0973c     44 E4 05 F1 | 	add	objptr, ##28228
09740     F2 3A 02 FB | 	rdlong	local11, objptr
09744     03 3A 66 F0 | 	shl	local11, #3
09748     02 00 00 FF 
0974c     38 E4 85 F1 | 	sub	objptr, ##1080
09750     F2 3A 02 F1 | 	add	local11, objptr
09754     04 3A 06 F1 | 	add	local11, #4
09758     1D 3B 02 FB | 	rdlong	local11, local11
0975c     FE 3B 0E F2 | 	cmp	local11, #510 wz
09760     35 00 00 FF 
09764     0C E4 85 F1 | 	sub	objptr, ##27148
09768     16 FA 05 56 |  if_ne	mov	result1, #22
0976c     68 00 90 5D |  if_ne	jmp	#LR__0837
09770                 | LR__0835
09770     37 00 00 FF 
09774     44 E4 05 F1 | 	add	objptr, ##28228
09778     F2 2C 02 FB | 	rdlong	local04, objptr
0977c     01 2C 06 F1 | 	add	local04, #1
09780     F2 2C 62 FC | 	wrlong	local04, objptr
09784     03 2C 66 F0 | 	shl	local04, #3
09788     02 00 00 FF 
0978c     38 E4 85 F1 | 	sub	objptr, ##1080
09790     F2 2C 02 F1 | 	add	local04, objptr
09794     04 2C 06 F1 | 	add	local04, #4
09798     16 35 02 FB | 	rdlong	local08, local04
0979c     FE 35 0E F2 | 	cmp	local08, #510 wz
097a0     35 00 00 FF 
097a4     0C E4 85 F1 | 	sub	objptr, ##27148
097a8     28 00 90 AD |  if_e	jmp	#LR__0836
097ac     37 00 00 FF 
097b0     44 E4 05 F1 | 	add	objptr, ##28228
097b4     F2 3A 02 FB | 	rdlong	local11, objptr
097b8     0E 00 00 FF 
097bc     1C E4 05 F1 | 	add	objptr, ##7196
097c0     F2 38 02 FB | 	rdlong	local10, objptr
097c4     45 00 00 FF 
097c8     60 E4 85 F1 | 	sub	objptr, ##35424
097cc     1C 3B 52 F2 | 	cmps	local11, local10 wc
097d0     E4 FA 9F CD |  if_b	jmp	#LR__0831
097d4                 | LR__0836
097d4                 | ' return 0
097d4     00 FA 05 F6 | 	mov	result1, #0
097d8                 | LR__0837
097d8     A7 F0 03 F6 | 	mov	ptra, fp
097dc     B2 00 A0 FD | 	call	#popregs_
097e0                 | _compile_print_ret
097e0     2D 00 64 FD | 	ret
097e4                 | 
097e4                 | ' 
097e4                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
097e4                 | ' 
097e4                 | ' function compile_if(aline as ulong) as ulong  
097e4                 | _compile_if
097e4     09 4A 05 F6 | 	mov	COUNT_, #9
097e8     A8 00 A0 FD | 	call	#pushregs_
097ec                 | _compile_if_enter
097ec     09 2D 02 F6 | 	mov	local04, arg01
097f0                 | ' return expr()
097f0     70 1C B0 FD | 	call	#_expr
097f4     37 00 00 FF 
097f8     44 E4 05 F1 | 	add	objptr, ##28228
097fc     F2 14 02 FB | 	rdlong	arg02, objptr
09800     0A 2F 02 F6 | 	mov	local05, arg02
09804     03 2E 66 F0 | 	shl	local05, #3
09808     02 00 00 FF 
0980c     38 E4 85 F1 | 	sub	objptr, ##1080
09810     F2 2E 02 F1 | 	add	local05, objptr
09814     04 2E 06 F1 | 	add	local05, #4
09818     17 2F 02 FB | 	rdlong	local05, local05
0981c     01 14 06 F1 | 	add	arg02, #1
09820     02 00 00 FF 
09824     38 E4 05 F1 | 	add	objptr, ##1080
09828     F2 14 62 FC | 	wrlong	arg02, objptr
0982c     37 00 00 FF 
09830     44 E4 85 F1 | 	sub	objptr, ##28228
09834                 | ' 
09834                 | ' err=compile_fun_1p()
09834                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09834     5B 2E 0E F2 | 	cmp	local05, #91 wz
09838     34 FA 05 56 |  if_ne	mov	result1, #52
0983c     20 01 90 5D |  if_ne	jmp	#LR__0842
09840     58 2A 06 F6 | 	mov	local03, #88
09844     13 31 02 F6 | 	mov	local06, local01
09848     14 33 02 F6 | 	mov	local07, local02
0984c     15 15 02 F6 | 	mov	arg02, local03
09850     4A 00 00 FF 
09854     7C E4 05 F1 | 	add	objptr, ##38012
09858     F2 12 02 FB | 	rdlong	arg01, objptr
0985c     09 35 02 F6 | 	mov	local08, arg01
09860     01 34 66 F0 | 	shl	local08, #1
09864     09 35 02 F1 | 	add	local08, arg01
09868     02 34 66 F0 | 	shl	local08, #2
0986c     03 00 00 FF 
09870     00 E4 85 F1 | 	sub	objptr, ##1536
09874     F2 34 02 F1 | 	add	local08, objptr
09878     1A 31 62 FC | 	wrlong	local06, local08
0987c     03 00 00 FF 
09880     00 E4 05 F1 | 	add	objptr, ##1536
09884     F2 30 02 FB | 	rdlong	local06, objptr
09888     18 13 02 F6 | 	mov	arg01, local06
0988c     01 12 66 F0 | 	shl	arg01, #1
09890     18 13 02 F1 | 	add	arg01, local06
09894     02 12 66 F0 | 	shl	arg01, #2
09898     03 00 00 FF 
0989c     00 E4 85 F1 | 	sub	objptr, ##1536
098a0     F2 12 02 F1 | 	add	arg01, objptr
098a4     04 12 06 F1 | 	add	arg01, #4
098a8     09 33 62 FC | 	wrlong	local07, arg01
098ac     03 00 00 FF 
098b0     00 E4 05 F1 | 	add	objptr, ##1536
098b4     F2 30 02 FB | 	rdlong	local06, objptr
098b8     18 13 02 F6 | 	mov	arg01, local06
098bc     01 12 66 F0 | 	shl	arg01, #1
098c0     18 13 02 F1 | 	add	arg01, local06
098c4     02 12 66 F0 | 	shl	arg01, #2
098c8     03 00 00 FF 
098cc     00 E4 85 F1 | 	sub	objptr, ##1536
098d0     F2 12 02 F1 | 	add	arg01, objptr
098d4     08 12 06 F1 | 	add	arg01, #8
098d8     09 15 62 FC | 	wrlong	arg02, arg01
098dc     03 00 00 FF 
098e0     00 E4 05 F1 | 	add	objptr, ##1536
098e4     F2 30 02 FB | 	rdlong	local06, objptr
098e8     01 30 06 F1 | 	add	local06, #1
098ec     F2 30 62 FC | 	wrlong	local06, objptr
098f0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
098f0                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
098f0     13 00 00 FF 
098f4     38 E4 85 F1 | 	sub	objptr, ##9784
098f8     F2 14 02 FB | 	rdlong	arg02, objptr
098fc     01 14 06 F1 | 	add	arg02, #1
09900     03 14 66 F0 | 	shl	arg02, #3
09904     02 00 00 FF 
09908     38 E4 85 F1 | 	sub	objptr, ##1080
0990c     F2 14 02 F1 | 	add	arg02, objptr
09910     0A 13 02 FB | 	rdlong	arg01, arg02
09914     35 00 00 FF 
09918     0C E4 85 F1 | 	sub	objptr, ##27148
0991c                 | ' 
0991c                 | ' select case s
0991c     AB 01 00 FF 
09920     A8 14 06 F6 | 	mov	arg02, ##@LR__5531
09924     78 C0 B1 FD | 	call	#__system___string_cmp
09928     00 FA 0D F2 | 	cmp	result1, #0 wz
0992c     1B FA 05 A6 |  if_e	mov	result1, #27
09930     00 FA 05 56 |  if_ne	mov	result1, #0
09934     00 FA 0D F2 | 	cmp	result1, #0 wz
09938     10 00 90 AD |  if_e	jmp	#LR__0840
0993c     05 12 06 F6 | 	mov	arg01, #5
09940     38 E4 BF FD | 	call	#_compile_immediate_assign
09944     FD 36 02 F6 | 	mov	local09, result1
09948     10 00 90 FD | 	jmp	#LR__0841
0994c                 | LR__0840
0994c     05 12 06 F6 | 	mov	arg01, #5
09950     16 15 02 F6 | 	mov	arg02, local04
09954     78 DA BF FD | 	call	#_compile_immediate
09958     FD 36 02 F6 | 	mov	local09, result1
0995c                 | LR__0841
0995c                 | ' return err
0995c     1B FB 01 F6 | 	mov	result1, local09
09960                 | LR__0842
09960     A7 F0 03 F6 | 	mov	ptra, fp
09964     B2 00 A0 FD | 	call	#popregs_
09968                 | _compile_if_ret
09968     2D 00 64 FD | 	ret
0996c                 | 
0996c                 | ' 
0996c                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
0996c                 | ' 
0996c                 | ' function compile_else(aline as ulong) as ulong  
0996c                 | _compile_else
0996c     07 4A 05 F6 | 	mov	COUNT_, #7
09970     A8 00 A0 FD | 	call	#pushregs_
09974                 | _compile_else_enter
09974     09 2D 02 F6 | 	mov	local04, arg01
09978     5A 2A 06 F6 | 	mov	local03, #90
0997c     13 2F 02 F6 | 	mov	local05, local01
09980     14 31 02 F6 | 	mov	local06, local02
09984     15 27 02 F6 | 	mov	local01, local03
09988     4A 00 00 FF 
0998c     7C E4 05 F1 | 	add	objptr, ##38012
09990     F2 14 02 FB | 	rdlong	arg02, objptr
09994     0A 13 02 F6 | 	mov	arg01, arg02
09998     01 12 66 F0 | 	shl	arg01, #1
0999c     0A 13 02 F1 | 	add	arg01, arg02
099a0     02 12 66 F0 | 	shl	arg01, #2
099a4     03 00 00 FF 
099a8     00 E4 85 F1 | 	sub	objptr, ##1536
099ac     F2 12 02 F1 | 	add	arg01, objptr
099b0     09 2F 62 FC | 	wrlong	local05, arg01
099b4     03 00 00 FF 
099b8     00 E4 05 F1 | 	add	objptr, ##1536
099bc     F2 2E 02 FB | 	rdlong	local05, objptr
099c0     17 15 02 F6 | 	mov	arg02, local05
099c4     01 14 66 F0 | 	shl	arg02, #1
099c8     17 15 02 F1 | 	add	arg02, local05
099cc     02 14 66 F0 | 	shl	arg02, #2
099d0     03 00 00 FF 
099d4     00 E4 85 F1 | 	sub	objptr, ##1536
099d8     F2 14 02 F1 | 	add	arg02, objptr
099dc     04 14 06 F1 | 	add	arg02, #4
099e0     0A 31 62 FC | 	wrlong	local06, arg02
099e4     03 00 00 FF 
099e8     00 E4 05 F1 | 	add	objptr, ##1536
099ec     F2 30 02 FB | 	rdlong	local06, objptr
099f0     18 2F 02 F6 | 	mov	local05, local06
099f4     01 2E 66 F0 | 	shl	local05, #1
099f8     18 2F 02 F1 | 	add	local05, local06
099fc     02 2E 66 F0 | 	shl	local05, #2
09a00     03 00 00 FF 
09a04     00 E4 85 F1 | 	sub	objptr, ##1536
09a08     F2 2E 02 F1 | 	add	local05, objptr
09a0c     08 2E 06 F1 | 	add	local05, #8
09a10     17 27 62 FC | 	wrlong	local01, local05
09a14     03 00 00 FF 
09a18     00 E4 05 F1 | 	add	objptr, ##1536
09a1c     F2 2E 02 FB | 	rdlong	local05, objptr
09a20     01 2E 06 F1 | 	add	local05, #1
09a24     F2 2E 62 FC | 	wrlong	local05, objptr
09a28                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09a28                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09a28     13 00 00 FF 
09a2c     38 E4 85 F1 | 	sub	objptr, ##9784
09a30     F2 30 02 FB | 	rdlong	local06, objptr
09a34     01 30 06 F1 | 	add	local06, #1
09a38     03 30 66 F0 | 	shl	local06, #3
09a3c     02 00 00 FF 
09a40     38 E4 85 F1 | 	sub	objptr, ##1080
09a44     F2 30 02 F1 | 	add	local06, objptr
09a48     18 13 02 FB | 	rdlong	arg01, local06
09a4c     35 00 00 FF 
09a50     0C E4 85 F1 | 	sub	objptr, ##27148
09a54                 | ' 
09a54                 | ' select case s
09a54     AB 01 00 FF 
09a58     A8 14 06 F6 | 	mov	arg02, ##@LR__5531
09a5c     40 BF B1 FD | 	call	#__system___string_cmp
09a60     00 FA 0D F2 | 	cmp	result1, #0 wz
09a64     1B FA 05 A6 |  if_e	mov	result1, #27
09a68     00 FA 05 56 |  if_ne	mov	result1, #0
09a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
09a70     10 00 90 AD |  if_e	jmp	#LR__0850
09a74     05 12 06 F6 | 	mov	arg01, #5
09a78     00 E3 BF FD | 	call	#_compile_immediate_assign
09a7c     FD 32 02 F6 | 	mov	local07, result1
09a80     10 00 90 FD | 	jmp	#LR__0851
09a84                 | LR__0850
09a84     05 12 06 F6 | 	mov	arg01, #5
09a88     16 15 02 F6 | 	mov	arg02, local04
09a8c     40 D9 BF FD | 	call	#_compile_immediate
09a90     FD 32 02 F6 | 	mov	local07, result1
09a94                 | LR__0851
09a94                 | ' return err
09a94     19 FB 01 F6 | 	mov	result1, local07
09a98     A7 F0 03 F6 | 	mov	ptra, fp
09a9c     B2 00 A0 FD | 	call	#popregs_
09aa0                 | _compile_else_ret
09aa0     2D 00 64 FD | 	ret
09aa4                 | 
09aa4                 | ' 
09aa4                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09aa4                 | ' 
09aa4                 | ' function compile_dim() as ulong  
09aa4                 | _compile_dim
09aa4     11 4A 05 F6 | 	mov	COUNT_, #17
09aa8     A8 00 A0 FD | 	call	#pushregs_
09aac     01 26 06 F6 | 	mov	local01, #1
09ab0     01 28 06 F6 | 	mov	local02, #1
09ab4     01 2A 06 F6 | 	mov	local03, #1
09ab8                 | ' 
09ab8                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09ab8                 | ' if isname(lparts(ct).part$) then 
09ab8     37 00 00 FF 
09abc     44 E4 05 F1 | 	add	objptr, ##28228
09ac0     F2 18 02 FB | 	rdlong	arg04, objptr
09ac4     03 18 66 F0 | 	shl	arg04, #3
09ac8     02 00 00 FF 
09acc     38 E4 85 F1 | 	sub	objptr, ##1080
09ad0     F2 18 02 F1 | 	add	arg04, objptr
09ad4     0C 13 02 FB | 	rdlong	arg01, arg04
09ad8     35 00 00 FF 
09adc     0C E4 85 F1 | 	sub	objptr, ##27148
09ae0     44 C7 BF FD | 	call	#_isname
09ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
09ae8     78 05 90 AD |  if_e	jmp	#LR__0883
09aec     37 00 00 FF 
09af0     44 E4 05 F1 | 	add	objptr, ##28228
09af4     F2 2C 02 FB | 	rdlong	local04, objptr
09af8     03 2C 66 F0 | 	shl	local04, #3
09afc     02 00 00 FF 
09b00     38 E4 85 F1 | 	sub	objptr, ##1080
09b04     F2 2C 02 F1 | 	add	local04, objptr
09b08     16 2F 02 FB | 	rdlong	local05, local04
09b0c     01 30 66 F6 | 	neg	local06, #1
09b10                 | '   varname2$=lparts(ct).part$ 
09b10                 | '   j=-1
09b10                 | '   if varnum>0 then
09b10     04 E4 85 F1 | 	sub	objptr, #4
09b14     F2 32 02 FB | 	rdlong	local07, objptr
09b18     35 00 00 FF 
09b1c     08 E4 85 F1 | 	sub	objptr, ##27144
09b20     01 32 56 F2 | 	cmps	local07, #1 wc
09b24     58 00 90 CD |  if_b	jmp	#LR__0862
09b28                 | '     for i=0 to varnum-1
09b28     00 34 06 F6 | 	mov	local08, #0
09b2c     35 00 00 FF 
09b30     08 E4 05 F1 | 	add	objptr, ##27144
09b34     F2 36 02 FB | 	rdlong	local09, objptr
09b38     35 00 00 FF 
09b3c     08 E4 85 F1 | 	sub	objptr, ##27144
09b40                 | LR__0860
09b40     1B 35 52 F2 | 	cmps	local08, local09 wc
09b44     38 00 90 3D |  if_ae	jmp	#LR__0861
09b48                 | '       if variables(i).name=varname2$ then j=i : exit
09b48     1A 2D 02 F6 | 	mov	local04, local08
09b4c     04 2C 66 F0 | 	shl	local04, #4
09b50     14 00 00 FF 
09b54     F8 E5 05 F1 | 	add	objptr, ##10744
09b58     F2 2C 02 F1 | 	add	local04, objptr
09b5c     16 13 02 FB | 	rdlong	arg01, local04
09b60     17 15 02 F6 | 	mov	arg02, local05
09b64     14 00 00 FF 
09b68     F8 E5 85 F1 | 	sub	objptr, ##10744
09b6c     30 BE B1 FD | 	call	#__system___string_cmp
09b70     00 FA 0D F2 | 	cmp	result1, #0 wz
09b74     1A 31 02 A6 |  if_e	mov	local06, local08
09b78     01 34 06 51 |  if_ne	add	local08, #1
09b7c     C0 FF 9F 5D |  if_ne	jmp	#LR__0860
09b80                 | LR__0861
09b80                 | LR__0862
09b80                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09b80     FF FF 7F FF 
09b84     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09b88     35 00 00 AF 
09b8c     08 E4 05 A1 |  if_e	add	objptr, ##27144
09b90     F2 30 02 AB |  if_e	rdlong	local06, objptr
09b94     35 00 00 AF 
09b98     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09b9c     78 00 90 AD |  if_e	jmp	#LR__0863
09ba0     00 12 06 F6 | 	mov	arg01, #0
09ba4     F8 1A B2 FD | 	call	#__system___getiolock_0599
09ba8     FD 12 02 F6 | 	mov	arg01, result1
09bac     C8 BD B1 FD | 	call	#__system___lockmem
09bb0     AD 01 00 FF 
09bb4     19 15 06 F6 | 	mov	arg02, ##@LR__5781
09bb8     00 12 06 F6 | 	mov	arg01, #0
09bbc     00 16 06 F6 | 	mov	arg03, #0
09bc0     A8 CA B1 FD | 	call	#__system___basic_print_string
09bc4     52 00 00 FF 
09bc8     5C E4 05 F1 | 	add	objptr, ##42076
09bcc     F2 14 02 FB | 	rdlong	arg02, objptr
09bd0     52 00 00 FF 
09bd4     5C E4 85 F1 | 	sub	objptr, ##42076
09bd8     00 12 06 F6 | 	mov	arg01, #0
09bdc     00 16 06 F6 | 	mov	arg03, #0
09be0     0A 18 06 F6 | 	mov	arg04, #10
09be4     08 CB B1 FD | 	call	#__system___basic_print_unsigned
09be8     AD 01 00 FF 
09bec     27 15 06 F6 | 	mov	arg02, ##@LR__5782
09bf0     00 12 06 F6 | 	mov	arg01, #0
09bf4     00 16 06 F6 | 	mov	arg03, #0
09bf8     70 CA B1 FD | 	call	#__system___basic_print_string
09bfc     00 12 06 F6 | 	mov	arg01, #0
09c00     0A 14 06 F6 | 	mov	arg02, #10
09c04     00 16 06 F6 | 	mov	arg03, #0
09c08     08 CA B1 FD | 	call	#__system___basic_print_char
09c0c     00 12 06 F6 | 	mov	arg01, #0
09c10     8C 1A B2 FD | 	call	#__system___getiolock_0599
09c14     FD 00 68 FC | 	wrlong	#0, result1
09c18                 | LR__0863
09c18                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09c18     37 00 00 FF 
09c1c     44 E4 05 F1 | 	add	objptr, ##28228
09c20     F2 14 02 FB | 	rdlong	arg02, objptr
09c24     01 14 06 F1 | 	add	arg02, #1
09c28     03 14 66 F0 | 	shl	arg02, #3
09c2c     02 00 00 FF 
09c30     38 E4 85 F1 | 	sub	objptr, ##1080
09c34     F2 14 02 F1 | 	add	arg02, objptr
09c38     0A 13 02 FB | 	rdlong	arg01, arg02
09c3c     AD 01 00 FF 
09c40     48 15 06 F6 | 	mov	arg02, ##@LR__5783
09c44     35 00 00 FF 
09c48     0C E4 85 F1 | 	sub	objptr, ##27148
09c4c     50 BD B1 FD | 	call	#__system___string_cmp
09c50     00 FA 0D F2 | 	cmp	result1, #0 wz
09c54     44 00 90 AD |  if_e	jmp	#LR__0864
09c58     37 00 00 FF 
09c5c     44 E4 05 F1 | 	add	objptr, ##28228
09c60     F2 36 02 FB | 	rdlong	local09, objptr
09c64     01 36 06 F1 | 	add	local09, #1
09c68     03 36 66 F0 | 	shl	local09, #3
09c6c     02 00 00 FF 
09c70     38 E4 85 F1 | 	sub	objptr, ##1080
09c74     F2 36 02 F1 | 	add	local09, objptr
09c78     1B 13 02 FB | 	rdlong	arg01, local09
09c7c     AD 01 00 FF 
09c80     4A 15 06 F6 | 	mov	arg02, ##@LR__5784
09c84     35 00 00 FF 
09c88     0C E4 85 F1 | 	sub	objptr, ##27148
09c8c     10 BD B1 FD | 	call	#__system___string_cmp
09c90     00 FA 0D F2 | 	cmp	result1, #0 wz
09c94     2B FA 05 56 |  if_ne	mov	result1, #43
09c98     D0 04 90 5D |  if_ne	jmp	#LR__0885
09c9c                 | LR__0864
09c9c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09c9c     37 00 00 FF 
09ca0     44 E4 05 F1 | 	add	objptr, ##28228
09ca4     F2 14 02 FB | 	rdlong	arg02, objptr
09ca8     01 14 06 F1 | 	add	arg02, #1
09cac     03 14 66 F0 | 	shl	arg02, #3
09cb0     02 00 00 FF 
09cb4     38 E4 85 F1 | 	sub	objptr, ##1080
09cb8     F2 14 02 F1 | 	add	arg02, objptr
09cbc     0A 13 02 FB | 	rdlong	arg01, arg02
09cc0     AD 01 00 FF 
09cc4     4D 15 06 F6 | 	mov	arg02, ##@LR__5785
09cc8     35 00 00 FF 
09ccc     0C E4 85 F1 | 	sub	objptr, ##27148
09cd0     CC BC B1 FD | 	call	#__system___string_cmp
09cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
09cd8     37 00 00 AF 
09cdc     44 E4 05 A1 |  if_e	add	objptr, ##28228
09ce0     F2 38 02 AB |  if_e	rdlong	local10, objptr
09ce4     37 00 00 AF 
09ce8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09cec     01 38 06 A1 |  if_e	add	local10, #1
09cf0     5C 01 90 AD |  if_e	jmp	#LR__0869
09cf4     37 00 00 FF 
09cf8     44 E4 05 F1 | 	add	objptr, ##28228
09cfc     F2 38 02 FB | 	rdlong	local10, objptr
09d00     37 00 00 FF 
09d04     44 E4 85 F1 | 	sub	objptr, ##28228
09d08     02 38 06 F1 | 	add	local10, #2
09d0c     00 3A 06 F6 | 	mov	local11, #0
09d10                 | '   l=ct+2 : m=0 : do
09d10                 | LR__0865
09d10                 | '   if isdec(lparts(l).part$) then 
09d10     1C 2D 02 F6 | 	mov	local04, local10
09d14     03 2C 66 F0 | 	shl	local04, #3
09d18     35 00 00 FF 
09d1c     0C E4 05 F1 | 	add	objptr, ##27148
09d20     F2 2C 02 F1 | 	add	local04, objptr
09d24     16 13 02 FB | 	rdlong	arg01, local04
09d28     35 00 00 FF 
09d2c     0C E4 85 F1 | 	sub	objptr, ##27148
09d30     F8 CD BF FD | 	call	#_isdec
09d34     00 FA 0D F2 | 	cmp	result1, #0 wz
09d38     44 00 90 AD |  if_e	jmp	#LR__0866
09d3c     1D 3D 02 F6 | 	mov	local12, local11
09d40     13 3D 06 F1 | 	add	local12, #local01
09d44     1C 37 02 F6 | 	mov	local09, local10
09d48     03 36 66 F0 | 	shl	local09, #3
09d4c     35 00 00 FF 
09d50     0C E4 05 F1 | 	add	objptr, ##27148
09d54     F2 36 02 F1 | 	add	local09, objptr
09d58     1B 13 02 FB | 	rdlong	arg01, local09
09d5c     00 14 06 F6 | 	mov	arg02, #0
09d60     35 00 00 FF 
09d64     0C E4 85 F1 | 	sub	objptr, ##27148
09d68     FC F0 B1 FD | 	call	#__system____builtin_atoi
09d6c     FD 3E 02 F6 | 	mov	local13, result1
09d70                 | 	'.live	local13
09d70                 | 	'.live	local12
09d70     00 3C 8E F9 | 	altd	local12, #0
09d74     1F 3D 02 F6 | 	mov	local12, local13
09d78     01 3A 06 F1 | 	add	local11, #1
09d7c     08 00 90 FD | 	jmp	#LR__0867
09d80                 | LR__0866
09d80                 | '     return(17)
09d80     11 FA 05 F6 | 	mov	result1, #17
09d84     E4 03 90 FD | 	jmp	#LR__0885
09d88                 | LR__0867
09d88                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09d88     1C 2D 02 F6 | 	mov	local04, local10
09d8c     01 2C 06 F1 | 	add	local04, #1
09d90     03 2C 66 F0 | 	shl	local04, #3
09d94     35 00 00 FF 
09d98     0C E4 05 F1 | 	add	objptr, ##27148
09d9c     F2 2C 02 F1 | 	add	local04, objptr
09da0     16 13 02 FB | 	rdlong	arg01, local04
09da4     AD 01 00 FF 
09da8     50 15 06 F6 | 	mov	arg02, ##@LR__5786
09dac     35 00 00 FF 
09db0     0C E4 85 F1 | 	sub	objptr, ##27148
09db4     E8 BB B1 FD | 	call	#__system___string_cmp
09db8     00 FA 0D F2 | 	cmp	result1, #0 wz
09dbc     3C 00 90 AD |  if_e	jmp	#LR__0868
09dc0     1C 3F 02 F6 | 	mov	local13, local10
09dc4     01 3E 06 F1 | 	add	local13, #1
09dc8     03 3E 66 F0 | 	shl	local13, #3
09dcc     35 00 00 FF 
09dd0     0C E4 05 F1 | 	add	objptr, ##27148
09dd4     F2 3E 02 F1 | 	add	local13, objptr
09dd8     1F 13 02 FB | 	rdlong	arg01, local13
09ddc     AD 01 00 FF 
09de0     52 15 06 F6 | 	mov	arg02, ##@LR__5787
09de4     35 00 00 FF 
09de8     0C E4 85 F1 | 	sub	objptr, ##27148
09dec     B0 BB B1 FD | 	call	#__system___string_cmp
09df0     00 FA 0D F2 | 	cmp	result1, #0 wz
09df4     2C FA 05 56 |  if_ne	mov	result1, #44
09df8     70 03 90 5D |  if_ne	jmp	#LR__0885
09dfc                 | LR__0868
09dfc     02 38 06 F1 | 	add	local10, #2
09e00     1C 2D 02 F6 | 	mov	local04, local10
09e04     01 2C 86 F1 | 	sub	local04, #1
09e08     03 2C 66 F0 | 	shl	local04, #3
09e0c     35 00 00 FF 
09e10     0C E4 05 F1 | 	add	objptr, ##27148
09e14     F2 2C 02 F1 | 	add	local04, objptr
09e18     16 13 02 FB | 	rdlong	arg01, local04
09e1c     AD 01 00 FF 
09e20     54 15 06 F6 | 	mov	arg02, ##@LR__5788
09e24     35 00 00 FF 
09e28     0C E4 85 F1 | 	sub	objptr, ##27148
09e2c     70 BB B1 FD | 	call	#__system___string_cmp
09e30     00 FA 0D F2 | 	cmp	result1, #0 wz
09e34     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09e38     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0865
09e3c                 | '   if m>3 then return 45
09e3c     04 3A 56 F2 | 	cmps	local11, #4 wc
09e40     2D FA 05 36 |  if_ae	mov	result1, #45
09e44     24 03 90 3D |  if_ae	jmp	#LR__0885
09e48     00 41 06 F6 | 	mov	local14, #256
09e4c     0C 42 06 F6 | 	mov	local15, #12
09e50                 | LR__0869
09e50                 | '   arraytype=array_no_type : esize=12
09e50                 | ' 1350 
09e50                 | '   if lparts(l).part$="as" then
09e50     1C 2D 02 F6 | 	mov	local04, local10
09e54     03 2C 66 F0 | 	shl	local04, #3
09e58     35 00 00 FF 
09e5c     0C E4 05 F1 | 	add	objptr, ##27148
09e60     F2 2C 02 F1 | 	add	local04, objptr
09e64     16 13 02 FB | 	rdlong	arg01, local04
09e68     AD 01 00 FF 
09e6c     56 15 06 F6 | 	mov	arg02, ##@LR__5789
09e70     35 00 00 FF 
09e74     0C E4 85 F1 | 	sub	objptr, ##27148
09e78     24 BB B1 FD | 	call	#__system___string_cmp
09e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e80     E8 01 90 5D |  if_ne	jmp	#LR__0884
09e84                 | '     select case lparts(l+1).part$
09e84     1C 3D 02 F6 | 	mov	local12, local10
09e88     01 3C 06 F1 | 	add	local12, #1
09e8c     03 3C 66 F0 | 	shl	local12, #3
09e90     35 00 00 FF 
09e94     0C E4 05 F1 | 	add	objptr, ##27148
09e98     F2 3C 02 F1 | 	add	local12, objptr
09e9c     1E 45 02 FB | 	rdlong	local16, local12
09ea0     AD 01 00 FF 
09ea4     59 15 06 F6 | 	mov	arg02, ##@LR__5790
09ea8     22 13 02 F6 | 	mov	arg01, local16
09eac     35 00 00 FF 
09eb0     0C E4 85 F1 | 	sub	objptr, ##27148
09eb4     E8 BA B1 FD | 	call	#__system___string_cmp
09eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
09ebc     0C 01 90 AD |  if_e	jmp	#LR__0870
09ec0     AD 01 00 FF 
09ec4     5E 15 06 F6 | 	mov	arg02, ##@LR__5791
09ec8     22 13 02 F6 | 	mov	arg01, local16
09ecc     D0 BA B1 FD | 	call	#__system___string_cmp
09ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
09ed4     00 01 90 AD |  if_e	jmp	#LR__0871
09ed8     AD 01 00 FF 
09edc     64 15 06 F6 | 	mov	arg02, ##@LR__5792
09ee0     22 13 02 F6 | 	mov	arg01, local16
09ee4     B8 BA B1 FD | 	call	#__system___string_cmp
09ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
09eec     F4 00 90 AD |  if_e	jmp	#LR__0872
09ef0     AD 01 00 FF 
09ef4     6A 15 06 F6 | 	mov	arg02, ##@LR__5793
09ef8     22 13 02 F6 | 	mov	arg01, local16
09efc     A0 BA B1 FD | 	call	#__system___string_cmp
09f00     00 FA 0D F2 | 	cmp	result1, #0 wz
09f04     E8 00 90 AD |  if_e	jmp	#LR__0873
09f08     AD 01 00 FF 
09f0c     71 15 06 F6 | 	mov	arg02, ##@LR__5794
09f10     22 13 02 F6 | 	mov	arg01, local16
09f14     88 BA B1 FD | 	call	#__system___string_cmp
09f18     00 FA 0D F2 | 	cmp	result1, #0 wz
09f1c     DC 00 90 AD |  if_e	jmp	#LR__0874
09f20     AD 01 00 FF 
09f24     76 15 06 F6 | 	mov	arg02, ##@LR__5795
09f28     22 13 02 F6 | 	mov	arg01, local16
09f2c     70 BA B1 FD | 	call	#__system___string_cmp
09f30     00 FA 0D F2 | 	cmp	result1, #0 wz
09f34     D0 00 90 AD |  if_e	jmp	#LR__0875
09f38     AD 01 00 FF 
09f3c     7E 15 06 F6 | 	mov	arg02, ##@LR__5796
09f40     22 13 02 F6 | 	mov	arg01, local16
09f44     58 BA B1 FD | 	call	#__system___string_cmp
09f48     00 FA 0D F2 | 	cmp	result1, #0 wz
09f4c     C4 00 90 AD |  if_e	jmp	#LR__0876
09f50     AD 01 00 FF 
09f54     84 15 06 F6 | 	mov	arg02, ##@LR__5797
09f58     22 13 02 F6 | 	mov	arg01, local16
09f5c     40 BA B1 FD | 	call	#__system___string_cmp
09f60     00 FA 0D F2 | 	cmp	result1, #0 wz
09f64     B8 00 90 AD |  if_e	jmp	#LR__0877
09f68     AD 01 00 FF 
09f6c     8A 15 06 F6 | 	mov	arg02, ##@LR__5798
09f70     22 13 02 F6 | 	mov	arg01, local16
09f74     28 BA B1 FD | 	call	#__system___string_cmp
09f78     00 FA 0D F2 | 	cmp	result1, #0 wz
09f7c     AC 00 90 AD |  if_e	jmp	#LR__0878
09f80     AD 01 00 FF 
09f84     91 15 06 F6 | 	mov	arg02, ##@LR__5799
09f88     22 13 02 F6 | 	mov	arg01, local16
09f8c     10 BA B1 FD | 	call	#__system___string_cmp
09f90     00 FA 0D F2 | 	cmp	result1, #0 wz
09f94     A0 00 90 AD |  if_e	jmp	#LR__0879
09f98     AD 01 00 FF 
09f9c     98 15 06 F6 | 	mov	arg02, ##@LR__5800
09fa0     22 13 02 F6 | 	mov	arg01, local16
09fa4     F8 B9 B1 FD | 	call	#__system___string_cmp
09fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
09fac     94 00 90 AD |  if_e	jmp	#LR__0880
09fb0     AD 01 00 FF 
09fb4     9F 15 06 F6 | 	mov	arg02, ##@LR__5801
09fb8     22 13 02 F6 | 	mov	arg01, local16
09fbc     E0 B9 B1 FD | 	call	#__system___string_cmp
09fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
09fc4     88 00 90 AD |  if_e	jmp	#LR__0881
09fc8     90 00 90 FD | 	jmp	#LR__0882
09fcc                 | LR__0870
09fcc     01 41 06 F6 | 	mov	local14, #257
09fd0     01 42 06 F6 | 	mov	local15, #1
09fd4     94 00 90 FD | 	jmp	#LR__0884
09fd8                 | LR__0871
09fd8     02 41 06 F6 | 	mov	local14, #258
09fdc     01 42 06 F6 | 	mov	local15, #1
09fe0     88 00 90 FD | 	jmp	#LR__0884
09fe4                 | LR__0872
09fe4     03 41 06 F6 | 	mov	local14, #259
09fe8     02 42 06 F6 | 	mov	local15, #2
09fec     7C 00 90 FD | 	jmp	#LR__0884
09ff0                 | LR__0873
09ff0     04 41 06 F6 | 	mov	local14, #260
09ff4     02 42 06 F6 | 	mov	local15, #2
09ff8     70 00 90 FD | 	jmp	#LR__0884
09ffc                 | LR__0874
09ffc     05 41 06 F6 | 	mov	local14, #261
0a000     04 42 06 F6 | 	mov	local15, #4
0a004     64 00 90 FD | 	jmp	#LR__0884
0a008                 | LR__0875
0a008     05 41 06 F6 | 	mov	local14, #261
0a00c     04 42 06 F6 | 	mov	local15, #4
0a010     58 00 90 FD | 	jmp	#LR__0884
0a014                 | LR__0876
0a014     06 41 06 F6 | 	mov	local14, #262
0a018     04 42 06 F6 | 	mov	local15, #4
0a01c     4C 00 90 FD | 	jmp	#LR__0884
0a020                 | LR__0877
0a020     07 41 06 F6 | 	mov	local14, #263
0a024     08 42 06 F6 | 	mov	local15, #8
0a028     40 00 90 FD | 	jmp	#LR__0884
0a02c                 | LR__0878
0a02c     08 41 06 F6 | 	mov	local14, #264
0a030     08 42 06 F6 | 	mov	local15, #8
0a034     34 00 90 FD | 	jmp	#LR__0884
0a038                 | LR__0879
0a038     09 41 06 F6 | 	mov	local14, #265
0a03c     04 42 06 F6 | 	mov	local15, #4
0a040     28 00 90 FD | 	jmp	#LR__0884
0a044                 | LR__0880
0a044     0A 41 06 F6 | 	mov	local14, #266
0a048     08 42 06 F6 | 	mov	local15, #8
0a04c     1C 00 90 FD | 	jmp	#LR__0884
0a050                 | LR__0881
0a050     0B 41 06 F6 | 	mov	local14, #267
0a054     04 42 06 F6 | 	mov	local15, #4
0a058     10 00 90 FD | 	jmp	#LR__0884
0a05c                 | LR__0882
0a05c     2F FA 05 F6 | 	mov	result1, #47
0a060     08 01 90 FD | 	jmp	#LR__0885
0a064                 | LR__0883
0a064                 | '   return 46
0a064     2E FA 05 F6 | 	mov	result1, #46
0a068     00 01 90 FD | 	jmp	#LR__0885
0a06c                 | LR__0884
0a06c     13 43 02 FD | 	qmul	local15, local01
0a070     18 32 62 FD | 	getqx	local07
0a074     14 33 02 FD | 	qmul	local07, local02
0a078     18 44 62 FD | 	getqx	local16
0a07c     15 45 02 FD | 	qmul	local16, local03
0a080     52 00 00 FF 
0a084     44 E4 05 F1 | 	add	objptr, ##42052
0a088     F2 46 02 FB | 	rdlong	local17, objptr
0a08c     20 15 02 F6 | 	mov	arg02, local14
0a090     18 44 62 FD | 	getqx	local16
0a094     22 47 82 F1 | 	sub	local17, local16
0a098     10 46 86 F1 | 	sub	local17, #16
0a09c     0F 46 26 F5 | 	andn	local17, #15
0a0a0     F2 46 62 FC | 	wrlong	local17, objptr
0a0a4     52 00 00 FF 
0a0a8     44 E4 85 F1 | 	sub	objptr, ##42052
0a0ac     23 13 02 F6 | 	mov	arg01, local17
0a0b0     C0 80 B1 FD | 	call	#_psdpoke
0a0b4     23 13 02 F6 | 	mov	arg01, local17
0a0b8     02 12 06 F1 | 	add	arg01, #2
0a0bc     21 15 02 F6 | 	mov	arg02, local15
0a0c0     B0 80 B1 FD | 	call	#_psdpoke
0a0c4     23 13 02 F6 | 	mov	arg01, local17
0a0c8     04 12 06 F1 | 	add	arg01, #4
0a0cc     13 15 02 F6 | 	mov	arg02, local01
0a0d0     58 80 B1 FD | 	call	#_pslpoke
0a0d4     23 13 02 F6 | 	mov	arg01, local17
0a0d8     08 12 06 F1 | 	add	arg01, #8
0a0dc     14 15 02 F6 | 	mov	arg02, local02
0a0e0     48 80 B1 FD | 	call	#_pslpoke
0a0e4     23 13 02 F6 | 	mov	arg01, local17
0a0e8     0C 12 06 F1 | 	add	arg01, #12
0a0ec     15 15 02 F6 | 	mov	arg02, local03
0a0f0     38 80 B1 FD | 	call	#_pslpoke
0a0f4     18 3D 02 F6 | 	mov	local12, local06
0a0f8     04 3C 66 F0 | 	shl	local12, #4
0a0fc     14 00 00 FF 
0a100     F8 E5 05 F1 | 	add	objptr, ##10744
0a104     F2 3C 02 F1 | 	add	local12, objptr
0a108     1E 2F 62 FC | 	wrlong	local05, local12
0a10c     18 3D 02 F6 | 	mov	local12, local06
0a110     04 3C 66 F0 | 	shl	local12, #4
0a114     F2 3C 02 F1 | 	add	local12, objptr
0a118     04 3C 06 F1 | 	add	local12, #4
0a11c     1E 47 62 FC | 	wrlong	local17, local12
0a120     18 3D 02 F6 | 	mov	local12, local06
0a124     04 3C 66 F0 | 	shl	local12, #4
0a128     F2 3C 02 F1 | 	add	local12, objptr
0a12c     0C 3C 06 F1 | 	add	local12, #12
0a130     1E 41 62 FC | 	wrlong	local14, local12
0a134                 | ' memtop=arrayptr
0a134                 | ' psdpoke arrayptr,arraytype 
0a134                 | ' psdpoke arrayptr+2,esize 
0a134                 | ' pslpoke arrayptr+4,dims(0)
0a134                 | ' pslpoke arrayptr+8,dims(1)
0a134                 | ' pslpoke arrayptr+12,dims(2)
0a134                 | ' variables(j).name=varname2$
0a134                 | ' variables(j).value.uresult=arrayptr
0a134                 | ' variables(j).vartype=arraytype
0a134                 | ' if j=varnum then varnum+=1
0a134     20 00 00 FF 
0a138     10 E4 05 F1 | 	add	objptr, ##16400
0a13c     F2 32 02 FB | 	rdlong	local07, objptr
0a140     35 00 00 FF 
0a144     08 E4 85 F1 | 	sub	objptr, ##27144
0a148     19 31 0A F2 | 	cmp	local06, local07 wz
0a14c     35 00 00 AF 
0a150     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a154     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a158     01 32 06 A1 |  if_e	add	local07, #1
0a15c     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a160     35 00 00 AF 
0a164     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a168                 | ' return 0
0a168     00 FA 05 F6 | 	mov	result1, #0
0a16c                 | LR__0885
0a16c     A7 F0 03 F6 | 	mov	ptra, fp
0a170     B2 00 A0 FD | 	call	#popregs_
0a174                 | _compile_dim_ret
0a174     2D 00 64 FD | 	ret
0a178                 | 
0a178                 | ' 
0a178                 | ' '----- compile 'for' command. 
0a178                 | ' 
0a178                 | ' function compile_for() as ulong  
0a178                 | _compile_for
0a178     05 4A 05 F6 | 	mov	COUNT_, #5
0a17c     A8 00 A0 FD | 	call	#pushregs_
0a180                 | ' 
0a180                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a180     37 00 00 FF 
0a184     44 E4 05 F1 | 	add	objptr, ##28228
0a188     F2 14 02 FB | 	rdlong	arg02, objptr
0a18c     01 14 06 F1 | 	add	arg02, #1
0a190     03 14 66 F0 | 	shl	arg02, #3
0a194     02 00 00 FF 
0a198     38 E4 85 F1 | 	sub	objptr, ##1080
0a19c     F2 14 02 F1 | 	add	arg02, objptr
0a1a0     0A 13 02 FB | 	rdlong	arg01, arg02
0a1a4     35 00 00 FF 
0a1a8     0C E4 85 F1 | 	sub	objptr, ##27148
0a1ac                 | ' 
0a1ac                 | ' select case s
0a1ac     AB 01 00 FF 
0a1b0     A8 14 06 F6 | 	mov	arg02, ##@LR__5531
0a1b4     E8 B7 B1 FD | 	call	#__system___string_cmp
0a1b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1bc     1B FA 05 A6 |  if_e	mov	result1, #27
0a1c0     00 FA 05 56 |  if_ne	mov	result1, #0
0a1c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1c8     0C 00 90 AD |  if_e	jmp	#LR__0890
0a1cc     05 12 06 F6 | 	mov	arg01, #5
0a1d0     A8 DB BF FD | 	call	#_compile_immediate_assign
0a1d4     08 00 90 FD | 	jmp	#LR__0891
0a1d8                 | LR__0890
0a1d8     20 FA 05 F6 | 	mov	result1, #32
0a1dc     D0 02 90 FD | 	jmp	#LR__0895
0a1e0                 | LR__0891
0a1e0     4A 00 00 FF 
0a1e4     7C E4 05 F1 | 	add	objptr, ##38012
0a1e8     F2 14 02 FB | 	rdlong	arg02, objptr
0a1ec     0A 13 02 F6 | 	mov	arg01, arg02
0a1f0     01 12 86 F1 | 	sub	arg01, #1
0a1f4     09 2D 02 F6 | 	mov	local04, arg01
0a1f8     01 2C 66 F0 | 	shl	local04, #1
0a1fc     09 2D 02 F1 | 	add	local04, arg01
0a200     02 2C 66 F0 | 	shl	local04, #2
0a204     03 00 00 FF 
0a208     00 E4 85 F1 | 	sub	objptr, ##1536
0a20c     F2 2C 02 F1 | 	add	local04, objptr
0a210     16 27 02 FB | 	rdlong	local01, local04
0a214     04 2C 06 F1 | 	add	local04, #4
0a218     16 2D 02 FB | 	rdlong	local04, local04
0a21c     01 14 86 F1 | 	sub	arg02, #1
0a220     0A 13 02 F6 | 	mov	arg01, arg02
0a224     01 12 66 F0 | 	shl	arg01, #1
0a228     0A 13 02 F1 | 	add	arg01, arg02
0a22c     02 12 66 F0 | 	shl	arg01, #2
0a230     F2 12 02 F1 | 	add	arg01, objptr
0a234     08 12 06 F1 | 	add	arg01, #8
0a238     09 15 02 FB | 	rdlong	arg02, arg01
0a23c     16 29 02 F6 | 	mov	local02, local04
0a240     0A 2B 02 F6 | 	mov	local03, arg02
0a244                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a244     17 2A 0E F2 | 	cmp	local03, #23 wz
0a248     47 00 00 FF 
0a24c     7C E4 85 F1 | 	sub	objptr, ##36476
0a250     22 FA 05 56 |  if_ne	mov	result1, #34
0a254     58 02 90 5D |  if_ne	jmp	#LR__0895
0a258     13 2F 02 F6 | 	mov	local05, local01
0a25c                 | ' varnum=t1.result.uresult
0a25c                 | ' if lparts(ct).part$<>"to" then return 33
0a25c     37 00 00 FF 
0a260     44 E4 05 F1 | 	add	objptr, ##28228
0a264     F2 26 02 FB | 	rdlong	local01, objptr
0a268     03 26 66 F0 | 	shl	local01, #3
0a26c     02 00 00 FF 
0a270     38 E4 85 F1 | 	sub	objptr, ##1080
0a274     F2 26 02 F1 | 	add	local01, objptr
0a278     13 13 02 FB | 	rdlong	arg01, local01
0a27c     AD 01 00 FF 
0a280     A6 15 06 F6 | 	mov	arg02, ##@LR__5802
0a284     35 00 00 FF 
0a288     0C E4 85 F1 | 	sub	objptr, ##27148
0a28c     10 B7 B1 FD | 	call	#__system___string_cmp
0a290     00 FA 0D F2 | 	cmp	result1, #0 wz
0a294     21 FA 05 56 |  if_ne	mov	result1, #33
0a298     14 02 90 5D |  if_ne	jmp	#LR__0895
0a29c     37 00 00 FF 
0a2a0     44 E4 05 F1 | 	add	objptr, ##28228
0a2a4     F2 2C 02 FB | 	rdlong	local04, objptr
0a2a8     01 2C 06 F1 | 	add	local04, #1
0a2ac     F2 2C 62 FC | 	wrlong	local04, objptr
0a2b0     37 00 00 FF 
0a2b4     44 E4 85 F1 | 	sub	objptr, ##28228
0a2b8     A8 11 B0 FD | 	call	#_expr
0a2bc                 | ' ct+=1
0a2bc                 | ' expr()  										' there is "to" value pushed on the stack
0a2bc                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0a2bc     37 00 00 FF 
0a2c0     44 E4 05 F1 | 	add	objptr, ##28228
0a2c4     F2 2C 02 FB | 	rdlong	local04, objptr
0a2c8     03 2C 66 F0 | 	shl	local04, #3
0a2cc     02 00 00 FF 
0a2d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a2d4     F2 2C 02 F1 | 	add	local04, objptr
0a2d8     16 13 02 FB | 	rdlong	arg01, local04
0a2dc     AD 01 00 FF 
0a2e0     A9 15 06 F6 | 	mov	arg02, ##@LR__5803
0a2e4     35 00 00 FF 
0a2e8     0C E4 85 F1 | 	sub	objptr, ##27148
0a2ec     B0 B6 B1 FD | 	call	#__system___string_cmp
0a2f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f4     3C 00 90 AD |  if_e	jmp	#LR__0892
0a2f8     37 00 00 FF 
0a2fc     44 E4 05 F1 | 	add	objptr, ##28228
0a300     F2 2C 02 FB | 	rdlong	local04, objptr
0a304     03 2C 66 F0 | 	shl	local04, #3
0a308     02 00 00 FF 
0a30c     38 E4 85 F1 | 	sub	objptr, ##1080
0a310     F2 2C 02 F1 | 	add	local04, objptr
0a314     16 13 02 FB | 	rdlong	arg01, local04
0a318     AD 01 00 FF 
0a31c     AE 15 06 F6 | 	mov	arg02, ##@LR__5804
0a320     35 00 00 FF 
0a324     0C E4 85 F1 | 	sub	objptr, ##27148
0a328     74 B6 B1 FD | 	call	#__system___string_cmp
0a32c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a330     24 00 90 5D |  if_ne	jmp	#LR__0893
0a334                 | LR__0892
0a334     37 00 00 FF 
0a338     44 E4 05 F1 | 	add	objptr, ##28228
0a33c     F2 26 02 FB | 	rdlong	local01, objptr
0a340     01 26 06 F1 | 	add	local01, #1
0a344     F2 26 62 FC | 	wrlong	local01, objptr
0a348     37 00 00 FF 
0a34c     44 E4 85 F1 | 	sub	objptr, ##28228
0a350     10 11 B0 FD | 	call	#_expr
0a354     78 00 90 FD | 	jmp	#LR__0894
0a358                 | LR__0893
0a358     4A 00 00 FF 
0a35c     7C E4 05 F1 | 	add	objptr, ##38012
0a360     F2 26 02 FB | 	rdlong	local01, objptr
0a364     13 2D 02 F6 | 	mov	local04, local01
0a368     01 2C 66 F0 | 	shl	local04, #1
0a36c     13 2D 02 F1 | 	add	local04, local01
0a370     02 2C 66 F0 | 	shl	local04, #2
0a374     03 00 00 FF 
0a378     00 E4 85 F1 | 	sub	objptr, ##1536
0a37c     F2 2C 02 F1 | 	add	local04, objptr
0a380     08 2C 06 F1 | 	add	local04, #8
0a384     16 39 68 FC | 	wrlong	#28, local04
0a388     03 00 00 FF 
0a38c     00 E4 05 F1 | 	add	objptr, ##1536
0a390     F2 26 02 FB | 	rdlong	local01, objptr
0a394     13 2D 02 F6 | 	mov	local04, local01
0a398     01 2C 66 F0 | 	shl	local04, #1
0a39c     13 2D 02 F1 | 	add	local04, local01
0a3a0     02 2C 66 F0 | 	shl	local04, #2
0a3a4     03 00 00 FF 
0a3a8     00 E4 85 F1 | 	sub	objptr, ##1536
0a3ac     F2 2C 02 F1 | 	add	local04, objptr
0a3b0     16 03 68 FC | 	wrlong	#1, local04
0a3b4     03 00 00 FF 
0a3b8     00 E4 05 F1 | 	add	objptr, ##1536
0a3bc     F2 26 02 FB | 	rdlong	local01, objptr
0a3c0     01 26 06 F1 | 	add	local01, #1
0a3c4     F2 26 62 FC | 	wrlong	local01, objptr
0a3c8     4A 00 00 FF 
0a3cc     7C E4 85 F1 | 	sub	objptr, ##38012
0a3d0                 | LR__0894
0a3d0     4A 00 00 FF 
0a3d4     7C E4 05 F1 | 	add	objptr, ##38012
0a3d8     F2 26 02 FB | 	rdlong	local01, objptr
0a3dc     13 2D 02 F6 | 	mov	local04, local01
0a3e0     01 2C 66 F0 | 	shl	local04, #1
0a3e4     13 2D 02 F1 | 	add	local04, local01
0a3e8     02 2C 66 F0 | 	shl	local04, #2
0a3ec     03 00 00 FF 
0a3f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a3f4     F2 2C 02 F1 | 	add	local04, objptr
0a3f8     08 2C 06 F1 | 	add	local04, #8
0a3fc     16 39 68 FC | 	wrlong	#28, local04
0a400     03 00 00 FF 
0a404     00 E4 05 F1 | 	add	objptr, ##1536
0a408     F2 26 02 FB | 	rdlong	local01, objptr
0a40c     13 2D 02 F6 | 	mov	local04, local01
0a410     01 2C 66 F0 | 	shl	local04, #1
0a414     13 2D 02 F1 | 	add	local04, local01
0a418     02 2C 66 F0 | 	shl	local04, #2
0a41c     03 00 00 FF 
0a420     00 E4 85 F1 | 	sub	objptr, ##1536
0a424     F2 2C 02 F1 | 	add	local04, objptr
0a428     16 2F 62 FC | 	wrlong	local05, local04
0a42c     03 00 00 FF 
0a430     00 E4 05 F1 | 	add	objptr, ##1536
0a434     F2 2E 02 FB | 	rdlong	local05, objptr
0a438     01 2E 06 F1 | 	add	local05, #1
0a43c     F2 2E 62 FC | 	wrlong	local05, objptr
0a440     17 27 02 F6 | 	mov	local01, local05
0a444     01 26 66 F0 | 	shl	local01, #1
0a448     17 27 02 F1 | 	add	local01, local05
0a44c     02 26 66 F0 | 	shl	local01, #2
0a450     03 00 00 FF 
0a454     00 E4 85 F1 | 	sub	objptr, ##1536
0a458     F2 26 02 F1 | 	add	local01, objptr
0a45c     08 26 06 F1 | 	add	local01, #8
0a460     13 95 68 FC | 	wrlong	#74, local01
0a464     03 00 00 FF 
0a468     00 E4 05 F1 | 	add	objptr, ##1536
0a46c     F2 2E 02 FB | 	rdlong	local05, objptr
0a470     17 27 02 F6 | 	mov	local01, local05
0a474     01 26 66 F0 | 	shl	local01, #1
0a478     17 27 02 F1 | 	add	local01, local05
0a47c     02 26 66 F0 | 	shl	local01, #2
0a480     03 00 00 FF 
0a484     00 E4 85 F1 | 	sub	objptr, ##1536
0a488     F2 26 02 F1 | 	add	local01, objptr
0a48c     13 01 68 FC | 	wrlong	#0, local01
0a490     03 00 00 FF 
0a494     00 E4 05 F1 | 	add	objptr, ##1536
0a498     F2 2E 02 FB | 	rdlong	local05, objptr
0a49c     01 2E 06 F1 | 	add	local05, #1
0a4a0     F2 2E 62 FC | 	wrlong	local05, objptr
0a4a4     4A 00 00 FF 
0a4a8     7C E4 85 F1 | 	sub	objptr, ##38012
0a4ac                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0a4ac                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a4ac                 | ' return 0
0a4ac     00 FA 05 F6 | 	mov	result1, #0
0a4b0                 | LR__0895
0a4b0     A7 F0 03 F6 | 	mov	ptra, fp
0a4b4     B2 00 A0 FD | 	call	#popregs_
0a4b8                 | _compile_for_ret
0a4b8     2D 00 64 FD | 	ret
0a4bc                 | 
0a4bc                 | ' 
0a4bc                 | ' '----- compile 'next' command. 
0a4bc                 | ' 
0a4bc                 | ' function compile_next() as ulong
0a4bc                 | _compile_next
0a4bc     04 4A 05 F6 | 	mov	COUNT_, #4
0a4c0     A8 00 A0 FD | 	call	#pushregs_
0a4c4     37 00 00 FF 
0a4c8     44 E4 05 F1 | 	add	objptr, ##28228
0a4cc     F2 14 02 FB | 	rdlong	arg02, objptr
0a4d0     03 14 66 F0 | 	shl	arg02, #3
0a4d4     02 00 00 FF 
0a4d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a4dc     F2 14 02 F1 | 	add	arg02, objptr
0a4e0     0A 27 02 FB | 	rdlong	local01, arg02
0a4e4                 | ' 
0a4e4                 | ' varname$=lparts(ct).part$ 
0a4e4                 | ' if varnum=0 then return 35
0a4e4     04 E4 85 F1 | 	sub	objptr, #4
0a4e8     F2 14 0A FB | 	rdlong	arg02, objptr wz
0a4ec     35 00 00 FF 
0a4f0     08 E4 85 F1 | 	sub	objptr, ##27144
0a4f4     23 FA 05 A6 |  if_e	mov	result1, #35
0a4f8     4C 01 90 AD |  if_e	jmp	#LR__0902
0a4fc     01 28 66 F6 | 	neg	local02, #1
0a500                 | ' j=-1
0a500                 | ' for i=0 to varnum-1
0a500     00 2A 06 F6 | 	mov	local03, #0
0a504     35 00 00 FF 
0a508     08 E4 05 F1 | 	add	objptr, ##27144
0a50c     F2 2C 02 FB | 	rdlong	local04, objptr
0a510     35 00 00 FF 
0a514     08 E4 85 F1 | 	sub	objptr, ##27144
0a518                 | LR__0900
0a518     16 2B 12 F2 | 	cmp	local03, local04 wc
0a51c     38 00 90 3D |  if_ae	jmp	#LR__0901
0a520                 | '   if variables(i).name=varname$ then j=i : exit
0a520     15 15 02 F6 | 	mov	arg02, local03
0a524     04 14 66 F0 | 	shl	arg02, #4
0a528     14 00 00 FF 
0a52c     F8 E5 05 F1 | 	add	objptr, ##10744
0a530     F2 14 02 F1 | 	add	arg02, objptr
0a534     0A 13 02 FB | 	rdlong	arg01, arg02
0a538     13 15 02 F6 | 	mov	arg02, local01
0a53c     14 00 00 FF 
0a540     F8 E5 85 F1 | 	sub	objptr, ##10744
0a544     58 B4 B1 FD | 	call	#__system___string_cmp
0a548     00 FA 0D F2 | 	cmp	result1, #0 wz
0a54c     15 29 02 A6 |  if_e	mov	local02, local03
0a550     01 2A 06 51 |  if_ne	add	local03, #1
0a554     C0 FF 9F 5D |  if_ne	jmp	#LR__0900
0a558                 | LR__0901
0a558                 | ' if j=-1 then return 35
0a558     FF FF 7F FF 
0a55c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0a560     23 FA 05 A6 |  if_e	mov	result1, #35
0a564     E0 00 90 AD |  if_e	jmp	#LR__0902
0a568     4A 00 00 FF 
0a56c     7C E4 05 F1 | 	add	objptr, ##38012
0a570     F2 2C 02 FB | 	rdlong	local04, objptr
0a574     16 2B 02 F6 | 	mov	local03, local04
0a578     01 2A 66 F0 | 	shl	local03, #1
0a57c     16 2B 02 F1 | 	add	local03, local04
0a580     02 2A 66 F0 | 	shl	local03, #2
0a584     03 00 00 FF 
0a588     00 E4 85 F1 | 	sub	objptr, ##1536
0a58c     F2 2A 02 F1 | 	add	local03, objptr
0a590     08 2A 06 F1 | 	add	local03, #8
0a594     15 39 68 FC | 	wrlong	#28, local03
0a598     03 00 00 FF 
0a59c     00 E4 05 F1 | 	add	objptr, ##1536
0a5a0     F2 2C 02 FB | 	rdlong	local04, objptr
0a5a4     16 2B 02 F6 | 	mov	local03, local04
0a5a8     01 2A 66 F0 | 	shl	local03, #1
0a5ac     16 2B 02 F1 | 	add	local03, local04
0a5b0     02 2A 66 F0 | 	shl	local03, #2
0a5b4     03 00 00 FF 
0a5b8     00 E4 85 F1 | 	sub	objptr, ##1536
0a5bc     F2 2A 02 F1 | 	add	local03, objptr
0a5c0     15 29 62 FC | 	wrlong	local02, local03
0a5c4     03 00 00 FF 
0a5c8     00 E4 05 F1 | 	add	objptr, ##1536
0a5cc     F2 2C 02 FB | 	rdlong	local04, objptr
0a5d0     01 2C 06 F1 | 	add	local04, #1
0a5d4     F2 2C 62 FC | 	wrlong	local04, objptr
0a5d8     16 2B 02 F6 | 	mov	local03, local04
0a5dc     01 2A 66 F0 | 	shl	local03, #1
0a5e0     16 2B 02 F1 | 	add	local03, local04
0a5e4     02 2A 66 F0 | 	shl	local03, #2
0a5e8     03 00 00 FF 
0a5ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a5f0     F2 2A 02 F1 | 	add	local03, objptr
0a5f4     08 2A 06 F1 | 	add	local03, #8
0a5f8     15 97 68 FC | 	wrlong	#75, local03
0a5fc     03 00 00 FF 
0a600     00 E4 05 F1 | 	add	objptr, ##1536
0a604     F2 2C 02 FB | 	rdlong	local04, objptr
0a608     16 2B 02 F6 | 	mov	local03, local04
0a60c     01 2A 66 F0 | 	shl	local03, #1
0a610     16 2B 02 F1 | 	add	local03, local04
0a614     02 2A 66 F0 | 	shl	local03, #2
0a618     03 00 00 FF 
0a61c     00 E4 85 F1 | 	sub	objptr, ##1536
0a620     F2 2A 02 F1 | 	add	local03, objptr
0a624     15 01 68 FC | 	wrlong	#0, local03
0a628     03 00 00 FF 
0a62c     00 E4 05 F1 | 	add	objptr, ##1536
0a630     F2 2C 02 FB | 	rdlong	local04, objptr
0a634     01 2C 06 F1 | 	add	local04, #1
0a638     F2 2C 62 FC | 	wrlong	local04, objptr
0a63c     4A 00 00 FF 
0a640     7C E4 85 F1 | 	sub	objptr, ##38012
0a644                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0a644                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a644                 | ' return 0
0a644     00 FA 05 F6 | 	mov	result1, #0
0a648                 | LR__0902
0a648     A7 F0 03 F6 | 	mov	ptra, fp
0a64c     B2 00 A0 FD | 	call	#popregs_
0a650                 | _compile_next_ret
0a650     2D 00 64 FD | 	ret
0a654                 | 
0a654                 | ' 
0a654                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0a654                 | ' 
0a654                 | ' function compile_gosub() as ulong
0a654                 | _compile_gosub
0a654     02 4A 05 F6 | 	mov	COUNT_, #2
0a658     A8 00 A0 FD | 	call	#pushregs_
0a65c     4A 00 00 FF 
0a660     7C E4 05 F1 | 	add	objptr, ##38012
0a664     F2 26 02 FB | 	rdlong	local01, objptr
0a668     13 29 02 F6 | 	mov	local02, local01
0a66c     01 28 66 F0 | 	shl	local02, #1
0a670     13 29 02 F1 | 	add	local02, local01
0a674     02 28 66 F0 | 	shl	local02, #2
0a678     03 00 00 FF 
0a67c     00 E4 85 F1 | 	sub	objptr, ##1536
0a680     F2 28 02 F1 | 	add	local02, objptr
0a684     08 28 06 F1 | 	add	local02, #8
0a688     14 53 69 FC | 	wrlong	#169, local02
0a68c     03 00 00 FF 
0a690     00 E4 05 F1 | 	add	objptr, ##1536
0a694     F2 28 02 FB | 	rdlong	local02, objptr
0a698     01 28 06 F1 | 	add	local02, #1
0a69c     F2 28 62 FC | 	wrlong	local02, objptr
0a6a0     4A 00 00 FF 
0a6a4     7C E4 85 F1 | 	sub	objptr, ##38012
0a6a8     0C 00 B0 FD | 	call	#_compile_goto
0a6ac                 | ' compiledline(lineptr).result_type=token_gosub
0a6ac                 | ' lineptr+=1
0a6ac                 | ' err=compile_goto()
0a6ac                 | ' return err
0a6ac     A7 F0 03 F6 | 	mov	ptra, fp
0a6b0     B2 00 A0 FD | 	call	#popregs_
0a6b4                 | _compile_gosub_ret
0a6b4     2D 00 64 FD | 	ret
0a6b8                 | 
0a6b8                 | ' 
0a6b8                 | ' '----- compile 'goto' 
0a6b8                 | ' 
0a6b8                 | ' function compile_goto() as ulong
0a6b8                 | _compile_goto
0a6b8     03 4A 05 F6 | 	mov	COUNT_, #3
0a6bc     A8 00 A0 FD | 	call	#pushregs_
0a6c0     34 F0 07 F1 | 	add	ptra, #52
0a6c4                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0a6c4     37 00 00 FF 
0a6c8     44 E4 05 F1 | 	add	objptr, ##28228
0a6cc     F2 16 02 FB | 	rdlong	arg03, objptr
0a6d0     03 16 66 F0 | 	shl	arg03, #3
0a6d4     02 00 00 FF 
0a6d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a6dc     F2 16 02 F1 | 	add	arg03, objptr
0a6e0     04 16 06 F1 | 	add	arg03, #4
0a6e4     0B 17 02 FB | 	rdlong	arg03, arg03
0a6e8     01 00 00 FF 
0a6ec     00 16 0E F2 | 	cmp	arg03, ##512 wz
0a6f0     35 00 00 FF 
0a6f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a6f8     CC 02 90 5D |  if_ne	jmp	#LR__0915
0a6fc     37 00 00 FF 
0a700     44 E4 05 F1 | 	add	objptr, ##28228
0a704     F2 16 02 FB | 	rdlong	arg03, objptr
0a708     01 16 06 F1 | 	add	arg03, #1
0a70c     03 16 66 F0 | 	shl	arg03, #3
0a710     02 00 00 FF 
0a714     38 E4 85 F1 | 	sub	objptr, ##1080
0a718     F2 16 02 F1 | 	add	arg03, objptr
0a71c     04 16 06 F1 | 	add	arg03, #4
0a720     0B 17 02 FB | 	rdlong	arg03, arg03
0a724     FE 17 0E F2 | 	cmp	arg03, #510 wz
0a728     35 00 00 FF 
0a72c     0C E4 85 F1 | 	sub	objptr, ##27148
0a730     94 02 90 5D |  if_ne	jmp	#LR__0915
0a734     37 00 00 FF 
0a738     44 E4 05 F1 | 	add	objptr, ##28228
0a73c     F2 16 02 FB | 	rdlong	arg03, objptr
0a740     03 16 66 F0 | 	shl	arg03, #3
0a744     02 00 00 FF 
0a748     38 E4 85 F1 | 	sub	objptr, ##1080
0a74c     F2 16 02 F1 | 	add	arg03, objptr
0a750     0B 13 02 FB | 	rdlong	arg01, arg03
0a754     00 14 06 F6 | 	mov	arg02, #0
0a758     35 00 00 FF 
0a75c     0C E4 85 F1 | 	sub	objptr, ##27148
0a760     04 E7 B1 FD | 	call	#__system____builtin_atoi
0a764     04 4E 05 F1 | 	add	fp, #4
0a768     A7 FA 61 FC | 	wrlong	result1, fp
0a76c     4A 00 00 FF 
0a770     7C E4 05 F1 | 	add	objptr, ##38012
0a774     F2 26 02 FB | 	rdlong	local01, objptr
0a778     13 29 02 F6 | 	mov	local02, local01
0a77c     01 28 66 F0 | 	shl	local02, #1
0a780     13 29 02 F1 | 	add	local02, local01
0a784     02 28 66 F0 | 	shl	local02, #2
0a788     03 00 00 FF 
0a78c     00 E4 85 F1 | 	sub	objptr, ##1536
0a790     F2 28 02 F1 | 	add	local02, objptr
0a794     08 28 06 F1 | 	add	local02, #8
0a798     14 9D 68 FC | 	wrlong	#78, local02
0a79c     03 00 00 FF 
0a7a0     0C E4 05 F1 | 	add	objptr, ##1548
0a7a4     F2 2A 02 FB | 	rdlong	local03, objptr
0a7a8     4A 00 00 FF 
0a7ac     88 E4 85 F1 | 	sub	objptr, ##38024
0a7b0     04 4E 05 F1 | 	add	fp, #4
0a7b4     A7 2A 62 FC | 	wrlong	local03, fp
0a7b8     08 4E 85 F1 | 	sub	fp, #8
0a7bc                 | '   gotoline=val%(lparts(ct).part$) 
0a7bc                 | '   compiledline(lineptr).result_type=token_fast_goto
0a7bc                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0a7bc                 | '   do
0a7bc                 | LR__0910
0a7bc     10 4E 05 F1 | 	add	fp, #16
0a7c0     A7 12 02 F6 | 	mov	arg01, fp
0a7c4     08 4E 85 F1 | 	sub	fp, #8
0a7c8     A7 14 02 FB | 	rdlong	arg02, fp
0a7cc     08 4E 85 F1 | 	sub	fp, #8
0a7d0     18 16 06 F6 | 	mov	arg03, #24
0a7d4     0B 00 00 FF 
0a7d8     CC E4 05 F1 | 	add	objptr, ##5836
0a7dc     10 A5 B1 FD | 	call	#_psram_spin2_read1
0a7e0     0B 00 00 FF 
0a7e4     CC E4 85 F1 | 	sub	objptr, ##5836
0a7e8                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a7e8                 | '     if gotoheader(0)<>$FFFFFFFF then
0a7e8     10 4E 05 F1 | 	add	fp, #16
0a7ec     A7 2A 02 FB | 	rdlong	local03, fp
0a7f0     10 4E 85 F1 | 	sub	fp, #16
0a7f4     FF FF 7F FF 
0a7f8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0a7fc     24 00 90 AD |  if_e	jmp	#LR__0911
0a800     08 4E 05 F1 | 	add	fp, #8
0a804     A7 2A 02 FB | 	rdlong	local03, fp
0a808     04 4E 05 F1 | 	add	fp, #4
0a80c     A7 2A 62 FC | 	wrlong	local03, fp
0a810     18 4E 05 F1 | 	add	fp, #24
0a814     A7 2A 02 FB | 	rdlong	local03, fp
0a818     1C 4E 85 F1 | 	sub	fp, #28
0a81c     A7 2A 62 FC | 	wrlong	local03, fp
0a820     08 4E 85 F1 | 	sub	fp, #8
0a824                 | LR__0911
0a824     24 4E 05 F1 | 	add	fp, #36
0a828     A7 2A 02 FB | 	rdlong	local03, fp
0a82c     24 4E 85 F1 | 	sub	fp, #36
0a830     FF FF 3F FF 
0a834     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0a838     10 4E 05 51 |  if_ne	add	fp, #16
0a83c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0a840     10 4E 85 51 |  if_ne	sub	fp, #16
0a844     FF FF 7F 5F 
0a848     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a84c     1C 00 90 AD |  if_e	jmp	#LR__0912
0a850     10 4E 05 F1 | 	add	fp, #16
0a854     A7 2A 02 FB | 	rdlong	local03, fp
0a858     0C 4E 85 F1 | 	sub	fp, #12
0a85c     A7 28 02 FB | 	rdlong	local02, fp
0a860     04 4E 85 F1 | 	sub	fp, #4
0a864     14 2B 0A F2 | 	cmp	local03, local02 wz
0a868     50 FF 9F 5D |  if_ne	jmp	#LR__0910
0a86c                 | LR__0912
0a86c                 | '   if gotoheader(0)=gotoline then
0a86c     10 4E 05 F1 | 	add	fp, #16
0a870     A7 2A 02 FB | 	rdlong	local03, fp
0a874     0C 4E 85 F1 | 	sub	fp, #12
0a878     A7 26 02 FB | 	rdlong	local01, fp
0a87c     04 4E 85 F1 | 	sub	fp, #4
0a880     13 2B 0A F2 | 	cmp	local03, local01 wz
0a884     7C 00 90 5D |  if_ne	jmp	#LR__0913
0a888     4A 00 00 FF 
0a88c     7C E4 05 F1 | 	add	objptr, ##38012
0a890     F2 26 02 FB | 	rdlong	local01, objptr
0a894     13 29 02 F6 | 	mov	local02, local01
0a898     01 28 66 F0 | 	shl	local02, #1
0a89c     13 29 02 F1 | 	add	local02, local01
0a8a0     02 28 66 F0 | 	shl	local02, #2
0a8a4     03 00 00 FF 
0a8a8     00 E4 85 F1 | 	sub	objptr, ##1536
0a8ac     F2 28 02 F1 | 	add	local02, objptr
0a8b0     0C 4E 05 F1 | 	add	fp, #12
0a8b4     A7 2A 02 FB | 	rdlong	local03, fp
0a8b8     14 2B 62 FC | 	wrlong	local03, local02
0a8bc     03 00 00 FF 
0a8c0     00 E4 05 F1 | 	add	objptr, ##1536
0a8c4     F2 26 02 FB | 	rdlong	local01, objptr
0a8c8     13 29 02 F6 | 	mov	local02, local01
0a8cc     01 28 66 F0 | 	shl	local02, #1
0a8d0     13 29 02 F1 | 	add	local02, local01
0a8d4     02 28 66 F0 | 	shl	local02, #2
0a8d8     03 00 00 FF 
0a8dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a8e0     F2 28 02 F1 | 	add	local02, objptr
0a8e4     08 4E 85 F1 | 	sub	fp, #8
0a8e8     A7 2A 02 FB | 	rdlong	local03, fp
0a8ec     04 4E 85 F1 | 	sub	fp, #4
0a8f0     04 28 06 F1 | 	add	local02, #4
0a8f4     14 2B 62 FC | 	wrlong	local03, local02
0a8f8     47 00 00 FF 
0a8fc     7C E4 85 F1 | 	sub	objptr, ##36476
0a900     A4 00 90 FD | 	jmp	#LR__0914
0a904                 | LR__0913
0a904     4A 00 00 FF 
0a908     7C E4 05 F1 | 	add	objptr, ##38012
0a90c     F2 26 02 FB | 	rdlong	local01, objptr
0a910     13 29 02 F6 | 	mov	local02, local01
0a914     01 28 66 F0 | 	shl	local02, #1
0a918     13 29 02 F1 | 	add	local02, local01
0a91c     02 28 66 F0 | 	shl	local02, #2
0a920     03 00 00 FF 
0a924     00 E4 85 F1 | 	sub	objptr, ##1536
0a928     F2 28 02 F1 | 	add	local02, objptr
0a92c     00 00 C0 FF 
0a930     14 01 68 FC | 	wrlong	##-2147483648, local02
0a934     03 00 00 FF 
0a938     00 E4 05 F1 | 	add	objptr, ##1536
0a93c     F2 26 02 FB | 	rdlong	local01, objptr
0a940     13 29 02 F6 | 	mov	local02, local01
0a944     01 28 66 F0 | 	shl	local02, #1
0a948     13 29 02 F1 | 	add	local02, local01
0a94c     02 28 66 F0 | 	shl	local02, #2
0a950     03 00 00 FF 
0a954     00 E4 85 F1 | 	sub	objptr, ##1536
0a958     F2 28 02 F1 | 	add	local02, objptr
0a95c     04 4E 05 F1 | 	add	fp, #4
0a960     A7 2A 02 FB | 	rdlong	local03, fp
0a964     04 4E 85 F1 | 	sub	fp, #4
0a968     04 28 06 F1 | 	add	local02, #4
0a96c     14 2B 62 FC | 	wrlong	local03, local02
0a970     03 00 00 FF 
0a974     00 E4 05 F1 | 	add	objptr, ##1536
0a978     F2 26 02 FB | 	rdlong	local01, objptr
0a97c     13 29 02 F6 | 	mov	local02, local01
0a980     01 28 66 F0 | 	shl	local02, #1
0a984     13 29 02 F1 | 	add	local02, local01
0a988     02 28 66 F0 | 	shl	local02, #2
0a98c     03 00 00 FF 
0a990     00 E4 85 F1 | 	sub	objptr, ##1536
0a994     F2 28 02 F1 | 	add	local02, objptr
0a998     08 28 06 F1 | 	add	local02, #8
0a99c     14 A7 68 FC | 	wrlong	#83, local02
0a9a0     47 00 00 FF 
0a9a4     7C E4 85 F1 | 	sub	objptr, ##36476
0a9a8                 | LR__0914
0a9a8     4A 00 00 FF 
0a9ac     7C E4 05 F1 | 	add	objptr, ##38012
0a9b0     F2 2A 02 FB | 	rdlong	local03, objptr
0a9b4     01 2A 06 F1 | 	add	local03, #1
0a9b8     F2 2A 62 FC | 	wrlong	local03, objptr
0a9bc     4A 00 00 FF 
0a9c0     7C E4 85 F1 | 	sub	objptr, ##38012
0a9c4     D0 00 90 FD | 	jmp	#LR__0916
0a9c8                 | LR__0915
0a9c8     98 0A B0 FD | 	call	#_expr
0a9cc     30 4E 05 F1 | 	add	fp, #48
0a9d0     A7 9E 68 FC | 	wrlong	#79, fp
0a9d4     08 4E 85 F1 | 	sub	fp, #8
0a9d8     A7 00 68 FC | 	wrlong	#0, fp
0a9dc     04 4E 05 F1 | 	add	fp, #4
0a9e0     A7 2A 02 FB | 	rdlong	local03, fp
0a9e4     04 4E 05 F1 | 	add	fp, #4
0a9e8     A7 26 02 FB | 	rdlong	local01, fp
0a9ec     30 4E 85 F1 | 	sub	fp, #48
0a9f0     4A 00 00 FF 
0a9f4     7C E4 05 F1 | 	add	objptr, ##38012
0a9f8     F2 28 02 FB | 	rdlong	local02, objptr
0a9fc     14 17 02 F6 | 	mov	arg03, local02
0aa00     01 16 66 F0 | 	shl	arg03, #1
0aa04     14 17 02 F1 | 	add	arg03, local02
0aa08     02 16 66 F0 | 	shl	arg03, #2
0aa0c     03 00 00 FF 
0aa10     00 E4 85 F1 | 	sub	objptr, ##1536
0aa14     F2 16 02 F1 | 	add	arg03, objptr
0aa18     0B 01 68 FC | 	wrlong	#0, arg03
0aa1c     03 00 00 FF 
0aa20     00 E4 05 F1 | 	add	objptr, ##1536
0aa24     F2 28 02 FB | 	rdlong	local02, objptr
0aa28     14 17 02 F6 | 	mov	arg03, local02
0aa2c     01 16 66 F0 | 	shl	arg03, #1
0aa30     14 17 02 F1 | 	add	arg03, local02
0aa34     02 16 66 F0 | 	shl	arg03, #2
0aa38     03 00 00 FF 
0aa3c     00 E4 85 F1 | 	sub	objptr, ##1536
0aa40     F2 16 02 F1 | 	add	arg03, objptr
0aa44     04 16 06 F1 | 	add	arg03, #4
0aa48     0B 2B 62 FC | 	wrlong	local03, arg03
0aa4c     03 00 00 FF 
0aa50     00 E4 05 F1 | 	add	objptr, ##1536
0aa54     F2 2A 02 FB | 	rdlong	local03, objptr
0aa58     15 29 02 F6 | 	mov	local02, local03
0aa5c     01 28 66 F0 | 	shl	local02, #1
0aa60     15 29 02 F1 | 	add	local02, local03
0aa64     02 28 66 F0 | 	shl	local02, #2
0aa68     03 00 00 FF 
0aa6c     00 E4 85 F1 | 	sub	objptr, ##1536
0aa70     F2 28 02 F1 | 	add	local02, objptr
0aa74     08 28 06 F1 | 	add	local02, #8
0aa78     14 27 62 FC | 	wrlong	local01, local02
0aa7c     03 00 00 FF 
0aa80     00 E4 05 F1 | 	add	objptr, ##1536
0aa84     F2 2A 02 FB | 	rdlong	local03, objptr
0aa88     01 2A 06 F1 | 	add	local03, #1
0aa8c     F2 2A 62 FC | 	wrlong	local03, objptr
0aa90     4A 00 00 FF 
0aa94     7C E4 85 F1 | 	sub	objptr, ##38012
0aa98                 | LR__0916
0aa98                 | ' return 0
0aa98     00 FA 05 F6 | 	mov	result1, #0
0aa9c     A7 F0 03 F6 | 	mov	ptra, fp
0aaa0     B2 00 A0 FD | 	call	#popregs_
0aaa4                 | _compile_goto_ret
0aaa4     2D 00 64 FD | 	ret
0aaa8                 | 
0aaa8                 | ' 
0aaa8                 | ' '----- compile 'on' (on..goto, on..gosub) 
0aaa8                 | ' 
0aaa8                 | ' function compile_on() as ulong
0aaa8                 | _compile_on
0aaa8     04 4A 05 F6 | 	mov	COUNT_, #4
0aaac     A8 00 A0 FD | 	call	#pushregs_
0aab0     B0 09 B0 FD | 	call	#_expr
0aab4     00 26 06 F6 | 	mov	local01, #0
0aab8     4A 00 00 FF 
0aabc     7C E4 05 F1 | 	add	objptr, ##38012
0aac0     F2 14 02 FB | 	rdlong	arg02, objptr
0aac4     0A 13 02 F6 | 	mov	arg01, arg02
0aac8     01 12 66 F0 | 	shl	arg01, #1
0aacc     0A 13 02 F1 | 	add	arg01, arg02
0aad0     02 12 66 F0 | 	shl	arg01, #2
0aad4     03 00 00 FF 
0aad8     00 E4 85 F1 | 	sub	objptr, ##1536
0aadc     F2 12 02 F1 | 	add	arg01, objptr
0aae0     08 12 06 F1 | 	add	arg01, #8
0aae4     09 83 69 FC | 	wrlong	#193, arg01
0aae8     03 00 00 FF 
0aaec     00 E4 05 F1 | 	add	objptr, ##1536
0aaf0     F2 14 02 FB | 	rdlong	arg02, objptr
0aaf4     0A 29 02 F6 | 	mov	local02, arg02
0aaf8     01 14 06 F1 | 	add	arg02, #1
0aafc     F2 14 62 FC | 	wrlong	arg02, objptr
0ab00                 | ' expr()
0ab00                 | ' 'print lparts(ct).part$ 'ok
0ab00                 | ' numpar=0
0ab00                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0ab00                 | ' if lparts(ct).part$="goto" then
0ab00     13 00 00 FF 
0ab04     38 E4 85 F1 | 	sub	objptr, ##9784
0ab08     F2 14 02 FB | 	rdlong	arg02, objptr
0ab0c     03 14 66 F0 | 	shl	arg02, #3
0ab10     02 00 00 FF 
0ab14     38 E4 85 F1 | 	sub	objptr, ##1080
0ab18     F2 14 02 F1 | 	add	arg02, objptr
0ab1c     0A 13 02 FB | 	rdlong	arg01, arg02
0ab20     AD 01 00 FF 
0ab24     B1 15 06 F6 | 	mov	arg02, ##@LR__5805
0ab28     35 00 00 FF 
0ab2c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab30     6C AE B1 FD | 	call	#__system___string_cmp
0ab34     00 FA 0D F2 | 	cmp	result1, #0 wz
0ab38     14 02 90 5D |  if_ne	jmp	#LR__0925
0ab3c     37 00 00 FF 
0ab40     44 E4 05 F1 | 	add	objptr, ##28228
0ab44     F2 2A 02 FB | 	rdlong	local03, objptr
0ab48     37 00 00 FF 
0ab4c     44 E4 85 F1 | 	sub	objptr, ##28228
0ab50     01 2A 06 F1 | 	add	local03, #1
0ab54                 | '   i=ct+1
0ab54                 | '   do
0ab54                 | LR__0920
0ab54                 | '     if lparts(i).token=token_decimal then
0ab54     15 FB 01 F6 | 	mov	result1, local03
0ab58     03 FA 65 F0 | 	shl	result1, #3
0ab5c     35 00 00 FF 
0ab60     0C E4 05 F1 | 	add	objptr, ##27148
0ab64     F2 FA 01 F1 | 	add	result1, objptr
0ab68     04 FA 05 F1 | 	add	result1, #4
0ab6c     FD FA 01 FB | 	rdlong	result1, result1
0ab70     01 00 00 FF 
0ab74     00 FA 0D F2 | 	cmp	result1, ##512 wz
0ab78     35 00 00 FF 
0ab7c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab80     DC 00 90 5D |  if_ne	jmp	#LR__0921
0ab84     4A 00 00 FF 
0ab88     7C E4 05 F1 | 	add	objptr, ##38012
0ab8c     F2 FA 01 FB | 	rdlong	result1, objptr
0ab90     FD 14 02 F6 | 	mov	arg02, result1
0ab94     01 14 66 F0 | 	shl	arg02, #1
0ab98     FD 14 02 F1 | 	add	arg02, result1
0ab9c     02 14 66 F0 | 	shl	arg02, #2
0aba0     03 00 00 FF 
0aba4     00 E4 85 F1 | 	sub	objptr, ##1536
0aba8     F2 14 02 F1 | 	add	arg02, objptr
0abac     00 00 C0 FF 
0abb0     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0abb4     03 00 00 FF 
0abb8     00 E4 05 F1 | 	add	objptr, ##1536
0abbc     F2 14 02 FB | 	rdlong	arg02, objptr
0abc0     0A 2D 02 F6 | 	mov	local04, arg02
0abc4     01 2C 66 F0 | 	shl	local04, #1
0abc8     0A 2D 02 F1 | 	add	local04, arg02
0abcc     02 2C 66 F0 | 	shl	local04, #2
0abd0     03 00 00 FF 
0abd4     00 E4 85 F1 | 	sub	objptr, ##1536
0abd8     F2 2C 02 F1 | 	add	local04, objptr
0abdc     15 15 02 F6 | 	mov	arg02, local03
0abe0     03 14 66 F0 | 	shl	arg02, #3
0abe4     12 00 00 FF 
0abe8     70 E4 85 F1 | 	sub	objptr, ##9328
0abec     F2 14 02 F1 | 	add	arg02, objptr
0abf0     0A 13 02 FB | 	rdlong	arg01, arg02
0abf4     00 14 06 F6 | 	mov	arg02, #0
0abf8     35 00 00 FF 
0abfc     0C E4 85 F1 | 	sub	objptr, ##27148
0ac00     64 E2 B1 FD | 	call	#__system____builtin_atoi
0ac04     04 2C 06 F1 | 	add	local04, #4
0ac08     16 FB 61 FC | 	wrlong	result1, local04
0ac0c     4A 00 00 FF 
0ac10     7C E4 05 F1 | 	add	objptr, ##38012
0ac14     F2 14 02 FB | 	rdlong	arg02, objptr
0ac18     0A 2D 02 F6 | 	mov	local04, arg02
0ac1c     01 2C 66 F0 | 	shl	local04, #1
0ac20     0A 2D 02 F1 | 	add	local04, arg02
0ac24     02 2C 66 F0 | 	shl	local04, #2
0ac28     03 00 00 FF 
0ac2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac30     F2 2C 02 F1 | 	add	local04, objptr
0ac34     08 2C 06 F1 | 	add	local04, #8
0ac38     16 A7 68 FC | 	wrlong	#83, local04
0ac3c     03 00 00 FF 
0ac40     00 E4 05 F1 | 	add	objptr, ##1536
0ac44     F2 2C 02 FB | 	rdlong	local04, objptr
0ac48     01 2C 06 F1 | 	add	local04, #1
0ac4c     F2 2C 62 FC | 	wrlong	local04, objptr
0ac50     4A 00 00 FF 
0ac54     7C E4 85 F1 | 	sub	objptr, ##38012
0ac58     01 26 06 F1 | 	add	local01, #1
0ac5c     08 00 90 FD | 	jmp	#LR__0922
0ac60                 | LR__0921
0ac60                 | '       return 17
0ac60     11 FA 05 F6 | 	mov	result1, #17
0ac64     5C 04 90 FD | 	jmp	#LR__0935
0ac68                 | LR__0922
0ac68     01 2A 06 F1 | 	add	local03, #1
0ac6c                 | '     i+=1
0ac6c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0ac6c     15 2D 02 F6 | 	mov	local04, local03
0ac70     03 2C 66 F0 | 	shl	local04, #3
0ac74     35 00 00 FF 
0ac78     0C E4 05 F1 | 	add	objptr, ##27148
0ac7c     F2 2C 02 F1 | 	add	local04, objptr
0ac80     04 2C 06 F1 | 	add	local04, #4
0ac84     16 2D 02 FB | 	rdlong	local04, local04
0ac88     11 2C 0E F2 | 	cmp	local04, #17 wz
0ac8c     35 00 00 FF 
0ac90     0C E4 85 F1 | 	sub	objptr, ##27148
0ac94     30 00 90 AD |  if_e	jmp	#LR__0923
0ac98     15 2D 02 F6 | 	mov	local04, local03
0ac9c     03 2C 66 F0 | 	shl	local04, #3
0aca0     35 00 00 FF 
0aca4     0C E4 05 F1 | 	add	objptr, ##27148
0aca8     F2 2C 02 F1 | 	add	local04, objptr
0acac     04 2C 06 F1 | 	add	local04, #4
0acb0     16 2D 02 FB | 	rdlong	local04, local04
0acb4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0acb8     35 00 00 FF 
0acbc     0C E4 85 F1 | 	sub	objptr, ##27148
0acc0     15 FA 05 56 |  if_ne	mov	result1, #21
0acc4     FC 03 90 5D |  if_ne	jmp	#LR__0935
0acc8                 | LR__0923
0acc8                 | '     if lparts(i).token=token_end then exit loop
0acc8     15 2D 02 F6 | 	mov	local04, local03
0accc     03 2C 66 F0 | 	shl	local04, #3
0acd0     35 00 00 FF 
0acd4     0C E4 05 F1 | 	add	objptr, ##27148
0acd8     F2 2C 02 F1 | 	add	local04, objptr
0acdc     04 2C 06 F1 | 	add	local04, #4
0ace0     16 2D 02 FB | 	rdlong	local04, local04
0ace4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ace8     35 00 00 FF 
0acec     0C E4 85 F1 | 	sub	objptr, ##27148
0acf0     30 00 90 AD |  if_e	jmp	#LR__0924
0acf4     01 2A 06 F1 | 	add	local03, #1
0acf8     15 2D 02 F6 | 	mov	local04, local03
0acfc     03 2C 66 F0 | 	shl	local04, #3
0ad00     35 00 00 FF 
0ad04     0C E4 05 F1 | 	add	objptr, ##27148
0ad08     F2 2C 02 F1 | 	add	local04, objptr
0ad0c     04 2C 06 F1 | 	add	local04, #4
0ad10     16 2D 02 FB | 	rdlong	local04, local04
0ad14     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ad18     35 00 00 FF 
0ad1c     0C E4 85 F1 | 	sub	objptr, ##27148
0ad20     30 FE 9F 5D |  if_ne	jmp	#LR__0920
0ad24                 | LR__0924
0ad24     14 2D 02 F6 | 	mov	local04, local02
0ad28     01 2C 66 F0 | 	shl	local04, #1
0ad2c     14 2D 02 F1 | 	add	local04, local02
0ad30     02 2C 66 F0 | 	shl	local04, #2
0ad34     47 00 00 FF 
0ad38     7C E4 05 F1 | 	add	objptr, ##36476
0ad3c     F2 2C 02 F1 | 	add	local04, objptr
0ad40     04 2C 06 F1 | 	add	local04, #4
0ad44     16 03 68 FC | 	wrlong	#1, local04
0ad48     47 00 00 FF 
0ad4c     7C E4 85 F1 | 	sub	objptr, ##36476
0ad50                 | LR__0925
0ad50                 | ' 
0ad50                 | ' if lparts(ct).part$="gosub" then
0ad50     37 00 00 FF 
0ad54     44 E4 05 F1 | 	add	objptr, ##28228
0ad58     F2 2A 02 FB | 	rdlong	local03, objptr
0ad5c     03 2A 66 F0 | 	shl	local03, #3
0ad60     02 00 00 FF 
0ad64     38 E4 85 F1 | 	sub	objptr, ##1080
0ad68     F2 2A 02 F1 | 	add	local03, objptr
0ad6c     15 13 02 FB | 	rdlong	arg01, local03
0ad70     AD 01 00 FF 
0ad74     B6 15 06 F6 | 	mov	arg02, ##@LR__5806
0ad78     35 00 00 FF 
0ad7c     0C E4 85 F1 | 	sub	objptr, ##27148
0ad80     1C AC B1 FD | 	call	#__system___string_cmp
0ad84     00 FA 0D F2 | 	cmp	result1, #0 wz
0ad88     84 02 90 5D |  if_ne	jmp	#LR__0931
0ad8c     37 00 00 FF 
0ad90     44 E4 05 F1 | 	add	objptr, ##28228
0ad94     F2 2A 02 FB | 	rdlong	local03, objptr
0ad98     37 00 00 FF 
0ad9c     44 E4 85 F1 | 	sub	objptr, ##28228
0ada0     01 2A 06 F1 | 	add	local03, #1
0ada4                 | '   i=ct+1
0ada4                 | '   do
0ada4                 | LR__0926
0ada4                 | '     if lparts(i).token=token_decimal then
0ada4     15 2D 02 F6 | 	mov	local04, local03
0ada8     03 2C 66 F0 | 	shl	local04, #3
0adac     35 00 00 FF 
0adb0     0C E4 05 F1 | 	add	objptr, ##27148
0adb4     F2 2C 02 F1 | 	add	local04, objptr
0adb8     04 2C 06 F1 | 	add	local04, #4
0adbc     16 2D 02 FB | 	rdlong	local04, local04
0adc0     01 00 00 FF 
0adc4     00 2C 0E F2 | 	cmp	local04, ##512 wz
0adc8     35 00 00 FF 
0adcc     0C E4 85 F1 | 	sub	objptr, ##27148
0add0     4C 01 90 5D |  if_ne	jmp	#LR__0927
0add4     4A 00 00 FF 
0add8     7C E4 05 F1 | 	add	objptr, ##38012
0addc     F2 FA 01 FB | 	rdlong	result1, objptr
0ade0     FD 2C 02 F6 | 	mov	local04, result1
0ade4     01 2C 66 F0 | 	shl	local04, #1
0ade8     FD 2C 02 F1 | 	add	local04, result1
0adec     02 2C 66 F0 | 	shl	local04, #2
0adf0     03 00 00 FF 
0adf4     00 E4 85 F1 | 	sub	objptr, ##1536
0adf8     F2 2C 02 F1 | 	add	local04, objptr
0adfc     08 2C 06 F1 | 	add	local04, #8
0ae00     16 53 69 FC | 	wrlong	#169, local04
0ae04     03 00 00 FF 
0ae08     00 E4 05 F1 | 	add	objptr, ##1536
0ae0c     F2 FA 01 FB | 	rdlong	result1, objptr
0ae10     01 FA 05 F1 | 	add	result1, #1
0ae14     F2 FA 61 FC | 	wrlong	result1, objptr
0ae18     FD 2C 02 F6 | 	mov	local04, result1
0ae1c     01 2C 66 F0 | 	shl	local04, #1
0ae20     FD 2C 02 F1 | 	add	local04, result1
0ae24     02 2C 66 F0 | 	shl	local04, #2
0ae28     03 00 00 FF 
0ae2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ae30     F2 2C 02 F1 | 	add	local04, objptr
0ae34     00 00 C0 FF 
0ae38     16 01 68 FC | 	wrlong	##-2147483648, local04
0ae3c     03 00 00 FF 
0ae40     00 E4 05 F1 | 	add	objptr, ##1536
0ae44     F2 FA 01 FB | 	rdlong	result1, objptr
0ae48     FD 2C 02 F6 | 	mov	local04, result1
0ae4c     01 2C 66 F0 | 	shl	local04, #1
0ae50     FD 2C 02 F1 | 	add	local04, result1
0ae54     02 2C 66 F0 | 	shl	local04, #2
0ae58     03 00 00 FF 
0ae5c     00 E4 85 F1 | 	sub	objptr, ##1536
0ae60     F2 2C 02 F1 | 	add	local04, objptr
0ae64     15 13 02 F6 | 	mov	arg01, local03
0ae68     03 12 66 F0 | 	shl	arg01, #3
0ae6c     12 00 00 FF 
0ae70     70 E4 85 F1 | 	sub	objptr, ##9328
0ae74     F2 12 02 F1 | 	add	arg01, objptr
0ae78     09 13 02 FB | 	rdlong	arg01, arg01
0ae7c     00 14 06 F6 | 	mov	arg02, #0
0ae80     35 00 00 FF 
0ae84     0C E4 85 F1 | 	sub	objptr, ##27148
0ae88     DC DF B1 FD | 	call	#__system____builtin_atoi
0ae8c     04 2C 06 F1 | 	add	local04, #4
0ae90     16 FB 61 FC | 	wrlong	result1, local04
0ae94     4A 00 00 FF 
0ae98     7C E4 05 F1 | 	add	objptr, ##38012
0ae9c     F2 12 02 FB | 	rdlong	arg01, objptr
0aea0     09 2D 02 F6 | 	mov	local04, arg01
0aea4     01 2C 66 F0 | 	shl	local04, #1
0aea8     09 2D 02 F1 | 	add	local04, arg01
0aeac     02 2C 66 F0 | 	shl	local04, #2
0aeb0     03 00 00 FF 
0aeb4     00 E4 85 F1 | 	sub	objptr, ##1536
0aeb8     F2 2C 02 F1 | 	add	local04, objptr
0aebc     08 2C 06 F1 | 	add	local04, #8
0aec0     16 A7 68 FC | 	wrlong	#83, local04
0aec4     03 00 00 FF 
0aec8     00 E4 05 F1 | 	add	objptr, ##1536
0aecc     F2 12 02 FB | 	rdlong	arg01, objptr
0aed0     01 12 06 F1 | 	add	arg01, #1
0aed4     F2 12 62 FC | 	wrlong	arg01, objptr
0aed8     01 26 06 F1 | 	add	local01, #1
0aedc     09 2D 02 F6 | 	mov	local04, arg01
0aee0     01 2C 66 F0 | 	shl	local04, #1
0aee4     09 2D 02 F1 | 	add	local04, arg01
0aee8     02 2C 66 F0 | 	shl	local04, #2
0aeec     03 00 00 FF 
0aef0     00 E4 85 F1 | 	sub	objptr, ##1536
0aef4     F2 2C 02 F1 | 	add	local04, objptr
0aef8     08 2C 06 F1 | 	add	local04, #8
0aefc     16 5B 68 FC | 	wrlong	#45, local04
0af00     03 00 00 FF 
0af04     00 E4 05 F1 | 	add	objptr, ##1536
0af08     F2 2C 02 FB | 	rdlong	local04, objptr
0af0c     01 2C 06 F1 | 	add	local04, #1
0af10     F2 2C 62 FC | 	wrlong	local04, objptr
0af14     4A 00 00 FF 
0af18     7C E4 85 F1 | 	sub	objptr, ##38012
0af1c     08 00 90 FD | 	jmp	#LR__0928
0af20                 | LR__0927
0af20                 | '       return 17
0af20     11 FA 05 F6 | 	mov	result1, #17
0af24     9C 01 90 FD | 	jmp	#LR__0935
0af28                 | LR__0928
0af28     01 2A 06 F1 | 	add	local03, #1
0af2c                 | '     i+=1
0af2c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0af2c     15 2D 02 F6 | 	mov	local04, local03
0af30     03 2C 66 F0 | 	shl	local04, #3
0af34     35 00 00 FF 
0af38     0C E4 05 F1 | 	add	objptr, ##27148
0af3c     F2 2C 02 F1 | 	add	local04, objptr
0af40     04 2C 06 F1 | 	add	local04, #4
0af44     16 2D 02 FB | 	rdlong	local04, local04
0af48     11 2C 0E F2 | 	cmp	local04, #17 wz
0af4c     35 00 00 FF 
0af50     0C E4 85 F1 | 	sub	objptr, ##27148
0af54     30 00 90 AD |  if_e	jmp	#LR__0929
0af58     15 2D 02 F6 | 	mov	local04, local03
0af5c     03 2C 66 F0 | 	shl	local04, #3
0af60     35 00 00 FF 
0af64     0C E4 05 F1 | 	add	objptr, ##27148
0af68     F2 2C 02 F1 | 	add	local04, objptr
0af6c     04 2C 06 F1 | 	add	local04, #4
0af70     16 2D 02 FB | 	rdlong	local04, local04
0af74     FE 2D 0E F2 | 	cmp	local04, #510 wz
0af78     35 00 00 FF 
0af7c     0C E4 85 F1 | 	sub	objptr, ##27148
0af80     15 FA 05 56 |  if_ne	mov	result1, #21
0af84     3C 01 90 5D |  if_ne	jmp	#LR__0935
0af88                 | LR__0929
0af88                 | '     if lparts(i).token=token_end then exit loop
0af88     15 2D 02 F6 | 	mov	local04, local03
0af8c     03 2C 66 F0 | 	shl	local04, #3
0af90     35 00 00 FF 
0af94     0C E4 05 F1 | 	add	objptr, ##27148
0af98     F2 2C 02 F1 | 	add	local04, objptr
0af9c     04 2C 06 F1 | 	add	local04, #4
0afa0     16 2D 02 FB | 	rdlong	local04, local04
0afa4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0afa8     35 00 00 FF 
0afac     0C E4 85 F1 | 	sub	objptr, ##27148
0afb0     30 00 90 AD |  if_e	jmp	#LR__0930
0afb4     01 2A 06 F1 | 	add	local03, #1
0afb8     15 2D 02 F6 | 	mov	local04, local03
0afbc     03 2C 66 F0 | 	shl	local04, #3
0afc0     35 00 00 FF 
0afc4     0C E4 05 F1 | 	add	objptr, ##27148
0afc8     F2 2C 02 F1 | 	add	local04, objptr
0afcc     04 2C 06 F1 | 	add	local04, #4
0afd0     16 2D 02 FB | 	rdlong	local04, local04
0afd4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0afd8     35 00 00 FF 
0afdc     0C E4 85 F1 | 	sub	objptr, ##27148
0afe0     C0 FD 9F 5D |  if_ne	jmp	#LR__0926
0afe4                 | LR__0930
0afe4     14 2D 02 F6 | 	mov	local04, local02
0afe8     01 2C 66 F0 | 	shl	local04, #1
0afec     14 2D 02 F1 | 	add	local04, local02
0aff0     02 2C 66 F0 | 	shl	local04, #2
0aff4     47 00 00 FF 
0aff8     7C E4 05 F1 | 	add	objptr, ##36476
0affc     F2 2C 02 F1 | 	add	local04, objptr
0b000     04 2C 06 F1 | 	add	local04, #4
0b004     16 07 68 FC | 	wrlong	#3, local04
0b008     47 00 00 FF 
0b00c     7C E4 85 F1 | 	sub	objptr, ##36476
0b010                 | LR__0931
0b010     14 2B 02 F6 | 	mov	local03, local02
0b014     01 2A 66 F0 | 	shl	local03, #1
0b018     14 2B 02 F1 | 	add	local03, local02
0b01c     02 2A 66 F0 | 	shl	local03, #2
0b020     47 00 00 FF 
0b024     7C E4 05 F1 | 	add	objptr, ##36476
0b028     F2 2A 02 F1 | 	add	local03, objptr
0b02c     15 27 62 FC | 	wrlong	local01, local03
0b030                 | ' compiledline(onlineptr).result.uresult=numpar
0b030                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0b030     03 00 00 FF 
0b034     00 E4 05 F1 | 	add	objptr, ##1536
0b038     F2 2A 02 FB | 	rdlong	local03, objptr
0b03c     4A 00 00 FF 
0b040     7C E4 85 F1 | 	sub	objptr, ##38012
0b044     97 3C 48 FB | 	callpa	#(@LR__0934-@LR__0932)>>2,fcache_load_ptr_
0b048                 | LR__0932
0b048     15 2D 02 F6 | 	mov	local04, local03
0b04c     01 2C 66 F0 | 	shl	local04, #1
0b050     15 2D 02 F1 | 	add	local04, local03
0b054     02 2C 66 F0 | 	shl	local04, #2
0b058     47 00 00 FF 
0b05c     7C E4 05 F1 | 	add	objptr, ##36476
0b060     F2 2C 02 F1 | 	add	local04, objptr
0b064     08 2C 06 F1 | 	add	local04, #8
0b068     16 2D 02 FB | 	rdlong	local04, local04
0b06c     2D 2C 0E F2 | 	cmp	local04, #45 wz
0b070     47 00 00 FF 
0b074     7C E4 85 F1 | 	sub	objptr, ##36476
0b078     38 00 90 5D |  if_ne	jmp	#LR__0933
0b07c     15 2D 02 F6 | 	mov	local04, local03
0b080     01 2C 66 F0 | 	shl	local04, #1
0b084     15 2D 02 F1 | 	add	local04, local03
0b088     02 2C 66 F0 | 	shl	local04, #2
0b08c     47 00 00 FF 
0b090     7C E4 05 F1 | 	add	objptr, ##36476
0b094     F2 2C 02 F1 | 	add	local04, objptr
0b098     03 00 00 FF 
0b09c     00 E4 05 F1 | 	add	objptr, ##1536
0b0a0     F2 26 02 FB | 	rdlong	local01, objptr
0b0a4     4A 00 00 FF 
0b0a8     7C E4 85 F1 | 	sub	objptr, ##38012
0b0ac     02 26 86 F1 | 	sub	local01, #2
0b0b0     16 27 62 FC | 	wrlong	local01, local04
0b0b4                 | LR__0933
0b0b4     01 2A 86 F1 | 	sub	local03, #1
0b0b8     14 2B 52 F2 | 	cmps	local03, local02 wc
0b0bc     88 FF 9F 3D |  if_ae	jmp	#LR__0932
0b0c0                 | LR__0934
0b0c0                 | ' return 0
0b0c0     00 FA 05 F6 | 	mov	result1, #0
0b0c4                 | LR__0935
0b0c4     A7 F0 03 F6 | 	mov	ptra, fp
0b0c8     B2 00 A0 FD | 	call	#popregs_
0b0cc                 | _compile_on_ret
0b0cc     2D 00 64 FD | 	ret
0b0d0                 | 
0b0d0                 | ' 
0b0d0                 | ' '----- A helper for compile_input and compile_read
0b0d0                 | '  
0b0d0                 | ' function getaddr() as ulong
0b0d0                 | _getaddr
0b0d0     0B 4A 05 F6 | 	mov	COUNT_, #11
0b0d4     A8 00 A0 FD | 	call	#pushregs_
0b0d8     37 00 00 FF 
0b0dc     44 E4 05 F1 | 	add	objptr, ##28228
0b0e0     F2 2C 02 FB | 	rdlong	local04, objptr
0b0e4     03 2C 66 F0 | 	shl	local04, #3
0b0e8     02 00 00 FF 
0b0ec     38 E4 85 F1 | 	sub	objptr, ##1080
0b0f0     F2 2C 02 F1 | 	add	local04, objptr
0b0f4     16 2F 02 FB | 	rdlong	local05, local04
0b0f8     01 30 66 F6 | 	neg	local06, #1
0b0fc                 | ' 
0b0fc                 | ' varname$=lparts(ct).part$
0b0fc                 | ' j=-1
0b0fc                 | ' 
0b0fc                 | ' for i=0 to varnum-1
0b0fc     00 32 06 F6 | 	mov	local07, #0
0b100     04 E4 85 F1 | 	sub	objptr, #4
0b104     F2 34 02 FB | 	rdlong	local08, objptr
0b108     35 00 00 FF 
0b10c     08 E4 85 F1 | 	sub	objptr, ##27144
0b110                 | LR__0940
0b110     1A 33 52 F2 | 	cmps	local07, local08 wc
0b114     38 00 90 3D |  if_ae	jmp	#LR__0941
0b118                 | '   if variables(i).name=varname$ then j=i : exit
0b118     19 2D 02 F6 | 	mov	local04, local07
0b11c     04 2C 66 F0 | 	shl	local04, #4
0b120     14 00 00 FF 
0b124     F8 E5 05 F1 | 	add	objptr, ##10744
0b128     F2 2C 02 F1 | 	add	local04, objptr
0b12c     16 13 02 FB | 	rdlong	arg01, local04
0b130     17 15 02 F6 | 	mov	arg02, local05
0b134     14 00 00 FF 
0b138     F8 E5 85 F1 | 	sub	objptr, ##10744
0b13c     60 A8 B1 FD | 	call	#__system___string_cmp
0b140     00 FA 0D F2 | 	cmp	result1, #0 wz
0b144     19 31 02 A6 |  if_e	mov	local06, local07
0b148     01 32 06 51 |  if_ne	add	local07, #1
0b14c     C0 FF 9F 5D |  if_ne	jmp	#LR__0940
0b150                 | LR__0941
0b150                 | ' if  j=-1 andalso varnum<maxvars then   
0b150     FF FF 7F FF 
0b154     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0b158     A8 00 90 5D |  if_ne	jmp	#LR__0942
0b15c     35 00 00 FF 
0b160     08 E4 05 F1 | 	add	objptr, ##27144
0b164     F2 34 02 FB | 	rdlong	local08, objptr
0b168     35 00 00 FF 
0b16c     08 E4 85 F1 | 	sub	objptr, ##27144
0b170     02 00 00 FF 
0b174     00 34 56 F2 | 	cmps	local08, ##1024 wc
0b178     88 00 90 3D |  if_ae	jmp	#LR__0942
0b17c     35 00 00 FF 
0b180     08 E4 05 F1 | 	add	objptr, ##27144
0b184     F2 2C 02 FB | 	rdlong	local04, objptr
0b188     04 2C 66 F0 | 	shl	local04, #4
0b18c     20 00 00 FF 
0b190     10 E4 85 F1 | 	sub	objptr, ##16400
0b194     F2 2C 02 F1 | 	add	local04, objptr
0b198     16 2F 62 FC | 	wrlong	local05, local04
0b19c     20 00 00 FF 
0b1a0     10 E4 05 F1 | 	add	objptr, ##16400
0b1a4     F2 2C 02 FB | 	rdlong	local04, objptr
0b1a8     04 2C 66 F0 | 	shl	local04, #4
0b1ac     20 00 00 FF 
0b1b0     10 E4 85 F1 | 	sub	objptr, ##16400
0b1b4     F2 2C 02 F1 | 	add	local04, objptr
0b1b8     04 2C 06 F1 | 	add	local04, #4
0b1bc     16 01 68 FC | 	wrlong	#0, local04
0b1c0     20 00 00 FF 
0b1c4     10 E4 05 F1 | 	add	objptr, ##16400
0b1c8     F2 2C 02 FB | 	rdlong	local04, objptr
0b1cc     04 2C 66 F0 | 	shl	local04, #4
0b1d0     20 00 00 FF 
0b1d4     10 E4 85 F1 | 	sub	objptr, ##16400
0b1d8     F2 2C 02 F1 | 	add	local04, objptr
0b1dc     0C 2C 06 F1 | 	add	local04, #12
0b1e0     16 39 68 FC | 	wrlong	#28, local04
0b1e4     20 00 00 FF 
0b1e8     10 E4 05 F1 | 	add	objptr, ##16400
0b1ec     F2 34 02 FB | 	rdlong	local08, objptr
0b1f0     1A 31 02 F6 | 	mov	local06, local08
0b1f4     01 34 06 F1 | 	add	local08, #1
0b1f8     F2 34 62 FC | 	wrlong	local08, objptr
0b1fc     35 00 00 FF 
0b200     08 E4 85 F1 | 	sub	objptr, ##27144
0b204                 | LR__0942
0b204     00 34 06 F6 | 	mov	local08, #0
0b208                 | ' numpar=0
0b208                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b208     37 00 00 FF 
0b20c     44 E4 05 F1 | 	add	objptr, ##28228
0b210     F2 2C 02 FB | 	rdlong	local04, objptr
0b214     01 2C 06 F1 | 	add	local04, #1
0b218     03 2C 66 F0 | 	shl	local04, #3
0b21c     02 00 00 FF 
0b220     38 E4 85 F1 | 	sub	objptr, ##1080
0b224     F2 2C 02 F1 | 	add	local04, objptr
0b228     04 2C 06 F1 | 	add	local04, #4
0b22c     16 33 02 FB | 	rdlong	local07, local04
0b230     15 32 0E F2 | 	cmp	local07, #21 wz
0b234     35 00 00 FF 
0b238     0C E4 85 F1 | 	sub	objptr, ##27148
0b23c     54 01 90 5D |  if_ne	jmp	#LR__0947
0b240     37 00 00 FF 
0b244     44 E4 05 F1 | 	add	objptr, ##28228
0b248     F2 36 02 FB | 	rdlong	local09, objptr
0b24c     01 36 06 F1 | 	add	local09, #1
0b250     F2 36 62 FC | 	wrlong	local09, objptr
0b254     37 00 00 FF 
0b258     44 E4 85 F1 | 	sub	objptr, ##28228
0b25c                 | '   ct+=1 											' omit this lpar, this is for expr list
0b25c                 | '   do
0b25c                 | LR__0943
0b25c     37 00 00 FF 
0b260     44 E4 05 F1 | 	add	objptr, ##28228
0b264     F2 2C 02 FB | 	rdlong	local04, objptr
0b268     01 2C 06 F1 | 	add	local04, #1
0b26c     F2 2C 62 FC | 	wrlong	local04, objptr
0b270                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b270                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b270     03 2C 66 F0 | 	shl	local04, #3
0b274     02 00 00 FF 
0b278     38 E4 85 F1 | 	sub	objptr, ##1080
0b27c     F2 2C 02 F1 | 	add	local04, objptr
0b280     04 2C 06 F1 | 	add	local04, #4
0b284     16 37 02 FB | 	rdlong	local09, local04
0b288     15 36 0E F2 | 	cmp	local09, #21 wz
0b28c     35 00 00 FF 
0b290     0C E4 85 F1 | 	sub	objptr, ##27148
0b294     44 00 90 5D |  if_ne	jmp	#LR__0944
0b298     37 00 00 FF 
0b29c     44 E4 05 F1 | 	add	objptr, ##28228
0b2a0     F2 36 02 FB | 	rdlong	local09, objptr
0b2a4     01 36 06 F1 | 	add	local09, #1
0b2a8     F2 36 62 FC | 	wrlong	local09, objptr
0b2ac     37 00 00 FF 
0b2b0     44 E4 85 F1 | 	sub	objptr, ##28228
0b2b4     AC 01 B0 FD | 	call	#_expr
0b2b8     FD 38 02 F6 | 	mov	local10, result1
0b2bc     37 00 00 FF 
0b2c0     44 E4 05 F1 | 	add	objptr, ##28228
0b2c4     F2 36 02 FB | 	rdlong	local09, objptr
0b2c8     01 36 06 F1 | 	add	local09, #1
0b2cc     F2 36 62 FC | 	wrlong	local09, objptr
0b2d0     37 00 00 FF 
0b2d4     44 E4 85 F1 | 	sub	objptr, ##28228
0b2d8     08 00 90 FD | 	jmp	#LR__0945
0b2dc                 | LR__0944
0b2dc     84 01 B0 FD | 	call	#_expr
0b2e0     FD 38 02 F6 | 	mov	local10, result1
0b2e4                 | LR__0945
0b2e4                 | '     if err>0 then return err
0b2e4     01 38 56 F2 | 	cmps	local10, #1 wc
0b2e8     1C FB 01 36 |  if_ae	mov	result1, local10
0b2ec     68 01 90 3D |  if_ae	jmp	#LR__0948
0b2f0     01 34 06 F1 | 	add	local08, #1
0b2f4     37 00 00 FF 
0b2f8     44 E4 05 F1 | 	add	objptr, ##28228
0b2fc     F2 2C 02 FB | 	rdlong	local04, objptr
0b300     03 2C 66 F0 | 	shl	local04, #3
0b304     02 00 00 FF 
0b308     38 E4 85 F1 | 	sub	objptr, ##1080
0b30c     F2 2C 02 F1 | 	add	local04, objptr
0b310     04 2C 06 F1 | 	add	local04, #4
0b314     16 39 02 FB | 	rdlong	local10, local04
0b318     14 38 0E F2 | 	cmp	local10, #20 wz
0b31c     35 00 00 FF 
0b320     0C E4 85 F1 | 	sub	objptr, ##27148
0b324     34 00 90 AD |  if_e	jmp	#LR__0946
0b328     37 00 00 FF 
0b32c     44 E4 05 F1 | 	add	objptr, ##28228
0b330     F2 38 02 FB | 	rdlong	local10, objptr
0b334     03 38 66 F0 | 	shl	local10, #3
0b338     02 00 00 FF 
0b33c     38 E4 85 F1 | 	sub	objptr, ##1080
0b340     F2 38 02 F1 | 	add	local10, objptr
0b344     04 38 06 F1 | 	add	local10, #4
0b348     1C 39 02 FB | 	rdlong	local10, local10
0b34c     FE 39 0E F2 | 	cmp	local10, #510 wz
0b350     35 00 00 FF 
0b354     0C E4 85 F1 | 	sub	objptr, ##27148
0b358     00 FF 9F 5D |  if_ne	jmp	#LR__0943
0b35c                 | LR__0946
0b35c                 | '     if lparts(ct).token=token_end then return 14
0b35c     37 00 00 FF 
0b360     44 E4 05 F1 | 	add	objptr, ##28228
0b364     F2 2C 02 FB | 	rdlong	local04, objptr
0b368     03 2C 66 F0 | 	shl	local04, #3
0b36c     02 00 00 FF 
0b370     38 E4 85 F1 | 	sub	objptr, ##1080
0b374     F2 2C 02 F1 | 	add	local04, objptr
0b378     04 2C 06 F1 | 	add	local04, #4
0b37c     16 39 02 FB | 	rdlong	local10, local04
0b380     FE 39 0E F2 | 	cmp	local10, #510 wz
0b384     35 00 00 FF 
0b388     0C E4 85 F1 | 	sub	objptr, ##27148
0b38c     0E FA 05 A6 |  if_e	mov	result1, #14
0b390     C4 00 90 AD |  if_e	jmp	#LR__0948
0b394                 | LR__0947
0b394     1A 29 02 F6 | 	mov	local02, local08
0b398     12 2A 06 F6 | 	mov	local03, #18
0b39c     18 27 02 F6 | 	mov	local01, local06
0b3a0     13 37 02 F6 | 	mov	local09, local01
0b3a4     14 3B 02 F6 | 	mov	local11, local02
0b3a8     15 27 02 F6 | 	mov	local01, local03
0b3ac     4A 00 00 FF 
0b3b0     7C E4 05 F1 | 	add	objptr, ##38012
0b3b4     F2 38 02 FB | 	rdlong	local10, objptr
0b3b8     1C 35 02 F6 | 	mov	local08, local10
0b3bc     01 34 66 F0 | 	shl	local08, #1
0b3c0     1C 35 02 F1 | 	add	local08, local10
0b3c4     02 34 66 F0 | 	shl	local08, #2
0b3c8     03 00 00 FF 
0b3cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b3d0     F2 34 02 F1 | 	add	local08, objptr
0b3d4     1A 37 62 FC | 	wrlong	local09, local08
0b3d8     03 00 00 FF 
0b3dc     00 E4 05 F1 | 	add	objptr, ##1536
0b3e0     F2 38 02 FB | 	rdlong	local10, objptr
0b3e4     1C 37 02 F6 | 	mov	local09, local10
0b3e8     01 36 66 F0 | 	shl	local09, #1
0b3ec     1C 37 02 F1 | 	add	local09, local10
0b3f0     02 36 66 F0 | 	shl	local09, #2
0b3f4     03 00 00 FF 
0b3f8     00 E4 85 F1 | 	sub	objptr, ##1536
0b3fc     F2 36 02 F1 | 	add	local09, objptr
0b400     04 36 06 F1 | 	add	local09, #4
0b404     1B 3B 62 FC | 	wrlong	local11, local09
0b408     03 00 00 FF 
0b40c     00 E4 05 F1 | 	add	objptr, ##1536
0b410     F2 3A 02 FB | 	rdlong	local11, objptr
0b414     1D 39 02 F6 | 	mov	local10, local11
0b418     01 38 66 F0 | 	shl	local10, #1
0b41c     1D 39 02 F1 | 	add	local10, local11
0b420     02 38 66 F0 | 	shl	local10, #2
0b424     03 00 00 FF 
0b428     00 E4 85 F1 | 	sub	objptr, ##1536
0b42c     F2 38 02 F1 | 	add	local10, objptr
0b430     08 38 06 F1 | 	add	local10, #8
0b434     1C 27 62 FC | 	wrlong	local01, local10
0b438     03 00 00 FF 
0b43c     00 E4 05 F1 | 	add	objptr, ##1536
0b440     F2 36 02 FB | 	rdlong	local09, objptr
0b444     01 36 06 F1 | 	add	local09, #1
0b448     F2 36 62 FC | 	wrlong	local09, objptr
0b44c     4A 00 00 FF 
0b450     7C E4 85 F1 | 	sub	objptr, ##38012
0b454                 | ' t2.result.twowords(1)=numpar
0b454                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0b454                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b454                 | ' return 0
0b454     00 FA 05 F6 | 	mov	result1, #0
0b458                 | LR__0948
0b458     A7 F0 03 F6 | 	mov	ptra, fp
0b45c     B2 00 A0 FD | 	call	#popregs_
0b460                 | _getaddr_ret
0b460     2D 00 64 FD | 	ret
0b464                 | 
0b464                 | ' 
0b464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b464                 | ' '--------------------------------------------- 
0b464                 | ' 
0b464                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b464                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0b464                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b464                 | ' 
0b464                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b464                 | ' '
0b464                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0b464                 | ' '
0b464                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b464                 | ' 
0b464                 | ' function expr() as ulong 
0b464                 | _expr
0b464     07 4A 05 F6 | 	mov	COUNT_, #7
0b468     A8 00 A0 FD | 	call	#pushregs_
0b46c                 | _expr_enter
0b46c     37 00 00 FF 
0b470     44 E4 05 F1 | 	add	objptr, ##28228
0b474     F2 2C 02 FB | 	rdlong	local04, objptr
0b478     03 2C 66 F0 | 	shl	local04, #3
0b47c     02 00 00 FF 
0b480     38 E4 85 F1 | 	sub	objptr, ##1080
0b484     F2 2C 02 F1 | 	add	local04, objptr
0b488     04 2C 06 F1 | 	add	local04, #4
0b48c     16 2F 02 FB | 	rdlong	local05, local04
0b490                 | ' 
0b490                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0b490     FE 2F 0E F2 | 	cmp	local05, #510 wz
0b494     35 00 00 FF 
0b498     0C E4 85 F1 | 	sub	objptr, ##27148
0b49c     C4 00 90 5D |  if_ne	jmp	#LR__0950
0b4a0     1D 26 06 F6 | 	mov	local01, #29
0b4a4     FF 2A 06 F6 | 	mov	local03, #255
0b4a8     13 31 02 F6 | 	mov	local06, local01
0b4ac     14 33 02 F6 | 	mov	local07, local02
0b4b0     15 27 02 F6 | 	mov	local01, local03
0b4b4     4A 00 00 FF 
0b4b8     7C E4 05 F1 | 	add	objptr, ##38012
0b4bc     F2 2E 02 FB | 	rdlong	local05, objptr
0b4c0     17 2D 02 F6 | 	mov	local04, local05
0b4c4     01 2C 66 F0 | 	shl	local04, #1
0b4c8     17 2D 02 F1 | 	add	local04, local05
0b4cc     02 2C 66 F0 | 	shl	local04, #2
0b4d0     03 00 00 FF 
0b4d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4d8     F2 2C 02 F1 | 	add	local04, objptr
0b4dc     16 31 62 FC | 	wrlong	local06, local04
0b4e0     03 00 00 FF 
0b4e4     00 E4 05 F1 | 	add	objptr, ##1536
0b4e8     F2 30 02 FB | 	rdlong	local06, objptr
0b4ec     18 2F 02 F6 | 	mov	local05, local06
0b4f0     01 2E 66 F0 | 	shl	local05, #1
0b4f4     18 2F 02 F1 | 	add	local05, local06
0b4f8     02 2E 66 F0 | 	shl	local05, #2
0b4fc     03 00 00 FF 
0b500     00 E4 85 F1 | 	sub	objptr, ##1536
0b504     F2 2E 02 F1 | 	add	local05, objptr
0b508     04 2E 06 F1 | 	add	local05, #4
0b50c     17 33 62 FC | 	wrlong	local07, local05
0b510     03 00 00 FF 
0b514     00 E4 05 F1 | 	add	objptr, ##1536
0b518     F2 32 02 FB | 	rdlong	local07, objptr
0b51c     19 31 02 F6 | 	mov	local06, local07
0b520     01 30 66 F0 | 	shl	local06, #1
0b524     19 31 02 F1 | 	add	local06, local07
0b528     02 30 66 F0 | 	shl	local06, #2
0b52c     03 00 00 FF 
0b530     00 E4 85 F1 | 	sub	objptr, ##1536
0b534     F2 30 02 F1 | 	add	local06, objptr
0b538     08 30 06 F1 | 	add	local06, #8
0b53c     18 27 62 FC | 	wrlong	local01, local06
0b540     03 00 00 FF 
0b544     00 E4 05 F1 | 	add	objptr, ##1536
0b548     F2 30 02 FB | 	rdlong	local06, objptr
0b54c     01 30 06 F1 | 	add	local06, #1
0b550     F2 30 62 FC | 	wrlong	local06, objptr
0b554     4A 00 00 FF 
0b558     7C E4 85 F1 | 	sub	objptr, ##38012
0b55c     1D FA 05 F6 | 	mov	result1, #29
0b560     64 01 90 FD | 	jmp	#LR__0953
0b564                 | LR__0950
0b564     00 26 06 F6 | 	mov	local01, #0
0b568     68 01 B0 FD | 	call	#_addsub
0b56c                 | ' t3.result.uresult=0
0b56c                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0b56c                 | ' if err>0 then return err
0b56c     01 FA 15 F2 | 	cmp	result1, #1 wc
0b570     54 01 90 3D |  if_ae	jmp	#LR__0953
0b574     37 00 00 FF 
0b578     44 E4 05 F1 | 	add	objptr, ##28228
0b57c     F2 2C 02 FB | 	rdlong	local04, objptr
0b580     03 2C 66 F0 | 	shl	local04, #3
0b584     02 00 00 FF 
0b588     38 E4 85 F1 | 	sub	objptr, ##1080
0b58c     F2 2C 02 F1 | 	add	local04, objptr
0b590     04 2C 06 F1 | 	add	local04, #4
0b594     16 2F 02 FB | 	rdlong	local05, local04
0b598                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0b598                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0b598     35 00 00 FF 
0b59c     0C E4 85 F1 | 	sub	objptr, ##27148
0b5a0                 | LR__0951
0b5a0     1B 2E 0E F2 | 	cmp	local05, #27 wz
0b5a4     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0b5a8     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0b5ac     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0b5b0     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0b5b4     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0b5b8     08 01 90 5D |  if_ne	jmp	#LR__0952
0b5bc     37 00 00 FF 
0b5c0     44 E4 05 F1 | 	add	objptr, ##28228
0b5c4     F2 30 02 FB | 	rdlong	local06, objptr
0b5c8     01 30 06 F1 | 	add	local06, #1
0b5cc     F2 30 62 FC | 	wrlong	local06, objptr
0b5d0     37 00 00 FF 
0b5d4     44 E4 85 F1 | 	sub	objptr, ##28228
0b5d8     F8 00 B0 FD | 	call	#_addsub
0b5dc                 | '   ct+=1
0b5dc                 | '   err=addsub() : if err>0 then return err
0b5dc     01 FA 15 F2 | 	cmp	result1, #1 wc
0b5e0     E4 00 90 3D |  if_ae	jmp	#LR__0953
0b5e4     17 2B 02 F6 | 	mov	local03, local05
0b5e8     13 31 02 F6 | 	mov	local06, local01
0b5ec     14 33 02 F6 | 	mov	local07, local02
0b5f0     15 2F 02 F6 | 	mov	local05, local03
0b5f4     4A 00 00 FF 
0b5f8     7C E4 05 F1 | 	add	objptr, ##38012
0b5fc     F2 2C 02 FB | 	rdlong	local04, objptr
0b600     16 FB 01 F6 | 	mov	result1, local04
0b604     01 FA 65 F0 | 	shl	result1, #1
0b608     16 FB 01 F1 | 	add	result1, local04
0b60c     02 FA 65 F0 | 	shl	result1, #2
0b610     03 00 00 FF 
0b614     00 E4 85 F1 | 	sub	objptr, ##1536
0b618     F2 FA 01 F1 | 	add	result1, objptr
0b61c     FD 30 62 FC | 	wrlong	local06, result1
0b620     03 00 00 FF 
0b624     00 E4 05 F1 | 	add	objptr, ##1536
0b628     F2 30 02 FB | 	rdlong	local06, objptr
0b62c     18 2D 02 F6 | 	mov	local04, local06
0b630     01 2C 66 F0 | 	shl	local04, #1
0b634     18 2D 02 F1 | 	add	local04, local06
0b638     02 2C 66 F0 | 	shl	local04, #2
0b63c     03 00 00 FF 
0b640     00 E4 85 F1 | 	sub	objptr, ##1536
0b644     F2 2C 02 F1 | 	add	local04, objptr
0b648     04 2C 06 F1 | 	add	local04, #4
0b64c     16 33 62 FC | 	wrlong	local07, local04
0b650     03 00 00 FF 
0b654     00 E4 05 F1 | 	add	objptr, ##1536
0b658     F2 32 02 FB | 	rdlong	local07, objptr
0b65c     19 31 02 F6 | 	mov	local06, local07
0b660     01 30 66 F0 | 	shl	local06, #1
0b664     19 31 02 F1 | 	add	local06, local07
0b668     02 30 66 F0 | 	shl	local06, #2
0b66c     03 00 00 FF 
0b670     00 E4 85 F1 | 	sub	objptr, ##1536
0b674     F2 30 02 F1 | 	add	local06, objptr
0b678     08 30 06 F1 | 	add	local06, #8
0b67c     18 2F 62 FC | 	wrlong	local05, local06
0b680     03 00 00 FF 
0b684     00 E4 05 F1 | 	add	objptr, ##1536
0b688     F2 30 02 FB | 	rdlong	local06, objptr
0b68c     01 30 06 F1 | 	add	local06, #1
0b690     F2 30 62 FC | 	wrlong	local06, objptr
0b694     13 00 00 FF 
0b698     38 E4 85 F1 | 	sub	objptr, ##9784
0b69c     F2 2C 02 FB | 	rdlong	local04, objptr
0b6a0     03 2C 66 F0 | 	shl	local04, #3
0b6a4     02 00 00 FF 
0b6a8     38 E4 85 F1 | 	sub	objptr, ##1080
0b6ac     F2 2C 02 F1 | 	add	local04, objptr
0b6b0     04 2C 06 F1 | 	add	local04, #4
0b6b4     16 2F 02 FB | 	rdlong	local05, local04
0b6b8     35 00 00 FF 
0b6bc     0C E4 85 F1 | 	sub	objptr, ##27148
0b6c0     DC FE 9F FD | 	jmp	#LR__0951
0b6c4                 | LR__0952
0b6c4                 | ' return 0  
0b6c4     00 FA 05 F6 | 	mov	result1, #0
0b6c8                 | LR__0953
0b6c8     A7 F0 03 F6 | 	mov	ptra, fp
0b6cc     B2 00 A0 FD | 	call	#popregs_
0b6d0                 | _expr_ret
0b6d0     2D 00 64 FD | 	ret
0b6d4                 | 
0b6d4                 | ' 
0b6d4                 | ' ' Second level operators : add, sub, logic
0b6d4                 | ' 
0b6d4                 | ' function addsub() as ulong
0b6d4                 | _addsub
0b6d4     07 4A 05 F6 | 	mov	COUNT_, #7
0b6d8     A8 00 A0 FD | 	call	#pushregs_
0b6dc                 | _addsub_enter
0b6dc     00 26 06 F6 | 	mov	local01, #0
0b6e0     60 01 B0 FD | 	call	#_muldiv
0b6e4                 | ' 
0b6e4                 | ' t3.result.uresult=0
0b6e4                 | ' err=muldiv() : if err>0 then return err           			 
0b6e4     01 FA 15 F2 | 	cmp	result1, #1 wc
0b6e8     4C 01 90 3D |  if_ae	jmp	#LR__0962
0b6ec     37 00 00 FF 
0b6f0     44 E4 05 F1 | 	add	objptr, ##28228
0b6f4     F2 2C 02 FB | 	rdlong	local04, objptr
0b6f8     03 2C 66 F0 | 	shl	local04, #3
0b6fc     02 00 00 FF 
0b700     38 E4 85 F1 | 	sub	objptr, ##1080
0b704     F2 2C 02 F1 | 	add	local04, objptr
0b708     04 2C 06 F1 | 	add	local04, #4
0b70c     16 2F 02 FB | 	rdlong	local05, local04
0b710                 | ' op = lparts(ct).token				 
0b710                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0b710     35 00 00 FF 
0b714     0C E4 85 F1 | 	sub	objptr, ##27148
0b718                 | LR__0960
0b718     01 2E 0E F2 | 	cmp	local05, #1 wz
0b71c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0b720     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0b724     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0b728     08 01 90 5D |  if_ne	jmp	#LR__0961
0b72c     37 00 00 FF 
0b730     44 E4 05 F1 | 	add	objptr, ##28228
0b734     F2 2C 02 FB | 	rdlong	local04, objptr
0b738     01 2C 06 F1 | 	add	local04, #1
0b73c     F2 2C 62 FC | 	wrlong	local04, objptr
0b740     37 00 00 FF 
0b744     44 E4 85 F1 | 	sub	objptr, ##28228
0b748     F8 00 B0 FD | 	call	#_muldiv
0b74c                 | '   ct+=1
0b74c                 | '   err=muldiv() : if err>0 then return err   
0b74c     01 FA 15 F2 | 	cmp	result1, #1 wc
0b750     E4 00 90 3D |  if_ae	jmp	#LR__0962
0b754     17 2B 02 F6 | 	mov	local03, local05
0b758     13 31 02 F6 | 	mov	local06, local01
0b75c     14 33 02 F6 | 	mov	local07, local02
0b760     15 2F 02 F6 | 	mov	local05, local03
0b764     4A 00 00 FF 
0b768     7C E4 05 F1 | 	add	objptr, ##38012
0b76c     F2 2C 02 FB | 	rdlong	local04, objptr
0b770     16 FB 01 F6 | 	mov	result1, local04
0b774     01 FA 65 F0 | 	shl	result1, #1
0b778     16 FB 01 F1 | 	add	result1, local04
0b77c     02 FA 65 F0 | 	shl	result1, #2
0b780     03 00 00 FF 
0b784     00 E4 85 F1 | 	sub	objptr, ##1536
0b788     F2 FA 01 F1 | 	add	result1, objptr
0b78c     FD 30 62 FC | 	wrlong	local06, result1
0b790     03 00 00 FF 
0b794     00 E4 05 F1 | 	add	objptr, ##1536
0b798     F2 30 02 FB | 	rdlong	local06, objptr
0b79c     18 2D 02 F6 | 	mov	local04, local06
0b7a0     01 2C 66 F0 | 	shl	local04, #1
0b7a4     18 2D 02 F1 | 	add	local04, local06
0b7a8     02 2C 66 F0 | 	shl	local04, #2
0b7ac     03 00 00 FF 
0b7b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b7b4     F2 2C 02 F1 | 	add	local04, objptr
0b7b8     04 2C 06 F1 | 	add	local04, #4
0b7bc     16 33 62 FC | 	wrlong	local07, local04
0b7c0     03 00 00 FF 
0b7c4     00 E4 05 F1 | 	add	objptr, ##1536
0b7c8     F2 32 02 FB | 	rdlong	local07, objptr
0b7cc     19 31 02 F6 | 	mov	local06, local07
0b7d0     01 30 66 F0 | 	shl	local06, #1
0b7d4     19 31 02 F1 | 	add	local06, local07
0b7d8     02 30 66 F0 | 	shl	local06, #2
0b7dc     03 00 00 FF 
0b7e0     00 E4 85 F1 | 	sub	objptr, ##1536
0b7e4     F2 30 02 F1 | 	add	local06, objptr
0b7e8     08 30 06 F1 | 	add	local06, #8
0b7ec     18 2F 62 FC | 	wrlong	local05, local06
0b7f0     03 00 00 FF 
0b7f4     00 E4 05 F1 | 	add	objptr, ##1536
0b7f8     F2 30 02 FB | 	rdlong	local06, objptr
0b7fc     01 30 06 F1 | 	add	local06, #1
0b800     F2 30 62 FC | 	wrlong	local06, objptr
0b804     13 00 00 FF 
0b808     38 E4 85 F1 | 	sub	objptr, ##9784
0b80c     F2 2C 02 FB | 	rdlong	local04, objptr
0b810     03 2C 66 F0 | 	shl	local04, #3
0b814     02 00 00 FF 
0b818     38 E4 85 F1 | 	sub	objptr, ##1080
0b81c     F2 2C 02 F1 | 	add	local04, objptr
0b820     04 2C 06 F1 | 	add	local04, #4
0b824     16 2F 02 FB | 	rdlong	local05, local04
0b828     35 00 00 FF 
0b82c     0C E4 85 F1 | 	sub	objptr, ##27148
0b830     E4 FE 9F FD | 	jmp	#LR__0960
0b834                 | LR__0961
0b834                 | ' return 0
0b834     00 FA 05 F6 | 	mov	result1, #0
0b838                 | LR__0962
0b838     A7 F0 03 F6 | 	mov	ptra, fp
0b83c     B2 00 A0 FD | 	call	#popregs_
0b840                 | _addsub_ret
0b840     2D 00 64 FD | 	ret
0b844                 | 
0b844                 | ' 
0b844                 | ' ' Third level operators : mul,div,shift,power
0b844                 | ' 
0b844                 | ' function muldiv() as ulong
0b844                 | _muldiv
0b844     07 4A 05 F6 | 	mov	COUNT_, #7
0b848     A8 00 A0 FD | 	call	#pushregs_
0b84c                 | _muldiv_enter
0b84c     00 26 06 F6 | 	mov	local01, #0
0b850     6C 01 B0 FD | 	call	#_getvalue
0b854                 | ' 
0b854                 | ' t3.result.uresult=0
0b854                 | ' err=getvalue() : if err>0 then return err     
0b854     01 FA 15 F2 | 	cmp	result1, #1 wc
0b858     58 01 90 3D |  if_ae	jmp	#LR__0972
0b85c     37 00 00 FF 
0b860     44 E4 05 F1 | 	add	objptr, ##28228
0b864     F2 2C 02 FB | 	rdlong	local04, objptr
0b868     03 2C 66 F0 | 	shl	local04, #3
0b86c     02 00 00 FF 
0b870     38 E4 85 F1 | 	sub	objptr, ##1080
0b874     F2 2C 02 F1 | 	add	local04, objptr
0b878     04 2C 06 F1 | 	add	local04, #4
0b87c     16 2F 02 FB | 	rdlong	local05, local04
0b880                 | ' op = lparts(ct).token
0b880                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0b880     35 00 00 FF 
0b884     0C E4 85 F1 | 	sub	objptr, ##27148
0b888                 | LR__0970
0b888     05 2E 0E F2 | 	cmp	local05, #5 wz
0b88c     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0b890     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0b894     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0b898     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0b89c     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0b8a0     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0b8a4     08 01 90 5D |  if_ne	jmp	#LR__0971
0b8a8     37 00 00 FF 
0b8ac     44 E4 05 F1 | 	add	objptr, ##28228
0b8b0     F2 2C 02 FB | 	rdlong	local04, objptr
0b8b4     01 2C 06 F1 | 	add	local04, #1
0b8b8     F2 2C 62 FC | 	wrlong	local04, objptr
0b8bc     37 00 00 FF 
0b8c0     44 E4 85 F1 | 	sub	objptr, ##28228
0b8c4     F8 00 B0 FD | 	call	#_getvalue
0b8c8                 | '   ct+=1
0b8c8                 | '   err=getvalue() :if err>0 then return err   
0b8c8     01 FA 15 F2 | 	cmp	result1, #1 wc
0b8cc     E4 00 90 3D |  if_ae	jmp	#LR__0972
0b8d0     17 2B 02 F6 | 	mov	local03, local05
0b8d4     13 31 02 F6 | 	mov	local06, local01
0b8d8     14 33 02 F6 | 	mov	local07, local02
0b8dc     15 2F 02 F6 | 	mov	local05, local03
0b8e0     4A 00 00 FF 
0b8e4     7C E4 05 F1 | 	add	objptr, ##38012
0b8e8     F2 2C 02 FB | 	rdlong	local04, objptr
0b8ec     16 FB 01 F6 | 	mov	result1, local04
0b8f0     01 FA 65 F0 | 	shl	result1, #1
0b8f4     16 FB 01 F1 | 	add	result1, local04
0b8f8     02 FA 65 F0 | 	shl	result1, #2
0b8fc     03 00 00 FF 
0b900     00 E4 85 F1 | 	sub	objptr, ##1536
0b904     F2 FA 01 F1 | 	add	result1, objptr
0b908     FD 30 62 FC | 	wrlong	local06, result1
0b90c     03 00 00 FF 
0b910     00 E4 05 F1 | 	add	objptr, ##1536
0b914     F2 30 02 FB | 	rdlong	local06, objptr
0b918     18 2D 02 F6 | 	mov	local04, local06
0b91c     01 2C 66 F0 | 	shl	local04, #1
0b920     18 2D 02 F1 | 	add	local04, local06
0b924     02 2C 66 F0 | 	shl	local04, #2
0b928     03 00 00 FF 
0b92c     00 E4 85 F1 | 	sub	objptr, ##1536
0b930     F2 2C 02 F1 | 	add	local04, objptr
0b934     04 2C 06 F1 | 	add	local04, #4
0b938     16 33 62 FC | 	wrlong	local07, local04
0b93c     03 00 00 FF 
0b940     00 E4 05 F1 | 	add	objptr, ##1536
0b944     F2 32 02 FB | 	rdlong	local07, objptr
0b948     19 31 02 F6 | 	mov	local06, local07
0b94c     01 30 66 F0 | 	shl	local06, #1
0b950     19 31 02 F1 | 	add	local06, local07
0b954     02 30 66 F0 | 	shl	local06, #2
0b958     03 00 00 FF 
0b95c     00 E4 85 F1 | 	sub	objptr, ##1536
0b960     F2 30 02 F1 | 	add	local06, objptr
0b964     08 30 06 F1 | 	add	local06, #8
0b968     18 2F 62 FC | 	wrlong	local05, local06
0b96c     03 00 00 FF 
0b970     00 E4 05 F1 | 	add	objptr, ##1536
0b974     F2 30 02 FB | 	rdlong	local06, objptr
0b978     01 30 06 F1 | 	add	local06, #1
0b97c     F2 30 62 FC | 	wrlong	local06, objptr
0b980     13 00 00 FF 
0b984     38 E4 85 F1 | 	sub	objptr, ##9784
0b988     F2 2C 02 FB | 	rdlong	local04, objptr
0b98c     03 2C 66 F0 | 	shl	local04, #3
0b990     02 00 00 FF 
0b994     38 E4 85 F1 | 	sub	objptr, ##1080
0b998     F2 2C 02 F1 | 	add	local04, objptr
0b99c     04 2C 06 F1 | 	add	local04, #4
0b9a0     16 2F 02 FB | 	rdlong	local05, local04
0b9a4     35 00 00 FF 
0b9a8     0C E4 85 F1 | 	sub	objptr, ##27148
0b9ac     D8 FE 9F FD | 	jmp	#LR__0970
0b9b0                 | LR__0971
0b9b0                 | ' return 0
0b9b0     00 FA 05 F6 | 	mov	result1, #0
0b9b4                 | LR__0972
0b9b4     A7 F0 03 F6 | 	mov	ptra, fp
0b9b8     B2 00 A0 FD | 	call	#popregs_
0b9bc                 | _muldiv_ret
0b9bc     2D 00 64 FD | 	ret
0b9c0                 | 
0b9c0                 | ' 
0b9c0                 | ' ' Get a value for operations
0b9c0                 | ' 
0b9c0                 | ' function getvalue()  as ulong
0b9c0                 | _getvalue
0b9c0     0B 4A 05 F6 | 	mov	COUNT_, #11
0b9c4     A8 00 A0 FD | 	call	#pushregs_
0b9c8                 | _getvalue_enter
0b9c8     01 2C 06 F6 | 	mov	local04, #1
0b9cc     00 26 06 F6 | 	mov	local01, #0
0b9d0     1D 2A 06 F6 | 	mov	local03, #29
0b9d4     37 00 00 FF 
0b9d8     44 E4 05 F1 | 	add	objptr, ##28228
0b9dc     F2 16 02 FB | 	rdlong	arg03, objptr
0b9e0     03 16 66 F0 | 	shl	arg03, #3
0b9e4     02 00 00 FF 
0b9e8     38 E4 85 F1 | 	sub	objptr, ##1080
0b9ec     F2 16 02 F1 | 	add	arg03, objptr
0b9f0     04 16 06 F1 | 	add	arg03, #4
0b9f4     0B 2F 02 FB | 	rdlong	local05, arg03
0b9f8                 | ' 
0b9f8                 | ' m=1											' for negative numbers
0b9f8                 | ' t1.result.uresult=0: t1.result_type=result_uint
0b9f8                 | ' op=lparts(ct).token
0b9f8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0b9f8     02 2E 0E F2 | 	cmp	local05, #2 wz
0b9fc     35 00 00 FF 
0ba00     0C E4 85 F1 | 	sub	objptr, ##27148
0ba04     38 00 90 5D |  if_ne	jmp	#LR__0980
0ba08     01 2C 66 F6 | 	neg	local04, #1
0ba0c     37 00 00 FF 
0ba10     44 E4 05 F1 | 	add	objptr, ##28228
0ba14     F2 2E 02 FB | 	rdlong	local05, objptr
0ba18     01 2E 06 F1 | 	add	local05, #1
0ba1c     F2 2E 62 FC | 	wrlong	local05, objptr
0ba20     03 2E 66 F0 | 	shl	local05, #3
0ba24     02 00 00 FF 
0ba28     38 E4 85 F1 | 	sub	objptr, ##1080
0ba2c     F2 2E 02 F1 | 	add	local05, objptr
0ba30     04 2E 06 F1 | 	add	local05, #4
0ba34     17 2F 02 FB | 	rdlong	local05, local05
0ba38     35 00 00 FF 
0ba3c     0C E4 85 F1 | 	sub	objptr, ##27148
0ba40                 | LR__0980
0ba40                 | ' select case op
0ba40     01 00 00 FF 
0ba44     00 2E 0E F2 | 	cmp	local05, ##512 wz
0ba48     44 00 90 AD |  if_e	jmp	#LR__0981
0ba4c     01 00 00 FF 
0ba50     01 2E 0E F2 | 	cmp	local05, ##513 wz
0ba54     90 01 90 AD |  if_e	jmp	#LR__0984
0ba58     01 00 00 FF 
0ba5c     02 2E 0E F2 | 	cmp	local05, ##514 wz
0ba60     44 04 90 AD |  if_e	jmp	#LR__0991
0ba64     01 00 00 FF 
0ba68     03 2E 0E F2 | 	cmp	local05, ##515 wz
0ba6c     A8 05 90 AD |  if_e	jmp	#LR__0994
0ba70     2C 2E 0E F2 | 	cmp	local05, #44 wz
0ba74     78 07 90 AD |  if_e	jmp	#LR__0999
0ba78     01 00 00 FF 
0ba7c     04 2E 0E F2 | 	cmp	local05, ##516 wz
0ba80     70 08 90 AD |  if_e	jmp	#LR__1000
0ba84     15 2E 0E F2 | 	cmp	local05, #21 wz
0ba88     98 08 90 AD |  if_e	jmp	#LR__1001
0ba8c     10 09 90 FD | 	jmp	#LR__1002
0ba90                 | LR__0981
0ba90                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0ba90     01 2C 0E F2 | 	cmp	local04, #1 wz
0ba94     3C 00 90 5D |  if_ne	jmp	#LR__0982
0ba98     37 00 00 FF 
0ba9c     44 E4 05 F1 | 	add	objptr, ##28228
0baa0     F2 2E 02 FB | 	rdlong	local05, objptr
0baa4     03 2E 66 F0 | 	shl	local05, #3
0baa8     02 00 00 FF 
0baac     38 E4 85 F1 | 	sub	objptr, ##1080
0bab0     F2 2E 02 F1 | 	add	local05, objptr
0bab4     17 13 02 FB | 	rdlong	arg01, local05
0bab8     00 14 06 F6 | 	mov	arg02, #0
0babc     35 00 00 FF 
0bac0     0C E4 85 F1 | 	sub	objptr, ##27148
0bac4     A0 D3 B1 FD | 	call	#__system____builtin_atoi
0bac8     FD 2C 02 FD | 	qmul	local04, result1
0bacc     18 26 62 FD | 	getqx	local01
0bad0     1C 2A 06 F6 | 	mov	local03, #28
0bad4                 | LR__0982
0bad4                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0bad4     FF FF 7F FF 
0bad8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0badc     3C 00 90 5D |  if_ne	jmp	#LR__0983
0bae0     37 00 00 FF 
0bae4     44 E4 05 F1 | 	add	objptr, ##28228
0bae8     F2 2E 02 FB | 	rdlong	local05, objptr
0baec     03 2E 66 F0 | 	shl	local05, #3
0baf0     02 00 00 FF 
0baf4     38 E4 85 F1 | 	sub	objptr, ##1080
0baf8     F2 2E 02 F1 | 	add	local05, objptr
0bafc     17 13 02 FB | 	rdlong	arg01, local05
0bb00     00 14 06 F6 | 	mov	arg02, #0
0bb04     35 00 00 FF 
0bb08     0C E4 85 F1 | 	sub	objptr, ##27148
0bb0c     58 D3 B1 FD | 	call	#__system____builtin_atoi
0bb10     FD 2C 02 FD | 	qmul	local04, result1
0bb14     18 26 62 FD | 	getqx	local01
0bb18     1C 2A 06 F6 | 	mov	local03, #28
0bb1c                 | LR__0983
0bb1c     13 31 02 F6 | 	mov	local06, local01
0bb20     14 33 02 F6 | 	mov	local07, local02
0bb24     15 2F 02 F6 | 	mov	local05, local03
0bb28     4A 00 00 FF 
0bb2c     7C E4 05 F1 | 	add	objptr, ##38012
0bb30     F2 26 02 FB | 	rdlong	local01, objptr
0bb34     13 2D 02 F6 | 	mov	local04, local01
0bb38     01 2C 66 F0 | 	shl	local04, #1
0bb3c     13 2D 02 F1 | 	add	local04, local01
0bb40     02 2C 66 F0 | 	shl	local04, #2
0bb44     03 00 00 FF 
0bb48     00 E4 85 F1 | 	sub	objptr, ##1536
0bb4c     F2 2C 02 F1 | 	add	local04, objptr
0bb50     16 31 62 FC | 	wrlong	local06, local04
0bb54     03 00 00 FF 
0bb58     00 E4 05 F1 | 	add	objptr, ##1536
0bb5c     F2 30 02 FB | 	rdlong	local06, objptr
0bb60     18 27 02 F6 | 	mov	local01, local06
0bb64     01 26 66 F0 | 	shl	local01, #1
0bb68     18 27 02 F1 | 	add	local01, local06
0bb6c     02 26 66 F0 | 	shl	local01, #2
0bb70     03 00 00 FF 
0bb74     00 E4 85 F1 | 	sub	objptr, ##1536
0bb78     F2 26 02 F1 | 	add	local01, objptr
0bb7c     04 26 06 F1 | 	add	local01, #4
0bb80     13 33 62 FC | 	wrlong	local07, local01
0bb84     03 00 00 FF 
0bb88     00 E4 05 F1 | 	add	objptr, ##1536
0bb8c     F2 32 02 FB | 	rdlong	local07, objptr
0bb90     19 31 02 F6 | 	mov	local06, local07
0bb94     01 30 66 F0 | 	shl	local06, #1
0bb98     19 31 02 F1 | 	add	local06, local07
0bb9c     02 30 66 F0 | 	shl	local06, #2
0bba0     03 00 00 FF 
0bba4     00 E4 85 F1 | 	sub	objptr, ##1536
0bba8     F2 30 02 F1 | 	add	local06, objptr
0bbac     08 30 06 F1 | 	add	local06, #8
0bbb0     18 2F 62 FC | 	wrlong	local05, local06
0bbb4     03 00 00 FF 
0bbb8     00 E4 05 F1 | 	add	objptr, ##1536
0bbbc     F2 30 02 FB | 	rdlong	local06, objptr
0bbc0     01 30 06 F1 | 	add	local06, #1
0bbc4     F2 30 62 FC | 	wrlong	local06, objptr
0bbc8     13 00 00 FF 
0bbcc     38 E4 85 F1 | 	sub	objptr, ##9784
0bbd0     F2 30 02 FB | 	rdlong	local06, objptr
0bbd4     01 30 06 F1 | 	add	local06, #1
0bbd8     F2 30 62 FC | 	wrlong	local06, objptr
0bbdc     37 00 00 FF 
0bbe0     44 E4 85 F1 | 	sub	objptr, ##28228
0bbe4     E4 07 90 FD | 	jmp	#LR__1003
0bbe8                 | LR__0984
0bbe8                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0bbe8     37 00 00 FF 
0bbec     44 E4 05 F1 | 	add	objptr, ##28228
0bbf0     F2 16 02 FB | 	rdlong	arg03, objptr
0bbf4     03 16 66 F0 | 	shl	arg03, #3
0bbf8     02 00 00 FF 
0bbfc     38 E4 85 F1 | 	sub	objptr, ##1080
0bc00     F2 16 02 F1 | 	add	arg03, objptr
0bc04     0B 13 02 FB | 	rdlong	arg01, arg03
0bc08     01 14 06 F6 | 	mov	arg02, #1
0bc0c     35 00 00 FF 
0bc10     0C E4 85 F1 | 	sub	objptr, ##27148
0bc14     DC BD B1 FD | 	call	#__system__Left_S
0bc18     FD 12 02 F6 | 	mov	arg01, result1
0bc1c     AD 01 00 FF 
0bc20     BC 15 06 F6 | 	mov	arg02, ##@LR__5807
0bc24     78 9D B1 FD | 	call	#__system___string_cmp
0bc28     00 FA 0D F2 | 	cmp	result1, #0 wz
0bc2c     94 00 90 5D |  if_ne	jmp	#LR__0987
0bc30     37 00 00 FF 
0bc34     44 E4 05 F1 | 	add	objptr, ##28228
0bc38     F2 32 02 FB | 	rdlong	local07, objptr
0bc3c     19 31 02 F6 | 	mov	local06, local07
0bc40     03 30 66 F0 | 	shl	local06, #3
0bc44     02 00 00 FF 
0bc48     38 E4 85 F1 | 	sub	objptr, ##1080
0bc4c     F2 30 02 F1 | 	add	local06, objptr
0bc50     AD 01 00 FF 
0bc54     BE 2F 06 F6 | 	mov	local05, ##@LR__5808
0bc58     03 32 66 F0 | 	shl	local07, #3
0bc5c     F2 32 02 F1 | 	add	local07, objptr
0bc60     19 33 02 FB | 	rdlong	local07, local07
0bc64     02 00 00 FF 
0bc68     38 E4 05 F1 | 	add	objptr, ##1080
0bc6c     F2 26 02 FB | 	rdlong	local01, objptr
0bc70     03 26 66 F0 | 	shl	local01, #3
0bc74     02 00 00 FF 
0bc78     38 E4 85 F1 | 	sub	objptr, ##1080
0bc7c     F2 26 02 F1 | 	add	local01, objptr
0bc80     13 13 02 FB | 	rdlong	arg01, local01
0bc84     35 00 00 FF 
0bc88     0C E4 85 F1 | 	sub	objptr, ##27148
0bc8c     09 35 02 F6 | 	mov	local08, arg01
0bc90     97 06 48 FB | 	callpa	#(@LR__0986-@LR__0985)>>2,fcache_load_ptr_
0bc94                 | LR__0985
0bc94     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bc98     01 34 06 51 |  if_ne	add	local08, #1
0bc9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0985
0bca0                 | LR__0986
0bca0     09 35 82 F1 | 	sub	local08, arg01
0bca4     1A 15 02 F6 | 	mov	arg02, local08
0bca8     01 14 86 F1 | 	sub	arg02, #1
0bcac     19 13 02 F6 | 	mov	arg01, local07
0bcb0     C8 BD B1 FD | 	call	#__system__Right_S
0bcb4     FD 14 02 F6 | 	mov	arg02, result1
0bcb8     17 13 02 F6 | 	mov	arg01, local05
0bcbc     14 9D B1 FD | 	call	#__system___string_concat
0bcc0     18 FB 61 FC | 	wrlong	result1, local06
0bcc4                 | LR__0987
0bcc4                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0bcc4     37 00 00 FF 
0bcc8     44 E4 05 F1 | 	add	objptr, ##28228
0bccc     F2 16 02 FB | 	rdlong	arg03, objptr
0bcd0     03 16 66 F0 | 	shl	arg03, #3
0bcd4     02 00 00 FF 
0bcd8     38 E4 85 F1 | 	sub	objptr, ##1080
0bcdc     F2 16 02 F1 | 	add	arg03, objptr
0bce0     0B 13 02 FB | 	rdlong	arg01, arg03
0bce4     01 14 06 F6 | 	mov	arg02, #1
0bce8     35 00 00 FF 
0bcec     0C E4 85 F1 | 	sub	objptr, ##27148
0bcf0     00 BD B1 FD | 	call	#__system__Left_S
0bcf4     FD 12 02 F6 | 	mov	arg01, result1
0bcf8     AD 01 00 FF 
0bcfc     C1 15 06 F6 | 	mov	arg02, ##@LR__5809
0bd00     9C 9C B1 FD | 	call	#__system___string_cmp
0bd04     00 FA 0D F2 | 	cmp	result1, #0 wz
0bd08     94 00 90 5D |  if_ne	jmp	#LR__0990
0bd0c     37 00 00 FF 
0bd10     44 E4 05 F1 | 	add	objptr, ##28228
0bd14     F2 32 02 FB | 	rdlong	local07, objptr
0bd18     19 31 02 F6 | 	mov	local06, local07
0bd1c     03 30 66 F0 | 	shl	local06, #3
0bd20     02 00 00 FF 
0bd24     38 E4 85 F1 | 	sub	objptr, ##1080
0bd28     F2 30 02 F1 | 	add	local06, objptr
0bd2c     AD 01 00 FF 
0bd30     C3 2F 06 F6 | 	mov	local05, ##@LR__5810
0bd34     03 32 66 F0 | 	shl	local07, #3
0bd38     F2 32 02 F1 | 	add	local07, objptr
0bd3c     19 33 02 FB | 	rdlong	local07, local07
0bd40     02 00 00 FF 
0bd44     38 E4 05 F1 | 	add	objptr, ##1080
0bd48     F2 26 02 FB | 	rdlong	local01, objptr
0bd4c     03 26 66 F0 | 	shl	local01, #3
0bd50     02 00 00 FF 
0bd54     38 E4 85 F1 | 	sub	objptr, ##1080
0bd58     F2 26 02 F1 | 	add	local01, objptr
0bd5c     13 13 02 FB | 	rdlong	arg01, local01
0bd60     35 00 00 FF 
0bd64     0C E4 85 F1 | 	sub	objptr, ##27148
0bd68     09 35 02 F6 | 	mov	local08, arg01
0bd6c     97 06 48 FB | 	callpa	#(@LR__0989-@LR__0988)>>2,fcache_load_ptr_
0bd70                 | LR__0988
0bd70     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bd74     01 34 06 51 |  if_ne	add	local08, #1
0bd78     F4 FF 9F 5D |  if_ne	jmp	#LR__0988
0bd7c                 | LR__0989
0bd7c     09 35 82 F1 | 	sub	local08, arg01
0bd80     1A 15 02 F6 | 	mov	arg02, local08
0bd84     01 14 86 F1 | 	sub	arg02, #1
0bd88     19 13 02 F6 | 	mov	arg01, local07
0bd8c     EC BC B1 FD | 	call	#__system__Right_S
0bd90     FD 14 02 F6 | 	mov	arg02, result1
0bd94     17 13 02 F6 | 	mov	arg01, local05
0bd98     38 9C B1 FD | 	call	#__system___string_concat
0bd9c     18 FB 61 FC | 	wrlong	result1, local06
0bda0                 | LR__0990
0bda0     37 00 00 FF 
0bda4     44 E4 05 F1 | 	add	objptr, ##28228
0bda8     F2 30 02 FB | 	rdlong	local06, objptr
0bdac     03 30 66 F0 | 	shl	local06, #3
0bdb0     02 00 00 FF 
0bdb4     38 E4 85 F1 | 	sub	objptr, ##1080
0bdb8     F2 30 02 F1 | 	add	local06, objptr
0bdbc     18 13 02 FB | 	rdlong	arg01, local06
0bdc0     00 14 06 F6 | 	mov	arg02, #0
0bdc4     35 00 00 FF 
0bdc8     0C E4 85 F1 | 	sub	objptr, ##27148
0bdcc     98 D0 B1 FD | 	call	#__system____builtin_atoi
0bdd0     FD 2C 02 FD | 	qmul	local04, result1
0bdd4     4A 00 00 FF 
0bdd8     7C E4 05 F1 | 	add	objptr, ##38012
0bddc     F2 30 02 FB | 	rdlong	local06, objptr
0bde0     18 37 02 F6 | 	mov	local09, local06
0bde4     01 36 66 F0 | 	shl	local09, #1
0bde8     18 37 02 F1 | 	add	local09, local06
0bdec     02 36 66 F0 | 	shl	local09, #2
0bdf0     03 00 00 FF 
0bdf4     00 E4 85 F1 | 	sub	objptr, ##1536
0bdf8     F2 36 02 F1 | 	add	local09, objptr
0bdfc     03 00 00 FF 
0be00     00 E4 05 F1 | 	add	objptr, ##1536
0be04     18 26 62 FD | 	getqx	local01
0be08     1C 2A 06 F6 | 	mov	local03, #28
0be0c     13 31 02 F6 | 	mov	local06, local01
0be10     14 33 02 F6 | 	mov	local07, local02
0be14     1B 31 62 FC | 	wrlong	local06, local09
0be18     15 37 02 F6 | 	mov	local09, local03
0be1c     F2 30 02 FB | 	rdlong	local06, objptr
0be20     18 2F 02 F6 | 	mov	local05, local06
0be24     01 2E 66 F0 | 	shl	local05, #1
0be28     18 2F 02 F1 | 	add	local05, local06
0be2c     02 2E 66 F0 | 	shl	local05, #2
0be30     03 00 00 FF 
0be34     00 E4 85 F1 | 	sub	objptr, ##1536
0be38     F2 2E 02 F1 | 	add	local05, objptr
0be3c     04 2E 06 F1 | 	add	local05, #4
0be40     17 33 62 FC | 	wrlong	local07, local05
0be44     03 00 00 FF 
0be48     00 E4 05 F1 | 	add	objptr, ##1536
0be4c     F2 32 02 FB | 	rdlong	local07, objptr
0be50     19 31 02 F6 | 	mov	local06, local07
0be54     01 30 66 F0 | 	shl	local06, #1
0be58     19 31 02 F1 | 	add	local06, local07
0be5c     02 30 66 F0 | 	shl	local06, #2
0be60     03 00 00 FF 
0be64     00 E4 85 F1 | 	sub	objptr, ##1536
0be68     F2 30 02 F1 | 	add	local06, objptr
0be6c     08 30 06 F1 | 	add	local06, #8
0be70     18 37 62 FC | 	wrlong	local09, local06
0be74     03 00 00 FF 
0be78     00 E4 05 F1 | 	add	objptr, ##1536
0be7c     F2 30 02 FB | 	rdlong	local06, objptr
0be80     01 30 06 F1 | 	add	local06, #1
0be84     F2 30 62 FC | 	wrlong	local06, objptr
0be88     13 00 00 FF 
0be8c     38 E4 85 F1 | 	sub	objptr, ##9784
0be90     F2 30 02 FB | 	rdlong	local06, objptr
0be94     01 30 06 F1 | 	add	local06, #1
0be98     F2 30 62 FC | 	wrlong	local06, objptr
0be9c     37 00 00 FF 
0bea0     44 E4 85 F1 | 	sub	objptr, ##28228
0bea4     24 05 90 FD | 	jmp	#LR__1003
0bea8                 | LR__0991
0bea8                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0bea8     01 2C 0E F2 | 	cmp	local04, #1 wz
0beac     48 00 90 5D |  if_ne	jmp	#LR__0992
0beb0     00 C0 1F FF 
0beb4     00 30 06 F6 | 	mov	local06, ##1065353216
0beb8     37 00 00 FF 
0bebc     44 E4 05 F1 | 	add	objptr, ##28228
0bec0     F2 36 02 FB | 	rdlong	local09, objptr
0bec4     03 36 66 F0 | 	shl	local09, #3
0bec8     02 00 00 FF 
0becc     38 E4 85 F1 | 	sub	objptr, ##1080
0bed0     F2 36 02 F1 | 	add	local09, objptr
0bed4     1B 13 02 FB | 	rdlong	arg01, local09
0bed8     35 00 00 FF 
0bedc     0C E4 85 F1 | 	sub	objptr, ##27148
0bee0     18 D1 B1 FD | 	call	#__system____builtin_atof
0bee4     FD 14 02 F6 | 	mov	arg02, result1
0bee8     18 13 02 F6 | 	mov	arg01, local06
0beec     00 C9 B1 FD | 	call	#__system___float_mul
0bef0     FD 26 02 F6 | 	mov	local01, result1
0bef4     1E 2A 06 F6 | 	mov	local03, #30
0bef8                 | LR__0992
0bef8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0bef8     FF FF 7F FF 
0befc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0bf00     48 00 90 5D |  if_ne	jmp	#LR__0993
0bf04     00 C0 5F FF 
0bf08     00 30 06 F6 | 	mov	local06, ##-1082130432
0bf0c     37 00 00 FF 
0bf10     44 E4 05 F1 | 	add	objptr, ##28228
0bf14     F2 36 02 FB | 	rdlong	local09, objptr
0bf18     03 36 66 F0 | 	shl	local09, #3
0bf1c     02 00 00 FF 
0bf20     38 E4 85 F1 | 	sub	objptr, ##1080
0bf24     F2 36 02 F1 | 	add	local09, objptr
0bf28     1B 13 02 FB | 	rdlong	arg01, local09
0bf2c     35 00 00 FF 
0bf30     0C E4 85 F1 | 	sub	objptr, ##27148
0bf34     C4 D0 B1 FD | 	call	#__system____builtin_atof
0bf38     FD 14 02 F6 | 	mov	arg02, result1
0bf3c     18 13 02 F6 | 	mov	arg01, local06
0bf40     AC C8 B1 FD | 	call	#__system___float_mul
0bf44     FD 26 02 F6 | 	mov	local01, result1
0bf48     1E 2A 06 F6 | 	mov	local03, #30
0bf4c                 | LR__0993
0bf4c     13 31 02 F6 | 	mov	local06, local01
0bf50     14 33 02 F6 | 	mov	local07, local02
0bf54     15 2F 02 F6 | 	mov	local05, local03
0bf58     4A 00 00 FF 
0bf5c     7C E4 05 F1 | 	add	objptr, ##38012
0bf60     F2 26 02 FB | 	rdlong	local01, objptr
0bf64     13 37 02 F6 | 	mov	local09, local01
0bf68     01 36 66 F0 | 	shl	local09, #1
0bf6c     13 37 02 F1 | 	add	local09, local01
0bf70     02 36 66 F0 | 	shl	local09, #2
0bf74     03 00 00 FF 
0bf78     00 E4 85 F1 | 	sub	objptr, ##1536
0bf7c     F2 36 02 F1 | 	add	local09, objptr
0bf80     1B 31 62 FC | 	wrlong	local06, local09
0bf84     03 00 00 FF 
0bf88     00 E4 05 F1 | 	add	objptr, ##1536
0bf8c     F2 36 02 FB | 	rdlong	local09, objptr
0bf90     1B 31 02 F6 | 	mov	local06, local09
0bf94     01 30 66 F0 | 	shl	local06, #1
0bf98     1B 31 02 F1 | 	add	local06, local09
0bf9c     02 30 66 F0 | 	shl	local06, #2
0bfa0     03 00 00 FF 
0bfa4     00 E4 85 F1 | 	sub	objptr, ##1536
0bfa8     F2 30 02 F1 | 	add	local06, objptr
0bfac     04 30 06 F1 | 	add	local06, #4
0bfb0     18 33 62 FC | 	wrlong	local07, local06
0bfb4     03 00 00 FF 
0bfb8     00 E4 05 F1 | 	add	objptr, ##1536
0bfbc     F2 36 02 FB | 	rdlong	local09, objptr
0bfc0     1B 33 02 F6 | 	mov	local07, local09
0bfc4     01 32 66 F0 | 	shl	local07, #1
0bfc8     1B 33 02 F1 | 	add	local07, local09
0bfcc     02 32 66 F0 | 	shl	local07, #2
0bfd0     03 00 00 FF 
0bfd4     00 E4 85 F1 | 	sub	objptr, ##1536
0bfd8     F2 32 02 F1 | 	add	local07, objptr
0bfdc     08 32 06 F1 | 	add	local07, #8
0bfe0     19 2F 62 FC | 	wrlong	local05, local07
0bfe4     03 00 00 FF 
0bfe8     00 E4 05 F1 | 	add	objptr, ##1536
0bfec     F2 30 02 FB | 	rdlong	local06, objptr
0bff0     01 30 06 F1 | 	add	local06, #1
0bff4     F2 30 62 FC | 	wrlong	local06, objptr
0bff8     13 00 00 FF 
0bffc     38 E4 85 F1 | 	sub	objptr, ##9784
0c000     F2 30 02 FB | 	rdlong	local06, objptr
0c004     01 30 06 F1 | 	add	local06, #1
0c008     F2 30 62 FC | 	wrlong	local06, objptr
0c00c     37 00 00 FF 
0c010     44 E4 85 F1 | 	sub	objptr, ##28228
0c014     B4 03 90 FD | 	jmp	#LR__1003
0c018                 | LR__0994
0c018     37 00 00 FF 
0c01c     44 E4 05 F1 | 	add	objptr, ##28228
0c020     F2 16 02 FB | 	rdlong	arg03, objptr
0c024     03 16 66 F0 | 	shl	arg03, #3
0c028     02 00 00 FF 
0c02c     38 E4 85 F1 | 	sub	objptr, ##1080
0c030     F2 16 02 F1 | 	add	arg03, objptr
0c034     0B 13 02 FB | 	rdlong	arg01, arg03
0c038     35 00 00 FF 
0c03c     0C E4 85 F1 | 	sub	objptr, ##27148
0c040     09 35 02 F6 | 	mov	local08, arg01
0c044     97 06 48 FB | 	callpa	#(@LR__0996-@LR__0995)>>2,fcache_load_ptr_
0c048                 | LR__0995
0c048     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c04c     01 34 06 51 |  if_ne	add	local08, #1
0c050     F4 FF 9F 5D |  if_ne	jmp	#LR__0995
0c054                 | LR__0996
0c054     09 35 82 F1 | 	sub	local08, arg01
0c058     1A FB 01 F6 | 	mov	result1, local08
0c05c     52 00 00 FF 
0c060     9C E4 05 F1 | 	add	objptr, ##42140
0c064     F2 FA 61 FC | 	wrlong	result1, objptr
0c068     58 E4 85 F1 | 	sub	objptr, #88
0c06c     F2 12 02 FB | 	rdlong	arg01, objptr
0c070     FD 12 82 F1 | 	sub	arg01, result1
0c074     04 12 86 F1 | 	sub	arg01, #4
0c078     03 12 26 F5 | 	andn	arg01, #3
0c07c     F2 12 62 FC | 	wrlong	arg01, objptr
0c080     58 E4 05 F1 | 	add	objptr, #88
0c084     F2 14 02 FB | 	rdlong	arg02, objptr
0c088     52 00 00 FF 
0c08c     9C E4 85 F1 | 	sub	objptr, ##42140
0c090     98 60 B1 FD | 	call	#_pslpoke
0c094                 | '     pslpoke memtop,l
0c094                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0c094     01 38 06 F6 | 	mov	local10, #1
0c098     52 00 00 FF 
0c09c     9C E4 05 F1 | 	add	objptr, ##42140
0c0a0     F2 3A 02 FB | 	rdlong	local11, objptr
0c0a4     52 00 00 FF 
0c0a8     9C E4 85 F1 | 	sub	objptr, ##42140
0c0ac     01 3A 06 F1 | 	add	local11, #1
0c0b0                 | LR__0997
0c0b0     1D 39 52 F2 | 	cmps	local10, local11 wc
0c0b4     5C 00 90 3D |  if_ae	jmp	#LR__0998
0c0b8     52 00 00 FF 
0c0bc     44 E4 05 F1 | 	add	objptr, ##42052
0c0c0     F2 32 02 FB | 	rdlong	local07, objptr
0c0c4     03 32 06 F1 | 	add	local07, #3
0c0c8     1C 33 02 F1 | 	add	local07, local10
0c0cc     1B 00 00 FF 
0c0d0     00 E4 85 F1 | 	sub	objptr, ##13824
0c0d4     F2 36 02 FB | 	rdlong	local09, objptr
0c0d8     03 36 66 F0 | 	shl	local09, #3
0c0dc     02 00 00 FF 
0c0e0     38 E4 85 F1 | 	sub	objptr, ##1080
0c0e4     F2 36 02 F1 | 	add	local09, objptr
0c0e8     1B 13 02 FB | 	rdlong	arg01, local09
0c0ec     1C 15 02 F6 | 	mov	arg02, local10
0c0f0     01 16 06 F6 | 	mov	arg03, #1
0c0f4     35 00 00 FF 
0c0f8     0C E4 85 F1 | 	sub	objptr, ##27148
0c0fc     0C BA B1 FD | 	call	#__system__Mid_S
0c100     FD 14 C2 FA | 	rdbyte	arg02, result1
0c104     19 13 02 F6 | 	mov	arg01, local07
0c108     B0 60 B1 FD | 	call	#_pspoke
0c10c     01 38 06 F1 | 	add	local10, #1
0c110     9C FF 9F FD | 	jmp	#LR__0997
0c114                 | LR__0998
0c114     52 00 00 FF 
0c118     44 E4 05 F1 | 	add	objptr, ##42052
0c11c     F2 26 02 FB | 	rdlong	local01, objptr
0c120     2B 2A 06 F6 | 	mov	local03, #43
0c124     13 31 02 F6 | 	mov	local06, local01
0c128     14 33 02 F6 | 	mov	local07, local02
0c12c     15 3B 02 F6 | 	mov	local11, local03
0c130     07 00 00 FF 
0c134     C8 E5 85 F1 | 	sub	objptr, ##4040
0c138     F2 38 02 FB | 	rdlong	local10, objptr
0c13c     1C 37 02 F6 | 	mov	local09, local10
0c140     01 36 66 F0 | 	shl	local09, #1
0c144     1C 37 02 F1 | 	add	local09, local10
0c148     02 36 66 F0 | 	shl	local09, #2
0c14c     03 00 00 FF 
0c150     00 E4 85 F1 | 	sub	objptr, ##1536
0c154     F2 36 02 F1 | 	add	local09, objptr
0c158     1B 31 62 FC | 	wrlong	local06, local09
0c15c     03 00 00 FF 
0c160     00 E4 05 F1 | 	add	objptr, ##1536
0c164     F2 38 02 FB | 	rdlong	local10, objptr
0c168     1C 37 02 F6 | 	mov	local09, local10
0c16c     01 36 66 F0 | 	shl	local09, #1
0c170     1C 37 02 F1 | 	add	local09, local10
0c174     02 36 66 F0 | 	shl	local09, #2
0c178     03 00 00 FF 
0c17c     00 E4 85 F1 | 	sub	objptr, ##1536
0c180     F2 36 02 F1 | 	add	local09, objptr
0c184     04 36 06 F1 | 	add	local09, #4
0c188     1B 33 62 FC | 	wrlong	local07, local09
0c18c     03 00 00 FF 
0c190     00 E4 05 F1 | 	add	objptr, ##1536
0c194     F2 38 02 FB | 	rdlong	local10, objptr
0c198     1C 37 02 F6 | 	mov	local09, local10
0c19c     01 36 66 F0 | 	shl	local09, #1
0c1a0     1C 37 02 F1 | 	add	local09, local10
0c1a4     02 36 66 F0 | 	shl	local09, #2
0c1a8     03 00 00 FF 
0c1ac     00 E4 85 F1 | 	sub	objptr, ##1536
0c1b0     F2 36 02 F1 | 	add	local09, objptr
0c1b4     08 36 06 F1 | 	add	local09, #8
0c1b8     1B 3B 62 FC | 	wrlong	local11, local09
0c1bc     03 00 00 FF 
0c1c0     00 E4 05 F1 | 	add	objptr, ##1536
0c1c4     F2 30 02 FB | 	rdlong	local06, objptr
0c1c8     01 30 06 F1 | 	add	local06, #1
0c1cc     F2 30 62 FC | 	wrlong	local06, objptr
0c1d0     13 00 00 FF 
0c1d4     38 E4 85 F1 | 	sub	objptr, ##9784
0c1d8     F2 30 02 FB | 	rdlong	local06, objptr
0c1dc     01 30 06 F1 | 	add	local06, #1
0c1e0     F2 30 62 FC | 	wrlong	local06, objptr
0c1e4     37 00 00 FF 
0c1e8     44 E4 85 F1 | 	sub	objptr, ##28228
0c1ec     DC 01 90 FD | 	jmp	#LR__1003
0c1f0                 | LR__0999
0c1f0     2C 2A 06 F6 | 	mov	local03, #44
0c1f4     37 00 00 FF 
0c1f8     44 E4 05 F1 | 	add	objptr, ##28228
0c1fc     F2 30 02 FB | 	rdlong	local06, objptr
0c200     03 30 66 F0 | 	shl	local06, #3
0c204     02 00 00 FF 
0c208     38 E4 85 F1 | 	sub	objptr, ##1080
0c20c     F2 30 02 F1 | 	add	local06, objptr
0c210     18 13 02 FB | 	rdlong	arg01, local06
0c214     00 14 06 F6 | 	mov	arg02, #0
0c218     35 00 00 FF 
0c21c     0C E4 85 F1 | 	sub	objptr, ##27148
0c220     44 CC B1 FD | 	call	#__system____builtin_atoi
0c224     FD 26 02 F6 | 	mov	local01, result1
0c228     13 31 02 F6 | 	mov	local06, local01
0c22c     14 33 02 F6 | 	mov	local07, local02
0c230     15 3B 02 F6 | 	mov	local11, local03
0c234     4A 00 00 FF 
0c238     7C E4 05 F1 | 	add	objptr, ##38012
0c23c     F2 38 02 FB | 	rdlong	local10, objptr
0c240     1C 37 02 F6 | 	mov	local09, local10
0c244     01 36 66 F0 | 	shl	local09, #1
0c248     1C 37 02 F1 | 	add	local09, local10
0c24c     02 36 66 F0 | 	shl	local09, #2
0c250     03 00 00 FF 
0c254     00 E4 85 F1 | 	sub	objptr, ##1536
0c258     F2 36 02 F1 | 	add	local09, objptr
0c25c     1B 31 62 FC | 	wrlong	local06, local09
0c260     03 00 00 FF 
0c264     00 E4 05 F1 | 	add	objptr, ##1536
0c268     F2 38 02 FB | 	rdlong	local10, objptr
0c26c     1C 37 02 F6 | 	mov	local09, local10
0c270     01 36 66 F0 | 	shl	local09, #1
0c274     1C 37 02 F1 | 	add	local09, local10
0c278     02 36 66 F0 | 	shl	local09, #2
0c27c     03 00 00 FF 
0c280     00 E4 85 F1 | 	sub	objptr, ##1536
0c284     F2 36 02 F1 | 	add	local09, objptr
0c288     04 36 06 F1 | 	add	local09, #4
0c28c     1B 33 62 FC | 	wrlong	local07, local09
0c290     03 00 00 FF 
0c294     00 E4 05 F1 | 	add	objptr, ##1536
0c298     F2 38 02 FB | 	rdlong	local10, objptr
0c29c     1C 37 02 F6 | 	mov	local09, local10
0c2a0     01 36 66 F0 | 	shl	local09, #1
0c2a4     1C 37 02 F1 | 	add	local09, local10
0c2a8     02 36 66 F0 | 	shl	local09, #2
0c2ac     03 00 00 FF 
0c2b0     00 E4 85 F1 | 	sub	objptr, ##1536
0c2b4     F2 36 02 F1 | 	add	local09, objptr
0c2b8     08 36 06 F1 | 	add	local09, #8
0c2bc     1B 3B 62 FC | 	wrlong	local11, local09
0c2c0     03 00 00 FF 
0c2c4     00 E4 05 F1 | 	add	objptr, ##1536
0c2c8     F2 30 02 FB | 	rdlong	local06, objptr
0c2cc     01 30 06 F1 | 	add	local06, #1
0c2d0     F2 30 62 FC | 	wrlong	local06, objptr
0c2d4     13 00 00 FF 
0c2d8     38 E4 85 F1 | 	sub	objptr, ##9784
0c2dc     F2 30 02 FB | 	rdlong	local06, objptr
0c2e0     01 30 06 F1 | 	add	local06, #1
0c2e4     F2 30 62 FC | 	wrlong	local06, objptr
0c2e8     37 00 00 FF 
0c2ec     44 E4 85 F1 | 	sub	objptr, ##28228
0c2f0     D8 00 90 FD | 	jmp	#LR__1003
0c2f4                 | LR__1000
0c2f4     16 13 02 F6 | 	mov	arg01, local04
0c2f8     24 04 B0 FD | 	call	#_getvar
0c2fc     37 00 00 FF 
0c300     44 E4 05 F1 | 	add	objptr, ##28228
0c304     F2 30 02 FB | 	rdlong	local06, objptr
0c308     01 30 06 F1 | 	add	local06, #1
0c30c     F2 30 62 FC | 	wrlong	local06, objptr
0c310     37 00 00 FF 
0c314     44 E4 85 F1 | 	sub	objptr, ##28228
0c318                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0c318     01 FA 55 F2 | 	cmps	result1, #1 wc
0c31c     B0 00 90 3D |  if_ae	jmp	#LR__1004
0c320     A8 00 90 FD | 	jmp	#LR__1003
0c324                 | LR__1001
0c324     37 00 00 FF 
0c328     44 E4 05 F1 | 	add	objptr, ##28228
0c32c     F2 30 02 FB | 	rdlong	local06, objptr
0c330     01 30 06 F1 | 	add	local06, #1
0c334     F2 30 62 FC | 	wrlong	local06, objptr
0c338     37 00 00 FF 
0c33c     44 E4 85 F1 | 	sub	objptr, ##28228
0c340     20 F1 BF FD | 	call	#_expr
0c344                 | '     ct+=1
0c344                 | '     err=expr() : if err>0 then return err 
0c344     01 FA 55 F2 | 	cmps	result1, #1 wc
0c348     84 00 90 3D |  if_ae	jmp	#LR__1004
0c34c                 | '     if lparts(ct).token=token_rpar then ct+=1
0c34c     37 00 00 FF 
0c350     44 E4 05 F1 | 	add	objptr, ##28228
0c354     F2 3A 02 FB | 	rdlong	local11, objptr
0c358     03 3A 66 F0 | 	shl	local11, #3
0c35c     02 00 00 FF 
0c360     38 E4 85 F1 | 	sub	objptr, ##1080
0c364     F2 3A 02 F1 | 	add	local11, objptr
0c368     04 3A 06 F1 | 	add	local11, #4
0c36c     1D 3B 02 FB | 	rdlong	local11, local11
0c370     14 3A 0E F2 | 	cmp	local11, #20 wz
0c374     35 00 00 FF 
0c378     0C E4 85 F1 | 	sub	objptr, ##27148
0c37c     4C 00 90 5D |  if_ne	jmp	#LR__1003
0c380     37 00 00 FF 
0c384     44 E4 05 F1 | 	add	objptr, ##28228
0c388     F2 30 02 FB | 	rdlong	local06, objptr
0c38c     01 30 06 F1 | 	add	local06, #1
0c390     F2 30 62 FC | 	wrlong	local06, objptr
0c394     37 00 00 FF 
0c398     44 E4 85 F1 | 	sub	objptr, ##28228
0c39c     2C 00 90 FD | 	jmp	#LR__1003
0c3a0                 | LR__1002
0c3a0     16 13 02 F6 | 	mov	arg01, local04
0c3a4     34 00 B0 FD | 	call	#_getfun
0c3a8     37 00 00 FF 
0c3ac     44 E4 05 F1 | 	add	objptr, ##28228
0c3b0     F2 30 02 FB | 	rdlong	local06, objptr
0c3b4     01 30 06 F1 | 	add	local06, #1
0c3b8     F2 30 62 FC | 	wrlong	local06, objptr
0c3bc     37 00 00 FF 
0c3c0     44 E4 85 F1 | 	sub	objptr, ##28228
0c3c4                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0c3c4     01 FA 55 F2 | 	cmps	result1, #1 wc
0c3c8     04 00 90 3D |  if_ae	jmp	#LR__1004
0c3cc                 | LR__1003
0c3cc                 | ' return 0  
0c3cc     00 FA 05 F6 | 	mov	result1, #0
0c3d0                 | LR__1004
0c3d0     A7 F0 03 F6 | 	mov	ptra, fp
0c3d4     B2 00 A0 FD | 	call	#popregs_
0c3d8                 | _getvalue_ret
0c3d8     2D 00 64 FD | 	ret
0c3dc                 | 
0c3dc                 | ' 
0c3dc                 | ' ' Get a function result 
0c3dc                 | ' 
0c3dc                 | ' function getfun(m as integer) as ulong
0c3dc                 | _getfun
0c3dc     0F 4A 05 F6 | 	mov	COUNT_, #15
0c3e0     A8 00 A0 FD | 	call	#pushregs_
0c3e4                 | _getfun_enter
0c3e4     09 2D 02 F6 | 	mov	local04, arg01
0c3e8     37 00 00 FF 
0c3ec     44 E4 05 F1 | 	add	objptr, ##28228
0c3f0     F2 2E 02 FB | 	rdlong	local05, objptr
0c3f4     17 31 02 F6 | 	mov	local06, local05
0c3f8     00 32 06 F6 | 	mov	local07, #0
0c3fc                 | ' oldct=ct
0c3fc                 | ' numpar=0
0c3fc                 | ' if lparts(ct+1).token=token_lpar then
0c3fc     01 2E 06 F1 | 	add	local05, #1
0c400     03 2E 66 F0 | 	shl	local05, #3
0c404     02 00 00 FF 
0c408     38 E4 85 F1 | 	sub	objptr, ##1080
0c40c     F2 2E 02 F1 | 	add	local05, objptr
0c410     04 2E 06 F1 | 	add	local05, #4
0c414     17 2F 02 FB | 	rdlong	local05, local05
0c418     15 2E 0E F2 | 	cmp	local05, #21 wz
0c41c     35 00 00 FF 
0c420     0C E4 85 F1 | 	sub	objptr, ##27148
0c424     54 01 90 5D |  if_ne	jmp	#LR__1014
0c428     37 00 00 FF 
0c42c     44 E4 05 F1 | 	add	objptr, ##28228
0c430     F2 34 02 FB | 	rdlong	local08, objptr
0c434     01 34 06 F1 | 	add	local08, #1
0c438     F2 34 62 FC | 	wrlong	local08, objptr
0c43c     37 00 00 FF 
0c440     44 E4 85 F1 | 	sub	objptr, ##28228
0c444                 | '   ct+=1 											' omit this lpar, this is for expr list
0c444                 | '   do
0c444                 | LR__1010
0c444     37 00 00 FF 
0c448     44 E4 05 F1 | 	add	objptr, ##28228
0c44c     F2 2E 02 FB | 	rdlong	local05, objptr
0c450     01 2E 06 F1 | 	add	local05, #1
0c454     F2 2E 62 FC | 	wrlong	local05, objptr
0c458                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c458                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c458     03 2E 66 F0 | 	shl	local05, #3
0c45c     02 00 00 FF 
0c460     38 E4 85 F1 | 	sub	objptr, ##1080
0c464     F2 2E 02 F1 | 	add	local05, objptr
0c468     04 2E 06 F1 | 	add	local05, #4
0c46c     17 35 02 FB | 	rdlong	local08, local05
0c470     15 34 0E F2 | 	cmp	local08, #21 wz
0c474     35 00 00 FF 
0c478     0C E4 85 F1 | 	sub	objptr, ##27148
0c47c     44 00 90 5D |  if_ne	jmp	#LR__1011
0c480     37 00 00 FF 
0c484     44 E4 05 F1 | 	add	objptr, ##28228
0c488     F2 34 02 FB | 	rdlong	local08, objptr
0c48c     01 34 06 F1 | 	add	local08, #1
0c490     F2 34 62 FC | 	wrlong	local08, objptr
0c494     37 00 00 FF 
0c498     44 E4 85 F1 | 	sub	objptr, ##28228
0c49c     C4 EF BF FD | 	call	#_expr
0c4a0     FD 36 02 F6 | 	mov	local09, result1
0c4a4     37 00 00 FF 
0c4a8     44 E4 05 F1 | 	add	objptr, ##28228
0c4ac     F2 34 02 FB | 	rdlong	local08, objptr
0c4b0     01 34 06 F1 | 	add	local08, #1
0c4b4     F2 34 62 FC | 	wrlong	local08, objptr
0c4b8     37 00 00 FF 
0c4bc     44 E4 85 F1 | 	sub	objptr, ##28228
0c4c0     08 00 90 FD | 	jmp	#LR__1012
0c4c4                 | LR__1011
0c4c4     9C EF BF FD | 	call	#_expr
0c4c8     FD 36 02 F6 | 	mov	local09, result1
0c4cc                 | LR__1012
0c4cc                 | '     if err>0 then return err
0c4cc     01 36 16 F2 | 	cmp	local09, #1 wc
0c4d0     1B FB 01 36 |  if_ae	mov	result1, local09
0c4d4     3C 02 90 3D |  if_ae	jmp	#LR__1016
0c4d8     01 32 06 F1 | 	add	local07, #1
0c4dc     37 00 00 FF 
0c4e0     44 E4 05 F1 | 	add	objptr, ##28228
0c4e4     F2 2E 02 FB | 	rdlong	local05, objptr
0c4e8     03 2E 66 F0 | 	shl	local05, #3
0c4ec     02 00 00 FF 
0c4f0     38 E4 85 F1 | 	sub	objptr, ##1080
0c4f4     F2 2E 02 F1 | 	add	local05, objptr
0c4f8     04 2E 06 F1 | 	add	local05, #4
0c4fc     17 37 02 FB | 	rdlong	local09, local05
0c500     14 36 0E F2 | 	cmp	local09, #20 wz
0c504     35 00 00 FF 
0c508     0C E4 85 F1 | 	sub	objptr, ##27148
0c50c     34 00 90 AD |  if_e	jmp	#LR__1013
0c510     37 00 00 FF 
0c514     44 E4 05 F1 | 	add	objptr, ##28228
0c518     F2 36 02 FB | 	rdlong	local09, objptr
0c51c     03 36 66 F0 | 	shl	local09, #3
0c520     02 00 00 FF 
0c524     38 E4 85 F1 | 	sub	objptr, ##1080
0c528     F2 36 02 F1 | 	add	local09, objptr
0c52c     04 36 06 F1 | 	add	local09, #4
0c530     1B 37 02 FB | 	rdlong	local09, local09
0c534     FE 37 0E F2 | 	cmp	local09, #510 wz
0c538     35 00 00 FF 
0c53c     0C E4 85 F1 | 	sub	objptr, ##27148
0c540     00 FF 9F 5D |  if_ne	jmp	#LR__1010
0c544                 | LR__1013
0c544                 | '   if lparts(ct).token=token_end then return 14
0c544     37 00 00 FF 
0c548     44 E4 05 F1 | 	add	objptr, ##28228
0c54c     F2 2E 02 FB | 	rdlong	local05, objptr
0c550     03 2E 66 F0 | 	shl	local05, #3
0c554     02 00 00 FF 
0c558     38 E4 85 F1 | 	sub	objptr, ##1080
0c55c     F2 2E 02 F1 | 	add	local05, objptr
0c560     04 2E 06 F1 | 	add	local05, #4
0c564     17 37 02 FB | 	rdlong	local09, local05
0c568     FE 37 0E F2 | 	cmp	local09, #510 wz
0c56c     35 00 00 FF 
0c570     0C E4 85 F1 | 	sub	objptr, ##27148
0c574     0E FA 05 A6 |  if_e	mov	result1, #14
0c578     98 01 90 AD |  if_e	jmp	#LR__1016
0c57c                 | LR__1014
0c57c     19 27 02 F6 | 	mov	local01, local07
0c580     03 30 66 F0 | 	shl	local06, #3
0c584     35 00 00 FF 
0c588     0C E4 05 F1 | 	add	objptr, ##27148
0c58c     F2 30 02 F1 | 	add	local06, objptr
0c590     04 30 06 F1 | 	add	local06, #4
0c594     18 2B 02 FB | 	rdlong	local03, local06
0c598     13 35 02 F6 | 	mov	local08, local01
0c59c     14 39 02 F6 | 	mov	local10, local02
0c5a0     15 3B 02 F6 | 	mov	local11, local03
0c5a4     15 00 00 FF 
0c5a8     70 E4 05 F1 | 	add	objptr, ##10864
0c5ac     F2 3C 02 FB | 	rdlong	local12, objptr
0c5b0     1E 3F 02 F6 | 	mov	local13, local12
0c5b4     01 3E 66 F0 | 	shl	local13, #1
0c5b8     1E 3F 02 F1 | 	add	local13, local12
0c5bc     02 3E 66 F0 | 	shl	local13, #2
0c5c0     03 00 00 FF 
0c5c4     00 E4 85 F1 | 	sub	objptr, ##1536
0c5c8     F2 3E 02 F1 | 	add	local13, objptr
0c5cc     1F 35 62 FC | 	wrlong	local08, local13
0c5d0     03 00 00 FF 
0c5d4     00 E4 05 F1 | 	add	objptr, ##1536
0c5d8     F2 34 02 FB | 	rdlong	local08, objptr
0c5dc     1A 41 02 F6 | 	mov	local14, local08
0c5e0     01 40 66 F0 | 	shl	local14, #1
0c5e4     1A 41 02 F1 | 	add	local14, local08
0c5e8     02 40 66 F0 | 	shl	local14, #2
0c5ec     03 00 00 FF 
0c5f0     00 E4 85 F1 | 	sub	objptr, ##1536
0c5f4     F2 40 02 F1 | 	add	local14, objptr
0c5f8     04 40 06 F1 | 	add	local14, #4
0c5fc     20 39 62 FC | 	wrlong	local10, local14
0c600     03 00 00 FF 
0c604     00 E4 05 F1 | 	add	objptr, ##1536
0c608     F2 34 02 FB | 	rdlong	local08, objptr
0c60c     1A 43 02 F6 | 	mov	local15, local08
0c610     01 42 66 F0 | 	shl	local15, #1
0c614     1A 43 02 F1 | 	add	local15, local08
0c618     02 42 66 F0 | 	shl	local15, #2
0c61c     03 00 00 FF 
0c620     00 E4 85 F1 | 	sub	objptr, ##1536
0c624     F2 42 02 F1 | 	add	local15, objptr
0c628     08 42 06 F1 | 	add	local15, #8
0c62c     21 3B 62 FC | 	wrlong	local11, local15
0c630     03 00 00 FF 
0c634     00 E4 05 F1 | 	add	objptr, ##1536
0c638     F2 34 02 FB | 	rdlong	local08, objptr
0c63c     01 34 06 F1 | 	add	local08, #1
0c640     F2 34 62 FC | 	wrlong	local08, objptr
0c644     4A 00 00 FF 
0c648     7C E4 85 F1 | 	sub	objptr, ##38012
0c64c                 | ' t2.result.uresult=numpar
0c64c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0c64c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c64c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c64c     FF FF 7F FF 
0c650     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c654     B8 00 90 5D |  if_ne	jmp	#LR__1015
0c658     15 2A 06 F6 | 	mov	local03, #21
0c65c     13 35 02 F6 | 	mov	local08, local01
0c660     14 39 02 F6 | 	mov	local10, local02
0c664     15 3B 02 F6 | 	mov	local11, local03
0c668     4A 00 00 FF 
0c66c     7C E4 05 F1 | 	add	objptr, ##38012
0c670     F2 3C 02 FB | 	rdlong	local12, objptr
0c674     1E 3F 02 F6 | 	mov	local13, local12
0c678     01 3E 66 F0 | 	shl	local13, #1
0c67c     1E 3F 02 F1 | 	add	local13, local12
0c680     02 3E 66 F0 | 	shl	local13, #2
0c684     03 00 00 FF 
0c688     00 E4 85 F1 | 	sub	objptr, ##1536
0c68c     F2 3E 02 F1 | 	add	local13, objptr
0c690     1F 35 62 FC | 	wrlong	local08, local13
0c694     03 00 00 FF 
0c698     00 E4 05 F1 | 	add	objptr, ##1536
0c69c     F2 42 02 FB | 	rdlong	local15, objptr
0c6a0     21 41 02 F6 | 	mov	local14, local15
0c6a4     01 40 66 F0 | 	shl	local14, #1
0c6a8     21 41 02 F1 | 	add	local14, local15
0c6ac     02 40 66 F0 | 	shl	local14, #2
0c6b0     03 00 00 FF 
0c6b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c6b8     F2 40 02 F1 | 	add	local14, objptr
0c6bc     04 40 06 F1 | 	add	local14, #4
0c6c0     20 39 62 FC | 	wrlong	local10, local14
0c6c4     03 00 00 FF 
0c6c8     00 E4 05 F1 | 	add	objptr, ##1536
0c6cc     F2 40 02 FB | 	rdlong	local14, objptr
0c6d0     20 43 02 F6 | 	mov	local15, local14
0c6d4     01 42 66 F0 | 	shl	local15, #1
0c6d8     20 43 02 F1 | 	add	local15, local14
0c6dc     02 42 66 F0 | 	shl	local15, #2
0c6e0     03 00 00 FF 
0c6e4     00 E4 85 F1 | 	sub	objptr, ##1536
0c6e8     F2 42 02 F1 | 	add	local15, objptr
0c6ec     08 42 06 F1 | 	add	local15, #8
0c6f0     21 3B 62 FC | 	wrlong	local11, local15
0c6f4     03 00 00 FF 
0c6f8     00 E4 05 F1 | 	add	objptr, ##1536
0c6fc     F2 34 02 FB | 	rdlong	local08, objptr
0c700     01 34 06 F1 | 	add	local08, #1
0c704     F2 34 62 FC | 	wrlong	local08, objptr
0c708     4A 00 00 FF 
0c70c     7C E4 85 F1 | 	sub	objptr, ##38012
0c710                 | LR__1015
0c710                 | ' return 0
0c710     00 FA 05 F6 | 	mov	result1, #0
0c714                 | LR__1016
0c714     A7 F0 03 F6 | 	mov	ptra, fp
0c718     B2 00 A0 FD | 	call	#popregs_
0c71c                 | _getfun_ret
0c71c     2D 00 64 FD | 	ret
0c720                 | 
0c720                 | '   
0c720                 | '   
0c720                 | ' function getvar(m as integer) as ulong
0c720                 | _getvar
0c720     11 4A 05 F6 | 	mov	COUNT_, #17
0c724     A8 00 A0 FD | 	call	#pushregs_
0c728                 | _getvar_enter
0c728     09 2D 02 F6 | 	mov	local04, arg01
0c72c     37 00 00 FF 
0c730     44 E4 05 F1 | 	add	objptr, ##28228
0c734     F2 2E 02 FB | 	rdlong	local05, objptr
0c738     03 2E 66 F0 | 	shl	local05, #3
0c73c     02 00 00 FF 
0c740     38 E4 85 F1 | 	sub	objptr, ##1080
0c744     F2 2E 02 F1 | 	add	local05, objptr
0c748     17 31 02 FB | 	rdlong	local06, local05
0c74c     01 32 66 F6 | 	neg	local07, #1
0c750                 | ' 
0c750                 | ' varname$=lparts(ct).part$
0c750                 | ' j=-1
0c750                 | ' 
0c750                 | ' for i=0 to varnum-1
0c750     00 34 06 F6 | 	mov	local08, #0
0c754     04 E4 85 F1 | 	sub	objptr, #4
0c758     F2 36 02 FB | 	rdlong	local09, objptr
0c75c     35 00 00 FF 
0c760     08 E4 85 F1 | 	sub	objptr, ##27144
0c764                 | LR__1020
0c764     1B 35 52 F2 | 	cmps	local08, local09 wc
0c768     38 00 90 3D |  if_ae	jmp	#LR__1021
0c76c                 | '   if variables(i).name=varname$ then j=i : exit
0c76c     1A 2F 02 F6 | 	mov	local05, local08
0c770     04 2E 66 F0 | 	shl	local05, #4
0c774     14 00 00 FF 
0c778     F8 E5 05 F1 | 	add	objptr, ##10744
0c77c     F2 2E 02 F1 | 	add	local05, objptr
0c780     17 13 02 FB | 	rdlong	arg01, local05
0c784     18 15 02 F6 | 	mov	arg02, local06
0c788     14 00 00 FF 
0c78c     F8 E5 85 F1 | 	sub	objptr, ##10744
0c790     0C 92 B1 FD | 	call	#__system___string_cmp
0c794     00 FA 0D F2 | 	cmp	result1, #0 wz
0c798     1A 33 02 A6 |  if_e	mov	local07, local08
0c79c     01 34 06 51 |  if_ne	add	local08, #1
0c7a0     C0 FF 9F 5D |  if_ne	jmp	#LR__1020
0c7a4                 | LR__1021
0c7a4                 | ' if  j=-1 andalso varnum<maxvars then   
0c7a4     FF FF 7F FF 
0c7a8     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0c7ac     A8 00 90 5D |  if_ne	jmp	#LR__1022
0c7b0     35 00 00 FF 
0c7b4     08 E4 05 F1 | 	add	objptr, ##27144
0c7b8     F2 36 02 FB | 	rdlong	local09, objptr
0c7bc     35 00 00 FF 
0c7c0     08 E4 85 F1 | 	sub	objptr, ##27144
0c7c4     02 00 00 FF 
0c7c8     00 36 56 F2 | 	cmps	local09, ##1024 wc
0c7cc     88 00 90 3D |  if_ae	jmp	#LR__1022
0c7d0     35 00 00 FF 
0c7d4     08 E4 05 F1 | 	add	objptr, ##27144
0c7d8     F2 2E 02 FB | 	rdlong	local05, objptr
0c7dc     04 2E 66 F0 | 	shl	local05, #4
0c7e0     20 00 00 FF 
0c7e4     10 E4 85 F1 | 	sub	objptr, ##16400
0c7e8     F2 2E 02 F1 | 	add	local05, objptr
0c7ec     17 31 62 FC | 	wrlong	local06, local05
0c7f0     20 00 00 FF 
0c7f4     10 E4 05 F1 | 	add	objptr, ##16400
0c7f8     F2 2E 02 FB | 	rdlong	local05, objptr
0c7fc     04 2E 66 F0 | 	shl	local05, #4
0c800     20 00 00 FF 
0c804     10 E4 85 F1 | 	sub	objptr, ##16400
0c808     F2 2E 02 F1 | 	add	local05, objptr
0c80c     04 2E 06 F1 | 	add	local05, #4
0c810     17 01 68 FC | 	wrlong	#0, local05
0c814     20 00 00 FF 
0c818     10 E4 05 F1 | 	add	objptr, ##16400
0c81c     F2 2E 02 FB | 	rdlong	local05, objptr
0c820     04 2E 66 F0 | 	shl	local05, #4
0c824     20 00 00 FF 
0c828     10 E4 85 F1 | 	sub	objptr, ##16400
0c82c     F2 2E 02 F1 | 	add	local05, objptr
0c830     0C 2E 06 F1 | 	add	local05, #12
0c834     17 39 68 FC | 	wrlong	#28, local05
0c838     20 00 00 FF 
0c83c     10 E4 05 F1 | 	add	objptr, ##16400
0c840     F2 36 02 FB | 	rdlong	local09, objptr
0c844     1B 33 02 F6 | 	mov	local07, local09
0c848     01 36 06 F1 | 	add	local09, #1
0c84c     F2 36 62 FC | 	wrlong	local09, objptr
0c850     35 00 00 FF 
0c854     08 E4 85 F1 | 	sub	objptr, ##27144
0c858                 | LR__1022
0c858     00 36 06 F6 | 	mov	local09, #0
0c85c                 | ' numpar=0
0c85c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0c85c     37 00 00 FF 
0c860     44 E4 05 F1 | 	add	objptr, ##28228
0c864     F2 2E 02 FB | 	rdlong	local05, objptr
0c868     01 2E 06 F1 | 	add	local05, #1
0c86c     03 2E 66 F0 | 	shl	local05, #3
0c870     02 00 00 FF 
0c874     38 E4 85 F1 | 	sub	objptr, ##1080
0c878     F2 2E 02 F1 | 	add	local05, objptr
0c87c     04 2E 06 F1 | 	add	local05, #4
0c880     17 35 02 FB | 	rdlong	local08, local05
0c884     15 34 0E F2 | 	cmp	local08, #21 wz
0c888     35 00 00 FF 
0c88c     0C E4 85 F1 | 	sub	objptr, ##27148
0c890     54 01 90 5D |  if_ne	jmp	#LR__1027
0c894     37 00 00 FF 
0c898     44 E4 05 F1 | 	add	objptr, ##28228
0c89c     F2 38 02 FB | 	rdlong	local10, objptr
0c8a0     01 38 06 F1 | 	add	local10, #1
0c8a4     F2 38 62 FC | 	wrlong	local10, objptr
0c8a8     37 00 00 FF 
0c8ac     44 E4 85 F1 | 	sub	objptr, ##28228
0c8b0                 | '   ct+=1 											' omit this lpar, this is for expr list
0c8b0                 | '   do
0c8b0                 | LR__1023
0c8b0     37 00 00 FF 
0c8b4     44 E4 05 F1 | 	add	objptr, ##28228
0c8b8     F2 2E 02 FB | 	rdlong	local05, objptr
0c8bc     01 2E 06 F1 | 	add	local05, #1
0c8c0     F2 2E 62 FC | 	wrlong	local05, objptr
0c8c4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c8c4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c8c4     03 2E 66 F0 | 	shl	local05, #3
0c8c8     02 00 00 FF 
0c8cc     38 E4 85 F1 | 	sub	objptr, ##1080
0c8d0     F2 2E 02 F1 | 	add	local05, objptr
0c8d4     04 2E 06 F1 | 	add	local05, #4
0c8d8     17 39 02 FB | 	rdlong	local10, local05
0c8dc     15 38 0E F2 | 	cmp	local10, #21 wz
0c8e0     35 00 00 FF 
0c8e4     0C E4 85 F1 | 	sub	objptr, ##27148
0c8e8     44 00 90 5D |  if_ne	jmp	#LR__1024
0c8ec     37 00 00 FF 
0c8f0     44 E4 05 F1 | 	add	objptr, ##28228
0c8f4     F2 38 02 FB | 	rdlong	local10, objptr
0c8f8     01 38 06 F1 | 	add	local10, #1
0c8fc     F2 38 62 FC | 	wrlong	local10, objptr
0c900     37 00 00 FF 
0c904     44 E4 85 F1 | 	sub	objptr, ##28228
0c908     58 EB BF FD | 	call	#_expr
0c90c     FD 3A 02 F6 | 	mov	local11, result1
0c910     37 00 00 FF 
0c914     44 E4 05 F1 | 	add	objptr, ##28228
0c918     F2 38 02 FB | 	rdlong	local10, objptr
0c91c     01 38 06 F1 | 	add	local10, #1
0c920     F2 38 62 FC | 	wrlong	local10, objptr
0c924     37 00 00 FF 
0c928     44 E4 85 F1 | 	sub	objptr, ##28228
0c92c     08 00 90 FD | 	jmp	#LR__1025
0c930                 | LR__1024
0c930     30 EB BF FD | 	call	#_expr
0c934     FD 3A 02 F6 | 	mov	local11, result1
0c938                 | LR__1025
0c938                 | '     if err>0 then return err
0c938     01 3A 56 F2 | 	cmps	local11, #1 wc
0c93c     1D FB 01 36 |  if_ae	mov	result1, local11
0c940     2C 02 90 3D |  if_ae	jmp	#LR__1029
0c944     01 36 06 F1 | 	add	local09, #1
0c948     37 00 00 FF 
0c94c     44 E4 05 F1 | 	add	objptr, ##28228
0c950     F2 2E 02 FB | 	rdlong	local05, objptr
0c954     03 2E 66 F0 | 	shl	local05, #3
0c958     02 00 00 FF 
0c95c     38 E4 85 F1 | 	sub	objptr, ##1080
0c960     F2 2E 02 F1 | 	add	local05, objptr
0c964     04 2E 06 F1 | 	add	local05, #4
0c968     17 3B 02 FB | 	rdlong	local11, local05
0c96c     14 3A 0E F2 | 	cmp	local11, #20 wz
0c970     35 00 00 FF 
0c974     0C E4 85 F1 | 	sub	objptr, ##27148
0c978     34 00 90 AD |  if_e	jmp	#LR__1026
0c97c     37 00 00 FF 
0c980     44 E4 05 F1 | 	add	objptr, ##28228
0c984     F2 3A 02 FB | 	rdlong	local11, objptr
0c988     03 3A 66 F0 | 	shl	local11, #3
0c98c     02 00 00 FF 
0c990     38 E4 85 F1 | 	sub	objptr, ##1080
0c994     F2 3A 02 F1 | 	add	local11, objptr
0c998     04 3A 06 F1 | 	add	local11, #4
0c99c     1D 3B 02 FB | 	rdlong	local11, local11
0c9a0     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c9a4     35 00 00 FF 
0c9a8     0C E4 85 F1 | 	sub	objptr, ##27148
0c9ac     00 FF 9F 5D |  if_ne	jmp	#LR__1023
0c9b0                 | LR__1026
0c9b0                 | '     if lparts(ct).token=token_end then return 14
0c9b0     37 00 00 FF 
0c9b4     44 E4 05 F1 | 	add	objptr, ##28228
0c9b8     F2 2E 02 FB | 	rdlong	local05, objptr
0c9bc     03 2E 66 F0 | 	shl	local05, #3
0c9c0     02 00 00 FF 
0c9c4     38 E4 85 F1 | 	sub	objptr, ##1080
0c9c8     F2 2E 02 F1 | 	add	local05, objptr
0c9cc     04 2E 06 F1 | 	add	local05, #4
0c9d0     17 3B 02 FB | 	rdlong	local11, local05
0c9d4     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c9d8     35 00 00 FF 
0c9dc     0C E4 85 F1 | 	sub	objptr, ##27148
0c9e0     0E FA 05 A6 |  if_e	mov	result1, #14
0c9e4     88 01 90 AD |  if_e	jmp	#LR__1029
0c9e8                 | LR__1027
0c9e8     1B 29 02 F6 | 	mov	local02, local09
0c9ec     11 2A 06 F6 | 	mov	local03, #17
0c9f0     19 27 02 F6 | 	mov	local01, local07
0c9f4     13 39 02 F6 | 	mov	local10, local01
0c9f8     14 3D 02 F6 | 	mov	local12, local02
0c9fc     15 3F 02 F6 | 	mov	local13, local03
0ca00     4A 00 00 FF 
0ca04     7C E4 05 F1 | 	add	objptr, ##38012
0ca08     F2 40 02 FB | 	rdlong	local14, objptr
0ca0c     20 43 02 F6 | 	mov	local15, local14
0ca10     01 42 66 F0 | 	shl	local15, #1
0ca14     20 43 02 F1 | 	add	local15, local14
0ca18     02 42 66 F0 | 	shl	local15, #2
0ca1c     03 00 00 FF 
0ca20     00 E4 85 F1 | 	sub	objptr, ##1536
0ca24     F2 42 02 F1 | 	add	local15, objptr
0ca28     21 39 62 FC | 	wrlong	local10, local15
0ca2c     03 00 00 FF 
0ca30     00 E4 05 F1 | 	add	objptr, ##1536
0ca34     F2 38 02 FB | 	rdlong	local10, objptr
0ca38     1C 45 02 F6 | 	mov	local16, local10
0ca3c     01 44 66 F0 | 	shl	local16, #1
0ca40     1C 45 02 F1 | 	add	local16, local10
0ca44     02 44 66 F0 | 	shl	local16, #2
0ca48     03 00 00 FF 
0ca4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca50     F2 44 02 F1 | 	add	local16, objptr
0ca54     04 44 06 F1 | 	add	local16, #4
0ca58     22 3D 62 FC | 	wrlong	local12, local16
0ca5c     03 00 00 FF 
0ca60     00 E4 05 F1 | 	add	objptr, ##1536
0ca64     F2 38 02 FB | 	rdlong	local10, objptr
0ca68     1C 47 02 F6 | 	mov	local17, local10
0ca6c     01 46 66 F0 | 	shl	local17, #1
0ca70     1C 47 02 F1 | 	add	local17, local10
0ca74     02 46 66 F0 | 	shl	local17, #2
0ca78     03 00 00 FF 
0ca7c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca80     F2 46 02 F1 | 	add	local17, objptr
0ca84     08 46 06 F1 | 	add	local17, #8
0ca88     23 3F 62 FC | 	wrlong	local13, local17
0ca8c     03 00 00 FF 
0ca90     00 E4 05 F1 | 	add	objptr, ##1536
0ca94     F2 38 02 FB | 	rdlong	local10, objptr
0ca98     01 38 06 F1 | 	add	local10, #1
0ca9c     F2 38 62 FC | 	wrlong	local10, objptr
0caa0     4A 00 00 FF 
0caa4     7C E4 85 F1 | 	sub	objptr, ##38012
0caa8                 | ' t2.result.twowords(1)=numpar
0caa8                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0caa8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0caa8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0caa8     FF FF 7F FF 
0caac     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0cab0     B8 00 90 5D |  if_ne	jmp	#LR__1028
0cab4     15 2A 06 F6 | 	mov	local03, #21
0cab8     13 39 02 F6 | 	mov	local10, local01
0cabc     14 3D 02 F6 | 	mov	local12, local02
0cac0     15 3F 02 F6 | 	mov	local13, local03
0cac4     4A 00 00 FF 
0cac8     7C E4 05 F1 | 	add	objptr, ##38012
0cacc     F2 40 02 FB | 	rdlong	local14, objptr
0cad0     20 43 02 F6 | 	mov	local15, local14
0cad4     01 42 66 F0 | 	shl	local15, #1
0cad8     20 43 02 F1 | 	add	local15, local14
0cadc     02 42 66 F0 | 	shl	local15, #2
0cae0     03 00 00 FF 
0cae4     00 E4 85 F1 | 	sub	objptr, ##1536
0cae8     F2 42 02 F1 | 	add	local15, objptr
0caec     21 39 62 FC | 	wrlong	local10, local15
0caf0     03 00 00 FF 
0caf4     00 E4 05 F1 | 	add	objptr, ##1536
0caf8     F2 46 02 FB | 	rdlong	local17, objptr
0cafc     23 45 02 F6 | 	mov	local16, local17
0cb00     01 44 66 F0 | 	shl	local16, #1
0cb04     23 45 02 F1 | 	add	local16, local17
0cb08     02 44 66 F0 | 	shl	local16, #2
0cb0c     03 00 00 FF 
0cb10     00 E4 85 F1 | 	sub	objptr, ##1536
0cb14     F2 44 02 F1 | 	add	local16, objptr
0cb18     04 44 06 F1 | 	add	local16, #4
0cb1c     22 3D 62 FC | 	wrlong	local12, local16
0cb20     03 00 00 FF 
0cb24     00 E4 05 F1 | 	add	objptr, ##1536
0cb28     F2 44 02 FB | 	rdlong	local16, objptr
0cb2c     22 47 02 F6 | 	mov	local17, local16
0cb30     01 46 66 F0 | 	shl	local17, #1
0cb34     22 47 02 F1 | 	add	local17, local16
0cb38     02 46 66 F0 | 	shl	local17, #2
0cb3c     03 00 00 FF 
0cb40     00 E4 85 F1 | 	sub	objptr, ##1536
0cb44     F2 46 02 F1 | 	add	local17, objptr
0cb48     08 46 06 F1 | 	add	local17, #8
0cb4c     23 3F 62 FC | 	wrlong	local13, local17
0cb50     03 00 00 FF 
0cb54     00 E4 05 F1 | 	add	objptr, ##1536
0cb58     F2 38 02 FB | 	rdlong	local10, objptr
0cb5c     01 38 06 F1 | 	add	local10, #1
0cb60     F2 38 62 FC | 	wrlong	local10, objptr
0cb64     4A 00 00 FF 
0cb68     7C E4 85 F1 | 	sub	objptr, ##38012
0cb6c                 | LR__1028
0cb6c                 | ' return 0
0cb6c     00 FA 05 F6 | 	mov	result1, #0
0cb70                 | LR__1029
0cb70     A7 F0 03 F6 | 	mov	ptra, fp
0cb74     B2 00 A0 FD | 	call	#popregs_
0cb78                 | _getvar_ret
0cb78     2D 00 64 FD | 	ret
0cb7c                 | 
0cb7c                 | ' 
0cb7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0cb7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' 
0cb7c                 | ' 
0cb7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' '                                                                                                                                       -
0cb7c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0cb7c                 | ' '                                                                                                                                       -
0cb7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' 
0cb7c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0cb7c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0cb7c                 | ' 
0cb7c                 | ' function execute_line (astart=0 as integer) as integer
0cb7c                 | _execute_line
0cb7c     04 4A 05 F6 | 	mov	COUNT_, #4
0cb80     A8 00 A0 FD | 	call	#pushregs_
0cb84     50 00 00 FF 
0cb88     BC E4 05 F1 | 	add	objptr, ##41148
0cb8c     F2 00 68 FC | 	wrlong	#0, objptr
0cb90                 | ' 
0cb90                 | ' runptr2=0
0cb90                 | ' for lineptr_e=astart to lineptr-1
0cb90     06 00 00 FF 
0cb94     3C E4 85 F1 | 	sub	objptr, ##3132
0cb98     F2 12 62 FC | 	wrlong	arg01, objptr
0cb9c     04 E4 85 F1 | 	sub	objptr, #4
0cba0     F2 26 02 FB | 	rdlong	local01, objptr
0cba4     4A 00 00 FF 
0cba8     7C E4 85 F1 | 	sub	objptr, ##38012
0cbac                 | LR__1030
0cbac     4A 00 00 FF 
0cbb0     80 E4 05 F1 | 	add	objptr, ##38016
0cbb4     F2 FA 01 FB | 	rdlong	result1, objptr
0cbb8     4A 00 00 FF 
0cbbc     80 E4 85 F1 | 	sub	objptr, ##38016
0cbc0     13 FB 51 F2 | 	cmps	result1, local01 wc
0cbc4     98 00 90 3D |  if_ae	jmp	#LR__1031
0cbc8     4A 00 00 FF 
0cbcc     80 E4 05 F1 | 	add	objptr, ##38016
0cbd0     F2 FA 01 FB | 	rdlong	result1, objptr
0cbd4     FD 28 02 F6 | 	mov	local02, result1
0cbd8     01 28 66 F0 | 	shl	local02, #1
0cbdc     FD 28 02 F1 | 	add	local02, result1
0cbe0     02 28 66 F0 | 	shl	local02, #2
0cbe4     03 00 00 FF 
0cbe8     04 E4 85 F1 | 	sub	objptr, ##1540
0cbec     F2 28 02 F1 | 	add	local02, objptr
0cbf0     08 28 06 F1 | 	add	local02, #8
0cbf4     14 29 02 FB | 	rdlong	local02, local02
0cbf8     14 29 E2 F8 | 	getbyte	local02, local02, #0
0cbfc     02 28 66 F0 | 	shl	local02, #2
0cc00     04 00 00 FF 
0cc04     1C E4 85 F1 | 	sub	objptr, ##2076
0cc08     F2 28 02 F1 | 	add	local02, objptr
0cc0c     14 29 02 FB | 	rdlong	local02, local02
0cc10     14 2B 02 F6 | 	mov	local03, local02
0cc14     13 28 46 F7 | 	zerox	local02, #19
0cc18     14 2A 46 F0 | 	shr	local03, #20
0cc1c     02 2A 66 F0 | 	shl	local03, #2
0cc20     ED 2A 02 F1 | 	add	local03, __methods__
0cc24     15 2B 02 FB | 	rdlong	local03, local03
0cc28     43 00 00 FF 
0cc2c     60 E4 85 F1 | 	sub	objptr, ##34400
0cc30     F2 2C 02 F6 | 	mov	local04, objptr
0cc34     14 E5 01 F6 | 	mov	objptr, local02
0cc38     2D 2A 62 FD | 	call	local03
0cc3c     16 E5 01 F6 | 	mov	objptr, local04
0cc40     4A 00 00 FF 
0cc44     80 E4 05 F1 | 	add	objptr, ##38016
0cc48     F2 2C 02 FB | 	rdlong	local04, objptr
0cc4c     01 2C 06 F1 | 	add	local04, #1
0cc50     F2 2C 62 FC | 	wrlong	local04, objptr
0cc54     4A 00 00 FF 
0cc58     80 E4 85 F1 | 	sub	objptr, ##38016
0cc5c     4C FF 9F FD | 	jmp	#LR__1030
0cc60                 | LR__1031
0cc60                 | ' return runptr2
0cc60     50 00 00 FF 
0cc64     BC E4 05 F1 | 	add	objptr, ##41148
0cc68     F2 FA 01 FB | 	rdlong	result1, objptr
0cc6c     50 00 00 FF 
0cc70     BC E4 85 F1 | 	sub	objptr, ##41148
0cc74     A7 F0 03 F6 | 	mov	ptra, fp
0cc78     B2 00 A0 FD | 	call	#popregs_
0cc7c                 | _execute_line_ret
0cc7c     2D 00 64 FD | 	ret
0cc80                 | 
0cc80                 | ' 
0cc80                 | ' 
0cc80                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cc80                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0cc80                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cc80                 | ' 
0cc80                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0cc80                 | ' 
0cc80                 | ' function pop() as expr_result
0cc80                 | _pop
0cc80                 | ' if stackpointer=0 then
0cc80     43 00 00 FF 
0cc84     58 E4 05 F1 | 	add	objptr, ##34392
0cc88     F2 FA 09 FB | 	rdlong	result1, objptr wz
0cc8c     43 00 00 FF 
0cc90     58 E4 85 F1 | 	sub	objptr, ##34392
0cc94     FF 04 06 A6 |  if_e	mov	_var03, #255
0cc98     18 00 06 A6 |  if_e	mov	_var01, #24
0cc9c     68 00 90 AD |  if_e	jmp	#LR__1040
0cca0     43 00 00 FF 
0cca4     58 E4 05 F1 | 	add	objptr, ##34392
0cca8     F2 FA 01 FB | 	rdlong	result1, objptr
0ccac     01 FA 85 F1 | 	sub	result1, #1
0ccb0     F2 FA 61 FC | 	wrlong	result1, objptr
0ccb4     FD FE 01 F6 | 	mov	result3, result1
0ccb8     01 FE 65 F0 | 	shl	result3, #1
0ccbc     FD FE 01 F1 | 	add	result3, result1
0ccc0     02 FE 65 F0 | 	shl	result3, #2
0ccc4     0C 00 00 FF 
0ccc8     0C E4 85 F1 | 	sub	objptr, ##6156
0cccc     F2 FE 01 F1 | 	add	result3, objptr
0ccd0     FF 00 02 FB | 	rdlong	_var01, result3
0ccd4     04 FE 05 F1 | 	add	result3, #4
0ccd8     FF FE 01 FB | 	rdlong	result3, result3
0ccdc     FD FC 01 F6 | 	mov	result2, result1
0cce0     01 FC 65 F0 | 	shl	result2, #1
0cce4     FD FC 01 F1 | 	add	result2, result1
0cce8     02 FC 65 F0 | 	shl	result2, #2
0ccec     F2 FC 01 F1 | 	add	result2, objptr
0ccf0     08 FC 05 F1 | 	add	result2, #8
0ccf4     FE FA 01 FB | 	rdlong	result1, result2
0ccf8     FF 02 02 F6 | 	mov	_var02, result3
0ccfc     FD 04 02 F6 | 	mov	_var03, result1
0cd00     37 00 00 FF 
0cd04     4C E4 85 F1 | 	sub	objptr, ##28236
0cd08                 | LR__1040
0cd08                 | ' return t1
0cd08     01 FD 01 F6 | 	mov	result2, _var02
0cd0c     02 FF 01 F6 | 	mov	result3, _var03
0cd10     00 FB 01 F6 | 	mov	result1, _var01
0cd14                 | _pop_ret
0cd14     2D 00 64 FD | 	ret
0cd18                 | 
0cd18                 | ' 
0cd18                 | ' sub push(t1 as expr_result )
0cd18                 | _push
0cd18                 | ' if stackpointer<maxstack then 
0cd18     43 00 00 FF 
0cd1c     58 E4 05 F1 | 	add	objptr, ##34392
0cd20     F2 00 02 FB | 	rdlong	_var01, objptr
0cd24     43 00 00 FF 
0cd28     58 E4 85 F1 | 	sub	objptr, ##34392
0cd2c     01 00 00 FF 
0cd30     00 00 56 F2 | 	cmps	_var01, ##512 wc
0cd34     BC 00 90 3D |  if_ae	jmp	#LR__1050
0cd38     09 01 02 FB | 	rdlong	_var01, arg01
0cd3c     04 12 06 F1 | 	add	arg01, #4
0cd40     09 03 02 FB | 	rdlong	_var02, arg01
0cd44     04 12 06 F1 | 	add	arg01, #4
0cd48     09 13 02 FB | 	rdlong	arg01, arg01
0cd4c     43 00 00 FF 
0cd50     58 E4 05 F1 | 	add	objptr, ##34392
0cd54     F2 04 02 FB | 	rdlong	_var03, objptr
0cd58     02 07 02 F6 | 	mov	_var04, _var03
0cd5c     01 06 66 F0 | 	shl	_var04, #1
0cd60     02 07 02 F1 | 	add	_var04, _var03
0cd64     02 06 66 F0 | 	shl	_var04, #2
0cd68     0C 00 00 FF 
0cd6c     0C E4 85 F1 | 	sub	objptr, ##6156
0cd70     F2 06 02 F1 | 	add	_var04, objptr
0cd74     03 01 62 FC | 	wrlong	_var01, _var04
0cd78     0C 00 00 FF 
0cd7c     0C E4 05 F1 | 	add	objptr, ##6156
0cd80     F2 06 02 FB | 	rdlong	_var04, objptr
0cd84     03 05 02 F6 | 	mov	_var03, _var04
0cd88     01 04 66 F0 | 	shl	_var03, #1
0cd8c     03 05 02 F1 | 	add	_var03, _var04
0cd90     02 04 66 F0 | 	shl	_var03, #2
0cd94     0C 00 00 FF 
0cd98     0C E4 85 F1 | 	sub	objptr, ##6156
0cd9c     F2 04 02 F1 | 	add	_var03, objptr
0cda0     04 04 06 F1 | 	add	_var03, #4
0cda4     02 03 62 FC | 	wrlong	_var02, _var03
0cda8     0C 00 00 FF 
0cdac     0C E4 05 F1 | 	add	objptr, ##6156
0cdb0     F2 06 02 FB | 	rdlong	_var04, objptr
0cdb4     03 05 02 F6 | 	mov	_var03, _var04
0cdb8     01 04 66 F0 | 	shl	_var03, #1
0cdbc     03 05 02 F1 | 	add	_var03, _var04
0cdc0     02 04 66 F0 | 	shl	_var03, #2
0cdc4     0C 00 00 FF 
0cdc8     0C E4 85 F1 | 	sub	objptr, ##6156
0cdcc     F2 04 02 F1 | 	add	_var03, objptr
0cdd0     08 04 06 F1 | 	add	_var03, #8
0cdd4     02 13 62 FC | 	wrlong	arg01, _var03
0cdd8     0C 00 00 FF 
0cddc     0C E4 05 F1 | 	add	objptr, ##6156
0cde0     F2 00 02 FB | 	rdlong	_var01, objptr
0cde4     01 00 06 F1 | 	add	_var01, #1
0cde8     F2 00 62 FC | 	wrlong	_var01, objptr
0cdec     43 00 00 FF 
0cdf0     58 E4 85 F1 | 	sub	objptr, ##34392
0cdf4                 | LR__1050
0cdf4                 | _push_ret
0cdf4     2D 00 64 FD | 	ret
0cdf8                 | 
0cdf8                 | ' 
0cdf8                 | ' ' -------------------------------- Runtime converting functions
0cdf8                 | ' 
0cdf8                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0cdf8                 | ' 
0cdf8                 | ' function  convertstring(psaddr as ulong) as string
0cdf8                 | _convertstring
0cdf8     04 4A 05 F6 | 	mov	COUNT_, #4
0cdfc     A8 00 A0 FD | 	call	#pushregs_
0ce00     09 27 02 F6 | 	mov	local01, arg01
0ce04     54 54 B1 FD | 	call	#_pslpeek
0ce08     FD 28 02 F6 | 	mov	local02, result1
0ce0c     AD 01 00 FF 
0ce10     C6 2B 06 F6 | 	mov	local03, ##@LR__5811
0ce14                 | ' l=pslpeek(psaddr) 
0ce14                 | ' s="" 
0ce14                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ce14     01 2C 06 F6 | 	mov	local04, #1
0ce18     01 28 06 F1 | 	add	local02, #1
0ce1c                 | LR__1060
0ce1c     14 2D 52 F2 | 	cmps	local04, local02 wc
0ce20     30 00 90 3D |  if_ae	jmp	#LR__1061
0ce24     13 13 02 F6 | 	mov	arg01, local01
0ce28     03 12 06 F1 | 	add	arg01, #3
0ce2c     16 13 02 F1 | 	add	arg01, local04
0ce30     D0 53 B1 FD | 	call	#_pspeek
0ce34     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ce38     7C AD B1 FD | 	call	#__system__Chr_S
0ce3c     FD 14 02 F6 | 	mov	arg02, result1
0ce40     15 13 02 F6 | 	mov	arg01, local03
0ce44     8C 8B B1 FD | 	call	#__system___string_concat
0ce48     FD 2A 02 F6 | 	mov	local03, result1
0ce4c     01 2C 06 F1 | 	add	local04, #1
0ce50     C8 FF 9F FD | 	jmp	#LR__1060
0ce54                 | LR__1061
0ce54                 | ' return s
0ce54     15 FB 01 F6 | 	mov	result1, local03
0ce58     A7 F0 03 F6 | 	mov	ptra, fp
0ce5c     B2 00 A0 FD | 	call	#popregs_
0ce60                 | _convertstring_ret
0ce60     2D 00 64 FD | 	ret
0ce64                 | 
0ce64                 | ' 
0ce64                 | ' ' converts a variable to an integer
0ce64                 | ' 
0ce64                 | ' function converttoint (t1 as expr_result) as integer 
0ce64                 | _converttoint
0ce64     02 4A 05 F6 | 	mov	COUNT_, #2
0ce68     A8 00 A0 FD | 	call	#pushregs_
0ce6c     09 27 02 F6 | 	mov	local01, arg01
0ce70                 | ' 
0ce70                 | ' select case t1.result_type
0ce70     08 26 06 F1 | 	add	local01, #8
0ce74     13 29 02 FB | 	rdlong	local02, local01
0ce78     08 26 86 F1 | 	sub	local01, #8
0ce7c     1C 28 0E F2 | 	cmp	local02, #28 wz
0ce80     2C 00 90 AD |  if_e	jmp	#LR__1070
0ce84     1D 28 0E F2 | 	cmp	local02, #29 wz
0ce88     2C 00 90 AD |  if_e	jmp	#LR__1071
0ce8c     1E 28 0E F2 | 	cmp	local02, #30 wz
0ce90     2C 00 90 AD |  if_e	jmp	#LR__1072
0ce94     1F 28 0E F2 | 	cmp	local02, #31 wz
0ce98     34 00 90 AD |  if_e	jmp	#LR__1073
0ce9c     2B 28 0E F2 | 	cmp	local02, #43 wz
0cea0     44 00 90 AD |  if_e	jmp	#LR__1074
0cea4     2C 28 0E F2 | 	cmp	local02, #44 wz
0cea8     5C 00 90 AD |  if_e	jmp	#LR__1075
0ceac     60 00 90 FD | 	jmp	#LR__1076
0ceb0                 | LR__1070
0ceb0     13 FB 01 FB | 	rdlong	result1, local01
0ceb4     5C 00 90 FD | 	jmp	#LR__1077
0ceb8                 | LR__1071
0ceb8     13 FB 01 FB | 	rdlong	result1, local01
0cebc     54 00 90 FD | 	jmp	#LR__1077
0cec0                 | LR__1072
0cec0     13 13 02 FB | 	rdlong	arg01, local01
0cec4     01 14 06 F6 | 	mov	arg02, #1
0cec8     EC BD B1 FD | 	call	#__system___float_tointeger
0cecc     44 00 90 FD | 	jmp	#LR__1077
0ced0                 | LR__1073
0ced0     13 13 02 FB | 	rdlong	arg01, local01
0ced4     24 C1 B1 FD | 	call	#__system____builtin_atof
0ced8     FD 12 02 F6 | 	mov	arg01, result1
0cedc     01 14 06 F6 | 	mov	arg02, #1
0cee0     D4 BD B1 FD | 	call	#__system___float_tointeger
0cee4     2C 00 90 FD | 	jmp	#LR__1077
0cee8                 | LR__1074
0cee8     13 13 02 FB | 	rdlong	arg01, local01
0ceec     08 FF BF FD | 	call	#_convertstring
0cef0     FD 12 02 F6 | 	mov	arg01, result1
0cef4     04 C1 B1 FD | 	call	#__system____builtin_atof
0cef8     FD 12 02 F6 | 	mov	arg01, result1
0cefc     01 14 06 F6 | 	mov	arg02, #1
0cf00     B4 BD B1 FD | 	call	#__system___float_tointeger
0cf04     0C 00 90 FD | 	jmp	#LR__1077
0cf08                 | LR__1075
0cf08     13 FB 01 FB | 	rdlong	result1, local01
0cf0c     04 00 90 FD | 	jmp	#LR__1077
0cf10                 | LR__1076
0cf10     00 FA 05 F6 | 	mov	result1, #0
0cf14                 | LR__1077
0cf14     A7 F0 03 F6 | 	mov	ptra, fp
0cf18     B2 00 A0 FD | 	call	#popregs_
0cf1c                 | _converttoint_ret
0cf1c     2D 00 64 FD | 	ret
0cf20                 | 
0cf20                 | ' 
0cf20                 | ' ' converts a variable to float
0cf20                 | ' 
0cf20                 | ' function converttofloat (t1 as expr_result) as single
0cf20                 | _converttofloat
0cf20     03 4A 05 F6 | 	mov	COUNT_, #3
0cf24     A8 00 A0 FD | 	call	#pushregs_
0cf28     09 27 02 F6 | 	mov	local01, arg01
0cf2c                 | ' 
0cf2c                 | ' select case t1.result_type
0cf2c     08 26 06 F1 | 	add	local01, #8
0cf30     13 29 02 FB | 	rdlong	local02, local01
0cf34     08 26 86 F1 | 	sub	local01, #8
0cf38     1C 28 0E F2 | 	cmp	local02, #28 wz
0cf3c     24 00 90 AD |  if_e	jmp	#LR__1080
0cf40     1D 28 0E F2 | 	cmp	local02, #29 wz
0cf44     38 00 90 AD |  if_e	jmp	#LR__1081
0cf48     1E 28 0E F2 | 	cmp	local02, #30 wz
0cf4c     3C 00 90 AD |  if_e	jmp	#LR__1082
0cf50     1F 28 0E F2 | 	cmp	local02, #31 wz
0cf54     3C 00 90 AD |  if_e	jmp	#LR__1083
0cf58     2B 28 0E F2 | 	cmp	local02, #43 wz
0cf5c     40 00 90 AD |  if_e	jmp	#LR__1084
0cf60     50 00 90 FD | 	jmp	#LR__1085
0cf64                 | LR__1080
0cf64     13 13 02 FB | 	rdlong	arg01, local01
0cf68     09 13 52 F6 | 	abs	arg01, arg01 wc
0cf6c     1F 2A C6 C9 |  if_b	decod	local03, #31
0cf70     00 2A 06 36 |  if_ae	mov	local03, #0
0cf74     74 B4 B1 FD | 	call	#__system___float_fromuns
0cf78     15 FB 61 F5 | 	xor	result1, local03
0cf7c     38 00 90 FD | 	jmp	#LR__1086
0cf80                 | LR__1081
0cf80     13 13 02 FB | 	rdlong	arg01, local01
0cf84     64 B4 B1 FD | 	call	#__system___float_fromuns
0cf88     2C 00 90 FD | 	jmp	#LR__1086
0cf8c                 | LR__1082
0cf8c     13 FB 01 FB | 	rdlong	result1, local01
0cf90     24 00 90 FD | 	jmp	#LR__1086
0cf94                 | LR__1083
0cf94     13 13 02 FB | 	rdlong	arg01, local01
0cf98     60 C0 B1 FD | 	call	#__system____builtin_atof
0cf9c     18 00 90 FD | 	jmp	#LR__1086
0cfa0                 | LR__1084
0cfa0     13 13 02 FB | 	rdlong	arg01, local01
0cfa4     50 FE BF FD | 	call	#_convertstring
0cfa8     FD 12 02 F6 | 	mov	arg01, result1
0cfac     4C C0 B1 FD | 	call	#__system____builtin_atof
0cfb0     04 00 90 FD | 	jmp	#LR__1086
0cfb4                 | LR__1085
0cfb4     00 FA 05 F6 | 	mov	result1, #0
0cfb8                 | LR__1086
0cfb8     A7 F0 03 F6 | 	mov	ptra, fp
0cfbc     B2 00 A0 FD | 	call	#popregs_
0cfc0                 | _converttofloat_ret
0cfc0     2D 00 64 FD | 	ret
0cfc4                 | 
0cfc4                 | ' 
0cfc4                 | ' '----------------- End of converting 
0cfc4                 | ' 
0cfc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cfc4                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0cfc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cfc4                 | ' 
0cfc4                 | ' sub csave_block(address as ulong)
0cfc4                 | _csave_block
0cfc4     09 01 02 F6 | 	mov	_var01, arg01
0cfc8                 | ' 
0cfc8                 | ' for i=0 to 63 step 2
0cfc8     00 02 06 F6 | 	mov	_var02, #0
0cfcc                 | LR__1090
0cfcc                 | '   do: loop until lpeek(base+64*7)>32768
0cfcc     37 00 00 FF 
0cfd0     10 E4 05 F1 | 	add	objptr, ##28176
0cfd4     97 0C 48 FB | 	callpa	#(@LR__1092-@LR__1091)>>2,fcache_load_ptr_
0cfd8                 | LR__1091
0cfd8     F2 12 02 FB | 	rdlong	arg01, objptr
0cfdc     C0 13 06 F1 | 	add	arg01, #448
0cfe0     09 FB 01 FB | 	rdlong	result1, arg01
0cfe4     40 00 00 FF 
0cfe8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cfec     E8 FF 9F CD |  if_b	jmp	#LR__1091
0cff0                 | LR__1092
0cff0     00 13 02 F6 | 	mov	arg01, _var01
0cff4     01 05 02 F6 | 	mov	_var03, _var02
0cff8     02 04 66 F0 | 	shl	_var03, #2
0cffc     02 13 02 F1 | 	add	arg01, _var03
0d000     09 07 02 FB | 	rdlong	_var04, arg01
0d004     1B 00 00 FF 
0d008     A4 E4 05 F1 | 	add	objptr, ##13988
0d00c     F2 06 62 FC | 	wrlong	_var04, objptr
0d010     52 00 00 FF 
0d014     B4 E4 85 F1 | 	sub	objptr, ##42164
0d018                 | '   q=lpeek(address+4*i)
0d018                 | '      for bit=0 to 31
0d018     00 08 06 F6 | 	mov	_var05, #0
0d01c     97 84 48 FB | 	callpa	#(@LR__1097-@LR__1093)>>2,fcache_load_ptr_
0d020                 | LR__1093
0d020                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0d020     52 00 00 FF 
0d024     B4 E4 05 F1 | 	add	objptr, ##42164
0d028     F2 06 02 FB | 	rdlong	_var04, objptr
0d02c     52 00 00 FF 
0d030     B4 E4 85 F1 | 	sub	objptr, ##42164
0d034     04 05 C2 F9 | 	decod	_var03, _var05
0d038     02 07 CA F7 | 	test	_var04, _var03 wz
0d03c     60 00 90 AD |  if_e	jmp	#LR__1094
0d040     04 05 02 F6 | 	mov	_var03, _var05
0d044     02 04 66 F0 | 	shl	_var03, #2
0d048     4D 00 00 FF 
0d04c     B4 E5 05 F1 | 	add	objptr, ##39860
0d050     F2 04 02 F1 | 	add	_var03, objptr
0d054     02 FF 48 FC | 	wrbyte	#127, _var03
0d058     04 05 02 F6 | 	mov	_var03, _var05
0d05c     02 04 66 F0 | 	shl	_var03, #2
0d060     01 04 06 F1 | 	add	_var03, #1
0d064     F2 04 02 F1 | 	add	_var03, objptr
0d068     02 01 49 FC | 	wrbyte	#128, _var03
0d06c     04 05 02 F6 | 	mov	_var03, _var05
0d070     02 04 66 F0 | 	shl	_var03, #2
0d074     02 04 06 F1 | 	add	_var03, #2
0d078     F2 04 02 F1 | 	add	_var03, objptr
0d07c     02 FF 48 FC | 	wrbyte	#127, _var03
0d080     04 05 02 F6 | 	mov	_var03, _var05
0d084     02 04 66 F0 | 	shl	_var03, #2
0d088     03 04 06 F1 | 	add	_var03, #3
0d08c     F2 04 02 F1 | 	add	_var03, objptr
0d090     02 01 49 FC | 	wrbyte	#128, _var03
0d094     4D 00 00 FF 
0d098     B4 E5 85 F1 | 	sub	objptr, ##39860
0d09c     5C 00 90 FD | 	jmp	#LR__1095
0d0a0                 | LR__1094
0d0a0     04 05 02 F6 | 	mov	_var03, _var05
0d0a4     02 04 66 F0 | 	shl	_var03, #2
0d0a8     4D 00 00 FF 
0d0ac     B4 E5 05 F1 | 	add	objptr, ##39860
0d0b0     F2 04 02 F1 | 	add	_var03, objptr
0d0b4     02 01 49 FC | 	wrbyte	#128, _var03
0d0b8     04 05 02 F6 | 	mov	_var03, _var05
0d0bc     02 04 66 F0 | 	shl	_var03, #2
0d0c0     01 04 06 F1 | 	add	_var03, #1
0d0c4     F2 04 02 F1 | 	add	_var03, objptr
0d0c8     02 01 49 FC | 	wrbyte	#128, _var03
0d0cc     04 05 02 F6 | 	mov	_var03, _var05
0d0d0     02 04 66 F0 | 	shl	_var03, #2
0d0d4     02 04 06 F1 | 	add	_var03, #2
0d0d8     F2 04 02 F1 | 	add	_var03, objptr
0d0dc     02 FF 48 FC | 	wrbyte	#127, _var03
0d0e0     04 05 02 F6 | 	mov	_var03, _var05
0d0e4     02 04 66 F0 | 	shl	_var03, #2
0d0e8     03 04 06 F1 | 	add	_var03, #3
0d0ec     F2 04 02 F1 | 	add	_var03, objptr
0d0f0     02 FF 48 FC | 	wrbyte	#127, _var03
0d0f4     4D 00 00 FF 
0d0f8     B4 E5 85 F1 | 	sub	objptr, ##39860
0d0fc                 | LR__1095
0d0fc     01 08 06 F1 | 	add	_var05, #1
0d100     20 08 56 F2 | 	cmps	_var05, #32 wc
0d104     18 FF 9F CD |  if_b	jmp	#LR__1093
0d108                 | '   do: loop until lpeek(base+64*7)<32768
0d108     37 00 00 FF 
0d10c     10 E4 05 F1 | 	add	objptr, ##28176
0d110                 | LR__1096
0d110     F2 12 02 FB | 	rdlong	arg01, objptr
0d114     C0 13 06 F1 | 	add	arg01, #448
0d118     09 FB 01 FB | 	rdlong	result1, arg01
0d11c     40 00 00 FF 
0d120     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d124     E8 FF 9F 3D |  if_ae	jmp	#LR__1096
0d128                 | LR__1097
0d128     00 13 02 F6 | 	mov	arg01, _var01
0d12c     04 12 06 F1 | 	add	arg01, #4
0d130     01 05 02 F6 | 	mov	_var03, _var02
0d134     02 04 66 F0 | 	shl	_var03, #2
0d138     02 13 02 F1 | 	add	arg01, _var03
0d13c     09 07 02 FB | 	rdlong	_var04, arg01
0d140     1B 00 00 FF 
0d144     A4 E4 05 F1 | 	add	objptr, ##13988
0d148     F2 06 62 FC | 	wrlong	_var04, objptr
0d14c     52 00 00 FF 
0d150     B4 E4 85 F1 | 	sub	objptr, ##42164
0d154                 | '   q=lpeek(address+4+4*i)
0d154                 | '      for bit=0 to 31
0d154     00 08 06 F6 | 	mov	_var05, #0
0d158     97 94 48 FB | 	callpa	#(@LR__1101-@LR__1098)>>2,fcache_load_ptr_
0d15c                 | LR__1098
0d15c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0d15c     52 00 00 FF 
0d160     B4 E4 05 F1 | 	add	objptr, ##42164
0d164     F2 06 02 FB | 	rdlong	_var04, objptr
0d168     52 00 00 FF 
0d16c     B4 E4 85 F1 | 	sub	objptr, ##42164
0d170     04 05 C2 F9 | 	decod	_var03, _var05
0d174     02 07 CA F7 | 	test	_var04, _var03 wz
0d178     80 00 90 AD |  if_e	jmp	#LR__1099
0d17c     04 0B 02 F6 | 	mov	_var06, _var05
0d180     02 0A 66 F0 | 	shl	_var06, #2
0d184     80 04 06 F6 | 	mov	_var03, #128
0d188     05 05 02 F1 | 	add	_var03, _var06
0d18c     4D 00 00 FF 
0d190     B4 E5 05 F1 | 	add	objptr, ##39860
0d194     F2 04 02 F1 | 	add	_var03, objptr
0d198     02 FF 48 FC | 	wrbyte	#127, _var03
0d19c     04 0B 02 F6 | 	mov	_var06, _var05
0d1a0     02 0A 66 F0 | 	shl	_var06, #2
0d1a4     80 04 06 F6 | 	mov	_var03, #128
0d1a8     05 05 02 F1 | 	add	_var03, _var06
0d1ac     01 04 06 F1 | 	add	_var03, #1
0d1b0     F2 04 02 F1 | 	add	_var03, objptr
0d1b4     02 01 49 FC | 	wrbyte	#128, _var03
0d1b8     04 0B 02 F6 | 	mov	_var06, _var05
0d1bc     02 0A 66 F0 | 	shl	_var06, #2
0d1c0     80 04 06 F6 | 	mov	_var03, #128
0d1c4     05 05 02 F1 | 	add	_var03, _var06
0d1c8     02 04 06 F1 | 	add	_var03, #2
0d1cc     F2 04 02 F1 | 	add	_var03, objptr
0d1d0     02 FF 48 FC | 	wrbyte	#127, _var03
0d1d4     04 0B 02 F6 | 	mov	_var06, _var05
0d1d8     02 0A 66 F0 | 	shl	_var06, #2
0d1dc     80 04 06 F6 | 	mov	_var03, #128
0d1e0     05 05 02 F1 | 	add	_var03, _var06
0d1e4     03 04 06 F1 | 	add	_var03, #3
0d1e8     F2 04 02 F1 | 	add	_var03, objptr
0d1ec     02 01 49 FC | 	wrbyte	#128, _var03
0d1f0     4D 00 00 FF 
0d1f4     B4 E5 85 F1 | 	sub	objptr, ##39860
0d1f8     7C 00 90 FD | 	jmp	#LR__1100
0d1fc                 | LR__1099
0d1fc     04 0B 02 F6 | 	mov	_var06, _var05
0d200     02 0A 66 F0 | 	shl	_var06, #2
0d204     80 04 06 F6 | 	mov	_var03, #128
0d208     05 05 02 F1 | 	add	_var03, _var06
0d20c     4D 00 00 FF 
0d210     B4 E5 05 F1 | 	add	objptr, ##39860
0d214     F2 04 02 F1 | 	add	_var03, objptr
0d218     02 01 49 FC | 	wrbyte	#128, _var03
0d21c     04 0B 02 F6 | 	mov	_var06, _var05
0d220     02 0A 66 F0 | 	shl	_var06, #2
0d224     80 04 06 F6 | 	mov	_var03, #128
0d228     05 05 02 F1 | 	add	_var03, _var06
0d22c     01 04 06 F1 | 	add	_var03, #1
0d230     F2 04 02 F1 | 	add	_var03, objptr
0d234     02 01 49 FC | 	wrbyte	#128, _var03
0d238     04 0B 02 F6 | 	mov	_var06, _var05
0d23c     02 0A 66 F0 | 	shl	_var06, #2
0d240     80 04 06 F6 | 	mov	_var03, #128
0d244     05 05 02 F1 | 	add	_var03, _var06
0d248     02 04 06 F1 | 	add	_var03, #2
0d24c     F2 04 02 F1 | 	add	_var03, objptr
0d250     02 FF 48 FC | 	wrbyte	#127, _var03
0d254     04 0B 02 F6 | 	mov	_var06, _var05
0d258     02 0A 66 F0 | 	shl	_var06, #2
0d25c     80 04 06 F6 | 	mov	_var03, #128
0d260     05 05 02 F1 | 	add	_var03, _var06
0d264     03 04 06 F1 | 	add	_var03, #3
0d268     F2 04 02 F1 | 	add	_var03, objptr
0d26c     02 FF 48 FC | 	wrbyte	#127, _var03
0d270     4D 00 00 FF 
0d274     B4 E5 85 F1 | 	sub	objptr, ##39860
0d278                 | LR__1100
0d278     01 08 06 F1 | 	add	_var05, #1
0d27c     20 08 56 F2 | 	cmps	_var05, #32 wc
0d280     D8 FE 9F CD |  if_b	jmp	#LR__1098
0d284                 | LR__1101
0d284     02 02 06 F1 | 	add	_var02, #2
0d288     40 02 56 F2 | 	cmps	_var02, #64 wc
0d28c     3C FD 9F CD |  if_b	jmp	#LR__1090
0d290                 | ' do: loop until lpeek(base+64*7)>32768
0d290     37 00 00 FF 
0d294     10 E4 05 F1 | 	add	objptr, ##28176
0d298     97 84 48 FB | 	callpa	#(@LR__1110-@LR__1102)>>2,fcache_load_ptr_
0d29c                 | LR__1102
0d29c     F2 12 02 FB | 	rdlong	arg01, objptr
0d2a0     C0 13 06 F1 | 	add	arg01, #448
0d2a4     09 FB 01 FB | 	rdlong	result1, arg01
0d2a8     40 00 00 FF 
0d2ac     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d2b0     E8 FF 9F CD |  if_b	jmp	#LR__1102
0d2b4     37 00 00 FF 
0d2b8     10 E4 85 F1 | 	sub	objptr, ##28176
0d2bc                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d2bc     00 02 06 F6 | 	mov	_var02, #0
0d2c0                 | LR__1103
0d2c0     01 07 52 F6 | 	abs	_var04, _var02 wc
0d2c4     07 06 06 F5 | 	and	_var04, #7
0d2c8     03 07 82 F6 | 	negc	_var04, _var04
0d2cc     04 06 56 F2 | 	cmps	_var04, #4 wc
0d2d0     20 00 90 3D |  if_ae	jmp	#LR__1104
0d2d4     01 0B 02 F6 | 	mov	_var06, _var02
0d2d8     4D 00 00 FF 
0d2dc     B4 E5 05 F1 | 	add	objptr, ##39860
0d2e0     F2 0A 02 F1 | 	add	_var06, objptr
0d2e4     05 FF 48 FC | 	wrbyte	#127, _var06
0d2e8     4D 00 00 FF 
0d2ec     B4 E5 85 F1 | 	sub	objptr, ##39860
0d2f0     1C 00 90 FD | 	jmp	#LR__1105
0d2f4                 | LR__1104
0d2f4     01 0B 02 F6 | 	mov	_var06, _var02
0d2f8     4D 00 00 FF 
0d2fc     B4 E5 05 F1 | 	add	objptr, ##39860
0d300     F2 0A 02 F1 | 	add	_var06, objptr
0d304     05 01 49 FC | 	wrbyte	#128, _var06
0d308     4D 00 00 FF 
0d30c     B4 E5 85 F1 | 	sub	objptr, ##39860
0d310                 | LR__1105
0d310     01 02 06 F1 | 	add	_var02, #1
0d314     80 02 56 F2 | 	cmps	_var02, #128 wc
0d318     A4 FF 9F CD |  if_b	jmp	#LR__1103
0d31c                 | ' 
0d31c                 | ' do: loop until lpeek(base+64*7)<32768
0d31c     37 00 00 FF 
0d320     10 E4 05 F1 | 	add	objptr, ##28176
0d324                 | LR__1106
0d324     F2 12 02 FB | 	rdlong	arg01, objptr
0d328     C0 13 06 F1 | 	add	arg01, #448
0d32c     09 FB 01 FB | 	rdlong	result1, arg01
0d330     40 00 00 FF 
0d334     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d338     E8 FF 9F 3D |  if_ae	jmp	#LR__1106
0d33c     37 00 00 FF 
0d340     10 E4 85 F1 | 	sub	objptr, ##28176
0d344                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d344     80 02 06 F6 | 	mov	_var02, #128
0d348                 | LR__1107
0d348     01 07 52 F6 | 	abs	_var04, _var02 wc
0d34c     07 06 06 F5 | 	and	_var04, #7
0d350     03 07 82 F6 | 	negc	_var04, _var04
0d354     04 06 56 F2 | 	cmps	_var04, #4 wc
0d358     20 00 90 3D |  if_ae	jmp	#LR__1108
0d35c     01 0B 02 F6 | 	mov	_var06, _var02
0d360     4D 00 00 FF 
0d364     B4 E5 05 F1 | 	add	objptr, ##39860
0d368     F2 0A 02 F1 | 	add	_var06, objptr
0d36c     05 FF 48 FC | 	wrbyte	#127, _var06
0d370     4D 00 00 FF 
0d374     B4 E5 85 F1 | 	sub	objptr, ##39860
0d378     1C 00 90 FD | 	jmp	#LR__1109
0d37c                 | LR__1108
0d37c     01 0B 02 F6 | 	mov	_var06, _var02
0d380     4D 00 00 FF 
0d384     B4 E5 05 F1 | 	add	objptr, ##39860
0d388     F2 0A 02 F1 | 	add	_var06, objptr
0d38c     05 01 49 FC | 	wrbyte	#128, _var06
0d390     4D 00 00 FF 
0d394     B4 E5 85 F1 | 	sub	objptr, ##39860
0d398                 | LR__1109
0d398     01 02 06 F1 | 	add	_var02, #1
0d39c     00 03 16 F2 | 	cmp	_var02, #256 wc
0d3a0     A4 FF 9F CD |  if_b	jmp	#LR__1107
0d3a4                 | LR__1110
0d3a4                 | _csave_block_ret
0d3a4     2D 00 64 FD | 	ret
0d3a8                 | 
0d3a8                 | ' 
0d3a8                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0d3a8                 | _csave_addtoblock
0d3a8     04 4A 05 F6 | 	mov	COUNT_, #4
0d3ac     A8 00 A0 FD | 	call	#pushregs_
0d3b0     09 27 02 F6 | 	mov	local01, arg01
0d3b4                 | ' 
0d3b4                 | ' if force=0 then
0d3b4     07 14 4E F7 | 	zerox	arg02, #7 wz
0d3b8     78 00 90 5D |  if_ne	jmp	#LR__1120
0d3bc     50 00 00 FF 
0d3c0     B4 E4 05 F1 | 	add	objptr, ##41140
0d3c4     F2 14 02 FB | 	rdlong	arg02, objptr
0d3c8     02 00 00 FF 
0d3cc     00 E4 85 F1 | 	sub	objptr, ##1024
0d3d0     F2 14 02 F1 | 	add	arg02, objptr
0d3d4     0A 27 42 FC | 	wrbyte	local01, arg02
0d3d8     02 00 00 FF 
0d3dc     00 E4 05 F1 | 	add	objptr, ##1024
0d3e0     F2 26 02 FB | 	rdlong	local01, objptr
0d3e4     01 26 06 F1 | 	add	local01, #1
0d3e8     F2 26 62 FC | 	wrlong	local01, objptr
0d3ec                 | '   block(blockptr)=d
0d3ec                 | '   blockptr+=1
0d3ec                 | '   if blockptr>=255 then
0d3ec     50 00 00 FF 
0d3f0     B4 E4 85 F1 | 	sub	objptr, ##41140
0d3f4     FF 26 16 F2 | 	cmp	local01, #255 wc
0d3f8     E4 00 90 CD |  if_b	jmp	#LR__1124
0d3fc     4E 00 00 FF 
0d400     B4 E4 05 F1 | 	add	objptr, ##40116
0d404     F2 12 02 F6 | 	mov	arg01, objptr
0d408     4E 00 00 FF 
0d40c     B4 E4 85 F1 | 	sub	objptr, ##40116
0d410     B0 FB BF FD | 	call	#_csave_block
0d414     50 00 00 FF 
0d418     B4 E4 05 F1 | 	add	objptr, ##41140
0d41c     F2 00 68 FC | 	wrlong	#0, objptr
0d420     50 00 00 FF 
0d424     B4 E4 85 F1 | 	sub	objptr, ##41140
0d428     2C 13 06 F6 | 	mov	arg01, #300
0d42c     3C 88 B1 FD | 	call	#__system___waitms
0d430     AC 00 90 FD | 	jmp	#LR__1124
0d434                 | LR__1120
0d434     50 00 00 FF 
0d438     B4 E4 05 F1 | 	add	objptr, ##41140
0d43c     F2 28 02 FB | 	rdlong	local02, objptr
0d440     02 00 00 FF 
0d444     00 E4 85 F1 | 	sub	objptr, ##1024
0d448     F2 28 02 F1 | 	add	local02, objptr
0d44c     14 27 42 FC | 	wrbyte	local01, local02
0d450                 | '   block(blockptr)=d
0d450                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0d450     02 00 00 FF 
0d454     00 E4 05 F1 | 	add	objptr, ##1024
0d458     F2 2A 02 FB | 	rdlong	local03, objptr
0d45c     50 00 00 FF 
0d460     B4 E4 85 F1 | 	sub	objptr, ##41140
0d464     FF 2A 16 F2 | 	cmp	local03, #255 wc
0d468     40 00 90 3D |  if_ae	jmp	#LR__1123
0d46c     50 00 00 FF 
0d470     B4 E4 05 F1 | 	add	objptr, ##41140
0d474     F2 2C 02 FB | 	rdlong	local04, objptr
0d478     50 00 00 FF 
0d47c     B4 E4 85 F1 | 	sub	objptr, ##41140
0d480                 | LR__1121
0d480     00 2D 56 F2 | 	cmps	local04, #256 wc
0d484     24 00 90 3D |  if_ae	jmp	#LR__1122
0d488     16 29 02 F6 | 	mov	local02, local04
0d48c     4E 00 00 FF 
0d490     B4 E4 05 F1 | 	add	objptr, ##40116
0d494     F2 28 02 F1 | 	add	local02, objptr
0d498     14 01 48 FC | 	wrbyte	#0, local02
0d49c     01 2C 06 F1 | 	add	local04, #1
0d4a0     4E 00 00 FF 
0d4a4     B4 E4 85 F1 | 	sub	objptr, ##40116
0d4a8     D4 FF 9F FD | 	jmp	#LR__1121
0d4ac                 | LR__1122
0d4ac                 | LR__1123
0d4ac     4E 00 00 FF 
0d4b0     B4 E4 05 F1 | 	add	objptr, ##40116
0d4b4     F2 12 02 F6 | 	mov	arg01, objptr
0d4b8     4E 00 00 FF 
0d4bc     B4 E4 85 F1 | 	sub	objptr, ##40116
0d4c0     00 FB BF FD | 	call	#_csave_block
0d4c4     50 00 00 FF 
0d4c8     B4 E4 05 F1 | 	add	objptr, ##41140
0d4cc     F2 00 68 FC | 	wrlong	#0, objptr
0d4d0     50 00 00 FF 
0d4d4     B4 E4 85 F1 | 	sub	objptr, ##41140
0d4d8     2C 13 06 F6 | 	mov	arg01, #300
0d4dc     8C 87 B1 FD | 	call	#__system___waitms
0d4e0                 | LR__1124
0d4e0     A7 F0 03 F6 | 	mov	ptra, fp
0d4e4     B2 00 A0 FD | 	call	#popregs_
0d4e8                 | _csave_addtoblock_ret
0d4e8     2D 00 64 FD | 	ret
0d4ec                 | 
0d4ec                 | ' 
0d4ec                 | ' '----------------------- csave
0d4ec                 | ' 
0d4ec                 | ' sub test_csave
0d4ec                 | _test_csave
0d4ec     04 4A 05 F6 | 	mov	COUNT_, #4
0d4f0     A8 00 A0 FD | 	call	#pushregs_
0d4f4     C0 F0 07 F1 | 	add	ptra, #192
0d4f8                 | ' 'dim fileheader,savestart, saveptr as ulong
0d4f8                 | ' 
0d4f8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0d4f8     4A 00 00 FF 
0d4fc     88 E4 05 F1 | 	add	objptr, ##38024
0d500     F2 12 02 FB | 	rdlong	arg01, objptr
0d504     4A 00 00 FF 
0d508     88 E4 85 F1 | 	sub	objptr, ##38024
0d50c     4C 4D B1 FD | 	call	#_pslpeek
0d510     FF FF 7F FF 
0d514     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0d518     10 00 90 5D |  if_ne	jmp	#LR__1130
0d51c     1B 12 06 F6 | 	mov	arg01, #27
0d520     00 14 06 F6 | 	mov	arg02, #0
0d524     64 4A B1 FD | 	call	#_printerror
0d528     1C 03 90 FD | 	jmp	#LR__1144
0d52c                 | LR__1130
0d52c     50 F7 BF FD | 	call	#_pop
0d530     90 4E 05 F1 | 	add	fp, #144
0d534     A7 FA 61 FC | 	wrlong	result1, fp
0d538     04 4E 05 F1 | 	add	fp, #4
0d53c     A7 FC 61 FC | 	wrlong	result2, fp
0d540     04 4E 05 F1 | 	add	fp, #4
0d544     A7 FE 61 FC | 	wrlong	result3, fp
0d548                 | ' t1=pop()
0d548                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0d548     98 4E 85 F1 | 	sub	fp, #152
0d54c     1F FE 0D F2 | 	cmp	result3, #31 wz
0d550     24 00 90 AD |  if_e	jmp	#LR__1131
0d554     52 00 00 FF 
0d558     70 E4 05 F1 | 	add	objptr, ##42096
0d55c     F2 1C 02 FB | 	rdlong	arg06, objptr
0d560     52 00 00 FF 
0d564     70 E4 85 F1 | 	sub	objptr, ##42096
0d568     8C 4E 05 F1 | 	add	fp, #140
0d56c     A7 1C 62 FC | 	wrlong	arg06, fp
0d570     8C 4E 85 F1 | 	sub	fp, #140
0d574     14 00 90 FD | 	jmp	#LR__1132
0d578                 | LR__1131
0d578     90 4E 05 F1 | 	add	fp, #144
0d57c     A7 1C 02 FB | 	rdlong	arg06, fp
0d580     04 4E 85 F1 | 	sub	fp, #4
0d584     A7 1C 62 FC | 	wrlong	arg06, fp
0d588     8C 4E 85 F1 | 	sub	fp, #140
0d58c                 | LR__1132
0d58c                 | ' 
0d58c                 | ' ' prepare 1 kHz header wave
0d58c                 | ' 
0d58c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d58c     A7 00 68 FC | 	wrlong	#0, fp
0d590     97 34 48 FB | 	callpa	#(@LR__1136-@LR__1133)>>2,fcache_load_ptr_
0d594                 | LR__1133
0d594     A7 1C 02 FB | 	rdlong	arg06, fp
0d598     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0d59c     07 1A 06 F5 | 	and	arg05, #7
0d5a0     0D 1B 82 F6 | 	negc	arg05, arg05
0d5a4     04 1A 56 F2 | 	cmps	arg05, #4 wc
0d5a8     20 00 90 3D |  if_ae	jmp	#LR__1134
0d5ac     A7 1A 02 FB | 	rdlong	arg05, fp
0d5b0     4D 00 00 FF 
0d5b4     B4 E5 05 F1 | 	add	objptr, ##39860
0d5b8     F2 1A 02 F1 | 	add	arg05, objptr
0d5bc     0D FF 48 FC | 	wrbyte	#127, arg05
0d5c0     4D 00 00 FF 
0d5c4     B4 E5 85 F1 | 	sub	objptr, ##39860
0d5c8     1C 00 90 FD | 	jmp	#LR__1135
0d5cc                 | LR__1134
0d5cc     A7 1A 02 FB | 	rdlong	arg05, fp
0d5d0     4D 00 00 FF 
0d5d4     B4 E5 05 F1 | 	add	objptr, ##39860
0d5d8     F2 1A 02 F1 | 	add	arg05, objptr
0d5dc     0D 01 49 FC | 	wrbyte	#128, arg05
0d5e0     4D 00 00 FF 
0d5e4     B4 E5 85 F1 | 	sub	objptr, ##39860
0d5e8                 | LR__1135
0d5e8     A7 1A 02 FB | 	rdlong	arg05, fp
0d5ec     01 1A 06 F1 | 	add	arg05, #1
0d5f0     A7 1A 62 FC | 	wrlong	arg05, fp
0d5f4     00 1B 56 F2 | 	cmps	arg05, #256 wc
0d5f8     98 FF 9F CD |  if_b	jmp	#LR__1133
0d5fc                 | LR__1136
0d5fc     4D 00 00 FF 
0d600     B4 E5 05 F1 | 	add	objptr, ##39860
0d604     F2 14 02 F6 | 	mov	arg02, objptr
0d608     07 12 06 F6 | 	mov	arg01, #7
0d60c     0F 00 00 FF 
0d610     40 17 06 F6 | 	mov	arg03, ##8000
0d614     0E 18 C6 F9 | 	decod	arg04, #14
0d618     00 1B 06 F6 | 	mov	arg05, #256
0d61c     00 1C 06 F6 | 	mov	arg06, #0
0d620     42 00 00 FF 
0d624     E8 E4 85 F1 | 	sub	objptr, ##34024
0d628     A8 7F B1 FD | 	call	#_audio096_spin2_play8
0d62c     0B 00 00 FF 
0d630     CC E4 85 F1 | 	sub	objptr, ##5836
0d634     05 00 00 FF 
0d638     B8 13 06 F6 | 	mov	arg01, ##3000
0d63c     2C 86 B1 FD | 	call	#__system___waitms
0d640     50 00 00 FF 
0d644     B4 E4 05 F1 | 	add	objptr, ##41140
0d648     F2 00 68 FC | 	wrlong	#0, objptr
0d64c     50 00 00 FF 
0d650     B4 E4 85 F1 | 	sub	objptr, ##41140
0d654     72 12 06 F6 | 	mov	arg01, #114
0d658     00 14 06 F6 | 	mov	arg02, #0
0d65c     48 FD BF FD | 	call	#_csave_addtoblock
0d660     62 12 06 F6 | 	mov	arg01, #98
0d664     00 14 06 F6 | 	mov	arg02, #0
0d668     3C FD BF FD | 	call	#_csave_addtoblock
0d66c     61 12 06 F6 | 	mov	arg01, #97
0d670     00 14 06 F6 | 	mov	arg02, #0
0d674     30 FD BF FD | 	call	#_csave_addtoblock
0d678     0D 12 06 F6 | 	mov	arg01, #13
0d67c     00 14 06 F6 | 	mov	arg02, #0
0d680     24 FD BF FD | 	call	#_csave_addtoblock
0d684                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0d684                 | ' waitms 3000 
0d684                 | ' 
0d684                 | ' blockptr=0
0d684                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0d684                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0d684     A7 02 68 FC | 	wrlong	#1, fp
0d688     8C 4E 05 F1 | 	add	fp, #140
0d68c     A7 12 02 FB | 	rdlong	arg01, fp
0d690     8C 4E 85 F1 | 	sub	fp, #140
0d694     09 27 02 F6 | 	mov	local01, arg01
0d698     97 06 48 FB | 	callpa	#(@LR__1138-@LR__1137)>>2,fcache_load_ptr_
0d69c                 | LR__1137
0d69c     13 FB C9 FA | 	rdbyte	result1, local01 wz
0d6a0     01 26 06 51 |  if_ne	add	local01, #1
0d6a4     F4 FF 9F 5D |  if_ne	jmp	#LR__1137
0d6a8                 | LR__1138
0d6a8     09 27 82 F1 | 	sub	local01, arg01
0d6ac     13 29 02 F6 | 	mov	local02, local01
0d6b0     01 28 06 F1 | 	add	local02, #1
0d6b4                 | LR__1139
0d6b4     A7 1A 02 FB | 	rdlong	arg05, fp
0d6b8     14 1B 52 F2 | 	cmps	arg05, local02 wc
0d6bc     34 00 90 3D |  if_ae	jmp	#LR__1140
0d6c0     8C 4E 05 F1 | 	add	fp, #140
0d6c4     A7 12 02 FB | 	rdlong	arg01, fp
0d6c8     8C 4E 85 F1 | 	sub	fp, #140
0d6cc     A7 14 02 FB | 	rdlong	arg02, fp
0d6d0     01 16 06 F6 | 	mov	arg03, #1
0d6d4     34 A4 B1 FD | 	call	#__system__Mid_S
0d6d8     FD 12 C2 FA | 	rdbyte	arg01, result1
0d6dc     00 14 06 F6 | 	mov	arg02, #0
0d6e0     C4 FC BF FD | 	call	#_csave_addtoblock
0d6e4     A7 1A 02 FB | 	rdlong	arg05, fp
0d6e8     01 1A 06 F1 | 	add	arg05, #1
0d6ec     A7 1A 62 FC | 	wrlong	arg05, fp
0d6f0     C0 FF 9F FD | 	jmp	#LR__1139
0d6f4                 | LR__1140
0d6f4     00 12 06 F6 | 	mov	arg01, #0
0d6f8     00 14 06 F6 | 	mov	arg02, #0
0d6fc     A8 FC BF FD | 	call	#_csave_addtoblock
0d700     72 12 06 F6 | 	mov	arg01, #114
0d704     00 14 06 F6 | 	mov	arg02, #0
0d708     9C FC BF FD | 	call	#_csave_addtoblock
0d70c     62 12 06 F6 | 	mov	arg01, #98
0d710     00 14 06 F6 | 	mov	arg02, #0
0d714     90 FC BF FD | 	call	#_csave_addtoblock
0d718     73 12 06 F6 | 	mov	arg01, #115
0d71c     00 14 06 F6 | 	mov	arg02, #0
0d720     84 FC BF FD | 	call	#_csave_addtoblock
0d724     0D 12 06 F6 | 	mov	arg01, #13
0d728     00 14 06 F6 | 	mov	arg02, #0
0d72c     78 FC BF FD | 	call	#_csave_addtoblock
0d730     4A 00 00 FF 
0d734     88 E4 05 F1 | 	add	objptr, ##38024
0d738     F2 2A 02 FB | 	rdlong	local03, objptr
0d73c     4A 00 00 FF 
0d740     88 E4 85 F1 | 	sub	objptr, ##38024
0d744     9C 4E 05 F1 | 	add	fp, #156
0d748     A7 2A 62 FC | 	wrlong	local03, fp
0d74c     9C 4E 85 F1 | 	sub	fp, #156
0d750                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0d750                 | ' 
0d750                 | ' saveptr=programstart
0d750                 | ' do
0d750                 | LR__1141
0d750     A0 4E 05 F1 | 	add	fp, #160
0d754     A7 12 02 F6 | 	mov	arg01, fp
0d758     04 4E 85 F1 | 	sub	fp, #4
0d75c     A7 14 02 FB | 	rdlong	arg02, fp
0d760     9C 4E 85 F1 | 	sub	fp, #156
0d764     18 16 06 F6 | 	mov	arg03, #24
0d768     0B 00 00 FF 
0d76c     CC E4 05 F1 | 	add	objptr, ##5836
0d770     7C 75 B1 FD | 	call	#_psram_spin2_read1
0d774     0C 4E 05 F1 | 	add	fp, #12
0d778     A7 12 02 F6 | 	mov	arg01, fp
0d77c     9C 4E 05 F1 | 	add	fp, #156
0d780     A7 14 02 FB | 	rdlong	arg02, fp
0d784     04 4E 05 F1 | 	add	fp, #4
0d788     A7 16 02 FB | 	rdlong	arg03, fp
0d78c     AC 4E 85 F1 | 	sub	fp, #172
0d790     5C 75 B1 FD | 	call	#_psram_spin2_read1
0d794     0B 00 00 FF 
0d798     CC E4 85 F1 | 	sub	objptr, ##5836
0d79c     AC 4E 05 F1 | 	add	fp, #172
0d7a0     A7 12 02 FB | 	rdlong	arg01, fp
0d7a4     AC 4E 85 F1 | 	sub	fp, #172
0d7a8     00 14 06 F6 | 	mov	arg02, #0
0d7ac     F8 FB BF FD | 	call	#_csave_addtoblock
0d7b0                 | ' 
0d7b0                 | '   psram.read1(varptr(header(0)),saveptr,24)
0d7b0                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0d7b0                 | '   csave_addtoblock(header(3),0) ' that's always <255
0d7b0                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0d7b0     A7 00 68 FC | 	wrlong	#0, fp
0d7b4     AC 4E 05 F1 | 	add	fp, #172
0d7b8     A7 2C 02 FB | 	rdlong	local04, fp
0d7bc     AC 4E 85 F1 | 	sub	fp, #172
0d7c0                 | LR__1142
0d7c0     A7 2A 02 FB | 	rdlong	local03, fp
0d7c4     16 2B 52 F2 | 	cmps	local03, local04 wc
0d7c8     2C 00 90 3D |  if_ae	jmp	#LR__1143
0d7cc     A7 2A 02 FB | 	rdlong	local03, fp
0d7d0     0C 4E 05 F1 | 	add	fp, #12
0d7d4     A7 2A 02 F1 | 	add	local03, fp
0d7d8     15 13 C2 FA | 	rdbyte	arg01, local03
0d7dc     00 14 06 F6 | 	mov	arg02, #0
0d7e0     0C 4E 85 F1 | 	sub	fp, #12
0d7e4     C0 FB BF FD | 	call	#_csave_addtoblock
0d7e8     A7 2A 02 FB | 	rdlong	local03, fp
0d7ec     01 2A 06 F1 | 	add	local03, #1
0d7f0     A7 2A 62 FC | 	wrlong	local03, fp
0d7f4     C8 FF 9F FD | 	jmp	#LR__1142
0d7f8                 | LR__1143
0d7f8     B4 4E 05 F1 | 	add	fp, #180
0d7fc     A7 2A 02 FB | 	rdlong	local03, fp
0d800     18 4E 85 F1 | 	sub	fp, #24
0d804     A7 2A 62 FC | 	wrlong	local03, fp
0d808     18 4E 05 F1 | 	add	fp, #24
0d80c     A7 2A 02 FB | 	rdlong	local03, fp
0d810     B4 4E 85 F1 | 	sub	fp, #180
0d814     FF FF 3F FF 
0d818     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0d81c     30 FF 9F 5D |  if_ne	jmp	#LR__1141
0d820     00 12 06 F6 | 	mov	arg01, #0
0d824     01 14 06 F6 | 	mov	arg02, #1
0d828     7C FB BF FD | 	call	#_csave_addtoblock
0d82c     37 00 00 FF 
0d830     10 E4 05 F1 | 	add	objptr, ##28176
0d834     F2 12 02 FB | 	rdlong	arg01, objptr
0d838     37 00 00 FF 
0d83c     10 E4 85 F1 | 	sub	objptr, ##28176
0d840     D4 13 06 F1 | 	add	arg01, #468
0d844     09 01 58 FC | 	wrword	#0, arg01
0d848                 | LR__1144
0d848     A7 F0 03 F6 | 	mov	ptra, fp
0d84c     B2 00 A0 FD | 	call	#popregs_
0d850                 | _test_csave_ret
0d850     2D 00 64 FD | 	ret
0d854                 | 
0d854                 | ' 
0d854                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d854                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d854                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d854                 | ' 
0d854                 | ' 
0d854                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d854                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d854                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d854                 | ' 
0d854                 | ' '-------------------- abs
0d854                 | ' 
0d854                 | ' sub do_abs
0d854                 | _do_abs
0d854     01 4A 05 F6 | 	mov	COUNT_, #1
0d858     A8 00 A0 FD | 	call	#pushregs_
0d85c     0C F0 07 F1 | 	add	ptra, #12
0d860     1C F4 BF FD | 	call	#_pop
0d864     FF 26 02 F6 | 	mov	local01, result3
0d868     A7 FA 61 FC | 	wrlong	result1, fp
0d86c     04 4E 05 F1 | 	add	fp, #4
0d870     A7 FC 61 FC | 	wrlong	result2, fp
0d874     04 4E 05 F1 | 	add	fp, #4
0d878     A7 26 62 FC | 	wrlong	local01, fp
0d87c                 | ' 
0d87c                 | ' t1=pop()
0d87c                 | ' if t1.result_type=result_int then 
0d87c     08 4E 85 F1 | 	sub	fp, #8
0d880     1C 26 0E F2 | 	cmp	local01, #28 wz
0d884     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d888     09 27 42 A6 |  if_e	abs	local01, arg01
0d88c     A7 26 62 AC |  if_e	wrlong	local01, fp
0d890     2C 00 90 AD |  if_e	jmp	#LR__1150
0d894     08 4E 05 F1 | 	add	fp, #8
0d898     A7 26 02 FB | 	rdlong	local01, fp
0d89c     08 4E 85 F1 | 	sub	fp, #8
0d8a0     1E 26 0E F2 | 	cmp	local01, #30 wz
0d8a4     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d8a8     1F FA 05 A4 |  if_e	bitl	result1, #31
0d8ac     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d8b0     08 4E 05 51 |  if_ne	add	fp, #8
0d8b4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d8b8     08 4E 85 51 |  if_ne	sub	fp, #8
0d8bc     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d8c0                 | LR__1150
0d8c0     A7 12 02 F6 | 	mov	arg01, fp
0d8c4     50 F4 BF FD | 	call	#_push
0d8c8     A7 F0 03 F6 | 	mov	ptra, fp
0d8cc     B2 00 A0 FD | 	call	#popregs_
0d8d0                 | _do_abs_ret
0d8d0     2D 00 64 FD | 	ret
0d8d4                 | 
0d8d4                 | ' 
0d8d4                 | ' '-------------------- acos
0d8d4                 | ' 
0d8d4                 | ' sub do_acos
0d8d4                 | _do_acos
0d8d4     01 4A 05 F6 | 	mov	COUNT_, #1
0d8d8     A8 00 A0 FD | 	call	#pushregs_
0d8dc     10 F0 07 F1 | 	add	ptra, #16
0d8e0     4A 00 00 FF 
0d8e4     80 E4 05 F1 | 	add	objptr, ##38016
0d8e8     F2 26 02 FB | 	rdlong	local01, objptr
0d8ec     13 17 02 F6 | 	mov	arg03, local01
0d8f0     01 16 66 F0 | 	shl	arg03, #1
0d8f4     13 17 02 F1 | 	add	arg03, local01
0d8f8     02 16 66 F0 | 	shl	arg03, #2
0d8fc     03 00 00 FF 
0d900     04 E4 85 F1 | 	sub	objptr, ##1540
0d904     F2 16 02 F1 | 	add	arg03, objptr
0d908     0B 17 02 FB | 	rdlong	arg03, arg03
0d90c     0C 4E 05 F1 | 	add	fp, #12
0d910     A7 16 62 FC | 	wrlong	arg03, fp
0d914                 | ' 
0d914                 | ' numpar=compiledline(lineptr_e).result.uresult
0d914                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d914     0C 4E 85 F1 | 	sub	fp, #12
0d918     02 16 16 F2 | 	cmp	arg03, #2 wc
0d91c     47 00 00 FF 
0d920     7C E4 85 F1 | 	sub	objptr, ##36476
0d924     0C 4E 05 C1 |  if_b	add	fp, #12
0d928     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d92c     0C 4E 85 C1 |  if_b	sub	fp, #12
0d930     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0d934     00 12 06 F6 | 	mov	arg01, #0
0d938     64 DD B1 FD | 	call	#__system___getiolock_0599
0d93c     FD 12 02 F6 | 	mov	arg01, result1
0d940     34 80 B1 FD | 	call	#__system___lockmem
0d944     AD 01 00 FF 
0d948     C7 15 06 F6 | 	mov	arg02, ##@LR__5812
0d94c     00 12 06 F6 | 	mov	arg01, #0
0d950     00 16 06 F6 | 	mov	arg03, #0
0d954     14 8D B1 FD | 	call	#__system___basic_print_string
0d958     00 12 06 F6 | 	mov	arg01, #0
0d95c     40 DD B1 FD | 	call	#__system___getiolock_0599
0d960     FD 00 68 FC | 	wrlong	#0, result1
0d964     27 12 06 F6 | 	mov	arg01, #39
0d968     00 14 06 F6 | 	mov	arg02, #0
0d96c     1C 46 B1 FD | 	call	#_printerror
0d970     64 00 90 FD | 	jmp	#LR__1161
0d974                 | LR__1160
0d974     08 F3 BF FD | 	call	#_pop
0d978     FF 26 02 F6 | 	mov	local01, result3
0d97c     A7 FA 61 FC | 	wrlong	result1, fp
0d980     04 4E 05 F1 | 	add	fp, #4
0d984     A7 FC 61 FC | 	wrlong	result2, fp
0d988     04 4E 05 F1 | 	add	fp, #4
0d98c     A7 26 62 FC | 	wrlong	local01, fp
0d990     08 4E 85 F1 | 	sub	fp, #8
0d994     A7 12 02 F6 | 	mov	arg01, fp
0d998     84 F5 BF FD | 	call	#_converttofloat
0d99c     FD 12 02 F6 | 	mov	arg01, result1
0d9a0     8C B9 B1 FD | 	call	#__system____builtin_acosf
0d9a4     FD 12 02 F6 | 	mov	arg01, result1
0d9a8     52 00 00 FF 
0d9ac     58 E4 05 F1 | 	add	objptr, ##42072
0d9b0     F2 14 02 FB | 	rdlong	arg02, objptr
0d9b4     52 00 00 FF 
0d9b8     58 E4 85 F1 | 	sub	objptr, ##42072
0d9bc     30 AE B1 FD | 	call	#__system___float_mul
0d9c0     A7 FA 61 FC | 	wrlong	result1, fp
0d9c4     08 4E 05 F1 | 	add	fp, #8
0d9c8     A7 3C 68 FC | 	wrlong	#30, fp
0d9cc     08 4E 85 F1 | 	sub	fp, #8
0d9d0     A7 12 02 F6 | 	mov	arg01, fp
0d9d4     40 F3 BF FD | 	call	#_push
0d9d8                 | LR__1161
0d9d8     A7 F0 03 F6 | 	mov	ptra, fp
0d9dc     B2 00 A0 FD | 	call	#popregs_
0d9e0                 | _do_acos_ret
0d9e0     2D 00 64 FD | 	ret
0d9e4                 | 
0d9e4                 | ' 
0d9e4                 | ' '-------------------- asc
0d9e4                 | ' 
0d9e4                 | ' sub do_asc
0d9e4                 | _do_asc
0d9e4     01 4A 05 F6 | 	mov	COUNT_, #1
0d9e8     A8 00 A0 FD | 	call	#pushregs_
0d9ec     14 F0 07 F1 | 	add	ptra, #20
0d9f0     4A 00 00 FF 
0d9f4     80 E4 05 F1 | 	add	objptr, ##38016
0d9f8     F2 26 02 FB | 	rdlong	local01, objptr
0d9fc     13 17 02 F6 | 	mov	arg03, local01
0da00     01 16 66 F0 | 	shl	arg03, #1
0da04     13 17 02 F1 | 	add	arg03, local01
0da08     02 16 66 F0 | 	shl	arg03, #2
0da0c     03 00 00 FF 
0da10     04 E4 85 F1 | 	sub	objptr, ##1540
0da14     F2 16 02 F1 | 	add	arg03, objptr
0da18     0B 17 02 FB | 	rdlong	arg03, arg03
0da1c     0C 4E 05 F1 | 	add	fp, #12
0da20     A7 16 62 FC | 	wrlong	arg03, fp
0da24                 | ' 
0da24                 | ' numpar=compiledline(lineptr_e).result.uresult
0da24                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0da24     0C 4E 85 F1 | 	sub	fp, #12
0da28     02 16 16 F2 | 	cmp	arg03, #2 wc
0da2c     47 00 00 FF 
0da30     7C E4 85 F1 | 	sub	objptr, ##36476
0da34     0C 4E 05 C1 |  if_b	add	fp, #12
0da38     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0da3c     0C 4E 85 C1 |  if_b	sub	fp, #12
0da40     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0da44     00 12 06 F6 | 	mov	arg01, #0
0da48     54 DC B1 FD | 	call	#__system___getiolock_0599
0da4c     FD 12 02 F6 | 	mov	arg01, result1
0da50     24 7F B1 FD | 	call	#__system___lockmem
0da54     AD 01 00 FF 
0da58     CE 15 06 F6 | 	mov	arg02, ##@LR__5813
0da5c     00 12 06 F6 | 	mov	arg01, #0
0da60     00 16 06 F6 | 	mov	arg03, #0
0da64     04 8C B1 FD | 	call	#__system___basic_print_string
0da68     00 12 06 F6 | 	mov	arg01, #0
0da6c     30 DC B1 FD | 	call	#__system___getiolock_0599
0da70     FD 00 68 FC | 	wrlong	#0, result1
0da74     27 12 06 F6 | 	mov	arg01, #39
0da78     00 14 06 F6 | 	mov	arg02, #0
0da7c     0C 45 B1 FD | 	call	#_printerror
0da80     B4 00 90 FD | 	jmp	#LR__1173
0da84                 | LR__1170
0da84     F8 F1 BF FD | 	call	#_pop
0da88     FF 16 02 F6 | 	mov	arg03, result3
0da8c     A7 FA 61 FC | 	wrlong	result1, fp
0da90     04 4E 05 F1 | 	add	fp, #4
0da94     A7 FC 61 FC | 	wrlong	result2, fp
0da98     04 4E 05 F1 | 	add	fp, #4
0da9c     A7 16 62 FC | 	wrlong	arg03, fp
0daa0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0daa0     08 4E 85 F1 | 	sub	fp, #8
0daa4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0daa8     18 00 90 5D |  if_ne	jmp	#LR__1171
0daac     A7 12 02 FB | 	rdlong	arg01, fp
0dab0     44 F3 BF FD | 	call	#_convertstring
0dab4     A7 FA 61 FC | 	wrlong	result1, fp
0dab8     08 4E 05 F1 | 	add	fp, #8
0dabc     A7 3E 68 FC | 	wrlong	#31, fp
0dac0     08 4E 85 F1 | 	sub	fp, #8
0dac4                 | LR__1171
0dac4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dac4     08 4E 05 F1 | 	add	fp, #8
0dac8     A7 16 02 FB | 	rdlong	arg03, fp
0dacc     08 4E 85 F1 | 	sub	fp, #8
0dad0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dad4     40 00 90 AD |  if_e	jmp	#LR__1172
0dad8     00 12 06 F6 | 	mov	arg01, #0
0dadc     C0 DB B1 FD | 	call	#__system___getiolock_0599
0dae0     FD 12 02 F6 | 	mov	arg01, result1
0dae4     90 7E B1 FD | 	call	#__system___lockmem
0dae8     AD 01 00 FF 
0daec     D4 15 06 F6 | 	mov	arg02, ##@LR__5814
0daf0     00 12 06 F6 | 	mov	arg01, #0
0daf4     00 16 06 F6 | 	mov	arg03, #0
0daf8     70 8B B1 FD | 	call	#__system___basic_print_string
0dafc     00 12 06 F6 | 	mov	arg01, #0
0db00     9C DB B1 FD | 	call	#__system___getiolock_0599
0db04     FD 00 68 FC | 	wrlong	#0, result1
0db08     0F 12 06 F6 | 	mov	arg01, #15
0db0c     00 14 06 F6 | 	mov	arg02, #0
0db10     78 44 B1 FD | 	call	#_printerror
0db14     20 00 90 FD | 	jmp	#LR__1173
0db18                 | LR__1172
0db18     A7 26 02 FB | 	rdlong	local01, fp
0db1c     13 27 C2 FA | 	rdbyte	local01, local01
0db20     A7 26 62 FC | 	wrlong	local01, fp
0db24     08 4E 05 F1 | 	add	fp, #8
0db28     A7 38 68 FC | 	wrlong	#28, fp
0db2c     08 4E 85 F1 | 	sub	fp, #8
0db30     A7 12 02 F6 | 	mov	arg01, fp
0db34     E0 F1 BF FD | 	call	#_push
0db38                 | LR__1173
0db38     A7 F0 03 F6 | 	mov	ptra, fp
0db3c     B2 00 A0 FD | 	call	#popregs_
0db40                 | _do_asc_ret
0db40     2D 00 64 FD | 	ret
0db44                 | 
0db44                 | ' 
0db44                 | ' '-------------------- asin
0db44                 | ' 
0db44                 | ' sub do_asin
0db44                 | _do_asin
0db44     01 4A 05 F6 | 	mov	COUNT_, #1
0db48     A8 00 A0 FD | 	call	#pushregs_
0db4c     10 F0 07 F1 | 	add	ptra, #16
0db50     4A 00 00 FF 
0db54     80 E4 05 F1 | 	add	objptr, ##38016
0db58     F2 26 02 FB | 	rdlong	local01, objptr
0db5c     13 17 02 F6 | 	mov	arg03, local01
0db60     01 16 66 F0 | 	shl	arg03, #1
0db64     13 17 02 F1 | 	add	arg03, local01
0db68     02 16 66 F0 | 	shl	arg03, #2
0db6c     03 00 00 FF 
0db70     04 E4 85 F1 | 	sub	objptr, ##1540
0db74     F2 16 02 F1 | 	add	arg03, objptr
0db78     0B 17 02 FB | 	rdlong	arg03, arg03
0db7c     0C 4E 05 F1 | 	add	fp, #12
0db80     A7 16 62 FC | 	wrlong	arg03, fp
0db84                 | ' 
0db84                 | ' numpar=compiledline(lineptr_e).result.uresult
0db84                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0db84     0C 4E 85 F1 | 	sub	fp, #12
0db88     02 16 16 F2 | 	cmp	arg03, #2 wc
0db8c     47 00 00 FF 
0db90     7C E4 85 F1 | 	sub	objptr, ##36476
0db94     0C 4E 05 C1 |  if_b	add	fp, #12
0db98     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0db9c     0C 4E 85 C1 |  if_b	sub	fp, #12
0dba0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0dba4     00 12 06 F6 | 	mov	arg01, #0
0dba8     F4 DA B1 FD | 	call	#__system___getiolock_0599
0dbac     FD 12 02 F6 | 	mov	arg01, result1
0dbb0     C4 7D B1 FD | 	call	#__system___lockmem
0dbb4     AD 01 00 FF 
0dbb8     DA 15 06 F6 | 	mov	arg02, ##@LR__5815
0dbbc     00 12 06 F6 | 	mov	arg01, #0
0dbc0     00 16 06 F6 | 	mov	arg03, #0
0dbc4     A4 8A B1 FD | 	call	#__system___basic_print_string
0dbc8     00 12 06 F6 | 	mov	arg01, #0
0dbcc     D0 DA B1 FD | 	call	#__system___getiolock_0599
0dbd0     FD 00 68 FC | 	wrlong	#0, result1
0dbd4     27 12 06 F6 | 	mov	arg01, #39
0dbd8     00 14 06 F6 | 	mov	arg02, #0
0dbdc     AC 43 B1 FD | 	call	#_printerror
0dbe0     64 00 90 FD | 	jmp	#LR__1181
0dbe4                 | LR__1180
0dbe4     98 F0 BF FD | 	call	#_pop
0dbe8     FF 26 02 F6 | 	mov	local01, result3
0dbec     A7 FA 61 FC | 	wrlong	result1, fp
0dbf0     04 4E 05 F1 | 	add	fp, #4
0dbf4     A7 FC 61 FC | 	wrlong	result2, fp
0dbf8     04 4E 05 F1 | 	add	fp, #4
0dbfc     A7 26 62 FC | 	wrlong	local01, fp
0dc00     08 4E 85 F1 | 	sub	fp, #8
0dc04     A7 12 02 F6 | 	mov	arg01, fp
0dc08     14 F3 BF FD | 	call	#_converttofloat
0dc0c     FD 12 02 F6 | 	mov	arg01, result1
0dc10     D0 B6 B1 FD | 	call	#__system____builtin_asinf
0dc14     FD 12 02 F6 | 	mov	arg01, result1
0dc18     52 00 00 FF 
0dc1c     58 E4 05 F1 | 	add	objptr, ##42072
0dc20     F2 14 02 FB | 	rdlong	arg02, objptr
0dc24     52 00 00 FF 
0dc28     58 E4 85 F1 | 	sub	objptr, ##42072
0dc2c     C0 AB B1 FD | 	call	#__system___float_mul
0dc30     A7 FA 61 FC | 	wrlong	result1, fp
0dc34     08 4E 05 F1 | 	add	fp, #8
0dc38     A7 3C 68 FC | 	wrlong	#30, fp
0dc3c     08 4E 85 F1 | 	sub	fp, #8
0dc40     A7 12 02 F6 | 	mov	arg01, fp
0dc44     D0 F0 BF FD | 	call	#_push
0dc48                 | LR__1181
0dc48     A7 F0 03 F6 | 	mov	ptra, fp
0dc4c     B2 00 A0 FD | 	call	#popregs_
0dc50                 | _do_asin_ret
0dc50     2D 00 64 FD | 	ret
0dc54                 | 
0dc54                 | ' 
0dc54                 | ' '-------------------- atn
0dc54                 | ' 
0dc54                 | ' sub do_atn
0dc54                 | _do_atn
0dc54     01 4A 05 F6 | 	mov	COUNT_, #1
0dc58     A8 00 A0 FD | 	call	#pushregs_
0dc5c     10 F0 07 F1 | 	add	ptra, #16
0dc60     4A 00 00 FF 
0dc64     80 E4 05 F1 | 	add	objptr, ##38016
0dc68     F2 26 02 FB | 	rdlong	local01, objptr
0dc6c     13 17 02 F6 | 	mov	arg03, local01
0dc70     01 16 66 F0 | 	shl	arg03, #1
0dc74     13 17 02 F1 | 	add	arg03, local01
0dc78     02 16 66 F0 | 	shl	arg03, #2
0dc7c     03 00 00 FF 
0dc80     04 E4 85 F1 | 	sub	objptr, ##1540
0dc84     F2 16 02 F1 | 	add	arg03, objptr
0dc88     0B 17 02 FB | 	rdlong	arg03, arg03
0dc8c     0C 4E 05 F1 | 	add	fp, #12
0dc90     A7 16 62 FC | 	wrlong	arg03, fp
0dc94                 | ' 
0dc94                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc94                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dc94     0C 4E 85 F1 | 	sub	fp, #12
0dc98     02 16 16 F2 | 	cmp	arg03, #2 wc
0dc9c     47 00 00 FF 
0dca0     7C E4 85 F1 | 	sub	objptr, ##36476
0dca4     0C 4E 05 C1 |  if_b	add	fp, #12
0dca8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dcac     0C 4E 85 C1 |  if_b	sub	fp, #12
0dcb0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1190
0dcb4     00 12 06 F6 | 	mov	arg01, #0
0dcb8     E4 D9 B1 FD | 	call	#__system___getiolock_0599
0dcbc     FD 12 02 F6 | 	mov	arg01, result1
0dcc0     B4 7C B1 FD | 	call	#__system___lockmem
0dcc4     AD 01 00 FF 
0dcc8     E1 15 06 F6 | 	mov	arg02, ##@LR__5816
0dccc     00 12 06 F6 | 	mov	arg01, #0
0dcd0     00 16 06 F6 | 	mov	arg03, #0
0dcd4     94 89 B1 FD | 	call	#__system___basic_print_string
0dcd8     00 12 06 F6 | 	mov	arg01, #0
0dcdc     C0 D9 B1 FD | 	call	#__system___getiolock_0599
0dce0     FD 00 68 FC | 	wrlong	#0, result1
0dce4     27 12 06 F6 | 	mov	arg01, #39
0dce8     00 14 06 F6 | 	mov	arg02, #0
0dcec     9C 42 B1 FD | 	call	#_printerror
0dcf0     6C 00 90 FD | 	jmp	#LR__1191
0dcf4                 | LR__1190
0dcf4     88 EF BF FD | 	call	#_pop
0dcf8     FF 26 02 F6 | 	mov	local01, result3
0dcfc     A7 FA 61 FC | 	wrlong	result1, fp
0dd00     04 4E 05 F1 | 	add	fp, #4
0dd04     A7 FC 61 FC | 	wrlong	result2, fp
0dd08     04 4E 05 F1 | 	add	fp, #4
0dd0c     A7 26 62 FC | 	wrlong	local01, fp
0dd10     08 4E 85 F1 | 	sub	fp, #8
0dd14     A7 12 02 F6 | 	mov	arg01, fp
0dd18     04 F2 BF FD | 	call	#_converttofloat
0dd1c     FD 12 02 F6 | 	mov	arg01, result1
0dd20     00 C0 1F FF 
0dd24     00 14 06 F6 | 	mov	arg02, ##1065353216
0dd28     50 B6 B1 FD | 	call	#__system____builtin_atan2f
0dd2c     FD 12 02 F6 | 	mov	arg01, result1
0dd30     52 00 00 FF 
0dd34     58 E4 05 F1 | 	add	objptr, ##42072
0dd38     F2 14 02 FB | 	rdlong	arg02, objptr
0dd3c     52 00 00 FF 
0dd40     58 E4 85 F1 | 	sub	objptr, ##42072
0dd44     A8 AA B1 FD | 	call	#__system___float_mul
0dd48     A7 FA 61 FC | 	wrlong	result1, fp
0dd4c     08 4E 05 F1 | 	add	fp, #8
0dd50     A7 3C 68 FC | 	wrlong	#30, fp
0dd54     08 4E 85 F1 | 	sub	fp, #8
0dd58     A7 12 02 F6 | 	mov	arg01, fp
0dd5c     B8 EF BF FD | 	call	#_push
0dd60                 | LR__1191
0dd60     A7 F0 03 F6 | 	mov	ptra, fp
0dd64     B2 00 A0 FD | 	call	#popregs_
0dd68                 | _do_atn_ret
0dd68     2D 00 64 FD | 	ret
0dd6c                 | 
0dd6c                 | ' 
0dd6c                 | ' '-------------------- beep
0dd6c                 | ' 
0dd6c                 | ' sub do_beep
0dd6c                 | _do_beep
0dd6c     02 4A 05 F6 | 	mov	COUNT_, #2
0dd70     A8 00 A0 FD | 	call	#pushregs_
0dd74     20 F0 07 F1 | 	add	ptra, #32
0dd78     04 EF BF FD | 	call	#_pop
0dd7c     FD 26 02 F6 | 	mov	local01, result1
0dd80     FE 1C 02 F6 | 	mov	arg06, result2
0dd84     FF 28 02 F6 | 	mov	local02, result3
0dd88     0C 4E 05 F1 | 	add	fp, #12
0dd8c     A7 26 62 FC | 	wrlong	local01, fp
0dd90     04 4E 05 F1 | 	add	fp, #4
0dd94     A7 1C 62 FC | 	wrlong	arg06, fp
0dd98     04 4E 05 F1 | 	add	fp, #4
0dd9c     A7 28 62 FC | 	wrlong	local02, fp
0dda0     14 4E 85 F1 | 	sub	fp, #20
0dda4     D8 EE BF FD | 	call	#_pop
0dda8     A7 FA 61 FC | 	wrlong	result1, fp
0ddac     04 4E 05 F1 | 	add	fp, #4
0ddb0     A7 FC 61 FC | 	wrlong	result2, fp
0ddb4     04 4E 05 F1 | 	add	fp, #4
0ddb8     A7 FE 61 FC | 	wrlong	result3, fp
0ddbc                 | ' 
0ddbc                 | ' t2=pop()
0ddbc                 | ' t1=pop()
0ddbc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0ddbc     08 4E 85 F1 | 	sub	fp, #8
0ddc0     1C FE 0D F2 | 	cmp	result3, #28 wz
0ddc4     08 4E 05 51 |  if_ne	add	fp, #8
0ddc8     A7 28 02 5B |  if_ne	rdlong	local02, fp
0ddcc     08 4E 85 51 |  if_ne	sub	fp, #8
0ddd0     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0ddd4     A7 26 02 AB |  if_e	rdlong	local01, fp
0ddd8     18 4E 05 A1 |  if_e	add	fp, #24
0dddc     A7 26 62 AC |  if_e	wrlong	local01, fp
0dde0     18 4E 85 A1 |  if_e	sub	fp, #24
0dde4     14 00 90 AD |  if_e	jmp	#LR__1200
0dde8     A7 12 02 F6 | 	mov	arg01, fp
0ddec     74 F0 BF FD | 	call	#_converttoint
0ddf0     18 4E 05 F1 | 	add	fp, #24
0ddf4     A7 FA 61 FC | 	wrlong	result1, fp
0ddf8     18 4E 85 F1 | 	sub	fp, #24
0ddfc                 | LR__1200
0ddfc     1C 4E 05 F1 | 	add	fp, #28
0de00     A7 FE 48 FC | 	wrbyte	#127, fp
0de04     01 4E 05 F1 | 	add	fp, #1
0de08     A7 00 49 FC | 	wrbyte	#128, fp
0de0c     01 4E 85 F1 | 	sub	fp, #1
0de10     A7 14 02 F6 | 	mov	arg02, fp
0de14     04 4E 85 F1 | 	sub	fp, #4
0de18     A7 16 02 FB | 	rdlong	arg03, fp
0de1c     18 4E 85 F1 | 	sub	fp, #24
0de20     01 16 66 F0 | 	shl	arg03, #1
0de24     07 12 06 F6 | 	mov	arg01, #7
0de28     0E 18 C6 F9 | 	decod	arg04, #14
0de2c     02 1A 06 F6 | 	mov	arg05, #2
0de30     00 1C 06 F6 | 	mov	arg06, #0
0de34     0B 00 00 FF 
0de38     CC E4 05 F1 | 	add	objptr, ##5836
0de3c     94 77 B1 FD | 	call	#_audio096_spin2_play8
0de40     0B 00 00 FF 
0de44     CC E4 85 F1 | 	sub	objptr, ##5836
0de48     0C 4E 05 F1 | 	add	fp, #12
0de4c     A7 12 02 F6 | 	mov	arg01, fp
0de50     0C 4E 85 F1 | 	sub	fp, #12
0de54     C0 EE BF FD | 	call	#_push
0de58     64 D7 B0 FD | 	call	#_do_waitms
0de5c     07 12 06 F6 | 	mov	arg01, #7
0de60     0B 00 00 FF 
0de64     CC E4 05 F1 | 	add	objptr, ##5836
0de68     0C 78 B1 FD | 	call	#_audio096_spin2_stop
0de6c     0B 00 00 FF 
0de70     CC E4 85 F1 | 	sub	objptr, ##5836
0de74     A7 F0 03 F6 | 	mov	ptra, fp
0de78     B2 00 A0 FD | 	call	#popregs_
0de7c                 | _do_beep_ret
0de7c     2D 00 64 FD | 	ret
0de80                 | 
0de80                 | ' 
0de80                 | ' '-------------------- blit
0de80                 | ' 
0de80                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0de80                 | ' sub do_blit
0de80                 | _do_blit
0de80     02 4A 05 F6 | 	mov	COUNT_, #2
0de84     A8 00 A0 FD | 	call	#pushregs_
0de88     3C F0 07 F1 | 	add	ptra, #60
0de8c     4A 00 00 FF 
0de90     80 E4 05 F1 | 	add	objptr, ##38016
0de94     F2 26 02 FB | 	rdlong	local01, objptr
0de98     13 25 02 F6 | 	mov	arg10, local01
0de9c     01 24 66 F0 | 	shl	arg10, #1
0dea0     13 25 02 F1 | 	add	arg10, local01
0dea4     02 24 66 F0 | 	shl	arg10, #2
0dea8     03 00 00 FF 
0deac     04 E4 85 F1 | 	sub	objptr, ##1540
0deb0     F2 24 02 F1 | 	add	arg10, objptr
0deb4     12 25 02 FB | 	rdlong	arg10, arg10
0deb8     38 4E 05 F1 | 	add	fp, #56
0debc     A7 24 62 FC | 	wrlong	arg10, fp
0dec0                 | ' 
0dec0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dec0                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0dec0     38 4E 85 F1 | 	sub	fp, #56
0dec4     0A 24 0E F2 | 	cmp	arg10, #10 wz
0dec8     47 00 00 FF 
0decc     7C E4 85 F1 | 	sub	objptr, ##36476
0ded0     38 4E 05 51 |  if_ne	add	fp, #56
0ded4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0ded8     38 4E 85 51 |  if_ne	sub	fp, #56
0dedc     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0dee0     50 00 90 AD |  if_e	jmp	#LR__1210
0dee4     00 12 06 F6 | 	mov	arg01, #0
0dee8     B4 D7 B1 FD | 	call	#__system___getiolock_0599
0deec     FD 12 02 F6 | 	mov	arg01, result1
0def0     84 7A B1 FD | 	call	#__system___lockmem
0def4     AD 01 00 FF 
0def8     E7 15 06 F6 | 	mov	arg02, ##@LR__5817
0defc     00 12 06 F6 | 	mov	arg01, #0
0df00     00 16 06 F6 | 	mov	arg03, #0
0df04     64 87 B1 FD | 	call	#__system___basic_print_string
0df08     00 12 06 F6 | 	mov	arg01, #0
0df0c     90 D7 B1 FD | 	call	#__system___getiolock_0599
0df10     FD 00 68 FC | 	wrlong	#0, result1
0df14     50 00 00 FF 
0df18     F0 E4 05 F1 | 	add	objptr, ##41200
0df1c     F2 14 02 FB | 	rdlong	arg02, objptr
0df20     50 00 00 FF 
0df24     F0 E4 85 F1 | 	sub	objptr, ##41200
0df28     27 12 06 F6 | 	mov	arg01, #39
0df2c     5C 40 B1 FD | 	call	#_printerror
0df30     44 01 90 FD | 	jmp	#LR__1215
0df34                 | LR__1210
0df34                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0df34     38 4E 05 F1 | 	add	fp, #56
0df38     A7 28 02 FB | 	rdlong	local02, fp
0df3c     01 28 86 F1 | 	sub	local02, #1
0df40     04 4E 85 F1 | 	sub	fp, #4
0df44     A7 28 62 FC | 	wrlong	local02, fp
0df48     34 4E 85 F1 | 	sub	fp, #52
0df4c                 | LR__1211
0df4c     38 4E 05 F1 | 	add	fp, #56
0df50     A7 26 02 FB | 	rdlong	local01, fp
0df54     01 26 86 F1 | 	sub	local01, #1
0df58     04 4E 85 F1 | 	sub	fp, #4
0df5c     A7 24 02 FB | 	rdlong	arg10, fp
0df60     34 4E 85 F1 | 	sub	fp, #52
0df64     13 25 1A F2 | 	cmp	arg10, local01 wcz
0df68     54 00 90 1D |  if_a	jmp	#LR__1212
0df6c     10 ED BF FD | 	call	#_pop
0df70     A7 FA 61 FC | 	wrlong	result1, fp
0df74     04 4E 05 F1 | 	add	fp, #4
0df78     A7 FC 61 FC | 	wrlong	result2, fp
0df7c     04 4E 05 F1 | 	add	fp, #4
0df80     A7 FE 61 FC | 	wrlong	result3, fp
0df84     2C 4E 05 F1 | 	add	fp, #44
0df88     A7 28 02 FB | 	rdlong	local02, fp
0df8c     02 28 66 F0 | 	shl	local02, #2
0df90     28 4E 85 F1 | 	sub	fp, #40
0df94     A7 28 02 F1 | 	add	local02, fp
0df98     0C 4E 85 F1 | 	sub	fp, #12
0df9c     A7 12 02 F6 | 	mov	arg01, fp
0dfa0     C0 EE BF FD | 	call	#_converttoint
0dfa4     14 FB 61 FC | 	wrlong	result1, local02
0dfa8     34 4E 05 F1 | 	add	fp, #52
0dfac     A7 28 02 FB | 	rdlong	local02, fp
0dfb0     01 28 86 F1 | 	sub	local02, #1
0dfb4     A7 28 62 FC | 	wrlong	local02, fp
0dfb8     34 4E 85 F1 | 	sub	fp, #52
0dfbc     8C FF 9F FD | 	jmp	#LR__1211
0dfc0                 | LR__1212
0dfc0                 | ' if numpar=10 then 
0dfc0     38 4E 05 F1 | 	add	fp, #56
0dfc4     A7 28 02 FB | 	rdlong	local02, fp
0dfc8     38 4E 85 F1 | 	sub	fp, #56
0dfcc     0A 28 0E F2 | 	cmp	local02, #10 wz
0dfd0     5C 00 90 5D |  if_ne	jmp	#LR__1213
0dfd4     0C 4E 05 F1 | 	add	fp, #12
0dfd8     A7 12 02 FB | 	rdlong	arg01, fp
0dfdc     04 4E 05 F1 | 	add	fp, #4
0dfe0     A7 14 02 FB | 	rdlong	arg02, fp
0dfe4     04 4E 05 F1 | 	add	fp, #4
0dfe8     A7 16 02 FB | 	rdlong	arg03, fp
0dfec     04 4E 05 F1 | 	add	fp, #4
0dff0     A7 18 02 FB | 	rdlong	arg04, fp
0dff4     04 4E 05 F1 | 	add	fp, #4
0dff8     A7 1A 02 FB | 	rdlong	arg05, fp
0dffc     04 4E 05 F1 | 	add	fp, #4
0e000     A7 1C 02 FB | 	rdlong	arg06, fp
0e004     04 4E 05 F1 | 	add	fp, #4
0e008     A7 1E 02 FB | 	rdlong	arg07, fp
0e00c     04 4E 05 F1 | 	add	fp, #4
0e010     A7 20 02 FB | 	rdlong	arg08, fp
0e014     04 4E 05 F1 | 	add	fp, #4
0e018     A7 22 02 FB | 	rdlong	arg09, fp
0e01c     04 4E 05 F1 | 	add	fp, #4
0e020     A7 24 02 FB | 	rdlong	arg10, fp
0e024     30 4E 85 F1 | 	sub	fp, #48
0e028     38 67 B1 FD | 	call	#_hg010b_spin2_blit
0e02c     48 00 90 FD | 	jmp	#LR__1214
0e030                 | LR__1213
0e030     F2 1E 02 FB | 	rdlong	arg07, objptr
0e034     0C 4E 05 F1 | 	add	fp, #12
0e038     A7 14 02 FB | 	rdlong	arg02, fp
0e03c     04 4E 05 F1 | 	add	fp, #4
0e040     A7 16 02 FB | 	rdlong	arg03, fp
0e044     04 4E 05 F1 | 	add	fp, #4
0e048     A7 18 02 FB | 	rdlong	arg04, fp
0e04c     04 4E 05 F1 | 	add	fp, #4
0e050     A7 1A 02 FB | 	rdlong	arg05, fp
0e054     04 4E 05 F1 | 	add	fp, #4
0e058     A7 20 02 FB | 	rdlong	arg08, fp
0e05c     04 4E 05 F1 | 	add	fp, #4
0e060     A7 22 02 FB | 	rdlong	arg09, fp
0e064     20 4E 85 F1 | 	sub	fp, #32
0e068     0F 13 02 F6 | 	mov	arg01, arg07
0e06c     0A 1C C6 F9 | 	decod	arg06, #10
0e070     0A 24 C6 F9 | 	decod	arg10, #10
0e074     EC 66 B1 FD | 	call	#_hg010b_spin2_blit
0e078                 | LR__1214
0e078                 | LR__1215
0e078     A7 F0 03 F6 | 	mov	ptra, fp
0e07c     B2 00 A0 FD | 	call	#popregs_
0e080                 | _do_blit_ret
0e080     2D 00 64 FD | 	ret
0e084                 | 
0e084                 | ' 
0e084                 | ' 
0e084                 | ' '-------------------- bin$
0e084                 | ' 
0e084                 | ' sub do_bin
0e084                 | _do_bin
0e084     01 4A 05 F6 | 	mov	COUNT_, #1
0e088     A8 00 A0 FD | 	call	#pushregs_
0e08c     18 F0 07 F1 | 	add	ptra, #24
0e090     4A 00 00 FF 
0e094     80 E4 05 F1 | 	add	objptr, ##38016
0e098     F2 26 02 FB | 	rdlong	local01, objptr
0e09c     13 17 02 F6 | 	mov	arg03, local01
0e0a0     01 16 66 F0 | 	shl	arg03, #1
0e0a4     13 17 02 F1 | 	add	arg03, local01
0e0a8     02 16 66 F0 | 	shl	arg03, #2
0e0ac     03 00 00 FF 
0e0b0     04 E4 85 F1 | 	sub	objptr, ##1540
0e0b4     F2 16 02 F1 | 	add	arg03, objptr
0e0b8     0B 17 02 FB | 	rdlong	arg03, arg03
0e0bc     0C 4E 05 F1 | 	add	fp, #12
0e0c0     A7 16 62 FC | 	wrlong	arg03, fp
0e0c4                 | ' 
0e0c4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e0c4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e0c4     0C 4E 85 F1 | 	sub	fp, #12
0e0c8     03 16 16 F2 | 	cmp	arg03, #3 wc
0e0cc     47 00 00 FF 
0e0d0     7C E4 85 F1 | 	sub	objptr, ##36476
0e0d4     0C 4E 05 C1 |  if_b	add	fp, #12
0e0d8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e0dc     0C 4E 85 C1 |  if_b	sub	fp, #12
0e0e0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1220
0e0e4     00 12 06 F6 | 	mov	arg01, #0
0e0e8     B4 D5 B1 FD | 	call	#__system___getiolock_0599
0e0ec     FD 12 02 F6 | 	mov	arg01, result1
0e0f0     84 78 B1 FD | 	call	#__system___lockmem
0e0f4     AD 01 00 FF 
0e0f8     EE 15 06 F6 | 	mov	arg02, ##@LR__5818
0e0fc     00 12 06 F6 | 	mov	arg01, #0
0e100     00 16 06 F6 | 	mov	arg03, #0
0e104     64 85 B1 FD | 	call	#__system___basic_print_string
0e108     00 12 06 F6 | 	mov	arg01, #0
0e10c     90 D5 B1 FD | 	call	#__system___getiolock_0599
0e110     FD 00 68 FC | 	wrlong	#0, result1
0e114     27 12 06 F6 | 	mov	arg01, #39
0e118     00 14 06 F6 | 	mov	arg02, #0
0e11c     6C 3E B1 FD | 	call	#_printerror
0e120     B8 00 90 FD | 	jmp	#LR__1223
0e124                 | LR__1220
0e124                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e124     0C 4E 05 F1 | 	add	fp, #12
0e128     A7 26 02 FB | 	rdlong	local01, fp
0e12c     0C 4E 85 F1 | 	sub	fp, #12
0e130     02 26 0E F2 | 	cmp	local01, #2 wz
0e134     38 00 90 5D |  if_ne	jmp	#LR__1221
0e138     44 EB BF FD | 	call	#_pop
0e13c     FF 26 02 F6 | 	mov	local01, result3
0e140     A7 FA 61 FC | 	wrlong	result1, fp
0e144     04 4E 05 F1 | 	add	fp, #4
0e148     A7 FC 61 FC | 	wrlong	result2, fp
0e14c     04 4E 05 F1 | 	add	fp, #4
0e150     A7 26 62 FC | 	wrlong	local01, fp
0e154     08 4E 85 F1 | 	sub	fp, #8
0e158     A7 12 02 F6 | 	mov	arg01, fp
0e15c     04 ED BF FD | 	call	#_converttoint
0e160     14 4E 05 F1 | 	add	fp, #20
0e164     A7 FA 61 FC | 	wrlong	result1, fp
0e168     14 4E 85 F1 | 	sub	fp, #20
0e16c     0C 00 90 FD | 	jmp	#LR__1222
0e170                 | LR__1221
0e170     14 4E 05 F1 | 	add	fp, #20
0e174     A7 00 68 FC | 	wrlong	#0, fp
0e178     14 4E 85 F1 | 	sub	fp, #20
0e17c                 | LR__1222
0e17c     00 EB BF FD | 	call	#_pop
0e180     FF 26 02 F6 | 	mov	local01, result3
0e184     A7 FA 61 FC | 	wrlong	result1, fp
0e188     04 4E 05 F1 | 	add	fp, #4
0e18c     A7 FC 61 FC | 	wrlong	result2, fp
0e190     04 4E 05 F1 | 	add	fp, #4
0e194     A7 26 62 FC | 	wrlong	local01, fp
0e198     08 4E 85 F1 | 	sub	fp, #8
0e19c     A7 12 02 F6 | 	mov	arg01, fp
0e1a0     C0 EC BF FD | 	call	#_converttoint
0e1a4     10 4E 05 F1 | 	add	fp, #16
0e1a8     A7 FA 61 FC | 	wrlong	result1, fp
0e1ac     FD 12 02 F6 | 	mov	arg01, result1
0e1b0     04 4E 05 F1 | 	add	fp, #4
0e1b4     A7 14 02 FB | 	rdlong	arg02, fp
0e1b8     14 4E 85 F1 | 	sub	fp, #20
0e1bc     02 16 06 F6 | 	mov	arg03, #2
0e1c0     84 9A B1 FD | 	call	#__system__Number_S
0e1c4     A7 FA 61 FC | 	wrlong	result1, fp
0e1c8     08 4E 05 F1 | 	add	fp, #8
0e1cc     A7 3E 68 FC | 	wrlong	#31, fp
0e1d0     08 4E 85 F1 | 	sub	fp, #8
0e1d4     A7 12 02 F6 | 	mov	arg01, fp
0e1d8     3C EB BF FD | 	call	#_push
0e1dc                 | LR__1223
0e1dc     A7 F0 03 F6 | 	mov	ptra, fp
0e1e0     B2 00 A0 FD | 	call	#popregs_
0e1e4                 | _do_bin_ret
0e1e4     2D 00 64 FD | 	ret
0e1e8                 | 
0e1e8                 | ' 
0e1e8                 | ' '-------------------- box
0e1e8                 | ' 
0e1e8                 | ' sub do_box
0e1e8                 | _do_box
0e1e8     03 4A 05 F6 | 	mov	COUNT_, #3
0e1ec     A8 00 A0 FD | 	call	#pushregs_
0e1f0     30 F0 07 F1 | 	add	ptra, #48
0e1f4     88 EA BF FD | 	call	#_pop
0e1f8     FD 1A 02 F6 | 	mov	arg05, result1
0e1fc     FE 18 02 F6 | 	mov	arg04, result2
0e200     FF 16 02 F6 | 	mov	arg03, result3
0e204     24 4E 05 F1 | 	add	fp, #36
0e208     A7 1A 62 FC | 	wrlong	arg05, fp
0e20c     04 4E 05 F1 | 	add	fp, #4
0e210     A7 18 62 FC | 	wrlong	arg04, fp
0e214     04 4E 05 F1 | 	add	fp, #4
0e218     A7 16 62 FC | 	wrlong	arg03, fp
0e21c     2C 4E 85 F1 | 	sub	fp, #44
0e220     5C EA BF FD | 	call	#_pop
0e224     FD 1A 02 F6 | 	mov	arg05, result1
0e228     FE 18 02 F6 | 	mov	arg04, result2
0e22c     FF 16 02 F6 | 	mov	arg03, result3
0e230     18 4E 05 F1 | 	add	fp, #24
0e234     A7 1A 62 FC | 	wrlong	arg05, fp
0e238     04 4E 05 F1 | 	add	fp, #4
0e23c     A7 18 62 FC | 	wrlong	arg04, fp
0e240     04 4E 05 F1 | 	add	fp, #4
0e244     A7 16 62 FC | 	wrlong	arg03, fp
0e248     20 4E 85 F1 | 	sub	fp, #32
0e24c     30 EA BF FD | 	call	#_pop
0e250     FD 1A 02 F6 | 	mov	arg05, result1
0e254     FE 18 02 F6 | 	mov	arg04, result2
0e258     FF 26 02 F6 | 	mov	local01, result3
0e25c     0C 4E 05 F1 | 	add	fp, #12
0e260     A7 1A 62 FC | 	wrlong	arg05, fp
0e264     04 4E 05 F1 | 	add	fp, #4
0e268     A7 18 62 FC | 	wrlong	arg04, fp
0e26c     04 4E 05 F1 | 	add	fp, #4
0e270     A7 26 62 FC | 	wrlong	local01, fp
0e274     14 4E 85 F1 | 	sub	fp, #20
0e278     04 EA BF FD | 	call	#_pop
0e27c     A7 FA 61 FC | 	wrlong	result1, fp
0e280     04 4E 05 F1 | 	add	fp, #4
0e284     A7 FC 61 FC | 	wrlong	result2, fp
0e288     04 4E 05 F1 | 	add	fp, #4
0e28c     A7 FE 61 FC | 	wrlong	result3, fp
0e290                 | ' 
0e290                 | ' t4=pop()
0e290                 | ' t3=pop()
0e290                 | ' t2=pop()
0e290                 | ' t1=pop()
0e290                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e290     FF 1A 02 F6 | 	mov	arg05, result3
0e294     08 4E 85 F1 | 	sub	fp, #8
0e298     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e29c     08 4E 05 51 |  if_ne	add	fp, #8
0e2a0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e2a4     08 4E 85 51 |  if_ne	sub	fp, #8
0e2a8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e2ac     A8 00 90 5D |  if_ne	jmp	#LR__1230
0e2b0     14 4E 05 F1 | 	add	fp, #20
0e2b4     A7 26 02 FB | 	rdlong	local01, fp
0e2b8     14 4E 85 F1 | 	sub	fp, #20
0e2bc     1C 26 0E F2 | 	cmp	local01, #28 wz
0e2c0     14 4E 05 51 |  if_ne	add	fp, #20
0e2c4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e2c8     14 4E 85 51 |  if_ne	sub	fp, #20
0e2cc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e2d0     84 00 90 5D |  if_ne	jmp	#LR__1230
0e2d4     20 4E 05 F1 | 	add	fp, #32
0e2d8     A7 26 02 FB | 	rdlong	local01, fp
0e2dc     20 4E 85 F1 | 	sub	fp, #32
0e2e0     1C 26 0E F2 | 	cmp	local01, #28 wz
0e2e4     20 4E 05 51 |  if_ne	add	fp, #32
0e2e8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e2ec     20 4E 85 51 |  if_ne	sub	fp, #32
0e2f0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e2f4     60 00 90 5D |  if_ne	jmp	#LR__1230
0e2f8     2C 4E 05 F1 | 	add	fp, #44
0e2fc     A7 26 02 FB | 	rdlong	local01, fp
0e300     2C 4E 85 F1 | 	sub	fp, #44
0e304     1C 26 0E F2 | 	cmp	local01, #28 wz
0e308     2C 4E 05 51 |  if_ne	add	fp, #44
0e30c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e310     2C 4E 85 51 |  if_ne	sub	fp, #44
0e314     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e318     3C 00 90 5D |  if_ne	jmp	#LR__1230
0e31c     A7 12 02 FB | 	rdlong	arg01, fp
0e320     0C 4E 05 F1 | 	add	fp, #12
0e324     A7 14 02 FB | 	rdlong	arg02, fp
0e328     0C 4E 05 F1 | 	add	fp, #12
0e32c     A7 16 02 FB | 	rdlong	arg03, fp
0e330     0C 4E 05 F1 | 	add	fp, #12
0e334     A7 18 02 FB | 	rdlong	arg04, fp
0e338     24 4E 85 F1 | 	sub	fp, #36
0e33c     37 00 00 FF 
0e340     28 E4 05 F1 | 	add	objptr, ##28200
0e344     F2 1A 02 FB | 	rdlong	arg05, objptr
0e348     37 00 00 FF 
0e34c     28 E4 85 F1 | 	sub	objptr, ##28200
0e350     D8 56 B1 FD | 	call	#_hg010b_spin2_box
0e354                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e354     6C 00 90 FD | 	jmp	#LR__1231
0e358                 | LR__1230
0e358     A7 12 02 F6 | 	mov	arg01, fp
0e35c     04 EB BF FD | 	call	#_converttoint
0e360     FD 28 02 F6 | 	mov	local02, result1
0e364     0C 4E 05 F1 | 	add	fp, #12
0e368     A7 12 02 F6 | 	mov	arg01, fp
0e36c     0C 4E 85 F1 | 	sub	fp, #12
0e370     F0 EA BF FD | 	call	#_converttoint
0e374     FD 2A 02 F6 | 	mov	local03, result1
0e378     18 4E 05 F1 | 	add	fp, #24
0e37c     A7 12 02 F6 | 	mov	arg01, fp
0e380     18 4E 85 F1 | 	sub	fp, #24
0e384     DC EA BF FD | 	call	#_converttoint
0e388     FD 26 02 F6 | 	mov	local01, result1
0e38c     24 4E 05 F1 | 	add	fp, #36
0e390     A7 12 02 F6 | 	mov	arg01, fp
0e394     24 4E 85 F1 | 	sub	fp, #36
0e398     C8 EA BF FD | 	call	#_converttoint
0e39c     FD 18 02 F6 | 	mov	arg04, result1
0e3a0     37 00 00 FF 
0e3a4     28 E4 05 F1 | 	add	objptr, ##28200
0e3a8     F2 1A 02 FB | 	rdlong	arg05, objptr
0e3ac     37 00 00 FF 
0e3b0     28 E4 85 F1 | 	sub	objptr, ##28200
0e3b4     14 13 02 F6 | 	mov	arg01, local02
0e3b8     15 15 02 F6 | 	mov	arg02, local03
0e3bc     13 17 02 F6 | 	mov	arg03, local01
0e3c0     68 56 B1 FD | 	call	#_hg010b_spin2_box
0e3c4                 | LR__1231
0e3c4     A7 F0 03 F6 | 	mov	ptra, fp
0e3c8     B2 00 A0 FD | 	call	#popregs_
0e3cc                 | _do_box_ret
0e3cc     2D 00 64 FD | 	ret
0e3d0                 | 
0e3d0                 | ' 
0e3d0                 | ' '-------------------- brun
0e3d0                 | ' 
0e3d0                 | ' sub do_brun
0e3d0                 | _do_brun
0e3d0     08 4A 05 F6 | 	mov	COUNT_, #8
0e3d4     A8 00 A0 FD | 	call	#pushregs_
0e3d8     A4 E8 BF FD | 	call	#_pop
0e3dc     FE 1A 02 F6 | 	mov	arg05, result2
0e3e0     FF 18 02 F6 | 	mov	arg04, result3
0e3e4     FD 26 02 F6 | 	mov	local01, result1
0e3e8     0D 29 02 F6 | 	mov	local02, arg05
0e3ec     0C 2B 02 F6 | 	mov	local03, arg04
0e3f0                 | ' 
0e3f0                 | ' t1=pop() 
0e3f0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e3f0     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e3f4     10 00 90 5D |  if_ne	jmp	#LR__1240
0e3f8     13 13 02 F6 | 	mov	arg01, local01
0e3fc     F8 E9 BF FD | 	call	#_convertstring
0e400     FD 26 02 F6 | 	mov	local01, result1
0e404     1F 2A 06 F6 | 	mov	local03, #31
0e408                 | LR__1240
0e408                 | ' if t1.result_type=result_string then
0e408     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e40c     EC 01 90 5D |  if_ne	jmp	#LR__1244
0e410     13 2D 02 F6 | 	mov	local04, local01
0e414                 | '   filename=t1.result.sresult
0e414                 | '   if left$(filename,1)="/" then 
0e414     16 13 02 F6 | 	mov	arg01, local04
0e418     01 14 06 F6 | 	mov	arg02, #1
0e41c     D4 95 B1 FD | 	call	#__system__Left_S
0e420     FD 12 02 F6 | 	mov	arg01, result1
0e424     AD 01 00 FF 
0e428     F5 15 06 F6 | 	mov	arg02, ##@LR__5819
0e42c     70 75 B1 FD | 	call	#__system___string_cmp
0e430     00 FA 0D F2 | 	cmp	result1, #0 wz
0e434     16 2F 02 A6 |  if_e	mov	local05, local04
0e438     14 00 90 AD |  if_e	jmp	#LR__1241
0e43c     AD 01 00 FF 
0e440     F7 13 06 F6 | 	mov	arg01, ##@LR__5820
0e444     16 15 02 F6 | 	mov	arg02, local04
0e448     88 75 B1 FD | 	call	#__system___string_concat
0e44c     FD 2E 02 F6 | 	mov	local05, result1
0e450                 | LR__1241
0e450                 | '   open fullfilename for input as #9
0e450     09 12 06 F6 | 	mov	arg01, #9
0e454     17 15 02 F6 | 	mov	arg02, local05
0e458     00 16 06 F6 | 	mov	arg03, #0
0e45c     1C 81 B1 FD | 	call	#__system___basic_open_string
0e460     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e464     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e468     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e46c     FD 30 0A F6 | 	mov	local06, result1 wz
0e470                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e470     8C 00 90 AD |  if_e	jmp	#LR__1242
0e474     00 12 06 F6 | 	mov	arg01, #0
0e478     24 D2 B1 FD | 	call	#__system___getiolock_0599
0e47c     FD 12 02 F6 | 	mov	arg01, result1
0e480     F4 74 B1 FD | 	call	#__system___lockmem
0e484     AE 01 00 FF 
0e488     00 14 06 F6 | 	mov	arg02, ##@LR__5821
0e48c     00 12 06 F6 | 	mov	arg01, #0
0e490     00 16 06 F6 | 	mov	arg03, #0
0e494     D4 81 B1 FD | 	call	#__system___basic_print_string
0e498     00 12 06 F6 | 	mov	arg01, #0
0e49c     18 15 02 F6 | 	mov	arg02, local06
0e4a0     00 16 06 F6 | 	mov	arg03, #0
0e4a4     0A 18 06 F6 | 	mov	arg04, #10
0e4a8     04 82 B1 FD | 	call	#__system___basic_print_integer
0e4ac     AE 01 00 FF 
0e4b0     0E 14 06 F6 | 	mov	arg02, ##@LR__5822
0e4b4     00 12 06 F6 | 	mov	arg01, #0
0e4b8     00 16 06 F6 | 	mov	arg03, #0
0e4bc     AC 81 B1 FD | 	call	#__system___basic_print_string
0e4c0     18 13 02 F6 | 	mov	arg01, local06
0e4c4     3C 9E B1 FD | 	call	#__system___strerror
0e4c8     FD 14 02 F6 | 	mov	arg02, result1
0e4cc     00 12 06 F6 | 	mov	arg01, #0
0e4d0     00 16 06 F6 | 	mov	arg03, #0
0e4d4     94 81 B1 FD | 	call	#__system___basic_print_string
0e4d8     00 12 06 F6 | 	mov	arg01, #0
0e4dc     0A 14 06 F6 | 	mov	arg02, #10
0e4e0     00 16 06 F6 | 	mov	arg03, #0
0e4e4     2C 81 B1 FD | 	call	#__system___basic_print_char
0e4e8     00 12 06 F6 | 	mov	arg01, #0
0e4ec     B0 D1 B1 FD | 	call	#__system___getiolock_0599
0e4f0     FD 00 68 FC | 	wrlong	#0, result1
0e4f4     09 12 06 F6 | 	mov	arg01, #9
0e4f8     D4 C7 B1 FD | 	call	#__system__close
0e4fc     FC 00 90 FD | 	jmp	#LR__1245
0e500                 | LR__1242
0e500     01 32 06 F6 | 	mov	local07, #1
0e504     00 34 06 F6 | 	mov	local08, #0
0e508                 | '   do
0e508                 | LR__1243
0e508                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e508     4E 00 00 FF 
0e50c     B4 E4 05 F1 | 	add	objptr, ##40116
0e510     F2 16 02 F6 | 	mov	arg03, objptr
0e514     4E 00 00 FF 
0e518     B4 E4 85 F1 | 	sub	objptr, ##40116
0e51c     09 12 06 F6 | 	mov	arg01, #9
0e520     19 15 02 F6 | 	mov	arg02, local07
0e524     0A 18 C6 F9 | 	decod	arg04, #10
0e528     01 1A 06 F6 | 	mov	arg05, #1
0e52c     B8 82 B1 FD | 	call	#__system___basic_get
0e530     FD 30 02 F6 | 	mov	local06, result1
0e534     FD 32 02 F1 | 	add	local07, result1
0e538     4E 00 00 FF 
0e53c     B4 E4 05 F1 | 	add	objptr, ##40116
0e540     F2 12 02 F6 | 	mov	arg01, objptr
0e544     1A 15 02 F6 | 	mov	arg02, local08
0e548     0A 16 C6 F9 | 	decod	arg03, #10
0e54c     42 00 00 FF 
0e550     E8 E5 85 F1 | 	sub	objptr, ##34280
0e554     34 68 B1 FD | 	call	#_psram_spin2_write
0e558     0B 00 00 FF 
0e55c     CC E4 85 F1 | 	sub	objptr, ##5836
0e560     18 35 02 F1 | 	add	local08, local06
0e564     02 00 00 FF 
0e568     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e56c     E0 03 00 AF 
0e570     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e574     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1243
0e578     36 00 00 FF 
0e57c     FC E5 05 F1 | 	add	objptr, ##28156
0e580     F2 12 02 FB | 	rdlong	arg01, objptr
0e584     03 12 62 FD | 	cogstop	arg01
0e588     04 E4 05 F1 | 	add	objptr, #4
0e58c     F2 12 02 FB | 	rdlong	arg01, objptr
0e590     03 12 62 FD | 	cogstop	arg01
0e594     04 E4 05 F1 | 	add	objptr, #4
0e598     F2 12 02 FB | 	rdlong	arg01, objptr
0e59c     03 12 62 FD | 	cogstop	arg01
0e5a0     19 00 00 FF 
0e5a4     3C E5 05 F1 | 	add	objptr, ##13116
0e5a8     F2 12 02 FB | 	rdlong	arg01, objptr
0e5ac     03 12 62 FD | 	cogstop	arg01
0e5b0     18 00 00 FF 
0e5b4     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e5b8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e5bc     18 00 00 FF 
0e5c0     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e5c4     19 00 00 FF 
0e5c8     34 E5 85 F1 | 	sub	objptr, ##13108
0e5cc     1E 34 06 F6 | 	mov	local08, #30
0e5d0     28 E4 61 FD | 	setq	objptr
0e5d4     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e5d8     01 34 66 C6 |  if_b	neg	local08, #1
0e5dc     1B 00 00 FF 
0e5e0     B8 E4 05 F1 | 	add	objptr, ##14008
0e5e4     F2 34 62 FC | 	wrlong	local08, objptr
0e5e8     52 00 00 FF 
0e5ec     C4 E4 85 F1 | 	sub	objptr, ##42180
0e5f0     00 12 06 F6 | 	mov	arg01, #0
0e5f4     01 12 62 FD | 	cogid	arg01
0e5f8     03 12 62 FD | 	cogstop	arg01
0e5fc                 | LR__1244
0e5fc                 | LR__1245
0e5fc     A7 F0 03 F6 | 	mov	ptra, fp
0e600     B2 00 A0 FD | 	call	#popregs_
0e604                 | _do_brun_ret
0e604     2D 00 64 FD | 	ret
0e608                 | 
0e608                 | ' 
0e608                 | ' '-------------------- cd
0e608                 | ' 
0e608                 | ' sub do_cd
0e608                 | _do_cd
0e608     06 4A 05 F6 | 	mov	COUNT_, #6
0e60c     A8 00 A0 FD | 	call	#pushregs_
0e610     AE 01 00 FF 
0e614     11 12 06 F6 | 	mov	arg01, ##@LR__5823
0e618     31 14 06 F6 | 	mov	arg02, #49
0e61c     B8 D1 B1 FD | 	call	#__system___basic_dir
0e620     5C E6 BF FD | 	call	#_pop
0e624     FE 18 02 F6 | 	mov	arg04, result2
0e628     FF 16 02 F6 | 	mov	arg03, result3
0e62c     FD 26 02 F6 | 	mov	local01, result1
0e630     0C 29 02 F6 | 	mov	local02, arg04
0e634     0B 2B 02 F6 | 	mov	local03, arg03
0e638                 | ' t1=pop()
0e638                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e638     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e63c     10 00 90 5D |  if_ne	jmp	#LR__1250
0e640     13 13 02 F6 | 	mov	arg01, local01
0e644     B0 E7 BF FD | 	call	#_convertstring
0e648     FD 26 02 F6 | 	mov	local01, result1
0e64c     1F 2A 06 F6 | 	mov	local03, #31
0e650                 | LR__1250
0e650                 | ' if t1.result_type<>result_string then printerror(15): return
0e650     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e654     10 00 90 AD |  if_e	jmp	#LR__1251
0e658     0F 12 06 F6 | 	mov	arg01, #15
0e65c     00 14 06 F6 | 	mov	arg02, #0
0e660     28 39 B1 FD | 	call	#_printerror
0e664     48 05 90 FD | 	jmp	#LR__1269
0e668                 | LR__1251
0e668     13 2D 02 F6 | 	mov	local04, local01
0e66c                 | ' newdir$=t1.result.sresult
0e66c                 | ' if newdir$=".." then 
0e66c     AE 01 00 FF 
0e670     13 14 06 F6 | 	mov	arg02, ##@LR__5824
0e674     16 13 02 F6 | 	mov	arg01, local04
0e678     24 73 B1 FD | 	call	#__system___string_cmp
0e67c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e680     C4 01 90 5D |  if_ne	jmp	#LR__1258
0e684     4A 00 00 FF 
0e688     94 E4 05 F1 | 	add	objptr, ##38036
0e68c     F2 12 02 FB | 	rdlong	arg01, objptr
0e690     4A 00 00 FF 
0e694     94 E4 85 F1 | 	sub	objptr, ##38036
0e698     09 2F 02 F6 | 	mov	local05, arg01
0e69c     97 06 48 FB | 	callpa	#(@LR__1253-@LR__1252)>>2,fcache_load_ptr_
0e6a0                 | LR__1252
0e6a0     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e6a4     01 2E 06 51 |  if_ne	add	local05, #1
0e6a8     F4 FF 9F 5D |  if_ne	jmp	#LR__1252
0e6ac                 | LR__1253
0e6ac     17 13 C2 F2 | 	subr	arg01, local05
0e6b0     4A 00 00 FF 
0e6b4     94 E4 05 F1 | 	add	objptr, ##38036
0e6b8     F2 14 02 FB | 	rdlong	arg02, objptr
0e6bc     4A 00 00 FF 
0e6c0     94 E4 85 F1 | 	sub	objptr, ##38036
0e6c4     AE 01 00 FF 
0e6c8     16 16 06 F6 | 	mov	arg03, ##@LR__5825
0e6cc     70 99 B1 FD | 	call	#__system__InstrRev
0e6d0     FD 2C 02 F6 | 	mov	local04, result1
0e6d4                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e6d4     02 2C 56 F2 | 	cmps	local04, #2 wc
0e6d8     28 00 90 CD |  if_b	jmp	#LR__1254
0e6dc     4A 00 00 FF 
0e6e0     94 E4 05 F1 | 	add	objptr, ##38036
0e6e4     F2 12 02 FB | 	rdlong	arg01, objptr
0e6e8     4A 00 00 FF 
0e6ec     94 E4 85 F1 | 	sub	objptr, ##38036
0e6f0     01 2C 86 F1 | 	sub	local04, #1
0e6f4     16 15 02 F6 | 	mov	arg02, local04
0e6f8     F8 92 B1 FD | 	call	#__system__Left_S
0e6fc     FD 2C 02 F6 | 	mov	local04, result1
0e700     08 00 90 FD | 	jmp	#LR__1255
0e704                 | LR__1254
0e704     AE 01 00 FF 
0e708     18 2C 06 F6 | 	mov	local04, ##@LR__5826
0e70c                 | LR__1255
0e70c     16 13 02 F6 | 	mov	arg01, local04
0e710     F0 78 B1 FD | 	call	#__system___chdir
0e714     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e718     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e71c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e720     FD 30 0A F6 | 	mov	local06, result1 wz
0e724                 | '   chdir newdir$
0e724                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e724     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e728     A4 00 90 AD |  if_e	jmp	#LR__1256
0e72c     00 12 06 F6 | 	mov	arg01, #0
0e730     6C CF B1 FD | 	call	#__system___getiolock_0599
0e734     FD 12 02 F6 | 	mov	arg01, result1
0e738     3C 72 B1 FD | 	call	#__system___lockmem
0e73c     AE 01 00 FF 
0e740     1A 14 06 F6 | 	mov	arg02, ##@LR__5827
0e744     00 12 06 F6 | 	mov	arg01, #0
0e748     00 16 06 F6 | 	mov	arg03, #0
0e74c     1C 7F B1 FD | 	call	#__system___basic_print_string
0e750     00 12 06 F6 | 	mov	arg01, #0
0e754     18 15 02 F6 | 	mov	arg02, local06
0e758     00 16 06 F6 | 	mov	arg03, #0
0e75c     0A 18 06 F6 | 	mov	arg04, #10
0e760     4C 7F B1 FD | 	call	#__system___basic_print_integer
0e764     AE 01 00 FF 
0e768     28 14 06 F6 | 	mov	arg02, ##@LR__5828
0e76c     00 12 06 F6 | 	mov	arg01, #0
0e770     00 16 06 F6 | 	mov	arg03, #0
0e774     F4 7E B1 FD | 	call	#__system___basic_print_string
0e778     45 00 00 FF 
0e77c     50 E5 05 F1 | 	add	objptr, ##35664
0e780     F2 14 02 FB | 	rdlong	arg02, objptr
0e784     45 00 00 FF 
0e788     50 E5 85 F1 | 	sub	objptr, ##35664
0e78c     00 12 06 F6 | 	mov	arg01, #0
0e790     00 16 06 F6 | 	mov	arg03, #0
0e794     D4 7E B1 FD | 	call	#__system___basic_print_string
0e798     00 12 06 F6 | 	mov	arg01, #0
0e79c     0A 14 06 F6 | 	mov	arg02, #10
0e7a0     00 16 06 F6 | 	mov	arg03, #0
0e7a4     6C 7E B1 FD | 	call	#__system___basic_print_char
0e7a8     00 12 06 F6 | 	mov	arg01, #0
0e7ac     F0 CE B1 FD | 	call	#__system___getiolock_0599
0e7b0     FD 00 68 FC | 	wrlong	#0, result1
0e7b4     4A 00 00 FF 
0e7b8     94 E4 05 F1 | 	add	objptr, ##38036
0e7bc     F2 12 02 FB | 	rdlong	arg01, objptr
0e7c0     4A 00 00 FF 
0e7c4     94 E4 85 F1 | 	sub	objptr, ##38036
0e7c8     38 78 B1 FD | 	call	#__system___chdir
0e7cc     14 00 90 FD | 	jmp	#LR__1257
0e7d0                 | LR__1256
0e7d0     4A 00 00 FF 
0e7d4     94 E4 05 F1 | 	add	objptr, ##38036
0e7d8     F2 2C 62 FC | 	wrlong	local04, objptr
0e7dc     4A 00 00 FF 
0e7e0     94 E4 85 F1 | 	sub	objptr, ##38036
0e7e4                 | LR__1257
0e7e4                 | '   print "Current directory: ";currentdir$
0e7e4     00 12 06 F6 | 	mov	arg01, #0
0e7e8     B4 CE B1 FD | 	call	#__system___getiolock_0599
0e7ec     FD 12 02 F6 | 	mov	arg01, result1
0e7f0     84 71 B1 FD | 	call	#__system___lockmem
0e7f4     AE 01 00 FF 
0e7f8     2B 14 06 F6 | 	mov	arg02, ##@LR__5829
0e7fc     00 12 06 F6 | 	mov	arg01, #0
0e800     00 16 06 F6 | 	mov	arg03, #0
0e804     64 7E B1 FD | 	call	#__system___basic_print_string
0e808     4A 00 00 FF 
0e80c     94 E4 05 F1 | 	add	objptr, ##38036
0e810     F2 14 02 FB | 	rdlong	arg02, objptr
0e814     4A 00 00 FF 
0e818     94 E4 85 F1 | 	sub	objptr, ##38036
0e81c     00 12 06 F6 | 	mov	arg01, #0
0e820     00 16 06 F6 | 	mov	arg03, #0
0e824     44 7E B1 FD | 	call	#__system___basic_print_string
0e828     00 12 06 F6 | 	mov	arg01, #0
0e82c     0A 14 06 F6 | 	mov	arg02, #10
0e830     00 16 06 F6 | 	mov	arg03, #0
0e834     DC 7D B1 FD | 	call	#__system___basic_print_char
0e838     00 12 06 F6 | 	mov	arg01, #0
0e83c     60 CE B1 FD | 	call	#__system___getiolock_0599
0e840     FD 00 68 FC | 	wrlong	#0, result1
0e844                 | '   return
0e844     68 03 90 FD | 	jmp	#LR__1269
0e848                 | LR__1258
0e848                 | ' if left$(newdir$,1)="/" then 
0e848     16 13 02 F6 | 	mov	arg01, local04
0e84c     01 14 06 F6 | 	mov	arg02, #1
0e850     A0 91 B1 FD | 	call	#__system__Left_S
0e854     FD 12 02 F6 | 	mov	arg01, result1
0e858     AE 01 00 FF 
0e85c     3F 14 06 F6 | 	mov	arg02, ##@LR__5830
0e860     3C 71 B1 FD | 	call	#__system___string_cmp
0e864     00 FA 0D F2 | 	cmp	result1, #0 wz
0e868     3C 01 90 5D |  if_ne	jmp	#LR__1261
0e86c     16 13 02 F6 | 	mov	arg01, local04
0e870     90 77 B1 FD | 	call	#__system___chdir
0e874     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e878     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e87c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e880     FD 30 0A F6 | 	mov	local06, result1 wz
0e884                 | '   chdir(newdir$)
0e884                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e884     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e888     A4 00 90 AD |  if_e	jmp	#LR__1259
0e88c     00 12 06 F6 | 	mov	arg01, #0
0e890     0C CE B1 FD | 	call	#__system___getiolock_0599
0e894     FD 12 02 F6 | 	mov	arg01, result1
0e898     DC 70 B1 FD | 	call	#__system___lockmem
0e89c     AE 01 00 FF 
0e8a0     41 14 06 F6 | 	mov	arg02, ##@LR__5831
0e8a4     00 12 06 F6 | 	mov	arg01, #0
0e8a8     00 16 06 F6 | 	mov	arg03, #0
0e8ac     BC 7D B1 FD | 	call	#__system___basic_print_string
0e8b0     00 12 06 F6 | 	mov	arg01, #0
0e8b4     18 15 02 F6 | 	mov	arg02, local06
0e8b8     00 16 06 F6 | 	mov	arg03, #0
0e8bc     0A 18 06 F6 | 	mov	arg04, #10
0e8c0     EC 7D B1 FD | 	call	#__system___basic_print_integer
0e8c4     AE 01 00 FF 
0e8c8     4F 14 06 F6 | 	mov	arg02, ##@LR__5832
0e8cc     00 12 06 F6 | 	mov	arg01, #0
0e8d0     00 16 06 F6 | 	mov	arg03, #0
0e8d4     94 7D B1 FD | 	call	#__system___basic_print_string
0e8d8     45 00 00 FF 
0e8dc     50 E5 05 F1 | 	add	objptr, ##35664
0e8e0     F2 14 02 FB | 	rdlong	arg02, objptr
0e8e4     45 00 00 FF 
0e8e8     50 E5 85 F1 | 	sub	objptr, ##35664
0e8ec     00 12 06 F6 | 	mov	arg01, #0
0e8f0     00 16 06 F6 | 	mov	arg03, #0
0e8f4     74 7D B1 FD | 	call	#__system___basic_print_string
0e8f8     00 12 06 F6 | 	mov	arg01, #0
0e8fc     0A 14 06 F6 | 	mov	arg02, #10
0e900     00 16 06 F6 | 	mov	arg03, #0
0e904     0C 7D B1 FD | 	call	#__system___basic_print_char
0e908     00 12 06 F6 | 	mov	arg01, #0
0e90c     90 CD B1 FD | 	call	#__system___getiolock_0599
0e910     FD 00 68 FC | 	wrlong	#0, result1
0e914     4A 00 00 FF 
0e918     94 E4 05 F1 | 	add	objptr, ##38036
0e91c     F2 12 02 FB | 	rdlong	arg01, objptr
0e920     4A 00 00 FF 
0e924     94 E4 85 F1 | 	sub	objptr, ##38036
0e928     D8 76 B1 FD | 	call	#__system___chdir
0e92c     14 00 90 FD | 	jmp	#LR__1260
0e930                 | LR__1259
0e930     4A 00 00 FF 
0e934     94 E4 05 F1 | 	add	objptr, ##38036
0e938     F2 2C 62 FC | 	wrlong	local04, objptr
0e93c     4A 00 00 FF 
0e940     94 E4 85 F1 | 	sub	objptr, ##38036
0e944                 | LR__1260
0e944                 | '   print "Current directory: ";currentdir$
0e944     00 12 06 F6 | 	mov	arg01, #0
0e948     54 CD B1 FD | 	call	#__system___getiolock_0599
0e94c     FD 12 02 F6 | 	mov	arg01, result1
0e950     24 70 B1 FD | 	call	#__system___lockmem
0e954     AE 01 00 FF 
0e958     52 14 06 F6 | 	mov	arg02, ##@LR__5833
0e95c     00 12 06 F6 | 	mov	arg01, #0
0e960     00 16 06 F6 | 	mov	arg03, #0
0e964     04 7D B1 FD | 	call	#__system___basic_print_string
0e968     4A 00 00 FF 
0e96c     94 E4 05 F1 | 	add	objptr, ##38036
0e970     F2 14 02 FB | 	rdlong	arg02, objptr
0e974     4A 00 00 FF 
0e978     94 E4 85 F1 | 	sub	objptr, ##38036
0e97c     00 12 06 F6 | 	mov	arg01, #0
0e980     00 16 06 F6 | 	mov	arg03, #0
0e984     E4 7C B1 FD | 	call	#__system___basic_print_string
0e988     00 12 06 F6 | 	mov	arg01, #0
0e98c     0A 14 06 F6 | 	mov	arg02, #10
0e990     00 16 06 F6 | 	mov	arg03, #0
0e994     7C 7C B1 FD | 	call	#__system___basic_print_char
0e998     00 12 06 F6 | 	mov	arg01, #0
0e99c     00 CD B1 FD | 	call	#__system___getiolock_0599
0e9a0     FD 00 68 FC | 	wrlong	#0, result1
0e9a4                 | '   return
0e9a4     08 02 90 FD | 	jmp	#LR__1269
0e9a8                 | LR__1261
0e9a8                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e9a8     4A 00 00 FF 
0e9ac     94 E4 05 F1 | 	add	objptr, ##38036
0e9b0     F2 12 02 FB | 	rdlong	arg01, objptr
0e9b4     4A 00 00 FF 
0e9b8     94 E4 85 F1 | 	sub	objptr, ##38036
0e9bc     AE 01 00 FF 
0e9c0     66 14 06 F6 | 	mov	arg02, ##@LR__5834
0e9c4     D8 6F B1 FD | 	call	#__system___string_cmp
0e9c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0e9cc     34 00 90 AD |  if_e	jmp	#LR__1262
0e9d0     4A 00 00 FF 
0e9d4     94 E4 05 F1 | 	add	objptr, ##38036
0e9d8     F2 12 02 FB | 	rdlong	arg01, objptr
0e9dc     4A 00 00 FF 
0e9e0     94 E4 85 F1 | 	sub	objptr, ##38036
0e9e4     AE 01 00 FF 
0e9e8     68 14 06 F6 | 	mov	arg02, ##@LR__5835
0e9ec     E4 6F B1 FD | 	call	#__system___string_concat
0e9f0     FD 12 02 F6 | 	mov	arg01, result1
0e9f4     16 15 02 F6 | 	mov	arg02, local04
0e9f8     D8 6F B1 FD | 	call	#__system___string_concat
0e9fc     FD 2C 02 F6 | 	mov	local04, result1
0ea00     20 00 90 FD | 	jmp	#LR__1263
0ea04                 | LR__1262
0ea04     4A 00 00 FF 
0ea08     94 E4 05 F1 | 	add	objptr, ##38036
0ea0c     F2 12 02 FB | 	rdlong	arg01, objptr
0ea10     4A 00 00 FF 
0ea14     94 E4 85 F1 | 	sub	objptr, ##38036
0ea18     16 15 02 F6 | 	mov	arg02, local04
0ea1c     B4 6F B1 FD | 	call	#__system___string_concat
0ea20     FD 2C 02 F6 | 	mov	local04, result1
0ea24                 | LR__1263
0ea24                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ea24     16 13 02 F6 | 	mov	arg01, local04
0ea28     01 14 06 F6 | 	mov	arg02, #1
0ea2c     4C 90 B1 FD | 	call	#__system__Right_S
0ea30     FD 12 02 F6 | 	mov	arg01, result1
0ea34     AE 01 00 FF 
0ea38     6A 14 06 F6 | 	mov	arg02, ##@LR__5836
0ea3c     60 6F B1 FD | 	call	#__system___string_cmp
0ea40     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea44     30 00 90 5D |  if_ne	jmp	#LR__1266
0ea48     16 13 02 F6 | 	mov	arg01, local04
0ea4c     09 2F 02 F6 | 	mov	local05, arg01
0ea50     97 06 48 FB | 	callpa	#(@LR__1265-@LR__1264)>>2,fcache_load_ptr_
0ea54                 | LR__1264
0ea54     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ea58     01 2E 06 51 |  if_ne	add	local05, #1
0ea5c     F4 FF 9F 5D |  if_ne	jmp	#LR__1264
0ea60                 | LR__1265
0ea60     09 2F 82 F1 | 	sub	local05, arg01
0ea64     17 15 02 F6 | 	mov	arg02, local05
0ea68     01 14 86 F1 | 	sub	arg02, #1
0ea6c     16 13 02 F6 | 	mov	arg01, local04
0ea70     80 8F B1 FD | 	call	#__system__Left_S
0ea74     FD 2C 02 F6 | 	mov	local04, result1
0ea78                 | LR__1266
0ea78     16 13 02 F6 | 	mov	arg01, local04
0ea7c     84 75 B1 FD | 	call	#__system___chdir
0ea80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ea84     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ea88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ea8c     FD 30 0A F6 | 	mov	local06, result1 wz
0ea90                 | '   chdir(newdir$)
0ea90                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ea90     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ea94     A4 00 90 AD |  if_e	jmp	#LR__1267
0ea98     00 12 06 F6 | 	mov	arg01, #0
0ea9c     00 CC B1 FD | 	call	#__system___getiolock_0599
0eaa0     FD 12 02 F6 | 	mov	arg01, result1
0eaa4     D0 6E B1 FD | 	call	#__system___lockmem
0eaa8     AE 01 00 FF 
0eaac     6C 14 06 F6 | 	mov	arg02, ##@LR__5837
0eab0     00 12 06 F6 | 	mov	arg01, #0
0eab4     00 16 06 F6 | 	mov	arg03, #0
0eab8     B0 7B B1 FD | 	call	#__system___basic_print_string
0eabc     00 12 06 F6 | 	mov	arg01, #0
0eac0     18 15 02 F6 | 	mov	arg02, local06
0eac4     00 16 06 F6 | 	mov	arg03, #0
0eac8     0A 18 06 F6 | 	mov	arg04, #10
0eacc     E0 7B B1 FD | 	call	#__system___basic_print_integer
0ead0     AE 01 00 FF 
0ead4     7A 14 06 F6 | 	mov	arg02, ##@LR__5838
0ead8     00 12 06 F6 | 	mov	arg01, #0
0eadc     00 16 06 F6 | 	mov	arg03, #0
0eae0     88 7B B1 FD | 	call	#__system___basic_print_string
0eae4     45 00 00 FF 
0eae8     50 E5 05 F1 | 	add	objptr, ##35664
0eaec     F2 14 02 FB | 	rdlong	arg02, objptr
0eaf0     45 00 00 FF 
0eaf4     50 E5 85 F1 | 	sub	objptr, ##35664
0eaf8     00 12 06 F6 | 	mov	arg01, #0
0eafc     00 16 06 F6 | 	mov	arg03, #0
0eb00     68 7B B1 FD | 	call	#__system___basic_print_string
0eb04     00 12 06 F6 | 	mov	arg01, #0
0eb08     0A 14 06 F6 | 	mov	arg02, #10
0eb0c     00 16 06 F6 | 	mov	arg03, #0
0eb10     00 7B B1 FD | 	call	#__system___basic_print_char
0eb14     00 12 06 F6 | 	mov	arg01, #0
0eb18     84 CB B1 FD | 	call	#__system___getiolock_0599
0eb1c     FD 00 68 FC | 	wrlong	#0, result1
0eb20     4A 00 00 FF 
0eb24     94 E4 05 F1 | 	add	objptr, ##38036
0eb28     F2 12 02 FB | 	rdlong	arg01, objptr
0eb2c     4A 00 00 FF 
0eb30     94 E4 85 F1 | 	sub	objptr, ##38036
0eb34     CC 74 B1 FD | 	call	#__system___chdir
0eb38     14 00 90 FD | 	jmp	#LR__1268
0eb3c                 | LR__1267
0eb3c     4A 00 00 FF 
0eb40     94 E4 05 F1 | 	add	objptr, ##38036
0eb44     F2 2C 62 FC | 	wrlong	local04, objptr
0eb48     4A 00 00 FF 
0eb4c     94 E4 85 F1 | 	sub	objptr, ##38036
0eb50                 | LR__1268
0eb50                 | '   print "Current directory: ";currentdir$
0eb50     00 12 06 F6 | 	mov	arg01, #0
0eb54     48 CB B1 FD | 	call	#__system___getiolock_0599
0eb58     FD 12 02 F6 | 	mov	arg01, result1
0eb5c     18 6E B1 FD | 	call	#__system___lockmem
0eb60     AE 01 00 FF 
0eb64     7D 14 06 F6 | 	mov	arg02, ##@LR__5839
0eb68     00 12 06 F6 | 	mov	arg01, #0
0eb6c     00 16 06 F6 | 	mov	arg03, #0
0eb70     F8 7A B1 FD | 	call	#__system___basic_print_string
0eb74     4A 00 00 FF 
0eb78     94 E4 05 F1 | 	add	objptr, ##38036
0eb7c     F2 14 02 FB | 	rdlong	arg02, objptr
0eb80     4A 00 00 FF 
0eb84     94 E4 85 F1 | 	sub	objptr, ##38036
0eb88     00 12 06 F6 | 	mov	arg01, #0
0eb8c     00 16 06 F6 | 	mov	arg03, #0
0eb90     D8 7A B1 FD | 	call	#__system___basic_print_string
0eb94     00 12 06 F6 | 	mov	arg01, #0
0eb98     0A 14 06 F6 | 	mov	arg02, #10
0eb9c     00 16 06 F6 | 	mov	arg03, #0
0eba0     70 7A B1 FD | 	call	#__system___basic_print_char
0eba4     00 12 06 F6 | 	mov	arg01, #0
0eba8     F4 CA B1 FD | 	call	#__system___getiolock_0599
0ebac     FD 00 68 FC | 	wrlong	#0, result1
0ebb0                 | LR__1269
0ebb0     A7 F0 03 F6 | 	mov	ptra, fp
0ebb4     B2 00 A0 FD | 	call	#popregs_
0ebb8                 | _do_cd_ret
0ebb8     2D 00 64 FD | 	ret
0ebbc                 | 
0ebbc                 | ' 
0ebbc                 | ' '-------------------- changefreq
0ebbc                 | ' 
0ebbc                 | ' sub do_changefreq
0ebbc                 | _do_changefreq
0ebbc     04 4A 05 F6 | 	mov	COUNT_, #4
0ebc0     A8 00 A0 FD | 	call	#pushregs_
0ebc4     28 F0 07 F1 | 	add	ptra, #40
0ebc8     B4 E0 BF FD | 	call	#_pop
0ebcc     FF 14 02 F6 | 	mov	arg02, result3
0ebd0     A7 FA 61 FC | 	wrlong	result1, fp
0ebd4     04 4E 05 F1 | 	add	fp, #4
0ebd8     A7 FC 61 FC | 	wrlong	result2, fp
0ebdc     04 4E 05 F1 | 	add	fp, #4
0ebe0     A7 14 62 FC | 	wrlong	arg02, fp
0ebe4     08 4E 85 F1 | 	sub	fp, #8
0ebe8     A7 12 02 F6 | 	mov	arg01, fp
0ebec     30 E3 BF FD | 	call	#_converttofloat
0ebf0     24 4E 05 F1 | 	add	fp, #36
0ebf4     A7 FA 61 FC | 	wrlong	result1, fp
0ebf8     24 4E 85 F1 | 	sub	fp, #36
0ebfc     FD 14 02 F6 | 	mov	arg02, result1
0ec00     FC 16 20 FF 
0ec04     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec08     B4 AB B1 FD | 	call	#__system____builtin_logbase
0ec0c     FD 26 02 F6 | 	mov	local01, result1
0ec10     1E 14 C6 F9 | 	decod	arg02, #30
0ec14     FC 16 20 FF 
0ec18     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec1c     A0 AB B1 FD | 	call	#__system____builtin_logbase
0ec20     FD 14 02 F6 | 	mov	arg02, result1
0ec24     13 13 02 F6 | 	mov	arg01, local01
0ec28     C8 9D B1 FD | 	call	#__system___float_div
0ec2c     FD 12 02 F6 | 	mov	arg01, result1
0ec30     00 14 06 F6 | 	mov	arg02, #0
0ec34     80 A0 B1 FD | 	call	#__system___float_tointeger
0ec38     10 4E 05 F1 | 	add	fp, #16
0ec3c     A7 FA 61 FC | 	wrlong	result1, fp
0ec40     1E 26 C6 F9 | 	decod	local01, #30
0ec44     FD 12 02 F6 | 	mov	arg01, result1
0ec48     10 4E 85 F1 | 	sub	fp, #16
0ec4c     05 12 06 F1 | 	add	arg01, #5
0ec50     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec54     1F 28 C6 C9 |  if_b	decod	local02, #31
0ec58     00 28 06 36 |  if_ae	mov	local02, #0
0ec5c     8C 97 B1 FD | 	call	#__system___float_fromuns
0ec60     14 FB 61 F5 | 	xor	result1, local02
0ec64     FD 14 02 F6 | 	mov	arg02, result1
0ec68     13 13 02 F6 | 	mov	arg01, local01
0ec6c     88 AA B1 FD | 	call	#__system____builtin_powf
0ec70     FD 12 02 F6 | 	mov	arg01, result1
0ec74     01 14 06 F6 | 	mov	arg02, #1
0ec78     3C A0 B1 FD | 	call	#__system___float_tointeger
0ec7c     14 4E 05 F1 | 	add	fp, #20
0ec80     A7 FA 61 FC | 	wrlong	result1, fp
0ec84                 | ' skip=round(2^(lfreq+5))
0ec84                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ec84     14 4E 85 F1 | 	sub	fp, #20
0ec88     40 00 00 FF 
0ec8c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ec90     30 00 90 CD |  if_b	jmp	#LR__1270
0ec94     14 4E 05 F1 | 	add	fp, #20
0ec98     A7 26 02 FB | 	rdlong	local01, fp
0ec9c     13 27 52 F6 | 	abs	local01, local01 wc
0eca0     0F 26 46 F0 | 	shr	local01, #15
0eca4     13 27 82 F6 | 	negc	local01, local01
0eca8     04 4E 05 F1 | 	add	fp, #4
0ecac     A7 26 62 FC | 	wrlong	local01, fp
0ecb0     04 4E 85 F1 | 	sub	fp, #4
0ecb4     40 00 80 FF 
0ecb8     A7 00 68 FC | 	wrlong	##32768, fp
0ecbc     14 4E 85 F1 | 	sub	fp, #20
0ecc0     0C 00 90 FD | 	jmp	#LR__1271
0ecc4                 | LR__1270
0ecc4     18 4E 05 F1 | 	add	fp, #24
0ecc8     A7 02 68 FC | 	wrlong	#1, fp
0eccc     18 4E 85 F1 | 	sub	fp, #24
0ecd0                 | LR__1271
0ecd0     24 4E 05 F1 | 	add	fp, #36
0ecd4     A7 14 02 FB | 	rdlong	arg02, fp
0ecd8     24 4E 85 F1 | 	sub	fp, #36
0ecdc     3E 2C 25 FF 
0ece0     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ece4     0C 9D B1 FD | 	call	#__system___float_div
0ece8     FD 26 02 F6 | 	mov	local01, result1
0ecec     18 4E 05 F1 | 	add	fp, #24
0ecf0     A7 12 02 FB | 	rdlong	arg01, fp
0ecf4     18 4E 85 F1 | 	sub	fp, #24
0ecf8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ecfc     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed00     00 28 06 36 |  if_ae	mov	local02, #0
0ed04     E4 96 B1 FD | 	call	#__system___float_fromuns
0ed08     14 FB 61 F5 | 	xor	result1, local02
0ed0c     FD 2A 02 F6 | 	mov	local03, result1
0ed10     1E 2C C6 F9 | 	decod	local04, #30
0ed14     0D 12 06 F6 | 	mov	arg01, #13
0ed18     10 4E 05 F1 | 	add	fp, #16
0ed1c     A7 14 02 FB | 	rdlong	arg02, fp
0ed20     10 4E 85 F1 | 	sub	fp, #16
0ed24     0A 13 82 F1 | 	sub	arg01, arg02
0ed28     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed2c     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed30     00 28 06 36 |  if_ae	mov	local02, #0
0ed34     B4 96 B1 FD | 	call	#__system___float_fromuns
0ed38     14 FB 61 F5 | 	xor	result1, local02
0ed3c     FD 14 02 F6 | 	mov	arg02, result1
0ed40     16 13 02 F6 | 	mov	arg01, local04
0ed44     B0 A9 B1 FD | 	call	#__system____builtin_powf
0ed48     FD 14 02 F6 | 	mov	arg02, result1
0ed4c     15 13 02 F6 | 	mov	arg01, local03
0ed50     9C 9A B1 FD | 	call	#__system___float_mul
0ed54     FD 14 02 F6 | 	mov	arg02, result1
0ed58     13 13 02 F6 | 	mov	arg01, local01
0ed5c     94 9C B1 FD | 	call	#__system___float_div
0ed60     FD 12 02 F6 | 	mov	arg01, result1
0ed64     01 14 06 F6 | 	mov	arg02, #1
0ed68     4C 9F B1 FD | 	call	#__system___float_tointeger
0ed6c     FD 26 02 F6 | 	mov	local01, result1
0ed70     1C 4E 05 F1 | 	add	fp, #28
0ed74     A7 26 62 FC | 	wrlong	local01, fp
0ed78     1C 4E 85 F1 | 	sub	fp, #28
0ed7c     00 DF BF FD | 	call	#_pop
0ed80     FF 2C 02 F6 | 	mov	local04, result3
0ed84     A7 FA 61 FC | 	wrlong	result1, fp
0ed88     04 4E 05 F1 | 	add	fp, #4
0ed8c     A7 FC 61 FC | 	wrlong	result2, fp
0ed90     04 4E 05 F1 | 	add	fp, #4
0ed94     A7 2C 62 FC | 	wrlong	local04, fp
0ed98     08 4E 85 F1 | 	sub	fp, #8
0ed9c     A7 12 02 F6 | 	mov	arg01, fp
0eda0     C0 E0 BF FD | 	call	#_converttoint
0eda4     FD 2A 52 F6 | 	abs	local03, result1 wc
0eda8     07 2A 06 F5 | 	and	local03, #7
0edac     15 2B 82 F6 | 	negc	local03, local03
0edb0     0C 4E 05 F1 | 	add	fp, #12
0edb4     A7 2A 62 FC | 	wrlong	local03, fp
0edb8     08 4E 05 F1 | 	add	fp, #8
0edbc     A7 26 02 FB | 	rdlong	local01, fp
0edc0     10 26 66 F0 | 	shl	local01, #16
0edc4     08 4E 05 F1 | 	add	fp, #8
0edc8     A7 2C 02 FB | 	rdlong	local04, fp
0edcc     16 27 02 F1 | 	add	local01, local04
0edd0     04 4E 05 F1 | 	add	fp, #4
0edd4     A7 26 62 FC | 	wrlong	local01, fp
0edd8                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0edd8     37 00 00 FF 
0eddc     10 E4 05 F1 | 	add	objptr, ##28176
0ede0     F2 12 02 FB | 	rdlong	arg01, objptr
0ede4     37 00 00 FF 
0ede8     10 E4 85 F1 | 	sub	objptr, ##28176
0edec     14 4E 85 F1 | 	sub	fp, #20
0edf0     A7 2C 02 FB | 	rdlong	local04, fp
0edf4     0C 4E 85 F1 | 	sub	fp, #12
0edf8     06 2C 66 F0 | 	shl	local04, #6
0edfc     16 13 02 F1 | 	add	arg01, local04
0ee00     08 12 06 F1 | 	add	arg01, #8
0ee04     09 FB 01 FB | 	rdlong	result1, arg01
0ee08     1B FA 2D F4 | 	testbn	result1, #27 wz
0ee0c     3C 00 90 5D |  if_ne	jmp	#LR__1272
0ee10     37 00 00 FF 
0ee14     10 E4 05 F1 | 	add	objptr, ##28176
0ee18     F2 12 02 FB | 	rdlong	arg01, objptr
0ee1c     37 00 00 FF 
0ee20     10 E4 85 F1 | 	sub	objptr, ##28176
0ee24     0C 4E 05 F1 | 	add	fp, #12
0ee28     A7 2C 02 FB | 	rdlong	local04, fp
0ee2c     06 2C 66 F0 | 	shl	local04, #6
0ee30     16 13 02 F1 | 	add	arg01, local04
0ee34     18 12 06 F1 | 	add	arg01, #24
0ee38     14 4E 05 F1 | 	add	fp, #20
0ee3c     A7 14 02 FB | 	rdlong	arg02, fp
0ee40     20 4E 85 F1 | 	sub	fp, #32
0ee44     09 15 62 FC | 	wrlong	arg02, arg01
0ee48     80 00 90 FD | 	jmp	#LR__1273
0ee4c                 | LR__1272
0ee4c     37 00 00 FF 
0ee50     10 E4 05 F1 | 	add	objptr, ##28176
0ee54     F2 26 02 FB | 	rdlong	local01, objptr
0ee58     37 00 00 FF 
0ee5c     10 E4 85 F1 | 	sub	objptr, ##28176
0ee60     0C 4E 05 F1 | 	add	fp, #12
0ee64     A7 2C 02 FB | 	rdlong	local04, fp
0ee68     06 2C 66 F0 | 	shl	local04, #6
0ee6c     16 27 02 F1 | 	add	local01, local04
0ee70     18 26 06 F1 | 	add	local01, #24
0ee74     18 4E 05 F1 | 	add	fp, #24
0ee78     A7 14 02 FB | 	rdlong	arg02, fp
0ee7c     24 4E 85 F1 | 	sub	fp, #36
0ee80     3E 2C 25 FF 
0ee84     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ee88     68 9B B1 FD | 	call	#__system___float_div
0ee8c     FD 12 02 F6 | 	mov	arg01, result1
0ee90     01 14 06 F6 | 	mov	arg02, #1
0ee94     20 9E B1 FD | 	call	#__system___float_tointeger
0ee98     13 FB 51 FC | 	wrword	result1, local01
0ee9c     37 00 00 FF 
0eea0     10 E4 05 F1 | 	add	objptr, ##28176
0eea4     F2 12 02 FB | 	rdlong	arg01, objptr
0eea8     37 00 00 FF 
0eeac     10 E4 85 F1 | 	sub	objptr, ##28176
0eeb0     0C 4E 05 F1 | 	add	fp, #12
0eeb4     A7 2C 02 FB | 	rdlong	local04, fp
0eeb8     0C 4E 85 F1 | 	sub	fp, #12
0eebc     06 2C 66 F0 | 	shl	local04, #6
0eec0     16 13 02 F1 | 	add	arg01, local04
0eec4     1A 12 06 F1 | 	add	arg01, #26
0eec8     09 01 5A FC | 	wrword	#256, arg01
0eecc                 | LR__1273
0eecc     A7 F0 03 F6 | 	mov	ptra, fp
0eed0     B2 00 A0 FD | 	call	#popregs_
0eed4                 | _do_changefreq_ret
0eed4     2D 00 64 FD | 	ret
0eed8                 | 
0eed8                 | ' 
0eed8                 | ' '-------------------- changepan
0eed8                 | ' 
0eed8                 | ' sub do_changepan
0eed8                 | _do_changepan
0eed8     01 4A 05 F6 | 	mov	COUNT_, #1
0eedc     A8 00 A0 FD | 	call	#pushregs_
0eee0     14 F0 07 F1 | 	add	ptra, #20
0eee4     98 DD BF FD | 	call	#_pop
0eee8     A7 FA 61 FC | 	wrlong	result1, fp
0eeec     04 4E 05 F1 | 	add	fp, #4
0eef0     A7 FC 61 FC | 	wrlong	result2, fp
0eef4     04 4E 05 F1 | 	add	fp, #4
0eef8     A7 FE 61 FC | 	wrlong	result3, fp
0eefc     08 4E 85 F1 | 	sub	fp, #8
0ef00     00 00 23 FF 
0ef04     00 26 06 F6 | 	mov	local01, ##1174405120
0ef08     A7 12 02 F6 | 	mov	arg01, fp
0ef0c     10 E0 BF FD | 	call	#_converttofloat
0ef10     FD 14 02 F6 | 	mov	arg02, result1
0ef14     13 13 02 F6 | 	mov	arg01, local01
0ef18     D4 98 B1 FD | 	call	#__system___float_mul
0ef1c     FD 12 02 F6 | 	mov	arg01, result1
0ef20     01 14 06 F6 | 	mov	arg02, #1
0ef24     90 9D B1 FD | 	call	#__system___float_tointeger
0ef28     0D 26 C6 F9 | 	decod	local01, #13
0ef2c     FD 26 02 F1 | 	add	local01, result1
0ef30     10 4E 05 F1 | 	add	fp, #16
0ef34     A7 26 62 FC | 	wrlong	local01, fp
0ef38                 | ' 
0ef38                 | ' t1=pop()
0ef38                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ef38                 | ' if pan<0 then pan=0
0ef38     10 4E 85 F1 | 	sub	fp, #16
0ef3c     00 26 56 F2 | 	cmps	local01, #0 wc
0ef40     10 4E 05 C1 |  if_b	add	fp, #16
0ef44     A7 00 68 CC |  if_b	wrlong	#0, fp
0ef48     10 4E 85 C1 |  if_b	sub	fp, #16
0ef4c                 | ' if pan>16384 then pan=16384
0ef4c     10 4E 05 F1 | 	add	fp, #16
0ef50     A7 26 02 FB | 	rdlong	local01, fp
0ef54     10 4E 85 F1 | 	sub	fp, #16
0ef58     20 00 00 FF 
0ef5c     01 26 56 F2 | 	cmps	local01, ##16385 wc
0ef60     10 4E 05 31 |  if_ae	add	fp, #16
0ef64     20 00 80 3F 
0ef68     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ef6c     10 4E 85 31 |  if_ae	sub	fp, #16
0ef70     0C DD BF FD | 	call	#_pop
0ef74     FF 26 02 F6 | 	mov	local01, result3
0ef78     A7 FA 61 FC | 	wrlong	result1, fp
0ef7c     04 4E 05 F1 | 	add	fp, #4
0ef80     A7 FC 61 FC | 	wrlong	result2, fp
0ef84     04 4E 05 F1 | 	add	fp, #4
0ef88     A7 26 62 FC | 	wrlong	local01, fp
0ef8c     08 4E 85 F1 | 	sub	fp, #8
0ef90     A7 12 02 F6 | 	mov	arg01, fp
0ef94     CC DE BF FD | 	call	#_converttoint
0ef98     FD 26 52 F6 | 	abs	local01, result1 wc
0ef9c     07 26 06 F5 | 	and	local01, #7
0efa0     13 27 82 F6 | 	negc	local01, local01
0efa4     0C 4E 05 F1 | 	add	fp, #12
0efa8     A7 26 62 FC | 	wrlong	local01, fp
0efac     37 00 00 FF 
0efb0     10 E4 05 F1 | 	add	objptr, ##28176
0efb4     F2 12 02 FB | 	rdlong	arg01, objptr
0efb8     37 00 00 FF 
0efbc     10 E4 85 F1 | 	sub	objptr, ##28176
0efc0     06 26 66 F0 | 	shl	local01, #6
0efc4     13 13 02 F1 | 	add	arg01, local01
0efc8     16 12 06 F1 | 	add	arg01, #22
0efcc     04 4E 05 F1 | 	add	fp, #4
0efd0     A7 14 02 FB | 	rdlong	arg02, fp
0efd4     10 4E 85 F1 | 	sub	fp, #16
0efd8     09 15 52 FC | 	wrword	arg02, arg01
0efdc     A7 F0 03 F6 | 	mov	ptra, fp
0efe0     B2 00 A0 FD | 	call	#popregs_
0efe4                 | _do_changepan_ret
0efe4     2D 00 64 FD | 	ret
0efe8                 | 
0efe8                 | ' 
0efe8                 | ' '-------------------- changevol
0efe8                 | ' 
0efe8                 | ' sub do_changevol
0efe8                 | _do_changevol
0efe8     00 4A 05 F6 | 	mov	COUNT_, #0
0efec     A8 00 A0 FD | 	call	#pushregs_
0eff0     14 F0 07 F1 | 	add	ptra, #20
0eff4     88 DC BF FD | 	call	#_pop
0eff8     FF 14 02 F6 | 	mov	arg02, result3
0effc     A7 FA 61 FC | 	wrlong	result1, fp
0f000     04 4E 05 F1 | 	add	fp, #4
0f004     A7 FC 61 FC | 	wrlong	result2, fp
0f008     04 4E 05 F1 | 	add	fp, #4
0f00c     A7 14 62 FC | 	wrlong	arg02, fp
0f010     08 4E 85 F1 | 	sub	fp, #8
0f014     A7 12 02 F6 | 	mov	arg01, fp
0f018     04 DF BF FD | 	call	#_converttofloat
0f01c     FD 12 02 F6 | 	mov	arg01, result1
0f020     00 3D 22 FF 
0f024     00 14 06 F6 | 	mov	arg02, ##1148846080
0f028     C4 97 B1 FD | 	call	#__system___float_mul
0f02c     FD 12 02 F6 | 	mov	arg01, result1
0f030     01 14 06 F6 | 	mov	arg02, #1
0f034     80 9C B1 FD | 	call	#__system___float_tointeger
0f038     FD 14 52 F6 | 	abs	arg02, result1 wc
0f03c     0D 14 46 F7 | 	zerox	arg02, #13
0f040     0A 15 82 F6 | 	negc	arg02, arg02
0f044     10 4E 05 F1 | 	add	fp, #16
0f048     A7 14 62 FC | 	wrlong	arg02, fp
0f04c     10 4E 85 F1 | 	sub	fp, #16
0f050     2C DC BF FD | 	call	#_pop
0f054     FF 14 02 F6 | 	mov	arg02, result3
0f058     A7 FA 61 FC | 	wrlong	result1, fp
0f05c     04 4E 05 F1 | 	add	fp, #4
0f060     A7 FC 61 FC | 	wrlong	result2, fp
0f064     04 4E 05 F1 | 	add	fp, #4
0f068     A7 14 62 FC | 	wrlong	arg02, fp
0f06c     08 4E 85 F1 | 	sub	fp, #8
0f070     A7 12 02 F6 | 	mov	arg01, fp
0f074     EC DD BF FD | 	call	#_converttoint
0f078     FD 14 52 F6 | 	abs	arg02, result1 wc
0f07c     07 14 06 F5 | 	and	arg02, #7
0f080     0A 15 82 F6 | 	negc	arg02, arg02
0f084     0C 4E 05 F1 | 	add	fp, #12
0f088     A7 14 62 FC | 	wrlong	arg02, fp
0f08c     37 00 00 FF 
0f090     10 E4 05 F1 | 	add	objptr, ##28176
0f094     F2 12 02 FB | 	rdlong	arg01, objptr
0f098     37 00 00 FF 
0f09c     10 E4 85 F1 | 	sub	objptr, ##28176
0f0a0     06 14 66 F0 | 	shl	arg02, #6
0f0a4     0A 13 02 F1 | 	add	arg01, arg02
0f0a8     14 12 06 F1 | 	add	arg01, #20
0f0ac     04 4E 05 F1 | 	add	fp, #4
0f0b0     A7 14 02 FB | 	rdlong	arg02, fp
0f0b4     10 4E 85 F1 | 	sub	fp, #16
0f0b8     09 15 52 FC | 	wrword	arg02, arg01
0f0bc     A7 F0 03 F6 | 	mov	ptra, fp
0f0c0     B2 00 A0 FD | 	call	#popregs_
0f0c4                 | _do_changevol_ret
0f0c4     2D 00 64 FD | 	ret
0f0c8                 | 
0f0c8                 | ' 
0f0c8                 | ' '-------------------- changewav
0f0c8                 | ' 
0f0c8                 | ' sub do_changewav
0f0c8                 | _do_changewav
0f0c8     00 4A 05 F6 | 	mov	COUNT_, #0
0f0cc     A8 00 A0 FD | 	call	#pushregs_
0f0d0     14 F0 07 F1 | 	add	ptra, #20
0f0d4     A8 DB BF FD | 	call	#_pop
0f0d8     FF 14 02 F6 | 	mov	arg02, result3
0f0dc     A7 FA 61 FC | 	wrlong	result1, fp
0f0e0     04 4E 05 F1 | 	add	fp, #4
0f0e4     A7 FC 61 FC | 	wrlong	result2, fp
0f0e8     04 4E 05 F1 | 	add	fp, #4
0f0ec     A7 14 62 FC | 	wrlong	arg02, fp
0f0f0     08 4E 85 F1 | 	sub	fp, #8
0f0f4     A7 12 02 F6 | 	mov	arg01, fp
0f0f8     68 DD BF FD | 	call	#_converttoint
0f0fc     10 4E 05 F1 | 	add	fp, #16
0f100     A7 FA 61 FC | 	wrlong	result1, fp
0f104                 | ' 
0f104                 | ' t1=pop()
0f104                 | ' wave=converttoint(t1)
0f104                 | ' if wave<0 then wave=0
0f104     FD 14 02 F6 | 	mov	arg02, result1
0f108     10 4E 85 F1 | 	sub	fp, #16
0f10c     00 14 56 F2 | 	cmps	arg02, #0 wc
0f110     10 4E 05 C1 |  if_b	add	fp, #16
0f114     A7 00 68 CC |  if_b	wrlong	#0, fp
0f118     10 4E 85 C1 |  if_b	sub	fp, #16
0f11c     60 DB BF FD | 	call	#_pop
0f120     FF 14 02 F6 | 	mov	arg02, result3
0f124     A7 FA 61 FC | 	wrlong	result1, fp
0f128     04 4E 05 F1 | 	add	fp, #4
0f12c     A7 FC 61 FC | 	wrlong	result2, fp
0f130     04 4E 05 F1 | 	add	fp, #4
0f134     A7 14 62 FC | 	wrlong	arg02, fp
0f138     08 4E 85 F1 | 	sub	fp, #8
0f13c     A7 12 02 F6 | 	mov	arg01, fp
0f140     20 DD BF FD | 	call	#_converttoint
0f144     FD 14 52 F6 | 	abs	arg02, result1 wc
0f148     07 14 06 F5 | 	and	arg02, #7
0f14c     0A 15 82 F6 | 	negc	arg02, arg02
0f150     0C 4E 05 F1 | 	add	fp, #12
0f154     A7 14 62 FC | 	wrlong	arg02, fp
0f158                 | ' if wave <32 then 
0f158     04 4E 05 F1 | 	add	fp, #4
0f15c     A7 14 02 FB | 	rdlong	arg02, fp
0f160     10 4E 85 F1 | 	sub	fp, #16
0f164     20 14 56 F2 | 	cmps	arg02, #32 wc
0f168     48 00 90 3D |  if_ae	jmp	#LR__1280
0f16c     37 00 00 FF 
0f170     10 E4 05 F1 | 	add	objptr, ##28176
0f174     F2 12 02 FB | 	rdlong	arg01, objptr
0f178     37 00 00 FF 
0f17c     10 E4 85 F1 | 	sub	objptr, ##28176
0f180     0C 4E 05 F1 | 	add	fp, #12
0f184     A7 14 02 FB | 	rdlong	arg02, fp
0f188     06 14 66 F0 | 	shl	arg02, #6
0f18c     0A 13 02 F1 | 	add	arg01, arg02
0f190     08 12 06 F1 | 	add	arg01, #8
0f194     04 4E 05 F1 | 	add	fp, #4
0f198     A7 14 02 FB | 	rdlong	arg02, fp
0f19c     10 4E 85 F1 | 	sub	fp, #16
0f1a0     0B 14 66 F0 | 	shl	arg02, #11
0f1a4     00 00 40 FF 
0f1a8     00 14 06 F1 | 	add	arg02, ##-2147483648
0f1ac     09 15 62 FC | 	wrlong	arg02, arg01
0f1b0     34 00 90 FD | 	jmp	#LR__1281
0f1b4                 | LR__1280
0f1b4     37 00 00 FF 
0f1b8     10 E4 05 F1 | 	add	objptr, ##28176
0f1bc     F2 12 02 FB | 	rdlong	arg01, objptr
0f1c0     37 00 00 FF 
0f1c4     10 E4 85 F1 | 	sub	objptr, ##28176
0f1c8     0C 4E 05 F1 | 	add	fp, #12
0f1cc     A7 14 02 FB | 	rdlong	arg02, fp
0f1d0     0C 4E 85 F1 | 	sub	fp, #12
0f1d4     06 14 66 F0 | 	shl	arg02, #6
0f1d8     0A 13 02 F1 | 	add	arg01, arg02
0f1dc     08 12 06 F1 | 	add	arg01, #8
0f1e0     00 00 C4 FF 
0f1e4     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f1e8                 | LR__1281
0f1e8     A7 F0 03 F6 | 	mov	ptra, fp
0f1ec     B2 00 A0 FD | 	call	#popregs_
0f1f0                 | _do_changewav_ret
0f1f0     2D 00 64 FD | 	ret
0f1f4                 | 
0f1f4                 | ' 
0f1f4                 | ' '-------------------- chr$
0f1f4                 | ' 
0f1f4                 | ' sub do_chr
0f1f4                 | _do_chr
0f1f4     01 4A 05 F6 | 	mov	COUNT_, #1
0f1f8     A8 00 A0 FD | 	call	#pushregs_
0f1fc     14 F0 07 F1 | 	add	ptra, #20
0f200     4A 00 00 FF 
0f204     80 E4 05 F1 | 	add	objptr, ##38016
0f208     F2 26 02 FB | 	rdlong	local01, objptr
0f20c     13 17 02 F6 | 	mov	arg03, local01
0f210     01 16 66 F0 | 	shl	arg03, #1
0f214     13 17 02 F1 | 	add	arg03, local01
0f218     02 16 66 F0 | 	shl	arg03, #2
0f21c     03 00 00 FF 
0f220     04 E4 85 F1 | 	sub	objptr, ##1540
0f224     F2 16 02 F1 | 	add	arg03, objptr
0f228     0B 17 02 FB | 	rdlong	arg03, arg03
0f22c     0C 4E 05 F1 | 	add	fp, #12
0f230     A7 16 62 FC | 	wrlong	arg03, fp
0f234                 | ' 
0f234                 | ' numpar=compiledline(lineptr_e).result.uresult
0f234                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f234     0C 4E 85 F1 | 	sub	fp, #12
0f238     02 16 16 F2 | 	cmp	arg03, #2 wc
0f23c     47 00 00 FF 
0f240     7C E4 85 F1 | 	sub	objptr, ##36476
0f244     0C 4E 05 C1 |  if_b	add	fp, #12
0f248     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f24c     0C 4E 85 C1 |  if_b	sub	fp, #12
0f250     40 00 90 4D |  if_c_and_nz	jmp	#LR__1290
0f254     00 12 06 F6 | 	mov	arg01, #0
0f258     44 C4 B1 FD | 	call	#__system___getiolock_0599
0f25c     FD 12 02 F6 | 	mov	arg01, result1
0f260     14 67 B1 FD | 	call	#__system___lockmem
0f264     AE 01 00 FF 
0f268     91 14 06 F6 | 	mov	arg02, ##@LR__5840
0f26c     00 12 06 F6 | 	mov	arg01, #0
0f270     00 16 06 F6 | 	mov	arg03, #0
0f274     F4 73 B1 FD | 	call	#__system___basic_print_string
0f278     00 12 06 F6 | 	mov	arg01, #0
0f27c     20 C4 B1 FD | 	call	#__system___getiolock_0599
0f280     FD 00 68 FC | 	wrlong	#0, result1
0f284     27 12 06 F6 | 	mov	arg01, #39
0f288     00 14 06 F6 | 	mov	arg02, #0
0f28c     FC 2C B1 FD | 	call	#_printerror
0f290     54 00 90 FD | 	jmp	#LR__1291
0f294                 | LR__1290
0f294     E8 D9 BF FD | 	call	#_pop
0f298     FF 26 02 F6 | 	mov	local01, result3
0f29c     A7 FA 61 FC | 	wrlong	result1, fp
0f2a0     04 4E 05 F1 | 	add	fp, #4
0f2a4     A7 FC 61 FC | 	wrlong	result2, fp
0f2a8     04 4E 05 F1 | 	add	fp, #4
0f2ac     A7 26 62 FC | 	wrlong	local01, fp
0f2b0     08 4E 85 F1 | 	sub	fp, #8
0f2b4     A7 12 02 F6 | 	mov	arg01, fp
0f2b8     A8 DB BF FD | 	call	#_converttoint
0f2bc     10 4E 05 F1 | 	add	fp, #16
0f2c0     A7 FA 61 FC | 	wrlong	result1, fp
0f2c4     FD 12 02 F6 | 	mov	arg01, result1
0f2c8     10 4E 85 F1 | 	sub	fp, #16
0f2cc     E8 88 B1 FD | 	call	#__system__Chr_S
0f2d0     A7 FA 61 FC | 	wrlong	result1, fp
0f2d4     08 4E 05 F1 | 	add	fp, #8
0f2d8     A7 3E 68 FC | 	wrlong	#31, fp
0f2dc     08 4E 85 F1 | 	sub	fp, #8
0f2e0     A7 12 02 F6 | 	mov	arg01, fp
0f2e4     30 DA BF FD | 	call	#_push
0f2e8                 | LR__1291
0f2e8     A7 F0 03 F6 | 	mov	ptra, fp
0f2ec     B2 00 A0 FD | 	call	#popregs_
0f2f0                 | _do_chr_ret
0f2f0     2D 00 64 FD | 	ret
0f2f4                 | 
0f2f4                 | ' 
0f2f4                 | ' '-------------------- circle
0f2f4                 | ' 
0f2f4                 | ' sub do_circle
0f2f4                 | _do_circle
0f2f4     02 4A 05 F6 | 	mov	COUNT_, #2
0f2f8     A8 00 A0 FD | 	call	#pushregs_
0f2fc     24 F0 07 F1 | 	add	ptra, #36
0f300     7C D9 BF FD | 	call	#_pop
0f304     FD 18 02 F6 | 	mov	arg04, result1
0f308     FE 16 02 F6 | 	mov	arg03, result2
0f30c     FF 14 02 F6 | 	mov	arg02, result3
0f310     18 4E 05 F1 | 	add	fp, #24
0f314     A7 18 62 FC | 	wrlong	arg04, fp
0f318     04 4E 05 F1 | 	add	fp, #4
0f31c     A7 16 62 FC | 	wrlong	arg03, fp
0f320     04 4E 05 F1 | 	add	fp, #4
0f324     A7 14 62 FC | 	wrlong	arg02, fp
0f328     20 4E 85 F1 | 	sub	fp, #32
0f32c     50 D9 BF FD | 	call	#_pop
0f330     FD 18 02 F6 | 	mov	arg04, result1
0f334     FE 16 02 F6 | 	mov	arg03, result2
0f338     FF 26 02 F6 | 	mov	local01, result3
0f33c     0C 4E 05 F1 | 	add	fp, #12
0f340     A7 18 62 FC | 	wrlong	arg04, fp
0f344     04 4E 05 F1 | 	add	fp, #4
0f348     A7 16 62 FC | 	wrlong	arg03, fp
0f34c     04 4E 05 F1 | 	add	fp, #4
0f350     A7 26 62 FC | 	wrlong	local01, fp
0f354     14 4E 85 F1 | 	sub	fp, #20
0f358     24 D9 BF FD | 	call	#_pop
0f35c     A7 FA 61 FC | 	wrlong	result1, fp
0f360     04 4E 05 F1 | 	add	fp, #4
0f364     A7 FC 61 FC | 	wrlong	result2, fp
0f368     04 4E 05 F1 | 	add	fp, #4
0f36c     A7 FE 61 FC | 	wrlong	result3, fp
0f370                 | ' 
0f370                 | ' t3=pop()
0f370                 | ' t2=pop()
0f370                 | ' t1=pop()
0f370                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f370     FF 18 02 F6 | 	mov	arg04, result3
0f374     08 4E 85 F1 | 	sub	fp, #8
0f378     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f37c     08 4E 05 51 |  if_ne	add	fp, #8
0f380     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f384     08 4E 85 51 |  if_ne	sub	fp, #8
0f388     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f38c     7C 00 90 5D |  if_ne	jmp	#LR__1300
0f390     14 4E 05 F1 | 	add	fp, #20
0f394     A7 26 02 FB | 	rdlong	local01, fp
0f398     14 4E 85 F1 | 	sub	fp, #20
0f39c     1C 26 0E F2 | 	cmp	local01, #28 wz
0f3a0     14 4E 05 51 |  if_ne	add	fp, #20
0f3a4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f3a8     14 4E 85 51 |  if_ne	sub	fp, #20
0f3ac     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f3b0     58 00 90 5D |  if_ne	jmp	#LR__1300
0f3b4     20 4E 05 F1 | 	add	fp, #32
0f3b8     A7 26 02 FB | 	rdlong	local01, fp
0f3bc     20 4E 85 F1 | 	sub	fp, #32
0f3c0     1C 26 0E F2 | 	cmp	local01, #28 wz
0f3c4     20 4E 05 51 |  if_ne	add	fp, #32
0f3c8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f3cc     20 4E 85 51 |  if_ne	sub	fp, #32
0f3d0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f3d4     34 00 90 5D |  if_ne	jmp	#LR__1300
0f3d8     A7 12 02 FB | 	rdlong	arg01, fp
0f3dc     0C 4E 05 F1 | 	add	fp, #12
0f3e0     A7 14 02 FB | 	rdlong	arg02, fp
0f3e4     0C 4E 05 F1 | 	add	fp, #12
0f3e8     A7 16 02 FB | 	rdlong	arg03, fp
0f3ec     18 4E 85 F1 | 	sub	fp, #24
0f3f0     37 00 00 FF 
0f3f4     28 E4 05 F1 | 	add	objptr, ##28200
0f3f8     F2 18 02 FB | 	rdlong	arg04, objptr
0f3fc     37 00 00 FF 
0f400     28 E4 85 F1 | 	sub	objptr, ##28200
0f404     58 44 B1 FD | 	call	#_hg010b_spin2_circle
0f408                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f408     54 00 90 FD | 	jmp	#LR__1301
0f40c                 | LR__1300
0f40c     A7 12 02 F6 | 	mov	arg01, fp
0f410     50 DA BF FD | 	call	#_converttoint
0f414     FD 26 02 F6 | 	mov	local01, result1
0f418     0C 4E 05 F1 | 	add	fp, #12
0f41c     A7 12 02 F6 | 	mov	arg01, fp
0f420     0C 4E 85 F1 | 	sub	fp, #12
0f424     3C DA BF FD | 	call	#_converttoint
0f428     FD 28 02 F6 | 	mov	local02, result1
0f42c     18 4E 05 F1 | 	add	fp, #24
0f430     A7 12 02 F6 | 	mov	arg01, fp
0f434     18 4E 85 F1 | 	sub	fp, #24
0f438     28 DA BF FD | 	call	#_converttoint
0f43c     FD 16 02 F6 | 	mov	arg03, result1
0f440     37 00 00 FF 
0f444     28 E4 05 F1 | 	add	objptr, ##28200
0f448     F2 18 02 FB | 	rdlong	arg04, objptr
0f44c     37 00 00 FF 
0f450     28 E4 85 F1 | 	sub	objptr, ##28200
0f454     13 13 02 F6 | 	mov	arg01, local01
0f458     14 15 02 F6 | 	mov	arg02, local02
0f45c     00 44 B1 FD | 	call	#_hg010b_spin2_circle
0f460                 | LR__1301
0f460     A7 F0 03 F6 | 	mov	ptra, fp
0f464     B2 00 A0 FD | 	call	#popregs_
0f468                 | _do_circle_ret
0f468     2D 00 64 FD | 	ret
0f46c                 | 
0f46c                 | ' 
0f46c                 | ' '-------------------- click
0f46c                 | ' 
0f46c                 | ' sub do_click
0f46c                 | _do_click
0f46c     10 D8 BF FD | 	call	#_pop
0f470     00 FA 4D F2 | 	cmps	result1, #0 wz
0f474                 | ' 
0f474                 | ' t1=pop()
0f474                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f474     50 00 00 AF 
0f478     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f47c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f480     50 00 00 FF 
0f484     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f488     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f48c     50 00 00 5F 
0f490     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f494                 | _do_click_ret
0f494     2D 00 64 FD | 	ret
0f498                 | 
0f498                 | ' 
0f498                 | ' '-------------------- close
0f498                 | ' 
0f498                 | ' sub do_close
0f498                 | _do_close
0f498     03 4A 05 F6 | 	mov	COUNT_, #3
0f49c     A8 00 A0 FD | 	call	#pushregs_
0f4a0     DC D7 BF FD | 	call	#_pop
0f4a4     FD 26 02 F6 | 	mov	local01, result1
0f4a8     FF 16 02 F6 | 	mov	arg03, result3
0f4ac     FE 28 02 F6 | 	mov	local02, result2
0f4b0     0B 2B 02 F6 | 	mov	local03, arg03
0f4b4                 | ' 
0f4b4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4b4                 | ' t1=pop()
0f4b4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f4b4     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f4b8     44 00 90 AD |  if_e	jmp	#LR__1310
0f4bc     00 12 06 F6 | 	mov	arg01, #0
0f4c0     DC C1 B1 FD | 	call	#__system___getiolock_0599
0f4c4     FD 12 02 F6 | 	mov	arg01, result1
0f4c8     AC 64 B1 FD | 	call	#__system___lockmem
0f4cc     AE 01 00 FF 
0f4d0     98 14 06 F6 | 	mov	arg02, ##@LR__5841
0f4d4     00 12 06 F6 | 	mov	arg01, #0
0f4d8     00 16 06 F6 | 	mov	arg03, #0
0f4dc     8C 71 B1 FD | 	call	#__system___basic_print_string
0f4e0     00 12 06 F6 | 	mov	arg01, #0
0f4e4     0A 14 06 F6 | 	mov	arg02, #10
0f4e8     00 16 06 F6 | 	mov	arg03, #0
0f4ec     24 71 B1 FD | 	call	#__system___basic_print_char
0f4f0     00 12 06 F6 | 	mov	arg01, #0
0f4f4     A8 C1 B1 FD | 	call	#__system___getiolock_0599
0f4f8     FD 00 68 FC | 	wrlong	#0, result1
0f4fc     08 00 90 FD | 	jmp	#LR__1311
0f500                 | LR__1310
0f500                 | ' channel  = t1.result.iresult
0f500                 | ' close #channel
0f500     13 13 02 F6 | 	mov	arg01, local01
0f504     C8 B7 B1 FD | 	call	#__system__close
0f508                 | LR__1311
0f508     A7 F0 03 F6 | 	mov	ptra, fp
0f50c     B2 00 A0 FD | 	call	#popregs_
0f510                 | _do_close_ret
0f510     2D 00 64 FD | 	ret
0f514                 | 
0f514                 | ' 
0f514                 | ' '-------------------- cls
0f514                 | ' 
0f514                 | ' sub do_cls
0f514                 | _do_cls
0f514     37 00 00 FF 
0f518     3C E4 05 F1 | 	add	objptr, ##28220
0f51c     F2 12 02 FB | 	rdlong	arg01, objptr
0f520     04 E4 85 F1 | 	sub	objptr, #4
0f524     F2 14 02 FB | 	rdlong	arg02, objptr
0f528     37 00 00 FF 
0f52c     38 E4 85 F1 | 	sub	objptr, ##28216
0f530     C0 47 B1 FD | 	call	#_hg010b_spin2_cls
0f534     37 00 00 FF 
0f538     3C E4 05 F1 | 	add	objptr, ##28220
0f53c     F2 14 02 FB | 	rdlong	arg02, objptr
0f540     14 E4 85 F1 | 	sub	objptr, #20
0f544     F2 14 62 FC | 	wrlong	arg02, objptr
0f548     37 00 00 FF 
0f54c     28 E4 85 F1 | 	sub	objptr, ##28200
0f550                 | _do_cls_ret
0f550     2D 00 64 FD | 	ret
0f554                 | 
0f554                 | ' 
0f554                 | ' '-------------------- color
0f554                 | ' 
0f554                 | ' sub do_color
0f554                 | _do_color
0f554     03 4A 05 F6 | 	mov	COUNT_, #3
0f558     A8 00 A0 FD | 	call	#pushregs_
0f55c     20 D7 BF FD | 	call	#_pop
0f560     FD 26 02 F6 | 	mov	local01, result1
0f564     FE 28 02 F6 | 	mov	local02, result2
0f568     FF 2A 02 F6 | 	mov	local03, result3
0f56c     37 00 00 FF 
0f570     28 E4 05 F1 | 	add	objptr, ##28200
0f574     F2 26 62 FC | 	wrlong	local01, objptr
0f578     37 00 00 FF 
0f57c     28 E4 85 F1 | 	sub	objptr, ##28200
0f580     A7 F0 03 F6 | 	mov	ptra, fp
0f584     B2 00 A0 FD | 	call	#popregs_
0f588                 | _do_color_ret
0f588     2D 00 64 FD | 	ret
0f58c                 | 
0f58c                 | ' 
0f58c                 | ' '-------------------- cos
0f58c                 | ' 
0f58c                 | ' sub do_cos
0f58c                 | _do_cos
0f58c     01 4A 05 F6 | 	mov	COUNT_, #1
0f590     A8 00 A0 FD | 	call	#pushregs_
0f594     10 F0 07 F1 | 	add	ptra, #16
0f598     4A 00 00 FF 
0f59c     80 E4 05 F1 | 	add	objptr, ##38016
0f5a0     F2 26 02 FB | 	rdlong	local01, objptr
0f5a4     13 17 02 F6 | 	mov	arg03, local01
0f5a8     01 16 66 F0 | 	shl	arg03, #1
0f5ac     13 17 02 F1 | 	add	arg03, local01
0f5b0     02 16 66 F0 | 	shl	arg03, #2
0f5b4     03 00 00 FF 
0f5b8     04 E4 85 F1 | 	sub	objptr, ##1540
0f5bc     F2 16 02 F1 | 	add	arg03, objptr
0f5c0     0B 17 02 FB | 	rdlong	arg03, arg03
0f5c4     0C 4E 05 F1 | 	add	fp, #12
0f5c8     A7 16 62 FC | 	wrlong	arg03, fp
0f5cc                 | ' 
0f5cc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f5cc                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0f5cc     0C 4E 85 F1 | 	sub	fp, #12
0f5d0     02 16 16 F2 | 	cmp	arg03, #2 wc
0f5d4     47 00 00 FF 
0f5d8     7C E4 85 F1 | 	sub	objptr, ##36476
0f5dc     0C 4E 05 C1 |  if_b	add	fp, #12
0f5e0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f5e4     0C 4E 85 C1 |  if_b	sub	fp, #12
0f5e8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1320
0f5ec     00 12 06 F6 | 	mov	arg01, #0
0f5f0     AC C0 B1 FD | 	call	#__system___getiolock_0599
0f5f4     FD 12 02 F6 | 	mov	arg01, result1
0f5f8     7C 63 B1 FD | 	call	#__system___lockmem
0f5fc     AE 01 00 FF 
0f600     AA 14 06 F6 | 	mov	arg02, ##@LR__5842
0f604     00 12 06 F6 | 	mov	arg01, #0
0f608     00 16 06 F6 | 	mov	arg03, #0
0f60c     5C 70 B1 FD | 	call	#__system___basic_print_string
0f610     00 12 06 F6 | 	mov	arg01, #0
0f614     88 C0 B1 FD | 	call	#__system___getiolock_0599
0f618     FD 00 68 FC | 	wrlong	#0, result1
0f61c     27 12 06 F6 | 	mov	arg01, #39
0f620     00 14 06 F6 | 	mov	arg02, #0
0f624     64 29 B1 FD | 	call	#_printerror
0f628     78 00 90 FD | 	jmp	#LR__1321
0f62c                 | LR__1320
0f62c     50 D6 BF FD | 	call	#_pop
0f630     A7 FA 61 FC | 	wrlong	result1, fp
0f634     04 4E 05 F1 | 	add	fp, #4
0f638     A7 FC 61 FC | 	wrlong	result2, fp
0f63c     04 4E 05 F1 | 	add	fp, #4
0f640     A7 FE 61 FC | 	wrlong	result3, fp
0f644     08 4E 85 F1 | 	sub	fp, #8
0f648     52 00 00 FF 
0f64c     54 E4 05 F1 | 	add	objptr, ##42068
0f650     F2 26 02 FB | 	rdlong	local01, objptr
0f654     52 00 00 FF 
0f658     54 E4 85 F1 | 	sub	objptr, ##42068
0f65c     A7 12 02 F6 | 	mov	arg01, fp
0f660     BC D8 BF FD | 	call	#_converttofloat
0f664     FD 14 02 F6 | 	mov	arg02, result1
0f668     13 13 02 F6 | 	mov	arg01, local01
0f66c     80 91 B1 FD | 	call	#__system___float_mul
0f670     FD 14 02 F6 | 	mov	arg02, result1
0f674     87 E4 1F FF 
0f678     DB 13 06 F6 | 	mov	arg01, ##1070141403
0f67c     1F 14 E6 F4 | 	bitnot	arg02, #31
0f680     9C 8D B1 FD | 	call	#__system___float_add
0f684     FD 12 02 F6 | 	mov	arg01, result1
0f688     C4 9A B1 FD | 	call	#__system____builtin_sinf
0f68c     A7 FA 61 FC | 	wrlong	result1, fp
0f690     08 4E 05 F1 | 	add	fp, #8
0f694     A7 3C 68 FC | 	wrlong	#30, fp
0f698     08 4E 85 F1 | 	sub	fp, #8
0f69c     A7 12 02 F6 | 	mov	arg01, fp
0f6a0     74 D6 BF FD | 	call	#_push
0f6a4                 | LR__1321
0f6a4     A7 F0 03 F6 | 	mov	ptra, fp
0f6a8     B2 00 A0 FD | 	call	#popregs_
0f6ac                 | _do_cos_ret
0f6ac     2D 00 64 FD | 	ret
0f6b0                 | 
0f6b0                 | ' 
0f6b0                 | ' '-------------------- cursor
0f6b0                 | ' 
0f6b0                 | ' sub do_cursor
0f6b0                 | _do_cursor
0f6b0     CC D5 BF FD | 	call	#_pop
0f6b4     00 FA 4D F2 | 	cmps	result1, #0 wz
0f6b8                 | ' t1=pop()
0f6b8                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f6b8     14 00 90 5D |  if_ne	jmp	#LR__1330
0f6bc     11 12 06 F6 | 	mov	arg01, #17
0f6c0     00 14 06 F6 | 	mov	arg02, #0
0f6c4     00 16 06 F6 | 	mov	arg03, #0
0f6c8     08 39 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f6cc     10 00 90 FD | 	jmp	#LR__1331
0f6d0                 | LR__1330
0f6d0     11 12 06 F6 | 	mov	arg01, #17
0f6d4     08 14 06 F6 | 	mov	arg02, #8
0f6d8     10 16 06 F6 | 	mov	arg03, #16
0f6dc     F4 38 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f6e0                 | LR__1331
0f6e0                 | _do_cursor_ret
0f6e0     2D 00 64 FD | 	ret
0f6e4                 | 
0f6e4                 | ' 
0f6e4                 | ' '-------------------- defenv
0f6e4                 | ' 
0f6e4                 | ' sub do_defenv
0f6e4                 | _do_defenv
0f6e4     08 4A 05 F6 | 	mov	COUNT_, #8
0f6e8     A8 00 A0 FD | 	call	#pushregs_
0f6ec     58 F0 07 F1 | 	add	ptra, #88
0f6f0     4A 00 00 FF 
0f6f4     80 E4 05 F1 | 	add	objptr, ##38016
0f6f8     F2 26 02 FB | 	rdlong	local01, objptr
0f6fc     13 1B 02 F6 | 	mov	arg05, local01
0f700     01 1A 66 F0 | 	shl	arg05, #1
0f704     13 1B 02 F1 | 	add	arg05, local01
0f708     02 1A 66 F0 | 	shl	arg05, #2
0f70c     03 00 00 FF 
0f710     04 E4 85 F1 | 	sub	objptr, ##1540
0f714     F2 1A 02 F1 | 	add	arg05, objptr
0f718     0D 1B 02 FB | 	rdlong	arg05, arg05
0f71c     10 4E 05 F1 | 	add	fp, #16
0f720     A7 1A 62 FC | 	wrlong	arg05, fp
0f724                 | ' 
0f724                 | ' numpar=compiledline(lineptr_e).result.uresult
0f724                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0f724     10 4E 85 F1 | 	sub	fp, #16
0f728     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f72c     47 00 00 FF 
0f730     7C E4 85 F1 | 	sub	objptr, ##36476
0f734     10 4E 05 51 |  if_ne	add	fp, #16
0f738     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f73c     10 4E 85 51 |  if_ne	sub	fp, #16
0f740     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0f744     8C 0A 90 5D |  if_ne	jmp	#LR__1361
0f748                 | ' 
0f748                 | ' if numpar=2 then						' env from .h2 or from a pointer
0f748     10 4E 05 F1 | 	add	fp, #16
0f74c     A7 26 02 FB | 	rdlong	local01, fp
0f750     10 4E 85 F1 | 	sub	fp, #16
0f754     02 26 0E F2 | 	cmp	local01, #2 wz
0f758     24 04 90 5D |  if_ne	jmp	#LR__1353
0f75c     20 D5 BF FD | 	call	#_pop
0f760     FF 1A 02 F6 | 	mov	arg05, result3
0f764     40 4E 05 F1 | 	add	fp, #64
0f768     A7 FA 61 FC | 	wrlong	result1, fp
0f76c     04 4E 05 F1 | 	add	fp, #4
0f770     A7 FC 61 FC | 	wrlong	result2, fp
0f774     04 4E 05 F1 | 	add	fp, #4
0f778     A7 1A 62 FC | 	wrlong	arg05, fp
0f77c                 | '   t1=pop()
0f77c                 | '   if t1.result_type=result_string2 then 
0f77c     48 4E 85 F1 | 	sub	fp, #72
0f780     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f784     20 00 90 5D |  if_ne	jmp	#LR__1340
0f788     40 4E 05 F1 | 	add	fp, #64
0f78c     A7 12 02 FB | 	rdlong	arg01, fp
0f790     40 4E 85 F1 | 	sub	fp, #64
0f794     60 D6 BF FD | 	call	#_convertstring
0f798     4C 4E 05 F1 | 	add	fp, #76
0f79c     A7 FA 61 FC | 	wrlong	result1, fp
0f7a0     4C 4E 85 F1 | 	sub	fp, #76
0f7a4     58 00 90 FD | 	jmp	#LR__1343
0f7a8                 | LR__1340
0f7a8     48 4E 05 F1 | 	add	fp, #72
0f7ac     A7 26 02 FB | 	rdlong	local01, fp
0f7b0     48 4E 85 F1 | 	sub	fp, #72
0f7b4     1F 26 0E F2 | 	cmp	local01, #31 wz
0f7b8     18 00 90 5D |  if_ne	jmp	#LR__1341
0f7bc     40 4E 05 F1 | 	add	fp, #64
0f7c0     A7 26 02 FB | 	rdlong	local01, fp
0f7c4     0C 4E 05 F1 | 	add	fp, #12
0f7c8     A7 26 62 FC | 	wrlong	local01, fp
0f7cc     4C 4E 85 F1 | 	sub	fp, #76
0f7d0     2C 00 90 FD | 	jmp	#LR__1342
0f7d4                 | LR__1341
0f7d4     AE 01 00 FF 
0f7d8     B0 26 06 F6 | 	mov	local01, ##@LR__5843
0f7dc     4C 4E 05 F1 | 	add	fp, #76
0f7e0     A7 26 62 FC | 	wrlong	local01, fp
0f7e4     0C 4E 85 F1 | 	sub	fp, #12
0f7e8     A7 12 02 F6 | 	mov	arg01, fp
0f7ec     40 4E 85 F1 | 	sub	fp, #64
0f7f0     70 D6 BF FD | 	call	#_converttoint
0f7f4     1C 4E 05 F1 | 	add	fp, #28
0f7f8     A7 FA 61 FC | 	wrlong	result1, fp
0f7fc     1C 4E 85 F1 | 	sub	fp, #28
0f800                 | LR__1342
0f800                 | LR__1343
0f800                 | '   if s1<>"" then 
0f800     4C 4E 05 F1 | 	add	fp, #76
0f804     A7 12 02 FB | 	rdlong	arg01, fp
0f808     4C 4E 85 F1 | 	sub	fp, #76
0f80c     AE 01 00 FF 
0f810     B1 14 06 F6 | 	mov	arg02, ##@LR__5844
0f814     88 61 B1 FD | 	call	#__system___string_cmp
0f818     00 FA 0D F2 | 	cmp	result1, #0 wz
0f81c     24 02 90 AD |  if_e	jmp	#LR__1347
0f820     5C D4 BF FD | 	call	#_pop
0f824     FF 26 02 F6 | 	mov	local01, result3
0f828     40 4E 05 F1 | 	add	fp, #64
0f82c     A7 FA 61 FC | 	wrlong	result1, fp
0f830     04 4E 05 F1 | 	add	fp, #4
0f834     A7 FC 61 FC | 	wrlong	result2, fp
0f838     04 4E 05 F1 | 	add	fp, #4
0f83c     A7 26 62 FC | 	wrlong	local01, fp
0f840     08 4E 85 F1 | 	sub	fp, #8
0f844     A7 12 02 F6 | 	mov	arg01, fp
0f848     40 4E 85 F1 | 	sub	fp, #64
0f84c     14 D6 BF FD | 	call	#_converttoint
0f850     18 4E 05 F1 | 	add	fp, #24
0f854     A7 FA 61 FC | 	wrlong	result1, fp
0f858     18 4E 85 F1 | 	sub	fp, #24
0f85c                 | '     t1=pop()
0f85c                 | '     channel=converttoint(t1) 
0f85c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0f85c     09 12 06 F6 | 	mov	arg01, #9
0f860     6C B4 B1 FD | 	call	#__system__close
0f864     09 26 06 F6 | 	mov	local01, #9
0f868     AE 01 00 FF 
0f86c     B2 12 06 F6 | 	mov	arg01, ##@LR__5845
0f870     4C 4E 05 F1 | 	add	fp, #76
0f874     A7 14 02 FB | 	rdlong	arg02, fp
0f878     4C 4E 85 F1 | 	sub	fp, #76
0f87c     54 61 B1 FD | 	call	#__system___string_concat
0f880     FD 14 02 F6 | 	mov	arg02, result1
0f884     13 13 02 F6 | 	mov	arg01, local01
0f888     00 16 06 F6 | 	mov	arg03, #0
0f88c     EC 6C B1 FD | 	call	#__system___basic_open_string
0f890     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f894     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f898     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f89c     0C 4E 05 F1 | 	add	fp, #12
0f8a0     A7 FA 61 FC | 	wrlong	result1, fp
0f8a4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f8a4     0C 4E 85 F1 | 	sub	fp, #12
0f8a8     A0 00 90 AD |  if_e	jmp	#LR__1344
0f8ac     00 12 06 F6 | 	mov	arg01, #0
0f8b0     EC BD B1 FD | 	call	#__system___getiolock_0599
0f8b4     FD 12 02 F6 | 	mov	arg01, result1
0f8b8     BC 60 B1 FD | 	call	#__system___lockmem
0f8bc     AE 01 00 FF 
0f8c0     BF 14 06 F6 | 	mov	arg02, ##@LR__5846
0f8c4     00 12 06 F6 | 	mov	arg01, #0
0f8c8     00 16 06 F6 | 	mov	arg03, #0
0f8cc     9C 6D B1 FD | 	call	#__system___basic_print_string
0f8d0     0C 4E 05 F1 | 	add	fp, #12
0f8d4     A7 14 02 FB | 	rdlong	arg02, fp
0f8d8     0C 4E 85 F1 | 	sub	fp, #12
0f8dc     00 12 06 F6 | 	mov	arg01, #0
0f8e0     00 16 06 F6 | 	mov	arg03, #0
0f8e4     0A 18 06 F6 | 	mov	arg04, #10
0f8e8     C4 6D B1 FD | 	call	#__system___basic_print_integer
0f8ec     AE 01 00 FF 
0f8f0     CD 14 06 F6 | 	mov	arg02, ##@LR__5847
0f8f4     00 12 06 F6 | 	mov	arg01, #0
0f8f8     00 16 06 F6 | 	mov	arg03, #0
0f8fc     6C 6D B1 FD | 	call	#__system___basic_print_string
0f900     00 26 06 F6 | 	mov	local01, #0
0f904     0C 4E 05 F1 | 	add	fp, #12
0f908     A7 12 02 FB | 	rdlong	arg01, fp
0f90c     0C 4E 85 F1 | 	sub	fp, #12
0f910     F0 89 B1 FD | 	call	#__system___strerror
0f914     FD 14 02 F6 | 	mov	arg02, result1
0f918     13 13 02 F6 | 	mov	arg01, local01
0f91c     00 16 06 F6 | 	mov	arg03, #0
0f920     48 6D B1 FD | 	call	#__system___basic_print_string
0f924     00 12 06 F6 | 	mov	arg01, #0
0f928     0A 14 06 F6 | 	mov	arg02, #10
0f92c     00 16 06 F6 | 	mov	arg03, #0
0f930     E0 6C B1 FD | 	call	#__system___basic_print_char
0f934     00 12 06 F6 | 	mov	arg01, #0
0f938     64 BD B1 FD | 	call	#__system___getiolock_0599
0f93c     FD 00 68 FC | 	wrlong	#0, result1
0f940     09 12 06 F6 | 	mov	arg01, #9
0f944     88 B3 B1 FD | 	call	#__system__close
0f948     88 08 90 FD | 	jmp	#LR__1361
0f94c                 | LR__1344
0f94c                 | '     get #9,17,envbuf8(channel,0),256
0f94c     18 4E 05 F1 | 	add	fp, #24
0f950     A7 1A 02 FB | 	rdlong	arg05, fp
0f954     18 4E 85 F1 | 	sub	fp, #24
0f958     0D 17 02 F6 | 	mov	arg03, arg05
0f95c     09 16 66 F0 | 	shl	arg03, #9
0f960     0D 17 02 F1 | 	add	arg03, arg05
0f964     0C 00 00 FF 
0f968     D8 E4 05 F1 | 	add	objptr, ##6360
0f96c     F2 16 02 F1 | 	add	arg03, objptr
0f970     09 12 06 F6 | 	mov	arg01, #9
0f974     11 14 06 F6 | 	mov	arg02, #17
0f978     00 19 06 F6 | 	mov	arg04, #256
0f97c     01 1A 06 F6 | 	mov	arg05, #1
0f980     0C 00 00 FF 
0f984     D8 E4 85 F1 | 	sub	objptr, ##6360
0f988     5C 6E B1 FD | 	call	#__system___basic_get
0f98c                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0f98c     14 4E 05 F1 | 	add	fp, #20
0f990     A7 FE 69 FC | 	wrlong	#255, fp
0f994     14 4E 85 F1 | 	sub	fp, #20
0f998     0C 00 00 FF 
0f99c     D8 E4 05 F1 | 	add	objptr, ##6360
0f9a0     97 30 48 FB | 	callpa	#(@LR__1346-@LR__1345)>>2,fcache_load_ptr_
0f9a4                 | LR__1345
0f9a4     18 4E 05 F1 | 	add	fp, #24
0f9a8     A7 16 02 FB | 	rdlong	arg03, fp
0f9ac     0B 27 02 F6 | 	mov	local01, arg03
0f9b0     09 26 66 F0 | 	shl	local01, #9
0f9b4     F2 26 02 F1 | 	add	local01, objptr
0f9b8     04 4E 85 F1 | 	sub	fp, #4
0f9bc     A7 1A 02 FB | 	rdlong	arg05, fp
0f9c0     0D 19 02 F6 | 	mov	arg04, arg05
0f9c4     01 18 66 F0 | 	shl	arg04, #1
0f9c8     13 19 02 F1 | 	add	arg04, local01
0f9cc     0B 27 02 F6 | 	mov	local01, arg03
0f9d0     09 26 66 F0 | 	shl	local01, #9
0f9d4     0B 27 02 F1 | 	add	local01, arg03
0f9d8     F2 26 02 F1 | 	add	local01, objptr
0f9dc     13 1B 02 F1 | 	add	arg05, local01
0f9e0     0D 27 C2 FA | 	rdbyte	local01, arg05
0f9e4     00 27 06 FA | 	mul	local01, #256
0f9e8     0C 27 52 FC | 	wrword	local01, arg04
0f9ec     A7 26 02 FB | 	rdlong	local01, fp
0f9f0     01 26 86 F1 | 	sub	local01, #1
0f9f4     A7 26 62 FC | 	wrlong	local01, fp
0f9f8     14 4E 85 F1 | 	sub	fp, #20
0f9fc     00 26 56 F2 | 	cmps	local01, #0 wc
0fa00     A0 FF 9F 3D |  if_ae	jmp	#LR__1345
0fa04                 | LR__1346
0fa04     0C 00 00 FF 
0fa08     D8 E4 85 F1 | 	sub	objptr, ##6360
0fa0c                 | '     close #9
0fa0c     09 12 06 F6 | 	mov	arg01, #9
0fa10     BC B2 B1 FD | 	call	#__system__close
0fa14     18 4E 05 F1 | 	add	fp, #24
0fa18     A7 26 02 FB | 	rdlong	local01, fp
0fa1c     18 4E 85 F1 | 	sub	fp, #24
0fa20     09 26 66 F0 | 	shl	local01, #9
0fa24     0C 00 00 FF 
0fa28     D8 E4 05 F1 | 	add	objptr, ##6360
0fa2c     F2 26 02 F1 | 	add	local01, objptr
0fa30     FE 27 06 F1 | 	add	local01, #510
0fa34     13 01 58 FC | 	wrword	#0, local01
0fa38                 | '     envbuf(channel,255)=0                                                              
0fa38                 | '     return
0fa38     0C 00 00 FF 
0fa3c     D8 E4 85 F1 | 	sub	objptr, ##6360
0fa40     90 07 90 FD | 	jmp	#LR__1361
0fa44                 | LR__1347
0fa44                 | '     if wptr < $80000 then 
0fa44     1C 4E 05 F1 | 	add	fp, #28
0fa48     A7 28 02 FB | 	rdlong	local02, fp
0fa4c     1C 4E 85 F1 | 	sub	fp, #28
0fa50     00 04 00 FF 
0fa54     00 28 56 F2 | 	cmps	local02, ##524288 wc
0fa58     7C 00 90 3D |  if_ae	jmp	#LR__1350
0fa5c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0fa5c     14 4E 05 F1 | 	add	fp, #20
0fa60     A7 00 68 FC | 	wrlong	#0, fp
0fa64     14 4E 85 F1 | 	sub	fp, #20
0fa68     0C 00 00 FF 
0fa6c     D8 E4 05 F1 | 	add	objptr, ##6360
0fa70     97 2C 48 FB | 	callpa	#(@LR__1349-@LR__1348)>>2,fcache_load_ptr_
0fa74                 | LR__1348
0fa74     18 4E 05 F1 | 	add	fp, #24
0fa78     A7 28 02 FB | 	rdlong	local02, fp
0fa7c     09 28 66 F0 | 	shl	local02, #9
0fa80     F2 28 02 F1 | 	add	local02, objptr
0fa84     04 4E 85 F1 | 	sub	fp, #4
0fa88     A7 26 02 FB | 	rdlong	local01, fp
0fa8c     13 1B 02 F6 | 	mov	arg05, local01
0fa90     01 1A 66 F0 | 	shl	arg05, #1
0fa94     14 1B 02 F1 | 	add	arg05, local02
0fa98     08 4E 05 F1 | 	add	fp, #8
0fa9c     A7 12 02 FB | 	rdlong	arg01, fp
0faa0     01 26 66 F0 | 	shl	local01, #1
0faa4     13 13 02 F1 | 	add	arg01, local01
0faa8     09 FB E1 FA | 	rdword	result1, arg01
0faac     0D FB 51 FC | 	wrword	result1, arg05
0fab0     08 4E 85 F1 | 	sub	fp, #8
0fab4     A7 28 02 FB | 	rdlong	local02, fp
0fab8     01 28 06 F1 | 	add	local02, #1
0fabc     A7 28 62 FC | 	wrlong	local02, fp
0fac0     14 4E 85 F1 | 	sub	fp, #20
0fac4     00 29 56 F2 | 	cmps	local02, #256 wc
0fac8     A8 FF 9F CD |  if_b	jmp	#LR__1348
0facc                 | LR__1349
0facc     0C 00 00 FF 
0fad0     D8 E4 85 F1 | 	sub	objptr, ##6360
0fad4     78 00 90 FD | 	jmp	#LR__1352
0fad8                 | LR__1350
0fad8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0fad8     14 4E 05 F1 | 	add	fp, #20
0fadc     A7 00 68 FC | 	wrlong	#0, fp
0fae0     14 4E 85 F1 | 	sub	fp, #20
0fae4                 | LR__1351
0fae4     18 4E 05 F1 | 	add	fp, #24
0fae8     A7 28 02 FB | 	rdlong	local02, fp
0faec     09 28 66 F0 | 	shl	local02, #9
0faf0     0C 00 00 FF 
0faf4     D8 E4 05 F1 | 	add	objptr, ##6360
0faf8     F2 28 02 F1 | 	add	local02, objptr
0fafc     04 4E 85 F1 | 	sub	fp, #4
0fb00     A7 26 02 FB | 	rdlong	local01, fp
0fb04     13 2B 02 F6 | 	mov	local03, local01
0fb08     01 2A 66 F0 | 	shl	local03, #1
0fb0c     14 2B 02 F1 | 	add	local03, local02
0fb10     08 4E 05 F1 | 	add	fp, #8
0fb14     A7 12 02 FB | 	rdlong	arg01, fp
0fb18     1C 4E 85 F1 | 	sub	fp, #28
0fb1c     01 26 66 F0 | 	shl	local01, #1
0fb20     13 13 02 F1 | 	add	arg01, local01
0fb24     0C 00 00 FF 
0fb28     D8 E4 85 F1 | 	sub	objptr, ##6360
0fb2c     84 27 B1 FD | 	call	#_psdpeek
0fb30     15 FB 51 FC | 	wrword	result1, local03
0fb34     14 4E 05 F1 | 	add	fp, #20
0fb38     A7 2A 02 FB | 	rdlong	local03, fp
0fb3c     01 2A 06 F1 | 	add	local03, #1
0fb40     A7 2A 62 FC | 	wrlong	local03, fp
0fb44     14 4E 85 F1 | 	sub	fp, #20
0fb48     00 2B 56 F2 | 	cmps	local03, #256 wc
0fb4c     94 FF 9F CD |  if_b	jmp	#LR__1351
0fb50                 | LR__1352
0fb50     18 4E 05 F1 | 	add	fp, #24
0fb54     A7 2A 02 FB | 	rdlong	local03, fp
0fb58     18 4E 85 F1 | 	sub	fp, #24
0fb5c     09 2A 66 F0 | 	shl	local03, #9
0fb60     0C 00 00 FF 
0fb64     D8 E4 05 F1 | 	add	objptr, ##6360
0fb68     F2 2A 02 F1 | 	add	local03, objptr
0fb6c     FE 2B 06 F1 | 	add	local03, #510
0fb70     15 01 58 FC | 	wrword	#0, local03
0fb74                 | '     envbuf(channel,255)=0
0fb74                 | '     return   
0fb74     0C 00 00 FF 
0fb78     D8 E4 85 F1 | 	sub	objptr, ##6360
0fb7c     54 06 90 FD | 	jmp	#LR__1361
0fb80                 | LR__1353
0fb80                 | ' 
0fb80                 | ' if numpar=5 then   						 'simple adsr
0fb80     10 4E 05 F1 | 	add	fp, #16
0fb84     A7 28 02 FB | 	rdlong	local02, fp
0fb88     10 4E 85 F1 | 	sub	fp, #16
0fb8c     05 28 0E F2 | 	cmp	local02, #5 wz
0fb90     14 06 90 5D |  if_ne	jmp	#LR__1360
0fb94     E8 D0 BF FD | 	call	#_pop
0fb98     FF 26 02 F6 | 	mov	local01, result3
0fb9c     40 4E 05 F1 | 	add	fp, #64
0fba0     A7 FA 61 FC | 	wrlong	result1, fp
0fba4     04 4E 05 F1 | 	add	fp, #4
0fba8     A7 FC 61 FC | 	wrlong	result2, fp
0fbac     04 4E 05 F1 | 	add	fp, #4
0fbb0     A7 26 62 FC | 	wrlong	local01, fp
0fbb4     08 4E 85 F1 | 	sub	fp, #8
0fbb8     A7 12 02 F6 | 	mov	arg01, fp
0fbbc     40 4E 85 F1 | 	sub	fp, #64
0fbc0     5C D3 BF FD | 	call	#_converttofloat
0fbc4     FD 28 02 F6 | 	mov	local02, result1
0fbc8     2C 4E 05 F1 | 	add	fp, #44
0fbcc     A7 28 62 FC | 	wrlong	local02, fp
0fbd0     2C 4E 85 F1 | 	sub	fp, #44
0fbd4     A8 D0 BF FD | 	call	#_pop
0fbd8     FF 26 02 F6 | 	mov	local01, result3
0fbdc     40 4E 05 F1 | 	add	fp, #64
0fbe0     A7 FA 61 FC | 	wrlong	result1, fp
0fbe4     04 4E 05 F1 | 	add	fp, #4
0fbe8     A7 FC 61 FC | 	wrlong	result2, fp
0fbec     04 4E 05 F1 | 	add	fp, #4
0fbf0     A7 26 62 FC | 	wrlong	local01, fp
0fbf4     08 4E 85 F1 | 	sub	fp, #8
0fbf8     A7 12 02 F6 | 	mov	arg01, fp
0fbfc     40 4E 85 F1 | 	sub	fp, #64
0fc00     1C D3 BF FD | 	call	#_converttofloat
0fc04     FD 28 02 F6 | 	mov	local02, result1
0fc08     28 4E 05 F1 | 	add	fp, #40
0fc0c     A7 28 62 FC | 	wrlong	local02, fp
0fc10     28 4E 85 F1 | 	sub	fp, #40
0fc14     68 D0 BF FD | 	call	#_pop
0fc18     FF 26 02 F6 | 	mov	local01, result3
0fc1c     40 4E 05 F1 | 	add	fp, #64
0fc20     A7 FA 61 FC | 	wrlong	result1, fp
0fc24     04 4E 05 F1 | 	add	fp, #4
0fc28     A7 FC 61 FC | 	wrlong	result2, fp
0fc2c     04 4E 05 F1 | 	add	fp, #4
0fc30     A7 26 62 FC | 	wrlong	local01, fp
0fc34     08 4E 85 F1 | 	sub	fp, #8
0fc38     A7 12 02 F6 | 	mov	arg01, fp
0fc3c     40 4E 85 F1 | 	sub	fp, #64
0fc40     DC D2 BF FD | 	call	#_converttofloat
0fc44     FD 28 02 F6 | 	mov	local02, result1
0fc48     24 4E 05 F1 | 	add	fp, #36
0fc4c     A7 28 62 FC | 	wrlong	local02, fp
0fc50     24 4E 85 F1 | 	sub	fp, #36
0fc54     28 D0 BF FD | 	call	#_pop
0fc58     FF 26 02 F6 | 	mov	local01, result3
0fc5c     40 4E 05 F1 | 	add	fp, #64
0fc60     A7 FA 61 FC | 	wrlong	result1, fp
0fc64     04 4E 05 F1 | 	add	fp, #4
0fc68     A7 FC 61 FC | 	wrlong	result2, fp
0fc6c     04 4E 05 F1 | 	add	fp, #4
0fc70     A7 26 62 FC | 	wrlong	local01, fp
0fc74     08 4E 85 F1 | 	sub	fp, #8
0fc78     A7 12 02 F6 | 	mov	arg01, fp
0fc7c     40 4E 85 F1 | 	sub	fp, #64
0fc80     9C D2 BF FD | 	call	#_converttofloat
0fc84     FD 28 02 F6 | 	mov	local02, result1
0fc88     20 4E 05 F1 | 	add	fp, #32
0fc8c     A7 28 62 FC | 	wrlong	local02, fp
0fc90     20 4E 85 F1 | 	sub	fp, #32
0fc94     E8 CF BF FD | 	call	#_pop
0fc98     FF 26 02 F6 | 	mov	local01, result3
0fc9c     40 4E 05 F1 | 	add	fp, #64
0fca0     A7 FA 61 FC | 	wrlong	result1, fp
0fca4     04 4E 05 F1 | 	add	fp, #4
0fca8     A7 FC 61 FC | 	wrlong	result2, fp
0fcac     04 4E 05 F1 | 	add	fp, #4
0fcb0     A7 26 62 FC | 	wrlong	local01, fp
0fcb4     08 4E 85 F1 | 	sub	fp, #8
0fcb8     A7 12 02 F6 | 	mov	arg01, fp
0fcbc     40 4E 85 F1 | 	sub	fp, #64
0fcc0     A0 D1 BF FD | 	call	#_converttoint
0fcc4     18 4E 05 F1 | 	add	fp, #24
0fcc8     A7 FA 61 FC | 	wrlong	result1, fp
0fccc                 | '   t1=pop() : rr=converttofloat(t1)
0fccc                 | '   t1=pop() : ss=converttofloat(t1) 
0fccc                 | '   t1=pop() : dd=converttofloat(t1)
0fccc                 | '   t1=pop() : aa=converttofloat(t1)
0fccc                 | '   t1=pop() : channel=converttoint(t1)
0fccc                 | '   if ss<0.0 then ss=0.0 
0fccc     10 4E 05 F1 | 	add	fp, #16
0fcd0     A7 12 02 FB | 	rdlong	arg01, fp
0fcd4     28 4E 85 F1 | 	sub	fp, #40
0fcd8     00 14 06 F6 | 	mov	arg02, #0
0fcdc     01 16 06 F6 | 	mov	arg03, #1
0fce0     40 8F B1 FD | 	call	#__system___float_cmp
0fce4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fce8     28 4E 05 C1 |  if_b	add	fp, #40
0fcec     A7 00 68 CC |  if_b	wrlong	#0, fp
0fcf0     28 4E 85 C1 |  if_b	sub	fp, #40
0fcf4                 | '   if ss>1.0 then ss=1.0
0fcf4     28 4E 05 F1 | 	add	fp, #40
0fcf8     A7 12 02 FB | 	rdlong	arg01, fp
0fcfc     28 4E 85 F1 | 	sub	fp, #40
0fd00     00 C0 1F FF 
0fd04     00 14 06 F6 | 	mov	arg02, ##1065353216
0fd08     01 16 66 F6 | 	neg	arg03, #1
0fd0c     14 8F B1 FD | 	call	#__system___float_cmp
0fd10     01 FA 55 F2 | 	cmps	result1, #1 wc
0fd14     28 4E 05 31 |  if_ae	add	fp, #40
0fd18     00 C0 9F 3F 
0fd1c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0fd20     28 4E 85 31 |  if_ae	sub	fp, #40
0fd24     20 4E 05 F1 | 	add	fp, #32
0fd28     A7 12 02 FB | 	rdlong	arg01, fp
0fd2c     04 4E 05 F1 | 	add	fp, #4
0fd30     A7 14 02 FB | 	rdlong	arg02, fp
0fd34     24 4E 85 F1 | 	sub	fp, #36
0fd38     E4 86 B1 FD | 	call	#__system___float_add
0fd3c     FD 12 02 F6 | 	mov	arg01, result1
0fd40     2C 4E 05 F1 | 	add	fp, #44
0fd44     A7 14 02 FB | 	rdlong	arg02, fp
0fd48     2C 4E 85 F1 | 	sub	fp, #44
0fd4c     D0 86 B1 FD | 	call	#__system___float_add
0fd50     30 4E 05 F1 | 	add	fp, #48
0fd54     A7 FA 61 FC | 	wrlong	result1, fp
0fd58     FD 14 02 F6 | 	mov	arg02, result1
0fd5c     30 4E 85 F1 | 	sub	fp, #48
0fd60     00 C0 21 FF 
0fd64     00 12 06 F6 | 	mov	arg01, ##1132462080
0fd68     88 8C B1 FD | 	call	#__system___float_div
0fd6c     34 4E 05 F1 | 	add	fp, #52
0fd70     A7 FA 61 FC | 	wrlong	result1, fp
0fd74     14 4E 85 F1 | 	sub	fp, #20
0fd78     A7 12 02 FB | 	rdlong	arg01, fp
0fd7c     FD 14 02 F6 | 	mov	arg02, result1
0fd80     20 4E 85 F1 | 	sub	fp, #32
0fd84     68 8A B1 FD | 	call	#__system___float_mul
0fd88     FD 12 02 F6 | 	mov	arg01, result1
0fd8c     01 14 06 F6 | 	mov	arg02, #1
0fd90     24 8F B1 FD | 	call	#__system___float_tointeger
0fd94     A7 FA 61 FC | 	wrlong	result1, fp
0fd98     24 4E 05 F1 | 	add	fp, #36
0fd9c     A7 12 02 FB | 	rdlong	arg01, fp
0fda0     10 4E 05 F1 | 	add	fp, #16
0fda4     A7 14 02 FB | 	rdlong	arg02, fp
0fda8     34 4E 85 F1 | 	sub	fp, #52
0fdac     40 8A B1 FD | 	call	#__system___float_mul
0fdb0     FD 12 02 F6 | 	mov	arg01, result1
0fdb4     01 14 06 F6 | 	mov	arg02, #1
0fdb8     FC 8E B1 FD | 	call	#__system___float_tointeger
0fdbc     04 4E 05 F1 | 	add	fp, #4
0fdc0     A7 FA 61 FC | 	wrlong	result1, fp
0fdc4     28 4E 05 F1 | 	add	fp, #40
0fdc8     A7 12 02 FB | 	rdlong	arg01, fp
0fdcc     08 4E 05 F1 | 	add	fp, #8
0fdd0     A7 14 02 FB | 	rdlong	arg02, fp
0fdd4     34 4E 85 F1 | 	sub	fp, #52
0fdd8     14 8A B1 FD | 	call	#__system___float_mul
0fddc     FD 12 02 F6 | 	mov	arg01, result1
0fde0     01 14 06 F6 | 	mov	arg02, #1
0fde4     D0 8E B1 FD | 	call	#__system___float_tointeger
0fde8     0C 4E 05 F1 | 	add	fp, #12
0fdec     A7 FA 61 FC | 	wrlong	result1, fp
0fdf0     0C 4E 85 F1 | 	sub	fp, #12
0fdf4     F8 BF 23 FF 
0fdf8     00 28 06 F6 | 	mov	local02, ##1199566848
0fdfc     A7 12 02 FB | 	rdlong	arg01, fp
0fe00     09 13 52 F6 | 	abs	arg01, arg01 wc
0fe04     1F 2C C6 C9 |  if_b	decod	local04, #31
0fe08     00 2C 06 36 |  if_ae	mov	local04, #0
0fe0c     DC 85 B1 FD | 	call	#__system___float_fromuns
0fe10     16 FB 61 F5 | 	xor	result1, local04
0fe14     FD 14 02 F6 | 	mov	arg02, result1
0fe18     14 13 02 F6 | 	mov	arg01, local02
0fe1c     D4 8B B1 FD | 	call	#__system___float_div
0fe20     38 4E 05 F1 | 	add	fp, #56
0fe24     A7 FA 61 FC | 	wrlong	result1, fp
0fe28     F8 BF 23 FF 
0fe2c     00 28 06 F6 | 	mov	local02, ##1199566848
0fe30     10 4E 85 F1 | 	sub	fp, #16
0fe34     A7 14 02 FB | 	rdlong	arg02, fp
0fe38     28 4E 85 F1 | 	sub	fp, #40
0fe3c     F8 BF 23 FF 
0fe40     00 12 06 F6 | 	mov	arg01, ##1199566848
0fe44     A8 89 B1 FD | 	call	#__system___float_mul
0fe48     FD 14 02 F6 | 	mov	arg02, result1
0fe4c     14 13 02 F6 | 	mov	arg01, local02
0fe50     1F 14 E6 F4 | 	bitnot	arg02, #31
0fe54     C8 85 B1 FD | 	call	#__system___float_add
0fe58     FD 28 02 F6 | 	mov	local02, result1
0fe5c     04 4E 05 F1 | 	add	fp, #4
0fe60     A7 12 02 FB | 	rdlong	arg01, fp
0fe64     04 4E 85 F1 | 	sub	fp, #4
0fe68     09 13 52 F6 | 	abs	arg01, arg01 wc
0fe6c     1F 2C C6 C9 |  if_b	decod	local04, #31
0fe70     00 2C 06 36 |  if_ae	mov	local04, #0
0fe74     74 85 B1 FD | 	call	#__system___float_fromuns
0fe78     16 FB 61 F5 | 	xor	result1, local04
0fe7c     FD 14 02 F6 | 	mov	arg02, result1
0fe80     14 13 02 F6 | 	mov	arg01, local02
0fe84     6C 8B B1 FD | 	call	#__system___float_div
0fe88     24 4E 05 F1 | 	add	fp, #36
0fe8c     A7 FA 61 FC | 	wrlong	result1, fp
0fe90     04 4E 05 F1 | 	add	fp, #4
0fe94     A7 14 02 FB | 	rdlong	arg02, fp
0fe98     28 4E 85 F1 | 	sub	fp, #40
0fe9c     F8 BF 23 FF 
0fea0     00 12 06 F6 | 	mov	arg01, ##1199566848
0fea4     48 89 B1 FD | 	call	#__system___float_mul
0fea8     FD 28 02 F6 | 	mov	local02, result1
0feac     0C 4E 05 F1 | 	add	fp, #12
0feb0     A7 12 02 FB | 	rdlong	arg01, fp
0feb4     0C 4E 85 F1 | 	sub	fp, #12
0feb8     09 13 52 F6 | 	abs	arg01, arg01 wc
0febc     1F 2C C6 C9 |  if_b	decod	local04, #31
0fec0     00 2C 06 36 |  if_ae	mov	local04, #0
0fec4     24 85 B1 FD | 	call	#__system___float_fromuns
0fec8     16 FB 61 F5 | 	xor	result1, local04
0fecc     FD 14 02 F6 | 	mov	arg02, result1
0fed0     14 13 02 F6 | 	mov	arg01, local02
0fed4     1C 8B B1 FD | 	call	#__system___float_div
0fed8     3C 4E 05 F1 | 	add	fp, #60
0fedc     A7 FA 61 FC | 	wrlong	result1, fp
0fee0     24 4E 85 F1 | 	sub	fp, #36
0fee4     A7 2E 02 FB | 	rdlong	local05, fp
0fee8     18 4E 85 F1 | 	sub	fp, #24
0feec     01 2E 66 F0 | 	shl	local05, #1
0fef0     52 00 00 FF 
0fef4     60 E4 05 F1 | 	add	objptr, ##42080
0fef8     F2 2E 02 F1 | 	add	local05, objptr
0fefc     A7 30 02 FB | 	rdlong	local06, fp
0ff00     04 4E 05 F1 | 	add	fp, #4
0ff04     A7 2A 02 FB | 	rdlong	local03, fp
0ff08     15 31 02 F1 | 	add	local06, local03
0ff0c     17 31 52 FC | 	wrword	local06, local05
0ff10     1C 4E 05 F1 | 	add	fp, #28
0ff14     A7 00 68 FC | 	wrlong	#0, fp
0ff18                 | '   fulltime=aa+dd+rr
0ff18                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0ff18                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0ff18                 | '   suspoints(channel)=a+d
0ff18                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0ff18     0C 4E 85 F1 | 	sub	fp, #12
0ff1c     A7 00 68 FC | 	wrlong	#0, fp
0ff20     14 4E 85 F1 | 	sub	fp, #20
0ff24     A7 32 02 FB | 	rdlong	local07, fp
0ff28     52 00 00 FF 
0ff2c     60 E4 85 F1 | 	sub	objptr, ##42080
0ff30                 | LR__1354
0ff30     14 4E 05 F1 | 	add	fp, #20
0ff34     A7 28 02 FB | 	rdlong	local02, fp
0ff38     14 4E 85 F1 | 	sub	fp, #20
0ff3c     19 29 52 F2 | 	cmps	local02, local07 wc
0ff40     80 00 90 3D |  if_ae	jmp	#LR__1355
0ff44     18 4E 05 F1 | 	add	fp, #24
0ff48     A7 30 02 FB | 	rdlong	local06, fp
0ff4c     09 30 66 F0 | 	shl	local06, #9
0ff50     0C 00 00 FF 
0ff54     D8 E4 05 F1 | 	add	objptr, ##6360
0ff58     F2 30 02 F1 | 	add	local06, objptr
0ff5c     04 4E 85 F1 | 	sub	fp, #4
0ff60     A7 2E 02 FB | 	rdlong	local05, fp
0ff64     01 2E 66 F0 | 	shl	local05, #1
0ff68     18 2F 02 F1 | 	add	local05, local06
0ff6c     0C 4E 05 F1 | 	add	fp, #12
0ff70     A7 12 02 FB | 	rdlong	arg01, fp
0ff74     20 4E 85 F1 | 	sub	fp, #32
0ff78     0C 00 00 FF 
0ff7c     D8 E4 85 F1 | 	sub	objptr, ##6360
0ff80     01 14 06 F6 | 	mov	arg02, #1
0ff84     30 8D B1 FD | 	call	#__system___float_tointeger
0ff88     17 FB 51 FC | 	wrword	result1, local05
0ff8c     20 4E 05 F1 | 	add	fp, #32
0ff90     A7 12 02 FB | 	rdlong	arg01, fp
0ff94     18 4E 05 F1 | 	add	fp, #24
0ff98     A7 14 02 FB | 	rdlong	arg02, fp
0ff9c     38 4E 85 F1 | 	sub	fp, #56
0ffa0     7C 84 B1 FD | 	call	#__system___float_add
0ffa4     20 4E 05 F1 | 	add	fp, #32
0ffa8     A7 FA 61 FC | 	wrlong	result1, fp
0ffac     0C 4E 85 F1 | 	sub	fp, #12
0ffb0     A7 30 02 FB | 	rdlong	local06, fp
0ffb4     01 30 06 F1 | 	add	local06, #1
0ffb8     A7 30 62 FC | 	wrlong	local06, fp
0ffbc     14 4E 85 F1 | 	sub	fp, #20
0ffc0     6C FF 9F FD | 	jmp	#LR__1354
0ffc4                 | LR__1355
0ffc4                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0ffc4     A7 28 02 FB | 	rdlong	local02, fp
0ffc8     14 4E 05 F1 | 	add	fp, #20
0ffcc     A7 28 62 FC | 	wrlong	local02, fp
0ffd0     14 4E 85 F1 | 	sub	fp, #20
0ffd4     A7 34 02 FB | 	rdlong	local08, fp
0ffd8     04 4E 05 F1 | 	add	fp, #4
0ffdc     A7 28 02 FB | 	rdlong	local02, fp
0ffe0     04 4E 85 F1 | 	sub	fp, #4
0ffe4     14 35 02 F1 | 	add	local08, local02
0ffe8                 | LR__1356
0ffe8     14 4E 05 F1 | 	add	fp, #20
0ffec     A7 28 02 FB | 	rdlong	local02, fp
0fff0     14 4E 85 F1 | 	sub	fp, #20
0fff4     1A 29 52 F2 | 	cmps	local02, local08 wc
0fff8     A8 00 90 3D |  if_ae	jmp	#LR__1357
0fffc     18 4E 05 F1 | 	add	fp, #24
10000     A7 32 02 FB | 	rdlong	local07, fp
10004     09 32 66 F0 | 	shl	local07, #9
10008     0C 00 00 FF 
1000c     D8 E4 05 F1 | 	add	objptr, ##6360
10010     F2 32 02 F1 | 	add	local07, objptr
10014     04 4E 85 F1 | 	sub	fp, #4
10018     A7 30 02 FB | 	rdlong	local06, fp
1001c     01 30 66 F0 | 	shl	local06, #1
10020     19 31 02 F1 | 	add	local06, local07
10024     0C 4E 05 F1 | 	add	fp, #12
10028     A7 12 02 FB | 	rdlong	arg01, fp
1002c     20 4E 85 F1 | 	sub	fp, #32
10030     0C 00 00 FF 
10034     D8 E4 85 F1 | 	sub	objptr, ##6360
10038     01 14 06 F6 | 	mov	arg02, #1
1003c     78 8C B1 FD | 	call	#__system___float_tointeger
10040     18 FB 51 FC | 	wrword	result1, local06
10044     20 4E 05 F1 | 	add	fp, #32
10048     A7 12 02 FB | 	rdlong	arg01, fp
1004c     04 4E 05 F1 | 	add	fp, #4
10050     A7 14 02 FB | 	rdlong	arg02, fp
10054     24 4E 85 F1 | 	sub	fp, #36
10058     1F 14 E6 F4 | 	bitnot	arg02, #31
1005c     C0 83 B1 FD | 	call	#__system___float_add
10060     20 4E 05 F1 | 	add	fp, #32
10064     A7 FA 61 FC | 	wrlong	result1, fp
10068     20 4E 85 F1 | 	sub	fp, #32
1006c     FD 12 02 F6 | 	mov	arg01, result1
10070     00 14 06 F6 | 	mov	arg02, #0
10074     01 16 06 F6 | 	mov	arg03, #1
10078     A8 8B B1 FD | 	call	#__system___float_cmp
1007c     00 FA 55 F2 | 	cmps	result1, #0 wc
10080     20 4E 05 C1 |  if_b	add	fp, #32
10084     A7 00 68 CC |  if_b	wrlong	#0, fp
10088     20 4E 85 C1 |  if_b	sub	fp, #32
1008c     14 4E 05 F1 | 	add	fp, #20
10090     A7 32 02 FB | 	rdlong	local07, fp
10094     01 32 06 F1 | 	add	local07, #1
10098     A7 32 62 FC | 	wrlong	local07, fp
1009c     14 4E 85 F1 | 	sub	fp, #20
100a0     44 FF 9F FD | 	jmp	#LR__1356
100a4                 | LR__1357
100a4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
100a4     A7 28 02 FB | 	rdlong	local02, fp
100a8     04 4E 05 F1 | 	add	fp, #4
100ac     A7 34 02 FB | 	rdlong	local08, fp
100b0     1A 29 02 F1 | 	add	local02, local08
100b4     10 4E 05 F1 | 	add	fp, #16
100b8     A7 28 62 FC | 	wrlong	local02, fp
100bc     14 4E 85 F1 | 	sub	fp, #20
100c0                 | LR__1358
100c0     14 4E 05 F1 | 	add	fp, #20
100c4     A7 2E 02 FB | 	rdlong	local05, fp
100c8     14 4E 85 F1 | 	sub	fp, #20
100cc     00 2F 56 F2 | 	cmps	local05, #256 wc
100d0     A8 00 90 3D |  if_ae	jmp	#LR__1359
100d4     18 4E 05 F1 | 	add	fp, #24
100d8     A7 34 02 FB | 	rdlong	local08, fp
100dc     09 34 66 F0 | 	shl	local08, #9
100e0     0C 00 00 FF 
100e4     D8 E4 05 F1 | 	add	objptr, ##6360
100e8     F2 34 02 F1 | 	add	local08, objptr
100ec     04 4E 85 F1 | 	sub	fp, #4
100f0     A7 32 02 FB | 	rdlong	local07, fp
100f4     01 32 66 F0 | 	shl	local07, #1
100f8     1A 33 02 F1 | 	add	local07, local08
100fc     0C 4E 05 F1 | 	add	fp, #12
10100     A7 12 02 FB | 	rdlong	arg01, fp
10104     20 4E 85 F1 | 	sub	fp, #32
10108     0C 00 00 FF 
1010c     D8 E4 85 F1 | 	sub	objptr, ##6360
10110     01 14 06 F6 | 	mov	arg02, #1
10114     A0 8B B1 FD | 	call	#__system___float_tointeger
10118     19 FB 51 FC | 	wrword	result1, local07
1011c     20 4E 05 F1 | 	add	fp, #32
10120     A7 12 02 FB | 	rdlong	arg01, fp
10124     1C 4E 05 F1 | 	add	fp, #28
10128     A7 14 02 FB | 	rdlong	arg02, fp
1012c     3C 4E 85 F1 | 	sub	fp, #60
10130     1F 14 E6 F4 | 	bitnot	arg02, #31
10134     E8 82 B1 FD | 	call	#__system___float_add
10138     20 4E 05 F1 | 	add	fp, #32
1013c     A7 FA 61 FC | 	wrlong	result1, fp
10140     20 4E 85 F1 | 	sub	fp, #32
10144     FD 12 02 F6 | 	mov	arg01, result1
10148     00 14 06 F6 | 	mov	arg02, #0
1014c     01 16 06 F6 | 	mov	arg03, #1
10150     D0 8A B1 FD | 	call	#__system___float_cmp
10154     00 FA 55 F2 | 	cmps	result1, #0 wc
10158     20 4E 05 C1 |  if_b	add	fp, #32
1015c     A7 00 68 CC |  if_b	wrlong	#0, fp
10160     20 4E 85 C1 |  if_b	sub	fp, #32
10164     14 4E 05 F1 | 	add	fp, #20
10168     A7 34 02 FB | 	rdlong	local08, fp
1016c     01 34 06 F1 | 	add	local08, #1
10170     A7 34 62 FC | 	wrlong	local08, fp
10174     14 4E 85 F1 | 	sub	fp, #20
10178     44 FF 9F FD | 	jmp	#LR__1358
1017c                 | LR__1359
1017c     18 4E 05 F1 | 	add	fp, #24
10180     A7 2E 02 FB | 	rdlong	local05, fp
10184     18 4E 85 F1 | 	sub	fp, #24
10188     09 2E 66 F0 | 	shl	local05, #9
1018c     0C 00 00 FF 
10190     D8 E4 05 F1 | 	add	objptr, ##6360
10194     F2 2E 02 F1 | 	add	local05, objptr
10198     FE 2F 06 F1 | 	add	local05, #510
1019c     17 01 58 FC | 	wrword	#0, local05
101a0     0C 00 00 FF 
101a4     D8 E4 85 F1 | 	sub	objptr, ##6360
101a8                 | LR__1360
101a8     18 4E 05 F1 | 	add	fp, #24
101ac     A7 2E 02 FB | 	rdlong	local05, fp
101b0     18 4E 85 F1 | 	sub	fp, #24
101b4     09 2E 66 F0 | 	shl	local05, #9
101b8     0C 00 00 FF 
101bc     D8 E4 05 F1 | 	add	objptr, ##6360
101c0     F2 2E 02 F1 | 	add	local05, objptr
101c4     FE 2F 06 F1 | 	add	local05, #510
101c8     17 01 58 FC | 	wrword	#0, local05
101cc     0C 00 00 FF 
101d0     D8 E4 85 F1 | 	sub	objptr, ##6360
101d4                 | LR__1361
101d4     A7 F0 03 F6 | 	mov	ptra, fp
101d8     B2 00 A0 FD | 	call	#popregs_
101dc                 | _do_defenv_ret
101dc     2D 00 64 FD | 	ret
101e0                 | 
101e0                 | ' 
101e0                 | ' '-------------------- defsnd
101e0                 | ' 
101e0                 | ' sub do_defsnd
101e0                 | _do_defsnd
101e0     04 4A 05 F6 | 	mov	COUNT_, #4
101e4     A8 00 A0 FD | 	call	#pushregs_
101e8     88 F0 07 F1 | 	add	ptra, #136
101ec     4A 00 00 FF 
101f0     80 E4 05 F1 | 	add	objptr, ##38016
101f4     F2 1A 02 FB | 	rdlong	arg05, objptr
101f8     0D 19 02 F6 | 	mov	arg04, arg05
101fc     01 18 66 F0 | 	shl	arg04, #1
10200     0D 19 02 F1 | 	add	arg04, arg05
10204     02 18 66 F0 | 	shl	arg04, #2
10208     03 00 00 FF 
1020c     04 E4 85 F1 | 	sub	objptr, ##1540
10210     F2 18 02 F1 | 	add	arg04, objptr
10214     0C 1B 02 FB | 	rdlong	arg05, arg04
10218     A7 1A 62 FC | 	wrlong	arg05, fp
1021c                 | ' 
1021c                 | ' numpar=compiledline(lineptr_e).result.uresult
1021c                 | ' 
1021c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
1021c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
1021c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
1021c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
1021c                 | ' 
1021c                 | ' if numpar<2 then return
1021c     02 1A 56 F2 | 	cmps	arg05, #2 wc
10220     47 00 00 FF 
10224     7C E4 85 F1 | 	sub	objptr, ##36476
10228     94 08 90 CD |  if_b	jmp	#LR__1393
1022c                 | '  
1022c                 | ' if numpar=2 then
1022c     A7 1A 02 FB | 	rdlong	arg05, fp
10230     02 1A 0E F2 | 	cmp	arg05, #2 wz
10234     A0 03 90 5D |  if_ne	jmp	#LR__1380
10238     44 CA BF FD | 	call	#_pop
1023c     FF 1A 02 F6 | 	mov	arg05, result3
10240     2C 4E 05 F1 | 	add	fp, #44
10244     A7 FA 61 FC | 	wrlong	result1, fp
10248     04 4E 05 F1 | 	add	fp, #4
1024c     A7 FC 61 FC | 	wrlong	result2, fp
10250     04 4E 05 F1 | 	add	fp, #4
10254     A7 1A 62 FC | 	wrlong	arg05, fp
10258                 | '   t1=pop()
10258                 | '   if t1.result_type=result_string2 then 
10258     34 4E 85 F1 | 	sub	fp, #52
1025c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10260     20 00 90 5D |  if_ne	jmp	#LR__1370
10264     2C 4E 05 F1 | 	add	fp, #44
10268     A7 12 02 FB | 	rdlong	arg01, fp
1026c     2C 4E 85 F1 | 	sub	fp, #44
10270     84 CB BF FD | 	call	#_convertstring
10274     38 4E 05 F1 | 	add	fp, #56
10278     A7 FA 61 FC | 	wrlong	result1, fp
1027c     38 4E 85 F1 | 	sub	fp, #56
10280     58 00 90 FD | 	jmp	#LR__1373
10284                 | LR__1370
10284     34 4E 05 F1 | 	add	fp, #52
10288     A7 1A 02 FB | 	rdlong	arg05, fp
1028c     34 4E 85 F1 | 	sub	fp, #52
10290     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10294     18 00 90 5D |  if_ne	jmp	#LR__1371
10298     2C 4E 05 F1 | 	add	fp, #44
1029c     A7 1A 02 FB | 	rdlong	arg05, fp
102a0     0C 4E 05 F1 | 	add	fp, #12
102a4     A7 1A 62 FC | 	wrlong	arg05, fp
102a8     38 4E 85 F1 | 	sub	fp, #56
102ac     2C 00 90 FD | 	jmp	#LR__1372
102b0                 | LR__1371
102b0     AE 01 00 FF 
102b4     D0 1A 06 F6 | 	mov	arg05, ##@LR__5848
102b8     38 4E 05 F1 | 	add	fp, #56
102bc     A7 1A 62 FC | 	wrlong	arg05, fp
102c0     0C 4E 85 F1 | 	sub	fp, #12
102c4     A7 12 02 F6 | 	mov	arg01, fp
102c8     2C 4E 85 F1 | 	sub	fp, #44
102cc     94 CB BF FD | 	call	#_converttoint
102d0     14 4E 05 F1 | 	add	fp, #20
102d4     A7 FA 61 FC | 	wrlong	result1, fp
102d8     14 4E 85 F1 | 	sub	fp, #20
102dc                 | LR__1372
102dc                 | LR__1373
102dc                 | '   if s<>"" then 
102dc     38 4E 05 F1 | 	add	fp, #56
102e0     A7 12 02 FB | 	rdlong	arg01, fp
102e4     38 4E 85 F1 | 	sub	fp, #56
102e8     AE 01 00 FF 
102ec     D1 14 06 F6 | 	mov	arg02, ##@LR__5849
102f0     AC 56 B1 FD | 	call	#__system___string_cmp
102f4     00 FA 0D F2 | 	cmp	result1, #0 wz
102f8     E0 01 90 AD |  if_e	jmp	#LR__1376
102fc     80 C9 BF FD | 	call	#_pop
10300     FF 1A 02 F6 | 	mov	arg05, result3
10304     2C 4E 05 F1 | 	add	fp, #44
10308     A7 FA 61 FC | 	wrlong	result1, fp
1030c     04 4E 05 F1 | 	add	fp, #4
10310     A7 FC 61 FC | 	wrlong	result2, fp
10314     04 4E 05 F1 | 	add	fp, #4
10318     A7 1A 62 FC | 	wrlong	arg05, fp
1031c     08 4E 85 F1 | 	sub	fp, #8
10320     A7 12 02 F6 | 	mov	arg01, fp
10324     2C 4E 85 F1 | 	sub	fp, #44
10328     38 CB BF FD | 	call	#_converttoint
1032c     10 4E 05 F1 | 	add	fp, #16
10330     A7 FA 61 FC | 	wrlong	result1, fp
10334                 | '     t1=pop()
10334                 | '     channel=converttoint(t1) : if channel>31 then return
10334     FD 1A 02 F6 | 	mov	arg05, result1
10338     10 4E 85 F1 | 	sub	fp, #16
1033c     20 1A 56 F2 | 	cmps	arg05, #32 wc
10340     7C 07 90 3D |  if_ae	jmp	#LR__1393
10344                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10344     09 12 06 F6 | 	mov	arg01, #9
10348     84 A9 B1 FD | 	call	#__system__close
1034c     09 26 06 F6 | 	mov	local01, #9
10350     AE 01 00 FF 
10354     D2 12 06 F6 | 	mov	arg01, ##@LR__5850
10358     38 4E 05 F1 | 	add	fp, #56
1035c     A7 14 02 FB | 	rdlong	arg02, fp
10360     38 4E 85 F1 | 	sub	fp, #56
10364     6C 56 B1 FD | 	call	#__system___string_concat
10368     FD 14 02 F6 | 	mov	arg02, result1
1036c     13 13 02 F6 | 	mov	arg01, local01
10370     00 16 06 F6 | 	mov	arg03, #0
10374     04 62 B1 FD | 	call	#__system___basic_open_string
10378     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1037c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10380     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10384     52 00 00 FF 
10388     BC E4 05 F1 | 	add	objptr, ##42172
1038c     F2 FA 61 FC | 	wrlong	result1, objptr
10390                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10390     52 00 00 FF 
10394     BC E4 85 F1 | 	sub	objptr, ##42172
10398     B0 00 90 AD |  if_e	jmp	#LR__1374
1039c     00 12 06 F6 | 	mov	arg01, #0
103a0     FC B2 B1 FD | 	call	#__system___getiolock_0599
103a4     FD 12 02 F6 | 	mov	arg01, result1
103a8     CC 55 B1 FD | 	call	#__system___lockmem
103ac     AE 01 00 FF 
103b0     DF 14 06 F6 | 	mov	arg02, ##@LR__5851
103b4     00 12 06 F6 | 	mov	arg01, #0
103b8     00 16 06 F6 | 	mov	arg03, #0
103bc     AC 62 B1 FD | 	call	#__system___basic_print_string
103c0     52 00 00 FF 
103c4     BC E4 05 F1 | 	add	objptr, ##42172
103c8     F2 14 02 FB | 	rdlong	arg02, objptr
103cc     52 00 00 FF 
103d0     BC E4 85 F1 | 	sub	objptr, ##42172
103d4     00 12 06 F6 | 	mov	arg01, #0
103d8     00 16 06 F6 | 	mov	arg03, #0
103dc     0A 18 06 F6 | 	mov	arg04, #10
103e0     CC 62 B1 FD | 	call	#__system___basic_print_integer
103e4     AE 01 00 FF 
103e8     ED 14 06 F6 | 	mov	arg02, ##@LR__5852
103ec     00 12 06 F6 | 	mov	arg01, #0
103f0     00 16 06 F6 | 	mov	arg03, #0
103f4     74 62 B1 FD | 	call	#__system___basic_print_string
103f8     00 26 06 F6 | 	mov	local01, #0
103fc     52 00 00 FF 
10400     BC E4 05 F1 | 	add	objptr, ##42172
10404     F2 12 02 FB | 	rdlong	arg01, objptr
10408     52 00 00 FF 
1040c     BC E4 85 F1 | 	sub	objptr, ##42172
10410     F0 7E B1 FD | 	call	#__system___strerror
10414     FD 14 02 F6 | 	mov	arg02, result1
10418     13 13 02 F6 | 	mov	arg01, local01
1041c     00 16 06 F6 | 	mov	arg03, #0
10420     48 62 B1 FD | 	call	#__system___basic_print_string
10424     00 12 06 F6 | 	mov	arg01, #0
10428     0A 14 06 F6 | 	mov	arg02, #10
1042c     00 16 06 F6 | 	mov	arg03, #0
10430     E0 61 B1 FD | 	call	#__system___basic_print_char
10434     00 12 06 F6 | 	mov	arg01, #0
10438     64 B2 B1 FD | 	call	#__system___getiolock_0599
1043c     FD 00 68 FC | 	wrlong	#0, result1
10440     09 12 06 F6 | 	mov	arg01, #9
10444     88 A8 B1 FD | 	call	#__system__close
10448     74 06 90 FD | 	jmp	#LR__1393
1044c                 | LR__1374
1044c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
1044c     04 4E 05 F1 | 	add	fp, #4
10450     A7 00 68 FC | 	wrlong	#0, fp
10454                 | LR__1375
10454     A7 26 02 FB | 	rdlong	local01, fp
10458     01 26 66 F0 | 	shl	local01, #1
1045c     11 14 06 F6 | 	mov	arg02, #17
10460     13 15 02 F1 | 	add	arg02, local01
10464     78 4E 05 F1 | 	add	fp, #120
10468     A7 16 02 F6 | 	mov	arg03, fp
1046c     7C 4E 85 F1 | 	sub	fp, #124
10470     09 12 06 F6 | 	mov	arg01, #9
10474     01 18 06 F6 | 	mov	arg04, #1
10478     02 1A 06 F6 | 	mov	arg05, #2
1047c     68 63 B1 FD | 	call	#__system___basic_get
10480     10 4E 05 F1 | 	add	fp, #16
10484     A7 12 02 FB | 	rdlong	arg01, fp
10488     0B 12 66 F0 | 	shl	arg01, #11
1048c     0C 4E 85 F1 | 	sub	fp, #12
10490     A7 26 02 FB | 	rdlong	local01, fp
10494     01 26 66 F0 | 	shl	local01, #1
10498     13 13 02 F1 | 	add	arg01, local01
1049c     78 4E 05 F1 | 	add	fp, #120
104a0     A7 14 E2 FA | 	rdword	arg02, fp
104a4     7C 4E 85 F1 | 	sub	fp, #124
104a8     0F 14 66 F7 | 	signx	arg02, #15
104ac     C4 1C B1 FD | 	call	#_psdpoke
104b0     04 4E 05 F1 | 	add	fp, #4
104b4     A7 26 02 FB | 	rdlong	local01, fp
104b8     01 26 06 F1 | 	add	local01, #1
104bc     A7 26 62 FC | 	wrlong	local01, fp
104c0     02 00 00 FF 
104c4     01 26 56 F2 | 	cmps	local01, ##1025 wc
104c8     88 FF 9F CD |  if_b	jmp	#LR__1375
104cc     04 4E 85 F1 | 	sub	fp, #4
104d0                 | '     close #9
104d0     09 12 06 F6 | 	mov	arg01, #9
104d4     F8 A7 B1 FD | 	call	#__system__close
104d8                 | '     return
104d8     E4 05 90 FD | 	jmp	#LR__1393
104dc                 | LR__1376
104dc                 | '     if wptr < ($80000 - 2048) then 
104dc     14 4E 05 F1 | 	add	fp, #20
104e0     A7 26 02 FB | 	rdlong	local01, fp
104e4     14 4E 85 F1 | 	sub	fp, #20
104e8     FC 03 00 FF 
104ec     00 26 56 F2 | 	cmps	local01, ##522240 wc
104f0     70 00 90 3D |  if_ae	jmp	#LR__1378
104f4                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
104f4     04 4E 05 F1 | 	add	fp, #4
104f8     A7 00 68 FC | 	wrlong	#0, fp
104fc     04 4E 85 F1 | 	sub	fp, #4
10500                 | LR__1377
10500     10 4E 05 F1 | 	add	fp, #16
10504     A7 26 02 FB | 	rdlong	local01, fp
10508     0B 26 66 F0 | 	shl	local01, #11
1050c     0C 4E 85 F1 | 	sub	fp, #12
10510     A7 1A 02 FB | 	rdlong	arg05, fp
10514     0D 19 02 F6 | 	mov	arg04, arg05
10518     01 18 66 F0 | 	shl	arg04, #1
1051c     0C 27 02 F1 | 	add	local01, arg04
10520     10 4E 05 F1 | 	add	fp, #16
10524     A7 12 02 FB | 	rdlong	arg01, fp
10528     14 4E 85 F1 | 	sub	fp, #20
1052c     01 1A 66 F0 | 	shl	arg05, #1
10530     0D 13 02 F1 | 	add	arg01, arg05
10534     09 15 E2 FA | 	rdword	arg02, arg01
10538     13 13 02 F6 | 	mov	arg01, local01
1053c     34 1C B1 FD | 	call	#_psdpoke
10540     04 4E 05 F1 | 	add	fp, #4
10544     A7 26 02 FB | 	rdlong	local01, fp
10548     01 26 06 F1 | 	add	local01, #1
1054c     A7 26 62 FC | 	wrlong	local01, fp
10550     04 4E 85 F1 | 	sub	fp, #4
10554     02 00 00 FF 
10558     00 26 56 F2 | 	cmps	local01, ##1024 wc
1055c     A0 FF 9F CD |  if_b	jmp	#LR__1377
10560     5C 05 90 FD | 	jmp	#LR__1393
10564                 | LR__1378
10564                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10564     04 4E 05 F1 | 	add	fp, #4
10568     A7 00 68 FC | 	wrlong	#0, fp
1056c     04 4E 85 F1 | 	sub	fp, #4
10570                 | LR__1379
10570     10 4E 05 F1 | 	add	fp, #16
10574     A7 26 02 FB | 	rdlong	local01, fp
10578     0B 26 66 F0 | 	shl	local01, #11
1057c     0C 4E 85 F1 | 	sub	fp, #12
10580     A7 1A 02 FB | 	rdlong	arg05, fp
10584     0D 19 02 F6 | 	mov	arg04, arg05
10588     01 18 66 F0 | 	shl	arg04, #1
1058c     0C 27 02 F1 | 	add	local01, arg04
10590     10 4E 05 F1 | 	add	fp, #16
10594     A7 12 02 FB | 	rdlong	arg01, fp
10598     14 4E 85 F1 | 	sub	fp, #20
1059c     01 1A 66 F0 | 	shl	arg05, #1
105a0     0D 13 02 F1 | 	add	arg01, arg05
105a4     0C 1D B1 FD | 	call	#_psdpeek
105a8     FD 14 02 F6 | 	mov	arg02, result1
105ac     13 13 02 F6 | 	mov	arg01, local01
105b0     C0 1B B1 FD | 	call	#_psdpoke
105b4     04 4E 05 F1 | 	add	fp, #4
105b8     A7 26 02 FB | 	rdlong	local01, fp
105bc     01 26 06 F1 | 	add	local01, #1
105c0     A7 26 62 FC | 	wrlong	local01, fp
105c4     04 4E 85 F1 | 	sub	fp, #4
105c8     02 00 00 FF 
105cc     00 26 56 F2 | 	cmps	local01, ##1024 wc
105d0     9C FF 9F CD |  if_b	jmp	#LR__1379
105d4                 | '     return 
105d4     E8 04 90 FD | 	jmp	#LR__1393
105d8                 | '   return
105d8                 | LR__1380
105d8                 | ' for i=0 to 15 : harm(i)=0: next i  
105d8     04 4E 05 F1 | 	add	fp, #4
105dc     A7 00 68 FC | 	wrlong	#0, fp
105e0     97 16 48 FB | 	callpa	#(@LR__1382-@LR__1381)>>2,fcache_load_ptr_
105e4                 | LR__1381
105e4     A7 26 02 FB | 	rdlong	local01, fp
105e8     02 26 66 F0 | 	shl	local01, #2
105ec     38 4E 05 F1 | 	add	fp, #56
105f0     A7 26 02 F1 | 	add	local01, fp
105f4     13 01 68 FC | 	wrlong	#0, local01
105f8     38 4E 85 F1 | 	sub	fp, #56
105fc     A7 26 02 FB | 	rdlong	local01, fp
10600     01 26 06 F1 | 	add	local01, #1
10604     A7 26 62 FC | 	wrlong	local01, fp
10608     10 26 56 F2 | 	cmps	local01, #16 wc
1060c     D4 FF 9F CD |  if_b	jmp	#LR__1381
10610                 | LR__1382
10610     04 4E 85 F1 | 	sub	fp, #4
10614                 | ' for i=numpar to 2 step -1 
10614     A7 26 02 FB | 	rdlong	local01, fp
10618     04 4E 05 F1 | 	add	fp, #4
1061c     A7 26 62 FC | 	wrlong	local01, fp
10620     04 4E 85 F1 | 	sub	fp, #4
10624                 | LR__1383
10624     58 C6 BF FD | 	call	#_pop
10628     2C 4E 05 F1 | 	add	fp, #44
1062c     A7 FA 61 FC | 	wrlong	result1, fp
10630     04 4E 05 F1 | 	add	fp, #4
10634     A7 FC 61 FC | 	wrlong	result2, fp
10638     04 4E 05 F1 | 	add	fp, #4
1063c     A7 FE 61 FC | 	wrlong	result3, fp
10640     30 4E 85 F1 | 	sub	fp, #48
10644     A7 26 02 FB | 	rdlong	local01, fp
10648     02 26 86 F1 | 	sub	local01, #2
1064c     02 26 66 F0 | 	shl	local01, #2
10650     38 4E 05 F1 | 	add	fp, #56
10654     A7 26 02 F1 | 	add	local01, fp
10658     10 4E 85 F1 | 	sub	fp, #16
1065c     A7 12 02 F6 | 	mov	arg01, fp
10660     2C 4E 85 F1 | 	sub	fp, #44
10664     B8 C8 BF FD | 	call	#_converttofloat
10668     13 FB 61 FC | 	wrlong	result1, local01
1066c     04 4E 05 F1 | 	add	fp, #4
10670     A7 26 02 FB | 	rdlong	local01, fp
10674     01 26 86 F1 | 	sub	local01, #1
10678     A7 26 62 FC | 	wrlong	local01, fp
1067c     04 4E 85 F1 | 	sub	fp, #4
10680     02 26 56 F2 | 	cmps	local01, #2 wc
10684     9C FF 9F 3D |  if_ae	jmp	#LR__1383
10688     F4 C5 BF FD | 	call	#_pop
1068c     FF 26 02 F6 | 	mov	local01, result3
10690     2C 4E 05 F1 | 	add	fp, #44
10694     A7 FA 61 FC | 	wrlong	result1, fp
10698     04 4E 05 F1 | 	add	fp, #4
1069c     A7 FC 61 FC | 	wrlong	result2, fp
106a0     04 4E 05 F1 | 	add	fp, #4
106a4     A7 26 62 FC | 	wrlong	local01, fp
106a8     08 4E 85 F1 | 	sub	fp, #8
106ac     A7 12 02 F6 | 	mov	arg01, fp
106b0     2C 4E 85 F1 | 	sub	fp, #44
106b4     AC C7 BF FD | 	call	#_converttoint
106b8     10 4E 05 F1 | 	add	fp, #16
106bc     A7 FA 61 FC | 	wrlong	result1, fp
106c0                 | ' t1=pop()
106c0                 | ' channel=converttoint(t1) : : if channel>31 then return
106c0     FD 26 02 F6 | 	mov	local01, result1
106c4     10 4E 85 F1 | 	sub	fp, #16
106c8     20 26 56 F2 | 	cmps	local01, #32 wc
106cc     F0 03 90 3D |  if_ae	jmp	#LR__1393
106d0     20 4E 05 F1 | 	add	fp, #32
106d4     A7 00 68 FC | 	wrlong	#0, fp
106d8                 | ' max=0
106d8                 | ' if harm(0)<0 then
106d8     1C 4E 05 F1 | 	add	fp, #28
106dc     A7 12 02 FB | 	rdlong	arg01, fp
106e0     3C 4E 85 F1 | 	sub	fp, #60
106e4     00 14 06 F6 | 	mov	arg02, #0
106e8     01 16 06 F6 | 	mov	arg03, #1
106ec     34 85 B1 FD | 	call	#__system___float_cmp
106f0     00 FA 55 F2 | 	cmps	result1, #0 wc
106f4     04 01 90 3D |  if_ae	jmp	#LR__1386
106f8     3C 4E 05 F1 | 	add	fp, #60
106fc     A7 FA 01 FB | 	rdlong	result1, fp
10700     1F FA 05 F4 | 	bitl	result1, #31
10704     24 4E 85 F1 | 	sub	fp, #36
10708     A7 FA 61 FC | 	wrlong	result1, fp
1070c     28 4E 05 F1 | 	add	fp, #40
10710     A7 FA 01 FB | 	rdlong	result1, fp
10714     1F FA 05 F4 | 	bitl	result1, #31
10718     24 4E 85 F1 | 	sub	fp, #36
1071c     A7 FA 61 FC | 	wrlong	result1, fp
10720     20 4E 05 F1 | 	add	fp, #32
10724     00 C0 9F FF 
10728     A7 00 68 FC | 	wrlong	##1065353216, fp
1072c     24 4E 85 F1 | 	sub	fp, #36
10730     A7 26 02 FB | 	rdlong	local01, fp
10734     28 4E 05 F1 | 	add	fp, #40
10738     A7 26 62 FC | 	wrlong	local01, fp
1073c     24 4E 85 F1 | 	sub	fp, #36
10740     A7 26 02 FB | 	rdlong	local01, fp
10744     28 4E 05 F1 | 	add	fp, #40
10748     A7 26 62 FC | 	wrlong	local01, fp
1074c                 | '   harm(0)=1
1074c                 | '   harm(1)=even
1074c                 | '   harm(2)=odd
1074c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
1074c     40 4E 85 F1 | 	sub	fp, #64
10750     A7 06 68 FC | 	wrlong	#3, fp
10754                 | LR__1384
10754     A7 1A 02 FB | 	rdlong	arg05, fp
10758     0D 29 02 F6 | 	mov	local02, arg05
1075c     02 28 66 F0 | 	shl	local02, #2
10760     38 4E 05 F1 | 	add	fp, #56
10764     A7 28 02 F1 | 	add	local02, fp
10768     02 1A 86 F1 | 	sub	arg05, #2
1076c     02 1A 66 F0 | 	shl	arg05, #2
10770     A7 1A 02 F1 | 	add	arg05, fp
10774     0D 13 02 FB | 	rdlong	arg01, arg05
10778     24 4E 85 F1 | 	sub	fp, #36
1077c     A7 14 02 FB | 	rdlong	arg02, fp
10780     18 4E 85 F1 | 	sub	fp, #24
10784     68 80 B1 FD | 	call	#__system___float_mul
10788     14 FB 61 FC | 	wrlong	result1, local02
1078c     04 4E 05 F1 | 	add	fp, #4
10790     A7 2A 02 FB | 	rdlong	local03, fp
10794     02 2A 06 F1 | 	add	local03, #2
10798     A7 2A 62 FC | 	wrlong	local03, fp
1079c     10 2A 56 F2 | 	cmps	local03, #16 wc
107a0     B0 FF 9F CD |  if_b	jmp	#LR__1384
107a4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
107a4     A7 08 68 FC | 	wrlong	#4, fp
107a8                 | LR__1385
107a8     A7 2A 02 FB | 	rdlong	local03, fp
107ac     15 29 02 F6 | 	mov	local02, local03
107b0     02 28 66 F0 | 	shl	local02, #2
107b4     38 4E 05 F1 | 	add	fp, #56
107b8     A7 28 02 F1 | 	add	local02, fp
107bc     02 2A 86 F1 | 	sub	local03, #2
107c0     02 2A 66 F0 | 	shl	local03, #2
107c4     A7 2A 02 F1 | 	add	local03, fp
107c8     15 13 02 FB | 	rdlong	arg01, local03
107cc     20 4E 85 F1 | 	sub	fp, #32
107d0     A7 14 02 FB | 	rdlong	arg02, fp
107d4     1C 4E 85 F1 | 	sub	fp, #28
107d8     14 80 B1 FD | 	call	#__system___float_mul
107dc     14 FB 61 FC | 	wrlong	result1, local02
107e0     04 4E 05 F1 | 	add	fp, #4
107e4     A7 2A 02 FB | 	rdlong	local03, fp
107e8     02 2A 06 F1 | 	add	local03, #2
107ec     A7 2A 62 FC | 	wrlong	local03, fp
107f0     0F 2A 56 F2 | 	cmps	local03, #15 wc
107f4     B0 FF 9F CD |  if_b	jmp	#LR__1385
107f8     04 4E 85 F1 | 	sub	fp, #4
107fc                 | LR__1386
107fc                 | ' if harm(0)>=0 then ' synthesize with harmonics
107fc     3C 4E 05 F1 | 	add	fp, #60
10800     A7 12 02 FB | 	rdlong	arg01, fp
10804     3C 4E 85 F1 | 	sub	fp, #60
10808     00 14 06 F6 | 	mov	arg02, #0
1080c     01 16 66 F6 | 	neg	arg03, #1
10810     10 84 B1 FD | 	call	#__system___float_cmp
10814     00 FA 55 F2 | 	cmps	result1, #0 wc
10818     A4 02 90 CD |  if_b	jmp	#LR__1392
1081c                 | '   for i=0 to 1023
1081c     04 4E 05 F1 | 	add	fp, #4
10820     A7 00 68 FC | 	wrlong	#0, fp
10824     04 4E 85 F1 | 	sub	fp, #4
10828                 | LR__1387
10828     24 4E 05 F1 | 	add	fp, #36
1082c     A7 00 68 FC | 	wrlong	#0, fp
10830                 | '     spl=0
10830                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10830     1C 4E 85 F1 | 	sub	fp, #28
10834     A7 00 68 FC | 	wrlong	#0, fp
10838                 | LR__1388
10838     A7 28 02 FB | 	rdlong	local02, fp
1083c     02 28 66 F0 | 	shl	local02, #2
10840     34 4E 05 F1 | 	add	fp, #52
10844     A7 28 02 F1 | 	add	local02, fp
10848     14 2B 02 FB | 	rdlong	local03, local02
1084c     87 E4 1D FF 
10850     DB 29 06 F6 | 	mov	local02, ##1003032539
10854     38 4E 85 F1 | 	sub	fp, #56
10858     A7 12 02 FB | 	rdlong	arg01, fp
1085c     04 4E 85 F1 | 	sub	fp, #4
10860     09 13 52 F6 | 	abs	arg01, arg01 wc
10864     1F 2C C6 C9 |  if_b	decod	local04, #31
10868     00 2C 06 36 |  if_ae	mov	local04, #0
1086c     7C 7B B1 FD | 	call	#__system___float_fromuns
10870     16 FB 61 F5 | 	xor	result1, local04
10874     FD 14 02 F6 | 	mov	arg02, result1
10878     14 13 02 F6 | 	mov	arg01, local02
1087c     70 7F B1 FD | 	call	#__system___float_mul
10880     FD 28 02 F6 | 	mov	local02, result1
10884     08 4E 05 F1 | 	add	fp, #8
10888     A7 12 02 FB | 	rdlong	arg01, fp
1088c     08 4E 85 F1 | 	sub	fp, #8
10890     01 12 06 F1 | 	add	arg01, #1
10894     09 13 52 F6 | 	abs	arg01, arg01 wc
10898     1F 2C C6 C9 |  if_b	decod	local04, #31
1089c     00 2C 06 36 |  if_ae	mov	local04, #0
108a0     48 7B B1 FD | 	call	#__system___float_fromuns
108a4     16 FB 61 F5 | 	xor	result1, local04
108a8     FD 14 02 F6 | 	mov	arg02, result1
108ac     14 13 02 F6 | 	mov	arg01, local02
108b0     3C 7F B1 FD | 	call	#__system___float_mul
108b4     FD 12 02 F6 | 	mov	arg01, result1
108b8     94 88 B1 FD | 	call	#__system____builtin_sinf
108bc     FD 14 02 F6 | 	mov	arg02, result1
108c0     15 13 02 F6 | 	mov	arg01, local03
108c4     28 7F B1 FD | 	call	#__system___float_mul
108c8     FD 14 02 F6 | 	mov	arg02, result1
108cc     24 4E 05 F1 | 	add	fp, #36
108d0     A7 12 02 FB | 	rdlong	arg01, fp
108d4     24 4E 85 F1 | 	sub	fp, #36
108d8     44 7B B1 FD | 	call	#__system___float_add
108dc     24 4E 05 F1 | 	add	fp, #36
108e0     A7 FA 61 FC | 	wrlong	result1, fp
108e4     1C 4E 85 F1 | 	sub	fp, #28
108e8     A7 16 02 FB | 	rdlong	arg03, fp
108ec     01 16 06 F1 | 	add	arg03, #1
108f0     A7 16 62 FC | 	wrlong	arg03, fp
108f4     10 16 56 F2 | 	cmps	arg03, #16 wc
108f8     3C FF 9F CD |  if_b	jmp	#LR__1388
108fc                 | '     if abs(spl)>max then max=abs(spl)  
108fc     1C 4E 05 F1 | 	add	fp, #28
10900     A7 12 02 FB | 	rdlong	arg01, fp
10904     1F 12 06 F4 | 	bitl	arg01, #31
10908     04 4E 85 F1 | 	sub	fp, #4
1090c     A7 14 02 FB | 	rdlong	arg02, fp
10910     20 4E 85 F1 | 	sub	fp, #32
10914     01 16 66 F6 | 	neg	arg03, #1
10918     08 83 B1 FD | 	call	#__system___float_cmp
1091c     01 FA 55 F2 | 	cmps	result1, #1 wc
10920     18 00 90 CD |  if_b	jmp	#LR__1389
10924     24 4E 05 F1 | 	add	fp, #36
10928     A7 FA 01 FB | 	rdlong	result1, fp
1092c     1F FA 05 F4 | 	bitl	result1, #31
10930     04 4E 85 F1 | 	sub	fp, #4
10934     A7 FA 61 FC | 	wrlong	result1, fp
10938     20 4E 85 F1 | 	sub	fp, #32
1093c                 | LR__1389
1093c     04 4E 05 F1 | 	add	fp, #4
10940     A7 2A 02 FB | 	rdlong	local03, fp
10944     01 2A 06 F1 | 	add	local03, #1
10948     A7 2A 62 FC | 	wrlong	local03, fp
1094c     04 4E 85 F1 | 	sub	fp, #4
10950     02 00 00 FF 
10954     00 2A 56 F2 | 	cmps	local03, ##1024 wc
10958     CC FE 9F CD |  if_b	jmp	#LR__1387
1095c                 | '   for i=0 to 1023
1095c     04 4E 05 F1 | 	add	fp, #4
10960     A7 00 68 FC | 	wrlong	#0, fp
10964     04 4E 85 F1 | 	sub	fp, #4
10968                 | LR__1390
10968     24 4E 05 F1 | 	add	fp, #36
1096c     A7 00 68 FC | 	wrlong	#0, fp
10970                 | '     spl=0
10970                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10970     1C 4E 85 F1 | 	sub	fp, #28
10974     A7 00 68 FC | 	wrlong	#0, fp
10978                 | LR__1391
10978     A7 2A 02 FB | 	rdlong	local03, fp
1097c     02 2A 66 F0 | 	shl	local03, #2
10980     34 4E 05 F1 | 	add	fp, #52
10984     A7 2A 02 F1 | 	add	local03, fp
10988     15 2B 02 FB | 	rdlong	local03, local03
1098c     1C 4E 85 F1 | 	sub	fp, #28
10990     A7 14 02 FB | 	rdlong	arg02, fp
10994     20 4E 85 F1 | 	sub	fp, #32
10998     58 7F 23 FF 
1099c     00 12 06 F6 | 	mov	arg01, ##1191096320
109a0     50 80 B1 FD | 	call	#__system___float_div
109a4     FD 14 02 F6 | 	mov	arg02, result1
109a8     15 13 02 F6 | 	mov	arg01, local03
109ac     40 7E B1 FD | 	call	#__system___float_mul
109b0     FD 2A 02 F6 | 	mov	local03, result1
109b4     87 E4 1D FF 
109b8     DB 29 06 F6 | 	mov	local02, ##1003032539
109bc     04 4E 05 F1 | 	add	fp, #4
109c0     A7 12 02 FB | 	rdlong	arg01, fp
109c4     04 4E 85 F1 | 	sub	fp, #4
109c8     09 13 52 F6 | 	abs	arg01, arg01 wc
109cc     1F 2C C6 C9 |  if_b	decod	local04, #31
109d0     00 2C 06 36 |  if_ae	mov	local04, #0
109d4     14 7A B1 FD | 	call	#__system___float_fromuns
109d8     16 FB 61 F5 | 	xor	result1, local04
109dc     FD 14 02 F6 | 	mov	arg02, result1
109e0     14 13 02 F6 | 	mov	arg01, local02
109e4     08 7E B1 FD | 	call	#__system___float_mul
109e8     FD 28 02 F6 | 	mov	local02, result1
109ec     08 4E 05 F1 | 	add	fp, #8
109f0     A7 12 02 FB | 	rdlong	arg01, fp
109f4     08 4E 85 F1 | 	sub	fp, #8
109f8     01 12 06 F1 | 	add	arg01, #1
109fc     09 13 52 F6 | 	abs	arg01, arg01 wc
10a00     1F 2C C6 C9 |  if_b	decod	local04, #31
10a04     00 2C 06 36 |  if_ae	mov	local04, #0
10a08     E0 79 B1 FD | 	call	#__system___float_fromuns
10a0c     16 FB 61 F5 | 	xor	result1, local04
10a10     FD 14 02 F6 | 	mov	arg02, result1
10a14     14 13 02 F6 | 	mov	arg01, local02
10a18     D4 7D B1 FD | 	call	#__system___float_mul
10a1c     FD 12 02 F6 | 	mov	arg01, result1
10a20     2C 87 B1 FD | 	call	#__system____builtin_sinf
10a24     FD 14 02 F6 | 	mov	arg02, result1
10a28     15 13 02 F6 | 	mov	arg01, local03
10a2c     C0 7D B1 FD | 	call	#__system___float_mul
10a30     FD 14 02 F6 | 	mov	arg02, result1
10a34     24 4E 05 F1 | 	add	fp, #36
10a38     A7 12 02 FB | 	rdlong	arg01, fp
10a3c     24 4E 85 F1 | 	sub	fp, #36
10a40     DC 79 B1 FD | 	call	#__system___float_add
10a44     24 4E 05 F1 | 	add	fp, #36
10a48     A7 FA 61 FC | 	wrlong	result1, fp
10a4c     1C 4E 85 F1 | 	sub	fp, #28
10a50     A7 2A 02 FB | 	rdlong	local03, fp
10a54     01 2A 06 F1 | 	add	local03, #1
10a58     A7 2A 62 FC | 	wrlong	local03, fp
10a5c     10 2A 56 F2 | 	cmps	local03, #16 wc
10a60     14 FF 9F CD |  if_b	jmp	#LR__1391
10a64     08 4E 05 F1 | 	add	fp, #8
10a68     A7 2A 02 FB | 	rdlong	local03, fp
10a6c     0B 2A 66 F0 | 	shl	local03, #11
10a70     0C 4E 85 F1 | 	sub	fp, #12
10a74     A7 28 02 FB | 	rdlong	local02, fp
10a78     01 28 66 F0 | 	shl	local02, #1
10a7c     14 2B 02 F1 | 	add	local03, local02
10a80     20 4E 05 F1 | 	add	fp, #32
10a84     A7 12 02 FB | 	rdlong	arg01, fp
10a88     24 4E 85 F1 | 	sub	fp, #36
10a8c     01 14 06 F6 | 	mov	arg02, #1
10a90     24 82 B1 FD | 	call	#__system___float_tointeger
10a94     FD 14 02 F6 | 	mov	arg02, result1
10a98     15 13 02 F6 | 	mov	arg01, local03
10a9c     D4 16 B1 FD | 	call	#_psdpoke
10aa0     04 4E 05 F1 | 	add	fp, #4
10aa4     A7 2A 02 FB | 	rdlong	local03, fp
10aa8     01 2A 06 F1 | 	add	local03, #1
10aac     A7 2A 62 FC | 	wrlong	local03, fp
10ab0     04 4E 85 F1 | 	sub	fp, #4
10ab4     02 00 00 FF 
10ab8     00 2A 56 F2 | 	cmps	local03, ##1024 wc
10abc     A8 FE 9F CD |  if_b	jmp	#LR__1390
10ac0                 | LR__1392
10ac0                 | LR__1393
10ac0     A7 F0 03 F6 | 	mov	ptra, fp
10ac4     B2 00 A0 FD | 	call	#popregs_
10ac8                 | _do_defsnd_ret
10ac8     2D 00 64 FD | 	ret
10acc                 | 
10acc                 | ' 
10acc                 | ' '-------------------- defsprite
10acc                 | ' 
10acc                 | ' sub do_defsprite
10acc                 | _do_defsprite
10acc     07 4A 05 F6 | 	mov	COUNT_, #7
10ad0     A8 00 A0 FD | 	call	#pushregs_
10ad4     60 F0 07 F1 | 	add	ptra, #96
10ad8     A4 C1 BF FD | 	call	#_pop
10adc     FD 16 02 F6 | 	mov	arg03, result1
10ae0     FE 14 02 F6 | 	mov	arg02, result2
10ae4     FF 12 02 F6 | 	mov	arg01, result3
10ae8     30 4E 05 F1 | 	add	fp, #48
10aec     A7 16 62 FC | 	wrlong	arg03, fp
10af0     04 4E 05 F1 | 	add	fp, #4
10af4     A7 14 62 FC | 	wrlong	arg02, fp
10af8     04 4E 05 F1 | 	add	fp, #4
10afc     A7 12 62 FC | 	wrlong	arg01, fp
10b00     38 4E 85 F1 | 	sub	fp, #56
10b04     78 C1 BF FD | 	call	#_pop
10b08     FD 16 02 F6 | 	mov	arg03, result1
10b0c     FE 14 02 F6 | 	mov	arg02, result2
10b10     FF 12 02 F6 | 	mov	arg01, result3
10b14     24 4E 05 F1 | 	add	fp, #36
10b18     A7 16 62 FC | 	wrlong	arg03, fp
10b1c     04 4E 05 F1 | 	add	fp, #4
10b20     A7 14 62 FC | 	wrlong	arg02, fp
10b24     04 4E 05 F1 | 	add	fp, #4
10b28     A7 12 62 FC | 	wrlong	arg01, fp
10b2c     2C 4E 85 F1 | 	sub	fp, #44
10b30     4C C1 BF FD | 	call	#_pop
10b34     FD 16 02 F6 | 	mov	arg03, result1
10b38     FE 14 02 F6 | 	mov	arg02, result2
10b3c     FF 12 02 F6 | 	mov	arg01, result3
10b40     18 4E 05 F1 | 	add	fp, #24
10b44     A7 16 62 FC | 	wrlong	arg03, fp
10b48     04 4E 05 F1 | 	add	fp, #4
10b4c     A7 14 62 FC | 	wrlong	arg02, fp
10b50     04 4E 05 F1 | 	add	fp, #4
10b54     A7 12 62 FC | 	wrlong	arg01, fp
10b58     20 4E 85 F1 | 	sub	fp, #32
10b5c     20 C1 BF FD | 	call	#_pop
10b60     FD 16 02 F6 | 	mov	arg03, result1
10b64     FE 14 02 F6 | 	mov	arg02, result2
10b68     FF 12 02 F6 | 	mov	arg01, result3
10b6c     0C 4E 05 F1 | 	add	fp, #12
10b70     A7 16 62 FC | 	wrlong	arg03, fp
10b74     04 4E 05 F1 | 	add	fp, #4
10b78     A7 14 62 FC | 	wrlong	arg02, fp
10b7c     04 4E 05 F1 | 	add	fp, #4
10b80     A7 12 62 FC | 	wrlong	arg01, fp
10b84     14 4E 85 F1 | 	sub	fp, #20
10b88     F4 C0 BF FD | 	call	#_pop
10b8c     FF 16 02 F6 | 	mov	arg03, result3
10b90     A7 FA 61 FC | 	wrlong	result1, fp
10b94     04 4E 05 F1 | 	add	fp, #4
10b98     A7 FC 61 FC | 	wrlong	result2, fp
10b9c     04 4E 05 F1 | 	add	fp, #4
10ba0     A7 16 62 FC | 	wrlong	arg03, fp
10ba4     08 4E 85 F1 | 	sub	fp, #8
10ba8     A7 12 02 F6 | 	mov	arg01, fp
10bac     B4 C2 BF FD | 	call	#_converttoint
10bb0     3C 4E 05 F1 | 	add	fp, #60
10bb4     A7 FA 61 FC | 	wrlong	result1, fp
10bb8     30 4E 85 F1 | 	sub	fp, #48
10bbc     A7 12 02 F6 | 	mov	arg01, fp
10bc0     0C 4E 85 F1 | 	sub	fp, #12
10bc4     9C C2 BF FD | 	call	#_converttoint
10bc8     40 4E 05 F1 | 	add	fp, #64
10bcc     A7 FA 61 FC | 	wrlong	result1, fp
10bd0     28 4E 85 F1 | 	sub	fp, #40
10bd4     A7 12 02 F6 | 	mov	arg01, fp
10bd8     18 4E 85 F1 | 	sub	fp, #24
10bdc     84 C2 BF FD | 	call	#_converttoint
10be0     44 4E 05 F1 | 	add	fp, #68
10be4     A7 FA 61 FC | 	wrlong	result1, fp
10be8     20 4E 85 F1 | 	sub	fp, #32
10bec     A7 12 02 F6 | 	mov	arg01, fp
10bf0     24 4E 85 F1 | 	sub	fp, #36
10bf4     6C C2 BF FD | 	call	#_converttoint
10bf8     48 4E 05 F1 | 	add	fp, #72
10bfc     A7 FA 61 FC | 	wrlong	result1, fp
10c00     18 4E 85 F1 | 	sub	fp, #24
10c04     A7 12 02 F6 | 	mov	arg01, fp
10c08     30 4E 85 F1 | 	sub	fp, #48
10c0c     54 C2 BF FD | 	call	#_converttoint
10c10     4C 4E 05 F1 | 	add	fp, #76
10c14     A7 FA 61 FC | 	wrlong	result1, fp
10c18                 | ' 
10c18                 | ' t5=pop()
10c18                 | ' t4=pop()
10c18                 | ' t3=pop()
10c18                 | ' t2=pop()
10c18                 | ' t1=pop()
10c18                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10c18                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10c18     10 4E 85 F1 | 	sub	fp, #16
10c1c     A7 16 02 FB | 	rdlong	arg03, fp
10c20     3C 4E 85 F1 | 	sub	fp, #60
10c24     02 16 66 F0 | 	shl	arg03, #2
10c28     52 00 00 FF 
10c2c     00 E4 05 F1 | 	add	objptr, ##41984
10c30     F2 16 02 F1 | 	add	arg03, objptr
10c34     0B 17 0A FB | 	rdlong	arg03, arg03 wz
10c38     52 00 00 FF 
10c3c     00 E4 85 F1 | 	sub	objptr, ##41984
10c40     2C 00 90 AD |  if_e	jmp	#LR__1400
10c44     3C 4E 05 F1 | 	add	fp, #60
10c48     A7 16 02 FB | 	rdlong	arg03, fp
10c4c     3C 4E 85 F1 | 	sub	fp, #60
10c50     02 16 66 F0 | 	shl	arg03, #2
10c54     52 00 00 FF 
10c58     00 E4 05 F1 | 	add	objptr, ##41984
10c5c     F2 16 02 F1 | 	add	arg03, objptr
10c60     0B 13 02 FB | 	rdlong	arg01, arg03
10c64     52 00 00 FF 
10c68     00 E4 85 F1 | 	sub	objptr, ##41984
10c6c     E4 8F B1 FD | 	call	#__system___gc_free
10c70                 | LR__1400
10c70     3C 4E 05 F1 | 	add	fp, #60
10c74     A7 26 02 FB | 	rdlong	local01, fp
10c78     0C 4E 05 F1 | 	add	fp, #12
10c7c     A7 16 02 FB | 	rdlong	arg03, fp
10c80     04 4E 05 F1 | 	add	fp, #4
10c84     A7 14 02 FB | 	rdlong	arg02, fp
10c88     0A 17 02 FD | 	qmul	arg03, arg02
10c8c     02 26 66 F0 | 	shl	local01, #2
10c90     52 00 00 FF 
10c94     00 E4 05 F1 | 	add	objptr, ##41984
10c98     F2 26 02 F1 | 	add	local01, objptr
10c9c     4C 4E 85 F1 | 	sub	fp, #76
10ca0     52 00 00 FF 
10ca4     00 E4 85 F1 | 	sub	objptr, ##41984
10ca8     18 12 62 FD | 	getqx	arg01
10cac     68 8E B1 FD | 	call	#__system___gc_alloc_managed
10cb0     13 FB 61 FC | 	wrlong	result1, local01
10cb4                 | ' for y=a3 to a3+a5-1
10cb4     44 4E 05 F1 | 	add	fp, #68
10cb8     A7 28 02 FB | 	rdlong	local02, fp
10cbc     0C 4E 05 F1 | 	add	fp, #12
10cc0     A7 28 62 FC | 	wrlong	local02, fp
10cc4     0C 4E 85 F1 | 	sub	fp, #12
10cc8     A7 2A 02 FB | 	rdlong	local03, fp
10ccc     08 4E 05 F1 | 	add	fp, #8
10cd0     A7 2C 02 FB | 	rdlong	local04, fp
10cd4     4C 4E 85 F1 | 	sub	fp, #76
10cd8     16 2B 02 F1 | 	add	local03, local04
10cdc                 | LR__1401
10cdc     50 4E 05 F1 | 	add	fp, #80
10ce0     A7 28 02 FB | 	rdlong	local02, fp
10ce4     50 4E 85 F1 | 	sub	fp, #80
10ce8     15 29 52 F2 | 	cmps	local02, local03 wc
10cec     F4 00 90 3D |  if_ae	jmp	#LR__1404
10cf0                 | '   for x=a2 to a4+a2-1
10cf0     40 4E 05 F1 | 	add	fp, #64
10cf4     A7 26 02 FB | 	rdlong	local01, fp
10cf8     14 4E 05 F1 | 	add	fp, #20
10cfc     A7 26 62 FC | 	wrlong	local01, fp
10d00     0C 4E 85 F1 | 	sub	fp, #12
10d04     A7 2E 02 FB | 	rdlong	local05, fp
10d08     08 4E 85 F1 | 	sub	fp, #8
10d0c     A7 30 02 FB | 	rdlong	local06, fp
10d10     40 4E 85 F1 | 	sub	fp, #64
10d14     18 2F 02 F1 | 	add	local05, local06
10d18                 | LR__1402
10d18     54 4E 05 F1 | 	add	fp, #84
10d1c     A7 26 02 FB | 	rdlong	local01, fp
10d20     54 4E 85 F1 | 	sub	fp, #84
10d24     17 27 52 F2 | 	cmps	local01, local05 wc
10d28     A0 00 90 3D |  if_ae	jmp	#LR__1403
10d2c     3C 4E 05 F1 | 	add	fp, #60
10d30     A7 30 02 FB | 	rdlong	local06, fp
10d34     18 4E 05 F1 | 	add	fp, #24
10d38     A7 2C 02 FB | 	rdlong	local04, fp
10d3c     14 4E 85 F1 | 	sub	fp, #20
10d40     A7 28 02 FB | 	rdlong	local02, fp
10d44     10 4E 05 F1 | 	add	fp, #16
10d48     A7 26 02 FB | 	rdlong	local01, fp
10d4c     13 17 02 F6 | 	mov	arg03, local01
10d50     0C 4E 85 F1 | 	sub	fp, #12
10d54     A7 14 02 FB | 	rdlong	arg02, fp
10d58     0A 17 82 F1 | 	sub	arg03, arg02
10d5c     04 4E 05 F1 | 	add	fp, #4
10d60     A7 14 02 FB | 	rdlong	arg02, fp
10d64     0A 17 02 FD | 	qmul	arg03, arg02
10d68     02 30 66 F0 | 	shl	local06, #2
10d6c     52 00 00 FF 
10d70     00 E4 05 F1 | 	add	objptr, ##41984
10d74     F2 30 02 F1 | 	add	local06, objptr
10d78     18 31 02 FB | 	rdlong	local06, local06
10d7c     16 33 02 F6 | 	mov	local07, local04
10d80     14 33 82 F1 | 	sub	local07, local02
10d84     52 00 00 FF 
10d88     00 E4 85 F1 | 	sub	objptr, ##41984
10d8c     F2 12 02 FB | 	rdlong	arg01, objptr
10d90     16 13 02 F1 | 	add	arg01, local04
10d94     48 4E 85 F1 | 	sub	fp, #72
10d98     0A 26 66 F0 | 	shl	local01, #10
10d9c     13 13 02 F1 | 	add	arg01, local01
10da0     18 2C 62 FD | 	getqx	local04
10da4     16 33 02 F1 | 	add	local07, local04
10da8     18 33 02 F1 | 	add	local07, local06
10dac     54 14 B1 FD | 	call	#_pspeek
10db0     19 FB 41 FC | 	wrbyte	result1, local07
10db4     54 4E 05 F1 | 	add	fp, #84
10db8     A7 32 02 FB | 	rdlong	local07, fp
10dbc     01 32 06 F1 | 	add	local07, #1
10dc0     A7 32 62 FC | 	wrlong	local07, fp
10dc4     54 4E 85 F1 | 	sub	fp, #84
10dc8     4C FF 9F FD | 	jmp	#LR__1402
10dcc                 | LR__1403
10dcc     50 4E 05 F1 | 	add	fp, #80
10dd0     A7 32 02 FB | 	rdlong	local07, fp
10dd4     01 32 06 F1 | 	add	local07, #1
10dd8     A7 32 62 FC | 	wrlong	local07, fp
10ddc     50 4E 85 F1 | 	sub	fp, #80
10de0     F8 FE 9F FD | 	jmp	#LR__1401
10de4                 | LR__1404
10de4     3C 4E 05 F1 | 	add	fp, #60
10de8     A7 32 02 FB | 	rdlong	local07, fp
10dec     19 13 02 F6 | 	mov	arg01, local07
10df0     3C 4E 85 F1 | 	sub	fp, #60
10df4     02 32 66 F0 | 	shl	local07, #2
10df8     52 00 00 FF 
10dfc     00 E4 05 F1 | 	add	objptr, ##41984
10e00     F2 32 02 F1 | 	add	local07, objptr
10e04     19 15 02 FB | 	rdlong	arg02, local07
10e08     52 00 00 FF 
10e0c     00 E4 85 F1 | 	sub	objptr, ##41984
10e10     30 21 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10e14     3C 4E 05 F1 | 	add	fp, #60
10e18     A7 12 02 FB | 	rdlong	arg01, fp
10e1c     0C 4E 05 F1 | 	add	fp, #12
10e20     A7 14 02 FB | 	rdlong	arg02, fp
10e24     04 4E 05 F1 | 	add	fp, #4
10e28     A7 16 02 FB | 	rdlong	arg03, fp
10e2c     4C 4E 85 F1 | 	sub	fp, #76
10e30     A0 21 B1 FD | 	call	#_hg010b_spin2_setspritesize
10e34     A7 F0 03 F6 | 	mov	ptra, fp
10e38     B2 00 A0 FD | 	call	#popregs_
10e3c                 | _do_defsprite_ret
10e3c     2D 00 64 FD | 	ret
10e40                 | 
10e40                 | ' 
10e40                 | ' '-------------------- deg
10e40                 | ' 
10e40                 | ' sub do_deg
10e40                 | _do_deg
10e40     52 00 00 FF 
10e44     54 E4 05 F1 | 	add	objptr, ##42068
10e48     7D 47 9E FF 
10e4c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
10e50     04 E4 05 F1 | 	add	objptr, #4
10e54     97 32 A1 FF 
10e58     F2 C2 69 FC | 	wrlong	##1113927393, objptr
10e5c     52 00 00 FF 
10e60     58 E4 85 F1 | 	sub	objptr, ##42072
10e64                 | _do_deg_ret
10e64     2D 00 64 FD | 	ret
10e68                 | 
10e68                 | ' 
10e68                 | ' '-------------------- delete
10e68                 | ' 
10e68                 | ' sub do_delete
10e68                 | _do_delete
10e68     05 4A 05 F6 | 	mov	COUNT_, #5
10e6c     A8 00 A0 FD | 	call	#pushregs_
10e70     0C BE BF FD | 	call	#_pop
10e74     FE 18 02 F6 | 	mov	arg04, result2
10e78     FF 16 02 F6 | 	mov	arg03, result3
10e7c     FD 26 02 F6 | 	mov	local01, result1
10e80     0C 29 02 F6 | 	mov	local02, arg04
10e84     0B 2B 02 F6 | 	mov	local03, arg03
10e88                 | ' 
10e88                 | ' t1=pop()
10e88                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10e88     2B 2A 0E F2 | 	cmp	local03, #43 wz
10e8c     10 00 90 5D |  if_ne	jmp	#LR__1410
10e90     13 13 02 F6 | 	mov	arg01, local01
10e94     60 BF BF FD | 	call	#_convertstring
10e98     FD 26 02 F6 | 	mov	local01, result1
10e9c     1F 2A 06 F6 | 	mov	local03, #31
10ea0                 | LR__1410
10ea0                 | ' if t1.result_type<>result_string then printerror(15): return
10ea0     1F 2A 0E F2 | 	cmp	local03, #31 wz
10ea4     10 00 90 AD |  if_e	jmp	#LR__1411
10ea8     0F 12 06 F6 | 	mov	arg01, #15
10eac     00 14 06 F6 | 	mov	arg02, #0
10eb0     D8 10 B1 FD | 	call	#_printerror
10eb4     E0 00 90 FD | 	jmp	#LR__1415
10eb8                 | LR__1411
10eb8                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10eb8     4A 00 00 FF 
10ebc     94 E4 05 F1 | 	add	objptr, ##38036
10ec0     F2 12 02 FB | 	rdlong	arg01, objptr
10ec4     4A 00 00 FF 
10ec8     94 E4 85 F1 | 	sub	objptr, ##38036
10ecc     AE 01 00 FF 
10ed0     F0 14 06 F6 | 	mov	arg02, ##@LR__5853
10ed4     C8 4A B1 FD | 	call	#__system___string_cmp
10ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
10edc     34 00 90 AD |  if_e	jmp	#LR__1412
10ee0     4A 00 00 FF 
10ee4     94 E4 05 F1 | 	add	objptr, ##38036
10ee8     F2 12 02 FB | 	rdlong	arg01, objptr
10eec     4A 00 00 FF 
10ef0     94 E4 85 F1 | 	sub	objptr, ##38036
10ef4     AE 01 00 FF 
10ef8     F2 14 06 F6 | 	mov	arg02, ##@LR__5854
10efc     D4 4A B1 FD | 	call	#__system___string_concat
10f00     FD 12 02 F6 | 	mov	arg01, result1
10f04     13 15 02 F6 | 	mov	arg02, local01
10f08     C8 4A B1 FD | 	call	#__system___string_concat
10f0c     FD 2C 02 F6 | 	mov	local04, result1
10f10     14 00 90 FD | 	jmp	#LR__1413
10f14                 | LR__1412
10f14     AE 01 00 FF 
10f18     F4 12 06 F6 | 	mov	arg01, ##@LR__5855
10f1c     13 15 02 F6 | 	mov	arg02, local01
10f20     B0 4A B1 FD | 	call	#__system___string_concat
10f24     FD 2C 02 F6 | 	mov	local04, result1
10f28                 | LR__1413
10f28     16 13 02 F6 | 	mov	arg01, local04
10f2c     14 72 B1 FD | 	call	#__system___remove
10f30     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10f34     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10f38     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10f3c     FD 2E 0A F6 | 	mov	local05, result1 wz
10f40                 | ' kill filename$
10f40                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10f40     54 00 90 AD |  if_e	jmp	#LR__1414
10f44     00 12 06 F6 | 	mov	arg01, #0
10f48     54 A7 B1 FD | 	call	#__system___getiolock_0599
10f4c     FD 12 02 F6 | 	mov	arg01, result1
10f50     24 4A B1 FD | 	call	#__system___lockmem
10f54     AE 01 00 FF 
10f58     F6 14 06 F6 | 	mov	arg02, ##@LR__5856
10f5c     00 12 06 F6 | 	mov	arg01, #0
10f60     00 16 06 F6 | 	mov	arg03, #0
10f64     04 57 B1 FD | 	call	#__system___basic_print_string
10f68     00 12 06 F6 | 	mov	arg01, #0
10f6c     17 15 02 F6 | 	mov	arg02, local05
10f70     00 16 06 F6 | 	mov	arg03, #0
10f74     0A 18 06 F6 | 	mov	arg04, #10
10f78     34 57 B1 FD | 	call	#__system___basic_print_integer
10f7c     00 12 06 F6 | 	mov	arg01, #0
10f80     0A 14 06 F6 | 	mov	arg02, #10
10f84     00 16 06 F6 | 	mov	arg03, #0
10f88     88 56 B1 FD | 	call	#__system___basic_print_char
10f8c     00 12 06 F6 | 	mov	arg01, #0
10f90     0C A7 B1 FD | 	call	#__system___getiolock_0599
10f94     FD 00 68 FC | 	wrlong	#0, result1
10f98                 | LR__1414
10f98                 | LR__1415
10f98     A7 F0 03 F6 | 	mov	ptra, fp
10f9c     B2 00 A0 FD | 	call	#popregs_
10fa0                 | _do_delete_ret
10fa0     2D 00 64 FD | 	ret
10fa4                 | 
10fa4                 | ' 
10fa4                 | ' '-------------------- dir
10fa4                 | ' 
10fa4                 | ' sub do_dir
10fa4                 | _do_dir
10fa4     13 4A 05 F6 | 	mov	COUNT_, #19
10fa8     A8 00 A0 FD | 	call	#pushregs_
10fac     01 00 00 FF 
10fb0     38 F0 07 F1 | 	add	ptra, ##568
10fb4                 | ' 
10fb4                 | ' print "Current directory: "; currentdir$ 
10fb4     00 12 06 F6 | 	mov	arg01, #0
10fb8     E4 A6 B1 FD | 	call	#__system___getiolock_0599
10fbc     FD 12 02 F6 | 	mov	arg01, result1
10fc0     B4 49 B1 FD | 	call	#__system___lockmem
10fc4     AE 01 00 FF 
10fc8     2E 15 06 F6 | 	mov	arg02, ##@LR__5857
10fcc     00 12 06 F6 | 	mov	arg01, #0
10fd0     00 16 06 F6 | 	mov	arg03, #0
10fd4     94 56 B1 FD | 	call	#__system___basic_print_string
10fd8     4A 00 00 FF 
10fdc     94 E4 05 F1 | 	add	objptr, ##38036
10fe0     F2 14 02 FB | 	rdlong	arg02, objptr
10fe4     4A 00 00 FF 
10fe8     94 E4 85 F1 | 	sub	objptr, ##38036
10fec     00 12 06 F6 | 	mov	arg01, #0
10ff0     00 16 06 F6 | 	mov	arg03, #0
10ff4     74 56 B1 FD | 	call	#__system___basic_print_string
10ff8     00 12 06 F6 | 	mov	arg01, #0
10ffc     0A 14 06 F6 | 	mov	arg02, #10
11000     00 16 06 F6 | 	mov	arg03, #0
11004     0C 56 B1 FD | 	call	#__system___basic_print_char
11008     01 26 06 F6 | 	mov	local01, #1
1100c     00 12 06 F6 | 	mov	arg01, #0
11010     8C A6 B1 FD | 	call	#__system___getiolock_0599
11014     FD 00 68 FC | 	wrlong	#0, result1
11018     00 28 06 F6 | 	mov	local02, #0
1101c     00 2A 06 F6 | 	mov	local03, #0
11020                 | ' px=0
11020                 | ' for i=0 to 127: filelist(i)="" : next i
11020     00 2C 06 F6 | 	mov	local04, #0
11024     1C 4E 05 F1 | 	add	fp, #28
11028     97 12 48 FB | 	callpa	#(@LR__1421-@LR__1420)>>2,fcache_load_ptr_
1102c                 | LR__1420
1102c     16 2F 02 F6 | 	mov	local05, local04
11030     02 2E 66 F0 | 	shl	local05, #2
11034     A7 2E 02 F1 | 	add	local05, fp
11038     AE 01 00 FF 
1103c     42 31 06 F6 | 	mov	local06, ##@LR__5858
11040     17 31 62 FC | 	wrlong	local06, local05
11044     01 2C 06 F1 | 	add	local04, #1
11048     80 2C 56 F2 | 	cmps	local04, #128 wc
1104c     DC FF 9F CD |  if_b	jmp	#LR__1420
11050                 | LR__1421
11050     1C 4E 85 F1 | 	sub	fp, #28
11054     AE 01 00 FF 
11058     43 13 06 F6 | 	mov	arg01, ##@LR__5859
1105c     10 14 06 F6 | 	mov	arg02, #16
11060     74 A7 B1 FD | 	call	#__system___basic_dir
11064     FD 32 02 F6 | 	mov	local07, result1
11068     00 34 06 F6 | 	mov	local08, #0
1106c                 | ' filename=dir$("*", fbDirectory)
1106c                 | ' n=0
1106c                 | ' while filename <> "" andalso filename <> nil andalso n<128
1106c                 | LR__1422
1106c     AE 01 00 FF 
11070     45 37 06 F6 | 	mov	local09, ##@LR__5860
11074     19 13 02 F6 | 	mov	arg01, local07
11078     1B 15 02 F6 | 	mov	arg02, local09
1107c     20 49 B1 FD | 	call	#__system___string_cmp
11080     00 FA 0D F2 | 	cmp	result1, #0 wz
11084     68 00 90 AD |  if_e	jmp	#LR__1423
11088     00 36 06 F6 | 	mov	local09, #0
1108c     19 13 02 F6 | 	mov	arg01, local07
11090     00 14 06 F6 | 	mov	arg02, #0
11094     08 49 B1 FD | 	call	#__system___string_cmp
11098     00 FA 0D F2 | 	cmp	result1, #0 wz
1109c     50 00 90 AD |  if_e	jmp	#LR__1423
110a0     80 34 56 F2 | 	cmps	local08, #128 wc
110a4     48 00 90 3D |  if_ae	jmp	#LR__1423
110a8     AE 01 00 FF 
110ac     46 13 06 F6 | 	mov	arg01, ##@LR__5861
110b0     19 15 02 F6 | 	mov	arg02, local07
110b4     1C 49 B1 FD | 	call	#__system___string_concat
110b8     FD 32 02 F6 | 	mov	local07, result1
110bc     1A 2F 02 F6 | 	mov	local05, local08
110c0     02 2E 66 F0 | 	shl	local05, #2
110c4     1C 4E 05 F1 | 	add	fp, #28
110c8     A7 2E 02 F1 | 	add	local05, fp
110cc     17 33 62 FC | 	wrlong	local07, local05
110d0     01 34 06 F1 | 	add	local08, #1
110d4     00 2E 06 F6 | 	mov	local05, #0
110d8     00 12 06 F6 | 	mov	arg01, #0
110dc     00 14 06 F6 | 	mov	arg02, #0
110e0     1C 4E 85 F1 | 	sub	fp, #28
110e4     F0 A6 B1 FD | 	call	#__system___basic_dir
110e8     FD 32 02 F6 | 	mov	local07, result1
110ec     7C FF 9F FD | 	jmp	#LR__1422
110f0                 | LR__1423
110f0                 | ' for i=0 to n-1			' now sort this
110f0     00 2C 06 F6 | 	mov	local04, #0
110f4     1A 39 02 F6 | 	mov	local10, local08
110f8                 | LR__1424
110f8     1C 2D 52 F2 | 	cmps	local04, local10 wc
110fc     DC 00 90 3D |  if_ae	jmp	#LR__1428
11100     00 3A 06 F6 | 	mov	local11, #0
11104                 | '   swapped=false
11104                 | '   for j=0 to n-i-2
11104     00 3C 06 F6 | 	mov	local12, #0
11108     1A 3F 02 F6 | 	mov	local13, local08
1110c     16 3F 82 F1 | 	sub	local13, local04
11110     01 3E 86 F1 | 	sub	local13, #1
11114                 | LR__1425
11114     1F 3D 52 F2 | 	cmps	local12, local13 wc
11118     B0 00 90 3D |  if_ae	jmp	#LR__1427
1111c                 | '     if filelist(j) > filelist(j+1) then
1111c     1E 37 02 F6 | 	mov	local09, local12
11120     02 36 66 F0 | 	shl	local09, #2
11124     1C 4E 05 F1 | 	add	fp, #28
11128     A7 36 02 F1 | 	add	local09, fp
1112c     1B 13 02 FB | 	rdlong	arg01, local09
11130     1E 37 02 F6 | 	mov	local09, local12
11134     01 36 06 F1 | 	add	local09, #1
11138     1B 31 02 F6 | 	mov	local06, local09
1113c     02 30 66 F0 | 	shl	local06, #2
11140     A7 26 02 F6 | 	mov	local01, fp
11144     A7 30 02 F1 | 	add	local06, fp
11148     18 2F 02 FB | 	rdlong	local05, local06
1114c     17 15 02 F6 | 	mov	arg02, local05
11150     1C 4E 85 F1 | 	sub	fp, #28
11154     48 48 B1 FD | 	call	#__system___string_cmp
11158     01 FA 55 F2 | 	cmps	result1, #1 wc
1115c     64 00 90 CD |  if_b	jmp	#LR__1426
11160     1E 37 02 F6 | 	mov	local09, local12
11164     01 36 06 F1 | 	add	local09, #1
11168     02 36 66 F0 | 	shl	local09, #2
1116c     1C 4E 05 F1 | 	add	fp, #28
11170     A7 36 02 F1 | 	add	local09, fp
11174     1B 3B 02 FB | 	rdlong	local11, local09
11178     1E 31 02 F6 | 	mov	local06, local12
1117c     02 30 66 F0 | 	shl	local06, #2
11180     A7 30 02 F1 | 	add	local06, fp
11184     18 2F 02 FB | 	rdlong	local05, local06
11188     1E 37 02 F6 | 	mov	local09, local12
1118c     1B 31 02 F6 | 	mov	local06, local09
11190     02 30 66 F0 | 	shl	local06, #2
11194     A7 26 02 F6 | 	mov	local01, fp
11198     A7 30 02 F1 | 	add	local06, fp
1119c     18 3B 62 FC | 	wrlong	local11, local06
111a0     1E 29 02 F6 | 	mov	local02, local12
111a4     01 28 06 F1 | 	add	local02, #1
111a8     14 41 02 F6 | 	mov	local14, local02
111ac     02 40 66 F0 | 	shl	local14, #2
111b0     A7 42 02 F6 | 	mov	local15, fp
111b4     A7 40 02 F1 | 	add	local14, fp
111b8     20 2F 62 FC | 	wrlong	local05, local14
111bc     01 3A 66 F6 | 	neg	local11, #1
111c0     1C 4E 85 F1 | 	sub	fp, #28
111c4                 | LR__1426
111c4     01 3C 06 F1 | 	add	local12, #1
111c8     48 FF 9F FD | 	jmp	#LR__1425
111cc                 | LR__1427
111cc                 | ' if not swapped then exit for
111cc     1D 45 22 F6 | 	not	local16, local11
111d0     00 44 0E F2 | 	cmp	local16, #0 wz
111d4     01 2C 06 A1 |  if_e	add	local04, #1
111d8     1C FF 9F AD |  if_e	jmp	#LR__1424
111dc                 | LR__1428
111dc                 | ' for i=0 to n-1
111dc     00 2C 06 F6 | 	mov	local04, #0
111e0     1A 47 02 F6 | 	mov	local17, local08
111e4                 | LR__1429
111e4     23 2D 52 F2 | 	cmps	local04, local17 wc
111e8     94 00 90 3D |  if_ae	jmp	#LR__1431
111ec                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
111ec     00 12 06 F6 | 	mov	arg01, #0
111f0     AC A4 B1 FD | 	call	#__system___getiolock_0599
111f4     FD 12 02 F6 | 	mov	arg01, result1
111f8     7C 47 B1 FD | 	call	#__system___lockmem
111fc     16 29 02 F6 | 	mov	local02, local04
11200     02 28 66 F0 | 	shl	local02, #2
11204     1C 4E 05 F1 | 	add	fp, #28
11208     A7 40 02 F6 | 	mov	local14, fp
1120c     A7 28 02 F1 | 	add	local02, fp
11210     14 15 02 FB | 	rdlong	arg02, local02
11214     00 26 06 F6 | 	mov	local01, #0
11218     00 12 06 F6 | 	mov	arg01, #0
1121c     00 16 06 F6 | 	mov	arg03, #0
11220     1C 4E 85 F1 | 	sub	fp, #28
11224     44 54 B1 FD | 	call	#__system___basic_print_string
11228     00 12 06 F6 | 	mov	arg01, #0
1122c     70 A4 B1 FD | 	call	#__system___getiolock_0599
11230     FD 00 68 FC | 	wrlong	#0, result1
11234     40 2A 06 F1 | 	add	local03, #64
11238     15 13 02 F6 | 	mov	arg01, local03
1123c     E0 29 B1 FD | 	call	#_hg010b_spin2_setcursorx
11240     00 2B 56 F2 | 	cmps	local03, #256 wc
11244     30 00 90 CD |  if_b	jmp	#LR__1430
11248     00 2A 06 F6 | 	mov	local03, #0
1124c     00 12 06 F6 | 	mov	arg01, #0
11250     4C A4 B1 FD | 	call	#__system___getiolock_0599
11254     FD 12 02 F6 | 	mov	arg01, result1
11258     1C 47 B1 FD | 	call	#__system___lockmem
1125c     00 12 06 F6 | 	mov	arg01, #0
11260     0A 14 06 F6 | 	mov	arg02, #10
11264     00 16 06 F6 | 	mov	arg03, #0
11268     A8 53 B1 FD | 	call	#__system___basic_print_char
1126c     00 12 06 F6 | 	mov	arg01, #0
11270     2C A4 B1 FD | 	call	#__system___getiolock_0599
11274     FD 00 68 FC | 	wrlong	#0, result1
11278                 | LR__1430
11278     01 2C 06 F1 | 	add	local04, #1
1127c     64 FF 9F FD | 	jmp	#LR__1429
11280                 | LR__1431
11280                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11280     80 34 56 F2 | 	cmps	local08, #128 wc
11284     44 00 90 CD |  if_b	jmp	#LR__1432
11288     00 12 06 F6 | 	mov	arg01, #0
1128c     10 A4 B1 FD | 	call	#__system___getiolock_0599
11290     FD 12 02 F6 | 	mov	arg01, result1
11294     E0 46 B1 FD | 	call	#__system___lockmem
11298     AE 01 00 FF 
1129c     4D 15 06 F6 | 	mov	arg02, ##@LR__5862
112a0     00 12 06 F6 | 	mov	arg01, #0
112a4     00 16 06 F6 | 	mov	arg03, #0
112a8     C0 53 B1 FD | 	call	#__system___basic_print_string
112ac     00 12 06 F6 | 	mov	arg01, #0
112b0     0A 14 06 F6 | 	mov	arg02, #10
112b4     00 16 06 F6 | 	mov	arg03, #0
112b8     58 53 B1 FD | 	call	#__system___basic_print_char
112bc     00 12 06 F6 | 	mov	arg01, #0
112c0     DC A3 B1 FD | 	call	#__system___getiolock_0599
112c4     FD 00 68 FC | 	wrlong	#0, result1
112c8     00 26 06 F6 | 	mov	local01, #0
112cc                 | LR__1432
112cc                 | ' print
112cc     00 12 06 F6 | 	mov	arg01, #0
112d0     CC A3 B1 FD | 	call	#__system___getiolock_0599
112d4     FD 12 02 F6 | 	mov	arg01, result1
112d8     9C 46 B1 FD | 	call	#__system___lockmem
112dc     00 12 06 F6 | 	mov	arg01, #0
112e0     0A 14 06 F6 | 	mov	arg02, #10
112e4     00 16 06 F6 | 	mov	arg03, #0
112e8     28 53 B1 FD | 	call	#__system___basic_print_char
112ec     00 12 06 F6 | 	mov	arg01, #0
112f0     AC A3 B1 FD | 	call	#__system___getiolock_0599
112f4     FD 00 68 FC | 	wrlong	#0, result1
112f8     00 30 06 F6 | 	mov	local06, #0
112fc     00 34 06 F6 | 	mov	local08, #0
11300     00 2A 06 F6 | 	mov	local03, #0
11304                 | ' return cursor_y
11304     3E E4 05 F1 | 	add	objptr, #62
11308     F2 48 C2 FA | 	rdbyte	local18, objptr
1130c     3E E4 85 F1 | 	sub	objptr, #62
11310     AE 01 00 FF 
11314     7F 13 06 F6 | 	mov	arg01, ##@LR__5863
11318     21 14 06 F6 | 	mov	arg02, #33
1131c     B8 A4 B1 FD | 	call	#__system___basic_dir
11320     FD 32 02 F6 | 	mov	local07, result1
11324                 | ' n=0
11324                 | ' px=0: py=v.getcursory()
11324                 | ' filename = dir$("*", fbNormal )   
11324                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11324                 | LR__1433
11324     AE 01 00 FF 
11328     81 37 06 F6 | 	mov	local09, ##@LR__5864
1132c     19 13 02 F6 | 	mov	arg01, local07
11330     1B 15 02 F6 | 	mov	arg02, local09
11334     68 46 B1 FD | 	call	#__system___string_cmp
11338     00 FA 0D F2 | 	cmp	result1, #0 wz
1133c     54 00 90 AD |  if_e	jmp	#LR__1434
11340     00 36 06 F6 | 	mov	local09, #0
11344     19 13 02 F6 | 	mov	arg01, local07
11348     00 14 06 F6 | 	mov	arg02, #0
1134c     50 46 B1 FD | 	call	#__system___string_cmp
11350     00 FA 0D F2 | 	cmp	result1, #0 wz
11354     3C 00 90 AD |  if_e	jmp	#LR__1434
11358     80 34 56 F2 | 	cmps	local08, #128 wc
1135c     34 00 90 3D |  if_ae	jmp	#LR__1434
11360     1A 2F 02 F6 | 	mov	local05, local08
11364     02 2E 66 F0 | 	shl	local05, #2
11368     1C 4E 05 F1 | 	add	fp, #28
1136c     A7 2E 02 F1 | 	add	local05, fp
11370     17 33 62 FC | 	wrlong	local07, local05
11374     01 34 06 F1 | 	add	local08, #1
11378     00 2E 06 F6 | 	mov	local05, #0
1137c     00 12 06 F6 | 	mov	arg01, #0
11380     00 14 06 F6 | 	mov	arg02, #0
11384     1C 4E 85 F1 | 	sub	fp, #28
11388     4C A4 B1 FD | 	call	#__system___basic_dir
1138c     FD 32 02 F6 | 	mov	local07, result1
11390     90 FF 9F FD | 	jmp	#LR__1433
11394                 | LR__1434
11394                 | ' for i =0 to n-1
11394     00 2C 06 F6 | 	mov	local04, #0
11398                 | LR__1435
11398     1A 2D 52 F2 | 	cmps	local04, local08 wc
1139c     D8 00 90 3D |  if_ae	jmp	#LR__1439
113a0     00 3A 06 F6 | 	mov	local11, #0
113a4                 | '   swapped=false
113a4                 | '   for j=0 to n-i-2
113a4     00 3C 06 F6 | 	mov	local12, #0
113a8     1A 4B 02 F6 | 	mov	local19, local08
113ac     16 4B 82 F1 | 	sub	local19, local04
113b0     01 4A 86 F1 | 	sub	local19, #1
113b4                 | LR__1436
113b4     25 3D 52 F2 | 	cmps	local12, local19 wc
113b8     AC 00 90 3D |  if_ae	jmp	#LR__1438
113bc                 | '     if filelist(j) > filelist(j+1) then
113bc     1E 37 02 F6 | 	mov	local09, local12
113c0     02 36 66 F0 | 	shl	local09, #2
113c4     1C 4E 05 F1 | 	add	fp, #28
113c8     A7 36 02 F1 | 	add	local09, fp
113cc     1B 13 02 FB | 	rdlong	arg01, local09
113d0     1E 37 02 F6 | 	mov	local09, local12
113d4     01 36 06 F1 | 	add	local09, #1
113d8     1B 31 02 F6 | 	mov	local06, local09
113dc     02 30 66 F0 | 	shl	local06, #2
113e0     A7 26 02 F6 | 	mov	local01, fp
113e4     A7 30 02 F1 | 	add	local06, fp
113e8     18 2F 02 FB | 	rdlong	local05, local06
113ec     17 15 02 F6 | 	mov	arg02, local05
113f0     1C 4E 85 F1 | 	sub	fp, #28
113f4     A8 45 B1 FD | 	call	#__system___string_cmp
113f8     01 FA 55 F2 | 	cmps	result1, #1 wc
113fc     60 00 90 CD |  if_b	jmp	#LR__1437
11400     1E 37 02 F6 | 	mov	local09, local12
11404     01 36 06 F1 | 	add	local09, #1
11408     02 36 66 F0 | 	shl	local09, #2
1140c     1C 4E 05 F1 | 	add	fp, #28
11410     A7 36 02 F1 | 	add	local09, fp
11414     1B 45 02 FB | 	rdlong	local16, local09
11418     1E 31 02 F6 | 	mov	local06, local12
1141c     02 30 66 F0 | 	shl	local06, #2
11420     A7 30 02 F1 | 	add	local06, fp
11424     18 2F 02 FB | 	rdlong	local05, local06
11428     1E 37 02 F6 | 	mov	local09, local12
1142c     1B 31 02 F6 | 	mov	local06, local09
11430     02 30 66 F0 | 	shl	local06, #2
11434     A7 26 02 F6 | 	mov	local01, fp
11438     A7 30 02 F1 | 	add	local06, fp
1143c     18 45 62 FC | 	wrlong	local16, local06
11440     1E 41 02 F6 | 	mov	local14, local12
11444     01 40 06 F1 | 	add	local14, #1
11448     02 40 66 F0 | 	shl	local14, #2
1144c     A7 42 02 F6 | 	mov	local15, fp
11450     A7 40 02 F1 | 	add	local14, fp
11454     20 2F 62 FC | 	wrlong	local05, local14
11458     01 3A 66 F6 | 	neg	local11, #1
1145c     1C 4E 85 F1 | 	sub	fp, #28
11460                 | LR__1437
11460     01 3C 06 F1 | 	add	local12, #1
11464     4C FF 9F FD | 	jmp	#LR__1436
11468                 | LR__1438
11468                 | ' if not swapped then exit for
11468     1D 45 22 F6 | 	not	local16, local11
1146c     00 44 0E F2 | 	cmp	local16, #0 wz
11470     01 2C 06 A1 |  if_e	add	local04, #1
11474     20 FF 9F AD |  if_e	jmp	#LR__1435
11478                 | LR__1439
11478                 | ' for i=0 to n-1
11478     00 2C 06 F6 | 	mov	local04, #0
1147c                 | LR__1440
1147c     1A 2D 52 F2 | 	cmps	local04, local08 wc
11480     8C 00 90 3D |  if_ae	jmp	#LR__1442
11484                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11484     00 12 06 F6 | 	mov	arg01, #0
11488     14 A2 B1 FD | 	call	#__system___getiolock_0599
1148c     FD 12 02 F6 | 	mov	arg01, result1
11490     E4 44 B1 FD | 	call	#__system___lockmem
11494     16 29 02 F6 | 	mov	local02, local04
11498     02 28 66 F0 | 	shl	local02, #2
1149c     1C 4E 05 F1 | 	add	fp, #28
114a0     A7 28 02 F1 | 	add	local02, fp
114a4     14 15 02 FB | 	rdlong	arg02, local02
114a8     00 12 06 F6 | 	mov	arg01, #0
114ac     00 16 06 F6 | 	mov	arg03, #0
114b0     1C 4E 85 F1 | 	sub	fp, #28
114b4     B4 51 B1 FD | 	call	#__system___basic_print_string
114b8     00 12 06 F6 | 	mov	arg01, #0
114bc     E0 A1 B1 FD | 	call	#__system___getiolock_0599
114c0     FD 00 68 FC | 	wrlong	#0, result1
114c4     40 2A 06 F1 | 	add	local03, #64
114c8     15 13 02 F6 | 	mov	arg01, local03
114cc     50 27 B1 FD | 	call	#_hg010b_spin2_setcursorx
114d0     00 2B 56 F2 | 	cmps	local03, #256 wc
114d4     30 00 90 CD |  if_b	jmp	#LR__1441
114d8     00 2A 06 F6 | 	mov	local03, #0
114dc     00 12 06 F6 | 	mov	arg01, #0
114e0     BC A1 B1 FD | 	call	#__system___getiolock_0599
114e4     FD 12 02 F6 | 	mov	arg01, result1
114e8     8C 44 B1 FD | 	call	#__system___lockmem
114ec     00 12 06 F6 | 	mov	arg01, #0
114f0     0A 14 06 F6 | 	mov	arg02, #10
114f4     00 16 06 F6 | 	mov	arg03, #0
114f8     18 51 B1 FD | 	call	#__system___basic_print_char
114fc     00 12 06 F6 | 	mov	arg01, #0
11500     9C A1 B1 FD | 	call	#__system___getiolock_0599
11504     FD 00 68 FC | 	wrlong	#0, result1
11508                 | LR__1441
11508     01 2C 06 F1 | 	add	local04, #1
1150c     6C FF 9F FD | 	jmp	#LR__1440
11510                 | LR__1442
11510                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11510     80 34 56 F2 | 	cmps	local08, #128 wc
11514     40 00 90 CD |  if_b	jmp	#LR__1443
11518     00 12 06 F6 | 	mov	arg01, #0
1151c     80 A1 B1 FD | 	call	#__system___getiolock_0599
11520     FD 12 02 F6 | 	mov	arg01, result1
11524     50 44 B1 FD | 	call	#__system___lockmem
11528     AE 01 00 FF 
1152c     82 15 06 F6 | 	mov	arg02, ##@LR__5865
11530     00 12 06 F6 | 	mov	arg01, #0
11534     00 16 06 F6 | 	mov	arg03, #0
11538     30 51 B1 FD | 	call	#__system___basic_print_string
1153c     00 12 06 F6 | 	mov	arg01, #0
11540     0A 14 06 F6 | 	mov	arg02, #10
11544     00 16 06 F6 | 	mov	arg03, #0
11548     C8 50 B1 FD | 	call	#__system___basic_print_char
1154c     00 12 06 F6 | 	mov	arg01, #0
11550     4C A1 B1 FD | 	call	#__system___getiolock_0599
11554     FD 00 68 FC | 	wrlong	#0, result1
11558                 | LR__1443
11558                 | ' print
11558     00 12 06 F6 | 	mov	arg01, #0
1155c     40 A1 B1 FD | 	call	#__system___getiolock_0599
11560     FD 12 02 F6 | 	mov	arg01, result1
11564     10 44 B1 FD | 	call	#__system___lockmem
11568     00 12 06 F6 | 	mov	arg01, #0
1156c     0A 14 06 F6 | 	mov	arg02, #10
11570     00 16 06 F6 | 	mov	arg03, #0
11574     9C 50 B1 FD | 	call	#__system___basic_print_char
11578     00 12 06 F6 | 	mov	arg01, #0
1157c     20 A1 B1 FD | 	call	#__system___getiolock_0599
11580     FD 00 68 FC | 	wrlong	#0, result1
11584     A7 F0 03 F6 | 	mov	ptra, fp
11588     B2 00 A0 FD | 	call	#popregs_
1158c                 | _do_dir_ret
1158c     2D 00 64 FD | 	ret
11590                 | 
11590                 | ' 
11590                 | ' '-------------------- dpeek
11590                 | ' 
11590                 | ' sub do_dpeek
11590                 | _do_dpeek
11590     00 4A 05 F6 | 	mov	COUNT_, #0
11594     A8 00 A0 FD | 	call	#pushregs_
11598     14 F0 07 F1 | 	add	ptra, #20
1159c     E0 B6 BF FD | 	call	#_pop
115a0     A7 FA 61 FC | 	wrlong	result1, fp
115a4     04 4E 05 F1 | 	add	fp, #4
115a8     A7 FC 61 FC | 	wrlong	result2, fp
115ac     04 4E 05 F1 | 	add	fp, #4
115b0     A7 FE 61 FC | 	wrlong	result3, fp
115b4     08 4E 85 F1 | 	sub	fp, #8
115b8     A7 12 02 F6 | 	mov	arg01, fp
115bc     A4 B8 BF FD | 	call	#_converttoint
115c0     0C 4E 05 F1 | 	add	fp, #12
115c4     A7 FA 61 FC | 	wrlong	result1, fp
115c8                 | ' 
115c8                 | ' t1=pop()
115c8                 | ' a=converttoint(t1)
115c8                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
115c8     0C 4E 85 F1 | 	sub	fp, #12
115cc     00 04 00 FF 
115d0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
115d4     1C 00 90 3D |  if_ae	jmp	#LR__1450
115d8     0C 4E 05 F1 | 	add	fp, #12
115dc     A7 12 02 FB | 	rdlong	arg01, fp
115e0     09 FB E1 FA | 	rdword	result1, arg01
115e4     04 4E 05 F1 | 	add	fp, #4
115e8     A7 FA 61 FC | 	wrlong	result1, fp
115ec     10 4E 85 F1 | 	sub	fp, #16
115f0     1C 00 90 FD | 	jmp	#LR__1451
115f4                 | LR__1450
115f4     0C 4E 05 F1 | 	add	fp, #12
115f8     A7 12 02 FB | 	rdlong	arg01, fp
115fc     0C 4E 85 F1 | 	sub	fp, #12
11600     B0 0C B1 FD | 	call	#_psdpeek
11604     10 4E 05 F1 | 	add	fp, #16
11608     A7 FA 61 FC | 	wrlong	result1, fp
1160c     10 4E 85 F1 | 	sub	fp, #16
11610                 | LR__1451
11610     08 4E 05 F1 | 	add	fp, #8
11614     A7 3A 68 FC | 	wrlong	#29, fp
11618     08 4E 05 F1 | 	add	fp, #8
1161c     A7 12 02 FB | 	rdlong	arg01, fp
11620     10 4E 85 F1 | 	sub	fp, #16
11624     A7 12 62 FC | 	wrlong	arg01, fp
11628     A7 12 02 F6 | 	mov	arg01, fp
1162c     E8 B6 BF FD | 	call	#_push
11630     A7 F0 03 F6 | 	mov	ptra, fp
11634     B2 00 A0 FD | 	call	#popregs_
11638                 | _do_dpeek_ret
11638     2D 00 64 FD | 	ret
1163c                 | 
1163c                 | ' 
1163c                 | ' '-------------------- dpoke
1163c                 | ' 
1163c                 | ' sub do_dpoke
1163c                 | _do_dpoke
1163c     01 4A 05 F6 | 	mov	COUNT_, #1
11640     A8 00 A0 FD | 	call	#pushregs_
11644     20 F0 07 F1 | 	add	ptra, #32
11648     34 B6 BF FD | 	call	#_pop
1164c     FD 14 02 F6 | 	mov	arg02, result1
11650     FE 12 02 F6 | 	mov	arg01, result2
11654     FF 26 02 F6 | 	mov	local01, result3
11658     A7 14 62 FC | 	wrlong	arg02, fp
1165c     04 4E 05 F1 | 	add	fp, #4
11660     A7 12 62 FC | 	wrlong	arg01, fp
11664     04 4E 05 F1 | 	add	fp, #4
11668     A7 26 62 FC | 	wrlong	local01, fp
1166c     08 4E 85 F1 | 	sub	fp, #8
11670     0C B6 BF FD | 	call	#_pop
11674     FF 26 02 F6 | 	mov	local01, result3
11678     0C 4E 05 F1 | 	add	fp, #12
1167c     A7 FA 61 FC | 	wrlong	result1, fp
11680     04 4E 05 F1 | 	add	fp, #4
11684     A7 FC 61 FC | 	wrlong	result2, fp
11688     04 4E 05 F1 | 	add	fp, #4
1168c     A7 26 62 FC | 	wrlong	local01, fp
11690     08 4E 85 F1 | 	sub	fp, #8
11694     A7 12 02 F6 | 	mov	arg01, fp
11698     0C 4E 85 F1 | 	sub	fp, #12
1169c     C4 B7 BF FD | 	call	#_converttoint
116a0     18 4E 05 F1 | 	add	fp, #24
116a4     A7 FA 61 FC | 	wrlong	result1, fp
116a8     18 4E 85 F1 | 	sub	fp, #24
116ac     A7 12 02 F6 | 	mov	arg01, fp
116b0     B0 B7 BF FD | 	call	#_converttoint
116b4     1C 4E 05 F1 | 	add	fp, #28
116b8     A7 FA 61 FC | 	wrlong	result1, fp
116bc                 | ' 
116bc                 | ' t1=pop() 'value
116bc                 | ' t2=pop() 
116bc                 | ' a=converttoint(t2) : v=converttoint(t1)
116bc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
116bc     04 4E 85 F1 | 	sub	fp, #4
116c0     A7 26 02 FB | 	rdlong	local01, fp
116c4     18 4E 85 F1 | 	sub	fp, #24
116c8     00 04 00 FF 
116cc     00 26 16 F2 | 	cmp	local01, ##524288 wc
116d0     1C 00 90 3D |  if_ae	jmp	#LR__1460
116d4     18 4E 05 F1 | 	add	fp, #24
116d8     A7 12 02 FB | 	rdlong	arg01, fp
116dc     04 4E 05 F1 | 	add	fp, #4
116e0     A7 14 02 FB | 	rdlong	arg02, fp
116e4     1C 4E 85 F1 | 	sub	fp, #28
116e8     09 15 52 FC | 	wrword	arg02, arg01
116ec     18 00 90 FD | 	jmp	#LR__1461
116f0                 | LR__1460
116f0     18 4E 05 F1 | 	add	fp, #24
116f4     A7 12 02 FB | 	rdlong	arg01, fp
116f8     04 4E 05 F1 | 	add	fp, #4
116fc     A7 14 02 FB | 	rdlong	arg02, fp
11700     1C 4E 85 F1 | 	sub	fp, #28
11704     6C 0A B1 FD | 	call	#_psdpoke
11708                 | LR__1461
11708     A7 F0 03 F6 | 	mov	ptra, fp
1170c     B2 00 A0 FD | 	call	#popregs_
11710                 | _do_dpoke_ret
11710     2D 00 64 FD | 	ret
11714                 | 
11714                 | ' '-------------------- draw
11714                 | ' 
11714                 | ' sub do_draw
11714                 | _do_draw
11714     00 4A 05 F6 | 	mov	COUNT_, #0
11718     A8 00 A0 FD | 	call	#pushregs_
1171c     20 F0 07 F1 | 	add	ptra, #32
11720     5C B5 BF FD | 	call	#_pop
11724     FD 1A 02 F6 | 	mov	arg05, result1
11728     FE 18 02 F6 | 	mov	arg04, result2
1172c     FF 16 02 F6 | 	mov	arg03, result3
11730     0C 4E 05 F1 | 	add	fp, #12
11734     A7 1A 62 FC | 	wrlong	arg05, fp
11738     04 4E 05 F1 | 	add	fp, #4
1173c     A7 18 62 FC | 	wrlong	arg04, fp
11740     04 4E 05 F1 | 	add	fp, #4
11744     A7 16 62 FC | 	wrlong	arg03, fp
11748     14 4E 85 F1 | 	sub	fp, #20
1174c     30 B5 BF FD | 	call	#_pop
11750     FF 1A 02 F6 | 	mov	arg05, result3
11754     A7 FA 61 FC | 	wrlong	result1, fp
11758     04 4E 05 F1 | 	add	fp, #4
1175c     A7 FC 61 FC | 	wrlong	result2, fp
11760     04 4E 05 F1 | 	add	fp, #4
11764     A7 1A 62 FC | 	wrlong	arg05, fp
11768     08 4E 85 F1 | 	sub	fp, #8
1176c     A7 12 02 F6 | 	mov	arg01, fp
11770     F0 B6 BF FD | 	call	#_converttoint
11774     18 4E 05 F1 | 	add	fp, #24
11778     A7 FA 61 FC | 	wrlong	result1, fp
1177c     0C 4E 85 F1 | 	sub	fp, #12
11780     A7 12 02 F6 | 	mov	arg01, fp
11784     0C 4E 85 F1 | 	sub	fp, #12
11788     D8 B6 BF FD | 	call	#_converttoint
1178c     1C 4E 05 F1 | 	add	fp, #28
11790     A7 FA 61 FC | 	wrlong	result1, fp
11794     37 00 00 FF 
11798     2C E4 05 F1 | 	add	objptr, ##28204
1179c     F2 12 02 FB | 	rdlong	arg01, objptr
117a0     04 E4 05 F1 | 	add	objptr, #4
117a4     F2 14 02 FB | 	rdlong	arg02, objptr
117a8     04 4E 85 F1 | 	sub	fp, #4
117ac     A7 16 02 FB | 	rdlong	arg03, fp
117b0     FD 18 02 F6 | 	mov	arg04, result1
117b4     18 4E 85 F1 | 	sub	fp, #24
117b8     08 E4 85 F1 | 	sub	objptr, #8
117bc     F2 1A 02 FB | 	rdlong	arg05, objptr
117c0     37 00 00 FF 
117c4     28 E4 85 F1 | 	sub	objptr, ##28200
117c8     04 1B B1 FD | 	call	#_hg010b_spin2_draw
117cc     18 4E 05 F1 | 	add	fp, #24
117d0     A7 1A 02 FB | 	rdlong	arg05, fp
117d4     37 00 00 FF 
117d8     2C E4 05 F1 | 	add	objptr, ##28204
117dc     F2 1A 62 FC | 	wrlong	arg05, objptr
117e0     04 4E 05 F1 | 	add	fp, #4
117e4     A7 1A 02 FB | 	rdlong	arg05, fp
117e8     1C 4E 85 F1 | 	sub	fp, #28
117ec     04 E4 05 F1 | 	add	objptr, #4
117f0     F2 1A 62 FC | 	wrlong	arg05, objptr
117f4     37 00 00 FF 
117f8     30 E4 85 F1 | 	sub	objptr, ##28208
117fc     A7 F0 03 F6 | 	mov	ptra, fp
11800     B2 00 A0 FD | 	call	#popregs_
11804                 | _do_draw_ret
11804     2D 00 64 FD | 	ret
11808                 | 
11808                 | ' 
11808                 | ' '-------------------- else
11808                 | ' 
11808                 | ' sub do_else
11808                 | _do_else
11808     4A 00 00 FF 
1180c     7C E4 05 F1 | 	add	objptr, ##38012
11810     F2 00 02 FB | 	rdlong	_var01, objptr
11814     01 00 86 F1 | 	sub	_var01, #1
11818     04 E4 05 F1 | 	add	objptr, #4
1181c     F2 00 62 FC | 	wrlong	_var01, objptr
11820     4A 00 00 FF 
11824     80 E4 85 F1 | 	sub	objptr, ##38016
11828                 | _do_else_ret
11828     2D 00 64 FD | 	ret
1182c                 | 
1182c                 | ' 
1182c                 | ' '-------------------- end
1182c                 | ' 
1182c                 | ' sub do_end
1182c                 | _do_end
1182c     4A 00 00 FF 
11830     7C E4 05 F1 | 	add	objptr, ##38012
11834     F2 00 02 FB | 	rdlong	_var01, objptr
11838     01 00 86 F1 | 	sub	_var01, #1
1183c     04 E4 05 F1 | 	add	objptr, #4
11840     F2 00 62 FC | 	wrlong	_var01, objptr
11844     06 00 00 FF 
11848     38 E4 05 F1 | 	add	objptr, ##3128
1184c     FF FF BF FF 
11850     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11854     50 00 00 FF 
11858     B8 E4 85 F1 | 	sub	objptr, ##41144
1185c                 | _do_end_ret
1185c     2D 00 64 FD | 	ret
11860                 | 
11860                 | ' 
11860                 | ' '-------------------- enter
11860                 | ' 
11860                 | ' sub do_enter
11860                 | _do_enter
11860     02 00 00 FF 
11864     D2 12 06 F6 | 	mov	arg01, ##1234
11868     A0 2E B0 FD | 	call	#_do_load
1186c                 | _do_enter_ret
1186c     2D 00 64 FD | 	ret
11870                 | 
11870                 | ' 
11870                 | ' '------------------- error processing
11870                 | ' 
11870                 | ' sub do_error
11870                 | _do_error
11870     01 4A 05 F6 | 	mov	COUNT_, #1
11874     A8 00 A0 FD | 	call	#pushregs_
11878     4A 00 00 FF 
1187c     80 E4 05 F1 | 	add	objptr, ##38016
11880     F2 18 02 FB | 	rdlong	arg04, objptr
11884     0C 17 02 F6 | 	mov	arg03, arg04
11888     01 16 66 F0 | 	shl	arg03, #1
1188c     0C 17 02 F1 | 	add	arg03, arg04
11890     02 16 66 F0 | 	shl	arg03, #2
11894     03 00 00 FF 
11898     04 E4 85 F1 | 	sub	objptr, ##1540
1189c     F2 16 02 F1 | 	add	arg03, objptr
118a0     0B 27 02 FB | 	rdlong	local01, arg03
118a4                 | ' r=compiledline(lineptr_e).result.uresult
118a4                 | ' print "Error ";r;": ";errors$(r)
118a4     00 12 06 F6 | 	mov	arg01, #0
118a8     47 00 00 FF 
118ac     7C E4 85 F1 | 	sub	objptr, ##36476
118b0     EC 9D B1 FD | 	call	#__system___getiolock_0599
118b4     FD 12 02 F6 | 	mov	arg01, result1
118b8     BC 40 B1 FD | 	call	#__system___lockmem
118bc     AE 01 00 FF 
118c0     B4 15 06 F6 | 	mov	arg02, ##@LR__5866
118c4     00 12 06 F6 | 	mov	arg01, #0
118c8     00 16 06 F6 | 	mov	arg03, #0
118cc     9C 4D B1 FD | 	call	#__system___basic_print_string
118d0     00 12 06 F6 | 	mov	arg01, #0
118d4     13 15 02 F6 | 	mov	arg02, local01
118d8     00 16 06 F6 | 	mov	arg03, #0
118dc     0A 18 06 F6 | 	mov	arg04, #10
118e0     0C 4E B1 FD | 	call	#__system___basic_print_unsigned
118e4     AE 01 00 FF 
118e8     BB 15 06 F6 | 	mov	arg02, ##@LR__5867
118ec     00 12 06 F6 | 	mov	arg01, #0
118f0     00 16 06 F6 | 	mov	arg03, #0
118f4     74 4D B1 FD | 	call	#__system___basic_print_string
118f8     02 26 66 F0 | 	shl	local01, #2
118fc     45 00 00 FF 
11900     7C E4 05 F1 | 	add	objptr, ##35452
11904     F2 26 02 F1 | 	add	local01, objptr
11908     13 15 02 FB | 	rdlong	arg02, local01
1190c     00 12 06 F6 | 	mov	arg01, #0
11910     00 16 06 F6 | 	mov	arg03, #0
11914     45 00 00 FF 
11918     7C E4 85 F1 | 	sub	objptr, ##35452
1191c     4C 4D B1 FD | 	call	#__system___basic_print_string
11920     00 12 06 F6 | 	mov	arg01, #0
11924     0A 14 06 F6 | 	mov	arg02, #10
11928     00 16 06 F6 | 	mov	arg03, #0
1192c     E4 4C B1 FD | 	call	#__system___basic_print_char
11930     00 12 06 F6 | 	mov	arg01, #0
11934     68 9D B1 FD | 	call	#__system___getiolock_0599
11938     FD 00 68 FC | 	wrlong	#0, result1
1193c     A7 F0 03 F6 | 	mov	ptra, fp
11940     B2 00 A0 FD | 	call	#popregs_
11944                 | _do_error_ret
11944     2D 00 64 FD | 	ret
11948                 | 
11948                 | ' 
11948                 | ' '-------------------- fcircle
11948                 | ' 
11948                 | ' sub do_fcircle
11948                 | _do_fcircle
11948     02 4A 05 F6 | 	mov	COUNT_, #2
1194c     A8 00 A0 FD | 	call	#pushregs_
11950     24 F0 07 F1 | 	add	ptra, #36
11954     28 B3 BF FD | 	call	#_pop
11958     FD 14 02 F6 | 	mov	arg02, result1
1195c     FE 18 02 F6 | 	mov	arg04, result2
11960     FF 16 02 F6 | 	mov	arg03, result3
11964     18 4E 05 F1 | 	add	fp, #24
11968     A7 14 62 FC | 	wrlong	arg02, fp
1196c     04 4E 05 F1 | 	add	fp, #4
11970     A7 18 62 FC | 	wrlong	arg04, fp
11974     04 4E 05 F1 | 	add	fp, #4
11978     A7 16 62 FC | 	wrlong	arg03, fp
1197c     20 4E 85 F1 | 	sub	fp, #32
11980     FC B2 BF FD | 	call	#_pop
11984     FD 14 02 F6 | 	mov	arg02, result1
11988     FE 18 02 F6 | 	mov	arg04, result2
1198c     FF 16 02 F6 | 	mov	arg03, result3
11990     0C 4E 05 F1 | 	add	fp, #12
11994     A7 14 62 FC | 	wrlong	arg02, fp
11998     04 4E 05 F1 | 	add	fp, #4
1199c     A7 18 62 FC | 	wrlong	arg04, fp
119a0     04 4E 05 F1 | 	add	fp, #4
119a4     A7 16 62 FC | 	wrlong	arg03, fp
119a8     14 4E 85 F1 | 	sub	fp, #20
119ac     D0 B2 BF FD | 	call	#_pop
119b0     FF 14 02 F6 | 	mov	arg02, result3
119b4     A7 FA 61 FC | 	wrlong	result1, fp
119b8     04 4E 05 F1 | 	add	fp, #4
119bc     A7 FC 61 FC | 	wrlong	result2, fp
119c0     04 4E 05 F1 | 	add	fp, #4
119c4     A7 14 62 FC | 	wrlong	arg02, fp
119c8     08 4E 85 F1 | 	sub	fp, #8
119cc     A7 12 02 F6 | 	mov	arg01, fp
119d0     90 B4 BF FD | 	call	#_converttoint
119d4     FD 26 02 F6 | 	mov	local01, result1
119d8     0C 4E 05 F1 | 	add	fp, #12
119dc     A7 12 02 F6 | 	mov	arg01, fp
119e0     0C 4E 85 F1 | 	sub	fp, #12
119e4     7C B4 BF FD | 	call	#_converttoint
119e8     FD 28 02 F6 | 	mov	local02, result1
119ec     18 4E 05 F1 | 	add	fp, #24
119f0     A7 12 02 F6 | 	mov	arg01, fp
119f4     18 4E 85 F1 | 	sub	fp, #24
119f8     68 B4 BF FD | 	call	#_converttoint
119fc     FD 16 02 F6 | 	mov	arg03, result1
11a00     37 00 00 FF 
11a04     28 E4 05 F1 | 	add	objptr, ##28200
11a08     F2 18 02 FB | 	rdlong	arg04, objptr
11a0c     37 00 00 FF 
11a10     28 E4 85 F1 | 	sub	objptr, ##28200
11a14     13 13 02 F6 | 	mov	arg01, local01
11a18     14 15 02 F6 | 	mov	arg02, local02
11a1c     34 1D B1 FD | 	call	#_hg010b_spin2_fcircle
11a20     A7 F0 03 F6 | 	mov	ptra, fp
11a24     B2 00 A0 FD | 	call	#popregs_
11a28                 | _do_fcircle_ret
11a28     2D 00 64 FD | 	ret
11a2c                 | 
11a2c                 | ' 
11a2c                 | ' '-------------------- fill
11a2c                 | ' 
11a2c                 | ' sub do_fill
11a2c                 | _do_fill
11a2c     03 4A 05 F6 | 	mov	COUNT_, #3
11a30     A8 00 A0 FD | 	call	#pushregs_
11a34     30 F0 07 F1 | 	add	ptra, #48
11a38     44 B2 BF FD | 	call	#_pop
11a3c     FD 16 02 F6 | 	mov	arg03, result1
11a40     FE 14 02 F6 | 	mov	arg02, result2
11a44     FF 18 02 F6 | 	mov	arg04, result3
11a48     24 4E 05 F1 | 	add	fp, #36
11a4c     A7 16 62 FC | 	wrlong	arg03, fp
11a50     04 4E 05 F1 | 	add	fp, #4
11a54     A7 14 62 FC | 	wrlong	arg02, fp
11a58     04 4E 05 F1 | 	add	fp, #4
11a5c     A7 18 62 FC | 	wrlong	arg04, fp
11a60     2C 4E 85 F1 | 	sub	fp, #44
11a64     18 B2 BF FD | 	call	#_pop
11a68     FD 16 02 F6 | 	mov	arg03, result1
11a6c     FE 14 02 F6 | 	mov	arg02, result2
11a70     FF 18 02 F6 | 	mov	arg04, result3
11a74     18 4E 05 F1 | 	add	fp, #24
11a78     A7 16 62 FC | 	wrlong	arg03, fp
11a7c     04 4E 05 F1 | 	add	fp, #4
11a80     A7 14 62 FC | 	wrlong	arg02, fp
11a84     04 4E 05 F1 | 	add	fp, #4
11a88     A7 18 62 FC | 	wrlong	arg04, fp
11a8c     20 4E 85 F1 | 	sub	fp, #32
11a90     EC B1 BF FD | 	call	#_pop
11a94     FD 16 02 F6 | 	mov	arg03, result1
11a98     FE 14 02 F6 | 	mov	arg02, result2
11a9c     FF 18 02 F6 | 	mov	arg04, result3
11aa0     0C 4E 05 F1 | 	add	fp, #12
11aa4     A7 16 62 FC | 	wrlong	arg03, fp
11aa8     04 4E 05 F1 | 	add	fp, #4
11aac     A7 14 62 FC | 	wrlong	arg02, fp
11ab0     04 4E 05 F1 | 	add	fp, #4
11ab4     A7 18 62 FC | 	wrlong	arg04, fp
11ab8     14 4E 85 F1 | 	sub	fp, #20
11abc     C0 B1 BF FD | 	call	#_pop
11ac0     FF 16 02 F6 | 	mov	arg03, result3
11ac4     A7 FA 61 FC | 	wrlong	result1, fp
11ac8     04 4E 05 F1 | 	add	fp, #4
11acc     A7 FC 61 FC | 	wrlong	result2, fp
11ad0     04 4E 05 F1 | 	add	fp, #4
11ad4     A7 16 62 FC | 	wrlong	arg03, fp
11ad8     08 4E 85 F1 | 	sub	fp, #8
11adc     A7 12 02 F6 | 	mov	arg01, fp
11ae0     80 B3 BF FD | 	call	#_converttoint
11ae4     FD 26 02 F6 | 	mov	local01, result1
11ae8     0C 4E 05 F1 | 	add	fp, #12
11aec     A7 12 02 F6 | 	mov	arg01, fp
11af0     0C 4E 85 F1 | 	sub	fp, #12
11af4     6C B3 BF FD | 	call	#_converttoint
11af8     FD 28 02 F6 | 	mov	local02, result1
11afc     18 4E 05 F1 | 	add	fp, #24
11b00     A7 12 02 F6 | 	mov	arg01, fp
11b04     18 4E 85 F1 | 	sub	fp, #24
11b08     58 B3 BF FD | 	call	#_converttoint
11b0c     FD 2A 02 F6 | 	mov	local03, result1
11b10     24 4E 05 F1 | 	add	fp, #36
11b14     A7 12 02 F6 | 	mov	arg01, fp
11b18     24 4E 85 F1 | 	sub	fp, #36
11b1c     44 B3 BF FD | 	call	#_converttoint
11b20     FD 18 02 F6 | 	mov	arg04, result1
11b24     13 13 02 F6 | 	mov	arg01, local01
11b28     14 15 02 F6 | 	mov	arg02, local02
11b2c     15 17 02 F6 | 	mov	arg03, local03
11b30     8C 19 B1 FD | 	call	#_hg010b_spin2_fill
11b34     A7 F0 03 F6 | 	mov	ptra, fp
11b38     B2 00 A0 FD | 	call	#popregs_
11b3c                 | _do_fill_ret
11b3c     2D 00 64 FD | 	ret
11b40                 | 
11b40                 | ' 
11b40                 | ' '-------------------- font
11b40                 | ' 
11b40                 | ' sub do_font
11b40                 | _do_font
11b40     03 4A 05 F6 | 	mov	COUNT_, #3
11b44     A8 00 A0 FD | 	call	#pushregs_
11b48     34 B1 BF FD | 	call	#_pop
11b4c     FD 26 02 F6 | 	mov	local01, result1
11b50     FE 28 02 F6 | 	mov	local02, result2
11b54     FF 2A 02 F6 | 	mov	local03, result3
11b58                 | ' 
11b58                 | ' t1=pop() 
11b58                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11b58     1E 2A 0E F2 | 	cmp	local03, #30 wz
11b5c     10 00 90 5D |  if_ne	jmp	#LR__1470
11b60     13 13 02 F6 | 	mov	arg01, local01
11b64     00 14 06 F6 | 	mov	arg02, #0
11b68     4C 71 B1 FD | 	call	#__system___float_tointeger
11b6c     FD 26 02 F6 | 	mov	local01, result1
11b70                 | LR__1470
11b70                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11b70     1F 2A 0E F2 | 	cmp	local03, #31 wz
11b74     18 00 90 5D |  if_ne	jmp	#LR__1471
11b78     13 13 02 F6 | 	mov	arg01, local01
11b7c     7C 74 B1 FD | 	call	#__system____builtin_atof
11b80     FD 12 02 F6 | 	mov	arg01, result1
11b84     00 14 06 F6 | 	mov	arg02, #0
11b88     2C 71 B1 FD | 	call	#__system___float_tointeger
11b8c     FD 26 02 F6 | 	mov	local01, result1
11b90                 | LR__1471
11b90     37 00 00 FF 
11b94     40 E4 05 F1 | 	add	objptr, ##28224
11b98     F2 26 62 FC | 	wrlong	local01, objptr
11b9c     37 00 00 FF 
11ba0     40 E4 85 F1 | 	sub	objptr, ##28224
11ba4     02 26 66 F0 | 	shl	local01, #2
11ba8     13 13 02 F6 | 	mov	arg01, local01
11bac     F4 1F B1 FD | 	call	#_hg010b_spin2_setfontfamily
11bb0     A7 F0 03 F6 | 	mov	ptra, fp
11bb4     B2 00 A0 FD | 	call	#popregs_
11bb8                 | _do_font_ret
11bb8     2D 00 64 FD | 	ret
11bbc                 | 
11bbc                 | ' 
11bbc                 | ' '-------------------- for
11bbc                 | ' 
11bbc                 | ' sub do_for()
11bbc                 | _do_for
11bbc     01 4A 05 F6 | 	mov	COUNT_, #1
11bc0     A8 00 A0 FD | 	call	#pushregs_
11bc4     10 F0 07 F1 | 	add	ptra, #16
11bc8     50 00 00 FF 
11bcc     30 E5 05 F1 | 	add	objptr, ##41264
11bd0     F2 12 02 FB | 	rdlong	arg01, objptr
11bd4     01 12 06 F1 | 	add	arg01, #1
11bd8     F2 12 62 FC | 	wrlong	arg01, objptr
11bdc     50 00 00 FF 
11be0     30 E5 85 F1 | 	sub	objptr, ##41264
11be4     98 B0 BF FD | 	call	#_pop
11be8     A7 FA 61 FC | 	wrlong	result1, fp
11bec     04 4E 05 F1 | 	add	fp, #4
11bf0     A7 FC 61 FC | 	wrlong	result2, fp
11bf4     04 4E 05 F1 | 	add	fp, #4
11bf8     A7 FE 61 FC | 	wrlong	result3, fp
11bfc     08 4E 85 F1 | 	sub	fp, #8
11c00     50 00 00 FF 
11c04     30 E5 05 F1 | 	add	objptr, ##41264
11c08     F2 12 02 FB | 	rdlong	arg01, objptr
11c0c     09 27 02 F6 | 	mov	local01, arg01
11c10     02 26 66 F0 | 	shl	local01, #2
11c14     09 27 02 F1 | 	add	local01, arg01
11c18     02 26 66 F0 | 	shl	local01, #2
11c1c     06 00 00 FF 
11c20     98 E4 85 F1 | 	sub	objptr, ##3224
11c24     F2 26 02 F1 | 	add	local01, objptr
11c28     A7 12 02 FB | 	rdlong	arg01, fp
11c2c     08 26 06 F1 | 	add	local01, #8
11c30     13 13 62 FC | 	wrlong	arg01, local01
11c34     4A 00 00 FF 
11c38     98 E4 85 F1 | 	sub	objptr, ##38040
11c3c     40 B0 BF FD | 	call	#_pop
11c40     A7 FA 61 FC | 	wrlong	result1, fp
11c44     04 4E 05 F1 | 	add	fp, #4
11c48     A7 FC 61 FC | 	wrlong	result2, fp
11c4c     04 4E 05 F1 | 	add	fp, #4
11c50     A7 FE 61 FC | 	wrlong	result3, fp
11c54     08 4E 85 F1 | 	sub	fp, #8
11c58     50 00 00 FF 
11c5c     30 E5 05 F1 | 	add	objptr, ##41264
11c60     F2 12 02 FB | 	rdlong	arg01, objptr
11c64     09 27 02 F6 | 	mov	local01, arg01
11c68     02 26 66 F0 | 	shl	local01, #2
11c6c     09 27 02 F1 | 	add	local01, arg01
11c70     02 26 66 F0 | 	shl	local01, #2
11c74     06 00 00 FF 
11c78     98 E4 85 F1 | 	sub	objptr, ##3224
11c7c     F2 26 02 F1 | 	add	local01, objptr
11c80     A7 12 02 F6 | 	mov	arg01, fp
11c84     4A 00 00 FF 
11c88     98 E4 85 F1 | 	sub	objptr, ##38040
11c8c     D4 B1 BF FD | 	call	#_converttoint
11c90     FD 12 02 F6 | 	mov	arg01, result1
11c94     0C 26 06 F1 | 	add	local01, #12
11c98     13 13 62 FC | 	wrlong	arg01, local01
11c9c     E0 AF BF FD | 	call	#_pop
11ca0     A7 FA 61 FC | 	wrlong	result1, fp
11ca4     04 4E 05 F1 | 	add	fp, #4
11ca8     A7 FC 61 FC | 	wrlong	result2, fp
11cac     04 4E 05 F1 | 	add	fp, #4
11cb0     A7 FE 61 FC | 	wrlong	result3, fp
11cb4     08 4E 85 F1 | 	sub	fp, #8
11cb8     50 00 00 FF 
11cbc     30 E5 05 F1 | 	add	objptr, ##41264
11cc0     F2 12 02 FB | 	rdlong	arg01, objptr
11cc4     09 27 02 F6 | 	mov	local01, arg01
11cc8     02 26 66 F0 | 	shl	local01, #2
11ccc     09 27 02 F1 | 	add	local01, arg01
11cd0     02 26 66 F0 | 	shl	local01, #2
11cd4     06 00 00 FF 
11cd8     98 E4 85 F1 | 	sub	objptr, ##3224
11cdc     F2 26 02 F1 | 	add	local01, objptr
11ce0     A7 12 02 F6 | 	mov	arg01, fp
11ce4     4A 00 00 FF 
11ce8     98 E4 85 F1 | 	sub	objptr, ##38040
11cec     74 B1 BF FD | 	call	#_converttoint
11cf0     10 26 06 F1 | 	add	local01, #16
11cf4     13 FB 61 FC | 	wrlong	result1, local01
11cf8                 | ' fortop+=1
11cf8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
11cf8                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
11cf8                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
11cf8                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
11cf8     4A 00 00 FF 
11cfc     80 E4 05 F1 | 	add	objptr, ##38016
11d00     F2 12 02 FB | 	rdlong	arg01, objptr
11d04     09 27 02 F6 | 	mov	local01, arg01
11d08     01 26 66 F0 | 	shl	local01, #1
11d0c     09 27 02 F1 | 	add	local01, arg01
11d10     02 26 66 F0 | 	shl	local01, #2
11d14     03 00 00 FF 
11d18     04 E4 85 F1 | 	sub	objptr, ##1540
11d1c     F2 26 02 F1 | 	add	local01, objptr
11d20     08 26 06 F1 | 	add	local01, #8
11d24     13 27 02 FB | 	rdlong	local01, local01
11d28     FE 27 0E F2 | 	cmp	local01, #510 wz
11d2c     47 00 00 FF 
11d30     7C E4 85 F1 | 	sub	objptr, ##36476
11d34     70 00 90 5D |  if_ne	jmp	#LR__1480
11d38     50 00 00 FF 
11d3c     30 E5 05 F1 | 	add	objptr, ##41264
11d40     F2 12 02 FB | 	rdlong	arg01, objptr
11d44     09 27 02 F6 | 	mov	local01, arg01
11d48     02 26 66 F0 | 	shl	local01, #2
11d4c     09 27 02 F1 | 	add	local01, arg01
11d50     02 26 66 F0 | 	shl	local01, #2
11d54     06 00 00 FF 
11d58     98 E4 85 F1 | 	sub	objptr, ##3224
11d5c     F2 26 02 F1 | 	add	local01, objptr
11d60     06 00 00 FF 
11d64     20 E4 05 F1 | 	add	objptr, ##3104
11d68     F2 12 02 FB | 	rdlong	arg01, objptr
11d6c     13 13 62 FC | 	wrlong	arg01, local01
11d70     78 E4 05 F1 | 	add	objptr, #120
11d74     F2 12 02 FB | 	rdlong	arg01, objptr
11d78     09 27 02 F6 | 	mov	local01, arg01
11d7c     02 26 66 F0 | 	shl	local01, #2
11d80     09 27 02 F1 | 	add	local01, arg01
11d84     02 26 66 F0 | 	shl	local01, #2
11d88     06 00 00 FF 
11d8c     98 E4 85 F1 | 	sub	objptr, ##3224
11d90     F2 26 02 F1 | 	add	local01, objptr
11d94     04 26 06 F1 | 	add	local01, #4
11d98     13 01 68 FC | 	wrlong	#0, local01
11d9c     4A 00 00 FF 
11da0     98 E4 85 F1 | 	sub	objptr, ##38040
11da4     78 00 90 FD | 	jmp	#LR__1481
11da8                 | LR__1480
11da8     50 00 00 FF 
11dac     30 E5 05 F1 | 	add	objptr, ##41264
11db0     F2 12 02 FB | 	rdlong	arg01, objptr
11db4     09 27 02 F6 | 	mov	local01, arg01
11db8     02 26 66 F0 | 	shl	local01, #2
11dbc     09 27 02 F1 | 	add	local01, arg01
11dc0     02 26 66 F0 | 	shl	local01, #2
11dc4     06 00 00 FF 
11dc8     98 E4 85 F1 | 	sub	objptr, ##3224
11dcc     F2 26 02 F1 | 	add	local01, objptr
11dd0     06 00 00 FF 
11dd4     28 E4 05 F1 | 	add	objptr, ##3112
11dd8     F2 12 02 FB | 	rdlong	arg01, objptr
11ddc     13 13 62 FC | 	wrlong	arg01, local01
11de0     70 E4 05 F1 | 	add	objptr, #112
11de4     F2 12 02 FB | 	rdlong	arg01, objptr
11de8     09 27 02 F6 | 	mov	local01, arg01
11dec     02 26 66 F0 | 	shl	local01, #2
11df0     09 27 02 F1 | 	add	local01, arg01
11df4     02 26 66 F0 | 	shl	local01, #2
11df8     06 00 00 FF 
11dfc     98 E4 85 F1 | 	sub	objptr, ##3224
11e00     F2 26 02 F1 | 	add	local01, objptr
11e04     18 E4 85 F1 | 	sub	objptr, #24
11e08     F2 12 02 FB | 	rdlong	arg01, objptr
11e0c     4A 00 00 FF 
11e10     80 E4 85 F1 | 	sub	objptr, ##38016
11e14     01 12 06 F1 | 	add	arg01, #1
11e18     04 26 06 F1 | 	add	local01, #4
11e1c     13 13 62 FC | 	wrlong	arg01, local01
11e20                 | LR__1481
11e20     A7 F0 03 F6 | 	mov	ptra, fp
11e24     B2 00 A0 FD | 	call	#popregs_
11e28                 | _do_for_ret
11e28     2D 00 64 FD | 	ret
11e2c                 | 
11e2c                 | ' 
11e2c                 | ' '-------------------- frame
11e2c                 | ' 
11e2c                 | ' sub do_frame
11e2c                 | _do_frame
11e2c     03 4A 05 F6 | 	mov	COUNT_, #3
11e30     A8 00 A0 FD | 	call	#pushregs_
11e34     30 F0 07 F1 | 	add	ptra, #48
11e38     44 AE BF FD | 	call	#_pop
11e3c     FD 16 02 F6 | 	mov	arg03, result1
11e40     FE 14 02 F6 | 	mov	arg02, result2
11e44     FF 1A 02 F6 | 	mov	arg05, result3
11e48     24 4E 05 F1 | 	add	fp, #36
11e4c     A7 16 62 FC | 	wrlong	arg03, fp
11e50     04 4E 05 F1 | 	add	fp, #4
11e54     A7 14 62 FC | 	wrlong	arg02, fp
11e58     04 4E 05 F1 | 	add	fp, #4
11e5c     A7 1A 62 FC | 	wrlong	arg05, fp
11e60     2C 4E 85 F1 | 	sub	fp, #44
11e64     18 AE BF FD | 	call	#_pop
11e68     FD 16 02 F6 | 	mov	arg03, result1
11e6c     FE 14 02 F6 | 	mov	arg02, result2
11e70     FF 1A 02 F6 | 	mov	arg05, result3
11e74     18 4E 05 F1 | 	add	fp, #24
11e78     A7 16 62 FC | 	wrlong	arg03, fp
11e7c     04 4E 05 F1 | 	add	fp, #4
11e80     A7 14 62 FC | 	wrlong	arg02, fp
11e84     04 4E 05 F1 | 	add	fp, #4
11e88     A7 1A 62 FC | 	wrlong	arg05, fp
11e8c     20 4E 85 F1 | 	sub	fp, #32
11e90     EC AD BF FD | 	call	#_pop
11e94     FD 16 02 F6 | 	mov	arg03, result1
11e98     FE 14 02 F6 | 	mov	arg02, result2
11e9c     FF 1A 02 F6 | 	mov	arg05, result3
11ea0     0C 4E 05 F1 | 	add	fp, #12
11ea4     A7 16 62 FC | 	wrlong	arg03, fp
11ea8     04 4E 05 F1 | 	add	fp, #4
11eac     A7 14 62 FC | 	wrlong	arg02, fp
11eb0     04 4E 05 F1 | 	add	fp, #4
11eb4     A7 1A 62 FC | 	wrlong	arg05, fp
11eb8     14 4E 85 F1 | 	sub	fp, #20
11ebc     C0 AD BF FD | 	call	#_pop
11ec0     FF 16 02 F6 | 	mov	arg03, result3
11ec4     A7 FA 61 FC | 	wrlong	result1, fp
11ec8     04 4E 05 F1 | 	add	fp, #4
11ecc     A7 FC 61 FC | 	wrlong	result2, fp
11ed0     04 4E 05 F1 | 	add	fp, #4
11ed4     A7 16 62 FC | 	wrlong	arg03, fp
11ed8     08 4E 85 F1 | 	sub	fp, #8
11edc     A7 12 02 F6 | 	mov	arg01, fp
11ee0     80 AF BF FD | 	call	#_converttoint
11ee4     FD 26 02 F6 | 	mov	local01, result1
11ee8     0C 4E 05 F1 | 	add	fp, #12
11eec     A7 12 02 F6 | 	mov	arg01, fp
11ef0     0C 4E 85 F1 | 	sub	fp, #12
11ef4     6C AF BF FD | 	call	#_converttoint
11ef8     FD 28 02 F6 | 	mov	local02, result1
11efc     18 4E 05 F1 | 	add	fp, #24
11f00     A7 12 02 F6 | 	mov	arg01, fp
11f04     18 4E 85 F1 | 	sub	fp, #24
11f08     58 AF BF FD | 	call	#_converttoint
11f0c     FD 2A 02 F6 | 	mov	local03, result1
11f10     24 4E 05 F1 | 	add	fp, #36
11f14     A7 12 02 F6 | 	mov	arg01, fp
11f18     24 4E 85 F1 | 	sub	fp, #36
11f1c     44 AF BF FD | 	call	#_converttoint
11f20     FD 18 02 F6 | 	mov	arg04, result1
11f24     37 00 00 FF 
11f28     28 E4 05 F1 | 	add	objptr, ##28200
11f2c     F2 1A 02 FB | 	rdlong	arg05, objptr
11f30     37 00 00 FF 
11f34     28 E4 85 F1 | 	sub	objptr, ##28200
11f38     13 13 02 F6 | 	mov	arg01, local01
11f3c     14 15 02 F6 | 	mov	arg02, local02
11f40     15 17 02 F6 | 	mov	arg03, local03
11f44     64 1A B1 FD | 	call	#_hg010b_spin2_frame
11f48     A7 F0 03 F6 | 	mov	ptra, fp
11f4c     B2 00 A0 FD | 	call	#popregs_
11f50                 | _do_frame_ret
11f50     2D 00 64 FD | 	ret
11f54                 | 
11f54                 | ' 
11f54                 | ' '-------------------- framebuf
11f54                 | ' 
11f54                 | ' sub do_framebuf
11f54                 | _do_framebuf
11f54     00 4A 05 F6 | 	mov	COUNT_, #0
11f58     A8 00 A0 FD | 	call	#pushregs_
11f5c     0C F0 07 F1 | 	add	ptra, #12
11f60     08 4E 05 F1 | 	add	fp, #8
11f64     A7 3A 68 FC | 	wrlong	#29, fp
11f68     F2 12 02 FB | 	rdlong	arg01, objptr
11f6c     08 4E 85 F1 | 	sub	fp, #8
11f70     A7 12 62 FC | 	wrlong	arg01, fp
11f74     A7 12 02 F6 | 	mov	arg01, fp
11f78     9C AD BF FD | 	call	#_push
11f7c     A7 F0 03 F6 | 	mov	ptra, fp
11f80     B2 00 A0 FD | 	call	#popregs_
11f84                 | _do_framebuf_ret
11f84     2D 00 64 FD | 	ret
11f88                 | 
11f88                 | ' '-------------------- fre
11f88                 | ' 
11f88                 | ' sub do_fre
11f88                 | _do_fre
11f88     01 4A 05 F6 | 	mov	COUNT_, #1
11f8c     A8 00 A0 FD | 	call	#pushregs_
11f90     0C F0 07 F1 | 	add	ptra, #12
11f94     52 00 00 FF 
11f98     44 E4 05 F1 | 	add	objptr, ##42052
11f9c     F2 12 02 FB | 	rdlong	arg01, objptr
11fa0     0E 00 00 FF 
11fa4     E8 E5 85 F1 | 	sub	objptr, ##7656
11fa8     F2 26 02 FB | 	rdlong	local01, objptr
11fac     13 13 82 F1 | 	sub	arg01, local01
11fb0     0F 00 00 FF 
11fb4     60 E4 05 F1 | 	add	objptr, ##7776
11fb8     F2 12 62 FC | 	wrlong	arg01, objptr
11fbc     08 4E 05 F1 | 	add	fp, #8
11fc0     A7 3A 68 FC | 	wrlong	#29, fp
11fc4     08 4E 85 F1 | 	sub	fp, #8
11fc8     F2 26 02 FB | 	rdlong	local01, objptr
11fcc     52 00 00 FF 
11fd0     BC E4 85 F1 | 	sub	objptr, ##42172
11fd4     A7 26 62 FC | 	wrlong	local01, fp
11fd8     A7 12 02 F6 | 	mov	arg01, fp
11fdc     38 AD BF FD | 	call	#_push
11fe0     A7 F0 03 F6 | 	mov	ptra, fp
11fe4     B2 00 A0 FD | 	call	#popregs_
11fe8                 | _do_fre_ret
11fe8     2D 00 64 FD | 	ret
11fec                 | 
11fec                 | ' 
11fec                 | ' '-------------------- get
11fec                 | ' 
11fec                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
11fec                 | _do_get
11fec     09 4A 05 F6 | 	mov	COUNT_, #9
11ff0     A8 00 A0 FD | 	call	#pushregs_
11ff4     40 F0 07 F1 | 	add	ptra, #64
11ff8     4A 00 00 FF 
11ffc     80 E4 05 F1 | 	add	objptr, ##38016
12000     F2 1A 02 FB | 	rdlong	arg05, objptr
12004     0D 19 02 F6 | 	mov	arg04, arg05
12008     01 18 66 F0 | 	shl	arg04, #1
1200c     0D 19 02 F1 | 	add	arg04, arg05
12010     02 18 66 F0 | 	shl	arg04, #2
12014     03 00 00 FF 
12018     04 E4 85 F1 | 	sub	objptr, ##1540
1201c     F2 18 02 F1 | 	add	arg04, objptr
12020     0C 1B 02 FB | 	rdlong	arg05, arg04
12024     A7 1A 62 FC | 	wrlong	arg05, fp
12028                 | ' 
12028                 | ' numpar=compiledline(lineptr_e).result.uresult
12028                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
12028     04 1A 0E F2 | 	cmp	arg05, #4 wz
1202c     47 00 00 FF 
12030     7C E4 85 F1 | 	sub	objptr, ##36476
12034     48 00 90 5D |  if_ne	jmp	#LR__1490
12038     44 AC BF FD | 	call	#_pop
1203c     FF 1A 02 F6 | 	mov	arg05, result3
12040     1C 4E 05 F1 | 	add	fp, #28
12044     A7 FA 61 FC | 	wrlong	result1, fp
12048     04 4E 05 F1 | 	add	fp, #4
1204c     A7 FC 61 FC | 	wrlong	result2, fp
12050     04 4E 05 F1 | 	add	fp, #4
12054     A7 1A 62 FC | 	wrlong	arg05, fp
12058     08 4E 85 F1 | 	sub	fp, #8
1205c     A7 12 02 F6 | 	mov	arg01, fp
12060     1C 4E 85 F1 | 	sub	fp, #28
12064     FC AD BF FD | 	call	#_converttoint
12068     52 00 00 FF 
1206c     B8 E4 05 F1 | 	add	objptr, ##42168
12070     F2 FA 61 FC | 	wrlong	result1, objptr
12074     52 00 00 FF 
12078     B8 E4 85 F1 | 	sub	objptr, ##42168
1207c     18 00 90 FD | 	jmp	#LR__1491
12080                 | LR__1490
12080     52 00 00 FF 
12084     B8 E4 05 F1 | 	add	objptr, ##42168
12088     FF FF FF FF 
1208c     F2 FE 6B FC | 	wrlong	##-1, objptr
12090     52 00 00 FF 
12094     B8 E4 85 F1 | 	sub	objptr, ##42168
12098                 | LR__1491
12098                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
12098     A7 16 02 FB | 	rdlong	arg03, fp
1209c     03 16 56 F2 | 	cmps	arg03, #3 wc
120a0     40 00 90 CD |  if_b	jmp	#LR__1492
120a4     D8 AB BF FD | 	call	#_pop
120a8     FF 16 02 F6 | 	mov	arg03, result3
120ac     1C 4E 05 F1 | 	add	fp, #28
120b0     A7 FA 61 FC | 	wrlong	result1, fp
120b4     04 4E 05 F1 | 	add	fp, #4
120b8     A7 FC 61 FC | 	wrlong	result2, fp
120bc     04 4E 05 F1 | 	add	fp, #4
120c0     A7 16 62 FC | 	wrlong	arg03, fp
120c4     08 4E 85 F1 | 	sub	fp, #8
120c8     A7 12 02 F6 | 	mov	arg01, fp
120cc     1C 4E 85 F1 | 	sub	fp, #28
120d0     90 AD BF FD | 	call	#_converttoint
120d4     08 4E 05 F1 | 	add	fp, #8
120d8     A7 FA 61 FC | 	wrlong	result1, fp
120dc     08 4E 85 F1 | 	sub	fp, #8
120e0     0C 00 90 FD | 	jmp	#LR__1493
120e4                 | LR__1492
120e4     08 4E 05 F1 | 	add	fp, #8
120e8     A7 02 68 FC | 	wrlong	#1, fp
120ec     08 4E 85 F1 | 	sub	fp, #8
120f0                 | LR__1493
120f0                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
120f0     A7 16 02 FB | 	rdlong	arg03, fp
120f4     02 16 56 F2 | 	cmps	arg03, #2 wc
120f8     3C 00 90 CD |  if_b	jmp	#LR__1494
120fc     80 AB BF FD | 	call	#_pop
12100     FF 16 02 F6 | 	mov	arg03, result3
12104     1C 4E 05 F1 | 	add	fp, #28
12108     A7 FA 61 FC | 	wrlong	result1, fp
1210c     04 4E 05 F1 | 	add	fp, #4
12110     A7 FC 61 FC | 	wrlong	result2, fp
12114     04 4E 05 F1 | 	add	fp, #4
12118     A7 16 62 FC | 	wrlong	arg03, fp
1211c     08 4E 85 F1 | 	sub	fp, #8
12120     A7 12 02 F6 | 	mov	arg01, fp
12124     1C 4E 85 F1 | 	sub	fp, #28
12128     38 AD BF FD | 	call	#_converttoint
1212c     0C 4E 05 F1 | 	add	fp, #12
12130     A7 FA 61 FC | 	wrlong	result1, fp
12134     0C 4E 85 F1 | 	sub	fp, #12
12138                 | LR__1494
12138     44 AB BF FD | 	call	#_pop
1213c     FF 16 02 F6 | 	mov	arg03, result3
12140     1C 4E 05 F1 | 	add	fp, #28
12144     A7 FA 61 FC | 	wrlong	result1, fp
12148     04 4E 05 F1 | 	add	fp, #4
1214c     A7 FC 61 FC | 	wrlong	result2, fp
12150     04 4E 05 F1 | 	add	fp, #4
12154     A7 16 62 FC | 	wrlong	arg03, fp
12158     08 4E 85 F1 | 	sub	fp, #8
1215c     A7 12 02 F6 | 	mov	arg01, fp
12160     1C 4E 85 F1 | 	sub	fp, #28
12164     FC AC BF FD | 	call	#_converttoint
12168     04 4E 05 F1 | 	add	fp, #4
1216c     A7 FA 61 FC | 	wrlong	result1, fp
12170     10 4E 05 F1 | 	add	fp, #16
12174     A7 16 02 FB | 	rdlong	arg03, fp
12178     14 4E 85 F1 | 	sub	fp, #20
1217c     02 16 66 F0 | 	shl	arg03, #2
12180     50 00 00 FF 
12184     C4 E4 05 F1 | 	add	objptr, ##41156
12188     F2 26 02 F6 | 	mov	local01, objptr
1218c     F2 16 02 F1 | 	add	arg03, objptr
12190     0B 01 68 FC | 	wrlong	#0, arg03
12194                 | ' t1=pop() : channel=converttoint(t1)
12194                 | ' getres(j)=0
12194                 | ' if pos>=0 then
12194     01 00 00 FF 
12198     F4 E5 05 F1 | 	add	objptr, ##1012
1219c     F2 28 02 FB | 	rdlong	local02, objptr
121a0     52 00 00 FF 
121a4     B8 E4 85 F1 | 	sub	objptr, ##42168
121a8     00 28 56 F2 | 	cmps	local02, #0 wc
121ac     F0 01 90 CD |  if_b	jmp	#LR__1501
121b0                 | '   for i=0 to  amount/1024
121b0     10 4E 05 F1 | 	add	fp, #16
121b4     A7 00 68 FC | 	wrlong	#0, fp
121b8     08 4E 85 F1 | 	sub	fp, #8
121bc     A7 2A 02 FB | 	rdlong	local03, fp
121c0     08 4E 85 F1 | 	sub	fp, #8
121c4     15 2D 52 F6 | 	abs	local04, local03 wc
121c8     0A 2C 46 F0 | 	shr	local04, #10
121cc     16 2D 82 F6 | 	negc	local04, local04
121d0     01 2C 06 F1 | 	add	local04, #1
121d4                 | LR__1495
121d4     10 4E 05 F1 | 	add	fp, #16
121d8     A7 2A 02 FB | 	rdlong	local03, fp
121dc     10 4E 85 F1 | 	sub	fp, #16
121e0     16 2B 52 F2 | 	cmps	local03, local04 wc
121e4     9C 03 90 3D |  if_ae	jmp	#LR__1509
121e8                 | '     get #channel,pos+1,block(0),amount,r
121e8     04 4E 05 F1 | 	add	fp, #4
121ec     A7 12 02 FB | 	rdlong	arg01, fp
121f0     52 00 00 FF 
121f4     B8 E4 05 F1 | 	add	objptr, ##42168
121f8     F2 14 02 FB | 	rdlong	arg02, objptr
121fc     01 14 06 F1 | 	add	arg02, #1
12200     04 00 00 FF 
12204     04 E4 85 F1 | 	sub	objptr, ##2052
12208     F2 16 02 F6 | 	mov	arg03, objptr
1220c     4E 00 00 FF 
12210     B4 E4 85 F1 | 	sub	objptr, ##40116
12214     04 4E 05 F1 | 	add	fp, #4
12218     A7 18 02 FB | 	rdlong	arg04, fp
1221c     08 4E 85 F1 | 	sub	fp, #8
12220     01 1A 06 F6 | 	mov	arg05, #1
12224     C0 45 B1 FD | 	call	#__system___basic_get
12228     18 4E 05 F1 | 	add	fp, #24
1222c     A7 FA 61 FC | 	wrlong	result1, fp
12230                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12230     0C 4E 85 F1 | 	sub	fp, #12
12234     A7 28 02 FB | 	rdlong	local02, fp
12238     0C 4E 85 F1 | 	sub	fp, #12
1223c     00 04 00 FF 
12240     00 28 56 F2 | 	cmps	local02, ##524288 wc
12244     7C 00 90 3D |  if_ae	jmp	#LR__1497
12248     14 4E 05 F1 | 	add	fp, #20
1224c     A7 00 68 FC | 	wrlong	#0, fp
12250     04 4E 05 F1 | 	add	fp, #4
12254     A7 2E 02 FB | 	rdlong	local05, fp
12258     18 4E 85 F1 | 	sub	fp, #24
1225c                 | LR__1496
1225c     14 4E 05 F1 | 	add	fp, #20
12260     A7 28 02 FB | 	rdlong	local02, fp
12264     14 4E 85 F1 | 	sub	fp, #20
12268     17 29 52 F2 | 	cmps	local02, local05 wc
1226c     D8 00 90 3D |  if_ae	jmp	#LR__1500
12270     0C 4E 05 F1 | 	add	fp, #12
12274     A7 12 02 FB | 	rdlong	arg01, fp
12278     04 4E 05 F1 | 	add	fp, #4
1227c     A7 2A 02 FB | 	rdlong	local03, fp
12280     0A 2A 66 F0 | 	shl	local03, #10
12284     15 13 02 F1 | 	add	arg01, local03
12288     04 4E 05 F1 | 	add	fp, #4
1228c     A7 2A 02 FB | 	rdlong	local03, fp
12290     15 13 02 F1 | 	add	arg01, local03
12294     4E 00 00 FF 
12298     B4 E4 05 F1 | 	add	objptr, ##40116
1229c     F2 2A 02 F1 | 	add	local03, objptr
122a0     15 15 C2 FA | 	rdbyte	arg02, local03
122a4     09 15 42 FC | 	wrbyte	arg02, arg01
122a8     4E 00 00 FF 
122ac     B4 E4 85 F1 | 	sub	objptr, ##40116
122b0     A7 2A 02 FB | 	rdlong	local03, fp
122b4     01 2A 06 F1 | 	add	local03, #1
122b8     A7 2A 62 FC | 	wrlong	local03, fp
122bc     14 4E 85 F1 | 	sub	fp, #20
122c0     98 FF 9F FD | 	jmp	#LR__1496
122c4                 | LR__1497
122c4     14 4E 05 F1 | 	add	fp, #20
122c8     A7 00 68 FC | 	wrlong	#0, fp
122cc     04 4E 05 F1 | 	add	fp, #4
122d0     A7 30 02 FB | 	rdlong	local06, fp
122d4     18 4E 85 F1 | 	sub	fp, #24
122d8                 | LR__1498
122d8     14 4E 05 F1 | 	add	fp, #20
122dc     A7 28 02 FB | 	rdlong	local02, fp
122e0     14 4E 85 F1 | 	sub	fp, #20
122e4     18 29 52 F2 | 	cmps	local02, local06 wc
122e8     5C 00 90 3D |  if_ae	jmp	#LR__1499
122ec     0C 4E 05 F1 | 	add	fp, #12
122f0     A7 12 02 FB | 	rdlong	arg01, fp
122f4     04 4E 05 F1 | 	add	fp, #4
122f8     A7 2E 02 FB | 	rdlong	local05, fp
122fc     0A 2E 66 F0 | 	shl	local05, #10
12300     17 13 02 F1 | 	add	arg01, local05
12304     04 4E 05 F1 | 	add	fp, #4
12308     A7 2E 02 FB | 	rdlong	local05, fp
1230c     17 13 02 F1 | 	add	arg01, local05
12310     14 4E 85 F1 | 	sub	fp, #20
12314     4E 00 00 FF 
12318     B4 E4 05 F1 | 	add	objptr, ##40116
1231c     F2 2E 02 F1 | 	add	local05, objptr
12320     17 15 C2 FA | 	rdbyte	arg02, local05
12324     4E 00 00 FF 
12328     B4 E4 85 F1 | 	sub	objptr, ##40116
1232c     8C FE B0 FD | 	call	#_pspoke
12330     14 4E 05 F1 | 	add	fp, #20
12334     A7 2E 02 FB | 	rdlong	local05, fp
12338     01 2E 06 F1 | 	add	local05, #1
1233c     A7 2E 62 FC | 	wrlong	local05, fp
12340     14 4E 85 F1 | 	sub	fp, #20
12344     90 FF 9F FD | 	jmp	#LR__1498
12348                 | LR__1499
12348                 | LR__1500
12348     14 4E 05 F1 | 	add	fp, #20
1234c     A7 30 02 FB | 	rdlong	local06, fp
12350     18 2B 02 F6 | 	mov	local03, local06
12354     02 2A 66 F0 | 	shl	local03, #2
12358     50 00 00 FF 
1235c     C4 E4 05 F1 | 	add	objptr, ##41156
12360     F2 2A 02 F1 | 	add	local03, objptr
12364     02 30 66 F0 | 	shl	local06, #2
12368     F2 30 02 F1 | 	add	local06, objptr
1236c     18 31 02 FB | 	rdlong	local06, local06
12370     04 4E 05 F1 | 	add	fp, #4
12374     A7 2E 02 FB | 	rdlong	local05, fp
12378     17 31 02 F1 | 	add	local06, local05
1237c     15 31 62 FC | 	wrlong	local06, local03
12380     08 4E 85 F1 | 	sub	fp, #8
12384     A7 30 02 FB | 	rdlong	local06, fp
12388     01 30 06 F1 | 	add	local06, #1
1238c     A7 30 62 FC | 	wrlong	local06, fp
12390     10 4E 85 F1 | 	sub	fp, #16
12394     50 00 00 FF 
12398     C4 E4 85 F1 | 	sub	objptr, ##41156
1239c     34 FE 9F FD | 	jmp	#LR__1495
123a0                 | LR__1501
123a0                 | '   for i=0 to  amount/1024
123a0     10 4E 05 F1 | 	add	fp, #16
123a4     A7 00 68 FC | 	wrlong	#0, fp
123a8     08 4E 85 F1 | 	sub	fp, #8
123ac     A7 2A 02 FB | 	rdlong	local03, fp
123b0     08 4E 85 F1 | 	sub	fp, #8
123b4     15 33 52 F6 | 	abs	local07, local03 wc
123b8     0A 32 46 F0 | 	shr	local07, #10
123bc     19 33 82 F6 | 	negc	local07, local07
123c0     01 32 06 F1 | 	add	local07, #1
123c4                 | LR__1502
123c4     10 4E 05 F1 | 	add	fp, #16
123c8     A7 2A 02 FB | 	rdlong	local03, fp
123cc     10 4E 85 F1 | 	sub	fp, #16
123d0     19 2B 52 F2 | 	cmps	local03, local07 wc
123d4     AC 01 90 3D |  if_ae	jmp	#LR__1508
123d8                 | '     get #channel,,block(0),amount,r
123d8     04 4E 05 F1 | 	add	fp, #4
123dc     A7 12 02 FB | 	rdlong	arg01, fp
123e0     4E 00 00 FF 
123e4     B4 E4 05 F1 | 	add	objptr, ##40116
123e8     F2 16 02 F6 | 	mov	arg03, objptr
123ec     4E 00 00 FF 
123f0     B4 E4 85 F1 | 	sub	objptr, ##40116
123f4     04 4E 05 F1 | 	add	fp, #4
123f8     A7 18 02 FB | 	rdlong	arg04, fp
123fc     08 4E 85 F1 | 	sub	fp, #8
12400     00 14 06 F6 | 	mov	arg02, #0
12404     01 1A 06 F6 | 	mov	arg05, #1
12408     DC 43 B1 FD | 	call	#__system___basic_get
1240c     18 4E 05 F1 | 	add	fp, #24
12410     A7 FA 61 FC | 	wrlong	result1, fp
12414                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12414     0C 4E 85 F1 | 	sub	fp, #12
12418     A7 28 02 FB | 	rdlong	local02, fp
1241c     0C 4E 85 F1 | 	sub	fp, #12
12420     00 04 00 FF 
12424     00 28 56 F2 | 	cmps	local02, ##524288 wc
12428     7C 00 90 3D |  if_ae	jmp	#LR__1504
1242c     14 4E 05 F1 | 	add	fp, #20
12430     A7 00 68 FC | 	wrlong	#0, fp
12434     04 4E 05 F1 | 	add	fp, #4
12438     A7 34 02 FB | 	rdlong	local08, fp
1243c     18 4E 85 F1 | 	sub	fp, #24
12440                 | LR__1503
12440     14 4E 05 F1 | 	add	fp, #20
12444     A7 28 02 FB | 	rdlong	local02, fp
12448     14 4E 85 F1 | 	sub	fp, #20
1244c     1A 29 52 F2 | 	cmps	local02, local08 wc
12450     D8 00 90 3D |  if_ae	jmp	#LR__1507
12454     0C 4E 05 F1 | 	add	fp, #12
12458     A7 12 02 FB | 	rdlong	arg01, fp
1245c     04 4E 05 F1 | 	add	fp, #4
12460     A7 30 02 FB | 	rdlong	local06, fp
12464     0A 30 66 F0 | 	shl	local06, #10
12468     18 13 02 F1 | 	add	arg01, local06
1246c     04 4E 05 F1 | 	add	fp, #4
12470     A7 30 02 FB | 	rdlong	local06, fp
12474     18 13 02 F1 | 	add	arg01, local06
12478     4E 00 00 FF 
1247c     B4 E4 05 F1 | 	add	objptr, ##40116
12480     F2 30 02 F1 | 	add	local06, objptr
12484     18 15 C2 FA | 	rdbyte	arg02, local06
12488     09 15 42 FC | 	wrbyte	arg02, arg01
1248c     4E 00 00 FF 
12490     B4 E4 85 F1 | 	sub	objptr, ##40116
12494     A7 30 02 FB | 	rdlong	local06, fp
12498     01 30 06 F1 | 	add	local06, #1
1249c     A7 30 62 FC | 	wrlong	local06, fp
124a0     14 4E 85 F1 | 	sub	fp, #20
124a4     98 FF 9F FD | 	jmp	#LR__1503
124a8                 | LR__1504
124a8     14 4E 05 F1 | 	add	fp, #20
124ac     A7 00 68 FC | 	wrlong	#0, fp
124b0     04 4E 05 F1 | 	add	fp, #4
124b4     A7 36 02 FB | 	rdlong	local09, fp
124b8     18 4E 85 F1 | 	sub	fp, #24
124bc                 | LR__1505
124bc     14 4E 05 F1 | 	add	fp, #20
124c0     A7 28 02 FB | 	rdlong	local02, fp
124c4     14 4E 85 F1 | 	sub	fp, #20
124c8     1B 29 52 F2 | 	cmps	local02, local09 wc
124cc     5C 00 90 3D |  if_ae	jmp	#LR__1506
124d0     0C 4E 05 F1 | 	add	fp, #12
124d4     A7 12 02 FB | 	rdlong	arg01, fp
124d8     04 4E 05 F1 | 	add	fp, #4
124dc     A7 34 02 FB | 	rdlong	local08, fp
124e0     0A 34 66 F0 | 	shl	local08, #10
124e4     1A 13 02 F1 | 	add	arg01, local08
124e8     04 4E 05 F1 | 	add	fp, #4
124ec     A7 34 02 FB | 	rdlong	local08, fp
124f0     1A 13 02 F1 | 	add	arg01, local08
124f4     14 4E 85 F1 | 	sub	fp, #20
124f8     4E 00 00 FF 
124fc     B4 E4 05 F1 | 	add	objptr, ##40116
12500     F2 34 02 F1 | 	add	local08, objptr
12504     1A 15 C2 FA | 	rdbyte	arg02, local08
12508     4E 00 00 FF 
1250c     B4 E4 85 F1 | 	sub	objptr, ##40116
12510     A8 FC B0 FD | 	call	#_pspoke
12514     14 4E 05 F1 | 	add	fp, #20
12518     A7 34 02 FB | 	rdlong	local08, fp
1251c     01 34 06 F1 | 	add	local08, #1
12520     A7 34 62 FC | 	wrlong	local08, fp
12524     14 4E 85 F1 | 	sub	fp, #20
12528     90 FF 9F FD | 	jmp	#LR__1505
1252c                 | LR__1506
1252c                 | LR__1507
1252c     14 4E 05 F1 | 	add	fp, #20
12530     A7 36 02 FB | 	rdlong	local09, fp
12534     1B 31 02 F6 | 	mov	local06, local09
12538     02 30 66 F0 | 	shl	local06, #2
1253c     50 00 00 FF 
12540     C4 E4 05 F1 | 	add	objptr, ##41156
12544     F2 30 02 F1 | 	add	local06, objptr
12548     02 36 66 F0 | 	shl	local09, #2
1254c     F2 36 02 F1 | 	add	local09, objptr
12550     1B 37 02 FB | 	rdlong	local09, local09
12554     04 4E 05 F1 | 	add	fp, #4
12558     A7 34 02 FB | 	rdlong	local08, fp
1255c     1A 37 02 F1 | 	add	local09, local08
12560     18 37 62 FC | 	wrlong	local09, local06
12564     08 4E 85 F1 | 	sub	fp, #8
12568     A7 36 02 FB | 	rdlong	local09, fp
1256c     01 36 06 F1 | 	add	local09, #1
12570     A7 36 62 FC | 	wrlong	local09, fp
12574     10 4E 85 F1 | 	sub	fp, #16
12578     50 00 00 FF 
1257c     C4 E4 85 F1 | 	sub	objptr, ##41156
12580     40 FE 9F FD | 	jmp	#LR__1502
12584                 | LR__1508
12584                 | LR__1509
12584     A7 F0 03 F6 | 	mov	ptra, fp
12588     B2 00 A0 FD | 	call	#popregs_
1258c                 | _do_get_ret
1258c     2D 00 64 FD | 	ret
12590                 | 
12590                 | ' 
12590                 | ' '-------------------- getenvsustain
12590                 | ' 
12590                 | ' sub do_getenvsustain
12590                 | _do_getenvsustain
12590     01 4A 05 F6 | 	mov	COUNT_, #1
12594     A8 00 A0 FD | 	call	#pushregs_
12598     10 F0 07 F1 | 	add	ptra, #16
1259c     4A 00 00 FF 
125a0     80 E4 05 F1 | 	add	objptr, ##38016
125a4     F2 26 02 FB | 	rdlong	local01, objptr
125a8     13 17 02 F6 | 	mov	arg03, local01
125ac     01 16 66 F0 | 	shl	arg03, #1
125b0     13 17 02 F1 | 	add	arg03, local01
125b4     02 16 66 F0 | 	shl	arg03, #2
125b8     03 00 00 FF 
125bc     04 E4 85 F1 | 	sub	objptr, ##1540
125c0     F2 16 02 F1 | 	add	arg03, objptr
125c4     0B 17 02 FB | 	rdlong	arg03, arg03
125c8     0C 4E 05 F1 | 	add	fp, #12
125cc     A7 16 62 FC | 	wrlong	arg03, fp
125d0                 | ' 
125d0                 | ' numpar=compiledline(lineptr_e).result.uresult
125d0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
125d0     0C 4E 85 F1 | 	sub	fp, #12
125d4     02 16 16 F2 | 	cmp	arg03, #2 wc
125d8     47 00 00 FF 
125dc     7C E4 85 F1 | 	sub	objptr, ##36476
125e0     0C 4E 05 C1 |  if_b	add	fp, #12
125e4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
125e8     0C 4E 85 C1 |  if_b	sub	fp, #12
125ec     40 00 90 4D |  if_c_and_nz	jmp	#LR__1510
125f0     00 12 06 F6 | 	mov	arg01, #0
125f4     A8 90 B1 FD | 	call	#__system___getiolock_0599
125f8     FD 12 02 F6 | 	mov	arg01, result1
125fc     78 33 B1 FD | 	call	#__system___lockmem
12600     AE 01 00 FF 
12604     BE 15 06 F6 | 	mov	arg02, ##@LR__5868
12608     00 12 06 F6 | 	mov	arg01, #0
1260c     00 16 06 F6 | 	mov	arg03, #0
12610     58 40 B1 FD | 	call	#__system___basic_print_string
12614     00 12 06 F6 | 	mov	arg01, #0
12618     84 90 B1 FD | 	call	#__system___getiolock_0599
1261c     FD 00 68 FC | 	wrlong	#0, result1
12620     27 12 06 F6 | 	mov	arg01, #39
12624     00 14 06 F6 | 	mov	arg02, #0
12628     60 F9 B0 FD | 	call	#_printerror
1262c     64 00 90 FD | 	jmp	#LR__1511
12630                 | LR__1510
12630     4C A6 BF FD | 	call	#_pop
12634     FD 26 02 F6 | 	mov	local01, result1
12638     FE 16 02 F6 | 	mov	arg03, result2
1263c     A7 26 62 FC | 	wrlong	local01, fp
12640     04 4E 05 F1 | 	add	fp, #4
12644     A7 16 62 FC | 	wrlong	arg03, fp
12648     04 4E 05 F1 | 	add	fp, #4
1264c     A7 FE 61 FC | 	wrlong	result3, fp
12650     08 4E 85 F1 | 	sub	fp, #8
12654     A7 12 02 F6 | 	mov	arg01, fp
12658     08 A8 BF FD | 	call	#_converttoint
1265c     FD 26 02 F6 | 	mov	local01, result1
12660     01 26 66 F0 | 	shl	local01, #1
12664     52 00 00 FF 
12668     60 E4 05 F1 | 	add	objptr, ##42080
1266c     F2 26 02 F1 | 	add	local01, objptr
12670     13 27 E2 FA | 	rdword	local01, local01
12674     A7 26 62 FC | 	wrlong	local01, fp
12678     08 4E 05 F1 | 	add	fp, #8
1267c     A7 38 68 FC | 	wrlong	#28, fp
12680     08 4E 85 F1 | 	sub	fp, #8
12684     A7 12 02 F6 | 	mov	arg01, fp
12688     52 00 00 FF 
1268c     60 E4 85 F1 | 	sub	objptr, ##42080
12690     84 A6 BF FD | 	call	#_push
12694                 | LR__1511
12694     A7 F0 03 F6 | 	mov	ptra, fp
12698     B2 00 A0 FD | 	call	#popregs_
1269c                 | _do_getenvsustain_ret
1269c     2D 00 64 FD | 	ret
126a0                 | 
126a0                 | ' 
126a0                 | ' '-------------------- getnotevalue
126a0                 | ' 
126a0                 | ' sub do_getnotevalue
126a0                 | _do_getnotevalue
126a0     01 4A 05 F6 | 	mov	COUNT_, #1
126a4     A8 00 A0 FD | 	call	#pushregs_
126a8     1C F0 07 F1 | 	add	ptra, #28
126ac     D0 A5 BF FD | 	call	#_pop
126b0     FF 14 02 F6 | 	mov	arg02, result3
126b4     10 4E 05 F1 | 	add	fp, #16
126b8     A7 FA 61 FC | 	wrlong	result1, fp
126bc     04 4E 05 F1 | 	add	fp, #4
126c0     A7 FC 61 FC | 	wrlong	result2, fp
126c4     04 4E 05 F1 | 	add	fp, #4
126c8     A7 14 62 FC | 	wrlong	arg02, fp
126cc     08 4E 85 F1 | 	sub	fp, #8
126d0     A7 12 02 F6 | 	mov	arg01, fp
126d4     10 4E 85 F1 | 	sub	fp, #16
126d8     88 A7 BF FD | 	call	#_converttoint
126dc     FD 14 52 F6 | 	abs	arg02, result1 wc
126e0     0C 14 16 FD | 	qdiv	arg02, #12
126e4     0C 4E 05 F1 | 	add	fp, #12
126e8     A7 FA 61 FC | 	wrlong	result1, fp
126ec     14 00 00 FF 
126f0     D8 E4 05 F1 | 	add	objptr, ##10456
126f4     08 4E 85 F1 | 	sub	fp, #8
126f8     19 14 62 FD | 	getqy	arg02
126fc     0A 15 82 F6 | 	negc	arg02, arg02
12700     02 14 66 F0 | 	shl	arg02, #2
12704     F2 14 02 F1 | 	add	arg02, objptr
12708     0A 15 02 FB | 	rdlong	arg02, arg02
1270c     A7 14 62 FC | 	wrlong	arg02, fp
12710     08 4E 05 F1 | 	add	fp, #8
12714     A7 14 02 FB | 	rdlong	arg02, fp
12718     0A 15 52 F6 | 	abs	arg02, arg02 wc
1271c     0C 14 16 FD | 	qdiv	arg02, #12
12720     0C 4E 85 F1 | 	sub	fp, #12
12724     14 00 00 FF 
12728     D8 E4 85 F1 | 	sub	objptr, ##10456
1272c     18 14 62 FD | 	getqx	arg02
12730     0A 13 82 F6 | 	negc	arg01, arg02
12734     09 13 52 F6 | 	abs	arg01, arg01 wc
12738     1F 26 C6 C9 |  if_b	decod	local01, #31
1273c     00 26 06 36 |  if_ae	mov	local01, #0
12740     A8 5C B1 FD | 	call	#__system___float_fromuns
12744     13 FB 61 F5 | 	xor	result1, local01
12748     08 4E 05 F1 | 	add	fp, #8
1274c     A7 FA 61 FC | 	wrlong	result1, fp
12750     FD 14 02 F6 | 	mov	arg02, result1
12754     08 4E 85 F1 | 	sub	fp, #8
12758     1E 12 C6 F9 | 	decod	arg01, #30
1275c     98 6F B1 FD | 	call	#__system____builtin_powf
12760     FD 12 02 F6 | 	mov	arg01, result1
12764     04 4E 05 F1 | 	add	fp, #4
12768     A7 14 02 FB | 	rdlong	arg02, fp
1276c     04 4E 85 F1 | 	sub	fp, #4
12770     7C 60 B1 FD | 	call	#__system___float_mul
12774     A7 FA 61 FC | 	wrlong	result1, fp
12778     10 4E 05 F1 | 	add	fp, #16
1277c     A7 FA 61 FC | 	wrlong	result1, fp
12780     08 4E 05 F1 | 	add	fp, #8
12784     A7 3C 68 FC | 	wrlong	#30, fp
12788     08 4E 85 F1 | 	sub	fp, #8
1278c     A7 12 02 F6 | 	mov	arg01, fp
12790     10 4E 85 F1 | 	sub	fp, #16
12794     80 A5 BF FD | 	call	#_push
12798     A7 F0 03 F6 | 	mov	ptra, fp
1279c     B2 00 A0 FD | 	call	#popregs_
127a0                 | _do_getnotevalue_ret
127a0     2D 00 64 FD | 	ret
127a4                 | 
127a4                 | ' 
127a4                 | ' '-------------------- getpixel
127a4                 | ' 
127a4                 | ' sub do_getpixel
127a4                 | _do_getpixel
127a4     00 4A 05 F6 | 	mov	COUNT_, #0
127a8     A8 00 A0 FD | 	call	#pushregs_
127ac     24 F0 07 F1 | 	add	ptra, #36
127b0     4A 00 00 FF 
127b4     80 E4 05 F1 | 	add	objptr, ##38016
127b8     F2 16 02 FB | 	rdlong	arg03, objptr
127bc     0B 15 02 F6 | 	mov	arg02, arg03
127c0     01 14 66 F0 | 	shl	arg02, #1
127c4     0B 15 02 F1 | 	add	arg02, arg03
127c8     02 14 66 F0 | 	shl	arg02, #2
127cc     03 00 00 FF 
127d0     04 E4 85 F1 | 	sub	objptr, ##1540
127d4     F2 14 02 F1 | 	add	arg02, objptr
127d8     0A 17 02 FB | 	rdlong	arg03, arg02
127dc     18 4E 05 F1 | 	add	fp, #24
127e0     A7 16 62 FC | 	wrlong	arg03, fp
127e4                 | ' 
127e4                 | ' numpar=compiledline(lineptr_e).result.uresult
127e4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
127e4     18 4E 85 F1 | 	sub	fp, #24
127e8     02 16 0E F2 | 	cmp	arg03, #2 wz
127ec     47 00 00 FF 
127f0     7C E4 85 F1 | 	sub	objptr, ##36476
127f4     40 00 90 AD |  if_e	jmp	#LR__1520
127f8     00 12 06 F6 | 	mov	arg01, #0
127fc     A0 8E B1 FD | 	call	#__system___getiolock_0599
12800     FD 12 02 F6 | 	mov	arg01, result1
12804     70 31 B1 FD | 	call	#__system___lockmem
12808     AE 01 00 FF 
1280c     CE 15 06 F6 | 	mov	arg02, ##@LR__5869
12810     00 12 06 F6 | 	mov	arg01, #0
12814     00 16 06 F6 | 	mov	arg03, #0
12818     50 3E B1 FD | 	call	#__system___basic_print_string
1281c     00 12 06 F6 | 	mov	arg01, #0
12820     7C 8E B1 FD | 	call	#__system___getiolock_0599
12824     FD 00 68 FC | 	wrlong	#0, result1
12828     27 12 06 F6 | 	mov	arg01, #39
1282c     00 14 06 F6 | 	mov	arg02, #0
12830     58 F7 B0 FD | 	call	#_printerror
12834     B4 00 90 FD | 	jmp	#LR__1521
12838                 | LR__1520
12838     44 A4 BF FD | 	call	#_pop
1283c     FD 16 02 F6 | 	mov	arg03, result1
12840     FE 14 02 F6 | 	mov	arg02, result2
12844     FF 12 02 F6 | 	mov	arg01, result3
12848     0C 4E 05 F1 | 	add	fp, #12
1284c     A7 16 62 FC | 	wrlong	arg03, fp
12850     04 4E 05 F1 | 	add	fp, #4
12854     A7 14 62 FC | 	wrlong	arg02, fp
12858     04 4E 05 F1 | 	add	fp, #4
1285c     A7 12 62 FC | 	wrlong	arg01, fp
12860     14 4E 85 F1 | 	sub	fp, #20
12864     18 A4 BF FD | 	call	#_pop
12868     FF 16 02 F6 | 	mov	arg03, result3
1286c     A7 FA 61 FC | 	wrlong	result1, fp
12870     04 4E 05 F1 | 	add	fp, #4
12874     A7 FC 61 FC | 	wrlong	result2, fp
12878     04 4E 05 F1 | 	add	fp, #4
1287c     A7 16 62 FC | 	wrlong	arg03, fp
12880     08 4E 85 F1 | 	sub	fp, #8
12884     A7 12 02 F6 | 	mov	arg01, fp
12888     D8 A5 BF FD | 	call	#_converttoint
1288c     1C 4E 05 F1 | 	add	fp, #28
12890     A7 FA 61 FC | 	wrlong	result1, fp
12894     10 4E 85 F1 | 	sub	fp, #16
12898     A7 12 02 F6 | 	mov	arg01, fp
1289c     0C 4E 85 F1 | 	sub	fp, #12
128a0     C0 A5 BF FD | 	call	#_converttoint
128a4     FD 16 02 F6 | 	mov	arg03, result1
128a8     20 4E 05 F1 | 	add	fp, #32
128ac     A7 16 62 FC | 	wrlong	arg03, fp
128b0     F2 12 02 FB | 	rdlong	arg01, objptr
128b4     04 4E 85 F1 | 	sub	fp, #4
128b8     A7 FE 01 FB | 	rdlong	result3, fp
128bc     FF 12 02 F1 | 	add	arg01, result3
128c0     1C 4E 85 F1 | 	sub	fp, #28
128c4     0A 16 66 F0 | 	shl	arg03, #10
128c8     0B 13 02 F1 | 	add	arg01, arg03
128cc     34 F9 B0 FD | 	call	#_pspeek
128d0     FD FA E1 F8 | 	getbyte	result1, result1, #0
128d4     A7 FA 61 FC | 	wrlong	result1, fp
128d8     08 4E 05 F1 | 	add	fp, #8
128dc     A7 3A 68 FC | 	wrlong	#29, fp
128e0     08 4E 85 F1 | 	sub	fp, #8
128e4     A7 12 02 F6 | 	mov	arg01, fp
128e8     2C A4 BF FD | 	call	#_push
128ec                 | LR__1521
128ec     A7 F0 03 F6 | 	mov	ptra, fp
128f0     B2 00 A0 FD | 	call	#popregs_
128f4                 | _do_getpixel_ret
128f4     2D 00 64 FD | 	ret
128f8                 | 
128f8                 | ' 
128f8                 | ' '-------------------- gettime
128f8                 | ' 
128f8                 | ' sub do_gettime
128f8                 | _do_gettime
128f8     02 4A 05 F6 | 	mov	COUNT_, #2
128fc     A8 00 A0 FD | 	call	#pushregs_
12900     14 F0 07 F1 | 	add	ptra, #20
12904                 | ' 
12904                 | ' const asm 
12904     1A 26 72 FD | 	getct	local01 wc
12908     1A 28 62 FD | 	getct	local02
1290c                 | ' return hi1, lo1
1290c     14 FD 01 F6 | 	mov	result2, local02
12910     A7 26 62 FC | 	wrlong	local01, fp
12914     04 4E 05 F1 | 	add	fp, #4
12918     A7 FC 61 FC | 	wrlong	result2, fp
1291c     0C 4E 05 F1 | 	add	fp, #12
12920     A7 3A 68 FC | 	wrlong	#29, fp
12924     0C 4E 85 F1 | 	sub	fp, #12
12928     A7 12 02 FB | 	rdlong	arg01, fp
1292c     04 4E 05 F1 | 	add	fp, #4
12930     A7 12 62 FC | 	wrlong	arg01, fp
12934     08 4E 85 F1 | 	sub	fp, #8
12938     A7 12 02 FB | 	rdlong	arg01, fp
1293c     0C 4E 05 F1 | 	add	fp, #12
12940     A7 12 62 FC | 	wrlong	arg01, fp
12944     04 4E 85 F1 | 	sub	fp, #4
12948     A7 12 02 F6 | 	mov	arg01, fp
1294c     08 4E 85 F1 | 	sub	fp, #8
12950     C4 A3 BF FD | 	call	#_push
12954     A7 F0 03 F6 | 	mov	ptra, fp
12958     B2 00 A0 FD | 	call	#popregs_
1295c                 | _do_gettime_ret
1295c     2D 00 64 FD | 	ret
12960                 | 
12960                 | ' 
12960                 | ' '-------------------- gosub
12960                 | ' 
12960                 | ' sub do_gosub()
12960                 | _do_gosub
12960     50 00 00 FF 
12964     34 E5 05 F1 | 	add	objptr, ##41268
12968     F2 00 02 FB | 	rdlong	_var01, objptr
1296c     01 00 06 F1 | 	add	_var01, #1
12970     F2 00 62 FC | 	wrlong	_var01, objptr
12974                 | ' gosubtop+=1
12974                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12974     06 00 00 FF 
12978     B4 E4 85 F1 | 	sub	objptr, ##3252
1297c     F2 00 02 FB | 	rdlong	_var01, objptr
12980     01 00 06 F1 | 	add	_var01, #1
12984     00 03 02 F6 | 	mov	_var02, _var01
12988     01 02 66 F0 | 	shl	_var02, #1
1298c     00 03 02 F1 | 	add	_var02, _var01
12990     02 02 66 F0 | 	shl	_var02, #2
12994     03 00 00 FF 
12998     04 E4 85 F1 | 	sub	objptr, ##1540
1299c     F2 02 02 F1 | 	add	_var02, objptr
129a0     08 02 06 F1 | 	add	_var02, #8
129a4     01 03 02 FB | 	rdlong	_var02, _var02
129a8     FE 03 0E F2 | 	cmp	_var02, #510 wz
129ac     47 00 00 FF 
129b0     7C E4 85 F1 | 	sub	objptr, ##36476
129b4     58 00 90 5D |  if_ne	jmp	#LR__1530
129b8     50 00 00 FF 
129bc     34 E5 05 F1 | 	add	objptr, ##41268
129c0     F2 02 02 FB | 	rdlong	_var02, objptr
129c4     03 02 66 F0 | 	shl	_var02, #3
129c8     03 00 00 FF 
129cc     88 E5 85 F1 | 	sub	objptr, ##1928
129d0     F2 02 02 F1 | 	add	_var02, objptr
129d4     03 00 00 FF 
129d8     0C E5 05 F1 | 	add	objptr, ##1804
129dc     F2 00 02 FB | 	rdlong	_var01, objptr
129e0     01 01 62 FC | 	wrlong	_var01, _var02
129e4     7C E4 05 F1 | 	add	objptr, #124
129e8     F2 02 02 FB | 	rdlong	_var02, objptr
129ec     03 02 66 F0 | 	shl	_var02, #3
129f0     03 00 00 FF 
129f4     88 E5 85 F1 | 	sub	objptr, ##1928
129f8     F2 02 02 F1 | 	add	_var02, objptr
129fc     04 02 06 F1 | 	add	_var02, #4
12a00     01 01 68 FC | 	wrlong	#0, _var02
12a04     4C 00 00 FF 
12a08     AC E5 85 F1 | 	sub	objptr, ##39340
12a0c     64 00 90 FD | 	jmp	#LR__1531
12a10                 | LR__1530
12a10     50 00 00 FF 
12a14     34 E5 05 F1 | 	add	objptr, ##41268
12a18     F2 02 02 FB | 	rdlong	_var02, objptr
12a1c     03 02 66 F0 | 	shl	_var02, #3
12a20     03 00 00 FF 
12a24     88 E5 85 F1 | 	sub	objptr, ##1928
12a28     F2 02 02 F1 | 	add	_var02, objptr
12a2c     03 00 00 FF 
12a30     14 E5 05 F1 | 	add	objptr, ##1812
12a34     F2 00 02 FB | 	rdlong	_var01, objptr
12a38     01 01 62 FC | 	wrlong	_var01, _var02
12a3c     74 E4 05 F1 | 	add	objptr, #116
12a40     F2 02 02 FB | 	rdlong	_var02, objptr
12a44     03 02 66 F0 | 	shl	_var02, #3
12a48     03 00 00 FF 
12a4c     88 E5 85 F1 | 	sub	objptr, ##1928
12a50     F2 02 02 F1 | 	add	_var02, objptr
12a54     02 00 00 FF 
12a58     2C E5 85 F1 | 	sub	objptr, ##1324
12a5c     F2 00 02 FB | 	rdlong	_var01, objptr
12a60     4A 00 00 FF 
12a64     80 E4 85 F1 | 	sub	objptr, ##38016
12a68     02 00 06 F1 | 	add	_var01, #2
12a6c     04 02 06 F1 | 	add	_var02, #4
12a70     01 01 62 FC | 	wrlong	_var01, _var02
12a74                 | LR__1531
12a74                 | _do_gosub_ret
12a74     2D 00 64 FD | 	ret
12a78                 | 
12a78                 | ' 
12a78                 | ' '--------------------- goto
12a78                 | ' 
12a78                 | ' '------- fast goto
12a78                 | ' 
12a78                 | ' sub do_fast_goto
12a78                 | _do_fast_goto
12a78     02 4A 05 F6 | 	mov	COUNT_, #2
12a7c     A8 00 A0 FD | 	call	#pushregs_
12a80                 | _do_fast_goto_enter
12a80     4A 00 00 FF 
12a84     80 E4 05 F1 | 	add	objptr, ##38016
12a88     F2 12 02 FB | 	rdlong	arg01, objptr
12a8c     09 27 02 F6 | 	mov	local01, arg01
12a90     01 26 66 F0 | 	shl	local01, #1
12a94     09 27 02 F1 | 	add	local01, arg01
12a98     02 26 66 F0 | 	shl	local01, #2
12a9c     03 00 00 FF 
12aa0     04 E4 85 F1 | 	sub	objptr, ##1540
12aa4     F2 26 02 F1 | 	add	local01, objptr
12aa8     13 29 02 FB | 	rdlong	local02, local01
12aac     14 13 02 F6 | 	mov	arg01, local02
12ab0     47 00 00 FF 
12ab4     7C E4 85 F1 | 	sub	objptr, ##36476
12ab8     A0 F7 B0 FD | 	call	#_pslpeek
12abc     FD 12 02 F6 | 	mov	arg01, result1
12ac0                 | ' 
12ac0                 | ' testptr=compiledline(lineptr_e).result.uresult
12ac0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12ac0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12ac0     4A 00 00 FF 
12ac4     80 E4 05 F1 | 	add	objptr, ##38016
12ac8     F2 FA 01 FB | 	rdlong	result1, objptr
12acc     FD 26 02 F6 | 	mov	local01, result1
12ad0     01 26 66 F0 | 	shl	local01, #1
12ad4     FD 26 02 F1 | 	add	local01, result1
12ad8     02 26 66 F0 | 	shl	local01, #2
12adc     03 00 00 FF 
12ae0     04 E4 85 F1 | 	sub	objptr, ##1540
12ae4     F2 26 02 F1 | 	add	local01, objptr
12ae8     04 26 06 F1 | 	add	local01, #4
12aec     13 27 02 FB | 	rdlong	local01, local01
12af0     13 13 0A F2 | 	cmp	arg01, local01 wz
12af4     47 00 00 FF 
12af8     7C E4 85 F1 | 	sub	objptr, ##36476
12afc     58 00 90 5D |  if_ne	jmp	#LR__1540
12b00     50 00 00 FF 
12b04     B8 E4 05 F1 | 	add	objptr, ##41144
12b08     F2 28 62 FC | 	wrlong	local02, objptr
12b0c     06 00 00 FF 
12b10     3C E4 85 F1 | 	sub	objptr, ##3132
12b14     F2 28 02 FB | 	rdlong	local02, objptr
12b18     01 28 86 F1 | 	sub	local02, #1
12b1c     04 E4 05 F1 | 	add	objptr, #4
12b20     F2 28 62 FC | 	wrlong	local02, objptr
12b24                 | '   runptr=testptr
12b24                 | '   lineptr_e=lineptr-1
12b24                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12b24     06 00 00 FF 
12b28     84 E4 05 F1 | 	add	objptr, ##3204
12b2c     F2 28 02 FB | 	rdlong	local02, objptr
12b30     50 00 00 FF 
12b34     04 E5 85 F1 | 	sub	objptr, ##41220
12b38     FF FF 3F FF 
12b3c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12b40     50 00 00 AF 
12b44     04 E5 05 A1 |  if_e	add	objptr, ##41220
12b48     F2 00 68 AC |  if_e	wrlong	#0, objptr
12b4c     50 00 00 AF 
12b50     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12b54     04 00 90 FD | 	jmp	#LR__1541
12b58                 | LR__1540
12b58     0C 00 B0 FD | 	call	#_do_find_goto
12b5c                 | LR__1541
12b5c     A7 F0 03 F6 | 	mov	ptra, fp
12b60     B2 00 A0 FD | 	call	#popregs_
12b64                 | _do_fast_goto_ret
12b64     2D 00 64 FD | 	ret
12b68                 | 
12b68                 | ' 
12b68                 | ' '------- find goto  
12b68                 | ' 
12b68                 | ' sub do_find_goto
12b68                 | _do_find_goto
12b68     03 4A 05 F6 | 	mov	COUNT_, #3
12b6c     A8 00 A0 FD | 	call	#pushregs_
12b70     24 F0 07 F1 | 	add	ptra, #36
12b74                 | _do_find_goto_enter
12b74     4A 00 00 FF 
12b78     80 E4 05 F1 | 	add	objptr, ##38016
12b7c     F2 26 02 FB | 	rdlong	local01, objptr
12b80     13 29 02 F6 | 	mov	local02, local01
12b84     01 28 66 F0 | 	shl	local02, #1
12b88     13 29 02 F1 | 	add	local02, local01
12b8c     02 28 66 F0 | 	shl	local02, #2
12b90     03 00 00 FF 
12b94     04 E4 85 F1 | 	sub	objptr, ##1540
12b98     F2 28 02 F1 | 	add	local02, objptr
12b9c     04 28 06 F1 | 	add	local02, #4
12ba0     14 29 02 FB | 	rdlong	local02, local02
12ba4     A7 28 62 FC | 	wrlong	local02, fp
12ba8     03 00 00 FF 
12bac     0C E4 05 F1 | 	add	objptr, ##1548
12bb0     F2 2A 02 FB | 	rdlong	local03, objptr
12bb4     4A 00 00 FF 
12bb8     88 E4 85 F1 | 	sub	objptr, ##38024
12bbc     04 4E 05 F1 | 	add	fp, #4
12bc0     A7 2A 62 FC | 	wrlong	local03, fp
12bc4     04 4E 85 F1 | 	sub	fp, #4
12bc8                 | ' 
12bc8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12bc8                 | ' gotoptr=programstart
12bc8                 | ' do
12bc8                 | LR__1550
12bc8     0C 4E 05 F1 | 	add	fp, #12
12bcc     A7 12 02 F6 | 	mov	arg01, fp
12bd0     08 4E 85 F1 | 	sub	fp, #8
12bd4     A7 14 02 FB | 	rdlong	arg02, fp
12bd8     04 4E 85 F1 | 	sub	fp, #4
12bdc     18 16 06 F6 | 	mov	arg03, #24
12be0     0B 00 00 FF 
12be4     CC E4 05 F1 | 	add	objptr, ##5836
12be8     04 21 B1 FD | 	call	#_psram_spin2_read1
12bec     0B 00 00 FF 
12bf0     CC E4 85 F1 | 	sub	objptr, ##5836
12bf4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12bf4                 | '   if gotoheader(0)<>$FFFFFFFF then
12bf4     0C 4E 05 F1 | 	add	fp, #12
12bf8     A7 2A 02 FB | 	rdlong	local03, fp
12bfc     0C 4E 85 F1 | 	sub	fp, #12
12c00     FF FF 7F FF 
12c04     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
12c08     24 00 90 AD |  if_e	jmp	#LR__1551
12c0c     04 4E 05 F1 | 	add	fp, #4
12c10     A7 2A 02 FB | 	rdlong	local03, fp
12c14     04 4E 05 F1 | 	add	fp, #4
12c18     A7 2A 62 FC | 	wrlong	local03, fp
12c1c     18 4E 05 F1 | 	add	fp, #24
12c20     A7 2A 02 FB | 	rdlong	local03, fp
12c24     1C 4E 85 F1 | 	sub	fp, #28
12c28     A7 2A 62 FC | 	wrlong	local03, fp
12c2c     04 4E 85 F1 | 	sub	fp, #4
12c30                 | LR__1551
12c30     20 4E 05 F1 | 	add	fp, #32
12c34     A7 2A 02 FB | 	rdlong	local03, fp
12c38     20 4E 85 F1 | 	sub	fp, #32
12c3c     FF FF 3F FF 
12c40     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
12c44     0C 4E 05 51 |  if_ne	add	fp, #12
12c48     A7 26 02 5B |  if_ne	rdlong	local01, fp
12c4c     0C 4E 85 51 |  if_ne	sub	fp, #12
12c50     FF FF 7F 5F 
12c54     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12c58     18 00 90 AD |  if_e	jmp	#LR__1552
12c5c     0C 4E 05 F1 | 	add	fp, #12
12c60     A7 2A 02 FB | 	rdlong	local03, fp
12c64     0C 4E 85 F1 | 	sub	fp, #12
12c68     A7 28 02 FB | 	rdlong	local02, fp
12c6c     14 2B 0A F2 | 	cmp	local03, local02 wz
12c70     54 FF 9F 5D |  if_ne	jmp	#LR__1550
12c74                 | LR__1552
12c74                 | ' 
12c74                 | ' if gotoheader(0)=gotoline then
12c74     0C 4E 05 F1 | 	add	fp, #12
12c78     A7 2A 02 FB | 	rdlong	local03, fp
12c7c     0C 4E 85 F1 | 	sub	fp, #12
12c80     A7 26 02 FB | 	rdlong	local01, fp
12c84     13 2B 0A F2 | 	cmp	local03, local01 wz
12c88     D8 00 90 5D |  if_ne	jmp	#LR__1553
12c8c     4A 00 00 FF 
12c90     80 E4 05 F1 | 	add	objptr, ##38016
12c94     F2 26 02 FB | 	rdlong	local01, objptr
12c98     13 29 02 F6 | 	mov	local02, local01
12c9c     01 28 66 F0 | 	shl	local02, #1
12ca0     13 29 02 F1 | 	add	local02, local01
12ca4     02 28 66 F0 | 	shl	local02, #2
12ca8     03 00 00 FF 
12cac     04 E4 85 F1 | 	sub	objptr, ##1540
12cb0     F2 28 02 F1 | 	add	local02, objptr
12cb4     08 4E 05 F1 | 	add	fp, #8
12cb8     A7 2A 02 FB | 	rdlong	local03, fp
12cbc     14 2B 62 FC | 	wrlong	local03, local02
12cc0     03 00 00 FF 
12cc4     04 E4 05 F1 | 	add	objptr, ##1540
12cc8     F2 26 02 FB | 	rdlong	local01, objptr
12ccc     13 29 02 F6 | 	mov	local02, local01
12cd0     01 28 66 F0 | 	shl	local02, #1
12cd4     13 29 02 F1 | 	add	local02, local01
12cd8     02 28 66 F0 | 	shl	local02, #2
12cdc     03 00 00 FF 
12ce0     04 E4 85 F1 | 	sub	objptr, ##1540
12ce4     F2 28 02 F1 | 	add	local02, objptr
12ce8     08 28 06 F1 | 	add	local02, #8
12cec     14 9D 68 FC | 	wrlong	#78, local02
12cf0     03 00 00 FF 
12cf4     04 E4 05 F1 | 	add	objptr, ##1540
12cf8     F2 28 02 FB | 	rdlong	local02, objptr
12cfc     14 13 02 F6 | 	mov	arg01, local02
12d00     01 12 66 F0 | 	shl	arg01, #1
12d04     14 13 02 F1 | 	add	arg01, local02
12d08     02 12 66 F0 | 	shl	arg01, #2
12d0c     03 00 00 FF 
12d10     04 E4 85 F1 | 	sub	objptr, ##1540
12d14     F2 12 02 F1 | 	add	arg01, objptr
12d18     09 00 00 FF 
12d1c     44 E4 05 F1 | 	add	objptr, ##4676
12d20     F2 14 02 FB | 	rdlong	arg02, objptr
12d24     02 2A 06 F6 | 	mov	local03, #2
12d28     14 2B 02 F1 | 	add	local03, local02
12d2c     0B 00 00 FF 
12d30     5C E4 85 F1 | 	sub	objptr, ##5724
12d34     F2 16 02 FB | 	rdlong	arg03, objptr
12d38     0B 2B 02 FD | 	qmul	local03, arg03
12d3c     08 4E 85 F1 | 	sub	fp, #8
12d40     39 00 00 FF 
12d44     98 E5 85 F1 | 	sub	objptr, ##29592
12d48     18 2A 62 FD | 	getqx	local03
12d4c     15 15 02 F1 | 	add	arg02, local03
12d50     38 20 B1 FD | 	call	#_psram_spin2_write
12d54     0B 00 00 FF 
12d58     CC E4 85 F1 | 	sub	objptr, ##5836
12d5c     18 FD BF FD | 	call	#_do_fast_goto
12d60     0C 00 90 FD | 	jmp	#LR__1554
12d64                 | LR__1553
12d64     26 12 06 F6 | 	mov	arg01, #38
12d68     00 14 06 F6 | 	mov	arg02, #0
12d6c     1C F2 B0 FD | 	call	#_printerror
12d70                 | LR__1554
12d70     A7 F0 03 F6 | 	mov	ptra, fp
12d74     B2 00 A0 FD | 	call	#popregs_
12d78                 | _do_find_goto_ret
12d78     2D 00 64 FD | 	ret
12d7c                 | 
12d7c                 | ' 
12d7c                 | ' '------- slow goto  
12d7c                 | ' 
12d7c                 | ' sub do_slow_goto
12d7c                 | _do_slow_goto
12d7c     02 4A 05 F6 | 	mov	COUNT_, #2
12d80     A8 00 A0 FD | 	call	#pushregs_
12d84     30 F0 07 F1 | 	add	ptra, #48
12d88     F4 9E BF FD | 	call	#_pop
12d8c     FF 26 02 F6 | 	mov	local01, result3
12d90     24 4E 05 F1 | 	add	fp, #36
12d94     A7 FA 61 FC | 	wrlong	result1, fp
12d98     04 4E 05 F1 | 	add	fp, #4
12d9c     A7 FC 61 FC | 	wrlong	result2, fp
12da0     04 4E 05 F1 | 	add	fp, #4
12da4     A7 26 62 FC | 	wrlong	local01, fp
12da8     08 4E 85 F1 | 	sub	fp, #8
12dac     A7 12 02 F6 | 	mov	arg01, fp
12db0     24 4E 85 F1 | 	sub	fp, #36
12db4     AC A0 BF FD | 	call	#_converttoint
12db8     A7 FA 61 FC | 	wrlong	result1, fp
12dbc     4A 00 00 FF 
12dc0     88 E4 05 F1 | 	add	objptr, ##38024
12dc4     F2 28 02 FB | 	rdlong	local02, objptr
12dc8     4A 00 00 FF 
12dcc     88 E4 85 F1 | 	sub	objptr, ##38024
12dd0     04 4E 05 F1 | 	add	fp, #4
12dd4     A7 28 62 FC | 	wrlong	local02, fp
12dd8     04 4E 85 F1 | 	sub	fp, #4
12ddc                 | ' 
12ddc                 | ' t1=pop() : gotoline=converttoint(t1)
12ddc                 | ' gotoptr=programstart
12ddc                 | ' do
12ddc                 | LR__1560
12ddc     0C 4E 05 F1 | 	add	fp, #12
12de0     A7 12 02 F6 | 	mov	arg01, fp
12de4     08 4E 85 F1 | 	sub	fp, #8
12de8     A7 14 02 FB | 	rdlong	arg02, fp
12dec     04 4E 85 F1 | 	sub	fp, #4
12df0     18 16 06 F6 | 	mov	arg03, #24
12df4     0B 00 00 FF 
12df8     CC E4 05 F1 | 	add	objptr, ##5836
12dfc     F0 1E B1 FD | 	call	#_psram_spin2_read1
12e00     0B 00 00 FF 
12e04     CC E4 85 F1 | 	sub	objptr, ##5836
12e08                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12e08                 | '   if gotoheader(0)<>$FFFFFFFF then
12e08     0C 4E 05 F1 | 	add	fp, #12
12e0c     A7 28 02 FB | 	rdlong	local02, fp
12e10     0C 4E 85 F1 | 	sub	fp, #12
12e14     FF FF 7F FF 
12e18     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12e1c     24 00 90 AD |  if_e	jmp	#LR__1561
12e20     04 4E 05 F1 | 	add	fp, #4
12e24     A7 28 02 FB | 	rdlong	local02, fp
12e28     04 4E 05 F1 | 	add	fp, #4
12e2c     A7 28 62 FC | 	wrlong	local02, fp
12e30     18 4E 05 F1 | 	add	fp, #24
12e34     A7 28 02 FB | 	rdlong	local02, fp
12e38     1C 4E 85 F1 | 	sub	fp, #28
12e3c     A7 28 62 FC | 	wrlong	local02, fp
12e40     04 4E 85 F1 | 	sub	fp, #4
12e44                 | LR__1561
12e44     20 4E 05 F1 | 	add	fp, #32
12e48     A7 28 02 FB | 	rdlong	local02, fp
12e4c     20 4E 85 F1 | 	sub	fp, #32
12e50     FF FF 3F FF 
12e54     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12e58     0C 4E 05 51 |  if_ne	add	fp, #12
12e5c     A7 26 02 5B |  if_ne	rdlong	local01, fp
12e60     0C 4E 85 51 |  if_ne	sub	fp, #12
12e64     FF FF 7F 5F 
12e68     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12e6c     18 00 90 AD |  if_e	jmp	#LR__1562
12e70     0C 4E 05 F1 | 	add	fp, #12
12e74     A7 28 02 FB | 	rdlong	local02, fp
12e78     0C 4E 85 F1 | 	sub	fp, #12
12e7c     A7 16 02 FB | 	rdlong	arg03, fp
12e80     0B 29 0A F2 | 	cmp	local02, arg03 wz
12e84     54 FF 9F 5D |  if_ne	jmp	#LR__1560
12e88                 | LR__1562
12e88                 | ' if gotoheader(0)=gotoline then  
12e88     0C 4E 05 F1 | 	add	fp, #12
12e8c     A7 28 02 FB | 	rdlong	local02, fp
12e90     0C 4E 85 F1 | 	sub	fp, #12
12e94     A7 26 02 FB | 	rdlong	local01, fp
12e98     13 29 0A F2 | 	cmp	local02, local01 wz
12e9c     60 00 90 5D |  if_ne	jmp	#LR__1563
12ea0     08 4E 05 F1 | 	add	fp, #8
12ea4     A7 28 02 FB | 	rdlong	local02, fp
12ea8     08 4E 85 F1 | 	sub	fp, #8
12eac     50 00 00 FF 
12eb0     B8 E4 05 F1 | 	add	objptr, ##41144
12eb4     F2 28 62 FC | 	wrlong	local02, objptr
12eb8     06 00 00 FF 
12ebc     3C E4 85 F1 | 	sub	objptr, ##3132
12ec0     F2 28 02 FB | 	rdlong	local02, objptr
12ec4     01 28 86 F1 | 	sub	local02, #1
12ec8     04 E4 05 F1 | 	add	objptr, #4
12ecc     F2 28 62 FC | 	wrlong	local02, objptr
12ed0                 | '    runptr=oldgotoptr
12ed0                 | '    lineptr_e=lineptr-1
12ed0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
12ed0     06 00 00 FF 
12ed4     84 E4 05 F1 | 	add	objptr, ##3204
12ed8     F2 28 02 FB | 	rdlong	local02, objptr
12edc     50 00 00 FF 
12ee0     04 E5 85 F1 | 	sub	objptr, ##41220
12ee4     FF FF 3F FF 
12ee8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12eec     50 00 00 AF 
12ef0     04 E5 05 A1 |  if_e	add	objptr, ##41220
12ef4     F2 00 68 AC |  if_e	wrlong	#0, objptr
12ef8     50 00 00 AF 
12efc     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12f00                 | LR__1563
12f00     A7 F0 03 F6 | 	mov	ptra, fp
12f04     B2 00 A0 FD | 	call	#popregs_
12f08                 | _do_slow_goto_ret
12f08     2D 00 64 FD | 	ret
12f0c                 | 
12f0c                 | ' 
12f0c                 | ' ' ----------------  hex$
12f0c                 | ' 
12f0c                 | ' sub do_hex
12f0c                 | _do_hex
12f0c     01 4A 05 F6 | 	mov	COUNT_, #1
12f10     A8 00 A0 FD | 	call	#pushregs_
12f14     18 F0 07 F1 | 	add	ptra, #24
12f18     4A 00 00 FF 
12f1c     80 E4 05 F1 | 	add	objptr, ##38016
12f20     F2 26 02 FB | 	rdlong	local01, objptr
12f24     13 17 02 F6 | 	mov	arg03, local01
12f28     01 16 66 F0 | 	shl	arg03, #1
12f2c     13 17 02 F1 | 	add	arg03, local01
12f30     02 16 66 F0 | 	shl	arg03, #2
12f34     03 00 00 FF 
12f38     04 E4 85 F1 | 	sub	objptr, ##1540
12f3c     F2 16 02 F1 | 	add	arg03, objptr
12f40     0B 17 02 FB | 	rdlong	arg03, arg03
12f44     0C 4E 05 F1 | 	add	fp, #12
12f48     A7 16 62 FC | 	wrlong	arg03, fp
12f4c                 | ' 
12f4c                 | ' numpar=compiledline(lineptr_e).result.uresult
12f4c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
12f4c     0C 4E 85 F1 | 	sub	fp, #12
12f50     03 16 16 F2 | 	cmp	arg03, #3 wc
12f54     47 00 00 FF 
12f58     7C E4 85 F1 | 	sub	objptr, ##36476
12f5c     0C 4E 05 C1 |  if_b	add	fp, #12
12f60     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12f64     0C 4E 85 C1 |  if_b	sub	fp, #12
12f68     40 00 90 4D |  if_c_and_nz	jmp	#LR__1570
12f6c     00 12 06 F6 | 	mov	arg01, #0
12f70     2C 87 B1 FD | 	call	#__system___getiolock_0599
12f74     FD 12 02 F6 | 	mov	arg01, result1
12f78     FC 29 B1 FD | 	call	#__system___lockmem
12f7c     AE 01 00 FF 
12f80     D9 15 06 F6 | 	mov	arg02, ##@LR__5870
12f84     00 12 06 F6 | 	mov	arg01, #0
12f88     00 16 06 F6 | 	mov	arg03, #0
12f8c     DC 36 B1 FD | 	call	#__system___basic_print_string
12f90     00 12 06 F6 | 	mov	arg01, #0
12f94     08 87 B1 FD | 	call	#__system___getiolock_0599
12f98     FD 00 68 FC | 	wrlong	#0, result1
12f9c     27 12 06 F6 | 	mov	arg01, #39
12fa0     00 14 06 F6 | 	mov	arg02, #0
12fa4     E4 EF B0 FD | 	call	#_printerror
12fa8     B8 00 90 FD | 	jmp	#LR__1573
12fac                 | LR__1570
12fac                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12fac     0C 4E 05 F1 | 	add	fp, #12
12fb0     A7 26 02 FB | 	rdlong	local01, fp
12fb4     0C 4E 85 F1 | 	sub	fp, #12
12fb8     02 26 0E F2 | 	cmp	local01, #2 wz
12fbc     38 00 90 5D |  if_ne	jmp	#LR__1571
12fc0     BC 9C BF FD | 	call	#_pop
12fc4     FF 26 02 F6 | 	mov	local01, result3
12fc8     A7 FA 61 FC | 	wrlong	result1, fp
12fcc     04 4E 05 F1 | 	add	fp, #4
12fd0     A7 FC 61 FC | 	wrlong	result2, fp
12fd4     04 4E 05 F1 | 	add	fp, #4
12fd8     A7 26 62 FC | 	wrlong	local01, fp
12fdc     08 4E 85 F1 | 	sub	fp, #8
12fe0     A7 12 02 F6 | 	mov	arg01, fp
12fe4     7C 9E BF FD | 	call	#_converttoint
12fe8     14 4E 05 F1 | 	add	fp, #20
12fec     A7 FA 61 FC | 	wrlong	result1, fp
12ff0     14 4E 85 F1 | 	sub	fp, #20
12ff4     0C 00 90 FD | 	jmp	#LR__1572
12ff8                 | LR__1571
12ff8     14 4E 05 F1 | 	add	fp, #20
12ffc     A7 10 68 FC | 	wrlong	#8, fp
13000     14 4E 85 F1 | 	sub	fp, #20
13004                 | LR__1572
13004     78 9C BF FD | 	call	#_pop
13008     FF 26 02 F6 | 	mov	local01, result3
1300c     A7 FA 61 FC | 	wrlong	result1, fp
13010     04 4E 05 F1 | 	add	fp, #4
13014     A7 FC 61 FC | 	wrlong	result2, fp
13018     04 4E 05 F1 | 	add	fp, #4
1301c     A7 26 62 FC | 	wrlong	local01, fp
13020     08 4E 85 F1 | 	sub	fp, #8
13024     A7 12 02 F6 | 	mov	arg01, fp
13028     38 9E BF FD | 	call	#_converttoint
1302c     10 4E 05 F1 | 	add	fp, #16
13030     A7 FA 61 FC | 	wrlong	result1, fp
13034     FD 12 02 F6 | 	mov	arg01, result1
13038     04 4E 05 F1 | 	add	fp, #4
1303c     A7 14 02 FB | 	rdlong	arg02, fp
13040     14 4E 85 F1 | 	sub	fp, #20
13044     10 16 06 F6 | 	mov	arg03, #16
13048     FC 4B B1 FD | 	call	#__system__Number_S
1304c     A7 FA 61 FC | 	wrlong	result1, fp
13050     08 4E 05 F1 | 	add	fp, #8
13054     A7 3E 68 FC | 	wrlong	#31, fp
13058     08 4E 85 F1 | 	sub	fp, #8
1305c     A7 12 02 F6 | 	mov	arg01, fp
13060     B4 9C BF FD | 	call	#_push
13064                 | LR__1573
13064     A7 F0 03 F6 | 	mov	ptra, fp
13068     B2 00 A0 FD | 	call	#popregs_
1306c                 | _do_hex_ret
1306c     2D 00 64 FD | 	ret
13070                 | 
13070                 | ' 
13070                 | ' ' ----------------  if
13070                 | ' 
13070                 | ' sub do_if
13070                 | _do_if
13070     05 4A 05 F6 | 	mov	COUNT_, #5
13074     A8 00 A0 FD | 	call	#pushregs_
13078     04 9C BF FD | 	call	#_pop
1307c     FD 26 0A F6 | 	mov	local01, result1 wz
13080     FE 28 02 F6 | 	mov	local02, result2
13084     FF 2A 02 F6 | 	mov	local03, result3
13088                 | ' t1=pop()
13088                 | ' ' if uresult=0, jump over else
13088                 | ' if t1.result.uresult = 0 then 
13088     BC 00 90 5D |  if_ne	jmp	#LR__1582
1308c                 | '   for i=lineptr_e to lineptr-1
1308c     4A 00 00 FF 
13090     80 E4 05 F1 | 	add	objptr, ##38016
13094     F2 2C 02 FB | 	rdlong	local04, objptr
13098     04 E4 85 F1 | 	sub	objptr, #4
1309c     F2 2E 02 FB | 	rdlong	local05, objptr
130a0     4A 00 00 FF 
130a4     7C E4 85 F1 | 	sub	objptr, ##38012
130a8                 | LR__1580
130a8     17 2D 52 F2 | 	cmps	local04, local05 wc
130ac     78 00 90 3D |  if_ae	jmp	#LR__1581
130b0     16 FF 01 F6 | 	mov	result3, local04
130b4     01 FE 65 F0 | 	shl	result3, #1
130b8     16 FF 01 F1 | 	add	result3, local04
130bc     02 FE 65 F0 | 	shl	result3, #2
130c0     47 00 00 FF 
130c4     7C E4 05 F1 | 	add	objptr, ##36476
130c8     F2 FE 01 F1 | 	add	result3, objptr
130cc     FF 26 02 FB | 	rdlong	local01, result3
130d0     04 FE 05 F1 | 	add	result3, #4
130d4     FF FC 01 FB | 	rdlong	result2, result3
130d8     16 FF 01 F6 | 	mov	result3, local04
130dc     01 FE 65 F0 | 	shl	result3, #1
130e0     16 FF 01 F1 | 	add	result3, local04
130e4     02 FE 65 F0 | 	shl	result3, #2
130e8     F2 FE 01 F1 | 	add	result3, objptr
130ec     08 FE 05 F1 | 	add	result3, #8
130f0     FF FE 01 FB | 	rdlong	result3, result3
130f4     FE 28 02 F6 | 	mov	local02, result2
130f8     FF 2A 02 F6 | 	mov	local03, result3
130fc                 | '     t1=compiledline(i)
130fc                 | '     if t1.result_type=token_else then lineptr_e=i : return
130fc     5A 2A 0E F2 | 	cmp	local03, #90 wz
13100     47 00 00 FF 
13104     7C E4 85 F1 | 	sub	objptr, ##36476
13108     4A 00 00 AF 
1310c     80 E4 05 A1 |  if_e	add	objptr, ##38016
13110     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13114     4A 00 00 AF 
13118     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1311c     28 00 90 AD |  if_e	jmp	#LR__1583
13120     01 2C 06 F1 | 	add	local04, #1
13124     80 FF 9F FD | 	jmp	#LR__1580
13128                 | LR__1581
13128     4A 00 00 FF 
1312c     7C E4 05 F1 | 	add	objptr, ##38012
13130     F2 2E 02 FB | 	rdlong	local05, objptr
13134     01 2E 86 F1 | 	sub	local05, #1
13138     04 E4 05 F1 | 	add	objptr, #4
1313c     F2 2E 62 FC | 	wrlong	local05, objptr
13140     4A 00 00 FF 
13144     80 E4 85 F1 | 	sub	objptr, ##38016
13148                 | LR__1582
13148                 | LR__1583
13148     A7 F0 03 F6 | 	mov	ptra, fp
1314c     B2 00 A0 FD | 	call	#popregs_
13150                 | _do_if_ret
13150     2D 00 64 FD | 	ret
13154                 | 
13154                 | ' 
13154                 | ' ' ----------------  inkey$
13154                 | ' 
13154                 | ' sub do_inkey
13154                 | _do_inkey
13154     02 4A 05 F6 | 	mov	COUNT_, #2
13158     A8 00 A0 FD | 	call	#pushregs_
1315c     0C F0 07 F1 | 	add	ptra, #12
13160     B8 1F B1 FD | 	call	#_usbnew_spin2_get_key
13164     45 00 00 FF 
13168     74 E4 05 F1 | 	add	objptr, ##35444
1316c     F2 FA 61 FC | 	wrlong	result1, objptr
13170                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13170     45 00 00 FF 
13174     74 E4 85 F1 | 	sub	objptr, ##35444
13178     00 FA 0D F2 | 	cmp	result1, #0 wz
1317c     94 00 90 AD |  if_e	jmp	#LR__1591
13180     45 00 00 FF 
13184     74 E4 05 F1 | 	add	objptr, ##35444
13188     F2 1C 02 FB | 	rdlong	arg06, objptr
1318c     45 00 00 FF 
13190     74 E4 85 F1 | 	sub	objptr, ##35444
13194     00 00 40 FF 
13198     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
1319c     45 00 00 CF 
131a0     74 E4 05 C1 |  if_b	add	objptr, ##35444
131a4     F2 26 02 CB |  if_b	rdlong	local01, objptr
131a8     45 00 00 CF 
131ac     74 E4 85 C1 |  if_b	sub	objptr, ##35444
131b0     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
131b4     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
131b8     58 00 90 3D |  if_ae	jmp	#LR__1591
131bc                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
131bc     50 00 00 FF 
131c0     3C E5 05 F1 | 	add	objptr, ##41276
131c4     F2 1C 02 FB | 	rdlong	arg06, objptr
131c8     50 00 00 FF 
131cc     3C E5 85 F1 | 	sub	objptr, ##41276
131d0     01 1C 0E F2 | 	cmp	arg06, #1 wz
131d4     3C 00 90 5D |  if_ne	jmp	#LR__1590
131d8     52 00 00 FF 
131dc     50 E4 05 F1 | 	add	objptr, ##42064
131e0     F2 14 02 FB | 	rdlong	arg02, objptr
131e4     04 E4 85 F1 | 	sub	objptr, #4
131e8     F2 1A 02 FB | 	rdlong	arg05, objptr
131ec     07 12 06 F6 | 	mov	arg01, #7
131f0     56 00 00 FF 
131f4     44 16 06 F6 | 	mov	arg03, ##44100
131f8     0C 18 C6 F9 | 	decod	arg04, #12
131fc     01 1C 66 F6 | 	neg	arg06, #1
13200     46 00 00 FF 
13204     80 E5 85 F1 | 	sub	objptr, ##36224
13208     FC 22 B1 FD | 	call	#_audio096_spin2_play
1320c     0B 00 00 FF 
13210     CC E4 85 F1 | 	sub	objptr, ##5836
13214                 | LR__1590
13214                 | LR__1591
13214                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13214     45 00 00 FF 
13218     74 E4 05 F1 | 	add	objptr, ##35444
1321c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
13220     45 00 00 FF 
13224     74 E4 85 F1 | 	sub	objptr, ##35444
13228     D4 01 90 AD |  if_e	jmp	#LR__1600
1322c     45 00 00 FF 
13230     74 E4 05 F1 | 	add	objptr, ##35444
13234     F2 1C 02 FB | 	rdlong	arg06, objptr
13238     45 00 00 FF 
1323c     74 E4 85 F1 | 	sub	objptr, ##35444
13240     00 00 40 FF 
13244     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13248     45 00 00 CF 
1324c     74 E4 05 C1 |  if_b	add	objptr, ##35444
13250     F2 26 02 CB |  if_b	rdlong	local01, objptr
13254     45 00 00 CF 
13258     74 E4 85 C1 |  if_b	sub	objptr, ##35444
1325c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13260     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13264     98 01 90 3D |  if_ae	jmp	#LR__1600
13268                 | '   if leds and 2 = 2 then 
13268     52 00 00 FF 
1326c     8C E4 05 F1 | 	add	objptr, ##42124
13270     F2 26 0A FB | 	rdlong	local01, objptr wz
13274     52 00 00 FF 
13278     8C E4 85 F1 | 	sub	objptr, ##42124
1327c     58 01 90 AD |  if_e	jmp	#LR__1599
13280                 | '     if key>96 andalso key<123 then
13280     45 00 00 FF 
13284     74 E4 05 F1 | 	add	objptr, ##35444
13288     F2 26 02 FB | 	rdlong	local01, objptr
1328c     45 00 00 FF 
13290     74 E4 85 F1 | 	sub	objptr, ##35444
13294     61 26 16 F2 | 	cmp	local01, #97 wc
13298     3C 00 90 CD |  if_b	jmp	#LR__1592
1329c     45 00 00 FF 
132a0     74 E4 05 F1 | 	add	objptr, ##35444
132a4     F2 26 02 FB | 	rdlong	local01, objptr
132a8     45 00 00 FF 
132ac     74 E4 85 F1 | 	sub	objptr, ##35444
132b0     7B 26 16 F2 | 	cmp	local01, #123 wc
132b4     20 00 90 3D |  if_ae	jmp	#LR__1592
132b8     45 00 00 FF 
132bc     74 E4 05 F1 | 	add	objptr, ##35444
132c0     F2 26 02 FB | 	rdlong	local01, objptr
132c4     20 26 86 F1 | 	sub	local01, #32
132c8     F2 26 62 FC | 	wrlong	local01, objptr
132cc     45 00 00 FF 
132d0     74 E4 85 F1 | 	sub	objptr, ##35444
132d4     00 01 90 FD | 	jmp	#LR__1598
132d8                 | LR__1592
132d8     45 00 00 FF 
132dc     74 E4 05 F1 | 	add	objptr, ##35444
132e0     F2 26 02 FB | 	rdlong	local01, objptr
132e4     45 00 00 FF 
132e8     74 E4 85 F1 | 	sub	objptr, ##35444
132ec     41 26 16 F2 | 	cmp	local01, #65 wc
132f0     3C 00 90 CD |  if_b	jmp	#LR__1593
132f4     45 00 00 FF 
132f8     74 E4 05 F1 | 	add	objptr, ##35444
132fc     F2 26 02 FB | 	rdlong	local01, objptr
13300     45 00 00 FF 
13304     74 E4 85 F1 | 	sub	objptr, ##35444
13308     5B 26 16 F2 | 	cmp	local01, #91 wc
1330c     20 00 90 3D |  if_ae	jmp	#LR__1593
13310     45 00 00 FF 
13314     74 E4 05 F1 | 	add	objptr, ##35444
13318     F2 26 02 FB | 	rdlong	local01, objptr
1331c     20 26 06 F1 | 	add	local01, #32
13320     F2 26 62 FC | 	wrlong	local01, objptr
13324     45 00 00 FF 
13328     74 E4 85 F1 | 	sub	objptr, ##35444
1332c     A8 00 90 FD | 	jmp	#LR__1597
13330                 | LR__1593
13330     45 00 00 FF 
13334     74 E4 05 F1 | 	add	objptr, ##35444
13338     F2 26 02 FB | 	rdlong	local01, objptr
1333c     45 00 00 FF 
13340     74 E4 85 F1 | 	sub	objptr, ##35444
13344     17 26 16 F2 | 	cmp	local01, #23 wc
13348     3C 00 90 CD |  if_b	jmp	#LR__1594
1334c     45 00 00 FF 
13350     74 E4 05 F1 | 	add	objptr, ##35444
13354     F2 26 02 FB | 	rdlong	local01, objptr
13358     45 00 00 FF 
1335c     74 E4 85 F1 | 	sub	objptr, ##35444
13360     20 26 16 F2 | 	cmp	local01, #32 wc
13364     20 00 90 3D |  if_ae	jmp	#LR__1594
13368     45 00 00 FF 
1336c     74 E4 05 F1 | 	add	objptr, ##35444
13370     F2 26 02 FB | 	rdlong	local01, objptr
13374     09 26 86 F1 | 	sub	local01, #9
13378     F2 26 62 FC | 	wrlong	local01, objptr
1337c     45 00 00 FF 
13380     74 E4 85 F1 | 	sub	objptr, ##35444
13384     50 00 90 FD | 	jmp	#LR__1596
13388                 | LR__1594
13388     45 00 00 FF 
1338c     74 E4 05 F1 | 	add	objptr, ##35444
13390     F2 28 02 FB | 	rdlong	local02, objptr
13394     45 00 00 FF 
13398     74 E4 85 F1 | 	sub	objptr, ##35444
1339c     0E 28 16 F2 | 	cmp	local02, #14 wc
133a0     34 00 90 CD |  if_b	jmp	#LR__1595
133a4     45 00 00 FF 
133a8     74 E4 05 F1 | 	add	objptr, ##35444
133ac     F2 26 02 FB | 	rdlong	local01, objptr
133b0     45 00 00 FF 
133b4     74 E4 85 F1 | 	sub	objptr, ##35444
133b8     17 26 16 F2 | 	cmp	local01, #23 wc
133bc     52 00 00 CF 
133c0     90 E4 05 C1 |  if_b	add	objptr, ##42128
133c4     F2 28 02 CB |  if_b	rdlong	local02, objptr
133c8     27 28 06 C1 |  if_b	add	local02, #39
133cc     F2 28 62 CC |  if_b	wrlong	local02, objptr
133d0     52 00 00 CF 
133d4     90 E4 85 C1 |  if_b	sub	objptr, ##42128
133d8                 | LR__1595
133d8                 | LR__1596
133d8                 | LR__1597
133d8                 | LR__1598
133d8                 | LR__1599
133d8     45 00 00 FF 
133dc     74 E4 05 F1 | 	add	objptr, ##35444
133e0     F2 12 02 FB | 	rdlong	arg01, objptr
133e4     45 00 00 FF 
133e8     74 E4 85 F1 | 	sub	objptr, ##35444
133ec     1C EF B0 FD | 	call	#_scantochar
133f0     FD 12 02 F6 | 	mov	arg01, result1
133f4     C0 47 B1 FD | 	call	#__system__Chr_S
133f8     A7 FA 61 FC | 	wrlong	result1, fp
133fc     0C 00 90 FD | 	jmp	#LR__1601
13400                 | LR__1600
13400     AE 01 00 FF 
13404     E0 29 06 F6 | 	mov	local02, ##@LR__5871
13408     A7 28 62 FC | 	wrlong	local02, fp
1340c                 | LR__1601
1340c     08 4E 05 F1 | 	add	fp, #8
13410     A7 3E 68 FC | 	wrlong	#31, fp
13414     08 4E 85 F1 | 	sub	fp, #8
13418     A7 12 02 F6 | 	mov	arg01, fp
1341c     F8 98 BF FD | 	call	#_push
13420     A7 F0 03 F6 | 	mov	ptra, fp
13424     B2 00 A0 FD | 	call	#popregs_
13428                 | _do_inkey_ret
13428     2D 00 64 FD | 	ret
1342c                 | 
1342c                 | ' 
1342c                 | ' ' ----------------  ink
1342c                 | ' 
1342c                 | ' sub do_ink
1342c                 | _do_ink
1342c     00 4A 05 F6 | 	mov	COUNT_, #0
13430     A8 00 A0 FD | 	call	#pushregs_
13434     0C F0 07 F1 | 	add	ptra, #12
13438     44 98 BF FD | 	call	#_pop
1343c     FF 14 02 F6 | 	mov	arg02, result3
13440     A7 FA 61 FC | 	wrlong	result1, fp
13444     04 4E 05 F1 | 	add	fp, #4
13448     A7 FC 61 FC | 	wrlong	result2, fp
1344c     04 4E 05 F1 | 	add	fp, #4
13450     A7 14 62 FC | 	wrlong	arg02, fp
13454     08 4E 85 F1 | 	sub	fp, #8
13458     A7 12 02 F6 | 	mov	arg01, fp
1345c     04 9A BF FD | 	call	#_converttoint
13460     37 00 00 FF 
13464     3C E4 05 F1 | 	add	objptr, ##28220
13468     F2 FA 61 FC | 	wrlong	result1, objptr
1346c     04 E4 85 F1 | 	sub	objptr, #4
13470     F2 14 02 FB | 	rdlong	arg02, objptr
13474                 | ' 
13474                 | ' write_color:=ff
13474     36 00 00 FF 
13478     F7 E5 85 F1 | 	sub	objptr, ##28151
1347c     F2 FA 61 FC | 	wrlong	result1, objptr
13480                 | ' write_background:=bb
13480     04 E4 05 F1 | 	add	objptr, #4
13484     F2 14 62 FC | 	wrlong	arg02, objptr
13488     36 00 00 FF 
1348c     F7 E5 05 F1 | 	add	objptr, ##28151
13490     F2 12 02 FB | 	rdlong	arg01, objptr
13494     37 00 00 FF 
13498     3C E4 85 F1 | 	sub	objptr, ##28220
1349c     C0 F6 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
134a0     A7 F0 03 F6 | 	mov	ptra, fp
134a4     B2 00 A0 FD | 	call	#popregs_
134a8                 | _do_ink_ret
134a8     2D 00 64 FD | 	ret
134ac                 | 
134ac                 | ' 
134ac                 | ' ' ----------------  int
134ac                 | ' 
134ac                 | ' sub do_int
134ac                 | _do_int
134ac     02 4A 05 F6 | 	mov	COUNT_, #2
134b0     A8 00 A0 FD | 	call	#pushregs_
134b4     10 F0 07 F1 | 	add	ptra, #16
134b8     C4 97 BF FD | 	call	#_pop
134bc     FE 26 02 F6 | 	mov	local01, result2
134c0     FF 28 02 F6 | 	mov	local02, result3
134c4     A7 FA 61 FC | 	wrlong	result1, fp
134c8     04 4E 05 F1 | 	add	fp, #4
134cc     A7 26 62 FC | 	wrlong	local01, fp
134d0     04 4E 05 F1 | 	add	fp, #4
134d4     A7 28 62 FC | 	wrlong	local02, fp
134d8                 | ' 
134d8                 | ' t1=pop()
134d8                 | ' select case t1.result_type
134d8     08 4E 85 F1 | 	sub	fp, #8
134dc     1E 28 0E F2 | 	cmp	local02, #30 wz
134e0     14 00 90 AD |  if_e	jmp	#LR__1610
134e4     1F 28 0E F2 | 	cmp	local02, #31 wz
134e8     20 00 90 AD |  if_e	jmp	#LR__1611
134ec     2B 28 0E F2 | 	cmp	local02, #43 wz
134f0     34 00 90 AD |  if_e	jmp	#LR__1612
134f4     50 00 90 FD | 	jmp	#LR__1613
134f8                 | LR__1610
134f8     A7 12 02 FB | 	rdlong	arg01, fp
134fc     00 14 06 F6 | 	mov	arg02, #0
13500     B4 57 B1 FD | 	call	#__system___float_tointeger
13504     A7 FA 61 FC | 	wrlong	result1, fp
13508     3C 00 90 FD | 	jmp	#LR__1613
1350c                 | LR__1611
1350c     A7 12 02 FB | 	rdlong	arg01, fp
13510     E8 5A B1 FD | 	call	#__system____builtin_atof
13514     FD 12 02 F6 | 	mov	arg01, result1
13518     00 14 06 F6 | 	mov	arg02, #0
1351c     98 57 B1 FD | 	call	#__system___float_tointeger
13520     A7 FA 61 FC | 	wrlong	result1, fp
13524     20 00 90 FD | 	jmp	#LR__1613
13528                 | LR__1612
13528     A7 12 02 FB | 	rdlong	arg01, fp
1352c     C8 98 BF FD | 	call	#_convertstring
13530     FD 12 02 F6 | 	mov	arg01, result1
13534     C4 5A B1 FD | 	call	#__system____builtin_atof
13538     FD 12 02 F6 | 	mov	arg01, result1
1353c     00 14 06 F6 | 	mov	arg02, #0
13540     74 57 B1 FD | 	call	#__system___float_tointeger
13544     A7 FA 61 FC | 	wrlong	result1, fp
13548                 | LR__1613
13548     08 4E 05 F1 | 	add	fp, #8
1354c     A7 38 68 FC | 	wrlong	#28, fp
13550     08 4E 85 F1 | 	sub	fp, #8
13554     A7 12 02 F6 | 	mov	arg01, fp
13558     BC 97 BF FD | 	call	#_push
1355c     A7 F0 03 F6 | 	mov	ptra, fp
13560     B2 00 A0 FD | 	call	#popregs_
13564                 | _do_int_ret
13564     2D 00 64 FD | 	ret
13568                 | 
13568                 | ' 
13568                 | ' ' ----------------  input
13568                 | ' 
13568                 | ' sub do_input
13568                 | _do_input
13568     11 4A 05 F6 | 	mov	COUNT_, #17
1356c     A8 00 A0 FD | 	call	#pushregs_
13570     50 F1 07 F1 | 	add	ptra, #336
13574     4A 00 00 FF 
13578     80 E4 05 F1 | 	add	objptr, ##38016
1357c     F2 FE 01 FB | 	rdlong	result3, objptr
13580     FF FC 01 F6 | 	mov	result2, result3
13584     01 FC 65 F0 | 	shl	result2, #1
13588     FF FC 01 F1 | 	add	result2, result3
1358c     02 FC 65 F0 | 	shl	result2, #2
13590     03 00 00 FF 
13594     04 E4 85 F1 | 	sub	objptr, ##1540
13598     F2 FC 01 F1 | 	add	result2, objptr
1359c     FE FC 01 FB | 	rdlong	result2, result2
135a0     08 4E 05 F1 | 	add	fp, #8
135a4     A7 FC 61 FC | 	wrlong	result2, fp
135a8                 | ' 
135a8                 | ' numpar=compiledline(lineptr_e).result.uresult
135a8                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
135a8     08 4E 85 F1 | 	sub	fp, #8
135ac     01 FC 15 F2 | 	cmp	result2, #1 wc
135b0     47 00 00 FF 
135b4     7C E4 85 F1 | 	sub	objptr, ##36476
135b8     14 00 90 CD |  if_b	jmp	#LR__1620
135bc     08 4E 05 F1 | 	add	fp, #8
135c0     A7 FC 01 FB | 	rdlong	result2, fp
135c4     08 4E 85 F1 | 	sub	fp, #8
135c8     41 FC 15 F2 | 	cmp	result2, #65 wc
135cc     50 00 90 CD |  if_b	jmp	#LR__1621
135d0                 | LR__1620
135d0     00 12 06 F6 | 	mov	arg01, #0
135d4     C8 80 B1 FD | 	call	#__system___getiolock_0599
135d8     FD 12 02 F6 | 	mov	arg01, result1
135dc     98 23 B1 FD | 	call	#__system___lockmem
135e0     AE 01 00 FF 
135e4     E1 15 06 F6 | 	mov	arg02, ##@LR__5872
135e8     00 12 06 F6 | 	mov	arg01, #0
135ec     00 16 06 F6 | 	mov	arg03, #0
135f0     78 30 B1 FD | 	call	#__system___basic_print_string
135f4     00 12 06 F6 | 	mov	arg01, #0
135f8     A4 80 B1 FD | 	call	#__system___getiolock_0599
135fc     FD 00 68 FC | 	wrlong	#0, result1
13600     50 00 00 FF 
13604     F0 E4 05 F1 | 	add	objptr, ##41200
13608     F2 14 02 FB | 	rdlong	arg02, objptr
1360c     50 00 00 FF 
13610     F0 E4 85 F1 | 	sub	objptr, ##41200
13614     27 12 06 F6 | 	mov	arg01, #39
13618     70 E9 B0 FD | 	call	#_printerror
1361c     44 0B 90 FD | 	jmp	#LR__1670
13620                 | LR__1621
13620     08 4E 05 F1 | 	add	fp, #8
13624     A7 FC 01 FB | 	rdlong	result2, fp
13628     01 FC 85 F1 | 	sub	result2, #1
1362c     28 4F 05 F1 | 	add	fp, #296
13630     A7 FC 61 FC | 	wrlong	result2, fp
13634     3C E4 05 F1 | 	add	objptr, #60
13638     F2 FC E1 FA | 	rdword	result2, objptr
1363c     FE FC 51 F6 | 	abs	result2, result2 wc
13640     01 FC 45 F0 | 	shr	result2, #1
13644     FE FC 81 F6 | 	negc	result2, result2
13648     0C 4E 05 F1 | 	add	fp, #12
1364c     A7 FC 61 FC | 	wrlong	result2, fp
13650     02 E4 05 F1 | 	add	objptr, #2
13654     F2 26 C2 FA | 	rdbyte	local01, objptr
13658     3E E4 85 F1 | 	sub	objptr, #62
1365c     04 4E 05 F1 | 	add	fp, #4
13660     A7 26 62 FC | 	wrlong	local01, fp
13664     40 4F 85 F1 | 	sub	fp, #320
13668                 | ' i=numpar-1
13668                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13668                 | ' do
13668                 | LR__1622
13668     98 D1 BE FD | 	call	#_edit
1366c     A7 FA 61 FC | 	wrlong	result1, fp
13670                 | ' 
13670                 | '   line$=edit()
13670                 | ' 
13670                 | '   if v.cursor_y=cpy+1 then
13670     3E E4 05 F1 | 	add	objptr, #62
13674     F2 26 C2 FA | 	rdbyte	local01, objptr
13678     3E E4 85 F1 | 	sub	objptr, #62
1367c     40 4F 05 F1 | 	add	fp, #320
13680     A7 16 02 FB | 	rdlong	arg03, fp
13684     40 4F 85 F1 | 	sub	fp, #320
13688     01 16 06 F1 | 	add	arg03, #1
1368c     0B 27 0A F2 | 	cmp	local01, arg03 wz
13690     6C 00 90 5D |  if_ne	jmp	#LR__1625
13694     A7 26 02 FB | 	rdlong	local01, fp
13698     13 13 02 F6 | 	mov	arg01, local01
1369c     09 29 02 F6 | 	mov	local02, arg01
136a0     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
136a4                 | LR__1623
136a4     14 FB C9 FA | 	rdbyte	result1, local02 wz
136a8     01 28 06 51 |  if_ne	add	local02, #1
136ac     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
136b0                 | LR__1624
136b0     09 29 82 F1 | 	sub	local02, arg01
136b4     14 15 02 F6 | 	mov	arg02, local02
136b8     3C 4F 05 F1 | 	add	fp, #316
136bc     A7 16 02 FB | 	rdlong	arg03, fp
136c0     3C 4F 85 F1 | 	sub	fp, #316
136c4     0B 15 82 F1 | 	sub	arg02, arg03
136c8     37 00 00 FF 
136cc     34 E4 05 F1 | 	add	objptr, ##28212
136d0     F2 16 02 FB | 	rdlong	arg03, objptr
136d4     37 00 00 FF 
136d8     34 E4 85 F1 | 	sub	objptr, ##28212
136dc     0B 15 02 F1 | 	add	arg02, arg03
136e0     13 13 02 F6 | 	mov	arg01, local01
136e4     94 43 B1 FD | 	call	#__system__Right_S
136e8     FD 12 02 F6 | 	mov	arg01, result1
136ec     94 47 B1 FD | 	call	#__system__RTrim_S
136f0     FD 12 02 F6 | 	mov	arg01, result1
136f4     CC 46 B1 FD | 	call	#__system__LTrim_S
136f8     A7 FA 61 FC | 	wrlong	result1, fp
136fc     14 00 90 FD | 	jmp	#LR__1626
13700                 | LR__1625
13700     A7 12 02 FB | 	rdlong	arg01, fp
13704     7C 47 B1 FD | 	call	#__system__RTrim_S
13708     FD 12 02 F6 | 	mov	arg01, result1
1370c     B4 46 B1 FD | 	call	#__system__LTrim_S
13710     A7 FA 61 FC | 	wrlong	result1, fp
13714                 | LR__1626
13714                 | '   do
13714                 | LR__1627
13714     A7 14 02 FB | 	rdlong	arg02, fp
13718     AE 01 00 FF 
1371c     EC 17 06 F6 | 	mov	arg03, ##@LR__5873
13720     01 12 06 F6 | 	mov	arg01, #1
13724     14 48 B1 FD | 	call	#__system__Instr
13728     0C 4E 05 F1 | 	add	fp, #12
1372c     A7 FA 61 FC | 	wrlong	result1, fp
13730                 | '    comma=instr(1,line$,",")  
13730                 | '    if comma>0  then 
13730     0C 4E 85 F1 | 	sub	fp, #12
13734     01 FA 15 F2 | 	cmp	result1, #1 wc
13738     68 00 90 CD |  if_b	jmp	#LR__1630
1373c     A7 12 02 FB | 	rdlong	arg01, fp
13740     0C 4E 05 F1 | 	add	fp, #12
13744     A7 14 02 FB | 	rdlong	arg02, fp
13748     0C 4E 85 F1 | 	sub	fp, #12
1374c     01 14 86 F1 | 	sub	arg02, #1
13750     A0 42 B1 FD | 	call	#__system__Left_S
13754     04 4E 05 F1 | 	add	fp, #4
13758     A7 FA 61 FC | 	wrlong	result1, fp
1375c     04 4E 85 F1 | 	sub	fp, #4
13760     A7 26 02 FB | 	rdlong	local01, fp
13764     13 13 02 F6 | 	mov	arg01, local01
13768     09 29 02 F6 | 	mov	local02, arg01
1376c     97 06 48 FB | 	callpa	#(@LR__1629-@LR__1628)>>2,fcache_load_ptr_
13770                 | LR__1628
13770     14 FB C9 FA | 	rdbyte	result1, local02 wz
13774     01 28 06 51 |  if_ne	add	local02, #1
13778     F4 FF 9F 5D |  if_ne	jmp	#LR__1628
1377c                 | LR__1629
1377c     09 29 82 F1 | 	sub	local02, arg01
13780     14 15 02 F6 | 	mov	arg02, local02
13784     0C 4E 05 F1 | 	add	fp, #12
13788     A7 16 02 FB | 	rdlong	arg03, fp
1378c     0C 4E 85 F1 | 	sub	fp, #12
13790     0B 15 82 F1 | 	sub	arg02, arg03
13794     13 13 02 F6 | 	mov	arg01, local01
13798     E0 42 B1 FD | 	call	#__system__Right_S
1379c     A7 FA 61 FC | 	wrlong	result1, fp
137a0     28 00 90 FD | 	jmp	#LR__1631
137a4                 | LR__1630
137a4     A7 12 02 FB | 	rdlong	arg01, fp
137a8     D8 46 B1 FD | 	call	#__system__RTrim_S
137ac     FD 12 02 F6 | 	mov	arg01, result1
137b0     10 46 B1 FD | 	call	#__system__LTrim_S
137b4     04 4E 05 F1 | 	add	fp, #4
137b8     A7 FA 61 FC | 	wrlong	result1, fp
137bc     04 4E 85 F1 | 	sub	fp, #4
137c0     AE 01 00 FF 
137c4     EE 27 06 F6 | 	mov	local01, ##@LR__5874
137c8     A7 26 62 FC | 	wrlong	local01, fp
137cc                 | LR__1631
137cc     30 4F 05 F1 | 	add	fp, #304
137d0     A7 26 02 FB | 	rdlong	local01, fp
137d4     02 26 66 F0 | 	shl	local01, #2
137d8     04 4F 85 F1 | 	sub	fp, #260
137dc     A7 26 02 F1 | 	add	local01, fp
137e0     28 4E 85 F1 | 	sub	fp, #40
137e4     A7 FA 01 FB | 	rdlong	result1, fp
137e8     13 FB 61 FC | 	wrlong	result1, local01
137ec     2C 4F 05 F1 | 	add	fp, #300
137f0     A7 26 02 FB | 	rdlong	local01, fp
137f4     01 26 86 F1 | 	sub	local01, #1
137f8     A7 26 62 FC | 	wrlong	local01, fp
137fc     30 4F 85 F1 | 	sub	fp, #304
13800     00 26 56 F2 | 	cmps	local01, #0 wc
13804     18 00 90 CD |  if_b	jmp	#LR__1632
13808     A7 12 02 FB | 	rdlong	arg01, fp
1380c     AE 01 00 FF 
13810     EF 15 06 F6 | 	mov	arg02, ##@LR__5875
13814     88 21 B1 FD | 	call	#__system___string_cmp
13818     00 FA 0D F2 | 	cmp	result1, #0 wz
1381c     F4 FE 9F 5D |  if_ne	jmp	#LR__1627
13820                 | LR__1632
13820     30 4F 05 F1 | 	add	fp, #304
13824     A7 26 02 FB | 	rdlong	local01, fp
13828     30 4F 85 F1 | 	sub	fp, #304
1382c     00 26 56 F2 | 	cmps	local01, #0 wc
13830     34 FE 9F 3D |  if_ae	jmp	#LR__1622
13834                 | ' 
13834                 | ' for i=0 to numpar-1
13834     30 4F 05 F1 | 	add	fp, #304
13838     A7 00 68 FC | 	wrlong	#0, fp
1383c     28 4F 85 F1 | 	sub	fp, #296
13840     A7 2A 02 FB | 	rdlong	local03, fp
13844     08 4E 85 F1 | 	sub	fp, #8
13848                 | LR__1633
13848     30 4F 05 F1 | 	add	fp, #304
1384c     A7 2C 02 FB | 	rdlong	local04, fp
13850     30 4F 85 F1 | 	sub	fp, #304
13854     16 27 02 F6 | 	mov	local01, local04
13858     15 27 52 F2 | 	cmps	local01, local03 wc
1385c     04 09 90 3D |  if_ae	jmp	#LR__1669
13860                 | ' 
13860                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13860     30 4F 05 F1 | 	add	fp, #304
13864     A7 16 02 FB | 	rdlong	arg03, fp
13868     02 16 66 F0 | 	shl	arg03, #2
1386c     04 4F 85 F1 | 	sub	fp, #260
13870     A7 16 02 F1 | 	add	arg03, fp
13874     0B 13 02 FB | 	rdlong	arg01, arg03
13878     2C 4E 85 F1 | 	sub	fp, #44
1387c     1C 2C BF FD | 	call	#_isnum
13880     FD 2E 02 F6 | 	mov	local05, result1
13884     30 4F 05 F1 | 	add	fp, #304
13888     A7 16 02 FB | 	rdlong	arg03, fp
1388c     02 16 66 F0 | 	shl	arg03, #2
13890     04 4F 85 F1 | 	sub	fp, #260
13894     A7 30 02 F6 | 	mov	local06, fp
13898     A7 16 02 F1 | 	add	arg03, fp
1389c     0B 13 02 FB | 	rdlong	arg01, arg03
138a0     2C 4E 85 F1 | 	sub	fp, #44
138a4     E0 2F BF FD | 	call	#_isint
138a8     FD 2E 2A F5 | 	andn	local05, result1 wz
138ac     52 00 00 5F 
138b0     BC E4 05 51 |  if_ne	add	objptr, ##42172
138b4     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
138b8     52 00 00 5F 
138bc     BC E4 85 51 |  if_ne	sub	objptr, ##42172
138c0                 | '   if isint(args(i)) then r=result_int 
138c0     30 4F 05 F1 | 	add	fp, #304
138c4     A7 2E 02 FB | 	rdlong	local05, fp
138c8     02 2E 66 F0 | 	shl	local05, #2
138cc     04 4F 85 F1 | 	sub	fp, #260
138d0     A7 2E 02 F1 | 	add	local05, fp
138d4     17 13 02 FB | 	rdlong	arg01, local05
138d8     2C 4E 85 F1 | 	sub	fp, #44
138dc     A8 2F BF FD | 	call	#_isint
138e0     00 FA 0D F2 | 	cmp	result1, #0 wz
138e4     52 00 00 5F 
138e8     BC E4 05 51 |  if_ne	add	objptr, ##42172
138ec     F2 38 68 5C |  if_ne	wrlong	#28, objptr
138f0     52 00 00 5F 
138f4     BC E4 85 51 |  if_ne	sub	objptr, ##42172
138f8                 | '   if isdec(args(i)) then r=result_uint 
138f8     30 4F 05 F1 | 	add	fp, #304
138fc     A7 2E 02 FB | 	rdlong	local05, fp
13900     02 2E 66 F0 | 	shl	local05, #2
13904     04 4F 85 F1 | 	sub	fp, #260
13908     A7 2E 02 F1 | 	add	local05, fp
1390c     17 13 02 FB | 	rdlong	arg01, local05
13910     2C 4E 85 F1 | 	sub	fp, #44
13914     14 32 BF FD | 	call	#_isdec
13918     00 FA 0D F2 | 	cmp	result1, #0 wz
1391c     52 00 00 5F 
13920     BC E4 05 51 |  if_ne	add	objptr, ##42172
13924     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
13928     52 00 00 5F 
1392c     BC E4 85 51 |  if_ne	sub	objptr, ##42172
13930                 | '   if not isnum(args(i)) then 
13930     30 4F 05 F1 | 	add	fp, #304
13934     A7 32 02 FB | 	rdlong	local07, fp
13938     19 35 02 F6 | 	mov	local08, local07
1393c     02 34 66 F0 | 	shl	local08, #2
13940     04 4F 85 F1 | 	sub	fp, #260
13944     A7 36 02 F6 | 	mov	local09, fp
13948     A7 34 02 F1 | 	add	local08, fp
1394c     1A 13 02 FB | 	rdlong	arg01, local08
13950     2C 4E 85 F1 | 	sub	fp, #44
13954     44 2B BF FD | 	call	#_isnum
13958     FD 2E 22 F6 | 	not	local05, result1
1395c     00 2E 0E F2 | 	cmp	local05, #0 wz
13960     44 01 90 AD |  if_e	jmp	#LR__1638
13964     52 00 00 FF 
13968     BC E4 05 F1 | 	add	objptr, ##42172
1396c     F2 56 68 FC | 	wrlong	#43, objptr
13970     52 00 00 FF 
13974     BC E4 85 F1 | 	sub	objptr, ##42172
13978     04 4E 05 F1 | 	add	fp, #4
1397c     A7 12 02 FB | 	rdlong	arg01, fp
13980     04 4E 85 F1 | 	sub	fp, #4
13984     09 29 02 F6 | 	mov	local02, arg01
13988     97 06 48 FB | 	callpa	#(@LR__1635-@LR__1634)>>2,fcache_load_ptr_
1398c                 | LR__1634
1398c     14 FB C9 FA | 	rdbyte	result1, local02 wz
13990     01 28 06 51 |  if_ne	add	local02, #1
13994     F4 FF 9F 5D |  if_ne	jmp	#LR__1634
13998                 | LR__1635
13998     09 29 82 F1 | 	sub	local02, arg01
1399c     14 33 02 F6 | 	mov	local07, local02
139a0     38 4F 05 F1 | 	add	fp, #312
139a4     A7 32 62 FC | 	wrlong	local07, fp
139a8     52 00 00 FF 
139ac     44 E4 05 F1 | 	add	objptr, ##42052
139b0     F2 12 02 FB | 	rdlong	arg01, objptr
139b4     19 13 82 F1 | 	sub	arg01, local07
139b8     04 12 86 F1 | 	sub	arg01, #4
139bc     03 12 26 F5 | 	andn	arg01, #3
139c0     F2 12 62 FC | 	wrlong	arg01, objptr
139c4     52 00 00 FF 
139c8     44 E4 85 F1 | 	sub	objptr, ##42052
139cc     A7 14 02 FB | 	rdlong	arg02, fp
139d0     38 4F 85 F1 | 	sub	fp, #312
139d4     54 E7 B0 FD | 	call	#_pslpoke
139d8                 | '     pslpoke memtop,l
139d8                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
139d8     34 4F 05 F1 | 	add	fp, #308
139dc     A7 02 68 FC | 	wrlong	#1, fp
139e0     04 4E 05 F1 | 	add	fp, #4
139e4     A7 38 02 FB | 	rdlong	local10, fp
139e8     38 4F 85 F1 | 	sub	fp, #312
139ec     01 38 06 F1 | 	add	local10, #1
139f0                 | LR__1636
139f0     34 4F 05 F1 | 	add	fp, #308
139f4     A7 2E 02 FB | 	rdlong	local05, fp
139f8     34 4F 85 F1 | 	sub	fp, #308
139fc     1C 2F 52 F2 | 	cmps	local05, local10 wc
13a00     84 00 90 3D |  if_ae	jmp	#LR__1637
13a04     52 00 00 FF 
13a08     44 E4 05 F1 | 	add	objptr, ##42052
13a0c     F2 32 02 FB | 	rdlong	local07, objptr
13a10     52 00 00 FF 
13a14     44 E4 85 F1 | 	sub	objptr, ##42052
13a18     03 32 06 F1 | 	add	local07, #3
13a1c     34 4F 05 F1 | 	add	fp, #308
13a20     A7 3A 02 FB | 	rdlong	local11, fp
13a24     1D 33 02 F1 | 	add	local07, local11
13a28     04 4E 85 F1 | 	sub	fp, #4
13a2c     A7 3C 02 FB | 	rdlong	local12, fp
13a30     02 3C 66 F0 | 	shl	local12, #2
13a34     04 4F 85 F1 | 	sub	fp, #260
13a38     A7 3E 02 F6 | 	mov	local13, fp
13a3c     A7 3C 02 F1 | 	add	local12, fp
13a40     1E 13 02 FB | 	rdlong	arg01, local12
13a44     2C 4E 85 F1 | 	sub	fp, #44
13a48     01 40 06 F6 | 	mov	local14, #1
13a4c     1D 15 02 F6 | 	mov	arg02, local11
13a50     01 16 06 F6 | 	mov	arg03, #1
13a54     B4 40 B1 FD | 	call	#__system__Mid_S
13a58     FD 14 C2 FA | 	rdbyte	arg02, result1
13a5c     19 13 02 F6 | 	mov	arg01, local07
13a60     58 E7 B0 FD | 	call	#_pspoke
13a64     34 4F 05 F1 | 	add	fp, #308
13a68     A7 34 02 FB | 	rdlong	local08, fp
13a6c     1A 33 02 F6 | 	mov	local07, local08
13a70     1A 31 02 F6 | 	mov	local06, local08
13a74     18 37 02 F6 | 	mov	local09, local06
13a78     01 36 06 F1 | 	add	local09, #1
13a7c     A7 36 62 FC | 	wrlong	local09, fp
13a80     34 4F 85 F1 | 	sub	fp, #308
13a84     68 FF 9F FD | 	jmp	#LR__1636
13a88                 | LR__1637
13a88     52 00 00 FF 
13a8c     44 E4 05 F1 | 	add	objptr, ##42052
13a90     F2 2E 02 FB | 	rdlong	local05, objptr
13a94     52 00 00 FF 
13a98     44 E4 85 F1 | 	sub	objptr, ##42052
13a9c     10 4E 05 F1 | 	add	fp, #16
13aa0     A7 2E 62 FC | 	wrlong	local05, fp
13aa4     10 4E 85 F1 | 	sub	fp, #16
13aa8                 | LR__1638
13aa8     D4 91 BF FD | 	call	#_pop
13aac     FE 2E 02 F6 | 	mov	local05, result2
13ab0     FF 42 02 F6 | 	mov	local15, result3
13ab4     1C 4E 05 F1 | 	add	fp, #28
13ab8     A7 FA 61 FC | 	wrlong	result1, fp
13abc     04 4E 05 F1 | 	add	fp, #4
13ac0     A7 2E 62 FC | 	wrlong	local05, fp
13ac4     04 4E 05 F1 | 	add	fp, #4
13ac8     A7 42 62 FC | 	wrlong	local15, fp
13acc     04 4E 85 F1 | 	sub	fp, #4
13ad0     A7 44 02 FB | 	rdlong	local16, fp
13ad4     0C 4E 85 F1 | 	sub	fp, #12
13ad8     A7 44 62 FC | 	wrlong	local16, fp
13adc                 | '   t1=pop() : vartype=t1.result.twowords(1)
13adc                 | '   select case vartype
13adc     14 4E 85 F1 | 	sub	fp, #20
13ae0     22 47 0A F6 | 	mov	local17, local16 wz
13ae4     64 00 90 AD |  if_e	jmp	#LR__1639
13ae8     00 47 0E F2 | 	cmp	local17, #256 wz
13aec     6C 00 90 AD |  if_e	jmp	#LR__1640
13af0     01 47 0E F2 | 	cmp	local17, #257 wz
13af4     74 00 90 AD |  if_e	jmp	#LR__1641
13af8     02 47 0E F2 | 	cmp	local17, #258 wz
13afc     7C 00 90 AD |  if_e	jmp	#LR__1642
13b00     03 47 0E F2 | 	cmp	local17, #259 wz
13b04     84 00 90 AD |  if_e	jmp	#LR__1643
13b08     04 47 0E F2 | 	cmp	local17, #260 wz
13b0c     8C 00 90 AD |  if_e	jmp	#LR__1644
13b10     05 47 0E F2 | 	cmp	local17, #261 wz
13b14     94 00 90 AD |  if_e	jmp	#LR__1645
13b18     06 47 0E F2 | 	cmp	local17, #262 wz
13b1c     9C 00 90 AD |  if_e	jmp	#LR__1646
13b20     07 47 0E F2 | 	cmp	local17, #263 wz
13b24     A4 00 90 AD |  if_e	jmp	#LR__1647
13b28     08 47 0E F2 | 	cmp	local17, #264 wz
13b2c     AC 00 90 AD |  if_e	jmp	#LR__1648
13b30     09 47 0E F2 | 	cmp	local17, #265 wz
13b34     B4 00 90 AD |  if_e	jmp	#LR__1649
13b38     0A 47 0E F2 | 	cmp	local17, #266 wz
13b3c     BC 00 90 AD |  if_e	jmp	#LR__1650
13b40     0B 47 0E F2 | 	cmp	local17, #267 wz
13b44     C4 00 90 AD |  if_e	jmp	#LR__1651
13b48     D0 00 90 FD | 	jmp	#LR__1652
13b4c                 | LR__1639
13b4c     18 4E 05 F1 | 	add	fp, #24
13b50     A7 18 68 FC | 	wrlong	#12, fp
13b54     18 4E 85 F1 | 	sub	fp, #24
13b58     CC 00 90 FD | 	jmp	#LR__1653
13b5c                 | LR__1640
13b5c     18 4E 05 F1 | 	add	fp, #24
13b60     A7 18 68 FC | 	wrlong	#12, fp
13b64     18 4E 85 F1 | 	sub	fp, #24
13b68     BC 00 90 FD | 	jmp	#LR__1653
13b6c                 | LR__1641
13b6c     18 4E 05 F1 | 	add	fp, #24
13b70     A7 02 68 FC | 	wrlong	#1, fp
13b74     18 4E 85 F1 | 	sub	fp, #24
13b78     AC 00 90 FD | 	jmp	#LR__1653
13b7c                 | LR__1642
13b7c     18 4E 05 F1 | 	add	fp, #24
13b80     A7 02 68 FC | 	wrlong	#1, fp
13b84     18 4E 85 F1 | 	sub	fp, #24
13b88     9C 00 90 FD | 	jmp	#LR__1653
13b8c                 | LR__1643
13b8c     18 4E 05 F1 | 	add	fp, #24
13b90     A7 04 68 FC | 	wrlong	#2, fp
13b94     18 4E 85 F1 | 	sub	fp, #24
13b98     8C 00 90 FD | 	jmp	#LR__1653
13b9c                 | LR__1644
13b9c     18 4E 05 F1 | 	add	fp, #24
13ba0     A7 04 68 FC | 	wrlong	#2, fp
13ba4     18 4E 85 F1 | 	sub	fp, #24
13ba8     7C 00 90 FD | 	jmp	#LR__1653
13bac                 | LR__1645
13bac     18 4E 05 F1 | 	add	fp, #24
13bb0     A7 08 68 FC | 	wrlong	#4, fp
13bb4     18 4E 85 F1 | 	sub	fp, #24
13bb8     6C 00 90 FD | 	jmp	#LR__1653
13bbc                 | LR__1646
13bbc     18 4E 05 F1 | 	add	fp, #24
13bc0     A7 08 68 FC | 	wrlong	#4, fp
13bc4     18 4E 85 F1 | 	sub	fp, #24
13bc8     5C 00 90 FD | 	jmp	#LR__1653
13bcc                 | LR__1647
13bcc     18 4E 05 F1 | 	add	fp, #24
13bd0     A7 10 68 FC | 	wrlong	#8, fp
13bd4     18 4E 85 F1 | 	sub	fp, #24
13bd8     4C 00 90 FD | 	jmp	#LR__1653
13bdc                 | LR__1648
13bdc     18 4E 05 F1 | 	add	fp, #24
13be0     A7 10 68 FC | 	wrlong	#8, fp
13be4     18 4E 85 F1 | 	sub	fp, #24
13be8     3C 00 90 FD | 	jmp	#LR__1653
13bec                 | LR__1649
13bec     18 4E 05 F1 | 	add	fp, #24
13bf0     A7 0C 68 FC | 	wrlong	#6, fp
13bf4     18 4E 85 F1 | 	sub	fp, #24
13bf8     2C 00 90 FD | 	jmp	#LR__1653
13bfc                 | LR__1650
13bfc     18 4E 05 F1 | 	add	fp, #24
13c00     A7 10 68 FC | 	wrlong	#8, fp
13c04     18 4E 85 F1 | 	sub	fp, #24
13c08     1C 00 90 FD | 	jmp	#LR__1653
13c0c                 | LR__1651
13c0c     18 4E 05 F1 | 	add	fp, #24
13c10     A7 0A 68 FC | 	wrlong	#5, fp
13c14     18 4E 85 F1 | 	sub	fp, #24
13c18     0C 00 90 FD | 	jmp	#LR__1653
13c1c                 | LR__1652
13c1c     18 4E 05 F1 | 	add	fp, #24
13c20     A7 18 68 FC | 	wrlong	#12, fp
13c24     18 4E 85 F1 | 	sub	fp, #24
13c28                 | LR__1653
13c28                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13c28     18 4E 05 F1 | 	add	fp, #24
13c2c     A7 44 02 FB | 	rdlong	local16, fp
13c30     18 4E 85 F1 | 	sub	fp, #24
13c34     0C 44 0E F2 | 	cmp	local16, #12 wz
13c38     74 01 90 5D |  if_ne	jmp	#LR__1658
13c3c     1C 4E 05 F1 | 	add	fp, #28
13c40     A7 32 02 FB | 	rdlong	local07, fp
13c44     1C 4E 85 F1 | 	sub	fp, #28
13c48     00 04 00 FF 
13c4c     00 32 16 F2 | 	cmp	local07, ##524288 wc
13c50     5C 01 90 3D |  if_ae	jmp	#LR__1658
13c54                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13c54     52 00 00 FF 
13c58     BC E4 05 F1 | 	add	objptr, ##42172
13c5c     F2 44 02 FB | 	rdlong	local16, objptr
13c60     52 00 00 FF 
13c64     BC E4 85 F1 | 	sub	objptr, ##42172
13c68     1C 44 0E F2 | 	cmp	local16, #28 wz
13c6c     38 00 90 5D |  if_ne	jmp	#LR__1654
13c70     1C 4E 05 F1 | 	add	fp, #28
13c74     A7 44 02 FB | 	rdlong	local16, fp
13c78     14 4F 05 F1 | 	add	fp, #276
13c7c     A7 32 02 FB | 	rdlong	local07, fp
13c80     19 35 02 F6 | 	mov	local08, local07
13c84     02 34 66 F0 | 	shl	local08, #2
13c88     04 4F 85 F1 | 	sub	fp, #260
13c8c     A7 36 02 F6 | 	mov	local09, fp
13c90     A7 34 02 F1 | 	add	local08, fp
13c94     1A 13 02 FB | 	rdlong	arg01, local08
13c98     00 14 06 F6 | 	mov	arg02, #0
13c9c     2C 4E 85 F1 | 	sub	fp, #44
13ca0     C4 51 B1 FD | 	call	#__system____builtin_atoi
13ca4     22 FB 61 FC | 	wrlong	result1, local16
13ca8                 | LR__1654
13ca8                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13ca8     52 00 00 FF 
13cac     BC E4 05 F1 | 	add	objptr, ##42172
13cb0     F2 44 02 FB | 	rdlong	local16, objptr
13cb4     52 00 00 FF 
13cb8     BC E4 85 F1 | 	sub	objptr, ##42172
13cbc     1D 44 0E F2 | 	cmp	local16, #29 wz
13cc0     38 00 90 5D |  if_ne	jmp	#LR__1655
13cc4     1C 4E 05 F1 | 	add	fp, #28
13cc8     A7 44 02 FB | 	rdlong	local16, fp
13ccc     14 4F 05 F1 | 	add	fp, #276
13cd0     A7 32 02 FB | 	rdlong	local07, fp
13cd4     19 35 02 F6 | 	mov	local08, local07
13cd8     02 34 66 F0 | 	shl	local08, #2
13cdc     04 4F 85 F1 | 	sub	fp, #260
13ce0     A7 36 02 F6 | 	mov	local09, fp
13ce4     A7 34 02 F1 | 	add	local08, fp
13ce8     1A 13 02 FB | 	rdlong	arg01, local08
13cec     00 14 06 F6 | 	mov	arg02, #0
13cf0     2C 4E 85 F1 | 	sub	fp, #44
13cf4     70 51 B1 FD | 	call	#__system____builtin_atoi
13cf8     22 FB 61 FC | 	wrlong	result1, local16
13cfc                 | LR__1655
13cfc                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13cfc     52 00 00 FF 
13d00     BC E4 05 F1 | 	add	objptr, ##42172
13d04     F2 44 02 FB | 	rdlong	local16, objptr
13d08     52 00 00 FF 
13d0c     BC E4 85 F1 | 	sub	objptr, ##42172
13d10     1E 44 0E F2 | 	cmp	local16, #30 wz
13d14     3C 00 90 5D |  if_ne	jmp	#LR__1656
13d18     30 4F 05 F1 | 	add	fp, #304
13d1c     A7 32 02 FB | 	rdlong	local07, fp
13d20     02 32 66 F0 | 	shl	local07, #2
13d24     04 4F 85 F1 | 	sub	fp, #260
13d28     A7 34 02 F6 | 	mov	local08, fp
13d2c     A7 32 02 F1 | 	add	local07, fp
13d30     19 13 02 FB | 	rdlong	arg01, local07
13d34     2C 4E 85 F1 | 	sub	fp, #44
13d38     C0 52 B1 FD | 	call	#__system____builtin_atof
13d3c     28 4E 05 F1 | 	add	fp, #40
13d40     A7 FA 61 FC | 	wrlong	result1, fp
13d44     0C 4E 85 F1 | 	sub	fp, #12
13d48     A7 44 02 FB | 	rdlong	local16, fp
13d4c     1C 4E 85 F1 | 	sub	fp, #28
13d50     22 FB 61 FC | 	wrlong	result1, local16
13d54                 | LR__1656
13d54                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13d54     52 00 00 FF 
13d58     BC E4 05 F1 | 	add	objptr, ##42172
13d5c     F2 44 02 FB | 	rdlong	local16, objptr
13d60     52 00 00 FF 
13d64     BC E4 85 F1 | 	sub	objptr, ##42172
13d68     2B 44 0E F2 | 	cmp	local16, #43 wz
13d6c     18 00 90 5D |  if_ne	jmp	#LR__1657
13d70     1C 4E 05 F1 | 	add	fp, #28
13d74     A7 12 02 FB | 	rdlong	arg01, fp
13d78     0C 4E 85 F1 | 	sub	fp, #12
13d7c     A7 14 02 FB | 	rdlong	arg02, fp
13d80     10 4E 85 F1 | 	sub	fp, #16
13d84     09 15 62 FC | 	wrlong	arg02, arg01
13d88                 | LR__1657
13d88     1C 4E 05 F1 | 	add	fp, #28
13d8c     A7 12 02 FB | 	rdlong	arg01, fp
13d90     1C 4E 85 F1 | 	sub	fp, #28
13d94     08 12 06 F1 | 	add	arg01, #8
13d98     52 00 00 FF 
13d9c     BC E4 05 F1 | 	add	objptr, ##42172
13da0     F2 14 02 FB | 	rdlong	arg02, objptr
13da4     52 00 00 FF 
13da8     BC E4 85 F1 | 	sub	objptr, ##42172
13dac     09 15 62 FC | 	wrlong	arg02, arg01
13db0                 | LR__1658
13db0                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13db0     18 4E 05 F1 | 	add	fp, #24
13db4     A7 44 02 FB | 	rdlong	local16, fp
13db8     18 4E 85 F1 | 	sub	fp, #24
13dbc     0C 44 0E F2 | 	cmp	local16, #12 wz
13dc0     94 01 90 5D |  if_ne	jmp	#LR__1663
13dc4     1C 4E 05 F1 | 	add	fp, #28
13dc8     A7 32 02 FB | 	rdlong	local07, fp
13dcc     1C 4E 85 F1 | 	sub	fp, #28
13dd0     00 04 00 FF 
13dd4     00 32 16 F2 | 	cmp	local07, ##524288 wc
13dd8     7C 01 90 CD |  if_b	jmp	#LR__1663
13ddc                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13ddc     52 00 00 FF 
13de0     BC E4 05 F1 | 	add	objptr, ##42172
13de4     F2 44 02 FB | 	rdlong	local16, objptr
13de8     52 00 00 FF 
13dec     BC E4 85 F1 | 	sub	objptr, ##42172
13df0     1C 44 0E F2 | 	cmp	local16, #28 wz
13df4     40 00 90 5D |  if_ne	jmp	#LR__1659
13df8     1C 4E 05 F1 | 	add	fp, #28
13dfc     A7 44 02 FB | 	rdlong	local16, fp
13e00     14 4F 05 F1 | 	add	fp, #276
13e04     A7 32 02 FB | 	rdlong	local07, fp
13e08     19 35 02 F6 | 	mov	local08, local07
13e0c     02 34 66 F0 | 	shl	local08, #2
13e10     04 4F 85 F1 | 	sub	fp, #260
13e14     A7 36 02 F6 | 	mov	local09, fp
13e18     A7 34 02 F1 | 	add	local08, fp
13e1c     1A 13 02 FB | 	rdlong	arg01, local08
13e20     00 14 06 F6 | 	mov	arg02, #0
13e24     2C 4E 85 F1 | 	sub	fp, #44
13e28     3C 50 B1 FD | 	call	#__system____builtin_atoi
13e2c     FD 14 02 F6 | 	mov	arg02, result1
13e30     22 13 02 F6 | 	mov	arg01, local16
13e34     F4 E2 B0 FD | 	call	#_pslpoke
13e38                 | LR__1659
13e38                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13e38     52 00 00 FF 
13e3c     BC E4 05 F1 | 	add	objptr, ##42172
13e40     F2 44 02 FB | 	rdlong	local16, objptr
13e44     52 00 00 FF 
13e48     BC E4 85 F1 | 	sub	objptr, ##42172
13e4c     1D 44 0E F2 | 	cmp	local16, #29 wz
13e50     40 00 90 5D |  if_ne	jmp	#LR__1660
13e54     1C 4E 05 F1 | 	add	fp, #28
13e58     A7 44 02 FB | 	rdlong	local16, fp
13e5c     14 4F 05 F1 | 	add	fp, #276
13e60     A7 32 02 FB | 	rdlong	local07, fp
13e64     19 35 02 F6 | 	mov	local08, local07
13e68     02 34 66 F0 | 	shl	local08, #2
13e6c     04 4F 85 F1 | 	sub	fp, #260
13e70     A7 36 02 F6 | 	mov	local09, fp
13e74     A7 34 02 F1 | 	add	local08, fp
13e78     1A 13 02 FB | 	rdlong	arg01, local08
13e7c     00 14 06 F6 | 	mov	arg02, #0
13e80     2C 4E 85 F1 | 	sub	fp, #44
13e84     E0 4F B1 FD | 	call	#__system____builtin_atoi
13e88     FD 14 02 F6 | 	mov	arg02, result1
13e8c     22 13 02 F6 | 	mov	arg01, local16
13e90     98 E2 B0 FD | 	call	#_pslpoke
13e94                 | LR__1660
13e94                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13e94     52 00 00 FF 
13e98     BC E4 05 F1 | 	add	objptr, ##42172
13e9c     F2 44 02 FB | 	rdlong	local16, objptr
13ea0     52 00 00 FF 
13ea4     BC E4 85 F1 | 	sub	objptr, ##42172
13ea8     1E 44 0E F2 | 	cmp	local16, #30 wz
13eac     4C 00 90 5D |  if_ne	jmp	#LR__1661
13eb0     30 4F 05 F1 | 	add	fp, #304
13eb4     A7 32 02 FB | 	rdlong	local07, fp
13eb8     02 32 66 F0 | 	shl	local07, #2
13ebc     04 4F 85 F1 | 	sub	fp, #260
13ec0     A7 34 02 F6 | 	mov	local08, fp
13ec4     A7 32 02 F1 | 	add	local07, fp
13ec8     19 13 02 FB | 	rdlong	arg01, local07
13ecc     2C 4E 85 F1 | 	sub	fp, #44
13ed0     28 51 B1 FD | 	call	#__system____builtin_atof
13ed4     28 4E 05 F1 | 	add	fp, #40
13ed8     A7 FA 61 FC | 	wrlong	result1, fp
13edc     0C 4E 85 F1 | 	sub	fp, #12
13ee0     A7 44 02 FB | 	rdlong	local16, fp
13ee4     0C 4E 05 F1 | 	add	fp, #12
13ee8     A7 12 02 F6 | 	mov	arg01, fp
13eec     28 4E 85 F1 | 	sub	fp, #40
13ef0     09 15 02 FB | 	rdlong	arg02, arg01
13ef4     22 13 02 F6 | 	mov	arg01, local16
13ef8     30 E2 B0 FD | 	call	#_pslpoke
13efc                 | LR__1661
13efc                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13efc     52 00 00 FF 
13f00     BC E4 05 F1 | 	add	objptr, ##42172
13f04     F2 44 02 FB | 	rdlong	local16, objptr
13f08     52 00 00 FF 
13f0c     BC E4 85 F1 | 	sub	objptr, ##42172
13f10     2B 44 0E F2 | 	cmp	local16, #43 wz
13f14     18 00 90 5D |  if_ne	jmp	#LR__1662
13f18     1C 4E 05 F1 | 	add	fp, #28
13f1c     A7 12 02 FB | 	rdlong	arg01, fp
13f20     0C 4E 85 F1 | 	sub	fp, #12
13f24     A7 14 02 FB | 	rdlong	arg02, fp
13f28     10 4E 85 F1 | 	sub	fp, #16
13f2c     FC E1 B0 FD | 	call	#_pslpoke
13f30                 | LR__1662
13f30     1C 4E 05 F1 | 	add	fp, #28
13f34     A7 12 02 FB | 	rdlong	arg01, fp
13f38     1C 4E 85 F1 | 	sub	fp, #28
13f3c     08 12 06 F1 | 	add	arg01, #8
13f40     52 00 00 FF 
13f44     BC E4 05 F1 | 	add	objptr, ##42172
13f48     F2 14 02 FB | 	rdlong	arg02, objptr
13f4c     52 00 00 FF 
13f50     BC E4 85 F1 | 	sub	objptr, ##42172
13f54     D4 E1 B0 FD | 	call	#_pslpoke
13f58                 | LR__1663
13f58                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13f58     18 4E 05 F1 | 	add	fp, #24
13f5c     A7 44 02 FB | 	rdlong	local16, fp
13f60     18 4E 85 F1 | 	sub	fp, #24
13f64     05 44 0E F2 | 	cmp	local16, #5 wz
13f68     52 00 00 AF 
13f6c     BC E4 05 A1 |  if_e	add	objptr, ##42172
13f70     F2 42 02 AB |  if_e	rdlong	local15, objptr
13f74     52 00 00 AF 
13f78     BC E4 85 A1 |  if_e	sub	objptr, ##42172
13f7c     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
13f80     18 00 90 5D |  if_ne	jmp	#LR__1664
13f84     1C 4E 05 F1 | 	add	fp, #28
13f88     A7 12 02 FB | 	rdlong	arg01, fp
13f8c     0C 4E 85 F1 | 	sub	fp, #12
13f90     A7 14 02 FB | 	rdlong	arg02, fp
13f94     10 4E 85 F1 | 	sub	fp, #16
13f98     90 E1 B0 FD | 	call	#_pslpoke
13f9c                 | LR__1664
13f9c                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13f9c     18 4E 05 F1 | 	add	fp, #24
13fa0     A7 44 02 FB | 	rdlong	local16, fp
13fa4     18 4E 85 F1 | 	sub	fp, #24
13fa8     04 44 0E F2 | 	cmp	local16, #4 wz
13fac     54 00 90 5D |  if_ne	jmp	#LR__1665
13fb0     52 00 00 FF 
13fb4     BC E4 05 F1 | 	add	objptr, ##42172
13fb8     F2 42 02 FB | 	rdlong	local15, objptr
13fbc     52 00 00 FF 
13fc0     BC E4 85 F1 | 	sub	objptr, ##42172
13fc4     2B 42 0E F2 | 	cmp	local15, #43 wz
13fc8     38 00 90 AD |  if_e	jmp	#LR__1665
13fcc     1C 4E 05 F1 | 	add	fp, #28
13fd0     A7 44 02 FB | 	rdlong	local16, fp
13fd4     14 4F 05 F1 | 	add	fp, #276
13fd8     A7 34 02 FB | 	rdlong	local08, fp
13fdc     02 34 66 F0 | 	shl	local08, #2
13fe0     04 4F 85 F1 | 	sub	fp, #260
13fe4     A7 34 02 F1 | 	add	local08, fp
13fe8     1A 13 02 FB | 	rdlong	arg01, local08
13fec     00 14 06 F6 | 	mov	arg02, #0
13ff0     2C 4E 85 F1 | 	sub	fp, #44
13ff4     70 4E B1 FD | 	call	#__system____builtin_atoi
13ff8     FD 14 02 F6 | 	mov	arg02, result1
13ffc     22 13 02 F6 | 	mov	arg01, local16
14000     28 E1 B0 FD | 	call	#_pslpoke
14004                 | LR__1665
14004                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
14004     18 4E 05 F1 | 	add	fp, #24
14008     A7 44 02 FB | 	rdlong	local16, fp
1400c     18 4E 85 F1 | 	sub	fp, #24
14010     02 44 0E F2 | 	cmp	local16, #2 wz
14014     54 00 90 5D |  if_ne	jmp	#LR__1666
14018     52 00 00 FF 
1401c     BC E4 05 F1 | 	add	objptr, ##42172
14020     F2 42 02 FB | 	rdlong	local15, objptr
14024     52 00 00 FF 
14028     BC E4 85 F1 | 	sub	objptr, ##42172
1402c     2B 42 0E F2 | 	cmp	local15, #43 wz
14030     38 00 90 AD |  if_e	jmp	#LR__1666
14034     1C 4E 05 F1 | 	add	fp, #28
14038     A7 44 02 FB | 	rdlong	local16, fp
1403c     14 4F 05 F1 | 	add	fp, #276
14040     A7 34 02 FB | 	rdlong	local08, fp
14044     02 34 66 F0 | 	shl	local08, #2
14048     04 4F 85 F1 | 	sub	fp, #260
1404c     A7 34 02 F1 | 	add	local08, fp
14050     1A 13 02 FB | 	rdlong	arg01, local08
14054     00 14 06 F6 | 	mov	arg02, #0
14058     2C 4E 85 F1 | 	sub	fp, #44
1405c     08 4E B1 FD | 	call	#__system____builtin_atoi
14060     FD 14 02 F6 | 	mov	arg02, result1
14064     22 13 02 F6 | 	mov	arg01, local16
14068     08 E1 B0 FD | 	call	#_psdpoke
1406c                 | LR__1666
1406c                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1406c     18 4E 05 F1 | 	add	fp, #24
14070     A7 44 02 FB | 	rdlong	local16, fp
14074     18 4E 85 F1 | 	sub	fp, #24
14078     01 44 0E F2 | 	cmp	local16, #1 wz
1407c     54 00 90 5D |  if_ne	jmp	#LR__1667
14080     52 00 00 FF 
14084     BC E4 05 F1 | 	add	objptr, ##42172
14088     F2 42 02 FB | 	rdlong	local15, objptr
1408c     52 00 00 FF 
14090     BC E4 85 F1 | 	sub	objptr, ##42172
14094     2B 42 0E F2 | 	cmp	local15, #43 wz
14098     38 00 90 AD |  if_e	jmp	#LR__1667
1409c     1C 4E 05 F1 | 	add	fp, #28
140a0     A7 44 02 FB | 	rdlong	local16, fp
140a4     14 4F 05 F1 | 	add	fp, #276
140a8     A7 34 02 FB | 	rdlong	local08, fp
140ac     02 34 66 F0 | 	shl	local08, #2
140b0     04 4F 85 F1 | 	sub	fp, #260
140b4     A7 34 02 F1 | 	add	local08, fp
140b8     1A 13 02 FB | 	rdlong	arg01, local08
140bc     00 14 06 F6 | 	mov	arg02, #0
140c0     2C 4E 85 F1 | 	sub	fp, #44
140c4     A0 4D B1 FD | 	call	#__system____builtin_atoi
140c8     FD 14 02 F6 | 	mov	arg02, result1
140cc     22 13 02 F6 | 	mov	arg01, local16
140d0     E8 E0 B0 FD | 	call	#_pspoke
140d4                 | LR__1667
140d4                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
140d4     18 4E 05 F1 | 	add	fp, #24
140d8     A7 44 02 FB | 	rdlong	local16, fp
140dc     18 4E 85 F1 | 	sub	fp, #24
140e0     06 44 0E F2 | 	cmp	local16, #6 wz
140e4     64 00 90 5D |  if_ne	jmp	#LR__1668
140e8     52 00 00 FF 
140ec     BC E4 05 F1 | 	add	objptr, ##42172
140f0     F2 42 02 FB | 	rdlong	local15, objptr
140f4     52 00 00 FF 
140f8     BC E4 85 F1 | 	sub	objptr, ##42172
140fc     2B 42 0E F2 | 	cmp	local15, #43 wz
14100     48 00 90 AD |  if_e	jmp	#LR__1668
14104     30 4F 05 F1 | 	add	fp, #304
14108     A7 32 02 FB | 	rdlong	local07, fp
1410c     02 32 66 F0 | 	shl	local07, #2
14110     04 4F 85 F1 | 	sub	fp, #260
14114     A7 32 02 F1 | 	add	local07, fp
14118     19 13 02 FB | 	rdlong	arg01, local07
1411c     2C 4E 85 F1 | 	sub	fp, #44
14120     D8 4E B1 FD | 	call	#__system____builtin_atof
14124     28 4E 05 F1 | 	add	fp, #40
14128     A7 FA 61 FC | 	wrlong	result1, fp
1412c     0C 4E 85 F1 | 	sub	fp, #12
14130     A7 44 02 FB | 	rdlong	local16, fp
14134     0C 4E 05 F1 | 	add	fp, #12
14138     A7 12 02 F6 | 	mov	arg01, fp
1413c     28 4E 85 F1 | 	sub	fp, #40
14140     09 15 02 FB | 	rdlong	arg02, arg01
14144     22 13 02 F6 | 	mov	arg01, local16
14148     E0 DF B0 FD | 	call	#_pslpoke
1414c                 | LR__1668
1414c     30 4F 05 F1 | 	add	fp, #304
14150     A7 42 02 FB | 	rdlong	local15, fp
14154     01 42 06 F1 | 	add	local15, #1
14158     A7 42 62 FC | 	wrlong	local15, fp
1415c     30 4F 85 F1 | 	sub	fp, #304
14160     E4 F6 9F FD | 	jmp	#LR__1633
14164                 | LR__1669
14164                 | LR__1670
14164     A7 F0 03 F6 | 	mov	ptra, fp
14168     B2 00 A0 FD | 	call	#popregs_
1416c                 | _do_input_ret
1416c     2D 00 64 FD | 	ret
14170                 | 
14170                 | ' 
14170                 | ' ' ----------------  left$
14170                 | ' 
14170                 | ' sub do_left
14170                 | _do_left
14170     00 4A 05 F6 | 	mov	COUNT_, #0
14174     A8 00 A0 FD | 	call	#pushregs_
14178     14 F0 07 F1 | 	add	ptra, #20
1417c     4A 00 00 FF 
14180     80 E4 05 F1 | 	add	objptr, ##38016
14184     F2 16 02 FB | 	rdlong	arg03, objptr
14188     0B 15 02 F6 | 	mov	arg02, arg03
1418c     01 14 66 F0 | 	shl	arg02, #1
14190     0B 15 02 F1 | 	add	arg02, arg03
14194     02 14 66 F0 | 	shl	arg02, #2
14198     03 00 00 FF 
1419c     04 E4 85 F1 | 	sub	objptr, ##1540
141a0     F2 14 02 F1 | 	add	arg02, objptr
141a4     0A 17 02 FB | 	rdlong	arg03, arg02
141a8     0C 4E 05 F1 | 	add	fp, #12
141ac     A7 16 62 FC | 	wrlong	arg03, fp
141b0                 | ' 
141b0                 | ' numpar=compiledline(lineptr_e).result.uresult
141b0                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
141b0     0C 4E 85 F1 | 	sub	fp, #12
141b4     02 16 0E F2 | 	cmp	arg03, #2 wz
141b8     47 00 00 FF 
141bc     7C E4 85 F1 | 	sub	objptr, ##36476
141c0     40 00 90 AD |  if_e	jmp	#LR__1680
141c4     00 12 06 F6 | 	mov	arg01, #0
141c8     D4 74 B1 FD | 	call	#__system___getiolock_0599
141cc     FD 12 02 F6 | 	mov	arg01, result1
141d0     A4 17 B1 FD | 	call	#__system___lockmem
141d4     AE 01 00 FF 
141d8     F0 15 06 F6 | 	mov	arg02, ##@LR__5876
141dc     00 12 06 F6 | 	mov	arg01, #0
141e0     00 16 06 F6 | 	mov	arg03, #0
141e4     84 24 B1 FD | 	call	#__system___basic_print_string
141e8     00 12 06 F6 | 	mov	arg01, #0
141ec     B0 74 B1 FD | 	call	#__system___getiolock_0599
141f0     FD 00 68 FC | 	wrlong	#0, result1
141f4     27 12 06 F6 | 	mov	arg01, #39
141f8     00 14 06 F6 | 	mov	arg02, #0
141fc     8C DD B0 FD | 	call	#_printerror
14200     EC 00 90 FD | 	jmp	#LR__1683
14204                 | LR__1680
14204     78 8A BF FD | 	call	#_pop
14208     FF 16 02 F6 | 	mov	arg03, result3
1420c     A7 FA 61 FC | 	wrlong	result1, fp
14210     04 4E 05 F1 | 	add	fp, #4
14214     A7 FC 61 FC | 	wrlong	result2, fp
14218     04 4E 05 F1 | 	add	fp, #4
1421c     A7 16 62 FC | 	wrlong	arg03, fp
14220     08 4E 85 F1 | 	sub	fp, #8
14224     A7 12 02 F6 | 	mov	arg01, fp
14228     38 8C BF FD | 	call	#_converttoint
1422c     FD 16 02 F6 | 	mov	arg03, result1
14230     10 4E 05 F1 | 	add	fp, #16
14234     A7 16 62 FC | 	wrlong	arg03, fp
14238     10 4E 85 F1 | 	sub	fp, #16
1423c     40 8A BF FD | 	call	#_pop
14240     FF 16 02 F6 | 	mov	arg03, result3
14244     A7 FA 61 FC | 	wrlong	result1, fp
14248     04 4E 05 F1 | 	add	fp, #4
1424c     A7 FC 61 FC | 	wrlong	result2, fp
14250     04 4E 05 F1 | 	add	fp, #4
14254     A7 16 62 FC | 	wrlong	arg03, fp
14258                 | ' t1=pop() : arg=converttoint(t1)
14258                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14258     08 4E 85 F1 | 	sub	fp, #8
1425c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14260     18 00 90 5D |  if_ne	jmp	#LR__1681
14264     A7 12 02 FB | 	rdlong	arg01, fp
14268     8C 8B BF FD | 	call	#_convertstring
1426c     A7 FA 61 FC | 	wrlong	result1, fp
14270     08 4E 05 F1 | 	add	fp, #8
14274     A7 3E 68 FC | 	wrlong	#31, fp
14278     08 4E 85 F1 | 	sub	fp, #8
1427c                 | LR__1681
1427c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
1427c     08 4E 05 F1 | 	add	fp, #8
14280     A7 16 02 FB | 	rdlong	arg03, fp
14284     08 4E 85 F1 | 	sub	fp, #8
14288     1F 16 0E F2 | 	cmp	arg03, #31 wz
1428c     40 00 90 AD |  if_e	jmp	#LR__1682
14290     00 12 06 F6 | 	mov	arg01, #0
14294     08 74 B1 FD | 	call	#__system___getiolock_0599
14298     FD 12 02 F6 | 	mov	arg01, result1
1429c     D8 16 B1 FD | 	call	#__system___lockmem
142a0     AE 01 00 FF 
142a4     F8 15 06 F6 | 	mov	arg02, ##@LR__5877
142a8     00 12 06 F6 | 	mov	arg01, #0
142ac     00 16 06 F6 | 	mov	arg03, #0
142b0     B8 23 B1 FD | 	call	#__system___basic_print_string
142b4     00 12 06 F6 | 	mov	arg01, #0
142b8     E4 73 B1 FD | 	call	#__system___getiolock_0599
142bc     FD 00 68 FC | 	wrlong	#0, result1
142c0     0F 12 06 F6 | 	mov	arg01, #15
142c4     00 14 06 F6 | 	mov	arg02, #0
142c8     C0 DC B0 FD | 	call	#_printerror
142cc     20 00 90 FD | 	jmp	#LR__1683
142d0                 | LR__1682
142d0     A7 12 02 FB | 	rdlong	arg01, fp
142d4     10 4E 05 F1 | 	add	fp, #16
142d8     A7 14 02 FB | 	rdlong	arg02, fp
142dc     10 4E 85 F1 | 	sub	fp, #16
142e0     10 37 B1 FD | 	call	#__system__Left_S
142e4     A7 FA 61 FC | 	wrlong	result1, fp
142e8     A7 12 02 F6 | 	mov	arg01, fp
142ec     28 8A BF FD | 	call	#_push
142f0                 | LR__1683
142f0     A7 F0 03 F6 | 	mov	ptra, fp
142f4     B2 00 A0 FD | 	call	#popregs_
142f8                 | _do_left_ret
142f8     2D 00 64 FD | 	ret
142fc                 | 
142fc                 | ' 
142fc                 | ' ' ----------------  len
142fc                 | ' 
142fc                 | ' sub do_len
142fc                 | _do_len
142fc     02 4A 05 F6 | 	mov	COUNT_, #2
14300     A8 00 A0 FD | 	call	#pushregs_
14304     14 F0 07 F1 | 	add	ptra, #20
14308     4A 00 00 FF 
1430c     80 E4 05 F1 | 	add	objptr, ##38016
14310     F2 26 02 FB | 	rdlong	local01, objptr
14314     13 17 02 F6 | 	mov	arg03, local01
14318     01 16 66 F0 | 	shl	arg03, #1
1431c     13 17 02 F1 | 	add	arg03, local01
14320     02 16 66 F0 | 	shl	arg03, #2
14324     03 00 00 FF 
14328     04 E4 85 F1 | 	sub	objptr, ##1540
1432c     F2 16 02 F1 | 	add	arg03, objptr
14330     0B 17 02 FB | 	rdlong	arg03, arg03
14334     0C 4E 05 F1 | 	add	fp, #12
14338     A7 16 62 FC | 	wrlong	arg03, fp
1433c                 | ' 
1433c                 | ' numpar=compiledline(lineptr_e).result.uresult
1433c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1433c     0C 4E 85 F1 | 	sub	fp, #12
14340     02 16 16 F2 | 	cmp	arg03, #2 wc
14344     47 00 00 FF 
14348     7C E4 85 F1 | 	sub	objptr, ##36476
1434c     0C 4E 05 C1 |  if_b	add	fp, #12
14350     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14354     0C 4E 85 C1 |  if_b	sub	fp, #12
14358     40 00 90 4D |  if_c_and_nz	jmp	#LR__1690
1435c     00 12 06 F6 | 	mov	arg01, #0
14360     3C 73 B1 FD | 	call	#__system___getiolock_0599
14364     FD 12 02 F6 | 	mov	arg01, result1
14368     0C 16 B1 FD | 	call	#__system___lockmem
1436c     AF 01 00 FF 
14370     00 14 06 F6 | 	mov	arg02, ##@LR__5878
14374     00 12 06 F6 | 	mov	arg01, #0
14378     00 16 06 F6 | 	mov	arg03, #0
1437c     EC 22 B1 FD | 	call	#__system___basic_print_string
14380     00 12 06 F6 | 	mov	arg01, #0
14384     18 73 B1 FD | 	call	#__system___getiolock_0599
14388     FD 00 68 FC | 	wrlong	#0, result1
1438c     27 12 06 F6 | 	mov	arg01, #39
14390     00 14 06 F6 | 	mov	arg02, #0
14394     F4 DB B0 FD | 	call	#_printerror
14398     C8 00 90 FD | 	jmp	#LR__1695
1439c                 | LR__1690
1439c     E0 88 BF FD | 	call	#_pop
143a0     FF 16 02 F6 | 	mov	arg03, result3
143a4     A7 FA 61 FC | 	wrlong	result1, fp
143a8     04 4E 05 F1 | 	add	fp, #4
143ac     A7 FC 61 FC | 	wrlong	result2, fp
143b0     04 4E 05 F1 | 	add	fp, #4
143b4     A7 16 62 FC | 	wrlong	arg03, fp
143b8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
143b8     08 4E 85 F1 | 	sub	fp, #8
143bc     2B 16 0E F2 | 	cmp	arg03, #43 wz
143c0     18 00 90 5D |  if_ne	jmp	#LR__1691
143c4     A7 12 02 FB | 	rdlong	arg01, fp
143c8     2C 8A BF FD | 	call	#_convertstring
143cc     A7 FA 61 FC | 	wrlong	result1, fp
143d0     08 4E 05 F1 | 	add	fp, #8
143d4     A7 3E 68 FC | 	wrlong	#31, fp
143d8     08 4E 85 F1 | 	sub	fp, #8
143dc                 | LR__1691
143dc                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
143dc     08 4E 05 F1 | 	add	fp, #8
143e0     A7 16 02 FB | 	rdlong	arg03, fp
143e4     08 4E 85 F1 | 	sub	fp, #8
143e8     1F 16 0E F2 | 	cmp	arg03, #31 wz
143ec     40 00 90 AD |  if_e	jmp	#LR__1692
143f0     00 12 06 F6 | 	mov	arg01, #0
143f4     A8 72 B1 FD | 	call	#__system___getiolock_0599
143f8     FD 12 02 F6 | 	mov	arg01, result1
143fc     78 15 B1 FD | 	call	#__system___lockmem
14400     AF 01 00 FF 
14404     06 14 06 F6 | 	mov	arg02, ##@LR__5879
14408     00 12 06 F6 | 	mov	arg01, #0
1440c     00 16 06 F6 | 	mov	arg03, #0
14410     58 22 B1 FD | 	call	#__system___basic_print_string
14414     00 12 06 F6 | 	mov	arg01, #0
14418     84 72 B1 FD | 	call	#__system___getiolock_0599
1441c     FD 00 68 FC | 	wrlong	#0, result1
14420     0F 12 06 F6 | 	mov	arg01, #15
14424     00 14 06 F6 | 	mov	arg02, #0
14428     60 DB B0 FD | 	call	#_printerror
1442c     34 00 90 FD | 	jmp	#LR__1695
14430                 | LR__1692
14430     A7 12 02 FB | 	rdlong	arg01, fp
14434     09 29 02 F6 | 	mov	local02, arg01
14438     97 06 48 FB | 	callpa	#(@LR__1694-@LR__1693)>>2,fcache_load_ptr_
1443c                 | LR__1693
1443c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14440     01 28 06 51 |  if_ne	add	local02, #1
14444     F4 FF 9F 5D |  if_ne	jmp	#LR__1693
14448                 | LR__1694
14448     09 29 82 F1 | 	sub	local02, arg01
1444c     A7 28 62 FC | 	wrlong	local02, fp
14450     08 4E 05 F1 | 	add	fp, #8
14454     A7 38 68 FC | 	wrlong	#28, fp
14458     08 4E 85 F1 | 	sub	fp, #8
1445c     A7 12 02 F6 | 	mov	arg01, fp
14460     B4 88 BF FD | 	call	#_push
14464                 | LR__1695
14464     A7 F0 03 F6 | 	mov	ptra, fp
14468     B2 00 A0 FD | 	call	#popregs_
1446c                 | _do_len_ret
1446c     2D 00 64 FD | 	ret
14470                 | 
14470                 | ' 
14470                 | ' ' ----------------  list
14470                 | ' 
14470                 | ' sub do_list
14470                 | _do_list
14470     02 4A 05 F6 | 	mov	COUNT_, #2
14474     A8 00 A0 FD | 	call	#pushregs_
14478     B8 F0 07 F1 | 	add	ptra, #184
1447c     04 4E 05 F1 | 	add	fp, #4
14480     A7 00 68 FC | 	wrlong	#0, fp
14484     04 4E 05 F1 | 	add	fp, #4
14488     FF FF BF FF 
1448c     A7 FE 6B FC | 	wrlong	##2147483647, fp
14490     08 4E 85 F1 | 	sub	fp, #8
14494     4A 00 00 FF 
14498     80 E4 05 F1 | 	add	objptr, ##38016
1449c     F2 26 02 FB | 	rdlong	local01, objptr
144a0     13 17 02 F6 | 	mov	arg03, local01
144a4     01 16 66 F0 | 	shl	arg03, #1
144a8     13 17 02 F1 | 	add	arg03, local01
144ac     02 16 66 F0 | 	shl	arg03, #2
144b0     03 00 00 FF 
144b4     04 E4 85 F1 | 	sub	objptr, ##1540
144b8     F2 16 02 F1 | 	add	arg03, objptr
144bc     0B 17 02 FB | 	rdlong	arg03, arg03
144c0     A7 16 62 FC | 	wrlong	arg03, fp
144c4                 | ' 
144c4                 | ' startline=0 : endline=$7FFFFFFF
144c4                 | ' numpar=compiledline(lineptr_e).result.uresult
144c4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
144c4     01 16 0E F2 | 	cmp	arg03, #1 wz
144c8     47 00 00 FF 
144cc     7C E4 85 F1 | 	sub	objptr, ##36476
144d0     3C 00 90 5D |  if_ne	jmp	#LR__1700
144d4     A8 87 BF FD | 	call	#_pop
144d8     FF 26 02 F6 | 	mov	local01, result3
144dc     0C 4E 05 F1 | 	add	fp, #12
144e0     A7 FA 61 FC | 	wrlong	result1, fp
144e4     04 4E 05 F1 | 	add	fp, #4
144e8     A7 FC 61 FC | 	wrlong	result2, fp
144ec     04 4E 05 F1 | 	add	fp, #4
144f0     A7 26 62 FC | 	wrlong	local01, fp
144f4     08 4E 85 F1 | 	sub	fp, #8
144f8     A7 12 02 F6 | 	mov	arg01, fp
144fc     0C 4E 85 F1 | 	sub	fp, #12
14500     60 89 BF FD | 	call	#_converttoint
14504     04 4E 05 F1 | 	add	fp, #4
14508     A7 FA 61 FC | 	wrlong	result1, fp
1450c     04 4E 85 F1 | 	sub	fp, #4
14510                 | LR__1700
14510                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14510     A7 16 02 FB | 	rdlong	arg03, fp
14514     02 16 0E F2 | 	cmp	arg03, #2 wz
14518     7C 00 90 5D |  if_ne	jmp	#LR__1701
1451c     60 87 BF FD | 	call	#_pop
14520     FF 26 02 F6 | 	mov	local01, result3
14524     0C 4E 05 F1 | 	add	fp, #12
14528     A7 FA 61 FC | 	wrlong	result1, fp
1452c     04 4E 05 F1 | 	add	fp, #4
14530     A7 FC 61 FC | 	wrlong	result2, fp
14534     04 4E 05 F1 | 	add	fp, #4
14538     A7 26 62 FC | 	wrlong	local01, fp
1453c     08 4E 85 F1 | 	sub	fp, #8
14540     A7 12 02 F6 | 	mov	arg01, fp
14544     0C 4E 85 F1 | 	sub	fp, #12
14548     18 89 BF FD | 	call	#_converttoint
1454c     FD 26 02 F6 | 	mov	local01, result1
14550     08 4E 05 F1 | 	add	fp, #8
14554     A7 26 62 FC | 	wrlong	local01, fp
14558     08 4E 85 F1 | 	sub	fp, #8
1455c     20 87 BF FD | 	call	#_pop
14560     FF 26 02 F6 | 	mov	local01, result3
14564     0C 4E 05 F1 | 	add	fp, #12
14568     A7 FA 61 FC | 	wrlong	result1, fp
1456c     04 4E 05 F1 | 	add	fp, #4
14570     A7 FC 61 FC | 	wrlong	result2, fp
14574     04 4E 05 F1 | 	add	fp, #4
14578     A7 26 62 FC | 	wrlong	local01, fp
1457c     08 4E 85 F1 | 	sub	fp, #8
14580     A7 12 02 F6 | 	mov	arg01, fp
14584     0C 4E 85 F1 | 	sub	fp, #12
14588     D8 88 BF FD | 	call	#_converttoint
1458c     04 4E 05 F1 | 	add	fp, #4
14590     A7 FA 61 FC | 	wrlong	result1, fp
14594     04 4E 85 F1 | 	sub	fp, #4
14598                 | LR__1701
14598                 | ' 
14598                 | ' 
14598                 | ' print
14598     00 12 06 F6 | 	mov	arg01, #0
1459c     00 71 B1 FD | 	call	#__system___getiolock_0599
145a0     FD 12 02 F6 | 	mov	arg01, result1
145a4     D0 13 B1 FD | 	call	#__system___lockmem
145a8     00 12 06 F6 | 	mov	arg01, #0
145ac     0A 14 06 F6 | 	mov	arg02, #10
145b0     00 16 06 F6 | 	mov	arg03, #0
145b4     5C 20 B1 FD | 	call	#__system___basic_print_char
145b8     00 12 06 F6 | 	mov	arg01, #0
145bc     E0 70 B1 FD | 	call	#__system___getiolock_0599
145c0     FD 00 68 FC | 	wrlong	#0, result1
145c4     4A 00 00 FF 
145c8     88 E4 05 F1 | 	add	objptr, ##38024
145cc     F2 28 02 FB | 	rdlong	local02, objptr
145d0     08 00 00 FF 
145d4     40 E4 05 F1 | 	add	objptr, ##4160
145d8     F2 28 62 FC | 	wrlong	local02, objptr
145dc     52 00 00 FF 
145e0     C8 E4 85 F1 | 	sub	objptr, ##42184
145e4                 | ' do 
145e4                 | LR__1702
145e4     20 4E 05 F1 | 	add	fp, #32
145e8     A7 12 02 F6 | 	mov	arg01, fp
145ec     20 4E 85 F1 | 	sub	fp, #32
145f0     52 00 00 FF 
145f4     C8 E4 05 F1 | 	add	objptr, ##42184
145f8     F2 14 02 FB | 	rdlong	arg02, objptr
145fc     18 16 06 F6 | 	mov	arg03, #24
14600     46 00 00 FF 
14604     FC E5 85 F1 | 	sub	objptr, ##36348
14608     E4 06 B1 FD | 	call	#_psram_spin2_read1
1460c     0B 00 00 FF 
14610     CC E4 85 F1 | 	sub	objptr, ##5836
14614                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14614                 | '   
14614                 | '   if header(0)<> $FFFFFFFF then
14614     20 4E 05 F1 | 	add	fp, #32
14618     A7 28 02 FB | 	rdlong	local02, fp
1461c     20 4E 85 F1 | 	sub	fp, #32
14620     FF FF 7F FF 
14624     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14628     A8 00 90 AD |  if_e	jmp	#LR__1704
1462c     38 4E 05 F1 | 	add	fp, #56
14630     3F 16 06 F6 | 	mov	arg03, #63
14634     28 16 62 FD | 	setq	arg03
14638     A7 00 68 FC | 	wrlong	#0, fp
1463c     A7 12 02 F6 | 	mov	arg01, fp
14640     10 4E 85 F1 | 	sub	fp, #16
14644     A7 14 02 FB | 	rdlong	arg02, fp
14648     04 4E 05 F1 | 	add	fp, #4
1464c     A7 16 02 FB | 	rdlong	arg03, fp
14650     2C 4E 85 F1 | 	sub	fp, #44
14654     0B 00 00 FF 
14658     CC E4 05 F1 | 	add	objptr, ##5836
1465c     90 06 B1 FD | 	call	#_psram_spin2_read1
14660     0B 00 00 FF 
14664     CC E4 85 F1 | 	sub	objptr, ##5836
14668                 | '     longfill(linebuf,0,64)
14668                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14668                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14668     20 4E 05 F1 | 	add	fp, #32
1466c     A7 28 02 FB | 	rdlong	local02, fp
14670     1C 4E 85 F1 | 	sub	fp, #28
14674     A7 26 02 FB | 	rdlong	local01, fp
14678     04 4E 85 F1 | 	sub	fp, #4
1467c     13 29 52 F2 | 	cmps	local02, local01 wc
14680     30 00 90 CD |  if_b	jmp	#LR__1703
14684     20 4E 05 F1 | 	add	fp, #32
14688     A7 28 02 FB | 	rdlong	local02, fp
1468c     18 4E 85 F1 | 	sub	fp, #24
14690     A7 16 02 FB | 	rdlong	arg03, fp
14694     08 4E 85 F1 | 	sub	fp, #8
14698     0B 29 5A F2 | 	cmps	local02, arg03 wcz
1469c     14 00 90 1D |  if_a	jmp	#LR__1703
146a0     38 4E 05 F1 | 	add	fp, #56
146a4     A7 12 02 F6 | 	mov	arg01, fp
146a8     38 4E 85 F1 | 	sub	fp, #56
146ac                 | ' 
146ac                 | ' write(text)
146ac     04 FA B0 FD | 	call	#_hg010b_spin2_write
146b0                 | ' crlf
146b0     00 FF B0 FD | 	call	#_hg010b_spin2_crlf
146b4                 | LR__1703
146b4     34 4E 05 F1 | 	add	fp, #52
146b8     A7 28 02 FB | 	rdlong	local02, fp
146bc     34 4E 85 F1 | 	sub	fp, #52
146c0     52 00 00 FF 
146c4     C8 E4 05 F1 | 	add	objptr, ##42184
146c8     F2 28 62 FC | 	wrlong	local02, objptr
146cc     52 00 00 FF 
146d0     C8 E4 85 F1 | 	sub	objptr, ##42184
146d4                 | LR__1704
146d4     34 4E 05 F1 | 	add	fp, #52
146d8     A7 28 02 FB | 	rdlong	local02, fp
146dc     34 4E 85 F1 | 	sub	fp, #52
146e0     FF FF 3F FF 
146e4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
146e8     20 4E 05 51 |  if_ne	add	fp, #32
146ec     A7 26 02 5B |  if_ne	rdlong	local01, fp
146f0     20 4E 85 51 |  if_ne	sub	fp, #32
146f4     FF FF 7F 5F 
146f8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
146fc     E4 FE 9F 5D |  if_ne	jmp	#LR__1702
14700     A7 F0 03 F6 | 	mov	ptra, fp
14704     B2 00 A0 FD | 	call	#popregs_
14708                 | _do_list_ret
14708     2D 00 64 FD | 	ret
1470c                 | 
1470c                 | ' 
1470c                 | ' '-------------------- load
1470c                 | ' 
1470c                 | ' sub do_load(amode=0 as integer)  
1470c                 | _do_load
1470c     01 4A 05 F6 | 	mov	COUNT_, #1
14710     A8 00 A0 FD | 	call	#pushregs_
14714     AC F0 07 F1 | 	add	ptra, #172
14718     A7 12 62 FC | 	wrlong	arg01, fp
1471c     52 00 00 FF 
14720     80 E4 05 F1 | 	add	objptr, ##42112
14724     F2 02 68 FC | 	wrlong	#1, objptr
14728     08 00 00 FF 
1472c     00 E4 85 F1 | 	sub	objptr, ##4096
14730     F2 14 02 FB | 	rdlong	arg02, objptr
14734     0A 13 02 F6 | 	mov	arg01, arg02
14738     01 12 66 F0 | 	shl	arg01, #1
1473c     0A 13 02 F1 | 	add	arg01, arg02
14740     02 12 66 F0 | 	shl	arg01, #2
14744     03 00 00 FF 
14748     04 E4 85 F1 | 	sub	objptr, ##1540
1474c     F2 12 02 F1 | 	add	arg01, objptr
14750     09 15 02 FB | 	rdlong	arg02, arg01
14754     1C 4E 05 F1 | 	add	fp, #28
14758     A7 14 62 FC | 	wrlong	arg02, fp
1475c     8C 4E 05 F1 | 	add	fp, #140
14760     A7 12 02 F6 | 	mov	arg01, fp
14764     47 00 00 FF 
14768     7C E4 85 F1 | 	sub	objptr, ##36476
1476c     80 4E 85 F1 | 	sub	fp, #128
14770     09 4F 61 FC | 	wrlong	fp, arg01
14774                 | ' 
14774                 | ' inload=1
14774                 | ' numpar=compiledline(lineptr_e).result.uresult
14774                 | ' lpoke varptr(line2$),varptr(line2)
14774                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14774     0C 4E 85 F1 | 	sub	fp, #12
14778     A7 26 02 FB | 	rdlong	local01, fp
1477c     1C 4E 85 F1 | 	sub	fp, #28
14780     01 26 56 F2 | 	cmps	local01, #1 wc
14784     24 00 90 CD |  if_b	jmp	#LR__1710
14788     F4 84 BF FD | 	call	#_pop
1478c     04 4E 05 F1 | 	add	fp, #4
14790     A7 FA 61 FC | 	wrlong	result1, fp
14794     04 4E 05 F1 | 	add	fp, #4
14798     A7 FC 61 FC | 	wrlong	result2, fp
1479c     04 4E 05 F1 | 	add	fp, #4
147a0     A7 FE 61 FC | 	wrlong	result3, fp
147a4     0C 4E 85 F1 | 	sub	fp, #12
147a8     28 00 90 FD | 	jmp	#LR__1711
147ac                 | LR__1710
147ac     52 00 00 FF 
147b0     70 E4 05 F1 | 	add	objptr, ##42096
147b4     F2 26 02 FB | 	rdlong	local01, objptr
147b8     52 00 00 FF 
147bc     70 E4 85 F1 | 	sub	objptr, ##42096
147c0     04 4E 05 F1 | 	add	fp, #4
147c4     A7 26 62 FC | 	wrlong	local01, fp
147c8     08 4E 05 F1 | 	add	fp, #8
147cc     A7 3E 68 FC | 	wrlong	#31, fp
147d0     0C 4E 85 F1 | 	sub	fp, #12
147d4                 | LR__1711
147d4                 | ' 'print "popped "; t1.result.uresult, t1.result_type
147d4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
147d4     0C 4E 05 F1 | 	add	fp, #12
147d8     A7 26 02 FB | 	rdlong	local01, fp
147dc     0C 4E 85 F1 | 	sub	fp, #12
147e0     2B 26 0E F2 | 	cmp	local01, #43 wz
147e4     24 00 90 5D |  if_ne	jmp	#LR__1712
147e8     04 4E 05 F1 | 	add	fp, #4
147ec     A7 12 02 FB | 	rdlong	arg01, fp
147f0     04 4E 85 F1 | 	sub	fp, #4
147f4     00 86 BF FD | 	call	#_convertstring
147f8     04 4E 05 F1 | 	add	fp, #4
147fc     A7 FA 61 FC | 	wrlong	result1, fp
14800     08 4E 05 F1 | 	add	fp, #8
14804     A7 3E 68 FC | 	wrlong	#31, fp
14808     0C 4E 85 F1 | 	sub	fp, #12
1480c                 | LR__1712
1480c                 | ' if t1.result_type=result_string then
1480c     0C 4E 05 F1 | 	add	fp, #12
14810     A7 26 02 FB | 	rdlong	local01, fp
14814     0C 4E 85 F1 | 	sub	fp, #12
14818     1F 26 0E F2 | 	cmp	local01, #31 wz
1481c     E0 02 90 5D |  if_ne	jmp	#LR__1718
14820                 | '   if amode<>1234 then do_new
14820     A7 26 02 FB | 	rdlong	local01, fp
14824     02 00 00 FF 
14828     D2 26 0E F2 | 	cmp	local01, ##1234 wz
1482c     08 0E B0 5D |  if_ne	call	#_do_new
14830                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14830     04 4E 05 F1 | 	add	fp, #4
14834     A7 12 02 FB | 	rdlong	arg01, fp
14838     04 4E 85 F1 | 	sub	fp, #4
1483c     AF 01 00 FF 
14840     0C 14 06 F6 | 	mov	arg02, ##@LR__5880
14844     58 11 B1 FD | 	call	#__system___string_cmp
14848     00 FA 0D F2 | 	cmp	result1, #0 wz
1484c     24 00 90 5D |  if_ne	jmp	#LR__1713
14850     52 00 00 FF 
14854     70 E4 05 F1 | 	add	objptr, ##42096
14858     F2 26 02 FB | 	rdlong	local01, objptr
1485c     52 00 00 FF 
14860     70 E4 85 F1 | 	sub	objptr, ##42096
14864     04 4E 05 F1 | 	add	fp, #4
14868     A7 26 62 FC | 	wrlong	local01, fp
1486c     04 4E 85 F1 | 	sub	fp, #4
14870     20 00 90 FD | 	jmp	#LR__1714
14874                 | LR__1713
14874     04 4E 05 F1 | 	add	fp, #4
14878     A7 26 02 FB | 	rdlong	local01, fp
1487c     04 4E 85 F1 | 	sub	fp, #4
14880     52 00 00 FF 
14884     70 E4 05 F1 | 	add	objptr, ##42096
14888     F2 26 62 FC | 	wrlong	local01, objptr
1488c     52 00 00 FF 
14890     70 E4 85 F1 | 	sub	objptr, ##42096
14894                 | LR__1714
14894                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14894     09 12 06 F6 | 	mov	arg01, #9
14898     34 64 B1 FD | 	call	#__system__close
1489c     09 26 06 F6 | 	mov	local01, #9
148a0     4A 00 00 FF 
148a4     94 E4 05 F1 | 	add	objptr, ##38036
148a8     F2 12 02 FB | 	rdlong	arg01, objptr
148ac     4A 00 00 FF 
148b0     94 E4 85 F1 | 	sub	objptr, ##38036
148b4     AF 01 00 FF 
148b8     0D 14 06 F6 | 	mov	arg02, ##@LR__5881
148bc     14 11 B1 FD | 	call	#__system___string_concat
148c0     FD 12 02 F6 | 	mov	arg01, result1
148c4     04 4E 05 F1 | 	add	fp, #4
148c8     A7 14 02 FB | 	rdlong	arg02, fp
148cc     04 4E 85 F1 | 	sub	fp, #4
148d0     00 11 B1 FD | 	call	#__system___string_concat
148d4     FD 14 02 F6 | 	mov	arg02, result1
148d8     13 13 02 F6 | 	mov	arg01, local01
148dc     00 16 06 F6 | 	mov	arg03, #0
148e0     98 1C B1 FD | 	call	#__system___basic_open_string
148e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
148e8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
148ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
148f0     14 4E 05 F1 | 	add	fp, #20
148f4     A7 FA 61 FC | 	wrlong	result1, fp
148f8                 | '   r=geterr() 
148f8                 | '   if r then 
148f8     14 4E 85 F1 | 	sub	fp, #20
148fc     50 01 90 AD |  if_e	jmp	#LR__1716
14900                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14900     09 12 06 F6 | 	mov	arg01, #9
14904     C8 63 B1 FD | 	call	#__system__close
14908     09 26 06 F6 | 	mov	local01, #9
1490c     4A 00 00 FF 
14910     94 E4 05 F1 | 	add	objptr, ##38036
14914     F2 12 02 FB | 	rdlong	arg01, objptr
14918     4A 00 00 FF 
1491c     94 E4 85 F1 | 	sub	objptr, ##38036
14920     AF 01 00 FF 
14924     0F 14 06 F6 | 	mov	arg02, ##@LR__5882
14928     A8 10 B1 FD | 	call	#__system___string_concat
1492c     FD 12 02 F6 | 	mov	arg01, result1
14930     04 4E 05 F1 | 	add	fp, #4
14934     A7 14 02 FB | 	rdlong	arg02, fp
14938     04 4E 85 F1 | 	sub	fp, #4
1493c     94 10 B1 FD | 	call	#__system___string_concat
14940     FD 12 02 F6 | 	mov	arg01, result1
14944     AF 01 00 FF 
14948     11 14 06 F6 | 	mov	arg02, ##@LR__5883
1494c     84 10 B1 FD | 	call	#__system___string_concat
14950     FD 14 02 F6 | 	mov	arg02, result1
14954     13 13 02 F6 | 	mov	arg01, local01
14958     00 16 06 F6 | 	mov	arg03, #0
1495c     1C 1C B1 FD | 	call	#__system___basic_open_string
14960     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14964     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14968     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1496c     14 4E 05 F1 | 	add	fp, #20
14970     A7 FA 61 FC | 	wrlong	result1, fp
14974                 | '     r=geterr() 
14974                 | '     if r then 
14974     14 4E 85 F1 | 	sub	fp, #20
14978     A0 00 90 AD |  if_e	jmp	#LR__1715
1497c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
1497c     00 12 06 F6 | 	mov	arg01, #0
14980     1C 6D B1 FD | 	call	#__system___getiolock_0599
14984     FD 12 02 F6 | 	mov	arg01, result1
14988     EC 0F B1 FD | 	call	#__system___lockmem
1498c     AF 01 00 FF 
14990     16 14 06 F6 | 	mov	arg02, ##@LR__5884
14994     00 12 06 F6 | 	mov	arg01, #0
14998     00 16 06 F6 | 	mov	arg03, #0
1499c     CC 1C B1 FD | 	call	#__system___basic_print_string
149a0     14 4E 05 F1 | 	add	fp, #20
149a4     A7 14 02 FB | 	rdlong	arg02, fp
149a8     14 4E 85 F1 | 	sub	fp, #20
149ac     00 12 06 F6 | 	mov	arg01, #0
149b0     00 16 06 F6 | 	mov	arg03, #0
149b4     0A 18 06 F6 | 	mov	arg04, #10
149b8     F4 1C B1 FD | 	call	#__system___basic_print_integer
149bc     AF 01 00 FF 
149c0     24 14 06 F6 | 	mov	arg02, ##@LR__5885
149c4     00 12 06 F6 | 	mov	arg01, #0
149c8     00 16 06 F6 | 	mov	arg03, #0
149cc     9C 1C B1 FD | 	call	#__system___basic_print_string
149d0     00 26 06 F6 | 	mov	local01, #0
149d4     14 4E 05 F1 | 	add	fp, #20
149d8     A7 12 02 FB | 	rdlong	arg01, fp
149dc     14 4E 85 F1 | 	sub	fp, #20
149e0     20 39 B1 FD | 	call	#__system___strerror
149e4     FD 14 02 F6 | 	mov	arg02, result1
149e8     13 13 02 F6 | 	mov	arg01, local01
149ec     00 16 06 F6 | 	mov	arg03, #0
149f0     78 1C B1 FD | 	call	#__system___basic_print_string
149f4     00 12 06 F6 | 	mov	arg01, #0
149f8     0A 14 06 F6 | 	mov	arg02, #10
149fc     00 16 06 F6 | 	mov	arg03, #0
14a00     10 1C B1 FD | 	call	#__system___basic_print_char
14a04     00 12 06 F6 | 	mov	arg01, #0
14a08     94 6C B1 FD | 	call	#__system___getiolock_0599
14a0c     FD 00 68 FC | 	wrlong	#0, result1
14a10     09 12 06 F6 | 	mov	arg01, #9
14a14     B8 62 B1 FD | 	call	#__system__close
14a18     94 01 90 FD | 	jmp	#LR__1720
14a1c                 | LR__1715
14a1c     52 00 00 FF 
14a20     70 E4 05 F1 | 	add	objptr, ##42096
14a24     F2 12 02 FB | 	rdlong	arg01, objptr
14a28     52 00 00 FF 
14a2c     70 E4 85 F1 | 	sub	objptr, ##42096
14a30     AF 01 00 FF 
14a34     27 14 06 F6 | 	mov	arg02, ##@LR__5886
14a38     98 0F B1 FD | 	call	#__system___string_concat
14a3c     52 00 00 FF 
14a40     70 E4 05 F1 | 	add	objptr, ##42096
14a44     F2 FA 61 FC | 	wrlong	result1, objptr
14a48     52 00 00 FF 
14a4c     70 E4 85 F1 | 	sub	objptr, ##42096
14a50                 | LR__1716
14a50                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14a50     09 12 06 F6 | 	mov	arg01, #9
14a54     78 62 B1 FD | 	call	#__system__close
14a58     09 26 06 F6 | 	mov	local01, #9
14a5c     4A 00 00 FF 
14a60     94 E4 05 F1 | 	add	objptr, ##38036
14a64     F2 12 02 FB | 	rdlong	arg01, objptr
14a68     4A 00 00 FF 
14a6c     94 E4 85 F1 | 	sub	objptr, ##38036
14a70     AF 01 00 FF 
14a74     2C 14 06 F6 | 	mov	arg02, ##@LR__5887
14a78     58 0F B1 FD | 	call	#__system___string_concat
14a7c     FD 12 02 F6 | 	mov	arg01, result1
14a80     52 00 00 FF 
14a84     70 E4 05 F1 | 	add	objptr, ##42096
14a88     F2 14 02 FB | 	rdlong	arg02, objptr
14a8c     52 00 00 FF 
14a90     70 E4 85 F1 | 	sub	objptr, ##42096
14a94     3C 0F B1 FD | 	call	#__system___string_concat
14a98     FD 14 02 F6 | 	mov	arg02, result1
14a9c     13 13 02 F6 | 	mov	arg01, local01
14aa0     00 16 06 F6 | 	mov	arg03, #0
14aa4     D4 1A B1 FD | 	call	#__system___basic_open_string
14aa8                 | '   do
14aa8                 | LR__1717
14aa8     09 12 06 F6 | 	mov	arg01, #9
14aac     D4 10 B1 FD | 	call	#__system___basic_read_line
14ab0     FD 26 02 F6 | 	mov	local01, result1
14ab4     37 00 00 FF 
14ab8     1C E4 05 F1 | 	add	objptr, ##28188
14abc     F2 26 62 FC | 	wrlong	local01, objptr
14ac0     37 00 00 FF 
14ac4     1C E4 85 F1 | 	sub	objptr, ##28188
14ac8     F0 CC BE FD | 	call	#_interpret
14acc     37 00 00 FF 
14ad0     1C E4 05 F1 | 	add	objptr, ##28188
14ad4     F2 12 02 FB | 	rdlong	arg01, objptr
14ad8     37 00 00 FF 
14adc     1C E4 85 F1 | 	sub	objptr, ##28188
14ae0     AF 01 00 FF 
14ae4     2E 14 06 F6 | 	mov	arg02, ##@LR__5888
14ae8     B4 0E B1 FD | 	call	#__system___string_cmp
14aec     00 FA 0D F2 | 	cmp	result1, #0 wz
14af0     B4 FF 9F 5D |  if_ne	jmp	#LR__1717
14af4                 | '   close #9   
14af4     09 12 06 F6 | 	mov	arg01, #9
14af8     D4 61 B1 FD | 	call	#__system__close
14afc     0C 00 90 FD | 	jmp	#LR__1719
14b00                 | LR__1718
14b00     1E 12 06 F6 | 	mov	arg01, #30
14b04     00 14 06 F6 | 	mov	arg02, #0
14b08     80 D4 B0 FD | 	call	#_printerror
14b0c                 | LR__1719
14b0c                 | ' print "Loaded ";currentdir$+"/"+loadname
14b0c     00 12 06 F6 | 	mov	arg01, #0
14b10     8C 6B B1 FD | 	call	#__system___getiolock_0599
14b14     FD 12 02 F6 | 	mov	arg01, result1
14b18     5C 0E B1 FD | 	call	#__system___lockmem
14b1c     AF 01 00 FF 
14b20     2F 14 06 F6 | 	mov	arg02, ##@LR__5889
14b24     00 12 06 F6 | 	mov	arg01, #0
14b28     00 16 06 F6 | 	mov	arg03, #0
14b2c     3C 1B B1 FD | 	call	#__system___basic_print_string
14b30     00 26 06 F6 | 	mov	local01, #0
14b34     4A 00 00 FF 
14b38     94 E4 05 F1 | 	add	objptr, ##38036
14b3c     F2 12 02 FB | 	rdlong	arg01, objptr
14b40     4A 00 00 FF 
14b44     94 E4 85 F1 | 	sub	objptr, ##38036
14b48     AF 01 00 FF 
14b4c     37 14 06 F6 | 	mov	arg02, ##@LR__5890
14b50     80 0E B1 FD | 	call	#__system___string_concat
14b54     FD 12 02 F6 | 	mov	arg01, result1
14b58     52 00 00 FF 
14b5c     70 E4 05 F1 | 	add	objptr, ##42096
14b60     F2 14 02 FB | 	rdlong	arg02, objptr
14b64     52 00 00 FF 
14b68     70 E4 85 F1 | 	sub	objptr, ##42096
14b6c     64 0E B1 FD | 	call	#__system___string_concat
14b70     FD 14 02 F6 | 	mov	arg02, result1
14b74     13 13 02 F6 | 	mov	arg01, local01
14b78     00 16 06 F6 | 	mov	arg03, #0
14b7c     EC 1A B1 FD | 	call	#__system___basic_print_string
14b80     00 12 06 F6 | 	mov	arg01, #0
14b84     0A 14 06 F6 | 	mov	arg02, #10
14b88     00 16 06 F6 | 	mov	arg03, #0
14b8c     84 1A B1 FD | 	call	#__system___basic_print_char
14b90     00 12 06 F6 | 	mov	arg01, #0
14b94     08 6B B1 FD | 	call	#__system___getiolock_0599
14b98     FD 00 68 FC | 	wrlong	#0, result1
14b9c     52 00 00 FF 
14ba0     80 E4 05 F1 | 	add	objptr, ##42112
14ba4     F2 00 68 FC | 	wrlong	#0, objptr
14ba8     52 00 00 FF 
14bac     80 E4 85 F1 | 	sub	objptr, ##42112
14bb0                 | LR__1720
14bb0     A7 F0 03 F6 | 	mov	ptra, fp
14bb4     B2 00 A0 FD | 	call	#popregs_
14bb8                 | _do_load_ret
14bb8     2D 00 64 FD | 	ret
14bbc                 | 
14bbc                 | ' 
14bbc                 | ' '-------------------- log
14bbc                 | ' 
14bbc                 | ' sub do_log
14bbc                 | _do_log
14bbc     01 4A 05 F6 | 	mov	COUNT_, #1
14bc0     A8 00 A0 FD | 	call	#pushregs_
14bc4     14 F0 07 F1 | 	add	ptra, #20
14bc8     4A 00 00 FF 
14bcc     80 E4 05 F1 | 	add	objptr, ##38016
14bd0     F2 26 02 FB | 	rdlong	local01, objptr
14bd4     13 17 02 F6 | 	mov	arg03, local01
14bd8     01 16 66 F0 | 	shl	arg03, #1
14bdc     13 17 02 F1 | 	add	arg03, local01
14be0     02 16 66 F0 | 	shl	arg03, #2
14be4     03 00 00 FF 
14be8     04 E4 85 F1 | 	sub	objptr, ##1540
14bec     F2 16 02 F1 | 	add	arg03, objptr
14bf0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
14bf4     0C 4E 05 F1 | 	add	fp, #12
14bf8     A7 16 62 FC | 	wrlong	arg03, fp
14bfc                 | ' 
14bfc                 | ' numpar=compiledline(lineptr_e).result.uresult
14bfc                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
14bfc     0C 4E 85 F1 | 	sub	fp, #12
14c00     47 00 00 FF 
14c04     7C E4 85 F1 | 	sub	objptr, ##36476
14c08     0C 4E 05 51 |  if_ne	add	fp, #12
14c0c     A7 26 02 5B |  if_ne	rdlong	local01, fp
14c10     0C 4E 85 51 |  if_ne	sub	fp, #12
14c14     03 26 16 52 |  if_ne	cmp	local01, #3 wc
14c18     40 00 90 4D |  if_c_and_nz	jmp	#LR__1730
14c1c     00 12 06 F6 | 	mov	arg01, #0
14c20     7C 6A B1 FD | 	call	#__system___getiolock_0599
14c24     FD 12 02 F6 | 	mov	arg01, result1
14c28     4C 0D B1 FD | 	call	#__system___lockmem
14c2c     AF 01 00 FF 
14c30     39 14 06 F6 | 	mov	arg02, ##@LR__5891
14c34     00 12 06 F6 | 	mov	arg01, #0
14c38     00 16 06 F6 | 	mov	arg03, #0
14c3c     2C 1A B1 FD | 	call	#__system___basic_print_string
14c40     00 12 06 F6 | 	mov	arg01, #0
14c44     58 6A B1 FD | 	call	#__system___getiolock_0599
14c48     FD 00 68 FC | 	wrlong	#0, result1
14c4c     27 12 06 F6 | 	mov	arg01, #39
14c50     00 14 06 F6 | 	mov	arg02, #0
14c54     34 D3 B0 FD | 	call	#_printerror
14c58     D0 00 90 FD | 	jmp	#LR__1733
14c5c                 | LR__1730
14c5c                 | ' if numpar=2 then 
14c5c     0C 4E 05 F1 | 	add	fp, #12
14c60     A7 26 02 FB | 	rdlong	local01, fp
14c64     0C 4E 85 F1 | 	sub	fp, #12
14c68     02 26 0E F2 | 	cmp	local01, #2 wz
14c6c     48 00 90 5D |  if_ne	jmp	#LR__1731
14c70     0C 80 BF FD | 	call	#_pop
14c74     FF 26 02 F6 | 	mov	local01, result3
14c78     A7 FA 61 FC | 	wrlong	result1, fp
14c7c     04 4E 05 F1 | 	add	fp, #4
14c80     A7 FC 61 FC | 	wrlong	result2, fp
14c84     04 4E 05 F1 | 	add	fp, #4
14c88     A7 26 62 FC | 	wrlong	local01, fp
14c8c     08 4E 85 F1 | 	sub	fp, #8
14c90     A7 12 02 F6 | 	mov	arg01, fp
14c94     88 82 BF FD | 	call	#_converttofloat
14c98     FD 14 02 F6 | 	mov	arg02, result1
14c9c     FC 16 20 FF 
14ca0     54 12 06 F6 | 	mov	arg01, ##1076754516
14ca4     18 4B B1 FD | 	call	#__system____builtin_logbase
14ca8     10 4E 05 F1 | 	add	fp, #16
14cac     A7 FA 61 FC | 	wrlong	result1, fp
14cb0     10 4E 85 F1 | 	sub	fp, #16
14cb4     10 00 90 FD | 	jmp	#LR__1732
14cb8                 | LR__1731
14cb8     10 4E 05 F1 | 	add	fp, #16
14cbc     00 C0 9F FF 
14cc0     A7 00 68 FC | 	wrlong	##1065353216, fp
14cc4     10 4E 85 F1 | 	sub	fp, #16
14cc8                 | LR__1732
14cc8     B4 7F BF FD | 	call	#_pop
14ccc     FF 26 02 F6 | 	mov	local01, result3
14cd0     A7 FA 61 FC | 	wrlong	result1, fp
14cd4     04 4E 05 F1 | 	add	fp, #4
14cd8     A7 FC 61 FC | 	wrlong	result2, fp
14cdc     04 4E 05 F1 | 	add	fp, #4
14ce0     A7 26 62 FC | 	wrlong	local01, fp
14ce4     08 4E 85 F1 | 	sub	fp, #8
14ce8     A7 12 02 F6 | 	mov	arg01, fp
14cec     30 82 BF FD | 	call	#_converttofloat
14cf0     FD 14 02 F6 | 	mov	arg02, result1
14cf4     FC 16 20 FF 
14cf8     54 12 06 F6 | 	mov	arg01, ##1076754516
14cfc     C0 4A B1 FD | 	call	#__system____builtin_logbase
14d00     FD 12 02 F6 | 	mov	arg01, result1
14d04     10 4E 05 F1 | 	add	fp, #16
14d08     A7 14 02 FB | 	rdlong	arg02, fp
14d0c     10 4E 85 F1 | 	sub	fp, #16
14d10     E0 3C B1 FD | 	call	#__system___float_div
14d14     A7 FA 61 FC | 	wrlong	result1, fp
14d18     08 4E 05 F1 | 	add	fp, #8
14d1c     A7 3C 68 FC | 	wrlong	#30, fp
14d20     08 4E 85 F1 | 	sub	fp, #8
14d24     A7 12 02 F6 | 	mov	arg01, fp
14d28     EC 7F BF FD | 	call	#_push
14d2c                 | LR__1733
14d2c     A7 F0 03 F6 | 	mov	ptra, fp
14d30     B2 00 A0 FD | 	call	#popregs_
14d34                 | _do_log_ret
14d34     2D 00 64 FD | 	ret
14d38                 | 
14d38                 | ' 
14d38                 | ' '-------------------- lpeek
14d38                 | ' 
14d38                 | ' sub do_lpeek
14d38                 | _do_lpeek
14d38     00 4A 05 F6 | 	mov	COUNT_, #0
14d3c     A8 00 A0 FD | 	call	#pushregs_
14d40     14 F0 07 F1 | 	add	ptra, #20
14d44     38 7F BF FD | 	call	#_pop
14d48     A7 FA 61 FC | 	wrlong	result1, fp
14d4c     04 4E 05 F1 | 	add	fp, #4
14d50     A7 FC 61 FC | 	wrlong	result2, fp
14d54     04 4E 05 F1 | 	add	fp, #4
14d58     A7 FE 61 FC | 	wrlong	result3, fp
14d5c     08 4E 85 F1 | 	sub	fp, #8
14d60     A7 12 02 F6 | 	mov	arg01, fp
14d64     FC 80 BF FD | 	call	#_converttoint
14d68     0C 4E 05 F1 | 	add	fp, #12
14d6c     A7 FA 61 FC | 	wrlong	result1, fp
14d70                 | ' 
14d70                 | ' t1=pop()
14d70                 | ' a=converttoint(t1)
14d70                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14d70     0C 4E 85 F1 | 	sub	fp, #12
14d74     00 04 00 FF 
14d78     00 FA 15 F2 | 	cmp	result1, ##524288 wc
14d7c     1C 00 90 3D |  if_ae	jmp	#LR__1740
14d80     0C 4E 05 F1 | 	add	fp, #12
14d84     A7 12 02 FB | 	rdlong	arg01, fp
14d88     09 FB 01 FB | 	rdlong	result1, arg01
14d8c     04 4E 05 F1 | 	add	fp, #4
14d90     A7 FA 61 FC | 	wrlong	result1, fp
14d94     10 4E 85 F1 | 	sub	fp, #16
14d98     1C 00 90 FD | 	jmp	#LR__1741
14d9c                 | LR__1740
14d9c     0C 4E 05 F1 | 	add	fp, #12
14da0     A7 12 02 FB | 	rdlong	arg01, fp
14da4     0C 4E 85 F1 | 	sub	fp, #12
14da8     B0 D4 B0 FD | 	call	#_pslpeek
14dac     10 4E 05 F1 | 	add	fp, #16
14db0     A7 FA 61 FC | 	wrlong	result1, fp
14db4     10 4E 85 F1 | 	sub	fp, #16
14db8                 | LR__1741
14db8     08 4E 05 F1 | 	add	fp, #8
14dbc     A7 3A 68 FC | 	wrlong	#29, fp
14dc0     08 4E 05 F1 | 	add	fp, #8
14dc4     A7 12 02 FB | 	rdlong	arg01, fp
14dc8     10 4E 85 F1 | 	sub	fp, #16
14dcc     A7 12 62 FC | 	wrlong	arg01, fp
14dd0     A7 12 02 F6 | 	mov	arg01, fp
14dd4     40 7F BF FD | 	call	#_push
14dd8     A7 F0 03 F6 | 	mov	ptra, fp
14ddc     B2 00 A0 FD | 	call	#popregs_
14de0                 | _do_lpeek_ret
14de0     2D 00 64 FD | 	ret
14de4                 | 
14de4                 | ' 
14de4                 | ' '-------------------- lpoke
14de4                 | ' 
14de4                 | ' sub do_lpoke
14de4                 | _do_lpoke
14de4     01 4A 05 F6 | 	mov	COUNT_, #1
14de8     A8 00 A0 FD | 	call	#pushregs_
14dec     20 F0 07 F1 | 	add	ptra, #32
14df0     8C 7E BF FD | 	call	#_pop
14df4     FD 14 02 F6 | 	mov	arg02, result1
14df8     FE 12 02 F6 | 	mov	arg01, result2
14dfc     FF 26 02 F6 | 	mov	local01, result3
14e00     A7 14 62 FC | 	wrlong	arg02, fp
14e04     04 4E 05 F1 | 	add	fp, #4
14e08     A7 12 62 FC | 	wrlong	arg01, fp
14e0c     04 4E 05 F1 | 	add	fp, #4
14e10     A7 26 62 FC | 	wrlong	local01, fp
14e14     08 4E 85 F1 | 	sub	fp, #8
14e18     64 7E BF FD | 	call	#_pop
14e1c     FF 26 02 F6 | 	mov	local01, result3
14e20     0C 4E 05 F1 | 	add	fp, #12
14e24     A7 FA 61 FC | 	wrlong	result1, fp
14e28     04 4E 05 F1 | 	add	fp, #4
14e2c     A7 FC 61 FC | 	wrlong	result2, fp
14e30     04 4E 05 F1 | 	add	fp, #4
14e34     A7 26 62 FC | 	wrlong	local01, fp
14e38     08 4E 85 F1 | 	sub	fp, #8
14e3c     A7 12 02 F6 | 	mov	arg01, fp
14e40     0C 4E 85 F1 | 	sub	fp, #12
14e44     1C 80 BF FD | 	call	#_converttoint
14e48     18 4E 05 F1 | 	add	fp, #24
14e4c     A7 FA 61 FC | 	wrlong	result1, fp
14e50     18 4E 85 F1 | 	sub	fp, #24
14e54     A7 12 02 F6 | 	mov	arg01, fp
14e58     08 80 BF FD | 	call	#_converttoint
14e5c     1C 4E 05 F1 | 	add	fp, #28
14e60     A7 FA 61 FC | 	wrlong	result1, fp
14e64                 | ' 
14e64                 | ' t1=pop() 'value
14e64                 | ' t2=pop() 
14e64                 | ' a=converttoint(t2) : v=converttoint(t1)
14e64                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14e64     04 4E 85 F1 | 	sub	fp, #4
14e68     A7 26 02 FB | 	rdlong	local01, fp
14e6c     18 4E 85 F1 | 	sub	fp, #24
14e70     00 04 00 FF 
14e74     00 26 16 F2 | 	cmp	local01, ##524288 wc
14e78     1C 00 90 3D |  if_ae	jmp	#LR__1750
14e7c     18 4E 05 F1 | 	add	fp, #24
14e80     A7 12 02 FB | 	rdlong	arg01, fp
14e84     04 4E 05 F1 | 	add	fp, #4
14e88     A7 14 02 FB | 	rdlong	arg02, fp
14e8c     1C 4E 85 F1 | 	sub	fp, #28
14e90     09 15 62 FC | 	wrlong	arg02, arg01
14e94     18 00 90 FD | 	jmp	#LR__1751
14e98                 | LR__1750
14e98     18 4E 05 F1 | 	add	fp, #24
14e9c     A7 12 02 FB | 	rdlong	arg01, fp
14ea0     04 4E 05 F1 | 	add	fp, #4
14ea4     A7 14 02 FB | 	rdlong	arg02, fp
14ea8     1C 4E 85 F1 | 	sub	fp, #28
14eac     7C D2 B0 FD | 	call	#_pslpoke
14eb0                 | LR__1751
14eb0     A7 F0 03 F6 | 	mov	ptra, fp
14eb4     B2 00 A0 FD | 	call	#popregs_
14eb8                 | _do_lpoke_ret
14eb8     2D 00 64 FD | 	ret
14ebc                 | 
14ebc                 | ' 
14ebc                 | ' '-------------------- mid$
14ebc                 | ' 
14ebc                 | ' sub do_mid
14ebc                 | _do_mid
14ebc     00 4A 05 F6 | 	mov	COUNT_, #0
14ec0     A8 00 A0 FD | 	call	#pushregs_
14ec4     18 F0 07 F1 | 	add	ptra, #24
14ec8     4A 00 00 FF 
14ecc     80 E4 05 F1 | 	add	objptr, ##38016
14ed0     F2 16 02 FB | 	rdlong	arg03, objptr
14ed4     0B 15 02 F6 | 	mov	arg02, arg03
14ed8     01 14 66 F0 | 	shl	arg02, #1
14edc     0B 15 02 F1 | 	add	arg02, arg03
14ee0     02 14 66 F0 | 	shl	arg02, #2
14ee4     03 00 00 FF 
14ee8     04 E4 85 F1 | 	sub	objptr, ##1540
14eec     F2 14 02 F1 | 	add	arg02, objptr
14ef0     0A 17 02 FB | 	rdlong	arg03, arg02
14ef4     0C 4E 05 F1 | 	add	fp, #12
14ef8     A7 16 62 FC | 	wrlong	arg03, fp
14efc                 | ' 
14efc                 | ' numpar=compiledline(lineptr_e).result.uresult
14efc                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14efc     0C 4E 85 F1 | 	sub	fp, #12
14f00     03 16 0E F2 | 	cmp	arg03, #3 wz
14f04     47 00 00 FF 
14f08     7C E4 85 F1 | 	sub	objptr, ##36476
14f0c     40 00 90 AD |  if_e	jmp	#LR__1760
14f10     00 12 06 F6 | 	mov	arg01, #0
14f14     88 67 B1 FD | 	call	#__system___getiolock_0599
14f18     FD 12 02 F6 | 	mov	arg01, result1
14f1c     58 0A B1 FD | 	call	#__system___lockmem
14f20     AF 01 00 FF 
14f24     3F 14 06 F6 | 	mov	arg02, ##@LR__5892
14f28     00 12 06 F6 | 	mov	arg01, #0
14f2c     00 16 06 F6 | 	mov	arg03, #0
14f30     38 17 B1 FD | 	call	#__system___basic_print_string
14f34     00 12 06 F6 | 	mov	arg01, #0
14f38     64 67 B1 FD | 	call	#__system___getiolock_0599
14f3c     FD 00 68 FC | 	wrlong	#0, result1
14f40     27 12 06 F6 | 	mov	arg01, #39
14f44     00 14 06 F6 | 	mov	arg02, #0
14f48     40 D0 B0 FD | 	call	#_printerror
14f4c     2C 01 90 FD | 	jmp	#LR__1763
14f50                 | LR__1760
14f50     2C 7D BF FD | 	call	#_pop
14f54     FF 16 02 F6 | 	mov	arg03, result3
14f58     A7 FA 61 FC | 	wrlong	result1, fp
14f5c     04 4E 05 F1 | 	add	fp, #4
14f60     A7 FC 61 FC | 	wrlong	result2, fp
14f64     04 4E 05 F1 | 	add	fp, #4
14f68     A7 16 62 FC | 	wrlong	arg03, fp
14f6c     08 4E 85 F1 | 	sub	fp, #8
14f70     A7 12 02 F6 | 	mov	arg01, fp
14f74     EC 7E BF FD | 	call	#_converttoint
14f78     FD 16 02 F6 | 	mov	arg03, result1
14f7c     14 4E 05 F1 | 	add	fp, #20
14f80     A7 16 62 FC | 	wrlong	arg03, fp
14f84     14 4E 85 F1 | 	sub	fp, #20
14f88     F4 7C BF FD | 	call	#_pop
14f8c     FF 16 02 F6 | 	mov	arg03, result3
14f90     A7 FA 61 FC | 	wrlong	result1, fp
14f94     04 4E 05 F1 | 	add	fp, #4
14f98     A7 FC 61 FC | 	wrlong	result2, fp
14f9c     04 4E 05 F1 | 	add	fp, #4
14fa0     A7 16 62 FC | 	wrlong	arg03, fp
14fa4     08 4E 85 F1 | 	sub	fp, #8
14fa8     A7 12 02 F6 | 	mov	arg01, fp
14fac     B4 7E BF FD | 	call	#_converttoint
14fb0     FD 16 02 F6 | 	mov	arg03, result1
14fb4     10 4E 05 F1 | 	add	fp, #16
14fb8     A7 16 62 FC | 	wrlong	arg03, fp
14fbc     10 4E 85 F1 | 	sub	fp, #16
14fc0     BC 7C BF FD | 	call	#_pop
14fc4     FF 16 02 F6 | 	mov	arg03, result3
14fc8     A7 FA 61 FC | 	wrlong	result1, fp
14fcc     04 4E 05 F1 | 	add	fp, #4
14fd0     A7 FC 61 FC | 	wrlong	result2, fp
14fd4     04 4E 05 F1 | 	add	fp, #4
14fd8     A7 16 62 FC | 	wrlong	arg03, fp
14fdc                 | ' t1=pop() : arg2=converttoint(t1)
14fdc                 | ' t1=pop() : arg1=converttoint(t1)
14fdc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14fdc     08 4E 85 F1 | 	sub	fp, #8
14fe0     2B 16 0E F2 | 	cmp	arg03, #43 wz
14fe4     18 00 90 5D |  if_ne	jmp	#LR__1761
14fe8     A7 12 02 FB | 	rdlong	arg01, fp
14fec     08 7E BF FD | 	call	#_convertstring
14ff0     A7 FA 61 FC | 	wrlong	result1, fp
14ff4     08 4E 05 F1 | 	add	fp, #8
14ff8     A7 3E 68 FC | 	wrlong	#31, fp
14ffc     08 4E 85 F1 | 	sub	fp, #8
15000                 | LR__1761
15000                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
15000     08 4E 05 F1 | 	add	fp, #8
15004     A7 16 02 FB | 	rdlong	arg03, fp
15008     08 4E 85 F1 | 	sub	fp, #8
1500c     1F 16 0E F2 | 	cmp	arg03, #31 wz
15010     40 00 90 AD |  if_e	jmp	#LR__1762
15014     00 12 06 F6 | 	mov	arg01, #0
15018     84 66 B1 FD | 	call	#__system___getiolock_0599
1501c     FD 12 02 F6 | 	mov	arg01, result1
15020     54 09 B1 FD | 	call	#__system___lockmem
15024     AF 01 00 FF 
15028     46 14 06 F6 | 	mov	arg02, ##@LR__5893
1502c     00 12 06 F6 | 	mov	arg01, #0
15030     00 16 06 F6 | 	mov	arg03, #0
15034     34 16 B1 FD | 	call	#__system___basic_print_string
15038     00 12 06 F6 | 	mov	arg01, #0
1503c     60 66 B1 FD | 	call	#__system___getiolock_0599
15040     FD 00 68 FC | 	wrlong	#0, result1
15044     0F 12 06 F6 | 	mov	arg01, #15
15048     00 14 06 F6 | 	mov	arg02, #0
1504c     3C CF B0 FD | 	call	#_printerror
15050     28 00 90 FD | 	jmp	#LR__1763
15054                 | LR__1762
15054     A7 12 02 FB | 	rdlong	arg01, fp
15058     10 4E 05 F1 | 	add	fp, #16
1505c     A7 14 02 FB | 	rdlong	arg02, fp
15060     04 4E 05 F1 | 	add	fp, #4
15064     A7 16 02 FB | 	rdlong	arg03, fp
15068     14 4E 85 F1 | 	sub	fp, #20
1506c     9C 2A B1 FD | 	call	#__system__Mid_S
15070     A7 FA 61 FC | 	wrlong	result1, fp
15074     A7 12 02 F6 | 	mov	arg01, fp
15078     9C 7C BF FD | 	call	#_push
1507c                 | LR__1763
1507c     A7 F0 03 F6 | 	mov	ptra, fp
15080     B2 00 A0 FD | 	call	#popregs_
15084                 | _do_mid_ret
15084     2D 00 64 FD | 	ret
15088                 | 
15088                 | ' 
15088                 | ' '-------------------- mkdir
15088                 | ' 
15088                 | ' sub do_mkdir
15088                 | _do_mkdir
15088     04 4A 05 F6 | 	mov	COUNT_, #4
1508c     A8 00 A0 FD | 	call	#pushregs_
15090     EC 7B BF FD | 	call	#_pop
15094     FE 18 02 F6 | 	mov	arg04, result2
15098     FF 16 02 F6 | 	mov	arg03, result3
1509c     FD 26 02 F6 | 	mov	local01, result1
150a0     0C 29 02 F6 | 	mov	local02, arg04
150a4     0B 2B 02 F6 | 	mov	local03, arg03
150a8                 | ' 
150a8                 | ' t1=pop()
150a8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
150a8     2B 2A 0E F2 | 	cmp	local03, #43 wz
150ac     10 00 90 5D |  if_ne	jmp	#LR__1770
150b0     13 13 02 F6 | 	mov	arg01, local01
150b4     40 7D BF FD | 	call	#_convertstring
150b8     FD 26 02 F6 | 	mov	local01, result1
150bc     1F 2A 06 F6 | 	mov	local03, #31
150c0                 | LR__1770
150c0                 | ' if t1.result_type<>result_string then printerror(15): return
150c0     1F 2A 0E F2 | 	cmp	local03, #31 wz
150c4     10 00 90 AD |  if_e	jmp	#LR__1771
150c8     0F 12 06 F6 | 	mov	arg01, #15
150cc     00 14 06 F6 | 	mov	arg02, #0
150d0     B8 CE B0 FD | 	call	#_printerror
150d4     64 00 90 FD | 	jmp	#LR__1773
150d8                 | LR__1771
150d8     13 13 02 F6 | 	mov	arg01, local01
150dc     68 31 B1 FD | 	call	#__system___mkdir
150e0     FD 2C 0A F6 | 	mov	local04, result1 wz
150e4                 | ' filename$=t1.result.sresult
150e4                 | ' err=mkdir(filename$)
150e4                 | ' 'err=geterr() : 
150e4                 | ' if err<>0 then print "Cannot create a directory: system error "; err
150e4     54 00 90 AD |  if_e	jmp	#LR__1772
150e8     00 12 06 F6 | 	mov	arg01, #0
150ec     B0 65 B1 FD | 	call	#__system___getiolock_0599
150f0     FD 12 02 F6 | 	mov	arg01, result1
150f4     80 08 B1 FD | 	call	#__system___lockmem
150f8     AF 01 00 FF 
150fc     4D 14 06 F6 | 	mov	arg02, ##@LR__5894
15100     00 12 06 F6 | 	mov	arg01, #0
15104     00 16 06 F6 | 	mov	arg03, #0
15108     60 15 B1 FD | 	call	#__system___basic_print_string
1510c     00 12 06 F6 | 	mov	arg01, #0
15110     16 15 02 F6 | 	mov	arg02, local04
15114     00 16 06 F6 | 	mov	arg03, #0
15118     0A 18 06 F6 | 	mov	arg04, #10
1511c     90 15 B1 FD | 	call	#__system___basic_print_integer
15120     00 12 06 F6 | 	mov	arg01, #0
15124     0A 14 06 F6 | 	mov	arg02, #10
15128     00 16 06 F6 | 	mov	arg03, #0
1512c     E4 14 B1 FD | 	call	#__system___basic_print_char
15130     00 12 06 F6 | 	mov	arg01, #0
15134     68 65 B1 FD | 	call	#__system___getiolock_0599
15138     FD 00 68 FC | 	wrlong	#0, result1
1513c                 | LR__1772
1513c                 | LR__1773
1513c     A7 F0 03 F6 | 	mov	ptra, fp
15140     B2 00 A0 FD | 	call	#popregs_
15144                 | _do_mkdir_ret
15144     2D 00 64 FD | 	ret
15148                 | 
15148                 | ' 
15148                 | ' '-------------------- mode
15148                 | ' 
15148                 | ' sub do_mode
15148                 | _do_mode
15148     05 4A 05 F6 | 	mov	COUNT_, #5
1514c     A8 00 A0 FD | 	call	#pushregs_
15150     2C 7B BF FD | 	call	#_pop
15154     FD 26 02 F6 | 	mov	local01, result1
15158     FE 28 02 F6 | 	mov	local02, result2
1515c     FF 2A 02 F6 | 	mov	local03, result3
15160                 | ' t1=pop() 
15160                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15160     1E 2A 0E F2 | 	cmp	local03, #30 wz
15164     10 00 90 5D |  if_ne	jmp	#LR__1780
15168     13 13 02 F6 | 	mov	arg01, local01
1516c     00 14 06 F6 | 	mov	arg02, #0
15170     44 3B B1 FD | 	call	#__system___float_tointeger
15174     FD 26 02 F6 | 	mov	local01, result1
15178                 | LR__1780
15178                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15178     1F 2A 0E F2 | 	cmp	local03, #31 wz
1517c     18 00 90 5D |  if_ne	jmp	#LR__1781
15180     13 13 02 F6 | 	mov	arg01, local01
15184     74 3E B1 FD | 	call	#__system____builtin_atof
15188     FD 12 02 F6 | 	mov	arg01, result1
1518c     00 14 06 F6 | 	mov	arg02, #0
15190     24 3B B1 FD | 	call	#__system___float_tointeger
15194     FD 26 02 F6 | 	mov	local01, result1
15198                 | LR__1781
15198                 | ' select case t1.result.iresult
15198     13 2D 02 F6 | 	mov	local04, local01
1519c     05 2C 26 F3 | 	fle	local04, #5
151a0     30 2C 62 FD | 	jmprel	local04
151a4                 | LR__1782
151a4     14 00 90 FD | 	jmp	#LR__1783
151a8     A8 00 90 FD | 	jmp	#LR__1784
151ac     10 01 90 FD | 	jmp	#LR__1785
151b0     78 01 90 FD | 	jmp	#LR__1786
151b4     E0 01 90 FD | 	jmp	#LR__1787
151b8     70 02 90 FD | 	jmp	#LR__1788
151bc                 | LR__1783
151bc     37 00 00 FF 
151c0     40 E4 05 F1 | 	add	objptr, ##28224
151c4     F2 02 68 FC | 	wrlong	#1, objptr
151c8     04 E4 85 F1 | 	sub	objptr, #4
151cc     F2 34 69 FC | 	wrlong	#154, objptr
151d0     19 00 00 FF 
151d4     00 E5 05 F1 | 	add	objptr, ##13056
151d8     F2 02 68 FC | 	wrlong	#1, objptr
151dc     19 00 00 FF 
151e0     04 E5 85 F1 | 	sub	objptr, ##13060
151e4     F2 26 69 FC | 	wrlong	#147, objptr
151e8     37 00 00 FF 
151ec     38 E4 85 F1 | 	sub	objptr, ##28216
151f0     04 12 06 F6 | 	mov	arg01, #4
151f4     AC E9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
151f8     37 00 00 FF 
151fc     3C E4 05 F1 | 	add	objptr, ##28220
15200     F2 12 02 FB | 	rdlong	arg01, objptr
15204     04 E4 85 F1 | 	sub	objptr, #4
15208     F2 14 02 FB | 	rdlong	arg02, objptr
1520c                 | ' 
1520c                 | ' write_color:=ff
1520c     36 00 00 FF 
15210     F7 E5 85 F1 | 	sub	objptr, ##28151
15214     F2 12 62 FC | 	wrlong	arg01, objptr
15218                 | ' write_background:=bb
15218     04 E4 05 F1 | 	add	objptr, #4
1521c     F2 14 62 FC | 	wrlong	arg02, objptr
15220     01 00 00 FF 
15224     00 EA 05 F1 | 	add	ptr__dat__, ##512
15228     52 00 00 FF 
1522c     0B E4 05 F1 | 	add	objptr, ##41995
15230     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15234     04 E4 85 F1 | 	sub	objptr, #4
15238     03 00 80 FF 
1523c     F2 30 69 FC | 	wrlong	##1688, objptr
15240     52 00 00 FF 
15244     4C E4 85 F1 | 	sub	objptr, ##42060
15248     01 00 00 FF 
1524c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15250     D8 01 90 FD | 	jmp	#LR__1788
15254                 | LR__1784
15254     37 00 00 FF 
15258     40 E4 05 F1 | 	add	objptr, ##28224
1525c     F2 00 68 FC | 	wrlong	#0, objptr
15260     04 E4 85 F1 | 	sub	objptr, #4
15264     F2 2E 68 FC | 	wrlong	#23, objptr
15268     19 00 00 FF 
1526c     00 E5 05 F1 | 	add	objptr, ##13056
15270     F2 00 68 FC | 	wrlong	#0, objptr
15274     19 00 00 FF 
15278     04 E5 85 F1 | 	sub	objptr, ##13060
1527c     F2 00 68 FC | 	wrlong	#0, objptr
15280     37 00 00 FF 
15284     38 E4 85 F1 | 	sub	objptr, ##28216
15288     00 12 06 F6 | 	mov	arg01, #0
1528c     14 E9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15290     37 00 00 FF 
15294     3C E4 05 F1 | 	add	objptr, ##28220
15298     F2 12 02 FB | 	rdlong	arg01, objptr
1529c     04 E4 85 F1 | 	sub	objptr, #4
152a0     F2 14 02 FB | 	rdlong	arg02, objptr
152a4                 | ' 
152a4                 | ' write_color:=ff
152a4     36 00 00 FF 
152a8     F7 E5 85 F1 | 	sub	objptr, ##28151
152ac     F2 12 62 FC | 	wrlong	arg01, objptr
152b0                 | ' write_background:=bb
152b0     04 E4 05 F1 | 	add	objptr, #4
152b4     F2 14 62 FC | 	wrlong	arg02, objptr
152b8     45 E4 85 F1 | 	sub	objptr, #69
152bc     6C 01 90 FD | 	jmp	#LR__1788
152c0                 | LR__1785
152c0     37 00 00 FF 
152c4     40 E4 05 F1 | 	add	objptr, ##28224
152c8     F2 00 68 FC | 	wrlong	#0, objptr
152cc     04 E4 85 F1 | 	sub	objptr, #4
152d0     F2 6A 69 FC | 	wrlong	#181, objptr
152d4     19 00 00 FF 
152d8     00 E5 05 F1 | 	add	objptr, ##13056
152dc     F2 00 68 FC | 	wrlong	#0, objptr
152e0     19 00 00 FF 
152e4     04 E5 85 F1 | 	sub	objptr, ##13060
152e8     F2 00 68 FC | 	wrlong	#0, objptr
152ec     37 00 00 FF 
152f0     38 E4 85 F1 | 	sub	objptr, ##28216
152f4     00 12 06 F6 | 	mov	arg01, #0
152f8     A8 E8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
152fc     37 00 00 FF 
15300     3C E4 05 F1 | 	add	objptr, ##28220
15304     F2 12 02 FB | 	rdlong	arg01, objptr
15308     04 E4 85 F1 | 	sub	objptr, #4
1530c     F2 14 02 FB | 	rdlong	arg02, objptr
15310                 | ' 
15310                 | ' write_color:=ff
15310     36 00 00 FF 
15314     F7 E5 85 F1 | 	sub	objptr, ##28151
15318     F2 12 62 FC | 	wrlong	arg01, objptr
1531c                 | ' write_background:=bb
1531c     04 E4 05 F1 | 	add	objptr, #4
15320     F2 14 62 FC | 	wrlong	arg02, objptr
15324     45 E4 85 F1 | 	sub	objptr, #69
15328     00 01 90 FD | 	jmp	#LR__1788
1532c                 | LR__1786
1532c     37 00 00 FF 
15330     40 E4 05 F1 | 	add	objptr, ##28224
15334     F2 00 68 FC | 	wrlong	#0, objptr
15338     04 E4 85 F1 | 	sub	objptr, #4
1533c     F2 1E 68 FC | 	wrlong	#15, objptr
15340     19 00 00 FF 
15344     00 E5 05 F1 | 	add	objptr, ##13056
15348     F2 00 68 FC | 	wrlong	#0, objptr
1534c     19 00 00 FF 
15350     04 E5 85 F1 | 	sub	objptr, ##13060
15354     F2 00 68 FC | 	wrlong	#0, objptr
15358     37 00 00 FF 
1535c     38 E4 85 F1 | 	sub	objptr, ##28216
15360     00 12 06 F6 | 	mov	arg01, #0
15364     3C E8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15368     37 00 00 FF 
1536c     3C E4 05 F1 | 	add	objptr, ##28220
15370     F2 12 02 FB | 	rdlong	arg01, objptr
15374     04 E4 85 F1 | 	sub	objptr, #4
15378     F2 14 02 FB | 	rdlong	arg02, objptr
1537c                 | ' 
1537c                 | ' write_color:=ff
1537c     36 00 00 FF 
15380     F7 E5 85 F1 | 	sub	objptr, ##28151
15384     F2 12 62 FC | 	wrlong	arg01, objptr
15388                 | ' write_background:=bb
15388     04 E4 05 F1 | 	add	objptr, #4
1538c     F2 14 62 FC | 	wrlong	arg02, objptr
15390     45 E4 85 F1 | 	sub	objptr, #69
15394     94 00 90 FD | 	jmp	#LR__1788
15398                 | LR__1787
15398     37 00 00 FF 
1539c     40 E4 05 F1 | 	add	objptr, ##28224
153a0     F2 02 68 FC | 	wrlong	#1, objptr
153a4     04 E4 85 F1 | 	sub	objptr, #4
153a8     F2 02 68 FC | 	wrlong	#1, objptr
153ac     19 00 00 FF 
153b0     00 E5 05 F1 | 	add	objptr, ##13056
153b4     F2 02 68 FC | 	wrlong	#1, objptr
153b8     19 00 00 FF 
153bc     04 E5 85 F1 | 	sub	objptr, ##13060
153c0     F2 1C 68 FC | 	wrlong	#14, objptr
153c4     37 00 00 FF 
153c8     38 E4 85 F1 | 	sub	objptr, ##28216
153cc     04 12 06 F6 | 	mov	arg01, #4
153d0     D0 E7 B0 FD | 	call	#_hg010b_spin2_setfontfamily
153d4     37 00 00 FF 
153d8     3C E4 05 F1 | 	add	objptr, ##28220
153dc     F2 12 02 FB | 	rdlong	arg01, objptr
153e0     04 E4 85 F1 | 	sub	objptr, #4
153e4     F2 14 02 FB | 	rdlong	arg02, objptr
153e8                 | ' 
153e8                 | ' write_color:=ff
153e8     36 00 00 FF 
153ec     F7 E5 85 F1 | 	sub	objptr, ##28151
153f0     F2 12 62 FC | 	wrlong	arg01, objptr
153f4                 | ' write_background:=bb
153f4     04 E4 05 F1 | 	add	objptr, #4
153f8     F2 14 62 FC | 	wrlong	arg02, objptr
153fc     07 00 00 FF 
15400     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15404     52 00 00 FF 
15408     0B E4 05 F1 | 	add	objptr, ##41995
1540c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15410     04 E4 85 F1 | 	sub	objptr, #4
15414     03 00 80 FF 
15418     F2 30 69 FC | 	wrlong	##1688, objptr
1541c     52 00 00 FF 
15420     4C E4 85 F1 | 	sub	objptr, ##42060
15424     07 00 00 FF 
15428     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
1542c                 | LR__1788
1542c     52 00 00 FF 
15430     48 E4 05 F1 | 	add	objptr, ##42056
15434     F2 26 62 FC | 	wrlong	local01, objptr
15438     04 E4 85 F1 | 	sub	objptr, #4
1543c     F2 12 02 FB | 	rdlong	arg01, objptr
15440     0E 00 00 FF 
15444     E8 E5 85 F1 | 	sub	objptr, ##7656
15448     F2 2E 02 FB | 	rdlong	local05, objptr
1544c     43 00 00 FF 
15450     5C E4 85 F1 | 	sub	objptr, ##34396
15454     17 13 82 F1 | 	sub	arg01, local05
15458     00 14 06 F6 | 	mov	arg02, #0
1545c     0A 16 06 F6 | 	mov	arg03, #10
15460     E4 27 B1 FD | 	call	#__system__Number_S
15464     FD 12 02 F6 | 	mov	arg01, result1
15468     AF 01 00 FF 
1546c     76 14 06 F6 | 	mov	arg02, ##@LR__5895
15470     60 05 B1 FD | 	call	#__system___string_concat
15474     50 00 00 FF 
15478     38 E5 05 F1 | 	add	objptr, ##41272
1547c     F2 FA 61 FC | 	wrlong	result1, objptr
15480     19 00 00 FF 
15484     FC E4 85 F1 | 	sub	objptr, ##13052
15488     F2 12 02 FB | 	rdlong	arg01, objptr
1548c     04 E4 85 F1 | 	sub	objptr, #4
15490     F2 14 02 FB | 	rdlong	arg02, objptr
15494     37 00 00 FF 
15498     38 E4 85 F1 | 	sub	objptr, ##28216
1549c     54 E8 B0 FD | 	call	#_hg010b_spin2_cls
154a0     AF 01 00 FF 
154a4     88 12 06 F6 | 	mov	arg01, ##@LR__5896
154a8                 | ' 
154a8                 | ' write(text)
154a8     08 EC B0 FD | 	call	#_hg010b_spin2_write
154ac                 | ' crlf
154ac     04 F1 B0 FD | 	call	#_hg010b_spin2_crlf
154b0     18 00 00 FF 
154b4     40 EB 05 F1 | 	add	ptr__dat__, ##12608
154b8     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
154bc     18 00 00 FF 
154c0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
154c4                 | ' 
154c4                 | ' write(text)
154c4     EC EB B0 FD | 	call	#_hg010b_spin2_write
154c8                 | ' crlf
154c8     E8 F0 B0 FD | 	call	#_hg010b_spin2_crlf
154cc     50 00 00 FF 
154d0     38 E5 05 F1 | 	add	objptr, ##41272
154d4     F2 12 02 FB | 	rdlong	arg01, objptr
154d8     50 00 00 FF 
154dc     38 E5 85 F1 | 	sub	objptr, ##41272
154e0                 | ' 
154e0                 | ' write(text)
154e0     D0 EB B0 FD | 	call	#_hg010b_spin2_write
154e4                 | ' crlf
154e4     CC F0 B0 FD | 	call	#_hg010b_spin2_crlf
154e8     A7 F0 03 F6 | 	mov	ptra, fp
154ec     B2 00 A0 FD | 	call	#popregs_
154f0                 | _do_mode_ret
154f0     2D 00 64 FD | 	ret
154f4                 | 
154f4                 | ' 
154f4                 | ' '-------------------- mouse
154f4                 | ' 
154f4                 | ' sub do_mouse
154f4                 | _do_mouse
154f4     88 77 BF FD | 	call	#_pop
154f8     00 FA 4D F2 | 	cmps	result1, #0 wz
154fc                 | ' 
154fc                 | ' t1=pop()
154fc                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
154fc     14 00 90 5D |  if_ne	jmp	#LR__1790
15500     10 12 06 F6 | 	mov	arg01, #16
15504     00 14 06 F6 | 	mov	arg02, #0
15508     00 16 06 F6 | 	mov	arg03, #0
1550c     C4 DA B0 FD | 	call	#_hg010b_spin2_setspritesize
15510     10 00 90 FD | 	jmp	#LR__1791
15514                 | LR__1790
15514     10 12 06 F6 | 	mov	arg01, #16
15518     20 14 06 F6 | 	mov	arg02, #32
1551c     20 16 06 F6 | 	mov	arg03, #32
15520     B0 DA B0 FD | 	call	#_hg010b_spin2_setspritesize
15524                 | LR__1791
15524                 | _do_mouse_ret
15524     2D 00 64 FD | 	ret
15528                 | 
15528                 | ' 
15528                 | ' '-------------------- mousek
15528                 | ' 
15528                 | ' sub do_mousek
15528                 | _do_mousek
15528     00 4A 05 F6 | 	mov	COUNT_, #0
1552c     A8 00 A0 FD | 	call	#pushregs_
15530     0C F0 07 F1 | 	add	ptra, #12
15534     08 4E 05 F1 | 	add	fp, #8
15538     A7 3A 68 FC | 	wrlong	#29, fp
1553c     08 4E 85 F1 | 	sub	fp, #8
15540     51 00 00 FF 
15544     50 E5 05 F1 | 	add	objptr, ##41808
15548     F2 12 02 FB | 	rdlong	arg01, objptr
1554c     51 00 00 FF 
15550     50 E5 85 F1 | 	sub	objptr, ##41808
15554     A7 12 62 FC | 	wrlong	arg01, fp
15558     A7 12 02 F6 | 	mov	arg01, fp
1555c     B8 77 BF FD | 	call	#_push
15560     A7 F0 03 F6 | 	mov	ptra, fp
15564     B2 00 A0 FD | 	call	#popregs_
15568                 | _do_mousek_ret
15568     2D 00 64 FD | 	ret
1556c                 | 
1556c                 | ' 
1556c                 | ' '-------------------- mousew
1556c                 | ' 
1556c                 | ' sub do_mousew
1556c                 | _do_mousew
1556c     00 4A 05 F6 | 	mov	COUNT_, #0
15570     A8 00 A0 FD | 	call	#pushregs_
15574     0C F0 07 F1 | 	add	ptra, #12
15578     08 4E 05 F1 | 	add	fp, #8
1557c     A7 38 68 FC | 	wrlong	#28, fp
15580     08 4E 85 F1 | 	sub	fp, #8
15584     51 00 00 FF 
15588     54 E5 05 F1 | 	add	objptr, ##41812
1558c     F2 12 02 FB | 	rdlong	arg01, objptr
15590     51 00 00 FF 
15594     54 E5 85 F1 | 	sub	objptr, ##41812
15598     A7 12 62 FC | 	wrlong	arg01, fp
1559c     A7 12 02 F6 | 	mov	arg01, fp
155a0     74 77 BF FD | 	call	#_push
155a4     A7 F0 03 F6 | 	mov	ptra, fp
155a8     B2 00 A0 FD | 	call	#popregs_
155ac                 | _do_mousew_ret
155ac     2D 00 64 FD | 	ret
155b0                 | 
155b0                 | ' 
155b0                 | ' '-------------------- mousex
155b0                 | ' 
155b0                 | ' sub do_mousex
155b0                 | _do_mousex
155b0     00 4A 05 F6 | 	mov	COUNT_, #0
155b4     A8 00 A0 FD | 	call	#pushregs_
155b8     0C F0 07 F1 | 	add	ptra, #12
155bc     08 4E 05 F1 | 	add	fp, #8
155c0     A7 3A 68 FC | 	wrlong	#29, fp
155c4     08 4E 85 F1 | 	sub	fp, #8
155c8     51 00 00 FF 
155cc     48 E5 05 F1 | 	add	objptr, ##41800
155d0     F2 12 02 FB | 	rdlong	arg01, objptr
155d4     51 00 00 FF 
155d8     48 E5 85 F1 | 	sub	objptr, ##41800
155dc     A7 12 62 FC | 	wrlong	arg01, fp
155e0     A7 12 02 F6 | 	mov	arg01, fp
155e4     30 77 BF FD | 	call	#_push
155e8     A7 F0 03 F6 | 	mov	ptra, fp
155ec     B2 00 A0 FD | 	call	#popregs_
155f0                 | _do_mousex_ret
155f0     2D 00 64 FD | 	ret
155f4                 | 
155f4                 | ' 
155f4                 | ' '-------------------- mousey
155f4                 | ' 
155f4                 | ' sub do_mousey
155f4                 | _do_mousey
155f4     00 4A 05 F6 | 	mov	COUNT_, #0
155f8     A8 00 A0 FD | 	call	#pushregs_
155fc     0C F0 07 F1 | 	add	ptra, #12
15600     08 4E 05 F1 | 	add	fp, #8
15604     A7 3A 68 FC | 	wrlong	#29, fp
15608     08 4E 85 F1 | 	sub	fp, #8
1560c     51 00 00 FF 
15610     4C E5 05 F1 | 	add	objptr, ##41804
15614     F2 12 02 FB | 	rdlong	arg01, objptr
15618     51 00 00 FF 
1561c     4C E5 85 F1 | 	sub	objptr, ##41804
15620     A7 12 62 FC | 	wrlong	arg01, fp
15624     A7 12 02 F6 | 	mov	arg01, fp
15628     EC 76 BF FD | 	call	#_push
1562c     A7 F0 03 F6 | 	mov	ptra, fp
15630     B2 00 A0 FD | 	call	#popregs_
15634                 | _do_mousey_ret
15634     2D 00 64 FD | 	ret
15638                 | 
15638                 | ' 
15638                 | ' '------------------ new
15638                 | ' 
15638                 | ' sub do_new
15638                 | _do_new
15638     03 4A 05 F6 | 	mov	COUNT_, #3
1563c     A8 00 A0 FD | 	call	#pushregs_
15640                 | ' 
15640                 | ' if inrun=1 then inrun=2
15640     50 00 00 FF 
15644     EC E4 05 F1 | 	add	objptr, ##41196
15648     F2 16 02 FB | 	rdlong	arg03, objptr
1564c     50 00 00 FF 
15650     EC E4 85 F1 | 	sub	objptr, ##41196
15654     01 16 0E F2 | 	cmp	arg03, #1 wz
15658     50 00 00 AF 
1565c     EC E4 05 A1 |  if_e	add	objptr, ##41196
15660     F2 04 68 AC |  if_e	wrlong	#2, objptr
15664     50 00 00 AF 
15668     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1566c     13 12 C6 F9 | 	decod	arg01, #19
15670     01 14 66 F6 | 	neg	arg02, #1
15674     B4 CA B0 FD | 	call	#_pslpoke
15678     35 00 00 FF 
1567c     08 E4 05 F1 | 	add	objptr, ##27144
15680     F2 00 68 FC | 	wrlong	#0, objptr
15684                 | ' pslpoke(memlo,$FFFFFFFF)
15684                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15684     00 26 06 F6 | 	mov	local01, #0
15688     20 00 00 FF 
1568c     10 E4 85 F1 | 	sub	objptr, ##16400
15690     97 1E 48 FB | 	callpa	#(@LR__1801-@LR__1800)>>2,fcache_load_ptr_
15694                 | LR__1800
15694     13 17 02 F6 | 	mov	arg03, local01
15698     04 16 66 F0 | 	shl	arg03, #4
1569c     F2 16 02 F1 | 	add	arg03, objptr
156a0     AF 01 00 FF 
156a4     89 14 06 F6 | 	mov	arg02, ##@LR__5897
156a8     0B 15 62 FC | 	wrlong	arg02, arg03
156ac     13 29 02 F6 | 	mov	local02, local01
156b0     04 28 66 F0 | 	shl	local02, #4
156b4     F2 28 02 F1 | 	add	local02, objptr
156b8     0C 28 06 F1 | 	add	local02, #12
156bc     14 01 68 FC | 	wrlong	#0, local02
156c0     01 26 06 F1 | 	add	local01, #1
156c4     02 00 00 FF 
156c8     01 26 56 F2 | 	cmps	local01, ##1025 wc
156cc     C4 FF 9F CD |  if_b	jmp	#LR__1800
156d0                 | LR__1801
156d0     35 00 00 FF 
156d4     90 E4 05 F1 | 	add	objptr, ##27280
156d8     00 04 80 FF 
156dc     F2 00 68 FC | 	wrlong	##524288, objptr
156e0     06 00 00 FF 
156e4     30 E4 05 F1 | 	add	objptr, ##3120
156e8     00 04 80 FF 
156ec     F2 00 68 FC | 	wrlong	##524288, objptr
156f0     04 E4 05 F1 | 	add	objptr, #4
156f4     00 04 80 FF 
156f8     F2 00 68 FC | 	wrlong	##524288, objptr
156fc     0D 00 00 FF 
15700     64 E4 85 F1 | 	sub	objptr, ##6756
15704     F2 00 68 FC | 	wrlong	#0, objptr
15708     07 00 00 FF 
1570c     24 E4 05 F1 | 	add	objptr, ##3620
15710     F2 00 68 FC | 	wrlong	#0, objptr
15714     07 00 00 FF 
15718     20 E4 85 F1 | 	sub	objptr, ##3616
1571c     00 04 80 FF 
15720     F2 00 68 FC | 	wrlong	##524288, objptr
15724     0D 00 00 FF 
15728     D0 E4 05 F1 | 	add	objptr, ##6864
1572c     F2 00 68 FC | 	wrlong	#0, objptr
15730     AF 01 00 FF 
15734     8A 2A 06 F6 | 	mov	local03, ##@LR__5898
15738     01 00 00 FF 
1573c     5C E5 05 F1 | 	add	objptr, ##860
15740     F2 2A 62 FC | 	wrlong	local03, objptr
15744     07 00 00 FF 
15748     FC E5 85 F1 | 	sub	objptr, ##4092
1574c     F2 00 68 FC | 	wrlong	#0, objptr
15750     04 E4 05 F1 | 	add	objptr, #4
15754     FF FF FF FF 
15758     F2 FE 6B FC | 	wrlong	##-1, objptr
1575c     06 00 00 FF 
15760     A0 E4 05 F1 | 	add	objptr, ##3232
15764     F2 00 68 FC | 	wrlong	#0, objptr
15768     04 E4 05 F1 | 	add	objptr, #4
1576c     F2 00 68 FC | 	wrlong	#0, objptr
15770                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
15770                 | ' stackpointer=0
15770                 | ' lineptr=0 
15770                 | ' programptr=memlo ': stringptr=0
15770                 | ' dataptr=0 : readline=""
15770                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
15770                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
15770     00 26 06 F6 | 	mov	local01, #0
15774     06 00 00 FF 
15778     9C E4 85 F1 | 	sub	objptr, ##3228
1577c     97 16 48 FB | 	callpa	#(@LR__1803-@LR__1802)>>2,fcache_load_ptr_
15780                 | LR__1802
15780     13 29 02 F6 | 	mov	local02, local01
15784     02 28 66 F0 | 	shl	local02, #2
15788     13 29 02 F1 | 	add	local02, local01
1578c     02 28 66 F0 | 	shl	local02, #2
15790     F2 28 02 F1 | 	add	local02, objptr
15794     08 28 06 F1 | 	add	local02, #8
15798     FF FF FF FF 
1579c     14 FF 6B FC | 	wrlong	##-1, local02
157a0     01 26 06 F1 | 	add	local01, #1
157a4     41 26 56 F2 | 	cmps	local01, #65 wc
157a8     D4 FF 9F CD |  if_b	jmp	#LR__1802
157ac                 | LR__1803
157ac     4A 00 00 FF 
157b0     98 E4 85 F1 | 	sub	objptr, ##38040
157b4                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
157b4     00 26 06 F6 | 	mov	local01, #0
157b8                 | LR__1804
157b8     13 29 02 F6 | 	mov	local02, local01
157bc     02 28 66 F0 | 	shl	local02, #2
157c0     52 00 00 FF 
157c4     00 E4 05 F1 | 	add	objptr, ##41984
157c8     F2 28 02 F1 | 	add	local02, objptr
157cc     14 2B 0A FB | 	rdlong	local03, local02 wz
157d0     52 00 00 FF 
157d4     00 E4 85 F1 | 	sub	objptr, ##41984
157d8     34 00 90 AD |  if_e	jmp	#LR__1805
157dc     13 13 02 F6 | 	mov	arg01, local01
157e0     00 14 06 F6 | 	mov	arg02, #0
157e4     00 16 06 F6 | 	mov	arg03, #0
157e8     E8 D7 B0 FD | 	call	#_hg010b_spin2_setspritesize
157ec     13 29 02 F6 | 	mov	local02, local01
157f0     02 28 66 F0 | 	shl	local02, #2
157f4     52 00 00 FF 
157f8     00 E4 05 F1 | 	add	objptr, ##41984
157fc     F2 28 02 F1 | 	add	local02, objptr
15800     14 13 02 FB | 	rdlong	arg01, local02
15804     52 00 00 FF 
15808     00 E4 85 F1 | 	sub	objptr, ##41984
1580c     44 44 B1 FD | 	call	#__system___gc_free
15810                 | LR__1805
15810     01 26 06 F1 | 	add	local01, #1
15814     10 26 56 F2 | 	cmps	local01, #16 wc
15818     9C FF 9F CD |  if_b	jmp	#LR__1804
1581c     52 00 00 FF 
15820     54 E4 05 F1 | 	add	objptr, ##42068
15824     00 C0 9F FF 
15828     F2 00 68 FC | 	wrlong	##1065353216, objptr
1582c     04 E4 05 F1 | 	add	objptr, #4
15830     00 C0 9F FF 
15834     F2 00 68 FC | 	wrlong	##1065353216, objptr
15838     52 00 00 FF 
1583c     54 E4 85 F1 | 	sub	objptr, ##42068
15840     F2 2A 02 FB | 	rdlong	local03, objptr
15844     52 00 00 FF 
15848     40 E4 05 F1 | 	add	objptr, ##42048
1584c     F2 2A 62 FC | 	wrlong	local03, objptr
15850     52 00 00 FF 
15854     44 E4 85 F1 | 	sub	objptr, ##42052
15858     11 12 06 F6 | 	mov	arg01, #17
1585c     08 14 06 F6 | 	mov	arg02, #8
15860     10 16 06 F6 | 	mov	arg03, #16
15864     6C D7 B0 FD | 	call	#_hg010b_spin2_setspritesize
15868     10 12 06 F6 | 	mov	arg01, #16
1586c     20 14 06 F6 | 	mov	arg02, #32
15870     20 16 06 F6 | 	mov	arg03, #32
15874     5C D7 B0 FD | 	call	#_hg010b_spin2_setspritesize
15878     AF 01 00 FF 
1587c     8B 2A 06 F6 | 	mov	local03, ##@LR__5899
15880     52 00 00 FF 
15884     70 E4 05 F1 | 	add	objptr, ##42096
15888     F2 2A 62 FC | 	wrlong	local03, objptr
1588c     52 00 00 FF 
15890     70 E4 85 F1 | 	sub	objptr, ##42096
15894     EC BA B0 FD | 	call	#_init_audio
15898     A7 F0 03 F6 | 	mov	ptra, fp
1589c     B2 00 A0 FD | 	call	#popregs_
158a0                 | _do_new_ret
158a0     2D 00 64 FD | 	ret
158a4                 | 
158a4                 | ' 
158a4                 | ' '-------------------- next
158a4                 | ' 
158a4                 | ' sub do_next()
158a4                 | _do_next
158a4     04 4A 05 F6 | 	mov	COUNT_, #4
158a8     A8 00 A0 FD | 	call	#pushregs_
158ac     D0 73 BF FD | 	call	#_pop
158b0     FD 26 02 F6 | 	mov	local01, result1
158b4     FE 28 02 F6 | 	mov	local02, result2
158b8     FF 2A 02 F6 | 	mov	local03, result3
158bc                 | ' t1=pop() :varnum=t1.result.uresult
158bc                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
158bc     50 00 00 FF 
158c0     30 E5 05 F1 | 	add	objptr, ##41264
158c4     F2 14 02 FB | 	rdlong	arg02, objptr
158c8     0A 13 02 F6 | 	mov	arg01, arg02
158cc     02 12 66 F0 | 	shl	arg01, #2
158d0     0A 13 02 F1 | 	add	arg01, arg02
158d4     02 12 66 F0 | 	shl	arg01, #2
158d8     06 00 00 FF 
158dc     98 E4 85 F1 | 	sub	objptr, ##3224
158e0     F2 12 02 F1 | 	add	arg01, objptr
158e4     08 12 06 F1 | 	add	arg01, #8
158e8     09 15 02 FB | 	rdlong	arg02, arg01
158ec     13 15 0A F2 | 	cmp	arg02, local01 wz
158f0     4A 00 00 FF 
158f4     98 E4 85 F1 | 	sub	objptr, ##38040
158f8     10 00 90 AD |  if_e	jmp	#LR__1810
158fc     25 12 06 F6 | 	mov	arg01, #37
15900     00 14 06 F6 | 	mov	arg02, #0
15904     84 C6 B0 FD | 	call	#_printerror
15908     54 03 90 FD | 	jmp	#LR__1817
1590c                 | LR__1810
1590c                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
1590c     13 15 02 F6 | 	mov	arg02, local01
15910     04 14 66 F0 | 	shl	arg02, #4
15914     14 00 00 FF 
15918     F8 E5 05 F1 | 	add	objptr, ##10744
1591c     F2 14 02 F1 | 	add	arg02, objptr
15920     0C 14 06 F1 | 	add	arg02, #12
15924     0A 15 02 FB | 	rdlong	arg02, arg02
15928     1E 14 0E F2 | 	cmp	arg02, #30 wz
1592c     14 00 00 FF 
15930     F8 E5 85 F1 | 	sub	objptr, ##10744
15934     54 00 90 5D |  if_ne	jmp	#LR__1811
15938     13 15 02 F6 | 	mov	arg02, local01
1593c     04 14 66 F0 | 	shl	arg02, #4
15940     14 00 00 FF 
15944     F8 E5 05 F1 | 	add	objptr, ##10744
15948     F2 14 02 F1 | 	add	arg02, objptr
1594c     0C 14 06 F1 | 	add	arg02, #12
15950     0A 39 68 FC | 	wrlong	#28, arg02
15954     13 2D 02 F6 | 	mov	local04, local01
15958     04 2C 66 F0 | 	shl	local04, #4
1595c     F2 2C 02 F1 | 	add	local04, objptr
15960     13 15 02 F6 | 	mov	arg02, local01
15964     04 14 66 F0 | 	shl	arg02, #4
15968     F2 14 02 F1 | 	add	arg02, objptr
1596c     04 14 06 F1 | 	add	arg02, #4
15970     0A 13 02 FB | 	rdlong	arg01, arg02
15974     14 00 00 FF 
15978     F8 E5 85 F1 | 	sub	objptr, ##10744
1597c     01 14 06 F6 | 	mov	arg02, #1
15980     34 33 B1 FD | 	call	#__system___float_tointeger
15984     04 2C 06 F1 | 	add	local04, #4
15988     16 FB 61 FC | 	wrlong	result1, local04
1598c                 | LR__1811
1598c     50 00 00 FF 
15990     30 E5 05 F1 | 	add	objptr, ##41264
15994     F2 2C 02 FB | 	rdlong	local04, objptr
15998     16 15 02 F6 | 	mov	arg02, local04
1599c     02 14 66 F0 | 	shl	arg02, #2
159a0     16 15 02 F1 | 	add	arg02, local04
159a4     02 14 66 F0 | 	shl	arg02, #2
159a8     06 00 00 FF 
159ac     98 E4 85 F1 | 	sub	objptr, ##3224
159b0     F2 14 02 F1 | 	add	arg02, objptr
159b4     0C 14 06 F1 | 	add	arg02, #12
159b8     0A FF 01 FB | 	rdlong	result3, arg02
159bc     13 2D 02 F6 | 	mov	local04, local01
159c0     04 2C 66 F0 | 	shl	local04, #4
159c4     35 00 00 FF 
159c8     A0 E4 85 F1 | 	sub	objptr, ##27296
159cc     F2 2C 02 F1 | 	add	local04, objptr
159d0     13 15 02 F6 | 	mov	arg02, local01
159d4     04 14 66 F0 | 	shl	arg02, #4
159d8     F2 14 02 F1 | 	add	arg02, objptr
159dc     04 14 06 F1 | 	add	arg02, #4
159e0     0A 13 02 FB | 	rdlong	arg01, arg02
159e4     FF 12 02 F1 | 	add	arg01, result3
159e8     04 2C 06 F1 | 	add	local04, #4
159ec     16 13 62 FC | 	wrlong	arg01, local04
159f0                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
159f0                 | ' if fortable(fortop).stepval>=0 then
159f0     3B 00 00 FF 
159f4     38 E5 05 F1 | 	add	objptr, ##30520
159f8     F2 2C 02 FB | 	rdlong	local04, objptr
159fc     16 13 02 F6 | 	mov	arg01, local04
15a00     02 12 66 F0 | 	shl	arg01, #2
15a04     16 13 02 F1 | 	add	arg01, local04
15a08     02 12 66 F0 | 	shl	arg01, #2
15a0c     06 00 00 FF 
15a10     98 E4 85 F1 | 	sub	objptr, ##3224
15a14     F2 12 02 F1 | 	add	arg01, objptr
15a18     0C 12 06 F1 | 	add	arg01, #12
15a1c     09 13 02 FB | 	rdlong	arg01, arg01
15a20     00 12 56 F2 | 	cmps	arg01, #0 wc
15a24     4A 00 00 FF 
15a28     98 E4 85 F1 | 	sub	objptr, ##38040
15a2c     78 00 90 CD |  if_b	jmp	#LR__1812
15a30                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15a30     04 26 66 F0 | 	shl	local01, #4
15a34     14 00 00 FF 
15a38     F8 E5 05 F1 | 	add	objptr, ##10744
15a3c     F2 26 02 F1 | 	add	local01, objptr
15a40     3B 00 00 FF 
15a44     38 E5 05 F1 | 	add	objptr, ##30520
15a48     F2 12 02 FB | 	rdlong	arg01, objptr
15a4c     09 2D 02 F6 | 	mov	local04, arg01
15a50     02 2C 66 F0 | 	shl	local04, #2
15a54     09 2D 02 F1 | 	add	local04, arg01
15a58     02 2C 66 F0 | 	shl	local04, #2
15a5c     06 00 00 FF 
15a60     98 E4 85 F1 | 	sub	objptr, ##3224
15a64     F2 2C 02 F1 | 	add	local04, objptr
15a68     04 26 06 F1 | 	add	local01, #4
15a6c     13 27 02 FB | 	rdlong	local01, local01
15a70     10 2C 06 F1 | 	add	local04, #16
15a74     16 2D 02 FB | 	rdlong	local04, local04
15a78     16 27 5A F2 | 	cmps	local01, local04 wcz
15a7c     4A 00 00 FF 
15a80     98 E4 85 F1 | 	sub	objptr, ##38040
15a84     9C 00 90 ED |  if_be	jmp	#LR__1814
15a88     50 00 00 FF 
15a8c     30 E5 05 F1 | 	add	objptr, ##41264
15a90     F2 2C 02 FB | 	rdlong	local04, objptr
15a94     01 2C 86 F1 | 	sub	local04, #1
15a98     F2 2C 62 FC | 	wrlong	local04, objptr
15a9c     50 00 00 FF 
15aa0     30 E5 85 F1 | 	sub	objptr, ##41264
15aa4     B8 01 90 FD | 	jmp	#LR__1817
15aa8                 | LR__1812
15aa8                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
15aa8     13 2D 02 F6 | 	mov	local04, local01
15aac     04 2C 66 F0 | 	shl	local04, #4
15ab0     14 00 00 FF 
15ab4     F8 E5 05 F1 | 	add	objptr, ##10744
15ab8     F2 2C 02 F1 | 	add	local04, objptr
15abc     3B 00 00 FF 
15ac0     38 E5 05 F1 | 	add	objptr, ##30520
15ac4     F2 26 02 FB | 	rdlong	local01, objptr
15ac8     13 13 02 F6 | 	mov	arg01, local01
15acc     02 12 66 F0 | 	shl	arg01, #2
15ad0     13 13 02 F1 | 	add	arg01, local01
15ad4     02 12 66 F0 | 	shl	arg01, #2
15ad8     06 00 00 FF 
15adc     98 E4 85 F1 | 	sub	objptr, ##3224
15ae0     F2 12 02 F1 | 	add	arg01, objptr
15ae4     04 2C 06 F1 | 	add	local04, #4
15ae8     16 2D 02 FB | 	rdlong	local04, local04
15aec     10 12 06 F1 | 	add	arg01, #16
15af0     09 13 02 FB | 	rdlong	arg01, arg01
15af4     09 2D 52 F2 | 	cmps	local04, arg01 wc
15af8     4A 00 00 FF 
15afc     98 E4 85 F1 | 	sub	objptr, ##38040
15b00     20 00 90 3D |  if_ae	jmp	#LR__1813
15b04     50 00 00 FF 
15b08     30 E5 05 F1 | 	add	objptr, ##41264
15b0c     F2 2C 02 FB | 	rdlong	local04, objptr
15b10     01 2C 86 F1 | 	sub	local04, #1
15b14     F2 2C 62 FC | 	wrlong	local04, objptr
15b18     50 00 00 FF 
15b1c     30 E5 85 F1 | 	sub	objptr, ##41264
15b20     3C 01 90 FD | 	jmp	#LR__1817
15b24                 | LR__1813
15b24                 | LR__1814
15b24                 | ' ' if not returned, goto pointer 
15b24                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15b24     50 00 00 FF 
15b28     EC E4 05 F1 | 	add	objptr, ##41196
15b2c     F2 2C 02 FB | 	rdlong	local04, objptr
15b30     50 00 00 FF 
15b34     EC E4 85 F1 | 	sub	objptr, ##41196
15b38     01 2C 16 F2 | 	cmp	local04, #1 wc
15b3c     DC 00 90 CD |  if_b	jmp	#LR__1815
15b40     50 00 00 FF 
15b44     30 E5 05 F1 | 	add	objptr, ##41264
15b48     F2 2C 02 FB | 	rdlong	local04, objptr
15b4c     16 27 02 F6 | 	mov	local01, local04
15b50     02 26 66 F0 | 	shl	local01, #2
15b54     16 27 02 F1 | 	add	local01, local04
15b58     02 26 66 F0 | 	shl	local01, #2
15b5c     06 00 00 FF 
15b60     98 E4 85 F1 | 	sub	objptr, ##3224
15b64     F2 26 02 F1 | 	add	local01, objptr
15b68     06 00 00 FF 
15b6c     20 E4 05 F1 | 	add	objptr, ##3104
15b70     F2 2C 02 FB | 	rdlong	local04, objptr
15b74     50 00 00 FF 
15b78     B8 E4 85 F1 | 	sub	objptr, ##41144
15b7c     13 27 02 FB | 	rdlong	local01, local01
15b80     13 2D 0A F2 | 	cmp	local04, local01 wz
15b84     94 00 90 AD |  if_e	jmp	#LR__1815
15b88     50 00 00 FF 
15b8c     30 E5 05 F1 | 	add	objptr, ##41264
15b90     F2 2C 02 FB | 	rdlong	local04, objptr
15b94     16 27 02 F6 | 	mov	local01, local04
15b98     02 26 66 F0 | 	shl	local01, #2
15b9c     16 27 02 F1 | 	add	local01, local04
15ba0     02 26 66 F0 | 	shl	local01, #2
15ba4     06 00 00 FF 
15ba8     98 E4 85 F1 | 	sub	objptr, ##3224
15bac     F2 26 02 F1 | 	add	local01, objptr
15bb0     13 27 02 FB | 	rdlong	local01, local01
15bb4     06 00 00 FF 
15bb8     20 E4 05 F1 | 	add	objptr, ##3104
15bbc     F2 26 62 FC | 	wrlong	local01, objptr
15bc0     78 E4 05 F1 | 	add	objptr, #120
15bc4     F2 2C 02 FB | 	rdlong	local04, objptr
15bc8     16 27 02 F6 | 	mov	local01, local04
15bcc     02 26 66 F0 | 	shl	local01, #2
15bd0     16 27 02 F1 | 	add	local01, local04
15bd4     02 26 66 F0 | 	shl	local01, #2
15bd8     06 00 00 FF 
15bdc     98 E4 85 F1 | 	sub	objptr, ##3224
15be0     F2 26 02 F1 | 	add	local01, objptr
15be4     04 26 06 F1 | 	add	local01, #4
15be8     13 27 02 FB | 	rdlong	local01, local01
15bec     06 00 00 FF 
15bf0     24 E4 05 F1 | 	add	objptr, ##3108
15bf4     F2 26 62 FC | 	wrlong	local01, objptr
15bf8     06 00 00 FF 
15bfc     40 E4 85 F1 | 	sub	objptr, ##3136
15c00     F2 2C 02 FB | 	rdlong	local04, objptr
15c04     01 2C 86 F1 | 	sub	local04, #1
15c08     04 E4 05 F1 | 	add	objptr, #4
15c0c     F2 2C 62 FC | 	wrlong	local04, objptr
15c10     4A 00 00 FF 
15c14     80 E4 85 F1 | 	sub	objptr, ##38016
15c18     44 00 90 FD | 	jmp	#LR__1816
15c1c                 | LR__1815
15c1c     50 00 00 FF 
15c20     30 E5 05 F1 | 	add	objptr, ##41264
15c24     F2 2C 02 FB | 	rdlong	local04, objptr
15c28     16 27 02 F6 | 	mov	local01, local04
15c2c     02 26 66 F0 | 	shl	local01, #2
15c30     16 27 02 F1 | 	add	local01, local04
15c34     02 26 66 F0 | 	shl	local01, #2
15c38     06 00 00 FF 
15c3c     98 E4 85 F1 | 	sub	objptr, ##3224
15c40     F2 26 02 F1 | 	add	local01, objptr
15c44     04 26 06 F1 | 	add	local01, #4
15c48     13 27 02 FB | 	rdlong	local01, local01
15c4c     01 26 86 F1 | 	sub	local01, #1
15c50     18 E4 85 F1 | 	sub	objptr, #24
15c54     F2 26 62 FC | 	wrlong	local01, objptr
15c58     4A 00 00 FF 
15c5c     80 E4 85 F1 | 	sub	objptr, ##38016
15c60                 | LR__1816
15c60                 | LR__1817
15c60     A7 F0 03 F6 | 	mov	ptra, fp
15c64     B2 00 A0 FD | 	call	#popregs_
15c68                 | _do_next_ret
15c68     2D 00 64 FD | 	ret
15c6c                 | 
15c6c                 | ' 
15c6c                 | ' '-------------------- no command (print "Unknown command")
15c6c                 | ' 
15c6c                 | ' sub do_no_command
15c6c                 | _do_no_command
15c6c     50 00 00 FF 
15c70     F0 E4 05 F1 | 	add	objptr, ##41200
15c74     F2 14 02 FB | 	rdlong	arg02, objptr
15c78     50 00 00 FF 
15c7c     F0 E4 85 F1 | 	sub	objptr, ##41200
15c80     17 12 06 F6 | 	mov	arg01, #23
15c84     04 C3 B0 FD | 	call	#_printerror
15c88                 | _do_no_command_ret
15c88     2D 00 64 FD | 	ret
15c8c                 | 
15c8c                 | ' 
15c8c                 | ' '-------------------- nothing
15c8c                 | ' 
15c8c                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15c8c                 | _do_nothing
15c8c                 | _do_nothing_ret
15c8c     2D 00 64 FD | 	ret
15c90                 | 
15c90                 | ' 
15c90                 | ' '-------------------- on
15c90                 | ' 
15c90                 | ' sub do_on
15c90                 | _do_on
15c90     01 4A 05 F6 | 	mov	COUNT_, #1
15c94     A8 00 A0 FD | 	call	#pushregs_
15c98     18 F0 07 F1 | 	add	ptra, #24
15c9c     4A 00 00 FF 
15ca0     80 E4 05 F1 | 	add	objptr, ##38016
15ca4     F2 12 02 FB | 	rdlong	arg01, objptr
15ca8     09 FD 01 F6 | 	mov	result2, arg01
15cac     01 FC 65 F0 | 	shl	result2, #1
15cb0     09 FD 01 F1 | 	add	result2, arg01
15cb4     02 FC 65 F0 | 	shl	result2, #2
15cb8     03 00 00 FF 
15cbc     04 E4 85 F1 | 	sub	objptr, ##1540
15cc0     F2 FC 01 F1 | 	add	result2, objptr
15cc4     FE 12 02 FB | 	rdlong	arg01, result2
15cc8     14 4E 05 F1 | 	add	fp, #20
15ccc     A7 12 62 FC | 	wrlong	arg01, fp
15cd0     03 00 00 FF 
15cd4     04 E4 05 F1 | 	add	objptr, ##1540
15cd8     F2 12 02 FB | 	rdlong	arg01, objptr
15cdc     09 27 02 F6 | 	mov	local01, arg01
15ce0     01 26 66 F0 | 	shl	local01, #1
15ce4     09 27 02 F1 | 	add	local01, arg01
15ce8     02 26 66 F0 | 	shl	local01, #2
15cec     03 00 00 FF 
15cf0     04 E4 85 F1 | 	sub	objptr, ##1540
15cf4     F2 26 02 F1 | 	add	local01, objptr
15cf8     04 26 06 F1 | 	add	local01, #4
15cfc     13 27 02 FB | 	rdlong	local01, local01
15d00     08 4E 85 F1 | 	sub	fp, #8
15d04     A7 26 62 FC | 	wrlong	local01, fp
15d08     0C 4E 85 F1 | 	sub	fp, #12
15d0c     47 00 00 FF 
15d10     7C E4 85 F1 | 	sub	objptr, ##36476
15d14     68 6F BF FD | 	call	#_pop
15d18     FF 26 02 F6 | 	mov	local01, result3
15d1c     A7 FA 61 FC | 	wrlong	result1, fp
15d20     04 4E 05 F1 | 	add	fp, #4
15d24     A7 FC 61 FC | 	wrlong	result2, fp
15d28     04 4E 05 F1 | 	add	fp, #4
15d2c     A7 26 62 FC | 	wrlong	local01, fp
15d30     08 4E 85 F1 | 	sub	fp, #8
15d34     A7 12 02 F6 | 	mov	arg01, fp
15d38     28 71 BF FD | 	call	#_converttoint
15d3c     10 4E 05 F1 | 	add	fp, #16
15d40     A7 FA 61 FC | 	wrlong	result1, fp
15d44                 | ' 
15d44                 | ' numpar=compiledline(lineptr_e).result.uresult
15d44                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15d44                 | ' t1=pop()
15d44                 | ' t=converttoint(t1)
15d44                 | ' if t<1 orelse t>numpar then return
15d44     10 4E 85 F1 | 	sub	fp, #16
15d48     01 FA 55 F2 | 	cmps	result1, #1 wc
15d4c     58 00 90 CD |  if_b	jmp	#LR__1820
15d50     10 4E 05 F1 | 	add	fp, #16
15d54     A7 26 02 FB | 	rdlong	local01, fp
15d58     04 4E 05 F1 | 	add	fp, #4
15d5c     A7 12 02 FB | 	rdlong	arg01, fp
15d60     14 4E 85 F1 | 	sub	fp, #20
15d64     09 27 5A F2 | 	cmps	local01, arg01 wcz
15d68     3C 00 90 1D |  if_a	jmp	#LR__1820
15d6c     10 4E 05 F1 | 	add	fp, #16
15d70     A7 26 02 FB | 	rdlong	local01, fp
15d74     01 26 86 F1 | 	sub	local01, #1
15d78     04 4E 85 F1 | 	sub	fp, #4
15d7c     A7 12 02 FB | 	rdlong	arg01, fp
15d80     13 13 02 FD | 	qmul	arg01, local01
15d84     4A 00 00 FF 
15d88     80 E4 05 F1 | 	add	objptr, ##38016
15d8c     F2 26 02 FB | 	rdlong	local01, objptr
15d90     0C 4E 85 F1 | 	sub	fp, #12
15d94     18 12 62 FD | 	getqx	arg01
15d98     09 27 02 F1 | 	add	local01, arg01
15d9c     F2 26 62 FC | 	wrlong	local01, objptr
15da0     4A 00 00 FF 
15da4     80 E4 85 F1 | 	sub	objptr, ##38016
15da8                 | LR__1820
15da8     A7 F0 03 F6 | 	mov	ptra, fp
15dac     B2 00 A0 FD | 	call	#popregs_
15db0                 | _do_on_ret
15db0     2D 00 64 FD | 	ret
15db4                 | 
15db4                 | ' 
15db4                 | ' '-------------------- open
15db4                 | ' 
15db4                 | ' sub do_open
15db4                 | _do_open
15db4     02 4A 05 F6 | 	mov	COUNT_, #2
15db8     A8 00 A0 FD | 	call	#pushregs_
15dbc     20 F0 07 F1 | 	add	ptra, #32
15dc0     4A 00 00 FF 
15dc4     80 E4 05 F1 | 	add	objptr, ##38016
15dc8     F2 16 02 FB | 	rdlong	arg03, objptr
15dcc     0B 15 02 F6 | 	mov	arg02, arg03
15dd0     01 14 66 F0 | 	shl	arg02, #1
15dd4     0B 15 02 F1 | 	add	arg02, arg03
15dd8     02 14 66 F0 | 	shl	arg02, #2
15ddc     03 00 00 FF 
15de0     04 E4 85 F1 | 	sub	objptr, ##1540
15de4     F2 14 02 F1 | 	add	arg02, objptr
15de8     0A 17 02 FB | 	rdlong	arg03, arg02
15dec     10 4E 05 F1 | 	add	fp, #16
15df0     A7 16 62 FC | 	wrlong	arg03, fp
15df4     10 4E 85 F1 | 	sub	fp, #16
15df8     47 00 00 FF 
15dfc     7C E4 85 F1 | 	sub	objptr, ##36476
15e00     7C 6E BF FD | 	call	#_pop
15e04     FF 16 02 F6 | 	mov	arg03, result3
15e08     A7 FA 61 FC | 	wrlong	result1, fp
15e0c     04 4E 05 F1 | 	add	fp, #4
15e10     A7 FC 61 FC | 	wrlong	result2, fp
15e14     04 4E 05 F1 | 	add	fp, #4
15e18     A7 16 62 FC | 	wrlong	arg03, fp
15e1c                 | ' 
15e1c                 | ' numpar=compiledline(lineptr_e).result.uresult
15e1c                 | ' 
15e1c                 | ' t1=pop()
15e1c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15e1c     08 4E 85 F1 | 	sub	fp, #8
15e20     2B 16 0E F2 | 	cmp	arg03, #43 wz
15e24     18 00 90 5D |  if_ne	jmp	#LR__1830
15e28     A7 12 02 FB | 	rdlong	arg01, fp
15e2c     C8 6F BF FD | 	call	#_convertstring
15e30     A7 FA 61 FC | 	wrlong	result1, fp
15e34     08 4E 05 F1 | 	add	fp, #8
15e38     A7 3E 68 FC | 	wrlong	#31, fp
15e3c     08 4E 85 F1 | 	sub	fp, #8
15e40                 | LR__1830
15e40                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15e40     08 4E 05 F1 | 	add	fp, #8
15e44     A7 16 02 FB | 	rdlong	arg03, fp
15e48     08 4E 85 F1 | 	sub	fp, #8
15e4c     1F 16 0E F2 | 	cmp	arg03, #31 wz
15e50     44 00 90 AD |  if_e	jmp	#LR__1831
15e54     00 12 06 F6 | 	mov	arg01, #0
15e58     44 58 B1 FD | 	call	#__system___getiolock_0599
15e5c     FD 12 02 F6 | 	mov	arg01, result1
15e60     14 FB B0 FD | 	call	#__system___lockmem
15e64     AF 01 00 FF 
15e68     96 14 06 F6 | 	mov	arg02, ##@LR__5900
15e6c     00 12 06 F6 | 	mov	arg01, #0
15e70     00 16 06 F6 | 	mov	arg03, #0
15e74     F4 07 B1 FD | 	call	#__system___basic_print_string
15e78     00 12 06 F6 | 	mov	arg01, #0
15e7c     0A 14 06 F6 | 	mov	arg02, #10
15e80     00 16 06 F6 | 	mov	arg03, #0
15e84     8C 07 B1 FD | 	call	#__system___basic_print_char
15e88     00 12 06 F6 | 	mov	arg01, #0
15e8c     10 58 B1 FD | 	call	#__system___getiolock_0599
15e90     FD 00 68 FC | 	wrlong	#0, result1
15e94     28 02 90 FD | 	jmp	#LR__1842
15e98                 | LR__1831
15e98     A7 16 02 FB | 	rdlong	arg03, fp
15e9c     0C 4E 05 F1 | 	add	fp, #12
15ea0     A7 16 62 FC | 	wrlong	arg03, fp
15ea4     0C 4E 85 F1 | 	sub	fp, #12
15ea8     D4 6D BF FD | 	call	#_pop
15eac     FF 16 02 F6 | 	mov	arg03, result3
15eb0     A7 FA 61 FC | 	wrlong	result1, fp
15eb4     04 4E 05 F1 | 	add	fp, #4
15eb8     A7 FC 61 FC | 	wrlong	result2, fp
15ebc     04 4E 05 F1 | 	add	fp, #4
15ec0     A7 16 62 FC | 	wrlong	arg03, fp
15ec4                 | ' filename=t1.result.sresult
15ec4                 | ' t1=pop()
15ec4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15ec4     08 4E 85 F1 | 	sub	fp, #8
15ec8     2B 16 0E F2 | 	cmp	arg03, #43 wz
15ecc     18 00 90 5D |  if_ne	jmp	#LR__1832
15ed0     A7 12 02 FB | 	rdlong	arg01, fp
15ed4     20 6F BF FD | 	call	#_convertstring
15ed8     A7 FA 61 FC | 	wrlong	result1, fp
15edc     08 4E 05 F1 | 	add	fp, #8
15ee0     A7 3E 68 FC | 	wrlong	#31, fp
15ee4     08 4E 85 F1 | 	sub	fp, #8
15ee8                 | LR__1832
15ee8     14 4E 05 F1 | 	add	fp, #20
15eec     A7 00 68 FC | 	wrlong	#0, fp
15ef0                 | ' mode=0
15ef0                 | ' if t1.result_type=result_string then
15ef0     0C 4E 85 F1 | 	sub	fp, #12
15ef4     A7 14 02 FB | 	rdlong	arg02, fp
15ef8     08 4E 85 F1 | 	sub	fp, #8
15efc     1F 14 0E F2 | 	cmp	arg02, #31 wz
15f00     64 00 90 5D |  if_ne	jmp	#LR__1833
15f04                 | '   if t1.result.sresult="read" then mode=1
15f04     A7 12 02 FB | 	rdlong	arg01, fp
15f08     AF 01 00 FF 
15f0c     A8 14 06 F6 | 	mov	arg02, ##@LR__5901
15f10     8C FA B0 FD | 	call	#__system___string_cmp
15f14     00 FA 0D F2 | 	cmp	result1, #0 wz
15f18     14 4E 05 A1 |  if_e	add	fp, #20
15f1c     A7 02 68 AC |  if_e	wrlong	#1, fp
15f20     14 4E 85 A1 |  if_e	sub	fp, #20
15f24                 | '   if t1.result.sresult="write" then mode=2
15f24     A7 12 02 FB | 	rdlong	arg01, fp
15f28     AF 01 00 FF 
15f2c     AD 14 06 F6 | 	mov	arg02, ##@LR__5902
15f30     6C FA B0 FD | 	call	#__system___string_cmp
15f34     00 FA 0D F2 | 	cmp	result1, #0 wz
15f38     14 4E 05 A1 |  if_e	add	fp, #20
15f3c     A7 04 68 AC |  if_e	wrlong	#2, fp
15f40     14 4E 85 A1 |  if_e	sub	fp, #20
15f44                 | '   if t1.result.sresult="append" then mode=4
15f44     A7 12 02 FB | 	rdlong	arg01, fp
15f48     AF 01 00 FF 
15f4c     B3 14 06 F6 | 	mov	arg02, ##@LR__5903
15f50     4C FA B0 FD | 	call	#__system___string_cmp
15f54     00 FA 0D F2 | 	cmp	result1, #0 wz
15f58     14 4E 05 A1 |  if_e	add	fp, #20
15f5c     A7 08 68 AC |  if_e	wrlong	#4, fp
15f60     14 4E 85 A1 |  if_e	sub	fp, #20
15f64     14 00 90 FD | 	jmp	#LR__1834
15f68                 | LR__1833
15f68     A7 12 02 F6 | 	mov	arg01, fp
15f6c     F4 6E BF FD | 	call	#_converttoint
15f70     14 4E 05 F1 | 	add	fp, #20
15f74     A7 FA 61 FC | 	wrlong	result1, fp
15f78     14 4E 85 F1 | 	sub	fp, #20
15f7c                 | LR__1834
15f7c     00 6D BF FD | 	call	#_pop
15f80     FF 16 02 F6 | 	mov	arg03, result3
15f84     A7 FA 61 FC | 	wrlong	result1, fp
15f88     04 4E 05 F1 | 	add	fp, #4
15f8c     A7 FC 61 FC | 	wrlong	result2, fp
15f90     04 4E 05 F1 | 	add	fp, #4
15f94     A7 16 62 FC | 	wrlong	arg03, fp
15f98                 | ' t1=pop()
15f98                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15f98     08 4E 85 F1 | 	sub	fp, #8
15f9c     2C 16 0E F2 | 	cmp	arg03, #44 wz
15fa0     44 00 90 AD |  if_e	jmp	#LR__1835
15fa4     00 12 06 F6 | 	mov	arg01, #0
15fa8     F4 56 B1 FD | 	call	#__system___getiolock_0599
15fac     FD 12 02 F6 | 	mov	arg01, result1
15fb0     C4 F9 B0 FD | 	call	#__system___lockmem
15fb4     AF 01 00 FF 
15fb8     BA 14 06 F6 | 	mov	arg02, ##@LR__5904
15fbc     00 12 06 F6 | 	mov	arg01, #0
15fc0     00 16 06 F6 | 	mov	arg03, #0
15fc4     A4 06 B1 FD | 	call	#__system___basic_print_string
15fc8     00 12 06 F6 | 	mov	arg01, #0
15fcc     0A 14 06 F6 | 	mov	arg02, #10
15fd0     00 16 06 F6 | 	mov	arg03, #0
15fd4     3C 06 B1 FD | 	call	#__system___basic_print_char
15fd8     00 12 06 F6 | 	mov	arg01, #0
15fdc     C0 56 B1 FD | 	call	#__system___getiolock_0599
15fe0     FD 00 68 FC | 	wrlong	#0, result1
15fe4     D8 00 90 FD | 	jmp	#LR__1842
15fe8                 | LR__1835
15fe8     A7 26 02 FB | 	rdlong	local01, fp
15fec     18 4E 05 F1 | 	add	fp, #24
15ff0     A7 26 62 FC | 	wrlong	local01, fp
15ff4                 | ' channel  = t1.result.iresult
15ff4                 | ' select case  mode
15ff4     04 4E 85 F1 | 	sub	fp, #4
15ff8     A7 28 02 FB | 	rdlong	local02, fp
15ffc     14 4E 85 F1 | 	sub	fp, #20
16000     01 28 86 F1 | 	sub	local02, #1
16004     04 28 26 F3 | 	fle	local02, #4
16008     30 28 62 FD | 	jmprel	local02
1600c                 | LR__1836
1600c     10 00 90 FD | 	jmp	#LR__1837
16010     2C 00 90 FD | 	jmp	#LR__1838
16014     68 00 90 FD | 	jmp	#LR__1840
16018     44 00 90 FD | 	jmp	#LR__1839
1601c     60 00 90 FD | 	jmp	#LR__1840
16020                 | LR__1837
16020     18 4E 05 F1 | 	add	fp, #24
16024     A7 12 02 FB | 	rdlong	arg01, fp
16028     0C 4E 85 F1 | 	sub	fp, #12
1602c     A7 14 02 FB | 	rdlong	arg02, fp
16030     0C 4E 85 F1 | 	sub	fp, #12
16034     00 16 06 F6 | 	mov	arg03, #0
16038     40 05 B1 FD | 	call	#__system___basic_open_string
1603c     80 00 90 FD | 	jmp	#LR__1841
16040                 | LR__1838
16040     18 4E 05 F1 | 	add	fp, #24
16044     A7 12 02 FB | 	rdlong	arg01, fp
16048     0C 4E 85 F1 | 	sub	fp, #12
1604c     A7 14 02 FB | 	rdlong	arg02, fp
16050     0C 4E 85 F1 | 	sub	fp, #12
16054     0D 16 06 F6 | 	mov	arg03, #13
16058     20 05 B1 FD | 	call	#__system___basic_open_string
1605c     60 00 90 FD | 	jmp	#LR__1841
16060                 | LR__1839
16060     18 4E 05 F1 | 	add	fp, #24
16064     A7 12 02 FB | 	rdlong	arg01, fp
16068     0C 4E 85 F1 | 	sub	fp, #12
1606c     A7 14 02 FB | 	rdlong	arg02, fp
16070     0C 4E 85 F1 | 	sub	fp, #12
16074     25 16 06 F6 | 	mov	arg03, #37
16078     00 05 B1 FD | 	call	#__system___basic_open_string
1607c     40 00 90 FD | 	jmp	#LR__1841
16080                 | LR__1840
16080     00 12 06 F6 | 	mov	arg01, #0
16084     18 56 B1 FD | 	call	#__system___getiolock_0599
16088     FD 12 02 F6 | 	mov	arg01, result1
1608c     E8 F8 B0 FD | 	call	#__system___lockmem
16090     AF 01 00 FF 
16094     CC 14 06 F6 | 	mov	arg02, ##@LR__5905
16098     00 12 06 F6 | 	mov	arg01, #0
1609c     00 16 06 F6 | 	mov	arg03, #0
160a0     C8 05 B1 FD | 	call	#__system___basic_print_string
160a4     00 12 06 F6 | 	mov	arg01, #0
160a8     0A 14 06 F6 | 	mov	arg02, #10
160ac     00 16 06 F6 | 	mov	arg03, #0
160b0     60 05 B1 FD | 	call	#__system___basic_print_char
160b4     00 12 06 F6 | 	mov	arg01, #0
160b8     E4 55 B1 FD | 	call	#__system___getiolock_0599
160bc     FD 00 68 FC | 	wrlong	#0, result1
160c0                 | LR__1841
160c0                 | LR__1842
160c0     A7 F0 03 F6 | 	mov	ptra, fp
160c4     B2 00 A0 FD | 	call	#popregs_
160c8                 | _do_open_ret
160c8     2D 00 64 FD | 	ret
160cc                 | 
160cc                 | ' 
160cc                 | ' ' ------------------ padx
160cc                 | ' 
160cc                 | ' sub do_padh
160cc                 | _do_padh
160cc     01 4A 05 F6 | 	mov	COUNT_, #1
160d0     A8 00 A0 FD | 	call	#pushregs_
160d4     14 F0 07 F1 | 	add	ptra, #20
160d8     4A 00 00 FF 
160dc     80 E4 05 F1 | 	add	objptr, ##38016
160e0     F2 26 02 FB | 	rdlong	local01, objptr
160e4     13 17 02 F6 | 	mov	arg03, local01
160e8     01 16 66 F0 | 	shl	arg03, #1
160ec     13 17 02 F1 | 	add	arg03, local01
160f0     02 16 66 F0 | 	shl	arg03, #2
160f4     03 00 00 FF 
160f8     04 E4 85 F1 | 	sub	objptr, ##1540
160fc     F2 16 02 F1 | 	add	arg03, objptr
16100     0B 17 02 FB | 	rdlong	arg03, arg03
16104     0C 4E 05 F1 | 	add	fp, #12
16108     A7 16 62 FC | 	wrlong	arg03, fp
1610c                 | ' 
1610c                 | ' numpar=compiledline(lineptr_e).result.uresult
1610c                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
1610c     0C 4E 85 F1 | 	sub	fp, #12
16110     02 16 16 F2 | 	cmp	arg03, #2 wc
16114     47 00 00 FF 
16118     7C E4 85 F1 | 	sub	objptr, ##36476
1611c     40 00 90 CD |  if_b	jmp	#LR__1850
16120     00 12 06 F6 | 	mov	arg01, #0
16124     78 55 B1 FD | 	call	#__system___getiolock_0599
16128     FD 12 02 F6 | 	mov	arg01, result1
1612c     48 F8 B0 FD | 	call	#__system___lockmem
16130     AF 01 00 FF 
16134     DF 14 06 F6 | 	mov	arg02, ##@LR__5906
16138     00 12 06 F6 | 	mov	arg01, #0
1613c     00 16 06 F6 | 	mov	arg03, #0
16140     28 05 B1 FD | 	call	#__system___basic_print_string
16144     00 12 06 F6 | 	mov	arg01, #0
16148     54 55 B1 FD | 	call	#__system___getiolock_0599
1614c     FD 00 68 FC | 	wrlong	#0, result1
16150     27 12 06 F6 | 	mov	arg01, #39
16154     00 14 06 F6 | 	mov	arg02, #0
16158     30 BE B0 FD | 	call	#_printerror
1615c     F0 00 90 FD | 	jmp	#LR__1854
16160                 | LR__1850
16160                 | ' if numpar=0 then 
16160     0C 4E 05 F1 | 	add	fp, #12
16164     A7 FE 09 FB | 	rdlong	result3, fp wz
16168     0C 4E 85 F1 | 	sub	fp, #12
1616c     30 00 90 5D |  if_ne	jmp	#LR__1851
16170     51 00 00 FF 
16174     AC E5 05 F1 | 	add	objptr, ##41900
16178     F2 26 02 FB | 	rdlong	local01, objptr
1617c     51 00 00 FF 
16180     AC E5 85 F1 | 	sub	objptr, ##41900
16184     A7 26 62 FC | 	wrlong	local01, fp
16188     08 4E 05 F1 | 	add	fp, #8
1618c     A7 38 68 FC | 	wrlong	#28, fp
16190     08 4E 85 F1 | 	sub	fp, #8
16194     A7 12 02 F6 | 	mov	arg01, fp
16198     7C 6B BF FD | 	call	#_push
1619c                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
1619c     B0 00 90 FD | 	jmp	#LR__1854
161a0                 | LR__1851
161a0     DC 6A BF FD | 	call	#_pop
161a4     A7 FA 61 FC | 	wrlong	result1, fp
161a8     04 4E 05 F1 | 	add	fp, #4
161ac     A7 FC 61 FC | 	wrlong	result2, fp
161b0     04 4E 05 F1 | 	add	fp, #4
161b4     A7 FE 61 FC | 	wrlong	result3, fp
161b8                 | ' t1=pop()
161b8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
161b8     08 4E 85 F1 | 	sub	fp, #8
161bc     1C FE 0D F2 | 	cmp	result3, #28 wz
161c0     08 4E 05 51 |  if_ne	add	fp, #8
161c4     A7 26 02 5B |  if_ne	rdlong	local01, fp
161c8     08 4E 85 51 |  if_ne	sub	fp, #8
161cc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
161d0     70 00 90 5D |  if_ne	jmp	#LR__1853
161d4     A7 26 02 FB | 	rdlong	local01, fp
161d8     52 00 00 FF 
161dc     B4 E4 05 F1 | 	add	objptr, ##42164
161e0     F2 26 62 FC | 	wrlong	local01, objptr
161e4                 | '   q=t1.result.uresult
161e4                 | '   if q<7 then 
161e4     52 00 00 FF 
161e8     B4 E4 85 F1 | 	sub	objptr, ##42164
161ec     07 26 56 F2 | 	cmps	local01, #7 wc
161f0     40 00 90 3D |  if_ae	jmp	#LR__1852
161f4     52 00 00 FF 
161f8     B4 E4 05 F1 | 	add	objptr, ##42164
161fc     F2 26 02 FB | 	rdlong	local01, objptr
16200     02 26 66 F0 | 	shl	local01, #2
16204     08 E5 85 F1 | 	sub	objptr, #264
16208     F2 26 02 F1 | 	add	local01, objptr
1620c     13 27 02 FB | 	rdlong	local01, local01
16210     A7 26 62 FC | 	wrlong	local01, fp
16214     08 4E 05 F1 | 	add	fp, #8
16218     A7 38 68 FC | 	wrlong	#28, fp
1621c     08 4E 85 F1 | 	sub	fp, #8
16220     A7 12 02 F6 | 	mov	arg01, fp
16224     51 00 00 FF 
16228     AC E5 85 F1 | 	sub	objptr, ##41900
1622c     E8 6A BF FD | 	call	#_push
16230                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
16230     1C 00 90 FD | 	jmp	#LR__1854
16234                 | LR__1852
16234     29 12 06 F6 | 	mov	arg01, #41
16238     00 14 06 F6 | 	mov	arg02, #0
1623c     4C BD B0 FD | 	call	#_printerror
16240                 | '      printerror(41) : return
16240     0C 00 90 FD | 	jmp	#LR__1854
16244                 | LR__1853
16244     29 12 06 F6 | 	mov	arg01, #41
16248     00 14 06 F6 | 	mov	arg02, #0
1624c     3C BD B0 FD | 	call	#_printerror
16250                 | LR__1854
16250     A7 F0 03 F6 | 	mov	ptra, fp
16254     B2 00 A0 FD | 	call	#popregs_
16258                 | _do_padh_ret
16258     2D 00 64 FD | 	ret
1625c                 | 
1625c                 | ' 
1625c                 | ' ' ------------------ padx
1625c                 | ' 
1625c                 | ' sub do_padx
1625c                 | _do_padx
1625c     02 4A 05 F6 | 	mov	COUNT_, #2
16260     A8 00 A0 FD | 	call	#pushregs_
16264     14 F0 07 F1 | 	add	ptra, #20
16268     4A 00 00 FF 
1626c     80 E4 05 F1 | 	add	objptr, ##38016
16270     F2 26 02 FB | 	rdlong	local01, objptr
16274     13 17 02 F6 | 	mov	arg03, local01
16278     01 16 66 F0 | 	shl	arg03, #1
1627c     13 17 02 F1 | 	add	arg03, local01
16280     02 16 66 F0 | 	shl	arg03, #2
16284     03 00 00 FF 
16288     04 E4 85 F1 | 	sub	objptr, ##1540
1628c     F2 16 02 F1 | 	add	arg03, objptr
16290     0B 17 02 FB | 	rdlong	arg03, arg03
16294     0C 4E 05 F1 | 	add	fp, #12
16298     A7 16 62 FC | 	wrlong	arg03, fp
1629c                 | ' 
1629c                 | ' numpar=compiledline(lineptr_e).result.uresult
1629c                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
1629c     0C 4E 85 F1 | 	sub	fp, #12
162a0     02 16 16 F2 | 	cmp	arg03, #2 wc
162a4     47 00 00 FF 
162a8     7C E4 85 F1 | 	sub	objptr, ##36476
162ac     40 00 90 CD |  if_b	jmp	#LR__1860
162b0     00 12 06 F6 | 	mov	arg01, #0
162b4     E8 53 B1 FD | 	call	#__system___getiolock_0599
162b8     FD 12 02 F6 | 	mov	arg01, result1
162bc     B8 F6 B0 FD | 	call	#__system___lockmem
162c0     AF 01 00 FF 
162c4     E6 14 06 F6 | 	mov	arg02, ##@LR__5907
162c8     00 12 06 F6 | 	mov	arg01, #0
162cc     00 16 06 F6 | 	mov	arg03, #0
162d0     98 03 B1 FD | 	call	#__system___basic_print_string
162d4     00 12 06 F6 | 	mov	arg01, #0
162d8     C4 53 B1 FD | 	call	#__system___getiolock_0599
162dc     FD 00 68 FC | 	wrlong	#0, result1
162e0     27 12 06 F6 | 	mov	arg01, #39
162e4     00 14 06 F6 | 	mov	arg02, #0
162e8     A0 BC B0 FD | 	call	#_printerror
162ec     E0 01 90 FD | 	jmp	#LR__1864
162f0                 | LR__1860
162f0                 | ' if numpar=0 then 
162f0     0C 4E 05 F1 | 	add	fp, #12
162f4     A7 FE 09 FB | 	rdlong	result3, fp wz
162f8     0C 4E 85 F1 | 	sub	fp, #12
162fc     A8 00 90 5D |  if_ne	jmp	#LR__1861
16300     00 C0 1B FF 
16304     00 26 06 F6 | 	mov	local01, ##931135488
16308     51 00 00 FF 
1630c     58 E5 05 F1 | 	add	objptr, ##41816
16310     F2 12 02 FB | 	rdlong	arg01, objptr
16314     51 00 00 FF 
16318     58 E5 85 F1 | 	sub	objptr, ##41816
1631c     09 13 52 F6 | 	abs	arg01, arg01 wc
16320     1F 28 C6 C9 |  if_b	decod	local02, #31
16324     00 28 06 36 |  if_ae	mov	local02, #0
16328     C0 20 B1 FD | 	call	#__system___float_fromuns
1632c     14 FB 61 F5 | 	xor	result1, local02
16330     FD 12 02 F6 | 	mov	arg01, result1
16334     FF 7F 23 FF 
16338     00 14 06 F6 | 	mov	arg02, ##1191181824
1633c     B4 26 B1 FD | 	call	#__system___float_div
16340     FD 14 02 F6 | 	mov	arg02, result1
16344     13 13 02 F6 | 	mov	arg01, local01
16348     D4 20 B1 FD | 	call	#__system___float_add
1634c     10 4E 05 F1 | 	add	fp, #16
16350     A7 FA 61 FC | 	wrlong	result1, fp
16354                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16354     10 4E 85 F1 | 	sub	fp, #16
16358     1F FA 05 F4 | 	bitl	result1, #31
1635c     FD 12 02 F6 | 	mov	arg01, result1
16360     89 41 1D FF 
16364     6F 14 06 F6 | 	mov	arg02, ##981668463
16368     01 16 06 F6 | 	mov	arg03, #1
1636c     B4 28 B1 FD | 	call	#__system___float_cmp
16370     00 FA 55 F2 | 	cmps	result1, #0 wc
16374     10 4E 05 C1 |  if_b	add	fp, #16
16378     A7 00 68 CC |  if_b	wrlong	#0, fp
1637c     10 4E 85 C1 |  if_b	sub	fp, #16
16380     10 4E 05 F1 | 	add	fp, #16
16384     A7 26 02 FB | 	rdlong	local01, fp
16388     10 4E 85 F1 | 	sub	fp, #16
1638c     A7 26 62 FC | 	wrlong	local01, fp
16390     08 4E 05 F1 | 	add	fp, #8
16394     A7 3C 68 FC | 	wrlong	#30, fp
16398     08 4E 85 F1 | 	sub	fp, #8
1639c     A7 12 02 F6 | 	mov	arg01, fp
163a0     74 69 BF FD | 	call	#_push
163a4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
163a4     28 01 90 FD | 	jmp	#LR__1864
163a8                 | LR__1861
163a8     D4 68 BF FD | 	call	#_pop
163ac     A7 FA 61 FC | 	wrlong	result1, fp
163b0     04 4E 05 F1 | 	add	fp, #4
163b4     A7 FC 61 FC | 	wrlong	result2, fp
163b8     04 4E 05 F1 | 	add	fp, #4
163bc     A7 FE 61 FC | 	wrlong	result3, fp
163c0                 | ' t1=pop()
163c0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
163c0     08 4E 85 F1 | 	sub	fp, #8
163c4     1C FE 0D F2 | 	cmp	result3, #28 wz
163c8     08 4E 05 51 |  if_ne	add	fp, #8
163cc     A7 26 02 5B |  if_ne	rdlong	local01, fp
163d0     08 4E 85 51 |  if_ne	sub	fp, #8
163d4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
163d8     E8 00 90 5D |  if_ne	jmp	#LR__1863
163dc     A7 26 02 FB | 	rdlong	local01, fp
163e0     52 00 00 FF 
163e4     B4 E4 05 F1 | 	add	objptr, ##42164
163e8     F2 26 62 FC | 	wrlong	local01, objptr
163ec                 | '   q=t1.result.uresult
163ec                 | '   if q<7 then 
163ec     52 00 00 FF 
163f0     B4 E4 85 F1 | 	sub	objptr, ##42164
163f4     07 26 56 F2 | 	cmps	local01, #7 wc
163f8     B8 00 90 3D |  if_ae	jmp	#LR__1862
163fc     00 C0 1B FF 
16400     00 26 06 F6 | 	mov	local01, ##931135488
16404     52 00 00 FF 
16408     B4 E4 05 F1 | 	add	objptr, ##42164
1640c     F2 16 02 FB | 	rdlong	arg03, objptr
16410     02 16 66 F0 | 	shl	arg03, #2
16414     5C E5 85 F1 | 	sub	objptr, #348
16418     F2 16 02 F1 | 	add	arg03, objptr
1641c     0B 13 02 FB | 	rdlong	arg01, arg03
16420     51 00 00 FF 
16424     58 E5 85 F1 | 	sub	objptr, ##41816
16428     09 13 52 F6 | 	abs	arg01, arg01 wc
1642c     1F 28 C6 C9 |  if_b	decod	local02, #31
16430     00 28 06 36 |  if_ae	mov	local02, #0
16434     B4 1F B1 FD | 	call	#__system___float_fromuns
16438     14 FB 61 F5 | 	xor	result1, local02
1643c     FD 12 02 F6 | 	mov	arg01, result1
16440     FF 7F 23 FF 
16444     00 14 06 F6 | 	mov	arg02, ##1191181824
16448     A8 25 B1 FD | 	call	#__system___float_div
1644c     FD 14 02 F6 | 	mov	arg02, result1
16450     13 13 02 F6 | 	mov	arg01, local01
16454     C8 1F B1 FD | 	call	#__system___float_add
16458     10 4E 05 F1 | 	add	fp, #16
1645c     A7 FA 61 FC | 	wrlong	result1, fp
16460                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16460     10 4E 85 F1 | 	sub	fp, #16
16464     1F FA 05 F4 | 	bitl	result1, #31
16468     FD 12 02 F6 | 	mov	arg01, result1
1646c     89 41 1D FF 
16470     6F 14 06 F6 | 	mov	arg02, ##981668463
16474     01 16 06 F6 | 	mov	arg03, #1
16478     A8 27 B1 FD | 	call	#__system___float_cmp
1647c     00 FA 55 F2 | 	cmps	result1, #0 wc
16480     10 4E 05 C1 |  if_b	add	fp, #16
16484     A7 00 68 CC |  if_b	wrlong	#0, fp
16488     10 4E 85 C1 |  if_b	sub	fp, #16
1648c     10 4E 05 F1 | 	add	fp, #16
16490     A7 26 02 FB | 	rdlong	local01, fp
16494     10 4E 85 F1 | 	sub	fp, #16
16498     A7 26 62 FC | 	wrlong	local01, fp
1649c     08 4E 05 F1 | 	add	fp, #8
164a0     A7 3C 68 FC | 	wrlong	#30, fp
164a4     08 4E 85 F1 | 	sub	fp, #8
164a8     A7 12 02 F6 | 	mov	arg01, fp
164ac     68 68 BF FD | 	call	#_push
164b0                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
164b0     1C 00 90 FD | 	jmp	#LR__1864
164b4                 | LR__1862
164b4     29 12 06 F6 | 	mov	arg01, #41
164b8     00 14 06 F6 | 	mov	arg02, #0
164bc     CC BA B0 FD | 	call	#_printerror
164c0                 | '      printerror(41) : return
164c0     0C 00 90 FD | 	jmp	#LR__1864
164c4                 | LR__1863
164c4     29 12 06 F6 | 	mov	arg01, #41
164c8     00 14 06 F6 | 	mov	arg02, #0
164cc     BC BA B0 FD | 	call	#_printerror
164d0                 | LR__1864
164d0     A7 F0 03 F6 | 	mov	ptra, fp
164d4     B2 00 A0 FD | 	call	#popregs_
164d8                 | _do_padx_ret
164d8     2D 00 64 FD | 	ret
164dc                 | 
164dc                 | ' 
164dc                 | ' ' ------------------ pady
164dc                 | ' 
164dc                 | ' sub do_pady
164dc                 | _do_pady
164dc     02 4A 05 F6 | 	mov	COUNT_, #2
164e0     A8 00 A0 FD | 	call	#pushregs_
164e4     14 F0 07 F1 | 	add	ptra, #20
164e8     4A 00 00 FF 
164ec     80 E4 05 F1 | 	add	objptr, ##38016
164f0     F2 26 02 FB | 	rdlong	local01, objptr
164f4     13 17 02 F6 | 	mov	arg03, local01
164f8     01 16 66 F0 | 	shl	arg03, #1
164fc     13 17 02 F1 | 	add	arg03, local01
16500     02 16 66 F0 | 	shl	arg03, #2
16504     03 00 00 FF 
16508     04 E4 85 F1 | 	sub	objptr, ##1540
1650c     F2 16 02 F1 | 	add	arg03, objptr
16510     0B 17 02 FB | 	rdlong	arg03, arg03
16514     0C 4E 05 F1 | 	add	fp, #12
16518     A7 16 62 FC | 	wrlong	arg03, fp
1651c                 | ' 
1651c                 | ' numpar=compiledline(lineptr_e).result.uresult
1651c                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
1651c     0C 4E 85 F1 | 	sub	fp, #12
16520     02 16 16 F2 | 	cmp	arg03, #2 wc
16524     47 00 00 FF 
16528     7C E4 85 F1 | 	sub	objptr, ##36476
1652c     40 00 90 CD |  if_b	jmp	#LR__1870
16530     00 12 06 F6 | 	mov	arg01, #0
16534     68 51 B1 FD | 	call	#__system___getiolock_0599
16538     FD 12 02 F6 | 	mov	arg01, result1
1653c     38 F4 B0 FD | 	call	#__system___lockmem
16540     AF 01 00 FF 
16544     ED 14 06 F6 | 	mov	arg02, ##@LR__5908
16548     00 12 06 F6 | 	mov	arg01, #0
1654c     00 16 06 F6 | 	mov	arg03, #0
16550     18 01 B1 FD | 	call	#__system___basic_print_string
16554     00 12 06 F6 | 	mov	arg01, #0
16558     44 51 B1 FD | 	call	#__system___getiolock_0599
1655c     FD 00 68 FC | 	wrlong	#0, result1
16560     27 12 06 F6 | 	mov	arg01, #39
16564     00 14 06 F6 | 	mov	arg02, #0
16568     20 BA B0 FD | 	call	#_printerror
1656c     E0 01 90 FD | 	jmp	#LR__1874
16570                 | LR__1870
16570                 | ' if numpar=0 then 
16570     0C 4E 05 F1 | 	add	fp, #12
16574     A7 FE 09 FB | 	rdlong	result3, fp wz
16578     0C 4E 85 F1 | 	sub	fp, #12
1657c     A8 00 90 5D |  if_ne	jmp	#LR__1871
16580     00 C0 1B FF 
16584     00 26 06 F6 | 	mov	local01, ##931135488
16588     51 00 00 FF 
1658c     74 E5 05 F1 | 	add	objptr, ##41844
16590     F2 12 02 FB | 	rdlong	arg01, objptr
16594     51 00 00 FF 
16598     74 E5 85 F1 | 	sub	objptr, ##41844
1659c     09 13 52 F6 | 	abs	arg01, arg01 wc
165a0     1F 28 C6 C9 |  if_b	decod	local02, #31
165a4     00 28 06 36 |  if_ae	mov	local02, #0
165a8     40 1E B1 FD | 	call	#__system___float_fromuns
165ac     14 FB 61 F5 | 	xor	result1, local02
165b0     FD 12 02 F6 | 	mov	arg01, result1
165b4     FF 7F 23 FF 
165b8     00 14 06 F6 | 	mov	arg02, ##1191181824
165bc     34 24 B1 FD | 	call	#__system___float_div
165c0     FD 14 02 F6 | 	mov	arg02, result1
165c4     13 13 02 F6 | 	mov	arg01, local01
165c8     54 1E B1 FD | 	call	#__system___float_add
165cc     10 4E 05 F1 | 	add	fp, #16
165d0     A7 FA 61 FC | 	wrlong	result1, fp
165d4                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
165d4     10 4E 85 F1 | 	sub	fp, #16
165d8     1F FA 05 F4 | 	bitl	result1, #31
165dc     FD 12 02 F6 | 	mov	arg01, result1
165e0     89 41 1D FF 
165e4     6F 14 06 F6 | 	mov	arg02, ##981668463
165e8     01 16 06 F6 | 	mov	arg03, #1
165ec     34 26 B1 FD | 	call	#__system___float_cmp
165f0     00 FA 55 F2 | 	cmps	result1, #0 wc
165f4     10 4E 05 C1 |  if_b	add	fp, #16
165f8     A7 00 68 CC |  if_b	wrlong	#0, fp
165fc     10 4E 85 C1 |  if_b	sub	fp, #16
16600     10 4E 05 F1 | 	add	fp, #16
16604     A7 26 02 FB | 	rdlong	local01, fp
16608     10 4E 85 F1 | 	sub	fp, #16
1660c     A7 26 62 FC | 	wrlong	local01, fp
16610     08 4E 05 F1 | 	add	fp, #8
16614     A7 3C 68 FC | 	wrlong	#30, fp
16618     08 4E 85 F1 | 	sub	fp, #8
1661c     A7 12 02 F6 | 	mov	arg01, fp
16620     F4 66 BF FD | 	call	#_push
16624                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16624     28 01 90 FD | 	jmp	#LR__1874
16628                 | LR__1871
16628     54 66 BF FD | 	call	#_pop
1662c     A7 FA 61 FC | 	wrlong	result1, fp
16630     04 4E 05 F1 | 	add	fp, #4
16634     A7 FC 61 FC | 	wrlong	result2, fp
16638     04 4E 05 F1 | 	add	fp, #4
1663c     A7 FE 61 FC | 	wrlong	result3, fp
16640                 | ' t1=pop()
16640                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16640     08 4E 85 F1 | 	sub	fp, #8
16644     1C FE 0D F2 | 	cmp	result3, #28 wz
16648     08 4E 05 51 |  if_ne	add	fp, #8
1664c     A7 26 02 5B |  if_ne	rdlong	local01, fp
16650     08 4E 85 51 |  if_ne	sub	fp, #8
16654     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16658     E8 00 90 5D |  if_ne	jmp	#LR__1873
1665c     A7 26 02 FB | 	rdlong	local01, fp
16660     52 00 00 FF 
16664     B4 E4 05 F1 | 	add	objptr, ##42164
16668     F2 26 62 FC | 	wrlong	local01, objptr
1666c                 | '   q=t1.result.uresult
1666c                 | '   if q<7 then 
1666c     52 00 00 FF 
16670     B4 E4 85 F1 | 	sub	objptr, ##42164
16674     07 26 56 F2 | 	cmps	local01, #7 wc
16678     B8 00 90 3D |  if_ae	jmp	#LR__1872
1667c     00 C0 1B FF 
16680     00 26 06 F6 | 	mov	local01, ##931135488
16684     52 00 00 FF 
16688     B4 E4 05 F1 | 	add	objptr, ##42164
1668c     F2 16 02 FB | 	rdlong	arg03, objptr
16690     02 16 66 F0 | 	shl	arg03, #2
16694     40 E5 85 F1 | 	sub	objptr, #320
16698     F2 16 02 F1 | 	add	arg03, objptr
1669c     0B 13 02 FB | 	rdlong	arg01, arg03
166a0     51 00 00 FF 
166a4     74 E5 85 F1 | 	sub	objptr, ##41844
166a8     09 13 52 F6 | 	abs	arg01, arg01 wc
166ac     1F 28 C6 C9 |  if_b	decod	local02, #31
166b0     00 28 06 36 |  if_ae	mov	local02, #0
166b4     34 1D B1 FD | 	call	#__system___float_fromuns
166b8     14 FB 61 F5 | 	xor	result1, local02
166bc     FD 12 02 F6 | 	mov	arg01, result1
166c0     FF 7F 23 FF 
166c4     00 14 06 F6 | 	mov	arg02, ##1191181824
166c8     28 23 B1 FD | 	call	#__system___float_div
166cc     FD 14 02 F6 | 	mov	arg02, result1
166d0     13 13 02 F6 | 	mov	arg01, local01
166d4     48 1D B1 FD | 	call	#__system___float_add
166d8     10 4E 05 F1 | 	add	fp, #16
166dc     A7 FA 61 FC | 	wrlong	result1, fp
166e0                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
166e0     10 4E 85 F1 | 	sub	fp, #16
166e4     1F FA 05 F4 | 	bitl	result1, #31
166e8     FD 12 02 F6 | 	mov	arg01, result1
166ec     89 41 1D FF 
166f0     6F 14 06 F6 | 	mov	arg02, ##981668463
166f4     01 16 06 F6 | 	mov	arg03, #1
166f8     28 25 B1 FD | 	call	#__system___float_cmp
166fc     00 FA 55 F2 | 	cmps	result1, #0 wc
16700     10 4E 05 C1 |  if_b	add	fp, #16
16704     A7 00 68 CC |  if_b	wrlong	#0, fp
16708     10 4E 85 C1 |  if_b	sub	fp, #16
1670c     10 4E 05 F1 | 	add	fp, #16
16710     A7 26 02 FB | 	rdlong	local01, fp
16714     10 4E 85 F1 | 	sub	fp, #16
16718     A7 26 62 FC | 	wrlong	local01, fp
1671c     08 4E 05 F1 | 	add	fp, #8
16720     A7 3C 68 FC | 	wrlong	#30, fp
16724     08 4E 85 F1 | 	sub	fp, #8
16728     A7 12 02 F6 | 	mov	arg01, fp
1672c     E8 65 BF FD | 	call	#_push
16730                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16730     1C 00 90 FD | 	jmp	#LR__1874
16734                 | LR__1872
16734     29 12 06 F6 | 	mov	arg01, #41
16738     00 14 06 F6 | 	mov	arg02, #0
1673c     4C B8 B0 FD | 	call	#_printerror
16740                 | '      printerror(41) : return
16740     0C 00 90 FD | 	jmp	#LR__1874
16744                 | LR__1873
16744     29 12 06 F6 | 	mov	arg01, #41
16748     00 14 06 F6 | 	mov	arg02, #0
1674c     3C B8 B0 FD | 	call	#_printerror
16750                 | LR__1874
16750     A7 F0 03 F6 | 	mov	ptra, fp
16754     B2 00 A0 FD | 	call	#popregs_
16758                 | _do_pady_ret
16758     2D 00 64 FD | 	ret
1675c                 | 
1675c                 | ' 
1675c                 | ' ' ------------------ padz
1675c                 | ' 
1675c                 | ' sub do_padz
1675c                 | _do_padz
1675c     02 4A 05 F6 | 	mov	COUNT_, #2
16760     A8 00 A0 FD | 	call	#pushregs_
16764     14 F0 07 F1 | 	add	ptra, #20
16768     4A 00 00 FF 
1676c     80 E4 05 F1 | 	add	objptr, ##38016
16770     F2 26 02 FB | 	rdlong	local01, objptr
16774     13 17 02 F6 | 	mov	arg03, local01
16778     01 16 66 F0 | 	shl	arg03, #1
1677c     13 17 02 F1 | 	add	arg03, local01
16780     02 16 66 F0 | 	shl	arg03, #2
16784     03 00 00 FF 
16788     04 E4 85 F1 | 	sub	objptr, ##1540
1678c     F2 16 02 F1 | 	add	arg03, objptr
16790     0B 17 02 FB | 	rdlong	arg03, arg03
16794     0C 4E 05 F1 | 	add	fp, #12
16798     A7 16 62 FC | 	wrlong	arg03, fp
1679c                 | ' 
1679c                 | ' numpar=compiledline(lineptr_e).result.uresult
1679c                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
1679c     0C 4E 85 F1 | 	sub	fp, #12
167a0     02 16 16 F2 | 	cmp	arg03, #2 wc
167a4     47 00 00 FF 
167a8     7C E4 85 F1 | 	sub	objptr, ##36476
167ac     40 00 90 CD |  if_b	jmp	#LR__1880
167b0     00 12 06 F6 | 	mov	arg01, #0
167b4     E8 4E B1 FD | 	call	#__system___getiolock_0599
167b8     FD 12 02 F6 | 	mov	arg01, result1
167bc     B8 F1 B0 FD | 	call	#__system___lockmem
167c0     AF 01 00 FF 
167c4     F4 14 06 F6 | 	mov	arg02, ##@LR__5909
167c8     00 12 06 F6 | 	mov	arg01, #0
167cc     00 16 06 F6 | 	mov	arg03, #0
167d0     98 FE B0 FD | 	call	#__system___basic_print_string
167d4     00 12 06 F6 | 	mov	arg01, #0
167d8     C4 4E B1 FD | 	call	#__system___getiolock_0599
167dc     FD 00 68 FC | 	wrlong	#0, result1
167e0     27 12 06 F6 | 	mov	arg01, #39
167e4     00 14 06 F6 | 	mov	arg02, #0
167e8     A0 B7 B0 FD | 	call	#_printerror
167ec     E0 01 90 FD | 	jmp	#LR__1884
167f0                 | LR__1880
167f0                 | ' if numpar=0 then 
167f0     0C 4E 05 F1 | 	add	fp, #12
167f4     A7 FE 09 FB | 	rdlong	result3, fp wz
167f8     0C 4E 85 F1 | 	sub	fp, #12
167fc     A8 00 90 5D |  if_ne	jmp	#LR__1881
16800     00 C0 1B FF 
16804     00 26 06 F6 | 	mov	local01, ##931135488
16808     51 00 00 FF 
1680c     90 E5 05 F1 | 	add	objptr, ##41872
16810     F2 12 02 FB | 	rdlong	arg01, objptr
16814     51 00 00 FF 
16818     90 E5 85 F1 | 	sub	objptr, ##41872
1681c     09 13 52 F6 | 	abs	arg01, arg01 wc
16820     1F 28 C6 C9 |  if_b	decod	local02, #31
16824     00 28 06 36 |  if_ae	mov	local02, #0
16828     C0 1B B1 FD | 	call	#__system___float_fromuns
1682c     14 FB 61 F5 | 	xor	result1, local02
16830     FD 12 02 F6 | 	mov	arg01, result1
16834     FF 7F 23 FF 
16838     00 14 06 F6 | 	mov	arg02, ##1191181824
1683c     B4 21 B1 FD | 	call	#__system___float_div
16840     FD 14 02 F6 | 	mov	arg02, result1
16844     13 13 02 F6 | 	mov	arg01, local01
16848     D4 1B B1 FD | 	call	#__system___float_add
1684c     10 4E 05 F1 | 	add	fp, #16
16850     A7 FA 61 FC | 	wrlong	result1, fp
16854                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16854     10 4E 85 F1 | 	sub	fp, #16
16858     1F FA 05 F4 | 	bitl	result1, #31
1685c     FD 12 02 F6 | 	mov	arg01, result1
16860     89 41 1D FF 
16864     6F 14 06 F6 | 	mov	arg02, ##981668463
16868     01 16 06 F6 | 	mov	arg03, #1
1686c     B4 23 B1 FD | 	call	#__system___float_cmp
16870     00 FA 55 F2 | 	cmps	result1, #0 wc
16874     10 4E 05 C1 |  if_b	add	fp, #16
16878     A7 00 68 CC |  if_b	wrlong	#0, fp
1687c     10 4E 85 C1 |  if_b	sub	fp, #16
16880     10 4E 05 F1 | 	add	fp, #16
16884     A7 26 02 FB | 	rdlong	local01, fp
16888     10 4E 85 F1 | 	sub	fp, #16
1688c     A7 26 62 FC | 	wrlong	local01, fp
16890     08 4E 05 F1 | 	add	fp, #8
16894     A7 3C 68 FC | 	wrlong	#30, fp
16898     08 4E 85 F1 | 	sub	fp, #8
1689c     A7 12 02 F6 | 	mov	arg01, fp
168a0     74 64 BF FD | 	call	#_push
168a4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
168a4     28 01 90 FD | 	jmp	#LR__1884
168a8                 | LR__1881
168a8     D4 63 BF FD | 	call	#_pop
168ac     A7 FA 61 FC | 	wrlong	result1, fp
168b0     04 4E 05 F1 | 	add	fp, #4
168b4     A7 FC 61 FC | 	wrlong	result2, fp
168b8     04 4E 05 F1 | 	add	fp, #4
168bc     A7 FE 61 FC | 	wrlong	result3, fp
168c0                 | ' t1=pop()
168c0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
168c0     08 4E 85 F1 | 	sub	fp, #8
168c4     1C FE 0D F2 | 	cmp	result3, #28 wz
168c8     08 4E 05 51 |  if_ne	add	fp, #8
168cc     A7 26 02 5B |  if_ne	rdlong	local01, fp
168d0     08 4E 85 51 |  if_ne	sub	fp, #8
168d4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
168d8     E8 00 90 5D |  if_ne	jmp	#LR__1883
168dc     A7 26 02 FB | 	rdlong	local01, fp
168e0     52 00 00 FF 
168e4     B4 E4 05 F1 | 	add	objptr, ##42164
168e8     F2 26 62 FC | 	wrlong	local01, objptr
168ec                 | '   q=t1.result.uresult
168ec                 | '   if q<7 then 
168ec     52 00 00 FF 
168f0     B4 E4 85 F1 | 	sub	objptr, ##42164
168f4     07 26 56 F2 | 	cmps	local01, #7 wc
168f8     B8 00 90 3D |  if_ae	jmp	#LR__1882
168fc     00 C0 1B FF 
16900     00 26 06 F6 | 	mov	local01, ##931135488
16904     52 00 00 FF 
16908     B4 E4 05 F1 | 	add	objptr, ##42164
1690c     F2 16 02 FB | 	rdlong	arg03, objptr
16910     02 16 66 F0 | 	shl	arg03, #2
16914     24 E5 85 F1 | 	sub	objptr, #292
16918     F2 16 02 F1 | 	add	arg03, objptr
1691c     0B 13 02 FB | 	rdlong	arg01, arg03
16920     51 00 00 FF 
16924     90 E5 85 F1 | 	sub	objptr, ##41872
16928     09 13 52 F6 | 	abs	arg01, arg01 wc
1692c     1F 28 C6 C9 |  if_b	decod	local02, #31
16930     00 28 06 36 |  if_ae	mov	local02, #0
16934     B4 1A B1 FD | 	call	#__system___float_fromuns
16938     14 FB 61 F5 | 	xor	result1, local02
1693c     FD 12 02 F6 | 	mov	arg01, result1
16940     FF 7F 23 FF 
16944     00 14 06 F6 | 	mov	arg02, ##1191181824
16948     A8 20 B1 FD | 	call	#__system___float_div
1694c     FD 14 02 F6 | 	mov	arg02, result1
16950     13 13 02 F6 | 	mov	arg01, local01
16954     C8 1A B1 FD | 	call	#__system___float_add
16958     10 4E 05 F1 | 	add	fp, #16
1695c     A7 FA 61 FC | 	wrlong	result1, fp
16960                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16960     10 4E 85 F1 | 	sub	fp, #16
16964     1F FA 05 F4 | 	bitl	result1, #31
16968     FD 12 02 F6 | 	mov	arg01, result1
1696c     89 41 1D FF 
16970     6F 14 06 F6 | 	mov	arg02, ##981668463
16974     01 16 06 F6 | 	mov	arg03, #1
16978     A8 22 B1 FD | 	call	#__system___float_cmp
1697c     00 FA 55 F2 | 	cmps	result1, #0 wc
16980     10 4E 05 C1 |  if_b	add	fp, #16
16984     A7 00 68 CC |  if_b	wrlong	#0, fp
16988     10 4E 85 C1 |  if_b	sub	fp, #16
1698c     10 4E 05 F1 | 	add	fp, #16
16990     A7 26 02 FB | 	rdlong	local01, fp
16994     10 4E 85 F1 | 	sub	fp, #16
16998     A7 26 62 FC | 	wrlong	local01, fp
1699c     08 4E 05 F1 | 	add	fp, #8
169a0     A7 3C 68 FC | 	wrlong	#30, fp
169a4     08 4E 85 F1 | 	sub	fp, #8
169a8     A7 12 02 F6 | 	mov	arg01, fp
169ac     68 63 BF FD | 	call	#_push
169b0                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
169b0     1C 00 90 FD | 	jmp	#LR__1884
169b4                 | LR__1882
169b4     29 12 06 F6 | 	mov	arg01, #41
169b8     00 14 06 F6 | 	mov	arg02, #0
169bc     CC B5 B0 FD | 	call	#_printerror
169c0                 | '      printerror(41) : return
169c0     0C 00 90 FD | 	jmp	#LR__1884
169c4                 | LR__1883
169c4     29 12 06 F6 | 	mov	arg01, #41
169c8     00 14 06 F6 | 	mov	arg02, #0
169cc     BC B5 B0 FD | 	call	#_printerror
169d0                 | LR__1884
169d0     A7 F0 03 F6 | 	mov	ptra, fp
169d4     B2 00 A0 FD | 	call	#popregs_
169d8                 | _do_padz_ret
169d8     2D 00 64 FD | 	ret
169dc                 | 
169dc                 | ' 
169dc                 | ' '-------------------- paper
169dc                 | ' 
169dc                 | ' sub do_paper
169dc                 | _do_paper
169dc     03 4A 05 F6 | 	mov	COUNT_, #3
169e0     A8 00 A0 FD | 	call	#pushregs_
169e4     98 62 BF FD | 	call	#_pop
169e8     FD 26 02 F6 | 	mov	local01, result1
169ec     FE 28 02 F6 | 	mov	local02, result2
169f0     FF 2A 02 F6 | 	mov	local03, result3
169f4                 | ' t1=pop() 
169f4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
169f4     1E 2A 0E F2 | 	cmp	local03, #30 wz
169f8     10 00 90 5D |  if_ne	jmp	#LR__1890
169fc     13 13 02 F6 | 	mov	arg01, local01
16a00     00 14 06 F6 | 	mov	arg02, #0
16a04     B0 22 B1 FD | 	call	#__system___float_tointeger
16a08     FD 26 02 F6 | 	mov	local01, result1
16a0c                 | LR__1890
16a0c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16a0c     1F 2A 0E F2 | 	cmp	local03, #31 wz
16a10     18 00 90 5D |  if_ne	jmp	#LR__1891
16a14     13 13 02 F6 | 	mov	arg01, local01
16a18     E0 25 B1 FD | 	call	#__system____builtin_atof
16a1c     FD 12 02 F6 | 	mov	arg01, result1
16a20     00 14 06 F6 | 	mov	arg02, #0
16a24     90 22 B1 FD | 	call	#__system___float_tointeger
16a28     FD 26 02 F6 | 	mov	local01, result1
16a2c                 | LR__1891
16a2c     37 00 00 FF 
16a30     38 E4 05 F1 | 	add	objptr, ##28216
16a34     F2 26 62 FC | 	wrlong	local01, objptr
16a38     04 E4 05 F1 | 	add	objptr, #4
16a3c     F2 12 02 FB | 	rdlong	arg01, objptr
16a40                 | ' 
16a40                 | ' write_color:=ff
16a40     36 00 00 FF 
16a44     FB E5 85 F1 | 	sub	objptr, ##28155
16a48     F2 12 62 FC | 	wrlong	arg01, objptr
16a4c                 | ' write_background:=bb
16a4c     04 E4 05 F1 | 	add	objptr, #4
16a50     F2 26 62 FC | 	wrlong	local01, objptr
16a54     45 E4 85 F1 | 	sub	objptr, #69
16a58     A7 F0 03 F6 | 	mov	ptra, fp
16a5c     B2 00 A0 FD | 	call	#popregs_
16a60                 | _do_paper_ret
16a60     2D 00 64 FD | 	ret
16a64                 | 
16a64                 | ' 
16a64                 | ' '-------------------- peek
16a64                 | ' 
16a64                 | ' sub do_peek
16a64                 | _do_peek
16a64     00 4A 05 F6 | 	mov	COUNT_, #0
16a68     A8 00 A0 FD | 	call	#pushregs_
16a6c     14 F0 07 F1 | 	add	ptra, #20
16a70     0C 62 BF FD | 	call	#_pop
16a74     A7 FA 61 FC | 	wrlong	result1, fp
16a78     04 4E 05 F1 | 	add	fp, #4
16a7c     A7 FC 61 FC | 	wrlong	result2, fp
16a80     04 4E 05 F1 | 	add	fp, #4
16a84     A7 FE 61 FC | 	wrlong	result3, fp
16a88     08 4E 85 F1 | 	sub	fp, #8
16a8c     A7 12 02 F6 | 	mov	arg01, fp
16a90     D0 63 BF FD | 	call	#_converttoint
16a94     0C 4E 05 F1 | 	add	fp, #12
16a98     A7 FA 61 FC | 	wrlong	result1, fp
16a9c                 | ' 
16a9c                 | ' t1=pop()
16a9c                 | ' a=converttoint(t1)
16a9c                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
16a9c     0C 4E 85 F1 | 	sub	fp, #12
16aa0     00 04 00 FF 
16aa4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16aa8     1C 00 90 3D |  if_ae	jmp	#LR__1900
16aac     0C 4E 05 F1 | 	add	fp, #12
16ab0     A7 12 02 FB | 	rdlong	arg01, fp
16ab4     09 FB C1 FA | 	rdbyte	result1, arg01
16ab8     04 4E 05 F1 | 	add	fp, #4
16abc     A7 FA 61 FC | 	wrlong	result1, fp
16ac0     10 4E 85 F1 | 	sub	fp, #16
16ac4     20 00 90 FD | 	jmp	#LR__1901
16ac8                 | LR__1900
16ac8     0C 4E 05 F1 | 	add	fp, #12
16acc     A7 12 02 FB | 	rdlong	arg01, fp
16ad0     0C 4E 85 F1 | 	sub	fp, #12
16ad4     2C B7 B0 FD | 	call	#_pspeek
16ad8     FD FA E1 F8 | 	getbyte	result1, result1, #0
16adc     10 4E 05 F1 | 	add	fp, #16
16ae0     A7 FA 61 FC | 	wrlong	result1, fp
16ae4     10 4E 85 F1 | 	sub	fp, #16
16ae8                 | LR__1901
16ae8     08 4E 05 F1 | 	add	fp, #8
16aec     A7 3A 68 FC | 	wrlong	#29, fp
16af0     08 4E 05 F1 | 	add	fp, #8
16af4     A7 12 02 FB | 	rdlong	arg01, fp
16af8     10 4E 85 F1 | 	sub	fp, #16
16afc     A7 12 62 FC | 	wrlong	arg01, fp
16b00     A7 12 02 F6 | 	mov	arg01, fp
16b04     10 62 BF FD | 	call	#_push
16b08     A7 F0 03 F6 | 	mov	ptra, fp
16b0c     B2 00 A0 FD | 	call	#popregs_
16b10                 | _do_peek_ret
16b10     2D 00 64 FD | 	ret
16b14                 | 
16b14                 | ' 
16b14                 | ' '-------------------- pinfloat
16b14                 | ' 
16b14                 | ' sub do_pinfloat
16b14                 | _do_pinfloat
16b14     00 4A 05 F6 | 	mov	COUNT_, #0
16b18     A8 00 A0 FD | 	call	#pushregs_
16b1c     0C F0 07 F1 | 	add	ptra, #12
16b20     5C 61 BF FD | 	call	#_pop
16b24     A7 FA 61 FC | 	wrlong	result1, fp
16b28     04 4E 05 F1 | 	add	fp, #4
16b2c     A7 FC 61 FC | 	wrlong	result2, fp
16b30     04 4E 05 F1 | 	add	fp, #4
16b34     A7 FE 61 FC | 	wrlong	result3, fp
16b38     08 4E 85 F1 | 	sub	fp, #8
16b3c     A7 12 02 F6 | 	mov	arg01, fp
16b40     20 63 BF FD | 	call	#_converttoint
16b44     50 FA 61 FD | 	fltl	result1
16b48     A7 F0 03 F6 | 	mov	ptra, fp
16b4c     B2 00 A0 FD | 	call	#popregs_
16b50                 | _do_pinfloat_ret
16b50     2D 00 64 FD | 	ret
16b54                 | 
16b54                 | ' 
16b54                 | ' '-------------------- pinhi
16b54                 | ' 
16b54                 | ' sub do_pinhi
16b54                 | _do_pinhi
16b54     00 4A 05 F6 | 	mov	COUNT_, #0
16b58     A8 00 A0 FD | 	call	#pushregs_
16b5c     0C F0 07 F1 | 	add	ptra, #12
16b60     1C 61 BF FD | 	call	#_pop
16b64     A7 FA 61 FC | 	wrlong	result1, fp
16b68     04 4E 05 F1 | 	add	fp, #4
16b6c     A7 FC 61 FC | 	wrlong	result2, fp
16b70     04 4E 05 F1 | 	add	fp, #4
16b74     A7 FE 61 FC | 	wrlong	result3, fp
16b78     08 4E 85 F1 | 	sub	fp, #8
16b7c     A7 12 02 F6 | 	mov	arg01, fp
16b80     E0 62 BF FD | 	call	#_converttoint
16b84     59 FA 61 FD | 	drvh	result1
16b88     A7 F0 03 F6 | 	mov	ptra, fp
16b8c     B2 00 A0 FD | 	call	#popregs_
16b90                 | _do_pinhi_ret
16b90     2D 00 64 FD | 	ret
16b94                 | 
16b94                 | ' 
16b94                 | ' '-------------------- pinlo
16b94                 | ' 
16b94                 | ' sub do_pinlo
16b94                 | _do_pinlo
16b94     00 4A 05 F6 | 	mov	COUNT_, #0
16b98     A8 00 A0 FD | 	call	#pushregs_
16b9c     0C F0 07 F1 | 	add	ptra, #12
16ba0     DC 60 BF FD | 	call	#_pop
16ba4     A7 FA 61 FC | 	wrlong	result1, fp
16ba8     04 4E 05 F1 | 	add	fp, #4
16bac     A7 FC 61 FC | 	wrlong	result2, fp
16bb0     04 4E 05 F1 | 	add	fp, #4
16bb4     A7 FE 61 FC | 	wrlong	result3, fp
16bb8     08 4E 85 F1 | 	sub	fp, #8
16bbc     A7 12 02 F6 | 	mov	arg01, fp
16bc0     A0 62 BF FD | 	call	#_converttoint
16bc4     58 FA 61 FD | 	drvl	result1
16bc8     A7 F0 03 F6 | 	mov	ptra, fp
16bcc     B2 00 A0 FD | 	call	#popregs_
16bd0                 | _do_pinlo_ret
16bd0     2D 00 64 FD | 	ret
16bd4                 | 
16bd4                 | ' 
16bd4                 | ' '-------------------- pinread
16bd4                 | ' 
16bd4                 | ' sub do_pinread
16bd4                 | _do_pinread
16bd4     00 4A 05 F6 | 	mov	COUNT_, #0
16bd8     A8 00 A0 FD | 	call	#pushregs_
16bdc     0C F0 07 F1 | 	add	ptra, #12
16be0     9C 60 BF FD | 	call	#_pop
16be4     A7 FA 61 FC | 	wrlong	result1, fp
16be8     04 4E 05 F1 | 	add	fp, #4
16bec     A7 FC 61 FC | 	wrlong	result2, fp
16bf0     04 4E 05 F1 | 	add	fp, #4
16bf4     A7 FE 61 FC | 	wrlong	result3, fp
16bf8     08 4E 85 F1 | 	sub	fp, #8
16bfc     A7 12 02 F6 | 	mov	arg01, fp
16c00     60 62 BF FD | 	call	#_converttoint
16c04     FD 12 02 F6 | 	mov	arg01, result1
16c08     20 12 CE F7 | 	test	arg01, #32 wz
16c0c     FF FB 01 56 |  if_ne	mov	result1, inb
16c10     FE FB 01 A6 |  if_e	mov	result1, ina
16c14     09 FB 41 F0 | 	shr	result1, arg01
16c18     06 12 46 F0 | 	shr	arg01, #6
16c1c     09 FB 41 F7 | 	zerox	result1, arg01
16c20     52 00 00 FF 
16c24     BC E4 05 F1 | 	add	objptr, ##42172
16c28     F2 FA 61 FC | 	wrlong	result1, objptr
16c2c     52 00 00 FF 
16c30     BC E4 85 F1 | 	sub	objptr, ##42172
16c34     08 4E 05 F1 | 	add	fp, #8
16c38     A7 3A 68 FC | 	wrlong	#29, fp
16c3c     08 4E 85 F1 | 	sub	fp, #8
16c40     A7 08 68 FC | 	wrlong	#4, fp
16c44     A7 12 02 F6 | 	mov	arg01, fp
16c48     CC 60 BF FD | 	call	#_push
16c4c     A7 F0 03 F6 | 	mov	ptra, fp
16c50     B2 00 A0 FD | 	call	#popregs_
16c54                 | _do_pinread_ret
16c54     2D 00 64 FD | 	ret
16c58                 | 
16c58                 | ' 
16c58                 | ' '-------------------- pinstart
16c58                 | ' 
16c58                 | ' sub do_pinstart
16c58                 | _do_pinstart
16c58     03 4A 05 F6 | 	mov	COUNT_, #3
16c5c     A8 00 A0 FD | 	call	#pushregs_
16c60     30 F0 07 F1 | 	add	ptra, #48
16c64     18 60 BF FD | 	call	#_pop
16c68     FD 16 02 F6 | 	mov	arg03, result1
16c6c     FE 14 02 F6 | 	mov	arg02, result2
16c70     FF 18 02 F6 | 	mov	arg04, result3
16c74     A7 16 62 FC | 	wrlong	arg03, fp
16c78     04 4E 05 F1 | 	add	fp, #4
16c7c     A7 14 62 FC | 	wrlong	arg02, fp
16c80     04 4E 05 F1 | 	add	fp, #4
16c84     A7 18 62 FC | 	wrlong	arg04, fp
16c88     08 4E 85 F1 | 	sub	fp, #8
16c8c     F0 5F BF FD | 	call	#_pop
16c90     FD 16 02 F6 | 	mov	arg03, result1
16c94     FE 14 02 F6 | 	mov	arg02, result2
16c98     FF 18 02 F6 | 	mov	arg04, result3
16c9c     0C 4E 05 F1 | 	add	fp, #12
16ca0     A7 16 62 FC | 	wrlong	arg03, fp
16ca4     04 4E 05 F1 | 	add	fp, #4
16ca8     A7 14 62 FC | 	wrlong	arg02, fp
16cac     04 4E 05 F1 | 	add	fp, #4
16cb0     A7 18 62 FC | 	wrlong	arg04, fp
16cb4     14 4E 85 F1 | 	sub	fp, #20
16cb8     C4 5F BF FD | 	call	#_pop
16cbc     FD 16 02 F6 | 	mov	arg03, result1
16cc0     FE 14 02 F6 | 	mov	arg02, result2
16cc4     FF 18 02 F6 | 	mov	arg04, result3
16cc8     18 4E 05 F1 | 	add	fp, #24
16ccc     A7 16 62 FC | 	wrlong	arg03, fp
16cd0     04 4E 05 F1 | 	add	fp, #4
16cd4     A7 14 62 FC | 	wrlong	arg02, fp
16cd8     04 4E 05 F1 | 	add	fp, #4
16cdc     A7 18 62 FC | 	wrlong	arg04, fp
16ce0     20 4E 85 F1 | 	sub	fp, #32
16ce4     98 5F BF FD | 	call	#_pop
16ce8     FF 16 02 F6 | 	mov	arg03, result3
16cec     24 4E 05 F1 | 	add	fp, #36
16cf0     A7 FA 61 FC | 	wrlong	result1, fp
16cf4     04 4E 05 F1 | 	add	fp, #4
16cf8     A7 FC 61 FC | 	wrlong	result2, fp
16cfc     04 4E 05 F1 | 	add	fp, #4
16d00     A7 16 62 FC | 	wrlong	arg03, fp
16d04     08 4E 85 F1 | 	sub	fp, #8
16d08     A7 12 02 F6 | 	mov	arg01, fp
16d0c     24 4E 85 F1 | 	sub	fp, #36
16d10     50 61 BF FD | 	call	#_converttoint
16d14     FD 26 02 F6 | 	mov	local01, result1
16d18     18 4E 05 F1 | 	add	fp, #24
16d1c     A7 12 02 F6 | 	mov	arg01, fp
16d20     18 4E 85 F1 | 	sub	fp, #24
16d24     3C 61 BF FD | 	call	#_converttoint
16d28     FD 28 02 F6 | 	mov	local02, result1
16d2c     0C 4E 05 F1 | 	add	fp, #12
16d30     A7 12 02 F6 | 	mov	arg01, fp
16d34     0C 4E 85 F1 | 	sub	fp, #12
16d38     28 61 BF FD | 	call	#_converttoint
16d3c     FD 2A 02 F6 | 	mov	local03, result1
16d40     A7 12 02 F6 | 	mov	arg01, fp
16d44     1C 61 BF FD | 	call	#_converttoint
16d48     40 26 62 FD | 	dirl	local01
16d4c     13 29 02 FC | 	wrpin	local02, local01
16d50     13 2B 12 FC | 	wxpin	local03, local01
16d54     13 FB 21 FC | 	wypin	result1, local01
16d58     41 26 62 FD | 	dirh	local01
16d5c     A7 F0 03 F6 | 	mov	ptra, fp
16d60     B2 00 A0 FD | 	call	#popregs_
16d64                 | _do_pinstart_ret
16d64     2D 00 64 FD | 	ret
16d68                 | 
16d68                 | ' 
16d68                 | ' '-------------------- pintoggle
16d68                 | ' 
16d68                 | ' sub do_pintoggle
16d68                 | _do_pintoggle
16d68     00 4A 05 F6 | 	mov	COUNT_, #0
16d6c     A8 00 A0 FD | 	call	#pushregs_
16d70     0C F0 07 F1 | 	add	ptra, #12
16d74     08 5F BF FD | 	call	#_pop
16d78     A7 FA 61 FC | 	wrlong	result1, fp
16d7c     04 4E 05 F1 | 	add	fp, #4
16d80     A7 FC 61 FC | 	wrlong	result2, fp
16d84     04 4E 05 F1 | 	add	fp, #4
16d88     A7 FE 61 FC | 	wrlong	result3, fp
16d8c     08 4E 85 F1 | 	sub	fp, #8
16d90     A7 12 02 F6 | 	mov	arg01, fp
16d94     CC 60 BF FD | 	call	#_converttoint
16d98     5F FA 61 FD | 	drvnot	result1
16d9c     A7 F0 03 F6 | 	mov	ptra, fp
16da0     B2 00 A0 FD | 	call	#popregs_
16da4                 | _do_pintoggle_ret
16da4     2D 00 64 FD | 	ret
16da8                 | 
16da8                 | ' 
16da8                 | ' '-------------------- pinwrite
16da8                 | ' 
16da8                 | ' sub do_pinwrite
16da8                 | _do_pinwrite
16da8     01 4A 05 F6 | 	mov	COUNT_, #1
16dac     A8 00 A0 FD | 	call	#pushregs_
16db0     18 F0 07 F1 | 	add	ptra, #24
16db4     C8 5E BF FD | 	call	#_pop
16db8     FD 14 02 F6 | 	mov	arg02, result1
16dbc     FE 12 02 F6 | 	mov	arg01, result2
16dc0     FF 26 02 F6 | 	mov	local01, result3
16dc4     A7 14 62 FC | 	wrlong	arg02, fp
16dc8     04 4E 05 F1 | 	add	fp, #4
16dcc     A7 12 62 FC | 	wrlong	arg01, fp
16dd0     04 4E 05 F1 | 	add	fp, #4
16dd4     A7 26 62 FC | 	wrlong	local01, fp
16dd8     08 4E 85 F1 | 	sub	fp, #8
16ddc     A0 5E BF FD | 	call	#_pop
16de0     FF 26 02 F6 | 	mov	local01, result3
16de4     0C 4E 05 F1 | 	add	fp, #12
16de8     A7 FA 61 FC | 	wrlong	result1, fp
16dec     04 4E 05 F1 | 	add	fp, #4
16df0     A7 FC 61 FC | 	wrlong	result2, fp
16df4     04 4E 05 F1 | 	add	fp, #4
16df8     A7 26 62 FC | 	wrlong	local01, fp
16dfc     08 4E 85 F1 | 	sub	fp, #8
16e00     A7 12 02 F6 | 	mov	arg01, fp
16e04     0C 4E 85 F1 | 	sub	fp, #12
16e08     58 60 BF FD | 	call	#_converttoint
16e0c     FD 26 02 F6 | 	mov	local01, result1
16e10     A7 12 02 F6 | 	mov	arg01, fp
16e14     4C 60 BF FD | 	call	#_converttoint
16e18     FD 14 02 F6 | 	mov	arg02, result1
16e1c     13 13 02 F6 | 	mov	arg01, local01
16e20     08 ED B0 FD | 	call	#__system___pinwrite
16e24     A7 F0 03 F6 | 	mov	ptra, fp
16e28     B2 00 A0 FD | 	call	#popregs_
16e2c                 | _do_pinwrite_ret
16e2c     2D 00 64 FD | 	ret
16e30                 | 
16e30                 | ' 
16e30                 | ' '-------------------- play
16e30                 | ' 
16e30                 | ' sub do_play
16e30                 | _do_play
16e30     08 4A 05 F6 | 	mov	COUNT_, #8
16e34     A8 00 A0 FD | 	call	#pushregs_
16e38     7C F0 07 F1 | 	add	ptra, #124
16e3c     68 4E 05 F1 | 	add	fp, #104
16e40     77 CC A1 FF 
16e44     A7 7C 6B FC | 	wrlong	##1134096318, fp
16e48                 | ' speed_coeff=305.873
16e48                 | ' 
16e48                 | ' for i=0 to 8 : params(i)=-2.0 : next i
16e48     64 4E 85 F1 | 	sub	fp, #100
16e4c     A7 00 68 FC | 	wrlong	#0, fp
16e50     97 18 48 FB | 	callpa	#(@LR__1911-@LR__1910)>>2,fcache_load_ptr_
16e54                 | LR__1910
16e54     A7 16 02 FB | 	rdlong	arg03, fp
16e58     02 16 66 F0 | 	shl	arg03, #2
16e5c     34 4E 05 F1 | 	add	fp, #52
16e60     A7 16 02 F1 | 	add	arg03, fp
16e64     00 00 E0 FF 
16e68     0B 01 68 FC | 	wrlong	##-1073741824, arg03
16e6c     34 4E 85 F1 | 	sub	fp, #52
16e70     A7 26 02 FB | 	rdlong	local01, fp
16e74     01 26 06 F1 | 	add	local01, #1
16e78     A7 26 62 FC | 	wrlong	local01, fp
16e7c     09 26 56 F2 | 	cmps	local01, #9 wc
16e80     D0 FF 9F CD |  if_b	jmp	#LR__1910
16e84                 | LR__1911
16e84     04 4E 85 F1 | 	sub	fp, #4
16e88     4A 00 00 FF 
16e8c     80 E4 05 F1 | 	add	objptr, ##38016
16e90     F2 28 02 FB | 	rdlong	local02, objptr
16e94     14 2B 02 F6 | 	mov	local03, local02
16e98     01 2A 66 F0 | 	shl	local03, #1
16e9c     14 2B 02 F1 | 	add	local03, local02
16ea0     02 2A 66 F0 | 	shl	local03, #2
16ea4     03 00 00 FF 
16ea8     04 E4 85 F1 | 	sub	objptr, ##1540
16eac     F2 2A 02 F1 | 	add	local03, objptr
16eb0     15 2D 02 FB | 	rdlong	local04, local03
16eb4     A7 2C 62 FC | 	wrlong	local04, fp
16eb8                 | ' numpar=compiledline(lineptr_e).result.uresult
16eb8                 | ' for i=numpar to 1 step -1 
16eb8     04 4E 05 F1 | 	add	fp, #4
16ebc     A7 2C 62 FC | 	wrlong	local04, fp
16ec0     04 4E 85 F1 | 	sub	fp, #4
16ec4     47 00 00 FF 
16ec8     7C E4 85 F1 | 	sub	objptr, ##36476
16ecc                 | LR__1912
16ecc     B0 5D BF FD | 	call	#_pop
16ed0     5C 4E 05 F1 | 	add	fp, #92
16ed4     A7 FA 61 FC | 	wrlong	result1, fp
16ed8     04 4E 05 F1 | 	add	fp, #4
16edc     A7 FC 61 FC | 	wrlong	result2, fp
16ee0     04 4E 05 F1 | 	add	fp, #4
16ee4     A7 FE 61 FC | 	wrlong	result3, fp
16ee8     60 4E 85 F1 | 	sub	fp, #96
16eec     A7 2A 02 FB | 	rdlong	local03, fp
16ef0     01 2A 86 F1 | 	sub	local03, #1
16ef4     02 2A 66 F0 | 	shl	local03, #2
16ef8     34 4E 05 F1 | 	add	fp, #52
16efc     A7 2A 02 F1 | 	add	local03, fp
16f00     24 4E 05 F1 | 	add	fp, #36
16f04     A7 2E 02 F6 | 	mov	local05, fp
16f08     17 13 02 F6 | 	mov	arg01, local05
16f0c     5C 4E 85 F1 | 	sub	fp, #92
16f10     0C 60 BF FD | 	call	#_converttofloat
16f14     15 FB 61 FC | 	wrlong	result1, local03
16f18     04 4E 05 F1 | 	add	fp, #4
16f1c     A7 26 02 FB | 	rdlong	local01, fp
16f20     01 26 86 F1 | 	sub	local01, #1
16f24     A7 26 62 FC | 	wrlong	local01, fp
16f28     04 4E 85 F1 | 	sub	fp, #4
16f2c     01 26 56 F2 | 	cmps	local01, #1 wc
16f30     98 FF 9F 3D |  if_ae	jmp	#LR__1912
16f34                 | ' 
16f34                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
16f34     38 4E 05 F1 | 	add	fp, #56
16f38     A7 12 02 FB | 	rdlong	arg01, fp
16f3c     38 4E 85 F1 | 	sub	fp, #56
16f40     00 14 06 F6 | 	mov	arg02, #0
16f44     01 16 06 F6 | 	mov	arg03, #1
16f48     D8 1C B1 FD | 	call	#__system___float_cmp
16f4c     00 FA 55 F2 | 	cmps	result1, #0 wc
16f50     0C 4E 05 C1 |  if_b	add	fp, #12
16f54     A7 00 68 CC |  if_b	wrlong	#0, fp
16f58     0C 4E 85 C1 |  if_b	sub	fp, #12
16f5c     2C 00 90 CD |  if_b	jmp	#LR__1913
16f60     38 4E 05 F1 | 	add	fp, #56
16f64     A7 12 02 FB | 	rdlong	arg01, fp
16f68     38 4E 85 F1 | 	sub	fp, #56
16f6c     01 14 06 F6 | 	mov	arg02, #1
16f70     44 1D B1 FD | 	call	#__system___float_tointeger
16f74     FD 26 52 F6 | 	abs	local01, result1 wc
16f78     07 26 06 F5 | 	and	local01, #7
16f7c     13 27 82 F6 | 	negc	local01, local01
16f80     0C 4E 05 F1 | 	add	fp, #12
16f84     A7 26 62 FC | 	wrlong	local01, fp
16f88     0C 4E 85 F1 | 	sub	fp, #12
16f8c                 | LR__1913
16f8c                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
16f8c     3C 4E 05 F1 | 	add	fp, #60
16f90     A7 12 02 FB | 	rdlong	arg01, fp
16f94     3C 4E 85 F1 | 	sub	fp, #60
16f98     00 14 06 F6 | 	mov	arg02, #0
16f9c     01 16 06 F6 | 	mov	arg03, #1
16fa0     80 1C B1 FD | 	call	#__system___float_cmp
16fa4     00 FA 55 F2 | 	cmps	result1, #0 wc
16fa8     40 00 90 3D |  if_ae	jmp	#LR__1914
16fac     0C 4E 05 F1 | 	add	fp, #12
16fb0     A7 28 02 FB | 	rdlong	local02, fp
16fb4     14 2B 02 F6 | 	mov	local03, local02
16fb8     01 2A 66 F0 | 	shl	local03, #1
16fbc     14 2B 02 F1 | 	add	local03, local02
16fc0     03 2A 66 F0 | 	shl	local03, #3
16fc4     14 00 00 FF 
16fc8     38 E5 05 F1 | 	add	objptr, ##10552
16fcc     F2 2A 02 F1 | 	add	local03, objptr
16fd0     15 31 02 FB | 	rdlong	local06, local03
16fd4     60 4E 05 F1 | 	add	fp, #96
16fd8     A7 30 62 FC | 	wrlong	local06, fp
16fdc     6C 4E 85 F1 | 	sub	fp, #108
16fe0     14 00 00 FF 
16fe4     38 E5 85 F1 | 	sub	objptr, ##10552
16fe8     44 00 90 FD | 	jmp	#LR__1915
16fec                 | LR__1914
16fec     3C 4E 05 F1 | 	add	fp, #60
16ff0     A7 2C 02 FB | 	rdlong	local04, fp
16ff4     30 4E 05 F1 | 	add	fp, #48
16ff8     A7 2C 62 FC | 	wrlong	local04, fp
16ffc     60 4E 85 F1 | 	sub	fp, #96
17000     A7 28 02 FB | 	rdlong	local02, fp
17004     14 2B 02 F6 | 	mov	local03, local02
17008     01 2A 66 F0 | 	shl	local03, #1
1700c     14 2B 02 F1 | 	add	local03, local02
17010     03 2A 66 F0 | 	shl	local03, #3
17014     14 00 00 FF 
17018     38 E5 05 F1 | 	add	objptr, ##10552
1701c     F2 2A 02 F1 | 	add	local03, objptr
17020     0C 4E 85 F1 | 	sub	fp, #12
17024     15 2D 62 FC | 	wrlong	local04, local03
17028     14 00 00 FF 
1702c     38 E5 85 F1 | 	sub	objptr, ##10552
17030                 | LR__1915
17030                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17030     40 4E 05 F1 | 	add	fp, #64
17034     A7 12 02 FB | 	rdlong	arg01, fp
17038     40 4E 85 F1 | 	sub	fp, #64
1703c     00 14 06 F6 | 	mov	arg02, #0
17040     01 16 06 F6 | 	mov	arg03, #1
17044     DC 1B B1 FD | 	call	#__system___float_cmp
17048     00 FA 55 F2 | 	cmps	result1, #0 wc
1704c     24 00 90 CD |  if_b	jmp	#LR__1916
17050     40 4E 05 F1 | 	add	fp, #64
17054     A7 12 02 FB | 	rdlong	arg01, fp
17058     40 4E 85 F1 | 	sub	fp, #64
1705c     20 0E 23 FF 
17060     00 14 06 F6 | 	mov	arg02, ##1176256512
17064     01 16 66 F6 | 	neg	arg03, #1
17068     B8 1B B1 FD | 	call	#__system___float_cmp
1706c     01 FA 55 F2 | 	cmps	result1, #1 wc
17070     48 00 90 CD |  if_b	jmp	#LR__1917
17074                 | LR__1916
17074     0C 4E 05 F1 | 	add	fp, #12
17078     A7 2A 02 FB | 	rdlong	local03, fp
1707c     15 33 02 F6 | 	mov	local07, local03
17080     01 32 66 F0 | 	shl	local07, #1
17084     15 33 02 F1 | 	add	local07, local03
17088     03 32 66 F0 | 	shl	local07, #3
1708c     14 00 00 FF 
17090     38 E5 05 F1 | 	add	objptr, ##10552
17094     F2 32 02 F1 | 	add	local07, objptr
17098     06 32 06 F1 | 	add	local07, #6
1709c     19 2F E2 FA | 	rdword	local05, local07
170a0     17 2D 32 F9 | 	getword	local04, local05, #0
170a4     1C 4E 05 F1 | 	add	fp, #28
170a8     A7 2C 62 FC | 	wrlong	local04, fp
170ac     28 4E 85 F1 | 	sub	fp, #40
170b0     14 00 00 FF 
170b4     38 E5 85 F1 | 	sub	objptr, ##10552
170b8     54 00 90 FD | 	jmp	#LR__1918
170bc                 | LR__1917
170bc     40 4E 05 F1 | 	add	fp, #64
170c0     A7 12 02 FB | 	rdlong	arg01, fp
170c4     40 4E 85 F1 | 	sub	fp, #64
170c8     01 14 06 F6 | 	mov	arg02, #1
170cc     E8 1B B1 FD | 	call	#__system___float_tointeger
170d0     28 4E 05 F1 | 	add	fp, #40
170d4     A7 FA 61 FC | 	wrlong	result1, fp
170d8     1C 4E 85 F1 | 	sub	fp, #28
170dc     A7 28 02 FB | 	rdlong	local02, fp
170e0     14 2B 02 F6 | 	mov	local03, local02
170e4     01 2A 66 F0 | 	shl	local03, #1
170e8     14 2B 02 F1 | 	add	local03, local02
170ec     03 2A 66 F0 | 	shl	local03, #3
170f0     14 00 00 FF 
170f4     38 E5 05 F1 | 	add	objptr, ##10552
170f8     F2 2A 02 F1 | 	add	local03, objptr
170fc     0C 4E 85 F1 | 	sub	fp, #12
17100     06 2A 06 F1 | 	add	local03, #6
17104     15 FB 51 FC | 	wrword	result1, local03
17108     14 00 00 FF 
1710c     38 E5 85 F1 | 	sub	objptr, ##10552
17110                 | LR__1918
17110                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17110     44 4E 05 F1 | 	add	fp, #68
17114     A7 12 02 FB | 	rdlong	arg01, fp
17118     44 4E 85 F1 | 	sub	fp, #68
1711c     00 14 06 F6 | 	mov	arg02, #0
17120     01 16 06 F6 | 	mov	arg03, #1
17124     FC 1A B1 FD | 	call	#__system___float_cmp
17128     00 FA 55 F2 | 	cmps	result1, #0 wc
1712c     24 00 90 CD |  if_b	jmp	#LR__1919
17130     44 4E 05 F1 | 	add	fp, #68
17134     A7 12 02 FB | 	rdlong	arg01, fp
17138     44 4E 85 F1 | 	sub	fp, #68
1713c     89 C1 20 FF 
17140     6F 14 06 F6 | 	mov	arg02, ##1099108975
17144     01 16 66 F6 | 	neg	arg03, #1
17148     D8 1A B1 FD | 	call	#__system___float_cmp
1714c     01 FA 55 F2 | 	cmps	result1, #1 wc
17150     44 00 90 CD |  if_b	jmp	#LR__1920
17154                 | LR__1919
17154     0C 4E 05 F1 | 	add	fp, #12
17158     A7 28 02 FB | 	rdlong	local02, fp
1715c     14 2B 02 F6 | 	mov	local03, local02
17160     01 2A 66 F0 | 	shl	local03, #1
17164     14 2B 02 F1 | 	add	local03, local02
17168     03 2A 66 F0 | 	shl	local03, #3
1716c     14 00 00 FF 
17170     38 E5 05 F1 | 	add	objptr, ##10552
17174     F2 2A 02 F1 | 	add	local03, objptr
17178     0C 2A 06 F1 | 	add	local03, #12
1717c     15 31 02 FB | 	rdlong	local06, local03
17180     68 4E 05 F1 | 	add	fp, #104
17184     A7 30 62 FC | 	wrlong	local06, fp
17188     74 4E 85 F1 | 	sub	fp, #116
1718c     14 00 00 FF 
17190     38 E5 85 F1 | 	sub	objptr, ##10552
17194     48 00 90 FD | 	jmp	#LR__1921
17198                 | LR__1920
17198     44 4E 05 F1 | 	add	fp, #68
1719c     A7 2C 02 FB | 	rdlong	local04, fp
171a0     30 4E 05 F1 | 	add	fp, #48
171a4     A7 2C 62 FC | 	wrlong	local04, fp
171a8     68 4E 85 F1 | 	sub	fp, #104
171ac     A7 28 02 FB | 	rdlong	local02, fp
171b0     14 2B 02 F6 | 	mov	local03, local02
171b4     01 2A 66 F0 | 	shl	local03, #1
171b8     14 2B 02 F1 | 	add	local03, local02
171bc     03 2A 66 F0 | 	shl	local03, #3
171c0     14 00 00 FF 
171c4     38 E5 05 F1 | 	add	objptr, ##10552
171c8     F2 2A 02 F1 | 	add	local03, objptr
171cc     0C 4E 85 F1 | 	sub	fp, #12
171d0     0C 2A 06 F1 | 	add	local03, #12
171d4     15 2D 62 FC | 	wrlong	local04, local03
171d8     14 00 00 FF 
171dc     38 E5 85 F1 | 	sub	objptr, ##10552
171e0                 | LR__1921
171e0                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
171e0     48 4E 05 F1 | 	add	fp, #72
171e4     A7 12 02 FB | 	rdlong	arg01, fp
171e8     48 4E 85 F1 | 	sub	fp, #72
171ec     00 14 06 F6 | 	mov	arg02, #0
171f0     01 16 06 F6 | 	mov	arg03, #1
171f4     2C 1A B1 FD | 	call	#__system___float_cmp
171f8     00 FA 55 F2 | 	cmps	result1, #0 wc
171fc     24 00 90 CD |  if_b	jmp	#LR__1922
17200     48 4E 05 F1 | 	add	fp, #72
17204     A7 12 02 FB | 	rdlong	arg01, fp
17208     48 4E 85 F1 | 	sub	fp, #72
1720c     00 00 21 FF 
17210     00 14 06 F6 | 	mov	arg02, ##1107296256
17214     01 16 66 F6 | 	neg	arg03, #1
17218     08 1A B1 FD | 	call	#__system___float_cmp
1721c     01 FA 55 F2 | 	cmps	result1, #1 wc
17220     48 00 90 CD |  if_b	jmp	#LR__1923
17224                 | LR__1922
17224     0C 4E 05 F1 | 	add	fp, #12
17228     A7 2A 02 FB | 	rdlong	local03, fp
1722c     15 33 02 F6 | 	mov	local07, local03
17230     01 32 66 F0 | 	shl	local07, #1
17234     15 33 02 F1 | 	add	local07, local03
17238     03 32 66 F0 | 	shl	local07, #3
1723c     14 00 00 FF 
17240     38 E5 05 F1 | 	add	objptr, ##10552
17244     F2 32 02 F1 | 	add	local07, objptr
17248     04 32 06 F1 | 	add	local07, #4
1724c     19 2F C2 FA | 	rdbyte	local05, local07
17250     17 2D E2 F8 | 	getbyte	local04, local05, #0
17254     14 4E 05 F1 | 	add	fp, #20
17258     A7 2C 62 FC | 	wrlong	local04, fp
1725c     20 4E 85 F1 | 	sub	fp, #32
17260     14 00 00 FF 
17264     38 E5 85 F1 | 	sub	objptr, ##10552
17268     54 00 90 FD | 	jmp	#LR__1924
1726c                 | LR__1923
1726c     48 4E 05 F1 | 	add	fp, #72
17270     A7 12 02 FB | 	rdlong	arg01, fp
17274     48 4E 85 F1 | 	sub	fp, #72
17278     01 14 06 F6 | 	mov	arg02, #1
1727c     38 1A B1 FD | 	call	#__system___float_tointeger
17280     20 4E 05 F1 | 	add	fp, #32
17284     A7 FA 61 FC | 	wrlong	result1, fp
17288     14 4E 85 F1 | 	sub	fp, #20
1728c     A7 28 02 FB | 	rdlong	local02, fp
17290     14 2B 02 F6 | 	mov	local03, local02
17294     01 2A 66 F0 | 	shl	local03, #1
17298     14 2B 02 F1 | 	add	local03, local02
1729c     03 2A 66 F0 | 	shl	local03, #3
172a0     14 00 00 FF 
172a4     38 E5 05 F1 | 	add	objptr, ##10552
172a8     F2 2A 02 F1 | 	add	local03, objptr
172ac     0C 4E 85 F1 | 	sub	fp, #12
172b0     04 2A 06 F1 | 	add	local03, #4
172b4     15 FB 41 FC | 	wrbyte	result1, local03
172b8     14 00 00 FF 
172bc     38 E5 85 F1 | 	sub	objptr, ##10552
172c0                 | LR__1924
172c0                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
172c0     4C 4E 05 F1 | 	add	fp, #76
172c4     A7 12 02 FB | 	rdlong	arg01, fp
172c8     4C 4E 85 F1 | 	sub	fp, #76
172cc     00 14 06 F6 | 	mov	arg02, #0
172d0     01 16 06 F6 | 	mov	arg03, #1
172d4     4C 19 B1 FD | 	call	#__system___float_cmp
172d8     00 FA 55 F2 | 	cmps	result1, #0 wc
172dc     24 00 90 CD |  if_b	jmp	#LR__1925
172e0     4C 4E 05 F1 | 	add	fp, #76
172e4     A7 12 02 FB | 	rdlong	arg01, fp
172e8     4C 4E 85 F1 | 	sub	fp, #76
172ec     00 80 20 FF 
172f0     00 14 06 F6 | 	mov	arg02, ##1090519040
172f4     01 16 66 F6 | 	neg	arg03, #1
172f8     28 19 B1 FD | 	call	#__system___float_cmp
172fc     01 FA 55 F2 | 	cmps	result1, #1 wc
17300     48 00 90 CD |  if_b	jmp	#LR__1926
17304                 | LR__1925
17304     0C 4E 05 F1 | 	add	fp, #12
17308     A7 2A 02 FB | 	rdlong	local03, fp
1730c     15 33 02 F6 | 	mov	local07, local03
17310     01 32 66 F0 | 	shl	local07, #1
17314     15 33 02 F1 | 	add	local07, local03
17318     03 32 66 F0 | 	shl	local07, #3
1731c     14 00 00 FF 
17320     38 E5 05 F1 | 	add	objptr, ##10552
17324     F2 32 02 F1 | 	add	local07, objptr
17328     05 32 06 F1 | 	add	local07, #5
1732c     19 2F C2 FA | 	rdbyte	local05, local07
17330     17 2D E2 F8 | 	getbyte	local04, local05, #0
17334     18 4E 05 F1 | 	add	fp, #24
17338     A7 2C 62 FC | 	wrlong	local04, fp
1733c     24 4E 85 F1 | 	sub	fp, #36
17340     14 00 00 FF 
17344     38 E5 85 F1 | 	sub	objptr, ##10552
17348     54 00 90 FD | 	jmp	#LR__1927
1734c                 | LR__1926
1734c     4C 4E 05 F1 | 	add	fp, #76
17350     A7 12 02 FB | 	rdlong	arg01, fp
17354     4C 4E 85 F1 | 	sub	fp, #76
17358     01 14 06 F6 | 	mov	arg02, #1
1735c     58 19 B1 FD | 	call	#__system___float_tointeger
17360     24 4E 05 F1 | 	add	fp, #36
17364     A7 FA 61 FC | 	wrlong	result1, fp
17368     18 4E 85 F1 | 	sub	fp, #24
1736c     A7 28 02 FB | 	rdlong	local02, fp
17370     14 2B 02 F6 | 	mov	local03, local02
17374     01 2A 66 F0 | 	shl	local03, #1
17378     14 2B 02 F1 | 	add	local03, local02
1737c     03 2A 66 F0 | 	shl	local03, #3
17380     14 00 00 FF 
17384     38 E5 05 F1 | 	add	objptr, ##10552
17388     F2 2A 02 F1 | 	add	local03, objptr
1738c     0C 4E 85 F1 | 	sub	fp, #12
17390     05 2A 06 F1 | 	add	local03, #5
17394     15 FB 41 FC | 	wrbyte	result1, local03
17398     14 00 00 FF 
1739c     38 E5 85 F1 | 	sub	objptr, ##10552
173a0                 | LR__1927
173a0                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
173a0     50 4E 05 F1 | 	add	fp, #80
173a4     A7 12 02 FB | 	rdlong	arg01, fp
173a8     50 4E 85 F1 | 	sub	fp, #80
173ac     00 14 06 F6 | 	mov	arg02, #0
173b0     01 16 06 F6 | 	mov	arg03, #1
173b4     6C 18 B1 FD | 	call	#__system___float_cmp
173b8     00 FA 55 F2 | 	cmps	result1, #0 wc
173bc     24 00 90 CD |  if_b	jmp	#LR__1928
173c0     50 4E 05 F1 | 	add	fp, #80
173c4     A7 12 02 FB | 	rdlong	arg01, fp
173c8     50 4E 85 F1 | 	sub	fp, #80
173cc     00 3D 22 FF 
173d0     00 14 06 F6 | 	mov	arg02, ##1148846080
173d4     01 16 66 F6 | 	neg	arg03, #1
173d8     48 18 B1 FD | 	call	#__system___float_cmp
173dc     01 FA 55 F2 | 	cmps	result1, #1 wc
173e0     44 00 90 CD |  if_b	jmp	#LR__1929
173e4                 | LR__1928
173e4     0C 4E 05 F1 | 	add	fp, #12
173e8     A7 28 02 FB | 	rdlong	local02, fp
173ec     14 2B 02 F6 | 	mov	local03, local02
173f0     01 2A 66 F0 | 	shl	local03, #1
173f4     14 2B 02 F1 | 	add	local03, local02
173f8     03 2A 66 F0 | 	shl	local03, #3
173fc     14 00 00 FF 
17400     38 E5 05 F1 | 	add	objptr, ##10552
17404     F2 2A 02 F1 | 	add	local03, objptr
17408     08 2A 06 F1 | 	add	local03, #8
1740c     15 31 02 FB | 	rdlong	local06, local03
17410     6C 4E 05 F1 | 	add	fp, #108
17414     A7 30 62 FC | 	wrlong	local06, fp
17418     78 4E 85 F1 | 	sub	fp, #120
1741c     14 00 00 FF 
17420     38 E5 85 F1 | 	sub	objptr, ##10552
17424     48 00 90 FD | 	jmp	#LR__1930
17428                 | LR__1929
17428     50 4E 05 F1 | 	add	fp, #80
1742c     A7 30 02 FB | 	rdlong	local06, fp
17430     28 4E 05 F1 | 	add	fp, #40
17434     A7 30 62 FC | 	wrlong	local06, fp
17438     6C 4E 85 F1 | 	sub	fp, #108
1743c     A7 28 02 FB | 	rdlong	local02, fp
17440     14 2B 02 F6 | 	mov	local03, local02
17444     01 2A 66 F0 | 	shl	local03, #1
17448     14 2B 02 F1 | 	add	local03, local02
1744c     03 2A 66 F0 | 	shl	local03, #3
17450     14 00 00 FF 
17454     38 E5 05 F1 | 	add	objptr, ##10552
17458     F2 2A 02 F1 | 	add	local03, objptr
1745c     0C 4E 85 F1 | 	sub	fp, #12
17460     08 2A 06 F1 | 	add	local03, #8
17464     15 31 62 FC | 	wrlong	local06, local03
17468     14 00 00 FF 
1746c     38 E5 85 F1 | 	sub	objptr, ##10552
17470                 | LR__1930
17470                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
17470     54 4E 05 F1 | 	add	fp, #84
17474     A7 12 02 FB | 	rdlong	arg01, fp
17478     54 4E 85 F1 | 	sub	fp, #84
1747c     00 C0 5F FF 
17480     00 14 06 F6 | 	mov	arg02, ##-1082130432
17484     01 16 06 F6 | 	mov	arg03, #1
17488     98 17 B1 FD | 	call	#__system___float_cmp
1748c     00 FA 55 F2 | 	cmps	result1, #0 wc
17490     24 00 90 CD |  if_b	jmp	#LR__1931
17494     54 4E 05 F1 | 	add	fp, #84
17498     A7 12 02 FB | 	rdlong	arg01, fp
1749c     54 4E 85 F1 | 	sub	fp, #84
174a0     00 C0 1F FF 
174a4     00 14 06 F6 | 	mov	arg02, ##1065353216
174a8     01 16 66 F6 | 	neg	arg03, #1
174ac     74 17 B1 FD | 	call	#__system___float_cmp
174b0     01 FA 55 F2 | 	cmps	result1, #1 wc
174b4     44 00 90 CD |  if_b	jmp	#LR__1932
174b8                 | LR__1931
174b8     0C 4E 05 F1 | 	add	fp, #12
174bc     A7 28 02 FB | 	rdlong	local02, fp
174c0     14 2B 02 F6 | 	mov	local03, local02
174c4     01 2A 66 F0 | 	shl	local03, #1
174c8     14 2B 02 F1 | 	add	local03, local02
174cc     03 2A 66 F0 | 	shl	local03, #3
174d0     14 00 00 FF 
174d4     38 E5 05 F1 | 	add	objptr, ##10552
174d8     F2 2A 02 F1 | 	add	local03, objptr
174dc     10 2A 06 F1 | 	add	local03, #16
174e0     15 31 02 FB | 	rdlong	local06, local03
174e4     64 4E 05 F1 | 	add	fp, #100
174e8     A7 30 62 FC | 	wrlong	local06, fp
174ec     70 4E 85 F1 | 	sub	fp, #112
174f0     14 00 00 FF 
174f4     38 E5 85 F1 | 	sub	objptr, ##10552
174f8     48 00 90 FD | 	jmp	#LR__1933
174fc                 | LR__1932
174fc     54 4E 05 F1 | 	add	fp, #84
17500     A7 30 02 FB | 	rdlong	local06, fp
17504     1C 4E 05 F1 | 	add	fp, #28
17508     A7 30 62 FC | 	wrlong	local06, fp
1750c     64 4E 85 F1 | 	sub	fp, #100
17510     A7 28 02 FB | 	rdlong	local02, fp
17514     14 2B 02 F6 | 	mov	local03, local02
17518     01 2A 66 F0 | 	shl	local03, #1
1751c     14 2B 02 F1 | 	add	local03, local02
17520     03 2A 66 F0 | 	shl	local03, #3
17524     14 00 00 FF 
17528     38 E5 05 F1 | 	add	objptr, ##10552
1752c     F2 2A 02 F1 | 	add	local03, objptr
17530     0C 4E 85 F1 | 	sub	fp, #12
17534     10 2A 06 F1 | 	add	local03, #16
17538     15 31 62 FC | 	wrlong	local06, local03
1753c     14 00 00 FF 
17540     38 E5 85 F1 | 	sub	objptr, ##10552
17544                 | LR__1933
17544                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
17544     58 4E 05 F1 | 	add	fp, #88
17548     A7 12 02 FB | 	rdlong	arg01, fp
1754c     58 4E 85 F1 | 	sub	fp, #88
17550     00 14 06 F6 | 	mov	arg02, #0
17554     01 16 06 F6 | 	mov	arg03, #1
17558     C8 16 B1 FD | 	call	#__system___float_cmp
1755c     00 FA 55 F2 | 	cmps	result1, #0 wc
17560     24 00 90 CD |  if_b	jmp	#LR__1934
17564     58 4E 05 F1 | 	add	fp, #88
17568     A7 12 02 FB | 	rdlong	arg01, fp
1756c     58 4E 85 F1 | 	sub	fp, #88
17570     80 BF 21 FF 
17574     00 14 06 F6 | 	mov	arg02, ##1132396544
17578     01 16 66 F6 | 	neg	arg03, #1
1757c     A4 16 B1 FD | 	call	#__system___float_cmp
17580     01 FA 55 F2 | 	cmps	result1, #1 wc
17584     44 00 90 CD |  if_b	jmp	#LR__1935
17588                 | LR__1934
17588     0C 4E 05 F1 | 	add	fp, #12
1758c     A7 2A 02 FB | 	rdlong	local03, fp
17590     15 33 02 F6 | 	mov	local07, local03
17594     01 32 66 F0 | 	shl	local07, #1
17598     15 33 02 F1 | 	add	local07, local03
1759c     03 32 66 F0 | 	shl	local07, #3
175a0     14 00 00 FF 
175a4     38 E5 05 F1 | 	add	objptr, ##10552
175a8     F2 32 02 F1 | 	add	local07, objptr
175ac     14 32 06 F1 | 	add	local07, #20
175b0     19 2D E2 FA | 	rdword	local04, local07
175b4     20 4E 05 F1 | 	add	fp, #32
175b8     A7 2C 62 FC | 	wrlong	local04, fp
175bc     2C 4E 85 F1 | 	sub	fp, #44
175c0     14 00 00 FF 
175c4     38 E5 85 F1 | 	sub	objptr, ##10552
175c8     54 00 90 FD | 	jmp	#LR__1936
175cc                 | LR__1935
175cc     58 4E 05 F1 | 	add	fp, #88
175d0     A7 12 02 FB | 	rdlong	arg01, fp
175d4     58 4E 85 F1 | 	sub	fp, #88
175d8     01 14 06 F6 | 	mov	arg02, #1
175dc     D8 16 B1 FD | 	call	#__system___float_tointeger
175e0     2C 4E 05 F1 | 	add	fp, #44
175e4     A7 FA 61 FC | 	wrlong	result1, fp
175e8     20 4E 85 F1 | 	sub	fp, #32
175ec     A7 28 02 FB | 	rdlong	local02, fp
175f0     14 2B 02 F6 | 	mov	local03, local02
175f4     01 2A 66 F0 | 	shl	local03, #1
175f8     14 2B 02 F1 | 	add	local03, local02
175fc     03 2A 66 F0 | 	shl	local03, #3
17600     14 00 00 FF 
17604     38 E5 05 F1 | 	add	objptr, ##10552
17608     F2 2A 02 F1 | 	add	local03, objptr
1760c     0C 4E 85 F1 | 	sub	fp, #12
17610     14 2A 06 F1 | 	add	local03, #20
17614     15 FB 51 FC | 	wrword	result1, local03
17618     14 00 00 FF 
1761c     38 E5 85 F1 | 	sub	objptr, ##10552
17620                 | LR__1936
17620     6C 4E 05 F1 | 	add	fp, #108
17624     A7 14 02 FB | 	rdlong	arg02, fp
17628     6C 4E 85 F1 | 	sub	fp, #108
1762c     FC 16 20 FF 
17630     54 12 06 F6 | 	mov	arg01, ##1076754516
17634     88 21 B1 FD | 	call	#__system____builtin_logbase
17638     FD 2C 02 F6 | 	mov	local04, result1
1763c     1E 14 C6 F9 | 	decod	arg02, #30
17640     FC 16 20 FF 
17644     54 12 06 F6 | 	mov	arg01, ##1076754516
17648     74 21 B1 FD | 	call	#__system____builtin_logbase
1764c     FD 14 02 F6 | 	mov	arg02, result1
17650     16 13 02 F6 | 	mov	arg01, local04
17654     9C 13 B1 FD | 	call	#__system___float_div
17658     FD 12 02 F6 | 	mov	arg01, result1
1765c     00 14 06 F6 | 	mov	arg02, #0
17660     54 16 B1 FD | 	call	#__system___float_tointeger
17664     30 4E 05 F1 | 	add	fp, #48
17668     A7 FA 61 FC | 	wrlong	result1, fp
1766c     1E 2C C6 F9 | 	decod	local04, #30
17670     FD 12 02 F6 | 	mov	arg01, result1
17674     30 4E 85 F1 | 	sub	fp, #48
17678     05 12 06 F1 | 	add	arg01, #5
1767c     09 13 52 F6 | 	abs	arg01, arg01 wc
17680     1F 34 C6 C9 |  if_b	decod	local08, #31
17684     00 34 06 36 |  if_ae	mov	local08, #0
17688     60 0D B1 FD | 	call	#__system___float_fromuns
1768c     1A FB 61 F5 | 	xor	result1, local08
17690     FD 14 02 F6 | 	mov	arg02, result1
17694     16 13 02 F6 | 	mov	arg01, local04
17698     5C 20 B1 FD | 	call	#__system____builtin_powf
1769c     FD 12 02 F6 | 	mov	arg01, result1
176a0     01 14 06 F6 | 	mov	arg02, #1
176a4     10 16 B1 FD | 	call	#__system___float_tointeger
176a8     10 4E 05 F1 | 	add	fp, #16
176ac     A7 FA 61 FC | 	wrlong	result1, fp
176b0                 | ' skip=round(2^(lfreq+5))
176b0                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
176b0     10 4E 85 F1 | 	sub	fp, #16
176b4     40 00 00 FF 
176b8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
176bc     30 00 90 CD |  if_b	jmp	#LR__1937
176c0     10 4E 05 F1 | 	add	fp, #16
176c4     A7 26 02 FB | 	rdlong	local01, fp
176c8     13 2D 52 F6 | 	abs	local04, local01 wc
176cc     0F 2C 46 F0 | 	shr	local04, #15
176d0     16 2D 82 F6 | 	negc	local04, local04
176d4     0C 4E 85 F1 | 	sub	fp, #12
176d8     A7 2C 62 FC | 	wrlong	local04, fp
176dc     0C 4E 05 F1 | 	add	fp, #12
176e0     40 00 80 FF 
176e4     A7 00 68 FC | 	wrlong	##32768, fp
176e8     10 4E 85 F1 | 	sub	fp, #16
176ec     0C 00 90 FD | 	jmp	#LR__1938
176f0                 | LR__1937
176f0     04 4E 05 F1 | 	add	fp, #4
176f4     A7 02 68 FC | 	wrlong	#1, fp
176f8     04 4E 85 F1 | 	sub	fp, #4
176fc                 | LR__1938
176fc     6C 4E 05 F1 | 	add	fp, #108
17700     A7 14 02 FB | 	rdlong	arg02, fp
17704     6C 4E 85 F1 | 	sub	fp, #108
17708     3E 2C 25 FF 
1770c     3C 12 06 F6 | 	mov	arg01, ##1247312956
17710     E0 12 B1 FD | 	call	#__system___float_div
17714     FD 2C 02 F6 | 	mov	local04, result1
17718     04 4E 05 F1 | 	add	fp, #4
1771c     A7 12 02 FB | 	rdlong	arg01, fp
17720     04 4E 85 F1 | 	sub	fp, #4
17724     09 13 52 F6 | 	abs	arg01, arg01 wc
17728     1F 34 C6 C9 |  if_b	decod	local08, #31
1772c     00 34 06 36 |  if_ae	mov	local08, #0
17730     B8 0C B1 FD | 	call	#__system___float_fromuns
17734     1A FB 61 F5 | 	xor	result1, local08
17738     FD 26 02 F6 | 	mov	local01, result1
1773c     1E 28 C6 F9 | 	decod	local02, #30
17740     0D 12 06 F6 | 	mov	arg01, #13
17744     30 4E 05 F1 | 	add	fp, #48
17748     A7 30 02 FB | 	rdlong	local06, fp
1774c     30 4E 85 F1 | 	sub	fp, #48
17750     18 13 82 F1 | 	sub	arg01, local06
17754     09 13 52 F6 | 	abs	arg01, arg01 wc
17758     1F 34 C6 C9 |  if_b	decod	local08, #31
1775c     00 34 06 36 |  if_ae	mov	local08, #0
17760     88 0C B1 FD | 	call	#__system___float_fromuns
17764     1A FB 61 F5 | 	xor	result1, local08
17768     FD 14 02 F6 | 	mov	arg02, result1
1776c     14 13 02 F6 | 	mov	arg01, local02
17770     84 1F B1 FD | 	call	#__system____builtin_powf
17774     FD 14 02 F6 | 	mov	arg02, result1
17778     13 13 02 F6 | 	mov	arg01, local01
1777c     70 10 B1 FD | 	call	#__system___float_mul
17780     FD 14 02 F6 | 	mov	arg02, result1
17784     16 13 02 F6 | 	mov	arg01, local04
17788     68 12 B1 FD | 	call	#__system___float_div
1778c     FD 12 02 F6 | 	mov	arg01, result1
17790     01 14 06 F6 | 	mov	arg02, #1
17794     20 15 B1 FD | 	call	#__system___float_tointeger
17798     34 4E 05 F1 | 	add	fp, #52
1779c     A7 FA 61 FC | 	wrlong	result1, fp
177a0     34 4E 05 F1 | 	add	fp, #52
177a4     A7 12 02 FB | 	rdlong	arg01, fp
177a8     10 4E 05 F1 | 	add	fp, #16
177ac     A7 14 02 FB | 	rdlong	arg02, fp
177b0     78 4E 85 F1 | 	sub	fp, #120
177b4     3C 12 B1 FD | 	call	#__system___float_div
177b8     FD 12 02 F6 | 	mov	arg01, result1
177bc     01 14 06 F6 | 	mov	arg02, #1
177c0     F4 14 B1 FD | 	call	#__system___float_tointeger
177c4     FD 2C 02 F6 | 	mov	local04, result1
177c8     14 4E 05 F1 | 	add	fp, #20
177cc     A7 2C 62 FC | 	wrlong	local04, fp
177d0     5C 4E 05 F1 | 	add	fp, #92
177d4     A7 14 02 FB | 	rdlong	arg02, fp
177d8     70 4E 85 F1 | 	sub	fp, #112
177dc     00 00 23 FF 
177e0     00 12 06 F6 | 	mov	arg01, ##1174405120
177e4     08 10 B1 FD | 	call	#__system___float_mul
177e8     FD 12 02 F6 | 	mov	arg01, result1
177ec     01 14 06 F6 | 	mov	arg02, #1
177f0     C4 14 B1 FD | 	call	#__system___float_tointeger
177f4     0D 2C C6 F9 | 	decod	local04, #13
177f8     FD 2C 02 F1 | 	add	local04, result1
177fc     18 4E 05 F1 | 	add	fp, #24
17800     A7 2C 62 FC | 	wrlong	local04, fp
17804     5C 4E 05 F1 | 	add	fp, #92
17808     A7 14 02 FB | 	rdlong	arg02, fp
1780c     74 4E 85 F1 | 	sub	fp, #116
17810     00 3D 22 FF 
17814     00 12 06 F6 | 	mov	arg01, ##1148846080
17818     D4 0F B1 FD | 	call	#__system___float_mul
1781c     FD 12 02 F6 | 	mov	arg01, result1
17820     01 14 06 F6 | 	mov	arg02, #1
17824     90 14 B1 FD | 	call	#__system___float_tointeger
17828     1C 4E 05 F1 | 	add	fp, #28
1782c     A7 FA 61 FC | 	wrlong	result1, fp
17830     37 00 00 FF 
17834     10 E4 05 F1 | 	add	objptr, ##28176
17838     F2 2C 02 FB | 	rdlong	local04, objptr
1783c     37 00 00 FF 
17840     10 E4 85 F1 | 	sub	objptr, ##28176
17844     10 4E 85 F1 | 	sub	fp, #16
17848     A7 28 02 FB | 	rdlong	local02, fp
1784c     06 28 66 F0 | 	shl	local02, #6
17850     14 2D 02 F1 | 	add	local04, local02
17854     04 4E 85 F1 | 	sub	fp, #4
17858     A7 2C 62 FC | 	wrlong	local04, fp
1785c                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
1785c                 | ' speed=round(speed_coeff/slen)
1785c                 | ' ipan=8192+round(8192*pan)
1785c                 | ' ivol=round(1000.0*vol)
1785c                 | ' base2=base+64*channel
1785c                 | ' if wave <32 then 
1785c     18 4E 05 F1 | 	add	fp, #24
17860     A7 2C 02 FB | 	rdlong	local04, fp
17864     20 4E 85 F1 | 	sub	fp, #32
17868     20 2C 56 F2 | 	cmps	local04, #32 wc
1786c     2C 00 90 3D |  if_ae	jmp	#LR__1939
17870     08 4E 05 F1 | 	add	fp, #8
17874     A7 12 02 FB | 	rdlong	arg01, fp
17878     08 12 06 F1 | 	add	arg01, #8
1787c     18 4E 05 F1 | 	add	fp, #24
17880     A7 14 02 FB | 	rdlong	arg02, fp
17884     20 4E 85 F1 | 	sub	fp, #32
17888     0B 14 66 F0 | 	shl	arg02, #11
1788c     00 00 60 FF 
17890     00 14 06 F1 | 	add	arg02, ##-1073741824
17894     09 15 62 FC | 	wrlong	arg02, arg01
17898     18 00 90 FD | 	jmp	#LR__1940
1789c                 | LR__1939
1789c     08 4E 05 F1 | 	add	fp, #8
178a0     A7 12 02 FB | 	rdlong	arg01, fp
178a4     08 4E 85 F1 | 	sub	fp, #8
178a8     08 12 06 F1 | 	add	arg01, #8
178ac     00 00 E4 FF 
178b0     09 01 68 FC | 	wrlong	##-939524096, arg01
178b4                 | LR__1940
178b4     08 4E 05 F1 | 	add	fp, #8
178b8     A7 12 02 FB | 	rdlong	arg01, fp
178bc     10 12 06 F1 | 	add	arg01, #16
178c0     04 00 80 FF 
178c4     09 01 68 FC | 	wrlong	##2048, arg01
178c8     A7 12 02 FB | 	rdlong	arg01, fp
178cc     0C 12 06 F1 | 	add	arg01, #12
178d0     09 01 68 FC | 	wrlong	#0, arg01
178d4     A7 12 02 FB | 	rdlong	arg01, fp
178d8     14 12 06 F1 | 	add	arg01, #20
178dc     14 4E 05 F1 | 	add	fp, #20
178e0     A7 14 02 FB | 	rdlong	arg02, fp
178e4     09 15 52 FC | 	wrword	arg02, arg01
178e8     14 4E 85 F1 | 	sub	fp, #20
178ec     A7 12 02 FB | 	rdlong	arg01, fp
178f0     16 12 06 F1 | 	add	arg01, #22
178f4     10 4E 05 F1 | 	add	fp, #16
178f8     A7 14 02 FB | 	rdlong	arg02, fp
178fc     09 15 52 FC | 	wrword	arg02, arg01
17900                 | ' lpoke base2+16,2048
17900                 | ' lpoke base2+12,0
17900                 | ' dpoke base2+20,ivol 
17900                 | ' dpoke base2+22,ipan 
17900                 | ' if wave<32 then
17900     08 4E 05 F1 | 	add	fp, #8
17904     A7 2C 02 FB | 	rdlong	local04, fp
17908     20 4E 85 F1 | 	sub	fp, #32
1790c     20 2C 56 F2 | 	cmps	local04, #32 wc
17910     38 00 90 3D |  if_ae	jmp	#LR__1941
17914     08 4E 05 F1 | 	add	fp, #8
17918     A7 12 02 FB | 	rdlong	arg01, fp
1791c     18 12 06 F1 | 	add	arg01, #24
17920     2C 4E 05 F1 | 	add	fp, #44
17924     A7 14 02 FB | 	rdlong	arg02, fp
17928     09 15 52 FC | 	wrword	arg02, arg01
1792c     2C 4E 85 F1 | 	sub	fp, #44
17930     A7 12 02 FB | 	rdlong	arg01, fp
17934     1A 12 06 F1 | 	add	arg01, #26
17938     08 4E 05 F1 | 	add	fp, #8
1793c     A7 14 02 FB | 	rdlong	arg02, fp
17940     10 4E 85 F1 | 	sub	fp, #16
17944     09 15 52 FC | 	wrword	arg02, arg01
17948     48 00 90 FD | 	jmp	#LR__1942
1794c                 | LR__1941
1794c     08 4E 05 F1 | 	add	fp, #8
17950     A7 2C 02 FB | 	rdlong	local04, fp
17954     18 2C 06 F1 | 	add	local04, #24
17958     64 4E 05 F1 | 	add	fp, #100
1795c     A7 14 02 FB | 	rdlong	arg02, fp
17960     6C 4E 85 F1 | 	sub	fp, #108
17964     3E 2C 25 FF 
17968     3C 12 06 F6 | 	mov	arg01, ##1247312956
1796c     84 10 B1 FD | 	call	#__system___float_div
17970     FD 12 02 F6 | 	mov	arg01, result1
17974     01 14 06 F6 | 	mov	arg02, #1
17978     3C 13 B1 FD | 	call	#__system___float_tointeger
1797c     16 FB 51 FC | 	wrword	result1, local04
17980     08 4E 05 F1 | 	add	fp, #8
17984     A7 12 02 FB | 	rdlong	arg01, fp
17988     08 4E 85 F1 | 	sub	fp, #8
1798c     1A 12 06 F1 | 	add	arg01, #26
17990     09 01 5A FC | 	wrword	#256, arg01
17994                 | LR__1942
17994     08 4E 05 F1 | 	add	fp, #8
17998     A7 12 02 FB | 	rdlong	arg01, fp
1799c     1C 12 06 F1 | 	add	arg01, #28
179a0     09 01 68 FC | 	wrlong	#0, arg01
179a4     A7 12 02 FB | 	rdlong	arg01, fp
179a8     20 12 06 F1 | 	add	arg01, #32
179ac     09 01 68 FC | 	wrlong	#0, arg01
179b0                 | ' lpoke base2+28,$0000_0000
179b0                 | ' lpoke base2+32,0 
179b0                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
179b0     1C 4E 05 F1 | 	add	fp, #28
179b4     A7 2C 02 FB | 	rdlong	local04, fp
179b8     24 4E 85 F1 | 	sub	fp, #36
179bc     08 2C 0E F2 | 	cmp	local04, #8 wz
179c0     18 00 90 5D |  if_ne	jmp	#LR__1943
179c4     08 4E 05 F1 | 	add	fp, #8
179c8     A7 12 02 FB | 	rdlong	arg01, fp
179cc     08 4E 85 F1 | 	sub	fp, #8
179d0     24 12 06 F1 | 	add	arg01, #36
179d4     09 01 68 FC | 	wrlong	#0, arg01
179d8     34 00 90 FD | 	jmp	#LR__1944
179dc                 | LR__1943
179dc     08 4E 05 F1 | 	add	fp, #8
179e0     A7 12 02 FB | 	rdlong	arg01, fp
179e4     24 12 06 F1 | 	add	arg01, #36
179e8     1C 4E 05 F1 | 	add	fp, #28
179ec     A7 14 02 FB | 	rdlong	arg02, fp
179f0     24 4E 85 F1 | 	sub	fp, #36
179f4     09 14 66 F0 | 	shl	arg02, #9
179f8     0C 00 00 FF 
179fc     D8 E4 05 F1 | 	add	objptr, ##6360
17a00     F2 14 02 F1 | 	add	arg02, objptr
17a04     0C 00 00 FF 
17a08     D8 E4 85 F1 | 	sub	objptr, ##6360
17a0c     09 15 62 FC | 	wrlong	arg02, arg01
17a10                 | LR__1944
17a10     08 4E 05 F1 | 	add	fp, #8
17a14     A7 12 02 FB | 	rdlong	arg01, fp
17a18     28 12 06 F1 | 	add	arg01, #40
17a1c     0C 4E 05 F1 | 	add	fp, #12
17a20     A7 14 02 FB | 	rdlong	arg02, fp
17a24     09 15 62 FC | 	wrlong	arg02, arg01
17a28     0C 4E 85 F1 | 	sub	fp, #12
17a2c     A7 12 02 FB | 	rdlong	arg01, fp
17a30     2C 12 06 F1 | 	add	arg01, #44
17a34     24 4E 05 F1 | 	add	fp, #36
17a38     A7 14 02 FB | 	rdlong	arg02, fp
17a3c     09 15 62 FC | 	wrlong	arg02, arg01
17a40                 | ' lpoke base2+40,speed 
17a40                 | ' lpoke base2+44,sus 
17a40                 | ' if delay>0 then waitms(delay) 
17a40     04 4E 85 F1 | 	sub	fp, #4
17a44     A7 2C 02 FB | 	rdlong	local04, fp
17a48     28 4E 85 F1 | 	sub	fp, #40
17a4c     01 2C 56 F2 | 	cmps	local04, #1 wc
17a50     28 4E 05 31 |  if_ae	add	fp, #40
17a54     A7 12 02 3B |  if_ae	rdlong	arg01, fp
17a58     28 4E 85 31 |  if_ae	sub	fp, #40
17a5c     0C E2 B0 3D |  if_ae	call	#__system___waitms
17a60     A7 F0 03 F6 | 	mov	ptra, fp
17a64     B2 00 A0 FD | 	call	#popregs_
17a68                 | _do_play_ret
17a68     2D 00 64 FD | 	ret
17a6c                 | 
17a6c                 | ' 
17a6c                 | ' '-------------------- plot
17a6c                 | ' 
17a6c                 | ' sub do_plot
17a6c                 | _do_plot
17a6c     00 4A 05 F6 | 	mov	COUNT_, #0
17a70     A8 00 A0 FD | 	call	#pushregs_
17a74     20 F0 07 F1 | 	add	ptra, #32
17a78     04 52 BF FD | 	call	#_pop
17a7c     FD 16 02 F6 | 	mov	arg03, result1
17a80     FE 14 02 F6 | 	mov	arg02, result2
17a84     FF 12 02 F6 | 	mov	arg01, result3
17a88     0C 4E 05 F1 | 	add	fp, #12
17a8c     A7 16 62 FC | 	wrlong	arg03, fp
17a90     04 4E 05 F1 | 	add	fp, #4
17a94     A7 14 62 FC | 	wrlong	arg02, fp
17a98     04 4E 05 F1 | 	add	fp, #4
17a9c     A7 12 62 FC | 	wrlong	arg01, fp
17aa0     14 4E 85 F1 | 	sub	fp, #20
17aa4     D8 51 BF FD | 	call	#_pop
17aa8     FF 16 02 F6 | 	mov	arg03, result3
17aac     A7 FA 61 FC | 	wrlong	result1, fp
17ab0     04 4E 05 F1 | 	add	fp, #4
17ab4     A7 FC 61 FC | 	wrlong	result2, fp
17ab8     04 4E 05 F1 | 	add	fp, #4
17abc     A7 16 62 FC | 	wrlong	arg03, fp
17ac0     08 4E 85 F1 | 	sub	fp, #8
17ac4     A7 12 02 F6 | 	mov	arg01, fp
17ac8     98 53 BF FD | 	call	#_converttoint
17acc     18 4E 05 F1 | 	add	fp, #24
17ad0     A7 FA 61 FC | 	wrlong	result1, fp
17ad4     0C 4E 85 F1 | 	sub	fp, #12
17ad8     A7 12 02 F6 | 	mov	arg01, fp
17adc     0C 4E 85 F1 | 	sub	fp, #12
17ae0     80 53 BF FD | 	call	#_converttoint
17ae4     1C 4E 05 F1 | 	add	fp, #28
17ae8     A7 FA 61 FC | 	wrlong	result1, fp
17aec     04 4E 85 F1 | 	sub	fp, #4
17af0     A7 16 02 FB | 	rdlong	arg03, fp
17af4     37 00 00 FF 
17af8     2C E4 05 F1 | 	add	objptr, ##28204
17afc     F2 16 62 FC | 	wrlong	arg03, objptr
17b00     04 4E 05 F1 | 	add	fp, #4
17b04     A7 14 02 FB | 	rdlong	arg02, fp
17b08     1C 4E 85 F1 | 	sub	fp, #28
17b0c     04 E4 05 F1 | 	add	objptr, #4
17b10     F2 14 62 FC | 	wrlong	arg02, objptr
17b14     04 E4 85 F1 | 	sub	objptr, #4
17b18     F2 12 02 FB | 	rdlong	arg01, objptr
17b1c     04 E4 85 F1 | 	sub	objptr, #4
17b20     F2 16 02 FB | 	rdlong	arg03, objptr
17b24     37 00 00 FF 
17b28     28 E4 85 F1 | 	sub	objptr, ##28200
17b2c     F0 B4 B0 FD | 	call	#_hg010b_spin2_putpixel
17b30     A7 F0 03 F6 | 	mov	ptra, fp
17b34     B2 00 A0 FD | 	call	#popregs_
17b38                 | _do_plot_ret
17b38     2D 00 64 FD | 	ret
17b3c                 | 
17b3c                 | ' 
17b3c                 | ' '-------------------- poke
17b3c                 | ' 
17b3c                 | ' sub do_poke
17b3c                 | _do_poke
17b3c     01 4A 05 F6 | 	mov	COUNT_, #1
17b40     A8 00 A0 FD | 	call	#pushregs_
17b44     20 F0 07 F1 | 	add	ptra, #32
17b48     34 51 BF FD | 	call	#_pop
17b4c     FD 14 02 F6 | 	mov	arg02, result1
17b50     FE 12 02 F6 | 	mov	arg01, result2
17b54     FF 26 02 F6 | 	mov	local01, result3
17b58     A7 14 62 FC | 	wrlong	arg02, fp
17b5c     04 4E 05 F1 | 	add	fp, #4
17b60     A7 12 62 FC | 	wrlong	arg01, fp
17b64     04 4E 05 F1 | 	add	fp, #4
17b68     A7 26 62 FC | 	wrlong	local01, fp
17b6c     08 4E 85 F1 | 	sub	fp, #8
17b70     0C 51 BF FD | 	call	#_pop
17b74     FF 26 02 F6 | 	mov	local01, result3
17b78     0C 4E 05 F1 | 	add	fp, #12
17b7c     A7 FA 61 FC | 	wrlong	result1, fp
17b80     04 4E 05 F1 | 	add	fp, #4
17b84     A7 FC 61 FC | 	wrlong	result2, fp
17b88     04 4E 05 F1 | 	add	fp, #4
17b8c     A7 26 62 FC | 	wrlong	local01, fp
17b90     08 4E 85 F1 | 	sub	fp, #8
17b94     A7 12 02 F6 | 	mov	arg01, fp
17b98     0C 4E 85 F1 | 	sub	fp, #12
17b9c     C4 52 BF FD | 	call	#_converttoint
17ba0     18 4E 05 F1 | 	add	fp, #24
17ba4     A7 FA 61 FC | 	wrlong	result1, fp
17ba8     18 4E 85 F1 | 	sub	fp, #24
17bac     A7 12 02 F6 | 	mov	arg01, fp
17bb0     B0 52 BF FD | 	call	#_converttoint
17bb4     1C 4E 05 F1 | 	add	fp, #28
17bb8     A7 FA 61 FC | 	wrlong	result1, fp
17bbc                 | ' t1=pop() 'value
17bbc                 | ' t2=pop() 
17bbc                 | ' a=converttoint(t2) : v=converttoint(t1)
17bbc                 | ' if a<$80000 then poke a,v else pspoke a,v
17bbc     04 4E 85 F1 | 	sub	fp, #4
17bc0     A7 26 02 FB | 	rdlong	local01, fp
17bc4     18 4E 85 F1 | 	sub	fp, #24
17bc8     00 04 00 FF 
17bcc     00 26 16 F2 | 	cmp	local01, ##524288 wc
17bd0     1C 00 90 3D |  if_ae	jmp	#LR__1950
17bd4     18 4E 05 F1 | 	add	fp, #24
17bd8     A7 12 02 FB | 	rdlong	arg01, fp
17bdc     04 4E 05 F1 | 	add	fp, #4
17be0     A7 14 02 FB | 	rdlong	arg02, fp
17be4     1C 4E 85 F1 | 	sub	fp, #28
17be8     09 15 42 FC | 	wrbyte	arg02, arg01
17bec     18 00 90 FD | 	jmp	#LR__1951
17bf0                 | LR__1950
17bf0     18 4E 05 F1 | 	add	fp, #24
17bf4     A7 12 02 FB | 	rdlong	arg01, fp
17bf8     04 4E 05 F1 | 	add	fp, #4
17bfc     A7 14 02 FB | 	rdlong	arg02, fp
17c00     1C 4E 85 F1 | 	sub	fp, #28
17c04     B4 A5 B0 FD | 	call	#_pspoke
17c08                 | LR__1951
17c08     A7 F0 03 F6 | 	mov	ptra, fp
17c0c     B2 00 A0 FD | 	call	#popregs_
17c10                 | _do_poke_ret
17c10     2D 00 64 FD | 	ret
17c14                 | 
17c14                 | ' 
17c14                 | ' '-------------------- pop
17c14                 | ' 
17c14                 | ' sub do_pop()
17c14                 | _do_pop
17c14                 | ' if gosubtop>0 then  gosubtop -=1 
17c14     50 00 00 FF 
17c18     34 E5 05 F1 | 	add	objptr, ##41268
17c1c     F2 00 02 FB | 	rdlong	_var01, objptr
17c20     50 00 00 FF 
17c24     34 E5 85 F1 | 	sub	objptr, ##41268
17c28     01 00 56 F2 | 	cmps	_var01, #1 wc
17c2c     50 00 00 3F 
17c30     34 E5 05 31 |  if_ae	add	objptr, ##41268
17c34     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
17c38     01 00 86 31 |  if_ae	sub	_var01, #1
17c3c     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
17c40     50 00 00 3F 
17c44     34 E5 85 31 |  if_ae	sub	objptr, ##41268
17c48                 | _do_pop_ret
17c48     2D 00 64 FD | 	ret
17c4c                 | 
17c4c                 | ' 
17c4c                 | ' '-------------------- position
17c4c                 | ' 
17c4c                 | ' sub do_position
17c4c                 | _do_position
17c4c     01 4A 05 F6 | 	mov	COUNT_, #1
17c50     A8 00 A0 FD | 	call	#pushregs_
17c54     18 F0 07 F1 | 	add	ptra, #24
17c58     24 50 BF FD | 	call	#_pop
17c5c     FD 14 02 F6 | 	mov	arg02, result1
17c60     FE 12 02 F6 | 	mov	arg01, result2
17c64     FF 26 02 F6 | 	mov	local01, result3
17c68     A7 14 62 FC | 	wrlong	arg02, fp
17c6c     04 4E 05 F1 | 	add	fp, #4
17c70     A7 12 62 FC | 	wrlong	arg01, fp
17c74     04 4E 05 F1 | 	add	fp, #4
17c78     A7 26 62 FC | 	wrlong	local01, fp
17c7c     08 4E 85 F1 | 	sub	fp, #8
17c80     FC 4F BF FD | 	call	#_pop
17c84     FF 26 02 F6 | 	mov	local01, result3
17c88     0C 4E 05 F1 | 	add	fp, #12
17c8c     A7 FA 61 FC | 	wrlong	result1, fp
17c90     04 4E 05 F1 | 	add	fp, #4
17c94     A7 FC 61 FC | 	wrlong	result2, fp
17c98     04 4E 05 F1 | 	add	fp, #4
17c9c     A7 26 62 FC | 	wrlong	local01, fp
17ca0     08 4E 85 F1 | 	sub	fp, #8
17ca4     A7 12 02 F6 | 	mov	arg01, fp
17ca8     0C 4E 85 F1 | 	sub	fp, #12
17cac     B4 51 BF FD | 	call	#_converttoint
17cb0     FD 26 02 F6 | 	mov	local01, result1
17cb4     A7 12 02 F6 | 	mov	arg01, fp
17cb8     A8 51 BF FD | 	call	#_converttoint
17cbc     FD 14 02 F6 | 	mov	arg02, result1
17cc0     13 13 02 F6 | 	mov	arg01, local01
17cc4     1C BF B0 FD | 	call	#_hg010b_spin2_setcursorpos
17cc8     A7 F0 03 F6 | 	mov	ptra, fp
17ccc     B2 00 A0 FD | 	call	#popregs_
17cd0                 | _do_position_ret
17cd0     2D 00 64 FD | 	ret
17cd4                 | 
17cd4                 | ' 
17cd4                 | ' '-------------------- print
17cd4                 | ' 
17cd4                 | ' sub do_print  
17cd4                 | _do_print
17cd4     0B 4A 05 F6 | 	mov	COUNT_, #11
17cd8     A8 00 A0 FD | 	call	#pushregs_
17cdc     00 2C 06 F6 | 	mov	local04, #0
17ce0     9C 4F BF FD | 	call	#_pop
17ce4     FD 2E 02 F6 | 	mov	local05, result1
17ce8     FE 30 02 F6 | 	mov	local06, result2
17cec     FF 32 02 F6 | 	mov	local07, result3
17cf0     17 27 02 F6 | 	mov	local01, local05
17cf4     18 29 02 F6 | 	mov	local02, local06
17cf8     19 2B 02 F6 | 	mov	local03, local07
17cfc                 | '  
17cfc                 | ' r=0
17cfc                 | ' t1=pop() 
17cfc                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
17cfc     21 2A 0E F2 | 	cmp	local03, #33 wz
17d00     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
17d04     20 00 90 5D |  if_ne	jmp	#LR__1960
17d08     15 2D 02 F6 | 	mov	local04, local03
17d0c     70 4F BF FD | 	call	#_pop
17d10     FD 2E 02 F6 | 	mov	local05, result1
17d14     FE 30 02 F6 | 	mov	local06, result2
17d18     FF 32 02 F6 | 	mov	local07, result3
17d1c     17 27 02 F6 | 	mov	local01, local05
17d20     18 29 02 F6 | 	mov	local02, local06
17d24     19 2B 02 F6 | 	mov	local03, local07
17d28                 | LR__1960
17d28                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17d28     20 2A 0E F2 | 	cmp	local03, #32 wz
17d2c     15 2D 02 A6 |  if_e	mov	local04, local03
17d30                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
17d30     FF 2A 0E F2 | 	cmp	local03, #255 wz
17d34     10 00 90 5D |  if_ne	jmp	#LR__1961
17d38     13 13 02 F6 | 	mov	arg01, local01
17d3c     00 14 06 F6 | 	mov	arg02, #0
17d40     48 A2 B0 FD | 	call	#_printerror
17d44     D4 04 90 FD | 	jmp	#LR__1980
17d48                 | LR__1961
17d48                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
17d48     2B 2A 0E F2 | 	cmp	local03, #43 wz
17d4c     14 00 90 5D |  if_ne	jmp	#LR__1962
17d50     13 13 02 F6 | 	mov	arg01, local01
17d54     A0 50 BF FD | 	call	#_convertstring
17d58     FD 2E 02 F6 | 	mov	local05, result1
17d5c     17 27 02 F6 | 	mov	local01, local05
17d60     1F 2A 06 F6 | 	mov	local03, #31
17d64                 | LR__1962
17d64                 | ' 
17d64                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
17d64     2C 2A 0E F2 | 	cmp	local03, #44 wz
17d68     80 00 90 5D |  if_ne	jmp	#LR__1963
17d6c     00 12 06 F6 | 	mov	arg01, #0
17d70     2C 39 B1 FD | 	call	#__system___getiolock_0599
17d74     FD 12 02 F6 | 	mov	arg01, result1
17d78     FC DB B0 FD | 	call	#__system___lockmem
17d7c     AF 01 00 FF 
17d80     FB 14 06 F6 | 	mov	arg02, ##@LR__5910
17d84     00 12 06 F6 | 	mov	arg01, #0
17d88     00 16 06 F6 | 	mov	arg03, #0
17d8c     DC E8 B0 FD | 	call	#__system___basic_print_string
17d90     0A 34 06 F6 | 	mov	local08, #10
17d94     00 12 06 F6 | 	mov	arg01, #0
17d98     13 15 02 F6 | 	mov	arg02, local01
17d9c     00 16 06 F6 | 	mov	arg03, #0
17da0     0A 18 06 F6 | 	mov	arg04, #10
17da4     08 E9 B0 FD | 	call	#__system___basic_print_integer
17da8     FD 36 02 F6 | 	mov	local09, result1
17dac     00 12 06 F6 | 	mov	arg01, #0
17db0     0A 14 06 F6 | 	mov	arg02, #10
17db4     00 16 06 F6 | 	mov	arg03, #0
17db8     58 E8 B0 FD | 	call	#__system___basic_print_char
17dbc     01 38 06 F6 | 	mov	local10, #1
17dc0     00 12 06 F6 | 	mov	arg01, #0
17dc4     D8 38 B1 FD | 	call	#__system___getiolock_0599
17dc8     FD 00 68 FC | 	wrlong	#0, result1
17dcc     00 3A 06 F6 | 	mov	local11, #0
17dd0     AC 4E BF FD | 	call	#_pop
17dd4     FD 2E 02 F6 | 	mov	local05, result1
17dd8     FE 30 02 F6 | 	mov	local06, result2
17ddc     FF 32 02 F6 | 	mov	local07, result3
17de0     17 27 02 F6 | 	mov	local01, local05
17de4     18 29 02 F6 | 	mov	local02, local06
17de8     19 2B 02 F6 | 	mov	local03, local07
17dec                 | LR__1963
17dec                 | ' 
17dec                 | ' if r=print_mod_comma  then
17dec     21 2C 0E F2 | 	cmp	local04, #33 wz
17df0     AC 01 90 5D |  if_ne	jmp	#LR__1968
17df4                 | '   if t1.result_type=result_int then print t1.result.iresult,
17df4     1C 2A 0E F2 | 	cmp	local03, #28 wz
17df8     64 00 90 5D |  if_ne	jmp	#LR__1964
17dfc     00 12 06 F6 | 	mov	arg01, #0
17e00     9C 38 B1 FD | 	call	#__system___getiolock_0599
17e04     FD 12 02 F6 | 	mov	arg01, result1
17e08     6C DB B0 FD | 	call	#__system___lockmem
17e0c     00 30 06 F6 | 	mov	local06, #0
17e10     00 12 06 F6 | 	mov	arg01, #0
17e14     13 15 02 F6 | 	mov	arg02, local01
17e18     00 16 06 F6 | 	mov	arg03, #0
17e1c     0A 18 06 F6 | 	mov	arg04, #10
17e20     8C E8 B0 FD | 	call	#__system___basic_print_integer
17e24     FD 32 02 F6 | 	mov	local07, result1
17e28     18 2F 02 F6 | 	mov	local05, local06
17e2c     19 2F 02 F1 | 	add	local05, local07
17e30     00 3A 06 F6 | 	mov	local11, #0
17e34     00 12 06 F6 | 	mov	arg01, #0
17e38     09 14 06 F6 | 	mov	arg02, #9
17e3c     00 16 06 F6 | 	mov	arg03, #0
17e40     D0 E7 B0 FD | 	call	#__system___basic_print_char
17e44     FD 36 02 F6 | 	mov	local09, result1
17e48     FD 2E 02 F1 | 	add	local05, result1
17e4c     00 12 06 F6 | 	mov	arg01, #0
17e50     4C 38 B1 FD | 	call	#__system___getiolock_0599
17e54     FD 00 68 FC | 	wrlong	#0, result1
17e58     00 FA 05 F6 | 	mov	result1, #0
17e5c     00 38 06 F6 | 	mov	local10, #0
17e60                 | LR__1964
17e60                 | '   if t1.result_type=result_uint then print t1.result.uresult,
17e60     1D 2A 0E F2 | 	cmp	local03, #29 wz
17e64     64 00 90 5D |  if_ne	jmp	#LR__1965
17e68     00 12 06 F6 | 	mov	arg01, #0
17e6c     30 38 B1 FD | 	call	#__system___getiolock_0599
17e70     FD 12 02 F6 | 	mov	arg01, result1
17e74     00 DB B0 FD | 	call	#__system___lockmem
17e78     00 30 06 F6 | 	mov	local06, #0
17e7c     00 12 06 F6 | 	mov	arg01, #0
17e80     13 15 02 F6 | 	mov	arg02, local01
17e84     00 16 06 F6 | 	mov	arg03, #0
17e88     0A 18 06 F6 | 	mov	arg04, #10
17e8c     60 E8 B0 FD | 	call	#__system___basic_print_unsigned
17e90     FD 32 02 F6 | 	mov	local07, result1
17e94     18 2F 02 F6 | 	mov	local05, local06
17e98     19 2F 02 F1 | 	add	local05, local07
17e9c     00 3A 06 F6 | 	mov	local11, #0
17ea0     00 12 06 F6 | 	mov	arg01, #0
17ea4     09 14 06 F6 | 	mov	arg02, #9
17ea8     00 16 06 F6 | 	mov	arg03, #0
17eac     64 E7 B0 FD | 	call	#__system___basic_print_char
17eb0     FD 36 02 F6 | 	mov	local09, result1
17eb4     FD 2E 02 F1 | 	add	local05, result1
17eb8     00 12 06 F6 | 	mov	arg01, #0
17ebc     E0 37 B1 FD | 	call	#__system___getiolock_0599
17ec0     FD 00 68 FC | 	wrlong	#0, result1
17ec4     00 FA 05 F6 | 	mov	result1, #0
17ec8     00 38 06 F6 | 	mov	local10, #0
17ecc                 | LR__1965
17ecc                 | '   if t1.result_type=result_float then print t1.result.fresult,
17ecc     1E 2A 0E F2 | 	cmp	local03, #30 wz
17ed0     64 00 90 5D |  if_ne	jmp	#LR__1966
17ed4     00 12 06 F6 | 	mov	arg01, #0
17ed8     C4 37 B1 FD | 	call	#__system___getiolock_0599
17edc     FD 12 02 F6 | 	mov	arg01, result1
17ee0     94 DA B0 FD | 	call	#__system___lockmem
17ee4     00 30 06 F6 | 	mov	local06, #0
17ee8     00 12 06 F6 | 	mov	arg01, #0
17eec     13 15 02 F6 | 	mov	arg02, local01
17ef0     00 16 06 F6 | 	mov	arg03, #0
17ef4     23 18 06 F6 | 	mov	arg04, #35
17ef8     0C 0F B1 FD | 	call	#__system___basic_print_float
17efc     FD 32 02 F6 | 	mov	local07, result1
17f00     18 2F 02 F6 | 	mov	local05, local06
17f04     19 2F 02 F1 | 	add	local05, local07
17f08     00 3A 06 F6 | 	mov	local11, #0
17f0c     00 12 06 F6 | 	mov	arg01, #0
17f10     09 14 06 F6 | 	mov	arg02, #9
17f14     00 16 06 F6 | 	mov	arg03, #0
17f18     F8 E6 B0 FD | 	call	#__system___basic_print_char
17f1c     FD 36 02 F6 | 	mov	local09, result1
17f20     FD 2E 02 F1 | 	add	local05, result1
17f24     00 12 06 F6 | 	mov	arg01, #0
17f28     74 37 B1 FD | 	call	#__system___getiolock_0599
17f2c     FD 00 68 FC | 	wrlong	#0, result1
17f30     00 FA 05 F6 | 	mov	result1, #0
17f34     00 38 06 F6 | 	mov	local10, #0
17f38                 | LR__1966
17f38                 | '   if t1.result_type=result_string then print t1.result.sresult,
17f38     1F 2A 0E F2 | 	cmp	local03, #31 wz
17f3c     60 00 90 5D |  if_ne	jmp	#LR__1967
17f40     00 12 06 F6 | 	mov	arg01, #0
17f44     58 37 B1 FD | 	call	#__system___getiolock_0599
17f48     FD 12 02 F6 | 	mov	arg01, result1
17f4c     28 DA B0 FD | 	call	#__system___lockmem
17f50     00 30 06 F6 | 	mov	local06, #0
17f54     00 12 06 F6 | 	mov	arg01, #0
17f58     13 15 02 F6 | 	mov	arg02, local01
17f5c     00 16 06 F6 | 	mov	arg03, #0
17f60     08 E7 B0 FD | 	call	#__system___basic_print_string
17f64     FD 32 02 F6 | 	mov	local07, result1
17f68     18 2F 02 F6 | 	mov	local05, local06
17f6c     19 2F 02 F1 | 	add	local05, local07
17f70     00 3A 06 F6 | 	mov	local11, #0
17f74     00 12 06 F6 | 	mov	arg01, #0
17f78     09 14 06 F6 | 	mov	arg02, #9
17f7c     00 16 06 F6 | 	mov	arg03, #0
17f80     90 E6 B0 FD | 	call	#__system___basic_print_char
17f84     FD 36 02 F6 | 	mov	local09, result1
17f88     FD 2E 02 F1 | 	add	local05, result1
17f8c     00 12 06 F6 | 	mov	arg01, #0
17f90     0C 37 B1 FD | 	call	#__system___getiolock_0599
17f94     FD 00 68 FC | 	wrlong	#0, result1
17f98     00 FA 05 F6 | 	mov	result1, #0
17f9c     00 38 06 F6 | 	mov	local10, #0
17fa0                 | LR__1967
17fa0                 | LR__1968
17fa0                 | ' if r=print_mod_semicolon then 
17fa0     22 2C 0E F2 | 	cmp	local04, #34 wz
17fa4     1C 01 90 5D |  if_ne	jmp	#LR__1973
17fa8                 | '   if t1.result_type=result_int then print t1.result.iresult;
17fa8     1C 2A 0E F2 | 	cmp	local03, #28 wz
17fac     50 00 90 5D |  if_ne	jmp	#LR__1969
17fb0     00 12 06 F6 | 	mov	arg01, #0
17fb4     E8 36 B1 FD | 	call	#__system___getiolock_0599
17fb8     FD 12 02 F6 | 	mov	arg01, result1
17fbc     B8 D9 B0 FD | 	call	#__system___lockmem
17fc0     00 30 06 F6 | 	mov	local06, #0
17fc4     00 38 06 F6 | 	mov	local10, #0
17fc8     0A 3A 06 F6 | 	mov	local11, #10
17fcc     00 12 06 F6 | 	mov	arg01, #0
17fd0     13 15 02 F6 | 	mov	arg02, local01
17fd4     00 16 06 F6 | 	mov	arg03, #0
17fd8     0A 18 06 F6 | 	mov	arg04, #10
17fdc     D0 E6 B0 FD | 	call	#__system___basic_print_integer
17fe0     FD 32 02 F6 | 	mov	local07, result1
17fe4     18 2F 02 F6 | 	mov	local05, local06
17fe8     19 2F 02 F1 | 	add	local05, local07
17fec     00 12 06 F6 | 	mov	arg01, #0
17ff0     AC 36 B1 FD | 	call	#__system___getiolock_0599
17ff4     FD 00 68 FC | 	wrlong	#0, result1
17ff8     00 FA 05 F6 | 	mov	result1, #0
17ffc     00 36 06 F6 | 	mov	local09, #0
18000                 | LR__1969
18000                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18000     1D 2A 0E F2 | 	cmp	local03, #29 wz
18004     50 00 90 5D |  if_ne	jmp	#LR__1970
18008     00 12 06 F6 | 	mov	arg01, #0
1800c     90 36 B1 FD | 	call	#__system___getiolock_0599
18010     FD 12 02 F6 | 	mov	arg01, result1
18014     60 D9 B0 FD | 	call	#__system___lockmem
18018     00 30 06 F6 | 	mov	local06, #0
1801c     00 38 06 F6 | 	mov	local10, #0
18020     0A 3A 06 F6 | 	mov	local11, #10
18024     00 12 06 F6 | 	mov	arg01, #0
18028     13 15 02 F6 | 	mov	arg02, local01
1802c     00 16 06 F6 | 	mov	arg03, #0
18030     0A 18 06 F6 | 	mov	arg04, #10
18034     B8 E6 B0 FD | 	call	#__system___basic_print_unsigned
18038     FD 32 02 F6 | 	mov	local07, result1
1803c     18 2F 02 F6 | 	mov	local05, local06
18040     19 2F 02 F1 | 	add	local05, local07
18044     00 12 06 F6 | 	mov	arg01, #0
18048     54 36 B1 FD | 	call	#__system___getiolock_0599
1804c     FD 00 68 FC | 	wrlong	#0, result1
18050     00 FA 05 F6 | 	mov	result1, #0
18054     00 36 06 F6 | 	mov	local09, #0
18058                 | LR__1970
18058                 | '   if t1.result_type=result_float then print t1.result.fresult;
18058     1E 2A 0E F2 | 	cmp	local03, #30 wz
1805c     30 00 90 5D |  if_ne	jmp	#LR__1971
18060     00 12 06 F6 | 	mov	arg01, #0
18064     38 36 B1 FD | 	call	#__system___getiolock_0599
18068     FD 12 02 F6 | 	mov	arg01, result1
1806c     08 D9 B0 FD | 	call	#__system___lockmem
18070     00 12 06 F6 | 	mov	arg01, #0
18074     13 15 02 F6 | 	mov	arg02, local01
18078     00 16 06 F6 | 	mov	arg03, #0
1807c     23 18 06 F6 | 	mov	arg04, #35
18080     84 0D B1 FD | 	call	#__system___basic_print_float
18084     00 12 06 F6 | 	mov	arg01, #0
18088     14 36 B1 FD | 	call	#__system___getiolock_0599
1808c     FD 00 68 FC | 	wrlong	#0, result1
18090                 | LR__1971
18090                 | '   if t1.result_type=result_string then print t1.result.sresult;
18090     1F 2A 0E F2 | 	cmp	local03, #31 wz
18094     2C 00 90 5D |  if_ne	jmp	#LR__1972
18098     00 12 06 F6 | 	mov	arg01, #0
1809c     00 36 B1 FD | 	call	#__system___getiolock_0599
180a0     FD 12 02 F6 | 	mov	arg01, result1
180a4     D0 D8 B0 FD | 	call	#__system___lockmem
180a8     00 12 06 F6 | 	mov	arg01, #0
180ac     13 15 02 F6 | 	mov	arg02, local01
180b0     00 16 06 F6 | 	mov	arg03, #0
180b4     B4 E5 B0 FD | 	call	#__system___basic_print_string
180b8     00 12 06 F6 | 	mov	arg01, #0
180bc     E0 35 B1 FD | 	call	#__system___getiolock_0599
180c0     FD 00 68 FC | 	wrlong	#0, result1
180c4                 | LR__1972
180c4                 | LR__1973
180c4                 | ' if r=0 then 
180c4     00 2C 0E F2 | 	cmp	local04, #0 wz
180c8     1C 01 90 5D |  if_ne	jmp	#LR__1978
180cc                 | '   if t1.result_type=result_int then print t1.result.iresult
180cc     1C 2A 0E F2 | 	cmp	local03, #28 wz
180d0     40 00 90 5D |  if_ne	jmp	#LR__1974
180d4     00 12 06 F6 | 	mov	arg01, #0
180d8     C4 35 B1 FD | 	call	#__system___getiolock_0599
180dc     FD 12 02 F6 | 	mov	arg01, result1
180e0     94 D8 B0 FD | 	call	#__system___lockmem
180e4     00 12 06 F6 | 	mov	arg01, #0
180e8     13 15 02 F6 | 	mov	arg02, local01
180ec     00 16 06 F6 | 	mov	arg03, #0
180f0     0A 18 06 F6 | 	mov	arg04, #10
180f4     B8 E5 B0 FD | 	call	#__system___basic_print_integer
180f8     00 12 06 F6 | 	mov	arg01, #0
180fc     0A 14 06 F6 | 	mov	arg02, #10
18100     00 16 06 F6 | 	mov	arg03, #0
18104     0C E5 B0 FD | 	call	#__system___basic_print_char
18108     00 12 06 F6 | 	mov	arg01, #0
1810c     90 35 B1 FD | 	call	#__system___getiolock_0599
18110     FD 00 68 FC | 	wrlong	#0, result1
18114                 | LR__1974
18114                 | '   if t1.result_type=result_uint then print t1.result.uresult
18114     1D 2A 0E F2 | 	cmp	local03, #29 wz
18118     40 00 90 5D |  if_ne	jmp	#LR__1975
1811c     00 12 06 F6 | 	mov	arg01, #0
18120     7C 35 B1 FD | 	call	#__system___getiolock_0599
18124     FD 12 02 F6 | 	mov	arg01, result1
18128     4C D8 B0 FD | 	call	#__system___lockmem
1812c     00 12 06 F6 | 	mov	arg01, #0
18130     13 15 02 F6 | 	mov	arg02, local01
18134     00 16 06 F6 | 	mov	arg03, #0
18138     0A 18 06 F6 | 	mov	arg04, #10
1813c     B0 E5 B0 FD | 	call	#__system___basic_print_unsigned
18140     00 12 06 F6 | 	mov	arg01, #0
18144     0A 14 06 F6 | 	mov	arg02, #10
18148     00 16 06 F6 | 	mov	arg03, #0
1814c     C4 E4 B0 FD | 	call	#__system___basic_print_char
18150     00 12 06 F6 | 	mov	arg01, #0
18154     48 35 B1 FD | 	call	#__system___getiolock_0599
18158     FD 00 68 FC | 	wrlong	#0, result1
1815c                 | LR__1975
1815c                 | '   if t1.result_type=result_float then print t1.result.fresult
1815c     1E 2A 0E F2 | 	cmp	local03, #30 wz
18160     40 00 90 5D |  if_ne	jmp	#LR__1976
18164     00 12 06 F6 | 	mov	arg01, #0
18168     34 35 B1 FD | 	call	#__system___getiolock_0599
1816c     FD 12 02 F6 | 	mov	arg01, result1
18170     04 D8 B0 FD | 	call	#__system___lockmem
18174     00 12 06 F6 | 	mov	arg01, #0
18178     13 15 02 F6 | 	mov	arg02, local01
1817c     00 16 06 F6 | 	mov	arg03, #0
18180     23 18 06 F6 | 	mov	arg04, #35
18184     80 0C B1 FD | 	call	#__system___basic_print_float
18188     00 12 06 F6 | 	mov	arg01, #0
1818c     0A 14 06 F6 | 	mov	arg02, #10
18190     00 16 06 F6 | 	mov	arg03, #0
18194     7C E4 B0 FD | 	call	#__system___basic_print_char
18198     00 12 06 F6 | 	mov	arg01, #0
1819c     00 35 B1 FD | 	call	#__system___getiolock_0599
181a0     FD 00 68 FC | 	wrlong	#0, result1
181a4                 | LR__1976
181a4                 | '   if t1.result_type=result_string then print t1.result.sresult
181a4     1F 2A 0E F2 | 	cmp	local03, #31 wz
181a8     3C 00 90 5D |  if_ne	jmp	#LR__1977
181ac     00 12 06 F6 | 	mov	arg01, #0
181b0     EC 34 B1 FD | 	call	#__system___getiolock_0599
181b4     FD 12 02 F6 | 	mov	arg01, result1
181b8     BC D7 B0 FD | 	call	#__system___lockmem
181bc     00 12 06 F6 | 	mov	arg01, #0
181c0     13 15 02 F6 | 	mov	arg02, local01
181c4     00 16 06 F6 | 	mov	arg03, #0
181c8     A0 E4 B0 FD | 	call	#__system___basic_print_string
181cc     00 12 06 F6 | 	mov	arg01, #0
181d0     0A 14 06 F6 | 	mov	arg02, #10
181d4     00 16 06 F6 | 	mov	arg03, #0
181d8     38 E4 B0 FD | 	call	#__system___basic_print_char
181dc     00 12 06 F6 | 	mov	arg01, #0
181e0     BC 34 B1 FD | 	call	#__system___getiolock_0599
181e4     FD 00 68 FC | 	wrlong	#0, result1
181e8                 | LR__1977
181e8                 | LR__1978
181e8                 | ' if r=print_mod_empty then print
181e8     20 2C 0E F2 | 	cmp	local04, #32 wz
181ec     2C 00 90 5D |  if_ne	jmp	#LR__1979
181f0     00 12 06 F6 | 	mov	arg01, #0
181f4     A8 34 B1 FD | 	call	#__system___getiolock_0599
181f8     FD 12 02 F6 | 	mov	arg01, result1
181fc     78 D7 B0 FD | 	call	#__system___lockmem
18200     00 12 06 F6 | 	mov	arg01, #0
18204     0A 14 06 F6 | 	mov	arg02, #10
18208     00 16 06 F6 | 	mov	arg03, #0
1820c     04 E4 B0 FD | 	call	#__system___basic_print_char
18210     00 12 06 F6 | 	mov	arg01, #0
18214     88 34 B1 FD | 	call	#__system___getiolock_0599
18218     FD 00 68 FC | 	wrlong	#0, result1
1821c                 | LR__1979
1821c                 | LR__1980
1821c     A7 F0 03 F6 | 	mov	ptra, fp
18220     B2 00 A0 FD | 	call	#popregs_
18224                 | _do_print_ret
18224     2D 00 64 FD | 	ret
18228                 | 
18228                 | ' 
18228                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
18228                 | ' 
18228                 | ' sub do_push
18228                 | _do_push
18228                 | ' if stackpointer<maxstack then 
18228     43 00 00 FF 
1822c     58 E4 05 F1 | 	add	objptr, ##34392
18230     F2 00 02 FB | 	rdlong	_var01, objptr
18234     43 00 00 FF 
18238     58 E4 85 F1 | 	sub	objptr, ##34392
1823c     01 00 00 FF 
18240     00 00 56 F2 | 	cmps	_var01, ##512 wc
18244     F8 00 90 3D |  if_ae	jmp	#LR__1990
18248     4A 00 00 FF 
1824c     80 E4 05 F1 | 	add	objptr, ##38016
18250     F2 02 02 FB | 	rdlong	_var02, objptr
18254     01 05 02 F6 | 	mov	_var03, _var02
18258     01 04 66 F0 | 	shl	_var03, #1
1825c     01 05 02 F1 | 	add	_var03, _var02
18260     02 04 66 F0 | 	shl	_var03, #2
18264     03 00 00 FF 
18268     04 E4 85 F1 | 	sub	objptr, ##1540
1826c     F2 04 02 F1 | 	add	_var03, objptr
18270     02 01 02 FB | 	rdlong	_var01, _var03
18274     04 04 06 F1 | 	add	_var03, #4
18278     02 07 02 FB | 	rdlong	_var04, _var03
1827c     01 05 02 F6 | 	mov	_var03, _var02
18280     01 04 66 F0 | 	shl	_var03, #1
18284     01 05 02 F1 | 	add	_var03, _var02
18288     02 04 66 F0 | 	shl	_var03, #2
1828c     F2 04 02 F1 | 	add	_var03, objptr
18290     08 04 06 F1 | 	add	_var03, #8
18294     02 03 02 FB | 	rdlong	_var02, _var03
18298     04 00 00 FF 
1829c     24 E4 85 F1 | 	sub	objptr, ##2084
182a0     F2 04 02 FB | 	rdlong	_var03, objptr
182a4     02 09 02 F6 | 	mov	_var05, _var03
182a8     01 08 66 F0 | 	shl	_var05, #1
182ac     02 09 02 F1 | 	add	_var05, _var03
182b0     02 08 66 F0 | 	shl	_var05, #2
182b4     0C 00 00 FF 
182b8     0C E4 85 F1 | 	sub	objptr, ##6156
182bc     F2 08 02 F1 | 	add	_var05, objptr
182c0     04 01 62 FC | 	wrlong	_var01, _var05
182c4     0C 00 00 FF 
182c8     0C E4 05 F1 | 	add	objptr, ##6156
182cc     F2 08 02 FB | 	rdlong	_var05, objptr
182d0     04 05 02 F6 | 	mov	_var03, _var05
182d4     01 04 66 F0 | 	shl	_var03, #1
182d8     04 05 02 F1 | 	add	_var03, _var05
182dc     02 04 66 F0 | 	shl	_var03, #2
182e0     0C 00 00 FF 
182e4     0C E4 85 F1 | 	sub	objptr, ##6156
182e8     F2 04 02 F1 | 	add	_var03, objptr
182ec     04 04 06 F1 | 	add	_var03, #4
182f0     02 07 62 FC | 	wrlong	_var04, _var03
182f4     0C 00 00 FF 
182f8     0C E4 05 F1 | 	add	objptr, ##6156
182fc     F2 08 02 FB | 	rdlong	_var05, objptr
18300     04 07 02 F6 | 	mov	_var04, _var05
18304     01 06 66 F0 | 	shl	_var04, #1
18308     04 07 02 F1 | 	add	_var04, _var05
1830c     02 06 66 F0 | 	shl	_var04, #2
18310     0C 00 00 FF 
18314     0C E4 85 F1 | 	sub	objptr, ##6156
18318     F2 06 02 F1 | 	add	_var04, objptr
1831c     08 06 06 F1 | 	add	_var04, #8
18320     03 03 62 FC | 	wrlong	_var02, _var04
18324     0C 00 00 FF 
18328     0C E4 05 F1 | 	add	objptr, ##6156
1832c     F2 00 02 FB | 	rdlong	_var01, objptr
18330     01 00 06 F1 | 	add	_var01, #1
18334     F2 00 62 FC | 	wrlong	_var01, objptr
18338     43 00 00 FF 
1833c     58 E4 85 F1 | 	sub	objptr, ##34392
18340                 | LR__1990
18340                 | _do_push_ret
18340     2D 00 64 FD | 	ret
18344                 | 
18344                 | ' 
18344                 | ' '-------------------- put
18344                 | ' 
18344                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
18344                 | _do_put
18344     03 4A 05 F6 | 	mov	COUNT_, #3
18348     A8 00 A0 FD | 	call	#pushregs_
1834c     28 F0 07 F1 | 	add	ptra, #40
18350     4A 00 00 FF 
18354     80 E4 05 F1 | 	add	objptr, ##38016
18358     F2 1A 02 FB | 	rdlong	arg05, objptr
1835c     0D 19 02 F6 | 	mov	arg04, arg05
18360     01 18 66 F0 | 	shl	arg04, #1
18364     0D 19 02 F1 | 	add	arg04, arg05
18368     02 18 66 F0 | 	shl	arg04, #2
1836c     03 00 00 FF 
18370     04 E4 85 F1 | 	sub	objptr, ##1540
18374     F2 18 02 F1 | 	add	arg04, objptr
18378     0C 1B 02 FB | 	rdlong	arg05, arg04
1837c     A7 1A 62 FC | 	wrlong	arg05, fp
18380                 | ' 
18380                 | ' numpar=compiledline(lineptr_e).result.uresult
18380                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
18380     04 1A 0E F2 | 	cmp	arg05, #4 wz
18384     47 00 00 FF 
18388     7C E4 85 F1 | 	sub	objptr, ##36476
1838c     48 00 90 5D |  if_ne	jmp	#LR__2000
18390     EC 48 BF FD | 	call	#_pop
18394     FF 1A 02 F6 | 	mov	arg05, result3
18398     1C 4E 05 F1 | 	add	fp, #28
1839c     A7 FA 61 FC | 	wrlong	result1, fp
183a0     04 4E 05 F1 | 	add	fp, #4
183a4     A7 FC 61 FC | 	wrlong	result2, fp
183a8     04 4E 05 F1 | 	add	fp, #4
183ac     A7 1A 62 FC | 	wrlong	arg05, fp
183b0     08 4E 85 F1 | 	sub	fp, #8
183b4     A7 12 02 F6 | 	mov	arg01, fp
183b8     1C 4E 85 F1 | 	sub	fp, #28
183bc     A4 4A BF FD | 	call	#_converttoint
183c0     52 00 00 FF 
183c4     B8 E4 05 F1 | 	add	objptr, ##42168
183c8     F2 FA 61 FC | 	wrlong	result1, objptr
183cc     52 00 00 FF 
183d0     B8 E4 85 F1 | 	sub	objptr, ##42168
183d4     18 00 90 FD | 	jmp	#LR__2001
183d8                 | LR__2000
183d8     52 00 00 FF 
183dc     B8 E4 05 F1 | 	add	objptr, ##42168
183e0     FF FF FF FF 
183e4     F2 FE 6B FC | 	wrlong	##-1, objptr
183e8     52 00 00 FF 
183ec     B8 E4 85 F1 | 	sub	objptr, ##42168
183f0                 | LR__2001
183f0                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
183f0     A7 1A 02 FB | 	rdlong	arg05, fp
183f4     03 1A 56 F2 | 	cmps	arg05, #3 wc
183f8     40 00 90 CD |  if_b	jmp	#LR__2002
183fc     80 48 BF FD | 	call	#_pop
18400     FF 1A 02 F6 | 	mov	arg05, result3
18404     1C 4E 05 F1 | 	add	fp, #28
18408     A7 FA 61 FC | 	wrlong	result1, fp
1840c     04 4E 05 F1 | 	add	fp, #4
18410     A7 FC 61 FC | 	wrlong	result2, fp
18414     04 4E 05 F1 | 	add	fp, #4
18418     A7 1A 62 FC | 	wrlong	arg05, fp
1841c     08 4E 85 F1 | 	sub	fp, #8
18420     A7 12 02 F6 | 	mov	arg01, fp
18424     1C 4E 85 F1 | 	sub	fp, #28
18428     38 4A BF FD | 	call	#_converttoint
1842c     08 4E 05 F1 | 	add	fp, #8
18430     A7 FA 61 FC | 	wrlong	result1, fp
18434     08 4E 85 F1 | 	sub	fp, #8
18438     0C 00 90 FD | 	jmp	#LR__2003
1843c                 | LR__2002
1843c     08 4E 05 F1 | 	add	fp, #8
18440     A7 02 68 FC | 	wrlong	#1, fp
18444     08 4E 85 F1 | 	sub	fp, #8
18448                 | LR__2003
18448                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
18448     A7 18 02 FB | 	rdlong	arg04, fp
1844c     02 18 56 F2 | 	cmps	arg04, #2 wc
18450     3C 00 90 CD |  if_b	jmp	#LR__2004
18454     28 48 BF FD | 	call	#_pop
18458     FF 18 02 F6 | 	mov	arg04, result3
1845c     1C 4E 05 F1 | 	add	fp, #28
18460     A7 FA 61 FC | 	wrlong	result1, fp
18464     04 4E 05 F1 | 	add	fp, #4
18468     A7 FC 61 FC | 	wrlong	result2, fp
1846c     04 4E 05 F1 | 	add	fp, #4
18470     A7 18 62 FC | 	wrlong	arg04, fp
18474     08 4E 85 F1 | 	sub	fp, #8
18478     A7 12 02 F6 | 	mov	arg01, fp
1847c     1C 4E 85 F1 | 	sub	fp, #28
18480     E0 49 BF FD | 	call	#_converttoint
18484     0C 4E 05 F1 | 	add	fp, #12
18488     A7 FA 61 FC | 	wrlong	result1, fp
1848c     0C 4E 85 F1 | 	sub	fp, #12
18490                 | LR__2004
18490     EC 47 BF FD | 	call	#_pop
18494     FF 18 02 F6 | 	mov	arg04, result3
18498     1C 4E 05 F1 | 	add	fp, #28
1849c     A7 FA 61 FC | 	wrlong	result1, fp
184a0     04 4E 05 F1 | 	add	fp, #4
184a4     A7 FC 61 FC | 	wrlong	result2, fp
184a8     04 4E 05 F1 | 	add	fp, #4
184ac     A7 18 62 FC | 	wrlong	arg04, fp
184b0     08 4E 85 F1 | 	sub	fp, #8
184b4     A7 12 02 F6 | 	mov	arg01, fp
184b8     1C 4E 85 F1 | 	sub	fp, #28
184bc     A4 49 BF FD | 	call	#_converttoint
184c0     04 4E 05 F1 | 	add	fp, #4
184c4     A7 FA 61 FC | 	wrlong	result1, fp
184c8     10 4E 05 F1 | 	add	fp, #16
184cc     A7 26 02 FB | 	rdlong	local01, fp
184d0     14 4E 85 F1 | 	sub	fp, #20
184d4     02 26 66 F0 | 	shl	local01, #2
184d8     50 00 00 FF 
184dc     C4 E4 05 F1 | 	add	objptr, ##41156
184e0     F2 26 02 F1 | 	add	local01, objptr
184e4     13 01 68 FC | 	wrlong	#0, local01
184e8                 | ' t1=pop() : channel=converttoint(t1)
184e8                 | ' getres(j)=0
184e8                 | ' if pos>=0 then
184e8     01 00 00 FF 
184ec     F4 E5 05 F1 | 	add	objptr, ##1012
184f0     F2 28 02 FB | 	rdlong	local02, objptr
184f4     52 00 00 FF 
184f8     B8 E4 85 F1 | 	sub	objptr, ##42168
184fc     00 28 56 F2 | 	cmps	local02, #0 wc
18500     C0 01 90 CD |  if_b	jmp	#LR__2010
18504     10 4E 05 F1 | 	add	fp, #16
18508     A7 00 68 FC | 	wrlong	#0, fp
1850c     10 4E 85 F1 | 	sub	fp, #16
18510                 | '    i=0: do
18510                 | LR__2005
18510     14 4E 05 F1 | 	add	fp, #20
18514     A7 00 68 FC | 	wrlong	#0, fp
18518     14 4E 85 F1 | 	sub	fp, #20
1851c                 | '    j=0: do    
1851c                 | LR__2006
1851c                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1851c     0C 4E 05 F1 | 	add	fp, #12
18520     A7 28 02 FB | 	rdlong	local02, fp
18524     0C 4E 85 F1 | 	sub	fp, #12
18528     00 04 00 FF 
1852c     00 28 56 F2 | 	cmps	local02, ##524288 wc
18530     4C 00 90 3D |  if_ae	jmp	#LR__2007
18534     14 4E 05 F1 | 	add	fp, #20
18538     A7 28 02 FB | 	rdlong	local02, fp
1853c     14 27 02 F6 | 	mov	local01, local02
18540     4E 00 00 FF 
18544     B4 E4 05 F1 | 	add	objptr, ##40116
18548     F2 26 02 F1 | 	add	local01, objptr
1854c     08 4E 85 F1 | 	sub	fp, #8
18550     A7 12 02 FB | 	rdlong	arg01, fp
18554     04 4E 05 F1 | 	add	fp, #4
18558     A7 18 02 FB | 	rdlong	arg04, fp
1855c     0A 18 66 F0 | 	shl	arg04, #10
18560     0C 13 02 F1 | 	add	arg01, arg04
18564     10 4E 85 F1 | 	sub	fp, #16
18568     14 13 02 F1 | 	add	arg01, local02
1856c     09 FB C1 FA | 	rdbyte	result1, arg01
18570     4E 00 00 FF 
18574     B4 E4 85 F1 | 	sub	objptr, ##40116
18578     13 FB 41 FC | 	wrbyte	result1, local01
1857c     48 00 90 FD | 	jmp	#LR__2008
18580                 | LR__2007
18580     14 4E 05 F1 | 	add	fp, #20
18584     A7 28 02 FB | 	rdlong	local02, fp
18588     14 27 02 F6 | 	mov	local01, local02
1858c     4E 00 00 FF 
18590     B4 E4 05 F1 | 	add	objptr, ##40116
18594     F2 26 02 F1 | 	add	local01, objptr
18598     08 4E 85 F1 | 	sub	fp, #8
1859c     A7 12 02 FB | 	rdlong	arg01, fp
185a0     04 4E 05 F1 | 	add	fp, #4
185a4     A7 18 02 FB | 	rdlong	arg04, fp
185a8     0A 18 66 F0 | 	shl	arg04, #10
185ac     0C 13 02 F1 | 	add	arg01, arg04
185b0     10 4E 85 F1 | 	sub	fp, #16
185b4     14 13 02 F1 | 	add	arg01, local02
185b8     4E 00 00 FF 
185bc     B4 E4 85 F1 | 	sub	objptr, ##40116
185c0     40 9C B0 FD | 	call	#_pspeek
185c4     13 FB 41 FC | 	wrbyte	result1, local01
185c8                 | LR__2008
185c8     14 4E 05 F1 | 	add	fp, #20
185cc     A7 28 02 FB | 	rdlong	local02, fp
185d0     01 28 06 F1 | 	add	local02, #1
185d4     A7 28 62 FC | 	wrlong	local02, fp
185d8     14 4E 85 F1 | 	sub	fp, #20
185dc     02 00 00 FF 
185e0     00 28 56 F2 | 	cmps	local02, ##1024 wc
185e4     2C 00 90 3D |  if_ae	jmp	#LR__2009
185e8     10 4E 05 F1 | 	add	fp, #16
185ec     A7 26 02 FB | 	rdlong	local01, fp
185f0     0A 26 66 F0 | 	shl	local01, #10
185f4     04 4E 05 F1 | 	add	fp, #4
185f8     A7 28 02 FB | 	rdlong	local02, fp
185fc     14 27 02 F1 | 	add	local01, local02
18600     0C 4E 85 F1 | 	sub	fp, #12
18604     A7 28 02 FB | 	rdlong	local02, fp
18608     08 4E 85 F1 | 	sub	fp, #8
1860c     14 27 5A F2 | 	cmps	local01, local02 wcz
18610     08 FF 9F ED |  if_be	jmp	#LR__2006
18614                 | LR__2009
18614                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
18614     04 4E 05 F1 | 	add	fp, #4
18618     A7 12 02 FB | 	rdlong	arg01, fp
1861c     52 00 00 FF 
18620     B8 E4 05 F1 | 	add	objptr, ##42168
18624     F2 14 02 FB | 	rdlong	arg02, objptr
18628     01 14 06 F1 | 	add	arg02, #1
1862c     04 00 00 FF 
18630     04 E4 85 F1 | 	sub	objptr, ##2052
18634     F2 16 02 F6 | 	mov	arg03, objptr
18638     4E 00 00 FF 
1863c     B4 E4 85 F1 | 	sub	objptr, ##40116
18640     04 4E 05 F1 | 	add	fp, #4
18644     A7 18 02 FB | 	rdlong	arg04, fp
18648     08 4E 85 F1 | 	sub	fp, #8
1864c     01 1A 06 F6 | 	mov	arg05, #1
18650     28 E1 B0 FD | 	call	#__system___basic_put
18654     18 4E 05 F1 | 	add	fp, #24
18658     A7 FA 61 FC | 	wrlong	result1, fp
1865c     14 4E 85 F1 | 	sub	fp, #20
18660     A7 26 02 FB | 	rdlong	local01, fp
18664     02 26 66 F0 | 	shl	local01, #2
18668     50 00 00 FF 
1866c     C4 E4 05 F1 | 	add	objptr, ##41156
18670     F2 26 02 F1 | 	add	local01, objptr
18674     13 FB 61 FC | 	wrlong	result1, local01
18678                 | '    if 1024*i+j>amount then exit loop
18678     0C 4E 05 F1 | 	add	fp, #12
1867c     A7 28 02 FB | 	rdlong	local02, fp
18680     0A 28 66 F0 | 	shl	local02, #10
18684     04 4E 05 F1 | 	add	fp, #4
18688     A7 26 02 FB | 	rdlong	local01, fp
1868c     13 29 02 F1 | 	add	local02, local01
18690     0C 4E 85 F1 | 	sub	fp, #12
18694     A7 26 02 FB | 	rdlong	local01, fp
18698     08 4E 85 F1 | 	sub	fp, #8
1869c     13 29 5A F2 | 	cmps	local02, local01 wcz
186a0     50 00 00 FF 
186a4     C4 E4 85 F1 | 	sub	objptr, ##41156
186a8     CC 01 90 1D |  if_a	jmp	#LR__2017
186ac     10 4E 05 F1 | 	add	fp, #16
186b0     A7 28 02 FB | 	rdlong	local02, fp
186b4     01 28 06 F1 | 	add	local02, #1
186b8     A7 28 62 FC | 	wrlong	local02, fp
186bc     10 4E 85 F1 | 	sub	fp, #16
186c0     4C FE 9F FD | 	jmp	#LR__2005
186c4                 | LR__2010
186c4     10 4E 05 F1 | 	add	fp, #16
186c8     A7 00 68 FC | 	wrlong	#0, fp
186cc     10 4E 85 F1 | 	sub	fp, #16
186d0                 | '    i=0: do
186d0                 | LR__2011
186d0     14 4E 05 F1 | 	add	fp, #20
186d4     A7 00 68 FC | 	wrlong	#0, fp
186d8     14 4E 85 F1 | 	sub	fp, #20
186dc                 | '    j=0: do  
186dc                 | LR__2012
186dc                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
186dc     0C 4E 05 F1 | 	add	fp, #12
186e0     A7 28 02 FB | 	rdlong	local02, fp
186e4     0C 4E 85 F1 | 	sub	fp, #12
186e8     00 04 00 FF 
186ec     00 28 56 F2 | 	cmps	local02, ##524288 wc
186f0     4C 00 90 3D |  if_ae	jmp	#LR__2013
186f4     14 4E 05 F1 | 	add	fp, #20
186f8     A7 28 02 FB | 	rdlong	local02, fp
186fc     14 27 02 F6 | 	mov	local01, local02
18700     4E 00 00 FF 
18704     B4 E4 05 F1 | 	add	objptr, ##40116
18708     F2 26 02 F1 | 	add	local01, objptr
1870c     08 4E 85 F1 | 	sub	fp, #8
18710     A7 12 02 FB | 	rdlong	arg01, fp
18714     04 4E 05 F1 | 	add	fp, #4
18718     A7 18 02 FB | 	rdlong	arg04, fp
1871c     0A 18 66 F0 | 	shl	arg04, #10
18720     0C 13 02 F1 | 	add	arg01, arg04
18724     10 4E 85 F1 | 	sub	fp, #16
18728     14 13 02 F1 | 	add	arg01, local02
1872c     09 FB C1 FA | 	rdbyte	result1, arg01
18730     4E 00 00 FF 
18734     B4 E4 85 F1 | 	sub	objptr, ##40116
18738     13 FB 41 FC | 	wrbyte	result1, local01
1873c     48 00 90 FD | 	jmp	#LR__2014
18740                 | LR__2013
18740     14 4E 05 F1 | 	add	fp, #20
18744     A7 28 02 FB | 	rdlong	local02, fp
18748     14 27 02 F6 | 	mov	local01, local02
1874c     4E 00 00 FF 
18750     B4 E4 05 F1 | 	add	objptr, ##40116
18754     F2 26 02 F1 | 	add	local01, objptr
18758     08 4E 85 F1 | 	sub	fp, #8
1875c     A7 12 02 FB | 	rdlong	arg01, fp
18760     04 4E 05 F1 | 	add	fp, #4
18764     A7 18 02 FB | 	rdlong	arg04, fp
18768     0A 18 66 F0 | 	shl	arg04, #10
1876c     0C 13 02 F1 | 	add	arg01, arg04
18770     10 4E 85 F1 | 	sub	fp, #16
18774     14 13 02 F1 | 	add	arg01, local02
18778     4E 00 00 FF 
1877c     B4 E4 85 F1 | 	sub	objptr, ##40116
18780     80 9A B0 FD | 	call	#_pspeek
18784     13 FB 41 FC | 	wrbyte	result1, local01
18788                 | LR__2014
18788     14 4E 05 F1 | 	add	fp, #20
1878c     A7 28 02 FB | 	rdlong	local02, fp
18790     01 28 06 F1 | 	add	local02, #1
18794     A7 28 62 FC | 	wrlong	local02, fp
18798     14 4E 85 F1 | 	sub	fp, #20
1879c     02 00 00 FF 
187a0     00 28 56 F2 | 	cmps	local02, ##1024 wc
187a4     2C 00 90 3D |  if_ae	jmp	#LR__2015
187a8     10 4E 05 F1 | 	add	fp, #16
187ac     A7 26 02 FB | 	rdlong	local01, fp
187b0     0A 26 66 F0 | 	shl	local01, #10
187b4     04 4E 05 F1 | 	add	fp, #4
187b8     A7 28 02 FB | 	rdlong	local02, fp
187bc     14 27 02 F1 | 	add	local01, local02
187c0     0C 4E 85 F1 | 	sub	fp, #12
187c4     A7 28 02 FB | 	rdlong	local02, fp
187c8     08 4E 85 F1 | 	sub	fp, #8
187cc     14 27 5A F2 | 	cmps	local01, local02 wcz
187d0     08 FF 9F ED |  if_be	jmp	#LR__2012
187d4                 | LR__2015
187d4                 | '    put #channel,,block(0),amount, r : getres(channel)=r
187d4     04 4E 05 F1 | 	add	fp, #4
187d8     A7 12 02 FB | 	rdlong	arg01, fp
187dc     4E 00 00 FF 
187e0     B4 E4 05 F1 | 	add	objptr, ##40116
187e4     F2 16 02 F6 | 	mov	arg03, objptr
187e8     4E 00 00 FF 
187ec     B4 E4 85 F1 | 	sub	objptr, ##40116
187f0     04 4E 05 F1 | 	add	fp, #4
187f4     A7 18 02 FB | 	rdlong	arg04, fp
187f8     08 4E 85 F1 | 	sub	fp, #8
187fc     00 14 06 F6 | 	mov	arg02, #0
18800     01 1A 06 F6 | 	mov	arg05, #1
18804     74 DF B0 FD | 	call	#__system___basic_put
18808     18 4E 05 F1 | 	add	fp, #24
1880c     A7 FA 61 FC | 	wrlong	result1, fp
18810     14 4E 85 F1 | 	sub	fp, #20
18814     A7 26 02 FB | 	rdlong	local01, fp
18818     02 26 66 F0 | 	shl	local01, #2
1881c     50 00 00 FF 
18820     C4 E4 05 F1 | 	add	objptr, ##41156
18824     F2 26 02 F1 | 	add	local01, objptr
18828     13 FB 61 FC | 	wrlong	result1, local01
1882c                 | '    if 1024*i+j>amount then exit loop
1882c     0C 4E 05 F1 | 	add	fp, #12
18830     A7 28 02 FB | 	rdlong	local02, fp
18834     0A 28 66 F0 | 	shl	local02, #10
18838     04 4E 05 F1 | 	add	fp, #4
1883c     A7 26 02 FB | 	rdlong	local01, fp
18840     13 29 02 F1 | 	add	local02, local01
18844     0C 4E 85 F1 | 	sub	fp, #12
18848     A7 2A 02 FB | 	rdlong	local03, fp
1884c     08 4E 85 F1 | 	sub	fp, #8
18850     15 29 5A F2 | 	cmps	local02, local03 wcz
18854     50 00 00 FF 
18858     C4 E4 85 F1 | 	sub	objptr, ##41156
1885c     18 00 90 1D |  if_a	jmp	#LR__2016
18860     10 4E 05 F1 | 	add	fp, #16
18864     A7 28 02 FB | 	rdlong	local02, fp
18868     01 28 06 F1 | 	add	local02, #1
1886c     A7 28 62 FC | 	wrlong	local02, fp
18870     10 4E 85 F1 | 	sub	fp, #16
18874     58 FE 9F FD | 	jmp	#LR__2011
18878                 | LR__2016
18878                 | LR__2017
18878     A7 F0 03 F6 | 	mov	ptra, fp
1887c     B2 00 A0 FD | 	call	#popregs_
18880                 | _do_put_ret
18880     2D 00 64 FD | 	ret
18884                 | 
18884                 | ' 
18884                 | ' '-------------------- rad
18884                 | ' 
18884                 | ' sub do_rad
18884                 | _do_rad
18884     52 00 00 FF 
18888     54 E4 05 F1 | 	add	objptr, ##42068
1888c     00 C0 9F FF 
18890     F2 00 68 FC | 	wrlong	##1065353216, objptr
18894     04 E4 05 F1 | 	add	objptr, #4
18898     00 C0 9F FF 
1889c     F2 00 68 FC | 	wrlong	##1065353216, objptr
188a0     52 00 00 FF 
188a4     58 E4 85 F1 | 	sub	objptr, ##42072
188a8                 | _do_rad_ret
188a8     2D 00 64 FD | 	ret
188ac                 | 
188ac                 | ' 
188ac                 | ' '-------------------- rdpin
188ac                 | ' 
188ac                 | ' sub do_rdpin
188ac                 | _do_rdpin
188ac     00 4A 05 F6 | 	mov	COUNT_, #0
188b0     A8 00 A0 FD | 	call	#pushregs_
188b4     0C F0 07 F1 | 	add	ptra, #12
188b8     C4 43 BF FD | 	call	#_pop
188bc     A7 FA 61 FC | 	wrlong	result1, fp
188c0     04 4E 05 F1 | 	add	fp, #4
188c4     A7 FC 61 FC | 	wrlong	result2, fp
188c8     04 4E 05 F1 | 	add	fp, #4
188cc     A7 FE 61 FC | 	wrlong	result3, fp
188d0     08 4E 85 F1 | 	sub	fp, #8
188d4     A7 12 02 F6 | 	mov	arg01, fp
188d8     88 45 BF FD | 	call	#_converttoint
188dc     FD FA 89 FA | 	rdpin	result1, result1
188e0     52 00 00 FF 
188e4     BC E4 05 F1 | 	add	objptr, ##42172
188e8     F2 FA 61 FC | 	wrlong	result1, objptr
188ec     52 00 00 FF 
188f0     BC E4 85 F1 | 	sub	objptr, ##42172
188f4     08 4E 05 F1 | 	add	fp, #8
188f8     A7 3A 68 FC | 	wrlong	#29, fp
188fc     08 4E 85 F1 | 	sub	fp, #8
18900     A7 08 68 FC | 	wrlong	#4, fp
18904     A7 12 02 F6 | 	mov	arg01, fp
18908     0C 44 BF FD | 	call	#_push
1890c     A7 F0 03 F6 | 	mov	ptra, fp
18910     B2 00 A0 FD | 	call	#popregs_
18914                 | _do_rdpin_ret
18914     2D 00 64 FD | 	ret
18918                 | 
18918                 | ' 
18918                 | ' ' ----------------  read
18918                 | ' 
18918                 | ' function read_next_line() as string
18918                 | _read_next_line
18918     07 4A 05 F6 | 	mov	COUNT_, #7
1891c     A8 00 A0 FD | 	call	#pushregs_
18920                 | ' if dataptr=$7FFFFFFF then return("")
18920     50 00 00 FF 
18924     2C E5 05 F1 | 	add	objptr, ##41260
18928     F2 26 02 FB | 	rdlong	local01, objptr
1892c     50 00 00 FF 
18930     2C E5 85 F1 | 	sub	objptr, ##41260
18934     FF FF 3F FF 
18938     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1893c     AF 01 00 AF 
18940     22 FB 05 A6 |  if_e	mov	result1, ##@LR__5911
18944     BC 01 90 AD |  if_e	jmp	#LR__2027
18948                 | ' do
18948                 | LR__2020
18948     50 00 00 FF 
1894c     08 E5 05 F1 | 	add	objptr, ##41224
18950     F2 12 02 F6 | 	mov	arg01, objptr
18954     24 E4 05 F1 | 	add	objptr, #36
18958     F2 14 02 FB | 	rdlong	arg02, objptr
1895c     24 16 06 F6 | 	mov	arg03, #36
18960     45 00 00 FF 
18964     60 E4 85 F1 | 	sub	objptr, ##35424
18968     84 C3 B0 FD | 	call	#_psram_spin2_read1
1896c                 | '  ' print dataptr
1896c                 | '   psram.read1(varptr(dataheader),dataptr,36) 
1896c                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
1896c     45 00 00 FF 
18970     3C E4 05 F1 | 	add	objptr, ##35388
18974     F2 26 02 FB | 	rdlong	local01, objptr
18978     50 00 00 FF 
1897c     08 E5 85 F1 | 	sub	objptr, ##41224
18980     FF FF 7F FF 
18984     FF 27 0E F2 | 	cmp	local01, ##-1 wz
18988     50 00 00 5F 
1898c     1C E5 05 51 |  if_ne	add	objptr, ##41244
18990     F2 26 02 5B |  if_ne	rdlong	local01, objptr
18994     10 E4 05 51 |  if_ne	add	objptr, #16
18998     F2 26 62 5C |  if_ne	wrlong	local01, objptr
1899c     50 00 00 5F 
189a0     2C E5 85 51 |  if_ne	sub	objptr, ##41260
189a4     50 00 00 FF 
189a8     1C E5 05 F1 | 	add	objptr, ##41244
189ac     F2 26 02 FB | 	rdlong	local01, objptr
189b0     50 00 00 FF 
189b4     1C E5 85 F1 | 	sub	objptr, ##41244
189b8     FF FF 3F FF 
189bc     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
189c0     50 00 00 5F 
189c4     08 E5 05 51 |  if_ne	add	objptr, ##41224
189c8     F2 28 02 5B |  if_ne	rdlong	local02, objptr
189cc     50 00 00 5F 
189d0     08 E5 85 51 |  if_ne	sub	objptr, ##41224
189d4     FF FF 7F 5F 
189d8     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
189dc     50 00 00 5F 
189e0     28 E5 05 51 |  if_ne	add	objptr, ##41256
189e4     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
189e8     50 00 00 5F 
189ec     28 E5 85 51 |  if_ne	sub	objptr, ##41256
189f0     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
189f4     50 FF 9F 5D |  if_ne	jmp	#LR__2020
189f8                 | ' if dataheader(8)=token_data then 
189f8     50 00 00 FF 
189fc     28 E5 05 F1 | 	add	objptr, ##41256
18a00     F2 26 02 FB | 	rdlong	local01, objptr
18a04     50 00 00 FF 
18a08     28 E5 85 F1 | 	sub	objptr, ##41256
18a0c     B7 26 0E F2 | 	cmp	local01, #183 wz
18a10     E0 00 90 5D |  if_ne	jmp	#LR__2025
18a14     50 00 00 FF 
18a18     10 E5 05 F1 | 	add	objptr, ##41232
18a1c     F2 26 02 FB | 	rdlong	local01, objptr
18a20     01 00 00 FF 
18a24     8C E5 05 F1 | 	add	objptr, ##908
18a28     F2 26 62 FC | 	wrlong	local01, objptr
18a2c     01 00 00 FF 
18a30     88 E5 85 F1 | 	sub	objptr, ##904
18a34     F2 2C 02 FB | 	rdlong	local04, objptr
18a38     01 00 00 FF 
18a3c     80 E5 05 F1 | 	add	objptr, ##896
18a40     F2 2C 62 FC | 	wrlong	local04, objptr
18a44                 | '  'print "data found at line "; dataheader(0)
18a44                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18a44     00 2E 06 F6 | 	mov	local05, #0
18a48     52 00 00 FF 
18a4c     94 E4 85 F1 | 	sub	objptr, ##42132
18a50                 | LR__2021
18a50     16 2F 52 F2 | 	cmps	local05, local04 wc
18a54     3C 00 90 3D |  if_ae	jmp	#LR__2022
18a58     52 00 00 FF 
18a5c     9C E4 05 F1 | 	add	objptr, ##42140
18a60     F2 12 02 FB | 	rdlong	arg01, objptr
18a64     52 00 00 FF 
18a68     9C E4 85 F1 | 	sub	objptr, ##42140
18a6c     17 13 02 F1 | 	add	arg01, local05
18a70     90 97 B0 FD | 	call	#_pspeek
18a74     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
18a78     3C F1 B0 FD | 	call	#__system__Chr_S
18a7c     FD 14 02 F6 | 	mov	arg02, result1
18a80     18 13 02 F6 | 	mov	arg01, local06
18a84     4C CF B0 FD | 	call	#__system___string_concat
18a88     FD 30 02 F6 | 	mov	local06, result1
18a8c     01 2E 06 F1 | 	add	local05, #1
18a90     BC FF 9F FD | 	jmp	#LR__2021
18a94                 | LR__2022
18a94     AF 01 00 FF 
18a98     23 17 06 F6 | 	mov	arg03, ##@LR__5912
18a9c     01 12 06 F6 | 	mov	arg01, #1
18aa0     18 15 02 F6 | 	mov	arg02, local06
18aa4     94 F4 B0 FD | 	call	#__system__Instr
18aa8     FD 2E 02 F6 | 	mov	local05, result1
18aac     18 13 02 F6 | 	mov	arg01, local06
18ab0     09 33 02 F6 | 	mov	local07, arg01
18ab4     97 06 48 FB | 	callpa	#(@LR__2024-@LR__2023)>>2,fcache_load_ptr_
18ab8                 | LR__2023
18ab8     19 FB C9 FA | 	rdbyte	result1, local07 wz
18abc     01 32 06 51 |  if_ne	add	local07, #1
18ac0     F4 FF 9F 5D |  if_ne	jmp	#LR__2023
18ac4                 | LR__2024
18ac4     09 33 82 F1 | 	sub	local07, arg01
18ac8     19 15 02 F6 | 	mov	arg02, local07
18acc     17 15 82 F1 | 	sub	arg02, local05
18ad0     04 14 86 F1 | 	sub	arg02, #4
18ad4     18 13 02 F6 | 	mov	arg01, local06
18ad8     A0 EF B0 FD | 	call	#__system__Right_S
18adc     FD 12 02 F6 | 	mov	arg01, result1
18ae0     A0 F3 B0 FD | 	call	#__system__RTrim_S
18ae4     FD 12 02 F6 | 	mov	arg01, result1
18ae8     D8 F2 B0 FD | 	call	#__system__LTrim_S
18aec     FD 30 02 F6 | 	mov	local06, result1
18af0     0C 00 90 FD | 	jmp	#LR__2026
18af4                 | LR__2025
18af4                 | '   return ("") 'todo proper err
18af4     AF 01 00 FF 
18af8     28 FB 05 F6 | 	mov	result1, ##@LR__5913
18afc     04 00 90 FD | 	jmp	#LR__2027
18b00                 | LR__2026
18b00                 | ' return readline
18b00     18 FB 01 F6 | 	mov	result1, local06
18b04                 | LR__2027
18b04     A7 F0 03 F6 | 	mov	ptra, fp
18b08     B2 00 A0 FD | 	call	#popregs_
18b0c                 | _read_next_line_ret
18b0c     2D 00 64 FD | 	ret
18b10                 | 
18b10                 | ' 
18b10                 | ' sub do_read
18b10                 | _do_read
18b10     11 4A 05 F6 | 	mov	COUNT_, #17
18b14     A8 00 A0 FD | 	call	#pushregs_
18b18     58 F1 07 F1 | 	add	ptra, #344
18b1c     4A 00 00 FF 
18b20     80 E4 05 F1 | 	add	objptr, ##38016
18b24     F2 FE 01 FB | 	rdlong	result3, objptr
18b28     FF FC 01 F6 | 	mov	result2, result3
18b2c     01 FC 65 F0 | 	shl	result2, #1
18b30     FF FC 01 F1 | 	add	result2, result3
18b34     02 FC 65 F0 | 	shl	result2, #2
18b38     03 00 00 FF 
18b3c     04 E4 85 F1 | 	sub	objptr, ##1540
18b40     F2 FC 01 F1 | 	add	result2, objptr
18b44     FE FC 01 FB | 	rdlong	result2, result2
18b48     08 4E 05 F1 | 	add	fp, #8
18b4c     A7 FC 61 FC | 	wrlong	result2, fp
18b50                 | ' 
18b50                 | ' 
18b50                 | ' numpar=compiledline(lineptr_e).result.uresult
18b50                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
18b50     08 4E 85 F1 | 	sub	fp, #8
18b54     01 FC 15 F2 | 	cmp	result2, #1 wc
18b58     47 00 00 FF 
18b5c     7C E4 85 F1 | 	sub	objptr, ##36476
18b60     14 00 90 CD |  if_b	jmp	#LR__2030
18b64     08 4E 05 F1 | 	add	fp, #8
18b68     A7 FC 01 FB | 	rdlong	result2, fp
18b6c     08 4E 85 F1 | 	sub	fp, #8
18b70     41 FC 15 F2 | 	cmp	result2, #65 wc
18b74     50 00 90 CD |  if_b	jmp	#LR__2031
18b78                 | LR__2030
18b78     00 12 06 F6 | 	mov	arg01, #0
18b7c     20 2B B1 FD | 	call	#__system___getiolock_0599
18b80     FD 12 02 F6 | 	mov	arg01, result1
18b84     F0 CD B0 FD | 	call	#__system___lockmem
18b88     AF 01 00 FF 
18b8c     29 15 06 F6 | 	mov	arg02, ##@LR__5914
18b90     00 12 06 F6 | 	mov	arg01, #0
18b94     00 16 06 F6 | 	mov	arg03, #0
18b98     D0 DA B0 FD | 	call	#__system___basic_print_string
18b9c     00 12 06 F6 | 	mov	arg01, #0
18ba0     FC 2A B1 FD | 	call	#__system___getiolock_0599
18ba4     FD 00 68 FC | 	wrlong	#0, result1
18ba8     50 00 00 FF 
18bac     F0 E4 05 F1 | 	add	objptr, ##41200
18bb0     F2 14 02 FB | 	rdlong	arg02, objptr
18bb4     50 00 00 FF 
18bb8     F0 E4 85 F1 | 	sub	objptr, ##41200
18bbc     27 12 06 F6 | 	mov	arg01, #39
18bc0     C8 93 B0 FD | 	call	#_printerror
18bc4     4C 0C 90 FD | 	jmp	#LR__2080
18bc8                 | LR__2031
18bc8     08 4E 05 F1 | 	add	fp, #8
18bcc     A7 16 02 FB | 	rdlong	arg03, fp
18bd0     01 16 86 F1 | 	sub	arg03, #1
18bd4     28 4F 05 F1 | 	add	fp, #296
18bd8     A7 16 62 FC | 	wrlong	arg03, fp
18bdc     30 4F 85 F1 | 	sub	fp, #304
18be0                 | ' i=numpar-1
18be0                 | ' if readline="" then readline=read_next_line() ': print readline
18be0     52 00 00 FF 
18be4     88 E4 05 F1 | 	add	objptr, ##42120
18be8     F2 12 02 FB | 	rdlong	arg01, objptr
18bec     52 00 00 FF 
18bf0     88 E4 85 F1 | 	sub	objptr, ##42120
18bf4     AF 01 00 FF 
18bf8     33 15 06 F6 | 	mov	arg02, ##@LR__5915
18bfc     A0 CD B0 FD | 	call	#__system___string_cmp
18c00     00 FA 0D F2 | 	cmp	result1, #0 wz
18c04     18 00 90 5D |  if_ne	jmp	#LR__2032
18c08     0C FD BF FD | 	call	#_read_next_line
18c0c     52 00 00 FF 
18c10     88 E4 05 F1 | 	add	objptr, ##42120
18c14     F2 FA 61 FC | 	wrlong	result1, objptr
18c18     52 00 00 FF 
18c1c     88 E4 85 F1 | 	sub	objptr, ##42120
18c20                 | LR__2032
18c20                 | ' if readline="" then printerror(55,runheader(0)) :return
18c20     52 00 00 FF 
18c24     88 E4 05 F1 | 	add	objptr, ##42120
18c28     F2 12 02 FB | 	rdlong	arg01, objptr
18c2c     52 00 00 FF 
18c30     88 E4 85 F1 | 	sub	objptr, ##42120
18c34     AF 01 00 FF 
18c38     34 15 06 F6 | 	mov	arg02, ##@LR__5916
18c3c     60 CD B0 FD | 	call	#__system___string_cmp
18c40     00 FA 0D F2 | 	cmp	result1, #0 wz
18c44     20 00 90 5D |  if_ne	jmp	#LR__2033
18c48     50 00 00 FF 
18c4c     F0 E4 05 F1 | 	add	objptr, ##41200
18c50     F2 14 02 FB | 	rdlong	arg02, objptr
18c54     50 00 00 FF 
18c58     F0 E4 85 F1 | 	sub	objptr, ##41200
18c5c     37 12 06 F6 | 	mov	arg01, #55
18c60     28 93 B0 FD | 	call	#_printerror
18c64     AC 0B 90 FD | 	jmp	#LR__2080
18c68                 | LR__2033
18c68     34 4F 05 F1 | 	add	fp, #308
18c6c     A7 00 68 FC | 	wrlong	#0, fp
18c70     2C 4F 85 F1 | 	sub	fp, #300
18c74     A7 26 02 FB | 	rdlong	local01, fp
18c78     01 26 86 F1 | 	sub	local01, #1
18c7c     28 4F 05 F1 | 	add	fp, #296
18c80     A7 26 62 FC | 	wrlong	local01, fp
18c84     30 4F 85 F1 | 	sub	fp, #304
18c88                 | ' j=0
18c88                 | ' i=numpar-1
18c88                 | ' do
18c88                 | LR__2034
18c88                 | '   do
18c88                 | LR__2035
18c88     52 00 00 FF 
18c8c     88 E4 05 F1 | 	add	objptr, ##42120
18c90     F2 14 02 FB | 	rdlong	arg02, objptr
18c94     52 00 00 FF 
18c98     88 E4 85 F1 | 	sub	objptr, ##42120
18c9c     AF 01 00 FF 
18ca0     35 17 06 F6 | 	mov	arg03, ##@LR__5917
18ca4     01 12 06 F6 | 	mov	arg01, #1
18ca8     90 F2 B0 FD | 	call	#__system__Instr
18cac     0C 4E 05 F1 | 	add	fp, #12
18cb0     A7 FA 61 FC | 	wrlong	result1, fp
18cb4                 | '     comma=instr(1,readline,",")  
18cb4                 | '       if comma>0  then 
18cb4     0C 4E 85 F1 | 	sub	fp, #12
18cb8     01 FA 15 F2 | 	cmp	result1, #1 wc
18cbc     98 00 90 CD |  if_b	jmp	#LR__2038
18cc0     52 00 00 FF 
18cc4     88 E4 05 F1 | 	add	objptr, ##42120
18cc8     F2 12 02 FB | 	rdlong	arg01, objptr
18ccc     52 00 00 FF 
18cd0     88 E4 85 F1 | 	sub	objptr, ##42120
18cd4     0C 4E 05 F1 | 	add	fp, #12
18cd8     A7 14 02 FB | 	rdlong	arg02, fp
18cdc     0C 4E 85 F1 | 	sub	fp, #12
18ce0     01 14 86 F1 | 	sub	arg02, #1
18ce4     0C ED B0 FD | 	call	#__system__Left_S
18ce8     04 4E 05 F1 | 	add	fp, #4
18cec     A7 FA 61 FC | 	wrlong	result1, fp
18cf0     04 4E 85 F1 | 	sub	fp, #4
18cf4     52 00 00 FF 
18cf8     88 E4 05 F1 | 	add	objptr, ##42120
18cfc     F2 12 02 FB | 	rdlong	arg01, objptr
18d00     09 27 02 F6 | 	mov	local01, arg01
18d04     52 00 00 FF 
18d08     88 E4 85 F1 | 	sub	objptr, ##42120
18d0c     09 29 02 F6 | 	mov	local02, arg01
18d10     97 06 48 FB | 	callpa	#(@LR__2037-@LR__2036)>>2,fcache_load_ptr_
18d14                 | LR__2036
18d14     14 FB C9 FA | 	rdbyte	result1, local02 wz
18d18     01 28 06 51 |  if_ne	add	local02, #1
18d1c     F4 FF 9F 5D |  if_ne	jmp	#LR__2036
18d20                 | LR__2037
18d20     09 29 82 F1 | 	sub	local02, arg01
18d24     14 15 02 F6 | 	mov	arg02, local02
18d28     0C 4E 05 F1 | 	add	fp, #12
18d2c     A7 16 02 FB | 	rdlong	arg03, fp
18d30     0C 4E 85 F1 | 	sub	fp, #12
18d34     0B 15 82 F1 | 	sub	arg02, arg03
18d38     13 13 02 F6 | 	mov	arg01, local01
18d3c     3C ED B0 FD | 	call	#__system__Right_S
18d40     52 00 00 FF 
18d44     88 E4 05 F1 | 	add	objptr, ##42120
18d48     F2 FA 61 FC | 	wrlong	result1, objptr
18d4c     52 00 00 FF 
18d50     88 E4 85 F1 | 	sub	objptr, ##42120
18d54     48 00 90 FD | 	jmp	#LR__2039
18d58                 | LR__2038
18d58     52 00 00 FF 
18d5c     88 E4 05 F1 | 	add	objptr, ##42120
18d60     F2 12 02 FB | 	rdlong	arg01, objptr
18d64     52 00 00 FF 
18d68     88 E4 85 F1 | 	sub	objptr, ##42120
18d6c     14 F1 B0 FD | 	call	#__system__RTrim_S
18d70     FD 12 02 F6 | 	mov	arg01, result1
18d74     4C F0 B0 FD | 	call	#__system__LTrim_S
18d78     04 4E 05 F1 | 	add	fp, #4
18d7c     A7 FA 61 FC | 	wrlong	result1, fp
18d80     04 4E 85 F1 | 	sub	fp, #4
18d84     AF 01 00 FF 
18d88     37 27 06 F6 | 	mov	local01, ##@LR__5918
18d8c     52 00 00 FF 
18d90     88 E4 05 F1 | 	add	objptr, ##42120
18d94     F2 26 62 FC | 	wrlong	local01, objptr
18d98     52 00 00 FF 
18d9c     88 E4 85 F1 | 	sub	objptr, ##42120
18da0                 | LR__2039
18da0                 | '      if part$<>"" then j=j+1
18da0     04 4E 05 F1 | 	add	fp, #4
18da4     A7 12 02 FB | 	rdlong	arg01, fp
18da8     04 4E 85 F1 | 	sub	fp, #4
18dac     AF 01 00 FF 
18db0     38 15 06 F6 | 	mov	arg02, ##@LR__5919
18db4     E8 CB B0 FD | 	call	#__system___string_cmp
18db8     00 FA 0D F2 | 	cmp	result1, #0 wz
18dbc     34 4F 05 51 |  if_ne	add	fp, #308
18dc0     A7 26 02 5B |  if_ne	rdlong	local01, fp
18dc4     01 26 06 51 |  if_ne	add	local01, #1
18dc8     A7 26 62 5C |  if_ne	wrlong	local01, fp
18dcc     34 4F 85 51 |  if_ne	sub	fp, #308
18dd0     30 4F 05 F1 | 	add	fp, #304
18dd4     A7 26 02 FB | 	rdlong	local01, fp
18dd8     02 26 66 F0 | 	shl	local01, #2
18ddc     04 4F 85 F1 | 	sub	fp, #260
18de0     A7 26 02 F1 | 	add	local01, fp
18de4     28 4E 85 F1 | 	sub	fp, #40
18de8     A7 FA 01 FB | 	rdlong	result1, fp
18dec     13 FB 61 FC | 	wrlong	result1, local01
18df0     2C 4F 05 F1 | 	add	fp, #300
18df4     A7 26 02 FB | 	rdlong	local01, fp
18df8     01 26 86 F1 | 	sub	local01, #1
18dfc     A7 26 62 FC | 	wrlong	local01, fp
18e00     30 4F 85 F1 | 	sub	fp, #304
18e04                 | '      args(i)=part$  
18e04                 | '      i=i-1
18e04                 | '     if readline="" then readline=read_next_line() 
18e04     52 00 00 FF 
18e08     88 E4 05 F1 | 	add	objptr, ##42120
18e0c     F2 12 02 FB | 	rdlong	arg01, objptr
18e10     52 00 00 FF 
18e14     88 E4 85 F1 | 	sub	objptr, ##42120
18e18     AF 01 00 FF 
18e1c     39 15 06 F6 | 	mov	arg02, ##@LR__5920
18e20     7C CB B0 FD | 	call	#__system___string_cmp
18e24     00 FA 0D F2 | 	cmp	result1, #0 wz
18e28     18 00 90 5D |  if_ne	jmp	#LR__2040
18e2c     E8 FA BF FD | 	call	#_read_next_line
18e30     52 00 00 FF 
18e34     88 E4 05 F1 | 	add	objptr, ##42120
18e38     F2 FA 61 FC | 	wrlong	result1, objptr
18e3c     52 00 00 FF 
18e40     88 E4 85 F1 | 	sub	objptr, ##42120
18e44                 | LR__2040
18e44     30 4F 05 F1 | 	add	fp, #304
18e48     A7 26 02 FB | 	rdlong	local01, fp
18e4c     30 4F 85 F1 | 	sub	fp, #304
18e50     00 26 56 F2 | 	cmps	local01, #0 wc
18e54     28 00 90 CD |  if_b	jmp	#LR__2041
18e58     52 00 00 FF 
18e5c     88 E4 05 F1 | 	add	objptr, ##42120
18e60     F2 12 02 FB | 	rdlong	arg01, objptr
18e64     52 00 00 FF 
18e68     88 E4 85 F1 | 	sub	objptr, ##42120
18e6c     AF 01 00 FF 
18e70     3A 15 06 F6 | 	mov	arg02, ##@LR__5921
18e74     28 CB B0 FD | 	call	#__system___string_cmp
18e78     00 FA 0D F2 | 	cmp	result1, #0 wz
18e7c     08 FE 9F 5D |  if_ne	jmp	#LR__2035
18e80                 | LR__2041
18e80     30 4F 05 F1 | 	add	fp, #304
18e84     A7 26 02 FB | 	rdlong	local01, fp
18e88     30 4F 85 F1 | 	sub	fp, #304
18e8c     00 26 56 F2 | 	cmps	local01, #0 wc
18e90     F4 FD 9F 3D |  if_ae	jmp	#LR__2034
18e94                 | ' if j<numpar then printerror(55,runheader(0))
18e94     34 4F 05 F1 | 	add	fp, #308
18e98     A7 26 02 FB | 	rdlong	local01, fp
18e9c     2C 4F 85 F1 | 	sub	fp, #300
18ea0     A7 16 02 FB | 	rdlong	arg03, fp
18ea4     08 4E 85 F1 | 	sub	fp, #8
18ea8     0B 27 52 F2 | 	cmps	local01, arg03 wc
18eac     50 00 00 CF 
18eb0     F0 E4 05 C1 |  if_b	add	objptr, ##41200
18eb4     F2 14 02 CB |  if_b	rdlong	arg02, objptr
18eb8     50 00 00 CF 
18ebc     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
18ec0     37 12 06 C6 |  if_b	mov	arg01, #55
18ec4     C4 90 B0 CD |  if_b	call	#_printerror
18ec8                 | ' 
18ec8                 | ' for i=0 to numpar-1
18ec8     30 4F 05 F1 | 	add	fp, #304
18ecc     A7 00 68 FC | 	wrlong	#0, fp
18ed0     28 4F 85 F1 | 	sub	fp, #296
18ed4     A7 2A 02 FB | 	rdlong	local03, fp
18ed8     08 4E 85 F1 | 	sub	fp, #8
18edc                 | LR__2042
18edc     30 4F 05 F1 | 	add	fp, #304
18ee0     A7 2C 02 FB | 	rdlong	local04, fp
18ee4     30 4F 85 F1 | 	sub	fp, #304
18ee8     16 27 02 F6 | 	mov	local01, local04
18eec     15 27 52 F2 | 	cmps	local01, local03 wc
18ef0     20 09 90 3D |  if_ae	jmp	#LR__2079
18ef4                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
18ef4     30 4F 05 F1 | 	add	fp, #304
18ef8     A7 16 02 FB | 	rdlong	arg03, fp
18efc     02 16 66 F0 | 	shl	arg03, #2
18f00     04 4F 85 F1 | 	sub	fp, #260
18f04     A7 16 02 F1 | 	add	arg03, fp
18f08     0B 13 02 FB | 	rdlong	arg01, arg03
18f0c     2C 4E 85 F1 | 	sub	fp, #44
18f10     88 D5 BE FD | 	call	#_isnum
18f14     FD 2E 02 F6 | 	mov	local05, result1
18f18     30 4F 05 F1 | 	add	fp, #304
18f1c     A7 16 02 FB | 	rdlong	arg03, fp
18f20     02 16 66 F0 | 	shl	arg03, #2
18f24     04 4F 85 F1 | 	sub	fp, #260
18f28     A7 30 02 F6 | 	mov	local06, fp
18f2c     A7 16 02 F1 | 	add	arg03, fp
18f30     0B 13 02 FB | 	rdlong	arg01, arg03
18f34     2C 4E 85 F1 | 	sub	fp, #44
18f38     4C D9 BE FD | 	call	#_isint
18f3c     FD 2E 2A F5 | 	andn	local05, result1 wz
18f40     52 00 00 5F 
18f44     BC E4 05 51 |  if_ne	add	objptr, ##42172
18f48     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
18f4c     52 00 00 5F 
18f50     BC E4 85 51 |  if_ne	sub	objptr, ##42172
18f54                 | '   if isint(args(i)) then r=result_int 
18f54     30 4F 05 F1 | 	add	fp, #304
18f58     A7 2E 02 FB | 	rdlong	local05, fp
18f5c     02 2E 66 F0 | 	shl	local05, #2
18f60     04 4F 85 F1 | 	sub	fp, #260
18f64     A7 2E 02 F1 | 	add	local05, fp
18f68     17 13 02 FB | 	rdlong	arg01, local05
18f6c     2C 4E 85 F1 | 	sub	fp, #44
18f70     14 D9 BE FD | 	call	#_isint
18f74     00 FA 0D F2 | 	cmp	result1, #0 wz
18f78     52 00 00 5F 
18f7c     BC E4 05 51 |  if_ne	add	objptr, ##42172
18f80     F2 38 68 5C |  if_ne	wrlong	#28, objptr
18f84     52 00 00 5F 
18f88     BC E4 85 51 |  if_ne	sub	objptr, ##42172
18f8c                 | '   if isdec(args(i)) then r=result_uint 
18f8c     30 4F 05 F1 | 	add	fp, #304
18f90     A7 2E 02 FB | 	rdlong	local05, fp
18f94     02 2E 66 F0 | 	shl	local05, #2
18f98     04 4F 85 F1 | 	sub	fp, #260
18f9c     A7 2E 02 F1 | 	add	local05, fp
18fa0     17 13 02 FB | 	rdlong	arg01, local05
18fa4     2C 4E 85 F1 | 	sub	fp, #44
18fa8     80 DB BE FD | 	call	#_isdec
18fac     00 FA 0D F2 | 	cmp	result1, #0 wz
18fb0     52 00 00 5F 
18fb4     BC E4 05 51 |  if_ne	add	objptr, ##42172
18fb8     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
18fbc     52 00 00 5F 
18fc0     BC E4 85 51 |  if_ne	sub	objptr, ##42172
18fc4                 | '   if not isnum(args(i)) then 
18fc4     30 4F 05 F1 | 	add	fp, #304
18fc8     A7 16 02 FB | 	rdlong	arg03, fp
18fcc     02 16 66 F0 | 	shl	arg03, #2
18fd0     04 4F 85 F1 | 	sub	fp, #260
18fd4     A7 16 02 F1 | 	add	arg03, fp
18fd8     0B 13 02 FB | 	rdlong	arg01, arg03
18fdc     2C 4E 85 F1 | 	sub	fp, #44
18fe0     B8 D4 BE FD | 	call	#_isnum
18fe4     FD 2E 22 F6 | 	not	local05, result1
18fe8     00 2E 0E F2 | 	cmp	local05, #0 wz
18fec     3C 01 90 AD |  if_e	jmp	#LR__2047
18ff0     52 00 00 FF 
18ff4     BC E4 05 F1 | 	add	objptr, ##42172
18ff8     F2 56 68 FC | 	wrlong	#43, objptr
18ffc     52 00 00 FF 
19000     BC E4 85 F1 | 	sub	objptr, ##42172
19004     04 4E 05 F1 | 	add	fp, #4
19008     A7 12 02 FB | 	rdlong	arg01, fp
1900c     04 4E 85 F1 | 	sub	fp, #4
19010     09 29 02 F6 | 	mov	local02, arg01
19014     97 06 48 FB | 	callpa	#(@LR__2044-@LR__2043)>>2,fcache_load_ptr_
19018                 | LR__2043
19018     14 FB C9 FA | 	rdbyte	result1, local02 wz
1901c     01 28 06 51 |  if_ne	add	local02, #1
19020     F4 FF 9F 5D |  if_ne	jmp	#LR__2043
19024                 | LR__2044
19024     09 29 82 F1 | 	sub	local02, arg01
19028     14 FB 01 F6 | 	mov	result1, local02
1902c     38 4F 05 F1 | 	add	fp, #312
19030     A7 FA 61 FC | 	wrlong	result1, fp
19034     52 00 00 FF 
19038     44 E4 05 F1 | 	add	objptr, ##42052
1903c     F2 12 02 FB | 	rdlong	arg01, objptr
19040     FD 12 82 F1 | 	sub	arg01, result1
19044     04 12 86 F1 | 	sub	arg01, #4
19048     03 12 26 F5 | 	andn	arg01, #3
1904c     F2 12 62 FC | 	wrlong	arg01, objptr
19050     52 00 00 FF 
19054     44 E4 85 F1 | 	sub	objptr, ##42052
19058     A7 14 02 FB | 	rdlong	arg02, fp
1905c     38 4F 85 F1 | 	sub	fp, #312
19060     C8 90 B0 FD | 	call	#_pslpoke
19064                 | '     pslpoke memtop,l
19064                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
19064     34 4F 05 F1 | 	add	fp, #308
19068     A7 02 68 FC | 	wrlong	#1, fp
1906c     04 4E 05 F1 | 	add	fp, #4
19070     A7 32 02 FB | 	rdlong	local07, fp
19074     38 4F 85 F1 | 	sub	fp, #312
19078     01 32 06 F1 | 	add	local07, #1
1907c                 | LR__2045
1907c     34 4F 05 F1 | 	add	fp, #308
19080     A7 2E 02 FB | 	rdlong	local05, fp
19084     34 4F 85 F1 | 	sub	fp, #308
19088     19 2F 52 F2 | 	cmps	local05, local07 wc
1908c     7C 00 90 3D |  if_ae	jmp	#LR__2046
19090     52 00 00 FF 
19094     44 E4 05 F1 | 	add	objptr, ##42052
19098     F2 30 02 FB | 	rdlong	local06, objptr
1909c     52 00 00 FF 
190a0     44 E4 85 F1 | 	sub	objptr, ##42052
190a4     03 30 06 F1 | 	add	local06, #3
190a8     34 4F 05 F1 | 	add	fp, #308
190ac     A7 34 02 FB | 	rdlong	local08, fp
190b0     1A 31 02 F1 | 	add	local06, local08
190b4     04 4E 85 F1 | 	sub	fp, #4
190b8     A7 36 02 FB | 	rdlong	local09, fp
190bc     02 36 66 F0 | 	shl	local09, #2
190c0     04 4F 85 F1 | 	sub	fp, #260
190c4     A7 38 02 F6 | 	mov	local10, fp
190c8     A7 36 02 F1 | 	add	local09, fp
190cc     1B 13 02 FB | 	rdlong	arg01, local09
190d0     2C 4E 85 F1 | 	sub	fp, #44
190d4     01 3A 06 F6 | 	mov	local11, #1
190d8     1A 15 02 F6 | 	mov	arg02, local08
190dc     01 16 06 F6 | 	mov	arg03, #1
190e0     28 EA B0 FD | 	call	#__system__Mid_S
190e4     FD 14 C2 FA | 	rdbyte	arg02, result1
190e8     18 13 02 F6 | 	mov	arg01, local06
190ec     CC 90 B0 FD | 	call	#_pspoke
190f0     34 4F 05 F1 | 	add	fp, #308
190f4     A7 30 02 FB | 	rdlong	local06, fp
190f8     18 2F 02 F6 | 	mov	local05, local06
190fc     01 2E 06 F1 | 	add	local05, #1
19100     A7 2E 62 FC | 	wrlong	local05, fp
19104     34 4F 85 F1 | 	sub	fp, #308
19108     70 FF 9F FD | 	jmp	#LR__2045
1910c                 | LR__2046
1910c     52 00 00 FF 
19110     44 E4 05 F1 | 	add	objptr, ##42052
19114     F2 2E 02 FB | 	rdlong	local05, objptr
19118     52 00 00 FF 
1911c     44 E4 85 F1 | 	sub	objptr, ##42052
19120     10 4E 05 F1 | 	add	fp, #16
19124     A7 2E 62 FC | 	wrlong	local05, fp
19128     10 4E 85 F1 | 	sub	fp, #16
1912c                 | LR__2047
1912c     50 3B BF FD | 	call	#_pop
19130     1C 4E 05 F1 | 	add	fp, #28
19134     A7 FA 61 FC | 	wrlong	result1, fp
19138     04 4E 05 F1 | 	add	fp, #4
1913c     A7 FC 61 FC | 	wrlong	result2, fp
19140     04 4E 05 F1 | 	add	fp, #4
19144     A7 FE 61 FC | 	wrlong	result3, fp
19148                 | '   t1=pop() 
19148                 | '   if i>=numpar-j then
19148     1C 4E 85 F1 | 	sub	fp, #28
1914c     A7 2E 02 FB | 	rdlong	local05, fp
19150     17 3D 02 F6 | 	mov	local12, local05
19154     2C 4F 05 F1 | 	add	fp, #300
19158     A7 3E 02 FB | 	rdlong	local13, fp
1915c     1F 41 02 F6 | 	mov	local14, local13
19160     20 3D 82 F1 | 	sub	local12, local14
19164     04 4E 85 F1 | 	sub	fp, #4
19168     A7 42 02 FB | 	rdlong	local15, fp
1916c     30 4F 85 F1 | 	sub	fp, #304
19170     21 45 02 F6 | 	mov	local16, local15
19174     1E 45 52 F2 | 	cmps	local16, local12 wc
19178     80 06 90 CD |  if_b	jmp	#LR__2078
1917c     20 4E 05 F1 | 	add	fp, #32
19180     A7 3C 02 FB | 	rdlong	local12, fp
19184     0C 4E 85 F1 | 	sub	fp, #12
19188     A7 3C 62 FC | 	wrlong	local12, fp
1918c                 | '     vartype=t1.result.twowords(1)
1918c                 | '     select case vartype
1918c     14 4E 85 F1 | 	sub	fp, #20
19190     1E 47 0A F6 | 	mov	local17, local12 wz
19194     64 00 90 AD |  if_e	jmp	#LR__2048
19198     00 47 0E F2 | 	cmp	local17, #256 wz
1919c     6C 00 90 AD |  if_e	jmp	#LR__2049
191a0     01 47 0E F2 | 	cmp	local17, #257 wz
191a4     74 00 90 AD |  if_e	jmp	#LR__2050
191a8     02 47 0E F2 | 	cmp	local17, #258 wz
191ac     7C 00 90 AD |  if_e	jmp	#LR__2051
191b0     03 47 0E F2 | 	cmp	local17, #259 wz
191b4     84 00 90 AD |  if_e	jmp	#LR__2052
191b8     04 47 0E F2 | 	cmp	local17, #260 wz
191bc     8C 00 90 AD |  if_e	jmp	#LR__2053
191c0     05 47 0E F2 | 	cmp	local17, #261 wz
191c4     94 00 90 AD |  if_e	jmp	#LR__2054
191c8     06 47 0E F2 | 	cmp	local17, #262 wz
191cc     9C 00 90 AD |  if_e	jmp	#LR__2055
191d0     07 47 0E F2 | 	cmp	local17, #263 wz
191d4     A4 00 90 AD |  if_e	jmp	#LR__2056
191d8     08 47 0E F2 | 	cmp	local17, #264 wz
191dc     AC 00 90 AD |  if_e	jmp	#LR__2057
191e0     09 47 0E F2 | 	cmp	local17, #265 wz
191e4     B4 00 90 AD |  if_e	jmp	#LR__2058
191e8     0A 47 0E F2 | 	cmp	local17, #266 wz
191ec     BC 00 90 AD |  if_e	jmp	#LR__2059
191f0     0B 47 0E F2 | 	cmp	local17, #267 wz
191f4     C4 00 90 AD |  if_e	jmp	#LR__2060
191f8     D0 00 90 FD | 	jmp	#LR__2061
191fc                 | LR__2048
191fc     18 4E 05 F1 | 	add	fp, #24
19200     A7 18 68 FC | 	wrlong	#12, fp
19204     18 4E 85 F1 | 	sub	fp, #24
19208     CC 00 90 FD | 	jmp	#LR__2062
1920c                 | LR__2049
1920c     18 4E 05 F1 | 	add	fp, #24
19210     A7 18 68 FC | 	wrlong	#12, fp
19214     18 4E 85 F1 | 	sub	fp, #24
19218     BC 00 90 FD | 	jmp	#LR__2062
1921c                 | LR__2050
1921c     18 4E 05 F1 | 	add	fp, #24
19220     A7 02 68 FC | 	wrlong	#1, fp
19224     18 4E 85 F1 | 	sub	fp, #24
19228     AC 00 90 FD | 	jmp	#LR__2062
1922c                 | LR__2051
1922c     18 4E 05 F1 | 	add	fp, #24
19230     A7 02 68 FC | 	wrlong	#1, fp
19234     18 4E 85 F1 | 	sub	fp, #24
19238     9C 00 90 FD | 	jmp	#LR__2062
1923c                 | LR__2052
1923c     18 4E 05 F1 | 	add	fp, #24
19240     A7 04 68 FC | 	wrlong	#2, fp
19244     18 4E 85 F1 | 	sub	fp, #24
19248     8C 00 90 FD | 	jmp	#LR__2062
1924c                 | LR__2053
1924c     18 4E 05 F1 | 	add	fp, #24
19250     A7 04 68 FC | 	wrlong	#2, fp
19254     18 4E 85 F1 | 	sub	fp, #24
19258     7C 00 90 FD | 	jmp	#LR__2062
1925c                 | LR__2054
1925c     18 4E 05 F1 | 	add	fp, #24
19260     A7 08 68 FC | 	wrlong	#4, fp
19264     18 4E 85 F1 | 	sub	fp, #24
19268     6C 00 90 FD | 	jmp	#LR__2062
1926c                 | LR__2055
1926c     18 4E 05 F1 | 	add	fp, #24
19270     A7 08 68 FC | 	wrlong	#4, fp
19274     18 4E 85 F1 | 	sub	fp, #24
19278     5C 00 90 FD | 	jmp	#LR__2062
1927c                 | LR__2056
1927c     18 4E 05 F1 | 	add	fp, #24
19280     A7 10 68 FC | 	wrlong	#8, fp
19284     18 4E 85 F1 | 	sub	fp, #24
19288     4C 00 90 FD | 	jmp	#LR__2062
1928c                 | LR__2057
1928c     18 4E 05 F1 | 	add	fp, #24
19290     A7 10 68 FC | 	wrlong	#8, fp
19294     18 4E 85 F1 | 	sub	fp, #24
19298     3C 00 90 FD | 	jmp	#LR__2062
1929c                 | LR__2058
1929c     18 4E 05 F1 | 	add	fp, #24
192a0     A7 0C 68 FC | 	wrlong	#6, fp
192a4     18 4E 85 F1 | 	sub	fp, #24
192a8     2C 00 90 FD | 	jmp	#LR__2062
192ac                 | LR__2059
192ac     18 4E 05 F1 | 	add	fp, #24
192b0     A7 10 68 FC | 	wrlong	#8, fp
192b4     18 4E 85 F1 | 	sub	fp, #24
192b8     1C 00 90 FD | 	jmp	#LR__2062
192bc                 | LR__2060
192bc     18 4E 05 F1 | 	add	fp, #24
192c0     A7 0A 68 FC | 	wrlong	#5, fp
192c4     18 4E 85 F1 | 	sub	fp, #24
192c8     0C 00 90 FD | 	jmp	#LR__2062
192cc                 | LR__2061
192cc     18 4E 05 F1 | 	add	fp, #24
192d0     A7 18 68 FC | 	wrlong	#12, fp
192d4     18 4E 85 F1 | 	sub	fp, #24
192d8                 | LR__2062
192d8                 | '     if esize=12 andalso t1.result.uresult<$80000 then
192d8     18 4E 05 F1 | 	add	fp, #24
192dc     A7 3C 02 FB | 	rdlong	local12, fp
192e0     18 4E 85 F1 | 	sub	fp, #24
192e4     0C 3C 0E F2 | 	cmp	local12, #12 wz
192e8     74 01 90 5D |  if_ne	jmp	#LR__2067
192ec     1C 4E 05 F1 | 	add	fp, #28
192f0     A7 3E 02 FB | 	rdlong	local13, fp
192f4     1C 4E 85 F1 | 	sub	fp, #28
192f8     00 04 00 FF 
192fc     00 3E 16 F2 | 	cmp	local13, ##524288 wc
19300     5C 01 90 3D |  if_ae	jmp	#LR__2067
19304                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
19304     52 00 00 FF 
19308     BC E4 05 F1 | 	add	objptr, ##42172
1930c     F2 3C 02 FB | 	rdlong	local12, objptr
19310     52 00 00 FF 
19314     BC E4 85 F1 | 	sub	objptr, ##42172
19318     1C 3C 0E F2 | 	cmp	local12, #28 wz
1931c     38 00 90 5D |  if_ne	jmp	#LR__2063
19320     1C 4E 05 F1 | 	add	fp, #28
19324     A7 3C 02 FB | 	rdlong	local12, fp
19328     14 4F 05 F1 | 	add	fp, #276
1932c     A7 3E 02 FB | 	rdlong	local13, fp
19330     1F 45 02 F6 | 	mov	local16, local13
19334     02 44 66 F0 | 	shl	local16, #2
19338     04 4F 85 F1 | 	sub	fp, #260
1933c     A7 42 02 F6 | 	mov	local15, fp
19340     A7 44 02 F1 | 	add	local16, fp
19344     22 13 02 FB | 	rdlong	arg01, local16
19348     00 14 06 F6 | 	mov	arg02, #0
1934c     2C 4E 85 F1 | 	sub	fp, #44
19350     14 FB B0 FD | 	call	#__system____builtin_atoi
19354     1E FB 61 FC | 	wrlong	result1, local12
19358                 | LR__2063
19358                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
19358     52 00 00 FF 
1935c     BC E4 05 F1 | 	add	objptr, ##42172
19360     F2 3C 02 FB | 	rdlong	local12, objptr
19364     52 00 00 FF 
19368     BC E4 85 F1 | 	sub	objptr, ##42172
1936c     1D 3C 0E F2 | 	cmp	local12, #29 wz
19370     38 00 90 5D |  if_ne	jmp	#LR__2064
19374     1C 4E 05 F1 | 	add	fp, #28
19378     A7 3C 02 FB | 	rdlong	local12, fp
1937c     14 4F 05 F1 | 	add	fp, #276
19380     A7 3E 02 FB | 	rdlong	local13, fp
19384     1F 45 02 F6 | 	mov	local16, local13
19388     02 44 66 F0 | 	shl	local16, #2
1938c     04 4F 85 F1 | 	sub	fp, #260
19390     A7 42 02 F6 | 	mov	local15, fp
19394     A7 44 02 F1 | 	add	local16, fp
19398     22 13 02 FB | 	rdlong	arg01, local16
1939c     00 14 06 F6 | 	mov	arg02, #0
193a0     2C 4E 85 F1 | 	sub	fp, #44
193a4     C0 FA B0 FD | 	call	#__system____builtin_atoi
193a8     1E FB 61 FC | 	wrlong	result1, local12
193ac                 | LR__2064
193ac                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
193ac     52 00 00 FF 
193b0     BC E4 05 F1 | 	add	objptr, ##42172
193b4     F2 3C 02 FB | 	rdlong	local12, objptr
193b8     52 00 00 FF 
193bc     BC E4 85 F1 | 	sub	objptr, ##42172
193c0     1E 3C 0E F2 | 	cmp	local12, #30 wz
193c4     3C 00 90 5D |  if_ne	jmp	#LR__2065
193c8     30 4F 05 F1 | 	add	fp, #304
193cc     A7 3E 02 FB | 	rdlong	local13, fp
193d0     02 3E 66 F0 | 	shl	local13, #2
193d4     04 4F 85 F1 | 	sub	fp, #260
193d8     A7 44 02 F6 | 	mov	local16, fp
193dc     A7 3E 02 F1 | 	add	local13, fp
193e0     1F 13 02 FB | 	rdlong	arg01, local13
193e4     2C 4E 85 F1 | 	sub	fp, #44
193e8     10 FC B0 FD | 	call	#__system____builtin_atof
193ec     28 4E 05 F1 | 	add	fp, #40
193f0     A7 FA 61 FC | 	wrlong	result1, fp
193f4     0C 4E 85 F1 | 	sub	fp, #12
193f8     A7 3C 02 FB | 	rdlong	local12, fp
193fc     1C 4E 85 F1 | 	sub	fp, #28
19400     1E FB 61 FC | 	wrlong	result1, local12
19404                 | LR__2065
19404                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
19404     52 00 00 FF 
19408     BC E4 05 F1 | 	add	objptr, ##42172
1940c     F2 3C 02 FB | 	rdlong	local12, objptr
19410     52 00 00 FF 
19414     BC E4 85 F1 | 	sub	objptr, ##42172
19418     2B 3C 0E F2 | 	cmp	local12, #43 wz
1941c     18 00 90 5D |  if_ne	jmp	#LR__2066
19420     1C 4E 05 F1 | 	add	fp, #28
19424     A7 12 02 FB | 	rdlong	arg01, fp
19428     0C 4E 85 F1 | 	sub	fp, #12
1942c     A7 14 02 FB | 	rdlong	arg02, fp
19430     10 4E 85 F1 | 	sub	fp, #16
19434     09 15 62 FC | 	wrlong	arg02, arg01
19438                 | LR__2066
19438     1C 4E 05 F1 | 	add	fp, #28
1943c     A7 12 02 FB | 	rdlong	arg01, fp
19440     1C 4E 85 F1 | 	sub	fp, #28
19444     08 12 06 F1 | 	add	arg01, #8
19448     52 00 00 FF 
1944c     BC E4 05 F1 | 	add	objptr, ##42172
19450     F2 14 02 FB | 	rdlong	arg02, objptr
19454     52 00 00 FF 
19458     BC E4 85 F1 | 	sub	objptr, ##42172
1945c     09 15 62 FC | 	wrlong	arg02, arg01
19460                 | LR__2067
19460                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
19460     18 4E 05 F1 | 	add	fp, #24
19464     A7 3C 02 FB | 	rdlong	local12, fp
19468     18 4E 85 F1 | 	sub	fp, #24
1946c     0C 3C 0E F2 | 	cmp	local12, #12 wz
19470     94 01 90 5D |  if_ne	jmp	#LR__2072
19474     1C 4E 05 F1 | 	add	fp, #28
19478     A7 3E 02 FB | 	rdlong	local13, fp
1947c     1C 4E 85 F1 | 	sub	fp, #28
19480     00 04 00 FF 
19484     00 3E 16 F2 | 	cmp	local13, ##524288 wc
19488     7C 01 90 CD |  if_b	jmp	#LR__2072
1948c                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1948c     52 00 00 FF 
19490     BC E4 05 F1 | 	add	objptr, ##42172
19494     F2 3C 02 FB | 	rdlong	local12, objptr
19498     52 00 00 FF 
1949c     BC E4 85 F1 | 	sub	objptr, ##42172
194a0     1C 3C 0E F2 | 	cmp	local12, #28 wz
194a4     40 00 90 5D |  if_ne	jmp	#LR__2068
194a8     1C 4E 05 F1 | 	add	fp, #28
194ac     A7 3C 02 FB | 	rdlong	local12, fp
194b0     14 4F 05 F1 | 	add	fp, #276
194b4     A7 3E 02 FB | 	rdlong	local13, fp
194b8     1F 45 02 F6 | 	mov	local16, local13
194bc     02 44 66 F0 | 	shl	local16, #2
194c0     04 4F 85 F1 | 	sub	fp, #260
194c4     A7 42 02 F6 | 	mov	local15, fp
194c8     A7 44 02 F1 | 	add	local16, fp
194cc     22 13 02 FB | 	rdlong	arg01, local16
194d0     00 14 06 F6 | 	mov	arg02, #0
194d4     2C 4E 85 F1 | 	sub	fp, #44
194d8     8C F9 B0 FD | 	call	#__system____builtin_atoi
194dc     FD 14 02 F6 | 	mov	arg02, result1
194e0     1E 13 02 F6 | 	mov	arg01, local12
194e4     44 8C B0 FD | 	call	#_pslpoke
194e8                 | LR__2068
194e8                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
194e8     52 00 00 FF 
194ec     BC E4 05 F1 | 	add	objptr, ##42172
194f0     F2 3C 02 FB | 	rdlong	local12, objptr
194f4     52 00 00 FF 
194f8     BC E4 85 F1 | 	sub	objptr, ##42172
194fc     1D 3C 0E F2 | 	cmp	local12, #29 wz
19500     40 00 90 5D |  if_ne	jmp	#LR__2069
19504     1C 4E 05 F1 | 	add	fp, #28
19508     A7 3C 02 FB | 	rdlong	local12, fp
1950c     14 4F 05 F1 | 	add	fp, #276
19510     A7 3E 02 FB | 	rdlong	local13, fp
19514     1F 45 02 F6 | 	mov	local16, local13
19518     02 44 66 F0 | 	shl	local16, #2
1951c     04 4F 85 F1 | 	sub	fp, #260
19520     A7 42 02 F6 | 	mov	local15, fp
19524     A7 44 02 F1 | 	add	local16, fp
19528     22 13 02 FB | 	rdlong	arg01, local16
1952c     00 14 06 F6 | 	mov	arg02, #0
19530     2C 4E 85 F1 | 	sub	fp, #44
19534     30 F9 B0 FD | 	call	#__system____builtin_atoi
19538     FD 14 02 F6 | 	mov	arg02, result1
1953c     1E 13 02 F6 | 	mov	arg01, local12
19540     E8 8B B0 FD | 	call	#_pslpoke
19544                 | LR__2069
19544                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19544     52 00 00 FF 
19548     BC E4 05 F1 | 	add	objptr, ##42172
1954c     F2 3C 02 FB | 	rdlong	local12, objptr
19550     52 00 00 FF 
19554     BC E4 85 F1 | 	sub	objptr, ##42172
19558     1E 3C 0E F2 | 	cmp	local12, #30 wz
1955c     4C 00 90 5D |  if_ne	jmp	#LR__2070
19560     30 4F 05 F1 | 	add	fp, #304
19564     A7 3E 02 FB | 	rdlong	local13, fp
19568     02 3E 66 F0 | 	shl	local13, #2
1956c     04 4F 85 F1 | 	sub	fp, #260
19570     A7 44 02 F6 | 	mov	local16, fp
19574     A7 3E 02 F1 | 	add	local13, fp
19578     1F 13 02 FB | 	rdlong	arg01, local13
1957c     2C 4E 85 F1 | 	sub	fp, #44
19580     78 FA B0 FD | 	call	#__system____builtin_atof
19584     28 4E 05 F1 | 	add	fp, #40
19588     A7 FA 61 FC | 	wrlong	result1, fp
1958c     0C 4E 85 F1 | 	sub	fp, #12
19590     A7 3C 02 FB | 	rdlong	local12, fp
19594     0C 4E 05 F1 | 	add	fp, #12
19598     A7 12 02 F6 | 	mov	arg01, fp
1959c     28 4E 85 F1 | 	sub	fp, #40
195a0     09 15 02 FB | 	rdlong	arg02, arg01
195a4     1E 13 02 F6 | 	mov	arg01, local12
195a8     80 8B B0 FD | 	call	#_pslpoke
195ac                 | LR__2070
195ac                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
195ac     52 00 00 FF 
195b0     BC E4 05 F1 | 	add	objptr, ##42172
195b4     F2 3C 02 FB | 	rdlong	local12, objptr
195b8     52 00 00 FF 
195bc     BC E4 85 F1 | 	sub	objptr, ##42172
195c0     2B 3C 0E F2 | 	cmp	local12, #43 wz
195c4     18 00 90 5D |  if_ne	jmp	#LR__2071
195c8     1C 4E 05 F1 | 	add	fp, #28
195cc     A7 12 02 FB | 	rdlong	arg01, fp
195d0     0C 4E 85 F1 | 	sub	fp, #12
195d4     A7 14 02 FB | 	rdlong	arg02, fp
195d8     10 4E 85 F1 | 	sub	fp, #16
195dc     4C 8B B0 FD | 	call	#_pslpoke
195e0                 | LR__2071
195e0     1C 4E 05 F1 | 	add	fp, #28
195e4     A7 12 02 FB | 	rdlong	arg01, fp
195e8     1C 4E 85 F1 | 	sub	fp, #28
195ec     08 12 06 F1 | 	add	arg01, #8
195f0     52 00 00 FF 
195f4     BC E4 05 F1 | 	add	objptr, ##42172
195f8     F2 14 02 FB | 	rdlong	arg02, objptr
195fc     52 00 00 FF 
19600     BC E4 85 F1 | 	sub	objptr, ##42172
19604     24 8B B0 FD | 	call	#_pslpoke
19608                 | LR__2072
19608                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
19608     18 4E 05 F1 | 	add	fp, #24
1960c     A7 3C 02 FB | 	rdlong	local12, fp
19610     18 4E 85 F1 | 	sub	fp, #24
19614     05 3C 0E F2 | 	cmp	local12, #5 wz
19618     52 00 00 AF 
1961c     BC E4 05 A1 |  if_e	add	objptr, ##42172
19620     F2 40 02 AB |  if_e	rdlong	local14, objptr
19624     52 00 00 AF 
19628     BC E4 85 A1 |  if_e	sub	objptr, ##42172
1962c     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
19630     18 00 90 5D |  if_ne	jmp	#LR__2073
19634     1C 4E 05 F1 | 	add	fp, #28
19638     A7 12 02 FB | 	rdlong	arg01, fp
1963c     0C 4E 85 F1 | 	sub	fp, #12
19640     A7 14 02 FB | 	rdlong	arg02, fp
19644     10 4E 85 F1 | 	sub	fp, #16
19648     E0 8A B0 FD | 	call	#_pslpoke
1964c                 | LR__2073
1964c                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1964c     18 4E 05 F1 | 	add	fp, #24
19650     A7 3C 02 FB | 	rdlong	local12, fp
19654     18 4E 85 F1 | 	sub	fp, #24
19658     04 3C 0E F2 | 	cmp	local12, #4 wz
1965c     54 00 90 5D |  if_ne	jmp	#LR__2074
19660     52 00 00 FF 
19664     BC E4 05 F1 | 	add	objptr, ##42172
19668     F2 40 02 FB | 	rdlong	local14, objptr
1966c     52 00 00 FF 
19670     BC E4 85 F1 | 	sub	objptr, ##42172
19674     2B 40 0E F2 | 	cmp	local14, #43 wz
19678     38 00 90 AD |  if_e	jmp	#LR__2074
1967c     1C 4E 05 F1 | 	add	fp, #28
19680     A7 3C 02 FB | 	rdlong	local12, fp
19684     14 4F 05 F1 | 	add	fp, #276
19688     A7 44 02 FB | 	rdlong	local16, fp
1968c     02 44 66 F0 | 	shl	local16, #2
19690     04 4F 85 F1 | 	sub	fp, #260
19694     A7 44 02 F1 | 	add	local16, fp
19698     22 13 02 FB | 	rdlong	arg01, local16
1969c     00 14 06 F6 | 	mov	arg02, #0
196a0     2C 4E 85 F1 | 	sub	fp, #44
196a4     C0 F7 B0 FD | 	call	#__system____builtin_atoi
196a8     FD 14 02 F6 | 	mov	arg02, result1
196ac     1E 13 02 F6 | 	mov	arg01, local12
196b0     78 8A B0 FD | 	call	#_pslpoke
196b4                 | LR__2074
196b4                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
196b4     18 4E 05 F1 | 	add	fp, #24
196b8     A7 3C 02 FB | 	rdlong	local12, fp
196bc     18 4E 85 F1 | 	sub	fp, #24
196c0     02 3C 0E F2 | 	cmp	local12, #2 wz
196c4     54 00 90 5D |  if_ne	jmp	#LR__2075
196c8     52 00 00 FF 
196cc     BC E4 05 F1 | 	add	objptr, ##42172
196d0     F2 40 02 FB | 	rdlong	local14, objptr
196d4     52 00 00 FF 
196d8     BC E4 85 F1 | 	sub	objptr, ##42172
196dc     2B 40 0E F2 | 	cmp	local14, #43 wz
196e0     38 00 90 AD |  if_e	jmp	#LR__2075
196e4     1C 4E 05 F1 | 	add	fp, #28
196e8     A7 3C 02 FB | 	rdlong	local12, fp
196ec     14 4F 05 F1 | 	add	fp, #276
196f0     A7 44 02 FB | 	rdlong	local16, fp
196f4     02 44 66 F0 | 	shl	local16, #2
196f8     04 4F 85 F1 | 	sub	fp, #260
196fc     A7 44 02 F1 | 	add	local16, fp
19700     22 13 02 FB | 	rdlong	arg01, local16
19704     00 14 06 F6 | 	mov	arg02, #0
19708     2C 4E 85 F1 | 	sub	fp, #44
1970c     58 F7 B0 FD | 	call	#__system____builtin_atoi
19710     FD 14 02 F6 | 	mov	arg02, result1
19714     1E 13 02 F6 | 	mov	arg01, local12
19718     58 8A B0 FD | 	call	#_psdpoke
1971c                 | LR__2075
1971c                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1971c     18 4E 05 F1 | 	add	fp, #24
19720     A7 3C 02 FB | 	rdlong	local12, fp
19724     18 4E 85 F1 | 	sub	fp, #24
19728     01 3C 0E F2 | 	cmp	local12, #1 wz
1972c     54 00 90 5D |  if_ne	jmp	#LR__2076
19730     52 00 00 FF 
19734     BC E4 05 F1 | 	add	objptr, ##42172
19738     F2 40 02 FB | 	rdlong	local14, objptr
1973c     52 00 00 FF 
19740     BC E4 85 F1 | 	sub	objptr, ##42172
19744     2B 40 0E F2 | 	cmp	local14, #43 wz
19748     38 00 90 AD |  if_e	jmp	#LR__2076
1974c     1C 4E 05 F1 | 	add	fp, #28
19750     A7 3C 02 FB | 	rdlong	local12, fp
19754     14 4F 05 F1 | 	add	fp, #276
19758     A7 44 02 FB | 	rdlong	local16, fp
1975c     02 44 66 F0 | 	shl	local16, #2
19760     04 4F 85 F1 | 	sub	fp, #260
19764     A7 44 02 F1 | 	add	local16, fp
19768     22 13 02 FB | 	rdlong	arg01, local16
1976c     00 14 06 F6 | 	mov	arg02, #0
19770     2C 4E 85 F1 | 	sub	fp, #44
19774     F0 F6 B0 FD | 	call	#__system____builtin_atoi
19778     FD 14 02 F6 | 	mov	arg02, result1
1977c     1E 13 02 F6 | 	mov	arg01, local12
19780     38 8A B0 FD | 	call	#_pspoke
19784                 | LR__2076
19784                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19784     18 4E 05 F1 | 	add	fp, #24
19788     A7 3C 02 FB | 	rdlong	local12, fp
1978c     18 4E 85 F1 | 	sub	fp, #24
19790     06 3C 0E F2 | 	cmp	local12, #6 wz
19794     64 00 90 5D |  if_ne	jmp	#LR__2077
19798     52 00 00 FF 
1979c     BC E4 05 F1 | 	add	objptr, ##42172
197a0     F2 40 02 FB | 	rdlong	local14, objptr
197a4     52 00 00 FF 
197a8     BC E4 85 F1 | 	sub	objptr, ##42172
197ac     2B 40 0E F2 | 	cmp	local14, #43 wz
197b0     48 00 90 AD |  if_e	jmp	#LR__2077
197b4     30 4F 05 F1 | 	add	fp, #304
197b8     A7 3E 02 FB | 	rdlong	local13, fp
197bc     02 3E 66 F0 | 	shl	local13, #2
197c0     04 4F 85 F1 | 	sub	fp, #260
197c4     A7 3E 02 F1 | 	add	local13, fp
197c8     1F 13 02 FB | 	rdlong	arg01, local13
197cc     2C 4E 85 F1 | 	sub	fp, #44
197d0     28 F8 B0 FD | 	call	#__system____builtin_atof
197d4     28 4E 05 F1 | 	add	fp, #40
197d8     A7 FA 61 FC | 	wrlong	result1, fp
197dc     0C 4E 85 F1 | 	sub	fp, #12
197e0     A7 3C 02 FB | 	rdlong	local12, fp
197e4     0C 4E 05 F1 | 	add	fp, #12
197e8     A7 12 02 F6 | 	mov	arg01, fp
197ec     28 4E 85 F1 | 	sub	fp, #40
197f0     09 15 02 FB | 	rdlong	arg02, arg01
197f4     1E 13 02 F6 | 	mov	arg01, local12
197f8     30 89 B0 FD | 	call	#_pslpoke
197fc                 | LR__2077
197fc                 | LR__2078
197fc     30 4F 05 F1 | 	add	fp, #304
19800     A7 40 02 FB | 	rdlong	local14, fp
19804     01 40 06 F1 | 	add	local14, #1
19808     A7 40 62 FC | 	wrlong	local14, fp
1980c     30 4F 85 F1 | 	sub	fp, #304
19810     C8 F6 9F FD | 	jmp	#LR__2042
19814                 | LR__2079
19814                 | LR__2080
19814     A7 F0 03 F6 | 	mov	ptra, fp
19818     B2 00 A0 FD | 	call	#popregs_
1981c                 | _do_read_ret
1981c     2D 00 64 FD | 	ret
19820                 | 
19820                 | ' 
19820                 | ' '------------------- release
19820                 | ' 
19820                 | ' sub do_release
19820                 | _do_release
19820     00 4A 05 F6 | 	mov	COUNT_, #0
19824     A8 00 A0 FD | 	call	#pushregs_
19828     10 F0 07 F1 | 	add	ptra, #16
1982c     50 34 BF FD | 	call	#_pop
19830     FF 14 02 F6 | 	mov	arg02, result3
19834     A7 FA 61 FC | 	wrlong	result1, fp
19838     04 4E 05 F1 | 	add	fp, #4
1983c     A7 FC 61 FC | 	wrlong	result2, fp
19840     04 4E 05 F1 | 	add	fp, #4
19844     A7 14 62 FC | 	wrlong	arg02, fp
19848     08 4E 85 F1 | 	sub	fp, #8
1984c     A7 12 02 F6 | 	mov	arg01, fp
19850     10 36 BF FD | 	call	#_converttoint
19854     0C 4E 05 F1 | 	add	fp, #12
19858     A7 FA 61 FC | 	wrlong	result1, fp
1985c                 | ' 
1985c                 | ' t1=pop()
1985c                 | ' channel=converttoint(t1)
1985c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1985c     0C 4E 85 F1 | 	sub	fp, #12
19860     00 FA 55 F2 | 	cmps	result1, #0 wc
19864     44 00 90 CD |  if_b	jmp	#LR__2090
19868     0C 4E 05 F1 | 	add	fp, #12
1986c     A7 14 02 FB | 	rdlong	arg02, fp
19870     0C 4E 85 F1 | 	sub	fp, #12
19874     08 14 56 F2 | 	cmps	arg02, #8 wc
19878     30 00 90 3D |  if_ae	jmp	#LR__2090
1987c     37 00 00 FF 
19880     10 E4 05 F1 | 	add	objptr, ##28176
19884     F2 12 02 FB | 	rdlong	arg01, objptr
19888     37 00 00 FF 
1988c     10 E4 85 F1 | 	sub	objptr, ##28176
19890     0C 4E 05 F1 | 	add	fp, #12
19894     A7 14 02 FB | 	rdlong	arg02, fp
19898     0C 4E 85 F1 | 	sub	fp, #12
1989c     06 14 66 F0 | 	shl	arg02, #6
198a0     0A 13 02 F1 | 	add	arg01, arg02
198a4     2C 12 06 F1 | 	add	arg01, #44
198a8     09 FF 69 FC | 	wrlong	#255, arg01
198ac                 | LR__2090
198ac     A7 F0 03 F6 | 	mov	ptra, fp
198b0     B2 00 A0 FD | 	call	#popregs_
198b4                 | _do_release_ret
198b4     2D 00 64 FD | 	ret
198b8                 | 
198b8                 | ' 
198b8                 | ' '------------------- restore
198b8                 | ' 
198b8                 | ' sub do_restore()
198b8                 | _do_restore
198b8     4A 00 00 FF 
198bc     88 E4 05 F1 | 	add	objptr, ##38024
198c0     F2 00 02 FB | 	rdlong	_var01, objptr
198c4     06 00 00 FF 
198c8     A4 E4 05 F1 | 	add	objptr, ##3236
198cc     F2 00 62 FC | 	wrlong	_var01, objptr
198d0     AF 01 00 FF 
198d4     3B 01 06 F6 | 	mov	_var01, ##@LR__5922
198d8     01 00 00 FF 
198dc     5C E5 05 F1 | 	add	objptr, ##860
198e0     F2 00 62 FC | 	wrlong	_var01, objptr
198e4     52 00 00 FF 
198e8     88 E4 85 F1 | 	sub	objptr, ##42120
198ec                 | _do_restore_ret
198ec     2D 00 64 FD | 	ret
198f0                 | 
198f0                 | ' 
198f0                 | ' '------------------- return
198f0                 | ' 
198f0                 | ' sub do_return()
198f0                 | _do_return
198f0                 | ' if gosubtop>0 then
198f0     50 00 00 FF 
198f4     34 E5 05 F1 | 	add	objptr, ##41268
198f8     F2 00 02 FB | 	rdlong	_var01, objptr
198fc     50 00 00 FF 
19900     34 E5 85 F1 | 	sub	objptr, ##41268
19904     01 00 56 F2 | 	cmps	_var01, #1 wc
19908     8C 00 90 CD |  if_b	jmp	#LR__2100
1990c     50 00 00 FF 
19910     34 E5 05 F1 | 	add	objptr, ##41268
19914     F2 00 02 FB | 	rdlong	_var01, objptr
19918     03 00 66 F0 | 	shl	_var01, #3
1991c     03 00 00 FF 
19920     88 E5 85 F1 | 	sub	objptr, ##1928
19924     F2 00 02 F1 | 	add	_var01, objptr
19928     00 01 02 FB | 	rdlong	_var01, _var01
1992c     03 00 00 FF 
19930     0C E5 05 F1 | 	add	objptr, ##1804
19934     F2 00 62 FC | 	wrlong	_var01, objptr
19938     7C E4 05 F1 | 	add	objptr, #124
1993c     F2 00 02 FB | 	rdlong	_var01, objptr
19940     03 00 66 F0 | 	shl	_var01, #3
19944     03 00 00 FF 
19948     88 E5 85 F1 | 	sub	objptr, ##1928
1994c     F2 00 02 F1 | 	add	_var01, objptr
19950     04 00 06 F1 | 	add	_var01, #4
19954     00 01 02 FB | 	rdlong	_var01, _var01
19958     03 00 00 FF 
1995c     10 E5 05 F1 | 	add	objptr, ##1808
19960     F2 00 62 FC | 	wrlong	_var01, objptr
19964     06 00 00 FF 
19968     40 E4 85 F1 | 	sub	objptr, ##3136
1996c     F2 00 02 FB | 	rdlong	_var01, objptr
19970     01 00 86 F1 | 	sub	_var01, #1
19974     04 E4 05 F1 | 	add	objptr, #4
19978     F2 00 62 FC | 	wrlong	_var01, objptr
1997c     06 00 00 FF 
19980     B4 E4 05 F1 | 	add	objptr, ##3252
19984     F2 00 02 FB | 	rdlong	_var01, objptr
19988     01 00 86 F1 | 	sub	_var01, #1
1998c     F2 00 62 FC | 	wrlong	_var01, objptr
19990     50 00 00 FF 
19994     34 E5 85 F1 | 	sub	objptr, ##41268
19998                 | LR__2100
19998                 | _do_return_ret
19998     2D 00 64 FD | 	ret
1999c                 | 
1999c                 | ' 
1999c                 | ' '------------------- right$
1999c                 | ' 
1999c                 | ' sub do_right
1999c                 | _do_right
1999c     00 4A 05 F6 | 	mov	COUNT_, #0
199a0     A8 00 A0 FD | 	call	#pushregs_
199a4     14 F0 07 F1 | 	add	ptra, #20
199a8     4A 00 00 FF 
199ac     80 E4 05 F1 | 	add	objptr, ##38016
199b0     F2 16 02 FB | 	rdlong	arg03, objptr
199b4     0B 15 02 F6 | 	mov	arg02, arg03
199b8     01 14 66 F0 | 	shl	arg02, #1
199bc     0B 15 02 F1 | 	add	arg02, arg03
199c0     02 14 66 F0 | 	shl	arg02, #2
199c4     03 00 00 FF 
199c8     04 E4 85 F1 | 	sub	objptr, ##1540
199cc     F2 14 02 F1 | 	add	arg02, objptr
199d0     0A 17 02 FB | 	rdlong	arg03, arg02
199d4     0C 4E 05 F1 | 	add	fp, #12
199d8     A7 16 62 FC | 	wrlong	arg03, fp
199dc                 | ' 
199dc                 | ' numpar=compiledline(lineptr_e).result.uresult
199dc                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
199dc     0C 4E 85 F1 | 	sub	fp, #12
199e0     02 16 0E F2 | 	cmp	arg03, #2 wz
199e4     47 00 00 FF 
199e8     7C E4 85 F1 | 	sub	objptr, ##36476
199ec     40 00 90 AD |  if_e	jmp	#LR__2110
199f0     00 12 06 F6 | 	mov	arg01, #0
199f4     A8 1C B1 FD | 	call	#__system___getiolock_0599
199f8     FD 12 02 F6 | 	mov	arg01, result1
199fc     78 BF B0 FD | 	call	#__system___lockmem
19a00     AF 01 00 FF 
19a04     3C 15 06 F6 | 	mov	arg02, ##@LR__5923
19a08     00 12 06 F6 | 	mov	arg01, #0
19a0c     00 16 06 F6 | 	mov	arg03, #0
19a10     58 CC B0 FD | 	call	#__system___basic_print_string
19a14     00 12 06 F6 | 	mov	arg01, #0
19a18     84 1C B1 FD | 	call	#__system___getiolock_0599
19a1c     FD 00 68 FC | 	wrlong	#0, result1
19a20     27 12 06 F6 | 	mov	arg01, #39
19a24     00 14 06 F6 | 	mov	arg02, #0
19a28     60 85 B0 FD | 	call	#_printerror
19a2c     EC 00 90 FD | 	jmp	#LR__2113
19a30                 | LR__2110
19a30     4C 32 BF FD | 	call	#_pop
19a34     FF 16 02 F6 | 	mov	arg03, result3
19a38     A7 FA 61 FC | 	wrlong	result1, fp
19a3c     04 4E 05 F1 | 	add	fp, #4
19a40     A7 FC 61 FC | 	wrlong	result2, fp
19a44     04 4E 05 F1 | 	add	fp, #4
19a48     A7 16 62 FC | 	wrlong	arg03, fp
19a4c     08 4E 85 F1 | 	sub	fp, #8
19a50     A7 12 02 F6 | 	mov	arg01, fp
19a54     0C 34 BF FD | 	call	#_converttoint
19a58     FD 16 02 F6 | 	mov	arg03, result1
19a5c     10 4E 05 F1 | 	add	fp, #16
19a60     A7 16 62 FC | 	wrlong	arg03, fp
19a64     10 4E 85 F1 | 	sub	fp, #16
19a68     14 32 BF FD | 	call	#_pop
19a6c     FF 16 02 F6 | 	mov	arg03, result3
19a70     A7 FA 61 FC | 	wrlong	result1, fp
19a74     04 4E 05 F1 | 	add	fp, #4
19a78     A7 FC 61 FC | 	wrlong	result2, fp
19a7c     04 4E 05 F1 | 	add	fp, #4
19a80     A7 16 62 FC | 	wrlong	arg03, fp
19a84                 | ' t1=pop() : arg=converttoint(t1)
19a84                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
19a84     08 4E 85 F1 | 	sub	fp, #8
19a88     2B 16 0E F2 | 	cmp	arg03, #43 wz
19a8c     18 00 90 5D |  if_ne	jmp	#LR__2111
19a90     A7 12 02 FB | 	rdlong	arg01, fp
19a94     60 33 BF FD | 	call	#_convertstring
19a98     A7 FA 61 FC | 	wrlong	result1, fp
19a9c     08 4E 05 F1 | 	add	fp, #8
19aa0     A7 3E 68 FC | 	wrlong	#31, fp
19aa4     08 4E 85 F1 | 	sub	fp, #8
19aa8                 | LR__2111
19aa8                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
19aa8     08 4E 05 F1 | 	add	fp, #8
19aac     A7 16 02 FB | 	rdlong	arg03, fp
19ab0     08 4E 85 F1 | 	sub	fp, #8
19ab4     1F 16 0E F2 | 	cmp	arg03, #31 wz
19ab8     40 00 90 AD |  if_e	jmp	#LR__2112
19abc     00 12 06 F6 | 	mov	arg01, #0
19ac0     DC 1B B1 FD | 	call	#__system___getiolock_0599
19ac4     FD 12 02 F6 | 	mov	arg01, result1
19ac8     AC BE B0 FD | 	call	#__system___lockmem
19acc     AF 01 00 FF 
19ad0     45 15 06 F6 | 	mov	arg02, ##@LR__5924
19ad4     00 12 06 F6 | 	mov	arg01, #0
19ad8     00 16 06 F6 | 	mov	arg03, #0
19adc     8C CB B0 FD | 	call	#__system___basic_print_string
19ae0     00 12 06 F6 | 	mov	arg01, #0
19ae4     B8 1B B1 FD | 	call	#__system___getiolock_0599
19ae8     FD 00 68 FC | 	wrlong	#0, result1
19aec     0F 12 06 F6 | 	mov	arg01, #15
19af0     00 14 06 F6 | 	mov	arg02, #0
19af4     94 84 B0 FD | 	call	#_printerror
19af8     20 00 90 FD | 	jmp	#LR__2113
19afc                 | LR__2112
19afc     A7 12 02 FB | 	rdlong	arg01, fp
19b00     10 4E 05 F1 | 	add	fp, #16
19b04     A7 14 02 FB | 	rdlong	arg02, fp
19b08     10 4E 85 F1 | 	sub	fp, #16
19b0c     6C DF B0 FD | 	call	#__system__Right_S
19b10     A7 FA 61 FC | 	wrlong	result1, fp
19b14     A7 12 02 F6 | 	mov	arg01, fp
19b18     FC 31 BF FD | 	call	#_push
19b1c                 | LR__2113
19b1c     A7 F0 03 F6 | 	mov	ptra, fp
19b20     B2 00 A0 FD | 	call	#popregs_
19b24                 | _do_right_ret
19b24     2D 00 64 FD | 	ret
19b28                 | 
19b28                 | ' 
19b28                 | ' '------------------- rnd
19b28                 | ' 
19b28                 | ' sub do_rnd
19b28                 | _do_rnd
19b28     01 4A 05 F6 | 	mov	COUNT_, #1
19b2c     A8 00 A0 FD | 	call	#pushregs_
19b30     10 F0 07 F1 | 	add	ptra, #16
19b34     4A 00 00 FF 
19b38     80 E4 05 F1 | 	add	objptr, ##38016
19b3c     F2 26 02 FB | 	rdlong	local01, objptr
19b40     13 17 02 F6 | 	mov	arg03, local01
19b44     01 16 66 F0 | 	shl	arg03, #1
19b48     13 17 02 F1 | 	add	arg03, local01
19b4c     02 16 66 F0 | 	shl	arg03, #2
19b50     03 00 00 FF 
19b54     04 E4 85 F1 | 	sub	objptr, ##1540
19b58     F2 16 02 F1 | 	add	arg03, objptr
19b5c     0B 17 02 FB | 	rdlong	arg03, arg03
19b60     0C 4E 05 F1 | 	add	fp, #12
19b64     A7 16 62 FC | 	wrlong	arg03, fp
19b68                 | ' 
19b68                 | ' numpar=compiledline(lineptr_e).result.uresult
19b68                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
19b68     0C 4E 85 F1 | 	sub	fp, #12
19b6c     02 16 16 F2 | 	cmp	arg03, #2 wc
19b70     47 00 00 FF 
19b74     7C E4 85 F1 | 	sub	objptr, ##36476
19b78     40 00 90 CD |  if_b	jmp	#LR__2120
19b7c     00 12 06 F6 | 	mov	arg01, #0
19b80     1C 1B B1 FD | 	call	#__system___getiolock_0599
19b84     FD 12 02 F6 | 	mov	arg01, result1
19b88     EC BD B0 FD | 	call	#__system___lockmem
19b8c     AF 01 00 FF 
19b90     4E 15 06 F6 | 	mov	arg02, ##@LR__5925
19b94     00 12 06 F6 | 	mov	arg01, #0
19b98     00 16 06 F6 | 	mov	arg03, #0
19b9c     CC CA B0 FD | 	call	#__system___basic_print_string
19ba0     00 12 06 F6 | 	mov	arg01, #0
19ba4     F8 1A B1 FD | 	call	#__system___getiolock_0599
19ba8     FD 00 68 FC | 	wrlong	#0, result1
19bac     27 12 06 F6 | 	mov	arg01, #39
19bb0     00 14 06 F6 | 	mov	arg02, #0
19bb4     D4 83 B0 FD | 	call	#_printerror
19bb8     30 01 90 FD | 	jmp	#LR__2127
19bbc                 | LR__2120
19bbc                 | ' if numpar=0 then
19bbc     0C 4E 05 F1 | 	add	fp, #12
19bc0     A7 FE 09 FB | 	rdlong	result3, fp wz
19bc4     0C 4E 85 F1 | 	sub	fp, #12
19bc8     20 00 90 5D |  if_ne	jmp	#LR__2121
19bcc     08 4E 05 F1 | 	add	fp, #8
19bd0     A7 3A 68 FC | 	wrlong	#29, fp
19bd4     08 4E 85 F1 | 	sub	fp, #8
19bd8     1B FA 61 FD | 	getrnd	result1
19bdc     A7 FA 61 FC | 	wrlong	result1, fp
19be0     A7 12 02 F6 | 	mov	arg01, fp
19be4     30 31 BF FD | 	call	#_push
19be8     00 01 90 FD | 	jmp	#LR__2126
19bec                 | LR__2121
19bec     90 30 BF FD | 	call	#_pop
19bf0     A7 FA 61 FC | 	wrlong	result1, fp
19bf4     04 4E 05 F1 | 	add	fp, #4
19bf8     A7 FC 61 FC | 	wrlong	result2, fp
19bfc     04 4E 05 F1 | 	add	fp, #4
19c00     A7 FE 61 FC | 	wrlong	result3, fp
19c04                 | '   t1=pop()
19c04                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
19c04     08 4E 85 F1 | 	sub	fp, #8
19c08     1C FE 0D F2 | 	cmp	result3, #28 wz
19c0c     08 4E 05 51 |  if_ne	add	fp, #8
19c10     A7 26 02 5B |  if_ne	rdlong	local01, fp
19c14     08 4E 85 51 |  if_ne	sub	fp, #8
19c18     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
19c1c     2C 00 90 5D |  if_ne	jmp	#LR__2122
19c20     1B FA 61 FD | 	getrnd	result1
19c24     A7 26 02 FB | 	rdlong	local01, fp
19c28     13 FB 11 FD | 	qdiv	result1, local01
19c2c     A7 12 02 F6 | 	mov	arg01, fp
19c30     19 26 62 FD | 	getqy	local01
19c34     A7 26 62 FC | 	wrlong	local01, fp
19c38     08 4E 05 F1 | 	add	fp, #8
19c3c     A7 3A 68 FC | 	wrlong	#29, fp
19c40     08 4E 85 F1 | 	sub	fp, #8
19c44     D0 30 BF FD | 	call	#_push
19c48     A0 00 90 FD | 	jmp	#LR__2125
19c4c                 | LR__2122
19c4c     08 4E 05 F1 | 	add	fp, #8
19c50     A7 26 02 FB | 	rdlong	local01, fp
19c54     08 4E 85 F1 | 	sub	fp, #8
19c58     1E 26 0E F2 | 	cmp	local01, #30 wz
19c5c     48 00 90 5D |  if_ne	jmp	#LR__2123
19c60     A7 12 02 FB | 	rdlong	arg01, fp
19c64     00 C0 24 FF 
19c68     00 14 06 F6 | 	mov	arg02, ##1233125376
19c6c     84 ED B0 FD | 	call	#__system___float_div
19c70     FD 26 02 F6 | 	mov	local01, result1
19c74     1B 12 62 FD | 	getrnd	arg01
19c78     74 13 06 F4 | 	bitl	arg01, #372
19c7c     6C E7 B0 FD | 	call	#__system___float_fromuns
19c80     FD 14 02 F6 | 	mov	arg02, result1
19c84     13 13 02 F6 | 	mov	arg01, local01
19c88     64 EB B0 FD | 	call	#__system___float_mul
19c8c     A7 FA 61 FC | 	wrlong	result1, fp
19c90     08 4E 05 F1 | 	add	fp, #8
19c94     A7 3C 68 FC | 	wrlong	#30, fp
19c98     08 4E 85 F1 | 	sub	fp, #8
19c9c     A7 12 02 F6 | 	mov	arg01, fp
19ca0     74 30 BF FD | 	call	#_push
19ca4     44 00 90 FD | 	jmp	#LR__2124
19ca8                 | LR__2123
19ca8                 | '     print "rnd: "; : printerror(40) 
19ca8     00 12 06 F6 | 	mov	arg01, #0
19cac     F0 19 B1 FD | 	call	#__system___getiolock_0599
19cb0     FD 12 02 F6 | 	mov	arg01, result1
19cb4     C0 BC B0 FD | 	call	#__system___lockmem
19cb8     AF 01 00 FF 
19cbc     54 15 06 F6 | 	mov	arg02, ##@LR__5926
19cc0     00 12 06 F6 | 	mov	arg01, #0
19cc4     00 16 06 F6 | 	mov	arg03, #0
19cc8     A0 C9 B0 FD | 	call	#__system___basic_print_string
19ccc     00 12 06 F6 | 	mov	arg01, #0
19cd0     CC 19 B1 FD | 	call	#__system___getiolock_0599
19cd4     FD 00 68 FC | 	wrlong	#0, result1
19cd8     28 12 06 F6 | 	mov	arg01, #40
19cdc     00 14 06 F6 | 	mov	arg02, #0
19ce0     A8 82 B0 FD | 	call	#_printerror
19ce4     A7 12 02 F6 | 	mov	arg01, fp
19ce8     2C 30 BF FD | 	call	#_push
19cec                 | LR__2124
19cec                 | LR__2125
19cec                 | LR__2126
19cec                 | LR__2127
19cec     A7 F0 03 F6 | 	mov	ptra, fp
19cf0     B2 00 A0 FD | 	call	#popregs_
19cf4                 | _do_rnd_ret
19cf4     2D 00 64 FD | 	ret
19cf8                 | 
19cf8                 | ' 
19cf8                 | ' '-------------------- round
19cf8                 | ' 
19cf8                 | ' sub do_round
19cf8                 | _do_round
19cf8     00 4A 05 F6 | 	mov	COUNT_, #0
19cfc     A8 00 A0 FD | 	call	#pushregs_
19d00     0C F0 07 F1 | 	add	ptra, #12
19d04     78 2F BF FD | 	call	#_pop
19d08     A7 FA 61 FC | 	wrlong	result1, fp
19d0c     04 4E 05 F1 | 	add	fp, #4
19d10     A7 FC 61 FC | 	wrlong	result2, fp
19d14     04 4E 05 F1 | 	add	fp, #4
19d18     A7 FE 61 FC | 	wrlong	result3, fp
19d1c     08 4E 85 F1 | 	sub	fp, #8
19d20     A7 12 02 F6 | 	mov	arg01, fp
19d24     3C 31 BF FD | 	call	#_converttoint
19d28     A7 FA 61 FC | 	wrlong	result1, fp
19d2c     08 4E 05 F1 | 	add	fp, #8
19d30     A7 38 68 FC | 	wrlong	#28, fp
19d34     08 4E 85 F1 | 	sub	fp, #8
19d38     A7 12 02 F6 | 	mov	arg01, fp
19d3c     D8 2F BF FD | 	call	#_push
19d40     A7 F0 03 F6 | 	mov	ptra, fp
19d44     B2 00 A0 FD | 	call	#popregs_
19d48                 | _do_round_ret
19d48     2D 00 64 FD | 	ret
19d4c                 | 
19d4c                 | ' 
19d4c                 | ' '-------------------- rqpin
19d4c                 | ' 
19d4c                 | ' sub do_rqpin
19d4c                 | _do_rqpin
19d4c     00 4A 05 F6 | 	mov	COUNT_, #0
19d50     A8 00 A0 FD | 	call	#pushregs_
19d54     0C F0 07 F1 | 	add	ptra, #12
19d58     24 2F BF FD | 	call	#_pop
19d5c     A7 FA 61 FC | 	wrlong	result1, fp
19d60     04 4E 05 F1 | 	add	fp, #4
19d64     A7 FC 61 FC | 	wrlong	result2, fp
19d68     04 4E 05 F1 | 	add	fp, #4
19d6c     A7 FE 61 FC | 	wrlong	result3, fp
19d70     08 4E 85 F1 | 	sub	fp, #8
19d74     A7 12 02 F6 | 	mov	arg01, fp
19d78     E8 30 BF FD | 	call	#_converttoint
19d7c     FD 12 02 F6 | 	mov	arg01, result1
19d80     00 FA 05 F6 | 	mov	result1, #0
19d84     09 FB 81 FA | 	rqpin	result1, arg01
19d88     52 00 00 FF 
19d8c     BC E4 05 F1 | 	add	objptr, ##42172
19d90     F2 FA 61 FC | 	wrlong	result1, objptr
19d94     52 00 00 FF 
19d98     BC E4 85 F1 | 	sub	objptr, ##42172
19d9c     08 4E 05 F1 | 	add	fp, #8
19da0     A7 3A 68 FC | 	wrlong	#29, fp
19da4     08 4E 85 F1 | 	sub	fp, #8
19da8     A7 08 68 FC | 	wrlong	#4, fp
19dac     A7 12 02 F6 | 	mov	arg01, fp
19db0     64 2F BF FD | 	call	#_push
19db4     A7 F0 03 F6 | 	mov	ptra, fp
19db8     B2 00 A0 FD | 	call	#popregs_
19dbc                 | _do_rqpin_ret
19dbc     2D 00 64 FD | 	ret
19dc0                 | 
19dc0                 | ' 
19dc0                 | ' ' ------------------ run
19dc0                 | ' 
19dc0                 | ' sub do_run
19dc0                 | _do_run
19dc0     04 4A 05 F6 | 	mov	COUNT_, #4
19dc4     A8 00 A0 FD | 	call	#pushregs_
19dc8     4A 00 00 FF 
19dcc     80 E4 05 F1 | 	add	objptr, ##38016
19dd0     F2 26 02 FB | 	rdlong	local01, objptr
19dd4     06 00 00 FF 
19dd8     38 E4 05 F1 | 	add	objptr, ##3128
19ddc     F2 28 02 FB | 	rdlong	local02, objptr
19de0     04 E4 05 F1 | 	add	objptr, #4
19de4     F2 2A 02 FB | 	rdlong	local03, objptr
19de8     13 19 02 F6 | 	mov	arg04, local01
19dec     0C 17 02 F6 | 	mov	arg03, arg04
19df0     01 16 66 F0 | 	shl	arg03, #1
19df4     0C 17 02 F1 | 	add	arg03, arg04
19df8     02 16 66 F0 | 	shl	arg03, #2
19dfc     09 00 00 FF 
19e00     40 E4 85 F1 | 	sub	objptr, ##4672
19e04     F2 16 02 F1 | 	add	arg03, objptr
19e08     0B 15 02 FB | 	rdlong	arg02, arg03
19e0c                 | ' 
19e0c                 | ' r_lineptr_e=lineptr_e
19e0c                 | ' r_runptr=runptr
19e0c                 | ' r_runptr2=runptr2
19e0c                 | ' 
19e0c                 | ' numpar=compiledline(lineptr_e).result.uresult
19e0c                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
19e0c     01 14 0E F2 | 	cmp	arg02, #1 wz
19e10     47 00 00 FF 
19e14     7C E4 85 F1 | 	sub	objptr, ##36476
19e18     00 12 06 A6 |  if_e	mov	arg01, #0
19e1c     EC A8 BF AD |  if_e	call	#_do_load
19e20     4A 00 00 FF 
19e24     88 E4 05 F1 | 	add	objptr, ##38024
19e28     F2 18 02 FB | 	rdlong	arg04, objptr
19e2c     06 00 00 FF 
19e30     30 E4 05 F1 | 	add	objptr, ##3120
19e34     F2 18 62 FC | 	wrlong	arg04, objptr
19e38     04 E4 05 F1 | 	add	objptr, #4
19e3c     F2 00 68 FC | 	wrlong	#0, objptr
19e40     04 E4 05 F1 | 	add	objptr, #4
19e44     FF FF FF FF 
19e48     F2 FE 6B FC | 	wrlong	##-1, objptr
19e4c     06 00 00 FF 
19e50     38 E4 85 F1 | 	sub	objptr, ##3128
19e54     F2 18 02 FB | 	rdlong	arg04, objptr
19e58     06 00 00 FF 
19e5c     A4 E4 05 F1 | 	add	objptr, ##3236
19e60     F2 18 62 FC | 	wrlong	arg04, objptr
19e64     AF 01 00 FF 
19e68     5A 19 06 F6 | 	mov	arg04, ##@LR__5927
19e6c     01 00 00 FF 
19e70     5C E5 05 F1 | 	add	objptr, ##860
19e74     F2 18 62 FC | 	wrlong	arg04, objptr
19e78                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
19e78                 | ' dataptr=programstart : readline="" ' reset the data pointer
19e78                 | ' if inrun>0 then 
19e78     01 00 00 FF 
19e7c     9C E5 85 F1 | 	sub	objptr, ##924
19e80     F2 18 02 FB | 	rdlong	arg04, objptr
19e84     50 00 00 FF 
19e88     EC E4 85 F1 | 	sub	objptr, ##41196
19e8c     01 18 16 F2 | 	cmp	arg04, #1 wc
19e90     30 00 90 CD |  if_b	jmp	#LR__2130
19e94     50 00 00 FF 
19e98     F0 E4 05 F1 | 	add	objptr, ##41200
19e9c     F2 12 02 F6 | 	mov	arg01, objptr
19ea0     38 E4 85 F1 | 	sub	objptr, #56
19ea4     F2 14 02 FB | 	rdlong	arg02, objptr
19ea8     18 16 06 F6 | 	mov	arg03, #24
19eac     44 00 00 FF 
19eb0     EC E5 85 F1 | 	sub	objptr, ##35308
19eb4     38 AE B0 FD | 	call	#_psram_spin2_read1
19eb8     0B 00 00 FF 
19ebc     CC E4 85 F1 | 	sub	objptr, ##5836
19ec0                 | '   psram.read1(varptr(runheader),runptr,24)  
19ec0                 | '   return
19ec0     0C 03 90 FD | 	jmp	#LR__2137
19ec4                 | LR__2130
19ec4     50 00 00 FF 
19ec8     EC E4 05 F1 | 	add	objptr, ##41196
19ecc     F2 02 68 FC | 	wrlong	#1, objptr
19ed0     04 E4 05 F1 | 	add	objptr, #4
19ed4     F2 12 02 F6 | 	mov	arg01, objptr
19ed8     38 E4 85 F1 | 	sub	objptr, #56
19edc     F2 14 02 FB | 	rdlong	arg02, objptr
19ee0     18 16 06 F6 | 	mov	arg03, #24
19ee4     44 00 00 FF 
19ee8     EC E5 85 F1 | 	sub	objptr, ##35308
19eec     00 AE B0 FD | 	call	#_psram_spin2_read1
19ef0                 | ' inrun=1
19ef0                 | ' psram.read1(varptr(runheader),runptr,24) 
19ef0                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
19ef0     45 00 00 FF 
19ef4     24 E4 05 F1 | 	add	objptr, ##35364
19ef8     F2 2C 02 FB | 	rdlong	local04, objptr
19efc     50 00 00 FF 
19f00     F0 E4 85 F1 | 	sub	objptr, ##41200
19f04     FF FF 7F FF 
19f08     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
19f0c     50 00 00 AF 
19f10     EC E4 05 A1 |  if_e	add	objptr, ##41196
19f14     F2 00 68 AC |  if_e	wrlong	#0, objptr
19f18     50 00 00 AF 
19f1c     EC E4 85 A1 |  if_e	sub	objptr, ##41196
19f20     AC 02 90 AD |  if_e	jmp	#LR__2137
19f24                 | ' do 
19f24                 | LR__2131
19f24                 | '   if runptr<>oldrunptr then
19f24     50 00 00 FF 
19f28     B8 E4 05 F1 | 	add	objptr, ##41144
19f2c     F2 2C 02 FB | 	rdlong	local04, objptr
19f30     08 E4 05 F1 | 	add	objptr, #8
19f34     F2 18 02 FB | 	rdlong	arg04, objptr
19f38     50 00 00 FF 
19f3c     C0 E4 85 F1 | 	sub	objptr, ##41152
19f40     0C 2D 0A F2 | 	cmp	local04, arg04 wz
19f44     CC 00 90 AD |  if_e	jmp	#LR__2132
19f48     50 00 00 FF 
19f4c     F0 E4 05 F1 | 	add	objptr, ##41200
19f50     F2 12 02 F6 | 	mov	arg01, objptr
19f54     38 E4 85 F1 | 	sub	objptr, #56
19f58     F2 14 02 FB | 	rdlong	arg02, objptr
19f5c     18 16 06 F6 | 	mov	arg03, #24
19f60     44 00 00 FF 
19f64     EC E5 85 F1 | 	sub	objptr, ##35308
19f68     84 AD B0 FD | 	call	#_psram_spin2_read1
19f6c     3B 00 00 FF 
19f70     B0 E5 05 F1 | 	add	objptr, ##30640
19f74     F2 12 02 F6 | 	mov	arg01, objptr
19f78     09 00 00 FF 
19f7c     3C E4 05 F1 | 	add	objptr, ##4668
19f80     F2 14 02 FB | 	rdlong	arg02, objptr
19f84     0B 00 00 FF 
19f88     54 E4 85 F1 | 	sub	objptr, ##5716
19f8c     F2 2C 02 FB | 	rdlong	local04, objptr
19f90     01 2C 66 F0 | 	shl	local04, #1
19f94     16 15 02 F1 | 	add	arg02, local04
19f98     0B 00 00 FF 
19f9c     94 E4 05 F1 | 	add	objptr, ##5780
19fa0     F2 16 02 FB | 	rdlong	arg03, objptr
19fa4     40 E4 85 F1 | 	sub	objptr, #64
19fa8     F2 2C 02 FB | 	rdlong	local04, objptr
19fac     16 17 82 F1 | 	sub	arg03, local04
19fb0     44 00 00 FF 
19fb4     EC E5 85 F1 | 	sub	objptr, ##35308
19fb8     34 AD B0 FD | 	call	#_psram_spin2_read1
19fbc     45 00 00 FF 
19fc0     2C E4 05 F1 | 	add	objptr, ##35372
19fc4     F2 2C 02 FB | 	rdlong	local04, objptr
19fc8     40 E4 85 F1 | 	sub	objptr, #64
19fcc     F2 14 02 FB | 	rdlong	arg02, objptr
19fd0     0A 2D 82 F1 | 	sub	local04, arg02
19fd4     0B 00 00 FF 
19fd8     54 E4 85 F1 | 	sub	objptr, ##5716
19fdc     F2 14 02 FB | 	rdlong	arg02, objptr
19fe0     0A 2D 12 FD | 	qdiv	local04, arg02
19fe4     05 00 00 FF 
19fe8     18 E4 05 F1 | 	add	objptr, ##2584
19fec     18 2C 62 FD | 	getqx	local04
19ff0     03 2C 86 F1 | 	sub	local04, #3
19ff4     F2 2C 62 FC | 	wrlong	local04, objptr
19ff8     06 00 00 FF 
19ffc     3C E4 05 F1 | 	add	objptr, ##3132
1a000     F2 2C 02 FB | 	rdlong	local04, objptr
1a004     08 E4 05 F1 | 	add	objptr, #8
1a008     F2 2C 62 FC | 	wrlong	local04, objptr
1a00c     50 00 00 FF 
1a010     C0 E4 85 F1 | 	sub	objptr, ##41152
1a014                 | LR__2132
1a014     50 00 00 FF 
1a018     04 E5 05 F1 | 	add	objptr, ##41220
1a01c     F2 2C 02 FB | 	rdlong	local04, objptr
1a020     4C E4 85 F1 | 	sub	objptr, #76
1a024     F2 2C 62 FC | 	wrlong	local04, objptr
1a028     04 E4 05 F1 | 	add	objptr, #4
1a02c     F2 12 02 FB | 	rdlong	arg01, objptr
1a030     50 00 00 FF 
1a034     BC E4 85 F1 | 	sub	objptr, ##41148
1a038     40 2B BF FD | 	call	#_execute_line
1a03c     50 00 00 FF 
1a040     BC E4 05 F1 | 	add	objptr, ##41148
1a044     F2 FA 61 FC | 	wrlong	result1, objptr
1a048     04 E4 85 F1 | 	sub	objptr, #4
1a04c     F2 2C 02 FB | 	rdlong	local04, objptr
1a050     50 00 00 FF 
1a054     B8 E4 85 F1 | 	sub	objptr, ##41144
1a058     FF FF 3F FF 
1a05c     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1a060     4C 00 90 AD |  if_e	jmp	#LR__2135
1a064     E0 12 06 F6 | 	mov	arg01, #224
1a068     14 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1a06c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a070     10 00 90 5D |  if_ne	jmp	#LR__2133
1a074     E4 12 06 F6 | 	mov	arg01, #228
1a078     04 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1a07c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a080     10 00 90 AD |  if_e	jmp	#LR__2134
1a084                 | LR__2133
1a084     06 12 06 F6 | 	mov	arg01, #6
1a088     F4 AF B0 FD | 	call	#_usbnew_spin2_keystate
1a08c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a090     1C 00 90 5D |  if_ne	jmp	#LR__2135
1a094                 | LR__2134
1a094     50 00 00 FF 
1a098     EC E4 05 F1 | 	add	objptr, ##41196
1a09c     F2 2C 02 FB | 	rdlong	local04, objptr
1a0a0     50 00 00 FF 
1a0a4     EC E4 85 F1 | 	sub	objptr, ##41196
1a0a8     02 2C 0E F2 | 	cmp	local04, #2 wz
1a0ac     74 FE 9F 5D |  if_ne	jmp	#LR__2131
1a0b0                 | LR__2135
1a0b0                 | '   ''do whatever kbm.peek_latest_key()=$106 
1a0b0                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1a0b0     50 00 00 FF 
1a0b4     B8 E4 05 F1 | 	add	objptr, ##41144
1a0b8     F2 2C 02 FB | 	rdlong	local04, objptr
1a0bc     50 00 00 FF 
1a0c0     B8 E4 85 F1 | 	sub	objptr, ##41144
1a0c4     FF FF 3F FF 
1a0c8     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1a0cc     AC 00 90 AD |  if_e	jmp	#LR__2136
1a0d0     50 00 00 FF 
1a0d4     EC E4 05 F1 | 	add	objptr, ##41196
1a0d8     F2 2C 02 FB | 	rdlong	local04, objptr
1a0dc     50 00 00 FF 
1a0e0     EC E4 85 F1 | 	sub	objptr, ##41196
1a0e4     01 2C 0E F2 | 	cmp	local04, #1 wz
1a0e8     90 00 90 5D |  if_ne	jmp	#LR__2136
1a0ec                 | '   print: print "Stopped at line ";runheader(0) 
1a0ec     00 12 06 F6 | 	mov	arg01, #0
1a0f0     AC 15 B1 FD | 	call	#__system___getiolock_0599
1a0f4     FD 12 02 F6 | 	mov	arg01, result1
1a0f8     7C B8 B0 FD | 	call	#__system___lockmem
1a0fc     00 12 06 F6 | 	mov	arg01, #0
1a100     0A 14 06 F6 | 	mov	arg02, #10
1a104     00 16 06 F6 | 	mov	arg03, #0
1a108     08 C5 B0 FD | 	call	#__system___basic_print_char
1a10c     00 12 06 F6 | 	mov	arg01, #0
1a110     8C 15 B1 FD | 	call	#__system___getiolock_0599
1a114     FD 00 68 FC | 	wrlong	#0, result1
1a118     00 12 06 F6 | 	mov	arg01, #0
1a11c     80 15 B1 FD | 	call	#__system___getiolock_0599
1a120     FD 12 02 F6 | 	mov	arg01, result1
1a124     50 B8 B0 FD | 	call	#__system___lockmem
1a128     AF 01 00 FF 
1a12c     5B 15 06 F6 | 	mov	arg02, ##@LR__5928
1a130     00 12 06 F6 | 	mov	arg01, #0
1a134     00 16 06 F6 | 	mov	arg03, #0
1a138     30 C5 B0 FD | 	call	#__system___basic_print_string
1a13c     50 00 00 FF 
1a140     F0 E4 05 F1 | 	add	objptr, ##41200
1a144     F2 14 02 FB | 	rdlong	arg02, objptr
1a148     50 00 00 FF 
1a14c     F0 E4 85 F1 | 	sub	objptr, ##41200
1a150     00 12 06 F6 | 	mov	arg01, #0
1a154     00 16 06 F6 | 	mov	arg03, #0
1a158     0A 18 06 F6 | 	mov	arg04, #10
1a15c     90 C5 B0 FD | 	call	#__system___basic_print_unsigned
1a160     00 12 06 F6 | 	mov	arg01, #0
1a164     0A 14 06 F6 | 	mov	arg02, #10
1a168     00 16 06 F6 | 	mov	arg03, #0
1a16c     A4 C4 B0 FD | 	call	#__system___basic_print_char
1a170     00 12 06 F6 | 	mov	arg01, #0
1a174     28 15 B1 FD | 	call	#__system___getiolock_0599
1a178     FD 00 68 FC | 	wrlong	#0, result1
1a17c                 | LR__2136
1a17c     50 00 00 FF 
1a180     EC E4 05 F1 | 	add	objptr, ##41196
1a184     F2 00 68 FC | 	wrlong	#0, objptr
1a188     06 00 00 FF 
1a18c     6C E4 85 F1 | 	sub	objptr, ##3180
1a190     F2 26 62 FC | 	wrlong	local01, objptr
1a194     06 00 00 FF 
1a198     38 E4 05 F1 | 	add	objptr, ##3128
1a19c     F2 28 62 FC | 	wrlong	local02, objptr
1a1a0     04 E4 05 F1 | 	add	objptr, #4
1a1a4     F2 2A 62 FC | 	wrlong	local03, objptr
1a1a8     50 00 00 FF 
1a1ac     BC E4 85 F1 | 	sub	objptr, ##41148
1a1b0     11 12 06 F6 | 	mov	arg01, #17
1a1b4     08 14 06 F6 | 	mov	arg02, #8
1a1b8     10 16 06 F6 | 	mov	arg03, #16
1a1bc     14 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1a1c0     10 12 06 F6 | 	mov	arg01, #16
1a1c4     20 14 06 F6 | 	mov	arg02, #32
1a1c8     20 16 06 F6 | 	mov	arg03, #32
1a1cc     04 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1a1d0                 | LR__2137
1a1d0     A7 F0 03 F6 | 	mov	ptra, fp
1a1d4     B2 00 A0 FD | 	call	#popregs_
1a1d8                 | _do_run_ret
1a1d8     2D 00 64 FD | 	ret
1a1dc                 | 
1a1dc                 | ' 
1a1dc                 | ' ' ------------------ save
1a1dc                 | ' 
1a1dc                 | ' sub do_save                        
1a1dc                 | _do_save
1a1dc     04 4A 05 F6 | 	mov	COUNT_, #4
1a1e0     A8 00 A0 FD | 	call	#pushregs_
1a1e4     B8 F0 07 F1 | 	add	ptra, #184
1a1e8     4A 00 00 FF 
1a1ec     80 E4 05 F1 | 	add	objptr, ##38016
1a1f0     F2 26 02 FB | 	rdlong	local01, objptr
1a1f4     13 29 02 F6 | 	mov	local02, local01
1a1f8     01 28 66 F0 | 	shl	local02, #1
1a1fc     13 29 02 F1 | 	add	local02, local01
1a200     02 28 66 F0 | 	shl	local02, #2
1a204     03 00 00 FF 
1a208     04 E4 85 F1 | 	sub	objptr, ##1540
1a20c     F2 28 02 F1 | 	add	local02, objptr
1a210     14 2B 02 FB | 	rdlong	local03, local02
1a214     10 4E 05 F1 | 	add	fp, #16
1a218     A7 2A 62 FC | 	wrlong	local03, fp
1a21c                 | ' 
1a21c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a21c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1a21c     10 4E 85 F1 | 	sub	fp, #16
1a220     01 2A 56 F2 | 	cmps	local03, #1 wc
1a224     47 00 00 FF 
1a228     7C E4 85 F1 | 	sub	objptr, ##36476
1a22c     20 00 90 CD |  if_b	jmp	#LR__2140
1a230     4C 2A BF FD | 	call	#_pop
1a234     A7 FA 61 FC | 	wrlong	result1, fp
1a238     04 4E 05 F1 | 	add	fp, #4
1a23c     A7 FC 61 FC | 	wrlong	result2, fp
1a240     04 4E 05 F1 | 	add	fp, #4
1a244     A7 FE 61 FC | 	wrlong	result3, fp
1a248     08 4E 85 F1 | 	sub	fp, #8
1a24c     24 00 90 FD | 	jmp	#LR__2141
1a250                 | LR__2140
1a250     52 00 00 FF 
1a254     70 E4 05 F1 | 	add	objptr, ##42096
1a258     F2 2A 02 FB | 	rdlong	local03, objptr
1a25c     52 00 00 FF 
1a260     70 E4 85 F1 | 	sub	objptr, ##42096
1a264     A7 2A 62 FC | 	wrlong	local03, fp
1a268     08 4E 05 F1 | 	add	fp, #8
1a26c     A7 3E 68 FC | 	wrlong	#31, fp
1a270     08 4E 85 F1 | 	sub	fp, #8
1a274                 | LR__2141
1a274                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1a274     4A 00 00 FF 
1a278     88 E4 05 F1 | 	add	objptr, ##38024
1a27c     F2 12 02 FB | 	rdlong	arg01, objptr
1a280     4A 00 00 FF 
1a284     88 E4 85 F1 | 	sub	objptr, ##38024
1a288     D0 7F B0 FD | 	call	#_pslpeek
1a28c     FF FF 7F FF 
1a290     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1a294     10 00 90 5D |  if_ne	jmp	#LR__2142
1a298     1B 12 06 F6 | 	mov	arg01, #27
1a29c     00 14 06 F6 | 	mov	arg02, #0
1a2a0     E8 7C B0 FD | 	call	#_printerror
1a2a4     CC 02 90 FD | 	jmp	#LR__2148
1a2a8                 | LR__2142
1a2a8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1a2a8     08 4E 05 F1 | 	add	fp, #8
1a2ac     A7 2A 02 FB | 	rdlong	local03, fp
1a2b0     08 4E 85 F1 | 	sub	fp, #8
1a2b4     2B 2A 0E F2 | 	cmp	local03, #43 wz
1a2b8     18 00 90 5D |  if_ne	jmp	#LR__2143
1a2bc     A7 12 02 FB | 	rdlong	arg01, fp
1a2c0     34 2B BF FD | 	call	#_convertstring
1a2c4     A7 FA 61 FC | 	wrlong	result1, fp
1a2c8     08 4E 05 F1 | 	add	fp, #8
1a2cc     A7 3E 68 FC | 	wrlong	#31, fp
1a2d0     08 4E 85 F1 | 	sub	fp, #8
1a2d4                 | LR__2143
1a2d4                 | ' if t1.result_type=result_string then
1a2d4     08 4E 05 F1 | 	add	fp, #8
1a2d8     A7 2A 02 FB | 	rdlong	local03, fp
1a2dc     08 4E 85 F1 | 	sub	fp, #8
1a2e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a2e4     8C 02 90 5D |  if_ne	jmp	#LR__2147
1a2e8                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1a2e8     A7 12 02 FB | 	rdlong	arg01, fp
1a2ec     AF 01 00 FF 
1a2f0     6C 15 06 F6 | 	mov	arg02, ##@LR__5929
1a2f4     A8 B6 B0 FD | 	call	#__system___string_cmp
1a2f8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a2fc     52 00 00 AF 
1a300     70 E4 05 A1 |  if_e	add	objptr, ##42096
1a304     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1a308     A7 2A 62 AC |  if_e	wrlong	local03, fp
1a30c     52 00 00 AF 
1a310     70 E4 85 A1 |  if_e	sub	objptr, ##42096
1a314     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1a318     52 00 00 5F 
1a31c     70 E4 05 51 |  if_ne	add	objptr, ##42096
1a320     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1a324     52 00 00 5F 
1a328     70 E4 85 51 |  if_ne	sub	objptr, ##42096
1a32c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1a32c     09 12 06 F6 | 	mov	arg01, #9
1a330     9C 09 B1 FD | 	call	#__system__close
1a334     09 2A 06 F6 | 	mov	local03, #9
1a338     4A 00 00 FF 
1a33c     94 E4 05 F1 | 	add	objptr, ##38036
1a340     F2 12 02 FB | 	rdlong	arg01, objptr
1a344     4A 00 00 FF 
1a348     94 E4 85 F1 | 	sub	objptr, ##38036
1a34c     AF 01 00 FF 
1a350     6D 15 06 F6 | 	mov	arg02, ##@LR__5930
1a354     7C B6 B0 FD | 	call	#__system___string_concat
1a358     FD 12 02 F6 | 	mov	arg01, result1
1a35c     A7 14 02 FB | 	rdlong	arg02, fp
1a360     70 B6 B0 FD | 	call	#__system___string_concat
1a364     FD 14 02 F6 | 	mov	arg02, result1
1a368     15 13 02 F6 | 	mov	arg01, local03
1a36c     0D 16 06 F6 | 	mov	arg03, #13
1a370     08 C2 B0 FD | 	call	#__system___basic_open_string
1a374     4A 00 00 FF 
1a378     88 E4 05 F1 | 	add	objptr, ##38024
1a37c     F2 2A 02 FB | 	rdlong	local03, objptr
1a380     4A 00 00 FF 
1a384     88 E4 85 F1 | 	sub	objptr, ##38024
1a388     B0 4E 05 F1 | 	add	fp, #176
1a38c     A7 2A 62 FC | 	wrlong	local03, fp
1a390     B0 4E 85 F1 | 	sub	fp, #176
1a394                 | '   saveptr=programstart
1a394                 | '   do
1a394                 | LR__2144
1a394     14 4E 05 F1 | 	add	fp, #20
1a398     A7 12 02 F6 | 	mov	arg01, fp
1a39c     9C 4E 05 F1 | 	add	fp, #156
1a3a0     A7 14 02 FB | 	rdlong	arg02, fp
1a3a4     B0 4E 85 F1 | 	sub	fp, #176
1a3a8     18 16 06 F6 | 	mov	arg03, #24
1a3ac     0B 00 00 FF 
1a3b0     CC E4 05 F1 | 	add	objptr, ##5836
1a3b4     38 A9 B0 FD | 	call	#_psram_spin2_read1
1a3b8     2C 4E 05 F1 | 	add	fp, #44
1a3bc     A7 12 02 F6 | 	mov	arg01, fp
1a3c0     10 4E 85 F1 | 	sub	fp, #16
1a3c4     A7 14 02 FB | 	rdlong	arg02, fp
1a3c8     04 4E 05 F1 | 	add	fp, #4
1a3cc     A7 16 02 FB | 	rdlong	arg03, fp
1a3d0     20 4E 85 F1 | 	sub	fp, #32
1a3d4     18 A9 B0 FD | 	call	#_psram_spin2_read1
1a3d8     0B 00 00 FF 
1a3dc     CC E4 85 F1 | 	sub	objptr, ##5836
1a3e0     AF 01 00 FF 
1a3e4     6F 2B 06 F6 | 	mov	local03, ##@LR__5931
1a3e8     AC 4E 05 F1 | 	add	fp, #172
1a3ec     A7 2A 62 FC | 	wrlong	local03, fp
1a3f0                 | '     psram.read1(varptr(header(0)),saveptr,24)
1a3f0                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1a3f0                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1a3f0     A0 4E 85 F1 | 	sub	fp, #160
1a3f4     A7 02 68 FC | 	wrlong	#1, fp
1a3f8     14 4E 05 F1 | 	add	fp, #20
1a3fc     A7 2C 02 FB | 	rdlong	local04, fp
1a400     20 4E 85 F1 | 	sub	fp, #32
1a404     01 2C 06 F1 | 	add	local04, #1
1a408                 | LR__2145
1a408     0C 4E 05 F1 | 	add	fp, #12
1a40c     A7 2A 02 FB | 	rdlong	local03, fp
1a410     0C 4E 85 F1 | 	sub	fp, #12
1a414     16 2B 52 F2 | 	cmps	local03, local04 wc
1a418     54 00 90 3D |  if_ae	jmp	#LR__2146
1a41c     AC 4E 05 F1 | 	add	fp, #172
1a420     A7 26 02 FB | 	rdlong	local01, fp
1a424     A0 4E 85 F1 | 	sub	fp, #160
1a428     A7 2A 02 FB | 	rdlong	local03, fp
1a42c     01 2A 86 F1 | 	sub	local03, #1
1a430     20 4E 05 F1 | 	add	fp, #32
1a434     A7 2A 02 F1 | 	add	local03, fp
1a438     15 13 C2 FA | 	rdbyte	arg01, local03
1a43c     2C 4E 85 F1 | 	sub	fp, #44
1a440     74 D7 B0 FD | 	call	#__system__Chr_S
1a444     FD 14 02 F6 | 	mov	arg02, result1
1a448     13 13 02 F6 | 	mov	arg01, local01
1a44c     84 B5 B0 FD | 	call	#__system___string_concat
1a450     AC 4E 05 F1 | 	add	fp, #172
1a454     A7 FA 61 FC | 	wrlong	result1, fp
1a458     A0 4E 85 F1 | 	sub	fp, #160
1a45c     A7 2A 02 FB | 	rdlong	local03, fp
1a460     01 2A 06 F1 | 	add	local03, #1
1a464     A7 2A 62 FC | 	wrlong	local03, fp
1a468     0C 4E 85 F1 | 	sub	fp, #12
1a46c     98 FF 9F FD | 	jmp	#LR__2145
1a470                 | LR__2146
1a470                 | '     print #9, saveline$
1a470     09 12 06 F6 | 	mov	arg01, #9
1a474     28 12 B1 FD | 	call	#__system___getiolock_0599
1a478     FD 12 02 F6 | 	mov	arg01, result1
1a47c     F8 B4 B0 FD | 	call	#__system___lockmem
1a480     AC 4E 05 F1 | 	add	fp, #172
1a484     A7 14 02 FB | 	rdlong	arg02, fp
1a488     AC 4E 85 F1 | 	sub	fp, #172
1a48c     09 12 06 F6 | 	mov	arg01, #9
1a490     00 16 06 F6 | 	mov	arg03, #0
1a494     D4 C1 B0 FD | 	call	#__system___basic_print_string
1a498     09 12 06 F6 | 	mov	arg01, #9
1a49c     0A 14 06 F6 | 	mov	arg02, #10
1a4a0     00 16 06 F6 | 	mov	arg03, #0
1a4a4     6C C1 B0 FD | 	call	#__system___basic_print_char
1a4a8     09 12 06 F6 | 	mov	arg01, #9
1a4ac     F0 11 B1 FD | 	call	#__system___getiolock_0599
1a4b0     FD 00 68 FC | 	wrlong	#0, result1
1a4b4     28 4E 05 F1 | 	add	fp, #40
1a4b8     A7 2A 02 FB | 	rdlong	local03, fp
1a4bc     88 4E 05 F1 | 	add	fp, #136
1a4c0     A7 2A 62 FC | 	wrlong	local03, fp
1a4c4     88 4E 85 F1 | 	sub	fp, #136
1a4c8     A7 2A 02 FB | 	rdlong	local03, fp
1a4cc     28 4E 85 F1 | 	sub	fp, #40
1a4d0     FF FF 3F FF 
1a4d4     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1a4d8     B8 FE 9F 5D |  if_ne	jmp	#LR__2144
1a4dc                 | '   close #9  
1a4dc     09 12 06 F6 | 	mov	arg01, #9
1a4e0     EC 07 B1 FD | 	call	#__system__close
1a4e4                 | '   print "Saved as ";currentdir$+"/"+loadname
1a4e4     00 12 06 F6 | 	mov	arg01, #0
1a4e8     B4 11 B1 FD | 	call	#__system___getiolock_0599
1a4ec     FD 12 02 F6 | 	mov	arg01, result1
1a4f0     84 B4 B0 FD | 	call	#__system___lockmem
1a4f4     AF 01 00 FF 
1a4f8     70 15 06 F6 | 	mov	arg02, ##@LR__5932
1a4fc     00 12 06 F6 | 	mov	arg01, #0
1a500     00 16 06 F6 | 	mov	arg03, #0
1a504     64 C1 B0 FD | 	call	#__system___basic_print_string
1a508     00 28 06 F6 | 	mov	local02, #0
1a50c     4A 00 00 FF 
1a510     94 E4 05 F1 | 	add	objptr, ##38036
1a514     F2 12 02 FB | 	rdlong	arg01, objptr
1a518     4A 00 00 FF 
1a51c     94 E4 85 F1 | 	sub	objptr, ##38036
1a520     AF 01 00 FF 
1a524     7A 15 06 F6 | 	mov	arg02, ##@LR__5933
1a528     A8 B4 B0 FD | 	call	#__system___string_concat
1a52c     FD 12 02 F6 | 	mov	arg01, result1
1a530     52 00 00 FF 
1a534     70 E4 05 F1 | 	add	objptr, ##42096
1a538     F2 14 02 FB | 	rdlong	arg02, objptr
1a53c     52 00 00 FF 
1a540     70 E4 85 F1 | 	sub	objptr, ##42096
1a544     8C B4 B0 FD | 	call	#__system___string_concat
1a548     FD 14 02 F6 | 	mov	arg02, result1
1a54c     14 13 02 F6 | 	mov	arg01, local02
1a550     00 16 06 F6 | 	mov	arg03, #0
1a554     14 C1 B0 FD | 	call	#__system___basic_print_string
1a558     00 12 06 F6 | 	mov	arg01, #0
1a55c     0A 14 06 F6 | 	mov	arg02, #10
1a560     00 16 06 F6 | 	mov	arg03, #0
1a564     AC C0 B0 FD | 	call	#__system___basic_print_char
1a568     00 12 06 F6 | 	mov	arg01, #0
1a56c     30 11 B1 FD | 	call	#__system___getiolock_0599
1a570     FD 00 68 FC | 	wrlong	#0, result1
1a574                 | LR__2147
1a574                 | LR__2148
1a574     A7 F0 03 F6 | 	mov	ptra, fp
1a578     B2 00 A0 FD | 	call	#popregs_
1a57c                 | _do_save_ret
1a57c     2D 00 64 FD | 	ret
1a580                 | 
1a580                 | ' 
1a580                 | ' ' ------------------ setdelay
1a580                 | ' 
1a580                 | ' sub do_setdelay
1a580                 | _do_setdelay
1a580     02 4A 05 F6 | 	mov	COUNT_, #2
1a584     A8 00 A0 FD | 	call	#pushregs_
1a588     18 F0 07 F1 | 	add	ptra, #24
1a58c     F0 26 BF FD | 	call	#_pop
1a590     FD 12 02 F6 | 	mov	arg01, result1
1a594     FE 26 02 F6 | 	mov	local01, result2
1a598     FF 28 02 F6 | 	mov	local02, result3
1a59c     A7 12 62 FC | 	wrlong	arg01, fp
1a5a0     04 4E 05 F1 | 	add	fp, #4
1a5a4     A7 26 62 FC | 	wrlong	local01, fp
1a5a8     04 4E 05 F1 | 	add	fp, #4
1a5ac     A7 28 62 FC | 	wrlong	local02, fp
1a5b0     08 4E 85 F1 | 	sub	fp, #8
1a5b4     C8 26 BF FD | 	call	#_pop
1a5b8     FD 28 02 F6 | 	mov	local02, result1
1a5bc     0C 4E 05 F1 | 	add	fp, #12
1a5c0     A7 28 62 FC | 	wrlong	local02, fp
1a5c4     04 4E 05 F1 | 	add	fp, #4
1a5c8     A7 FC 61 FC | 	wrlong	result2, fp
1a5cc     04 4E 05 F1 | 	add	fp, #4
1a5d0     A7 FE 61 FC | 	wrlong	result3, fp
1a5d4     08 4E 85 F1 | 	sub	fp, #8
1a5d8     A7 12 02 F6 | 	mov	arg01, fp
1a5dc     0C 4E 85 F1 | 	sub	fp, #12
1a5e0     80 28 BF FD | 	call	#_converttoint
1a5e4     FD 28 02 F6 | 	mov	local02, result1
1a5e8     14 27 02 F6 | 	mov	local01, local02
1a5ec     01 26 66 F0 | 	shl	local01, #1
1a5f0     14 27 02 F1 | 	add	local01, local02
1a5f4     03 26 66 F0 | 	shl	local01, #3
1a5f8     14 00 00 FF 
1a5fc     38 E5 05 F1 | 	add	objptr, ##10552
1a600     F2 26 02 F1 | 	add	local01, objptr
1a604     A7 12 02 F6 | 	mov	arg01, fp
1a608     14 00 00 FF 
1a60c     38 E5 85 F1 | 	sub	objptr, ##10552
1a610     50 28 BF FD | 	call	#_converttoint
1a614     06 26 06 F1 | 	add	local01, #6
1a618     13 FB 51 FC | 	wrword	result1, local01
1a61c     A7 F0 03 F6 | 	mov	ptra, fp
1a620     B2 00 A0 FD | 	call	#popregs_
1a624                 | _do_setdelay_ret
1a624     2D 00 64 FD | 	ret
1a628                 | 
1a628                 | ' 
1a628                 | ' ' ------------------ setenv
1a628                 | ' 
1a628                 | ' sub do_setenv
1a628                 | _do_setenv
1a628     02 4A 05 F6 | 	mov	COUNT_, #2
1a62c     A8 00 A0 FD | 	call	#pushregs_
1a630     18 F0 07 F1 | 	add	ptra, #24
1a634     48 26 BF FD | 	call	#_pop
1a638     FD 12 02 F6 | 	mov	arg01, result1
1a63c     FE 26 02 F6 | 	mov	local01, result2
1a640     FF 28 02 F6 | 	mov	local02, result3
1a644     A7 12 62 FC | 	wrlong	arg01, fp
1a648     04 4E 05 F1 | 	add	fp, #4
1a64c     A7 26 62 FC | 	wrlong	local01, fp
1a650     04 4E 05 F1 | 	add	fp, #4
1a654     A7 28 62 FC | 	wrlong	local02, fp
1a658     08 4E 85 F1 | 	sub	fp, #8
1a65c     20 26 BF FD | 	call	#_pop
1a660     FD 28 02 F6 | 	mov	local02, result1
1a664     0C 4E 05 F1 | 	add	fp, #12
1a668     A7 28 62 FC | 	wrlong	local02, fp
1a66c     04 4E 05 F1 | 	add	fp, #4
1a670     A7 FC 61 FC | 	wrlong	result2, fp
1a674     04 4E 05 F1 | 	add	fp, #4
1a678     A7 FE 61 FC | 	wrlong	result3, fp
1a67c     08 4E 85 F1 | 	sub	fp, #8
1a680     A7 12 02 F6 | 	mov	arg01, fp
1a684     0C 4E 85 F1 | 	sub	fp, #12
1a688     D8 27 BF FD | 	call	#_converttoint
1a68c     FD 28 02 F6 | 	mov	local02, result1
1a690     14 27 02 F6 | 	mov	local01, local02
1a694     01 26 66 F0 | 	shl	local01, #1
1a698     14 27 02 F1 | 	add	local01, local02
1a69c     03 26 66 F0 | 	shl	local01, #3
1a6a0     14 00 00 FF 
1a6a4     38 E5 05 F1 | 	add	objptr, ##10552
1a6a8     F2 26 02 F1 | 	add	local01, objptr
1a6ac     A7 12 02 F6 | 	mov	arg01, fp
1a6b0     14 00 00 FF 
1a6b4     38 E5 85 F1 | 	sub	objptr, ##10552
1a6b8     A8 27 BF FD | 	call	#_converttoint
1a6bc     05 26 06 F1 | 	add	local01, #5
1a6c0     13 FB 41 FC | 	wrbyte	result1, local01
1a6c4     A7 F0 03 F6 | 	mov	ptra, fp
1a6c8     B2 00 A0 FD | 	call	#popregs_
1a6cc                 | _do_setenv_ret
1a6cc     2D 00 64 FD | 	ret
1a6d0                 | 
1a6d0                 | ' 
1a6d0                 | ' ' ------------------ setlen
1a6d0                 | ' 
1a6d0                 | ' sub do_setlen
1a6d0                 | _do_setlen
1a6d0     02 4A 05 F6 | 	mov	COUNT_, #2
1a6d4     A8 00 A0 FD | 	call	#pushregs_
1a6d8     18 F0 07 F1 | 	add	ptra, #24
1a6dc     A0 25 BF FD | 	call	#_pop
1a6e0     FD 12 02 F6 | 	mov	arg01, result1
1a6e4     FE 26 02 F6 | 	mov	local01, result2
1a6e8     FF 28 02 F6 | 	mov	local02, result3
1a6ec     A7 12 62 FC | 	wrlong	arg01, fp
1a6f0     04 4E 05 F1 | 	add	fp, #4
1a6f4     A7 26 62 FC | 	wrlong	local01, fp
1a6f8     04 4E 05 F1 | 	add	fp, #4
1a6fc     A7 28 62 FC | 	wrlong	local02, fp
1a700     08 4E 85 F1 | 	sub	fp, #8
1a704     78 25 BF FD | 	call	#_pop
1a708     FD 28 02 F6 | 	mov	local02, result1
1a70c     0C 4E 05 F1 | 	add	fp, #12
1a710     A7 28 62 FC | 	wrlong	local02, fp
1a714     04 4E 05 F1 | 	add	fp, #4
1a718     A7 FC 61 FC | 	wrlong	result2, fp
1a71c     04 4E 05 F1 | 	add	fp, #4
1a720     A7 FE 61 FC | 	wrlong	result3, fp
1a724     08 4E 85 F1 | 	sub	fp, #8
1a728     A7 12 02 F6 | 	mov	arg01, fp
1a72c     0C 4E 85 F1 | 	sub	fp, #12
1a730     30 27 BF FD | 	call	#_converttoint
1a734     FD 28 02 F6 | 	mov	local02, result1
1a738     14 27 02 F6 | 	mov	local01, local02
1a73c     01 26 66 F0 | 	shl	local01, #1
1a740     14 27 02 F1 | 	add	local01, local02
1a744     03 26 66 F0 | 	shl	local01, #3
1a748     14 00 00 FF 
1a74c     38 E5 05 F1 | 	add	objptr, ##10552
1a750     F2 26 02 F1 | 	add	local01, objptr
1a754     A7 12 02 F6 | 	mov	arg01, fp
1a758     14 00 00 FF 
1a75c     38 E5 85 F1 | 	sub	objptr, ##10552
1a760     BC 27 BF FD | 	call	#_converttofloat
1a764     08 26 06 F1 | 	add	local01, #8
1a768     13 FB 61 FC | 	wrlong	result1, local01
1a76c     A7 F0 03 F6 | 	mov	ptra, fp
1a770     B2 00 A0 FD | 	call	#popregs_
1a774                 | _do_setlen_ret
1a774     2D 00 64 FD | 	ret
1a778                 | 
1a778                 | ' 
1a778                 | ' ' ------------------ setpan
1a778                 | ' 
1a778                 | ' sub do_setpan
1a778                 | _do_setpan
1a778     02 4A 05 F6 | 	mov	COUNT_, #2
1a77c     A8 00 A0 FD | 	call	#pushregs_
1a780     18 F0 07 F1 | 	add	ptra, #24
1a784     F8 24 BF FD | 	call	#_pop
1a788     FD 12 02 F6 | 	mov	arg01, result1
1a78c     FE 26 02 F6 | 	mov	local01, result2
1a790     FF 28 02 F6 | 	mov	local02, result3
1a794     A7 12 62 FC | 	wrlong	arg01, fp
1a798     04 4E 05 F1 | 	add	fp, #4
1a79c     A7 26 62 FC | 	wrlong	local01, fp
1a7a0     04 4E 05 F1 | 	add	fp, #4
1a7a4     A7 28 62 FC | 	wrlong	local02, fp
1a7a8     08 4E 85 F1 | 	sub	fp, #8
1a7ac     D0 24 BF FD | 	call	#_pop
1a7b0     FD 28 02 F6 | 	mov	local02, result1
1a7b4     0C 4E 05 F1 | 	add	fp, #12
1a7b8     A7 28 62 FC | 	wrlong	local02, fp
1a7bc     04 4E 05 F1 | 	add	fp, #4
1a7c0     A7 FC 61 FC | 	wrlong	result2, fp
1a7c4     04 4E 05 F1 | 	add	fp, #4
1a7c8     A7 FE 61 FC | 	wrlong	result3, fp
1a7cc     08 4E 85 F1 | 	sub	fp, #8
1a7d0     A7 12 02 F6 | 	mov	arg01, fp
1a7d4     0C 4E 85 F1 | 	sub	fp, #12
1a7d8     88 26 BF FD | 	call	#_converttoint
1a7dc     FD 28 02 F6 | 	mov	local02, result1
1a7e0     14 27 02 F6 | 	mov	local01, local02
1a7e4     01 26 66 F0 | 	shl	local01, #1
1a7e8     14 27 02 F1 | 	add	local01, local02
1a7ec     03 26 66 F0 | 	shl	local01, #3
1a7f0     14 00 00 FF 
1a7f4     38 E5 05 F1 | 	add	objptr, ##10552
1a7f8     F2 26 02 F1 | 	add	local01, objptr
1a7fc     A7 12 02 F6 | 	mov	arg01, fp
1a800     14 00 00 FF 
1a804     38 E5 85 F1 | 	sub	objptr, ##10552
1a808     14 27 BF FD | 	call	#_converttofloat
1a80c     10 26 06 F1 | 	add	local01, #16
1a810     13 FB 61 FC | 	wrlong	result1, local01
1a814     A7 F0 03 F6 | 	mov	ptra, fp
1a818     B2 00 A0 FD | 	call	#popregs_
1a81c                 | _do_setpan_ret
1a81c     2D 00 64 FD | 	ret
1a820                 | 
1a820                 | ' 
1a820                 | ' ' ------------------ setsustain
1a820                 | ' 
1a820                 | ' sub do_setsustain
1a820                 | _do_setsustain
1a820     02 4A 05 F6 | 	mov	COUNT_, #2
1a824     A8 00 A0 FD | 	call	#pushregs_
1a828     18 F0 07 F1 | 	add	ptra, #24
1a82c     50 24 BF FD | 	call	#_pop
1a830     FD 12 02 F6 | 	mov	arg01, result1
1a834     FE 26 02 F6 | 	mov	local01, result2
1a838     FF 28 02 F6 | 	mov	local02, result3
1a83c     A7 12 62 FC | 	wrlong	arg01, fp
1a840     04 4E 05 F1 | 	add	fp, #4
1a844     A7 26 62 FC | 	wrlong	local01, fp
1a848     04 4E 05 F1 | 	add	fp, #4
1a84c     A7 28 62 FC | 	wrlong	local02, fp
1a850     08 4E 85 F1 | 	sub	fp, #8
1a854     28 24 BF FD | 	call	#_pop
1a858     FD 28 02 F6 | 	mov	local02, result1
1a85c     0C 4E 05 F1 | 	add	fp, #12
1a860     A7 28 62 FC | 	wrlong	local02, fp
1a864     04 4E 05 F1 | 	add	fp, #4
1a868     A7 FC 61 FC | 	wrlong	result2, fp
1a86c     04 4E 05 F1 | 	add	fp, #4
1a870     A7 FE 61 FC | 	wrlong	result3, fp
1a874     08 4E 85 F1 | 	sub	fp, #8
1a878     A7 12 02 F6 | 	mov	arg01, fp
1a87c     0C 4E 85 F1 | 	sub	fp, #12
1a880     E0 25 BF FD | 	call	#_converttoint
1a884     FD 28 02 F6 | 	mov	local02, result1
1a888     14 27 02 F6 | 	mov	local01, local02
1a88c     01 26 66 F0 | 	shl	local01, #1
1a890     14 27 02 F1 | 	add	local01, local02
1a894     03 26 66 F0 | 	shl	local01, #3
1a898     14 00 00 FF 
1a89c     38 E5 05 F1 | 	add	objptr, ##10552
1a8a0     F2 26 02 F1 | 	add	local01, objptr
1a8a4     A7 12 02 F6 | 	mov	arg01, fp
1a8a8     14 00 00 FF 
1a8ac     38 E5 85 F1 | 	sub	objptr, ##10552
1a8b0     B0 25 BF FD | 	call	#_converttoint
1a8b4     14 26 06 F1 | 	add	local01, #20
1a8b8     13 FB 51 FC | 	wrword	result1, local01
1a8bc     A7 F0 03 F6 | 	mov	ptra, fp
1a8c0     B2 00 A0 FD | 	call	#popregs_
1a8c4                 | _do_setsustain_ret
1a8c4     2D 00 64 FD | 	ret
1a8c8                 | 
1a8c8                 | ' 
1a8c8                 | ' ' ------------------ setvol
1a8c8                 | ' 
1a8c8                 | ' sub do_setvol
1a8c8                 | _do_setvol
1a8c8     02 4A 05 F6 | 	mov	COUNT_, #2
1a8cc     A8 00 A0 FD | 	call	#pushregs_
1a8d0     18 F0 07 F1 | 	add	ptra, #24
1a8d4     A8 23 BF FD | 	call	#_pop
1a8d8     FD 12 02 F6 | 	mov	arg01, result1
1a8dc     FE 26 02 F6 | 	mov	local01, result2
1a8e0     FF 28 02 F6 | 	mov	local02, result3
1a8e4     A7 12 62 FC | 	wrlong	arg01, fp
1a8e8     04 4E 05 F1 | 	add	fp, #4
1a8ec     A7 26 62 FC | 	wrlong	local01, fp
1a8f0     04 4E 05 F1 | 	add	fp, #4
1a8f4     A7 28 62 FC | 	wrlong	local02, fp
1a8f8     08 4E 85 F1 | 	sub	fp, #8
1a8fc     80 23 BF FD | 	call	#_pop
1a900     FD 28 02 F6 | 	mov	local02, result1
1a904     0C 4E 05 F1 | 	add	fp, #12
1a908     A7 28 62 FC | 	wrlong	local02, fp
1a90c     04 4E 05 F1 | 	add	fp, #4
1a910     A7 FC 61 FC | 	wrlong	result2, fp
1a914     04 4E 05 F1 | 	add	fp, #4
1a918     A7 FE 61 FC | 	wrlong	result3, fp
1a91c     08 4E 85 F1 | 	sub	fp, #8
1a920     A7 12 02 F6 | 	mov	arg01, fp
1a924     0C 4E 85 F1 | 	sub	fp, #12
1a928     38 25 BF FD | 	call	#_converttoint
1a92c     FD 28 02 F6 | 	mov	local02, result1
1a930     14 27 02 F6 | 	mov	local01, local02
1a934     01 26 66 F0 | 	shl	local01, #1
1a938     14 27 02 F1 | 	add	local01, local02
1a93c     03 26 66 F0 | 	shl	local01, #3
1a940     14 00 00 FF 
1a944     38 E5 05 F1 | 	add	objptr, ##10552
1a948     F2 26 02 F1 | 	add	local01, objptr
1a94c     A7 12 02 F6 | 	mov	arg01, fp
1a950     14 00 00 FF 
1a954     38 E5 85 F1 | 	sub	objptr, ##10552
1a958     C4 25 BF FD | 	call	#_converttofloat
1a95c     0C 26 06 F1 | 	add	local01, #12
1a960     13 FB 61 FC | 	wrlong	result1, local01
1a964     A7 F0 03 F6 | 	mov	ptra, fp
1a968     B2 00 A0 FD | 	call	#popregs_
1a96c                 | _do_setvol_ret
1a96c     2D 00 64 FD | 	ret
1a970                 | 
1a970                 | ' 
1a970                 | ' ' ------------------ setwave
1a970                 | ' 
1a970                 | ' sub do_setwave
1a970                 | _do_setwave
1a970     02 4A 05 F6 | 	mov	COUNT_, #2
1a974     A8 00 A0 FD | 	call	#pushregs_
1a978     18 F0 07 F1 | 	add	ptra, #24
1a97c     00 23 BF FD | 	call	#_pop
1a980     FD 12 02 F6 | 	mov	arg01, result1
1a984     FE 26 02 F6 | 	mov	local01, result2
1a988     FF 28 02 F6 | 	mov	local02, result3
1a98c     A7 12 62 FC | 	wrlong	arg01, fp
1a990     04 4E 05 F1 | 	add	fp, #4
1a994     A7 26 62 FC | 	wrlong	local01, fp
1a998     04 4E 05 F1 | 	add	fp, #4
1a99c     A7 28 62 FC | 	wrlong	local02, fp
1a9a0     08 4E 85 F1 | 	sub	fp, #8
1a9a4     D8 22 BF FD | 	call	#_pop
1a9a8     FD 28 02 F6 | 	mov	local02, result1
1a9ac     0C 4E 05 F1 | 	add	fp, #12
1a9b0     A7 28 62 FC | 	wrlong	local02, fp
1a9b4     04 4E 05 F1 | 	add	fp, #4
1a9b8     A7 FC 61 FC | 	wrlong	result2, fp
1a9bc     04 4E 05 F1 | 	add	fp, #4
1a9c0     A7 FE 61 FC | 	wrlong	result3, fp
1a9c4     08 4E 85 F1 | 	sub	fp, #8
1a9c8     A7 12 02 F6 | 	mov	arg01, fp
1a9cc     0C 4E 85 F1 | 	sub	fp, #12
1a9d0     90 24 BF FD | 	call	#_converttoint
1a9d4     FD 28 02 F6 | 	mov	local02, result1
1a9d8     14 27 02 F6 | 	mov	local01, local02
1a9dc     01 26 66 F0 | 	shl	local01, #1
1a9e0     14 27 02 F1 | 	add	local01, local02
1a9e4     03 26 66 F0 | 	shl	local01, #3
1a9e8     14 00 00 FF 
1a9ec     38 E5 05 F1 | 	add	objptr, ##10552
1a9f0     F2 26 02 F1 | 	add	local01, objptr
1a9f4     A7 12 02 F6 | 	mov	arg01, fp
1a9f8     14 00 00 FF 
1a9fc     38 E5 85 F1 | 	sub	objptr, ##10552
1aa00     60 24 BF FD | 	call	#_converttoint
1aa04     04 26 06 F1 | 	add	local01, #4
1aa08     13 FB 41 FC | 	wrbyte	result1, local01
1aa0c     A7 F0 03 F6 | 	mov	ptra, fp
1aa10     B2 00 A0 FD | 	call	#popregs_
1aa14                 | _do_setwave_ret
1aa14     2D 00 64 FD | 	ret
1aa18                 | 
1aa18                 | ' 
1aa18                 | ' ' ------------------ shutup
1aa18                 | ' 
1aa18                 | ' sub do_shutup
1aa18                 | _do_shutup
1aa18     03 4A 05 F6 | 	mov	COUNT_, #3
1aa1c     A8 00 A0 FD | 	call	#pushregs_
1aa20     18 F0 07 F1 | 	add	ptra, #24
1aa24     4A 00 00 FF 
1aa28     80 E4 05 F1 | 	add	objptr, ##38016
1aa2c     F2 26 02 FB | 	rdlong	local01, objptr
1aa30     13 29 02 F6 | 	mov	local02, local01
1aa34     01 28 66 F0 | 	shl	local02, #1
1aa38     13 29 02 F1 | 	add	local02, local01
1aa3c     02 28 66 F0 | 	shl	local02, #2
1aa40     03 00 00 FF 
1aa44     04 E4 85 F1 | 	sub	objptr, ##1540
1aa48     F2 28 02 F1 | 	add	local02, objptr
1aa4c     14 2B 0A FB | 	rdlong	local03, local02 wz
1aa50     14 4E 05 F1 | 	add	fp, #20
1aa54     A7 2A 62 FC | 	wrlong	local03, fp
1aa58                 | ' 
1aa58                 | ' numpar=compiledline(lineptr_e).result.uresult
1aa58                 | ' if numpar=0 then
1aa58     14 4E 85 F1 | 	sub	fp, #20
1aa5c     47 00 00 FF 
1aa60     7C E4 85 F1 | 	sub	objptr, ##36476
1aa64     50 00 90 5D |  if_ne	jmp	#LR__2152
1aa68                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1aa68     10 4E 05 F1 | 	add	fp, #16
1aa6c     A7 00 68 FC | 	wrlong	#0, fp
1aa70     37 00 00 FF 
1aa74     10 E4 05 F1 | 	add	objptr, ##28176
1aa78     97 16 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
1aa7c                 | LR__2150
1aa7c     F2 12 02 FB | 	rdlong	arg01, objptr
1aa80     A7 2A 02 FB | 	rdlong	local03, fp
1aa84     06 2A 66 F0 | 	shl	local03, #6
1aa88     15 13 02 F1 | 	add	arg01, local03
1aa8c     14 12 06 F1 | 	add	arg01, #20
1aa90     09 01 58 FC | 	wrword	#0, arg01
1aa94     A7 2A 02 FB | 	rdlong	local03, fp
1aa98     01 2A 06 F1 | 	add	local03, #1
1aa9c     A7 2A 62 FC | 	wrlong	local03, fp
1aaa0     08 2A 56 F2 | 	cmps	local03, #8 wc
1aaa4     D4 FF 9F CD |  if_b	jmp	#LR__2150
1aaa8                 | LR__2151
1aaa8     37 00 00 FF 
1aaac     10 E4 85 F1 | 	sub	objptr, ##28176
1aab0     10 4E 85 F1 | 	sub	fp, #16
1aab4     64 00 90 FD | 	jmp	#LR__2153
1aab8                 | LR__2152
1aab8     C4 21 BF FD | 	call	#_pop
1aabc     FF 26 02 F6 | 	mov	local01, result3
1aac0     A7 FA 61 FC | 	wrlong	result1, fp
1aac4     04 4E 05 F1 | 	add	fp, #4
1aac8     A7 FC 61 FC | 	wrlong	result2, fp
1aacc     04 4E 05 F1 | 	add	fp, #4
1aad0     A7 26 62 FC | 	wrlong	local01, fp
1aad4     08 4E 85 F1 | 	sub	fp, #8
1aad8     A7 12 02 F6 | 	mov	arg01, fp
1aadc     84 23 BF FD | 	call	#_converttoint
1aae0     FD 2A 52 F6 | 	abs	local03, result1 wc
1aae4     07 2A 06 F5 | 	and	local03, #7
1aae8     15 29 82 F6 | 	negc	local02, local03
1aaec     0C 4E 05 F1 | 	add	fp, #12
1aaf0     A7 28 62 FC | 	wrlong	local02, fp
1aaf4     37 00 00 FF 
1aaf8     10 E4 05 F1 | 	add	objptr, ##28176
1aafc     F2 12 02 FB | 	rdlong	arg01, objptr
1ab00     37 00 00 FF 
1ab04     10 E4 85 F1 | 	sub	objptr, ##28176
1ab08     0C 4E 85 F1 | 	sub	fp, #12
1ab0c     06 28 66 F0 | 	shl	local02, #6
1ab10     14 13 02 F1 | 	add	arg01, local02
1ab14     14 12 06 F1 | 	add	arg01, #20
1ab18     09 01 58 FC | 	wrword	#0, arg01
1ab1c                 | LR__2153
1ab1c     A7 F0 03 F6 | 	mov	ptra, fp
1ab20     B2 00 A0 FD | 	call	#popregs_
1ab24                 | _do_shutup_ret
1ab24     2D 00 64 FD | 	ret
1ab28                 | 
1ab28                 | ' 
1ab28                 | ' ' ------------------ sin
1ab28                 | ' 
1ab28                 | ' sub do_sin
1ab28                 | _do_sin
1ab28     01 4A 05 F6 | 	mov	COUNT_, #1
1ab2c     A8 00 A0 FD | 	call	#pushregs_
1ab30     10 F0 07 F1 | 	add	ptra, #16
1ab34     4A 00 00 FF 
1ab38     80 E4 05 F1 | 	add	objptr, ##38016
1ab3c     F2 26 02 FB | 	rdlong	local01, objptr
1ab40     13 17 02 F6 | 	mov	arg03, local01
1ab44     01 16 66 F0 | 	shl	arg03, #1
1ab48     13 17 02 F1 | 	add	arg03, local01
1ab4c     02 16 66 F0 | 	shl	arg03, #2
1ab50     03 00 00 FF 
1ab54     04 E4 85 F1 | 	sub	objptr, ##1540
1ab58     F2 16 02 F1 | 	add	arg03, objptr
1ab5c     0B 17 02 FB | 	rdlong	arg03, arg03
1ab60     0C 4E 05 F1 | 	add	fp, #12
1ab64     A7 16 62 FC | 	wrlong	arg03, fp
1ab68                 | ' 
1ab68                 | ' numpar=compiledline(lineptr_e).result.uresult
1ab68                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1ab68     0C 4E 85 F1 | 	sub	fp, #12
1ab6c     02 16 16 F2 | 	cmp	arg03, #2 wc
1ab70     47 00 00 FF 
1ab74     7C E4 85 F1 | 	sub	objptr, ##36476
1ab78     0C 4E 05 C1 |  if_b	add	fp, #12
1ab7c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1ab80     0C 4E 85 C1 |  if_b	sub	fp, #12
1ab84     40 00 90 4D |  if_c_and_nz	jmp	#LR__2160
1ab88     00 12 06 F6 | 	mov	arg01, #0
1ab8c     10 0B B1 FD | 	call	#__system___getiolock_0599
1ab90     FD 12 02 F6 | 	mov	arg01, result1
1ab94     E0 AD B0 FD | 	call	#__system___lockmem
1ab98     AF 01 00 FF 
1ab9c     7C 15 06 F6 | 	mov	arg02, ##@LR__5934
1aba0     00 12 06 F6 | 	mov	arg01, #0
1aba4     00 16 06 F6 | 	mov	arg03, #0
1aba8     C0 BA B0 FD | 	call	#__system___basic_print_string
1abac     00 12 06 F6 | 	mov	arg01, #0
1abb0     EC 0A B1 FD | 	call	#__system___getiolock_0599
1abb4     FD 00 68 FC | 	wrlong	#0, result1
1abb8     27 12 06 F6 | 	mov	arg01, #39
1abbc     00 14 06 F6 | 	mov	arg02, #0
1abc0     C8 73 B0 FD | 	call	#_printerror
1abc4     64 00 90 FD | 	jmp	#LR__2161
1abc8                 | LR__2160
1abc8     B4 20 BF FD | 	call	#_pop
1abcc     A7 FA 61 FC | 	wrlong	result1, fp
1abd0     04 4E 05 F1 | 	add	fp, #4
1abd4     A7 FC 61 FC | 	wrlong	result2, fp
1abd8     04 4E 05 F1 | 	add	fp, #4
1abdc     A7 FE 61 FC | 	wrlong	result3, fp
1abe0     08 4E 85 F1 | 	sub	fp, #8
1abe4     52 00 00 FF 
1abe8     54 E4 05 F1 | 	add	objptr, ##42068
1abec     F2 26 02 FB | 	rdlong	local01, objptr
1abf0     52 00 00 FF 
1abf4     54 E4 85 F1 | 	sub	objptr, ##42068
1abf8     A7 12 02 F6 | 	mov	arg01, fp
1abfc     20 23 BF FD | 	call	#_converttofloat
1ac00     FD 14 02 F6 | 	mov	arg02, result1
1ac04     13 13 02 F6 | 	mov	arg01, local01
1ac08     E4 DB B0 FD | 	call	#__system___float_mul
1ac0c     FD 12 02 F6 | 	mov	arg01, result1
1ac10     3C E5 B0 FD | 	call	#__system____builtin_sinf
1ac14     A7 FA 61 FC | 	wrlong	result1, fp
1ac18     08 4E 05 F1 | 	add	fp, #8
1ac1c     A7 3C 68 FC | 	wrlong	#30, fp
1ac20     08 4E 85 F1 | 	sub	fp, #8
1ac24     A7 12 02 F6 | 	mov	arg01, fp
1ac28     EC 20 BF FD | 	call	#_push
1ac2c                 | LR__2161
1ac2c     A7 F0 03 F6 | 	mov	ptra, fp
1ac30     B2 00 A0 FD | 	call	#popregs_
1ac34                 | _do_sin_ret
1ac34     2D 00 64 FD | 	ret
1ac38                 | 
1ac38                 | ' 
1ac38                 | ' ' ------------------ skip
1ac38                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1ac38                 | ' 
1ac38                 | ' sub do_skip
1ac38                 | _do_skip
1ac38     4A 00 00 FF 
1ac3c     80 E4 05 F1 | 	add	objptr, ##38016
1ac40     F2 00 02 FB | 	rdlong	_var01, objptr
1ac44     00 03 02 F6 | 	mov	_var02, _var01
1ac48     01 02 66 F0 | 	shl	_var02, #1
1ac4c     00 03 02 F1 | 	add	_var02, _var01
1ac50     02 02 66 F0 | 	shl	_var02, #2
1ac54     03 00 00 FF 
1ac58     04 E4 85 F1 | 	sub	objptr, ##1540
1ac5c     F2 02 02 F1 | 	add	_var02, objptr
1ac60     01 03 02 FB | 	rdlong	_var02, _var02
1ac64     01 02 86 F1 | 	sub	_var02, #1
1ac68     03 00 00 FF 
1ac6c     04 E4 05 F1 | 	add	objptr, ##1540
1ac70     F2 02 62 FC | 	wrlong	_var02, objptr
1ac74     4A 00 00 FF 
1ac78     80 E4 85 F1 | 	sub	objptr, ##38016
1ac7c                 | _do_skip_ret
1ac7c     2D 00 64 FD | 	ret
1ac80                 | 
1ac80                 | ' 
1ac80                 | ' ' ------------------ sprite
1ac80                 | ' 
1ac80                 | ' sub do_sprite
1ac80                 | _do_sprite
1ac80     00 4A 05 F6 | 	mov	COUNT_, #0
1ac84     A8 00 A0 FD | 	call	#pushregs_
1ac88     30 F0 07 F1 | 	add	ptra, #48
1ac8c     F0 1F BF FD | 	call	#_pop
1ac90     FD 16 02 F6 | 	mov	arg03, result1
1ac94     FE 14 02 F6 | 	mov	arg02, result2
1ac98     FF 12 02 F6 | 	mov	arg01, result3
1ac9c     18 4E 05 F1 | 	add	fp, #24
1aca0     A7 16 62 FC | 	wrlong	arg03, fp
1aca4     04 4E 05 F1 | 	add	fp, #4
1aca8     A7 14 62 FC | 	wrlong	arg02, fp
1acac     04 4E 05 F1 | 	add	fp, #4
1acb0     A7 12 62 FC | 	wrlong	arg01, fp
1acb4     20 4E 85 F1 | 	sub	fp, #32
1acb8     C4 1F BF FD | 	call	#_pop
1acbc     FD 16 02 F6 | 	mov	arg03, result1
1acc0     FE 14 02 F6 | 	mov	arg02, result2
1acc4     FF 12 02 F6 | 	mov	arg01, result3
1acc8     0C 4E 05 F1 | 	add	fp, #12
1accc     A7 16 62 FC | 	wrlong	arg03, fp
1acd0     04 4E 05 F1 | 	add	fp, #4
1acd4     A7 14 62 FC | 	wrlong	arg02, fp
1acd8     04 4E 05 F1 | 	add	fp, #4
1acdc     A7 12 62 FC | 	wrlong	arg01, fp
1ace0     14 4E 85 F1 | 	sub	fp, #20
1ace4     98 1F BF FD | 	call	#_pop
1ace8     FF 16 02 F6 | 	mov	arg03, result3
1acec     A7 FA 61 FC | 	wrlong	result1, fp
1acf0     04 4E 05 F1 | 	add	fp, #4
1acf4     A7 FC 61 FC | 	wrlong	result2, fp
1acf8     04 4E 05 F1 | 	add	fp, #4
1acfc     A7 16 62 FC | 	wrlong	arg03, fp
1ad00     08 4E 85 F1 | 	sub	fp, #8
1ad04     A7 12 02 F6 | 	mov	arg01, fp
1ad08     58 21 BF FD | 	call	#_converttoint
1ad0c     24 4E 05 F1 | 	add	fp, #36
1ad10     A7 FA 61 FC | 	wrlong	result1, fp
1ad14     18 4E 85 F1 | 	sub	fp, #24
1ad18     A7 12 02 F6 | 	mov	arg01, fp
1ad1c     0C 4E 85 F1 | 	sub	fp, #12
1ad20     40 21 BF FD | 	call	#_converttoint
1ad24     28 4E 05 F1 | 	add	fp, #40
1ad28     A7 FA 61 FC | 	wrlong	result1, fp
1ad2c     10 4E 85 F1 | 	sub	fp, #16
1ad30     A7 12 02 F6 | 	mov	arg01, fp
1ad34     18 4E 85 F1 | 	sub	fp, #24
1ad38     28 21 BF FD | 	call	#_converttoint
1ad3c     2C 4E 05 F1 | 	add	fp, #44
1ad40     A7 FA 61 FC | 	wrlong	result1, fp
1ad44     08 4E 85 F1 | 	sub	fp, #8
1ad48     A7 12 02 FB | 	rdlong	arg01, fp
1ad4c     04 4E 05 F1 | 	add	fp, #4
1ad50     A7 14 02 FB | 	rdlong	arg02, fp
1ad54     FD 16 02 F6 | 	mov	arg03, result1
1ad58     28 4E 85 F1 | 	sub	fp, #40
1ad5c     0C 82 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ad60     A7 F0 03 F6 | 	mov	ptra, fp
1ad64     B2 00 A0 FD | 	call	#popregs_
1ad68                 | _do_sprite_ret
1ad68     2D 00 64 FD | 	ret
1ad6c                 | 
1ad6c                 | ' 
1ad6c                 | ' ' ------------------ sqr
1ad6c                 | ' 
1ad6c                 | ' sub do_sqr
1ad6c                 | _do_sqr
1ad6c     01 4A 05 F6 | 	mov	COUNT_, #1
1ad70     A8 00 A0 FD | 	call	#pushregs_
1ad74     10 F0 07 F1 | 	add	ptra, #16
1ad78     4A 00 00 FF 
1ad7c     80 E4 05 F1 | 	add	objptr, ##38016
1ad80     F2 26 02 FB | 	rdlong	local01, objptr
1ad84     13 17 02 F6 | 	mov	arg03, local01
1ad88     01 16 66 F0 | 	shl	arg03, #1
1ad8c     13 17 02 F1 | 	add	arg03, local01
1ad90     02 16 66 F0 | 	shl	arg03, #2
1ad94     03 00 00 FF 
1ad98     04 E4 85 F1 | 	sub	objptr, ##1540
1ad9c     F2 16 02 F1 | 	add	arg03, objptr
1ada0     0B 17 02 FB | 	rdlong	arg03, arg03
1ada4     0C 4E 05 F1 | 	add	fp, #12
1ada8     A7 16 62 FC | 	wrlong	arg03, fp
1adac                 | ' 
1adac                 | ' numpar=compiledline(lineptr_e).result.uresult
1adac                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1adac     0C 4E 85 F1 | 	sub	fp, #12
1adb0     02 16 16 F2 | 	cmp	arg03, #2 wc
1adb4     47 00 00 FF 
1adb8     7C E4 85 F1 | 	sub	objptr, ##36476
1adbc     0C 4E 05 C1 |  if_b	add	fp, #12
1adc0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1adc4     0C 4E 85 C1 |  if_b	sub	fp, #12
1adc8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2170
1adcc     00 12 06 F6 | 	mov	arg01, #0
1add0     CC 08 B1 FD | 	call	#__system___getiolock_0599
1add4     FD 12 02 F6 | 	mov	arg01, result1
1add8     9C AB B0 FD | 	call	#__system___lockmem
1addc     AF 01 00 FF 
1ade0     82 15 06 F6 | 	mov	arg02, ##@LR__5935
1ade4     00 12 06 F6 | 	mov	arg01, #0
1ade8     00 16 06 F6 | 	mov	arg03, #0
1adec     7C B8 B0 FD | 	call	#__system___basic_print_string
1adf0     00 12 06 F6 | 	mov	arg01, #0
1adf4     A8 08 B1 FD | 	call	#__system___getiolock_0599
1adf8     FD 00 68 FC | 	wrlong	#0, result1
1adfc     27 12 06 F6 | 	mov	arg01, #39
1ae00     00 14 06 F6 | 	mov	arg02, #0
1ae04     84 71 B0 FD | 	call	#_printerror
1ae08     48 00 90 FD | 	jmp	#LR__2171
1ae0c                 | LR__2170
1ae0c     70 1E BF FD | 	call	#_pop
1ae10     FF 26 02 F6 | 	mov	local01, result3
1ae14     A7 FA 61 FC | 	wrlong	result1, fp
1ae18     04 4E 05 F1 | 	add	fp, #4
1ae1c     A7 FC 61 FC | 	wrlong	result2, fp
1ae20     04 4E 05 F1 | 	add	fp, #4
1ae24     A7 26 62 FC | 	wrlong	local01, fp
1ae28     08 4E 85 F1 | 	sub	fp, #8
1ae2c     A7 12 02 F6 | 	mov	arg01, fp
1ae30     EC 20 BF FD | 	call	#_converttofloat
1ae34     FD 12 02 F6 | 	mov	arg01, result1
1ae38     DC D8 B0 FD | 	call	#__system___float_sqrt
1ae3c     A7 FA 61 FC | 	wrlong	result1, fp
1ae40     08 4E 05 F1 | 	add	fp, #8
1ae44     A7 3C 68 FC | 	wrlong	#30, fp
1ae48     08 4E 85 F1 | 	sub	fp, #8
1ae4c     A7 12 02 F6 | 	mov	arg01, fp
1ae50     C4 1E BF FD | 	call	#_push
1ae54                 | LR__2171
1ae54     A7 F0 03 F6 | 	mov	ptra, fp
1ae58     B2 00 A0 FD | 	call	#popregs_
1ae5c                 | _do_sqr_ret
1ae5c     2D 00 64 FD | 	ret
1ae60                 | 
1ae60                 | ' 
1ae60                 | ' ' ------------------ stick
1ae60                 | ' 
1ae60                 | ' sub do_stick
1ae60                 | _do_stick
1ae60     01 4A 05 F6 | 	mov	COUNT_, #1
1ae64     A8 00 A0 FD | 	call	#pushregs_
1ae68     10 F0 07 F1 | 	add	ptra, #16
1ae6c     4A 00 00 FF 
1ae70     80 E4 05 F1 | 	add	objptr, ##38016
1ae74     F2 26 02 FB | 	rdlong	local01, objptr
1ae78     13 17 02 F6 | 	mov	arg03, local01
1ae7c     01 16 66 F0 | 	shl	arg03, #1
1ae80     13 17 02 F1 | 	add	arg03, local01
1ae84     02 16 66 F0 | 	shl	arg03, #2
1ae88     03 00 00 FF 
1ae8c     04 E4 85 F1 | 	sub	objptr, ##1540
1ae90     F2 16 02 F1 | 	add	arg03, objptr
1ae94     0B 17 02 FB | 	rdlong	arg03, arg03
1ae98     0C 4E 05 F1 | 	add	fp, #12
1ae9c     A7 16 62 FC | 	wrlong	arg03, fp
1aea0                 | ' 
1aea0                 | ' numpar=compiledline(lineptr_e).result.uresult
1aea0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1aea0     0C 4E 85 F1 | 	sub	fp, #12
1aea4     02 16 16 F2 | 	cmp	arg03, #2 wc
1aea8     47 00 00 FF 
1aeac     7C E4 85 F1 | 	sub	objptr, ##36476
1aeb0     40 00 90 CD |  if_b	jmp	#LR__2180
1aeb4     00 12 06 F6 | 	mov	arg01, #0
1aeb8     E4 07 B1 FD | 	call	#__system___getiolock_0599
1aebc     FD 12 02 F6 | 	mov	arg01, result1
1aec0     B4 AA B0 FD | 	call	#__system___lockmem
1aec4     AF 01 00 FF 
1aec8     88 15 06 F6 | 	mov	arg02, ##@LR__5936
1aecc     00 12 06 F6 | 	mov	arg01, #0
1aed0     00 16 06 F6 | 	mov	arg03, #0
1aed4     94 B7 B0 FD | 	call	#__system___basic_print_string
1aed8     00 12 06 F6 | 	mov	arg01, #0
1aedc     C0 07 B1 FD | 	call	#__system___getiolock_0599
1aee0     FD 00 68 FC | 	wrlong	#0, result1
1aee4     27 12 06 F6 | 	mov	arg01, #39
1aee8     00 14 06 F6 | 	mov	arg02, #0
1aeec     9C 70 B0 FD | 	call	#_printerror
1aef0     F0 00 90 FD | 	jmp	#LR__2184
1aef4                 | LR__2180
1aef4                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1aef4     0C 4E 05 F1 | 	add	fp, #12
1aef8     A7 FE 09 FB | 	rdlong	result3, fp wz
1aefc     0C 4E 85 F1 | 	sub	fp, #12
1af00     30 00 90 5D |  if_ne	jmp	#LR__2181
1af04     51 00 00 FF 
1af08     C8 E5 05 F1 | 	add	objptr, ##41928
1af0c     F2 26 02 FB | 	rdlong	local01, objptr
1af10     51 00 00 FF 
1af14     C8 E5 85 F1 | 	sub	objptr, ##41928
1af18     A7 26 62 FC | 	wrlong	local01, fp
1af1c     08 4E 05 F1 | 	add	fp, #8
1af20     A7 3A 68 FC | 	wrlong	#29, fp
1af24     08 4E 85 F1 | 	sub	fp, #8
1af28     A7 12 02 F6 | 	mov	arg01, fp
1af2c     E8 1D BF FD | 	call	#_push
1af30     B0 00 90 FD | 	jmp	#LR__2184
1af34                 | LR__2181
1af34     48 1D BF FD | 	call	#_pop
1af38     A7 FA 61 FC | 	wrlong	result1, fp
1af3c     04 4E 05 F1 | 	add	fp, #4
1af40     A7 FC 61 FC | 	wrlong	result2, fp
1af44     04 4E 05 F1 | 	add	fp, #4
1af48     A7 FE 61 FC | 	wrlong	result3, fp
1af4c                 | ' t1=pop()
1af4c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1af4c     08 4E 85 F1 | 	sub	fp, #8
1af50     1C FE 0D F2 | 	cmp	result3, #28 wz
1af54     08 4E 05 51 |  if_ne	add	fp, #8
1af58     A7 26 02 5B |  if_ne	rdlong	local01, fp
1af5c     08 4E 85 51 |  if_ne	sub	fp, #8
1af60     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1af64     70 00 90 5D |  if_ne	jmp	#LR__2183
1af68     A7 26 02 FB | 	rdlong	local01, fp
1af6c     52 00 00 FF 
1af70     B4 E4 05 F1 | 	add	objptr, ##42164
1af74     F2 26 62 FC | 	wrlong	local01, objptr
1af78                 | '   q=t1.result.uresult
1af78                 | '   if q<7 then 
1af78     52 00 00 FF 
1af7c     B4 E4 85 F1 | 	sub	objptr, ##42164
1af80     07 26 56 F2 | 	cmps	local01, #7 wc
1af84     40 00 90 3D |  if_ae	jmp	#LR__2182
1af88     52 00 00 FF 
1af8c     B4 E4 05 F1 | 	add	objptr, ##42164
1af90     F2 26 02 FB | 	rdlong	local01, objptr
1af94     02 26 66 F0 | 	shl	local01, #2
1af98     EC E4 85 F1 | 	sub	objptr, #236
1af9c     F2 26 02 F1 | 	add	local01, objptr
1afa0     13 27 02 FB | 	rdlong	local01, local01
1afa4     A7 26 62 FC | 	wrlong	local01, fp
1afa8     08 4E 05 F1 | 	add	fp, #8
1afac     A7 3A 68 FC | 	wrlong	#29, fp
1afb0     08 4E 85 F1 | 	sub	fp, #8
1afb4     A7 12 02 F6 | 	mov	arg01, fp
1afb8     51 00 00 FF 
1afbc     C8 E5 85 F1 | 	sub	objptr, ##41928
1afc0     54 1D BF FD | 	call	#_push
1afc4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1afc4     1C 00 90 FD | 	jmp	#LR__2184
1afc8                 | LR__2182
1afc8     29 12 06 F6 | 	mov	arg01, #41
1afcc     00 14 06 F6 | 	mov	arg02, #0
1afd0     B8 6F B0 FD | 	call	#_printerror
1afd4                 | '      printerror(41) : return
1afd4     0C 00 90 FD | 	jmp	#LR__2184
1afd8                 | LR__2183
1afd8     29 12 06 F6 | 	mov	arg01, #41
1afdc     00 14 06 F6 | 	mov	arg02, #0
1afe0     A8 6F B0 FD | 	call	#_printerror
1afe4                 | LR__2184
1afe4     A7 F0 03 F6 | 	mov	ptra, fp
1afe8     B2 00 A0 FD | 	call	#popregs_
1afec                 | _do_stick_ret
1afec     2D 00 64 FD | 	ret
1aff0                 | 
1aff0                 | ' 
1aff0                 | ' ' ------------------ strig
1aff0                 | ' 
1aff0                 | ' sub do_strig
1aff0                 | _do_strig
1aff0     01 4A 05 F6 | 	mov	COUNT_, #1
1aff4     A8 00 A0 FD | 	call	#pushregs_
1aff8     10 F0 07 F1 | 	add	ptra, #16
1affc     4A 00 00 FF 
1b000     80 E4 05 F1 | 	add	objptr, ##38016
1b004     F2 26 02 FB | 	rdlong	local01, objptr
1b008     13 17 02 F6 | 	mov	arg03, local01
1b00c     01 16 66 F0 | 	shl	arg03, #1
1b010     13 17 02 F1 | 	add	arg03, local01
1b014     02 16 66 F0 | 	shl	arg03, #2
1b018     03 00 00 FF 
1b01c     04 E4 85 F1 | 	sub	objptr, ##1540
1b020     F2 16 02 F1 | 	add	arg03, objptr
1b024     0B 17 02 FB | 	rdlong	arg03, arg03
1b028     0C 4E 05 F1 | 	add	fp, #12
1b02c     A7 16 62 FC | 	wrlong	arg03, fp
1b030                 | ' 
1b030                 | ' numpar=compiledline(lineptr_e).result.uresult
1b030                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1b030     0C 4E 85 F1 | 	sub	fp, #12
1b034     02 16 16 F2 | 	cmp	arg03, #2 wc
1b038     47 00 00 FF 
1b03c     7C E4 85 F1 | 	sub	objptr, ##36476
1b040     40 00 90 CD |  if_b	jmp	#LR__2190
1b044     00 12 06 F6 | 	mov	arg01, #0
1b048     54 06 B1 FD | 	call	#__system___getiolock_0599
1b04c     FD 12 02 F6 | 	mov	arg01, result1
1b050     24 A9 B0 FD | 	call	#__system___lockmem
1b054     AF 01 00 FF 
1b058     90 15 06 F6 | 	mov	arg02, ##@LR__5937
1b05c     00 12 06 F6 | 	mov	arg01, #0
1b060     00 16 06 F6 | 	mov	arg03, #0
1b064     04 B6 B0 FD | 	call	#__system___basic_print_string
1b068     00 12 06 F6 | 	mov	arg01, #0
1b06c     30 06 B1 FD | 	call	#__system___getiolock_0599
1b070     FD 00 68 FC | 	wrlong	#0, result1
1b074     27 12 06 F6 | 	mov	arg01, #39
1b078     00 14 06 F6 | 	mov	arg02, #0
1b07c     0C 6F B0 FD | 	call	#_printerror
1b080     F0 00 90 FD | 	jmp	#LR__2194
1b084                 | LR__2190
1b084                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1b084     0C 4E 05 F1 | 	add	fp, #12
1b088     A7 FE 09 FB | 	rdlong	result3, fp wz
1b08c     0C 4E 85 F1 | 	sub	fp, #12
1b090     30 00 90 5D |  if_ne	jmp	#LR__2191
1b094     51 00 00 FF 
1b098     E4 E5 05 F1 | 	add	objptr, ##41956
1b09c     F2 26 02 FB | 	rdlong	local01, objptr
1b0a0     51 00 00 FF 
1b0a4     E4 E5 85 F1 | 	sub	objptr, ##41956
1b0a8     A7 26 62 FC | 	wrlong	local01, fp
1b0ac     08 4E 05 F1 | 	add	fp, #8
1b0b0     A7 3A 68 FC | 	wrlong	#29, fp
1b0b4     08 4E 85 F1 | 	sub	fp, #8
1b0b8     A7 12 02 F6 | 	mov	arg01, fp
1b0bc     58 1C BF FD | 	call	#_push
1b0c0     B0 00 90 FD | 	jmp	#LR__2194
1b0c4                 | LR__2191
1b0c4     B8 1B BF FD | 	call	#_pop
1b0c8     A7 FA 61 FC | 	wrlong	result1, fp
1b0cc     04 4E 05 F1 | 	add	fp, #4
1b0d0     A7 FC 61 FC | 	wrlong	result2, fp
1b0d4     04 4E 05 F1 | 	add	fp, #4
1b0d8     A7 FE 61 FC | 	wrlong	result3, fp
1b0dc                 | ' t1=pop()
1b0dc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b0dc     08 4E 85 F1 | 	sub	fp, #8
1b0e0     1C FE 0D F2 | 	cmp	result3, #28 wz
1b0e4     08 4E 05 51 |  if_ne	add	fp, #8
1b0e8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b0ec     08 4E 85 51 |  if_ne	sub	fp, #8
1b0f0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1b0f4     70 00 90 5D |  if_ne	jmp	#LR__2193
1b0f8     A7 26 02 FB | 	rdlong	local01, fp
1b0fc     52 00 00 FF 
1b100     B4 E4 05 F1 | 	add	objptr, ##42164
1b104     F2 26 62 FC | 	wrlong	local01, objptr
1b108                 | '   q=t1.result.uresult
1b108                 | '   if q<7 then 
1b108     52 00 00 FF 
1b10c     B4 E4 85 F1 | 	sub	objptr, ##42164
1b110     07 26 56 F2 | 	cmps	local01, #7 wc
1b114     40 00 90 3D |  if_ae	jmp	#LR__2192
1b118     52 00 00 FF 
1b11c     B4 E4 05 F1 | 	add	objptr, ##42164
1b120     F2 26 02 FB | 	rdlong	local01, objptr
1b124     02 26 66 F0 | 	shl	local01, #2
1b128     D0 E4 85 F1 | 	sub	objptr, #208
1b12c     F2 26 02 F1 | 	add	local01, objptr
1b130     13 27 02 FB | 	rdlong	local01, local01
1b134     A7 26 62 FC | 	wrlong	local01, fp
1b138     08 4E 05 F1 | 	add	fp, #8
1b13c     A7 3A 68 FC | 	wrlong	#29, fp
1b140     08 4E 85 F1 | 	sub	fp, #8
1b144     A7 12 02 F6 | 	mov	arg01, fp
1b148     51 00 00 FF 
1b14c     E4 E5 85 F1 | 	sub	objptr, ##41956
1b150     C4 1B BF FD | 	call	#_push
1b154                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1b154     1C 00 90 FD | 	jmp	#LR__2194
1b158                 | LR__2192
1b158     29 12 06 F6 | 	mov	arg01, #41
1b15c     00 14 06 F6 | 	mov	arg02, #0
1b160     28 6E B0 FD | 	call	#_printerror
1b164                 | '      printerror(41) : return
1b164     0C 00 90 FD | 	jmp	#LR__2194
1b168                 | LR__2193
1b168     29 12 06 F6 | 	mov	arg01, #41
1b16c     00 14 06 F6 | 	mov	arg02, #0
1b170     18 6E B0 FD | 	call	#_printerror
1b174                 | LR__2194
1b174     A7 F0 03 F6 | 	mov	ptra, fp
1b178     B2 00 A0 FD | 	call	#popregs_
1b17c                 | _do_strig_ret
1b17c     2D 00 64 FD | 	ret
1b180                 | 
1b180                 | ' 
1b180                 | ' ' ------------------ tan
1b180                 | ' 
1b180                 | ' sub do_tan
1b180                 | _do_tan
1b180     01 4A 05 F6 | 	mov	COUNT_, #1
1b184     A8 00 A0 FD | 	call	#pushregs_
1b188     10 F0 07 F1 | 	add	ptra, #16
1b18c     4A 00 00 FF 
1b190     80 E4 05 F1 | 	add	objptr, ##38016
1b194     F2 26 02 FB | 	rdlong	local01, objptr
1b198     13 17 02 F6 | 	mov	arg03, local01
1b19c     01 16 66 F0 | 	shl	arg03, #1
1b1a0     13 17 02 F1 | 	add	arg03, local01
1b1a4     02 16 66 F0 | 	shl	arg03, #2
1b1a8     03 00 00 FF 
1b1ac     04 E4 85 F1 | 	sub	objptr, ##1540
1b1b0     F2 16 02 F1 | 	add	arg03, objptr
1b1b4     0B 17 02 FB | 	rdlong	arg03, arg03
1b1b8     0C 4E 05 F1 | 	add	fp, #12
1b1bc     A7 16 62 FC | 	wrlong	arg03, fp
1b1c0                 | ' 
1b1c0                 | ' numpar=compiledline(lineptr_e).result.uresult
1b1c0                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b1c0     0C 4E 85 F1 | 	sub	fp, #12
1b1c4     02 16 16 F2 | 	cmp	arg03, #2 wc
1b1c8     47 00 00 FF 
1b1cc     7C E4 85 F1 | 	sub	objptr, ##36476
1b1d0     0C 4E 05 C1 |  if_b	add	fp, #12
1b1d4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b1d8     0C 4E 85 C1 |  if_b	sub	fp, #12
1b1dc     40 00 90 4D |  if_c_and_nz	jmp	#LR__2200
1b1e0     00 12 06 F6 | 	mov	arg01, #0
1b1e4     B8 04 B1 FD | 	call	#__system___getiolock_0599
1b1e8     FD 12 02 F6 | 	mov	arg01, result1
1b1ec     88 A7 B0 FD | 	call	#__system___lockmem
1b1f0     AF 01 00 FF 
1b1f4     98 15 06 F6 | 	mov	arg02, ##@LR__5938
1b1f8     00 12 06 F6 | 	mov	arg01, #0
1b1fc     00 16 06 F6 | 	mov	arg03, #0
1b200     68 B4 B0 FD | 	call	#__system___basic_print_string
1b204     00 12 06 F6 | 	mov	arg01, #0
1b208     94 04 B1 FD | 	call	#__system___getiolock_0599
1b20c     FD 00 68 FC | 	wrlong	#0, result1
1b210     27 12 06 F6 | 	mov	arg01, #39
1b214     00 14 06 F6 | 	mov	arg02, #0
1b218     70 6D B0 FD | 	call	#_printerror
1b21c     64 00 90 FD | 	jmp	#LR__2201
1b220                 | LR__2200
1b220     5C 1A BF FD | 	call	#_pop
1b224     A7 FA 61 FC | 	wrlong	result1, fp
1b228     04 4E 05 F1 | 	add	fp, #4
1b22c     A7 FC 61 FC | 	wrlong	result2, fp
1b230     04 4E 05 F1 | 	add	fp, #4
1b234     A7 FE 61 FC | 	wrlong	result3, fp
1b238     08 4E 85 F1 | 	sub	fp, #8
1b23c     52 00 00 FF 
1b240     54 E4 05 F1 | 	add	objptr, ##42068
1b244     F2 26 02 FB | 	rdlong	local01, objptr
1b248     52 00 00 FF 
1b24c     54 E4 85 F1 | 	sub	objptr, ##42068
1b250     A7 12 02 F6 | 	mov	arg01, fp
1b254     C8 1C BF FD | 	call	#_converttofloat
1b258     FD 14 02 F6 | 	mov	arg02, result1
1b25c     13 13 02 F6 | 	mov	arg01, local01
1b260     8C D5 B0 FD | 	call	#__system___float_mul
1b264     FD 12 02 F6 | 	mov	arg01, result1
1b268     30 E0 B0 FD | 	call	#__system____builtin_tanf
1b26c     A7 FA 61 FC | 	wrlong	result1, fp
1b270     08 4E 05 F1 | 	add	fp, #8
1b274     A7 3C 68 FC | 	wrlong	#30, fp
1b278     08 4E 85 F1 | 	sub	fp, #8
1b27c     A7 12 02 F6 | 	mov	arg01, fp
1b280     94 1A BF FD | 	call	#_push
1b284                 | LR__2201
1b284     A7 F0 03 F6 | 	mov	ptra, fp
1b288     B2 00 A0 FD | 	call	#popregs_
1b28c                 | _do_tan_ret
1b28c     2D 00 64 FD | 	ret
1b290                 | 
1b290                 | ' 
1b290                 | ' ' ------------------ val
1b290                 | ' 
1b290                 | ' sub do_val
1b290                 | _do_val
1b290     03 4A 05 F6 | 	mov	COUNT_, #3
1b294     A8 00 A0 FD | 	call	#pushregs_
1b298     20 F0 07 F1 | 	add	ptra, #32
1b29c     4A 00 00 FF 
1b2a0     80 E4 05 F1 | 	add	objptr, ##38016
1b2a4     F2 16 02 FB | 	rdlong	arg03, objptr
1b2a8     0B 27 02 F6 | 	mov	local01, arg03
1b2ac     01 26 66 F0 | 	shl	local01, #1
1b2b0     0B 27 02 F1 | 	add	local01, arg03
1b2b4     02 26 66 F0 | 	shl	local01, #2
1b2b8     03 00 00 FF 
1b2bc     04 E4 85 F1 | 	sub	objptr, ##1540
1b2c0     F2 26 02 F1 | 	add	local01, objptr
1b2c4     13 17 02 FB | 	rdlong	arg03, local01
1b2c8     0C 4E 05 F1 | 	add	fp, #12
1b2cc     A7 16 62 FC | 	wrlong	arg03, fp
1b2d0                 | ' 
1b2d0                 | ' numpar=compiledline(lineptr_e).result.uresult
1b2d0                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1b2d0     0C 4E 85 F1 | 	sub	fp, #12
1b2d4     02 16 16 F2 | 	cmp	arg03, #2 wc
1b2d8     47 00 00 FF 
1b2dc     7C E4 85 F1 | 	sub	objptr, ##36476
1b2e0     0C 4E 05 C1 |  if_b	add	fp, #12
1b2e4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b2e8     0C 4E 85 C1 |  if_b	sub	fp, #12
1b2ec     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1b2f0     00 12 06 F6 | 	mov	arg01, #0
1b2f4     A8 03 B1 FD | 	call	#__system___getiolock_0599
1b2f8     FD 12 02 F6 | 	mov	arg01, result1
1b2fc     78 A6 B0 FD | 	call	#__system___lockmem
1b300     AF 01 00 FF 
1b304     9E 15 06 F6 | 	mov	arg02, ##@LR__5939
1b308     00 12 06 F6 | 	mov	arg01, #0
1b30c     00 16 06 F6 | 	mov	arg03, #0
1b310     58 B3 B0 FD | 	call	#__system___basic_print_string
1b314     00 12 06 F6 | 	mov	arg01, #0
1b318     84 03 B1 FD | 	call	#__system___getiolock_0599
1b31c     FD 00 68 FC | 	wrlong	#0, result1
1b320     27 12 06 F6 | 	mov	arg01, #39
1b324     00 14 06 F6 | 	mov	arg02, #0
1b328     60 6C B0 FD | 	call	#_printerror
1b32c     60 02 90 FD | 	jmp	#LR__2223
1b330                 | LR__2210
1b330     4C 19 BF FD | 	call	#_pop
1b334     FF 16 02 F6 | 	mov	arg03, result3
1b338     A7 FA 61 FC | 	wrlong	result1, fp
1b33c     04 4E 05 F1 | 	add	fp, #4
1b340     A7 FC 61 FC | 	wrlong	result2, fp
1b344     04 4E 05 F1 | 	add	fp, #4
1b348     A7 16 62 FC | 	wrlong	arg03, fp
1b34c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b34c     08 4E 85 F1 | 	sub	fp, #8
1b350     2B 16 0E F2 | 	cmp	arg03, #43 wz
1b354     18 00 90 5D |  if_ne	jmp	#LR__2211
1b358     A7 12 02 FB | 	rdlong	arg01, fp
1b35c     98 1A BF FD | 	call	#_convertstring
1b360     A7 FA 61 FC | 	wrlong	result1, fp
1b364     08 4E 05 F1 | 	add	fp, #8
1b368     A7 3E 68 FC | 	wrlong	#31, fp
1b36c     08 4E 85 F1 | 	sub	fp, #8
1b370                 | LR__2211
1b370                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1b370     08 4E 05 F1 | 	add	fp, #8
1b374     A7 16 02 FB | 	rdlong	arg03, fp
1b378     08 4E 85 F1 | 	sub	fp, #8
1b37c     1F 16 0E F2 | 	cmp	arg03, #31 wz
1b380     40 00 90 AD |  if_e	jmp	#LR__2212
1b384     00 12 06 F6 | 	mov	arg01, #0
1b388     14 03 B1 FD | 	call	#__system___getiolock_0599
1b38c     FD 12 02 F6 | 	mov	arg01, result1
1b390     E4 A5 B0 FD | 	call	#__system___lockmem
1b394     AF 01 00 FF 
1b398     A4 15 06 F6 | 	mov	arg02, ##@LR__5940
1b39c     00 12 06 F6 | 	mov	arg01, #0
1b3a0     00 16 06 F6 | 	mov	arg03, #0
1b3a4     C4 B2 B0 FD | 	call	#__system___basic_print_string
1b3a8     00 12 06 F6 | 	mov	arg01, #0
1b3ac     F0 02 B1 FD | 	call	#__system___getiolock_0599
1b3b0     FD 00 68 FC | 	wrlong	#0, result1
1b3b4     0F 12 06 F6 | 	mov	arg01, #15
1b3b8     00 14 06 F6 | 	mov	arg02, #0
1b3bc     CC 6B B0 FD | 	call	#_printerror
1b3c0     CC 01 90 FD | 	jmp	#LR__2223
1b3c4                 | LR__2212
1b3c4                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b3c4     A7 12 02 FB | 	rdlong	arg01, fp
1b3c8     01 14 06 F6 | 	mov	arg02, #1
1b3cc     24 C6 B0 FD | 	call	#__system__Left_S
1b3d0     FD 12 02 F6 | 	mov	arg01, result1
1b3d4     AF 01 00 FF 
1b3d8     AA 15 06 F6 | 	mov	arg02, ##@LR__5941
1b3dc     C0 A5 B0 FD | 	call	#__system___string_cmp
1b3e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3e4     48 00 90 5D |  if_ne	jmp	#LR__2215
1b3e8     AF 01 00 FF 
1b3ec     AC 27 06 F6 | 	mov	local01, ##@LR__5942
1b3f0     A7 16 02 FB | 	rdlong	arg03, fp
1b3f4     0B 13 02 F6 | 	mov	arg01, arg03
1b3f8     09 29 02 F6 | 	mov	local02, arg01
1b3fc     97 06 48 FB | 	callpa	#(@LR__2214-@LR__2213)>>2,fcache_load_ptr_
1b400                 | LR__2213
1b400     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b404     01 28 06 51 |  if_ne	add	local02, #1
1b408     F4 FF 9F 5D |  if_ne	jmp	#LR__2213
1b40c                 | LR__2214
1b40c     09 29 82 F1 | 	sub	local02, arg01
1b410     14 15 02 F6 | 	mov	arg02, local02
1b414     01 14 86 F1 | 	sub	arg02, #1
1b418     0B 13 02 F6 | 	mov	arg01, arg03
1b41c     5C C6 B0 FD | 	call	#__system__Right_S
1b420     FD 14 02 F6 | 	mov	arg02, result1
1b424     13 13 02 F6 | 	mov	arg01, local01
1b428     A8 A5 B0 FD | 	call	#__system___string_concat
1b42c     A7 FA 61 FC | 	wrlong	result1, fp
1b430                 | LR__2215
1b430                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b430     A7 12 02 FB | 	rdlong	arg01, fp
1b434     01 14 06 F6 | 	mov	arg02, #1
1b438     B8 C5 B0 FD | 	call	#__system__Left_S
1b43c     FD 12 02 F6 | 	mov	arg01, result1
1b440     AF 01 00 FF 
1b444     AF 15 06 F6 | 	mov	arg02, ##@LR__5943
1b448     54 A5 B0 FD | 	call	#__system___string_cmp
1b44c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b450     48 00 90 5D |  if_ne	jmp	#LR__2218
1b454     AF 01 00 FF 
1b458     B1 27 06 F6 | 	mov	local01, ##@LR__5944
1b45c     A7 16 02 FB | 	rdlong	arg03, fp
1b460     0B 13 02 F6 | 	mov	arg01, arg03
1b464     09 29 02 F6 | 	mov	local02, arg01
1b468     97 06 48 FB | 	callpa	#(@LR__2217-@LR__2216)>>2,fcache_load_ptr_
1b46c                 | LR__2216
1b46c     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b470     01 28 06 51 |  if_ne	add	local02, #1
1b474     F4 FF 9F 5D |  if_ne	jmp	#LR__2216
1b478                 | LR__2217
1b478     09 29 82 F1 | 	sub	local02, arg01
1b47c     14 15 02 F6 | 	mov	arg02, local02
1b480     01 14 86 F1 | 	sub	arg02, #1
1b484     0B 13 02 F6 | 	mov	arg01, arg03
1b488     F0 C5 B0 FD | 	call	#__system__Right_S
1b48c     FD 14 02 F6 | 	mov	arg02, result1
1b490     13 13 02 F6 | 	mov	arg01, local01
1b494     3C A5 B0 FD | 	call	#__system___string_concat
1b498     A7 FA 61 FC | 	wrlong	result1, fp
1b49c                 | LR__2218
1b49c     A7 12 02 FB | 	rdlong	arg01, fp
1b4a0     58 DB B0 FD | 	call	#__system____builtin_atof
1b4a4     1C 4E 05 F1 | 	add	fp, #28
1b4a8     A7 FA 61 FC | 	wrlong	result1, fp
1b4ac     1C 4E 85 F1 | 	sub	fp, #28
1b4b0     A7 12 02 FB | 	rdlong	arg01, fp
1b4b4     00 14 06 F6 | 	mov	arg02, #0
1b4b8     AC D9 B0 FD | 	call	#__system____builtin_atoi
1b4bc     18 4E 05 F1 | 	add	fp, #24
1b4c0     A7 FA 61 FC | 	wrlong	result1, fp
1b4c4                 | ' fval=val(t1.result.sresult)
1b4c4                 | ' ival=val%(t1.result.sresult)
1b4c4                 | ' if fval=ival then
1b4c4     04 4E 05 F1 | 	add	fp, #4
1b4c8     A7 26 02 FB | 	rdlong	local01, fp
1b4cc     1C 4E 85 F1 | 	sub	fp, #28
1b4d0     FD 12 52 F6 | 	abs	arg01, result1 wc
1b4d4     1F 2A C6 C9 |  if_b	decod	local03, #31
1b4d8     00 2A 06 36 |  if_ae	mov	local03, #0
1b4dc     0C CF B0 FD | 	call	#__system___float_fromuns
1b4e0     15 FB 61 F5 | 	xor	result1, local03
1b4e4     FD 14 02 F6 | 	mov	arg02, result1
1b4e8     13 13 02 F6 | 	mov	arg01, local01
1b4ec     01 16 06 F6 | 	mov	arg03, #1
1b4f0     30 D7 B0 FD | 	call	#__system___float_cmp
1b4f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b4f8     20 00 90 5D |  if_ne	jmp	#LR__2219
1b4fc     18 4E 05 F1 | 	add	fp, #24
1b500     A7 26 02 FB | 	rdlong	local01, fp
1b504     18 4E 85 F1 | 	sub	fp, #24
1b508     A7 26 62 FC | 	wrlong	local01, fp
1b50c     08 4E 05 F1 | 	add	fp, #8
1b510     A7 38 68 FC | 	wrlong	#28, fp
1b514     08 4E 85 F1 | 	sub	fp, #8
1b518     6C 00 90 FD | 	jmp	#LR__2222
1b51c                 | LR__2219
1b51c                 | '   if fval=0 andalso ival<>0 then
1b51c     1C 4E 05 F1 | 	add	fp, #28
1b520     A7 12 02 FB | 	rdlong	arg01, fp
1b524     1C 4E 85 F1 | 	sub	fp, #28
1b528     00 14 06 F6 | 	mov	arg02, #0
1b52c     01 16 06 F6 | 	mov	arg03, #1
1b530     F0 D6 B0 FD | 	call	#__system___float_cmp
1b534     00 FA 0D F2 | 	cmp	result1, #0 wz
1b538     30 00 90 5D |  if_ne	jmp	#LR__2220
1b53c     18 4E 05 F1 | 	add	fp, #24
1b540     A7 26 0A FB | 	rdlong	local01, fp wz
1b544     18 4E 85 F1 | 	sub	fp, #24
1b548     20 00 90 AD |  if_e	jmp	#LR__2220
1b54c     18 4E 05 F1 | 	add	fp, #24
1b550     A7 26 02 FB | 	rdlong	local01, fp
1b554     18 4E 85 F1 | 	sub	fp, #24
1b558     A7 26 62 FC | 	wrlong	local01, fp
1b55c     08 4E 05 F1 | 	add	fp, #8
1b560     A7 38 68 FC | 	wrlong	#28, fp
1b564     08 4E 85 F1 | 	sub	fp, #8
1b568     1C 00 90 FD | 	jmp	#LR__2221
1b56c                 | LR__2220
1b56c     1C 4E 05 F1 | 	add	fp, #28
1b570     A7 26 02 FB | 	rdlong	local01, fp
1b574     1C 4E 85 F1 | 	sub	fp, #28
1b578     A7 26 62 FC | 	wrlong	local01, fp
1b57c     08 4E 05 F1 | 	add	fp, #8
1b580     A7 3C 68 FC | 	wrlong	#30, fp
1b584     08 4E 85 F1 | 	sub	fp, #8
1b588                 | LR__2221
1b588                 | LR__2222
1b588     A7 12 02 F6 | 	mov	arg01, fp
1b58c     88 17 BF FD | 	call	#_push
1b590                 | LR__2223
1b590     A7 F0 03 F6 | 	mov	ptra, fp
1b594     B2 00 A0 FD | 	call	#popregs_
1b598                 | _do_val_ret
1b598     2D 00 64 FD | 	ret
1b59c                 | 
1b59c                 | ' 
1b59c                 | ' ' ------------------ waitclock
1b59c                 | ' 
1b59c                 | ' sub do_waitclock
1b59c                 | _do_waitclock
1b59c     52 00 00 FF 
1b5a0     40 E4 05 F1 | 	add	objptr, ##42048
1b5a4     F2 00 02 FB | 	rdlong	_var01, objptr
1b5a8                 | ' c=hkcnt
1b5a8                 | ' do: loop until hkcnt<>c
1b5a8                 | LR__2230
1b5a8     F2 02 02 FB | 	rdlong	_var02, objptr
1b5ac     00 03 0A F2 | 	cmp	_var02, _var01 wz
1b5b0     F4 FF 9F AD |  if_e	jmp	#LR__2230
1b5b4     52 00 00 FF 
1b5b8     40 E4 85 F1 | 	sub	objptr, ##42048
1b5bc                 | _do_waitclock_ret
1b5bc     2D 00 64 FD | 	ret
1b5c0                 | 
1b5c0                 | ' 
1b5c0                 | ' ' ------------------ waitms
1b5c0                 | ' 
1b5c0                 | ' sub do_waitms
1b5c0                 | _do_waitms
1b5c0     01 4A 05 F6 | 	mov	COUNT_, #1
1b5c4     A8 00 A0 FD | 	call	#pushregs_
1b5c8     18 F0 07 F1 | 	add	ptra, #24
1b5cc     B0 16 BF FD | 	call	#_pop
1b5d0     A7 FA 61 FC | 	wrlong	result1, fp
1b5d4     04 4E 05 F1 | 	add	fp, #4
1b5d8     A7 FC 61 FC | 	wrlong	result2, fp
1b5dc     04 4E 05 F1 | 	add	fp, #4
1b5e0     A7 FE 61 FC | 	wrlong	result3, fp
1b5e4     08 4E 85 F1 | 	sub	fp, #8
1b5e8     A7 12 02 F6 | 	mov	arg01, fp
1b5ec     74 18 BF FD | 	call	#_converttoint
1b5f0     0C 4E 05 F1 | 	add	fp, #12
1b5f4     A7 FA 61 FC | 	wrlong	result1, fp
1b5f8                 | ' 
1b5f8                 | ' t1=pop()  
1b5f8                 | ' t=converttoint(t1)
1b5f8                 | ' if t<0 then return
1b5f8     0C 4E 85 F1 | 	sub	fp, #12
1b5fc     00 FA 55 F2 | 	cmps	result1, #0 wc
1b600     E4 00 90 CD |  if_b	jmp	#LR__2246
1b604                 | ' if t < 1000 then 
1b604     0C 4E 05 F1 | 	add	fp, #12
1b608     A7 12 02 FB | 	rdlong	arg01, fp
1b60c     0C 4E 85 F1 | 	sub	fp, #12
1b610     01 00 00 FF 
1b614     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1b618     14 00 90 3D |  if_ae	jmp	#LR__2240
1b61c     0C 4E 05 F1 | 	add	fp, #12
1b620     A7 12 02 FB | 	rdlong	arg01, fp
1b624     0C 4E 85 F1 | 	sub	fp, #12
1b628     40 A6 B0 FD | 	call	#__system___waitms
1b62c     B8 00 90 FD | 	jmp	#LR__2245
1b630                 | LR__2240
1b630     10 4E 05 F1 | 	add	fp, #16
1b634     A7 02 68 FC | 	wrlong	#1, fp
1b638     04 4E 85 F1 | 	sub	fp, #4
1b63c     A7 12 02 FB | 	rdlong	arg01, fp
1b640     09 13 52 F6 | 	abs	arg01, arg01 wc
1b644     01 00 00 FF 
1b648     E8 13 16 FD | 	qdiv	arg01, ##1000
1b64c                 | '   for i=1 to t/1000
1b64c     0C 4E 85 F1 | 	sub	fp, #12
1b650     18 26 62 FD | 	getqx	local01
1b654     13 27 82 F6 | 	negc	local01, local01
1b658     01 26 06 F1 | 	add	local01, #1
1b65c                 | LR__2241
1b65c     10 4E 05 F1 | 	add	fp, #16
1b660     A7 12 02 FB | 	rdlong	arg01, fp
1b664     10 4E 85 F1 | 	sub	fp, #16
1b668     13 13 52 F2 | 	cmps	arg01, local01 wc
1b66c     54 00 90 3D |  if_ae	jmp	#LR__2244
1b670     01 00 00 FF 
1b674     E8 13 06 F6 | 	mov	arg01, ##1000
1b678     F0 A5 B0 FD | 	call	#__system___waitms
1b67c                 | '     waitms(1000)
1b67c                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1b67c     E0 12 06 F6 | 	mov	arg01, #224
1b680     FC 99 B0 FD | 	call	#_usbnew_spin2_keystate
1b684     00 FA 0D F2 | 	cmp	result1, #0 wz
1b688     10 00 90 5D |  if_ne	jmp	#LR__2242
1b68c     E4 12 06 F6 | 	mov	arg01, #228
1b690     EC 99 B0 FD | 	call	#_usbnew_spin2_keystate
1b694     00 FA 0D F2 | 	cmp	result1, #0 wz
1b698     10 00 90 AD |  if_e	jmp	#LR__2243
1b69c                 | LR__2242
1b69c     06 12 06 F6 | 	mov	arg01, #6
1b6a0     DC 99 B0 FD | 	call	#_usbnew_spin2_keystate
1b6a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b6a8     3C 00 90 5D |  if_ne	jmp	#LR__2246
1b6ac                 | LR__2243
1b6ac     10 4E 05 F1 | 	add	fp, #16
1b6b0     A7 12 02 FB | 	rdlong	arg01, fp
1b6b4     01 12 06 F1 | 	add	arg01, #1
1b6b8     A7 12 62 FC | 	wrlong	arg01, fp
1b6bc     10 4E 85 F1 | 	sub	fp, #16
1b6c0     98 FF 9F FD | 	jmp	#LR__2241
1b6c4                 | LR__2244
1b6c4     0C 4E 05 F1 | 	add	fp, #12
1b6c8     A7 26 02 FB | 	rdlong	local01, fp
1b6cc     13 27 52 F6 | 	abs	local01, local01 wc
1b6d0     01 00 00 FF 
1b6d4     E8 27 16 FD | 	qdiv	local01, ##1000
1b6d8     0C 4E 85 F1 | 	sub	fp, #12
1b6dc     19 26 62 FD | 	getqy	local01
1b6e0     13 13 82 F6 | 	negc	arg01, local01
1b6e4     84 A5 B0 FD | 	call	#__system___waitms
1b6e8                 | LR__2245
1b6e8                 | LR__2246
1b6e8     A7 F0 03 F6 | 	mov	ptra, fp
1b6ec     B2 00 A0 FD | 	call	#popregs_
1b6f0                 | _do_waitms_ret
1b6f0     2D 00 64 FD | 	ret
1b6f4                 | 
1b6f4                 | ' 
1b6f4                 | ' ' ------------------ waitvbl
1b6f4                 | ' 
1b6f4                 | ' sub do_waitvbl
1b6f4                 | _do_waitvbl
1b6f4     01 12 06 F6 | 	mov	arg01, #1
1b6f8     88 85 B0 FD | 	call	#_hg010b_spin2_waitvbl
1b6fc                 | _do_waitvbl_ret
1b6fc     2D 00 64 FD | 	ret
1b700                 | 
1b700                 | ' 
1b700                 | ' ' ------------------ wrpin
1b700                 | ' 
1b700                 | ' sub do_wrpin
1b700                 | _do_wrpin
1b700     01 4A 05 F6 | 	mov	COUNT_, #1
1b704     A8 00 A0 FD | 	call	#pushregs_
1b708     18 F0 07 F1 | 	add	ptra, #24
1b70c     70 15 BF FD | 	call	#_pop
1b710     FD 14 02 F6 | 	mov	arg02, result1
1b714     FE 12 02 F6 | 	mov	arg01, result2
1b718     FF 26 02 F6 | 	mov	local01, result3
1b71c     A7 14 62 FC | 	wrlong	arg02, fp
1b720     04 4E 05 F1 | 	add	fp, #4
1b724     A7 12 62 FC | 	wrlong	arg01, fp
1b728     04 4E 05 F1 | 	add	fp, #4
1b72c     A7 26 62 FC | 	wrlong	local01, fp
1b730     08 4E 85 F1 | 	sub	fp, #8
1b734     48 15 BF FD | 	call	#_pop
1b738     FF 26 02 F6 | 	mov	local01, result3
1b73c     0C 4E 05 F1 | 	add	fp, #12
1b740     A7 FA 61 FC | 	wrlong	result1, fp
1b744     04 4E 05 F1 | 	add	fp, #4
1b748     A7 FC 61 FC | 	wrlong	result2, fp
1b74c     04 4E 05 F1 | 	add	fp, #4
1b750     A7 26 62 FC | 	wrlong	local01, fp
1b754     08 4E 85 F1 | 	sub	fp, #8
1b758     A7 12 02 F6 | 	mov	arg01, fp
1b75c     0C 4E 85 F1 | 	sub	fp, #12
1b760     00 17 BF FD | 	call	#_converttoint
1b764     FD 26 02 F6 | 	mov	local01, result1
1b768     A7 12 02 F6 | 	mov	arg01, fp
1b76c     F4 16 BF FD | 	call	#_converttoint
1b770     13 FB 01 FC | 	wrpin	result1, local01
1b774     A7 F0 03 F6 | 	mov	ptra, fp
1b778     B2 00 A0 FD | 	call	#popregs_
1b77c                 | _do_wrpin_ret
1b77c     2D 00 64 FD | 	ret
1b780                 | 
1b780                 | ' 
1b780                 | ' ' ------------------ wxpin
1b780                 | ' 
1b780                 | ' sub do_wxpin
1b780                 | _do_wxpin
1b780     01 4A 05 F6 | 	mov	COUNT_, #1
1b784     A8 00 A0 FD | 	call	#pushregs_
1b788     18 F0 07 F1 | 	add	ptra, #24
1b78c     F0 14 BF FD | 	call	#_pop
1b790     FD 14 02 F6 | 	mov	arg02, result1
1b794     FE 12 02 F6 | 	mov	arg01, result2
1b798     FF 26 02 F6 | 	mov	local01, result3
1b79c     A7 14 62 FC | 	wrlong	arg02, fp
1b7a0     04 4E 05 F1 | 	add	fp, #4
1b7a4     A7 12 62 FC | 	wrlong	arg01, fp
1b7a8     04 4E 05 F1 | 	add	fp, #4
1b7ac     A7 26 62 FC | 	wrlong	local01, fp
1b7b0     08 4E 85 F1 | 	sub	fp, #8
1b7b4     C8 14 BF FD | 	call	#_pop
1b7b8     FF 26 02 F6 | 	mov	local01, result3
1b7bc     0C 4E 05 F1 | 	add	fp, #12
1b7c0     A7 FA 61 FC | 	wrlong	result1, fp
1b7c4     04 4E 05 F1 | 	add	fp, #4
1b7c8     A7 FC 61 FC | 	wrlong	result2, fp
1b7cc     04 4E 05 F1 | 	add	fp, #4
1b7d0     A7 26 62 FC | 	wrlong	local01, fp
1b7d4     08 4E 85 F1 | 	sub	fp, #8
1b7d8     A7 12 02 F6 | 	mov	arg01, fp
1b7dc     0C 4E 85 F1 | 	sub	fp, #12
1b7e0     80 16 BF FD | 	call	#_converttoint
1b7e4     FD 26 02 F6 | 	mov	local01, result1
1b7e8     A7 12 02 F6 | 	mov	arg01, fp
1b7ec     74 16 BF FD | 	call	#_converttoint
1b7f0     13 FB 11 FC | 	wxpin	result1, local01
1b7f4     A7 F0 03 F6 | 	mov	ptra, fp
1b7f8     B2 00 A0 FD | 	call	#popregs_
1b7fc                 | _do_wxpin_ret
1b7fc     2D 00 64 FD | 	ret
1b800                 | 
1b800                 | ' 
1b800                 | ' ' ------------------ wypin
1b800                 | ' 
1b800                 | ' sub do_wypin
1b800                 | _do_wypin
1b800     01 4A 05 F6 | 	mov	COUNT_, #1
1b804     A8 00 A0 FD | 	call	#pushregs_
1b808     18 F0 07 F1 | 	add	ptra, #24
1b80c     70 14 BF FD | 	call	#_pop
1b810     FD 14 02 F6 | 	mov	arg02, result1
1b814     FE 12 02 F6 | 	mov	arg01, result2
1b818     FF 26 02 F6 | 	mov	local01, result3
1b81c     A7 14 62 FC | 	wrlong	arg02, fp
1b820     04 4E 05 F1 | 	add	fp, #4
1b824     A7 12 62 FC | 	wrlong	arg01, fp
1b828     04 4E 05 F1 | 	add	fp, #4
1b82c     A7 26 62 FC | 	wrlong	local01, fp
1b830     08 4E 85 F1 | 	sub	fp, #8
1b834     48 14 BF FD | 	call	#_pop
1b838     FF 26 02 F6 | 	mov	local01, result3
1b83c     0C 4E 05 F1 | 	add	fp, #12
1b840     A7 FA 61 FC | 	wrlong	result1, fp
1b844     04 4E 05 F1 | 	add	fp, #4
1b848     A7 FC 61 FC | 	wrlong	result2, fp
1b84c     04 4E 05 F1 | 	add	fp, #4
1b850     A7 26 62 FC | 	wrlong	local01, fp
1b854     08 4E 85 F1 | 	sub	fp, #8
1b858     A7 12 02 F6 | 	mov	arg01, fp
1b85c     0C 4E 85 F1 | 	sub	fp, #12
1b860     00 16 BF FD | 	call	#_converttoint
1b864     FD 26 02 F6 | 	mov	local01, result1
1b868     A7 12 02 F6 | 	mov	arg01, fp
1b86c     F4 15 BF FD | 	call	#_converttoint
1b870     13 FB 21 FC | 	wypin	result1, local01
1b874     A7 F0 03 F6 | 	mov	ptra, fp
1b878     B2 00 A0 FD | 	call	#popregs_
1b87c                 | _do_wypin_ret
1b87c     2D 00 64 FD | 	ret
1b880                 | 
1b880                 | ' 
1b880                 | ' 
1b880                 | ' 
1b880                 | ' 
1b880                 | ' 
1b880                 | ' 
1b880                 | ' 
1b880                 | ' 
1b880                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b880                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1b880                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b880                 | ' 
1b880                 | ' 
1b880                 | ' '------------------ Assign
1b880                 | ' 
1b880                 | ' sub do_assign
1b880                 | _do_assign
1b880     05 4A 05 F6 | 	mov	COUNT_, #5
1b884     A8 00 A0 FD | 	call	#pushregs_
1b888     44 F0 07 F1 | 	add	ptra, #68
1b88c     4A 00 00 FF 
1b890     80 E4 05 F1 | 	add	objptr, ##38016
1b894     F2 16 02 FB | 	rdlong	arg03, objptr
1b898     0B 15 02 F6 | 	mov	arg02, arg03
1b89c     01 14 66 F0 | 	shl	arg02, #1
1b8a0     0B 15 02 F1 | 	add	arg02, arg03
1b8a4     02 14 66 F0 | 	shl	arg02, #2
1b8a8     03 00 00 FF 
1b8ac     04 E4 85 F1 | 	sub	objptr, ##1540
1b8b0     F2 14 02 F1 | 	add	arg02, objptr
1b8b4     0A 15 02 FB | 	rdlong	arg02, arg02
1b8b8     18 4E 05 F1 | 	add	fp, #24
1b8bc     A7 14 62 FC | 	wrlong	arg02, fp
1b8c0                 | ' 
1b8c0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1b8c0                 | ' if variables(varnum).vartype<array_no_type then 
1b8c0     18 4E 85 F1 | 	sub	fp, #24
1b8c4     04 14 66 F0 | 	shl	arg02, #4
1b8c8     32 00 00 FF 
1b8cc     84 E4 85 F1 | 	sub	objptr, ##25732
1b8d0     F2 14 02 F1 | 	add	arg02, objptr
1b8d4     0C 14 06 F1 | 	add	arg02, #12
1b8d8     0A 17 02 FB | 	rdlong	arg03, arg02
1b8dc     00 17 16 F2 | 	cmp	arg03, #256 wc
1b8e0     14 00 00 FF 
1b8e4     F8 E5 85 F1 | 	sub	objptr, ##10744
1b8e8     18 01 90 3D |  if_ae	jmp	#LR__2250
1b8ec     90 13 BF FD | 	call	#_pop
1b8f0     A7 FA 61 FC | 	wrlong	result1, fp
1b8f4     04 4E 05 F1 | 	add	fp, #4
1b8f8     A7 FC 61 FC | 	wrlong	result2, fp
1b8fc     04 4E 05 F1 | 	add	fp, #4
1b900     A7 FE 61 FC | 	wrlong	result3, fp
1b904     08 4E 85 F1 | 	sub	fp, #8
1b908     A7 16 02 FB | 	rdlong	arg03, fp
1b90c     04 4E 05 F1 | 	add	fp, #4
1b910     A7 14 02 FB | 	rdlong	arg02, fp
1b914     14 4E 05 F1 | 	add	fp, #20
1b918     A7 12 02 FB | 	rdlong	arg01, fp
1b91c     04 12 66 F0 | 	shl	arg01, #4
1b920     14 00 00 FF 
1b924     F8 E5 05 F1 | 	add	objptr, ##10744
1b928     F2 12 02 F1 | 	add	arg01, objptr
1b92c     04 12 06 F1 | 	add	arg01, #4
1b930     09 17 62 FC | 	wrlong	arg03, arg01
1b934     A7 16 02 FB | 	rdlong	arg03, fp
1b938     04 16 66 F0 | 	shl	arg03, #4
1b93c     F2 16 02 F1 | 	add	arg03, objptr
1b940     08 16 06 F1 | 	add	arg03, #8
1b944     0B 15 62 FC | 	wrlong	arg02, arg03
1b948     A7 16 02 FB | 	rdlong	arg03, fp
1b94c     04 16 66 F0 | 	shl	arg03, #4
1b950     F2 16 02 F1 | 	add	arg03, objptr
1b954     10 4E 85 F1 | 	sub	fp, #16
1b958     A7 14 02 FB | 	rdlong	arg02, fp
1b95c     0C 16 06 F1 | 	add	arg03, #12
1b960     0B 15 62 FC | 	wrlong	arg02, arg03
1b964                 | '   t1=pop() 
1b964                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1b964                 | '   if variables(varnum).vartype<>result_string2 then return
1b964     10 4E 05 F1 | 	add	fp, #16
1b968     A7 16 02 FB | 	rdlong	arg03, fp
1b96c     18 4E 85 F1 | 	sub	fp, #24
1b970     04 16 66 F0 | 	shl	arg03, #4
1b974     F2 16 02 F1 | 	add	arg03, objptr
1b978     0C 16 06 F1 | 	add	arg03, #12
1b97c     0B 17 02 FB | 	rdlong	arg03, arg03
1b980     2B 16 0E F2 | 	cmp	arg03, #43 wz
1b984     14 00 00 FF 
1b988     F8 E5 85 F1 | 	sub	objptr, ##10744
1b98c     EC 04 90 5D |  if_ne	jmp	#LR__2273
1b990     18 4E 05 F1 | 	add	fp, #24
1b994     A7 16 02 FB | 	rdlong	arg03, fp
1b998     0B 27 02 F6 | 	mov	local01, arg03
1b99c     04 26 66 F0 | 	shl	local01, #4
1b9a0     14 00 00 FF 
1b9a4     F8 E5 05 F1 | 	add	objptr, ##10744
1b9a8     F2 26 02 F1 | 	add	local01, objptr
1b9ac     18 4E 85 F1 | 	sub	fp, #24
1b9b0     04 16 66 F0 | 	shl	arg03, #4
1b9b4     F2 16 02 F1 | 	add	arg03, objptr
1b9b8     04 16 06 F1 | 	add	arg03, #4
1b9bc     0B 13 02 FB | 	rdlong	arg01, arg03
1b9c0     14 00 00 FF 
1b9c4     F8 E5 85 F1 | 	sub	objptr, ##10744
1b9c8     2C 14 BF FD | 	call	#_convertstring
1b9cc     04 26 06 F1 | 	add	local01, #4
1b9d0     13 FB 61 FC | 	wrlong	result1, local01
1b9d4     18 4E 05 F1 | 	add	fp, #24
1b9d8     A7 26 02 FB | 	rdlong	local01, fp
1b9dc     18 4E 85 F1 | 	sub	fp, #24
1b9e0     04 26 66 F0 | 	shl	local01, #4
1b9e4     14 00 00 FF 
1b9e8     F8 E5 05 F1 | 	add	objptr, ##10744
1b9ec     F2 26 02 F1 | 	add	local01, objptr
1b9f0     0C 26 06 F1 | 	add	local01, #12
1b9f4     13 3F 68 FC | 	wrlong	#31, local01
1b9f8                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1b9f8                 | '   variables(varnum).vartype=result_string
1b9f8                 | '   return
1b9f8     14 00 00 FF 
1b9fc     F8 E5 85 F1 | 	sub	objptr, ##10744
1ba00     78 04 90 FD | 	jmp	#LR__2273
1ba04                 | LR__2250
1ba04                 | ' for i=0 to 2 : arrid(i)=0 : next i
1ba04     1C 4E 05 F1 | 	add	fp, #28
1ba08     A7 00 68 FC | 	wrlong	#0, fp
1ba0c     97 16 48 FB | 	callpa	#(@LR__2252-@LR__2251)>>2,fcache_load_ptr_
1ba10                 | LR__2251
1ba10     A7 26 02 FB | 	rdlong	local01, fp
1ba14     02 26 66 F0 | 	shl	local01, #2
1ba18     18 4E 05 F1 | 	add	fp, #24
1ba1c     A7 26 02 F1 | 	add	local01, fp
1ba20     13 01 68 FC | 	wrlong	#0, local01
1ba24     18 4E 85 F1 | 	sub	fp, #24
1ba28     A7 26 02 FB | 	rdlong	local01, fp
1ba2c     01 26 06 F1 | 	add	local01, #1
1ba30     A7 26 62 FC | 	wrlong	local01, fp
1ba34     03 26 16 F2 | 	cmp	local01, #3 wc
1ba38     D4 FF 9F CD |  if_b	jmp	#LR__2251
1ba3c                 | LR__2252
1ba3c     4A 00 00 FF 
1ba40     80 E4 05 F1 | 	add	objptr, ##38016
1ba44     F2 16 02 FB | 	rdlong	arg03, objptr
1ba48     0B 27 02 F6 | 	mov	local01, arg03
1ba4c     01 26 66 F0 | 	shl	local01, #1
1ba50     0B 27 02 F1 | 	add	local01, arg03
1ba54     02 26 66 F0 | 	shl	local01, #2
1ba58     03 00 00 FF 
1ba5c     04 E4 85 F1 | 	sub	objptr, ##1540
1ba60     F2 26 02 F1 | 	add	local01, objptr
1ba64     04 26 06 F1 | 	add	local01, #4
1ba68     13 29 02 FB | 	rdlong	local02, local01
1ba6c     04 4E 05 F1 | 	add	fp, #4
1ba70     A7 28 62 FC | 	wrlong	local02, fp
1ba74     20 4E 85 F1 | 	sub	fp, #32
1ba78     47 00 00 FF 
1ba7c     7C E4 85 F1 | 	sub	objptr, ##36476
1ba80     FC 11 BF FD | 	call	#_pop
1ba84     A7 FA 61 FC | 	wrlong	result1, fp
1ba88     04 4E 05 F1 | 	add	fp, #4
1ba8c     A7 FC 61 FC | 	wrlong	result2, fp
1ba90     04 4E 05 F1 | 	add	fp, #4
1ba94     A7 FE 61 FC | 	wrlong	result3, fp
1ba98                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1ba98                 | ' t1=pop() ' var value
1ba98                 | ' if numpar>0 then
1ba98     18 4E 05 F1 | 	add	fp, #24
1ba9c     A7 2A 02 FB | 	rdlong	local03, fp
1baa0     20 4E 85 F1 | 	sub	fp, #32
1baa4     01 2A 16 F2 | 	cmp	local03, #1 wc
1baa8     78 00 90 CD |  if_b	jmp	#LR__2255
1baac                 | '   for i=numpar to 1 step -1
1baac     20 4E 05 F1 | 	add	fp, #32
1bab0     A7 2C 0A FB | 	rdlong	local04, fp wz
1bab4     04 4E 85 F1 | 	sub	fp, #4
1bab8     A7 2C 62 FC | 	wrlong	local04, fp
1babc     1C 4E 85 F1 | 	sub	fp, #28
1bac0     60 00 90 AD |  if_e	jmp	#LR__2254
1bac4                 | LR__2253
1bac4     B8 11 BF FD | 	call	#_pop
1bac8     0C 4E 05 F1 | 	add	fp, #12
1bacc     A7 FA 61 FC | 	wrlong	result1, fp
1bad0     04 4E 05 F1 | 	add	fp, #4
1bad4     A7 FC 61 FC | 	wrlong	result2, fp
1bad8     04 4E 05 F1 | 	add	fp, #4
1badc     A7 FE 61 FC | 	wrlong	result3, fp
1bae0     08 4E 05 F1 | 	add	fp, #8
1bae4     A7 2A 02 FB | 	rdlong	local03, fp
1bae8     01 2A 86 F1 | 	sub	local03, #1
1baec     02 2A 66 F0 | 	shl	local03, #2
1baf0     18 4E 05 F1 | 	add	fp, #24
1baf4     A7 2A 02 F1 | 	add	local03, fp
1baf8     28 4E 85 F1 | 	sub	fp, #40
1bafc     A7 12 02 F6 | 	mov	arg01, fp
1bb00     0C 4E 85 F1 | 	sub	fp, #12
1bb04     5C 13 BF FD | 	call	#_converttoint
1bb08     15 FB 61 FC | 	wrlong	result1, local03
1bb0c     1C 4E 05 F1 | 	add	fp, #28
1bb10     A7 2C 02 FB | 	rdlong	local04, fp
1bb14     01 2C 8E F1 | 	sub	local04, #1 wz
1bb18     A7 2C 62 FC | 	wrlong	local04, fp
1bb1c     1C 4E 85 F1 | 	sub	fp, #28
1bb20     A0 FF 9F 5D |  if_ne	jmp	#LR__2253
1bb24                 | LR__2254
1bb24                 | LR__2255
1bb24     18 4E 05 F1 | 	add	fp, #24
1bb28     A7 26 02 FB | 	rdlong	local01, fp
1bb2c     04 26 66 F0 | 	shl	local01, #4
1bb30     14 00 00 FF 
1bb34     F8 E5 05 F1 | 	add	objptr, ##10744
1bb38     F2 26 02 F1 | 	add	local01, objptr
1bb3c     04 26 06 F1 | 	add	local01, #4
1bb40     13 13 02 FB | 	rdlong	arg01, local01
1bb44     0C 4E 05 F1 | 	add	fp, #12
1bb48     A7 12 62 FC | 	wrlong	arg01, fp
1bb4c     24 4E 85 F1 | 	sub	fp, #36
1bb50     14 00 00 FF 
1bb54     F8 E5 85 F1 | 	sub	objptr, ##10744
1bb58     00 67 B0 FD | 	call	#_pslpeek
1bb5c     FD 2C 32 F9 | 	getword	local04, result1, #0
1bb60     28 4E 05 F1 | 	add	fp, #40
1bb64     A7 2C 62 FC | 	wrlong	local04, fp
1bb68     04 4E 85 F1 | 	sub	fp, #4
1bb6c     A7 12 02 FB | 	rdlong	arg01, fp
1bb70     24 4E 85 F1 | 	sub	fp, #36
1bb74     02 12 06 F1 | 	add	arg01, #2
1bb78     88 66 B0 FD | 	call	#_pspeek
1bb7c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bb80     2C 4E 05 F1 | 	add	fp, #44
1bb84     A7 FA 61 FC | 	wrlong	result1, fp
1bb88                 | ' esize=pspeek(arrptr+2)
1bb88                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1bb88     08 4E 85 F1 | 	sub	fp, #8
1bb8c     A7 12 02 FB | 	rdlong	arg01, fp
1bb90     24 4E 85 F1 | 	sub	fp, #36
1bb94     04 12 06 F1 | 	add	arg01, #4
1bb98     C0 66 B0 FD | 	call	#_pslpeek
1bb9c     FD 2C 02 F6 | 	mov	local04, result1
1bba0     34 4E 05 F1 | 	add	fp, #52
1bba4     A7 26 02 FB | 	rdlong	local01, fp
1bba8     34 4E 85 F1 | 	sub	fp, #52
1bbac     16 27 12 F2 | 	cmp	local01, local04 wc
1bbb0     54 00 90 3D |  if_ae	jmp	#LR__2256
1bbb4     24 4E 05 F1 | 	add	fp, #36
1bbb8     A7 12 02 FB | 	rdlong	arg01, fp
1bbbc     24 4E 85 F1 | 	sub	fp, #36
1bbc0     08 12 06 F1 | 	add	arg01, #8
1bbc4     94 66 B0 FD | 	call	#_pslpeek
1bbc8     FD 26 02 F6 | 	mov	local01, result1
1bbcc     38 4E 05 F1 | 	add	fp, #56
1bbd0     A7 2C 02 FB | 	rdlong	local04, fp
1bbd4     38 4E 85 F1 | 	sub	fp, #56
1bbd8     13 2D 12 F2 | 	cmp	local04, local01 wc
1bbdc     28 00 90 3D |  if_ae	jmp	#LR__2256
1bbe0     24 4E 05 F1 | 	add	fp, #36
1bbe4     A7 12 02 FB | 	rdlong	arg01, fp
1bbe8     24 4E 85 F1 | 	sub	fp, #36
1bbec     0C 12 06 F1 | 	add	arg01, #12
1bbf0     68 66 B0 FD | 	call	#_pslpeek
1bbf4     3C 4E 05 F1 | 	add	fp, #60
1bbf8     A7 2C 02 FB | 	rdlong	local04, fp
1bbfc     3C 4E 85 F1 | 	sub	fp, #60
1bc00     FD 2C 12 F2 | 	cmp	local04, result1 wc
1bc04     10 00 90 CD |  if_b	jmp	#LR__2257
1bc08                 | LR__2256
1bc08     31 12 06 F6 | 	mov	arg01, #49
1bc0c     00 14 06 F6 | 	mov	arg02, #0
1bc10     78 63 B0 FD | 	call	#_printerror
1bc14     64 02 90 FD | 	jmp	#LR__2273
1bc18                 | LR__2257
1bc18     24 4E 05 F1 | 	add	fp, #36
1bc1c     A7 12 02 FB | 	rdlong	arg01, fp
1bc20     09 2D 02 F6 | 	mov	local04, arg01
1bc24     10 2C 06 F1 | 	add	local04, #16
1bc28     24 4E 85 F1 | 	sub	fp, #36
1bc2c     04 12 06 F1 | 	add	arg01, #4
1bc30     28 66 B0 FD | 	call	#_pslpeek
1bc34     FD 26 02 F6 | 	mov	local01, result1
1bc38     38 4E 05 F1 | 	add	fp, #56
1bc3c     A7 28 02 FB | 	rdlong	local02, fp
1bc40     14 27 02 FD | 	qmul	local01, local02
1bc44     04 4E 85 F1 | 	sub	fp, #4
1bc48     A7 2A 02 FB | 	rdlong	local03, fp
1bc4c     10 4E 85 F1 | 	sub	fp, #16
1bc50     A7 12 02 FB | 	rdlong	arg01, fp
1bc54     24 4E 85 F1 | 	sub	fp, #36
1bc58     08 12 06 F1 | 	add	arg01, #8
1bc5c     18 28 62 FD | 	getqx	local02
1bc60     14 2B 02 F1 | 	add	local03, local02
1bc64     F4 65 B0 FD | 	call	#_pslpeek
1bc68     FD 28 02 F6 | 	mov	local02, result1
1bc6c     24 4E 05 F1 | 	add	fp, #36
1bc70     A7 12 02 FB | 	rdlong	arg01, fp
1bc74     24 4E 85 F1 | 	sub	fp, #36
1bc78     04 12 06 F1 | 	add	arg01, #4
1bc7c     DC 65 B0 FD | 	call	#_pslpeek
1bc80     FD 28 02 FD | 	qmul	local02, result1
1bc84     3C 4E 05 F1 | 	add	fp, #60
1bc88     A7 28 02 FB | 	rdlong	local02, fp
1bc8c     18 26 62 FD | 	getqx	local01
1bc90     14 27 02 FD | 	qmul	local01, local02
1bc94     10 4E 85 F1 | 	sub	fp, #16
1bc98     A7 28 02 FB | 	rdlong	local02, fp
1bc9c     18 26 62 FD | 	getqx	local01
1bca0     13 2B 02 F1 | 	add	local03, local01
1bca4     15 29 02 FD | 	qmul	local02, local03
1bca8     04 4E 05 F1 | 	add	fp, #4
1bcac                 | ' 
1bcac                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1bcac                 | ' select case arrtype
1bcac     18 2A 62 FD | 	getqx	local03
1bcb0     15 2D 02 F1 | 	add	local04, local03
1bcb4     A7 2C 62 FC | 	wrlong	local04, fp
1bcb8     08 4E 85 F1 | 	sub	fp, #8
1bcbc     A7 2E 02 FB | 	rdlong	local05, fp
1bcc0     28 4E 85 F1 | 	sub	fp, #40
1bcc4     00 2F 86 F1 | 	sub	local05, #256
1bcc8     0C 2E 26 F3 | 	fle	local05, #12
1bccc     30 2E 62 FD | 	jmprel	local05
1bcd0                 | LR__2258
1bcd0     30 00 90 FD | 	jmp	#LR__2259
1bcd4     58 00 90 FD | 	jmp	#LR__2260
1bcd8     6C 00 90 FD | 	jmp	#LR__2261
1bcdc     80 00 90 FD | 	jmp	#LR__2262
1bce0     B0 00 90 FD | 	jmp	#LR__2263
1bce4     E0 00 90 FD | 	jmp	#LR__2264
1bce8     F4 00 90 FD | 	jmp	#LR__2265
1bcec     08 01 90 FD | 	jmp	#LR__2266
1bcf0     1C 01 90 FD | 	jmp	#LR__2267
1bcf4     30 01 90 FD | 	jmp	#LR__2268
1bcf8     44 01 90 FD | 	jmp	#LR__2269
1bcfc     58 01 90 FD | 	jmp	#LR__2270
1bd00     6C 01 90 FD | 	jmp	#LR__2271
1bd04                 | LR__2259
1bd04     A7 12 02 F6 | 	mov	arg01, fp
1bd08     30 4E 05 F1 | 	add	fp, #48
1bd0c     A7 14 02 FB | 	rdlong	arg02, fp
1bd10     30 4E 85 F1 | 	sub	fp, #48
1bd14     0C 16 06 F6 | 	mov	arg03, #12
1bd18     0B 00 00 FF 
1bd1c     CC E4 05 F1 | 	add	objptr, ##5836
1bd20     68 90 B0 FD | 	call	#_psram_spin2_write
1bd24     0B 00 00 FF 
1bd28     CC E4 85 F1 | 	sub	objptr, ##5836
1bd2c     4C 01 90 FD | 	jmp	#LR__2272
1bd30                 | LR__2260
1bd30     30 4E 05 F1 | 	add	fp, #48
1bd34     A7 12 02 FB | 	rdlong	arg01, fp
1bd38     30 4E 85 F1 | 	sub	fp, #48
1bd3c     A7 14 02 FB | 	rdlong	arg02, fp
1bd40     78 64 B0 FD | 	call	#_pspoke
1bd44     34 01 90 FD | 	jmp	#LR__2272
1bd48                 | LR__2261
1bd48     30 4E 05 F1 | 	add	fp, #48
1bd4c     A7 12 02 FB | 	rdlong	arg01, fp
1bd50     30 4E 85 F1 | 	sub	fp, #48
1bd54     A7 14 02 FB | 	rdlong	arg02, fp
1bd58     60 64 B0 FD | 	call	#_pspoke
1bd5c     1C 01 90 FD | 	jmp	#LR__2272
1bd60                 | LR__2262
1bd60     30 4E 05 F1 | 	add	fp, #48
1bd64     A7 12 02 FB | 	rdlong	arg01, fp
1bd68     30 4E 85 F1 | 	sub	fp, #48
1bd6c     A7 14 02 FB | 	rdlong	arg02, fp
1bd70     48 64 B0 FD | 	call	#_pspoke
1bd74     30 4E 05 F1 | 	add	fp, #48
1bd78     A7 12 02 FB | 	rdlong	arg01, fp
1bd7c     30 4E 85 F1 | 	sub	fp, #48
1bd80     01 12 06 F1 | 	add	arg01, #1
1bd84     A7 14 02 FB | 	rdlong	arg02, fp
1bd88     08 14 46 F0 | 	shr	arg02, #8
1bd8c     2C 64 B0 FD | 	call	#_pspoke
1bd90     E8 00 90 FD | 	jmp	#LR__2272
1bd94                 | LR__2263
1bd94     30 4E 05 F1 | 	add	fp, #48
1bd98     A7 12 02 FB | 	rdlong	arg01, fp
1bd9c     30 4E 85 F1 | 	sub	fp, #48
1bda0     A7 14 02 FB | 	rdlong	arg02, fp
1bda4     14 64 B0 FD | 	call	#_pspoke
1bda8     30 4E 05 F1 | 	add	fp, #48
1bdac     A7 12 02 FB | 	rdlong	arg01, fp
1bdb0     30 4E 85 F1 | 	sub	fp, #48
1bdb4     01 12 06 F1 | 	add	arg01, #1
1bdb8     A7 14 02 FB | 	rdlong	arg02, fp
1bdbc     08 14 46 F0 | 	shr	arg02, #8
1bdc0     F8 63 B0 FD | 	call	#_pspoke
1bdc4     B4 00 90 FD | 	jmp	#LR__2272
1bdc8                 | LR__2264
1bdc8     30 4E 05 F1 | 	add	fp, #48
1bdcc     A7 12 02 FB | 	rdlong	arg01, fp
1bdd0     30 4E 85 F1 | 	sub	fp, #48
1bdd4     A7 14 02 FB | 	rdlong	arg02, fp
1bdd8     50 63 B0 FD | 	call	#_pslpoke
1bddc     9C 00 90 FD | 	jmp	#LR__2272
1bde0                 | LR__2265
1bde0     30 4E 05 F1 | 	add	fp, #48
1bde4     A7 12 02 FB | 	rdlong	arg01, fp
1bde8     30 4E 85 F1 | 	sub	fp, #48
1bdec     A7 14 02 FB | 	rdlong	arg02, fp
1bdf0     38 63 B0 FD | 	call	#_pslpoke
1bdf4     84 00 90 FD | 	jmp	#LR__2272
1bdf8                 | LR__2266
1bdf8     30 4E 05 F1 | 	add	fp, #48
1bdfc     A7 12 02 FB | 	rdlong	arg01, fp
1be00     30 4E 85 F1 | 	sub	fp, #48
1be04     A7 14 02 FB | 	rdlong	arg02, fp
1be08     20 63 B0 FD | 	call	#_pslpoke
1be0c     6C 00 90 FD | 	jmp	#LR__2272
1be10                 | LR__2267
1be10     30 4E 05 F1 | 	add	fp, #48
1be14     A7 12 02 FB | 	rdlong	arg01, fp
1be18     30 4E 85 F1 | 	sub	fp, #48
1be1c     A7 14 02 FB | 	rdlong	arg02, fp
1be20     08 63 B0 FD | 	call	#_pslpoke
1be24     54 00 90 FD | 	jmp	#LR__2272
1be28                 | LR__2268
1be28     30 4E 05 F1 | 	add	fp, #48
1be2c     A7 12 02 FB | 	rdlong	arg01, fp
1be30     30 4E 85 F1 | 	sub	fp, #48
1be34     A7 14 02 FB | 	rdlong	arg02, fp
1be38     F0 62 B0 FD | 	call	#_pslpoke
1be3c     3C 00 90 FD | 	jmp	#LR__2272
1be40                 | LR__2269
1be40     30 4E 05 F1 | 	add	fp, #48
1be44     A7 12 02 FB | 	rdlong	arg01, fp
1be48     30 4E 85 F1 | 	sub	fp, #48
1be4c     A7 14 02 FB | 	rdlong	arg02, fp
1be50     D8 62 B0 FD | 	call	#_pslpoke
1be54     24 00 90 FD | 	jmp	#LR__2272
1be58                 | LR__2270
1be58     30 4E 05 F1 | 	add	fp, #48
1be5c     A7 12 02 FB | 	rdlong	arg01, fp
1be60     30 4E 85 F1 | 	sub	fp, #48
1be64     A7 14 02 FB | 	rdlong	arg02, fp
1be68     C0 62 B0 FD | 	call	#_pslpoke
1be6c     0C 00 90 FD | 	jmp	#LR__2272
1be70                 | LR__2271
1be70     32 12 06 F6 | 	mov	arg01, #50
1be74     00 14 06 F6 | 	mov	arg02, #0
1be78     10 61 B0 FD | 	call	#_printerror
1be7c                 | LR__2272
1be7c                 | LR__2273
1be7c     A7 F0 03 F6 | 	mov	ptra, fp
1be80     B2 00 A0 FD | 	call	#popregs_
1be84                 | _do_assign_ret
1be84     2D 00 64 FD | 	ret
1be88                 | 
1be88                 | ' 
1be88                 | ' 
1be88                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1be88                 | ' 
1be88                 | ' sub do_getvar
1be88                 | _do_getvar
1be88     04 4A 05 F6 | 	mov	COUNT_, #4
1be8c     A8 00 A0 FD | 	call	#pushregs_
1be90     3C F0 07 F1 | 	add	ptra, #60
1be94                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1be94     4A 00 00 FF 
1be98     80 E4 05 F1 | 	add	objptr, ##38016
1be9c     F2 26 02 FB | 	rdlong	local01, objptr
1bea0     13 17 02 F6 | 	mov	arg03, local01
1bea4     01 16 66 F0 | 	shl	arg03, #1
1bea8     13 17 02 F1 | 	add	arg03, local01
1beac     02 16 66 F0 | 	shl	arg03, #2
1beb0     03 00 00 FF 
1beb4     04 E4 85 F1 | 	sub	objptr, ##1540
1beb8     F2 16 02 F1 | 	add	arg03, objptr
1bebc     04 16 06 F1 | 	add	arg03, #4
1bec0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1bec4     47 00 00 FF 
1bec8     7C E4 85 F1 | 	sub	objptr, ##36476
1becc     C4 00 90 5D |  if_ne	jmp	#LR__2281
1bed0     4A 00 00 FF 
1bed4     80 E4 05 F1 | 	add	objptr, ##38016
1bed8     F2 26 02 FB | 	rdlong	local01, objptr
1bedc     13 13 02 F6 | 	mov	arg01, local01
1bee0     01 12 66 F0 | 	shl	arg01, #1
1bee4     13 13 02 F1 | 	add	arg01, local01
1bee8     02 12 66 F0 | 	shl	arg01, #2
1beec     03 00 00 FF 
1bef0     04 E4 85 F1 | 	sub	objptr, ##1540
1bef4     F2 12 02 F1 | 	add	arg01, objptr
1bef8     09 27 02 FB | 	rdlong	local01, arg01
1befc     04 26 66 F0 | 	shl	local01, #4
1bf00     32 00 00 FF 
1bf04     84 E4 85 F1 | 	sub	objptr, ##25732
1bf08     F2 26 02 F1 | 	add	local01, objptr
1bf0c     04 26 06 F1 | 	add	local01, #4
1bf10     13 13 02 FB | 	rdlong	arg01, local01
1bf14     04 26 06 F1 | 	add	local01, #4
1bf18     13 27 02 FB | 	rdlong	local01, local01
1bf1c     A7 12 62 FC | 	wrlong	arg01, fp
1bf20     04 4E 05 F1 | 	add	fp, #4
1bf24     A7 26 62 FC | 	wrlong	local01, fp
1bf28     35 00 00 FF 
1bf2c     88 E4 05 F1 | 	add	objptr, ##27272
1bf30     F2 26 02 FB | 	rdlong	local01, objptr
1bf34     13 13 02 F6 | 	mov	arg01, local01
1bf38     01 12 66 F0 | 	shl	arg01, #1
1bf3c     13 13 02 F1 | 	add	arg01, local01
1bf40     02 12 66 F0 | 	shl	arg01, #2
1bf44     03 00 00 FF 
1bf48     04 E4 85 F1 | 	sub	objptr, ##1540
1bf4c     F2 12 02 F1 | 	add	arg01, objptr
1bf50     09 27 02 FB | 	rdlong	local01, arg01
1bf54     04 26 66 F0 | 	shl	local01, #4
1bf58     32 00 00 FF 
1bf5c     84 E4 85 F1 | 	sub	objptr, ##25732
1bf60     F2 26 02 F1 | 	add	local01, objptr
1bf64     0C 26 06 F1 | 	add	local01, #12
1bf68     13 27 02 FB | 	rdlong	local01, local01
1bf6c     04 4E 05 F1 | 	add	fp, #4
1bf70     A7 26 62 FC | 	wrlong	local01, fp
1bf74                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1bf74                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1bf74                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1bf74     08 4E 85 F1 | 	sub	fp, #8
1bf78     00 27 16 F2 | 	cmp	local01, #256 wc
1bf7c     14 00 00 FF 
1bf80     F8 E5 85 F1 | 	sub	objptr, ##10744
1bf84     0C 00 90 3D |  if_ae	jmp	#LR__2280
1bf88     A7 12 02 F6 | 	mov	arg01, fp
1bf8c     88 0D BF FD | 	call	#_push
1bf90     A0 04 90 FD | 	jmp	#LR__2302
1bf94                 | LR__2280
1bf94                 | LR__2281
1bf94     4A 00 00 FF 
1bf98     80 E4 05 F1 | 	add	objptr, ##38016
1bf9c     F2 16 02 FB | 	rdlong	arg03, objptr
1bfa0     0B 15 02 F6 | 	mov	arg02, arg03
1bfa4     01 14 66 F0 | 	shl	arg02, #1
1bfa8     0B 15 02 F1 | 	add	arg02, arg03
1bfac     02 14 66 F0 | 	shl	arg02, #2
1bfb0     03 00 00 FF 
1bfb4     04 E4 85 F1 | 	sub	objptr, ##1540
1bfb8     F2 14 02 F1 | 	add	arg02, objptr
1bfbc     0A 17 02 FB | 	rdlong	arg03, arg02
1bfc0     04 16 66 F0 | 	shl	arg03, #4
1bfc4     32 00 00 FF 
1bfc8     84 E4 85 F1 | 	sub	objptr, ##25732
1bfcc     F2 16 02 F1 | 	add	arg03, objptr
1bfd0     04 16 06 F1 | 	add	arg03, #4
1bfd4     0B 13 02 FB | 	rdlong	arg01, arg03
1bfd8     0C 4E 05 F1 | 	add	fp, #12
1bfdc     A7 12 62 FC | 	wrlong	arg01, fp
1bfe0     0C 4E 85 F1 | 	sub	fp, #12
1bfe4     14 00 00 FF 
1bfe8     F8 E5 85 F1 | 	sub	objptr, ##10744
1bfec     6C 62 B0 FD | 	call	#_pslpeek
1bff0     FD FA 31 F9 | 	getword	result1, result1, #0
1bff4     10 4E 05 F1 | 	add	fp, #16
1bff8     A7 FA 61 FC | 	wrlong	result1, fp
1bffc     4A 00 00 FF 
1c000     80 E4 05 F1 | 	add	objptr, ##38016
1c004     F2 16 02 FB | 	rdlong	arg03, objptr
1c008     0B 15 02 F6 | 	mov	arg02, arg03
1c00c     01 14 66 F0 | 	shl	arg02, #1
1c010     0B 15 02 F1 | 	add	arg02, arg03
1c014     02 14 66 F0 | 	shl	arg02, #2
1c018     03 00 00 FF 
1c01c     04 E4 85 F1 | 	sub	objptr, ##1540
1c020     F2 14 02 F1 | 	add	arg02, objptr
1c024     04 14 06 F1 | 	add	arg02, #4
1c028     0A 17 02 FB | 	rdlong	arg03, arg02
1c02c     04 4E 05 F1 | 	add	fp, #4
1c030     A7 16 62 FC | 	wrlong	arg03, fp
1c034     08 4E 85 F1 | 	sub	fp, #8
1c038     A7 12 02 FB | 	rdlong	arg01, fp
1c03c     0C 4E 85 F1 | 	sub	fp, #12
1c040     02 12 06 F1 | 	add	arg01, #2
1c044     47 00 00 FF 
1c048     7C E4 85 F1 | 	sub	objptr, ##36476
1c04c     B4 61 B0 FD | 	call	#_pspeek
1c050     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c054     18 4E 05 F1 | 	add	fp, #24
1c058     A7 FA 61 FC | 	wrlong	result1, fp
1c05c     0C 4E 85 F1 | 	sub	fp, #12
1c060     A7 12 02 FB | 	rdlong	arg01, fp
1c064     0C 4E 85 F1 | 	sub	fp, #12
1c068     04 12 06 F1 | 	add	arg01, #4
1c06c     EC 61 B0 FD | 	call	#_pslpeek
1c070     1C 4E 05 F1 | 	add	fp, #28
1c074     A7 FA 61 FC | 	wrlong	result1, fp
1c078     10 4E 85 F1 | 	sub	fp, #16
1c07c     A7 12 02 FB | 	rdlong	arg01, fp
1c080     0C 4E 85 F1 | 	sub	fp, #12
1c084     08 12 06 F1 | 	add	arg01, #8
1c088     D0 61 B0 FD | 	call	#_pslpeek
1c08c     20 4E 05 F1 | 	add	fp, #32
1c090     A7 FA 61 FC | 	wrlong	result1, fp
1c094     14 4E 85 F1 | 	sub	fp, #20
1c098     A7 12 02 FB | 	rdlong	arg01, fp
1c09c     0C 4E 85 F1 | 	sub	fp, #12
1c0a0     0C 12 06 F1 | 	add	arg01, #12
1c0a4     B4 61 B0 FD | 	call	#_pslpeek
1c0a8     24 4E 05 F1 | 	add	fp, #36
1c0ac     A7 FA 61 FC | 	wrlong	result1, fp
1c0b0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c0b0                 | ' esize=pspeek(arrptr+2)
1c0b0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c0b0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c0b0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c0b0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c0b0     10 4E 85 F1 | 	sub	fp, #16
1c0b4     A7 16 02 FB | 	rdlong	arg03, fp
1c0b8     14 4E 85 F1 | 	sub	fp, #20
1c0bc     03 16 16 F2 | 	cmp	arg03, #3 wc
1c0c0     38 00 90 CD |  if_b	jmp	#LR__2282
1c0c4     B8 0B BF FD | 	call	#_pop
1c0c8     FF 16 02 F6 | 	mov	arg03, result3
1c0cc     A7 FA 61 FC | 	wrlong	result1, fp
1c0d0     04 4E 05 F1 | 	add	fp, #4
1c0d4     A7 FC 61 FC | 	wrlong	result2, fp
1c0d8     04 4E 05 F1 | 	add	fp, #4
1c0dc     A7 16 62 FC | 	wrlong	arg03, fp
1c0e0     08 4E 85 F1 | 	sub	fp, #8
1c0e4     A7 12 02 F6 | 	mov	arg01, fp
1c0e8     78 0D BF FD | 	call	#_converttoint
1c0ec     30 4E 05 F1 | 	add	fp, #48
1c0f0     A7 FA 61 FC | 	wrlong	result1, fp
1c0f4     30 4E 85 F1 | 	sub	fp, #48
1c0f8     0C 00 90 FD | 	jmp	#LR__2283
1c0fc                 | LR__2282
1c0fc     30 4E 05 F1 | 	add	fp, #48
1c100     A7 00 68 FC | 	wrlong	#0, fp
1c104     30 4E 85 F1 | 	sub	fp, #48
1c108                 | LR__2283
1c108                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c108     14 4E 05 F1 | 	add	fp, #20
1c10c     A7 16 02 FB | 	rdlong	arg03, fp
1c110     14 4E 85 F1 | 	sub	fp, #20
1c114     02 16 16 F2 | 	cmp	arg03, #2 wc
1c118     38 00 90 CD |  if_b	jmp	#LR__2284
1c11c     60 0B BF FD | 	call	#_pop
1c120     FF 16 02 F6 | 	mov	arg03, result3
1c124     A7 FA 61 FC | 	wrlong	result1, fp
1c128     04 4E 05 F1 | 	add	fp, #4
1c12c     A7 FC 61 FC | 	wrlong	result2, fp
1c130     04 4E 05 F1 | 	add	fp, #4
1c134     A7 16 62 FC | 	wrlong	arg03, fp
1c138     08 4E 85 F1 | 	sub	fp, #8
1c13c     A7 12 02 F6 | 	mov	arg01, fp
1c140     20 0D BF FD | 	call	#_converttoint
1c144     2C 4E 05 F1 | 	add	fp, #44
1c148     A7 FA 61 FC | 	wrlong	result1, fp
1c14c     2C 4E 85 F1 | 	sub	fp, #44
1c150     0C 00 90 FD | 	jmp	#LR__2285
1c154                 | LR__2284
1c154     2C 4E 05 F1 | 	add	fp, #44
1c158     A7 00 68 FC | 	wrlong	#0, fp
1c15c     2C 4E 85 F1 | 	sub	fp, #44
1c160                 | LR__2285
1c160                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c160     14 4E 05 F1 | 	add	fp, #20
1c164     A7 16 02 FB | 	rdlong	arg03, fp
1c168     14 4E 85 F1 | 	sub	fp, #20
1c16c     01 16 16 F2 | 	cmp	arg03, #1 wc
1c170     38 00 90 CD |  if_b	jmp	#LR__2286
1c174     08 0B BF FD | 	call	#_pop
1c178     FF 16 02 F6 | 	mov	arg03, result3
1c17c     A7 FA 61 FC | 	wrlong	result1, fp
1c180     04 4E 05 F1 | 	add	fp, #4
1c184     A7 FC 61 FC | 	wrlong	result2, fp
1c188     04 4E 05 F1 | 	add	fp, #4
1c18c     A7 16 62 FC | 	wrlong	arg03, fp
1c190     08 4E 85 F1 | 	sub	fp, #8
1c194     A7 12 02 F6 | 	mov	arg01, fp
1c198     C8 0C BF FD | 	call	#_converttoint
1c19c     28 4E 05 F1 | 	add	fp, #40
1c1a0     A7 FA 61 FC | 	wrlong	result1, fp
1c1a4     28 4E 85 F1 | 	sub	fp, #40
1c1a8     0C 00 90 FD | 	jmp	#LR__2287
1c1ac                 | LR__2286
1c1ac     28 4E 05 F1 | 	add	fp, #40
1c1b0     A7 00 68 FC | 	wrlong	#0, fp
1c1b4     28 4E 85 F1 | 	sub	fp, #40
1c1b8                 | LR__2287
1c1b8     0C 4E 05 F1 | 	add	fp, #12
1c1bc     A7 28 02 FB | 	rdlong	local02, fp
1c1c0     1C 4E 05 F1 | 	add	fp, #28
1c1c4     A7 2A 02 FB | 	rdlong	local03, fp
1c1c8     04 4E 05 F1 | 	add	fp, #4
1c1cc     A7 FC 01 FB | 	rdlong	result2, fp
1c1d0     10 4E 85 F1 | 	sub	fp, #16
1c1d4     A7 FE 01 FB | 	rdlong	result3, fp
1c1d8     FF FC 01 FD | 	qmul	result2, result3
1c1dc     10 28 06 F1 | 	add	local02, #16
1c1e0     14 4E 05 F1 | 	add	fp, #20
1c1e4     A7 FC 01 FB | 	rdlong	result2, fp
1c1e8     18 FA 61 FD | 	getqx	result1
1c1ec     FF FC 01 FD | 	qmul	result2, result3
1c1f0     FD 2A 02 F1 | 	add	local03, result1
1c1f4     10 4E 85 F1 | 	sub	fp, #16
1c1f8     A7 FE 01 FB | 	rdlong	result3, fp
1c1fc     18 FC 61 FD | 	getqx	result2
1c200     FF FC 01 FD | 	qmul	result2, result3
1c204     08 4E 85 F1 | 	sub	fp, #8
1c208     A7 FE 01 FB | 	rdlong	result3, fp
1c20c     18 FC 61 FD | 	getqx	result2
1c210     FE 2A 02 F1 | 	add	local03, result2
1c214     FF 2A 02 FD | 	qmul	local03, result3
1c218     1C 4E 05 F1 | 	add	fp, #28
1c21c                 | ' 
1c21c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1c21c                 | ' 
1c21c                 | ' select case vartype
1c21c     18 FC 61 FD | 	getqx	result2
1c220     FE 28 02 F1 | 	add	local02, result2
1c224     A7 28 62 FC | 	wrlong	local02, fp
1c228     24 4E 85 F1 | 	sub	fp, #36
1c22c     A7 2C 02 FB | 	rdlong	local04, fp
1c230     10 4E 85 F1 | 	sub	fp, #16
1c234     00 2D 86 F1 | 	sub	local04, #256
1c238     0C 2C 26 F3 | 	fle	local04, #12
1c23c     30 2C 62 FD | 	jmprel	local04
1c240                 | LR__2288
1c240     30 00 90 FD | 	jmp	#LR__2289
1c244     58 00 90 FD | 	jmp	#LR__2290
1c248     8C 00 90 FD | 	jmp	#LR__2291
1c24c     AC 00 90 FD | 	jmp	#LR__2292
1c250     E8 00 90 FD | 	jmp	#LR__2293
1c254     08 01 90 FD | 	jmp	#LR__2294
1c258     24 01 90 FD | 	jmp	#LR__2295
1c25c     40 01 90 FD | 	jmp	#LR__2296
1c260     50 01 90 FD | 	jmp	#LR__2297
1c264     60 01 90 FD | 	jmp	#LR__2298
1c268     7C 01 90 FD | 	jmp	#LR__2299
1c26c     8C 01 90 FD | 	jmp	#LR__2300
1c270     B8 01 90 FD | 	jmp	#LR__2301
1c274                 | LR__2289
1c274     A7 12 02 F6 | 	mov	arg01, fp
1c278     34 4E 05 F1 | 	add	fp, #52
1c27c     A7 14 02 FB | 	rdlong	arg02, fp
1c280     34 4E 85 F1 | 	sub	fp, #52
1c284     0C 16 06 F6 | 	mov	arg03, #12
1c288     0B 00 00 FF 
1c28c     CC E4 05 F1 | 	add	objptr, ##5836
1c290     5C 8A B0 FD | 	call	#_psram_spin2_read1
1c294     0B 00 00 FF 
1c298     CC E4 85 F1 | 	sub	objptr, ##5836
1c29c     8C 01 90 FD | 	jmp	#LR__2301
1c2a0                 | LR__2290
1c2a0     08 4E 05 F1 | 	add	fp, #8
1c2a4     A7 38 68 FC | 	wrlong	#28, fp
1c2a8     2C 4E 05 F1 | 	add	fp, #44
1c2ac     A7 12 02 FB | 	rdlong	arg01, fp
1c2b0     34 4E 85 F1 | 	sub	fp, #52
1c2b4     4C 5F B0 FD | 	call	#_pspeek
1c2b8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c2bc     A7 FA 61 FC | 	wrlong	result1, fp
1c2c0     80 FA 15 F2 | 	cmp	result1, #128 wc
1c2c4     00 27 66 36 |  if_ae	neg	local01, #256
1c2c8     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1c2cc     15 27 42 35 |  if_ae	or	local01, local03
1c2d0     A7 26 62 3C |  if_ae	wrlong	local01, fp
1c2d4     54 01 90 FD | 	jmp	#LR__2301
1c2d8                 | LR__2291
1c2d8     08 4E 05 F1 | 	add	fp, #8
1c2dc     A7 3A 68 FC | 	wrlong	#29, fp
1c2e0     2C 4E 05 F1 | 	add	fp, #44
1c2e4     A7 12 02 FB | 	rdlong	arg01, fp
1c2e8     34 4E 85 F1 | 	sub	fp, #52
1c2ec     14 5F B0 FD | 	call	#_pspeek
1c2f0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c2f4     A7 FA 61 FC | 	wrlong	result1, fp
1c2f8     30 01 90 FD | 	jmp	#LR__2301
1c2fc                 | LR__2292
1c2fc     08 4E 05 F1 | 	add	fp, #8
1c300     A7 38 68 FC | 	wrlong	#28, fp
1c304     2C 4E 05 F1 | 	add	fp, #44
1c308     A7 12 02 FB | 	rdlong	arg01, fp
1c30c     34 4E 85 F1 | 	sub	fp, #52
1c310     48 5F B0 FD | 	call	#_pslpeek
1c314     FD FA 31 F9 | 	getword	result1, result1, #0
1c318     A7 FA 61 FC | 	wrlong	result1, fp
1c31c     40 00 00 FF 
1c320     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1c324     FF 7F 00 3F 
1c328     00 27 06 36 |  if_ae	mov	local01, ##16776960
1c32c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1c330     15 27 42 35 |  if_ae	or	local01, local03
1c334     A7 26 62 3C |  if_ae	wrlong	local01, fp
1c338     F0 00 90 FD | 	jmp	#LR__2301
1c33c                 | LR__2293
1c33c     08 4E 05 F1 | 	add	fp, #8
1c340     A7 3A 68 FC | 	wrlong	#29, fp
1c344     2C 4E 05 F1 | 	add	fp, #44
1c348     A7 12 02 FB | 	rdlong	arg01, fp
1c34c     34 4E 85 F1 | 	sub	fp, #52
1c350     08 5F B0 FD | 	call	#_pslpeek
1c354     FD FA 31 F9 | 	getword	result1, result1, #0
1c358     A7 FA 61 FC | 	wrlong	result1, fp
1c35c     CC 00 90 FD | 	jmp	#LR__2301
1c360                 | LR__2294
1c360     08 4E 05 F1 | 	add	fp, #8
1c364     A7 38 68 FC | 	wrlong	#28, fp
1c368     2C 4E 05 F1 | 	add	fp, #44
1c36c     A7 12 02 FB | 	rdlong	arg01, fp
1c370     34 4E 85 F1 | 	sub	fp, #52
1c374     E4 5E B0 FD | 	call	#_pslpeek
1c378     A7 FA 61 FC | 	wrlong	result1, fp
1c37c     AC 00 90 FD | 	jmp	#LR__2301
1c380                 | LR__2295
1c380     08 4E 05 F1 | 	add	fp, #8
1c384     A7 3A 68 FC | 	wrlong	#29, fp
1c388     2C 4E 05 F1 | 	add	fp, #44
1c38c     A7 12 02 FB | 	rdlong	arg01, fp
1c390     34 4E 85 F1 | 	sub	fp, #52
1c394     C4 5E B0 FD | 	call	#_pslpeek
1c398     A7 FA 61 FC | 	wrlong	result1, fp
1c39c     8C 00 90 FD | 	jmp	#LR__2301
1c3a0                 | LR__2296
1c3a0     08 4E 05 F1 | 	add	fp, #8
1c3a4     A7 FE 69 FC | 	wrlong	#255, fp
1c3a8     08 4E 85 F1 | 	sub	fp, #8
1c3ac     A7 60 68 FC | 	wrlong	#48, fp
1c3b0     78 00 90 FD | 	jmp	#LR__2301
1c3b4                 | LR__2297
1c3b4     08 4E 05 F1 | 	add	fp, #8
1c3b8     A7 FE 69 FC | 	wrlong	#255, fp
1c3bc     08 4E 85 F1 | 	sub	fp, #8
1c3c0     A7 60 68 FC | 	wrlong	#48, fp
1c3c4     64 00 90 FD | 	jmp	#LR__2301
1c3c8                 | LR__2298
1c3c8     08 4E 05 F1 | 	add	fp, #8
1c3cc     A7 3C 68 FC | 	wrlong	#30, fp
1c3d0     2C 4E 05 F1 | 	add	fp, #44
1c3d4     A7 12 02 FB | 	rdlong	arg01, fp
1c3d8     34 4E 85 F1 | 	sub	fp, #52
1c3dc     7C 5E B0 FD | 	call	#_pslpeek
1c3e0     A7 FA 61 FC | 	wrlong	result1, fp
1c3e4     44 00 90 FD | 	jmp	#LR__2301
1c3e8                 | LR__2299
1c3e8     08 4E 05 F1 | 	add	fp, #8
1c3ec     A7 FE 69 FC | 	wrlong	#255, fp
1c3f0     08 4E 85 F1 | 	sub	fp, #8
1c3f4     A7 60 68 FC | 	wrlong	#48, fp
1c3f8     30 00 90 FD | 	jmp	#LR__2301
1c3fc                 | LR__2300
1c3fc     08 4E 05 F1 | 	add	fp, #8
1c400     A7 3E 68 FC | 	wrlong	#31, fp
1c404     2C 4E 05 F1 | 	add	fp, #44
1c408     A7 12 02 FB | 	rdlong	arg01, fp
1c40c     34 4E 85 F1 | 	sub	fp, #52
1c410     48 5E B0 FD | 	call	#_pslpeek
1c414     A7 FA 61 FC | 	wrlong	result1, fp
1c418     00 04 00 FF 
1c41c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1c420     08 4E 05 31 |  if_ae	add	fp, #8
1c424     A7 56 68 3C |  if_ae	wrlong	#43, fp
1c428     08 4E 85 31 |  if_ae	sub	fp, #8
1c42c                 | LR__2301
1c42c     A7 12 02 F6 | 	mov	arg01, fp
1c430     E4 08 BF FD | 	call	#_push
1c434                 | LR__2302
1c434     A7 F0 03 F6 | 	mov	ptra, fp
1c438     B2 00 A0 FD | 	call	#popregs_
1c43c                 | _do_getvar_ret
1c43c     2D 00 64 FD | 	ret
1c440                 | 
1c440                 | ' 
1c440                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1c440                 | ' 
1c440                 | ' sub do_getaddr
1c440                 | _do_getaddr
1c440     01 4A 05 F6 | 	mov	COUNT_, #1
1c444     A8 00 A0 FD | 	call	#pushregs_
1c448     38 F0 07 F1 | 	add	ptra, #56
1c44c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1c44c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c44c     4A 00 00 FF 
1c450     80 E4 05 F1 | 	add	objptr, ##38016
1c454     F2 12 02 FB | 	rdlong	arg01, objptr
1c458     09 FD 01 F6 | 	mov	result2, arg01
1c45c     01 FC 65 F0 | 	shl	result2, #1
1c460     09 FD 01 F1 | 	add	result2, arg01
1c464     02 FC 65 F0 | 	shl	result2, #2
1c468     03 00 00 FF 
1c46c     04 E4 85 F1 | 	sub	objptr, ##1540
1c470     F2 FC 01 F1 | 	add	result2, objptr
1c474     04 FC 05 F1 | 	add	result2, #4
1c478     FE FC 09 FB | 	rdlong	result2, result2 wz
1c47c     47 00 00 FF 
1c480     7C E4 85 F1 | 	sub	objptr, ##36476
1c484     10 01 90 5D |  if_ne	jmp	#LR__2310
1c488     4A 00 00 FF 
1c48c     80 E4 05 F1 | 	add	objptr, ##38016
1c490     F2 12 02 FB | 	rdlong	arg01, objptr
1c494     09 FD 01 F6 | 	mov	result2, arg01
1c498     01 FC 65 F0 | 	shl	result2, #1
1c49c     09 FD 01 F1 | 	add	result2, arg01
1c4a0     02 FC 65 F0 | 	shl	result2, #2
1c4a4     03 00 00 FF 
1c4a8     04 E4 85 F1 | 	sub	objptr, ##1540
1c4ac     F2 FC 01 F1 | 	add	result2, objptr
1c4b0     FE 12 02 FB | 	rdlong	arg01, result2
1c4b4     04 12 66 F0 | 	shl	arg01, #4
1c4b8     32 00 00 FF 
1c4bc     84 E4 85 F1 | 	sub	objptr, ##25732
1c4c0     F2 12 02 F1 | 	add	arg01, objptr
1c4c4     0C 12 06 F1 | 	add	arg01, #12
1c4c8     09 13 02 FB | 	rdlong	arg01, arg01
1c4cc     08 4E 05 F1 | 	add	fp, #8
1c4d0     A7 12 62 FC | 	wrlong	arg01, fp
1c4d4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1c4d4                 | '    if t1.result_type>=array_no_type then goto 2200
1c4d4     08 4E 85 F1 | 	sub	fp, #8
1c4d8     00 13 16 F2 | 	cmp	arg01, #256 wc
1c4dc     14 00 00 FF 
1c4e0     F8 E5 85 F1 | 	sub	objptr, ##10744
1c4e4     B0 00 90 3D |  if_ae	jmp	#LR__2311
1c4e8     4A 00 00 FF 
1c4ec     80 E4 05 F1 | 	add	objptr, ##38016
1c4f0     F2 12 02 FB | 	rdlong	arg01, objptr
1c4f4     09 FF 01 F6 | 	mov	result3, arg01
1c4f8     01 FE 65 F0 | 	shl	result3, #1
1c4fc     09 FF 01 F1 | 	add	result3, arg01
1c500     02 FE 65 F0 | 	shl	result3, #2
1c504     03 00 00 FF 
1c508     04 E4 85 F1 | 	sub	objptr, ##1540
1c50c     F2 FE 01 F1 | 	add	result3, objptr
1c510     FF FA 01 FB | 	rdlong	result1, result3
1c514     04 FA 65 F0 | 	shl	result1, #4
1c518     32 00 00 FF 
1c51c     84 E4 85 F1 | 	sub	objptr, ##25732
1c520     F2 FA 01 F1 | 	add	result1, objptr
1c524     04 FA 05 F1 | 	add	result1, #4
1c528     A7 FA 61 FC | 	wrlong	result1, fp
1c52c     35 00 00 FF 
1c530     88 E4 05 F1 | 	add	objptr, ##27272
1c534     F2 FE 01 FB | 	rdlong	result3, objptr
1c538     FF 12 02 F6 | 	mov	arg01, result3
1c53c     01 12 66 F0 | 	shl	arg01, #1
1c540     FF 12 02 F1 | 	add	arg01, result3
1c544     02 12 66 F0 | 	shl	arg01, #2
1c548     03 00 00 FF 
1c54c     04 E4 85 F1 | 	sub	objptr, ##1540
1c550     F2 12 02 F1 | 	add	arg01, objptr
1c554     09 13 02 FB | 	rdlong	arg01, arg01
1c558     04 12 66 F0 | 	shl	arg01, #4
1c55c     32 00 00 FF 
1c560     84 E4 85 F1 | 	sub	objptr, ##25732
1c564     F2 12 02 F1 | 	add	arg01, objptr
1c568     0C 12 06 F1 | 	add	arg01, #12
1c56c     09 13 02 FB | 	rdlong	arg01, arg01
1c570     04 4E 05 F1 | 	add	fp, #4
1c574     A7 12 62 FC | 	wrlong	arg01, fp
1c578     04 4E 05 F1 | 	add	fp, #4
1c57c     A7 3A 68 FC | 	wrlong	#29, fp
1c580     08 4E 85 F1 | 	sub	fp, #8
1c584     A7 12 02 F6 | 	mov	arg01, fp
1c588     14 00 00 FF 
1c58c     F8 E5 85 F1 | 	sub	objptr, ##10744
1c590     84 07 BF FD | 	call	#_push
1c594                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1c594                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1c594                 | '   t1.result_type=result_uint
1c594                 | '   push t1 : return
1c594     2C 03 90 FD | 	jmp	#LR__2320
1c598                 | LR__2310
1c598                 | LR__2311
1c598     4A 00 00 FF 
1c59c     80 E4 05 F1 | 	add	objptr, ##38016
1c5a0     F2 FE 01 FB | 	rdlong	result3, objptr
1c5a4     FF FC 01 F6 | 	mov	result2, result3
1c5a8     01 FC 65 F0 | 	shl	result2, #1
1c5ac     FF FC 01 F1 | 	add	result2, result3
1c5b0     02 FC 65 F0 | 	shl	result2, #2
1c5b4     03 00 00 FF 
1c5b8     04 E4 85 F1 | 	sub	objptr, ##1540
1c5bc     F2 FC 01 F1 | 	add	result2, objptr
1c5c0     FE FE 01 FB | 	rdlong	result3, result2
1c5c4     04 FE 65 F0 | 	shl	result3, #4
1c5c8     32 00 00 FF 
1c5cc     84 E4 85 F1 | 	sub	objptr, ##25732
1c5d0     F2 FE 01 F1 | 	add	result3, objptr
1c5d4     04 FE 05 F1 | 	add	result3, #4
1c5d8     FF FE 01 FB | 	rdlong	result3, result3
1c5dc     0C 4E 05 F1 | 	add	fp, #12
1c5e0     A7 FE 61 FC | 	wrlong	result3, fp
1c5e4     35 00 00 FF 
1c5e8     88 E4 05 F1 | 	add	objptr, ##27272
1c5ec     F2 FE 01 FB | 	rdlong	result3, objptr
1c5f0     FF 12 02 F6 | 	mov	arg01, result3
1c5f4     01 12 66 F0 | 	shl	arg01, #1
1c5f8     FF 12 02 F1 | 	add	arg01, result3
1c5fc     02 12 66 F0 | 	shl	arg01, #2
1c600     03 00 00 FF 
1c604     04 E4 85 F1 | 	sub	objptr, ##1540
1c608     F2 12 02 F1 | 	add	arg01, objptr
1c60c     09 13 02 FB | 	rdlong	arg01, arg01
1c610     04 12 66 F0 | 	shl	arg01, #4
1c614     32 00 00 FF 
1c618     84 E4 85 F1 | 	sub	objptr, ##25732
1c61c     F2 12 02 F1 | 	add	arg01, objptr
1c620     0C 12 06 F1 | 	add	arg01, #12
1c624     09 13 02 FB | 	rdlong	arg01, arg01
1c628     08 4E 85 F1 | 	sub	fp, #8
1c62c     A7 12 62 FC | 	wrlong	arg01, fp
1c630     08 4E 05 F1 | 	add	fp, #8
1c634     A7 12 02 FB | 	rdlong	arg01, fp
1c638     0C 4E 85 F1 | 	sub	fp, #12
1c63c     14 00 00 FF 
1c640     F8 E5 85 F1 | 	sub	objptr, ##10744
1c644     14 5C B0 FD | 	call	#_pslpeek
1c648     FD FA 31 F9 | 	getword	result1, result1, #0
1c64c     10 4E 05 F1 | 	add	fp, #16
1c650     A7 FA 61 FC | 	wrlong	result1, fp
1c654     4A 00 00 FF 
1c658     80 E4 05 F1 | 	add	objptr, ##38016
1c65c     F2 FE 01 FB | 	rdlong	result3, objptr
1c660     FF 12 02 F6 | 	mov	arg01, result3
1c664     01 12 66 F0 | 	shl	arg01, #1
1c668     FF 12 02 F1 | 	add	arg01, result3
1c66c     02 12 66 F0 | 	shl	arg01, #2
1c670     03 00 00 FF 
1c674     04 E4 85 F1 | 	sub	objptr, ##1540
1c678     F2 12 02 F1 | 	add	arg01, objptr
1c67c     04 12 06 F1 | 	add	arg01, #4
1c680     09 13 02 FB | 	rdlong	arg01, arg01
1c684     04 4E 05 F1 | 	add	fp, #4
1c688     A7 12 62 FC | 	wrlong	arg01, fp
1c68c     08 4E 85 F1 | 	sub	fp, #8
1c690     A7 12 02 FB | 	rdlong	arg01, fp
1c694     0C 4E 85 F1 | 	sub	fp, #12
1c698     02 12 06 F1 | 	add	arg01, #2
1c69c     47 00 00 FF 
1c6a0     7C E4 85 F1 | 	sub	objptr, ##36476
1c6a4     5C 5B B0 FD | 	call	#_pspeek
1c6a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c6ac     18 4E 05 F1 | 	add	fp, #24
1c6b0     A7 FA 61 FC | 	wrlong	result1, fp
1c6b4     0C 4E 85 F1 | 	sub	fp, #12
1c6b8     A7 12 02 FB | 	rdlong	arg01, fp
1c6bc     0C 4E 85 F1 | 	sub	fp, #12
1c6c0     04 12 06 F1 | 	add	arg01, #4
1c6c4     94 5B B0 FD | 	call	#_pslpeek
1c6c8     1C 4E 05 F1 | 	add	fp, #28
1c6cc     A7 FA 61 FC | 	wrlong	result1, fp
1c6d0     10 4E 85 F1 | 	sub	fp, #16
1c6d4     A7 12 02 FB | 	rdlong	arg01, fp
1c6d8     0C 4E 85 F1 | 	sub	fp, #12
1c6dc     08 12 06 F1 | 	add	arg01, #8
1c6e0     78 5B B0 FD | 	call	#_pslpeek
1c6e4     20 4E 05 F1 | 	add	fp, #32
1c6e8     A7 FA 61 FC | 	wrlong	result1, fp
1c6ec     14 4E 85 F1 | 	sub	fp, #20
1c6f0     A7 12 02 FB | 	rdlong	arg01, fp
1c6f4     0C 4E 85 F1 | 	sub	fp, #12
1c6f8     0C 12 06 F1 | 	add	arg01, #12
1c6fc     5C 5B B0 FD | 	call	#_pslpeek
1c700     24 4E 05 F1 | 	add	fp, #36
1c704     A7 FA 61 FC | 	wrlong	result1, fp
1c708                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c708                 | ' esize=pspeek(arrptr+2)
1c708                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c708                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c708                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c708                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c708     10 4E 85 F1 | 	sub	fp, #16
1c70c     A7 12 02 FB | 	rdlong	arg01, fp
1c710     14 4E 85 F1 | 	sub	fp, #20
1c714     03 12 16 F2 | 	cmp	arg01, #3 wc
1c718     34 00 90 CD |  if_b	jmp	#LR__2312
1c71c     60 05 BF FD | 	call	#_pop
1c720     A7 FA 61 FC | 	wrlong	result1, fp
1c724     04 4E 05 F1 | 	add	fp, #4
1c728     A7 FC 61 FC | 	wrlong	result2, fp
1c72c     04 4E 05 F1 | 	add	fp, #4
1c730     A7 FE 61 FC | 	wrlong	result3, fp
1c734     08 4E 85 F1 | 	sub	fp, #8
1c738     A7 12 02 F6 | 	mov	arg01, fp
1c73c     24 07 BF FD | 	call	#_converttoint
1c740     30 4E 05 F1 | 	add	fp, #48
1c744     A7 FA 61 FC | 	wrlong	result1, fp
1c748     30 4E 85 F1 | 	sub	fp, #48
1c74c     0C 00 90 FD | 	jmp	#LR__2313
1c750                 | LR__2312
1c750     30 4E 05 F1 | 	add	fp, #48
1c754     A7 00 68 FC | 	wrlong	#0, fp
1c758     30 4E 85 F1 | 	sub	fp, #48
1c75c                 | LR__2313
1c75c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c75c     14 4E 05 F1 | 	add	fp, #20
1c760     A7 12 02 FB | 	rdlong	arg01, fp
1c764     14 4E 85 F1 | 	sub	fp, #20
1c768     02 12 16 F2 | 	cmp	arg01, #2 wc
1c76c     34 00 90 CD |  if_b	jmp	#LR__2314
1c770     0C 05 BF FD | 	call	#_pop
1c774     A7 FA 61 FC | 	wrlong	result1, fp
1c778     04 4E 05 F1 | 	add	fp, #4
1c77c     A7 FC 61 FC | 	wrlong	result2, fp
1c780     04 4E 05 F1 | 	add	fp, #4
1c784     A7 FE 61 FC | 	wrlong	result3, fp
1c788     08 4E 85 F1 | 	sub	fp, #8
1c78c     A7 12 02 F6 | 	mov	arg01, fp
1c790     D0 06 BF FD | 	call	#_converttoint
1c794     2C 4E 05 F1 | 	add	fp, #44
1c798     A7 FA 61 FC | 	wrlong	result1, fp
1c79c     2C 4E 85 F1 | 	sub	fp, #44
1c7a0     0C 00 90 FD | 	jmp	#LR__2315
1c7a4                 | LR__2314
1c7a4     2C 4E 05 F1 | 	add	fp, #44
1c7a8     A7 00 68 FC | 	wrlong	#0, fp
1c7ac     2C 4E 85 F1 | 	sub	fp, #44
1c7b0                 | LR__2315
1c7b0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c7b0     14 4E 05 F1 | 	add	fp, #20
1c7b4     A7 12 02 FB | 	rdlong	arg01, fp
1c7b8     14 4E 85 F1 | 	sub	fp, #20
1c7bc     01 12 16 F2 | 	cmp	arg01, #1 wc
1c7c0     34 00 90 CD |  if_b	jmp	#LR__2316
1c7c4     B8 04 BF FD | 	call	#_pop
1c7c8     A7 FA 61 FC | 	wrlong	result1, fp
1c7cc     04 4E 05 F1 | 	add	fp, #4
1c7d0     A7 FC 61 FC | 	wrlong	result2, fp
1c7d4     04 4E 05 F1 | 	add	fp, #4
1c7d8     A7 FE 61 FC | 	wrlong	result3, fp
1c7dc     08 4E 85 F1 | 	sub	fp, #8
1c7e0     A7 12 02 F6 | 	mov	arg01, fp
1c7e4     7C 06 BF FD | 	call	#_converttoint
1c7e8     28 4E 05 F1 | 	add	fp, #40
1c7ec     A7 FA 61 FC | 	wrlong	result1, fp
1c7f0     28 4E 85 F1 | 	sub	fp, #40
1c7f4     0C 00 90 FD | 	jmp	#LR__2317
1c7f8                 | LR__2316
1c7f8     28 4E 05 F1 | 	add	fp, #40
1c7fc     A7 00 68 FC | 	wrlong	#0, fp
1c800     28 4E 85 F1 | 	sub	fp, #40
1c804                 | LR__2317
1c804                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1c804                 | ' if numpar>0 then
1c804     14 4E 05 F1 | 	add	fp, #20
1c808     A7 FE 01 FB | 	rdlong	result3, fp
1c80c     14 4E 85 F1 | 	sub	fp, #20
1c810     01 FE 15 F2 | 	cmp	result3, #1 wc
1c814     8C 00 90 CD |  if_b	jmp	#LR__2318
1c818     0C 4E 05 F1 | 	add	fp, #12
1c81c     A7 FC 01 FB | 	rdlong	result2, fp
1c820     1C 4E 05 F1 | 	add	fp, #28
1c824     A7 FE 01 FB | 	rdlong	result3, fp
1c828     04 4E 05 F1 | 	add	fp, #4
1c82c     A7 12 02 FB | 	rdlong	arg01, fp
1c830     10 4E 85 F1 | 	sub	fp, #16
1c834     A7 FA 01 FB | 	rdlong	result1, fp
1c838     FD 12 02 FD | 	qmul	arg01, result1
1c83c     10 FC 05 F1 | 	add	result2, #16
1c840     14 4E 05 F1 | 	add	fp, #20
1c844     A7 26 02 FB | 	rdlong	local01, fp
1c848     18 12 62 FD | 	getqx	arg01
1c84c     FD 26 02 FD | 	qmul	local01, result1
1c850     09 FF 01 F1 | 	add	result3, arg01
1c854     10 4E 85 F1 | 	sub	fp, #16
1c858     A7 26 02 FB | 	rdlong	local01, fp
1c85c     18 FA 61 FD | 	getqx	result1
1c860     13 FB 01 FD | 	qmul	result1, local01
1c864     08 4E 85 F1 | 	sub	fp, #8
1c868     A7 26 02 FB | 	rdlong	local01, fp
1c86c     18 FA 61 FD | 	getqx	result1
1c870     FD FE 01 F1 | 	add	result3, result1
1c874     13 FF 01 FD | 	qmul	result3, local01
1c878     1C 4E 05 F1 | 	add	fp, #28
1c87c     18 26 62 FD | 	getqx	local01
1c880     13 FD 01 F1 | 	add	result2, local01
1c884     A7 FC 61 FC | 	wrlong	result2, fp
1c888     2C 4E 85 F1 | 	sub	fp, #44
1c88c     A7 3A 68 FC | 	wrlong	#29, fp
1c890     2C 4E 05 F1 | 	add	fp, #44
1c894     A7 26 02 FB | 	rdlong	local01, fp
1c898     34 4E 85 F1 | 	sub	fp, #52
1c89c     A7 26 62 FC | 	wrlong	local01, fp
1c8a0     18 00 90 FD | 	jmp	#LR__2319
1c8a4                 | LR__2318
1c8a4     08 4E 05 F1 | 	add	fp, #8
1c8a8     A7 3A 68 FC | 	wrlong	#29, fp
1c8ac     04 4E 05 F1 | 	add	fp, #4
1c8b0     A7 26 02 FB | 	rdlong	local01, fp
1c8b4     0C 4E 85 F1 | 	sub	fp, #12
1c8b8     A7 26 62 FC | 	wrlong	local01, fp
1c8bc                 | LR__2319
1c8bc     A7 12 02 F6 | 	mov	arg01, fp
1c8c0     54 04 BF FD | 	call	#_push
1c8c4                 | LR__2320
1c8c4     A7 F0 03 F6 | 	mov	ptra, fp
1c8c8     B2 00 A0 FD | 	call	#popregs_
1c8cc                 | _do_getaddr_ret
1c8cc     2D 00 64 FD | 	ret
1c8d0                 | 
1c8d0                 | ' 
1c8d0                 | ' 
1c8d0                 | ' 
1c8d0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c8d0                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1c8d0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c8d0                 | ' 
1c8d0                 | ' '--------------------------------- AND 
1c8d0                 | ' 
1c8d0                 | ' sub do_and 
1c8d0                 | _do_and
1c8d0     03 4A 05 F6 | 	mov	COUNT_, #3
1c8d4     A8 00 A0 FD | 	call	#pushregs_
1c8d8     18 F0 07 F1 | 	add	ptra, #24
1c8dc     A0 03 BF FD | 	call	#_pop
1c8e0     FD 12 02 F6 | 	mov	arg01, result1
1c8e4     FE 26 02 F6 | 	mov	local01, result2
1c8e8     FF 28 02 F6 | 	mov	local02, result3
1c8ec     0C 4E 05 F1 | 	add	fp, #12
1c8f0     A7 12 62 FC | 	wrlong	arg01, fp
1c8f4     04 4E 05 F1 | 	add	fp, #4
1c8f8     A7 26 62 FC | 	wrlong	local01, fp
1c8fc     04 4E 05 F1 | 	add	fp, #4
1c900     A7 28 62 FC | 	wrlong	local02, fp
1c904     14 4E 85 F1 | 	sub	fp, #20
1c908     74 03 BF FD | 	call	#_pop
1c90c     FF 2A 02 F6 | 	mov	local03, result3
1c910     A7 FA 61 FC | 	wrlong	result1, fp
1c914     04 4E 05 F1 | 	add	fp, #4
1c918     A7 FC 61 FC | 	wrlong	result2, fp
1c91c     04 4E 05 F1 | 	add	fp, #4
1c920     A7 2A 62 FC | 	wrlong	local03, fp
1c924                 | ' 
1c924                 | ' t2=pop()
1c924                 | ' t1=pop()
1c924                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c924     08 4E 85 F1 | 	sub	fp, #8
1c928     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c92c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c930     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c934     08 4E 05 A1 |  if_e	add	fp, #8
1c938     A7 3A 68 AC |  if_e	wrlong	#29, fp
1c93c     08 4E 85 A1 |  if_e	sub	fp, #8
1c940                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c940     14 4E 05 F1 | 	add	fp, #20
1c944     A7 2A 02 FB | 	rdlong	local03, fp
1c948     14 4E 85 F1 | 	sub	fp, #20
1c94c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c950     18 00 90 5D |  if_ne	jmp	#LR__2330
1c954     0C 4E 05 F1 | 	add	fp, #12
1c958     A7 2A 02 FB | 	rdlong	local03, fp
1c95c     A7 2A 62 FC | 	wrlong	local03, fp
1c960     08 4E 05 F1 | 	add	fp, #8
1c964     A7 3A 68 FC | 	wrlong	#29, fp
1c968     14 4E 85 F1 | 	sub	fp, #20
1c96c                 | LR__2330
1c96c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1c96c     08 4E 05 F1 | 	add	fp, #8
1c970     A7 2A 02 FB | 	rdlong	local03, fp
1c974     08 4E 85 F1 | 	sub	fp, #8
1c978     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c97c     14 4E 05 51 |  if_ne	add	fp, #20
1c980     A7 28 02 5B |  if_ne	rdlong	local02, fp
1c984     14 4E 85 51 |  if_ne	sub	fp, #20
1c988     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1c98c     08 4E 05 51 |  if_ne	add	fp, #8
1c990     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c994     08 4E 85 51 |  if_ne	sub	fp, #8
1c998     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1c99c     14 4E 05 51 |  if_ne	add	fp, #20
1c9a0     14 4E 85 51 |  if_ne	sub	fp, #20
1c9a4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1c9a8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1c9ac     08 4E 05 A1 |  if_e	add	fp, #8
1c9b0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c9b4     08 4E 85 A1 |  if_e	sub	fp, #8
1c9b8     18 00 90 AD |  if_e	jmp	#LR__2331
1c9bc     A7 2A 02 FB | 	rdlong	local03, fp
1c9c0     0C 4E 05 F1 | 	add	fp, #12
1c9c4     A7 26 02 FB | 	rdlong	local01, fp
1c9c8     0C 4E 85 F1 | 	sub	fp, #12
1c9cc     13 2B 02 F5 | 	and	local03, local01
1c9d0     A7 2A 62 FC | 	wrlong	local03, fp
1c9d4                 | LR__2331
1c9d4     A7 12 02 F6 | 	mov	arg01, fp
1c9d8     3C 03 BF FD | 	call	#_push
1c9dc     A7 F0 03 F6 | 	mov	ptra, fp
1c9e0     B2 00 A0 FD | 	call	#popregs_
1c9e4                 | _do_and_ret
1c9e4     2D 00 64 FD | 	ret
1c9e8                 | 
1c9e8                 | ' 
1c9e8                 | ' '--------------------------------- DIV (integer divide)
1c9e8                 | ' 
1c9e8                 | ' sub do_div 
1c9e8                 | _do_div
1c9e8     01 4A 05 F6 | 	mov	COUNT_, #1
1c9ec     A8 00 A0 FD | 	call	#pushregs_
1c9f0     18 F0 07 F1 | 	add	ptra, #24
1c9f4     88 02 BF FD | 	call	#_pop
1c9f8     FD 8A 02 F6 | 	mov	muldivb_, result1
1c9fc     FE 88 02 F6 | 	mov	muldiva_, result2
1ca00     FF 26 02 F6 | 	mov	local01, result3
1ca04     0C 4E 05 F1 | 	add	fp, #12
1ca08     A7 8A 62 FC | 	wrlong	muldivb_, fp
1ca0c     04 4E 05 F1 | 	add	fp, #4
1ca10     A7 88 62 FC | 	wrlong	muldiva_, fp
1ca14     04 4E 05 F1 | 	add	fp, #4
1ca18     A7 26 62 FC | 	wrlong	local01, fp
1ca1c     14 4E 85 F1 | 	sub	fp, #20
1ca20     5C 02 BF FD | 	call	#_pop
1ca24     A7 FA 61 FC | 	wrlong	result1, fp
1ca28     04 4E 05 F1 | 	add	fp, #4
1ca2c     A7 FC 61 FC | 	wrlong	result2, fp
1ca30     04 4E 05 F1 | 	add	fp, #4
1ca34     A7 FE 61 FC | 	wrlong	result3, fp
1ca38                 | ' 
1ca38                 | ' t2=pop()
1ca38                 | ' t1=pop()
1ca38                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1ca38     08 4E 85 F1 | 	sub	fp, #8
1ca3c     1F FE 0D F2 | 	cmp	result3, #31 wz
1ca40     14 4E 05 51 |  if_ne	add	fp, #20
1ca44     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1ca48     14 4E 85 51 |  if_ne	sub	fp, #20
1ca4c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1ca50     A7 14 68 AC |  if_e	wrlong	#10, fp
1ca54     08 4E 05 A1 |  if_e	add	fp, #8
1ca58     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ca5c     08 4E 85 A1 |  if_e	sub	fp, #8
1ca60     90 01 90 AD |  if_e	jmp	#LR__2346
1ca64                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1ca64     08 4E 05 F1 | 	add	fp, #8
1ca68     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ca6c     08 4E 85 F1 | 	sub	fp, #8
1ca70     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1ca74     1C 00 90 5D |  if_ne	jmp	#LR__2340
1ca78     08 4E 05 F1 | 	add	fp, #8
1ca7c     A7 38 68 FC | 	wrlong	#28, fp
1ca80     08 4E 85 F1 | 	sub	fp, #8
1ca84     A7 12 02 FB | 	rdlong	arg01, fp
1ca88     00 14 06 F6 | 	mov	arg02, #0
1ca8c     28 C2 B0 FD | 	call	#__system___float_tointeger
1ca90     A7 FA 61 FC | 	wrlong	result1, fp
1ca94                 | LR__2340
1ca94                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1ca94     14 4E 05 F1 | 	add	fp, #20
1ca98     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ca9c     14 4E 85 F1 | 	sub	fp, #20
1caa0     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1caa4     28 00 90 5D |  if_ne	jmp	#LR__2341
1caa8     14 4E 05 F1 | 	add	fp, #20
1caac     A7 38 68 FC | 	wrlong	#28, fp
1cab0     08 4E 85 F1 | 	sub	fp, #8
1cab4     A7 12 02 FB | 	rdlong	arg01, fp
1cab8     0C 4E 85 F1 | 	sub	fp, #12
1cabc     00 14 06 F6 | 	mov	arg02, #0
1cac0     F4 C1 B0 FD | 	call	#__system___float_tointeger
1cac4     0C 4E 05 F1 | 	add	fp, #12
1cac8     A7 FA 61 FC | 	wrlong	result1, fp
1cacc     0C 4E 85 F1 | 	sub	fp, #12
1cad0                 | LR__2341
1cad0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1cad0     08 4E 05 F1 | 	add	fp, #8
1cad4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cad8     08 4E 85 F1 | 	sub	fp, #8
1cadc     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1cae0     14 4E 05 A1 |  if_e	add	fp, #20
1cae4     A7 26 02 AB |  if_e	rdlong	local01, fp
1cae8     14 4E 85 A1 |  if_e	sub	fp, #20
1caec     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1caf0     20 00 90 5D |  if_ne	jmp	#LR__2342
1caf4     0C 4E 05 F1 | 	add	fp, #12
1caf8     A7 26 02 FB | 	rdlong	local01, fp
1cafc     0C 4E 85 F1 | 	sub	fp, #12
1cb00     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cb04     13 8B 12 FD | 	qdiv	muldivb_, local01
1cb08     18 26 62 FD | 	getqx	local01
1cb0c     A7 26 62 FC | 	wrlong	local01, fp
1cb10     E0 00 90 FD | 	jmp	#LR__2346
1cb14                 | LR__2342
1cb14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1cb14     08 4E 05 F1 | 	add	fp, #8
1cb18     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cb1c     08 4E 85 F1 | 	sub	fp, #8
1cb20     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1cb24     14 4E 05 A1 |  if_e	add	fp, #20
1cb28     A7 26 02 AB |  if_e	rdlong	local01, fp
1cb2c     14 4E 85 A1 |  if_e	sub	fp, #20
1cb30     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1cb34     2C 00 90 5D |  if_ne	jmp	#LR__2343
1cb38     0C 4E 05 F1 | 	add	fp, #12
1cb3c     A7 26 02 FB | 	rdlong	local01, fp
1cb40     0C 4E 85 F1 | 	sub	fp, #12
1cb44     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cb48     13 8B 12 FD | 	qdiv	muldivb_, local01
1cb4c     18 26 62 FD | 	getqx	local01
1cb50     A7 26 62 FC | 	wrlong	local01, fp
1cb54     08 4E 05 F1 | 	add	fp, #8
1cb58     A7 38 68 FC | 	wrlong	#28, fp
1cb5c     08 4E 85 F1 | 	sub	fp, #8
1cb60     90 00 90 FD | 	jmp	#LR__2346
1cb64                 | LR__2343
1cb64                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1cb64     08 4E 05 F1 | 	add	fp, #8
1cb68     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cb6c     08 4E 85 F1 | 	sub	fp, #8
1cb70     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1cb74     14 4E 05 A1 |  if_e	add	fp, #20
1cb78     A7 26 02 AB |  if_e	rdlong	local01, fp
1cb7c     14 4E 85 A1 |  if_e	sub	fp, #20
1cb80     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1cb84     1C 00 90 5D |  if_ne	jmp	#LR__2344
1cb88     A7 88 02 FB | 	rdlong	muldiva_, fp
1cb8c     0C 4E 05 F1 | 	add	fp, #12
1cb90     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cb94     0C 4E 85 F1 | 	sub	fp, #12
1cb98     BA 00 A0 FD | 	call	#divide_
1cb9c     A7 8A 62 FC | 	wrlong	muldivb_, fp
1cba0     50 00 90 FD | 	jmp	#LR__2346
1cba4                 | LR__2344
1cba4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1cba4     08 4E 05 F1 | 	add	fp, #8
1cba8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cbac     08 4E 85 F1 | 	sub	fp, #8
1cbb0     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1cbb4     14 4E 05 A1 |  if_e	add	fp, #20
1cbb8     A7 26 02 AB |  if_e	rdlong	local01, fp
1cbbc     14 4E 85 A1 |  if_e	sub	fp, #20
1cbc0     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1cbc4     1C 00 90 5D |  if_ne	jmp	#LR__2345
1cbc8     A7 88 02 FB | 	rdlong	muldiva_, fp
1cbcc     0C 4E 05 F1 | 	add	fp, #12
1cbd0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cbd4     0C 4E 85 F1 | 	sub	fp, #12
1cbd8     BA 00 A0 FD | 	call	#divide_
1cbdc     A7 8A 62 FC | 	wrlong	muldivb_, fp
1cbe0     10 00 90 FD | 	jmp	#LR__2346
1cbe4                 | LR__2345
1cbe4     A7 16 68 FC | 	wrlong	#11, fp
1cbe8     08 4E 05 F1 | 	add	fp, #8
1cbec     A7 FE 69 FC | 	wrlong	#255, fp
1cbf0     08 4E 85 F1 | 	sub	fp, #8
1cbf4                 | LR__2346
1cbf4     A7 12 02 F6 | 	mov	arg01, fp
1cbf8     1C 01 BF FD | 	call	#_push
1cbfc     A7 F0 03 F6 | 	mov	ptra, fp
1cc00     B2 00 A0 FD | 	call	#popregs_
1cc04                 | _do_div_ret
1cc04     2D 00 64 FD | 	ret
1cc08                 | 
1cc08                 | ' 
1cc08                 | ' '--------------------------------- equal (=)
1cc08                 | ' 
1cc08                 | ' sub do_eq
1cc08                 | _do_eq
1cc08     05 4A 05 F6 | 	mov	COUNT_, #5
1cc0c     A8 00 A0 FD | 	call	#pushregs_
1cc10     18 F0 07 F1 | 	add	ptra, #24
1cc14     68 00 BF FD | 	call	#_pop
1cc18     FD 26 02 F6 | 	mov	local01, result1
1cc1c     FE 28 02 F6 | 	mov	local02, result2
1cc20     FF 2A 02 F6 | 	mov	local03, result3
1cc24     0C 4E 05 F1 | 	add	fp, #12
1cc28     A7 26 62 FC | 	wrlong	local01, fp
1cc2c     04 4E 05 F1 | 	add	fp, #4
1cc30     A7 28 62 FC | 	wrlong	local02, fp
1cc34     04 4E 05 F1 | 	add	fp, #4
1cc38     A7 2A 62 FC | 	wrlong	local03, fp
1cc3c     14 4E 85 F1 | 	sub	fp, #20
1cc40     3C 00 BF FD | 	call	#_pop
1cc44     FF 2A 02 F6 | 	mov	local03, result3
1cc48     A7 FA 61 FC | 	wrlong	result1, fp
1cc4c     04 4E 05 F1 | 	add	fp, #4
1cc50     A7 FC 61 FC | 	wrlong	result2, fp
1cc54     04 4E 05 F1 | 	add	fp, #4
1cc58     A7 2A 62 FC | 	wrlong	local03, fp
1cc5c                 | ' 
1cc5c                 | ' t2=pop()
1cc5c                 | ' t1=pop()
1cc5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1cc5c     08 4E 85 F1 | 	sub	fp, #8
1cc60     1F 2A 0E F2 | 	cmp	local03, #31 wz
1cc64     14 4E 05 A1 |  if_e	add	fp, #20
1cc68     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cc6c     14 4E 85 A1 |  if_e	sub	fp, #20
1cc70     16 2B 02 A6 |  if_e	mov	local03, local04
1cc74     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1cc78     28 00 90 5D |  if_ne	jmp	#LR__2350
1cc7c     00 26 06 F6 | 	mov	local01, #0
1cc80     A7 12 02 FB | 	rdlong	arg01, fp
1cc84     0C 4E 05 F1 | 	add	fp, #12
1cc88     A7 14 02 FB | 	rdlong	arg02, fp
1cc8c     0C 4E 85 F1 | 	sub	fp, #12
1cc90     0C 8D B0 FD | 	call	#__system___string_cmp
1cc94     00 FA 0D F2 | 	cmp	result1, #0 wz
1cc98     00 26 26 A6 |  if_e	not	local01, #0
1cc9c     A7 26 62 FC | 	wrlong	local01, fp
1cca0     20 04 90 FD | 	jmp	#LR__2363
1cca4                 | LR__2350
1cca4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1cca4     08 4E 05 F1 | 	add	fp, #8
1cca8     A7 26 02 FB | 	rdlong	local01, fp
1ccac     08 4E 85 F1 | 	sub	fp, #8
1ccb0     1E 26 0E F2 | 	cmp	local01, #30 wz
1ccb4     14 4E 05 A1 |  if_e	add	fp, #20
1ccb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ccbc     14 4E 85 A1 |  if_e	sub	fp, #20
1ccc0     16 2B 02 A6 |  if_e	mov	local03, local04
1ccc4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ccc8     2C 00 90 5D |  if_ne	jmp	#LR__2351
1cccc     00 26 06 F6 | 	mov	local01, #0
1ccd0     A7 12 02 FB | 	rdlong	arg01, fp
1ccd4     0C 4E 05 F1 | 	add	fp, #12
1ccd8     A7 14 02 FB | 	rdlong	arg02, fp
1ccdc     0C 4E 85 F1 | 	sub	fp, #12
1cce0     01 16 06 F6 | 	mov	arg03, #1
1cce4     3C BF B0 FD | 	call	#__system___float_cmp
1cce8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ccec     00 26 26 A6 |  if_e	not	local01, #0
1ccf0     A7 26 62 FC | 	wrlong	local01, fp
1ccf4     CC 03 90 FD | 	jmp	#LR__2363
1ccf8                 | LR__2351
1ccf8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1ccf8     08 4E 05 F1 | 	add	fp, #8
1ccfc     A7 26 02 FB | 	rdlong	local01, fp
1cd00     08 4E 85 F1 | 	sub	fp, #8
1cd04     1E 26 0E F2 | 	cmp	local01, #30 wz
1cd08     14 4E 05 A1 |  if_e	add	fp, #20
1cd0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cd10     14 4E 85 A1 |  if_e	sub	fp, #20
1cd14     16 2B 02 A6 |  if_e	mov	local03, local04
1cd18     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cd1c     48 00 90 5D |  if_ne	jmp	#LR__2352
1cd20     00 26 06 F6 | 	mov	local01, #0
1cd24     A7 28 02 FB | 	rdlong	local02, fp
1cd28     0C 4E 05 F1 | 	add	fp, #12
1cd2c     A7 12 02 FB | 	rdlong	arg01, fp
1cd30     0C 4E 85 F1 | 	sub	fp, #12
1cd34     09 13 52 F6 | 	abs	arg01, arg01 wc
1cd38     1F 2E C6 C9 |  if_b	decod	local05, #31
1cd3c     00 2E 06 36 |  if_ae	mov	local05, #0
1cd40     A8 B6 B0 FD | 	call	#__system___float_fromuns
1cd44     17 FB 61 F5 | 	xor	result1, local05
1cd48     FD 14 02 F6 | 	mov	arg02, result1
1cd4c     14 13 02 F6 | 	mov	arg01, local02
1cd50     01 16 06 F6 | 	mov	arg03, #1
1cd54     CC BE B0 FD | 	call	#__system___float_cmp
1cd58     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd5c     00 26 26 A6 |  if_e	not	local01, #0
1cd60     A7 26 62 FC | 	wrlong	local01, fp
1cd64     5C 03 90 FD | 	jmp	#LR__2363
1cd68                 | LR__2352
1cd68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1cd68     08 4E 05 F1 | 	add	fp, #8
1cd6c     A7 26 02 FB | 	rdlong	local01, fp
1cd70     08 4E 85 F1 | 	sub	fp, #8
1cd74     1E 26 0E F2 | 	cmp	local01, #30 wz
1cd78     14 4E 05 A1 |  if_e	add	fp, #20
1cd7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cd80     14 4E 85 A1 |  if_e	sub	fp, #20
1cd84     16 2B 02 A6 |  if_e	mov	local03, local04
1cd88     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cd8c     38 00 90 5D |  if_ne	jmp	#LR__2353
1cd90     00 26 06 F6 | 	mov	local01, #0
1cd94     A7 28 02 FB | 	rdlong	local02, fp
1cd98     0C 4E 05 F1 | 	add	fp, #12
1cd9c     A7 12 02 FB | 	rdlong	arg01, fp
1cda0     0C 4E 85 F1 | 	sub	fp, #12
1cda4     44 B6 B0 FD | 	call	#__system___float_fromuns
1cda8     FD 14 02 F6 | 	mov	arg02, result1
1cdac     14 13 02 F6 | 	mov	arg01, local02
1cdb0     01 16 06 F6 | 	mov	arg03, #1
1cdb4     6C BE B0 FD | 	call	#__system___float_cmp
1cdb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1cdbc     00 26 26 A6 |  if_e	not	local01, #0
1cdc0     A7 26 62 FC | 	wrlong	local01, fp
1cdc4     FC 02 90 FD | 	jmp	#LR__2363
1cdc8                 | LR__2353
1cdc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1cdc8     08 4E 05 F1 | 	add	fp, #8
1cdcc     A7 26 02 FB | 	rdlong	local01, fp
1cdd0     08 4E 85 F1 | 	sub	fp, #8
1cdd4     1C 26 0E F2 | 	cmp	local01, #28 wz
1cdd8     14 4E 05 A1 |  if_e	add	fp, #20
1cddc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cde0     14 4E 85 A1 |  if_e	sub	fp, #20
1cde4     16 2B 02 A6 |  if_e	mov	local03, local04
1cde8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cdec     44 00 90 5D |  if_ne	jmp	#LR__2354
1cdf0     00 26 06 F6 | 	mov	local01, #0
1cdf4     A7 12 02 FB | 	rdlong	arg01, fp
1cdf8     09 13 52 F6 | 	abs	arg01, arg01 wc
1cdfc     1F 2E C6 C9 |  if_b	decod	local05, #31
1ce00     00 2E 06 36 |  if_ae	mov	local05, #0
1ce04     E4 B5 B0 FD | 	call	#__system___float_fromuns
1ce08     17 FB 61 F5 | 	xor	result1, local05
1ce0c     FD 12 02 F6 | 	mov	arg01, result1
1ce10     0C 4E 05 F1 | 	add	fp, #12
1ce14     A7 14 02 FB | 	rdlong	arg02, fp
1ce18     0C 4E 85 F1 | 	sub	fp, #12
1ce1c     01 16 06 F6 | 	mov	arg03, #1
1ce20     00 BE B0 FD | 	call	#__system___float_cmp
1ce24     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce28     00 26 26 A6 |  if_e	not	local01, #0
1ce2c     A7 26 62 FC | 	wrlong	local01, fp
1ce30     90 02 90 FD | 	jmp	#LR__2363
1ce34                 | LR__2354
1ce34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1ce34     08 4E 05 F1 | 	add	fp, #8
1ce38     A7 26 02 FB | 	rdlong	local01, fp
1ce3c     08 4E 85 F1 | 	sub	fp, #8
1ce40     1C 26 0E F2 | 	cmp	local01, #28 wz
1ce44     14 4E 05 A1 |  if_e	add	fp, #20
1ce48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce4c     14 4E 85 A1 |  if_e	sub	fp, #20
1ce50     16 2B 02 A6 |  if_e	mov	local03, local04
1ce54     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ce58     24 00 90 5D |  if_ne	jmp	#LR__2355
1ce5c     00 26 06 F6 | 	mov	local01, #0
1ce60     A7 28 02 FB | 	rdlong	local02, fp
1ce64     0C 4E 05 F1 | 	add	fp, #12
1ce68     A7 2A 02 FB | 	rdlong	local03, fp
1ce6c     0C 4E 85 F1 | 	sub	fp, #12
1ce70     15 29 0A F2 | 	cmp	local02, local03 wz
1ce74     01 26 66 A6 |  if_e	neg	local01, #1
1ce78     A7 26 62 FC | 	wrlong	local01, fp
1ce7c     44 02 90 FD | 	jmp	#LR__2363
1ce80                 | LR__2355
1ce80                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1ce80     08 4E 05 F1 | 	add	fp, #8
1ce84     A7 26 02 FB | 	rdlong	local01, fp
1ce88     08 4E 85 F1 | 	sub	fp, #8
1ce8c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ce90     14 4E 05 A1 |  if_e	add	fp, #20
1ce94     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce98     14 4E 85 A1 |  if_e	sub	fp, #20
1ce9c     16 2B 02 A6 |  if_e	mov	local03, local04
1cea0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cea4     24 00 90 5D |  if_ne	jmp	#LR__2356
1cea8     00 26 06 F6 | 	mov	local01, #0
1ceac     A7 28 02 FB | 	rdlong	local02, fp
1ceb0     0C 4E 05 F1 | 	add	fp, #12
1ceb4     A7 2A 02 FB | 	rdlong	local03, fp
1ceb8     0C 4E 85 F1 | 	sub	fp, #12
1cebc     15 29 0A F2 | 	cmp	local02, local03 wz
1cec0     01 26 66 A6 |  if_e	neg	local01, #1
1cec4     A7 26 62 FC | 	wrlong	local01, fp
1cec8     F8 01 90 FD | 	jmp	#LR__2363
1cecc                 | LR__2356
1cecc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1cecc     08 4E 05 F1 | 	add	fp, #8
1ced0     A7 26 02 FB | 	rdlong	local01, fp
1ced4     08 4E 85 F1 | 	sub	fp, #8
1ced8     1D 26 0E F2 | 	cmp	local01, #29 wz
1cedc     14 4E 05 A1 |  if_e	add	fp, #20
1cee0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cee4     14 4E 85 A1 |  if_e	sub	fp, #20
1cee8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ceec     34 00 90 5D |  if_ne	jmp	#LR__2357
1cef0     00 26 06 F6 | 	mov	local01, #0
1cef4     A7 12 02 FB | 	rdlong	arg01, fp
1cef8     F0 B4 B0 FD | 	call	#__system___float_fromuns
1cefc     FD 12 02 F6 | 	mov	arg01, result1
1cf00     0C 4E 05 F1 | 	add	fp, #12
1cf04     A7 14 02 FB | 	rdlong	arg02, fp
1cf08     0C 4E 85 F1 | 	sub	fp, #12
1cf0c     01 16 06 F6 | 	mov	arg03, #1
1cf10     10 BD B0 FD | 	call	#__system___float_cmp
1cf14     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf18     00 26 26 A6 |  if_e	not	local01, #0
1cf1c     A7 26 62 FC | 	wrlong	local01, fp
1cf20     A0 01 90 FD | 	jmp	#LR__2363
1cf24                 | LR__2357
1cf24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1cf24     08 4E 05 F1 | 	add	fp, #8
1cf28     A7 26 02 FB | 	rdlong	local01, fp
1cf2c     08 4E 85 F1 | 	sub	fp, #8
1cf30     1D 26 0E F2 | 	cmp	local01, #29 wz
1cf34     14 4E 05 A1 |  if_e	add	fp, #20
1cf38     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cf3c     14 4E 85 A1 |  if_e	sub	fp, #20
1cf40     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cf44     24 00 90 5D |  if_ne	jmp	#LR__2358
1cf48     00 26 06 F6 | 	mov	local01, #0
1cf4c     A7 28 02 FB | 	rdlong	local02, fp
1cf50     0C 4E 05 F1 | 	add	fp, #12
1cf54     A7 2A 02 FB | 	rdlong	local03, fp
1cf58     0C 4E 85 F1 | 	sub	fp, #12
1cf5c     15 29 0A F2 | 	cmp	local02, local03 wz
1cf60     01 26 66 A6 |  if_e	neg	local01, #1
1cf64     A7 26 62 FC | 	wrlong	local01, fp
1cf68     58 01 90 FD | 	jmp	#LR__2363
1cf6c                 | LR__2358
1cf6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1cf6c     08 4E 05 F1 | 	add	fp, #8
1cf70     A7 26 02 FB | 	rdlong	local01, fp
1cf74     08 4E 85 F1 | 	sub	fp, #8
1cf78     1D 26 0E F2 | 	cmp	local01, #29 wz
1cf7c     14 4E 05 A1 |  if_e	add	fp, #20
1cf80     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cf84     14 4E 85 A1 |  if_e	sub	fp, #20
1cf88     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cf8c     24 00 90 5D |  if_ne	jmp	#LR__2359
1cf90     00 26 06 F6 | 	mov	local01, #0
1cf94     A7 28 02 FB | 	rdlong	local02, fp
1cf98     0C 4E 05 F1 | 	add	fp, #12
1cf9c     A7 2A 02 FB | 	rdlong	local03, fp
1cfa0     0C 4E 85 F1 | 	sub	fp, #12
1cfa4     15 29 0A F2 | 	cmp	local02, local03 wz
1cfa8     01 26 66 A6 |  if_e	neg	local01, #1
1cfac     A7 26 62 FC | 	wrlong	local01, fp
1cfb0     10 01 90 FD | 	jmp	#LR__2363
1cfb4                 | LR__2359
1cfb4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1cfb4     08 4E 05 F1 | 	add	fp, #8
1cfb8     A7 26 02 FB | 	rdlong	local01, fp
1cfbc     08 4E 85 F1 | 	sub	fp, #8
1cfc0     2B 26 0E F2 | 	cmp	local01, #43 wz
1cfc4     14 4E 05 A1 |  if_e	add	fp, #20
1cfc8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cfcc     14 4E 85 A1 |  if_e	sub	fp, #20
1cfd0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1cfd4     30 00 90 5D |  if_ne	jmp	#LR__2360
1cfd8     00 26 06 F6 | 	mov	local01, #0
1cfdc     A7 12 02 FB | 	rdlong	arg01, fp
1cfe0     14 FE BE FD | 	call	#_convertstring
1cfe4     FD 12 02 F6 | 	mov	arg01, result1
1cfe8     0C 4E 05 F1 | 	add	fp, #12
1cfec     A7 14 02 FB | 	rdlong	arg02, fp
1cff0     0C 4E 85 F1 | 	sub	fp, #12
1cff4     A8 89 B0 FD | 	call	#__system___string_cmp
1cff8     00 FA 0D F2 | 	cmp	result1, #0 wz
1cffc     00 26 26 A6 |  if_e	not	local01, #0
1d000     A7 26 62 FC | 	wrlong	local01, fp
1d004     BC 00 90 FD | 	jmp	#LR__2363
1d008                 | LR__2360
1d008                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1d008     08 4E 05 F1 | 	add	fp, #8
1d00c     A7 26 02 FB | 	rdlong	local01, fp
1d010     08 4E 85 F1 | 	sub	fp, #8
1d014     1F 26 0E F2 | 	cmp	local01, #31 wz
1d018     14 4E 05 A1 |  if_e	add	fp, #20
1d01c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d020     14 4E 85 A1 |  if_e	sub	fp, #20
1d024     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d028     34 00 90 5D |  if_ne	jmp	#LR__2361
1d02c     00 26 06 F6 | 	mov	local01, #0
1d030     A7 28 02 FB | 	rdlong	local02, fp
1d034     0C 4E 05 F1 | 	add	fp, #12
1d038     A7 12 02 FB | 	rdlong	arg01, fp
1d03c     0C 4E 85 F1 | 	sub	fp, #12
1d040     B4 FD BE FD | 	call	#_convertstring
1d044     FD 14 02 F6 | 	mov	arg02, result1
1d048     14 13 02 F6 | 	mov	arg01, local02
1d04c     50 89 B0 FD | 	call	#__system___string_cmp
1d050     00 FA 0D F2 | 	cmp	result1, #0 wz
1d054     00 26 26 A6 |  if_e	not	local01, #0
1d058     A7 26 62 FC | 	wrlong	local01, fp
1d05c     64 00 90 FD | 	jmp	#LR__2363
1d060                 | LR__2361
1d060                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1d060     08 4E 05 F1 | 	add	fp, #8
1d064     A7 26 02 FB | 	rdlong	local01, fp
1d068     08 4E 85 F1 | 	sub	fp, #8
1d06c     2B 26 0E F2 | 	cmp	local01, #43 wz
1d070     14 4E 05 A1 |  if_e	add	fp, #20
1d074     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d078     14 4E 85 A1 |  if_e	sub	fp, #20
1d07c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d080     3C 00 90 5D |  if_ne	jmp	#LR__2362
1d084     00 26 06 F6 | 	mov	local01, #0
1d088     A7 12 02 FB | 	rdlong	arg01, fp
1d08c     68 FD BE FD | 	call	#_convertstring
1d090     FD 28 02 F6 | 	mov	local02, result1
1d094     0C 4E 05 F1 | 	add	fp, #12
1d098     A7 12 02 FB | 	rdlong	arg01, fp
1d09c     0C 4E 85 F1 | 	sub	fp, #12
1d0a0     54 FD BE FD | 	call	#_convertstring
1d0a4     FD 14 02 F6 | 	mov	arg02, result1
1d0a8     14 13 02 F6 | 	mov	arg01, local02
1d0ac     F0 88 B0 FD | 	call	#__system___string_cmp
1d0b0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d0b4     00 26 26 A6 |  if_e	not	local01, #0
1d0b8     A7 26 62 FC | 	wrlong	local01, fp
1d0bc     04 00 90 FD | 	jmp	#LR__2363
1d0c0                 | LR__2362
1d0c0     A7 00 68 FC | 	wrlong	#0, fp
1d0c4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d0c4                 | LR__2363
1d0c4     08 4E 05 F1 | 	add	fp, #8
1d0c8     A7 38 68 FC | 	wrlong	#28, fp
1d0cc     08 4E 85 F1 | 	sub	fp, #8
1d0d0     A7 12 02 F6 | 	mov	arg01, fp
1d0d4     40 FC BE FD | 	call	#_push
1d0d8     A7 F0 03 F6 | 	mov	ptra, fp
1d0dc     B2 00 A0 FD | 	call	#popregs_
1d0e0                 | _do_eq_ret
1d0e0     2D 00 64 FD | 	ret
1d0e4                 | 
1d0e4                 | ' 
1d0e4                 | ' '--------------------------------- fdiv (/) - float divide
1d0e4                 | ' 
1d0e4                 | ' sub do_fdiv 
1d0e4                 | _do_fdiv
1d0e4     02 4A 05 F6 | 	mov	COUNT_, #2
1d0e8     A8 00 A0 FD | 	call	#pushregs_
1d0ec     18 F0 07 F1 | 	add	ptra, #24
1d0f0     8C FB BE FD | 	call	#_pop
1d0f4     FD 14 02 F6 | 	mov	arg02, result1
1d0f8     FE 12 02 F6 | 	mov	arg01, result2
1d0fc     FF 26 02 F6 | 	mov	local01, result3
1d100     0C 4E 05 F1 | 	add	fp, #12
1d104     A7 14 62 FC | 	wrlong	arg02, fp
1d108     04 4E 05 F1 | 	add	fp, #4
1d10c     A7 12 62 FC | 	wrlong	arg01, fp
1d110     04 4E 05 F1 | 	add	fp, #4
1d114     A7 26 62 FC | 	wrlong	local01, fp
1d118     14 4E 85 F1 | 	sub	fp, #20
1d11c     60 FB BE FD | 	call	#_pop
1d120     A7 FA 61 FC | 	wrlong	result1, fp
1d124     04 4E 05 F1 | 	add	fp, #4
1d128     A7 FC 61 FC | 	wrlong	result2, fp
1d12c     04 4E 05 F1 | 	add	fp, #4
1d130     A7 FE 61 FC | 	wrlong	result3, fp
1d134                 | ' 
1d134                 | ' t2=pop()
1d134                 | ' t1=pop()
1d134                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1d134     08 4E 85 F1 | 	sub	fp, #8
1d138     1F FE 0D F2 | 	cmp	result3, #31 wz
1d13c     14 4E 05 51 |  if_ne	add	fp, #20
1d140     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d144     14 4E 85 51 |  if_ne	sub	fp, #20
1d148     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1d14c     A7 14 68 AC |  if_e	wrlong	#10, fp
1d150     08 4E 05 A1 |  if_e	add	fp, #8
1d154     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d158     08 4E 85 A1 |  if_e	sub	fp, #8
1d15c     38 01 90 AD |  if_e	jmp	#LR__2375
1d160                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1d160     08 4E 05 F1 | 	add	fp, #8
1d164     A7 14 02 FB | 	rdlong	arg02, fp
1d168     08 4E 85 F1 | 	sub	fp, #8
1d16c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d170     28 00 90 5D |  if_ne	jmp	#LR__2370
1d174     08 4E 05 F1 | 	add	fp, #8
1d178     A7 3C 68 FC | 	wrlong	#30, fp
1d17c     08 4E 85 F1 | 	sub	fp, #8
1d180     A7 12 02 FB | 	rdlong	arg01, fp
1d184     09 13 52 F6 | 	abs	arg01, arg01 wc
1d188     1F 28 C6 C9 |  if_b	decod	local02, #31
1d18c     00 28 06 36 |  if_ae	mov	local02, #0
1d190     58 B2 B0 FD | 	call	#__system___float_fromuns
1d194     14 FB 61 F5 | 	xor	result1, local02
1d198     A7 FA 61 FC | 	wrlong	result1, fp
1d19c                 | LR__2370
1d19c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1d19c     08 4E 05 F1 | 	add	fp, #8
1d1a0     A7 14 02 FB | 	rdlong	arg02, fp
1d1a4     08 4E 85 F1 | 	sub	fp, #8
1d1a8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d1ac     18 00 90 5D |  if_ne	jmp	#LR__2371
1d1b0     08 4E 05 F1 | 	add	fp, #8
1d1b4     A7 3C 68 FC | 	wrlong	#30, fp
1d1b8     08 4E 85 F1 | 	sub	fp, #8
1d1bc     A7 12 02 FB | 	rdlong	arg01, fp
1d1c0     28 B2 B0 FD | 	call	#__system___float_fromuns
1d1c4     A7 FA 61 FC | 	wrlong	result1, fp
1d1c8                 | LR__2371
1d1c8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1d1c8     14 4E 05 F1 | 	add	fp, #20
1d1cc     A7 14 02 FB | 	rdlong	arg02, fp
1d1d0     14 4E 85 F1 | 	sub	fp, #20
1d1d4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d1d8     34 00 90 5D |  if_ne	jmp	#LR__2372
1d1dc     14 4E 05 F1 | 	add	fp, #20
1d1e0     A7 3C 68 FC | 	wrlong	#30, fp
1d1e4     08 4E 85 F1 | 	sub	fp, #8
1d1e8     A7 12 02 FB | 	rdlong	arg01, fp
1d1ec     0C 4E 85 F1 | 	sub	fp, #12
1d1f0     09 13 52 F6 | 	abs	arg01, arg01 wc
1d1f4     1F 28 C6 C9 |  if_b	decod	local02, #31
1d1f8     00 28 06 36 |  if_ae	mov	local02, #0
1d1fc     EC B1 B0 FD | 	call	#__system___float_fromuns
1d200     14 FB 61 F5 | 	xor	result1, local02
1d204     0C 4E 05 F1 | 	add	fp, #12
1d208     A7 FA 61 FC | 	wrlong	result1, fp
1d20c     0C 4E 85 F1 | 	sub	fp, #12
1d210                 | LR__2372
1d210                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1d210     14 4E 05 F1 | 	add	fp, #20
1d214     A7 14 02 FB | 	rdlong	arg02, fp
1d218     14 4E 85 F1 | 	sub	fp, #20
1d21c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d220     24 00 90 5D |  if_ne	jmp	#LR__2373
1d224     14 4E 05 F1 | 	add	fp, #20
1d228     A7 3C 68 FC | 	wrlong	#30, fp
1d22c     08 4E 85 F1 | 	sub	fp, #8
1d230     A7 12 02 FB | 	rdlong	arg01, fp
1d234     0C 4E 85 F1 | 	sub	fp, #12
1d238     B0 B1 B0 FD | 	call	#__system___float_fromuns
1d23c     0C 4E 05 F1 | 	add	fp, #12
1d240     A7 FA 61 FC | 	wrlong	result1, fp
1d244     0C 4E 85 F1 | 	sub	fp, #12
1d248                 | LR__2373
1d248                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1d248     08 4E 05 F1 | 	add	fp, #8
1d24c     A7 14 02 FB | 	rdlong	arg02, fp
1d250     08 4E 85 F1 | 	sub	fp, #8
1d254     1E 14 0E F2 | 	cmp	arg02, #30 wz
1d258     14 4E 05 A1 |  if_e	add	fp, #20
1d25c     A7 26 02 AB |  if_e	rdlong	local01, fp
1d260     14 4E 85 A1 |  if_e	sub	fp, #20
1d264     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1d268     1C 00 90 5D |  if_ne	jmp	#LR__2374
1d26c     A7 12 02 FB | 	rdlong	arg01, fp
1d270     0C 4E 05 F1 | 	add	fp, #12
1d274     A7 14 02 FB | 	rdlong	arg02, fp
1d278     0C 4E 85 F1 | 	sub	fp, #12
1d27c     74 B7 B0 FD | 	call	#__system___float_div
1d280     A7 FA 61 FC | 	wrlong	result1, fp
1d284     10 00 90 FD | 	jmp	#LR__2375
1d288                 | LR__2374
1d288     A7 16 68 FC | 	wrlong	#11, fp
1d28c     08 4E 05 F1 | 	add	fp, #8
1d290     A7 FE 69 FC | 	wrlong	#255, fp
1d294     08 4E 85 F1 | 	sub	fp, #8
1d298                 | LR__2375
1d298     A7 12 02 F6 | 	mov	arg01, fp
1d29c     78 FA BE FD | 	call	#_push
1d2a0     A7 F0 03 F6 | 	mov	ptra, fp
1d2a4     B2 00 A0 FD | 	call	#popregs_
1d2a8                 | _do_fdiv_ret
1d2a8     2D 00 64 FD | 	ret
1d2ac                 | 
1d2ac                 | ' 
1d2ac                 | ' '--------------------------------- greater or equal (>=)
1d2ac                 | ' 
1d2ac                 | ' sub do_ge
1d2ac                 | _do_ge
1d2ac     05 4A 05 F6 | 	mov	COUNT_, #5
1d2b0     A8 00 A0 FD | 	call	#pushregs_
1d2b4     18 F0 07 F1 | 	add	ptra, #24
1d2b8     C4 F9 BE FD | 	call	#_pop
1d2bc     FD 26 02 F6 | 	mov	local01, result1
1d2c0     FE 28 02 F6 | 	mov	local02, result2
1d2c4     FF 2A 02 F6 | 	mov	local03, result3
1d2c8     0C 4E 05 F1 | 	add	fp, #12
1d2cc     A7 26 62 FC | 	wrlong	local01, fp
1d2d0     04 4E 05 F1 | 	add	fp, #4
1d2d4     A7 28 62 FC | 	wrlong	local02, fp
1d2d8     04 4E 05 F1 | 	add	fp, #4
1d2dc     A7 2A 62 FC | 	wrlong	local03, fp
1d2e0     14 4E 85 F1 | 	sub	fp, #20
1d2e4     98 F9 BE FD | 	call	#_pop
1d2e8     FF 2A 02 F6 | 	mov	local03, result3
1d2ec     A7 FA 61 FC | 	wrlong	result1, fp
1d2f0     04 4E 05 F1 | 	add	fp, #4
1d2f4     A7 FC 61 FC | 	wrlong	result2, fp
1d2f8     04 4E 05 F1 | 	add	fp, #4
1d2fc     A7 2A 62 FC | 	wrlong	local03, fp
1d300                 | ' 
1d300                 | ' t2=pop()
1d300                 | ' t1=pop()
1d300                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1d300     08 4E 85 F1 | 	sub	fp, #8
1d304     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d308     14 4E 05 A1 |  if_e	add	fp, #20
1d30c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d310     14 4E 85 A1 |  if_e	sub	fp, #20
1d314     16 2B 02 A6 |  if_e	mov	local03, local04
1d318     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d31c     28 00 90 5D |  if_ne	jmp	#LR__2380
1d320     00 26 06 F6 | 	mov	local01, #0
1d324     A7 12 02 FB | 	rdlong	arg01, fp
1d328     0C 4E 05 F1 | 	add	fp, #12
1d32c     A7 14 02 FB | 	rdlong	arg02, fp
1d330     0C 4E 85 F1 | 	sub	fp, #12
1d334     68 86 B0 FD | 	call	#__system___string_cmp
1d338     00 FA 55 F2 | 	cmps	result1, #0 wc
1d33c     00 26 26 36 |  if_ae	not	local01, #0
1d340     A7 26 62 FC | 	wrlong	local01, fp
1d344     24 04 90 FD | 	jmp	#LR__2393
1d348                 | LR__2380
1d348                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1d348     08 4E 05 F1 | 	add	fp, #8
1d34c     A7 26 02 FB | 	rdlong	local01, fp
1d350     08 4E 85 F1 | 	sub	fp, #8
1d354     1E 26 0E F2 | 	cmp	local01, #30 wz
1d358     14 4E 05 A1 |  if_e	add	fp, #20
1d35c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d360     14 4E 85 A1 |  if_e	sub	fp, #20
1d364     16 2B 02 A6 |  if_e	mov	local03, local04
1d368     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d36c     2C 00 90 5D |  if_ne	jmp	#LR__2381
1d370     00 26 06 F6 | 	mov	local01, #0
1d374     A7 12 02 FB | 	rdlong	arg01, fp
1d378     0C 4E 05 F1 | 	add	fp, #12
1d37c     A7 14 02 FB | 	rdlong	arg02, fp
1d380     0C 4E 85 F1 | 	sub	fp, #12
1d384     01 16 66 F6 | 	neg	arg03, #1
1d388     98 B8 B0 FD | 	call	#__system___float_cmp
1d38c     00 FA 55 F2 | 	cmps	result1, #0 wc
1d390     00 26 26 36 |  if_ae	not	local01, #0
1d394     A7 26 62 FC | 	wrlong	local01, fp
1d398     D0 03 90 FD | 	jmp	#LR__2393
1d39c                 | LR__2381
1d39c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1d39c     08 4E 05 F1 | 	add	fp, #8
1d3a0     A7 26 02 FB | 	rdlong	local01, fp
1d3a4     08 4E 85 F1 | 	sub	fp, #8
1d3a8     1E 26 0E F2 | 	cmp	local01, #30 wz
1d3ac     14 4E 05 A1 |  if_e	add	fp, #20
1d3b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d3b4     14 4E 85 A1 |  if_e	sub	fp, #20
1d3b8     16 2B 02 A6 |  if_e	mov	local03, local04
1d3bc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d3c0     48 00 90 5D |  if_ne	jmp	#LR__2382
1d3c4     00 26 06 F6 | 	mov	local01, #0
1d3c8     A7 28 02 FB | 	rdlong	local02, fp
1d3cc     0C 4E 05 F1 | 	add	fp, #12
1d3d0     A7 12 02 FB | 	rdlong	arg01, fp
1d3d4     0C 4E 85 F1 | 	sub	fp, #12
1d3d8     09 13 52 F6 | 	abs	arg01, arg01 wc
1d3dc     1F 2E C6 C9 |  if_b	decod	local05, #31
1d3e0     00 2E 06 36 |  if_ae	mov	local05, #0
1d3e4     04 B0 B0 FD | 	call	#__system___float_fromuns
1d3e8     17 FB 61 F5 | 	xor	result1, local05
1d3ec     FD 14 02 F6 | 	mov	arg02, result1
1d3f0     14 13 02 F6 | 	mov	arg01, local02
1d3f4     01 16 66 F6 | 	neg	arg03, #1
1d3f8     28 B8 B0 FD | 	call	#__system___float_cmp
1d3fc     00 FA 55 F2 | 	cmps	result1, #0 wc
1d400     00 26 26 36 |  if_ae	not	local01, #0
1d404     A7 26 62 FC | 	wrlong	local01, fp
1d408     60 03 90 FD | 	jmp	#LR__2393
1d40c                 | LR__2382
1d40c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1d40c     08 4E 05 F1 | 	add	fp, #8
1d410     A7 26 02 FB | 	rdlong	local01, fp
1d414     08 4E 85 F1 | 	sub	fp, #8
1d418     1E 26 0E F2 | 	cmp	local01, #30 wz
1d41c     14 4E 05 A1 |  if_e	add	fp, #20
1d420     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d424     14 4E 85 A1 |  if_e	sub	fp, #20
1d428     16 2B 02 A6 |  if_e	mov	local03, local04
1d42c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d430     38 00 90 5D |  if_ne	jmp	#LR__2383
1d434     00 26 06 F6 | 	mov	local01, #0
1d438     A7 28 02 FB | 	rdlong	local02, fp
1d43c     0C 4E 05 F1 | 	add	fp, #12
1d440     A7 12 02 FB | 	rdlong	arg01, fp
1d444     0C 4E 85 F1 | 	sub	fp, #12
1d448     A0 AF B0 FD | 	call	#__system___float_fromuns
1d44c     FD 14 02 F6 | 	mov	arg02, result1
1d450     14 13 02 F6 | 	mov	arg01, local02
1d454     01 16 66 F6 | 	neg	arg03, #1
1d458     C8 B7 B0 FD | 	call	#__system___float_cmp
1d45c     00 FA 55 F2 | 	cmps	result1, #0 wc
1d460     00 26 26 36 |  if_ae	not	local01, #0
1d464     A7 26 62 FC | 	wrlong	local01, fp
1d468     00 03 90 FD | 	jmp	#LR__2393
1d46c                 | LR__2383
1d46c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1d46c     08 4E 05 F1 | 	add	fp, #8
1d470     A7 26 02 FB | 	rdlong	local01, fp
1d474     08 4E 85 F1 | 	sub	fp, #8
1d478     1C 26 0E F2 | 	cmp	local01, #28 wz
1d47c     14 4E 05 A1 |  if_e	add	fp, #20
1d480     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d484     14 4E 85 A1 |  if_e	sub	fp, #20
1d488     16 2B 02 A6 |  if_e	mov	local03, local04
1d48c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d490     44 00 90 5D |  if_ne	jmp	#LR__2384
1d494     00 26 06 F6 | 	mov	local01, #0
1d498     A7 12 02 FB | 	rdlong	arg01, fp
1d49c     09 13 52 F6 | 	abs	arg01, arg01 wc
1d4a0     1F 2E C6 C9 |  if_b	decod	local05, #31
1d4a4     00 2E 06 36 |  if_ae	mov	local05, #0
1d4a8     40 AF B0 FD | 	call	#__system___float_fromuns
1d4ac     17 FB 61 F5 | 	xor	result1, local05
1d4b0     FD 12 02 F6 | 	mov	arg01, result1
1d4b4     0C 4E 05 F1 | 	add	fp, #12
1d4b8     A7 14 02 FB | 	rdlong	arg02, fp
1d4bc     0C 4E 85 F1 | 	sub	fp, #12
1d4c0     01 16 66 F6 | 	neg	arg03, #1
1d4c4     5C B7 B0 FD | 	call	#__system___float_cmp
1d4c8     00 FA 55 F2 | 	cmps	result1, #0 wc
1d4cc     00 26 26 36 |  if_ae	not	local01, #0
1d4d0     A7 26 62 FC | 	wrlong	local01, fp
1d4d4     94 02 90 FD | 	jmp	#LR__2393
1d4d8                 | LR__2384
1d4d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1d4d8     08 4E 05 F1 | 	add	fp, #8
1d4dc     A7 26 02 FB | 	rdlong	local01, fp
1d4e0     08 4E 85 F1 | 	sub	fp, #8
1d4e4     1C 26 0E F2 | 	cmp	local01, #28 wz
1d4e8     14 4E 05 A1 |  if_e	add	fp, #20
1d4ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d4f0     14 4E 85 A1 |  if_e	sub	fp, #20
1d4f4     16 2B 02 A6 |  if_e	mov	local03, local04
1d4f8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d4fc     24 00 90 5D |  if_ne	jmp	#LR__2385
1d500     00 26 06 F6 | 	mov	local01, #0
1d504     A7 28 02 FB | 	rdlong	local02, fp
1d508     0C 4E 05 F1 | 	add	fp, #12
1d50c     A7 2A 02 FB | 	rdlong	local03, fp
1d510     0C 4E 85 F1 | 	sub	fp, #12
1d514     15 29 52 F2 | 	cmps	local02, local03 wc
1d518     01 26 66 36 |  if_ae	neg	local01, #1
1d51c     A7 26 62 FC | 	wrlong	local01, fp
1d520     48 02 90 FD | 	jmp	#LR__2393
1d524                 | LR__2385
1d524                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1d524     08 4E 05 F1 | 	add	fp, #8
1d528     A7 26 02 FB | 	rdlong	local01, fp
1d52c     08 4E 85 F1 | 	sub	fp, #8
1d530     1C 26 0E F2 | 	cmp	local01, #28 wz
1d534     14 4E 05 A1 |  if_e	add	fp, #20
1d538     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d53c     14 4E 85 A1 |  if_e	sub	fp, #20
1d540     16 2B 02 A6 |  if_e	mov	local03, local04
1d544     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d548     24 00 90 5D |  if_ne	jmp	#LR__2386
1d54c     00 26 06 F6 | 	mov	local01, #0
1d550     A7 28 02 FB | 	rdlong	local02, fp
1d554     0C 4E 05 F1 | 	add	fp, #12
1d558     A7 2A 02 FB | 	rdlong	local03, fp
1d55c     0C 4E 85 F1 | 	sub	fp, #12
1d560     15 29 52 F2 | 	cmps	local02, local03 wc
1d564     01 26 66 36 |  if_ae	neg	local01, #1
1d568     A7 26 62 FC | 	wrlong	local01, fp
1d56c     FC 01 90 FD | 	jmp	#LR__2393
1d570                 | LR__2386
1d570                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1d570     08 4E 05 F1 | 	add	fp, #8
1d574     A7 26 02 FB | 	rdlong	local01, fp
1d578     08 4E 85 F1 | 	sub	fp, #8
1d57c     1D 26 0E F2 | 	cmp	local01, #29 wz
1d580     14 4E 05 A1 |  if_e	add	fp, #20
1d584     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d588     14 4E 85 A1 |  if_e	sub	fp, #20
1d58c     16 2B 02 A6 |  if_e	mov	local03, local04
1d590     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d594     34 00 90 5D |  if_ne	jmp	#LR__2387
1d598     00 26 06 F6 | 	mov	local01, #0
1d59c     A7 12 02 FB | 	rdlong	arg01, fp
1d5a0     48 AE B0 FD | 	call	#__system___float_fromuns
1d5a4     FD 12 02 F6 | 	mov	arg01, result1
1d5a8     0C 4E 05 F1 | 	add	fp, #12
1d5ac     A7 14 02 FB | 	rdlong	arg02, fp
1d5b0     0C 4E 85 F1 | 	sub	fp, #12
1d5b4     01 16 66 F6 | 	neg	arg03, #1
1d5b8     68 B6 B0 FD | 	call	#__system___float_cmp
1d5bc     00 FA 55 F2 | 	cmps	result1, #0 wc
1d5c0     00 26 26 36 |  if_ae	not	local01, #0
1d5c4     A7 26 62 FC | 	wrlong	local01, fp
1d5c8     A0 01 90 FD | 	jmp	#LR__2393
1d5cc                 | LR__2387
1d5cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1d5cc     08 4E 05 F1 | 	add	fp, #8
1d5d0     A7 26 02 FB | 	rdlong	local01, fp
1d5d4     08 4E 85 F1 | 	sub	fp, #8
1d5d8     1D 26 0E F2 | 	cmp	local01, #29 wz
1d5dc     14 4E 05 A1 |  if_e	add	fp, #20
1d5e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d5e4     14 4E 85 A1 |  if_e	sub	fp, #20
1d5e8     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1d5ec     24 00 90 5D |  if_ne	jmp	#LR__2388
1d5f0     00 26 06 F6 | 	mov	local01, #0
1d5f4     A7 28 02 FB | 	rdlong	local02, fp
1d5f8     0C 4E 05 F1 | 	add	fp, #12
1d5fc     A7 2A 02 FB | 	rdlong	local03, fp
1d600     0C 4E 85 F1 | 	sub	fp, #12
1d604     15 29 52 F2 | 	cmps	local02, local03 wc
1d608     01 26 66 36 |  if_ae	neg	local01, #1
1d60c     A7 26 62 FC | 	wrlong	local01, fp
1d610     58 01 90 FD | 	jmp	#LR__2393
1d614                 | LR__2388
1d614                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1d614     08 4E 05 F1 | 	add	fp, #8
1d618     A7 26 02 FB | 	rdlong	local01, fp
1d61c     08 4E 85 F1 | 	sub	fp, #8
1d620     1D 26 0E F2 | 	cmp	local01, #29 wz
1d624     14 4E 05 A1 |  if_e	add	fp, #20
1d628     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d62c     14 4E 85 A1 |  if_e	sub	fp, #20
1d630     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d634     24 00 90 5D |  if_ne	jmp	#LR__2389
1d638     00 26 06 F6 | 	mov	local01, #0
1d63c     A7 28 02 FB | 	rdlong	local02, fp
1d640     0C 4E 05 F1 | 	add	fp, #12
1d644     A7 2A 02 FB | 	rdlong	local03, fp
1d648     0C 4E 85 F1 | 	sub	fp, #12
1d64c     15 29 12 F2 | 	cmp	local02, local03 wc
1d650     01 26 66 36 |  if_ae	neg	local01, #1
1d654     A7 26 62 FC | 	wrlong	local01, fp
1d658     10 01 90 FD | 	jmp	#LR__2393
1d65c                 | LR__2389
1d65c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1d65c     08 4E 05 F1 | 	add	fp, #8
1d660     A7 26 02 FB | 	rdlong	local01, fp
1d664     08 4E 85 F1 | 	sub	fp, #8
1d668     2B 26 0E F2 | 	cmp	local01, #43 wz
1d66c     14 4E 05 A1 |  if_e	add	fp, #20
1d670     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d674     14 4E 85 A1 |  if_e	sub	fp, #20
1d678     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d67c     30 00 90 5D |  if_ne	jmp	#LR__2390
1d680     00 26 06 F6 | 	mov	local01, #0
1d684     A7 12 02 FB | 	rdlong	arg01, fp
1d688     6C F7 BE FD | 	call	#_convertstring
1d68c     FD 12 02 F6 | 	mov	arg01, result1
1d690     0C 4E 05 F1 | 	add	fp, #12
1d694     A7 14 02 FB | 	rdlong	arg02, fp
1d698     0C 4E 85 F1 | 	sub	fp, #12
1d69c     00 83 B0 FD | 	call	#__system___string_cmp
1d6a0     00 FA 55 F2 | 	cmps	result1, #0 wc
1d6a4     00 26 26 36 |  if_ae	not	local01, #0
1d6a8     A7 26 62 FC | 	wrlong	local01, fp
1d6ac     BC 00 90 FD | 	jmp	#LR__2393
1d6b0                 | LR__2390
1d6b0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1d6b0     08 4E 05 F1 | 	add	fp, #8
1d6b4     A7 26 02 FB | 	rdlong	local01, fp
1d6b8     08 4E 85 F1 | 	sub	fp, #8
1d6bc     1F 26 0E F2 | 	cmp	local01, #31 wz
1d6c0     14 4E 05 A1 |  if_e	add	fp, #20
1d6c4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d6c8     14 4E 85 A1 |  if_e	sub	fp, #20
1d6cc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d6d0     34 00 90 5D |  if_ne	jmp	#LR__2391
1d6d4     00 26 06 F6 | 	mov	local01, #0
1d6d8     A7 28 02 FB | 	rdlong	local02, fp
1d6dc     0C 4E 05 F1 | 	add	fp, #12
1d6e0     A7 12 02 FB | 	rdlong	arg01, fp
1d6e4     0C 4E 85 F1 | 	sub	fp, #12
1d6e8     0C F7 BE FD | 	call	#_convertstring
1d6ec     FD 14 02 F6 | 	mov	arg02, result1
1d6f0     14 13 02 F6 | 	mov	arg01, local02
1d6f4     A8 82 B0 FD | 	call	#__system___string_cmp
1d6f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1d6fc     00 26 26 36 |  if_ae	not	local01, #0
1d700     A7 26 62 FC | 	wrlong	local01, fp
1d704     64 00 90 FD | 	jmp	#LR__2393
1d708                 | LR__2391
1d708                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1d708     08 4E 05 F1 | 	add	fp, #8
1d70c     A7 26 02 FB | 	rdlong	local01, fp
1d710     08 4E 85 F1 | 	sub	fp, #8
1d714     2B 26 0E F2 | 	cmp	local01, #43 wz
1d718     14 4E 05 A1 |  if_e	add	fp, #20
1d71c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d720     14 4E 85 A1 |  if_e	sub	fp, #20
1d724     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d728     3C 00 90 5D |  if_ne	jmp	#LR__2392
1d72c     00 26 06 F6 | 	mov	local01, #0
1d730     A7 12 02 FB | 	rdlong	arg01, fp
1d734     C0 F6 BE FD | 	call	#_convertstring
1d738     FD 28 02 F6 | 	mov	local02, result1
1d73c     0C 4E 05 F1 | 	add	fp, #12
1d740     A7 12 02 FB | 	rdlong	arg01, fp
1d744     0C 4E 85 F1 | 	sub	fp, #12
1d748     AC F6 BE FD | 	call	#_convertstring
1d74c     FD 14 02 F6 | 	mov	arg02, result1
1d750     14 13 02 F6 | 	mov	arg01, local02
1d754     48 82 B0 FD | 	call	#__system___string_cmp
1d758     00 FA 55 F2 | 	cmps	result1, #0 wc
1d75c     00 26 26 36 |  if_ae	not	local01, #0
1d760     A7 26 62 FC | 	wrlong	local01, fp
1d764     04 00 90 FD | 	jmp	#LR__2393
1d768                 | LR__2392
1d768     A7 00 68 FC | 	wrlong	#0, fp
1d76c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d76c                 | LR__2393
1d76c     08 4E 05 F1 | 	add	fp, #8
1d770     A7 38 68 FC | 	wrlong	#28, fp
1d774     08 4E 85 F1 | 	sub	fp, #8
1d778                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d778     A7 26 0A FB | 	rdlong	local01, fp wz
1d77c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1d780     A7 12 02 F6 | 	mov	arg01, fp
1d784     90 F5 BE FD | 	call	#_push
1d788     A7 F0 03 F6 | 	mov	ptra, fp
1d78c     B2 00 A0 FD | 	call	#popregs_
1d790                 | _do_ge_ret
1d790     2D 00 64 FD | 	ret
1d794                 | 
1d794                 | ' 
1d794                 | ' '--------------------------------- greater than (>)
1d794                 | ' 
1d794                 | ' sub do_gt
1d794                 | _do_gt
1d794     05 4A 05 F6 | 	mov	COUNT_, #5
1d798     A8 00 A0 FD | 	call	#pushregs_
1d79c     18 F0 07 F1 | 	add	ptra, #24
1d7a0     DC F4 BE FD | 	call	#_pop
1d7a4     FD 26 02 F6 | 	mov	local01, result1
1d7a8     FE 28 02 F6 | 	mov	local02, result2
1d7ac     FF 2A 02 F6 | 	mov	local03, result3
1d7b0     0C 4E 05 F1 | 	add	fp, #12
1d7b4     A7 26 62 FC | 	wrlong	local01, fp
1d7b8     04 4E 05 F1 | 	add	fp, #4
1d7bc     A7 28 62 FC | 	wrlong	local02, fp
1d7c0     04 4E 05 F1 | 	add	fp, #4
1d7c4     A7 2A 62 FC | 	wrlong	local03, fp
1d7c8     14 4E 85 F1 | 	sub	fp, #20
1d7cc     B0 F4 BE FD | 	call	#_pop
1d7d0     FF 2A 02 F6 | 	mov	local03, result3
1d7d4     A7 FA 61 FC | 	wrlong	result1, fp
1d7d8     04 4E 05 F1 | 	add	fp, #4
1d7dc     A7 FC 61 FC | 	wrlong	result2, fp
1d7e0     04 4E 05 F1 | 	add	fp, #4
1d7e4     A7 2A 62 FC | 	wrlong	local03, fp
1d7e8                 | ' 
1d7e8                 | ' t2=pop()
1d7e8                 | ' t1=pop()
1d7e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1d7e8     08 4E 85 F1 | 	sub	fp, #8
1d7ec     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d7f0     14 4E 05 A1 |  if_e	add	fp, #20
1d7f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d7f8     14 4E 85 A1 |  if_e	sub	fp, #20
1d7fc     16 2B 02 A6 |  if_e	mov	local03, local04
1d800     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d804     28 00 90 5D |  if_ne	jmp	#LR__2400
1d808     00 26 06 F6 | 	mov	local01, #0
1d80c     A7 12 02 FB | 	rdlong	arg01, fp
1d810     0C 4E 05 F1 | 	add	fp, #12
1d814     A7 14 02 FB | 	rdlong	arg02, fp
1d818     0C 4E 85 F1 | 	sub	fp, #12
1d81c     80 81 B0 FD | 	call	#__system___string_cmp
1d820     01 FA 55 F2 | 	cmps	result1, #1 wc
1d824     00 26 26 36 |  if_ae	not	local01, #0
1d828     A7 26 62 FC | 	wrlong	local01, fp
1d82c     20 04 90 FD | 	jmp	#LR__2413
1d830                 | LR__2400
1d830                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1d830     08 4E 05 F1 | 	add	fp, #8
1d834     A7 26 02 FB | 	rdlong	local01, fp
1d838     08 4E 85 F1 | 	sub	fp, #8
1d83c     1E 26 0E F2 | 	cmp	local01, #30 wz
1d840     14 4E 05 A1 |  if_e	add	fp, #20
1d844     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d848     14 4E 85 A1 |  if_e	sub	fp, #20
1d84c     16 2B 02 A6 |  if_e	mov	local03, local04
1d850     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d854     2C 00 90 5D |  if_ne	jmp	#LR__2401
1d858     00 26 06 F6 | 	mov	local01, #0
1d85c     A7 12 02 FB | 	rdlong	arg01, fp
1d860     0C 4E 05 F1 | 	add	fp, #12
1d864     A7 14 02 FB | 	rdlong	arg02, fp
1d868     0C 4E 85 F1 | 	sub	fp, #12
1d86c     01 16 66 F6 | 	neg	arg03, #1
1d870     B0 B3 B0 FD | 	call	#__system___float_cmp
1d874     01 FA 55 F2 | 	cmps	result1, #1 wc
1d878     00 26 26 36 |  if_ae	not	local01, #0
1d87c     A7 26 62 FC | 	wrlong	local01, fp
1d880     CC 03 90 FD | 	jmp	#LR__2413
1d884                 | LR__2401
1d884                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1d884     08 4E 05 F1 | 	add	fp, #8
1d888     A7 26 02 FB | 	rdlong	local01, fp
1d88c     08 4E 85 F1 | 	sub	fp, #8
1d890     1E 26 0E F2 | 	cmp	local01, #30 wz
1d894     14 4E 05 A1 |  if_e	add	fp, #20
1d898     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d89c     14 4E 85 A1 |  if_e	sub	fp, #20
1d8a0     16 2B 02 A6 |  if_e	mov	local03, local04
1d8a4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d8a8     48 00 90 5D |  if_ne	jmp	#LR__2402
1d8ac     00 26 06 F6 | 	mov	local01, #0
1d8b0     A7 28 02 FB | 	rdlong	local02, fp
1d8b4     0C 4E 05 F1 | 	add	fp, #12
1d8b8     A7 12 02 FB | 	rdlong	arg01, fp
1d8bc     0C 4E 85 F1 | 	sub	fp, #12
1d8c0     09 13 52 F6 | 	abs	arg01, arg01 wc
1d8c4     1F 2E C6 C9 |  if_b	decod	local05, #31
1d8c8     00 2E 06 36 |  if_ae	mov	local05, #0
1d8cc     1C AB B0 FD | 	call	#__system___float_fromuns
1d8d0     17 FB 61 F5 | 	xor	result1, local05
1d8d4     FD 14 02 F6 | 	mov	arg02, result1
1d8d8     14 13 02 F6 | 	mov	arg01, local02
1d8dc     01 16 66 F6 | 	neg	arg03, #1
1d8e0     40 B3 B0 FD | 	call	#__system___float_cmp
1d8e4     01 FA 55 F2 | 	cmps	result1, #1 wc
1d8e8     00 26 26 36 |  if_ae	not	local01, #0
1d8ec     A7 26 62 FC | 	wrlong	local01, fp
1d8f0     5C 03 90 FD | 	jmp	#LR__2413
1d8f4                 | LR__2402
1d8f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1d8f4     08 4E 05 F1 | 	add	fp, #8
1d8f8     A7 26 02 FB | 	rdlong	local01, fp
1d8fc     08 4E 85 F1 | 	sub	fp, #8
1d900     1E 26 0E F2 | 	cmp	local01, #30 wz
1d904     14 4E 05 A1 |  if_e	add	fp, #20
1d908     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d90c     14 4E 85 A1 |  if_e	sub	fp, #20
1d910     16 2B 02 A6 |  if_e	mov	local03, local04
1d914     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d918     38 00 90 5D |  if_ne	jmp	#LR__2403
1d91c     00 26 06 F6 | 	mov	local01, #0
1d920     A7 28 02 FB | 	rdlong	local02, fp
1d924     0C 4E 05 F1 | 	add	fp, #12
1d928     A7 12 02 FB | 	rdlong	arg01, fp
1d92c     0C 4E 85 F1 | 	sub	fp, #12
1d930     B8 AA B0 FD | 	call	#__system___float_fromuns
1d934     FD 14 02 F6 | 	mov	arg02, result1
1d938     14 13 02 F6 | 	mov	arg01, local02
1d93c     01 16 66 F6 | 	neg	arg03, #1
1d940     E0 B2 B0 FD | 	call	#__system___float_cmp
1d944     01 FA 55 F2 | 	cmps	result1, #1 wc
1d948     00 26 26 36 |  if_ae	not	local01, #0
1d94c     A7 26 62 FC | 	wrlong	local01, fp
1d950     FC 02 90 FD | 	jmp	#LR__2413
1d954                 | LR__2403
1d954                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1d954     08 4E 05 F1 | 	add	fp, #8
1d958     A7 26 02 FB | 	rdlong	local01, fp
1d95c     08 4E 85 F1 | 	sub	fp, #8
1d960     1C 26 0E F2 | 	cmp	local01, #28 wz
1d964     14 4E 05 A1 |  if_e	add	fp, #20
1d968     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d96c     14 4E 85 A1 |  if_e	sub	fp, #20
1d970     16 2B 02 A6 |  if_e	mov	local03, local04
1d974     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d978     44 00 90 5D |  if_ne	jmp	#LR__2404
1d97c     00 26 06 F6 | 	mov	local01, #0
1d980     A7 12 02 FB | 	rdlong	arg01, fp
1d984     09 13 52 F6 | 	abs	arg01, arg01 wc
1d988     1F 2E C6 C9 |  if_b	decod	local05, #31
1d98c     00 2E 06 36 |  if_ae	mov	local05, #0
1d990     58 AA B0 FD | 	call	#__system___float_fromuns
1d994     17 FB 61 F5 | 	xor	result1, local05
1d998     FD 12 02 F6 | 	mov	arg01, result1
1d99c     0C 4E 05 F1 | 	add	fp, #12
1d9a0     A7 14 02 FB | 	rdlong	arg02, fp
1d9a4     0C 4E 85 F1 | 	sub	fp, #12
1d9a8     01 16 66 F6 | 	neg	arg03, #1
1d9ac     74 B2 B0 FD | 	call	#__system___float_cmp
1d9b0     01 FA 55 F2 | 	cmps	result1, #1 wc
1d9b4     00 26 26 36 |  if_ae	not	local01, #0
1d9b8     A7 26 62 FC | 	wrlong	local01, fp
1d9bc     90 02 90 FD | 	jmp	#LR__2413
1d9c0                 | LR__2404
1d9c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1d9c0     08 4E 05 F1 | 	add	fp, #8
1d9c4     A7 26 02 FB | 	rdlong	local01, fp
1d9c8     08 4E 85 F1 | 	sub	fp, #8
1d9cc     1C 26 0E F2 | 	cmp	local01, #28 wz
1d9d0     14 4E 05 A1 |  if_e	add	fp, #20
1d9d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d9d8     14 4E 85 A1 |  if_e	sub	fp, #20
1d9dc     16 2B 02 A6 |  if_e	mov	local03, local04
1d9e0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d9e4     24 00 90 5D |  if_ne	jmp	#LR__2405
1d9e8     00 26 06 F6 | 	mov	local01, #0
1d9ec     A7 28 02 FB | 	rdlong	local02, fp
1d9f0     0C 4E 05 F1 | 	add	fp, #12
1d9f4     A7 2A 02 FB | 	rdlong	local03, fp
1d9f8     0C 4E 85 F1 | 	sub	fp, #12
1d9fc     15 29 5A F2 | 	cmps	local02, local03 wcz
1da00     01 26 66 16 |  if_a	neg	local01, #1
1da04     A7 26 62 FC | 	wrlong	local01, fp
1da08     44 02 90 FD | 	jmp	#LR__2413
1da0c                 | LR__2405
1da0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1da0c     08 4E 05 F1 | 	add	fp, #8
1da10     A7 26 02 FB | 	rdlong	local01, fp
1da14     08 4E 85 F1 | 	sub	fp, #8
1da18     1C 26 0E F2 | 	cmp	local01, #28 wz
1da1c     14 4E 05 A1 |  if_e	add	fp, #20
1da20     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da24     14 4E 85 A1 |  if_e	sub	fp, #20
1da28     16 2B 02 A6 |  if_e	mov	local03, local04
1da2c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1da30     24 00 90 5D |  if_ne	jmp	#LR__2406
1da34     00 26 06 F6 | 	mov	local01, #0
1da38     A7 28 02 FB | 	rdlong	local02, fp
1da3c     0C 4E 05 F1 | 	add	fp, #12
1da40     A7 2A 02 FB | 	rdlong	local03, fp
1da44     0C 4E 85 F1 | 	sub	fp, #12
1da48     15 29 5A F2 | 	cmps	local02, local03 wcz
1da4c     01 26 66 16 |  if_a	neg	local01, #1
1da50     A7 26 62 FC | 	wrlong	local01, fp
1da54     F8 01 90 FD | 	jmp	#LR__2413
1da58                 | LR__2406
1da58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1da58     08 4E 05 F1 | 	add	fp, #8
1da5c     A7 26 02 FB | 	rdlong	local01, fp
1da60     08 4E 85 F1 | 	sub	fp, #8
1da64     1D 26 0E F2 | 	cmp	local01, #29 wz
1da68     14 4E 05 A1 |  if_e	add	fp, #20
1da6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da70     14 4E 85 A1 |  if_e	sub	fp, #20
1da74     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1da78     34 00 90 5D |  if_ne	jmp	#LR__2407
1da7c     00 26 06 F6 | 	mov	local01, #0
1da80     A7 12 02 FB | 	rdlong	arg01, fp
1da84     64 A9 B0 FD | 	call	#__system___float_fromuns
1da88     FD 12 02 F6 | 	mov	arg01, result1
1da8c     0C 4E 05 F1 | 	add	fp, #12
1da90     A7 14 02 FB | 	rdlong	arg02, fp
1da94     0C 4E 85 F1 | 	sub	fp, #12
1da98     01 16 66 F6 | 	neg	arg03, #1
1da9c     84 B1 B0 FD | 	call	#__system___float_cmp
1daa0     01 FA 55 F2 | 	cmps	result1, #1 wc
1daa4     00 26 26 36 |  if_ae	not	local01, #0
1daa8     A7 26 62 FC | 	wrlong	local01, fp
1daac     A0 01 90 FD | 	jmp	#LR__2413
1dab0                 | LR__2407
1dab0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1dab0     08 4E 05 F1 | 	add	fp, #8
1dab4     A7 26 02 FB | 	rdlong	local01, fp
1dab8     08 4E 85 F1 | 	sub	fp, #8
1dabc     1D 26 0E F2 | 	cmp	local01, #29 wz
1dac0     14 4E 05 A1 |  if_e	add	fp, #20
1dac4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dac8     14 4E 85 A1 |  if_e	sub	fp, #20
1dacc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dad0     24 00 90 5D |  if_ne	jmp	#LR__2408
1dad4     00 26 06 F6 | 	mov	local01, #0
1dad8     A7 28 02 FB | 	rdlong	local02, fp
1dadc     0C 4E 05 F1 | 	add	fp, #12
1dae0     A7 2A 02 FB | 	rdlong	local03, fp
1dae4     0C 4E 85 F1 | 	sub	fp, #12
1dae8     15 29 5A F2 | 	cmps	local02, local03 wcz
1daec     01 26 66 16 |  if_a	neg	local01, #1
1daf0     A7 26 62 FC | 	wrlong	local01, fp
1daf4     58 01 90 FD | 	jmp	#LR__2413
1daf8                 | LR__2408
1daf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1daf8     08 4E 05 F1 | 	add	fp, #8
1dafc     A7 26 02 FB | 	rdlong	local01, fp
1db00     08 4E 85 F1 | 	sub	fp, #8
1db04     1D 26 0E F2 | 	cmp	local01, #29 wz
1db08     14 4E 05 A1 |  if_e	add	fp, #20
1db0c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1db10     14 4E 85 A1 |  if_e	sub	fp, #20
1db14     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1db18     24 00 90 5D |  if_ne	jmp	#LR__2409
1db1c     00 26 06 F6 | 	mov	local01, #0
1db20     A7 28 02 FB | 	rdlong	local02, fp
1db24     0C 4E 05 F1 | 	add	fp, #12
1db28     A7 2A 02 FB | 	rdlong	local03, fp
1db2c     0C 4E 85 F1 | 	sub	fp, #12
1db30     15 29 1A F2 | 	cmp	local02, local03 wcz
1db34     01 26 66 16 |  if_a	neg	local01, #1
1db38     A7 26 62 FC | 	wrlong	local01, fp
1db3c     10 01 90 FD | 	jmp	#LR__2413
1db40                 | LR__2409
1db40                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1db40     08 4E 05 F1 | 	add	fp, #8
1db44     A7 26 02 FB | 	rdlong	local01, fp
1db48     08 4E 85 F1 | 	sub	fp, #8
1db4c     2B 26 0E F2 | 	cmp	local01, #43 wz
1db50     14 4E 05 A1 |  if_e	add	fp, #20
1db54     A7 2A 02 AB |  if_e	rdlong	local03, fp
1db58     14 4E 85 A1 |  if_e	sub	fp, #20
1db5c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1db60     30 00 90 5D |  if_ne	jmp	#LR__2410
1db64     00 26 06 F6 | 	mov	local01, #0
1db68     A7 12 02 FB | 	rdlong	arg01, fp
1db6c     88 F2 BE FD | 	call	#_convertstring
1db70     FD 12 02 F6 | 	mov	arg01, result1
1db74     0C 4E 05 F1 | 	add	fp, #12
1db78     A7 14 02 FB | 	rdlong	arg02, fp
1db7c     0C 4E 85 F1 | 	sub	fp, #12
1db80     1C 7E B0 FD | 	call	#__system___string_cmp
1db84     01 FA 55 F2 | 	cmps	result1, #1 wc
1db88     00 26 26 36 |  if_ae	not	local01, #0
1db8c     A7 26 62 FC | 	wrlong	local01, fp
1db90     BC 00 90 FD | 	jmp	#LR__2413
1db94                 | LR__2410
1db94                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1db94     08 4E 05 F1 | 	add	fp, #8
1db98     A7 26 02 FB | 	rdlong	local01, fp
1db9c     08 4E 85 F1 | 	sub	fp, #8
1dba0     1F 26 0E F2 | 	cmp	local01, #31 wz
1dba4     14 4E 05 A1 |  if_e	add	fp, #20
1dba8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dbac     14 4E 85 A1 |  if_e	sub	fp, #20
1dbb0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dbb4     34 00 90 5D |  if_ne	jmp	#LR__2411
1dbb8     00 26 06 F6 | 	mov	local01, #0
1dbbc     A7 28 02 FB | 	rdlong	local02, fp
1dbc0     0C 4E 05 F1 | 	add	fp, #12
1dbc4     A7 12 02 FB | 	rdlong	arg01, fp
1dbc8     0C 4E 85 F1 | 	sub	fp, #12
1dbcc     28 F2 BE FD | 	call	#_convertstring
1dbd0     FD 14 02 F6 | 	mov	arg02, result1
1dbd4     14 13 02 F6 | 	mov	arg01, local02
1dbd8     C4 7D B0 FD | 	call	#__system___string_cmp
1dbdc     01 FA 55 F2 | 	cmps	result1, #1 wc
1dbe0     00 26 26 36 |  if_ae	not	local01, #0
1dbe4     A7 26 62 FC | 	wrlong	local01, fp
1dbe8     64 00 90 FD | 	jmp	#LR__2413
1dbec                 | LR__2411
1dbec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1dbec     08 4E 05 F1 | 	add	fp, #8
1dbf0     A7 26 02 FB | 	rdlong	local01, fp
1dbf4     08 4E 85 F1 | 	sub	fp, #8
1dbf8     2B 26 0E F2 | 	cmp	local01, #43 wz
1dbfc     14 4E 05 A1 |  if_e	add	fp, #20
1dc00     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dc04     14 4E 85 A1 |  if_e	sub	fp, #20
1dc08     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dc0c     3C 00 90 5D |  if_ne	jmp	#LR__2412
1dc10     00 26 06 F6 | 	mov	local01, #0
1dc14     A7 12 02 FB | 	rdlong	arg01, fp
1dc18     DC F1 BE FD | 	call	#_convertstring
1dc1c     FD 28 02 F6 | 	mov	local02, result1
1dc20     0C 4E 05 F1 | 	add	fp, #12
1dc24     A7 12 02 FB | 	rdlong	arg01, fp
1dc28     0C 4E 85 F1 | 	sub	fp, #12
1dc2c     C8 F1 BE FD | 	call	#_convertstring
1dc30     FD 14 02 F6 | 	mov	arg02, result1
1dc34     14 13 02 F6 | 	mov	arg01, local02
1dc38     64 7D B0 FD | 	call	#__system___string_cmp
1dc3c     01 FA 55 F2 | 	cmps	result1, #1 wc
1dc40     00 26 26 36 |  if_ae	not	local01, #0
1dc44     A7 26 62 FC | 	wrlong	local01, fp
1dc48     04 00 90 FD | 	jmp	#LR__2413
1dc4c                 | LR__2412
1dc4c     A7 00 68 FC | 	wrlong	#0, fp
1dc50                 | LR__2413
1dc50     08 4E 05 F1 | 	add	fp, #8
1dc54     A7 38 68 FC | 	wrlong	#28, fp
1dc58     08 4E 85 F1 | 	sub	fp, #8
1dc5c                 | ' t1.result.uresult=0
1dc5c                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dc5c     A7 26 0A FB | 	rdlong	local01, fp wz
1dc60     A7 02 68 5C |  if_ne	wrlong	#1, fp
1dc64     A7 12 02 F6 | 	mov	arg01, fp
1dc68     AC F0 BE FD | 	call	#_push
1dc6c     A7 F0 03 F6 | 	mov	ptra, fp
1dc70     B2 00 A0 FD | 	call	#popregs_
1dc74                 | _do_gt_ret
1dc74     2D 00 64 FD | 	ret
1dc78                 | 
1dc78                 | ' 
1dc78                 | ' '--------------------------------- less or equal (<=)
1dc78                 | ' 
1dc78                 | ' sub do_le
1dc78                 | _do_le
1dc78     05 4A 05 F6 | 	mov	COUNT_, #5
1dc7c     A8 00 A0 FD | 	call	#pushregs_
1dc80     18 F0 07 F1 | 	add	ptra, #24
1dc84     F8 EF BE FD | 	call	#_pop
1dc88     FD 26 02 F6 | 	mov	local01, result1
1dc8c     FE 28 02 F6 | 	mov	local02, result2
1dc90     FF 2A 02 F6 | 	mov	local03, result3
1dc94     0C 4E 05 F1 | 	add	fp, #12
1dc98     A7 26 62 FC | 	wrlong	local01, fp
1dc9c     04 4E 05 F1 | 	add	fp, #4
1dca0     A7 28 62 FC | 	wrlong	local02, fp
1dca4     04 4E 05 F1 | 	add	fp, #4
1dca8     A7 2A 62 FC | 	wrlong	local03, fp
1dcac     14 4E 85 F1 | 	sub	fp, #20
1dcb0     CC EF BE FD | 	call	#_pop
1dcb4     FF 2A 02 F6 | 	mov	local03, result3
1dcb8     A7 FA 61 FC | 	wrlong	result1, fp
1dcbc     04 4E 05 F1 | 	add	fp, #4
1dcc0     A7 FC 61 FC | 	wrlong	result2, fp
1dcc4     04 4E 05 F1 | 	add	fp, #4
1dcc8     A7 2A 62 FC | 	wrlong	local03, fp
1dccc                 | ' 
1dccc                 | ' t2=pop()
1dccc                 | ' t1=pop()
1dccc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1dccc     08 4E 85 F1 | 	sub	fp, #8
1dcd0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1dcd4     14 4E 05 A1 |  if_e	add	fp, #20
1dcd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dcdc     14 4E 85 A1 |  if_e	sub	fp, #20
1dce0     16 2B 02 A6 |  if_e	mov	local03, local04
1dce4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1dce8     28 00 90 5D |  if_ne	jmp	#LR__2420
1dcec     00 26 06 F6 | 	mov	local01, #0
1dcf0     A7 12 02 FB | 	rdlong	arg01, fp
1dcf4     0C 4E 05 F1 | 	add	fp, #12
1dcf8     A7 14 02 FB | 	rdlong	arg02, fp
1dcfc     0C 4E 85 F1 | 	sub	fp, #12
1dd00     9C 7C B0 FD | 	call	#__system___string_cmp
1dd04     01 FA 55 F2 | 	cmps	result1, #1 wc
1dd08     00 26 26 C6 |  if_b	not	local01, #0
1dd0c     A7 26 62 FC | 	wrlong	local01, fp
1dd10     20 04 90 FD | 	jmp	#LR__2433
1dd14                 | LR__2420
1dd14                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1dd14     08 4E 05 F1 | 	add	fp, #8
1dd18     A7 26 02 FB | 	rdlong	local01, fp
1dd1c     08 4E 85 F1 | 	sub	fp, #8
1dd20     1E 26 0E F2 | 	cmp	local01, #30 wz
1dd24     14 4E 05 A1 |  if_e	add	fp, #20
1dd28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd2c     14 4E 85 A1 |  if_e	sub	fp, #20
1dd30     16 2B 02 A6 |  if_e	mov	local03, local04
1dd34     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dd38     2C 00 90 5D |  if_ne	jmp	#LR__2421
1dd3c     00 26 06 F6 | 	mov	local01, #0
1dd40     A7 12 02 FB | 	rdlong	arg01, fp
1dd44     0C 4E 05 F1 | 	add	fp, #12
1dd48     A7 14 02 FB | 	rdlong	arg02, fp
1dd4c     0C 4E 85 F1 | 	sub	fp, #12
1dd50     01 16 06 F6 | 	mov	arg03, #1
1dd54     CC AE B0 FD | 	call	#__system___float_cmp
1dd58     01 FA 55 F2 | 	cmps	result1, #1 wc
1dd5c     00 26 26 C6 |  if_b	not	local01, #0
1dd60     A7 26 62 FC | 	wrlong	local01, fp
1dd64     CC 03 90 FD | 	jmp	#LR__2433
1dd68                 | LR__2421
1dd68                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1dd68     08 4E 05 F1 | 	add	fp, #8
1dd6c     A7 26 02 FB | 	rdlong	local01, fp
1dd70     08 4E 85 F1 | 	sub	fp, #8
1dd74     1E 26 0E F2 | 	cmp	local01, #30 wz
1dd78     14 4E 05 A1 |  if_e	add	fp, #20
1dd7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd80     14 4E 85 A1 |  if_e	sub	fp, #20
1dd84     16 2B 02 A6 |  if_e	mov	local03, local04
1dd88     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dd8c     48 00 90 5D |  if_ne	jmp	#LR__2422
1dd90     00 26 06 F6 | 	mov	local01, #0
1dd94     A7 28 02 FB | 	rdlong	local02, fp
1dd98     0C 4E 05 F1 | 	add	fp, #12
1dd9c     A7 12 02 FB | 	rdlong	arg01, fp
1dda0     0C 4E 85 F1 | 	sub	fp, #12
1dda4     09 13 52 F6 | 	abs	arg01, arg01 wc
1dda8     1F 2E C6 C9 |  if_b	decod	local05, #31
1ddac     00 2E 06 36 |  if_ae	mov	local05, #0
1ddb0     38 A6 B0 FD | 	call	#__system___float_fromuns
1ddb4     17 FB 61 F5 | 	xor	result1, local05
1ddb8     FD 14 02 F6 | 	mov	arg02, result1
1ddbc     14 13 02 F6 | 	mov	arg01, local02
1ddc0     01 16 06 F6 | 	mov	arg03, #1
1ddc4     5C AE B0 FD | 	call	#__system___float_cmp
1ddc8     01 FA 55 F2 | 	cmps	result1, #1 wc
1ddcc     00 26 26 C6 |  if_b	not	local01, #0
1ddd0     A7 26 62 FC | 	wrlong	local01, fp
1ddd4     5C 03 90 FD | 	jmp	#LR__2433
1ddd8                 | LR__2422
1ddd8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1ddd8     08 4E 05 F1 | 	add	fp, #8
1dddc     A7 26 02 FB | 	rdlong	local01, fp
1dde0     08 4E 85 F1 | 	sub	fp, #8
1dde4     1E 26 0E F2 | 	cmp	local01, #30 wz
1dde8     14 4E 05 A1 |  if_e	add	fp, #20
1ddec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ddf0     14 4E 85 A1 |  if_e	sub	fp, #20
1ddf4     16 2B 02 A6 |  if_e	mov	local03, local04
1ddf8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ddfc     38 00 90 5D |  if_ne	jmp	#LR__2423
1de00     00 26 06 F6 | 	mov	local01, #0
1de04     A7 28 02 FB | 	rdlong	local02, fp
1de08     0C 4E 05 F1 | 	add	fp, #12
1de0c     A7 12 02 FB | 	rdlong	arg01, fp
1de10     0C 4E 85 F1 | 	sub	fp, #12
1de14     D4 A5 B0 FD | 	call	#__system___float_fromuns
1de18     FD 14 02 F6 | 	mov	arg02, result1
1de1c     14 13 02 F6 | 	mov	arg01, local02
1de20     01 16 06 F6 | 	mov	arg03, #1
1de24     FC AD B0 FD | 	call	#__system___float_cmp
1de28     01 FA 55 F2 | 	cmps	result1, #1 wc
1de2c     00 26 26 C6 |  if_b	not	local01, #0
1de30     A7 26 62 FC | 	wrlong	local01, fp
1de34     FC 02 90 FD | 	jmp	#LR__2433
1de38                 | LR__2423
1de38                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1de38     08 4E 05 F1 | 	add	fp, #8
1de3c     A7 26 02 FB | 	rdlong	local01, fp
1de40     08 4E 85 F1 | 	sub	fp, #8
1de44     1C 26 0E F2 | 	cmp	local01, #28 wz
1de48     14 4E 05 A1 |  if_e	add	fp, #20
1de4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1de50     14 4E 85 A1 |  if_e	sub	fp, #20
1de54     16 2B 02 A6 |  if_e	mov	local03, local04
1de58     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1de5c     44 00 90 5D |  if_ne	jmp	#LR__2424
1de60     00 26 06 F6 | 	mov	local01, #0
1de64     A7 12 02 FB | 	rdlong	arg01, fp
1de68     09 13 52 F6 | 	abs	arg01, arg01 wc
1de6c     1F 2E C6 C9 |  if_b	decod	local05, #31
1de70     00 2E 06 36 |  if_ae	mov	local05, #0
1de74     74 A5 B0 FD | 	call	#__system___float_fromuns
1de78     17 FB 61 F5 | 	xor	result1, local05
1de7c     FD 12 02 F6 | 	mov	arg01, result1
1de80     0C 4E 05 F1 | 	add	fp, #12
1de84     A7 14 02 FB | 	rdlong	arg02, fp
1de88     0C 4E 85 F1 | 	sub	fp, #12
1de8c     01 16 06 F6 | 	mov	arg03, #1
1de90     90 AD B0 FD | 	call	#__system___float_cmp
1de94     01 FA 55 F2 | 	cmps	result1, #1 wc
1de98     00 26 26 C6 |  if_b	not	local01, #0
1de9c     A7 26 62 FC | 	wrlong	local01, fp
1dea0     90 02 90 FD | 	jmp	#LR__2433
1dea4                 | LR__2424
1dea4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1dea4     08 4E 05 F1 | 	add	fp, #8
1dea8     A7 26 02 FB | 	rdlong	local01, fp
1deac     08 4E 85 F1 | 	sub	fp, #8
1deb0     1C 26 0E F2 | 	cmp	local01, #28 wz
1deb4     14 4E 05 A1 |  if_e	add	fp, #20
1deb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1debc     14 4E 85 A1 |  if_e	sub	fp, #20
1dec0     16 2B 02 A6 |  if_e	mov	local03, local04
1dec4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dec8     24 00 90 5D |  if_ne	jmp	#LR__2425
1decc     00 26 06 F6 | 	mov	local01, #0
1ded0     A7 28 02 FB | 	rdlong	local02, fp
1ded4     0C 4E 05 F1 | 	add	fp, #12
1ded8     A7 2A 02 FB | 	rdlong	local03, fp
1dedc     0C 4E 85 F1 | 	sub	fp, #12
1dee0     15 29 5A F2 | 	cmps	local02, local03 wcz
1dee4     01 26 66 E6 |  if_be	neg	local01, #1
1dee8     A7 26 62 FC | 	wrlong	local01, fp
1deec     44 02 90 FD | 	jmp	#LR__2433
1def0                 | LR__2425
1def0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1def0     08 4E 05 F1 | 	add	fp, #8
1def4     A7 26 02 FB | 	rdlong	local01, fp
1def8     08 4E 85 F1 | 	sub	fp, #8
1defc     1C 26 0E F2 | 	cmp	local01, #28 wz
1df00     14 4E 05 A1 |  if_e	add	fp, #20
1df04     A7 2C 02 AB |  if_e	rdlong	local04, fp
1df08     14 4E 85 A1 |  if_e	sub	fp, #20
1df0c     16 2B 02 A6 |  if_e	mov	local03, local04
1df10     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1df14     24 00 90 5D |  if_ne	jmp	#LR__2426
1df18     00 26 06 F6 | 	mov	local01, #0
1df1c     A7 28 02 FB | 	rdlong	local02, fp
1df20     0C 4E 05 F1 | 	add	fp, #12
1df24     A7 2A 02 FB | 	rdlong	local03, fp
1df28     0C 4E 85 F1 | 	sub	fp, #12
1df2c     15 29 5A F2 | 	cmps	local02, local03 wcz
1df30     01 26 66 E6 |  if_be	neg	local01, #1
1df34     A7 26 62 FC | 	wrlong	local01, fp
1df38     F8 01 90 FD | 	jmp	#LR__2433
1df3c                 | LR__2426
1df3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1df3c     08 4E 05 F1 | 	add	fp, #8
1df40     A7 26 02 FB | 	rdlong	local01, fp
1df44     08 4E 85 F1 | 	sub	fp, #8
1df48     1D 26 0E F2 | 	cmp	local01, #29 wz
1df4c     14 4E 05 A1 |  if_e	add	fp, #20
1df50     A7 2C 02 AB |  if_e	rdlong	local04, fp
1df54     14 4E 85 A1 |  if_e	sub	fp, #20
1df58     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1df5c     34 00 90 5D |  if_ne	jmp	#LR__2427
1df60     00 26 06 F6 | 	mov	local01, #0
1df64     A7 12 02 FB | 	rdlong	arg01, fp
1df68     80 A4 B0 FD | 	call	#__system___float_fromuns
1df6c     FD 12 02 F6 | 	mov	arg01, result1
1df70     0C 4E 05 F1 | 	add	fp, #12
1df74     A7 14 02 FB | 	rdlong	arg02, fp
1df78     0C 4E 85 F1 | 	sub	fp, #12
1df7c     01 16 06 F6 | 	mov	arg03, #1
1df80     A0 AC B0 FD | 	call	#__system___float_cmp
1df84     01 FA 55 F2 | 	cmps	result1, #1 wc
1df88     00 26 26 C6 |  if_b	not	local01, #0
1df8c     A7 26 62 FC | 	wrlong	local01, fp
1df90     A0 01 90 FD | 	jmp	#LR__2433
1df94                 | LR__2427
1df94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1df94     08 4E 05 F1 | 	add	fp, #8
1df98     A7 26 02 FB | 	rdlong	local01, fp
1df9c     08 4E 85 F1 | 	sub	fp, #8
1dfa0     1D 26 0E F2 | 	cmp	local01, #29 wz
1dfa4     14 4E 05 A1 |  if_e	add	fp, #20
1dfa8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dfac     14 4E 85 A1 |  if_e	sub	fp, #20
1dfb0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dfb4     24 00 90 5D |  if_ne	jmp	#LR__2428
1dfb8     00 26 06 F6 | 	mov	local01, #0
1dfbc     A7 28 02 FB | 	rdlong	local02, fp
1dfc0     0C 4E 05 F1 | 	add	fp, #12
1dfc4     A7 2A 02 FB | 	rdlong	local03, fp
1dfc8     0C 4E 85 F1 | 	sub	fp, #12
1dfcc     15 29 5A F2 | 	cmps	local02, local03 wcz
1dfd0     01 26 66 E6 |  if_be	neg	local01, #1
1dfd4     A7 26 62 FC | 	wrlong	local01, fp
1dfd8     58 01 90 FD | 	jmp	#LR__2433
1dfdc                 | LR__2428
1dfdc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1dfdc     08 4E 05 F1 | 	add	fp, #8
1dfe0     A7 26 02 FB | 	rdlong	local01, fp
1dfe4     08 4E 85 F1 | 	sub	fp, #8
1dfe8     1D 26 0E F2 | 	cmp	local01, #29 wz
1dfec     14 4E 05 A1 |  if_e	add	fp, #20
1dff0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dff4     14 4E 85 A1 |  if_e	sub	fp, #20
1dff8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dffc     24 00 90 5D |  if_ne	jmp	#LR__2429
1e000     00 26 06 F6 | 	mov	local01, #0
1e004     A7 28 02 FB | 	rdlong	local02, fp
1e008     0C 4E 05 F1 | 	add	fp, #12
1e00c     A7 2A 02 FB | 	rdlong	local03, fp
1e010     0C 4E 85 F1 | 	sub	fp, #12
1e014     15 29 1A F2 | 	cmp	local02, local03 wcz
1e018     01 26 66 E6 |  if_be	neg	local01, #1
1e01c     A7 26 62 FC | 	wrlong	local01, fp
1e020     10 01 90 FD | 	jmp	#LR__2433
1e024                 | LR__2429
1e024                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1e024     08 4E 05 F1 | 	add	fp, #8
1e028     A7 26 02 FB | 	rdlong	local01, fp
1e02c     08 4E 85 F1 | 	sub	fp, #8
1e030     2B 26 0E F2 | 	cmp	local01, #43 wz
1e034     14 4E 05 A1 |  if_e	add	fp, #20
1e038     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e03c     14 4E 85 A1 |  if_e	sub	fp, #20
1e040     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e044     30 00 90 5D |  if_ne	jmp	#LR__2430
1e048     00 26 06 F6 | 	mov	local01, #0
1e04c     A7 12 02 FB | 	rdlong	arg01, fp
1e050     A4 ED BE FD | 	call	#_convertstring
1e054     FD 12 02 F6 | 	mov	arg01, result1
1e058     0C 4E 05 F1 | 	add	fp, #12
1e05c     A7 14 02 FB | 	rdlong	arg02, fp
1e060     0C 4E 85 F1 | 	sub	fp, #12
1e064     38 79 B0 FD | 	call	#__system___string_cmp
1e068     01 FA 55 F2 | 	cmps	result1, #1 wc
1e06c     00 26 26 C6 |  if_b	not	local01, #0
1e070     A7 26 62 FC | 	wrlong	local01, fp
1e074     BC 00 90 FD | 	jmp	#LR__2433
1e078                 | LR__2430
1e078                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1e078     08 4E 05 F1 | 	add	fp, #8
1e07c     A7 26 02 FB | 	rdlong	local01, fp
1e080     08 4E 85 F1 | 	sub	fp, #8
1e084     1F 26 0E F2 | 	cmp	local01, #31 wz
1e088     14 4E 05 A1 |  if_e	add	fp, #20
1e08c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e090     14 4E 85 A1 |  if_e	sub	fp, #20
1e094     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e098     34 00 90 5D |  if_ne	jmp	#LR__2431
1e09c     00 26 06 F6 | 	mov	local01, #0
1e0a0     A7 28 02 FB | 	rdlong	local02, fp
1e0a4     0C 4E 05 F1 | 	add	fp, #12
1e0a8     A7 12 02 FB | 	rdlong	arg01, fp
1e0ac     0C 4E 85 F1 | 	sub	fp, #12
1e0b0     44 ED BE FD | 	call	#_convertstring
1e0b4     FD 14 02 F6 | 	mov	arg02, result1
1e0b8     14 13 02 F6 | 	mov	arg01, local02
1e0bc     E0 78 B0 FD | 	call	#__system___string_cmp
1e0c0     01 FA 55 F2 | 	cmps	result1, #1 wc
1e0c4     00 26 26 C6 |  if_b	not	local01, #0
1e0c8     A7 26 62 FC | 	wrlong	local01, fp
1e0cc     64 00 90 FD | 	jmp	#LR__2433
1e0d0                 | LR__2431
1e0d0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1e0d0     08 4E 05 F1 | 	add	fp, #8
1e0d4     A7 26 02 FB | 	rdlong	local01, fp
1e0d8     08 4E 85 F1 | 	sub	fp, #8
1e0dc     2B 26 0E F2 | 	cmp	local01, #43 wz
1e0e0     14 4E 05 A1 |  if_e	add	fp, #20
1e0e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e0e8     14 4E 85 A1 |  if_e	sub	fp, #20
1e0ec     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e0f0     3C 00 90 5D |  if_ne	jmp	#LR__2432
1e0f4     00 26 06 F6 | 	mov	local01, #0
1e0f8     A7 12 02 FB | 	rdlong	arg01, fp
1e0fc     F8 EC BE FD | 	call	#_convertstring
1e100     FD 28 02 F6 | 	mov	local02, result1
1e104     0C 4E 05 F1 | 	add	fp, #12
1e108     A7 12 02 FB | 	rdlong	arg01, fp
1e10c     0C 4E 85 F1 | 	sub	fp, #12
1e110     E4 EC BE FD | 	call	#_convertstring
1e114     FD 14 02 F6 | 	mov	arg02, result1
1e118     14 13 02 F6 | 	mov	arg01, local02
1e11c     80 78 B0 FD | 	call	#__system___string_cmp
1e120     01 FA 55 F2 | 	cmps	result1, #1 wc
1e124     00 26 26 C6 |  if_b	not	local01, #0
1e128     A7 26 62 FC | 	wrlong	local01, fp
1e12c     04 00 90 FD | 	jmp	#LR__2433
1e130                 | LR__2432
1e130     A7 00 68 FC | 	wrlong	#0, fp
1e134                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e134                 | LR__2433
1e134     08 4E 05 F1 | 	add	fp, #8
1e138     A7 38 68 FC | 	wrlong	#28, fp
1e13c     08 4E 85 F1 | 	sub	fp, #8
1e140     A7 12 02 F6 | 	mov	arg01, fp
1e144     D0 EB BE FD | 	call	#_push
1e148     A7 F0 03 F6 | 	mov	ptra, fp
1e14c     B2 00 A0 FD | 	call	#popregs_
1e150                 | _do_le_ret
1e150     2D 00 64 FD | 	ret
1e154                 | 
1e154                 | ' 
1e154                 | ' '--------------------------------- less than (<)
1e154                 | ' 
1e154                 | ' sub do_lt
1e154                 | _do_lt
1e154     05 4A 05 F6 | 	mov	COUNT_, #5
1e158     A8 00 A0 FD | 	call	#pushregs_
1e15c     18 F0 07 F1 | 	add	ptra, #24
1e160     1C EB BE FD | 	call	#_pop
1e164     FD 26 02 F6 | 	mov	local01, result1
1e168     FE 28 02 F6 | 	mov	local02, result2
1e16c     FF 2A 02 F6 | 	mov	local03, result3
1e170     0C 4E 05 F1 | 	add	fp, #12
1e174     A7 26 62 FC | 	wrlong	local01, fp
1e178     04 4E 05 F1 | 	add	fp, #4
1e17c     A7 28 62 FC | 	wrlong	local02, fp
1e180     04 4E 05 F1 | 	add	fp, #4
1e184     A7 2A 62 FC | 	wrlong	local03, fp
1e188     14 4E 85 F1 | 	sub	fp, #20
1e18c     F0 EA BE FD | 	call	#_pop
1e190     FF 2A 02 F6 | 	mov	local03, result3
1e194     A7 FA 61 FC | 	wrlong	result1, fp
1e198     04 4E 05 F1 | 	add	fp, #4
1e19c     A7 FC 61 FC | 	wrlong	result2, fp
1e1a0     04 4E 05 F1 | 	add	fp, #4
1e1a4     A7 2A 62 FC | 	wrlong	local03, fp
1e1a8                 | ' 
1e1a8                 | ' t2=pop()
1e1a8                 | ' t1=pop()
1e1a8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1e1a8     08 4E 85 F1 | 	sub	fp, #8
1e1ac     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e1b0     14 4E 05 A1 |  if_e	add	fp, #20
1e1b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e1b8     14 4E 85 A1 |  if_e	sub	fp, #20
1e1bc     16 2B 02 A6 |  if_e	mov	local03, local04
1e1c0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e1c4     28 00 90 5D |  if_ne	jmp	#LR__2440
1e1c8     00 26 06 F6 | 	mov	local01, #0
1e1cc     A7 12 02 FB | 	rdlong	arg01, fp
1e1d0     0C 4E 05 F1 | 	add	fp, #12
1e1d4     A7 14 02 FB | 	rdlong	arg02, fp
1e1d8     0C 4E 85 F1 | 	sub	fp, #12
1e1dc     C0 77 B0 FD | 	call	#__system___string_cmp
1e1e0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e1e4     00 26 26 C6 |  if_b	not	local01, #0
1e1e8     A7 26 62 FC | 	wrlong	local01, fp
1e1ec     10 04 90 FD | 	jmp	#LR__2453
1e1f0                 | LR__2440
1e1f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1e1f0     08 4E 05 F1 | 	add	fp, #8
1e1f4     A7 26 02 FB | 	rdlong	local01, fp
1e1f8     08 4E 85 F1 | 	sub	fp, #8
1e1fc     1E 26 0E F2 | 	cmp	local01, #30 wz
1e200     14 4E 05 A1 |  if_e	add	fp, #20
1e204     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e208     14 4E 85 A1 |  if_e	sub	fp, #20
1e20c     16 2B 02 A6 |  if_e	mov	local03, local04
1e210     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e214     2C 00 90 5D |  if_ne	jmp	#LR__2441
1e218     00 26 06 F6 | 	mov	local01, #0
1e21c     A7 12 02 FB | 	rdlong	arg01, fp
1e220     0C 4E 05 F1 | 	add	fp, #12
1e224     A7 14 02 FB | 	rdlong	arg02, fp
1e228     0C 4E 85 F1 | 	sub	fp, #12
1e22c     01 16 06 F6 | 	mov	arg03, #1
1e230     F0 A9 B0 FD | 	call	#__system___float_cmp
1e234     00 FA 55 F2 | 	cmps	result1, #0 wc
1e238     00 26 26 C6 |  if_b	not	local01, #0
1e23c     A7 26 62 FC | 	wrlong	local01, fp
1e240     BC 03 90 FD | 	jmp	#LR__2453
1e244                 | LR__2441
1e244                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1e244     08 4E 05 F1 | 	add	fp, #8
1e248     A7 26 02 FB | 	rdlong	local01, fp
1e24c     08 4E 85 F1 | 	sub	fp, #8
1e250     1E 26 0E F2 | 	cmp	local01, #30 wz
1e254     14 4E 05 A1 |  if_e	add	fp, #20
1e258     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e25c     14 4E 85 A1 |  if_e	sub	fp, #20
1e260     16 2B 02 A6 |  if_e	mov	local03, local04
1e264     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e268     48 00 90 5D |  if_ne	jmp	#LR__2442
1e26c     00 26 06 F6 | 	mov	local01, #0
1e270     A7 28 02 FB | 	rdlong	local02, fp
1e274     0C 4E 05 F1 | 	add	fp, #12
1e278     A7 12 02 FB | 	rdlong	arg01, fp
1e27c     0C 4E 85 F1 | 	sub	fp, #12
1e280     09 13 52 F6 | 	abs	arg01, arg01 wc
1e284     1F 2E C6 C9 |  if_b	decod	local05, #31
1e288     00 2E 06 36 |  if_ae	mov	local05, #0
1e28c     5C A1 B0 FD | 	call	#__system___float_fromuns
1e290     17 FB 61 F5 | 	xor	result1, local05
1e294     FD 14 02 F6 | 	mov	arg02, result1
1e298     14 13 02 F6 | 	mov	arg01, local02
1e29c     01 16 06 F6 | 	mov	arg03, #1
1e2a0     80 A9 B0 FD | 	call	#__system___float_cmp
1e2a4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e2a8     00 26 26 C6 |  if_b	not	local01, #0
1e2ac     A7 26 62 FC | 	wrlong	local01, fp
1e2b0     4C 03 90 FD | 	jmp	#LR__2453
1e2b4                 | LR__2442
1e2b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1e2b4     08 4E 05 F1 | 	add	fp, #8
1e2b8     A7 26 02 FB | 	rdlong	local01, fp
1e2bc     08 4E 85 F1 | 	sub	fp, #8
1e2c0     1E 26 0E F2 | 	cmp	local01, #30 wz
1e2c4     14 4E 05 A1 |  if_e	add	fp, #20
1e2c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2cc     14 4E 85 A1 |  if_e	sub	fp, #20
1e2d0     16 2B 02 A6 |  if_e	mov	local03, local04
1e2d4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e2d8     38 00 90 5D |  if_ne	jmp	#LR__2443
1e2dc     00 26 06 F6 | 	mov	local01, #0
1e2e0     A7 28 02 FB | 	rdlong	local02, fp
1e2e4     0C 4E 05 F1 | 	add	fp, #12
1e2e8     A7 12 02 FB | 	rdlong	arg01, fp
1e2ec     0C 4E 85 F1 | 	sub	fp, #12
1e2f0     F8 A0 B0 FD | 	call	#__system___float_fromuns
1e2f4     FD 14 02 F6 | 	mov	arg02, result1
1e2f8     14 13 02 F6 | 	mov	arg01, local02
1e2fc     01 16 06 F6 | 	mov	arg03, #1
1e300     20 A9 B0 FD | 	call	#__system___float_cmp
1e304     00 FA 55 F2 | 	cmps	result1, #0 wc
1e308     00 26 26 C6 |  if_b	not	local01, #0
1e30c     A7 26 62 FC | 	wrlong	local01, fp
1e310     EC 02 90 FD | 	jmp	#LR__2453
1e314                 | LR__2443
1e314                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1e314     08 4E 05 F1 | 	add	fp, #8
1e318     A7 26 02 FB | 	rdlong	local01, fp
1e31c     08 4E 85 F1 | 	sub	fp, #8
1e320     1C 26 0E F2 | 	cmp	local01, #28 wz
1e324     14 4E 05 A1 |  if_e	add	fp, #20
1e328     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e32c     14 4E 85 A1 |  if_e	sub	fp, #20
1e330     16 2B 02 A6 |  if_e	mov	local03, local04
1e334     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e338     44 00 90 5D |  if_ne	jmp	#LR__2444
1e33c     00 26 06 F6 | 	mov	local01, #0
1e340     A7 12 02 FB | 	rdlong	arg01, fp
1e344     09 13 52 F6 | 	abs	arg01, arg01 wc
1e348     1F 2E C6 C9 |  if_b	decod	local05, #31
1e34c     00 2E 06 36 |  if_ae	mov	local05, #0
1e350     98 A0 B0 FD | 	call	#__system___float_fromuns
1e354     17 FB 61 F5 | 	xor	result1, local05
1e358     FD 12 02 F6 | 	mov	arg01, result1
1e35c     0C 4E 05 F1 | 	add	fp, #12
1e360     A7 14 02 FB | 	rdlong	arg02, fp
1e364     0C 4E 85 F1 | 	sub	fp, #12
1e368     01 16 06 F6 | 	mov	arg03, #1
1e36c     B4 A8 B0 FD | 	call	#__system___float_cmp
1e370     00 FA 55 F2 | 	cmps	result1, #0 wc
1e374     00 26 26 C6 |  if_b	not	local01, #0
1e378     A7 26 62 FC | 	wrlong	local01, fp
1e37c     80 02 90 FD | 	jmp	#LR__2453
1e380                 | LR__2444
1e380                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1e380     08 4E 05 F1 | 	add	fp, #8
1e384     A7 26 02 FB | 	rdlong	local01, fp
1e388     08 4E 85 F1 | 	sub	fp, #8
1e38c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e390     14 4E 05 A1 |  if_e	add	fp, #20
1e394     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e398     14 4E 85 A1 |  if_e	sub	fp, #20
1e39c     16 2B 02 A6 |  if_e	mov	local03, local04
1e3a0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e3a4     20 00 90 5D |  if_ne	jmp	#LR__2445
1e3a8     A7 28 02 FB | 	rdlong	local02, fp
1e3ac     0C 4E 05 F1 | 	add	fp, #12
1e3b0     A7 2A 02 FB | 	rdlong	local03, fp
1e3b4     0C 4E 85 F1 | 	sub	fp, #12
1e3b8     15 29 52 F2 | 	cmps	local02, local03 wc
1e3bc     13 27 A2 F1 | 	subx	local01, local01
1e3c0     A7 26 62 FC | 	wrlong	local01, fp
1e3c4     38 02 90 FD | 	jmp	#LR__2453
1e3c8                 | LR__2445
1e3c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1e3c8     08 4E 05 F1 | 	add	fp, #8
1e3cc     A7 26 02 FB | 	rdlong	local01, fp
1e3d0     08 4E 85 F1 | 	sub	fp, #8
1e3d4     1C 26 0E F2 | 	cmp	local01, #28 wz
1e3d8     14 4E 05 A1 |  if_e	add	fp, #20
1e3dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3e0     14 4E 85 A1 |  if_e	sub	fp, #20
1e3e4     16 2B 02 A6 |  if_e	mov	local03, local04
1e3e8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e3ec     20 00 90 5D |  if_ne	jmp	#LR__2446
1e3f0     A7 28 02 FB | 	rdlong	local02, fp
1e3f4     0C 4E 05 F1 | 	add	fp, #12
1e3f8     A7 2A 02 FB | 	rdlong	local03, fp
1e3fc     0C 4E 85 F1 | 	sub	fp, #12
1e400     15 29 52 F2 | 	cmps	local02, local03 wc
1e404     13 27 A2 F1 | 	subx	local01, local01
1e408     A7 26 62 FC | 	wrlong	local01, fp
1e40c     F0 01 90 FD | 	jmp	#LR__2453
1e410                 | LR__2446
1e410                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1e410     08 4E 05 F1 | 	add	fp, #8
1e414     A7 26 02 FB | 	rdlong	local01, fp
1e418     08 4E 85 F1 | 	sub	fp, #8
1e41c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e420     14 4E 05 A1 |  if_e	add	fp, #20
1e424     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e428     14 4E 85 A1 |  if_e	sub	fp, #20
1e42c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e430     34 00 90 5D |  if_ne	jmp	#LR__2447
1e434     00 26 06 F6 | 	mov	local01, #0
1e438     A7 12 02 FB | 	rdlong	arg01, fp
1e43c     AC 9F B0 FD | 	call	#__system___float_fromuns
1e440     FD 12 02 F6 | 	mov	arg01, result1
1e444     0C 4E 05 F1 | 	add	fp, #12
1e448     A7 14 02 FB | 	rdlong	arg02, fp
1e44c     0C 4E 85 F1 | 	sub	fp, #12
1e450     01 16 06 F6 | 	mov	arg03, #1
1e454     CC A7 B0 FD | 	call	#__system___float_cmp
1e458     00 FA 55 F2 | 	cmps	result1, #0 wc
1e45c     00 26 26 C6 |  if_b	not	local01, #0
1e460     A7 26 62 FC | 	wrlong	local01, fp
1e464     98 01 90 FD | 	jmp	#LR__2453
1e468                 | LR__2447
1e468                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1e468     08 4E 05 F1 | 	add	fp, #8
1e46c     A7 26 02 FB | 	rdlong	local01, fp
1e470     08 4E 85 F1 | 	sub	fp, #8
1e474     1D 26 0E F2 | 	cmp	local01, #29 wz
1e478     14 4E 05 A1 |  if_e	add	fp, #20
1e47c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e480     14 4E 85 A1 |  if_e	sub	fp, #20
1e484     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e488     20 00 90 5D |  if_ne	jmp	#LR__2448
1e48c     A7 28 02 FB | 	rdlong	local02, fp
1e490     0C 4E 05 F1 | 	add	fp, #12
1e494     A7 2A 02 FB | 	rdlong	local03, fp
1e498     0C 4E 85 F1 | 	sub	fp, #12
1e49c     15 29 52 F2 | 	cmps	local02, local03 wc
1e4a0     13 27 A2 F1 | 	subx	local01, local01
1e4a4     A7 26 62 FC | 	wrlong	local01, fp
1e4a8     54 01 90 FD | 	jmp	#LR__2453
1e4ac                 | LR__2448
1e4ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1e4ac     08 4E 05 F1 | 	add	fp, #8
1e4b0     A7 26 02 FB | 	rdlong	local01, fp
1e4b4     08 4E 85 F1 | 	sub	fp, #8
1e4b8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e4bc     14 4E 05 A1 |  if_e	add	fp, #20
1e4c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e4c4     14 4E 85 A1 |  if_e	sub	fp, #20
1e4c8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e4cc     20 00 90 5D |  if_ne	jmp	#LR__2449
1e4d0     A7 28 02 FB | 	rdlong	local02, fp
1e4d4     0C 4E 05 F1 | 	add	fp, #12
1e4d8     A7 2A 02 FB | 	rdlong	local03, fp
1e4dc     0C 4E 85 F1 | 	sub	fp, #12
1e4e0     15 29 12 F2 | 	cmp	local02, local03 wc
1e4e4     13 27 A2 F1 | 	subx	local01, local01
1e4e8     A7 26 62 FC | 	wrlong	local01, fp
1e4ec     10 01 90 FD | 	jmp	#LR__2453
1e4f0                 | LR__2449
1e4f0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1e4f0     08 4E 05 F1 | 	add	fp, #8
1e4f4     A7 26 02 FB | 	rdlong	local01, fp
1e4f8     08 4E 85 F1 | 	sub	fp, #8
1e4fc     2B 26 0E F2 | 	cmp	local01, #43 wz
1e500     14 4E 05 A1 |  if_e	add	fp, #20
1e504     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e508     14 4E 85 A1 |  if_e	sub	fp, #20
1e50c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e510     30 00 90 5D |  if_ne	jmp	#LR__2450
1e514     00 26 06 F6 | 	mov	local01, #0
1e518     A7 12 02 FB | 	rdlong	arg01, fp
1e51c     D8 E8 BE FD | 	call	#_convertstring
1e520     FD 12 02 F6 | 	mov	arg01, result1
1e524     0C 4E 05 F1 | 	add	fp, #12
1e528     A7 14 02 FB | 	rdlong	arg02, fp
1e52c     0C 4E 85 F1 | 	sub	fp, #12
1e530     6C 74 B0 FD | 	call	#__system___string_cmp
1e534     00 FA 55 F2 | 	cmps	result1, #0 wc
1e538     00 26 26 C6 |  if_b	not	local01, #0
1e53c     A7 26 62 FC | 	wrlong	local01, fp
1e540     BC 00 90 FD | 	jmp	#LR__2453
1e544                 | LR__2450
1e544                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1e544     08 4E 05 F1 | 	add	fp, #8
1e548     A7 26 02 FB | 	rdlong	local01, fp
1e54c     08 4E 85 F1 | 	sub	fp, #8
1e550     1F 26 0E F2 | 	cmp	local01, #31 wz
1e554     14 4E 05 A1 |  if_e	add	fp, #20
1e558     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e55c     14 4E 85 A1 |  if_e	sub	fp, #20
1e560     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e564     34 00 90 5D |  if_ne	jmp	#LR__2451
1e568     00 26 06 F6 | 	mov	local01, #0
1e56c     A7 28 02 FB | 	rdlong	local02, fp
1e570     0C 4E 05 F1 | 	add	fp, #12
1e574     A7 12 02 FB | 	rdlong	arg01, fp
1e578     0C 4E 85 F1 | 	sub	fp, #12
1e57c     78 E8 BE FD | 	call	#_convertstring
1e580     FD 14 02 F6 | 	mov	arg02, result1
1e584     14 13 02 F6 | 	mov	arg01, local02
1e588     14 74 B0 FD | 	call	#__system___string_cmp
1e58c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e590     00 26 26 C6 |  if_b	not	local01, #0
1e594     A7 26 62 FC | 	wrlong	local01, fp
1e598     64 00 90 FD | 	jmp	#LR__2453
1e59c                 | LR__2451
1e59c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1e59c     08 4E 05 F1 | 	add	fp, #8
1e5a0     A7 26 02 FB | 	rdlong	local01, fp
1e5a4     08 4E 85 F1 | 	sub	fp, #8
1e5a8     2B 26 0E F2 | 	cmp	local01, #43 wz
1e5ac     14 4E 05 A1 |  if_e	add	fp, #20
1e5b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e5b4     14 4E 85 A1 |  if_e	sub	fp, #20
1e5b8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e5bc     3C 00 90 5D |  if_ne	jmp	#LR__2452
1e5c0     00 26 06 F6 | 	mov	local01, #0
1e5c4     A7 12 02 FB | 	rdlong	arg01, fp
1e5c8     2C E8 BE FD | 	call	#_convertstring
1e5cc     FD 28 02 F6 | 	mov	local02, result1
1e5d0     0C 4E 05 F1 | 	add	fp, #12
1e5d4     A7 12 02 FB | 	rdlong	arg01, fp
1e5d8     0C 4E 85 F1 | 	sub	fp, #12
1e5dc     18 E8 BE FD | 	call	#_convertstring
1e5e0     FD 14 02 F6 | 	mov	arg02, result1
1e5e4     14 13 02 F6 | 	mov	arg01, local02
1e5e8     B4 73 B0 FD | 	call	#__system___string_cmp
1e5ec     00 FA 55 F2 | 	cmps	result1, #0 wc
1e5f0     00 26 26 C6 |  if_b	not	local01, #0
1e5f4     A7 26 62 FC | 	wrlong	local01, fp
1e5f8     04 00 90 FD | 	jmp	#LR__2453
1e5fc                 | LR__2452
1e5fc     A7 00 68 FC | 	wrlong	#0, fp
1e600                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e600                 | LR__2453
1e600     08 4E 05 F1 | 	add	fp, #8
1e604     A7 38 68 FC | 	wrlong	#28, fp
1e608     08 4E 85 F1 | 	sub	fp, #8
1e60c     A7 12 02 F6 | 	mov	arg01, fp
1e610     04 E7 BE FD | 	call	#_push
1e614     A7 F0 03 F6 | 	mov	ptra, fp
1e618     B2 00 A0 FD | 	call	#popregs_
1e61c                 | _do_lt_ret
1e61c     2D 00 64 FD | 	ret
1e620                 | 
1e620                 | ' 
1e620                 | ' '--------------------------------- minus (-)
1e620                 | ' 
1e620                 | ' sub do_minus
1e620                 | _do_minus
1e620     05 4A 05 F6 | 	mov	COUNT_, #5
1e624     A8 00 A0 FD | 	call	#pushregs_
1e628     18 F0 07 F1 | 	add	ptra, #24
1e62c     50 E6 BE FD | 	call	#_pop
1e630     FD 26 02 F6 | 	mov	local01, result1
1e634     FE 28 02 F6 | 	mov	local02, result2
1e638     FF 2A 02 F6 | 	mov	local03, result3
1e63c     0C 4E 05 F1 | 	add	fp, #12
1e640     A7 26 62 FC | 	wrlong	local01, fp
1e644     04 4E 05 F1 | 	add	fp, #4
1e648     A7 28 62 FC | 	wrlong	local02, fp
1e64c     04 4E 05 F1 | 	add	fp, #4
1e650     A7 2A 62 FC | 	wrlong	local03, fp
1e654     14 4E 85 F1 | 	sub	fp, #20
1e658     24 E6 BE FD | 	call	#_pop
1e65c     FF 2A 02 F6 | 	mov	local03, result3
1e660     A7 FA 61 FC | 	wrlong	result1, fp
1e664     04 4E 05 F1 | 	add	fp, #4
1e668     A7 FC 61 FC | 	wrlong	result2, fp
1e66c     04 4E 05 F1 | 	add	fp, #4
1e670     A7 2A 62 FC | 	wrlong	local03, fp
1e674                 | ' 
1e674                 | ' t2=pop()
1e674                 | ' t1=pop()
1e674                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1e674     08 4E 85 F1 | 	sub	fp, #8
1e678     1D 2A 0E F2 | 	cmp	local03, #29 wz
1e67c     14 4E 05 A1 |  if_e	add	fp, #20
1e680     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e684     14 4E 85 A1 |  if_e	sub	fp, #20
1e688     16 2B 02 A6 |  if_e	mov	local03, local04
1e68c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e690     5C 00 90 5D |  if_ne	jmp	#LR__2461
1e694                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1e694     0C 4E 05 F1 | 	add	fp, #12
1e698     A7 26 02 FB | 	rdlong	local01, fp
1e69c     0C 4E 85 F1 | 	sub	fp, #12
1e6a0     A7 2A 02 FB | 	rdlong	local03, fp
1e6a4     15 27 12 F2 | 	cmp	local01, local03 wc
1e6a8     1C 00 90 3D |  if_ae	jmp	#LR__2460
1e6ac     A7 26 02 FB | 	rdlong	local01, fp
1e6b0     0C 4E 05 F1 | 	add	fp, #12
1e6b4     A7 28 02 FB | 	rdlong	local02, fp
1e6b8     0C 4E 85 F1 | 	sub	fp, #12
1e6bc     14 27 82 F1 | 	sub	local01, local02
1e6c0     A7 26 62 FC | 	wrlong	local01, fp
1e6c4     F4 02 90 FD | 	jmp	#LR__2470
1e6c8                 | LR__2460
1e6c8     A7 26 02 FB | 	rdlong	local01, fp
1e6cc     0C 4E 05 F1 | 	add	fp, #12
1e6d0     A7 28 02 FB | 	rdlong	local02, fp
1e6d4     0C 4E 85 F1 | 	sub	fp, #12
1e6d8     14 27 82 F1 | 	sub	local01, local02
1e6dc     A7 26 62 FC | 	wrlong	local01, fp
1e6e0     08 4E 05 F1 | 	add	fp, #8
1e6e4     A7 38 68 FC | 	wrlong	#28, fp
1e6e8     08 4E 85 F1 | 	sub	fp, #8
1e6ec     CC 02 90 FD | 	jmp	#LR__2470
1e6f0                 | LR__2461
1e6f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1e6f0     08 4E 05 F1 | 	add	fp, #8
1e6f4     A7 26 02 FB | 	rdlong	local01, fp
1e6f8     08 4E 85 F1 | 	sub	fp, #8
1e6fc     1D 26 0E F2 | 	cmp	local01, #29 wz
1e700     14 4E 05 A1 |  if_e	add	fp, #20
1e704     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e708     14 4E 85 A1 |  if_e	sub	fp, #20
1e70c     16 2B 02 A6 |  if_e	mov	local03, local04
1e710     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e714     28 00 90 5D |  if_ne	jmp	#LR__2462
1e718     A7 26 02 FB | 	rdlong	local01, fp
1e71c     0C 4E 05 F1 | 	add	fp, #12
1e720     A7 28 02 FB | 	rdlong	local02, fp
1e724     0C 4E 85 F1 | 	sub	fp, #12
1e728     14 27 82 F1 | 	sub	local01, local02
1e72c     A7 26 62 FC | 	wrlong	local01, fp
1e730     08 4E 05 F1 | 	add	fp, #8
1e734     A7 38 68 FC | 	wrlong	#28, fp
1e738     08 4E 85 F1 | 	sub	fp, #8
1e73c     7C 02 90 FD | 	jmp	#LR__2470
1e740                 | LR__2462
1e740                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1e740     08 4E 05 F1 | 	add	fp, #8
1e744     A7 26 02 FB | 	rdlong	local01, fp
1e748     08 4E 85 F1 | 	sub	fp, #8
1e74c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e750     14 4E 05 A1 |  if_e	add	fp, #20
1e754     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e758     14 4E 85 A1 |  if_e	sub	fp, #20
1e75c     16 2B 02 A6 |  if_e	mov	local03, local04
1e760     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e764     34 00 90 5D |  if_ne	jmp	#LR__2463
1e768     A7 12 02 FB | 	rdlong	arg01, fp
1e76c     7C 9C B0 FD | 	call	#__system___float_fromuns
1e770     FD 12 02 F6 | 	mov	arg01, result1
1e774     0C 4E 05 F1 | 	add	fp, #12
1e778     A7 14 02 FB | 	rdlong	arg02, fp
1e77c     0C 4E 85 F1 | 	sub	fp, #12
1e780     1F 14 E6 F4 | 	bitnot	arg02, #31
1e784     98 9C B0 FD | 	call	#__system___float_add
1e788     A7 FA 61 FC | 	wrlong	result1, fp
1e78c     08 4E 05 F1 | 	add	fp, #8
1e790     A7 3C 68 FC | 	wrlong	#30, fp
1e794     08 4E 85 F1 | 	sub	fp, #8
1e798     20 02 90 FD | 	jmp	#LR__2470
1e79c                 | LR__2463
1e79c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1e79c     08 4E 05 F1 | 	add	fp, #8
1e7a0     A7 26 02 FB | 	rdlong	local01, fp
1e7a4     08 4E 85 F1 | 	sub	fp, #8
1e7a8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e7ac     14 4E 05 A1 |  if_e	add	fp, #20
1e7b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7b4     14 4E 85 A1 |  if_e	sub	fp, #20
1e7b8     16 2B 02 A6 |  if_e	mov	local03, local04
1e7bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e7c0     1C 00 90 5D |  if_ne	jmp	#LR__2464
1e7c4     A7 26 02 FB | 	rdlong	local01, fp
1e7c8     0C 4E 05 F1 | 	add	fp, #12
1e7cc     A7 28 02 FB | 	rdlong	local02, fp
1e7d0     0C 4E 85 F1 | 	sub	fp, #12
1e7d4     14 27 82 F1 | 	sub	local01, local02
1e7d8     A7 26 62 FC | 	wrlong	local01, fp
1e7dc     DC 01 90 FD | 	jmp	#LR__2470
1e7e0                 | LR__2464
1e7e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1e7e0     08 4E 05 F1 | 	add	fp, #8
1e7e4     A7 26 02 FB | 	rdlong	local01, fp
1e7e8     08 4E 85 F1 | 	sub	fp, #8
1e7ec     1C 26 0E F2 | 	cmp	local01, #28 wz
1e7f0     14 4E 05 A1 |  if_e	add	fp, #20
1e7f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7f8     14 4E 85 A1 |  if_e	sub	fp, #20
1e7fc     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1e800     1C 00 90 5D |  if_ne	jmp	#LR__2465
1e804     A7 26 02 FB | 	rdlong	local01, fp
1e808     0C 4E 05 F1 | 	add	fp, #12
1e80c     A7 28 02 FB | 	rdlong	local02, fp
1e810     0C 4E 85 F1 | 	sub	fp, #12
1e814     14 27 82 F1 | 	sub	local01, local02
1e818     A7 26 62 FC | 	wrlong	local01, fp
1e81c     9C 01 90 FD | 	jmp	#LR__2470
1e820                 | LR__2465
1e820                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1e820     08 4E 05 F1 | 	add	fp, #8
1e824     A7 26 02 FB | 	rdlong	local01, fp
1e828     08 4E 85 F1 | 	sub	fp, #8
1e82c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e830     14 4E 05 A1 |  if_e	add	fp, #20
1e834     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e838     14 4E 85 A1 |  if_e	sub	fp, #20
1e83c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e840     44 00 90 5D |  if_ne	jmp	#LR__2466
1e844     A7 12 02 FB | 	rdlong	arg01, fp
1e848     09 13 52 F6 | 	abs	arg01, arg01 wc
1e84c     1F 2E C6 C9 |  if_b	decod	local05, #31
1e850     00 2E 06 36 |  if_ae	mov	local05, #0
1e854     94 9B B0 FD | 	call	#__system___float_fromuns
1e858     17 FB 61 F5 | 	xor	result1, local05
1e85c     FD 12 02 F6 | 	mov	arg01, result1
1e860     0C 4E 05 F1 | 	add	fp, #12
1e864     A7 14 02 FB | 	rdlong	arg02, fp
1e868     0C 4E 85 F1 | 	sub	fp, #12
1e86c     1F 14 E6 F4 | 	bitnot	arg02, #31
1e870     AC 9B B0 FD | 	call	#__system___float_add
1e874     A7 FA 61 FC | 	wrlong	result1, fp
1e878     08 4E 05 F1 | 	add	fp, #8
1e87c     A7 3C 68 FC | 	wrlong	#30, fp
1e880     08 4E 85 F1 | 	sub	fp, #8
1e884     34 01 90 FD | 	jmp	#LR__2470
1e888                 | LR__2466
1e888                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1e888     08 4E 05 F1 | 	add	fp, #8
1e88c     A7 26 02 FB | 	rdlong	local01, fp
1e890     08 4E 85 F1 | 	sub	fp, #8
1e894     1E 26 0E F2 | 	cmp	local01, #30 wz
1e898     14 4E 05 A1 |  if_e	add	fp, #20
1e89c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e8a0     14 4E 85 A1 |  if_e	sub	fp, #20
1e8a4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e8a8     2C 00 90 5D |  if_ne	jmp	#LR__2467
1e8ac     A7 26 02 FB | 	rdlong	local01, fp
1e8b0     0C 4E 05 F1 | 	add	fp, #12
1e8b4     A7 12 02 FB | 	rdlong	arg01, fp
1e8b8     0C 4E 85 F1 | 	sub	fp, #12
1e8bc     2C 9B B0 FD | 	call	#__system___float_fromuns
1e8c0     FD 14 02 F6 | 	mov	arg02, result1
1e8c4     13 13 02 F6 | 	mov	arg01, local01
1e8c8     1F 14 E6 F4 | 	bitnot	arg02, #31
1e8cc     50 9B B0 FD | 	call	#__system___float_add
1e8d0     A7 FA 61 FC | 	wrlong	result1, fp
1e8d4     E4 00 90 FD | 	jmp	#LR__2470
1e8d8                 | LR__2467
1e8d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1e8d8     08 4E 05 F1 | 	add	fp, #8
1e8dc     A7 26 02 FB | 	rdlong	local01, fp
1e8e0     08 4E 85 F1 | 	sub	fp, #8
1e8e4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e8e8     14 4E 05 A1 |  if_e	add	fp, #20
1e8ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e8f0     14 4E 85 A1 |  if_e	sub	fp, #20
1e8f4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e8f8     3C 00 90 5D |  if_ne	jmp	#LR__2468
1e8fc     A7 26 02 FB | 	rdlong	local01, fp
1e900     0C 4E 05 F1 | 	add	fp, #12
1e904     A7 12 02 FB | 	rdlong	arg01, fp
1e908     0C 4E 85 F1 | 	sub	fp, #12
1e90c     09 13 52 F6 | 	abs	arg01, arg01 wc
1e910     1F 2E C6 C9 |  if_b	decod	local05, #31
1e914     00 2E 06 36 |  if_ae	mov	local05, #0
1e918     D0 9A B0 FD | 	call	#__system___float_fromuns
1e91c     17 FB 61 F5 | 	xor	result1, local05
1e920     FD 14 02 F6 | 	mov	arg02, result1
1e924     13 13 02 F6 | 	mov	arg01, local01
1e928     1F 14 E6 F4 | 	bitnot	arg02, #31
1e92c     F0 9A B0 FD | 	call	#__system___float_add
1e930     A7 FA 61 FC | 	wrlong	result1, fp
1e934     84 00 90 FD | 	jmp	#LR__2470
1e938                 | LR__2468
1e938                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1e938     08 4E 05 F1 | 	add	fp, #8
1e93c     A7 26 02 FB | 	rdlong	local01, fp
1e940     08 4E 85 F1 | 	sub	fp, #8
1e944     1E 26 0E F2 | 	cmp	local01, #30 wz
1e948     14 4E 05 A1 |  if_e	add	fp, #20
1e94c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e950     14 4E 85 A1 |  if_e	sub	fp, #20
1e954     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e958     20 00 90 5D |  if_ne	jmp	#LR__2469
1e95c     A7 12 02 FB | 	rdlong	arg01, fp
1e960     0C 4E 05 F1 | 	add	fp, #12
1e964     A7 14 02 FB | 	rdlong	arg02, fp
1e968     0C 4E 85 F1 | 	sub	fp, #12
1e96c     1F 14 E6 F4 | 	bitnot	arg02, #31
1e970     AC 9A B0 FD | 	call	#__system___float_add
1e974     A7 FA 61 FC | 	wrlong	result1, fp
1e978     40 00 90 FD | 	jmp	#LR__2470
1e97c                 | LR__2469
1e97c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1e97c     08 4E 05 F1 | 	add	fp, #8
1e980     A7 26 02 FB | 	rdlong	local01, fp
1e984     08 4E 85 F1 | 	sub	fp, #8
1e988     1F 26 0E F2 | 	cmp	local01, #31 wz
1e98c     14 4E 05 51 |  if_ne	add	fp, #20
1e990     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1e994     14 4E 85 51 |  if_ne	sub	fp, #20
1e998     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1e99c     A7 06 68 AC |  if_e	wrlong	#3, fp
1e9a0     08 4E 05 A1 |  if_e	add	fp, #8
1e9a4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e9a8     08 4E 85 A1 |  if_e	sub	fp, #8
1e9ac     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1e9b0     08 4E 05 51 |  if_ne	add	fp, #8
1e9b4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1e9b8     08 4E 85 51 |  if_ne	sub	fp, #8
1e9bc                 | LR__2470
1e9bc     A7 12 02 F6 | 	mov	arg01, fp
1e9c0     54 E3 BE FD | 	call	#_push
1e9c4     A7 F0 03 F6 | 	mov	ptra, fp
1e9c8     B2 00 A0 FD | 	call	#popregs_
1e9cc                 | _do_minus_ret
1e9cc     2D 00 64 FD | 	ret
1e9d0                 | 
1e9d0                 | ' 
1e9d0                 | ' '--------------------------------- negative (-), one argument negative
1e9d0                 | ' 
1e9d0                 | ' sub do_negative
1e9d0                 | _do_negative
1e9d0     02 4A 05 F6 | 	mov	COUNT_, #2
1e9d4     A8 00 A0 FD | 	call	#pushregs_
1e9d8     0C F0 07 F1 | 	add	ptra, #12
1e9dc     A0 E2 BE FD | 	call	#_pop
1e9e0     FF 26 02 F6 | 	mov	local01, result3
1e9e4     A7 FA 61 FC | 	wrlong	result1, fp
1e9e8     04 4E 05 F1 | 	add	fp, #4
1e9ec     A7 FC 61 FC | 	wrlong	result2, fp
1e9f0     04 4E 05 F1 | 	add	fp, #4
1e9f4     A7 26 62 FC | 	wrlong	local01, fp
1e9f8                 | ' 
1e9f8                 | ' t1=pop()
1e9f8                 | ' if t1.result_type=result_int then 
1e9f8     08 4E 85 F1 | 	sub	fp, #8
1e9fc     1C 26 0E F2 | 	cmp	local01, #28 wz
1ea00     A7 28 02 AB |  if_e	rdlong	local02, fp
1ea04     14 27 62 A6 |  if_e	neg	local01, local02
1ea08     A7 26 62 AC |  if_e	wrlong	local01, fp
1ea0c     5C 00 90 AD |  if_e	jmp	#LR__2482
1ea10     08 4E 05 F1 | 	add	fp, #8
1ea14     A7 26 02 FB | 	rdlong	local01, fp
1ea18     08 4E 85 F1 | 	sub	fp, #8
1ea1c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ea20     1C 00 90 5D |  if_ne	jmp	#LR__2480
1ea24     A7 28 02 FB | 	rdlong	local02, fp
1ea28     14 27 62 F6 | 	neg	local01, local02
1ea2c     A7 26 62 FC | 	wrlong	local01, fp
1ea30     08 4E 05 F1 | 	add	fp, #8
1ea34     A7 38 68 FC | 	wrlong	#28, fp
1ea38     08 4E 85 F1 | 	sub	fp, #8
1ea3c     2C 00 90 FD | 	jmp	#LR__2481
1ea40                 | LR__2480
1ea40     08 4E 05 F1 | 	add	fp, #8
1ea44     A7 26 02 FB | 	rdlong	local01, fp
1ea48     08 4E 85 F1 | 	sub	fp, #8
1ea4c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ea50     A7 FA 01 AB |  if_e	rdlong	result1, fp
1ea54     1F FA E5 A4 |  if_e	bitnot	result1, #31
1ea58     A7 FA 61 AC |  if_e	wrlong	result1, fp
1ea5c     08 4E 05 51 |  if_ne	add	fp, #8
1ea60     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ea64     08 4E 85 51 |  if_ne	sub	fp, #8
1ea68     A7 50 68 5C |  if_ne	wrlong	#40, fp
1ea6c                 | LR__2481
1ea6c                 | LR__2482
1ea6c     A7 12 02 F6 | 	mov	arg01, fp
1ea70     A4 E2 BE FD | 	call	#_push
1ea74     A7 F0 03 F6 | 	mov	ptra, fp
1ea78     B2 00 A0 FD | 	call	#popregs_
1ea7c                 | _do_negative_ret
1ea7c     2D 00 64 FD | 	ret
1ea80                 | 
1ea80                 | ' 
1ea80                 | ' '--------------------------------- MOD (modulo)
1ea80                 | ' 
1ea80                 | ' sub do_mod 
1ea80                 | _do_mod
1ea80     01 4A 05 F6 | 	mov	COUNT_, #1
1ea84     A8 00 A0 FD | 	call	#pushregs_
1ea88     18 F0 07 F1 | 	add	ptra, #24
1ea8c     F0 E1 BE FD | 	call	#_pop
1ea90     FD 8A 02 F6 | 	mov	muldivb_, result1
1ea94     FE 88 02 F6 | 	mov	muldiva_, result2
1ea98     FF 26 02 F6 | 	mov	local01, result3
1ea9c     0C 4E 05 F1 | 	add	fp, #12
1eaa0     A7 8A 62 FC | 	wrlong	muldivb_, fp
1eaa4     04 4E 05 F1 | 	add	fp, #4
1eaa8     A7 88 62 FC | 	wrlong	muldiva_, fp
1eaac     04 4E 05 F1 | 	add	fp, #4
1eab0     A7 26 62 FC | 	wrlong	local01, fp
1eab4     14 4E 85 F1 | 	sub	fp, #20
1eab8     C4 E1 BE FD | 	call	#_pop
1eabc     A7 FA 61 FC | 	wrlong	result1, fp
1eac0     04 4E 05 F1 | 	add	fp, #4
1eac4     A7 FC 61 FC | 	wrlong	result2, fp
1eac8     04 4E 05 F1 | 	add	fp, #4
1eacc     A7 FE 61 FC | 	wrlong	result3, fp
1ead0                 | ' 
1ead0                 | ' t2=pop()
1ead0                 | ' t1=pop()
1ead0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1ead0     08 4E 85 F1 | 	sub	fp, #8
1ead4     1F FE 0D F2 | 	cmp	result3, #31 wz
1ead8     14 4E 05 51 |  if_ne	add	fp, #20
1eadc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1eae0     14 4E 85 51 |  if_ne	sub	fp, #20
1eae4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1eae8     A7 14 68 AC |  if_e	wrlong	#10, fp
1eaec     08 4E 05 A1 |  if_e	add	fp, #8
1eaf0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1eaf4     08 4E 85 A1 |  if_e	sub	fp, #8
1eaf8     90 01 90 AD |  if_e	jmp	#LR__2496
1eafc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1eafc     08 4E 05 F1 | 	add	fp, #8
1eb00     A7 8A 02 FB | 	rdlong	muldivb_, fp
1eb04     08 4E 85 F1 | 	sub	fp, #8
1eb08     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1eb0c     1C 00 90 5D |  if_ne	jmp	#LR__2490
1eb10     08 4E 05 F1 | 	add	fp, #8
1eb14     A7 38 68 FC | 	wrlong	#28, fp
1eb18     08 4E 85 F1 | 	sub	fp, #8
1eb1c     A7 12 02 FB | 	rdlong	arg01, fp
1eb20     00 14 06 F6 | 	mov	arg02, #0
1eb24     90 A1 B0 FD | 	call	#__system___float_tointeger
1eb28     A7 FA 61 FC | 	wrlong	result1, fp
1eb2c                 | LR__2490
1eb2c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1eb2c     14 4E 05 F1 | 	add	fp, #20
1eb30     A7 8A 02 FB | 	rdlong	muldivb_, fp
1eb34     14 4E 85 F1 | 	sub	fp, #20
1eb38     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1eb3c     28 00 90 5D |  if_ne	jmp	#LR__2491
1eb40     14 4E 05 F1 | 	add	fp, #20
1eb44     A7 38 68 FC | 	wrlong	#28, fp
1eb48     08 4E 85 F1 | 	sub	fp, #8
1eb4c     A7 12 02 FB | 	rdlong	arg01, fp
1eb50     0C 4E 85 F1 | 	sub	fp, #12
1eb54     00 14 06 F6 | 	mov	arg02, #0
1eb58     5C A1 B0 FD | 	call	#__system___float_tointeger
1eb5c     0C 4E 05 F1 | 	add	fp, #12
1eb60     A7 FA 61 FC | 	wrlong	result1, fp
1eb64     0C 4E 85 F1 | 	sub	fp, #12
1eb68                 | LR__2491
1eb68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1eb68     08 4E 05 F1 | 	add	fp, #8
1eb6c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1eb70     08 4E 85 F1 | 	sub	fp, #8
1eb74     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1eb78     14 4E 05 A1 |  if_e	add	fp, #20
1eb7c     A7 26 02 AB |  if_e	rdlong	local01, fp
1eb80     14 4E 85 A1 |  if_e	sub	fp, #20
1eb84     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1eb88     20 00 90 5D |  if_ne	jmp	#LR__2492
1eb8c     0C 4E 05 F1 | 	add	fp, #12
1eb90     A7 26 02 FB | 	rdlong	local01, fp
1eb94     0C 4E 85 F1 | 	sub	fp, #12
1eb98     A7 8A 02 FB | 	rdlong	muldivb_, fp
1eb9c     13 8B 12 FD | 	qdiv	muldivb_, local01
1eba0     19 26 62 FD | 	getqy	local01
1eba4     A7 26 62 FC | 	wrlong	local01, fp
1eba8     E0 00 90 FD | 	jmp	#LR__2496
1ebac                 | LR__2492
1ebac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1ebac     08 4E 05 F1 | 	add	fp, #8
1ebb0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ebb4     08 4E 85 F1 | 	sub	fp, #8
1ebb8     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1ebbc     14 4E 05 A1 |  if_e	add	fp, #20
1ebc0     A7 26 02 AB |  if_e	rdlong	local01, fp
1ebc4     14 4E 85 A1 |  if_e	sub	fp, #20
1ebc8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1ebcc     2C 00 90 5D |  if_ne	jmp	#LR__2493
1ebd0     0C 4E 05 F1 | 	add	fp, #12
1ebd4     A7 26 02 FB | 	rdlong	local01, fp
1ebd8     0C 4E 85 F1 | 	sub	fp, #12
1ebdc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ebe0     13 8B 12 FD | 	qdiv	muldivb_, local01
1ebe4     19 26 62 FD | 	getqy	local01
1ebe8     A7 26 62 FC | 	wrlong	local01, fp
1ebec     08 4E 05 F1 | 	add	fp, #8
1ebf0     A7 38 68 FC | 	wrlong	#28, fp
1ebf4     08 4E 85 F1 | 	sub	fp, #8
1ebf8     90 00 90 FD | 	jmp	#LR__2496
1ebfc                 | LR__2493
1ebfc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1ebfc     08 4E 05 F1 | 	add	fp, #8
1ec00     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ec04     08 4E 85 F1 | 	sub	fp, #8
1ec08     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1ec0c     14 4E 05 A1 |  if_e	add	fp, #20
1ec10     A7 26 02 AB |  if_e	rdlong	local01, fp
1ec14     14 4E 85 A1 |  if_e	sub	fp, #20
1ec18     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1ec1c     1C 00 90 5D |  if_ne	jmp	#LR__2494
1ec20     A7 88 02 FB | 	rdlong	muldiva_, fp
1ec24     0C 4E 05 F1 | 	add	fp, #12
1ec28     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ec2c     0C 4E 85 F1 | 	sub	fp, #12
1ec30     BA 00 A0 FD | 	call	#divide_
1ec34     A7 88 62 FC | 	wrlong	muldiva_, fp
1ec38     50 00 90 FD | 	jmp	#LR__2496
1ec3c                 | LR__2494
1ec3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1ec3c     08 4E 05 F1 | 	add	fp, #8
1ec40     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ec44     08 4E 85 F1 | 	sub	fp, #8
1ec48     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1ec4c     14 4E 05 A1 |  if_e	add	fp, #20
1ec50     A7 26 02 AB |  if_e	rdlong	local01, fp
1ec54     14 4E 85 A1 |  if_e	sub	fp, #20
1ec58     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1ec5c     1C 00 90 5D |  if_ne	jmp	#LR__2495
1ec60     A7 88 02 FB | 	rdlong	muldiva_, fp
1ec64     0C 4E 05 F1 | 	add	fp, #12
1ec68     A7 8A 02 FB | 	rdlong	muldivb_, fp
1ec6c     0C 4E 85 F1 | 	sub	fp, #12
1ec70     BA 00 A0 FD | 	call	#divide_
1ec74     A7 88 62 FC | 	wrlong	muldiva_, fp
1ec78     10 00 90 FD | 	jmp	#LR__2496
1ec7c                 | LR__2495
1ec7c     A7 16 68 FC | 	wrlong	#11, fp
1ec80     08 4E 05 F1 | 	add	fp, #8
1ec84     A7 FE 69 FC | 	wrlong	#255, fp
1ec88     08 4E 85 F1 | 	sub	fp, #8
1ec8c                 | LR__2496
1ec8c     A7 12 02 F6 | 	mov	arg01, fp
1ec90     84 E0 BE FD | 	call	#_push
1ec94     A7 F0 03 F6 | 	mov	ptra, fp
1ec98     B2 00 A0 FD | 	call	#popregs_
1ec9c                 | _do_mod_ret
1ec9c     2D 00 64 FD | 	ret
1eca0                 | 
1eca0                 | ' 
1eca0                 | ' '--------------------------------- mul (*)
1eca0                 | ' 
1eca0                 | ' sub do_mul
1eca0                 | _do_mul
1eca0     05 4A 05 F6 | 	mov	COUNT_, #5
1eca4     A8 00 A0 FD | 	call	#pushregs_
1eca8     18 F0 07 F1 | 	add	ptra, #24
1ecac     D0 DF BE FD | 	call	#_pop
1ecb0     FD 26 02 F6 | 	mov	local01, result1
1ecb4     FE 28 02 F6 | 	mov	local02, result2
1ecb8     FF 2A 02 F6 | 	mov	local03, result3
1ecbc     0C 4E 05 F1 | 	add	fp, #12
1ecc0     A7 26 62 FC | 	wrlong	local01, fp
1ecc4     04 4E 05 F1 | 	add	fp, #4
1ecc8     A7 28 62 FC | 	wrlong	local02, fp
1eccc     04 4E 05 F1 | 	add	fp, #4
1ecd0     A7 2A 62 FC | 	wrlong	local03, fp
1ecd4     14 4E 85 F1 | 	sub	fp, #20
1ecd8     A4 DF BE FD | 	call	#_pop
1ecdc     FF 2A 02 F6 | 	mov	local03, result3
1ece0     A7 FA 61 FC | 	wrlong	result1, fp
1ece4     04 4E 05 F1 | 	add	fp, #4
1ece8     A7 FC 61 FC | 	wrlong	result2, fp
1ecec     04 4E 05 F1 | 	add	fp, #4
1ecf0     A7 2A 62 FC | 	wrlong	local03, fp
1ecf4                 | ' 
1ecf4                 | ' t2=pop()
1ecf4                 | ' t1=pop()
1ecf4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1ecf4     08 4E 85 F1 | 	sub	fp, #8
1ecf8     1D 2A 0E F2 | 	cmp	local03, #29 wz
1ecfc     14 4E 05 A1 |  if_e	add	fp, #20
1ed00     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed04     14 4E 85 A1 |  if_e	sub	fp, #20
1ed08     16 2B 02 A6 |  if_e	mov	local03, local04
1ed0c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ed10     20 00 90 5D |  if_ne	jmp	#LR__2500
1ed14     A7 28 02 FB | 	rdlong	local02, fp
1ed18     0C 4E 05 F1 | 	add	fp, #12
1ed1c     A7 2A 02 FB | 	rdlong	local03, fp
1ed20     15 29 02 FD | 	qmul	local02, local03
1ed24     0C 4E 85 F1 | 	sub	fp, #12
1ed28     18 26 62 FD | 	getqx	local01
1ed2c     A7 26 62 FC | 	wrlong	local01, fp
1ed30     C4 02 90 FD | 	jmp	#LR__2509
1ed34                 | LR__2500
1ed34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1ed34     08 4E 05 F1 | 	add	fp, #8
1ed38     A7 26 02 FB | 	rdlong	local01, fp
1ed3c     08 4E 85 F1 | 	sub	fp, #8
1ed40     1D 26 0E F2 | 	cmp	local01, #29 wz
1ed44     14 4E 05 A1 |  if_e	add	fp, #20
1ed48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed4c     14 4E 85 A1 |  if_e	sub	fp, #20
1ed50     16 2B 02 A6 |  if_e	mov	local03, local04
1ed54     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ed58     2C 00 90 5D |  if_ne	jmp	#LR__2501
1ed5c     A7 28 02 FB | 	rdlong	local02, fp
1ed60     0C 4E 05 F1 | 	add	fp, #12
1ed64     A7 2A 02 FB | 	rdlong	local03, fp
1ed68     15 29 02 FD | 	qmul	local02, local03
1ed6c     0C 4E 85 F1 | 	sub	fp, #12
1ed70     18 26 62 FD | 	getqx	local01
1ed74     A7 26 62 FC | 	wrlong	local01, fp
1ed78     08 4E 05 F1 | 	add	fp, #8
1ed7c     A7 38 68 FC | 	wrlong	#28, fp
1ed80     08 4E 85 F1 | 	sub	fp, #8
1ed84     70 02 90 FD | 	jmp	#LR__2509
1ed88                 | LR__2501
1ed88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1ed88     08 4E 05 F1 | 	add	fp, #8
1ed8c     A7 26 02 FB | 	rdlong	local01, fp
1ed90     08 4E 85 F1 | 	sub	fp, #8
1ed94     1D 26 0E F2 | 	cmp	local01, #29 wz
1ed98     14 4E 05 A1 |  if_e	add	fp, #20
1ed9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eda0     14 4E 85 A1 |  if_e	sub	fp, #20
1eda4     16 2B 02 A6 |  if_e	mov	local03, local04
1eda8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1edac     30 00 90 5D |  if_ne	jmp	#LR__2502
1edb0     A7 12 02 FB | 	rdlong	arg01, fp
1edb4     34 96 B0 FD | 	call	#__system___float_fromuns
1edb8     FD 12 02 F6 | 	mov	arg01, result1
1edbc     0C 4E 05 F1 | 	add	fp, #12
1edc0     A7 14 02 FB | 	rdlong	arg02, fp
1edc4     0C 4E 85 F1 | 	sub	fp, #12
1edc8     24 9A B0 FD | 	call	#__system___float_mul
1edcc     A7 FA 61 FC | 	wrlong	result1, fp
1edd0     08 4E 05 F1 | 	add	fp, #8
1edd4     A7 3C 68 FC | 	wrlong	#30, fp
1edd8     08 4E 85 F1 | 	sub	fp, #8
1eddc     18 02 90 FD | 	jmp	#LR__2509
1ede0                 | LR__2502
1ede0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1ede0     08 4E 05 F1 | 	add	fp, #8
1ede4     A7 26 02 FB | 	rdlong	local01, fp
1ede8     08 4E 85 F1 | 	sub	fp, #8
1edec     1C 26 0E F2 | 	cmp	local01, #28 wz
1edf0     14 4E 05 A1 |  if_e	add	fp, #20
1edf4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edf8     14 4E 85 A1 |  if_e	sub	fp, #20
1edfc     16 2B 02 A6 |  if_e	mov	local03, local04
1ee00     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee04     20 00 90 5D |  if_ne	jmp	#LR__2503
1ee08     A7 28 02 FB | 	rdlong	local02, fp
1ee0c     0C 4E 05 F1 | 	add	fp, #12
1ee10     A7 2A 02 FB | 	rdlong	local03, fp
1ee14     15 29 02 FD | 	qmul	local02, local03
1ee18     0C 4E 85 F1 | 	sub	fp, #12
1ee1c     18 26 62 FD | 	getqx	local01
1ee20     A7 26 62 FC | 	wrlong	local01, fp
1ee24     D0 01 90 FD | 	jmp	#LR__2509
1ee28                 | LR__2503
1ee28                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1ee28     08 4E 05 F1 | 	add	fp, #8
1ee2c     A7 26 02 FB | 	rdlong	local01, fp
1ee30     08 4E 85 F1 | 	sub	fp, #8
1ee34     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee38     14 4E 05 A1 |  if_e	add	fp, #20
1ee3c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee40     14 4E 85 A1 |  if_e	sub	fp, #20
1ee44     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1ee48     20 00 90 5D |  if_ne	jmp	#LR__2504
1ee4c     A7 28 02 FB | 	rdlong	local02, fp
1ee50     0C 4E 05 F1 | 	add	fp, #12
1ee54     A7 2A 02 FB | 	rdlong	local03, fp
1ee58     15 29 02 FD | 	qmul	local02, local03
1ee5c     0C 4E 85 F1 | 	sub	fp, #12
1ee60     18 26 62 FD | 	getqx	local01
1ee64     A7 26 62 FC | 	wrlong	local01, fp
1ee68     8C 01 90 FD | 	jmp	#LR__2509
1ee6c                 | LR__2504
1ee6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1ee6c     08 4E 05 F1 | 	add	fp, #8
1ee70     A7 26 02 FB | 	rdlong	local01, fp
1ee74     08 4E 85 F1 | 	sub	fp, #8
1ee78     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee7c     14 4E 05 A1 |  if_e	add	fp, #20
1ee80     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee84     14 4E 85 A1 |  if_e	sub	fp, #20
1ee88     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ee8c     40 00 90 5D |  if_ne	jmp	#LR__2505
1ee90     A7 12 02 FB | 	rdlong	arg01, fp
1ee94     09 13 52 F6 | 	abs	arg01, arg01 wc
1ee98     1F 2E C6 C9 |  if_b	decod	local05, #31
1ee9c     00 2E 06 36 |  if_ae	mov	local05, #0
1eea0     48 95 B0 FD | 	call	#__system___float_fromuns
1eea4     17 FB 61 F5 | 	xor	result1, local05
1eea8     FD 12 02 F6 | 	mov	arg01, result1
1eeac     0C 4E 05 F1 | 	add	fp, #12
1eeb0     A7 14 02 FB | 	rdlong	arg02, fp
1eeb4     0C 4E 85 F1 | 	sub	fp, #12
1eeb8     34 99 B0 FD | 	call	#__system___float_mul
1eebc     A7 FA 61 FC | 	wrlong	result1, fp
1eec0     08 4E 05 F1 | 	add	fp, #8
1eec4     A7 3C 68 FC | 	wrlong	#30, fp
1eec8     08 4E 85 F1 | 	sub	fp, #8
1eecc     28 01 90 FD | 	jmp	#LR__2509
1eed0                 | LR__2505
1eed0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1eed0     08 4E 05 F1 | 	add	fp, #8
1eed4     A7 26 02 FB | 	rdlong	local01, fp
1eed8     08 4E 85 F1 | 	sub	fp, #8
1eedc     1E 26 0E F2 | 	cmp	local01, #30 wz
1eee0     14 4E 05 A1 |  if_e	add	fp, #20
1eee4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eee8     14 4E 85 A1 |  if_e	sub	fp, #20
1eeec     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eef0     28 00 90 5D |  if_ne	jmp	#LR__2506
1eef4     A7 26 02 FB | 	rdlong	local01, fp
1eef8     0C 4E 05 F1 | 	add	fp, #12
1eefc     A7 12 02 FB | 	rdlong	arg01, fp
1ef00     0C 4E 85 F1 | 	sub	fp, #12
1ef04     E4 94 B0 FD | 	call	#__system___float_fromuns
1ef08     FD 14 02 F6 | 	mov	arg02, result1
1ef0c     13 13 02 F6 | 	mov	arg01, local01
1ef10     DC 98 B0 FD | 	call	#__system___float_mul
1ef14     A7 FA 61 FC | 	wrlong	result1, fp
1ef18     DC 00 90 FD | 	jmp	#LR__2509
1ef1c                 | LR__2506
1ef1c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1ef1c     08 4E 05 F1 | 	add	fp, #8
1ef20     A7 26 02 FB | 	rdlong	local01, fp
1ef24     08 4E 85 F1 | 	sub	fp, #8
1ef28     1E 26 0E F2 | 	cmp	local01, #30 wz
1ef2c     14 4E 05 A1 |  if_e	add	fp, #20
1ef30     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef34     14 4E 85 A1 |  if_e	sub	fp, #20
1ef38     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ef3c     38 00 90 5D |  if_ne	jmp	#LR__2507
1ef40     A7 26 02 FB | 	rdlong	local01, fp
1ef44     0C 4E 05 F1 | 	add	fp, #12
1ef48     A7 12 02 FB | 	rdlong	arg01, fp
1ef4c     0C 4E 85 F1 | 	sub	fp, #12
1ef50     09 13 52 F6 | 	abs	arg01, arg01 wc
1ef54     1F 2E C6 C9 |  if_b	decod	local05, #31
1ef58     00 2E 06 36 |  if_ae	mov	local05, #0
1ef5c     8C 94 B0 FD | 	call	#__system___float_fromuns
1ef60     17 FB 61 F5 | 	xor	result1, local05
1ef64     FD 14 02 F6 | 	mov	arg02, result1
1ef68     13 13 02 F6 | 	mov	arg01, local01
1ef6c     80 98 B0 FD | 	call	#__system___float_mul
1ef70     A7 FA 61 FC | 	wrlong	result1, fp
1ef74     80 00 90 FD | 	jmp	#LR__2509
1ef78                 | LR__2507
1ef78                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1ef78     08 4E 05 F1 | 	add	fp, #8
1ef7c     A7 26 02 FB | 	rdlong	local01, fp
1ef80     08 4E 85 F1 | 	sub	fp, #8
1ef84     1E 26 0E F2 | 	cmp	local01, #30 wz
1ef88     14 4E 05 A1 |  if_e	add	fp, #20
1ef8c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef90     14 4E 85 A1 |  if_e	sub	fp, #20
1ef94     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ef98     1C 00 90 5D |  if_ne	jmp	#LR__2508
1ef9c     A7 12 02 FB | 	rdlong	arg01, fp
1efa0     0C 4E 05 F1 | 	add	fp, #12
1efa4     A7 14 02 FB | 	rdlong	arg02, fp
1efa8     0C 4E 85 F1 | 	sub	fp, #12
1efac     40 98 B0 FD | 	call	#__system___float_mul
1efb0     A7 FA 61 FC | 	wrlong	result1, fp
1efb4     40 00 90 FD | 	jmp	#LR__2509
1efb8                 | LR__2508
1efb8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1efb8     08 4E 05 F1 | 	add	fp, #8
1efbc     A7 26 02 FB | 	rdlong	local01, fp
1efc0     08 4E 85 F1 | 	sub	fp, #8
1efc4     1F 26 0E F2 | 	cmp	local01, #31 wz
1efc8     14 4E 05 51 |  if_ne	add	fp, #20
1efcc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1efd0     14 4E 85 51 |  if_ne	sub	fp, #20
1efd4     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1efd8     A7 10 68 AC |  if_e	wrlong	#8, fp
1efdc     08 4E 05 A1 |  if_e	add	fp, #8
1efe0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1efe4     08 4E 85 A1 |  if_e	sub	fp, #8
1efe8     A7 12 68 5C |  if_ne	wrlong	#9, fp
1efec     08 4E 05 51 |  if_ne	add	fp, #8
1eff0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1eff4     08 4E 85 51 |  if_ne	sub	fp, #8
1eff8                 | LR__2509
1eff8     A7 12 02 F6 | 	mov	arg01, fp
1effc     18 DD BE FD | 	call	#_push
1f000     A7 F0 03 F6 | 	mov	ptra, fp
1f004     B2 00 A0 FD | 	call	#popregs_
1f008                 | _do_mul_ret
1f008     2D 00 64 FD | 	ret
1f00c                 | 
1f00c                 | ' 
1f00c                 | ' '--------------------------------- not equal (<>)
1f00c                 | ' 
1f00c                 | ' sub do_ne
1f00c                 | _do_ne
1f00c     05 4A 05 F6 | 	mov	COUNT_, #5
1f010     A8 00 A0 FD | 	call	#pushregs_
1f014     18 F0 07 F1 | 	add	ptra, #24
1f018     64 DC BE FD | 	call	#_pop
1f01c     FD 26 02 F6 | 	mov	local01, result1
1f020     FE 28 02 F6 | 	mov	local02, result2
1f024     FF 2A 02 F6 | 	mov	local03, result3
1f028     0C 4E 05 F1 | 	add	fp, #12
1f02c     A7 26 62 FC | 	wrlong	local01, fp
1f030     04 4E 05 F1 | 	add	fp, #4
1f034     A7 28 62 FC | 	wrlong	local02, fp
1f038     04 4E 05 F1 | 	add	fp, #4
1f03c     A7 2A 62 FC | 	wrlong	local03, fp
1f040     14 4E 85 F1 | 	sub	fp, #20
1f044     38 DC BE FD | 	call	#_pop
1f048     FF 2A 02 F6 | 	mov	local03, result3
1f04c     A7 FA 61 FC | 	wrlong	result1, fp
1f050     04 4E 05 F1 | 	add	fp, #4
1f054     A7 FC 61 FC | 	wrlong	result2, fp
1f058     04 4E 05 F1 | 	add	fp, #4
1f05c     A7 2A 62 FC | 	wrlong	local03, fp
1f060                 | ' 
1f060                 | ' t2=pop()
1f060                 | ' t1=pop()
1f060                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1f060     08 4E 85 F1 | 	sub	fp, #8
1f064     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f068     14 4E 05 A1 |  if_e	add	fp, #20
1f06c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f070     14 4E 85 A1 |  if_e	sub	fp, #20
1f074     16 2B 02 A6 |  if_e	mov	local03, local04
1f078     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f07c     28 00 90 5D |  if_ne	jmp	#LR__2510
1f080     00 26 06 F6 | 	mov	local01, #0
1f084     A7 12 02 FB | 	rdlong	arg01, fp
1f088     0C 4E 05 F1 | 	add	fp, #12
1f08c     A7 14 02 FB | 	rdlong	arg02, fp
1f090     0C 4E 85 F1 | 	sub	fp, #12
1f094     08 69 B0 FD | 	call	#__system___string_cmp
1f098     00 FA 0D F2 | 	cmp	result1, #0 wz
1f09c     00 26 26 56 |  if_ne	not	local01, #0
1f0a0     A7 26 62 FC | 	wrlong	local01, fp
1f0a4     20 04 90 FD | 	jmp	#LR__2523
1f0a8                 | LR__2510
1f0a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1f0a8     08 4E 05 F1 | 	add	fp, #8
1f0ac     A7 26 02 FB | 	rdlong	local01, fp
1f0b0     08 4E 85 F1 | 	sub	fp, #8
1f0b4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f0b8     14 4E 05 A1 |  if_e	add	fp, #20
1f0bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f0c0     14 4E 85 A1 |  if_e	sub	fp, #20
1f0c4     16 2B 02 A6 |  if_e	mov	local03, local04
1f0c8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f0cc     2C 00 90 5D |  if_ne	jmp	#LR__2511
1f0d0     00 26 06 F6 | 	mov	local01, #0
1f0d4     A7 12 02 FB | 	rdlong	arg01, fp
1f0d8     0C 4E 05 F1 | 	add	fp, #12
1f0dc     A7 14 02 FB | 	rdlong	arg02, fp
1f0e0     0C 4E 85 F1 | 	sub	fp, #12
1f0e4     01 16 06 F6 | 	mov	arg03, #1
1f0e8     38 9B B0 FD | 	call	#__system___float_cmp
1f0ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1f0f0     00 26 26 56 |  if_ne	not	local01, #0
1f0f4     A7 26 62 FC | 	wrlong	local01, fp
1f0f8     CC 03 90 FD | 	jmp	#LR__2523
1f0fc                 | LR__2511
1f0fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1f0fc     08 4E 05 F1 | 	add	fp, #8
1f100     A7 26 02 FB | 	rdlong	local01, fp
1f104     08 4E 85 F1 | 	sub	fp, #8
1f108     1E 26 0E F2 | 	cmp	local01, #30 wz
1f10c     14 4E 05 A1 |  if_e	add	fp, #20
1f110     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f114     14 4E 85 A1 |  if_e	sub	fp, #20
1f118     16 2B 02 A6 |  if_e	mov	local03, local04
1f11c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f120     48 00 90 5D |  if_ne	jmp	#LR__2512
1f124     00 26 06 F6 | 	mov	local01, #0
1f128     A7 28 02 FB | 	rdlong	local02, fp
1f12c     0C 4E 05 F1 | 	add	fp, #12
1f130     A7 12 02 FB | 	rdlong	arg01, fp
1f134     0C 4E 85 F1 | 	sub	fp, #12
1f138     09 13 52 F6 | 	abs	arg01, arg01 wc
1f13c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f140     00 2E 06 36 |  if_ae	mov	local05, #0
1f144     A4 92 B0 FD | 	call	#__system___float_fromuns
1f148     17 FB 61 F5 | 	xor	result1, local05
1f14c     FD 14 02 F6 | 	mov	arg02, result1
1f150     14 13 02 F6 | 	mov	arg01, local02
1f154     01 16 06 F6 | 	mov	arg03, #1
1f158     C8 9A B0 FD | 	call	#__system___float_cmp
1f15c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f160     00 26 26 56 |  if_ne	not	local01, #0
1f164     A7 26 62 FC | 	wrlong	local01, fp
1f168     5C 03 90 FD | 	jmp	#LR__2523
1f16c                 | LR__2512
1f16c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1f16c     08 4E 05 F1 | 	add	fp, #8
1f170     A7 26 02 FB | 	rdlong	local01, fp
1f174     08 4E 85 F1 | 	sub	fp, #8
1f178     1E 26 0E F2 | 	cmp	local01, #30 wz
1f17c     14 4E 05 A1 |  if_e	add	fp, #20
1f180     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f184     14 4E 85 A1 |  if_e	sub	fp, #20
1f188     16 2B 02 A6 |  if_e	mov	local03, local04
1f18c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f190     38 00 90 5D |  if_ne	jmp	#LR__2513
1f194     00 26 06 F6 | 	mov	local01, #0
1f198     A7 28 02 FB | 	rdlong	local02, fp
1f19c     0C 4E 05 F1 | 	add	fp, #12
1f1a0     A7 12 02 FB | 	rdlong	arg01, fp
1f1a4     0C 4E 85 F1 | 	sub	fp, #12
1f1a8     40 92 B0 FD | 	call	#__system___float_fromuns
1f1ac     FD 14 02 F6 | 	mov	arg02, result1
1f1b0     14 13 02 F6 | 	mov	arg01, local02
1f1b4     01 16 06 F6 | 	mov	arg03, #1
1f1b8     68 9A B0 FD | 	call	#__system___float_cmp
1f1bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1f1c0     00 26 26 56 |  if_ne	not	local01, #0
1f1c4     A7 26 62 FC | 	wrlong	local01, fp
1f1c8     FC 02 90 FD | 	jmp	#LR__2523
1f1cc                 | LR__2513
1f1cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1f1cc     08 4E 05 F1 | 	add	fp, #8
1f1d0     A7 26 02 FB | 	rdlong	local01, fp
1f1d4     08 4E 85 F1 | 	sub	fp, #8
1f1d8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f1dc     14 4E 05 A1 |  if_e	add	fp, #20
1f1e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f1e8     16 2B 02 A6 |  if_e	mov	local03, local04
1f1ec     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f1f0     44 00 90 5D |  if_ne	jmp	#LR__2514
1f1f4     00 26 06 F6 | 	mov	local01, #0
1f1f8     A7 12 02 FB | 	rdlong	arg01, fp
1f1fc     09 13 52 F6 | 	abs	arg01, arg01 wc
1f200     1F 2E C6 C9 |  if_b	decod	local05, #31
1f204     00 2E 06 36 |  if_ae	mov	local05, #0
1f208     E0 91 B0 FD | 	call	#__system___float_fromuns
1f20c     17 FB 61 F5 | 	xor	result1, local05
1f210     FD 12 02 F6 | 	mov	arg01, result1
1f214     0C 4E 05 F1 | 	add	fp, #12
1f218     A7 14 02 FB | 	rdlong	arg02, fp
1f21c     0C 4E 85 F1 | 	sub	fp, #12
1f220     01 16 06 F6 | 	mov	arg03, #1
1f224     FC 99 B0 FD | 	call	#__system___float_cmp
1f228     00 FA 0D F2 | 	cmp	result1, #0 wz
1f22c     00 26 26 56 |  if_ne	not	local01, #0
1f230     A7 26 62 FC | 	wrlong	local01, fp
1f234     90 02 90 FD | 	jmp	#LR__2523
1f238                 | LR__2514
1f238                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1f238     08 4E 05 F1 | 	add	fp, #8
1f23c     A7 26 02 FB | 	rdlong	local01, fp
1f240     08 4E 85 F1 | 	sub	fp, #8
1f244     1C 26 0E F2 | 	cmp	local01, #28 wz
1f248     14 4E 05 A1 |  if_e	add	fp, #20
1f24c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f250     14 4E 85 A1 |  if_e	sub	fp, #20
1f254     16 2B 02 A6 |  if_e	mov	local03, local04
1f258     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f25c     24 00 90 5D |  if_ne	jmp	#LR__2515
1f260     00 26 06 F6 | 	mov	local01, #0
1f264     A7 28 02 FB | 	rdlong	local02, fp
1f268     0C 4E 05 F1 | 	add	fp, #12
1f26c     A7 2A 02 FB | 	rdlong	local03, fp
1f270     0C 4E 85 F1 | 	sub	fp, #12
1f274     15 29 0A F2 | 	cmp	local02, local03 wz
1f278     01 26 66 56 |  if_ne	neg	local01, #1
1f27c     A7 26 62 FC | 	wrlong	local01, fp
1f280     44 02 90 FD | 	jmp	#LR__2523
1f284                 | LR__2515
1f284                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1f284     08 4E 05 F1 | 	add	fp, #8
1f288     A7 26 02 FB | 	rdlong	local01, fp
1f28c     08 4E 85 F1 | 	sub	fp, #8
1f290     1C 26 0E F2 | 	cmp	local01, #28 wz
1f294     14 4E 05 A1 |  if_e	add	fp, #20
1f298     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f29c     14 4E 85 A1 |  if_e	sub	fp, #20
1f2a0     16 2B 02 A6 |  if_e	mov	local03, local04
1f2a4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f2a8     24 00 90 5D |  if_ne	jmp	#LR__2516
1f2ac     00 26 06 F6 | 	mov	local01, #0
1f2b0     A7 28 02 FB | 	rdlong	local02, fp
1f2b4     0C 4E 05 F1 | 	add	fp, #12
1f2b8     A7 2A 02 FB | 	rdlong	local03, fp
1f2bc     0C 4E 85 F1 | 	sub	fp, #12
1f2c0     15 29 0A F2 | 	cmp	local02, local03 wz
1f2c4     01 26 66 56 |  if_ne	neg	local01, #1
1f2c8     A7 26 62 FC | 	wrlong	local01, fp
1f2cc     F8 01 90 FD | 	jmp	#LR__2523
1f2d0                 | LR__2516
1f2d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1f2d0     08 4E 05 F1 | 	add	fp, #8
1f2d4     A7 26 02 FB | 	rdlong	local01, fp
1f2d8     08 4E 85 F1 | 	sub	fp, #8
1f2dc     1D 26 0E F2 | 	cmp	local01, #29 wz
1f2e0     14 4E 05 A1 |  if_e	add	fp, #20
1f2e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2e8     14 4E 85 A1 |  if_e	sub	fp, #20
1f2ec     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f2f0     34 00 90 5D |  if_ne	jmp	#LR__2517
1f2f4     00 26 06 F6 | 	mov	local01, #0
1f2f8     A7 12 02 FB | 	rdlong	arg01, fp
1f2fc     EC 90 B0 FD | 	call	#__system___float_fromuns
1f300     FD 12 02 F6 | 	mov	arg01, result1
1f304     0C 4E 05 F1 | 	add	fp, #12
1f308     A7 14 02 FB | 	rdlong	arg02, fp
1f30c     0C 4E 85 F1 | 	sub	fp, #12
1f310     01 16 06 F6 | 	mov	arg03, #1
1f314     0C 99 B0 FD | 	call	#__system___float_cmp
1f318     00 FA 0D F2 | 	cmp	result1, #0 wz
1f31c     00 26 26 56 |  if_ne	not	local01, #0
1f320     A7 26 62 FC | 	wrlong	local01, fp
1f324     A0 01 90 FD | 	jmp	#LR__2523
1f328                 | LR__2517
1f328                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1f328     08 4E 05 F1 | 	add	fp, #8
1f32c     A7 26 02 FB | 	rdlong	local01, fp
1f330     08 4E 85 F1 | 	sub	fp, #8
1f334     1D 26 0E F2 | 	cmp	local01, #29 wz
1f338     14 4E 05 A1 |  if_e	add	fp, #20
1f33c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f340     14 4E 85 A1 |  if_e	sub	fp, #20
1f344     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f348     24 00 90 5D |  if_ne	jmp	#LR__2518
1f34c     00 26 06 F6 | 	mov	local01, #0
1f350     A7 28 02 FB | 	rdlong	local02, fp
1f354     0C 4E 05 F1 | 	add	fp, #12
1f358     A7 2A 02 FB | 	rdlong	local03, fp
1f35c     0C 4E 85 F1 | 	sub	fp, #12
1f360     15 29 0A F2 | 	cmp	local02, local03 wz
1f364     01 26 66 56 |  if_ne	neg	local01, #1
1f368     A7 26 62 FC | 	wrlong	local01, fp
1f36c     58 01 90 FD | 	jmp	#LR__2523
1f370                 | LR__2518
1f370                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1f370     08 4E 05 F1 | 	add	fp, #8
1f374     A7 26 02 FB | 	rdlong	local01, fp
1f378     08 4E 85 F1 | 	sub	fp, #8
1f37c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f380     14 4E 05 A1 |  if_e	add	fp, #20
1f384     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f388     14 4E 85 A1 |  if_e	sub	fp, #20
1f38c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f390     24 00 90 5D |  if_ne	jmp	#LR__2519
1f394     00 26 06 F6 | 	mov	local01, #0
1f398     A7 28 02 FB | 	rdlong	local02, fp
1f39c     0C 4E 05 F1 | 	add	fp, #12
1f3a0     A7 2A 02 FB | 	rdlong	local03, fp
1f3a4     0C 4E 85 F1 | 	sub	fp, #12
1f3a8     15 29 0A F2 | 	cmp	local02, local03 wz
1f3ac     01 26 66 56 |  if_ne	neg	local01, #1
1f3b0     A7 26 62 FC | 	wrlong	local01, fp
1f3b4     10 01 90 FD | 	jmp	#LR__2523
1f3b8                 | LR__2519
1f3b8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1f3b8     08 4E 05 F1 | 	add	fp, #8
1f3bc     A7 26 02 FB | 	rdlong	local01, fp
1f3c0     08 4E 85 F1 | 	sub	fp, #8
1f3c4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f3c8     14 4E 05 A1 |  if_e	add	fp, #20
1f3cc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f3d0     14 4E 85 A1 |  if_e	sub	fp, #20
1f3d4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f3d8     30 00 90 5D |  if_ne	jmp	#LR__2520
1f3dc     00 26 06 F6 | 	mov	local01, #0
1f3e0     A7 12 02 FB | 	rdlong	arg01, fp
1f3e4     10 DA BE FD | 	call	#_convertstring
1f3e8     FD 12 02 F6 | 	mov	arg01, result1
1f3ec     0C 4E 05 F1 | 	add	fp, #12
1f3f0     A7 14 02 FB | 	rdlong	arg02, fp
1f3f4     0C 4E 85 F1 | 	sub	fp, #12
1f3f8     A4 65 B0 FD | 	call	#__system___string_cmp
1f3fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1f400     00 26 26 56 |  if_ne	not	local01, #0
1f404     A7 26 62 FC | 	wrlong	local01, fp
1f408     BC 00 90 FD | 	jmp	#LR__2523
1f40c                 | LR__2520
1f40c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1f40c     08 4E 05 F1 | 	add	fp, #8
1f410     A7 26 02 FB | 	rdlong	local01, fp
1f414     08 4E 85 F1 | 	sub	fp, #8
1f418     1F 26 0E F2 | 	cmp	local01, #31 wz
1f41c     14 4E 05 A1 |  if_e	add	fp, #20
1f420     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f424     14 4E 85 A1 |  if_e	sub	fp, #20
1f428     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f42c     34 00 90 5D |  if_ne	jmp	#LR__2521
1f430     00 26 06 F6 | 	mov	local01, #0
1f434     A7 28 02 FB | 	rdlong	local02, fp
1f438     0C 4E 05 F1 | 	add	fp, #12
1f43c     A7 12 02 FB | 	rdlong	arg01, fp
1f440     0C 4E 85 F1 | 	sub	fp, #12
1f444     B0 D9 BE FD | 	call	#_convertstring
1f448     FD 14 02 F6 | 	mov	arg02, result1
1f44c     14 13 02 F6 | 	mov	arg01, local02
1f450     4C 65 B0 FD | 	call	#__system___string_cmp
1f454     00 FA 0D F2 | 	cmp	result1, #0 wz
1f458     00 26 26 56 |  if_ne	not	local01, #0
1f45c     A7 26 62 FC | 	wrlong	local01, fp
1f460     64 00 90 FD | 	jmp	#LR__2523
1f464                 | LR__2521
1f464                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1f464     08 4E 05 F1 | 	add	fp, #8
1f468     A7 26 02 FB | 	rdlong	local01, fp
1f46c     08 4E 85 F1 | 	sub	fp, #8
1f470     2B 26 0E F2 | 	cmp	local01, #43 wz
1f474     14 4E 05 A1 |  if_e	add	fp, #20
1f478     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f47c     14 4E 85 A1 |  if_e	sub	fp, #20
1f480     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f484     3C 00 90 5D |  if_ne	jmp	#LR__2522
1f488     00 26 06 F6 | 	mov	local01, #0
1f48c     A7 12 02 FB | 	rdlong	arg01, fp
1f490     64 D9 BE FD | 	call	#_convertstring
1f494     FD 28 02 F6 | 	mov	local02, result1
1f498     0C 4E 05 F1 | 	add	fp, #12
1f49c     A7 12 02 FB | 	rdlong	arg01, fp
1f4a0     0C 4E 85 F1 | 	sub	fp, #12
1f4a4     50 D9 BE FD | 	call	#_convertstring
1f4a8     FD 14 02 F6 | 	mov	arg02, result1
1f4ac     14 13 02 F6 | 	mov	arg01, local02
1f4b0     EC 64 B0 FD | 	call	#__system___string_cmp
1f4b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f4b8     00 26 26 56 |  if_ne	not	local01, #0
1f4bc     A7 26 62 FC | 	wrlong	local01, fp
1f4c0     04 00 90 FD | 	jmp	#LR__2523
1f4c4                 | LR__2522
1f4c4     A7 00 68 FC | 	wrlong	#0, fp
1f4c8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f4c8                 | LR__2523
1f4c8     08 4E 05 F1 | 	add	fp, #8
1f4cc     A7 38 68 FC | 	wrlong	#28, fp
1f4d0     08 4E 85 F1 | 	sub	fp, #8
1f4d4     A7 12 02 F6 | 	mov	arg01, fp
1f4d8     3C D8 BE FD | 	call	#_push
1f4dc     A7 F0 03 F6 | 	mov	ptra, fp
1f4e0     B2 00 A0 FD | 	call	#popregs_
1f4e4                 | _do_ne_ret
1f4e4     2D 00 64 FD | 	ret
1f4e8                 | 
1f4e8                 | ' 
1f4e8                 | ' '--------------------------------- OR
1f4e8                 | ' 
1f4e8                 | ' sub do_or 
1f4e8                 | _do_or
1f4e8     03 4A 05 F6 | 	mov	COUNT_, #3
1f4ec     A8 00 A0 FD | 	call	#pushregs_
1f4f0     18 F0 07 F1 | 	add	ptra, #24
1f4f4     88 D7 BE FD | 	call	#_pop
1f4f8     FD 12 02 F6 | 	mov	arg01, result1
1f4fc     FE 26 02 F6 | 	mov	local01, result2
1f500     FF 28 02 F6 | 	mov	local02, result3
1f504     0C 4E 05 F1 | 	add	fp, #12
1f508     A7 12 62 FC | 	wrlong	arg01, fp
1f50c     04 4E 05 F1 | 	add	fp, #4
1f510     A7 26 62 FC | 	wrlong	local01, fp
1f514     04 4E 05 F1 | 	add	fp, #4
1f518     A7 28 62 FC | 	wrlong	local02, fp
1f51c     14 4E 85 F1 | 	sub	fp, #20
1f520     5C D7 BE FD | 	call	#_pop
1f524     FF 2A 02 F6 | 	mov	local03, result3
1f528     A7 FA 61 FC | 	wrlong	result1, fp
1f52c     04 4E 05 F1 | 	add	fp, #4
1f530     A7 FC 61 FC | 	wrlong	result2, fp
1f534     04 4E 05 F1 | 	add	fp, #4
1f538     A7 2A 62 FC | 	wrlong	local03, fp
1f53c                 | ' 
1f53c                 | ' t2=pop()
1f53c                 | ' t1=pop()
1f53c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1f53c     08 4E 85 F1 | 	sub	fp, #8
1f540     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f544     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f548     A7 2A 62 AC |  if_e	wrlong	local03, fp
1f54c     08 4E 05 A1 |  if_e	add	fp, #8
1f550     A7 3A 68 AC |  if_e	wrlong	#29, fp
1f554     08 4E 85 A1 |  if_e	sub	fp, #8
1f558                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1f558     14 4E 05 F1 | 	add	fp, #20
1f55c     A7 2A 02 FB | 	rdlong	local03, fp
1f560     14 4E 85 F1 | 	sub	fp, #20
1f564     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f568     18 00 90 5D |  if_ne	jmp	#LR__2530
1f56c     0C 4E 05 F1 | 	add	fp, #12
1f570     A7 2A 02 FB | 	rdlong	local03, fp
1f574     A7 2A 62 FC | 	wrlong	local03, fp
1f578     08 4E 05 F1 | 	add	fp, #8
1f57c     A7 3A 68 FC | 	wrlong	#29, fp
1f580     14 4E 85 F1 | 	sub	fp, #20
1f584                 | LR__2530
1f584                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1f584     08 4E 05 F1 | 	add	fp, #8
1f588     A7 2A 02 FB | 	rdlong	local03, fp
1f58c     08 4E 85 F1 | 	sub	fp, #8
1f590     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f594     14 4E 05 51 |  if_ne	add	fp, #20
1f598     A7 28 02 5B |  if_ne	rdlong	local02, fp
1f59c     14 4E 85 51 |  if_ne	sub	fp, #20
1f5a0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1f5a4     08 4E 05 51 |  if_ne	add	fp, #8
1f5a8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f5ac     08 4E 85 51 |  if_ne	sub	fp, #8
1f5b0     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1f5b4     14 4E 05 51 |  if_ne	add	fp, #20
1f5b8     14 4E 85 51 |  if_ne	sub	fp, #20
1f5bc     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1f5c0     A7 0C 68 AC |  if_e	wrlong	#6, fp
1f5c4     08 4E 05 A1 |  if_e	add	fp, #8
1f5c8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f5cc     08 4E 85 A1 |  if_e	sub	fp, #8
1f5d0     18 00 90 AD |  if_e	jmp	#LR__2531
1f5d4     A7 2A 02 FB | 	rdlong	local03, fp
1f5d8     0C 4E 05 F1 | 	add	fp, #12
1f5dc     A7 26 02 FB | 	rdlong	local01, fp
1f5e0     0C 4E 85 F1 | 	sub	fp, #12
1f5e4     13 2B 42 F5 | 	or	local03, local01
1f5e8     A7 2A 62 FC | 	wrlong	local03, fp
1f5ec                 | LR__2531
1f5ec     A7 12 02 F6 | 	mov	arg01, fp
1f5f0     24 D7 BE FD | 	call	#_push
1f5f4     A7 F0 03 F6 | 	mov	ptra, fp
1f5f8     B2 00 A0 FD | 	call	#popregs_
1f5fc                 | _do_or_ret
1f5fc     2D 00 64 FD | 	ret
1f600                 | 
1f600                 | ' 
1f600                 | ' '--------------------------------- plus (+)
1f600                 | ' 
1f600                 | ' sub do_plus 
1f600                 | _do_plus
1f600     05 4A 05 F6 | 	mov	COUNT_, #5
1f604     A8 00 A0 FD | 	call	#pushregs_
1f608     18 F0 07 F1 | 	add	ptra, #24
1f60c     70 D6 BE FD | 	call	#_pop
1f610     FD 26 02 F6 | 	mov	local01, result1
1f614     FE 28 02 F6 | 	mov	local02, result2
1f618     FF 2A 02 F6 | 	mov	local03, result3
1f61c     0C 4E 05 F1 | 	add	fp, #12
1f620     A7 26 62 FC | 	wrlong	local01, fp
1f624     04 4E 05 F1 | 	add	fp, #4
1f628     A7 28 62 FC | 	wrlong	local02, fp
1f62c     04 4E 05 F1 | 	add	fp, #4
1f630     A7 2A 62 FC | 	wrlong	local03, fp
1f634     14 4E 85 F1 | 	sub	fp, #20
1f638     44 D6 BE FD | 	call	#_pop
1f63c     FF 2A 02 F6 | 	mov	local03, result3
1f640     A7 FA 61 FC | 	wrlong	result1, fp
1f644     04 4E 05 F1 | 	add	fp, #4
1f648     A7 FC 61 FC | 	wrlong	result2, fp
1f64c     04 4E 05 F1 | 	add	fp, #4
1f650     A7 2A 62 FC | 	wrlong	local03, fp
1f654                 | ' 
1f654                 | ' t2=pop()
1f654                 | ' t1=pop()
1f654                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1f654     08 4E 85 F1 | 	sub	fp, #8
1f658     1D 2A 0E F2 | 	cmp	local03, #29 wz
1f65c     14 4E 05 A1 |  if_e	add	fp, #20
1f660     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f664     14 4E 85 A1 |  if_e	sub	fp, #20
1f668     16 2B 02 A6 |  if_e	mov	local03, local04
1f66c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f670     1C 00 90 5D |  if_ne	jmp	#LR__2540
1f674     A7 26 02 FB | 	rdlong	local01, fp
1f678     0C 4E 05 F1 | 	add	fp, #12
1f67c     A7 28 02 FB | 	rdlong	local02, fp
1f680     0C 4E 85 F1 | 	sub	fp, #12
1f684     14 27 02 F1 | 	add	local01, local02
1f688     A7 26 62 FC | 	wrlong	local01, fp
1f68c     48 04 90 FD | 	jmp	#LR__2555
1f690                 | LR__2540
1f690                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1f690     08 4E 05 F1 | 	add	fp, #8
1f694     A7 26 02 FB | 	rdlong	local01, fp
1f698     08 4E 85 F1 | 	sub	fp, #8
1f69c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f6a0     14 4E 05 A1 |  if_e	add	fp, #20
1f6a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6a8     14 4E 85 A1 |  if_e	sub	fp, #20
1f6ac     16 2B 02 A6 |  if_e	mov	local03, local04
1f6b0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f6b4     28 00 90 5D |  if_ne	jmp	#LR__2541
1f6b8     A7 26 02 FB | 	rdlong	local01, fp
1f6bc     0C 4E 05 F1 | 	add	fp, #12
1f6c0     A7 28 02 FB | 	rdlong	local02, fp
1f6c4     0C 4E 85 F1 | 	sub	fp, #12
1f6c8     14 27 02 F1 | 	add	local01, local02
1f6cc     A7 26 62 FC | 	wrlong	local01, fp
1f6d0     08 4E 05 F1 | 	add	fp, #8
1f6d4     A7 38 68 FC | 	wrlong	#28, fp
1f6d8     08 4E 85 F1 | 	sub	fp, #8
1f6dc     F8 03 90 FD | 	jmp	#LR__2555
1f6e0                 | LR__2541
1f6e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1f6e0     08 4E 05 F1 | 	add	fp, #8
1f6e4     A7 26 02 FB | 	rdlong	local01, fp
1f6e8     08 4E 85 F1 | 	sub	fp, #8
1f6ec     1D 26 0E F2 | 	cmp	local01, #29 wz
1f6f0     14 4E 05 A1 |  if_e	add	fp, #20
1f6f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6f8     14 4E 85 A1 |  if_e	sub	fp, #20
1f6fc     16 2B 02 A6 |  if_e	mov	local03, local04
1f700     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f704     30 00 90 5D |  if_ne	jmp	#LR__2542
1f708     A7 12 02 FB | 	rdlong	arg01, fp
1f70c     DC 8C B0 FD | 	call	#__system___float_fromuns
1f710     FD 12 02 F6 | 	mov	arg01, result1
1f714     0C 4E 05 F1 | 	add	fp, #12
1f718     A7 14 02 FB | 	rdlong	arg02, fp
1f71c     0C 4E 85 F1 | 	sub	fp, #12
1f720     FC 8C B0 FD | 	call	#__system___float_add
1f724     A7 FA 61 FC | 	wrlong	result1, fp
1f728     08 4E 05 F1 | 	add	fp, #8
1f72c     A7 3C 68 FC | 	wrlong	#30, fp
1f730     08 4E 85 F1 | 	sub	fp, #8
1f734     A0 03 90 FD | 	jmp	#LR__2555
1f738                 | LR__2542
1f738                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1f738     08 4E 05 F1 | 	add	fp, #8
1f73c     A7 26 02 FB | 	rdlong	local01, fp
1f740     08 4E 85 F1 | 	sub	fp, #8
1f744     1C 26 0E F2 | 	cmp	local01, #28 wz
1f748     14 4E 05 A1 |  if_e	add	fp, #20
1f74c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f750     14 4E 85 A1 |  if_e	sub	fp, #20
1f754     16 2B 02 A6 |  if_e	mov	local03, local04
1f758     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f75c     1C 00 90 5D |  if_ne	jmp	#LR__2543
1f760     A7 26 02 FB | 	rdlong	local01, fp
1f764     0C 4E 05 F1 | 	add	fp, #12
1f768     A7 28 02 FB | 	rdlong	local02, fp
1f76c     0C 4E 85 F1 | 	sub	fp, #12
1f770     14 27 02 F1 | 	add	local01, local02
1f774     A7 26 62 FC | 	wrlong	local01, fp
1f778     5C 03 90 FD | 	jmp	#LR__2555
1f77c                 | LR__2543
1f77c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1f77c     08 4E 05 F1 | 	add	fp, #8
1f780     A7 26 02 FB | 	rdlong	local01, fp
1f784     08 4E 85 F1 | 	sub	fp, #8
1f788     1C 26 0E F2 | 	cmp	local01, #28 wz
1f78c     14 4E 05 A1 |  if_e	add	fp, #20
1f790     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f794     14 4E 85 A1 |  if_e	sub	fp, #20
1f798     16 2B 02 A6 |  if_e	mov	local03, local04
1f79c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f7a0     1C 00 90 5D |  if_ne	jmp	#LR__2544
1f7a4     A7 26 02 FB | 	rdlong	local01, fp
1f7a8     0C 4E 05 F1 | 	add	fp, #12
1f7ac     A7 28 02 FB | 	rdlong	local02, fp
1f7b0     0C 4E 85 F1 | 	sub	fp, #12
1f7b4     14 27 02 F1 | 	add	local01, local02
1f7b8     A7 26 62 FC | 	wrlong	local01, fp
1f7bc     18 03 90 FD | 	jmp	#LR__2555
1f7c0                 | LR__2544
1f7c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1f7c0     08 4E 05 F1 | 	add	fp, #8
1f7c4     A7 26 02 FB | 	rdlong	local01, fp
1f7c8     08 4E 85 F1 | 	sub	fp, #8
1f7cc     1C 26 0E F2 | 	cmp	local01, #28 wz
1f7d0     14 4E 05 A1 |  if_e	add	fp, #20
1f7d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7d8     14 4E 85 A1 |  if_e	sub	fp, #20
1f7dc     16 2B 02 A6 |  if_e	mov	local03, local04
1f7e0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f7e4     40 00 90 5D |  if_ne	jmp	#LR__2545
1f7e8     A7 12 02 FB | 	rdlong	arg01, fp
1f7ec     09 13 52 F6 | 	abs	arg01, arg01 wc
1f7f0     1F 2E C6 C9 |  if_b	decod	local05, #31
1f7f4     00 2E 06 36 |  if_ae	mov	local05, #0
1f7f8     F0 8B B0 FD | 	call	#__system___float_fromuns
1f7fc     17 FB 61 F5 | 	xor	result1, local05
1f800     FD 12 02 F6 | 	mov	arg01, result1
1f804     0C 4E 05 F1 | 	add	fp, #12
1f808     A7 14 02 FB | 	rdlong	arg02, fp
1f80c     0C 4E 85 F1 | 	sub	fp, #12
1f810     0C 8C B0 FD | 	call	#__system___float_add
1f814     A7 FA 61 FC | 	wrlong	result1, fp
1f818     08 4E 05 F1 | 	add	fp, #8
1f81c     A7 3C 68 FC | 	wrlong	#30, fp
1f820     08 4E 85 F1 | 	sub	fp, #8
1f824     B0 02 90 FD | 	jmp	#LR__2555
1f828                 | LR__2545
1f828                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1f828     08 4E 05 F1 | 	add	fp, #8
1f82c     A7 26 02 FB | 	rdlong	local01, fp
1f830     08 4E 85 F1 | 	sub	fp, #8
1f834     1E 26 0E F2 | 	cmp	local01, #30 wz
1f838     14 4E 05 A1 |  if_e	add	fp, #20
1f83c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f840     14 4E 85 A1 |  if_e	sub	fp, #20
1f844     16 2B 02 A6 |  if_e	mov	local03, local04
1f848     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f84c     28 00 90 5D |  if_ne	jmp	#LR__2546
1f850     A7 26 02 FB | 	rdlong	local01, fp
1f854     0C 4E 05 F1 | 	add	fp, #12
1f858     A7 12 02 FB | 	rdlong	arg01, fp
1f85c     0C 4E 85 F1 | 	sub	fp, #12
1f860     88 8B B0 FD | 	call	#__system___float_fromuns
1f864     FD 14 02 F6 | 	mov	arg02, result1
1f868     13 13 02 F6 | 	mov	arg01, local01
1f86c     B0 8B B0 FD | 	call	#__system___float_add
1f870     A7 FA 61 FC | 	wrlong	result1, fp
1f874     60 02 90 FD | 	jmp	#LR__2555
1f878                 | LR__2546
1f878                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1f878     08 4E 05 F1 | 	add	fp, #8
1f87c     A7 26 02 FB | 	rdlong	local01, fp
1f880     08 4E 85 F1 | 	sub	fp, #8
1f884     1E 26 0E F2 | 	cmp	local01, #30 wz
1f888     14 4E 05 A1 |  if_e	add	fp, #20
1f88c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f890     14 4E 85 A1 |  if_e	sub	fp, #20
1f894     16 2B 02 A6 |  if_e	mov	local03, local04
1f898     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f89c     38 00 90 5D |  if_ne	jmp	#LR__2547
1f8a0     A7 26 02 FB | 	rdlong	local01, fp
1f8a4     0C 4E 05 F1 | 	add	fp, #12
1f8a8     A7 12 02 FB | 	rdlong	arg01, fp
1f8ac     0C 4E 85 F1 | 	sub	fp, #12
1f8b0     09 13 52 F6 | 	abs	arg01, arg01 wc
1f8b4     1F 2E C6 C9 |  if_b	decod	local05, #31
1f8b8     00 2E 06 36 |  if_ae	mov	local05, #0
1f8bc     2C 8B B0 FD | 	call	#__system___float_fromuns
1f8c0     17 FB 61 F5 | 	xor	result1, local05
1f8c4     FD 14 02 F6 | 	mov	arg02, result1
1f8c8     13 13 02 F6 | 	mov	arg01, local01
1f8cc     50 8B B0 FD | 	call	#__system___float_add
1f8d0     A7 FA 61 FC | 	wrlong	result1, fp
1f8d4     00 02 90 FD | 	jmp	#LR__2555
1f8d8                 | LR__2547
1f8d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1f8d8     08 4E 05 F1 | 	add	fp, #8
1f8dc     A7 26 02 FB | 	rdlong	local01, fp
1f8e0     08 4E 85 F1 | 	sub	fp, #8
1f8e4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f8e8     14 4E 05 A1 |  if_e	add	fp, #20
1f8ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f8f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f8f4     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f8f8     1C 00 90 5D |  if_ne	jmp	#LR__2548
1f8fc     A7 12 02 FB | 	rdlong	arg01, fp
1f900     0C 4E 05 F1 | 	add	fp, #12
1f904     A7 14 02 FB | 	rdlong	arg02, fp
1f908     0C 4E 85 F1 | 	sub	fp, #12
1f90c     10 8B B0 FD | 	call	#__system___float_add
1f910     A7 FA 61 FC | 	wrlong	result1, fp
1f914     C0 01 90 FD | 	jmp	#LR__2555
1f918                 | LR__2548
1f918                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1f918     08 4E 05 F1 | 	add	fp, #8
1f91c     A7 26 02 FB | 	rdlong	local01, fp
1f920     08 4E 85 F1 | 	sub	fp, #8
1f924     1F 26 0E F2 | 	cmp	local01, #31 wz
1f928     24 00 90 5D |  if_ne	jmp	#LR__2549
1f92c     14 4E 05 F1 | 	add	fp, #20
1f930     A7 2A 02 FB | 	rdlong	local03, fp
1f934     14 4E 85 F1 | 	sub	fp, #20
1f938     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f93c     A7 04 68 5C |  if_ne	wrlong	#2, fp
1f940     08 4E 05 51 |  if_ne	add	fp, #8
1f944     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f948     08 4E 85 51 |  if_ne	sub	fp, #8
1f94c     88 01 90 5D |  if_ne	jmp	#LR__2555
1f950                 | LR__2549
1f950                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1f950     14 4E 05 F1 | 	add	fp, #20
1f954     A7 26 02 FB | 	rdlong	local01, fp
1f958     14 4E 85 F1 | 	sub	fp, #20
1f95c     1F 26 0E F2 | 	cmp	local01, #31 wz
1f960     24 00 90 5D |  if_ne	jmp	#LR__2550
1f964     08 4E 05 F1 | 	add	fp, #8
1f968     A7 2A 02 FB | 	rdlong	local03, fp
1f96c     08 4E 85 F1 | 	sub	fp, #8
1f970     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f974     A7 04 68 5C |  if_ne	wrlong	#2, fp
1f978     08 4E 05 51 |  if_ne	add	fp, #8
1f97c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f980     08 4E 85 51 |  if_ne	sub	fp, #8
1f984     50 01 90 5D |  if_ne	jmp	#LR__2555
1f988                 | LR__2550
1f988                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1f988     08 4E 05 F1 | 	add	fp, #8
1f98c     A7 26 02 FB | 	rdlong	local01, fp
1f990     08 4E 85 F1 | 	sub	fp, #8
1f994     1F 26 0E F2 | 	cmp	local01, #31 wz
1f998     14 4E 05 A1 |  if_e	add	fp, #20
1f99c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f9a4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f9a8     1C 00 90 5D |  if_ne	jmp	#LR__2551
1f9ac     A7 12 02 FB | 	rdlong	arg01, fp
1f9b0     0C 4E 05 F1 | 	add	fp, #12
1f9b4     A7 14 02 FB | 	rdlong	arg02, fp
1f9b8     0C 4E 85 F1 | 	sub	fp, #12
1f9bc     14 60 B0 FD | 	call	#__system___string_concat
1f9c0     A7 FA 61 FC | 	wrlong	result1, fp
1f9c4     10 01 90 FD | 	jmp	#LR__2555
1f9c8                 | LR__2551
1f9c8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1f9c8     08 4E 05 F1 | 	add	fp, #8
1f9cc     A7 26 02 FB | 	rdlong	local01, fp
1f9d0     08 4E 85 F1 | 	sub	fp, #8
1f9d4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f9d8     14 4E 05 A1 |  if_e	add	fp, #20
1f9dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9e0     14 4E 85 A1 |  if_e	sub	fp, #20
1f9e4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f9e8     30 00 90 5D |  if_ne	jmp	#LR__2552
1f9ec     A7 12 02 FB | 	rdlong	arg01, fp
1f9f0     04 D4 BE FD | 	call	#_convertstring
1f9f4     FD 12 02 F6 | 	mov	arg01, result1
1f9f8     0C 4E 05 F1 | 	add	fp, #12
1f9fc     A7 14 02 FB | 	rdlong	arg02, fp
1fa00     0C 4E 85 F1 | 	sub	fp, #12
1fa04     CC 5F B0 FD | 	call	#__system___string_concat
1fa08     A7 FA 61 FC | 	wrlong	result1, fp
1fa0c     08 4E 05 F1 | 	add	fp, #8
1fa10     A7 3E 68 FC | 	wrlong	#31, fp
1fa14     08 4E 85 F1 | 	sub	fp, #8
1fa18     BC 00 90 FD | 	jmp	#LR__2555
1fa1c                 | LR__2552
1fa1c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1fa1c     08 4E 05 F1 | 	add	fp, #8
1fa20     A7 26 02 FB | 	rdlong	local01, fp
1fa24     08 4E 85 F1 | 	sub	fp, #8
1fa28     1F 26 0E F2 | 	cmp	local01, #31 wz
1fa2c     14 4E 05 A1 |  if_e	add	fp, #20
1fa30     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa34     14 4E 85 A1 |  if_e	sub	fp, #20
1fa38     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fa3c     28 00 90 5D |  if_ne	jmp	#LR__2553
1fa40     A7 26 02 FB | 	rdlong	local01, fp
1fa44     0C 4E 05 F1 | 	add	fp, #12
1fa48     A7 12 02 FB | 	rdlong	arg01, fp
1fa4c     0C 4E 85 F1 | 	sub	fp, #12
1fa50     A4 D3 BE FD | 	call	#_convertstring
1fa54     FD 14 02 F6 | 	mov	arg02, result1
1fa58     13 13 02 F6 | 	mov	arg01, local01
1fa5c     74 5F B0 FD | 	call	#__system___string_concat
1fa60     A7 FA 61 FC | 	wrlong	result1, fp
1fa64     70 00 90 FD | 	jmp	#LR__2555
1fa68                 | LR__2553
1fa68                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1fa68     08 4E 05 F1 | 	add	fp, #8
1fa6c     A7 26 02 FB | 	rdlong	local01, fp
1fa70     08 4E 85 F1 | 	sub	fp, #8
1fa74     2B 26 0E F2 | 	cmp	local01, #43 wz
1fa78     14 4E 05 A1 |  if_e	add	fp, #20
1fa7c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa80     14 4E 85 A1 |  if_e	sub	fp, #20
1fa84     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fa88     3C 00 90 5D |  if_ne	jmp	#LR__2554
1fa8c     A7 12 02 FB | 	rdlong	arg01, fp
1fa90     64 D3 BE FD | 	call	#_convertstring
1fa94     FD 26 02 F6 | 	mov	local01, result1
1fa98     0C 4E 05 F1 | 	add	fp, #12
1fa9c     A7 12 02 FB | 	rdlong	arg01, fp
1faa0     0C 4E 85 F1 | 	sub	fp, #12
1faa4     50 D3 BE FD | 	call	#_convertstring
1faa8     FD 14 02 F6 | 	mov	arg02, result1
1faac     13 13 02 F6 | 	mov	arg01, local01
1fab0     20 5F B0 FD | 	call	#__system___string_concat
1fab4     A7 FA 61 FC | 	wrlong	result1, fp
1fab8     08 4E 05 F1 | 	add	fp, #8
1fabc     A7 3E 68 FC | 	wrlong	#31, fp
1fac0     08 4E 85 F1 | 	sub	fp, #8
1fac4     10 00 90 FD | 	jmp	#LR__2555
1fac8                 | LR__2554
1fac8     A7 08 68 FC | 	wrlong	#4, fp
1facc     08 4E 05 F1 | 	add	fp, #8
1fad0     A7 FE 69 FC | 	wrlong	#255, fp
1fad4     08 4E 85 F1 | 	sub	fp, #8
1fad8                 | LR__2555
1fad8     A7 12 02 F6 | 	mov	arg01, fp
1fadc     38 D2 BE FD | 	call	#_push
1fae0     A7 F0 03 F6 | 	mov	ptra, fp
1fae4     B2 00 A0 FD | 	call	#popregs_
1fae8                 | _do_plus_ret
1fae8     2D 00 64 FD | 	ret
1faec                 | 
1faec                 | ' 
1faec                 | ' '--------------------------------- power (^)
1faec                 | ' 
1faec                 | ' sub do_power 
1faec                 | _do_power
1faec     02 4A 05 F6 | 	mov	COUNT_, #2
1faf0     A8 00 A0 FD | 	call	#pushregs_
1faf4     18 F0 07 F1 | 	add	ptra, #24
1faf8     84 D1 BE FD | 	call	#_pop
1fafc     FD 14 02 F6 | 	mov	arg02, result1
1fb00     FE 12 02 F6 | 	mov	arg01, result2
1fb04     FF 26 02 F6 | 	mov	local01, result3
1fb08     0C 4E 05 F1 | 	add	fp, #12
1fb0c     A7 14 62 FC | 	wrlong	arg02, fp
1fb10     04 4E 05 F1 | 	add	fp, #4
1fb14     A7 12 62 FC | 	wrlong	arg01, fp
1fb18     04 4E 05 F1 | 	add	fp, #4
1fb1c     A7 26 62 FC | 	wrlong	local01, fp
1fb20     14 4E 85 F1 | 	sub	fp, #20
1fb24     58 D1 BE FD | 	call	#_pop
1fb28     A7 FA 61 FC | 	wrlong	result1, fp
1fb2c     04 4E 05 F1 | 	add	fp, #4
1fb30     A7 FC 61 FC | 	wrlong	result2, fp
1fb34     04 4E 05 F1 | 	add	fp, #4
1fb38     A7 FE 61 FC | 	wrlong	result3, fp
1fb3c                 | ' 
1fb3c                 | ' t2=pop()
1fb3c                 | ' t1=pop()
1fb3c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1fb3c     08 4E 85 F1 | 	sub	fp, #8
1fb40     1F FE 0D F2 | 	cmp	result3, #31 wz
1fb44     14 4E 05 51 |  if_ne	add	fp, #20
1fb48     A7 26 02 5B |  if_ne	rdlong	local01, fp
1fb4c     14 4E 85 51 |  if_ne	sub	fp, #20
1fb50     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1fb54     A7 18 68 AC |  if_e	wrlong	#12, fp
1fb58     08 4E 05 A1 |  if_e	add	fp, #8
1fb5c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fb60     08 4E 85 A1 |  if_e	sub	fp, #8
1fb64     38 01 90 AD |  if_e	jmp	#LR__2565
1fb68                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1fb68     08 4E 05 F1 | 	add	fp, #8
1fb6c     A7 14 02 FB | 	rdlong	arg02, fp
1fb70     08 4E 85 F1 | 	sub	fp, #8
1fb74     1C 14 0E F2 | 	cmp	arg02, #28 wz
1fb78     28 00 90 5D |  if_ne	jmp	#LR__2560
1fb7c     08 4E 05 F1 | 	add	fp, #8
1fb80     A7 3C 68 FC | 	wrlong	#30, fp
1fb84     08 4E 85 F1 | 	sub	fp, #8
1fb88     A7 12 02 FB | 	rdlong	arg01, fp
1fb8c     09 13 52 F6 | 	abs	arg01, arg01 wc
1fb90     1F 28 C6 C9 |  if_b	decod	local02, #31
1fb94     00 28 06 36 |  if_ae	mov	local02, #0
1fb98     50 88 B0 FD | 	call	#__system___float_fromuns
1fb9c     14 FB 61 F5 | 	xor	result1, local02
1fba0     A7 FA 61 FC | 	wrlong	result1, fp
1fba4                 | LR__2560
1fba4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1fba4     08 4E 05 F1 | 	add	fp, #8
1fba8     A7 14 02 FB | 	rdlong	arg02, fp
1fbac     08 4E 85 F1 | 	sub	fp, #8
1fbb0     1D 14 0E F2 | 	cmp	arg02, #29 wz
1fbb4     18 00 90 5D |  if_ne	jmp	#LR__2561
1fbb8     08 4E 05 F1 | 	add	fp, #8
1fbbc     A7 3C 68 FC | 	wrlong	#30, fp
1fbc0     08 4E 85 F1 | 	sub	fp, #8
1fbc4     A7 12 02 FB | 	rdlong	arg01, fp
1fbc8     20 88 B0 FD | 	call	#__system___float_fromuns
1fbcc     A7 FA 61 FC | 	wrlong	result1, fp
1fbd0                 | LR__2561
1fbd0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1fbd0     14 4E 05 F1 | 	add	fp, #20
1fbd4     A7 14 02 FB | 	rdlong	arg02, fp
1fbd8     14 4E 85 F1 | 	sub	fp, #20
1fbdc     1C 14 0E F2 | 	cmp	arg02, #28 wz
1fbe0     34 00 90 5D |  if_ne	jmp	#LR__2562
1fbe4     14 4E 05 F1 | 	add	fp, #20
1fbe8     A7 3C 68 FC | 	wrlong	#30, fp
1fbec     08 4E 85 F1 | 	sub	fp, #8
1fbf0     A7 12 02 FB | 	rdlong	arg01, fp
1fbf4     0C 4E 85 F1 | 	sub	fp, #12
1fbf8     09 13 52 F6 | 	abs	arg01, arg01 wc
1fbfc     1F 28 C6 C9 |  if_b	decod	local02, #31
1fc00     00 28 06 36 |  if_ae	mov	local02, #0
1fc04     E4 87 B0 FD | 	call	#__system___float_fromuns
1fc08     14 FB 61 F5 | 	xor	result1, local02
1fc0c     0C 4E 05 F1 | 	add	fp, #12
1fc10     A7 FA 61 FC | 	wrlong	result1, fp
1fc14     0C 4E 85 F1 | 	sub	fp, #12
1fc18                 | LR__2562
1fc18                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1fc18     14 4E 05 F1 | 	add	fp, #20
1fc1c     A7 14 02 FB | 	rdlong	arg02, fp
1fc20     14 4E 85 F1 | 	sub	fp, #20
1fc24     1D 14 0E F2 | 	cmp	arg02, #29 wz
1fc28     24 00 90 5D |  if_ne	jmp	#LR__2563
1fc2c     14 4E 05 F1 | 	add	fp, #20
1fc30     A7 3C 68 FC | 	wrlong	#30, fp
1fc34     08 4E 85 F1 | 	sub	fp, #8
1fc38     A7 12 02 FB | 	rdlong	arg01, fp
1fc3c     0C 4E 85 F1 | 	sub	fp, #12
1fc40     A8 87 B0 FD | 	call	#__system___float_fromuns
1fc44     0C 4E 05 F1 | 	add	fp, #12
1fc48     A7 FA 61 FC | 	wrlong	result1, fp
1fc4c     0C 4E 85 F1 | 	sub	fp, #12
1fc50                 | LR__2563
1fc50                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1fc50     08 4E 05 F1 | 	add	fp, #8
1fc54     A7 14 02 FB | 	rdlong	arg02, fp
1fc58     08 4E 85 F1 | 	sub	fp, #8
1fc5c     1E 14 0E F2 | 	cmp	arg02, #30 wz
1fc60     14 4E 05 A1 |  if_e	add	fp, #20
1fc64     A7 26 02 AB |  if_e	rdlong	local01, fp
1fc68     14 4E 85 A1 |  if_e	sub	fp, #20
1fc6c     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1fc70     1C 00 90 5D |  if_ne	jmp	#LR__2564
1fc74     A7 12 02 FB | 	rdlong	arg01, fp
1fc78     0C 4E 05 F1 | 	add	fp, #12
1fc7c     A7 14 02 FB | 	rdlong	arg02, fp
1fc80     0C 4E 85 F1 | 	sub	fp, #12
1fc84     70 9A B0 FD | 	call	#__system____builtin_powf
1fc88     A7 FA 61 FC | 	wrlong	result1, fp
1fc8c     10 00 90 FD | 	jmp	#LR__2565
1fc90                 | LR__2564
1fc90     A7 1A 68 FC | 	wrlong	#13, fp
1fc94     08 4E 05 F1 | 	add	fp, #8
1fc98     A7 FE 69 FC | 	wrlong	#255, fp
1fc9c     08 4E 85 F1 | 	sub	fp, #8
1fca0                 | LR__2565
1fca0     A7 12 02 F6 | 	mov	arg01, fp
1fca4     70 D0 BE FD | 	call	#_push
1fca8     A7 F0 03 F6 | 	mov	ptra, fp
1fcac     B2 00 A0 FD | 	call	#popregs_
1fcb0                 | _do_power_ret
1fcb0     2D 00 64 FD | 	ret
1fcb4                 | 
1fcb4                 | ' 
1fcb4                 | ' '--------------------------------- SHL
1fcb4                 | ' 
1fcb4                 | ' sub do_shl 
1fcb4                 | _do_shl
1fcb4     03 4A 05 F6 | 	mov	COUNT_, #3
1fcb8     A8 00 A0 FD | 	call	#pushregs_
1fcbc     18 F0 07 F1 | 	add	ptra, #24
1fcc0     BC CF BE FD | 	call	#_pop
1fcc4     FD 12 02 F6 | 	mov	arg01, result1
1fcc8     FE 26 02 F6 | 	mov	local01, result2
1fccc     FF 28 02 F6 | 	mov	local02, result3
1fcd0     0C 4E 05 F1 | 	add	fp, #12
1fcd4     A7 12 62 FC | 	wrlong	arg01, fp
1fcd8     04 4E 05 F1 | 	add	fp, #4
1fcdc     A7 26 62 FC | 	wrlong	local01, fp
1fce0     04 4E 05 F1 | 	add	fp, #4
1fce4     A7 28 62 FC | 	wrlong	local02, fp
1fce8     14 4E 85 F1 | 	sub	fp, #20
1fcec     90 CF BE FD | 	call	#_pop
1fcf0     FF 2A 02 F6 | 	mov	local03, result3
1fcf4     A7 FA 61 FC | 	wrlong	result1, fp
1fcf8     04 4E 05 F1 | 	add	fp, #4
1fcfc     A7 FC 61 FC | 	wrlong	result2, fp
1fd00     04 4E 05 F1 | 	add	fp, #4
1fd04     A7 2A 62 FC | 	wrlong	local03, fp
1fd08                 | ' 
1fd08                 | ' t2=pop()
1fd08                 | ' t1=pop()
1fd08                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1fd08     08 4E 85 F1 | 	sub	fp, #8
1fd0c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1fd10     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fd14     A7 2A 62 AC |  if_e	wrlong	local03, fp
1fd18     08 4E 05 A1 |  if_e	add	fp, #8
1fd1c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1fd20     08 4E 85 A1 |  if_e	sub	fp, #8
1fd24                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1fd24     14 4E 05 F1 | 	add	fp, #20
1fd28     A7 2A 02 FB | 	rdlong	local03, fp
1fd2c     14 4E 85 F1 | 	sub	fp, #20
1fd30     1C 2A 0E F2 | 	cmp	local03, #28 wz
1fd34     18 00 90 5D |  if_ne	jmp	#LR__2570
1fd38     0C 4E 05 F1 | 	add	fp, #12
1fd3c     A7 2A 02 FB | 	rdlong	local03, fp
1fd40     A7 2A 62 FC | 	wrlong	local03, fp
1fd44     08 4E 05 F1 | 	add	fp, #8
1fd48     A7 3A 68 FC | 	wrlong	#29, fp
1fd4c     14 4E 85 F1 | 	sub	fp, #20
1fd50                 | LR__2570
1fd50                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1fd50     08 4E 05 F1 | 	add	fp, #8
1fd54     A7 2A 02 FB | 	rdlong	local03, fp
1fd58     08 4E 85 F1 | 	sub	fp, #8
1fd5c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fd60     14 4E 05 51 |  if_ne	add	fp, #20
1fd64     A7 28 02 5B |  if_ne	rdlong	local02, fp
1fd68     14 4E 85 51 |  if_ne	sub	fp, #20
1fd6c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1fd70     08 4E 05 51 |  if_ne	add	fp, #8
1fd74     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fd78     08 4E 85 51 |  if_ne	sub	fp, #8
1fd7c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1fd80     14 4E 05 51 |  if_ne	add	fp, #20
1fd84     14 4E 85 51 |  if_ne	sub	fp, #20
1fd88     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1fd8c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1fd90     08 4E 05 A1 |  if_e	add	fp, #8
1fd94     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fd98     08 4E 85 A1 |  if_e	sub	fp, #8
1fd9c     18 00 90 AD |  if_e	jmp	#LR__2571
1fda0     A7 2A 02 FB | 	rdlong	local03, fp
1fda4     0C 4E 05 F1 | 	add	fp, #12
1fda8     A7 26 02 FB | 	rdlong	local01, fp
1fdac     0C 4E 85 F1 | 	sub	fp, #12
1fdb0     13 2B 62 F0 | 	shl	local03, local01
1fdb4     A7 2A 62 FC | 	wrlong	local03, fp
1fdb8                 | LR__2571
1fdb8     A7 12 02 F6 | 	mov	arg01, fp
1fdbc     58 CF BE FD | 	call	#_push
1fdc0     A7 F0 03 F6 | 	mov	ptra, fp
1fdc4     B2 00 A0 FD | 	call	#popregs_
1fdc8                 | _do_shl_ret
1fdc8     2D 00 64 FD | 	ret
1fdcc                 | 
1fdcc                 | ' 
1fdcc                 | ' '--------------------------------- SHR
1fdcc                 | ' 
1fdcc                 | ' sub do_shr 
1fdcc                 | _do_shr
1fdcc     03 4A 05 F6 | 	mov	COUNT_, #3
1fdd0     A8 00 A0 FD | 	call	#pushregs_
1fdd4     18 F0 07 F1 | 	add	ptra, #24
1fdd8     A4 CE BE FD | 	call	#_pop
1fddc     FD 12 02 F6 | 	mov	arg01, result1
1fde0     FE 26 02 F6 | 	mov	local01, result2
1fde4     FF 28 02 F6 | 	mov	local02, result3
1fde8     0C 4E 05 F1 | 	add	fp, #12
1fdec     A7 12 62 FC | 	wrlong	arg01, fp
1fdf0     04 4E 05 F1 | 	add	fp, #4
1fdf4     A7 26 62 FC | 	wrlong	local01, fp
1fdf8     04 4E 05 F1 | 	add	fp, #4
1fdfc     A7 28 62 FC | 	wrlong	local02, fp
1fe00     14 4E 85 F1 | 	sub	fp, #20
1fe04     78 CE BE FD | 	call	#_pop
1fe08     FF 2A 02 F6 | 	mov	local03, result3
1fe0c     A7 FA 61 FC | 	wrlong	result1, fp
1fe10     04 4E 05 F1 | 	add	fp, #4
1fe14     A7 FC 61 FC | 	wrlong	result2, fp
1fe18     04 4E 05 F1 | 	add	fp, #4
1fe1c     A7 2A 62 FC | 	wrlong	local03, fp
1fe20                 | ' 
1fe20                 | ' t2=pop()
1fe20                 | ' t1=pop()
1fe20                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1fe20     08 4E 85 F1 | 	sub	fp, #8
1fe24     1C 2A 0E F2 | 	cmp	local03, #28 wz
1fe28     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe2c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1fe30     08 4E 05 A1 |  if_e	add	fp, #8
1fe34     A7 3A 68 AC |  if_e	wrlong	#29, fp
1fe38     08 4E 85 A1 |  if_e	sub	fp, #8
1fe3c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1fe3c     14 4E 05 F1 | 	add	fp, #20
1fe40     A7 2A 02 FB | 	rdlong	local03, fp
1fe44     14 4E 85 F1 | 	sub	fp, #20
1fe48     1C 2A 0E F2 | 	cmp	local03, #28 wz
1fe4c     18 00 90 5D |  if_ne	jmp	#LR__2580
1fe50     0C 4E 05 F1 | 	add	fp, #12
1fe54     A7 2A 02 FB | 	rdlong	local03, fp
1fe58     A7 2A 62 FC | 	wrlong	local03, fp
1fe5c     08 4E 05 F1 | 	add	fp, #8
1fe60     A7 3A 68 FC | 	wrlong	#29, fp
1fe64     14 4E 85 F1 | 	sub	fp, #20
1fe68                 | LR__2580
1fe68                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1fe68     08 4E 05 F1 | 	add	fp, #8
1fe6c     A7 2A 02 FB | 	rdlong	local03, fp
1fe70     08 4E 85 F1 | 	sub	fp, #8
1fe74     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fe78     14 4E 05 51 |  if_ne	add	fp, #20
1fe7c     A7 28 02 5B |  if_ne	rdlong	local02, fp
1fe80     14 4E 85 51 |  if_ne	sub	fp, #20
1fe84     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1fe88     08 4E 05 51 |  if_ne	add	fp, #8
1fe8c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fe90     08 4E 85 51 |  if_ne	sub	fp, #8
1fe94     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1fe98     14 4E 05 51 |  if_ne	add	fp, #20
1fe9c     14 4E 85 51 |  if_ne	sub	fp, #20
1fea0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1fea4     A7 0C 68 AC |  if_e	wrlong	#6, fp
1fea8     08 4E 05 A1 |  if_e	add	fp, #8
1feac     A7 FE 69 AC |  if_e	wrlong	#255, fp
1feb0     08 4E 85 A1 |  if_e	sub	fp, #8
1feb4     18 00 90 AD |  if_e	jmp	#LR__2581
1feb8     A7 2A 02 FB | 	rdlong	local03, fp
1febc     0C 4E 05 F1 | 	add	fp, #12
1fec0     A7 26 02 FB | 	rdlong	local01, fp
1fec4     0C 4E 85 F1 | 	sub	fp, #12
1fec8     13 2B 42 F0 | 	shr	local03, local01
1fecc     A7 2A 62 FC | 	wrlong	local03, fp
1fed0                 | LR__2581
1fed0     A7 12 02 F6 | 	mov	arg01, fp
1fed4     40 CE BE FD | 	call	#_push
1fed8     A7 F0 03 F6 | 	mov	ptra, fp
1fedc     B2 00 A0 FD | 	call	#popregs_
1fee0                 | _do_shr_ret
1fee0     2D 00 64 FD | 	ret
1fee4                 | 
1fee4                 | ' 
1fee4                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1fee4                 | ' 
1fee4                 | ' ''----------------------------------------------------------------------------------------------------
1fee4                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1fee4                 | ' ''----------------------------------------------------------------------------------------------------
1fee4                 | ' 
1fee4                 | ' ''--------------------------- Command function pointers
1fee4                 | ' 
1fee4                 | ' sub init_commands
1fee4                 | _init_commands
1fee4                 | ' 
1fee4                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1fee4     00 00 06 F6 | 	mov	_var01, #0
1fee8     97 16 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1feec                 | LR__2590
1feec     00 FB 01 F6 | 	mov	result1, _var01
1fef0     02 FA 65 F0 | 	shl	result1, #2
1fef4     43 00 00 FF 
1fef8     60 E4 05 F1 | 	add	objptr, ##34400
1fefc     F2 FA 01 F1 | 	add	result1, objptr
1ff00     43 00 00 FF 
1ff04     60 E4 85 F1 | 	sub	objptr, ##34400
1ff08     FD E4 61 FC | 	wrlong	objptr, result1
1ff0c     01 00 06 F1 | 	add	_var01, #1
1ff10     00 01 56 F2 | 	cmps	_var01, #256 wc
1ff14     D4 FF 9F CD |  if_b	jmp	#LR__2590
1ff18                 | LR__2591
1ff18     F2 FA 01 F6 | 	mov	result1, objptr
1ff1c     14 FA 25 F4 | 	bith	result1, #20
1ff20     43 00 00 FF 
1ff24     64 E4 05 F1 | 	add	objptr, ##34404
1ff28     F2 FA 61 FC | 	wrlong	result1, objptr
1ff2c     43 00 00 FF 
1ff30     64 E4 85 F1 | 	sub	objptr, ##34404
1ff34     F2 FA 01 F6 | 	mov	result1, objptr
1ff38     15 FA 25 F4 | 	bith	result1, #21
1ff3c     43 00 00 FF 
1ff40     68 E4 05 F1 | 	add	objptr, ##34408
1ff44     F2 FA 61 FC | 	wrlong	result1, objptr
1ff48     43 00 00 FF 
1ff4c     68 E4 85 F1 | 	sub	objptr, ##34408
1ff50     F2 FA 01 F6 | 	mov	result1, objptr
1ff54     34 FA 25 F4 | 	bith	result1, #52
1ff58     43 00 00 FF 
1ff5c     6C E4 05 F1 | 	add	objptr, ##34412
1ff60     F2 FA 61 FC | 	wrlong	result1, objptr
1ff64     43 00 00 FF 
1ff68     6C E4 85 F1 | 	sub	objptr, ##34412
1ff6c     F2 FA 01 F6 | 	mov	result1, objptr
1ff70     16 FA 25 F4 | 	bith	result1, #22
1ff74     43 00 00 FF 
1ff78     74 E4 05 F1 | 	add	objptr, ##34420
1ff7c     F2 FA 61 FC | 	wrlong	result1, objptr
1ff80     43 00 00 FF 
1ff84     74 E4 85 F1 | 	sub	objptr, ##34420
1ff88     F2 FA 01 F6 | 	mov	result1, objptr
1ff8c     00 28 00 FF 
1ff90     00 FA 45 F5 | 	or	result1, ##5242880
1ff94     43 00 00 FF 
1ff98     78 E4 05 F1 | 	add	objptr, ##34424
1ff9c     F2 FA 61 FC | 	wrlong	result1, objptr
1ffa0     43 00 00 FF 
1ffa4     78 E4 85 F1 | 	sub	objptr, ##34424
1ffa8     F2 FA 01 F6 | 	mov	result1, objptr
1ffac     35 FA 25 F4 | 	bith	result1, #53
1ffb0     43 00 00 FF 
1ffb4     7C E4 05 F1 | 	add	objptr, ##34428
1ffb8     F2 FA 61 FC | 	wrlong	result1, objptr
1ffbc     43 00 00 FF 
1ffc0     7C E4 85 F1 | 	sub	objptr, ##34428
1ffc4     F2 FA 01 F6 | 	mov	result1, objptr
1ffc8     54 FA 25 F4 | 	bith	result1, #84
1ffcc     43 00 00 FF 
1ffd0     80 E4 05 F1 | 	add	objptr, ##34432
1ffd4     F2 FA 61 FC | 	wrlong	result1, objptr
1ffd8     43 00 00 FF 
1ffdc     80 E4 85 F1 | 	sub	objptr, ##34432
1ffe0     F2 FA 01 F6 | 	mov	result1, objptr
1ffe4     17 FA 25 F4 | 	bith	result1, #23
1ffe8     43 00 00 FF 
1ffec     84 E4 05 F1 | 	add	objptr, ##34436
1fff0     F2 FA 61 FC | 	wrlong	result1, objptr
1fff4     43 00 00 FF 
1fff8     84 E4 85 F1 | 	sub	objptr, ##34436
1fffc     F2 FA 01 F6 | 	mov	result1, objptr
20000     00 48 00 FF 
20004     00 FA 45 F5 | 	or	result1, ##9437184
20008     43 00 00 FF 
2000c     88 E4 05 F1 | 	add	objptr, ##34440
20010     F2 FA 61 FC | 	wrlong	result1, objptr
20014     43 00 00 FF 
20018     88 E4 85 F1 | 	sub	objptr, ##34440
2001c     F2 FA 01 F6 | 	mov	result1, objptr
20020     00 50 00 FF 
20024     00 FA 45 F5 | 	or	result1, ##10485760
20028     43 00 00 FF 
2002c     8C E4 05 F1 | 	add	objptr, ##34444
20030     F2 FA 61 FC | 	wrlong	result1, objptr
20034     43 00 00 FF 
20038     8C E4 85 F1 | 	sub	objptr, ##34444
2003c     F2 FA 01 F6 | 	mov	result1, objptr
20040     00 58 00 FF 
20044     00 FA 45 F5 | 	or	result1, ##11534336
20048     43 00 00 FF 
2004c     90 E4 05 F1 | 	add	objptr, ##34448
20050     F2 FA 61 FC | 	wrlong	result1, objptr
20054     43 00 00 FF 
20058     90 E4 85 F1 | 	sub	objptr, ##34448
2005c     F2 FA 01 F6 | 	mov	result1, objptr
20060     36 FA 25 F4 | 	bith	result1, #54
20064     43 00 00 FF 
20068     A4 E4 05 F1 | 	add	objptr, ##34468
2006c     F2 FA 61 FC | 	wrlong	result1, objptr
20070     43 00 00 FF 
20074     A4 E4 85 F1 | 	sub	objptr, ##34468
20078     F2 FA 01 F6 | 	mov	result1, objptr
2007c     00 68 00 FF 
20080     00 FA 45 F5 | 	or	result1, ##13631488
20084     43 00 00 FF 
20088     D4 E4 05 F1 | 	add	objptr, ##34516
2008c     F2 FA 61 FC | 	wrlong	result1, objptr
20090     43 00 00 FF 
20094     D4 E4 85 F1 | 	sub	objptr, ##34516
20098     F2 FA 01 F6 | 	mov	result1, objptr
2009c     00 68 00 FF 
200a0     00 FA 45 F5 | 	or	result1, ##13631488
200a4     43 00 00 FF 
200a8     D0 E4 05 F1 | 	add	objptr, ##34512
200ac     F2 FA 61 FC | 	wrlong	result1, objptr
200b0     43 00 00 FF 
200b4     D0 E4 85 F1 | 	sub	objptr, ##34512
200b8     F2 FA 01 F6 | 	mov	result1, objptr
200bc     00 68 00 FF 
200c0     00 FA 45 F5 | 	or	result1, ##13631488
200c4     43 00 00 FF 
200c8     D8 E4 05 F1 | 	add	objptr, ##34520
200cc     F2 FA 61 FC | 	wrlong	result1, objptr
200d0     43 00 00 FF 
200d4     D8 E4 85 F1 | 	sub	objptr, ##34520
200d8     F2 FA 01 F6 | 	mov	result1, objptr
200dc     00 68 00 FF 
200e0     00 FA 45 F5 | 	or	result1, ##13631488
200e4     43 00 00 FF 
200e8     DC E4 05 F1 | 	add	objptr, ##34524
200ec     F2 FA 61 FC | 	wrlong	result1, objptr
200f0     43 00 00 FF 
200f4     DC E4 85 F1 | 	sub	objptr, ##34524
200f8     F2 FA 01 F6 | 	mov	result1, objptr
200fc     00 68 00 FF 
20100     00 FA 45 F5 | 	or	result1, ##13631488
20104     43 00 00 FF 
20108     0C E5 05 F1 | 	add	objptr, ##34572
2010c     F2 FA 61 FC | 	wrlong	result1, objptr
20110     43 00 00 FF 
20114     0C E5 85 F1 | 	sub	objptr, ##34572
20118     F2 FA 01 F6 | 	mov	result1, objptr
2011c     55 FA 25 F4 | 	bith	result1, #85
20120     43 00 00 FF 
20124     BC E4 05 F1 | 	add	objptr, ##34492
20128     F2 FA 61 FC | 	wrlong	result1, objptr
2012c     43 00 00 FF 
20130     BC E4 85 F1 | 	sub	objptr, ##34492
20134     F2 FA 01 F6 | 	mov	result1, objptr
20138     00 68 00 FF 
2013c     00 FA 45 F5 | 	or	result1, ##13631488
20140     43 00 00 FF 
20144     10 E5 05 F1 | 	add	objptr, ##34576
20148     F2 FA 61 FC | 	wrlong	result1, objptr
2014c     43 00 00 FF 
20150     10 E5 85 F1 | 	sub	objptr, ##34576
20154     F2 FA 01 F6 | 	mov	result1, objptr
20158     00 68 00 FF 
2015c     00 FA 45 F5 | 	or	result1, ##13631488
20160     43 00 00 FF 
20164     E0 E4 05 F1 | 	add	objptr, ##34528
20168     F2 FA 61 FC | 	wrlong	result1, objptr
2016c     43 00 00 FF 
20170     E0 E4 85 F1 | 	sub	objptr, ##34528
20174     F2 FA 01 F6 | 	mov	result1, objptr
20178     00 68 00 FF 
2017c     00 FA 45 F5 | 	or	result1, ##13631488
20180     43 00 00 FF 
20184     E4 E4 05 F1 | 	add	objptr, ##34532
20188     F2 FA 61 FC | 	wrlong	result1, objptr
2018c     43 00 00 FF 
20190     E4 E4 85 F1 | 	sub	objptr, ##34532
20194     F2 FA 01 F6 | 	mov	result1, objptr
20198     00 68 00 FF 
2019c     00 FA 45 F5 | 	or	result1, ##13631488
201a0     43 00 00 FF 
201a4     E8 E4 05 F1 | 	add	objptr, ##34536
201a8     F2 FA 61 FC | 	wrlong	result1, objptr
201ac     43 00 00 FF 
201b0     E8 E4 85 F1 | 	sub	objptr, ##34536
201b4     F2 FA 01 F6 | 	mov	result1, objptr
201b8     74 FA 25 F4 | 	bith	result1, #116
201bc     43 00 00 FF 
201c0     60 E5 05 F1 | 	add	objptr, ##34656
201c4     F2 FA 61 FC | 	wrlong	result1, objptr
201c8     43 00 00 FF 
201cc     60 E5 85 F1 | 	sub	objptr, ##34656
201d0     F2 FA 01 F6 | 	mov	result1, objptr
201d4     18 FA 25 F4 | 	bith	result1, #24
201d8     43 00 00 FF 
201dc     64 E5 05 F1 | 	add	objptr, ##34660
201e0     F2 FA 61 FC | 	wrlong	result1, objptr
201e4     43 00 00 FF 
201e8     64 E5 85 F1 | 	sub	objptr, ##34660
201ec     F2 FA 01 F6 | 	mov	result1, objptr
201f0     00 88 00 FF 
201f4     00 FA 45 F5 | 	or	result1, ##17825792
201f8     43 00 00 FF 
201fc     68 E5 05 F1 | 	add	objptr, ##34664
20200     F2 FA 61 FC | 	wrlong	result1, objptr
20204     43 00 00 FF 
20208     68 E5 85 F1 | 	sub	objptr, ##34664
2020c     F2 FA 01 F6 | 	mov	result1, objptr
20210     00 90 00 FF 
20214     00 FA 45 F5 | 	or	result1, ##18874368
20218     43 00 00 FF 
2021c     6C E5 05 F1 | 	add	objptr, ##34668
20220     F2 FA 61 FC | 	wrlong	result1, objptr
20224     43 00 00 FF 
20228     6C E5 85 F1 | 	sub	objptr, ##34668
2022c     F2 FA 01 F6 | 	mov	result1, objptr
20230     00 98 00 FF 
20234     00 FA 45 F5 | 	or	result1, ##19922944
20238     43 00 00 FF 
2023c     70 E5 05 F1 | 	add	objptr, ##34672
20240     F2 FA 61 FC | 	wrlong	result1, objptr
20244     43 00 00 FF 
20248     70 E5 85 F1 | 	sub	objptr, ##34672
2024c     F2 FA 01 F6 | 	mov	result1, objptr
20250     00 A0 00 FF 
20254     00 FA 45 F5 | 	or	result1, ##20971520
20258     43 00 00 FF 
2025c     74 E5 05 F1 | 	add	objptr, ##34676
20260     F2 FA 61 FC | 	wrlong	result1, objptr
20264     43 00 00 FF 
20268     74 E5 85 F1 | 	sub	objptr, ##34676
2026c     F2 FA 01 F6 | 	mov	result1, objptr
20270     00 A8 00 FF 
20274     00 FA 45 F5 | 	or	result1, ##22020096
20278     43 00 00 FF 
2027c     78 E5 05 F1 | 	add	objptr, ##34680
20280     F2 FA 61 FC | 	wrlong	result1, objptr
20284     43 00 00 FF 
20288     78 E5 85 F1 | 	sub	objptr, ##34680
2028c     F2 FA 01 F6 | 	mov	result1, objptr
20290     00 B0 00 FF 
20294     00 FA 45 F5 | 	or	result1, ##23068672
20298     43 00 00 FF 
2029c     7C E5 05 F1 | 	add	objptr, ##34684
202a0     F2 FA 61 FC | 	wrlong	result1, objptr
202a4     43 00 00 FF 
202a8     7C E5 85 F1 | 	sub	objptr, ##34684
202ac     F2 FA 01 F6 | 	mov	result1, objptr
202b0     00 B8 00 FF 
202b4     00 FA 45 F5 | 	or	result1, ##24117248
202b8     43 00 00 FF 
202bc     80 E5 05 F1 | 	add	objptr, ##34688
202c0     F2 FA 61 FC | 	wrlong	result1, objptr
202c4     43 00 00 FF 
202c8     80 E5 85 F1 | 	sub	objptr, ##34688
202cc     F2 FA 01 F6 | 	mov	result1, objptr
202d0     37 FA 25 F4 | 	bith	result1, #55
202d4     43 00 00 FF 
202d8     84 E5 05 F1 | 	add	objptr, ##34692
202dc     F2 FA 61 FC | 	wrlong	result1, objptr
202e0     43 00 00 FF 
202e4     84 E5 85 F1 | 	sub	objptr, ##34692
202e8     F2 FA 01 F6 | 	mov	result1, objptr
202ec     00 C8 00 FF 
202f0     00 FA 45 F5 | 	or	result1, ##26214400
202f4     43 00 00 FF 
202f8     88 E5 05 F1 | 	add	objptr, ##34696
202fc     F2 FA 61 FC | 	wrlong	result1, objptr
20300     43 00 00 FF 
20304     88 E5 85 F1 | 	sub	objptr, ##34696
20308     F2 FA 01 F6 | 	mov	result1, objptr
2030c     00 D0 00 FF 
20310     00 FA 45 F5 | 	or	result1, ##27262976
20314     43 00 00 FF 
20318     8C E5 05 F1 | 	add	objptr, ##34700
2031c     F2 FA 61 FC | 	wrlong	result1, objptr
20320     43 00 00 FF 
20324     8C E5 85 F1 | 	sub	objptr, ##34700
20328     F2 FA 01 F6 | 	mov	result1, objptr
2032c     00 D8 00 FF 
20330     00 FA 45 F5 | 	or	result1, ##28311552
20334     43 00 00 FF 
20338     90 E5 05 F1 | 	add	objptr, ##34704
2033c     F2 FA 61 FC | 	wrlong	result1, objptr
20340     43 00 00 FF 
20344     90 E5 85 F1 | 	sub	objptr, ##34704
20348     F2 FA 01 F6 | 	mov	result1, objptr
2034c     56 FA 25 F4 | 	bith	result1, #86
20350     43 00 00 FF 
20354     94 E5 05 F1 | 	add	objptr, ##34708
20358     F2 FA 61 FC | 	wrlong	result1, objptr
2035c     43 00 00 FF 
20360     94 E5 85 F1 | 	sub	objptr, ##34708
20364     F2 FA 01 F6 | 	mov	result1, objptr
20368     00 E8 00 FF 
2036c     00 FA 45 F5 | 	or	result1, ##30408704
20370     45 00 00 FF 
20374     5C E4 05 F1 | 	add	objptr, ##35420
20378     F2 FA 61 FC | 	wrlong	result1, objptr
2037c     45 00 00 FF 
20380     5C E4 85 F1 | 	sub	objptr, ##35420
20384     F2 FA 01 F6 | 	mov	result1, objptr
20388     75 FA 25 F4 | 	bith	result1, #117
2038c     43 00 00 FF 
20390     98 E5 05 F1 | 	add	objptr, ##34712
20394     F2 FA 61 FC | 	wrlong	result1, objptr
20398     43 00 00 FF 
2039c     98 E5 85 F1 | 	sub	objptr, ##34712
203a0     F2 FA 01 F6 | 	mov	result1, objptr
203a4     94 FA 25 F4 | 	bith	result1, #148
203a8     43 00 00 FF 
203ac     AC E5 05 F1 | 	add	objptr, ##34732
203b0     F2 FA 61 FC | 	wrlong	result1, objptr
203b4     43 00 00 FF 
203b8     AC E5 85 F1 | 	sub	objptr, ##34732
203bc     F2 FA 01 F6 | 	mov	result1, objptr
203c0     19 FA 25 F4 | 	bith	result1, #25
203c4     43 00 00 FF 
203c8     9C E5 05 F1 | 	add	objptr, ##34716
203cc     F2 FA 61 FC | 	wrlong	result1, objptr
203d0     43 00 00 FF 
203d4     9C E5 85 F1 | 	sub	objptr, ##34716
203d8     F2 FA 01 F6 | 	mov	result1, objptr
203dc     00 08 01 FF 
203e0     00 FA 45 F5 | 	or	result1, ##34603008
203e4     43 00 00 FF 
203e8     B8 E4 05 F1 | 	add	objptr, ##34488
203ec     F2 FA 61 FC | 	wrlong	result1, objptr
203f0     43 00 00 FF 
203f4     B8 E4 85 F1 | 	sub	objptr, ##34488
203f8     F2 FA 01 F6 | 	mov	result1, objptr
203fc     00 10 01 FF 
20400     00 FA 45 F5 | 	or	result1, ##35651584
20404     43 00 00 FF 
20408     A0 E5 05 F1 | 	add	objptr, ##34720
2040c     F2 FA 61 FC | 	wrlong	result1, objptr
20410     43 00 00 FF 
20414     A0 E5 85 F1 | 	sub	objptr, ##34720
20418     F2 FA 01 F6 | 	mov	result1, objptr
2041c     00 18 01 FF 
20420     00 FA 45 F5 | 	or	result1, ##36700160
20424     43 00 00 FF 
20428     A4 E5 05 F1 | 	add	objptr, ##34724
2042c     F2 FA 61 FC | 	wrlong	result1, objptr
20430     43 00 00 FF 
20434     A4 E5 85 F1 | 	sub	objptr, ##34724
20438     F2 FA 01 F6 | 	mov	result1, objptr
2043c     00 20 01 FF 
20440     00 FA 45 F5 | 	or	result1, ##37748736
20444     43 00 00 FF 
20448     A8 E5 05 F1 | 	add	objptr, ##34728
2044c     F2 FA 61 FC | 	wrlong	result1, objptr
20450     43 00 00 FF 
20454     A8 E5 85 F1 | 	sub	objptr, ##34728
20458     F2 FA 01 F6 | 	mov	result1, objptr
2045c     00 28 01 FF 
20460     00 FA 45 F5 | 	or	result1, ##38797312
20464     43 00 00 FF 
20468     B4 E5 05 F1 | 	add	objptr, ##34740
2046c     F2 FA 61 FC | 	wrlong	result1, objptr
20470     43 00 00 FF 
20474     B4 E5 85 F1 | 	sub	objptr, ##34740
20478     F2 FA 01 F6 | 	mov	result1, objptr
2047c     00 30 01 FF 
20480     00 FA 45 F5 | 	or	result1, ##39845888
20484     43 00 00 FF 
20488     B8 E5 05 F1 | 	add	objptr, ##34744
2048c     F2 FA 61 FC | 	wrlong	result1, objptr
20490     43 00 00 FF 
20494     B8 E5 85 F1 | 	sub	objptr, ##34744
20498     F2 FA 01 F6 | 	mov	result1, objptr
2049c     00 38 01 FF 
204a0     00 FA 45 F5 | 	or	result1, ##40894464
204a4     43 00 00 FF 
204a8     BC E5 05 F1 | 	add	objptr, ##34748
204ac     F2 FA 61 FC | 	wrlong	result1, objptr
204b0     43 00 00 FF 
204b4     BC E5 85 F1 | 	sub	objptr, ##34748
204b8     F2 FA 01 F6 | 	mov	result1, objptr
204bc     00 40 01 FF 
204c0     00 FA 45 F5 | 	or	result1, ##41943040
204c4     43 00 00 FF 
204c8     C0 E5 05 F1 | 	add	objptr, ##34752
204cc     F2 FA 61 FC | 	wrlong	result1, objptr
204d0     43 00 00 FF 
204d4     C0 E5 85 F1 | 	sub	objptr, ##34752
204d8     F2 FA 01 F6 | 	mov	result1, objptr
204dc     00 48 01 FF 
204e0     00 FA 45 F5 | 	or	result1, ##42991616
204e4     43 00 00 FF 
204e8     C8 E5 05 F1 | 	add	objptr, ##34760
204ec     F2 FA 61 FC | 	wrlong	result1, objptr
204f0     43 00 00 FF 
204f4     C8 E5 85 F1 | 	sub	objptr, ##34760
204f8     F2 FA 01 F6 | 	mov	result1, objptr
204fc     00 08 01 FF 
20500     00 FA 45 F5 | 	or	result1, ##34603008
20504     43 00 00 FF 
20508     CC E5 05 F1 | 	add	objptr, ##34764
2050c     F2 FA 61 FC | 	wrlong	result1, objptr
20510     43 00 00 FF 
20514     CC E5 85 F1 | 	sub	objptr, ##34764
20518     F2 FA 01 F6 | 	mov	result1, objptr
2051c     00 50 01 FF 
20520     00 FA 45 F5 | 	or	result1, ##44040192
20524     43 00 00 FF 
20528     CC E4 05 F1 | 	add	objptr, ##34508
2052c     F2 FA 61 FC | 	wrlong	result1, objptr
20530     43 00 00 FF 
20534     CC E4 85 F1 | 	sub	objptr, ##34508
20538     F2 FA 01 F6 | 	mov	result1, objptr
2053c     00 58 01 FF 
20540     00 FA 45 F5 | 	or	result1, ##45088768
20544     43 00 00 FF 
20548     FC E4 05 F1 | 	add	objptr, ##34556
2054c     F2 FA 61 FC | 	wrlong	result1, objptr
20550     43 00 00 FF 
20554     FC E4 85 F1 | 	sub	objptr, ##34556
20558     F2 FA 01 F6 | 	mov	result1, objptr
2055c     00 60 01 FF 
20560     00 FA 45 F5 | 	or	result1, ##46137344
20564     43 00 00 FF 
20568     F8 E4 05 F1 | 	add	objptr, ##34552
2056c     F2 FA 61 FC | 	wrlong	result1, objptr
20570     43 00 00 FF 
20574     F8 E4 85 F1 | 	sub	objptr, ##34552
20578     F2 FA 01 F6 | 	mov	result1, objptr
2057c     00 68 01 FF 
20580     00 FA 45 F5 | 	or	result1, ##47185920
20584     43 00 00 FF 
20588     9C E4 05 F1 | 	add	objptr, ##34460
2058c     F2 FA 61 FC | 	wrlong	result1, objptr
20590     43 00 00 FF 
20594     9C E4 85 F1 | 	sub	objptr, ##34460
20598     F2 FA 01 F6 | 	mov	result1, objptr
2059c     00 70 01 FF 
205a0     00 FA 45 F5 | 	or	result1, ##48234496
205a4     43 00 00 FF 
205a8     A0 E4 05 F1 | 	add	objptr, ##34464
205ac     F2 FA 61 FC | 	wrlong	result1, objptr
205b0     43 00 00 FF 
205b4     A0 E4 85 F1 | 	sub	objptr, ##34464
205b8     F2 FA 01 F6 | 	mov	result1, objptr
205bc     00 78 01 FF 
205c0     00 FA 45 F5 | 	or	result1, ##49283072
205c4     43 00 00 FF 
205c8     08 E5 05 F1 | 	add	objptr, ##34568
205cc     F2 FA 61 FC | 	wrlong	result1, objptr
205d0     43 00 00 FF 
205d4     08 E5 85 F1 | 	sub	objptr, ##34568
205d8     F2 FA 01 F6 | 	mov	result1, objptr
205dc     38 FA 25 F4 | 	bith	result1, #56
205e0     43 00 00 FF 
205e4     B0 E5 05 F1 | 	add	objptr, ##34736
205e8     F2 FA 61 FC | 	wrlong	result1, objptr
205ec     43 00 00 FF 
205f0     B0 E5 85 F1 | 	sub	objptr, ##34736
205f4     F2 FA 01 F6 | 	mov	result1, objptr
205f8     00 88 01 FF 
205fc     00 FA 45 F5 | 	or	result1, ##51380224
20600     43 00 00 FF 
20604     C4 E5 05 F1 | 	add	objptr, ##34756
20608     F2 FA 61 FC | 	wrlong	result1, objptr
2060c     43 00 00 FF 
20610     C4 E5 85 F1 | 	sub	objptr, ##34756
20614     F2 FA 01 F6 | 	mov	result1, objptr
20618     00 90 01 FF 
2061c     00 FA 45 F5 | 	or	result1, ##52428800
20620     43 00 00 FF 
20624     D0 E5 05 F1 | 	add	objptr, ##34768
20628     F2 FA 61 FC | 	wrlong	result1, objptr
2062c     43 00 00 FF 
20630     D0 E5 85 F1 | 	sub	objptr, ##34768
20634     F2 FA 01 F6 | 	mov	result1, objptr
20638     00 98 01 FF 
2063c     00 FA 45 F5 | 	or	result1, ##53477376
20640     43 00 00 FF 
20644     D4 E5 05 F1 | 	add	objptr, ##34772
20648     F2 FA 61 FC | 	wrlong	result1, objptr
2064c     43 00 00 FF 
20650     D4 E5 85 F1 | 	sub	objptr, ##34772
20654     F2 FA 01 F6 | 	mov	result1, objptr
20658     00 A0 01 FF 
2065c     00 FA 45 F5 | 	or	result1, ##54525952
20660     43 00 00 FF 
20664     D8 E5 05 F1 | 	add	objptr, ##34776
20668     F2 FA 61 FC | 	wrlong	result1, objptr
2066c     43 00 00 FF 
20670     D8 E5 85 F1 | 	sub	objptr, ##34776
20674     F2 FA 01 F6 | 	mov	result1, objptr
20678     00 A8 01 FF 
2067c     00 FA 45 F5 | 	or	result1, ##55574528
20680     43 00 00 FF 
20684     DC E5 05 F1 | 	add	objptr, ##34780
20688     F2 FA 61 FC | 	wrlong	result1, objptr
2068c     43 00 00 FF 
20690     DC E5 85 F1 | 	sub	objptr, ##34780
20694     F2 FA 01 F6 | 	mov	result1, objptr
20698     00 B0 01 FF 
2069c     00 FA 45 F5 | 	or	result1, ##56623104
206a0     43 00 00 FF 
206a4     E0 E5 05 F1 | 	add	objptr, ##34784
206a8     F2 FA 61 FC | 	wrlong	result1, objptr
206ac     43 00 00 FF 
206b0     E0 E5 85 F1 | 	sub	objptr, ##34784
206b4     F2 FA 01 F6 | 	mov	result1, objptr
206b8     00 B8 01 FF 
206bc     00 FA 45 F5 | 	or	result1, ##57671680
206c0     43 00 00 FF 
206c4     E4 E5 05 F1 | 	add	objptr, ##34788
206c8     F2 FA 61 FC | 	wrlong	result1, objptr
206cc     43 00 00 FF 
206d0     E4 E5 85 F1 | 	sub	objptr, ##34788
206d4     F2 FA 01 F6 | 	mov	result1, objptr
206d8     94 FA 25 F4 | 	bith	result1, #148
206dc     43 00 00 FF 
206e0     AC E5 05 F1 | 	add	objptr, ##34732
206e4     F2 FA 61 FC | 	wrlong	result1, objptr
206e8     43 00 00 FF 
206ec     AC E5 85 F1 | 	sub	objptr, ##34732
206f0     F2 FA 01 F6 | 	mov	result1, objptr
206f4     57 FA 25 F4 | 	bith	result1, #87
206f8     43 00 00 FF 
206fc     EC E5 05 F1 | 	add	objptr, ##34796
20700     F2 FA 61 FC | 	wrlong	result1, objptr
20704     43 00 00 FF 
20708     EC E5 85 F1 | 	sub	objptr, ##34796
2070c     F2 FA 01 F6 | 	mov	result1, objptr
20710     00 C8 01 FF 
20714     00 FA 45 F5 | 	or	result1, ##59768832
20718     43 00 00 FF 
2071c     E8 E5 05 F1 | 	add	objptr, ##34792
20720     F2 FA 61 FC | 	wrlong	result1, objptr
20724     43 00 00 FF 
20728     E8 E5 85 F1 | 	sub	objptr, ##34792
2072c     F2 FA 01 F6 | 	mov	result1, objptr
20730     00 D0 01 FF 
20734     00 FA 45 F5 | 	or	result1, ##60817408
20738     44 00 00 FF 
2073c     00 E4 05 F1 | 	add	objptr, ##34816
20740     F2 FA 61 FC | 	wrlong	result1, objptr
20744     44 00 00 FF 
20748     00 E4 85 F1 | 	sub	objptr, ##34816
2074c     F2 FA 01 F6 | 	mov	result1, objptr
20750     00 D8 01 FF 
20754     00 FA 45 F5 | 	or	result1, ##61865984
20758     44 00 00 FF 
2075c     04 E4 05 F1 | 	add	objptr, ##34820
20760     F2 FA 61 FC | 	wrlong	result1, objptr
20764     44 00 00 FF 
20768     04 E4 85 F1 | 	sub	objptr, ##34820
2076c     F2 FA 01 F6 | 	mov	result1, objptr
20770     76 FA 25 F4 | 	bith	result1, #118
20774     43 00 00 FF 
20778     F0 E5 05 F1 | 	add	objptr, ##34800
2077c     F2 FA 61 FC | 	wrlong	result1, objptr
20780     43 00 00 FF 
20784     F0 E5 85 F1 | 	sub	objptr, ##34800
20788     F2 FA 01 F6 | 	mov	result1, objptr
2078c     00 E8 01 FF 
20790     00 FA 45 F5 | 	or	result1, ##63963136
20794     43 00 00 FF 
20798     F4 E5 05 F1 | 	add	objptr, ##34804
2079c     F2 FA 61 FC | 	wrlong	result1, objptr
207a0     43 00 00 FF 
207a4     F4 E5 85 F1 | 	sub	objptr, ##34804
207a8     F2 FA 01 F6 | 	mov	result1, objptr
207ac     95 FA 25 F4 | 	bith	result1, #149
207b0     43 00 00 FF 
207b4     F8 E5 05 F1 | 	add	objptr, ##34808
207b8     F2 FA 61 FC | 	wrlong	result1, objptr
207bc     43 00 00 FF 
207c0     F8 E5 85 F1 | 	sub	objptr, ##34808
207c4     F2 FA 01 F6 | 	mov	result1, objptr
207c8     B4 FA 25 F4 | 	bith	result1, #180
207cc     43 00 00 FF 
207d0     FC E5 05 F1 | 	add	objptr, ##34812
207d4     F2 FA 61 FC | 	wrlong	result1, objptr
207d8     43 00 00 FF 
207dc     FC E5 85 F1 | 	sub	objptr, ##34812
207e0     F2 FA 01 F6 | 	mov	result1, objptr
207e4     1A FA 25 F4 | 	bith	result1, #26
207e8     44 00 00 FF 
207ec     0C E4 05 F1 | 	add	objptr, ##34828
207f0     F2 FA 61 FC | 	wrlong	result1, objptr
207f4     44 00 00 FF 
207f8     0C E4 85 F1 | 	sub	objptr, ##34828
207fc     F2 FA 01 F6 | 	mov	result1, objptr
20800     00 08 02 FF 
20804     00 FA 45 F5 | 	or	result1, ##68157440
20808     44 00 00 FF 
2080c     08 E4 05 F1 | 	add	objptr, ##34824
20810     F2 FA 61 FC | 	wrlong	result1, objptr
20814     44 00 00 FF 
20818     08 E4 85 F1 | 	sub	objptr, ##34824
2081c     F2 FA 01 F6 | 	mov	result1, objptr
20820     00 10 02 FF 
20824     00 FA 45 F5 | 	or	result1, ##69206016
20828     44 00 00 FF 
2082c     18 E4 05 F1 | 	add	objptr, ##34840
20830     F2 FA 61 FC | 	wrlong	result1, objptr
20834     44 00 00 FF 
20838     18 E4 85 F1 | 	sub	objptr, ##34840
2083c     F2 FA 01 F6 | 	mov	result1, objptr
20840     00 18 02 FF 
20844     00 FA 45 F5 | 	or	result1, ##70254592
20848     44 00 00 FF 
2084c     14 E4 05 F1 | 	add	objptr, ##34836
20850     F2 FA 61 FC | 	wrlong	result1, objptr
20854     44 00 00 FF 
20858     14 E4 85 F1 | 	sub	objptr, ##34836
2085c     F2 FA 01 F6 | 	mov	result1, objptr
20860     00 20 02 FF 
20864     00 FA 45 F5 | 	or	result1, ##71303168
20868     44 00 00 FF 
2086c     10 E4 05 F1 | 	add	objptr, ##34832
20870     F2 FA 61 FC | 	wrlong	result1, objptr
20874     44 00 00 FF 
20878     10 E4 85 F1 | 	sub	objptr, ##34832
2087c     F2 FA 01 F6 | 	mov	result1, objptr
20880     00 28 02 FF 
20884     00 FA 45 F5 | 	or	result1, ##72351744
20888     44 00 00 FF 
2088c     1C E4 05 F1 | 	add	objptr, ##34844
20890     F2 FA 61 FC | 	wrlong	result1, objptr
20894     44 00 00 FF 
20898     1C E4 85 F1 | 	sub	objptr, ##34844
2089c     F2 FA 01 F6 | 	mov	result1, objptr
208a0     00 30 02 FF 
208a4     00 FA 45 F5 | 	or	result1, ##73400320
208a8     44 00 00 FF 
208ac     20 E4 05 F1 | 	add	objptr, ##34848
208b0     F2 FA 61 FC | 	wrlong	result1, objptr
208b4     44 00 00 FF 
208b8     20 E4 85 F1 | 	sub	objptr, ##34848
208bc     F2 FA 01 F6 | 	mov	result1, objptr
208c0     00 38 02 FF 
208c4     00 FA 45 F5 | 	or	result1, ##74448896
208c8     43 00 00 FF 
208cc     B4 E4 05 F1 | 	add	objptr, ##34484
208d0     F2 FA 61 FC | 	wrlong	result1, objptr
208d4     43 00 00 FF 
208d8     B4 E4 85 F1 | 	sub	objptr, ##34484
208dc     F2 FA 01 F6 | 	mov	result1, objptr
208e0     00 40 02 FF 
208e4     00 FA 45 F5 | 	or	result1, ##75497472
208e8     44 00 00 FF 
208ec     38 E4 05 F1 | 	add	objptr, ##34872
208f0     F2 FA 61 FC | 	wrlong	result1, objptr
208f4     44 00 00 FF 
208f8     38 E4 85 F1 | 	sub	objptr, ##34872
208fc     F2 FA 01 F6 | 	mov	result1, objptr
20900     00 48 02 FF 
20904     00 FA 45 F5 | 	or	result1, ##76546048
20908     44 00 00 FF 
2090c     48 E4 05 F1 | 	add	objptr, ##34888
20910     F2 FA 61 FC | 	wrlong	result1, objptr
20914     44 00 00 FF 
20918     48 E4 85 F1 | 	sub	objptr, ##34888
2091c     F2 FA 01 F6 | 	mov	result1, objptr
20920     00 50 02 FF 
20924     00 FA 45 F5 | 	or	result1, ##77594624
20928     44 00 00 FF 
2092c     4C E4 05 F1 | 	add	objptr, ##34892
20930     F2 FA 61 FC | 	wrlong	result1, objptr
20934     44 00 00 FF 
20938     4C E4 85 F1 | 	sub	objptr, ##34892
2093c     F2 FA 01 F6 | 	mov	result1, objptr
20940     00 58 02 FF 
20944     00 FA 45 F5 | 	or	result1, ##78643200
20948     44 00 00 FF 
2094c     44 E4 05 F1 | 	add	objptr, ##34884
20950     F2 FA 61 FC | 	wrlong	result1, objptr
20954     44 00 00 FF 
20958     44 E4 85 F1 | 	sub	objptr, ##34884
2095c     F2 FA 01 F6 | 	mov	result1, objptr
20960     00 60 02 FF 
20964     00 FA 45 F5 | 	or	result1, ##79691776
20968     44 00 00 FF 
2096c     3C E4 05 F1 | 	add	objptr, ##34876
20970     F2 FA 61 FC | 	wrlong	result1, objptr
20974     44 00 00 FF 
20978     3C E4 85 F1 | 	sub	objptr, ##34876
2097c     F2 FA 01 F6 | 	mov	result1, objptr
20980     00 68 02 FF 
20984     00 FA 45 F5 | 	or	result1, ##80740352
20988     44 00 00 FF 
2098c     40 E4 05 F1 | 	add	objptr, ##34880
20990     F2 FA 61 FC | 	wrlong	result1, objptr
20994     44 00 00 FF 
20998     40 E4 85 F1 | 	sub	objptr, ##34880
2099c     F2 FA 01 F6 | 	mov	result1, objptr
209a0     00 70 02 FF 
209a4     00 FA 45 F5 | 	or	result1, ##81788928
209a8     44 00 00 FF 
209ac     50 E4 05 F1 | 	add	objptr, ##34896
209b0     F2 FA 61 FC | 	wrlong	result1, objptr
209b4     44 00 00 FF 
209b8     50 E4 85 F1 | 	sub	objptr, ##34896
209bc     F2 FA 01 F6 | 	mov	result1, objptr
209c0     00 78 02 FF 
209c4     00 FA 45 F5 | 	or	result1, ##82837504
209c8     44 00 00 FF 
209cc     54 E4 05 F1 | 	add	objptr, ##34900
209d0     F2 FA 61 FC | 	wrlong	result1, objptr
209d4     44 00 00 FF 
209d8     54 E4 85 F1 | 	sub	objptr, ##34900
209dc     F2 FA 01 F6 | 	mov	result1, objptr
209e0     00 80 02 FF 
209e4     00 FA 45 F5 | 	or	result1, ##83886080
209e8     44 00 00 FF 
209ec     58 E4 05 F1 | 	add	objptr, ##34904
209f0     F2 FA 61 FC | 	wrlong	result1, objptr
209f4     44 00 00 FF 
209f8     58 E4 85 F1 | 	sub	objptr, ##34904
209fc     F2 FA 01 F6 | 	mov	result1, objptr
20a00     00 88 02 FF 
20a04     00 FA 45 F5 | 	or	result1, ##84934656
20a08     44 00 00 FF 
20a0c     5C E4 05 F1 | 	add	objptr, ##34908
20a10     F2 FA 61 FC | 	wrlong	result1, objptr
20a14     44 00 00 FF 
20a18     5C E4 85 F1 | 	sub	objptr, ##34908
20a1c     F2 FA 01 F6 | 	mov	result1, objptr
20a20     00 90 02 FF 
20a24     00 FA 45 F5 | 	or	result1, ##85983232
20a28     44 00 00 FF 
20a2c     60 E4 05 F1 | 	add	objptr, ##34912
20a30     F2 FA 61 FC | 	wrlong	result1, objptr
20a34     44 00 00 FF 
20a38     60 E4 85 F1 | 	sub	objptr, ##34912
20a3c     F2 FA 01 F6 | 	mov	result1, objptr
20a40     00 98 02 FF 
20a44     00 FA 45 F5 | 	or	result1, ##87031808
20a48     44 00 00 FF 
20a4c     64 E4 05 F1 | 	add	objptr, ##34916
20a50     F2 FA 61 FC | 	wrlong	result1, objptr
20a54     44 00 00 FF 
20a58     64 E4 85 F1 | 	sub	objptr, ##34916
20a5c     F2 FA 01 F6 | 	mov	result1, objptr
20a60     00 A0 02 FF 
20a64     00 FA 45 F5 | 	or	result1, ##88080384
20a68     44 00 00 FF 
20a6c     68 E4 05 F1 | 	add	objptr, ##34920
20a70     F2 FA 61 FC | 	wrlong	result1, objptr
20a74     44 00 00 FF 
20a78     68 E4 85 F1 | 	sub	objptr, ##34920
20a7c     F2 FA 01 F6 | 	mov	result1, objptr
20a80     00 A8 02 FF 
20a84     00 FA 45 F5 | 	or	result1, ##89128960
20a88     44 00 00 FF 
20a8c     6C E4 05 F1 | 	add	objptr, ##34924
20a90     F2 FA 61 FC | 	wrlong	result1, objptr
20a94     44 00 00 FF 
20a98     6C E4 85 F1 | 	sub	objptr, ##34924
20a9c     F2 FA 01 F6 | 	mov	result1, objptr
20aa0     00 B0 02 FF 
20aa4     00 FA 45 F5 | 	or	result1, ##90177536
20aa8     44 00 00 FF 
20aac     78 E4 05 F1 | 	add	objptr, ##34936
20ab0     F2 FA 61 FC | 	wrlong	result1, objptr
20ab4     44 00 00 FF 
20ab8     78 E4 85 F1 | 	sub	objptr, ##34936
20abc     F2 FA 01 F6 | 	mov	result1, objptr
20ac0     00 B8 02 FF 
20ac4     00 FA 45 F5 | 	or	result1, ##91226112
20ac8     44 00 00 FF 
20acc     70 E4 05 F1 | 	add	objptr, ##34928
20ad0     F2 FA 61 FC | 	wrlong	result1, objptr
20ad4     44 00 00 FF 
20ad8     70 E4 85 F1 | 	sub	objptr, ##34928
20adc     F2 FA 01 F6 | 	mov	result1, objptr
20ae0     00 C0 02 FF 
20ae4     00 FA 45 F5 | 	or	result1, ##92274688
20ae8     44 00 00 FF 
20aec     74 E4 05 F1 | 	add	objptr, ##34932
20af0     F2 FA 61 FC | 	wrlong	result1, objptr
20af4     44 00 00 FF 
20af8     74 E4 85 F1 | 	sub	objptr, ##34932
20afc     F2 FA 01 F6 | 	mov	result1, objptr
20b00     00 C8 02 FF 
20b04     00 FA 45 F5 | 	or	result1, ##93323264
20b08     44 00 00 FF 
20b0c     7C E4 05 F1 | 	add	objptr, ##34940
20b10     F2 FA 61 FC | 	wrlong	result1, objptr
20b14     44 00 00 FF 
20b18     7C E4 85 F1 | 	sub	objptr, ##34940
20b1c     F2 FA 01 F6 | 	mov	result1, objptr
20b20     00 D0 02 FF 
20b24     00 FA 45 F5 | 	or	result1, ##94371840
20b28     44 00 00 FF 
20b2c     24 E4 05 F1 | 	add	objptr, ##34852
20b30     F2 FA 61 FC | 	wrlong	result1, objptr
20b34     44 00 00 FF 
20b38     24 E4 85 F1 | 	sub	objptr, ##34852
20b3c     F2 FA 01 F6 | 	mov	result1, objptr
20b40     00 D8 02 FF 
20b44     00 FA 45 F5 | 	or	result1, ##95420416
20b48     44 00 00 FF 
20b4c     2C E4 05 F1 | 	add	objptr, ##34860
20b50     F2 FA 61 FC | 	wrlong	result1, objptr
20b54     44 00 00 FF 
20b58     2C E4 85 F1 | 	sub	objptr, ##34860
20b5c     F2 FA 01 F6 | 	mov	result1, objptr
20b60     00 E0 02 FF 
20b64     00 FA 45 F5 | 	or	result1, ##96468992
20b68     44 00 00 FF 
20b6c     30 E4 05 F1 | 	add	objptr, ##34864
20b70     F2 FA 61 FC | 	wrlong	result1, objptr
20b74     44 00 00 FF 
20b78     30 E4 85 F1 | 	sub	objptr, ##34864
20b7c     F2 FA 01 F6 | 	mov	result1, objptr
20b80     00 E8 02 FF 
20b84     00 FA 45 F5 | 	or	result1, ##97517568
20b88     44 00 00 FF 
20b8c     80 E4 05 F1 | 	add	objptr, ##34944
20b90     F2 FA 61 FC | 	wrlong	result1, objptr
20b94     44 00 00 FF 
20b98     80 E4 85 F1 | 	sub	objptr, ##34944
20b9c     F2 FA 01 F6 | 	mov	result1, objptr
20ba0     00 F0 02 FF 
20ba4     00 FA 45 F5 | 	or	result1, ##98566144
20ba8     44 00 00 FF 
20bac     84 E4 05 F1 | 	add	objptr, ##34948
20bb0     F2 FA 61 FC | 	wrlong	result1, objptr
20bb4     44 00 00 FF 
20bb8     84 E4 85 F1 | 	sub	objptr, ##34948
20bbc     F2 FA 01 F6 | 	mov	result1, objptr
20bc0     00 F8 02 FF 
20bc4     00 FA 45 F5 | 	or	result1, ##99614720
20bc8     44 00 00 FF 
20bcc     88 E4 05 F1 | 	add	objptr, ##34952
20bd0     F2 FA 61 FC | 	wrlong	result1, objptr
20bd4     44 00 00 FF 
20bd8     88 E4 85 F1 | 	sub	objptr, ##34952
20bdc     F2 FA 01 F6 | 	mov	result1, objptr
20be0     39 FA 25 F4 | 	bith	result1, #57
20be4     44 00 00 FF 
20be8     34 E4 05 F1 | 	add	objptr, ##34868
20bec     F2 FA 61 FC | 	wrlong	result1, objptr
20bf0     44 00 00 FF 
20bf4     34 E4 85 F1 | 	sub	objptr, ##34868
20bf8     F2 FA 01 F6 | 	mov	result1, objptr
20bfc     00 08 03 FF 
20c00     00 FA 45 F5 | 	or	result1, ##101711872
20c04     44 00 00 FF 
20c08     98 E4 05 F1 | 	add	objptr, ##34968
20c0c     F2 FA 61 FC | 	wrlong	result1, objptr
20c10     44 00 00 FF 
20c14     98 E4 85 F1 | 	sub	objptr, ##34968
20c18     F2 FA 01 F6 | 	mov	result1, objptr
20c1c     00 10 03 FF 
20c20     00 FA 45 F5 | 	or	result1, ##102760448
20c24     44 00 00 FF 
20c28     A0 E4 05 F1 | 	add	objptr, ##34976
20c2c     F2 FA 61 FC | 	wrlong	result1, objptr
20c30     44 00 00 FF 
20c34     A0 E4 85 F1 | 	sub	objptr, ##34976
20c38     F2 FA 01 F6 | 	mov	result1, objptr
20c3c     00 18 03 FF 
20c40     00 FA 45 F5 | 	or	result1, ##103809024
20c44     44 00 00 FF 
20c48     94 E4 05 F1 | 	add	objptr, ##34964
20c4c     F2 FA 61 FC | 	wrlong	result1, objptr
20c50     44 00 00 FF 
20c54     94 E4 85 F1 | 	sub	objptr, ##34964
20c58     F2 FA 01 F6 | 	mov	result1, objptr
20c5c     00 20 03 FF 
20c60     00 FA 45 F5 | 	or	result1, ##104857600
20c64     44 00 00 FF 
20c68     90 E4 05 F1 | 	add	objptr, ##34960
20c6c     F2 FA 61 FC | 	wrlong	result1, objptr
20c70     44 00 00 FF 
20c74     90 E4 85 F1 | 	sub	objptr, ##34960
20c78     F2 FA 01 F6 | 	mov	result1, objptr
20c7c     00 28 03 FF 
20c80     00 FA 45 F5 | 	or	result1, ##105906176
20c84     44 00 00 FF 
20c88     8C E4 05 F1 | 	add	objptr, ##34956
20c8c     F2 FA 61 FC | 	wrlong	result1, objptr
20c90     44 00 00 FF 
20c94     8C E4 85 F1 | 	sub	objptr, ##34956
20c98     F2 FA 01 F6 | 	mov	result1, objptr
20c9c     00 30 03 FF 
20ca0     00 FA 45 F5 | 	or	result1, ##106954752
20ca4     44 00 00 FF 
20ca8     9C E4 05 F1 | 	add	objptr, ##34972
20cac     F2 FA 61 FC | 	wrlong	result1, objptr
20cb0     44 00 00 FF 
20cb4     9C E4 85 F1 | 	sub	objptr, ##34972
20cb8     F2 FA 01 F6 | 	mov	result1, objptr
20cbc     00 38 03 FF 
20cc0     00 FA 45 F5 | 	or	result1, ##108003328
20cc4     44 00 00 FF 
20cc8     A4 E4 05 F1 | 	add	objptr, ##34980
20ccc     F2 FA 61 FC | 	wrlong	result1, objptr
20cd0     44 00 00 FF 
20cd4     A4 E4 85 F1 | 	sub	objptr, ##34980
20cd8     F2 FA 01 F6 | 	mov	result1, objptr
20cdc     00 40 03 FF 
20ce0     00 FA 45 F5 | 	or	result1, ##109051904
20ce4     44 00 00 FF 
20ce8     A8 E4 05 F1 | 	add	objptr, ##34984
20cec     F2 FA 61 FC | 	wrlong	result1, objptr
20cf0     44 00 00 FF 
20cf4     A8 E4 85 F1 | 	sub	objptr, ##34984
20cf8     F2 FA 01 F6 | 	mov	result1, objptr
20cfc     00 48 03 FF 
20d00     00 FA 45 F5 | 	or	result1, ##110100480
20d04     44 00 00 FF 
20d08     AC E4 05 F1 | 	add	objptr, ##34988
20d0c     F2 FA 61 FC | 	wrlong	result1, objptr
20d10     44 00 00 FF 
20d14     AC E4 85 F1 | 	sub	objptr, ##34988
20d18     F2 FA 01 F6 | 	mov	result1, objptr
20d1c     00 50 03 FF 
20d20     00 FA 45 F5 | 	or	result1, ##111149056
20d24     44 00 00 FF 
20d28     B4 E4 05 F1 | 	add	objptr, ##34996
20d2c     F2 FA 61 FC | 	wrlong	result1, objptr
20d30     44 00 00 FF 
20d34     B4 E4 85 F1 | 	sub	objptr, ##34996
20d38     F2 FA 01 F6 | 	mov	result1, objptr
20d3c     00 58 03 FF 
20d40     00 FA 45 F5 | 	or	result1, ##112197632
20d44     44 00 00 FF 
20d48     B8 E4 05 F1 | 	add	objptr, ##35000
20d4c     F2 FA 61 FC | 	wrlong	result1, objptr
20d50     44 00 00 FF 
20d54     B8 E4 85 F1 | 	sub	objptr, ##35000
20d58     F2 FA 01 F6 | 	mov	result1, objptr
20d5c     00 60 03 FF 
20d60     00 FA 45 F5 | 	or	result1, ##113246208
20d64     44 00 00 FF 
20d68     BC E4 05 F1 | 	add	objptr, ##35004
20d6c     F2 FA 61 FC | 	wrlong	result1, objptr
20d70     44 00 00 FF 
20d74     BC E4 85 F1 | 	sub	objptr, ##35004
20d78     F2 FA 01 F6 | 	mov	result1, objptr
20d7c     00 68 03 FF 
20d80     00 FA 45 F5 | 	or	result1, ##114294784
20d84     44 00 00 FF 
20d88     C0 E4 05 F1 | 	add	objptr, ##35008
20d8c     F2 FA 61 FC | 	wrlong	result1, objptr
20d90     44 00 00 FF 
20d94     C0 E4 85 F1 | 	sub	objptr, ##35008
20d98     F2 FA 01 F6 | 	mov	result1, objptr
20d9c     00 70 03 FF 
20da0     00 FA 45 F5 | 	or	result1, ##115343360
20da4     44 00 00 FF 
20da8     C4 E4 05 F1 | 	add	objptr, ##35012
20dac     F2 FA 61 FC | 	wrlong	result1, objptr
20db0     44 00 00 FF 
20db4     C4 E4 85 F1 | 	sub	objptr, ##35012
20db8     F2 FA 01 F6 | 	mov	result1, objptr
20dbc     00 78 03 FF 
20dc0     00 FA 45 F5 | 	or	result1, ##116391936
20dc4     44 00 00 FF 
20dc8     C8 E4 05 F1 | 	add	objptr, ##35016
20dcc     F2 FA 61 FC | 	wrlong	result1, objptr
20dd0     44 00 00 FF 
20dd4     C8 E4 85 F1 | 	sub	objptr, ##35016
20dd8     F2 FA 01 F6 | 	mov	result1, objptr
20ddc     00 08 01 FF 
20de0     00 FA 45 F5 | 	or	result1, ##34603008
20de4     44 00 00 FF 
20de8     CC E4 05 F1 | 	add	objptr, ##35020
20dec     F2 FA 61 FC | 	wrlong	result1, objptr
20df0     44 00 00 FF 
20df4     CC E4 85 F1 | 	sub	objptr, ##35020
20df8     F2 FA 01 F6 | 	mov	result1, objptr
20dfc     58 FA 25 F4 | 	bith	result1, #88
20e00     44 00 00 FF 
20e04     D0 E4 05 F1 | 	add	objptr, ##35024
20e08     F2 FA 61 FC | 	wrlong	result1, objptr
20e0c     44 00 00 FF 
20e10     D0 E4 85 F1 | 	sub	objptr, ##35024
20e14     F2 FA 01 F6 | 	mov	result1, objptr
20e18     00 88 03 FF 
20e1c     00 FA 45 F5 | 	or	result1, ##118489088
20e20     44 00 00 FF 
20e24     B0 E4 05 F1 | 	add	objptr, ##34992
20e28     F2 FA 61 FC | 	wrlong	result1, objptr
20e2c     44 00 00 FF 
20e30     B0 E4 85 F1 | 	sub	objptr, ##34992
20e34     F2 FA 01 F6 | 	mov	result1, objptr
20e38     00 90 03 FF 
20e3c     00 FA 45 F5 | 	or	result1, ##119537664
20e40     43 00 00 FF 
20e44     A8 E4 05 F1 | 	add	objptr, ##34472
20e48     F2 FA 61 FC | 	wrlong	result1, objptr
20e4c     43 00 00 FF 
20e50     A8 E4 85 F1 | 	sub	objptr, ##34472
20e54     F2 FA 01 F6 | 	mov	result1, objptr
20e58     00 98 03 FF 
20e5c     00 FA 45 F5 | 	or	result1, ##120586240
20e60     44 00 00 FF 
20e64     D4 E4 05 F1 | 	add	objptr, ##35028
20e68     F2 FA 61 FC | 	wrlong	result1, objptr
20e6c     44 00 00 FF 
20e70     D4 E4 85 F1 | 	sub	objptr, ##35028
20e74     F2 FA 01 F6 | 	mov	result1, objptr
20e78     00 A0 03 FF 
20e7c     00 FA 45 F5 | 	or	result1, ##121634816
20e80     44 00 00 FF 
20e84     D8 E4 05 F1 | 	add	objptr, ##35032
20e88     F2 FA 61 FC | 	wrlong	result1, objptr
20e8c     44 00 00 FF 
20e90     D8 E4 85 F1 | 	sub	objptr, ##35032
20e94     F2 FA 01 F6 | 	mov	result1, objptr
20e98     00 A8 03 FF 
20e9c     00 FA 45 F5 | 	or	result1, ##122683392
20ea0     44 00 00 FF 
20ea4     EC E4 05 F1 | 	add	objptr, ##35052
20ea8     F2 FA 61 FC | 	wrlong	result1, objptr
20eac     44 00 00 FF 
20eb0     EC E4 85 F1 | 	sub	objptr, ##35052
20eb4     F2 FA 01 F6 | 	mov	result1, objptr
20eb8     00 B0 03 FF 
20ebc     00 FA 45 F5 | 	or	result1, ##123731968
20ec0     44 00 00 FF 
20ec4     E8 E4 05 F1 | 	add	objptr, ##35048
20ec8     F2 FA 61 FC | 	wrlong	result1, objptr
20ecc     44 00 00 FF 
20ed0     E8 E4 85 F1 | 	sub	objptr, ##35048
20ed4     F2 FA 01 F6 | 	mov	result1, objptr
20ed8     00 B8 03 FF 
20edc     00 FA 45 F5 | 	or	result1, ##124780544
20ee0     44 00 00 FF 
20ee4     E0 E4 05 F1 | 	add	objptr, ##35040
20ee8     F2 FA 61 FC | 	wrlong	result1, objptr
20eec     44 00 00 FF 
20ef0     E0 E4 85 F1 | 	sub	objptr, ##35040
20ef4     F2 FA 01 F6 | 	mov	result1, objptr
20ef8     77 FA 25 F4 | 	bith	result1, #119
20efc     44 00 00 FF 
20f00     DC E4 05 F1 | 	add	objptr, ##35036
20f04     F2 FA 61 FC | 	wrlong	result1, objptr
20f08     44 00 00 FF 
20f0c     DC E4 85 F1 | 	sub	objptr, ##35036
20f10     F2 FA 01 F6 | 	mov	result1, objptr
20f14     00 C8 03 FF 
20f18     00 FA 45 F5 | 	or	result1, ##126877696
20f1c     44 00 00 FF 
20f20     FC E4 05 F1 | 	add	objptr, ##35068
20f24     F2 FA 61 FC | 	wrlong	result1, objptr
20f28     44 00 00 FF 
20f2c     FC E4 85 F1 | 	sub	objptr, ##35068
20f30     F2 FA 01 F6 | 	mov	result1, objptr
20f34     00 D0 03 FF 
20f38     00 FA 45 F5 | 	or	result1, ##127926272
20f3c     44 00 00 FF 
20f40     F0 E4 05 F1 | 	add	objptr, ##35056
20f44     F2 FA 61 FC | 	wrlong	result1, objptr
20f48     44 00 00 FF 
20f4c     F0 E4 85 F1 | 	sub	objptr, ##35056
20f50     F2 FA 01 F6 | 	mov	result1, objptr
20f54     00 D8 03 FF 
20f58     00 FA 45 F5 | 	or	result1, ##128974848
20f5c     44 00 00 FF 
20f60     F4 E4 05 F1 | 	add	objptr, ##35060
20f64     F2 FA 61 FC | 	wrlong	result1, objptr
20f68     44 00 00 FF 
20f6c     F4 E4 85 F1 | 	sub	objptr, ##35060
20f70     F2 FA 01 F6 | 	mov	result1, objptr
20f74     96 FA 25 F4 | 	bith	result1, #150
20f78     44 00 00 FF 
20f7c     F8 E4 05 F1 | 	add	objptr, ##35064
20f80     F2 FA 61 FC | 	wrlong	result1, objptr
20f84     44 00 00 FF 
20f88     F8 E4 85 F1 | 	sub	objptr, ##35064
20f8c     F2 FA 01 F6 | 	mov	result1, objptr
20f90     00 E8 03 FF 
20f94     00 FA 45 F5 | 	or	result1, ##131072000
20f98     44 00 00 FF 
20f9c     00 E5 05 F1 | 	add	objptr, ##35072
20fa0     F2 FA 61 FC | 	wrlong	result1, objptr
20fa4     44 00 00 FF 
20fa8     00 E5 85 F1 | 	sub	objptr, ##35072
20fac     F2 FA 01 F6 | 	mov	result1, objptr
20fb0     B5 FA 25 F4 | 	bith	result1, #181
20fb4     44 00 00 FF 
20fb8     04 E5 05 F1 | 	add	objptr, ##35076
20fbc     F2 FA 61 FC | 	wrlong	result1, objptr
20fc0     44 00 00 FF 
20fc4     04 E5 85 F1 | 	sub	objptr, ##35076
20fc8     F2 FA 01 F6 | 	mov	result1, objptr
20fcc     D4 FA 25 F4 | 	bith	result1, #212
20fd0     44 00 00 FF 
20fd4     08 E5 05 F1 | 	add	objptr, ##35080
20fd8     F2 FA 61 FC | 	wrlong	result1, objptr
20fdc     44 00 00 FF 
20fe0     08 E5 85 F1 | 	sub	objptr, ##35080
20fe4     F2 FA 01 F6 | 	mov	result1, objptr
20fe8     1B FA 25 F4 | 	bith	result1, #27
20fec     44 00 00 FF 
20ff0     0C E5 05 F1 | 	add	objptr, ##35084
20ff4     F2 FA 61 FC | 	wrlong	result1, objptr
20ff8     44 00 00 FF 
20ffc     0C E5 85 F1 | 	sub	objptr, ##35084
21000     F2 FA 01 F6 | 	mov	result1, objptr
21004     00 08 04 FF 
21008     00 FA 45 F5 | 	or	result1, ##135266304
2100c     44 00 00 FF 
21010     10 E5 05 F1 | 	add	objptr, ##35088
21014     F2 FA 61 FC | 	wrlong	result1, objptr
21018     44 00 00 FF 
2101c     10 E5 85 F1 | 	sub	objptr, ##35088
21020     F2 FA 01 F6 | 	mov	result1, objptr
21024     00 10 04 FF 
21028     00 FA 45 F5 | 	or	result1, ##136314880
2102c     44 00 00 FF 
21030     14 E5 05 F1 | 	add	objptr, ##35092
21034     F2 FA 61 FC | 	wrlong	result1, objptr
21038     44 00 00 FF 
2103c     14 E5 85 F1 | 	sub	objptr, ##35092
21040     F2 FA 01 F6 | 	mov	result1, objptr
21044     00 18 04 FF 
21048     00 FA 45 F5 | 	or	result1, ##137363456
2104c     44 00 00 FF 
21050     1C E5 05 F1 | 	add	objptr, ##35100
21054     F2 FA 61 FC | 	wrlong	result1, objptr
21058     44 00 00 FF 
2105c     1C E5 85 F1 | 	sub	objptr, ##35100
21060     F2 FA 01 F6 | 	mov	result1, objptr
21064     00 20 04 FF 
21068     00 FA 45 F5 | 	or	result1, ##138412032
2106c     44 00 00 FF 
21070     20 E5 05 F1 | 	add	objptr, ##35104
21074     F2 FA 61 FC | 	wrlong	result1, objptr
21078     44 00 00 FF 
2107c     20 E5 85 F1 | 	sub	objptr, ##35104
21080     F2 FA 01 F6 | 	mov	result1, objptr
21084     00 28 04 FF 
21088     00 FA 45 F5 | 	or	result1, ##139460608
2108c     44 00 00 FF 
21090     24 E5 05 F1 | 	add	objptr, ##35108
21094     F2 FA 61 FC | 	wrlong	result1, objptr
21098     44 00 00 FF 
2109c     24 E5 85 F1 | 	sub	objptr, ##35108
210a0     F2 FA 01 F6 | 	mov	result1, objptr
210a4     00 30 04 FF 
210a8     00 FA 45 F5 | 	or	result1, ##140509184
210ac     44 00 00 FF 
210b0     18 E5 05 F1 | 	add	objptr, ##35096
210b4     F2 FA 61 FC | 	wrlong	result1, objptr
210b8     44 00 00 FF 
210bc     18 E5 85 F1 | 	sub	objptr, ##35096
210c0     F2 FA 01 F6 | 	mov	result1, objptr
210c4     00 38 04 FF 
210c8     00 FA 45 F5 | 	or	result1, ##141557760
210cc     44 00 00 FF 
210d0     28 E5 05 F1 | 	add	objptr, ##35112
210d4     F2 FA 61 FC | 	wrlong	result1, objptr
210d8     44 00 00 FF 
210dc     28 E5 85 F1 | 	sub	objptr, ##35112
210e0     F2 FA 01 F6 | 	mov	result1, objptr
210e4     00 40 04 FF 
210e8     00 FA 45 F5 | 	or	result1, ##142606336
210ec     44 00 00 FF 
210f0     5C E5 05 F1 | 	add	objptr, ##35164
210f4     F2 FA 61 FC | 	wrlong	result1, objptr
210f8     44 00 00 FF 
210fc     5C E5 85 F1 | 	sub	objptr, ##35164
21100     F2 FA 01 F6 | 	mov	result1, objptr
21104     00 48 04 FF 
21108     00 FA 45 F5 | 	or	result1, ##143654912
2110c     44 00 00 FF 
21110     54 E5 05 F1 | 	add	objptr, ##35156
21114     F2 FA 61 FC | 	wrlong	result1, objptr
21118     44 00 00 FF 
2111c     54 E5 85 F1 | 	sub	objptr, ##35156
21120     F2 FA 01 F6 | 	mov	result1, objptr
21124     00 50 04 FF 
21128     00 FA 45 F5 | 	or	result1, ##144703488
2112c     44 00 00 FF 
21130     2C E5 05 F1 | 	add	objptr, ##35116
21134     F2 FA 61 FC | 	wrlong	result1, objptr
21138     44 00 00 FF 
2113c     2C E5 85 F1 | 	sub	objptr, ##35116
21140     F2 FA 01 F6 | 	mov	result1, objptr
21144     00 58 04 FF 
21148     00 FA 45 F5 | 	or	result1, ##145752064
2114c     44 00 00 FF 
21150     30 E5 05 F1 | 	add	objptr, ##35120
21154     F2 FA 61 FC | 	wrlong	result1, objptr
21158     44 00 00 FF 
2115c     30 E5 85 F1 | 	sub	objptr, ##35120
21160     F2 FA 01 F6 | 	mov	result1, objptr
21164     00 60 04 FF 
21168     00 FA 45 F5 | 	or	result1, ##146800640
2116c     44 00 00 FF 
21170     4C E5 05 F1 | 	add	objptr, ##35148
21174     F2 FA 61 FC | 	wrlong	result1, objptr
21178     44 00 00 FF 
2117c     4C E5 85 F1 | 	sub	objptr, ##35148
21180     F2 FA 01 F6 | 	mov	result1, objptr
21184     00 68 04 FF 
21188     00 FA 45 F5 | 	or	result1, ##147849216
2118c     44 00 00 FF 
21190     50 E5 05 F1 | 	add	objptr, ##35152
21194     F2 FA 61 FC | 	wrlong	result1, objptr
21198     44 00 00 FF 
2119c     50 E5 85 F1 | 	sub	objptr, ##35152
211a0     F2 FA 01 F6 | 	mov	result1, objptr
211a4     00 70 04 FF 
211a8     00 FA 45 F5 | 	or	result1, ##148897792
211ac     44 00 00 FF 
211b0     6C E5 05 F1 | 	add	objptr, ##35180
211b4     F2 FA 61 FC | 	wrlong	result1, objptr
211b8     44 00 00 FF 
211bc     6C E5 85 F1 | 	sub	objptr, ##35180
211c0     F2 FA 01 F6 | 	mov	result1, objptr
211c4     00 78 04 FF 
211c8     00 FA 45 F5 | 	or	result1, ##149946368
211cc     44 00 00 FF 
211d0     68 E5 05 F1 | 	add	objptr, ##35176
211d4     F2 FA 61 FC | 	wrlong	result1, objptr
211d8     44 00 00 FF 
211dc     68 E5 85 F1 | 	sub	objptr, ##35176
211e0     F2 FA 01 F6 | 	mov	result1, objptr
211e4     00 80 04 FF 
211e8     00 FA 45 F5 | 	or	result1, ##150994944
211ec     44 00 00 FF 
211f0     78 E5 05 F1 | 	add	objptr, ##35192
211f4     F2 FA 61 FC | 	wrlong	result1, objptr
211f8     44 00 00 FF 
211fc     78 E5 85 F1 | 	sub	objptr, ##35192
21200     F2 FA 01 F6 | 	mov	result1, objptr
21204     00 88 04 FF 
21208     00 FA 45 F5 | 	or	result1, ##152043520
2120c     44 00 00 FF 
21210     44 E5 05 F1 | 	add	objptr, ##35140
21214     F2 FA 61 FC | 	wrlong	result1, objptr
21218     44 00 00 FF 
2121c     44 E5 85 F1 | 	sub	objptr, ##35140
21220     F2 FA 01 F6 | 	mov	result1, objptr
21224     00 90 04 FF 
21228     00 FA 45 F5 | 	or	result1, ##153092096
2122c     44 00 00 FF 
21230     74 E5 05 F1 | 	add	objptr, ##35188
21234     F2 FA 61 FC | 	wrlong	result1, objptr
21238     44 00 00 FF 
2123c     74 E5 85 F1 | 	sub	objptr, ##35188
21240     F2 FA 01 F6 | 	mov	result1, objptr
21244     00 98 04 FF 
21248     00 FA 45 F5 | 	or	result1, ##154140672
2124c     44 00 00 FF 
21250     64 E5 05 F1 | 	add	objptr, ##35172
21254     F2 FA 61 FC | 	wrlong	result1, objptr
21258     44 00 00 FF 
2125c     64 E5 85 F1 | 	sub	objptr, ##35172
21260     F2 FA 01 F6 | 	mov	result1, objptr
21264     00 A0 04 FF 
21268     00 FA 45 F5 | 	or	result1, ##155189248
2126c     43 00 00 FF 
21270     14 E5 05 F1 | 	add	objptr, ##34580
21274     F2 FA 61 FC | 	wrlong	result1, objptr
21278     43 00 00 FF 
2127c     14 E5 85 F1 | 	sub	objptr, ##34580
21280     F2 FA 01 F6 | 	mov	result1, objptr
21284     00 A8 04 FF 
21288     00 FA 45 F5 | 	or	result1, ##156237824
2128c     44 00 00 FF 
21290     34 E5 05 F1 | 	add	objptr, ##35124
21294     F2 FA 61 FC | 	wrlong	result1, objptr
21298     44 00 00 FF 
2129c     34 E5 85 F1 | 	sub	objptr, ##35124
212a0     F2 FA 01 F6 | 	mov	result1, objptr
212a4     00 08 01 FF 
212a8     00 FA 45 F5 | 	or	result1, ##34603008
212ac     44 00 00 FF 
212b0     3C E5 05 F1 | 	add	objptr, ##35132
212b4     F2 FA 61 FC | 	wrlong	result1, objptr
212b8     44 00 00 FF 
212bc     3C E5 85 F1 | 	sub	objptr, ##35132
212c0     F2 FA 01 F6 | 	mov	result1, objptr
212c4     00 B0 04 FF 
212c8     00 FA 45 F5 | 	or	result1, ##157286400
212cc     44 00 00 FF 
212d0     38 E5 05 F1 | 	add	objptr, ##35128
212d4     F2 FA 61 FC | 	wrlong	result1, objptr
212d8     44 00 00 FF 
212dc     38 E5 85 F1 | 	sub	objptr, ##35128
212e0     F2 FA 01 F6 | 	mov	result1, objptr
212e4     00 B8 04 FF 
212e8     00 FA 45 F5 | 	or	result1, ##158334976
212ec     44 00 00 FF 
212f0     7C E5 05 F1 | 	add	objptr, ##35196
212f4     F2 FA 61 FC | 	wrlong	result1, objptr
212f8     44 00 00 FF 
212fc     7C E5 85 F1 | 	sub	objptr, ##35196
21300     F2 FA 01 F6 | 	mov	result1, objptr
21304     00 C0 04 FF 
21308     00 FA 45 F5 | 	or	result1, ##159383552
2130c     44 00 00 FF 
21310     80 E5 05 F1 | 	add	objptr, ##35200
21314     F2 FA 61 FC | 	wrlong	result1, objptr
21318     44 00 00 FF 
2131c     80 E5 85 F1 | 	sub	objptr, ##35200
21320     F2 FA 01 F6 | 	mov	result1, objptr
21324     00 C8 04 FF 
21328     00 FA 45 F5 | 	or	result1, ##160432128
2132c     44 00 00 FF 
21330     84 E5 05 F1 | 	add	objptr, ##35204
21334     F2 FA 61 FC | 	wrlong	result1, objptr
21338     44 00 00 FF 
2133c     84 E5 85 F1 | 	sub	objptr, ##35204
21340     F2 FA 01 F6 | 	mov	result1, objptr
21344     00 D0 04 FF 
21348     00 FA 45 F5 | 	or	result1, ##161480704
2134c     44 00 00 FF 
21350     88 E5 05 F1 | 	add	objptr, ##35208
21354     F2 FA 61 FC | 	wrlong	result1, objptr
21358     44 00 00 FF 
2135c     88 E5 85 F1 | 	sub	objptr, ##35208
21360     F2 FA 01 F6 | 	mov	result1, objptr
21364     00 D8 04 FF 
21368     00 FA 45 F5 | 	or	result1, ##162529280
2136c     44 00 00 FF 
21370     8C E5 05 F1 | 	add	objptr, ##35212
21374     F2 FA 61 FC | 	wrlong	result1, objptr
21378     44 00 00 FF 
2137c     8C E5 85 F1 | 	sub	objptr, ##35212
21380                 | _init_commands_ret
21380     2D 00 64 FD | 	ret
21384                 | 
21384                 | ' 
21384                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
21384                 | ' 
21384                 | ' sub init_audio
21384                 | _init_audio
21384     06 4A 05 F6 | 	mov	COUNT_, #6
21388     A8 00 A0 FD | 	call	#pushregs_
2138c     00 C0 1F FF 
21390     00 26 06 F6 | 	mov	local01, ##1065353216
21394                 | ' 
21394                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
21394     00 28 06 F6 | 	mov	local02, #0
21398                 | LR__2600
21398     14 2B 02 F6 | 	mov	local03, local02
2139c     01 2A 66 F0 | 	shl	local03, #1
213a0     58 7F 23 FF 
213a4     00 2C 06 F6 | 	mov	local04, ##1191096320
213a8     14 13 52 F6 | 	abs	arg01, local02 wc
213ac     1F 2E C6 C9 |  if_b	decod	local05, #31
213b0     00 2E 06 36 |  if_ae	mov	local05, #0
213b4     34 70 B0 FD | 	call	#__system___float_fromuns
213b8     17 FB 61 F5 | 	xor	result1, local05
213bc     FD 12 02 F6 | 	mov	arg01, result1
213c0     87 24 20 FF 
213c4     DB 15 06 F6 | 	mov	arg02, ##1078530011
213c8     24 74 B0 FD | 	call	#__system___float_mul
213cc     FD 12 02 F6 | 	mov	arg01, result1
213d0     00 00 22 FF 
213d4     00 14 06 F6 | 	mov	arg02, ##1140850688
213d8     18 76 B0 FD | 	call	#__system___float_div
213dc     FD 12 02 F6 | 	mov	arg01, result1
213e0     6C 7D B0 FD | 	call	#__system____builtin_sinf
213e4     FD 14 02 F6 | 	mov	arg02, result1
213e8     16 13 02 F6 | 	mov	arg01, local04
213ec     00 74 B0 FD | 	call	#__system___float_mul
213f0     FD 12 02 F6 | 	mov	arg01, result1
213f4     01 14 06 F6 | 	mov	arg02, #1
213f8     BC 78 B0 FD | 	call	#__system___float_tointeger
213fc     FD 14 02 F6 | 	mov	arg02, result1
21400     15 13 02 F6 | 	mov	arg01, local03
21404     6C 0D B0 FD | 	call	#_psdpoke
21408     01 28 06 F1 | 	add	local02, #1
2140c     02 00 00 FF 
21410     00 28 56 F2 | 	cmps	local02, ##1024 wc
21414     80 FF 9F CD |  if_b	jmp	#LR__2600
21418                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
21418     00 28 06 F6 | 	mov	local02, #0
2141c                 | LR__2601
2141c     14 15 02 F6 | 	mov	arg02, local02
21420     01 14 66 F0 | 	shl	arg02, #1
21424     0B 12 C6 F9 | 	decod	arg01, #11
21428     0A 13 02 F1 | 	add	arg01, arg02
2142c     14 2D 02 F6 | 	mov	local04, local02
21430     07 2C 66 F0 | 	shl	local04, #7
21434     14 2D 82 F1 | 	sub	local04, local02
21438     C0 FF 7F FF 
2143c     00 15 06 F6 | 	mov	arg02, ##-32512
21440     16 15 02 F1 | 	add	arg02, local04
21444     2C 0D B0 FD | 	call	#_psdpoke
21448     09 2C C6 F9 | 	decod	local04, #9
2144c     14 2D 02 F1 | 	add	local04, local02
21450     01 2C 66 F0 | 	shl	local04, #1
21454     0B 12 C6 F9 | 	decod	arg01, #11
21458     16 13 02 F1 | 	add	arg01, local04
2145c     14 2F 02 F6 | 	mov	local05, local02
21460     07 2E 66 F0 | 	shl	local05, #7
21464     14 2F 82 F1 | 	sub	local05, local02
21468     3F 00 00 FF 
2146c     00 15 06 F6 | 	mov	arg02, ##32512
21470     17 15 82 F1 | 	sub	arg02, local05
21474     FC 0C B0 FD | 	call	#_psdpoke
21478     01 28 06 F1 | 	add	local02, #1
2147c     01 00 00 FF 
21480     00 28 56 F2 | 	cmps	local02, ##512 wc
21484     94 FF 9F CD |  if_b	jmp	#LR__2601
21488                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
21488     00 28 06 F6 | 	mov	local02, #0
2148c                 | LR__2602
2148c     14 2F 02 F6 | 	mov	local05, local02
21490     01 2E 66 F0 | 	shl	local05, #1
21494     0C 12 C6 F9 | 	decod	arg01, #12
21498     17 13 02 F1 | 	add	arg01, local05
2149c     14 2F 02 F6 | 	mov	local05, local02
214a0     06 2E 66 F0 | 	shl	local05, #6
214a4     14 2F 82 F1 | 	sub	local05, local02
214a8     C1 FF 7F FF 
214ac     00 14 06 F6 | 	mov	arg02, ##-32256
214b0     17 15 02 F1 | 	add	arg02, local05
214b4     BC 0C B0 FD | 	call	#_psdpoke
214b8     01 28 06 F1 | 	add	local02, #1
214bc     02 00 00 FF 
214c0     00 28 56 F2 | 	cmps	local02, ##1024 wc
214c4     C4 FF 9F CD |  if_b	jmp	#LR__2602
214c8                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
214c8     00 28 06 F6 | 	mov	local02, #0
214cc                 | LR__2603
214cc     14 2F 02 F6 | 	mov	local05, local02
214d0     01 2E 66 F0 | 	shl	local05, #1
214d4     0C 00 00 FF 
214d8     00 12 06 F6 | 	mov	arg01, ##6144
214dc     17 13 02 F1 | 	add	arg01, local05
214e0     C0 FF 7F FF 
214e4     A8 14 06 F6 | 	mov	arg02, ##-32600
214e8     88 0C B0 FD | 	call	#_psdpoke
214ec     01 28 06 F1 | 	add	local02, #1
214f0     80 28 56 F2 | 	cmps	local02, #128 wc
214f4     D4 FF 9F CD |  if_b	jmp	#LR__2603
214f8     80 28 06 F6 | 	mov	local02, #128
214fc                 | LR__2604
214fc     14 2F 02 F6 | 	mov	local05, local02
21500     01 2E 66 F0 | 	shl	local05, #1
21504     0C 00 00 FF 
21508     00 12 06 F6 | 	mov	arg01, ##6144
2150c     17 13 02 F1 | 	add	arg01, local05
21510     3F 00 00 FF 
21514     58 15 06 F6 | 	mov	arg02, ##32600
21518     58 0C B0 FD | 	call	#_psdpoke
2151c     01 28 06 F1 | 	add	local02, #1
21520     02 00 00 FF 
21524     00 28 16 F2 | 	cmp	local02, ##1024 wc
21528     D0 FF 9F CD |  if_b	jmp	#LR__2604
2152c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
2152c     00 28 06 F6 | 	mov	local02, #0
21530                 | LR__2605
21530     14 2F 02 F6 | 	mov	local05, local02
21534     01 2E 66 F0 | 	shl	local05, #1
21538     0D 12 C6 F9 | 	decod	arg01, #13
2153c     17 13 02 F1 | 	add	arg01, local05
21540     C0 FF 7F FF 
21544     A8 14 06 F6 | 	mov	arg02, ##-32600
21548     28 0C B0 FD | 	call	#_psdpoke
2154c     01 28 06 F1 | 	add	local02, #1
21550     01 00 00 FF 
21554     00 28 56 F2 | 	cmps	local02, ##512 wc
21558     D4 FF 9F CD |  if_b	jmp	#LR__2605
2155c     09 28 C6 F9 | 	decod	local02, #9
21560                 | LR__2606
21560     14 2F 02 F6 | 	mov	local05, local02
21564     01 2E 66 F0 | 	shl	local05, #1
21568     0D 12 C6 F9 | 	decod	arg01, #13
2156c     17 13 02 F1 | 	add	arg01, local05
21570     3F 00 00 FF 
21574     58 15 06 F6 | 	mov	arg02, ##32600
21578     F8 0B B0 FD | 	call	#_psdpoke
2157c     01 28 06 F1 | 	add	local02, #1
21580     02 00 00 FF 
21584     00 28 16 F2 | 	cmp	local02, ##1024 wc
21588     D4 FF 9F CD |  if_b	jmp	#LR__2606
2158c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
2158c     00 28 06 F6 | 	mov	local02, #0
21590                 | LR__2607
21590     14 2F 02 F6 | 	mov	local05, local02
21594     01 2E 66 F0 | 	shl	local05, #1
21598     14 00 00 FF 
2159c     00 12 06 F6 | 	mov	arg01, ##10240
215a0     17 13 02 F1 | 	add	arg01, local05
215a4     C0 FF 7F FF 
215a8     A8 14 06 F6 | 	mov	arg02, ##-32600
215ac     C4 0B B0 FD | 	call	#_psdpoke
215b0     01 28 06 F1 | 	add	local02, #1
215b4     00 29 56 F2 | 	cmps	local02, #256 wc
215b8     D4 FF 9F CD |  if_b	jmp	#LR__2607
215bc     00 29 06 F6 | 	mov	local02, #256
215c0                 | LR__2608
215c0     14 2F 02 F6 | 	mov	local05, local02
215c4     01 2E 66 F0 | 	shl	local05, #1
215c8     14 00 00 FF 
215cc     00 12 06 F6 | 	mov	arg01, ##10240
215d0     17 13 02 F1 | 	add	arg01, local05
215d4     3F 00 00 FF 
215d8     58 15 06 F6 | 	mov	arg02, ##32600
215dc     94 0B B0 FD | 	call	#_psdpoke
215e0     01 28 06 F1 | 	add	local02, #1
215e4     02 00 00 FF 
215e8     00 28 16 F2 | 	cmp	local02, ##1024 wc
215ec     D0 FF 9F CD |  if_b	jmp	#LR__2608
215f0                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
215f0     18 00 00 FF 
215f4     00 28 06 F6 | 	mov	local02, ##12288
215f8                 | LR__2609
215f8     14 13 02 F6 | 	mov	arg01, local02
215fc     00 14 06 F6 | 	mov	arg02, #0
21600     28 0B B0 FD | 	call	#_pslpoke
21604     04 28 06 F1 | 	add	local02, #4
21608     77 00 00 FF 
2160c     FD 29 56 F2 | 	cmps	local02, ##61437 wc
21610     E4 FF 9F CD |  if_b	jmp	#LR__2609
21614                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
21614     00 28 06 F6 | 	mov	local02, #0
21618                 | LR__2610
21618     14 2F 02 F6 | 	mov	local05, local02
2161c     01 2E 66 F0 | 	shl	local05, #1
21620     78 00 00 FF 
21624     00 2A 06 F6 | 	mov	local03, ##61440
21628     17 2B 02 F1 | 	add	local03, local05
2162c     12 00 00 FF 
21630     BA EA 05 F1 | 	add	ptr__dat__, ##9402
21634     F5 12 02 F6 | 	mov	arg01, ptr__dat__
21638     12 00 00 FF 
2163c     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
21640     10 12 06 F1 | 	add	arg01, #16
21644     14 15 02 F6 | 	mov	arg02, local02
21648     01 14 66 F0 | 	shl	arg02, #1
2164c     0A 13 02 F1 | 	add	arg01, arg02
21650     09 15 E2 FA | 	rdword	arg02, arg01
21654     15 13 02 F6 | 	mov	arg01, local03
21658     18 0B B0 FD | 	call	#_psdpoke
2165c     01 28 06 F1 | 	add	local02, #1
21660     02 00 00 FF 
21664     00 28 56 F2 | 	cmps	local02, ##1024 wc
21668     AC FF 9F CD |  if_b	jmp	#LR__2610
2166c                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
2166c     00 28 06 F6 | 	mov	local02, #0
21670                 | LR__2611
21670     14 2F 02 F6 | 	mov	local05, local02
21674     01 2E 66 F0 | 	shl	local05, #1
21678     7C 00 00 FF 
2167c     00 2A 06 F6 | 	mov	local03, ##63488
21680     17 2B 02 F1 | 	add	local03, local05
21684     0E 00 00 FF 
21688     AA EA 05 F1 | 	add	ptr__dat__, ##7338
2168c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
21690     0E 00 00 FF 
21694     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
21698     10 12 06 F1 | 	add	arg01, #16
2169c     14 15 02 F6 | 	mov	arg02, local02
216a0     01 14 66 F0 | 	shl	arg02, #1
216a4     0A 13 02 F1 | 	add	arg01, arg02
216a8     09 15 E2 FA | 	rdword	arg02, arg01
216ac     15 13 02 F6 | 	mov	arg01, local03
216b0     C0 0A B0 FD | 	call	#_psdpoke
216b4     01 28 06 F1 | 	add	local02, #1
216b8     02 00 00 FF 
216bc     00 28 56 F2 | 	cmps	local02, ##1024 wc
216c0     AC FF 9F CD |  if_b	jmp	#LR__2611
216c4                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
216c4     00 28 06 F6 | 	mov	local02, #0
216c8     0C 00 00 FF 
216cc     D8 E4 05 F1 | 	add	objptr, ##6360
216d0     97 18 48 FB | 	callpa	#(@LR__2613-@LR__2612)>>2,fcache_load_ptr_
216d4                 | LR__2612
216d4     14 2F 02 F6 | 	mov	local05, local02
216d8     01 2E 66 F0 | 	shl	local05, #1
216dc     F2 2E 02 F1 | 	add	local05, objptr
216e0     14 2B 02 F6 | 	mov	local03, local02
216e4     08 2A 66 F0 | 	shl	local03, #8
216e8     7F 00 00 FF 
216ec     00 31 06 F6 | 	mov	local06, ##65280
216f0     15 31 82 F1 | 	sub	local06, local03
216f4     17 31 52 FC | 	wrword	local06, local05
216f8     01 28 06 F1 | 	add	local02, #1
216fc     00 29 56 F2 | 	cmps	local02, #256 wc
21700     D0 FF 9F CD |  if_b	jmp	#LR__2612
21704                 | LR__2613
21704     0C 00 00 FF 
21708     D8 E4 85 F1 | 	sub	objptr, ##6360
2170c                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
2170c     00 28 06 F6 | 	mov	local02, #0
21710                 | LR__2614
21710     14 2F 02 F6 | 	mov	local05, local02
21714     01 2E 66 F0 | 	shl	local05, #1
21718     0D 00 00 FF 
2171c     D8 E4 05 F1 | 	add	objptr, ##6872
21720     F2 2E 02 F1 | 	add	local05, objptr
21724     80 BF 23 FF 
21728     00 12 06 F6 | 	mov	arg01, ##1199505408
2172c     13 15 02 F6 | 	mov	arg02, local01
21730     0D 00 00 FF 
21734     D8 E4 85 F1 | 	sub	objptr, ##6872
21738     B4 70 B0 FD | 	call	#__system___float_mul
2173c     FD 12 02 F6 | 	mov	arg01, result1
21740     01 14 06 F6 | 	mov	arg02, #1
21744     70 75 B0 FD | 	call	#__system___float_tointeger
21748     17 FB 51 FC | 	wrword	result1, local05
2174c     13 13 02 F6 | 	mov	arg01, local01
21750     CC BC 1F FF 
21754     9A 15 06 F6 | 	mov	arg02, ##1064933786
21758     94 70 B0 FD | 	call	#__system___float_mul
2175c     FD 26 02 F6 | 	mov	local01, result1
21760     01 28 06 F1 | 	add	local02, #1
21764     00 29 56 F2 | 	cmps	local02, #256 wc
21768     A4 FF 9F CD |  if_b	jmp	#LR__2614
2176c     0E 00 00 FF 
21770     D6 E4 05 F1 | 	add	objptr, ##7382
21774     F2 00 58 FC | 	wrword	#0, objptr
21778                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
21778     00 28 06 F6 | 	mov	local02, #0
2177c     02 E4 05 F1 | 	add	objptr, #2
21780     97 10 48 FB | 	callpa	#(@LR__2616-@LR__2615)>>2,fcache_load_ptr_
21784                 | LR__2615
21784     14 2F 02 F6 | 	mov	local05, local02
21788     01 2E 66 F0 | 	shl	local05, #1
2178c     F2 2E 02 F1 | 	add	local05, objptr
21790     7F 00 80 FF 
21794     17 01 5A FC | 	wrword	##65280, local05
21798     01 28 06 F1 | 	add	local02, #1
2179c     FF 28 56 F2 | 	cmps	local02, #255 wc
217a0     E0 FF 9F CD |  if_b	jmp	#LR__2615
217a4                 | LR__2616
217a4     FE E5 05 F1 | 	add	objptr, #510
217a8     F2 00 58 FC | 	wrword	#0, objptr
217ac                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
217ac     00 28 06 F6 | 	mov	local02, #0
217b0     02 E4 05 F1 | 	add	objptr, #2
217b4     97 52 48 FB | 	callpa	#(@LR__2621-@LR__2617)>>2,fcache_load_ptr_
217b8                 | LR__2617
217b8     14 2F 02 F6 | 	mov	local05, local02
217bc     01 2E 66 F0 | 	shl	local05, #1
217c0     F2 2E 02 F1 | 	add	local05, objptr
217c4     14 31 02 F6 | 	mov	local06, local02
217c8     0C 30 66 F0 | 	shl	local06, #12
217cc     17 31 52 FC | 	wrword	local06, local05
217d0     01 28 06 F1 | 	add	local02, #1
217d4     10 28 56 F2 | 	cmps	local02, #16 wc
217d8     DC FF 9F CD |  if_b	jmp	#LR__2617
217dc                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
217dc     10 28 06 F6 | 	mov	local02, #16
217e0                 | LR__2618
217e0     14 2F 02 F6 | 	mov	local05, local02
217e4     01 2E 66 F0 | 	shl	local05, #1
217e8     F2 2E 02 F1 | 	add	local05, objptr
217ec     7F 00 80 FF 
217f0     17 01 5A FC | 	wrword	##65280, local05
217f4     01 28 06 F1 | 	add	local02, #1
217f8     F0 28 16 F2 | 	cmp	local02, #240 wc
217fc     E0 FF 9F CD |  if_b	jmp	#LR__2618
21800                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
21800     F0 28 06 F6 | 	mov	local02, #240
21804                 | LR__2619
21804     14 2F 02 F6 | 	mov	local05, local02
21808     01 2E 66 F0 | 	shl	local05, #1
2180c     F2 2E 02 F1 | 	add	local05, objptr
21810     FF 2A 06 F6 | 	mov	local03, #255
21814     14 2B 82 F1 | 	sub	local03, local02
21818     0C 2A 66 F0 | 	shl	local03, #12
2181c     17 2B 52 FC | 	wrword	local03, local05
21820     01 28 06 F1 | 	add	local02, #1
21824     00 29 16 F2 | 	cmp	local02, #256 wc
21828     D8 FF 9F CD |  if_b	jmp	#LR__2619
2182c                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
2182c     00 28 06 F6 | 	mov	local02, #0
21830     01 00 00 FF 
21834     00 E4 05 F1 | 	add	objptr, ##512
21838                 | LR__2620
21838     14 2F 02 F6 | 	mov	local05, local02
2183c     01 2E 66 F0 | 	shl	local05, #1
21840     F2 2E 02 F1 | 	add	local05, objptr
21844     14 31 02 F6 | 	mov	local06, local02
21848     08 30 66 F0 | 	shl	local06, #8
2184c     17 31 52 FC | 	wrword	local06, local05
21850     01 28 06 F1 | 	add	local02, #1
21854     00 29 56 F2 | 	cmps	local02, #256 wc
21858     DC FF 9F CD |  if_b	jmp	#LR__2620
2185c                 | LR__2621
2185c     FE E5 05 F1 | 	add	objptr, #510
21860     F2 00 58 FC | 	wrword	#0, objptr
21864                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
21864     00 28 06 F6 | 	mov	local02, #0
21868     02 E4 05 F1 | 	add	objptr, #2
2186c     97 6A 48 FB | 	callpa	#(@LR__2626-@LR__2622)>>2,fcache_load_ptr_
21870                 | LR__2622
21870     14 2F 02 F6 | 	mov	local05, local02
21874     01 2E 66 F0 | 	shl	local05, #1
21878     F2 2E 02 F1 | 	add	local05, objptr
2187c     14 31 02 F6 | 	mov	local06, local02
21880     04 30 66 F0 | 	shl	local06, #4
21884     14 31 02 F1 | 	add	local06, local02
21888     04 30 66 F0 | 	shl	local06, #4
2188c     17 31 52 FC | 	wrword	local06, local05
21890     01 28 06 F1 | 	add	local02, #1
21894     F0 28 56 F2 | 	cmps	local02, #240 wc
21898     D4 FF 9F CD |  if_b	jmp	#LR__2622
2189c     F0 28 06 F6 | 	mov	local02, #240
218a0                 | LR__2623
218a0     14 2F 02 F6 | 	mov	local05, local02
218a4     01 2E 66 F0 | 	shl	local05, #1
218a8     F2 2E 02 F1 | 	add	local05, objptr
218ac     FF 2A 06 F6 | 	mov	local03, #255
218b0     14 2B 82 F1 | 	sub	local03, local02
218b4     0C 2A 66 F0 | 	shl	local03, #12
218b8     17 2B 52 FC | 	wrword	local03, local05
218bc     01 28 06 F1 | 	add	local02, #1
218c0     00 29 16 F2 | 	cmp	local02, #256 wc
218c4     D8 FF 9F CD |  if_b	jmp	#LR__2623
218c8                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
218c8     00 28 06 F6 | 	mov	local02, #0
218cc     01 00 00 FF 
218d0     00 E4 05 F1 | 	add	objptr, ##512
218d4                 | LR__2624
218d4     14 2F 02 F6 | 	mov	local05, local02
218d8     01 2E 66 F0 | 	shl	local05, #1
218dc     F2 2E 02 F1 | 	add	local05, objptr
218e0     14 31 02 F6 | 	mov	local06, local02
218e4     09 30 66 F0 | 	shl	local06, #9
218e8     17 31 52 FC | 	wrword	local06, local05
218ec     FF 2E 06 F6 | 	mov	local05, #255
218f0     14 2F 82 F1 | 	sub	local05, local02
218f4     01 2E 66 F0 | 	shl	local05, #1
218f8     F2 2E 02 F1 | 	add	local05, objptr
218fc     14 31 02 F6 | 	mov	local06, local02
21900     09 30 66 F0 | 	shl	local06, #9
21904     17 31 52 FC | 	wrword	local06, local05
21908     01 28 06 F1 | 	add	local02, #1
2190c     80 28 56 F2 | 	cmps	local02, #128 wc
21910     C0 FF 9F CD |  if_b	jmp	#LR__2624
21914                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
21914     00 28 06 F6 | 	mov	local02, #0
21918     01 00 00 FF 
2191c     00 E4 05 F1 | 	add	objptr, ##512
21920                 | LR__2625
21920     14 2F 02 F6 | 	mov	local05, local02
21924     01 2E 66 F0 | 	shl	local05, #1
21928     F2 2E 02 F1 | 	add	local05, objptr
2192c     14 31 02 F6 | 	mov	local06, local02
21930     0D 30 66 F0 | 	shl	local06, #13
21934     17 31 52 FC | 	wrword	local06, local05
21938     01 28 06 F1 | 	add	local02, #1
2193c     08 28 56 F2 | 	cmps	local02, #8 wc
21940     DC FF 9F CD |  if_b	jmp	#LR__2625
21944                 | LR__2626
21944                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
21944     08 28 06 F6 | 	mov	local02, #8
21948     97 42 48 FB | 	callpa	#(@LR__2630-@LR__2627)>>2,fcache_load_ptr_
2194c                 | LR__2627
2194c     14 2F 02 F6 | 	mov	local05, local02
21950     01 2E 66 F0 | 	shl	local05, #1
21954     F2 2E 02 F1 | 	add	local05, objptr
21958     14 27 02 F6 | 	mov	local01, local02
2195c     08 26 86 F1 | 	sub	local01, #8
21960     0B 26 66 F0 | 	shl	local01, #11
21964     7F 00 00 FF 
21968     00 31 06 F6 | 	mov	local06, ##65280
2196c     13 31 82 F1 | 	sub	local06, local01
21970     17 31 52 FC | 	wrword	local06, local05
21974     01 28 06 F1 | 	add	local02, #1
21978     18 28 16 F2 | 	cmp	local02, #24 wc
2197c     CC FF 9F CD |  if_b	jmp	#LR__2627
21980                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
21980     18 28 06 F6 | 	mov	local02, #24
21984                 | LR__2628
21984     14 2F 02 F6 | 	mov	local05, local02
21988     01 2E 66 F0 | 	shl	local05, #1
2198c     F2 2E 02 F1 | 	add	local05, objptr
21990     40 00 80 FF 
21994     17 01 58 FC | 	wrword	##32768, local05
21998     01 28 06 F1 | 	add	local02, #1
2199c     81 28 16 F2 | 	cmp	local02, #129 wc
219a0     E0 FF 9F CD |  if_b	jmp	#LR__2628
219a4                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
219a4     81 28 06 F6 | 	mov	local02, #129
219a8                 | LR__2629
219a8     14 2F 02 F6 | 	mov	local05, local02
219ac     01 2E 66 F0 | 	shl	local05, #1
219b0     F2 2E 02 F1 | 	add	local05, objptr
219b4     FF 2A 06 F6 | 	mov	local03, #255
219b8     14 2B 82 F1 | 	sub	local03, local02
219bc     08 2A 66 F0 | 	shl	local03, #8
219c0     17 2B 52 FC | 	wrword	local03, local05
219c4     01 28 06 F1 | 	add	local02, #1
219c8     00 29 16 F2 | 	cmp	local02, #256 wc
219cc     D8 FF 9F CD |  if_b	jmp	#LR__2629
219d0                 | LR__2630
219d0     3E 00 00 FF 
219d4     96 E5 05 F1 | 	add	objptr, ##32150
219d8     F2 00 59 FC | 	wrword	#128, objptr
219dc     52 00 00 FF 
219e0     6E E4 85 F1 | 	sub	objptr, ##42094
219e4                 | ' for i=0 to 7
219e4     00 28 06 F6 | 	mov	local02, #0
219e8     97 8E 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
219ec                 | LR__2631
219ec     14 2F 02 F6 | 	mov	local05, local02
219f0     01 2E 66 F0 | 	shl	local05, #1
219f4     14 2F 02 F1 | 	add	local05, local02
219f8     03 2E 66 F0 | 	shl	local05, #3
219fc     14 00 00 FF 
21a00     38 E5 05 F1 | 	add	objptr, ##10552
21a04     F2 2E 02 F1 | 	add	local05, objptr
21a08     00 EE A1 FF 
21a0c     17 01 68 FC | 	wrlong	##1138491392, local05
21a10     14 2F 02 F6 | 	mov	local05, local02
21a14     01 2E 66 F0 | 	shl	local05, #1
21a18     14 2F 02 F1 | 	add	local05, local02
21a1c     03 2E 66 F0 | 	shl	local05, #3
21a20     F2 2E 02 F1 | 	add	local05, objptr
21a24     04 2E 06 F1 | 	add	local05, #4
21a28     17 29 42 FC | 	wrbyte	local02, local05
21a2c     14 2F 02 F6 | 	mov	local05, local02
21a30     01 2E 66 F0 | 	shl	local05, #1
21a34     14 2F 02 F1 | 	add	local05, local02
21a38     03 2E 66 F0 | 	shl	local05, #3
21a3c     F2 2E 02 F1 | 	add	local05, objptr
21a40     05 2E 06 F1 | 	add	local05, #5
21a44     17 29 42 FC | 	wrbyte	local02, local05
21a48     14 2F 02 F6 | 	mov	local05, local02
21a4c     01 2E 66 F0 | 	shl	local05, #1
21a50     14 2F 02 F1 | 	add	local05, local02
21a54     03 2E 66 F0 | 	shl	local05, #3
21a58     F2 2E 02 F1 | 	add	local05, objptr
21a5c     06 2E 06 F1 | 	add	local05, #6
21a60     17 01 58 FC | 	wrword	#0, local05
21a64     14 2F 02 F6 | 	mov	local05, local02
21a68     01 2E 66 F0 | 	shl	local05, #1
21a6c     14 2F 02 F1 | 	add	local05, local02
21a70     03 2E 66 F0 | 	shl	local05, #3
21a74     F2 2E 02 F1 | 	add	local05, objptr
21a78     08 2E 06 F1 | 	add	local05, #8
21a7c     00 C0 9F FF 
21a80     17 01 68 FC | 	wrlong	##1065353216, local05
21a84     14 2F 02 F6 | 	mov	local05, local02
21a88     01 2E 66 F0 | 	shl	local05, #1
21a8c     14 2F 02 F1 | 	add	local05, local02
21a90     03 2E 66 F0 | 	shl	local05, #3
21a94     F2 2E 02 F1 | 	add	local05, objptr
21a98     0C 2E 06 F1 | 	add	local05, #12
21a9c     00 40 A0 FF 
21aa0     17 01 68 FC | 	wrlong	##1082130432, local05
21aa4     14 2F 02 F6 | 	mov	local05, local02
21aa8     01 2E 66 F0 | 	shl	local05, #1
21aac     14 2F 02 F1 | 	add	local05, local02
21ab0     03 2E 66 F0 | 	shl	local05, #3
21ab4     F2 2E 02 F1 | 	add	local05, objptr
21ab8     10 2E 06 F1 | 	add	local05, #16
21abc     17 01 68 FC | 	wrlong	#0, local05
21ac0     14 2F 02 F6 | 	mov	local05, local02
21ac4     01 2E 66 F0 | 	shl	local05, #1
21ac8     14 2F 02 F1 | 	add	local05, local02
21acc     03 2E 66 F0 | 	shl	local05, #3
21ad0     F2 2E 02 F1 | 	add	local05, objptr
21ad4     14 2E 06 F1 | 	add	local05, #20
21ad8     17 FF 59 FC | 	wrword	#255, local05
21adc     14 2F 02 F6 | 	mov	local05, local02
21ae0     01 2E 66 F0 | 	shl	local05, #1
21ae4     3D 00 00 FF 
21ae8     28 E5 05 F1 | 	add	objptr, ##31528
21aec     F2 2E 02 F1 | 	add	local05, objptr
21af0     17 FF 59 FC | 	wrword	#255, local05
21af4     01 28 06 F1 | 	add	local02, #1
21af8     08 28 56 F2 | 	cmps	local02, #8 wc
21afc     52 00 00 FF 
21b00     60 E4 85 F1 | 	sub	objptr, ##42080
21b04     E4 FE 9F CD |  if_b	jmp	#LR__2631
21b08                 | LR__2632
21b08     00 6E 20 FF 
21b0c     00 30 06 F6 | 	mov	local06, ##1088159744
21b10                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
21b10     03 2E 06 F6 | 	mov	local05, #3
21b14                 | LR__2633
21b14     18 13 02 F6 | 	mov	arg01, local06
21b18     CE C3 1F FF 
21b1c     7D 14 06 F6 | 	mov	arg02, ##1065852029
21b20     CC 6C B0 FD | 	call	#__system___float_mul
21b24     FD 30 02 F6 | 	mov	local06, result1
21b28     FA 2F 6E FB | 	djnz	local05, #LR__2633
21b2c     00 28 06 F6 | 	mov	local02, #0
21b30                 | LR__2634
21b30     14 2D 02 F6 | 	mov	local04, local02
21b34     02 2C 66 F0 | 	shl	local04, #2
21b38     14 00 00 FF 
21b3c     D8 E4 05 F1 | 	add	objptr, ##10456
21b40     F2 2C 02 F1 | 	add	local04, objptr
21b44     16 31 62 FC | 	wrlong	local06, local04
21b48     18 13 02 F6 | 	mov	arg01, local06
21b4c     CE C3 1F FF 
21b50     7D 14 06 F6 | 	mov	arg02, ##1065852029
21b54     14 00 00 FF 
21b58     D8 E4 85 F1 | 	sub	objptr, ##10456
21b5c     90 6C B0 FD | 	call	#__system___float_mul
21b60     FD 30 02 F6 | 	mov	local06, result1
21b64     01 28 06 F1 | 	add	local02, #1
21b68     0C 28 56 F2 | 	cmps	local02, #12 wc
21b6c     C0 FF 9F CD |  if_b	jmp	#LR__2634
21b70     14 00 00 FF 
21b74     08 E5 05 F1 | 	add	objptr, ##10504
21b78     F2 50 6B FC | 	wrlong	#424, objptr
21b7c     04 E4 05 F1 | 	add	objptr, #4
21b80     F2 20 6B FC | 	wrlong	#400, objptr
21b84     04 E4 05 F1 | 	add	objptr, #4
21b88     F2 F2 6A FC | 	wrlong	#377, objptr
21b8c     04 E4 05 F1 | 	add	objptr, #4
21b90     F2 C8 6A FC | 	wrlong	#356, objptr
21b94     04 E4 05 F1 | 	add	objptr, #4
21b98     F2 A0 6A FC | 	wrlong	#336, objptr
21b9c     04 E4 05 F1 | 	add	objptr, #4
21ba0     F2 7A 6A FC | 	wrlong	#317, objptr
21ba4     04 E4 05 F1 | 	add	objptr, #4
21ba8     F2 58 6A FC | 	wrlong	#300, objptr
21bac     04 E4 05 F1 | 	add	objptr, #4
21bb0     F2 36 6A FC | 	wrlong	#283, objptr
21bb4     04 E4 05 F1 | 	add	objptr, #4
21bb8     F2 16 6A FC | 	wrlong	#267, objptr
21bbc     04 E4 05 F1 | 	add	objptr, #4
21bc0     F2 F8 69 FC | 	wrlong	#252, objptr
21bc4     04 E4 05 F1 | 	add	objptr, #4
21bc8     F2 DC 69 FC | 	wrlong	#238, objptr
21bcc     04 E4 05 F1 | 	add	objptr, #4
21bd0     F2 C0 69 FC | 	wrlong	#224, objptr
21bd4     3D 00 00 FF 
21bd8     3A E5 05 F1 | 	add	objptr, ##31546
21bdc     F2 00 59 FC | 	wrword	#128, objptr
21be0     02 E4 85 F1 | 	sub	objptr, #2
21be4     F2 00 59 FC | 	wrword	#128, objptr
21be8     52 00 00 FF 
21bec     6C E4 85 F1 | 	sub	objptr, ##42092
21bf0     A7 F0 03 F6 | 	mov	ptra, fp
21bf4     B2 00 A0 FD | 	call	#popregs_
21bf8                 | _init_audio_ret
21bf8     2D 00 64 FD | 	ret
21bfc                 | 
21bfc                 | ' 
21bfc                 | ' '------------------- Error messages
21bfc                 | ' 
21bfc                 | ' sub init_error_strings
21bfc                 | _init_error_strings
21bfc     AF 01 00 FF 
21c00     B4 01 06 F6 | 	mov	_var01, ##@LR__5945
21c04     45 00 00 FF 
21c08     7C E4 05 F1 | 	add	objptr, ##35452
21c0c     F2 00 62 FC | 	wrlong	_var01, objptr
21c10     AF 01 00 FF 
21c14     B5 01 06 F6 | 	mov	_var01, ##@LR__5946
21c18     04 E4 05 F1 | 	add	objptr, #4
21c1c     F2 00 62 FC | 	wrlong	_var01, objptr
21c20     AF 01 00 FF 
21c24     D9 01 06 F6 | 	mov	_var01, ##@LR__5947
21c28     04 E4 05 F1 | 	add	objptr, #4
21c2c     F2 00 62 FC | 	wrlong	_var01, objptr
21c30     AF 01 00 FF 
21c34     F9 01 06 F6 | 	mov	_var01, ##@LR__5948
21c38     04 E4 05 F1 | 	add	objptr, #4
21c3c     F2 00 62 FC | 	wrlong	_var01, objptr
21c40     B0 01 00 FF 
21c44     12 00 06 F6 | 	mov	_var01, ##@LR__5949
21c48     04 E4 05 F1 | 	add	objptr, #4
21c4c     F2 00 62 FC | 	wrlong	_var01, objptr
21c50     B0 01 00 FF 
21c54     2D 00 06 F6 | 	mov	_var01, ##@LR__5950
21c58     04 E4 05 F1 | 	add	objptr, #4
21c5c     F2 00 62 FC | 	wrlong	_var01, objptr
21c60     B0 01 00 FF 
21c64     4E 00 06 F6 | 	mov	_var01, ##@LR__5951
21c68     04 E4 05 F1 | 	add	objptr, #4
21c6c     F2 00 62 FC | 	wrlong	_var01, objptr
21c70     B0 01 00 FF 
21c74     7B 00 06 F6 | 	mov	_var01, ##@LR__5952
21c78     04 E4 05 F1 | 	add	objptr, #4
21c7c     F2 00 62 FC | 	wrlong	_var01, objptr
21c80     B0 01 00 FF 
21c84     A5 00 06 F6 | 	mov	_var01, ##@LR__5953
21c88     04 E4 05 F1 | 	add	objptr, #4
21c8c     F2 00 62 FC | 	wrlong	_var01, objptr
21c90     B0 01 00 FF 
21c94     BD 00 06 F6 | 	mov	_var01, ##@LR__5954
21c98     04 E4 05 F1 | 	add	objptr, #4
21c9c     F2 00 62 FC | 	wrlong	_var01, objptr
21ca0     B0 01 00 FF 
21ca4     DD 00 06 F6 | 	mov	_var01, ##@LR__5955
21ca8     04 E4 05 F1 | 	add	objptr, #4
21cac     F2 00 62 FC | 	wrlong	_var01, objptr
21cb0     B0 01 00 FF 
21cb4     F3 00 06 F6 | 	mov	_var01, ##@LR__5956
21cb8     04 E4 05 F1 | 	add	objptr, #4
21cbc     F2 00 62 FC | 	wrlong	_var01, objptr
21cc0     B0 01 00 FF 
21cc4     10 01 06 F6 | 	mov	_var01, ##@LR__5957
21cc8     04 E4 05 F1 | 	add	objptr, #4
21ccc     F2 00 62 FC | 	wrlong	_var01, objptr
21cd0     B0 01 00 FF 
21cd4     33 01 06 F6 | 	mov	_var01, ##@LR__5958
21cd8     04 E4 05 F1 | 	add	objptr, #4
21cdc     F2 00 62 FC | 	wrlong	_var01, objptr
21ce0     B0 01 00 FF 
21ce4     59 01 06 F6 | 	mov	_var01, ##@LR__5959
21ce8     04 E4 05 F1 | 	add	objptr, #4
21cec     F2 00 62 FC | 	wrlong	_var01, objptr
21cf0     B0 01 00 FF 
21cf4     74 01 06 F6 | 	mov	_var01, ##@LR__5960
21cf8     04 E4 05 F1 | 	add	objptr, #4
21cfc     F2 00 62 FC | 	wrlong	_var01, objptr
21d00     B0 01 00 FF 
21d04     84 01 06 F6 | 	mov	_var01, ##@LR__5961
21d08     04 E4 05 F1 | 	add	objptr, #4
21d0c     F2 00 62 FC | 	wrlong	_var01, objptr
21d10     B0 01 00 FF 
21d14     93 01 06 F6 | 	mov	_var01, ##@LR__5962
21d18     04 E4 05 F1 | 	add	objptr, #4
21d1c     F2 00 62 FC | 	wrlong	_var01, objptr
21d20     B0 01 00 FF 
21d24     AD 01 06 F6 | 	mov	_var01, ##@LR__5963
21d28     04 E4 05 F1 | 	add	objptr, #4
21d2c     F2 00 62 FC | 	wrlong	_var01, objptr
21d30     B0 01 00 FF 
21d34     BE 01 06 F6 | 	mov	_var01, ##@LR__5964
21d38     04 E4 05 F1 | 	add	objptr, #4
21d3c     F2 00 62 FC | 	wrlong	_var01, objptr
21d40     B0 01 00 FF 
21d44     D5 01 06 F6 | 	mov	_var01, ##@LR__5965
21d48     04 E4 05 F1 | 	add	objptr, #4
21d4c     F2 00 62 FC | 	wrlong	_var01, objptr
21d50     B0 01 00 FF 
21d54     E8 01 06 F6 | 	mov	_var01, ##@LR__5966
21d58     04 E4 05 F1 | 	add	objptr, #4
21d5c     F2 00 62 FC | 	wrlong	_var01, objptr
21d60     B0 01 00 FF 
21d64     F7 01 06 F6 | 	mov	_var01, ##@LR__5967
21d68     04 E4 05 F1 | 	add	objptr, #4
21d6c     F2 00 62 FC | 	wrlong	_var01, objptr
21d70     B1 01 00 FF 
21d74     13 00 06 F6 | 	mov	_var01, ##@LR__5968
21d78     04 E4 05 F1 | 	add	objptr, #4
21d7c     F2 00 62 FC | 	wrlong	_var01, objptr
21d80     B1 01 00 FF 
21d84     23 00 06 F6 | 	mov	_var01, ##@LR__5969
21d88     04 E4 05 F1 | 	add	objptr, #4
21d8c     F2 00 62 FC | 	wrlong	_var01, objptr
21d90     B1 01 00 FF 
21d94     33 00 06 F6 | 	mov	_var01, ##@LR__5970
21d98     04 E4 05 F1 | 	add	objptr, #4
21d9c     F2 00 62 FC | 	wrlong	_var01, objptr
21da0     B1 01 00 FF 
21da4     66 00 06 F6 | 	mov	_var01, ##@LR__5971
21da8     04 E4 05 F1 | 	add	objptr, #4
21dac     F2 00 62 FC | 	wrlong	_var01, objptr
21db0     B1 01 00 FF 
21db4     81 00 06 F6 | 	mov	_var01, ##@LR__5972
21db8     04 E4 05 F1 | 	add	objptr, #4
21dbc     F2 00 62 FC | 	wrlong	_var01, objptr
21dc0     B1 01 00 FF 
21dc4     96 00 06 F6 | 	mov	_var01, ##@LR__5973
21dc8     04 E4 05 F1 | 	add	objptr, #4
21dcc     F2 00 62 FC | 	wrlong	_var01, objptr
21dd0     B1 01 00 FF 
21dd4     A2 00 06 F6 | 	mov	_var01, ##@LR__5974
21dd8     04 E4 05 F1 | 	add	objptr, #4
21ddc     F2 00 62 FC | 	wrlong	_var01, objptr
21de0     B1 01 00 FF 
21de4     B3 00 06 F6 | 	mov	_var01, ##@LR__5975
21de8     04 E4 05 F1 | 	add	objptr, #4
21dec     F2 00 62 FC | 	wrlong	_var01, objptr
21df0     B1 01 00 FF 
21df4     C3 00 06 F6 | 	mov	_var01, ##@LR__5976
21df8     04 E4 05 F1 | 	add	objptr, #4
21dfc     F2 00 62 FC | 	wrlong	_var01, objptr
21e00     B1 01 00 FF 
21e04     DE 00 06 F6 | 	mov	_var01, ##@LR__5977
21e08     04 E4 05 F1 | 	add	objptr, #4
21e0c     F2 00 62 FC | 	wrlong	_var01, objptr
21e10     B1 01 00 FF 
21e14     EE 00 06 F6 | 	mov	_var01, ##@LR__5978
21e18     04 E4 05 F1 | 	add	objptr, #4
21e1c     F2 00 62 FC | 	wrlong	_var01, objptr
21e20     B1 01 00 FF 
21e24     FC 00 06 F6 | 	mov	_var01, ##@LR__5979
21e28     04 E4 05 F1 | 	add	objptr, #4
21e2c     F2 00 62 FC | 	wrlong	_var01, objptr
21e30     B1 01 00 FF 
21e34     16 01 06 F6 | 	mov	_var01, ##@LR__5980
21e38     04 E4 05 F1 | 	add	objptr, #4
21e3c     F2 00 62 FC | 	wrlong	_var01, objptr
21e40     B1 01 00 FF 
21e44     49 01 06 F6 | 	mov	_var01, ##@LR__5981
21e48     04 E4 05 F1 | 	add	objptr, #4
21e4c     F2 00 62 FC | 	wrlong	_var01, objptr
21e50     B1 01 00 FF 
21e54     61 01 06 F6 | 	mov	_var01, ##@LR__5982
21e58     04 E4 05 F1 | 	add	objptr, #4
21e5c     F2 00 62 FC | 	wrlong	_var01, objptr
21e60     B1 01 00 FF 
21e64     7C 01 06 F6 | 	mov	_var01, ##@LR__5983
21e68     04 E4 05 F1 | 	add	objptr, #4
21e6c     F2 00 62 FC | 	wrlong	_var01, objptr
21e70     B1 01 00 FF 
21e74     99 01 06 F6 | 	mov	_var01, ##@LR__5984
21e78     04 E4 05 F1 | 	add	objptr, #4
21e7c     F2 00 62 FC | 	wrlong	_var01, objptr
21e80     B1 01 00 FF 
21e84     B2 01 06 F6 | 	mov	_var01, ##@LR__5985
21e88     04 E4 05 F1 | 	add	objptr, #4
21e8c     F2 00 62 FC | 	wrlong	_var01, objptr
21e90     B1 01 00 FF 
21e94     D1 01 06 F6 | 	mov	_var01, ##@LR__5986
21e98     04 E4 05 F1 | 	add	objptr, #4
21e9c     F2 00 62 FC | 	wrlong	_var01, objptr
21ea0     B1 01 00 FF 
21ea4     DF 01 06 F6 | 	mov	_var01, ##@LR__5987
21ea8     04 E4 05 F1 | 	add	objptr, #4
21eac     F2 00 62 FC | 	wrlong	_var01, objptr
21eb0     B2 01 00 FF 
21eb4     0C 00 06 F6 | 	mov	_var01, ##@LR__5988
21eb8     04 E4 05 F1 | 	add	objptr, #4
21ebc     F2 00 62 FC | 	wrlong	_var01, objptr
21ec0     B2 01 00 FF 
21ec4     19 00 06 F6 | 	mov	_var01, ##@LR__5989
21ec8     04 E4 05 F1 | 	add	objptr, #4
21ecc     F2 00 62 FC | 	wrlong	_var01, objptr
21ed0     B2 01 00 FF 
21ed4     2D 00 06 F6 | 	mov	_var01, ##@LR__5990
21ed8     04 E4 05 F1 | 	add	objptr, #4
21edc     F2 00 62 FC | 	wrlong	_var01, objptr
21ee0     B2 01 00 FF 
21ee4     51 00 06 F6 | 	mov	_var01, ##@LR__5991
21ee8     04 E4 05 F1 | 	add	objptr, #4
21eec     F2 00 62 FC | 	wrlong	_var01, objptr
21ef0     B2 01 00 FF 
21ef4     68 00 06 F6 | 	mov	_var01, ##@LR__5992
21ef8     04 E4 05 F1 | 	add	objptr, #4
21efc     F2 00 62 FC | 	wrlong	_var01, objptr
21f00     B2 01 00 FF 
21f04     7B 00 06 F6 | 	mov	_var01, ##@LR__5993
21f08     04 E4 05 F1 | 	add	objptr, #4
21f0c     F2 00 62 FC | 	wrlong	_var01, objptr
21f10     B2 01 00 FF 
21f14     92 00 06 F6 | 	mov	_var01, ##@LR__5994
21f18     04 E4 05 F1 | 	add	objptr, #4
21f1c     F2 00 62 FC | 	wrlong	_var01, objptr
21f20     B2 01 00 FF 
21f24     AB 00 06 F6 | 	mov	_var01, ##@LR__5995
21f28     04 E4 05 F1 | 	add	objptr, #4
21f2c     F2 00 62 FC | 	wrlong	_var01, objptr
21f30     B2 01 00 FF 
21f34     CD 00 06 F6 | 	mov	_var01, ##@LR__5996
21f38     04 E4 05 F1 | 	add	objptr, #4
21f3c     F2 00 62 FC | 	wrlong	_var01, objptr
21f40     B2 01 00 FF 
21f44     E0 00 06 F6 | 	mov	_var01, ##@LR__5997
21f48     04 E4 05 F1 | 	add	objptr, #4
21f4c     F2 00 62 FC | 	wrlong	_var01, objptr
21f50     B2 01 00 FF 
21f54     F0 00 06 F6 | 	mov	_var01, ##@LR__5998
21f58     04 E4 05 F1 | 	add	objptr, #4
21f5c     F2 00 62 FC | 	wrlong	_var01, objptr
21f60     B2 01 00 FF 
21f64     08 01 06 F6 | 	mov	_var01, ##@LR__5999
21f68     04 E4 05 F1 | 	add	objptr, #4
21f6c     F2 00 62 FC | 	wrlong	_var01, objptr
21f70     B2 01 00 FF 
21f74     1F 01 06 F6 | 	mov	_var01, ##@LR__6000
21f78     04 E4 05 F1 | 	add	objptr, #4
21f7c     F2 00 62 FC | 	wrlong	_var01, objptr
21f80     45 00 00 FF 
21f84     58 E5 85 F1 | 	sub	objptr, ##35672
21f88                 | _init_error_strings_ret
21f88     2D 00 64 FD | 	ret
21f8c                 | 
21f8c                 | '         
21f8c                 | ' sub printerror(err as integer, linenum=0 as integer)
21f8c                 | _printerror
21f8c     02 4A 05 F6 | 	mov	COUNT_, #2
21f90     A8 00 A0 FD | 	call	#pushregs_
21f94     09 27 02 F6 | 	mov	local01, arg01
21f98     0A 29 02 F6 | 	mov	local02, arg02
21f9c     B2 01 00 FF 
21fa0     2C 13 06 F6 | 	mov	arg01, ##@LR__6001
21fa4     0C 21 B0 FD | 	call	#_hg010b_spin2_write
21fa8     13 13 02 F6 | 	mov	arg01, local01
21fac     A8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
21fb0     FD 12 02 F6 | 	mov	arg01, result1
21fb4     FC 20 B0 FD | 	call	#_hg010b_spin2_write
21fb8     B2 01 00 FF 
21fbc     33 13 06 F6 | 	mov	arg01, ##@LR__6002
21fc0     F0 20 B0 FD | 	call	#_hg010b_spin2_write
21fc4     02 26 66 F0 | 	shl	local01, #2
21fc8     45 00 00 FF 
21fcc     7C E4 05 F1 | 	add	objptr, ##35452
21fd0     F2 26 02 F1 | 	add	local01, objptr
21fd4     13 13 02 FB | 	rdlong	arg01, local01
21fd8     45 00 00 FF 
21fdc     7C E4 85 F1 | 	sub	objptr, ##35452
21fe0     D0 20 B0 FD | 	call	#_hg010b_spin2_write
21fe4                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
21fe4                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
21fe4     01 28 56 F2 | 	cmps	local02, #1 wc
21fe8     24 00 90 CD |  if_b	jmp	#LR__2640
21fec     B2 01 00 FF 
21ff0     37 13 06 F6 | 	mov	arg01, ##@LR__6003
21ff4     BC 20 B0 FD | 	call	#_hg010b_spin2_write
21ff8     14 13 02 F6 | 	mov	arg01, local02
21ffc     58 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22000     FD 12 02 F6 | 	mov	arg01, result1
22004                 | ' 
22004                 | ' write(text)
22004     AC 20 B0 FD | 	call	#_hg010b_spin2_write
22008                 | ' crlf
22008     A8 25 B0 FD | 	call	#_hg010b_spin2_crlf
2200c     10 00 90 FD | 	jmp	#LR__2641
22010                 | LR__2640
22010     B2 01 00 FF 
22014     41 13 06 F6 | 	mov	arg01, ##@LR__6004
22018                 | ' 
22018                 | ' write(text)
22018     98 20 B0 FD | 	call	#_hg010b_spin2_write
2201c                 | ' crlf
2201c     94 25 B0 FD | 	call	#_hg010b_spin2_crlf
22020                 | LR__2641
22020     A7 F0 03 F6 | 	mov	ptra, fp
22024     B2 00 A0 FD | 	call	#popregs_
22028                 | _printerror_ret
22028     2D 00 64 FD | 	ret
2202c                 | 
2202c                 | ' 
2202c                 | ' '' ------------------------------- Hardware start/stop/initialization 
2202c                 | ' 
2202c                 | ' sub startpsram
2202c                 | _startpsram
2202c     00 12 06 F6 | 	mov	arg01, #0
22030     0A 14 C6 F9 | 	decod	arg02, #10
22034     0B 16 06 F6 | 	mov	arg03, #11
22038     07 18 06 F6 | 	mov	arg04, #7
2203c     0B 00 00 FF 
22040     CC E4 05 F1 | 	add	objptr, ##5836
22044     7C 2A B0 FD | 	call	#_psram_spin2_startx
22048     2B 00 00 FF 
2204c     3C E5 05 F1 | 	add	objptr, ##22332
22050     F2 FA 61 FC | 	wrlong	result1, objptr
22054                 | '     return $7FF00 + cog*12
22054     0C E4 05 F1 | 	add	objptr, #12
22058     FF 03 80 FF 
2205c     F2 00 6A FC | 	wrlong	##524032, objptr
22060     37 00 00 FF 
22064     14 E4 85 F1 | 	sub	objptr, ##28180
22068                 | _startpsram_ret
22068     2D 00 64 FD | 	ret
2206c                 | 
2206c                 | ' 
2206c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
2206c                 | _startvideo
2206c     01 4A 05 F6 | 	mov	COUNT_, #1
22070     A8 00 A0 FD | 	call	#pushregs_
22074     37 00 00 FF 
22078     14 E4 05 F1 | 	add	objptr, ##28180
2207c     F2 18 02 FB | 	rdlong	arg04, objptr
22080     37 00 00 FF 
22084     14 E4 85 F1 | 	sub	objptr, ##28180
22088     0A 13 02 F6 | 	mov	arg01, arg02
2208c     0C 15 02 F6 | 	mov	arg02, arg04
22090     18 08 B0 FD | 	call	#_hg010b_spin2_start
22094     37 00 00 FF 
22098     00 E4 05 F1 | 	add	objptr, ##28160
2209c     F2 FA 61 FC | 	wrlong	result1, objptr
220a0                 | ' 
220a0                 | ' videocog=v.start(pin,mbox)
220a0                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
220a0     00 26 06 F6 | 	mov	local01, #0
220a4     2B 00 00 FF 
220a8     34 E5 85 F1 | 	sub	objptr, ##22324
220ac                 | LR__2650
220ac     13 13 02 F6 | 	mov	arg01, local01
220b0     00 28 00 FF 
220b4     00 14 06 F6 | 	mov	arg02, ##5242880
220b8     60 2E B0 FD | 	call	#_psram_spin2_setQos
220bc     01 26 06 F1 | 	add	local01, #1
220c0     08 26 56 F2 | 	cmps	local01, #8 wc
220c4     E4 FF 9F CD |  if_b	jmp	#LR__2650
220c8     2B 00 00 FF 
220cc     34 E5 05 F1 | 	add	objptr, ##22324
220d0     F2 12 02 FB | 	rdlong	arg01, objptr
220d4     7A 00 02 FF 
220d8     00 14 06 F6 | 	mov	arg02, ##67171328
220dc     2B 00 00 FF 
220e0     34 E5 85 F1 | 	sub	objptr, ##22324
220e4     34 2E B0 FD | 	call	#_psram_spin2_setQos
220e8     0B 00 00 FF 
220ec     CC E4 85 F1 | 	sub	objptr, ##5836
220f0                 | ' psram.setQoS(videocog, $0400f400) 
220f0                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
220f0     F2 14 02 F6 | 	mov	arg02, objptr
220f4     00 E0 04 FF 
220f8     00 14 46 F5 | 	or	arg02, ##163577856
220fc     00 16 06 F6 | 	mov	arg03, #0
22100     00 18 06 F6 | 	mov	arg04, #0
22104     00 12 06 F6 | 	mov	arg01, #0
22108     14 43 B0 FD | 	call	#__system___basic_open
2210c                 | ' return videocog
2210c     37 00 00 FF 
22110     00 E4 05 F1 | 	add	objptr, ##28160
22114     F2 FA 01 FB | 	rdlong	result1, objptr
22118     37 00 00 FF 
2211c     00 E4 85 F1 | 	sub	objptr, ##28160
22120     A7 F0 03 F6 | 	mov	ptra, fp
22124     B2 00 A0 FD | 	call	#popregs_
22128                 | _startvideo_ret
22128     2D 00 64 FD | 	ret
2212c                 | 
2212c                 | ' 
2212c                 | ' 
2212c                 | ' 
2212c                 | ' '' ------------------------------- Convenient psram peek/poke
2212c                 | ' 
2212c                 | ' sub pslpoke(addr as ulong,value as ulong)
2212c                 | _pslpoke
2212c     00 4A 05 F6 | 	mov	COUNT_, #0
22130     A8 00 A0 FD | 	call	#pushregs_
22134     08 F0 07 F1 | 	add	ptra, #8
22138     A7 12 62 FC | 	wrlong	arg01, fp
2213c     04 4E 05 F1 | 	add	fp, #4
22140     A7 14 62 FC | 	wrlong	arg02, fp
22144     A7 12 02 F6 | 	mov	arg01, fp
22148     04 4E 85 F1 | 	sub	fp, #4
2214c     A7 14 02 FB | 	rdlong	arg02, fp
22150     04 16 06 F6 | 	mov	arg03, #4
22154     0B 00 00 FF 
22158     CC E4 05 F1 | 	add	objptr, ##5836
2215c     2C 2C B0 FD | 	call	#_psram_spin2_write
22160     0B 00 00 FF 
22164     CC E4 85 F1 | 	sub	objptr, ##5836
22168     A7 F0 03 F6 | 	mov	ptra, fp
2216c     B2 00 A0 FD | 	call	#popregs_
22170                 | _pslpoke_ret
22170     2D 00 64 FD | 	ret
22174                 | 
22174                 | ' 
22174                 | ' sub psdpoke(addr as ulong,value as ulong)
22174                 | _psdpoke
22174     00 4A 05 F6 | 	mov	COUNT_, #0
22178     A8 00 A0 FD | 	call	#pushregs_
2217c     08 F0 07 F1 | 	add	ptra, #8
22180     A7 12 62 FC | 	wrlong	arg01, fp
22184     04 4E 05 F1 | 	add	fp, #4
22188     A7 14 62 FC | 	wrlong	arg02, fp
2218c     A7 12 02 F6 | 	mov	arg01, fp
22190     04 4E 85 F1 | 	sub	fp, #4
22194     A7 14 02 FB | 	rdlong	arg02, fp
22198     02 16 06 F6 | 	mov	arg03, #2
2219c     0B 00 00 FF 
221a0     CC E4 05 F1 | 	add	objptr, ##5836
221a4     E4 2B B0 FD | 	call	#_psram_spin2_write
221a8     0B 00 00 FF 
221ac     CC E4 85 F1 | 	sub	objptr, ##5836
221b0     A7 F0 03 F6 | 	mov	ptra, fp
221b4     B2 00 A0 FD | 	call	#popregs_
221b8                 | _psdpoke_ret
221b8     2D 00 64 FD | 	ret
221bc                 | 
221bc                 | ' 
221bc                 | ' sub pspoke(addr as ulong,value as ulong)
221bc                 | _pspoke
221bc     00 4A 05 F6 | 	mov	COUNT_, #0
221c0     A8 00 A0 FD | 	call	#pushregs_
221c4     08 F0 07 F1 | 	add	ptra, #8
221c8     A7 12 62 FC | 	wrlong	arg01, fp
221cc     04 4E 05 F1 | 	add	fp, #4
221d0     A7 14 62 FC | 	wrlong	arg02, fp
221d4     A7 12 02 F6 | 	mov	arg01, fp
221d8     04 4E 85 F1 | 	sub	fp, #4
221dc     A7 14 02 FB | 	rdlong	arg02, fp
221e0     01 16 06 F6 | 	mov	arg03, #1
221e4     0B 00 00 FF 
221e8     CC E4 05 F1 | 	add	objptr, ##5836
221ec     9C 2B B0 FD | 	call	#_psram_spin2_write
221f0     0B 00 00 FF 
221f4     CC E4 85 F1 | 	sub	objptr, ##5836
221f8     A7 F0 03 F6 | 	mov	ptra, fp
221fc     B2 00 A0 FD | 	call	#popregs_
22200                 | _pspoke_ret
22200     2D 00 64 FD | 	ret
22204                 | 
22204                 | ' 
22204                 | ' function pspeek(adr as ulong) as ubyte
22204                 | _pspeek
22204     00 4A 05 F6 | 	mov	COUNT_, #0
22208     A8 00 A0 FD | 	call	#pushregs_
2220c     0C F0 07 F1 | 	add	ptra, #12
22210     04 4E 05 F1 | 	add	fp, #4
22214     A7 12 62 FC | 	wrlong	arg01, fp
22218     04 4E 05 F1 | 	add	fp, #4
2221c     A7 12 02 F6 | 	mov	arg01, fp
22220     04 4E 85 F1 | 	sub	fp, #4
22224     A7 14 02 FB | 	rdlong	arg02, fp
22228     04 4E 85 F1 | 	sub	fp, #4
2222c     01 16 06 F6 | 	mov	arg03, #1
22230     0B 00 00 FF 
22234     CC E4 05 F1 | 	add	objptr, ##5836
22238     B4 2A B0 FD | 	call	#_psram_spin2_read1
2223c     0B 00 00 FF 
22240     CC E4 85 F1 | 	sub	objptr, ##5836
22244                 | ' psram.read1(varptr(res),adr,1)
22244                 | ' return res
22244     08 4E 05 F1 | 	add	fp, #8
22248     A7 FA C1 FA | 	rdbyte	result1, fp
2224c     08 4E 85 F1 | 	sub	fp, #8
22250     A7 F0 03 F6 | 	mov	ptra, fp
22254     B2 00 A0 FD | 	call	#popregs_
22258                 | _pspeek_ret
22258     2D 00 64 FD | 	ret
2225c                 | 
2225c                 | ' 
2225c                 | ' function pslpeek(adr as ulong) as ulong
2225c                 | _pslpeek
2225c     00 4A 05 F6 | 	mov	COUNT_, #0
22260     A8 00 A0 FD | 	call	#pushregs_
22264     0C F0 07 F1 | 	add	ptra, #12
22268     04 4E 05 F1 | 	add	fp, #4
2226c     A7 12 62 FC | 	wrlong	arg01, fp
22270     04 4E 05 F1 | 	add	fp, #4
22274     A7 12 02 F6 | 	mov	arg01, fp
22278     04 4E 85 F1 | 	sub	fp, #4
2227c     A7 14 02 FB | 	rdlong	arg02, fp
22280     04 4E 85 F1 | 	sub	fp, #4
22284     04 16 06 F6 | 	mov	arg03, #4
22288     0B 00 00 FF 
2228c     CC E4 05 F1 | 	add	objptr, ##5836
22290     5C 2A B0 FD | 	call	#_psram_spin2_read1
22294     0B 00 00 FF 
22298     CC E4 85 F1 | 	sub	objptr, ##5836
2229c                 | ' psram.read1(varptr(res),adr,4)
2229c                 | ' return res
2229c     08 4E 05 F1 | 	add	fp, #8
222a0     A7 FA 01 FB | 	rdlong	result1, fp
222a4     08 4E 85 F1 | 	sub	fp, #8
222a8     A7 F0 03 F6 | 	mov	ptra, fp
222ac     B2 00 A0 FD | 	call	#popregs_
222b0                 | _pslpeek_ret
222b0     2D 00 64 FD | 	ret
222b4                 | 
222b4                 | ' 
222b4                 | ' function psdpeek(adr as ulong) as ulong
222b4                 | _psdpeek
222b4     00 4A 05 F6 | 	mov	COUNT_, #0
222b8     A8 00 A0 FD | 	call	#pushregs_
222bc     0C F0 07 F1 | 	add	ptra, #12
222c0     04 4E 05 F1 | 	add	fp, #4
222c4     A7 12 62 FC | 	wrlong	arg01, fp
222c8     04 4E 05 F1 | 	add	fp, #4
222cc     A7 12 02 F6 | 	mov	arg01, fp
222d0     04 4E 85 F1 | 	sub	fp, #4
222d4     A7 14 02 FB | 	rdlong	arg02, fp
222d8     04 4E 85 F1 | 	sub	fp, #4
222dc     02 16 06 F6 | 	mov	arg03, #2
222e0     0B 00 00 FF 
222e4     CC E4 05 F1 | 	add	objptr, ##5836
222e8     04 2A B0 FD | 	call	#_psram_spin2_read1
222ec     0B 00 00 FF 
222f0     CC E4 85 F1 | 	sub	objptr, ##5836
222f4                 | ' psram.read1(varptr(res),adr,2)
222f4                 | ' return res
222f4     08 4E 05 F1 | 	add	fp, #8
222f8     A7 FA E1 FA | 	rdword	result1, fp
222fc     08 4E 85 F1 | 	sub	fp, #8
22300     A7 F0 03 F6 | 	mov	ptra, fp
22304     B2 00 A0 FD | 	call	#popregs_
22308                 | _psdpeek_ret
22308     2D 00 64 FD | 	ret
2230c                 | 
2230c                 | ' 
2230c                 | ' '' ------------------------------- USB keyboard scan to char translator
2230c                 | ' 
2230c                 | ' function scantochar(key)
2230c                 | _scantochar
2230c                 | ' 
2230c                 | ' select case (key shr 8) and 255
2230c     09 01 02 F6 | 	mov	_var01, arg01
22310     08 00 C6 F0 | 	sar	_var01, #8
22314     FF 00 0E F5 | 	and	_var01, #255 wz
22318     24 00 90 AD |  if_e	jmp	#LR__2660
2231c     02 00 0E F2 | 	cmp	_var01, #2 wz
22320     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
22324     30 00 90 AD |  if_e	jmp	#LR__2661
22328     40 00 0E F2 | 	cmp	_var01, #64 wz
2232c     44 00 90 AD |  if_e	jmp	#LR__2662
22330     42 00 0E F2 | 	cmp	_var01, #66 wz
22334     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
22338     70 00 90 5D |  if_ne	jmp	#LR__2664
2233c     50 00 90 FD | 	jmp	#LR__2663
22340                 | LR__2660
22340     09 FB 01 F6 | 	mov	result1, arg01
22344     7F FA 05 F5 | 	and	result1, #127
22348     02 FA 65 F0 | 	shl	result1, #2
2234c     F5 FA 01 F1 | 	add	result1, ptr__dat__
22350     FD FA C1 FA | 	rdbyte	result1, result1
22354     54 00 90 FD | 	jmp	#_scantochar_ret
22358                 | LR__2661
22358     09 FB 01 F6 | 	mov	result1, arg01
2235c     7F FA 05 F5 | 	and	result1, #127
22360     02 FA 65 F0 | 	shl	result1, #2
22364     01 FA 05 F1 | 	add	result1, #1
22368     F5 FA 01 F1 | 	add	result1, ptr__dat__
2236c     FD FA C1 FA | 	rdbyte	result1, result1
22370     38 00 90 FD | 	jmp	#_scantochar_ret
22374                 | LR__2662
22374     09 FB 01 F6 | 	mov	result1, arg01
22378     7F FA 05 F5 | 	and	result1, #127
2237c     02 FA 65 F0 | 	shl	result1, #2
22380     02 FA 05 F1 | 	add	result1, #2
22384     F5 FA 01 F1 | 	add	result1, ptr__dat__
22388     FD FA C1 FA | 	rdbyte	result1, result1
2238c     1C 00 90 FD | 	jmp	#_scantochar_ret
22390                 | LR__2663
22390     09 FB 01 F6 | 	mov	result1, arg01
22394     7F FA 05 F5 | 	and	result1, #127
22398     02 FA 65 F0 | 	shl	result1, #2
2239c     03 FA 05 F1 | 	add	result1, #3
223a0     F5 FA 01 F1 | 	add	result1, ptr__dat__
223a4     FD FA C1 FA | 	rdbyte	result1, result1
223a8     00 00 90 FD | 	jmp	#_scantochar_ret
223ac                 | LR__2664
223ac                 | _scantochar_ret
223ac     2D 00 64 FD | 	ret
223b0                 | 
223b0                 | _program
223b0     01 4A 05 F6 | 	mov	COUNT_, #1
223b4     A8 00 A0 FD | 	call	#pushregs_
223b8     70 FC BF FD | 	call	#_startpsram
223bc     40 12 06 F6 | 	mov	arg01, #64
223c0     00 14 06 F6 | 	mov	arg02, #0
223c4     00 16 06 F6 | 	mov	arg03, #0
223c8     A0 FC BF FD | 	call	#_startvideo
223cc     37 00 00 FF 
223d0     14 E4 05 F1 | 	add	objptr, ##28180
223d4     F2 12 02 FB | 	rdlong	arg01, objptr
223d8     00 14 06 F6 | 	mov	arg02, #0
223dc     FB 03 00 FF 
223e0     00 17 06 F6 | 	mov	arg03, ##521984
223e4     2B 00 00 FF 
223e8     48 E5 85 F1 | 	sub	objptr, ##22344
223ec     24 2F B0 FD | 	call	#_audio096_spin2_start
223f0     FE 16 02 F6 | 	mov	arg03, result2
223f4     2B 00 00 FF 
223f8     30 E5 05 F1 | 	add	objptr, ##22320
223fc     F2 FA 61 FC | 	wrlong	result1, objptr
22400     14 E4 05 F1 | 	add	objptr, #20
22404     F2 16 62 FC | 	wrlong	arg03, objptr
22408     37 00 00 FF 
2240c     10 E4 85 F1 | 	sub	objptr, ##28176
22410     32 12 06 F6 | 	mov	arg01, #50
22414     54 38 B0 FD | 	call	#__system___waitms
22418     37 00 00 FF 
2241c     10 E4 05 F1 | 	add	objptr, ##28176
22420     F2 12 02 FB | 	rdlong	arg01, objptr
22424     37 00 00 FF 
22428     10 E4 85 F1 | 	sub	objptr, ##28176
2242c     14 12 06 F1 | 	add	arg01, #20
22430     20 00 80 FF 
22434     09 01 58 FC | 	wrword	##16384, arg01
22438     E8 2B B0 FD | 	call	#_usbnew_spin2_start
2243c     37 00 00 FF 
22440     04 E4 05 F1 | 	add	objptr, ##28164
22444     F2 FA 61 FC | 	wrlong	result1, objptr
22448                 | '   mouse_limits[0] := xlim
22448     0F 00 00 FF 
2244c     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
22450     01 00 80 FF 
22454     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
22458                 | '   mouse_limits[1] := ylim
22458     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2245c     01 00 80 FF 
22460     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
22464     36 00 00 FF 
22468     F3 E4 85 F1 | 	sub	objptr, ##27891
2246c     F2 12 02 F6 | 	mov	arg01, objptr
22470     11 E5 85 F1 | 	sub	objptr, #273
22474     C4 12 06 F1 | 	add	arg01, #196
22478                 | '   mouse_outptr := ptr
22478     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2247c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
22480     0F 00 00 FF 
22484     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
22488     16 00 00 FF 
2248c     CA EA 05 F1 | 	add	ptr__dat__, ##11466
22490     F5 14 02 F6 | 	mov	arg02, ptr__dat__
22494     16 00 00 FF 
22498     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
2249c     10 12 06 F6 | 	mov	arg01, #16
224a0     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
224a4     10 12 06 F6 | 	mov	arg01, #16
224a8     20 14 06 F6 | 	mov	arg02, #32
224ac     20 16 06 F6 | 	mov	arg03, #32
224b0     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
224b4     09 12 C6 F9 | 	decod	arg01, #9
224b8     2C 15 06 F6 | 	mov	arg02, #300
224bc     BC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
224c0     F2 16 02 F6 | 	mov	arg03, objptr
224c4     50 00 00 FF 
224c8     44 E5 05 F1 | 	add	objptr, ##41284
224cc     F2 14 02 F6 | 	mov	arg02, objptr
224d0     0A 17 62 FC | 	wrlong	arg03, arg02
224d4     04 14 06 F1 | 	add	arg02, #4
224d8     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
224dc     EF 14 02 F6 | 	mov	arg02, entryptr__
224e0     1E FA 05 F6 | 	mov	result1, #30
224e4     28 E4 61 FD | 	setq	objptr
224e8     0A FB F1 FC | 	coginit	result1, arg02 wc
224ec     01 FA 65 C6 |  if_b	neg	result1, #1
224f0     04 E4 85 F1 | 	sub	objptr, #4
224f4     F2 FA 61 FC | 	wrlong	result1, objptr
224f8     01 00 00 FF 
224fc     00 E5 05 F1 | 	add	objptr, ##768
22500     F2 00 68 FC | 	wrlong	#0, objptr
22504     1B 00 00 FF 
22508     0C E4 85 F1 | 	sub	objptr, ##13836
2250c     F2 04 68 FC | 	wrlong	#2, objptr
22510     04 E4 05 F1 | 	add	objptr, #4
22514     F2 26 69 FC | 	wrlong	#147, objptr
22518     04 E4 05 F1 | 	add	objptr, #4
2251c     F2 34 69 FC | 	wrlong	#154, objptr
22520     04 E4 05 F1 | 	add	objptr, #4
22524     F2 08 68 FC | 	wrlong	#4, objptr
22528     04 E4 85 F1 | 	sub	objptr, #4
2252c     F2 16 02 FB | 	rdlong	arg03, objptr
22530     14 E4 85 F1 | 	sub	objptr, #20
22534     F2 16 62 FC | 	wrlong	arg03, objptr
22538     04 E4 05 F1 | 	add	objptr, #4
2253c     F2 00 68 FC | 	wrlong	#0, objptr
22540     04 E4 05 F1 | 	add	objptr, #4
22544     F2 00 68 FC | 	wrlong	#0, objptr
22548     19 00 00 FF 
2254c     0C E5 05 F1 | 	add	objptr, ##13068
22550     F2 02 68 FC | 	wrlong	#1, objptr
22554     01 00 00 FF 
22558     0C E5 05 F1 | 	add	objptr, ##780
2255c     F2 00 68 FC | 	wrlong	#0, objptr
22560     01 00 00 FF 
22564     00 EA 05 F1 | 	add	ptr__dat__, ##512
22568     08 E4 05 F1 | 	add	objptr, #8
2256c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
22570     04 E4 85 F1 | 	sub	objptr, #4
22574     03 00 80 FF 
22578     F2 3C 69 FC | 	wrlong	##1694, objptr
2257c     0C 00 00 FF 
22580     E8 E5 85 F1 | 	sub	objptr, ##6632
22584     F2 18 68 FC | 	wrlong	#12, objptr
22588     45 00 00 FF 
2258c     64 E4 85 F1 | 	sub	objptr, ##35428
22590     01 00 00 FF 
22594     00 EA 85 F1 | 	sub	ptr__dat__, ##512
22598     48 D9 BF FD | 	call	#_init_commands
2259c     5C F6 BF FD | 	call	#_init_error_strings
225a0     E0 ED BF FD | 	call	#_init_audio
225a4     90 30 BF FD | 	call	#_do_new
225a8     37 00 00 FF 
225ac     3C E4 05 F1 | 	add	objptr, ##28220
225b0     F2 12 02 FB | 	rdlong	arg01, objptr
225b4     04 E4 85 F1 | 	sub	objptr, #4
225b8     F2 14 02 FB | 	rdlong	arg02, objptr
225bc     37 00 00 FF 
225c0     38 E4 85 F1 | 	sub	objptr, ##28216
225c4     2C 17 B0 FD | 	call	#_hg010b_spin2_cls
225c8     37 00 00 FF 
225cc     40 E4 05 F1 | 	add	objptr, ##28224
225d0     F2 12 02 FB | 	rdlong	arg01, objptr
225d4     37 00 00 FF 
225d8     40 E4 85 F1 | 	sub	objptr, ##28224
225dc     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
225e0                 | ' 
225e0                 | ' leading_spaces:=amount
225e0     01 00 00 FF 
225e4     B6 E4 05 F1 | 	add	objptr, ##694
225e8     F2 04 68 FC | 	wrlong	#2, objptr
225ec     01 00 00 FF 
225f0     B6 E4 85 F1 | 	sub	objptr, ##694
225f4     B2 01 00 FF 
225f8     42 27 06 F6 | 	mov	local01, ##@LR__6005
225fc     3D 12 06 F6 | 	mov	arg01, #61
22600     3C 14 06 F6 | 	mov	arg02, #60
22604     3B 16 06 F6 | 	mov	arg03, #59
22608     3A 18 06 F6 | 	mov	arg04, #58
2260c     EC 80 B0 FD | 	call	#__system___vfs_open_sdcardx
22610     FD 14 02 F6 | 	mov	arg02, result1
22614     13 13 02 F6 | 	mov	arg01, local01
22618     28 37 B0 FD | 	call	#__system___mount
2261c     B2 01 00 FF 
22620     46 13 06 F6 | 	mov	arg01, ##@LR__6006
22624     DC 39 B0 FD | 	call	#__system___chdir
22628     B2 01 00 FF 
2262c     4E 27 06 F6 | 	mov	local01, ##@LR__6007
22630     4A 00 00 FF 
22634     94 E4 05 F1 | 	add	objptr, ##38036
22638     F2 26 62 FC | 	wrlong	local01, objptr
2263c     13 00 00 FF 
22640     60 E4 85 F1 | 	sub	objptr, ##9824
22644     F2 12 02 FB | 	rdlong	arg01, objptr
22648     37 00 00 FF 
2264c     34 E4 85 F1 | 	sub	objptr, ##28212
22650     01 12 66 F0 | 	shl	arg01, #1
22654     01 14 06 F6 | 	mov	arg02, #1
22658     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
2265c                 | ' init_commands
2265c                 | ' init_error_strings
2265c                 | ' init_audio
2265c                 | ' do_new
2265c                 | ' cls(ink, paper)
2265c                 | ' v.setfontfamily(font) 				' use ST Mono font
2265c                 | ' v.setleadingspaces(2)
2265c                 | ' mount "/sd", _vfs_open_sdcard()
2265c                 | ' chdir "/sd/bas"
2265c                 | ' currentdir$="/sd/bas"
2265c                 | ' position 2*editor_spaces,1 : print ver$
2265c     00 12 06 F6 | 	mov	arg01, #0
22660     3C 90 B0 FD | 	call	#__system___getiolock_0599
22664     FD 12 02 F6 | 	mov	arg01, result1
22668     0C 33 B0 FD | 	call	#__system___lockmem
2266c     18 00 00 FF 
22670     40 EB 05 F1 | 	add	ptr__dat__, ##12608
22674     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
22678     18 00 00 FF 
2267c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
22680     00 12 06 F6 | 	mov	arg01, #0
22684     00 16 06 F6 | 	mov	arg03, #0
22688     E0 3F B0 FD | 	call	#__system___basic_print_string
2268c     00 12 06 F6 | 	mov	arg01, #0
22690     0A 14 06 F6 | 	mov	arg02, #10
22694     00 16 06 F6 | 	mov	arg03, #0
22698     78 3F B0 FD | 	call	#__system___basic_print_char
2269c     00 12 06 F6 | 	mov	arg01, #0
226a0     FC 8F B0 FD | 	call	#__system___getiolock_0599
226a4     FD 00 68 FC | 	wrlong	#0, result1
226a8     52 00 00 FF 
226ac     44 E4 05 F1 | 	add	objptr, ##42052
226b0     F2 12 02 FB | 	rdlong	arg01, objptr
226b4     0E 00 00 FF 
226b8     E8 E5 85 F1 | 	sub	objptr, ##7656
226bc     F2 26 02 FB | 	rdlong	local01, objptr
226c0     43 00 00 FF 
226c4     5C E4 85 F1 | 	sub	objptr, ##34396
226c8     13 13 82 F1 | 	sub	arg01, local01
226cc     00 14 06 F6 | 	mov	arg02, #0
226d0     0A 16 06 F6 | 	mov	arg03, #10
226d4     70 55 B0 FD | 	call	#__system__Number_S
226d8     FD 12 02 F6 | 	mov	arg01, result1
226dc     B2 01 00 FF 
226e0     56 15 06 F6 | 	mov	arg02, ##@LR__6008
226e4     EC 32 B0 FD | 	call	#__system___string_concat
226e8     FD 26 02 F6 | 	mov	local01, result1
226ec     50 00 00 FF 
226f0     38 E5 05 F1 | 	add	objptr, ##41272
226f4     F2 26 62 FC | 	wrlong	local01, objptr
226f8     50 00 00 FF 
226fc     38 E5 85 F1 | 	sub	objptr, ##41272
22700                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
22700     00 12 06 F6 | 	mov	arg01, #0
22704     98 8F B0 FD | 	call	#__system___getiolock_0599
22708     FD 12 02 F6 | 	mov	arg01, result1
2270c     68 32 B0 FD | 	call	#__system___lockmem
22710     50 00 00 FF 
22714     38 E5 05 F1 | 	add	objptr, ##41272
22718     F2 14 02 FB | 	rdlong	arg02, objptr
2271c     50 00 00 FF 
22720     38 E5 85 F1 | 	sub	objptr, ##41272
22724     00 12 06 F6 | 	mov	arg01, #0
22728     00 16 06 F6 | 	mov	arg03, #0
2272c     3C 3F B0 FD | 	call	#__system___basic_print_string
22730     00 12 06 F6 | 	mov	arg01, #0
22734     0A 14 06 F6 | 	mov	arg02, #10
22738     00 16 06 F6 | 	mov	arg03, #0
2273c     D4 3E B0 FD | 	call	#__system___basic_print_char
22740     00 12 06 F6 | 	mov	arg01, #0
22744     58 8F B0 FD | 	call	#__system___getiolock_0599
22748     FD 00 68 FC | 	wrlong	#0, result1
2274c     37 00 00 FF 
22750     34 E4 05 F1 | 	add	objptr, ##28212
22754     F2 12 02 FB | 	rdlong	arg01, objptr
22758     37 00 00 FF 
2275c     34 E4 85 F1 | 	sub	objptr, ##28212
22760     01 12 66 F0 | 	shl	arg01, #1
22764     04 14 06 F6 | 	mov	arg02, #4
22768     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
2276c                 | ' position 2*editor_spaces,4 : print "Ready"
2276c     00 12 06 F6 | 	mov	arg01, #0
22770     2C 8F B0 FD | 	call	#__system___getiolock_0599
22774     FD 12 02 F6 | 	mov	arg01, result1
22778     FC 31 B0 FD | 	call	#__system___lockmem
2277c     B2 01 00 FF 
22780     68 15 06 F6 | 	mov	arg02, ##@LR__6009
22784     00 12 06 F6 | 	mov	arg01, #0
22788     00 16 06 F6 | 	mov	arg03, #0
2278c     DC 3E B0 FD | 	call	#__system___basic_print_string
22790     00 12 06 F6 | 	mov	arg01, #0
22794     0A 14 06 F6 | 	mov	arg02, #10
22798     00 16 06 F6 | 	mov	arg03, #0
2279c     74 3E B0 FD | 	call	#__system___basic_print_char
227a0     00 12 06 F6 | 	mov	arg01, #0
227a4     F8 8E B0 FD | 	call	#__system___getiolock_0599
227a8     FD 00 68 FC | 	wrlong	#0, result1
227ac     00 14 06 F6 | 	mov	arg02, #0
227b0     01 14 D6 F7 | 	test	arg02, #1 wc
227b4     5A 4C 64 FD | 	drvc	#38
227b8     01 14 D6 F7 | 	test	arg02, #1 wc
227bc     5A 4E 64 FD | 	drvc	#39
227c0     B2 01 00 FF 
227c4     6E 27 06 F6 | 	mov	local01, ##@LR__6010
227c8     52 00 00 FF 
227cc     70 E4 05 F1 | 	add	objptr, ##42096
227d0     F2 26 62 FC | 	wrlong	local01, objptr
227d4     04 E4 05 F1 | 	add	objptr, #4
227d8     FF FF FF FF 
227dc     F2 FE 6B FC | 	wrlong	##-1, objptr
227e0     0C E4 05 F1 | 	add	objptr, #12
227e4     F2 00 68 FC | 	wrlong	#0, objptr
227e8     52 00 00 FF 
227ec     80 E4 85 F1 | 	sub	objptr, ##42112
227f0                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
227f0                 | ' loadname="noname.bas"
227f0                 | ' do_insert=-1
227f0                 | ' inload=0
227f0                 | ' 
227f0                 | ' open "/sd/bas/autorun.bas" for input as #9
227f0     B2 01 00 FF 
227f4     79 15 06 F6 | 	mov	arg02, ##@LR__6011
227f8     09 12 06 F6 | 	mov	arg01, #9
227fc     00 16 06 F6 | 	mov	arg03, #0
22800     78 3D B0 FD | 	call	#__system___basic_open_string
22804     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22808     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2280c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22810     52 00 00 FF 
22814     84 E4 05 F1 | 	add	objptr, ##42116
22818     F2 FA 61 FC | 	wrlong	result1, objptr
2281c     52 00 00 FF 
22820     84 E4 85 F1 | 	sub	objptr, ##42116
22824                 | ' err=geterr()
22824                 | ' close #9
22824     09 12 06 F6 | 	mov	arg01, #9
22828     A4 84 B0 FD | 	call	#__system__close
2282c                 | ' if err=0 then line$="run autorun.bas" : interpret
2282c     52 00 00 FF 
22830     84 E4 05 F1 | 	add	objptr, ##42116
22834     F2 26 0A FB | 	rdlong	local01, objptr wz
22838     52 00 00 FF 
2283c     84 E4 85 F1 | 	sub	objptr, ##42116
22840     B2 01 00 AF 
22844     8D 27 06 A6 |  if_e	mov	local01, ##@LR__6012
22848     37 00 00 AF 
2284c     1C E4 05 A1 |  if_e	add	objptr, ##28188
22850     F2 26 62 AC |  if_e	wrlong	local01, objptr
22854     37 00 00 AF 
22858     1C E4 85 A1 |  if_e	sub	objptr, ##28188
2285c     5C EF BD AD |  if_e	call	#_interpret
22860                 | ' 
22860                 | ' 
22860                 | ' '-------------------------------------------------------------------------------------------------------- 
22860                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
22860                 | ' '--------------------------------------------------------------------------------------------------------
22860                 | ' 
22860                 | ' do
22860                 | LR__2670
22860     A0 DF BD FD | 	call	#_edit
22864     FD 26 02 F6 | 	mov	local01, result1
22868     37 00 00 FF 
2286c     1C E4 05 F1 | 	add	objptr, ##28188
22870     F2 26 62 FC | 	wrlong	local01, objptr
22874     37 00 00 FF 
22878     1C E4 85 F1 | 	sub	objptr, ##28188
2287c     3C EF BD FD | 	call	#_interpret
22880     B2 01 00 FF 
22884     9D 27 06 F6 | 	mov	local01, ##@LR__6013
22888     37 00 00 FF 
2288c     1C E4 05 F1 | 	add	objptr, ##28188
22890     F2 26 62 FC | 	wrlong	local01, objptr
22894     37 00 00 FF 
22898     1C E4 85 F1 | 	sub	objptr, ##28188
2289c     C0 FF 9F FD | 	jmp	#LR__2670
228a0     A7 F0 03 F6 | 	mov	ptra, fp
228a4     B2 00 A0 FD | 	call	#popregs_
228a8                 | _program_ret
228a8     2D 00 64 FD | 	ret
228ac                 | 
228ac                 | ' '' this is not a main program.
228ac                 | ' 
228ac                 | ' '****************************************************************************************************************
228ac                 | ' '                                                                                                             	*
228ac                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
228ac                 | ' '                                                                                                            	*
228ac                 | ' ' base - HDMI base pin												*
228ac                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
228ac                 | ' '														*
228ac                 | ' '														*
228ac                 | ' '****************************************************************************************************************
228ac                 | ' 
228ac                 | ' pub start(base,mb):result |i
228ac                 | _hg010b_spin2_start
228ac                 | ' 
228ac                 | ' '--------------------------- initialize pointers and variables
228ac                 | ' 
228ac                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
228ac     34 E4 05 F1 | 	add	objptr, #52
228b0     F2 FA 01 F6 | 	mov	result1, objptr
228b4     28 E4 85 F1 | 	sub	objptr, #40
228b8     F2 FA 61 FC | 	wrlong	result1, objptr
228bc                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
228bc                 | ' hdmibase:=base							' HDMI base pin, 8*n
228bc     18 E4 05 F1 | 	add	objptr, #24
228c0     F2 12 62 FC | 	wrlong	arg01, objptr
228c4                 | ' mailbox_ptr:=mb		
228c4     04 E4 05 F1 | 	add	objptr, #4
228c8     F2 14 62 FC | 	wrlong	arg02, objptr
228cc                 | ' mailbox0:=mb				' PSRAM mailbox pointer
228cc     C1 E5 05 F1 | 	add	objptr, #449
228d0     F2 14 62 FC | 	wrlong	arg02, objptr
228d4                 | ' sprite_ptr:=@spr1ptr
228d4     D8 E4 85 F1 | 	sub	objptr, #216
228d8     F2 FA 01 F6 | 	mov	result1, objptr
228dc     E5 E4 85 F1 | 	sub	objptr, #229
228e0     F2 FA 61 FC | 	wrlong	result1, objptr
228e4                 | ' 
228e4                 | ' 		'
228e4                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
228e4     E5 E4 05 F1 | 	add	objptr, #229
228e8     F2 FA 01 FB | 	rdlong	result1, objptr
228ec     D0 FA 05 F1 | 	add	result1, #208
228f0     FD 10 58 FC | 	wrword	#8, result1
228f4                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
228f4     F2 16 02 FB | 	rdlong	arg03, objptr
228f8     D2 16 06 F1 | 	add	arg03, #210
228fc     0B 21 58 FC | 	wrword	#16, arg03
22900                 | ' leading_spaces:=0				'
22900     A5 E5 05 F1 | 	add	objptr, #421
22904     F2 00 68 FC | 	wrlong	#0, objptr
22908                 | ' 
22908                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
22908     99 E4 85 F1 | 	sub	objptr, #153
2290c     00 00 A0 FF 
22910     F2 0E 68 FC | 	wrlong	##1073741831, objptr
22914                 | ' emptydl[1]:=0
22914     04 E4 05 F1 | 	add	objptr, #4
22918     F2 00 68 FC | 	wrlong	#0, objptr
2291c                 | ' 
2291c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
2291c                 | ' 
2291c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
2291c     28 E5 85 F1 | 	sub	objptr, #296
22920     F2 02 68 FC | 	wrlong	#1, objptr
22924                 | ' if s_debug<>0
22924                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
22924     20 00 80 FF 
22928     F2 00 68 FC | 	wrlong	##16384, objptr
2292c     F9 E4 85 F1 | 	sub	objptr, #249
22930                 | ' setmode()							' set the mode, see below
22930     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
22934                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
22934     49 E4 05 F1 | 	add	objptr, #73
22938     F2 FA 01 F6 | 	mov	result1, objptr
2293c     35 E4 85 F1 | 	sub	objptr, #53
22940     F2 FA 61 FC | 	wrlong	result1, objptr
22944                 | ' cursor_ptr:=@cursor_x						
22944     28 E4 05 F1 | 	add	objptr, #40
22948     F2 16 02 F6 | 	mov	arg03, objptr
2294c     2C E4 85 F1 | 	sub	objptr, #44
22950     F2 16 62 FC | 	wrlong	arg03, objptr
22954                 | ' fontnum:=0  							' start with a PC type font 
22954     55 E4 05 F1 | 	add	objptr, #85
22958     F2 00 68 FC | 	wrlong	#0, objptr
2295c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
2295c     1C E4 05 F1 | 	add	objptr, #28
22960     F2 12 02 F6 | 	mov	arg01, objptr
22964     81 E4 85 F1 | 	sub	objptr, #129
22968     10 00 00 FF 
2296c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
22970     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
22974     10 00 00 FF 
22978     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
2297c     10 16 06 F6 | 	mov	arg03, #16
22980     14 2F B0 FD | 	call	#__system____builtin_memmove
22984                 | ' leading_spaces:=0
22984     01 00 00 FF 
22988     B6 E4 05 F1 | 	add	objptr, ##694
2298c     F2 00 68 FC | 	wrlong	#0, objptr
22990     01 00 00 FF 
22994     B6 E4 85 F1 | 	sub	objptr, ##694
22998                 | ' '---------------------------- initialize a cursor (MSDOS type)
22998                 | ' 
22998                 | ' initcursor(154)
22998     9A 12 06 F6 | 	mov	arg01, #154
2299c     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
229a0                 | ' 
229a0                 | ' '---------------------------- start the cog
229a0                 | ' 
229a0                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
229a0     10 00 00 FF 
229a4     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
229a8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
229ac     10 00 00 FF 
229b0     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
229b4     14 E4 05 F1 | 	add	objptr, #20
229b8     10 FA 05 F6 | 	mov	result1, #16
229bc     28 E4 61 FD | 	setq	objptr
229c0     0A FB F1 FC | 	coginit	result1, arg02 wc
229c4     01 FA 65 C6 |  if_b	neg	result1, #1
229c8     1C E4 05 F1 | 	add	objptr, #28
229cc     F2 FA 61 FC | 	wrlong	result1, objptr
229d0     30 E4 85 F1 | 	sub	objptr, #48
229d4                 | ' waitms(40)							' wait for stabilize
229d4     28 12 06 F6 | 	mov	arg01, #40
229d8     90 32 B0 FD | 	call	#__system___waitms
229dc                 | ' return cog							' return the driver's cog #
229dc     30 E4 05 F1 | 	add	objptr, #48
229e0     F2 FA 01 FB | 	rdlong	result1, objptr
229e4     30 E4 85 F1 | 	sub	objptr, #48
229e8                 | _hg010b_spin2_start_ret
229e8     2D 00 64 FD | 	ret
229ec                 | 
229ec                 | ' 
229ec                 | ' 
229ec                 | ' '**************************************************************************************************************** 
229ec                 | ' '                                                                                                             	*
229ec                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
229ec                 | ' '  Mode number - see start() above or bits below								*
229ec                 | ' '                                                                                                             	*
229ec                 | ' '****************************************************************************************************************
229ec                 | ' 
229ec                 | ' '---------------------------- initialize a cursor (MSDOS type)
229ec                 | ' pub initcursor(color) |i
229ec                 | _hg010b_spin2_initcursor
229ec     03 4A 05 F6 | 	mov	COUNT_, #3
229f0     A8 00 A0 FD | 	call	#pushregs_
229f4     09 27 02 F6 | 	mov	local01, arg01
229f8                 | ' 
229f8                 | ' cursor_x:=0							' place the cursor at 0:0
229f8     3C E4 05 F1 | 	add	objptr, #60
229fc     F2 00 58 FC | 	wrword	#0, objptr
22a00                 | ' cursor_y:=0
22a00     02 E4 05 F1 | 	add	objptr, #2
22a04     F2 00 48 FC | 	wrbyte	#0, objptr
22a08                 | ' repeat i from 0 to 111
22a08     00 28 06 F6 | 	mov	local02, #0
22a0c     F8 E5 05 F1 | 	add	objptr, #504
22a10     97 1A 48 FB | 	callpa	#(@LR__2682-@LR__2680)>>2,fcache_load_ptr_
22a14                 | LR__2680
22a14                 | '   cursor[i]:=0
22a14     14 2B 02 F6 | 	mov	local03, local02
22a18     F2 2A 02 F1 | 	add	local03, objptr
22a1c     15 01 48 FC | 	wrbyte	#0, local03
22a20     01 28 06 F1 | 	add	local02, #1
22a24     70 28 56 F2 | 	cmps	local02, #112 wc
22a28     E8 FF 9F CD |  if_b	jmp	#LR__2680
22a2c                 | ' repeat i from 112 to 127
22a2c     70 28 06 F6 | 	mov	local02, #112
22a30                 | LR__2681
22a30                 | '   cursor[i]:=color  
22a30     14 2B 02 F6 | 	mov	local03, local02
22a34     F2 2A 02 F1 | 	add	local03, objptr
22a38     15 27 42 FC | 	wrbyte	local01, local03
22a3c     01 28 06 F1 | 	add	local02, #1
22a40     80 28 16 F2 | 	cmp	local02, #128 wc
22a44     E8 FF 9F CD |  if_b	jmp	#LR__2681
22a48                 | LR__2682
22a48                 | ' 'repeat i from 0 to 127
22a48                 | ' '  if ((i/8)//2)
22a48                 | ' '    cursor[i]:=15
22a48                 | ' '  else
22a48                 | ' '    cursor[i]:=0
22a48                 | ' '  if i>=120    
22a48                 | ' '    cursor[i]:=40
22a48                 | ' setspriteptr(17,@cursor)
22a48     F2 14 02 F6 | 	mov	arg02, objptr
22a4c     01 00 00 FF 
22a50     36 E4 85 F1 | 	sub	objptr, ##566
22a54     11 12 06 F6 | 	mov	arg01, #17
22a58     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
22a5c                 | ' setspritesize(17,8,16)
22a5c     11 12 06 F6 | 	mov	arg01, #17
22a60     08 14 06 F6 | 	mov	arg02, #8
22a64     10 16 06 F6 | 	mov	arg03, #16
22a68     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
22a6c                 | ' setspritepos(17,0,0)
22a6c     11 12 06 F6 | 	mov	arg01, #17
22a70     00 14 06 F6 | 	mov	arg02, #0
22a74     00 16 06 F6 | 	mov	arg03, #0
22a78     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
22a7c                 | ' cursorshape:=14
22a7c     0B 00 00 FF 
22a80     C6 E4 05 F1 | 	add	objptr, ##5830
22a84     F2 1C 68 FC | 	wrlong	#14, objptr
22a88                 | ' cursorcolor:=color
22a88     04 E4 85 F1 | 	sub	objptr, #4
22a8c     F2 26 62 FC | 	wrlong	local01, objptr
22a90     0B 00 00 FF 
22a94     C2 E4 85 F1 | 	sub	objptr, ##5826
22a98     A7 F0 03 F6 | 	mov	ptra, fp
22a9c     B2 00 A0 FD | 	call	#popregs_
22aa0                 | _hg010b_spin2_initcursor_ret
22aa0     2D 00 64 FD | 	ret
22aa4                 | 
22aa4                 | ' 
22aa4                 | ' pub setcursorshape(shape) | i
22aa4                 | _hg010b_spin2_setcursorshape
22aa4                 | ' 
22aa4                 | ' cursorshape:=shape
22aa4     0B 00 00 FF 
22aa8     C6 E4 05 F1 | 	add	objptr, ##5830
22aac     F2 12 62 FC | 	wrlong	arg01, objptr
22ab0                 | ' repeat i from 0 to (8*cursorshape)-1
22ab0     00 00 06 F6 | 	mov	_var01, #0
22ab4     09 03 02 F6 | 	mov	_var02, arg01
22ab8     03 02 66 F0 | 	shl	_var02, #3
22abc     01 02 86 F1 | 	sub	_var02, #1
22ac0     00 02 56 F2 | 	cmps	_var02, #0 wc
22ac4     01 04 86 F6 | 	negc	_var03, #1
22ac8     02 07 02 F6 | 	mov	_var04, _var03
22acc     02 03 02 F1 | 	add	_var02, _var03
22ad0     0A 00 00 FF 
22ad4     90 E4 85 F1 | 	sub	objptr, ##5264
22ad8     97 0C 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
22adc                 | LR__2690
22adc                 | '   cursor[i]:=0
22adc     00 05 02 F6 | 	mov	_var03, _var01
22ae0     F2 04 02 F1 | 	add	_var03, objptr
22ae4     02 01 48 FC | 	wrbyte	#0, _var03
22ae8     03 01 02 F1 | 	add	_var01, _var04
22aec     01 01 0A F2 | 	cmp	_var01, _var02 wz
22af0     E8 FF 9F 5D |  if_ne	jmp	#LR__2690
22af4                 | LR__2691
22af4                 | ' repeat i from 8*cursorshape to 127
22af4     0A 00 00 FF 
22af8     90 E4 05 F1 | 	add	objptr, ##5264
22afc     F2 06 02 FB | 	rdlong	_var04, objptr
22b00     03 01 02 F6 | 	mov	_var01, _var04
22b04     03 00 66 F0 | 	shl	_var01, #3
22b08     0B 00 00 FF 
22b0c     C6 E4 85 F1 | 	sub	objptr, ##5830
22b10     03 06 66 F0 | 	shl	_var04, #3
22b14     80 06 56 F2 | 	cmps	_var04, #128 wc
22b18     01 04 A6 F6 | 	negnc	_var03, #1
22b1c     7F 02 06 F6 | 	mov	_var02, #127
22b20     02 03 02 F1 | 	add	_var02, _var03
22b24     97 1A 48 FB | 	callpa	#(@LR__2693-@LR__2692)>>2,fcache_load_ptr_
22b28                 | LR__2692
22b28                 | '   cursor[i]:=cursorcolor
22b28     00 07 02 F6 | 	mov	_var04, _var01
22b2c     01 00 00 FF 
22b30     36 E4 05 F1 | 	add	objptr, ##566
22b34     F2 06 02 F1 | 	add	_var04, objptr
22b38     0A 00 00 FF 
22b3c     8C E4 05 F1 | 	add	objptr, ##5260
22b40     F2 12 02 FB | 	rdlong	arg01, objptr
22b44     0B 00 00 FF 
22b48     C2 E4 85 F1 | 	sub	objptr, ##5826
22b4c     03 13 42 FC | 	wrbyte	arg01, _var04
22b50     02 01 02 F1 | 	add	_var01, _var03
22b54     01 01 0A F2 | 	cmp	_var01, _var02 wz
22b58     CC FF 9F 5D |  if_ne	jmp	#LR__2692
22b5c                 | LR__2693
22b5c                 | _hg010b_spin2_setcursorshape_ret
22b5c     2D 00 64 FD | 	ret
22b60                 | 
22b60                 | ' 
22b60                 | ' pub setcursorcolor(color) | i
22b60                 | _hg010b_spin2_setcursorcolor
22b60                 | ' 
22b60                 | ' cursorcolor:=color
22b60     0B 00 00 FF 
22b64     C2 E4 05 F1 | 	add	objptr, ##5826
22b68     F2 12 62 FC | 	wrlong	arg01, objptr
22b6c                 | ' repeat i from 0 to (8*cursorshape)-1
22b6c     00 12 06 F6 | 	mov	arg01, #0
22b70     04 E4 05 F1 | 	add	objptr, #4
22b74     F2 00 02 FB | 	rdlong	_var01, objptr
22b78     03 00 66 F0 | 	shl	_var01, #3
22b7c     01 00 86 F1 | 	sub	_var01, #1
22b80     00 00 56 F2 | 	cmps	_var01, #0 wc
22b84     01 02 86 F6 | 	negc	_var02, #1
22b88     01 05 02 F6 | 	mov	_var03, _var02
22b8c     01 01 02 F1 | 	add	_var01, _var02
22b90     0A 00 00 FF 
22b94     90 E4 85 F1 | 	sub	objptr, ##5264
22b98     97 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
22b9c                 | LR__2700
22b9c                 | '   cursor[i]:=0
22b9c     09 03 02 F6 | 	mov	_var02, arg01
22ba0     F2 02 02 F1 | 	add	_var02, objptr
22ba4     01 01 48 FC | 	wrbyte	#0, _var02
22ba8     02 13 02 F1 | 	add	arg01, _var03
22bac     00 13 0A F2 | 	cmp	arg01, _var01 wz
22bb0     E8 FF 9F 5D |  if_ne	jmp	#LR__2700
22bb4                 | LR__2701
22bb4                 | ' repeat i from 8*cursorshape to 127
22bb4     0A 00 00 FF 
22bb8     90 E4 05 F1 | 	add	objptr, ##5264
22bbc     F2 04 02 FB | 	rdlong	_var03, objptr
22bc0     02 13 02 F6 | 	mov	arg01, _var03
22bc4     03 12 66 F0 | 	shl	arg01, #3
22bc8     0B 00 00 FF 
22bcc     C6 E4 85 F1 | 	sub	objptr, ##5830
22bd0     03 04 66 F0 | 	shl	_var03, #3
22bd4     80 04 56 F2 | 	cmps	_var03, #128 wc
22bd8     01 02 A6 F6 | 	negnc	_var02, #1
22bdc     7F 00 06 F6 | 	mov	_var01, #127
22be0     01 01 02 F1 | 	add	_var01, _var02
22be4     97 1A 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
22be8                 | LR__2702
22be8                 | '   cursor[i]:=cursorcolor
22be8     09 05 02 F6 | 	mov	_var03, arg01
22bec     01 00 00 FF 
22bf0     36 E4 05 F1 | 	add	objptr, ##566
22bf4     F2 04 02 F1 | 	add	_var03, objptr
22bf8     0A 00 00 FF 
22bfc     8C E4 05 F1 | 	add	objptr, ##5260
22c00     F2 06 02 FB | 	rdlong	_var04, objptr
22c04     0B 00 00 FF 
22c08     C2 E4 85 F1 | 	sub	objptr, ##5826
22c0c     02 07 42 FC | 	wrbyte	_var04, _var03
22c10     01 13 02 F1 | 	add	arg01, _var02
22c14     00 13 0A F2 | 	cmp	arg01, _var01 wz
22c18     CC FF 9F 5D |  if_ne	jmp	#LR__2702
22c1c                 | LR__2703
22c1c                 | _hg010b_spin2_setcursorcolor_ret
22c1c     2D 00 64 FD | 	ret
22c20                 | 
22c20                 | '   
22c20                 | '   
22c20                 | '   
22c20                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
22c20                 | _hg010b_spin2_setmode
22c20     02 4A 05 F6 | 	mov	COUNT_, #2
22c24     A8 00 A0 FD | 	call	#pushregs_
22c28                 | ' 
22c28                 | ' 
22c28                 | ' dl_ptr:=@emptydl[0]
22c28     01 00 00 FF 
22c2c     1D E4 05 F1 | 	add	objptr, ##541
22c30     F2 1A 02 F6 | 	mov	arg05, objptr
22c34     FD E5 85 F1 | 	sub	objptr, #509
22c38     F2 1A 62 FC | 	wrlong	arg05, objptr
22c3c                 | ' 
22c3c                 | ' if cog>0 
22c3c     10 E4 05 F1 | 	add	objptr, #16
22c40     F2 1A 02 FB | 	rdlong	arg05, objptr
22c44     30 E4 85 F1 | 	sub	objptr, #48
22c48     01 1A 56 F2 | 	cmps	arg05, #1 wc
22c4c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
22c4c     01 12 06 36 |  if_ae	mov	arg01, #1
22c50     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
22c54                 | ' xres:=1024
22c54     01 00 00 FF 
22c58     26 E4 05 F1 | 	add	objptr, ##550
22c5c     02 00 80 FF 
22c60     F2 00 68 FC | 	wrlong	##1024, objptr
22c64                 | ' yres:=600
22c64     04 E4 05 F1 | 	add	objptr, #4
22c68     01 00 80 FF 
22c6c     F2 B0 68 FC | 	wrlong	##600, objptr
22c70                 | ' ppl:=(timings[3])
22c70     10 00 00 FF 
22c74     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
22c78     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
22c7c     51 E5 85 F1 | 	sub	objptr, #337
22c80     F2 1A 62 FC | 	wrlong	arg05, objptr
22c84                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
22c84     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
22c88     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
22c8c     01 26 66 F0 | 	shl	local01, #1
22c90     80 E4 85 F1 | 	sub	objptr, #128
22c94     F2 26 62 FC | 	wrlong	local01, objptr
22c98                 | ' cpl1:=cpl '' todo remove
22c98     04 E4 05 F1 | 	add	objptr, #4
22c9c     F2 26 62 FC | 	wrlong	local01, objptr
22ca0                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
22ca0     02 00 00 FF 
22ca4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
22ca8     41 E4 85 F1 | 	sub	objptr, #65
22cac     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
22cb0                 | ' repeat i from 0 to 3
22cb0     00 28 06 F6 | 	mov	local02, #0
22cb4     02 00 00 FF 
22cb8     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
22cbc     08 E4 05 F1 | 	add	objptr, #8
22cc0     97 20 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
22cc4                 | LR__2710
22cc4                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
22cc4     14 27 02 F6 | 	mov	local01, local02
22cc8     02 26 66 F0 | 	shl	local01, #2
22ccc     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
22cd0     F2 1A 02 FB | 	rdlong	arg05, objptr
22cd4     11 1A 66 F0 | 	shl	arg05, #17
22cd8     13 27 02 FB | 	rdlong	local01, local01
22cdc     0D 27 02 F1 | 	add	local01, arg05
22ce0     80 40 38 FF 
22ce4     00 26 06 F1 | 	add	local01, ##1887502336
22ce8     14 1B 02 F6 | 	mov	arg05, local02
22cec     02 1A 66 F0 | 	shl	arg05, #2
22cf0     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
22cf4     0D 27 62 FC | 	wrlong	local01, arg05
22cf8     01 28 06 F1 | 	add	local02, #1
22cfc     04 28 56 F2 | 	cmps	local02, #4 wc
22d00     C0 FF 9F CD |  if_b	jmp	#LR__2710
22d04                 | LR__2711
22d04     24 E4 85 F1 | 	sub	objptr, #36
22d08                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
22d08     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
22d0c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
22d10     14 26 66 FC | 	wrlong	local01, #20
22d14                 | ' hubset(timings[10])
22d14     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
22d18     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
22d1c     10 00 00 FF 
22d20     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
22d24     00 12 62 FD | 	hubset	arg01
22d28                 | ' waitms(1)                                                   	' wait for stabilization
22d28     01 12 06 F6 | 	mov	arg01, #1
22d2c     3C 2F B0 FD | 	call	#__system___waitms
22d30     10 00 00 FF 
22d34     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
22d38     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
22d3c     61 E4 05 F1 | 	add	objptr, #97
22d40     F2 28 62 FC | 	wrlong	local02, objptr
22d44     14 27 52 F6 | 	abs	local01, local02 wc
22d48     04 26 46 F0 | 	shr	local01, #4
22d4c     13 27 82 F6 | 	negc	local01, local01
22d50     9C E4 05 F1 | 	add	objptr, #156
22d54     F2 26 62 FC | 	wrlong	local01, objptr
22d58     A4 E4 85 F1 | 	sub	objptr, #164
22d5c     F2 28 02 FB | 	rdlong	local02, objptr
22d60     08 E4 05 F1 | 	add	objptr, #8
22d64     F2 26 02 FB | 	rdlong	local01, objptr
22d68     13 29 02 FD | 	qmul	local02, local01
22d6c                 | ' lines:=timings[11]
22d6c                 | ' t_lines:=lines/16
22d6c                 | ' buflen:=cpl*lines						' framebuffer length in longs
22d6c     29 E4 85 F1 | 	sub	objptr, #41
22d70     19 26 C6 F9 | 	decod	local01, #25
22d74     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
22d78     18 28 62 FD | 	getqx	local02
22d7c     F2 28 62 FC | 	wrlong	local02, objptr
22d80     38 E4 85 F1 | 	sub	objptr, #56
22d84     02 28 66 F0 | 	shl	local02, #2
22d88     14 27 82 F1 | 	sub	local01, local02
22d8c     F2 26 62 FC | 	wrlong	local01, objptr
22d90     FD E4 05 F1 | 	add	objptr, #253
22d94     F2 28 02 FB | 	rdlong	local02, objptr
22d98     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
22d9c     0D 29 02 FD | 	qmul	local02, arg05
22da0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
22da0                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
22da0     F9 E4 85 F1 | 	sub	objptr, #249
22da4                 | ' mode_ptr:=@timings						' set pointers to timings
22da4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
22da8                 | ' graphmode:=1024+512+192+48							' det global variable
22da8                 | ' makedl(graphmode)							' make a DL for the mode
22da8     03 00 00 FF 
22dac     F0 12 06 F6 | 	mov	arg01, ##1776
22db0     18 28 62 FD | 	getqx	local02
22db4     14 27 82 F1 | 	sub	local01, local02
22db8     F2 26 62 FC | 	wrlong	local01, objptr
22dbc     14 E4 05 F1 | 	add	objptr, #20
22dc0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
22dc4     79 E4 05 F1 | 	add	objptr, #121
22dc8     03 00 80 FF 
22dcc     F2 E0 69 FC | 	wrlong	##1776, objptr
22dd0     91 E4 85 F1 | 	sub	objptr, #145
22dd4     10 00 00 FF 
22dd8     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
22ddc     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
22de0                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
22de0     F2 26 02 FB | 	rdlong	local01, objptr
22de4     DD E4 05 F1 | 	add	objptr, #221
22de8     F2 26 62 FC | 	wrlong	local01, objptr
22dec                 | ' s_font_ptr:=font_ptr
22dec     D5 E4 85 F1 | 	sub	objptr, #213
22df0     F2 26 02 FB | 	rdlong	local01, objptr
22df4     D9 E4 05 F1 | 	add	objptr, #217
22df8     F2 26 62 FC | 	wrlong	local01, objptr
22dfc                 | ' s_lines:=lines
22dfc     80 E4 85 F1 | 	sub	objptr, #128
22e00     F2 26 02 FB | 	rdlong	local01, objptr
22e04     84 E4 05 F1 | 	add	objptr, #132
22e08     F2 26 62 FC | 	wrlong	local01, objptr
22e0c                 | ' s_buflen:=buflen
22e0c     AD E4 85 F1 | 	sub	objptr, #173
22e10     F2 26 02 FB | 	rdlong	local01, objptr
22e14     B5 E4 05 F1 | 	add	objptr, #181
22e18     F2 26 62 FC | 	wrlong	local01, objptr
22e1c                 | ' s_cpl:=cpl
22e1c     94 E4 85 F1 | 	sub	objptr, #148
22e20     F2 26 02 FB | 	rdlong	local01, objptr
22e24     90 E4 05 F1 | 	add	objptr, #144
22e28     F2 26 62 FC | 	wrlong	local01, objptr
22e2c                 | ' s_cpl1:=cpl
22e2c     90 E4 85 F1 | 	sub	objptr, #144
22e30     F2 26 02 FB | 	rdlong	local01, objptr
22e34     98 E4 05 F1 | 	add	objptr, #152
22e38     F2 26 62 FC | 	wrlong	local01, objptr
22e3c                 | ' st_lines:=t_lines
22e3c     0C E4 05 F1 | 	add	objptr, #12
22e40     F2 26 02 FB | 	rdlong	local01, objptr
22e44     04 E4 05 F1 | 	add	objptr, #4
22e48     F2 26 62 FC | 	wrlong	local01, objptr
22e4c                 | ' ppl:=ppl/xzoom  
22e4c     28 E4 85 F1 | 	sub	objptr, #40
22e50     F2 88 02 FB | 	rdlong	muldiva_, objptr
22e54     2C E4 05 F1 | 	add	objptr, #44
22e58     F2 8A 02 FB | 	rdlong	muldivb_, objptr
22e5c     05 E5 85 F1 | 	sub	objptr, #261
22e60     BA 00 A0 FD | 	call	#divide_
22e64     D9 E4 05 F1 | 	add	objptr, #217
22e68     F2 8A 62 FC | 	wrlong	muldivb_, objptr
22e6c                 | ' s_ppl:=ppl
22e6c     1C E4 05 F1 | 	add	objptr, #28
22e70     F2 8A 62 FC | 	wrlong	muldivb_, objptr
22e74     F5 E4 85 F1 | 	sub	objptr, #245
22e78                 | ' waitms(20)							' wait 
22e78     14 12 06 F6 | 	mov	arg01, #20
22e7c     EC 2D B0 FD | 	call	#__system___waitms
22e80                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22e80     04 E4 05 F1 | 	add	objptr, #4
22e84     F2 12 02 FB | 	rdlong	arg01, objptr
22e88     04 E4 85 F1 | 	sub	objptr, #4
22e8c     F2 16 02 FB | 	rdlong	arg03, objptr
22e90     09 17 82 F1 | 	sub	arg03, arg01
22e94     20 14 06 F6 | 	mov	arg02, #32
22e98     00 18 06 F6 | 	mov	arg04, #0
22e9c     01 1A 06 F6 | 	mov	arg05, #1
22ea0     0B 00 00 FF 
22ea4     CC E4 05 F1 | 	add	objptr, ##5836
22ea8     7C 1F B0 FD | 	call	#_psram_spin2_fill
22eac     0B 00 00 FF 
22eb0     CC E4 85 F1 | 	sub	objptr, ##5836
22eb4     A7 F0 03 F6 | 	mov	ptra, fp
22eb8     B2 00 A0 FD | 	call	#popregs_
22ebc                 | _hg010b_spin2_setmode_ret
22ebc     2D 00 64 FD | 	ret
22ec0                 | 
22ec0                 | ' 
22ec0                 | ' '****************************************************************************************************************
22ec0                 | ' '                                                                                                             	*
22ec0                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
22ec0                 | ' '                                                                                                             	*
22ec0                 | ' '****************************************************************************************************************
22ec0                 | ' 
22ec0                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
22ec0                 | _hg010b_spin2_makedl
22ec0                 | ' 
22ec0                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
22ec0                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
22ec0                 | ' repeat i from 0 to 11                                                           ' clear DL
22ec0     00 00 06 F6 | 	mov	_var01, #0
22ec4     ED E5 05 F1 | 	add	objptr, #493
22ec8     97 0E 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
22ecc                 | LR__2720
22ecc                 | '   displaylist[i]:=0 
22ecc     00 03 02 F6 | 	mov	_var02, _var01
22ed0     02 02 66 F0 | 	shl	_var02, #2
22ed4     F2 02 02 F1 | 	add	_var02, objptr
22ed8     01 01 68 FC | 	wrlong	#0, _var02
22edc     01 00 06 F1 | 	add	_var01, #1
22ee0     0C 00 56 F2 | 	cmps	_var01, #12 wc
22ee4     E4 FF 9F CD |  if_b	jmp	#LR__2720
22ee8                 | LR__2721
22ee8                 | '                         ' 
22ee8                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
22ee8     8C E5 85 F1 | 	sub	objptr, #396
22eec     F2 02 02 FB | 	rdlong	_var02, objptr
22ef0     14 02 66 F0 | 	shl	_var02, #20
22ef4     01 02 06 F1 | 	add	_var02, #1
22ef8     04 E4 85 F1 | 	sub	objptr, #4
22efc     F2 00 02 FB | 	rdlong	_var01, objptr
22f00     02 00 66 F0 | 	shl	_var01, #2
22f04     04 00 66 F0 | 	shl	_var01, #4
22f08     00 03 02 F1 | 	add	_var02, _var01
22f0c     90 E5 05 F1 | 	add	objptr, #400
22f10     F2 02 62 FC | 	wrlong	_var02, objptr
22f14     ED E5 85 F1 | 	sub	objptr, #493
22f18                 | ' displaylist[1]:=buf_ptr<<4+%10  
22f18     F2 02 02 FB | 	rdlong	_var02, objptr
22f1c     04 02 66 F0 | 	shl	_var02, #4
22f20     02 02 06 F1 | 	add	_var02, #2
22f24     F1 E5 05 F1 | 	add	objptr, #497
22f28     F2 02 62 FC | 	wrlong	_var02, objptr
22f2c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
22f2c     04 E4 85 F1 | 	sub	objptr, #4
22f30     F2 02 02 F6 | 	mov	_var02, objptr
22f34     CD E5 85 F1 | 	sub	objptr, #461
22f38     F2 02 62 FC | 	wrlong	_var02, objptr
22f3c     20 E4 85 F1 | 	sub	objptr, #32
22f40                 | _hg010b_spin2_makedl_ret
22f40     2D 00 64 FD | 	ret
22f44                 | 
22f44                 | ' 
22f44                 | ' 
22f44                 | ' '****************************************************************************************************************
22f44                 | ' '                                                                        					*
22f44                 | ' '  Graphic primitives                                                    					*
22f44                 | ' '                                                                        					*
22f44                 | ' '****************************************************************************************************************
22f44                 | ' 
22f44                 | ' pub setspriteptr(num,ptr)
22f44                 | _hg010b_spin2_setspriteptr
22f44                 | ' long[@spr1ptr+12*num]:=ptr
22f44     11 E5 05 F1 | 	add	objptr, #273
22f48     F2 00 02 F6 | 	mov	_var01, objptr
22f4c     09 03 02 F6 | 	mov	_var02, arg01
22f50     01 02 66 F0 | 	shl	_var02, #1
22f54     09 03 02 F1 | 	add	_var02, arg01
22f58     02 02 66 F0 | 	shl	_var02, #2
22f5c     01 01 02 F1 | 	add	_var01, _var02
22f60     00 15 62 FC | 	wrlong	arg02, _var01
22f64     11 E5 85 F1 | 	sub	objptr, #273
22f68                 | _hg010b_spin2_setspriteptr_ret
22f68     2D 00 64 FD | 	ret
22f6c                 | 
22f6c                 | ' 
22f6c                 | ' pub setspritepos(num,x,y)
22f6c                 | _hg010b_spin2_setspritepos
22f6c                 | ' if y>601
22f6c     01 00 00 FF 
22f70     5A 16 56 F2 | 	cmps	arg03, ##602 wc
22f74                 | '   y:=601
22f74     01 00 00 3F 
22f78     59 16 06 36 |  if_ae	mov	arg03, ##601
22f7c                 | ' if x>1024
22f7c     02 00 00 FF 
22f80     01 14 56 F2 | 	cmps	arg02, ##1025 wc
22f84                 | '   x:=1024
22f84     0A 14 C6 39 |  if_ae	decod	arg02, #10
22f88                 | ' word[@spr1ptr+12*num+4]:=x
22f88     11 E5 05 F1 | 	add	objptr, #273
22f8c     F2 00 02 F6 | 	mov	_var01, objptr
22f90     09 03 02 F6 | 	mov	_var02, arg01
22f94     01 02 66 F0 | 	shl	_var02, #1
22f98     09 03 02 F1 | 	add	_var02, arg01
22f9c     02 02 66 F0 | 	shl	_var02, #2
22fa0     01 01 02 F1 | 	add	_var01, _var02
22fa4     04 00 06 F1 | 	add	_var01, #4
22fa8     00 15 52 FC | 	wrword	arg02, _var01
22fac                 | ' word[@spr1ptr+12*num+6]:=y
22fac     F2 00 02 F6 | 	mov	_var01, objptr
22fb0     09 03 02 F6 | 	mov	_var02, arg01
22fb4     01 02 66 F0 | 	shl	_var02, #1
22fb8     09 03 02 F1 | 	add	_var02, arg01
22fbc     02 02 66 F0 | 	shl	_var02, #2
22fc0     01 01 02 F1 | 	add	_var01, _var02
22fc4     06 00 06 F1 | 	add	_var01, #6
22fc8     00 17 52 FC | 	wrword	arg03, _var01
22fcc     11 E5 85 F1 | 	sub	objptr, #273
22fd0                 | _hg010b_spin2_setspritepos_ret
22fd0     2D 00 64 FD | 	ret
22fd4                 | 
22fd4                 | ' 
22fd4                 | ' pub setspritesize(num,w,h)
22fd4                 | _hg010b_spin2_setspritesize
22fd4                 | ' word[@spr1ptr+12*num+8]:=w
22fd4     11 E5 05 F1 | 	add	objptr, #273
22fd8     F2 00 02 F6 | 	mov	_var01, objptr
22fdc     09 03 02 F6 | 	mov	_var02, arg01
22fe0     01 02 66 F0 | 	shl	_var02, #1
22fe4     09 03 02 F1 | 	add	_var02, arg01
22fe8     02 02 66 F0 | 	shl	_var02, #2
22fec     01 01 02 F1 | 	add	_var01, _var02
22ff0     08 00 06 F1 | 	add	_var01, #8
22ff4     00 15 52 FC | 	wrword	arg02, _var01
22ff8                 | ' word[@spr1ptr+12*num+10]:=h
22ff8     F2 00 02 F6 | 	mov	_var01, objptr
22ffc     09 03 02 F6 | 	mov	_var02, arg01
23000     01 02 66 F0 | 	shl	_var02, #1
23004     09 03 02 F1 | 	add	_var02, arg01
23008     02 02 66 F0 | 	shl	_var02, #2
2300c     01 01 02 F1 | 	add	_var01, _var02
23010     0A 00 06 F1 | 	add	_var01, #10
23014     00 17 52 FC | 	wrword	arg03, _var01
23018     11 E5 85 F1 | 	sub	objptr, #273
2301c                 | _hg010b_spin2_setspritesize_ret
2301c     2D 00 64 FD | 	ret
23020                 | 
23020                 | ' 
23020                 | ' 
23020                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
23020                 | ' 
23020                 | ' 
23020                 | ' pub putpixel(x,y,c)
23020                 | _hg010b_spin2_putpixel
23020     04 4A 05 F6 | 	mov	COUNT_, #4
23024     A8 00 A0 FD | 	call	#pushregs_
23028     09 27 02 F6 | 	mov	local01, arg01
2302c                 | ' 
2302c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
2302c     00 28 06 F6 | 	mov	local02, #0
23030     00 26 56 F2 | 	cmps	local01, #0 wc
23034     01 28 66 36 |  if_ae	neg	local02, #1
23038     E9 E4 05 F1 | 	add	objptr, #233
2303c     F2 1A 02 FB | 	rdlong	arg05, objptr
23040     02 1A 66 F0 | 	shl	arg05, #2
23044     0D 27 52 F2 | 	cmps	local01, arg05 wc
23048     15 2B A2 F1 | 	subx	local03, local03
2304c     15 29 02 F5 | 	and	local02, local03
23050     00 2A 06 F6 | 	mov	local03, #0
23054     00 14 56 F2 | 	cmps	arg02, #0 wc
23058     01 2A 66 36 |  if_ae	neg	local03, #1
2305c     15 29 02 F5 | 	and	local02, local03
23060     04 E4 85 F1 | 	sub	objptr, #4
23064     F2 2A 02 FB | 	rdlong	local03, objptr
23068     E5 E4 85 F1 | 	sub	objptr, #229
2306c     15 15 52 F2 | 	cmps	arg02, local03 wc
23070     16 2D A2 F1 | 	subx	local04, local04
23074     16 29 CA F7 | 	test	local02, local04 wz
23078     48 00 90 AD |  if_e	jmp	#LR__2730
2307c     DD E4 05 F1 | 	add	objptr, #221
23080     F2 12 02 FB | 	rdlong	arg01, objptr
23084     14 E4 05 F1 | 	add	objptr, #20
23088     F2 2C 02 FB | 	rdlong	local04, objptr
2308c     02 2C 66 F0 | 	shl	local04, #2
23090     0A 2D 02 FD | 	qmul	local04, arg02
23094                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
23094     0B 15 02 F6 | 	mov	arg02, arg03
23098     01 16 06 F6 | 	mov	arg03, #1
2309c     00 18 06 F6 | 	mov	arg04, #0
230a0     01 1A 06 F6 | 	mov	arg05, #1
230a4     0A 00 00 FF 
230a8     DB E5 05 F1 | 	add	objptr, ##5595
230ac     18 2C 62 FD | 	getqx	local04
230b0     13 2D 02 F1 | 	add	local04, local01
230b4     16 13 02 F1 | 	add	arg01, local04
230b8     6C 1D B0 FD | 	call	#_psram_spin2_fill
230bc     0B 00 00 FF 
230c0     CC E4 85 F1 | 	sub	objptr, ##5836
230c4                 | LR__2730
230c4     A7 F0 03 F6 | 	mov	ptra, fp
230c8     B2 00 A0 FD | 	call	#popregs_
230cc                 | _hg010b_spin2_putpixel_ret
230cc     2D 00 64 FD | 	ret
230d0                 | 
230d0                 | ' 
230d0                 | ' pub putpixel2(x,y,c)
230d0                 | _hg010b_spin2_putpixel2
230d0     02 4A 05 F6 | 	mov	COUNT_, #2
230d4     A8 00 A0 FD | 	call	#pushregs_
230d8     DD E4 05 F1 | 	add	objptr, #221
230dc     F2 26 02 FB | 	rdlong	local01, objptr
230e0     14 E4 05 F1 | 	add	objptr, #20
230e4     F2 1A 02 FB | 	rdlong	arg05, objptr
230e8     02 1A 66 F0 | 	shl	arg05, #2
230ec     0A 1B 02 FD | 	qmul	arg05, arg02
230f0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
230f0     0B 15 02 F6 | 	mov	arg02, arg03
230f4     01 16 06 F6 | 	mov	arg03, #1
230f8     00 18 06 F6 | 	mov	arg04, #0
230fc     01 1A 06 F6 | 	mov	arg05, #1
23100     0A 00 00 FF 
23104     DB E5 05 F1 | 	add	objptr, ##5595
23108     18 28 62 FD | 	getqx	local02
2310c     09 29 02 F1 | 	add	local02, arg01
23110     14 27 02 F1 | 	add	local01, local02
23114     13 13 02 F6 | 	mov	arg01, local01
23118     0C 1D B0 FD | 	call	#_psram_spin2_fill
2311c     0B 00 00 FF 
23120     CC E4 85 F1 | 	sub	objptr, ##5836
23124     A7 F0 03 F6 | 	mov	ptra, fp
23128     B2 00 A0 FD | 	call	#popregs_
2312c                 | _hg010b_spin2_putpixel2_ret
2312c     2D 00 64 FD | 	ret
23130                 | 
23130                 | ' 
23130                 | ' pub getpixel2(x,y): c 
23130                 | _hg010b_spin2_getpixel2
23130     02 4A 05 F6 | 	mov	COUNT_, #2
23134     A8 00 A0 FD | 	call	#pushregs_
23138     0C F0 07 F1 | 	add	ptra, #12
2313c     04 4E 05 F1 | 	add	fp, #4
23140     A7 12 62 FC | 	wrlong	arg01, fp
23144     04 4E 05 F1 | 	add	fp, #4
23148     A7 14 62 FC | 	wrlong	arg02, fp
2314c     08 4E 85 F1 | 	sub	fp, #8
23150     A7 00 68 FC | 	wrlong	#0, fp
23154     A7 12 02 F6 | 	mov	arg01, fp
23158     DD E4 05 F1 | 	add	objptr, #221
2315c     F2 14 02 FB | 	rdlong	arg02, objptr
23160     14 E4 05 F1 | 	add	objptr, #20
23164     F2 16 02 FB | 	rdlong	arg03, objptr
23168     02 16 66 F0 | 	shl	arg03, #2
2316c     08 4E 05 F1 | 	add	fp, #8
23170     A7 FA 01 FB | 	rdlong	result1, fp
23174     FD 16 02 FD | 	qmul	arg03, result1
23178                 | ' 
23178                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
23178     04 4E 85 F1 | 	sub	fp, #4
2317c     A7 26 02 FB | 	rdlong	local01, fp
23180     04 4E 85 F1 | 	sub	fp, #4
23184     01 16 06 F6 | 	mov	arg03, #1
23188     0A 00 00 FF 
2318c     DB E5 05 F1 | 	add	objptr, ##5595
23190     18 28 62 FD | 	getqx	local02
23194     13 29 02 F1 | 	add	local02, local01
23198     14 15 02 F1 | 	add	arg02, local02
2319c     50 1B B0 FD | 	call	#_psram_spin2_read1
231a0     0B 00 00 FF 
231a4     CC E4 85 F1 | 	sub	objptr, ##5836
231a8                 | ' return c
231a8     A7 FA 01 FB | 	rdlong	result1, fp
231ac     A7 F0 03 F6 | 	mov	ptra, fp
231b0     B2 00 A0 FD | 	call	#popregs_
231b4                 | _hg010b_spin2_getpixel2_ret
231b4     2D 00 64 FD | 	ret
231b8                 | 
231b8                 | '   
231b8                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
231b8                 | ' 
231b8                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
231b8                 | _hg010b_spin2_fastline
231b8     02 4A 05 F6 | 	mov	COUNT_, #2
231bc     A8 00 A0 FD | 	call	#pushregs_
231c0     09 27 02 F6 | 	mov	local01, arg01
231c4     0A 29 02 F6 | 	mov	local02, arg02
231c8                 | ' 
231c8                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
231c8     00 16 56 F2 | 	cmps	arg03, #0 wc
231cc     F4 00 90 CD |  if_b	jmp	#LR__2740
231d0     01 00 00 FF 
231d4     2A E4 05 F1 | 	add	objptr, ##554
231d8     F2 1A 02 FB | 	rdlong	arg05, objptr
231dc     01 00 00 FF 
231e0     2A E4 85 F1 | 	sub	objptr, ##554
231e4     0D 17 52 F2 | 	cmps	arg03, arg05 wc
231e8     D8 00 90 3D |  if_ae	jmp	#LR__2740
231ec     00 26 56 F2 | 	cmps	local01, #0 wc
231f0     00 28 56 C2 |  if_b	cmps	local02, #0 wc
231f4     CC 00 90 CD |  if_b	jmp	#LR__2740
231f8     01 00 00 FF 
231fc     26 E4 05 F1 | 	add	objptr, ##550
23200     F2 1A 02 FB | 	rdlong	arg05, objptr
23204     01 00 00 FF 
23208     26 E4 85 F1 | 	sub	objptr, ##550
2320c     0D 27 5A F2 | 	cmps	local01, arg05 wcz
23210     01 00 00 1F 
23214     26 E4 05 11 |  if_a	add	objptr, ##550
23218     F2 12 02 1B |  if_a	rdlong	arg01, objptr
2321c     01 00 00 1F 
23220     26 E4 85 11 |  if_a	sub	objptr, ##550
23224     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
23228                 | '   return
23228     98 00 90 1D |  if_a	jmp	#LR__2740
2322c     14 27 5A F2 | 	cmps	local01, local02 wcz
23230     13 1B 02 16 |  if_a	mov	arg05, local01
23234     14 27 02 16 |  if_a	mov	local01, local02
23238     0D 29 02 16 |  if_a	mov	local02, arg05
2323c     00 26 56 F2 | 	cmps	local01, #0 wc
23240     00 26 06 C6 |  if_b	mov	local01, #0
23244     01 00 00 FF 
23248     26 E4 05 F1 | 	add	objptr, ##550
2324c     F2 1A 02 FB | 	rdlong	arg05, objptr
23250     01 00 00 FF 
23254     26 E4 85 F1 | 	sub	objptr, ##550
23258     0D 29 52 F2 | 	cmps	local02, arg05 wc
2325c     01 00 00 3F 
23260     26 E4 05 31 |  if_ae	add	objptr, ##550
23264     F2 28 02 3B |  if_ae	rdlong	local02, objptr
23268     01 00 00 3F 
2326c     26 E4 85 31 |  if_ae	sub	objptr, ##550
23270     DD E4 05 F1 | 	add	objptr, #221
23274     F2 12 02 FB | 	rdlong	arg01, objptr
23278     14 E4 05 F1 | 	add	objptr, #20
2327c     F2 1A 02 FB | 	rdlong	arg05, objptr
23280     02 1A 66 F0 | 	shl	arg05, #2
23284     0B 1B 02 FD | 	qmul	arg05, arg03
23288                 | ' if x1>x2
23288                 | '   x1,x2:=x2,x1
23288                 | ' if x1<0 
23288                 | '   x1:=0
23288                 | ' if x2>=xres
23288                 | '   x2:=xres-1  
23288     01 28 86 31 |  if_ae	sub	local02, #1
2328c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
2328c     01 16 06 F6 | 	mov	arg03, #1
23290     14 17 02 F1 | 	add	arg03, local02
23294     13 17 82 F1 | 	sub	arg03, local01
23298     0C 15 02 F6 | 	mov	arg02, arg04
2329c     00 18 06 F6 | 	mov	arg04, #0
232a0     01 1A 06 F6 | 	mov	arg05, #1
232a4     0A 00 00 FF 
232a8     DB E5 05 F1 | 	add	objptr, ##5595
232ac     18 28 62 FD | 	getqx	local02
232b0     13 29 02 F1 | 	add	local02, local01
232b4     14 13 02 F1 | 	add	arg01, local02
232b8     6C 1B B0 FD | 	call	#_psram_spin2_fill
232bc     0B 00 00 FF 
232c0     CC E4 85 F1 | 	sub	objptr, ##5836
232c4                 | LR__2740
232c4     A7 F0 03 F6 | 	mov	ptra, fp
232c8     B2 00 A0 FD | 	call	#popregs_
232cc                 | _hg010b_spin2_fastline_ret
232cc     2D 00 64 FD | 	ret
232d0                 | 
232d0                 | ' 
232d0                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
232d0                 | _hg010b_spin2_draw
232d0     0E 4A 05 F6 | 	mov	COUNT_, #14
232d4     A8 00 A0 FD | 	call	#pushregs_
232d8     09 27 02 F6 | 	mov	local01, arg01
232dc     0A 29 02 F6 | 	mov	local02, arg02
232e0     0B 2B 02 F6 | 	mov	local03, arg03
232e4     0C 2D 02 F6 | 	mov	local04, arg04
232e8     0D 2F 02 F6 | 	mov	local05, arg05
232ec                 | ' 
232ec                 | ' if (y1==y2)
232ec     16 29 0A F2 | 	cmp	local02, local04 wz
232f0     18 00 90 5D |  if_ne	jmp	#LR__2750
232f4                 | '   fastline(x1,x2,y1,c)
232f4     13 13 02 F6 | 	mov	arg01, local01
232f8     15 15 02 F6 | 	mov	arg02, local03
232fc     14 17 02 F6 | 	mov	arg03, local02
23300     17 19 02 F6 | 	mov	arg04, local05
23304     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
23308     F8 00 90 FD | 	jmp	#LR__2756
2330c                 | LR__2750
2330c                 | ' else  
2330c                 | '   x:=x1
2330c     13 31 02 F6 | 	mov	local06, local01
23310                 | '   y:=y1
23310     14 33 02 F6 | 	mov	local07, local02
23314                 | ' 
23314                 | '   if (x1<x2) 
23314     15 27 52 F2 | 	cmps	local01, local03 wc
23318                 | '     xi:=1
23318     01 34 06 C6 |  if_b	mov	local08, #1
2331c                 | '     dx:=x2-x1
2331c     15 37 02 C6 |  if_b	mov	local09, local03
23320     13 37 82 C1 |  if_b	sub	local09, local01
23324                 | '   else
23324                 | '     xi:=-1
23324     01 34 66 36 |  if_ae	neg	local08, #1
23328                 | '     dx:=x1-x2
23328     15 27 82 31 |  if_ae	sub	local01, local03
2332c     13 37 02 36 |  if_ae	mov	local09, local01
23330                 | '   
23330                 | '   if (y1<y2) 
23330     16 29 52 F2 | 	cmps	local02, local04 wc
23334                 | '     yi:=1
23334     01 38 06 C6 |  if_b	mov	local10, #1
23338                 | '     dy:=y2-y1
23338     16 3B 02 C6 |  if_b	mov	local11, local04
2333c     14 3B 82 C1 |  if_b	sub	local11, local02
23340                 | '   else
23340                 | '     yi:=-1
23340     01 38 66 36 |  if_ae	neg	local10, #1
23344                 | '     dy:=y1-y2
23344     16 29 82 31 |  if_ae	sub	local02, local04
23348     14 3B 02 36 |  if_ae	mov	local11, local02
2334c                 | ' 
2334c                 | '   putpixel(x,y,c)
2334c     17 17 02 F6 | 	mov	arg03, local05
23350     18 13 02 F6 | 	mov	arg01, local06
23354     19 15 02 F6 | 	mov	arg02, local07
23358     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
2335c                 | ' 
2335c                 | '   if (dx>dy)
2335c     1D 37 5A F2 | 	cmps	local09, local11 wcz
23360     50 00 90 ED |  if_be	jmp	#LR__2752
23364                 | '     ai:=(dy-dx)*2
23364     1D 3D 02 F6 | 	mov	local12, local11
23368     1B 3D 82 F1 | 	sub	local12, local09
2336c     01 3C 66 F0 | 	shl	local12, #1
23370                 | '     bi:=dy*2
23370     01 3A 66 F0 | 	shl	local11, #1
23374     1D 3F 02 F6 | 	mov	local13, local11
23378                 | '     d:= bi-dx
23378     1F 41 02 F6 | 	mov	local14, local13
2337c     1B 41 82 F1 | 	sub	local14, local09
23380                 | '     repeat while (x<>x2) 
23380                 | LR__2751
23380     15 31 0A F2 | 	cmp	local06, local03 wz
23384     7C 00 90 AD |  if_e	jmp	#LR__2755
23388                 | '       if (d>=0) 
23388     00 40 56 F2 | 	cmps	local14, #0 wc
2338c                 | '         x+=xi
2338c     1A 31 02 31 |  if_ae	add	local06, local08
23390                 | '         y+=yi
23390     1C 33 02 31 |  if_ae	add	local07, local10
23394                 | '         d+=ai
23394     1E 41 02 31 |  if_ae	add	local14, local12
23398                 | '       else
23398                 | '         d+=bi
23398     1F 41 02 C1 |  if_b	add	local14, local13
2339c                 | '         x+=xi
2339c     1A 31 02 C1 |  if_b	add	local06, local08
233a0                 | '       putpixel(x,y,c)
233a0     18 13 02 F6 | 	mov	arg01, local06
233a4     19 15 02 F6 | 	mov	arg02, local07
233a8     17 17 02 F6 | 	mov	arg03, local05
233ac     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
233b0     CC FF 9F FD | 	jmp	#LR__2751
233b4                 | LR__2752
233b4                 | '   else
233b4                 | '     ai:=(dx-dy)*2
233b4     1B 3D 02 F6 | 	mov	local12, local09
233b8     1D 3D 82 F1 | 	sub	local12, local11
233bc     01 3C 66 F0 | 	shl	local12, #1
233c0                 | '     bi:=dx*2
233c0     01 36 66 F0 | 	shl	local09, #1
233c4     1B 3F 02 F6 | 	mov	local13, local09
233c8                 | '     d:=bi-dy
233c8     1F 41 02 F6 | 	mov	local14, local13
233cc     1D 41 82 F1 | 	sub	local14, local11
233d0                 | '     repeat while (y<>y2)
233d0                 | LR__2753
233d0     16 33 0A F2 | 	cmp	local07, local04 wz
233d4     2C 00 90 AD |  if_e	jmp	#LR__2754
233d8                 | '       if (d>=0)
233d8     00 40 56 F2 | 	cmps	local14, #0 wc
233dc                 | '         x+=xi
233dc     1A 31 02 31 |  if_ae	add	local06, local08
233e0                 | '         y+=yi
233e0     1C 33 02 31 |  if_ae	add	local07, local10
233e4                 | '         d+=ai
233e4     1E 41 02 31 |  if_ae	add	local14, local12
233e8                 | '       else
233e8                 | '         d+=bi
233e8     1F 41 02 C1 |  if_b	add	local14, local13
233ec                 | '         y+=yi
233ec     1C 33 02 C1 |  if_b	add	local07, local10
233f0                 | '       putpixel(x, y,c)
233f0     18 13 02 F6 | 	mov	arg01, local06
233f4     19 15 02 F6 | 	mov	arg02, local07
233f8     17 17 02 F6 | 	mov	arg03, local05
233fc     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
23400     CC FF 9F FD | 	jmp	#LR__2753
23404                 | LR__2754
23404                 | LR__2755
23404                 | LR__2756
23404     A7 F0 03 F6 | 	mov	ptra, fp
23408     B2 00 A0 FD | 	call	#popregs_
2340c                 | _hg010b_spin2_draw_ret
2340c     2D 00 64 FD | 	ret
23410                 | 
23410                 | '  
23410                 | ' pub fillpush(val) 
23410                 | _hg010b_spin2_fillpush
23410                 | ' fillstack[fillptr]:=val
23410     0B 00 00 FF 
23414     BA E4 05 F1 | 	add	objptr, ##5818
23418     F2 00 02 FB | 	rdlong	_var01, objptr
2341c     02 00 66 F0 | 	shl	_var01, #2
23420     0A 00 00 FF 
23424     00 E4 85 F1 | 	sub	objptr, ##5120
23428     F2 00 02 F1 | 	add	_var01, objptr
2342c     00 13 62 FC | 	wrlong	arg01, _var01
23430                 | ' fillptr+=1   
23430     0A 00 00 FF 
23434     00 E4 05 F1 | 	add	objptr, ##5120
23438     F2 00 02 FB | 	rdlong	_var01, objptr
2343c     01 00 06 F1 | 	add	_var01, #1
23440     F2 00 62 FC | 	wrlong	_var01, objptr
23444     0B 00 00 FF 
23448     BA E4 85 F1 | 	sub	objptr, ##5818
2344c                 | _hg010b_spin2_fillpush_ret
2344c     2D 00 64 FD | 	ret
23450                 | 
23450                 | ' 
23450                 | '     
23450                 | ' pub fillpop() : val
23450                 | _hg010b_spin2_fillpop
23450                 | ' 
23450                 | ' fillptr-=1
23450     0B 00 00 FF 
23454     BA E4 05 F1 | 	add	objptr, ##5818
23458     F2 FA 01 FB | 	rdlong	result1, objptr
2345c     01 FA 85 F1 | 	sub	result1, #1
23460     F2 FA 61 FC | 	wrlong	result1, objptr
23464                 | ' if fillptr<0
23464     0B 00 00 FF 
23468     BA E4 85 F1 | 	sub	objptr, ##5818
2346c     00 FA 55 F2 | 	cmps	result1, #0 wc
23470                 | '   fillptr:=0
23470     0B 00 00 CF 
23474     BA E4 05 C1 |  if_b	add	objptr, ##5818
23478     F2 00 68 CC |  if_b	wrlong	#0, objptr
2347c     0B 00 00 CF 
23480     BA E4 85 C1 |  if_b	sub	objptr, ##5818
23484                 | '   val:=-12345
23484     E7 FF 7F CF 
23488     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
2348c     28 00 90 CD |  if_b	jmp	#LR__2760
23490                 | ' else 
23490                 | '   val:=fillstack[fillptr]
23490     0B 00 00 FF 
23494     BA E4 05 F1 | 	add	objptr, ##5818
23498     F2 00 02 FB | 	rdlong	_var01, objptr
2349c     02 00 66 F0 | 	shl	_var01, #2
234a0     0A 00 00 FF 
234a4     00 E4 85 F1 | 	sub	objptr, ##5120
234a8     F2 00 02 F1 | 	add	_var01, objptr
234ac     00 01 02 FB | 	rdlong	_var01, _var01
234b0     01 00 00 FF 
234b4     BA E4 85 F1 | 	sub	objptr, ##698
234b8                 | LR__2760
234b8                 | ' return val
234b8     00 FB 01 F6 | 	mov	result1, _var01
234bc                 | _hg010b_spin2_fillpop_ret
234bc     2D 00 64 FD | 	ret
234c0                 | 
234c0                 | ' 
234c0                 | '       
234c0                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
234c0                 | _hg010b_spin2_fill
234c0     0B 4A 05 F6 | 	mov	COUNT_, #11
234c4     A8 00 A0 FD | 	call	#pushregs_
234c8                 | ' 
234c8                 | ' newcolor:=newcolor & 255
234c8     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
234cc                 | ' oldcolor:=oldcolor & 255
234cc     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
234d0                 | ' 
234d0                 | ' if (oldcolor == newcolor) 
234d0     13 29 0A F2 | 	cmp	local02, local01 wz
234d4                 | '   return
234d4     70 02 90 AD |  if_e	jmp	#LR__2779
234d8                 | ' 
234d8                 | ' fillptr:=0
234d8     0B 00 00 FF 
234dc     BA E4 05 F1 | 	add	objptr, ##5818
234e0     F2 00 68 FC | 	wrlong	#0, objptr
234e4                 | ' fillmax:=0
234e4     04 E4 05 F1 | 	add	objptr, #4
234e8     F2 00 68 FC | 	wrlong	#0, objptr
234ec     0B 00 00 FF 
234f0     BE E4 85 F1 | 	sub	objptr, ##5822
234f4                 | ' fillpush(x)
234f4     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
234f8                 | ' fillpush(y)
234f8     0A 13 02 F6 | 	mov	arg01, arg02
234fc     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
23500                 | ' y:=fillpop()
23500     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
23504     FD 2A 02 F6 | 	mov	local03, result1
23508                 | ' x:=fillpop()
23508     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
2350c     FD 2C 02 F6 | 	mov	local04, result1
23510                 | ' 'pinhigh(38)
23510                 | ' repeat while (x>-1)       
23510                 | LR__2770
23510     00 2C 56 F2 | 	cmps	local04, #0 wc
23514     30 02 90 CD |  if_b	jmp	#LR__2778
23518                 | '  ' pintoggle(39)
23518                 | '   x1 := x
23518     16 2F 02 F6 | 	mov	local05, local04
2351c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
2351c                 | LR__2771
2351c     00 30 06 F6 | 	mov	local06, #0
23520     00 32 06 F6 | 	mov	local07, #0
23524     00 2E 56 F2 | 	cmps	local05, #0 wc
23528     01 32 66 36 |  if_ae	neg	local07, #1
2352c     00 32 0E F2 | 	cmp	local07, #0 wz
23530     00 30 26 56 |  if_ne	not	local06, #0
23534     00 34 06 F6 | 	mov	local08, #0
23538     00 36 06 F6 | 	mov	local09, #0
2353c     15 15 02 F6 | 	mov	arg02, local03
23540     17 13 02 F6 | 	mov	arg01, local05
23544     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
23548     14 FB 09 F2 | 	cmp	result1, local02 wz
2354c     00 36 26 A6 |  if_e	not	local09, #0
23550     00 36 0E F2 | 	cmp	local09, #0 wz
23554     00 34 26 56 |  if_ne	not	local08, #0
23558     1A 31 CA F7 | 	test	local06, local08 wz
2355c                 | '     x1--
2355c     01 2E 86 51 |  if_ne	sub	local05, #1
23560     B8 FF 9F 5D |  if_ne	jmp	#LR__2771
23564                 | '   x1++
23564     01 2E 06 F1 | 	add	local05, #1
23568                 | '   spanabove := 0
23568     00 38 06 F6 | 	mov	local10, #0
2356c                 | '   spanbelow := 0
2356c     00 3A 06 F6 | 	mov	local11, #0
23570                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
23570                 | LR__2772
23570     00 30 06 F6 | 	mov	local06, #0
23574     02 00 00 FF 
23578     00 2E 56 F2 | 	cmps	local05, ##1024 wc
2357c     00 30 26 C6 |  if_b	not	local06, #0
23580     00 34 06 F6 | 	mov	local08, #0
23584     00 36 06 F6 | 	mov	local09, #0
23588     15 15 02 F6 | 	mov	arg02, local03
2358c     17 13 02 F6 | 	mov	arg01, local05
23590     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
23594     14 FB 09 F2 | 	cmp	result1, local02 wz
23598     00 36 26 A6 |  if_e	not	local09, #0
2359c     00 36 0E F2 | 	cmp	local09, #0 wz
235a0     00 34 26 56 |  if_ne	not	local08, #0
235a4     1A 31 CA F7 | 	test	local06, local08 wz
235a8     88 01 90 AD |  if_e	jmp	#LR__2777
235ac                 | '     putpixel2 (x1,y, newcolor & 255)
235ac     13 17 E2 F8 | 	getbyte	arg03, local01, #0
235b0     17 13 02 F6 | 	mov	arg01, local05
235b4     15 15 02 F6 | 	mov	arg02, local03
235b8     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
235bc                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
235bc     00 30 06 F6 | 	mov	local06, #0
235c0     00 32 06 F6 | 	mov	local07, #0
235c4     00 38 0E F2 | 	cmp	local10, #0 wz
235c8     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
235cc     01 32 66 26 |  if_nc_and_z	neg	local07, #1
235d0     00 32 0E F2 | 	cmp	local07, #0 wz
235d4     00 30 26 56 |  if_ne	not	local06, #0
235d8     00 34 06 F6 | 	mov	local08, #0
235dc     00 36 06 F6 | 	mov	local09, #0
235e0     15 15 02 F6 | 	mov	arg02, local03
235e4     01 14 86 F1 | 	sub	arg02, #1
235e8     17 13 02 F6 | 	mov	arg01, local05
235ec     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
235f0     14 FB 09 F2 | 	cmp	result1, local02 wz
235f4     00 36 26 A6 |  if_e	not	local09, #0
235f8     00 36 0E F2 | 	cmp	local09, #0 wz
235fc     00 34 26 56 |  if_ne	not	local08, #0
23600     1A 31 CA F7 | 	test	local06, local08 wz
23604     1C 00 90 AD |  if_e	jmp	#LR__2773
23608                 | '       fillpush(x1)
23608     17 13 02 F6 | 	mov	arg01, local05
2360c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
23610                 | '       fillpush(y-1)
23610     15 13 02 F6 | 	mov	arg01, local03
23614     01 12 86 F1 | 	sub	arg01, #1
23618     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
2361c                 | '       spanabove := 1 
2361c     01 38 06 F6 | 	mov	local10, #1
23620     4C 00 90 FD | 	jmp	#LR__2774
23624                 | LR__2773
23624                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
23624     00 30 06 F6 | 	mov	local06, #0
23628     00 32 06 F6 | 	mov	local07, #0
2362c     00 38 0E F2 | 	cmp	local10, #0 wz
23630     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
23634     01 32 66 16 |  if_a	neg	local07, #1
23638     00 32 0E F2 | 	cmp	local07, #0 wz
2363c     00 30 26 56 |  if_ne	not	local06, #0
23640     00 34 06 F6 | 	mov	local08, #0
23644     00 36 06 F6 | 	mov	local09, #0
23648     15 15 02 F6 | 	mov	arg02, local03
2364c     01 14 86 F1 | 	sub	arg02, #1
23650     17 13 02 F6 | 	mov	arg01, local05
23654     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
23658     14 FB 09 F2 | 	cmp	result1, local02 wz
2365c     00 36 26 56 |  if_ne	not	local09, #0
23660     00 36 0E F2 | 	cmp	local09, #0 wz
23664     00 34 26 56 |  if_ne	not	local08, #0
23668     1A 31 CA F7 | 	test	local06, local08 wz
2366c                 | '       spanabove := 0 
2366c     00 38 06 56 |  if_ne	mov	local10, #0
23670                 | LR__2774
23670                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
23670     00 30 06 F6 | 	mov	local06, #0
23674     00 32 06 F6 | 	mov	local07, #0
23678     00 3A 0E F2 | 	cmp	local11, #0 wz
2367c     01 00 00 AF 
23680     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
23684     01 32 66 86 |  if_c_and_z	neg	local07, #1
23688     00 32 0E F2 | 	cmp	local07, #0 wz
2368c     00 30 26 56 |  if_ne	not	local06, #0
23690     00 34 06 F6 | 	mov	local08, #0
23694     00 36 06 F6 | 	mov	local09, #0
23698     15 15 02 F6 | 	mov	arg02, local03
2369c     01 14 06 F1 | 	add	arg02, #1
236a0     17 13 02 F6 | 	mov	arg01, local05
236a4     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
236a8     14 FB 09 F2 | 	cmp	result1, local02 wz
236ac     00 36 26 A6 |  if_e	not	local09, #0
236b0     00 36 0E F2 | 	cmp	local09, #0 wz
236b4     00 34 26 56 |  if_ne	not	local08, #0
236b8     1A 31 CA F7 | 	test	local06, local08 wz
236bc     1C 00 90 AD |  if_e	jmp	#LR__2775
236c0                 | '       fillpush(x1)
236c0     17 13 02 F6 | 	mov	arg01, local05
236c4     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
236c8                 | '       fillpush(y + 1)
236c8     15 13 02 F6 | 	mov	arg01, local03
236cc     01 12 06 F1 | 	add	arg01, #1
236d0     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
236d4                 | '       spanBelow := 1
236d4     01 3A 06 F6 | 	mov	local11, #1
236d8     50 00 90 FD | 	jmp	#LR__2776
236dc                 | LR__2775
236dc                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
236dc     00 30 06 F6 | 	mov	local06, #0
236e0     00 32 06 F6 | 	mov	local07, #0
236e4     00 3A 0E F2 | 	cmp	local11, #0 wz
236e8     01 00 00 5F 
236ec     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
236f0     01 32 66 46 |  if_c_and_nz	neg	local07, #1
236f4     00 32 0E F2 | 	cmp	local07, #0 wz
236f8     00 30 26 56 |  if_ne	not	local06, #0
236fc     00 34 06 F6 | 	mov	local08, #0
23700     00 36 06 F6 | 	mov	local09, #0
23704     15 15 02 F6 | 	mov	arg02, local03
23708     01 14 06 F1 | 	add	arg02, #1
2370c     17 13 02 F6 | 	mov	arg01, local05
23710     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
23714     14 FB 09 F2 | 	cmp	result1, local02 wz
23718     00 36 26 56 |  if_ne	not	local09, #0
2371c     00 36 0E F2 | 	cmp	local09, #0 wz
23720     00 34 26 56 |  if_ne	not	local08, #0
23724     1A 31 CA F7 | 	test	local06, local08 wz
23728                 | '       spanbelow := 0
23728     00 3A 06 56 |  if_ne	mov	local11, #0
2372c                 | LR__2776
2372c                 | '     x1++
2372c     01 2E 06 F1 | 	add	local05, #1
23730     3C FE 9F FD | 	jmp	#LR__2772
23734                 | LR__2777
23734                 | '   y:=fillpop()
23734     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
23738     FD 2A 02 F6 | 	mov	local03, result1
2373c                 | '   x:=fillpop()
2373c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
23740     FD 2C 02 F6 | 	mov	local04, result1
23744     C8 FD 9F FD | 	jmp	#LR__2770
23748                 | LR__2778
23748                 | LR__2779
23748     A7 F0 03 F6 | 	mov	ptra, fp
2374c     B2 00 A0 FD | 	call	#popregs_
23750                 | _hg010b_spin2_fill_ret
23750     2D 00 64 FD | 	ret
23754                 | 
23754                 | ' 'pinlow(38)    
23754                 | ' 
23754                 | ' '-- A filled circle -----------------------------------------------------
23754                 | ' 
23754                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
23754                 | _hg010b_spin2_fcircle
23754     08 4A 05 F6 | 	mov	COUNT_, #8
23758     A8 00 A0 FD | 	call	#pushregs_
2375c     0B 27 02 F6 | 	mov	local01, arg03
23760     FF FF 7F FF 
23764     FE 27 06 FD | 	qmul	local01, ##-2
23768     09 29 02 F6 | 	mov	local02, arg01
2376c     0A 2B 02 F6 | 	mov	local03, arg02
23770     0C 2D 02 F6 | 	mov	local04, arg04
23774                 | ' 
23774                 | ' d:=5-4*r
23774     13 19 02 F6 | 	mov	arg04, local01
23778     02 18 66 F0 | 	shl	arg04, #2
2377c     05 2E 06 F6 | 	mov	local05, #5
23780     0C 2F 82 F1 | 	sub	local05, arg04
23784                 | ' x:=0
23784     00 30 06 F6 | 	mov	local06, #0
23788                 | ' y:=r
23788                 | ' da:=(-2*r+5)*4
23788                 | ' db:=3*4
23788     0C 32 06 F6 | 	mov	local07, #12
2378c                 | ' repeat while (x<=y) 
2378c     18 34 62 FD | 	getqx	local08
23790     05 34 06 F1 | 	add	local08, #5
23794     02 34 66 F0 | 	shl	local08, #2
23798                 | LR__2780
23798     13 31 5A F2 | 	cmps	local06, local01 wcz
2379c     B4 00 90 1D |  if_a	jmp	#LR__2782
237a0                 | '   fastline(x0-x,x0+x,y0-y,c)
237a0     14 13 02 F6 | 	mov	arg01, local02
237a4     18 13 82 F1 | 	sub	arg01, local06
237a8     14 15 02 F6 | 	mov	arg02, local02
237ac     18 15 02 F1 | 	add	arg02, local06
237b0     15 17 02 F6 | 	mov	arg03, local03
237b4     13 17 82 F1 | 	sub	arg03, local01
237b8     16 19 02 F6 | 	mov	arg04, local04
237bc     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
237c0                 | '   fastline(x0-x,x0+x,y0+y,c)
237c0     14 13 02 F6 | 	mov	arg01, local02
237c4     18 13 82 F1 | 	sub	arg01, local06
237c8     14 15 02 F6 | 	mov	arg02, local02
237cc     18 15 02 F1 | 	add	arg02, local06
237d0     15 17 02 F6 | 	mov	arg03, local03
237d4     13 17 02 F1 | 	add	arg03, local01
237d8     16 19 02 F6 | 	mov	arg04, local04
237dc     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
237e0                 | '   fastline(x0-y,x0+y,y0-x,c)
237e0     14 13 02 F6 | 	mov	arg01, local02
237e4     13 13 82 F1 | 	sub	arg01, local01
237e8     14 15 02 F6 | 	mov	arg02, local02
237ec     13 15 02 F1 | 	add	arg02, local01
237f0     15 17 02 F6 | 	mov	arg03, local03
237f4     18 17 82 F1 | 	sub	arg03, local06
237f8     16 19 02 F6 | 	mov	arg04, local04
237fc     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
23800                 | '   fastline(x0-y,x0+y,y0+x,c)
23800     14 13 02 F6 | 	mov	arg01, local02
23804     13 13 82 F1 | 	sub	arg01, local01
23808     14 15 02 F6 | 	mov	arg02, local02
2380c     13 15 02 F1 | 	add	arg02, local01
23810     15 17 02 F6 | 	mov	arg03, local03
23814     18 17 02 F1 | 	add	arg03, local06
23818     16 19 02 F6 | 	mov	arg04, local04
2381c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
23820                 | '   if d>0 
23820     01 2E 56 F2 | 	cmps	local05, #1 wc
23824     18 00 90 CD |  if_b	jmp	#LR__2781
23828                 | '     d+=da
23828     1A 2F 02 F1 | 	add	local05, local08
2382c                 | '     y-=1
2382c     01 26 86 F1 | 	sub	local01, #1
23830                 | '     x+=1
23830     01 30 06 F1 | 	add	local06, #1
23834                 | '     da+=4*4
23834     10 34 06 F1 | 	add	local08, #16
23838                 | '     db+=2*4
23838     08 32 06 F1 | 	add	local07, #8
2383c     58 FF 9F FD | 	jmp	#LR__2780
23840                 | LR__2781
23840                 | '   else
23840                 | '     d+=db
23840     19 2F 02 F1 | 	add	local05, local07
23844                 | '     x+=1
23844     01 30 06 F1 | 	add	local06, #1
23848                 | '     da+=2*4
23848     08 34 06 F1 | 	add	local08, #8
2384c                 | '     db+=2*4
2384c     08 32 06 F1 | 	add	local07, #8
23850     44 FF 9F FD | 	jmp	#LR__2780
23854                 | LR__2782
23854     A7 F0 03 F6 | 	mov	ptra, fp
23858     B2 00 A0 FD | 	call	#popregs_
2385c                 | _hg010b_spin2_fcircle_ret
2385c     2D 00 64 FD | 	ret
23860                 | 
23860                 | '  
23860                 | ' '-- A circle ------------------------------------------------------------ 
23860                 | '  
23860                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
23860                 | _hg010b_spin2_circle
23860     08 4A 05 F6 | 	mov	COUNT_, #8
23864     A8 00 A0 FD | 	call	#pushregs_
23868     0B 27 02 F6 | 	mov	local01, arg03
2386c     FF FF 7F FF 
23870     FE 27 06 FD | 	qmul	local01, ##-2
23874     09 29 02 F6 | 	mov	local02, arg01
23878     0A 2B 02 F6 | 	mov	local03, arg02
2387c     0C 2D 02 F6 | 	mov	local04, arg04
23880                 | ' 
23880                 | '  
23880                 | ' d:=5-4*r
23880     13 19 02 F6 | 	mov	arg04, local01
23884     02 18 66 F0 | 	shl	arg04, #2
23888     05 2E 06 F6 | 	mov	local05, #5
2388c     0C 2F 82 F1 | 	sub	local05, arg04
23890                 | ' x:=0
23890     00 30 06 F6 | 	mov	local06, #0
23894                 | ' y:=r
23894                 | ' da:=(-2*r+5)*4
23894                 | ' db:=3*4
23894     0C 32 06 F6 | 	mov	local07, #12
23898                 | ' repeat while (x<=y) 
23898     18 34 62 FD | 	getqx	local08
2389c     05 34 06 F1 | 	add	local08, #5
238a0     02 34 66 F0 | 	shl	local08, #2
238a4                 | LR__2790
238a4     13 31 5A F2 | 	cmps	local06, local01 wcz
238a8     F4 00 90 1D |  if_a	jmp	#LR__2792
238ac                 | '   putpixel(x0-x,y0-y,c)
238ac     14 13 02 F6 | 	mov	arg01, local02
238b0     18 13 82 F1 | 	sub	arg01, local06
238b4     15 15 02 F6 | 	mov	arg02, local03
238b8     13 15 82 F1 | 	sub	arg02, local01
238bc     16 17 02 F6 | 	mov	arg03, local04
238c0     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
238c4                 | '   putpixel(x0-x,y0+y,c)
238c4     14 13 02 F6 | 	mov	arg01, local02
238c8     18 13 82 F1 | 	sub	arg01, local06
238cc     15 15 02 F6 | 	mov	arg02, local03
238d0     13 15 02 F1 | 	add	arg02, local01
238d4     16 17 02 F6 | 	mov	arg03, local04
238d8     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
238dc                 | '   putpixel(x0+x,y0-y,c)
238dc     14 13 02 F6 | 	mov	arg01, local02
238e0     18 13 02 F1 | 	add	arg01, local06
238e4     15 15 02 F6 | 	mov	arg02, local03
238e8     13 15 82 F1 | 	sub	arg02, local01
238ec     16 17 02 F6 | 	mov	arg03, local04
238f0     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
238f4                 | '   putpixel(x0+x,y0+y,c)
238f4     14 13 02 F6 | 	mov	arg01, local02
238f8     18 13 02 F1 | 	add	arg01, local06
238fc     15 15 02 F6 | 	mov	arg02, local03
23900     13 15 02 F1 | 	add	arg02, local01
23904     16 17 02 F6 | 	mov	arg03, local04
23908     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
2390c                 | '   putpixel(x0-y,y0-x,c)
2390c     14 13 02 F6 | 	mov	arg01, local02
23910     13 13 82 F1 | 	sub	arg01, local01
23914     15 15 02 F6 | 	mov	arg02, local03
23918     18 15 82 F1 | 	sub	arg02, local06
2391c     16 17 02 F6 | 	mov	arg03, local04
23920     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
23924                 | '   putpixel(x0-y,y0+x,c)
23924     14 13 02 F6 | 	mov	arg01, local02
23928     13 13 82 F1 | 	sub	arg01, local01
2392c     15 15 02 F6 | 	mov	arg02, local03
23930     18 15 02 F1 | 	add	arg02, local06
23934     16 17 02 F6 | 	mov	arg03, local04
23938     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
2393c                 | '   putpixel(x0+y,y0-x,c)
2393c     14 13 02 F6 | 	mov	arg01, local02
23940     13 13 02 F1 | 	add	arg01, local01
23944     15 15 02 F6 | 	mov	arg02, local03
23948     18 15 82 F1 | 	sub	arg02, local06
2394c     16 17 02 F6 | 	mov	arg03, local04
23950     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
23954                 | '   putpixel(x0+y,y0+x,c)
23954     14 13 02 F6 | 	mov	arg01, local02
23958     13 13 02 F1 | 	add	arg01, local01
2395c     15 15 02 F6 | 	mov	arg02, local03
23960     18 15 02 F1 | 	add	arg02, local06
23964     16 17 02 F6 | 	mov	arg03, local04
23968     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
2396c                 | '   if d>0 
2396c     01 2E 56 F2 | 	cmps	local05, #1 wc
23970     18 00 90 CD |  if_b	jmp	#LR__2791
23974                 | '     d+=da
23974     1A 2F 02 F1 | 	add	local05, local08
23978                 | '     y-=1
23978     01 26 86 F1 | 	sub	local01, #1
2397c                 | '     x+=1
2397c     01 30 06 F1 | 	add	local06, #1
23980                 | '     da+=4*4
23980     10 34 06 F1 | 	add	local08, #16
23984                 | '     db+=2*4
23984     08 32 06 F1 | 	add	local07, #8
23988     18 FF 9F FD | 	jmp	#LR__2790
2398c                 | LR__2791
2398c                 | '   else
2398c                 | '     d+=db
2398c     19 2F 02 F1 | 	add	local05, local07
23990                 | '     x+=1
23990     01 30 06 F1 | 	add	local06, #1
23994                 | '     da+=2*4
23994     08 34 06 F1 | 	add	local08, #8
23998                 | '     db+=2*4
23998     08 32 06 F1 | 	add	local07, #8
2399c     04 FF 9F FD | 	jmp	#LR__2790
239a0                 | LR__2792
239a0     A7 F0 03 F6 | 	mov	ptra, fp
239a4     B2 00 A0 FD | 	call	#popregs_
239a8                 | _hg010b_spin2_circle_ret
239a8     2D 00 64 FD | 	ret
239ac                 | 
239ac                 | '     
239ac                 | ' '-- A frame (an empty rectangle) ---------------------------------------
239ac                 | ' 
239ac                 | ' pub frame(x1,y1,x2,y2,c)
239ac                 | _hg010b_spin2_frame
239ac     05 4A 05 F6 | 	mov	COUNT_, #5
239b0     A8 00 A0 FD | 	call	#pushregs_
239b4     09 27 02 F6 | 	mov	local01, arg01
239b8     0A 29 02 F6 | 	mov	local02, arg02
239bc     0B 2B 02 F6 | 	mov	local03, arg03
239c0     0C 2D 02 F6 | 	mov	local04, arg04
239c4     0D 2F 02 F6 | 	mov	local05, arg05
239c8                 | ' 
239c8                 | ' fastline(x1,x2,y1,c)
239c8     13 13 02 F6 | 	mov	arg01, local01
239cc     15 15 02 F6 | 	mov	arg02, local03
239d0     14 17 02 F6 | 	mov	arg03, local02
239d4     17 19 02 F6 | 	mov	arg04, local05
239d8     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
239dc                 | ' fastline(x1,x2,y2,c)
239dc     13 13 02 F6 | 	mov	arg01, local01
239e0     15 15 02 F6 | 	mov	arg02, local03
239e4     16 17 02 F6 | 	mov	arg03, local04
239e8     17 19 02 F6 | 	mov	arg04, local05
239ec     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
239f0                 | ' line(x1,y1,x1,y2,c)
239f0     13 13 02 F6 | 	mov	arg01, local01
239f4     14 15 02 F6 | 	mov	arg02, local02
239f8     13 17 02 F6 | 	mov	arg03, local01
239fc     16 19 02 F6 | 	mov	arg04, local04
23a00     17 1B 02 F6 | 	mov	arg05, local05
23a04                 | ' draw(x1,y1,x2,y2,c)
23a04     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
23a08                 | ' line(x2,y1,x2,y2,c)
23a08     15 13 02 F6 | 	mov	arg01, local03
23a0c     14 15 02 F6 | 	mov	arg02, local02
23a10     15 17 02 F6 | 	mov	arg03, local03
23a14     16 19 02 F6 | 	mov	arg04, local04
23a18     17 1B 02 F6 | 	mov	arg05, local05
23a1c                 | ' draw(x1,y1,x2,y2,c)
23a1c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
23a20     A7 F0 03 F6 | 	mov	ptra, fp
23a24     B2 00 A0 FD | 	call	#popregs_
23a28                 | _hg010b_spin2_frame_ret
23a28     2D 00 64 FD | 	ret
23a2c                 | 
23a2c                 | ' 
23a2c                 | ' '-- A box (a filled rectangle) ----------------------------------------
23a2c                 | ' 
23a2c                 | ' pub box(x1,y1,x2,y2,c) |yy
23a2c                 | _hg010b_spin2_box
23a2c     06 4A 05 F6 | 	mov	COUNT_, #6
23a30     A8 00 A0 FD | 	call	#pushregs_
23a34     09 27 02 F6 | 	mov	local01, arg01
23a38     0A 29 02 F6 | 	mov	local02, arg02
23a3c     0B 2B 02 F6 | 	mov	local03, arg03
23a40     0C 2D 02 F6 | 	mov	local04, arg04
23a44     0D 2F 02 F6 | 	mov	local05, arg05
23a48                 | ' 
23a48                 | ' repeat yy from y1 to y2
23a48     14 2D 52 F2 | 	cmps	local04, local02 wc
23a4c     01 30 86 F6 | 	negc	local06, #1
23a50     18 2D 02 F1 | 	add	local04, local06
23a54                 | LR__2800
23a54                 | '   fastline(x1,x2,yy,c)
23a54     13 13 02 F6 | 	mov	arg01, local01
23a58     15 15 02 F6 | 	mov	arg02, local03
23a5c     17 19 02 F6 | 	mov	arg04, local05
23a60     14 17 02 F6 | 	mov	arg03, local02
23a64     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
23a68     18 29 02 F1 | 	add	local02, local06
23a6c     16 29 0A F2 | 	cmp	local02, local04 wz
23a70     E0 FF 9F 5D |  if_ne	jmp	#LR__2800
23a74     A7 F0 03 F6 | 	mov	ptra, fp
23a78     B2 00 A0 FD | 	call	#popregs_
23a7c                 | _hg010b_spin2_box_ret
23a7c     2D 00 64 FD | 	ret
23a80                 | 
23a80                 | '       
23a80                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
23a80                 | _hg010b_spin2_putcharxycgf
23a80                 | ' 
23a80                 | '  
23a80                 | ' repeat yy from 0 to 15
23a80     00 00 06 F6 | 	mov	_var01, #0
23a84     97 8C 48 FB | 	callpa	#(@LR__2812-@LR__2810)>>2,fcache_load_ptr_
23a88                 | LR__2810
23a88                 | ' 
23a88                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
23a88     95 E4 05 F1 | 	add	objptr, #149
23a8c     F2 02 02 FB | 	rdlong	_var02, objptr
23a90     0A 02 66 F0 | 	shl	_var02, #10
23a94     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
23a98     01 05 02 F1 | 	add	_var03, _var02
23a9c     0B 03 02 F6 | 	mov	_var02, arg03
23aa0     04 02 66 F0 | 	shl	_var02, #4
23aa4     01 05 02 F1 | 	add	_var03, _var02
23aa8     00 05 02 F1 | 	add	_var03, _var01
23aac     02 05 C2 FA | 	rdbyte	_var03, _var03
23ab0                 | '   asm
23ab0     00 04 0E F4 | 	testb	_var03, #0 wz
23ab4     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
23ab8     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
23abc     01 04 0E F4 | 	testb	_var03, #1 wz
23ac0     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
23ac4     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
23ac8     02 04 0E F4 | 	testb	_var03, #2 wz
23acc     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
23ad0     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
23ad4     03 04 0E F4 | 	testb	_var03, #3 wz
23ad8     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
23adc     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
23ae0     04 04 0E F4 | 	testb	_var03, #4 wz
23ae4     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
23ae8     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
23aec     05 04 0E F4 | 	testb	_var03, #5 wz
23af0     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
23af4     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
23af8     06 04 0E F4 | 	testb	_var03, #6 wz
23afc     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
23b00     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
23b04     07 04 0E F4 | 	testb	_var03, #7 wz
23b08     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
23b0c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
23b10                 | '   
23b10                 | '   ccc[0]:=c1
23b10     99 E5 05 F1 | 	add	objptr, #409
23b14     F2 06 62 FC | 	wrlong	_var04, objptr
23b18                 | '   ccc[1]:=c2 
23b18     04 E4 05 F1 | 	add	objptr, #4
23b1c     F2 08 62 FC | 	wrlong	_var05, objptr
23b20                 | '   long[mailbox0][2]:=8
23b20     49 E4 85 F1 | 	sub	objptr, #73
23b24     F2 04 02 FB | 	rdlong	_var03, objptr
23b28     08 04 06 F1 | 	add	_var03, #8
23b2c     02 11 68 FC | 	wrlong	#8, _var03
23b30                 | '   long[mailbox0][1]:=@ccc
23b30     45 E4 05 F1 | 	add	objptr, #69
23b34     F2 04 02 F6 | 	mov	_var03, objptr
23b38     45 E4 85 F1 | 	sub	objptr, #69
23b3c     F2 02 02 FB | 	rdlong	_var02, objptr
23b40     04 02 06 F1 | 	add	_var02, #4
23b44     01 05 62 FC | 	wrlong	_var03, _var02
23b48                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
23b48     0C E5 85 F1 | 	sub	objptr, #268
23b4c     F2 04 02 FB | 	rdlong	_var03, objptr
23b50     0A 03 02 F6 | 	mov	_var02, arg02
23b54     00 03 02 F1 | 	add	_var02, _var01
23b58     0A 02 66 F0 | 	shl	_var02, #10
23b5c     09 0B 02 F6 | 	mov	_var06, arg01
23b60     02 0A 66 F0 | 	shl	_var06, #2
23b64     05 03 02 F1 | 	add	_var02, _var06
23b68     01 05 02 F1 | 	add	_var03, _var02
23b6c     00 00 78 FF 
23b70     00 04 06 F1 | 	add	_var03, ##-268435456
23b74     0C E5 05 F1 | 	add	objptr, #268
23b78     F2 0A 02 FB | 	rdlong	_var06, objptr
23b7c     05 05 62 FC | 	wrlong	_var03, _var06
23b80                 | '   repeat
23b80                 | LR__2811
23b80     F2 04 02 FB | 	rdlong	_var03, objptr
23b84     02 03 02 FB | 	rdlong	_var02, _var03
23b88     00 02 56 F2 | 	cmps	_var02, #0 wc
23b8c     F0 FF 9F CD |  if_b	jmp	#LR__2811
23b90     E9 E5 85 F1 | 	sub	objptr, #489
23b94     01 00 06 F1 | 	add	_var01, #1
23b98     10 00 56 F2 | 	cmps	_var01, #16 wc
23b9c     E8 FE 9F CD |  if_b	jmp	#LR__2810
23ba0                 | LR__2812
23ba0                 | _hg010b_spin2_putcharxycgf_ret
23ba0     2D 00 64 FD | 	ret
23ba4                 | 
23ba4                 | ' 
23ba4                 | ' 
23ba4                 | ' '**********************************************************************r***
23ba4                 | ' '                                                                        *
23ba4                 | ' ' Font related functions                                                 *
23ba4                 | ' '                                                                        *
23ba4                 | ' '*************************************************************************
23ba4                 | ' 
23ba4                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
23ba4                 | ' 
23ba4                 | ' pub setfontfamily(afontnum)
23ba4                 | _hg010b_spin2_setfontfamily
23ba4                 | ' 
23ba4                 | ' font_family:=afontnum
23ba4     95 E4 05 F1 | 	add	objptr, #149
23ba8     F2 12 62 FC | 	wrlong	arg01, objptr
23bac     95 E4 85 F1 | 	sub	objptr, #149
23bb0                 | ' 'if afontnum==8
23bb0                 | ' '  font_ptr:=@amiga_font
23bb0                 | ' 
23bb0                 | ' if afontnum==4
23bb0     04 12 0E F2 | 	cmp	arg01, #4 wz
23bb4                 | '   font_ptr:=@st_font
23bb4     08 00 00 AF 
23bb8     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
23bbc     08 E4 05 A1 |  if_e	add	objptr, #8
23bc0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
23bc4     08 E4 85 A1 |  if_e	sub	objptr, #8
23bc8     08 00 00 AF 
23bcc     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
23bd0                 | ' if afontnum==0
23bd0     00 12 0E F2 | 	cmp	arg01, #0 wz
23bd4                 | '   font_ptr:=@vga_font
23bd4     08 E4 05 A1 |  if_e	add	objptr, #8
23bd8     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
23bdc     08 E4 85 A1 |  if_e	sub	objptr, #8
23be0                 | _hg010b_spin2_setfontfamily_ret
23be0     2D 00 64 FD | 	ret
23be4                 | 
23be4                 | ' 
23be4                 | ' '*************************************************************************
23be4                 | ' '                                                                        *
23be4                 | ' '  Cursor functions                                                      *
23be4                 | ' '                                                                        *
23be4                 | ' '*************************************************************************
23be4                 | ' 
23be4                 | ' 
23be4                 | ' pub setcursorpos(x,y)
23be4                 | _hg010b_spin2_setcursorpos
23be4                 | ' 
23be4                 | ' ''---------- Set the (x,y) position of cursor
23be4                 | ' 
23be4                 | ' cursor_x:=x
23be4     3C E4 05 F1 | 	add	objptr, #60
23be8     F2 12 52 FC | 	wrword	arg01, objptr
23bec                 | ' cursor_y:=y
23bec     02 E4 05 F1 | 	add	objptr, #2
23bf0     F2 14 42 FC | 	wrbyte	arg02, objptr
23bf4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23bf4     02 E4 85 F1 | 	sub	objptr, #2
23bf8     F2 14 E2 FA | 	rdword	arg02, objptr
23bfc     02 14 66 F0 | 	shl	arg02, #2
23c00     02 E4 05 F1 | 	add	objptr, #2
23c04     F2 16 C2 FA | 	rdbyte	arg03, objptr
23c08     3E E4 85 F1 | 	sub	objptr, #62
23c0c     04 16 66 F0 | 	shl	arg03, #4
23c10     04 16 06 F1 | 	add	arg03, #4
23c14     11 12 06 F6 | 	mov	arg01, #17
23c18     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
23c1c                 | _hg010b_spin2_setcursorpos_ret
23c1c     2D 00 64 FD | 	ret
23c20                 | 
23c20                 | ' 
23c20                 | ' pub setcursorx(x)
23c20                 | _hg010b_spin2_setcursorx
23c20                 | ' cursor_x:=x
23c20     3C E4 05 F1 | 	add	objptr, #60
23c24     F2 12 52 FC | 	wrword	arg01, objptr
23c28                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23c28     F2 14 E2 FA | 	rdword	arg02, objptr
23c2c     02 14 66 F0 | 	shl	arg02, #2
23c30     02 E4 05 F1 | 	add	objptr, #2
23c34     F2 16 C2 FA | 	rdbyte	arg03, objptr
23c38     3E E4 85 F1 | 	sub	objptr, #62
23c3c     04 16 66 F0 | 	shl	arg03, #4
23c40     04 16 06 F1 | 	add	arg03, #4
23c44     11 12 06 F6 | 	mov	arg01, #17
23c48     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
23c4c                 | _hg010b_spin2_setcursorx_ret
23c4c     2D 00 64 FD | 	ret
23c50                 | 
23c50                 | ' 
23c50                 | ' pub setcursory(y) 
23c50                 | _hg010b_spin2_setcursory
23c50                 | ' cursor_y:=y
23c50     3E E4 05 F1 | 	add	objptr, #62
23c54     F2 12 42 FC | 	wrbyte	arg01, objptr
23c58                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
23c58     02 E4 85 F1 | 	sub	objptr, #2
23c5c     F2 14 E2 FA | 	rdword	arg02, objptr
23c60     02 14 66 F0 | 	shl	arg02, #2
23c64     02 E4 05 F1 | 	add	objptr, #2
23c68     F2 16 C2 FA | 	rdbyte	arg03, objptr
23c6c     3E E4 85 F1 | 	sub	objptr, #62
23c70     04 16 66 F0 | 	shl	arg03, #4
23c74     04 16 06 F1 | 	add	arg03, #4
23c78     11 12 06 F6 | 	mov	arg01, #17
23c7c     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
23c80                 | _hg010b_spin2_setcursory_ret
23c80     2D 00 64 FD | 	ret
23c84                 | 
23c84                 | ' 
23c84                 | ' '*************************************************************************
23c84                 | ' '                                                                        *
23c84                 | ' '  VBlank functions                                                      *
23c84                 | ' '                                                                        *
23c84                 | ' '*************************************************************************
23c84                 | ' 
23c84                 | ' pub waitvbl(amount) | i
23c84                 | _hg010b_spin2_waitvbl
23c84     03 4A 05 F6 | 	mov	COUNT_, #3
23c88     A8 00 A0 FD | 	call	#pushregs_
23c8c     09 27 02 F6 | 	mov	local01, arg01
23c90                 | ' 
23c90                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
23c90                 | ' 
23c90                 | ' repeat i from 1 to amount
23c90     01 28 06 F6 | 	mov	local02, #1
23c94     01 26 56 F2 | 	cmps	local01, #1 wc
23c98     01 2A 86 F6 | 	negc	local03, #1
23c9c     15 27 02 F1 | 	add	local01, local03
23ca0                 | LR__2820
23ca0                 | '   repeat until vblank==0
23ca0                 | LR__2821
23ca0     49 E4 05 F1 | 	add	objptr, #73
23ca4     F2 12 0A FB | 	rdlong	arg01, objptr wz
23ca8     49 E4 85 F1 | 	sub	objptr, #73
23cac     0C 00 90 AD |  if_e	jmp	#LR__2822
23cb0                 | '     waitus(100)
23cb0     64 12 06 F6 | 	mov	arg01, #100
23cb4     20 20 B0 FD | 	call	#__system___waitus
23cb8     E4 FF 9F FD | 	jmp	#LR__2821
23cbc                 | LR__2822
23cbc                 | '   repeat until vblank==1
23cbc                 | LR__2823
23cbc     49 E4 05 F1 | 	add	objptr, #73
23cc0     F2 12 02 FB | 	rdlong	arg01, objptr
23cc4     49 E4 85 F1 | 	sub	objptr, #73
23cc8     01 12 0E F2 | 	cmp	arg01, #1 wz
23ccc     0C 00 90 AD |  if_e	jmp	#LR__2824
23cd0                 | '     waitus(100)
23cd0     64 12 06 F6 | 	mov	arg01, #100
23cd4     00 20 B0 FD | 	call	#__system___waitus
23cd8     E0 FF 9F FD | 	jmp	#LR__2823
23cdc                 | LR__2824
23cdc     15 29 02 F1 | 	add	local02, local03
23ce0     13 29 0A F2 | 	cmp	local02, local01 wz
23ce4     B8 FF 9F 5D |  if_ne	jmp	#LR__2820
23ce8     A7 F0 03 F6 | 	mov	ptra, fp
23cec     B2 00 A0 FD | 	call	#popregs_
23cf0                 | _hg010b_spin2_waitvbl_ret
23cf0     2D 00 64 FD | 	ret
23cf4                 | 
23cf4                 | ' 
23cf4                 | ' 
23cf4                 | ' pub cls(fc,bc)   :c,i
23cf4                 | _hg010b_spin2_cls
23cf4     02 4A 05 F6 | 	mov	COUNT_, #2
23cf8     A8 00 A0 FD | 	call	#pushregs_
23cfc     09 27 02 F6 | 	mov	local01, arg01
23d00     0A 29 02 F6 | 	mov	local02, arg02
23d04                 | ' 
23d04                 | ' c:=bc
23d04                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
23d04     DD E4 05 F1 | 	add	objptr, #221
23d08     F2 12 02 FB | 	rdlong	arg01, objptr
23d0c     A5 E4 85 F1 | 	sub	objptr, #165
23d10     F2 16 02 FB | 	rdlong	arg03, objptr
23d14     02 16 66 F0 | 	shl	arg03, #2
23d18     14 15 02 F6 | 	mov	arg02, local02
23d1c     00 18 06 F6 | 	mov	arg04, #0
23d20     01 1A 06 F6 | 	mov	arg05, #1
23d24     0B 00 00 FF 
23d28     94 E4 05 F1 | 	add	objptr, ##5780
23d2c     F8 10 B0 FD | 	call	#_psram_spin2_fill
23d30                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
23d30     0B 00 00 FF 
23d34     C8 E4 85 F1 | 	sub	objptr, ##5832
23d38     F2 12 02 FB | 	rdlong	arg01, objptr
23d3c     04 E4 85 F1 | 	sub	objptr, #4
23d40     F2 16 02 FB | 	rdlong	arg03, objptr
23d44     09 17 82 F1 | 	sub	arg03, arg01
23d48     20 14 06 F6 | 	mov	arg02, #32
23d4c     00 18 06 F6 | 	mov	arg04, #0
23d50     01 1A 06 F6 | 	mov	arg05, #1
23d54     0B 00 00 FF 
23d58     CC E4 05 F1 | 	add	objptr, ##5836
23d5c     C8 10 B0 FD | 	call	#_psram_spin2_fill
23d60                 | ' setwritecolors(fc,bc)
23d60                 | ' 
23d60                 | ' write_color:=ff
23d60     0B 00 00 FF 
23d64     8B E4 85 F1 | 	sub	objptr, ##5771
23d68     F2 26 62 FC | 	wrlong	local01, objptr
23d6c                 | ' write_background:=bb
23d6c     04 E4 05 F1 | 	add	objptr, #4
23d70     F2 28 62 FC | 	wrlong	local02, objptr
23d74                 | ' cursor_x:=0
23d74     09 E4 85 F1 | 	sub	objptr, #9
23d78     F2 00 58 FC | 	wrword	#0, objptr
23d7c                 | ' cursor_y:=0
23d7c     02 E4 05 F1 | 	add	objptr, #2
23d80     F2 00 48 FC | 	wrbyte	#0, objptr
23d84                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23d84     02 E4 85 F1 | 	sub	objptr, #2
23d88     F2 14 E2 FA | 	rdword	arg02, objptr
23d8c     02 14 66 F0 | 	shl	arg02, #2
23d90     02 E4 05 F1 | 	add	objptr, #2
23d94     F2 16 C2 FA | 	rdbyte	arg03, objptr
23d98     3E E4 85 F1 | 	sub	objptr, #62
23d9c     04 16 66 F0 | 	shl	arg03, #4
23da0     04 16 06 F1 | 	add	arg03, #4
23da4     11 12 06 F6 | 	mov	arg01, #17
23da8     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
23dac                 | ' setcursorcolor(fc)
23dac     13 13 02 F6 | 	mov	arg01, local01
23db0     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
23db4     14 FB 01 F6 | 	mov	result1, local02
23db8     00 FC 05 F6 | 	mov	result2, #0
23dbc     A7 F0 03 F6 | 	mov	ptra, fp
23dc0     B2 00 A0 FD | 	call	#popregs_
23dc4                 | _hg010b_spin2_cls_ret
23dc4     2D 00 64 FD | 	ret
23dc8                 | 
23dc8                 | ' 
23dc8                 | ' ''---------- Output a char at the cursor position, move the cursor 
23dc8                 | ' 
23dc8                 | ' pub putchar(achar) | c,x,y,l,newcpl
23dc8                 | _hg010b_spin2_putchar
23dc8     02 4A 05 F6 | 	mov	COUNT_, #2
23dcc     A8 00 A0 FD | 	call	#pushregs_
23dd0     09 27 02 F6 | 	mov	local01, arg01
23dd4                 | ' 
23dd4                 | ' if achar==10
23dd4     0A 26 0E F2 | 	cmp	local01, #10 wz
23dd8                 | '   crlf()
23dd8     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
23ddc                 | ' if achar==9
23ddc     09 26 0E F2 | 	cmp	local01, #9 wz
23de0     18 00 90 5D |  if_ne	jmp	#LR__2830
23de4                 | '   cursor_x:=(cursor_x& %11110000)+16
23de4     3C E4 05 F1 | 	add	objptr, #60
23de8     F2 16 E2 FA | 	rdword	arg03, objptr
23dec     F0 16 06 F5 | 	and	arg03, #240
23df0     10 16 06 F1 | 	add	arg03, #16
23df4     F2 16 52 FC | 	wrword	arg03, objptr
23df8     3C E4 85 F1 | 	sub	objptr, #60
23dfc                 | LR__2830
23dfc                 | '   
23dfc                 | ' if (achar<>9) && (achar<>10) 
23dfc     09 26 0E F2 | 	cmp	local01, #9 wz
23e00     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
23e04     A8 00 90 AD |  if_e	jmp	#LR__2831
23e08                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
23e08     3C E4 05 F1 | 	add	objptr, #60
23e0c     F2 12 E2 FA | 	rdword	arg01, objptr
23e10     02 E4 05 F1 | 	add	objptr, #2
23e14     F2 14 C2 FA | 	rdbyte	arg02, objptr
23e18     04 14 66 F0 | 	shl	arg02, #4
23e1c     04 14 06 F1 | 	add	arg02, #4
23e20     03 E4 05 F1 | 	add	objptr, #3
23e24     F2 18 02 FB | 	rdlong	arg04, objptr
23e28     04 E4 05 F1 | 	add	objptr, #4
23e2c     F2 1A 02 FB | 	rdlong	arg05, objptr
23e30     45 E4 85 F1 | 	sub	objptr, #69
23e34     13 17 02 F6 | 	mov	arg03, local01
23e38     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
23e3c     04 E4 05 F1 | 	add	objptr, #4
23e40     F2 12 02 FB | 	rdlong	arg01, objptr
23e44     10 00 00 FF 
23e48     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
23e4c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23e50     3A E4 05 F1 | 	add	objptr, #58
23e54     F2 1A C2 FA | 	rdbyte	arg05, objptr
23e58     0D 17 02 FD | 	qmul	arg03, arg05
23e5c                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
23e5c     10 00 00 FF 
23e60     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23e64     02 E4 85 F1 | 	sub	objptr, #2
23e68     F2 28 E2 FA | 	rdword	local02, objptr
23e6c     01 28 46 F0 | 	shr	local02, #1
23e70     13 15 02 F6 | 	mov	arg02, local01
23e74     01 16 06 F6 | 	mov	arg03, #1
23e78     00 18 06 F6 | 	mov	arg04, #0
23e7c     01 1A 06 F6 | 	mov	arg05, #1
23e80     0B 00 00 FF 
23e84     90 E4 05 F1 | 	add	objptr, ##5776
23e88     18 26 62 FD | 	getqx	local01
23e8c     14 27 02 F1 | 	add	local01, local02
23e90     13 13 02 F1 | 	add	arg01, local01
23e94     90 0F B0 FD | 	call	#_psram_spin2_fill
23e98                 | '   cursor_x+=2
23e98     0B 00 00 FF 
23e9c     90 E4 85 F1 | 	sub	objptr, ##5776
23ea0     F2 28 E2 FA | 	rdword	local02, objptr
23ea4     02 28 06 F1 | 	add	local02, #2
23ea8     F2 28 52 FC | 	wrword	local02, objptr
23eac     3C E4 85 F1 | 	sub	objptr, #60
23eb0                 | LR__2831
23eb0                 | ' 
23eb0                 | ' if cursor_x>=256
23eb0     3C E4 05 F1 | 	add	objptr, #60
23eb4     F2 28 E2 FA | 	rdword	local02, objptr
23eb8     3C E4 85 F1 | 	sub	objptr, #60
23ebc     00 29 56 F2 | 	cmps	local02, #256 wc
23ec0     64 00 90 CD |  if_b	jmp	#LR__2833
23ec4                 | '   cursor_x:=0
23ec4     3C E4 05 F1 | 	add	objptr, #60
23ec8     F2 00 58 FC | 	wrword	#0, objptr
23ecc                 | '   cursor_y+=1
23ecc     02 E4 05 F1 | 	add	objptr, #2
23ed0     F2 28 C2 FA | 	rdbyte	local02, objptr
23ed4     01 28 06 F1 | 	add	local02, #1
23ed8     F2 28 42 FC | 	wrbyte	local02, objptr
23edc                 | '   if cursor_y>st_lines-1
23edc     C3 E4 05 F1 | 	add	objptr, #195
23ee0     F2 28 02 FB | 	rdlong	local02, objptr
23ee4     01 28 86 F1 | 	sub	local02, #1
23ee8     C3 E4 85 F1 | 	sub	objptr, #195
23eec     F2 16 C2 FA | 	rdbyte	arg03, objptr
23ef0     3E E4 85 F1 | 	sub	objptr, #62
23ef4     14 17 5A F2 | 	cmps	arg03, local02 wcz
23ef8     2C 00 90 ED |  if_be	jmp	#LR__2832
23efc                 | '     scrollup2()
23efc     00 12 06 F6 | 	mov	arg01, #0
23f00     01 00 00 FF 
23f04     58 14 06 F6 | 	mov	arg02, ##600
23f08     10 16 06 F6 | 	mov	arg03, #16
23f0c     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
23f10                 | '     cursor_y:=st_lines-1
23f10     01 E5 05 F1 | 	add	objptr, #257
23f14     F2 28 02 FB | 	rdlong	local02, objptr
23f18     01 28 86 F1 | 	sub	local02, #1
23f1c     C3 E4 85 F1 | 	sub	objptr, #195
23f20     F2 28 42 FC | 	wrbyte	local02, objptr
23f24     3E E4 85 F1 | 	sub	objptr, #62
23f28                 | LR__2832
23f28                 | LR__2833
23f28                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23f28     3C E4 05 F1 | 	add	objptr, #60
23f2c     F2 14 E2 FA | 	rdword	arg02, objptr
23f30     02 14 66 F0 | 	shl	arg02, #2
23f34     02 E4 05 F1 | 	add	objptr, #2
23f38     F2 16 C2 FA | 	rdbyte	arg03, objptr
23f3c     3E E4 85 F1 | 	sub	objptr, #62
23f40     04 16 66 F0 | 	shl	arg03, #4
23f44     04 16 06 F1 | 	add	arg03, #4
23f48     11 12 06 F6 | 	mov	arg01, #17
23f4c     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
23f50     A7 F0 03 F6 | 	mov	ptra, fp
23f54     B2 00 A0 FD | 	call	#popregs_
23f58                 | _hg010b_spin2_putchar_ret
23f58     2D 00 64 FD | 	ret
23f5c                 | 
23f5c                 | '     
23f5c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
23f5c                 | ' 
23f5c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
23f5c                 | _hg010b_spin2_putchar2
23f5c     02 4A 05 F6 | 	mov	COUNT_, #2
23f60     A8 00 A0 FD | 	call	#pushregs_
23f64     09 27 02 F6 | 	mov	local01, arg01
23f68                 | ' 
23f68                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
23f68     3C E4 05 F1 | 	add	objptr, #60
23f6c     F2 12 E2 FA | 	rdword	arg01, objptr
23f70     02 E4 05 F1 | 	add	objptr, #2
23f74     F2 14 C2 FA | 	rdbyte	arg02, objptr
23f78     04 14 66 F0 | 	shl	arg02, #4
23f7c     04 14 06 F1 | 	add	arg02, #4
23f80     03 E4 05 F1 | 	add	objptr, #3
23f84     F2 18 02 FB | 	rdlong	arg04, objptr
23f88     04 E4 05 F1 | 	add	objptr, #4
23f8c     F2 1A 02 FB | 	rdlong	arg05, objptr
23f90     45 E4 85 F1 | 	sub	objptr, #69
23f94     13 17 02 F6 | 	mov	arg03, local01
23f98     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
23f9c     04 E4 05 F1 | 	add	objptr, #4
23fa0     F2 12 02 FB | 	rdlong	arg01, objptr
23fa4     10 00 00 FF 
23fa8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
23fac     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23fb0     3A E4 05 F1 | 	add	objptr, #58
23fb4     F2 1A C2 FA | 	rdbyte	arg05, objptr
23fb8     0D 17 02 FD | 	qmul	arg03, arg05
23fbc                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
23fbc     10 00 00 FF 
23fc0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23fc4     02 E4 85 F1 | 	sub	objptr, #2
23fc8     F2 28 E2 FA | 	rdword	local02, objptr
23fcc     01 28 46 F0 | 	shr	local02, #1
23fd0     13 15 02 F6 | 	mov	arg02, local01
23fd4     01 16 06 F6 | 	mov	arg03, #1
23fd8     00 18 06 F6 | 	mov	arg04, #0
23fdc     01 1A 06 F6 | 	mov	arg05, #1
23fe0     0B 00 00 FF 
23fe4     90 E4 05 F1 | 	add	objptr, ##5776
23fe8     18 26 62 FD | 	getqx	local01
23fec     14 27 02 F1 | 	add	local01, local02
23ff0     13 13 02 F1 | 	add	arg01, local01
23ff4     30 0E B0 FD | 	call	#_psram_spin2_fill
23ff8                 | ' 
23ff8                 | ' cursor_x+=2
23ff8     0B 00 00 FF 
23ffc     90 E4 85 F1 | 	sub	objptr, ##5776
24000     F2 28 E2 FA | 	rdword	local02, objptr
24004     02 28 06 F1 | 	add	local02, #2
24008     F2 28 52 FC | 	wrword	local02, objptr
2400c                 | ' if cursor_x>=256
2400c     F2 28 E2 FA | 	rdword	local02, objptr
24010     3C E4 85 F1 | 	sub	objptr, #60
24014     00 29 56 F2 | 	cmps	local02, #256 wc
24018     64 00 90 CD |  if_b	jmp	#LR__2841
2401c                 | '   cursor_x:=0
2401c     3C E4 05 F1 | 	add	objptr, #60
24020     F2 00 58 FC | 	wrword	#0, objptr
24024                 | '   cursor_y+=1
24024     02 E4 05 F1 | 	add	objptr, #2
24028     F2 28 C2 FA | 	rdbyte	local02, objptr
2402c     01 28 06 F1 | 	add	local02, #1
24030     F2 28 42 FC | 	wrbyte	local02, objptr
24034                 | '   if cursor_y>st_lines-1
24034     C3 E4 05 F1 | 	add	objptr, #195
24038     F2 28 02 FB | 	rdlong	local02, objptr
2403c     01 28 86 F1 | 	sub	local02, #1
24040     C3 E4 85 F1 | 	sub	objptr, #195
24044     F2 16 C2 FA | 	rdbyte	arg03, objptr
24048     3E E4 85 F1 | 	sub	objptr, #62
2404c     14 17 5A F2 | 	cmps	arg03, local02 wcz
24050     2C 00 90 ED |  if_be	jmp	#LR__2840
24054                 | '     scrollup2()
24054     00 12 06 F6 | 	mov	arg01, #0
24058     01 00 00 FF 
2405c     58 14 06 F6 | 	mov	arg02, ##600
24060     10 16 06 F6 | 	mov	arg03, #16
24064     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
24068                 | '     cursor_y:=st_lines-1
24068     01 E5 05 F1 | 	add	objptr, #257
2406c     F2 28 02 FB | 	rdlong	local02, objptr
24070     01 28 86 F1 | 	sub	local02, #1
24074     C3 E4 85 F1 | 	sub	objptr, #195
24078     F2 28 42 FC | 	wrbyte	local02, objptr
2407c     3E E4 85 F1 | 	sub	objptr, #62
24080                 | LR__2840
24080                 | LR__2841
24080                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
24080     3C E4 05 F1 | 	add	objptr, #60
24084     F2 14 E2 FA | 	rdword	arg02, objptr
24088     02 14 66 F0 | 	shl	arg02, #2
2408c     02 E4 05 F1 | 	add	objptr, #2
24090     F2 16 C2 FA | 	rdbyte	arg03, objptr
24094     3E E4 85 F1 | 	sub	objptr, #62
24098     04 16 66 F0 | 	shl	arg03, #4
2409c     04 16 06 F1 | 	add	arg03, #4
240a0     11 12 06 F6 | 	mov	arg01, #17
240a4     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
240a8     A7 F0 03 F6 | 	mov	ptra, fp
240ac     B2 00 A0 FD | 	call	#popregs_
240b0                 | _hg010b_spin2_putchar2_ret
240b0     2D 00 64 FD | 	ret
240b4                 | 
240b4                 | ' ''--------- Output a string at the cursor position, move the cursor  
240b4                 | ' 
240b4                 | ' pub write(text) | iii,c,ncx,ncy
240b4                 | _hg010b_spin2_write
240b4     04 4A 05 F6 | 	mov	COUNT_, #4
240b8     A8 00 A0 FD | 	call	#pushregs_
240bc     09 27 02 F6 | 	mov	local01, arg01
240c0                 | ' 
240c0                 | ' repeat iii from 0 to strsize(text)-1
240c0     00 28 06 F6 | 	mov	local02, #0
240c4     13 13 02 F6 | 	mov	arg01, local01
240c8     09 2B 02 F6 | 	mov	local03, arg01
240cc     97 06 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
240d0                 | LR__2850
240d0     15 FB C9 FA | 	rdbyte	result1, local03 wz
240d4     01 2A 06 51 |  if_ne	add	local03, #1
240d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2850
240dc                 | LR__2851
240dc     09 2B 82 F1 | 	sub	local03, arg01
240e0     01 2A 86 F1 | 	sub	local03, #1
240e4     00 2A 56 F2 | 	cmps	local03, #0 wc
240e8     01 2C 86 F6 | 	negc	local04, #1
240ec     16 2B 02 F1 | 	add	local03, local04
240f0                 | LR__2852
240f0                 | '   putchar2(byte[text+iii])
240f0     13 13 02 F6 | 	mov	arg01, local01
240f4     14 13 02 F1 | 	add	arg01, local02
240f8     09 13 C2 FA | 	rdbyte	arg01, arg01
240fc     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
24100     16 29 02 F1 | 	add	local02, local04
24104     15 29 0A F2 | 	cmp	local02, local03 wz
24108     E4 FF 9F 5D |  if_ne	jmp	#LR__2852
2410c     A7 F0 03 F6 | 	mov	ptra, fp
24110     B2 00 A0 FD | 	call	#popregs_
24114                 | _hg010b_spin2_write_ret
24114     2D 00 64 FD | 	ret
24118                 | 
24118                 | '    
24118                 | ' ' a version for text scrolling in Basic shifted 4 lines down
24118                 | ' 
24118                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
24118                 | _hg010b_spin2_scrollup2
24118     03 4A 05 F6 | 	mov	COUNT_, #3
2411c     A8 00 A0 FD | 	call	#pushregs_
24120                 | ' 	
24120                 | ' repeat i from 4 to 579 
24120     04 26 06 F6 | 	mov	local01, #4
24124                 | LR__2860
24124     F9 E4 05 F1 | 	add	objptr, #249
24128     F2 1A 02 FB | 	rdlong	arg05, objptr
2412c     1C E4 85 F1 | 	sub	objptr, #28
24130     F2 14 02 FB | 	rdlong	arg02, objptr
24134     13 19 02 F6 | 	mov	arg04, local01
24138     10 18 06 F1 | 	add	arg04, #16
2413c     02 18 66 F0 | 	shl	arg04, #2
24140     14 E4 05 F1 | 	add	objptr, #20
24144     F2 16 02 FB | 	rdlong	arg03, objptr
24148     0B 19 02 FD | 	qmul	arg04, arg03
2414c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
2414c     F6 03 00 FF 
24150     00 12 06 F6 | 	mov	arg01, ##519168
24154     0D 13 82 F1 | 	sub	arg01, arg05
24158     02 16 66 F0 | 	shl	arg03, #2
2415c     0A 00 00 FF 
24160     DB E5 05 F1 | 	add	objptr, ##5595
24164     18 1A 62 FD | 	getqx	arg05
24168     0D 15 02 F1 | 	add	arg02, arg05
2416c     80 0B B0 FD | 	call	#_psram_spin2_read1
24170     0A 00 00 FF 
24174     D3 E5 85 F1 | 	sub	objptr, ##5587
24178     F2 1A 02 FB | 	rdlong	arg05, objptr
2417c     1C E4 85 F1 | 	sub	objptr, #28
24180     F2 14 02 FB | 	rdlong	arg02, objptr
24184     13 19 02 F6 | 	mov	arg04, local01
24188     02 18 66 F0 | 	shl	arg04, #2
2418c     14 E4 05 F1 | 	add	objptr, #20
24190     F2 16 02 FB | 	rdlong	arg03, objptr
24194     0B 19 02 FD | 	qmul	arg04, arg03
24198                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
24198     F6 03 00 FF 
2419c     00 12 06 F6 | 	mov	arg01, ##519168
241a0     0D 13 82 F1 | 	sub	arg01, arg05
241a4     02 16 66 F0 | 	shl	arg03, #2
241a8     0A 00 00 FF 
241ac     DB E5 05 F1 | 	add	objptr, ##5595
241b0     18 1A 62 FD | 	getqx	arg05
241b4     0D 15 02 F1 | 	add	arg02, arg05
241b8     D0 0B B0 FD | 	call	#_psram_spin2_write
241bc     0B 00 00 FF 
241c0     CC E4 85 F1 | 	sub	objptr, ##5836
241c4     01 26 06 F1 | 	add	local01, #1
241c8     01 00 00 FF 
241cc     44 26 16 F2 | 	cmp	local01, ##580 wc
241d0     50 FF 9F CD |  if_b	jmp	#LR__2860
241d4                 | ' 
241d4                 | ' repeat i from 580 to 599
241d4     01 00 00 FF 
241d8     44 26 06 F6 | 	mov	local01, ##580
241dc                 | LR__2861
241dc                 | '    fastline(0,1023,i,write_background)   
241dc     45 E4 05 F1 | 	add	objptr, #69
241e0     F2 18 02 FB | 	rdlong	arg04, objptr
241e4     45 E4 85 F1 | 	sub	objptr, #69
241e8     00 12 06 F6 | 	mov	arg01, #0
241ec     09 14 CE F9 | 	bmask	arg02, #9
241f0     13 17 02 F6 | 	mov	arg03, local01
241f4     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
241f8     01 26 06 F1 | 	add	local01, #1
241fc     01 00 00 FF 
24200     58 26 16 F2 | 	cmp	local01, ##600 wc
24204     D4 FF 9F CD |  if_b	jmp	#LR__2861
24208                 | ' repeat i from 0 to 3
24208     00 26 06 F6 | 	mov	local01, #0
2420c                 | LR__2862
2420c                 | '    fastline(0,1023,i,write_background)      
2420c     45 E4 05 F1 | 	add	objptr, #69
24210     F2 18 02 FB | 	rdlong	arg04, objptr
24214     45 E4 85 F1 | 	sub	objptr, #69
24218     00 12 06 F6 | 	mov	arg01, #0
2421c     09 14 CE F9 | 	bmask	arg02, #9
24220     13 17 02 F6 | 	mov	arg03, local01
24224     90 EF BF FD | 	call	#_hg010b_spin2_fastline
24228     01 26 06 F1 | 	add	local01, #1
2422c     04 26 56 F2 | 	cmps	local01, #4 wc
24230     D8 FF 9F CD |  if_b	jmp	#LR__2862
24234                 | ' 
24234                 | ' repeat i from 0 to 35
24234     00 26 06 F6 | 	mov	local01, #0
24238                 | LR__2863
24238     13 1B 02 F6 | 	mov	arg05, local01
2423c     01 1A 06 F1 | 	add	arg05, #1
24240     10 00 00 FF 
24244     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24248     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2424c     0B 1B 02 FD | 	qmul	arg05, arg03
24250                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
24250     F6 03 00 FF 
24254     00 12 06 F6 | 	mov	arg01, ##519168
24258     F9 E4 05 F1 | 	add	objptr, #249
2425c     F2 1A 02 FB | 	rdlong	arg05, objptr
24260     0D 13 82 F1 | 	sub	arg01, arg05
24264     F5 E4 85 F1 | 	sub	objptr, #245
24268     F2 14 02 FB | 	rdlong	arg02, objptr
2426c     10 00 00 FF 
24270     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24274     0B 00 00 FF 
24278     C8 E4 05 F1 | 	add	objptr, ##5832
2427c     18 1A 62 FD | 	getqx	arg05
24280     0D 15 02 F1 | 	add	arg02, arg05
24284     68 0A B0 FD | 	call	#_psram_spin2_read1
24288     10 00 00 FF 
2428c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24290     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24294     0B 27 02 FD | 	qmul	local01, arg03
24298                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
24298     F6 03 00 FF 
2429c     00 12 06 F6 | 	mov	arg01, ##519168
242a0     0A 00 00 FF 
242a4     D3 E5 85 F1 | 	sub	objptr, ##5587
242a8     F2 1A 02 FB | 	rdlong	arg05, objptr
242ac     0D 13 82 F1 | 	sub	arg01, arg05
242b0     F5 E4 85 F1 | 	sub	objptr, #245
242b4     F2 14 02 FB | 	rdlong	arg02, objptr
242b8     10 00 00 FF 
242bc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
242c0     0B 00 00 FF 
242c4     C8 E4 05 F1 | 	add	objptr, ##5832
242c8     18 1A 62 FD | 	getqx	arg05
242cc     0D 15 02 F1 | 	add	arg02, arg05
242d0     B8 0A B0 FD | 	call	#_psram_spin2_write
242d4     0B 00 00 FF 
242d8     CC E4 85 F1 | 	sub	objptr, ##5836
242dc     01 26 06 F1 | 	add	local01, #1
242e0     24 26 56 F2 | 	cmps	local01, #36 wc
242e4     50 FF 9F CD |  if_b	jmp	#LR__2863
242e8                 | ' repeat i from 0 to timings[7]-1
242e8     00 26 06 F6 | 	mov	local01, #0
242ec     10 00 00 FF 
242f0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
242f4     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
242f8     10 00 00 FF 
242fc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24300     01 28 86 F1 | 	sub	local02, #1
24304     00 28 56 F2 | 	cmps	local02, #0 wc
24308     01 2A 86 F6 | 	negc	local03, #1
2430c     15 29 02 F1 | 	add	local02, local03
24310                 | LR__2864
24310                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
24310     04 E4 05 F1 | 	add	objptr, #4
24314     F2 12 02 FB | 	rdlong	arg01, objptr
24318     10 00 00 FF 
2431c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24320     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
24324     10 00 00 FF 
24328     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2432c     0D 19 02 F6 | 	mov	arg04, arg05
24330     03 18 66 F0 | 	shl	arg04, #3
24334     0D 19 02 F1 | 	add	arg04, arg05
24338     02 18 66 F0 | 	shl	arg04, #2
2433c     13 19 02 F1 | 	add	arg04, local01
24340     0C 13 02 F1 | 	add	arg01, arg04
24344     20 14 06 F6 | 	mov	arg02, #32
24348     01 16 06 F6 | 	mov	arg03, #1
2434c     00 18 06 F6 | 	mov	arg04, #0
24350     01 1A 06 F6 | 	mov	arg05, #1
24354     0B 00 00 FF 
24358     C8 E4 05 F1 | 	add	objptr, ##5832
2435c     C8 0A B0 FD | 	call	#_psram_spin2_fill
24360     0B 00 00 FF 
24364     CC E4 85 F1 | 	sub	objptr, ##5836
24368     15 27 02 F1 | 	add	local01, local03
2436c     14 27 0A F2 | 	cmp	local01, local02 wz
24370     9C FF 9F 5D |  if_ne	jmp	#LR__2864
24374     A7 F0 03 F6 | 	mov	ptra, fp
24378     B2 00 A0 FD | 	call	#popregs_
2437c                 | _hg010b_spin2_scrollup2_ret
2437c     2D 00 64 FD | 	ret
24380                 | 
24380                 | '  
24380                 | ' ''----------- Scroll the screen one line down 
24380                 | ' 
24380                 | ' pub scrolldown(start=0) | i
24380                 | _hg010b_spin2_scrolldown
24380     05 4A 05 F6 | 	mov	COUNT_, #5
24384     A8 00 A0 FD | 	call	#pushregs_
24388     09 27 02 F6 | 	mov	local01, arg01
2438c                 | ' 
2438c                 | ' repeat i from 579 to (start*16)+4
2438c     01 00 00 FF 
24390     43 28 06 F6 | 	mov	local02, ##579
24394     13 2B 02 F6 | 	mov	local03, local01
24398     04 2A 66 F0 | 	shl	local03, #4
2439c     04 2A 06 F1 | 	add	local03, #4
243a0     01 00 00 FF 
243a4     43 2A 56 F2 | 	cmps	local03, ##579 wc
243a8     01 2C 86 F6 | 	negc	local04, #1
243ac     16 2F 02 F6 | 	mov	local05, local04
243b0     16 2B 02 F1 | 	add	local03, local04
243b4                 | LR__2870
243b4     F9 E4 05 F1 | 	add	objptr, #249
243b8     F2 2C 02 FB | 	rdlong	local04, objptr
243bc     1C E4 85 F1 | 	sub	objptr, #28
243c0     F2 14 02 FB | 	rdlong	arg02, objptr
243c4     14 1B 02 F6 | 	mov	arg05, local02
243c8     02 1A 66 F0 | 	shl	arg05, #2
243cc     14 E4 05 F1 | 	add	objptr, #20
243d0     F2 16 02 FB | 	rdlong	arg03, objptr
243d4     0B 1B 02 FD | 	qmul	arg05, arg03
243d8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
243d8     F6 03 00 FF 
243dc     00 12 06 F6 | 	mov	arg01, ##519168
243e0     16 13 82 F1 | 	sub	arg01, local04
243e4     02 16 66 F0 | 	shl	arg03, #2
243e8     0A 00 00 FF 
243ec     DB E5 05 F1 | 	add	objptr, ##5595
243f0     18 2C 62 FD | 	getqx	local04
243f4     16 15 02 F1 | 	add	arg02, local04
243f8     F4 08 B0 FD | 	call	#_psram_spin2_read1
243fc     0A 00 00 FF 
24400     D3 E5 85 F1 | 	sub	objptr, ##5587
24404     F2 2C 02 FB | 	rdlong	local04, objptr
24408     1C E4 85 F1 | 	sub	objptr, #28
2440c     F2 14 02 FB | 	rdlong	arg02, objptr
24410     14 1B 02 F6 | 	mov	arg05, local02
24414     10 1A 06 F1 | 	add	arg05, #16
24418     02 1A 66 F0 | 	shl	arg05, #2
2441c     14 E4 05 F1 | 	add	objptr, #20
24420     F2 16 02 FB | 	rdlong	arg03, objptr
24424     0B 1B 02 FD | 	qmul	arg05, arg03
24428                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
24428     F6 03 00 FF 
2442c     00 12 06 F6 | 	mov	arg01, ##519168
24430     16 13 82 F1 | 	sub	arg01, local04
24434     02 16 66 F0 | 	shl	arg03, #2
24438     0A 00 00 FF 
2443c     DB E5 05 F1 | 	add	objptr, ##5595
24440     18 2C 62 FD | 	getqx	local04
24444     16 15 02 F1 | 	add	arg02, local04
24448     40 09 B0 FD | 	call	#_psram_spin2_write
2444c     0B 00 00 FF 
24450     CC E4 85 F1 | 	sub	objptr, ##5836
24454     17 29 02 F1 | 	add	local02, local05
24458     15 29 0A F2 | 	cmp	local02, local03 wz
2445c     54 FF 9F 5D |  if_ne	jmp	#LR__2870
24460                 | ' 
24460                 | ' repeat i from (start*16)+4 to (start*16)+19
24460     13 29 02 F6 | 	mov	local02, local01
24464     04 28 66 F0 | 	shl	local02, #4
24468     04 28 06 F1 | 	add	local02, #4
2446c     13 2F 02 F6 | 	mov	local05, local01
24470     04 2E 66 F0 | 	shl	local05, #4
24474     13 2E 06 F1 | 	add	local05, #19
24478     13 2D 02 F6 | 	mov	local04, local01
2447c     04 2C 66 F0 | 	shl	local04, #4
24480     04 2C 06 F1 | 	add	local04, #4
24484     16 2F 52 F2 | 	cmps	local05, local04 wc
24488     01 2C 86 F6 | 	negc	local04, #1
2448c     16 2B 02 F6 | 	mov	local03, local04
24490     16 2F 02 F1 | 	add	local05, local04
24494                 | LR__2871
24494                 | '    fastline(0,1023,i,write_background)    
24494     45 E4 05 F1 | 	add	objptr, #69
24498     F2 18 02 FB | 	rdlong	arg04, objptr
2449c     45 E4 85 F1 | 	sub	objptr, #69
244a0     00 12 06 F6 | 	mov	arg01, #0
244a4     09 14 CE F9 | 	bmask	arg02, #9
244a8     14 17 02 F6 | 	mov	arg03, local02
244ac     08 ED BF FD | 	call	#_hg010b_spin2_fastline
244b0     15 29 02 F1 | 	add	local02, local03
244b4     17 29 0A F2 | 	cmp	local02, local05 wz
244b8     D8 FF 9F 5D |  if_ne	jmp	#LR__2871
244bc                 | '    
244bc                 | ' repeat i from 35 to start
244bc     23 28 06 F6 | 	mov	local02, #35
244c0     23 26 56 F2 | 	cmps	local01, #35 wc
244c4     01 2C 86 F6 | 	negc	local04, #1
244c8     13 2F 02 F6 | 	mov	local05, local01
244cc     16 2F 02 F1 | 	add	local05, local04
244d0                 | LR__2872
244d0                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
244d0     F6 03 00 FF 
244d4     00 12 06 F6 | 	mov	arg01, ##519168
244d8     F9 E4 05 F1 | 	add	objptr, #249
244dc     F2 2A 02 FB | 	rdlong	local03, objptr
244e0     15 13 82 F1 | 	sub	arg01, local03
244e4     F5 E4 85 F1 | 	sub	objptr, #245
244e8     F2 14 02 FB | 	rdlong	arg02, objptr
244ec     14 2B 02 F6 | 	mov	local03, local02
244f0     07 2A 66 F0 | 	shl	local03, #7
244f4     15 15 02 F1 | 	add	arg02, local03
244f8     80 16 06 F6 | 	mov	arg03, #128
244fc     0B 00 00 FF 
24500     C8 E4 05 F1 | 	add	objptr, ##5832
24504     E8 07 B0 FD | 	call	#_psram_spin2_read1
24508                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
24508     F6 03 00 FF 
2450c     00 12 06 F6 | 	mov	arg01, ##519168
24510     0A 00 00 FF 
24514     D3 E5 85 F1 | 	sub	objptr, ##5587
24518     F2 2A 02 FB | 	rdlong	local03, objptr
2451c     15 13 82 F1 | 	sub	arg01, local03
24520     F5 E4 85 F1 | 	sub	objptr, #245
24524     F2 14 02 FB | 	rdlong	arg02, objptr
24528     14 2B 02 F6 | 	mov	local03, local02
2452c     01 2A 06 F1 | 	add	local03, #1
24530     07 2A 66 F0 | 	shl	local03, #7
24534     15 15 02 F1 | 	add	arg02, local03
24538     80 16 06 F6 | 	mov	arg03, #128
2453c     0B 00 00 FF 
24540     C8 E4 05 F1 | 	add	objptr, ##5832
24544     44 08 B0 FD | 	call	#_psram_spin2_write
24548     0B 00 00 FF 
2454c     CC E4 85 F1 | 	sub	objptr, ##5836
24550     16 29 02 F1 | 	add	local02, local04
24554     17 29 0A F2 | 	cmp	local02, local05 wz
24558     74 FF 9F 5D |  if_ne	jmp	#LR__2872
2455c                 | ' repeat i from 0 to 127
2455c     00 28 06 F6 | 	mov	local02, #0
24560                 | LR__2873
24560                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
24560     04 E4 05 F1 | 	add	objptr, #4
24564     F2 12 02 FB | 	rdlong	arg01, objptr
24568     13 2F 02 F6 | 	mov	local05, local01
2456c     07 2E 66 F0 | 	shl	local05, #7
24570     17 13 02 F1 | 	add	arg01, local05
24574     14 13 02 F1 | 	add	arg01, local02
24578     20 14 06 F6 | 	mov	arg02, #32
2457c     01 16 06 F6 | 	mov	arg03, #1
24580     00 18 06 F6 | 	mov	arg04, #0
24584     01 1A 06 F6 | 	mov	arg05, #1
24588     0B 00 00 FF 
2458c     C8 E4 05 F1 | 	add	objptr, ##5832
24590     94 08 B0 FD | 	call	#_psram_spin2_fill
24594     0B 00 00 FF 
24598     CC E4 85 F1 | 	sub	objptr, ##5836
2459c     01 28 06 F1 | 	add	local02, #1
245a0     80 28 56 F2 | 	cmps	local02, #128 wc
245a4     B8 FF 9F CD |  if_b	jmp	#LR__2873
245a8     A7 F0 03 F6 | 	mov	ptra, fp
245ac     B2 00 A0 FD | 	call	#popregs_
245b0                 | _hg010b_spin2_scrolldown_ret
245b0     2D 00 64 FD | 	ret
245b4                 | 
245b4                 | ' 
245b4                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
245b4                 | ' 
245b4                 | ' pub crlf()
245b4                 | _hg010b_spin2_crlf
245b4                 | ' 
245b4                 | ' cursor_x:=leading_spaces*2
245b4     01 00 00 FF 
245b8     B6 E4 05 F1 | 	add	objptr, ##694
245bc     F2 16 02 FB | 	rdlong	arg03, objptr
245c0     01 16 66 F0 | 	shl	arg03, #1
245c4     01 00 00 FF 
245c8     7A E4 85 F1 | 	sub	objptr, ##634
245cc     F2 16 52 FC | 	wrword	arg03, objptr
245d0                 | ' cursor_y+=1
245d0     02 E4 05 F1 | 	add	objptr, #2
245d4     F2 16 C2 FA | 	rdbyte	arg03, objptr
245d8     01 16 06 F1 | 	add	arg03, #1
245dc     F2 16 42 FC | 	wrbyte	arg03, objptr
245e0                 | ' if cursor_y>st_lines-1
245e0     C3 E4 05 F1 | 	add	objptr, #195
245e4     F2 16 02 FB | 	rdlong	arg03, objptr
245e8     01 16 86 F1 | 	sub	arg03, #1
245ec     C3 E4 85 F1 | 	sub	objptr, #195
245f0     F2 14 C2 FA | 	rdbyte	arg02, objptr
245f4     3E E4 85 F1 | 	sub	objptr, #62
245f8     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
245fc     2C 00 90 ED |  if_be	jmp	#LR__2880
24600                 | '   scrollup2()
24600     00 12 06 F6 | 	mov	arg01, #0
24604     01 00 00 FF 
24608     58 14 06 F6 | 	mov	arg02, ##600
2460c     10 16 06 F6 | 	mov	arg03, #16
24610     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
24614                 | '   cursor_y:=st_lines-1
24614     01 E5 05 F1 | 	add	objptr, #257
24618     F2 16 02 FB | 	rdlong	arg03, objptr
2461c     01 16 86 F1 | 	sub	arg03, #1
24620     C3 E4 85 F1 | 	sub	objptr, #195
24624     F2 16 42 FC | 	wrbyte	arg03, objptr
24628     3E E4 85 F1 | 	sub	objptr, #62
2462c                 | LR__2880
2462c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
2462c     3C E4 05 F1 | 	add	objptr, #60
24630     F2 14 E2 FA | 	rdword	arg02, objptr
24634     02 14 66 F0 | 	shl	arg02, #2
24638     02 E4 05 F1 | 	add	objptr, #2
2463c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24640     3E E4 85 F1 | 	sub	objptr, #62
24644     04 16 66 F0 | 	shl	arg03, #4
24648     04 16 06 F1 | 	add	arg03, #4
2464c     11 12 06 F6 | 	mov	arg01, #17
24650     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
24654                 | _hg010b_spin2_crlf_ret
24654     2D 00 64 FD | 	ret
24658                 | 
24658                 | ' 
24658                 | ' 
24658                 | ' '*************************************************************************
24658                 | ' '                                                                        *
24658                 | ' '  Conversions                                                           *
24658                 | ' '                                                                        *
24658                 | ' '*************************************************************************
24658                 | ' 
24658                 | ' ''---------- Convert a integer to dec string, return a pointer
24658                 | ' 
24658                 | ' pub inttostr(i):result |q,pos,k,j
24658                 | _hg010b_spin2_inttostr
24658     03 4A 05 F6 | 	mov	COUNT_, #3
2465c     A8 00 A0 FD | 	call	#pushregs_
24660     09 27 0A F6 | 	mov	local01, arg01 wz
24664                 | ' 
24664                 | ' j:=i
24664                 | ' pos:=10
24664     0A 28 06 F6 | 	mov	local02, #10
24668                 | ' k:=0
24668     00 2A 06 F6 | 	mov	local03, #0
2466c                 | ' 
2466c                 | ' if (j==0)
2466c     18 00 90 5D |  if_ne	jmp	#LR__2890
24670                 | '   n_string[0]:=48
24670     4D E4 05 F1 | 	add	objptr, #77
24674     F2 60 48 FC | 	wrbyte	#48, objptr
24678                 | '   n_string[1]:=0
24678     01 E4 05 F1 | 	add	objptr, #1
2467c     F2 00 48 FC | 	wrbyte	#0, objptr
24680     4E E4 85 F1 | 	sub	objptr, #78
24684     C4 00 90 FD | 	jmp	#LR__2897
24688                 | LR__2890
24688                 | ' 
24688                 | ' else
24688                 | '   if (j<0)
24688     13 27 52 F6 | 	abs	local01, local01 wc
2468c                 | '     j:=0-j
2468c                 | '     k:=45
2468c     2D 2A 06 C6 |  if_b	mov	local03, #45
24690                 | ' 
24690                 | '   n_string[11]:=0
24690     58 E4 05 F1 | 	add	objptr, #88
24694     F2 00 48 FC | 	wrbyte	#0, objptr
24698     58 E4 85 F1 | 	sub	objptr, #88
2469c     97 24 48 FB | 	callpa	#(@LR__2892-@LR__2891)>>2,fcache_load_ptr_
246a0                 | '   repeat while (pos>-1)
246a0                 | LR__2891
246a0     00 28 56 F2 | 	cmps	local02, #0 wc
246a4     40 00 90 CD |  if_b	jmp	#LR__2893
246a8     13 FB 51 F6 | 	abs	result1, local01 wc
246ac     0A FA 15 FD | 	qdiv	result1, #10
246b0                 | '     q:=j//10
246b0     19 FA 61 FD | 	getqy	result1
246b4     FD FA 81 F6 | 	negc	result1, result1
246b8     13 27 52 F6 | 	abs	local01, local01 wc
246bc     0A 26 16 FD | 	qdiv	local01, #10
246c0                 | '     q:=48+q
246c0     30 FA 05 F1 | 	add	result1, #48
246c4                 | '     n_string[pos]:=q
246c4     14 27 02 F6 | 	mov	local01, local02
246c8     4D E4 05 F1 | 	add	objptr, #77
246cc     F2 26 02 F1 | 	add	local01, objptr
246d0     13 FB 41 FC | 	wrbyte	result1, local01
246d4                 | '     j:=j/10
246d4     4D E4 85 F1 | 	sub	objptr, #77
246d8                 | '     pos-=1
246d8     01 28 86 F1 | 	sub	local02, #1
246dc     18 26 62 FD | 	getqx	local01
246e0     13 27 82 F6 | 	negc	local01, local01
246e4     B8 FF 9F FD | 	jmp	#LR__2891
246e8                 | LR__2892
246e8                 | LR__2893
246e8                 | '   repeat while n_string[0]==48
246e8                 | LR__2894
246e8     4D E4 05 F1 | 	add	objptr, #77
246ec     F2 16 C2 FA | 	rdbyte	arg03, objptr
246f0     4D E4 85 F1 | 	sub	objptr, #77
246f4     30 16 0E F2 | 	cmp	arg03, #48 wz
246f8     20 00 90 5D |  if_ne	jmp	#LR__2895
246fc                 | '     bytemove(@n_string,@n_string+1,12)
246fc     4D E4 05 F1 | 	add	objptr, #77
24700     F2 12 02 F6 | 	mov	arg01, objptr
24704     F2 14 02 F6 | 	mov	arg02, objptr
24708     4D E4 85 F1 | 	sub	objptr, #77
2470c     01 14 06 F1 | 	add	arg02, #1
24710     0C 16 06 F6 | 	mov	arg03, #12
24714     80 11 B0 FD | 	call	#__system____builtin_memmove
24718     CC FF 9F FD | 	jmp	#LR__2894
2471c                 | LR__2895
2471c                 | ' 
2471c                 | '   if k==45
2471c     2D 2A 0E F2 | 	cmp	local03, #45 wz
24720     28 00 90 5D |  if_ne	jmp	#LR__2896
24724                 | '      bytemove(@n_string+1,@n_string,12)
24724     4D E4 05 F1 | 	add	objptr, #77
24728     F2 12 02 F6 | 	mov	arg01, objptr
2472c     01 12 06 F1 | 	add	arg01, #1
24730     F2 14 02 F6 | 	mov	arg02, objptr
24734     4D E4 85 F1 | 	sub	objptr, #77
24738     0C 16 06 F6 | 	mov	arg03, #12
2473c     58 11 B0 FD | 	call	#__system____builtin_memmove
24740                 | '      n_string[0]:=k
24740     4D E4 05 F1 | 	add	objptr, #77
24744     F2 2A 42 FC | 	wrbyte	local03, objptr
24748     4D E4 85 F1 | 	sub	objptr, #77
2474c                 | LR__2896
2474c                 | LR__2897
2474c                 | ' 
2474c                 | ' q:=@n_string
2474c     4D E4 05 F1 | 	add	objptr, #77
24750     F2 FA 01 F6 | 	mov	result1, objptr
24754     4D E4 85 F1 | 	sub	objptr, #77
24758                 | ' return q
24758     A7 F0 03 F6 | 	mov	ptra, fp
2475c     B2 00 A0 FD | 	call	#popregs_
24760                 | _hg010b_spin2_inttostr_ret
24760     2D 00 64 FD | 	ret
24764                 | 
24764                 | ' 
24764                 | ' '**********************************************************************************
24764                 | ' '
24764                 | ' '        Blitting
24764                 | ' '
24764                 | ' '**********************************************************************************
24764                 | ' 
24764                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
24764                 | _hg010b_spin2_blit
24764     18 4A 05 F6 | 	mov	COUNT_, #24
24768     A8 00 A0 FD | 	call	#pushregs_
2476c     09 27 02 F6 | 	mov	local01, arg01
24770     0A 29 02 F6 | 	mov	local02, arg02
24774     0B 2B 02 F6 | 	mov	local03, arg03
24778     0C 2D 02 F6 | 	mov	local04, arg04
2477c     0D 2F 02 F6 | 	mov	local05, arg05
24780     0E 31 02 F6 | 	mov	local06, arg06
24784     0F 33 02 F6 | 	mov	local07, arg07
24788     10 35 02 F6 | 	mov	local08, arg08
2478c     11 37 02 F6 | 	mov	local09, arg09
24790     12 39 02 F6 | 	mov	local10, arg10
24794                 | ' 
24794                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
24794     00 04 00 FF 
24798     00 26 56 F2 | 	cmps	local01, ##524288 wc
2479c     00 04 00 3F 
247a0     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
247a4     7C 01 90 CD |  if_b	jmp	#LR__2904
247a8     16 29 5A F2 | 	cmps	local02, local04 wcz
247ac     14 3B 02 16 |  if_a	mov	local11, local02
247b0     16 29 02 16 |  if_a	mov	local02, local04
247b4     1D 2D 02 16 |  if_a	mov	local04, local11
247b8     17 2B 5A F2 | 	cmps	local03, local05 wcz
247bc     15 3B 02 16 |  if_a	mov	local11, local03
247c0     17 2B 02 16 |  if_a	mov	local03, local05
247c4     18 2B 02 FD | 	qmul	local03, local06
247c8                 | '   if x1a>x2a
247c8                 | '     x1a,x2a:=x2a,x1a
247c8                 | '   if y1a>y2a
247c8                 | '     y1a,y2a:=y2a,y1a  
247c8     1D 2F 02 16 |  if_a	mov	local05, local11
247cc                 | ' 
247cc                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
247cc     19 3D 02 F6 | 	mov	local12, local07
247d0     14 3D 02 F1 | 	add	local12, local02
247d4     18 3A 62 FD | 	getqx	local11
247d8     1C 37 02 FD | 	qmul	local09, local10
247dc     1D 3D 02 F1 | 	add	local12, local11
247e0     13 3F 02 F6 | 	mov	local13, local01
247e4     1A 3F 02 F1 | 	add	local13, local08
247e8     18 3A 62 FD | 	getqx	local11
247ec     1D 3F 02 F1 | 	add	local13, local11
247f0     1F 3D 5A F2 | 	cmps	local12, local13 wcz
247f4     98 00 90 ED |  if_be	jmp	#LR__2901
247f8                 | '     repeat y from y1a to y2a
247f8     15 41 02 F6 | 	mov	local14, local03
247fc     15 2F 52 F2 | 	cmps	local05, local03 wc
24800     01 42 86 F6 | 	negc	local15, #1
24804     17 45 02 F6 | 	mov	local16, local05
24808     21 45 02 F1 | 	add	local16, local15
2480c     0B 00 00 FF 
24810     CC E4 05 F1 | 	add	objptr, ##5836
24814                 | LR__2900
24814     18 41 02 FD | 	qmul	local14, local06
24818                 | '   '    writeln(string("I am here"))
24818                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
24818     13 15 02 F6 | 	mov	arg02, local01
2481c     16 17 02 F6 | 	mov	arg03, local04
24820     14 17 82 F1 | 	sub	arg03, local02
24824     01 16 06 F1 | 	add	arg03, #1
24828     F6 03 00 FF 
2482c     00 12 06 F6 | 	mov	arg01, ##519168
24830     18 3E 62 FD | 	getqx	local13
24834     1F 15 02 F1 | 	add	arg02, local13
24838     14 15 02 F1 | 	add	arg02, local02
2483c     B0 04 B0 FD | 	call	#_psram_spin2_read1
24840     1B 3F 02 F6 | 	mov	local13, local09
24844     15 3F 82 F1 | 	sub	local13, local03
24848     20 3F 02 F1 | 	add	local13, local14
2484c     1C 3F 02 FD | 	qmul	local13, local10
24850                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
24850     19 15 02 F6 | 	mov	arg02, local07
24854     16 17 02 F6 | 	mov	arg03, local04
24858     14 17 82 F1 | 	sub	arg03, local02
2485c     01 16 06 F1 | 	add	arg03, #1
24860     F6 03 00 FF 
24864     00 12 06 F6 | 	mov	arg01, ##519168
24868     18 3E 62 FD | 	getqx	local13
2486c     1F 15 02 F1 | 	add	arg02, local13
24870     1A 15 02 F1 | 	add	arg02, local08
24874     14 05 B0 FD | 	call	#_psram_spin2_write
24878     21 41 02 F1 | 	add	local14, local15
2487c     22 41 0A F2 | 	cmp	local14, local16 wz
24880     90 FF 9F 5D |  if_ne	jmp	#LR__2900
24884     0B 00 00 FF 
24888     CC E4 85 F1 | 	sub	objptr, ##5836
2488c     94 00 90 FD | 	jmp	#LR__2903
24890                 | LR__2901
24890                 | '   else
24890                 | '     repeat y from y2a to y1a
24890     17 41 02 F6 | 	mov	local14, local05
24894     17 2B 52 F2 | 	cmps	local03, local05 wc
24898     01 46 86 F6 | 	negc	local17, #1
2489c     15 49 02 F6 | 	mov	local18, local03
248a0     23 49 02 F1 | 	add	local18, local17
248a4     0B 00 00 FF 
248a8     CC E4 05 F1 | 	add	objptr, ##5836
248ac                 | LR__2902
248ac     18 41 02 FD | 	qmul	local14, local06
248b0                 | '  '     writeln(string("I am there"))
248b0                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
248b0     13 15 02 F6 | 	mov	arg02, local01
248b4     16 17 02 F6 | 	mov	arg03, local04
248b8     14 17 82 F1 | 	sub	arg03, local02
248bc     01 16 06 F1 | 	add	arg03, #1
248c0     F6 03 00 FF 
248c4     00 12 06 F6 | 	mov	arg01, ##519168
248c8     18 44 62 FD | 	getqx	local16
248cc     22 15 02 F1 | 	add	arg02, local16
248d0     14 15 02 F1 | 	add	arg02, local02
248d4     18 04 B0 FD | 	call	#_psram_spin2_read1
248d8     1B 45 02 F6 | 	mov	local16, local09
248dc     15 45 82 F1 | 	sub	local16, local03
248e0     20 45 02 F1 | 	add	local16, local14
248e4     1C 45 02 FD | 	qmul	local16, local10
248e8                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
248e8     19 15 02 F6 | 	mov	arg02, local07
248ec     16 17 02 F6 | 	mov	arg03, local04
248f0     14 17 82 F1 | 	sub	arg03, local02
248f4     01 16 06 F1 | 	add	arg03, #1
248f8     F6 03 00 FF 
248fc     00 12 06 F6 | 	mov	arg01, ##519168
24900     18 44 62 FD | 	getqx	local16
24904     22 15 02 F1 | 	add	arg02, local16
24908     1A 15 02 F1 | 	add	arg02, local08
2490c     7C 04 B0 FD | 	call	#_psram_spin2_write
24910     23 41 02 F1 | 	add	local14, local17
24914     24 41 0A F2 | 	cmp	local14, local18 wz
24918     90 FF 9F 5D |  if_ne	jmp	#LR__2902
2491c     0B 00 00 FF 
24920     CC E4 85 F1 | 	sub	objptr, ##5836
24924                 | LR__2903
24924                 | LR__2904
24924                 | '     
24924                 | ' if ((f>=$80000) && (t<$80000)) 
24924     00 04 00 FF 
24928     00 26 56 F2 | 	cmps	local01, ##524288 wc
2492c     80 00 90 CD |  if_b	jmp	#LR__2906
24930     00 04 00 FF 
24934     00 32 56 F2 | 	cmps	local07, ##524288 wc
24938     74 00 90 3D |  if_ae	jmp	#LR__2906
2493c                 | '   repeat y from y1a to y2a
2493c     15 41 02 F6 | 	mov	local14, local03
24940     15 2F 52 F2 | 	cmps	local05, local03 wc
24944     01 4A 86 F6 | 	negc	local19, #1
24948     17 4D 02 F6 | 	mov	local20, local05
2494c     25 4D 02 F1 | 	add	local20, local19
24950     0B 00 00 FF 
24954     CC E4 05 F1 | 	add	objptr, ##5836
24958                 | LR__2905
24958     1B 49 02 F6 | 	mov	local18, local09
2495c     15 49 82 F1 | 	sub	local18, local03
24960     20 49 02 F1 | 	add	local18, local14
24964     1C 49 02 FD | 	qmul	local18, local10
24968                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
24968     19 13 02 F6 | 	mov	arg01, local07
2496c     18 48 62 FD | 	getqx	local18
24970     18 41 02 FD | 	qmul	local14, local06
24974     24 13 02 F1 | 	add	arg01, local18
24978     1A 13 02 F1 | 	add	arg01, local08
2497c     13 15 02 F6 | 	mov	arg02, local01
24980     16 17 02 F6 | 	mov	arg03, local04
24984     14 17 82 F1 | 	sub	arg03, local02
24988     01 16 06 F1 | 	add	arg03, #1
2498c     18 48 62 FD | 	getqx	local18
24990     24 15 02 F1 | 	add	arg02, local18
24994     14 15 02 F1 | 	add	arg02, local02
24998     54 03 B0 FD | 	call	#_psram_spin2_read1
2499c     25 41 02 F1 | 	add	local14, local19
249a0     26 41 0A F2 | 	cmp	local14, local20 wz
249a4     B0 FF 9F 5D |  if_ne	jmp	#LR__2905
249a8     0B 00 00 FF 
249ac     CC E4 85 F1 | 	sub	objptr, ##5836
249b0                 | LR__2906
249b0                 | '     
249b0                 | ' if ((f<$80000) && (t>=$80000)) 
249b0     00 04 00 FF 
249b4     00 26 56 F2 | 	cmps	local01, ##524288 wc
249b8     84 00 90 3D |  if_ae	jmp	#LR__2908
249bc     00 04 00 FF 
249c0     00 32 56 F2 | 	cmps	local07, ##524288 wc
249c4     78 00 90 CD |  if_b	jmp	#LR__2908
249c8                 | '   t:=t & $FFFFFFF
249c8     7C 32 06 F4 | 	bitl	local07, #124
249cc                 | '   repeat y from y1a to y2a
249cc     15 41 02 F6 | 	mov	local14, local03
249d0     15 2F 52 F2 | 	cmps	local05, local03 wc
249d4     01 4E 86 F6 | 	negc	local21, #1
249d8     17 51 02 F6 | 	mov	local22, local05
249dc     27 51 02 F1 | 	add	local22, local21
249e0     0B 00 00 FF 
249e4     CC E4 05 F1 | 	add	objptr, ##5836
249e8                 | LR__2907
249e8     18 41 02 FD | 	qmul	local14, local06
249ec                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
249ec     13 13 02 F6 | 	mov	arg01, local01
249f0     1B 4D 02 F6 | 	mov	local20, local09
249f4     15 4D 82 F1 | 	sub	local20, local03
249f8     20 4D 02 F1 | 	add	local20, local14
249fc     18 4A 62 FD | 	getqx	local19
24a00     1C 4D 02 FD | 	qmul	local20, local10
24a04     25 13 02 F1 | 	add	arg01, local19
24a08     14 13 02 F1 | 	add	arg01, local02
24a0c     19 15 02 F6 | 	mov	arg02, local07
24a10     16 17 02 F6 | 	mov	arg03, local04
24a14     14 17 82 F1 | 	sub	arg03, local02
24a18     01 16 06 F1 | 	add	arg03, #1
24a1c     18 4C 62 FD | 	getqx	local20
24a20     26 15 02 F1 | 	add	arg02, local20
24a24     1A 15 02 F1 | 	add	arg02, local08
24a28     60 03 B0 FD | 	call	#_psram_spin2_write
24a2c     27 41 02 F1 | 	add	local14, local21
24a30     28 41 0A F2 | 	cmp	local14, local22 wz
24a34     B0 FF 9F 5D |  if_ne	jmp	#LR__2907
24a38     0B 00 00 FF 
24a3c     CC E4 85 F1 | 	sub	objptr, ##5836
24a40                 | LR__2908
24a40                 | '     
24a40                 | ' if ((f<$80000) && (t<$80000)) 
24a40     00 04 00 FF 
24a44     00 26 56 F2 | 	cmps	local01, ##524288 wc
24a48     00 04 00 CF 
24a4c     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
24a50     64 00 90 3D |  if_ae	jmp	#LR__2910
24a54                 | '   repeat y from y1a to y2a
24a54     15 41 02 F6 | 	mov	local14, local03
24a58     15 2F 52 F2 | 	cmps	local05, local03 wc
24a5c     01 52 86 F6 | 	negc	local23, #1
24a60     17 55 02 F6 | 	mov	local24, local05
24a64     29 55 02 F1 | 	add	local24, local23
24a68                 | LR__2909
24a68     18 41 02 FD | 	qmul	local14, local06
24a6c                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
24a6c     13 13 02 F6 | 	mov	arg01, local01
24a70     1B 51 02 F6 | 	mov	local22, local09
24a74     15 51 82 F1 | 	sub	local22, local03
24a78     20 51 02 F1 | 	add	local22, local14
24a7c     18 4E 62 FD | 	getqx	local21
24a80     1C 51 02 FD | 	qmul	local22, local10
24a84     27 13 02 F1 | 	add	arg01, local21
24a88     14 13 02 F1 | 	add	arg01, local02
24a8c     19 15 02 F6 | 	mov	arg02, local07
24a90     16 17 02 F6 | 	mov	arg03, local04
24a94     14 17 82 F1 | 	sub	arg03, local02
24a98     01 16 06 F1 | 	add	arg03, #1
24a9c     18 50 62 FD | 	getqx	local22
24aa0     28 15 02 F1 | 	add	arg02, local22
24aa4     1A 15 02 F1 | 	add	arg02, local08
24aa8     EC 0D B0 FD | 	call	#__system____builtin_memmove
24aac     29 41 02 F1 | 	add	local14, local23
24ab0     2A 41 0A F2 | 	cmp	local14, local24 wz
24ab4     B0 FF 9F 5D |  if_ne	jmp	#LR__2909
24ab8                 | LR__2910
24ab8     A7 F0 03 F6 | 	mov	ptra, fp
24abc     B2 00 A0 FD | 	call	#popregs_
24ac0                 | _hg010b_spin2_blit_ret
24ac0     2D 00 64 FD | 	ret
24ac4                 | 
24ac4                 | ' 
24ac4                 | ' '..............................................................................
24ac4                 | ' 
24ac4                 | ' {{
24ac4                 | ' }}
24ac4                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
24ac4                 | _psram_spin2_startx
24ac4     04 4A 05 F6 | 	mov	COUNT_, #4
24ac8     A8 00 A0 FD | 	call	#pushregs_
24acc     09 27 02 F6 | 	mov	local01, arg01
24ad0     0B 29 02 F6 | 	mov	local02, arg03
24ad4     0C 2B 02 F6 | 	mov	local03, arg04
24ad8                 | '     stop() ' restart driver if required
24ad8     54 01 B0 FD | 	call	#_psram_spin2_stop
24adc     00 26 0E F2 | 	cmp	local01, #0 wz
24ae0     14 26 06 AB |  if_e	rdlong	local01, #20
24ae4     13 15 52 F6 | 	abs	arg02, local01 wc
24ae8     A1 07 00 FF 
24aec     40 14 16 FD | 	qdiv	arg02, ##1000000
24af0                 | ' 
24af0                 | '     ' use current frequency if none specified
24af0                 | ' 
24af0                 | '     if freq == 0 
24af0                 | '         freq := clkfreq 
24af0                 | ' 
24af0                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
24af0                 | ' 
24af0                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
24af0                 | '     if burst < 0
24af0                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
24af0     18 14 62 FD | 	getqx	arg02
24af4     0A 19 82 F6 | 	negc	arg04, arg02
24af8     03 18 66 F0 | 	shl	arg04, #3
24afc     84 18 86 F1 | 	sub	arg04, #132
24b00     04 18 46 F0 | 	shr	arg04, #4
24b04     04 18 66 F0 | 	shl	arg04, #4
24b08     00 18 56 F2 | 	cmps	arg04, #0 wc
24b0c     0E FA 65 C6 |  if_b	neg	result1, #14
24b10     10 01 90 CD |  if_b	jmp	#LR__2923
24b14                 | ' 
24b14                 | '     ' compute the input delay
24b14                 | ' 
24b14                 | '     if delay <= 0
24b14     01 28 56 F2 | 	cmps	local02, #1 wc
24b18     10 00 90 3D |  if_ae	jmp	#LR__2920
24b1c                 | '         delay := lookupDelay(freq)
24b1c     13 13 02 F6 | 	mov	arg01, local01
24b20     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
24b24     FD 28 02 F6 | 	mov	local02, result1
24b28     04 00 90 FD | 	jmp	#LR__2921
24b2c                 | LR__2920
24b2c                 | '     else
24b2c                 | '         delay <#= $f ' limit to 15
24b2c     0F 28 66 F3 | 	fles	local02, #15
24b30                 | LR__2921
24b30                 | ' 
24b30                 | '     ' create our lock
24b30                 | ' 
24b30                 | '     driverlock := LOCKNEW()  
24b30     00 FA 05 F6 | 	mov	result1, #0
24b34     04 FA 61 FD | 	locknew	result1
24b38     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
24b3c     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
24b40                 | '     if driverlock == -1
24b40     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24b44     FF FF 7F FF 
24b48     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24b4c                 | '         return ERR_NO_LOCK
24b4c     1A FA 65 A6 |  if_e	neg	result1, #26
24b50     D0 00 90 AD |  if_e	jmp	#LR__2923
24b54                 | ' 
24b54                 | '     ' patch in the proper data and HUB addresses to the startup structure
24b54                 | ' 
24b54                 | '     long[@startupData][0]:=clkfreq
24b54     14 26 06 FB | 	rdlong	local01, #20
24b58     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
24b5c     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
24b60                 | ' '    long[@startupData][1]:=$1000_0000
24b60                 | '     long[@startupData][5]:=@deviceData
24b60     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
24b64     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
24b68     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
24b6c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
24b70     14 14 06 F1 | 	add	arg02, #20
24b74     0A 27 62 FC | 	wrlong	local01, arg02
24b78                 | '     long[@startupData][6]:=@qosData
24b78     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
24b7c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
24b80     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
24b84     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
24b88     18 14 06 F1 | 	add	arg02, #24
24b8c     0A 27 62 FC | 	wrlong	local01, arg02
24b90                 | '     long[@startupData][7]:=$7FF00
24b90     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
24b94     1C 26 06 F1 | 	add	local01, #28
24b98     FF 03 80 FF 
24b9c     13 01 6A FC | 	wrlong	##524032, local01
24ba0                 | ' 
24ba0                 | '     ' setup some default bank and QoS parameter values
24ba0                 | ' 
24ba0                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
24ba0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
24ba4     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
24ba8     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
24bac     10 18 66 F0 | 	shl	arg04, #16
24bb0     0C 28 66 F0 | 	shl	local02, #12
24bb4     14 19 42 F5 | 	or	arg04, local02
24bb8     18 18 46 F5 | 	or	arg04, #24
24bbc     0C 15 02 F6 | 	mov	arg02, arg04
24bc0     02 16 06 F6 | 	mov	arg03, #2
24bc4     A0 00 A0 FD | 	call	#\builtin_longfill_
24bc8                 | '     longfill(@qosData, $FFFF0000, 8)
24bc8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
24bcc     07 16 06 F6 | 	mov	arg03, #7
24bd0     28 16 62 FD | 	setq	arg03
24bd4     80 FF FF FF 
24bd8     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
24bdc                 | ' 
24bdc                 | '     ' get the address of the PSRAM memory driver so we can start it
24bdc                 | ' 
24bdc                 | '     driverAddr:= driver.getDriverAddr()
24bdc                 | '     return @driver_start
24bdc     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
24be0     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
24be4     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
24be8                 | ' 
24be8                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
24be8                 | ' 
24be8                 | '     if desiredcog < 0
24be8     00 2A 56 F2 | 	cmps	local03, #0 wc
24bec                 | '         desiredcog := NEWCOG
24bec     10 2A 06 C6 |  if_b	mov	local03, #16
24bf0                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
24bf0     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
24bf4     15 2D 02 F6 | 	mov	local04, local03
24bf8     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
24bfc     0A 2D F2 FC | 	coginit	local04, arg02 wc
24c00     01 2C 66 C6 |  if_b	neg	local04, #1
24c04     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
24c08     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
24c0c                 | '     repeat until long[@startupData] == 0 
24c0c     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
24c10                 | LR__2922
24c10     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
24c14     F8 FF 9F 5D |  if_ne	jmp	#LR__2922
24c18                 | ' 
24c18                 | '     return drivercog
24c18     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
24c1c     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
24c20     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24c24                 | LR__2923
24c24     A7 F0 03 F6 | 	mov	ptra, fp
24c28     B2 00 A0 FD | 	call	#popregs_
24c2c                 | _psram_spin2_startx_ret
24c2c     2D 00 64 FD | 	ret
24c30                 | 
24c30                 | ' 
24c30                 | ' '..............................................................................
24c30                 | ' 
24c30                 | ' {{
24c30                 | ' }}
24c30                 | ' PUB stop() : i
24c30                 | _psram_spin2_stop
24c30     00 00 06 F6 | 	mov	_var01, #0
24c34                 | '     if drivercog <> -1
24c34     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24c38     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24c3c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24c40     FF FF 7F FF 
24c44     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
24c48     70 00 90 AD |  if_e	jmp	#LR__2933
24c4c                 | '         cogstop(drivercog) ' a rather brutal stop
24c4c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24c50     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24c54     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24c58     03 12 62 FD | 	cogstop	arg01
24c5c     97 26 48 FB | 	callpa	#(@LR__2932-@LR__2930)>>2,fcache_load_ptr_
24c60                 | '         repeat i from 0 to 7
24c60                 | LR__2930
24c60                 | '             if long[$7FF00][i*3] < 0
24c60     00 FB 01 F6 | 	mov	result1, _var01
24c64     01 FA 65 F0 | 	shl	result1, #1
24c68     00 FB 01 F1 | 	add	result1, _var01
24c6c     02 FA 65 F0 | 	shl	result1, #2
24c70     FF 03 00 FF 
24c74     00 FB 05 F1 | 	add	result1, ##524032
24c78     FD FA 01 FB | 	rdlong	result1, result1
24c7c     00 FA 55 F2 | 	cmps	result1, #0 wc
24c80     1C 00 90 3D |  if_ae	jmp	#LR__2931
24c84                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
24c84     00 FB 01 F6 | 	mov	result1, _var01
24c88     01 FA 65 F0 | 	shl	result1, #1
24c8c     00 FB 01 F1 | 	add	result1, _var01
24c90     02 FA 65 F0 | 	shl	result1, #2
24c94     FF 03 00 FF 
24c98     00 FB 05 F1 | 	add	result1, ##524032
24c9c     FD 20 68 FC | 	wrlong	#16, result1
24ca0                 | LR__2931
24ca0     01 00 06 F1 | 	add	_var01, #1
24ca4     08 00 56 F2 | 	cmps	_var01, #8 wc
24ca8     B4 FF 9F CD |  if_b	jmp	#LR__2930
24cac                 | LR__2932
24cac                 | '         drivercog := -1
24cac     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24cb0     FF FF FF FF 
24cb4     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
24cb8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24cbc                 | LR__2933
24cbc                 | '     if driverlock <> -1
24cbc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
24cc0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
24cc4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24cc8     FF FF 7F FF 
24ccc     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
24cd0                 | '         LOCKRET(driverlock)
24cd0     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
24cd4     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
24cd8     05 12 62 5D |  if_ne	lockret	arg01
24cdc                 | '         driverlock := -1
24cdc     FF FF FF 5F 
24ce0     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
24ce4     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
24ce8     00 FB 01 F6 | 	mov	result1, _var01
24cec                 | _psram_spin2_stop_ret
24cec     2D 00 64 FD | 	ret
24cf0                 | 
24cf0                 | ' 
24cf0                 | ' '..............................................................................
24cf0                 | ' 
24cf0                 | ' {{
24cf0                 | ' }}
24cf0                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
24cf0                 | _psram_spin2_read1
24cf0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
24cf0                 | '     if drivercog == -1 ' driver must be running
24cf0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24cf4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
24cf8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24cfc     FF FF 7F FF 
24d00     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
24d04                 | '         return ERR_INACTIVE
24d04     0F FA 65 A6 |  if_e	neg	result1, #15
24d08     7C 00 90 AD |  if_e	jmp	#LR__2941
24d0c                 | '     if count == 0 ' don't even bother reading
24d0c     00 16 0E F2 | 	cmp	arg03, #0 wz
24d10                 | '         return 0
24d10     00 FA 05 A6 |  if_e	mov	result1, #0
24d14     70 00 90 AD |  if_e	jmp	#LR__2941
24d18                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
24d18     00 FA 05 F6 | 	mov	result1, #0
24d1c     01 FA 61 FD | 	cogid	result1
24d20     FD 00 02 F6 | 	mov	_var01, result1
24d24     01 00 66 F0 | 	shl	_var01, #1
24d28     FD 00 02 F1 | 	add	_var01, result1
24d2c     02 00 66 F0 | 	shl	_var01, #2
24d30     FF 03 00 FF 
24d34     00 03 06 F6 | 	mov	_var02, ##524032
24d38     00 03 02 F1 | 	add	_var02, _var01
24d3c                 | '     if long[mailbox] < 0
24d3c     01 01 02 FB | 	rdlong	_var01, _var02
24d40     00 00 56 F2 | 	cmps	_var01, #0 wc
24d44                 | '         return ERR_MAILBOX_BUSY
24d44     1C FA 65 C6 |  if_b	neg	result1, #28
24d48     3C 00 90 CD |  if_b	jmp	#LR__2941
24d4c                 | '     long[mailbox][2] := count
24d4c     08 02 06 F1 | 	add	_var02, #8
24d50     01 17 62 FC | 	wrlong	arg03, _var02
24d54                 | '     long[mailbox][1] := dstHubAddr
24d54     04 02 86 F1 | 	sub	_var02, #4
24d58     01 13 62 FC | 	wrlong	arg01, _var02
24d5c     04 02 86 F1 | 	sub	_var02, #4
24d60                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
24d60     0A 05 02 F6 | 	mov	_var03, arg02
24d64     D9 04 06 F4 | 	bitl	_var03, #217
24d68     00 00 58 FF 
24d6c     00 00 06 F6 | 	mov	_var01, ##-1342177280
24d70     02 01 02 F1 | 	add	_var01, _var03
24d74     01 01 62 FC | 	wrlong	_var01, _var02
24d78                 | '     repeat
24d78                 | LR__2940
24d78                 | '         result := long[mailbox]    
24d78     01 05 02 FB | 	rdlong	_var03, _var02
24d7c     00 04 56 F2 | 	cmps	_var03, #0 wc
24d80     F4 FF 9F CD |  if_b	jmp	#LR__2940
24d84                 | '     while result < 0   
24d84                 | '     return -result                       'return success or error
24d84     02 FB 61 F6 | 	neg	result1, _var03
24d88                 | LR__2941
24d88                 | _psram_spin2_read1_ret
24d88     2D 00 64 FD | 	ret
24d8c                 | 
24d8c                 | ' 
24d8c                 | ' '..............................................................................
24d8c                 | ' 
24d8c                 | ' {{
24d8c                 | ' }}
24d8c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
24d8c                 | _psram_spin2_write
24d8c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
24d8c                 | '     if drivercog == -1 ' driver must be running
24d8c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24d90     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
24d94     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24d98     FF FF 7F FF 
24d9c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
24da0                 | '         return ERR_INACTIVE
24da0     0F FA 65 A6 |  if_e	neg	result1, #15
24da4     7C 00 90 AD |  if_e	jmp	#LR__2951
24da8                 | '     if count == 0 ' don't even bother writing
24da8     00 16 0E F2 | 	cmp	arg03, #0 wz
24dac                 | '         return 0
24dac     00 FA 05 A6 |  if_e	mov	result1, #0
24db0     70 00 90 AD |  if_e	jmp	#LR__2951
24db4                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
24db4     00 FA 05 F6 | 	mov	result1, #0
24db8     01 FA 61 FD | 	cogid	result1
24dbc     FD 00 02 F6 | 	mov	_var01, result1
24dc0     01 00 66 F0 | 	shl	_var01, #1
24dc4     FD 00 02 F1 | 	add	_var01, result1
24dc8     02 00 66 F0 | 	shl	_var01, #2
24dcc     FF 03 00 FF 
24dd0     00 03 06 F6 | 	mov	_var02, ##524032
24dd4     00 03 02 F1 | 	add	_var02, _var01
24dd8                 | '     if long[mailbox] < 0
24dd8     01 01 02 FB | 	rdlong	_var01, _var02
24ddc     00 00 56 F2 | 	cmps	_var01, #0 wc
24de0                 | '         return ERR_MAILBOX_BUSY
24de0     1C FA 65 C6 |  if_b	neg	result1, #28
24de4     3C 00 90 CD |  if_b	jmp	#LR__2951
24de8                 | '     long[mailbox][2] := count
24de8     08 02 06 F1 | 	add	_var02, #8
24dec     01 17 62 FC | 	wrlong	arg03, _var02
24df0                 | '     long[mailbox][1] := srcHubAddr
24df0     04 02 86 F1 | 	sub	_var02, #4
24df4     01 13 62 FC | 	wrlong	arg01, _var02
24df8     04 02 86 F1 | 	sub	_var02, #4
24dfc                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
24dfc     0A 05 02 F6 | 	mov	_var03, arg02
24e00     D9 04 06 F4 | 	bitl	_var03, #217
24e04     00 00 78 FF 
24e08     00 00 06 F6 | 	mov	_var01, ##-268435456
24e0c     02 01 02 F1 | 	add	_var01, _var03
24e10     01 01 62 FC | 	wrlong	_var01, _var02
24e14                 | '     repeat
24e14                 | LR__2950
24e14                 | '         result := long[mailbox]    
24e14     01 05 02 FB | 	rdlong	_var03, _var02
24e18     00 04 56 F2 | 	cmps	_var03, #0 wc
24e1c     F4 FF 9F CD |  if_b	jmp	#LR__2950
24e20                 | '     while result < 0   
24e20                 | '     return -result                       'return success or error
24e20     02 FB 61 F6 | 	neg	result1, _var03
24e24                 | LR__2951
24e24                 | _psram_spin2_write_ret
24e24     2D 00 64 FD | 	ret
24e28                 | 
24e28                 | ' 
24e28                 | ' ' generalized fill
24e28                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
24e28                 | _psram_spin2_fill
24e28     09 01 02 F6 | 	mov	_var01, arg01
24e2c     0A 03 02 F6 | 	mov	_var02, arg02
24e30     0B 05 02 F6 | 	mov	_var03, arg03
24e34     0D 07 02 F6 | 	mov	_var04, arg05
24e38                 | '     case datasize 
24e38     01 06 86 F1 | 	sub	_var04, #1
24e3c     04 06 26 F3 | 	fle	_var04, #4
24e40     30 06 62 FD | 	jmprel	_var04
24e44                 | LR__2960
24e44     10 00 90 FD | 	jmp	#LR__2961
24e48     18 00 90 FD | 	jmp	#LR__2962
24e4c     2C 00 90 FD | 	jmp	#LR__2964
24e50     1C 00 90 FD | 	jmp	#LR__2963
24e54     24 00 90 FD | 	jmp	#LR__2964
24e58                 | LR__2961
24e58                 | '         1: req := driver.R_WRITEBYTE
24e58     00 00 60 FF 
24e5c     00 08 06 F6 | 	mov	_var05, ##-1073741824
24e60     20 00 90 FD | 	jmp	#LR__2965
24e64                 | LR__2962
24e64                 | '         2: req := driver.R_WRITEWORD
24e64     00 00 68 FF 
24e68     00 08 06 F6 | 	mov	_var05, ##-805306368
24e6c     14 00 90 FD | 	jmp	#LR__2965
24e70                 | LR__2963
24e70                 | '         4: req := driver.R_WRITELONG
24e70     00 00 70 FF 
24e74     00 08 06 F6 | 	mov	_var05, ##-536870912
24e78     08 00 90 FD | 	jmp	#LR__2965
24e7c                 | LR__2964
24e7c                 | '         other : return ERR_INVALID
24e7c     06 FA 65 F6 | 	neg	result1, #6
24e80     94 00 90 FD | 	jmp	#LR__2967
24e84                 | LR__2965
24e84                 | '     if count == 0   ' nothing to do
24e84     00 04 0E F2 | 	cmp	_var03, #0 wz
24e88                 | '         return 0
24e88     00 FA 05 A6 |  if_e	mov	result1, #0
24e8c     88 00 90 AD |  if_e	jmp	#LR__2967
24e90                 | '     if drivercog == -1
24e90     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24e94     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
24e98     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24e9c     FF FF 7F FF 
24ea0     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
24ea4                 | '         return ERR_INACTIVE
24ea4     0F FA 65 A6 |  if_e	neg	result1, #15
24ea8     6C 00 90 AD |  if_e	jmp	#LR__2967
24eac                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
24eac     00 FA 05 F6 | 	mov	result1, #0
24eb0     01 FA 61 FD | 	cogid	result1
24eb4     FD 06 02 F6 | 	mov	_var04, result1
24eb8     01 06 66 F0 | 	shl	_var04, #1
24ebc     FD 06 02 F1 | 	add	_var04, result1
24ec0     02 06 66 F0 | 	shl	_var04, #2
24ec4     FF 03 00 FF 
24ec8     00 0B 06 F6 | 	mov	_var06, ##524032
24ecc     03 0B 02 F1 | 	add	_var06, _var04
24ed0                 | '     if long[mailbox] < 0
24ed0     05 07 02 FB | 	rdlong	_var04, _var06
24ed4     00 06 56 F2 | 	cmps	_var04, #0 wc
24ed8                 | '         return ERR_MAILBOX_BUSY
24ed8     1C FA 65 C6 |  if_b	neg	result1, #28
24edc     38 00 90 CD |  if_b	jmp	#LR__2967
24ee0                 | '     long[mailbox][2] := count
24ee0     08 0A 06 F1 | 	add	_var06, #8
24ee4     05 05 62 FC | 	wrlong	_var03, _var06
24ee8                 | '     long[mailbox][1] := pattern
24ee8     04 0A 86 F1 | 	sub	_var06, #4
24eec     05 03 62 FC | 	wrlong	_var02, _var06
24ef0     04 0A 86 F1 | 	sub	_var06, #4
24ef4                 | '     long[mailbox] := req + (addr & $1ffffff)
24ef4     04 0D 02 F6 | 	mov	_var07, _var05
24ef8     00 0F 02 F6 | 	mov	_var08, _var01
24efc     D9 0E 06 F4 | 	bitl	_var08, #217
24f00     07 0D 02 F1 | 	add	_var07, _var08
24f04     05 0D 62 FC | 	wrlong	_var07, _var06
24f08                 | '     repeat
24f08                 | LR__2966
24f08                 | '         r := long[mailbox]
24f08     05 0F 02 FB | 	rdlong	_var08, _var06
24f0c     00 0E 56 F2 | 	cmps	_var08, #0 wc
24f10     F4 FF 9F CD |  if_b	jmp	#LR__2966
24f14                 | '     while r < 0
24f14                 | '     return -r                  ' return 0 for success or negated error code
24f14     07 FB 61 F6 | 	neg	result1, _var08
24f18                 | LR__2967
24f18                 | _psram_spin2_fill_ret
24f18     2D 00 64 FD | 	ret
24f1c                 | 
24f1c                 | ' 
24f1c                 | ' '..............................................................................
24f1c                 | ' 
24f1c                 | ' {{
24f1c                 | ' }}
24f1c                 | ' PUB setQos(cog, qos) : result | mailbox
24f1c                 | _psram_spin2_setQos
24f1c     09 01 02 F6 | 	mov	_var01, arg01
24f20                 | '     if drivercog == -1 ' driver must be running
24f20     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24f24     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
24f28     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24f2c     FF FF 7F FF 
24f30     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
24f34                 | '         return ERR_INACTIVE
24f34     0F FA 65 A6 |  if_e	neg	result1, #15
24f38     9C 00 90 AD |  if_e	jmp	#LR__2974
24f3c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
24f3c     00 00 56 F2 | 	cmps	_var01, #0 wc
24f40     08 00 90 CD |  if_b	jmp	#LR__2970
24f44     08 00 56 F2 | 	cmps	_var01, #8 wc
24f48     08 00 90 CD |  if_b	jmp	#LR__2971
24f4c                 | LR__2970
24f4c                 | '         return ERR_INVALID
24f4c     06 FA 65 F6 | 	neg	result1, #6
24f50     84 00 90 FD | 	jmp	#LR__2974
24f54                 | LR__2971
24f54                 | '     long[@qosData][cog] := qos & !$1ff
24f54     FF 15 26 F5 | 	andn	arg02, #511
24f58     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
24f5c     02 00 66 F0 | 	shl	_var01, #2
24f60     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
24f64     00 15 62 FC | 	wrlong	arg02, _var01
24f68                 | '     mailbox := $7FF00 + drivercog*12
24f68     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
24f6c     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
24f70     02 07 02 F6 | 	mov	_var04, _var03
24f74     01 06 66 F0 | 	shl	_var04, #1
24f78     02 07 02 F1 | 	add	_var04, _var03
24f7c     02 06 66 F0 | 	shl	_var04, #2
24f80     FF 03 00 FF 
24f84     00 09 06 F6 | 	mov	_var05, ##524032
24f88     03 09 02 F1 | 	add	_var05, _var04
24f8c                 | '     repeat until LOCKTRY(driverlock)
24f8c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
24f90                 | LR__2972
24f90     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24f94     06 12 72 FD | 	locktry	arg01 wc
24f98     F4 FF 9F 3D |  if_ae	jmp	#LR__2972
24f9c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24fa0                 | '     long[mailbox] := driver.R_CONFIG + cogid()
24fa0     00 06 06 F6 | 	mov	_var04, #0
24fa4     01 06 62 FD | 	cogid	_var04
24fa8     00 00 78 FF 
24fac     00 02 06 F6 | 	mov	_var02, ##-268435456
24fb0     03 03 02 F1 | 	add	_var02, _var04
24fb4     04 03 62 FC | 	wrlong	_var02, _var05
24fb8                 | '     repeat while long[mailbox] < 0
24fb8                 | LR__2973
24fb8     04 03 02 FB | 	rdlong	_var02, _var05
24fbc     00 02 56 F2 | 	cmps	_var02, #0 wc
24fc0     F4 FF 9F CD |  if_b	jmp	#LR__2973
24fc4                 | '     LOCKREL(driverlock)
24fc4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
24fc8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24fcc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24fd0     07 12 72 FD | 	lockrel	arg01 wc
24fd4     00 FA 05 F6 | 	mov	result1, #0
24fd8                 | LR__2974
24fd8                 | _psram_spin2_setQos_ret
24fd8     2D 00 64 FD | 	ret
24fdc                 | 
24fdc                 | ' 
24fdc                 | ' '..............................................................................
24fdc                 | ' 
24fdc                 | ' {{
24fdc                 | ' }}
24fdc                 | ' PRI lookupDelay(freq) : delay | profile
24fdc                 | _psram_spin2_lookupDelay
24fdc                 | '     profile := @delayTable
24fdc     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
24fe0     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
24fe4                 | '     delay := long[profile][0]
24fe4     00 03 02 FB | 	rdlong	_var02, _var01
24fe8                 | '     repeat while long[profile][1] 
24fe8     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
24fec     97 16 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
24ff0                 | LR__2980
24ff0     04 00 06 F1 | 	add	_var01, #4
24ff4     00 FB 09 FB | 	rdlong	result1, _var01 wz
24ff8     04 00 86 F1 | 	sub	_var01, #4
24ffc     1C 00 90 AD |  if_e	jmp	#LR__2982
25000                 | '         if freq +< long[profile][1] 
25000     04 00 06 F1 | 	add	_var01, #4
25004     00 FB 01 FB | 	rdlong	result1, _var01
25008     04 00 86 F1 | 	sub	_var01, #4
2500c     FD 12 12 F2 | 	cmp	arg01, result1 wc
25010                 | '             quit
25010                 | '         profile += 4
25010     04 00 06 31 |  if_ae	add	_var01, #4
25014                 | '         delay++
25014     01 02 06 31 |  if_ae	add	_var02, #1
25018     D4 FF 9F 3D |  if_ae	jmp	#LR__2980
2501c                 | LR__2981
2501c                 | LR__2982
2501c     01 FB 01 F6 | 	mov	result1, _var02
25020                 | _psram_spin2_lookupDelay_ret
25020     2D 00 64 FD | 	ret
25024                 | 
25024                 | ' 
25024                 | ' PUB start() : r
25024                 | _usbnew_spin2_start
25024     00 00 06 F6 | 	mov	_var01, #0
25028                 | '   ifnot driver_cog
25028     15 00 00 FF 
2502c     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
25030     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
25034     15 00 00 FF 
25038     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
2503c     38 00 90 5D |  if_ne	jmp	#LR__2990
25040                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
25040     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
25044     10 00 06 F6 | 	mov	_var01, #16
25048     00 16 06 F6 | 	mov	arg03, #0
2504c     28 16 62 FD | 	setq	arg03
25050     0A 01 F2 FC | 	coginit	_var01, arg02 wc
25054     01 00 66 C6 |  if_b	neg	_var01, #1
25058                 | '     if r >= 0
25058     00 00 56 F2 | 	cmps	_var01, #0 wc
2505c                 | '       driver_cog := r+1
2505c     00 03 02 36 |  if_ae	mov	_var02, _var01
25060     01 02 06 31 |  if_ae	add	_var02, #1
25064     15 00 00 3F 
25068     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
2506c     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
25070     15 00 00 3F 
25074     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
25078                 | LR__2990
25078     00 FB 01 F6 | 	mov	result1, _var01
2507c                 | _usbnew_spin2_start_ret
2507c     2D 00 64 FD | 	ret
25080                 | 
25080                 | '     '' (Always enabled)
25080                 | ' 
25080                 | ' '' Get current pressed state of a keyboard key
25080                 | ' PUB keystate(key) : r | buf[2],tmp
25080                 | _usbnew_spin2_keystate
25080     00 04 06 F6 | 	mov	_var03, #0
25084                 | '   if key >= $E0 && key < $E8
25084     E0 12 56 F2 | 	cmps	arg01, #224 wc
25088     34 00 90 CD |  if_b	jmp	#LR__3000
2508c     E8 12 56 F2 | 	cmps	arg01, #232 wc
25090     2C 00 90 3D |  if_ae	jmp	#LR__3000
25094                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
25094     00 FA 05 F6 | 	mov	result1, #0
25098     13 00 00 FF 
2509c     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
250a0     09 07 02 F6 | 	mov	_var04, arg01
250a4     E0 06 86 F1 | 	sub	_var04, #224
250a8     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
250ac     03 09 4A F0 | 	shr	_var05, _var04 wz
250b0     13 00 00 FF 
250b4     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
250b8     01 FA 65 56 |  if_ne	neg	result1, #1
250bc     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
250c0                 | LR__3000
250c0                 | '   else
250c0                 | '     '' Do this in inline ASM to ensure atomicity
250c0                 | '     tmp := @hkbd_report
250c0     13 00 00 FF 
250c4     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
250c8     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
250cc                 | '     org
250cc     13 00 00 FF 
250d0     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
250d4     97 1E 48 FB | 	callpa	#(@LR__3002-@LR__3001)>>2,fcache_load_ptr_
250d8                 | LR__3001
250d8 000             | 	org	0
250d8 000 28 02 64 FD | 	setq	#1
250dc 001 04 01 02 FB | 	rdlong	_var01, _var05
250e0 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
250e4 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
250e8 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
250ec 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
250f0 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
250f4 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
250f8 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
250fc 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25100 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
25104 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25108 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
2510c 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25110 00e 01 04 66 A6 |  if_e	neg	_var03, #1
25114 00f             | LR__3002
25114                 | 	orgh
25114     02 FB 01 F6 | 	mov	result1, _var03
25118                 | _usbnew_spin2_keystate_ret
25118     2D 00 64 FD | 	ret
2511c                 | 
2511c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
2511c                 | ' 
2511c                 | ' '' Return key event from buffer if there is one
2511c                 | ' PUB get_key() : r | tail
2511c                 | _usbnew_spin2_get_key
2511c                 | '   tail := keyq_tail
2511c     0F 00 00 FF 
25120     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
25124     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
25128                 | '   if keyq_head == tail
25128     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2512c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
25130     0F 00 00 FF 
25134     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
25138     00 03 0A F2 | 	cmp	_var02, _var01 wz
2513c                 | '     return 0 ' No event
2513c     00 FA 05 A6 |  if_e	mov	result1, #0
25140     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
25144                 | '   r := keyq_data[tail]
25144     00 03 02 F6 | 	mov	_var02, _var01
25148     02 02 66 F0 | 	shl	_var02, #2
2514c     0F 00 00 FF 
25150     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
25154     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
25158     01 FB 01 FB | 	rdlong	result1, _var02
2515c                 | '   if ++tail == KEYQUEUE_SIZE
2515c     01 00 06 F1 | 	add	_var01, #1
25160     80 00 0E F2 | 	cmp	_var01, #128 wz
25164                 | '     tail := 0
25164     00 00 06 A6 |  if_e	mov	_var01, #0
25168                 | '   keyq_tail := tail
25168     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2516c     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
25170     0F 00 00 FF 
25174     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
25178                 | _usbnew_spin2_get_key_ret
25178     2D 00 64 FD | 	ret
2517c                 | 
2517c                 | ' 
2517c                 | ' '' Emulate mouse movement
2517c                 | ' PUB mouse_move(x,y)
2517c                 | _usbnew_spin2_mouse_move
2517c     02 4A 05 F6 | 	mov	COUNT_, #2
25180     A8 00 A0 FD | 	call	#pushregs_
25184     09 27 02 F6 | 	mov	local01, arg01
25188     0A 29 02 F6 | 	mov	local02, arg02
2518c                 | '   mouse_lock := 1
2518c     14 00 00 FF 
25190     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
25194     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
25198     14 00 00 FF 
2519c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
251a0                 | '   waitus(2) ' hope driver is now done
251a0     02 12 06 F6 | 	mov	arg01, #2
251a4     30 0B B0 FD | 	call	#__system___waitus
251a8                 | '   mouse_xacc := x
251a8     14 00 00 FF 
251ac     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
251b0     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
251b4                 | '   mouse_yacc := y
251b4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
251b8     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
251bc                 | '   if mouse_outptr
251bc     04 00 00 FF 
251c0     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
251c4     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
251c8     0F 00 00 FF 
251cc     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
251d0     24 00 90 AD |  if_e	jmp	#LR__3010
251d4                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
251d4     10 28 66 F0 | 	shl	local02, #16
251d8     13 27 32 F9 | 	getword	local01, local01, #0
251dc     13 29 42 F5 | 	or	local02, local01
251e0     0F 00 00 FF 
251e4     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
251e8     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
251ec     0F 00 00 FF 
251f0     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
251f4     13 29 62 FC | 	wrlong	local02, local01
251f8                 | LR__3010
251f8                 | '   mouse_lock := 0
251f8     14 00 00 FF 
251fc     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
25200     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
25204     14 00 00 FF 
25208     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
2520c     A7 F0 03 F6 | 	mov	ptra, fp
25210     B2 00 A0 FD | 	call	#popregs_
25214                 | _usbnew_spin2_mouse_move_ret
25214     2D 00 64 FD | 	ret
25218                 | 
25218                 | '     '' Set HAVE_HIDPAD to enable.
25218                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
25218                 | ' 
25218                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
25218                 | ' PUB hidpad_id(dev) : r
25218                 | _usbnew_spin2_hidpad_id
25218                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
25218     13 00 00 FF 
2521c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
25220     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
25224     09 01 02 F6 | 	mov	_var01, arg01
25228     03 00 66 F0 | 	shl	_var01, #3
2522c     09 01 82 F1 | 	sub	_var01, arg01
25230     02 00 66 F0 | 	shl	_var01, #2
25234     00 FB 01 F1 | 	add	result1, _var01
25238     FD FA 01 FB | 	rdlong	result1, result1
2523c     13 00 00 FF 
25240     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
25244                 | _usbnew_spin2_hidpad_id_ret
25244     2D 00 64 FD | 	ret
25248                 | 
25248                 | ' 
25248                 | ' '' Get all button states for a device
25248                 | ' PUB hidpad_buttons(dev) : r 
25248                 | _usbnew_spin2_hidpad_buttons
25248                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
25248     13 00 00 FF 
2524c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
25250     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
25254     09 01 02 F6 | 	mov	_var01, arg01
25258     03 00 66 F0 | 	shl	_var01, #3
2525c     09 01 82 F1 | 	sub	_var01, arg01
25260     02 00 66 F0 | 	shl	_var01, #2
25264     00 FB 01 F1 | 	add	result1, _var01
25268     14 FA 05 F1 | 	add	result1, #20
2526c     FD FA 01 FB | 	rdlong	result1, result1
25270     13 00 00 FF 
25274     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
25278                 | _usbnew_spin2_hidpad_buttons_ret
25278     2D 00 64 FD | 	ret
2527c                 | 
2527c                 | ' 
2527c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
2527c                 | ' PUB hidpad_axis(dev,axnum) : r
2527c                 | _usbnew_spin2_hidpad_axis
2527c                 | '   if axnum +>= 6
2527c     06 14 16 F2 | 	cmp	arg02, #6 wc
25280                 | '     return 0
25280     00 FA 05 36 |  if_ae	mov	result1, #0
25284     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
25288                 | '   else 
25288                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
25288     13 00 00 FF 
2528c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
25290     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
25294     09 01 02 F6 | 	mov	_var01, arg01
25298     03 00 66 F0 | 	shl	_var01, #3
2529c     09 01 82 F1 | 	sub	_var01, arg01
252a0     02 00 66 F0 | 	shl	_var01, #2
252a4     00 FB 01 F1 | 	add	result1, _var01
252a8     04 00 06 F6 | 	mov	_var01, #4
252ac     0A 01 02 F1 | 	add	_var01, arg02
252b0     01 00 66 F0 | 	shl	_var01, #1
252b4     FD 00 02 F1 | 	add	_var01, result1
252b8     00 FB E1 FA | 	rdword	result1, _var01
252bc     0F FA 65 F7 | 	signx	result1, #15
252c0     13 00 00 FF 
252c4     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
252c8                 | _usbnew_spin2_hidpad_axis_ret
252c8     2D 00 64 FD | 	ret
252cc                 | 
252cc                 | ' 
252cc                 | ' '' Get state of a hat
252cc                 | ' PUB hidpad_hat(dev,hatnum) : r
252cc                 | _usbnew_spin2_hidpad_hat
252cc                 | '   if hatnum +>= 4
252cc     04 14 16 F2 | 	cmp	arg02, #4 wc
252d0                 | '     return 0
252d0     00 FA 05 36 |  if_ae	mov	result1, #0
252d4     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
252d8                 | '   else 
252d8                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
252d8     13 00 00 FF 
252dc     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
252e0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
252e4     09 01 02 F6 | 	mov	_var01, arg01
252e8     03 00 66 F0 | 	shl	_var01, #3
252ec     09 01 82 F1 | 	sub	_var01, arg01
252f0     02 00 66 F0 | 	shl	_var01, #2
252f4     00 FB 01 F1 | 	add	result1, _var01
252f8     18 00 06 F6 | 	mov	_var01, #24
252fc     0A 01 02 F1 | 	add	_var01, arg02
25300     FD 00 02 F1 | 	add	_var01, result1
25304     00 FB C1 FA | 	rdbyte	result1, _var01
25308     13 00 00 FF 
2530c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
25310                 | _usbnew_spin2_hidpad_hat_ret
25310     2D 00 64 FD | 	ret
25314                 | 
25314                 | ' 
25314                 | ' 
25314                 | ' '--------------------------------------------------------------
25314                 | ' '---------- Init the variables, start the cog. ----------------
25314                 | ' '--------------------------------------------------------------
25314                 | ' 
25314                 | ' pub start(mbox,scope,cache) :cog,base | iii
25314                 | _audio096_spin2_start
25314     04 4A 05 F6 | 	mov	COUNT_, #4
25318     A8 00 A0 FD | 	call	#pushregs_
2531c     09 27 02 F6 | 	mov	local01, arg01
25320                 | ' 
25320                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
25320                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
25320                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
25320                 | ' 
25320                 | ' mailboxaddr:=mbox 
25320     F2 26 62 FC | 	wrlong	local01, objptr
25324                 | ' scope_ptr:=scope
25324     04 E4 05 F1 | 	add	objptr, #4
25328     F2 14 62 FC | 	wrlong	arg02, objptr
2532c                 | ' cache_ptr:=cache
2532c     04 E4 05 F1 | 	add	objptr, #4
25330     F2 16 62 FC | 	wrlong	arg03, objptr
25334                 | ' base:=@channel1[0]
25334     04 E4 05 F1 | 	add	objptr, #4
25338     F2 28 02 F6 | 	mov	local02, objptr
2533c                 | ' long[$40]:=mbox
2533c     40 26 66 FC | 	wrlong	local01, #64
25340                 | ' repeat iii from 0 to 7
25340     00 2A 06 F6 | 	mov	local03, #0
25344     02 00 00 FF 
25348     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
2534c     0C E4 85 F1 | 	sub	objptr, #12
25350     97 BC 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
25354                 | LR__3020
25354                 | '   long[base+64*iii]:=0
25354     14 27 02 F6 | 	mov	local01, local02
25358     15 FD 01 F6 | 	mov	result2, local03
2535c     06 FC 65 F0 | 	shl	result2, #6
25360     FE 26 02 F1 | 	add	local01, result2
25364     13 01 68 FC | 	wrlong	#0, local01
25368                 | '   long[base+64*iii+4]:=0
25368     14 27 02 F6 | 	mov	local01, local02
2536c     15 FD 01 F6 | 	mov	result2, local03
25370     06 FC 65 F0 | 	shl	result2, #6
25374     FE 26 02 F1 | 	add	local01, result2
25378     04 26 06 F1 | 	add	local01, #4
2537c     13 01 68 FC | 	wrlong	#0, local01
25380                 | '   long[base+64*iii+12]:=0
25380     14 2D 02 F6 | 	mov	local04, local02
25384     15 27 02 F6 | 	mov	local01, local03
25388     06 26 66 F0 | 	shl	local01, #6
2538c     13 2D 02 F1 | 	add	local04, local01
25390     0C 2C 06 F1 | 	add	local04, #12
25394     16 01 68 FC | 	wrlong	#0, local04
25398                 | '   long[base+64*iii+16]:=2 
25398     14 2D 02 F6 | 	mov	local04, local02
2539c     15 27 02 F6 | 	mov	local01, local03
253a0     06 26 66 F0 | 	shl	local01, #6
253a4     13 2D 02 F1 | 	add	local04, local01
253a8     10 2C 06 F1 | 	add	local04, #16
253ac     16 05 68 FC | 	wrlong	#2, local04
253b0                 | '   word[base+64*iii+20]:=0
253b0     14 2D 02 F6 | 	mov	local04, local02
253b4     15 27 02 F6 | 	mov	local01, local03
253b8     06 26 66 F0 | 	shl	local01, #6
253bc     13 2D 02 F1 | 	add	local04, local01
253c0     14 2C 06 F1 | 	add	local04, #20
253c4     16 01 58 FC | 	wrword	#0, local04
253c8                 | '   word[base+64*iii+22]:=8192
253c8     14 2D 02 F6 | 	mov	local04, local02
253cc     15 27 02 F6 | 	mov	local01, local03
253d0     06 26 66 F0 | 	shl	local01, #6
253d4     13 2D 02 F1 | 	add	local04, local01
253d8     16 2C 06 F1 | 	add	local04, #22
253dc     10 00 80 FF 
253e0     16 01 58 FC | 	wrword	##8192, local04
253e4                 | '   word[base+64*iii+24]:=4000+2*iii
253e4     15 2D 02 F6 | 	mov	local04, local03
253e8     01 2C 66 F0 | 	shl	local04, #1
253ec     07 00 00 FF 
253f0     A0 27 06 F6 | 	mov	local01, ##4000
253f4     16 27 02 F1 | 	add	local01, local04
253f8     14 2D 02 F6 | 	mov	local04, local02
253fc     15 FD 01 F6 | 	mov	result2, local03
25400     06 FC 65 F0 | 	shl	result2, #6
25404     FE 2C 02 F1 | 	add	local04, result2
25408     18 2C 06 F1 | 	add	local04, #24
2540c     16 27 52 FC | 	wrword	local01, local04
25410                 | '   word[base+64*iii+26]:=2
25410     14 2D 02 F6 | 	mov	local04, local02
25414     15 27 02 F6 | 	mov	local01, local03
25418     06 26 66 F0 | 	shl	local01, #6
2541c     13 2D 02 F1 | 	add	local04, local01
25420     1A 2C 06 F1 | 	add	local04, #26
25424     16 05 58 FC | 	wrword	#2, local04
25428                 | '   long [base+64*iii+8]:=@null | $C0000000
25428     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
2542c     3E 26 26 F4 | 	bith	local01, #62
25430     14 2D 02 F6 | 	mov	local04, local02
25434     15 17 02 F6 | 	mov	arg03, local03
25438     06 16 66 F0 | 	shl	arg03, #6
2543c     0B 2D 02 F1 | 	add	local04, arg03
25440     08 2C 06 F1 | 	add	local04, #8
25444     16 27 62 FC | 	wrlong	local01, local04
25448                 | '   long[base+64*iii+32]:=0
25448     14 2D 02 F6 | 	mov	local04, local02
2544c     15 27 02 F6 | 	mov	local01, local03
25450     06 26 66 F0 | 	shl	local01, #6
25454     13 2D 02 F1 | 	add	local04, local01
25458     20 2C 06 F1 | 	add	local04, #32
2545c     16 01 68 FC | 	wrlong	#0, local04
25460                 | '   long[base+64*iii+36]:=0
25460     14 2D 02 F6 | 	mov	local04, local02
25464     15 27 02 F6 | 	mov	local01, local03
25468     06 26 66 F0 | 	shl	local01, #6
2546c     13 2D 02 F1 | 	add	local04, local01
25470     24 2C 06 F1 | 	add	local04, #36
25474     16 01 68 FC | 	wrlong	#0, local04
25478                 | '   long[base+64*iii+40]:=0
25478     14 2D 02 F6 | 	mov	local04, local02
2547c     15 27 02 F6 | 	mov	local01, local03
25480     06 26 66 F0 | 	shl	local01, #6
25484     13 2D 02 F1 | 	add	local04, local01
25488     28 2C 06 F1 | 	add	local04, #40
2548c     16 01 68 FC | 	wrlong	#0, local04
25490                 | '   long[base+64*iii+44]:=0
25490     14 2D 02 F6 | 	mov	local04, local02
25494     15 27 02 F6 | 	mov	local01, local03
25498     06 26 66 F0 | 	shl	local01, #6
2549c     13 2D 02 F1 | 	add	local04, local01
254a0     2C 2C 06 F1 | 	add	local04, #44
254a4     16 01 68 FC | 	wrlong	#0, local04
254a8                 | '   long[base+64*iii+28]:=0
254a8     14 2D 02 F6 | 	mov	local04, local02
254ac     15 27 02 F6 | 	mov	local01, local03
254b0     06 26 66 F0 | 	shl	local01, #6
254b4     13 2D 02 F1 | 	add	local04, local01
254b8     1C 2C 06 F1 | 	add	local04, #28
254bc     16 01 68 FC | 	wrlong	#0, local04
254c0     01 2A 06 F1 | 	add	local03, #1
254c4     08 2A 56 F2 | 	cmps	local03, #8 wc
254c8     88 FE 9F CD |  if_b	jmp	#LR__3020
254cc                 | LR__3021
254cc     02 00 00 FF 
254d0     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
254d4                 | '   
254d4                 | ' cog:=coginit(16,@audio,@mailboxaddr)
254d4     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
254d8     F2 16 02 F6 | 	mov	arg03, objptr
254dc     10 2C 06 F6 | 	mov	local04, #16
254e0     28 16 62 FD | 	setq	arg03
254e4     0A 2D F2 FC | 	coginit	local04, arg02 wc
254e8     01 2C 66 C6 |  if_b	neg	local04, #1
254ec                 | ' waitms(100)
254ec     64 12 06 F6 | 	mov	arg01, #100
254f0     78 07 B0 FD | 	call	#__system___waitms
254f4                 | ' return cog,base
254f4     14 FD 01 F6 | 	mov	result2, local02
254f8     16 FB 01 F6 | 	mov	result1, local04
254fc     A7 F0 03 F6 | 	mov	ptra, fp
25500     B2 00 A0 FD | 	call	#popregs_
25504                 | _audio096_spin2_start_ret
25504     2D 00 64 FD | 	ret
25508                 | 
25508                 | ' 
25508                 | ' ' a simple play procedure to not poke everything. 
25508                 | ' 
25508                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
25508                 | _audio096_spin2_play
25508     0C E4 05 F1 | 	add	objptr, #12
2550c     F2 00 02 F6 | 	mov	_var01, objptr
25510     06 12 66 F0 | 	shl	arg01, #6
25514     09 01 02 F1 | 	add	_var01, arg01
25518     00 13 02 F6 | 	mov	arg01, _var01
2551c     0C 12 06 F1 | 	add	arg01, #12
25520     09 1B 62 FC | 	wrlong	arg05, arg01
25524     00 1C 56 F2 | 	cmps	arg06, #0 wc
25528     00 13 02 36 |  if_ae	mov	arg01, _var01
2552c     10 12 06 31 |  if_ae	add	arg01, #16
25530     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
25534     02 1A 06 C1 |  if_b	add	arg05, #2
25538     00 13 02 C6 |  if_b	mov	arg01, _var01
2553c     10 12 06 C1 |  if_b	add	arg01, #16
25540     09 1B 62 CC |  if_b	wrlong	arg05, arg01
25544     0B 13 52 F6 | 	abs	arg01, arg03 wc
25548     0F 1B 80 FF 
2554c     09 1F 1A FD | 	qdiv	##3546895, arg01
25550                 | ' 
25550                 | ' base2:=@channel1[0]+64*channel
25550                 | ' 
25550                 | ' 
25550                 | ' long[base2+12]:= len
25550                 | ' if loop >=0 
25550                 | '   long[base2+16]:= loop
25550     0C E4 85 F1 | 	sub	objptr, #12
25554                 | ' else
25554                 | '   long[base2+16]:= len+2
25554                 | ' word[base2+20]:=vol
25554     00 13 02 F6 | 	mov	arg01, _var01
25558     14 12 06 F1 | 	add	arg01, #20
2555c     09 19 52 FC | 	wrword	arg04, arg01
25560                 | ' word[base2+24]:= 3546895/splfreq 
25560     00 19 02 F6 | 	mov	arg04, _var01
25564     18 18 06 F1 | 	add	arg04, #24
25568                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
25568                 | ' long[base2+28]:=$40000000    
25568                 | ' long[base2+32]:=0    
25568                 | ' long[base2+36]:=0    
25568                 | ' long[base2+40]:=0    
25568                 | ' long[base2+44]:=0    
25568                 | ' long[base2+8]:=sample+$C0000000     
25568     00 00 60 FF 
2556c     00 14 06 F1 | 	add	arg02, ##-1073741824
25570     18 12 62 FD | 	getqx	arg01
25574     09 13 82 F6 | 	negc	arg01, arg01
25578     0C 13 52 FC | 	wrword	arg01, arg04
2557c     00 13 02 F6 | 	mov	arg01, _var01
25580     1A 12 06 F1 | 	add	arg01, #26
25584     09 01 5A FC | 	wrword	#256, arg01
25588     00 13 02 F6 | 	mov	arg01, _var01
2558c     1C 12 06 F1 | 	add	arg01, #28
25590     00 00 A0 FF 
25594     09 01 68 FC | 	wrlong	##1073741824, arg01
25598     00 13 02 F6 | 	mov	arg01, _var01
2559c     20 12 06 F1 | 	add	arg01, #32
255a0     09 01 68 FC | 	wrlong	#0, arg01
255a4     00 13 02 F6 | 	mov	arg01, _var01
255a8     24 12 06 F1 | 	add	arg01, #36
255ac     09 01 68 FC | 	wrlong	#0, arg01
255b0     00 13 02 F6 | 	mov	arg01, _var01
255b4     28 12 06 F1 | 	add	arg01, #40
255b8     09 01 68 FC | 	wrlong	#0, arg01
255bc     00 13 02 F6 | 	mov	arg01, _var01
255c0     2C 12 06 F1 | 	add	arg01, #44
255c4     09 01 68 FC | 	wrlong	#0, arg01
255c8     08 00 06 F1 | 	add	_var01, #8
255cc     00 15 62 FC | 	wrlong	arg02, _var01
255d0                 | _audio096_spin2_play_ret
255d0     2D 00 64 FD | 	ret
255d4                 | 
255d4                 | ' 
255d4                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
255d4                 | _audio096_spin2_play8
255d4                 | ' 
255d4                 | ' base2:=@channel1[0]+64*channel
255d4     0C E4 05 F1 | 	add	objptr, #12
255d8     F2 00 02 F6 | 	mov	_var01, objptr
255dc     06 12 66 F0 | 	shl	arg01, #6
255e0     09 01 02 F1 | 	add	_var01, arg01
255e4                 | ' long[base2]:=0
255e4     00 01 68 FC | 	wrlong	#0, _var01
255e8                 | ' long[base2+8]:=sample+$40000000 
255e8     00 00 20 FF 
255ec     00 14 06 F1 | 	add	arg02, ##1073741824
255f0     00 13 02 F6 | 	mov	arg01, _var01
255f4     08 12 06 F1 | 	add	arg01, #8
255f8     09 15 62 FC | 	wrlong	arg02, arg01
255fc                 | ' if loop>=0
255fc     00 1C 56 F2 | 	cmps	arg06, #0 wc
25600     0C E4 85 F1 | 	sub	objptr, #12
25604     1C 00 90 CD |  if_b	jmp	#LR__3030
25608                 | '   long[base2+12]:=loop
25608     00 15 02 F6 | 	mov	arg02, _var01
2560c     0C 14 06 F1 | 	add	arg02, #12
25610     0A 1D 62 FC | 	wrlong	arg06, arg02
25614                 | '   long[base2+16]:= len
25614     00 1D 02 F6 | 	mov	arg06, _var01
25618     10 1C 06 F1 | 	add	arg06, #16
2561c     0E 1B 62 FC | 	wrlong	arg05, arg06
25620     1C 00 90 FD | 	jmp	#LR__3031
25624                 | LR__3030
25624                 | ' else
25624                 | '   long[base2+12]:= len
25624     00 1D 02 F6 | 	mov	arg06, _var01
25628     0C 1C 06 F1 | 	add	arg06, #12
2562c     0E 1B 62 FC | 	wrlong	arg05, arg06
25630                 | '   long[base2+16]:= len+1
25630     01 1A 06 F1 | 	add	arg05, #1
25634     00 13 02 F6 | 	mov	arg01, _var01
25638     10 12 06 F1 | 	add	arg01, #16
2563c     09 1B 62 FC | 	wrlong	arg05, arg01
25640                 | LR__3031
25640     0B 17 52 F6 | 	abs	arg03, arg03 wc
25644     0F 1B 80 FF 
25648     0B 1F 1A FD | 	qdiv	##3546895, arg03
2564c                 | ' word[base2+20]:=vol
2564c     00 17 02 F6 | 	mov	arg03, _var01
25650     14 16 06 F1 | 	add	arg03, #20
25654     0B 19 52 FC | 	wrword	arg04, arg03
25658                 | ' word[base2+24]:= 3546895 /splfreq 
25658     00 13 02 F6 | 	mov	arg01, _var01
2565c     18 12 06 F1 | 	add	arg01, #24
25660                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
25660     1A 00 06 F1 | 	add	_var01, #26
25664     18 18 62 FD | 	getqx	arg04
25668     0C 19 82 F6 | 	negc	arg04, arg04
2566c     09 19 52 FC | 	wrword	arg04, arg01
25670     00 01 5A FC | 	wrword	#256, _var01
25674                 | _audio096_spin2_play8_ret
25674     2D 00 64 FD | 	ret
25678                 | 
25678                 | ' 'long[base2+28]:=$40000000
25678                 | ' 
25678                 | '     
25678                 | ' pub stop(channel) 'silence it
25678                 | _audio096_spin2_stop
25678                 | ' 
25678                 | ' word[@channel1[0]+64*channel+20]:=0
25678     0C E4 05 F1 | 	add	objptr, #12
2567c     F2 00 02 F6 | 	mov	_var01, objptr
25680     09 03 02 F6 | 	mov	_var02, arg01
25684     06 02 66 F0 | 	shl	_var02, #6
25688     01 01 02 F1 | 	add	_var01, _var02
2568c     14 00 06 F1 | 	add	_var01, #20
25690     00 01 58 FC | 	wrword	#0, _var01
25694                 | ' word[@channel1[0]+64*channel+20]:=0
25694     F2 00 02 F6 | 	mov	_var01, objptr
25698     06 12 66 F0 | 	shl	arg01, #6
2569c     09 01 02 F1 | 	add	_var01, arg01
256a0     14 00 06 F1 | 	add	_var01, #20
256a4     00 01 58 FC | 	wrword	#0, _var01
256a8     0C E4 85 F1 | 	sub	objptr, #12
256ac                 | _audio096_spin2_stop_ret
256ac     2D 00 64 FD | 	ret
256b0                 | hubexit
256b0     81 00 80 FD | 	jmp	#cogexit
256b4                 | 
256b4                 | __system___setbaud
256b4     14 88 06 FB | 	rdlong	muldiva_, #20
256b8     09 8B 02 F6 | 	mov	muldivb_, arg01
256bc     BA 00 A0 FD | 	call	#divide_
256c0     97 06 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
256c4                 | LR__3040
256c4     3E FA 9D FA | 	rdpin	result1, #62 wc
256c8     FE FC A1 F1 | 	subx	result2, result2
256cc     F4 FF 9F CD |  if_b	jmp	#LR__3040
256d0                 | LR__3041
256d0     40 7C 64 FD | 	dirl	#62
256d4     40 7E 64 FD | 	dirl	#63
256d8     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
256dc     10 8A 66 F0 | 	shl	muldivb_, #16
256e0     07 14 06 F6 | 	mov	arg02, #7
256e4     45 15 02 F1 | 	add	arg02, muldivb_
256e8     3E F8 0C FC | 	wrpin	#124, #62
256ec     3E 14 16 FC | 	wxpin	arg02, #62
256f0     3F 7C 0C FC | 	wrpin	#62, #63
256f4     14 14 06 F1 | 	add	arg02, #20
256f8     3F 14 16 FC | 	wxpin	arg02, #63
256fc     41 7C 64 FD | 	dirh	#62
25700     41 7E 64 FD | 	dirh	#63
25704                 | __system___setbaud_ret
25704     2D 00 64 FD | 	ret
25708                 | 
25708                 | __system___txraw
25708     01 4A 05 F6 | 	mov	COUNT_, #1
2570c     A8 00 A0 FD | 	call	#pushregs_
25710     09 27 02 F6 | 	mov	local01, arg01
25714     97 06 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
25718                 | LR__3050
25718     3E FA 9D FA | 	rdpin	result1, #62 wc
2571c     FE FC A1 F1 | 	subx	result2, result2
25720     F4 FF 9F CD |  if_b	jmp	#LR__3050
25724                 | LR__3051
25724     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
25728     C2 01 00 AF 
2572c     00 12 06 A6 |  if_e	mov	arg01, ##230400
25730     80 FF BF AD |  if_e	call	#__system___setbaud
25734     58 7C 64 FD | 	drvl	#62
25738     3E 26 26 FC | 	wypin	local01, #62
2573c     01 FA 05 F6 | 	mov	result1, #1
25740     A7 F0 03 F6 | 	mov	ptra, fp
25744     B2 00 A0 FD | 	call	#popregs_
25748                 | __system___txraw_ret
25748     2D 00 64 FD | 	ret
2574c                 | 
2574c                 | __system___rxraw
2574c     0D 4A 05 F6 | 	mov	COUNT_, #13
25750     A8 00 A0 FD | 	call	#pushregs_
25754     09 27 02 F6 | 	mov	local01, arg01
25758     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2575c     C2 01 00 AF 
25760     00 12 06 A6 |  if_e	mov	arg01, ##230400
25764     4C FF BF AD |  if_e	call	#__system___setbaud
25768     00 26 0E F2 | 	cmp	local01, #0 wz
2576c     20 00 90 AD |  if_e	jmp	#LR__3060
25770     14 2A 06 FB | 	rdlong	local03, #20
25774     0A 2A 46 F0 | 	shr	local03, #10
25778     15 27 02 FD | 	qmul	local01, local03
2577c     1A FA 61 FD | 	getct	result1
25780     18 2C 62 FD | 	getqx	local04
25784     16 FB 01 F1 | 	add	result1, local04
25788     FD 2E 02 F6 | 	mov	local05, result1
2578c     04 00 90 FD | 	jmp	#LR__3061
25790                 | LR__3060
25790     00 2E 06 F6 | 	mov	local05, #0
25794                 | LR__3061
25794     01 30 66 F6 | 	neg	local06, #1
25798     3F 32 06 F6 | 	mov	local07, #63
2579c     00 34 06 F6 | 	mov	local08, #0
257a0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
257a4     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
257a8     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
257ac                 | LR__3062
257ac     08 36 16 F4 | 	testb	local09, #8 wc
257b0     09 36 76 F4 | 	testbn	local09, #9 andc
257b4     0A 36 46 F0 | 	shr	local09, #10
257b8     01 34 06 C6 |  if_b	mov	local08, #1
257bc     40 7E 6C 3D |  if_ae	testp	#63 wz
257c0     01 34 06 26 |  if_nc_and_z	mov	local08, #1
257c4     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
257c8     04 36 46 20 |  if_nc_and_z	shr	local09, #4
257cc                 | LR__3063
257cc     00 28 06 F6 | 	mov	local02, #0
257d0     00 34 0E F2 | 	cmp	local08, #0 wz
257d4     01 28 66 56 |  if_ne	neg	local02, #1
257d8     00 38 06 F6 | 	mov	local10, #0
257dc     00 2A 06 F6 | 	mov	local03, #0
257e0     00 26 0E F2 | 	cmp	local01, #0 wz
257e4     01 2A 66 56 |  if_ne	neg	local03, #1
257e8     00 2C 06 F6 | 	mov	local04, #0
257ec     00 3A 06 F6 | 	mov	local11, #0
257f0     17 3D 02 F6 | 	mov	local12, local05
257f4     1A FA 61 FD | 	getct	result1
257f8     FD 3E 02 F6 | 	mov	local13, result1
257fc     1F 3D 82 F1 | 	sub	local12, local13
25800     00 3C 56 F2 | 	cmps	local12, #0 wc
25804     00 3A 26 C6 |  if_b	not	local11, #0
25808     00 3A 0E F2 | 	cmp	local11, #0 wz
2580c     00 2C 26 56 |  if_ne	not	local04, #0
25810     16 2B CA F7 | 	test	local03, local04 wz
25814     00 38 26 56 |  if_ne	not	local10, #0
25818     1C 29 4A F5 | 	or	local02, local10 wz
2581c     8C FF 9F AD |  if_e	jmp	#LR__3062
25820     00 34 0E F2 | 	cmp	local08, #0 wz
25824     1B 31 02 56 |  if_ne	mov	local06, local09
25828     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
2582c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
25830     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
25834     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
25838     18 FB 01 F6 | 	mov	result1, local06
2583c     A7 F0 03 F6 | 	mov	ptra, fp
25840     B2 00 A0 FD | 	call	#popregs_
25844                 | __system___rxraw_ret
25844     2D 00 64 FD | 	ret
25848                 | 
25848                 | __system___getus
25848     1A FC 71 FD | 	getct	result2 wc
2584c     1A 00 62 FD | 	getct	_var01
25850     10 E6 05 F1 | 	add	ptr___system__dat__, #16
25854     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
25858     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2585c     20 00 90 5D |  if_ne	jmp	#LR__3070
25860     14 02 06 FB | 	rdlong	_var02, #20
25864     A1 07 00 FF 
25868     40 02 16 FD | 	qdiv	_var02, ##1000000
2586c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
25870     18 FA 61 FD | 	getqx	result1
25874     FD 02 02 F6 | 	mov	_var02, result1
25878     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2587c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
25880                 | LR__3070
25880     01 FD 11 FD | 	qdiv	result2, _var02
25884     19 FC 61 FD | 	getqy	result2
25888     28 FC 61 FD | 	setq	result2
2588c     01 01 12 FD | 	qdiv	_var01, _var02
25890     18 FA 61 FD | 	getqx	result1
25894                 | __system___getus_ret
25894     2D 00 64 FD | 	ret
25898                 | 
25898                 | __system____builtin_memmove
25898     09 01 02 F6 | 	mov	_var01, arg01
2589c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
258a0     10 00 90 CD |  if_b	jmp	#LR__3080
258a4     0A 03 02 F6 | 	mov	_var02, arg02
258a8     0B 03 02 F1 | 	add	_var02, arg03
258ac     01 13 52 F2 | 	cmps	arg01, _var02 wc
258b0     48 00 90 CD |  if_b	jmp	#LR__3086
258b4                 | LR__3080
258b4     0B 05 02 F6 | 	mov	_var03, arg03
258b8     02 04 4E F0 | 	shr	_var03, #2 wz
258bc     18 00 90 AD |  if_e	jmp	#LR__3085
258c0     97 0A 48 FB | 	callpa	#(@LR__3083-@LR__3081)>>2,fcache_load_ptr_
258c4                 | LR__3081
258c4     02 09 D8 FC | 	rep	@LR__3084, _var03
258c8                 | LR__3082
258c8     0A 05 02 FB | 	rdlong	_var03, arg02
258cc     09 05 62 FC | 	wrlong	_var03, arg01
258d0     04 12 06 F1 | 	add	arg01, #4
258d4     04 14 06 F1 | 	add	arg02, #4
258d8                 | LR__3083
258d8                 | LR__3084
258d8                 | LR__3085
258d8     02 16 CE F7 | 	test	arg03, #2 wz
258dc     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
258e0     09 03 52 5C |  if_ne	wrword	_var02, arg01
258e4     02 12 06 51 |  if_ne	add	arg01, #2
258e8     02 14 06 51 |  if_ne	add	arg02, #2
258ec     01 16 CE F7 | 	test	arg03, #1 wz
258f0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
258f4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
258f8     28 00 90 FD | 	jmp	#LR__3092
258fc                 | LR__3086
258fc     0B 13 02 F1 | 	add	arg01, arg03
25900     0B 15 02 F1 | 	add	arg02, arg03
25904     0B 07 0A F6 | 	mov	_var04, arg03 wz
25908     18 00 90 AD |  if_e	jmp	#LR__3091
2590c     97 0A 48 FB | 	callpa	#(@LR__3089-@LR__3087)>>2,fcache_load_ptr_
25910                 | LR__3087
25910     03 09 D8 FC | 	rep	@LR__3090, _var04
25914                 | LR__3088
25914     01 12 86 F1 | 	sub	arg01, #1
25918     01 14 86 F1 | 	sub	arg02, #1
2591c     0A 03 C2 FA | 	rdbyte	_var02, arg02
25920     09 03 42 FC | 	wrbyte	_var02, arg01
25924                 | LR__3089
25924                 | LR__3090
25924                 | LR__3091
25924                 | LR__3092
25924     00 FB 01 F6 | 	mov	result1, _var01
25928                 | __system____builtin_memmove_ret
25928     2D 00 64 FD | 	ret
2592c                 | 
2592c                 | __system____builtin_strcpy
2592c     09 01 02 F6 | 	mov	_var01, arg01
25930     97 0A 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
25934                 | LR__3100
25934     0A FB C9 FA | 	rdbyte	result1, arg02 wz
25938     09 FB 41 FC | 	wrbyte	result1, arg01
2593c     01 14 06 F1 | 	add	arg02, #1
25940     01 12 06 F1 | 	add	arg01, #1
25944     EC FF 9F 5D |  if_ne	jmp	#LR__3100
25948                 | LR__3101
25948     00 FB 01 F6 | 	mov	result1, _var01
2594c                 | __system____builtin_strcpy_ret
2594c     2D 00 64 FD | 	ret
25950                 | 
25950                 | __system____topofstack
25950     00 4A 05 F6 | 	mov	COUNT_, #0
25954     A8 00 A0 FD | 	call	#pushregs_
25958     08 F0 07 F1 | 	add	ptra, #8
2595c     04 4E 05 F1 | 	add	fp, #4
25960     A7 12 62 FC | 	wrlong	arg01, fp
25964     A7 FA 01 F6 | 	mov	result1, fp
25968     04 4E 85 F1 | 	sub	fp, #4
2596c     A7 F0 03 F6 | 	mov	ptra, fp
25970     B2 00 A0 FD | 	call	#popregs_
25974                 | __system____topofstack_ret
25974     2D 00 64 FD | 	ret
25978                 | 
25978                 | __system___lockmem
25978     00 FA 05 F6 | 	mov	result1, #0
2597c     01 FA 61 FD | 	cogid	result1
25980     00 FB 05 F1 | 	add	result1, #256
25984                 | LR__3110
25984     09 01 0A FB | 	rdlong	_var01, arg01 wz
25988     09 FB 61 AC |  if_e	wrlong	result1, arg01
2598c     09 01 02 AB |  if_e	rdlong	_var01, arg01
25990     09 01 02 AB |  if_e	rdlong	_var01, arg01
25994     FD 00 0A F2 | 	cmp	_var01, result1 wz
25998     E8 FF 9F 5D |  if_ne	jmp	#LR__3110
2599c                 | __system___lockmem_ret
2599c     2D 00 64 FD | 	ret
259a0                 | 
259a0                 | __system___string_cmp
259a0     97 14 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
259a4                 | LR__3120
259a4     09 01 C2 FA | 	rdbyte	_var01, arg01
259a8     0A 03 C2 FA | 	rdbyte	_var02, arg02
259ac     00 05 02 F6 | 	mov	_var03, _var01
259b0     01 05 8A F1 | 	sub	_var03, _var02 wz
259b4     01 12 06 F1 | 	add	arg01, #1
259b8     01 14 06 F1 | 	add	arg02, #1
259bc     0C 00 90 5D |  if_ne	jmp	#LR__3122
259c0     00 00 0E F2 | 	cmp	_var01, #0 wz
259c4     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
259c8     D8 FF 9F 5D |  if_ne	jmp	#LR__3120
259cc                 | LR__3121
259cc                 | LR__3122
259cc     02 FB 01 F6 | 	mov	result1, _var03
259d0                 | __system___string_cmp_ret
259d0     2D 00 64 FD | 	ret
259d4                 | 
259d4                 | __system___string_concat
259d4     05 4A 05 F6 | 	mov	COUNT_, #5
259d8     A8 00 A0 FD | 	call	#pushregs_
259dc     09 27 02 F6 | 	mov	local01, arg01
259e0     0A 29 02 F6 | 	mov	local02, arg02
259e4     13 13 02 F6 | 	mov	arg01, local01
259e8     09 2B 02 F6 | 	mov	local03, arg01
259ec     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
259f0                 | LR__3130
259f0     15 FB C9 FA | 	rdbyte	result1, local03 wz
259f4     01 2A 06 51 |  if_ne	add	local03, #1
259f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
259fc                 | LR__3131
259fc     09 2B 82 F1 | 	sub	local03, arg01
25a00     15 2D 02 F6 | 	mov	local04, local03
25a04     14 13 02 F6 | 	mov	arg01, local02
25a08     09 2B 02 F6 | 	mov	local03, arg01
25a0c     97 06 48 FB | 	callpa	#(@LR__3133-@LR__3132)>>2,fcache_load_ptr_
25a10                 | LR__3132
25a10     15 FB C9 FA | 	rdbyte	result1, local03 wz
25a14     01 2A 06 51 |  if_ne	add	local03, #1
25a18     F4 FF 9F 5D |  if_ne	jmp	#LR__3132
25a1c                 | LR__3133
25a1c     09 2B 82 F1 | 	sub	local03, arg01
25a20     16 13 02 F6 | 	mov	arg01, local04
25a24     15 13 02 F1 | 	add	arg01, local03
25a28     01 12 06 F1 | 	add	arg01, #1
25a2c     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
25a30     FD 2E 0A F6 | 	mov	local05, result1 wz
25a34     28 00 90 AD |  if_e	jmp	#LR__3134
25a38     17 13 02 F6 | 	mov	arg01, local05
25a3c     13 15 02 F6 | 	mov	arg02, local01
25a40     16 17 02 F6 | 	mov	arg03, local04
25a44     50 FE BF FD | 	call	#__system____builtin_memmove
25a48     17 13 02 F6 | 	mov	arg01, local05
25a4c     16 13 02 F1 | 	add	arg01, local04
25a50     01 2A 06 F1 | 	add	local03, #1
25a54     14 15 02 F6 | 	mov	arg02, local02
25a58     15 17 02 F6 | 	mov	arg03, local03
25a5c     38 FE BF FD | 	call	#__system____builtin_memmove
25a60                 | LR__3134
25a60     17 FB 01 F6 | 	mov	result1, local05
25a64     A7 F0 03 F6 | 	mov	ptra, fp
25a68     B2 00 A0 FD | 	call	#popregs_
25a6c                 | __system___string_concat_ret
25a6c     2D 00 64 FD | 	ret
25a70                 | 
25a70                 | __system___tx
25a70     02 4A 05 F6 | 	mov	COUNT_, #2
25a74     A8 00 A0 FD | 	call	#pushregs_
25a78     09 27 02 F6 | 	mov	local01, arg01
25a7c     0A 26 0E F2 | 	cmp	local01, #10 wz
25a80     18 00 90 5D |  if_ne	jmp	#LR__3140
25a84     08 E6 05 F1 | 	add	ptr___system__dat__, #8
25a88     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
25a8c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25a90     02 28 CE F7 | 	test	local02, #2 wz
25a94     0D 12 06 56 |  if_ne	mov	arg01, #13
25a98     6C FC BF 5D |  if_ne	call	#__system___txraw
25a9c                 | LR__3140
25a9c     13 13 02 F6 | 	mov	arg01, local01
25aa0     64 FC BF FD | 	call	#__system___txraw
25aa4     A7 F0 03 F6 | 	mov	ptra, fp
25aa8     B2 00 A0 FD | 	call	#popregs_
25aac                 | __system___tx_ret
25aac     2D 00 64 FD | 	ret
25ab0                 | 
25ab0                 | __system___rx
25ab0     01 4A 05 F6 | 	mov	COUNT_, #1
25ab4     A8 00 A0 FD | 	call	#pushregs_
25ab8                 | LR__3150
25ab8     00 12 06 F6 | 	mov	arg01, #0
25abc     8C FC BF FD | 	call	#__system___rxraw
25ac0     FD 26 02 F6 | 	mov	local01, result1
25ac4     FF FF 7F FF 
25ac8     FF 27 0E F2 | 	cmp	local01, ##-1 wz
25acc     E8 FF 9F AD |  if_e	jmp	#LR__3150
25ad0     0D 26 0E F2 | 	cmp	local01, #13 wz
25ad4     14 00 90 5D |  if_ne	jmp	#LR__3151
25ad8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
25adc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
25ae0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25ae4     02 FA CD F7 | 	test	result1, #2 wz
25ae8     0A 26 06 56 |  if_ne	mov	local01, #10
25aec                 | LR__3151
25aec     08 E6 05 F1 | 	add	ptr___system__dat__, #8
25af0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
25af4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25af8     01 12 CE F7 | 	test	arg01, #1 wz
25afc     1C 00 90 AD |  if_e	jmp	#LR__3154
25b00     7F 26 0E F2 | 	cmp	local01, #127 wz
25b04     0C 00 90 5D |  if_ne	jmp	#LR__3152
25b08     08 12 06 F6 | 	mov	arg01, #8
25b0c     60 FF BF FD | 	call	#__system___tx
25b10     08 00 90 FD | 	jmp	#LR__3153
25b14                 | LR__3152
25b14     13 13 02 F6 | 	mov	arg01, local01
25b18     54 FF BF FD | 	call	#__system___tx
25b1c                 | LR__3153
25b1c                 | LR__3154
25b1c     13 FB 01 F6 | 	mov	result1, local01
25b20     A7 F0 03 F6 | 	mov	ptra, fp
25b24     B2 00 A0 FD | 	call	#popregs_
25b28                 | __system___rx_ret
25b28     2D 00 64 FD | 	ret
25b2c                 | 
25b2c                 | __system___pinwrite
25b2c     09 01 02 F6 | 	mov	_var01, arg01
25b30     1F 00 06 F5 | 	and	_var01, #31
25b34     20 12 CE F7 | 	test	arg01, #32 wz
25b38     06 12 46 F0 | 	shr	arg01, #6
25b3c     09 13 CA F9 | 	bmask	arg01, arg01
25b40     00 13 62 F0 | 	shl	arg01, _var01
25b44     00 15 62 F0 | 	shl	arg02, _var01
25b48     1C 00 90 AD |  if_e	jmp	#LR__3160
25b4c     09 F7 43 F5 | 	or	dirb, arg01
25b50     FD 01 02 F6 | 	mov	_var01, outb
25b54     09 01 22 F5 | 	andn	_var01, arg01
25b58     09 15 02 F5 | 	and	arg02, arg01
25b5c     0A 01 42 F5 | 	or	_var01, arg02
25b60     00 FB 03 F6 | 	mov	outb, _var01
25b64     18 00 90 FD | 	jmp	#LR__3161
25b68                 | LR__3160
25b68     09 F5 43 F5 | 	or	dira, arg01
25b6c     FC 01 02 F6 | 	mov	_var01, outa
25b70     09 01 22 F5 | 	andn	_var01, arg01
25b74     09 15 02 F5 | 	and	arg02, arg01
25b78     0A 01 42 F5 | 	or	_var01, arg02
25b7c     00 F9 03 F6 | 	mov	outa, _var01
25b80                 | LR__3161
25b80                 | __system___pinwrite_ret
25b80     2D 00 64 FD | 	ret
25b84                 | 
25b84                 | __system___basic_read_line
25b84     06 4A 05 F6 | 	mov	COUNT_, #6
25b88     A8 00 A0 FD | 	call	#pushregs_
25b8c     09 27 02 F6 | 	mov	local01, arg01
25b90     00 28 06 F6 | 	mov	local02, #0
25b94     18 2A 06 F6 | 	mov	local03, #24
25b98     00 2C 06 F6 | 	mov	local04, #0
25b9c     18 12 06 F6 | 	mov	arg01, #24
25ba0     74 3F B0 FD | 	call	#__system___gc_alloc_managed
25ba4     FD 2E 0A F6 | 	mov	local05, result1 wz
25ba8     17 FB 01 A6 |  if_e	mov	result1, local05
25bac     B0 00 90 AD |  if_e	jmp	#LR__3173
25bb0                 | LR__3170
25bb0     13 13 02 F6 | 	mov	arg01, local01
25bb4     78 0B B0 FD | 	call	#__system___basic_get_char
25bb8     FD 30 02 F6 | 	mov	local06, result1
25bbc     01 30 56 F2 | 	cmps	local06, #1 wc
25bc0     8C 00 90 CD |  if_b	jmp	#LR__3172
25bc4     0A 30 0E F2 | 	cmp	local06, #10 wz
25bc8     10 00 90 5D |  if_ne	jmp	#LR__3171
25bcc     00 2C 0E F2 | 	cmp	local04, #0 wz
25bd0     01 28 56 52 |  if_ne	cmps	local02, #1 wc
25bd4     01 28 86 11 |  if_a	sub	local02, #1
25bd8     74 00 90 FD | 	jmp	#LR__3172
25bdc                 | LR__3171
25bdc     0D 30 0E F2 | 	cmp	local06, #13 wz
25be0     01 2C 06 A6 |  if_e	mov	local04, #1
25be4     00 2C 06 56 |  if_ne	mov	local04, #0
25be8     08 30 0E F2 | 	cmp	local06, #8 wz
25bec     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
25bf0     01 28 56 A2 |  if_e	cmps	local02, #1 wc
25bf4     01 28 86 21 |  if_nc_and_z	sub	local02, #1
25bf8     B4 FF 9F AD |  if_e	jmp	#LR__3170
25bfc     17 17 02 F6 | 	mov	arg03, local05
25c00     14 17 02 F1 | 	add	arg03, local02
25c04     0B 31 42 FC | 	wrbyte	local06, arg03
25c08     01 28 06 F1 | 	add	local02, #1
25c0c     15 29 0A F2 | 	cmp	local02, local03 wz
25c10     9C FF 9F 5D |  if_ne	jmp	#LR__3170
25c14     15 13 02 F6 | 	mov	arg01, local03
25c18     20 12 06 F1 | 	add	arg01, #32
25c1c     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
25c20     FD 30 0A F6 | 	mov	local06, result1 wz
25c24     18 FB 01 A6 |  if_e	mov	result1, local06
25c28     34 00 90 AD |  if_e	jmp	#LR__3173
25c2c     18 13 02 F6 | 	mov	arg01, local06
25c30     17 15 02 F6 | 	mov	arg02, local05
25c34     15 17 02 F6 | 	mov	arg03, local03
25c38     5C FC BF FD | 	call	#__system____builtin_memmove
25c3c     20 2A 06 F1 | 	add	local03, #32
25c40     17 13 02 F6 | 	mov	arg01, local05
25c44     0C 40 B0 FD | 	call	#__system___gc_free
25c48     18 2F 02 F6 | 	mov	local05, local06
25c4c     60 FF 9F FD | 	jmp	#LR__3170
25c50                 | LR__3172
25c50     17 31 02 F6 | 	mov	local06, local05
25c54     14 31 02 F1 | 	add	local06, local02
25c58     18 01 48 FC | 	wrbyte	#0, local06
25c5c     17 FB 01 F6 | 	mov	result1, local05
25c60                 | LR__3173
25c60     A7 F0 03 F6 | 	mov	ptra, fp
25c64     B2 00 A0 FD | 	call	#popregs_
25c68                 | __system___basic_read_line_ret
25c68     2D 00 64 FD | 	ret
25c6c                 | 
25c6c                 | __system___waitms
25c6c     09 01 02 F6 | 	mov	_var01, arg01
25c70     1A 02 62 FD | 	getct	_var02
25c74     14 04 06 FB | 	rdlong	_var03, #20
25c78     97 14 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
25c7c                 | LR__3180
25c7c     01 00 00 FF 
25c80     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
25c84     1C 00 90 CD |  if_b	jmp	#LR__3182
25c88     02 03 02 F1 | 	add	_var02, _var03
25c8c     01 13 02 F6 | 	mov	arg01, _var02
25c90     00 12 66 FA | 	addct1	arg01, #0
25c94     24 22 60 FD | 	waitct1
25c98     01 00 00 FF 
25c9c     E8 01 86 F1 | 	sub	_var01, ##1000
25ca0     D8 FF 9F FD | 	jmp	#LR__3180
25ca4                 | LR__3181
25ca4                 | LR__3182
25ca4     01 00 56 F2 | 	cmps	_var01, #1 wc
25ca8     28 00 90 CD |  if_b	jmp	#LR__3183
25cac     02 01 02 FD | 	qmul	_var01, _var03
25cb0     01 00 00 FF 
25cb4     E8 17 06 F6 | 	mov	arg03, ##1000
25cb8     19 FA 61 FD | 	getqy	result1
25cbc     18 12 62 FD | 	getqx	arg01
25cc0     28 FA 61 FD | 	setq	result1
25cc4     0B 13 12 FD | 	qdiv	arg01, arg03
25cc8     18 12 62 FD | 	getqx	arg01
25ccc     01 13 62 FA | 	addct1	arg01, _var02
25cd0     24 22 60 FD | 	waitct1
25cd4                 | LR__3183
25cd4                 | __system___waitms_ret
25cd4     2D 00 64 FD | 	ret
25cd8                 | 
25cd8                 | __system___waitus
25cd8     09 01 02 F6 | 	mov	_var01, arg01
25cdc     1A 02 62 FD | 	getct	_var02
25ce0     14 04 06 FB | 	rdlong	_var03, #20
25ce4     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
25ce8                 | LR__3190
25ce8     A1 07 00 FF 
25cec     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
25cf0     1C 00 90 CD |  if_b	jmp	#LR__3192
25cf4     02 03 02 F1 | 	add	_var02, _var03
25cf8     01 13 02 F6 | 	mov	arg01, _var02
25cfc     00 12 66 FA | 	addct1	arg01, #0
25d00     24 22 60 FD | 	waitct1
25d04     A1 07 00 FF 
25d08     40 00 86 F1 | 	sub	_var01, ##1000000
25d0c     D8 FF 9F FD | 	jmp	#LR__3190
25d10                 | LR__3191
25d10                 | LR__3192
25d10     01 00 56 F2 | 	cmps	_var01, #1 wc
25d14     28 00 90 CD |  if_b	jmp	#LR__3193
25d18     02 01 02 FD | 	qmul	_var01, _var03
25d1c     A1 07 00 FF 
25d20     40 16 06 F6 | 	mov	arg03, ##1000000
25d24     19 FA 61 FD | 	getqy	result1
25d28     18 12 62 FD | 	getqx	arg01
25d2c     28 FA 61 FD | 	setq	result1
25d30     0B 13 12 FD | 	qdiv	arg01, arg03
25d34     18 FA 61 FD | 	getqx	result1
25d38     FD 02 62 FA | 	addct1	_var02, result1
25d3c     24 22 60 FD | 	waitct1
25d40                 | LR__3193
25d40                 | __system___waitus_ret
25d40     2D 00 64 FD | 	ret
25d44                 | 
25d44                 | __system___mount
25d44     0B 4A 05 F6 | 	mov	COUNT_, #11
25d48     A8 00 A0 FD | 	call	#pushregs_
25d4c     09 27 02 F6 | 	mov	local01, arg01
25d50     0A 29 0A F6 | 	mov	local02, arg02 wz
25d54     01 2A 66 F6 | 	neg	local03, #1
25d58     01 FA 65 A6 |  if_e	neg	result1, #1
25d5c     98 02 90 AD |  if_e	jmp	#LR__3215
25d60     13 FB C1 FA | 	rdbyte	result1, local01
25d64     2F FA 0D F2 | 	cmp	result1, #47 wz
25d68     28 00 90 5D |  if_ne	jmp	#LR__3202
25d6c     13 13 02 F6 | 	mov	arg01, local01
25d70     09 2D 02 F6 | 	mov	local04, arg01
25d74     97 06 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
25d78                 | LR__3200
25d78     16 FB C9 FA | 	rdbyte	result1, local04 wz
25d7c     01 2C 06 51 |  if_ne	add	local04, #1
25d80     F4 FF 9F 5D |  if_ne	jmp	#LR__3200
25d84                 | LR__3201
25d84     09 2D 82 F1 | 	sub	local04, arg01
25d88     16 FB 01 F6 | 	mov	result1, local04
25d8c     10 FA 55 F2 | 	cmps	result1, #16 wc
25d90     14 00 90 CD |  if_b	jmp	#LR__3203
25d94                 | LR__3202
25d94     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25d98     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
25d9c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25da0     01 FA 65 F6 | 	neg	result1, #1
25da4     50 02 90 FD | 	jmp	#LR__3215
25da8                 | LR__3203
25da8     00 2E 06 F6 | 	mov	local05, #0
25dac                 | LR__3204
25dac     04 2E 56 F2 | 	cmps	local05, #4 wc
25db0     B0 00 90 3D |  if_ae	jmp	#LR__3209
25db4     17 13 02 F6 | 	mov	arg01, local05
25db8     02 12 66 F0 | 	shl	arg01, #2
25dbc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25dc0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25dc4     09 FB 09 FB | 	rdlong	result1, arg01 wz
25dc8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25dcc     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
25dd0     17 2B 02 86 |  if_c_and_z	mov	local03, local05
25dd4     84 00 90 8D |  if_c_and_z	jmp	#LR__3208
25dd8     17 13 02 F6 | 	mov	arg01, local05
25ddc     02 12 66 F0 | 	shl	arg01, #2
25de0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25de4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25de8     09 13 02 FB | 	rdlong	arg01, arg01
25dec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25df0     09 2D 02 F6 | 	mov	local04, arg01
25df4     97 06 48 FB | 	callpa	#(@LR__3206-@LR__3205)>>2,fcache_load_ptr_
25df8                 | LR__3205
25df8     16 FB C9 FA | 	rdbyte	result1, local04 wz
25dfc     01 2C 06 51 |  if_ne	add	local04, #1
25e00     F4 FF 9F 5D |  if_ne	jmp	#LR__3205
25e04                 | LR__3206
25e04     09 2D 82 F1 | 	sub	local04, arg01
25e08     16 31 02 F6 | 	mov	local06, local04
25e0c     18 13 02 F6 | 	mov	arg01, local06
25e10     13 13 02 F1 | 	add	arg01, local01
25e14     09 FB C1 FA | 	rdbyte	result1, arg01
25e18     2F FA 0D F2 | 	cmp	result1, #47 wz
25e1c     18 33 02 56 |  if_ne	mov	local07, local06
25e20     13 33 02 51 |  if_ne	add	local07, local01
25e24     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
25e28     30 00 90 5D |  if_ne	jmp	#LR__3207
25e2c     17 17 02 F6 | 	mov	arg03, local05
25e30     02 16 66 F0 | 	shl	arg03, #2
25e34     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25e38     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
25e3c     0B 15 02 FB | 	rdlong	arg02, arg03
25e40     13 13 02 F6 | 	mov	arg01, local01
25e44     18 17 02 F6 | 	mov	arg03, local06
25e48     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25e4c     48 51 B0 FD | 	call	#__system__strncmp
25e50     00 FA 0D F2 | 	cmp	result1, #0 wz
25e54     17 2B 02 A6 |  if_e	mov	local03, local05
25e58     08 00 90 AD |  if_e	jmp	#LR__3209
25e5c                 | LR__3207
25e5c                 | LR__3208
25e5c     01 2E 06 F1 | 	add	local05, #1
25e60     48 FF 9F FD | 	jmp	#LR__3204
25e64                 | LR__3209
25e64     FF FF 7F FF 
25e68     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
25e6c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25e70     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
25e74     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25e78     01 FA 65 A6 |  if_e	neg	result1, #1
25e7c     78 01 90 AD |  if_e	jmp	#LR__3215
25e80     15 2F 02 F6 | 	mov	local05, local03
25e84     17 33 02 F6 | 	mov	local07, local05
25e88     02 32 66 F0 | 	shl	local07, #2
25e8c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25e90     F3 32 02 F1 | 	add	local07, ptr___system__dat__
25e94     19 31 0A FB | 	rdlong	local06, local07 wz
25e98     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25e9c     58 00 90 AD |  if_e	jmp	#LR__3210
25ea0     4C 30 06 F1 | 	add	local06, #76
25ea4     18 33 0A FB | 	rdlong	local07, local06 wz
25ea8     4C 30 86 F1 | 	sub	local06, #76
25eac     48 00 90 AD |  if_e	jmp	#LR__3210
25eb0     4C 30 06 F1 | 	add	local06, #76
25eb4     18 33 02 FB | 	rdlong	local07, local06
25eb8     19 2B 02 F6 | 	mov	local03, local07
25ebc     13 32 46 F7 | 	zerox	local07, #19
25ec0     14 2A 46 F0 | 	shr	local03, #20
25ec4     02 2A 66 F0 | 	shl	local03, #2
25ec8     ED 2A 02 F1 | 	add	local03, __methods__
25ecc     15 2B 02 FB | 	rdlong	local03, local03
25ed0     17 31 02 F6 | 	mov	local06, local05
25ed4     02 30 66 F0 | 	shl	local06, #2
25ed8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25edc     F3 30 02 F1 | 	add	local06, ptr___system__dat__
25ee0     18 13 02 FB | 	rdlong	arg01, local06
25ee4     F2 30 02 F6 | 	mov	local06, objptr
25ee8     19 E5 01 F6 | 	mov	objptr, local07
25eec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25ef0     2D 2A 62 FD | 	call	local03
25ef4     18 E5 01 F6 | 	mov	objptr, local06
25ef8                 | LR__3210
25ef8     17 35 02 F6 | 	mov	local08, local05
25efc     02 34 66 F0 | 	shl	local08, #2
25f00     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25f04     F3 34 02 F1 | 	add	local08, ptr___system__dat__
25f08     1A 29 62 FC | 	wrlong	local02, local08
25f0c     00 28 0E F2 | 	cmp	local02, #0 wz
25f10     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25f14     18 00 90 5D |  if_ne	jmp	#LR__3211
25f18     02 2E 66 F0 | 	shl	local05, #2
25f1c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25f20     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
25f24     17 01 68 FC | 	wrlong	#0, local05
25f28     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25f2c     C4 00 90 FD | 	jmp	#LR__3214
25f30                 | LR__3211
25f30     17 37 02 F6 | 	mov	local09, local05
25f34     04 36 66 F0 | 	shl	local09, #4
25f38     24 E6 05 F1 | 	add	ptr___system__dat__, #36
25f3c     F3 36 02 F1 | 	add	local09, ptr___system__dat__
25f40     1B 13 02 F6 | 	mov	arg01, local09
25f44     13 15 02 F6 | 	mov	arg02, local01
25f48     10 16 06 F6 | 	mov	arg03, #16
25f4c     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
25f50     98 4F B0 FD | 	call	#__system__strncpy
25f54     48 28 06 F1 | 	add	local02, #72
25f58     14 35 0A FB | 	rdlong	local08, local02 wz
25f5c     48 28 86 F1 | 	sub	local02, #72
25f60     7C 00 90 AD |  if_e	jmp	#LR__3213
25f64     48 28 06 F1 | 	add	local02, #72
25f68     14 35 02 FB | 	rdlong	local08, local02
25f6c     1A 39 02 F6 | 	mov	local10, local08
25f70     13 34 46 F7 | 	zerox	local08, #19
25f74     14 38 46 F0 | 	shr	local10, #20
25f78     02 38 66 F0 | 	shl	local10, #2
25f7c     ED 38 02 F1 | 	add	local10, __methods__
25f80     1C 39 02 FB | 	rdlong	local10, local10
25f84     1B 13 02 F6 | 	mov	arg01, local09
25f88     F2 3A 02 F6 | 	mov	local11, objptr
25f8c     1A E5 01 F6 | 	mov	objptr, local08
25f90     2D 38 62 FD | 	call	local10
25f94     1D E5 01 F6 | 	mov	objptr, local11
25f98     FD 12 0A F6 | 	mov	arg01, result1 wz
25f9c     40 00 90 AD |  if_e	jmp	#LR__3212
25fa0     17 35 02 F6 | 	mov	local08, local05
25fa4     02 34 66 F0 | 	shl	local08, #2
25fa8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25fac     F3 34 02 F1 | 	add	local08, ptr___system__dat__
25fb0     1A 01 68 FC | 	wrlong	#0, local08
25fb4     02 2E 66 F0 | 	shl	local05, #2
25fb8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
25fbc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
25fc0     17 01 68 FC | 	wrlong	#0, local05
25fc4     09 13 6A F6 | 	neg	arg01, arg01 wz
25fc8     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
25fcc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25fd0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25fd4     01 FA 65 56 |  if_ne	neg	result1, #1
25fd8     00 FA 05 A6 |  if_e	mov	result1, #0
25fdc     18 00 90 FD | 	jmp	#LR__3215
25fe0                 | LR__3212
25fe0                 | LR__3213
25fe0     02 2E 66 F0 | 	shl	local05, #2
25fe4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25fe8     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
25fec     17 37 62 FC | 	wrlong	local09, local05
25ff0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25ff4                 | LR__3214
25ff4     00 FA 05 F6 | 	mov	result1, #0
25ff8                 | LR__3215
25ff8     A7 F0 03 F6 | 	mov	ptra, fp
25ffc     B2 00 A0 FD | 	call	#popregs_
26000                 | __system___mount_ret
26000     2D 00 64 FD | 	ret
26004                 | 
26004                 | __system___chdir
26004     00 4A 05 F6 | 	mov	COUNT_, #0
26008     A8 00 A0 FD | 	call	#pushregs_
2600c     40 F0 07 F1 | 	add	ptra, #64
26010     04 4E 05 F1 | 	add	fp, #4
26014     A7 12 62 FC | 	wrlong	arg01, fp
26018     04 4E 05 F1 | 	add	fp, #4
2601c     A7 14 02 F6 | 	mov	arg02, fp
26020     08 4E 85 F1 | 	sub	fp, #8
26024     68 4B B0 FD | 	call	#__system__stat
26028     3C 4E 05 F1 | 	add	fp, #60
2602c     A7 FA 61 FC | 	wrlong	result1, fp
26030     3C 4E 85 F1 | 	sub	fp, #60
26034     00 FA 0D F2 | 	cmp	result1, #0 wz
26038     3C 4E 05 51 |  if_ne	add	fp, #60
2603c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
26040     3C 4E 85 51 |  if_ne	sub	fp, #60
26044     BC 00 90 5D |  if_ne	jmp	#LR__3222
26048     10 4E 05 F1 | 	add	fp, #16
2604c     A7 12 02 FB | 	rdlong	arg01, fp
26050     10 4E 85 F1 | 	sub	fp, #16
26054     78 00 00 FF 
26058     00 12 06 F5 | 	and	arg01, ##61440
2605c     08 00 00 FF 
26060     00 12 0E F2 | 	cmp	arg01, ##4096 wz
26064     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
26068     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
2606c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
26070     01 FA 65 56 |  if_ne	neg	result1, #1
26074     8C 00 90 5D |  if_ne	jmp	#LR__3222
26078     04 4E 05 F1 | 	add	fp, #4
2607c     A7 16 02 FB | 	rdlong	arg03, fp
26080     04 4E 85 F1 | 	sub	fp, #4
26084     0B 17 C2 FA | 	rdbyte	arg03, arg03
26088     2F 16 0E F2 | 	cmp	arg03, #47 wz
2608c     24 00 90 5D |  if_ne	jmp	#LR__3220
26090     84 E6 05 F1 | 	add	ptr___system__dat__, #132
26094     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
26098     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2609c     04 4E 05 F1 | 	add	fp, #4
260a0     A7 14 02 FB | 	rdlong	arg02, fp
260a4     04 4E 85 F1 | 	sub	fp, #4
260a8     00 17 06 F6 | 	mov	arg03, #256
260ac     3C 4E B0 FD | 	call	#__system__strncpy
260b0     4C 00 90 FD | 	jmp	#LR__3221
260b4                 | LR__3220
260b4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
260b8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
260bc     38 4E 05 F1 | 	add	fp, #56
260c0     A7 12 62 FC | 	wrlong	arg01, fp
260c4     38 4E 85 F1 | 	sub	fp, #56
260c8     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
260cc     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
260d0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
260d4     00 17 06 F6 | 	mov	arg03, #256
260d8     10 4E B0 FD | 	call	#__system__strncpy
260dc     38 4E 05 F1 | 	add	fp, #56
260e0     A7 12 02 FB | 	rdlong	arg01, fp
260e4     34 4E 85 F1 | 	sub	fp, #52
260e8     A7 14 02 FB | 	rdlong	arg02, fp
260ec     04 4E 85 F1 | 	sub	fp, #4
260f0     84 E6 05 F1 | 	add	ptr___system__dat__, #132
260f4     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
260f8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
260fc     10 00 B0 FD | 	call	#__system____getvfsforfile
26100                 | LR__3221
26100     00 FA 05 F6 | 	mov	result1, #0
26104                 | LR__3222
26104     A7 F0 03 F6 | 	mov	ptra, fp
26108     B2 00 A0 FD | 	call	#popregs_
2610c                 | __system___chdir_ret
2610c     2D 00 64 FD | 	ret
26110                 | 
26110                 | __system____getvfsforfile
26110     0E 4A 05 F6 | 	mov	COUNT_, #14
26114     A8 00 A0 FD | 	call	#pushregs_
26118     09 27 02 F6 | 	mov	local01, arg01
2611c     0A 29 02 F6 | 	mov	local02, arg02
26120     0B 2B 02 F6 | 	mov	local03, arg03
26124     97 10 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
26128                 | LR__3230
26128     14 FB C1 FA | 	rdbyte	result1, local02
2612c     2F FA 0D F2 | 	cmp	result1, #47 wz
26130     01 28 06 A1 |  if_e	add	local02, #1
26134     14 2D C2 AA |  if_e	rdbyte	local04, local02
26138     01 28 86 A1 |  if_e	sub	local02, #1
2613c     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
26140     01 28 06 A1 |  if_e	add	local02, #1
26144     E0 FF 9F AD |  if_e	jmp	#LR__3230
26148                 | LR__3231
26148     14 2D C2 FA | 	rdbyte	local04, local02
2614c     2F 2C 0E F2 | 	cmp	local04, #47 wz
26150     14 00 90 5D |  if_ne	jmp	#LR__3232
26154     13 13 02 F6 | 	mov	arg01, local01
26158     14 15 02 F6 | 	mov	arg02, local02
2615c     00 17 06 F6 | 	mov	arg03, #256
26160     88 4D B0 FD | 	call	#__system__strncpy
26164     7C 00 90 FD | 	jmp	#LR__3234
26168                 | LR__3232
26168     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2616c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
26170     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
26174     13 13 02 F6 | 	mov	arg01, local01
26178     00 17 06 F6 | 	mov	arg03, #256
2617c     6C 4D B0 FD | 	call	#__system__strncpy
26180     14 2D CA FA | 	rdbyte	local04, local02 wz
26184     5C 00 90 AD |  if_e	jmp	#LR__3233
26188     14 2D C2 FA | 	rdbyte	local04, local02
2618c     2E 2C 0E F2 | 	cmp	local04, #46 wz
26190     01 28 06 A1 |  if_e	add	local02, #1
26194     14 2F C2 AA |  if_e	rdbyte	local05, local02
26198     01 28 86 A1 |  if_e	sub	local02, #1
2619c     17 31 02 A6 |  if_e	mov	local06, local05
261a0     07 30 4E A7 |  if_e	zerox	local06, #7 wz
261a4     3C 00 90 AD |  if_e	jmp	#LR__3233
261a8     13 2F C2 FA | 	rdbyte	local05, local01
261ac     2F 2E 0E F2 | 	cmp	local05, #47 wz
261b0     01 26 06 A1 |  if_e	add	local01, #1
261b4     13 2D C2 AA |  if_e	rdbyte	local04, local01
261b8     01 26 86 A1 |  if_e	sub	local01, #1
261bc     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
261c0     AA 01 00 5F 
261c4     84 14 06 56 |  if_ne	mov	arg02, ##@LR__5360
261c8     13 13 02 56 |  if_ne	mov	arg01, local01
261cc     00 17 06 56 |  if_ne	mov	arg03, #256
261d0     64 4D B0 5D |  if_ne	call	#__system__strncat
261d4     13 13 02 F6 | 	mov	arg01, local01
261d8     14 15 02 F6 | 	mov	arg02, local02
261dc     00 17 06 F6 | 	mov	arg03, #256
261e0     54 4D B0 FD | 	call	#__system__strncat
261e4                 | LR__3233
261e4                 | LR__3234
261e4     13 13 02 F6 | 	mov	arg01, local01
261e8     0C 4F B0 FD | 	call	#__system___normalizeName
261ec     13 2D CA FA | 	rdbyte	local04, local01 wz
261f0     1C 00 90 AD |  if_e	jmp	#LR__3235
261f4     13 2D C2 FA | 	rdbyte	local04, local01
261f8     2F 2C 0E F2 | 	cmp	local04, #47 wz
261fc     01 26 06 A1 |  if_e	add	local01, #1
26200     13 31 C2 AA |  if_e	rdbyte	local06, local01
26204     01 26 86 A1 |  if_e	sub	local01, #1
26208     00 30 4E A2 |  if_e	cmps	local06, #0 wz
2620c     18 00 90 5D |  if_ne	jmp	#LR__3236
26210                 | LR__3235
26210     01 00 00 FF 
26214     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
26218     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2621c     01 00 00 FF 
26220     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
26224     EC 01 90 FD | 	jmp	#LR__3250
26228                 | LR__3236
26228     00 32 06 F6 | 	mov	local07, #0
2622c                 | LR__3237
2622c     04 32 56 F2 | 	cmps	local07, #4 wc
26230     CC 01 90 3D |  if_ae	jmp	#LR__3249
26234     19 31 02 F6 | 	mov	local06, local07
26238     02 30 66 F0 | 	shl	local06, #2
2623c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26240     F3 30 02 F1 | 	add	local06, ptr___system__dat__
26244     18 31 0A FB | 	rdlong	local06, local06 wz
26248     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2624c     A8 01 90 AD |  if_e	jmp	#LR__3248
26250     19 2D 02 F6 | 	mov	local04, local07
26254     02 2C 66 F0 | 	shl	local04, #2
26258     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2625c     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
26260     16 13 02 FB | 	rdlong	arg01, local04
26264     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26268     09 35 02 F6 | 	mov	local08, arg01
2626c     97 06 48 FB | 	callpa	#(@LR__3239-@LR__3238)>>2,fcache_load_ptr_
26270                 | LR__3238
26270     1A FB C9 FA | 	rdbyte	result1, local08 wz
26274     01 34 06 51 |  if_ne	add	local08, #1
26278     F4 FF 9F 5D |  if_ne	jmp	#LR__3238
2627c                 | LR__3239
2627c     09 35 82 F1 | 	sub	local08, arg01
26280     1A 37 02 F6 | 	mov	local09, local08
26284     1B 2D 02 F6 | 	mov	local04, local09
26288     13 2D 02 F1 | 	add	local04, local01
2628c     16 31 C2 FA | 	rdbyte	local06, local04
26290     2F 30 0E F2 | 	cmp	local06, #47 wz
26294     1B 39 02 56 |  if_ne	mov	local10, local09
26298     13 39 02 51 |  if_ne	add	local10, local01
2629c     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
262a0     54 01 90 5D |  if_ne	jmp	#LR__3247
262a4     19 17 02 F6 | 	mov	arg03, local07
262a8     02 16 66 F0 | 	shl	arg03, #2
262ac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
262b0     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
262b4     0B 15 02 FB | 	rdlong	arg02, arg03
262b8     1B 17 02 F6 | 	mov	arg03, local09
262bc     13 13 02 F6 | 	mov	arg01, local01
262c0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
262c4     D0 4C B0 FD | 	call	#__system__strncmp
262c8     00 FA 4D F2 | 	cmps	result1, #0 wz
262cc     28 01 90 5D |  if_ne	jmp	#LR__3247
262d0     19 3B 02 F6 | 	mov	local11, local07
262d4     02 3A 66 F0 | 	shl	local11, #2
262d8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
262dc     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
262e0     1D 3D 02 FB | 	rdlong	local12, local11
262e4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
262e8     97 22 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
262ec                 | LR__3240
262ec     1B 31 02 F6 | 	mov	local06, local09
262f0     01 30 06 F1 | 	add	local06, #1
262f4     13 31 02 F1 | 	add	local06, local01
262f8     18 3B C2 FA | 	rdbyte	local11, local06
262fc     2E 3A 0E F2 | 	cmp	local11, #46 wz
26300     2C 00 90 5D |  if_ne	jmp	#LR__3242
26304     1B 3B 02 F6 | 	mov	local11, local09
26308     02 3A 06 F1 | 	add	local11, #2
2630c     13 3B 02 F1 | 	add	local11, local01
26310     1D 39 C2 FA | 	rdbyte	local10, local11
26314     2F 38 0E F2 | 	cmp	local10, #47 wz
26318     1B 3F 02 56 |  if_ne	mov	local13, local09
2631c     02 3E 06 51 |  if_ne	add	local13, #2
26320     13 3F 02 51 |  if_ne	add	local13, local01
26324     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
26328     01 36 06 A1 |  if_e	add	local09, #1
2632c     BC FF 9F AD |  if_e	jmp	#LR__3240
26330                 | LR__3241
26330                 | LR__3242
26330     00 2A 0E F2 | 	cmp	local03, #0 wz
26334     15 13 02 56 |  if_ne	mov	arg01, local03
26338     13 15 02 56 |  if_ne	mov	arg02, local01
2633c     00 17 06 56 |  if_ne	mov	arg03, #256
26340     A8 4B B0 5D |  if_ne	call	#__system__strncpy
26344     13 15 02 F6 | 	mov	arg02, local01
26348     1B 15 02 F1 | 	add	arg02, local09
2634c     01 14 06 F1 | 	add	arg02, #1
26350     13 13 02 F6 | 	mov	arg01, local01
26354     D4 F5 BF FD | 	call	#__system____builtin_strcpy
26358     13 13 02 F6 | 	mov	arg01, local01
2635c     09 35 02 F6 | 	mov	local08, arg01
26360     97 06 48 FB | 	callpa	#(@LR__3244-@LR__3243)>>2,fcache_load_ptr_
26364                 | LR__3243
26364     1A FB C9 FA | 	rdbyte	result1, local08 wz
26368     01 34 06 51 |  if_ne	add	local08, #1
2636c     F4 FF 9F 5D |  if_ne	jmp	#LR__3243
26370                 | LR__3244
26370     09 35 82 F1 | 	sub	local08, arg01
26374     1A 37 02 F6 | 	mov	local09, local08
26378                 | LR__3245
26378     01 36 56 F2 | 	cmps	local09, #1 wc
2637c     70 00 90 CD |  if_b	jmp	#LR__3246
26380     1B 2D 02 F6 | 	mov	local04, local09
26384     13 2D 02 F1 | 	add	local04, local01
26388     16 3B C2 FA | 	rdbyte	local11, local04
2638c     2F 3A 0E F2 | 	cmp	local11, #47 wz
26390     1B 3B 02 A6 |  if_e	mov	local11, local09
26394     13 3B 02 A1 |  if_e	add	local11, local01
26398     1D 01 48 AC |  if_e	wrbyte	#0, local11
2639c     01 36 86 A1 |  if_e	sub	local09, #1
263a0     D4 FF 9F AD |  if_e	jmp	#LR__3245
263a4     1B 2D 02 F6 | 	mov	local04, local09
263a8     13 2D 02 F1 | 	add	local04, local01
263ac     16 3B C2 FA | 	rdbyte	local11, local04
263b0     2E 3A 0E F2 | 	cmp	local11, #46 wz
263b4     38 00 90 5D |  if_ne	jmp	#LR__3246
263b8     02 36 56 F2 | 	cmps	local09, #2 wc
263bc     30 00 90 CD |  if_b	jmp	#LR__3246
263c0     1B 41 02 F6 | 	mov	local14, local09
263c4     01 40 86 F1 | 	sub	local14, #1
263c8     13 41 02 F1 | 	add	local14, local01
263cc     20 2F C2 FA | 	rdbyte	local05, local14
263d0     2F 2E 0E F2 | 	cmp	local05, #47 wz
263d4     18 00 90 5D |  if_ne	jmp	#LR__3246
263d8     1B 2D 02 F6 | 	mov	local04, local09
263dc     01 2C 86 F1 | 	sub	local04, #1
263e0     13 2D 02 F1 | 	add	local04, local01
263e4     16 01 48 FC | 	wrbyte	#0, local04
263e8     02 36 86 F1 | 	sub	local09, #2
263ec     88 FF 9F FD | 	jmp	#LR__3245
263f0                 | LR__3246
263f0     1E FB 01 F6 | 	mov	result1, local12
263f4     1C 00 90 FD | 	jmp	#LR__3250
263f8                 | LR__3247
263f8                 | LR__3248
263f8     01 32 06 F1 | 	add	local07, #1
263fc     2C FE 9F FD | 	jmp	#LR__3237
26400                 | LR__3249
26400     02 00 00 FF 
26404     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
26408     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2640c     02 00 00 FF 
26410     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
26414                 | LR__3250
26414     A7 F0 03 F6 | 	mov	ptra, fp
26418     B2 00 A0 FD | 	call	#popregs_
2641c                 | __system____getvfsforfile_ret
2641c     2D 00 64 FD | 	ret
26420                 | 
26420                 | __system___basic_open
26420     05 4A 05 F6 | 	mov	COUNT_, #5
26424     A8 00 A0 FD | 	call	#pushregs_
26428     0A 27 02 F6 | 	mov	local01, arg02
2642c     0B 29 02 F6 | 	mov	local02, arg03
26430     0C 2B 02 F6 | 	mov	local03, arg04
26434     00 2C 06 F6 | 	mov	local04, #0
26438     88 4A B0 FD | 	call	#__system____getftab
2643c     FD 2E 0A F6 | 	mov	local05, result1 wz
26440     18 00 90 5D |  if_ne	jmp	#LR__3260
26444     EE 12 02 F6 | 	mov	arg01, abortchain
26448     0C 14 06 F6 | 	mov	arg02, #12
2644c     01 16 06 F6 | 	mov	arg03, #1
26450     DA 00 A0 FD | 	call	#__longjmp
26454     01 FA 65 F6 | 	neg	result1, #1
26458     14 01 90 FD | 	jmp	#LR__3269
2645c                 | LR__3260
2645c     08 2E 06 F1 | 	add	local05, #8
26460     17 FB 09 FB | 	rdlong	result1, local05 wz
26464     08 2E 86 F1 | 	sub	local05, #8
26468     17 13 02 56 |  if_ne	mov	arg01, local05
2646c     A8 41 B0 5D |  if_ne	call	#__system___closeraw
26470     00 26 0E F2 | 	cmp	local01, #0 wz
26474     00 28 0E A2 |  if_e	cmp	local02, #0 wz
26478     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
2647c     3C 00 90 AD |  if_e	jmp	#LR__3262
26480     0C 12 06 F6 | 	mov	arg01, #12
26484     90 36 B0 FD | 	call	#__system___gc_alloc_managed
26488     FD 2C 0A F6 | 	mov	local04, result1 wz
2648c     18 00 90 5D |  if_ne	jmp	#LR__3261
26490     EE 12 02 F6 | 	mov	arg01, abortchain
26494     07 14 06 F6 | 	mov	arg02, #7
26498     01 16 06 F6 | 	mov	arg03, #1
2649c     DA 00 A0 FD | 	call	#__longjmp
264a0     01 FA 65 F6 | 	neg	result1, #1
264a4     C8 00 90 FD | 	jmp	#LR__3269
264a8                 | LR__3261
264a8     16 01 68 FC | 	wrlong	#0, local04
264ac     04 2C 06 F1 | 	add	local04, #4
264b0     16 01 68 FC | 	wrlong	#0, local04
264b4     04 2C 86 F1 | 	sub	local04, #4
264b8     17 2D 62 FC | 	wrlong	local04, local05
264bc                 | LR__3262
264bc     00 26 0E F2 | 	cmp	local01, #0 wz
264c0     20 00 90 AD |  if_e	jmp	#LR__3263
264c4     16 27 62 FC | 	wrlong	local01, local04
264c8     16 FB 01 F6 | 	mov	result1, local04
264cc     00 E8 04 FF 
264d0     00 FA 45 F5 | 	or	result1, ##164626432
264d4     1C 2E 06 F1 | 	add	local05, #28
264d8     17 FB 61 FC | 	wrlong	result1, local05
264dc     1C 2E 86 F1 | 	sub	local05, #28
264e0     0C 00 90 FD | 	jmp	#LR__3264
264e4                 | LR__3263
264e4     1C 2E 06 F1 | 	add	local05, #28
264e8     17 01 68 FC | 	wrlong	#0, local05
264ec     1C 2E 86 F1 | 	sub	local05, #28
264f0                 | LR__3264
264f0     00 28 0E F2 | 	cmp	local02, #0 wz
264f4     28 00 90 AD |  if_e	jmp	#LR__3265
264f8     04 2C 06 F1 | 	add	local04, #4
264fc     16 29 62 FC | 	wrlong	local02, local04
26500     04 2C 86 F1 | 	sub	local04, #4
26504     16 FB 01 F6 | 	mov	result1, local04
26508     00 F0 04 FF 
2650c     00 FA 45 F5 | 	or	result1, ##165675008
26510     20 2E 06 F1 | 	add	local05, #32
26514     17 FB 61 FC | 	wrlong	result1, local05
26518     20 2E 86 F1 | 	sub	local05, #32
2651c     0C 00 90 FD | 	jmp	#LR__3266
26520                 | LR__3265
26520     20 2E 06 F1 | 	add	local05, #32
26524     17 01 68 FC | 	wrlong	#0, local05
26528     20 2E 86 F1 | 	sub	local05, #32
2652c                 | LR__3266
2652c     00 2A 0E F2 | 	cmp	local03, #0 wz
26530     24 00 90 AD |  if_e	jmp	#LR__3267
26534     08 2C 06 F1 | 	add	local04, #8
26538     16 2B 62 FC | 	wrlong	local03, local04
2653c     08 2C 86 F1 | 	sub	local04, #8
26540     00 F8 04 FF 
26544     00 2C 46 F5 | 	or	local04, ##166723584
26548     24 2E 06 F1 | 	add	local05, #36
2654c     17 2D 62 FC | 	wrlong	local04, local05
26550     24 2E 86 F1 | 	sub	local05, #36
26554     0C 00 90 FD | 	jmp	#LR__3268
26558                 | LR__3267
26558     24 2E 06 F1 | 	add	local05, #36
2655c     17 01 68 FC | 	wrlong	#0, local05
26560     24 2E 86 F1 | 	sub	local05, #36
26564                 | LR__3268
26564     08 2E 06 F1 | 	add	local05, #8
26568     17 0F 68 FC | 	wrlong	#7, local05
2656c     00 FA 05 F6 | 	mov	result1, #0
26570                 | LR__3269
26570     A7 F0 03 F6 | 	mov	ptra, fp
26574     B2 00 A0 FD | 	call	#popregs_
26578                 | __system___basic_open_ret
26578     2D 00 64 FD | 	ret
2657c                 | 
2657c                 | __system___basic_open_string
2657c     04 4A 05 F6 | 	mov	COUNT_, #4
26580     A8 00 A0 FD | 	call	#pushregs_
26584     0A 27 02 F6 | 	mov	local01, arg02
26588     0B 29 02 F6 | 	mov	local02, arg03
2658c     34 49 B0 FD | 	call	#__system____getftab
26590     FD 2A 0A F6 | 	mov	local03, result1 wz
26594     18 00 90 5D |  if_ne	jmp	#LR__3270
26598     EE 12 02 F6 | 	mov	arg01, abortchain
2659c     0C 14 06 F6 | 	mov	arg02, #12
265a0     01 16 06 F6 | 	mov	arg03, #1
265a4     DA 00 A0 FD | 	call	#__longjmp
265a8     01 FA 65 F6 | 	neg	result1, #1
265ac     58 00 90 FD | 	jmp	#LR__3272
265b0                 | LR__3270
265b0     08 2A 06 F1 | 	add	local03, #8
265b4     15 19 0A FB | 	rdlong	arg04, local03 wz
265b8     08 2A 86 F1 | 	sub	local03, #8
265bc     15 13 02 56 |  if_ne	mov	arg01, local03
265c0     54 40 B0 5D |  if_ne	call	#__system___closeraw
265c4     13 15 02 F6 | 	mov	arg02, local01
265c8     14 17 02 F6 | 	mov	arg03, local02
265cc     15 13 02 F6 | 	mov	arg01, local03
265d0     B6 19 06 F6 | 	mov	arg04, #438
265d4     3C 3D B0 FD | 	call	#__system___openraw
265d8     FD 2C 02 F6 | 	mov	local04, result1
265dc     00 2C 56 F2 | 	cmps	local04, #0 wc
265e0     20 00 90 3D |  if_ae	jmp	#LR__3271
265e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
265e8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
265ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
265f0     EE 12 02 F6 | 	mov	arg01, abortchain
265f4     01 16 06 F6 | 	mov	arg03, #1
265f8     DA 00 A0 FD | 	call	#__longjmp
265fc     01 FA 65 F6 | 	neg	result1, #1
26600     04 00 90 FD | 	jmp	#LR__3272
26604                 | LR__3271
26604     16 FB 01 F6 | 	mov	result1, local04
26608                 | LR__3272
26608     A7 F0 03 F6 | 	mov	ptra, fp
2660c     B2 00 A0 FD | 	call	#popregs_
26610                 | __system___basic_open_string_ret
26610     2D 00 64 FD | 	ret
26614                 | 
26614                 | __system___basic_print_char
26614     03 4A 05 F6 | 	mov	COUNT_, #3
26618     A8 00 A0 FD | 	call	#pushregs_
2661c     0A 27 02 F6 | 	mov	local01, arg02
26620     F4 4F B0 FD | 	call	#__system___gettxfunc
26624     FD 28 0A F6 | 	mov	local02, result1 wz
26628     00 FA 05 A6 |  if_e	mov	result1, #0
2662c     30 00 90 AD |  if_e	jmp	#LR__3280
26630     14 2B 02 F6 | 	mov	local03, local02
26634     13 28 46 F7 | 	zerox	local02, #19
26638     14 2A 46 F0 | 	shr	local03, #20
2663c     02 2A 66 F0 | 	shl	local03, #2
26640     ED 2A 02 F1 | 	add	local03, __methods__
26644     15 2B 02 FB | 	rdlong	local03, local03
26648     13 13 02 F6 | 	mov	arg01, local01
2664c     F2 26 02 F6 | 	mov	local01, objptr
26650     14 E5 01 F6 | 	mov	objptr, local02
26654     2D 2A 62 FD | 	call	local03
26658     13 E5 01 F6 | 	mov	objptr, local01
2665c     01 FA 05 F6 | 	mov	result1, #1
26660                 | LR__3280
26660     A7 F0 03 F6 | 	mov	ptra, fp
26664     B2 00 A0 FD | 	call	#popregs_
26668                 | __system___basic_print_char_ret
26668     2D 00 64 FD | 	ret
2666c                 | 
2666c                 | __system___basic_print_string
2666c     03 4A 05 F6 | 	mov	COUNT_, #3
26670     A8 00 A0 FD | 	call	#pushregs_
26674     0A 27 02 F6 | 	mov	local01, arg02
26678     0B 29 02 F6 | 	mov	local02, arg03
2667c     98 4F B0 FD | 	call	#__system___gettxfunc
26680     FD 2A 0A F6 | 	mov	local03, result1 wz
26684     00 FA 05 A6 |  if_e	mov	result1, #0
26688     18 00 90 AD |  if_e	jmp	#LR__3290
2668c     00 26 0E F2 | 	cmp	local01, #0 wz
26690     00 FA 05 A6 |  if_e	mov	result1, #0
26694     15 13 02 56 |  if_ne	mov	arg01, local03
26698     14 15 02 56 |  if_ne	mov	arg02, local02
2669c     13 17 02 56 |  if_ne	mov	arg03, local01
266a0     08 02 B0 5D |  if_ne	call	#__system___fmtstr
266a4                 | LR__3290
266a4     A7 F0 03 F6 | 	mov	ptra, fp
266a8     B2 00 A0 FD | 	call	#popregs_
266ac                 | __system___basic_print_string_ret
266ac     2D 00 64 FD | 	ret
266b0                 | 
266b0                 | __system___basic_print_integer
266b0     04 4A 05 F6 | 	mov	COUNT_, #4
266b4     A8 00 A0 FD | 	call	#pushregs_
266b8     0A 27 02 F6 | 	mov	local01, arg02
266bc     0B 29 02 F6 | 	mov	local02, arg03
266c0     0C 2B 02 F6 | 	mov	local03, arg04
266c4     50 4F B0 FD | 	call	#__system___gettxfunc
266c8     FD 2C 0A F6 | 	mov	local04, result1 wz
266cc     00 FA 05 A6 |  if_e	mov	result1, #0
266d0     16 13 02 56 |  if_ne	mov	arg01, local04
266d4     14 15 02 56 |  if_ne	mov	arg02, local02
266d8     13 17 02 56 |  if_ne	mov	arg03, local01
266dc     15 19 02 56 |  if_ne	mov	arg04, local03
266e0     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
266e4     A7 F0 03 F6 | 	mov	ptra, fp
266e8     B2 00 A0 FD | 	call	#popregs_
266ec                 | __system___basic_print_integer_ret
266ec     2D 00 64 FD | 	ret
266f0                 | 
266f0                 | __system___basic_print_unsigned
266f0     03 4A 05 F6 | 	mov	COUNT_, #3
266f4     A8 00 A0 FD | 	call	#pushregs_
266f8     0A 27 02 F6 | 	mov	local01, arg02
266fc     0B 29 02 F6 | 	mov	local02, arg03
26700     0C 2B 02 F6 | 	mov	local03, arg04
26704     10 4F B0 FD | 	call	#__system___gettxfunc
26708     FD 12 0A F6 | 	mov	arg01, result1 wz
2670c     00 FA 05 A6 |  if_e	mov	result1, #0
26710     3A 28 26 54 |  if_ne	bith	local02, #58
26714     14 15 02 56 |  if_ne	mov	arg02, local02
26718     13 17 02 56 |  if_ne	mov	arg03, local01
2671c     15 19 02 56 |  if_ne	mov	arg04, local03
26720     74 02 B0 5D |  if_ne	call	#__system___fmtnum
26724     A7 F0 03 F6 | 	mov	ptra, fp
26728     B2 00 A0 FD | 	call	#popregs_
2672c                 | __system___basic_print_unsigned_ret
2672c     2D 00 64 FD | 	ret
26730                 | 
26730                 | __system___basic_get_char
26730     03 4A 05 F6 | 	mov	COUNT_, #3
26734     A8 00 A0 FD | 	call	#pushregs_
26738     20 4F B0 FD | 	call	#__system___getrxfunc
2673c     FD 26 0A F6 | 	mov	local01, result1 wz
26740     01 FA 65 A6 |  if_e	neg	result1, #1
26744     28 00 90 AD |  if_e	jmp	#LR__3300
26748     13 29 02 F6 | 	mov	local02, local01
2674c     13 26 46 F7 | 	zerox	local01, #19
26750     14 28 46 F0 | 	shr	local02, #20
26754     02 28 66 F0 | 	shl	local02, #2
26758     ED 28 02 F1 | 	add	local02, __methods__
2675c     14 29 02 FB | 	rdlong	local02, local02
26760     F2 2A 02 F6 | 	mov	local03, objptr
26764     13 E5 01 F6 | 	mov	objptr, local01
26768     2D 28 62 FD | 	call	local02
2676c     15 E5 01 F6 | 	mov	objptr, local03
26770                 | LR__3300
26770     A7 F0 03 F6 | 	mov	ptra, fp
26774     B2 00 A0 FD | 	call	#popregs_
26778                 | __system___basic_get_char_ret
26778     2D 00 64 FD | 	ret
2677c                 | 
2677c                 | __system___basic_put
2677c     04 4A 05 F6 | 	mov	COUNT_, #4
26780     A8 00 A0 FD | 	call	#pushregs_
26784     0D 27 02 F6 | 	mov	local01, arg05
26788     13 19 02 FD | 	qmul	arg04, local01
2678c     09 29 02 F6 | 	mov	local02, arg01
26790     0B 2B 02 F6 | 	mov	local03, arg03
26794     00 14 0E F2 | 	cmp	arg02, #0 wz
26798     01 14 86 51 |  if_ne	sub	arg02, #1
2679c     14 13 02 56 |  if_ne	mov	arg01, local02
267a0     00 16 06 56 |  if_ne	mov	arg03, #0
267a4     18 2C 62 FD | 	getqx	local04
267a8     60 45 B0 5D |  if_ne	call	#__system__lseek
267ac     15 15 02 F6 | 	mov	arg02, local03
267b0     16 17 02 F6 | 	mov	arg03, local04
267b4     14 13 02 F6 | 	mov	arg01, local02
267b8     9C 44 B0 FD | 	call	#__system__write
267bc     FD 2C 02 F6 | 	mov	local04, result1
267c0     01 2C 56 F2 | 	cmps	local04, #1 wc
267c4     10 00 90 CD |  if_b	jmp	#LR__3310
267c8     16 89 02 F6 | 	mov	muldiva_, local04
267cc     13 8B 02 F6 | 	mov	muldivb_, local01
267d0     BA 00 A0 FD | 	call	#divide_
267d4     45 2D 02 F6 | 	mov	local04, muldivb_
267d8                 | LR__3310
267d8     16 FB 01 F6 | 	mov	result1, local04
267dc     A7 F0 03 F6 | 	mov	ptra, fp
267e0     B2 00 A0 FD | 	call	#popregs_
267e4                 | __system___basic_put_ret
267e4     2D 00 64 FD | 	ret
267e8                 | 
267e8                 | __system___basic_get
267e8     04 4A 05 F6 | 	mov	COUNT_, #4
267ec     A8 00 A0 FD | 	call	#pushregs_
267f0     0D 27 02 F6 | 	mov	local01, arg05
267f4     13 19 02 FD | 	qmul	arg04, local01
267f8     09 29 02 F6 | 	mov	local02, arg01
267fc     0B 2B 02 F6 | 	mov	local03, arg03
26800     00 14 0E F2 | 	cmp	arg02, #0 wz
26804     01 14 86 51 |  if_ne	sub	arg02, #1
26808     14 13 02 56 |  if_ne	mov	arg01, local02
2680c     00 16 06 56 |  if_ne	mov	arg03, #0
26810     18 2C 62 FD | 	getqx	local04
26814     F4 44 B0 5D |  if_ne	call	#__system__lseek
26818     15 15 02 F6 | 	mov	arg02, local03
2681c     16 17 02 F6 | 	mov	arg03, local04
26820     14 13 02 F6 | 	mov	arg01, local02
26824     6C 44 B0 FD | 	call	#__system__read
26828     FD 2C 02 F6 | 	mov	local04, result1
2682c     01 2C 56 F2 | 	cmps	local04, #1 wc
26830     10 00 90 CD |  if_b	jmp	#LR__3320
26834     16 89 02 F6 | 	mov	muldiva_, local04
26838     13 8B 02 F6 | 	mov	muldivb_, local01
2683c     BA 00 A0 FD | 	call	#divide_
26840     45 2D 02 F6 | 	mov	local04, muldivb_
26844                 | LR__3320
26844     16 FB 01 F6 | 	mov	result1, local04
26848     A7 F0 03 F6 | 	mov	ptra, fp
2684c     B2 00 A0 FD | 	call	#popregs_
26850                 | __system___basic_get_ret
26850     2D 00 64 FD | 	ret
26854                 | 
26854                 | __system___fmtchar
26854     00 4A 05 F6 | 	mov	COUNT_, #0
26858     A8 00 A0 FD | 	call	#pushregs_
2685c     10 F0 07 F1 | 	add	ptra, #16
26860     04 4E 05 F1 | 	add	fp, #4
26864     A7 12 62 FC | 	wrlong	arg01, fp
26868     04 4E 05 F1 | 	add	fp, #4
2686c     A7 14 62 FC | 	wrlong	arg02, fp
26870     04 4E 05 F1 | 	add	fp, #4
26874     A7 16 62 FC | 	wrlong	arg03, fp
26878     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2687c     A7 16 62 FC | 	wrlong	arg03, fp
26880     08 4E 85 F1 | 	sub	fp, #8
26884     A7 12 02 FB | 	rdlong	arg01, fp
26888     04 4E 05 F1 | 	add	fp, #4
2688c     A7 14 02 FB | 	rdlong	arg02, fp
26890     04 4E 05 F1 | 	add	fp, #4
26894     A7 16 02 F6 | 	mov	arg03, fp
26898     0C 4E 85 F1 | 	sub	fp, #12
2689c     0C 00 B0 FD | 	call	#__system___fmtstr
268a0     A7 F0 03 F6 | 	mov	ptra, fp
268a4     B2 00 A0 FD | 	call	#popregs_
268a8                 | __system___fmtchar_ret
268a8     2D 00 64 FD | 	ret
268ac                 | 
268ac                 | __system___fmtstr
268ac     09 4A 05 F6 | 	mov	COUNT_, #9
268b0     A8 00 A0 FD | 	call	#pushregs_
268b4     09 27 02 F6 | 	mov	local01, arg01
268b8     0A 29 02 F6 | 	mov	local02, arg02
268bc     0B 2B 02 F6 | 	mov	local03, arg03
268c0     14 19 E2 F8 | 	getbyte	arg04, local02, #0
268c4     15 13 02 F6 | 	mov	arg01, local03
268c8     09 2D 02 F6 | 	mov	local04, arg01
268cc     97 06 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
268d0                 | LR__3330
268d0     16 FB C9 FA | 	rdbyte	result1, local04 wz
268d4     01 2C 06 51 |  if_ne	add	local04, #1
268d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3330
268dc                 | LR__3331
268dc     09 2D 82 F1 | 	sub	local04, arg01
268e0     00 18 0E F2 | 	cmp	arg04, #0 wz
268e4     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
268e8     14 15 02 F6 | 	mov	arg02, local02
268ec     16 17 02 F6 | 	mov	arg03, local04
268f0     13 13 02 F6 | 	mov	arg01, local01
268f4     02 18 06 F6 | 	mov	arg04, #2
268f8     BC 49 B0 FD | 	call	#__system___fmtpad
268fc     FD 2E 02 F6 | 	mov	local05, result1
26900     00 2E 56 F2 | 	cmps	local05, #0 wc
26904     17 FB 01 C6 |  if_b	mov	result1, local05
26908     80 00 90 CD |  if_b	jmp	#LR__3334
2690c     01 2C 56 F2 | 	cmps	local04, #1 wc
26910     50 00 90 CD |  if_b	jmp	#LR__3333
26914     16 31 02 F6 | 	mov	local06, local04
26918                 | LR__3332
26918     13 33 02 F6 | 	mov	local07, local01
2691c     13 35 02 F6 | 	mov	local08, local01
26920     13 32 46 F7 | 	zerox	local07, #19
26924     14 34 46 F0 | 	shr	local08, #20
26928     02 34 66 F0 | 	shl	local08, #2
2692c     ED 34 02 F1 | 	add	local08, __methods__
26930     1A 35 02 FB | 	rdlong	local08, local08
26934     15 13 C2 FA | 	rdbyte	arg01, local03
26938     F2 36 02 F6 | 	mov	local09, objptr
2693c     19 E5 01 F6 | 	mov	objptr, local07
26940     01 2A 06 F1 | 	add	local03, #1
26944     2D 34 62 FD | 	call	local08
26948     1B E5 01 F6 | 	mov	objptr, local09
2694c     FD 36 02 F6 | 	mov	local09, result1
26950     00 36 56 F2 | 	cmps	local09, #0 wc
26954     1B FB 01 C6 |  if_b	mov	result1, local09
26958     30 00 90 CD |  if_b	jmp	#LR__3334
2695c     1B 2F 02 F1 | 	add	local05, local09
26960     ED 31 6E FB | 	djnz	local06, #LR__3332
26964                 | LR__3333
26964     14 15 02 F6 | 	mov	arg02, local02
26968     16 17 02 F6 | 	mov	arg03, local04
2696c     13 13 02 F6 | 	mov	arg01, local01
26970     01 18 06 F6 | 	mov	arg04, #1
26974     40 49 B0 FD | 	call	#__system___fmtpad
26978     FD 36 02 F6 | 	mov	local09, result1
2697c     00 36 56 F2 | 	cmps	local09, #0 wc
26980     1B FB 01 C6 |  if_b	mov	result1, local09
26984     1B 2F 02 31 |  if_ae	add	local05, local09
26988     17 FB 01 36 |  if_ae	mov	result1, local05
2698c                 | LR__3334
2698c     A7 F0 03 F6 | 	mov	ptra, fp
26990     B2 00 A0 FD | 	call	#popregs_
26994                 | __system___fmtstr_ret
26994     2D 00 64 FD | 	ret
26998                 | 
26998                 | __system___fmtnum
26998     0B 4A 05 F6 | 	mov	COUNT_, #11
2699c     A8 00 A0 FD | 	call	#pushregs_
269a0     09 27 02 F6 | 	mov	local01, arg01
269a4     0A 29 02 F6 | 	mov	local02, arg02
269a8     0B 2B 02 F6 | 	mov	local03, arg03
269ac     0C 2D 02 F6 | 	mov	local04, arg04
269b0     F8 2F 02 F6 | 	mov	local05, ptra
269b4     17 31 02 F6 | 	mov	local06, local05
269b8     00 32 06 F6 | 	mov	local07, #0
269bc     14 35 02 F6 | 	mov	local08, local02
269c0     10 34 46 F0 | 	shr	local08, #16
269c4     3F 34 06 F5 | 	and	local08, #63
269c8     14 37 E2 F8 | 	getbyte	local09, local02, #0
269cc     14 39 02 F6 | 	mov	local10, local02
269d0     1A 38 46 F0 | 	shr	local10, #26
269d4     03 38 06 F5 | 	and	local10, #3
269d8     1C 3B 02 F6 | 	mov	local11, local10
269dc     01 34 56 F2 | 	cmps	local08, #1 wc
269e0     44 F0 07 F1 | 	add	ptra, #68
269e4     01 34 86 31 |  if_ae	sub	local08, #1
269e8     41 36 56 F2 | 	cmps	local09, #65 wc
269ec     00 36 0E C2 |  if_b	cmp	local09, #0 wz
269f0     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
269f4     03 3A 0E F2 | 	cmp	local11, #3 wz
269f8     00 3A 06 A6 |  if_e	mov	local11, #0
269fc     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
26a00     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
26a04     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
26a08     00 3A 0E F2 | 	cmp	local11, #0 wz
26a0c     4C 00 90 AD |  if_e	jmp	#LR__3343
26a10     01 32 06 F6 | 	mov	local07, #1
26a14     1B 35 0A F2 | 	cmp	local08, local09 wz
26a18     18 00 90 5D |  if_ne	jmp	#LR__3341
26a1c     05 34 6E FB | 	djnz	local08, #LR__3340
26a20     13 13 02 F6 | 	mov	arg01, local01
26a24     14 15 02 F6 | 	mov	arg02, local02
26a28     23 16 06 F6 | 	mov	arg03, #35
26a2c     24 FE BF FD | 	call	#__system___fmtchar
26a30     88 00 90 FD | 	jmp	#LR__3347
26a34                 | LR__3340
26a34                 | LR__3341
26a34     02 3A 0E F2 | 	cmp	local11, #2 wz
26a38     18 39 02 A6 |  if_e	mov	local10, local06
26a3c     01 30 06 A1 |  if_e	add	local06, #1
26a40     1C 41 48 AC |  if_e	wrbyte	#32, local10
26a44     14 00 90 AD |  if_e	jmp	#LR__3342
26a48     04 3A 0E F2 | 	cmp	local11, #4 wz
26a4c     18 5B 48 AC |  if_e	wrbyte	#45, local06
26a50     01 30 06 A1 |  if_e	add	local06, #1
26a54     18 57 48 5C |  if_ne	wrbyte	#43, local06
26a58     01 30 06 51 |  if_ne	add	local06, #1
26a5c                 | LR__3342
26a5c                 | LR__3343
26a5c     18 13 02 F6 | 	mov	arg01, local06
26a60     15 15 02 F6 | 	mov	arg02, local03
26a64     16 17 02 F6 | 	mov	arg03, local04
26a68     1A 19 02 F6 | 	mov	arg04, local08
26a6c     00 1A 06 F6 | 	mov	arg05, #0
26a70     1D 28 2E F4 | 	testbn	local02, #29 wz
26a74     01 1A 06 56 |  if_ne	mov	arg05, #1
26a78     04 49 B0 FD | 	call	#__system___uitoa
26a7c     FD 32 02 F1 | 	add	local07, result1
26a80     1B 33 5A F2 | 	cmps	local07, local09 wcz
26a84     24 00 90 ED |  if_be	jmp	#LR__3346
26a88     97 0E 48 FB | 	callpa	#(@LR__3345-@LR__3344)>>2,fcache_load_ptr_
26a8c                 | LR__3344
26a8c     1B 39 02 F6 | 	mov	local10, local09
26a90     01 38 56 F2 | 	cmps	local10, #1 wc
26a94     01 36 86 F1 | 	sub	local09, #1
26a98     18 39 02 36 |  if_ae	mov	local10, local06
26a9c     01 30 06 31 |  if_ae	add	local06, #1
26aa0     1C 47 48 3C |  if_ae	wrbyte	#35, local10
26aa4     E4 FF 9F 3D |  if_ae	jmp	#LR__3344
26aa8                 | LR__3345
26aa8     18 01 48 FC | 	wrbyte	#0, local06
26aac                 | LR__3346
26aac     13 13 02 F6 | 	mov	arg01, local01
26ab0     14 15 02 F6 | 	mov	arg02, local02
26ab4     17 17 02 F6 | 	mov	arg03, local05
26ab8     F0 FD BF FD | 	call	#__system___fmtstr
26abc                 | LR__3347
26abc     A7 F0 03 F6 | 	mov	ptra, fp
26ac0     B2 00 A0 FD | 	call	#popregs_
26ac4                 | __system___fmtnum_ret
26ac4     2D 00 64 FD | 	ret
26ac8                 | 
26ac8                 | __system___fmtfloat
26ac8     10 4A 05 F6 | 	mov	COUNT_, #16
26acc     A8 00 A0 FD | 	call	#pushregs_
26ad0     24 F1 07 F1 | 	add	ptra, #292
26ad4     04 4E 05 F1 | 	add	fp, #4
26ad8     A7 12 62 FC | 	wrlong	arg01, fp
26adc     04 4E 05 F1 | 	add	fp, #4
26ae0     A7 14 62 FC | 	wrlong	arg02, fp
26ae4     04 4E 05 F1 | 	add	fp, #4
26ae8     A7 16 62 FC | 	wrlong	arg03, fp
26aec     04 4E 05 F1 | 	add	fp, #4
26af0     A7 18 62 FC | 	wrlong	arg04, fp
26af4     0C 4E 05 F1 | 	add	fp, #12
26af8     A7 14 68 FC | 	wrlong	#10, fp
26afc     08 4E 05 F1 | 	add	fp, #8
26b00     A7 00 68 FC | 	wrlong	#0, fp
26b04     08 4E 05 F1 | 	add	fp, #8
26b08     A7 00 68 FC | 	wrlong	#0, fp
26b0c     08 4E 05 F1 | 	add	fp, #8
26b10     A7 00 68 FC | 	wrlong	#0, fp
26b14     04 4E 05 F1 | 	add	fp, #4
26b18     A7 04 68 FC | 	wrlong	#2, fp
26b1c     04 4E 05 F1 | 	add	fp, #4
26b20     A7 00 68 FC | 	wrlong	#0, fp
26b24     04 4E 05 F1 | 	add	fp, #4
26b28     A7 00 68 FC | 	wrlong	#0, fp
26b2c     04 4E 05 F1 | 	add	fp, #4
26b30     A7 00 68 FC | 	wrlong	#0, fp
26b34     04 4E 05 F1 | 	add	fp, #4
26b38     A7 00 68 FC | 	wrlong	#0, fp
26b3c     18 4E 05 F1 | 	add	fp, #24
26b40     A7 00 68 FC | 	wrlong	#0, fp
26b44     68 4E 05 F1 | 	add	fp, #104
26b48     A7 26 02 F6 | 	mov	local01, fp
26b4c     08 4E 85 F1 | 	sub	fp, #8
26b50     A7 26 62 FC | 	wrlong	local01, fp
26b54     04 4E 05 F1 | 	add	fp, #4
26b58     A7 26 62 FC | 	wrlong	local01, fp
26b5c     BC 4E 85 F1 | 	sub	fp, #188
26b60     A7 26 02 FB | 	rdlong	local01, fp
26b64     10 26 46 F0 | 	shr	local01, #16
26b68     3F 26 06 F5 | 	and	local01, #63
26b6c     B0 4E 05 F1 | 	add	fp, #176
26b70     A7 26 62 FC | 	wrlong	local01, fp
26b74     B0 4E 85 F1 | 	sub	fp, #176
26b78     A7 26 02 FB | 	rdlong	local01, fp
26b7c     1C 26 46 F0 | 	shr	local01, #28
26b80     01 26 06 F5 | 	and	local01, #1
26b84     08 4F 05 F1 | 	add	fp, #264
26b88     A7 26 62 FC | 	wrlong	local01, fp
26b8c     58 4E 85 F1 | 	sub	fp, #88
26b90     A7 26 0A FB | 	rdlong	local01, fp wz
26b94     B8 4E 85 F1 | 	sub	fp, #184
26b98     3C 00 90 5D |  if_ne	jmp	#LR__3351
26b9c     10 4E 05 F1 | 	add	fp, #16
26ba0     A7 26 02 FB | 	rdlong	local01, fp
26ba4     10 4E 85 F1 | 	sub	fp, #16
26ba8     61 26 0E F2 | 	cmp	local01, #97 wz
26bac     18 00 90 5D |  if_ne	jmp	#LR__3350
26bb0     B8 4E 05 F1 | 	add	fp, #184
26bb4     A7 1A 68 FC | 	wrlong	#13, fp
26bb8     84 4E 85 F1 | 	sub	fp, #132
26bbc     A7 02 68 FC | 	wrlong	#1, fp
26bc0     34 4E 85 F1 | 	sub	fp, #52
26bc4     24 00 90 FD | 	jmp	#LR__3352
26bc8                 | LR__3350
26bc8     B8 4E 05 F1 | 	add	fp, #184
26bcc     A7 0C 68 FC | 	wrlong	#6, fp
26bd0     B8 4E 85 F1 | 	sub	fp, #184
26bd4     14 00 90 FD | 	jmp	#LR__3352
26bd8                 | LR__3351
26bd8     B8 4E 05 F1 | 	add	fp, #184
26bdc     A7 26 02 FB | 	rdlong	local01, fp
26be0     01 26 86 F1 | 	sub	local01, #1
26be4     A7 26 62 FC | 	wrlong	local01, fp
26be8     B8 4E 85 F1 | 	sub	fp, #184
26bec                 | LR__3352
26bec     08 4E 05 F1 | 	add	fp, #8
26bf0     A7 26 02 FB | 	rdlong	local01, fp
26bf4     16 26 46 F0 | 	shr	local01, #22
26bf8     03 26 06 F5 | 	and	local01, #3
26bfc     04 4F 05 F1 | 	add	fp, #260
26c00     A7 26 62 FC | 	wrlong	local01, fp
26c04     04 4F 85 F1 | 	sub	fp, #260
26c08     A7 26 02 FB | 	rdlong	local01, fp
26c0c     1D 26 46 F0 | 	shr	local01, #29
26c10     01 26 06 F5 | 	and	local01, #1
26c14     B4 4E 05 F1 | 	add	fp, #180
26c18     A7 26 62 FC | 	wrlong	local01, fp
26c1c     B4 4E 85 F1 | 	sub	fp, #180
26c20     A7 26 02 FB | 	rdlong	local01, fp
26c24     13 27 EA F8 | 	getbyte	local01, local01, #1
26c28     60 4E 05 F1 | 	add	fp, #96
26c2c     A7 26 62 FC | 	wrlong	local01, fp
26c30     60 4E 85 F1 | 	sub	fp, #96
26c34     A7 26 02 FB | 	rdlong	local01, fp
26c38     13 27 E2 F8 | 	getbyte	local01, local01, #0
26c3c     64 4E 05 F1 | 	add	fp, #100
26c40     A7 26 62 FC | 	wrlong	local01, fp
26c44     00 26 06 F6 | 	mov	local01, #0
26c48     5C 4E 85 F1 | 	sub	fp, #92
26c4c     A7 1A 02 FB | 	rdlong	arg05, fp
26c50     65 1A 0E F2 | 	cmp	arg05, #101 wz
26c54     01 26 06 A6 |  if_e	mov	local01, #1
26c58     14 4E 05 F1 | 	add	fp, #20
26c5c     A7 26 62 FC | 	wrlong	local01, fp
26c60     98 4E 05 F1 | 	add	fp, #152
26c64     A7 28 0A FB | 	rdlong	local02, fp wz
26c68     45 26 06 56 |  if_ne	mov	local01, #69
26c6c     65 26 06 A6 |  if_e	mov	local01, #101
26c70     8C 4E 85 F1 | 	sub	fp, #140
26c74     A7 26 62 FC | 	wrlong	local01, fp
26c78     20 4E 85 F1 | 	sub	fp, #32
26c7c     A7 26 02 FB | 	rdlong	local01, fp
26c80     10 4E 85 F1 | 	sub	fp, #16
26c84     61 26 0E F2 | 	cmp	local01, #97 wz
26c88     4C 00 90 5D |  if_ne	jmp	#LR__3353
26c8c     24 4E 05 F1 | 	add	fp, #36
26c90     A7 02 68 FC | 	wrlong	#1, fp
26c94     98 4E 05 F1 | 	add	fp, #152
26c98     A7 28 0A FB | 	rdlong	local02, fp wz
26c9c     50 26 06 56 |  if_ne	mov	local01, #80
26ca0     70 26 06 A6 |  if_e	mov	local01, #112
26ca4     8C 4E 85 F1 | 	sub	fp, #140
26ca8     A7 26 62 FC | 	wrlong	local01, fp
26cac     14 4E 85 F1 | 	sub	fp, #20
26cb0     A7 04 68 FC | 	wrlong	#2, fp
26cb4     1C 4E 05 F1 | 	add	fp, #28
26cb8     A7 02 68 FC | 	wrlong	#1, fp
26cbc     84 4E 05 F1 | 	add	fp, #132
26cc0     A7 28 0A FB | 	rdlong	local02, fp wz
26cc4     58 26 06 56 |  if_ne	mov	local01, #88
26cc8     78 26 06 A6 |  if_e	mov	local01, #120
26ccc     7C 4E 85 F1 | 	sub	fp, #124
26cd0     A7 26 62 FC | 	wrlong	local01, fp
26cd4     40 4E 85 F1 | 	sub	fp, #64
26cd8                 | LR__3353
26cd8     10 4E 05 F1 | 	add	fp, #16
26cdc     A7 26 02 FB | 	rdlong	local01, fp
26ce0     10 4E 85 F1 | 	sub	fp, #16
26ce4     23 26 0E F2 | 	cmp	local01, #35 wz
26ce8     3C 00 90 5D |  if_ne	jmp	#LR__3356
26cec     48 4E 05 F1 | 	add	fp, #72
26cf0     A7 02 68 FC | 	wrlong	#1, fp
26cf4     C8 4E 05 F1 | 	add	fp, #200
26cf8     A7 26 0A FB | 	rdlong	local01, fp wz
26cfc     10 4F 85 F1 | 	sub	fp, #272
26d00     18 00 90 AD |  if_e	jmp	#LR__3354
26d04     10 4E 05 F1 | 	add	fp, #16
26d08     A7 CC 68 FC | 	wrlong	#102, fp
26d0c     00 4F 05 F1 | 	add	fp, #256
26d10     A7 00 68 FC | 	wrlong	#0, fp
26d14     10 4F 85 F1 | 	sub	fp, #272
26d18     0C 00 90 FD | 	jmp	#LR__3355
26d1c                 | LR__3354
26d1c     10 4F 05 F1 | 	add	fp, #272
26d20     A7 02 68 FC | 	wrlong	#1, fp
26d24     10 4F 85 F1 | 	sub	fp, #272
26d28                 | LR__3355
26d28                 | LR__3356
26d28     08 4E 05 F1 | 	add	fp, #8
26d2c     A7 26 02 FB | 	rdlong	local01, fp
26d30     1A 26 46 F0 | 	shr	local01, #26
26d34     03 26 06 F5 | 	and	local01, #3
26d38     5C 4E 05 F1 | 	add	fp, #92
26d3c     A7 26 62 FC | 	wrlong	local01, fp
26d40     58 4E 85 F1 | 	sub	fp, #88
26d44     A7 FA 01 FB | 	rdlong	result1, fp
26d48     0C 4E 85 F1 | 	sub	fp, #12
26d4c     1F FA 4D F0 | 	shr	result1, #31 wz
26d50     20 00 90 AD |  if_e	jmp	#LR__3357
26d54     2C 4E 05 F1 | 	add	fp, #44
26d58     A7 5A 68 FC | 	wrlong	#45, fp
26d5c     20 4E 85 F1 | 	sub	fp, #32
26d60     A7 FA 01 FB | 	rdlong	result1, fp
26d64     1F FA E5 F4 | 	bitnot	result1, #31
26d68     A7 FA 61 FC | 	wrlong	result1, fp
26d6c     0C 4E 85 F1 | 	sub	fp, #12
26d70     3C 00 90 FD | 	jmp	#LR__3359
26d74                 | LR__3357
26d74     64 4E 05 F1 | 	add	fp, #100
26d78     A7 26 02 FB | 	rdlong	local01, fp
26d7c     64 4E 85 F1 | 	sub	fp, #100
26d80     01 26 0E F2 | 	cmp	local01, #1 wz
26d84     2C 4E 05 A1 |  if_e	add	fp, #44
26d88     A7 56 68 AC |  if_e	wrlong	#43, fp
26d8c     2C 4E 85 A1 |  if_e	sub	fp, #44
26d90     1C 00 90 AD |  if_e	jmp	#LR__3358
26d94     64 4E 05 F1 | 	add	fp, #100
26d98     A7 26 02 FB | 	rdlong	local01, fp
26d9c     64 4E 85 F1 | 	sub	fp, #100
26da0     02 26 0E F2 | 	cmp	local01, #2 wz
26da4     2C 4E 05 A1 |  if_e	add	fp, #44
26da8     A7 40 68 AC |  if_e	wrlong	#32, fp
26dac     2C 4E 85 A1 |  if_e	sub	fp, #44
26db0                 | LR__3358
26db0                 | LR__3359
26db0     08 4E 05 F1 | 	add	fp, #8
26db4     A7 26 02 FB | 	rdlong	local01, fp
26db8     18 26 46 F0 | 	shr	local01, #24
26dbc     03 26 06 F5 | 	and	local01, #3
26dc0     3C 4E 05 F1 | 	add	fp, #60
26dc4     A7 26 62 FC | 	wrlong	local01, fp
26dc8     00 26 06 F6 | 	mov	local01, #0
26dcc     18 4E 85 F1 | 	sub	fp, #24
26dd0     A7 2A 0A FB | 	rdlong	local03, fp wz
26dd4     2C 4E 85 F1 | 	sub	fp, #44
26dd8     18 00 90 5D |  if_ne	jmp	#LR__3360
26ddc     1C 4E 05 F1 | 	add	fp, #28
26de0     A7 2C 02 FB | 	rdlong	local04, fp
26de4     1C 4E 85 F1 | 	sub	fp, #28
26de8     16 2F 02 F6 | 	mov	local05, local04
26dec     0A 2E 0E F2 | 	cmp	local05, #10 wz
26df0     04 00 90 AD |  if_e	jmp	#LR__3361
26df4                 | LR__3360
26df4     01 26 66 F5 | 	xor	local01, #1
26df8                 | LR__3361
26df8     3C 4E 05 F1 | 	add	fp, #60
26dfc     A7 26 62 FC | 	wrlong	local01, fp
26e00     3C 4E 85 F1 | 	sub	fp, #60
26e04     00 26 0E F2 | 	cmp	local01, #0 wz
26e08     0C 01 90 AD |  if_e	jmp	#LR__3363
26e0c     44 4E 05 F1 | 	add	fp, #68
26e10     A7 2E 02 FB | 	rdlong	local05, fp
26e14     44 4E 85 F1 | 	sub	fp, #68
26e18     17 2B 02 F6 | 	mov	local03, local05
26e1c     02 2A 0E F2 | 	cmp	local03, #2 wz
26e20     F4 00 90 5D |  if_ne	jmp	#LR__3363
26e24     0C 4F 05 F1 | 	add	fp, #268
26e28     A7 30 02 FB | 	rdlong	local06, fp
26e2c     0C 4F 85 F1 | 	sub	fp, #268
26e30     18 2D 02 F6 | 	mov	local04, local06
26e34     02 2C 0E F2 | 	cmp	local04, #2 wz
26e38     DC 00 90 AD |  if_e	jmp	#LR__3363
26e3c     C0 4E 05 F1 | 	add	fp, #192
26e40     A7 12 02 FB | 	rdlong	arg01, fp
26e44     94 4E 85 F1 | 	sub	fp, #148
26e48     A7 14 02 FB | 	rdlong	arg02, fp
26e4c     14 4E 05 F1 | 	add	fp, #20
26e50     A7 16 02 FB | 	rdlong	arg03, fp
26e54     40 4E 85 F1 | 	sub	fp, #64
26e58     8C 47 B0 FD | 	call	#__system__emitsign_0559
26e5c     14 4F 05 F1 | 	add	fp, #276
26e60     A7 FA 61 FC | 	wrlong	result1, fp
26e64     14 4F 85 F1 | 	sub	fp, #276
26e68     00 FA 55 F2 | 	cmps	result1, #0 wc
26e6c     14 4F 05 C1 |  if_b	add	fp, #276
26e70     A7 FA 01 CB |  if_b	rdlong	result1, fp
26e74     14 4F 85 C1 |  if_b	sub	fp, #276
26e78     6C 0B 90 CD |  if_b	jmp	#LR__3413
26e7c     C0 4E 05 F1 | 	add	fp, #192
26e80     A7 26 02 FB | 	rdlong	local01, fp
26e84     54 4E 05 F1 | 	add	fp, #84
26e88     A7 2E 02 FB | 	rdlong	local05, fp
26e8c     17 2B 02 F6 | 	mov	local03, local05
26e90     17 27 02 F1 | 	add	local01, local05
26e94     54 4E 85 F1 | 	sub	fp, #84
26e98     A7 26 62 FC | 	wrlong	local01, fp
26e9c     58 4E 85 F1 | 	sub	fp, #88
26ea0     A7 26 0A FB | 	rdlong	local01, fp wz
26ea4     68 4E 85 F1 | 	sub	fp, #104
26ea8     60 00 90 AD |  if_e	jmp	#LR__3362
26eac     68 4E 05 F1 | 	add	fp, #104
26eb0     A7 26 02 FB | 	rdlong	local01, fp
26eb4     AC 4E 05 F1 | 	add	fp, #172
26eb8     A7 2A 02 FB | 	rdlong	local03, fp
26ebc     15 27 82 F1 | 	sub	local01, local03
26ec0     AC 4E 85 F1 | 	sub	fp, #172
26ec4     A7 26 62 FC | 	wrlong	local01, fp
26ec8     68 4E 85 F1 | 	sub	fp, #104
26ecc     00 26 56 F2 | 	cmps	local01, #0 wc
26ed0     68 4E 05 C1 |  if_b	add	fp, #104
26ed4     A7 00 68 CC |  if_b	wrlong	#0, fp
26ed8     68 4E 85 C1 |  if_b	sub	fp, #104
26edc     08 4E 05 F1 | 	add	fp, #8
26ee0     A7 26 02 FB | 	rdlong	local01, fp
26ee4     E8 26 06 F4 | 	bitl	local01, #232
26ee8     A7 26 62 FC | 	wrlong	local01, fp
26eec     60 4E 05 F1 | 	add	fp, #96
26ef0     A7 2E 02 FB | 	rdlong	local05, fp
26ef4     17 2B 02 F6 | 	mov	local03, local05
26ef8     08 2A 66 F0 | 	shl	local03, #8
26efc     15 27 42 F5 | 	or	local01, local03
26f00     60 4E 85 F1 | 	sub	fp, #96
26f04     A7 26 62 FC | 	wrlong	local01, fp
26f08     08 4E 85 F1 | 	sub	fp, #8
26f0c                 | LR__3362
26f0c     3C 4E 05 F1 | 	add	fp, #60
26f10     A7 00 68 FC | 	wrlong	#0, fp
26f14     3C 4E 85 F1 | 	sub	fp, #60
26f18                 | LR__3363
26f18     0C 4E 05 F1 | 	add	fp, #12
26f1c     A7 12 02 FB | 	rdlong	arg01, fp
26f20     0C 4E 85 F1 | 	sub	fp, #12
26f24     EC 21 B0 FD | 	call	#__system____builtin_ilogb
26f28     FF FF 3F FF 
26f2c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
26f30     50 00 90 5D |  if_ne	jmp	#LR__3365
26f34     2C 4E 05 F1 | 	add	fp, #44
26f38     A7 26 0A FB | 	rdlong	local01, fp wz
26f3c     2C 4E 85 F1 | 	sub	fp, #44
26f40     24 00 90 AD |  if_e	jmp	#LR__3364
26f44     C0 4E 05 F1 | 	add	fp, #192
26f48     A7 28 02 FB | 	rdlong	local02, fp
26f4c     14 2B 02 F6 | 	mov	local03, local02
26f50     01 2A 06 F1 | 	add	local03, #1
26f54     A7 2A 62 FC | 	wrlong	local03, fp
26f58     94 4E 85 F1 | 	sub	fp, #148
26f5c     A7 2C 02 FB | 	rdlong	local04, fp
26f60     2C 4E 85 F1 | 	sub	fp, #44
26f64     14 2D 42 FC | 	wrbyte	local04, local02
26f68                 | LR__3364
26f68     C0 4E 05 F1 | 	add	fp, #192
26f6c     A7 12 02 FB | 	rdlong	arg01, fp
26f70     C0 4E 85 F1 | 	sub	fp, #192
26f74     AA 01 00 FF 
26f78     86 14 06 F6 | 	mov	arg02, ##@LR__5361
26f7c     AC E9 BF FD | 	call	#__system____builtin_strcpy
26f80     A4 08 90 FD | 	jmp	#LR__3401
26f84                 | LR__3365
26f84     0C 4E 05 F1 | 	add	fp, #12
26f88     A7 28 02 FB | 	rdlong	local02, fp
26f8c     0C 4E 85 F1 | 	sub	fp, #12
26f90     14 13 02 F6 | 	mov	arg01, local02
26f94     7C 21 B0 FD | 	call	#__system____builtin_ilogb
26f98     00 00 40 FF 
26f9c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
26fa0     50 00 90 5D |  if_ne	jmp	#LR__3367
26fa4     2C 4E 05 F1 | 	add	fp, #44
26fa8     A7 26 0A FB | 	rdlong	local01, fp wz
26fac     2C 4E 85 F1 | 	sub	fp, #44
26fb0     24 00 90 AD |  if_e	jmp	#LR__3366
26fb4     C0 4E 05 F1 | 	add	fp, #192
26fb8     A7 28 02 FB | 	rdlong	local02, fp
26fbc     14 2B 02 F6 | 	mov	local03, local02
26fc0     01 2A 06 F1 | 	add	local03, #1
26fc4     A7 2A 62 FC | 	wrlong	local03, fp
26fc8     94 4E 85 F1 | 	sub	fp, #148
26fcc     A7 2C 02 FB | 	rdlong	local04, fp
26fd0     2C 4E 85 F1 | 	sub	fp, #44
26fd4     14 2D 42 FC | 	wrbyte	local04, local02
26fd8                 | LR__3366
26fd8     C0 4E 05 F1 | 	add	fp, #192
26fdc     A7 12 02 FB | 	rdlong	arg01, fp
26fe0     C0 4E 85 F1 | 	sub	fp, #192
26fe4     AA 01 00 FF 
26fe8     8A 14 06 F6 | 	mov	arg02, ##@LR__5362
26fec     3C E9 BF FD | 	call	#__system____builtin_strcpy
26ff0     34 08 90 FD | 	jmp	#LR__3401
26ff4                 | LR__3367
26ff4     10 4E 05 F1 | 	add	fp, #16
26ff8     A7 26 02 FB | 	rdlong	local01, fp
26ffc     10 4E 85 F1 | 	sub	fp, #16
27000     67 26 0E F2 | 	cmp	local01, #103 wz
27004     10 4E 05 51 |  if_ne	add	fp, #16
27008     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2700c     10 4E 85 51 |  if_ne	sub	fp, #16
27010     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
27014     94 01 90 5D |  if_ne	jmp	#LR__3372
27018     0C 4E 05 F1 | 	add	fp, #12
2701c     A7 12 02 FB | 	rdlong	arg01, fp
27020     08 4E 05 F1 | 	add	fp, #8
27024     A7 14 02 F6 | 	mov	arg02, fp
27028     0C 4E 05 F1 | 	add	fp, #12
2702c     A7 16 02 F6 | 	mov	arg03, fp
27030     98 4E 05 F1 | 	add	fp, #152
27034     A7 18 02 FB | 	rdlong	arg04, fp
27038     9C 4E 85 F1 | 	sub	fp, #156
2703c     A7 1A 02 FB | 	rdlong	arg05, fp
27040     1C 4E 85 F1 | 	sub	fp, #28
27044     AC 43 B0 FD | 	call	#__system__disassemble_0557
27048     10 4E 05 F1 | 	add	fp, #16
2704c     A7 26 02 FB | 	rdlong	local01, fp
27050     10 4E 85 F1 | 	sub	fp, #16
27054     23 26 0E F2 | 	cmp	local01, #35 wz
27058     A0 00 90 5D |  if_ne	jmp	#LR__3369
2705c     20 4E 05 F1 | 	add	fp, #32
27060     A7 26 02 FB | 	rdlong	local01, fp
27064     98 4E 05 F1 | 	add	fp, #152
27068     A7 2A 02 FB | 	rdlong	local03, fp
2706c     B8 4E 85 F1 | 	sub	fp, #184
27070     15 27 5A F2 | 	cmps	local01, local03 wcz
27074     24 4E 05 11 |  if_a	add	fp, #36
27078     A7 02 68 1C |  if_a	wrlong	#1, fp
2707c     24 4E 85 11 |  if_a	sub	fp, #36
27080     A4 01 90 1D |  if_a	jmp	#LR__3375
27084     20 4E 05 F1 | 	add	fp, #32
27088     A7 26 02 FB | 	rdlong	local01, fp
2708c     20 4E 85 F1 | 	sub	fp, #32
27090     00 26 56 F2 | 	cmps	local01, #0 wc
27094     2C 00 90 3D |  if_ae	jmp	#LR__3368
27098     B8 4E 05 F1 | 	add	fp, #184
2709c     A7 26 02 FB | 	rdlong	local01, fp
270a0     13 27 62 F6 | 	neg	local01, local01
270a4     98 4E 85 F1 | 	sub	fp, #152
270a8     A7 2A 02 FB | 	rdlong	local03, fp
270ac     20 4E 85 F1 | 	sub	fp, #32
270b0     13 2B 5A F2 | 	cmps	local03, local01 wcz
270b4     24 4E 05 E1 |  if_be	add	fp, #36
270b8     A7 02 68 EC |  if_be	wrlong	#1, fp
270bc     24 4E 85 E1 |  if_be	sub	fp, #36
270c0     64 01 90 FD | 	jmp	#LR__3375
270c4                 | LR__3368
270c4     20 4E 05 F1 | 	add	fp, #32
270c8     A7 26 02 FB | 	rdlong	local01, fp
270cc     20 4E 85 F1 | 	sub	fp, #32
270d0     01 26 56 F2 | 	cmps	local01, #1 wc
270d4     50 01 90 CD |  if_b	jmp	#LR__3375
270d8     B8 4E 05 F1 | 	add	fp, #184
270dc     A7 26 02 FB | 	rdlong	local01, fp
270e0     98 4E 85 F1 | 	sub	fp, #152
270e4     A7 2A 02 FB | 	rdlong	local03, fp
270e8     15 27 82 F1 | 	sub	local01, local03
270ec     98 4E 05 F1 | 	add	fp, #152
270f0     A7 26 62 FC | 	wrlong	local01, fp
270f4     B8 4E 85 F1 | 	sub	fp, #184
270f8     2C 01 90 FD | 	jmp	#LR__3375
270fc                 | LR__3369
270fc     00 26 06 F6 | 	mov	local01, #0
27100     08 4E 05 F1 | 	add	fp, #8
27104     A7 28 02 FB | 	rdlong	local02, fp
27108     1C 28 46 F0 | 	shr	local02, #28
2710c     01 28 0E F5 | 	and	local02, #1 wz
27110     01 26 06 A6 |  if_e	mov	local01, #1
27114     2C 4E 05 F1 | 	add	fp, #44
27118     A7 26 62 FC | 	wrlong	local01, fp
2711c     14 4E 85 F1 | 	sub	fp, #20
27120     A7 26 02 FB | 	rdlong	local01, fp
27124     98 4E 05 F1 | 	add	fp, #152
27128     A7 2A 02 FB | 	rdlong	local03, fp
2712c     B8 4E 85 F1 | 	sub	fp, #184
27130     15 27 52 F2 | 	cmps	local01, local03 wc
27134     18 00 90 3D |  if_ae	jmp	#LR__3370
27138     20 4E 05 F1 | 	add	fp, #32
2713c     A7 2C 02 FB | 	rdlong	local04, fp
27140     20 4E 85 F1 | 	sub	fp, #32
27144     FF FF 7F FF 
27148     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
2714c     10 00 90 3D |  if_ae	jmp	#LR__3371
27150                 | LR__3370
27150     24 4E 05 F1 | 	add	fp, #36
27154     A7 02 68 FC | 	wrlong	#1, fp
27158     24 4E 85 F1 | 	sub	fp, #36
2715c     C8 00 90 FD | 	jmp	#LR__3375
27160                 | LR__3371
27160     B8 4E 05 F1 | 	add	fp, #184
27164     A7 2C 02 FB | 	rdlong	local04, fp
27168     98 4E 85 F1 | 	sub	fp, #152
2716c     A7 2A 02 FB | 	rdlong	local03, fp
27170     15 2D 82 F1 | 	sub	local04, local03
27174     98 4E 05 F1 | 	add	fp, #152
27178     A7 2C 62 FC | 	wrlong	local04, fp
2717c     AC 4E 85 F1 | 	sub	fp, #172
27180     A7 12 02 FB | 	rdlong	arg01, fp
27184     08 4E 05 F1 | 	add	fp, #8
27188     A7 14 02 F6 | 	mov	arg02, fp
2718c     0C 4E 05 F1 | 	add	fp, #12
27190     A7 16 02 F6 | 	mov	arg03, fp
27194     16 19 62 F6 | 	neg	arg04, local04
27198     04 4E 85 F1 | 	sub	fp, #4
2719c     A7 1A 02 FB | 	rdlong	arg05, fp
271a0     1C 4E 85 F1 | 	sub	fp, #28
271a4     4C 42 B0 FD | 	call	#__system__disassemble_0557
271a8     7C 00 90 FD | 	jmp	#LR__3375
271ac                 | LR__3372
271ac     24 4E 05 F1 | 	add	fp, #36
271b0     A7 26 0A FB | 	rdlong	local01, fp wz
271b4     24 4E 85 F1 | 	sub	fp, #36
271b8     34 00 90 AD |  if_e	jmp	#LR__3373
271bc     0C 4E 05 F1 | 	add	fp, #12
271c0     A7 12 02 FB | 	rdlong	arg01, fp
271c4     08 4E 05 F1 | 	add	fp, #8
271c8     A7 14 02 F6 | 	mov	arg02, fp
271cc     0C 4E 05 F1 | 	add	fp, #12
271d0     A7 16 02 F6 | 	mov	arg03, fp
271d4     98 4E 05 F1 | 	add	fp, #152
271d8     A7 18 02 FB | 	rdlong	arg04, fp
271dc     9C 4E 85 F1 | 	sub	fp, #156
271e0     A7 1A 02 FB | 	rdlong	arg05, fp
271e4     1C 4E 85 F1 | 	sub	fp, #28
271e8     08 42 B0 FD | 	call	#__system__disassemble_0557
271ec     38 00 90 FD | 	jmp	#LR__3374
271f0                 | LR__3373
271f0     0C 4E 05 F1 | 	add	fp, #12
271f4     A7 12 02 FB | 	rdlong	arg01, fp
271f8     08 4E 05 F1 | 	add	fp, #8
271fc     A7 14 02 F6 | 	mov	arg02, fp
27200     0C 4E 05 F1 | 	add	fp, #12
27204     A7 16 02 F6 | 	mov	arg03, fp
27208     98 4E 05 F1 | 	add	fp, #152
2720c     A7 2C 02 FB | 	rdlong	local04, fp
27210     01 2C 06 F1 | 	add	local04, #1
27214     16 19 62 F6 | 	neg	arg04, local04
27218     9C 4E 85 F1 | 	sub	fp, #156
2721c     A7 1A 02 FB | 	rdlong	arg05, fp
27220     1C 4E 85 F1 | 	sub	fp, #28
27224     CC 41 B0 FD | 	call	#__system__disassemble_0557
27228                 | LR__3374
27228                 | LR__3375
27228     1C 4E 05 F1 | 	add	fp, #28
2722c     A7 26 02 FB | 	rdlong	local01, fp
27230     1C 4E 85 F1 | 	sub	fp, #28
27234     02 26 0E F2 | 	cmp	local01, #2 wz
27238     4C 00 90 5D |  if_ne	jmp	#LR__3378
2723c     1C 4E 05 F1 | 	add	fp, #28
27240     A7 20 68 FC | 	wrlong	#16, fp
27244     1C 4E 85 F1 | 	sub	fp, #28
27248                 | LR__3376
27248     14 4E 05 F1 | 	add	fp, #20
2724c     A7 26 0A FB | 	rdlong	local01, fp wz
27250     14 4E 85 F1 | 	sub	fp, #20
27254     30 00 90 AD |  if_e	jmp	#LR__3377
27258     14 4E 05 F1 | 	add	fp, #20
2725c     A7 2A 02 FB | 	rdlong	local03, fp
27260     14 4E 85 F1 | 	sub	fp, #20
27264     00 80 00 FF 
27268     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
2726c     18 00 90 3D |  if_ae	jmp	#LR__3377
27270     14 4E 05 F1 | 	add	fp, #20
27274     A7 26 02 FB | 	rdlong	local01, fp
27278     01 26 66 F0 | 	shl	local01, #1
2727c     A7 26 62 FC | 	wrlong	local01, fp
27280     14 4E 85 F1 | 	sub	fp, #20
27284     C0 FF 9F FD | 	jmp	#LR__3376
27288                 | LR__3377
27288                 | LR__3378
27288     70 4E 05 F1 | 	add	fp, #112
2728c     A7 12 02 F6 | 	mov	arg01, fp
27290     5C 4E 85 F1 | 	sub	fp, #92
27294     A7 14 02 FB | 	rdlong	arg02, fp
27298     08 4E 05 F1 | 	add	fp, #8
2729c     A7 16 02 FB | 	rdlong	arg03, fp
272a0     A0 4E 05 F1 | 	add	fp, #160
272a4     A7 1A 02 FB | 	rdlong	arg05, fp
272a8     BC 4E 85 F1 | 	sub	fp, #188
272ac     01 18 06 F6 | 	mov	arg04, #1
272b0     CC 40 B0 FD | 	call	#__system___uitoa
272b4     58 4E 05 F1 | 	add	fp, #88
272b8     A7 FA 61 FC | 	wrlong	result1, fp
272bc     38 4E 85 F1 | 	sub	fp, #56
272c0     A7 26 02 FB | 	rdlong	local01, fp
272c4     20 4E 85 F1 | 	sub	fp, #32
272c8     00 26 56 F2 | 	cmps	local01, #0 wc
272cc     50 00 90 3D |  if_ae	jmp	#LR__3379
272d0     60 4E 05 F1 | 	add	fp, #96
272d4     A7 5A 68 FC | 	wrlong	#45, fp
272d8     50 4E 05 F1 | 	add	fp, #80
272dc     A7 12 02 F6 | 	mov	arg01, fp
272e0     90 4E 85 F1 | 	sub	fp, #144
272e4     A7 2A 02 FB | 	rdlong	local03, fp
272e8     15 15 62 F6 | 	neg	arg02, local03
272ec     18 4E 05 F1 | 	add	fp, #24
272f0     A7 18 02 FB | 	rdlong	arg04, fp
272f4     84 4E 05 F1 | 	add	fp, #132
272f8     A7 30 02 FB | 	rdlong	local06, fp
272fc     BC 4E 85 F1 | 	sub	fp, #188
27300     18 2D 02 F6 | 	mov	local04, local06
27304     0A 16 06 F6 | 	mov	arg03, #10
27308     16 1B 02 F6 | 	mov	arg05, local04
2730c     70 40 B0 FD | 	call	#__system___uitoa
27310     5C 4E 05 F1 | 	add	fp, #92
27314     A7 FA 61 FC | 	wrlong	result1, fp
27318     5C 4E 85 F1 | 	sub	fp, #92
2731c     48 00 90 FD | 	jmp	#LR__3380
27320                 | LR__3379
27320     60 4E 05 F1 | 	add	fp, #96
27324     A7 56 68 FC | 	wrlong	#43, fp
27328     50 4E 05 F1 | 	add	fp, #80
2732c     A7 12 02 F6 | 	mov	arg01, fp
27330     90 4E 85 F1 | 	sub	fp, #144
27334     A7 14 02 FB | 	rdlong	arg02, fp
27338     18 4E 05 F1 | 	add	fp, #24
2733c     A7 18 02 FB | 	rdlong	arg04, fp
27340     84 4E 05 F1 | 	add	fp, #132
27344     A7 30 02 FB | 	rdlong	local06, fp
27348     BC 4E 85 F1 | 	sub	fp, #188
2734c     18 2D 02 F6 | 	mov	local04, local06
27350     0A 16 06 F6 | 	mov	arg03, #10
27354     16 1B 02 F6 | 	mov	arg05, local04
27358     24 40 B0 FD | 	call	#__system___uitoa
2735c     5C 4E 05 F1 | 	add	fp, #92
27360     A7 FA 61 FC | 	wrlong	result1, fp
27364     5C 4E 85 F1 | 	sub	fp, #92
27368                 | LR__3380
27368     24 4E 05 F1 | 	add	fp, #36
2736c     A7 26 0A FB | 	rdlong	local01, fp wz
27370     24 4E 85 F1 | 	sub	fp, #36
27374     2C 00 90 AD |  if_e	jmp	#LR__3381
27378     50 4E 05 F1 | 	add	fp, #80
2737c     A7 00 68 FC | 	wrlong	#0, fp
27380     04 4E 85 F1 | 	sub	fp, #4
27384     A7 00 68 FC | 	wrlong	#0, fp
27388     6C 4E 05 F1 | 	add	fp, #108
2738c     A7 26 02 FB | 	rdlong	local01, fp
27390     01 26 06 F1 | 	add	local01, #1
27394     64 4E 85 F1 | 	sub	fp, #100
27398     A7 26 62 FC | 	wrlong	local01, fp
2739c     54 4E 85 F1 | 	sub	fp, #84
273a0     88 00 90 FD | 	jmp	#LR__3384
273a4                 | LR__3381
273a4     20 4E 05 F1 | 	add	fp, #32
273a8     A7 26 02 FB | 	rdlong	local01, fp
273ac     20 4E 85 F1 | 	sub	fp, #32
273b0     00 26 56 F2 | 	cmps	local01, #0 wc
273b4     40 00 90 3D |  if_ae	jmp	#LR__3382
273b8     20 4E 05 F1 | 	add	fp, #32
273bc     A7 28 02 FB | 	rdlong	local02, fp
273c0     30 4E 05 F1 | 	add	fp, #48
273c4     A7 28 62 FC | 	wrlong	local02, fp
273c8     04 4E 85 F1 | 	sub	fp, #4
273cc     A7 28 62 FC | 	wrlong	local02, fp
273d0     2C 4E 85 F1 | 	sub	fp, #44
273d4     A7 26 02 FB | 	rdlong	local01, fp
273d8     98 4E 05 F1 | 	add	fp, #152
273dc     A7 2A 02 FB | 	rdlong	local03, fp
273e0     15 27 02 F1 | 	add	local01, local03
273e4     01 26 06 F1 | 	add	local01, #1
273e8     64 4E 85 F1 | 	sub	fp, #100
273ec     A7 26 62 FC | 	wrlong	local01, fp
273f0     54 4E 85 F1 | 	sub	fp, #84
273f4     34 00 90 FD | 	jmp	#LR__3383
273f8                 | LR__3382
273f8     4C 4E 05 F1 | 	add	fp, #76
273fc     A7 00 68 FC | 	wrlong	#0, fp
27400     2C 4E 85 F1 | 	sub	fp, #44
27404     A7 26 02 FB | 	rdlong	local01, fp
27408     30 4E 05 F1 | 	add	fp, #48
2740c     A7 26 62 FC | 	wrlong	local01, fp
27410     68 4E 05 F1 | 	add	fp, #104
27414     A7 2A 02 FB | 	rdlong	local03, fp
27418     15 27 02 F1 | 	add	local01, local03
2741c     01 26 06 F1 | 	add	local01, #1
27420     64 4E 85 F1 | 	sub	fp, #100
27424     A7 26 62 FC | 	wrlong	local01, fp
27428     54 4E 85 F1 | 	sub	fp, #84
2742c                 | LR__3383
2742c                 | LR__3384
2742c     54 4E 05 F1 | 	add	fp, #84
27430     A7 26 02 FB | 	rdlong	local01, fp
27434     08 4E 85 F1 | 	sub	fp, #8
27438     A7 2A 02 FB | 	rdlong	local03, fp
2743c     15 27 82 F1 | 	sub	local01, local03
27440     01 26 06 F1 | 	add	local01, #1
27444     24 4E 85 F1 | 	sub	fp, #36
27448     A7 26 62 FC | 	wrlong	local01, fp
2744c     04 4E 05 F1 | 	add	fp, #4
27450     A7 26 0A FB | 	rdlong	local01, fp wz
27454     2C 4E 85 F1 | 	sub	fp, #44
27458     28 4E 05 51 |  if_ne	add	fp, #40
2745c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
27460     01 2A 06 51 |  if_ne	add	local03, #1
27464     A7 2A 62 5C |  if_ne	wrlong	local03, fp
27468     28 4E 85 51 |  if_ne	sub	fp, #40
2746c     1C 4E 05 F1 | 	add	fp, #28
27470     A7 26 02 FB | 	rdlong	local01, fp
27474     1C 4E 85 F1 | 	sub	fp, #28
27478     10 26 0E F2 | 	cmp	local01, #16 wz
2747c     28 4E 05 A1 |  if_e	add	fp, #40
27480     A7 26 02 AB |  if_e	rdlong	local01, fp
27484     02 26 06 A1 |  if_e	add	local01, #2
27488     A7 26 62 AC |  if_e	wrlong	local01, fp
2748c     28 4E 85 A1 |  if_e	sub	fp, #40
27490     24 4E 05 F1 | 	add	fp, #36
27494     A7 26 0A FB | 	rdlong	local01, fp wz
27498     24 4E 85 F1 | 	sub	fp, #36
2749c     28 00 90 AD |  if_e	jmp	#LR__3385
274a0     28 4E 05 F1 | 	add	fp, #40
274a4     A7 26 02 FB | 	rdlong	local01, fp
274a8     02 2A 06 F6 | 	mov	local03, #2
274ac     34 4E 05 F1 | 	add	fp, #52
274b0     A7 2E 02 FB | 	rdlong	local05, fp
274b4     17 2B 02 F1 | 	add	local03, local05
274b8     15 27 02 F1 | 	add	local01, local03
274bc     34 4E 85 F1 | 	sub	fp, #52
274c0     A7 26 62 FC | 	wrlong	local01, fp
274c4     28 4E 85 F1 | 	sub	fp, #40
274c8                 | LR__3385
274c8     28 4E 05 F1 | 	add	fp, #40
274cc     A7 26 02 FB | 	rdlong	local01, fp
274d0     28 4E 85 F1 | 	sub	fp, #40
274d4     41 26 56 F2 | 	cmps	local01, #65 wc
274d8     01 FA 65 36 |  if_ae	neg	result1, #1
274dc     08 05 90 3D |  if_ae	jmp	#LR__3413
274e0     3C 4E 05 F1 | 	add	fp, #60
274e4     A7 26 0A FB | 	rdlong	local01, fp wz
274e8     3C 4E 85 F1 | 	sub	fp, #60
274ec     60 00 90 AD |  if_e	jmp	#LR__3386
274f0     C0 4E 05 F1 | 	add	fp, #192
274f4     A7 12 02 FB | 	rdlong	arg01, fp
274f8     94 4E 85 F1 | 	sub	fp, #148
274fc     A7 14 02 FB | 	rdlong	arg02, fp
27500     14 4E 05 F1 | 	add	fp, #20
27504     A7 16 02 FB | 	rdlong	arg03, fp
27508     40 4E 85 F1 | 	sub	fp, #64
2750c     D8 40 B0 FD | 	call	#__system__emitsign_0559
27510     18 4F 05 F1 | 	add	fp, #280
27514     A7 FA 61 FC | 	wrlong	result1, fp
27518     18 4F 85 F1 | 	sub	fp, #280
2751c     00 FA 55 F2 | 	cmps	result1, #0 wc
27520     18 4F 05 C1 |  if_b	add	fp, #280
27524     A7 FA 01 CB |  if_b	rdlong	result1, fp
27528     18 4F 85 C1 |  if_b	sub	fp, #280
2752c     B8 04 90 CD |  if_b	jmp	#LR__3413
27530     C0 4E 05 F1 | 	add	fp, #192
27534     A7 26 02 FB | 	rdlong	local01, fp
27538     58 4E 05 F1 | 	add	fp, #88
2753c     A7 2A 02 FB | 	rdlong	local03, fp
27540     15 27 02 F1 | 	add	local01, local03
27544     58 4E 85 F1 | 	sub	fp, #88
27548     A7 26 62 FC | 	wrlong	local01, fp
2754c     C0 4E 85 F1 | 	sub	fp, #192
27550                 | LR__3386
27550     4C 4E 05 F1 | 	add	fp, #76
27554     A7 26 02 FB | 	rdlong	local01, fp
27558     34 4E 85 F1 | 	sub	fp, #52
2755c     A7 26 62 FC | 	wrlong	local01, fp
27560     18 4E 85 F1 | 	sub	fp, #24
27564     97 9E 48 FB | 	callpa	#(@LR__3392-@LR__3387)>>2,fcache_load_ptr_
27568                 | LR__3387
27568     18 4E 05 F1 | 	add	fp, #24
2756c     A7 28 02 FB | 	rdlong	local02, fp
27570     3C 4E 05 F1 | 	add	fp, #60
27574     A7 2E 02 FB | 	rdlong	local05, fp
27578     54 4E 85 F1 | 	sub	fp, #84
2757c     17 29 52 F2 | 	cmps	local02, local05 wc
27580     20 01 90 3D |  if_ae	jmp	#LR__3393
27584     18 4E 05 F1 | 	add	fp, #24
27588     A7 30 02 FB | 	rdlong	local06, fp
2758c     18 4E 85 F1 | 	sub	fp, #24
27590     00 30 56 F2 | 	cmps	local06, #0 wc
27594     58 00 90 CD |  if_b	jmp	#LR__3388
27598     18 4E 05 F1 | 	add	fp, #24
2759c     A7 30 02 FB | 	rdlong	local06, fp
275a0     40 4E 05 F1 | 	add	fp, #64
275a4     A7 32 02 FB | 	rdlong	local07, fp
275a8     58 4E 85 F1 | 	sub	fp, #88
275ac     19 31 52 F2 | 	cmps	local06, local07 wc
275b0     3C 00 90 3D |  if_ae	jmp	#LR__3388
275b4     C0 4E 05 F1 | 	add	fp, #192
275b8     A7 34 02 FB | 	rdlong	local08, fp
275bc     1A 33 02 F6 | 	mov	local07, local08
275c0     01 32 06 F1 | 	add	local07, #1
275c4     A7 32 62 FC | 	wrlong	local07, fp
275c8     A8 4E 85 F1 | 	sub	fp, #168
275cc     A7 32 02 FB | 	rdlong	local07, fp
275d0     19 37 02 F6 | 	mov	local09, local07
275d4     58 4E 05 F1 | 	add	fp, #88
275d8     A7 38 02 F6 | 	mov	local10, fp
275dc     A7 36 02 F1 | 	add	local09, fp
275e0     1B 3B C2 FA | 	rdbyte	local11, local09
275e4     1A 3B 42 FC | 	wrbyte	local11, local08
275e8     70 4E 85 F1 | 	sub	fp, #112
275ec     20 00 90 FD | 	jmp	#LR__3389
275f0                 | LR__3388
275f0     C0 4E 05 F1 | 	add	fp, #192
275f4     A7 34 02 FB | 	rdlong	local08, fp
275f8     1A 37 02 F6 | 	mov	local09, local08
275fc     01 36 06 F1 | 	add	local09, #1
27600     A7 36 62 FC | 	wrlong	local09, fp
27604     C0 4E 85 F1 | 	sub	fp, #192
27608     30 36 06 F6 | 	mov	local09, #48
2760c     1A 61 48 FC | 	wrbyte	#48, local08
27610                 | LR__3389
27610     18 4E 05 F1 | 	add	fp, #24
27614     A7 30 02 FB | 	rdlong	local06, fp
27618     38 4E 05 F1 | 	add	fp, #56
2761c     A7 3C 02 FB | 	rdlong	local12, fp
27620     50 4E 85 F1 | 	sub	fp, #80
27624     1E 31 0A F2 | 	cmp	local06, local12 wz
27628     5C 00 90 5D |  if_ne	jmp	#LR__3391
2762c     10 4F 05 F1 | 	add	fp, #272
27630     A7 32 02 FB | 	rdlong	local07, fp
27634     10 4F 85 F1 | 	sub	fp, #272
27638     19 37 0A F6 | 	mov	local09, local07 wz
2763c     28 00 90 5D |  if_ne	jmp	#LR__3390
27640     54 4E 05 F1 | 	add	fp, #84
27644     A7 3A 02 FB | 	rdlong	local11, fp
27648     1D 39 02 F6 | 	mov	local10, local11
2764c     01 38 86 F1 | 	sub	local10, #1
27650     3C 4E 85 F1 | 	sub	fp, #60
27654     A7 3E 02 FB | 	rdlong	local13, fp
27658     18 4E 85 F1 | 	sub	fp, #24
2765c     1F 41 02 F6 | 	mov	local14, local13
27660     1C 41 52 F2 | 	cmps	local14, local10 wc
27664     20 00 90 3D |  if_ae	jmp	#LR__3391
27668                 | LR__3390
27668     C0 4E 05 F1 | 	add	fp, #192
2766c     A7 34 02 FB | 	rdlong	local08, fp
27670     1A 3D 02 F6 | 	mov	local12, local08
27674     01 3C 06 F1 | 	add	local12, #1
27678     A7 3C 62 FC | 	wrlong	local12, fp
2767c     C0 4E 85 F1 | 	sub	fp, #192
27680     2E 36 06 F6 | 	mov	local09, #46
27684     1A 5D 48 FC | 	wrbyte	#46, local08
27688                 | LR__3391
27688     18 4E 05 F1 | 	add	fp, #24
2768c     A7 42 02 FB | 	rdlong	local15, fp
27690     21 3D 02 F6 | 	mov	local12, local15
27694     01 3C 06 F1 | 	add	local12, #1
27698     A7 3C 62 FC | 	wrlong	local12, fp
2769c     18 4E 85 F1 | 	sub	fp, #24
276a0     C4 FE 9F FD | 	jmp	#LR__3387
276a4                 | LR__3392
276a4                 | LR__3393
276a4     34 4E 05 F1 | 	add	fp, #52
276a8     A7 26 0A FB | 	rdlong	local01, fp wz
276ac     34 4E 85 F1 | 	sub	fp, #52
276b0     A0 00 90 AD |  if_e	jmp	#LR__3397
276b4     C0 4E 05 F1 | 	add	fp, #192
276b8     A7 26 02 FB | 	rdlong	local01, fp
276bc     01 26 86 F1 | 	sub	local01, #1
276c0     A7 26 62 FC | 	wrlong	local01, fp
276c4     C0 4E 85 F1 | 	sub	fp, #192
276c8     97 26 48 FB | 	callpa	#(@LR__3395-@LR__3394)>>2,fcache_load_ptr_
276cc                 | LR__3394
276cc     C0 4E 05 F1 | 	add	fp, #192
276d0     A7 26 02 FB | 	rdlong	local01, fp
276d4     04 4E 05 F1 | 	add	fp, #4
276d8     A7 2A 02 FB | 	rdlong	local03, fp
276dc     C4 4E 85 F1 | 	sub	fp, #196
276e0     15 27 5A F2 | 	cmps	local01, local03 wcz
276e4     30 00 90 ED |  if_be	jmp	#LR__3396
276e8     C0 4E 05 F1 | 	add	fp, #192
276ec     A7 30 02 FB | 	rdlong	local06, fp
276f0     C0 4E 85 F1 | 	sub	fp, #192
276f4     18 2D C2 FA | 	rdbyte	local04, local06
276f8     30 2C 0E F2 | 	cmp	local04, #48 wz
276fc     18 00 90 5D |  if_ne	jmp	#LR__3396
27700     C0 4E 05 F1 | 	add	fp, #192
27704     A7 26 02 FB | 	rdlong	local01, fp
27708     01 26 86 F1 | 	sub	local01, #1
2770c     A7 26 62 FC | 	wrlong	local01, fp
27710     C0 4E 85 F1 | 	sub	fp, #192
27714     B4 FF 9F FD | 	jmp	#LR__3394
27718                 | LR__3395
27718                 | LR__3396
27718     C0 4E 05 F1 | 	add	fp, #192
2771c     A7 28 02 FB | 	rdlong	local02, fp
27720     C0 4E 85 F1 | 	sub	fp, #192
27724     14 27 C2 FA | 	rdbyte	local01, local02
27728     2E 26 0E F2 | 	cmp	local01, #46 wz
2772c     C0 4E 05 A1 |  if_e	add	fp, #192
27730     A7 26 02 AB |  if_e	rdlong	local01, fp
27734     01 26 86 A1 |  if_e	sub	local01, #1
27738     A7 26 62 AC |  if_e	wrlong	local01, fp
2773c     C0 4E 85 A1 |  if_e	sub	fp, #192
27740     C0 4E 05 F1 | 	add	fp, #192
27744     A7 2A 02 FB | 	rdlong	local03, fp
27748     01 2A 06 F1 | 	add	local03, #1
2774c     A7 2A 62 FC | 	wrlong	local03, fp
27750     C0 4E 85 F1 | 	sub	fp, #192
27754                 | LR__3397
27754     24 4E 05 F1 | 	add	fp, #36
27758     A7 26 0A FB | 	rdlong	local01, fp wz
2775c     24 4E 85 F1 | 	sub	fp, #36
27760     B4 00 90 AD |  if_e	jmp	#LR__3400
27764     C0 4E 05 F1 | 	add	fp, #192
27768     A7 28 02 FB | 	rdlong	local02, fp
2776c     14 2B 02 F6 | 	mov	local03, local02
27770     01 2A 06 F1 | 	add	local03, #1
27774     A7 2A 62 FC | 	wrlong	local03, fp
27778     90 4E 85 F1 | 	sub	fp, #144
2777c     A7 2C 02 FB | 	rdlong	local04, fp
27780     14 2D 42 FC | 	wrbyte	local04, local02
27784     90 4E 05 F1 | 	add	fp, #144
27788     A7 28 02 FB | 	rdlong	local02, fp
2778c     14 2B 02 F6 | 	mov	local03, local02
27790     01 2A 06 F1 | 	add	local03, #1
27794     A7 2A 62 FC | 	wrlong	local03, fp
27798     60 4E 85 F1 | 	sub	fp, #96
2779c     A7 2C 02 FB | 	rdlong	local04, fp
277a0     14 2D 42 FC | 	wrbyte	local04, local02
277a4     48 4E 85 F1 | 	sub	fp, #72
277a8     A7 00 68 FC | 	wrlong	#0, fp
277ac     18 4E 85 F1 | 	sub	fp, #24
277b0                 | LR__3398
277b0     18 4E 05 F1 | 	add	fp, #24
277b4     A7 28 02 FB | 	rdlong	local02, fp
277b8     44 4E 05 F1 | 	add	fp, #68
277bc     A7 2E 02 FB | 	rdlong	local05, fp
277c0     5C 4E 85 F1 | 	sub	fp, #92
277c4     17 29 52 F2 | 	cmps	local02, local05 wc
277c8     4C 00 90 3D |  if_ae	jmp	#LR__3399
277cc     C0 4E 05 F1 | 	add	fp, #192
277d0     A7 34 02 FB | 	rdlong	local08, fp
277d4     1A 3D 02 F6 | 	mov	local12, local08
277d8     01 3C 06 F1 | 	add	local12, #1
277dc     A7 3C 62 FC | 	wrlong	local12, fp
277e0     A8 4E 85 F1 | 	sub	fp, #168
277e4     A7 32 02 FB | 	rdlong	local07, fp
277e8     19 37 02 F6 | 	mov	local09, local07
277ec     98 4E 05 F1 | 	add	fp, #152
277f0     A7 38 02 F6 | 	mov	local10, fp
277f4     A7 36 02 F1 | 	add	local09, fp
277f8     1B 3B C2 FA | 	rdbyte	local11, local09
277fc     1A 3B 42 FC | 	wrbyte	local11, local08
27800     98 4E 85 F1 | 	sub	fp, #152
27804     A7 3C 02 FB | 	rdlong	local12, fp
27808     01 3C 06 F1 | 	add	local12, #1
2780c     A7 3C 62 FC | 	wrlong	local12, fp
27810     18 4E 85 F1 | 	sub	fp, #24
27814     98 FF 9F FD | 	jmp	#LR__3398
27818                 | LR__3399
27818                 | LR__3400
27818     C0 4E 05 F1 | 	add	fp, #192
2781c     A7 26 02 FB | 	rdlong	local01, fp
27820     C0 4E 85 F1 | 	sub	fp, #192
27824     13 01 48 FC | 	wrbyte	#0, local01
27828                 | LR__3401
27828     6C 4E 05 F1 | 	add	fp, #108
2782c     A7 26 0A FB | 	rdlong	local01, fp wz
27830     6C 4E 85 F1 | 	sub	fp, #108
27834     90 01 90 AD |  if_e	jmp	#LR__3412
27838     48 4E 05 F1 | 	add	fp, #72
2783c     A7 2A 0A FB | 	rdlong	local03, fp wz
27840     48 4E 85 F1 | 	sub	fp, #72
27844     80 01 90 AD |  if_e	jmp	#LR__3412
27848     C4 4E 05 F1 | 	add	fp, #196
2784c     A7 12 02 FB | 	rdlong	arg01, fp
27850     C4 4E 85 F1 | 	sub	fp, #196
27854     09 45 02 F6 | 	mov	local16, arg01
27858     97 06 48 FB | 	callpa	#(@LR__3403-@LR__3402)>>2,fcache_load_ptr_
2785c                 | LR__3402
2785c     22 FB C9 FA | 	rdbyte	result1, local16 wz
27860     01 44 06 51 |  if_ne	add	local16, #1
27864     F4 FF 9F 5D |  if_ne	jmp	#LR__3402
27868                 | LR__3403
27868     09 45 82 F1 | 	sub	local16, arg01
2786c     22 2D 02 F6 | 	mov	local04, local16
27870     6C 4E 05 F1 | 	add	fp, #108
27874     A7 30 02 FB | 	rdlong	local06, fp
27878     6C 4E 85 F1 | 	sub	fp, #108
2787c     18 2D 5A F2 | 	cmps	local04, local06 wcz
27880     44 01 90 ED |  if_be	jmp	#LR__3412
27884     C4 4E 05 F1 | 	add	fp, #196
27888     A7 26 02 FB | 	rdlong	local01, fp
2788c     5C 4E 05 F1 | 	add	fp, #92
27890     A7 26 62 FC | 	wrlong	local01, fp
27894     FC 4E 85 F1 | 	sub	fp, #252
27898     A7 26 0A FB | 	rdlong	local01, fp wz
2789c     24 4E 85 F1 | 	sub	fp, #36
278a0     20 00 90 AD |  if_e	jmp	#LR__3404
278a4     B8 4E 05 F1 | 	add	fp, #184
278a8     A7 00 68 FC | 	wrlong	#0, fp
278ac     4C 4E 85 F1 | 	sub	fp, #76
278b0     A7 26 02 FB | 	rdlong	local01, fp
278b4     B0 4E 05 F1 | 	add	fp, #176
278b8     A7 26 62 FC | 	wrlong	local01, fp
278bc     1C 4F 85 F1 | 	sub	fp, #284
278c0     24 00 90 FD | 	jmp	#LR__3405
278c4                 | LR__3404
278c4     6C 4E 05 F1 | 	add	fp, #108
278c8     A7 26 02 FB | 	rdlong	local01, fp
278cc     01 26 86 F1 | 	sub	local01, #1
278d0     4C 4E 05 F1 | 	add	fp, #76
278d4     A7 2A 02 FB | 	rdlong	local03, fp
278d8     15 27 82 F1 | 	sub	local01, local03
278dc     64 4E 05 F1 | 	add	fp, #100
278e0     A7 26 62 FC | 	wrlong	local01, fp
278e4     1C 4F 85 F1 | 	sub	fp, #284
278e8                 | LR__3405
278e8     97 20 48 FB | 	callpa	#(@LR__3407-@LR__3406)>>2,fcache_load_ptr_
278ec                 | LR__3406
278ec     1C 4F 05 F1 | 	add	fp, #284
278f0     A7 26 0A FB | 	rdlong	local01, fp wz
278f4     1C 4F 85 F1 | 	sub	fp, #284
278f8     30 00 90 AD |  if_e	jmp	#LR__3408
278fc     20 4F 05 F1 | 	add	fp, #288
27900     A7 28 02 FB | 	rdlong	local02, fp
27904     14 2B 02 F6 | 	mov	local03, local02
27908     01 2A 06 F1 | 	add	local03, #1
2790c     A7 2A 62 FC | 	wrlong	local03, fp
27910     14 55 48 FC | 	wrbyte	#42, local02
27914     04 4E 85 F1 | 	sub	fp, #4
27918     A7 26 02 FB | 	rdlong	local01, fp
2791c     01 26 86 F1 | 	sub	local01, #1
27920     A7 26 62 FC | 	wrlong	local01, fp
27924     1C 4F 85 F1 | 	sub	fp, #284
27928     C0 FF 9F FD | 	jmp	#LR__3406
2792c                 | LR__3407
2792c                 | LR__3408
2792c     B8 4E 05 F1 | 	add	fp, #184
27930     A7 26 0A FB | 	rdlong	local01, fp wz
27934     B8 4E 85 F1 | 	sub	fp, #184
27938     70 00 90 AD |  if_e	jmp	#LR__3411
2793c     20 4F 05 F1 | 	add	fp, #288
27940     A7 28 02 FB | 	rdlong	local02, fp
27944     14 2B 02 F6 | 	mov	local03, local02
27948     01 2A 06 F1 | 	add	local03, #1
2794c     A7 2A 62 FC | 	wrlong	local03, fp
27950     14 5D 48 FC | 	wrbyte	#46, local02
27954     04 4E 85 F1 | 	sub	fp, #4
27958     A7 00 68 FC | 	wrlong	#0, fp
2795c     1C 4F 85 F1 | 	sub	fp, #284
27960                 | LR__3409
27960     1C 4F 05 F1 | 	add	fp, #284
27964     A7 28 02 FB | 	rdlong	local02, fp
27968     64 4E 85 F1 | 	sub	fp, #100
2796c     A7 2E 02 FB | 	rdlong	local05, fp
27970     B8 4E 85 F1 | 	sub	fp, #184
27974     17 29 52 F2 | 	cmps	local02, local05 wc
27978     30 00 90 3D |  if_ae	jmp	#LR__3410
2797c     20 4F 05 F1 | 	add	fp, #288
27980     A7 34 02 FB | 	rdlong	local08, fp
27984     1A 3D 02 F6 | 	mov	local12, local08
27988     01 3C 06 F1 | 	add	local12, #1
2798c     A7 3C 62 FC | 	wrlong	local12, fp
27990     1A 55 48 FC | 	wrbyte	#42, local08
27994     04 4E 85 F1 | 	sub	fp, #4
27998     A7 3C 02 FB | 	rdlong	local12, fp
2799c     01 3C 06 F1 | 	add	local12, #1
279a0     A7 3C 62 FC | 	wrlong	local12, fp
279a4     1C 4F 85 F1 | 	sub	fp, #284
279a8     B4 FF 9F FD | 	jmp	#LR__3409
279ac                 | LR__3410
279ac                 | LR__3411
279ac     20 4F 05 F1 | 	add	fp, #288
279b0     A7 28 02 FB | 	rdlong	local02, fp
279b4     14 2B 02 F6 | 	mov	local03, local02
279b8     01 2A 06 F1 | 	add	local03, #1
279bc     A7 2A 62 FC | 	wrlong	local03, fp
279c0     20 4F 85 F1 | 	sub	fp, #288
279c4     14 01 48 FC | 	wrbyte	#0, local02
279c8                 | LR__3412
279c8     04 4E 05 F1 | 	add	fp, #4
279cc     A7 12 02 FB | 	rdlong	arg01, fp
279d0     04 4E 05 F1 | 	add	fp, #4
279d4     A7 14 02 FB | 	rdlong	arg02, fp
279d8     BC 4E 05 F1 | 	add	fp, #188
279dc     A7 16 02 FB | 	rdlong	arg03, fp
279e0     C4 4E 85 F1 | 	sub	fp, #196
279e4     C4 EE BF FD | 	call	#__system___fmtstr
279e8                 | LR__3413
279e8     A7 F0 03 F6 | 	mov	ptra, fp
279ec     B2 00 A0 FD | 	call	#popregs_
279f0                 | __system___fmtfloat_ret
279f0     2D 00 64 FD | 	ret
279f4                 | 
279f4                 | __system__Left_S
279f4     04 4A 05 F6 | 	mov	COUNT_, #4
279f8     A8 00 A0 FD | 	call	#pushregs_
279fc     09 27 02 F6 | 	mov	local01, arg01
27a00     0A 29 02 F6 | 	mov	local02, arg02
27a04     01 28 56 F2 | 	cmps	local02, #1 wc
27a08     AA 01 00 CF 
27a0c     8E FA 05 C6 |  if_b	mov	result1, ##@LR__5363
27a10     5C 00 90 CD |  if_b	jmp	#LR__3423
27a14     13 13 02 F6 | 	mov	arg01, local01
27a18     09 2B 02 F6 | 	mov	local03, arg01
27a1c     97 06 48 FB | 	callpa	#(@LR__3421-@LR__3420)>>2,fcache_load_ptr_
27a20                 | LR__3420
27a20     15 FB C9 FA | 	rdbyte	result1, local03 wz
27a24     01 2A 06 51 |  if_ne	add	local03, #1
27a28     F4 FF 9F 5D |  if_ne	jmp	#LR__3420
27a2c                 | LR__3421
27a2c     09 2B 82 F1 | 	sub	local03, arg01
27a30     15 FB 01 F6 | 	mov	result1, local03
27a34     14 FB 59 F2 | 	cmps	result1, local02 wcz
27a38     13 FB 01 E6 |  if_be	mov	result1, local01
27a3c     30 00 90 ED |  if_be	jmp	#LR__3423
27a40     14 13 02 F6 | 	mov	arg01, local02
27a44     02 12 06 F1 | 	add	arg01, #2
27a48     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
27a4c     FD 2C 0A F6 | 	mov	local04, result1 wz
27a50     18 00 90 AD |  if_e	jmp	#LR__3422
27a54     16 13 02 F6 | 	mov	arg01, local04
27a58     13 15 02 F6 | 	mov	arg02, local01
27a5c     14 17 02 F6 | 	mov	arg03, local02
27a60     34 DE BF FD | 	call	#__system____builtin_memmove
27a64     16 29 02 F1 | 	add	local02, local04
27a68     14 01 48 FC | 	wrbyte	#0, local02
27a6c                 | LR__3422
27a6c     16 FB 01 F6 | 	mov	result1, local04
27a70                 | LR__3423
27a70     A7 F0 03 F6 | 	mov	ptra, fp
27a74     B2 00 A0 FD | 	call	#popregs_
27a78                 | __system__Left_S_ret
27a78     2D 00 64 FD | 	ret
27a7c                 | 
27a7c                 | __system__Right_S
27a7c     05 4A 05 F6 | 	mov	COUNT_, #5
27a80     A8 00 A0 FD | 	call	#pushregs_
27a84     09 27 02 F6 | 	mov	local01, arg01
27a88     0A 29 02 F6 | 	mov	local02, arg02
27a8c     01 28 56 F2 | 	cmps	local02, #1 wc
27a90     AA 01 00 CF 
27a94     8F FA 05 C6 |  if_b	mov	result1, ##@LR__5364
27a98     64 00 90 CD |  if_b	jmp	#LR__3433
27a9c     13 13 02 F6 | 	mov	arg01, local01
27aa0     09 2B 02 F6 | 	mov	local03, arg01
27aa4     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
27aa8                 | LR__3430
27aa8     15 FB C9 FA | 	rdbyte	result1, local03 wz
27aac     01 2A 06 51 |  if_ne	add	local03, #1
27ab0     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
27ab4                 | LR__3431
27ab4     09 2B 82 F1 | 	sub	local03, arg01
27ab8     15 FB 01 F6 | 	mov	result1, local03
27abc     FD 2C 02 F6 | 	mov	local04, result1
27ac0     14 2D 5A F2 | 	cmps	local04, local02 wcz
27ac4     13 FB 01 E6 |  if_be	mov	result1, local01
27ac8     34 00 90 ED |  if_be	jmp	#LR__3433
27acc     14 13 02 F6 | 	mov	arg01, local02
27ad0     02 12 06 F1 | 	add	arg01, #2
27ad4     40 20 B0 FD | 	call	#__system___gc_alloc_managed
27ad8     FD 2E 0A F6 | 	mov	local05, result1 wz
27adc     1C 00 90 AD |  if_e	jmp	#LR__3432
27ae0     14 2D 82 F1 | 	sub	local04, local02
27ae4     13 2D 02 F1 | 	add	local04, local01
27ae8     01 28 06 F1 | 	add	local02, #1
27aec     17 13 02 F6 | 	mov	arg01, local05
27af0     16 15 02 F6 | 	mov	arg02, local04
27af4     14 17 02 F6 | 	mov	arg03, local02
27af8     9C DD BF FD | 	call	#__system____builtin_memmove
27afc                 | LR__3432
27afc     17 FB 01 F6 | 	mov	result1, local05
27b00                 | LR__3433
27b00     A7 F0 03 F6 | 	mov	ptra, fp
27b04     B2 00 A0 FD | 	call	#popregs_
27b08                 | __system__Right_S_ret
27b08     2D 00 64 FD | 	ret
27b0c                 | 
27b0c                 | __system__Mid_S
27b0c     05 4A 05 F6 | 	mov	COUNT_, #5
27b10     A8 00 A0 FD | 	call	#pushregs_
27b14     09 27 02 F6 | 	mov	local01, arg01
27b18     0A 29 02 F6 | 	mov	local02, arg02
27b1c     01 16 56 F2 | 	cmps	arg03, #1 wc
27b20     AA 01 00 CF 
27b24     90 FA 05 C6 |  if_b	mov	result1, ##@LR__5365
27b28     80 00 90 CD |  if_b	jmp	#LR__3443
27b2c     01 28 86 F1 | 	sub	local02, #1
27b30     00 28 56 F3 | 	fges	local02, #0 wc
27b34     13 13 02 F6 | 	mov	arg01, local01
27b38     09 2B 02 F6 | 	mov	local03, arg01
27b3c     97 06 48 FB | 	callpa	#(@LR__3441-@LR__3440)>>2,fcache_load_ptr_
27b40                 | LR__3440
27b40     15 FB C9 FA | 	rdbyte	result1, local03 wz
27b44     01 2A 06 51 |  if_ne	add	local03, #1
27b48     F4 FF 9F 5D |  if_ne	jmp	#LR__3440
27b4c                 | LR__3441
27b4c     09 2B 82 F1 | 	sub	local03, arg01
27b50     15 FB 01 F6 | 	mov	result1, local03
27b54     FD 14 02 F6 | 	mov	arg02, result1
27b58     14 15 52 F2 | 	cmps	arg02, local02 wc
27b5c     AA 01 00 CF 
27b60     91 FA 05 C6 |  if_b	mov	result1, ##@LR__5366
27b64     44 00 90 CD |  if_b	jmp	#LR__3443
27b68     0A 2D 02 F6 | 	mov	local04, arg02
27b6c     14 2D 82 F1 | 	sub	local04, local02
27b70     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
27b74     0B 2D 02 16 |  if_a	mov	local04, arg03
27b78     16 13 02 F6 | 	mov	arg01, local04
27b7c     02 12 06 F1 | 	add	arg01, #2
27b80     94 1F B0 FD | 	call	#__system___gc_alloc_managed
27b84     FD 2E 0A F6 | 	mov	local05, result1 wz
27b88     1C 00 90 AD |  if_e	jmp	#LR__3442
27b8c     13 29 02 F1 | 	add	local02, local01
27b90     17 13 02 F6 | 	mov	arg01, local05
27b94     14 15 02 F6 | 	mov	arg02, local02
27b98     16 17 02 F6 | 	mov	arg03, local04
27b9c     F8 DC BF FD | 	call	#__system____builtin_memmove
27ba0     17 2D 02 F1 | 	add	local04, local05
27ba4     16 01 48 FC | 	wrbyte	#0, local04
27ba8                 | LR__3442
27ba8     17 FB 01 F6 | 	mov	result1, local05
27bac                 | LR__3443
27bac     A7 F0 03 F6 | 	mov	ptra, fp
27bb0     B2 00 A0 FD | 	call	#popregs_
27bb4                 | __system__Mid_S_ret
27bb4     2D 00 64 FD | 	ret
27bb8                 | 
27bb8                 | __system__Chr_S
27bb8     01 4A 05 F6 | 	mov	COUNT_, #1
27bbc     A8 00 A0 FD | 	call	#pushregs_
27bc0     09 27 02 F6 | 	mov	local01, arg01
27bc4     03 12 06 F6 | 	mov	arg01, #3
27bc8     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
27bcc     00 FA 4D F2 | 	cmps	result1, #0 wz
27bd0     FD 26 42 5C |  if_ne	wrbyte	local01, result1
27bd4     01 FA 05 51 |  if_ne	add	result1, #1
27bd8     FD 00 48 5C |  if_ne	wrbyte	#0, result1
27bdc     01 FA 85 51 |  if_ne	sub	result1, #1
27be0     A7 F0 03 F6 | 	mov	ptra, fp
27be4     B2 00 A0 FD | 	call	#popregs_
27be8                 | __system__Chr_S_ret
27be8     2D 00 64 FD | 	ret
27bec                 | 
27bec                 | __system__str_S
27bec     02 4A 05 F6 | 	mov	COUNT_, #2
27bf0     A8 00 A0 FD | 	call	#pushregs_
27bf4     09 27 02 F6 | 	mov	local01, arg01
27bf8     10 12 06 F6 | 	mov	arg01, #16
27bfc     18 1F B0 FD | 	call	#__system___gc_alloc_managed
27c00     FD 28 0A F6 | 	mov	local02, result1 wz
27c04     30 00 90 AD |  if_e	jmp	#LR__3450
27c08     F8 13 02 F6 | 	mov	arg01, ptra
27c0c     08 F0 07 F1 | 	add	ptra, #8
27c10     09 29 62 FC | 	wrlong	local02, arg01
27c14     04 12 06 F1 | 	add	arg01, #4
27c18     09 01 68 FC | 	wrlong	#0, arg01
27c1c     04 12 86 F1 | 	sub	arg01, #4
27c20     00 10 05 FF 
27c24     00 12 46 F5 | 	or	arg01, ##169869312
27c28     00 14 06 F6 | 	mov	arg02, #0
27c2c     13 17 02 F6 | 	mov	arg03, local01
27c30     67 18 06 F6 | 	mov	arg04, #103
27c34     90 EE BF FD | 	call	#__system___fmtfloat
27c38                 | LR__3450
27c38     14 FB 01 F6 | 	mov	result1, local02
27c3c     A7 F0 03 F6 | 	mov	ptra, fp
27c40     B2 00 A0 FD | 	call	#popregs_
27c44                 | __system__str_S_ret
27c44     2D 00 64 FD | 	ret
27c48                 | 
27c48                 | __system__Number_S
27c48     08 4A 05 F6 | 	mov	COUNT_, #8
27c4c     A8 00 A0 FD | 	call	#pushregs_
27c50     09 27 02 F6 | 	mov	local01, arg01
27c54     0A 29 0A F6 | 	mov	local02, arg02 wz
27c58     0B 2B 02 F6 | 	mov	local03, arg03
27c5c     3C 00 90 5D |  if_ne	jmp	#LR__3462
27c60     01 28 06 F6 | 	mov	local02, #1
27c64     15 2D 02 F6 | 	mov	local04, local03
27c68     01 2E 06 F6 | 	mov	local05, #1
27c6c     97 16 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
27c70                 | LR__3460
27c70     00 30 06 F6 | 	mov	local06, #0
27c74     13 2D 1A F2 | 	cmp	local04, local01 wcz
27c78     01 30 66 E6 |  if_be	neg	local06, #1
27c7c     16 2F 12 F2 | 	cmp	local05, local04 wc
27c80     19 33 A2 F1 | 	subx	local07, local07
27c84     19 31 CA F7 | 	test	local06, local07 wz
27c88     15 2D 02 5D |  if_ne	qmul	local04, local03
27c8c     16 2F 02 56 |  if_ne	mov	local05, local04
27c90     01 28 06 51 |  if_ne	add	local02, #1
27c94     18 2C 62 5D |  if_ne	getqx	local04
27c98     D4 FF 9F 5D |  if_ne	jmp	#LR__3460
27c9c                 | LR__3461
27c9c                 | LR__3462
27c9c     20 28 36 F3 | 	fle	local02, #32 wc
27ca0     14 13 02 F6 | 	mov	arg01, local02
27ca4     02 12 06 F1 | 	add	arg01, #2
27ca8     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
27cac     FD 30 02 F6 | 	mov	local06, result1
27cb0     14 33 02 F6 | 	mov	local07, local02
27cb4     18 33 02 F1 | 	add	local07, local06
27cb8     19 01 48 FC | 	wrbyte	#0, local07
27cbc     97 1A 48 FB | 	callpa	#(@LR__3464-@LR__3463)>>2,fcache_load_ptr_
27cc0                 | LR__3463
27cc0     01 28 16 F2 | 	cmp	local02, #1 wc
27cc4     2C 00 90 CD |  if_b	jmp	#LR__3465
27cc8     15 27 12 FD | 	qdiv	local01, local03
27ccc     01 28 86 F1 | 	sub	local02, #1
27cd0     14 33 02 F6 | 	mov	local07, local02
27cd4     18 33 02 F1 | 	add	local07, local06
27cd8     19 34 62 FD | 	getqy	local08
27cdc     0A 34 16 F2 | 	cmp	local08, #10 wc
27ce0     30 34 06 C1 |  if_b	add	local08, #48
27ce4     37 34 06 31 |  if_ae	add	local08, #55
27ce8     19 35 42 FC | 	wrbyte	local08, local07
27cec     18 26 62 FD | 	getqx	local01
27cf0     CC FF 9F FD | 	jmp	#LR__3463
27cf4                 | LR__3464
27cf4                 | LR__3465
27cf4     18 FB 01 F6 | 	mov	result1, local06
27cf8     A7 F0 03 F6 | 	mov	ptra, fp
27cfc     B2 00 A0 FD | 	call	#popregs_
27d00                 | __system__Number_S_ret
27d00     2D 00 64 FD | 	ret
27d04                 | 
27d04                 | __system__LCase_S
27d04     07 4A 05 F6 | 	mov	COUNT_, #7
27d08     A8 00 A0 FD | 	call	#pushregs_
27d0c     09 27 02 F6 | 	mov	local01, arg01
27d10     09 29 02 F6 | 	mov	local02, arg01
27d14     97 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
27d18                 | LR__3470
27d18     14 FB C9 FA | 	rdbyte	result1, local02 wz
27d1c     01 28 06 51 |  if_ne	add	local02, #1
27d20     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
27d24                 | LR__3471
27d24     09 29 82 F1 | 	sub	local02, arg01
27d28     14 FB 01 F6 | 	mov	result1, local02
27d2c     FD 28 0A F6 | 	mov	local02, result1 wz
27d30     AA 01 00 AF 
27d34     92 FA 05 A6 |  if_e	mov	result1, ##@LR__5367
27d38     7C 00 90 AD |  if_e	jmp	#LR__3477
27d3c     14 13 02 F6 | 	mov	arg01, local02
27d40     02 12 06 F1 | 	add	arg01, #2
27d44     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
27d48     FD 2A 0A F6 | 	mov	local03, result1 wz
27d4c     64 00 90 AD |  if_e	jmp	#LR__3476
27d50     01 2C 66 F6 | 	neg	local04, #1
27d54     97 26 48 FB | 	callpa	#(@LR__3475-@LR__3472)>>2,fcache_load_ptr_
27d58                 | LR__3472
27d58     01 2C 06 F1 | 	add	local04, #1
27d5c     16 2F 02 F6 | 	mov	local05, local04
27d60     13 2F 02 F1 | 	add	local05, local01
27d64     17 31 C2 FA | 	rdbyte	local06, local05
27d68     41 30 56 F2 | 	cmps	local06, #65 wc
27d6c     18 00 90 CD |  if_b	jmp	#LR__3473
27d70     5B 30 56 F2 | 	cmps	local06, #91 wc
27d74     16 33 02 C6 |  if_b	mov	local07, local04
27d78     15 33 02 C1 |  if_b	add	local07, local03
27d7c     20 30 06 C1 |  if_b	add	local06, #32
27d80     19 31 42 CC |  if_b	wrbyte	local06, local07
27d84     0C 00 90 CD |  if_b	jmp	#LR__3474
27d88                 | LR__3473
27d88     16 33 02 F6 | 	mov	local07, local04
27d8c     15 33 02 F1 | 	add	local07, local03
27d90     19 31 42 FC | 	wrbyte	local06, local07
27d94                 | LR__3474
27d94     14 31 02 F6 | 	mov	local06, local02
27d98     01 30 86 F1 | 	sub	local06, #1
27d9c     18 2D 0A F2 | 	cmp	local04, local06 wz
27da0     B4 FF 9F 5D |  if_ne	jmp	#LR__3472
27da4                 | LR__3475
27da4     15 29 02 F1 | 	add	local02, local03
27da8     14 01 48 FC | 	wrbyte	#0, local02
27dac     15 FB 01 F6 | 	mov	result1, local03
27db0     04 00 90 FD | 	jmp	#LR__3477
27db4                 | LR__3476
27db4     15 FB 01 F6 | 	mov	result1, local03
27db8                 | LR__3477
27db8     A7 F0 03 F6 | 	mov	ptra, fp
27dbc     B2 00 A0 FD | 	call	#popregs_
27dc0                 | __system__LCase_S_ret
27dc0     2D 00 64 FD | 	ret
27dc4                 | 
27dc4                 | __system__LTrim_S
27dc4     05 4A 05 F6 | 	mov	COUNT_, #5
27dc8     A8 00 A0 FD | 	call	#pushregs_
27dcc     09 27 02 F6 | 	mov	local01, arg01
27dd0     09 29 02 F6 | 	mov	local02, arg01
27dd4     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
27dd8                 | LR__3480
27dd8     14 FB C9 FA | 	rdbyte	result1, local02 wz
27ddc     01 28 06 51 |  if_ne	add	local02, #1
27de0     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
27de4                 | LR__3481
27de4     09 29 82 F1 | 	sub	local02, arg01
27de8     14 FB 01 F6 | 	mov	result1, local02
27dec     FD 28 0A F6 | 	mov	local02, result1 wz
27df0     AA 01 00 AF 
27df4     93 FA 05 A6 |  if_e	mov	result1, ##@LR__5368
27df8     7C 00 90 AD |  if_e	jmp	#LR__3486
27dfc     00 2A 06 F6 | 	mov	local03, #0
27e00     14 2D 02 F6 | 	mov	local04, local02
27e04                 | LR__3482
27e04     16 2B 52 F2 | 	cmps	local03, local04 wc
27e08     68 00 90 3D |  if_ae	jmp	#LR__3485
27e0c     15 17 02 F6 | 	mov	arg03, local03
27e10     13 17 02 F1 | 	add	arg03, local01
27e14     0B 17 C2 FA | 	rdbyte	arg03, arg03
27e18     20 16 0E F2 | 	cmp	arg03, #32 wz
27e1c     4C 00 90 AD |  if_e	jmp	#LR__3484
27e20     14 13 02 F6 | 	mov	arg01, local02
27e24     15 13 82 F1 | 	sub	arg01, local03
27e28     02 12 06 F1 | 	add	arg01, #2
27e2c     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
27e30     FD 2E 0A F6 | 	mov	local05, result1 wz
27e34     2C 00 90 AD |  if_e	jmp	#LR__3483
27e38     15 15 02 F6 | 	mov	arg02, local03
27e3c     13 15 02 F1 | 	add	arg02, local01
27e40     14 17 02 F6 | 	mov	arg03, local02
27e44     15 17 82 F1 | 	sub	arg03, local03
27e48     17 13 02 F6 | 	mov	arg01, local05
27e4c     48 DA BF FD | 	call	#__system____builtin_memmove
27e50     15 29 82 F1 | 	sub	local02, local03
27e54     17 29 02 F1 | 	add	local02, local05
27e58     14 01 48 FC | 	wrbyte	#0, local02
27e5c     17 FB 01 F6 | 	mov	result1, local05
27e60     14 00 90 FD | 	jmp	#LR__3486
27e64                 | LR__3483
27e64     17 FB 01 F6 | 	mov	result1, local05
27e68     0C 00 90 FD | 	jmp	#LR__3486
27e6c                 | LR__3484
27e6c     01 2A 06 F1 | 	add	local03, #1
27e70     90 FF 9F FD | 	jmp	#LR__3482
27e74                 | LR__3485
27e74     13 FB 01 F6 | 	mov	result1, local01
27e78                 | LR__3486
27e78     A7 F0 03 F6 | 	mov	ptra, fp
27e7c     B2 00 A0 FD | 	call	#popregs_
27e80                 | __system__LTrim_S_ret
27e80     2D 00 64 FD | 	ret
27e84                 | 
27e84                 | __system__RTrim_S
27e84     04 4A 05 F6 | 	mov	COUNT_, #4
27e88     A8 00 A0 FD | 	call	#pushregs_
27e8c     09 27 02 F6 | 	mov	local01, arg01
27e90     09 29 02 F6 | 	mov	local02, arg01
27e94     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
27e98                 | LR__3490
27e98     14 FB C9 FA | 	rdbyte	result1, local02 wz
27e9c     01 28 06 51 |  if_ne	add	local02, #1
27ea0     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
27ea4                 | LR__3491
27ea4     09 29 82 F1 | 	sub	local02, arg01
27ea8     14 FB 01 F6 | 	mov	result1, local02
27eac     FD 28 0A F6 | 	mov	local02, result1 wz
27eb0     AA 01 00 AF 
27eb4     94 FA 05 A6 |  if_e	mov	result1, ##@LR__5369
27eb8     74 00 90 AD |  if_e	jmp	#LR__3495
27ebc     14 2B 02 F6 | 	mov	local03, local02
27ec0     01 2A 86 F1 | 	sub	local03, #1
27ec4                 | LR__3492
27ec4     15 15 02 F6 | 	mov	arg02, local03
27ec8     13 15 02 F1 | 	add	arg02, local01
27ecc     0A 29 C2 FA | 	rdbyte	local02, arg02
27ed0     20 28 0E F2 | 	cmp	local02, #32 wz
27ed4     44 00 90 AD |  if_e	jmp	#LR__3494
27ed8     15 13 02 F6 | 	mov	arg01, local03
27edc     02 12 06 F1 | 	add	arg01, #2
27ee0     34 1C B0 FD | 	call	#__system___gc_alloc_managed
27ee4     FD 2C 0A F6 | 	mov	local04, result1 wz
27ee8     28 00 90 AD |  if_e	jmp	#LR__3493
27eec     15 17 02 F6 | 	mov	arg03, local03
27ef0     01 16 06 F1 | 	add	arg03, #1
27ef4     16 13 02 F6 | 	mov	arg01, local04
27ef8     13 15 02 F6 | 	mov	arg02, local01
27efc     98 D9 BF FD | 	call	#__system____builtin_memmove
27f00     01 2A 06 F1 | 	add	local03, #1
27f04     16 2B 02 F1 | 	add	local03, local04
27f08     15 01 48 FC | 	wrbyte	#0, local03
27f0c     16 FB 01 F6 | 	mov	result1, local04
27f10     1C 00 90 FD | 	jmp	#LR__3495
27f14                 | LR__3493
27f14     16 FB 01 F6 | 	mov	result1, local04
27f18     14 00 90 FD | 	jmp	#LR__3495
27f1c                 | LR__3494
27f1c     01 2A 86 F1 | 	sub	local03, #1
27f20     00 2A 56 F2 | 	cmps	local03, #0 wc
27f24     9C FF 9F 3D |  if_ae	jmp	#LR__3492
27f28     AA 01 00 FF 
27f2c     95 FA 05 F6 | 	mov	result1, ##@LR__5370
27f30                 | LR__3495
27f30     A7 F0 03 F6 | 	mov	ptra, fp
27f34     B2 00 A0 FD | 	call	#popregs_
27f38                 | __system__RTrim_S_ret
27f38     2D 00 64 FD | 	ret
27f3c                 | 
27f3c                 | __system__Instr
27f3c     07 4A 05 F6 | 	mov	COUNT_, #7
27f40     A8 00 A0 FD | 	call	#pushregs_
27f44     09 27 02 F6 | 	mov	local01, arg01
27f48     0A 29 02 F6 | 	mov	local02, arg02
27f4c     0B 2B 02 F6 | 	mov	local03, arg03
27f50     15 13 02 F6 | 	mov	arg01, local03
27f54     09 2D 02 F6 | 	mov	local04, arg01
27f58     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
27f5c                 | LR__3500
27f5c     16 FB C9 FA | 	rdbyte	result1, local04 wz
27f60     01 2C 06 51 |  if_ne	add	local04, #1
27f64     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
27f68                 | LR__3501
27f68     09 2D 82 F1 | 	sub	local04, arg01
27f6c     16 2F 02 F6 | 	mov	local05, local04
27f70     14 13 02 F6 | 	mov	arg01, local02
27f74     09 2D 02 F6 | 	mov	local04, arg01
27f78     97 06 48 FB | 	callpa	#(@LR__3503-@LR__3502)>>2,fcache_load_ptr_
27f7c                 | LR__3502
27f7c     16 FB C9 FA | 	rdbyte	result1, local04 wz
27f80     01 2C 06 51 |  if_ne	add	local04, #1
27f84     F4 FF 9F 5D |  if_ne	jmp	#LR__3502
27f88                 | LR__3503
27f88     09 2D 82 F1 | 	sub	local04, arg01
27f8c     16 FB 01 F6 | 	mov	result1, local04
27f90     FD 18 0A F6 | 	mov	arg04, result1 wz
27f94     00 FA 05 A6 |  if_e	mov	result1, #0
27f98     98 00 90 AD |  if_e	jmp	#LR__3507
27f9c     00 2E 0E F2 | 	cmp	local05, #0 wz
27fa0     00 FA 05 A6 |  if_e	mov	result1, #0
27fa4     8C 00 90 AD |  if_e	jmp	#LR__3507
27fa8     0C 27 5A F2 | 	cmps	local01, arg04 wcz
27fac     00 FA 05 16 |  if_a	mov	result1, #0
27fb0     80 00 90 1D |  if_a	jmp	#LR__3507
27fb4     01 26 56 F2 | 	cmps	local01, #1 wc
27fb8     01 26 06 C6 |  if_b	mov	local01, #1
27fbc     15 31 C2 FA | 	rdbyte	local06, local03
27fc0     01 2E 0E F2 | 	cmp	local05, #1 wz
27fc4     18 00 90 5D |  if_ne	jmp	#LR__3504
27fc8     14 13 02 F6 | 	mov	arg01, local02
27fcc     18 15 02 F6 | 	mov	arg02, local06
27fd0     13 17 02 F6 | 	mov	arg03, local01
27fd4     00 18 06 F6 | 	mov	arg04, #0
27fd8     14 37 B0 FD | 	call	#__system____ScanForChar
27fdc     54 00 90 FD | 	jmp	#LR__3507
27fe0                 | LR__3504
27fe0     13 33 02 F6 | 	mov	local07, local01
27fe4                 | LR__3505
27fe4     14 13 02 F6 | 	mov	arg01, local02
27fe8     18 15 02 F6 | 	mov	arg02, local06
27fec     19 17 02 F6 | 	mov	arg03, local07
27ff0     00 18 06 F6 | 	mov	arg04, #0
27ff4     F8 36 B0 FD | 	call	#__system____ScanForChar
27ff8     FD 32 0A F6 | 	mov	local07, result1 wz
27ffc     30 00 90 AD |  if_e	jmp	#LR__3506
28000     17 17 02 F6 | 	mov	arg03, local05
28004     14 13 02 F6 | 	mov	arg01, local02
28008     19 15 02 F6 | 	mov	arg02, local07
2800c     FC FA BF FD | 	call	#__system__Mid_S
28010     FD 12 02 F6 | 	mov	arg01, result1
28014     15 15 02 F6 | 	mov	arg02, local03
28018     84 D9 BF FD | 	call	#__system___string_cmp
2801c     00 FA 0D F2 | 	cmp	result1, #0 wz
28020     19 FB 01 A6 |  if_e	mov	result1, local07
28024     0C 00 90 AD |  if_e	jmp	#LR__3507
28028     17 33 02 F1 | 	add	local07, local05
2802c     B4 FF 9F FD | 	jmp	#LR__3505
28030                 | LR__3506
28030     00 FA 05 F6 | 	mov	result1, #0
28034                 | LR__3507
28034     A7 F0 03 F6 | 	mov	ptra, fp
28038     B2 00 A0 FD | 	call	#popregs_
2803c                 | __system__Instr_ret
2803c     2D 00 64 FD | 	ret
28040                 | 
28040                 | __system__InstrRev
28040     07 4A 05 F6 | 	mov	COUNT_, #7
28044     A8 00 A0 FD | 	call	#pushregs_
28048     09 27 02 F6 | 	mov	local01, arg01
2804c     0A 29 02 F6 | 	mov	local02, arg02
28050     0B 2B 02 F6 | 	mov	local03, arg03
28054     15 13 02 F6 | 	mov	arg01, local03
28058     09 2D 02 F6 | 	mov	local04, arg01
2805c     97 06 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
28060                 | LR__3510
28060     16 FB C9 FA | 	rdbyte	result1, local04 wz
28064     01 2C 06 51 |  if_ne	add	local04, #1
28068     F4 FF 9F 5D |  if_ne	jmp	#LR__3510
2806c                 | LR__3511
2806c     09 2D 82 F1 | 	sub	local04, arg01
28070     16 2F 02 F6 | 	mov	local05, local04
28074     14 13 02 F6 | 	mov	arg01, local02
28078     09 2D 02 F6 | 	mov	local04, arg01
2807c     97 06 48 FB | 	callpa	#(@LR__3513-@LR__3512)>>2,fcache_load_ptr_
28080                 | LR__3512
28080     16 FB C9 FA | 	rdbyte	result1, local04 wz
28084     01 2C 06 51 |  if_ne	add	local04, #1
28088     F4 FF 9F 5D |  if_ne	jmp	#LR__3512
2808c                 | LR__3513
2808c     09 2D 82 F1 | 	sub	local04, arg01
28090     16 FB 01 F6 | 	mov	result1, local04
28094     FD 18 0A F6 | 	mov	arg04, result1 wz
28098     00 FA 05 A6 |  if_e	mov	result1, #0
2809c     98 00 90 AD |  if_e	jmp	#LR__3517
280a0     00 2E 0E F2 | 	cmp	local05, #0 wz
280a4     00 FA 05 A6 |  if_e	mov	result1, #0
280a8     8C 00 90 AD |  if_e	jmp	#LR__3517
280ac     0C 27 5A F2 | 	cmps	local01, arg04 wcz
280b0     0C 27 02 16 |  if_a	mov	local01, arg04
280b4     01 26 56 F2 | 	cmps	local01, #1 wc
280b8     01 26 06 C6 |  if_b	mov	local01, #1
280bc     15 31 C2 FA | 	rdbyte	local06, local03
280c0     01 2E 0E F2 | 	cmp	local05, #1 wz
280c4     18 00 90 5D |  if_ne	jmp	#LR__3514
280c8     14 13 02 F6 | 	mov	arg01, local02
280cc     18 15 02 F6 | 	mov	arg02, local06
280d0     13 17 02 F6 | 	mov	arg03, local01
280d4     01 18 06 F6 | 	mov	arg04, #1
280d8     14 36 B0 FD | 	call	#__system____ScanForChar
280dc     58 00 90 FD | 	jmp	#LR__3517
280e0                 | LR__3514
280e0     17 33 02 F6 | 	mov	local07, local05
280e4     01 32 86 F1 | 	sub	local07, #1
280e8                 | LR__3515
280e8     14 13 02 F6 | 	mov	arg01, local02
280ec     18 15 02 F6 | 	mov	arg02, local06
280f0     19 17 02 F6 | 	mov	arg03, local07
280f4     01 18 06 F6 | 	mov	arg04, #1
280f8     F4 35 B0 FD | 	call	#__system____ScanForChar
280fc     FD 32 0A F6 | 	mov	local07, result1 wz
28100     30 00 90 AD |  if_e	jmp	#LR__3516
28104     17 17 02 F6 | 	mov	arg03, local05
28108     14 13 02 F6 | 	mov	arg01, local02
2810c     19 15 02 F6 | 	mov	arg02, local07
28110     F8 F9 BF FD | 	call	#__system__Mid_S
28114     FD 12 02 F6 | 	mov	arg01, result1
28118     15 15 02 F6 | 	mov	arg02, local03
2811c     80 D8 BF FD | 	call	#__system___string_cmp
28120     00 FA 0D F2 | 	cmp	result1, #0 wz
28124     19 FB 01 A6 |  if_e	mov	result1, local07
28128     0C 00 90 AD |  if_e	jmp	#LR__3517
2812c     17 33 82 F1 | 	sub	local07, local05
28130     B4 FF 9F FD | 	jmp	#LR__3515
28134                 | LR__3516
28134     00 FA 05 F6 | 	mov	result1, #0
28138                 | LR__3517
28138     A7 F0 03 F6 | 	mov	ptra, fp
2813c     B2 00 A0 FD | 	call	#popregs_
28140                 | __system__InstrRev_ret
28140     2D 00 64 FD | 	ret
28144                 | 
28144                 | __system___remove
28144     06 4A 05 F6 | 	mov	COUNT_, #6
28148     A8 00 A0 FD | 	call	#pushregs_
2814c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
28150     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
28154     09 15 02 F6 | 	mov	arg02, arg01
28158     13 13 02 F6 | 	mov	arg01, local01
2815c     00 16 06 F6 | 	mov	arg03, #0
28160     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
28164     A8 DF BF FD | 	call	#__system____getvfsforfile
28168     FD 28 0A F6 | 	mov	local02, result1 wz
2816c     10 00 90 AD |  if_e	jmp	#LR__3520
28170     20 28 06 F1 | 	add	local02, #32
28174     14 13 0A FB | 	rdlong	arg01, local02 wz
28178     20 28 86 F1 | 	sub	local02, #32
2817c     14 00 90 5D |  if_ne	jmp	#LR__3521
28180                 | LR__3520
28180     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28184     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
28188     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2818c     01 FA 65 F6 | 	neg	result1, #1
28190     A8 00 90 FD | 	jmp	#LR__3524
28194                 | LR__3521
28194     40 28 06 F1 | 	add	local02, #64
28198     14 2B 02 FB | 	rdlong	local03, local02
2819c     15 2D 02 F6 | 	mov	local04, local03
281a0     40 28 86 F1 | 	sub	local02, #64
281a4     13 2C 46 F7 | 	zerox	local04, #19
281a8     14 2A 46 F0 | 	shr	local03, #20
281ac     02 2A 66 F0 | 	shl	local03, #2
281b0     ED 2A 02 F1 | 	add	local03, __methods__
281b4     15 2B 02 FB | 	rdlong	local03, local03
281b8     13 13 02 F6 | 	mov	arg01, local01
281bc     F2 2E 02 F6 | 	mov	local05, objptr
281c0     16 E5 01 F6 | 	mov	objptr, local04
281c4     2D 2A 62 FD | 	call	local03
281c8     17 E5 01 F6 | 	mov	objptr, local05
281cc     FD 30 02 F6 | 	mov	local06, result1
281d0     FF FF 7F FF 
281d4     F2 31 0E F2 | 	cmp	local06, ##-14 wz
281d8     38 00 90 5D |  if_ne	jmp	#LR__3522
281dc     3C 28 06 F1 | 	add	local02, #60
281e0     14 31 02 FB | 	rdlong	local06, local02
281e4     18 2B 02 F6 | 	mov	local03, local06
281e8     13 30 46 F7 | 	zerox	local06, #19
281ec     14 2A 46 F0 | 	shr	local03, #20
281f0     02 2A 66 F0 | 	shl	local03, #2
281f4     ED 2A 02 F1 | 	add	local03, __methods__
281f8     15 2B 02 FB | 	rdlong	local03, local03
281fc     13 13 02 F6 | 	mov	arg01, local01
28200     F2 2E 02 F6 | 	mov	local05, objptr
28204     18 E5 01 F6 | 	mov	objptr, local06
28208     2D 2A 62 FD | 	call	local03
2820c     17 E5 01 F6 | 	mov	objptr, local05
28210     FD 30 02 F6 | 	mov	local06, result1
28214                 | LR__3522
28214     00 30 0E F2 | 	cmp	local06, #0 wz
28218     1C 00 90 AD |  if_e	jmp	#LR__3523
2821c     18 13 6A F6 | 	neg	arg01, local06 wz
28220     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28224     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28228     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2822c     01 FA 65 56 |  if_ne	neg	result1, #1
28230     00 FA 05 A6 |  if_e	mov	result1, #0
28234     04 00 90 FD | 	jmp	#LR__3524
28238                 | LR__3523
28238     00 FA 05 F6 | 	mov	result1, #0
2823c                 | LR__3524
2823c     A7 F0 03 F6 | 	mov	ptra, fp
28240     B2 00 A0 FD | 	call	#popregs_
28244                 | __system___remove_ret
28244     2D 00 64 FD | 	ret
28248                 | 
28248                 | __system___mkdir
28248     05 4A 05 F6 | 	mov	COUNT_, #5
2824c     A8 00 A0 FD | 	call	#pushregs_
28250     84 E7 05 F1 | 	add	ptr___system__dat__, #388
28254     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
28258     09 15 02 F6 | 	mov	arg02, arg01
2825c     13 13 02 F6 | 	mov	arg01, local01
28260     00 16 06 F6 | 	mov	arg03, #0
28264     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
28268     A4 DE BF FD | 	call	#__system____getvfsforfile
2826c     FD 28 0A F6 | 	mov	local02, result1 wz
28270     10 00 90 AD |  if_e	jmp	#LR__3530
28274     20 28 06 F1 | 	add	local02, #32
28278     14 15 0A FB | 	rdlong	arg02, local02 wz
2827c     20 28 86 F1 | 	sub	local02, #32
28280     14 00 90 5D |  if_ne	jmp	#LR__3531
28284                 | LR__3530
28284     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28288     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2828c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28290     01 FA 65 F6 | 	neg	result1, #1
28294     60 00 90 FD | 	jmp	#LR__3533
28298                 | LR__3531
28298     38 28 06 F1 | 	add	local02, #56
2829c     14 2B 02 FB | 	rdlong	local03, local02
282a0     15 2D 02 F6 | 	mov	local04, local03
282a4     13 2A 46 F7 | 	zerox	local03, #19
282a8     14 2C 46 F0 | 	shr	local04, #20
282ac     02 2C 66 F0 | 	shl	local04, #2
282b0     ED 2C 02 F1 | 	add	local04, __methods__
282b4     16 2D 02 FB | 	rdlong	local04, local04
282b8     13 13 02 F6 | 	mov	arg01, local01
282bc     FF 15 06 F6 | 	mov	arg02, #511
282c0     F2 2E 02 F6 | 	mov	local05, objptr
282c4     15 E5 01 F6 | 	mov	objptr, local03
282c8     2D 2C 62 FD | 	call	local04
282cc     17 E5 01 F6 | 	mov	objptr, local05
282d0     FD 12 0A F6 | 	mov	arg01, result1 wz
282d4     1C 00 90 AD |  if_e	jmp	#LR__3532
282d8     09 13 6A F6 | 	neg	arg01, arg01 wz
282dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
282e0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
282e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
282e8     01 FA 65 56 |  if_ne	neg	result1, #1
282ec     00 FA 05 A6 |  if_e	mov	result1, #0
282f0     04 00 90 FD | 	jmp	#LR__3533
282f4                 | LR__3532
282f4     00 FA 05 F6 | 	mov	result1, #0
282f8                 | LR__3533
282f8     A7 F0 03 F6 | 	mov	ptra, fp
282fc     B2 00 A0 FD | 	call	#popregs_
28300                 | __system___mkdir_ret
28300     2D 00 64 FD | 	ret
28304                 | 
28304                 | __system___strerror
28304     00 12 56 F2 | 	cmps	arg01, #0 wc
28308     08 00 90 CD |  if_b	jmp	#LR__3540
2830c     1A 12 56 F2 | 	cmps	arg01, #26 wc
28310     04 00 90 CD |  if_b	jmp	#LR__3541
28314                 | LR__3540
28314     19 12 06 F6 | 	mov	arg01, #25
28318                 | LR__3541
28318     02 12 66 F0 | 	shl	arg01, #2
2831c     01 00 00 FF 
28320     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
28324     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
28328     09 FB 01 FB | 	rdlong	result1, arg01
2832c     01 00 00 FF 
28330     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
28334                 | __system___strerror_ret
28334     2D 00 64 FD | 	ret
28338                 | 
28338                 | __system___int64_shl
28338     20 16 CE F7 | 	test	arg03, #32 wz
2833c     09 15 02 56 |  if_ne	mov	arg02, arg01
28340     00 12 06 56 |  if_ne	mov	arg01, #0
28344     1F 16 CE F7 | 	test	arg03, #31 wz
28348     18 00 90 AD |  if_e	jmp	#LR__3550
2834c     0B 15 62 F0 | 	shl	arg02, arg03
28350     09 FB 01 F6 | 	mov	result1, arg01
28354     0B FD 61 F6 | 	neg	result2, arg03
28358     FE FA 41 F0 | 	shr	result1, result2
2835c     FD 14 42 F5 | 	or	arg02, result1
28360     0B 13 62 F0 | 	shl	arg01, arg03
28364                 | LR__3550
28364     0A FD 01 F6 | 	mov	result2, arg02
28368     09 FB 01 F6 | 	mov	result1, arg01
2836c                 | __system___int64_shl_ret
2836c     2D 00 64 FD | 	ret
28370                 | 
28370                 | __system___usepins
28370     14 E6 05 F1 | 	add	ptr___system__dat__, #20
28374     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
28378     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
2837c     00 13 CA F7 | 	test	arg01, _var01 wz
28380     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
28384     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
28388     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
2838c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
28390     00 FA 05 56 |  if_ne	mov	result1, #0
28394     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
28398     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2839c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
283a0     09 03 42 F5 | 	or	_var02, arg01
283a4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
283a8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
283ac     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
283b0     0A 03 42 F5 | 	or	_var02, arg02
283b4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
283b8     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
283bc     01 FA 65 F6 | 	neg	result1, #1
283c0                 | __system___usepins_ret
283c0     2D 00 64 FD | 	ret
283c4                 | 
283c4                 | __system___freepins
283c4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
283c8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
283cc     09 01 22 F5 | 	andn	_var01, arg01
283d0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
283d4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
283d8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
283dc     0A 01 22 F5 | 	andn	_var01, arg02
283e0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
283e4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
283e8                 | __system___freepins_ret
283e8     2D 00 64 FD | 	ret
283ec                 | 
283ec                 | __system___float_fromuns
283ec     09 17 0A F6 | 	mov	arg03, arg01 wz
283f0     0B FB 01 A6 |  if_e	mov	result1, arg03
283f4     24 00 90 AD |  if_e	jmp	#LR__3560
283f8     0B 15 92 F7 | 	encod	arg02, arg03 wc
283fc     01 14 06 C1 |  if_b	add	arg02, #1
28400     01 14 86 F1 | 	sub	arg02, #1
28404     1F 12 06 F6 | 	mov	arg01, #31
28408     0A 13 82 F1 | 	sub	arg01, arg02
2840c     09 17 62 F0 | 	shl	arg03, arg01
28410     02 16 46 F0 | 	shr	arg03, #2
28414     00 12 06 F6 | 	mov	arg01, #0
28418     4C 09 B0 FD | 	call	#__system___float_Pack
2841c                 | LR__3560
2841c                 | __system___float_fromuns_ret
2841c     2D 00 64 FD | 	ret
28420                 | 
28420                 | __system___float_add
28420     0F 4A 05 F6 | 	mov	COUNT_, #15
28424     A8 00 A0 FD | 	call	#pushregs_
28428     09 27 02 F6 | 	mov	local01, arg01
2842c     0A 29 02 F6 | 	mov	local02, arg02
28430     00 2A 06 F6 | 	mov	local03, #0
28434     13 2D 02 F6 | 	mov	local04, local01
28438     16 2F 02 F6 | 	mov	local05, local04
2843c     16 2E 46 F7 | 	zerox	local05, #22
28440     16 31 02 F6 | 	mov	local06, local04
28444     01 30 66 F0 | 	shl	local06, #1
28448     18 30 46 F0 | 	shr	local06, #24
2844c     1F 2C 46 F0 | 	shr	local04, #31
28450     14 13 02 F6 | 	mov	arg01, local02
28454     09 FB 01 F6 | 	mov	result1, arg01
28458     FD 32 02 F6 | 	mov	local07, result1
2845c     19 35 02 F6 | 	mov	local08, local07
28460     16 34 46 F7 | 	zerox	local08, #22
28464     19 37 02 F6 | 	mov	local09, local07
28468     01 36 66 F0 | 	shl	local09, #1
2846c     18 36 46 F0 | 	shr	local09, #24
28470     1B 39 02 F6 | 	mov	local10, local09
28474     1F 32 46 F0 | 	shr	local07, #31
28478     00 3A 06 F6 | 	mov	local11, #0
2847c     00 3C 06 F6 | 	mov	local12, #0
28480     1C 31 12 F2 | 	cmp	local06, local10 wc
28484     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
28488     2C 00 90 1D |  if_a	jmp	#LR__3570
2848c     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
28490     24 00 90 3D |  if_ae	jmp	#LR__3570
28494     17 3F 02 F6 | 	mov	local13, local05
28498     1A 2F 02 F6 | 	mov	local05, local08
2849c     1F 35 02 F6 | 	mov	local08, local13
284a0     18 3F 02 F6 | 	mov	local13, local06
284a4     1C 31 02 F6 | 	mov	local06, local10
284a8     1F 39 02 F6 | 	mov	local10, local13
284ac     16 3F 02 F6 | 	mov	local13, local04
284b0     19 2D 02 F6 | 	mov	local04, local07
284b4     1F 33 02 F6 | 	mov	local07, local13
284b8                 | LR__3570
284b8     FF 30 0E F2 | 	cmp	local06, #255 wz
284bc     70 01 90 AD |  if_e	jmp	#LR__3585
284c0     00 30 0E F2 | 	cmp	local06, #0 wz
284c4     AC 01 90 AD |  if_e	jmp	#LR__3587
284c8     17 2E 26 F4 | 	bith	local05, #23
284cc                 | LR__3571
284cc     00 38 0E F2 | 	cmp	local10, #0 wz
284d0     F0 01 90 AD |  if_e	jmp	#LR__3591
284d4     17 34 26 F4 | 	bith	local08, #23
284d8                 | LR__3572
284d8     7F 30 86 F1 | 	sub	local06, #127
284dc     7F 38 86 F1 | 	sub	local10, #127
284e0     18 41 02 F6 | 	mov	local14, local06
284e4     1C 41 82 F1 | 	sub	local14, local10
284e8     97 14 48 FB | 	callpa	#(@LR__3574-@LR__3573)>>2,fcache_load_ptr_
284ec                 | LR__3573
284ec     20 40 56 F2 | 	cmps	local14, #32 wc
284f0     20 00 90 CD |  if_b	jmp	#LR__3575
284f4     1A 37 02 F6 | 	mov	local09, local08
284f8     00 3A 0E F2 | 	cmp	local11, #0 wz
284fc     6F 3A 62 FD | 	wrnz	local11
28500     1D 37 42 F5 | 	or	local09, local11
28504     1B 3B 02 F6 | 	mov	local11, local09
28508     00 34 06 F6 | 	mov	local08, #0
2850c     20 40 86 F1 | 	sub	local14, #32
28510     D8 FF 9F FD | 	jmp	#LR__3573
28514                 | LR__3574
28514                 | LR__3575
28514     00 40 0E F2 | 	cmp	local14, #0 wz
28518     38 00 90 AD |  if_e	jmp	#LR__3576
2851c     1A 3F 02 F6 | 	mov	local13, local08
28520     20 38 06 F6 | 	mov	local10, #32
28524     20 39 82 F1 | 	sub	local10, local14
28528     1C 3F 62 F0 | 	shl	local13, local10
2852c     1D 39 02 F6 | 	mov	local10, local11
28530     20 36 06 F6 | 	mov	local09, #32
28534     20 37 82 F1 | 	sub	local09, local14
28538     1B 39 6A F0 | 	shl	local10, local09 wz
2853c     20 3B 42 F0 | 	shr	local11, local14
28540     20 35 42 F0 | 	shr	local08, local14
28544     1F 3B 42 F5 | 	or	local11, local13
28548     00 42 06 F6 | 	mov	local15, #0
2854c     01 42 06 56 |  if_ne	mov	local15, #1
28550     21 3B 42 F5 | 	or	local11, local15
28554                 | LR__3576
28554     16 43 02 F6 | 	mov	local15, local04
28558     19 43 62 F5 | 	xor	local15, local07
2855c     01 42 CE F7 | 	test	local15, #1 wz
28560     18 00 90 AD |  if_e	jmp	#LR__3577
28564     1A 35 22 F6 | 	not	local08, local08
28568     1D 3B 22 F6 | 	not	local11, local11
2856c     01 3A 0E F1 | 	add	local11, #1 wz
28570     00 42 06 F6 | 	mov	local15, #0
28574     01 42 06 A6 |  if_e	mov	local15, #1
28578     21 35 02 F1 | 	add	local08, local15
2857c                 | LR__3577
2857c     1D 3D 12 F1 | 	add	local12, local11 wc
28580     1A 2F 22 F1 | 	addx	local05, local08
28584     00 2E 56 F2 | 	cmps	local05, #0 wc
28588     1C 00 90 3D |  if_ae	jmp	#LR__3578
2858c     01 2C 66 F5 | 	xor	local04, #1
28590     17 2F 22 F6 | 	not	local05, local05
28594     1E 3D 22 F6 | 	not	local12, local12
28598     01 3C 0E F1 | 	add	local12, #1 wz
2859c     00 42 06 F6 | 	mov	local15, #0
285a0     01 42 06 A6 |  if_e	mov	local15, #1
285a4     21 2F 02 F1 | 	add	local05, local15
285a8                 | LR__3578
285a8     00 80 00 FF 
285ac     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
285b0     28 00 90 CD |  if_b	jmp	#LR__3579
285b4     01 30 06 F1 | 	add	local06, #1
285b8     1E 41 02 F6 | 	mov	local14, local12
285bc     01 40 06 F5 | 	and	local14, #1
285c0     01 3C 46 F0 | 	shr	local12, #1
285c4     17 43 02 F6 | 	mov	local15, local05
285c8     1F 42 66 F0 | 	shl	local15, #31
285cc     21 3D 42 F5 | 	or	local12, local15
285d0     20 3D 42 F5 | 	or	local12, local14
285d4     01 2E 46 F0 | 	shr	local05, #1
285d8     3C 00 90 FD | 	jmp	#LR__3584
285dc                 | LR__3579
285dc     00 40 00 FF 
285e0     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
285e4     30 00 90 3D |  if_ae	jmp	#LR__3583
285e8     00 2E 0E F2 | 	cmp	local05, #0 wz
285ec     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
285f0     08 2C 46 A5 |  if_e	or	local04, #8
285f4     01 2C 26 A5 |  if_e	andn	local04, #1
285f8     1C 00 90 AD |  if_e	jmp	#LR__3582
285fc                 | LR__3580
285fc     00 40 00 FF 
28600     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
28604     10 00 90 3D |  if_ae	jmp	#LR__3581
28608     1E 3D 12 F1 | 	add	local12, local12 wc
2860c     17 2F 22 F1 | 	addx	local05, local05
28610     01 30 86 F1 | 	sub	local06, #1
28614     E4 FF 9F FD | 	jmp	#LR__3580
28618                 | LR__3581
28618                 | LR__3582
28618                 | LR__3583
28618                 | LR__3584
28618     17 13 02 F6 | 	mov	arg01, local05
2861c     1E 15 02 F6 | 	mov	arg02, local12
28620     18 17 02 F6 | 	mov	arg03, local06
28624     16 19 02 F6 | 	mov	arg04, local04
28628     08 35 B0 FD | 	call	#__system__pack_0671
2862c     DC 00 90 FD | 	jmp	#LR__3595
28630                 | LR__3585
28630     FF 38 0E F2 | 	cmp	local10, #255 wz
28634     10 00 90 5D |  if_ne	jmp	#LR__3586
28638     16 33 0A F2 | 	cmp	local07, local04 wz
2863c     00 F8 3F 5F 
28640     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28644     C4 00 90 5D |  if_ne	jmp	#LR__3595
28648                 | LR__3586
28648     00 2E 0E F2 | 	cmp	local05, #0 wz
2864c     00 F8 3F 5F 
28650     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28654     B4 00 90 5D |  if_ne	jmp	#LR__3595
28658     1E 15 02 F6 | 	mov	arg02, local12
2865c     18 17 02 F6 | 	mov	arg03, local06
28660     16 19 02 F6 | 	mov	arg04, local04
28664     02 18 46 F5 | 	or	arg04, #2
28668     17 13 02 F6 | 	mov	arg01, local05
2866c     C4 34 B0 FD | 	call	#__system__pack_0671
28670     98 00 90 FD | 	jmp	#LR__3595
28674                 | LR__3587
28674     00 2E 0E F2 | 	cmp	local05, #0 wz
28678     28 00 90 AD |  if_e	jmp	#LR__3590
2867c     01 2E 66 F0 | 	shl	local05, #1
28680     97 0E 48 FB | 	callpa	#(@LR__3589-@LR__3588)>>2,fcache_load_ptr_
28684                 | LR__3588
28684     00 40 00 FF 
28688     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2868c     18 43 02 C6 |  if_b	mov	local15, local06
28690     01 42 86 C1 |  if_b	sub	local15, #1
28694     21 31 02 C6 |  if_b	mov	local06, local15
28698     01 2E 66 C0 |  if_b	shl	local05, #1
2869c     E4 FF 9F CD |  if_b	jmp	#LR__3588
286a0                 | LR__3589
286a0     28 FE 9F FD | 	jmp	#LR__3571
286a4                 | LR__3590
286a4     19 2D 02 F5 | 	and	local04, local07
286a8     16 19 02 F6 | 	mov	arg04, local04
286ac     08 18 46 F5 | 	or	arg04, #8
286b0     00 12 06 F6 | 	mov	arg01, #0
286b4     00 14 06 F6 | 	mov	arg02, #0
286b8     00 16 06 F6 | 	mov	arg03, #0
286bc     74 34 B0 FD | 	call	#__system__pack_0671
286c0     48 00 90 FD | 	jmp	#LR__3595
286c4                 | LR__3591
286c4     00 34 0E F2 | 	cmp	local08, #0 wz
286c8     28 00 90 AD |  if_e	jmp	#LR__3594
286cc     01 34 66 F0 | 	shl	local08, #1
286d0     97 0E 48 FB | 	callpa	#(@LR__3593-@LR__3592)>>2,fcache_load_ptr_
286d4                 | LR__3592
286d4     00 40 00 FF 
286d8     00 34 16 F2 | 	cmp	local08, ##8388608 wc
286dc     1C 43 02 C6 |  if_b	mov	local15, local10
286e0     01 42 86 C1 |  if_b	sub	local15, #1
286e4     21 39 02 C6 |  if_b	mov	local10, local15
286e8     01 34 66 C0 |  if_b	shl	local08, #1
286ec     E4 FF 9F CD |  if_b	jmp	#LR__3592
286f0                 | LR__3593
286f0     E4 FD 9F FD | 	jmp	#LR__3572
286f4                 | LR__3594
286f4     7F 30 86 F1 | 	sub	local06, #127
286f8     17 13 02 F6 | 	mov	arg01, local05
286fc     1E 15 02 F6 | 	mov	arg02, local12
28700     18 17 02 F6 | 	mov	arg03, local06
28704     16 19 02 F6 | 	mov	arg04, local04
28708     28 34 B0 FD | 	call	#__system__pack_0671
2870c                 | LR__3595
2870c     A7 F0 03 F6 | 	mov	ptra, fp
28710     B2 00 A0 FD | 	call	#popregs_
28714                 | __system___float_add_ret
28714     2D 00 64 FD | 	ret
28718                 | 
28718                 | __system___float_sqrt
28718     04 4A 05 F6 | 	mov	COUNT_, #4
2871c     A8 00 A0 FD | 	call	#pushregs_
28720     09 27 02 F6 | 	mov	local01, arg01
28724     09 FB 01 F6 | 	mov	result1, arg01
28728     FD 28 02 F6 | 	mov	local02, result1
2872c     14 2B 02 F6 | 	mov	local03, local02
28730     16 2A 46 F7 | 	zerox	local03, #22
28734     14 2D 02 F6 | 	mov	local04, local02
28738     01 2C 66 F0 | 	shl	local04, #1
2873c     18 2C 4E F0 | 	shr	local04, #24 wz
28740     1F 28 46 F0 | 	shr	local02, #31
28744     70 00 90 AD |  if_e	jmp	#LR__3601
28748     17 2A 26 F4 | 	bith	local03, #23
2874c                 | LR__3600
2874c     00 28 0E F2 | 	cmp	local02, #0 wz
28750     00 F8 3F 5F 
28754     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28758     88 00 90 5D |  if_ne	jmp	#LR__3604
2875c     FF 2C 0E F2 | 	cmp	local04, #255 wz
28760     13 FB 01 A6 |  if_e	mov	result1, local01
28764     7C 00 90 AD |  if_e	jmp	#LR__3604
28768     7F 2C 86 F1 | 	sub	local04, #127
2876c     01 2C CE F7 | 	test	local04, #1 wz
28770     01 2A 66 50 |  if_ne	shl	local03, #1
28774     05 2A 66 F0 | 	shl	local03, #5
28778     15 01 38 FD | 	qsqrt	#0, local03
2877c     01 2C 86 51 |  if_ne	sub	local04, #1
28780     16 2D 52 F6 | 	abs	local04, local04 wc
28784     01 2C 46 F0 | 	shr	local04, #1
28788     16 17 82 F6 | 	negc	arg03, local04
2878c     14 19 02 F6 | 	mov	arg04, local02
28790     18 12 62 FD | 	getqx	arg01
28794     09 15 02 F6 | 	mov	arg02, arg01
28798     19 14 66 F0 | 	shl	arg02, #25
2879c     07 12 46 F0 | 	shr	arg01, #7
287a0     00 80 00 FF 
287a4     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
287a8     01 16 06 31 |  if_ae	add	arg03, #1
287ac     01 12 46 30 |  if_ae	shr	arg01, #1
287b0     80 33 B0 FD | 	call	#__system__pack_0671
287b4     2C 00 90 FD | 	jmp	#LR__3604
287b8                 | LR__3601
287b8     00 2A 0E F2 | 	cmp	local03, #0 wz
287bc     13 FB 01 A6 |  if_e	mov	result1, local01
287c0     20 00 90 AD |  if_e	jmp	#LR__3604
287c4     01 2A 66 F0 | 	shl	local03, #1
287c8     97 0A 48 FB | 	callpa	#(@LR__3603-@LR__3602)>>2,fcache_load_ptr_
287cc                 | LR__3602
287cc     00 40 00 FF 
287d0     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
287d4     01 2C 86 C1 |  if_b	sub	local04, #1
287d8     01 2A 66 C0 |  if_b	shl	local03, #1
287dc     EC FF 9F CD |  if_b	jmp	#LR__3602
287e0                 | LR__3603
287e0     68 FF 9F FD | 	jmp	#LR__3600
287e4                 | LR__3604
287e4     A7 F0 03 F6 | 	mov	ptra, fp
287e8     B2 00 A0 FD | 	call	#popregs_
287ec                 | __system___float_sqrt_ret
287ec     2D 00 64 FD | 	ret
287f0                 | 
287f0                 | __system___float_mul
287f0     0B 4A 05 F6 | 	mov	COUNT_, #11
287f4     A8 00 A0 FD | 	call	#pushregs_
287f8     09 27 02 F6 | 	mov	local01, arg01
287fc     0A 29 02 F6 | 	mov	local02, arg02
28800     13 2B 02 F6 | 	mov	local03, local01
28804     15 2D 02 F6 | 	mov	local04, local03
28808     16 2C 46 F7 | 	zerox	local04, #22
2880c     15 2F 02 F6 | 	mov	local05, local03
28810     01 2E 66 F0 | 	shl	local05, #1
28814     18 2E 46 F0 | 	shr	local05, #24
28818     1F 2A 46 F0 | 	shr	local03, #31
2881c     14 FB 01 F6 | 	mov	result1, local02
28820     FD 30 02 F6 | 	mov	local06, result1
28824     18 33 02 F6 | 	mov	local07, local06
28828     16 32 46 F7 | 	zerox	local07, #22
2882c     18 35 02 F6 | 	mov	local08, local06
28830     01 34 66 F0 | 	shl	local08, #1
28834     18 34 46 F0 | 	shr	local08, #24
28838     1F 30 46 F0 | 	shr	local06, #31
2883c     18 2B 62 F5 | 	xor	local03, local06
28840     FF 2E 0E F2 | 	cmp	local05, #255 wz
28844     90 00 90 AD |  if_e	jmp	#LR__3613
28848     FF 34 0E F2 | 	cmp	local08, #255 wz
2884c     D8 00 90 AD |  if_e	jmp	#LR__3615
28850     00 2E 0E F2 | 	cmp	local05, #0 wz
28854     0C 01 90 AD |  if_e	jmp	#LR__3616
28858     17 2C 26 F4 | 	bith	local04, #23
2885c                 | LR__3610
2885c     00 34 0E F2 | 	cmp	local08, #0 wz
28860     44 01 90 AD |  if_e	jmp	#LR__3620
28864     17 32 26 F4 | 	bith	local07, #23
28868                 | LR__3611
28868     16 29 02 F6 | 	mov	local02, local04
2886c     04 28 66 F0 | 	shl	local02, #4
28870     19 31 02 F6 | 	mov	local06, local07
28874     05 30 66 F0 | 	shl	local06, #5
28878     18 29 02 FD | 	qmul	local02, local06
2887c     1A 2F 02 F1 | 	add	local05, local08
28880     FE 2E 86 F1 | 	sub	local05, #254
28884     17 37 02 F6 | 	mov	local09, local05
28888     04 2C 66 F0 | 	shl	local04, #4
2888c     05 32 66 F0 | 	shl	local07, #5
28890     18 38 62 FD | 	getqx	local10
28894     19 2D 02 FD | 	qmul	local04, local07
28898     19 3A 62 FD | 	getqy	local11
2889c     00 80 00 FF 
288a0     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
288a4     18 00 90 CD |  if_b	jmp	#LR__3612
288a8     01 36 06 F1 | 	add	local09, #1
288ac     01 38 46 F0 | 	shr	local10, #1
288b0     1D 35 02 F6 | 	mov	local08, local11
288b4     1F 34 66 F0 | 	shl	local08, #31
288b8     1A 39 42 F5 | 	or	local10, local08
288bc     01 3A 46 F0 | 	shr	local11, #1
288c0                 | LR__3612
288c0     1D 13 02 F6 | 	mov	arg01, local11
288c4     1C 15 02 F6 | 	mov	arg02, local10
288c8     1B 17 02 F6 | 	mov	arg03, local09
288cc     15 19 02 F6 | 	mov	arg04, local03
288d0     60 32 B0 FD | 	call	#__system__pack_0671
288d4     10 01 90 FD | 	jmp	#LR__3624
288d8                 | LR__3613
288d8     00 2C 0E F2 | 	cmp	local04, #0 wz
288dc     13 FB 01 56 |  if_ne	mov	result1, local01
288e0     04 01 90 5D |  if_ne	jmp	#LR__3624
288e4     FF 34 56 F2 | 	cmps	local08, #255 wc
288e8     00 34 0E C2 |  if_b	cmp	local08, #0 wz
288ec     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
288f0     18 00 90 4D |  if_c_and_nz	jmp	#LR__3614
288f4     00 F8 3F CF 
288f8     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
288fc     E8 00 90 CD |  if_b	jmp	#LR__3624
28900     00 32 0E F2 | 	cmp	local07, #0 wz
28904     14 FB 01 56 |  if_ne	mov	result1, local02
28908     DC 00 90 5D |  if_ne	jmp	#LR__3624
2890c                 | LR__3614
2890c     02 2A 46 F5 | 	or	local03, #2
28910     00 12 06 F6 | 	mov	arg01, #0
28914     00 14 06 F6 | 	mov	arg02, #0
28918     17 17 02 F6 | 	mov	arg03, local05
2891c     15 19 02 F6 | 	mov	arg04, local03
28920     10 32 B0 FD | 	call	#__system__pack_0671
28924     C0 00 90 FD | 	jmp	#LR__3624
28928                 | LR__3615
28928     00 2E 0E F2 | 	cmp	local05, #0 wz
2892c     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
28930     00 F8 3F AF 
28934     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28938     AC 00 90 AD |  if_e	jmp	#LR__3624
2893c     00 32 0E F2 | 	cmp	local07, #0 wz
28940     14 FB 01 56 |  if_ne	mov	result1, local02
28944     A0 00 90 5D |  if_ne	jmp	#LR__3624
28948     1A 17 02 F6 | 	mov	arg03, local08
2894c     15 19 02 F6 | 	mov	arg04, local03
28950     02 18 46 F5 | 	or	arg04, #2
28954     00 12 06 F6 | 	mov	arg01, #0
28958     00 14 06 F6 | 	mov	arg02, #0
2895c     D4 31 B0 FD | 	call	#__system__pack_0671
28960     84 00 90 FD | 	jmp	#LR__3624
28964                 | LR__3616
28964     00 2C 0E F2 | 	cmp	local04, #0 wz
28968     20 00 90 AD |  if_e	jmp	#LR__3619
2896c     01 2C 66 F0 | 	shl	local04, #1
28970     97 0A 48 FB | 	callpa	#(@LR__3618-@LR__3617)>>2,fcache_load_ptr_
28974                 | LR__3617
28974     00 40 00 FF 
28978     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
2897c     01 2E 86 C1 |  if_b	sub	local05, #1
28980     01 2C 66 C0 |  if_b	shl	local04, #1
28984     EC FF 9F CD |  if_b	jmp	#LR__3617
28988                 | LR__3618
28988     D0 FE 9F FD | 	jmp	#LR__3610
2898c                 | LR__3619
2898c     08 2A 46 F5 | 	or	local03, #8
28990     00 12 06 F6 | 	mov	arg01, #0
28994     00 14 06 F6 | 	mov	arg02, #0
28998     00 16 06 F6 | 	mov	arg03, #0
2899c     15 19 02 F6 | 	mov	arg04, local03
289a0     90 31 B0 FD | 	call	#__system__pack_0671
289a4     40 00 90 FD | 	jmp	#LR__3624
289a8                 | LR__3620
289a8     00 32 0E F2 | 	cmp	local07, #0 wz
289ac     20 00 90 AD |  if_e	jmp	#LR__3623
289b0     01 32 66 F0 | 	shl	local07, #1
289b4     97 0A 48 FB | 	callpa	#(@LR__3622-@LR__3621)>>2,fcache_load_ptr_
289b8                 | LR__3621
289b8     00 40 00 FF 
289bc     00 32 16 F2 | 	cmp	local07, ##8388608 wc
289c0     01 34 86 C1 |  if_b	sub	local08, #1
289c4     01 32 66 C0 |  if_b	shl	local07, #1
289c8     EC FF 9F CD |  if_b	jmp	#LR__3621
289cc                 | LR__3622
289cc     98 FE 9F FD | 	jmp	#LR__3611
289d0                 | LR__3623
289d0     08 2A 46 F5 | 	or	local03, #8
289d4     00 12 06 F6 | 	mov	arg01, #0
289d8     00 14 06 F6 | 	mov	arg02, #0
289dc     00 16 06 F6 | 	mov	arg03, #0
289e0     15 19 02 F6 | 	mov	arg04, local03
289e4     4C 31 B0 FD | 	call	#__system__pack_0671
289e8                 | LR__3624
289e8     A7 F0 03 F6 | 	mov	ptra, fp
289ec     B2 00 A0 FD | 	call	#popregs_
289f0                 | __system___float_mul_ret
289f0     2D 00 64 FD | 	ret
289f4                 | 
289f4                 | __system___float_div
289f4     0E 4A 05 F6 | 	mov	COUNT_, #14
289f8     A8 00 A0 FD | 	call	#pushregs_
289fc     09 2B 02 F6 | 	mov	local03, arg01
28a00     0A 2D 02 F6 | 	mov	local04, arg02
28a04     15 2F 02 F6 | 	mov	local05, local03
28a08     17 31 02 F6 | 	mov	local06, local05
28a0c     16 30 46 F7 | 	zerox	local06, #22
28a10     17 33 02 F6 | 	mov	local07, local05
28a14     01 32 66 F0 | 	shl	local07, #1
28a18     18 32 46 F0 | 	shr	local07, #24
28a1c     1F 2E 46 F0 | 	shr	local05, #31
28a20     16 FB 01 F6 | 	mov	result1, local04
28a24     FD 34 02 F6 | 	mov	local08, result1
28a28     1A 37 02 F6 | 	mov	local09, local08
28a2c     16 36 46 F7 | 	zerox	local09, #22
28a30     1A 39 02 F6 | 	mov	local10, local08
28a34     01 38 66 F0 | 	shl	local10, #1
28a38     18 38 46 F0 | 	shr	local10, #24
28a3c     1F 34 46 F0 | 	shr	local08, #31
28a40     1A 2F 62 F5 | 	xor	local05, local08
28a44     FF 32 0E F2 | 	cmp	local07, #255 wz
28a48     D4 00 90 AD |  if_e	jmp	#LR__3635
28a4c     FF 38 0E F2 | 	cmp	local10, #255 wz
28a50     04 01 90 AD |  if_e	jmp	#LR__3636
28a54     00 32 0E F2 | 	cmp	local07, #0 wz
28a58     24 01 90 AD |  if_e	jmp	#LR__3637
28a5c     17 30 26 F4 | 	bith	local06, #23
28a60                 | LR__3630
28a60     00 38 0E F2 | 	cmp	local10, #0 wz
28a64     70 01 90 AD |  if_e	jmp	#LR__3641
28a68     17 36 26 F4 | 	bith	local09, #23
28a6c                 | LR__3631
28a6c     1C 33 82 F1 | 	sub	local07, local10
28a70     19 3B 02 F6 | 	mov	local11, local07
28a74     18 13 02 F6 | 	mov	arg01, local06
28a78     02 12 46 F0 | 	shr	arg01, #2
28a7c     1E 30 66 F0 | 	shl	local06, #30
28a80     18 15 02 F6 | 	mov	arg02, local06
28a84     1B 17 02 F6 | 	mov	arg03, local09
28a88     28 12 62 FD | 	setq	arg01
28a8c     0B 15 12 FD | 	qdiv	arg02, arg03
28a90     00 3C 06 F6 | 	mov	local12, #0
28a94     18 26 62 FD | 	getqx	local01
28a98     19 FC 61 FD | 	getqy	result2
28a9c     FE 28 02 F6 | 	mov	local02, result2
28aa0     13 3F 02 F6 | 	mov	local13, local01
28aa4     00 28 4E F2 | 	cmps	local02, #0 wz
28aa8     1F 41 02 F6 | 	mov	local14, local13
28aac     19 40 66 F0 | 	shl	local14, #25
28ab0     01 3C 06 56 |  if_ne	mov	local12, #1
28ab4     1E 41 42 F5 | 	or	local14, local12
28ab8     07 3E 46 F0 | 	shr	local13, #7
28abc     00 80 00 FF 
28ac0     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
28ac4     1C 00 90 CD |  if_b	jmp	#LR__3632
28ac8     01 3A 06 F1 | 	add	local11, #1
28acc     01 40 46 F0 | 	shr	local14, #1
28ad0     1F 3D 02 F6 | 	mov	local12, local13
28ad4     1F 3C 66 F0 | 	shl	local12, #31
28ad8     1E 41 42 F5 | 	or	local14, local12
28adc     01 3E 46 F0 | 	shr	local13, #1
28ae0     24 00 90 FD | 	jmp	#LR__3634
28ae4                 | LR__3632
28ae4     00 40 00 FF 
28ae8     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
28aec     18 00 90 3D |  if_ae	jmp	#LR__3633
28af0     01 3A 86 F1 | 	sub	local11, #1
28af4     01 3E 66 F0 | 	shl	local13, #1
28af8     20 3D 02 F6 | 	mov	local12, local14
28afc     1F 3C 46 F0 | 	shr	local12, #31
28b00     1E 3F 42 F5 | 	or	local13, local12
28b04     01 40 66 F0 | 	shl	local14, #1
28b08                 | LR__3633
28b08                 | LR__3634
28b08     1F 13 02 F6 | 	mov	arg01, local13
28b0c     20 15 02 F6 | 	mov	arg02, local14
28b10     1D 17 02 F6 | 	mov	arg03, local11
28b14     17 19 02 F6 | 	mov	arg04, local05
28b18     18 30 B0 FD | 	call	#__system__pack_0671
28b1c     F8 00 90 FD | 	jmp	#LR__3645
28b20                 | LR__3635
28b20     00 30 0E F2 | 	cmp	local06, #0 wz
28b24     15 FB 01 56 |  if_ne	mov	result1, local03
28b28     EC 00 90 5D |  if_ne	jmp	#LR__3645
28b2c     FF 38 0E F2 | 	cmp	local10, #255 wz
28b30     00 F8 3F AF 
28b34     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28b38     DC 00 90 AD |  if_e	jmp	#LR__3645
28b3c     02 2E 46 F5 | 	or	local05, #2
28b40     00 12 06 F6 | 	mov	arg01, #0
28b44     00 14 06 F6 | 	mov	arg02, #0
28b48     19 17 02 F6 | 	mov	arg03, local07
28b4c     17 19 02 F6 | 	mov	arg04, local05
28b50     E0 2F B0 FD | 	call	#__system__pack_0671
28b54     C0 00 90 FD | 	jmp	#LR__3645
28b58                 | LR__3636
28b58     00 36 0E F2 | 	cmp	local09, #0 wz
28b5c     16 FB 01 56 |  if_ne	mov	result1, local04
28b60     B4 00 90 5D |  if_ne	jmp	#LR__3645
28b64     17 19 02 F6 | 	mov	arg04, local05
28b68     08 18 46 F5 | 	or	arg04, #8
28b6c     00 12 06 F6 | 	mov	arg01, #0
28b70     00 14 06 F6 | 	mov	arg02, #0
28b74     00 16 06 F6 | 	mov	arg03, #0
28b78     B8 2F B0 FD | 	call	#__system__pack_0671
28b7c     98 00 90 FD | 	jmp	#LR__3645
28b80                 | LR__3637
28b80     00 30 0E F2 | 	cmp	local06, #0 wz
28b84     20 00 90 AD |  if_e	jmp	#LR__3640
28b88     01 30 66 F0 | 	shl	local06, #1
28b8c     97 0A 48 FB | 	callpa	#(@LR__3639-@LR__3638)>>2,fcache_load_ptr_
28b90                 | LR__3638
28b90     00 40 00 FF 
28b94     00 30 16 F2 | 	cmp	local06, ##8388608 wc
28b98     01 32 86 C1 |  if_b	sub	local07, #1
28b9c     01 30 66 C0 |  if_b	shl	local06, #1
28ba0     EC FF 9F CD |  if_b	jmp	#LR__3638
28ba4                 | LR__3639
28ba4     B8 FE 9F FD | 	jmp	#LR__3630
28ba8                 | LR__3640
28ba8     00 38 0E F2 | 	cmp	local10, #0 wz
28bac     00 36 0E A2 |  if_e	cmp	local09, #0 wz
28bb0     00 F8 3F AF 
28bb4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28bb8     5C 00 90 AD |  if_e	jmp	#LR__3645
28bbc     17 19 02 F6 | 	mov	arg04, local05
28bc0     08 18 46 F5 | 	or	arg04, #8
28bc4     00 12 06 F6 | 	mov	arg01, #0
28bc8     00 14 06 F6 | 	mov	arg02, #0
28bcc     00 16 06 F6 | 	mov	arg03, #0
28bd0     60 2F B0 FD | 	call	#__system__pack_0671
28bd4     40 00 90 FD | 	jmp	#LR__3645
28bd8                 | LR__3641
28bd8     00 36 0E F2 | 	cmp	local09, #0 wz
28bdc     20 00 90 AD |  if_e	jmp	#LR__3644
28be0     01 36 66 F0 | 	shl	local09, #1
28be4     97 0A 48 FB | 	callpa	#(@LR__3643-@LR__3642)>>2,fcache_load_ptr_
28be8                 | LR__3642
28be8     00 40 00 FF 
28bec     00 36 16 F2 | 	cmp	local09, ##8388608 wc
28bf0     01 38 86 C1 |  if_b	sub	local10, #1
28bf4     01 36 66 C0 |  if_b	shl	local09, #1
28bf8     EC FF 9F CD |  if_b	jmp	#LR__3642
28bfc                 | LR__3643
28bfc     6C FE 9F FD | 	jmp	#LR__3631
28c00                 | LR__3644
28c00     02 2E 46 F5 | 	or	local05, #2
28c04     00 12 06 F6 | 	mov	arg01, #0
28c08     00 14 06 F6 | 	mov	arg02, #0
28c0c     00 16 06 F6 | 	mov	arg03, #0
28c10     17 19 02 F6 | 	mov	arg04, local05
28c14     1C 2F B0 FD | 	call	#__system__pack_0671
28c18                 | LR__3645
28c18     A7 F0 03 F6 | 	mov	ptra, fp
28c1c     B2 00 A0 FD | 	call	#popregs_
28c20                 | __system___float_div_ret
28c20     2D 00 64 FD | 	ret
28c24                 | 
28c24                 | __system___float_cmp
28c24     00 C0 3F FF 
28c28     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
28c2c     00 C0 3F CF 
28c30     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
28c34     0B FB 01 36 |  if_ae	mov	result1, arg03
28c38     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
28c3c     00 C0 7F FF 
28c40     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
28c44     00 C0 7F CF 
28c48     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
28c4c     0B FB 01 36 |  if_ae	mov	result1, arg03
28c50     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
28c54     00 12 56 F2 | 	cmps	arg01, #0 wc
28c58     2C 00 90 3D |  if_ae	jmp	#LR__3650
28c5c     00 14 56 F2 | 	cmps	arg02, #0 wc
28c60     0A FB 01 C6 |  if_b	mov	result1, arg02
28c64     09 FB 81 C1 |  if_b	sub	result1, arg01
28c68     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
28c6c     00 14 0E F2 | 	cmp	arg02, #0 wz
28c70     00 00 40 AF 
28c74     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
28c78     00 FA 05 A6 |  if_e	mov	result1, #0
28c7c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
28c80     01 FA 65 F6 | 	neg	result1, #1
28c84     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
28c88                 | LR__3650
28c88     00 14 56 F2 | 	cmps	arg02, #0 wc
28c8c     1C 00 90 3D |  if_ae	jmp	#LR__3651
28c90     00 12 0E F2 | 	cmp	arg01, #0 wz
28c94     00 00 40 AF 
28c98     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
28c9c     00 FA 05 A6 |  if_e	mov	result1, #0
28ca0     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
28ca4     01 FA 05 F6 | 	mov	result1, #1
28ca8     08 00 90 FD | 	jmp	#__system___float_cmp_ret
28cac                 | LR__3651
28cac     0A 13 82 F1 | 	sub	arg01, arg02
28cb0     09 FB 01 F6 | 	mov	result1, arg01
28cb4                 | __system___float_cmp_ret
28cb4     2D 00 64 FD | 	ret
28cb8                 | 
28cb8                 | __system___float_tointeger
28cb8     02 4A 05 F6 | 	mov	COUNT_, #2
28cbc     A8 00 A0 FD | 	call	#pushregs_
28cc0     50 00 B0 FD | 	call	#__system___float_Unpack
28cc4     FF FF 7F FF 
28cc8     FF FD 55 F2 | 	cmps	result2, ##-1 wc
28ccc     34 00 90 CD |  if_b	jmp	#LR__3660
28cd0     1F FC 55 F2 | 	cmps	result2, #31 wc
28cd4     2C 00 90 3D |  if_ae	jmp	#LR__3660
28cd8     02 FE 65 F0 | 	shl	result3, #2
28cdc     1E 26 06 F6 | 	mov	local01, #30
28ce0     FE 26 82 F1 | 	sub	local01, result2
28ce4     13 FF 41 F0 | 	shr	result3, local01
28ce8     FF 28 02 F6 | 	mov	local02, result3
28cec     0A 29 02 F1 | 	add	local02, arg02
28cf0     01 28 46 F0 | 	shr	local02, #1
28cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
28cf8     14 29 62 56 |  if_ne	neg	local02, local02
28cfc     14 FB 01 F6 | 	mov	result1, local02
28d00     04 00 90 FD | 	jmp	#LR__3661
28d04                 | LR__3660
28d04     00 FA 05 F6 | 	mov	result1, #0
28d08                 | LR__3661
28d08     A7 F0 03 F6 | 	mov	ptra, fp
28d0c     B2 00 A0 FD | 	call	#popregs_
28d10                 | __system___float_tointeger_ret
28d10     2D 00 64 FD | 	ret
28d14                 | 
28d14                 | __system___float_Unpack
28d14     09 01 02 F6 | 	mov	_var01, arg01
28d18     1F 00 46 F0 | 	shr	_var01, #31
28d1c     09 03 02 F6 | 	mov	_var02, arg01
28d20     01 02 66 F0 | 	shl	_var02, #1
28d24     18 02 4E F0 | 	shr	_var02, #24 wz
28d28     17 13 06 F4 | 	bitl	arg01, #279
28d2c     06 12 66 50 |  if_ne	shl	arg01, #6
28d30     1D 12 26 54 |  if_ne	bith	arg01, #29
28d34     1C 00 90 5D |  if_ne	jmp	#LR__3670
28d38     09 05 92 F7 | 	encod	_var03, arg01 wc
28d3c     01 04 06 C1 |  if_b	add	_var03, #1
28d40     17 04 86 F1 | 	sub	_var03, #23
28d44     02 03 02 F6 | 	mov	_var02, _var03
28d48     07 FC 05 F6 | 	mov	result2, #7
28d4c     02 FD 81 F1 | 	sub	result2, _var03
28d50     FE 12 62 F0 | 	shl	arg01, result2
28d54                 | LR__3670
28d54     7F 02 86 F1 | 	sub	_var02, #127
28d58     09 FF 01 F6 | 	mov	result3, arg01
28d5c     00 FB 01 F6 | 	mov	result1, _var01
28d60     01 FD 01 F6 | 	mov	result2, _var02
28d64                 | __system___float_Unpack_ret
28d64     2D 00 64 FD | 	ret
28d68                 | 
28d68                 | __system___float_Pack
28d68     00 00 06 F6 | 	mov	_var01, #0
28d6c     00 16 0E F2 | 	cmp	arg03, #0 wz
28d70     8C 00 90 AD |  if_e	jmp	#LR__3681
28d74     0B 03 92 F7 | 	encod	_var02, arg03 wc
28d78     01 02 06 C1 |  if_b	add	_var02, #1
28d7c     21 00 06 F6 | 	mov	_var01, #33
28d80     01 01 82 F1 | 	sub	_var01, _var02
28d84     00 17 62 F0 | 	shl	arg03, _var01
28d88     03 02 06 F6 | 	mov	_var02, #3
28d8c     00 03 82 F1 | 	sub	_var02, _var01
28d90     01 15 02 F1 | 	add	arg02, _var02
28d94     0A 05 02 F6 | 	mov	_var03, arg02
28d98     00 17 06 F1 | 	add	arg03, #256
28d9c     0B 03 02 F6 | 	mov	_var02, arg03
28da0     FF 02 2E F5 | 	andn	_var02, #255 wz
28da4     01 04 06 A1 |  if_e	add	_var03, #1
28da8     7F 04 06 F1 | 	add	_var03, #127
28dac     FF FF 7F FF 
28db0     E9 05 46 F3 | 	fges	_var03, ##-23
28db4     FF 04 66 F3 | 	fles	_var03, #255
28db8     01 04 56 F2 | 	cmps	_var03, #1 wc
28dbc     1C 00 90 3D |  if_ae	jmp	#LR__3680
28dc0     01 16 46 F0 | 	shr	arg03, #1
28dc4     1F 02 C6 F9 | 	decod	_var02, #31
28dc8     0B 03 02 F1 | 	add	_var02, arg03
28dcc     02 05 62 F6 | 	neg	_var03, _var03
28dd0     02 03 42 F0 | 	shr	_var02, _var03
28dd4     01 17 02 F6 | 	mov	arg03, _var02
28dd8     00 04 06 F6 | 	mov	_var03, #0
28ddc                 | LR__3680
28ddc     09 FB 01 F6 | 	mov	result1, arg01
28de0     1F FA 65 F0 | 	shl	result1, #31
28de4     02 03 02 F6 | 	mov	_var02, _var03
28de8     17 02 66 F0 | 	shl	_var02, #23
28dec     01 FB 41 F5 | 	or	result1, _var02
28df0     0B 07 02 F6 | 	mov	_var04, arg03
28df4     09 06 46 F0 | 	shr	_var04, #9
28df8     03 FB 41 F5 | 	or	result1, _var04
28dfc     04 00 90 FD | 	jmp	#__system___float_Pack_ret
28e00                 | LR__3681
28e00     00 FB 01 F6 | 	mov	result1, _var01
28e04                 | __system___float_Pack_ret
28e04     2D 00 64 FD | 	ret
28e08                 | 
28e08                 | __system___basic_print_float
28e08     05 4A 05 F6 | 	mov	COUNT_, #5
28e0c     A8 00 A0 FD | 	call	#pushregs_
28e10     09 27 02 F6 | 	mov	local01, arg01
28e14     0A 29 02 F6 | 	mov	local02, arg02
28e18     0B 2B 0A F6 | 	mov	local03, arg03 wz
28e1c     0C 2D 02 F6 | 	mov	local04, arg04
28e20     14 00 90 5D |  if_ne	jmp	#LR__3690
28e24     23 2C 0E F2 | 	cmp	local04, #35 wz
28e28     80 02 10 AF 
28e2c     00 2E 06 A6 |  if_e	mov	local05, ##537198592
28e30     1D 2E C6 59 |  if_ne	decod	local05, #29
28e34     17 2B 02 F6 | 	mov	local03, local05
28e38                 | LR__3690
28e38     13 13 02 F6 | 	mov	arg01, local01
28e3c     D8 27 B0 FD | 	call	#__system___gettxfunc
28e40     FD 2E 0A F6 | 	mov	local05, result1 wz
28e44     00 FA 05 A6 |  if_e	mov	result1, #0
28e48     17 13 02 56 |  if_ne	mov	arg01, local05
28e4c     15 15 02 56 |  if_ne	mov	arg02, local03
28e50     14 17 02 56 |  if_ne	mov	arg03, local02
28e54     16 19 02 56 |  if_ne	mov	arg04, local04
28e58     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
28e5c     A7 F0 03 F6 | 	mov	ptra, fp
28e60     B2 00 A0 FD | 	call	#popregs_
28e64                 | __system___basic_print_float_ret
28e64     2D 00 64 FD | 	ret
28e68                 | 
28e68                 | __system____builtin_atoi
28e68     07 4A 05 F6 | 	mov	COUNT_, #7
28e6c     A8 00 A0 FD | 	call	#pushregs_
28e70                 | __system____builtin_atoi_enter
28e70     09 27 02 F6 | 	mov	local01, arg01
28e74     0A 29 02 F6 | 	mov	local02, arg02
28e78     00 2A 06 F6 | 	mov	local03, #0
28e7c     00 2C 06 F6 | 	mov	local04, #0
28e80     00 2E 06 F6 | 	mov	local05, #0
28e84     97 1C 48 FB | 	callpa	#(@LR__3702-@LR__3700)>>2,fcache_load_ptr_
28e88                 | LR__3700
28e88     13 31 C2 FA | 	rdbyte	local06, local01
28e8c     20 30 0E F2 | 	cmp	local06, #32 wz
28e90     01 26 06 A1 |  if_e	add	local01, #1
28e94     F0 FF 9F AD |  if_e	jmp	#LR__3700
28e98     13 33 C2 FA | 	rdbyte	local07, local01
28e9c                 | LR__3701
28e9c     2D 32 0E F2 | 	cmp	local07, #45 wz
28ea0     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
28ea4     18 00 90 5D |  if_ne	jmp	#LR__3703
28ea8     01 26 06 F1 | 	add	local01, #1
28eac     2D 32 0E F2 | 	cmp	local07, #45 wz
28eb0     01 30 06 A6 |  if_e	mov	local06, #1
28eb4     18 2F C2 A2 |  if_e	subr	local05, local06
28eb8     13 33 C2 FA | 	rdbyte	local07, local01
28ebc     DC FF 9F FD | 	jmp	#LR__3701
28ec0                 | LR__3702
28ec0                 | LR__3703
28ec0     00 28 0E F2 | 	cmp	local02, #0 wz
28ec4     1C 00 90 5D |  if_ne	jmp	#LR__3705
28ec8     24 32 0E F2 | 	cmp	local07, #36 wz
28ecc     10 28 06 A6 |  if_e	mov	local02, #16
28ed0     01 26 06 A1 |  if_e	add	local01, #1
28ed4     0C 00 90 AD |  if_e	jmp	#LR__3704
28ed8     25 32 0E F2 | 	cmp	local07, #37 wz
28edc     02 28 06 A6 |  if_e	mov	local02, #2
28ee0     01 26 06 A1 |  if_e	add	local01, #1
28ee4                 | LR__3704
28ee4                 | LR__3705
28ee4     97 48 48 FB | 	callpa	#(@LR__3713-@LR__3706)>>2,fcache_load_ptr_
28ee8                 | LR__3706
28ee8                 | LR__3707
28ee8     13 33 C2 FA | 	rdbyte	local07, local01
28eec     5F 32 0E F2 | 	cmp	local07, #95 wz
28ef0     01 26 06 F1 | 	add	local01, #1
28ef4     F0 FF 9F AD |  if_e	jmp	#LR__3707
28ef8     30 32 0E F2 | 	cmp	local07, #48 wz
28efc     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
28f00     00 2C 06 A6 |  if_e	mov	local04, #0
28f04     60 00 90 AD |  if_e	jmp	#LR__3712
28f08     31 32 56 F2 | 	cmps	local07, #49 wc
28f0c     18 00 90 CD |  if_b	jmp	#LR__3708
28f10     3A 32 56 F2 | 	cmps	local07, #58 wc
28f14     19 2D 02 C6 |  if_b	mov	local04, local07
28f18     30 2C 86 C1 |  if_b	sub	local04, #48
28f1c     00 28 0E C2 |  if_b	cmp	local02, #0 wz
28f20     0A 28 06 86 |  if_c_and_z	mov	local02, #10
28f24     40 00 90 CD |  if_b	jmp	#LR__3711
28f28                 | LR__3708
28f28     0B 28 56 F2 | 	cmps	local02, #11 wc
28f2c     61 32 56 32 |  if_ae	cmps	local07, #97 wc
28f30     14 00 90 CD |  if_b	jmp	#LR__3709
28f34     67 32 56 F2 | 	cmps	local07, #103 wc
28f38     61 32 86 C1 |  if_b	sub	local07, #97
28f3c     0A 2C 06 C6 |  if_b	mov	local04, #10
28f40     19 2D 02 C1 |  if_b	add	local04, local07
28f44     20 00 90 CD |  if_b	jmp	#LR__3710
28f48                 | LR__3709
28f48     0B 28 56 F2 | 	cmps	local02, #11 wc
28f4c     41 32 56 32 |  if_ae	cmps	local07, #65 wc
28f50     24 00 90 CD |  if_b	jmp	#LR__3714
28f54     47 32 56 F2 | 	cmps	local07, #71 wc
28f58     41 32 86 C1 |  if_b	sub	local07, #65
28f5c     0A 2C 06 C6 |  if_b	mov	local04, #10
28f60     19 2D 02 C1 |  if_b	add	local04, local07
28f64     10 00 90 3D |  if_ae	jmp	#LR__3714
28f68                 | LR__3710
28f68                 | LR__3711
28f68                 | LR__3712
28f68     15 29 02 FD | 	qmul	local02, local03
28f6c     18 2A 62 FD | 	getqx	local03
28f70     16 2B 02 F1 | 	add	local03, local04
28f74     70 FF 9F FD | 	jmp	#LR__3706
28f78                 | LR__3713
28f78                 | LR__3714
28f78     00 28 0E F2 | 	cmp	local02, #0 wz
28f7c     64 00 90 5D |  if_ne	jmp	#LR__3720
28f80     78 32 0E F2 | 	cmp	local07, #120 wz
28f84     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
28f88     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
28f8c     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
28f90     14 00 90 5D |  if_ne	jmp	#LR__3715
28f94     13 13 02 F6 | 	mov	arg01, local01
28f98     10 14 06 F6 | 	mov	arg02, #16
28f9c     C8 FE BF FD | 	call	#__system____builtin_atoi
28fa0     FD 2A 02 F6 | 	mov	local03, result1
28fa4     3C 00 90 FD | 	jmp	#LR__3719
28fa8                 | LR__3715
28fa8     62 32 0E F2 | 	cmp	local07, #98 wz
28fac     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
28fb0     14 00 90 5D |  if_ne	jmp	#LR__3716
28fb4     13 13 02 F6 | 	mov	arg01, local01
28fb8     02 14 06 F6 | 	mov	arg02, #2
28fbc     A8 FE BF FD | 	call	#__system____builtin_atoi
28fc0     FD 2A 02 F6 | 	mov	local03, result1
28fc4     1C 00 90 FD | 	jmp	#LR__3718
28fc8                 | LR__3716
28fc8     6F 32 0E F2 | 	cmp	local07, #111 wz
28fcc     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
28fd0     10 00 90 5D |  if_ne	jmp	#LR__3717
28fd4     13 13 02 F6 | 	mov	arg01, local01
28fd8     08 14 06 F6 | 	mov	arg02, #8
28fdc     88 FE BF FD | 	call	#__system____builtin_atoi
28fe0     FD 2A 02 F6 | 	mov	local03, result1
28fe4                 | LR__3717
28fe4                 | LR__3718
28fe4                 | LR__3719
28fe4                 | LR__3720
28fe4     00 2E 0E F2 | 	cmp	local05, #0 wz
28fe8     15 2B 62 56 |  if_ne	neg	local03, local03
28fec     15 FB 01 F6 | 	mov	result1, local03
28ff0     A7 F0 03 F6 | 	mov	ptra, fp
28ff4     B2 00 A0 FD | 	call	#popregs_
28ff8                 | __system____builtin_atoi_ret
28ff8     2D 00 64 FD | 	ret
28ffc                 | 
28ffc                 | __system____builtin_atof
28ffc     07 4A 05 F6 | 	mov	COUNT_, #7
29000     A8 00 A0 FD | 	call	#pushregs_
29004     09 27 02 F6 | 	mov	local01, arg01
29008     00 28 06 F6 | 	mov	local02, #0
2900c     00 2A 06 F6 | 	mov	local03, #0
29010     00 2C 06 F6 | 	mov	local04, #0
29014     00 2E 06 F6 | 	mov	local05, #0
29018     97 08 48 FB | 	callpa	#(@LR__3731-@LR__3730)>>2,fcache_load_ptr_
2901c                 | LR__3730
2901c     13 17 C2 FA | 	rdbyte	arg03, local01
29020     20 16 0E F2 | 	cmp	arg03, #32 wz
29024     01 26 06 A1 |  if_e	add	local01, #1
29028     F0 FF 9F AD |  if_e	jmp	#LR__3730
2902c                 | LR__3731
2902c     13 31 C2 FA | 	rdbyte	local06, local01
29030                 | LR__3732
29030     2B 30 0E F2 | 	cmp	local06, #43 wz
29034     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
29038     14 00 90 5D |  if_ne	jmp	#LR__3733
2903c     2D 30 0E F2 | 	cmp	local06, #45 wz
29040     1F 2C E6 A4 |  if_e	bitnot	local04, #31
29044     01 26 06 F1 | 	add	local01, #1
29048     13 31 C2 FA | 	rdbyte	local06, local01
2904c     E0 FF 9F FD | 	jmp	#LR__3732
29050                 | LR__3733
29050                 | LR__3734
29050     97 08 48 FB | 	callpa	#(@LR__3736-@LR__3735)>>2,fcache_load_ptr_
29054                 | LR__3735
29054     13 31 C2 FA | 	rdbyte	local06, local01
29058     5F 30 0E F2 | 	cmp	local06, #95 wz
2905c     01 26 06 F1 | 	add	local01, #1
29060     F0 FF 9F AD |  if_e	jmp	#LR__3735
29064                 | LR__3736
29064     00 30 0E F2 | 	cmp	local06, #0 wz
29068     5C 00 90 AD |  if_e	jmp	#LR__3738
2906c     30 30 56 F2 | 	cmps	local06, #48 wc
29070     44 00 90 CD |  if_b	jmp	#LR__3737
29074     3A 30 56 F2 | 	cmps	local06, #58 wc
29078     3C 00 90 3D |  if_ae	jmp	#LR__3737
2907c     14 13 02 F6 | 	mov	arg01, local02
29080     00 90 20 FF 
29084     00 14 06 F6 | 	mov	arg02, ##1092616192
29088     64 F7 BF FD | 	call	#__system___float_mul
2908c     FD 28 02 F6 | 	mov	local02, result1
29090     30 30 86 F1 | 	sub	local06, #48
29094     18 13 02 F6 | 	mov	arg01, local06
29098     50 F3 BF FD | 	call	#__system___float_fromuns
2909c     FD 14 02 F6 | 	mov	arg02, result1
290a0     14 13 02 F6 | 	mov	arg01, local02
290a4     78 F3 BF FD | 	call	#__system___float_add
290a8     FD 28 02 F6 | 	mov	local02, result1
290ac     00 2E 0E F2 | 	cmp	local05, #0 wz
290b0     01 2A 86 51 |  if_ne	sub	local03, #1
290b4     98 FF 9F FD | 	jmp	#LR__3734
290b8                 | LR__3737
290b8     2E 30 0E F2 | 	cmp	local06, #46 wz
290bc     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
290c0     01 2E 06 A6 |  if_e	mov	local05, #1
290c4     88 FF 9F AD |  if_e	jmp	#LR__3734
290c8                 | LR__3738
290c8     45 30 0E F2 | 	cmp	local06, #69 wz
290cc     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
290d0     18 00 90 5D |  if_ne	jmp	#LR__3739
290d4     13 13 02 F6 | 	mov	arg01, local01
290d8     00 14 06 F6 | 	mov	arg02, #0
290dc     88 FD BF FD | 	call	#__system____builtin_atoi
290e0     15 FB 01 F1 | 	add	result1, local03
290e4     FD 32 02 F6 | 	mov	local07, result1
290e8     04 00 90 FD | 	jmp	#LR__3740
290ec                 | LR__3739
290ec     15 33 02 F6 | 	mov	local07, local03
290f0                 | LR__3740
290f0     19 17 02 F6 | 	mov	arg03, local07
290f4     14 13 02 F6 | 	mov	arg01, local02
290f8     00 90 20 FF 
290fc     00 14 06 F6 | 	mov	arg02, ##1092616192
29100     F4 06 B0 FD | 	call	#__system___float_pow_n
29104     16 FB 61 F5 | 	xor	result1, local04
29108     A7 F0 03 F6 | 	mov	ptra, fp
2910c     B2 00 A0 FD | 	call	#popregs_
29110                 | __system____builtin_atof_ret
29110     2D 00 64 FD | 	ret
29114                 | 
29114                 | __system____builtin_ilogb
29114     FC FB BF FD | 	call	#__system___float_Unpack
29118     00 FE 0D F2 | 	cmp	result3, #0 wz
2911c     00 00 40 AF 
29120     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
29124     24 00 90 AD |  if_e	jmp	#LR__3751
29128     80 FC 0D F2 | 	cmp	result2, #128 wz
2912c     18 00 90 5D |  if_ne	jmp	#LR__3750
29130     00 00 10 FF 
29134     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
29138     1E FA CD A9 |  if_e	bmask	result1, #30
2913c     0C 00 90 AD |  if_e	jmp	#LR__3751
29140     1F FA C5 F9 | 	decod	result1, #31
29144     04 00 90 FD | 	jmp	#LR__3751
29148                 | LR__3750
29148     FE FA 01 F6 | 	mov	result1, result2
2914c                 | LR__3751
2914c                 | __system____builtin_ilogb_ret
2914c     2D 00 64 FD | 	ret
29150                 | 
29150                 | __system____builtin_sinf
29150     03 4A 05 F6 | 	mov	COUNT_, #3
29154     A8 00 A0 FD | 	call	#pushregs_
29158     09 27 02 F6 | 	mov	local01, arg01
2915c     87 64 20 FF 
29160     DB 15 06 F6 | 	mov	arg02, ##1086918619
29164     8C F8 BF FD | 	call	#__system___float_div
29168     FD 12 02 F6 | 	mov	arg01, result1
2916c     00 14 06 F6 | 	mov	arg02, #0
29170     44 FB BF FD | 	call	#__system___float_tointeger
29174     FD 16 0A F6 | 	mov	arg03, result1 wz
29178     44 00 90 AD |  if_e	jmp	#LR__3760
2917c     0B 13 52 F6 | 	abs	arg01, arg03 wc
29180     1F 28 C6 C9 |  if_b	decod	local02, #31
29184     00 28 06 36 |  if_ae	mov	local02, #0
29188     60 F2 BF FD | 	call	#__system___float_fromuns
2918c     14 FB 61 F5 | 	xor	result1, local02
29190     FD 12 02 F6 | 	mov	arg01, result1
29194     1E 14 C6 F9 | 	decod	arg02, #30
29198     54 F6 BF FD | 	call	#__system___float_mul
2919c     FD 12 02 F6 | 	mov	arg01, result1
291a0     87 24 20 FF 
291a4     DB 15 06 F6 | 	mov	arg02, ##1078530011
291a8     44 F6 BF FD | 	call	#__system___float_mul
291ac     FD 14 02 F6 | 	mov	arg02, result1
291b0     13 13 02 F6 | 	mov	arg01, local01
291b4     1F 14 E6 F4 | 	bitnot	arg02, #31
291b8     64 F2 BF FD | 	call	#__system___float_add
291bc     FD 26 02 F6 | 	mov	local01, result1
291c0                 | LR__3760
291c0     13 13 02 F6 | 	mov	arg01, local01
291c4     66 E6 1E FF 
291c8     CD 14 06 F6 | 	mov	arg02, ##1036831949
291cc     01 16 06 F6 | 	mov	arg03, #1
291d0     50 FA BF FD | 	call	#__system___float_cmp
291d4     00 FA 55 F2 | 	cmps	result1, #0 wc
291d8     5C 00 90 3D |  if_ae	jmp	#LR__3761
291dc     13 13 02 F6 | 	mov	arg01, local01
291e0     66 E6 5E FF 
291e4     CD 14 06 F6 | 	mov	arg02, ##-1110651699
291e8     01 16 66 F6 | 	neg	arg03, #1
291ec     34 FA BF FD | 	call	#__system___float_cmp
291f0     01 FA 55 F2 | 	cmps	result1, #1 wc
291f4     40 00 90 CD |  if_b	jmp	#LR__3761
291f8     13 13 02 F6 | 	mov	arg01, local01
291fc     13 15 02 F6 | 	mov	arg02, local01
29200     EC F5 BF FD | 	call	#__system___float_mul
29204     FD 12 02 F6 | 	mov	arg01, result1
29208     13 15 02 F6 | 	mov	arg02, local01
2920c     E0 F5 BF FD | 	call	#__system___float_mul
29210     FD 12 02 F6 | 	mov	arg01, result1
29214     00 60 20 FF 
29218     00 14 06 F6 | 	mov	arg02, ##1086324736
2921c     D4 F7 BF FD | 	call	#__system___float_div
29220     FD 14 02 F6 | 	mov	arg02, result1
29224     13 13 02 F6 | 	mov	arg01, local01
29228     1F 14 E6 F4 | 	bitnot	arg02, #31
2922c     F0 F1 BF FD | 	call	#__system___float_add
29230     FD 2A 02 F6 | 	mov	local03, result1
29234     54 00 90 FD | 	jmp	#LR__3762
29238                 | LR__3761
29238     13 13 02 F6 | 	mov	arg01, local01
2923c     7C 91 26 FF 
29240     83 15 06 F6 | 	mov	arg02, ##1294137731
29244     A8 F5 BF FD | 	call	#__system___float_mul
29248     FD 12 02 F6 | 	mov	arg01, result1
2924c     00 14 06 F6 | 	mov	arg02, #0
29250     64 FA BF FD | 	call	#__system___float_tointeger
29254     02 FA 65 F0 | 	shl	result1, #2
29258     00 00 A0 FF 
2925c     FD 00 48 FD | 	qrotate	##1073741824, result1
29260     19 12 62 FD | 	getqy	arg01
29264     09 13 52 F6 | 	abs	arg01, arg01 wc
29268     1F 28 C6 C9 |  if_b	decod	local02, #31
2926c     00 28 06 36 |  if_ae	mov	local02, #0
29270     78 F1 BF FD | 	call	#__system___float_fromuns
29274     14 FB 61 F5 | 	xor	result1, local02
29278     FD 12 02 F6 | 	mov	arg01, result1
2927c     00 40 27 FF 
29280     00 14 06 F6 | 	mov	arg02, ##1317011456
29284     6C F7 BF FD | 	call	#__system___float_div
29288     FD 2A 02 F6 | 	mov	local03, result1
2928c                 | LR__3762
2928c     15 FB 01 F6 | 	mov	result1, local03
29290     A7 F0 03 F6 | 	mov	ptra, fp
29294     B2 00 A0 FD | 	call	#popregs_
29298                 | __system____builtin_sinf_ret
29298     2D 00 64 FD | 	ret
2929c                 | 
2929c                 | __system____builtin_tanf
2929c     02 4A 05 F6 | 	mov	COUNT_, #2
292a0     A8 00 A0 FD | 	call	#pushregs_
292a4     09 27 02 F6 | 	mov	local01, arg01
292a8     A4 FE BF FD | 	call	#__system____builtin_sinf
292ac     FD 28 02 F6 | 	mov	local02, result1
292b0     13 15 02 F6 | 	mov	arg02, local01
292b4     87 E4 1F FF 
292b8     DB 13 06 F6 | 	mov	arg01, ##1070141403
292bc     1F 14 E6 F4 | 	bitnot	arg02, #31
292c0     5C F1 BF FD | 	call	#__system___float_add
292c4     FD 12 02 F6 | 	mov	arg01, result1
292c8     84 FE BF FD | 	call	#__system____builtin_sinf
292cc     FD 14 02 F6 | 	mov	arg02, result1
292d0     14 13 02 F6 | 	mov	arg01, local02
292d4     1C F7 BF FD | 	call	#__system___float_div
292d8     A7 F0 03 F6 | 	mov	ptra, fp
292dc     B2 00 A0 FD | 	call	#popregs_
292e0                 | __system____builtin_tanf_ret
292e0     2D 00 64 FD | 	ret
292e4                 | 
292e4                 | __system____builtin_asinf
292e4     01 4A 05 F6 | 	mov	COUNT_, #1
292e8     A8 00 A0 FD | 	call	#pushregs_
292ec     09 27 02 F6 | 	mov	local01, arg01
292f0     13 15 02 F6 | 	mov	arg02, local01
292f4     13 13 02 F6 | 	mov	arg01, local01
292f8     F4 F4 BF FD | 	call	#__system___float_mul
292fc     FD 14 02 F6 | 	mov	arg02, result1
29300     00 C0 1F FF 
29304     00 12 06 F6 | 	mov	arg01, ##1065353216
29308     1F 14 E6 F4 | 	bitnot	arg02, #31
2930c     10 F1 BF FD | 	call	#__system___float_add
29310     FD 12 02 F6 | 	mov	arg01, result1
29314     00 F4 BF FD | 	call	#__system___float_sqrt
29318     FD 14 02 F6 | 	mov	arg02, result1
2931c     13 13 02 F6 | 	mov	arg01, local01
29320     58 00 B0 FD | 	call	#__system____builtin_atan2f
29324     A7 F0 03 F6 | 	mov	ptra, fp
29328     B2 00 A0 FD | 	call	#popregs_
2932c                 | __system____builtin_asinf_ret
2932c     2D 00 64 FD | 	ret
29330                 | 
29330                 | __system____builtin_acosf
29330     01 4A 05 F6 | 	mov	COUNT_, #1
29334     A8 00 A0 FD | 	call	#pushregs_
29338     09 27 02 F6 | 	mov	local01, arg01
2933c     13 15 02 F6 | 	mov	arg02, local01
29340     13 13 02 F6 | 	mov	arg01, local01
29344     A8 F4 BF FD | 	call	#__system___float_mul
29348     FD 14 02 F6 | 	mov	arg02, result1
2934c     00 C0 1F FF 
29350     00 12 06 F6 | 	mov	arg01, ##1065353216
29354     1F 14 E6 F4 | 	bitnot	arg02, #31
29358     C4 F0 BF FD | 	call	#__system___float_add
2935c     FD 12 02 F6 | 	mov	arg01, result1
29360     B4 F3 BF FD | 	call	#__system___float_sqrt
29364     FD 12 02 F6 | 	mov	arg01, result1
29368     13 15 02 F6 | 	mov	arg02, local01
2936c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
29370     A7 F0 03 F6 | 	mov	ptra, fp
29374     B2 00 A0 FD | 	call	#popregs_
29378                 | __system____builtin_acosf_ret
29378     2D 00 64 FD | 	ret
2937c                 | 
2937c                 | __system____builtin_atan2f
2937c     04 4A 05 F6 | 	mov	COUNT_, #4
29380     A8 00 A0 FD | 	call	#pushregs_
29384     09 27 02 F6 | 	mov	local01, arg01
29388     0A 29 02 F6 | 	mov	local02, arg02
2938c     13 13 02 F6 | 	mov	arg01, local01
29390     00 14 06 F6 | 	mov	arg02, #0
29394     01 16 06 F6 | 	mov	arg03, #1
29398     88 F8 BF FD | 	call	#__system___float_cmp
2939c     00 FA 0D F2 | 	cmp	result1, #0 wz
293a0     28 00 90 5D |  if_ne	jmp	#LR__3770
293a4     14 13 02 F6 | 	mov	arg01, local02
293a8     00 14 06 F6 | 	mov	arg02, #0
293ac     01 16 06 F6 | 	mov	arg03, #1
293b0     70 F8 BF FD | 	call	#__system___float_cmp
293b4     00 FA 55 F2 | 	cmps	result1, #0 wc
293b8     87 24 60 CF 
293bc     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
293c0     DC 00 90 CD |  if_b	jmp	#LR__3771
293c4     00 FA 05 F6 | 	mov	result1, #0
293c8     D4 00 90 FD | 	jmp	#LR__3771
293cc                 | LR__3770
293cc     14 13 02 F6 | 	mov	arg01, local02
293d0     14 15 02 F6 | 	mov	arg02, local02
293d4     18 F4 BF FD | 	call	#__system___float_mul
293d8     FD 2A 02 F6 | 	mov	local03, result1
293dc     13 13 02 F6 | 	mov	arg01, local01
293e0     13 15 02 F6 | 	mov	arg02, local01
293e4     08 F4 BF FD | 	call	#__system___float_mul
293e8     FD 14 02 F6 | 	mov	arg02, result1
293ec     15 13 02 F6 | 	mov	arg01, local03
293f0     2C F0 BF FD | 	call	#__system___float_add
293f4     FD 12 02 F6 | 	mov	arg01, result1
293f8     1C F3 BF FD | 	call	#__system___float_sqrt
293fc     FD 2A 02 F6 | 	mov	local03, result1
29400     14 13 02 F6 | 	mov	arg01, local02
29404     15 15 02 F6 | 	mov	arg02, local03
29408     E8 F5 BF FD | 	call	#__system___float_div
2940c     FD 28 02 F6 | 	mov	local02, result1
29410     13 13 02 F6 | 	mov	arg01, local01
29414     15 15 02 F6 | 	mov	arg02, local03
29418     D8 F5 BF FD | 	call	#__system___float_div
2941c     FD 26 02 F6 | 	mov	local01, result1
29420     00 40 27 FF 
29424     00 12 06 F6 | 	mov	arg01, ##1317011456
29428     14 15 02 F6 | 	mov	arg02, local02
2942c     C0 F3 BF FD | 	call	#__system___float_mul
29430     FD 12 02 F6 | 	mov	arg01, result1
29434     00 14 06 F6 | 	mov	arg02, #0
29438     7C F8 BF FD | 	call	#__system___float_tointeger
2943c     FD 2A 02 F6 | 	mov	local03, result1
29440     00 40 27 FF 
29444     00 12 06 F6 | 	mov	arg01, ##1317011456
29448     13 15 02 F6 | 	mov	arg02, local01
2944c     A0 F3 BF FD | 	call	#__system___float_mul
29450     FD 12 02 F6 | 	mov	arg01, result1
29454     00 14 06 F6 | 	mov	arg02, #0
29458     5C F8 BF FD | 	call	#__system___float_tointeger
2945c     FD 2A 52 FD | 	qvector	local03, result1
29460     87 24 20 FF 
29464     DB 2B 06 F6 | 	mov	local03, ##1078530011
29468     19 12 62 FD | 	getqy	arg01
2946c     01 12 C6 F0 | 	sar	arg01, #1
29470     09 13 52 F6 | 	abs	arg01, arg01 wc
29474     1F 2C C6 C9 |  if_b	decod	local04, #31
29478     00 2C 06 36 |  if_ae	mov	local04, #0
2947c     6C EF BF FD | 	call	#__system___float_fromuns
29480     16 FB 61 F5 | 	xor	result1, local04
29484     FD 12 02 F6 | 	mov	arg01, result1
29488     00 40 27 FF 
2948c     00 14 06 F6 | 	mov	arg02, ##1317011456
29490     60 F5 BF FD | 	call	#__system___float_div
29494     FD 14 02 F6 | 	mov	arg02, result1
29498     15 13 02 F6 | 	mov	arg01, local03
2949c     50 F3 BF FD | 	call	#__system___float_mul
294a0                 | LR__3771
294a0     A7 F0 03 F6 | 	mov	ptra, fp
294a4     B2 00 A0 FD | 	call	#popregs_
294a8                 | __system____builtin_atan2f_ret
294a8     2D 00 64 FD | 	ret
294ac                 | 
294ac                 | __system____builtin_exp2f
294ac     04 4A 05 F6 | 	mov	COUNT_, #4
294b0     A8 00 A0 FD | 	call	#pushregs_
294b4     09 27 02 F6 | 	mov	local01, arg01
294b8     00 7F 21 FF 
294bc     00 14 06 F6 | 	mov	arg02, ##1123942400
294c0     01 16 66 F6 | 	neg	arg03, #1
294c4     5C F7 BF FD | 	call	#__system___float_cmp
294c8     00 FA 55 F2 | 	cmps	result1, #0 wc
294cc     00 C0 3F 3F 
294d0     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
294d4     DC 00 90 3D |  if_ae	jmp	#LR__3781
294d8     13 13 02 F6 | 	mov	arg01, local01
294dc     00 7F 61 FF 
294e0     00 14 06 F6 | 	mov	arg02, ##-1023541248
294e4     01 16 06 F6 | 	mov	arg03, #1
294e8     38 F7 BF FD | 	call	#__system___float_cmp
294ec     00 FA 55 F2 | 	cmps	result1, #0 wc
294f0     00 FA 05 C6 |  if_b	mov	result1, #0
294f4     BC 00 90 CD |  if_b	jmp	#LR__3781
294f8     13 13 02 F6 | 	mov	arg01, local01
294fc     00 14 06 F6 | 	mov	arg02, #0
29500     B4 F7 BF FD | 	call	#__system___float_tointeger
29504     FD 28 02 F6 | 	mov	local02, result1
29508     14 13 52 F6 | 	abs	arg01, local02 wc
2950c     1F 2A C6 C9 |  if_b	decod	local03, #31
29510     00 2A 06 36 |  if_ae	mov	local03, #0
29514     D4 EE BF FD | 	call	#__system___float_fromuns
29518     15 FB 61 F5 | 	xor	result1, local03
2951c     FD 14 02 F6 | 	mov	arg02, result1
29520     13 13 02 F6 | 	mov	arg01, local01
29524     1F 14 E6 F4 | 	bitnot	arg02, #31
29528     F4 EE BF FD | 	call	#__system___float_add
2952c     FD 2C 02 F6 | 	mov	local04, result1
29530     16 13 02 F6 | 	mov	arg01, local04
29534     00 14 06 F6 | 	mov	arg02, #0
29538     01 16 06 F6 | 	mov	arg03, #1
2953c     E4 F6 BF FD | 	call	#__system___float_cmp
29540     00 FA 55 F2 | 	cmps	result1, #0 wc
29544     18 00 90 3D |  if_ae	jmp	#LR__3780
29548     16 13 02 F6 | 	mov	arg01, local04
2954c     00 C0 1F FF 
29550     00 14 06 F6 | 	mov	arg02, ##1065353216
29554     C8 EE BF FD | 	call	#__system___float_add
29558     FD 2C 02 F6 | 	mov	local04, result1
2955c     01 28 86 F1 | 	sub	local02, #1
29560                 | LR__3780
29560     7F 28 06 F1 | 	add	local02, #127
29564     17 28 66 F0 | 	shl	local02, #23
29568     16 13 02 F6 | 	mov	arg01, local04
2956c     00 80 26 FF 
29570     00 14 06 F6 | 	mov	arg02, ##1291845632
29574     78 F2 BF FD | 	call	#__system___float_mul
29578     FD 12 02 F6 | 	mov	arg01, result1
2957c     00 14 06 F6 | 	mov	arg02, #0
29580     34 F7 BF FD | 	call	#__system___float_tointeger
29584     FD 2C 0A F6 | 	mov	local04, result1 wz
29588     14 FB 01 A6 |  if_e	mov	result1, local02
2958c     24 00 90 AD |  if_e	jmp	#LR__3781
29590     3E 2C 26 F4 | 	bith	local04, #62
29594     0F 2C 62 FD | 	qexp	local04
29598     14 13 02 F6 | 	mov	arg01, local02
2959c     18 14 62 FD | 	getqx	arg02
295a0     01 14 06 F1 | 	add	arg02, #1
295a4     01 14 46 F0 | 	shr	arg02, #1
295a8     00 80 1F FF 
295ac     00 14 06 F1 | 	add	arg02, ##1056964608
295b0     3C F2 BF FD | 	call	#__system___float_mul
295b4                 | LR__3781
295b4     A7 F0 03 F6 | 	mov	ptra, fp
295b8     B2 00 A0 FD | 	call	#popregs_
295bc                 | __system____builtin_exp2f_ret
295bc     2D 00 64 FD | 	ret
295c0                 | 
295c0                 | __system____builtin_log2f
295c0     06 4A 05 F6 | 	mov	COUNT_, #6
295c4     A8 00 A0 FD | 	call	#pushregs_
295c8     09 27 02 F6 | 	mov	local01, arg01
295cc     09 29 0A F6 | 	mov	local02, arg01 wz
295d0     00 00 40 5F 
295d4     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
295d8     00 40 00 AF 
295dc     00 FA 65 A6 |  if_e	neg	result1, ##8388608
295e0     08 01 90 AD |  if_e	jmp	#LR__3794
295e4     00 28 56 F2 | 	cmps	local02, #0 wc
295e8     00 E0 3F CF 
295ec     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
295f0     F8 00 90 CD |  if_b	jmp	#LR__3794
295f4     13 13 02 F6 | 	mov	arg01, local01
295f8     00 90 20 FF 
295fc     00 14 06 F6 | 	mov	arg02, ##1092616192
29600     01 16 06 F6 | 	mov	arg03, #1
29604     1C F6 BF FD | 	call	#__system___float_cmp
29608     00 FA 0D F2 | 	cmp	result1, #0 wz
2960c     4D 2A 20 AF 
29610     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
29614     D4 00 90 AD |  if_e	jmp	#LR__3794
29618     13 13 02 F6 | 	mov	arg01, local01
2961c     FC 16 20 FF 
29620     54 14 06 F6 | 	mov	arg02, ##1076754516
29624     01 16 06 F6 | 	mov	arg03, #1
29628     F8 F5 BF FD | 	call	#__system___float_cmp
2962c     00 FA 0D F2 | 	cmp	result1, #0 wz
29630     55 DC 1F AF 
29634     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
29638     B0 00 90 AD |  if_e	jmp	#LR__3794
2963c     14 2B 02 F6 | 	mov	local03, local02
29640     17 2A 46 F0 | 	shr	local03, #23
29644     15 2B E2 F8 | 	getbyte	local03, local03, #0
29648     17 29 06 F4 | 	bitl	local02, #279
2964c     14 2D 02 F6 | 	mov	local04, local02
29650     FF 2A 0E F2 | 	cmp	local03, #255 wz
29654     1C 00 90 5D |  if_ne	jmp	#LR__3790
29658     00 2C 0E F2 | 	cmp	local04, #0 wz
2965c     00 C0 3F 5F 
29660     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
29664     00 E0 3F AF 
29668     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2966c     17 FB 01 F6 | 	mov	result1, local05
29670     78 00 90 FD | 	jmp	#LR__3794
29674                 | LR__3790
29674     00 2A 0E F2 | 	cmp	local03, #0 wz
29678     17 2C 26 54 |  if_ne	bith	local04, #23
2967c     7F 2A 86 51 |  if_ne	sub	local03, #127
29680     28 00 90 5D |  if_ne	jmp	#LR__3793
29684     00 2C 0E F2 | 	cmp	local04, #0 wz
29688     00 40 00 AF 
2968c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
29690     58 00 90 AD |  if_e	jmp	#LR__3794
29694     7E 2A 66 F6 | 	neg	local03, #126
29698     97 08 48 FB | 	callpa	#(@LR__3792-@LR__3791)>>2,fcache_load_ptr_
2969c                 | LR__3791
2969c     17 2C 2E F4 | 	testbn	local04, #23 wz
296a0     01 2C 66 A0 |  if_e	shl	local04, #1
296a4     01 2A 06 A1 |  if_e	add	local03, #1
296a8     F0 FF 9F AD |  if_e	jmp	#LR__3791
296ac                 | LR__3792
296ac                 | LR__3793
296ac     0E 2C 62 FD | 	qlog	local04
296b0     01 2A 86 F1 | 	sub	local03, #1
296b4     15 13 52 F6 | 	abs	arg01, local03 wc
296b8     1F 30 C6 C9 |  if_b	decod	local06, #31
296bc     00 30 06 36 |  if_ae	mov	local06, #0
296c0     18 2E 62 FD | 	getqx	local05
296c4     9B 2E 06 F4 | 	bitl	local05, #155
296c8     08 2E 06 F1 | 	add	local05, #8
296cc     04 2E 46 F0 | 	shr	local05, #4
296d0     00 C0 1F FF 
296d4     00 2E 06 F1 | 	add	local05, ##1065353216
296d8     10 ED BF FD | 	call	#__system___float_fromuns
296dc     18 FB 61 F5 | 	xor	result1, local06
296e0     FD 14 02 F6 | 	mov	arg02, result1
296e4     17 13 02 F6 | 	mov	arg01, local05
296e8     34 ED BF FD | 	call	#__system___float_add
296ec                 | LR__3794
296ec     A7 F0 03 F6 | 	mov	ptra, fp
296f0     B2 00 A0 FD | 	call	#popregs_
296f4                 | __system____builtin_log2f_ret
296f4     2D 00 64 FD | 	ret
296f8                 | 
296f8                 | __system____builtin_powf
296f8     04 4A 05 F6 | 	mov	COUNT_, #4
296fc     A8 00 A0 FD | 	call	#pushregs_
29700     09 27 02 F6 | 	mov	local01, arg01
29704     0A 29 02 F6 | 	mov	local02, arg02
29708     14 13 02 F6 | 	mov	arg01, local02
2970c     00 14 06 F6 | 	mov	arg02, #0
29710     A4 F5 BF FD | 	call	#__system___float_tointeger
29714     FD 2A 02 F6 | 	mov	local03, result1
29718     15 13 52 F6 | 	abs	arg01, local03 wc
2971c     1F 2C C6 C9 |  if_b	decod	local04, #31
29720     00 2C 06 36 |  if_ae	mov	local04, #0
29724     C4 EC BF FD | 	call	#__system___float_fromuns
29728     16 FB 61 F5 | 	xor	result1, local04
2972c     FD 12 02 F6 | 	mov	arg01, result1
29730     14 15 02 F6 | 	mov	arg02, local02
29734     01 16 06 F6 | 	mov	arg03, #1
29738     E8 F4 BF FD | 	call	#__system___float_cmp
2973c     00 FA 0D F2 | 	cmp	result1, #0 wz
29740     18 00 90 5D |  if_ne	jmp	#LR__3800
29744     00 C0 1F FF 
29748     00 12 06 F6 | 	mov	arg01, ##1065353216
2974c     13 15 02 F6 | 	mov	arg02, local01
29750     15 17 02 F6 | 	mov	arg03, local03
29754     A0 00 B0 FD | 	call	#__system___float_pow_n
29758     58 00 90 FD | 	jmp	#LR__3801
2975c                 | LR__3800
2975c     13 13 02 F6 | 	mov	arg01, local01
29760     00 14 06 F6 | 	mov	arg02, #0
29764     01 16 06 F6 | 	mov	arg03, #1
29768     B8 F4 BF FD | 	call	#__system___float_cmp
2976c     00 FA 55 F2 | 	cmps	result1, #0 wc
29770     00 E0 3F CF 
29774     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
29778     38 00 90 CD |  if_b	jmp	#LR__3801
2977c     13 13 02 F6 | 	mov	arg01, local01
29780     00 14 06 F6 | 	mov	arg02, #0
29784     01 16 06 F6 | 	mov	arg03, #1
29788     98 F4 BF FD | 	call	#__system___float_cmp
2978c     00 FA 0D F2 | 	cmp	result1, #0 wz
29790     00 FA 05 A6 |  if_e	mov	result1, #0
29794     1C 00 90 AD |  if_e	jmp	#LR__3801
29798     13 13 02 F6 | 	mov	arg01, local01
2979c     20 FE BF FD | 	call	#__system____builtin_log2f
297a0     FD 12 02 F6 | 	mov	arg01, result1
297a4     14 15 02 F6 | 	mov	arg02, local02
297a8     44 F0 BF FD | 	call	#__system___float_mul
297ac     FD 12 02 F6 | 	mov	arg01, result1
297b0     F8 FC BF FD | 	call	#__system____builtin_exp2f
297b4                 | LR__3801
297b4     A7 F0 03 F6 | 	mov	ptra, fp
297b8     B2 00 A0 FD | 	call	#popregs_
297bc                 | __system____builtin_powf_ret
297bc     2D 00 64 FD | 	ret
297c0                 | 
297c0                 | __system____builtin_logbase
297c0     02 4A 05 F6 | 	mov	COUNT_, #2
297c4     A8 00 A0 FD | 	call	#pushregs_
297c8     09 27 02 F6 | 	mov	local01, arg01
297cc     0A 13 02 F6 | 	mov	arg01, arg02
297d0     EC FD BF FD | 	call	#__system____builtin_log2f
297d4     FD 28 02 F6 | 	mov	local02, result1
297d8     13 13 02 F6 | 	mov	arg01, local01
297dc     E0 FD BF FD | 	call	#__system____builtin_log2f
297e0     FD 14 02 F6 | 	mov	arg02, result1
297e4     14 13 02 F6 | 	mov	arg01, local02
297e8     08 F2 BF FD | 	call	#__system___float_div
297ec     A7 F0 03 F6 | 	mov	ptra, fp
297f0     B2 00 A0 FD | 	call	#popregs_
297f4                 | __system____builtin_logbase_ret
297f4     2D 00 64 FD | 	ret
297f8                 | 
297f8                 | __system___float_pow_n
297f8     05 4A 05 F6 | 	mov	COUNT_, #5
297fc     A8 00 A0 FD | 	call	#pushregs_
29800     09 27 02 F6 | 	mov	local01, arg01
29804     0A 29 02 F6 | 	mov	local02, arg02
29808     0B 2B 02 F6 | 	mov	local03, arg03
2980c     00 2A 56 F2 | 	cmps	local03, #0 wc
29810     18 00 90 3D |  if_ae	jmp	#LR__3810
29814     01 2C 06 F6 | 	mov	local04, #1
29818     15 2B 62 F6 | 	neg	local03, local03
2981c     00 2A 56 F2 | 	cmps	local03, #0 wc
29820     00 FA 05 C6 |  if_b	mov	result1, #0
29824     94 00 90 CD |  if_b	jmp	#LR__3818
29828     04 00 90 FD | 	jmp	#LR__3811
2982c                 | LR__3810
2982c     00 2C 06 F6 | 	mov	local04, #0
29830                 | LR__3811
29830     00 C0 1F FF 
29834     00 2E 06 F6 | 	mov	local05, ##1065353216
29838                 | LR__3812
29838     01 2A 56 F2 | 	cmps	local03, #1 wc
2983c     30 00 90 CD |  if_b	jmp	#LR__3814
29840     01 2A CE F7 | 	test	local03, #1 wz
29844     10 00 90 AD |  if_e	jmp	#LR__3813
29848     17 13 02 F6 | 	mov	arg01, local05
2984c     14 15 02 F6 | 	mov	arg02, local02
29850     9C EF BF FD | 	call	#__system___float_mul
29854     FD 2E 02 F6 | 	mov	local05, result1
29858                 | LR__3813
29858     01 2A C6 F0 | 	sar	local03, #1
2985c     14 13 02 F6 | 	mov	arg01, local02
29860     14 15 02 F6 | 	mov	arg02, local02
29864     88 EF BF FD | 	call	#__system___float_mul
29868     FD 28 02 F6 | 	mov	local02, result1
2986c     C8 FF 9F FD | 	jmp	#LR__3812
29870                 | LR__3814
29870     00 2C 0E F2 | 	cmp	local04, #0 wz
29874     14 00 90 AD |  if_e	jmp	#LR__3815
29878     13 13 02 F6 | 	mov	arg01, local01
2987c     17 15 02 F6 | 	mov	arg02, local05
29880     70 F1 BF FD | 	call	#__system___float_div
29884     FD 2E 02 F6 | 	mov	local05, result1
29888     2C 00 90 FD | 	jmp	#LR__3817
2988c                 | LR__3815
2988c     13 13 02 F6 | 	mov	arg01, local01
29890     00 C0 1F FF 
29894     00 14 06 F6 | 	mov	arg02, ##1065353216
29898     01 16 06 F6 | 	mov	arg03, #1
2989c     84 F3 BF FD | 	call	#__system___float_cmp
298a0     00 FA 0D F2 | 	cmp	result1, #0 wz
298a4     10 00 90 AD |  if_e	jmp	#LR__3816
298a8     13 13 02 F6 | 	mov	arg01, local01
298ac     17 15 02 F6 | 	mov	arg02, local05
298b0     3C EF BF FD | 	call	#__system___float_mul
298b4     FD 2E 02 F6 | 	mov	local05, result1
298b8                 | LR__3816
298b8                 | LR__3817
298b8     17 FB 01 F6 | 	mov	result1, local05
298bc                 | LR__3818
298bc     A7 F0 03 F6 | 	mov	ptra, fp
298c0     B2 00 A0 FD | 	call	#popregs_
298c4                 | __system___float_pow_n_ret
298c4     2D 00 64 FD | 	ret
298c8                 | 
298c8                 | __system___gc_ptrs
298c8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
298cc     00 03 02 F6 | 	mov	_var02, _var01
298d0     BB 00 00 FF 
298d4     F8 02 06 F1 | 	add	_var02, ##95992
298d8     00 FD 09 FB | 	rdlong	result2, _var01 wz
298dc     74 00 90 5D |  if_ne	jmp	#LR__3820
298e0     01 FD 01 F6 | 	mov	result2, _var02
298e4     00 FD 81 F1 | 	sub	result2, _var01
298e8     00 03 58 FC | 	wrword	#1, _var01
298ec     00 FB 01 F6 | 	mov	result1, _var01
298f0     02 FA 05 F1 | 	add	result1, #2
298f4     36 00 80 FF 
298f8     FD 20 59 FC | 	wrword	##27792, result1
298fc     00 FB 01 F6 | 	mov	result1, _var01
29900     04 FA 05 F1 | 	add	result1, #4
29904     FD 00 58 FC | 	wrword	#0, result1
29908     00 FB 01 F6 | 	mov	result1, _var01
2990c     06 FA 05 F1 | 	add	result1, #6
29910     FD 02 58 FC | 	wrword	#1, result1
29914     10 00 06 F1 | 	add	_var01, #16
29918     FE FC 51 F6 | 	abs	result2, result2 wc
2991c     04 FC 45 F0 | 	shr	result2, #4
29920     FE FC 81 F6 | 	negc	result2, result2
29924     00 FD 51 FC | 	wrword	result2, _var01
29928     00 FD 01 F6 | 	mov	result2, _var01
2992c     02 FC 05 F1 | 	add	result2, #2
29930     36 00 80 FF 
29934     FE 1E 59 FC | 	wrword	##27791, result2
29938     00 FD 01 F6 | 	mov	result2, _var01
2993c     04 FC 05 F1 | 	add	result2, #4
29940     FE 00 58 FC | 	wrword	#0, result2
29944     00 FD 01 F6 | 	mov	result2, _var01
29948     06 FC 05 F1 | 	add	result2, #6
2994c     FE 00 58 FC | 	wrword	#0, result2
29950     10 00 86 F1 | 	sub	_var01, #16
29954                 | LR__3820
29954     00 FB 01 F6 | 	mov	result1, _var01
29958     01 FD 01 F6 | 	mov	result2, _var02
2995c                 | __system___gc_ptrs_ret
2995c     2D 00 64 FD | 	ret
29960                 | 
29960                 | __system___gc_tryalloc
29960     0B 4A 05 F6 | 	mov	COUNT_, #11
29964     A8 00 A0 FD | 	call	#pushregs_
29968     09 27 02 F6 | 	mov	local01, arg01
2996c     0A 29 02 F6 | 	mov	local02, arg02
29970     54 FF BF FD | 	call	#__system___gc_ptrs
29974     FD 2A 02 F6 | 	mov	local03, result1
29978     FE 2C 02 F6 | 	mov	local04, result2
2997c     15 2F 02 F6 | 	mov	local05, local03
29980     00 30 06 F6 | 	mov	local06, #0
29984     97 1E 48 FB | 	callpa	#(@LR__3831-@LR__3830)>>2,fcache_load_ptr_
29988                 | LR__3830
29988     17 33 02 F6 | 	mov	local07, local05
2998c     06 2E 06 F1 | 	add	local05, #6
29990     17 15 EA FA | 	rdword	arg02, local05 wz
29994     15 13 02 F6 | 	mov	arg01, local03
29998     00 FA 05 A6 |  if_e	mov	result1, #0
2999c     04 14 66 50 |  if_ne	shl	arg02, #4
299a0     0A 13 02 51 |  if_ne	add	arg01, arg02
299a4     09 FB 01 56 |  if_ne	mov	result1, arg01
299a8     FD 2E 0A F6 | 	mov	local05, result1 wz
299ac     17 31 E2 5A |  if_ne	rdword	local06, local05
299b0     00 2E 0E F2 | 	cmp	local05, #0 wz
299b4     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
299b8     08 00 90 1D |  if_a	jmp	#LR__3832
299bc     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
299c0     C4 FF 9F 1D |  if_a	jmp	#LR__3830
299c4                 | LR__3831
299c4                 | LR__3832
299c4     00 2E 0E F2 | 	cmp	local05, #0 wz
299c8     17 FB 01 A6 |  if_e	mov	result1, local05
299cc     3C 01 90 AD |  if_e	jmp	#LR__3835
299d0     17 FD 01 F6 | 	mov	result2, local05
299d4     06 FC 05 F1 | 	add	result2, #6
299d8     FE 34 E2 FA | 	rdword	local08, result2
299dc     18 27 52 F2 | 	cmps	local01, local06 wc
299e0     C0 00 90 3D |  if_ae	jmp	#LR__3834
299e4     17 27 52 FC | 	wrword	local01, local05
299e8     17 13 02 F6 | 	mov	arg01, local05
299ec     13 35 02 F6 | 	mov	local08, local01
299f0     04 34 66 F0 | 	shl	local08, #4
299f4     1A 13 02 F1 | 	add	arg01, local08
299f8     13 31 82 F1 | 	sub	local06, local01
299fc     09 31 52 FC | 	wrword	local06, arg01
29a00     09 35 02 F6 | 	mov	local08, arg01
29a04     02 34 06 F1 | 	add	local08, #2
29a08     36 00 80 FF 
29a0c     1A 1F 59 FC | 	wrword	##27791, local08
29a10     17 15 0A F6 | 	mov	arg02, local05 wz
29a14     00 FA 05 A6 |  if_e	mov	result1, #0
29a18     15 15 82 51 |  if_ne	sub	arg02, local03
29a1c     04 14 46 50 |  if_ne	shr	arg02, #4
29a20     0A FB 01 56 |  if_ne	mov	result1, arg02
29a24     09 35 02 F6 | 	mov	local08, arg01
29a28     04 34 06 F1 | 	add	local08, #4
29a2c     1A FB 51 FC | 	wrword	result1, local08
29a30     17 35 02 F6 | 	mov	local08, local05
29a34     06 34 06 F1 | 	add	local08, #6
29a38     09 15 02 F6 | 	mov	arg02, arg01
29a3c     1A 35 E2 FA | 	rdword	local08, local08
29a40     06 14 06 F1 | 	add	arg02, #6
29a44     0A 35 52 FC | 	wrword	local08, arg02
29a48     09 37 02 F6 | 	mov	local09, arg01
29a4c     1B 15 0A F6 | 	mov	arg02, local09 wz
29a50     00 FA 05 A6 |  if_e	mov	result1, #0
29a54     15 15 82 51 |  if_ne	sub	arg02, local03
29a58     04 14 46 50 |  if_ne	shr	arg02, #4
29a5c     0A FB 01 56 |  if_ne	mov	result1, arg02
29a60     FD 34 02 F6 | 	mov	local08, result1
29a64     09 39 EA FA | 	rdword	local10, arg01 wz
29a68     00 FA 05 A6 |  if_e	mov	result1, #0
29a6c     04 38 66 50 |  if_ne	shl	local10, #4
29a70     1C 13 02 51 |  if_ne	add	arg01, local10
29a74     09 FB 01 56 |  if_ne	mov	result1, arg01
29a78     FD 3A 0A F6 | 	mov	local11, result1 wz
29a7c     24 00 90 AD |  if_e	jmp	#LR__3833
29a80     16 3B 52 F2 | 	cmps	local11, local04 wc
29a84     1C 00 90 3D |  if_ae	jmp	#LR__3833
29a88     1B 15 0A F6 | 	mov	arg02, local09 wz
29a8c     00 FA 05 A6 |  if_e	mov	result1, #0
29a90     15 15 82 51 |  if_ne	sub	arg02, local03
29a94     04 14 46 50 |  if_ne	shr	arg02, #4
29a98     0A FB 01 56 |  if_ne	mov	result1, arg02
29a9c     04 3A 06 F1 | 	add	local11, #4
29aa0     1D FB 51 FC | 	wrword	result1, local11
29aa4                 | LR__3833
29aa4                 | LR__3834
29aa4     06 32 06 F1 | 	add	local07, #6
29aa8     19 35 52 FC | 	wrword	local08, local07
29aac     36 00 00 FF 
29ab0     80 36 06 F6 | 	mov	local09, ##27776
29ab4     14 37 42 F5 | 	or	local09, local02
29ab8     00 FA 05 F6 | 	mov	result1, #0
29abc     01 FA 61 FD | 	cogid	result1
29ac0     FD 36 42 F5 | 	or	local09, result1
29ac4     17 3B 02 F6 | 	mov	local11, local05
29ac8     02 3A 06 F1 | 	add	local11, #2
29acc     1D 37 52 FC | 	wrword	local09, local11
29ad0     15 37 02 F6 | 	mov	local09, local03
29ad4     08 36 06 F1 | 	add	local09, #8
29ad8     17 3B 02 F6 | 	mov	local11, local05
29adc     1B 37 E2 FA | 	rdword	local09, local09
29ae0     06 3A 06 F1 | 	add	local11, #6
29ae4     1D 37 52 FC | 	wrword	local09, local11
29ae8     17 15 0A F6 | 	mov	arg02, local05 wz
29aec     00 FA 05 A6 |  if_e	mov	result1, #0
29af0     15 15 82 51 |  if_ne	sub	arg02, local03
29af4     04 14 46 50 |  if_ne	shr	arg02, #4
29af8     0A FB 01 56 |  if_ne	mov	result1, arg02
29afc     08 2A 06 F1 | 	add	local03, #8
29b00     15 FB 51 FC | 	wrword	result1, local03
29b04     08 2E 06 F1 | 	add	local05, #8
29b08     17 FB 01 F6 | 	mov	result1, local05
29b0c                 | LR__3835
29b0c     A7 F0 03 F6 | 	mov	ptra, fp
29b10     B2 00 A0 FD | 	call	#popregs_
29b14                 | __system___gc_tryalloc_ret
29b14     2D 00 64 FD | 	ret
29b18                 | 
29b18                 | __system___gc_alloc_managed
29b18     01 4A 05 F6 | 	mov	COUNT_, #1
29b1c     A8 00 A0 FD | 	call	#pushregs_
29b20     09 27 02 F6 | 	mov	local01, arg01
29b24     00 14 06 F6 | 	mov	arg02, #0
29b28     1C 00 B0 FD | 	call	#__system___gc_doalloc
29b2c     FD 14 0A F6 | 	mov	arg02, result1 wz
29b30     01 26 56 A2 |  if_e	cmps	local01, #1 wc
29b34     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
29b38     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
29b3c     A7 F0 03 F6 | 	mov	ptra, fp
29b40     B2 00 A0 FD | 	call	#popregs_
29b44                 | __system___gc_alloc_managed_ret
29b44     2D 00 64 FD | 	ret
29b48                 | 
29b48                 | __system___gc_doalloc
29b48     06 4A 05 F6 | 	mov	COUNT_, #6
29b4c     A8 00 A0 FD | 	call	#pushregs_
29b50     09 27 0A F6 | 	mov	local01, arg01 wz
29b54     0A 29 02 F6 | 	mov	local02, arg02
29b58     00 FA 05 A6 |  if_e	mov	result1, #0
29b5c     8C 00 90 AD |  if_e	jmp	#LR__3847
29b60     17 26 06 F1 | 	add	local01, #23
29b64     0F 26 26 F5 | 	andn	local01, #15
29b68     04 26 46 F0 | 	shr	local01, #4
29b6c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29b70     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29b74     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29b78     FC BD BF FD | 	call	#__system___lockmem
29b7c     13 13 02 F6 | 	mov	arg01, local01
29b80     14 15 02 F6 | 	mov	arg02, local02
29b84     D8 FD BF FD | 	call	#__system___gc_tryalloc
29b88     FD 2A 0A F6 | 	mov	local03, result1 wz
29b8c     14 00 90 5D |  if_ne	jmp	#LR__3840
29b90     70 03 B0 FD | 	call	#__system___gc_docollect
29b94     13 13 02 F6 | 	mov	arg01, local01
29b98     14 15 02 F6 | 	mov	arg02, local02
29b9c     C0 FD BF FD | 	call	#__system___gc_tryalloc
29ba0     FD 2A 02 F6 | 	mov	local03, result1
29ba4                 | LR__3840
29ba4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29ba8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29bac     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29bb0     09 01 68 FC | 	wrlong	#0, arg01
29bb4     00 2A 0E F2 | 	cmp	local03, #0 wz
29bb8     2C 00 90 AD |  if_e	jmp	#LR__3846
29bbc     04 26 66 F0 | 	shl	local01, #4
29bc0     08 26 86 F1 | 	sub	local01, #8
29bc4     13 2D 52 F6 | 	abs	local04, local01 wc
29bc8     02 2C 46 F0 | 	shr	local04, #2
29bcc     16 2F 8A F6 | 	negc	local05, local04 wz
29bd0     15 31 02 F6 | 	mov	local06, local03
29bd4     10 00 90 AD |  if_e	jmp	#LR__3845
29bd8     97 06 48 FB | 	callpa	#(@LR__3843-@LR__3841)>>2,fcache_load_ptr_
29bdc                 | LR__3841
29bdc     17 05 D8 FC | 	rep	@LR__3844, local05
29be0                 | LR__3842
29be0     18 01 68 FC | 	wrlong	#0, local06
29be4     04 30 06 F1 | 	add	local06, #4
29be8                 | LR__3843
29be8                 | LR__3844
29be8                 | LR__3845
29be8                 | LR__3846
29be8     15 FB 01 F6 | 	mov	result1, local03
29bec                 | LR__3847
29bec     A7 F0 03 F6 | 	mov	ptra, fp
29bf0     B2 00 A0 FD | 	call	#popregs_
29bf4                 | __system___gc_doalloc_ret
29bf4     2D 00 64 FD | 	ret
29bf8                 | 
29bf8                 | __system___gc_isvalidptr
29bf8     F8 16 06 F4 | 	bitl	arg03, #248
29bfc     08 16 86 F1 | 	sub	arg03, #8
29c00     09 17 52 F2 | 	cmps	arg03, arg01 wc
29c04     08 00 90 CD |  if_b	jmp	#LR__3850
29c08     0A 17 52 F2 | 	cmps	arg03, arg02 wc
29c0c     08 00 90 CD |  if_b	jmp	#LR__3851
29c10                 | LR__3850
29c10     00 FA 05 F6 | 	mov	result1, #0
29c14     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
29c18                 | LR__3851
29c18     0B 01 02 F6 | 	mov	_var01, arg03
29c1c     09 01 62 F5 | 	xor	_var01, arg01
29c20     0F 00 CE F7 | 	test	_var01, #15 wz
29c24     00 FA 05 56 |  if_ne	mov	result1, #0
29c28     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
29c2c     0B 01 02 F6 | 	mov	_var01, arg03
29c30     02 00 06 F1 | 	add	_var01, #2
29c34     00 01 E2 FA | 	rdword	_var01, _var01
29c38     7F 00 00 FF 
29c3c     C0 01 06 F5 | 	and	_var01, ##65472
29c40     36 00 00 FF 
29c44     80 00 0E F2 | 	cmp	_var01, ##27776 wz
29c48     00 FA 05 56 |  if_ne	mov	result1, #0
29c4c     0B FB 01 A6 |  if_e	mov	result1, arg03
29c50                 | __system___gc_isvalidptr_ret
29c50     2D 00 64 FD | 	ret
29c54                 | 
29c54                 | __system___gc_free
29c54     09 17 02 F6 | 	mov	arg03, arg01
29c58     6C FC BF FD | 	call	#__system___gc_ptrs
29c5c     FD 12 02 F6 | 	mov	arg01, result1
29c60     FE 14 02 F6 | 	mov	arg02, result2
29c64     90 FF BF FD | 	call	#__system___gc_isvalidptr
29c68     FD 14 0A F6 | 	mov	arg02, result1 wz
29c6c     28 00 90 AD |  if_e	jmp	#LR__3860
29c70     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29c74     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29c78     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29c7c     F8 BC BF FD | 	call	#__system___lockmem
29c80     0A 13 02 F6 | 	mov	arg01, arg02
29c84     14 00 B0 FD | 	call	#__system___gc_dofree
29c88     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29c8c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29c90     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29c94     09 01 68 FC | 	wrlong	#0, arg01
29c98                 | LR__3860
29c98                 | __system___gc_free_ret
29c98     2D 00 64 FD | 	ret
29c9c                 | 
29c9c                 | __system___gc_dofree
29c9c     06 4A 05 F6 | 	mov	COUNT_, #6
29ca0     A8 00 A0 FD | 	call	#pushregs_
29ca4     09 27 02 F6 | 	mov	local01, arg01
29ca8     1C FC BF FD | 	call	#__system___gc_ptrs
29cac     FD 28 02 F6 | 	mov	local02, result1
29cb0     FE 2A 02 F6 | 	mov	local03, result2
29cb4     13 15 02 F6 | 	mov	arg02, local01
29cb8     02 14 06 F1 | 	add	arg02, #2
29cbc     36 00 80 FF 
29cc0     0A 1F 59 FC | 	wrword	##27791, arg02
29cc4     13 2D 02 F6 | 	mov	local04, local01
29cc8     13 13 02 F6 | 	mov	arg01, local01
29ccc     09 2F EA FA | 	rdword	local05, arg01 wz
29cd0     00 FA 05 A6 |  if_e	mov	result1, #0
29cd4     04 2E 66 50 |  if_ne	shl	local05, #4
29cd8     17 13 02 51 |  if_ne	add	arg01, local05
29cdc     09 FB 01 56 |  if_ne	mov	result1, arg01
29ce0     FD 30 02 F6 | 	mov	local06, result1
29ce4     97 24 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
29ce8                 | LR__3870
29ce8     04 2C 06 F1 | 	add	local04, #4
29cec     16 15 EA FA | 	rdword	arg02, local04 wz
29cf0     14 13 02 F6 | 	mov	arg01, local02
29cf4     00 FA 05 A6 |  if_e	mov	result1, #0
29cf8     04 14 66 50 |  if_ne	shl	arg02, #4
29cfc     0A 13 02 51 |  if_ne	add	arg01, arg02
29d00     09 FB 01 56 |  if_ne	mov	result1, arg01
29d04     FD 2C 0A F6 | 	mov	local04, result1 wz
29d08     24 00 90 AD |  if_e	jmp	#LR__3872
29d0c     16 13 02 F6 | 	mov	arg01, local04
29d10     00 FA 05 F6 | 	mov	result1, #0
29d14     02 12 06 F1 | 	add	arg01, #2
29d18     09 13 E2 FA | 	rdword	arg01, arg01
29d1c     36 00 00 FF 
29d20     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
29d24     01 FA 65 A6 |  if_e	neg	result1, #1
29d28     00 FA 0D F2 | 	cmp	result1, #0 wz
29d2c     B8 FF 9F AD |  if_e	jmp	#LR__3870
29d30                 | LR__3871
29d30                 | LR__3872
29d30     00 2C 0E F2 | 	cmp	local04, #0 wz
29d34     14 2D 02 A6 |  if_e	mov	local04, local02
29d38     16 15 02 F6 | 	mov	arg02, local04
29d3c     06 14 06 F1 | 	add	arg02, #6
29d40     13 13 02 F6 | 	mov	arg01, local01
29d44     0A 15 E2 FA | 	rdword	arg02, arg02
29d48     06 12 06 F1 | 	add	arg01, #6
29d4c     09 15 52 FC | 	wrword	arg02, arg01
29d50     13 15 0A F6 | 	mov	arg02, local01 wz
29d54     00 FA 05 A6 |  if_e	mov	result1, #0
29d58     14 15 82 51 |  if_ne	sub	arg02, local02
29d5c     04 14 46 50 |  if_ne	shr	arg02, #4
29d60     0A FB 01 56 |  if_ne	mov	result1, arg02
29d64     16 15 02 F6 | 	mov	arg02, local04
29d68     06 14 06 F1 | 	add	arg02, #6
29d6c     0A FB 51 FC | 	wrword	result1, arg02
29d70     14 2D 0A F2 | 	cmp	local04, local02 wz
29d74     A4 00 90 AD |  if_e	jmp	#LR__3875
29d78     16 13 02 F6 | 	mov	arg01, local04
29d7c     09 2F EA FA | 	rdword	local05, arg01 wz
29d80     00 FA 05 A6 |  if_e	mov	result1, #0
29d84     04 2E 66 50 |  if_ne	shl	local05, #4
29d88     17 13 02 51 |  if_ne	add	arg01, local05
29d8c     09 FB 01 56 |  if_ne	mov	result1, arg01
29d90     13 FB 09 F2 | 	cmp	result1, local01 wz
29d94     84 00 90 5D |  if_ne	jmp	#LR__3874
29d98     16 31 E2 FA | 	rdword	local06, local04
29d9c     13 15 E2 FA | 	rdword	arg02, local01
29da0     0A 31 02 F1 | 	add	local06, arg02
29da4     16 31 52 FC | 	wrword	local06, local04
29da8     13 31 02 F6 | 	mov	local06, local01
29dac     02 30 06 F1 | 	add	local06, #2
29db0     18 01 58 FC | 	wrword	#0, local06
29db4     13 13 02 F6 | 	mov	arg01, local01
29db8     09 2F EA FA | 	rdword	local05, arg01 wz
29dbc     00 FA 05 A6 |  if_e	mov	result1, #0
29dc0     04 2E 66 50 |  if_ne	shl	local05, #4
29dc4     17 13 02 51 |  if_ne	add	arg01, local05
29dc8     09 FB 01 56 |  if_ne	mov	result1, arg01
29dcc     FD 30 02 F6 | 	mov	local06, result1
29dd0     15 31 52 F2 | 	cmps	local06, local03 wc
29dd4     20 00 90 3D |  if_ae	jmp	#LR__3873
29dd8     16 15 0A F6 | 	mov	arg02, local04 wz
29ddc     00 FA 05 A6 |  if_e	mov	result1, #0
29de0     14 15 82 51 |  if_ne	sub	arg02, local02
29de4     04 14 46 50 |  if_ne	shr	arg02, #4
29de8     0A FB 01 56 |  if_ne	mov	result1, arg02
29dec     18 15 02 F6 | 	mov	arg02, local06
29df0     04 14 06 F1 | 	add	arg02, #4
29df4     0A FB 51 FC | 	wrword	result1, arg02
29df8                 | LR__3873
29df8     13 15 02 F6 | 	mov	arg02, local01
29dfc     06 14 06 F1 | 	add	arg02, #6
29e00     16 FD 01 F6 | 	mov	result2, local04
29e04     0A 15 E2 FA | 	rdword	arg02, arg02
29e08     06 FC 05 F1 | 	add	result2, #6
29e0c     FE 14 52 FC | 	wrword	arg02, result2
29e10     06 26 06 F1 | 	add	local01, #6
29e14     13 01 58 FC | 	wrword	#0, local01
29e18     16 27 02 F6 | 	mov	local01, local04
29e1c                 | LR__3874
29e1c                 | LR__3875
29e1c     13 13 02 F6 | 	mov	arg01, local01
29e20     09 2F EA FA | 	rdword	local05, arg01 wz
29e24     00 FA 05 A6 |  if_e	mov	result1, #0
29e28     04 2E 66 50 |  if_ne	shl	local05, #4
29e2c     17 13 02 51 |  if_ne	add	arg01, local05
29e30     09 FB 01 56 |  if_ne	mov	result1, arg01
29e34     FD 14 0A F6 | 	mov	arg02, result1 wz
29e38     B8 00 90 AD |  if_e	jmp	#LR__3877
29e3c     15 15 52 F2 | 	cmps	arg02, local03 wc
29e40     B0 00 90 3D |  if_ae	jmp	#LR__3877
29e44     0A 13 02 F6 | 	mov	arg01, arg02
29e48     00 FA 05 F6 | 	mov	result1, #0
29e4c     02 12 06 F1 | 	add	arg01, #2
29e50     09 13 E2 FA | 	rdword	arg01, arg01
29e54     36 00 00 FF 
29e58     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
29e5c     01 FA 65 A6 |  if_e	neg	result1, #1
29e60     00 FA 0D F2 | 	cmp	result1, #0 wz
29e64     8C 00 90 AD |  if_e	jmp	#LR__3877
29e68     13 2D 02 F6 | 	mov	local04, local01
29e6c     16 31 E2 FA | 	rdword	local06, local04
29e70     0A 13 02 F6 | 	mov	arg01, arg02
29e74     09 27 E2 FA | 	rdword	local01, arg01
29e78     13 31 02 F1 | 	add	local06, local01
29e7c     16 31 52 FC | 	wrword	local06, local04
29e80     09 31 02 F6 | 	mov	local06, arg01
29e84     06 30 06 F1 | 	add	local06, #6
29e88     16 27 02 F6 | 	mov	local01, local04
29e8c     18 31 E2 FA | 	rdword	local06, local06
29e90     06 26 06 F1 | 	add	local01, #6
29e94     13 31 52 FC | 	wrword	local06, local01
29e98     09 31 02 F6 | 	mov	local06, arg01
29e9c     02 30 06 F1 | 	add	local06, #2
29ea0     18 55 59 FC | 	wrword	#170, local06
29ea4     09 31 02 F6 | 	mov	local06, arg01
29ea8     06 30 06 F1 | 	add	local06, #6
29eac     18 01 58 FC | 	wrword	#0, local06
29eb0     09 2F EA FA | 	rdword	local05, arg01 wz
29eb4     00 FA 05 A6 |  if_e	mov	result1, #0
29eb8     04 2E 66 50 |  if_ne	shl	local05, #4
29ebc     17 13 02 51 |  if_ne	add	arg01, local05
29ec0     09 FB 01 56 |  if_ne	mov	result1, arg01
29ec4     FD 30 0A F6 | 	mov	local06, result1 wz
29ec8     28 00 90 AD |  if_e	jmp	#LR__3876
29ecc     15 31 52 F2 | 	cmps	local06, local03 wc
29ed0     20 00 90 3D |  if_ae	jmp	#LR__3876
29ed4     16 15 0A F6 | 	mov	arg02, local04 wz
29ed8     00 FA 05 A6 |  if_e	mov	result1, #0
29edc     14 15 82 51 |  if_ne	sub	arg02, local02
29ee0     04 14 46 50 |  if_ne	shr	arg02, #4
29ee4     0A FB 01 56 |  if_ne	mov	result1, arg02
29ee8     18 2D 02 F6 | 	mov	local04, local06
29eec     04 2C 06 F1 | 	add	local04, #4
29ef0     16 FB 51 FC | 	wrword	result1, local04
29ef4                 | LR__3876
29ef4                 | LR__3877
29ef4     18 FB 01 F6 | 	mov	result1, local06
29ef8     A7 F0 03 F6 | 	mov	ptra, fp
29efc     B2 00 A0 FD | 	call	#popregs_
29f00                 | __system___gc_dofree_ret
29f00     2D 00 64 FD | 	ret
29f04                 | 
29f04                 | __system___gc_docollect
29f04     05 4A 05 F6 | 	mov	COUNT_, #5
29f08     A8 00 A0 FD | 	call	#pushregs_
29f0c     B8 F9 BF FD | 	call	#__system___gc_ptrs
29f10     FE 26 02 F6 | 	mov	local01, result2
29f14     FD 28 02 F6 | 	mov	local02, result1
29f18     14 13 02 F6 | 	mov	arg01, local02
29f1c     09 2B EA FA | 	rdword	local03, arg01 wz
29f20     00 FA 05 A6 |  if_e	mov	result1, #0
29f24     04 2A 66 50 |  if_ne	shl	local03, #4
29f28     15 13 02 51 |  if_ne	add	arg01, local03
29f2c     09 FB 01 56 |  if_ne	mov	result1, arg01
29f30     FD 2C 0A F6 | 	mov	local04, result1 wz
29f34     00 FA 05 F6 | 	mov	result1, #0
29f38     01 FA 61 FD | 	cogid	result1
29f3c     FD 2E 02 F6 | 	mov	local05, result1
29f40     48 00 90 AD |  if_e	jmp	#LR__3882
29f44     97 22 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
29f48                 | LR__3880
29f48     13 2D 52 F2 | 	cmps	local04, local01 wc
29f4c     3C 00 90 3D |  if_ae	jmp	#LR__3882
29f50     16 15 02 F6 | 	mov	arg02, local04
29f54     02 14 06 F1 | 	add	arg02, #2
29f58     0A 15 E2 FA | 	rdword	arg02, arg02
29f5c     20 14 26 F5 | 	andn	arg02, #32
29f60     16 13 02 F6 | 	mov	arg01, local04
29f64     02 12 06 F1 | 	add	arg01, #2
29f68     09 15 52 FC | 	wrword	arg02, arg01
29f6c     16 13 02 F6 | 	mov	arg01, local04
29f70     09 2B EA FA | 	rdword	local03, arg01 wz
29f74     00 FA 05 A6 |  if_e	mov	result1, #0
29f78     04 2A 66 50 |  if_ne	shl	local03, #4
29f7c     15 13 02 51 |  if_ne	add	arg01, local03
29f80     09 FB 01 56 |  if_ne	mov	result1, arg01
29f84     FD 2C 0A F6 | 	mov	local04, result1 wz
29f88     BC FF 9F 5D |  if_ne	jmp	#LR__3880
29f8c                 | LR__3881
29f8c                 | LR__3882
29f8c     00 2A 06 F6 | 	mov	local03, #0
29f90     00 12 06 F6 | 	mov	arg01, #0
29f94     B8 B9 BF FD | 	call	#__system____topofstack
29f98     FD 14 02 F6 | 	mov	arg02, result1
29f9c     15 13 02 F6 | 	mov	arg01, local03
29fa0     90 00 B0 FD | 	call	#__system___gc_markhub
29fa4     1C 01 B0 FD | 	call	#__system___gc_markcog
29fa8     14 13 02 F6 | 	mov	arg01, local02
29fac     09 2B EA FA | 	rdword	local03, arg01 wz
29fb0     00 FA 05 A6 |  if_e	mov	result1, #0
29fb4     04 2A 66 50 |  if_ne	shl	local03, #4
29fb8     15 13 02 51 |  if_ne	add	arg01, local03
29fbc     09 FB 01 56 |  if_ne	mov	result1, arg01
29fc0     FD 28 0A F6 | 	mov	local02, result1 wz
29fc4     60 00 90 AD |  if_e	jmp	#LR__3886
29fc8                 | LR__3883
29fc8     14 2D 02 F6 | 	mov	local04, local02
29fcc     16 13 02 F6 | 	mov	arg01, local04
29fd0     09 2B EA FA | 	rdword	local03, arg01 wz
29fd4     00 FA 05 A6 |  if_e	mov	result1, #0
29fd8     04 2A 66 50 |  if_ne	shl	local03, #4
29fdc     15 13 02 51 |  if_ne	add	arg01, local03
29fe0     09 FB 01 56 |  if_ne	mov	result1, arg01
29fe4     FD 28 02 F6 | 	mov	local02, result1
29fe8     16 15 02 F6 | 	mov	arg02, local04
29fec     02 14 06 F1 | 	add	arg02, #2
29ff0     0A 15 E2 FA | 	rdword	arg02, arg02
29ff4     20 14 CE F7 | 	test	arg02, #32 wz
29ff8     10 14 CE A7 |  if_e	test	arg02, #16 wz
29ffc     1C 00 90 5D |  if_ne	jmp	#LR__3885
2a000     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2a004     17 15 0A F2 | 	cmp	arg02, local05 wz
2a008     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2a00c     0C 00 90 5D |  if_ne	jmp	#LR__3884
2a010     16 13 02 F6 | 	mov	arg01, local04
2a014     84 FC BF FD | 	call	#__system___gc_dofree
2a018     FD 28 02 F6 | 	mov	local02, result1
2a01c                 | LR__3884
2a01c                 | LR__3885
2a01c     00 28 0E F2 | 	cmp	local02, #0 wz
2a020     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2a024     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3883
2a028                 | LR__3886
2a028     A7 F0 03 F6 | 	mov	ptra, fp
2a02c     B2 00 A0 FD | 	call	#popregs_
2a030                 | __system___gc_docollect_ret
2a030     2D 00 64 FD | 	ret
2a034                 | 
2a034                 | __system___gc_markhub
2a034     04 4A 05 F6 | 	mov	COUNT_, #4
2a038     A8 00 A0 FD | 	call	#pushregs_
2a03c     09 27 02 F6 | 	mov	local01, arg01
2a040     0A 29 02 F6 | 	mov	local02, arg02
2a044     80 F8 BF FD | 	call	#__system___gc_ptrs
2a048     FD 2A 02 F6 | 	mov	local03, result1
2a04c     FE 2C 02 F6 | 	mov	local04, result2
2a050                 | LR__3890
2a050     14 27 52 F2 | 	cmps	local01, local02 wc
2a054     60 00 90 3D |  if_ae	jmp	#LR__3891
2a058     13 17 02 FB | 	rdlong	arg03, local01
2a05c     04 26 06 F1 | 	add	local01, #4
2a060     16 15 02 F6 | 	mov	arg02, local04
2a064     15 13 02 F6 | 	mov	arg01, local03
2a068     8C FB BF FD | 	call	#__system___gc_isvalidptr
2a06c     FD 16 0A F6 | 	mov	arg03, result1 wz
2a070     DC FF 9F AD |  if_e	jmp	#LR__3890
2a074     0B 13 02 F6 | 	mov	arg01, arg03
2a078     00 FA 05 F6 | 	mov	result1, #0
2a07c     02 12 06 F1 | 	add	arg01, #2
2a080     09 13 E2 FA | 	rdword	arg01, arg01
2a084     36 00 00 FF 
2a088     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2a08c     01 FA 65 A6 |  if_e	neg	result1, #1
2a090     00 FA 0D F2 | 	cmp	result1, #0 wz
2a094     B8 FF 9F 5D |  if_ne	jmp	#LR__3890
2a098     0B FD 01 F6 | 	mov	result2, arg03
2a09c     02 FC 05 F1 | 	add	result2, #2
2a0a0     FE FC E1 FA | 	rdword	result2, result2
2a0a4     0F FC 25 F5 | 	andn	result2, #15
2a0a8     2E FC 45 F5 | 	or	result2, #46
2a0ac     02 16 06 F1 | 	add	arg03, #2
2a0b0     0B FD 51 FC | 	wrword	result2, arg03
2a0b4     98 FF 9F FD | 	jmp	#LR__3890
2a0b8                 | LR__3891
2a0b8     A7 F0 03 F6 | 	mov	ptra, fp
2a0bc     B2 00 A0 FD | 	call	#popregs_
2a0c0                 | __system___gc_markhub_ret
2a0c0     2D 00 64 FD | 	ret
2a0c4                 | 
2a0c4                 | __system___gc_markcog
2a0c4     04 4A 05 F6 | 	mov	COUNT_, #4
2a0c8     A8 00 A0 FD | 	call	#pushregs_
2a0cc     F8 F7 BF FD | 	call	#__system___gc_ptrs
2a0d0     FD 26 02 F6 | 	mov	local01, result1
2a0d4     FE 28 02 F6 | 	mov	local02, result2
2a0d8     EF 2B 06 F6 | 	mov	local03, #495
2a0dc                 | LR__3900
2a0dc                 | 	'.live	local03
2a0dc     00 2A 96 F9 | 	alts	local03, #0
2a0e0     15 2D 02 F6 | 	mov	local04, local03
2a0e4     13 13 02 F6 | 	mov	arg01, local01
2a0e8     14 15 02 F6 | 	mov	arg02, local02
2a0ec     16 17 02 F6 | 	mov	arg03, local04
2a0f0     04 FB BF FD | 	call	#__system___gc_isvalidptr
2a0f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0f8     18 00 90 AD |  if_e	jmp	#LR__3901
2a0fc     FD 2C 02 F6 | 	mov	local04, result1
2a100     02 2C 06 F1 | 	add	local04, #2
2a104     16 2D E2 FA | 	rdword	local04, local04
2a108     20 2C 46 F5 | 	or	local04, #32
2a10c     02 FA 05 F1 | 	add	result1, #2
2a110     FD 2C 52 FC | 	wrword	local04, result1
2a114                 | LR__3901
2a114     01 2A 86 F1 | 	sub	local03, #1
2a118     00 2A 56 F2 | 	cmps	local03, #0 wc
2a11c     BC FF 9F 3D |  if_ae	jmp	#LR__3900
2a120     A7 F0 03 F6 | 	mov	ptra, fp
2a124     B2 00 A0 FD | 	call	#popregs_
2a128                 | __system___gc_markcog_ret
2a128     2D 00 64 FD | 	ret
2a12c                 | 
2a12c                 | __system__opendir
2a12c     06 4A 05 F6 | 	mov	COUNT_, #6
2a130     A8 00 A0 FD | 	call	#pushregs_
2a134     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a138     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2a13c     09 15 02 F6 | 	mov	arg02, arg01
2a140     13 13 02 F6 | 	mov	arg01, local01
2a144     00 16 06 F6 | 	mov	arg03, #0
2a148     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a14c     C0 BF BF FD | 	call	#__system____getvfsforfile
2a150     FD 28 0A F6 | 	mov	local02, result1 wz
2a154     10 00 90 AD |  if_e	jmp	#LR__3910
2a158     28 28 06 F1 | 	add	local02, #40
2a15c     14 17 0A FB | 	rdlong	arg03, local02 wz
2a160     28 28 86 F1 | 	sub	local02, #40
2a164     14 00 90 5D |  if_ne	jmp	#LR__3911
2a168                 | LR__3910
2a168     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a16c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a170     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a174     00 FA 05 F6 | 	mov	result1, #0
2a178     90 00 90 FD | 	jmp	#LR__3913
2a17c                 | LR__3911
2a17c     5C 12 06 F6 | 	mov	arg01, #92
2a180     10 14 06 F6 | 	mov	arg02, #16
2a184     C0 F9 BF FD | 	call	#__system___gc_doalloc
2a188     FD 2A 0A F6 | 	mov	local03, result1 wz
2a18c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a190     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a194     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a198     00 FA 05 A6 |  if_e	mov	result1, #0
2a19c     6C 00 90 AD |  if_e	jmp	#LR__3913
2a1a0     28 28 06 F1 | 	add	local02, #40
2a1a4     14 2D 02 FB | 	rdlong	local04, local02
2a1a8     16 2F 02 F6 | 	mov	local05, local04
2a1ac     28 28 86 F1 | 	sub	local02, #40
2a1b0     13 2E 46 F7 | 	zerox	local05, #19
2a1b4     14 2C 46 F0 | 	shr	local04, #20
2a1b8     02 2C 66 F0 | 	shl	local04, #2
2a1bc     ED 2C 02 F1 | 	add	local04, __methods__
2a1c0     16 2D 02 FB | 	rdlong	local04, local04
2a1c4     15 13 02 F6 | 	mov	arg01, local03
2a1c8     13 15 02 F6 | 	mov	arg02, local01
2a1cc     F2 30 02 F6 | 	mov	local06, objptr
2a1d0     17 E5 01 F6 | 	mov	objptr, local05
2a1d4     2D 2C 62 FD | 	call	local04
2a1d8     18 E5 01 F6 | 	mov	objptr, local06
2a1dc     FD 16 0A F6 | 	mov	arg03, result1 wz
2a1e0     20 00 90 AD |  if_e	jmp	#LR__3912
2a1e4     00 16 4E F2 | 	cmps	arg03, #0 wz
2a1e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a1ec     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2a1f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a1f4     15 13 02 F6 | 	mov	arg01, local03
2a1f8     58 FA BF FD | 	call	#__system___gc_free
2a1fc     00 FA 05 F6 | 	mov	result1, #0
2a200     08 00 90 FD | 	jmp	#LR__3913
2a204                 | LR__3912
2a204     15 29 62 FC | 	wrlong	local02, local03
2a208     15 FB 01 F6 | 	mov	result1, local03
2a20c                 | LR__3913
2a20c     A7 F0 03 F6 | 	mov	ptra, fp
2a210     B2 00 A0 FD | 	call	#popregs_
2a214                 | __system__opendir_ret
2a214     2D 00 64 FD | 	ret
2a218                 | 
2a218                 | __system__closedir
2a218     04 4A 05 F6 | 	mov	COUNT_, #4
2a21c     A8 00 A0 FD | 	call	#pushregs_
2a220     09 27 02 F6 | 	mov	local01, arg01
2a224     13 13 02 FB | 	rdlong	arg01, local01
2a228     2C 12 06 F1 | 	add	arg01, #44
2a22c     09 29 02 FB | 	rdlong	local02, arg01
2a230     14 2B 02 F6 | 	mov	local03, local02
2a234     13 2A 46 F7 | 	zerox	local03, #19
2a238     14 28 46 F0 | 	shr	local02, #20
2a23c     02 28 66 F0 | 	shl	local02, #2
2a240     ED 28 02 F1 | 	add	local02, __methods__
2a244     14 29 02 FB | 	rdlong	local02, local02
2a248     13 13 02 F6 | 	mov	arg01, local01
2a24c     F2 2C 02 F6 | 	mov	local04, objptr
2a250     15 E5 01 F6 | 	mov	objptr, local03
2a254     2D 28 62 FD | 	call	local02
2a258     16 E5 01 F6 | 	mov	objptr, local04
2a25c     FD 2C 02 F6 | 	mov	local04, result1
2a260     13 13 02 F6 | 	mov	arg01, local01
2a264     EC F9 BF FD | 	call	#__system___gc_free
2a268     00 2C 4E F2 | 	cmps	local04, #0 wz
2a26c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a270     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2a274     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a278     01 FA 65 56 |  if_ne	neg	result1, #1
2a27c     00 FA 05 A6 |  if_e	mov	result1, #0
2a280     A7 F0 03 F6 | 	mov	ptra, fp
2a284     B2 00 A0 FD | 	call	#popregs_
2a288                 | __system__closedir_ret
2a288     2D 00 64 FD | 	ret
2a28c                 | 
2a28c                 | __system__readdir
2a28c     04 4A 05 F6 | 	mov	COUNT_, #4
2a290     A8 00 A0 FD | 	call	#pushregs_
2a294     09 15 0A FB | 	rdlong	arg02, arg01 wz
2a298     08 12 06 F1 | 	add	arg01, #8
2a29c     09 27 02 F6 | 	mov	local01, arg01
2a2a0     08 12 86 F1 | 	sub	arg01, #8
2a2a4     00 FA 05 A6 |  if_e	mov	result1, #0
2a2a8     5C 00 90 AD |  if_e	jmp	#LR__3921
2a2ac     30 14 06 F1 | 	add	arg02, #48
2a2b0     0A 29 02 FB | 	rdlong	local02, arg02
2a2b4     14 2B 02 F6 | 	mov	local03, local02
2a2b8     13 2A 46 F7 | 	zerox	local03, #19
2a2bc     14 28 46 F0 | 	shr	local02, #20
2a2c0     02 28 66 F0 | 	shl	local02, #2
2a2c4     ED 28 02 F1 | 	add	local02, __methods__
2a2c8     14 29 02 FB | 	rdlong	local02, local02
2a2cc     13 15 02 F6 | 	mov	arg02, local01
2a2d0     F2 2C 02 F6 | 	mov	local04, objptr
2a2d4     15 E5 01 F6 | 	mov	objptr, local03
2a2d8     2D 28 62 FD | 	call	local02
2a2dc     16 E5 01 F6 | 	mov	objptr, local04
2a2e0     00 FA 4D F2 | 	cmps	result1, #0 wz
2a2e4     1C 00 90 AD |  if_e	jmp	#LR__3920
2a2e8     01 FA 55 F2 | 	cmps	result1, #1 wc
2a2ec     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2a2f0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a2f4     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2a2f8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a2fc     00 FA 05 F6 | 	mov	result1, #0
2a300     04 00 90 FD | 	jmp	#LR__3921
2a304                 | LR__3920
2a304     13 FB 01 F6 | 	mov	result1, local01
2a308                 | LR__3921
2a308     A7 F0 03 F6 | 	mov	ptra, fp
2a30c     B2 00 A0 FD | 	call	#popregs_
2a310                 | __system__readdir_ret
2a310     2D 00 64 FD | 	ret
2a314                 | 
2a314                 | __system___openraw
2a314     15 4A 05 F6 | 	mov	COUNT_, #21
2a318     A8 00 A0 FD | 	call	#pushregs_
2a31c     09 27 02 F6 | 	mov	local01, arg01
2a320     0A 29 02 F6 | 	mov	local02, arg02
2a324     0B 2B 02 F6 | 	mov	local03, arg03
2a328     0C 2D 02 F6 | 	mov	local04, arg04
2a32c     04 2E 06 F6 | 	mov	local05, #4
2a330     13 31 02 F6 | 	mov	local06, local01
2a334     00 32 06 F6 | 	mov	local07, #0
2a338     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a33c     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2a340     1A 13 02 F6 | 	mov	arg01, local08
2a344     14 15 02 F6 | 	mov	arg02, local02
2a348     00 16 06 F6 | 	mov	arg03, #0
2a34c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a350     BC BD BF FD | 	call	#__system____getvfsforfile
2a354     FD 36 0A F6 | 	mov	local09, result1 wz
2a358     10 00 90 AD |  if_e	jmp	#LR__3930
2a35c     20 36 06 F1 | 	add	local09, #32
2a360     1B FB 09 FB | 	rdlong	result1, local09 wz
2a364     20 36 86 F1 | 	sub	local09, #32
2a368     14 00 90 5D |  if_ne	jmp	#LR__3931
2a36c                 | LR__3930
2a36c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a370     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a374     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a378     01 FA 65 F6 | 	neg	result1, #1
2a37c     8C 02 90 FD | 	jmp	#LR__3944
2a380                 | LR__3931
2a380     18 13 02 F6 | 	mov	arg01, local06
2a384     00 14 06 F6 | 	mov	arg02, #0
2a388     34 16 06 F6 | 	mov	arg03, #52
2a38c     09 39 02 F6 | 	mov	local10, arg01
2a390     98 00 A0 FD | 	call	#\builtin_bytefill_
2a394     20 36 06 F1 | 	add	local09, #32
2a398     1B 3B 02 FB | 	rdlong	local11, local09
2a39c     1D 3D 02 F6 | 	mov	local12, local11
2a3a0     1D 3F 02 F6 | 	mov	local13, local11
2a3a4     20 36 86 F1 | 	sub	local09, #32
2a3a8     1F 41 02 F6 | 	mov	local14, local13
2a3ac     13 3C 46 F7 | 	zerox	local12, #19
2a3b0     14 40 46 F0 | 	shr	local14, #20
2a3b4     02 40 66 F0 | 	shl	local14, #2
2a3b8     ED 40 02 F1 | 	add	local14, __methods__
2a3bc     20 41 02 FB | 	rdlong	local14, local14
2a3c0     18 43 02 F6 | 	mov	local15, local06
2a3c4     1A 45 02 F6 | 	mov	local16, local08
2a3c8     15 47 02 F6 | 	mov	local17, local03
2a3cc     21 13 02 F6 | 	mov	arg01, local15
2a3d0     22 15 02 F6 | 	mov	arg02, local16
2a3d4     23 17 02 F6 | 	mov	arg03, local17
2a3d8     F2 48 02 F6 | 	mov	local18, objptr
2a3dc     1E E5 01 F6 | 	mov	objptr, local12
2a3e0     2D 40 62 FD | 	call	local14
2a3e4     24 E5 01 F6 | 	mov	objptr, local18
2a3e8     FD 4A 0A F6 | 	mov	local19, result1 wz
2a3ec     04 2A CE 57 |  if_ne	test	local03, #4 wz
2a3f0     58 00 90 AD |  if_e	jmp	#LR__3932
2a3f4     24 36 06 F1 | 	add	local09, #36
2a3f8     1B 3B 02 FB | 	rdlong	local11, local09
2a3fc     1D 3D 02 F6 | 	mov	local12, local11
2a400     1D 3F 02 F6 | 	mov	local13, local11
2a404     24 36 86 F1 | 	sub	local09, #36
2a408     1F 41 02 F6 | 	mov	local14, local13
2a40c     13 3C 46 F7 | 	zerox	local12, #19
2a410     14 40 46 F0 | 	shr	local14, #20
2a414     02 40 66 F0 | 	shl	local14, #2
2a418     ED 40 02 F1 | 	add	local14, __methods__
2a41c     20 41 02 FB | 	rdlong	local14, local14
2a420     18 43 02 F6 | 	mov	local15, local06
2a424     1A 45 02 F6 | 	mov	local16, local08
2a428     16 47 02 F6 | 	mov	local17, local04
2a42c     21 13 02 F6 | 	mov	arg01, local15
2a430     22 15 02 F6 | 	mov	arg02, local16
2a434     23 17 02 F6 | 	mov	arg03, local17
2a438     F2 48 02 F6 | 	mov	local18, objptr
2a43c     1E E5 01 F6 | 	mov	objptr, local12
2a440     2D 40 62 FD | 	call	local14
2a444     24 E5 01 F6 | 	mov	objptr, local18
2a448     FD 4A 02 F6 | 	mov	local19, result1
2a44c                 | LR__3932
2a44c     00 4A 0E F2 | 	cmp	local19, #0 wz
2a450     8C 01 90 5D |  if_ne	jmp	#LR__3942
2a454     15 4D 02 F6 | 	mov	local20, local03
2a458     03 4C 0E F5 | 	and	local20, #3 wz
2a45c     02 2E 46 55 |  if_ne	or	local05, #2
2a460     01 4C 0E F2 | 	cmp	local20, #1 wz
2a464     01 2E 46 55 |  if_ne	or	local05, #1
2a468     20 2A CE F7 | 	test	local03, #32 wz
2a46c     C0 2E 46 55 |  if_ne	or	local05, #192
2a470     08 30 06 F1 | 	add	local06, #8
2a474     18 2F 62 FC | 	wrlong	local05, local06
2a478     0C 30 06 F1 | 	add	local06, #12
2a47c     18 4F 0A FB | 	rdlong	local21, local06 wz
2a480     14 30 86 F1 | 	sub	local06, #20
2a484     18 00 90 5D |  if_ne	jmp	#LR__3933
2a488     04 36 06 F1 | 	add	local09, #4
2a48c     1B 4F 02 FB | 	rdlong	local21, local09
2a490     04 36 86 F1 | 	sub	local09, #4
2a494     14 30 06 F1 | 	add	local06, #20
2a498     18 4F 62 FC | 	wrlong	local21, local06
2a49c     14 30 86 F1 | 	sub	local06, #20
2a4a0                 | LR__3933
2a4a0     18 30 06 F1 | 	add	local06, #24
2a4a4     18 4F 0A FB | 	rdlong	local21, local06 wz
2a4a8     18 30 86 F1 | 	sub	local06, #24
2a4ac     18 00 90 5D |  if_ne	jmp	#LR__3934
2a4b0     08 36 06 F1 | 	add	local09, #8
2a4b4     1B 4F 02 FB | 	rdlong	local21, local09
2a4b8     08 36 86 F1 | 	sub	local09, #8
2a4bc     18 30 06 F1 | 	add	local06, #24
2a4c0     18 4F 62 FC | 	wrlong	local21, local06
2a4c4     18 30 86 F1 | 	sub	local06, #24
2a4c8                 | LR__3934
2a4c8     24 30 06 F1 | 	add	local06, #36
2a4cc     18 4F 0A FB | 	rdlong	local21, local06 wz
2a4d0     24 30 86 F1 | 	sub	local06, #36
2a4d4     1B 4F 02 AB |  if_e	rdlong	local21, local09
2a4d8     24 30 06 A1 |  if_e	add	local06, #36
2a4dc     18 4F 62 AC |  if_e	wrlong	local21, local06
2a4e0     24 30 86 A1 |  if_e	sub	local06, #36
2a4e4     28 30 06 F1 | 	add	local06, #40
2a4e8     18 4F 0A FB | 	rdlong	local21, local06 wz
2a4ec     28 30 86 F1 | 	sub	local06, #40
2a4f0     18 00 90 5D |  if_ne	jmp	#LR__3935
2a4f4     10 36 06 F1 | 	add	local09, #16
2a4f8     1B 4F 02 FB | 	rdlong	local21, local09
2a4fc     10 36 86 F1 | 	sub	local09, #16
2a500     28 30 06 F1 | 	add	local06, #40
2a504     18 4F 62 FC | 	wrlong	local21, local06
2a508     28 30 86 F1 | 	sub	local06, #40
2a50c                 | LR__3935
2a50c     30 30 06 F1 | 	add	local06, #48
2a510     18 4F 0A FB | 	rdlong	local21, local06 wz
2a514     30 30 86 F1 | 	sub	local06, #48
2a518     18 00 90 5D |  if_ne	jmp	#LR__3936
2a51c     0C 36 06 F1 | 	add	local09, #12
2a520     1B 4F 02 FB | 	rdlong	local21, local09
2a524     0C 36 86 F1 | 	sub	local09, #12
2a528     30 30 06 F1 | 	add	local06, #48
2a52c     18 4F 62 FC | 	wrlong	local21, local06
2a530     30 30 86 F1 | 	sub	local06, #48
2a534                 | LR__3936
2a534     1C 30 06 F1 | 	add	local06, #28
2a538     18 4F 0A FB | 	rdlong	local21, local06 wz
2a53c     1C 30 86 F1 | 	sub	local06, #28
2a540     1C 00 90 5D |  if_ne	jmp	#LR__3937
2a544     01 32 06 F6 | 	mov	local07, #1
2a548     F2 12 02 F6 | 	mov	arg01, objptr
2a54c     00 38 05 FF 
2a550     00 12 46 F5 | 	or	arg01, ##175112192
2a554     1C 30 06 F1 | 	add	local06, #28
2a558     18 13 62 FC | 	wrlong	arg01, local06
2a55c     1C 30 86 F1 | 	sub	local06, #28
2a560                 | LR__3937
2a560     20 30 06 F1 | 	add	local06, #32
2a564     18 4F 0A FB | 	rdlong	local21, local06 wz
2a568     20 30 86 F1 | 	sub	local06, #32
2a56c     1C 00 90 5D |  if_ne	jmp	#LR__3938
2a570     01 32 06 F6 | 	mov	local07, #1
2a574     F2 12 02 F6 | 	mov	arg01, objptr
2a578     00 40 05 FF 
2a57c     00 12 46 F5 | 	or	arg01, ##176160768
2a580     20 30 06 F1 | 	add	local06, #32
2a584     18 13 62 FC | 	wrlong	arg01, local06
2a588     20 30 86 F1 | 	sub	local06, #32
2a58c                 | LR__3938
2a58c     2C 30 06 F1 | 	add	local06, #44
2a590     18 4F 0A FB | 	rdlong	local21, local06 wz
2a594     2C 30 86 F1 | 	sub	local06, #44
2a598     44 00 90 5D |  if_ne	jmp	#LR__3941
2a59c     14 36 06 F1 | 	add	local09, #20
2a5a0     1B 4F 0A FB | 	rdlong	local21, local09 wz
2a5a4     14 36 86 F1 | 	sub	local09, #20
2a5a8     18 00 90 AD |  if_e	jmp	#LR__3939
2a5ac     14 36 06 F1 | 	add	local09, #20
2a5b0     1B 4F 02 FB | 	rdlong	local21, local09
2a5b4     2C 30 06 F1 | 	add	local06, #44
2a5b8     18 4F 62 FC | 	wrlong	local21, local06
2a5bc     2C 30 86 F1 | 	sub	local06, #44
2a5c0     1C 00 90 FD | 	jmp	#LR__3940
2a5c4                 | LR__3939
2a5c4     01 32 06 F6 | 	mov	local07, #1
2a5c8     F2 12 02 F6 | 	mov	arg01, objptr
2a5cc     00 48 05 FF 
2a5d0     00 12 46 F5 | 	or	arg01, ##177209344
2a5d4     2C 30 06 F1 | 	add	local06, #44
2a5d8     18 13 62 FC | 	wrlong	arg01, local06
2a5dc     2C 30 86 F1 | 	sub	local06, #44
2a5e0                 | LR__3940
2a5e0                 | LR__3941
2a5e0                 | LR__3942
2a5e0     00 32 0E F2 | 	cmp	local07, #0 wz
2a5e4     18 13 02 56 |  if_ne	mov	arg01, local06
2a5e8     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2a5ec     00 4A 0E F2 | 	cmp	local19, #0 wz
2a5f0     00 12 06 A6 |  if_e	mov	arg01, #0
2a5f4     10 00 90 5D |  if_ne	jmp	#LR__3943
2a5f8     00 12 4E F2 | 	cmps	arg01, #0 wz
2a5fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a600     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a604     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a608                 | LR__3943
2a608     25 FB 01 F6 | 	mov	result1, local19
2a60c                 | LR__3944
2a60c     A7 F0 03 F6 | 	mov	ptra, fp
2a610     B2 00 A0 FD | 	call	#popregs_
2a614                 | __system___openraw_ret
2a614     2D 00 64 FD | 	ret
2a618                 | 
2a618                 | __system___closeraw
2a618     05 4A 05 F6 | 	mov	COUNT_, #5
2a61c     A8 00 A0 FD | 	call	#pushregs_
2a620     09 27 02 F6 | 	mov	local01, arg01
2a624     00 28 06 F6 | 	mov	local02, #0
2a628     08 26 06 F1 | 	add	local01, #8
2a62c     13 FB 09 FB | 	rdlong	result1, local01 wz
2a630     08 26 86 F1 | 	sub	local01, #8
2a634     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a638     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a63c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a640     01 FA 65 A6 |  if_e	neg	result1, #1
2a644     A8 00 90 AD |  if_e	jmp	#LR__3952
2a648     2C 26 06 F1 | 	add	local01, #44
2a64c     13 FB 09 FB | 	rdlong	result1, local01 wz
2a650     2C 26 86 F1 | 	sub	local01, #44
2a654     38 00 90 AD |  if_e	jmp	#LR__3950
2a658     2C 26 06 F1 | 	add	local01, #44
2a65c     13 2B 02 FB | 	rdlong	local03, local01
2a660     15 2D 02 F6 | 	mov	local04, local03
2a664     2C 26 86 F1 | 	sub	local01, #44
2a668     13 2C 46 F7 | 	zerox	local04, #19
2a66c     14 2A 46 F0 | 	shr	local03, #20
2a670     02 2A 66 F0 | 	shl	local03, #2
2a674     ED 2A 02 F1 | 	add	local03, __methods__
2a678     15 2B 02 FB | 	rdlong	local03, local03
2a67c     13 13 02 F6 | 	mov	arg01, local01
2a680     F2 2E 02 F6 | 	mov	local05, objptr
2a684     16 E5 01 F6 | 	mov	objptr, local04
2a688     2D 2A 62 FD | 	call	local03
2a68c     17 E5 01 F6 | 	mov	objptr, local05
2a690                 | LR__3950
2a690     24 26 06 F1 | 	add	local01, #36
2a694     13 2F 0A FB | 	rdlong	local05, local01 wz
2a698     24 26 86 F1 | 	sub	local01, #36
2a69c     3C 00 90 AD |  if_e	jmp	#LR__3951
2a6a0     24 26 06 F1 | 	add	local01, #36
2a6a4     13 2B 02 FB | 	rdlong	local03, local01
2a6a8     15 2D 02 F6 | 	mov	local04, local03
2a6ac     24 26 86 F1 | 	sub	local01, #36
2a6b0     13 2C 46 F7 | 	zerox	local04, #19
2a6b4     14 2A 46 F0 | 	shr	local03, #20
2a6b8     02 2A 66 F0 | 	shl	local03, #2
2a6bc     ED 2A 02 F1 | 	add	local03, __methods__
2a6c0     15 2B 02 FB | 	rdlong	local03, local03
2a6c4     13 13 02 F6 | 	mov	arg01, local01
2a6c8     F2 2E 02 F6 | 	mov	local05, objptr
2a6cc     16 E5 01 F6 | 	mov	objptr, local04
2a6d0     2D 2A 62 FD | 	call	local03
2a6d4     17 E5 01 F6 | 	mov	objptr, local05
2a6d8     FD 28 02 F6 | 	mov	local02, result1
2a6dc                 | LR__3951
2a6dc     13 13 02 F6 | 	mov	arg01, local01
2a6e0     00 14 06 F6 | 	mov	arg02, #0
2a6e4     34 16 06 F6 | 	mov	arg03, #52
2a6e8     98 00 A0 FD | 	call	#\builtin_bytefill_
2a6ec     14 FB 01 F6 | 	mov	result1, local02
2a6f0                 | LR__3952
2a6f0     A7 F0 03 F6 | 	mov	ptra, fp
2a6f4     B2 00 A0 FD | 	call	#popregs_
2a6f8                 | __system___closeraw_ret
2a6f8     2D 00 64 FD | 	ret
2a6fc                 | 
2a6fc                 | __system___vfs_open_sdcardx
2a6fc     0B 4A 05 F6 | 	mov	COUNT_, #11
2a700     A8 00 A0 FD | 	call	#pushregs_
2a704     09 2B 02 F6 | 	mov	local03, arg01
2a708     0A 2D 02 F6 | 	mov	local04, arg02
2a70c     0B 2F 02 F6 | 	mov	local05, arg03
2a710     0C 31 02 F6 | 	mov	local06, arg04
2a714     01 00 00 FF 
2a718     24 12 06 F6 | 	mov	arg01, ##548
2a71c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2a720     FD 32 02 F6 | 	mov	local07, result1
2a724     01 00 00 FF 
2a728     34 12 06 F6 | 	mov	arg01, ##564
2a72c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2a730     FD 34 02 F6 | 	mov	local08, result1
2a734     15 19 02 F6 | 	mov	arg04, local03
2a738     1F 18 C6 F0 | 	sar	arg04, #31
2a73c     15 17 02 F6 | 	mov	arg03, local03
2a740     01 12 06 F6 | 	mov	arg01, #1
2a744     00 14 06 F6 | 	mov	arg02, #0
2a748     EC DB BF FD | 	call	#__system___int64_shl
2a74c     FD 26 02 F6 | 	mov	local01, result1
2a750     FE 36 02 F6 | 	mov	local09, result2
2a754     16 19 02 F6 | 	mov	arg04, local04
2a758     1F 18 C6 F0 | 	sar	arg04, #31
2a75c     16 17 02 F6 | 	mov	arg03, local04
2a760     01 12 06 F6 | 	mov	arg01, #1
2a764     00 14 06 F6 | 	mov	arg02, #0
2a768     CC DB BF FD | 	call	#__system___int64_shl
2a76c     FD 26 42 F5 | 	or	local01, result1
2a770     FE 36 42 F5 | 	or	local09, result2
2a774     17 19 02 F6 | 	mov	arg04, local05
2a778     1F 18 C6 F0 | 	sar	arg04, #31
2a77c     17 17 02 F6 | 	mov	arg03, local05
2a780     01 12 06 F6 | 	mov	arg01, #1
2a784     00 14 06 F6 | 	mov	arg02, #0
2a788     AC DB BF FD | 	call	#__system___int64_shl
2a78c     FD 26 42 F5 | 	or	local01, result1
2a790     FE 36 42 F5 | 	or	local09, result2
2a794     18 19 02 F6 | 	mov	arg04, local06
2a798     1F 18 C6 F0 | 	sar	arg04, #31
2a79c     18 17 02 F6 | 	mov	arg03, local06
2a7a0     01 12 06 F6 | 	mov	arg01, #1
2a7a4     00 14 06 F6 | 	mov	arg02, #0
2a7a8     8C DB BF FD | 	call	#__system___int64_shl
2a7ac     1B 15 02 F6 | 	mov	arg02, local09
2a7b0     FD 26 42 F5 | 	or	local01, result1
2a7b4     0A FD 41 F5 | 	or	result2, arg02
2a7b8     FE 28 02 F6 | 	mov	local02, result2
2a7bc     13 13 02 F6 | 	mov	arg01, local01
2a7c0     14 15 02 F6 | 	mov	arg02, local02
2a7c4     A8 DB BF FD | 	call	#__system___usepins
2a7c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a7cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a7d0     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2a7d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a7d8     00 FA 05 A6 |  if_e	mov	result1, #0
2a7dc     B4 00 90 AD |  if_e	jmp	#LR__3962
2a7e0     13 39 02 F6 | 	mov	local10, local01
2a7e4     14 37 02 F6 | 	mov	local09, local02
2a7e8     01 00 00 FF 
2a7ec     08 32 06 F1 | 	add	local07, ##520
2a7f0     19 39 62 FC | 	wrlong	local10, local07
2a7f4     04 32 06 F1 | 	add	local07, #4
2a7f8     19 37 62 FC | 	wrlong	local09, local07
2a7fc     01 00 00 FF 
2a800     0C 32 86 F1 | 	sub	local07, ##524
2a804     18 1B 02 F6 | 	mov	arg05, local06
2a808     00 12 06 F6 | 	mov	arg01, #0
2a80c     15 15 02 F6 | 	mov	arg02, local03
2a810     16 17 02 F6 | 	mov	arg03, local04
2a814     17 19 02 F6 | 	mov	arg04, local05
2a818     F2 38 02 F6 | 	mov	local10, objptr
2a81c     19 E5 01 F6 | 	mov	objptr, local07
2a820     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2a824     1C E5 01 F6 | 	mov	objptr, local10
2a828     FD 3A 0A F6 | 	mov	local11, result1 wz
2a82c     24 00 90 5D |  if_ne	jmp	#LR__3960
2a830     AA 01 00 FF 
2a834     EE 14 06 F6 | 	mov	arg02, ##@LR__5377
2a838     1A 13 02 F6 | 	mov	arg01, local08
2a83c     00 16 06 F6 | 	mov	arg03, #0
2a840     F2 3A 02 F6 | 	mov	local11, objptr
2a844     19 E5 01 F6 | 	mov	objptr, local07
2a848     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2a84c     1D E5 01 F6 | 	mov	objptr, local11
2a850     FD 3A 02 F6 | 	mov	local11, result1
2a854                 | LR__3960
2a854     00 3A 0E F2 | 	cmp	local11, #0 wz
2a858     24 00 90 AD |  if_e	jmp	#LR__3961
2a85c     13 13 02 F6 | 	mov	arg01, local01
2a860     14 15 02 F6 | 	mov	arg02, local02
2a864     5C DB BF FD | 	call	#__system___freepins
2a868     1D 13 6A F6 | 	neg	arg01, local11 wz
2a86c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a870     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a874     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a878     00 FA 05 F6 | 	mov	result1, #0
2a87c     14 00 90 FD | 	jmp	#LR__3962
2a880                 | LR__3961
2a880     19 13 02 F6 | 	mov	arg01, local07
2a884     F2 3A 02 F6 | 	mov	local11, objptr
2a888     19 E5 01 F6 | 	mov	objptr, local07
2a88c     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2a890     1D E5 01 F6 | 	mov	objptr, local11
2a894                 | LR__3962
2a894     A7 F0 03 F6 | 	mov	ptra, fp
2a898     B2 00 A0 FD | 	call	#popregs_
2a89c                 | __system___vfs_open_sdcardx_ret
2a89c     2D 00 64 FD | 	ret
2a8a0                 | 
2a8a0                 | __system____default_getc
2a8a0     03 4A 05 F6 | 	mov	COUNT_, #3
2a8a4     A8 00 A0 FD | 	call	#pushregs_
2a8a8     09 27 02 F6 | 	mov	local01, arg01
2a8ac     13 29 02 FB | 	rdlong	local02, local01
2a8b0     08 28 06 F1 | 	add	local02, #8
2a8b4     14 2B 02 FB | 	rdlong	local03, local02
2a8b8     02 2A CE F7 | 	test	local03, #2 wz
2a8bc     13 13 02 56 |  if_ne	mov	arg01, local01
2a8c0     00 01 B0 5D |  if_ne	call	#__system____default_flush
2a8c4     14 2B 02 FB | 	rdlong	local03, local02
2a8c8     01 2A 46 F5 | 	or	local03, #1
2a8cc     14 2B 62 FC | 	wrlong	local03, local02
2a8d0     08 28 86 F1 | 	sub	local02, #8
2a8d4     14 2B 0A FB | 	rdlong	local03, local02 wz
2a8d8     0C 00 90 5D |  if_ne	jmp	#LR__3970
2a8dc     13 13 02 F6 | 	mov	arg01, local01
2a8e0     68 18 B0 FD | 	call	#__system____default_filbuf
2a8e4     FD 2A 02 F6 | 	mov	local03, result1
2a8e8                 | LR__3970
2a8e8     01 2A 56 F2 | 	cmps	local03, #1 wc
2a8ec     01 FA 65 C6 |  if_b	neg	result1, #1
2a8f0     1C 00 90 CD |  if_b	jmp	#LR__3971
2a8f4     01 2A 86 F1 | 	sub	local03, #1
2a8f8     14 2B 62 FC | 	wrlong	local03, local02
2a8fc     04 28 06 F1 | 	add	local02, #4
2a900     14 2B 02 FB | 	rdlong	local03, local02
2a904     15 FB C1 FA | 	rdbyte	result1, local03
2a908     01 2A 06 F1 | 	add	local03, #1
2a90c     14 2B 62 FC | 	wrlong	local03, local02
2a910                 | LR__3971
2a910     A7 F0 03 F6 | 	mov	ptra, fp
2a914     B2 00 A0 FD | 	call	#popregs_
2a918                 | __system____default_getc_ret
2a918     2D 00 64 FD | 	ret
2a91c                 | 
2a91c                 | __system____default_putc
2a91c     06 4A 05 F6 | 	mov	COUNT_, #6
2a920     A8 00 A0 FD | 	call	#pushregs_
2a924     09 27 02 F6 | 	mov	local01, arg01
2a928     0A 29 02 F6 | 	mov	local02, arg02
2a92c     14 2B 02 FB | 	rdlong	local03, local02
2a930     08 2A 06 F1 | 	add	local03, #8
2a934     15 FB 01 FB | 	rdlong	result1, local03
2a938     01 FA CD F7 | 	test	result1, #1 wz
2a93c     14 13 02 56 |  if_ne	mov	arg01, local02
2a940     80 00 B0 5D |  if_ne	call	#__system____default_flush
2a944     15 2D 02 FB | 	rdlong	local04, local03
2a948     02 2C 46 F5 | 	or	local04, #2
2a94c     15 2D 62 FC | 	wrlong	local04, local03
2a950     08 2A 86 F1 | 	sub	local03, #8
2a954     15 2F 02 FB | 	rdlong	local05, local03
2a958     10 2A 06 F1 | 	add	local03, #16
2a95c     15 15 02 FB | 	rdlong	arg02, local03
2a960     10 2A 86 F1 | 	sub	local03, #16
2a964     17 FB 01 F6 | 	mov	result1, local05
2a968     0A FB 01 F1 | 	add	result1, arg02
2a96c     FD 26 42 FC | 	wrbyte	local01, result1
2a970     13 27 E2 F8 | 	getbyte	local01, local01, #0
2a974     01 2E 06 F1 | 	add	local05, #1
2a978     15 2F 62 FC | 	wrlong	local05, local03
2a97c     06 28 06 F1 | 	add	local02, #6
2a980     14 31 EA FA | 	rdword	local06, local02 wz
2a984     06 28 86 F1 | 	sub	local02, #6
2a988     0C 2A 06 51 |  if_ne	add	local03, #12
2a98c     15 2D 02 5B |  if_ne	rdlong	local04, local03
2a990     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2a994     0C 00 90 AD |  if_e	jmp	#LR__3980
2a998     0A 26 0E F2 | 	cmp	local01, #10 wz
2a99c     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2a9a0     10 00 90 5D |  if_ne	jmp	#LR__3981
2a9a4                 | LR__3980
2a9a4     14 13 02 F6 | 	mov	arg01, local02
2a9a8     18 00 B0 FD | 	call	#__system____default_flush
2a9ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2a9b0     01 26 66 56 |  if_ne	neg	local01, #1
2a9b4                 | LR__3981
2a9b4     13 FB 01 F6 | 	mov	result1, local01
2a9b8     A7 F0 03 F6 | 	mov	ptra, fp
2a9bc     B2 00 A0 FD | 	call	#popregs_
2a9c0                 | __system____default_putc_ret
2a9c0     2D 00 64 FD | 	ret
2a9c4                 | 
2a9c4                 | __system____default_flush
2a9c4     06 4A 05 F6 | 	mov	COUNT_, #6
2a9c8     A8 00 A0 FD | 	call	#pushregs_
2a9cc     09 27 02 F6 | 	mov	local01, arg01
2a9d0     13 29 02 FB | 	rdlong	local02, local01
2a9d4     14 2B 02 FB | 	rdlong	local03, local02
2a9d8     08 28 06 F1 | 	add	local02, #8
2a9dc     14 FB 01 FB | 	rdlong	result1, local02
2a9e0     08 28 86 F1 | 	sub	local02, #8
2a9e4     02 FA CD F7 | 	test	result1, #2 wz
2a9e8     D0 00 90 AD |  if_e	jmp	#LR__3992
2a9ec     01 2A 56 F2 | 	cmps	local03, #1 wc
2a9f0     20 01 90 CD |  if_b	jmp	#LR__3994
2a9f4     08 26 06 F1 | 	add	local01, #8
2a9f8     13 FB 01 FB | 	rdlong	result1, local01
2a9fc     08 26 86 F1 | 	sub	local01, #8
2aa00     40 FA CD F7 | 	test	result1, #64 wz
2aa04     68 00 90 AD |  if_e	jmp	#LR__3991
2aa08     08 26 06 F1 | 	add	local01, #8
2aa0c     13 17 02 FB | 	rdlong	arg03, local01
2aa10     08 26 86 F1 | 	sub	local01, #8
2aa14     80 16 CE F7 | 	test	arg03, #128 wz
2aa18     54 00 90 AD |  if_e	jmp	#LR__3990
2aa1c     30 26 06 F1 | 	add	local01, #48
2aa20     13 2D 02 FB | 	rdlong	local04, local01
2aa24     16 2F 02 F6 | 	mov	local05, local04
2aa28     30 26 86 F1 | 	sub	local01, #48
2aa2c     13 2E 46 F7 | 	zerox	local05, #19
2aa30     14 2C 46 F0 | 	shr	local04, #20
2aa34     02 2C 66 F0 | 	shl	local04, #2
2aa38     ED 2C 02 F1 | 	add	local04, __methods__
2aa3c     16 2D 02 FB | 	rdlong	local04, local04
2aa40     13 13 02 F6 | 	mov	arg01, local01
2aa44     00 14 06 F6 | 	mov	arg02, #0
2aa48     02 16 06 F6 | 	mov	arg03, #2
2aa4c     F2 30 02 F6 | 	mov	local06, objptr
2aa50     17 E5 01 F6 | 	mov	objptr, local05
2aa54     2D 2C 62 FD | 	call	local04
2aa58     18 E5 01 F6 | 	mov	objptr, local06
2aa5c     08 26 06 F1 | 	add	local01, #8
2aa60     13 31 02 FB | 	rdlong	local06, local01
2aa64     80 30 26 F5 | 	andn	local06, #128
2aa68     13 31 62 FC | 	wrlong	local06, local01
2aa6c     08 26 86 F1 | 	sub	local01, #8
2aa70                 | LR__3990
2aa70                 | LR__3991
2aa70     18 26 06 F1 | 	add	local01, #24
2aa74     13 2D 02 FB | 	rdlong	local04, local01
2aa78     16 2F 02 F6 | 	mov	local05, local04
2aa7c     18 26 86 F1 | 	sub	local01, #24
2aa80     13 2E 46 F7 | 	zerox	local05, #19
2aa84     14 2C 46 F0 | 	shr	local04, #20
2aa88     02 2C 66 F0 | 	shl	local04, #2
2aa8c     ED 2C 02 F1 | 	add	local04, __methods__
2aa90     16 2D 02 FB | 	rdlong	local04, local04
2aa94     10 28 06 F1 | 	add	local02, #16
2aa98     14 15 02 FB | 	rdlong	arg02, local02
2aa9c     10 28 86 F1 | 	sub	local02, #16
2aaa0     13 13 02 F6 | 	mov	arg01, local01
2aaa4     15 17 02 F6 | 	mov	arg03, local03
2aaa8     F2 30 02 F6 | 	mov	local06, objptr
2aaac     17 E5 01 F6 | 	mov	objptr, local05
2aab0     2D 2C 62 FD | 	call	local04
2aab4     18 E5 01 F6 | 	mov	objptr, local06
2aab8     58 00 90 FD | 	jmp	#LR__3994
2aabc                 | LR__3992
2aabc     08 28 06 F1 | 	add	local02, #8
2aac0     14 31 02 FB | 	rdlong	local06, local02
2aac4     08 28 86 F1 | 	sub	local02, #8
2aac8     01 30 CE F7 | 	test	local06, #1 wz
2aacc     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2aad0     40 00 90 AD |  if_e	jmp	#LR__3993
2aad4     30 26 06 F1 | 	add	local01, #48
2aad8     13 2D 02 FB | 	rdlong	local04, local01
2aadc     16 2F 02 F6 | 	mov	local05, local04
2aae0     30 26 86 F1 | 	sub	local01, #48
2aae4     13 2E 46 F7 | 	zerox	local05, #19
2aae8     14 2C 46 F0 | 	shr	local04, #20
2aaec     02 2C 66 F0 | 	shl	local04, #2
2aaf0     ED 2C 02 F1 | 	add	local04, __methods__
2aaf4     16 2D 02 FB | 	rdlong	local04, local04
2aaf8     13 13 02 F6 | 	mov	arg01, local01
2aafc     15 15 62 F6 | 	neg	arg02, local03
2ab00     01 16 06 F6 | 	mov	arg03, #1
2ab04     F2 30 02 F6 | 	mov	local06, objptr
2ab08     17 E5 01 F6 | 	mov	objptr, local05
2ab0c     2D 2C 62 FD | 	call	local04
2ab10     18 E5 01 F6 | 	mov	objptr, local06
2ab14                 | LR__3993
2ab14                 | LR__3994
2ab14     14 01 68 FC | 	wrlong	#0, local02
2ab18     04 28 06 F1 | 	add	local02, #4
2ab1c     14 01 68 FC | 	wrlong	#0, local02
2ab20     04 28 06 F1 | 	add	local02, #4
2ab24     14 01 68 FC | 	wrlong	#0, local02
2ab28     00 FA 05 F6 | 	mov	result1, #0
2ab2c     A7 F0 03 F6 | 	mov	ptra, fp
2ab30     B2 00 A0 FD | 	call	#popregs_
2ab34                 | __system____default_flush_ret
2ab34     2D 00 64 FD | 	ret
2ab38                 | 
2ab38                 | __system____default_buffer_init
2ab38     02 4A 05 F6 | 	mov	COUNT_, #2
2ab3c     A8 00 A0 FD | 	call	#pushregs_
2ab40     09 27 02 F6 | 	mov	local01, arg01
2ab44     13 29 02 FB | 	rdlong	local02, local01
2ab48     13 13 02 F6 | 	mov	arg01, local01
2ab4c     34 03 B0 FD | 	call	#__system___isatty
2ab50     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab54     06 26 06 51 |  if_ne	add	local01, #6
2ab58     13 0B 58 5C |  if_ne	wrword	#5, local01
2ab5c     06 26 06 A1 |  if_e	add	local01, #6
2ab60     13 0D 58 AC |  if_e	wrword	#6, local01
2ab64     14 28 06 F1 | 	add	local02, #20
2ab68     14 27 02 F6 | 	mov	local01, local02
2ab6c     04 28 86 F1 | 	sub	local02, #4
2ab70     14 27 62 FC | 	wrlong	local01, local02
2ab74     04 28 86 F1 | 	sub	local02, #4
2ab78     02 00 80 FF 
2ab7c     14 01 68 FC | 	wrlong	##1024, local02
2ab80     00 FA 05 F6 | 	mov	result1, #0
2ab84     A7 F0 03 F6 | 	mov	ptra, fp
2ab88     B2 00 A0 FD | 	call	#popregs_
2ab8c                 | __system____default_buffer_init_ret
2ab8c     2D 00 64 FD | 	ret
2ab90                 | 
2ab90                 | __system__stat
2ab90     04 4A 05 F6 | 	mov	COUNT_, #4
2ab94     A8 00 A0 FD | 	call	#pushregs_
2ab98     0A 27 02 F6 | 	mov	local01, arg02
2ab9c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2aba0     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2aba4     09 15 02 F6 | 	mov	arg02, arg01
2aba8     14 13 02 F6 | 	mov	arg01, local02
2abac     00 16 06 F6 | 	mov	arg03, #0
2abb0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2abb4     58 B5 BF FD | 	call	#__system____getvfsforfile
2abb8     FD 2A 0A F6 | 	mov	local03, result1 wz
2abbc     10 00 90 AD |  if_e	jmp	#LR__4000
2abc0     34 2A 06 F1 | 	add	local03, #52
2abc4     15 17 0A FB | 	rdlong	arg03, local03 wz
2abc8     34 2A 86 F1 | 	sub	local03, #52
2abcc     14 00 90 5D |  if_ne	jmp	#LR__4001
2abd0                 | LR__4000
2abd0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2abd4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2abd8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2abdc     01 FA 65 F6 | 	neg	result1, #1
2abe0     68 00 90 FD | 	jmp	#LR__4002
2abe4                 | LR__4001
2abe4     13 13 02 F6 | 	mov	arg01, local01
2abe8     00 14 06 F6 | 	mov	arg02, #0
2abec     30 16 06 F6 | 	mov	arg03, #48
2abf0     09 2D 02 F6 | 	mov	local04, arg01
2abf4     98 00 A0 FD | 	call	#\builtin_bytefill_
2abf8     16 FB 01 F6 | 	mov	result1, local04
2abfc     14 13 CA FA | 	rdbyte	arg01, local02 wz
2ac00     08 26 06 A1 |  if_e	add	local01, #8
2ac04     08 00 80 AF 
2ac08     13 FF 6B AC |  if_e	wrlong	##4607, local01
2ac0c     00 FA 05 A6 |  if_e	mov	result1, #0
2ac10     38 00 90 AD |  if_e	jmp	#LR__4002
2ac14     34 2A 06 F1 | 	add	local03, #52
2ac18     15 2B 02 FB | 	rdlong	local03, local03
2ac1c     15 2D 02 F6 | 	mov	local04, local03
2ac20     13 2A 46 F7 | 	zerox	local03, #19
2ac24     14 2C 46 F0 | 	shr	local04, #20
2ac28     02 2C 66 F0 | 	shl	local04, #2
2ac2c     ED 2C 02 F1 | 	add	local04, __methods__
2ac30     16 2D 02 FB | 	rdlong	local04, local04
2ac34     14 13 02 F6 | 	mov	arg01, local02
2ac38     13 15 02 F6 | 	mov	arg02, local01
2ac3c     F2 28 02 F6 | 	mov	local02, objptr
2ac40     15 E5 01 F6 | 	mov	objptr, local03
2ac44     2D 2C 62 FD | 	call	local04
2ac48     14 E5 01 F6 | 	mov	objptr, local02
2ac4c                 | LR__4002
2ac4c     A7 F0 03 F6 | 	mov	ptra, fp
2ac50     B2 00 A0 FD | 	call	#popregs_
2ac54                 | __system__stat_ret
2ac54     2D 00 64 FD | 	ret
2ac58                 | 
2ac58                 | __system__write
2ac58     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ac5c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ac60     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2ac64     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ac68     01 FA 65 36 |  if_ae	neg	result1, #1
2ac6c     20 00 90 3D |  if_ae	jmp	#LR__4010
2ac70     34 12 06 FD | 	qmul	arg01, #52
2ac74     02 00 00 FF 
2ac78     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2ac7c     18 12 62 FD | 	getqx	arg01
2ac80     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2ac84     02 00 00 FF 
2ac88     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2ac8c     0C 10 B0 FD | 	call	#__system___vfswrite
2ac90                 | LR__4010
2ac90                 | __system__write_ret
2ac90     2D 00 64 FD | 	ret
2ac94                 | 
2ac94                 | __system__read
2ac94     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ac98     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ac9c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2aca0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2aca4     01 FA 65 36 |  if_ae	neg	result1, #1
2aca8     20 00 90 3D |  if_ae	jmp	#LR__4020
2acac     34 12 06 FD | 	qmul	arg01, #52
2acb0     02 00 00 FF 
2acb4     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2acb8     18 12 62 FD | 	getqx	arg01
2acbc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2acc0     02 00 00 FF 
2acc4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2acc8     98 11 B0 FD | 	call	#__system___vfsread
2accc                 | LR__4020
2accc                 | __system__read_ret
2accc     2D 00 64 FD | 	ret
2acd0                 | 
2acd0                 | __system__close
2acd0     0A 12 16 F2 | 	cmp	arg01, #10 wc
2acd4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2acd8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2acdc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ace0     01 FA 65 36 |  if_ae	neg	result1, #1
2ace4     20 00 90 3D |  if_ae	jmp	#LR__4030
2ace8     34 12 06 FD | 	qmul	arg01, #52
2acec     02 00 00 FF 
2acf0     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2acf4     18 12 62 FD | 	getqx	arg01
2acf8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2acfc     02 00 00 FF 
2ad00     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2ad04     10 F9 BF FD | 	call	#__system___closeraw
2ad08                 | LR__4030
2ad08                 | __system__close_ret
2ad08     2D 00 64 FD | 	ret
2ad0c                 | 
2ad0c                 | __system__lseek
2ad0c     06 4A 05 F6 | 	mov	COUNT_, #6
2ad10     A8 00 A0 FD | 	call	#pushregs_
2ad14     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ad18     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ad1c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2ad20     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ad24     01 FA 65 36 |  if_ae	neg	result1, #1
2ad28     C4 00 90 3D |  if_ae	jmp	#LR__4041
2ad2c     34 12 06 FD | 	qmul	arg01, #52
2ad30     02 00 00 FF 
2ad34     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2ad38     18 26 62 FD | 	getqx	local01
2ad3c     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2ad40     30 26 06 F1 | 	add	local01, #48
2ad44     13 13 0A FB | 	rdlong	arg01, local01 wz
2ad48     30 26 86 F1 | 	sub	local01, #48
2ad4c     02 00 00 FF 
2ad50     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2ad54     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ad58     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2ad5c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ad60     01 FA 65 A6 |  if_e	neg	result1, #1
2ad64     88 00 90 AD |  if_e	jmp	#LR__4041
2ad68     08 26 06 F1 | 	add	local01, #8
2ad6c     13 29 02 FB | 	rdlong	local02, local01
2ad70     08 26 86 F1 | 	sub	local01, #8
2ad74     40 28 CE F7 | 	test	local02, #64 wz
2ad78     08 26 06 51 |  if_ne	add	local01, #8
2ad7c     13 29 02 5B |  if_ne	rdlong	local02, local01
2ad80     80 28 46 55 |  if_ne	or	local02, #128
2ad84     13 29 62 5C |  if_ne	wrlong	local02, local01
2ad88     08 26 86 51 |  if_ne	sub	local01, #8
2ad8c     30 26 06 F1 | 	add	local01, #48
2ad90     13 2B 02 FB | 	rdlong	local03, local01
2ad94     15 2D 02 F6 | 	mov	local04, local03
2ad98     30 26 86 F1 | 	sub	local01, #48
2ad9c     13 2C 46 F7 | 	zerox	local04, #19
2ada0     14 2A 46 F0 | 	shr	local03, #20
2ada4     02 2A 66 F0 | 	shl	local03, #2
2ada8     ED 2A 02 F1 | 	add	local03, __methods__
2adac     15 2B 02 FB | 	rdlong	local03, local03
2adb0     13 13 02 F6 | 	mov	arg01, local01
2adb4     F2 2E 02 F6 | 	mov	local05, objptr
2adb8     16 E5 01 F6 | 	mov	objptr, local04
2adbc     2D 2A 62 FD | 	call	local03
2adc0     17 E5 01 F6 | 	mov	objptr, local05
2adc4     FD 30 02 F6 | 	mov	local06, result1
2adc8     00 30 56 F2 | 	cmps	local06, #0 wc
2adcc     1C 00 90 3D |  if_ae	jmp	#LR__4040
2add0     18 13 6A F6 | 	neg	arg01, local06 wz
2add4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2add8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2addc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ade0     01 FA 65 56 |  if_ne	neg	result1, #1
2ade4     00 FA 05 A6 |  if_e	mov	result1, #0
2ade8     04 00 90 FD | 	jmp	#LR__4041
2adec                 | LR__4040
2adec     18 FB 01 F6 | 	mov	result1, local06
2adf0                 | LR__4041
2adf0     A7 F0 03 F6 | 	mov	ptra, fp
2adf4     B2 00 A0 FD | 	call	#popregs_
2adf8                 | __system__lseek_ret
2adf8     2D 00 64 FD | 	ret
2adfc                 | 
2adfc                 | __system___ioctl
2adfc     03 4A 05 F6 | 	mov	COUNT_, #3
2ae00     A8 00 A0 FD | 	call	#pushregs_
2ae04     00 12 4E F2 | 	cmps	arg01, #0 wz
2ae08     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ae0c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ae10     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ae14     01 FA 65 A6 |  if_e	neg	result1, #1
2ae18     5C 00 90 AD |  if_e	jmp	#LR__4051
2ae1c     28 12 06 F1 | 	add	arg01, #40
2ae20     09 27 02 FB | 	rdlong	local01, arg01
2ae24     13 29 02 F6 | 	mov	local02, local01
2ae28     28 12 86 F1 | 	sub	arg01, #40
2ae2c     13 28 46 F7 | 	zerox	local02, #19
2ae30     14 26 46 F0 | 	shr	local01, #20
2ae34     02 26 66 F0 | 	shl	local01, #2
2ae38     ED 26 02 F1 | 	add	local01, __methods__
2ae3c     13 27 02 FB | 	rdlong	local01, local01
2ae40     F2 2A 02 F6 | 	mov	local03, objptr
2ae44     14 E5 01 F6 | 	mov	objptr, local02
2ae48     2D 26 62 FD | 	call	local01
2ae4c     15 E5 01 F6 | 	mov	objptr, local03
2ae50     FD 12 0A F6 | 	mov	arg01, result1 wz
2ae54     1C 00 90 AD |  if_e	jmp	#LR__4050
2ae58     00 12 4E F2 | 	cmps	arg01, #0 wz
2ae5c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ae60     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2ae64     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ae68     01 FA 65 56 |  if_ne	neg	result1, #1
2ae6c     00 FA 05 A6 |  if_e	mov	result1, #0
2ae70     04 00 90 FD | 	jmp	#LR__4051
2ae74                 | LR__4050
2ae74     00 FA 05 F6 | 	mov	result1, #0
2ae78                 | LR__4051
2ae78     A7 F0 03 F6 | 	mov	ptra, fp
2ae7c     B2 00 A0 FD | 	call	#popregs_
2ae80                 | __system___ioctl_ret
2ae80     2D 00 64 FD | 	ret
2ae84                 | 
2ae84                 | __system___isatty
2ae84     00 4A 05 F6 | 	mov	COUNT_, #0
2ae88     A8 00 A0 FD | 	call	#pushregs_
2ae8c     0C F0 07 F1 | 	add	ptra, #12
2ae90     04 4E 05 F1 | 	add	fp, #4
2ae94     A7 12 62 FC | 	wrlong	arg01, fp
2ae98     04 4E 05 F1 | 	add	fp, #4
2ae9c     A7 16 02 F6 | 	mov	arg03, fp
2aea0     08 4E 85 F1 | 	sub	fp, #8
2aea4     00 15 06 F6 | 	mov	arg02, #256
2aea8     50 FF BF FD | 	call	#__system___ioctl
2aeac     00 FA 0D F2 | 	cmp	result1, #0 wz
2aeb0     01 FA 05 A6 |  if_e	mov	result1, #1
2aeb4     00 FA 05 56 |  if_ne	mov	result1, #0
2aeb8     A7 F0 03 F6 | 	mov	ptra, fp
2aebc     B2 00 A0 FD | 	call	#popregs_
2aec0                 | __system___isatty_ret
2aec0     2D 00 64 FD | 	ret
2aec4                 | 
2aec4                 | __system____getftab
2aec4     0A 12 16 F2 | 	cmp	arg01, #10 wc
2aec8     34 12 06 CD |  if_b	qmul	arg01, #52
2aecc     00 FA 05 36 |  if_ae	mov	result1, #0
2aed0     02 00 00 CF 
2aed4     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2aed8     18 FA 61 CD |  if_b	getqx	result1
2aedc     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2aee0     02 00 00 CF 
2aee4     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2aee8                 | __system____getftab_ret
2aee8     2D 00 64 FD | 	ret
2aeec                 | 
2aeec                 | __system__strncpy
2aeec     09 01 02 F6 | 	mov	_var01, arg01
2aef0                 | LR__4060
2aef0     01 16 86 F1 | 	sub	arg03, #1
2aef4     00 16 56 F2 | 	cmps	arg03, #0 wc
2aef8     18 00 90 CD |  if_b	jmp	#LR__4061
2aefc     0A FB C1 FA | 	rdbyte	result1, arg02
2af00     00 FB 41 FC | 	wrbyte	result1, _var01
2af04     01 14 06 F1 | 	add	arg02, #1
2af08     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2af0c     01 00 06 F1 | 	add	_var01, #1
2af10     DC FF 9F 5D |  if_ne	jmp	#LR__4060
2af14                 | LR__4061
2af14     97 0C 48 FB | 	callpa	#(@LR__4063-@LR__4062)>>2,fcache_load_ptr_
2af18                 | LR__4062
2af18     01 16 86 F1 | 	sub	arg03, #1
2af1c     00 16 56 F2 | 	cmps	arg03, #0 wc
2af20     00 03 02 36 |  if_ae	mov	_var02, _var01
2af24     01 00 06 31 |  if_ae	add	_var01, #1
2af28     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2af2c     E8 FF 9F 3D |  if_ae	jmp	#LR__4062
2af30                 | LR__4063
2af30     09 FB 01 F6 | 	mov	result1, arg01
2af34                 | __system__strncpy_ret
2af34     2D 00 64 FD | 	ret
2af38                 | 
2af38                 | __system__strncat
2af38     00 14 4E F2 | 	cmps	arg02, #0 wz
2af3c     50 00 90 AD |  if_e	jmp	#LR__4074
2af40     01 16 16 F2 | 	cmp	arg03, #1 wc
2af44     48 00 90 CD |  if_b	jmp	#LR__4074
2af48     09 01 02 F6 | 	mov	_var01, arg01
2af4c     97 1E 48 FB | 	callpa	#(@LR__4072-@LR__4070)>>2,fcache_load_ptr_
2af50                 | LR__4070
2af50     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2af54     01 00 06 51 |  if_ne	add	_var01, #1
2af58     F4 FF 9F 5D |  if_ne	jmp	#LR__4070
2af5c     0B 03 02 F6 | 	mov	_var02, arg03
2af60                 | LR__4071
2af60     0A 05 C2 FA | 	rdbyte	_var03, arg02
2af64     02 07 02 F6 | 	mov	_var04, _var03
2af68     07 06 4E F7 | 	zerox	_var04, #7 wz
2af6c     01 14 06 F1 | 	add	arg02, #1
2af70     18 00 90 AD |  if_e	jmp	#LR__4073
2af74     01 02 86 F1 | 	sub	_var02, #1
2af78     00 02 56 F2 | 	cmps	_var02, #0 wc
2af7c     00 07 02 36 |  if_ae	mov	_var04, _var01
2af80     01 00 06 31 |  if_ae	add	_var01, #1
2af84     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2af88     D4 FF 9F 3D |  if_ae	jmp	#LR__4071
2af8c                 | LR__4072
2af8c                 | LR__4073
2af8c     00 01 48 FC | 	wrbyte	#0, _var01
2af90                 | LR__4074
2af90     09 FB 01 F6 | 	mov	result1, arg01
2af94                 | __system__strncat_ret
2af94     2D 00 64 FD | 	ret
2af98                 | 
2af98                 | __system__strncmp
2af98     09 01 0A F6 | 	mov	_var01, arg01 wz
2af9c     14 00 90 5D |  if_ne	jmp	#LR__4080
2afa0     00 14 0E F2 | 	cmp	arg02, #0 wz
2afa4     01 02 66 56 |  if_ne	neg	_var02, #1
2afa8     00 02 06 A6 |  if_e	mov	_var02, #0
2afac     01 FB 01 F6 | 	mov	result1, _var02
2afb0     74 00 90 FD | 	jmp	#__system__strncmp_ret
2afb4                 | LR__4080
2afb4     00 14 0E F2 | 	cmp	arg02, #0 wz
2afb8     01 FA 05 A6 |  if_e	mov	result1, #1
2afbc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2afc0     0B 05 02 F6 | 	mov	_var03, arg03
2afc4     97 16 48 FB | 	callpa	#(@LR__4082-@LR__4081)>>2,fcache_load_ptr_
2afc8                 | LR__4081
2afc8     00 07 C2 FA | 	rdbyte	_var04, _var01
2afcc     0A 09 02 F6 | 	mov	_var05, arg02
2afd0     04 0B C2 FA | 	rdbyte	_var06, _var05
2afd4     01 04 86 F1 | 	sub	_var03, #1
2afd8     00 04 56 F2 | 	cmps	_var03, #0 wc
2afdc     01 00 06 F1 | 	add	_var01, #1
2afe0     01 14 06 F1 | 	add	arg02, #1
2afe4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2afe8     08 00 90 2D |  if_nc_and_z	jmp	#LR__4083
2afec     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2aff0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4081
2aff4                 | LR__4082
2aff4                 | LR__4083
2aff4     00 04 56 F2 | 	cmps	_var03, #0 wc
2aff8     00 FA 05 C6 |  if_b	mov	result1, #0
2affc     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2b000     05 07 0A F2 | 	cmp	_var04, _var06 wz
2b004     00 FA 05 A6 |  if_e	mov	result1, #0
2b008     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2b00c     00 06 0E F2 | 	cmp	_var04, #0 wz
2b010     01 FA 65 A6 |  if_e	neg	result1, #1
2b014     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2b018     00 0A 0E F2 | 	cmp	_var06, #0 wz
2b01c     01 FA 05 A6 |  if_e	mov	result1, #1
2b020     03 FB 01 56 |  if_ne	mov	result1, _var04
2b024     05 FB 81 51 |  if_ne	sub	result1, _var06
2b028                 | __system__strncmp_ret
2b028     2D 00 64 FD | 	ret
2b02c                 | 
2b02c                 | __system____root_opendir
2b02c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2b030     04 12 06 F1 | 	add	arg01, #4
2b034     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2b038     00 FA 05 F6 | 	mov	result1, #0
2b03c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2b040                 | __system____root_opendir_ret
2b040     2D 00 64 FD | 	ret
2b044                 | 
2b044                 | __system____root_readdir
2b044     03 4A 05 F6 | 	mov	COUNT_, #3
2b048     A8 00 A0 FD | 	call	#pushregs_
2b04c     09 27 02 F6 | 	mov	local01, arg01
2b050     0A 29 02 F6 | 	mov	local02, arg02
2b054     04 26 06 F1 | 	add	local01, #4
2b058     13 2B 02 FB | 	rdlong	local03, local01
2b05c     04 26 86 F1 | 	sub	local01, #4
2b060                 | LR__4090
2b060     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2b064     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2b068     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2b06c     01 FA 65 A6 |  if_e	neg	result1, #1
2b070     48 00 90 AD |  if_e	jmp	#LR__4091
2b074     15 17 0A FB | 	rdlong	arg03, local03 wz
2b078     04 2A 06 A1 |  if_e	add	local03, #4
2b07c     E0 FF 9F AD |  if_e	jmp	#LR__4090
2b080     15 15 02 FB | 	rdlong	arg02, local03
2b084     01 14 06 F1 | 	add	arg02, #1
2b088     14 13 02 F6 | 	mov	arg01, local02
2b08c     40 16 06 F6 | 	mov	arg03, #64
2b090     58 FE BF FD | 	call	#__system__strncpy
2b094     50 28 06 F1 | 	add	local02, #80
2b098     14 03 48 FC | 	wrbyte	#1, local02
2b09c     08 28 86 F1 | 	sub	local02, #8
2b0a0     14 01 68 FC | 	wrlong	#0, local02
2b0a4     04 28 06 F1 | 	add	local02, #4
2b0a8     14 01 68 FC | 	wrlong	#0, local02
2b0ac     04 2A 06 F1 | 	add	local03, #4
2b0b0     04 26 06 F1 | 	add	local01, #4
2b0b4     13 2B 62 FC | 	wrlong	local03, local01
2b0b8     00 FA 05 F6 | 	mov	result1, #0
2b0bc                 | LR__4091
2b0bc     A7 F0 03 F6 | 	mov	ptra, fp
2b0c0     B2 00 A0 FD | 	call	#popregs_
2b0c4                 | __system____root_readdir_ret
2b0c4     2D 00 64 FD | 	ret
2b0c8                 | 
2b0c8                 | __system____root_closedir
2b0c8     00 FA 05 F6 | 	mov	result1, #0
2b0cc                 | __system____root_closedir_ret
2b0cc     2D 00 64 FD | 	ret
2b0d0                 | 
2b0d0                 | __system____root_stat
2b0d0     0A 01 02 F6 | 	mov	_var01, arg02
2b0d4     00 13 02 F6 | 	mov	arg01, _var01
2b0d8     00 14 06 F6 | 	mov	arg02, #0
2b0dc     30 16 06 F6 | 	mov	arg03, #48
2b0e0     98 00 A0 FD | 	call	#\builtin_bytefill_
2b0e4     08 00 06 F1 | 	add	_var01, #8
2b0e8     08 00 80 FF 
2b0ec     00 FF 6B FC | 	wrlong	##4607, _var01
2b0f0     00 FA 05 F6 | 	mov	result1, #0
2b0f4                 | __system____root_stat_ret
2b0f4     2D 00 64 FD | 	ret
2b0f8                 | 
2b0f8                 | __system___normalizeName
2b0f8     00 00 06 F6 | 	mov	_var01, #0
2b0fc     09 03 02 F6 | 	mov	_var02, arg01
2b100     01 05 02 F6 | 	mov	_var03, _var02
2b104                 | LR__4100
2b104     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2b108     5C 01 90 AD |  if_e	jmp	#LR__4119
2b10c     00 00 0E F2 | 	cmp	_var01, #0 wz
2b110     02 07 02 56 |  if_ne	mov	_var04, _var03
2b114     01 04 06 51 |  if_ne	add	_var03, #1
2b118     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2b11c     00 00 06 56 |  if_ne	mov	_var01, #0
2b120     01 07 C2 FA | 	rdbyte	_var04, _var02
2b124     2E 06 0E F2 | 	cmp	_var04, #46 wz
2b128     D8 00 90 5D |  if_ne	jmp	#LR__4112
2b12c     01 02 06 F1 | 	add	_var02, #1
2b130     01 07 C2 FA | 	rdbyte	_var04, _var02
2b134     01 02 86 F1 | 	sub	_var02, #1
2b138     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b13c     18 00 90 AD |  if_e	jmp	#LR__4101
2b140     01 02 06 F1 | 	add	_var02, #1
2b144     01 09 C2 FA | 	rdbyte	_var05, _var02
2b148     01 02 86 F1 | 	sub	_var02, #1
2b14c     04 0B 02 F6 | 	mov	_var06, _var05
2b150     07 0A 4E F7 | 	zerox	_var06, #7 wz
2b154     10 00 90 5D |  if_ne	jmp	#LR__4102
2b158                 | LR__4101
2b158     01 0D 02 F6 | 	mov	_var07, _var02
2b15c     01 0C 06 F1 | 	add	_var07, #1
2b160     06 03 02 F6 | 	mov	_var02, _var07
2b164     E0 00 90 FD | 	jmp	#LR__4116
2b168                 | LR__4102
2b168     01 02 06 F1 | 	add	_var02, #1
2b16c     01 0D C2 FA | 	rdbyte	_var07, _var02
2b170     01 02 86 F1 | 	sub	_var02, #1
2b174     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2b178     2E 06 0E F2 | 	cmp	_var04, #46 wz
2b17c     84 00 90 5D |  if_ne	jmp	#LR__4111
2b180     02 02 06 F1 | 	add	_var02, #2
2b184     01 0D C2 FA | 	rdbyte	_var07, _var02
2b188     02 02 86 F1 | 	sub	_var02, #2
2b18c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2b190     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b194     18 00 90 AD |  if_e	jmp	#LR__4103
2b198     02 02 06 F1 | 	add	_var02, #2
2b19c     01 09 C2 FA | 	rdbyte	_var05, _var02
2b1a0     02 02 86 F1 | 	sub	_var02, #2
2b1a4     04 0B 02 F6 | 	mov	_var06, _var05
2b1a8     07 0A 4E F7 | 	zerox	_var06, #7 wz
2b1ac     54 00 90 5D |  if_ne	jmp	#LR__4110
2b1b0                 | LR__4103
2b1b0     02 02 06 F1 | 	add	_var02, #2
2b1b4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2b1b8     40 00 90 ED |  if_be	jmp	#LR__4109
2b1bc     02 0F 02 F6 | 	mov	_var08, _var03
2b1c0     01 0E 86 F1 | 	sub	_var08, #1
2b1c4                 | LR__4104
2b1c4     07 07 C2 FA | 	rdbyte	_var04, _var08
2b1c8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b1cc     0C 00 90 5D |  if_ne	jmp	#LR__4105
2b1d0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2b1d4     01 0E 86 11 |  if_a	sub	_var08, #1
2b1d8     E8 FF 9F 1D |  if_a	jmp	#LR__4104
2b1dc                 | LR__4105
2b1dc     97 0C 48 FB | 	callpa	#(@LR__4107-@LR__4106)>>2,fcache_load_ptr_
2b1e0                 | LR__4106
2b1e0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2b1e4     10 00 90 ED |  if_be	jmp	#LR__4108
2b1e8     07 07 C2 FA | 	rdbyte	_var04, _var08
2b1ec     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b1f0     01 0E 86 51 |  if_ne	sub	_var08, #1
2b1f4     E8 FF 9F 5D |  if_ne	jmp	#LR__4106
2b1f8                 | LR__4107
2b1f8                 | LR__4108
2b1f8     07 05 02 F6 | 	mov	_var03, _var08
2b1fc                 | LR__4109
2b1fc     01 00 06 F6 | 	mov	_var01, #1
2b200     44 00 90 FD | 	jmp	#LR__4116
2b204                 | LR__4110
2b204                 | LR__4111
2b204                 | LR__4112
2b204     97 18 48 FB | 	callpa	#(@LR__4114-@LR__4113)>>2,fcache_load_ptr_
2b208                 | LR__4113
2b208     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2b20c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2b210     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2b214     20 00 90 AD |  if_e	jmp	#LR__4115
2b218     01 0B 02 F6 | 	mov	_var06, _var02
2b21c     01 09 02 F6 | 	mov	_var05, _var02
2b220     01 08 06 F1 | 	add	_var05, #1
2b224     05 11 C2 FA | 	rdbyte	_var09, _var06
2b228     04 03 02 F6 | 	mov	_var02, _var05
2b22c     02 11 42 FC | 	wrbyte	_var09, _var03
2b230     01 04 06 F1 | 	add	_var03, #1
2b234     D0 FF 9F FD | 	jmp	#LR__4113
2b238                 | LR__4114
2b238                 | LR__4115
2b238     01 07 C2 FA | 	rdbyte	_var04, _var02
2b23c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b240     C0 FE 9F 5D |  if_ne	jmp	#LR__4100
2b244     01 00 06 F6 | 	mov	_var01, #1
2b248                 | LR__4116
2b248     97 0C 48 FB | 	callpa	#(@LR__4118-@LR__4117)>>2,fcache_load_ptr_
2b24c                 | LR__4117
2b24c     01 07 C2 FA | 	rdbyte	_var04, _var02
2b250     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b254     01 0D 02 A6 |  if_e	mov	_var07, _var02
2b258     01 0C 06 A1 |  if_e	add	_var07, #1
2b25c     06 03 02 A6 |  if_e	mov	_var02, _var07
2b260     E8 FF 9F AD |  if_e	jmp	#LR__4117
2b264                 | LR__4118
2b264     9C FE 9F FD | 	jmp	#LR__4100
2b268                 | LR__4119
2b268     02 01 48 FC | 	wrbyte	#0, _var03
2b26c                 | __system___normalizeName_ret
2b26c     2D 00 64 FD | 	ret
2b270                 | 
2b270                 | __system___strrev
2b270     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2b274     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2b278     09 03 02 F6 | 	mov	_var02, arg01
2b27c     97 1A 48 FB | 	callpa	#(@LR__4122-@LR__4120)>>2,fcache_load_ptr_
2b280                 | LR__4120
2b280     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2b284     01 02 06 51 |  if_ne	add	_var02, #1
2b288     F4 FF 9F 5D |  if_ne	jmp	#LR__4120
2b28c     01 02 86 F1 | 	sub	_var02, #1
2b290                 | LR__4121
2b290     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2b294     1C 00 90 ED |  if_be	jmp	#LR__4123
2b298     09 01 C2 FA | 	rdbyte	_var01, arg01
2b29c     01 05 C2 FA | 	rdbyte	_var03, _var02
2b2a0     09 05 42 FC | 	wrbyte	_var03, arg01
2b2a4     01 01 42 FC | 	wrbyte	_var01, _var02
2b2a8     01 12 06 F1 | 	add	arg01, #1
2b2ac     01 02 86 F1 | 	sub	_var02, #1
2b2b0     DC FF 9F FD | 	jmp	#LR__4121
2b2b4                 | LR__4122
2b2b4                 | LR__4123
2b2b4                 | __system___strrev_ret
2b2b4     2D 00 64 FD | 	ret
2b2b8                 | 
2b2b8                 | __system___fmtpad
2b2b8     06 4A 05 F6 | 	mov	COUNT_, #6
2b2bc     A8 00 A0 FD | 	call	#pushregs_
2b2c0     09 27 02 F6 | 	mov	local01, arg01
2b2c4     0A 29 02 F6 | 	mov	local02, arg02
2b2c8     0B 2B 02 F6 | 	mov	local03, arg03
2b2cc     14 13 EA F8 | 	getbyte	arg01, local02, #1
2b2d0     16 28 46 F0 | 	shr	local02, #22
2b2d4     03 28 0E F5 | 	and	local02, #3 wz
2b2d8     00 2C 06 F6 | 	mov	local04, #0
2b2dc     01 28 06 A6 |  if_e	mov	local02, #1
2b2e0     0C 29 CA F7 | 	test	local02, arg04 wz
2b2e4     00 FA 05 A6 |  if_e	mov	result1, #0
2b2e8     88 00 90 AD |  if_e	jmp	#LR__4133
2b2ec     09 2B C2 F2 | 	subr	local03, arg01
2b2f0     01 2A 56 F2 | 	cmps	local03, #1 wc
2b2f4     00 FA 05 C6 |  if_b	mov	result1, #0
2b2f8     78 00 90 CD |  if_b	jmp	#LR__4133
2b2fc     03 28 0E F2 | 	cmp	local02, #3 wz
2b300     18 00 90 5D |  if_ne	jmp	#LR__4130
2b304     01 18 0E F2 | 	cmp	arg04, #1 wz
2b308     6E 28 62 FD | 	wrz	local02
2b30c     14 2B 02 F1 | 	add	local03, local02
2b310     15 2B 52 F6 | 	abs	local03, local03 wc
2b314     01 2A 46 F0 | 	shr	local03, #1
2b318     15 2B 82 F6 | 	negc	local03, local03
2b31c                 | LR__4130
2b31c     01 2A 56 F2 | 	cmps	local03, #1 wc
2b320     4C 00 90 CD |  if_b	jmp	#LR__4132
2b324     15 2F 02 F6 | 	mov	local05, local03
2b328                 | LR__4131
2b328     13 29 02 F6 | 	mov	local02, local01
2b32c     13 31 02 F6 | 	mov	local06, local01
2b330     13 28 46 F7 | 	zerox	local02, #19
2b334     14 30 46 F0 | 	shr	local06, #20
2b338     02 30 66 F0 | 	shl	local06, #2
2b33c     ED 30 02 F1 | 	add	local06, __methods__
2b340     18 31 02 FB | 	rdlong	local06, local06
2b344     20 12 06 F6 | 	mov	arg01, #32
2b348     F2 2A 02 F6 | 	mov	local03, objptr
2b34c     14 E5 01 F6 | 	mov	objptr, local02
2b350     2D 30 62 FD | 	call	local06
2b354     15 E5 01 F6 | 	mov	objptr, local03
2b358     FD 30 02 F6 | 	mov	local06, result1
2b35c     00 30 56 F2 | 	cmps	local06, #0 wc
2b360     18 FB 01 C6 |  if_b	mov	result1, local06
2b364     0C 00 90 CD |  if_b	jmp	#LR__4133
2b368     18 2D 02 F1 | 	add	local04, local06
2b36c     EE 2F 6E FB | 	djnz	local05, #LR__4131
2b370                 | LR__4132
2b370     16 FB 01 F6 | 	mov	result1, local04
2b374                 | LR__4133
2b374     A7 F0 03 F6 | 	mov	ptra, fp
2b378     B2 00 A0 FD | 	call	#popregs_
2b37c                 | __system___fmtpad_ret
2b37c     2D 00 64 FD | 	ret
2b380                 | 
2b380                 | __system___uitoa
2b380     04 4A 05 F6 | 	mov	COUNT_, #4
2b384     A8 00 A0 FD | 	call	#pushregs_
2b388     09 27 02 F6 | 	mov	local01, arg01
2b38c     00 1A 4E F2 | 	cmps	arg05, #0 wz
2b390     13 1B 02 F6 | 	mov	arg05, local01
2b394     00 28 06 F6 | 	mov	local02, #0
2b398     37 2A 06 56 |  if_ne	mov	local03, #55
2b39c     57 2A 06 A6 |  if_e	mov	local03, #87
2b3a0                 | LR__4140
2b3a0     0B 15 12 FD | 	qdiv	arg02, arg03
2b3a4     19 2C 62 FD | 	getqy	local04
2b3a8     0B 15 12 FD | 	qdiv	arg02, arg03
2b3ac     0A 2C 16 F2 | 	cmp	local04, #10 wc
2b3b0     30 2C 06 C1 |  if_b	add	local04, #48
2b3b4     15 2D 02 31 |  if_ae	add	local04, local03
2b3b8     0D 2D 42 FC | 	wrbyte	local04, arg05
2b3bc     01 1A 06 F1 | 	add	arg05, #1
2b3c0     01 28 06 F1 | 	add	local02, #1
2b3c4     18 14 62 FD | 	getqx	arg02
2b3c8     00 14 0E F2 | 	cmp	arg02, #0 wz
2b3cc     D0 FF 9F 5D |  if_ne	jmp	#LR__4140
2b3d0     0C 29 12 F2 | 	cmp	local02, arg04 wc
2b3d4     C8 FF 9F CD |  if_b	jmp	#LR__4140
2b3d8     0D 01 48 FC | 	wrbyte	#0, arg05
2b3dc     13 13 02 F6 | 	mov	arg01, local01
2b3e0     8C FE BF FD | 	call	#__system___strrev
2b3e4     14 FB 01 F6 | 	mov	result1, local02
2b3e8     A7 F0 03 F6 | 	mov	ptra, fp
2b3ec     B2 00 A0 FD | 	call	#popregs_
2b3f0                 | __system___uitoa_ret
2b3f0     2D 00 64 FD | 	ret
2b3f4                 | 
2b3f4                 | __system__disassemble_0557
2b3f4     10 4A 05 F6 | 	mov	COUNT_, #16
2b3f8     A8 00 A0 FD | 	call	#pushregs_
2b3fc     09 27 02 F6 | 	mov	local01, arg01
2b400     0A 29 02 F6 | 	mov	local02, arg02
2b404     0B 2B 02 F6 | 	mov	local03, arg03
2b408     0C 2D 02 F6 | 	mov	local04, arg04
2b40c     0D 2F 02 F6 | 	mov	local05, arg05
2b410     17 13 52 F6 | 	abs	arg01, local05 wc
2b414     1F 30 C6 C9 |  if_b	decod	local06, #31
2b418     00 30 06 36 |  if_ae	mov	local06, #0
2b41c     CC CF BF FD | 	call	#__system___float_fromuns
2b420     18 FB 61 F5 | 	xor	result1, local06
2b424     FD 32 02 F6 | 	mov	local07, result1
2b428     00 34 06 F6 | 	mov	local08, #0
2b42c     13 13 02 F6 | 	mov	arg01, local01
2b430     00 14 06 F6 | 	mov	arg02, #0
2b434     01 16 06 F6 | 	mov	arg03, #1
2b438     E8 D7 BF FD | 	call	#__system___float_cmp
2b43c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b440     00 36 06 A6 |  if_e	mov	local09, #0
2b444     14 01 68 AC |  if_e	wrlong	#0, local02
2b448     15 37 62 AC |  if_e	wrlong	local09, local03
2b44c     8C 01 90 AD |  if_e	jmp	#LR__4162
2b450     13 13 02 F6 | 	mov	arg01, local01
2b454     BC DC BF FD | 	call	#__system____builtin_ilogb
2b458     FD 38 02 F6 | 	mov	local10, result1
2b45c     0A 2E 0E F2 | 	cmp	local05, #10 wz
2b460     24 00 90 5D |  if_ne	jmp	#LR__4150
2b464     1C 37 02 F6 | 	mov	local09, local10
2b468     01 36 66 F0 | 	shl	local09, #1
2b46c     1C 37 02 F1 | 	add	local09, local10
2b470     1B 39 52 F6 | 	abs	local10, local09 wc
2b474     0A 38 16 FD | 	qdiv	local10, #10
2b478     09 3A 06 F6 | 	mov	local11, #9
2b47c     18 38 62 FD | 	getqx	local10
2b480     1C 39 82 F6 | 	negc	local10, local10
2b484     04 00 90 FD | 	jmp	#LR__4151
2b488                 | LR__4150
2b488     18 3A 06 F6 | 	mov	local11, #24
2b48c                 | LR__4151
2b48c                 | LR__4152
2b48c     08 34 56 F2 | 	cmps	local08, #8 wc
2b490     01 34 06 F1 | 	add	local08, #1
2b494     60 00 90 3D |  if_ae	jmp	#LR__4153
2b498     00 C0 1F FF 
2b49c     00 12 06 F6 | 	mov	arg01, ##1065353216
2b4a0     19 15 02 F6 | 	mov	arg02, local07
2b4a4     1C 17 02 F6 | 	mov	arg03, local10
2b4a8     4C E3 BF FD | 	call	#__system___float_pow_n
2b4ac     FD 14 02 F6 | 	mov	arg02, result1
2b4b0     13 13 02 F6 | 	mov	arg01, local01
2b4b4     3C D5 BF FD | 	call	#__system___float_div
2b4b8     FD 3C 02 F6 | 	mov	local12, result1
2b4bc     1E 13 02 F6 | 	mov	arg01, local12
2b4c0     00 C0 1F FF 
2b4c4     00 14 06 F6 | 	mov	arg02, ##1065353216
2b4c8     01 16 06 F6 | 	mov	arg03, #1
2b4cc     54 D7 BF FD | 	call	#__system___float_cmp
2b4d0     00 FA 55 F2 | 	cmps	result1, #0 wc
2b4d4     01 38 86 C1 |  if_b	sub	local10, #1
2b4d8     B0 FF 9F CD |  if_b	jmp	#LR__4152
2b4dc     19 15 02 F6 | 	mov	arg02, local07
2b4e0     1E 13 02 F6 | 	mov	arg01, local12
2b4e4     01 16 66 F6 | 	neg	arg03, #1
2b4e8     38 D7 BF FD | 	call	#__system___float_cmp
2b4ec     00 FA 55 F2 | 	cmps	result1, #0 wc
2b4f0     01 38 06 31 |  if_ae	add	local10, #1
2b4f4     94 FF 9F 3D |  if_ae	jmp	#LR__4152
2b4f8                 | LR__4153
2b4f8     1E 13 02 F6 | 	mov	arg01, local12
2b4fc     14 DC BF FD | 	call	#__system____builtin_ilogb
2b500     FD 3E 02 F6 | 	mov	local13, result1
2b504     1E 41 02 F6 | 	mov	local14, local12
2b508     17 41 06 F4 | 	bitl	local14, #279
2b50c     17 40 26 F4 | 	bith	local14, #23
2b510     1F 41 62 F0 | 	shl	local14, local13
2b514     02 2E 0E F2 | 	cmp	local05, #2 wz
2b518     02 2C 66 A0 |  if_e	shl	local04, #2
2b51c     00 42 06 F6 | 	mov	local15, #0
2b520     00 2C 56 F2 | 	cmps	local04, #0 wc
2b524     10 00 90 3D |  if_ae	jmp	#LR__4154
2b528     1C 2D C2 F2 | 	subr	local04, local10
2b52c     00 2C 56 F2 | 	cmps	local04, #0 wc
2b530     A0 00 90 CD |  if_b	jmp	#LR__4161
2b534     04 00 90 FD | 	jmp	#LR__4155
2b538                 | LR__4154
2b538     01 2C 06 F1 | 	add	local04, #1
2b53c                 | LR__4155
2b53c     1D 2D 7A F3 | 	fles	local04, local11 wcz
2b540     01 44 06 F6 | 	mov	local16, #1
2b544     97 22 48 FB | 	callpa	#(@LR__4157-@LR__4156)>>2,fcache_load_ptr_
2b548                 | LR__4156
2b548     00 40 00 FF 
2b54c     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2b550     38 00 90 3D |  if_ae	jmp	#LR__4158
2b554     01 2C 56 F2 | 	cmps	local04, #1 wc
2b558     01 2C 86 F1 | 	sub	local04, #1
2b55c     2C 00 90 CD |  if_b	jmp	#LR__4158
2b560     17 43 02 FD | 	qmul	local15, local05
2b564     20 3F 02 F6 | 	mov	local13, local14
2b568     17 3E 46 F0 | 	shr	local13, #23
2b56c     17 41 06 F4 | 	bitl	local14, #279
2b570     18 42 62 FD | 	getqx	local15
2b574     17 45 02 FD | 	qmul	local16, local05
2b578     18 44 62 FD | 	getqx	local16
2b57c     17 41 02 FD | 	qmul	local14, local05
2b580     1F 43 02 F1 | 	add	local15, local13
2b584     18 40 62 FD | 	getqx	local14
2b588     BC FF 9F FD | 	jmp	#LR__4156
2b58c                 | LR__4157
2b58c                 | LR__4158
2b58c     17 37 02 F6 | 	mov	local09, local05
2b590     17 36 66 F0 | 	shl	local09, #23
2b594     1B 3F 52 F6 | 	abs	local13, local09 wc
2b598     01 3E 46 F0 | 	shr	local13, #1
2b59c     1F 3F 82 F6 | 	negc	local13, local13
2b5a0     1F 41 1A F2 | 	cmp	local14, local13 wcz
2b5a4     20 00 90 1D |  if_a	jmp	#LR__4159
2b5a8     17 2E 66 F0 | 	shl	local05, #23
2b5ac     17 3F 52 F6 | 	abs	local13, local05 wc
2b5b0     01 3E 46 F0 | 	shr	local13, #1
2b5b4     1F 3F 82 F6 | 	negc	local13, local13
2b5b8     1F 41 0A F2 | 	cmp	local14, local13 wz
2b5bc     14 00 90 5D |  if_ne	jmp	#LR__4160
2b5c0     01 42 CE F7 | 	test	local15, #1 wz
2b5c4     0C 00 90 AD |  if_e	jmp	#LR__4160
2b5c8                 | LR__4159
2b5c8     01 42 06 F1 | 	add	local15, #1
2b5cc     22 43 0A F2 | 	cmp	local15, local16 wz
2b5d0     01 38 06 A1 |  if_e	add	local10, #1
2b5d4                 | LR__4160
2b5d4                 | LR__4161
2b5d4     14 43 62 FC | 	wrlong	local15, local02
2b5d8     15 39 62 FC | 	wrlong	local10, local03
2b5dc                 | LR__4162
2b5dc     A7 F0 03 F6 | 	mov	ptra, fp
2b5e0     B2 00 A0 FD | 	call	#popregs_
2b5e4                 | __system__disassemble_0557_ret
2b5e4     2D 00 64 FD | 	ret
2b5e8                 | 
2b5e8                 | __system__emitsign_0559
2b5e8     00 FA 05 F6 | 	mov	result1, #0
2b5ec     00 14 0E F2 | 	cmp	arg02, #0 wz
2b5f0     09 01 02 56 |  if_ne	mov	_var01, arg01
2b5f4     01 12 06 51 |  if_ne	add	arg01, #1
2b5f8     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2b5fc     01 FA 05 56 |  if_ne	mov	result1, #1
2b600     00 16 0E F2 | 	cmp	arg03, #0 wz
2b604     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2b608     01 12 06 51 |  if_ne	add	arg01, #1
2b60c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2b610     02 FA 05 51 |  if_ne	add	result1, #2
2b614                 | __system__emitsign_0559_ret
2b614     2D 00 64 FD | 	ret
2b618                 | 
2b618                 | __system___gettxfunc
2b618     01 4A 05 F6 | 	mov	COUNT_, #1
2b61c     A8 00 A0 FD | 	call	#pushregs_
2b620     A0 F8 BF FD | 	call	#__system____getftab
2b624     FD 26 0A F6 | 	mov	local01, result1 wz
2b628     10 00 90 AD |  if_e	jmp	#LR__4170
2b62c     08 26 06 F1 | 	add	local01, #8
2b630     13 15 0A FB | 	rdlong	arg02, local01 wz
2b634     08 26 86 F1 | 	sub	local01, #8
2b638     08 00 90 5D |  if_ne	jmp	#LR__4171
2b63c                 | LR__4170
2b63c     00 FA 05 F6 | 	mov	result1, #0
2b640     0C 00 90 FD | 	jmp	#LR__4172
2b644                 | LR__4171
2b644     00 00 05 FF 
2b648     00 26 46 F5 | 	or	local01, ##167772160
2b64c     13 FB 01 F6 | 	mov	result1, local01
2b650                 | LR__4172
2b650     A7 F0 03 F6 | 	mov	ptra, fp
2b654     B2 00 A0 FD | 	call	#popregs_
2b658                 | __system___gettxfunc_ret
2b658     2D 00 64 FD | 	ret
2b65c                 | 
2b65c                 | __system___getrxfunc
2b65c     01 4A 05 F6 | 	mov	COUNT_, #1
2b660     A8 00 A0 FD | 	call	#pushregs_
2b664     5C F8 BF FD | 	call	#__system____getftab
2b668     FD 26 0A F6 | 	mov	local01, result1 wz
2b66c     10 00 90 AD |  if_e	jmp	#LR__4180
2b670     08 26 06 F1 | 	add	local01, #8
2b674     13 15 0A FB | 	rdlong	arg02, local01 wz
2b678     08 26 86 F1 | 	sub	local01, #8
2b67c     08 00 90 5D |  if_ne	jmp	#LR__4181
2b680                 | LR__4180
2b680     00 FA 05 F6 | 	mov	result1, #0
2b684     0C 00 90 FD | 	jmp	#LR__4182
2b688                 | LR__4181
2b688     00 08 05 FF 
2b68c     00 26 46 F5 | 	or	local01, ##168820736
2b690     13 FB 01 F6 | 	mov	result1, local01
2b694                 | LR__4182
2b694     A7 F0 03 F6 | 	mov	ptra, fp
2b698     B2 00 A0 FD | 	call	#popregs_
2b69c                 | __system___getrxfunc_ret
2b69c     2D 00 64 FD | 	ret
2b6a0                 | 
2b6a0                 | __system___getiolock_0599
2b6a0     01 4A 05 F6 | 	mov	COUNT_, #1
2b6a4     A8 00 A0 FD | 	call	#pushregs_
2b6a8     18 F8 BF FD | 	call	#__system____getftab
2b6ac     FD 26 0A F6 | 	mov	local01, result1 wz
2b6b0     10 00 90 AD |  if_e	jmp	#LR__4190
2b6b4     08 26 06 F1 | 	add	local01, #8
2b6b8     13 FB 09 FB | 	rdlong	result1, local01 wz
2b6bc     08 26 86 F1 | 	sub	local01, #8
2b6c0     18 00 90 5D |  if_ne	jmp	#LR__4191
2b6c4                 | LR__4190
2b6c4     01 00 00 FF 
2b6c8     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2b6cc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2b6d0     01 00 00 FF 
2b6d4     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2b6d8     08 00 90 FD | 	jmp	#LR__4192
2b6dc                 | LR__4191
2b6dc     0C 26 06 F1 | 	add	local01, #12
2b6e0     13 FB 01 F6 | 	mov	result1, local01
2b6e4                 | LR__4192
2b6e4     A7 F0 03 F6 | 	mov	ptra, fp
2b6e8     B2 00 A0 FD | 	call	#popregs_
2b6ec                 | __system___getiolock_0599_ret
2b6ec     2D 00 64 FD | 	ret
2b6f0                 | 
2b6f0                 | __system____ScanForChar
2b6f0     09 01 02 F6 | 	mov	_var01, arg01
2b6f4     09 03 02 F6 | 	mov	_var02, arg01
2b6f8     97 06 48 FB | 	callpa	#(@LR__4201-@LR__4200)>>2,fcache_load_ptr_
2b6fc                 | LR__4200
2b6fc     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2b700     01 02 06 51 |  if_ne	add	_var02, #1
2b704     F4 FF 9F 5D |  if_ne	jmp	#LR__4200
2b708                 | LR__4201
2b708     09 03 82 F1 | 	sub	_var02, arg01
2b70c     01 FB 01 F6 | 	mov	result1, _var02
2b710     FD 12 0A F6 | 	mov	arg01, result1 wz
2b714     00 FA 05 A6 |  if_e	mov	result1, #0
2b718     B8 00 90 AD |  if_e	jmp	#LR__4208
2b71c     0A 05 02 F6 | 	mov	_var03, arg02
2b720     07 04 4E F7 | 	zerox	_var03, #7 wz
2b724     00 FA 05 A6 |  if_e	mov	result1, #0
2b728     A8 00 90 AD |  if_e	jmp	#LR__4208
2b72c     01 16 16 F2 | 	cmp	arg03, #1 wc
2b730     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2b734     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2b738     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2b73c     94 00 90 4D |  if_c_and_nz	jmp	#LR__4208
2b740     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2b744     10 00 90 ED |  if_be	jmp	#LR__4202
2b748     00 18 0E F2 | 	cmp	arg04, #0 wz
2b74c     00 FA 05 A6 |  if_e	mov	result1, #0
2b750     80 00 90 AD |  if_e	jmp	#LR__4208
2b754     09 17 02 F6 | 	mov	arg03, arg01
2b758                 | LR__4202
2b758     01 16 86 F1 | 	sub	arg03, #1
2b75c     00 18 0E F2 | 	cmp	arg04, #0 wz
2b760     38 00 90 5D |  if_ne	jmp	#LR__4204
2b764     0B 07 02 F6 | 	mov	_var04, arg03
2b768     09 09 02 F6 | 	mov	_var05, arg01
2b76c                 | LR__4203
2b76c     04 07 12 F2 | 	cmp	_var04, _var05 wc
2b770     5C 00 90 3D |  if_ae	jmp	#LR__4207
2b774     03 05 02 F6 | 	mov	_var03, _var04
2b778     00 05 02 F1 | 	add	_var03, _var01
2b77c     02 05 C2 FA | 	rdbyte	_var03, _var03
2b780     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2b784     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2b788     01 06 06 A1 |  if_e	add	_var04, #1
2b78c     03 FB 01 A6 |  if_e	mov	result1, _var04
2b790     40 00 90 AD |  if_e	jmp	#LR__4208
2b794     01 06 06 F1 | 	add	_var04, #1
2b798     D0 FF 9F FD | 	jmp	#LR__4203
2b79c                 | LR__4204
2b79c     0B 07 02 F6 | 	mov	_var04, arg03
2b7a0                 | LR__4205
2b7a0     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2b7a4     28 00 90 1D |  if_a	jmp	#LR__4206
2b7a8     03 09 02 F6 | 	mov	_var05, _var04
2b7ac     00 09 02 F1 | 	add	_var05, _var01
2b7b0     04 05 C2 FA | 	rdbyte	_var03, _var05
2b7b4     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2b7b8     04 05 0A F2 | 	cmp	_var03, _var05 wz
2b7bc     01 06 06 A1 |  if_e	add	_var04, #1
2b7c0     03 FB 01 A6 |  if_e	mov	result1, _var04
2b7c4     0C 00 90 AD |  if_e	jmp	#LR__4208
2b7c8     01 06 86 F1 | 	sub	_var04, #1
2b7cc     D0 FF 9F FD | 	jmp	#LR__4205
2b7d0                 | LR__4206
2b7d0                 | LR__4207
2b7d0     00 FA 05 F6 | 	mov	result1, #0
2b7d4                 | LR__4208
2b7d4                 | __system____ScanForChar_ret
2b7d4     2D 00 64 FD | 	ret
2b7d8                 | 
2b7d8                 | __system___basic_dir
2b7d8     05 4A 05 F6 | 	mov	COUNT_, #5
2b7dc     A8 00 A0 FD | 	call	#pushregs_
2b7e0     4C F0 07 F1 | 	add	ptra, #76
2b7e4     04 4E 05 F1 | 	add	fp, #4
2b7e8     A7 12 62 FC | 	wrlong	arg01, fp
2b7ec     04 4E 05 F1 | 	add	fp, #4
2b7f0     A7 14 62 FC | 	wrlong	arg02, fp
2b7f4     04 4E 85 F1 | 	sub	fp, #4
2b7f8     A7 14 0A FB | 	rdlong	arg02, fp wz
2b7fc     04 4E 85 F1 | 	sub	fp, #4
2b800     04 4E 05 51 |  if_ne	add	fp, #4
2b804     A7 26 02 5B |  if_ne	rdlong	local01, fp
2b808     04 4E 85 51 |  if_ne	sub	fp, #4
2b80c     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2b810     70 00 90 AD |  if_e	jmp	#LR__4210
2b814     03 00 00 FF 
2b818     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b81c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2b820     03 00 00 FF 
2b824     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2b828     03 00 00 5F 
2b82c     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2b830     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2b834     03 00 00 5F 
2b838     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2b83c     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2b840     AA 01 00 FF 
2b844     F0 12 06 F6 | 	mov	arg01, ##@LR__5378
2b848     E0 E8 BF FD | 	call	#__system__opendir
2b84c     03 00 00 FF 
2b850     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b854     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2b858     08 4E 05 F1 | 	add	fp, #8
2b85c     A7 28 02 FB | 	rdlong	local02, fp
2b860     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2b864     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2b868     04 4E 85 F1 | 	sub	fp, #4
2b86c     A7 28 02 FB | 	rdlong	local02, fp
2b870     04 4E 85 F1 | 	sub	fp, #4
2b874     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2b878     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2b87c     03 00 00 FF 
2b880     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2b884                 | LR__4210
2b884     03 00 00 FF 
2b888     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b88c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2b890     03 00 00 FF 
2b894     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2b898     AA 01 00 AF 
2b89c     F2 FA 05 A6 |  if_e	mov	result1, ##@LR__5379
2b8a0     84 02 90 AD |  if_e	jmp	#LR__4223
2b8a4                 | LR__4211
2b8a4     03 00 00 FF 
2b8a8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b8ac     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2b8b0     03 00 00 FF 
2b8b4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2b8b8     D0 E9 BF FD | 	call	#__system__readdir
2b8bc     0C 4E 05 F1 | 	add	fp, #12
2b8c0     A7 FA 61 FC | 	wrlong	result1, fp
2b8c4     0C 4E 85 F1 | 	sub	fp, #12
2b8c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8cc     38 00 90 5D |  if_ne	jmp	#LR__4212
2b8d0     03 00 00 FF 
2b8d4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b8d8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2b8dc     03 00 00 FF 
2b8e0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2b8e4     30 E9 BF FD | 	call	#__system__closedir
2b8e8     03 00 00 FF 
2b8ec     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2b8f0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2b8f4     03 00 00 FF 
2b8f8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2b8fc     AA 01 00 FF 
2b900     F4 FA 05 F6 | 	mov	result1, ##@LR__5380
2b904     20 02 90 FD | 	jmp	#LR__4223
2b908                 | LR__4212
2b908     0C 4E 05 F1 | 	add	fp, #12
2b90c     A7 12 02 FB | 	rdlong	arg01, fp
2b910     0C 4E 85 F1 | 	sub	fp, #12
2b914     03 00 00 FF 
2b918     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2b91c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2b920     03 00 00 FF 
2b924     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2b928     10 09 B0 FD | 	call	#__system___pat_match
2b92c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b930     70 FF 9F AD |  if_e	jmp	#LR__4211
2b934     03 00 00 FF 
2b938     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2b93c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2b940     03 00 00 FF 
2b944     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2b948     78 01 90 AD |  if_e	jmp	#LR__4219
2b94c     0C 4E 05 F1 | 	add	fp, #12
2b950     A7 12 02 FB | 	rdlong	arg01, fp
2b954     04 4E 05 F1 | 	add	fp, #4
2b958     A7 14 02 F6 | 	mov	arg02, fp
2b95c     10 4E 85 F1 | 	sub	fp, #16
2b960     2C F2 BF FD | 	call	#__system__stat
2b964     40 4E 05 F1 | 	add	fp, #64
2b968     A7 FA 61 FC | 	wrlong	result1, fp
2b96c     40 4E 85 F1 | 	sub	fp, #64
2b970     00 FA 0D F2 | 	cmp	result1, #0 wz
2b974     AA 01 00 5F 
2b978     F6 FA 05 56 |  if_ne	mov	result1, ##@LR__5381
2b97c     A8 01 90 5D |  if_ne	jmp	#LR__4223
2b980     18 4E 05 F1 | 	add	fp, #24
2b984     A7 28 02 FB | 	rdlong	local02, fp
2b988     78 00 00 FF 
2b98c     00 28 06 F5 | 	and	local02, ##61440
2b990     2C 4E 05 F1 | 	add	fp, #44
2b994     A7 28 62 FC | 	wrlong	local02, fp
2b998     38 4E 85 F1 | 	sub	fp, #56
2b99c     A7 28 02 FB | 	rdlong	local02, fp
2b9a0     0C 4E 85 F1 | 	sub	fp, #12
2b9a4     14 29 C2 FA | 	rdbyte	local02, local02
2b9a8     2E 28 0E F2 | 	cmp	local02, #46 wz
2b9ac     08 4E 05 A1 |  if_e	add	fp, #8
2b9b0     A7 04 68 AC |  if_e	wrlong	#2, fp
2b9b4     08 4E C5 F3 | 	sumz	fp, #8
2b9b8     A7 00 68 5C |  if_ne	wrlong	#0, fp
2b9bc     08 4E 85 51 |  if_ne	sub	fp, #8
2b9c0     44 4E 05 F1 | 	add	fp, #68
2b9c4     A7 28 02 FB | 	rdlong	local02, fp
2b9c8     44 4E 85 F1 | 	sub	fp, #68
2b9cc     08 00 00 FF 
2b9d0     00 28 0E F2 | 	cmp	local02, ##4096 wz
2b9d4     18 00 90 5D |  if_ne	jmp	#LR__4213
2b9d8     08 4E 05 F1 | 	add	fp, #8
2b9dc     A7 28 02 FB | 	rdlong	local02, fp
2b9e0     10 28 46 F5 | 	or	local02, #16
2b9e4     A7 28 62 FC | 	wrlong	local02, fp
2b9e8     08 4E 85 F1 | 	sub	fp, #8
2b9ec     AC 00 90 FD | 	jmp	#LR__4218
2b9f0                 | LR__4213
2b9f0     44 4E 05 F1 | 	add	fp, #68
2b9f4     A7 28 02 FB | 	rdlong	local02, fp
2b9f8     44 4E 85 F1 | 	sub	fp, #68
2b9fc     10 00 00 FF 
2ba00     00 28 0E F2 | 	cmp	local02, ##8192 wz
2ba04     44 4E 05 51 |  if_ne	add	fp, #68
2ba08     A7 26 02 5B |  if_ne	rdlong	local01, fp
2ba0c     44 4E 85 51 |  if_ne	sub	fp, #68
2ba10     18 00 00 5F 
2ba14     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2ba18     44 4E 05 51 |  if_ne	add	fp, #68
2ba1c     13 2B 02 56 |  if_ne	mov	local03, local01
2ba20     44 4E 85 51 |  if_ne	sub	fp, #68
2ba24     20 00 00 5F 
2ba28     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2ba2c     18 00 90 5D |  if_ne	jmp	#LR__4214
2ba30     08 4E 05 F1 | 	add	fp, #8
2ba34     A7 28 02 FB | 	rdlong	local02, fp
2ba38     04 28 46 F5 | 	or	local02, #4
2ba3c     A7 28 62 FC | 	wrlong	local02, fp
2ba40     08 4E 85 F1 | 	sub	fp, #8
2ba44     54 00 90 FD | 	jmp	#LR__4217
2ba48                 | LR__4214
2ba48     18 4E 05 F1 | 	add	fp, #24
2ba4c     A7 28 02 FB | 	rdlong	local02, fp
2ba50     18 4E 85 F1 | 	sub	fp, #24
2ba54     92 28 CE F7 | 	test	local02, #146 wz
2ba58     18 00 90 5D |  if_ne	jmp	#LR__4215
2ba5c     08 4E 05 F1 | 	add	fp, #8
2ba60     A7 28 02 FB | 	rdlong	local02, fp
2ba64     01 28 46 F5 | 	or	local02, #1
2ba68     A7 28 62 FC | 	wrlong	local02, fp
2ba6c     08 4E 85 F1 | 	sub	fp, #8
2ba70     28 00 90 FD | 	jmp	#LR__4216
2ba74                 | LR__4215
2ba74     44 4E 05 F1 | 	add	fp, #68
2ba78     A7 2C 02 FB | 	rdlong	local04, fp
2ba7c     44 4E 85 F1 | 	sub	fp, #68
2ba80     08 00 00 FF 
2ba84     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2ba88     08 4E 05 51 |  if_ne	add	fp, #8
2ba8c     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2ba90     20 2C 46 55 |  if_ne	or	local04, #32
2ba94     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2ba98     08 4E 85 51 |  if_ne	sub	fp, #8
2ba9c                 | LR__4216
2ba9c                 | LR__4217
2ba9c                 | LR__4218
2ba9c     08 4E 05 F1 | 	add	fp, #8
2baa0     A7 2C 02 FB | 	rdlong	local04, fp
2baa4     08 4E 85 F1 | 	sub	fp, #8
2baa8     03 00 00 FF 
2baac     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2bab0     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2bab4     03 00 00 FF 
2bab8     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2babc     13 2D CA F7 | 	test	local04, local01 wz
2bac0     E0 FD 9F AD |  if_e	jmp	#LR__4211
2bac4                 | LR__4219
2bac4     0C 4E 05 F1 | 	add	fp, #12
2bac8     A7 12 02 FB | 	rdlong	arg01, fp
2bacc     0C 4E 85 F1 | 	sub	fp, #12
2bad0     09 2F 02 F6 | 	mov	local05, arg01
2bad4     97 06 48 FB | 	callpa	#(@LR__4221-@LR__4220)>>2,fcache_load_ptr_
2bad8                 | LR__4220
2bad8     17 FB C9 FA | 	rdbyte	result1, local05 wz
2badc     01 2E 06 51 |  if_ne	add	local05, #1
2bae0     F4 FF 9F 5D |  if_ne	jmp	#LR__4220
2bae4                 | LR__4221
2bae4     17 13 C2 F2 | 	subr	arg01, local05
2bae8     01 12 06 F1 | 	add	arg01, #1
2baec     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2baf0     48 4E 05 F1 | 	add	fp, #72
2baf4     A7 FA 61 FC | 	wrlong	result1, fp
2baf8     48 4E 85 F1 | 	sub	fp, #72
2bafc     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb00     18 00 90 AD |  if_e	jmp	#LR__4222
2bb04     48 4E 05 F1 | 	add	fp, #72
2bb08     A7 12 02 FB | 	rdlong	arg01, fp
2bb0c     3C 4E 85 F1 | 	sub	fp, #60
2bb10     A7 14 02 FB | 	rdlong	arg02, fp
2bb14     0C 4E 85 F1 | 	sub	fp, #12
2bb18     10 9E BF FD | 	call	#__system____builtin_strcpy
2bb1c                 | LR__4222
2bb1c     48 4E 05 F1 | 	add	fp, #72
2bb20     A7 FA 01 FB | 	rdlong	result1, fp
2bb24     48 4E 85 F1 | 	sub	fp, #72
2bb28                 | LR__4223
2bb28     A7 F0 03 F6 | 	mov	ptra, fp
2bb2c     B2 00 A0 FD | 	call	#popregs_
2bb30                 | __system___basic_dir_ret
2bb30     2D 00 64 FD | 	ret
2bb34                 | 
2bb34                 | __system__pack_0671
2bb34     09 01 02 F6 | 	mov	_var01, arg01
2bb38     7F 16 06 F1 | 	add	arg03, #127
2bb3c     04 18 CE F7 | 	test	arg04, #4 wz
2bb40     10 00 90 AD |  if_e	jmp	#LR__4230
2bb44     00 00 0E F2 | 	cmp	_var01, #0 wz
2bb48     16 00 C6 A9 |  if_e	decod	_var01, #22
2bb4c     F7 00 26 F4 | 	bith	_var01, #247
2bb50     B4 00 90 FD | 	jmp	#LR__4239
2bb54                 | LR__4230
2bb54     02 18 CE F7 | 	test	arg04, #2 wz
2bb58     00 C0 3F 5F 
2bb5c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2bb60     00 14 06 56 |  if_ne	mov	arg02, #0
2bb64     A0 00 90 5D |  if_ne	jmp	#LR__4238
2bb68     08 18 CE F7 | 	test	arg04, #8 wz
2bb6c     00 00 06 56 |  if_ne	mov	_var01, #0
2bb70     94 00 90 5D |  if_ne	jmp	#LR__4237
2bb74     FF 16 56 F2 | 	cmps	arg03, #255 wc
2bb78     00 C0 3F 3F 
2bb7c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2bb80     00 14 06 36 |  if_ae	mov	arg02, #0
2bb84     80 00 90 3D |  if_ae	jmp	#LR__4236
2bb88     01 16 56 F2 | 	cmps	arg03, #1 wc
2bb8c     6C 00 90 3D |  if_ae	jmp	#LR__4234
2bb90     01 14 46 F0 | 	shr	arg02, #1
2bb94     00 03 02 F6 | 	mov	_var02, _var01
2bb98     01 02 06 F5 | 	and	_var02, #1
2bb9c     1F 02 66 F0 | 	shl	_var02, #31
2bba0     01 15 42 F5 | 	or	arg02, _var02
2bba4     01 00 46 F0 | 	shr	_var01, #1
2bba8     97 1E 48 FB | 	callpa	#(@LR__4232-@LR__4231)>>2,fcache_load_ptr_
2bbac                 | LR__4231
2bbac     00 16 56 F2 | 	cmps	arg03, #0 wc
2bbb0     34 00 90 3D |  if_ae	jmp	#LR__4233
2bbb4     00 00 0E F2 | 	cmp	_var01, #0 wz
2bbb8     2C 00 90 AD |  if_e	jmp	#LR__4233
2bbbc     0A 13 02 F6 | 	mov	arg01, arg02
2bbc0     01 12 06 F5 | 	and	arg01, #1
2bbc4     01 16 06 F1 | 	add	arg03, #1
2bbc8     01 14 46 F0 | 	shr	arg02, #1
2bbcc     00 03 02 F6 | 	mov	_var02, _var01
2bbd0     01 02 06 F5 | 	and	_var02, #1
2bbd4     1F 02 66 F0 | 	shl	_var02, #31
2bbd8     01 15 42 F5 | 	or	arg02, _var02
2bbdc     09 15 42 F5 | 	or	arg02, arg01
2bbe0     01 00 46 F0 | 	shr	_var01, #1
2bbe4     C4 FF 9F FD | 	jmp	#LR__4231
2bbe8                 | LR__4232
2bbe8                 | LR__4233
2bbe8     00 16 56 F2 | 	cmps	arg03, #0 wc
2bbec     18 00 90 3D |  if_ae	jmp	#LR__4235
2bbf0     00 14 0E F2 | 	cmp	arg02, #0 wz
2bbf4     6F 14 62 FD | 	wrnz	arg02
2bbf8     0C 00 90 FD | 	jmp	#LR__4235
2bbfc                 | LR__4234
2bbfc     17 01 06 F4 | 	bitl	_var01, #279
2bc00     17 16 66 F0 | 	shl	arg03, #23
2bc04     0B 01 42 F5 | 	or	_var01, arg03
2bc08                 | LR__4235
2bc08                 | LR__4236
2bc08                 | LR__4237
2bc08                 | LR__4238
2bc08                 | LR__4239
2bc08     01 00 CE F7 | 	test	_var01, #1 wz
2bc0c     01 14 46 55 |  if_ne	or	arg02, #1
2bc10     0A 17 02 F6 | 	mov	arg03, arg02
2bc14     00 02 06 F6 | 	mov	_var02, #0
2bc18     FF FF 3F FF 
2bc1c     FF 15 06 F1 | 	add	arg02, ##2147483647
2bc20     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2bc24     01 02 06 C6 |  if_b	mov	_var02, #1
2bc28     01 01 02 F1 | 	add	_var01, _var02
2bc2c     01 18 CE F7 | 	test	arg04, #1 wz
2bc30     1F 00 26 54 |  if_ne	bith	_var01, #31
2bc34     00 FB 01 F6 | 	mov	result1, _var01
2bc38                 | __system__pack_0671_ret
2bc38     2D 00 64 FD | 	ret
2bc3c                 | 
2bc3c                 | __system___rxtxioctl_0761
2bc3c     00 15 0E F2 | 	cmp	arg02, #256 wz
2bc40     0C 00 90 AD |  if_e	jmp	#LR__4240
2bc44     01 15 0E F2 | 	cmp	arg02, #257 wz
2bc48     1C 00 90 AD |  if_e	jmp	#LR__4241
2bc4c     30 00 90 FD | 	jmp	#LR__4242
2bc50                 | LR__4240
2bc50     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2bc54     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2bc58     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2bc5c     0B FB 61 FC | 	wrlong	result1, arg03
2bc60     00 FA 05 F6 | 	mov	result1, #0
2bc64     28 00 90 FD | 	jmp	#LR__4243
2bc68                 | LR__4241
2bc68     0B 13 02 FB | 	rdlong	arg01, arg03
2bc6c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2bc70     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bc74     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2bc78     00 FA 05 F6 | 	mov	result1, #0
2bc7c     10 00 90 FD | 	jmp	#LR__4243
2bc80                 | LR__4242
2bc80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bc84     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2bc88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bc8c     01 FA 65 F6 | 	neg	result1, #1
2bc90                 | LR__4243
2bc90                 | __system___rxtxioctl_0761_ret
2bc90     2D 00 64 FD | 	ret
2bc94                 | 
2bc94                 | __system____dummy_flush_0762
2bc94     00 FA 05 F6 | 	mov	result1, #0
2bc98                 | __system____dummy_flush_0762_ret
2bc98     2D 00 64 FD | 	ret
2bc9c                 | 
2bc9c                 | __system___vfswrite
2bc9c     09 4A 05 F6 | 	mov	COUNT_, #9
2bca0     A8 00 A0 FD | 	call	#pushregs_
2bca4     09 27 02 F6 | 	mov	local01, arg01
2bca8     0A 29 02 F6 | 	mov	local02, arg02
2bcac     0B 2B 02 F6 | 	mov	local03, arg03
2bcb0     14 2D 02 F6 | 	mov	local04, local02
2bcb4     08 26 06 F1 | 	add	local01, #8
2bcb8     13 13 02 FB | 	rdlong	arg01, local01
2bcbc     08 26 86 F1 | 	sub	local01, #8
2bcc0     02 12 CE F7 | 	test	arg01, #2 wz
2bcc4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bcc8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2bccc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bcd0     01 FA 65 A6 |  if_e	neg	result1, #1
2bcd4     80 01 90 AD |  if_e	jmp	#LR__4256
2bcd8     08 26 06 F1 | 	add	local01, #8
2bcdc     13 FB 01 FB | 	rdlong	result1, local01
2bce0     08 26 86 F1 | 	sub	local01, #8
2bce4     40 FA CD F7 | 	test	result1, #64 wz
2bce8     68 00 90 AD |  if_e	jmp	#LR__4251
2bcec     08 26 06 F1 | 	add	local01, #8
2bcf0     13 15 02 FB | 	rdlong	arg02, local01
2bcf4     08 26 86 F1 | 	sub	local01, #8
2bcf8     80 14 CE F7 | 	test	arg02, #128 wz
2bcfc     54 00 90 AD |  if_e	jmp	#LR__4250
2bd00     30 26 06 F1 | 	add	local01, #48
2bd04     13 2F 02 FB | 	rdlong	local05, local01
2bd08     17 31 02 F6 | 	mov	local06, local05
2bd0c     30 26 86 F1 | 	sub	local01, #48
2bd10     13 30 46 F7 | 	zerox	local06, #19
2bd14     14 2E 46 F0 | 	shr	local05, #20
2bd18     02 2E 66 F0 | 	shl	local05, #2
2bd1c     ED 2E 02 F1 | 	add	local05, __methods__
2bd20     17 2F 02 FB | 	rdlong	local05, local05
2bd24     13 13 02 F6 | 	mov	arg01, local01
2bd28     00 14 06 F6 | 	mov	arg02, #0
2bd2c     02 16 06 F6 | 	mov	arg03, #2
2bd30     F2 32 02 F6 | 	mov	local07, objptr
2bd34     18 E5 01 F6 | 	mov	objptr, local06
2bd38     2D 2E 62 FD | 	call	local05
2bd3c     19 E5 01 F6 | 	mov	objptr, local07
2bd40     08 26 06 F1 | 	add	local01, #8
2bd44     13 33 02 FB | 	rdlong	local07, local01
2bd48     80 32 26 F5 | 	andn	local07, #128
2bd4c     13 33 62 FC | 	wrlong	local07, local01
2bd50     08 26 86 F1 | 	sub	local01, #8
2bd54                 | LR__4250
2bd54                 | LR__4251
2bd54     18 26 06 F1 | 	add	local01, #24
2bd58     13 33 0A FB | 	rdlong	local07, local01 wz
2bd5c     18 26 86 F1 | 	sub	local01, #24
2bd60     80 00 90 AD |  if_e	jmp	#LR__4253
2bd64     18 26 06 F1 | 	add	local01, #24
2bd68     13 2F 02 FB | 	rdlong	local05, local01
2bd6c     17 31 02 F6 | 	mov	local06, local05
2bd70     18 26 86 F1 | 	sub	local01, #24
2bd74     13 30 46 F7 | 	zerox	local06, #19
2bd78     14 2E 46 F0 | 	shr	local05, #20
2bd7c     02 2E 66 F0 | 	shl	local05, #2
2bd80     ED 2E 02 F1 | 	add	local05, __methods__
2bd84     17 2F 02 FB | 	rdlong	local05, local05
2bd88     14 15 02 F6 | 	mov	arg02, local02
2bd8c     15 17 02 F6 | 	mov	arg03, local03
2bd90     13 13 02 F6 | 	mov	arg01, local01
2bd94     F2 32 02 F6 | 	mov	local07, objptr
2bd98     18 E5 01 F6 | 	mov	objptr, local06
2bd9c     2D 2E 62 FD | 	call	local05
2bda0     19 E5 01 F6 | 	mov	objptr, local07
2bda4     FD 34 02 F6 | 	mov	local08, result1
2bda8     00 34 56 F2 | 	cmps	local08, #0 wc
2bdac     2C 00 90 3D |  if_ae	jmp	#LR__4252
2bdb0     08 26 06 F1 | 	add	local01, #8
2bdb4     13 33 02 FB | 	rdlong	local07, local01
2bdb8     20 32 46 F5 | 	or	local07, #32
2bdbc     13 33 62 FC | 	wrlong	local07, local01
2bdc0     00 34 4E F2 | 	cmps	local08, #0 wz
2bdc4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bdc8     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2bdcc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bdd0     01 FA 65 56 |  if_ne	neg	result1, #1
2bdd4     00 FA 05 A6 |  if_e	mov	result1, #0
2bdd8     7C 00 90 FD | 	jmp	#LR__4256
2bddc                 | LR__4252
2bddc     1A FB 01 F6 | 	mov	result1, local08
2bde0     74 00 90 FD | 	jmp	#LR__4256
2bde4                 | LR__4253
2bde4     1C 26 06 F1 | 	add	local01, #28
2bde8     13 37 0A FB | 	rdlong	local09, local01 wz
2bdec     1C 26 86 F1 | 	sub	local01, #28
2bdf0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bdf4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2bdf8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bdfc     01 FA 65 A6 |  if_e	neg	result1, #1
2be00     54 00 90 AD |  if_e	jmp	#LR__4256
2be04     00 34 06 F6 | 	mov	local08, #0
2be08                 | LR__4254
2be08     01 2A 16 F2 | 	cmp	local03, #1 wc
2be0c     44 00 90 CD |  if_b	jmp	#LR__4255
2be10     1B 31 02 F6 | 	mov	local06, local09
2be14     1B 2F 02 F6 | 	mov	local05, local09
2be18     13 30 46 F7 | 	zerox	local06, #19
2be1c     14 2E 46 F0 | 	shr	local05, #20
2be20     02 2E 66 F0 | 	shl	local05, #2
2be24     ED 2E 02 F1 | 	add	local05, __methods__
2be28     17 2F 02 FB | 	rdlong	local05, local05
2be2c     16 13 C2 FA | 	rdbyte	arg01, local04
2be30     13 15 02 F6 | 	mov	arg02, local01
2be34     F2 32 02 F6 | 	mov	local07, objptr
2be38     18 E5 01 F6 | 	mov	objptr, local06
2be3c     01 2C 06 F1 | 	add	local04, #1
2be40     2D 2E 62 FD | 	call	local05
2be44     19 E5 01 F6 | 	mov	objptr, local07
2be48     FD 34 02 F1 | 	add	local08, result1
2be4c     01 2A 86 F1 | 	sub	local03, #1
2be50     B4 FF 9F FD | 	jmp	#LR__4254
2be54                 | LR__4255
2be54     1A FB 01 F6 | 	mov	result1, local08
2be58                 | LR__4256
2be58     A7 F0 03 F6 | 	mov	ptra, fp
2be5c     B2 00 A0 FD | 	call	#popregs_
2be60                 | __system___vfswrite_ret
2be60     2D 00 64 FD | 	ret
2be64                 | 
2be64                 | __system___vfsread
2be64     03 4A 05 F6 | 	mov	COUNT_, #3
2be68     A8 00 A0 FD | 	call	#pushregs_
2be6c     28 F0 07 F1 | 	add	ptra, #40
2be70     04 4E 05 F1 | 	add	fp, #4
2be74     A7 12 62 FC | 	wrlong	arg01, fp
2be78     04 4E 05 F1 | 	add	fp, #4
2be7c     A7 14 62 FC | 	wrlong	arg02, fp
2be80     04 4E 05 F1 | 	add	fp, #4
2be84     A7 16 62 FC | 	wrlong	arg03, fp
2be88     04 4E 85 F1 | 	sub	fp, #4
2be8c     A7 FA 01 FB | 	rdlong	result1, fp
2be90     14 4E 05 F1 | 	add	fp, #20
2be94     A7 FA 61 FC | 	wrlong	result1, fp
2be98     04 4E 05 F1 | 	add	fp, #4
2be9c     A7 00 68 FC | 	wrlong	#0, fp
2bea0     1C 4E 85 F1 | 	sub	fp, #28
2bea4     A7 12 02 FB | 	rdlong	arg01, fp
2bea8     04 4E 85 F1 | 	sub	fp, #4
2beac     08 12 06 F1 | 	add	arg01, #8
2beb0     09 FB 01 FB | 	rdlong	result1, arg01
2beb4     01 FA CD F7 | 	test	result1, #1 wz
2beb8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bebc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2bec0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bec4     01 FA 65 A6 |  if_e	neg	result1, #1
2bec8     74 02 90 AD |  if_e	jmp	#LR__4266
2becc     04 4E 05 F1 | 	add	fp, #4
2bed0     A7 12 02 FB | 	rdlong	arg01, fp
2bed4     04 4E 85 F1 | 	sub	fp, #4
2bed8     14 12 06 F1 | 	add	arg01, #20
2bedc     09 FB 09 FB | 	rdlong	result1, arg01 wz
2bee0     B8 00 90 AD |  if_e	jmp	#LR__4261
2bee4     04 4E 05 F1 | 	add	fp, #4
2bee8     A7 12 02 FB | 	rdlong	arg01, fp
2beec     09 17 02 F6 | 	mov	arg03, arg01
2bef0     14 16 06 F1 | 	add	arg03, #20
2bef4     0B 27 02 FB | 	rdlong	local01, arg03
2bef8     13 29 02 F6 | 	mov	local02, local01
2befc     13 26 46 F7 | 	zerox	local01, #19
2bf00     14 28 46 F0 | 	shr	local02, #20
2bf04     02 28 66 F0 | 	shl	local02, #2
2bf08     ED 28 02 F1 | 	add	local02, __methods__
2bf0c     14 29 02 FB | 	rdlong	local02, local02
2bf10     04 4E 05 F1 | 	add	fp, #4
2bf14     A7 14 02 FB | 	rdlong	arg02, fp
2bf18     04 4E 05 F1 | 	add	fp, #4
2bf1c     A7 16 02 FB | 	rdlong	arg03, fp
2bf20     0C 4E 85 F1 | 	sub	fp, #12
2bf24     F2 2A 02 F6 | 	mov	local03, objptr
2bf28     13 E5 01 F6 | 	mov	objptr, local01
2bf2c     2D 28 62 FD | 	call	local02
2bf30     15 E5 01 F6 | 	mov	objptr, local03
2bf34     10 4E 05 F1 | 	add	fp, #16
2bf38     A7 FA 61 FC | 	wrlong	result1, fp
2bf3c     10 4E 85 F1 | 	sub	fp, #16
2bf40     00 FA 55 F2 | 	cmps	result1, #0 wc
2bf44     44 00 90 3D |  if_ae	jmp	#LR__4260
2bf48     04 4E 05 F1 | 	add	fp, #4
2bf4c     A7 2A 02 FB | 	rdlong	local03, fp
2bf50     15 27 02 F6 | 	mov	local01, local03
2bf54     08 2A 06 F1 | 	add	local03, #8
2bf58     15 29 02 FB | 	rdlong	local02, local03
2bf5c     20 28 46 F5 | 	or	local02, #32
2bf60     08 26 06 F1 | 	add	local01, #8
2bf64     13 29 62 FC | 	wrlong	local02, local01
2bf68     0C 4E 05 F1 | 	add	fp, #12
2bf6c     A7 12 0A FB | 	rdlong	arg01, fp wz
2bf70     10 4E 85 F1 | 	sub	fp, #16
2bf74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bf78     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bf7c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bf80     01 FA 65 56 |  if_ne	neg	result1, #1
2bf84     00 FA 05 A6 |  if_e	mov	result1, #0
2bf88     B4 01 90 FD | 	jmp	#LR__4266
2bf8c                 | LR__4260
2bf8c     10 4E 05 F1 | 	add	fp, #16
2bf90     A7 FA 01 FB | 	rdlong	result1, fp
2bf94     10 4E 85 F1 | 	sub	fp, #16
2bf98     A4 01 90 FD | 	jmp	#LR__4266
2bf9c                 | LR__4261
2bf9c     04 4E 05 F1 | 	add	fp, #4
2bfa0     A7 12 02 FB | 	rdlong	arg01, fp
2bfa4     20 12 06 F1 | 	add	arg01, #32
2bfa8     09 13 0A FB | 	rdlong	arg01, arg01 wz
2bfac     14 4E 05 F1 | 	add	fp, #20
2bfb0     A7 12 62 FC | 	wrlong	arg01, fp
2bfb4     18 4E 85 F1 | 	sub	fp, #24
2bfb8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bfbc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2bfc0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bfc4     01 FA 65 A6 |  if_e	neg	result1, #1
2bfc8     74 01 90 AD |  if_e	jmp	#LR__4266
2bfcc     04 4E 05 F1 | 	add	fp, #4
2bfd0     A7 2A 02 FB | 	rdlong	local03, fp
2bfd4     04 4E 85 F1 | 	sub	fp, #4
2bfd8     28 2A 06 F1 | 	add	local03, #40
2bfdc     15 29 0A FB | 	rdlong	local02, local03 wz
2bfe0     7C 00 90 AD |  if_e	jmp	#LR__4263
2bfe4     04 4E 05 F1 | 	add	fp, #4
2bfe8     A7 12 02 FB | 	rdlong	arg01, fp
2bfec     09 2B 02 F6 | 	mov	local03, arg01
2bff0     28 2A 06 F1 | 	add	local03, #40
2bff4     15 27 02 FB | 	rdlong	local01, local03
2bff8     13 29 02 F6 | 	mov	local02, local01
2bffc     13 26 46 F7 | 	zerox	local01, #19
2c000     14 28 46 F0 | 	shr	local02, #20
2c004     02 28 66 F0 | 	shl	local02, #2
2c008     ED 28 02 F1 | 	add	local02, __methods__
2c00c     14 29 02 FB | 	rdlong	local02, local02
2c010     20 4E 05 F1 | 	add	fp, #32
2c014     A7 16 02 F6 | 	mov	arg03, fp
2c018     24 4E 85 F1 | 	sub	fp, #36
2c01c     00 15 06 F6 | 	mov	arg02, #256
2c020     F2 2A 02 F6 | 	mov	local03, objptr
2c024     13 E5 01 F6 | 	mov	objptr, local01
2c028     2D 28 62 FD | 	call	local02
2c02c     15 E5 01 F6 | 	mov	objptr, local03
2c030     10 4E 05 F1 | 	add	fp, #16
2c034     A7 FA 61 FC | 	wrlong	result1, fp
2c038     00 FA 4D F2 | 	cmps	result1, #0 wz
2c03c     10 4E 85 F1 | 	sub	fp, #16
2c040     1C 00 90 5D |  if_ne	jmp	#LR__4262
2c044     24 4E 05 F1 | 	add	fp, #36
2c048     A7 28 02 FB | 	rdlong	local02, fp
2c04c     24 4E 85 F1 | 	sub	fp, #36
2c050     02 28 CE F7 | 	test	local02, #2 wz
2c054     20 4E 05 51 |  if_ne	add	fp, #32
2c058     A7 02 68 5C |  if_ne	wrlong	#1, fp
2c05c     20 4E 85 51 |  if_ne	sub	fp, #32
2c060                 | LR__4262
2c060                 | LR__4263
2c060     10 4E 05 F1 | 	add	fp, #16
2c064     A7 00 68 FC | 	wrlong	#0, fp
2c068     10 4E 85 F1 | 	sub	fp, #16
2c06c                 | LR__4264
2c06c     0C 4E 05 F1 | 	add	fp, #12
2c070     A7 2A 02 FB | 	rdlong	local03, fp
2c074     0C 4E 85 F1 | 	sub	fp, #12
2c078     01 2A 16 F2 | 	cmp	local03, #1 wc
2c07c     B4 00 90 CD |  if_b	jmp	#LR__4265
2c080     18 4E 05 F1 | 	add	fp, #24
2c084     A7 28 02 FB | 	rdlong	local02, fp
2c088     14 2B 02 F6 | 	mov	local03, local02
2c08c     13 2A 46 F7 | 	zerox	local03, #19
2c090     14 28 46 F0 | 	shr	local02, #20
2c094     02 28 66 F0 | 	shl	local02, #2
2c098     ED 28 02 F1 | 	add	local02, __methods__
2c09c     14 29 02 FB | 	rdlong	local02, local02
2c0a0     14 4E 85 F1 | 	sub	fp, #20
2c0a4     A7 12 02 FB | 	rdlong	arg01, fp
2c0a8     04 4E 85 F1 | 	sub	fp, #4
2c0ac     F2 26 02 F6 | 	mov	local01, objptr
2c0b0     15 E5 01 F6 | 	mov	objptr, local03
2c0b4     2D 28 62 FD | 	call	local02
2c0b8     13 E5 01 F6 | 	mov	objptr, local01
2c0bc     14 4E 05 F1 | 	add	fp, #20
2c0c0     A7 FA 61 FC | 	wrlong	result1, fp
2c0c4     14 4E 85 F1 | 	sub	fp, #20
2c0c8     00 FA 55 F2 | 	cmps	result1, #0 wc
2c0cc     64 00 90 CD |  if_b	jmp	#LR__4265
2c0d0     1C 4E 05 F1 | 	add	fp, #28
2c0d4     A7 2A 02 FB | 	rdlong	local03, fp
2c0d8     15 29 02 F6 | 	mov	local02, local03
2c0dc     01 28 06 F1 | 	add	local02, #1
2c0e0     A7 28 62 FC | 	wrlong	local02, fp
2c0e4     08 4E 85 F1 | 	sub	fp, #8
2c0e8     A7 28 02 FB | 	rdlong	local02, fp
2c0ec     15 29 42 FC | 	wrbyte	local02, local03
2c0f0     04 4E 85 F1 | 	sub	fp, #4
2c0f4     A7 2A 02 FB | 	rdlong	local03, fp
2c0f8     01 2A 06 F1 | 	add	local03, #1
2c0fc     A7 2A 62 FC | 	wrlong	local03, fp
2c100     04 4E 85 F1 | 	sub	fp, #4
2c104     A7 2A 02 FB | 	rdlong	local03, fp
2c108     01 2A 86 F1 | 	sub	local03, #1
2c10c     A7 2A 62 FC | 	wrlong	local03, fp
2c110     14 4E 05 F1 | 	add	fp, #20
2c114     A7 2A 0A FB | 	rdlong	local03, fp wz
2c118     20 4E 85 F1 | 	sub	fp, #32
2c11c     4C FF 9F AD |  if_e	jmp	#LR__4264
2c120     14 4E 05 F1 | 	add	fp, #20
2c124     A7 28 02 FB | 	rdlong	local02, fp
2c128     14 4E 85 F1 | 	sub	fp, #20
2c12c     0A 28 0E F2 | 	cmp	local02, #10 wz
2c130     38 FF 9F 5D |  if_ne	jmp	#LR__4264
2c134                 | LR__4265
2c134     10 4E 05 F1 | 	add	fp, #16
2c138     A7 FA 01 FB | 	rdlong	result1, fp
2c13c     10 4E 85 F1 | 	sub	fp, #16
2c140                 | LR__4266
2c140     A7 F0 03 F6 | 	mov	ptra, fp
2c144     B2 00 A0 FD | 	call	#popregs_
2c148                 | __system___vfsread_ret
2c148     2D 00 64 FD | 	ret
2c14c                 | 
2c14c                 | __system____default_filbuf
2c14c     04 4A 05 F6 | 	mov	COUNT_, #4
2c150     A8 00 A0 FD | 	call	#pushregs_
2c154     09 27 02 F6 | 	mov	local01, arg01
2c158     13 29 02 FB | 	rdlong	local02, local01
2c15c     0C 28 06 F1 | 	add	local02, #12
2c160     14 FB 09 FB | 	rdlong	result1, local02 wz
2c164     0C 28 86 F1 | 	sub	local02, #12
2c168     20 00 90 5D |  if_ne	jmp	#LR__4270
2c16c     14 28 06 F1 | 	add	local02, #20
2c170     14 FB 01 F6 | 	mov	result1, local02
2c174     04 28 86 F1 | 	sub	local02, #4
2c178     14 FB 61 FC | 	wrlong	result1, local02
2c17c     04 28 86 F1 | 	sub	local02, #4
2c180     02 00 80 FF 
2c184     14 01 68 FC | 	wrlong	##1024, local02
2c188     0C 28 86 F1 | 	sub	local02, #12
2c18c                 | LR__4270
2c18c     14 26 06 F1 | 	add	local01, #20
2c190     13 2B 02 FB | 	rdlong	local03, local01
2c194     15 2D 02 F6 | 	mov	local04, local03
2c198     14 26 86 F1 | 	sub	local01, #20
2c19c     13 2C 46 F7 | 	zerox	local04, #19
2c1a0     14 2A 46 F0 | 	shr	local03, #20
2c1a4     02 2A 66 F0 | 	shl	local03, #2
2c1a8     ED 2A 02 F1 | 	add	local03, __methods__
2c1ac     15 2B 02 FB | 	rdlong	local03, local03
2c1b0     10 28 06 F1 | 	add	local02, #16
2c1b4     14 15 02 FB | 	rdlong	arg02, local02
2c1b8     04 28 86 F1 | 	sub	local02, #4
2c1bc     14 17 02 FB | 	rdlong	arg03, local02
2c1c0     0C 28 86 F1 | 	sub	local02, #12
2c1c4     13 13 02 F6 | 	mov	arg01, local01
2c1c8     F2 26 02 F6 | 	mov	local01, objptr
2c1cc     16 E5 01 F6 | 	mov	objptr, local04
2c1d0     2D 2A 62 FD | 	call	local03
2c1d4     13 E5 01 F6 | 	mov	objptr, local01
2c1d8     FD 2C 02 F6 | 	mov	local04, result1
2c1dc     00 2C 56 F2 | 	cmps	local04, #0 wc
2c1e0     01 FA 65 C6 |  if_b	neg	result1, #1
2c1e4     28 00 90 CD |  if_b	jmp	#LR__4271
2c1e8     14 2D 62 FC | 	wrlong	local04, local02
2c1ec     10 28 06 F1 | 	add	local02, #16
2c1f0     14 2B 02 FB | 	rdlong	local03, local02
2c1f4     0C 28 86 F1 | 	sub	local02, #12
2c1f8     14 2B 62 FC | 	wrlong	local03, local02
2c1fc     04 28 06 F1 | 	add	local02, #4
2c200     14 2B 02 FB | 	rdlong	local03, local02
2c204     01 2A 46 F5 | 	or	local03, #1
2c208     14 2B 62 FC | 	wrlong	local03, local02
2c20c     16 FB 01 F6 | 	mov	result1, local04
2c210                 | LR__4271
2c210     A7 F0 03 F6 | 	mov	ptra, fp
2c214     B2 00 A0 FD | 	call	#popregs_
2c218                 | __system____default_filbuf_ret
2c218     2D 00 64 FD | 	ret
2c21c                 | 
2c21c                 | __system__getlower_1151
2c21c     41 12 56 F2 | 	cmps	arg01, #65 wc
2c220     10 00 90 CD |  if_b	jmp	#LR__4280
2c224     5B 12 56 F2 | 	cmps	arg01, #91 wc
2c228     09 FB 01 C6 |  if_b	mov	result1, arg01
2c22c     20 FA 05 C1 |  if_b	add	result1, #32
2c230     04 00 90 CD |  if_b	jmp	#__system__getlower_1151_ret
2c234                 | LR__4280
2c234     09 FB 01 F6 | 	mov	result1, arg01
2c238                 | __system__getlower_1151_ret
2c238     2D 00 64 FD | 	ret
2c23c                 | 
2c23c                 | __system___pat_match
2c23c     08 4A 05 F6 | 	mov	COUNT_, #8
2c240     A8 00 A0 FD | 	call	#pushregs_
2c244     09 27 02 F6 | 	mov	local01, arg01
2c248                 | LR__4290
2c248     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2c24c     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2c250     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2c254     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2c258     2C 00 90 AD |  if_e	jmp	#LR__4291
2c25c     0A 13 C2 FA | 	rdbyte	arg01, arg02
2c260     B8 FF BF FD | 	call	#__system__getlower_1151
2c264     FD 2A 02 F6 | 	mov	local03, result1
2c268     13 13 C2 FA | 	rdbyte	arg01, local01
2c26c     AC FF BF FD | 	call	#__system__getlower_1151
2c270     15 FB 09 F2 | 	cmp	result1, local03 wz
2c274     00 FA 05 56 |  if_ne	mov	result1, #0
2c278     FC 00 90 5D |  if_ne	jmp	#LR__4299
2c27c     01 26 06 F1 | 	add	local01, #1
2c280     01 14 06 F1 | 	add	arg02, #1
2c284     C0 FF 9F FD | 	jmp	#LR__4290
2c288                 | LR__4291
2c288     0A 2B C2 FA | 	rdbyte	local03, arg02
2c28c     2A 2A 0E F2 | 	cmp	local03, #42 wz
2c290     D4 00 90 5D |  if_ne	jmp	#LR__4298
2c294     01 14 06 F1 | 	add	arg02, #1
2c298     0A 29 C2 FA | 	rdbyte	local02, arg02
2c29c     01 14 86 F1 | 	sub	arg02, #1
2c2a0     2E 28 0E F2 | 	cmp	local02, #46 wz
2c2a4     28 00 90 5D |  if_ne	jmp	#LR__4292
2c2a8     02 14 06 F1 | 	add	arg02, #2
2c2ac     0A 29 C2 FA | 	rdbyte	local02, arg02
2c2b0     02 14 86 F1 | 	sub	arg02, #2
2c2b4     2A 28 0E F2 | 	cmp	local02, #42 wz
2c2b8     03 14 06 A1 |  if_e	add	arg02, #3
2c2bc     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2c2c0     03 14 86 A1 |  if_e	sub	arg02, #3
2c2c4     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2c2c8     01 FA 05 A6 |  if_e	mov	result1, #1
2c2cc     A8 00 90 AD |  if_e	jmp	#LR__4299
2c2d0                 | LR__4292
2c2d0     01 14 06 F1 | 	add	arg02, #1
2c2d4     00 30 06 F6 | 	mov	local06, #0
2c2d8     97 1E 48 FB | 	callpa	#(@LR__4295-@LR__4293)>>2,fcache_load_ptr_
2c2dc                 | LR__4293
2c2dc     18 33 02 F6 | 	mov	local07, local06
2c2e0     0A 33 02 F1 | 	add	local07, arg02
2c2e4     19 33 CA FA | 	rdbyte	local07, local07 wz
2c2e8     18 2F 02 56 |  if_ne	mov	local05, local06
2c2ec     01 2E 06 51 |  if_ne	add	local05, #1
2c2f0     17 31 02 56 |  if_ne	mov	local06, local05
2c2f4     E4 FF 9F 5D |  if_ne	jmp	#LR__4293
2c2f8     00 34 06 F6 | 	mov	local08, #0
2c2fc                 | LR__4294
2c2fc     1A 33 02 F6 | 	mov	local07, local08
2c300     13 33 02 F1 | 	add	local07, local01
2c304     19 33 CA FA | 	rdbyte	local07, local07 wz
2c308     1A 2F 02 56 |  if_ne	mov	local05, local08
2c30c     01 2E 06 51 |  if_ne	add	local05, #1
2c310     17 35 02 56 |  if_ne	mov	local08, local05
2c314     E4 FF 9F 5D |  if_ne	jmp	#LR__4294
2c318                 | LR__4295
2c318     18 35 52 F2 | 	cmps	local08, local06 wc
2c31c     00 FA 05 C6 |  if_b	mov	result1, #0
2c320     54 00 90 CD |  if_b	jmp	#LR__4299
2c324     1A 29 02 F6 | 	mov	local02, local08
2c328     18 29 82 F1 | 	sub	local02, local06
2c32c     14 27 02 F1 | 	add	local01, local02
2c330                 | LR__4296
2c330     01 30 56 F2 | 	cmps	local06, #1 wc
2c334     30 00 90 CD |  if_b	jmp	#LR__4297
2c338     13 13 C2 FA | 	rdbyte	arg01, local01
2c33c     DC FE BF FD | 	call	#__system__getlower_1151
2c340     FD 34 02 F6 | 	mov	local08, result1
2c344     0A 13 C2 FA | 	rdbyte	arg01, arg02
2c348     D0 FE BF FD | 	call	#__system__getlower_1151
2c34c     FD 34 0A F2 | 	cmp	local08, result1 wz
2c350     00 FA 05 56 |  if_ne	mov	result1, #0
2c354     20 00 90 5D |  if_ne	jmp	#LR__4299
2c358     01 26 06 F1 | 	add	local01, #1
2c35c     01 14 06 F1 | 	add	arg02, #1
2c360     01 30 86 F1 | 	sub	local06, #1
2c364     C8 FF 9F FD | 	jmp	#LR__4296
2c368                 | LR__4297
2c368                 | LR__4298
2c368     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2c36c     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2c370     01 FA 05 A6 |  if_e	mov	result1, #1
2c374     00 FA 05 56 |  if_ne	mov	result1, #0
2c378                 | LR__4299
2c378     A7 F0 03 F6 | 	mov	ptra, fp
2c37c     B2 00 A0 FD | 	call	#popregs_
2c380                 | __system___pat_match_ret
2c380     2D 00 64 FD | 	ret
2c384                 | 
2c384                 | _fatfs_cc_ff_uni2oem
2c384     00 00 06 F6 | 	mov	_var01, #0
2c388     80 12 16 F2 | 	cmp	arg01, #128 wc
2c38c     09 01 02 C6 |  if_b	mov	_var01, arg01
2c390     58 00 90 CD |  if_b	jmp	#LR__4304
2c394     80 00 00 FF 
2c398     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2c39c     4C 00 90 3D |  if_ae	jmp	#LR__4303
2c3a0     0A FB 31 F9 | 	getword	result1, arg02, #0
2c3a4     01 00 00 FF 
2c3a8     52 FB 0D F2 | 	cmp	result1, ##850 wz
2c3ac     3C 00 90 5D |  if_ne	jmp	#LR__4303
2c3b0                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2c3b0     00 00 06 F6 | 	mov	_var01, #0
2c3b4     97 14 48 FB | 	callpa	#(@LR__4301-@LR__4300)>>2,fcache_load_ptr_
2c3b8                 | LR__4300
2c3b8     00 FB 31 F9 | 	getword	result1, _var01, #0
2c3bc     80 FA 15 F2 | 	cmp	result1, #128 wc
2c3c0     1C 00 90 3D |  if_ae	jmp	#LR__4302
2c3c4     00 FB 31 F9 | 	getword	result1, _var01, #0
2c3c8     01 FA 65 F0 | 	shl	result1, #1
2c3cc     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2c3d0     FD FA E1 FA | 	rdword	result1, result1
2c3d4     FD 12 0A F2 | 	cmp	arg01, result1 wz
2c3d8     01 00 06 51 |  if_ne	add	_var01, #1
2c3dc     D8 FF 9F 5D |  if_ne	jmp	#LR__4300
2c3e0                 | LR__4301
2c3e0                 | LR__4302
2c3e0     00 01 32 F9 | 	getword	_var01, _var01, #0
2c3e4     80 00 06 F1 | 	add	_var01, #128
2c3e8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2c3ec                 | LR__4303
2c3ec                 | LR__4304
2c3ec                 | ' 			c = (c + 0x80) & 0xFF;
2c3ec                 | ' 		}
2c3ec                 | ' 	}
2c3ec                 | ' 
2c3ec                 | ' 	return c;
2c3ec     00 FB 01 F6 | 	mov	result1, _var01
2c3f0                 | _fatfs_cc_ff_uni2oem_ret
2c3f0     2D 00 64 FD | 	ret
2c3f4                 | 
2c3f4                 | _fatfs_cc_ff_oem2uni
2c3f4     00 00 06 F6 | 	mov	_var01, #0
2c3f8     09 FB 31 F9 | 	getword	result1, arg01, #0
2c3fc     80 FA 15 F2 | 	cmp	result1, #128 wc
2c400     09 01 02 C6 |  if_b	mov	_var01, arg01
2c404     2C 00 90 CD |  if_b	jmp	#LR__4311
2c408     0A 15 32 F9 | 	getword	arg02, arg02, #0
2c40c     01 00 00 FF 
2c410     52 15 0E F2 | 	cmp	arg02, ##850 wz
2c414     1C 00 90 5D |  if_ne	jmp	#LR__4310
2c418     09 FB 31 F9 | 	getword	result1, arg01, #0
2c41c     00 FB 15 F2 | 	cmp	result1, #256 wc
2c420     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2c424     80 12 86 C1 |  if_b	sub	arg01, #128
2c428     01 12 66 C0 |  if_b	shl	arg01, #1
2c42c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2c430     09 01 E2 CA |  if_b	rdword	_var01, arg01
2c434                 | LR__4310
2c434                 | LR__4311
2c434                 | ' 		}
2c434                 | ' 	}
2c434                 | ' 
2c434                 | ' 	return c;
2c434     00 FB 01 F6 | 	mov	result1, _var01
2c438                 | _fatfs_cc_ff_oem2uni_ret
2c438     2D 00 64 FD | 	ret
2c43c                 | 
2c43c                 | _fatfs_cc_ff_wtoupper
2c43c     09 01 02 F6 | 	mov	_var01, arg01
2c440     80 00 00 FF 
2c444     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2c448     60 01 90 3D |  if_ae	jmp	#LR__4333
2c44c     00 03 02 F6 | 	mov	_var02, _var01
2c450     01 01 32 F9 | 	getword	_var01, _var02, #0
2c454     08 00 00 FF 
2c458     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2c45c     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2c460     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2c464     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2c468     01 00 00 3F 
2c46c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2c470     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2c474     01 00 00 3F 
2c478     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2c47c     02 07 02 F6 | 	mov	_var04, _var03
2c480                 | ' 		uc = (WORD)uni;
2c480                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2c480                 | ' 		for (;;) {
2c480                 | LR__4320
2c480     03 09 E2 FA | 	rdword	_var05, _var04
2c484     04 05 02 F6 | 	mov	_var03, _var05
2c488     0F 04 4E F7 | 	zerox	_var03, #15 wz
2c48c     02 06 06 F1 | 	add	_var04, #2
2c490     14 01 90 AD |  if_e	jmp	#LR__4332
2c494     01 05 32 F9 | 	getword	_var03, _var02, #0
2c498     04 01 32 F9 | 	getword	_var01, _var05, #0
2c49c     00 05 12 F2 | 	cmp	_var03, _var01 wc
2c4a0     04 01 90 CD |  if_b	jmp	#LR__4332
2c4a4     03 0B E2 FA | 	rdword	_var06, _var04
2c4a8     05 0D 32 F9 | 	getword	_var07, _var06, #0
2c4ac     08 0C 46 F0 | 	shr	_var07, #8
2c4b0     05 0B 32 F9 | 	getword	_var06, _var06, #0
2c4b4     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2c4b8     01 05 32 F9 | 	getword	_var03, _var02, #0
2c4bc     04 0F 32 F9 | 	getword	_var08, _var05, #0
2c4c0     05 01 32 F9 | 	getword	_var01, _var06, #0
2c4c4     00 0F 02 F1 | 	add	_var08, _var01
2c4c8     07 05 52 F2 | 	cmps	_var03, _var08 wc
2c4cc     02 06 06 F1 | 	add	_var04, #2
2c4d0     C4 00 90 3D |  if_ae	jmp	#LR__4331
2c4d4                 | ' 				switch (cmd) {
2c4d4     06 11 32 F9 | 	getword	_var09, _var07, #0
2c4d8     09 10 26 F3 | 	fle	_var09, #9
2c4dc     30 10 62 FD | 	jmprel	_var09
2c4e0                 | LR__4321
2c4e0     24 00 90 FD | 	jmp	#LR__4322
2c4e4     3C 00 90 FD | 	jmp	#LR__4323
2c4e8     54 00 90 FD | 	jmp	#LR__4324
2c4ec     5C 00 90 FD | 	jmp	#LR__4325
2c4f0     64 00 90 FD | 	jmp	#LR__4326
2c4f4     6C 00 90 FD | 	jmp	#LR__4327
2c4f8     74 00 90 FD | 	jmp	#LR__4328
2c4fc     7C 00 90 FD | 	jmp	#LR__4329
2c500     84 00 90 FD | 	jmp	#LR__4330
2c504     A0 00 90 FD | 	jmp	#LR__4332
2c508                 | LR__4322
2c508     01 03 32 F9 | 	getword	_var02, _var02, #0
2c50c     04 09 32 F9 | 	getword	_var05, _var05, #0
2c510     04 03 82 F1 | 	sub	_var02, _var05
2c514     01 02 66 F0 | 	shl	_var02, #1
2c518     03 03 02 F1 | 	add	_var02, _var04
2c51c     01 03 E2 FA | 	rdword	_var02, _var02
2c520     84 00 90 FD | 	jmp	#LR__4332
2c524                 | LR__4323
2c524     01 05 32 F9 | 	getword	_var03, _var02, #0
2c528     01 03 32 F9 | 	getword	_var02, _var02, #0
2c52c     04 09 32 F9 | 	getword	_var05, _var05, #0
2c530     04 03 82 F1 | 	sub	_var02, _var05
2c534     01 02 06 F5 | 	and	_var02, #1
2c538     02 03 C2 F2 | 	subr	_var02, _var03
2c53c     68 00 90 FD | 	jmp	#LR__4332
2c540                 | LR__4324
2c540     01 03 32 F9 | 	getword	_var02, _var02, #0
2c544     10 02 86 F1 | 	sub	_var02, #16
2c548     5C 00 90 FD | 	jmp	#LR__4332
2c54c                 | LR__4325
2c54c     01 03 32 F9 | 	getword	_var02, _var02, #0
2c550     20 02 86 F1 | 	sub	_var02, #32
2c554     50 00 90 FD | 	jmp	#LR__4332
2c558                 | LR__4326
2c558     01 03 32 F9 | 	getword	_var02, _var02, #0
2c55c     30 02 86 F1 | 	sub	_var02, #48
2c560     44 00 90 FD | 	jmp	#LR__4332
2c564                 | LR__4327
2c564     01 03 32 F9 | 	getword	_var02, _var02, #0
2c568     1A 02 86 F1 | 	sub	_var02, #26
2c56c     38 00 90 FD | 	jmp	#LR__4332
2c570                 | LR__4328
2c570     01 03 32 F9 | 	getword	_var02, _var02, #0
2c574     08 02 06 F1 | 	add	_var02, #8
2c578     2C 00 90 FD | 	jmp	#LR__4332
2c57c                 | LR__4329
2c57c     01 03 32 F9 | 	getword	_var02, _var02, #0
2c580     50 02 86 F1 | 	sub	_var02, #80
2c584     20 00 90 FD | 	jmp	#LR__4332
2c588                 | LR__4330
2c588     01 03 32 F9 | 	getword	_var02, _var02, #0
2c58c     0E 00 00 FF 
2c590     60 02 86 F1 | 	sub	_var02, ##7264
2c594                 | ' 				}
2c594                 | ' 				break;
2c594     10 00 90 FD | 	jmp	#LR__4332
2c598                 | LR__4331
2c598     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2c59c     02 0A 06 AA |  if_e	mul	_var06, #2
2c5a0     05 07 02 A1 |  if_e	add	_var04, _var06
2c5a4     D8 FE 9F FD | 	jmp	#LR__4320
2c5a8                 | LR__4332
2c5a8     01 01 32 F9 | 	getword	_var01, _var02, #0
2c5ac                 | LR__4333
2c5ac                 | ' 		}
2c5ac                 | ' 		uni = uc;
2c5ac                 | ' 	}
2c5ac                 | ' 
2c5ac                 | ' 	return uni;
2c5ac     00 FB 01 F6 | 	mov	result1, _var01
2c5b0                 | _fatfs_cc_ff_wtoupper_ret
2c5b0     2D 00 64 FD | 	ret
2c5b4                 | 
2c5b4                 | _fatfs_cc_strncpy
2c5b4     09 01 02 F6 | 	mov	_var01, arg01
2c5b8     97 12 48 FB | 	callpa	#(@LR__4341-@LR__4340)>>2,fcache_load_ptr_
2c5bc                 | ' 
2c5bc                 | ' 	dscan = dst;
2c5bc                 | ' 	sscan = src;
2c5bc                 | ' 	count = n;
2c5bc                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2c5bc                 | LR__4340
2c5bc     01 16 86 F1 | 	sub	arg03, #1
2c5c0     00 16 56 F2 | 	cmps	arg03, #0 wc
2c5c4     18 00 90 CD |  if_b	jmp	#LR__4342
2c5c8     0A FB C1 FA | 	rdbyte	result1, arg02
2c5cc     00 FB 41 FC | 	wrbyte	result1, _var01
2c5d0     01 14 06 F1 | 	add	arg02, #1
2c5d4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2c5d8                 | ' 		continue;
2c5d8     01 00 06 F1 | 	add	_var01, #1
2c5dc     DC FF 9F 5D |  if_ne	jmp	#LR__4340
2c5e0                 | LR__4341
2c5e0                 | LR__4342
2c5e0     97 0C 48 FB | 	callpa	#(@LR__4344-@LR__4343)>>2,fcache_load_ptr_
2c5e4                 | ' 	while (--count >= 0)
2c5e4                 | LR__4343
2c5e4     01 16 86 F1 | 	sub	arg03, #1
2c5e8     00 16 56 F2 | 	cmps	arg03, #0 wc
2c5ec     00 03 02 36 |  if_ae	mov	_var02, _var01
2c5f0     01 00 06 31 |  if_ae	add	_var01, #1
2c5f4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2c5f8     E8 FF 9F 3D |  if_ae	jmp	#LR__4343
2c5fc                 | LR__4344
2c5fc                 | ' 		*dscan++ = '\0';
2c5fc                 | ' 	return(dst);
2c5fc     09 FB 01 F6 | 	mov	result1, arg01
2c600                 | _fatfs_cc_strncpy_ret
2c600     2D 00 64 FD | 	ret
2c604                 | 
2c604                 | _fatfs_cc_memcmp
2c604                 | ' 	for (n = size; n > 0; n--)
2c604     00 16 0E F2 | 	cmp	arg03, #0 wz
2c608     28 00 90 AD |  if_e	jmp	#LR__4351
2c60c                 | LR__4350
2c60c     09 01 C2 FA | 	rdbyte	_var01, arg01
2c610     0A 03 C2 FA | 	rdbyte	_var02, arg02
2c614     01 01 0A F2 | 	cmp	_var01, _var02 wz
2c618     01 12 06 A1 |  if_e	add	arg01, #1
2c61c     01 14 06 A1 |  if_e	add	arg02, #1
2c620                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2c620     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2c624     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2c628     01 FB 81 51 |  if_ne	sub	result1, _var02
2c62c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2c630     F6 17 6E FB | 	djnz	arg03, #LR__4350
2c634                 | LR__4351
2c634                 | ' 
2c634                 | ' 	return(0);
2c634     00 FA 05 F6 | 	mov	result1, #0
2c638                 | _fatfs_cc_memcmp_ret
2c638     2D 00 64 FD | 	ret
2c63c                 | 
2c63c                 | _fatfs_cc_strncmp
2c63c     09 01 0A F6 | 	mov	_var01, arg01 wz
2c640     14 00 90 5D |  if_ne	jmp	#LR__4360
2c644                 | ' 		return scan2 ? -1 : 0;
2c644     00 14 0E F2 | 	cmp	arg02, #0 wz
2c648     01 02 66 56 |  if_ne	neg	_var02, #1
2c64c     00 02 06 A6 |  if_e	mov	_var02, #0
2c650     01 FB 01 F6 | 	mov	result1, _var02
2c654     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2c658                 | LR__4360
2c658     00 14 0E F2 | 	cmp	arg02, #0 wz
2c65c     01 FA 05 A6 |  if_e	mov	result1, #1
2c660     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c664     0B 05 02 F6 | 	mov	_var03, arg03
2c668     97 16 48 FB | 	callpa	#(@LR__4362-@LR__4361)>>2,fcache_load_ptr_
2c66c                 | ' 	count = n;
2c66c                 | ' 	do {
2c66c                 | LR__4361
2c66c     00 07 C2 FA | 	rdbyte	_var04, _var01
2c670     0A 09 02 F6 | 	mov	_var05, arg02
2c674     04 0B C2 FA | 	rdbyte	_var06, _var05
2c678     01 04 86 F1 | 	sub	_var03, #1
2c67c     00 04 56 F2 | 	cmps	_var03, #0 wc
2c680     01 00 06 F1 | 	add	_var01, #1
2c684     01 14 06 F1 | 	add	arg02, #1
2c688     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2c68c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4363
2c690     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2c694     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4361
2c698                 | LR__4362
2c698                 | LR__4363
2c698     00 04 56 F2 | 	cmps	_var03, #0 wc
2c69c                 | ' 		return(0);
2c69c     00 FA 05 C6 |  if_b	mov	result1, #0
2c6a0     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2c6a4     05 07 0A F2 | 	cmp	_var04, _var06 wz
2c6a8                 | ' 		return(0);
2c6a8     00 FA 05 A6 |  if_e	mov	result1, #0
2c6ac     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c6b0     00 06 0E F2 | 	cmp	_var04, #0 wz
2c6b4                 | ' 		return(-1);
2c6b4     01 FA 65 A6 |  if_e	neg	result1, #1
2c6b8     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c6bc     00 0A 0E F2 | 	cmp	_var06, #0 wz
2c6c0                 | ' 		return(1);
2c6c0     01 FA 05 A6 |  if_e	mov	result1, #1
2c6c4                 | ' 		return(c1 - c2);
2c6c4     03 FB 01 56 |  if_ne	mov	result1, _var04
2c6c8     05 FB 81 51 |  if_ne	sub	result1, _var06
2c6cc                 | _fatfs_cc_strncmp_ret
2c6cc     2D 00 64 FD | 	ret
2c6d0                 | 
2c6d0                 | _fatfs_cc_strchr
2c6d0                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2c6d0                 | ' 	while ((c = *s++) != (char) charwanted)
2c6d0                 | LR__4370
2c6d0     09 01 02 F6 | 	mov	_var01, arg01
2c6d4     00 03 C2 FA | 	rdbyte	_var02, _var01
2c6d8     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2c6dc     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2c6e0     03 05 0A F2 | 	cmp	_var03, _var04 wz
2c6e4     01 12 06 F1 | 	add	arg01, #1
2c6e8     14 00 90 AD |  if_e	jmp	#LR__4371
2c6ec     01 05 02 F6 | 	mov	_var03, _var02
2c6f0     07 04 4E F7 | 	zerox	_var03, #7 wz
2c6f4     00 FA 05 A6 |  if_e	mov	result1, #0
2c6f8     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2c6fc     D0 FF 9F FD | 	jmp	#LR__4370
2c700                 | LR__4371
2c700                 | ' 	return((char *)--s);
2c700     01 12 86 F1 | 	sub	arg01, #1
2c704     09 FB 01 F6 | 	mov	result1, arg01
2c708                 | _fatfs_cc_strchr_ret
2c708     2D 00 64 FD | 	ret
2c70c                 | 
2c70c                 | _fatfs_cc_disk_initialize
2c70c     04 4A 05 F6 | 	mov	COUNT_, #4
2c710     A8 00 A0 FD | 	call	#pushregs_
2c714     40 F0 07 F1 | 	add	ptra, #64
2c718     04 4E 05 F1 | 	add	fp, #4
2c71c     A7 12 42 FC | 	wrbyte	arg01, fp
2c720     01 00 00 FF 
2c724     14 E4 05 F1 | 	add	objptr, ##532
2c728     F2 18 02 FB | 	rdlong	arg04, objptr
2c72c     2C 4E 05 F1 | 	add	fp, #44
2c730     A7 18 62 FC | 	wrlong	arg04, fp
2c734     04 E4 85 F1 | 	sub	objptr, #4
2c738     F2 18 02 FB | 	rdlong	arg04, objptr
2c73c     04 4E 05 F1 | 	add	fp, #4
2c740     A7 18 62 FC | 	wrlong	arg04, fp
2c744     08 E4 05 F1 | 	add	objptr, #8
2c748     F2 18 02 FB | 	rdlong	arg04, objptr
2c74c     04 4E 05 F1 | 	add	fp, #4
2c750     A7 18 62 FC | 	wrlong	arg04, fp
2c754     04 E4 05 F1 | 	add	objptr, #4
2c758     F2 18 02 FB | 	rdlong	arg04, objptr
2c75c     04 4E 05 F1 | 	add	fp, #4
2c760     A7 18 62 FC | 	wrlong	arg04, fp
2c764     04 E4 05 F1 | 	add	objptr, #4
2c768     F2 02 48 FC | 	wrbyte	#1, objptr
2c76c     01 00 00 FF 
2c770     20 E4 85 F1 | 	sub	objptr, ##544
2c774     38 4E 85 F1 | 	sub	fp, #56
2c778     A7 18 CA FA | 	rdbyte	arg04, fp wz
2c77c     04 4E 85 F1 | 	sub	fp, #4
2c780                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2c780                 | '             return RES_NOTRDY;
2c780     03 FA 05 56 |  if_ne	mov	result1, #3
2c784     D8 05 90 5D |  if_ne	jmp	#LR__4398
2c788     13 00 00 FF 
2c78c     10 13 06 F6 | 	mov	arg01, ##10000
2c790     44 95 BF FD | 	call	#__system___waitus
2c794     30 4E 05 F1 | 	add	fp, #48
2c798     A7 12 02 FB | 	rdlong	arg01, fp
2c79c     09 01 08 FC | 	wrpin	#0, arg01
2c7a0     04 4E 05 F1 | 	add	fp, #4
2c7a4     A7 12 02 FB | 	rdlong	arg01, fp
2c7a8     09 01 08 FC | 	wrpin	#0, arg01
2c7ac     04 4E 05 F1 | 	add	fp, #4
2c7b0     A7 12 02 FB | 	rdlong	arg01, fp
2c7b4     09 01 08 FC | 	wrpin	#0, arg01
2c7b8     04 4E 05 F1 | 	add	fp, #4
2c7bc     A7 12 02 FB | 	rdlong	arg01, fp
2c7c0     09 00 80 FF 
2c7c4     09 01 08 FC | 	wrpin	##4608, arg01
2c7c8     0C 4E 85 F1 | 	sub	fp, #12
2c7cc     A7 12 02 FB | 	rdlong	arg01, fp
2c7d0     59 12 62 FD | 	drvh	arg01
2c7d4     04 4E 05 F1 | 	add	fp, #4
2c7d8     A7 12 02 FB | 	rdlong	arg01, fp
2c7dc     59 12 62 FD | 	drvh	arg01
2c7e0     04 4E 05 F1 | 	add	fp, #4
2c7e4     A7 12 02 FB | 	rdlong	arg01, fp
2c7e8     59 12 62 FD | 	drvh	arg01
2c7ec     04 4E 05 F1 | 	add	fp, #4
2c7f0     A7 12 02 FB | 	rdlong	arg01, fp
2c7f4     59 12 62 FD | 	drvh	arg01
2c7f8     20 4E 85 F1 | 	sub	fp, #32
2c7fc     00 04 80 FF 
2c800     A7 20 68 FC | 	wrlong	##524304, fp
2c804     04 4E 05 F1 | 	add	fp, #4
2c808     20 03 80 FF 
2c80c     A7 90 68 FC | 	wrlong	##409672, fp
2c810     14 4E 05 F1 | 	add	fp, #20
2c814     A7 26 02 FB | 	rdlong	local01, fp
2c818     18 4E 85 F1 | 	sub	fp, #24
2c81c     A7 16 02 FB | 	rdlong	arg03, fp
2c820     40 26 62 FD | 	dirl	local01
2c824     A0 03 80 FF 
2c828     13 91 08 FC | 	wrpin	##475208, local01
2c82c     13 17 12 FC | 	wxpin	arg03, local01
2c830     13 01 28 FC | 	wypin	#0, local01
2c834     41 26 62 FD | 	dirh	local01
2c838     1C 4E 05 F1 | 	add	fp, #28
2c83c     A7 28 02 FB | 	rdlong	local02, fp
2c840     14 27 82 F1 | 	sub	local01, local02
2c844     07 26 06 F5 | 	and	local01, #7
2c848     18 26 66 F0 | 	shl	local01, #24
2c84c     78 14 06 F6 | 	mov	arg02, #120
2c850     13 15 42 F5 | 	or	arg02, local01
2c854     14 4E 85 F1 | 	sub	fp, #20
2c858     A7 14 62 FC | 	wrlong	arg02, fp
2c85c     14 4E 05 F1 | 	add	fp, #20
2c860     A7 12 02 FB | 	rdlong	arg01, fp
2c864     10 14 26 F4 | 	bith	arg02, #16
2c868     40 12 62 FD | 	dirl	arg01
2c86c     09 15 02 FC | 	wrpin	arg02, arg01
2c870     09 3F 18 FC | 	wxpin	#31, arg01
2c874     FF FF FF FF 
2c878     09 FF 2B FC | 	wypin	##-1, arg01
2c87c     41 12 62 FD | 	dirh	arg01
2c880     04 4E 85 F1 | 	sub	fp, #4
2c884     A7 14 02 FB | 	rdlong	arg02, fp
2c888     08 4E 05 F1 | 	add	fp, #8
2c88c     A7 2A 02 FB | 	rdlong	local03, fp
2c890     15 15 82 F1 | 	sub	arg02, local03
2c894     07 14 06 F5 | 	and	arg02, #7
2c898     18 14 66 F0 | 	shl	arg02, #24
2c89c     14 4E 85 F1 | 	sub	fp, #20
2c8a0     A7 14 62 FC | 	wrlong	arg02, fp
2c8a4     29 00 00 FF 
2c8a8     7A 14 46 F5 | 	or	arg02, ##21114
2c8ac     A7 14 62 FC | 	wrlong	arg02, fp
2c8b0     14 4E 05 F1 | 	add	fp, #20
2c8b4     A7 12 02 FB | 	rdlong	arg01, fp
2c8b8     40 12 62 FD | 	dirl	arg01
2c8bc     09 15 02 FC | 	wrpin	arg02, arg01
2c8c0     09 4F 18 FC | 	wxpin	#39, arg01
2c8c4     09 01 28 FC | 	wypin	#0, arg01
2c8c8     41 12 62 FD | 	dirh	arg01
2c8cc     28 4E 85 F1 | 	sub	fp, #40
2c8d0     A7 12 02 F6 | 	mov	arg01, fp
2c8d4     14 4E 85 F1 | 	sub	fp, #20
2c8d8     0A 14 06 F6 | 	mov	arg02, #10
2c8dc     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1185
2c8e0     00 12 06 F6 | 	mov	arg01, #0
2c8e4     00 14 06 F6 | 	mov	arg02, #0
2c8e8     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2c8ec     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1195
2c8f0     64 12 06 F6 | 	mov	arg01, #100
2c8f4     E0 93 BF FD | 	call	#__system___waitus
2c8f8     14 4E 05 F1 | 	add	fp, #20
2c8fc     A7 12 02 F6 | 	mov	arg01, fp
2c900     14 4E 85 F1 | 	sub	fp, #20
2c904     0A 14 06 F6 | 	mov	arg02, #10
2c908     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1185
2c90c     0C 4E 05 F1 | 	add	fp, #12
2c910     A7 00 48 FC | 	wrbyte	#0, fp
2c914     0C 4E 85 F1 | 	sub	fp, #12
2c918     00 12 06 F6 | 	mov	arg01, #0
2c91c     00 14 06 F6 | 	mov	arg02, #0
2c920     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2c924     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2c928     01 18 0E F2 | 	cmp	arg04, #1 wz
2c92c     B8 03 90 5D |  if_ne	jmp	#LR__4397
2c930     08 12 06 F6 | 	mov	arg01, #8
2c934     AA 15 06 F6 | 	mov	arg02, #426
2c938     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2c93c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2c940     01 FA 0D F2 | 	cmp	result1, #1 wz
2c944     98 01 90 5D |  if_ne	jmp	#LR__4383
2c948     14 4E 05 F1 | 	add	fp, #20
2c94c     A7 12 02 F6 | 	mov	arg01, fp
2c950     14 4E 85 F1 | 	sub	fp, #20
2c954     04 14 06 F6 | 	mov	arg02, #4
2c958     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1185
2c95c     16 4E 05 F1 | 	add	fp, #22
2c960     A7 2C C2 FA | 	rdbyte	local04, fp
2c964     16 4E 85 F1 | 	sub	fp, #22
2c968     01 2C 0E F2 | 	cmp	local04, #1 wz
2c96c     17 4E 05 A1 |  if_e	add	fp, #23
2c970     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2c974     17 4E 85 A1 |  if_e	sub	fp, #23
2c978     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2c97c     68 03 90 5D |  if_ne	jmp	#LR__4396
2c980                 | ' 				for (tmr = 1000; tmr; tmr--) {
2c980     18 4E 05 F1 | 	add	fp, #24
2c984     01 00 80 FF 
2c988     A7 D0 6B FC | 	wrlong	##1000, fp
2c98c     18 4E 85 F1 | 	sub	fp, #24
2c990                 | LR__4380
2c990     18 4E 05 F1 | 	add	fp, #24
2c994     A7 26 0A FB | 	rdlong	local01, fp wz
2c998     18 4E 85 F1 | 	sub	fp, #24
2c99c     3C 00 90 AD |  if_e	jmp	#LR__4381
2c9a0     A9 12 06 F6 | 	mov	arg01, #169
2c9a4     1E 14 C6 F9 | 	decod	arg02, #30
2c9a8     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2c9ac     FD 2C 02 F6 | 	mov	local04, result1
2c9b0     07 2C 4E F7 | 	zerox	local04, #7 wz
2c9b4     24 00 90 AD |  if_e	jmp	#LR__4381
2c9b8     01 00 00 FF 
2c9bc     E8 13 06 F6 | 	mov	arg01, ##1000
2c9c0     14 93 BF FD | 	call	#__system___waitus
2c9c4     18 4E 05 F1 | 	add	fp, #24
2c9c8     A7 2C 02 FB | 	rdlong	local04, fp
2c9cc     01 2C 86 F1 | 	sub	local04, #1
2c9d0     A7 2C 62 FC | 	wrlong	local04, fp
2c9d4     18 4E 85 F1 | 	sub	fp, #24
2c9d8     B4 FF 9F FD | 	jmp	#LR__4380
2c9dc                 | LR__4381
2c9dc     18 4E 05 F1 | 	add	fp, #24
2c9e0     A7 2C 0A FB | 	rdlong	local04, fp wz
2c9e4     18 4E 85 F1 | 	sub	fp, #24
2c9e8     4C 00 90 AD |  if_e	jmp	#LR__4382
2c9ec     3A 12 06 F6 | 	mov	arg01, #58
2c9f0     00 14 06 F6 | 	mov	arg02, #0
2c9f4     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2c9f8     FD 2A 02 F6 | 	mov	local03, result1
2c9fc     07 2A 4E F7 | 	zerox	local03, #7 wz
2ca00     34 00 90 5D |  if_ne	jmp	#LR__4382
2ca04     14 4E 05 F1 | 	add	fp, #20
2ca08     A7 12 02 F6 | 	mov	arg01, fp
2ca0c     14 4E 85 F1 | 	sub	fp, #20
2ca10     04 14 06 F6 | 	mov	arg02, #4
2ca14     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1185
2ca18     14 4E 05 F1 | 	add	fp, #20
2ca1c     A7 26 C2 FA | 	rdbyte	local01, fp
2ca20     40 26 CE F7 | 	test	local01, #64 wz
2ca24     0C 2C 06 56 |  if_ne	mov	local04, #12
2ca28     04 2C 06 A6 |  if_e	mov	local04, #4
2ca2c     08 4E 85 F1 | 	sub	fp, #8
2ca30     A7 2C 42 FC | 	wrbyte	local04, fp
2ca34     0C 4E 85 F1 | 	sub	fp, #12
2ca38                 | LR__4382
2ca38     14 2C 06 FB | 	rdlong	local04, #20
2ca3c     18 4E 05 F1 | 	add	fp, #24
2ca40     A7 2C 62 FC | 	wrlong	local04, fp
2ca44     0C 4E 05 F1 | 	add	fp, #12
2ca48     A7 2C 02 FB | 	rdlong	local04, fp
2ca4c     1B 2C 26 F4 | 	bith	local04, #27
2ca50     A7 2C 62 FC | 	wrlong	local04, fp
2ca54     0C 4E 85 F1 | 	sub	fp, #12
2ca58     A7 2C 02 FB | 	rdlong	local04, fp
2ca5c     18 4E 85 F1 | 	sub	fp, #24
2ca60     68 78 04 FF 
2ca64     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2ca68     1C 4E 05 C1 |  if_b	add	fp, #28
2ca6c     00 01 80 CF 
2ca70     A7 08 68 CC |  if_b	wrlong	##131076, fp
2ca74     1C 4E 85 C1 |  if_b	sub	fp, #28
2ca78     6C 02 90 CD |  if_b	jmp	#LR__4396
2ca7c     18 4E 05 F1 | 	add	fp, #24
2ca80     A7 2C 02 FB | 	rdlong	local04, fp
2ca84     18 4E 85 F1 | 	sub	fp, #24
2ca88     E1 F5 05 FF 
2ca8c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2ca90     1C 4E 05 C1 |  if_b	add	fp, #28
2ca94     00 01 80 CF 
2ca98     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2ca9c     1C 4E 85 C1 |  if_b	sub	fp, #28
2caa0     44 02 90 CD |  if_b	jmp	#LR__4396
2caa4     18 4E 05 F1 | 	add	fp, #24
2caa8     A7 2C 02 FB | 	rdlong	local04, fp
2caac     18 4E 85 F1 | 	sub	fp, #24
2cab0     3B 58 08 FF 
2cab4     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2cab8     1C 4E 05 C1 |  if_b	add	fp, #28
2cabc     00 01 80 CF 
2cac0     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2cac4     1C 4E 85 C1 |  if_b	sub	fp, #28
2cac8     1C 02 90 CD |  if_b	jmp	#LR__4396
2cacc     1C 4E 05 F1 | 	add	fp, #28
2cad0     80 01 80 FF 
2cad4     A7 10 68 FC | 	wrlong	##196616, fp
2cad8     1C 4E 85 F1 | 	sub	fp, #28
2cadc     08 02 90 FD | 	jmp	#LR__4396
2cae0                 | LR__4383
2cae0     A9 12 06 F6 | 	mov	arg01, #169
2cae4     00 14 06 F6 | 	mov	arg02, #0
2cae8     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2caec     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2caf0     02 2C 16 F2 | 	cmp	local04, #2 wc
2caf4     18 00 90 3D |  if_ae	jmp	#LR__4384
2caf8     0C 4E 05 F1 | 	add	fp, #12
2cafc     A7 04 48 FC | 	wrbyte	#2, fp
2cb00     04 4E 05 F1 | 	add	fp, #4
2cb04     A7 52 49 FC | 	wrbyte	#169, fp
2cb08     10 4E 85 F1 | 	sub	fp, #16
2cb0c     14 00 90 FD | 	jmp	#LR__4385
2cb10                 | LR__4384
2cb10     0C 4E 05 F1 | 	add	fp, #12
2cb14     A7 02 48 FC | 	wrbyte	#1, fp
2cb18     04 4E 05 F1 | 	add	fp, #4
2cb1c     A7 02 48 FC | 	wrbyte	#1, fp
2cb20     10 4E 85 F1 | 	sub	fp, #16
2cb24                 | LR__4385
2cb24                 | ' 				ty =  0x01 ; cmd =  (1) ;
2cb24                 | ' 			}
2cb24                 | ' 			for (tmr = 1000; tmr; tmr--) {
2cb24     18 4E 05 F1 | 	add	fp, #24
2cb28     01 00 80 FF 
2cb2c     A7 D0 6B FC | 	wrlong	##1000, fp
2cb30     18 4E 85 F1 | 	sub	fp, #24
2cb34                 | LR__4386
2cb34     18 4E 05 F1 | 	add	fp, #24
2cb38     A7 2A 0A FB | 	rdlong	local03, fp wz
2cb3c     18 4E 85 F1 | 	sub	fp, #24
2cb40     44 00 90 AD |  if_e	jmp	#LR__4387
2cb44     10 4E 05 F1 | 	add	fp, #16
2cb48     A7 12 C2 FA | 	rdbyte	arg01, fp
2cb4c     10 4E 85 F1 | 	sub	fp, #16
2cb50     00 14 06 F6 | 	mov	arg02, #0
2cb54     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2cb58     FD 2C 02 F6 | 	mov	local04, result1
2cb5c     07 2C 4E F7 | 	zerox	local04, #7 wz
2cb60     24 00 90 AD |  if_e	jmp	#LR__4387
2cb64     01 00 00 FF 
2cb68     E8 13 06 F6 | 	mov	arg01, ##1000
2cb6c     68 91 BF FD | 	call	#__system___waitus
2cb70     18 4E 05 F1 | 	add	fp, #24
2cb74     A7 2C 02 FB | 	rdlong	local04, fp
2cb78     01 2C 86 F1 | 	sub	local04, #1
2cb7c     A7 2C 62 FC | 	wrlong	local04, fp
2cb80     18 4E 85 F1 | 	sub	fp, #24
2cb84     AC FF 9F FD | 	jmp	#LR__4386
2cb88                 | LR__4387
2cb88     18 4E 05 F1 | 	add	fp, #24
2cb8c     A7 2C 0A FB | 	rdlong	local04, fp wz
2cb90     18 4E 85 F1 | 	sub	fp, #24
2cb94     14 00 90 AD |  if_e	jmp	#LR__4388
2cb98     10 12 06 F6 | 	mov	arg01, #16
2cb9c     09 14 C6 F9 | 	decod	arg02, #9
2cba0     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2cba4     07 FA 4D F7 | 	zerox	result1, #7 wz
2cba8     0C 00 90 AD |  if_e	jmp	#LR__4389
2cbac                 | LR__4388
2cbac     0C 4E 05 F1 | 	add	fp, #12
2cbb0     A7 00 48 FC | 	wrbyte	#0, fp
2cbb4     0C 4E 85 F1 | 	sub	fp, #12
2cbb8                 | LR__4389
2cbb8     14 2C 06 FB | 	rdlong	local04, #20
2cbbc     18 4E 05 F1 | 	add	fp, #24
2cbc0     A7 2C 62 FC | 	wrlong	local04, fp
2cbc4     18 4E 85 F1 | 	sub	fp, #24
2cbc8     F0 FA 02 FF 
2cbcc     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2cbd0     18 00 90 3D |  if_ae	jmp	#LR__4390
2cbd4     24 4E 05 F1 | 	add	fp, #36
2cbd8     A7 2C 02 FB | 	rdlong	local04, fp
2cbdc     1B 2C 26 F4 | 	bith	local04, #27
2cbe0     A7 2C 62 FC | 	wrlong	local04, fp
2cbe4     24 4E 85 F1 | 	sub	fp, #36
2cbe8     2C 00 90 FD | 	jmp	#LR__4391
2cbec                 | LR__4390
2cbec     18 4E 05 F1 | 	add	fp, #24
2cbf0     A7 2C 02 FB | 	rdlong	local04, fp
2cbf4     18 4E 85 F1 | 	sub	fp, #24
2cbf8     E1 F5 05 FF 
2cbfc     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2cc00     24 4E 05 C1 |  if_b	add	fp, #36
2cc04     A7 2C 02 CB |  if_b	rdlong	local04, fp
2cc08     80 00 04 CF 
2cc0c     00 2C 46 C5 |  if_b	or	local04, ##134283264
2cc10     A7 2C 62 CC |  if_b	wrlong	local04, fp
2cc14     24 4E 85 C1 |  if_b	sub	fp, #36
2cc18                 | LR__4391
2cc18     18 4E 05 F1 | 	add	fp, #24
2cc1c     A7 2C 02 FB | 	rdlong	local04, fp
2cc20     18 4E 85 F1 | 	sub	fp, #24
2cc24     F0 FA 02 FF 
2cc28     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2cc2c     1C 4E 05 C1 |  if_b	add	fp, #28
2cc30     00 01 80 CF 
2cc34     A7 08 68 CC |  if_b	wrlong	##131076, fp
2cc38     1C 4E 85 C1 |  if_b	sub	fp, #28
2cc3c     A8 00 90 CD |  if_b	jmp	#LR__4395
2cc40     18 4E 05 F1 | 	add	fp, #24
2cc44     A7 2C 02 FB | 	rdlong	local04, fp
2cc48     18 4E 85 F1 | 	sub	fp, #24
2cc4c     68 78 04 FF 
2cc50     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2cc54     1C 4E 05 C1 |  if_b	add	fp, #28
2cc58     80 01 80 CF 
2cc5c     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2cc60     1C 4E 85 C1 |  if_b	sub	fp, #28
2cc64     80 00 90 CD |  if_b	jmp	#LR__4394
2cc68     18 4E 05 F1 | 	add	fp, #24
2cc6c     A7 2C 02 FB | 	rdlong	local04, fp
2cc70     18 4E 85 F1 | 	sub	fp, #24
2cc74     E1 F5 05 FF 
2cc78     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2cc7c     1C 4E 05 C1 |  if_b	add	fp, #28
2cc80     00 02 80 CF 
2cc84     A7 10 68 CC |  if_b	wrlong	##262152, fp
2cc88     1C 4E 85 C1 |  if_b	sub	fp, #28
2cc8c     58 00 90 CD |  if_b	jmp	#LR__4393
2cc90     18 4E 05 F1 | 	add	fp, #24
2cc94     A7 2C 02 FB | 	rdlong	local04, fp
2cc98     18 4E 85 F1 | 	sub	fp, #24
2cc9c     59 73 07 FF 
2cca0     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2cca4     1C 4E 05 C1 |  if_b	add	fp, #28
2cca8     80 02 80 CF 
2ccac     A7 14 68 CC |  if_b	wrlong	##327690, fp
2ccb0     1C 4E 85 C1 |  if_b	sub	fp, #28
2ccb4     30 00 90 CD |  if_b	jmp	#LR__4392
2ccb8     18 4E 05 F1 | 	add	fp, #24
2ccbc     A7 2C 02 FB | 	rdlong	local04, fp
2ccc0     18 4E 85 F1 | 	sub	fp, #24
2ccc4     D1 F0 08 FF 
2ccc8     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2cccc     1C 4E 05 C1 |  if_b	add	fp, #28
2ccd0     00 03 80 CF 
2ccd4     A7 18 68 CC |  if_b	wrlong	##393228, fp
2ccd8     1C 4E 85 F3 | 	sumc	fp, #28
2ccdc     80 03 80 3F 
2cce0     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2cce4     1C 4E 85 31 |  if_ae	sub	fp, #28
2cce8                 | LR__4392
2cce8                 | LR__4393
2cce8                 | LR__4394
2cce8                 | LR__4395
2cce8                 | LR__4396
2cce8                 | LR__4397
2cce8     0C 4E 05 F1 | 	add	fp, #12
2ccec     A7 2C C2 FA | 	rdbyte	local04, fp
2ccf0     01 00 00 FF 
2ccf4     21 E4 05 F1 | 	add	objptr, ##545
2ccf8     F2 2C 42 FC | 	wrbyte	local04, objptr
2ccfc     A7 26 CA FA | 	rdbyte	local01, fp wz
2cd00     00 2C 06 56 |  if_ne	mov	local04, #0
2cd04     01 2C 06 A6 |  if_e	mov	local04, #1
2cd08     20 4E 05 F1 | 	add	fp, #32
2cd0c     A7 2C 42 FC | 	wrbyte	local04, fp
2cd10     A7 2C C2 FA | 	rdbyte	local04, fp
2cd14     2C 4E 85 F1 | 	sub	fp, #44
2cd18     01 E4 85 F1 | 	sub	objptr, #1
2cd1c     F2 2C 42 FC | 	wrbyte	local04, objptr
2cd20     01 00 00 FF 
2cd24     20 E4 85 F1 | 	sub	objptr, ##544
2cd28     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1195
2cd2c     34 4E 05 F1 | 	add	fp, #52
2cd30     A7 12 02 FB | 	rdlong	arg01, fp
2cd34     18 4E 85 F1 | 	sub	fp, #24
2cd38     A7 14 02 FB | 	rdlong	arg02, fp
2cd3c     09 15 12 FC | 	wxpin	arg02, arg01
2cd40     1C 4E 05 F1 | 	add	fp, #28
2cd44     A7 12 02 FB | 	rdlong	arg01, fp
2cd48     14 4E 85 F1 | 	sub	fp, #20
2cd4c     A7 14 02 FB | 	rdlong	arg02, fp
2cd50     09 15 02 FC | 	wrpin	arg02, arg01
2cd54                 | ' 
2cd54                 | ' 		}
2cd54                 | ' 	}
2cd54                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2cd54                 | ' 	CardType = ty;
2cd54                 | ' 	s = ty ? 0 :  0x01 ;
2cd54                 | ' 	Stat = s;
2cd54                 | ' 
2cd54                 | ' 	deselect();
2cd54                 | ' 
2cd54                 | ' 
2cd54                 | ' 	_wxpin( PIN_CLK, ck_div );
2cd54                 | ' 	_wrpin( PIN_DI, spm_tx );
2cd54                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2cd54                 | ' 	return s;
2cd54     08 4E 05 F1 | 	add	fp, #8
2cd58     A7 FA C1 FA | 	rdbyte	result1, fp
2cd5c     2C 4E 85 F1 | 	sub	fp, #44
2cd60                 | LR__4398
2cd60     A7 F0 03 F6 | 	mov	ptra, fp
2cd64     B2 00 A0 FD | 	call	#popregs_
2cd68                 | _fatfs_cc_disk_initialize_ret
2cd68     2D 00 64 FD | 	ret
2cd6c                 | 
2cd6c                 | _fatfs_cc_disk_read
2cd6c     05 4A 05 F6 | 	mov	COUNT_, #5
2cd70     A8 00 A0 FD | 	call	#pushregs_
2cd74     0A 27 02 F6 | 	mov	local01, arg02
2cd78     0B 29 02 F6 | 	mov	local02, arg03
2cd7c     0C 2B 02 F6 | 	mov	local03, arg04
2cd80     00 12 0E F2 | 	cmp	arg01, #0 wz
2cd84     01 FA 05 56 |  if_ne	mov	result1, #1
2cd88                 | ' 
2cd88                 | ' 	return Stat;
2cd88     01 00 00 AF 
2cd8c     20 E4 05 A1 |  if_e	add	objptr, ##544
2cd90     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2cd94     01 00 00 AF 
2cd98     20 E4 85 A1 |  if_e	sub	objptr, ##544
2cd9c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2cda0     01 FA CD F7 | 	test	result1, #1 wz
2cda4     03 FA 05 56 |  if_ne	mov	result1, #3
2cda8     84 00 90 5D |  if_ne	jmp	#LR__4402
2cdac     01 00 00 FF 
2cdb0     21 E4 05 F1 | 	add	objptr, ##545
2cdb4     F2 2C C2 FA | 	rdbyte	local04, objptr
2cdb8     01 00 00 FF 
2cdbc     21 E4 85 F1 | 	sub	objptr, ##545
2cdc0     08 2C CE F7 | 	test	local04, #8 wz
2cdc4     09 28 66 A0 |  if_e	shl	local02, #9
2cdc8     02 2A 16 F2 | 	cmp	local03, #2 wc
2cdcc     12 2C 06 36 |  if_ae	mov	local04, #18
2cdd0     11 2C 06 C6 |  if_b	mov	local04, #17
2cdd4     14 15 02 F6 | 	mov	arg02, local02
2cdd8     16 13 02 F6 | 	mov	arg01, local04
2cddc     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2cde0     FD 2E 02 F6 | 	mov	local05, result1
2cde4     07 2E 4E F7 | 	zerox	local05, #7 wz
2cde8     30 00 90 5D |  if_ne	jmp	#LR__4401
2cdec                 | ' 		do {
2cdec                 | LR__4400
2cdec     13 13 02 F6 | 	mov	arg01, local01
2cdf0     09 14 C6 F9 | 	decod	arg02, #9
2cdf4     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1203
2cdf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cdfc     01 00 00 5F 
2ce00     00 26 06 51 |  if_ne	add	local01, ##512
2ce04     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4400
2ce08     16 2D E2 F8 | 	getbyte	local04, local04, #0
2ce0c     12 2C 0E F2 | 	cmp	local04, #18 wz
2ce10     0C 12 06 A6 |  if_e	mov	arg01, #12
2ce14     00 14 06 A6 |  if_e	mov	arg02, #0
2ce18     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1209
2ce1c                 | LR__4401
2ce1c     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1195
2ce20                 | ' 	}
2ce20                 | ' 	deselect();
2ce20                 | ' 
2ce20                 | ' 	return count ? RES_ERROR : RES_OK;
2ce20     00 2A 0E F2 | 	cmp	local03, #0 wz
2ce24     01 2E 06 56 |  if_ne	mov	local05, #1
2ce28     00 2E 06 A6 |  if_e	mov	local05, #0
2ce2c     17 FB 01 F6 | 	mov	result1, local05
2ce30                 | LR__4402
2ce30     A7 F0 03 F6 | 	mov	ptra, fp
2ce34     B2 00 A0 FD | 	call	#popregs_
2ce38                 | _fatfs_cc_disk_read_ret
2ce38     2D 00 64 FD | 	ret
2ce3c                 | 
2ce3c                 | _fatfs_cc_disk_write
2ce3c     04 4A 05 F6 | 	mov	COUNT_, #4
2ce40     A8 00 A0 FD | 	call	#pushregs_
2ce44     0A 27 02 F6 | 	mov	local01, arg02
2ce48     0C 29 02 F6 | 	mov	local02, arg04
2ce4c     0B 2B 02 F6 | 	mov	local03, arg03
2ce50     00 12 0E F2 | 	cmp	arg01, #0 wz
2ce54     01 FA 05 56 |  if_ne	mov	result1, #1
2ce58                 | ' 
2ce58                 | ' 	return Stat;
2ce58     01 00 00 AF 
2ce5c     20 E4 05 A1 |  if_e	add	objptr, ##544
2ce60     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2ce64     01 00 00 AF 
2ce68     20 E4 85 A1 |  if_e	sub	objptr, ##544
2ce6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ce70     01 FA CD F7 | 	test	result1, #1 wz
2ce74     03 FA 05 56 |  if_ne	mov	result1, #3
2ce78     D4 00 90 5D |  if_ne	jmp	#LR__4414
2ce7c     01 00 00 FF 
2ce80     21 E4 05 F1 | 	add	objptr, ##545
2ce84     F2 16 C2 FA | 	rdbyte	arg03, objptr
2ce88     01 00 00 FF 
2ce8c     21 E4 85 F1 | 	sub	objptr, ##545
2ce90     08 16 CE F7 | 	test	arg03, #8 wz
2ce94     09 2A 66 A0 |  if_e	shl	local03, #9
2ce98     01 28 0E F2 | 	cmp	local02, #1 wz
2ce9c     30 00 90 5D |  if_ne	jmp	#LR__4410
2cea0     18 12 06 F6 | 	mov	arg01, #24
2cea4     15 15 02 F6 | 	mov	arg02, local03
2cea8     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2ceac     FD 2C 02 F6 | 	mov	local04, result1
2ceb0     07 2C 4E F7 | 	zerox	local04, #7 wz
2ceb4     84 00 90 5D |  if_ne	jmp	#LR__4413
2ceb8     13 13 02 F6 | 	mov	arg01, local01
2cebc     FE 14 06 F6 | 	mov	arg02, #254
2cec0     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1205
2cec4     00 FA 0D F2 | 	cmp	result1, #0 wz
2cec8     00 28 06 56 |  if_ne	mov	local02, #0
2cecc     6C 00 90 FD | 	jmp	#LR__4413
2ced0                 | LR__4410
2ced0     01 00 00 FF 
2ced4     21 E4 05 F1 | 	add	objptr, ##545
2ced8     F2 2C C2 FA | 	rdbyte	local04, objptr
2cedc     01 00 00 FF 
2cee0     21 E4 85 F1 | 	sub	objptr, ##545
2cee4     06 2C CE F7 | 	test	local04, #6 wz
2cee8     97 12 06 56 |  if_ne	mov	arg01, #151
2ceec     14 15 02 56 |  if_ne	mov	arg02, local02
2cef0     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1209
2cef4     15 15 02 F6 | 	mov	arg02, local03
2cef8     19 12 06 F6 | 	mov	arg01, #25
2cefc     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2cf00     FD 2C 02 F6 | 	mov	local04, result1
2cf04     07 2C 4E F7 | 	zerox	local04, #7 wz
2cf08     30 00 90 5D |  if_ne	jmp	#LR__4412
2cf0c                 | ' 			do {
2cf0c                 | LR__4411
2cf0c     13 13 02 F6 | 	mov	arg01, local01
2cf10     FC 14 06 F6 | 	mov	arg02, #252
2cf14     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1205
2cf18     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf1c     01 00 00 5F 
2cf20     00 26 06 51 |  if_ne	add	local01, ##512
2cf24     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4411
2cf28     00 12 06 F6 | 	mov	arg01, #0
2cf2c     FD 14 06 F6 | 	mov	arg02, #253
2cf30     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1205
2cf34     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf38     01 28 06 A6 |  if_e	mov	local02, #1
2cf3c                 | LR__4412
2cf3c                 | LR__4413
2cf3c     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1195
2cf40                 | ' 				count = 1;
2cf40                 | ' 		}
2cf40                 | ' 	}
2cf40                 | ' 	deselect();
2cf40                 | ' 
2cf40                 | ' 	return count ? RES_ERROR : RES_OK;
2cf40     00 28 0E F2 | 	cmp	local02, #0 wz
2cf44     01 2C 06 56 |  if_ne	mov	local04, #1
2cf48     00 2C 06 A6 |  if_e	mov	local04, #0
2cf4c     16 FB 01 F6 | 	mov	result1, local04
2cf50                 | LR__4414
2cf50     A7 F0 03 F6 | 	mov	ptra, fp
2cf54     B2 00 A0 FD | 	call	#popregs_
2cf58                 | _fatfs_cc_disk_write_ret
2cf58     2D 00 64 FD | 	ret
2cf5c                 | 
2cf5c                 | _fatfs_cc_disk_ioctl
2cf5c     01 4A 05 F6 | 	mov	COUNT_, #1
2cf60     A8 00 A0 FD | 	call	#pushregs_
2cf64     30 F0 07 F1 | 	add	ptra, #48
2cf68     04 4E 05 F1 | 	add	fp, #4
2cf6c     A7 12 42 FC | 	wrbyte	arg01, fp
2cf70     04 4E 05 F1 | 	add	fp, #4
2cf74     A7 14 42 FC | 	wrbyte	arg02, fp
2cf78     04 4E 05 F1 | 	add	fp, #4
2cf7c     A7 16 62 FC | 	wrlong	arg03, fp
2cf80     08 4E 85 F1 | 	sub	fp, #8
2cf84     A7 12 CA FA | 	rdbyte	arg01, fp wz
2cf88     04 4E 85 F1 | 	sub	fp, #4
2cf8c     01 FA 05 56 |  if_ne	mov	result1, #1
2cf90                 | ' 
2cf90                 | ' 	return Stat;
2cf90     01 00 00 AF 
2cf94     20 E4 05 A1 |  if_e	add	objptr, ##544
2cf98     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2cf9c     01 00 00 AF 
2cfa0     20 E4 85 A1 |  if_e	sub	objptr, ##544
2cfa4     FD FA E1 F8 | 	getbyte	result1, result1, #0
2cfa8     01 FA CD F7 | 	test	result1, #1 wz
2cfac     03 FA 05 56 |  if_ne	mov	result1, #3
2cfb0     E4 01 90 5D |  if_ne	jmp	#LR__4428
2cfb4     10 4E 05 F1 | 	add	fp, #16
2cfb8     A7 02 68 FC | 	wrlong	#1, fp
2cfbc                 | ' 
2cfbc                 | ' 	res = RES_ERROR;
2cfbc                 | ' 	switch (ctrl) {
2cfbc     08 4E 85 F1 | 	sub	fp, #8
2cfc0     A7 26 C2 FA | 	rdbyte	local01, fp
2cfc4     08 4E 85 F1 | 	sub	fp, #8
2cfc8     04 26 26 F3 | 	fle	local01, #4
2cfcc     30 26 62 FD | 	jmprel	local01
2cfd0                 | LR__4420
2cfd0     10 00 90 FD | 	jmp	#LR__4421
2cfd4     24 00 90 FD | 	jmp	#LR__4422
2cfd8     A0 01 90 FD | 	jmp	#LR__4426
2cfdc     80 01 90 FD | 	jmp	#LR__4425
2cfe0     98 01 90 FD | 	jmp	#LR__4426
2cfe4                 | LR__4421
2cfe4     B4 79 B0 FD | 	call	#_fatfs_cc_select_1199
2cfe8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cfec     10 4E 05 51 |  if_ne	add	fp, #16
2cff0     A7 00 68 5C |  if_ne	wrlong	#0, fp
2cff4     10 4E 85 51 |  if_ne	sub	fp, #16
2cff8                 | ' 			break;
2cff8     8C 01 90 FD | 	jmp	#LR__4427
2cffc                 | LR__4422
2cffc     09 12 06 F6 | 	mov	arg01, #9
2d000     00 14 06 F6 | 	mov	arg02, #0
2d004     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1209
2d008     FD 26 02 F6 | 	mov	local01, result1
2d00c     07 26 4E F7 | 	zerox	local01, #7 wz
2d010     74 01 90 5D |  if_ne	jmp	#LR__4427
2d014     18 4E 05 F1 | 	add	fp, #24
2d018     A7 12 02 F6 | 	mov	arg01, fp
2d01c     18 4E 85 F1 | 	sub	fp, #24
2d020     10 14 06 F6 | 	mov	arg02, #16
2d024     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1203
2d028     00 FA 0D F2 | 	cmp	result1, #0 wz
2d02c     58 01 90 AD |  if_e	jmp	#LR__4427
2d030     18 4E 05 F1 | 	add	fp, #24
2d034     A7 26 C2 FA | 	rdbyte	local01, fp
2d038     18 4E 85 F1 | 	sub	fp, #24
2d03c     06 26 46 F0 | 	shr	local01, #6
2d040     01 26 0E F2 | 	cmp	local01, #1 wz
2d044     5C 00 90 5D |  if_ne	jmp	#LR__4423
2d048     21 4E 05 F1 | 	add	fp, #33
2d04c     A7 26 C2 FA | 	rdbyte	local01, fp
2d050     01 4E 85 F1 | 	sub	fp, #1
2d054     A7 FA C1 FA | 	rdbyte	result1, fp
2d058     FD FA 31 F9 | 	getword	result1, result1, #0
2d05c     08 FA 65 F0 | 	shl	result1, #8
2d060     FD 26 02 F1 | 	add	local01, result1
2d064     01 4E 85 F1 | 	sub	fp, #1
2d068     A7 FA C1 FA | 	rdbyte	result1, fp
2d06c     3F FA 05 F5 | 	and	result1, #63
2d070     10 FA 65 F0 | 	shl	result1, #16
2d074     FD 26 02 F1 | 	add	local01, result1
2d078     01 26 06 F1 | 	add	local01, #1
2d07c     09 4E 05 F1 | 	add	fp, #9
2d080     A7 26 62 FC | 	wrlong	local01, fp
2d084     1C 4E 85 F1 | 	sub	fp, #28
2d088     A7 26 02 FB | 	rdlong	local01, fp
2d08c     1C 4E 05 F1 | 	add	fp, #28
2d090     A7 FA 01 FB | 	rdlong	result1, fp
2d094     28 4E 85 F1 | 	sub	fp, #40
2d098     0A FA 65 F0 | 	shl	result1, #10
2d09c     13 FB 61 FC | 	wrlong	result1, local01
2d0a0     AC 00 90 FD | 	jmp	#LR__4424
2d0a4                 | LR__4423
2d0a4     1D 4E 05 F1 | 	add	fp, #29
2d0a8     A7 26 C2 FA | 	rdbyte	local01, fp
2d0ac     13 27 42 F8 | 	getnib	local01, local01, #0
2d0b0     05 4E 05 F1 | 	add	fp, #5
2d0b4     A7 FA C1 FA | 	rdbyte	result1, fp
2d0b8     80 FA 05 F5 | 	and	result1, #128
2d0bc     07 FA C5 F0 | 	sar	result1, #7
2d0c0     FD 26 02 F1 | 	add	local01, result1
2d0c4     01 4E 85 F1 | 	sub	fp, #1
2d0c8     A7 FA C1 FA | 	rdbyte	result1, fp
2d0cc     03 FA 05 F5 | 	and	result1, #3
2d0d0     01 FA 65 F0 | 	shl	result1, #1
2d0d4     FD 26 02 F1 | 	add	local01, result1
2d0d8     02 26 06 F1 | 	add	local01, #2
2d0dc     0D 4E 85 F1 | 	sub	fp, #13
2d0e0     A7 26 42 FC | 	wrbyte	local01, fp
2d0e4     0C 4E 05 F1 | 	add	fp, #12
2d0e8     A7 26 C2 FA | 	rdbyte	local01, fp
2d0ec     06 26 46 F0 | 	shr	local01, #6
2d0f0     01 4E 85 F1 | 	sub	fp, #1
2d0f4     A7 FA C1 FA | 	rdbyte	result1, fp
2d0f8     FD FA 31 F9 | 	getword	result1, result1, #0
2d0fc     02 FA 65 F0 | 	shl	result1, #2
2d100     FD 26 02 F1 | 	add	local01, result1
2d104     01 4E 85 F1 | 	sub	fp, #1
2d108     A7 FA C1 FA | 	rdbyte	result1, fp
2d10c     03 FA 05 F5 | 	and	result1, #3
2d110     FD FA 31 F9 | 	getword	result1, result1, #0
2d114     0A FA 65 F0 | 	shl	result1, #10
2d118     FD 26 02 F1 | 	add	local01, result1
2d11c     01 26 06 F1 | 	add	local01, #1
2d120     0A 4E 05 F1 | 	add	fp, #10
2d124     A7 26 62 FC | 	wrlong	local01, fp
2d128     1C 4E 85 F1 | 	sub	fp, #28
2d12c     A7 26 02 FB | 	rdlong	local01, fp
2d130     1C 4E 05 F1 | 	add	fp, #28
2d134     A7 FA 01 FB | 	rdlong	result1, fp
2d138     14 4E 85 F1 | 	sub	fp, #20
2d13c     A7 16 C2 FA | 	rdbyte	arg03, fp
2d140     14 4E 85 F1 | 	sub	fp, #20
2d144     09 16 86 F1 | 	sub	arg03, #9
2d148     0B FB 61 F0 | 	shl	result1, arg03
2d14c     13 FB 61 FC | 	wrlong	result1, local01
2d150                 | LR__4424
2d150     10 4E 05 F1 | 	add	fp, #16
2d154     A7 00 68 FC | 	wrlong	#0, fp
2d158     10 4E 85 F1 | 	sub	fp, #16
2d15c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2d15c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2d15c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2d15c                 | ' 				}
2d15c                 | ' 				res = RES_OK;
2d15c                 | ' 			}
2d15c                 | ' 			break;
2d15c     28 00 90 FD | 	jmp	#LR__4427
2d160                 | LR__4425
2d160     0C 4E 05 F1 | 	add	fp, #12
2d164     A7 26 02 FB | 	rdlong	local01, fp
2d168     13 01 69 FC | 	wrlong	#128, local01
2d16c     04 4E 05 F1 | 	add	fp, #4
2d170     A7 00 68 FC | 	wrlong	#0, fp
2d174     10 4E 85 F1 | 	sub	fp, #16
2d178                 | ' 			*(DWORD*)buff = 128;
2d178                 | ' 			res = RES_OK;
2d178                 | ' 			break;
2d178     0C 00 90 FD | 	jmp	#LR__4427
2d17c                 | LR__4426
2d17c     10 4E 05 F1 | 	add	fp, #16
2d180     A7 08 68 FC | 	wrlong	#4, fp
2d184     10 4E 85 F1 | 	sub	fp, #16
2d188                 | LR__4427
2d188     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1195
2d18c                 | ' 			res = RES_PARERR;
2d18c                 | ' 	}
2d18c                 | ' 
2d18c                 | ' 	deselect();
2d18c                 | ' 
2d18c                 | ' 	return res;
2d18c     10 4E 05 F1 | 	add	fp, #16
2d190     A7 FA 01 FB | 	rdlong	result1, fp
2d194     10 4E 85 F1 | 	sub	fp, #16
2d198                 | LR__4428
2d198     A7 F0 03 F6 | 	mov	ptra, fp
2d19c     B2 00 A0 FD | 	call	#popregs_
2d1a0                 | _fatfs_cc_disk_ioctl_ret
2d1a0     2D 00 64 FD | 	ret
2d1a4                 | 
2d1a4                 | _fatfs_cc_disk_setpins
2d1a4     00 12 0E F2 | 	cmp	arg01, #0 wz
2d1a8     01 FA 65 56 |  if_ne	neg	result1, #1
2d1ac     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2d1b0     01 00 00 FF 
2d1b4     10 E4 05 F1 | 	add	objptr, ##528
2d1b8     F2 14 62 FC | 	wrlong	arg02, objptr
2d1bc     04 E4 05 F1 | 	add	objptr, #4
2d1c0     F2 16 62 FC | 	wrlong	arg03, objptr
2d1c4     04 E4 05 F1 | 	add	objptr, #4
2d1c8     F2 18 62 FC | 	wrlong	arg04, objptr
2d1cc     04 E4 05 F1 | 	add	objptr, #4
2d1d0     F2 1A 62 FC | 	wrlong	arg05, objptr
2d1d4     01 00 00 FF 
2d1d8     1C E4 85 F1 | 	sub	objptr, ##540
2d1dc     00 FA 05 F6 | 	mov	result1, #0
2d1e0                 | _fatfs_cc_disk_setpins_ret
2d1e0     2D 00 64 FD | 	ret
2d1e4                 | 
2d1e4                 | _fatfs_cc_tchar2uni
2d1e4     09 01 02 FB | 	rdlong	_var01, arg01
2d1e8     00 03 02 F6 | 	mov	_var02, _var01
2d1ec     01 00 06 F1 | 	add	_var01, #1
2d1f0     00 05 02 F6 | 	mov	_var03, _var01
2d1f4     01 07 C2 FA | 	rdbyte	_var04, _var02
2d1f8     80 06 CE F7 | 	test	_var04, #128 wz
2d1fc     E8 00 90 AD |  if_e	jmp	#LR__4437
2d200     03 09 02 F6 | 	mov	_var05, _var04
2d204     E0 08 06 F5 | 	and	_var05, #224
2d208     C0 08 0E F2 | 	cmp	_var05, #192 wz
2d20c     1F 06 06 A5 |  if_e	and	_var04, #31
2d210     01 0A 06 A6 |  if_e	mov	_var06, #1
2d214     34 00 90 AD |  if_e	jmp	#LR__4431
2d218     03 09 02 F6 | 	mov	_var05, _var04
2d21c     F0 08 06 F5 | 	and	_var05, #240
2d220     E0 08 0E F2 | 	cmp	_var05, #224 wz
2d224     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2d228     02 0A 06 A6 |  if_e	mov	_var06, #2
2d22c     1C 00 90 AD |  if_e	jmp	#LR__4430
2d230     03 09 02 F6 | 	mov	_var05, _var04
2d234     F8 08 06 F5 | 	and	_var05, #248
2d238     F0 08 0E F2 | 	cmp	_var05, #240 wz
2d23c     07 06 06 A5 |  if_e	and	_var04, #7
2d240     03 0A 06 A6 |  if_e	mov	_var06, #3
2d244                 | ' 			return 0xFFFFFFFF;
2d244     01 FA 65 56 |  if_ne	neg	result1, #1
2d248     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2d24c                 | LR__4430
2d24c                 | LR__4431
2d24c                 | ' 		}
2d24c                 | ' 		do {
2d24c                 | LR__4432
2d24c     02 0D C2 FA | 	rdbyte	_var07, _var03
2d250     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2d254     C0 08 06 F5 | 	and	_var05, #192
2d258     80 08 0E F2 | 	cmp	_var05, #128 wz
2d25c     01 04 06 F1 | 	add	_var03, #1
2d260     01 FA 65 56 |  if_ne	neg	result1, #1
2d264     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2d268     06 06 66 F0 | 	shl	_var04, #6
2d26c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2d270     3F 02 06 F5 | 	and	_var02, #63
2d274     01 07 42 F5 | 	or	_var04, _var02
2d278     F4 0B 6E FB | 	djnz	_var06, #LR__4432
2d27c     80 06 16 F2 | 	cmp	_var04, #128 wc
2d280     24 00 90 CD |  if_b	jmp	#LR__4434
2d284     6C 00 00 FF 
2d288     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2d28c     0C 00 90 CD |  if_b	jmp	#LR__4433
2d290     70 00 00 FF 
2d294     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2d298     0C 00 90 CD |  if_b	jmp	#LR__4434
2d29c                 | LR__4433
2d29c     80 08 00 FF 
2d2a0     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2d2a4     08 00 90 CD |  if_b	jmp	#LR__4435
2d2a8                 | LR__4434
2d2a8     01 FA 65 F6 | 	neg	result1, #1
2d2ac     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2d2b0                 | LR__4435
2d2b0     80 00 00 FF 
2d2b4     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2d2b8     2C 00 90 CD |  if_b	jmp	#LR__4436
2d2bc     03 03 02 F6 | 	mov	_var02, _var04
2d2c0     80 00 00 FF 
2d2c4     00 02 86 F1 | 	sub	_var02, ##65536
2d2c8     06 02 66 F0 | 	shl	_var02, #6
2d2cc     80 FF 01 FF 
2d2d0     00 02 06 F5 | 	and	_var02, ##67043328
2d2d4     6E 00 6C FF 
2d2d8     00 08 06 F6 | 	mov	_var05, ##-671032320
2d2dc     01 09 42 F5 | 	or	_var05, _var02
2d2e0     09 06 46 F7 | 	zerox	_var04, #9
2d2e4     04 07 42 F5 | 	or	_var04, _var05
2d2e8                 | LR__4436
2d2e8                 | LR__4437
2d2e8     09 05 62 FC | 	wrlong	_var03, arg01
2d2ec                 | ' 	}
2d2ec                 | ' #line 811 "ff.c"
2d2ec                 | ' 	*str = p;
2d2ec                 | ' 	return uc;
2d2ec     03 FB 01 F6 | 	mov	result1, _var04
2d2f0                 | _fatfs_cc_tchar2uni_ret
2d2f0     2D 00 64 FD | 	ret
2d2f4                 | 
2d2f4                 | _fatfs_cc_put_utf
2d2f4     80 12 16 F2 | 	cmp	arg01, #128 wc
2d2f8     18 00 90 3D |  if_ae	jmp	#LR__4440
2d2fc     01 16 16 F2 | 	cmp	arg03, #1 wc
2d300     00 FA 05 C6 |  if_b	mov	result1, #0
2d304     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d308     0A 13 42 FC | 	wrbyte	arg01, arg02
2d30c                 | ' 		*buf = (TCHAR)chr;
2d30c                 | ' 		return 1;
2d30c     01 FA 05 F6 | 	mov	result1, #1
2d310     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d314                 | LR__4440
2d314     04 00 00 FF 
2d318     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2d31c     40 00 90 3D |  if_ae	jmp	#LR__4441
2d320     02 16 16 F2 | 	cmp	arg03, #2 wc
2d324     00 FA 05 C6 |  if_b	mov	result1, #0
2d328     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d32c     09 FB 01 F6 | 	mov	result1, arg01
2d330     06 FA 45 F0 | 	shr	result1, #6
2d334     1F FA 05 F5 | 	and	result1, #31
2d338     C0 16 06 F6 | 	mov	arg03, #192
2d33c     FD 16 42 F5 | 	or	arg03, result1
2d340     0A 17 42 FC | 	wrbyte	arg03, arg02
2d344     01 14 06 F1 | 	add	arg02, #1
2d348     3F 12 06 F5 | 	and	arg01, #63
2d34c     80 FA 05 F6 | 	mov	result1, #128
2d350     09 FB 41 F5 | 	or	result1, arg01
2d354     0A FB 41 FC | 	wrbyte	result1, arg02
2d358                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2d358                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2d358                 | ' 		return 2;
2d358     02 FA 05 F6 | 	mov	result1, #2
2d35c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d360                 | LR__4441
2d360     80 00 00 FF 
2d364     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2d368     70 00 90 3D |  if_ae	jmp	#LR__4444
2d36c     03 16 16 F2 | 	cmp	arg03, #3 wc
2d370     18 00 90 CD |  if_b	jmp	#LR__4442
2d374     6C 00 00 FF 
2d378     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2d37c     14 00 90 CD |  if_b	jmp	#LR__4443
2d380     70 00 00 FF 
2d384     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2d388     08 00 90 3D |  if_ae	jmp	#LR__4443
2d38c                 | LR__4442
2d38c     00 FA 05 F6 | 	mov	result1, #0
2d390     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d394                 | LR__4443
2d394     09 FB 59 F8 | 	getnib	result1, arg01, #3
2d398     E0 16 06 F6 | 	mov	arg03, #224
2d39c     FD 16 42 F5 | 	or	arg03, result1
2d3a0     0A 17 42 FC | 	wrbyte	arg03, arg02
2d3a4     01 14 06 F1 | 	add	arg02, #1
2d3a8     09 FB 01 F6 | 	mov	result1, arg01
2d3ac     06 FA 45 F0 | 	shr	result1, #6
2d3b0     3F FA 05 F5 | 	and	result1, #63
2d3b4     80 16 06 F6 | 	mov	arg03, #128
2d3b8     FD 16 42 F5 | 	or	arg03, result1
2d3bc     0A 17 42 FC | 	wrbyte	arg03, arg02
2d3c0     01 14 06 F1 | 	add	arg02, #1
2d3c4     3F 12 06 F5 | 	and	arg01, #63
2d3c8     80 FA 05 F6 | 	mov	result1, #128
2d3cc     09 FB 41 F5 | 	or	result1, arg01
2d3d0     0A FB 41 FC | 	wrbyte	result1, arg02
2d3d4                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2d3d4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2d3d4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2d3d4                 | ' 		return 3;
2d3d4     03 FA 05 F6 | 	mov	result1, #3
2d3d8     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d3dc                 | LR__4444
2d3dc     04 16 16 F2 | 	cmp	arg03, #4 wc
2d3e0     00 FA 05 C6 |  if_b	mov	result1, #0
2d3e4     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d3e8     09 01 02 F6 | 	mov	_var01, arg01
2d3ec     E0 01 06 F4 | 	bitl	_var01, #480
2d3f0     00 00 6C FF 
2d3f4     00 00 86 F1 | 	sub	_var01, ##-671088640
2d3f8     06 00 46 F0 | 	shr	_var01, #6
2d3fc     09 13 32 F9 | 	getword	arg01, arg01, #0
2d400     6E 00 00 FF 
2d404     00 12 86 F1 | 	sub	arg01, ##56320
2d408     00 08 00 FF 
2d40c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2d410     02 00 00 CF 
2d414     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2d418     00 FA 05 36 |  if_ae	mov	result1, #0
2d41c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2d420     09 01 42 F5 | 	or	_var01, arg01
2d424     80 00 00 FF 
2d428     00 00 06 F1 | 	add	_var01, ##65536
2d42c     00 FB 01 F6 | 	mov	result1, _var01
2d430     12 FA 45 F0 | 	shr	result1, #18
2d434     07 FA 05 F5 | 	and	result1, #7
2d438     F0 16 06 F6 | 	mov	arg03, #240
2d43c     FD 16 42 F5 | 	or	arg03, result1
2d440     0A 17 42 FC | 	wrbyte	arg03, arg02
2d444     01 14 06 F1 | 	add	arg02, #1
2d448     00 FB 01 F6 | 	mov	result1, _var01
2d44c     0C FA 45 F0 | 	shr	result1, #12
2d450     3F FA 05 F5 | 	and	result1, #63
2d454     80 16 06 F6 | 	mov	arg03, #128
2d458     FD 16 42 F5 | 	or	arg03, result1
2d45c     0A 17 42 FC | 	wrbyte	arg03, arg02
2d460     01 14 06 F1 | 	add	arg02, #1
2d464     00 FB 01 F6 | 	mov	result1, _var01
2d468     06 FA 45 F0 | 	shr	result1, #6
2d46c     3F FA 05 F5 | 	and	result1, #63
2d470     80 16 06 F6 | 	mov	arg03, #128
2d474     FD 16 42 F5 | 	or	arg03, result1
2d478     0A 17 42 FC | 	wrbyte	arg03, arg02
2d47c     01 14 06 F1 | 	add	arg02, #1
2d480     3F 00 06 F5 | 	and	_var01, #63
2d484     80 FA 05 F6 | 	mov	result1, #128
2d488     00 FB 41 F5 | 	or	result1, _var01
2d48c     0A FB 41 FC | 	wrbyte	result1, arg02
2d490                 | ' 	chr = (hc | chr) + 0x10000;
2d490                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2d490                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2d490                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2d490                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2d490                 | ' 	return 4;
2d490     04 FA 05 F6 | 	mov	result1, #4
2d494                 | _fatfs_cc_put_utf_ret
2d494     2D 00 64 FD | 	ret
2d498                 | 
2d498                 | _fatfs_cc_sync_window
2d498     02 4A 05 F6 | 	mov	COUNT_, #2
2d49c     A8 00 A0 FD | 	call	#pushregs_
2d4a0     09 27 02 F6 | 	mov	local01, arg01
2d4a4     00 28 06 F6 | 	mov	local02, #0
2d4a8     03 26 06 F1 | 	add	local01, #3
2d4ac     13 FB C9 FA | 	rdbyte	result1, local01 wz
2d4b0     03 26 86 F1 | 	sub	local01, #3
2d4b4     A4 00 90 AD |  if_e	jmp	#LR__4452
2d4b8     01 26 06 F1 | 	add	local01, #1
2d4bc     13 13 C2 FA | 	rdbyte	arg01, local01
2d4c0     33 26 06 F1 | 	add	local01, #51
2d4c4     13 15 02 F6 | 	mov	arg02, local01
2d4c8     04 26 86 F1 | 	sub	local01, #4
2d4cc     13 17 02 FB | 	rdlong	arg03, local01
2d4d0     30 26 86 F1 | 	sub	local01, #48
2d4d4     01 18 06 F6 | 	mov	arg04, #1
2d4d8     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2d4dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d4e0     74 00 90 5D |  if_ne	jmp	#LR__4450
2d4e4     03 26 06 F1 | 	add	local01, #3
2d4e8     13 01 48 FC | 	wrbyte	#0, local01
2d4ec     2D 26 06 F1 | 	add	local01, #45
2d4f0     13 FB 01 FB | 	rdlong	result1, local01
2d4f4     0C 26 86 F1 | 	sub	local01, #12
2d4f8     13 19 02 FB | 	rdlong	arg04, local01
2d4fc     0C FB 81 F1 | 	sub	result1, arg04
2d500     08 26 86 F1 | 	sub	local01, #8
2d504     13 19 02 FB | 	rdlong	arg04, local01
2d508     1C 26 86 F1 | 	sub	local01, #28
2d50c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2d510     48 00 90 3D |  if_ae	jmp	#LR__4451
2d514     02 26 06 F1 | 	add	local01, #2
2d518     13 19 C2 FA | 	rdbyte	arg04, local01
2d51c     02 26 86 F1 | 	sub	local01, #2
2d520     02 18 0E F2 | 	cmp	arg04, #2 wz
2d524     34 00 90 5D |  if_ne	jmp	#LR__4451
2d528     01 26 06 F1 | 	add	local01, #1
2d52c     13 13 C2 FA | 	rdbyte	arg01, local01
2d530     33 26 06 F1 | 	add	local01, #51
2d534     13 15 02 F6 | 	mov	arg02, local01
2d538     04 26 86 F1 | 	sub	local01, #4
2d53c     13 17 02 FB | 	rdlong	arg03, local01
2d540     14 26 86 F1 | 	sub	local01, #20
2d544     13 27 02 FB | 	rdlong	local01, local01
2d548     13 17 02 F1 | 	add	arg03, local01
2d54c     01 18 06 F6 | 	mov	arg04, #1
2d550     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2d554     04 00 90 FD | 	jmp	#LR__4451
2d558                 | LR__4450
2d558     01 28 06 F6 | 	mov	local02, #1
2d55c                 | LR__4451
2d55c                 | LR__4452
2d55c                 | ' 			res = FR_DISK_ERR;
2d55c                 | ' 		}
2d55c                 | ' 	}
2d55c                 | ' 	return res;
2d55c     14 FB 01 F6 | 	mov	result1, local02
2d560     A7 F0 03 F6 | 	mov	ptra, fp
2d564     B2 00 A0 FD | 	call	#popregs_
2d568                 | _fatfs_cc_sync_window_ret
2d568     2D 00 64 FD | 	ret
2d56c                 | 
2d56c                 | _fatfs_cc_move_window
2d56c     03 4A 05 F6 | 	mov	COUNT_, #3
2d570     A8 00 A0 FD | 	call	#pushregs_
2d574     09 27 02 F6 | 	mov	local01, arg01
2d578     0A 29 02 F6 | 	mov	local02, arg02
2d57c     00 2A 06 F6 | 	mov	local03, #0
2d580     30 26 06 F1 | 	add	local01, #48
2d584     13 19 02 FB | 	rdlong	arg04, local01
2d588     30 26 86 F1 | 	sub	local01, #48
2d58c     0C 29 0A F2 | 	cmp	local02, arg04 wz
2d590     40 00 90 AD |  if_e	jmp	#LR__4461
2d594     13 13 02 F6 | 	mov	arg01, local01
2d598     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2d59c     FD 2A 0A F6 | 	mov	local03, result1 wz
2d5a0     30 00 90 5D |  if_ne	jmp	#LR__4460
2d5a4     01 26 06 F1 | 	add	local01, #1
2d5a8     13 13 C2 FA | 	rdbyte	arg01, local01
2d5ac     33 26 06 F1 | 	add	local01, #51
2d5b0     13 15 02 F6 | 	mov	arg02, local01
2d5b4     14 17 02 F6 | 	mov	arg03, local02
2d5b8     01 18 06 F6 | 	mov	arg04, #1
2d5bc     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2d5c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d5c4     01 28 66 56 |  if_ne	neg	local02, #1
2d5c8     01 2A 06 56 |  if_ne	mov	local03, #1
2d5cc     04 26 86 F1 | 	sub	local01, #4
2d5d0     13 29 62 FC | 	wrlong	local02, local01
2d5d4                 | LR__4460
2d5d4                 | LR__4461
2d5d4                 | ' 				sect = (LBA_t)0 - 1;
2d5d4                 | ' 				res = FR_DISK_ERR;
2d5d4                 | ' 			}
2d5d4                 | ' 			fs->winsect = sect;
2d5d4                 | ' 		}
2d5d4                 | ' 	}
2d5d4                 | ' 	return res;
2d5d4     15 FB 01 F6 | 	mov	result1, local03
2d5d8     A7 F0 03 F6 | 	mov	ptra, fp
2d5dc     B2 00 A0 FD | 	call	#popregs_
2d5e0                 | _fatfs_cc_move_window_ret
2d5e0     2D 00 64 FD | 	ret
2d5e4                 | 
2d5e4                 | _fatfs_cc_sync_fs
2d5e4     02 4A 05 F6 | 	mov	COUNT_, #2
2d5e8     A8 00 A0 FD | 	call	#pushregs_
2d5ec     09 27 02 F6 | 	mov	local01, arg01
2d5f0     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2d5f4     FD 28 0A F6 | 	mov	local02, result1 wz
2d5f8     D8 00 90 5D |  if_ne	jmp	#LR__4471
2d5fc     13 19 C2 FA | 	rdbyte	arg04, local01
2d600     03 18 0E F2 | 	cmp	arg04, #3 wz
2d604     04 26 06 A1 |  if_e	add	local01, #4
2d608     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2d60c     04 26 86 A1 |  if_e	sub	local01, #4
2d610     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2d614     A0 00 90 5D |  if_ne	jmp	#LR__4470
2d618     34 26 06 F1 | 	add	local01, #52
2d61c     13 13 02 F6 | 	mov	arg01, local01
2d620     00 14 06 F6 | 	mov	arg02, #0
2d624     09 16 C6 F9 | 	decod	arg03, #9
2d628     98 00 A0 FD | 	call	#\builtin_bytefill_
2d62c     13 13 02 F6 | 	mov	arg01, local01
2d630     FE 13 06 F1 | 	add	arg01, #510
2d634     55 00 80 FF 
2d638     09 AB 58 FC | 	wrword	##43605, arg01
2d63c     A9 B0 A0 FF 
2d640     13 A5 68 FC | 	wrlong	##1096897106, local01
2d644     13 13 02 F6 | 	mov	arg01, local01
2d648     E4 13 06 F1 | 	add	arg01, #484
2d64c     B9 A0 B0 FF 
2d650     09 E5 68 FC | 	wrlong	##1631679090, arg01
2d654     13 13 02 F6 | 	mov	arg01, local01
2d658     E8 13 06 F1 | 	add	arg01, #488
2d65c     20 26 86 F1 | 	sub	local01, #32
2d660     13 15 02 FB | 	rdlong	arg02, local01
2d664     09 15 62 FC | 	wrlong	arg02, arg01
2d668     20 26 06 F1 | 	add	local01, #32
2d66c     13 13 02 F6 | 	mov	arg01, local01
2d670     EC 13 06 F1 | 	add	arg01, #492
2d674     24 26 86 F1 | 	sub	local01, #36
2d678     13 15 02 FB | 	rdlong	arg02, local01
2d67c     09 15 62 FC | 	wrlong	arg02, arg01
2d680     10 26 06 F1 | 	add	local01, #16
2d684     13 17 02 FB | 	rdlong	arg03, local01
2d688     01 16 06 F1 | 	add	arg03, #1
2d68c     10 26 06 F1 | 	add	local01, #16
2d690     13 17 62 FC | 	wrlong	arg03, local01
2d694     2F 26 86 F1 | 	sub	local01, #47
2d698     13 13 C2 FA | 	rdbyte	arg01, local01
2d69c     33 26 06 F1 | 	add	local01, #51
2d6a0     13 15 02 F6 | 	mov	arg02, local01
2d6a4     01 18 06 F6 | 	mov	arg04, #1
2d6a8     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2d6ac     30 26 86 F1 | 	sub	local01, #48
2d6b0     13 01 48 FC | 	wrbyte	#0, local01
2d6b4     04 26 86 F1 | 	sub	local01, #4
2d6b8                 | LR__4470
2d6b8     01 26 06 F1 | 	add	local01, #1
2d6bc     13 13 C2 FA | 	rdbyte	arg01, local01
2d6c0     00 14 06 F6 | 	mov	arg02, #0
2d6c4     00 16 06 F6 | 	mov	arg03, #0
2d6c8     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2d6cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6d0     01 28 06 56 |  if_ne	mov	local02, #1
2d6d4                 | LR__4471
2d6d4                 | ' 	}
2d6d4                 | ' 
2d6d4                 | ' 	return res;
2d6d4     14 FB 01 F6 | 	mov	result1, local02
2d6d8     A7 F0 03 F6 | 	mov	ptra, fp
2d6dc     B2 00 A0 FD | 	call	#popregs_
2d6e0                 | _fatfs_cc_sync_fs_ret
2d6e0     2D 00 64 FD | 	ret
2d6e4                 | 
2d6e4                 | _fatfs_cc_clst2sect
2d6e4     02 14 86 F1 | 	sub	arg02, #2
2d6e8     18 12 06 F1 | 	add	arg01, #24
2d6ec     09 01 02 FB | 	rdlong	_var01, arg01
2d6f0     18 12 86 F1 | 	sub	arg01, #24
2d6f4     02 00 86 F1 | 	sub	_var01, #2
2d6f8     00 15 12 F2 | 	cmp	arg02, _var01 wc
2d6fc     00 FA 05 36 |  if_ae	mov	result1, #0
2d700     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2d704     0A 12 06 F1 | 	add	arg01, #10
2d708     09 01 E2 FA | 	rdword	_var01, arg01
2d70c     0A 01 02 FD | 	qmul	_var01, arg02
2d710                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2d710     22 12 06 F1 | 	add	arg01, #34
2d714     09 FB 01 FB | 	rdlong	result1, arg01
2d718     18 00 62 FD | 	getqx	_var01
2d71c     00 FB 01 F1 | 	add	result1, _var01
2d720                 | _fatfs_cc_clst2sect_ret
2d720     2D 00 64 FD | 	ret
2d724                 | 
2d724                 | _fatfs_cc_get_fat
2d724     07 4A 05 F6 | 	mov	COUNT_, #7
2d728     A8 00 A0 FD | 	call	#pushregs_
2d72c     0A 27 02 F6 | 	mov	local01, arg02
2d730     09 29 02 FB | 	rdlong	local02, arg01
2d734     02 26 16 F2 | 	cmp	local01, #2 wc
2d738     14 00 90 CD |  if_b	jmp	#LR__4480
2d73c     18 28 06 F1 | 	add	local02, #24
2d740     14 2B 02 FB | 	rdlong	local03, local02
2d744     18 28 86 F1 | 	sub	local02, #24
2d748     15 27 12 F2 | 	cmp	local01, local03 wc
2d74c     08 00 90 CD |  if_b	jmp	#LR__4481
2d750                 | LR__4480
2d750     01 2C 06 F6 | 	mov	local04, #1
2d754     60 01 90 FD | 	jmp	#LR__4488
2d758                 | LR__4481
2d758     01 2C 66 F6 | 	neg	local04, #1
2d75c                 | ' 		val = 0xFFFFFFFF;
2d75c                 | ' 
2d75c                 | ' 		switch (fs->fs_type) {
2d75c     14 2F C2 FA | 	rdbyte	local05, local02
2d760     01 2E 86 F1 | 	sub	local05, #1
2d764     03 2E 26 F3 | 	fle	local05, #3
2d768     30 2E 62 FD | 	jmprel	local05
2d76c                 | LR__4482
2d76c     0C 00 90 FD | 	jmp	#LR__4483
2d770     B8 00 90 FD | 	jmp	#LR__4484
2d774     F8 00 90 FD | 	jmp	#LR__4485
2d778     38 01 90 FD | 	jmp	#LR__4486
2d77c                 | LR__4483
2d77c     13 2F 02 F6 | 	mov	local05, local01
2d780     13 13 02 F6 | 	mov	arg01, local01
2d784     01 12 46 F0 | 	shr	arg01, #1
2d788     09 2F 02 F1 | 	add	local05, arg01
2d78c     14 13 02 F6 | 	mov	arg01, local02
2d790     17 31 02 F6 | 	mov	local06, local05
2d794     09 30 46 F0 | 	shr	local06, #9
2d798     24 28 06 F1 | 	add	local02, #36
2d79c     14 15 02 FB | 	rdlong	arg02, local02
2d7a0     24 28 86 F1 | 	sub	local02, #36
2d7a4     18 15 02 F1 | 	add	arg02, local06
2d7a8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2d7ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7b0     04 01 90 5D |  if_ne	jmp	#LR__4487
2d7b4     17 31 02 F6 | 	mov	local06, local05
2d7b8     FF 31 06 F5 | 	and	local06, #511
2d7bc     34 28 06 F1 | 	add	local02, #52
2d7c0     14 31 02 F1 | 	add	local06, local02
2d7c4     18 33 C2 FA | 	rdbyte	local07, local06
2d7c8     34 28 86 F1 | 	sub	local02, #52
2d7cc     14 13 02 F6 | 	mov	arg01, local02
2d7d0     01 2E 06 F1 | 	add	local05, #1
2d7d4     17 31 02 F6 | 	mov	local06, local05
2d7d8     09 30 46 F0 | 	shr	local06, #9
2d7dc     24 28 06 F1 | 	add	local02, #36
2d7e0     14 15 02 FB | 	rdlong	arg02, local02
2d7e4     24 28 86 F1 | 	sub	local02, #36
2d7e8     18 15 02 F1 | 	add	arg02, local06
2d7ec     7C FD BF FD | 	call	#_fatfs_cc_move_window
2d7f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7f4     C0 00 90 5D |  if_ne	jmp	#LR__4487
2d7f8     FF 2F 06 F5 | 	and	local05, #511
2d7fc     34 28 06 F1 | 	add	local02, #52
2d800     14 2F 02 F1 | 	add	local05, local02
2d804     17 31 C2 FA | 	rdbyte	local06, local05
2d808     08 30 66 F0 | 	shl	local06, #8
2d80c     18 33 42 F5 | 	or	local07, local06
2d810     01 26 CE F7 | 	test	local01, #1 wz
2d814     04 32 46 50 |  if_ne	shr	local07, #4
2d818     19 2B 02 56 |  if_ne	mov	local03, local07
2d81c     0B 32 46 A7 |  if_e	zerox	local07, #11
2d820     19 2B 02 A6 |  if_e	mov	local03, local07
2d824     15 2D 02 F6 | 	mov	local04, local03
2d828                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2d828                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2d828                 | ' 			break;
2d828     8C 00 90 FD | 	jmp	#LR__4487
2d82c                 | LR__4484
2d82c     14 13 02 F6 | 	mov	arg01, local02
2d830     13 31 02 F6 | 	mov	local06, local01
2d834     08 30 46 F0 | 	shr	local06, #8
2d838     24 28 06 F1 | 	add	local02, #36
2d83c     14 15 02 FB | 	rdlong	arg02, local02
2d840     24 28 86 F1 | 	sub	local02, #36
2d844     18 15 02 F1 | 	add	arg02, local06
2d848     20 FD BF FD | 	call	#_fatfs_cc_move_window
2d84c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d850     64 00 90 5D |  if_ne	jmp	#LR__4487
2d854     34 28 06 F1 | 	add	local02, #52
2d858     01 26 66 F0 | 	shl	local01, #1
2d85c     FF 27 06 F5 | 	and	local01, #511
2d860     13 29 02 F1 | 	add	local02, local01
2d864                 | ' {
2d864                 | ' 
2d864                 | ' 	return *((WORD*)ptr);
2d864     14 FB E1 FA | 	rdword	result1, local02
2d868     FD 2C 32 F9 | 	getword	local04, result1, #0
2d86c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2d86c                 | ' 			break;
2d86c     48 00 90 FD | 	jmp	#LR__4487
2d870                 | LR__4485
2d870     14 13 02 F6 | 	mov	arg01, local02
2d874     13 31 02 F6 | 	mov	local06, local01
2d878     07 30 46 F0 | 	shr	local06, #7
2d87c     24 28 06 F1 | 	add	local02, #36
2d880     14 15 02 FB | 	rdlong	arg02, local02
2d884     24 28 86 F1 | 	sub	local02, #36
2d888     18 15 02 F1 | 	add	arg02, local06
2d88c     DC FC BF FD | 	call	#_fatfs_cc_move_window
2d890     00 FA 0D F2 | 	cmp	result1, #0 wz
2d894     20 00 90 5D |  if_ne	jmp	#LR__4487
2d898     34 28 06 F1 | 	add	local02, #52
2d89c     02 26 66 F0 | 	shl	local01, #2
2d8a0     FF 27 06 F5 | 	and	local01, #511
2d8a4     13 29 02 F1 | 	add	local02, local01
2d8a8                 | ' {
2d8a8                 | ' 
2d8a8                 | ' 	return *((DWORD*)ptr);
2d8a8     14 2D 02 FB | 	rdlong	local04, local02
2d8ac     7C 2C 06 F4 | 	bitl	local04, #124
2d8b0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2d8b0                 | ' 			break;
2d8b0     04 00 90 FD | 	jmp	#LR__4487
2d8b4                 | LR__4486
2d8b4     01 2C 06 F6 | 	mov	local04, #1
2d8b8                 | LR__4487
2d8b8                 | LR__4488
2d8b8                 | ' 			val = 1;
2d8b8                 | ' 		}
2d8b8                 | ' 	}
2d8b8                 | ' 
2d8b8                 | ' 	return val;
2d8b8     16 FB 01 F6 | 	mov	result1, local04
2d8bc     A7 F0 03 F6 | 	mov	ptra, fp
2d8c0     B2 00 A0 FD | 	call	#popregs_
2d8c4                 | _fatfs_cc_get_fat_ret
2d8c4     2D 00 64 FD | 	ret
2d8c8                 | 
2d8c8                 | _fatfs_cc_put_fat
2d8c8     08 4A 05 F6 | 	mov	COUNT_, #8
2d8cc     A8 00 A0 FD | 	call	#pushregs_
2d8d0     09 27 02 F6 | 	mov	local01, arg01
2d8d4     0A 29 02 F6 | 	mov	local02, arg02
2d8d8     0B 2B 02 F6 | 	mov	local03, arg03
2d8dc     02 2C 06 F6 | 	mov	local04, #2
2d8e0     02 28 16 F2 | 	cmp	local02, #2 wc
2d8e4     E0 01 90 CD |  if_b	jmp	#LR__4497
2d8e8     18 26 06 F1 | 	add	local01, #24
2d8ec     13 2F 02 FB | 	rdlong	local05, local01
2d8f0     18 26 86 F1 | 	sub	local01, #24
2d8f4     17 29 12 F2 | 	cmp	local02, local05 wc
2d8f8     CC 01 90 3D |  if_ae	jmp	#LR__4497
2d8fc                 | ' 		switch (fs->fs_type) {
2d8fc     13 31 C2 FA | 	rdbyte	local06, local01
2d900     01 30 86 F1 | 	sub	local06, #1
2d904     03 30 26 F3 | 	fle	local06, #3
2d908     30 30 62 FD | 	jmprel	local06
2d90c                 | LR__4490
2d90c     0C 00 90 FD | 	jmp	#LR__4491
2d910     F8 00 90 FD | 	jmp	#LR__4494
2d914     40 01 90 FD | 	jmp	#LR__4495
2d918     AC 01 90 FD | 	jmp	#LR__4496
2d91c                 | LR__4491
2d91c     14 33 02 F6 | 	mov	local07, local02
2d920     14 2F 02 F6 | 	mov	local05, local02
2d924     01 2E 46 F0 | 	shr	local05, #1
2d928     17 33 02 F1 | 	add	local07, local05
2d92c     13 13 02 F6 | 	mov	arg01, local01
2d930     19 31 02 F6 | 	mov	local06, local07
2d934     09 30 46 F0 | 	shr	local06, #9
2d938     24 26 06 F1 | 	add	local01, #36
2d93c     13 15 02 FB | 	rdlong	arg02, local01
2d940     24 26 86 F1 | 	sub	local01, #36
2d944     18 15 02 F1 | 	add	arg02, local06
2d948     20 FC BF FD | 	call	#_fatfs_cc_move_window
2d94c     FD 2C 0A F6 | 	mov	local04, result1 wz
2d950     74 01 90 5D |  if_ne	jmp	#LR__4496
2d954     34 26 06 F1 | 	add	local01, #52
2d958     13 35 02 F6 | 	mov	local08, local01
2d95c     19 2F 02 F6 | 	mov	local05, local07
2d960     FF 2F 06 F5 | 	and	local05, #511
2d964     17 35 02 F1 | 	add	local08, local05
2d968     01 28 CE F7 | 	test	local02, #1 wz
2d96c     34 26 86 F1 | 	sub	local01, #52
2d970     01 32 06 F1 | 	add	local07, #1
2d974     18 00 90 AD |  if_e	jmp	#LR__4492
2d978     1A 2F C2 FA | 	rdbyte	local05, local08
2d97c     17 2F 42 F8 | 	getnib	local05, local05, #0
2d980     15 31 E2 F8 | 	getbyte	local06, local03, #0
2d984     04 30 66 F0 | 	shl	local06, #4
2d988     18 2F 42 F5 | 	or	local05, local06
2d98c     04 00 90 FD | 	jmp	#LR__4493
2d990                 | LR__4492
2d990     15 2F 02 F6 | 	mov	local05, local03
2d994                 | LR__4493
2d994     1A 2F 42 FC | 	wrbyte	local05, local08
2d998     03 26 06 F1 | 	add	local01, #3
2d99c     13 03 48 FC | 	wrbyte	#1, local01
2d9a0     03 26 86 F1 | 	sub	local01, #3
2d9a4     13 13 02 F6 | 	mov	arg01, local01
2d9a8     19 35 02 F6 | 	mov	local08, local07
2d9ac     09 34 46 F0 | 	shr	local08, #9
2d9b0     24 26 06 F1 | 	add	local01, #36
2d9b4     13 15 02 FB | 	rdlong	arg02, local01
2d9b8     24 26 86 F1 | 	sub	local01, #36
2d9bc     1A 15 02 F1 | 	add	arg02, local08
2d9c0     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2d9c4     FD 2C 0A F6 | 	mov	local04, result1 wz
2d9c8     FC 00 90 5D |  if_ne	jmp	#LR__4496
2d9cc     34 26 06 F1 | 	add	local01, #52
2d9d0     13 35 02 F6 | 	mov	local08, local01
2d9d4     FF 33 06 F5 | 	and	local07, #511
2d9d8     19 35 02 F1 | 	add	local08, local07
2d9dc     01 28 CE F7 | 	test	local02, #1 wz
2d9e0     04 2A 46 50 |  if_ne	shr	local03, #4
2d9e4     15 2F 02 56 |  if_ne	mov	local05, local03
2d9e8     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2d9ec     F0 2E 06 A5 |  if_e	and	local05, #240
2d9f0     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2d9f4     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2d9f8     15 2F 42 A5 |  if_e	or	local05, local03
2d9fc     1A 2F 42 FC | 	wrbyte	local05, local08
2da00     31 26 86 F1 | 	sub	local01, #49
2da04     13 03 48 FC | 	wrbyte	#1, local01
2da08                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2da08                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2da08                 | ' 			fs->wflag = 1;
2da08                 | ' 			break;
2da08     BC 00 90 FD | 	jmp	#LR__4496
2da0c                 | LR__4494
2da0c     13 13 02 F6 | 	mov	arg01, local01
2da10     14 35 02 F6 | 	mov	local08, local02
2da14     08 34 46 F0 | 	shr	local08, #8
2da18     24 26 06 F1 | 	add	local01, #36
2da1c     13 15 02 FB | 	rdlong	arg02, local01
2da20     24 26 86 F1 | 	sub	local01, #36
2da24     1A 15 02 F1 | 	add	arg02, local08
2da28     40 FB BF FD | 	call	#_fatfs_cc_move_window
2da2c     FD 2C 0A F6 | 	mov	local04, result1 wz
2da30     94 00 90 5D |  if_ne	jmp	#LR__4496
2da34     34 26 06 F1 | 	add	local01, #52
2da38     13 13 02 F6 | 	mov	arg01, local01
2da3c     01 28 66 F0 | 	shl	local02, #1
2da40     FF 29 06 F5 | 	and	local02, #511
2da44     14 13 02 F1 | 	add	arg01, local02
2da48     09 2B 52 FC | 	wrword	local03, arg01
2da4c     31 26 86 F1 | 	sub	local01, #49
2da50     13 03 48 FC | 	wrbyte	#1, local01
2da54                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2da54                 | ' 			fs->wflag = 1;
2da54                 | ' 			break;
2da54     70 00 90 FD | 	jmp	#LR__4496
2da58                 | LR__4495
2da58     13 13 02 F6 | 	mov	arg01, local01
2da5c     14 35 02 F6 | 	mov	local08, local02
2da60     07 34 46 F0 | 	shr	local08, #7
2da64     24 26 06 F1 | 	add	local01, #36
2da68     13 15 02 FB | 	rdlong	arg02, local01
2da6c     24 26 86 F1 | 	sub	local01, #36
2da70     1A 15 02 F1 | 	add	arg02, local08
2da74     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2da78     FD 2C 0A F6 | 	mov	local04, result1 wz
2da7c     48 00 90 5D |  if_ne	jmp	#LR__4496
2da80     7C 2A 06 F4 | 	bitl	local03, #124
2da84     34 26 06 F1 | 	add	local01, #52
2da88     14 35 02 F6 | 	mov	local08, local02
2da8c     02 34 66 F0 | 	shl	local08, #2
2da90     FF 35 06 F5 | 	and	local08, #511
2da94     13 13 02 F6 | 	mov	arg01, local01
2da98     1A 13 02 F1 | 	add	arg01, local08
2da9c                 | ' {
2da9c                 | ' 
2da9c                 | ' 	return *((DWORD*)ptr);
2da9c     09 35 02 FB | 	rdlong	local08, arg01
2daa0     00 00 78 FF 
2daa4     00 34 06 F5 | 	and	local08, ##-268435456
2daa8     1A 2B 42 F5 | 	or	local03, local08
2daac     13 13 02 F6 | 	mov	arg01, local01
2dab0     02 28 66 F0 | 	shl	local02, #2
2dab4     FF 29 06 F5 | 	and	local02, #511
2dab8     14 13 02 F1 | 	add	arg01, local02
2dabc     09 2B 62 FC | 	wrlong	local03, arg01
2dac0     31 26 86 F1 | 	sub	local01, #49
2dac4     13 03 48 FC | 	wrbyte	#1, local01
2dac8                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2dac8                 | ' 			}
2dac8                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2dac8                 | ' 			fs->wflag = 1;
2dac8                 | ' 			break;
2dac8                 | LR__4496
2dac8                 | LR__4497
2dac8                 | ' 		}
2dac8                 | ' 	}
2dac8                 | ' 	return res;
2dac8     16 FB 01 F6 | 	mov	result1, local04
2dacc     A7 F0 03 F6 | 	mov	ptra, fp
2dad0     B2 00 A0 FD | 	call	#popregs_
2dad4                 | _fatfs_cc_put_fat_ret
2dad4     2D 00 64 FD | 	ret
2dad8                 | 
2dad8                 | _fatfs_cc_remove_chain
2dad8     05 4A 05 F6 | 	mov	COUNT_, #5
2dadc     A8 00 A0 FD | 	call	#pushregs_
2dae0     09 27 02 F6 | 	mov	local01, arg01
2dae4     0A 29 02 F6 | 	mov	local02, arg02
2dae8     0B 2B 02 F6 | 	mov	local03, arg03
2daec     13 2D 02 FB | 	rdlong	local04, local01
2daf0     02 28 16 F2 | 	cmp	local02, #2 wc
2daf4     14 00 90 CD |  if_b	jmp	#LR__4500
2daf8     18 2C 06 F1 | 	add	local04, #24
2dafc     16 FB 01 FB | 	rdlong	result1, local04
2db00     18 2C 86 F1 | 	sub	local04, #24
2db04     FD 28 12 F2 | 	cmp	local02, result1 wc
2db08     08 00 90 CD |  if_b	jmp	#LR__4501
2db0c                 | LR__4500
2db0c     02 FA 05 F6 | 	mov	result1, #2
2db10     CC 00 90 FD | 	jmp	#LR__4506
2db14                 | LR__4501
2db14     00 2A 0E F2 | 	cmp	local03, #0 wz
2db18     18 00 90 AD |  if_e	jmp	#LR__4502
2db1c     15 15 02 F6 | 	mov	arg02, local03
2db20     16 13 02 F6 | 	mov	arg01, local04
2db24     01 16 66 F6 | 	neg	arg03, #1
2db28     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2db2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2db30     AC 00 90 5D |  if_ne	jmp	#LR__4506
2db34                 | LR__4502
2db34                 | ' 	}
2db34                 | ' 
2db34                 | ' 
2db34                 | ' 	do {
2db34                 | LR__4503
2db34     14 15 02 F6 | 	mov	arg02, local02
2db38     13 13 02 F6 | 	mov	arg01, local01
2db3c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2db40     FD 2E 0A F6 | 	mov	local05, result1 wz
2db44     94 00 90 AD |  if_e	jmp	#LR__4505
2db48     01 2E 0E F2 | 	cmp	local05, #1 wz
2db4c     02 FA 05 A6 |  if_e	mov	result1, #2
2db50     8C 00 90 AD |  if_e	jmp	#LR__4506
2db54     FF FF 7F FF 
2db58     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2db5c     01 FA 05 A6 |  if_e	mov	result1, #1
2db60     7C 00 90 AD |  if_e	jmp	#LR__4506
2db64     14 15 02 F6 | 	mov	arg02, local02
2db68     16 13 02 F6 | 	mov	arg01, local04
2db6c     00 16 06 F6 | 	mov	arg03, #0
2db70     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2db74     FD 2A 0A F6 | 	mov	local03, result1 wz
2db78     15 FB 01 56 |  if_ne	mov	result1, local03
2db7c     60 00 90 5D |  if_ne	jmp	#LR__4506
2db80     18 2C 06 F1 | 	add	local04, #24
2db84     16 2B 02 FB | 	rdlong	local03, local04
2db88     02 2A 86 F1 | 	sub	local03, #2
2db8c     04 2C 86 F1 | 	sub	local04, #4
2db90     16 29 02 FB | 	rdlong	local02, local04
2db94     14 2C 86 F1 | 	sub	local04, #20
2db98     15 29 12 F2 | 	cmp	local02, local03 wc
2db9c     24 00 90 3D |  if_ae	jmp	#LR__4504
2dba0     14 2C 06 F1 | 	add	local04, #20
2dba4     16 2B 02 FB | 	rdlong	local03, local04
2dba8     01 2A 06 F1 | 	add	local03, #1
2dbac     16 2B 62 FC | 	wrlong	local03, local04
2dbb0     10 2C 86 F1 | 	sub	local04, #16
2dbb4     16 2B C2 FA | 	rdbyte	local03, local04
2dbb8     01 2A 46 F5 | 	or	local03, #1
2dbbc     16 2B 42 FC | 	wrbyte	local03, local04
2dbc0     04 2C 86 F1 | 	sub	local04, #4
2dbc4                 | LR__4504
2dbc4     17 29 02 F6 | 	mov	local02, local05
2dbc8     18 2C 06 F1 | 	add	local04, #24
2dbcc     16 2F 02 FB | 	rdlong	local05, local04
2dbd0     18 2C 86 F1 | 	sub	local04, #24
2dbd4     17 29 12 F2 | 	cmp	local02, local05 wc
2dbd8     58 FF 9F CD |  if_b	jmp	#LR__4503
2dbdc                 | LR__4505
2dbdc                 | ' #line 1500 "ff.c"
2dbdc                 | ' 	return FR_OK;
2dbdc     00 FA 05 F6 | 	mov	result1, #0
2dbe0                 | LR__4506
2dbe0     A7 F0 03 F6 | 	mov	ptra, fp
2dbe4     B2 00 A0 FD | 	call	#popregs_
2dbe8                 | _fatfs_cc_remove_chain_ret
2dbe8     2D 00 64 FD | 	ret
2dbec                 | 
2dbec                 | _fatfs_cc_create_chain
2dbec     09 4A 05 F6 | 	mov	COUNT_, #9
2dbf0     A8 00 A0 FD | 	call	#pushregs_
2dbf4     09 27 02 F6 | 	mov	local01, arg01
2dbf8     0A 29 0A F6 | 	mov	local02, arg02 wz
2dbfc     13 2B 02 FB | 	rdlong	local03, local01
2dc00     28 00 90 5D |  if_ne	jmp	#LR__4510
2dc04     10 2A 06 F1 | 	add	local03, #16
2dc08     15 2D 0A FB | 	rdlong	local04, local03 wz
2dc0c     10 2A 86 F1 | 	sub	local03, #16
2dc10     18 2A 06 51 |  if_ne	add	local03, #24
2dc14     15 2F 02 5B |  if_ne	rdlong	local05, local03
2dc18     18 2A 86 51 |  if_ne	sub	local03, #24
2dc1c     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2dc20     50 00 90 4D |  if_c_and_nz	jmp	#LR__4511
2dc24     01 2C 06 F6 | 	mov	local04, #1
2dc28     48 00 90 FD | 	jmp	#LR__4511
2dc2c                 | LR__4510
2dc2c     14 15 02 F6 | 	mov	arg02, local02
2dc30     13 13 02 F6 | 	mov	arg01, local01
2dc34     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2dc38     FD 2C 02 F6 | 	mov	local04, result1
2dc3c     02 2C 16 F2 | 	cmp	local04, #2 wc
2dc40     01 FA 05 C6 |  if_b	mov	result1, #1
2dc44     BC 01 90 CD |  if_b	jmp	#LR__4521
2dc48     FF FF 7F FF 
2dc4c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2dc50     16 FB 01 A6 |  if_e	mov	result1, local04
2dc54     AC 01 90 AD |  if_e	jmp	#LR__4521
2dc58     18 2A 06 F1 | 	add	local03, #24
2dc5c     15 2F 02 FB | 	rdlong	local05, local03
2dc60     18 2A 86 F1 | 	sub	local03, #24
2dc64     17 2D 12 F2 | 	cmp	local04, local05 wc
2dc68     16 FB 01 C6 |  if_b	mov	result1, local04
2dc6c     94 01 90 CD |  if_b	jmp	#LR__4521
2dc70     14 2D 02 F6 | 	mov	local04, local02
2dc74                 | LR__4511
2dc74     14 2A 06 F1 | 	add	local03, #20
2dc78     15 2F 0A FB | 	rdlong	local05, local03 wz
2dc7c     14 2A 86 F1 | 	sub	local03, #20
2dc80     00 FA 05 A6 |  if_e	mov	result1, #0
2dc84     7C 01 90 AD |  if_e	jmp	#LR__4521
2dc88     00 30 06 F6 | 	mov	local06, #0
2dc8c     14 2D 0A F2 | 	cmp	local04, local02 wz
2dc90     74 00 90 5D |  if_ne	jmp	#LR__4514
2dc94     16 31 02 F6 | 	mov	local06, local04
2dc98     01 30 06 F1 | 	add	local06, #1
2dc9c     18 2A 06 F1 | 	add	local03, #24
2dca0     15 2F 02 FB | 	rdlong	local05, local03
2dca4     18 2A 86 F1 | 	sub	local03, #24
2dca8     17 31 12 F2 | 	cmp	local06, local05 wc
2dcac     02 30 06 36 |  if_ae	mov	local06, #2
2dcb0     18 15 02 F6 | 	mov	arg02, local06
2dcb4     13 13 02 F6 | 	mov	arg01, local01
2dcb8     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2dcbc     FD 2E 02 F6 | 	mov	local05, result1
2dcc0     01 2E 0E F2 | 	cmp	local05, #1 wz
2dcc4     FF FF 7F 5F 
2dcc8     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2dccc     17 FB 01 A6 |  if_e	mov	result1, local05
2dcd0     30 01 90 AD |  if_e	jmp	#LR__4521
2dcd4     00 2E 0E F2 | 	cmp	local05, #0 wz
2dcd8     2C 00 90 AD |  if_e	jmp	#LR__4513
2dcdc     10 2A 06 F1 | 	add	local03, #16
2dce0     15 33 02 FB | 	rdlong	local07, local03
2dce4     10 2A 86 F1 | 	sub	local03, #16
2dce8     02 32 16 F2 | 	cmp	local07, #2 wc
2dcec     14 00 90 CD |  if_b	jmp	#LR__4512
2dcf0     18 2A 06 F1 | 	add	local03, #24
2dcf4     15 2F 02 FB | 	rdlong	local05, local03
2dcf8     18 2A 86 F1 | 	sub	local03, #24
2dcfc     17 33 12 F2 | 	cmp	local07, local05 wc
2dd00     19 2D 02 C6 |  if_b	mov	local04, local07
2dd04                 | LR__4512
2dd04     00 30 06 F6 | 	mov	local06, #0
2dd08                 | LR__4513
2dd08                 | LR__4514
2dd08     00 30 0E F2 | 	cmp	local06, #0 wz
2dd0c     60 00 90 5D |  if_ne	jmp	#LR__4517
2dd10     16 31 02 F6 | 	mov	local06, local04
2dd14                 | ' 			ncl = scl;
2dd14                 | ' 			for (;;) {
2dd14                 | LR__4515
2dd14     01 30 06 F1 | 	add	local06, #1
2dd18     18 2A 06 F1 | 	add	local03, #24
2dd1c     15 2F 02 FB | 	rdlong	local05, local03
2dd20     18 2A 86 F1 | 	sub	local03, #24
2dd24     17 31 12 F2 | 	cmp	local06, local05 wc
2dd28     02 30 06 36 |  if_ae	mov	local06, #2
2dd2c     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2dd30     00 FA 05 16 |  if_a	mov	result1, #0
2dd34     CC 00 90 1D |  if_a	jmp	#LR__4521
2dd38     18 15 02 F6 | 	mov	arg02, local06
2dd3c     13 13 02 F6 | 	mov	arg01, local01
2dd40     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2dd44     FD 32 0A F6 | 	mov	local07, result1 wz
2dd48     24 00 90 AD |  if_e	jmp	#LR__4516
2dd4c     01 32 0E F2 | 	cmp	local07, #1 wz
2dd50     FF FF 7F 5F 
2dd54     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2dd58     19 FB 01 A6 |  if_e	mov	result1, local07
2dd5c     A4 00 90 AD |  if_e	jmp	#LR__4521
2dd60     16 31 0A F2 | 	cmp	local06, local04 wz
2dd64     00 FA 05 A6 |  if_e	mov	result1, #0
2dd68     98 00 90 AD |  if_e	jmp	#LR__4521
2dd6c     A4 FF 9F FD | 	jmp	#LR__4515
2dd70                 | LR__4516
2dd70                 | LR__4517
2dd70     15 13 02 F6 | 	mov	arg01, local03
2dd74     18 15 02 F6 | 	mov	arg02, local06
2dd78     01 16 66 F6 | 	neg	arg03, #1
2dd7c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2dd80     FD 34 0A F6 | 	mov	local08, result1 wz
2dd84     1C 00 90 5D |  if_ne	jmp	#LR__4518
2dd88     00 28 0E F2 | 	cmp	local02, #0 wz
2dd8c     14 00 90 AD |  if_e	jmp	#LR__4518
2dd90     15 13 02 F6 | 	mov	arg01, local03
2dd94     14 15 02 F6 | 	mov	arg02, local02
2dd98     18 17 02 F6 | 	mov	arg03, local06
2dd9c     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2dda0     FD 34 02 F6 | 	mov	local08, result1
2dda4                 | LR__4518
2dda4     00 34 0E F2 | 	cmp	local08, #0 wz
2dda8     4C 00 90 5D |  if_ne	jmp	#LR__4519
2ddac     10 2A 06 F1 | 	add	local03, #16
2ddb0     15 31 62 FC | 	wrlong	local06, local03
2ddb4     08 2A 06 F1 | 	add	local03, #8
2ddb8     15 2F 02 FB | 	rdlong	local05, local03
2ddbc     02 2E 86 F1 | 	sub	local05, #2
2ddc0     04 2A 86 F1 | 	sub	local03, #4
2ddc4     15 37 02 FB | 	rdlong	local09, local03
2ddc8     14 2A 86 F1 | 	sub	local03, #20
2ddcc     17 37 1A F2 | 	cmp	local09, local05 wcz
2ddd0     14 2A 06 E1 |  if_be	add	local03, #20
2ddd4     15 37 02 EB |  if_be	rdlong	local09, local03
2ddd8     01 36 86 E1 |  if_be	sub	local09, #1
2dddc     15 37 62 EC |  if_be	wrlong	local09, local03
2dde0     14 2A 86 E1 |  if_be	sub	local03, #20
2dde4     04 2A 06 F1 | 	add	local03, #4
2dde8     15 2F C2 FA | 	rdbyte	local05, local03
2ddec     01 2E 46 F5 | 	or	local05, #1
2ddf0     15 2F 42 FC | 	wrbyte	local05, local03
2ddf4     08 00 90 FD | 	jmp	#LR__4520
2ddf8                 | LR__4519
2ddf8     01 34 0E F2 | 	cmp	local08, #1 wz
2ddfc     01 30 C6 F6 | 	negz	local06, #1
2de00                 | LR__4520
2de00                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2de00                 | ' 	}
2de00                 | ' 
2de00                 | ' 	return ncl;
2de00     18 FB 01 F6 | 	mov	result1, local06
2de04                 | LR__4521
2de04     A7 F0 03 F6 | 	mov	ptra, fp
2de08     B2 00 A0 FD | 	call	#popregs_
2de0c                 | _fatfs_cc_create_chain_ret
2de0c     2D 00 64 FD | 	ret
2de10                 | 
2de10                 | _fatfs_cc_dir_clear
2de10     06 4A 05 F6 | 	mov	COUNT_, #6
2de14     A8 00 A0 FD | 	call	#pushregs_
2de18     09 27 02 F6 | 	mov	local01, arg01
2de1c     0A 29 02 F6 | 	mov	local02, arg02
2de20     13 13 02 F6 | 	mov	arg01, local01
2de24     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2de28     00 FA 0D F2 | 	cmp	result1, #0 wz
2de2c     01 FA 05 56 |  if_ne	mov	result1, #1
2de30     90 00 90 5D |  if_ne	jmp	#LR__4532
2de34     13 13 02 F6 | 	mov	arg01, local01
2de38     14 15 02 F6 | 	mov	arg02, local02
2de3c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2de40     FD 2A 02 F6 | 	mov	local03, result1
2de44     30 26 06 F1 | 	add	local01, #48
2de48     13 2B 62 FC | 	wrlong	local03, local01
2de4c     04 26 06 F1 | 	add	local01, #4
2de50     13 13 02 F6 | 	mov	arg01, local01
2de54     00 14 06 F6 | 	mov	arg02, #0
2de58     09 16 C6 F9 | 	decod	arg03, #9
2de5c     98 00 A0 FD | 	call	#\builtin_bytefill_
2de60     13 2D 02 F6 | 	mov	local04, local01
2de64                 | ' #line 1667 "ff.c"
2de64                 | ' 	{
2de64                 | ' 		ibuf = fs->win; szb = 1;
2de64                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2de64     00 2E 06 F6 | 	mov	local05, #0
2de68     34 26 86 F1 | 	sub	local01, #52
2de6c                 | LR__4530
2de6c     0A 26 06 F1 | 	add	local01, #10
2de70     13 31 E2 FA | 	rdword	local06, local01
2de74     0A 26 86 F1 | 	sub	local01, #10
2de78     18 2F 12 F2 | 	cmp	local05, local06 wc
2de7c     2C 00 90 3D |  if_ae	jmp	#LR__4531
2de80     01 26 06 F1 | 	add	local01, #1
2de84     13 13 C2 FA | 	rdbyte	arg01, local01
2de88     01 26 86 F1 | 	sub	local01, #1
2de8c     16 15 02 F6 | 	mov	arg02, local04
2de90     15 17 02 F6 | 	mov	arg03, local03
2de94     17 17 02 F1 | 	add	arg03, local05
2de98     01 18 06 F6 | 	mov	arg04, #1
2de9c     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2dea0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dea4     01 2E 06 A1 |  if_e	add	local05, #1
2dea8     C0 FF 9F AD |  if_e	jmp	#LR__4530
2deac                 | LR__4531
2deac                 | ' 	}
2deac                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2deac     0A 26 06 F1 | 	add	local01, #10
2deb0     13 2D E2 FA | 	rdword	local04, local01
2deb4     16 2F 0A F2 | 	cmp	local05, local04 wz
2deb8     00 30 06 A6 |  if_e	mov	local06, #0
2debc     01 30 06 56 |  if_ne	mov	local06, #1
2dec0     18 FB 01 F6 | 	mov	result1, local06
2dec4                 | LR__4532
2dec4     A7 F0 03 F6 | 	mov	ptra, fp
2dec8     B2 00 A0 FD | 	call	#popregs_
2decc                 | _fatfs_cc_dir_clear_ret
2decc     2D 00 64 FD | 	ret
2ded0                 | 
2ded0                 | _fatfs_cc_dir_sdi
2ded0     06 4A 05 F6 | 	mov	COUNT_, #6
2ded4     A8 00 A0 FD | 	call	#pushregs_
2ded8     09 27 02 F6 | 	mov	local01, arg01
2dedc     0A 29 02 F6 | 	mov	local02, arg02
2dee0     13 2B 02 FB | 	rdlong	local03, local01
2dee4     00 10 00 FF 
2dee8     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2deec     1F 28 CE C7 |  if_b	test	local02, #31 wz
2def0                 | ' 		return FR_INT_ERR;
2def0     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2def4     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4546
2def8     10 26 06 F1 | 	add	local01, #16
2defc     13 29 62 FC | 	wrlong	local02, local01
2df00     08 26 86 F1 | 	sub	local01, #8
2df04     13 2D 0A FB | 	rdlong	local04, local01 wz
2df08     08 26 86 F1 | 	sub	local01, #8
2df0c     15 2F C2 AA |  if_e	rdbyte	local05, local03
2df10     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2df14     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2df18     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2df1c     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2df20     00 2C 0E F2 | 	cmp	local04, #0 wz
2df24     3C 00 90 5D |  if_ne	jmp	#LR__4540
2df28     14 2F 02 F6 | 	mov	local05, local02
2df2c     05 2E 46 F0 | 	shr	local05, #5
2df30     08 2A 06 F1 | 	add	local03, #8
2df34     15 15 E2 FA | 	rdword	arg02, local03
2df38     08 2A 86 F1 | 	sub	local03, #8
2df3c     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2df40     02 FA 05 36 |  if_ae	mov	result1, #2
2df44     E4 00 90 3D |  if_ae	jmp	#LR__4546
2df48     28 2A 06 F1 | 	add	local03, #40
2df4c     15 2F 02 FB | 	rdlong	local05, local03
2df50     28 2A 86 F1 | 	sub	local03, #40
2df54     18 26 06 F1 | 	add	local01, #24
2df58     13 2F 62 FC | 	wrlong	local05, local01
2df5c     18 26 86 F1 | 	sub	local01, #24
2df60     7C 00 90 FD | 	jmp	#LR__4545
2df64                 | LR__4540
2df64     0A 2A 06 F1 | 	add	local03, #10
2df68     15 31 E2 FA | 	rdword	local06, local03
2df6c     0A 2A 86 F1 | 	sub	local03, #10
2df70     09 30 66 F0 | 	shl	local06, #9
2df74                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2df74                 | ' 		while (ofs >= csz) {
2df74                 | LR__4541
2df74     18 29 12 F2 | 	cmp	local02, local06 wc
2df78     4C 00 90 CD |  if_b	jmp	#LR__4544
2df7c     13 13 02 F6 | 	mov	arg01, local01
2df80     16 15 02 F6 | 	mov	arg02, local04
2df84     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2df88     FD 2C 02 F6 | 	mov	local04, result1
2df8c     FF FF 7F FF 
2df90     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2df94     01 FA 05 A6 |  if_e	mov	result1, #1
2df98     90 00 90 AD |  if_e	jmp	#LR__4546
2df9c     02 2C 16 F2 | 	cmp	local04, #2 wc
2dfa0     14 00 90 CD |  if_b	jmp	#LR__4542
2dfa4     18 2A 06 F1 | 	add	local03, #24
2dfa8     15 2F 02 FB | 	rdlong	local05, local03
2dfac     18 2A 86 F1 | 	sub	local03, #24
2dfb0     17 2D 12 F2 | 	cmp	local04, local05 wc
2dfb4     08 00 90 CD |  if_b	jmp	#LR__4543
2dfb8                 | LR__4542
2dfb8     02 FA 05 F6 | 	mov	result1, #2
2dfbc     6C 00 90 FD | 	jmp	#LR__4546
2dfc0                 | LR__4543
2dfc0     18 29 82 F1 | 	sub	local02, local06
2dfc4     AC FF 9F FD | 	jmp	#LR__4541
2dfc8                 | LR__4544
2dfc8     15 13 02 F6 | 	mov	arg01, local03
2dfcc     16 15 02 F6 | 	mov	arg02, local04
2dfd0     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2dfd4     18 26 06 F1 | 	add	local01, #24
2dfd8     13 FB 61 FC | 	wrlong	result1, local01
2dfdc     18 26 86 F1 | 	sub	local01, #24
2dfe0                 | LR__4545
2dfe0     14 26 06 F1 | 	add	local01, #20
2dfe4     13 2D 62 FC | 	wrlong	local04, local01
2dfe8     04 26 06 F1 | 	add	local01, #4
2dfec     13 2F 0A FB | 	rdlong	local05, local01 wz
2dff0     18 26 86 F1 | 	sub	local01, #24
2dff4     02 FA 05 A6 |  if_e	mov	result1, #2
2dff8     30 00 90 AD |  if_e	jmp	#LR__4546
2dffc     14 31 02 F6 | 	mov	local06, local02
2e000     09 30 46 F0 | 	shr	local06, #9
2e004     18 26 06 F1 | 	add	local01, #24
2e008     13 2F 02 FB | 	rdlong	local05, local01
2e00c     18 2F 02 F1 | 	add	local05, local06
2e010     13 2F 62 FC | 	wrlong	local05, local01
2e014     34 2A 06 F1 | 	add	local03, #52
2e018     FF 29 06 F5 | 	and	local02, #511
2e01c     14 2B 02 F1 | 	add	local03, local02
2e020     04 26 06 F1 | 	add	local01, #4
2e024     13 2B 62 FC | 	wrlong	local03, local01
2e028                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2e028                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2e028                 | ' 
2e028                 | ' 	return FR_OK;
2e028     00 FA 05 F6 | 	mov	result1, #0
2e02c                 | LR__4546
2e02c     A7 F0 03 F6 | 	mov	ptra, fp
2e030     B2 00 A0 FD | 	call	#popregs_
2e034                 | _fatfs_cc_dir_sdi_ret
2e034     2D 00 64 FD | 	ret
2e038                 | 
2e038                 | _fatfs_cc_dir_next
2e038     05 4A 05 F6 | 	mov	COUNT_, #5
2e03c     A8 00 A0 FD | 	call	#pushregs_
2e040     09 27 02 F6 | 	mov	local01, arg01
2e044     0A 29 02 F6 | 	mov	local02, arg02
2e048     13 2B 02 FB | 	rdlong	local03, local01
2e04c     10 26 06 F1 | 	add	local01, #16
2e050     13 2D 02 FB | 	rdlong	local04, local01
2e054     10 26 86 F1 | 	sub	local01, #16
2e058     20 2C 06 F1 | 	add	local04, #32
2e05c     00 10 00 FF 
2e060     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2e064     18 26 06 31 |  if_ae	add	local01, #24
2e068     13 01 68 3C |  if_ae	wrlong	#0, local01
2e06c     18 26 86 31 |  if_ae	sub	local01, #24
2e070     18 26 06 F1 | 	add	local01, #24
2e074     13 15 0A FB | 	rdlong	arg02, local01 wz
2e078     18 26 86 F1 | 	sub	local01, #24
2e07c     04 FA 05 A6 |  if_e	mov	result1, #4
2e080     64 01 90 AD |  if_e	jmp	#LR__4555
2e084     FF 2D CE F7 | 	test	local04, #511 wz
2e088     3C 01 90 5D |  if_ne	jmp	#LR__4554
2e08c     18 26 06 F1 | 	add	local01, #24
2e090     13 15 02 FB | 	rdlong	arg02, local01
2e094     01 14 06 F1 | 	add	arg02, #1
2e098     13 15 62 FC | 	wrlong	arg02, local01
2e09c     04 26 86 F1 | 	sub	local01, #4
2e0a0     13 15 0A FB | 	rdlong	arg02, local01 wz
2e0a4     14 26 86 F1 | 	sub	local01, #20
2e0a8     2C 00 90 5D |  if_ne	jmp	#LR__4550
2e0ac     16 15 02 F6 | 	mov	arg02, local04
2e0b0     05 14 46 F0 | 	shr	arg02, #5
2e0b4     08 2A 06 F1 | 	add	local03, #8
2e0b8     15 29 E2 FA | 	rdword	local02, local03
2e0bc     08 2A 86 F1 | 	sub	local03, #8
2e0c0     14 15 12 F2 | 	cmp	arg02, local02 wc
2e0c4     18 26 06 31 |  if_ae	add	local01, #24
2e0c8     13 01 68 3C |  if_ae	wrlong	#0, local01
2e0cc                 | ' 				dp->sect = 0; return FR_NO_FILE;
2e0cc     04 FA 05 36 |  if_ae	mov	result1, #4
2e0d0     14 01 90 3D |  if_ae	jmp	#LR__4555
2e0d4     F0 00 90 FD | 	jmp	#LR__4553
2e0d8                 | LR__4550
2e0d8     16 13 02 F6 | 	mov	arg01, local04
2e0dc     09 12 46 F0 | 	shr	arg01, #9
2e0e0     0A 2A 06 F1 | 	add	local03, #10
2e0e4     15 15 E2 FA | 	rdword	arg02, local03
2e0e8     0A 2A 86 F1 | 	sub	local03, #10
2e0ec     01 14 86 F1 | 	sub	arg02, #1
2e0f0     0A 13 CA F7 | 	test	arg01, arg02 wz
2e0f4     D0 00 90 5D |  if_ne	jmp	#LR__4552
2e0f8     13 13 02 F6 | 	mov	arg01, local01
2e0fc     14 26 06 F1 | 	add	local01, #20
2e100     13 15 02 FB | 	rdlong	arg02, local01
2e104     14 26 86 F1 | 	sub	local01, #20
2e108     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2e10c     FD 2E 02 F6 | 	mov	local05, result1
2e110     02 2E 16 F2 | 	cmp	local05, #2 wc
2e114     02 FA 05 C6 |  if_b	mov	result1, #2
2e118     CC 00 90 CD |  if_b	jmp	#LR__4555
2e11c     FF FF 7F FF 
2e120     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e124     01 FA 05 A6 |  if_e	mov	result1, #1
2e128     BC 00 90 AD |  if_e	jmp	#LR__4555
2e12c     18 2A 06 F1 | 	add	local03, #24
2e130     15 15 02 FB | 	rdlong	arg02, local03
2e134     18 2A 86 F1 | 	sub	local03, #24
2e138     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2e13c     68 00 90 CD |  if_b	jmp	#LR__4551
2e140     00 28 0E F2 | 	cmp	local02, #0 wz
2e144     18 26 06 A1 |  if_e	add	local01, #24
2e148     13 01 68 AC |  if_e	wrlong	#0, local01
2e14c                 | ' 						dp->sect = 0; return FR_NO_FILE;
2e14c     04 FA 05 A6 |  if_e	mov	result1, #4
2e150     94 00 90 AD |  if_e	jmp	#LR__4555
2e154     13 13 02 F6 | 	mov	arg01, local01
2e158     14 26 06 F1 | 	add	local01, #20
2e15c     13 15 02 FB | 	rdlong	arg02, local01
2e160     14 26 86 F1 | 	sub	local01, #20
2e164     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2e168     FD 2E 0A F6 | 	mov	local05, result1 wz
2e16c     07 FA 05 A6 |  if_e	mov	result1, #7
2e170     74 00 90 AD |  if_e	jmp	#LR__4555
2e174     01 2E 0E F2 | 	cmp	local05, #1 wz
2e178     02 FA 05 A6 |  if_e	mov	result1, #2
2e17c     68 00 90 AD |  if_e	jmp	#LR__4555
2e180     FF FF 7F FF 
2e184     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e188     01 FA 05 A6 |  if_e	mov	result1, #1
2e18c     58 00 90 AD |  if_e	jmp	#LR__4555
2e190     17 15 02 F6 | 	mov	arg02, local05
2e194     15 13 02 F6 | 	mov	arg01, local03
2e198     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2e19c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1a0     01 FA 05 56 |  if_ne	mov	result1, #1
2e1a4     40 00 90 5D |  if_ne	jmp	#LR__4555
2e1a8                 | LR__4551
2e1a8     14 26 06 F1 | 	add	local01, #20
2e1ac     13 2F 62 FC | 	wrlong	local05, local01
2e1b0     15 13 02 F6 | 	mov	arg01, local03
2e1b4     17 15 02 F6 | 	mov	arg02, local05
2e1b8     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2e1bc     04 26 06 F1 | 	add	local01, #4
2e1c0     13 FB 61 FC | 	wrlong	result1, local01
2e1c4     18 26 86 F1 | 	sub	local01, #24
2e1c8                 | LR__4552
2e1c8                 | LR__4553
2e1c8                 | LR__4554
2e1c8     10 26 06 F1 | 	add	local01, #16
2e1cc     13 2D 62 FC | 	wrlong	local04, local01
2e1d0     34 2A 06 F1 | 	add	local03, #52
2e1d4     FF 2D 06 F5 | 	and	local04, #511
2e1d8     16 2B 02 F1 | 	add	local03, local04
2e1dc     0C 26 06 F1 | 	add	local01, #12
2e1e0     13 2B 62 FC | 	wrlong	local03, local01
2e1e4                 | ' #line 1771 "ff.c"
2e1e4                 | ' 				}
2e1e4                 | ' 				dp->clust = clst;
2e1e4                 | ' 				dp->sect = clst2sect(fs, clst);
2e1e4                 | ' 			}
2e1e4                 | ' 		}
2e1e4                 | ' 	}
2e1e4                 | ' 	dp->dptr = ofs;
2e1e4                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2e1e4                 | ' 
2e1e4                 | ' 	return FR_OK;
2e1e4     00 FA 05 F6 | 	mov	result1, #0
2e1e8                 | LR__4555
2e1e8     A7 F0 03 F6 | 	mov	ptra, fp
2e1ec     B2 00 A0 FD | 	call	#popregs_
2e1f0                 | _fatfs_cc_dir_next_ret
2e1f0     2D 00 64 FD | 	ret
2e1f4                 | 
2e1f4                 | _fatfs_cc_dir_alloc
2e1f4     08 4A 05 F6 | 	mov	COUNT_, #8
2e1f8     A8 00 A0 FD | 	call	#pushregs_
2e1fc     09 27 02 F6 | 	mov	local01, arg01
2e200     0A 29 02 F6 | 	mov	local02, arg02
2e204     13 2B 02 FB | 	rdlong	local03, local01
2e208     13 13 02 F6 | 	mov	arg01, local01
2e20c     00 14 06 F6 | 	mov	arg02, #0
2e210     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2e214     FD 2C 0A F6 | 	mov	local04, result1 wz
2e218     70 00 90 5D |  if_ne	jmp	#LR__4564
2e21c     00 2E 06 F6 | 	mov	local05, #0
2e220                 | ' 		n = 0;
2e220                 | ' 		do {
2e220                 | LR__4560
2e220     18 26 06 F1 | 	add	local01, #24
2e224     13 15 02 FB | 	rdlong	arg02, local01
2e228     18 26 86 F1 | 	sub	local01, #24
2e22c     15 13 02 F6 | 	mov	arg01, local03
2e230     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2e234     FD 2C 0A F6 | 	mov	local04, result1 wz
2e238     50 00 90 5D |  if_ne	jmp	#LR__4563
2e23c     1C 26 06 F1 | 	add	local01, #28
2e240     13 31 02 FB | 	rdlong	local06, local01
2e244     1C 26 86 F1 | 	sub	local01, #28
2e248     18 31 C2 FA | 	rdbyte	local06, local06
2e24c     E5 30 0E F2 | 	cmp	local06, #229 wz
2e250     1C 26 06 51 |  if_ne	add	local01, #28
2e254     13 33 02 5B |  if_ne	rdlong	local07, local01
2e258     1C 26 86 51 |  if_ne	sub	local01, #28
2e25c     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2e260     10 00 90 5D |  if_ne	jmp	#LR__4561
2e264     01 2E 06 F1 | 	add	local05, #1
2e268     14 2F 0A F2 | 	cmp	local05, local02 wz
2e26c     1C 00 90 AD |  if_e	jmp	#LR__4563
2e270     04 00 90 FD | 	jmp	#LR__4562
2e274                 | LR__4561
2e274     00 2E 06 F6 | 	mov	local05, #0
2e278                 | LR__4562
2e278     13 13 02 F6 | 	mov	arg01, local01
2e27c     01 14 06 F6 | 	mov	arg02, #1
2e280     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2e284     FD 2C 0A F6 | 	mov	local04, result1 wz
2e288     94 FF 9F AD |  if_e	jmp	#LR__4560
2e28c                 | LR__4563
2e28c                 | LR__4564
2e28c     04 2C 0E F2 | 	cmp	local04, #4 wz
2e290     07 2C 06 A6 |  if_e	mov	local04, #7
2e294                 | ' 	return res;
2e294     16 FB 01 F6 | 	mov	result1, local04
2e298     A7 F0 03 F6 | 	mov	ptra, fp
2e29c     B2 00 A0 FD | 	call	#popregs_
2e2a0                 | _fatfs_cc_dir_alloc_ret
2e2a0     2D 00 64 FD | 	ret
2e2a4                 | 
2e2a4                 | _fatfs_cc_ld_clust
2e2a4     09 01 02 F6 | 	mov	_var01, arg01
2e2a8     0A 13 02 F6 | 	mov	arg01, arg02
2e2ac     1A 12 06 F1 | 	add	arg01, #26
2e2b0                 | ' {
2e2b0                 | ' 
2e2b0                 | ' 	return *((WORD*)ptr);
2e2b0     09 FB E1 FA | 	rdword	result1, arg01
2e2b4     FD 12 32 F9 | 	getword	arg01, result1, #0
2e2b8     00 01 C2 FA | 	rdbyte	_var01, _var01
2e2bc     03 00 0E F2 | 	cmp	_var01, #3 wz
2e2c0     14 14 06 A1 |  if_e	add	arg02, #20
2e2c4                 | ' {
2e2c4                 | ' 
2e2c4                 | ' 	return *((WORD*)ptr);
2e2c4     0A FB E1 AA |  if_e	rdword	result1, arg02
2e2c8     10 FA 65 A0 |  if_e	shl	result1, #16
2e2cc     FD 12 42 A5 |  if_e	or	arg01, result1
2e2d0                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2e2d0                 | ' 	}
2e2d0                 | ' 
2e2d0                 | ' 	return cl;
2e2d0     09 FB 01 F6 | 	mov	result1, arg01
2e2d4                 | _fatfs_cc_ld_clust_ret
2e2d4     2D 00 64 FD | 	ret
2e2d8                 | 
2e2d8                 | _fatfs_cc_st_clust
2e2d8     09 01 02 F6 | 	mov	_var01, arg01
2e2dc     0A 13 02 F6 | 	mov	arg01, arg02
2e2e0     1A 12 06 F1 | 	add	arg01, #26
2e2e4     09 17 52 FC | 	wrword	arg03, arg01
2e2e8     00 01 C2 FA | 	rdbyte	_var01, _var01
2e2ec     03 00 0E F2 | 	cmp	_var01, #3 wz
2e2f0     14 14 06 A1 |  if_e	add	arg02, #20
2e2f4     10 16 46 A0 |  if_e	shr	arg03, #16
2e2f8     0A 17 52 AC |  if_e	wrword	arg03, arg02
2e2fc                 | _fatfs_cc_st_clust_ret
2e2fc     2D 00 64 FD | 	ret
2e300                 | 
2e300                 | _fatfs_cc_cmp_lfn
2e300     07 4A 05 F6 | 	mov	COUNT_, #7
2e304     A8 00 A0 FD | 	call	#pushregs_
2e308     09 27 02 F6 | 	mov	local01, arg01
2e30c     0A 13 02 F6 | 	mov	arg01, arg02
2e310     1A 12 06 F1 | 	add	arg01, #26
2e314                 | ' {
2e314                 | ' 
2e314                 | ' 	return *((WORD*)ptr);
2e314     09 FB E9 FA | 	rdword	result1, arg01 wz
2e318     00 FA 05 56 |  if_ne	mov	result1, #0
2e31c     E0 00 90 5D |  if_ne	jmp	#LR__4576
2e320     0A 29 C2 FA | 	rdbyte	local02, arg02
2e324     3F 28 06 F5 | 	and	local02, #63
2e328     01 28 86 F1 | 	sub	local02, #1
2e32c     0D 28 06 FD | 	qmul	local02, #13
2e330                 | ' 
2e330                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2e330                 | ' 
2e330                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2e330     01 2A 06 F6 | 	mov	local03, #1
2e334     00 2C 06 F6 | 	mov	local04, #0
2e338     18 2E 62 FD | 	getqx	local05
2e33c                 | LR__4570
2e33c     0D 2C 16 F2 | 	cmp	local04, #13 wc
2e340     9C 00 90 3D |  if_ae	jmp	#LR__4575
2e344     0A 13 02 F6 | 	mov	arg01, arg02
2e348     16 29 02 F6 | 	mov	local02, local04
2e34c     01 00 00 FF 
2e350     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2e354     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2e358     14 29 C2 FA | 	rdbyte	local02, local02
2e35c     01 28 06 FA | 	mul	local02, #1
2e360     14 13 02 F1 | 	add	arg01, local02
2e364     01 00 00 FF 
2e368     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2e36c                 | ' {
2e36c                 | ' 
2e36c                 | ' 	return *((WORD*)ptr);
2e36c     09 FB E1 FA | 	rdword	result1, arg01
2e370     FD 30 02 F6 | 	mov	local06, result1
2e374     15 29 02 F6 | 	mov	local02, local03
2e378     0F 28 4E F7 | 	zerox	local02, #15 wz
2e37c     44 00 90 AD |  if_e	jmp	#LR__4573
2e380     00 2F 16 F2 | 	cmp	local05, #256 wc
2e384     2C 00 90 3D |  if_ae	jmp	#LR__4571
2e388     18 13 32 F9 | 	getword	arg01, local06, #0
2e38c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2e390     FD 28 02 F6 | 	mov	local02, result1
2e394     17 2B 02 F6 | 	mov	local03, local05
2e398     01 2A 66 F0 | 	shl	local03, #1
2e39c     13 2B 02 F1 | 	add	local03, local01
2e3a0     15 13 E2 FA | 	rdword	arg01, local03
2e3a4     01 2E 06 F1 | 	add	local05, #1
2e3a8     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2e3ac     FD 28 0A F2 | 	cmp	local02, result1 wz
2e3b0     08 00 90 AD |  if_e	jmp	#LR__4572
2e3b4                 | LR__4571
2e3b4                 | ' 				return 0;
2e3b4     00 FA 05 F6 | 	mov	result1, #0
2e3b8     44 00 90 FD | 	jmp	#LR__4576
2e3bc                 | LR__4572
2e3bc     18 2B 02 F6 | 	mov	local03, local06
2e3c0     14 00 90 FD | 	jmp	#LR__4574
2e3c4                 | LR__4573
2e3c4     18 31 32 F9 | 	getword	local06, local06, #0
2e3c8     7F 00 00 FF 
2e3cc     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2e3d0     00 FA 05 56 |  if_ne	mov	result1, #0
2e3d4     28 00 90 5D |  if_ne	jmp	#LR__4576
2e3d8                 | LR__4574
2e3d8     01 2C 06 F1 | 	add	local04, #1
2e3dc     5C FF 9F FD | 	jmp	#LR__4570
2e3e0                 | LR__4575
2e3e0     0A 29 C2 FA | 	rdbyte	local02, arg02
2e3e4     40 28 CE F7 | 	test	local02, #64 wz
2e3e8     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2e3ec     01 2E 66 50 |  if_ne	shl	local05, #1
2e3f0     13 2F 02 51 |  if_ne	add	local05, local01
2e3f4     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2e3f8     00 FA 05 56 |  if_ne	mov	result1, #0
2e3fc                 | ' 
2e3fc                 | ' 	return 1;
2e3fc     01 FA 05 A6 |  if_e	mov	result1, #1
2e400                 | LR__4576
2e400     A7 F0 03 F6 | 	mov	ptra, fp
2e404     B2 00 A0 FD | 	call	#popregs_
2e408                 | _fatfs_cc_cmp_lfn_ret
2e408     2D 00 64 FD | 	ret
2e40c                 | 
2e40c                 | _fatfs_cc_pick_lfn
2e40c     09 01 02 F6 | 	mov	_var01, arg01
2e410     0A 13 02 F6 | 	mov	arg01, arg02
2e414     1A 12 06 F1 | 	add	arg01, #26
2e418                 | ' {
2e418                 | ' 
2e418                 | ' 	return *((WORD*)ptr);
2e418     09 FB E9 FA | 	rdword	result1, arg01 wz
2e41c     00 FA 05 56 |  if_ne	mov	result1, #0
2e420     D4 00 90 5D |  if_ne	jmp	#LR__4585
2e424     0A 03 C2 FA | 	rdbyte	_var02, arg02
2e428     40 02 26 F5 | 	andn	_var02, #64
2e42c     01 02 86 F1 | 	sub	_var02, #1
2e430     0D 02 06 FD | 	qmul	_var02, #13
2e434                 | ' 
2e434                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2e434                 | ' 
2e434                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2e434     01 04 06 F6 | 	mov	_var03, #1
2e438     00 06 06 F6 | 	mov	_var04, #0
2e43c     18 08 62 FD | 	getqx	_var05
2e440                 | LR__4580
2e440     0D 06 16 F2 | 	cmp	_var04, #13 wc
2e444     80 00 90 3D |  if_ae	jmp	#LR__4583
2e448     0A 13 02 F6 | 	mov	arg01, arg02
2e44c     03 03 02 F6 | 	mov	_var02, _var04
2e450     01 00 00 FF 
2e454     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2e458     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2e45c     01 03 C2 FA | 	rdbyte	_var02, _var02
2e460     01 02 06 FA | 	mul	_var02, #1
2e464     01 13 02 F1 | 	add	arg01, _var02
2e468     01 00 00 FF 
2e46c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2e470                 | ' {
2e470                 | ' 
2e470                 | ' 	return *((WORD*)ptr);
2e470     09 FB E1 FA | 	rdword	result1, arg01
2e474     FD 0A 02 F6 | 	mov	_var06, result1
2e478     02 03 02 F6 | 	mov	_var02, _var03
2e47c     0F 02 4E F7 | 	zerox	_var02, #15 wz
2e480     28 00 90 AD |  if_e	jmp	#LR__4581
2e484     00 09 16 F2 | 	cmp	_var05, #256 wc
2e488     00 FA 05 36 |  if_ae	mov	result1, #0
2e48c     68 00 90 3D |  if_ae	jmp	#LR__4585
2e490     04 03 02 F6 | 	mov	_var02, _var05
2e494     01 02 66 F0 | 	shl	_var02, #1
2e498     00 03 02 F1 | 	add	_var02, _var01
2e49c     05 05 02 F6 | 	mov	_var03, _var06
2e4a0     01 05 52 FC | 	wrword	_var03, _var02
2e4a4     01 08 06 F1 | 	add	_var05, #1
2e4a8     14 00 90 FD | 	jmp	#LR__4582
2e4ac                 | LR__4581
2e4ac     05 0B 32 F9 | 	getword	_var06, _var06, #0
2e4b0     7F 00 00 FF 
2e4b4     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2e4b8     00 FA 05 56 |  if_ne	mov	result1, #0
2e4bc     38 00 90 5D |  if_ne	jmp	#LR__4585
2e4c0                 | LR__4582
2e4c0     01 06 06 F1 | 	add	_var04, #1
2e4c4     78 FF 9F FD | 	jmp	#LR__4580
2e4c8                 | LR__4583
2e4c8     0A 03 C2 FA | 	rdbyte	_var02, arg02
2e4cc     40 02 CE F7 | 	test	_var02, #64 wz
2e4d0     02 0D 02 56 |  if_ne	mov	_var07, _var03
2e4d4     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2e4d8     18 00 90 AD |  if_e	jmp	#LR__4584
2e4dc     00 09 16 F2 | 	cmp	_var05, #256 wc
2e4e0     00 FA 05 36 |  if_ae	mov	result1, #0
2e4e4     10 00 90 3D |  if_ae	jmp	#LR__4585
2e4e8     01 08 66 F0 | 	shl	_var05, #1
2e4ec     00 09 02 F1 | 	add	_var05, _var01
2e4f0     04 01 58 FC | 	wrword	#0, _var05
2e4f4                 | LR__4584
2e4f4                 | ' 		lfnbuf[i] = 0;
2e4f4                 | ' 	}
2e4f4                 | ' 
2e4f4                 | ' 	return 1;
2e4f4     01 FA 05 F6 | 	mov	result1, #1
2e4f8                 | LR__4585
2e4f8                 | _fatfs_cc_pick_lfn_ret
2e4f8     2D 00 64 FD | 	ret
2e4fc                 | 
2e4fc                 | _fatfs_cc_put_lfn
2e4fc     0D 14 06 F1 | 	add	arg02, #13
2e500     0A 19 42 FC | 	wrbyte	arg04, arg02
2e504     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2e508     01 18 86 F1 | 	sub	arg04, #1
2e50c     0D 18 06 FD | 	qmul	arg04, #13
2e510     09 01 02 F6 | 	mov	_var01, arg01
2e514     02 14 86 F1 | 	sub	arg02, #2
2e518     0A 1F 48 FC | 	wrbyte	#15, arg02
2e51c     01 14 06 F1 | 	add	arg02, #1
2e520     0A 01 48 FC | 	wrbyte	#0, arg02
2e524     0C 14 86 F1 | 	sub	arg02, #12
2e528     0A 13 02 F6 | 	mov	arg01, arg02
2e52c     1A 12 06 F1 | 	add	arg01, #26
2e530     09 01 58 FC | 	wrword	#0, arg01
2e534     00 02 06 F6 | 	mov	_var02, #0
2e538     00 04 06 F6 | 	mov	_var03, #0
2e53c                 | ' 	BYTE* dir,
2e53c                 | ' 	BYTE ord,
2e53c                 | ' 	BYTE sum
2e53c                 | ' )
2e53c                 | ' {
2e53c                 | ' 	UINT i, s;
2e53c                 | ' 	WCHAR wc;
2e53c                 | ' 
2e53c                 | ' 
2e53c                 | ' 	dir[ 13 ] = sum;
2e53c                 | ' 	dir[ 11 ] =  0x0F ;
2e53c                 | ' 	dir[ 12 ] = 0;
2e53c                 | ' 	st_word(dir +  26 , 0);
2e53c                 | ' 
2e53c                 | ' 	i = (ord - 1) * 13;
2e53c                 | ' 	s = wc = 0;
2e53c                 | ' 	do {
2e53c     01 00 00 FF 
2e540     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2e544     18 06 62 FD | 	getqx	_var04
2e548     97 2A 48 FB | 	callpa	#(@LR__4591-@LR__4590)>>2,fcache_load_ptr_
2e54c                 | LR__4590
2e54c     01 19 32 F9 | 	getword	arg04, _var02, #0
2e550     7F 00 00 FF 
2e554     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2e558     03 13 02 56 |  if_ne	mov	arg01, _var04
2e55c     01 06 06 51 |  if_ne	add	_var04, #1
2e560     01 12 66 50 |  if_ne	shl	arg01, #1
2e564     00 13 02 51 |  if_ne	add	arg01, _var01
2e568     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2e56c     0A 13 02 F6 | 	mov	arg01, arg02
2e570     02 19 02 F6 | 	mov	arg04, _var03
2e574     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2e578     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e57c     01 18 06 FA | 	mul	arg04, #1
2e580     0C 13 02 F1 | 	add	arg01, arg04
2e584     09 03 52 FC | 	wrword	_var02, arg01
2e588     01 19 02 F6 | 	mov	arg04, _var02
2e58c     0F 18 4E F7 | 	zerox	arg04, #15 wz
2e590     0F 02 CE A9 |  if_e	bmask	_var02, #15
2e594     01 04 06 F1 | 	add	_var03, #1
2e598     0D 04 16 F2 | 	cmp	_var03, #13 wc
2e59c     AC FF 9F CD |  if_b	jmp	#LR__4590
2e5a0                 | LR__4591
2e5a0     01 00 00 FF 
2e5a4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2e5a8     01 03 32 F9 | 	getword	_var02, _var02, #0
2e5ac     7F 00 00 FF 
2e5b0     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2e5b4     01 06 66 50 |  if_ne	shl	_var04, #1
2e5b8     00 07 02 51 |  if_ne	add	_var04, _var01
2e5bc     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2e5c0     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2e5c4     40 16 46 A5 |  if_e	or	arg03, #64
2e5c8     0A 17 42 FC | 	wrbyte	arg03, arg02
2e5cc                 | _fatfs_cc_put_lfn_ret
2e5cc     2D 00 64 FD | 	ret
2e5d0                 | 
2e5d0                 | _fatfs_cc_gen_numname
2e5d0     08 4A 05 F6 | 	mov	COUNT_, #8
2e5d4     A8 00 A0 FD | 	call	#pushregs_
2e5d8     2C F0 07 F1 | 	add	ptra, #44
2e5dc     09 27 02 F6 | 	mov	local01, arg01
2e5e0     0A 29 02 F6 | 	mov	local02, arg02
2e5e4     0B 2B 02 F6 | 	mov	local03, arg03
2e5e8     0C 2D 02 F6 | 	mov	local04, arg04
2e5ec     13 13 02 F6 | 	mov	arg01, local01
2e5f0     14 15 02 F6 | 	mov	arg02, local02
2e5f4     0B 16 06 F6 | 	mov	arg03, #11
2e5f8     9C 72 BF FD | 	call	#__system____builtin_memmove
2e5fc     06 2C 16 F2 | 	cmp	local04, #6 wc
2e600     48 00 90 CD |  if_b	jmp	#LR__4605
2e604     16 2F 02 F6 | 	mov	local05, local04
2e608     97 1E 48 FB | 	callpa	#(@LR__4603-@LR__4600)>>2,fcache_load_ptr_
2e60c                 | ' 		sreg = seq;
2e60c                 | ' 		while (*lfn) {
2e60c                 | LR__4600
2e60c     15 31 EA FA | 	rdword	local06, local03 wz
2e610     34 00 90 AD |  if_e	jmp	#LR__4604
2e614     15 33 E2 FA | 	rdword	local07, local03
2e618                 | ' 			wc = *lfn++;
2e618                 | ' 			for (i = 0; i < 16; i++) {
2e618     02 2A 06 F1 | 	add	local03, #2
2e61c     10 12 DC FC | 	rep	@LR__4602, #16
2e620                 | LR__4601
2e620     01 2E 66 F0 | 	shl	local05, #1
2e624     19 31 32 F9 | 	getword	local06, local07, #0
2e628     01 30 06 F5 | 	and	local06, #1
2e62c     18 2F 02 F1 | 	add	local05, local06
2e630     19 33 32 F9 | 	getword	local07, local07, #0
2e634     01 32 46 F0 | 	shr	local07, #1
2e638     10 2E 2E F4 | 	testbn	local05, #16 wz
2e63c     88 00 00 5F 
2e640     21 2E 66 55 |  if_ne	xor	local05, ##69665
2e644                 | LR__4602
2e644     C4 FF 9F FD | 	jmp	#LR__4600
2e648                 | LR__4603
2e648                 | LR__4604
2e648     17 2D 02 F6 | 	mov	local04, local05
2e64c                 | LR__4605
2e64c     07 32 06 F6 | 	mov	local07, #7
2e650                 | ' 			}
2e650                 | ' 		}
2e650                 | ' 		seq = (UINT)sreg;
2e650                 | ' 	}
2e650                 | ' 
2e650                 | ' 
2e650                 | ' 	i = 7;
2e650                 | ' 	do {
2e650     10 4E 05 F1 | 	add	fp, #16
2e654     97 1A 48 FB | 	callpa	#(@LR__4607-@LR__4606)>>2,fcache_load_ptr_
2e658                 | LR__4606
2e658     16 2F 42 F8 | 	getnib	local05, local04, #0
2e65c     30 2E 06 F1 | 	add	local05, #48
2e660     04 2C 46 F0 | 	shr	local04, #4
2e664     17 31 E2 F8 | 	getbyte	local06, local05, #0
2e668     3A 30 16 F2 | 	cmp	local06, #58 wc
2e66c     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2e670     07 2E 06 31 |  if_ae	add	local05, #7
2e674     19 31 02 F6 | 	mov	local06, local07
2e678     01 32 8E F1 | 	sub	local07, #1 wz
2e67c     A7 30 02 F1 | 	add	local06, fp
2e680     18 2F 42 FC | 	wrbyte	local05, local06
2e684     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2e688     CC FF 9F 5D |  if_ne	jmp	#LR__4606
2e68c                 | LR__4607
2e68c     19 31 02 F6 | 	mov	local06, local07
2e690     A7 30 02 F1 | 	add	local06, fp
2e694     18 FD 48 FC | 	wrbyte	#126, local06
2e698                 | ' 	ns[i] = '~';
2e698                 | ' 
2e698                 | ' 
2e698                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2e698     00 2E 06 F6 | 	mov	local05, #0
2e69c     10 4E 85 F1 | 	sub	fp, #16
2e6a0     97 2A 48 FB | 	callpa	#(@LR__4610-@LR__4608)>>2,fcache_load_ptr_
2e6a4                 | LR__4608
2e6a4     19 2F 12 F2 | 	cmp	local05, local07 wc
2e6a8     4C 00 90 3D |  if_ae	jmp	#LR__4611
2e6ac     17 31 02 F6 | 	mov	local06, local05
2e6b0     13 31 02 F1 | 	add	local06, local01
2e6b4     18 31 C2 FA | 	rdbyte	local06, local06
2e6b8     20 30 0E F2 | 	cmp	local06, #32 wz
2e6bc     38 00 90 AD |  if_e	jmp	#LR__4611
2e6c0     17 13 02 F6 | 	mov	arg01, local05
2e6c4     13 13 02 F1 | 	add	arg01, local01
2e6c8     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2e6cc     00 FA 05 56 |  if_ne	mov	result1, #0
2e6d0                 | ' 
2e6d0                 | ' 	return 0;
2e6d0     00 FA 05 A6 |  if_e	mov	result1, #0
2e6d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e6d8     14 00 90 AD |  if_e	jmp	#LR__4609
2e6dc     19 31 02 F6 | 	mov	local06, local07
2e6e0     01 30 86 F1 | 	sub	local06, #1
2e6e4     18 2F 0A F2 | 	cmp	local05, local06 wz
2e6e8     0C 00 90 AD |  if_e	jmp	#LR__4611
2e6ec     01 2E 06 F1 | 	add	local05, #1
2e6f0                 | LR__4609
2e6f0     01 2E 06 F1 | 	add	local05, #1
2e6f4     AC FF 9F FD | 	jmp	#LR__4608
2e6f8                 | LR__4610
2e6f8                 | LR__4611
2e6f8     97 20 48 FB | 	callpa	#(@LR__4615-@LR__4612)>>2,fcache_load_ptr_
2e6fc                 | ' 			j++;
2e6fc                 | ' 		}
2e6fc                 | ' 	}
2e6fc                 | ' 	do {
2e6fc                 | LR__4612
2e6fc     17 31 02 F6 | 	mov	local06, local05
2e700     13 31 02 F1 | 	add	local06, local01
2e704     08 32 16 F2 | 	cmp	local07, #8 wc
2e708     01 2E 06 F1 | 	add	local05, #1
2e70c     1C 00 90 3D |  if_ae	jmp	#LR__4613
2e710     19 2D 02 F6 | 	mov	local04, local07
2e714     10 4E 05 F1 | 	add	fp, #16
2e718     A7 2C 02 F1 | 	add	local04, fp
2e71c     16 35 C2 FA | 	rdbyte	local08, local04
2e720     01 32 06 F1 | 	add	local07, #1
2e724     10 4E 85 F1 | 	sub	fp, #16
2e728     04 00 90 FD | 	jmp	#LR__4614
2e72c                 | LR__4613
2e72c     20 34 06 F6 | 	mov	local08, #32
2e730                 | LR__4614
2e730     18 35 42 FC | 	wrbyte	local08, local06
2e734     08 2E 16 F2 | 	cmp	local05, #8 wc
2e738     C0 FF 9F CD |  if_b	jmp	#LR__4612
2e73c                 | LR__4615
2e73c     A7 F0 03 F6 | 	mov	ptra, fp
2e740     B2 00 A0 FD | 	call	#popregs_
2e744                 | _fatfs_cc_gen_numname_ret
2e744     2D 00 64 FD | 	ret
2e748                 | 
2e748                 | _fatfs_cc_sum_sfn
2e748     00 00 06 F6 | 	mov	_var01, #0
2e74c                 | ' )
2e74c                 | ' {
2e74c                 | ' 	BYTE sum = 0;
2e74c                 | ' 	UINT n = 11;
2e74c                 | ' 
2e74c                 | ' 	do {
2e74c     97 12 48 FB | 	callpa	#(@LR__4622-@LR__4620)>>2,fcache_load_ptr_
2e750                 | LR__4620
2e750     0B 10 DC FC | 	rep	@LR__4623, #11
2e754                 | LR__4621
2e754     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2e758     01 FA 45 F0 | 	shr	result1, #1
2e75c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2e760     07 00 66 F0 | 	shl	_var01, #7
2e764     00 FB 01 F1 | 	add	result1, _var01
2e768     09 01 C2 FA | 	rdbyte	_var01, arg01
2e76c     FD 00 02 F1 | 	add	_var01, result1
2e770     01 12 06 F1 | 	add	arg01, #1
2e774                 | LR__4622
2e774                 | LR__4623
2e774                 | ' 	return sum;
2e774     00 FB 01 F6 | 	mov	result1, _var01
2e778                 | _fatfs_cc_sum_sfn_ret
2e778     2D 00 64 FD | 	ret
2e77c                 | 
2e77c                 | _fatfs_cc_dir_read
2e77c     0C 4A 05 F6 | 	mov	COUNT_, #12
2e780     A8 00 A0 FD | 	call	#pushregs_
2e784     09 27 02 F6 | 	mov	local01, arg01
2e788     0A 29 02 F6 | 	mov	local02, arg02
2e78c     04 2A 06 F6 | 	mov	local03, #4
2e790     13 2D 02 FB | 	rdlong	local04, local01
2e794     FF 2E 06 F6 | 	mov	local05, #255
2e798     FF 30 06 F6 | 	mov	local06, #255
2e79c                 | ' )
2e79c                 | ' {
2e79c                 | ' 	FRESULT res = FR_NO_FILE;
2e79c                 | ' 	FATFS *fs = dp->obj.fs;
2e79c                 | ' 	BYTE attr, b;
2e79c                 | ' 
2e79c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2e79c                 | ' 
2e79c                 | ' 
2e79c                 | ' 	while (dp->sect) {
2e79c                 | LR__4630
2e79c     18 26 06 F1 | 	add	local01, #24
2e7a0     13 FB 09 FB | 	rdlong	result1, local01 wz
2e7a4     18 26 86 F1 | 	sub	local01, #24
2e7a8     AC 01 90 AD |  if_e	jmp	#LR__4640
2e7ac     18 26 06 F1 | 	add	local01, #24
2e7b0     13 15 02 FB | 	rdlong	arg02, local01
2e7b4     18 26 86 F1 | 	sub	local01, #24
2e7b8     16 13 02 F6 | 	mov	arg01, local04
2e7bc     AC ED BF FD | 	call	#_fatfs_cc_move_window
2e7c0     FD 2A 0A F6 | 	mov	local03, result1 wz
2e7c4     90 01 90 5D |  if_ne	jmp	#LR__4640
2e7c8     1C 26 06 F1 | 	add	local01, #28
2e7cc     13 FB 01 FB | 	rdlong	result1, local01
2e7d0     1C 26 86 F1 | 	sub	local01, #28
2e7d4     FD 32 C2 FA | 	rdbyte	local07, result1
2e7d8     19 FB 01 F6 | 	mov	result1, local07
2e7dc     07 FA 4D F7 | 	zerox	result1, #7 wz
2e7e0     04 2A 06 A6 |  if_e	mov	local03, #4
2e7e4                 | ' 			res = FR_NO_FILE; break;
2e7e4     70 01 90 AD |  if_e	jmp	#LR__4640
2e7e8     1C 26 06 F1 | 	add	local01, #28
2e7ec     13 35 02 FB | 	rdlong	local08, local01
2e7f0     0B 34 06 F1 | 	add	local08, #11
2e7f4     1A 37 C2 FA | 	rdbyte	local09, local08
2e7f8     3F 36 06 F5 | 	and	local09, #63
2e7fc     16 26 86 F1 | 	sub	local01, #22
2e800     13 37 42 FC | 	wrbyte	local09, local01
2e804     06 26 86 F1 | 	sub	local01, #6
2e808     19 FB E1 F8 | 	getbyte	result1, local07, #0
2e80c     E5 FA 0D F2 | 	cmp	result1, #229 wz
2e810     19 35 02 56 |  if_ne	mov	local08, local07
2e814     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2e818     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2e81c     1C 00 90 AD |  if_e	jmp	#LR__4631
2e820     00 38 06 F6 | 	mov	local10, #0
2e824     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2e828     20 34 26 F5 | 	andn	local08, #32
2e82c     08 34 0E F2 | 	cmp	local08, #8 wz
2e830     01 38 06 A6 |  if_e	mov	local10, #1
2e834     14 39 0A F2 | 	cmp	local10, local02 wz
2e838     08 00 90 AD |  if_e	jmp	#LR__4632
2e83c                 | LR__4631
2e83c     FF 2E 06 F6 | 	mov	local05, #255
2e840     00 01 90 FD | 	jmp	#LR__4639
2e844                 | LR__4632
2e844     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2e848     0F 36 0E F2 | 	cmp	local09, #15 wz
2e84c     B4 00 90 5D |  if_ne	jmp	#LR__4636
2e850     19 3B E2 F8 | 	getbyte	local11, local07, #0
2e854     40 3A CE F7 | 	test	local11, #64 wz
2e858     30 00 90 AD |  if_e	jmp	#LR__4633
2e85c     1C 26 06 F1 | 	add	local01, #28
2e860     13 3B 02 FB | 	rdlong	local11, local01
2e864     0D 3A 06 F1 | 	add	local11, #13
2e868     1D 31 C2 FA | 	rdbyte	local06, local11
2e86c     19 33 E2 F8 | 	getbyte	local07, local07, #0
2e870     BF 32 06 F5 | 	and	local07, #191
2e874     19 2F 02 F6 | 	mov	local05, local07
2e878     0C 26 86 F1 | 	sub	local01, #12
2e87c     13 3B 02 FB | 	rdlong	local11, local01
2e880     1C 26 06 F1 | 	add	local01, #28
2e884     13 3B 62 FC | 	wrlong	local11, local01
2e888     2C 26 86 F1 | 	sub	local01, #44
2e88c                 | LR__4633
2e88c     19 35 E2 F8 | 	getbyte	local08, local07, #0
2e890     17 39 E2 F8 | 	getbyte	local10, local05, #0
2e894     1C 35 0A F2 | 	cmp	local08, local10 wz
2e898     5C 00 90 5D |  if_ne	jmp	#LR__4634
2e89c     18 39 E2 F8 | 	getbyte	local10, local06, #0
2e8a0     1C 26 06 F1 | 	add	local01, #28
2e8a4     13 37 02 FB | 	rdlong	local09, local01
2e8a8     1C 26 86 F1 | 	sub	local01, #28
2e8ac     0D 36 06 F1 | 	add	local09, #13
2e8b0     1B 35 C2 FA | 	rdbyte	local08, local09
2e8b4     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2e8b8     1B 39 0A F2 | 	cmp	local10, local09 wz
2e8bc     38 00 90 5D |  if_ne	jmp	#LR__4634
2e8c0     0C 2C 06 F1 | 	add	local04, #12
2e8c4     16 13 02 FB | 	rdlong	arg01, local04
2e8c8     0C 2C 86 F1 | 	sub	local04, #12
2e8cc     1C 26 06 F1 | 	add	local01, #28
2e8d0     13 3D 02 FB | 	rdlong	local12, local01
2e8d4     1C 26 86 F1 | 	sub	local01, #28
2e8d8     1E 15 02 F6 | 	mov	arg02, local12
2e8dc     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2e8e0     00 FA 4D F2 | 	cmps	result1, #0 wz
2e8e4     17 3D 02 56 |  if_ne	mov	local12, local05
2e8e8     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2e8ec     01 3C 86 51 |  if_ne	sub	local12, #1
2e8f0     1E 3B 02 56 |  if_ne	mov	local11, local12
2e8f4     04 00 90 5D |  if_ne	jmp	#LR__4635
2e8f8                 | LR__4634
2e8f8     FF 3A 06 F6 | 	mov	local11, #255
2e8fc                 | LR__4635
2e8fc     1D 2F 02 F6 | 	mov	local05, local11
2e900     40 00 90 FD | 	jmp	#LR__4638
2e904                 | LR__4636
2e904     17 3B 02 F6 | 	mov	local11, local05
2e908     07 3A 4E F7 | 	zerox	local11, #7 wz
2e90c     20 00 90 5D |  if_ne	jmp	#LR__4637
2e910     18 31 E2 F8 | 	getbyte	local06, local06, #0
2e914     1C 26 06 F1 | 	add	local01, #28
2e918     13 13 02 FB | 	rdlong	arg01, local01
2e91c     1C 26 86 F1 | 	sub	local01, #28
2e920     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2e924     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e928     FD 30 0A F2 | 	cmp	local06, result1 wz
2e92c     28 00 90 AD |  if_e	jmp	#LR__4640
2e930                 | LR__4637
2e930     2C 26 06 F1 | 	add	local01, #44
2e934     FF FF FF FF 
2e938     13 FF 6B FC | 	wrlong	##-1, local01
2e93c     2C 26 86 F1 | 	sub	local01, #44
2e940                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2e940                 | ' 					}
2e940                 | ' 					break;
2e940     14 00 90 FD | 	jmp	#LR__4640
2e944                 | LR__4638
2e944                 | LR__4639
2e944     13 13 02 F6 | 	mov	arg01, local01
2e948     00 14 06 F6 | 	mov	arg02, #0
2e94c     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2e950     FD 2A 0A F6 | 	mov	local03, result1 wz
2e954     44 FE 9F AD |  if_e	jmp	#LR__4630
2e958                 | LR__4640
2e958     00 2A 0E F2 | 	cmp	local03, #0 wz
2e95c     18 26 06 51 |  if_ne	add	local01, #24
2e960     13 01 68 5C |  if_ne	wrlong	#0, local01
2e964                 | ' 	return res;
2e964     15 FB 01 F6 | 	mov	result1, local03
2e968     A7 F0 03 F6 | 	mov	ptra, fp
2e96c     B2 00 A0 FD | 	call	#popregs_
2e970                 | _fatfs_cc_dir_read_ret
2e970     2D 00 64 FD | 	ret
2e974                 | 
2e974                 | _fatfs_cc_dir_find
2e974     0B 4A 05 F6 | 	mov	COUNT_, #11
2e978     A8 00 A0 FD | 	call	#pushregs_
2e97c     09 27 02 F6 | 	mov	local01, arg01
2e980     13 29 02 FB | 	rdlong	local02, local01
2e984     13 13 02 F6 | 	mov	arg01, local01
2e988     00 14 06 F6 | 	mov	arg02, #0
2e98c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2e990     00 FA 0D F2 | 	cmp	result1, #0 wz
2e994     18 02 90 5D |  if_ne	jmp	#LR__4662
2e998     FF 2A 06 F6 | 	mov	local03, #255
2e99c     FF 2C 06 F6 | 	mov	local04, #255
2e9a0     2C 26 06 F1 | 	add	local01, #44
2e9a4     FF FF FF FF 
2e9a8     13 FF 6B FC | 	wrlong	##-1, local01
2e9ac     2C 26 86 F1 | 	sub	local01, #44
2e9b0                 | ' #line 2404 "ff.c"
2e9b0                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2e9b0                 | ' 
2e9b0                 | ' 	do {
2e9b0                 | LR__4650
2e9b0     18 26 06 F1 | 	add	local01, #24
2e9b4     13 15 02 FB | 	rdlong	arg02, local01
2e9b8     18 26 86 F1 | 	sub	local01, #24
2e9bc     14 13 02 F6 | 	mov	arg01, local02
2e9c0     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2e9c4     FD 2E 0A F6 | 	mov	local05, result1 wz
2e9c8     E0 01 90 5D |  if_ne	jmp	#LR__4661
2e9cc     1C 26 06 F1 | 	add	local01, #28
2e9d0     13 17 02 FB | 	rdlong	arg03, local01
2e9d4     1C 26 86 F1 | 	sub	local01, #28
2e9d8     0B 31 C2 FA | 	rdbyte	local06, arg03
2e9dc     18 17 02 F6 | 	mov	arg03, local06
2e9e0     07 16 4E F7 | 	zerox	arg03, #7 wz
2e9e4     04 2E 06 A6 |  if_e	mov	local05, #4
2e9e8     C0 01 90 AD |  if_e	jmp	#LR__4661
2e9ec     1C 26 06 F1 | 	add	local01, #28
2e9f0     13 33 02 FB | 	rdlong	local07, local01
2e9f4     19 17 02 F6 | 	mov	arg03, local07
2e9f8     0B 16 06 F1 | 	add	arg03, #11
2e9fc     0B 35 C2 FA | 	rdbyte	local08, arg03
2ea00     3F 34 06 F5 | 	and	local08, #63
2ea04     16 26 86 F1 | 	sub	local01, #22
2ea08     13 35 42 FC | 	wrbyte	local08, local01
2ea0c     06 26 86 F1 | 	sub	local01, #6
2ea10     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2ea14     E5 16 0E F2 | 	cmp	arg03, #229 wz
2ea18     18 00 90 AD |  if_e	jmp	#LR__4651
2ea1c     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2ea20     08 16 CE F7 | 	test	arg03, #8 wz
2ea24     1A 33 02 56 |  if_ne	mov	local07, local08
2ea28     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2ea2c     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2ea30     18 00 90 AD |  if_e	jmp	#LR__4652
2ea34                 | LR__4651
2ea34     FF 2C 06 F6 | 	mov	local04, #255
2ea38     2C 26 06 F1 | 	add	local01, #44
2ea3c     FF FF FF FF 
2ea40     13 FF 6B FC | 	wrlong	##-1, local01
2ea44     2C 26 86 F1 | 	sub	local01, #44
2ea48     4C 01 90 FD | 	jmp	#LR__4660
2ea4c                 | LR__4652
2ea4c     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2ea50     0F 34 0E F2 | 	cmp	local08, #15 wz
2ea54     C8 00 90 5D |  if_ne	jmp	#LR__4656
2ea58     2B 26 06 F1 | 	add	local01, #43
2ea5c     13 35 C2 FA | 	rdbyte	local08, local01
2ea60     2B 26 86 F1 | 	sub	local01, #43
2ea64     40 34 CE F7 | 	test	local08, #64 wz
2ea68     2C 01 90 5D |  if_ne	jmp	#LR__4659
2ea6c     18 37 E2 F8 | 	getbyte	local09, local06, #0
2ea70     40 36 CE F7 | 	test	local09, #64 wz
2ea74     30 00 90 AD |  if_e	jmp	#LR__4653
2ea78     1C 26 06 F1 | 	add	local01, #28
2ea7c     13 37 02 FB | 	rdlong	local09, local01
2ea80     0D 36 06 F1 | 	add	local09, #13
2ea84     1B 2B C2 FA | 	rdbyte	local03, local09
2ea88     18 31 E2 F8 | 	getbyte	local06, local06, #0
2ea8c     BF 30 06 F5 | 	and	local06, #191
2ea90     18 2D 02 F6 | 	mov	local04, local06
2ea94     0C 26 86 F1 | 	sub	local01, #12
2ea98     13 37 02 FB | 	rdlong	local09, local01
2ea9c     1C 26 06 F1 | 	add	local01, #28
2eaa0     13 37 62 FC | 	wrlong	local09, local01
2eaa4     2C 26 86 F1 | 	sub	local01, #44
2eaa8                 | LR__4653
2eaa8     18 39 E2 F8 | 	getbyte	local10, local06, #0
2eaac     16 33 E2 F8 | 	getbyte	local07, local04, #0
2eab0     19 39 0A F2 | 	cmp	local10, local07 wz
2eab4     5C 00 90 5D |  if_ne	jmp	#LR__4654
2eab8     15 35 E2 F8 | 	getbyte	local08, local03, #0
2eabc     1C 26 06 F1 | 	add	local01, #28
2eac0     13 33 02 FB | 	rdlong	local07, local01
2eac4     1C 26 86 F1 | 	sub	local01, #28
2eac8     0D 32 06 F1 | 	add	local07, #13
2eacc     19 31 C2 FA | 	rdbyte	local06, local07
2ead0     18 33 E2 F8 | 	getbyte	local07, local06, #0
2ead4     19 35 0A F2 | 	cmp	local08, local07 wz
2ead8     38 00 90 5D |  if_ne	jmp	#LR__4654
2eadc     0C 28 06 F1 | 	add	local02, #12
2eae0     14 13 02 FB | 	rdlong	arg01, local02
2eae4     0C 28 86 F1 | 	sub	local02, #12
2eae8     1C 26 06 F1 | 	add	local01, #28
2eaec     13 3B 02 FB | 	rdlong	local11, local01
2eaf0     1C 26 86 F1 | 	sub	local01, #28
2eaf4     1D 15 02 F6 | 	mov	arg02, local11
2eaf8     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2eafc     00 FA 4D F2 | 	cmps	result1, #0 wz
2eb00     16 3B 02 56 |  if_ne	mov	local11, local04
2eb04     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2eb08     01 3A 86 51 |  if_ne	sub	local11, #1
2eb0c     1D 37 02 56 |  if_ne	mov	local09, local11
2eb10     04 00 90 5D |  if_ne	jmp	#LR__4655
2eb14                 | LR__4654
2eb14     FF 36 06 F6 | 	mov	local09, #255
2eb18                 | LR__4655
2eb18     1B 2D 02 F6 | 	mov	local04, local09
2eb1c     78 00 90 FD | 	jmp	#LR__4659
2eb20                 | LR__4656
2eb20     16 37 02 F6 | 	mov	local09, local04
2eb24     07 36 4E F7 | 	zerox	local09, #7 wz
2eb28     20 00 90 5D |  if_ne	jmp	#LR__4657
2eb2c     15 39 E2 F8 | 	getbyte	local10, local03, #0
2eb30     1C 26 06 F1 | 	add	local01, #28
2eb34     13 13 02 FB | 	rdlong	arg01, local01
2eb38     1C 26 86 F1 | 	sub	local01, #28
2eb3c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2eb40     FD FA E1 F8 | 	getbyte	result1, result1, #0
2eb44     FD 38 0A F2 | 	cmp	local10, result1 wz
2eb48     60 00 90 AD |  if_e	jmp	#LR__4661
2eb4c                 | LR__4657
2eb4c     2B 26 06 F1 | 	add	local01, #43
2eb50     13 37 C2 FA | 	rdbyte	local09, local01
2eb54     2B 26 86 F1 | 	sub	local01, #43
2eb58     01 36 CE F7 | 	test	local09, #1 wz
2eb5c     24 00 90 5D |  if_ne	jmp	#LR__4658
2eb60     1C 26 06 F1 | 	add	local01, #28
2eb64     13 13 02 FB | 	rdlong	arg01, local01
2eb68     04 26 06 F1 | 	add	local01, #4
2eb6c     13 15 02 F6 | 	mov	arg02, local01
2eb70     20 26 86 F1 | 	sub	local01, #32
2eb74     0B 16 06 F6 | 	mov	arg03, #11
2eb78     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2eb7c     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb80     28 00 90 AD |  if_e	jmp	#LR__4661
2eb84                 | LR__4658
2eb84     FF 2C 06 F6 | 	mov	local04, #255
2eb88     2C 26 06 F1 | 	add	local01, #44
2eb8c     FF FF FF FF 
2eb90     13 FF 6B FC | 	wrlong	##-1, local01
2eb94     2C 26 86 F1 | 	sub	local01, #44
2eb98                 | LR__4659
2eb98                 | LR__4660
2eb98     13 13 02 F6 | 	mov	arg01, local01
2eb9c     00 14 06 F6 | 	mov	arg02, #0
2eba0     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2eba4     FD 2E 0A F6 | 	mov	local05, result1 wz
2eba8     04 FE 9F AD |  if_e	jmp	#LR__4650
2ebac                 | LR__4661
2ebac                 | ' 
2ebac                 | ' 	return res;
2ebac     17 FB 01 F6 | 	mov	result1, local05
2ebb0                 | LR__4662
2ebb0     A7 F0 03 F6 | 	mov	ptra, fp
2ebb4     B2 00 A0 FD | 	call	#popregs_
2ebb8                 | _fatfs_cc_dir_find_ret
2ebb8     2D 00 64 FD | 	ret
2ebbc                 | 
2ebbc                 | _fatfs_cc_dir_register
2ebbc     0A 4A 05 F6 | 	mov	COUNT_, #10
2ebc0     A8 00 A0 FD | 	call	#pushregs_
2ebc4     2C F0 07 F1 | 	add	ptra, #44
2ebc8     04 4E 05 F1 | 	add	fp, #4
2ebcc     A7 12 62 FC | 	wrlong	arg01, fp
2ebd0     09 27 02 FB | 	rdlong	local01, arg01
2ebd4     08 4E 05 F1 | 	add	fp, #8
2ebd8     A7 26 62 FC | 	wrlong	local01, fp
2ebdc     08 4E 85 F1 | 	sub	fp, #8
2ebe0     A7 28 02 FB | 	rdlong	local02, fp
2ebe4     04 4E 85 F1 | 	sub	fp, #4
2ebe8     2B 28 06 F1 | 	add	local02, #43
2ebec     14 29 C2 FA | 	rdbyte	local02, local02
2ebf0     A0 28 CE F7 | 	test	local02, #160 wz
2ebf4     06 FA 05 56 |  if_ne	mov	result1, #6
2ebf8     F8 03 90 5D |  if_ne	jmp	#LR__4685
2ebfc                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2ebfc     14 4E 05 F1 | 	add	fp, #20
2ec00     A7 00 68 FC | 	wrlong	#0, fp
2ec04     14 4E 85 F1 | 	sub	fp, #20
2ec08     97 28 48 FB | 	callpa	#(@LR__4671-@LR__4670)>>2,fcache_load_ptr_
2ec0c                 | LR__4670
2ec0c     0C 4E 05 F1 | 	add	fp, #12
2ec10     A7 28 02 FB | 	rdlong	local02, fp
2ec14     0C 28 06 F1 | 	add	local02, #12
2ec18     14 2B 02 FB | 	rdlong	local03, local02
2ec1c     08 4E 05 F1 | 	add	fp, #8
2ec20     A7 2C 02 FB | 	rdlong	local04, fp
2ec24     14 4E 85 F1 | 	sub	fp, #20
2ec28     01 2C 66 F0 | 	shl	local04, #1
2ec2c     15 2D 02 F1 | 	add	local04, local03
2ec30     16 29 EA FA | 	rdword	local02, local04 wz
2ec34     24 00 90 AD |  if_e	jmp	#LR__4672
2ec38     14 4E 05 F1 | 	add	fp, #20
2ec3c     A7 2E 02 FB | 	rdlong	local05, fp
2ec40     17 31 02 F6 | 	mov	local06, local05
2ec44     17 33 02 F6 | 	mov	local07, local05
2ec48     19 35 02 F6 | 	mov	local08, local07
2ec4c     01 34 06 F1 | 	add	local08, #1
2ec50     A7 34 62 FC | 	wrlong	local08, fp
2ec54     14 4E 85 F1 | 	sub	fp, #20
2ec58     B0 FF 9F FD | 	jmp	#LR__4670
2ec5c                 | LR__4671
2ec5c                 | LR__4672
2ec5c     1C 4E 05 F1 | 	add	fp, #28
2ec60     A7 12 02 F6 | 	mov	arg01, fp
2ec64     18 4E 85 F1 | 	sub	fp, #24
2ec68     A7 14 02 FB | 	rdlong	arg02, fp
2ec6c     04 4E 85 F1 | 	sub	fp, #4
2ec70     20 14 06 F1 | 	add	arg02, #32
2ec74     0C 16 06 F6 | 	mov	arg03, #12
2ec78     1C 6C BF FD | 	call	#__system____builtin_memmove
2ec7c     27 4E 05 F1 | 	add	fp, #39
2ec80     A7 36 C2 FA | 	rdbyte	local09, fp
2ec84     27 4E 85 F1 | 	sub	fp, #39
2ec88     01 36 CE F7 | 	test	local09, #1 wz
2ec8c     F4 00 90 AD |  if_e	jmp	#LR__4675
2ec90     04 4E 05 F1 | 	add	fp, #4
2ec94     A7 38 02 FB | 	rdlong	local10, fp
2ec98     2B 38 06 F1 | 	add	local10, #43
2ec9c     1C 81 48 FC | 	wrbyte	#64, local10
2eca0                 | ' 		dp->fn[ 11 ] =  0x40 ;
2eca0                 | ' 		for (n = 1; n < 100; n++) {
2eca0     0C 4E 05 F1 | 	add	fp, #12
2eca4     A7 02 68 FC | 	wrlong	#1, fp
2eca8     10 4E 85 F1 | 	sub	fp, #16
2ecac                 | LR__4673
2ecac     10 4E 05 F1 | 	add	fp, #16
2ecb0     A7 28 02 FB | 	rdlong	local02, fp
2ecb4     10 4E 85 F1 | 	sub	fp, #16
2ecb8     64 28 16 F2 | 	cmp	local02, #100 wc
2ecbc     70 00 90 3D |  if_ae	jmp	#LR__4674
2ecc0     04 4E 05 F1 | 	add	fp, #4
2ecc4     A7 12 02 FB | 	rdlong	arg01, fp
2ecc8     20 12 06 F1 | 	add	arg01, #32
2eccc     18 4E 05 F1 | 	add	fp, #24
2ecd0     A7 14 02 F6 | 	mov	arg02, fp
2ecd4     10 4E 85 F1 | 	sub	fp, #16
2ecd8     A7 38 02 FB | 	rdlong	local10, fp
2ecdc     0C 38 06 F1 | 	add	local10, #12
2ece0     1C 17 02 FB | 	rdlong	arg03, local10
2ece4     04 4E 05 F1 | 	add	fp, #4
2ece8     A7 18 02 FB | 	rdlong	arg04, fp
2ecec     10 4E 85 F1 | 	sub	fp, #16
2ecf0     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2ecf4     04 4E 05 F1 | 	add	fp, #4
2ecf8     A7 12 02 FB | 	rdlong	arg01, fp
2ecfc     04 4E 85 F1 | 	sub	fp, #4
2ed00     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2ed04     08 4E 05 F1 | 	add	fp, #8
2ed08     A7 FA 61 FC | 	wrlong	result1, fp
2ed0c     00 FA 4D F2 | 	cmps	result1, #0 wz
2ed10     08 4E 85 F1 | 	sub	fp, #8
2ed14     18 00 90 5D |  if_ne	jmp	#LR__4674
2ed18     10 4E 05 F1 | 	add	fp, #16
2ed1c     A7 38 02 FB | 	rdlong	local10, fp
2ed20     01 38 06 F1 | 	add	local10, #1
2ed24     A7 38 62 FC | 	wrlong	local10, fp
2ed28     10 4E 85 F1 | 	sub	fp, #16
2ed2c     7C FF 9F FD | 	jmp	#LR__4673
2ed30                 | LR__4674
2ed30     10 4E 05 F1 | 	add	fp, #16
2ed34     A7 38 02 FB | 	rdlong	local10, fp
2ed38     10 4E 85 F1 | 	sub	fp, #16
2ed3c     64 38 0E F2 | 	cmp	local10, #100 wz
2ed40     07 FA 05 A6 |  if_e	mov	result1, #7
2ed44     AC 02 90 AD |  if_e	jmp	#LR__4685
2ed48     08 4E 05 F1 | 	add	fp, #8
2ed4c     A7 38 02 FB | 	rdlong	local10, fp
2ed50     08 4E 85 F1 | 	sub	fp, #8
2ed54     04 38 0E F2 | 	cmp	local10, #4 wz
2ed58     08 4E 05 51 |  if_ne	add	fp, #8
2ed5c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2ed60     08 4E 85 51 |  if_ne	sub	fp, #8
2ed64     8C 02 90 5D |  if_ne	jmp	#LR__4685
2ed68     04 4E 05 F1 | 	add	fp, #4
2ed6c     A7 38 02 FB | 	rdlong	local10, fp
2ed70     23 4E 05 F1 | 	add	fp, #35
2ed74     A7 26 C2 FA | 	rdbyte	local01, fp
2ed78     27 4E 85 F1 | 	sub	fp, #39
2ed7c     2B 38 06 F1 | 	add	local10, #43
2ed80     1C 27 42 FC | 	wrbyte	local01, local10
2ed84                 | LR__4675
2ed84     27 4E 05 F1 | 	add	fp, #39
2ed88     A7 28 C2 FA | 	rdbyte	local02, fp
2ed8c     27 4E 85 F1 | 	sub	fp, #39
2ed90     02 28 CE F7 | 	test	local02, #2 wz
2ed94     20 00 90 AD |  if_e	jmp	#LR__4676
2ed98     14 4E 05 F1 | 	add	fp, #20
2ed9c     A7 38 02 FB | 	rdlong	local10, fp
2eda0     0C 38 06 F1 | 	add	local10, #12
2eda4     0D 38 16 FD | 	qdiv	local10, #13
2eda8     14 4E 85 F1 | 	sub	fp, #20
2edac     18 38 62 FD | 	getqx	local10
2edb0     01 38 06 F1 | 	add	local10, #1
2edb4     04 00 90 FD | 	jmp	#LR__4677
2edb8                 | LR__4676
2edb8     01 38 06 F6 | 	mov	local10, #1
2edbc                 | LR__4677
2edbc     18 4E 05 F1 | 	add	fp, #24
2edc0     A7 38 62 FC | 	wrlong	local10, fp
2edc4     14 4E 85 F1 | 	sub	fp, #20
2edc8     A7 12 02 FB | 	rdlong	arg01, fp
2edcc     1C 15 02 F6 | 	mov	arg02, local10
2edd0     04 4E 85 F1 | 	sub	fp, #4
2edd4     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2edd8     08 4E 05 F1 | 	add	fp, #8
2eddc     A7 FA 61 FC | 	wrlong	result1, fp
2ede0     08 4E 85 F1 | 	sub	fp, #8
2ede4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ede8     38 01 90 5D |  if_ne	jmp	#LR__4682
2edec     18 4E 05 F1 | 	add	fp, #24
2edf0     A7 38 02 FB | 	rdlong	local10, fp
2edf4     01 38 8E F1 | 	sub	local10, #1 wz
2edf8     A7 38 62 FC | 	wrlong	local10, fp
2edfc     18 4E 85 F1 | 	sub	fp, #24
2ee00     20 01 90 AD |  if_e	jmp	#LR__4682
2ee04     04 4E 05 F1 | 	add	fp, #4
2ee08     A7 38 02 FB | 	rdlong	local10, fp
2ee0c     1C 13 02 F6 | 	mov	arg01, local10
2ee10     14 4E 05 F1 | 	add	fp, #20
2ee14     A7 18 02 FB | 	rdlong	arg04, fp
2ee18     18 4E 85 F1 | 	sub	fp, #24
2ee1c     05 18 66 F0 | 	shl	arg04, #5
2ee20     10 38 06 F1 | 	add	local10, #16
2ee24     1C 15 02 FB | 	rdlong	arg02, local10
2ee28     0C 15 82 F1 | 	sub	arg02, arg04
2ee2c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ee30     08 4E 05 F1 | 	add	fp, #8
2ee34     A7 FA 61 FC | 	wrlong	result1, fp
2ee38     08 4E 85 F1 | 	sub	fp, #8
2ee3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee40     E0 00 90 5D |  if_ne	jmp	#LR__4681
2ee44     04 4E 05 F1 | 	add	fp, #4
2ee48     A7 12 02 FB | 	rdlong	arg01, fp
2ee4c     04 4E 85 F1 | 	sub	fp, #4
2ee50     20 12 06 F1 | 	add	arg01, #32
2ee54     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2ee58     FD 38 02 F6 | 	mov	local10, result1
2ee5c     28 4E 05 F1 | 	add	fp, #40
2ee60     A7 38 42 FC | 	wrbyte	local10, fp
2ee64     28 4E 85 F1 | 	sub	fp, #40
2ee68                 | ' 			sum = sum_sfn(dp->fn);
2ee68                 | ' 			do {
2ee68                 | LR__4678
2ee68     0C 4E 05 F1 | 	add	fp, #12
2ee6c     A7 12 02 FB | 	rdlong	arg01, fp
2ee70     08 4E 85 F1 | 	sub	fp, #8
2ee74     A7 26 02 FB | 	rdlong	local01, fp
2ee78     04 4E 85 F1 | 	sub	fp, #4
2ee7c     18 26 06 F1 | 	add	local01, #24
2ee80     13 15 02 FB | 	rdlong	arg02, local01
2ee84     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2ee88     08 4E 05 F1 | 	add	fp, #8
2ee8c     A7 FA 61 FC | 	wrlong	result1, fp
2ee90     00 FA 4D F2 | 	cmps	result1, #0 wz
2ee94     08 4E 85 F1 | 	sub	fp, #8
2ee98     88 00 90 5D |  if_ne	jmp	#LR__4680
2ee9c     0C 4E 05 F1 | 	add	fp, #12
2eea0     A7 28 02 FB | 	rdlong	local02, fp
2eea4     0C 28 06 F1 | 	add	local02, #12
2eea8     14 13 02 FB | 	rdlong	arg01, local02
2eeac     08 4E 85 F1 | 	sub	fp, #8
2eeb0     A7 26 02 FB | 	rdlong	local01, fp
2eeb4     1C 26 06 F1 | 	add	local01, #28
2eeb8     13 15 02 FB | 	rdlong	arg02, local01
2eebc     14 4E 05 F1 | 	add	fp, #20
2eec0     A7 16 02 FB | 	rdlong	arg03, fp
2eec4     10 4E 05 F1 | 	add	fp, #16
2eec8     A7 18 C2 FA | 	rdbyte	arg04, fp
2eecc     28 4E 85 F1 | 	sub	fp, #40
2eed0     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2eed4     0C 4E 05 F1 | 	add	fp, #12
2eed8     A7 38 02 FB | 	rdlong	local10, fp
2eedc     03 38 06 F1 | 	add	local10, #3
2eee0     1C 03 48 FC | 	wrbyte	#1, local10
2eee4     08 4E 85 F1 | 	sub	fp, #8
2eee8     A7 12 02 FB | 	rdlong	arg01, fp
2eeec     04 4E 85 F1 | 	sub	fp, #4
2eef0     00 14 06 F6 | 	mov	arg02, #0
2eef4     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2eef8     08 4E 05 F1 | 	add	fp, #8
2eefc     A7 FA 61 FC | 	wrlong	result1, fp
2ef00     00 FA 4D F2 | 	cmps	result1, #0 wz
2ef04     08 4E 85 F1 | 	sub	fp, #8
2ef08     18 00 90 5D |  if_ne	jmp	#LR__4679
2ef0c     18 4E 05 F1 | 	add	fp, #24
2ef10     A7 38 02 FB | 	rdlong	local10, fp
2ef14     01 38 8E F1 | 	sub	local10, #1 wz
2ef18     A7 38 62 FC | 	wrlong	local10, fp
2ef1c     18 4E 85 F1 | 	sub	fp, #24
2ef20     44 FF 9F 5D |  if_ne	jmp	#LR__4678
2ef24                 | LR__4679
2ef24                 | LR__4680
2ef24                 | LR__4681
2ef24                 | LR__4682
2ef24     08 4E 05 F1 | 	add	fp, #8
2ef28     A7 38 0A FB | 	rdlong	local10, fp wz
2ef2c     08 4E 85 F1 | 	sub	fp, #8
2ef30     B4 00 90 5D |  if_ne	jmp	#LR__4684
2ef34     0C 4E 05 F1 | 	add	fp, #12
2ef38     A7 12 02 FB | 	rdlong	arg01, fp
2ef3c     08 4E 85 F1 | 	sub	fp, #8
2ef40     A7 26 02 FB | 	rdlong	local01, fp
2ef44     04 4E 85 F1 | 	sub	fp, #4
2ef48     18 26 06 F1 | 	add	local01, #24
2ef4c     13 15 02 FB | 	rdlong	arg02, local01
2ef50     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2ef54     08 4E 05 F1 | 	add	fp, #8
2ef58     A7 FA 61 FC | 	wrlong	result1, fp
2ef5c     08 4E 85 F1 | 	sub	fp, #8
2ef60     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef64     80 00 90 5D |  if_ne	jmp	#LR__4683
2ef68     04 4E 05 F1 | 	add	fp, #4
2ef6c     A7 28 02 FB | 	rdlong	local02, fp
2ef70     04 4E 85 F1 | 	sub	fp, #4
2ef74     1C 28 06 F1 | 	add	local02, #28
2ef78     14 13 02 FB | 	rdlong	arg01, local02
2ef7c     00 14 06 F6 | 	mov	arg02, #0
2ef80     20 16 06 F6 | 	mov	arg03, #32
2ef84     98 00 A0 FD | 	call	#\builtin_bytefill_
2ef88     04 4E 05 F1 | 	add	fp, #4
2ef8c     A7 14 02 FB | 	rdlong	arg02, fp
2ef90     0A 27 02 F6 | 	mov	local01, arg02
2ef94     1C 26 06 F1 | 	add	local01, #28
2ef98     13 13 02 FB | 	rdlong	arg01, local01
2ef9c     04 4E 85 F1 | 	sub	fp, #4
2efa0     20 14 06 F1 | 	add	arg02, #32
2efa4     0B 16 06 F6 | 	mov	arg03, #11
2efa8     EC 68 BF FD | 	call	#__system____builtin_memmove
2efac     04 4E 05 F1 | 	add	fp, #4
2efb0     A7 36 02 FB | 	rdlong	local09, fp
2efb4     1B 39 02 F6 | 	mov	local10, local09
2efb8     1C 38 06 F1 | 	add	local10, #28
2efbc     1C 27 02 FB | 	rdlong	local01, local10
2efc0     2B 36 06 F1 | 	add	local09, #43
2efc4     1B 39 C2 FA | 	rdbyte	local10, local09
2efc8     18 38 06 F5 | 	and	local10, #24
2efcc     0C 26 06 F1 | 	add	local01, #12
2efd0     13 39 42 FC | 	wrbyte	local10, local01
2efd4     08 4E 05 F1 | 	add	fp, #8
2efd8     A7 38 02 FB | 	rdlong	local10, fp
2efdc     0C 4E 85 F1 | 	sub	fp, #12
2efe0     03 38 06 F1 | 	add	local10, #3
2efe4     1C 03 48 FC | 	wrbyte	#1, local10
2efe8                 | LR__4683
2efe8                 | LR__4684
2efe8                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2efe8                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2efe8                 | ' 
2efe8                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2efe8                 | ' 
2efe8                 | ' 			fs->wflag = 1;
2efe8                 | ' 		}
2efe8                 | ' 	}
2efe8                 | ' 
2efe8                 | ' 	return res;
2efe8     08 4E 05 F1 | 	add	fp, #8
2efec     A7 FA 01 FB | 	rdlong	result1, fp
2eff0     08 4E 85 F1 | 	sub	fp, #8
2eff4                 | LR__4685
2eff4     A7 F0 03 F6 | 	mov	ptra, fp
2eff8     B2 00 A0 FD | 	call	#popregs_
2effc                 | _fatfs_cc_dir_register_ret
2effc     2D 00 64 FD | 	ret
2f000                 | 
2f000                 | _fatfs_cc_dir_remove
2f000     05 4A 05 F6 | 	mov	COUNT_, #5
2f004     A8 00 A0 FD | 	call	#pushregs_
2f008     09 27 02 F6 | 	mov	local01, arg01
2f00c     13 29 02 FB | 	rdlong	local02, local01
2f010     10 26 06 F1 | 	add	local01, #16
2f014     13 2B 02 FB | 	rdlong	local03, local01
2f018     1C 26 06 F1 | 	add	local01, #28
2f01c     13 15 02 FB | 	rdlong	arg02, local01
2f020     2C 26 86 F1 | 	sub	local01, #44
2f024     FF FF 7F FF 
2f028     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2f02c     00 2C 06 A6 |  if_e	mov	local04, #0
2f030     18 00 90 AD |  if_e	jmp	#LR__4690
2f034     13 13 02 F6 | 	mov	arg01, local01
2f038     2C 26 06 F1 | 	add	local01, #44
2f03c     13 15 02 FB | 	rdlong	arg02, local01
2f040     2C 26 86 F1 | 	sub	local01, #44
2f044     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2f048     FD 2C 02 F6 | 	mov	local04, result1
2f04c                 | LR__4690
2f04c     16 2F 0A F6 | 	mov	local05, local04 wz
2f050     64 00 90 5D |  if_ne	jmp	#LR__4693
2f054                 | ' 		do {
2f054                 | LR__4691
2f054     18 26 06 F1 | 	add	local01, #24
2f058     13 15 02 FB | 	rdlong	arg02, local01
2f05c     18 26 86 F1 | 	sub	local01, #24
2f060     14 13 02 F6 | 	mov	arg01, local02
2f064     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2f068     FD 2E 0A F6 | 	mov	local05, result1 wz
2f06c     40 00 90 5D |  if_ne	jmp	#LR__4692
2f070     1C 26 06 F1 | 	add	local01, #28
2f074     13 2D 02 FB | 	rdlong	local04, local01
2f078     16 CB 49 FC | 	wrbyte	#229, local04
2f07c     03 28 06 F1 | 	add	local02, #3
2f080     14 03 48 FC | 	wrbyte	#1, local02
2f084     03 28 86 F1 | 	sub	local02, #3
2f088     0C 26 86 F1 | 	sub	local01, #12
2f08c     13 2D 02 FB | 	rdlong	local04, local01
2f090     10 26 86 F1 | 	sub	local01, #16
2f094     15 2D 12 F2 | 	cmp	local04, local03 wc
2f098     14 00 90 3D |  if_ae	jmp	#LR__4692
2f09c     13 13 02 F6 | 	mov	arg01, local01
2f0a0     00 14 06 F6 | 	mov	arg02, #0
2f0a4     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2f0a8     FD 2E 0A F6 | 	mov	local05, result1 wz
2f0ac     A4 FF 9F AD |  if_e	jmp	#LR__4691
2f0b0                 | LR__4692
2f0b0     04 2E 0E F2 | 	cmp	local05, #4 wz
2f0b4     02 2E 06 A6 |  if_e	mov	local05, #2
2f0b8                 | LR__4693
2f0b8                 | ' 	}
2f0b8                 | ' #line 2590 "ff.c"
2f0b8                 | ' 	return res;
2f0b8     17 FB 01 F6 | 	mov	result1, local05
2f0bc     A7 F0 03 F6 | 	mov	ptra, fp
2f0c0     B2 00 A0 FD | 	call	#popregs_
2f0c4                 | _fatfs_cc_dir_remove_ret
2f0c4     2D 00 64 FD | 	ret
2f0c8                 | 
2f0c8                 | _fatfs_cc_get_fileinfo
2f0c8     0F 4A 05 F6 | 	mov	COUNT_, #15
2f0cc     A8 00 A0 FD | 	call	#pushregs_
2f0d0     09 27 02 F6 | 	mov	local01, arg01
2f0d4     0A 29 02 F6 | 	mov	local02, arg02
2f0d8     13 2B 02 FB | 	rdlong	local03, local01
2f0dc     1C 28 06 F1 | 	add	local02, #28
2f0e0     14 01 48 FC | 	wrbyte	#0, local02
2f0e4     1C 28 86 F1 | 	sub	local02, #28
2f0e8     18 26 06 F1 | 	add	local01, #24
2f0ec     13 2D 0A FB | 	rdlong	local04, local01 wz
2f0f0     18 26 86 F1 | 	sub	local01, #24
2f0f4     90 03 90 AD |  if_e	jmp	#LR__4714
2f0f8     2C 26 06 F1 | 	add	local01, #44
2f0fc     13 2D 02 FB | 	rdlong	local04, local01
2f100     2C 26 86 F1 | 	sub	local01, #44
2f104     FF FF 7F FF 
2f108     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f10c     D8 00 90 AD |  if_e	jmp	#LR__4703
2f110     00 2E 06 F6 | 	mov	local05, #0
2f114     00 30 06 F6 | 	mov	local06, #0
2f118     00 32 06 F6 | 	mov	local07, #0
2f11c                 | ' 			si = di = 0;
2f11c                 | ' 			hs = 0;
2f11c                 | ' 			while (fs->lfnbuf[si] != 0) {
2f11c                 | LR__4700
2f11c     0C 2A 06 F1 | 	add	local03, #12
2f120     15 2D 02 FB | 	rdlong	local04, local03
2f124     0C 2A 86 F1 | 	sub	local03, #12
2f128     18 35 02 F6 | 	mov	local08, local06
2f12c     01 34 66 F0 | 	shl	local08, #1
2f130     16 35 02 F1 | 	add	local08, local04
2f134     1A 2D EA FA | 	rdword	local04, local08 wz
2f138     90 00 90 AD |  if_e	jmp	#LR__4702
2f13c     0C 2A 06 F1 | 	add	local03, #12
2f140     15 37 02 FB | 	rdlong	local09, local03
2f144     0C 2A 86 F1 | 	sub	local03, #12
2f148     18 39 02 F6 | 	mov	local10, local06
2f14c     01 38 66 F0 | 	shl	local10, #1
2f150     1B 39 02 F1 | 	add	local10, local09
2f154     1C 3B E2 FA | 	rdword	local11, local10
2f158     19 2D 02 F6 | 	mov	local04, local07
2f15c     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f160     01 30 06 F1 | 	add	local06, #1
2f164     24 00 90 5D |  if_ne	jmp	#LR__4701
2f168     1D 3D 32 F9 | 	getword	local12, local11, #0
2f16c     6C 00 00 FF 
2f170     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2f174     14 00 90 CD |  if_b	jmp	#LR__4701
2f178     1D 3F 32 F9 | 	getword	local13, local11, #0
2f17c     70 00 00 FF 
2f180     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2f184     1D 33 02 C6 |  if_b	mov	local07, local11
2f188                 | ' 					hs = wc; continue;
2f188     90 FF 9F CD |  if_b	jmp	#LR__4700
2f18c                 | LR__4701
2f18c     19 13 32 F9 | 	getword	arg01, local07, #0
2f190     10 12 66 F0 | 	shl	arg01, #16
2f194     1D 3B 32 F9 | 	getword	local11, local11, #0
2f198     1D 13 42 F5 | 	or	arg01, local11
2f19c     17 15 02 F6 | 	mov	arg02, local05
2f1a0     1C 28 06 F1 | 	add	local02, #28
2f1a4     14 15 02 F1 | 	add	arg02, local02
2f1a8     FF 16 06 F6 | 	mov	arg03, #255
2f1ac     17 17 82 F1 | 	sub	arg03, local05
2f1b0     1C 28 86 F1 | 	sub	local02, #28
2f1b4     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2f1b8     FD 40 0A F6 | 	mov	local14, result1 wz
2f1bc     00 2E 06 A6 |  if_e	mov	local05, #0
2f1c0     20 2F 02 51 |  if_ne	add	local05, local14
2f1c4     00 32 06 56 |  if_ne	mov	local07, #0
2f1c8     50 FF 9F 5D |  if_ne	jmp	#LR__4700
2f1cc                 | LR__4702
2f1cc     19 2D 02 F6 | 	mov	local04, local07
2f1d0     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f1d4     00 2E 06 56 |  if_ne	mov	local05, #0
2f1d8     1C 28 06 F1 | 	add	local02, #28
2f1dc     14 2F 02 F1 | 	add	local05, local02
2f1e0     17 01 48 FC | 	wrbyte	#0, local05
2f1e4     1C 28 86 F1 | 	sub	local02, #28
2f1e8                 | LR__4703
2f1e8     00 2E 06 F6 | 	mov	local05, #0
2f1ec     00 30 06 F6 | 	mov	local06, #0
2f1f0                 | ' 			fno->fname[di] = 0;
2f1f0                 | ' 		}
2f1f0                 | ' 	}
2f1f0                 | ' 
2f1f0                 | ' 	si = di = 0;
2f1f0                 | ' 	while (si < 11) {
2f1f0                 | LR__4704
2f1f0     0B 30 16 F2 | 	cmp	local06, #11 wc
2f1f4     20 01 90 3D |  if_ae	jmp	#LR__4707
2f1f8     1C 26 06 F1 | 	add	local01, #28
2f1fc     13 37 02 FB | 	rdlong	local09, local01
2f200     1C 26 86 F1 | 	sub	local01, #28
2f204     18 39 02 F6 | 	mov	local10, local06
2f208     1B 39 02 F1 | 	add	local10, local09
2f20c     1C 3B C2 FA | 	rdbyte	local11, local10
2f210     1D 2D 32 F9 | 	getword	local04, local11, #0
2f214     20 2C 0E F2 | 	cmp	local04, #32 wz
2f218     01 30 06 F1 | 	add	local06, #1
2f21c     D0 FF 9F AD |  if_e	jmp	#LR__4704
2f220     1D 2D 32 F9 | 	getword	local04, local11, #0
2f224     05 2C 0E F2 | 	cmp	local04, #5 wz
2f228     E5 3A 06 A6 |  if_e	mov	local11, #229
2f22c     09 30 0E F2 | 	cmp	local06, #9 wz
2f230     20 00 90 5D |  if_ne	jmp	#LR__4705
2f234     0C 2E 16 F2 | 	cmp	local05, #12 wc
2f238     18 00 90 3D |  if_ae	jmp	#LR__4705
2f23c     17 3F 02 F6 | 	mov	local13, local05
2f240     0C 28 06 F1 | 	add	local02, #12
2f244     14 3F 02 F1 | 	add	local13, local02
2f248     1F 5D 48 FC | 	wrbyte	#46, local13
2f24c     01 2E 06 F1 | 	add	local05, #1
2f250     0C 28 86 F1 | 	sub	local02, #12
2f254                 | LR__4705
2f254     1D 13 32 F9 | 	getword	arg01, local11, #0
2f258     07 12 4E F7 | 	zerox	arg01, #7 wz
2f25c     00 FA 05 56 |  if_ne	mov	result1, #0
2f260                 | ' 
2f260                 | ' 	return 0;
2f260     00 FA 05 A6 |  if_e	mov	result1, #0
2f264     00 FA 0D F2 | 	cmp	result1, #0 wz
2f268     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2f26c     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2f270     50 00 90 AD |  if_e	jmp	#LR__4706
2f274     1C 26 06 F1 | 	add	local01, #28
2f278     13 39 02 FB | 	rdlong	local10, local01
2f27c     1C 26 86 F1 | 	sub	local01, #28
2f280     18 35 02 F6 | 	mov	local08, local06
2f284     1C 35 02 F1 | 	add	local08, local10
2f288     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2f28c     00 FA 05 56 |  if_ne	mov	result1, #0
2f290                 | ' 
2f290                 | ' 	return 0;
2f290     00 FA 05 A6 |  if_e	mov	result1, #0
2f294     00 FA 0D F2 | 	cmp	result1, #0 wz
2f298     28 00 90 AD |  if_e	jmp	#LR__4706
2f29c     1D 3B 32 F9 | 	getword	local11, local11, #0
2f2a0     08 3A 66 F0 | 	shl	local11, #8
2f2a4     1C 26 06 F1 | 	add	local01, #28
2f2a8     13 41 02 FB | 	rdlong	local14, local01
2f2ac     1C 26 86 F1 | 	sub	local01, #28
2f2b0     18 37 02 F6 | 	mov	local09, local06
2f2b4     20 37 02 F1 | 	add	local09, local14
2f2b8     1B 3D C2 FA | 	rdbyte	local12, local09
2f2bc     1E 3B 42 F5 | 	or	local11, local12
2f2c0     01 30 06 F1 | 	add	local06, #1
2f2c4                 | LR__4706
2f2c4     1D 13 02 F6 | 	mov	arg01, local11
2f2c8     01 00 00 FF 
2f2cc     52 15 06 F6 | 	mov	arg02, ##850
2f2d0     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2f2d4     FD 3A 02 F6 | 	mov	local11, result1
2f2d8     1D 2D 02 F6 | 	mov	local04, local11
2f2dc     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f2e0     00 2E 06 A6 |  if_e	mov	local05, #0
2f2e4     30 00 90 AD |  if_e	jmp	#LR__4707
2f2e8     1D 13 32 F9 | 	getword	arg01, local11, #0
2f2ec     17 15 02 F6 | 	mov	arg02, local05
2f2f0     0C 28 06 F1 | 	add	local02, #12
2f2f4     14 15 02 F1 | 	add	arg02, local02
2f2f8     0C 16 06 F6 | 	mov	arg03, #12
2f2fc     17 17 82 F1 | 	sub	arg03, local05
2f300     0C 28 86 F1 | 	sub	local02, #12
2f304     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2f308     FD 40 0A F6 | 	mov	local14, result1 wz
2f30c     00 2E 06 A6 |  if_e	mov	local05, #0
2f310     20 2F 02 51 |  if_ne	add	local05, local14
2f314     D8 FE 9F 5D |  if_ne	jmp	#LR__4704
2f318                 | LR__4707
2f318     17 2D 02 F6 | 	mov	local04, local05
2f31c     0C 28 06 F1 | 	add	local02, #12
2f320     14 2D 02 F1 | 	add	local04, local02
2f324     16 01 48 FC | 	wrbyte	#0, local04
2f328     10 28 06 F1 | 	add	local02, #16
2f32c     14 2D CA FA | 	rdbyte	local04, local02 wz
2f330     1C 28 86 F1 | 	sub	local02, #28
2f334     F8 00 90 5D |  if_ne	jmp	#LR__4713
2f338     00 2E 0E F2 | 	cmp	local05, #0 wz
2f33c     1C 00 90 5D |  if_ne	jmp	#LR__4708
2f340     17 3F 02 F6 | 	mov	local13, local05
2f344     1C 28 06 F1 | 	add	local02, #28
2f348     14 3F 02 F1 | 	add	local13, local02
2f34c     1F 7F 48 FC | 	wrbyte	#63, local13
2f350     01 2E 06 F1 | 	add	local05, #1
2f354     1C 28 86 F1 | 	sub	local02, #28
2f358     A4 00 90 FD | 	jmp	#LR__4712
2f35c                 | LR__4708
2f35c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2f35c     00 2E 06 F6 | 	mov	local05, #0
2f360     00 30 06 F6 | 	mov	local06, #0
2f364     08 42 06 F6 | 	mov	local15, #8
2f368                 | LR__4709
2f368     18 2D 02 F6 | 	mov	local04, local06
2f36c     0C 28 06 F1 | 	add	local02, #12
2f370     14 2D 02 F1 | 	add	local04, local02
2f374     16 3F CA FA | 	rdbyte	local13, local04 wz
2f378     0C 28 86 F1 | 	sub	local02, #12
2f37c     80 00 90 AD |  if_e	jmp	#LR__4711
2f380     18 35 02 F6 | 	mov	local08, local06
2f384     0C 28 06 F1 | 	add	local02, #12
2f388     14 35 02 F1 | 	add	local08, local02
2f38c     1A 3B C2 FA | 	rdbyte	local11, local08
2f390     1D 41 32 F9 | 	getword	local14, local11, #0
2f394     2E 40 0E F2 | 	cmp	local14, #46 wz
2f398     0C 28 86 F1 | 	sub	local02, #12
2f39c     10 42 06 A6 |  if_e	mov	local15, #16
2f3a0     1D 41 32 F9 | 	getword	local14, local11, #0
2f3a4     41 40 16 F2 | 	cmp	local14, #65 wc
2f3a8     30 00 90 CD |  if_b	jmp	#LR__4710
2f3ac     1D 35 32 F9 | 	getword	local08, local11, #0
2f3b0     5B 34 16 F2 | 	cmp	local08, #91 wc
2f3b4     24 00 90 3D |  if_ae	jmp	#LR__4710
2f3b8     1C 26 06 F1 | 	add	local01, #28
2f3bc     13 37 02 FB | 	rdlong	local09, local01
2f3c0     1C 26 86 F1 | 	sub	local01, #28
2f3c4     0C 36 06 F1 | 	add	local09, #12
2f3c8     1B 39 C2 FA | 	rdbyte	local10, local09
2f3cc     21 41 E2 F8 | 	getbyte	local14, local15, #0
2f3d0     20 39 CA F7 | 	test	local10, local14 wz
2f3d4     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2f3d8     20 3A 06 51 |  if_ne	add	local11, #32
2f3dc                 | LR__4710
2f3dc     17 41 02 F6 | 	mov	local14, local05
2f3e0     1C 28 06 F1 | 	add	local02, #28
2f3e4     14 41 02 F1 | 	add	local14, local02
2f3e8     1D 3B 32 F9 | 	getword	local11, local11, #0
2f3ec     20 3B 42 FC | 	wrbyte	local11, local14
2f3f0     01 30 06 F1 | 	add	local06, #1
2f3f4     01 2E 06 F1 | 	add	local05, #1
2f3f8     1C 28 86 F1 | 	sub	local02, #28
2f3fc     68 FF 9F FD | 	jmp	#LR__4709
2f400                 | LR__4711
2f400                 | LR__4712
2f400     1C 28 06 F1 | 	add	local02, #28
2f404     14 2F 02 F1 | 	add	local05, local02
2f408     17 01 48 FC | 	wrbyte	#0, local05
2f40c     1C 26 06 F1 | 	add	local01, #28
2f410     13 2D 02 FB | 	rdlong	local04, local01
2f414     1C 26 86 F1 | 	sub	local01, #28
2f418     0C 2C 06 F1 | 	add	local04, #12
2f41c     16 3F CA FA | 	rdbyte	local13, local04 wz
2f420     1C 28 86 F1 | 	sub	local02, #28
2f424     0C 28 06 A1 |  if_e	add	local02, #12
2f428     14 01 48 AC |  if_e	wrbyte	#0, local02
2f42c     0C 28 86 A1 |  if_e	sub	local02, #12
2f430                 | LR__4713
2f430     1C 26 06 F1 | 	add	local01, #28
2f434     13 3D 02 FB | 	rdlong	local12, local01
2f438     0B 3C 06 F1 | 	add	local12, #11
2f43c     1E 2D C2 FA | 	rdbyte	local04, local12
2f440     3F 2C 06 F5 | 	and	local04, #63
2f444     08 28 06 F1 | 	add	local02, #8
2f448     14 2D 42 FC | 	wrbyte	local04, local02
2f44c     08 28 86 F1 | 	sub	local02, #8
2f450     13 13 02 FB | 	rdlong	arg01, local01
2f454     1C 12 06 F1 | 	add	arg01, #28
2f458                 | ' {
2f458                 | ' 
2f458                 | ' 	return *((DWORD*)ptr);
2f458     09 FB 01 FB | 	rdlong	result1, arg01
2f45c     14 FB 61 FC | 	wrlong	result1, local02
2f460     13 13 02 FB | 	rdlong	arg01, local01
2f464     16 12 06 F1 | 	add	arg01, #22
2f468                 | ' {
2f468                 | ' 
2f468                 | ' 	return *((WORD*)ptr);
2f468     09 FB E1 FA | 	rdword	result1, arg01
2f46c     06 28 06 F1 | 	add	local02, #6
2f470     14 FB 51 FC | 	wrword	result1, local02
2f474     13 13 02 FB | 	rdlong	arg01, local01
2f478     18 12 06 F1 | 	add	arg01, #24
2f47c                 | ' {
2f47c                 | ' 
2f47c                 | ' 	return *((WORD*)ptr);
2f47c     09 FB E1 FA | 	rdword	result1, arg01
2f480     02 28 86 F1 | 	sub	local02, #2
2f484     14 FB 51 FC | 	wrword	result1, local02
2f488                 | LR__4714
2f488     A7 F0 03 F6 | 	mov	ptra, fp
2f48c     B2 00 A0 FD | 	call	#popregs_
2f490                 | _fatfs_cc_get_fileinfo_ret
2f490     2D 00 64 FD | 	ret
2f494                 | 
2f494                 | _fatfs_cc_create_name
2f494     0D 4A 05 F6 | 	mov	COUNT_, #13
2f498     A8 00 A0 FD | 	call	#pushregs_
2f49c     34 F0 07 F1 | 	add	ptra, #52
2f4a0     04 4E 05 F1 | 	add	fp, #4
2f4a4     A7 12 62 FC | 	wrlong	arg01, fp
2f4a8     04 4E 05 F1 | 	add	fp, #4
2f4ac     A7 14 62 FC | 	wrlong	arg02, fp
2f4b0     0A FB 01 FB | 	rdlong	result1, arg02
2f4b4     28 4E 05 F1 | 	add	fp, #40
2f4b8     A7 FA 61 FC | 	wrlong	result1, fp
2f4bc     2C 4E 85 F1 | 	sub	fp, #44
2f4c0     A7 FA 01 FB | 	rdlong	result1, fp
2f4c4     FD 26 02 FB | 	rdlong	local01, result1
2f4c8     0C 26 06 F1 | 	add	local01, #12
2f4cc     13 29 02 FB | 	rdlong	local02, local01
2f4d0     14 4E 05 F1 | 	add	fp, #20
2f4d4     A7 28 62 FC | 	wrlong	local02, fp
2f4d8     14 4E 05 F1 | 	add	fp, #20
2f4dc     A7 00 68 FC | 	wrlong	#0, fp
2f4e0     2C 4E 85 F1 | 	sub	fp, #44
2f4e4                 | ' 
2f4e4                 | ' 
2f4e4                 | ' 
2f4e4                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2f4e4                 | ' 	for (;;) {
2f4e4                 | LR__4720
2f4e4     30 4E 05 F1 | 	add	fp, #48
2f4e8     A7 12 02 F6 | 	mov	arg01, fp
2f4ec     30 4E 85 F1 | 	sub	fp, #48
2f4f0     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2f4f4     1C 4E 05 F1 | 	add	fp, #28
2f4f8     A7 FA 61 FC | 	wrlong	result1, fp
2f4fc     1C 4E 85 F1 | 	sub	fp, #28
2f500     FF FF 7F FF 
2f504     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2f508     06 FA 05 A6 |  if_e	mov	result1, #6
2f50c     74 08 90 AD |  if_e	jmp	#LR__4760
2f510     1C 4E 05 F1 | 	add	fp, #28
2f514     A7 26 02 FB | 	rdlong	local01, fp
2f518     1C 4E 85 F1 | 	sub	fp, #28
2f51c     80 00 00 FF 
2f520     00 26 16 F2 | 	cmp	local01, ##65536 wc
2f524     3C 00 90 CD |  if_b	jmp	#LR__4721
2f528     18 4E 05 F1 | 	add	fp, #24
2f52c     A7 2A 02 FB | 	rdlong	local03, fp
2f530     14 4E 05 F1 | 	add	fp, #20
2f534     A7 26 02 FB | 	rdlong	local01, fp
2f538     13 2D 02 F6 | 	mov	local04, local01
2f53c     01 2C 06 F1 | 	add	local04, #1
2f540     A7 2C 62 FC | 	wrlong	local04, fp
2f544     01 26 66 F0 | 	shl	local01, #1
2f548     15 27 02 F1 | 	add	local01, local03
2f54c     10 4E 85 F1 | 	sub	fp, #16
2f550     A7 2E 02 FB | 	rdlong	local05, fp
2f554     1C 4E 85 F1 | 	sub	fp, #28
2f558     17 31 02 F6 | 	mov	local06, local05
2f55c     10 30 46 F0 | 	shr	local06, #16
2f560     13 31 52 FC | 	wrword	local06, local01
2f564                 | LR__4721
2f564     1C 4E 05 F1 | 	add	fp, #28
2f568     A7 26 02 FB | 	rdlong	local01, fp
2f56c     08 4E 85 F1 | 	sub	fp, #8
2f570     A7 26 52 FC | 	wrword	local01, fp
2f574     A7 26 E2 FA | 	rdword	local01, fp
2f578     14 4E 85 F1 | 	sub	fp, #20
2f57c     20 26 16 F2 | 	cmp	local01, #32 wc
2f580     B0 00 90 CD |  if_b	jmp	#LR__4723
2f584     14 4E 05 F1 | 	add	fp, #20
2f588     A7 26 E2 FA | 	rdword	local01, fp
2f58c     14 4E 85 F1 | 	sub	fp, #20
2f590     2F 26 0E F2 | 	cmp	local01, #47 wz
2f594     14 4E 05 51 |  if_ne	add	fp, #20
2f598     A7 2C E2 5A |  if_ne	rdword	local04, fp
2f59c     14 4E 85 51 |  if_ne	sub	fp, #20
2f5a0     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2f5a4     8C 00 90 AD |  if_e	jmp	#LR__4723
2f5a8     14 4E 05 F1 | 	add	fp, #20
2f5ac     A7 12 E2 FA | 	rdword	arg01, fp
2f5b0     14 4E 85 F1 | 	sub	fp, #20
2f5b4     80 12 16 F2 | 	cmp	arg01, #128 wc
2f5b8     24 00 90 3D |  if_ae	jmp	#LR__4722
2f5bc     AA 01 00 FF 
2f5c0     F8 12 06 F6 | 	mov	arg01, ##@LR__5382
2f5c4     14 4E 05 F1 | 	add	fp, #20
2f5c8     A7 14 E2 FA | 	rdword	arg02, fp
2f5cc     14 4E 85 F1 | 	sub	fp, #20
2f5d0     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2f5d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f5d8     06 FA 05 56 |  if_ne	mov	result1, #6
2f5dc     A4 07 90 5D |  if_ne	jmp	#LR__4760
2f5e0                 | LR__4722
2f5e0     2C 4E 05 F1 | 	add	fp, #44
2f5e4     A7 30 02 FB | 	rdlong	local06, fp
2f5e8     2C 4E 85 F1 | 	sub	fp, #44
2f5ec     FF 30 16 F2 | 	cmp	local06, #255 wc
2f5f0     06 FA 05 36 |  if_ae	mov	result1, #6
2f5f4     8C 07 90 3D |  if_ae	jmp	#LR__4760
2f5f8     18 4E 05 F1 | 	add	fp, #24
2f5fc     A7 2A 02 FB | 	rdlong	local03, fp
2f600     14 4E 05 F1 | 	add	fp, #20
2f604     A7 28 02 FB | 	rdlong	local02, fp
2f608     14 2D 02 F6 | 	mov	local04, local02
2f60c     01 2C 06 F1 | 	add	local04, #1
2f610     A7 2C 62 FC | 	wrlong	local04, fp
2f614     14 27 02 F6 | 	mov	local01, local02
2f618     01 26 66 F0 | 	shl	local01, #1
2f61c     15 27 02 F1 | 	add	local01, local03
2f620     18 4E 85 F1 | 	sub	fp, #24
2f624     A7 30 E2 FA | 	rdword	local06, fp
2f628     14 4E 85 F1 | 	sub	fp, #20
2f62c     13 31 52 FC | 	wrword	local06, local01
2f630     B0 FE 9F FD | 	jmp	#LR__4720
2f634                 | LR__4723
2f634     14 4E 05 F1 | 	add	fp, #20
2f638     A7 32 E2 FA | 	rdword	local07, fp
2f63c     14 4E 85 F1 | 	sub	fp, #20
2f640     20 32 16 F2 | 	cmp	local07, #32 wc
2f644     10 4E 05 C1 |  if_b	add	fp, #16
2f648     A7 08 48 CC |  if_b	wrbyte	#4, fp
2f64c     10 4E 85 C1 |  if_b	sub	fp, #16
2f650     74 00 90 CD |  if_b	jmp	#LR__4728
2f654     97 24 48 FB | 	callpa	#(@LR__4726-@LR__4724)>>2,fcache_load_ptr_
2f658                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2f658                 | LR__4724
2f658     30 4E 05 F1 | 	add	fp, #48
2f65c     A7 2C 02 FB | 	rdlong	local04, fp
2f660     30 4E 85 F1 | 	sub	fp, #48
2f664     16 33 C2 FA | 	rdbyte	local07, local04
2f668     2F 32 0E F2 | 	cmp	local07, #47 wz
2f66c     18 00 90 AD |  if_e	jmp	#LR__4725
2f670     30 4E 05 F1 | 	add	fp, #48
2f674     A7 2C 02 FB | 	rdlong	local04, fp
2f678     30 4E 85 F1 | 	sub	fp, #48
2f67c     16 29 C2 FA | 	rdbyte	local02, local04
2f680     5C 28 0E F2 | 	cmp	local02, #92 wz
2f684     18 00 90 5D |  if_ne	jmp	#LR__4727
2f688                 | LR__4725
2f688     30 4E 05 F1 | 	add	fp, #48
2f68c     A7 26 02 FB | 	rdlong	local01, fp
2f690     01 26 06 F1 | 	add	local01, #1
2f694     A7 26 62 FC | 	wrlong	local01, fp
2f698     30 4E 85 F1 | 	sub	fp, #48
2f69c     B8 FF 9F FD | 	jmp	#LR__4724
2f6a0                 | LR__4726
2f6a0                 | LR__4727
2f6a0     10 4E 05 F1 | 	add	fp, #16
2f6a4     A7 00 48 FC | 	wrbyte	#0, fp
2f6a8     20 4E 05 F1 | 	add	fp, #32
2f6ac     A7 30 02 FB | 	rdlong	local06, fp
2f6b0     30 4E 85 F1 | 	sub	fp, #48
2f6b4     18 33 C2 FA | 	rdbyte	local07, local06
2f6b8     20 32 16 F2 | 	cmp	local07, #32 wc
2f6bc     10 4E 05 C1 |  if_b	add	fp, #16
2f6c0     A7 08 48 CC |  if_b	wrbyte	#4, fp
2f6c4     10 4E 85 C1 |  if_b	sub	fp, #16
2f6c8                 | LR__4728
2f6c8     08 4E 05 F1 | 	add	fp, #8
2f6cc     A7 32 02 FB | 	rdlong	local07, fp
2f6d0     28 4E 05 F1 | 	add	fp, #40
2f6d4     A7 26 02 FB | 	rdlong	local01, fp
2f6d8     30 4E 85 F1 | 	sub	fp, #48
2f6dc     19 27 62 FC | 	wrlong	local01, local07
2f6e0     97 38 48 FB | 	callpa	#(@LR__4730-@LR__4729)>>2,fcache_load_ptr_
2f6e4                 | ' 	}
2f6e4                 | ' 	*path = p;
2f6e4                 | ' #line 2862 "ff.c"
2f6e4                 | ' 	while (di) {
2f6e4                 | LR__4729
2f6e4     2C 4E 05 F1 | 	add	fp, #44
2f6e8     A7 32 0A FB | 	rdlong	local07, fp wz
2f6ec     2C 4E 85 F1 | 	sub	fp, #44
2f6f0     60 00 90 AD |  if_e	jmp	#LR__4731
2f6f4     18 4E 05 F1 | 	add	fp, #24
2f6f8     A7 30 02 FB | 	rdlong	local06, fp
2f6fc     14 4E 05 F1 | 	add	fp, #20
2f700     A7 2C 02 FB | 	rdlong	local04, fp
2f704     01 2C 86 F1 | 	sub	local04, #1
2f708     01 2C 66 F0 | 	shl	local04, #1
2f70c     18 2D 02 F1 | 	add	local04, local06
2f710     16 31 E2 FA | 	rdword	local06, local04
2f714     18 4E 85 F1 | 	sub	fp, #24
2f718     A7 30 52 FC | 	wrword	local06, fp
2f71c     A7 32 E2 FA | 	rdword	local07, fp
2f720     14 4E 85 F1 | 	sub	fp, #20
2f724     20 32 0E F2 | 	cmp	local07, #32 wz
2f728     14 4E 05 51 |  if_ne	add	fp, #20
2f72c     A7 26 E2 5A |  if_ne	rdword	local01, fp
2f730     14 4E 85 51 |  if_ne	sub	fp, #20
2f734     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2f738     18 00 90 5D |  if_ne	jmp	#LR__4731
2f73c     2C 4E 05 F1 | 	add	fp, #44
2f740     A7 26 02 FB | 	rdlong	local01, fp
2f744     01 26 86 F1 | 	sub	local01, #1
2f748     A7 26 62 FC | 	wrlong	local01, fp
2f74c     2C 4E 85 F1 | 	sub	fp, #44
2f750     90 FF 9F FD | 	jmp	#LR__4729
2f754                 | LR__4730
2f754                 | LR__4731
2f754     18 4E 05 F1 | 	add	fp, #24
2f758     A7 34 02 FB | 	rdlong	local08, fp
2f75c     14 4E 05 F1 | 	add	fp, #20
2f760     A7 2C 02 FB | 	rdlong	local04, fp
2f764     01 2C 66 F0 | 	shl	local04, #1
2f768     1A 2D 02 F1 | 	add	local04, local08
2f76c     16 01 58 FC | 	wrword	#0, local04
2f770     A7 32 0A FB | 	rdlong	local07, fp wz
2f774     2C 4E 85 F1 | 	sub	fp, #44
2f778     06 FA 05 A6 |  if_e	mov	result1, #6
2f77c     04 06 90 AD |  if_e	jmp	#LR__4760
2f780                 | ' 
2f780                 | ' 
2f780                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2f780     28 4E 05 F1 | 	add	fp, #40
2f784     A7 00 68 FC | 	wrlong	#0, fp
2f788     28 4E 85 F1 | 	sub	fp, #40
2f78c     97 22 48 FB | 	callpa	#(@LR__4733-@LR__4732)>>2,fcache_load_ptr_
2f790                 | LR__4732
2f790     18 4E 05 F1 | 	add	fp, #24
2f794     A7 36 02 FB | 	rdlong	local09, fp
2f798     10 4E 05 F1 | 	add	fp, #16
2f79c     A7 38 02 FB | 	rdlong	local10, fp
2f7a0     28 4E 85 F1 | 	sub	fp, #40
2f7a4     01 38 66 F0 | 	shl	local10, #1
2f7a8     1B 39 02 F1 | 	add	local10, local09
2f7ac     1C 3B E2 FA | 	rdword	local11, local10
2f7b0     20 3A 0E F2 | 	cmp	local11, #32 wz
2f7b4     1C 00 90 5D |  if_ne	jmp	#LR__4734
2f7b8     28 4E 05 F1 | 	add	fp, #40
2f7bc     A7 3C 02 FB | 	rdlong	local12, fp
2f7c0     1E 2F 02 F6 | 	mov	local05, local12
2f7c4     01 2E 06 F1 | 	add	local05, #1
2f7c8     A7 2E 62 FC | 	wrlong	local05, fp
2f7cc     28 4E 85 F1 | 	sub	fp, #40
2f7d0     BC FF 9F FD | 	jmp	#LR__4732
2f7d4                 | LR__4733
2f7d4                 | LR__4734
2f7d4     28 4E 05 F1 | 	add	fp, #40
2f7d8     A7 32 02 FB | 	rdlong	local07, fp
2f7dc     28 4E 85 F1 | 	sub	fp, #40
2f7e0     01 32 16 F2 | 	cmp	local07, #1 wc
2f7e4     28 00 90 3D |  if_ae	jmp	#LR__4735
2f7e8     18 4E 05 F1 | 	add	fp, #24
2f7ec     A7 2A 02 FB | 	rdlong	local03, fp
2f7f0     10 4E 05 F1 | 	add	fp, #16
2f7f4     A7 36 02 FB | 	rdlong	local09, fp
2f7f8     28 4E 85 F1 | 	sub	fp, #40
2f7fc     01 36 66 F0 | 	shl	local09, #1
2f800     15 37 02 F1 | 	add	local09, local03
2f804     1B 27 E2 FA | 	rdword	local01, local09
2f808     2E 26 0E F2 | 	cmp	local01, #46 wz
2f80c     14 00 90 5D |  if_ne	jmp	#LR__4736
2f810                 | LR__4735
2f810     10 4E 05 F1 | 	add	fp, #16
2f814     A7 32 C2 FA | 	rdbyte	local07, fp
2f818     03 32 46 F5 | 	or	local07, #3
2f81c     A7 32 42 FC | 	wrbyte	local07, fp
2f820     10 4E 85 F1 | 	sub	fp, #16
2f824                 | LR__4736
2f824     97 2C 48 FB | 	callpa	#(@LR__4738-@LR__4737)>>2,fcache_load_ptr_
2f828                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2f828                 | LR__4737
2f828     2C 4E 05 F1 | 	add	fp, #44
2f82c     A7 32 02 FB | 	rdlong	local07, fp
2f830     2C 4E 85 F1 | 	sub	fp, #44
2f834     01 32 16 F2 | 	cmp	local07, #1 wc
2f838     44 00 90 CD |  if_b	jmp	#LR__4739
2f83c     18 4E 05 F1 | 	add	fp, #24
2f840     A7 30 02 FB | 	rdlong	local06, fp
2f844     14 4E 05 F1 | 	add	fp, #20
2f848     A7 2A 02 FB | 	rdlong	local03, fp
2f84c     2C 4E 85 F1 | 	sub	fp, #44
2f850     01 2A 86 F1 | 	sub	local03, #1
2f854     01 2A 66 F0 | 	shl	local03, #1
2f858     18 2B 02 F1 | 	add	local03, local06
2f85c     15 27 E2 FA | 	rdword	local01, local03
2f860     2E 26 0E F2 | 	cmp	local01, #46 wz
2f864     18 00 90 AD |  if_e	jmp	#LR__4739
2f868     2C 4E 05 F1 | 	add	fp, #44
2f86c     A7 26 02 FB | 	rdlong	local01, fp
2f870     01 26 86 F1 | 	sub	local01, #1
2f874     A7 26 62 FC | 	wrlong	local01, fp
2f878     2C 4E 85 F1 | 	sub	fp, #44
2f87c     A8 FF 9F FD | 	jmp	#LR__4737
2f880                 | LR__4738
2f880                 | LR__4739
2f880     04 4E 05 F1 | 	add	fp, #4
2f884     A7 12 02 FB | 	rdlong	arg01, fp
2f888     04 4E 85 F1 | 	sub	fp, #4
2f88c     20 12 06 F1 | 	add	arg01, #32
2f890     20 14 06 F6 | 	mov	arg02, #32
2f894     0B 16 06 F6 | 	mov	arg03, #11
2f898     09 3F 02 F6 | 	mov	local13, arg01
2f89c     98 00 A0 FD | 	call	#\builtin_bytefill_
2f8a0     1F FB 01 F6 | 	mov	result1, local13
2f8a4     0C 4E 05 F1 | 	add	fp, #12
2f8a8     A7 00 48 FC | 	wrbyte	#0, fp
2f8ac     A7 32 C2 FA | 	rdbyte	local07, fp
2f8b0     14 4E 05 F1 | 	add	fp, #20
2f8b4     A7 32 62 FC | 	wrlong	local07, fp
2f8b8     04 4E 05 F1 | 	add	fp, #4
2f8bc     A7 10 68 FC | 	wrlong	#8, fp
2f8c0     24 4E 85 F1 | 	sub	fp, #36
2f8c4                 | ' 
2f8c4                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2f8c4                 | ' 	i = b = 0; ni = 8;
2f8c4                 | ' 	for (;;) {
2f8c4                 | LR__4740
2f8c4     18 4E 05 F1 | 	add	fp, #24
2f8c8     A7 2A 02 FB | 	rdlong	local03, fp
2f8cc     10 4E 05 F1 | 	add	fp, #16
2f8d0     A7 36 02 FB | 	rdlong	local09, fp
2f8d4     1B 2D 02 F6 | 	mov	local04, local09
2f8d8     01 2C 06 F1 | 	add	local04, #1
2f8dc     A7 2C 62 FC | 	wrlong	local04, fp
2f8e0     01 36 66 F0 | 	shl	local09, #1
2f8e4     15 37 02 F1 | 	add	local09, local03
2f8e8     1B 31 E2 FA | 	rdword	local06, local09
2f8ec     14 4E 85 F1 | 	sub	fp, #20
2f8f0     A7 30 52 FC | 	wrword	local06, fp
2f8f4     A7 32 EA FA | 	rdword	local07, fp wz
2f8f8     14 4E 85 F1 | 	sub	fp, #20
2f8fc     74 03 90 AD |  if_e	jmp	#LR__4756
2f900     14 4E 05 F1 | 	add	fp, #20
2f904     A7 32 E2 FA | 	rdword	local07, fp
2f908     14 4E 85 F1 | 	sub	fp, #20
2f90c     20 32 0E F2 | 	cmp	local07, #32 wz
2f910     30 00 90 AD |  if_e	jmp	#LR__4741
2f914     14 4E 05 F1 | 	add	fp, #20
2f918     A7 26 E2 FA | 	rdword	local01, fp
2f91c     14 4E 85 F1 | 	sub	fp, #20
2f920     2E 26 0E F2 | 	cmp	local01, #46 wz
2f924     34 00 90 5D |  if_ne	jmp	#LR__4742
2f928     28 4E 05 F1 | 	add	fp, #40
2f92c     A7 2C 02 FB | 	rdlong	local04, fp
2f930     04 4E 05 F1 | 	add	fp, #4
2f934     A7 38 02 FB | 	rdlong	local10, fp
2f938     2C 4E 85 F1 | 	sub	fp, #44
2f93c     1C 2D 0A F2 | 	cmp	local04, local10 wz
2f940     18 00 90 AD |  if_e	jmp	#LR__4742
2f944                 | LR__4741
2f944     10 4E 05 F1 | 	add	fp, #16
2f948     A7 32 C2 FA | 	rdbyte	local07, fp
2f94c     03 32 46 F5 | 	or	local07, #3
2f950     A7 32 42 FC | 	wrbyte	local07, fp
2f954     10 4E 85 F1 | 	sub	fp, #16
2f958                 | ' 			cf |=  0x01  |  0x02 ;
2f958                 | ' 			continue;
2f958     68 FF 9F FD | 	jmp	#LR__4740
2f95c                 | LR__4742
2f95c     20 4E 05 F1 | 	add	fp, #32
2f960     A7 32 02 FB | 	rdlong	local07, fp
2f964     04 4E 05 F1 | 	add	fp, #4
2f968     A7 26 02 FB | 	rdlong	local01, fp
2f96c     24 4E 85 F1 | 	sub	fp, #36
2f970     13 33 12 F2 | 	cmp	local07, local01 wc
2f974     1C 00 90 3D |  if_ae	jmp	#LR__4743
2f978     28 4E 05 F1 | 	add	fp, #40
2f97c     A7 34 02 FB | 	rdlong	local08, fp
2f980     04 4E 05 F1 | 	add	fp, #4
2f984     A7 38 02 FB | 	rdlong	local10, fp
2f988     2C 4E 85 F1 | 	sub	fp, #44
2f98c     1C 35 0A F2 | 	cmp	local08, local10 wz
2f990     B0 00 90 5D |  if_ne	jmp	#LR__4745
2f994                 | LR__4743
2f994     24 4E 05 F1 | 	add	fp, #36
2f998     A7 32 02 FB | 	rdlong	local07, fp
2f99c     24 4E 85 F1 | 	sub	fp, #36
2f9a0     0B 32 0E F2 | 	cmp	local07, #11 wz
2f9a4     18 00 90 5D |  if_ne	jmp	#LR__4744
2f9a8     10 4E 05 F1 | 	add	fp, #16
2f9ac     A7 32 C2 FA | 	rdbyte	local07, fp
2f9b0     03 32 46 F5 | 	or	local07, #3
2f9b4     A7 32 42 FC | 	wrbyte	local07, fp
2f9b8     10 4E 85 F1 | 	sub	fp, #16
2f9bc                 | ' 				cf |=  0x01  |  0x02 ;
2f9bc                 | ' 				break;
2f9bc     B4 02 90 FD | 	jmp	#LR__4756
2f9c0                 | LR__4744
2f9c0     28 4E 05 F1 | 	add	fp, #40
2f9c4     A7 32 02 FB | 	rdlong	local07, fp
2f9c8     04 4E 05 F1 | 	add	fp, #4
2f9cc     A7 26 02 FB | 	rdlong	local01, fp
2f9d0     2C 4E 85 F1 | 	sub	fp, #44
2f9d4     13 33 0A F2 | 	cmp	local07, local01 wz
2f9d8     10 4E 05 51 |  if_ne	add	fp, #16
2f9dc     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2f9e0     03 32 46 55 |  if_ne	or	local07, #3
2f9e4     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2f9e8     10 4E 85 51 |  if_ne	sub	fp, #16
2f9ec     28 4E 05 F1 | 	add	fp, #40
2f9f0     A7 32 02 FB | 	rdlong	local07, fp
2f9f4     04 4E 05 F1 | 	add	fp, #4
2f9f8     A7 28 02 FB | 	rdlong	local02, fp
2f9fc     2C 4E 85 F1 | 	sub	fp, #44
2fa00     14 33 1A F2 | 	cmp	local07, local02 wcz
2fa04     6C 02 90 1D |  if_a	jmp	#LR__4756
2fa08     2C 4E 05 F1 | 	add	fp, #44
2fa0c     A7 32 02 FB | 	rdlong	local07, fp
2fa10     04 4E 85 F1 | 	sub	fp, #4
2fa14     A7 32 62 FC | 	wrlong	local07, fp
2fa18     08 4E 85 F1 | 	sub	fp, #8
2fa1c     A7 10 68 FC | 	wrlong	#8, fp
2fa20     04 4E 05 F1 | 	add	fp, #4
2fa24     A7 16 68 FC | 	wrlong	#11, fp
2fa28     18 4E 85 F1 | 	sub	fp, #24
2fa2c     A7 3A C2 FA | 	rdbyte	local11, fp
2fa30     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2fa34     02 32 66 F0 | 	shl	local07, #2
2fa38     A7 32 42 FC | 	wrbyte	local07, fp
2fa3c     0C 4E 85 F1 | 	sub	fp, #12
2fa40                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2fa40                 | ' 			continue;
2fa40     80 FE 9F FD | 	jmp	#LR__4740
2fa44                 | LR__4745
2fa44     14 4E 05 F1 | 	add	fp, #20
2fa48     A7 32 E2 FA | 	rdword	local07, fp
2fa4c     14 4E 85 F1 | 	sub	fp, #20
2fa50     80 32 16 F2 | 	cmp	local07, #128 wc
2fa54     6C 00 90 CD |  if_b	jmp	#LR__4747
2fa58     10 4E 05 F1 | 	add	fp, #16
2fa5c     A7 32 C2 FA | 	rdbyte	local07, fp
2fa60     02 32 46 F5 | 	or	local07, #2
2fa64     A7 32 42 FC | 	wrbyte	local07, fp
2fa68     04 4E 05 F1 | 	add	fp, #4
2fa6c     A7 12 E2 FA | 	rdword	arg01, fp
2fa70     14 4E 85 F1 | 	sub	fp, #20
2fa74     01 00 00 FF 
2fa78     52 15 06 F6 | 	mov	arg02, ##850
2fa7c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2fa80     14 4E 05 F1 | 	add	fp, #20
2fa84     A7 FA 51 FC | 	wrword	result1, fp
2fa88     A7 32 E2 FA | 	rdword	local07, fp
2fa8c     14 4E 85 F1 | 	sub	fp, #20
2fa90     80 32 CE F7 | 	test	local07, #128 wz
2fa94     2C 00 90 AD |  if_e	jmp	#LR__4746
2fa98     14 4E 05 F1 | 	add	fp, #20
2fa9c     A7 28 E2 FA | 	rdword	local02, fp
2faa0     7F 28 06 F5 | 	and	local02, #127
2faa4     01 00 00 FF 
2faa8     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2faac     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2fab0     14 33 C2 FA | 	rdbyte	local07, local02
2fab4     A7 32 52 FC | 	wrword	local07, fp
2fab8     14 4E 85 F1 | 	sub	fp, #20
2fabc     01 00 00 FF 
2fac0     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2fac4                 | LR__4746
2fac4                 | LR__4747
2fac4     14 4E 05 F1 | 	add	fp, #20
2fac8     A7 32 E2 FA | 	rdword	local07, fp
2facc     14 4E 85 F1 | 	sub	fp, #20
2fad0     00 33 16 F2 | 	cmp	local07, #256 wc
2fad4     88 00 90 CD |  if_b	jmp	#LR__4749
2fad8     24 4E 05 F1 | 	add	fp, #36
2fadc     A7 32 02 FB | 	rdlong	local07, fp
2fae0     01 32 86 F1 | 	sub	local07, #1
2fae4     04 4E 85 F1 | 	sub	fp, #4
2fae8     A7 28 02 FB | 	rdlong	local02, fp
2faec     20 4E 85 F1 | 	sub	fp, #32
2faf0     19 29 12 F2 | 	cmp	local02, local07 wc
2faf4     2C 00 90 CD |  if_b	jmp	#LR__4748
2faf8     10 4E 05 F1 | 	add	fp, #16
2fafc     A7 3A C2 FA | 	rdbyte	local11, fp
2fb00     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2fb04     03 32 46 F5 | 	or	local07, #3
2fb08     A7 32 42 FC | 	wrbyte	local07, fp
2fb0c     14 4E 05 F1 | 	add	fp, #20
2fb10     A7 32 02 FB | 	rdlong	local07, fp
2fb14     04 4E 85 F1 | 	sub	fp, #4
2fb18     A7 32 62 FC | 	wrlong	local07, fp
2fb1c     20 4E 85 F1 | 	sub	fp, #32
2fb20                 | ' 				cf |=  0x01  |  0x02 ;
2fb20                 | ' 				i = ni; continue;
2fb20     A0 FD 9F FD | 	jmp	#LR__4740
2fb24                 | LR__4748
2fb24     04 4E 05 F1 | 	add	fp, #4
2fb28     A7 36 02 FB | 	rdlong	local09, fp
2fb2c     1C 4E 05 F1 | 	add	fp, #28
2fb30     A7 38 02 FB | 	rdlong	local10, fp
2fb34     1C 2D 02 F6 | 	mov	local04, local10
2fb38     01 2C 06 F1 | 	add	local04, #1
2fb3c     A7 2C 62 FC | 	wrlong	local04, fp
2fb40     20 36 06 F1 | 	add	local09, #32
2fb44     1B 39 02 F1 | 	add	local10, local09
2fb48     0C 4E 85 F1 | 	sub	fp, #12
2fb4c     A7 2A E2 FA | 	rdword	local03, fp
2fb50     14 4E 85 F1 | 	sub	fp, #20
2fb54     08 2A 46 F0 | 	shr	local03, #8
2fb58     1C 2B 42 FC | 	wrbyte	local03, local10
2fb5c     D4 00 90 FD | 	jmp	#LR__4755
2fb60                 | LR__4749
2fb60     14 4E 05 F1 | 	add	fp, #20
2fb64     A7 32 EA FA | 	rdword	local07, fp wz
2fb68     14 4E 85 F1 | 	sub	fp, #20
2fb6c     20 00 90 AD |  if_e	jmp	#LR__4750
2fb70     AA 01 00 FF 
2fb74     01 13 06 F6 | 	mov	arg01, ##@LR__5383
2fb78     14 4E 05 F1 | 	add	fp, #20
2fb7c     A7 14 E2 FA | 	rdword	arg02, fp
2fb80     14 4E 85 F1 | 	sub	fp, #20
2fb84     48 CB BF FD | 	call	#_fatfs_cc_strchr
2fb88     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb8c     20 00 90 AD |  if_e	jmp	#LR__4751
2fb90                 | LR__4750
2fb90     14 4E 05 F1 | 	add	fp, #20
2fb94     A7 BE 58 FC | 	wrword	#95, fp
2fb98     04 4E 85 F1 | 	sub	fp, #4
2fb9c     A7 32 C2 FA | 	rdbyte	local07, fp
2fba0     03 32 46 F5 | 	or	local07, #3
2fba4     A7 32 42 FC | 	wrbyte	local07, fp
2fba8     10 4E 85 F1 | 	sub	fp, #16
2fbac     84 00 90 FD | 	jmp	#LR__4754
2fbb0                 | LR__4751
2fbb0     14 4E 05 F1 | 	add	fp, #20
2fbb4     A7 32 E2 FA | 	rdword	local07, fp
2fbb8     14 4E 85 F1 | 	sub	fp, #20
2fbbc     41 32 16 F2 | 	cmp	local07, #65 wc
2fbc0     24 00 90 CD |  if_b	jmp	#LR__4752
2fbc4     14 4E 05 F1 | 	add	fp, #20
2fbc8     A7 26 E2 FA | 	rdword	local01, fp
2fbcc     14 4E 85 F1 | 	sub	fp, #20
2fbd0     5B 26 16 F2 | 	cmp	local01, #91 wc
2fbd4     0C 4E 05 C1 |  if_b	add	fp, #12
2fbd8     A7 32 C2 CA |  if_b	rdbyte	local07, fp
2fbdc     02 32 46 C5 |  if_b	or	local07, #2
2fbe0     A7 32 42 CC |  if_b	wrbyte	local07, fp
2fbe4     0C 4E 85 C1 |  if_b	sub	fp, #12
2fbe8                 | LR__4752
2fbe8     14 4E 05 F1 | 	add	fp, #20
2fbec     A7 32 E2 FA | 	rdword	local07, fp
2fbf0     14 4E 85 F1 | 	sub	fp, #20
2fbf4     61 32 16 F2 | 	cmp	local07, #97 wc
2fbf8     38 00 90 CD |  if_b	jmp	#LR__4753
2fbfc     14 4E 05 F1 | 	add	fp, #20
2fc00     A7 26 E2 FA | 	rdword	local01, fp
2fc04     14 4E 85 F1 | 	sub	fp, #20
2fc08     7B 26 16 F2 | 	cmp	local01, #123 wc
2fc0c     24 00 90 3D |  if_ae	jmp	#LR__4753
2fc10     0C 4E 05 F1 | 	add	fp, #12
2fc14     A7 32 C2 FA | 	rdbyte	local07, fp
2fc18     01 32 46 F5 | 	or	local07, #1
2fc1c     A7 32 42 FC | 	wrbyte	local07, fp
2fc20     08 4E 05 F1 | 	add	fp, #8
2fc24     A7 32 E2 FA | 	rdword	local07, fp
2fc28     20 32 86 F1 | 	sub	local07, #32
2fc2c     A7 32 52 FC | 	wrword	local07, fp
2fc30     14 4E 85 F1 | 	sub	fp, #20
2fc34                 | LR__4753
2fc34                 | LR__4754
2fc34                 | LR__4755
2fc34     04 4E 05 F1 | 	add	fp, #4
2fc38     A7 3A 02 FB | 	rdlong	local11, fp
2fc3c     1D 37 02 F6 | 	mov	local09, local11
2fc40     1C 4E 05 F1 | 	add	fp, #28
2fc44     A7 28 02 FB | 	rdlong	local02, fp
2fc48     14 2D 02 F6 | 	mov	local04, local02
2fc4c     01 2C 06 F1 | 	add	local04, #1
2fc50     A7 2C 62 FC | 	wrlong	local04, fp
2fc54     14 39 02 F6 | 	mov	local10, local02
2fc58     20 36 06 F1 | 	add	local09, #32
2fc5c     1B 39 02 F1 | 	add	local10, local09
2fc60     0C 4E 85 F1 | 	sub	fp, #12
2fc64     A7 2A E2 FA | 	rdword	local03, fp
2fc68     14 4E 85 F1 | 	sub	fp, #20
2fc6c     1C 2B 42 FC | 	wrbyte	local03, local10
2fc70     50 FC 9F FD | 	jmp	#LR__4740
2fc74                 | LR__4756
2fc74     04 4E 05 F1 | 	add	fp, #4
2fc78     A7 3A 02 FB | 	rdlong	local11, fp
2fc7c     04 4E 85 F1 | 	sub	fp, #4
2fc80     20 3A 06 F1 | 	add	local11, #32
2fc84     1D 33 C2 FA | 	rdbyte	local07, local11
2fc88     E5 32 0E F2 | 	cmp	local07, #229 wz
2fc8c     04 4E 05 A1 |  if_e	add	fp, #4
2fc90     A7 32 02 AB |  if_e	rdlong	local07, fp
2fc94     04 4E 85 A1 |  if_e	sub	fp, #4
2fc98     20 32 06 A1 |  if_e	add	local07, #32
2fc9c     19 0B 48 AC |  if_e	wrbyte	#5, local07
2fca0     24 4E 05 F1 | 	add	fp, #36
2fca4     A7 32 02 FB | 	rdlong	local07, fp
2fca8     24 4E 85 F1 | 	sub	fp, #36
2fcac     08 32 0E F2 | 	cmp	local07, #8 wz
2fcb0     0C 4E 05 A1 |  if_e	add	fp, #12
2fcb4     A7 32 C2 AA |  if_e	rdbyte	local07, fp
2fcb8     02 32 66 A0 |  if_e	shl	local07, #2
2fcbc     A7 32 42 AC |  if_e	wrbyte	local07, fp
2fcc0     0C 4E 85 A1 |  if_e	sub	fp, #12
2fcc4     0C 4E 05 F1 | 	add	fp, #12
2fcc8     A7 32 C2 FA | 	rdbyte	local07, fp
2fccc     0C 4E 85 F1 | 	sub	fp, #12
2fcd0     0C 32 06 F5 | 	and	local07, #12
2fcd4     0C 32 0E F2 | 	cmp	local07, #12 wz
2fcd8     18 00 90 AD |  if_e	jmp	#LR__4757
2fcdc     0C 4E 05 F1 | 	add	fp, #12
2fce0     A7 26 C2 FA | 	rdbyte	local01, fp
2fce4     0C 4E 85 F1 | 	sub	fp, #12
2fce8     03 26 06 F5 | 	and	local01, #3
2fcec     03 26 0E F2 | 	cmp	local01, #3 wz
2fcf0     14 00 90 5D |  if_ne	jmp	#LR__4758
2fcf4                 | LR__4757
2fcf4     10 4E 05 F1 | 	add	fp, #16
2fcf8     A7 32 C2 FA | 	rdbyte	local07, fp
2fcfc     02 32 46 F5 | 	or	local07, #2
2fd00     A7 32 42 FC | 	wrbyte	local07, fp
2fd04     10 4E 85 F1 | 	sub	fp, #16
2fd08                 | LR__4758
2fd08     10 4E 05 F1 | 	add	fp, #16
2fd0c     A7 32 C2 FA | 	rdbyte	local07, fp
2fd10     10 4E 85 F1 | 	sub	fp, #16
2fd14     02 32 CE F7 | 	test	local07, #2 wz
2fd18     48 00 90 5D |  if_ne	jmp	#LR__4759
2fd1c     0C 4E 05 F1 | 	add	fp, #12
2fd20     A7 32 C2 FA | 	rdbyte	local07, fp
2fd24     0C 4E 85 F1 | 	sub	fp, #12
2fd28     01 32 CE F7 | 	test	local07, #1 wz
2fd2c     10 4E 05 51 |  if_ne	add	fp, #16
2fd30     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2fd34     10 32 46 55 |  if_ne	or	local07, #16
2fd38     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2fd3c     10 4E 85 51 |  if_ne	sub	fp, #16
2fd40     0C 4E 05 F1 | 	add	fp, #12
2fd44     A7 32 C2 FA | 	rdbyte	local07, fp
2fd48     0C 4E 85 F1 | 	sub	fp, #12
2fd4c     04 32 CE F7 | 	test	local07, #4 wz
2fd50     10 4E 05 51 |  if_ne	add	fp, #16
2fd54     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2fd58     08 32 46 55 |  if_ne	or	local07, #8
2fd5c     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2fd60     10 4E 85 51 |  if_ne	sub	fp, #16
2fd64                 | LR__4759
2fd64     04 4E 05 F1 | 	add	fp, #4
2fd68     A7 32 02 FB | 	rdlong	local07, fp
2fd6c     0C 4E 05 F1 | 	add	fp, #12
2fd70     A7 26 C2 FA | 	rdbyte	local01, fp
2fd74     10 4E 85 F1 | 	sub	fp, #16
2fd78     2B 32 06 F1 | 	add	local07, #43
2fd7c     19 27 42 FC | 	wrbyte	local01, local07
2fd80                 | ' 	}
2fd80                 | ' 
2fd80                 | ' 	dp->fn[ 11 ] = cf;
2fd80                 | ' 
2fd80                 | ' 	return FR_OK;
2fd80     00 FA 05 F6 | 	mov	result1, #0
2fd84                 | LR__4760
2fd84     A7 F0 03 F6 | 	mov	ptra, fp
2fd88     B2 00 A0 FD | 	call	#popregs_
2fd8c                 | _fatfs_cc_create_name_ret
2fd8c     2D 00 64 FD | 	ret
2fd90                 | 
2fd90                 | _fatfs_cc_follow_path
2fd90     02 4A 05 F6 | 	mov	COUNT_, #2
2fd94     A8 00 A0 FD | 	call	#pushregs_
2fd98     18 F0 07 F1 | 	add	ptra, #24
2fd9c     04 4E 05 F1 | 	add	fp, #4
2fda0     A7 12 62 FC | 	wrlong	arg01, fp
2fda4     04 4E 05 F1 | 	add	fp, #4
2fda8     A7 14 62 FC | 	wrlong	arg02, fp
2fdac     04 4E 85 F1 | 	sub	fp, #4
2fdb0     A7 FA 01 FB | 	rdlong	result1, fp
2fdb4     FD 26 02 FB | 	rdlong	local01, result1
2fdb8     10 4E 05 F1 | 	add	fp, #16
2fdbc     A7 26 62 FC | 	wrlong	local01, fp
2fdc0     14 4E 85 F1 | 	sub	fp, #20
2fdc4     97 24 48 FB | 	callpa	#(@LR__4772-@LR__4770)>>2,fcache_load_ptr_
2fdc8                 | ' )
2fdc8                 | ' {
2fdc8                 | ' 	FRESULT res;
2fdc8                 | ' 	BYTE ns;
2fdc8                 | ' 	FATFS *fs = dp->obj.fs;
2fdc8                 | ' #line 3034 "ff.c"
2fdc8                 | ' 	{
2fdc8                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2fdc8                 | LR__4770
2fdc8     08 4E 05 F1 | 	add	fp, #8
2fdcc     A7 26 02 FB | 	rdlong	local01, fp
2fdd0     08 4E 85 F1 | 	sub	fp, #8
2fdd4     13 27 C2 FA | 	rdbyte	local01, local01
2fdd8     2F 26 0E F2 | 	cmp	local01, #47 wz
2fddc     18 00 90 AD |  if_e	jmp	#LR__4771
2fde0     08 4E 05 F1 | 	add	fp, #8
2fde4     A7 26 02 FB | 	rdlong	local01, fp
2fde8     08 4E 85 F1 | 	sub	fp, #8
2fdec     13 27 C2 FA | 	rdbyte	local01, local01
2fdf0     5C 26 0E F2 | 	cmp	local01, #92 wz
2fdf4     18 00 90 5D |  if_ne	jmp	#LR__4773
2fdf8                 | LR__4771
2fdf8     08 4E 05 F1 | 	add	fp, #8
2fdfc     A7 26 02 FB | 	rdlong	local01, fp
2fe00     01 26 06 F1 | 	add	local01, #1
2fe04     A7 26 62 FC | 	wrlong	local01, fp
2fe08     08 4E 85 F1 | 	sub	fp, #8
2fe0c     B8 FF 9F FD | 	jmp	#LR__4770
2fe10                 | LR__4772
2fe10                 | LR__4773
2fe10     04 4E 05 F1 | 	add	fp, #4
2fe14     A7 26 02 FB | 	rdlong	local01, fp
2fe18     08 26 06 F1 | 	add	local01, #8
2fe1c     13 01 68 FC | 	wrlong	#0, local01
2fe20     04 4E 05 F1 | 	add	fp, #4
2fe24     A7 26 02 FB | 	rdlong	local01, fp
2fe28     08 4E 85 F1 | 	sub	fp, #8
2fe2c     13 27 C2 FA | 	rdbyte	local01, local01
2fe30     20 26 16 F2 | 	cmp	local01, #32 wc
2fe34     30 00 90 3D |  if_ae	jmp	#LR__4774
2fe38     04 4E 05 F1 | 	add	fp, #4
2fe3c     A7 26 02 FB | 	rdlong	local01, fp
2fe40     2B 26 06 F1 | 	add	local01, #43
2fe44     13 01 49 FC | 	wrbyte	#128, local01
2fe48     A7 12 02 FB | 	rdlong	arg01, fp
2fe4c     04 4E 85 F1 | 	sub	fp, #4
2fe50     00 14 06 F6 | 	mov	arg02, #0
2fe54     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2fe58     0C 4E 05 F1 | 	add	fp, #12
2fe5c     A7 FA 61 FC | 	wrlong	result1, fp
2fe60     0C 4E 85 F1 | 	sub	fp, #12
2fe64     1C 01 90 FD | 	jmp	#LR__4778
2fe68                 | LR__4774
2fe68                 | ' 		for (;;) {
2fe68                 | LR__4775
2fe68     04 4E 05 F1 | 	add	fp, #4
2fe6c     A7 12 02 FB | 	rdlong	arg01, fp
2fe70     04 4E 05 F1 | 	add	fp, #4
2fe74     A7 14 02 F6 | 	mov	arg02, fp
2fe78     08 4E 85 F1 | 	sub	fp, #8
2fe7c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2fe80     0C 4E 05 F1 | 	add	fp, #12
2fe84     A7 FA 61 FC | 	wrlong	result1, fp
2fe88     00 FA 4D F2 | 	cmps	result1, #0 wz
2fe8c     0C 4E 85 F1 | 	sub	fp, #12
2fe90     F0 00 90 5D |  if_ne	jmp	#LR__4777
2fe94     04 4E 05 F1 | 	add	fp, #4
2fe98     A7 12 02 FB | 	rdlong	arg01, fp
2fe9c     04 4E 85 F1 | 	sub	fp, #4
2fea0     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2fea4     0C 4E 05 F1 | 	add	fp, #12
2fea8     A7 FA 61 FC | 	wrlong	result1, fp
2feac     08 4E 85 F1 | 	sub	fp, #8
2feb0     A7 26 02 FB | 	rdlong	local01, fp
2feb4     2B 26 06 F1 | 	add	local01, #43
2feb8     13 27 C2 FA | 	rdbyte	local01, local01
2febc     0C 4E 05 F1 | 	add	fp, #12
2fec0     A7 26 42 FC | 	wrbyte	local01, fp
2fec4     04 4E 85 F1 | 	sub	fp, #4
2fec8     A7 26 0A FB | 	rdlong	local01, fp wz
2fecc     0C 4E 85 F1 | 	sub	fp, #12
2fed0     34 00 90 AD |  if_e	jmp	#LR__4776
2fed4     0C 4E 05 F1 | 	add	fp, #12
2fed8     A7 26 02 FB | 	rdlong	local01, fp
2fedc     0C 4E 85 F1 | 	sub	fp, #12
2fee0     04 26 0E F2 | 	cmp	local01, #4 wz
2fee4     9C 00 90 5D |  if_ne	jmp	#LR__4777
2fee8     10 4E 05 F1 | 	add	fp, #16
2feec     A7 26 C2 FA | 	rdbyte	local01, fp
2fef0     10 4E 85 F1 | 	sub	fp, #16
2fef4     04 26 CE F7 | 	test	local01, #4 wz
2fef8     0C 4E 05 A1 |  if_e	add	fp, #12
2fefc     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ff00     0C 4E 85 A1 |  if_e	sub	fp, #12
2ff04                 | ' 					}
2ff04                 | ' 				}
2ff04                 | ' 				break;
2ff04     7C 00 90 FD | 	jmp	#LR__4777
2ff08                 | LR__4776
2ff08     10 4E 05 F1 | 	add	fp, #16
2ff0c     A7 26 C2 FA | 	rdbyte	local01, fp
2ff10     10 4E 85 F1 | 	sub	fp, #16
2ff14     04 26 CE F7 | 	test	local01, #4 wz
2ff18     68 00 90 5D |  if_ne	jmp	#LR__4777
2ff1c     04 4E 05 F1 | 	add	fp, #4
2ff20     A7 26 02 FB | 	rdlong	local01, fp
2ff24     04 4E 85 F1 | 	sub	fp, #4
2ff28     06 26 06 F1 | 	add	local01, #6
2ff2c     13 27 C2 FA | 	rdbyte	local01, local01
2ff30     10 26 CE F7 | 	test	local01, #16 wz
2ff34     0C 4E 05 A1 |  if_e	add	fp, #12
2ff38     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ff3c     0C 4E 85 A1 |  if_e	sub	fp, #12
2ff40                 | ' 				res = FR_NO_PATH; break;
2ff40     40 00 90 AD |  if_e	jmp	#LR__4777
2ff44     04 4E 05 F1 | 	add	fp, #4
2ff48     A7 28 02 FB | 	rdlong	local02, fp
2ff4c     14 27 02 F6 | 	mov	local01, local02
2ff50     10 4E 05 F1 | 	add	fp, #16
2ff54     A7 14 02 FB | 	rdlong	arg02, fp
2ff58     0A 13 02 F6 | 	mov	arg01, arg02
2ff5c     34 14 06 F1 | 	add	arg02, #52
2ff60     14 4E 85 F1 | 	sub	fp, #20
2ff64     10 28 06 F1 | 	add	local02, #16
2ff68     14 29 02 FB | 	rdlong	local02, local02
2ff6c     FF 29 06 F5 | 	and	local02, #511
2ff70     14 15 02 F1 | 	add	arg02, local02
2ff74     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2ff78     08 26 06 F1 | 	add	local01, #8
2ff7c     13 FB 61 FC | 	wrlong	result1, local01
2ff80     E4 FE 9F FD | 	jmp	#LR__4775
2ff84                 | LR__4777
2ff84                 | LR__4778
2ff84                 | ' 			}
2ff84                 | ' #line 3090 "ff.c"
2ff84                 | ' 			{
2ff84                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ff84                 | ' 			}
2ff84                 | ' 		}
2ff84                 | ' 	}
2ff84                 | ' 
2ff84                 | ' 	return res;
2ff84     0C 4E 05 F1 | 	add	fp, #12
2ff88     A7 FA 01 FB | 	rdlong	result1, fp
2ff8c     0C 4E 85 F1 | 	sub	fp, #12
2ff90     A7 F0 03 F6 | 	mov	ptra, fp
2ff94     B2 00 A0 FD | 	call	#popregs_
2ff98                 | _fatfs_cc_follow_path_ret
2ff98     2D 00 64 FD | 	ret
2ff9c                 | 
2ff9c                 | _fatfs_cc_get_ldnumber
2ff9c     01 00 66 F6 | 	neg	_var01, #1
2ffa0     09 03 0A FB | 	rdlong	_var02, arg01 wz
2ffa4     01 05 02 F6 | 	mov	_var03, _var02
2ffa8     01 FA 65 A6 |  if_e	neg	result1, #1
2ffac     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ffb0     97 10 48 FB | 	callpa	#(@LR__4781-@LR__4780)>>2,fcache_load_ptr_
2ffb4                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ffb4                 | LR__4780
2ffb4     02 07 C2 FA | 	rdbyte	_var04, _var03
2ffb8     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2ffbc     20 FA 15 F2 | 	cmp	result1, #32 wc
2ffc0     01 04 06 F1 | 	add	_var03, #1
2ffc4     03 09 02 36 |  if_ae	mov	_var05, _var04
2ffc8     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ffcc     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2ffd0     E0 FF 9F 1D |  if_a	jmp	#LR__4780
2ffd4                 | LR__4781
2ffd4     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2ffd8     3A 06 0E F2 | 	cmp	_var04, #58 wz
2ffdc     40 00 90 5D |  if_ne	jmp	#LR__4783
2ffe0     01 0A 06 F6 | 	mov	_var06, #1
2ffe4     01 09 C2 FA | 	rdbyte	_var05, _var02
2ffe8     30 08 16 F2 | 	cmp	_var05, #48 wc
2ffec     1C 00 90 CD |  if_b	jmp	#LR__4782
2fff0     01 09 C2 FA | 	rdbyte	_var05, _var02
2fff4     3A 08 16 F2 | 	cmp	_var05, #58 wc
2fff8     01 0D 02 C6 |  if_b	mov	_var07, _var02
2fffc     02 0C 06 C1 |  if_b	add	_var07, #2
30000     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
30004     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
30008     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
3000c                 | LR__4782
3000c     01 0A 56 F2 | 	cmps	_var06, #1 wc
30010     05 01 02 C6 |  if_b	mov	_var01, _var06
30014     09 05 62 CC |  if_b	wrlong	_var03, arg01
30018                 | ' 			vol = i;
30018                 | ' 			*path = tt;
30018                 | ' 		}
30018                 | ' 		return vol;
30018     00 FB 01 F6 | 	mov	result1, _var01
3001c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
30020                 | LR__4783
30020                 | ' 	}
30020                 | ' #line 3170 "ff.c"
30020                 | ' 	vol = 0;
30020                 | ' 
30020                 | ' 	return vol;
30020     00 FA 05 F6 | 	mov	result1, #0
30024                 | _fatfs_cc_get_ldnumber_ret
30024     2D 00 64 FD | 	ret
30028                 | 
30028                 | _fatfs_cc_check_fs
30028     04 4A 05 F6 | 	mov	COUNT_, #4
3002c     A8 00 A0 FD | 	call	#pushregs_
30030     09 27 02 F6 | 	mov	local01, arg01
30034     03 26 06 F1 | 	add	local01, #3
30038     13 01 48 FC | 	wrbyte	#0, local01
3003c     2D 26 06 F1 | 	add	local01, #45
30040     FF FF FF FF 
30044     13 FF 6B FC | 	wrlong	##-1, local01
30048     30 26 86 F1 | 	sub	local01, #48
3004c     13 13 02 F6 | 	mov	arg01, local01
30050     18 D5 BF FD | 	call	#_fatfs_cc_move_window
30054     00 FA 0D F2 | 	cmp	result1, #0 wz
30058     04 FA 05 56 |  if_ne	mov	result1, #4
3005c     94 01 90 5D |  if_ne	jmp	#LR__4794
30060     34 26 06 F1 | 	add	local01, #52
30064     13 13 02 F6 | 	mov	arg01, local01
30068     FE 13 06 F1 | 	add	arg01, #510
3006c                 | ' {
3006c                 | ' 
3006c                 | ' 	return *((WORD*)ptr);
3006c     09 29 E2 FA | 	rdword	local02, arg01
30070     13 2B C2 FA | 	rdbyte	local03, local01
30074     34 26 86 F1 | 	sub	local01, #52
30078     15 2D E2 F8 | 	getbyte	local04, local03, #0
3007c     EB 2C 0E F2 | 	cmp	local04, #235 wz
30080     15 17 02 56 |  if_ne	mov	arg03, local03
30084     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
30088     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
3008c     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
30090     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
30094     44 01 90 5D |  if_ne	jmp	#LR__4793
30098     14 2D 32 F9 | 	getword	local04, local02, #0
3009c     55 00 00 FF 
300a0     55 2C 0E F2 | 	cmp	local04, ##43605 wz
300a4     2C 00 90 5D |  if_ne	jmp	#LR__4790
300a8     34 26 06 F1 | 	add	local01, #52
300ac     13 13 02 F6 | 	mov	arg01, local01
300b0     34 26 86 F1 | 	sub	local01, #52
300b4     52 12 06 F1 | 	add	arg01, #82
300b8     AA 01 00 FF 
300bc     08 15 06 F6 | 	mov	arg02, ##@LR__5384
300c0     08 16 06 F6 | 	mov	arg03, #8
300c4     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
300c8     00 FA 0D F2 | 	cmp	result1, #0 wz
300cc                 | ' 			return 0;
300cc     00 FA 05 A6 |  if_e	mov	result1, #0
300d0     20 01 90 AD |  if_e	jmp	#LR__4794
300d4                 | LR__4790
300d4     34 26 06 F1 | 	add	local01, #52
300d8     13 13 02 F6 | 	mov	arg01, local01
300dc     0B 12 06 F1 | 	add	arg01, #11
300e0                 | ' {
300e0                 | ' 
300e0                 | ' 	return *((WORD*)ptr);
300e0     09 FB E1 FA | 	rdword	result1, arg01
300e4     0D 26 06 F1 | 	add	local01, #13
300e8     13 2B C2 FA | 	rdbyte	local03, local01
300ec     41 26 86 F1 | 	sub	local01, #65
300f0     FD 2C 32 F9 | 	getword	local04, result1, #0
300f4     FD 14 32 F9 | 	getword	arg02, result1, #0
300f8     01 14 86 F1 | 	sub	arg02, #1
300fc     0A 2D CA F7 | 	test	local04, arg02 wz
30100     D8 00 90 5D |  if_ne	jmp	#LR__4792
30104     FD 14 32 F9 | 	getword	arg02, result1, #0
30108     01 00 00 FF 
3010c     00 14 16 F2 | 	cmp	arg02, ##512 wc
30110     C8 00 90 CD |  if_b	jmp	#LR__4792
30114     FD 14 32 F9 | 	getword	arg02, result1, #0
30118     01 00 00 FF 
3011c     01 14 16 F2 | 	cmp	arg02, ##513 wc
30120     B8 00 90 3D |  if_ae	jmp	#LR__4792
30124     15 13 02 F6 | 	mov	arg01, local03
30128     07 12 4E F7 | 	zerox	arg01, #7 wz
3012c     AC 00 90 AD |  if_e	jmp	#LR__4792
30130     15 13 E2 F8 | 	getbyte	arg01, local03, #0
30134     15 2B E2 F8 | 	getbyte	local03, local03, #0
30138     01 2A 86 F1 | 	sub	local03, #1
3013c     15 13 CA F7 | 	test	arg01, local03 wz
30140     98 00 90 5D |  if_ne	jmp	#LR__4792
30144     34 26 06 F1 | 	add	local01, #52
30148     13 13 02 F6 | 	mov	arg01, local01
3014c     34 26 86 F1 | 	sub	local01, #52
30150     0E 12 06 F1 | 	add	arg01, #14
30154                 | ' {
30154                 | ' 
30154                 | ' 	return *((WORD*)ptr);
30154     09 FB E9 FA | 	rdword	result1, arg01 wz
30158     80 00 90 AD |  if_e	jmp	#LR__4792
3015c     44 26 06 F1 | 	add	local01, #68
30160     13 13 C2 FA | 	rdbyte	arg01, local01
30164     44 26 86 F1 | 	sub	local01, #68
30168     01 12 86 F1 | 	sub	arg01, #1
3016c     02 12 16 F2 | 	cmp	arg01, #2 wc
30170     68 00 90 3D |  if_ae	jmp	#LR__4792
30174     34 26 06 F1 | 	add	local01, #52
30178     13 13 02 F6 | 	mov	arg01, local01
3017c     34 26 86 F1 | 	sub	local01, #52
30180     11 12 06 F1 | 	add	arg01, #17
30184                 | ' {
30184                 | ' 
30184                 | ' 	return *((WORD*)ptr);
30184     09 FB E9 FA | 	rdword	result1, arg01 wz
30188     50 00 90 AD |  if_e	jmp	#LR__4792
3018c     34 26 06 F1 | 	add	local01, #52
30190     13 13 02 F6 | 	mov	arg01, local01
30194     34 26 86 F1 | 	sub	local01, #52
30198     13 12 06 F1 | 	add	arg01, #19
3019c                 | ' {
3019c                 | ' 
3019c                 | ' 	return *((WORD*)ptr);
3019c     09 FB E1 FA | 	rdword	result1, arg01
301a0     FD 2A 32 F9 | 	getword	local03, result1, #0
301a4     80 2A 16 F2 | 	cmp	local03, #128 wc
301a8     20 00 90 3D |  if_ae	jmp	#LR__4791
301ac     34 26 06 F1 | 	add	local01, #52
301b0     13 13 02 F6 | 	mov	arg01, local01
301b4     34 26 86 F1 | 	sub	local01, #52
301b8     20 12 06 F1 | 	add	arg01, #32
301bc                 | ' {
301bc                 | ' 
301bc                 | ' 	return *((DWORD*)ptr);
301bc     09 FB 01 FB | 	rdlong	result1, arg01
301c0     80 00 00 FF 
301c4     00 FA 15 F2 | 	cmp	result1, ##65536 wc
301c8     10 00 90 CD |  if_b	jmp	#LR__4792
301cc                 | LR__4791
301cc     4A 26 06 F1 | 	add	local01, #74
301d0                 | ' {
301d0                 | ' 
301d0                 | ' 	return *((WORD*)ptr);
301d0     13 FB E9 FA | 	rdword	result1, local01 wz
301d4                 | ' 			&& b != 0 && (b & (b - 1)) == 0
301d4                 | ' 			&& ld_word(fs->win +  14 ) != 0
301d4                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
301d4                 | ' 			&& ld_word(fs->win +  17 ) != 0
301d4                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
301d4                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
301d4                 | ' 				return 0;
301d4     00 FA 05 56 |  if_ne	mov	result1, #0
301d8     18 00 90 5D |  if_ne	jmp	#LR__4794
301dc                 | LR__4792
301dc                 | LR__4793
301dc                 | ' 		}
301dc                 | ' 	}
301dc                 | ' 	return sign == 0xAA55 ? 2 : 3;
301dc     14 2B 32 F9 | 	getword	local03, local02, #0
301e0     55 00 00 FF 
301e4     55 2A 0E F2 | 	cmp	local03, ##43605 wz
301e8     02 2C 06 A6 |  if_e	mov	local04, #2
301ec     03 2C 06 56 |  if_ne	mov	local04, #3
301f0     16 FB 01 F6 | 	mov	result1, local04
301f4                 | LR__4794
301f4     A7 F0 03 F6 | 	mov	ptra, fp
301f8     B2 00 A0 FD | 	call	#popregs_
301fc                 | _fatfs_cc_check_fs_ret
301fc     2D 00 64 FD | 	ret
30200                 | 
30200                 | _fatfs_cc_find_volume
30200     05 4A 05 F6 | 	mov	COUNT_, #5
30204     A8 00 A0 FD | 	call	#pushregs_
30208     24 F0 07 F1 | 	add	ptra, #36
3020c     09 27 02 F6 | 	mov	local01, arg01
30210     0A 29 02 F6 | 	mov	local02, arg02
30214     13 13 02 F6 | 	mov	arg01, local01
30218     00 14 06 F6 | 	mov	arg02, #0
3021c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
30220     02 FA 0D F2 | 	cmp	result1, #2 wz
30224     0C 00 90 AD |  if_e	jmp	#LR__4800
30228     03 FA 15 F2 | 	cmp	result1, #3 wc
3022c     00 28 0E C2 |  if_b	cmp	local02, #0 wz
30230     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4808
30234                 | LR__4800
30234                 | ' 	for (i = 0; i < 4; i++) {
30234     00 2A 06 F6 | 	mov	local03, #0
30238     97 26 48 FB | 	callpa	#(@LR__4802-@LR__4801)>>2,fcache_load_ptr_
3023c                 | LR__4801
3023c     04 2A 16 F2 | 	cmp	local03, #4 wc
30240     44 00 90 3D |  if_ae	jmp	#LR__4803
30244     15 2D 02 F6 | 	mov	local04, local03
30248     02 2C 66 F0 | 	shl	local04, #2
3024c     14 4E 05 F1 | 	add	fp, #20
30250     A7 2C 02 F1 | 	add	local04, fp
30254     34 26 06 F1 | 	add	local01, #52
30258     13 13 02 F6 | 	mov	arg01, local01
3025c     34 26 86 F1 | 	sub	local01, #52
30260     BE 13 06 F1 | 	add	arg01, #446
30264     15 15 02 F6 | 	mov	arg02, local03
30268     04 14 66 F0 | 	shl	arg02, #4
3026c     0A 13 02 F1 | 	add	arg01, arg02
30270     08 12 06 F1 | 	add	arg01, #8
30274                 | ' {
30274                 | ' 
30274                 | ' 	return *((DWORD*)ptr);
30274     09 FB 01 FB | 	rdlong	result1, arg01
30278     14 4E 85 F1 | 	sub	fp, #20
3027c     16 FB 61 FC | 	wrlong	result1, local04
30280     01 2A 06 F1 | 	add	local03, #1
30284     B4 FF 9F FD | 	jmp	#LR__4801
30288                 | LR__4802
30288                 | LR__4803
30288     00 28 0E F2 | 	cmp	local02, #0 wz
3028c     14 2D 02 56 |  if_ne	mov	local04, local02
30290     01 2C 86 51 |  if_ne	sub	local04, #1
30294     00 2C 06 A6 |  if_e	mov	local04, #0
30298     16 2B 02 F6 | 	mov	local03, local04
3029c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
3029c                 | ' 	}
3029c                 | ' 	i = part ? part - 1 : 0;
3029c                 | ' 	do {
3029c                 | LR__4804
3029c     15 2D 02 F6 | 	mov	local04, local03
302a0     02 2C 66 F0 | 	shl	local04, #2
302a4     14 4E 05 F1 | 	add	fp, #20
302a8     A7 2C 02 F1 | 	add	local04, fp
302ac     16 2D 0A FB | 	rdlong	local04, local04 wz
302b0     14 4E 85 F1 | 	sub	fp, #20
302b4     28 00 90 AD |  if_e	jmp	#LR__4805
302b8     15 2D 02 F6 | 	mov	local04, local03
302bc     02 2C 66 F0 | 	shl	local04, #2
302c0     14 4E 05 F1 | 	add	fp, #20
302c4     A7 2C 02 F1 | 	add	local04, fp
302c8     16 15 02 FB | 	rdlong	arg02, local04
302cc     13 13 02 F6 | 	mov	arg01, local01
302d0     14 4E 85 F1 | 	sub	fp, #20
302d4     50 FD BF FD | 	call	#_fatfs_cc_check_fs
302d8     FD 2C 02 F6 | 	mov	local04, result1
302dc     04 00 90 FD | 	jmp	#LR__4806
302e0                 | LR__4805
302e0     03 2C 06 F6 | 	mov	local04, #3
302e4                 | LR__4806
302e4     16 2F 02 F6 | 	mov	local05, local04
302e8     00 28 0E F2 | 	cmp	local02, #0 wz
302ec     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
302f0     0C 00 90 8D |  if_c_and_z	jmp	#LR__4807
302f4     01 2A 06 A1 |  if_e	add	local03, #1
302f8     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
302fc     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4804
30300                 | LR__4807
30300                 | ' 	return fmt;
30300     17 FB 01 F6 | 	mov	result1, local05
30304                 | LR__4808
30304     A7 F0 03 F6 | 	mov	ptra, fp
30308     B2 00 A0 FD | 	call	#popregs_
3030c                 | _fatfs_cc_find_volume_ret
3030c     2D 00 64 FD | 	ret
30310                 | 
30310                 | _fatfs_cc_mount_volume
30310     0B 4A 05 F6 | 	mov	COUNT_, #11
30314     A8 00 A0 FD | 	call	#pushregs_
30318     0A 27 02 F6 | 	mov	local01, arg02
3031c     0B 29 02 F6 | 	mov	local02, arg03
30320     13 01 68 FC | 	wrlong	#0, local01
30324     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
30328     FD 2A 02 F6 | 	mov	local03, result1
3032c     00 2A 56 F2 | 	cmps	local03, #0 wc
30330     0B FA 05 C6 |  if_b	mov	result1, #11
30334     3C 05 90 CD |  if_b	jmp	#LR__4820
30338     15 17 02 F6 | 	mov	arg03, local03
3033c     02 16 66 F0 | 	shl	arg03, #2
30340     F2 16 02 F1 | 	add	arg03, objptr
30344     0B 2D 0A FB | 	rdlong	local04, arg03 wz
30348     0C FA 05 A6 |  if_e	mov	result1, #12
3034c     24 05 90 AD |  if_e	jmp	#LR__4820
30350     13 2D 62 FC | 	wrlong	local04, local01
30354     14 29 E2 F8 | 	getbyte	local02, local02, #0
30358     FE 28 06 F5 | 	and	local02, #254
3035c     16 17 CA FA | 	rdbyte	arg03, local04 wz
30360     4C 00 90 AD |  if_e	jmp	#LR__4811
30364     01 2C 06 F1 | 	add	local04, #1
30368     16 13 CA FA | 	rdbyte	arg01, local04 wz
3036c     01 2C 86 F1 | 	sub	local04, #1
30370     01 FA 05 56 |  if_ne	mov	result1, #1
30374                 | ' 
30374                 | ' 	return Stat;
30374     01 00 00 AF 
30378     20 E4 05 A1 |  if_e	add	objptr, ##544
3037c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
30380     01 00 00 AF 
30384     20 E4 85 A1 |  if_e	sub	objptr, ##544
30388     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
3038c     01 16 CE F7 | 	test	arg03, #1 wz
30390     1C 00 90 5D |  if_ne	jmp	#LR__4810
30394     00 28 0E F2 | 	cmp	local02, #0 wz
30398     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
3039c     04 FA CD 57 |  if_ne	test	result1, #4 wz
303a0                 | ' 				return FR_WRITE_PROTECTED;
303a0     0A FA 05 56 |  if_ne	mov	result1, #10
303a4     CC 04 90 5D |  if_ne	jmp	#LR__4820
303a8                 | ' 			}
303a8                 | ' 			return FR_OK;
303a8     00 FA 05 F6 | 	mov	result1, #0
303ac     C4 04 90 FD | 	jmp	#LR__4820
303b0                 | LR__4810
303b0                 | LR__4811
303b0     16 01 48 FC | 	wrbyte	#0, local04
303b4     01 2C 06 F1 | 	add	local04, #1
303b8     16 2B 42 FC | 	wrbyte	local03, local04
303bc     16 13 C2 FA | 	rdbyte	arg01, local04
303c0     01 2C 86 F1 | 	sub	local04, #1
303c4     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
303c8     FD 16 02 F6 | 	mov	arg03, result1
303cc     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
303d0     01 2E CE F7 | 	test	local05, #1 wz
303d4                 | ' 		return FR_NOT_READY;
303d4     03 FA 05 56 |  if_ne	mov	result1, #3
303d8     98 04 90 5D |  if_ne	jmp	#LR__4820
303dc     00 28 0E F2 | 	cmp	local02, #0 wz
303e0     0B 2F 02 56 |  if_ne	mov	local05, arg03
303e4     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
303e8     04 2E CE 57 |  if_ne	test	local05, #4 wz
303ec                 | ' 		return FR_WRITE_PROTECTED;
303ec     0A FA 05 56 |  if_ne	mov	result1, #10
303f0     80 04 90 5D |  if_ne	jmp	#LR__4820
303f4     16 13 02 F6 | 	mov	arg01, local04
303f8     00 14 06 F6 | 	mov	arg02, #0
303fc     00 FE BF FD | 	call	#_fatfs_cc_find_volume
30400     FD 12 02 F6 | 	mov	arg01, result1
30404     04 12 0E F2 | 	cmp	arg01, #4 wz
30408     01 FA 05 A6 |  if_e	mov	result1, #1
3040c     64 04 90 AD |  if_e	jmp	#LR__4820
30410     02 12 16 F2 | 	cmp	arg01, #2 wc
30414     0D FA 05 36 |  if_ae	mov	result1, #13
30418     58 04 90 3D |  if_ae	jmp	#LR__4820
3041c     30 2C 06 F1 | 	add	local04, #48
30420     16 31 02 FB | 	rdlong	local06, local04
30424     04 2C 06 F1 | 	add	local04, #4
30428     16 13 02 F6 | 	mov	arg01, local04
3042c     34 2C 86 F1 | 	sub	local04, #52
30430     0B 12 06 F1 | 	add	arg01, #11
30434                 | ' {
30434                 | ' 
30434                 | ' 	return *((WORD*)ptr);
30434     09 FB E1 FA | 	rdword	result1, arg01
30438     01 00 00 FF 
3043c     00 FA 0D F2 | 	cmp	result1, ##512 wz
30440     0D FA 05 56 |  if_ne	mov	result1, #13
30444     2C 04 90 5D |  if_ne	jmp	#LR__4820
30448     34 2C 06 F1 | 	add	local04, #52
3044c     16 13 02 F6 | 	mov	arg01, local04
30450     34 2C 86 F1 | 	sub	local04, #52
30454     16 12 06 F1 | 	add	arg01, #22
30458                 | ' {
30458                 | ' 
30458                 | ' 	return *((WORD*)ptr);
30458     09 FB E1 FA | 	rdword	result1, arg01
3045c     FD 32 0A F6 | 	mov	local07, result1 wz
30460     18 00 90 5D |  if_ne	jmp	#LR__4812
30464     34 2C 06 F1 | 	add	local04, #52
30468     16 13 02 F6 | 	mov	arg01, local04
3046c     34 2C 86 F1 | 	sub	local04, #52
30470     24 12 06 F1 | 	add	arg01, #36
30474                 | ' {
30474                 | ' 
30474                 | ' 	return *((DWORD*)ptr);
30474     09 FB 01 FB | 	rdlong	result1, arg01
30478     FD 32 02 F6 | 	mov	local07, result1
3047c                 | LR__4812
3047c     1C 2C 06 F1 | 	add	local04, #28
30480     16 33 62 FC | 	wrlong	local07, local04
30484     28 2C 06 F1 | 	add	local04, #40
30488     16 2F C2 FA | 	rdbyte	local05, local04
3048c     42 2C 86 F1 | 	sub	local04, #66
30490     16 2F 42 FC | 	wrbyte	local05, local04
30494     16 2F C2 FA | 	rdbyte	local05, local04
30498     02 2C 86 F1 | 	sub	local04, #2
3049c     01 2E 0E F2 | 	cmp	local05, #1 wz
304a0     02 2C 06 51 |  if_ne	add	local04, #2
304a4     16 2F C2 5A |  if_ne	rdbyte	local05, local04
304a8     02 2C 86 51 |  if_ne	sub	local04, #2
304ac     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
304b0     0D FA 05 56 |  if_ne	mov	result1, #13
304b4     BC 03 90 5D |  if_ne	jmp	#LR__4820
304b8     02 2C 06 F1 | 	add	local04, #2
304bc     16 2F C2 FA | 	rdbyte	local05, local04
304c0     17 33 02 FD | 	qmul	local07, local05
304c4     3F 2C 06 F1 | 	add	local04, #63
304c8     16 2F C2 FA | 	rdbyte	local05, local04
304cc     37 2C 86 F1 | 	sub	local04, #55
304d0     16 2F 52 FC | 	wrword	local05, local04
304d4     16 2F EA FA | 	rdword	local05, local04 wz
304d8     0A 2C 86 F1 | 	sub	local04, #10
304dc     18 32 62 FD | 	getqx	local07
304e0     20 00 90 AD |  if_e	jmp	#LR__4813
304e4     0A 2C 06 F1 | 	add	local04, #10
304e8     16 2F E2 FA | 	rdword	local05, local04
304ec     17 2B 32 F9 | 	getword	local03, local05, #0
304f0     0A 2C 86 F1 | 	sub	local04, #10
304f4     17 2F 32 F9 | 	getword	local05, local05, #0
304f8     01 2E 86 F1 | 	sub	local05, #1
304fc     17 2B CA F7 | 	test	local03, local05 wz
30500     08 00 90 AD |  if_e	jmp	#LR__4814
30504                 | LR__4813
30504     0D FA 05 F6 | 	mov	result1, #13
30508     68 03 90 FD | 	jmp	#LR__4820
3050c                 | LR__4814
3050c     34 2C 06 F1 | 	add	local04, #52
30510     16 13 02 F6 | 	mov	arg01, local04
30514     11 12 06 F1 | 	add	arg01, #17
30518                 | ' {
30518                 | ' 
30518                 | ' 	return *((WORD*)ptr);
30518     09 FB E1 FA | 	rdword	result1, arg01
3051c     2C 2C 86 F1 | 	sub	local04, #44
30520     16 FB 51 FC | 	wrword	result1, local04
30524     16 2F E2 FA | 	rdword	local05, local04
30528     08 2C 86 F1 | 	sub	local04, #8
3052c     17 13 52 F6 | 	abs	arg01, local05 wc
30530     09 13 42 F8 | 	getnib	arg01, arg01, #0
30534     09 13 8A F6 | 	negc	arg01, arg01 wz
30538     0D FA 05 56 |  if_ne	mov	result1, #13
3053c     34 03 90 5D |  if_ne	jmp	#LR__4820
30540     34 2C 06 F1 | 	add	local04, #52
30544     16 13 02 F6 | 	mov	arg01, local04
30548     34 2C 86 F1 | 	sub	local04, #52
3054c     13 12 06 F1 | 	add	arg01, #19
30550                 | ' {
30550                 | ' 
30550                 | ' 	return *((WORD*)ptr);
30550     09 FB E1 FA | 	rdword	result1, arg01
30554     FD 34 0A F6 | 	mov	local08, result1 wz
30558     34 2C 06 A1 |  if_e	add	local04, #52
3055c     16 13 02 A6 |  if_e	mov	arg01, local04
30560     34 2C 86 A1 |  if_e	sub	local04, #52
30564     20 12 06 A1 |  if_e	add	arg01, #32
30568                 | ' {
30568                 | ' 
30568                 | ' 	return *((DWORD*)ptr);
30568     09 35 02 AB |  if_e	rdlong	local08, arg01
3056c     34 2C 06 F1 | 	add	local04, #52
30570     16 13 02 F6 | 	mov	arg01, local04
30574     34 2C 86 F1 | 	sub	local04, #52
30578     0E 12 06 F1 | 	add	arg01, #14
3057c                 | ' {
3057c                 | ' 
3057c                 | ' 	return *((WORD*)ptr);
3057c     09 FB E1 FA | 	rdword	result1, arg01
30580     FD 12 02 F6 | 	mov	arg01, result1
30584     09 2F 02 F6 | 	mov	local05, arg01
30588     0F 2E 4E F7 | 	zerox	local05, #15 wz
3058c     0D FA 05 A6 |  if_e	mov	result1, #13
30590     E0 02 90 AD |  if_e	jmp	#LR__4820
30594     09 37 32 F9 | 	getword	local09, arg01, #0
30598     19 37 02 F1 | 	add	local09, local07
3059c     08 2C 06 F1 | 	add	local04, #8
305a0     16 2F E2 FA | 	rdword	local05, local04
305a4     08 2C 86 F1 | 	sub	local04, #8
305a8     17 2F 52 F6 | 	abs	local05, local05 wc
305ac     04 2E 46 F0 | 	shr	local05, #4
305b0     17 37 82 F3 | 	sumc	local09, local05
305b4     1B 35 12 F2 | 	cmp	local08, local09 wc
305b8     0D FA 05 C6 |  if_b	mov	result1, #13
305bc     B4 02 90 CD |  if_b	jmp	#LR__4820
305c0     1B 35 82 F1 | 	sub	local08, local09
305c4     0A 2C 06 F1 | 	add	local04, #10
305c8     16 2F E2 FA | 	rdword	local05, local04
305cc     17 35 12 FD | 	qdiv	local08, local05
305d0     0A 2C 86 F1 | 	sub	local04, #10
305d4     18 2E 62 FD | 	getqx	local05
305d8     00 2E 0E F2 | 	cmp	local05, #0 wz
305dc     0D FA 05 A6 |  if_e	mov	result1, #13
305e0     90 02 90 AD |  if_e	jmp	#LR__4820
305e4     00 38 06 F6 | 	mov	local10, #0
305e8     FF FF 07 FF 
305ec     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
305f0     03 38 06 C6 |  if_b	mov	local10, #3
305f4     7F 00 00 FF 
305f8     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
305fc     02 38 06 C6 |  if_b	mov	local10, #2
30600     07 00 00 FF 
30604     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
30608     01 38 06 C6 |  if_b	mov	local10, #1
3060c     00 38 0E F2 | 	cmp	local10, #0 wz
30610     0D FA 05 A6 |  if_e	mov	result1, #13
30614     5C 02 90 AD |  if_e	jmp	#LR__4820
30618     02 2E 06 F1 | 	add	local05, #2
3061c     18 2C 06 F1 | 	add	local04, #24
30620     16 2F 62 FC | 	wrlong	local05, local04
30624     08 2C 06 F1 | 	add	local04, #8
30628     16 31 62 FC | 	wrlong	local06, local04
3062c     18 2F 02 F6 | 	mov	local05, local06
30630     09 13 32 F9 | 	getword	arg01, arg01, #0
30634     09 2F 02 F1 | 	add	local05, arg01
30638     04 2C 06 F1 | 	add	local04, #4
3063c     16 2F 62 FC | 	wrlong	local05, local04
30640     18 2F 02 F6 | 	mov	local05, local06
30644     1B 2F 02 F1 | 	add	local05, local09
30648     08 2C 06 F1 | 	add	local04, #8
3064c     16 2F 62 FC | 	wrlong	local05, local04
30650     2C 2C 86 F1 | 	sub	local04, #44
30654     03 38 0E F2 | 	cmp	local10, #3 wz
30658     5C 00 90 5D |  if_ne	jmp	#LR__4815
3065c     34 2C 06 F1 | 	add	local04, #52
30660     16 13 02 F6 | 	mov	arg01, local04
30664     34 2C 86 F1 | 	sub	local04, #52
30668     2A 12 06 F1 | 	add	arg01, #42
3066c                 | ' {
3066c                 | ' 
3066c                 | ' 	return *((WORD*)ptr);
3066c     09 FB E9 FA | 	rdword	result1, arg01 wz
30670     0D FA 05 56 |  if_ne	mov	result1, #13
30674     FC 01 90 5D |  if_ne	jmp	#LR__4820
30678     08 2C 06 F1 | 	add	local04, #8
3067c     16 2F EA FA | 	rdword	local05, local04 wz
30680     08 2C 86 F1 | 	sub	local04, #8
30684     0D FA 05 56 |  if_ne	mov	result1, #13
30688     E8 01 90 5D |  if_ne	jmp	#LR__4820
3068c     34 2C 06 F1 | 	add	local04, #52
30690     16 13 02 F6 | 	mov	arg01, local04
30694     2C 12 06 F1 | 	add	arg01, #44
30698                 | ' {
30698                 | ' 
30698                 | ' 	return *((DWORD*)ptr);
30698     09 FB 01 FB | 	rdlong	result1, arg01
3069c     0C 2C 86 F1 | 	sub	local04, #12
306a0     16 FB 61 FC | 	wrlong	result1, local04
306a4     10 2C 86 F1 | 	sub	local04, #16
306a8     16 3B 02 FB | 	rdlong	local11, local04
306ac     18 2C 86 F1 | 	sub	local04, #24
306b0     02 3A 66 F0 | 	shl	local11, #2
306b4     6C 00 90 FD | 	jmp	#LR__4817
306b8                 | LR__4815
306b8     08 2C 06 F1 | 	add	local04, #8
306bc     16 2F EA FA | 	rdword	local05, local04 wz
306c0     08 2C 86 F1 | 	sub	local04, #8
306c4     0D FA 05 A6 |  if_e	mov	result1, #13
306c8     A8 01 90 AD |  if_e	jmp	#LR__4820
306cc     24 2C 06 F1 | 	add	local04, #36
306d0     16 2F 02 FB | 	rdlong	local05, local04
306d4     19 2F 02 F1 | 	add	local05, local07
306d8     04 2C 06 F1 | 	add	local04, #4
306dc     16 2F 62 FC | 	wrlong	local05, local04
306e0     28 2C 86 F1 | 	sub	local04, #40
306e4     02 38 0E F2 | 	cmp	local10, #2 wz
306e8     18 2C 06 A1 |  if_e	add	local04, #24
306ec     16 2F 02 AB |  if_e	rdlong	local05, local04
306f0     18 2C 86 A1 |  if_e	sub	local04, #24
306f4     01 2E 66 A0 |  if_e	shl	local05, #1
306f8     24 00 90 AD |  if_e	jmp	#LR__4816
306fc     18 2C 06 F1 | 	add	local04, #24
30700     16 3B 02 FB | 	rdlong	local11, local04
30704     1D 2F 02 F6 | 	mov	local05, local11
30708     01 2E 66 F0 | 	shl	local05, #1
3070c     1D 2F 02 F1 | 	add	local05, local11
30710     01 2E 46 F0 | 	shr	local05, #1
30714     18 2C 86 F1 | 	sub	local04, #24
30718     01 3A 06 F5 | 	and	local11, #1
3071c     1D 2F 02 F1 | 	add	local05, local11
30720                 | LR__4816
30720     17 3B 02 F6 | 	mov	local11, local05
30724                 | LR__4817
30724     FF 3B 06 F1 | 	add	local11, #511
30728     09 3A 46 F0 | 	shr	local11, #9
3072c     1C 2C 06 F1 | 	add	local04, #28
30730     16 17 02 FB | 	rdlong	arg03, local04
30734     1C 2C 86 F1 | 	sub	local04, #28
30738     1D 17 12 F2 | 	cmp	arg03, local11 wc
3073c     0D FA 05 C6 |  if_b	mov	result1, #13
30740     30 01 90 CD |  if_b	jmp	#LR__4820
30744     14 2C 06 F1 | 	add	local04, #20
30748     FF FF FF FF 
3074c     16 FF 6B FC | 	wrlong	##-1, local04
30750     04 2C 86 F1 | 	sub	local04, #4
30754     FF FF FF FF 
30758     16 FF 6B FC | 	wrlong	##-1, local04
3075c     0C 2C 86 F1 | 	sub	local04, #12
30760     16 01 49 FC | 	wrbyte	#128, local04
30764     04 2C 86 F1 | 	sub	local04, #4
30768     03 38 0E F2 | 	cmp	local10, #3 wz
3076c     D0 00 90 5D |  if_ne	jmp	#LR__4819
30770     34 2C 06 F1 | 	add	local04, #52
30774     16 13 02 F6 | 	mov	arg01, local04
30778     34 2C 86 F1 | 	sub	local04, #52
3077c     30 12 06 F1 | 	add	arg01, #48
30780                 | ' {
30780                 | ' 
30780                 | ' 	return *((WORD*)ptr);
30780     09 FB E1 FA | 	rdword	result1, arg01
30784     FD 2E 32 F9 | 	getword	local05, result1, #0
30788     01 2E 0E F2 | 	cmp	local05, #1 wz
3078c     B0 00 90 5D |  if_ne	jmp	#LR__4819
30790     01 30 06 F1 | 	add	local06, #1
30794     16 13 02 F6 | 	mov	arg01, local04
30798     18 15 02 F6 | 	mov	arg02, local06
3079c     CC CD BF FD | 	call	#_fatfs_cc_move_window
307a0     00 FA 0D F2 | 	cmp	result1, #0 wz
307a4     98 00 90 5D |  if_ne	jmp	#LR__4819
307a8     04 2C 06 F1 | 	add	local04, #4
307ac     16 01 48 FC | 	wrbyte	#0, local04
307b0     30 2C 06 F1 | 	add	local04, #48
307b4     16 13 02 F6 | 	mov	arg01, local04
307b8     34 2C 86 F1 | 	sub	local04, #52
307bc     FE 13 06 F1 | 	add	arg01, #510
307c0                 | ' {
307c0                 | ' 
307c0                 | ' 	return *((WORD*)ptr);
307c0     09 FB E1 FA | 	rdword	result1, arg01
307c4     FD 2E 32 F9 | 	getword	local05, result1, #0
307c8     55 00 00 FF 
307cc     55 2E 0E F2 | 	cmp	local05, ##43605 wz
307d0     34 2C 06 A1 |  if_e	add	local04, #52
307d4     16 13 02 A6 |  if_e	mov	arg01, local04
307d8     34 2C 86 A1 |  if_e	sub	local04, #52
307dc                 | ' {
307dc                 | ' 
307dc                 | ' 	return *((DWORD*)ptr);
307dc     09 FB 01 AB |  if_e	rdlong	result1, arg01
307e0     A9 B0 20 AF 
307e4     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
307e8     54 00 90 5D |  if_ne	jmp	#LR__4818
307ec     34 2C 06 F1 | 	add	local04, #52
307f0     16 13 02 F6 | 	mov	arg01, local04
307f4     34 2C 86 F1 | 	sub	local04, #52
307f8     E4 13 06 F1 | 	add	arg01, #484
307fc                 | ' {
307fc                 | ' 
307fc                 | ' 	return *((DWORD*)ptr);
307fc     09 FB 01 FB | 	rdlong	result1, arg01
30800     B9 A0 30 FF 
30804     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
30808     34 00 90 5D |  if_ne	jmp	#LR__4818
3080c     34 2C 06 F1 | 	add	local04, #52
30810     16 13 02 F6 | 	mov	arg01, local04
30814     E8 13 06 F1 | 	add	arg01, #488
30818                 | ' {
30818                 | ' 
30818                 | ' 	return *((DWORD*)ptr);
30818     09 FB 01 FB | 	rdlong	result1, arg01
3081c     20 2C 86 F1 | 	sub	local04, #32
30820     16 FB 61 FC | 	wrlong	result1, local04
30824     20 2C 06 F1 | 	add	local04, #32
30828     16 13 02 F6 | 	mov	arg01, local04
3082c     EC 13 06 F1 | 	add	arg01, #492
30830                 | ' {
30830                 | ' 
30830                 | ' 	return *((DWORD*)ptr);
30830     09 FB 01 FB | 	rdlong	result1, arg01
30834     24 2C 86 F1 | 	sub	local04, #36
30838     16 FB 61 FC | 	wrlong	result1, local04
3083c     10 2C 86 F1 | 	sub	local04, #16
30840                 | LR__4818
30840                 | LR__4819
30840     16 39 42 FC | 	wrbyte	local10, local04
30844     04 E4 05 F1 | 	add	objptr, #4
30848     F2 2E E2 FA | 	rdword	local05, objptr
3084c     01 2E 06 F1 | 	add	local05, #1
30850     F2 2E 52 FC | 	wrword	local05, objptr
30854     F2 3A E2 FA | 	rdword	local11, objptr
30858     06 2C 06 F1 | 	add	local04, #6
3085c     16 3B 52 FC | 	wrword	local11, local04
30860     04 E4 05 F1 | 	add	objptr, #4
30864     06 2C 06 F1 | 	add	local04, #6
30868     16 E5 61 FC | 	wrlong	objptr, local04
3086c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
3086c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
3086c                 | ' 			{
3086c                 | ' 
3086c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
3086c                 | ' 
3086c                 | ' 
3086c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
3086c                 | ' 
3086c                 | ' 			}
3086c                 | ' 		}
3086c                 | ' 
3086c                 | ' 
3086c                 | ' 	}
3086c                 | ' 
3086c                 | ' 	fs->fs_type = (BYTE)fmt;
3086c                 | ' 	fs->id = ++Fsid;
3086c                 | ' 
3086c                 | ' 	fs->lfnbuf = LfnBuf;
3086c                 | ' #line 3567 "ff.c"
3086c                 | ' 	return FR_OK;
3086c     00 FA 05 F6 | 	mov	result1, #0
30870     08 E4 85 F1 | 	sub	objptr, #8
30874                 | LR__4820
30874     A7 F0 03 F6 | 	mov	ptra, fp
30878     B2 00 A0 FD | 	call	#popregs_
3087c                 | _fatfs_cc_mount_volume_ret
3087c     2D 00 64 FD | 	ret
30880                 | 
30880                 | _fatfs_cc_validate
30880     09 01 0A F6 | 	mov	_var01, arg01 wz
30884     09 02 06 F6 | 	mov	_var02, #9
30888     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
3088c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
30890     50 00 90 AD |  if_e	jmp	#LR__4830
30894     04 00 06 F1 | 	add	_var01, #4
30898     00 07 E2 FA | 	rdword	_var04, _var01
3089c     04 00 86 F1 | 	sub	_var01, #4
308a0     00 13 02 FB | 	rdlong	arg01, _var01
308a4     06 12 06 F1 | 	add	arg01, #6
308a8     09 FB E1 FA | 	rdword	result1, arg01
308ac     FD 06 0A F2 | 	cmp	_var04, result1 wz
308b0     30 00 90 5D |  if_ne	jmp	#LR__4830
308b4     00 07 02 FB | 	rdlong	_var04, _var01
308b8     01 06 06 F1 | 	add	_var04, #1
308bc     03 13 CA FA | 	rdbyte	arg01, _var04 wz
308c0     01 FA 05 56 |  if_ne	mov	result1, #1
308c4                 | ' 
308c4                 | ' 	return Stat;
308c4     01 00 00 AF 
308c8     20 E4 05 A1 |  if_e	add	objptr, ##544
308cc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
308d0     01 00 00 AF 
308d4     20 E4 85 A1 |  if_e	sub	objptr, ##544
308d8     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
308dc     01 04 CE F7 | 	test	_var03, #1 wz
308e0     00 02 06 A6 |  if_e	mov	_var02, #0
308e4                 | LR__4830
308e4     00 02 0E F2 | 	cmp	_var02, #0 wz
308e8     00 05 02 AB |  if_e	rdlong	_var03, _var01
308ec     00 04 06 56 |  if_ne	mov	_var03, #0
308f0     0A 05 62 FC | 	wrlong	_var03, arg02
308f4                 | ' 			res = FR_OK;
308f4                 | ' 		}
308f4                 | ' 
308f4                 | ' 	}
308f4                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
308f4                 | ' 	return res;
308f4     01 FB 01 F6 | 	mov	result1, _var02
308f8                 | _fatfs_cc_validate_ret
308f8     2D 00 64 FD | 	ret
308fc                 | 
308fc                 | _fatfs_cc_f_mount
308fc     01 4A 05 F6 | 	mov	COUNT_, #1
30900     A8 00 A0 FD | 	call	#pushregs_
30904     20 F0 07 F1 | 	add	ptra, #32
30908     04 4E 05 F1 | 	add	fp, #4
3090c     A7 12 62 FC | 	wrlong	arg01, fp
30910     04 4E 05 F1 | 	add	fp, #4
30914     A7 14 62 FC | 	wrlong	arg02, fp
30918     04 4E 05 F1 | 	add	fp, #4
3091c     A7 16 42 FC | 	wrbyte	arg03, fp
30920     04 4E 85 F1 | 	sub	fp, #4
30924     A7 16 02 FB | 	rdlong	arg03, fp
30928     14 4E 05 F1 | 	add	fp, #20
3092c     A7 16 62 FC | 	wrlong	arg03, fp
30930     A7 12 02 F6 | 	mov	arg01, fp
30934     1C 4E 85 F1 | 	sub	fp, #28
30938     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
3093c     14 4E 05 F1 | 	add	fp, #20
30940     A7 FA 61 FC | 	wrlong	result1, fp
30944     14 4E 85 F1 | 	sub	fp, #20
30948     00 FA 55 F2 | 	cmps	result1, #0 wc
3094c     0B FA 05 C6 |  if_b	mov	result1, #11
30950     C0 00 90 CD |  if_b	jmp	#LR__4841
30954     14 4E 05 F1 | 	add	fp, #20
30958     A7 16 02 FB | 	rdlong	arg03, fp
3095c     02 16 66 F0 | 	shl	arg03, #2
30960     F2 16 02 F1 | 	add	arg03, objptr
30964     0B 17 0A FB | 	rdlong	arg03, arg03 wz
30968     04 4E 85 F1 | 	sub	fp, #4
3096c     A7 16 62 FC | 	wrlong	arg03, fp
30970     10 4E 85 F1 | 	sub	fp, #16
30974     28 00 90 AD |  if_e	jmp	#LR__4840
30978     10 4E 05 F1 | 	add	fp, #16
3097c     A7 16 02 FB | 	rdlong	arg03, fp
30980     10 4E 85 F1 | 	sub	fp, #16
30984     01 16 06 F1 | 	add	arg03, #1
30988     0B 13 C2 FA | 	rdbyte	arg01, arg03
3098c     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
30990     10 4E 05 F1 | 	add	fp, #16
30994     A7 16 02 FB | 	rdlong	arg03, fp
30998     10 4E 85 F1 | 	sub	fp, #16
3099c     0B 01 48 FC | 	wrbyte	#0, arg03
309a0                 | LR__4840
309a0     04 4E 05 F1 | 	add	fp, #4
309a4     A7 26 0A FB | 	rdlong	local01, fp wz
309a8     04 4E 85 F1 | 	sub	fp, #4
309ac     04 4E 05 51 |  if_ne	add	fp, #4
309b0     A7 26 02 5B |  if_ne	rdlong	local01, fp
309b4     04 4E 85 51 |  if_ne	sub	fp, #4
309b8     13 01 48 5C |  if_ne	wrbyte	#0, local01
309bc     14 4E 05 F1 | 	add	fp, #20
309c0     A7 26 02 FB | 	rdlong	local01, fp
309c4     02 26 66 F0 | 	shl	local01, #2
309c8     F2 26 02 F1 | 	add	local01, objptr
309cc     10 4E 85 F1 | 	sub	fp, #16
309d0     A7 16 02 FB | 	rdlong	arg03, fp
309d4     13 17 62 FC | 	wrlong	arg03, local01
309d8     08 4E 05 F1 | 	add	fp, #8
309dc     A7 26 CA FA | 	rdbyte	local01, fp wz
309e0     0C 4E 85 F1 | 	sub	fp, #12
309e4     00 FA 05 A6 |  if_e	mov	result1, #0
309e8     28 00 90 AD |  if_e	jmp	#LR__4841
309ec     08 4E 05 F1 | 	add	fp, #8
309f0     A7 12 02 F6 | 	mov	arg01, fp
309f4     04 4E 85 F1 | 	sub	fp, #4
309f8     A7 14 02 F6 | 	mov	arg02, fp
309fc     04 4E 85 F1 | 	sub	fp, #4
30a00     00 16 06 F6 | 	mov	arg03, #0
30a04     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
30a08     18 4E 05 F1 | 	add	fp, #24
30a0c     A7 FA 61 FC | 	wrlong	result1, fp
30a10                 | ' 
30a10                 | ' 	res = mount_volume(&path, &fs, 0);
30a10                 | ' 	return res ;
30a10     18 4E 85 F1 | 	sub	fp, #24
30a14                 | LR__4841
30a14     A7 F0 03 F6 | 	mov	ptra, fp
30a18     B2 00 A0 FD | 	call	#popregs_
30a1c                 | _fatfs_cc_f_mount_ret
30a1c     2D 00 64 FD | 	ret
30a20                 | 
30a20                 | _fatfs_cc_f_open
30a20     02 4A 05 F6 | 	mov	COUNT_, #2
30a24     A8 00 A0 FD | 	call	#pushregs_
30a28     60 F0 07 F1 | 	add	ptra, #96
30a2c     04 4E 05 F1 | 	add	fp, #4
30a30     A7 12 62 FC | 	wrlong	arg01, fp
30a34     04 4E 05 F1 | 	add	fp, #4
30a38     A7 14 62 FC | 	wrlong	arg02, fp
30a3c     04 4E 05 F1 | 	add	fp, #4
30a40     A7 16 42 FC | 	wrbyte	arg03, fp
30a44     08 4E 85 F1 | 	sub	fp, #8
30a48     A7 18 0A FB | 	rdlong	arg04, fp wz
30a4c     04 4E 85 F1 | 	sub	fp, #4
30a50     09 FA 05 A6 |  if_e	mov	result1, #9
30a54     98 06 90 AD |  if_e	jmp	#LR__4867
30a58     0C 4E 05 F1 | 	add	fp, #12
30a5c     A7 18 C2 FA | 	rdbyte	arg04, fp
30a60     3F 18 06 F5 | 	and	arg04, #63
30a64     A7 18 42 FC | 	wrbyte	arg04, fp
30a68     04 4E 85 F1 | 	sub	fp, #4
30a6c     A7 12 02 F6 | 	mov	arg01, fp
30a70     3C 4E 05 F1 | 	add	fp, #60
30a74     A7 14 02 F6 | 	mov	arg02, fp
30a78     38 4E 85 F1 | 	sub	fp, #56
30a7c     A7 16 C2 FA | 	rdbyte	arg03, fp
30a80     0C 4E 85 F1 | 	sub	fp, #12
30a84     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
30a88     10 4E 05 F1 | 	add	fp, #16
30a8c     A7 FA 61 FC | 	wrlong	result1, fp
30a90     10 4E 85 F1 | 	sub	fp, #16
30a94     00 FA 0D F2 | 	cmp	result1, #0 wz
30a98     2C 06 90 5D |  if_ne	jmp	#LR__4866
30a9c     44 4E 05 F1 | 	add	fp, #68
30aa0     A7 18 02 FB | 	rdlong	arg04, fp
30aa4     30 4E 85 F1 | 	sub	fp, #48
30aa8     A7 18 62 FC | 	wrlong	arg04, fp
30aac     A7 12 02 F6 | 	mov	arg01, fp
30ab0     0C 4E 85 F1 | 	sub	fp, #12
30ab4     A7 26 02 FB | 	rdlong	local01, fp
30ab8     08 4E 85 F1 | 	sub	fp, #8
30abc     13 15 02 F6 | 	mov	arg02, local01
30ac0     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
30ac4     10 4E 05 F1 | 	add	fp, #16
30ac8     A7 FA 61 FC | 	wrlong	result1, fp
30acc     10 4E 85 F1 | 	sub	fp, #16
30ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
30ad4     1C 00 90 5D |  if_ne	jmp	#LR__4850
30ad8     3F 4E 05 F1 | 	add	fp, #63
30adc     A7 18 C2 FA | 	rdbyte	arg04, fp
30ae0     3F 4E 85 F1 | 	sub	fp, #63
30ae4     80 18 CE F7 | 	test	arg04, #128 wz
30ae8     10 4E 05 51 |  if_ne	add	fp, #16
30aec     A7 0C 68 5C |  if_ne	wrlong	#6, fp
30af0     10 4E 85 51 |  if_ne	sub	fp, #16
30af4                 | LR__4850
30af4     0C 4E 05 F1 | 	add	fp, #12
30af8     A7 18 C2 FA | 	rdbyte	arg04, fp
30afc     0C 4E 85 F1 | 	sub	fp, #12
30b00     1C 18 CE F7 | 	test	arg04, #28 wz
30b04     F0 01 90 AD |  if_e	jmp	#LR__4855
30b08     10 4E 05 F1 | 	add	fp, #16
30b0c     A7 26 0A FB | 	rdlong	local01, fp wz
30b10     10 4E 85 F1 | 	sub	fp, #16
30b14     48 00 90 AD |  if_e	jmp	#LR__4852
30b18     10 4E 05 F1 | 	add	fp, #16
30b1c     A7 18 02 FB | 	rdlong	arg04, fp
30b20     10 4E 85 F1 | 	sub	fp, #16
30b24     04 18 0E F2 | 	cmp	arg04, #4 wz
30b28     1C 00 90 5D |  if_ne	jmp	#LR__4851
30b2c     14 4E 05 F1 | 	add	fp, #20
30b30     A7 12 02 F6 | 	mov	arg01, fp
30b34     14 4E 85 F1 | 	sub	fp, #20
30b38     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
30b3c     10 4E 05 F1 | 	add	fp, #16
30b40     A7 FA 61 FC | 	wrlong	result1, fp
30b44     10 4E 85 F1 | 	sub	fp, #16
30b48                 | LR__4851
30b48     0C 4E 05 F1 | 	add	fp, #12
30b4c     A7 26 C2 FA | 	rdbyte	local01, fp
30b50     08 26 46 F5 | 	or	local01, #8
30b54     A7 26 42 FC | 	wrbyte	local01, fp
30b58     0C 4E 85 F1 | 	sub	fp, #12
30b5c     3C 00 90 FD | 	jmp	#LR__4854
30b60                 | LR__4852
30b60     1A 4E 05 F1 | 	add	fp, #26
30b64     A7 26 C2 FA | 	rdbyte	local01, fp
30b68     1A 4E 85 F1 | 	sub	fp, #26
30b6c     11 26 CE F7 | 	test	local01, #17 wz
30b70     10 4E 05 51 |  if_ne	add	fp, #16
30b74     A7 0E 68 5C |  if_ne	wrlong	#7, fp
30b78     10 4E 85 51 |  if_ne	sub	fp, #16
30b7c     1C 00 90 5D |  if_ne	jmp	#LR__4853
30b80     0C 4E 05 F1 | 	add	fp, #12
30b84     A7 26 C2 FA | 	rdbyte	local01, fp
30b88     0C 4E 85 F1 | 	sub	fp, #12
30b8c     04 26 CE F7 | 	test	local01, #4 wz
30b90     10 4E 05 51 |  if_ne	add	fp, #16
30b94     A7 10 68 5C |  if_ne	wrlong	#8, fp
30b98     10 4E 85 51 |  if_ne	sub	fp, #16
30b9c                 | LR__4853
30b9c                 | LR__4854
30b9c     10 4E 05 F1 | 	add	fp, #16
30ba0     A7 26 0A FB | 	rdlong	local01, fp wz
30ba4     10 4E 85 F1 | 	sub	fp, #16
30ba8     A8 01 90 5D |  if_ne	jmp	#LR__4858
30bac     0C 4E 05 F1 | 	add	fp, #12
30bb0     A7 26 C2 FA | 	rdbyte	local01, fp
30bb4     0C 4E 85 F1 | 	sub	fp, #12
30bb8     08 26 CE F7 | 	test	local01, #8 wz
30bbc     94 01 90 AD |  if_e	jmp	#LR__4858
30bc0     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
30bc4     54 4E 05 F1 | 	add	fp, #84
30bc8     A7 FA 61 FC | 	wrlong	result1, fp
30bcc     24 4E 85 F1 | 	sub	fp, #36
30bd0     A7 12 02 FB | 	rdlong	arg01, fp
30bd4     0E 12 06 F1 | 	add	arg01, #14
30bd8     09 FB 61 FC | 	wrlong	result1, arg01
30bdc     A7 12 02 FB | 	rdlong	arg01, fp
30be0     16 12 06 F1 | 	add	arg01, #22
30be4     24 4E 05 F1 | 	add	fp, #36
30be8     A7 14 02 FB | 	rdlong	arg02, fp
30bec     09 15 62 FC | 	wrlong	arg02, arg01
30bf0     10 4E 85 F1 | 	sub	fp, #16
30bf4     A7 12 02 FB | 	rdlong	arg01, fp
30bf8     14 4E 85 F1 | 	sub	fp, #20
30bfc     A7 14 02 FB | 	rdlong	arg02, fp
30c00     30 4E 85 F1 | 	sub	fp, #48
30c04     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
30c08     48 4E 05 F1 | 	add	fp, #72
30c0c     A7 FA 61 FC | 	wrlong	result1, fp
30c10     18 4E 85 F1 | 	sub	fp, #24
30c14     A7 26 02 FB | 	rdlong	local01, fp
30c18     0B 26 06 F1 | 	add	local01, #11
30c1c     13 41 48 FC | 	wrbyte	#32, local01
30c20     14 4E 05 F1 | 	add	fp, #20
30c24     A7 12 02 FB | 	rdlong	arg01, fp
30c28     14 4E 85 F1 | 	sub	fp, #20
30c2c     A7 14 02 FB | 	rdlong	arg02, fp
30c30     30 4E 85 F1 | 	sub	fp, #48
30c34     00 16 06 F6 | 	mov	arg03, #0
30c38     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
30c3c     30 4E 05 F1 | 	add	fp, #48
30c40     A7 12 02 FB | 	rdlong	arg01, fp
30c44     1C 12 06 F1 | 	add	arg01, #28
30c48     09 01 68 FC | 	wrlong	#0, arg01
30c4c     14 4E 05 F1 | 	add	fp, #20
30c50     A7 26 02 FB | 	rdlong	local01, fp
30c54     03 26 06 F1 | 	add	local01, #3
30c58     13 03 48 FC | 	wrbyte	#1, local01
30c5c     04 4E 05 F1 | 	add	fp, #4
30c60     A7 26 0A FB | 	rdlong	local01, fp wz
30c64     48 4E 85 F1 | 	sub	fp, #72
30c68     E8 00 90 AD |  if_e	jmp	#LR__4858
30c6c     44 4E 05 F1 | 	add	fp, #68
30c70     A7 26 02 FB | 	rdlong	local01, fp
30c74     30 26 06 F1 | 	add	local01, #48
30c78     13 27 02 FB | 	rdlong	local01, local01
30c7c     14 4E 05 F1 | 	add	fp, #20
30c80     A7 26 62 FC | 	wrlong	local01, fp
30c84     44 4E 85 F1 | 	sub	fp, #68
30c88     A7 12 02 F6 | 	mov	arg01, fp
30c8c     34 4E 05 F1 | 	add	fp, #52
30c90     A7 14 02 FB | 	rdlong	arg02, fp
30c94     48 4E 85 F1 | 	sub	fp, #72
30c98     00 16 06 F6 | 	mov	arg03, #0
30c9c     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
30ca0     10 4E 05 F1 | 	add	fp, #16
30ca4     A7 FA 61 FC | 	wrlong	result1, fp
30ca8     10 4E 85 F1 | 	sub	fp, #16
30cac     00 FA 0D F2 | 	cmp	result1, #0 wz
30cb0     A0 00 90 5D |  if_ne	jmp	#LR__4858
30cb4     44 4E 05 F1 | 	add	fp, #68
30cb8     A7 12 02 FB | 	rdlong	arg01, fp
30cbc     14 4E 05 F1 | 	add	fp, #20
30cc0     A7 14 02 FB | 	rdlong	arg02, fp
30cc4     58 4E 85 F1 | 	sub	fp, #88
30cc8     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
30ccc     10 4E 05 F1 | 	add	fp, #16
30cd0     A7 FA 61 FC | 	wrlong	result1, fp
30cd4     34 4E 05 F1 | 	add	fp, #52
30cd8     A7 18 02 FB | 	rdlong	arg04, fp
30cdc     04 4E 05 F1 | 	add	fp, #4
30ce0     A7 26 02 FB | 	rdlong	local01, fp
30ce4     48 4E 85 F1 | 	sub	fp, #72
30ce8     01 26 86 F1 | 	sub	local01, #1
30cec     10 18 06 F1 | 	add	arg04, #16
30cf0     0C 27 62 FC | 	wrlong	local01, arg04
30cf4     5C 00 90 FD | 	jmp	#LR__4858
30cf8                 | LR__4855
30cf8     10 4E 05 F1 | 	add	fp, #16
30cfc     A7 18 0A FB | 	rdlong	arg04, fp wz
30d00     10 4E 85 F1 | 	sub	fp, #16
30d04     4C 00 90 5D |  if_ne	jmp	#LR__4857
30d08     1A 4E 05 F1 | 	add	fp, #26
30d0c     A7 18 C2 FA | 	rdbyte	arg04, fp
30d10     1A 4E 85 F1 | 	sub	fp, #26
30d14     10 18 CE F7 | 	test	arg04, #16 wz
30d18     10 4E 05 51 |  if_ne	add	fp, #16
30d1c     A7 08 68 5C |  if_ne	wrlong	#4, fp
30d20     10 4E 85 51 |  if_ne	sub	fp, #16
30d24     2C 00 90 5D |  if_ne	jmp	#LR__4856
30d28     0C 4E 05 F1 | 	add	fp, #12
30d2c     A7 18 C2 FA | 	rdbyte	arg04, fp
30d30     0C 4E 85 F1 | 	sub	fp, #12
30d34     02 18 CE F7 | 	test	arg04, #2 wz
30d38     1A 4E 05 51 |  if_ne	add	fp, #26
30d3c     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
30d40     1A 4E 85 51 |  if_ne	sub	fp, #26
30d44     01 26 CE 57 |  if_ne	test	local01, #1 wz
30d48     10 4E 05 51 |  if_ne	add	fp, #16
30d4c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
30d50     10 4E 85 51 |  if_ne	sub	fp, #16
30d54                 | LR__4856
30d54                 | LR__4857
30d54                 | LR__4858
30d54     10 4E 05 F1 | 	add	fp, #16
30d58     A7 26 0A FB | 	rdlong	local01, fp wz
30d5c     10 4E 85 F1 | 	sub	fp, #16
30d60     60 00 90 5D |  if_ne	jmp	#LR__4859
30d64     0C 4E 05 F1 | 	add	fp, #12
30d68     A7 28 C2 FA | 	rdbyte	local02, fp
30d6c     0C 4E 85 F1 | 	sub	fp, #12
30d70     08 28 CE F7 | 	test	local02, #8 wz
30d74     0C 4E 05 51 |  if_ne	add	fp, #12
30d78     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
30d7c     40 28 46 55 |  if_ne	or	local02, #64
30d80     A7 28 42 5C |  if_ne	wrbyte	local02, fp
30d84     0C 4E 85 51 |  if_ne	sub	fp, #12
30d88     04 4E 05 F1 | 	add	fp, #4
30d8c     A7 28 02 FB | 	rdlong	local02, fp
30d90     40 4E 05 F1 | 	add	fp, #64
30d94     A7 26 02 FB | 	rdlong	local01, fp
30d98     30 26 06 F1 | 	add	local01, #48
30d9c     13 27 02 FB | 	rdlong	local01, local01
30da0     20 28 06 F1 | 	add	local02, #32
30da4     14 27 62 FC | 	wrlong	local01, local02
30da8     40 4E 85 F1 | 	sub	fp, #64
30dac     A7 28 02 FB | 	rdlong	local02, fp
30db0     2C 4E 05 F1 | 	add	fp, #44
30db4     A7 26 02 FB | 	rdlong	local01, fp
30db8     30 4E 85 F1 | 	sub	fp, #48
30dbc     24 28 06 F1 | 	add	local02, #36
30dc0     14 27 62 FC | 	wrlong	local01, local02
30dc4                 | LR__4859
30dc4     10 4E 05 F1 | 	add	fp, #16
30dc8     A7 28 0A FB | 	rdlong	local02, fp wz
30dcc     10 4E 85 F1 | 	sub	fp, #16
30dd0     F4 02 90 5D |  if_ne	jmp	#LR__4865
30dd4     04 4E 05 F1 | 	add	fp, #4
30dd8     A7 28 02 FB | 	rdlong	local02, fp
30ddc     40 4E 05 F1 | 	add	fp, #64
30de0     A7 12 02 FB | 	rdlong	arg01, fp
30de4     14 4E 85 F1 | 	sub	fp, #20
30de8     A7 14 02 FB | 	rdlong	arg02, fp
30dec     30 4E 85 F1 | 	sub	fp, #48
30df0     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
30df4     08 28 06 F1 | 	add	local02, #8
30df8     14 FB 61 FC | 	wrlong	result1, local02
30dfc     04 4E 05 F1 | 	add	fp, #4
30e00     A7 28 02 FB | 	rdlong	local02, fp
30e04     2C 4E 05 F1 | 	add	fp, #44
30e08     A7 12 02 FB | 	rdlong	arg01, fp
30e0c     1C 12 06 F1 | 	add	arg01, #28
30e10                 | ' {
30e10                 | ' 
30e10                 | ' 	return *((DWORD*)ptr);
30e10     09 FB 01 FB | 	rdlong	result1, arg01
30e14     0C 28 06 F1 | 	add	local02, #12
30e18     14 FB 61 FC | 	wrlong	result1, local02
30e1c     2C 4E 85 F1 | 	sub	fp, #44
30e20     A7 28 02 FB | 	rdlong	local02, fp
30e24     40 4E 05 F1 | 	add	fp, #64
30e28     A7 26 02 FB | 	rdlong	local01, fp
30e2c     14 27 62 FC | 	wrlong	local01, local02
30e30     40 4E 85 F1 | 	sub	fp, #64
30e34     A7 28 02 FB | 	rdlong	local02, fp
30e38     40 4E 05 F1 | 	add	fp, #64
30e3c     A7 26 02 FB | 	rdlong	local01, fp
30e40     06 26 06 F1 | 	add	local01, #6
30e44     13 27 E2 FA | 	rdword	local01, local01
30e48     04 28 06 F1 | 	add	local02, #4
30e4c     14 27 52 FC | 	wrword	local01, local02
30e50     40 4E 85 F1 | 	sub	fp, #64
30e54     A7 28 02 FB | 	rdlong	local02, fp
30e58     08 4E 05 F1 | 	add	fp, #8
30e5c     A7 26 C2 FA | 	rdbyte	local01, fp
30e60     10 28 06 F1 | 	add	local02, #16
30e64     14 27 42 FC | 	wrbyte	local01, local02
30e68     08 4E 85 F1 | 	sub	fp, #8
30e6c     A7 28 02 FB | 	rdlong	local02, fp
30e70     11 28 06 F1 | 	add	local02, #17
30e74     14 01 48 FC | 	wrbyte	#0, local02
30e78     A7 28 02 FB | 	rdlong	local02, fp
30e7c     1C 28 06 F1 | 	add	local02, #28
30e80     14 01 68 FC | 	wrlong	#0, local02
30e84     A7 28 02 FB | 	rdlong	local02, fp
30e88     14 28 06 F1 | 	add	local02, #20
30e8c     14 01 68 FC | 	wrlong	#0, local02
30e90     A7 12 02 FB | 	rdlong	arg01, fp
30e94     04 4E 85 F1 | 	sub	fp, #4
30e98     28 12 06 F1 | 	add	arg01, #40
30e9c     00 14 06 F6 | 	mov	arg02, #0
30ea0     09 16 C6 F9 | 	decod	arg03, #9
30ea4     98 00 A0 FD | 	call	#\builtin_bytefill_
30ea8     0C 4E 05 F1 | 	add	fp, #12
30eac     A7 28 C2 FA | 	rdbyte	local02, fp
30eb0     0C 4E 85 F1 | 	sub	fp, #12
30eb4     20 28 CE F7 | 	test	local02, #32 wz
30eb8     0C 02 90 AD |  if_e	jmp	#LR__4864
30ebc     04 4E 05 F1 | 	add	fp, #4
30ec0     A7 26 02 FB | 	rdlong	local01, fp
30ec4     04 4E 85 F1 | 	sub	fp, #4
30ec8     0C 26 06 F1 | 	add	local01, #12
30ecc     13 29 02 FB | 	rdlong	local02, local01
30ed0     01 28 16 F2 | 	cmp	local02, #1 wc
30ed4     F0 01 90 CD |  if_b	jmp	#LR__4864
30ed8     04 4E 05 F1 | 	add	fp, #4
30edc     A7 26 02 FB | 	rdlong	local01, fp
30ee0     13 29 02 F6 | 	mov	local02, local01
30ee4     0C 26 06 F1 | 	add	local01, #12
30ee8     13 27 02 FB | 	rdlong	local01, local01
30eec     14 28 06 F1 | 	add	local02, #20
30ef0     14 27 62 FC | 	wrlong	local01, local02
30ef4     40 4E 05 F1 | 	add	fp, #64
30ef8     A7 28 02 FB | 	rdlong	local02, fp
30efc     0A 28 06 F1 | 	add	local02, #10
30f00     14 29 E2 FA | 	rdword	local02, local02
30f04     09 28 66 F0 | 	shl	local02, #9
30f08     08 4E 05 F1 | 	add	fp, #8
30f0c     A7 28 62 FC | 	wrlong	local02, fp
30f10     48 4E 85 F1 | 	sub	fp, #72
30f14     A7 28 02 FB | 	rdlong	local02, fp
30f18     08 28 06 F1 | 	add	local02, #8
30f1c     14 27 02 FB | 	rdlong	local01, local02
30f20     4C 4E 05 F1 | 	add	fp, #76
30f24     A7 26 62 FC | 	wrlong	local01, fp
30f28                 | ' 				fp->fptr = fp->obj.objsize;
30f28                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
30f28                 | ' 				clst = fp->obj.sclust;
30f28                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
30f28     4C 4E 85 F1 | 	sub	fp, #76
30f2c     A7 28 02 FB | 	rdlong	local02, fp
30f30     0C 28 06 F1 | 	add	local02, #12
30f34     14 27 02 FB | 	rdlong	local01, local02
30f38     58 4E 05 F1 | 	add	fp, #88
30f3c     A7 26 62 FC | 	wrlong	local01, fp
30f40     5C 4E 85 F1 | 	sub	fp, #92
30f44                 | LR__4860
30f44     10 4E 05 F1 | 	add	fp, #16
30f48     A7 28 0A FB | 	rdlong	local02, fp wz
30f4c     10 4E 85 F1 | 	sub	fp, #16
30f50     94 00 90 5D |  if_ne	jmp	#LR__4861
30f54     5C 4E 05 F1 | 	add	fp, #92
30f58     A7 28 02 FB | 	rdlong	local02, fp
30f5c     10 4E 85 F1 | 	sub	fp, #16
30f60     A7 26 02 FB | 	rdlong	local01, fp
30f64     4C 4E 85 F1 | 	sub	fp, #76
30f68     13 29 1A F2 | 	cmp	local02, local01 wcz
30f6c     78 00 90 ED |  if_be	jmp	#LR__4861
30f70     04 4E 05 F1 | 	add	fp, #4
30f74     A7 12 02 FB | 	rdlong	arg01, fp
30f78     4C 4E 05 F1 | 	add	fp, #76
30f7c     A7 14 02 FB | 	rdlong	arg02, fp
30f80     50 4E 85 F1 | 	sub	fp, #80
30f84     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
30f88     50 4E 05 F1 | 	add	fp, #80
30f8c     A7 FA 61 FC | 	wrlong	result1, fp
30f90     50 4E 85 F1 | 	sub	fp, #80
30f94     02 FA 15 F2 | 	cmp	result1, #2 wc
30f98     10 4E 05 C1 |  if_b	add	fp, #16
30f9c     A7 04 68 CC |  if_b	wrlong	#2, fp
30fa0     10 4E 85 C1 |  if_b	sub	fp, #16
30fa4     50 4E 05 F1 | 	add	fp, #80
30fa8     A7 28 02 FB | 	rdlong	local02, fp
30fac     50 4E 85 F1 | 	sub	fp, #80
30fb0     FF FF 7F FF 
30fb4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
30fb8     10 4E 05 A1 |  if_e	add	fp, #16
30fbc     A7 02 68 AC |  if_e	wrlong	#1, fp
30fc0     10 4E 85 A1 |  if_e	sub	fp, #16
30fc4     5C 4E 05 F1 | 	add	fp, #92
30fc8     A7 28 02 FB | 	rdlong	local02, fp
30fcc     10 4E 85 F1 | 	sub	fp, #16
30fd0     A7 26 02 FB | 	rdlong	local01, fp
30fd4     13 29 82 F1 | 	sub	local02, local01
30fd8     10 4E 05 F1 | 	add	fp, #16
30fdc     A7 28 62 FC | 	wrlong	local02, fp
30fe0     5C 4E 85 F1 | 	sub	fp, #92
30fe4     5C FF 9F FD | 	jmp	#LR__4860
30fe8                 | LR__4861
30fe8     04 4E 05 F1 | 	add	fp, #4
30fec     A7 28 02 FB | 	rdlong	local02, fp
30ff0     4C 4E 05 F1 | 	add	fp, #76
30ff4     A7 26 02 FB | 	rdlong	local01, fp
30ff8     18 28 06 F1 | 	add	local02, #24
30ffc     14 27 62 FC | 	wrlong	local01, local02
31000     40 4E 85 F1 | 	sub	fp, #64
31004     A7 28 0A FB | 	rdlong	local02, fp wz
31008     10 4E 85 F1 | 	sub	fp, #16
3100c     B8 00 90 5D |  if_ne	jmp	#LR__4863
31010     5C 4E 05 F1 | 	add	fp, #92
31014     A7 26 02 FB | 	rdlong	local01, fp
31018     5C 4E 85 F1 | 	sub	fp, #92
3101c     FF 27 CE F7 | 	test	local01, #511 wz
31020     A4 00 90 AD |  if_e	jmp	#LR__4863
31024     44 4E 05 F1 | 	add	fp, #68
31028     A7 12 02 FB | 	rdlong	arg01, fp
3102c     0C 4E 05 F1 | 	add	fp, #12
31030     A7 14 02 FB | 	rdlong	arg02, fp
31034     50 4E 85 F1 | 	sub	fp, #80
31038     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
3103c     58 4E 05 F1 | 	add	fp, #88
31040     A7 FA 61 FC | 	wrlong	result1, fp
31044     00 FA 4D F2 | 	cmps	result1, #0 wz
31048     58 4E 85 F1 | 	sub	fp, #88
3104c     10 4E 05 A1 |  if_e	add	fp, #16
31050     A7 04 68 AC |  if_e	wrlong	#2, fp
31054     10 4E 85 A1 |  if_e	sub	fp, #16
31058     6C 00 90 AD |  if_e	jmp	#LR__4862
3105c     04 4E 05 F1 | 	add	fp, #4
31060     A7 28 02 FB | 	rdlong	local02, fp
31064     54 4E 05 F1 | 	add	fp, #84
31068     A7 26 02 FB | 	rdlong	local01, fp
3106c     04 4E 05 F1 | 	add	fp, #4
31070     A7 18 02 FB | 	rdlong	arg04, fp
31074     09 18 46 F0 | 	shr	arg04, #9
31078     0C 27 02 F1 | 	add	local01, arg04
3107c     1C 28 06 F1 | 	add	local02, #28
31080     14 27 62 FC | 	wrlong	local01, local02
31084     18 4E 85 F1 | 	sub	fp, #24
31088     A7 28 02 FB | 	rdlong	local02, fp
3108c     01 28 06 F1 | 	add	local02, #1
31090     14 13 C2 FA | 	rdbyte	arg01, local02
31094     40 4E 85 F1 | 	sub	fp, #64
31098     A7 28 02 FB | 	rdlong	local02, fp
3109c     14 15 02 F6 | 	mov	arg02, local02
310a0     28 14 06 F1 | 	add	arg02, #40
310a4     04 4E 85 F1 | 	sub	fp, #4
310a8     1C 28 06 F1 | 	add	local02, #28
310ac     14 17 02 FB | 	rdlong	arg03, local02
310b0     01 18 06 F6 | 	mov	arg04, #1
310b4     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
310b8     00 FA 0D F2 | 	cmp	result1, #0 wz
310bc     10 4E 05 51 |  if_ne	add	fp, #16
310c0     A7 02 68 5C |  if_ne	wrlong	#1, fp
310c4     10 4E 85 51 |  if_ne	sub	fp, #16
310c8                 | LR__4862
310c8                 | LR__4863
310c8                 | LR__4864
310c8                 | LR__4865
310c8                 | LR__4866
310c8     10 4E 05 F1 | 	add	fp, #16
310cc     A7 28 0A FB | 	rdlong	local02, fp wz
310d0     10 4E 85 F1 | 	sub	fp, #16
310d4     04 4E 05 51 |  if_ne	add	fp, #4
310d8     A7 28 02 5B |  if_ne	rdlong	local02, fp
310dc     04 4E 85 51 |  if_ne	sub	fp, #4
310e0     14 01 68 5C |  if_ne	wrlong	#0, local02
310e4                 | ' 
310e4                 | ' 	return res ;
310e4     10 4E 05 F1 | 	add	fp, #16
310e8     A7 FA 01 FB | 	rdlong	result1, fp
310ec     10 4E 85 F1 | 	sub	fp, #16
310f0                 | LR__4867
310f0     A7 F0 03 F6 | 	mov	ptra, fp
310f4     B2 00 A0 FD | 	call	#popregs_
310f8                 | _fatfs_cc_f_open_ret
310f8     2D 00 64 FD | 	ret
310fc                 | 
310fc                 | _fatfs_cc_f_read
310fc     0E 4A 05 F6 | 	mov	COUNT_, #14
31100     A8 00 A0 FD | 	call	#pushregs_
31104     38 F0 07 F1 | 	add	ptra, #56
31108     04 4E 05 F1 | 	add	fp, #4
3110c     A7 12 62 FC | 	wrlong	arg01, fp
31110     04 4E 05 F1 | 	add	fp, #4
31114     A7 14 62 FC | 	wrlong	arg02, fp
31118     04 4E 05 F1 | 	add	fp, #4
3111c     A7 16 62 FC | 	wrlong	arg03, fp
31120     04 4E 05 F1 | 	add	fp, #4
31124     A7 18 62 FC | 	wrlong	arg04, fp
31128     08 4E 85 F1 | 	sub	fp, #8
3112c     A7 FA 01 FB | 	rdlong	result1, fp
31130     2C 4E 05 F1 | 	add	fp, #44
31134     A7 FA 61 FC | 	wrlong	result1, fp
31138     24 4E 85 F1 | 	sub	fp, #36
3113c     A7 FA 01 FB | 	rdlong	result1, fp
31140     FD 00 68 FC | 	wrlong	#0, result1
31144     0C 4E 85 F1 | 	sub	fp, #12
31148     A7 12 02 FB | 	rdlong	arg01, fp
3114c     14 4E 05 F1 | 	add	fp, #20
31150     A7 14 02 F6 | 	mov	arg02, fp
31154     18 4E 85 F1 | 	sub	fp, #24
31158     24 F7 BF FD | 	call	#_fatfs_cc_validate
3115c     14 4E 05 F1 | 	add	fp, #20
31160     A7 FA 61 FC | 	wrlong	result1, fp
31164     00 FA 4D F2 | 	cmps	result1, #0 wz
31168     14 4E 85 F1 | 	sub	fp, #20
3116c     20 00 90 5D |  if_ne	jmp	#LR__4870
31170     04 4E 05 F1 | 	add	fp, #4
31174     A7 14 02 FB | 	rdlong	arg02, fp
31178     11 14 06 F1 | 	add	arg02, #17
3117c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
31180     10 4E 05 F1 | 	add	fp, #16
31184     A7 14 62 FC | 	wrlong	arg02, fp
31188     14 4E 85 F1 | 	sub	fp, #20
3118c     10 00 90 AD |  if_e	jmp	#LR__4871
31190                 | LR__4870
31190     14 4E 05 F1 | 	add	fp, #20
31194     A7 FA 01 FB | 	rdlong	result1, fp
31198     14 4E 85 F1 | 	sub	fp, #20
3119c     EC 05 90 FD | 	jmp	#LR__4890
311a0                 | LR__4871
311a0     04 4E 05 F1 | 	add	fp, #4
311a4     A7 18 02 FB | 	rdlong	arg04, fp
311a8     04 4E 85 F1 | 	sub	fp, #4
311ac     10 18 06 F1 | 	add	arg04, #16
311b0     0C 19 C2 FA | 	rdbyte	arg04, arg04
311b4     01 18 CE F7 | 	test	arg04, #1 wz
311b8     07 FA 05 A6 |  if_e	mov	result1, #7
311bc     CC 05 90 AD |  if_e	jmp	#LR__4890
311c0     04 4E 05 F1 | 	add	fp, #4
311c4     A7 26 02 FB | 	rdlong	local01, fp
311c8     13 29 02 F6 | 	mov	local02, local01
311cc     0C 28 06 F1 | 	add	local02, #12
311d0     14 2B 02 FB | 	rdlong	local03, local02
311d4     14 26 06 F1 | 	add	local01, #20
311d8     13 27 02 FB | 	rdlong	local01, local01
311dc     13 2B 82 F1 | 	sub	local03, local01
311e0     20 4E 05 F1 | 	add	fp, #32
311e4     A7 2A 62 FC | 	wrlong	local03, fp
311e8     18 4E 85 F1 | 	sub	fp, #24
311ec     A7 2C 02 FB | 	rdlong	local04, fp
311f0     0C 4E 85 F1 | 	sub	fp, #12
311f4     15 2D 1A F2 | 	cmp	local04, local03 wcz
311f8     24 4E 05 11 |  if_a	add	fp, #36
311fc     A7 2C 02 1B |  if_a	rdlong	local04, fp
31200     18 4E 85 11 |  if_a	sub	fp, #24
31204     A7 2C 62 1C |  if_a	wrlong	local04, fp
31208     0C 4E 85 11 |  if_a	sub	fp, #12
3120c                 | ' 
3120c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
3120c                 | LR__4872
3120c     0C 4E 05 F1 | 	add	fp, #12
31210     A7 28 02 FB | 	rdlong	local02, fp
31214     0C 4E 85 F1 | 	sub	fp, #12
31218     14 2D 02 F6 | 	mov	local04, local02
3121c     01 2C 16 F2 | 	cmp	local04, #1 wc
31220     64 05 90 CD |  if_b	jmp	#LR__4889
31224     04 4E 05 F1 | 	add	fp, #4
31228     A7 2A 02 FB | 	rdlong	local03, fp
3122c     04 4E 85 F1 | 	sub	fp, #4
31230     14 2A 06 F1 | 	add	local03, #20
31234     15 2B 02 FB | 	rdlong	local03, local03
31238     FF 2B CE F7 | 	test	local03, #511 wz
3123c     3C 04 90 5D |  if_ne	jmp	#LR__4887
31240     04 4E 05 F1 | 	add	fp, #4
31244     A7 26 02 FB | 	rdlong	local01, fp
31248     14 26 06 F1 | 	add	local01, #20
3124c     13 2B 02 FB | 	rdlong	local03, local01
31250     09 2A 46 F0 | 	shr	local03, #9
31254     14 4E 05 F1 | 	add	fp, #20
31258     A7 2E 02 FB | 	rdlong	local05, fp
3125c     17 31 02 F6 | 	mov	local06, local05
31260     0A 30 06 F1 | 	add	local06, #10
31264     18 33 E2 FA | 	rdword	local07, local06
31268     0A 30 86 F1 | 	sub	local06, #10
3126c     19 35 32 F9 | 	getword	local08, local07, #0
31270     01 34 86 F1 | 	sub	local08, #1
31274     1A 2B 0A F5 | 	and	local03, local08 wz
31278     18 4E 05 F1 | 	add	fp, #24
3127c     A7 2A 62 FC | 	wrlong	local03, fp
31280     30 4E 85 F1 | 	sub	fp, #48
31284     E0 00 90 5D |  if_ne	jmp	#LR__4877
31288     04 4E 05 F1 | 	add	fp, #4
3128c     A7 2A 02 FB | 	rdlong	local03, fp
31290     04 4E 85 F1 | 	sub	fp, #4
31294     14 2A 06 F1 | 	add	local03, #20
31298     15 2B 0A FB | 	rdlong	local03, local03 wz
3129c     20 00 90 5D |  if_ne	jmp	#LR__4873
312a0     04 4E 05 F1 | 	add	fp, #4
312a4     A7 2A 02 FB | 	rdlong	local03, fp
312a8     08 2A 06 F1 | 	add	local03, #8
312ac     15 2B 02 FB | 	rdlong	local03, local03
312b0     18 4E 05 F1 | 	add	fp, #24
312b4     A7 2A 62 FC | 	wrlong	local03, fp
312b8     1C 4E 85 F1 | 	sub	fp, #28
312bc     28 00 90 FD | 	jmp	#LR__4874
312c0                 | LR__4873
312c0     04 4E 05 F1 | 	add	fp, #4
312c4     A7 34 02 FB | 	rdlong	local08, fp
312c8     1A 13 02 F6 | 	mov	arg01, local08
312cc     04 4E 85 F1 | 	sub	fp, #4
312d0     18 34 06 F1 | 	add	local08, #24
312d4     1A 15 02 FB | 	rdlong	arg02, local08
312d8     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
312dc     1C 4E 05 F1 | 	add	fp, #28
312e0     A7 FA 61 FC | 	wrlong	result1, fp
312e4     1C 4E 85 F1 | 	sub	fp, #28
312e8                 | LR__4874
312e8     1C 4E 05 F1 | 	add	fp, #28
312ec     A7 2A 02 FB | 	rdlong	local03, fp
312f0     1C 4E 85 F1 | 	sub	fp, #28
312f4     02 2A 16 F2 | 	cmp	local03, #2 wc
312f8     1C 00 90 3D |  if_ae	jmp	#LR__4875
312fc     04 4E 05 F1 | 	add	fp, #4
31300     A7 2A 02 FB | 	rdlong	local03, fp
31304     04 4E 85 F1 | 	sub	fp, #4
31308     11 2A 06 F1 | 	add	local03, #17
3130c     15 05 48 FC | 	wrbyte	#2, local03
31310     02 FA 05 F6 | 	mov	result1, #2
31314     74 04 90 FD | 	jmp	#LR__4890
31318                 | LR__4875
31318     1C 4E 05 F1 | 	add	fp, #28
3131c     A7 2A 02 FB | 	rdlong	local03, fp
31320     1C 4E 85 F1 | 	sub	fp, #28
31324     FF FF 7F FF 
31328     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
3132c     1C 00 90 5D |  if_ne	jmp	#LR__4876
31330     04 4E 05 F1 | 	add	fp, #4
31334     A7 2A 02 FB | 	rdlong	local03, fp
31338     04 4E 85 F1 | 	sub	fp, #4
3133c     11 2A 06 F1 | 	add	local03, #17
31340     15 03 48 FC | 	wrbyte	#1, local03
31344     01 FA 05 F6 | 	mov	result1, #1
31348     40 04 90 FD | 	jmp	#LR__4890
3134c                 | LR__4876
3134c     04 4E 05 F1 | 	add	fp, #4
31350     A7 2A 02 FB | 	rdlong	local03, fp
31354     18 4E 05 F1 | 	add	fp, #24
31358     A7 34 02 FB | 	rdlong	local08, fp
3135c     1C 4E 85 F1 | 	sub	fp, #28
31360     18 2A 06 F1 | 	add	local03, #24
31364     15 35 62 FC | 	wrlong	local08, local03
31368                 | LR__4877
31368     18 4E 05 F1 | 	add	fp, #24
3136c     A7 12 02 FB | 	rdlong	arg01, fp
31370     14 4E 85 F1 | 	sub	fp, #20
31374     A7 2A 02 FB | 	rdlong	local03, fp
31378     04 4E 85 F1 | 	sub	fp, #4
3137c     18 2A 06 F1 | 	add	local03, #24
31380     15 15 02 FB | 	rdlong	arg02, local03
31384     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
31388     20 4E 05 F1 | 	add	fp, #32
3138c     A7 FA 61 FC | 	wrlong	result1, fp
31390     20 4E 85 F1 | 	sub	fp, #32
31394     00 FA 0D F2 | 	cmp	result1, #0 wz
31398     1C 00 90 5D |  if_ne	jmp	#LR__4878
3139c     04 4E 05 F1 | 	add	fp, #4
313a0     A7 2A 02 FB | 	rdlong	local03, fp
313a4     04 4E 85 F1 | 	sub	fp, #4
313a8     11 2A 06 F1 | 	add	local03, #17
313ac     15 05 48 FC | 	wrbyte	#2, local03
313b0     02 FA 05 F6 | 	mov	result1, #2
313b4     D4 03 90 FD | 	jmp	#LR__4890
313b8                 | LR__4878
313b8     20 4E 05 F1 | 	add	fp, #32
313bc     A7 2A 02 FB | 	rdlong	local03, fp
313c0     10 4E 05 F1 | 	add	fp, #16
313c4     A7 34 02 FB | 	rdlong	local08, fp
313c8     1A 2B 02 F1 | 	add	local03, local08
313cc     10 4E 85 F1 | 	sub	fp, #16
313d0     A7 2A 62 FC | 	wrlong	local03, fp
313d4     14 4E 85 F1 | 	sub	fp, #20
313d8     A7 2A 02 FB | 	rdlong	local03, fp
313dc     09 2A 46 F0 | 	shr	local03, #9
313e0     20 4E 05 F1 | 	add	fp, #32
313e4     A7 2A 62 FC | 	wrlong	local03, fp
313e8     2C 4E 85 F1 | 	sub	fp, #44
313ec     01 2A 16 F2 | 	cmp	local03, #1 wc
313f0     5C 01 90 CD |  if_b	jmp	#LR__4882
313f4     30 4E 05 F1 | 	add	fp, #48
313f8     A7 2A 02 FB | 	rdlong	local03, fp
313fc     04 4E 85 F1 | 	sub	fp, #4
31400     A7 34 02 FB | 	rdlong	local08, fp
31404     1A 2B 02 F1 | 	add	local03, local08
31408     14 4E 85 F1 | 	sub	fp, #20
3140c     A7 34 02 FB | 	rdlong	local08, fp
31410     18 4E 85 F1 | 	sub	fp, #24
31414     0A 34 06 F1 | 	add	local08, #10
31418     1A 35 E2 FA | 	rdword	local08, local08
3141c     1A 2B 1A F2 | 	cmp	local03, local08 wcz
31420     28 00 90 ED |  if_be	jmp	#LR__4879
31424     18 4E 05 F1 | 	add	fp, #24
31428     A7 26 02 FB | 	rdlong	local01, fp
3142c     0A 26 06 F1 | 	add	local01, #10
31430     13 2B E2 FA | 	rdword	local03, local01
31434     18 4E 05 F1 | 	add	fp, #24
31438     A7 34 02 FB | 	rdlong	local08, fp
3143c     1A 2B 82 F1 | 	sub	local03, local08
31440     04 4E 85 F1 | 	sub	fp, #4
31444     A7 2A 62 FC | 	wrlong	local03, fp
31448     2C 4E 85 F1 | 	sub	fp, #44
3144c                 | LR__4879
3144c     18 4E 05 F1 | 	add	fp, #24
31450     A7 26 02 FB | 	rdlong	local01, fp
31454     01 26 06 F1 | 	add	local01, #1
31458     13 13 C2 FA | 	rdbyte	arg01, local01
3145c     1C 4E 05 F1 | 	add	fp, #28
31460     A7 14 02 FB | 	rdlong	arg02, fp
31464     14 4E 85 F1 | 	sub	fp, #20
31468     A7 16 02 FB | 	rdlong	arg03, fp
3146c     0C 4E 05 F1 | 	add	fp, #12
31470     A7 18 02 FB | 	rdlong	arg04, fp
31474     2C 4E 85 F1 | 	sub	fp, #44
31478     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
3147c     00 FA 0D F2 | 	cmp	result1, #0 wz
31480     1C 00 90 AD |  if_e	jmp	#LR__4880
31484     04 4E 05 F1 | 	add	fp, #4
31488     A7 2A 02 FB | 	rdlong	local03, fp
3148c     04 4E 85 F1 | 	sub	fp, #4
31490     11 2A 06 F1 | 	add	local03, #17
31494     15 03 48 FC | 	wrbyte	#1, local03
31498     01 FA 05 F6 | 	mov	result1, #1
3149c     EC 02 90 FD | 	jmp	#LR__4890
314a0                 | LR__4880
314a0     04 4E 05 F1 | 	add	fp, #4
314a4     A7 26 02 FB | 	rdlong	local01, fp
314a8     04 4E 85 F1 | 	sub	fp, #4
314ac     10 26 06 F1 | 	add	local01, #16
314b0     13 2B C2 FA | 	rdbyte	local03, local01
314b4     80 2A CE F7 | 	test	local03, #128 wz
314b8     78 00 90 AD |  if_e	jmp	#LR__4881
314bc     04 4E 05 F1 | 	add	fp, #4
314c0     A7 34 02 FB | 	rdlong	local08, fp
314c4     1C 34 06 F1 | 	add	local08, #28
314c8     1A 35 02 FB | 	rdlong	local08, local08
314cc     1C 4E 05 F1 | 	add	fp, #28
314d0     A7 36 02 FB | 	rdlong	local09, fp
314d4     1B 35 82 F1 | 	sub	local08, local09
314d8     0C 4E 05 F1 | 	add	fp, #12
314dc     A7 38 02 FB | 	rdlong	local10, fp
314e0     2C 4E 85 F1 | 	sub	fp, #44
314e4     1C 3B 02 F6 | 	mov	local11, local10
314e8     1D 35 12 F2 | 	cmp	local08, local11 wc
314ec     44 00 90 3D |  if_ae	jmp	#LR__4881
314f0     34 4E 05 F1 | 	add	fp, #52
314f4     A7 12 02 FB | 	rdlong	arg01, fp
314f8     30 4E 85 F1 | 	sub	fp, #48
314fc     A7 14 02 FB | 	rdlong	arg02, fp
31500     0A 3B 02 F6 | 	mov	local11, arg02
31504     1C 3A 06 F1 | 	add	local11, #28
31508     1D 37 02 FB | 	rdlong	local09, local11
3150c     1C 4E 05 F1 | 	add	fp, #28
31510     A7 2E 02 FB | 	rdlong	local05, fp
31514     17 37 82 F1 | 	sub	local09, local05
31518     09 36 66 F0 | 	shl	local09, #9
3151c     1B 3B 02 F6 | 	mov	local11, local09
31520     1B 13 02 F1 | 	add	arg01, local09
31524     20 4E 85 F1 | 	sub	fp, #32
31528     28 14 06 F1 | 	add	arg02, #40
3152c     09 16 C6 F9 | 	decod	arg03, #9
31530     64 43 BF FD | 	call	#__system____builtin_memmove
31534                 | LR__4881
31534     2C 4E 05 F1 | 	add	fp, #44
31538     A7 2A 02 FB | 	rdlong	local03, fp
3153c     09 2A 66 F0 | 	shl	local03, #9
31540     04 4E 85 F1 | 	sub	fp, #4
31544     A7 2A 62 FC | 	wrlong	local03, fp
31548     28 4E 85 F1 | 	sub	fp, #40
3154c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
3154c                 | ' 				}
3154c                 | ' 
3154c                 | ' 
3154c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
3154c                 | ' 				continue;
3154c     B4 01 90 FD | 	jmp	#LR__4888
31550                 | LR__4882
31550     04 4E 05 F1 | 	add	fp, #4
31554     A7 2A 02 FB | 	rdlong	local03, fp
31558     1C 2A 06 F1 | 	add	local03, #28
3155c     15 2B 02 FB | 	rdlong	local03, local03
31560     1C 4E 05 F1 | 	add	fp, #28
31564     A7 26 02 FB | 	rdlong	local01, fp
31568     20 4E 85 F1 | 	sub	fp, #32
3156c     13 2B 0A F2 | 	cmp	local03, local01 wz
31570     EC 00 90 AD |  if_e	jmp	#LR__4886
31574     04 4E 05 F1 | 	add	fp, #4
31578     A7 26 02 FB | 	rdlong	local01, fp
3157c     04 4E 85 F1 | 	sub	fp, #4
31580     10 26 06 F1 | 	add	local01, #16
31584     13 2B C2 FA | 	rdbyte	local03, local01
31588     80 2A CE F7 | 	test	local03, #128 wz
3158c     7C 00 90 AD |  if_e	jmp	#LR__4884
31590     18 4E 05 F1 | 	add	fp, #24
31594     A7 26 02 FB | 	rdlong	local01, fp
31598     01 26 06 F1 | 	add	local01, #1
3159c     13 13 C2 FA | 	rdbyte	arg01, local01
315a0     14 4E 85 F1 | 	sub	fp, #20
315a4     A7 2A 02 FB | 	rdlong	local03, fp
315a8     15 15 02 F6 | 	mov	arg02, local03
315ac     28 14 06 F1 | 	add	arg02, #40
315b0     04 4E 85 F1 | 	sub	fp, #4
315b4     1C 2A 06 F1 | 	add	local03, #28
315b8     15 17 02 FB | 	rdlong	arg03, local03
315bc     01 18 06 F6 | 	mov	arg04, #1
315c0     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
315c4     00 FA 0D F2 | 	cmp	result1, #0 wz
315c8     1C 00 90 AD |  if_e	jmp	#LR__4883
315cc     04 4E 05 F1 | 	add	fp, #4
315d0     A7 2A 02 FB | 	rdlong	local03, fp
315d4     04 4E 85 F1 | 	sub	fp, #4
315d8     11 2A 06 F1 | 	add	local03, #17
315dc     15 03 48 FC | 	wrbyte	#1, local03
315e0     01 FA 05 F6 | 	mov	result1, #1
315e4     A4 01 90 FD | 	jmp	#LR__4890
315e8                 | LR__4883
315e8     04 4E 05 F1 | 	add	fp, #4
315ec     A7 3A 02 FB | 	rdlong	local11, fp
315f0     1D 2B 02 F6 | 	mov	local03, local11
315f4     04 4E 85 F1 | 	sub	fp, #4
315f8     10 3A 06 F1 | 	add	local11, #16
315fc     1D 3B C2 FA | 	rdbyte	local11, local11
31600     7F 3A 06 F5 | 	and	local11, #127
31604     10 2A 06 F1 | 	add	local03, #16
31608     15 3B 42 FC | 	wrbyte	local11, local03
3160c                 | LR__4884
3160c     18 4E 05 F1 | 	add	fp, #24
31610     A7 26 02 FB | 	rdlong	local01, fp
31614     01 26 06 F1 | 	add	local01, #1
31618     13 13 C2 FA | 	rdbyte	arg01, local01
3161c     14 4E 85 F1 | 	sub	fp, #20
31620     A7 14 02 FB | 	rdlong	arg02, fp
31624     28 14 06 F1 | 	add	arg02, #40
31628     1C 4E 05 F1 | 	add	fp, #28
3162c     A7 16 02 FB | 	rdlong	arg03, fp
31630     20 4E 85 F1 | 	sub	fp, #32
31634     01 18 06 F6 | 	mov	arg04, #1
31638     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
3163c     00 FA 0D F2 | 	cmp	result1, #0 wz
31640     1C 00 90 AD |  if_e	jmp	#LR__4885
31644     04 4E 05 F1 | 	add	fp, #4
31648     A7 2A 02 FB | 	rdlong	local03, fp
3164c     04 4E 85 F1 | 	sub	fp, #4
31650     11 2A 06 F1 | 	add	local03, #17
31654     15 03 48 FC | 	wrbyte	#1, local03
31658     01 FA 05 F6 | 	mov	result1, #1
3165c     2C 01 90 FD | 	jmp	#LR__4890
31660                 | LR__4885
31660                 | LR__4886
31660     04 4E 05 F1 | 	add	fp, #4
31664     A7 2A 02 FB | 	rdlong	local03, fp
31668     1C 4E 05 F1 | 	add	fp, #28
3166c     A7 3A 02 FB | 	rdlong	local11, fp
31670     20 4E 85 F1 | 	sub	fp, #32
31674     1C 2A 06 F1 | 	add	local03, #28
31678     15 3B 62 FC | 	wrlong	local11, local03
3167c                 | LR__4887
3167c     04 4E 05 F1 | 	add	fp, #4
31680     A7 26 02 FB | 	rdlong	local01, fp
31684     14 26 06 F1 | 	add	local01, #20
31688     13 3B 02 FB | 	rdlong	local11, local01
3168c     FF 3B 06 F5 | 	and	local11, #511
31690     09 2A C6 F9 | 	decod	local03, #9
31694     1D 2B 82 F1 | 	sub	local03, local11
31698     24 4E 05 F1 | 	add	fp, #36
3169c     A7 2A 62 FC | 	wrlong	local03, fp
316a0     1C 4E 85 F1 | 	sub	fp, #28
316a4     A7 3A 02 FB | 	rdlong	local11, fp
316a8     0C 4E 85 F1 | 	sub	fp, #12
316ac     1D 2B 1A F2 | 	cmp	local03, local11 wcz
316b0     0C 4E 05 11 |  if_a	add	fp, #12
316b4     A7 2A 02 1B |  if_a	rdlong	local03, fp
316b8     1C 4E 05 11 |  if_a	add	fp, #28
316bc     A7 2A 62 1C |  if_a	wrlong	local03, fp
316c0     28 4E 85 11 |  if_a	sub	fp, #40
316c4     34 4E 05 F1 | 	add	fp, #52
316c8     A7 12 02 FB | 	rdlong	arg01, fp
316cc     30 4E 85 F1 | 	sub	fp, #48
316d0     A7 30 02 FB | 	rdlong	local06, fp
316d4     18 15 02 F6 | 	mov	arg02, local06
316d8     28 14 06 F1 | 	add	arg02, #40
316dc     14 30 06 F1 | 	add	local06, #20
316e0     18 3B 02 FB | 	rdlong	local11, local06
316e4     1D 37 02 F6 | 	mov	local09, local11
316e8     1B 39 02 F6 | 	mov	local10, local09
316ec     FF 39 06 F5 | 	and	local10, #511
316f0     1C 15 02 F1 | 	add	arg02, local10
316f4     24 4E 05 F1 | 	add	fp, #36
316f8     A7 16 02 FB | 	rdlong	arg03, fp
316fc     28 4E 85 F1 | 	sub	fp, #40
31700     94 41 BF FD | 	call	#__system____builtin_memmove
31704                 | LR__4888
31704     0C 4E 05 F1 | 	add	fp, #12
31708     A7 2A 02 FB | 	rdlong	local03, fp
3170c     1C 4E 05 F1 | 	add	fp, #28
31710     A7 34 02 FB | 	rdlong	local08, fp
31714     1A 2B 82 F1 | 	sub	local03, local08
31718     1C 4E 85 F1 | 	sub	fp, #28
3171c     A7 2A 62 FC | 	wrlong	local03, fp
31720     04 4E 05 F1 | 	add	fp, #4
31724     A7 26 02 FB | 	rdlong	local01, fp
31728     13 33 02 FB | 	rdlong	local07, local01
3172c     18 4E 05 F1 | 	add	fp, #24
31730     A7 34 02 FB | 	rdlong	local08, fp
31734     1A 33 02 F1 | 	add	local07, local08
31738     13 33 62 FC | 	wrlong	local07, local01
3173c     0C 4E 05 F1 | 	add	fp, #12
31740     A7 2A 02 FB | 	rdlong	local03, fp
31744     0C 4E 85 F1 | 	sub	fp, #12
31748     A7 3C 02 FB | 	rdlong	local12, fp
3174c     1E 2B 02 F1 | 	add	local03, local12
31750     0C 4E 05 F1 | 	add	fp, #12
31754     A7 2A 62 FC | 	wrlong	local03, fp
31758     30 4E 85 F1 | 	sub	fp, #48
3175c     A7 3E 02 FB | 	rdlong	local13, fp
31760     1F 2B 02 F6 | 	mov	local03, local13
31764     14 3E 06 F1 | 	add	local13, #20
31768     1F 41 02 FB | 	rdlong	local14, local13
3176c     24 4E 05 F1 | 	add	fp, #36
31770     A7 30 02 FB | 	rdlong	local06, fp
31774     28 4E 85 F1 | 	sub	fp, #40
31778     18 41 02 F1 | 	add	local14, local06
3177c     14 2A 06 F1 | 	add	local03, #20
31780     15 41 62 FC | 	wrlong	local14, local03
31784     84 FA 9F FD | 	jmp	#LR__4872
31788                 | LR__4889
31788                 | ' 
31788                 | ' 
31788                 | ' 
31788                 | ' 
31788                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
31788                 | ' 
31788                 | ' 	}
31788                 | ' 
31788                 | ' 	return FR_OK ;
31788     00 FA 05 F6 | 	mov	result1, #0
3178c                 | LR__4890
3178c     A7 F0 03 F6 | 	mov	ptra, fp
31790     B2 00 A0 FD | 	call	#popregs_
31794                 | _fatfs_cc_f_read_ret
31794     2D 00 64 FD | 	ret
31798                 | 
31798                 | _fatfs_cc_f_write
31798     15 4A 05 F6 | 	mov	COUNT_, #21
3179c     A8 00 A0 FD | 	call	#pushregs_
317a0     34 F0 07 F1 | 	add	ptra, #52
317a4     04 4E 05 F1 | 	add	fp, #4
317a8     A7 12 62 FC | 	wrlong	arg01, fp
317ac     04 4E 05 F1 | 	add	fp, #4
317b0     A7 14 62 FC | 	wrlong	arg02, fp
317b4     04 4E 05 F1 | 	add	fp, #4
317b8     A7 16 62 FC | 	wrlong	arg03, fp
317bc     04 4E 05 F1 | 	add	fp, #4
317c0     A7 18 62 FC | 	wrlong	arg04, fp
317c4     08 4E 85 F1 | 	sub	fp, #8
317c8     A7 FA 01 FB | 	rdlong	result1, fp
317cc     28 4E 05 F1 | 	add	fp, #40
317d0     A7 FA 61 FC | 	wrlong	result1, fp
317d4     20 4E 85 F1 | 	sub	fp, #32
317d8     A7 FA 01 FB | 	rdlong	result1, fp
317dc     FD 00 68 FC | 	wrlong	#0, result1
317e0     0C 4E 85 F1 | 	sub	fp, #12
317e4     A7 12 02 FB | 	rdlong	arg01, fp
317e8     14 4E 05 F1 | 	add	fp, #20
317ec     A7 14 02 F6 | 	mov	arg02, fp
317f0     18 4E 85 F1 | 	sub	fp, #24
317f4     88 F0 BF FD | 	call	#_fatfs_cc_validate
317f8     14 4E 05 F1 | 	add	fp, #20
317fc     A7 FA 61 FC | 	wrlong	result1, fp
31800     00 FA 4D F2 | 	cmps	result1, #0 wz
31804     14 4E 85 F1 | 	sub	fp, #20
31808     20 00 90 5D |  if_ne	jmp	#LR__4900
3180c     04 4E 05 F1 | 	add	fp, #4
31810     A7 14 02 FB | 	rdlong	arg02, fp
31814     11 14 06 F1 | 	add	arg02, #17
31818     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
3181c     10 4E 05 F1 | 	add	fp, #16
31820     A7 14 62 FC | 	wrlong	arg02, fp
31824     14 4E 85 F1 | 	sub	fp, #20
31828     10 00 90 AD |  if_e	jmp	#LR__4901
3182c                 | LR__4900
3182c     14 4E 05 F1 | 	add	fp, #20
31830     A7 FA 01 FB | 	rdlong	result1, fp
31834     14 4E 85 F1 | 	sub	fp, #20
31838     44 07 90 FD | 	jmp	#LR__4923
3183c                 | LR__4901
3183c     04 4E 05 F1 | 	add	fp, #4
31840     A7 14 02 FB | 	rdlong	arg02, fp
31844     04 4E 85 F1 | 	sub	fp, #4
31848     10 14 06 F1 | 	add	arg02, #16
3184c     0A 15 C2 FA | 	rdbyte	arg02, arg02
31850     02 14 CE F7 | 	test	arg02, #2 wz
31854     07 FA 05 A6 |  if_e	mov	result1, #7
31858     24 07 90 AD |  if_e	jmp	#LR__4923
3185c     04 4E 05 F1 | 	add	fp, #4
31860     A7 14 02 FB | 	rdlong	arg02, fp
31864     0A 13 02 F6 | 	mov	arg01, arg02
31868     14 12 06 F1 | 	add	arg01, #20
3186c     09 13 02 FB | 	rdlong	arg01, arg01
31870     08 4E 05 F1 | 	add	fp, #8
31874     A7 FA 01 FB | 	rdlong	result1, fp
31878     FD 12 02 F1 | 	add	arg01, result1
3187c     0C 4E 85 F1 | 	sub	fp, #12
31880     14 14 06 F1 | 	add	arg02, #20
31884     0A FB 01 FB | 	rdlong	result1, arg02
31888     FD 12 12 F2 | 	cmp	arg01, result1 wc
3188c     24 00 90 3D |  if_ae	jmp	#LR__4902
31890     04 4E 05 F1 | 	add	fp, #4
31894     A7 14 02 FB | 	rdlong	arg02, fp
31898     01 FA 65 F6 | 	neg	result1, #1
3189c     14 14 06 F1 | 	add	arg02, #20
318a0     0A 15 02 FB | 	rdlong	arg02, arg02
318a4     0A FB 81 F1 | 	sub	result1, arg02
318a8     08 4E 05 F1 | 	add	fp, #8
318ac     A7 FA 61 FC | 	wrlong	result1, fp
318b0     0C 4E 85 F1 | 	sub	fp, #12
318b4                 | LR__4902
318b4                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
318b4                 | ' 	}
318b4                 | ' 
318b4                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
318b4                 | LR__4903
318b4     0C 4E 05 F1 | 	add	fp, #12
318b8     A7 FA 01 FB | 	rdlong	result1, fp
318bc     0C 4E 85 F1 | 	sub	fp, #12
318c0     01 FA 15 F2 | 	cmp	result1, #1 wc
318c4     90 06 90 CD |  if_b	jmp	#LR__4922
318c8     04 4E 05 F1 | 	add	fp, #4
318cc     A7 FA 01 FB | 	rdlong	result1, fp
318d0     04 4E 85 F1 | 	sub	fp, #4
318d4     14 FA 05 F1 | 	add	result1, #20
318d8     FD FA 01 FB | 	rdlong	result1, result1
318dc     FF FB CD F7 | 	test	result1, #511 wz
318e0     D8 04 90 5D |  if_ne	jmp	#LR__4918
318e4     04 4E 05 F1 | 	add	fp, #4
318e8     A7 FA 01 FB | 	rdlong	result1, fp
318ec     14 FA 05 F1 | 	add	result1, #20
318f0     FD FA 01 FB | 	rdlong	result1, result1
318f4     09 FA 45 F0 | 	shr	result1, #9
318f8     14 4E 05 F1 | 	add	fp, #20
318fc     A7 14 02 FB | 	rdlong	arg02, fp
31900     0A 14 06 F1 | 	add	arg02, #10
31904     0A 19 E2 FA | 	rdword	arg04, arg02
31908     0C 15 32 F9 | 	getword	arg02, arg04, #0
3190c     01 14 86 F1 | 	sub	arg02, #1
31910     0A FB 09 F5 | 	and	result1, arg02 wz
31914     14 4E 05 F1 | 	add	fp, #20
31918     A7 FA 61 FC | 	wrlong	result1, fp
3191c     2C 4E 85 F1 | 	sub	fp, #44
31920     44 01 90 5D |  if_ne	jmp	#LR__4909
31924     04 4E 05 F1 | 	add	fp, #4
31928     A7 FA 01 FB | 	rdlong	result1, fp
3192c     04 4E 85 F1 | 	sub	fp, #4
31930     14 FA 05 F1 | 	add	result1, #20
31934     FD 14 0A FB | 	rdlong	arg02, result1 wz
31938     44 00 90 5D |  if_ne	jmp	#LR__4904
3193c     04 4E 05 F1 | 	add	fp, #4
31940     A7 14 02 FB | 	rdlong	arg02, fp
31944     08 14 06 F1 | 	add	arg02, #8
31948     0A 15 0A FB | 	rdlong	arg02, arg02 wz
3194c     18 4E 05 F1 | 	add	fp, #24
31950     A7 14 62 FC | 	wrlong	arg02, fp
31954     1C 4E 85 F1 | 	sub	fp, #28
31958     4C 00 90 5D |  if_ne	jmp	#LR__4905
3195c     04 4E 05 F1 | 	add	fp, #4
31960     A7 12 02 FB | 	rdlong	arg01, fp
31964     04 4E 85 F1 | 	sub	fp, #4
31968     00 14 06 F6 | 	mov	arg02, #0
3196c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
31970     1C 4E 05 F1 | 	add	fp, #28
31974     A7 FA 61 FC | 	wrlong	result1, fp
31978     1C 4E 85 F1 | 	sub	fp, #28
3197c     28 00 90 FD | 	jmp	#LR__4905
31980                 | LR__4904
31980     04 4E 05 F1 | 	add	fp, #4
31984     A7 18 02 FB | 	rdlong	arg04, fp
31988     0C 13 02 F6 | 	mov	arg01, arg04
3198c     04 4E 85 F1 | 	sub	fp, #4
31990     18 18 06 F1 | 	add	arg04, #24
31994     0C 15 02 FB | 	rdlong	arg02, arg04
31998     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
3199c     1C 4E 05 F1 | 	add	fp, #28
319a0     A7 FA 61 FC | 	wrlong	result1, fp
319a4     1C 4E 85 F1 | 	sub	fp, #28
319a8                 | LR__4905
319a8     1C 4E 05 F1 | 	add	fp, #28
319ac     A7 FA 09 FB | 	rdlong	result1, fp wz
319b0     1C 4E 85 F1 | 	sub	fp, #28
319b4     A0 05 90 AD |  if_e	jmp	#LR__4922
319b8     1C 4E 05 F1 | 	add	fp, #28
319bc     A7 FA 01 FB | 	rdlong	result1, fp
319c0     1C 4E 85 F1 | 	sub	fp, #28
319c4     01 FA 0D F2 | 	cmp	result1, #1 wz
319c8     1C 00 90 5D |  if_ne	jmp	#LR__4906
319cc     04 4E 05 F1 | 	add	fp, #4
319d0     A7 FA 01 FB | 	rdlong	result1, fp
319d4     04 4E 85 F1 | 	sub	fp, #4
319d8     11 FA 05 F1 | 	add	result1, #17
319dc     FD 04 48 FC | 	wrbyte	#2, result1
319e0     02 FA 05 F6 | 	mov	result1, #2
319e4     98 05 90 FD | 	jmp	#LR__4923
319e8                 | LR__4906
319e8     1C 4E 05 F1 | 	add	fp, #28
319ec     A7 FA 01 FB | 	rdlong	result1, fp
319f0     1C 4E 85 F1 | 	sub	fp, #28
319f4     FF FF 7F FF 
319f8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
319fc     1C 00 90 5D |  if_ne	jmp	#LR__4907
31a00     04 4E 05 F1 | 	add	fp, #4
31a04     A7 FA 01 FB | 	rdlong	result1, fp
31a08     04 4E 85 F1 | 	sub	fp, #4
31a0c     11 FA 05 F1 | 	add	result1, #17
31a10     FD 02 48 FC | 	wrbyte	#1, result1
31a14     01 FA 05 F6 | 	mov	result1, #1
31a18     64 05 90 FD | 	jmp	#LR__4923
31a1c                 | LR__4907
31a1c     04 4E 05 F1 | 	add	fp, #4
31a20     A7 FA 01 FB | 	rdlong	result1, fp
31a24     18 4E 05 F1 | 	add	fp, #24
31a28     A7 18 02 FB | 	rdlong	arg04, fp
31a2c     18 FA 05 F1 | 	add	result1, #24
31a30     FD 18 62 FC | 	wrlong	arg04, result1
31a34     18 4E 85 F1 | 	sub	fp, #24
31a38     A7 FA 01 FB | 	rdlong	result1, fp
31a3c     04 4E 85 F1 | 	sub	fp, #4
31a40     08 FA 05 F1 | 	add	result1, #8
31a44     FD FA 09 FB | 	rdlong	result1, result1 wz
31a48     1C 00 90 5D |  if_ne	jmp	#LR__4908
31a4c     04 4E 05 F1 | 	add	fp, #4
31a50     A7 18 02 FB | 	rdlong	arg04, fp
31a54     18 4E 05 F1 | 	add	fp, #24
31a58     A7 FA 01 FB | 	rdlong	result1, fp
31a5c     1C 4E 85 F1 | 	sub	fp, #28
31a60     08 18 06 F1 | 	add	arg04, #8
31a64     0C FB 61 FC | 	wrlong	result1, arg04
31a68                 | LR__4908
31a68                 | LR__4909
31a68     04 4E 05 F1 | 	add	fp, #4
31a6c     A7 18 02 FB | 	rdlong	arg04, fp
31a70     04 4E 85 F1 | 	sub	fp, #4
31a74     10 18 06 F1 | 	add	arg04, #16
31a78     0C 19 C2 FA | 	rdbyte	arg04, arg04
31a7c     80 18 CE F7 | 	test	arg04, #128 wz
31a80     7C 00 90 AD |  if_e	jmp	#LR__4911
31a84     18 4E 05 F1 | 	add	fp, #24
31a88     A7 18 02 FB | 	rdlong	arg04, fp
31a8c     01 18 06 F1 | 	add	arg04, #1
31a90     0C 13 C2 FA | 	rdbyte	arg01, arg04
31a94     14 4E 85 F1 | 	sub	fp, #20
31a98     A7 18 02 FB | 	rdlong	arg04, fp
31a9c     0C 15 02 F6 | 	mov	arg02, arg04
31aa0     28 14 06 F1 | 	add	arg02, #40
31aa4     04 4E 85 F1 | 	sub	fp, #4
31aa8     1C 18 06 F1 | 	add	arg04, #28
31aac     0C 17 02 FB | 	rdlong	arg03, arg04
31ab0     01 18 06 F6 | 	mov	arg04, #1
31ab4     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
31ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
31abc     1C 00 90 AD |  if_e	jmp	#LR__4910
31ac0     04 4E 05 F1 | 	add	fp, #4
31ac4     A7 FA 01 FB | 	rdlong	result1, fp
31ac8     04 4E 85 F1 | 	sub	fp, #4
31acc     11 FA 05 F1 | 	add	result1, #17
31ad0     FD 02 48 FC | 	wrbyte	#1, result1
31ad4     01 FA 05 F6 | 	mov	result1, #1
31ad8     A4 04 90 FD | 	jmp	#LR__4923
31adc                 | LR__4910
31adc     04 4E 05 F1 | 	add	fp, #4
31ae0     A7 18 02 FB | 	rdlong	arg04, fp
31ae4     0C FB 01 F6 | 	mov	result1, arg04
31ae8     04 4E 85 F1 | 	sub	fp, #4
31aec     10 18 06 F1 | 	add	arg04, #16
31af0     0C 19 C2 FA | 	rdbyte	arg04, arg04
31af4     7F 18 06 F5 | 	and	arg04, #127
31af8     10 FA 05 F1 | 	add	result1, #16
31afc     FD 18 42 FC | 	wrbyte	arg04, result1
31b00                 | LR__4911
31b00     18 4E 05 F1 | 	add	fp, #24
31b04     A7 12 02 FB | 	rdlong	arg01, fp
31b08     14 4E 85 F1 | 	sub	fp, #20
31b0c     A7 14 02 FB | 	rdlong	arg02, fp
31b10     04 4E 85 F1 | 	sub	fp, #4
31b14     18 14 06 F1 | 	add	arg02, #24
31b18     0A 15 02 FB | 	rdlong	arg02, arg02
31b1c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
31b20     20 4E 05 F1 | 	add	fp, #32
31b24     A7 FA 61 FC | 	wrlong	result1, fp
31b28     20 4E 85 F1 | 	sub	fp, #32
31b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
31b30     1C 00 90 5D |  if_ne	jmp	#LR__4912
31b34     04 4E 05 F1 | 	add	fp, #4
31b38     A7 FA 01 FB | 	rdlong	result1, fp
31b3c     04 4E 85 F1 | 	sub	fp, #4
31b40     11 FA 05 F1 | 	add	result1, #17
31b44     FD 04 48 FC | 	wrbyte	#2, result1
31b48     02 FA 05 F6 | 	mov	result1, #2
31b4c     30 04 90 FD | 	jmp	#LR__4923
31b50                 | LR__4912
31b50     20 4E 05 F1 | 	add	fp, #32
31b54     A7 FA 01 FB | 	rdlong	result1, fp
31b58     0C 4E 05 F1 | 	add	fp, #12
31b5c     A7 26 02 FB | 	rdlong	local01, fp
31b60     13 FB 01 F1 | 	add	result1, local01
31b64     0C 4E 85 F1 | 	sub	fp, #12
31b68     A7 FA 61 FC | 	wrlong	result1, fp
31b6c     14 4E 85 F1 | 	sub	fp, #20
31b70     A7 FA 01 FB | 	rdlong	result1, fp
31b74     09 FA 45 F0 | 	shr	result1, #9
31b78     1C 4E 05 F1 | 	add	fp, #28
31b7c     A7 FA 61 FC | 	wrlong	result1, fp
31b80     28 4E 85 F1 | 	sub	fp, #40
31b84     01 FA 15 F2 | 	cmp	result1, #1 wc
31b88     60 01 90 CD |  if_b	jmp	#LR__4916
31b8c     2C 4E 05 F1 | 	add	fp, #44
31b90     A7 FA 01 FB | 	rdlong	result1, fp
31b94     04 4E 85 F1 | 	sub	fp, #4
31b98     A7 18 02 FB | 	rdlong	arg04, fp
31b9c     0C FB 01 F1 | 	add	result1, arg04
31ba0     10 4E 85 F1 | 	sub	fp, #16
31ba4     A7 18 02 FB | 	rdlong	arg04, fp
31ba8     18 4E 85 F1 | 	sub	fp, #24
31bac     0A 18 06 F1 | 	add	arg04, #10
31bb0     0C 19 E2 FA | 	rdword	arg04, arg04
31bb4     0C FB 19 F2 | 	cmp	result1, arg04 wcz
31bb8     28 00 90 ED |  if_be	jmp	#LR__4913
31bbc     18 4E 05 F1 | 	add	fp, #24
31bc0     A7 FA 01 FB | 	rdlong	result1, fp
31bc4     0A FA 05 F1 | 	add	result1, #10
31bc8     FD FA E1 FA | 	rdword	result1, result1
31bcc     14 4E 05 F1 | 	add	fp, #20
31bd0     A7 18 02 FB | 	rdlong	arg04, fp
31bd4     0C FB 81 F1 | 	sub	result1, arg04
31bd8     04 4E 85 F1 | 	sub	fp, #4
31bdc     A7 FA 61 FC | 	wrlong	result1, fp
31be0     28 4E 85 F1 | 	sub	fp, #40
31be4                 | LR__4913
31be4     18 4E 05 F1 | 	add	fp, #24
31be8     A7 18 02 FB | 	rdlong	arg04, fp
31bec     01 18 06 F1 | 	add	arg04, #1
31bf0     0C 13 C2 FA | 	rdbyte	arg01, arg04
31bf4     18 4E 05 F1 | 	add	fp, #24
31bf8     A7 14 02 FB | 	rdlong	arg02, fp
31bfc     10 4E 85 F1 | 	sub	fp, #16
31c00     A7 16 02 FB | 	rdlong	arg03, fp
31c04     08 4E 05 F1 | 	add	fp, #8
31c08     A7 18 02 FB | 	rdlong	arg04, fp
31c0c     28 4E 85 F1 | 	sub	fp, #40
31c10     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
31c14     00 FA 0D F2 | 	cmp	result1, #0 wz
31c18     1C 00 90 AD |  if_e	jmp	#LR__4914
31c1c     04 4E 05 F1 | 	add	fp, #4
31c20     A7 26 02 FB | 	rdlong	local01, fp
31c24     04 4E 85 F1 | 	sub	fp, #4
31c28     11 26 06 F1 | 	add	local01, #17
31c2c     13 03 48 FC | 	wrbyte	#1, local01
31c30     01 FA 05 F6 | 	mov	result1, #1
31c34     48 03 90 FD | 	jmp	#LR__4923
31c38                 | LR__4914
31c38     04 4E 05 F1 | 	add	fp, #4
31c3c     A7 FA 01 FB | 	rdlong	result1, fp
31c40     1C FA 05 F1 | 	add	result1, #28
31c44     FD FA 01 FB | 	rdlong	result1, result1
31c48     1C 4E 05 F1 | 	add	fp, #28
31c4c     A7 28 02 FB | 	rdlong	local02, fp
31c50     14 FB 81 F1 | 	sub	result1, local02
31c54     08 4E 05 F1 | 	add	fp, #8
31c58     A7 18 02 FB | 	rdlong	arg04, fp
31c5c     28 4E 85 F1 | 	sub	fp, #40
31c60     0C FB 11 F2 | 	cmp	result1, arg04 wc
31c64     68 00 90 3D |  if_ae	jmp	#LR__4915
31c68     04 4E 05 F1 | 	add	fp, #4
31c6c     A7 12 02 FB | 	rdlong	arg01, fp
31c70     28 12 06 F1 | 	add	arg01, #40
31c74     2C 4E 05 F1 | 	add	fp, #44
31c78     A7 14 02 FB | 	rdlong	arg02, fp
31c7c     2C 4E 85 F1 | 	sub	fp, #44
31c80     A7 FA 01 FB | 	rdlong	result1, fp
31c84     1C FA 05 F1 | 	add	result1, #28
31c88     FD 2A 02 FB | 	rdlong	local03, result1
31c8c     1C 4E 05 F1 | 	add	fp, #28
31c90     A7 18 02 FB | 	rdlong	arg04, fp
31c94     20 4E 85 F1 | 	sub	fp, #32
31c98     0C 2B 82 F1 | 	sub	local03, arg04
31c9c     09 2A 66 F0 | 	shl	local03, #9
31ca0     15 15 02 F1 | 	add	arg02, local03
31ca4     09 16 C6 F9 | 	decod	arg03, #9
31ca8     EC 3B BF FD | 	call	#__system____builtin_memmove
31cac     04 4E 05 F1 | 	add	fp, #4
31cb0     A7 18 02 FB | 	rdlong	arg04, fp
31cb4     0C FB 01 F6 | 	mov	result1, arg04
31cb8     04 4E 85 F1 | 	sub	fp, #4
31cbc     10 18 06 F1 | 	add	arg04, #16
31cc0     0C 19 C2 FA | 	rdbyte	arg04, arg04
31cc4     7F 18 06 F5 | 	and	arg04, #127
31cc8     10 FA 05 F1 | 	add	result1, #16
31ccc     FD 18 42 FC | 	wrbyte	arg04, result1
31cd0                 | LR__4915
31cd0     28 4E 05 F1 | 	add	fp, #40
31cd4     A7 FA 01 FB | 	rdlong	result1, fp
31cd8     09 FA 65 F0 | 	shl	result1, #9
31cdc     04 4E 85 F1 | 	sub	fp, #4
31ce0     A7 FA 61 FC | 	wrlong	result1, fp
31ce4     24 4E 85 F1 | 	sub	fp, #36
31ce8                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
31ce8                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
31ce8                 | ' 				}
31ce8                 | ' 
31ce8                 | ' 
31ce8                 | ' 				wcnt =  ((UINT) 512 )  * cc;
31ce8                 | ' 				continue;
31ce8     74 01 90 FD | 	jmp	#LR__4919
31cec                 | LR__4916
31cec     04 4E 05 F1 | 	add	fp, #4
31cf0     A7 28 02 FB | 	rdlong	local02, fp
31cf4     1C 28 06 F1 | 	add	local02, #28
31cf8     14 FB 01 FB | 	rdlong	result1, local02
31cfc     1C 4E 05 F1 | 	add	fp, #28
31d00     A7 28 02 FB | 	rdlong	local02, fp
31d04     20 4E 85 F1 | 	sub	fp, #32
31d08     14 FB 09 F2 | 	cmp	result1, local02 wz
31d0c     90 00 90 AD |  if_e	jmp	#LR__4917
31d10     04 4E 05 F1 | 	add	fp, #4
31d14     A7 FA 01 FB | 	rdlong	result1, fp
31d18     FD 2A 02 F6 | 	mov	local03, result1
31d1c     04 4E 85 F1 | 	sub	fp, #4
31d20     14 2A 06 F1 | 	add	local03, #20
31d24     15 2B 02 FB | 	rdlong	local03, local03
31d28     0C FA 05 F1 | 	add	result1, #12
31d2c     FD 2C 02 FB | 	rdlong	local04, result1
31d30     16 2F 02 F6 | 	mov	local05, local04
31d34     17 2B 12 F2 | 	cmp	local03, local05 wc
31d38     64 00 90 3D |  if_ae	jmp	#LR__4917
31d3c     18 4E 05 F1 | 	add	fp, #24
31d40     A7 18 02 FB | 	rdlong	arg04, fp
31d44     01 18 06 F1 | 	add	arg04, #1
31d48     0C 13 C2 FA | 	rdbyte	arg01, arg04
31d4c     14 4E 85 F1 | 	sub	fp, #20
31d50     A7 30 02 FB | 	rdlong	local06, fp
31d54     28 30 06 F1 | 	add	local06, #40
31d58     18 33 02 F6 | 	mov	local07, local06
31d5c     1C 4E 05 F1 | 	add	fp, #28
31d60     A7 34 02 FB | 	rdlong	local08, fp
31d64     20 4E 85 F1 | 	sub	fp, #32
31d68     01 36 06 F6 | 	mov	local09, #1
31d6c     19 15 02 F6 | 	mov	arg02, local07
31d70     1A 17 02 F6 | 	mov	arg03, local08
31d74     01 18 06 F6 | 	mov	arg04, #1
31d78     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
31d7c     FD 38 0A F6 | 	mov	local10, result1 wz
31d80     1C 00 90 AD |  if_e	jmp	#LR__4917
31d84     04 4E 05 F1 | 	add	fp, #4
31d88     A7 38 02 FB | 	rdlong	local10, fp
31d8c     04 4E 85 F1 | 	sub	fp, #4
31d90     11 38 06 F1 | 	add	local10, #17
31d94     1C 03 48 FC | 	wrbyte	#1, local10
31d98                 | ' 				fp->fptr < fp->obj.objsize &&
31d98                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
31d98                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
31d98     01 FA 05 F6 | 	mov	result1, #1
31d9c     E0 01 90 FD | 	jmp	#LR__4923
31da0                 | LR__4917
31da0     04 4E 05 F1 | 	add	fp, #4
31da4     A7 18 02 FB | 	rdlong	arg04, fp
31da8     1C 4E 05 F1 | 	add	fp, #28
31dac     A7 FA 01 FB | 	rdlong	result1, fp
31db0     20 4E 85 F1 | 	sub	fp, #32
31db4     1C 18 06 F1 | 	add	arg04, #28
31db8     0C FB 61 FC | 	wrlong	result1, arg04
31dbc                 | LR__4918
31dbc     04 4E 05 F1 | 	add	fp, #4
31dc0     A7 FA 01 FB | 	rdlong	result1, fp
31dc4     14 FA 05 F1 | 	add	result1, #20
31dc8     FD FA 01 FB | 	rdlong	result1, result1
31dcc     FF FB 05 F5 | 	and	result1, #511
31dd0     09 3A C6 F9 | 	decod	local11, #9
31dd4     FD 3A 82 F1 | 	sub	local11, result1
31dd8     20 4E 05 F1 | 	add	fp, #32
31ddc     A7 3A 62 FC | 	wrlong	local11, fp
31de0     18 4E 85 F1 | 	sub	fp, #24
31de4     A7 FA 01 FB | 	rdlong	result1, fp
31de8     0C 4E 85 F1 | 	sub	fp, #12
31dec     FD 3A 1A F2 | 	cmp	local11, result1 wcz
31df0     0C 4E 05 11 |  if_a	add	fp, #12
31df4     A7 3A 02 1B |  if_a	rdlong	local11, fp
31df8     18 4E 05 11 |  if_a	add	fp, #24
31dfc     A7 3A 62 1C |  if_a	wrlong	local11, fp
31e00     24 4E 85 11 |  if_a	sub	fp, #36
31e04     04 4E 05 F1 | 	add	fp, #4
31e08     A7 3A 02 FB | 	rdlong	local11, fp
31e0c     1D 13 02 F6 | 	mov	arg01, local11
31e10     28 12 06 F1 | 	add	arg01, #40
31e14     14 3A 06 F1 | 	add	local11, #20
31e18     1D 3B 02 FB | 	rdlong	local11, local11
31e1c     FF 3B 06 F5 | 	and	local11, #511
31e20     1D 13 02 F1 | 	add	arg01, local11
31e24     2C 4E 05 F1 | 	add	fp, #44
31e28     A7 14 02 FB | 	rdlong	arg02, fp
31e2c     0C 4E 85 F1 | 	sub	fp, #12
31e30     A7 16 02 FB | 	rdlong	arg03, fp
31e34     24 4E 85 F1 | 	sub	fp, #36
31e38     5C 3A BF FD | 	call	#__system____builtin_memmove
31e3c     04 4E 05 F1 | 	add	fp, #4
31e40     A7 FA 01 FB | 	rdlong	result1, fp
31e44     FD 3A 02 F6 | 	mov	local11, result1
31e48     04 4E 85 F1 | 	sub	fp, #4
31e4c     10 FA 05 F1 | 	add	result1, #16
31e50     FD FA C1 FA | 	rdbyte	result1, result1
31e54     80 FA 45 F5 | 	or	result1, #128
31e58     10 3A 06 F1 | 	add	local11, #16
31e5c     1D FB 41 FC | 	wrbyte	result1, local11
31e60                 | LR__4919
31e60     0C 4E 05 F1 | 	add	fp, #12
31e64     A7 3A 02 FB | 	rdlong	local11, fp
31e68     18 4E 05 F1 | 	add	fp, #24
31e6c     A7 FA 01 FB | 	rdlong	result1, fp
31e70     FD 3A 82 F1 | 	sub	local11, result1
31e74     18 4E 85 F1 | 	sub	fp, #24
31e78     A7 3A 62 FC | 	wrlong	local11, fp
31e7c     04 4E 05 F1 | 	add	fp, #4
31e80     A7 3C 02 FB | 	rdlong	local12, fp
31e84     1E 3B 02 FB | 	rdlong	local11, local12
31e88     14 4E 05 F1 | 	add	fp, #20
31e8c     A7 3E 02 FB | 	rdlong	local13, fp
31e90     1F 3B 02 F1 | 	add	local11, local13
31e94     1E 3B 62 FC | 	wrlong	local11, local12
31e98     0C 4E 05 F1 | 	add	fp, #12
31e9c     A7 3A 02 FB | 	rdlong	local11, fp
31ea0     0C 4E 85 F1 | 	sub	fp, #12
31ea4     A7 40 02 FB | 	rdlong	local14, fp
31ea8     20 3B 02 F1 | 	add	local11, local14
31eac     0C 4E 05 F1 | 	add	fp, #12
31eb0     A7 3A 62 FC | 	wrlong	local11, fp
31eb4     2C 4E 85 F1 | 	sub	fp, #44
31eb8     A7 42 02 FB | 	rdlong	local15, fp
31ebc     21 3B 02 F6 | 	mov	local11, local15
31ec0     14 42 06 F1 | 	add	local15, #20
31ec4     21 43 02 FB | 	rdlong	local15, local15
31ec8     20 4E 05 F1 | 	add	fp, #32
31ecc     A7 44 02 FB | 	rdlong	local16, fp
31ed0     22 43 02 F1 | 	add	local15, local16
31ed4     14 3A 06 F1 | 	add	local11, #20
31ed8     1D 43 62 FC | 	wrlong	local15, local11
31edc     20 4E 85 F1 | 	sub	fp, #32
31ee0     A7 46 02 FB | 	rdlong	local17, fp
31ee4     23 3B 02 F6 | 	mov	local11, local17
31ee8     23 49 02 F6 | 	mov	local18, local17
31eec     04 4E 85 F1 | 	sub	fp, #4
31ef0     14 46 06 F1 | 	add	local17, #20
31ef4     23 4B 02 FB | 	rdlong	local19, local17
31ef8     0C 48 06 F1 | 	add	local18, #12
31efc     24 4D 02 FB | 	rdlong	local20, local18
31f00     26 4B 1A F2 | 	cmp	local19, local20 wcz
31f04     24 00 90 ED |  if_be	jmp	#LR__4920
31f08     04 4E 05 F1 | 	add	fp, #4
31f0c     A7 2E 02 FB | 	rdlong	local05, fp
31f10     04 4E 85 F1 | 	sub	fp, #4
31f14     17 2B 02 F6 | 	mov	local03, local05
31f18     14 2A 06 F1 | 	add	local03, #20
31f1c     15 2D 02 FB | 	rdlong	local04, local03
31f20     14 2A 86 F1 | 	sub	local03, #20
31f24     16 4F 02 F6 | 	mov	local21, local04
31f28     20 00 90 FD | 	jmp	#LR__4921
31f2c                 | LR__4920
31f2c     04 4E 05 F1 | 	add	fp, #4
31f30     A7 32 02 FB | 	rdlong	local07, fp
31f34     04 4E 85 F1 | 	sub	fp, #4
31f38     19 39 02 F6 | 	mov	local10, local07
31f3c     0C 38 06 F1 | 	add	local10, #12
31f40     1C 35 02 FB | 	rdlong	local08, local10
31f44     0C 38 86 F1 | 	sub	local10, #12
31f48     1A 4F 02 F6 | 	mov	local21, local08
31f4c                 | LR__4921
31f4c     0C 3A 06 F1 | 	add	local11, #12
31f50     1D 4F 62 FC | 	wrlong	local21, local11
31f54     5C F9 9F FD | 	jmp	#LR__4903
31f58                 | LR__4922
31f58     04 4E 05 F1 | 	add	fp, #4
31f5c     A7 3C 02 FB | 	rdlong	local12, fp
31f60     1E 27 02 F6 | 	mov	local01, local12
31f64     04 4E 85 F1 | 	sub	fp, #4
31f68     10 3C 06 F1 | 	add	local12, #16
31f6c     1E 3B C2 FA | 	rdbyte	local11, local12
31f70     40 3A 46 F5 | 	or	local11, #64
31f74     10 26 06 F1 | 	add	local01, #16
31f78     13 3B 42 FC | 	wrbyte	local11, local01
31f7c                 | ' 
31f7c                 | ' 
31f7c                 | ' 
31f7c                 | ' 
31f7c                 | ' 
31f7c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
31f7c                 | ' 		fp->flag |=  0x80 ;
31f7c                 | ' 
31f7c                 | ' 	}
31f7c                 | ' 
31f7c                 | ' 	fp->flag |=  0x40 ;
31f7c                 | ' 
31f7c                 | ' 	return FR_OK ;
31f7c     00 FA 05 F6 | 	mov	result1, #0
31f80                 | LR__4923
31f80     A7 F0 03 F6 | 	mov	ptra, fp
31f84     B2 00 A0 FD | 	call	#popregs_
31f88                 | _fatfs_cc_f_write_ret
31f88     2D 00 64 FD | 	ret
31f8c                 | 
31f8c                 | _fatfs_cc_f_sync
31f8c     00 4A 05 F6 | 	mov	COUNT_, #0
31f90     A8 00 A0 FD | 	call	#pushregs_
31f94     18 F0 07 F1 | 	add	ptra, #24
31f98     04 4E 05 F1 | 	add	fp, #4
31f9c     A7 12 62 FC | 	wrlong	arg01, fp
31fa0     08 4E 05 F1 | 	add	fp, #8
31fa4     A7 14 02 F6 | 	mov	arg02, fp
31fa8     0C 4E 85 F1 | 	sub	fp, #12
31fac     D0 E8 BF FD | 	call	#_fatfs_cc_validate
31fb0     08 4E 05 F1 | 	add	fp, #8
31fb4     A7 FA 61 FC | 	wrlong	result1, fp
31fb8     08 4E 85 F1 | 	sub	fp, #8
31fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
31fc0     C0 01 90 5D |  if_ne	jmp	#LR__4933
31fc4     04 4E 05 F1 | 	add	fp, #4
31fc8     A7 18 02 FB | 	rdlong	arg04, fp
31fcc     04 4E 85 F1 | 	sub	fp, #4
31fd0     10 18 06 F1 | 	add	arg04, #16
31fd4     0C 19 C2 FA | 	rdbyte	arg04, arg04
31fd8     40 18 CE F7 | 	test	arg04, #64 wz
31fdc     A4 01 90 AD |  if_e	jmp	#LR__4932
31fe0     04 4E 05 F1 | 	add	fp, #4
31fe4     A7 18 02 FB | 	rdlong	arg04, fp
31fe8     04 4E 85 F1 | 	sub	fp, #4
31fec     10 18 06 F1 | 	add	arg04, #16
31ff0     0C 19 C2 FA | 	rdbyte	arg04, arg04
31ff4     80 18 CE F7 | 	test	arg04, #128 wz
31ff8     64 00 90 AD |  if_e	jmp	#LR__4930
31ffc     0C 4E 05 F1 | 	add	fp, #12
32000     A7 18 02 FB | 	rdlong	arg04, fp
32004     01 18 06 F1 | 	add	arg04, #1
32008     0C 13 C2 FA | 	rdbyte	arg01, arg04
3200c     08 4E 85 F1 | 	sub	fp, #8
32010     A7 18 02 FB | 	rdlong	arg04, fp
32014     0C 15 02 F6 | 	mov	arg02, arg04
32018     28 14 06 F1 | 	add	arg02, #40
3201c     04 4E 85 F1 | 	sub	fp, #4
32020     1C 18 06 F1 | 	add	arg04, #28
32024     0C 17 02 FB | 	rdlong	arg03, arg04
32028     01 18 06 F6 | 	mov	arg04, #1
3202c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
32030     00 FA 0D F2 | 	cmp	result1, #0 wz
32034     01 FA 05 56 |  if_ne	mov	result1, #1
32038     54 01 90 5D |  if_ne	jmp	#LR__4934
3203c     04 4E 05 F1 | 	add	fp, #4
32040     A7 18 02 FB | 	rdlong	arg04, fp
32044     0C 17 02 F6 | 	mov	arg03, arg04
32048     04 4E 85 F1 | 	sub	fp, #4
3204c     10 18 06 F1 | 	add	arg04, #16
32050     0C 19 C2 FA | 	rdbyte	arg04, arg04
32054     7F 18 06 F5 | 	and	arg04, #127
32058     10 16 06 F1 | 	add	arg03, #16
3205c     0B 19 42 FC | 	wrbyte	arg04, arg03
32060                 | LR__4930
32060     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
32064     10 4E 05 F1 | 	add	fp, #16
32068     A7 FA 61 FC | 	wrlong	result1, fp
3206c     04 4E 85 F1 | 	sub	fp, #4
32070     A7 12 02 FB | 	rdlong	arg01, fp
32074     08 4E 85 F1 | 	sub	fp, #8
32078     A7 18 02 FB | 	rdlong	arg04, fp
3207c     04 4E 85 F1 | 	sub	fp, #4
32080     20 18 06 F1 | 	add	arg04, #32
32084     0C 15 02 FB | 	rdlong	arg02, arg04
32088     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
3208c     08 4E 05 F1 | 	add	fp, #8
32090     A7 FA 61 FC | 	wrlong	result1, fp
32094     08 4E 85 F1 | 	sub	fp, #8
32098     00 FA 0D F2 | 	cmp	result1, #0 wz
3209c     E4 00 90 5D |  if_ne	jmp	#LR__4931
320a0     04 4E 05 F1 | 	add	fp, #4
320a4     A7 18 02 FB | 	rdlong	arg04, fp
320a8     24 18 06 F1 | 	add	arg04, #36
320ac     0C 19 02 FB | 	rdlong	arg04, arg04
320b0     10 4E 05 F1 | 	add	fp, #16
320b4     A7 18 62 FC | 	wrlong	arg04, fp
320b8     0C 17 02 F6 | 	mov	arg03, arg04
320bc     0B 16 06 F1 | 	add	arg03, #11
320c0     0B 17 C2 FA | 	rdbyte	arg03, arg03
320c4     20 16 46 F5 | 	or	arg03, #32
320c8     0B 18 06 F1 | 	add	arg04, #11
320cc     0C 17 42 FC | 	wrbyte	arg03, arg04
320d0     10 4E 85 F1 | 	sub	fp, #16
320d4     A7 18 02 FB | 	rdlong	arg04, fp
320d8     0C 13 02 FB | 	rdlong	arg01, arg04
320dc     10 4E 05 F1 | 	add	fp, #16
320e0     A7 14 02 FB | 	rdlong	arg02, fp
320e4     14 4E 85 F1 | 	sub	fp, #20
320e8     08 18 06 F1 | 	add	arg04, #8
320ec     0C 17 02 FB | 	rdlong	arg03, arg04
320f0     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
320f4     14 4E 05 F1 | 	add	fp, #20
320f8     A7 12 02 FB | 	rdlong	arg01, fp
320fc     1C 12 06 F1 | 	add	arg01, #28
32100     10 4E 85 F1 | 	sub	fp, #16
32104     A7 18 02 FB | 	rdlong	arg04, fp
32108     0C 18 06 F1 | 	add	arg04, #12
3210c     0C 15 02 FB | 	rdlong	arg02, arg04
32110     09 15 62 FC | 	wrlong	arg02, arg01
32114     10 4E 05 F1 | 	add	fp, #16
32118     A7 12 02 FB | 	rdlong	arg01, fp
3211c     16 12 06 F1 | 	add	arg01, #22
32120     04 4E 85 F1 | 	sub	fp, #4
32124     A7 14 02 FB | 	rdlong	arg02, fp
32128     09 15 62 FC | 	wrlong	arg02, arg01
3212c     04 4E 05 F1 | 	add	fp, #4
32130     A7 12 02 FB | 	rdlong	arg01, fp
32134     12 12 06 F1 | 	add	arg01, #18
32138     09 01 58 FC | 	wrword	#0, arg01
3213c     08 4E 85 F1 | 	sub	fp, #8
32140     A7 18 02 FB | 	rdlong	arg04, fp
32144     03 18 06 F1 | 	add	arg04, #3
32148     0C 03 48 FC | 	wrbyte	#1, arg04
3214c     A7 12 02 FB | 	rdlong	arg01, fp
32150     0C 4E 85 F1 | 	sub	fp, #12
32154     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
32158     08 4E 05 F1 | 	add	fp, #8
3215c     A7 FA 61 FC | 	wrlong	result1, fp
32160     04 4E 85 F1 | 	sub	fp, #4
32164     A7 18 02 FB | 	rdlong	arg04, fp
32168     0C 17 02 F6 | 	mov	arg03, arg04
3216c     04 4E 85 F1 | 	sub	fp, #4
32170     10 18 06 F1 | 	add	arg04, #16
32174     0C 19 C2 FA | 	rdbyte	arg04, arg04
32178     BF 18 06 F5 | 	and	arg04, #191
3217c     10 16 06 F1 | 	add	arg03, #16
32180     0B 19 42 FC | 	wrbyte	arg04, arg03
32184                 | LR__4931
32184                 | LR__4932
32184                 | LR__4933
32184                 | ' 					dir = fp->dir_ptr;
32184                 | ' 					dir[ 11 ] |=  0x20 ;
32184                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
32184                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
32184                 | ' 					st_dword(dir +  22 , tm);
32184                 | ' 					st_word(dir +  18 , 0);
32184                 | ' 					fs->wflag = 1;
32184                 | ' 					res = sync_fs(fs);
32184                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
32184                 | ' 				}
32184                 | ' 			}
32184                 | ' 		}
32184                 | ' 	}
32184                 | ' 
32184                 | ' 	return res ;
32184     08 4E 05 F1 | 	add	fp, #8
32188     A7 FA 01 FB | 	rdlong	result1, fp
3218c     08 4E 85 F1 | 	sub	fp, #8
32190                 | LR__4934
32190     A7 F0 03 F6 | 	mov	ptra, fp
32194     B2 00 A0 FD | 	call	#popregs_
32198                 | _fatfs_cc_f_sync_ret
32198     2D 00 64 FD | 	ret
3219c                 | 
3219c                 | _fatfs_cc_f_close
3219c     01 4A 05 F6 | 	mov	COUNT_, #1
321a0     A8 00 A0 FD | 	call	#pushregs_
321a4     10 F0 07 F1 | 	add	ptra, #16
321a8     04 4E 05 F1 | 	add	fp, #4
321ac     A7 12 62 FC | 	wrlong	arg01, fp
321b0     04 4E 85 F1 | 	sub	fp, #4
321b4     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
321b8     08 4E 05 F1 | 	add	fp, #8
321bc     A7 FA 61 FC | 	wrlong	result1, fp
321c0     08 4E 85 F1 | 	sub	fp, #8
321c4     00 FA 0D F2 | 	cmp	result1, #0 wz
321c8     38 00 90 5D |  if_ne	jmp	#LR__4940
321cc     04 4E 05 F1 | 	add	fp, #4
321d0     A7 12 02 FB | 	rdlong	arg01, fp
321d4     08 4E 05 F1 | 	add	fp, #8
321d8     A7 14 02 F6 | 	mov	arg02, fp
321dc     0C 4E 85 F1 | 	sub	fp, #12
321e0     9C E6 BF FD | 	call	#_fatfs_cc_validate
321e4     08 4E 05 F1 | 	add	fp, #8
321e8     A7 FA 61 FC | 	wrlong	result1, fp
321ec     08 4E 85 F1 | 	sub	fp, #8
321f0     00 FA 0D F2 | 	cmp	result1, #0 wz
321f4     04 4E 05 A1 |  if_e	add	fp, #4
321f8     A7 26 02 AB |  if_e	rdlong	local01, fp
321fc     04 4E 85 A1 |  if_e	sub	fp, #4
32200     13 01 68 AC |  if_e	wrlong	#0, local01
32204                 | LR__4940
32204                 | ' 
32204                 | ' 
32204                 | ' 
32204                 | ' 
32204                 | ' 			fp->obj.fs = 0;
32204                 | ' #line 4192 "ff.c"
32204                 | ' 		}
32204                 | ' 	}
32204                 | ' 	return res;
32204     08 4E 05 F1 | 	add	fp, #8
32208     A7 FA 01 FB | 	rdlong	result1, fp
3220c     08 4E 85 F1 | 	sub	fp, #8
32210     A7 F0 03 F6 | 	mov	ptra, fp
32214     B2 00 A0 FD | 	call	#popregs_
32218                 | _fatfs_cc_f_close_ret
32218     2D 00 64 FD | 	ret
3221c                 | 
3221c                 | _fatfs_cc_f_lseek
3221c     00 4A 05 F6 | 	mov	COUNT_, #0
32220     A8 00 A0 FD | 	call	#pushregs_
32224     24 F0 07 F1 | 	add	ptra, #36
32228     04 4E 05 F1 | 	add	fp, #4
3222c     A7 12 62 FC | 	wrlong	arg01, fp
32230     04 4E 05 F1 | 	add	fp, #4
32234     A7 14 62 FC | 	wrlong	arg02, fp
32238     04 4E 85 F1 | 	sub	fp, #4
3223c     A7 12 02 FB | 	rdlong	arg01, fp
32240     0C 4E 05 F1 | 	add	fp, #12
32244     A7 14 02 F6 | 	mov	arg02, fp
32248     10 4E 85 F1 | 	sub	fp, #16
3224c     30 E6 BF FD | 	call	#_fatfs_cc_validate
32250     0C 4E 05 F1 | 	add	fp, #12
32254     A7 FA 61 FC | 	wrlong	result1, fp
32258     0C 4E 85 F1 | 	sub	fp, #12
3225c     00 FA 0D F2 | 	cmp	result1, #0 wz
32260     1C 00 90 5D |  if_ne	jmp	#LR__4950
32264     04 4E 05 F1 | 	add	fp, #4
32268     A7 18 02 FB | 	rdlong	arg04, fp
3226c     11 18 06 F1 | 	add	arg04, #17
32270     0C 19 C2 FA | 	rdbyte	arg04, arg04
32274     08 4E 05 F1 | 	add	fp, #8
32278     A7 18 62 FC | 	wrlong	arg04, fp
3227c     0C 4E 85 F1 | 	sub	fp, #12
32280                 | LR__4950
32280     0C 4E 05 F1 | 	add	fp, #12
32284     A7 18 0A FB | 	rdlong	arg04, fp wz
32288     0C 4E 85 F1 | 	sub	fp, #12
3228c     0C 4E 05 51 |  if_ne	add	fp, #12
32290     A7 FA 01 5B |  if_ne	rdlong	result1, fp
32294     0C 4E 85 51 |  if_ne	sub	fp, #12
32298     40 06 90 5D |  if_ne	jmp	#LR__4973
3229c     04 4E 05 F1 | 	add	fp, #4
322a0     A7 18 02 FB | 	rdlong	arg04, fp
322a4     04 4E 05 F1 | 	add	fp, #4
322a8     A7 16 02 FB | 	rdlong	arg03, fp
322ac     08 4E 85 F1 | 	sub	fp, #8
322b0     0C 18 06 F1 | 	add	arg04, #12
322b4     0C 19 02 FB | 	rdlong	arg04, arg04
322b8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
322bc     3C 00 90 ED |  if_be	jmp	#LR__4951
322c0     04 4E 05 F1 | 	add	fp, #4
322c4     A7 16 02 FB | 	rdlong	arg03, fp
322c8     04 4E 85 F1 | 	sub	fp, #4
322cc     10 16 06 F1 | 	add	arg03, #16
322d0     0B 17 C2 FA | 	rdbyte	arg03, arg03
322d4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
322d8     02 16 CE F7 | 	test	arg03, #2 wz
322dc     1C 00 90 5D |  if_ne	jmp	#LR__4951
322e0     04 4E 05 F1 | 	add	fp, #4
322e4     A7 16 02 FB | 	rdlong	arg03, fp
322e8     0C 16 06 F1 | 	add	arg03, #12
322ec     0B 17 02 FB | 	rdlong	arg03, arg03
322f0     04 4E 05 F1 | 	add	fp, #4
322f4     A7 16 62 FC | 	wrlong	arg03, fp
322f8     08 4E 85 F1 | 	sub	fp, #8
322fc                 | LR__4951
322fc     04 4E 05 F1 | 	add	fp, #4
32300     A7 16 02 FB | 	rdlong	arg03, fp
32304     14 16 06 F1 | 	add	arg03, #20
32308     0B 17 02 FB | 	rdlong	arg03, arg03
3230c     1C 4E 05 F1 | 	add	fp, #28
32310     A7 16 62 FC | 	wrlong	arg03, fp
32314     1C 4E 85 F1 | 	sub	fp, #28
32318     A7 16 02 FB | 	rdlong	arg03, fp
3231c     18 4E 05 F1 | 	add	fp, #24
32320     A7 00 68 FC | 	wrlong	#0, fp
32324     14 16 06 F1 | 	add	arg03, #20
32328     0B 01 68 FC | 	wrlong	#0, arg03
3232c     14 4E 85 F1 | 	sub	fp, #20
32330     A7 16 02 FB | 	rdlong	arg03, fp
32334     08 4E 85 F1 | 	sub	fp, #8
32338     01 16 16 F2 | 	cmp	arg03, #1 wc
3233c     E4 03 90 CD |  if_b	jmp	#LR__4967
32340     10 4E 05 F1 | 	add	fp, #16
32344     A7 16 02 FB | 	rdlong	arg03, fp
32348     0A 16 06 F1 | 	add	arg03, #10
3234c     0B 19 E2 FA | 	rdword	arg04, arg03
32350     09 18 66 F0 | 	shl	arg04, #9
32354     08 4E 05 F1 | 	add	fp, #8
32358     A7 18 62 FC | 	wrlong	arg04, fp
3235c     08 4E 05 F1 | 	add	fp, #8
32360     A7 18 02 FB | 	rdlong	arg04, fp
32364     20 4E 85 F1 | 	sub	fp, #32
32368     01 18 16 F2 | 	cmp	arg04, #1 wc
3236c     AC 00 90 CD |  if_b	jmp	#LR__4952
32370     08 4E 05 F1 | 	add	fp, #8
32374     A7 18 02 FB | 	rdlong	arg04, fp
32378     01 18 86 F1 | 	sub	arg04, #1
3237c     10 4E 05 F1 | 	add	fp, #16
32380     A7 16 02 FB | 	rdlong	arg03, fp
32384     0B 19 12 FD | 	qdiv	arg04, arg03
32388     08 4E 05 F1 | 	add	fp, #8
3238c     A7 FA 01 FB | 	rdlong	result1, fp
32390     01 FA 85 F1 | 	sub	result1, #1
32394     18 18 62 FD | 	getqx	arg04
32398     0B FB 11 FD | 	qdiv	result1, arg03
3239c     20 4E 85 F1 | 	sub	fp, #32
323a0     18 16 62 FD | 	getqx	arg03
323a4     0B 19 12 F2 | 	cmp	arg04, arg03 wc
323a8     70 00 90 CD |  if_b	jmp	#LR__4952
323ac     04 4E 05 F1 | 	add	fp, #4
323b0     A7 16 02 FB | 	rdlong	arg03, fp
323b4     1C 4E 05 F1 | 	add	fp, #28
323b8     A7 FA 01 FB | 	rdlong	result1, fp
323bc     01 FA 85 F1 | 	sub	result1, #1
323c0     08 4E 85 F1 | 	sub	fp, #8
323c4     A7 18 02 FB | 	rdlong	arg04, fp
323c8     01 18 86 F1 | 	sub	arg04, #1
323cc     0C FB 21 F5 | 	andn	result1, arg04
323d0     14 16 06 F1 | 	add	arg03, #20
323d4     0B FB 61 FC | 	wrlong	result1, arg03
323d8     10 4E 85 F1 | 	sub	fp, #16
323dc     A7 16 02 FB | 	rdlong	arg03, fp
323e0     04 4E 85 F1 | 	sub	fp, #4
323e4     A7 18 02 FB | 	rdlong	arg04, fp
323e8     14 18 06 F1 | 	add	arg04, #20
323ec     0C 19 02 FB | 	rdlong	arg04, arg04
323f0     0C 17 82 F1 | 	sub	arg03, arg04
323f4     04 4E 05 F1 | 	add	fp, #4
323f8     A7 16 62 FC | 	wrlong	arg03, fp
323fc     04 4E 85 F1 | 	sub	fp, #4
32400     A7 16 02 FB | 	rdlong	arg03, fp
32404     18 16 06 F1 | 	add	arg03, #24
32408     0B 17 02 FB | 	rdlong	arg03, arg03
3240c     10 4E 05 F1 | 	add	fp, #16
32410     A7 16 62 FC | 	wrlong	arg03, fp
32414     14 4E 85 F1 | 	sub	fp, #20
32418     D0 00 90 FD | 	jmp	#LR__4956
3241c                 | LR__4952
3241c     04 4E 05 F1 | 	add	fp, #4
32420     A7 16 02 FB | 	rdlong	arg03, fp
32424     08 16 06 F1 | 	add	arg03, #8
32428     0B 17 0A FB | 	rdlong	arg03, arg03 wz
3242c     10 4E 05 F1 | 	add	fp, #16
32430     A7 16 62 FC | 	wrlong	arg03, fp
32434     14 4E 85 F1 | 	sub	fp, #20
32438     94 00 90 5D |  if_ne	jmp	#LR__4955
3243c     04 4E 05 F1 | 	add	fp, #4
32440     A7 12 02 FB | 	rdlong	arg01, fp
32444     04 4E 85 F1 | 	sub	fp, #4
32448     00 14 06 F6 | 	mov	arg02, #0
3244c     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
32450     14 4E 05 F1 | 	add	fp, #20
32454     A7 FA 61 FC | 	wrlong	result1, fp
32458     14 4E 85 F1 | 	sub	fp, #20
3245c     01 FA 0D F2 | 	cmp	result1, #1 wz
32460     1C 00 90 5D |  if_ne	jmp	#LR__4953
32464     04 4E 05 F1 | 	add	fp, #4
32468     A7 16 02 FB | 	rdlong	arg03, fp
3246c     04 4E 85 F1 | 	sub	fp, #4
32470     11 16 06 F1 | 	add	arg03, #17
32474     0B 05 48 FC | 	wrbyte	#2, arg03
32478     02 FA 05 F6 | 	mov	result1, #2
3247c     5C 04 90 FD | 	jmp	#LR__4973
32480                 | LR__4953
32480     14 4E 05 F1 | 	add	fp, #20
32484     A7 FA 01 FB | 	rdlong	result1, fp
32488     14 4E 85 F1 | 	sub	fp, #20
3248c     FF FF 7F FF 
32490     FF FB 0D F2 | 	cmp	result1, ##-1 wz
32494     1C 00 90 5D |  if_ne	jmp	#LR__4954
32498     04 4E 05 F1 | 	add	fp, #4
3249c     A7 16 02 FB | 	rdlong	arg03, fp
324a0     04 4E 85 F1 | 	sub	fp, #4
324a4     11 16 06 F1 | 	add	arg03, #17
324a8     0B 03 48 FC | 	wrbyte	#1, arg03
324ac     01 FA 05 F6 | 	mov	result1, #1
324b0     28 04 90 FD | 	jmp	#LR__4973
324b4                 | LR__4954
324b4     04 4E 05 F1 | 	add	fp, #4
324b8     A7 16 02 FB | 	rdlong	arg03, fp
324bc     10 4E 05 F1 | 	add	fp, #16
324c0     A7 18 02 FB | 	rdlong	arg04, fp
324c4     14 4E 85 F1 | 	sub	fp, #20
324c8     08 16 06 F1 | 	add	arg03, #8
324cc     0B 19 62 FC | 	wrlong	arg04, arg03
324d0                 | LR__4955
324d0     04 4E 05 F1 | 	add	fp, #4
324d4     A7 16 02 FB | 	rdlong	arg03, fp
324d8     10 4E 05 F1 | 	add	fp, #16
324dc     A7 18 02 FB | 	rdlong	arg04, fp
324e0     14 4E 85 F1 | 	sub	fp, #20
324e4     18 16 06 F1 | 	add	arg03, #24
324e8     0B 19 62 FC | 	wrlong	arg04, arg03
324ec                 | LR__4956
324ec     14 4E 05 F1 | 	add	fp, #20
324f0     A7 16 0A FB | 	rdlong	arg03, fp wz
324f4     14 4E 85 F1 | 	sub	fp, #20
324f8     28 02 90 AD |  if_e	jmp	#LR__4966
324fc                 | ' 				while (ofs > bcs) {
324fc                 | LR__4957
324fc     08 4E 05 F1 | 	add	fp, #8
32500     A7 18 02 FB | 	rdlong	arg04, fp
32504     10 4E 05 F1 | 	add	fp, #16
32508     A7 16 02 FB | 	rdlong	arg03, fp
3250c     18 4E 85 F1 | 	sub	fp, #24
32510     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
32514     68 01 90 ED |  if_be	jmp	#LR__4963
32518     08 4E 05 F1 | 	add	fp, #8
3251c     A7 18 02 FB | 	rdlong	arg04, fp
32520     10 4E 05 F1 | 	add	fp, #16
32524     A7 16 02 FB | 	rdlong	arg03, fp
32528     0B 19 82 F1 | 	sub	arg04, arg03
3252c     10 4E 85 F1 | 	sub	fp, #16
32530     A7 18 62 FC | 	wrlong	arg04, fp
32534     04 4E 85 F1 | 	sub	fp, #4
32538     A7 18 02 FB | 	rdlong	arg04, fp
3253c     0C FB 01 F6 | 	mov	result1, arg04
32540     14 18 06 F1 | 	add	arg04, #20
32544     0C 19 02 FB | 	rdlong	arg04, arg04
32548     14 4E 05 F1 | 	add	fp, #20
3254c     A7 16 02 FB | 	rdlong	arg03, fp
32550     0B 19 02 F1 | 	add	arg04, arg03
32554     14 FA 05 F1 | 	add	result1, #20
32558     FD 18 62 FC | 	wrlong	arg04, result1
3255c     14 4E 85 F1 | 	sub	fp, #20
32560     A7 16 02 FB | 	rdlong	arg03, fp
32564     04 4E 85 F1 | 	sub	fp, #4
32568     10 16 06 F1 | 	add	arg03, #16
3256c     0B 17 C2 FA | 	rdbyte	arg03, arg03
32570     02 16 CE F7 | 	test	arg03, #2 wz
32574     3C 00 90 AD |  if_e	jmp	#LR__4958
32578     04 4E 05 F1 | 	add	fp, #4
3257c     A7 12 02 FB | 	rdlong	arg01, fp
32580     10 4E 05 F1 | 	add	fp, #16
32584     A7 14 02 FB | 	rdlong	arg02, fp
32588     14 4E 85 F1 | 	sub	fp, #20
3258c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
32590     14 4E 05 F1 | 	add	fp, #20
32594     A7 FA 61 FC | 	wrlong	result1, fp
32598     00 FA 4D F2 | 	cmps	result1, #0 wz
3259c     14 4E 85 F1 | 	sub	fp, #20
325a0     08 4E 05 A1 |  if_e	add	fp, #8
325a4     A7 00 68 AC |  if_e	wrlong	#0, fp
325a8     08 4E 85 A1 |  if_e	sub	fp, #8
325ac                 | ' 							ofs = 0; break;
325ac     D0 00 90 AD |  if_e	jmp	#LR__4963
325b0     24 00 90 FD | 	jmp	#LR__4959
325b4                 | LR__4958
325b4     04 4E 05 F1 | 	add	fp, #4
325b8     A7 12 02 FB | 	rdlong	arg01, fp
325bc     10 4E 05 F1 | 	add	fp, #16
325c0     A7 14 02 FB | 	rdlong	arg02, fp
325c4     14 4E 85 F1 | 	sub	fp, #20
325c8     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
325cc     14 4E 05 F1 | 	add	fp, #20
325d0     A7 FA 61 FC | 	wrlong	result1, fp
325d4     14 4E 85 F1 | 	sub	fp, #20
325d8                 | LR__4959
325d8     14 4E 05 F1 | 	add	fp, #20
325dc     A7 16 02 FB | 	rdlong	arg03, fp
325e0     14 4E 85 F1 | 	sub	fp, #20
325e4     FF FF 7F FF 
325e8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
325ec     1C 00 90 5D |  if_ne	jmp	#LR__4960
325f0     04 4E 05 F1 | 	add	fp, #4
325f4     A7 16 02 FB | 	rdlong	arg03, fp
325f8     04 4E 85 F1 | 	sub	fp, #4
325fc     11 16 06 F1 | 	add	arg03, #17
32600     0B 03 48 FC | 	wrbyte	#1, arg03
32604     01 FA 05 F6 | 	mov	result1, #1
32608     D0 02 90 FD | 	jmp	#LR__4973
3260c                 | LR__4960
3260c     14 4E 05 F1 | 	add	fp, #20
32610     A7 16 02 FB | 	rdlong	arg03, fp
32614     14 4E 85 F1 | 	sub	fp, #20
32618     02 16 16 F2 | 	cmp	arg03, #2 wc
3261c     24 00 90 CD |  if_b	jmp	#LR__4961
32620     10 4E 05 F1 | 	add	fp, #16
32624     A7 18 02 FB | 	rdlong	arg04, fp
32628     04 4E 05 F1 | 	add	fp, #4
3262c     A7 16 02 FB | 	rdlong	arg03, fp
32630     14 4E 85 F1 | 	sub	fp, #20
32634     18 18 06 F1 | 	add	arg04, #24
32638     0C 19 02 FB | 	rdlong	arg04, arg04
3263c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
32640     1C 00 90 CD |  if_b	jmp	#LR__4962
32644                 | LR__4961
32644     04 4E 05 F1 | 	add	fp, #4
32648     A7 16 02 FB | 	rdlong	arg03, fp
3264c     04 4E 85 F1 | 	sub	fp, #4
32650     11 16 06 F1 | 	add	arg03, #17
32654     0B 05 48 FC | 	wrbyte	#2, arg03
32658     02 FA 05 F6 | 	mov	result1, #2
3265c     7C 02 90 FD | 	jmp	#LR__4973
32660                 | LR__4962
32660     04 4E 05 F1 | 	add	fp, #4
32664     A7 18 02 FB | 	rdlong	arg04, fp
32668     10 4E 05 F1 | 	add	fp, #16
3266c     A7 16 02 FB | 	rdlong	arg03, fp
32670     14 4E 85 F1 | 	sub	fp, #20
32674     18 18 06 F1 | 	add	arg04, #24
32678     0C 17 62 FC | 	wrlong	arg03, arg04
3267c     7C FE 9F FD | 	jmp	#LR__4957
32680                 | LR__4963
32680     04 4E 05 F1 | 	add	fp, #4
32684     A7 16 02 FB | 	rdlong	arg03, fp
32688     0B 13 02 F6 | 	mov	arg01, arg03
3268c     14 16 06 F1 | 	add	arg03, #20
32690     0B 15 02 FB | 	rdlong	arg02, arg03
32694     04 4E 05 F1 | 	add	fp, #4
32698     A7 16 02 FB | 	rdlong	arg03, fp
3269c     0B 15 02 F1 | 	add	arg02, arg03
326a0     14 12 06 F1 | 	add	arg01, #20
326a4     09 15 62 FC | 	wrlong	arg02, arg01
326a8     A7 16 02 FB | 	rdlong	arg03, fp
326ac     08 4E 85 F1 | 	sub	fp, #8
326b0     FF 17 CE F7 | 	test	arg03, #511 wz
326b4     6C 00 90 AD |  if_e	jmp	#LR__4965
326b8     10 4E 05 F1 | 	add	fp, #16
326bc     A7 12 02 FB | 	rdlong	arg01, fp
326c0     04 4E 05 F1 | 	add	fp, #4
326c4     A7 14 02 FB | 	rdlong	arg02, fp
326c8     14 4E 85 F1 | 	sub	fp, #20
326cc     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
326d0     1C 4E 05 F1 | 	add	fp, #28
326d4     A7 FA 61 FC | 	wrlong	result1, fp
326d8     1C 4E 85 F1 | 	sub	fp, #28
326dc     00 FA 0D F2 | 	cmp	result1, #0 wz
326e0     1C 00 90 5D |  if_ne	jmp	#LR__4964
326e4     04 4E 05 F1 | 	add	fp, #4
326e8     A7 16 02 FB | 	rdlong	arg03, fp
326ec     04 4E 85 F1 | 	sub	fp, #4
326f0     11 16 06 F1 | 	add	arg03, #17
326f4     0B 05 48 FC | 	wrbyte	#2, arg03
326f8     02 FA 05 F6 | 	mov	result1, #2
326fc     DC 01 90 FD | 	jmp	#LR__4973
32700                 | LR__4964
32700     1C 4E 05 F1 | 	add	fp, #28
32704     A7 18 02 FB | 	rdlong	arg04, fp
32708     14 4E 85 F1 | 	sub	fp, #20
3270c     A7 16 02 FB | 	rdlong	arg03, fp
32710     09 16 46 F0 | 	shr	arg03, #9
32714     0B 19 02 F1 | 	add	arg04, arg03
32718     14 4E 05 F1 | 	add	fp, #20
3271c     A7 18 62 FC | 	wrlong	arg04, fp
32720     1C 4E 85 F1 | 	sub	fp, #28
32724                 | LR__4965
32724                 | LR__4966
32724                 | LR__4967
32724     04 4E 05 F1 | 	add	fp, #4
32728     A7 18 02 FB | 	rdlong	arg04, fp
3272c     0C 17 02 F6 | 	mov	arg03, arg04
32730     04 4E 85 F1 | 	sub	fp, #4
32734     14 16 06 F1 | 	add	arg03, #20
32738     0B 17 02 FB | 	rdlong	arg03, arg03
3273c     0C 18 06 F1 | 	add	arg04, #12
32740     0C 19 02 FB | 	rdlong	arg04, arg04
32744     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
32748     3C 00 90 ED |  if_be	jmp	#LR__4968
3274c     04 4E 05 F1 | 	add	fp, #4
32750     A7 18 02 FB | 	rdlong	arg04, fp
32754     0C 17 02 F6 | 	mov	arg03, arg04
32758     14 18 06 F1 | 	add	arg04, #20
3275c     0C 19 02 FB | 	rdlong	arg04, arg04
32760     0C 16 06 F1 | 	add	arg03, #12
32764     0B 19 62 FC | 	wrlong	arg04, arg03
32768     A7 18 02 FB | 	rdlong	arg04, fp
3276c     0C 17 02 F6 | 	mov	arg03, arg04
32770     04 4E 85 F1 | 	sub	fp, #4
32774     10 18 06 F1 | 	add	arg04, #16
32778     0C 19 C2 FA | 	rdbyte	arg04, arg04
3277c     40 18 46 F5 | 	or	arg04, #64
32780     10 16 06 F1 | 	add	arg03, #16
32784     0B 19 42 FC | 	wrbyte	arg04, arg03
32788                 | LR__4968
32788     04 4E 05 F1 | 	add	fp, #4
3278c     A7 16 02 FB | 	rdlong	arg03, fp
32790     04 4E 85 F1 | 	sub	fp, #4
32794     14 16 06 F1 | 	add	arg03, #20
32798     0B 17 02 FB | 	rdlong	arg03, arg03
3279c     FF 17 CE F7 | 	test	arg03, #511 wz
327a0     2C 01 90 AD |  if_e	jmp	#LR__4972
327a4     04 4E 05 F1 | 	add	fp, #4
327a8     A7 18 02 FB | 	rdlong	arg04, fp
327ac     18 4E 05 F1 | 	add	fp, #24
327b0     A7 16 02 FB | 	rdlong	arg03, fp
327b4     1C 4E 85 F1 | 	sub	fp, #28
327b8     1C 18 06 F1 | 	add	arg04, #28
327bc     0C 19 02 FB | 	rdlong	arg04, arg04
327c0     0C 17 0A F2 | 	cmp	arg03, arg04 wz
327c4     08 01 90 AD |  if_e	jmp	#LR__4972
327c8     04 4E 05 F1 | 	add	fp, #4
327cc     A7 16 02 FB | 	rdlong	arg03, fp
327d0     04 4E 85 F1 | 	sub	fp, #4
327d4     10 16 06 F1 | 	add	arg03, #16
327d8     0B 17 C2 FA | 	rdbyte	arg03, arg03
327dc     80 16 CE F7 | 	test	arg03, #128 wz
327e0     7C 00 90 AD |  if_e	jmp	#LR__4970
327e4     10 4E 05 F1 | 	add	fp, #16
327e8     A7 16 02 FB | 	rdlong	arg03, fp
327ec     01 16 06 F1 | 	add	arg03, #1
327f0     0B 13 C2 FA | 	rdbyte	arg01, arg03
327f4     0C 4E 85 F1 | 	sub	fp, #12
327f8     A7 16 02 FB | 	rdlong	arg03, fp
327fc     0B 15 02 F6 | 	mov	arg02, arg03
32800     28 14 06 F1 | 	add	arg02, #40
32804     04 4E 85 F1 | 	sub	fp, #4
32808     1C 16 06 F1 | 	add	arg03, #28
3280c     0B 17 02 FB | 	rdlong	arg03, arg03
32810     01 18 06 F6 | 	mov	arg04, #1
32814     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
32818     00 FA 0D F2 | 	cmp	result1, #0 wz
3281c     1C 00 90 AD |  if_e	jmp	#LR__4969
32820     04 4E 05 F1 | 	add	fp, #4
32824     A7 16 02 FB | 	rdlong	arg03, fp
32828     04 4E 85 F1 | 	sub	fp, #4
3282c     11 16 06 F1 | 	add	arg03, #17
32830     0B 03 48 FC | 	wrbyte	#1, arg03
32834     01 FA 05 F6 | 	mov	result1, #1
32838     A0 00 90 FD | 	jmp	#LR__4973
3283c                 | LR__4969
3283c     04 4E 05 F1 | 	add	fp, #4
32840     A7 18 02 FB | 	rdlong	arg04, fp
32844     0C 17 02 F6 | 	mov	arg03, arg04
32848     04 4E 85 F1 | 	sub	fp, #4
3284c     10 18 06 F1 | 	add	arg04, #16
32850     0C 19 C2 FA | 	rdbyte	arg04, arg04
32854     7F 18 06 F5 | 	and	arg04, #127
32858     10 16 06 F1 | 	add	arg03, #16
3285c     0B 19 42 FC | 	wrbyte	arg04, arg03
32860                 | LR__4970
32860     10 4E 05 F1 | 	add	fp, #16
32864     A7 16 02 FB | 	rdlong	arg03, fp
32868     01 16 06 F1 | 	add	arg03, #1
3286c     0B 13 C2 FA | 	rdbyte	arg01, arg03
32870     0C 4E 85 F1 | 	sub	fp, #12
32874     A7 14 02 FB | 	rdlong	arg02, fp
32878     28 14 06 F1 | 	add	arg02, #40
3287c     18 4E 05 F1 | 	add	fp, #24
32880     A7 16 02 FB | 	rdlong	arg03, fp
32884     1C 4E 85 F1 | 	sub	fp, #28
32888     01 18 06 F6 | 	mov	arg04, #1
3288c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
32890     00 FA 0D F2 | 	cmp	result1, #0 wz
32894     1C 00 90 AD |  if_e	jmp	#LR__4971
32898     04 4E 05 F1 | 	add	fp, #4
3289c     A7 16 02 FB | 	rdlong	arg03, fp
328a0     04 4E 85 F1 | 	sub	fp, #4
328a4     11 16 06 F1 | 	add	arg03, #17
328a8     0B 03 48 FC | 	wrbyte	#1, arg03
328ac     01 FA 05 F6 | 	mov	result1, #1
328b0     28 00 90 FD | 	jmp	#LR__4973
328b4                 | LR__4971
328b4     04 4E 05 F1 | 	add	fp, #4
328b8     A7 18 02 FB | 	rdlong	arg04, fp
328bc     18 4E 05 F1 | 	add	fp, #24
328c0     A7 16 02 FB | 	rdlong	arg03, fp
328c4     1C 4E 85 F1 | 	sub	fp, #28
328c8     1C 18 06 F1 | 	add	arg04, #28
328cc     0C 17 62 FC | 	wrlong	arg03, arg04
328d0                 | LR__4972
328d0                 | ' 
328d0                 | ' 			fp->sect = nsect;
328d0                 | ' 		}
328d0                 | ' 	}
328d0                 | ' 
328d0                 | ' 	return res ;
328d0     0C 4E 05 F1 | 	add	fp, #12
328d4     A7 FA 01 FB | 	rdlong	result1, fp
328d8     0C 4E 85 F1 | 	sub	fp, #12
328dc                 | LR__4973
328dc     A7 F0 03 F6 | 	mov	ptra, fp
328e0     B2 00 A0 FD | 	call	#popregs_
328e4                 | _fatfs_cc_f_lseek_ret
328e4     2D 00 64 FD | 	ret
328e8                 | 
328e8                 | _fatfs_cc_f_opendir
328e8     01 4A 05 F6 | 	mov	COUNT_, #1
328ec     A8 00 A0 FD | 	call	#pushregs_
328f0     14 F0 07 F1 | 	add	ptra, #20
328f4     04 4E 05 F1 | 	add	fp, #4
328f8     A7 12 62 FC | 	wrlong	arg01, fp
328fc     04 4E 05 F1 | 	add	fp, #4
32900     A7 14 62 FC | 	wrlong	arg02, fp
32904     04 4E 85 F1 | 	sub	fp, #4
32908     A7 16 0A FB | 	rdlong	arg03, fp wz
3290c     04 4E 85 F1 | 	sub	fp, #4
32910     09 FA 05 A6 |  if_e	mov	result1, #9
32914     78 01 90 AD |  if_e	jmp	#LR__4986
32918     08 4E 05 F1 | 	add	fp, #8
3291c     A7 12 02 F6 | 	mov	arg01, fp
32920     08 4E 05 F1 | 	add	fp, #8
32924     A7 14 02 F6 | 	mov	arg02, fp
32928     10 4E 85 F1 | 	sub	fp, #16
3292c     00 16 06 F6 | 	mov	arg03, #0
32930     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
32934     0C 4E 05 F1 | 	add	fp, #12
32938     A7 FA 61 FC | 	wrlong	result1, fp
3293c     0C 4E 85 F1 | 	sub	fp, #12
32940     00 FA 0D F2 | 	cmp	result1, #0 wz
32944     20 01 90 5D |  if_ne	jmp	#LR__4985
32948     04 4E 05 F1 | 	add	fp, #4
3294c     A7 16 02 FB | 	rdlong	arg03, fp
32950     0C 4E 05 F1 | 	add	fp, #12
32954     A7 FA 01 FB | 	rdlong	result1, fp
32958     0B FB 61 FC | 	wrlong	result1, arg03
3295c     0C 4E 85 F1 | 	sub	fp, #12
32960     A7 12 02 FB | 	rdlong	arg01, fp
32964     04 4E 05 F1 | 	add	fp, #4
32968     A7 14 02 FB | 	rdlong	arg02, fp
3296c     08 4E 85 F1 | 	sub	fp, #8
32970     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
32974     0C 4E 05 F1 | 	add	fp, #12
32978     A7 FA 61 FC | 	wrlong	result1, fp
3297c     0C 4E 85 F1 | 	sub	fp, #12
32980     00 FA 0D F2 | 	cmp	result1, #0 wz
32984     C4 00 90 5D |  if_ne	jmp	#LR__4984
32988     04 4E 05 F1 | 	add	fp, #4
3298c     A7 16 02 FB | 	rdlong	arg03, fp
32990     04 4E 85 F1 | 	sub	fp, #4
32994     2B 16 06 F1 | 	add	arg03, #43
32998     0B 17 C2 FA | 	rdbyte	arg03, arg03
3299c     80 16 CE F7 | 	test	arg03, #128 wz
329a0     58 00 90 5D |  if_ne	jmp	#LR__4982
329a4     04 4E 05 F1 | 	add	fp, #4
329a8     A7 16 02 FB | 	rdlong	arg03, fp
329ac     04 4E 85 F1 | 	sub	fp, #4
329b0     06 16 06 F1 | 	add	arg03, #6
329b4     0B 17 C2 FA | 	rdbyte	arg03, arg03
329b8     10 16 CE F7 | 	test	arg03, #16 wz
329bc     30 00 90 AD |  if_e	jmp	#LR__4980
329c0     04 4E 05 F1 | 	add	fp, #4
329c4     A7 16 02 FB | 	rdlong	arg03, fp
329c8     0B 27 02 F6 | 	mov	local01, arg03
329cc     0C 4E 05 F1 | 	add	fp, #12
329d0     A7 12 02 FB | 	rdlong	arg01, fp
329d4     10 4E 85 F1 | 	sub	fp, #16
329d8     1C 16 06 F1 | 	add	arg03, #28
329dc     0B 15 02 FB | 	rdlong	arg02, arg03
329e0     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
329e4     08 26 06 F1 | 	add	local01, #8
329e8     13 FB 61 FC | 	wrlong	result1, local01
329ec     0C 00 90 FD | 	jmp	#LR__4981
329f0                 | LR__4980
329f0     0C 4E 05 F1 | 	add	fp, #12
329f4     A7 0A 68 FC | 	wrlong	#5, fp
329f8     0C 4E 85 F1 | 	sub	fp, #12
329fc                 | LR__4981
329fc                 | LR__4982
329fc     0C 4E 05 F1 | 	add	fp, #12
32a00     A7 26 0A FB | 	rdlong	local01, fp wz
32a04     0C 4E 85 F1 | 	sub	fp, #12
32a08     40 00 90 5D |  if_ne	jmp	#LR__4983
32a0c     04 4E 05 F1 | 	add	fp, #4
32a10     A7 26 02 FB | 	rdlong	local01, fp
32a14     0C 4E 05 F1 | 	add	fp, #12
32a18     A7 16 02 FB | 	rdlong	arg03, fp
32a1c     06 16 06 F1 | 	add	arg03, #6
32a20     0B 17 E2 FA | 	rdword	arg03, arg03
32a24     04 26 06 F1 | 	add	local01, #4
32a28     13 17 52 FC | 	wrword	arg03, local01
32a2c     0C 4E 85 F1 | 	sub	fp, #12
32a30     A7 12 02 FB | 	rdlong	arg01, fp
32a34     04 4E 85 F1 | 	sub	fp, #4
32a38     00 14 06 F6 | 	mov	arg02, #0
32a3c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
32a40     0C 4E 05 F1 | 	add	fp, #12
32a44     A7 FA 61 FC | 	wrlong	result1, fp
32a48     0C 4E 85 F1 | 	sub	fp, #12
32a4c                 | LR__4983
32a4c                 | LR__4984
32a4c     0C 4E 05 F1 | 	add	fp, #12
32a50     A7 26 02 FB | 	rdlong	local01, fp
32a54     0C 4E 85 F1 | 	sub	fp, #12
32a58     04 26 0E F2 | 	cmp	local01, #4 wz
32a5c     0C 4E 05 A1 |  if_e	add	fp, #12
32a60     A7 0A 68 AC |  if_e	wrlong	#5, fp
32a64     0C 4E 85 A1 |  if_e	sub	fp, #12
32a68                 | LR__4985
32a68     0C 4E 05 F1 | 	add	fp, #12
32a6c     A7 26 0A FB | 	rdlong	local01, fp wz
32a70     0C 4E 85 F1 | 	sub	fp, #12
32a74     04 4E 05 51 |  if_ne	add	fp, #4
32a78     A7 26 02 5B |  if_ne	rdlong	local01, fp
32a7c     04 4E 85 51 |  if_ne	sub	fp, #4
32a80     13 01 68 5C |  if_ne	wrlong	#0, local01
32a84                 | ' 
32a84                 | ' 	return res ;
32a84     0C 4E 05 F1 | 	add	fp, #12
32a88     A7 FA 01 FB | 	rdlong	result1, fp
32a8c     0C 4E 85 F1 | 	sub	fp, #12
32a90                 | LR__4986
32a90     A7 F0 03 F6 | 	mov	ptra, fp
32a94     B2 00 A0 FD | 	call	#popregs_
32a98                 | _fatfs_cc_f_opendir_ret
32a98     2D 00 64 FD | 	ret
32a9c                 | 
32a9c                 | _fatfs_cc_f_closedir
32a9c     00 4A 05 F6 | 	mov	COUNT_, #0
32aa0     A8 00 A0 FD | 	call	#pushregs_
32aa4     10 F0 07 F1 | 	add	ptra, #16
32aa8     04 4E 05 F1 | 	add	fp, #4
32aac     A7 12 62 FC | 	wrlong	arg01, fp
32ab0     08 4E 05 F1 | 	add	fp, #8
32ab4     A7 14 02 F6 | 	mov	arg02, fp
32ab8     0C 4E 85 F1 | 	sub	fp, #12
32abc     C0 DD BF FD | 	call	#_fatfs_cc_validate
32ac0     08 4E 05 F1 | 	add	fp, #8
32ac4     A7 FA 61 FC | 	wrlong	result1, fp
32ac8     08 4E 85 F1 | 	sub	fp, #8
32acc     00 FA 0D F2 | 	cmp	result1, #0 wz
32ad0     04 4E 05 A1 |  if_e	add	fp, #4
32ad4     A7 FA 01 AB |  if_e	rdlong	result1, fp
32ad8     04 4E 85 A1 |  if_e	sub	fp, #4
32adc     FD 00 68 AC |  if_e	wrlong	#0, result1
32ae0                 | ' 
32ae0                 | ' 
32ae0                 | ' 
32ae0                 | ' 
32ae0                 | ' 		dp->obj.fs = 0;
32ae0                 | ' #line 4633 "ff.c"
32ae0                 | ' 	}
32ae0                 | ' 	return res;
32ae0     08 4E 05 F1 | 	add	fp, #8
32ae4     A7 FA 01 FB | 	rdlong	result1, fp
32ae8     08 4E 85 F1 | 	sub	fp, #8
32aec     A7 F0 03 F6 | 	mov	ptra, fp
32af0     B2 00 A0 FD | 	call	#popregs_
32af4                 | _fatfs_cc_f_closedir_ret
32af4     2D 00 64 FD | 	ret
32af8                 | 
32af8                 | _fatfs_cc_f_readdir
32af8     00 4A 05 F6 | 	mov	COUNT_, #0
32afc     A8 00 A0 FD | 	call	#pushregs_
32b00     14 F0 07 F1 | 	add	ptra, #20
32b04     04 4E 05 F1 | 	add	fp, #4
32b08     A7 12 62 FC | 	wrlong	arg01, fp
32b0c     04 4E 05 F1 | 	add	fp, #4
32b10     A7 14 62 FC | 	wrlong	arg02, fp
32b14     04 4E 85 F1 | 	sub	fp, #4
32b18     A7 12 02 FB | 	rdlong	arg01, fp
32b1c     0C 4E 05 F1 | 	add	fp, #12
32b20     A7 14 02 F6 | 	mov	arg02, fp
32b24     10 4E 85 F1 | 	sub	fp, #16
32b28     54 DD BF FD | 	call	#_fatfs_cc_validate
32b2c     0C 4E 05 F1 | 	add	fp, #12
32b30     A7 FA 61 FC | 	wrlong	result1, fp
32b34     0C 4E 85 F1 | 	sub	fp, #12
32b38     00 FA 0D F2 | 	cmp	result1, #0 wz
32b3c     BC 00 90 5D |  if_ne	jmp	#LR__4993
32b40     08 4E 05 F1 | 	add	fp, #8
32b44     A7 FA 09 FB | 	rdlong	result1, fp wz
32b48     08 4E 85 F1 | 	sub	fp, #8
32b4c     24 00 90 5D |  if_ne	jmp	#LR__4990
32b50     04 4E 05 F1 | 	add	fp, #4
32b54     A7 12 02 FB | 	rdlong	arg01, fp
32b58     04 4E 85 F1 | 	sub	fp, #4
32b5c     00 14 06 F6 | 	mov	arg02, #0
32b60     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
32b64     0C 4E 05 F1 | 	add	fp, #12
32b68     A7 FA 61 FC | 	wrlong	result1, fp
32b6c     0C 4E 85 F1 | 	sub	fp, #12
32b70     88 00 90 FD | 	jmp	#LR__4992
32b74                 | LR__4990
32b74     04 4E 05 F1 | 	add	fp, #4
32b78     A7 12 02 FB | 	rdlong	arg01, fp
32b7c     04 4E 85 F1 | 	sub	fp, #4
32b80     00 14 06 F6 | 	mov	arg02, #0
32b84     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
32b88     0C 4E 05 F1 | 	add	fp, #12
32b8c     A7 FA 61 FC | 	wrlong	result1, fp
32b90     0C 4E 85 F1 | 	sub	fp, #12
32b94     04 FA 0D F2 | 	cmp	result1, #4 wz
32b98     0C 4E 05 A1 |  if_e	add	fp, #12
32b9c     A7 00 68 AC |  if_e	wrlong	#0, fp
32ba0     0C 4E 85 A1 |  if_e	sub	fp, #12
32ba4     0C 4E 05 F1 | 	add	fp, #12
32ba8     A7 FA 09 FB | 	rdlong	result1, fp wz
32bac     0C 4E 85 F1 | 	sub	fp, #12
32bb0     48 00 90 5D |  if_ne	jmp	#LR__4991
32bb4     04 4E 05 F1 | 	add	fp, #4
32bb8     A7 12 02 FB | 	rdlong	arg01, fp
32bbc     04 4E 05 F1 | 	add	fp, #4
32bc0     A7 14 02 FB | 	rdlong	arg02, fp
32bc4     08 4E 85 F1 | 	sub	fp, #8
32bc8     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
32bcc     04 4E 05 F1 | 	add	fp, #4
32bd0     A7 12 02 FB | 	rdlong	arg01, fp
32bd4     04 4E 85 F1 | 	sub	fp, #4
32bd8     00 14 06 F6 | 	mov	arg02, #0
32bdc     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
32be0     0C 4E 05 F1 | 	add	fp, #12
32be4     A7 FA 61 FC | 	wrlong	result1, fp
32be8     0C 4E 85 F1 | 	sub	fp, #12
32bec     04 FA 0D F2 | 	cmp	result1, #4 wz
32bf0     0C 4E 05 A1 |  if_e	add	fp, #12
32bf4     A7 00 68 AC |  if_e	wrlong	#0, fp
32bf8     0C 4E 85 A1 |  if_e	sub	fp, #12
32bfc                 | LR__4991
32bfc                 | LR__4992
32bfc                 | LR__4993
32bfc                 | ' 			}
32bfc                 | ' 			;
32bfc                 | ' 		}
32bfc                 | ' 	}
32bfc                 | ' 	return res ;
32bfc     0C 4E 05 F1 | 	add	fp, #12
32c00     A7 FA 01 FB | 	rdlong	result1, fp
32c04     0C 4E 85 F1 | 	sub	fp, #12
32c08     A7 F0 03 F6 | 	mov	ptra, fp
32c0c     B2 00 A0 FD | 	call	#popregs_
32c10                 | _fatfs_cc_f_readdir_ret
32c10     2D 00 64 FD | 	ret
32c14                 | 
32c14                 | _fatfs_cc_f_stat
32c14     00 4A 05 F6 | 	mov	COUNT_, #0
32c18     A8 00 A0 FD | 	call	#pushregs_
32c1c     40 F0 07 F1 | 	add	ptra, #64
32c20     04 4E 05 F1 | 	add	fp, #4
32c24     A7 12 62 FC | 	wrlong	arg01, fp
32c28     04 4E 05 F1 | 	add	fp, #4
32c2c     A7 14 62 FC | 	wrlong	arg02, fp
32c30     04 4E 85 F1 | 	sub	fp, #4
32c34     A7 12 02 F6 | 	mov	arg01, fp
32c38     0C 4E 05 F1 | 	add	fp, #12
32c3c     A7 14 02 F6 | 	mov	arg02, fp
32c40     10 4E 85 F1 | 	sub	fp, #16
32c44     00 16 06 F6 | 	mov	arg03, #0
32c48     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
32c4c     0C 4E 05 F1 | 	add	fp, #12
32c50     A7 FA 61 FC | 	wrlong	result1, fp
32c54     0C 4E 85 F1 | 	sub	fp, #12
32c58     00 FA 0D F2 | 	cmp	result1, #0 wz
32c5c     74 00 90 5D |  if_ne	jmp	#LR__5003
32c60     10 4E 05 F1 | 	add	fp, #16
32c64     A7 12 02 F6 | 	mov	arg01, fp
32c68     0C 4E 85 F1 | 	sub	fp, #12
32c6c     A7 14 02 FB | 	rdlong	arg02, fp
32c70     04 4E 85 F1 | 	sub	fp, #4
32c74     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
32c78     0C 4E 05 F1 | 	add	fp, #12
32c7c     A7 FA 61 FC | 	wrlong	result1, fp
32c80     0C 4E 85 F1 | 	sub	fp, #12
32c84     00 FA 0D F2 | 	cmp	result1, #0 wz
32c88     48 00 90 5D |  if_ne	jmp	#LR__5002
32c8c     3B 4E 05 F1 | 	add	fp, #59
32c90     A7 FA C1 FA | 	rdbyte	result1, fp
32c94     3B 4E 85 F1 | 	sub	fp, #59
32c98     80 FA CD F7 | 	test	result1, #128 wz
32c9c     0C 4E 05 51 |  if_ne	add	fp, #12
32ca0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
32ca4     0C 4E 85 51 |  if_ne	sub	fp, #12
32ca8     28 00 90 5D |  if_ne	jmp	#LR__5001
32cac     08 4E 05 F1 | 	add	fp, #8
32cb0     A7 FA 09 FB | 	rdlong	result1, fp wz
32cb4     08 4E 85 F1 | 	sub	fp, #8
32cb8     18 00 90 AD |  if_e	jmp	#LR__5000
32cbc     10 4E 05 F1 | 	add	fp, #16
32cc0     A7 12 02 F6 | 	mov	arg01, fp
32cc4     08 4E 85 F1 | 	sub	fp, #8
32cc8     A7 14 02 FB | 	rdlong	arg02, fp
32ccc     08 4E 85 F1 | 	sub	fp, #8
32cd0     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
32cd4                 | LR__5000
32cd4                 | LR__5001
32cd4                 | LR__5002
32cd4                 | LR__5003
32cd4                 | ' 			}
32cd4                 | ' 		}
32cd4                 | ' 		;
32cd4                 | ' 	}
32cd4                 | ' 
32cd4                 | ' 	return res ;
32cd4     0C 4E 05 F1 | 	add	fp, #12
32cd8     A7 FA 01 FB | 	rdlong	result1, fp
32cdc     0C 4E 85 F1 | 	sub	fp, #12
32ce0     A7 F0 03 F6 | 	mov	ptra, fp
32ce4     B2 00 A0 FD | 	call	#popregs_
32ce8                 | _fatfs_cc_f_stat_ret
32ce8     2D 00 64 FD | 	ret
32cec                 | 
32cec                 | _fatfs_cc_f_unlink
32cec     00 4A 05 F6 | 	mov	COUNT_, #0
32cf0     A8 00 A0 FD | 	call	#pushregs_
32cf4     74 F0 07 F1 | 	add	ptra, #116
32cf8     04 4E 05 F1 | 	add	fp, #4
32cfc     A7 12 62 FC | 	wrlong	arg01, fp
32d00     68 4E 05 F1 | 	add	fp, #104
32d04     A7 00 68 FC | 	wrlong	#0, fp
32d08     68 4E 85 F1 | 	sub	fp, #104
32d0c     A7 12 02 F6 | 	mov	arg01, fp
32d10     6C 4E 05 F1 | 	add	fp, #108
32d14     A7 14 02 F6 | 	mov	arg02, fp
32d18     70 4E 85 F1 | 	sub	fp, #112
32d1c     02 16 06 F6 | 	mov	arg03, #2
32d20     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
32d24     08 4E 05 F1 | 	add	fp, #8
32d28     A7 FA 61 FC | 	wrlong	result1, fp
32d2c     08 4E 85 F1 | 	sub	fp, #8
32d30     00 FA 0D F2 | 	cmp	result1, #0 wz
32d34     E4 01 90 5D |  if_ne	jmp	#LR__5018
32d38     70 4E 05 F1 | 	add	fp, #112
32d3c     A7 16 02 FB | 	rdlong	arg03, fp
32d40     64 4E 85 F1 | 	sub	fp, #100
32d44     A7 16 62 FC | 	wrlong	arg03, fp
32d48     A7 12 02 F6 | 	mov	arg01, fp
32d4c     08 4E 85 F1 | 	sub	fp, #8
32d50     A7 14 02 FB | 	rdlong	arg02, fp
32d54     04 4E 85 F1 | 	sub	fp, #4
32d58     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
32d5c     08 4E 05 F1 | 	add	fp, #8
32d60     A7 FA 61 FC | 	wrlong	result1, fp
32d64     00 FA 4D F2 | 	cmps	result1, #0 wz
32d68     08 4E 85 F1 | 	sub	fp, #8
32d6c     AC 01 90 5D |  if_ne	jmp	#LR__5017
32d70     37 4E 05 F1 | 	add	fp, #55
32d74     A7 FA C1 FA | 	rdbyte	result1, fp
32d78     37 4E 85 F1 | 	sub	fp, #55
32d7c     80 FA CD F7 | 	test	result1, #128 wz
32d80     08 4E 05 51 |  if_ne	add	fp, #8
32d84     A7 0C 68 5C |  if_ne	wrlong	#6, fp
32d88     08 4E 85 51 |  if_ne	sub	fp, #8
32d8c     1C 00 90 5D |  if_ne	jmp	#LR__5010
32d90     12 4E 05 F1 | 	add	fp, #18
32d94     A7 FA C1 FA | 	rdbyte	result1, fp
32d98     12 4E 85 F1 | 	sub	fp, #18
32d9c     01 FA CD F7 | 	test	result1, #1 wz
32da0     08 4E 05 51 |  if_ne	add	fp, #8
32da4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32da8     08 4E 85 51 |  if_ne	sub	fp, #8
32dac                 | LR__5010
32dac     08 4E 05 F1 | 	add	fp, #8
32db0     A7 FA 09 FB | 	rdlong	result1, fp wz
32db4     08 4E 85 F1 | 	sub	fp, #8
32db8     C8 00 90 5D |  if_ne	jmp	#LR__5013
32dbc     70 4E 05 F1 | 	add	fp, #112
32dc0     A7 12 02 FB | 	rdlong	arg01, fp
32dc4     48 4E 85 F1 | 	sub	fp, #72
32dc8     A7 14 02 FB | 	rdlong	arg02, fp
32dcc     28 4E 85 F1 | 	sub	fp, #40
32dd0     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
32dd4     6C 4E 05 F1 | 	add	fp, #108
32dd8     A7 FA 61 FC | 	wrlong	result1, fp
32ddc     5A 4E 85 F1 | 	sub	fp, #90
32de0     A7 FA C1 FA | 	rdbyte	result1, fp
32de4     12 4E 85 F1 | 	sub	fp, #18
32de8     10 FA CD F7 | 	test	result1, #16 wz
32dec     94 00 90 AD |  if_e	jmp	#LR__5012
32df0     70 4E 05 F1 | 	add	fp, #112
32df4     A7 FA 01 FB | 	rdlong	result1, fp
32df8     34 4E 85 F1 | 	sub	fp, #52
32dfc     A7 FA 61 FC | 	wrlong	result1, fp
32e00     30 4E 05 F1 | 	add	fp, #48
32e04     A7 16 02 FB | 	rdlong	arg03, fp
32e08     28 4E 85 F1 | 	sub	fp, #40
32e0c     A7 16 62 FC | 	wrlong	arg03, fp
32e10     08 4E 85 F1 | 	sub	fp, #8
32e14     A7 12 02 F6 | 	mov	arg01, fp
32e18     3C 4E 85 F1 | 	sub	fp, #60
32e1c     00 14 06 F6 | 	mov	arg02, #0
32e20     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
32e24     08 4E 05 F1 | 	add	fp, #8
32e28     A7 FA 61 FC | 	wrlong	result1, fp
32e2c     08 4E 85 F1 | 	sub	fp, #8
32e30     00 FA 0D F2 | 	cmp	result1, #0 wz
32e34     4C 00 90 5D |  if_ne	jmp	#LR__5011
32e38     3C 4E 05 F1 | 	add	fp, #60
32e3c     A7 12 02 F6 | 	mov	arg01, fp
32e40     3C 4E 85 F1 | 	sub	fp, #60
32e44     00 14 06 F6 | 	mov	arg02, #0
32e48     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
32e4c     08 4E 05 F1 | 	add	fp, #8
32e50     A7 FA 61 FC | 	wrlong	result1, fp
32e54     00 FA 4D F2 | 	cmps	result1, #0 wz
32e58     08 4E 85 F1 | 	sub	fp, #8
32e5c     08 4E 05 A1 |  if_e	add	fp, #8
32e60     A7 0E 68 AC |  if_e	wrlong	#7, fp
32e64     08 4E 85 A1 |  if_e	sub	fp, #8
32e68     08 4E 05 F1 | 	add	fp, #8
32e6c     A7 FA 01 FB | 	rdlong	result1, fp
32e70     08 4E 85 F1 | 	sub	fp, #8
32e74     04 FA 0D F2 | 	cmp	result1, #4 wz
32e78     08 4E 05 A1 |  if_e	add	fp, #8
32e7c     A7 00 68 AC |  if_e	wrlong	#0, fp
32e80     08 4E 85 A1 |  if_e	sub	fp, #8
32e84                 | LR__5011
32e84                 | LR__5012
32e84                 | LR__5013
32e84     08 4E 05 F1 | 	add	fp, #8
32e88     A7 FA 09 FB | 	rdlong	result1, fp wz
32e8c     08 4E 85 F1 | 	sub	fp, #8
32e90     88 00 90 5D |  if_ne	jmp	#LR__5016
32e94     0C 4E 05 F1 | 	add	fp, #12
32e98     A7 12 02 F6 | 	mov	arg01, fp
32e9c     0C 4E 85 F1 | 	sub	fp, #12
32ea0     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
32ea4     08 4E 05 F1 | 	add	fp, #8
32ea8     A7 FA 61 FC | 	wrlong	result1, fp
32eac     08 4E 85 F1 | 	sub	fp, #8
32eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
32eb4     38 00 90 5D |  if_ne	jmp	#LR__5014
32eb8     6C 4E 05 F1 | 	add	fp, #108
32ebc     A7 FA 09 FB | 	rdlong	result1, fp wz
32ec0     6C 4E 85 F1 | 	sub	fp, #108
32ec4     28 00 90 AD |  if_e	jmp	#LR__5014
32ec8     0C 4E 05 F1 | 	add	fp, #12
32ecc     A7 12 02 F6 | 	mov	arg01, fp
32ed0     60 4E 05 F1 | 	add	fp, #96
32ed4     A7 14 02 FB | 	rdlong	arg02, fp
32ed8     6C 4E 85 F1 | 	sub	fp, #108
32edc     00 16 06 F6 | 	mov	arg03, #0
32ee0     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
32ee4     08 4E 05 F1 | 	add	fp, #8
32ee8     A7 FA 61 FC | 	wrlong	result1, fp
32eec     08 4E 85 F1 | 	sub	fp, #8
32ef0                 | LR__5014
32ef0     08 4E 05 F1 | 	add	fp, #8
32ef4     A7 FA 09 FB | 	rdlong	result1, fp wz
32ef8     08 4E 85 F1 | 	sub	fp, #8
32efc     1C 00 90 5D |  if_ne	jmp	#LR__5015
32f00     70 4E 05 F1 | 	add	fp, #112
32f04     A7 12 02 FB | 	rdlong	arg01, fp
32f08     70 4E 85 F1 | 	sub	fp, #112
32f0c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
32f10     08 4E 05 F1 | 	add	fp, #8
32f14     A7 FA 61 FC | 	wrlong	result1, fp
32f18     08 4E 85 F1 | 	sub	fp, #8
32f1c                 | LR__5015
32f1c                 | LR__5016
32f1c                 | LR__5017
32f1c                 | LR__5018
32f1c                 | ' 			}
32f1c                 | ' 		}
32f1c                 | ' 		;
32f1c                 | ' 	}
32f1c                 | ' 
32f1c                 | ' 	return res ;
32f1c     08 4E 05 F1 | 	add	fp, #8
32f20     A7 FA 01 FB | 	rdlong	result1, fp
32f24     08 4E 85 F1 | 	sub	fp, #8
32f28     A7 F0 03 F6 | 	mov	ptra, fp
32f2c     B2 00 A0 FD | 	call	#popregs_
32f30                 | _fatfs_cc_f_unlink_ret
32f30     2D 00 64 FD | 	ret
32f34                 | 
32f34                 | _fatfs_cc_f_mkdir
32f34     00 4A 05 F6 | 	mov	COUNT_, #0
32f38     A8 00 A0 FD | 	call	#pushregs_
32f3c     5C F0 07 F1 | 	add	ptra, #92
32f40     04 4E 05 F1 | 	add	fp, #4
32f44     A7 12 62 FC | 	wrlong	arg01, fp
32f48     A7 12 02 F6 | 	mov	arg01, fp
32f4c     48 4E 05 F1 | 	add	fp, #72
32f50     A7 14 02 F6 | 	mov	arg02, fp
32f54     4C 4E 85 F1 | 	sub	fp, #76
32f58     02 16 06 F6 | 	mov	arg03, #2
32f5c     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
32f60     08 4E 05 F1 | 	add	fp, #8
32f64     A7 FA 61 FC | 	wrlong	result1, fp
32f68     08 4E 85 F1 | 	sub	fp, #8
32f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
32f70     C4 02 90 5D |  if_ne	jmp	#LR__5025
32f74     4C 4E 05 F1 | 	add	fp, #76
32f78     A7 16 02 FB | 	rdlong	arg03, fp
32f7c     40 4E 85 F1 | 	sub	fp, #64
32f80     A7 16 62 FC | 	wrlong	arg03, fp
32f84     A7 12 02 F6 | 	mov	arg01, fp
32f88     08 4E 85 F1 | 	sub	fp, #8
32f8c     A7 14 02 FB | 	rdlong	arg02, fp
32f90     04 4E 85 F1 | 	sub	fp, #4
32f94     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
32f98     08 4E 05 F1 | 	add	fp, #8
32f9c     A7 FA 61 FC | 	wrlong	result1, fp
32fa0     00 FA 4D F2 | 	cmps	result1, #0 wz
32fa4     08 4E 85 F1 | 	sub	fp, #8
32fa8     08 4E 05 A1 |  if_e	add	fp, #8
32fac     A7 10 68 AC |  if_e	wrlong	#8, fp
32fb0     08 4E 85 A1 |  if_e	sub	fp, #8
32fb4     08 4E 05 F1 | 	add	fp, #8
32fb8     A7 FA 01 FB | 	rdlong	result1, fp
32fbc     08 4E 85 F1 | 	sub	fp, #8
32fc0     04 FA 0D F2 | 	cmp	result1, #4 wz
32fc4     70 02 90 5D |  if_ne	jmp	#LR__5024
32fc8     4C 4E 05 F1 | 	add	fp, #76
32fcc     A7 16 02 FB | 	rdlong	arg03, fp
32fd0     10 4E 85 F1 | 	sub	fp, #16
32fd4     A7 16 62 FC | 	wrlong	arg03, fp
32fd8     A7 12 02 F6 | 	mov	arg01, fp
32fdc     3C 4E 85 F1 | 	sub	fp, #60
32fe0     00 14 06 F6 | 	mov	arg02, #0
32fe4     04 AC BF FD | 	call	#_fatfs_cc_create_chain
32fe8     50 4E 05 F1 | 	add	fp, #80
32fec     A7 FA 61 FC | 	wrlong	result1, fp
32ff0     48 4E 85 F1 | 	sub	fp, #72
32ff4     A7 00 68 FC | 	wrlong	#0, fp
32ff8     48 4E 05 F1 | 	add	fp, #72
32ffc     A7 FA 09 FB | 	rdlong	result1, fp wz
33000     50 4E 85 F1 | 	sub	fp, #80
33004     08 4E 05 A1 |  if_e	add	fp, #8
33008     A7 0E 68 AC |  if_e	wrlong	#7, fp
3300c     08 4E 85 A1 |  if_e	sub	fp, #8
33010     50 4E 05 F1 | 	add	fp, #80
33014     A7 FA 01 FB | 	rdlong	result1, fp
33018     50 4E 85 F1 | 	sub	fp, #80
3301c     01 FA 0D F2 | 	cmp	result1, #1 wz
33020     08 4E 05 A1 |  if_e	add	fp, #8
33024     A7 04 68 AC |  if_e	wrlong	#2, fp
33028     08 4E 85 A1 |  if_e	sub	fp, #8
3302c     50 4E 05 F1 | 	add	fp, #80
33030     A7 16 02 FB | 	rdlong	arg03, fp
33034     50 4E 85 F1 | 	sub	fp, #80
33038     FF FF 7F FF 
3303c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33040     08 4E 05 A1 |  if_e	add	fp, #8
33044     A7 02 68 AC |  if_e	wrlong	#1, fp
33048     08 4E 85 A1 |  if_e	sub	fp, #8
3304c     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
33050     58 4E 05 F1 | 	add	fp, #88
33054     A7 FA 61 FC | 	wrlong	result1, fp
33058     50 4E 85 F1 | 	sub	fp, #80
3305c     A7 FA 09 FB | 	rdlong	result1, fp wz
33060     08 4E 85 F1 | 	sub	fp, #8
33064     1C 01 90 5D |  if_ne	jmp	#LR__5021
33068     4C 4E 05 F1 | 	add	fp, #76
3306c     A7 12 02 FB | 	rdlong	arg01, fp
33070     04 4E 05 F1 | 	add	fp, #4
33074     A7 14 02 FB | 	rdlong	arg02, fp
33078     50 4E 85 F1 | 	sub	fp, #80
3307c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
33080     08 4E 05 F1 | 	add	fp, #8
33084     A7 FA 61 FC | 	wrlong	result1, fp
33088     00 FA 4D F2 | 	cmps	result1, #0 wz
3308c     08 4E 85 F1 | 	sub	fp, #8
33090     F0 00 90 5D |  if_ne	jmp	#LR__5020
33094     4C 4E 05 F1 | 	add	fp, #76
33098     A7 12 02 FB | 	rdlong	arg01, fp
3309c     4C 4E 85 F1 | 	sub	fp, #76
330a0     34 12 06 F1 | 	add	arg01, #52
330a4     20 14 06 F6 | 	mov	arg02, #32
330a8     0B 16 06 F6 | 	mov	arg03, #11
330ac     98 00 A0 FD | 	call	#\builtin_bytefill_
330b0     4C 4E 05 F1 | 	add	fp, #76
330b4     A7 FA 01 FB | 	rdlong	result1, fp
330b8     34 FA 05 F1 | 	add	result1, #52
330bc     FD 5C 48 FC | 	wrbyte	#46, result1
330c0     A7 16 02 FB | 	rdlong	arg03, fp
330c4     3F 16 06 F1 | 	add	arg03, #63
330c8     0B 21 48 FC | 	wrbyte	#16, arg03
330cc     A7 12 02 FB | 	rdlong	arg01, fp
330d0     4A 12 06 F1 | 	add	arg01, #74
330d4     0C 4E 05 F1 | 	add	fp, #12
330d8     A7 14 02 FB | 	rdlong	arg02, fp
330dc     09 15 62 FC | 	wrlong	arg02, arg01
330e0     0C 4E 85 F1 | 	sub	fp, #12
330e4     A7 14 02 FB | 	rdlong	arg02, fp
330e8     0A 13 02 F6 | 	mov	arg01, arg02
330ec     34 14 06 F1 | 	add	arg02, #52
330f0     04 4E 05 F1 | 	add	fp, #4
330f4     A7 16 02 FB | 	rdlong	arg03, fp
330f8     50 4E 85 F1 | 	sub	fp, #80
330fc     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
33100     4C 4E 05 F1 | 	add	fp, #76
33104     A7 14 02 FB | 	rdlong	arg02, fp
33108     0A 13 02 F6 | 	mov	arg01, arg02
3310c     54 12 06 F1 | 	add	arg01, #84
33110     4C 4E 85 F1 | 	sub	fp, #76
33114     34 14 06 F1 | 	add	arg02, #52
33118     20 16 06 F6 | 	mov	arg03, #32
3311c     78 27 BF FD | 	call	#__system____builtin_memmove
33120     4C 4E 05 F1 | 	add	fp, #76
33124     A7 16 02 FB | 	rdlong	arg03, fp
33128     55 16 06 F1 | 	add	arg03, #85
3312c     0B 5D 48 FC | 	wrbyte	#46, arg03
33130     38 4E 85 F1 | 	sub	fp, #56
33134     A7 16 02 FB | 	rdlong	arg03, fp
33138     40 4E 05 F1 | 	add	fp, #64
3313c     A7 16 62 FC | 	wrlong	arg03, fp
33140     08 4E 85 F1 | 	sub	fp, #8
33144     A7 14 02 FB | 	rdlong	arg02, fp
33148     0A 13 02 F6 | 	mov	arg01, arg02
3314c     54 14 06 F1 | 	add	arg02, #84
33150     4C 4E 85 F1 | 	sub	fp, #76
33154     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
33158     4C 4E 05 F1 | 	add	fp, #76
3315c     A7 16 02 FB | 	rdlong	arg03, fp
33160     03 16 06 F1 | 	add	arg03, #3
33164     0B 03 48 FC | 	wrbyte	#1, arg03
33168     40 4E 85 F1 | 	sub	fp, #64
3316c     A7 12 02 F6 | 	mov	arg01, fp
33170     0C 4E 85 F1 | 	sub	fp, #12
33174     44 BA BF FD | 	call	#_fatfs_cc_dir_register
33178     08 4E 05 F1 | 	add	fp, #8
3317c     A7 FA 61 FC | 	wrlong	result1, fp
33180     08 4E 85 F1 | 	sub	fp, #8
33184                 | LR__5020
33184                 | LR__5021
33184     08 4E 05 F1 | 	add	fp, #8
33188     A7 FA 09 FB | 	rdlong	result1, fp wz
3318c     08 4E 85 F1 | 	sub	fp, #8
33190     88 00 90 5D |  if_ne	jmp	#LR__5022
33194     28 4E 05 F1 | 	add	fp, #40
33198     A7 12 02 FB | 	rdlong	arg01, fp
3319c     16 12 06 F1 | 	add	arg01, #22
331a0     30 4E 05 F1 | 	add	fp, #48
331a4     A7 14 02 FB | 	rdlong	arg02, fp
331a8     09 15 62 FC | 	wrlong	arg02, arg01
331ac     0C 4E 85 F1 | 	sub	fp, #12
331b0     A7 12 02 FB | 	rdlong	arg01, fp
331b4     24 4E 85 F1 | 	sub	fp, #36
331b8     A7 14 02 FB | 	rdlong	arg02, fp
331bc     28 4E 05 F1 | 	add	fp, #40
331c0     A7 16 02 FB | 	rdlong	arg03, fp
331c4     50 4E 85 F1 | 	sub	fp, #80
331c8     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
331cc     28 4E 05 F1 | 	add	fp, #40
331d0     A7 FA 01 FB | 	rdlong	result1, fp
331d4     0B FA 05 F1 | 	add	result1, #11
331d8     FD 20 48 FC | 	wrbyte	#16, result1
331dc     24 4E 05 F1 | 	add	fp, #36
331e0     A7 FA 01 FB | 	rdlong	result1, fp
331e4     03 FA 05 F1 | 	add	result1, #3
331e8     FD 02 48 FC | 	wrbyte	#1, result1
331ec     44 4E 85 F1 | 	sub	fp, #68
331f0     A7 FA 09 FB | 	rdlong	result1, fp wz
331f4     08 4E 85 F1 | 	sub	fp, #8
331f8     3C 00 90 5D |  if_ne	jmp	#LR__5023
331fc     4C 4E 05 F1 | 	add	fp, #76
33200     A7 12 02 FB | 	rdlong	arg01, fp
33204     4C 4E 85 F1 | 	sub	fp, #76
33208     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
3320c     08 4E 05 F1 | 	add	fp, #8
33210     A7 FA 61 FC | 	wrlong	result1, fp
33214     08 4E 85 F1 | 	sub	fp, #8
33218     1C 00 90 FD | 	jmp	#LR__5023
3321c                 | LR__5022
3321c     3C 4E 05 F1 | 	add	fp, #60
33220     A7 12 02 F6 | 	mov	arg01, fp
33224     14 4E 05 F1 | 	add	fp, #20
33228     A7 14 02 FB | 	rdlong	arg02, fp
3322c     50 4E 85 F1 | 	sub	fp, #80
33230     00 16 06 F6 | 	mov	arg03, #0
33234     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
33238                 | LR__5023
33238                 | LR__5024
33238                 | LR__5025
33238                 | ' 				remove_chain(&sobj, dcl, 0);
33238                 | ' 			}
33238                 | ' 		}
33238                 | ' 		;
33238                 | ' 	}
33238                 | ' 
33238                 | ' 	return res ;
33238     08 4E 05 F1 | 	add	fp, #8
3323c     A7 FA 01 FB | 	rdlong	result1, fp
33240     08 4E 85 F1 | 	sub	fp, #8
33244     A7 F0 03 F6 | 	mov	ptra, fp
33248     B2 00 A0 FD | 	call	#popregs_
3324c                 | _fatfs_cc_f_mkdir_ret
3324c     2D 00 64 FD | 	ret
33250                 | 
33250                 | _fatfs_cc_f_rename
33250     01 4A 05 F6 | 	mov	COUNT_, #1
33254     A8 00 A0 FD | 	call	#pushregs_
33258     9C F0 07 F1 | 	add	ptra, #156
3325c     04 4E 05 F1 | 	add	fp, #4
33260     A7 12 62 FC | 	wrlong	arg01, fp
33264     04 4E 05 F1 | 	add	fp, #4
33268     A7 14 62 FC | 	wrlong	arg02, fp
3326c     A7 12 02 F6 | 	mov	arg01, fp
33270     08 4E 85 F1 | 	sub	fp, #8
33274     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
33278     04 4E 05 F1 | 	add	fp, #4
3327c     A7 12 02 F6 | 	mov	arg01, fp
33280     6C 4E 05 F1 | 	add	fp, #108
33284     A7 14 02 F6 | 	mov	arg02, fp
33288     70 4E 85 F1 | 	sub	fp, #112
3328c     02 16 06 F6 | 	mov	arg03, #2
33290     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
33294     0C 4E 05 F1 | 	add	fp, #12
33298     A7 FA 61 FC | 	wrlong	result1, fp
3329c     0C 4E 85 F1 | 	sub	fp, #12
332a0     00 FA 0D F2 | 	cmp	result1, #0 wz
332a4     44 03 90 5D |  if_ne	jmp	#LR__5043
332a8     70 4E 05 F1 | 	add	fp, #112
332ac     A7 16 02 FB | 	rdlong	arg03, fp
332b0     60 4E 85 F1 | 	sub	fp, #96
332b4     A7 16 62 FC | 	wrlong	arg03, fp
332b8     A7 12 02 F6 | 	mov	arg01, fp
332bc     0C 4E 85 F1 | 	sub	fp, #12
332c0     A7 14 02 FB | 	rdlong	arg02, fp
332c4     04 4E 85 F1 | 	sub	fp, #4
332c8     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
332cc     0C 4E 05 F1 | 	add	fp, #12
332d0     A7 FA 61 FC | 	wrlong	result1, fp
332d4     00 FA 4D F2 | 	cmps	result1, #0 wz
332d8     0C 4E 85 F1 | 	sub	fp, #12
332dc     1C 00 90 5D |  if_ne	jmp	#LR__5030
332e0     3B 4E 05 F1 | 	add	fp, #59
332e4     A7 FA C1 FA | 	rdbyte	result1, fp
332e8     3B 4E 85 F1 | 	sub	fp, #59
332ec     A0 FA CD F7 | 	test	result1, #160 wz
332f0     0C 4E 05 51 |  if_ne	add	fp, #12
332f4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
332f8     0C 4E 85 51 |  if_ne	sub	fp, #12
332fc                 | LR__5030
332fc     0C 4E 05 F1 | 	add	fp, #12
33300     A7 26 0A FB | 	rdlong	local01, fp wz
33304     0C 4E 85 F1 | 	sub	fp, #12
33308     E0 02 90 5D |  if_ne	jmp	#LR__5042
3330c     74 4E 05 F1 | 	add	fp, #116
33310     A7 12 02 F6 | 	mov	arg01, fp
33314     48 4E 85 F1 | 	sub	fp, #72
33318     A7 14 02 FB | 	rdlong	arg02, fp
3331c     2C 4E 85 F1 | 	sub	fp, #44
33320     20 16 06 F6 | 	mov	arg03, #32
33324     70 25 BF FD | 	call	#__system____builtin_memmove
33328     40 4E 05 F1 | 	add	fp, #64
3332c     A7 12 02 F6 | 	mov	arg01, fp
33330     30 4E 85 F1 | 	sub	fp, #48
33334     A7 14 02 F6 | 	mov	arg02, fp
33338     10 4E 85 F1 | 	sub	fp, #16
3333c     30 16 06 F6 | 	mov	arg03, #48
33340     54 25 BF FD | 	call	#__system____builtin_memmove
33344     40 4E 05 F1 | 	add	fp, #64
33348     A7 12 02 F6 | 	mov	arg01, fp
3334c     38 4E 85 F1 | 	sub	fp, #56
33350     A7 14 02 FB | 	rdlong	arg02, fp
33354     08 4E 85 F1 | 	sub	fp, #8
33358     34 CA BF FD | 	call	#_fatfs_cc_follow_path
3335c     0C 4E 05 F1 | 	add	fp, #12
33360     A7 FA 61 FC | 	wrlong	result1, fp
33364     0C 4E 85 F1 | 	sub	fp, #12
33368     00 FA 0D F2 | 	cmp	result1, #0 wz
3336c     4C 00 90 5D |  if_ne	jmp	#LR__5033
33370     48 4E 05 F1 | 	add	fp, #72
33374     A7 FA 01 FB | 	rdlong	result1, fp
33378     30 4E 85 F1 | 	sub	fp, #48
3337c     A7 16 02 FB | 	rdlong	arg03, fp
33380     18 4E 85 F1 | 	sub	fp, #24
33384     0B FB 09 F2 | 	cmp	result1, arg03 wz
33388     20 00 90 5D |  if_ne	jmp	#LR__5031
3338c     50 4E 05 F1 | 	add	fp, #80
33390     A7 FA 01 FB | 	rdlong	result1, fp
33394     30 4E 85 F1 | 	sub	fp, #48
33398     A7 16 02 FB | 	rdlong	arg03, fp
3339c     20 4E 85 F1 | 	sub	fp, #32
333a0     0B FB 09 F2 | 	cmp	result1, arg03 wz
333a4     04 26 06 A6 |  if_e	mov	local01, #4
333a8     04 00 90 AD |  if_e	jmp	#LR__5032
333ac                 | LR__5031
333ac     08 26 06 F6 | 	mov	local01, #8
333b0                 | LR__5032
333b0     0C 4E 05 F1 | 	add	fp, #12
333b4     A7 26 62 FC | 	wrlong	local01, fp
333b8     0C 4E 85 F1 | 	sub	fp, #12
333bc                 | LR__5033
333bc     0C 4E 05 F1 | 	add	fp, #12
333c0     A7 26 02 FB | 	rdlong	local01, fp
333c4     0C 4E 85 F1 | 	sub	fp, #12
333c8     04 26 0E F2 | 	cmp	local01, #4 wz
333cc     CC 01 90 5D |  if_ne	jmp	#LR__5039
333d0     40 4E 05 F1 | 	add	fp, #64
333d4     A7 12 02 F6 | 	mov	arg01, fp
333d8     40 4E 85 F1 | 	sub	fp, #64
333dc     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
333e0     0C 4E 05 F1 | 	add	fp, #12
333e4     A7 FA 61 FC | 	wrlong	result1, fp
333e8     0C 4E 85 F1 | 	sub	fp, #12
333ec     00 FA 0D F2 | 	cmp	result1, #0 wz
333f0     A8 01 90 5D |  if_ne	jmp	#LR__5038
333f4     5C 4E 05 F1 | 	add	fp, #92
333f8     A7 12 02 FB | 	rdlong	arg01, fp
333fc     38 4E 05 F1 | 	add	fp, #56
33400     A7 12 62 FC | 	wrlong	arg01, fp
33404     0D 12 06 F1 | 	add	arg01, #13
33408     20 4E 85 F1 | 	sub	fp, #32
3340c     A7 14 02 F6 | 	mov	arg02, fp
33410     74 4E 85 F1 | 	sub	fp, #116
33414     0D 14 06 F1 | 	add	arg02, #13
33418     13 16 06 F6 | 	mov	arg03, #19
3341c     78 24 BF FD | 	call	#__system____builtin_memmove
33420     94 4E 05 F1 | 	add	fp, #148
33424     A7 26 02 FB | 	rdlong	local01, fp
33428     15 4E 85 F1 | 	sub	fp, #21
3342c     A7 FA C1 FA | 	rdbyte	result1, fp
33430     0B 26 06 F1 | 	add	local01, #11
33434     13 FB 41 FC | 	wrbyte	result1, local01
33438     15 4E 05 F1 | 	add	fp, #21
3343c     A7 26 02 FB | 	rdlong	local01, fp
33440     94 4E 85 F1 | 	sub	fp, #148
33444     0B 26 06 F1 | 	add	local01, #11
33448     13 27 C2 FA | 	rdbyte	local01, local01
3344c     10 26 CE F7 | 	test	local01, #16 wz
33450     24 00 90 5D |  if_ne	jmp	#LR__5034
33454     94 4E 05 F1 | 	add	fp, #148
33458     A7 FA 01 FB | 	rdlong	result1, fp
3345c     FD 26 02 F6 | 	mov	local01, result1
33460     94 4E 85 F1 | 	sub	fp, #148
33464     0B FA 05 F1 | 	add	result1, #11
33468     FD FA C1 FA | 	rdbyte	result1, result1
3346c     20 FA 45 F5 | 	or	result1, #32
33470     0B 26 06 F1 | 	add	local01, #11
33474     13 FB 41 FC | 	wrbyte	result1, local01
33478                 | LR__5034
33478     70 4E 05 F1 | 	add	fp, #112
3347c     A7 26 02 FB | 	rdlong	local01, fp
33480     03 26 06 F1 | 	add	local01, #3
33484     13 03 48 FC | 	wrbyte	#1, local01
33488     24 4E 05 F1 | 	add	fp, #36
3348c     A7 26 02 FB | 	rdlong	local01, fp
33490     94 4E 85 F1 | 	sub	fp, #148
33494     0B 26 06 F1 | 	add	local01, #11
33498     13 27 C2 FA | 	rdbyte	local01, local01
3349c     10 26 CE F7 | 	test	local01, #16 wz
334a0     F8 00 90 AD |  if_e	jmp	#LR__5037
334a4     18 4E 05 F1 | 	add	fp, #24
334a8     A7 16 02 FB | 	rdlong	arg03, fp
334ac     30 4E 05 F1 | 	add	fp, #48
334b0     A7 26 02 FB | 	rdlong	local01, fp
334b4     48 4E 85 F1 | 	sub	fp, #72
334b8     13 17 0A F2 | 	cmp	arg03, local01 wz
334bc     DC 00 90 AD |  if_e	jmp	#LR__5037
334c0     70 4E 05 F1 | 	add	fp, #112
334c4     A7 12 02 FB | 	rdlong	arg01, fp
334c8     09 27 02 F6 | 	mov	local01, arg01
334cc     24 4E 05 F1 | 	add	fp, #36
334d0     A7 14 02 FB | 	rdlong	arg02, fp
334d4     94 4E 85 F1 | 	sub	fp, #148
334d8     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
334dc     FD 14 02 F6 | 	mov	arg02, result1
334e0     13 13 02 F6 | 	mov	arg01, local01
334e4     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
334e8     98 4E 05 F1 | 	add	fp, #152
334ec     A7 FA 61 FC | 	wrlong	result1, fp
334f0     00 FA 4D F2 | 	cmps	result1, #0 wz
334f4     98 4E 85 F1 | 	sub	fp, #152
334f8     0C 4E 05 A1 |  if_e	add	fp, #12
334fc     A7 04 68 AC |  if_e	wrlong	#2, fp
33500     0C 4E 85 A1 |  if_e	sub	fp, #12
33504     94 00 90 AD |  if_e	jmp	#LR__5036
33508     70 4E 05 F1 | 	add	fp, #112
3350c     A7 12 02 FB | 	rdlong	arg01, fp
33510     28 4E 05 F1 | 	add	fp, #40
33514     A7 14 02 FB | 	rdlong	arg02, fp
33518     98 4E 85 F1 | 	sub	fp, #152
3351c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
33520     0C 4E 05 F1 | 	add	fp, #12
33524     A7 FA 61 FC | 	wrlong	result1, fp
33528     64 4E 05 F1 | 	add	fp, #100
3352c     A7 26 02 FB | 	rdlong	local01, fp
33530     54 26 06 F1 | 	add	local01, #84
33534     24 4E 05 F1 | 	add	fp, #36
33538     A7 26 62 FC | 	wrlong	local01, fp
3353c     88 4E 85 F1 | 	sub	fp, #136
33540     A7 26 0A FB | 	rdlong	local01, fp wz
33544     0C 4E 85 F1 | 	sub	fp, #12
33548     50 00 90 5D |  if_ne	jmp	#LR__5035
3354c     94 4E 05 F1 | 	add	fp, #148
33550     A7 26 02 FB | 	rdlong	local01, fp
33554     94 4E 85 F1 | 	sub	fp, #148
33558     01 26 06 F1 | 	add	local01, #1
3355c     13 27 C2 FA | 	rdbyte	local01, local01
33560     2E 26 0E F2 | 	cmp	local01, #46 wz
33564     34 00 90 5D |  if_ne	jmp	#LR__5035
33568     70 4E 05 F1 | 	add	fp, #112
3356c     A7 12 02 FB | 	rdlong	arg01, fp
33570     24 4E 05 F1 | 	add	fp, #36
33574     A7 14 02 FB | 	rdlong	arg02, fp
33578     4C 4E 85 F1 | 	sub	fp, #76
3357c     A7 16 02 FB | 	rdlong	arg03, fp
33580     48 4E 85 F1 | 	sub	fp, #72
33584     50 AD BF FD | 	call	#_fatfs_cc_st_clust
33588     70 4E 05 F1 | 	add	fp, #112
3358c     A7 26 02 FB | 	rdlong	local01, fp
33590     70 4E 85 F1 | 	sub	fp, #112
33594     03 26 06 F1 | 	add	local01, #3
33598     13 03 48 FC | 	wrbyte	#1, local01
3359c                 | LR__5035
3359c                 | LR__5036
3359c                 | LR__5037
3359c                 | LR__5038
3359c                 | LR__5039
3359c     0C 4E 05 F1 | 	add	fp, #12
335a0     A7 26 0A FB | 	rdlong	local01, fp wz
335a4     0C 4E 85 F1 | 	sub	fp, #12
335a8     40 00 90 5D |  if_ne	jmp	#LR__5041
335ac     10 4E 05 F1 | 	add	fp, #16
335b0     A7 12 02 F6 | 	mov	arg01, fp
335b4     10 4E 85 F1 | 	sub	fp, #16
335b8     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
335bc     0C 4E 05 F1 | 	add	fp, #12
335c0     A7 FA 61 FC | 	wrlong	result1, fp
335c4     0C 4E 85 F1 | 	sub	fp, #12
335c8     00 FA 0D F2 | 	cmp	result1, #0 wz
335cc     1C 00 90 5D |  if_ne	jmp	#LR__5040
335d0     70 4E 05 F1 | 	add	fp, #112
335d4     A7 12 02 FB | 	rdlong	arg01, fp
335d8     70 4E 85 F1 | 	sub	fp, #112
335dc     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
335e0     0C 4E 05 F1 | 	add	fp, #12
335e4     A7 FA 61 FC | 	wrlong	result1, fp
335e8     0C 4E 85 F1 | 	sub	fp, #12
335ec                 | LR__5040
335ec                 | LR__5041
335ec                 | LR__5042
335ec                 | LR__5043
335ec                 | ' 					res = sync_fs(fs);
335ec                 | ' 				}
335ec                 | ' 			}
335ec                 | ' 
335ec                 | ' 		}
335ec                 | ' 		;
335ec                 | ' 	}
335ec                 | ' 
335ec                 | ' 	return res ;
335ec     0C 4E 05 F1 | 	add	fp, #12
335f0     A7 FA 01 FB | 	rdlong	result1, fp
335f4     0C 4E 85 F1 | 	sub	fp, #12
335f8     A7 F0 03 F6 | 	mov	ptra, fp
335fc     B2 00 A0 FD | 	call	#popregs_
33600                 | _fatfs_cc_f_rename_ret
33600     2D 00 64 FD | 	ret
33604                 | 
33604                 | _fatfs_cc_time
33604     00 4A 05 F6 | 	mov	COUNT_, #0
33608     A8 00 A0 FD | 	call	#pushregs_
3360c     14 F0 07 F1 | 	add	ptra, #20
33610     04 4E 05 F1 | 	add	fp, #4
33614     A7 12 62 FC | 	wrlong	arg01, fp
33618     04 4E 05 F1 | 	add	fp, #4
3361c     A7 12 02 F6 | 	mov	arg01, fp
33620     08 4E 85 F1 | 	sub	fp, #8
33624     00 14 06 F6 | 	mov	arg02, #0
33628     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
3362c     08 4E 05 F1 | 	add	fp, #8
33630     A7 FA 01 FB | 	rdlong	result1, fp
33634     08 4E 05 F1 | 	add	fp, #8
33638     A7 FA 61 FC | 	wrlong	result1, fp
3363c     0C 4E 85 F1 | 	sub	fp, #12
33640     A7 FA 09 FB | 	rdlong	result1, fp wz
33644     04 4E 85 F1 | 	sub	fp, #4
33648     18 00 90 AD |  if_e	jmp	#LR__5050
3364c     04 4E 05 F1 | 	add	fp, #4
33650     A7 FA 01 FB | 	rdlong	result1, fp
33654     0C 4E 05 F1 | 	add	fp, #12
33658     A7 14 02 FB | 	rdlong	arg02, fp
3365c     10 4E 85 F1 | 	sub	fp, #16
33660     FD 14 62 FC | 	wrlong	arg02, result1
33664                 | LR__5050
33664                 | '         *tp = now;
33664                 | '     return now;
33664     10 4E 05 F1 | 	add	fp, #16
33668     A7 FA 01 FB | 	rdlong	result1, fp
3366c     10 4E 85 F1 | 	sub	fp, #16
33670     A7 F0 03 F6 | 	mov	ptra, fp
33674     B2 00 A0 FD | 	call	#popregs_
33678                 | _fatfs_cc_time_ret
33678     2D 00 64 FD | 	ret
3367c                 | 
3367c                 | _fatfs_cc_mktime
3367c     06 4A 05 F6 | 	mov	COUNT_, #6
33680     A8 00 A0 FD | 	call	#pushregs_
33684     09 27 02 F6 | 	mov	local01, arg01
33688     14 26 06 F1 | 	add	local01, #20
3368c     13 13 02 FB | 	rdlong	arg01, local01
33690     14 26 86 F1 | 	sub	local01, #20
33694     46 12 56 F2 | 	cmps	arg01, #70 wc
33698                 | '                 return (time_t) -1;
33698     01 FA 65 C6 |  if_b	neg	result1, #1
3369c     7C 01 90 CD |  if_b	jmp	#LR__5064
336a0     03 00 00 FF 
336a4     6C 29 06 F6 | 	mov	local02, ##1900
336a8     14 26 06 F1 | 	add	local01, #20
336ac     13 FB 01 FB | 	rdlong	result1, local01
336b0     FD 28 02 F1 | 	add	local02, result1
336b4     08 26 86 F1 | 	sub	local01, #8
336b8     13 2B 02 FB | 	rdlong	local03, local01
336bc     01 2A 86 F1 | 	sub	local03, #1
336c0     04 26 06 F1 | 	add	local01, #4
336c4     13 13 02 FB | 	rdlong	arg01, local01
336c8     10 26 86 F1 | 	sub	local01, #16
336cc     02 12 66 F0 | 	shl	arg01, #2
336d0     02 00 00 FF 
336d4     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
336d8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
336dc     09 FB 01 FB | 	rdlong	result1, arg01
336e0     FD 2A 02 F1 | 	add	local03, result1
336e4     14 13 02 F6 | 	mov	arg01, local02
336e8     02 00 00 FF 
336ec     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
336f0     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
336f4     00 FA 0D F2 | 	cmp	result1, #0 wz
336f8     1C 00 90 AD |  if_e	jmp	#LR__5060
336fc     00 2C 06 F6 | 	mov	local04, #0
33700     10 26 06 F1 | 	add	local01, #16
33704     13 FB 01 FB | 	rdlong	result1, local01
33708     10 26 86 F1 | 	sub	local01, #16
3370c     02 FA 55 F2 | 	cmps	result1, #2 wc
33710     01 2C 06 36 |  if_ae	mov	local04, #1
33714     04 00 90 FD | 	jmp	#LR__5061
33718                 | LR__5060
33718     00 2C 06 F6 | 	mov	local04, #0
3371c                 | LR__5061
3371c     04 26 06 F1 | 	add	local01, #4
33720     13 FB 01 FB | 	rdlong	result1, local01
33724     04 26 86 F1 | 	sub	local01, #4
33728     13 2F 02 FB | 	rdlong	local05, local01
3372c     08 26 06 F1 | 	add	local01, #8
33730     13 13 02 FB | 	rdlong	arg01, local01
33734     07 00 00 FF 
33738     10 12 06 FD | 	qmul	arg01, ##3600
3373c     16 2B 02 F1 | 	add	local03, local04
33740     FD 2C 02 F6 | 	mov	local04, result1
33744     04 2C 66 F0 | 	shl	local04, #4
33748     FD 2C 82 F1 | 	sub	local04, result1
3374c     02 2C 66 F0 | 	shl	local04, #2
33750     16 2F 02 F1 | 	add	local05, local04
33754     08 26 86 F1 | 	sub	local01, #8
33758     18 2C 62 FD | 	getqx	local04
3375c     A8 00 00 FF 
33760     80 2B 06 FD | 	qmul	local03, ##86400
33764     16 2F 02 F1 | 	add	local05, local04
33768     14 2B 02 F6 | 	mov	local03, local02
3376c     03 00 00 FF 
33770     B2 2B 86 F1 | 	sub	local03, ##1970
33774     18 2C 62 FD | 	getqx	local04
33778     99 F0 00 FF 
3377c     80 2B 06 FD | 	qmul	local03, ##31536000
33780     16 2F 02 F1 | 	add	local05, local04
33784     14 2B 02 F6 | 	mov	local03, local02
33788     03 00 00 FF 
3378c     B1 2B 86 F1 | 	sub	local03, ##1969
33790     15 31 52 F6 | 	abs	local06, local03 wc
33794     02 30 46 F0 | 	shr	local06, #2
33798     18 31 82 F6 | 	negc	local06, local06
3379c     03 00 00 FF 
337a0     D1 29 56 F2 | 	cmps	local02, ##2001 wc
337a4     18 2C 62 FD | 	getqx	local04
337a8     16 2F 02 F1 | 	add	local05, local04
337ac     18 00 90 CD |  if_b	jmp	#LR__5062
337b0     03 00 00 FF 
337b4     D0 29 86 F1 | 	sub	local02, ##2000
337b8     14 2D 52 F6 | 	abs	local04, local02 wc
337bc     64 2C 16 FD | 	qdiv	local04, #100
337c0     18 2C 62 FD | 	getqx	local04
337c4     16 31 A2 F3 | 	sumnc	local06, local04
337c8                 | LR__5062
337c8     A8 00 00 FF 
337cc     80 31 06 FD | 	qmul	local06, ##86400
337d0     18 30 62 FD | 	getqx	local06
337d4     18 2F 02 F1 | 	add	local05, local06
337d8     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
337dc     02 00 00 FF 
337e0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
337e4     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
337e8     18 2F 02 F1 | 	add	local05, local06
337ec     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
337f0     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
337f4     02 00 00 FF 
337f8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
337fc     01 2A 0E F2 | 	cmp	local03, #1 wz
33800     14 00 90 5D |  if_ne	jmp	#LR__5063
33804     13 13 02 F6 | 	mov	arg01, local01
33808     DC 19 B0 FD | 	call	#_fatfs_cc___indst
3380c     00 FA 0D F2 | 	cmp	result1, #0 wz
33810     07 00 00 5F 
33814     10 2E 86 51 |  if_ne	sub	local05, ##3600
33818                 | LR__5063
33818                 | '                 s -=  (3600L) ;
33818                 | ' 
33818                 | '         return s;
33818     17 FB 01 F6 | 	mov	result1, local05
3381c                 | LR__5064
3381c     A7 F0 03 F6 | 	mov	ptra, fp
33820     B2 00 A0 FD | 	call	#popregs_
33824                 | _fatfs_cc_mktime_ret
33824     2D 00 64 FD | 	ret
33828                 | 
33828                 | _fatfs_cc__gmtime_r
33828     03 4A 05 F6 | 	mov	COUNT_, #3
3382c     A8 00 A0 FD | 	call	#pushregs_
33830     09 27 02 FB | 	rdlong	local01, arg01
33834     A8 00 00 FF 
33838     80 27 16 FD | 	qdiv	local01, ##86400
3383c     18 FA 61 FD | 	getqx	result1
33840     04 FA 05 F1 | 	add	result1, #4
33844     07 FA 15 FD | 	qdiv	result1, #7
33848     18 14 06 F1 | 	add	arg02, #24
3384c     D1 7F 27 FF 
33850     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
33854     D1 7F 27 3F 
33858     00 26 86 31 |  if_ae	sub	local01, ##1325376000
3385c     03 00 00 3F 
33860     DC 29 06 36 |  if_ae	mov	local02, ##2012
33864     03 00 00 CF 
33868     B2 29 06 C6 |  if_b	mov	local02, ##1970
3386c                 | ' 	  year = 1970;
3386c                 | ' 	}
3386c                 | ' 
3386c                 | ' 	for(;;) {
3386c     19 FA 61 FD | 	getqy	result1
33870     0A FB 61 FC | 	wrlong	result1, arg02
33874     18 14 86 F1 | 	sub	arg02, #24
33878                 | LR__5070
33878     14 13 02 F6 | 	mov	arg01, local02
3387c     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
33880     00 FA 0D F2 | 	cmp	result1, #0 wz
33884     42 F1 00 5F 
33888     00 2B 06 56 |  if_ne	mov	local03, ##31622400
3388c     99 F0 00 AF 
33890     80 2B 06 A6 |  if_e	mov	local03, ##31536000
33894     15 27 12 F2 | 	cmp	local01, local03 wc
33898                 | ' 	    break;
33898     01 28 06 31 |  if_ae	add	local02, #1
3389c     15 27 82 31 |  if_ae	sub	local01, local03
338a0     D4 FF 9F 3D |  if_ae	jmp	#LR__5070
338a4     A8 00 00 FF 
338a8     80 27 16 FD | 	qdiv	local01, ##86400
338ac     14 2B 02 F6 | 	mov	local03, local02
338b0     03 00 00 FF 
338b4     6C 2B 86 F1 | 	sub	local03, ##1900
338b8     14 14 06 F1 | 	add	arg02, #20
338bc     0A 2B 62 FC | 	wrlong	local03, arg02
338c0     08 14 06 F1 | 	add	arg02, #8
338c4     14 13 02 F6 | 	mov	arg01, local02
338c8     18 28 62 FD | 	getqx	local02
338cc     0A 29 62 FC | 	wrlong	local02, arg02
338d0     1C 14 86 F1 | 	sub	arg02, #28
338d4     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
338d8     00 FA 0D F2 | 	cmp	result1, #0 wz
338dc     1D 2A 06 56 |  if_ne	mov	local03, #29
338e0     1C 2A 06 A6 |  if_e	mov	local03, #28
338e4     02 00 00 FF 
338e8     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
338ec     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
338f0     02 00 00 FF 
338f4     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
338f8                 | ' 
338f8                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
338f8                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
338f8     00 12 06 F6 | 	mov	arg01, #0
338fc     97 2A 48 FB | 	callpa	#(@LR__5072-@LR__5071)>>2,fcache_load_ptr_
33900                 | LR__5071
33900     09 2B 02 F6 | 	mov	local03, arg01
33904     02 2A 66 F0 | 	shl	local03, #2
33908     02 00 00 FF 
3390c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
33910     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
33914     15 2B 02 FB | 	rdlong	local03, local03
33918     15 29 52 F2 | 	cmps	local02, local03 wc
3391c     02 00 00 FF 
33920     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
33924     2C 00 90 CD |  if_b	jmp	#LR__5073
33928     09 2B 02 F6 | 	mov	local03, arg01
3392c     02 2A 66 F0 | 	shl	local03, #2
33930     02 00 00 FF 
33934     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
33938     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
3393c     15 2B 02 FB | 	rdlong	local03, local03
33940     15 29 82 F1 | 	sub	local02, local03
33944     01 12 06 F1 | 	add	arg01, #1
33948     02 00 00 FF 
3394c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
33950     AC FF 9F FD | 	jmp	#LR__5071
33954                 | LR__5072
33954                 | LR__5073
33954     A8 00 00 FF 
33958     80 27 16 FD | 	qdiv	local01, ##86400
3395c     10 14 06 F1 | 	add	arg02, #16
33960     0A 13 62 FC | 	wrlong	arg01, arg02
33964     01 28 06 F1 | 	add	local02, #1
33968     04 14 86 F1 | 	sub	arg02, #4
3396c     0A 29 62 FC | 	wrlong	local02, arg02
33970     19 26 62 FD | 	getqy	local01
33974     07 00 00 FF 
33978     10 26 16 FD | 	qdiv	local01, ##3600
3397c     18 2A 62 FD | 	getqx	local03
33980     07 00 00 FF 
33984     10 26 16 FD | 	qdiv	local01, ##3600
33988     04 14 86 F1 | 	sub	arg02, #4
3398c     0A 2B 62 FC | 	wrlong	local03, arg02
33990     19 26 62 FD | 	getqy	local01
33994     3C 26 16 FD | 	qdiv	local01, #60
33998     18 2A 62 FD | 	getqx	local03
3399c     3C 26 16 FD | 	qdiv	local01, #60
339a0     04 14 86 F1 | 	sub	arg02, #4
339a4     0A 2B 62 FC | 	wrlong	local03, arg02
339a8     04 14 86 F1 | 	sub	arg02, #4
339ac                 | '         stm->tm_isdst = 0;
339ac                 | ' 
339ac                 | ' ;
339ac                 | '         return stm;
339ac     0A FB 01 F6 | 	mov	result1, arg02
339b0     19 2A 62 FD | 	getqy	local03
339b4     0A 2B 62 FC | 	wrlong	local03, arg02
339b8     20 14 06 F1 | 	add	arg02, #32
339bc     0A 01 68 FC | 	wrlong	#0, arg02
339c0     A7 F0 03 F6 | 	mov	ptra, fp
339c4     B2 00 A0 FD | 	call	#popregs_
339c8                 | _fatfs_cc__gmtime_r_ret
339c8     2D 00 64 FD | 	ret
339cc                 | 
339cc                 | _fatfs_cc__tzset
339cc     AA 01 00 FF 
339d0     11 13 06 F6 | 	mov	arg01, ##@LR__5385
339d4     34 00 B0 FD | 	call	#_fatfs_cc_getenv
339d8     FD 12 02 F6 | 	mov	arg01, result1
339dc     02 00 00 FF 
339e0     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
339e4     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
339e8     02 00 00 FF 
339ec     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
339f0     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
339f4     02 00 00 FF 
339f8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
339fc     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
33a00     02 00 00 FF 
33a04     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
33a08                 | _fatfs_cc__tzset_ret
33a08     2D 00 64 FD | 	ret
33a0c                 | 
33a0c                 | _fatfs_cc_getenv
33a0c     06 4A 05 F6 | 	mov	COUNT_, #6
33a10     A8 00 A0 FD | 	call	#pushregs_
33a14     09 27 02 F6 | 	mov	local01, arg01
33a18     09 29 02 F6 | 	mov	local02, arg01
33a1c     97 06 48 FB | 	callpa	#(@LR__5081-@LR__5080)>>2,fcache_load_ptr_
33a20                 | LR__5080
33a20     14 FB C9 FA | 	rdbyte	result1, local02 wz
33a24     01 28 06 51 |  if_ne	add	local02, #1
33a28     F4 FF 9F 5D |  if_ne	jmp	#LR__5080
33a2c                 | LR__5081
33a2c     09 29 82 F1 | 	sub	local02, arg01
33a30     14 FB 01 F6 | 	mov	result1, local02
33a34     02 00 00 FF 
33a38     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
33a3c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
33a40     02 00 00 FF 
33a44     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
33a48                 | '             return 0;
33a48     00 FA 05 A6 |  if_e	mov	result1, #0
33a4c     5C 00 90 AD |  if_e	jmp	#LR__5084
33a50                 | ' 
33a50                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
33a50     02 00 00 FF 
33a54     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
33a58     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
33a5c     02 00 00 FF 
33a60     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
33a64                 | LR__5082
33a64     15 2D 0A FB | 	rdlong	local04, local03 wz
33a68     3C 00 90 AD |  if_e	jmp	#LR__5083
33a6c     16 13 02 F6 | 	mov	arg01, local04
33a70     13 15 02 F6 | 	mov	arg02, local01
33a74     14 17 02 F6 | 	mov	arg03, local02
33a78     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
33a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
33a80     14 2F 02 A6 |  if_e	mov	local05, local02
33a84     16 2F 02 A1 |  if_e	add	local05, local04
33a88     17 31 C2 AA |  if_e	rdbyte	local06, local05
33a8c     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
33a90                 | ' 			return name+len+1;
33a90     14 2D 02 A1 |  if_e	add	local04, local02
33a94     01 2C 06 A1 |  if_e	add	local04, #1
33a98     16 FB 01 A6 |  if_e	mov	result1, local04
33a9c     0C 00 90 AD |  if_e	jmp	#LR__5084
33aa0     04 2A 06 F1 | 	add	local03, #4
33aa4     BC FF 9F FD | 	jmp	#LR__5082
33aa8                 | LR__5083
33aa8                 | ' 	}
33aa8                 | ' 	return 0;
33aa8     00 FA 05 F6 | 	mov	result1, #0
33aac                 | LR__5084
33aac     A7 F0 03 F6 | 	mov	ptra, fp
33ab0     B2 00 A0 FD | 	call	#popregs_
33ab4                 | _fatfs_cc_getenv_ret
33ab4     2D 00 64 FD | 	ret
33ab8                 | 
33ab8                 | _fatfs_cc__get_fattime
33ab8     00 4A 05 F6 | 	mov	COUNT_, #0
33abc     A8 00 A0 FD | 	call	#pushregs_
33ac0     34 F0 07 F1 | 	add	ptra, #52
33ac4     00 12 06 F6 | 	mov	arg01, #0
33ac8     38 FB BF FD | 	call	#_fatfs_cc_time
33acc     04 4E 05 F1 | 	add	fp, #4
33ad0     A7 FA 61 FC | 	wrlong	result1, fp
33ad4     A7 12 02 F6 | 	mov	arg01, fp
33ad8     0C 4E 05 F1 | 	add	fp, #12
33adc     A7 14 02 F6 | 	mov	arg02, fp
33ae0     10 4E 85 F1 | 	sub	fp, #16
33ae4     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
33ae8     24 4E 05 F1 | 	add	fp, #36
33aec     A7 14 02 FB | 	rdlong	arg02, fp
33af0     50 14 86 F1 | 	sub	arg02, #80
33af4     09 14 66 F0 | 	shl	arg02, #9
33af8     04 4E 85 F1 | 	sub	fp, #4
33afc     A7 FA 01 FB | 	rdlong	result1, fp
33b00     01 FA 05 F1 | 	add	result1, #1
33b04     05 FA 65 F0 | 	shl	result1, #5
33b08     FD 14 42 F5 | 	or	arg02, result1
33b0c     04 4E 85 F1 | 	sub	fp, #4
33b10     A7 FA 01 FB | 	rdlong	result1, fp
33b14     FD 14 42 F5 | 	or	arg02, result1
33b18     14 4E 85 F1 | 	sub	fp, #20
33b1c     A7 14 62 FC | 	wrlong	arg02, fp
33b20     10 4E 05 F1 | 	add	fp, #16
33b24     A7 14 02 FB | 	rdlong	arg02, fp
33b28     0B 14 66 F0 | 	shl	arg02, #11
33b2c     04 4E 85 F1 | 	sub	fp, #4
33b30     A7 FA 01 FB | 	rdlong	result1, fp
33b34     05 FA 65 F0 | 	shl	result1, #5
33b38     FD 14 42 F5 | 	or	arg02, result1
33b3c     04 4E 85 F1 | 	sub	fp, #4
33b40     A7 FA 01 FB | 	rdlong	result1, fp
33b44     FD 14 42 F5 | 	or	arg02, result1
33b48     04 4E 85 F1 | 	sub	fp, #4
33b4c     A7 14 62 FC | 	wrlong	arg02, fp
33b50                 | ' 
33b50                 | '     now = time(0);
33b50                 | '     _gmtime_r (&now, &date);
33b50                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
33b50                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
33b50                 | '     return (ffdate << 16) | fftime;
33b50     04 4E 85 F1 | 	sub	fp, #4
33b54     A7 FA 01 FB | 	rdlong	result1, fp
33b58     10 FA 65 F0 | 	shl	result1, #16
33b5c     08 4E 85 F1 | 	sub	fp, #8
33b60     0A FB 41 F5 | 	or	result1, arg02
33b64     A7 F0 03 F6 | 	mov	ptra, fp
33b68     B2 00 A0 FD | 	call	#popregs_
33b6c                 | _fatfs_cc__get_fattime_ret
33b6c     2D 00 64 FD | 	ret
33b70                 | 
33b70                 | _fatfs_cc_unixtime_1025
33b70     00 4A 05 F6 | 	mov	COUNT_, #0
33b74     A8 00 A0 FD | 	call	#pushregs_
33b78     34 F0 07 F1 | 	add	ptra, #52
33b7c     04 4E 05 F1 | 	add	fp, #4
33b80     A7 12 62 FC | 	wrlong	arg01, fp
33b84     04 4E 05 F1 | 	add	fp, #4
33b88     A7 14 62 FC | 	wrlong	arg02, fp
33b8c     04 4E 85 F1 | 	sub	fp, #4
33b90     A7 14 02 FB | 	rdlong	arg02, fp
33b94     09 14 46 F0 | 	shr	arg02, #9
33b98     7F 14 06 F5 | 	and	arg02, #127
33b9c     50 FA 05 F6 | 	mov	result1, #80
33ba0     0A FB 01 F1 | 	add	result1, arg02
33ba4     20 4E 05 F1 | 	add	fp, #32
33ba8     A7 FA 61 FC | 	wrlong	result1, fp
33bac     20 4E 85 F1 | 	sub	fp, #32
33bb0     A7 FA 01 FB | 	rdlong	result1, fp
33bb4     05 FA 45 F0 | 	shr	result1, #5
33bb8     FD FA 41 F8 | 	getnib	result1, result1, #0
33bbc     01 FA 85 F1 | 	sub	result1, #1
33bc0     1C 4E 05 F1 | 	add	fp, #28
33bc4     A7 FA 61 FC | 	wrlong	result1, fp
33bc8     1C 4E 85 F1 | 	sub	fp, #28
33bcc     A7 FA 01 FB | 	rdlong	result1, fp
33bd0     1F FA 05 F5 | 	and	result1, #31
33bd4     18 4E 05 F1 | 	add	fp, #24
33bd8     A7 FA 61 FC | 	wrlong	result1, fp
33bdc     14 4E 85 F1 | 	sub	fp, #20
33be0     A7 FA 01 FB | 	rdlong	result1, fp
33be4     0B FA 45 F0 | 	shr	result1, #11
33be8     1F FA 05 F5 | 	and	result1, #31
33bec     10 4E 05 F1 | 	add	fp, #16
33bf0     A7 FA 61 FC | 	wrlong	result1, fp
33bf4     10 4E 85 F1 | 	sub	fp, #16
33bf8     A7 FA 01 FB | 	rdlong	result1, fp
33bfc     05 FA 45 F0 | 	shr	result1, #5
33c00     3F FA 05 F5 | 	and	result1, #63
33c04     0C 4E 05 F1 | 	add	fp, #12
33c08     A7 FA 61 FC | 	wrlong	result1, fp
33c0c     0C 4E 85 F1 | 	sub	fp, #12
33c10     A7 14 02 FB | 	rdlong	arg02, fp
33c14     1F 14 06 F5 | 	and	arg02, #31
33c18     01 14 66 F0 | 	shl	arg02, #1
33c1c     08 4E 05 F1 | 	add	fp, #8
33c20     A7 14 62 FC | 	wrlong	arg02, fp
33c24     A7 12 02 F6 | 	mov	arg01, fp
33c28     10 4E 85 F1 | 	sub	fp, #16
33c2c     4C FA BF FD | 	call	#_fatfs_cc_mktime
33c30     0C 4E 05 F1 | 	add	fp, #12
33c34     A7 FA 61 FC | 	wrlong	result1, fp
33c38                 | ' 
33c38                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
33c38                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
33c38                 | '     date.tm_mday = (dosdate & 0x1f);
33c38                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
33c38                 | '     date.tm_min = (dostime >> 5) & 0x3f;
33c38                 | '     date.tm_sec = (dostime & 0x1f) << 1;
33c38                 | ' 
33c38                 | '     t = mktime(&date);
33c38                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33c38                 | '     return t;
33c38     0C 4E 85 F1 | 	sub	fp, #12
33c3c     A7 F0 03 F6 | 	mov	ptra, fp
33c40     B2 00 A0 FD | 	call	#popregs_
33c44                 | _fatfs_cc_unixtime_1025_ret
33c44     2D 00 64 FD | 	ret
33c48                 | 
33c48                 | _fatfs_cc__set_dos_error_1027
33c48     09 01 02 F6 | 	mov	_var01, arg01
33c4c                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33c4c                 | '     switch (derr) {
33c4c     14 00 26 F3 | 	fle	_var01, #20
33c50     30 00 62 FD | 	jmprel	_var01
33c54                 | LR__5090
33c54     50 00 90 FD | 	jmp	#LR__5091
33c58     84 00 90 FD | 	jmp	#LR__5105
33c5c     80 00 90 FD | 	jmp	#LR__5106
33c60     7C 00 90 FD | 	jmp	#LR__5107
33c64     48 00 90 FD | 	jmp	#LR__5092
33c68     44 00 90 FD | 	jmp	#LR__5093
33c6c     40 00 90 FD | 	jmp	#LR__5094
33c70     44 00 90 FD | 	jmp	#LR__5095
33c74     48 00 90 FD | 	jmp	#LR__5097
33c78     54 00 90 FD | 	jmp	#LR__5100
33c7c     38 00 90 FD | 	jmp	#LR__5096
33c80     4C 00 90 FD | 	jmp	#LR__5101
33c84     48 00 90 FD | 	jmp	#LR__5102
33c88     44 00 90 FD | 	jmp	#LR__5103
33c8c     50 00 90 FD | 	jmp	#LR__5108
33c90     4C 00 90 FD | 	jmp	#LR__5108
33c94     48 00 90 FD | 	jmp	#LR__5108
33c98     2C 00 90 FD | 	jmp	#LR__5098
33c9c     38 00 90 FD | 	jmp	#LR__5104
33ca0     2C 00 90 FD | 	jmp	#LR__5099
33ca4     38 00 90 FD | 	jmp	#LR__5108
33ca8                 | LR__5091
33ca8     00 02 06 F6 | 	mov	_var02, #0
33cac                 | '         r = 0;
33cac                 | '         break;
33cac     34 00 90 FD | 	jmp	#LR__5109
33cb0                 | LR__5092
33cb0                 | LR__5093
33cb0                 | LR__5094
33cb0     04 02 06 F6 | 	mov	_var02, #4
33cb4                 | '         r =  4 ;
33cb4                 | '         break;
33cb4     2C 00 90 FD | 	jmp	#LR__5109
33cb8                 | LR__5095
33cb8                 | LR__5096
33cb8     06 02 06 F6 | 	mov	_var02, #6
33cbc                 | '         r =  6 ;
33cbc                 | '         break;
33cbc     24 00 90 FD | 	jmp	#LR__5109
33cc0                 | LR__5097
33cc0     09 02 06 F6 | 	mov	_var02, #9
33cc4                 | '         r =  9 ;
33cc4                 | '         break;
33cc4     1C 00 90 FD | 	jmp	#LR__5109
33cc8                 | LR__5098
33cc8     07 02 06 F6 | 	mov	_var02, #7
33ccc                 | '         r =  7 ;
33ccc                 | '         break;
33ccc     14 00 90 FD | 	jmp	#LR__5109
33cd0                 | LR__5099
33cd0                 | LR__5100
33cd0                 | LR__5101
33cd0                 | LR__5102
33cd0                 | LR__5103
33cd0     0A 02 06 F6 | 	mov	_var02, #10
33cd4                 | '         r =  10 ;
33cd4                 | '         break;
33cd4     0C 00 90 FD | 	jmp	#LR__5109
33cd8                 | LR__5104
33cd8     0B 02 06 F6 | 	mov	_var02, #11
33cdc                 | '         r =  11 ;
33cdc                 | '         break;
33cdc     04 00 90 FD | 	jmp	#LR__5109
33ce0                 | LR__5105
33ce0                 | LR__5106
33ce0                 | LR__5107
33ce0                 | LR__5108
33ce0     0C 02 06 F6 | 	mov	_var02, #12
33ce4                 | '         r =  12 ;
33ce4                 | '         break;
33ce4                 | LR__5109
33ce4                 | '     }
33ce4                 | '     return _seterror(r);
33ce4     00 02 4E F2 | 	cmps	_var02, #0 wz
33ce8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
33cec     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
33cf0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
33cf4     01 FA 65 56 |  if_ne	neg	result1, #1
33cf8     00 FA 05 A6 |  if_e	mov	result1, #0
33cfc                 | _fatfs_cc__set_dos_error_1027_ret
33cfc     2D 00 64 FD | 	ret
33d00                 | 
33d00                 | _fatfs_cc_v_creat
33d00     04 4A 05 F6 | 	mov	COUNT_, #4
33d04     A8 00 A0 FD | 	call	#pushregs_
33d08     09 27 02 F6 | 	mov	local01, arg01
33d0c     0A 29 02 F6 | 	mov	local02, arg02
33d10     03 00 00 FF 
33d14     3C 12 06 F6 | 	mov	arg01, ##1596
33d18                 | '     return _gc_alloc(size);
33d18     10 14 06 F6 | 	mov	arg02, #16
33d1c     28 5E BF FD | 	call	#__system___gc_doalloc
33d20     FD 2A 0A F6 | 	mov	local03, result1 wz
33d24                 | '       return _seterror( 7 );
33d24     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33d28     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
33d2c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33d30     01 FA 65 A6 |  if_e	neg	result1, #1
33d34     58 00 90 AD |  if_e	jmp	#LR__5111
33d38     15 13 02 F6 | 	mov	arg01, local03
33d3c     00 14 06 F6 | 	mov	arg02, #0
33d40     03 00 00 FF 
33d44     3C 16 06 F6 | 	mov	arg03, ##1596
33d48     98 00 A0 FD | 	call	#\builtin_bytefill_
33d4c     02 00 00 FF 
33d50     14 2A 06 F1 | 	add	local03, ##1044
33d54     15 13 02 F6 | 	mov	arg01, local03
33d58     02 00 00 FF 
33d5c     14 2A 86 F1 | 	sub	local03, ##1044
33d60     14 15 02 F6 | 	mov	arg02, local02
33d64     07 16 06 F6 | 	mov	arg03, #7
33d68     B4 CC BF FD | 	call	#_fatfs_cc_f_open
33d6c     FD 2C 0A F6 | 	mov	local04, result1 wz
33d70     14 00 90 AD |  if_e	jmp	#LR__5110
33d74     15 13 02 F6 | 	mov	arg01, local03
33d78                 | '     return _gc_free(ptr);
33d78     D8 5E BF FD | 	call	#__system___gc_free
33d7c                 | '     free(f);
33d7c                 | '     return _set_dos_error(r);
33d7c     16 13 02 F6 | 	mov	arg01, local04
33d80     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1027
33d84     08 00 90 FD | 	jmp	#LR__5111
33d88                 | LR__5110
33d88     13 2B 62 FC | 	wrlong	local03, local01
33d8c                 | '   }
33d8c                 | '   fil->vfsdata = f;
33d8c                 | '   return 0;
33d8c     00 FA 05 F6 | 	mov	result1, #0
33d90                 | LR__5111
33d90     A7 F0 03 F6 | 	mov	ptra, fp
33d94     B2 00 A0 FD | 	call	#popregs_
33d98                 | _fatfs_cc_v_creat_ret
33d98     2D 00 64 FD | 	ret
33d9c                 | 
33d9c                 | _fatfs_cc_v_close
33d9c     02 4A 05 F6 | 	mov	COUNT_, #2
33da0     A8 00 A0 FD | 	call	#pushregs_
33da4     09 27 02 FB | 	rdlong	local01, arg01
33da8     02 00 00 FF 
33dac     14 26 06 F1 | 	add	local01, ##1044
33db0     13 13 02 F6 | 	mov	arg01, local01
33db4     02 00 00 FF 
33db8     14 26 86 F1 | 	sub	local01, ##1044
33dbc     DC E3 BF FD | 	call	#_fatfs_cc_f_close
33dc0     FD 28 02 F6 | 	mov	local02, result1
33dc4     13 13 02 F6 | 	mov	arg01, local01
33dc8                 | '     return _gc_free(ptr);
33dc8     88 5E BF FD | 	call	#__system___gc_free
33dcc                 | '     FAT_FIL *f = fil->vfsdata;
33dcc                 | '     r=f_close(&f->fil);
33dcc                 | '     free(f);
33dcc                 | '     return _set_dos_error(r);
33dcc     14 13 02 F6 | 	mov	arg01, local02
33dd0     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1027
33dd4     A7 F0 03 F6 | 	mov	ptra, fp
33dd8     B2 00 A0 FD | 	call	#popregs_
33ddc                 | _fatfs_cc_v_close_ret
33ddc     2D 00 64 FD | 	ret
33de0                 | 
33de0                 | _fatfs_cc_v_opendir
33de0     04 4A 05 F6 | 	mov	COUNT_, #4
33de4     A8 00 A0 FD | 	call	#pushregs_
33de8     09 27 02 F6 | 	mov	local01, arg01
33dec     0A 29 02 F6 | 	mov	local02, arg02
33df0     30 12 06 F6 | 	mov	arg01, #48
33df4                 | '     return _gc_alloc(size);
33df4     10 14 06 F6 | 	mov	arg02, #16
33df8     4C 5D BF FD | 	call	#__system___gc_doalloc
33dfc     FD 2A 0A F6 | 	mov	local03, result1 wz
33e00                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33e00                 | '       return _seterror( 7 );
33e00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33e04     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
33e08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33e0c     01 FA 65 A6 |  if_e	neg	result1, #1
33e10     34 00 90 AD |  if_e	jmp	#LR__5121
33e14     14 15 02 F6 | 	mov	arg02, local02
33e18     15 13 02 F6 | 	mov	arg01, local03
33e1c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
33e20     FD 2C 0A F6 | 	mov	local04, result1 wz
33e24     14 00 90 AD |  if_e	jmp	#LR__5120
33e28     15 13 02 F6 | 	mov	arg01, local03
33e2c                 | '     return _gc_free(ptr);
33e2c     24 5E BF FD | 	call	#__system___gc_free
33e30                 | '         free(f);
33e30                 | '         return _set_dos_error(r);
33e30     16 13 02 F6 | 	mov	arg01, local04
33e34     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1027
33e38     0C 00 90 FD | 	jmp	#LR__5121
33e3c                 | LR__5120
33e3c     04 26 06 F1 | 	add	local01, #4
33e40     13 2B 62 FC | 	wrlong	local03, local01
33e44                 | '     }
33e44                 | '     dir->vfsdata = f;
33e44                 | '     return 0;
33e44     00 FA 05 F6 | 	mov	result1, #0
33e48                 | LR__5121
33e48     A7 F0 03 F6 | 	mov	ptra, fp
33e4c     B2 00 A0 FD | 	call	#popregs_
33e50                 | _fatfs_cc_v_opendir_ret
33e50     2D 00 64 FD | 	ret
33e54                 | 
33e54                 | _fatfs_cc_v_closedir
33e54     02 4A 05 F6 | 	mov	COUNT_, #2
33e58     A8 00 A0 FD | 	call	#pushregs_
33e5c     04 12 06 F1 | 	add	arg01, #4
33e60     09 27 02 FB | 	rdlong	local01, arg01
33e64     13 13 02 F6 | 	mov	arg01, local01
33e68     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
33e6c     FD 28 02 F6 | 	mov	local02, result1
33e70     13 13 02 F6 | 	mov	arg01, local01
33e74                 | '     return _gc_free(ptr);
33e74     DC 5D BF FD | 	call	#__system___gc_free
33e78     00 28 0E F2 | 	cmp	local02, #0 wz
33e7c     14 13 02 56 |  if_ne	mov	arg01, local02
33e80     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1027
33e84                 | '     return r;
33e84     14 FB 01 F6 | 	mov	result1, local02
33e88     A7 F0 03 F6 | 	mov	ptra, fp
33e8c     B2 00 A0 FD | 	call	#popregs_
33e90                 | _fatfs_cc_v_closedir_ret
33e90     2D 00 64 FD | 	ret
33e94                 | 
33e94                 | _fatfs_cc_v_readdir
33e94     01 4A 05 F6 | 	mov	COUNT_, #1
33e98     A8 00 A0 FD | 	call	#pushregs_
33e9c     2C F1 07 F1 | 	add	ptra, #300
33ea0     04 4E 05 F1 | 	add	fp, #4
33ea4     A7 12 62 FC | 	wrlong	arg01, fp
33ea8     04 4E 05 F1 | 	add	fp, #4
33eac     A7 14 62 FC | 	wrlong	arg02, fp
33eb0     04 4E 85 F1 | 	sub	fp, #4
33eb4     A7 16 02 FB | 	rdlong	arg03, fp
33eb8     04 16 06 F1 | 	add	arg03, #4
33ebc     0B 13 02 FB | 	rdlong	arg01, arg03
33ec0     08 4E 05 F1 | 	add	fp, #8
33ec4     A7 14 02 F6 | 	mov	arg02, fp
33ec8     0C 4E 85 F1 | 	sub	fp, #12
33ecc     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
33ed0     28 4F 05 F1 | 	add	fp, #296
33ed4     A7 FA 61 FC | 	wrlong	result1, fp
33ed8     28 4F 85 F1 | 	sub	fp, #296
33edc     00 FA 0D F2 | 	cmp	result1, #0 wz
33ee0     14 00 90 AD |  if_e	jmp	#LR__5130
33ee4                 | '         return _set_dos_error(r);
33ee4     28 4F 05 F1 | 	add	fp, #296
33ee8     A7 12 02 FB | 	rdlong	arg01, fp
33eec     28 4F 85 F1 | 	sub	fp, #296
33ef0     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1027
33ef4     C4 00 90 FD | 	jmp	#LR__5133
33ef8                 | LR__5130
33ef8     28 4E 05 F1 | 	add	fp, #40
33efc     A7 16 CA FA | 	rdbyte	arg03, fp wz
33f00     28 4E 85 F1 | 	sub	fp, #40
33f04                 | '         return -1;
33f04     01 FA 65 A6 |  if_e	neg	result1, #1
33f08     B0 00 90 AD |  if_e	jmp	#LR__5133
33f0c     08 4E 05 F1 | 	add	fp, #8
33f10     A7 12 02 FB | 	rdlong	arg01, fp
33f14     20 4E 05 F1 | 	add	fp, #32
33f18     A7 14 02 F6 | 	mov	arg02, fp
33f1c     28 4E 85 F1 | 	sub	fp, #40
33f20     3F 16 06 F6 | 	mov	arg03, #63
33f24     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
33f28     08 4E 05 F1 | 	add	fp, #8
33f2c     A7 16 02 FB | 	rdlong	arg03, fp
33f30     3F 16 06 F1 | 	add	arg03, #63
33f34     0B 01 48 FC | 	wrbyte	#0, arg03
33f38     0C 4E 05 F1 | 	add	fp, #12
33f3c     A7 16 C2 FA | 	rdbyte	arg03, fp
33f40     14 4E 85 F1 | 	sub	fp, #20
33f44     10 16 CE F7 | 	test	arg03, #16 wz
33f48     18 00 90 AD |  if_e	jmp	#LR__5131
33f4c     08 4E 05 F1 | 	add	fp, #8
33f50     A7 16 02 FB | 	rdlong	arg03, fp
33f54     08 4E 85 F1 | 	sub	fp, #8
33f58     50 16 06 F1 | 	add	arg03, #80
33f5c     0B 03 48 FC | 	wrbyte	#1, arg03
33f60     14 00 90 FD | 	jmp	#LR__5132
33f64                 | LR__5131
33f64     08 4E 05 F1 | 	add	fp, #8
33f68     A7 16 02 FB | 	rdlong	arg03, fp
33f6c     08 4E 85 F1 | 	sub	fp, #8
33f70     50 16 06 F1 | 	add	arg03, #80
33f74     0B 01 48 FC | 	wrbyte	#0, arg03
33f78                 | LR__5132
33f78     08 4E 05 F1 | 	add	fp, #8
33f7c     A7 16 02 FB | 	rdlong	arg03, fp
33f80     04 4E 05 F1 | 	add	fp, #4
33f84     A7 14 02 FB | 	rdlong	arg02, fp
33f88     48 16 06 F1 | 	add	arg03, #72
33f8c     0B 15 62 FC | 	wrlong	arg02, arg03
33f90     04 4E 85 F1 | 	sub	fp, #4
33f94     A7 26 02 FB | 	rdlong	local01, fp
33f98     08 4E 05 F1 | 	add	fp, #8
33f9c     A7 12 E2 FA | 	rdword	arg01, fp
33fa0     02 4E 05 F1 | 	add	fp, #2
33fa4     A7 14 E2 FA | 	rdword	arg02, fp
33fa8     12 4E 85 F1 | 	sub	fp, #18
33fac     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1025
33fb0     4C 26 06 F1 | 	add	local01, #76
33fb4     13 FB 61 FC | 	wrlong	result1, local01
33fb8                 | '         ent->d_type =  (0) ;
33fb8                 | '     }
33fb8                 | '     ent->d_size = finfo.fsize;
33fb8                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
33fb8                 | '     return 0;
33fb8     00 FA 05 F6 | 	mov	result1, #0
33fbc                 | LR__5133
33fbc     A7 F0 03 F6 | 	mov	ptra, fp
33fc0     B2 00 A0 FD | 	call	#popregs_
33fc4                 | _fatfs_cc_v_readdir_ret
33fc4     2D 00 64 FD | 	ret
33fc8                 | 
33fc8                 | _fatfs_cc_v_stat
33fc8     03 4A 05 F6 | 	mov	COUNT_, #3
33fcc     A8 00 A0 FD | 	call	#pushregs_
33fd0     30 F1 07 F1 | 	add	ptra, #304
33fd4     04 4E 05 F1 | 	add	fp, #4
33fd8     A7 12 62 FC | 	wrlong	arg01, fp
33fdc     04 4E 05 F1 | 	add	fp, #4
33fe0     A7 14 62 FC | 	wrlong	arg02, fp
33fe4     08 4E 85 F1 | 	sub	fp, #8
33fe8     0A 13 02 F6 | 	mov	arg01, arg02
33fec     00 14 06 F6 | 	mov	arg02, #0
33ff0     30 16 06 F6 | 	mov	arg03, #48
33ff4     98 00 A0 FD | 	call	#\builtin_bytefill_
33ff8     04 4E 05 F1 | 	add	fp, #4
33ffc     A7 FA 01 FB | 	rdlong	result1, fp
34000     04 4E 85 F1 | 	sub	fp, #4
34004     FD FA C9 FA | 	rdbyte	result1, result1 wz
34008     2C 00 90 AD |  if_e	jmp	#LR__5140
3400c     04 4E 05 F1 | 	add	fp, #4
34010     A7 FA 01 FB | 	rdlong	result1, fp
34014     04 4E 85 F1 | 	sub	fp, #4
34018     FD FA C1 FA | 	rdbyte	result1, result1
3401c     2E FA 0D F2 | 	cmp	result1, #46 wz
34020     04 4E 05 A1 |  if_e	add	fp, #4
34024     A7 26 02 AB |  if_e	rdlong	local01, fp
34028     04 4E 85 A1 |  if_e	sub	fp, #4
3402c     01 26 06 A1 |  if_e	add	local01, #1
34030     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
34034     18 00 90 5D |  if_ne	jmp	#LR__5141
34038                 | LR__5140
34038     18 4E 05 F1 | 	add	fp, #24
3403c     A7 20 48 FC | 	wrbyte	#16, fp
34040     0C 4E 85 F1 | 	sub	fp, #12
34044     A7 00 68 FC | 	wrlong	#0, fp
34048     0C 4E 85 F1 | 	sub	fp, #12
3404c     24 00 90 FD | 	jmp	#LR__5142
34050                 | LR__5141
34050     04 4E 05 F1 | 	add	fp, #4
34054     A7 12 02 FB | 	rdlong	arg01, fp
34058     0C 4E 05 F1 | 	add	fp, #12
3405c     A7 14 02 F6 | 	mov	arg02, fp
34060     10 4E 85 F1 | 	sub	fp, #16
34064     AC EB BF FD | 	call	#_fatfs_cc_f_stat
34068     0C 4E 05 F1 | 	add	fp, #12
3406c     A7 FA 61 FC | 	wrlong	result1, fp
34070     0C 4E 85 F1 | 	sub	fp, #12
34074                 | LR__5142
34074     0C 4E 05 F1 | 	add	fp, #12
34078     A7 28 0A FB | 	rdlong	local02, fp wz
3407c     0C 4E 85 F1 | 	sub	fp, #12
34080     14 00 90 AD |  if_e	jmp	#LR__5143
34084                 | '         return _set_dos_error(r);
34084     0C 4E 05 F1 | 	add	fp, #12
34088     A7 12 02 FB | 	rdlong	arg01, fp
3408c     0C 4E 85 F1 | 	sub	fp, #12
34090     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34094     14 01 90 FD | 	jmp	#LR__5144
34098                 | LR__5143
34098     2C 4F 05 F1 | 	add	fp, #300
3409c     A7 48 6A FC | 	wrlong	#292, fp
340a0     14 4F 85 F1 | 	sub	fp, #276
340a4     A7 2A C2 FA | 	rdbyte	local03, fp
340a8     18 4E 85 F1 | 	sub	fp, #24
340ac     01 2A CE F7 | 	test	local03, #1 wz
340b0     2C 4F 05 A1 |  if_e	add	fp, #300
340b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
340b8     92 2A 46 A5 |  if_e	or	local03, #146
340bc     A7 2A 62 AC |  if_e	wrlong	local03, fp
340c0     2C 4F 85 A1 |  if_e	sub	fp, #300
340c4     18 4E 05 F1 | 	add	fp, #24
340c8     A7 2A C2 FA | 	rdbyte	local03, fp
340cc     18 4E 85 F1 | 	sub	fp, #24
340d0     10 2A CE F7 | 	test	local03, #16 wz
340d4     2C 4F 05 51 |  if_ne	add	fp, #300
340d8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
340dc     08 00 00 5F 
340e0     49 2A 46 55 |  if_ne	or	local03, ##4169
340e4     A7 2A 62 5C |  if_ne	wrlong	local03, fp
340e8     2C 4F 85 51 |  if_ne	sub	fp, #300
340ec     08 4E 05 F1 | 	add	fp, #8
340f0     A7 2A 02 FB | 	rdlong	local03, fp
340f4     24 4F 05 F1 | 	add	fp, #292
340f8     A7 28 02 FB | 	rdlong	local02, fp
340fc     08 2A 06 F1 | 	add	local03, #8
34100     15 29 62 FC | 	wrlong	local02, local03
34104     24 4F 85 F1 | 	sub	fp, #292
34108     A7 2A 02 FB | 	rdlong	local03, fp
3410c     0C 2A 06 F1 | 	add	local03, #12
34110     15 03 68 FC | 	wrlong	#1, local03
34114     A7 2A 02 FB | 	rdlong	local03, fp
34118     08 4E 05 F1 | 	add	fp, #8
3411c     A7 28 02 FB | 	rdlong	local02, fp
34120     18 2A 06 F1 | 	add	local03, #24
34124     15 29 62 FC | 	wrlong	local02, local03
34128     08 4E 85 F1 | 	sub	fp, #8
3412c     A7 2A 02 FB | 	rdlong	local03, fp
34130     1C 2A 06 F1 | 	add	local03, #28
34134     01 00 80 FF 
34138     15 01 68 FC | 	wrlong	##512, local03
3413c     A7 28 02 FB | 	rdlong	local02, fp
34140     14 2B 02 F6 | 	mov	local03, local02
34144     18 28 06 F1 | 	add	local02, #24
34148     14 29 02 FB | 	rdlong	local02, local02
3414c     FF 29 06 F1 | 	add	local02, #511
34150     14 29 52 F6 | 	abs	local02, local02 wc
34154     09 28 46 F0 | 	shr	local02, #9
34158     14 29 82 F6 | 	negc	local02, local02
3415c     20 2A 06 F1 | 	add	local03, #32
34160     15 29 62 FC | 	wrlong	local02, local03
34164     A7 28 02 FB | 	rdlong	local02, fp
34168     14 2B 02 F6 | 	mov	local03, local02
3416c     14 27 02 F6 | 	mov	local01, local02
34170     0C 4E 05 F1 | 	add	fp, #12
34174     A7 12 E2 FA | 	rdword	arg01, fp
34178     02 4E 05 F1 | 	add	fp, #2
3417c     A7 14 E2 FA | 	rdword	arg02, fp
34180     16 4E 85 F1 | 	sub	fp, #22
34184     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1025
34188     2C 26 06 F1 | 	add	local01, #44
3418c     13 FB 61 FC | 	wrlong	result1, local01
34190     28 28 06 F1 | 	add	local02, #40
34194     14 FB 61 FC | 	wrlong	result1, local02
34198     24 2A 06 F1 | 	add	local03, #36
3419c     15 FB 61 FC | 	wrlong	result1, local03
341a0                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
341a0                 | '     }
341a0                 | '     buf->st_mode = mode;
341a0                 | '     buf->st_nlink = 1;
341a0                 | '     buf->st_size = finfo.fsize;
341a0                 | '     buf->st_blksize = 512;
341a0                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
341a0                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
341a0                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
341a0                 | '     return r;
341a0     0C 4E 05 F1 | 	add	fp, #12
341a4     A7 FA 01 FB | 	rdlong	result1, fp
341a8     0C 4E 85 F1 | 	sub	fp, #12
341ac                 | LR__5144
341ac     A7 F0 03 F6 | 	mov	ptra, fp
341b0     B2 00 A0 FD | 	call	#popregs_
341b4                 | _fatfs_cc_v_stat_ret
341b4     2D 00 64 FD | 	ret
341b8                 | 
341b8                 | _fatfs_cc_v_read
341b8     00 4A 05 F6 | 	mov	COUNT_, #0
341bc     A8 00 A0 FD | 	call	#pushregs_
341c0     1C F0 07 F1 | 	add	ptra, #28
341c4     04 4E 05 F1 | 	add	fp, #4
341c8     A7 12 62 FC | 	wrlong	arg01, fp
341cc     04 4E 05 F1 | 	add	fp, #4
341d0     A7 14 62 FC | 	wrlong	arg02, fp
341d4     04 4E 05 F1 | 	add	fp, #4
341d8     A7 16 62 FC | 	wrlong	arg03, fp
341dc     08 4E 85 F1 | 	sub	fp, #8
341e0     A7 12 02 FB | 	rdlong	arg01, fp
341e4     09 13 0A FB | 	rdlong	arg01, arg01 wz
341e8     0C 4E 05 F1 | 	add	fp, #12
341ec     A7 12 62 FC | 	wrlong	arg01, fp
341f0     10 4E 85 F1 | 	sub	fp, #16
341f4                 | '         return _seterror( 5 );
341f4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
341f8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
341fc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34200     01 FA 65 A6 |  if_e	neg	result1, #1
34204     B8 00 90 AD |  if_e	jmp	#LR__5152
34208     10 4E 05 F1 | 	add	fp, #16
3420c     A7 12 02 FB | 	rdlong	arg01, fp
34210     02 00 00 FF 
34214     14 12 06 F1 | 	add	arg01, ##1044
34218     08 4E 85 F1 | 	sub	fp, #8
3421c     A7 14 02 FB | 	rdlong	arg02, fp
34220     04 4E 05 F1 | 	add	fp, #4
34224     A7 16 02 FB | 	rdlong	arg03, fp
34228     0C 4E 05 F1 | 	add	fp, #12
3422c     A7 18 02 F6 | 	mov	arg04, fp
34230     18 4E 85 F1 | 	sub	fp, #24
34234     C4 CE BF FD | 	call	#_fatfs_cc_f_read
34238     14 4E 05 F1 | 	add	fp, #20
3423c     A7 FA 61 FC | 	wrlong	result1, fp
34240     14 4E 85 F1 | 	sub	fp, #20
34244     00 FA 0D F2 | 	cmp	result1, #0 wz
34248     34 00 90 AD |  if_e	jmp	#LR__5150
3424c     04 4E 05 F1 | 	add	fp, #4
34250     A7 18 02 FB | 	rdlong	arg04, fp
34254     0C 17 02 F6 | 	mov	arg03, arg04
34258     08 18 06 F1 | 	add	arg04, #8
3425c     0C 19 02 FB | 	rdlong	arg04, arg04
34260     20 18 46 F5 | 	or	arg04, #32
34264     08 16 06 F1 | 	add	arg03, #8
34268     0B 19 62 FC | 	wrlong	arg04, arg03
3426c                 | '         fil->state |=  (0x20) ;
3426c                 | '         return _set_dos_error(r);
3426c     10 4E 05 F1 | 	add	fp, #16
34270     A7 12 02 FB | 	rdlong	arg01, fp
34274     14 4E 85 F1 | 	sub	fp, #20
34278     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
3427c     40 00 90 FD | 	jmp	#LR__5152
34280                 | LR__5150
34280     18 4E 05 F1 | 	add	fp, #24
34284     A7 FA 09 FB | 	rdlong	result1, fp wz
34288     18 4E 85 F1 | 	sub	fp, #24
3428c     24 00 90 5D |  if_ne	jmp	#LR__5151
34290     04 4E 05 F1 | 	add	fp, #4
34294     A7 FA 01 FB | 	rdlong	result1, fp
34298     FD 18 02 F6 | 	mov	arg04, result1
3429c     04 4E 85 F1 | 	sub	fp, #4
342a0     08 FA 05 F1 | 	add	result1, #8
342a4     FD FA 01 FB | 	rdlong	result1, result1
342a8     10 FA 45 F5 | 	or	result1, #16
342ac     08 18 06 F1 | 	add	arg04, #8
342b0     0C FB 61 FC | 	wrlong	result1, arg04
342b4                 | LR__5151
342b4                 | '         fil->state |=  (0x10) ;
342b4                 | '     }
342b4                 | '     return x;
342b4     18 4E 05 F1 | 	add	fp, #24
342b8     A7 FA 01 FB | 	rdlong	result1, fp
342bc     18 4E 85 F1 | 	sub	fp, #24
342c0                 | LR__5152
342c0     A7 F0 03 F6 | 	mov	ptra, fp
342c4     B2 00 A0 FD | 	call	#popregs_
342c8                 | _fatfs_cc_v_read_ret
342c8     2D 00 64 FD | 	ret
342cc                 | 
342cc                 | _fatfs_cc_v_write
342cc     00 4A 05 F6 | 	mov	COUNT_, #0
342d0     A8 00 A0 FD | 	call	#pushregs_
342d4     1C F0 07 F1 | 	add	ptra, #28
342d8     04 4E 05 F1 | 	add	fp, #4
342dc     A7 12 62 FC | 	wrlong	arg01, fp
342e0     04 4E 05 F1 | 	add	fp, #4
342e4     A7 14 62 FC | 	wrlong	arg02, fp
342e8     04 4E 05 F1 | 	add	fp, #4
342ec     A7 16 62 FC | 	wrlong	arg03, fp
342f0     08 4E 85 F1 | 	sub	fp, #8
342f4     A7 12 02 FB | 	rdlong	arg01, fp
342f8     09 13 0A FB | 	rdlong	arg01, arg01 wz
342fc     0C 4E 05 F1 | 	add	fp, #12
34300     A7 12 62 FC | 	wrlong	arg01, fp
34304     10 4E 85 F1 | 	sub	fp, #16
34308                 | '         return _seterror( 5 );
34308     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3430c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
34310     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34314     01 FA 65 A6 |  if_e	neg	result1, #1
34318     84 00 90 AD |  if_e	jmp	#LR__5161
3431c     10 4E 05 F1 | 	add	fp, #16
34320     A7 12 02 FB | 	rdlong	arg01, fp
34324     02 00 00 FF 
34328     14 12 06 F1 | 	add	arg01, ##1044
3432c     08 4E 85 F1 | 	sub	fp, #8
34330     A7 14 02 FB | 	rdlong	arg02, fp
34334     04 4E 05 F1 | 	add	fp, #4
34338     A7 16 02 FB | 	rdlong	arg03, fp
3433c     0C 4E 05 F1 | 	add	fp, #12
34340     A7 18 02 F6 | 	mov	arg04, fp
34344     18 4E 85 F1 | 	sub	fp, #24
34348     4C D4 BF FD | 	call	#_fatfs_cc_f_write
3434c     14 4E 05 F1 | 	add	fp, #20
34350     A7 FA 61 FC | 	wrlong	result1, fp
34354     14 4E 85 F1 | 	sub	fp, #20
34358     00 FA 0D F2 | 	cmp	result1, #0 wz
3435c     34 00 90 AD |  if_e	jmp	#LR__5160
34360     04 4E 05 F1 | 	add	fp, #4
34364     A7 18 02 FB | 	rdlong	arg04, fp
34368     0C 17 02 F6 | 	mov	arg03, arg04
3436c     08 18 06 F1 | 	add	arg04, #8
34370     0C 19 02 FB | 	rdlong	arg04, arg04
34374     20 18 46 F5 | 	or	arg04, #32
34378     08 16 06 F1 | 	add	arg03, #8
3437c     0B 19 62 FC | 	wrlong	arg04, arg03
34380                 | '         fil->state |=  (0x20) ;
34380                 | '         return _set_dos_error(r);
34380     10 4E 05 F1 | 	add	fp, #16
34384     A7 12 02 FB | 	rdlong	arg01, fp
34388     14 4E 85 F1 | 	sub	fp, #20
3438c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34390     0C 00 90 FD | 	jmp	#LR__5161
34394                 | LR__5160
34394                 | '     }
34394                 | '     return x;
34394     18 4E 05 F1 | 	add	fp, #24
34398     A7 FA 01 FB | 	rdlong	result1, fp
3439c     18 4E 85 F1 | 	sub	fp, #24
343a0                 | LR__5161
343a0     A7 F0 03 F6 | 	mov	ptra, fp
343a4     B2 00 A0 FD | 	call	#popregs_
343a8                 | _fatfs_cc_v_write_ret
343a8     2D 00 64 FD | 	ret
343ac                 | 
343ac                 | _fatfs_cc_v_lseek
343ac     04 4A 05 F6 | 	mov	COUNT_, #4
343b0     A8 00 A0 FD | 	call	#pushregs_
343b4     0A 27 02 F6 | 	mov	local01, arg02
343b8     0B 29 02 F6 | 	mov	local02, arg03
343bc     09 2B 02 FB | 	rdlong	local03, arg01
343c0     02 00 00 FF 
343c4     14 2A 0E F1 | 	add	local03, ##1044 wz
343c8                 | '         return _seterror( 5 );
343c8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
343cc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
343d0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
343d4     01 FA 65 A6 |  if_e	neg	result1, #1
343d8     4C 00 90 AD |  if_e	jmp	#LR__5172
343dc     00 28 0E F2 | 	cmp	local02, #0 wz
343e0     24 00 90 AD |  if_e	jmp	#LR__5170
343e4     01 28 0E F2 | 	cmp	local02, #1 wz
343e8     14 2A 06 A1 |  if_e	add	local03, #20
343ec     15 2D 02 AB |  if_e	rdlong	local04, local03
343f0     14 2A 86 A1 |  if_e	sub	local03, #20
343f4     16 27 02 A1 |  if_e	add	local01, local04
343f8     0C 2A 06 51 |  if_ne	add	local03, #12
343fc     15 2D 02 5B |  if_ne	rdlong	local04, local03
34400     0C 2A 86 51 |  if_ne	sub	local03, #12
34404     16 27 02 51 |  if_ne	add	local01, local04
34408                 | LR__5170
34408     13 15 02 F6 | 	mov	arg02, local01
3440c     15 13 02 F6 | 	mov	arg01, local03
34410     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
34414     FD 12 0A F6 | 	mov	arg01, result1 wz
34418     08 00 90 AD |  if_e	jmp	#LR__5171
3441c                 | '         return _set_dos_error(result);
3441c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34420     04 00 90 FD | 	jmp	#LR__5172
34424                 | LR__5171
34424                 | '     }
34424                 | '     return offset;
34424     13 FB 01 F6 | 	mov	result1, local01
34428                 | LR__5172
34428     A7 F0 03 F6 | 	mov	ptra, fp
3442c     B2 00 A0 FD | 	call	#popregs_
34430                 | _fatfs_cc_v_lseek_ret
34430     2D 00 64 FD | 	ret
34434                 | 
34434                 | _fatfs_cc_v_ioctl
34434                 | ' {
34434                 | '     return _seterror( 10 );
34434     20 E6 05 F1 | 	add	ptr___system__dat__, #32
34438     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
3443c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
34440     01 FA 65 F6 | 	neg	result1, #1
34444                 | _fatfs_cc_v_ioctl_ret
34444     2D 00 64 FD | 	ret
34448                 | 
34448                 | _fatfs_cc_v_mkdir
34448     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
3444c     FD 12 02 F6 | 	mov	arg01, result1
34450                 | ' 
34450                 | '     r = f_mkdir(name);
34450                 | '     return _set_dos_error(r);
34450     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34454                 | _fatfs_cc_v_mkdir_ret
34454     2D 00 64 FD | 	ret
34458                 | 
34458                 | _fatfs_cc_v_remove
34458     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
3445c     FD 12 02 F6 | 	mov	arg01, result1
34460                 | ' 
34460                 | '     r = f_unlink(name);
34460                 | '     return _set_dos_error(r);
34460     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34464                 | _fatfs_cc_v_remove_ret
34464     2D 00 64 FD | 	ret
34468                 | 
34468                 | _fatfs_cc_v_rmdir
34468     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
3446c     FD 12 02 F6 | 	mov	arg01, result1
34470                 | ' 
34470                 | '     r = f_unlink(name);
34470                 | '     return _set_dos_error(r);
34470     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34474                 | _fatfs_cc_v_rmdir_ret
34474     2D 00 64 FD | 	ret
34478                 | 
34478                 | _fatfs_cc_v_rename
34478     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
3447c     FD 12 02 F6 | 	mov	arg01, result1
34480                 | '     return _set_dos_error(r);
34480     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34484                 | _fatfs_cc_v_rename_ret
34484     2D 00 64 FD | 	ret
34488                 | 
34488                 | _fatfs_cc_v_open
34488     07 4A 05 F6 | 	mov	COUNT_, #7
3448c     A8 00 A0 FD | 	call	#pushregs_
34490     09 27 02 F6 | 	mov	local01, arg01
34494     0A 29 02 F6 | 	mov	local02, arg02
34498     0B 2B 02 F6 | 	mov	local03, arg03
3449c     03 00 00 FF 
344a0     3C 12 06 F6 | 	mov	arg01, ##1596
344a4                 | '     return _gc_alloc(size);
344a4     10 14 06 F6 | 	mov	arg02, #16
344a8     9C 56 BF FD | 	call	#__system___gc_doalloc
344ac     FD 2C 0A F6 | 	mov	local04, result1 wz
344b0                 | '       return _seterror( 7 );
344b0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
344b4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
344b8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
344bc     01 FA 65 A6 |  if_e	neg	result1, #1
344c0     98 00 90 AD |  if_e	jmp	#LR__5186
344c4     16 13 02 F6 | 	mov	arg01, local04
344c8     00 14 06 F6 | 	mov	arg02, #0
344cc     03 00 00 FF 
344d0     3C 16 06 F6 | 	mov	arg03, ##1596
344d4     98 00 A0 FD | 	call	#\builtin_bytefill_
344d8                 | '   switch (flags & 3) {
344d8     15 2F 02 F6 | 	mov	local05, local03
344dc     03 2E 0E F5 | 	and	local05, #3 wz
344e0     0C 00 90 AD |  if_e	jmp	#LR__5180
344e4     01 2E 0E F2 | 	cmp	local05, #1 wz
344e8     0C 00 90 AD |  if_e	jmp	#LR__5181
344ec     10 00 90 FD | 	jmp	#LR__5182
344f0                 | LR__5180
344f0     01 30 06 F6 | 	mov	local06, #1
344f4                 | '       fs_flags =  0x01 ;
344f4                 | '       break;
344f4     0C 00 90 FD | 	jmp	#LR__5183
344f8                 | LR__5181
344f8     02 30 06 F6 | 	mov	local06, #2
344fc                 | '       fs_flags =  0x02 ;
344fc                 | '       break;
344fc     04 00 90 FD | 	jmp	#LR__5183
34500                 | LR__5182
34500     03 30 06 F6 | 	mov	local06, #3
34504                 | '       fs_flags =  0x01  |  0x02 ;
34504                 | '       break;
34504                 | LR__5183
34504     08 2A CE F7 | 	test	local03, #8 wz
34508     18 30 46 55 |  if_ne	or	local06, #24
3450c     08 00 90 5D |  if_ne	jmp	#LR__5184
34510     20 2A CE F7 | 	test	local03, #32 wz
34514     30 30 46 55 |  if_ne	or	local06, #48
34518                 | LR__5184
34518     02 00 00 FF 
3451c     14 2C 06 F1 | 	add	local04, ##1044
34520     16 13 02 F6 | 	mov	arg01, local04
34524     02 00 00 FF 
34528     14 2C 86 F1 | 	sub	local04, ##1044
3452c     14 15 02 F6 | 	mov	arg02, local02
34530     18 17 02 F6 | 	mov	arg03, local06
34534     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
34538     FD 32 0A F6 | 	mov	local07, result1 wz
3453c     14 00 90 AD |  if_e	jmp	#LR__5185
34540     16 13 02 F6 | 	mov	arg01, local04
34544                 | '     return _gc_free(ptr);
34544     0C 57 BF FD | 	call	#__system___gc_free
34548                 | '     free(f);
34548                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34548                 | '     return _set_dos_error(r);
34548     19 13 02 F6 | 	mov	arg01, local07
3454c     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34550     08 00 90 FD | 	jmp	#LR__5186
34554                 | LR__5185
34554     13 2D 62 FC | 	wrlong	local04, local01
34558                 | '   }
34558                 | '   fil->vfsdata = f;
34558                 | '   return 0;
34558     00 FA 05 F6 | 	mov	result1, #0
3455c                 | LR__5186
3455c     A7 F0 03 F6 | 	mov	ptra, fp
34560     B2 00 A0 FD | 	call	#popregs_
34564                 | _fatfs_cc_v_open_ret
34564     2D 00 64 FD | 	ret
34568                 | 
34568                 | _fatfs_cc_v_flush
34568     09 13 02 FB | 	rdlong	arg01, arg01
3456c     02 00 00 FF 
34570     14 12 0E F1 | 	add	arg01, ##1044 wz
34574                 | '         return _seterror( 5 );
34574     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34578     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3457c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34580     01 FA 65 A6 |  if_e	neg	result1, #1
34584     0C 00 90 AD |  if_e	jmp	#LR__5190
34588     00 DA BF FD | 	call	#_fatfs_cc_f_sync
3458c     FD 12 02 F6 | 	mov	arg01, result1
34590                 | '     }
34590                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34590                 | '     result = f_sync(f);
34590                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34590                 | '     return _set_dos_error(result);
34590     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1027
34594                 | LR__5190
34594                 | _fatfs_cc_v_flush_ret
34594     2D 00 64 FD | 	ret
34598                 | 
34598                 | _fatfs_cc_v_init
34598                 | ' {
34598                 | '     return 0;
34598     00 FA 05 F6 | 	mov	result1, #0
3459c                 | _fatfs_cc_v_init_ret
3459c     2D 00 64 FD | 	ret
345a0                 | 
345a0                 | _fatfs_cc_v_deinit
345a0     AA 01 00 FF 
345a4     14 15 06 F6 | 	mov	arg02, ##@LR__5386
345a8     00 12 06 F6 | 	mov	arg01, #0
345ac     00 16 06 F6 | 	mov	arg03, #0
345b0     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
345b4     01 00 00 FF 
345b8     08 E4 05 F1 | 	add	objptr, ##520
345bc     F2 12 02 FB | 	rdlong	arg01, objptr
345c0     04 E4 05 F1 | 	add	objptr, #4
345c4     F2 14 02 FB | 	rdlong	arg02, objptr
345c8     01 00 00 FF 
345cc     0C E4 85 F1 | 	sub	objptr, ##524
345d0     F0 3D BF FD | 	call	#__system___freepins
345d4                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
345d4                 | '     _freepins(f_pinmask);
345d4                 | '     return 0;
345d4     00 FA 05 F6 | 	mov	result1, #0
345d8                 | _fatfs_cc_v_deinit_ret
345d8     2D 00 64 FD | 	ret
345dc                 | 
345dc                 | _fatfs_cc_get_vfs
345dc     01 4A 05 F6 | 	mov	COUNT_, #1
345e0     A8 00 A0 FD | 	call	#pushregs_
345e4     09 27 02 F6 | 	mov	local01, arg01
345e8     50 12 06 F6 | 	mov	arg01, #80
345ec     28 55 BF FD | 	call	#__system___gc_alloc_managed
345f0     FD 12 02 F6 | 	mov	arg01, result1
345f4     F2 FA 01 F6 | 	mov	result1, objptr
345f8     00 50 05 FF 
345fc     00 FA 45 F5 | 	or	result1, ##178257920
34600     09 FB 61 FC | 	wrlong	result1, arg01
34604     F2 FA 01 F6 | 	mov	result1, objptr
34608     00 58 05 FF 
3460c     00 FA 45 F5 | 	or	result1, ##179306496
34610     04 12 06 F1 | 	add	arg01, #4
34614     09 FB 61 FC | 	wrlong	result1, arg01
34618     F2 FA 01 F6 | 	mov	result1, objptr
3461c     00 60 05 FF 
34620     00 FA 45 F5 | 	or	result1, ##180355072
34624     04 12 06 F1 | 	add	arg01, #4
34628     09 FB 61 FC | 	wrlong	result1, arg01
3462c     F2 FA 01 F6 | 	mov	result1, objptr
34630     00 68 05 FF 
34634     00 FA 45 F5 | 	or	result1, ##181403648
34638     04 12 06 F1 | 	add	arg01, #4
3463c     09 FB 61 FC | 	wrlong	result1, arg01
34640     F2 FA 01 F6 | 	mov	result1, objptr
34644     00 70 05 FF 
34648     00 FA 45 F5 | 	or	result1, ##182452224
3464c     04 12 06 F1 | 	add	arg01, #4
34650     09 FB 61 FC | 	wrlong	result1, arg01
34654     04 12 06 F1 | 	add	arg01, #4
34658     09 01 68 FC | 	wrlong	#0, arg01
3465c     04 12 06 F1 | 	add	arg01, #4
34660     09 27 62 FC | 	wrlong	local01, arg01
34664     04 12 06 F1 | 	add	arg01, #4
34668     09 01 68 FC | 	wrlong	#0, arg01
3466c     F2 FA 01 F6 | 	mov	result1, objptr
34670     00 78 05 FF 
34674     00 FA 45 F5 | 	or	result1, ##183500800
34678     04 12 06 F1 | 	add	arg01, #4
3467c     09 FB 61 FC | 	wrlong	result1, arg01
34680     F2 FA 01 F6 | 	mov	result1, objptr
34684     00 80 05 FF 
34688     00 FA 45 F5 | 	or	result1, ##184549376
3468c     04 12 06 F1 | 	add	arg01, #4
34690     09 FB 61 FC | 	wrlong	result1, arg01
34694     F2 FA 01 F6 | 	mov	result1, objptr
34698     00 88 05 FF 
3469c     00 FA 45 F5 | 	or	result1, ##185597952
346a0     04 12 06 F1 | 	add	arg01, #4
346a4     09 FB 61 FC | 	wrlong	result1, arg01
346a8     F2 FA 01 F6 | 	mov	result1, objptr
346ac     00 90 05 FF 
346b0     00 FA 45 F5 | 	or	result1, ##186646528
346b4     04 12 06 F1 | 	add	arg01, #4
346b8     09 FB 61 FC | 	wrlong	result1, arg01
346bc     F2 FA 01 F6 | 	mov	result1, objptr
346c0     00 98 05 FF 
346c4     00 FA 45 F5 | 	or	result1, ##187695104
346c8     04 12 06 F1 | 	add	arg01, #4
346cc     09 FB 61 FC | 	wrlong	result1, arg01
346d0     F2 FA 01 F6 | 	mov	result1, objptr
346d4     00 A0 05 FF 
346d8     00 FA 45 F5 | 	or	result1, ##188743680
346dc     04 12 06 F1 | 	add	arg01, #4
346e0     09 FB 61 FC | 	wrlong	result1, arg01
346e4     F2 FA 01 F6 | 	mov	result1, objptr
346e8     00 A8 05 FF 
346ec     00 FA 45 F5 | 	or	result1, ##189792256
346f0     04 12 06 F1 | 	add	arg01, #4
346f4     09 FB 61 FC | 	wrlong	result1, arg01
346f8     F2 FA 01 F6 | 	mov	result1, objptr
346fc     00 B0 05 FF 
34700     00 FA 45 F5 | 	or	result1, ##190840832
34704     04 12 06 F1 | 	add	arg01, #4
34708     09 FB 61 FC | 	wrlong	result1, arg01
3470c     F2 FA 01 F6 | 	mov	result1, objptr
34710     00 B8 05 FF 
34714     00 FA 45 F5 | 	or	result1, ##191889408
34718     04 12 06 F1 | 	add	arg01, #4
3471c     09 FB 61 FC | 	wrlong	result1, arg01
34720     F2 FA 01 F6 | 	mov	result1, objptr
34724     00 C0 05 FF 
34728     00 FA 45 F5 | 	or	result1, ##192937984
3472c     04 12 06 F1 | 	add	arg01, #4
34730     09 FB 61 FC | 	wrlong	result1, arg01
34734     F2 FA 01 F6 | 	mov	result1, objptr
34738     00 C8 05 FF 
3473c     00 FA 45 F5 | 	or	result1, ##193986560
34740     04 12 06 F1 | 	add	arg01, #4
34744     09 FB 61 FC | 	wrlong	result1, arg01
34748     F2 FA 01 F6 | 	mov	result1, objptr
3474c     00 D0 05 FF 
34750     00 FA 45 F5 | 	or	result1, ##195035136
34754     04 12 06 F1 | 	add	arg01, #4
34758     09 FB 61 FC | 	wrlong	result1, arg01
3475c     4C 12 86 F1 | 	sub	arg01, #76
34760                 | ' 
34760                 | '     v->close = &v_close;
34760                 | '     v->read = &v_read;
34760                 | '     v->write = &v_write;
34760                 | '     v->lseek = &v_lseek;
34760                 | '     v->ioctl = &v_ioctl;
34760                 | '     v->flush = 0;
34760                 | '     v->vfs_data = ptr;
34760                 | '     v->reserved = 0;
34760                 | ' 
34760                 | '     v->open = &v_open;
34760                 | '     v->creat = &v_creat;
34760                 | '     v->opendir = &v_opendir;
34760                 | '     v->closedir = &v_closedir;
34760                 | '     v->readdir = &v_readdir;
34760                 | '     v->stat = &v_stat;
34760                 | ' 
34760                 | '     v->mkdir = &v_mkdir;
34760                 | '     v->rmdir = &v_rmdir;
34760                 | ' 
34760                 | '     v->remove = &v_remove;
34760                 | '     v->rename = &v_rename;
34760                 | ' 
34760                 | '     v->init = &v_init;
34760                 | '     v->deinit = &v_deinit;
34760                 | ' 
34760                 | '     return v;
34760     09 FB 01 F6 | 	mov	result1, arg01
34764     A7 F0 03 F6 | 	mov	ptra, fp
34768     B2 00 A0 FD | 	call	#popregs_
3476c                 | _fatfs_cc_get_vfs_ret
3476c     2D 00 64 FD | 	ret
34770                 | 
34770                 | _fatfs_cc_xmit_mmc_1178
34770     01 00 00 FF 
34774     10 E4 05 F1 | 	add	objptr, ##528
34778     F2 00 02 FB | 	rdlong	_var01, objptr
3477c     08 E4 05 F1 | 	add	objptr, #8
34780     F2 02 02 FB | 	rdlong	_var02, objptr
34784     01 00 00 FF 
34788     18 E4 85 F1 | 	sub	objptr, ##536
3478c     40 02 62 FD | 	dirl	_var02
34790     28 02 64 FD | 	setq	#1
34794     09 05 02 FB | 	rdlong	_var03, arg01
34798     69 04 62 FD | 	rev	_var03
3479c     1B 04 FE F9 | 	movbyts	_var03, #27
347a0     01 05 22 FC | 	wypin	_var03, _var02
347a4     0A 05 02 F6 | 	mov	_var03, arg02
347a8     02 14 4E F0 | 	shr	arg02, #2 wz
347ac     03 04 66 F0 | 	shl	_var03, #3
347b0     00 05 22 FC | 	wypin	_var03, _var01
347b4     41 02 62 FD | 	dirh	_var02
347b8     08 12 06 F1 | 	add	arg01, #8
347bc     69 06 62 FD | 	rev	_var04
347c0     1B 06 FE F9 | 	movbyts	_var04, #27
347c4                 | LR__5200
347c4     01 07 22 5C |  if_ne	wypin	_var04, _var02
347c8     09 07 02 5B |  if_ne	rdlong	_var04, arg01
347cc     04 12 06 51 |  if_ne	add	arg01, #4
347d0     69 06 62 5D |  if_ne	rev	_var04
347d4     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
347d8                 | LR__5201
347d8     40 02 72 5D |  if_ne	testp	_var02 wc
347dc     F8 FF 9F 1D |  if_a	jmp	#LR__5201
347e0     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5200
347e4                 | LR__5202
347e4     40 00 72 FD | 	testp	_var01 wc
347e8     F8 FF 9F 3D |  if_ae	jmp	#LR__5202
347ec     40 02 62 FD | 	dirl	_var02
347f0     FF FF FF FF 
347f4     01 FF 2B FC | 	wypin	##-1, _var02
347f8     41 02 62 FD | 	dirh	_var02
347fc                 | _fatfs_cc_xmit_mmc_1178_ret
347fc     2D 00 64 FD | 	ret
34800                 | 
34800                 | _fatfs_cc_rcvr_mmc_1185
34800     01 00 00 FF 
34804     10 E4 05 F1 | 	add	objptr, ##528
34808     F2 00 02 FB | 	rdlong	_var01, objptr
3480c     0C E4 05 F1 | 	add	objptr, #12
34810     F2 02 02 FB | 	rdlong	_var02, objptr
34814     01 00 00 FF 
34818     1C E4 85 F1 | 	sub	objptr, ##540
3481c     01 03 08 FC | 	akpin	_var02
34820     0A 05 0A F6 | 	mov	_var03, arg02 wz
34824     02 04 4E F0 | 	shr	_var03, #2 wz
34828     30 00 90 AD |  if_e	jmp	#LR__5212
3482c     02 07 02 F6 | 	mov	_var04, _var03
34830     05 06 66 F0 | 	shl	_var04, #5
34834     00 07 22 FC | 	wypin	_var04, _var01
34838     01 7F 18 FC | 	wxpin	#63, _var02
3483c                 | LR__5210
3483c                 | LR__5211
3483c     40 02 72 FD | 	testp	_var02 wc
34840     F8 FF 9F 3D |  if_ae	jmp	#LR__5211
34844     01 07 8A FA | 	rdpin	_var04, _var02
34848     69 06 62 FD | 	rev	_var04
3484c     1B 06 FE F9 | 	movbyts	_var04, #27
34850     09 07 62 FC | 	wrlong	_var04, arg01
34854     04 12 06 F1 | 	add	arg01, #4
34858     F8 05 6E FB | 	djnz	_var03, #LR__5210
3485c                 | LR__5212
3485c     03 14 0E F5 | 	and	arg02, #3 wz
34860     24 00 90 AD |  if_e	jmp	#LR__5215
34864     01 4F 18 FC | 	wxpin	#39, _var02
34868                 | LR__5213
34868     00 11 28 FC | 	wypin	#8, _var01
3486c                 | LR__5214
3486c     40 02 72 FD | 	testp	_var02 wc
34870     F8 FF 9F 3D |  if_ae	jmp	#LR__5214
34874     01 07 8A FA | 	rdpin	_var04, _var02
34878     69 06 62 FD | 	rev	_var04
3487c     09 07 42 FC | 	wrbyte	_var04, arg01
34880     01 12 06 F1 | 	add	arg01, #1
34884     F8 15 6E FB | 	djnz	arg02, #LR__5213
34888                 | LR__5215
34888                 | _fatfs_cc_rcvr_mmc_1185_ret
34888     2D 00 64 FD | 	ret
3488c                 | 
3488c                 | _fatfs_cc_wait_ready_1189
3488c     01 4A 05 F6 | 	mov	COUNT_, #1
34890     A8 00 A0 FD | 	call	#pushregs_
34894     10 F0 07 F1 | 	add	ptra, #16
34898     1A FA 61 FD | 	getct	result1
3489c     08 4E 05 F1 | 	add	fp, #8
348a0     A7 FA 61 FC | 	wrlong	result1, fp
348a4     14 26 06 FB | 	rdlong	local01, #20
348a8     01 26 46 F0 | 	shr	local01, #1
348ac     04 4E 05 F1 | 	add	fp, #4
348b0     A7 26 62 FC | 	wrlong	local01, fp
348b4     0C 4E 85 F1 | 	sub	fp, #12
348b8                 | ' {
348b8                 | ' 	BYTE d;
348b8                 | ' 	UINT tmr, tmout;
348b8                 | ' 
348b8                 | ' 	tmr = _cnt();
348b8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
348b8                 | ' 	for(;;) {
348b8                 | LR__5220
348b8     04 4E 05 F1 | 	add	fp, #4
348bc     A7 12 02 F6 | 	mov	arg01, fp
348c0     04 4E 85 F1 | 	sub	fp, #4
348c4     01 14 06 F6 | 	mov	arg02, #1
348c8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
348cc     04 4E 05 F1 | 	add	fp, #4
348d0     A7 26 C2 FA | 	rdbyte	local01, fp
348d4     04 4E 85 F1 | 	sub	fp, #4
348d8     FF 26 0E F2 | 	cmp	local01, #255 wz
348dc     01 FA 05 A6 |  if_e	mov	result1, #1
348e0     28 00 90 AD |  if_e	jmp	#LR__5221
348e4     1A FA 61 FD | 	getct	result1
348e8     08 4E 05 F1 | 	add	fp, #8
348ec     A7 26 02 FB | 	rdlong	local01, fp
348f0     13 FB 81 F1 | 	sub	result1, local01
348f4     04 4E 05 F1 | 	add	fp, #4
348f8     A7 26 02 FB | 	rdlong	local01, fp
348fc     0C 4E 85 F1 | 	sub	fp, #12
34900     13 FB 11 F2 | 	cmp	result1, local01 wc
34904     00 FA 05 36 |  if_ae	mov	result1, #0
34908     AC FF 9F CD |  if_b	jmp	#LR__5220
3490c                 | LR__5221
3490c     A7 F0 03 F6 | 	mov	ptra, fp
34910     B2 00 A0 FD | 	call	#popregs_
34914                 | _fatfs_cc_wait_ready_1189_ret
34914     2D 00 64 FD | 	ret
34918                 | 
34918                 | _fatfs_cc_deselect_1195
34918     00 4A 05 F6 | 	mov	COUNT_, #0
3491c     A8 00 A0 FD | 	call	#pushregs_
34920     14 F0 07 F1 | 	add	ptra, #20
34924     01 00 00 FF 
34928     14 E4 05 F1 | 	add	objptr, ##532
3492c     F2 14 02 FB | 	rdlong	arg02, objptr
34930     04 4E 05 F1 | 	add	fp, #4
34934     A7 14 62 FC | 	wrlong	arg02, fp
34938     04 E4 85 F1 | 	sub	objptr, #4
3493c     F2 14 02 FB | 	rdlong	arg02, objptr
34940     04 4E 05 F1 | 	add	fp, #4
34944     A7 14 62 FC | 	wrlong	arg02, fp
34948     08 E4 05 F1 | 	add	objptr, #8
3494c     F2 14 02 FB | 	rdlong	arg02, objptr
34950     04 4E 05 F1 | 	add	fp, #4
34954     A7 14 62 FC | 	wrlong	arg02, fp
34958     04 E4 05 F1 | 	add	objptr, #4
3495c     F2 14 02 FB | 	rdlong	arg02, objptr
34960     01 00 00 FF 
34964     1C E4 85 F1 | 	sub	objptr, ##540
34968     04 4E 05 F1 | 	add	fp, #4
3496c     A7 14 62 FC | 	wrlong	arg02, fp
34970     0C 4E 85 F1 | 	sub	fp, #12
34974     A7 12 02 FB | 	rdlong	arg01, fp
34978     04 4E 85 F1 | 	sub	fp, #4
3497c     59 12 62 FD | 	drvh	arg01
34980     1F 20 64 FD | 	waitx	#16
34984     A7 12 02 F6 | 	mov	arg01, fp
34988     01 14 06 F6 | 	mov	arg02, #1
3498c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34990     A7 F0 03 F6 | 	mov	ptra, fp
34994     B2 00 A0 FD | 	call	#popregs_
34998                 | _fatfs_cc_deselect_1195_ret
34998     2D 00 64 FD | 	ret
3499c                 | 
3499c                 | _fatfs_cc_select_1199
3499c     00 4A 05 F6 | 	mov	COUNT_, #0
349a0     A8 00 A0 FD | 	call	#pushregs_
349a4     10 F0 07 F1 | 	add	ptra, #16
349a8     01 00 00 FF 
349ac     14 E4 05 F1 | 	add	objptr, ##532
349b0     F2 14 02 FB | 	rdlong	arg02, objptr
349b4     08 4E 05 F1 | 	add	fp, #8
349b8     A7 14 62 FC | 	wrlong	arg02, fp
349bc     08 E4 05 F1 | 	add	objptr, #8
349c0     F2 12 02 FB | 	rdlong	arg01, objptr
349c4     01 00 00 FF 
349c8     1C E4 85 F1 | 	sub	objptr, ##540
349cc     04 4E 05 F1 | 	add	fp, #4
349d0     A7 12 62 FC | 	wrlong	arg01, fp
349d4     50 12 62 FD | 	fltl	arg01
349d8     04 4E 85 F1 | 	sub	fp, #4
349dc     A7 12 02 FB | 	rdlong	arg01, fp
349e0     58 12 62 FD | 	drvl	arg01
349e4     1F 20 64 FD | 	waitx	#16
349e8     04 4E 05 F1 | 	add	fp, #4
349ec     A7 12 02 FB | 	rdlong	arg01, fp
349f0     41 12 62 FD | 	dirh	arg01
349f4     08 4E 85 F1 | 	sub	fp, #8
349f8     A7 12 02 F6 | 	mov	arg01, fp
349fc     04 4E 85 F1 | 	sub	fp, #4
34a00     01 14 06 F6 | 	mov	arg02, #1
34a04     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34a08     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1189
34a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
34a10     01 FA 05 56 |  if_ne	mov	result1, #1
34a14     08 00 90 5D |  if_ne	jmp	#LR__5230
34a18     FC FE BF FD | 	call	#_fatfs_cc_deselect_1195
34a1c                 | ' 
34a1c                 | ' 	deselect();
34a1c                 | ' 	return 0;
34a1c     00 FA 05 F6 | 	mov	result1, #0
34a20                 | LR__5230
34a20     A7 F0 03 F6 | 	mov	ptra, fp
34a24     B2 00 A0 FD | 	call	#popregs_
34a28                 | _fatfs_cc_select_1199_ret
34a28     2D 00 64 FD | 	ret
34a2c                 | 
34a2c                 | _fatfs_cc_rcvr_datablock_1203
34a2c     01 4A 05 F6 | 	mov	COUNT_, #1
34a30     A8 00 A0 FD | 	call	#pushregs_
34a34     18 F0 07 F1 | 	add	ptra, #24
34a38     04 4E 05 F1 | 	add	fp, #4
34a3c     A7 12 62 FC | 	wrlong	arg01, fp
34a40     04 4E 05 F1 | 	add	fp, #4
34a44     A7 14 62 FC | 	wrlong	arg02, fp
34a48     1A FA 61 FD | 	getct	result1
34a4c     08 4E 05 F1 | 	add	fp, #8
34a50     A7 FA 61 FC | 	wrlong	result1, fp
34a54     14 26 06 FB | 	rdlong	local01, #20
34a58     03 26 46 F0 | 	shr	local01, #3
34a5c     04 4E 05 F1 | 	add	fp, #4
34a60     A7 26 62 FC | 	wrlong	local01, fp
34a64     14 4E 85 F1 | 	sub	fp, #20
34a68                 | ' 	BYTE *buff,
34a68                 | ' 	UINT btr
34a68                 | ' )
34a68                 | ' {
34a68                 | ' 	BYTE d[2];
34a68                 | ' 	UINT tmr, tmout;
34a68                 | ' 
34a68                 | ' 	tmr = _cnt();
34a68                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
34a68                 | ' 	for(;;) {
34a68                 | LR__5240
34a68     0C 4E 05 F1 | 	add	fp, #12
34a6c     A7 12 02 F6 | 	mov	arg01, fp
34a70     0C 4E 85 F1 | 	sub	fp, #12
34a74     01 14 06 F6 | 	mov	arg02, #1
34a78     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34a7c     0C 4E 05 F1 | 	add	fp, #12
34a80     A7 26 C2 FA | 	rdbyte	local01, fp
34a84     0C 4E 85 F1 | 	sub	fp, #12
34a88     FF 26 0E F2 | 	cmp	local01, #255 wz
34a8c     28 00 90 5D |  if_ne	jmp	#LR__5241
34a90     1A FA 61 FD | 	getct	result1
34a94     FD 26 02 F6 | 	mov	local01, result1
34a98     10 4E 05 F1 | 	add	fp, #16
34a9c     A7 14 02 FB | 	rdlong	arg02, fp
34aa0     0A 27 82 F1 | 	sub	local01, arg02
34aa4     04 4E 05 F1 | 	add	fp, #4
34aa8     A7 14 02 FB | 	rdlong	arg02, fp
34aac     14 4E 85 F1 | 	sub	fp, #20
34ab0     0A 27 12 F2 | 	cmp	local01, arg02 wc
34ab4     B0 FF 9F CD |  if_b	jmp	#LR__5240
34ab8                 | LR__5241
34ab8     0C 4E 05 F1 | 	add	fp, #12
34abc     A7 26 C2 FA | 	rdbyte	local01, fp
34ac0     0C 4E 85 F1 | 	sub	fp, #12
34ac4     FE 26 0E F2 | 	cmp	local01, #254 wz
34ac8     00 FA 05 56 |  if_ne	mov	result1, #0
34acc     30 00 90 5D |  if_ne	jmp	#LR__5242
34ad0     04 4E 05 F1 | 	add	fp, #4
34ad4     A7 12 02 FB | 	rdlong	arg01, fp
34ad8     04 4E 05 F1 | 	add	fp, #4
34adc     A7 14 02 FB | 	rdlong	arg02, fp
34ae0     08 4E 85 F1 | 	sub	fp, #8
34ae4     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34ae8     0C 4E 05 F1 | 	add	fp, #12
34aec     A7 12 02 F6 | 	mov	arg01, fp
34af0     0C 4E 85 F1 | 	sub	fp, #12
34af4     02 14 06 F6 | 	mov	arg02, #2
34af8     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34afc                 | ' 
34afc                 | ' 	rcvr_mmc(buff, btr);
34afc                 | ' 	rcvr_mmc(d, 2);
34afc                 | ' 
34afc                 | ' 	return 1;
34afc     01 FA 05 F6 | 	mov	result1, #1
34b00                 | LR__5242
34b00     A7 F0 03 F6 | 	mov	ptra, fp
34b04     B2 00 A0 FD | 	call	#popregs_
34b08                 | _fatfs_cc_rcvr_datablock_1203_ret
34b08     2D 00 64 FD | 	ret
34b0c                 | 
34b0c                 | _fatfs_cc_xmit_datablock_1205
34b0c     00 4A 05 F6 | 	mov	COUNT_, #0
34b10     A8 00 A0 FD | 	call	#pushregs_
34b14     10 F0 07 F1 | 	add	ptra, #16
34b18     04 4E 05 F1 | 	add	fp, #4
34b1c     A7 12 62 FC | 	wrlong	arg01, fp
34b20     04 4E 05 F1 | 	add	fp, #4
34b24     A7 14 42 FC | 	wrbyte	arg02, fp
34b28     08 4E 85 F1 | 	sub	fp, #8
34b2c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1189
34b30     00 FA 0D F2 | 	cmp	result1, #0 wz
34b34     00 FA 05 A6 |  if_e	mov	result1, #0
34b38     90 00 90 AD |  if_e	jmp	#LR__5251
34b3c     08 4E 05 F1 | 	add	fp, #8
34b40     A7 14 C2 FA | 	rdbyte	arg02, fp
34b44     04 4E 05 F1 | 	add	fp, #4
34b48     A7 14 42 FC | 	wrbyte	arg02, fp
34b4c     A7 12 02 F6 | 	mov	arg01, fp
34b50     0C 4E 85 F1 | 	sub	fp, #12
34b54     01 14 06 F6 | 	mov	arg02, #1
34b58     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1178
34b5c     08 4E 05 F1 | 	add	fp, #8
34b60     A7 14 C2 FA | 	rdbyte	arg02, fp
34b64     08 4E 85 F1 | 	sub	fp, #8
34b68     FD 14 0E F2 | 	cmp	arg02, #253 wz
34b6c     58 00 90 AD |  if_e	jmp	#LR__5250
34b70     04 4E 05 F1 | 	add	fp, #4
34b74     A7 12 02 FB | 	rdlong	arg01, fp
34b78     04 4E 85 F1 | 	sub	fp, #4
34b7c     09 14 C6 F9 | 	decod	arg02, #9
34b80     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1178
34b84     0C 4E 05 F1 | 	add	fp, #12
34b88     A7 12 02 F6 | 	mov	arg01, fp
34b8c     0C 4E 85 F1 | 	sub	fp, #12
34b90     02 14 06 F6 | 	mov	arg02, #2
34b94     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34b98     0C 4E 05 F1 | 	add	fp, #12
34b9c     A7 12 02 F6 | 	mov	arg01, fp
34ba0     0C 4E 85 F1 | 	sub	fp, #12
34ba4     01 14 06 F6 | 	mov	arg02, #1
34ba8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34bac     0C 4E 05 F1 | 	add	fp, #12
34bb0     A7 14 C2 FA | 	rdbyte	arg02, fp
34bb4     0C 4E 85 F1 | 	sub	fp, #12
34bb8     1F 14 06 F5 | 	and	arg02, #31
34bbc     05 14 0E F2 | 	cmp	arg02, #5 wz
34bc0                 | ' 			return 0;
34bc0     00 FA 05 56 |  if_ne	mov	result1, #0
34bc4     04 00 90 5D |  if_ne	jmp	#LR__5251
34bc8                 | LR__5250
34bc8                 | ' 	}
34bc8                 | ' 
34bc8                 | ' 	return 1;
34bc8     01 FA 05 F6 | 	mov	result1, #1
34bcc                 | LR__5251
34bcc     A7 F0 03 F6 | 	mov	ptra, fp
34bd0     B2 00 A0 FD | 	call	#popregs_
34bd4                 | _fatfs_cc_xmit_datablock_1205_ret
34bd4     2D 00 64 FD | 	ret
34bd8                 | 
34bd8                 | _fatfs_cc_send_cmd_1209
34bd8     01 4A 05 F6 | 	mov	COUNT_, #1
34bdc     A8 00 A0 FD | 	call	#pushregs_
34be0     1C F0 07 F1 | 	add	ptra, #28
34be4                 | _fatfs_cc_send_cmd_1209_enter
34be4     04 4E 05 F1 | 	add	fp, #4
34be8     A7 12 42 FC | 	wrbyte	arg01, fp
34bec     04 4E 05 F1 | 	add	fp, #4
34bf0     A7 14 62 FC | 	wrlong	arg02, fp
34bf4     04 4E 85 F1 | 	sub	fp, #4
34bf8     A7 FA C1 FA | 	rdbyte	result1, fp
34bfc     04 4E 85 F1 | 	sub	fp, #4
34c00     80 FA CD F7 | 	test	result1, #128 wz
34c04     44 00 90 AD |  if_e	jmp	#LR__5260
34c08     04 4E 05 F1 | 	add	fp, #4
34c0c     A7 14 C2 FA | 	rdbyte	arg02, fp
34c10     7F 14 06 F5 | 	and	arg02, #127
34c14     A7 14 42 FC | 	wrbyte	arg02, fp
34c18     04 4E 85 F1 | 	sub	fp, #4
34c1c     37 12 06 F6 | 	mov	arg01, #55
34c20     00 14 06 F6 | 	mov	arg02, #0
34c24     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1209
34c28     0C 4E 05 F1 | 	add	fp, #12
34c2c     A7 FA 41 FC | 	wrbyte	result1, fp
34c30     A7 14 C2 FA | 	rdbyte	arg02, fp
34c34     0C 4E 85 F1 | 	sub	fp, #12
34c38     02 14 16 F2 | 	cmp	arg02, #2 wc
34c3c     0C 4E 05 31 |  if_ae	add	fp, #12
34c40     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
34c44     0C 4E 85 31 |  if_ae	sub	fp, #12
34c48     6C 01 90 3D |  if_ae	jmp	#LR__5264
34c4c                 | LR__5260
34c4c     04 4E 05 F1 | 	add	fp, #4
34c50     A7 14 C2 FA | 	rdbyte	arg02, fp
34c54     04 4E 85 F1 | 	sub	fp, #4
34c58     0C 14 0E F2 | 	cmp	arg02, #12 wz
34c5c     14 00 90 AD |  if_e	jmp	#LR__5261
34c60     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1195
34c64     34 FD BF FD | 	call	#_fatfs_cc_select_1199
34c68     00 FA 0D F2 | 	cmp	result1, #0 wz
34c6c     FF FA 05 A6 |  if_e	mov	result1, #255
34c70     44 01 90 AD |  if_e	jmp	#LR__5264
34c74                 | LR__5261
34c74     04 4E 05 F1 | 	add	fp, #4
34c78     A7 14 C2 FA | 	rdbyte	arg02, fp
34c7c     40 FA 05 F6 | 	mov	result1, #64
34c80     0A FB 41 F5 | 	or	result1, arg02
34c84     10 4E 05 F1 | 	add	fp, #16
34c88     A7 FA 41 FC | 	wrbyte	result1, fp
34c8c     0C 4E 85 F1 | 	sub	fp, #12
34c90     A7 FA 01 FB | 	rdlong	result1, fp
34c94     18 FA 45 F0 | 	shr	result1, #24
34c98     0D 4E 05 F1 | 	add	fp, #13
34c9c     A7 FA 41 FC | 	wrbyte	result1, fp
34ca0     0D 4E 85 F1 | 	sub	fp, #13
34ca4     A7 FA 01 FB | 	rdlong	result1, fp
34ca8     10 FA 45 F0 | 	shr	result1, #16
34cac     0E 4E 05 F1 | 	add	fp, #14
34cb0     A7 FA 41 FC | 	wrbyte	result1, fp
34cb4     0E 4E 85 F1 | 	sub	fp, #14
34cb8     A7 FA 01 FB | 	rdlong	result1, fp
34cbc     08 FA 45 F0 | 	shr	result1, #8
34cc0     0F 4E 05 F1 | 	add	fp, #15
34cc4     A7 FA 41 FC | 	wrbyte	result1, fp
34cc8     0F 4E 85 F1 | 	sub	fp, #15
34ccc     A7 FA 01 FB | 	rdlong	result1, fp
34cd0     10 4E 05 F1 | 	add	fp, #16
34cd4     A7 FA 41 FC | 	wrbyte	result1, fp
34cd8     0C 4E 85 F1 | 	sub	fp, #12
34cdc     A7 02 48 FC | 	wrbyte	#1, fp
34ce0     08 4E 85 F1 | 	sub	fp, #8
34ce4     A7 FA C9 FA | 	rdbyte	result1, fp wz
34ce8     04 4E 85 F1 | 	sub	fp, #4
34cec     0C 4E 05 A1 |  if_e	add	fp, #12
34cf0     A7 2A 49 AC |  if_e	wrbyte	#149, fp
34cf4     0C 4E 85 A1 |  if_e	sub	fp, #12
34cf8     04 4E 05 F1 | 	add	fp, #4
34cfc     A7 FA C1 FA | 	rdbyte	result1, fp
34d00     04 4E 85 F1 | 	sub	fp, #4
34d04     08 FA 0D F2 | 	cmp	result1, #8 wz
34d08     0C 4E 05 A1 |  if_e	add	fp, #12
34d0c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
34d10     0C 4E 85 A1 |  if_e	sub	fp, #12
34d14     0C 4E 05 F1 | 	add	fp, #12
34d18     A7 14 C2 FA | 	rdbyte	arg02, fp
34d1c     0D 4E 05 F1 | 	add	fp, #13
34d20     A7 14 42 FC | 	wrbyte	arg02, fp
34d24     05 4E 85 F1 | 	sub	fp, #5
34d28     A7 12 02 F6 | 	mov	arg01, fp
34d2c     14 4E 85 F1 | 	sub	fp, #20
34d30     06 14 06 F6 | 	mov	arg02, #6
34d34     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1178
34d38     04 4E 05 F1 | 	add	fp, #4
34d3c     A7 26 C2 FA | 	rdbyte	local01, fp
34d40     04 4E 85 F1 | 	sub	fp, #4
34d44     0C 26 0E F2 | 	cmp	local01, #12 wz
34d48     10 4E 05 A1 |  if_e	add	fp, #16
34d4c     A7 12 02 A6 |  if_e	mov	arg01, fp
34d50     10 4E 85 A1 |  if_e	sub	fp, #16
34d54     01 14 06 A6 |  if_e	mov	arg02, #1
34d58     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1185
34d5c     0C 4E 05 F1 | 	add	fp, #12
34d60     A7 14 48 FC | 	wrbyte	#10, fp
34d64     0C 4E 85 F1 | 	sub	fp, #12
34d68                 | ' 	n = 10;
34d68                 | ' 	do
34d68                 | LR__5262
34d68     10 4E 05 F1 | 	add	fp, #16
34d6c     A7 12 02 F6 | 	mov	arg01, fp
34d70     10 4E 85 F1 | 	sub	fp, #16
34d74     01 14 06 F6 | 	mov	arg02, #1
34d78     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1185
34d7c     10 4E 05 F1 | 	add	fp, #16
34d80     A7 26 C2 FA | 	rdbyte	local01, fp
34d84     10 4E 85 F1 | 	sub	fp, #16
34d88     80 26 CE F7 | 	test	local01, #128 wz
34d8c     1C 00 90 AD |  if_e	jmp	#LR__5263
34d90     0C 4E 05 F1 | 	add	fp, #12
34d94     A7 26 C2 FA | 	rdbyte	local01, fp
34d98     01 26 86 F1 | 	sub	local01, #1
34d9c     A7 26 42 FC | 	wrbyte	local01, fp
34da0     A7 26 CA FA | 	rdbyte	local01, fp wz
34da4     0C 4E 85 F1 | 	sub	fp, #12
34da8     BC FF 9F 5D |  if_ne	jmp	#LR__5262
34dac                 | LR__5263
34dac                 | ' 
34dac                 | ' 	return d;
34dac     10 4E 05 F1 | 	add	fp, #16
34db0     A7 FA C1 FA | 	rdbyte	result1, fp
34db4     10 4E 85 F1 | 	sub	fp, #16
34db8                 | LR__5264
34db8     A7 F0 03 F6 | 	mov	ptra, fp
34dbc     B2 00 A0 FD | 	call	#popregs_
34dc0                 | _fatfs_cc_send_cmd_1209_ret
34dc0     2D 00 64 FD | 	ret
34dc4                 | 
34dc4                 | _fatfs_cc_disk_deinitialize
34dc4     03 4A 05 F6 | 	mov	COUNT_, #3
34dc8     A8 00 A0 FD | 	call	#pushregs_
34dcc     00 12 4E F2 | 	cmps	arg01, #0 wz
34dd0     01 00 00 FF 
34dd4     14 E4 05 F1 | 	add	objptr, ##532
34dd8     F2 12 02 FB | 	rdlong	arg01, objptr
34ddc     04 E4 85 F1 | 	sub	objptr, #4
34de0     F2 26 02 FB | 	rdlong	local01, objptr
34de4     08 E4 05 F1 | 	add	objptr, #8
34de8     F2 28 02 FB | 	rdlong	local02, objptr
34dec     04 E4 05 F1 | 	add	objptr, #4
34df0     F2 2A 02 FB | 	rdlong	local03, objptr
34df4     01 00 00 FF 
34df8     1C E4 85 F1 | 	sub	objptr, ##540
34dfc                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
34dfc                 | '         return RES_NOTRDY;
34dfc     03 FA 05 56 |  if_ne	mov	result1, #3
34e00     2C 00 90 5D |  if_ne	jmp	#LR__5270
34e04     50 12 62 FD | 	fltl	arg01
34e08     09 01 08 FC | 	wrpin	#0, arg01
34e0c     50 26 62 FD | 	fltl	local01
34e10     13 01 08 FC | 	wrpin	#0, local01
34e14     50 28 62 FD | 	fltl	local02
34e18     14 01 08 FC | 	wrpin	#0, local02
34e1c     50 2A 62 FD | 	fltl	local03
34e20     15 01 08 FC | 	wrpin	#0, local03
34e24     0A 12 06 F6 | 	mov	arg01, #10
34e28     40 0E BF FD | 	call	#__system___waitms
34e2c                 | '     }
34e2c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
34e2c                 | '     _pinclear(PIN_SS);
34e2c                 | '     _pinclear(PIN_CLK);
34e2c                 | '     _pinclear(PIN_DI);
34e2c                 | '     _pinclear(PIN_DO);
34e2c                 | ' 
34e2c                 | '     _waitms(10);
34e2c                 | ' 
34e2c                 | '     return 0;
34e2c     00 FA 05 F6 | 	mov	result1, #0
34e30                 | LR__5270
34e30     A7 F0 03 F6 | 	mov	ptra, fp
34e34     B2 00 A0 FD | 	call	#popregs_
34e38                 | _fatfs_cc_disk_deinitialize_ret
34e38     2D 00 64 FD | 	ret
34e3c                 | 
34e3c                 | _fatfs_cc_gettimeofday
34e3c     04 4A 05 F6 | 	mov	COUNT_, #4
34e40     A8 00 A0 FD | 	call	#pushregs_
34e44     09 27 02 F6 | 	mov	local01, arg01
34e48     FC 09 BF FD | 	call	#__system___getus
34e4c     FD 12 02 F6 | 	mov	arg01, result1
34e50     02 00 00 FF 
34e54     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
34e58     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
34e5c     09 FB 01 F6 | 	mov	result1, arg01
34e60     14 FB 81 F1 | 	sub	result1, local02
34e64     A1 07 00 FF 
34e68     40 FA 15 FD | 	qdiv	result1, ##1000000
34e6c     02 00 00 FF 
34e70     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
34e74     18 28 62 FD | 	getqx	local02
34e78     A1 07 00 FF 
34e7c     40 FA 15 FD | 	qdiv	result1, ##1000000
34e80     00 28 0E F2 | 	cmp	local02, #0 wz
34e84     19 2A 62 FD | 	getqy	local03
34e88     28 00 90 AD |  if_e	jmp	#LR__5280
34e8c     02 00 00 FF 
34e90     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
34e94     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
34e98     14 2D 02 F1 | 	add	local04, local02
34e9c     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
34ea0     15 13 82 F1 | 	sub	arg01, local03
34ea4     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
34ea8     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
34eac     02 00 00 FF 
34eb0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
34eb4                 | LR__5280
34eb4     02 00 00 FF 
34eb8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
34ebc     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
34ec0     02 00 00 FF 
34ec4     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
34ec8     13 2D 62 FC | 	wrlong	local04, local01
34ecc     04 26 06 F1 | 	add	local01, #4
34ed0     13 2B 62 FC | 	wrlong	local03, local01
34ed4                 | '         lastsec += secs;
34ed4                 | '         lastus = now - leftover;
34ed4                 | '     }
34ed4                 | '     tv->tv_sec = lastsec;
34ed4                 | '     tv->tv_usec = leftover;
34ed4                 | '     return 0;
34ed4     00 FA 05 F6 | 	mov	result1, #0
34ed8     A7 F0 03 F6 | 	mov	ptra, fp
34edc     B2 00 A0 FD | 	call	#popregs_
34ee0                 | _fatfs_cc_gettimeofday_ret
34ee0     2D 00 64 FD | 	ret
34ee4                 | 
34ee4                 | _fatfs_cc__is_leap_year
34ee4     09 FB 51 F6 | 	abs	result1, arg01 wc
34ee8     03 FA 05 F5 | 	and	result1, #3
34eec     FD FA 89 F6 | 	negc	result1, result1 wz
34ef0     38 00 90 5D |  if_ne	jmp	#LR__5291
34ef4     09 FB 51 F6 | 	abs	result1, arg01 wc
34ef8     64 FA 15 FD | 	qdiv	result1, #100
34efc     19 FA 61 FD | 	getqy	result1
34f00     FD FA 89 F6 | 	negc	result1, result1 wz
34f04     1C 00 90 5D |  if_ne	jmp	#LR__5290
34f08     09 FB 51 F6 | 	abs	result1, arg01 wc
34f0c     90 FB 15 FD | 	qdiv	result1, #400
34f10                 | '       return (0 == y % 400);
34f10     00 FA 05 F6 | 	mov	result1, #0
34f14     19 00 62 FD | 	getqy	_var01
34f18     00 01 8A F6 | 	negc	_var01, _var01 wz
34f1c     01 FA 05 A6 |  if_e	mov	result1, #1
34f20     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
34f24                 | LR__5290
34f24                 | '     return 1;
34f24     01 FA 05 F6 | 	mov	result1, #1
34f28     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
34f2c                 | LR__5291
34f2c                 | '   }
34f2c                 | '   return 0;
34f2c     00 FA 05 F6 | 	mov	result1, #0
34f30                 | _fatfs_cc__is_leap_year_ret
34f30     2D 00 64 FD | 	ret
34f34                 | 
34f34                 | _fatfs_cc___tzoffset
34f34     09 01 0A F6 | 	mov	_var01, arg01 wz
34f38     FF FF FF FF 
34f3c     0A FF 6B FC | 	wrlong	##-1, arg02
34f40     01 02 06 F6 | 	mov	_var02, #1
34f44     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
34f48                 | '                 return 0;
34f48     00 FA 05 A6 |  if_e	mov	result1, #0
34f4c     94 02 90 AD |  if_e	jmp	#LR__5317
34f50     0A 01 68 FC | 	wrlong	#0, arg02
34f54     02 00 00 FF 
34f58     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
34f5c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
34f60                 | ' 
34f60                 | '        *hasdst = 0;
34f60                 | ' 
34f60                 | ' 	n = stdname;
34f60                 | '         while (*s && isalpha(*s)) {
34f60     02 00 00 FF 
34f64     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
34f68     97 28 48 FB | 	callpa	#(@LR__5301-@LR__5300)>>2,fcache_load_ptr_
34f6c                 | LR__5300
34f6c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
34f70     48 00 90 AD |  if_e	jmp	#LR__5302
34f74     00 13 C2 FA | 	rdbyte	arg01, _var01
34f78                 | ' {
34f78                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
34f78     80 12 36 F3 | 	fle	arg01, #128 wc
34f7c                 | '     return __ctype[c];
34f7c     02 00 00 FF 
34f80     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
34f84     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34f88     09 FB C1 FA | 	rdbyte	result1, arg01
34f8c     02 00 00 FF 
34f90     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
34f94     0C FA CD F7 | 	test	result1, #12 wz
34f98     20 00 90 AD |  if_e	jmp	#LR__5302
34f9c     00 09 02 F6 | 	mov	_var05, _var01
34fa0     00 0B 02 F6 | 	mov	_var06, _var01
34fa4     01 0A 06 F1 | 	add	_var06, #1
34fa8     04 0D C2 FA | 	rdbyte	_var07, _var05
34fac     05 01 02 F6 | 	mov	_var01, _var06
34fb0     03 0D 42 FC | 	wrbyte	_var07, _var04
34fb4     01 06 06 F1 | 	add	_var04, #1
34fb8     B0 FF 9F FD | 	jmp	#LR__5300
34fbc                 | LR__5301
34fbc                 | LR__5302
34fbc     03 01 48 FC | 	wrbyte	#0, _var04
34fc0     00 0E 06 F6 | 	mov	_var08, #0
34fc4     00 05 C2 FA | 	rdbyte	_var03, _var01
34fc8     2D 04 0E F2 | 	cmp	_var03, #45 wz
34fcc     01 02 66 A6 |  if_e	neg	_var02, #1
34fd0     01 00 06 A1 |  if_e	add	_var01, #1
34fd4     97 28 48 FB | 	callpa	#(@LR__5304-@LR__5303)>>2,fcache_load_ptr_
34fd8                 | '                 sgn = -1;
34fd8                 | '                 s++;
34fd8                 | '         }
34fd8                 | '         while (isdigit(*s)) {
34fd8                 | LR__5303
34fd8     00 13 C2 FA | 	rdbyte	arg01, _var01
34fdc                 | ' {
34fdc                 | '   return  (__ctype_get(c) & 0x02 ) ;
34fdc     80 12 36 F3 | 	fle	arg01, #128 wc
34fe0                 | '     return __ctype[c];
34fe0     02 00 00 FF 
34fe4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
34fe8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34fec     09 FB C1 FA | 	rdbyte	result1, arg01
34ff0     02 00 00 FF 
34ff4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
34ff8     02 FA CD F7 | 	test	result1, #2 wz
34ffc     28 00 90 AD |  if_e	jmp	#LR__5305
35000     07 05 02 F6 | 	mov	_var03, _var08
35004     02 04 66 F0 | 	shl	_var03, #2
35008     07 05 02 F1 | 	add	_var03, _var08
3500c     01 04 66 F0 | 	shl	_var03, #1
35010     00 09 C2 FA | 	rdbyte	_var05, _var01
35014     30 08 86 F1 | 	sub	_var05, #48
35018     04 05 02 F1 | 	add	_var03, _var05
3501c     02 0F 02 F6 | 	mov	_var08, _var03
35020     01 00 06 F1 | 	add	_var01, #1
35024     B0 FF 9F FD | 	jmp	#LR__5303
35028                 | LR__5304
35028                 | LR__5305
35028     07 00 00 FF 
3502c     10 0E 06 FD | 	qmul	_var08, ##3600
35030     00 05 C2 FA | 	rdbyte	_var03, _var01
35034     3A 04 0E F2 | 	cmp	_var03, #58 wz
35038     18 10 62 FD | 	getqx	_var09
3503c     70 00 90 5D |  if_ne	jmp	#LR__5309
35040     00 0E 06 F6 | 	mov	_var08, #0
35044     01 00 06 F1 | 	add	_var01, #1
35048     97 28 48 FB | 	callpa	#(@LR__5307-@LR__5306)>>2,fcache_load_ptr_
3504c                 | '                 x = 0;
3504c                 | '                 s++;
3504c                 | '                 while (isdigit(*s)) {
3504c                 | LR__5306
3504c     00 13 C2 FA | 	rdbyte	arg01, _var01
35050                 | ' {
35050                 | '   return  (__ctype_get(c) & 0x02 ) ;
35050     80 12 36 F3 | 	fle	arg01, #128 wc
35054                 | '     return __ctype[c];
35054     02 00 00 FF 
35058     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
3505c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35060     09 FB C1 FA | 	rdbyte	result1, arg01
35064     02 00 00 FF 
35068     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3506c     02 FA CD F7 | 	test	result1, #2 wz
35070     28 00 90 AD |  if_e	jmp	#LR__5308
35074     07 05 02 F6 | 	mov	_var03, _var08
35078     02 04 66 F0 | 	shl	_var03, #2
3507c     07 05 02 F1 | 	add	_var03, _var08
35080     01 04 66 F0 | 	shl	_var03, #1
35084     00 09 C2 FA | 	rdbyte	_var05, _var01
35088     30 08 86 F1 | 	sub	_var05, #48
3508c     04 05 02 F1 | 	add	_var03, _var05
35090     02 0F 02 F6 | 	mov	_var08, _var03
35094     01 00 06 F1 | 	add	_var01, #1
35098     B0 FF 9F FD | 	jmp	#LR__5306
3509c                 | LR__5307
3509c                 | LR__5308
3509c     07 0D 02 F6 | 	mov	_var07, _var08
350a0     04 0C 66 F0 | 	shl	_var07, #4
350a4     07 0D 82 F1 | 	sub	_var07, _var08
350a8     02 0C 66 F0 | 	shl	_var07, #2
350ac     06 11 02 F1 | 	add	_var09, _var07
350b0                 | LR__5309
350b0     02 00 00 FF 
350b4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
350b8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
350bc     00 13 C2 FA | 	rdbyte	arg01, _var01
350c0                 | ' {
350c0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
350c0     80 12 36 F3 | 	fle	arg01, #128 wc
350c4                 | '     return __ctype[c];
350c4     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
350c8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
350cc     09 FB C1 FA | 	rdbyte	result1, arg01
350d0     02 00 00 FF 
350d4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
350d8     0C FA CD F7 | 	test	result1, #12 wz
350dc     50 00 90 AD |  if_e	jmp	#LR__5312
350e0     0A 03 68 FC | 	wrlong	#1, arg02
350e4                 | '                 *hasdst = 1;
350e4                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
350e4                 | LR__5310
350e4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
350e8     44 00 90 AD |  if_e	jmp	#LR__5311
350ec     00 13 C2 FA | 	rdbyte	arg01, _var01
350f0                 | ' {
350f0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
350f0     80 12 36 F3 | 	fle	arg01, #128 wc
350f4                 | '     return __ctype[c];
350f4     02 00 00 FF 
350f8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
350fc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35100     09 FB C1 FA | 	rdbyte	result1, arg01
35104     02 00 00 FF 
35108     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3510c     0C FA CD F7 | 	test	result1, #12 wz
35110     1C 00 90 AD |  if_e	jmp	#LR__5311
35114     00 0B 02 F6 | 	mov	_var06, _var01
35118     01 0A 06 F1 | 	add	_var06, #1
3511c     00 0D C2 FA | 	rdbyte	_var07, _var01
35120     05 01 02 F6 | 	mov	_var01, _var06
35124     03 0D 42 FC | 	wrbyte	_var07, _var04
35128     01 06 06 F1 | 	add	_var04, #1
3512c     B4 FF 9F FD | 	jmp	#LR__5310
35130                 | LR__5311
35130                 | LR__5312
35130     03 01 48 FC | 	wrbyte	#0, _var04
35134     02 00 00 FF 
35138     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3513c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
35140     02 00 00 FF 
35144     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
35148     20 00 90 AD |  if_e	jmp	#LR__5313
3514c     02 00 00 FF 
35150     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35154     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35158     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
3515c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35160     02 00 00 FF 
35164     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
35168     1C 00 90 FD | 	jmp	#LR__5314
3516c                 | LR__5313
3516c     02 00 00 FF 
35170     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
35174     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35178     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
3517c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35180     02 00 00 FF 
35184     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
35188                 | LR__5314
35188     02 00 00 FF 
3518c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
35190     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
35194     02 00 00 FF 
35198     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
3519c     20 00 90 AD |  if_e	jmp	#LR__5315
351a0     02 00 00 FF 
351a4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
351a8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
351ac     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
351b0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
351b4     02 00 00 FF 
351b8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
351bc     1C 00 90 FD | 	jmp	#LR__5316
351c0                 | LR__5315
351c0     02 00 00 FF 
351c4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
351c8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
351cc     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
351d0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
351d4     02 00 00 FF 
351d8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
351dc                 | LR__5316
351dc     08 03 02 FD | 	qmul	_var02, _var09
351e0                 | ' 		_tzname[1] = stdname;
351e0                 | ' 
351e0                 | '         return sgn * off;
351e0     18 FA 61 FD | 	getqx	result1
351e4                 | LR__5317
351e4                 | _fatfs_cc___tzoffset_ret
351e4     2D 00 64 FD | 	ret
351e8                 | 
351e8                 | _fatfs_cc___indst
351e8     10 12 06 F1 | 	add	arg01, #16
351ec     09 01 02 FB | 	rdlong	_var01, arg01
351f0     10 12 86 F1 | 	sub	arg01, #16
351f4     02 00 0E F2 | 	cmp	_var01, #2 wz
351f8     30 00 90 5D |  if_ne	jmp	#LR__5320
351fc     07 00 06 F6 | 	mov	_var01, #7
35200     18 12 06 F1 | 	add	arg01, #24
35204     09 03 02 FB | 	rdlong	_var02, arg01
35208     01 01 02 F1 | 	add	_var01, _var02
3520c     0C 12 86 F1 | 	sub	arg01, #12
35210     09 05 02 FB | 	rdlong	_var03, arg01
35214     02 01 82 F1 | 	sub	_var01, _var03
35218     00 00 56 F2 | 	cmps	_var01, #0 wc
3521c                 | '                         return 1;
3521c     01 FA 05 C6 |  if_b	mov	result1, #1
35220     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
35224                 | '                 return 0;
35224     00 FA 05 F6 | 	mov	result1, #0
35228     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3522c                 | LR__5320
3522c     10 12 06 F1 | 	add	arg01, #16
35230     09 01 02 FB | 	rdlong	_var01, arg01
35234     10 12 86 F1 | 	sub	arg01, #16
35238     0A 00 0E F2 | 	cmp	_var01, #10 wz
3523c     28 00 90 5D |  if_ne	jmp	#LR__5321
35240     18 12 06 F1 | 	add	arg01, #24
35244     09 01 02 FB | 	rdlong	_var01, arg01
35248     0C 12 86 F1 | 	sub	arg01, #12
3524c     09 07 02 FB | 	rdlong	_var04, arg01
35250     03 01 82 F1 | 	sub	_var01, _var04
35254     00 00 56 F2 | 	cmps	_var01, #0 wc
35258                 | '                         return 0;
35258     00 FA 05 C6 |  if_b	mov	result1, #0
3525c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
35260                 | '                 return 1;
35260     01 FA 05 F6 | 	mov	result1, #1
35264     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
35268                 | LR__5321
35268                 | '         }
35268                 | ' 
35268                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
35268     00 00 06 F6 | 	mov	_var01, #0
3526c     10 12 06 F1 | 	add	arg01, #16
35270     09 03 02 FB | 	rdlong	_var02, arg01
35274     10 12 86 F1 | 	sub	arg01, #16
35278     03 02 56 F2 | 	cmps	_var02, #3 wc
3527c     10 00 90 CD |  if_b	jmp	#LR__5322
35280     10 12 06 F1 | 	add	arg01, #16
35284     09 05 02 FB | 	rdlong	_var03, arg01
35288     0A 04 56 F2 | 	cmps	_var03, #10 wc
3528c     01 00 06 C6 |  if_b	mov	_var01, #1
35290                 | LR__5322
35290     00 FB 01 F6 | 	mov	result1, _var01
35294                 | _fatfs_cc___indst_ret
35294     2D 00 64 FD | 	ret
35298                 | 
35298                 | ' 	
35298                 | ' 	FUNCTION pfunc(c as integer) as integer
35298                 | ___strs_cl_pfunc
35298                 | ' 		if (i < 16) then
35298     04 E4 05 F1 | 	add	objptr, #4
3529c     F2 FA 01 FB | 	rdlong	result1, objptr
352a0     04 E4 85 F1 | 	sub	objptr, #4
352a4     10 FA 55 F2 | 	cmps	result1, #16 wc
352a8     2C 00 90 3D |  if_ae	jmp	#LR__5330
352ac     F2 FA 01 FB | 	rdlong	result1, objptr
352b0     04 E4 05 F1 | 	add	objptr, #4
352b4     F2 00 02 FB | 	rdlong	_var01, objptr
352b8     FD 00 02 F1 | 	add	_var01, result1
352bc     00 13 42 FC | 	wrbyte	arg01, _var01
352c0     F2 FA 01 FB | 	rdlong	result1, objptr
352c4     01 FA 05 F1 | 	add	result1, #1
352c8     F2 FA 61 FC | 	wrlong	result1, objptr
352cc     04 E4 85 F1 | 	sub	objptr, #4
352d0                 | ' 			p(i) = c
352d0                 | ' 			i = i+1
352d0                 | ' 			return 1
352d0     01 FA 05 F6 | 	mov	result1, #1
352d4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
352d8                 | LR__5330
352d8                 | ' 			return -1
352d8     01 FA 65 F6 | 	neg	result1, #1
352dc                 | ___strs_cl_pfunc_ret
352dc     2D 00 64 FD | 	ret
352e0                 | 
352e0                 | __struct__s_vfs_file_t_putchar
352e0     04 4A 05 F6 | 	mov	COUNT_, #4
352e4     A8 00 A0 FD | 	call	#pushregs_
352e8     1C E4 05 F1 | 	add	objptr, #28
352ec     F2 26 0A FB | 	rdlong	local01, objptr wz
352f0     1C E4 85 F1 | 	sub	objptr, #28
352f4     00 FA 05 A6 |  if_e	mov	result1, #0
352f8     48 00 90 AD |  if_e	jmp	#LR__5340
352fc     1C E4 05 F1 | 	add	objptr, #28
35300     F2 28 02 FB | 	rdlong	local02, objptr
35304     14 2B 02 F6 | 	mov	local03, local02
35308     1C E4 85 F1 | 	sub	objptr, #28
3530c     13 2A 46 F7 | 	zerox	local03, #19
35310     14 28 46 F0 | 	shr	local02, #20
35314     02 28 66 F0 | 	shl	local02, #2
35318     ED 28 02 F1 | 	add	local02, __methods__
3531c     14 29 02 FB | 	rdlong	local02, local02
35320     F2 14 02 F6 | 	mov	arg02, objptr
35324     F2 2C 02 F6 | 	mov	local04, objptr
35328     15 E5 01 F6 | 	mov	objptr, local03
3532c     2D 28 62 FD | 	call	local02
35330     16 E5 01 F6 | 	mov	objptr, local04
35334                 | '     return (i < 0) ? 0 : 1;
35334     00 FA 55 F2 | 	cmps	result1, #0 wc
35338     00 26 06 C6 |  if_b	mov	local01, #0
3533c     01 26 06 36 |  if_ae	mov	local01, #1
35340     13 FB 01 F6 | 	mov	result1, local01
35344                 | LR__5340
35344     A7 F0 03 F6 | 	mov	ptra, fp
35348     B2 00 A0 FD | 	call	#popregs_
3534c                 | __struct__s_vfs_file_t_putchar_ret
3534c     2D 00 64 FD | 	ret
35350                 | 
35350                 | __struct__s_vfs_file_t_getchar
35350     03 4A 05 F6 | 	mov	COUNT_, #3
35354     A8 00 A0 FD | 	call	#pushregs_
35358     20 E4 05 F1 | 	add	objptr, #32
3535c     F2 12 0A FB | 	rdlong	arg01, objptr wz
35360     20 E4 85 F1 | 	sub	objptr, #32
35364     01 FA 65 A6 |  if_e	neg	result1, #1
35368     38 00 90 AD |  if_e	jmp	#LR__5350
3536c                 | '     return getcf(__this);
3536c     20 E4 05 F1 | 	add	objptr, #32
35370     F2 26 02 FB | 	rdlong	local01, objptr
35374     13 29 02 F6 | 	mov	local02, local01
35378     20 E4 85 F1 | 	sub	objptr, #32
3537c     13 28 46 F7 | 	zerox	local02, #19
35380     14 26 46 F0 | 	shr	local01, #20
35384     02 26 66 F0 | 	shl	local01, #2
35388     ED 26 02 F1 | 	add	local01, __methods__
3538c     13 27 02 FB | 	rdlong	local01, local01
35390     F2 12 02 F6 | 	mov	arg01, objptr
35394     F2 2A 02 F6 | 	mov	local03, objptr
35398     14 E5 01 F6 | 	mov	objptr, local02
3539c     2D 26 62 FD | 	call	local01
353a0     15 E5 01 F6 | 	mov	objptr, local03
353a4                 | LR__5350
353a4     A7 F0 03 F6 | 	mov	ptra, fp
353a8     B2 00 A0 FD | 	call	#popregs_
353ac                 | __struct__s_vfs_file_t_getchar_ret
353ac     2D 00 64 FD | 	ret
353b0                 | 
353b0                 | __struct___bas_wrap_sender_tx
353b0     03 4A 05 F6 | 	mov	COUNT_, #3
353b4     A8 00 A0 FD | 	call	#pushregs_
353b8     F2 26 02 FB | 	rdlong	local01, objptr
353bc     13 29 02 F6 | 	mov	local02, local01
353c0     13 26 46 F7 | 	zerox	local01, #19
353c4     14 28 46 F0 | 	shr	local02, #20
353c8     02 28 66 F0 | 	shl	local02, #2
353cc     ED 28 02 F1 | 	add	local02, __methods__
353d0     14 29 02 FB | 	rdlong	local02, local02
353d4     F2 2A 02 F6 | 	mov	local03, objptr
353d8     13 E5 01 F6 | 	mov	objptr, local01
353dc     2D 28 62 FD | 	call	local02
353e0     15 E5 01 F6 | 	mov	objptr, local03
353e4     01 FA 05 F6 | 	mov	result1, #1
353e8     A7 F0 03 F6 | 	mov	ptra, fp
353ec     B2 00 A0 FD | 	call	#popregs_
353f0                 | __struct___bas_wrap_sender_tx_ret
353f0     2D 00 64 FD | 	ret
353f4                 | 
353f4                 | __struct___bas_wrap_sender_rx
353f4     03 4A 05 F6 | 	mov	COUNT_, #3
353f8     A8 00 A0 FD | 	call	#pushregs_
353fc     04 E4 05 F1 | 	add	objptr, #4
35400     F2 26 02 FB | 	rdlong	local01, objptr
35404     13 29 02 F6 | 	mov	local02, local01
35408     04 E4 85 F1 | 	sub	objptr, #4
3540c     13 28 46 F7 | 	zerox	local02, #19
35410     14 26 46 F0 | 	shr	local01, #20
35414     02 26 66 F0 | 	shl	local01, #2
35418     ED 26 02 F1 | 	add	local01, __methods__
3541c     13 27 02 FB | 	rdlong	local01, local01
35420     F2 2A 02 F6 | 	mov	local03, objptr
35424     14 E5 01 F6 | 	mov	objptr, local02
35428     2D 26 62 FD | 	call	local01
3542c     15 E5 01 F6 | 	mov	objptr, local03
35430     A7 F0 03 F6 | 	mov	ptra, fp
35434     B2 00 A0 FD | 	call	#popregs_
35438                 | __struct___bas_wrap_sender_rx_ret
35438     2D 00 64 FD | 	ret
3543c                 | 
3543c                 | __struct___bas_wrap_sender_close
3543c     03 4A 05 F6 | 	mov	COUNT_, #3
35440     A8 00 A0 FD | 	call	#pushregs_
35444     08 E4 05 F1 | 	add	objptr, #8
35448     F2 26 02 FB | 	rdlong	local01, objptr
3544c     13 29 02 F6 | 	mov	local02, local01
35450     08 E4 85 F1 | 	sub	objptr, #8
35454     13 28 46 F7 | 	zerox	local02, #19
35458     14 26 46 F0 | 	shr	local01, #20
3545c     02 26 66 F0 | 	shl	local01, #2
35460     ED 26 02 F1 | 	add	local01, __methods__
35464     13 27 02 FB | 	rdlong	local01, local01
35468     F2 2A 02 F6 | 	mov	local03, objptr
3546c     14 E5 01 F6 | 	mov	objptr, local02
35470     2D 26 62 FD | 	call	local01
35474     15 E5 01 F6 | 	mov	objptr, local03
35478     A7 F0 03 F6 | 	mov	ptra, fp
3547c     B2 00 A0 FD | 	call	#popregs_
35480                 | __struct___bas_wrap_sender_close_ret
35480     2D 00 64 FD | 	ret
35484                 | 
35484                 | LR__5360
35484     2F          | 	byte	"/"
35485     00          | 	byte	0
35486                 | LR__5361
35486     69 6E 66    | 	byte	"inf"
35489     00          | 	byte	0
3548a                 | LR__5362
3548a     6E 61 6E    | 	byte	"nan"
3548d     00          | 	byte	0
3548e                 | LR__5363
3548e                 | 	byte	
3548e     00          | 	byte	0
3548f                 | LR__5364
3548f                 | 	byte	
3548f     00          | 	byte	0
35490                 | LR__5365
35490                 | 	byte	
35490     00          | 	byte	0
35491                 | LR__5366
35491                 | 	byte	
35491     00          | 	byte	0
35492                 | LR__5367
35492                 | 	byte	
35492     00          | 	byte	0
35493                 | LR__5368
35493                 | 	byte	
35493     00          | 	byte	0
35494                 | LR__5369
35494                 | 	byte	
35494     00          | 	byte	0
35495                 | LR__5370
35495                 | 	byte	
35495     00          | 	byte	0
35496                 | LR__5371
35496     00          | 	byte	0
35497     00          | 	byte	0
35498                 | LR__5372
35498     00          | 	byte	0
35499     00          | 	byte	0
3549a                 | LR__5373
3549a     00          | 	byte	0
3549b     00          | 	byte	0
3549c                 | LR__5374
3549c     20 21 21 21 
354a0     20 63 6F 72 
354a4     72 75 70 74 
354a8     65 64 20 68 
354ac     65 61 70 3F 
354b0     3F 3F 20 21 
354b4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
354b7     00          | 	byte	0
354b8                 | LR__5375
354b8     20 21 21 21 
354bc     20 6F 75 74 
354c0     20 6F 66 20 
354c4     68 65 61 70 
354c8     20 6D 65 6D 
354cc     6F 72 79 20 
354d0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
354d4     00          | 	byte	0
354d5                 | LR__5376
354d5     20 21 21 21 
354d9     20 63 6F 72 
354dd     72 75 70 74 
354e1     65 64 20 68 
354e5     65 61 70 20 
354e9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
354ed     00          | 	byte	0
354ee                 | LR__5377
354ee     00          | 	byte	0
354ef     00          | 	byte	0
354f0                 | LR__5378
354f0     2E          | 	byte	"."
354f1     00          | 	byte	0
354f2                 | LR__5379
354f2     00          | 	byte	0
354f3     00          | 	byte	0
354f4                 | LR__5380
354f4     00          | 	byte	0
354f5     00          | 	byte	0
354f6                 | LR__5381
354f6     00          | 	byte	0
354f7     00          | 	byte	0
354f8                 | LR__5382
354f8     2A 3A 3C 3E 
354fc     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
35500     00          | 	byte	0
35501                 | LR__5383
35501     2B 2C 3B 3D 
35505     5B 5D       | 	byte	"+,;=[]"
35507     00          | 	byte	0
35508                 | LR__5384
35508     46 41 54 33 
3550c     32 20 20 20 | 	byte	"FAT32   "
35510     00          | 	byte	0
35511                 | LR__5385
35511     54 5A       | 	byte	"TZ"
35513     00          | 	byte	0
35514                 | LR__5386
35514     00          | 	byte	0
35515     00          | 	byte	0
35516                 | LR__5387
35516                 | 	byte	
35516     00          | 	byte	0
35517                 | LR__5388
35517                 | 	byte	
35517     00          | 	byte	0
35518                 | LR__5389
35518                 | 	byte	
35518     00          | 	byte	0
35519                 | LR__5390
35519                 | 	byte	
35519     00          | 	byte	0
3551a                 | LR__5391
3551a     22          | 	byte	34
3551b     00          | 	byte	0
3551c                 | LR__5392
3551c     22          | 	byte	34
3551d     00          | 	byte	0
3551e                 | LR__5393
3551e     3A          | 	byte	":"
3551f     00          | 	byte	0
35520                 | LR__5394
35520                 | 	byte	
35520     00          | 	byte	0
35521                 | LR__5395
35521                 | 	byte	
35521     00          | 	byte	0
35522                 | LR__5396
35522                 | 	byte	
35522     00          | 	byte	0
35523                 | LR__5397
35523                 | 	byte	
35523     00          | 	byte	0
35524                 | LR__5398
35524                 | 	byte	
35524     00          | 	byte	0
35525                 | LR__5399
35525                 | 	byte	
35525     00          | 	byte	0
35526                 | LR__5400
35526                 | 	byte	
35526     00          | 	byte	0
35527                 | LR__5401
35527     30          | 	byte	"0"
35528     00          | 	byte	0
35529                 | LR__5402
35529     22          | 	byte	34
3552a     00          | 	byte	0
3552b                 | LR__5403
3552b     22          | 	byte	34
3552c     00          | 	byte	0
3552d                 | LR__5404
3552d     22          | 	byte	34
3552e     00          | 	byte	0
3552f                 | LR__5405
3552f     22          | 	byte	34
35530     00          | 	byte	0
35531                 | LR__5406
35531     22          | 	byte	34
35532     00          | 	byte	0
35533                 | LR__5407
35533     3E          | 	byte	">"
35534     00          | 	byte	0
35535                 | LR__5408
35535     3C          | 	byte	"<"
35536     00          | 	byte	0
35537                 | LR__5409
35537     2B          | 	byte	"+"
35538     00          | 	byte	0
35539                 | LR__5410
35539     2D          | 	byte	"-"
3553a     00          | 	byte	0
3553b                 | LR__5411
3553b     2A          | 	byte	"*"
3553c     00          | 	byte	0
3553d                 | LR__5412
3553d     2F          | 	byte	"/"
3553e     00          | 	byte	0
3553f                 | LR__5413
3553f     5E          | 	byte	"^"
35540     00          | 	byte	0
35541                 | LR__5414
35541     3D          | 	byte	"="
35542     00          | 	byte	0
35543                 | LR__5415
35543     2B          | 	byte	"+"
35544     00          | 	byte	0
35545                 | LR__5416
35545     2B          | 	byte	"+"
35546     00          | 	byte	0
35547                 | LR__5417
35547     2D          | 	byte	"-"
35548     00          | 	byte	0
35549                 | LR__5418
35549     2D          | 	byte	"-"
3554a     00          | 	byte	0
3554b                 | LR__5419
3554b     3C          | 	byte	"<"
3554c     00          | 	byte	0
3554d                 | LR__5420
3554d     3E          | 	byte	">"
3554e     00          | 	byte	0
3554f                 | LR__5421
3554f     22          | 	byte	34
35550     00          | 	byte	0
35551                 | LR__5422
35551     22          | 	byte	34
35552     00          | 	byte	0
35553                 | LR__5423
35553     65 6C 73 65 | 	byte	"else"
35557     00          | 	byte	0
35558                 | LR__5424
35558     74 68 65 6E | 	byte	"then"
3555c     00          | 	byte	0
3555d                 | LR__5425
3555d     2E          | 	byte	"."
3555e     00          | 	byte	0
3555f                 | LR__5426
3555f     3F          | 	byte	"?"
35560     00          | 	byte	0
35561                 | LR__5427
35561     3F          | 	byte	"?"
35562     00          | 	byte	0
35563                 | LR__5428
35563     6D 6F 75 73 
35567     65          | 	byte	"mouse"
35568     00          | 	byte	0
35569                 | LR__5429
35569     63 75 72 73 
3556d     6F 72       | 	byte	"cursor"
3556f     00          | 	byte	0
35570                 | LR__5430
35570     63 6C 69 63 
35574     6B          | 	byte	"click"
35575     00          | 	byte	0
35576                 | LR__5431
35576     6F 6E       | 	byte	"on"
35578     00          | 	byte	0
35579                 | LR__5432
35579     31          | 	byte	"1"
3557a     00          | 	byte	0
3557b                 | LR__5433
3557b     6F 66 66    | 	byte	"off"
3557e     00          | 	byte	0
3557f                 | LR__5434
3557f     30          | 	byte	"0"
35580     00          | 	byte	0
35581                 | LR__5435
35581     6D 6F 64 65 | 	byte	"mode"
35585     00          | 	byte	0
35586                 | LR__5436
35586     6D 2E       | 	byte	"m."
35588     00          | 	byte	0
35589                 | LR__5437
35589     61 74 61 72 
3558d     69          | 	byte	"atari"
3558e     00          | 	byte	0
3558f                 | LR__5438
3558f     30          | 	byte	"0"
35590     00          | 	byte	0
35591                 | LR__5439
35591     70 63 5F 61 
35595     6D 62 65 72 | 	byte	"pc_amber"
35599     00          | 	byte	0
3559a                 | LR__5440
3559a     31          | 	byte	"1"
3559b     00          | 	byte	0
3559c                 | LR__5441
3559c     70 63 5F 67 
355a0     72 65 65 6E | 	byte	"pc_green"
355a4     00          | 	byte	0
355a5                 | LR__5442
355a5     32          | 	byte	"2"
355a6     00          | 	byte	0
355a7                 | LR__5443
355a7     70 63 5F 77 
355ab     68 69 74 65 | 	byte	"pc_white"
355af     00          | 	byte	0
355b0                 | LR__5444
355b0     33          | 	byte	"3"
355b1     00          | 	byte	0
355b2                 | LR__5445
355b2     73 74       | 	byte	"st"
355b4     00          | 	byte	0
355b5                 | LR__5446
355b5     34          | 	byte	"4"
355b6     00          | 	byte	0
355b7                 | LR__5447
355b7                 | 	byte	
355b7     00          | 	byte	0
355b8                 | LR__5448
355b8     6C 6F 61 64 | 	byte	"load"
355bc     00          | 	byte	0
355bd                 | LR__5449
355bd     73 61 76 65 | 	byte	"save"
355c1     00          | 	byte	0
355c2                 | LR__5450
355c2     62 72 75 6E | 	byte	"brun"
355c6     00          | 	byte	0
355c7                 | LR__5451
355c7     72 75 6E    | 	byte	"run"
355ca     00          | 	byte	0
355cb                 | LR__5452
355cb     6C 6F 2E    | 	byte	"lo."
355ce     00          | 	byte	0
355cf                 | LR__5453
355cf     73 2E       | 	byte	"s."
355d1     00          | 	byte	0
355d2                 | LR__5454
355d2     62 72 2E    | 	byte	"br."
355d5     00          | 	byte	0
355d6                 | LR__5455
355d6     65 6E 74 65 
355da     72          | 	byte	"enter"
355db     00          | 	byte	0
355dc                 | LR__5456
355dc     65 2E       | 	byte	"e."
355de     00          | 	byte	0
355df                 | LR__5457
355df     64 65 6C 65 
355e3     74 65       | 	byte	"delete"
355e5     00          | 	byte	0
355e6                 | LR__5458
355e6     6D 6B 64 69 
355ea     72          | 	byte	"mkdir"
355eb     00          | 	byte	0
355ec                 | LR__5459
355ec     63 64       | 	byte	"cd"
355ee     00          | 	byte	0
355ef                 | LR__5460
355ef     63 64 2E    | 	byte	"cd."
355f2     00          | 	byte	0
355f3                 | LR__5461
355f3     2E          | 	byte	"."
355f4     00          | 	byte	0
355f5                 | LR__5462
355f5     2E 2E       | 	byte	".."
355f7     00          | 	byte	0
355f8                 | LR__5463
355f8     63 64       | 	byte	"cd"
355fa     00          | 	byte	0
355fb                 | LR__5464
355fb     2F          | 	byte	"/"
355fc     00          | 	byte	0
355fd                 | LR__5465
355fd                 | 	byte	
355fd     00          | 	byte	0
355fe                 | LR__5466
355fe                 | 	byte	
355fe     00          | 	byte	0
355ff                 | LR__5467
355ff                 | 	byte	
355ff     00          | 	byte	0
35600                 | LR__5468
35600                 | 	byte	
35600     00          | 	byte	0
35601                 | LR__5469
35601                 | 	byte	
35601     00          | 	byte	0
35602                 | LR__5470
35602     52 65 61 64 
35606     79          | 	byte	"Ready"
35607     00          | 	byte	0
35608                 | LR__5471
35608     2B          | 	byte	"+"
35609     00          | 	byte	0
3560a                 | LR__5472
3560a     2D          | 	byte	"-"
3560b     00          | 	byte	0
3560c                 | LR__5473
3560c     6F 72       | 	byte	"or"
3560e     00          | 	byte	0
3560f                 | LR__5474
3560f     78 6F 72    | 	byte	"xor"
35612     00          | 	byte	0
35613                 | LR__5475
35613     2A          | 	byte	"*"
35614     00          | 	byte	0
35615                 | LR__5476
35615     2F          | 	byte	"/"
35616     00          | 	byte	0
35617                 | LR__5477
35617     61 6E 64    | 	byte	"and"
3561a     00          | 	byte	0
3561b                 | LR__5478
3561b     64 69 76    | 	byte	"div"
3561e     00          | 	byte	0
3561f                 | LR__5479
3561f     6D 6F 64    | 	byte	"mod"
35622     00          | 	byte	0
35623                 | LR__5480
35623     73 68 6C    | 	byte	"shl"
35626     00          | 	byte	0
35627                 | LR__5481
35627     73 68 72    | 	byte	"shr"
3562a     00          | 	byte	0
3562b                 | LR__5482
3562b     5E          | 	byte	"^"
3562c     00          | 	byte	0
3562d                 | LR__5483
3562d     6E 6F 74    | 	byte	"not"
35630     00          | 	byte	0
35631                 | LR__5484
35631     40          | 	byte	"@"
35632     00          | 	byte	0
35633                 | LR__5485
35633     3D          | 	byte	"="
35634     00          | 	byte	0
35635                 | LR__5486
35635     3E 3D       | 	byte	">="
35637     00          | 	byte	0
35638                 | LR__5487
35638     3C 3D       | 	byte	"<="
3563a     00          | 	byte	0
3563b                 | LR__5488
3563b     3C          | 	byte	"<"
3563c     00          | 	byte	0
3563d                 | LR__5489
3563d     3E          | 	byte	">"
3563e     00          | 	byte	0
3563f                 | LR__5490
3563f     3C 3E       | 	byte	"<>"
35641     00          | 	byte	0
35642                 | LR__5491
35642     2B 2B       | 	byte	"++"
35644     00          | 	byte	0
35645                 | LR__5492
35645     2D 2D       | 	byte	"--"
35647     00          | 	byte	0
35648                 | LR__5493
35648     23          | 	byte	"#"
35649     00          | 	byte	0
3564a                 | LR__5494
3564a     30          | 	byte	"0"
3564b     00          | 	byte	0
3564c                 | LR__5495
3564c     39          | 	byte	"9"
3564d     00          | 	byte	0
3564e                 | LR__5496
3564e     23 72 65 61 
35652     64          | 	byte	"#read"
35653     00          | 	byte	0
35654                 | LR__5497
35654     23 77 72 69 
35658     74 65       | 	byte	"#write"
3565a     00          | 	byte	0
3565b                 | LR__5498
3565b     23 61 70 70 
3565f     65 6E 64    | 	byte	"#append"
35662     00          | 	byte	0
35663                 | LR__5499
35663     23          | 	byte	"#"
35664     00          | 	byte	0
35665                 | LR__5500
35665     23          | 	byte	"#"
35666     00          | 	byte	0
35667                 | LR__5501
35667     2D          | 	byte	"-"
35668     00          | 	byte	0
35669                 | LR__5502
35669     30          | 	byte	"0"
3566a     00          | 	byte	0
3566b                 | LR__5503
3566b     63          | 	byte	"c"
3566c     00          | 	byte	0
3566d                 | LR__5504
3566d     63 23       | 	byte	"c#"
3566f     00          | 	byte	0
35670                 | LR__5505
35670     64          | 	byte	"d"
35671     00          | 	byte	0
35672                 | LR__5506
35672     64 23       | 	byte	"d#"
35674     00          | 	byte	0
35675                 | LR__5507
35675     65          | 	byte	"e"
35676     00          | 	byte	0
35677                 | LR__5508
35677     66          | 	byte	"f"
35678     00          | 	byte	0
35679                 | LR__5509
35679     66 23       | 	byte	"f#"
3567b     00          | 	byte	0
3567c                 | LR__5510
3567c     67          | 	byte	"g"
3567d     00          | 	byte	0
3567e                 | LR__5511
3567e     67 23       | 	byte	"g#"
35680     00          | 	byte	0
35681                 | LR__5512
35681     61          | 	byte	"a"
35682     00          | 	byte	0
35683                 | LR__5513
35683     61 23       | 	byte	"a#"
35685     00          | 	byte	0
35686                 | LR__5514
35686     68          | 	byte	"h"
35687     00          | 	byte	0
35688                 | LR__5515
35688     62          | 	byte	"b"
35689     00          | 	byte	0
3568a                 | LR__5516
3568a     2B          | 	byte	"+"
3568b     00          | 	byte	0
3568c                 | LR__5517
3568c     2D          | 	byte	"-"
3568d     00          | 	byte	0
3568e                 | LR__5518
3568e     3D          | 	byte	"="
3568f     00          | 	byte	0
35690                 | LR__5519
35690     2C          | 	byte	","
35691     00          | 	byte	0
35692                 | LR__5520
35692     2A          | 	byte	"*"
35693     00          | 	byte	0
35694                 | LR__5521
35694     2F          | 	byte	"/"
35695     00          | 	byte	0
35696                 | LR__5522
35696     3B          | 	byte	";"
35697     00          | 	byte	0
35698                 | LR__5523
35698     22          | 	byte	34
35699     00          | 	byte	0
3569a                 | LR__5524
3569a     5E          | 	byte	"^"
3569b     00          | 	byte	0
3569c                 | LR__5525
3569c     29          | 	byte	")"
3569d     00          | 	byte	0
3569e                 | LR__5526
3569e     28          | 	byte	"("
3569f     00          | 	byte	0
356a0                 | LR__5527
356a0     3A          | 	byte	":"
356a1     00          | 	byte	0
356a2                 | LR__5528
356a2     20          | 	byte	" "
356a3     00          | 	byte	0
356a4                 | LR__5529
356a4     3E          | 	byte	">"
356a5     00          | 	byte	0
356a6                 | LR__5530
356a6     3C          | 	byte	"<"
356a7     00          | 	byte	0
356a8                 | LR__5531
356a8     3D          | 	byte	"="
356a9     00          | 	byte	0
356aa                 | LR__5532
356aa     62 65 65 70 | 	byte	"beep"
356ae     00          | 	byte	0
356af                 | LR__5533
356af     62 2E       | 	byte	"b."
356b1     00          | 	byte	0
356b2                 | LR__5534
356b2     62 6C 69 74 | 	byte	"blit"
356b6     00          | 	byte	0
356b7                 | LR__5535
356b7     62 6F 78    | 	byte	"box"
356ba     00          | 	byte	0
356bb                 | LR__5536
356bb     62 72 75 6E | 	byte	"brun"
356bf     00          | 	byte	0
356c0                 | LR__5537
356c0     62 72 2E    | 	byte	"br."
356c3     00          | 	byte	0
356c4                 | LR__5538
356c4     63 64       | 	byte	"cd"
356c6     00          | 	byte	0
356c7                 | LR__5539
356c7     63 68 61 6E 
356cb     67 65 66 72 
356cf     65 71       | 	byte	"changefreq"
356d1     00          | 	byte	0
356d2                 | LR__5540
356d2     63 66 2E    | 	byte	"cf."
356d5     00          | 	byte	0
356d6                 | LR__5541
356d6     63 68 61 6E 
356da     67 65 70 61 
356de     6E          | 	byte	"changepan"
356df     00          | 	byte	0
356e0                 | LR__5542
356e0     63 70 2E    | 	byte	"cp."
356e3     00          | 	byte	0
356e4                 | LR__5543
356e4     63 68 61 6E 
356e8     67 65 76 6F 
356ec     6C          | 	byte	"changevol"
356ed     00          | 	byte	0
356ee                 | LR__5544
356ee     63 76 2E    | 	byte	"cv."
356f1     00          | 	byte	0
356f2                 | LR__5545
356f2     63 68 61 6E 
356f6     67 65 77 61 
356fa     76 65       | 	byte	"changewave"
356fc     00          | 	byte	0
356fd                 | LR__5546
356fd     63 77 2E    | 	byte	"cw."
35700     00          | 	byte	0
35701                 | LR__5547
35701     63 69 72 63 
35705     6C 65       | 	byte	"circle"
35707     00          | 	byte	0
35708                 | LR__5548
35708     63 69 2E    | 	byte	"ci."
3570b     00          | 	byte	0
3570c                 | LR__5549
3570c     63 6C 69 63 
35710     6B          | 	byte	"click"
35711     00          | 	byte	0
35712                 | LR__5550
35712     63 6C 6F 73 
35716     65          | 	byte	"close"
35717     00          | 	byte	0
35718                 | LR__5551
35718     63 6C 73    | 	byte	"cls"
3571b     00          | 	byte	0
3571c                 | LR__5552
3571c     63 6F 6C 6F 
35720     72          | 	byte	"color"
35721     00          | 	byte	0
35722                 | LR__5553
35722     63 2E       | 	byte	"c."
35724     00          | 	byte	0
35725                 | LR__5554
35725     63 73 61 76 
35729     65          | 	byte	"csave"
3572a     00          | 	byte	0
3572b                 | LR__5555
3572b     63 73 2E    | 	byte	"cs."
3572e     00          | 	byte	0
3572f                 | LR__5556
3572f     63 75 72 73 
35733     6F 72       | 	byte	"cursor"
35735     00          | 	byte	0
35736                 | LR__5557
35736     64 61 74 61 | 	byte	"data"
3573a     00          | 	byte	0
3573b                 | LR__5558
3573b     64 65 66 73 
3573f     6E 64       | 	byte	"defsnd"
35741     00          | 	byte	0
35742                 | LR__5559
35742     64 65 66 65 
35746     6E 76       | 	byte	"defenv"
35748     00          | 	byte	0
35749                 | LR__5560
35749     64 65 66 73 
3574d     70 72 69 74 
35751     65          | 	byte	"defsprite"
35752     00          | 	byte	0
35753                 | LR__5561
35753     64 73 2E    | 	byte	"ds."
35756     00          | 	byte	0
35757                 | LR__5562
35757     64 65 67    | 	byte	"deg"
3575a     00          | 	byte	0
3575b                 | LR__5563
3575b     64 65 6C 65 
3575f     74 65       | 	byte	"delete"
35761     00          | 	byte	0
35762                 | LR__5564
35762     64 69 6D    | 	byte	"dim"
35765     00          | 	byte	0
35766                 | LR__5565
35766     64 69 72    | 	byte	"dir"
35769     00          | 	byte	0
3576a                 | LR__5566
3576a     64 70 6F 6B 
3576e     65          | 	byte	"dpoke"
3576f     00          | 	byte	0
35770                 | LR__5567
35770     64 72 61 77 | 	byte	"draw"
35774     00          | 	byte	0
35775                 | LR__5568
35775     64 72 61 77 
35779     74 6F       | 	byte	"drawto"
3577b     00          | 	byte	0
3577c                 | LR__5569
3577c     64 72 2E    | 	byte	"dr."
3577f     00          | 	byte	0
35780                 | LR__5570
35780     65 6C 73 65 | 	byte	"else"
35784     00          | 	byte	0
35785                 | LR__5571
35785     65 6E 64    | 	byte	"end"
35788     00          | 	byte	0
35789                 | LR__5572
35789     65 6E 74 65 
3578d     72          | 	byte	"enter"
3578e     00          | 	byte	0
3578f                 | LR__5573
3578f     65 2E       | 	byte	"e."
35791     00          | 	byte	0
35792                 | LR__5574
35792     66 63 69 72 
35796     63 6C 65    | 	byte	"fcircle"
35799     00          | 	byte	0
3579a                 | LR__5575
3579a     66 63 2E    | 	byte	"fc."
3579d     00          | 	byte	0
3579e                 | LR__5576
3579e     66 69 6C 6C | 	byte	"fill"
357a2     00          | 	byte	0
357a3                 | LR__5577
357a3     66 69 2E    | 	byte	"fi."
357a6     00          | 	byte	0
357a7                 | LR__5578
357a7     66 6F 6E 74 | 	byte	"font"
357ab     00          | 	byte	0
357ac                 | LR__5579
357ac     66 6F 72    | 	byte	"for"
357af     00          | 	byte	0
357b0                 | LR__5580
357b0     66 2E       | 	byte	"f."
357b2     00          | 	byte	0
357b3                 | LR__5581
357b3     66 72 61 6D 
357b7     65          | 	byte	"frame"
357b8     00          | 	byte	0
357b9                 | LR__5582
357b9     66 72 2E    | 	byte	"fr."
357bc     00          | 	byte	0
357bd                 | LR__5583
357bd     67 65 74    | 	byte	"get"
357c0     00          | 	byte	0
357c1                 | LR__5584
357c1     67 6F 73 75 
357c5     62          | 	byte	"gosub"
357c6     00          | 	byte	0
357c7                 | LR__5585
357c7     67 6F 74 6F | 	byte	"goto"
357cb     00          | 	byte	0
357cc                 | LR__5586
357cc     67 2E       | 	byte	"g."
357ce     00          | 	byte	0
357cf                 | LR__5587
357cf     69 66       | 	byte	"if"
357d1     00          | 	byte	0
357d2                 | LR__5588
357d2     69 6E 6B    | 	byte	"ink"
357d5     00          | 	byte	0
357d6                 | LR__5589
357d6     69 2E       | 	byte	"i."
357d8     00          | 	byte	0
357d9                 | LR__5590
357d9     69 6E 70 75 
357dd     74          | 	byte	"input"
357de     00          | 	byte	0
357df                 | LR__5591
357df     6C 69 73 74 | 	byte	"list"
357e3     00          | 	byte	0
357e4                 | LR__5592
357e4     6C 2E       | 	byte	"l."
357e6     00          | 	byte	0
357e7                 | LR__5593
357e7     6C 6F 61 64 | 	byte	"load"
357eb     00          | 	byte	0
357ec                 | LR__5594
357ec     6C 6F 2E    | 	byte	"lo."
357ef     00          | 	byte	0
357f0                 | LR__5595
357f0     6C 70 6F 6B 
357f4     65          | 	byte	"lpoke"
357f5     00          | 	byte	0
357f6                 | LR__5596
357f6     6D 6B 64 69 
357fa     72          | 	byte	"mkdir"
357fb     00          | 	byte	0
357fc                 | LR__5597
357fc     6D 6F 64 65 | 	byte	"mode"
35800     00          | 	byte	0
35801                 | LR__5598
35801     6D 2E       | 	byte	"m."
35803     00          | 	byte	0
35804                 | LR__5599
35804     6D 6F 75 73 
35808     65          | 	byte	"mouse"
35809     00          | 	byte	0
3580a                 | LR__5600
3580a     6E 65 77    | 	byte	"new"
3580d     00          | 	byte	0
3580e                 | LR__5601
3580e     6E 65 78 74 | 	byte	"next"
35812     00          | 	byte	0
35813                 | LR__5602
35813     6E 2E       | 	byte	"n."
35815     00          | 	byte	0
35816                 | LR__5603
35816     6F 6E       | 	byte	"on"
35818     00          | 	byte	0
35819                 | LR__5604
35819     6F 70 65 6E | 	byte	"open"
3581d     00          | 	byte	0
3581e                 | LR__5605
3581e     70 61 70 65 
35822     72          | 	byte	"paper"
35823     00          | 	byte	0
35824                 | LR__5606
35824     70 61 2E    | 	byte	"pa."
35827     00          | 	byte	0
35828                 | LR__5607
35828     70 69 6E 66 
3582c     6C 6F 61 74 | 	byte	"pinfloat"
35830     00          | 	byte	0
35831                 | LR__5608
35831     70 69 6E 68 
35835     69          | 	byte	"pinhi"
35836     00          | 	byte	0
35837                 | LR__5609
35837     70 69 6E 6C 
3583b     6F          | 	byte	"pinlo"
3583c     00          | 	byte	0
3583d                 | LR__5610
3583d     70 69 6E 73 
35841     74 61 72 74 | 	byte	"pinstart"
35845     00          | 	byte	0
35846                 | LR__5611
35846     70 69 6E 74 
3584a     6F 67 67 6C 
3584e     65          | 	byte	"pintoggle"
3584f     00          | 	byte	0
35850                 | LR__5612
35850     70 69 6E 77 
35854     72 69 74 65 | 	byte	"pinwrite"
35858     00          | 	byte	0
35859                 | LR__5613
35859     70 6C 61 79 | 	byte	"play"
3585d     00          | 	byte	0
3585e                 | LR__5614
3585e     70 2E       | 	byte	"p."
35860     00          | 	byte	0
35861                 | LR__5615
35861     70 6C 6F 74 | 	byte	"plot"
35865     00          | 	byte	0
35866                 | LR__5616
35866     70 6C 2E    | 	byte	"pl."
35869     00          | 	byte	0
3586a                 | LR__5617
3586a     70 6F 6B 65 | 	byte	"poke"
3586e     00          | 	byte	0
3586f                 | LR__5618
3586f     70 6F 70    | 	byte	"pop"
35872     00          | 	byte	0
35873                 | LR__5619
35873     70 6F 73 69 
35877     74 69 6F 6E | 	byte	"position"
3587b     00          | 	byte	0
3587c                 | LR__5620
3587c     70 6F 73 2E | 	byte	"pos."
35880     00          | 	byte	0
35881                 | LR__5621
35881     70 72 69 6E 
35885     74          | 	byte	"print"
35886     00          | 	byte	0
35887                 | LR__5622
35887     3F          | 	byte	"?"
35888     00          | 	byte	0
35889                 | LR__5623
35889     70 75 74    | 	byte	"put"
3588c     00          | 	byte	0
3588d                 | LR__5624
3588d     72 61 64    | 	byte	"rad"
35890     00          | 	byte	0
35891                 | LR__5625
35891     72 65 61 64 | 	byte	"read"
35895     00          | 	byte	0
35896                 | LR__5626
35896     72 65 6C 65 
3589a     61 73 65    | 	byte	"release"
3589d     00          | 	byte	0
3589e                 | LR__5627
3589e     72 65 6D    | 	byte	"rem"
358a1     00          | 	byte	0
358a2                 | LR__5628
358a2     27          | 	byte	"'"
358a3     00          | 	byte	0
358a4                 | LR__5629
358a4     72 65 73 74 
358a8     6F 72 65    | 	byte	"restore"
358ab     00          | 	byte	0
358ac                 | LR__5630
358ac     72 65 74 75 
358b0     72 6E       | 	byte	"return"
358b2     00          | 	byte	0
358b3                 | LR__5631
358b3     72 75 6E    | 	byte	"run"
358b6     00          | 	byte	0
358b7                 | LR__5632
358b7     73 61 76 65 | 	byte	"save"
358bb     00          | 	byte	0
358bc                 | LR__5633
358bc     73 2E       | 	byte	"s."
358be     00          | 	byte	0
358bf                 | LR__5634
358bf     73 65 74 64 
358c3     65 6C 61 79 | 	byte	"setdelay"
358c7     00          | 	byte	0
358c8                 | LR__5635
358c8     73 64 2E    | 	byte	"sd."
358cb     00          | 	byte	0
358cc                 | LR__5636
358cc     73 65 74 65 
358d0     6E 76       | 	byte	"setenv"
358d2     00          | 	byte	0
358d3                 | LR__5637
358d3     73 65 2E    | 	byte	"se."
358d6     00          | 	byte	0
358d7                 | LR__5638
358d7     73 65 74 6C 
358db     65 6E       | 	byte	"setlen"
358dd     00          | 	byte	0
358de                 | LR__5639
358de     73 6C 2E    | 	byte	"sl."
358e1     00          | 	byte	0
358e2                 | LR__5640
358e2     73 65 74 70 
358e6     61 6E       | 	byte	"setpan"
358e8     00          | 	byte	0
358e9                 | LR__5641
358e9     73 70 2E    | 	byte	"sp."
358ec     00          | 	byte	0
358ed                 | LR__5642
358ed     73 65 74 73 
358f1     75 73 74 61 
358f5     69 6E       | 	byte	"setsustain"
358f7     00          | 	byte	0
358f8                 | LR__5643
358f8     73 73 2E    | 	byte	"ss."
358fb     00          | 	byte	0
358fc                 | LR__5644
358fc     73 65 74 76 
35900     6F 6C       | 	byte	"setvol"
35902     00          | 	byte	0
35903                 | LR__5645
35903     73 76 2E    | 	byte	"sv."
35906     00          | 	byte	0
35907                 | LR__5646
35907     73 65 74 77 
3590b     61 76 65    | 	byte	"setwave"
3590e     00          | 	byte	0
3590f                 | LR__5647
3590f     73 77 2E    | 	byte	"sw."
35912     00          | 	byte	0
35913                 | LR__5648
35913     73 65 74 77 
35917     61 76       | 	byte	"setwav"
35919     00          | 	byte	0
3591a                 | LR__5649
3591a     73 68 75 74 
3591e     75 70       | 	byte	"shutup"
35920     00          | 	byte	0
35921                 | LR__5650
35921     73 68 2E    | 	byte	"sh."
35924     00          | 	byte	0
35925                 | LR__5651
35925     73 6F 75 6E 
35929     64          | 	byte	"sound"
3592a     00          | 	byte	0
3592b                 | LR__5652
3592b     73 6F 2E    | 	byte	"so."
3592e     00          | 	byte	0
3592f                 | LR__5653
3592f     73 70 72 69 
35933     74 65       | 	byte	"sprite"
35935     00          | 	byte	0
35936                 | LR__5654
35936     73 70 72 2E | 	byte	"spr."
3593a     00          | 	byte	0
3593b                 | LR__5655
3593b     74 68 65 6E | 	byte	"then"
3593f     00          | 	byte	0
35940                 | LR__5656
35940     77 61 69 74 
35944     6D 73       | 	byte	"waitms"
35946     00          | 	byte	0
35947                 | LR__5657
35947     77 2E       | 	byte	"w."
35949     00          | 	byte	0
3594a                 | LR__5658
3594a     77 61 69 74 
3594e     63 6C 6F 63 
35952     6B          | 	byte	"waitclock"
35953     00          | 	byte	0
35954                 | LR__5659
35954     77 63 2E    | 	byte	"wc."
35957     00          | 	byte	0
35958                 | LR__5660
35958     77 61 69 74 
3595c     76 62 6C    | 	byte	"waitvbl"
3595f     00          | 	byte	0
35960                 | LR__5661
35960     77 76 2E    | 	byte	"wv."
35963     00          | 	byte	0
35964                 | LR__5662
35964     77 72 70 69 
35968     6E          | 	byte	"wrpin"
35969     00          | 	byte	0
3596a                 | LR__5663
3596a     77 78 70 69 
3596e     6E          | 	byte	"wxpin"
3596f     00          | 	byte	0
35970                 | LR__5664
35970     77 79 70 69 
35974     6E          | 	byte	"wypin"
35975     00          | 	byte	0
35976                 | LR__5665
35976     61 62 73    | 	byte	"abs"
35979     00          | 	byte	0
3597a                 | LR__5666
3597a     61 63 6F 73 | 	byte	"acos"
3597e     00          | 	byte	0
3597f                 | LR__5667
3597f     61 64 72    | 	byte	"adr"
35982     00          | 	byte	0
35983                 | LR__5668
35983     61 64 64 72 | 	byte	"addr"
35987     00          | 	byte	0
35988                 | LR__5669
35988     61 73 63    | 	byte	"asc"
3598b     00          | 	byte	0
3598c                 | LR__5670
3598c     61 73 69 6E | 	byte	"asin"
35990     00          | 	byte	0
35991                 | LR__5671
35991     61 74 6E    | 	byte	"atn"
35994     00          | 	byte	0
35995                 | LR__5672
35995     62 69 6E 24 | 	byte	"bin$"
35999     00          | 	byte	0
3599a                 | LR__5673
3599a     63 68 72 24 | 	byte	"chr$"
3599e     00          | 	byte	0
3599f                 | LR__5674
3599f     63 6F 73    | 	byte	"cos"
359a2     00          | 	byte	0
359a3                 | LR__5675
359a3     64 70 65 65 
359a7     6B          | 	byte	"dpeek"
359a8     00          | 	byte	0
359a9                 | LR__5676
359a9     66 72 61 6D 
359ad     65 62 75 66 | 	byte	"framebuf"
359b1     00          | 	byte	0
359b2                 | LR__5677
359b2     66 62 2E    | 	byte	"fb."
359b5     00          | 	byte	0
359b6                 | LR__5678
359b6     66 72 65    | 	byte	"fre"
359b9     00          | 	byte	0
359ba                 | LR__5679
359ba     67 65 74 70 
359be     69 78 65 6C | 	byte	"getpixel"
359c2     00          | 	byte	0
359c3                 | LR__5680
359c3     67 65 2E    | 	byte	"ge."
359c6     00          | 	byte	0
359c7                 | LR__5681
359c7     67 65 74 65 
359cb     6E 76 73 75 
359cf     73 74 61 69 
359d3     6E          | 	byte	"getenvsustain"
359d4     00          | 	byte	0
359d5                 | LR__5682
359d5     67 65 74 6E 
359d9     6F 74 65 76 
359dd     61 6C 75 65 | 	byte	"getnotevalue"
359e1     00          | 	byte	0
359e2                 | LR__5683
359e2     67 65 74 74 
359e6     69 6D 65    | 	byte	"gettime"
359e9     00          | 	byte	0
359ea                 | LR__5684
359ea     68 65 78 24 | 	byte	"hex$"
359ee     00          | 	byte	0
359ef                 | LR__5685
359ef     69 6E 6B 65 
359f3     79 24       | 	byte	"inkey$"
359f5     00          | 	byte	0
359f6                 | LR__5686
359f6     69 6E 74    | 	byte	"int"
359f9     00          | 	byte	0
359fa                 | LR__5687
359fa     6C 65 66 74 
359fe     24          | 	byte	"left$"
359ff     00          | 	byte	0
35a00                 | LR__5688
35a00     6C 65 6E    | 	byte	"len"
35a03     00          | 	byte	0
35a04                 | LR__5689
35a04     6C 6F 67    | 	byte	"log"
35a07     00          | 	byte	0
35a08                 | LR__5690
35a08     6C 70 65 65 
35a0c     6B          | 	byte	"lpeek"
35a0d     00          | 	byte	0
35a0e                 | LR__5691
35a0e     6D 69 64 24 | 	byte	"mid$"
35a12     00          | 	byte	0
35a13                 | LR__5692
35a13     6D 6F 75 73 
35a17     65 6B       | 	byte	"mousek"
35a19     00          | 	byte	0
35a1a                 | LR__5693
35a1a     6D 6F 75 73 
35a1e     65 77       | 	byte	"mousew"
35a20     00          | 	byte	0
35a21                 | LR__5694
35a21     6D 6F 75 73 
35a25     65 78       | 	byte	"mousex"
35a27     00          | 	byte	0
35a28                 | LR__5695
35a28     6D 6F 75 73 
35a2c     65 79       | 	byte	"mousey"
35a2e     00          | 	byte	0
35a2f                 | LR__5696
35a2f     70 61 64 78 | 	byte	"padx"
35a33     00          | 	byte	0
35a34                 | LR__5697
35a34     70 61 64 79 | 	byte	"pady"
35a38     00          | 	byte	0
35a39                 | LR__5698
35a39     70 61 64 7A | 	byte	"padz"
35a3d     00          | 	byte	0
35a3e                 | LR__5699
35a3e     70 61 64 68 | 	byte	"padh"
35a42     00          | 	byte	0
35a43                 | LR__5700
35a43     70 65 65 6B | 	byte	"peek"
35a47     00          | 	byte	0
35a48                 | LR__5701
35a48     70 69 6E 72 
35a4c     65 61 64    | 	byte	"pinread"
35a4f     00          | 	byte	0
35a50                 | LR__5702
35a50     72 64 70 69 
35a54     6E          | 	byte	"rdpin"
35a55     00          | 	byte	0
35a56                 | LR__5703
35a56     72 69 67 68 
35a5a     74 24       | 	byte	"right$"
35a5c     00          | 	byte	0
35a5d                 | LR__5704
35a5d     72 71 70 69 
35a61     6E          | 	byte	"rqpin"
35a62     00          | 	byte	0
35a63                 | LR__5705
35a63     72 6F 75 6E 
35a67     64          | 	byte	"round"
35a68     00          | 	byte	0
35a69                 | LR__5706
35a69     72 6E 64    | 	byte	"rnd"
35a6c     00          | 	byte	0
35a6d                 | LR__5707
35a6d     73 69 6E    | 	byte	"sin"
35a70     00          | 	byte	0
35a71                 | LR__5708
35a71     73 71 72    | 	byte	"sqr"
35a74     00          | 	byte	0
35a75                 | LR__5709
35a75     73 74 69 63 
35a79     6B          | 	byte	"stick"
35a7a     00          | 	byte	0
35a7b                 | LR__5710
35a7b     73 74 72 69 
35a7f     67          | 	byte	"strig"
35a80     00          | 	byte	0
35a81                 | LR__5711
35a81     73 74 72 24 | 	byte	"str$"
35a85     00          | 	byte	0
35a86                 | LR__5712
35a86     74 61 6E    | 	byte	"tan"
35a89     00          | 	byte	0
35a8a                 | LR__5713
35a8a     76 61 6C    | 	byte	"val"
35a8d     00          | 	byte	0
35a8e                 | LR__5714
35a8e     76 61 72 70 
35a92     74 72       | 	byte	"varptr"
35a94     00          | 	byte	0
35a95                 | LR__5715
35a95     61          | 	byte	"a"
35a96     00          | 	byte	0
35a97                 | LR__5716
35a97     7A          | 	byte	"z"
35a98     00          | 	byte	0
35a99                 | LR__5717
35a99     5F          | 	byte	"_"
35a9a     00          | 	byte	0
35a9b                 | LR__5718
35a9b     61          | 	byte	"a"
35a9c     00          | 	byte	0
35a9d                 | LR__5719
35a9d     7A          | 	byte	"z"
35a9e     00          | 	byte	0
35a9f                 | LR__5720
35a9f     30          | 	byte	"0"
35aa0     00          | 	byte	0
35aa1                 | LR__5721
35aa1     39          | 	byte	"9"
35aa2     00          | 	byte	0
35aa3                 | LR__5722
35aa3     5F          | 	byte	"_"
35aa4     00          | 	byte	0
35aa5                 | LR__5723
35aa5     2E          | 	byte	"."
35aa6     00          | 	byte	0
35aa7                 | LR__5724
35aa7     61          | 	byte	"a"
35aa8     00          | 	byte	0
35aa9                 | LR__5725
35aa9     7A          | 	byte	"z"
35aaa     00          | 	byte	0
35aab                 | LR__5726
35aab     30          | 	byte	"0"
35aac     00          | 	byte	0
35aad                 | LR__5727
35aad     39          | 	byte	"9"
35aae     00          | 	byte	0
35aaf                 | LR__5728
35aaf     5F          | 	byte	"_"
35ab0     00          | 	byte	0
35ab1                 | LR__5729
35ab1     24          | 	byte	"$"
35ab2     00          | 	byte	0
35ab3                 | LR__5730
35ab3     25          | 	byte	"%"
35ab4     00          | 	byte	0
35ab5                 | LR__5731
35ab5     21          | 	byte	"!"
35ab6     00          | 	byte	0
35ab7                 | LR__5732
35ab7     30          | 	byte	"0"
35ab8     00          | 	byte	0
35ab9                 | LR__5733
35ab9     39          | 	byte	"9"
35aba     00          | 	byte	0
35abb                 | LR__5734
35abb     2E          | 	byte	"."
35abc     00          | 	byte	0
35abd                 | LR__5735
35abd     24          | 	byte	"$"
35abe     00          | 	byte	0
35abf                 | LR__5736
35abf     25          | 	byte	"%"
35ac0     00          | 	byte	0
35ac1                 | LR__5737
35ac1     2D          | 	byte	"-"
35ac2     00          | 	byte	0
35ac3                 | LR__5738
35ac3     2E          | 	byte	"."
35ac4     00          | 	byte	0
35ac5                 | LR__5739
35ac5     24          | 	byte	"$"
35ac6     00          | 	byte	0
35ac7                 | LR__5740
35ac7     25          | 	byte	"%"
35ac8     00          | 	byte	0
35ac9                 | LR__5741
35ac9     30          | 	byte	"0"
35aca     00          | 	byte	0
35acb                 | LR__5742
35acb     39          | 	byte	"9"
35acc     00          | 	byte	0
35acd                 | LR__5743
35acd     5F          | 	byte	"_"
35ace     00          | 	byte	0
35acf                 | LR__5744
35acf     2E          | 	byte	"."
35ad0     00          | 	byte	0
35ad1                 | LR__5745
35ad1     45          | 	byte	"E"
35ad2     00          | 	byte	0
35ad3                 | LR__5746
35ad3     65          | 	byte	"e"
35ad4     00          | 	byte	0
35ad5                 | LR__5747
35ad5     2D          | 	byte	"-"
35ad6     00          | 	byte	0
35ad7                 | LR__5748
35ad7     61          | 	byte	"a"
35ad8     00          | 	byte	0
35ad9                 | LR__5749
35ad9     66          | 	byte	"f"
35ada     00          | 	byte	0
35adb                 | LR__5750
35adb     30          | 	byte	"0"
35adc     00          | 	byte	0
35add                 | LR__5751
35add     31          | 	byte	"1"
35ade     00          | 	byte	0
35adf                 | LR__5752
35adf     5F          | 	byte	"_"
35ae0     00          | 	byte	0
35ae1                 | LR__5753
35ae1     2D          | 	byte	"-"
35ae2     00          | 	byte	0
35ae3                 | LR__5754
35ae3     65          | 	byte	"e"
35ae4     00          | 	byte	0
35ae5                 | LR__5755
35ae5     2E          | 	byte	"."
35ae6     00          | 	byte	0
35ae7                 | LR__5756
35ae7     45          | 	byte	"E"
35ae8     00          | 	byte	0
35ae9                 | LR__5757
35ae9     65          | 	byte	"e"
35aea     00          | 	byte	0
35aeb                 | LR__5758
35aeb     30          | 	byte	"0"
35aec     00          | 	byte	0
35aed                 | LR__5759
35aed     39          | 	byte	"9"
35aee     00          | 	byte	0
35aef                 | LR__5760
35aef     24          | 	byte	"$"
35af0     00          | 	byte	0
35af1                 | LR__5761
35af1     25          | 	byte	"%"
35af2     00          | 	byte	0
35af3                 | LR__5762
35af3     2D          | 	byte	"-"
35af4     00          | 	byte	0
35af5                 | LR__5763
35af5     24          | 	byte	"$"
35af6     00          | 	byte	0
35af7                 | LR__5764
35af7     25          | 	byte	"%"
35af8     00          | 	byte	0
35af9                 | LR__5765
35af9     30          | 	byte	"0"
35afa     00          | 	byte	0
35afb                 | LR__5766
35afb     39          | 	byte	"9"
35afc     00          | 	byte	0
35afd                 | LR__5767
35afd     5F          | 	byte	"_"
35afe     00          | 	byte	0
35aff                 | LR__5768
35aff     30          | 	byte	"0"
35b00     00          | 	byte	0
35b01                 | LR__5769
35b01     39          | 	byte	"9"
35b02     00          | 	byte	0
35b03                 | LR__5770
35b03     61          | 	byte	"a"
35b04     00          | 	byte	0
35b05                 | LR__5771
35b05     66          | 	byte	"f"
35b06     00          | 	byte	0
35b07                 | LR__5772
35b07     5F          | 	byte	"_"
35b08     00          | 	byte	0
35b09                 | LR__5773
35b09     30          | 	byte	"0"
35b0a     00          | 	byte	0
35b0b                 | LR__5774
35b0b     31          | 	byte	"1"
35b0c     00          | 	byte	0
35b0d                 | LR__5775
35b0d     5F          | 	byte	"_"
35b0e     00          | 	byte	0
35b0f                 | LR__5776
35b0f     30          | 	byte	"0"
35b10     00          | 	byte	0
35b11                 | LR__5777
35b11     39          | 	byte	"9"
35b12     00          | 	byte	0
35b13                 | LR__5778
35b13     5F          | 	byte	"_"
35b14     00          | 	byte	0
35b15                 | LR__5779
35b15     22          | 	byte	34
35b16     00          | 	byte	0
35b17                 | LR__5780
35b17     22          | 	byte	34
35b18     00          | 	byte	0
35b19                 | LR__5781
35b19     44 69 6D 3A 
35b1d     20 61 74 20 
35b21     6C 69 6E 65 
35b25     20          | 	byte	"Dim: at line "
35b26     00          | 	byte	0
35b27                 | LR__5782
35b27     3A 20 77 61 
35b2b     72 6E 69 6E 
35b2f     67 3A 20 74 
35b33     68 65 20 76 
35b37     61 72 69 61 
35b3b     62 6C 65 20 
35b3f     65 78 69 73 
35b43     74 65 64 2E | 	byte	": warning: the variable existed."
35b47     00          | 	byte	0
35b48                 | LR__5783
35b48     28          | 	byte	"("
35b49     00          | 	byte	0
35b4a                 | LR__5784
35b4a     61 73       | 	byte	"as"
35b4c     00          | 	byte	0
35b4d                 | LR__5785
35b4d     61 73       | 	byte	"as"
35b4f     00          | 	byte	0
35b50                 | LR__5786
35b50     2C          | 	byte	","
35b51     00          | 	byte	0
35b52                 | LR__5787
35b52     29          | 	byte	")"
35b53     00          | 	byte	0
35b54                 | LR__5788
35b54     29          | 	byte	")"
35b55     00          | 	byte	0
35b56                 | LR__5789
35b56     61 73       | 	byte	"as"
35b58     00          | 	byte	0
35b59                 | LR__5790
35b59     62 79 74 65 | 	byte	"byte"
35b5d     00          | 	byte	0
35b5e                 | LR__5791
35b5e     75 62 79 74 
35b62     65          | 	byte	"ubyte"
35b63     00          | 	byte	0
35b64                 | LR__5792
35b64     73 68 6F 72 
35b68     74          | 	byte	"short"
35b69     00          | 	byte	0
35b6a                 | LR__5793
35b6a     75 73 68 6F 
35b6e     72 74       | 	byte	"ushort"
35b70     00          | 	byte	0
35b71                 | LR__5794
35b71     6C 6F 6E 67 | 	byte	"long"
35b75     00          | 	byte	0
35b76                 | LR__5795
35b76     69 6E 74 65 
35b7a     67 65 72    | 	byte	"integer"
35b7d     00          | 	byte	0
35b7e                 | LR__5796
35b7e     75 6C 6F 6E 
35b82     67          | 	byte	"ulong"
35b83     00          | 	byte	0
35b84                 | LR__5797
35b84     69 6E 74 36 
35b88     34          | 	byte	"int64"
35b89     00          | 	byte	0
35b8a                 | LR__5798
35b8a     75 69 6E 74 
35b8e     36 34       | 	byte	"uint64"
35b90     00          | 	byte	0
35b91                 | LR__5799
35b91     73 69 6E 67 
35b95     6C 65       | 	byte	"single"
35b97     00          | 	byte	0
35b98                 | LR__5800
35b98     64 6F 75 62 
35b9c     6C 65       | 	byte	"double"
35b9e     00          | 	byte	0
35b9f                 | LR__5801
35b9f     73 74 72 69 
35ba3     6E 67       | 	byte	"string"
35ba5     00          | 	byte	0
35ba6                 | LR__5802
35ba6     74 6F       | 	byte	"to"
35ba8     00          | 	byte	0
35ba9                 | LR__5803
35ba9     73 74 65 70 | 	byte	"step"
35bad     00          | 	byte	0
35bae                 | LR__5804
35bae     73 2E       | 	byte	"s."
35bb0     00          | 	byte	0
35bb1                 | LR__5805
35bb1     67 6F 74 6F | 	byte	"goto"
35bb5     00          | 	byte	0
35bb6                 | LR__5806
35bb6     67 6F 73 75 
35bba     62          | 	byte	"gosub"
35bbb     00          | 	byte	0
35bbc                 | LR__5807
35bbc     24          | 	byte	"$"
35bbd     00          | 	byte	0
35bbe                 | LR__5808
35bbe     26 68       | 	byte	"&h"
35bc0     00          | 	byte	0
35bc1                 | LR__5809
35bc1     25          | 	byte	"%"
35bc2     00          | 	byte	0
35bc3                 | LR__5810
35bc3     26 62       | 	byte	"&b"
35bc5     00          | 	byte	0
35bc6                 | LR__5811
35bc6                 | 	byte	
35bc6     00          | 	byte	0
35bc7                 | LR__5812
35bc7     61 63 6F 73 
35bcb     3A 20       | 	byte	"acos: "
35bcd     00          | 	byte	0
35bce                 | LR__5813
35bce     61 73 63 3A 
35bd2     20          | 	byte	"asc: "
35bd3     00          | 	byte	0
35bd4                 | LR__5814
35bd4     61 73 63 3A 
35bd8     20          | 	byte	"asc: "
35bd9     00          | 	byte	0
35bda                 | LR__5815
35bda     61 73 69 6E 
35bde     3A 20       | 	byte	"asin: "
35be0     00          | 	byte	0
35be1                 | LR__5816
35be1     61 74 6E 3A 
35be5     20          | 	byte	"atn: "
35be6     00          | 	byte	0
35be7                 | LR__5817
35be7     62 6C 69 74 
35beb     3A 20       | 	byte	"blit: "
35bed     00          | 	byte	0
35bee                 | LR__5818
35bee     62 69 6E 24 
35bf2     3A 20       | 	byte	"bin$: "
35bf4     00          | 	byte	0
35bf5                 | LR__5819
35bf5     2F          | 	byte	"/"
35bf6     00          | 	byte	0
35bf7                 | LR__5820
35bf7     2F 73 64 2F 
35bfb     62 69 6E 2F | 	byte	"/sd/bin/"
35bff     00          | 	byte	0
35c00                 | LR__5821
35c00     53 79 73 74 
35c04     65 6D 20 65 
35c08     72 72 6F 72 
35c0c     20          | 	byte	"System error "
35c0d     00          | 	byte	0
35c0e                 | LR__5822
35c0e     3A 20       | 	byte	": "
35c10     00          | 	byte	0
35c11                 | LR__5823
35c11     2A          | 	byte	"*"
35c12     00          | 	byte	0
35c13                 | LR__5824
35c13     2E 2E       | 	byte	".."
35c15     00          | 	byte	0
35c16                 | LR__5825
35c16     2F          | 	byte	"/"
35c17     00          | 	byte	0
35c18                 | LR__5826
35c18     2F          | 	byte	"/"
35c19     00          | 	byte	0
35c1a                 | LR__5827
35c1a     53 79 73 74 
35c1e     65 6D 20 65 
35c22     72 72 6F 72 
35c26     20          | 	byte	"System error "
35c27     00          | 	byte	0
35c28                 | LR__5828
35c28     3A 20       | 	byte	": "
35c2a     00          | 	byte	0
35c2b                 | LR__5829
35c2b     43 75 72 72 
35c2f     65 6E 74 20 
35c33     64 69 72 65 
35c37     63 74 6F 72 
35c3b     79 3A 20    | 	byte	"Current directory: "
35c3e     00          | 	byte	0
35c3f                 | LR__5830
35c3f     2F          | 	byte	"/"
35c40     00          | 	byte	0
35c41                 | LR__5831
35c41     53 79 73 74 
35c45     65 6D 20 65 
35c49     72 72 6F 72 
35c4d     20          | 	byte	"System error "
35c4e     00          | 	byte	0
35c4f                 | LR__5832
35c4f     3A 20       | 	byte	": "
35c51     00          | 	byte	0
35c52                 | LR__5833
35c52     43 75 72 72 
35c56     65 6E 74 20 
35c5a     64 69 72 65 
35c5e     63 74 6F 72 
35c62     79 3A 20    | 	byte	"Current directory: "
35c65     00          | 	byte	0
35c66                 | LR__5834
35c66     2F          | 	byte	"/"
35c67     00          | 	byte	0
35c68                 | LR__5835
35c68     2F          | 	byte	"/"
35c69     00          | 	byte	0
35c6a                 | LR__5836
35c6a     2F          | 	byte	"/"
35c6b     00          | 	byte	0
35c6c                 | LR__5837
35c6c     53 79 73 74 
35c70     65 6D 20 65 
35c74     72 72 6F 72 
35c78     20          | 	byte	"System error "
35c79     00          | 	byte	0
35c7a                 | LR__5838
35c7a     3A 20       | 	byte	": "
35c7c     00          | 	byte	0
35c7d                 | LR__5839
35c7d     43 75 72 72 
35c81     65 6E 74 20 
35c85     64 69 72 65 
35c89     63 74 6F 72 
35c8d     79 3A 20    | 	byte	"Current directory: "
35c90     00          | 	byte	0
35c91                 | LR__5840
35c91     63 68 72 24 
35c95     3A 20       | 	byte	"chr$: "
35c97     00          | 	byte	0
35c98                 | LR__5841
35c98     63 68 61 6E 
35c9c     6E 65 6C 23 
35ca0     20 65 78 70 
35ca4     65 63 74 65 
35ca8     64          | 	byte	"channel# expected"
35ca9     00          | 	byte	0
35caa                 | LR__5842
35caa     63 6F 73 3A 
35cae     20          | 	byte	"cos: "
35caf     00          | 	byte	0
35cb0                 | LR__5843
35cb0                 | 	byte	
35cb0     00          | 	byte	0
35cb1                 | LR__5844
35cb1                 | 	byte	
35cb1     00          | 	byte	0
35cb2                 | LR__5845
35cb2     2F 73 64 2F 
35cb6     6D 65 64 69 
35cba     61 2F 68 2F | 	byte	"/sd/media/h/"
35cbe     00          | 	byte	0
35cbf                 | LR__5846
35cbf     53 79 73 74 
35cc3     65 6D 20 65 
35cc7     72 72 6F 72 
35ccb     20          | 	byte	"System error "
35ccc     00          | 	byte	0
35ccd                 | LR__5847
35ccd     3A 20       | 	byte	": "
35ccf     00          | 	byte	0
35cd0                 | LR__5848
35cd0                 | 	byte	
35cd0     00          | 	byte	0
35cd1                 | LR__5849
35cd1                 | 	byte	
35cd1     00          | 	byte	0
35cd2                 | LR__5850
35cd2     2F 73 64 2F 
35cd6     6D 65 64 69 
35cda     61 2F 73 2F | 	byte	"/sd/media/s/"
35cde     00          | 	byte	0
35cdf                 | LR__5851
35cdf     53 79 73 74 
35ce3     65 6D 20 65 
35ce7     72 72 6F 72 
35ceb     20          | 	byte	"System error "
35cec     00          | 	byte	0
35ced                 | LR__5852
35ced     3A 20       | 	byte	": "
35cef     00          | 	byte	0
35cf0                 | LR__5853
35cf0     2F          | 	byte	"/"
35cf1     00          | 	byte	0
35cf2                 | LR__5854
35cf2     2F          | 	byte	"/"
35cf3     00          | 	byte	0
35cf4                 | LR__5855
35cf4     2F          | 	byte	"/"
35cf5     00          | 	byte	0
35cf6                 | LR__5856
35cf6     43 61 6E 6E 
35cfa     6F 74 20 64 
35cfe     65 6C 65 74 
35d02     65 20 66 69 
35d06     6C 65 20 6F 
35d0a     72 20 66 69 
35d0e     6C 65 20 64 
35d12     6F 65 73 6E 
35d16     27 74 20 65 
35d1a     78 69 73 74 
35d1e     3A 20 73 79 
35d22     73 74 65 6D 
35d26     20 65 72 72 
35d2a     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
35d2d     00          | 	byte	0
35d2e                 | LR__5857
35d2e     43 75 72 72 
35d32     65 6E 74 20 
35d36     64 69 72 65 
35d3a     63 74 6F 72 
35d3e     79 3A 20    | 	byte	"Current directory: "
35d41     00          | 	byte	0
35d42                 | LR__5858
35d42                 | 	byte	
35d42     00          | 	byte	0
35d43                 | LR__5859
35d43     2A          | 	byte	"*"
35d44     00          | 	byte	0
35d45                 | LR__5860
35d45                 | 	byte	
35d45     00          | 	byte	0
35d46                 | LR__5861
35d46     5B 64 69 72 
35d4a     5D 20       | 	byte	"[dir] "
35d4c     00          | 	byte	0
35d4d                 | LR__5862
35d4d     4D 6F 72 65 
35d51     20 74 68 61 
35d55     6E 20 31 32 
35d59     38 20 65 6E 
35d5d     74 72 69 65 
35d61     73 20 66 6F 
35d65     75 6E 64 3A 
35d69     20 63 6C 65 
35d6d     61 6E 20 79 
35d71     6F 75 72 20 
35d75     64 69 72 65 
35d79     63 74 6F 72 
35d7d     79          | 	byte	"More than 128 entries found: clean your directory"
35d7e     00          | 	byte	0
35d7f                 | LR__5863
35d7f     2A          | 	byte	"*"
35d80     00          | 	byte	0
35d81                 | LR__5864
35d81                 | 	byte	
35d81     00          | 	byte	0
35d82                 | LR__5865
35d82     4D 6F 72 65 
35d86     20 74 68 61 
35d8a     6E 20 31 32 
35d8e     38 20 65 6E 
35d92     74 72 69 65 
35d96     73 20 66 6F 
35d9a     75 6E 64 3A 
35d9e     20 63 6C 65 
35da2     61 6E 20 79 
35da6     6F 75 72 20 
35daa     64 69 72 65 
35dae     63 74 6F 72 
35db2     79          | 	byte	"More than 128 entries found: clean your directory"
35db3     00          | 	byte	0
35db4                 | LR__5866
35db4     45 72 72 6F 
35db8     72 20       | 	byte	"Error "
35dba     00          | 	byte	0
35dbb                 | LR__5867
35dbb     3A 20       | 	byte	": "
35dbd     00          | 	byte	0
35dbe                 | LR__5868
35dbe     67 65 74 65 
35dc2     6E 76 73 75 
35dc6     73 74 61 69 
35dca     6E 3A 20    | 	byte	"getenvsustain: "
35dcd     00          | 	byte	0
35dce                 | LR__5869
35dce     67 65 74 70 
35dd2     69 78 65 6C 
35dd6     3A 20       | 	byte	"getpixel: "
35dd8     00          | 	byte	0
35dd9                 | LR__5870
35dd9     68 65 78 24 
35ddd     3A 20       | 	byte	"hex$: "
35ddf     00          | 	byte	0
35de0                 | LR__5871
35de0                 | 	byte	
35de0     00          | 	byte	0
35de1                 | LR__5872
35de1     49 6E 20 69 
35de5     6E 70 75 74 
35de9     3A 20       | 	byte	"In input: "
35deb     00          | 	byte	0
35dec                 | LR__5873
35dec     2C          | 	byte	","
35ded     00          | 	byte	0
35dee                 | LR__5874
35dee                 | 	byte	
35dee     00          | 	byte	0
35def                 | LR__5875
35def                 | 	byte	
35def     00          | 	byte	0
35df0                 | LR__5876
35df0     6C 65 66 74 
35df4     24 3A 20    | 	byte	"left$: "
35df7     00          | 	byte	0
35df8                 | LR__5877
35df8     6C 65 66 74 
35dfc     24 3A 20    | 	byte	"left$: "
35dff     00          | 	byte	0
35e00                 | LR__5878
35e00     6C 65 6E 3A 
35e04     20          | 	byte	"len: "
35e05     00          | 	byte	0
35e06                 | LR__5879
35e06     6C 65 6E 3A 
35e0a     20          | 	byte	"len: "
35e0b     00          | 	byte	0
35e0c                 | LR__5880
35e0c                 | 	byte	
35e0c     00          | 	byte	0
35e0d                 | LR__5881
35e0d     2F          | 	byte	"/"
35e0e     00          | 	byte	0
35e0f                 | LR__5882
35e0f     2F          | 	byte	"/"
35e10     00          | 	byte	0
35e11                 | LR__5883
35e11     2E 62 61 73 | 	byte	".bas"
35e15     00          | 	byte	0
35e16                 | LR__5884
35e16     53 79 73 74 
35e1a     65 6D 20 65 
35e1e     72 72 6F 72 
35e22     20          | 	byte	"System error "
35e23     00          | 	byte	0
35e24                 | LR__5885
35e24     3A 20       | 	byte	": "
35e26     00          | 	byte	0
35e27                 | LR__5886
35e27     2E 62 61 73 | 	byte	".bas"
35e2b     00          | 	byte	0
35e2c                 | LR__5887
35e2c     2F          | 	byte	"/"
35e2d     00          | 	byte	0
35e2e                 | LR__5888
35e2e                 | 	byte	
35e2e     00          | 	byte	0
35e2f                 | LR__5889
35e2f     4C 6F 61 64 
35e33     65 64 20    | 	byte	"Loaded "
35e36     00          | 	byte	0
35e37                 | LR__5890
35e37     2F          | 	byte	"/"
35e38     00          | 	byte	0
35e39                 | LR__5891
35e39     6C 6F 67 3A 
35e3d     20          | 	byte	"log: "
35e3e     00          | 	byte	0
35e3f                 | LR__5892
35e3f     6D 69 64 24 
35e43     3A 20       | 	byte	"mid$: "
35e45     00          | 	byte	0
35e46                 | LR__5893
35e46     6D 69 64 24 
35e4a     3A 20       | 	byte	"mid$: "
35e4c     00          | 	byte	0
35e4d                 | LR__5894
35e4d     43 61 6E 6E 
35e51     6F 74 20 63 
35e55     72 65 61 74 
35e59     65 20 61 20 
35e5d     64 69 72 65 
35e61     63 74 6F 72 
35e65     79 3A 20 73 
35e69     79 73 74 65 
35e6d     6D 20 65 72 
35e71     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
35e75     00          | 	byte	0
35e76                 | LR__5895
35e76     20 42 41 53 
35e7a     49 43 20 62 
35e7e     79 74 65 73 
35e82     20 66 72 65 
35e86     65          | 	byte	" BASIC bytes free"
35e87     00          | 	byte	0
35e88                 | LR__5896
35e88                 | 	byte	
35e88     00          | 	byte	0
35e89                 | LR__5897
35e89                 | 	byte	
35e89     00          | 	byte	0
35e8a                 | LR__5898
35e8a                 | 	byte	
35e8a     00          | 	byte	0
35e8b                 | LR__5899
35e8b     6E 6F 6E 61 
35e8f     6D 65 2E 62 
35e93     61 73       | 	byte	"noname.bas"
35e95     00          | 	byte	0
35e96                 | LR__5900
35e96     66 69 6C 65 
35e9a     6E 61 6D 65 
35e9e     20 65 78 70 
35ea2     65 63 74 65 
35ea6     64          | 	byte	"filename expected"
35ea7     00          | 	byte	0
35ea8                 | LR__5901
35ea8     72 65 61 64 | 	byte	"read"
35eac     00          | 	byte	0
35ead                 | LR__5902
35ead     77 72 69 74 
35eb1     65          | 	byte	"write"
35eb2     00          | 	byte	0
35eb3                 | LR__5903
35eb3     61 70 70 65 
35eb7     6E 64       | 	byte	"append"
35eb9     00          | 	byte	0
35eba                 | LR__5904
35eba     63 68 61 6E 
35ebe     6E 65 6C 23 
35ec2     20 65 78 70 
35ec6     65 63 74 65 
35eca     64          | 	byte	"channel# expected"
35ecb     00          | 	byte	0
35ecc                 | LR__5905
35ecc     4F 70 65 6E 
35ed0     3A 20 69 6E 
35ed4     76 61 6C 69 
35ed8     64 20 6D 6F 
35edc     64 65       | 	byte	"Open: invalid mode"
35ede     00          | 	byte	0
35edf                 | LR__5906
35edf     70 61 64 68 
35ee3     3A 20       | 	byte	"padh: "
35ee5     00          | 	byte	0
35ee6                 | LR__5907
35ee6     70 61 64 78 
35eea     3A 20       | 	byte	"padx: "
35eec     00          | 	byte	0
35eed                 | LR__5908
35eed     70 61 64 79 
35ef1     3A 20       | 	byte	"pady: "
35ef3     00          | 	byte	0
35ef4                 | LR__5909
35ef4     70 61 64 7A 
35ef8     3A 20       | 	byte	"padz: "
35efa     00          | 	byte	0
35efb                 | LR__5910
35efb     50 72 69 6E 
35eff     74 20 74 6F 
35f03     20 63 68 61 
35f07     6E 6E 65 6C 
35f0b     20 28 6E 6F 
35f0f     74 20 79 65 
35f13     74 20 69 6D 
35f17     70 6C 65 6D 
35f1b     65 6E 74 65 
35f1f     64 29       | 	byte	"Print to channel (not yet implemented)"
35f21     00          | 	byte	0
35f22                 | LR__5911
35f22                 | 	byte	
35f22     00          | 	byte	0
35f23                 | LR__5912
35f23     64 61 74 61 | 	byte	"data"
35f27     00          | 	byte	0
35f28                 | LR__5913
35f28                 | 	byte	
35f28     00          | 	byte	0
35f29                 | LR__5914
35f29     49 6E 20 72 
35f2d     65 61 64 3A 
35f31     20          | 	byte	"In read: "
35f32     00          | 	byte	0
35f33                 | LR__5915
35f33                 | 	byte	
35f33     00          | 	byte	0
35f34                 | LR__5916
35f34                 | 	byte	
35f34     00          | 	byte	0
35f35                 | LR__5917
35f35     2C          | 	byte	","
35f36     00          | 	byte	0
35f37                 | LR__5918
35f37                 | 	byte	
35f37     00          | 	byte	0
35f38                 | LR__5919
35f38                 | 	byte	
35f38     00          | 	byte	0
35f39                 | LR__5920
35f39                 | 	byte	
35f39     00          | 	byte	0
35f3a                 | LR__5921
35f3a                 | 	byte	
35f3a     00          | 	byte	0
35f3b                 | LR__5922
35f3b                 | 	byte	
35f3b     00          | 	byte	0
35f3c                 | LR__5923
35f3c     72 69 67 68 
35f40     74 24 3A 20 | 	byte	"right$: "
35f44     00          | 	byte	0
35f45                 | LR__5924
35f45     72 69 67 68 
35f49     74 24 3A 20 | 	byte	"right$: "
35f4d     00          | 	byte	0
35f4e                 | LR__5925
35f4e     72 6E 64 3A 
35f52     20          | 	byte	"rnd: "
35f53     00          | 	byte	0
35f54                 | LR__5926
35f54     72 6E 64 3A 
35f58     20          | 	byte	"rnd: "
35f59     00          | 	byte	0
35f5a                 | LR__5927
35f5a                 | 	byte	
35f5a     00          | 	byte	0
35f5b                 | LR__5928
35f5b     53 74 6F 70 
35f5f     70 65 64 20 
35f63     61 74 20 6C 
35f67     69 6E 65 20 | 	byte	"Stopped at line "
35f6b     00          | 	byte	0
35f6c                 | LR__5929
35f6c                 | 	byte	
35f6c     00          | 	byte	0
35f6d                 | LR__5930
35f6d     2F          | 	byte	"/"
35f6e     00          | 	byte	0
35f6f                 | LR__5931
35f6f                 | 	byte	
35f6f     00          | 	byte	0
35f70                 | LR__5932
35f70     53 61 76 65 
35f74     64 20 61 73 
35f78     20          | 	byte	"Saved as "
35f79     00          | 	byte	0
35f7a                 | LR__5933
35f7a     2F          | 	byte	"/"
35f7b     00          | 	byte	0
35f7c                 | LR__5934
35f7c     73 69 6E 3A 
35f80     20          | 	byte	"sin: "
35f81     00          | 	byte	0
35f82                 | LR__5935
35f82     73 71 72 3A 
35f86     20          | 	byte	"sqr: "
35f87     00          | 	byte	0
35f88                 | LR__5936
35f88     73 74 69 63 
35f8c     6B 3A 20    | 	byte	"stick: "
35f8f     00          | 	byte	0
35f90                 | LR__5937
35f90     73 74 72 69 
35f94     67 3A 20    | 	byte	"strig: "
35f97     00          | 	byte	0
35f98                 | LR__5938
35f98     74 61 6E 3A 
35f9c     20          | 	byte	"tan: "
35f9d     00          | 	byte	0
35f9e                 | LR__5939
35f9e     76 61 6C 3A 
35fa2     20          | 	byte	"val: "
35fa3     00          | 	byte	0
35fa4                 | LR__5940
35fa4     76 61 6C 3A 
35fa8     20          | 	byte	"val: "
35fa9     00          | 	byte	0
35faa                 | LR__5941
35faa     24          | 	byte	"$"
35fab     00          | 	byte	0
35fac                 | LR__5942
35fac     26 68       | 	byte	"&h"
35fae     00          | 	byte	0
35faf                 | LR__5943
35faf     25          | 	byte	"%"
35fb0     00          | 	byte	0
35fb1                 | LR__5944
35fb1     26 62       | 	byte	"&b"
35fb3     00          | 	byte	0
35fb4                 | LR__5945
35fb4                 | 	byte	
35fb4     00          | 	byte	0
35fb5                 | LR__5946
35fb5     45 78 70 65 
35fb9     63 74 65 64 
35fbd     20 6E 75 6D 
35fc1     62 65 72 2C 
35fc5     20 67 6F 74 
35fc9     20 73 6F 6D 
35fcd     65 74 68 69 
35fd1     6E 67 20 65 
35fd5     6C 73 65    | 	byte	"Expected number, got something else"
35fd8     00          | 	byte	0
35fd9                 | LR__5947
35fd9     43 61 6E 6E 
35fdd     6F 74 20 61 
35fe1     64 64 20 61 
35fe5     20 6E 75 6D 
35fe9     62 65 72 20 
35fed     74 6F 20 61 
35ff1     20 73 74 72 
35ff5     69 6E 67    | 	byte	"Cannot add a number to a string"
35ff8     00          | 	byte	0
35ff9                 | LR__5948
35ff9     43 61 6E 6E 
35ffd     6F 74 20 73 
36001     75 62 73 74 
36005     72 61 63 74 
36009     20 73 74 72 
3600d     69 6E 67 73 | 	byte	"Cannot substract strings"
36011     00          | 	byte	0
36012                 | LR__5949
36012     55 6E 6B 6E 
36016     6F 77 6E 20 
3601a     65 72 72 6F 
3601e     72 20 77 68 
36022     69 6C 65 20 
36026     61 64 64 69 
3602a     6E 67       | 	byte	"Unknown error while adding"
3602c     00          | 	byte	0
3602d                 | LR__5950
3602d     55 6E 6B 6E 
36031     6F 77 6E 20 
36035     65 72 72 6F 
36039     72 20 77 68 
3603d     69 6C 65 20 
36041     73 75 62 73 
36045     74 72 61 63 
36049     74 69 6E 67 | 	byte	"Unknown error while substracting"
3604d     00          | 	byte	0
3604e                 | LR__5951
3604e     43 61 6E 6E 
36052     6F 74 20 64 
36056     6F 20 6C 6F 
3605a     67 69 63 20 
3605e     6F 70 65 72 
36062     61 74 69 6F 
36066     6E 20 6F 6E 
3606a     20 73 74 72 
3606e     69 6E 67 20 
36072     6F 72 20 66 
36076     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
3607a     00          | 	byte	0
3607b                 | LR__5952
3607b     55 6E 6B 6E 
3607f     6F 77 6E 20 
36083     65 72 72 6F 
36087     72 20 77 68 
3608b     69 6C 65 20 
3608f     64 6F 69 6E 
36093     67 20 6C 6F 
36097     67 69 63 20 
3609b     6F 70 65 72 
3609f     61 74 69 6F 
360a3     6E          | 	byte	"Unknown error while doing logic operation"
360a4     00          | 	byte	0
360a5                 | LR__5953
360a5     43 61 6E 6E 
360a9     6F 74 20 6D 
360ad     75 6C 74 69 
360b1     70 6C 79 20 
360b5     73 74 72 69 
360b9     6E 67 73    | 	byte	"Cannot multiply strings"
360bc     00          | 	byte	0
360bd                 | LR__5954
360bd     55 6E 6B 6E 
360c1     6F 77 6E 20 
360c5     65 72 72 6F 
360c9     72 20 77 68 
360cd     69 6C 65 20 
360d1     6D 75 6C 74 
360d5     69 70 6C 79 
360d9     69 6E 67    | 	byte	"Unknown error while multiplying"
360dc     00          | 	byte	0
360dd                 | LR__5955
360dd     43 61 6E 6E 
360e1     6F 74 20 64 
360e5     69 76 69 64 
360e9     65 20 73 74 
360ed     72 69 6E 67 
360f1     73          | 	byte	"Cannot divide strings"
360f2     00          | 	byte	0
360f3                 | LR__5956
360f3     55 6E 6B 6E 
360f7     6F 77 6E 20 
360fb     65 72 72 6F 
360ff     72 20 77 68 
36103     69 6C 65 20 
36107     64 69 76 69 
3610b     64 69 6E 67 | 	byte	"Unknown error while dividing"
3610f     00          | 	byte	0
36110                 | LR__5957
36110     43 61 6E 6E 
36114     6F 74 20 63 
36118     6F 6D 70 75 
3611c     74 65 20 61 
36120     20 70 6F 77 
36124     65 72 20 6F 
36128     66 20 61 20 
3612c     73 74 72 69 
36130     6E 67       | 	byte	"Cannot compute a power of a string"
36132     00          | 	byte	0
36133                 | LR__5958
36133     55 6E 6B 6E 
36137     6F 77 6E 20 
3613b     65 72 72 6F 
3613f     72 20 77 68 
36143     69 6C 65 20 
36147     63 6F 6D 70 
3614b     75 74 69 6E 
3614f     67 20 61 20 
36153     70 6F 77 65 
36157     72          | 	byte	"Unknown error while computing a power"
36158     00          | 	byte	0
36159                 | LR__5959
36159     52 69 67 68 
3615d     74 20 70 61 
36161     72 65 6E 74 
36165     68 65 73 69 
36169     73 20 65 78 
3616d     70 65 63 74 
36171     65 64       | 	byte	"Right parenthesis expected"
36173     00          | 	byte	0
36174                 | LR__5960
36174     45 78 70 65 
36178     63 74 65 64 
3617c     20 73 74 72 
36180     69 6E 67    | 	byte	"Expected string"
36183     00          | 	byte	0
36184                 | LR__5961
36184     45 78 70 65 
36188     63 74 65 64 
3618c     20 66 6C 6F 
36190     61 74       | 	byte	"Expected float"
36192     00          | 	byte	0
36193                 | LR__5962
36193     45 78 70 65 
36197     63 74 65 64 
3619b     20 75 6E 73 
3619f     69 67 6E 65 
361a3     64 20 69 6E 
361a7     74 65 67 65 
361ab     72          | 	byte	"Expected unsigned integer"
361ac     00          | 	byte	0
361ad                 | LR__5963
361ad     45 78 70 65 
361b1     63 74 65 64 
361b5     20 69 6E 74 
361b9     65 67 65 72 | 	byte	"Expected integer"
361bd     00          | 	byte	0
361be                 | LR__5964
361be     4E 6F 20 6D 
361c2     6F 72 65 20 
361c6     76 61 72 69 
361ca     61 62 6C 65 
361ce     20 73 6C 6F 
361d2     74 73       | 	byte	"No more variable slots"
361d4     00          | 	byte	0
361d5                 | LR__5965
361d5     56 61 72 69 
361d9     61 62 6C 65 
361dd     20 6E 6F 74 
361e1     20 66 6F 75 
361e5     6E 64       | 	byte	"Variable not found"
361e7     00          | 	byte	0
361e8                 | LR__5966
361e8     43 6F 6D 6D 
361ec     61 20 65 78 
361f0     70 65 63 74 
361f4     65 64       | 	byte	"Comma expected"
361f6     00          | 	byte	0
361f7                 | LR__5967
361f7     43 6F 6D 6D 
361fb     61 20 6F 72 
361ff     20 73 65 6D 
36203     69 63 6F 6C 
36207     6F 6E 20 65 
3620b     78 70 65 63 
3620f     74 65 64    | 	byte	"Comma or semicolon expected"
36212     00          | 	byte	0
36213                 | LR__5968
36213     55 6E 6B 6E 
36217     6F 77 6E 20 
3621b     63 6F 6D 6D 
3621f     61 6E 64    | 	byte	"Unknown command"
36222     00          | 	byte	0
36223                 | LR__5969
36223     53 74 61 63 
36227     6B 20 75 6E 
3622b     64 65 72 66 
3622f     6C 6F 77    | 	byte	"Stack underflow"
36232     00          | 	byte	0
36233                 | LR__5970
36233     43 61 6E 6E 
36237     6F 74 20 65 
3623b     78 65 63 75 
3623f     74 65 20 67 
36243     6F 74 6F 20 
36247     6F 72 20 67 
3624b     6F 73 75 62 
3624f     20 69 6E 20 
36253     74 68 65 20 
36257     69 6D 6D 65 
3625b     64 69 61 74 
3625f     65 20 6D 6F 
36263     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
36265     00          | 	byte	0
36266                 | LR__5971
36266     43 61 6E 6E 
3626a     6F 74 20 6C 
3626e     6F 61 64 20 
36272     66 72 6F 6D 
36276     20 74 68 69 
3627a     73 20 66 69 
3627e     6C 65       | 	byte	"Cannot load from this file"
36280     00          | 	byte	0
36281                 | LR__5972
36281     54 68 65 20 
36285     70 72 6F 67 
36289     72 61 6D 20 
3628d     69 73 20 65 
36291     6D 70 74 79 | 	byte	"The program is empty"
36295     00          | 	byte	0
36296                 | LR__5973
36296     49 66 20 61 
3629a     66 74 65 72 
3629e     20 69 66    | 	byte	"If after if"
362a1     00          | 	byte	0
362a2                 | LR__5974
362a2     45 6D 70 74 
362a6     79 20 65 78 
362aa     70 72 65 73 
362ae     73 69 6F 6E | 	byte	"Empty expression"
362b2     00          | 	byte	0
362b3                 | LR__5975
362b3     53 74 72 69 
362b7     6E 67 20 65 
362bb     78 70 65 63 
362bf     74 65 64    | 	byte	"String expected"
362c2     00          | 	byte	0
362c3                 | LR__5976
362c3     49 6E 74 65 
362c7     72 70 72 65 
362cb     74 65 72 20 
362cf     69 6E 74 65 
362d3     72 6E 61 6C 
362d7     20 65 72 72 
362db     6F 72       | 	byte	"Interpreter internal error"
362dd     00          | 	byte	0
362de                 | LR__5977
362de     45 78 70 65 
362e2     63 74 65 64 
362e6     20 61 73 73 
362ea     69 67 6E    | 	byte	"Expected assign"
362ed     00          | 	byte	0
362ee                 | LR__5978
362ee     45 78 70 65 
362f2     63 74 65 64 
362f6     20 27 74 6F 
362fa     27          | 	byte	"Expected 'to'"
362fb     00          | 	byte	0
362fc                 | LR__5979
362fc     45 78 70 65 
36300     63 74 65 64 
36304     20 69 6E 74 
36308     65 67 65 72 
3630c     20 76 61 72 
36310     69 61 62 6C 
36314     65          | 	byte	"Expected integer variable"
36315     00          | 	byte	0
36316                 | LR__5980
36316     55 6E 69 6E 
3631a     69 74 69 61 
3631e     6C 69 7A 65 
36322     64 20 76 61 
36326     72 69 61 62 
3632a     6C 65 20 69 
3632e     6E 20 27 6E 
36332     65 78 74 27 
36336     2C 20 75 73 
3633a     65 20 27 66 
3633e     6F 72 27 20 
36342     62 65 66 6F 
36346     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
36348     00          | 	byte	0
36349                 | LR__5981
36349     4E 6F 20 6D 
3634d     6F 72 65 20 
36351     73 6C 6F 74 
36355     73 20 66 6F 
36359     72 20 27 66 
3635d     6F 72 27    | 	byte	"No more slots for 'for'"
36360     00          | 	byte	0
36361                 | LR__5982
36361     27 4E 65 78 
36365     74 27 20 64 
36369     6F 65 73 6E 
3636d     27 74 20 6D 
36371     61 74 63 68 
36375     20 27 66 6F 
36379     72 27       | 	byte	"'Next' doesn't match 'for'"
3637b     00          | 	byte	0
3637c                 | LR__5983
3637c     27 47 6F 74 
36380     6F 27 20 74 
36384     61 72 67 65 
36388     74 20 6C 69 
3638c     6E 65 20 6E 
36390     6F 74 20 66 
36394     6F 75 6E 64 | 	byte	"'Goto' target line not found"
36398     00          | 	byte	0
36399                 | LR__5984
36399     42 61 64 20 
3639d     6E 75 6D 62 
363a1     65 72 20 6F 
363a5     66 20 70 61 
363a9     72 61 6D 65 
363ad     74 65 72 73 | 	byte	"Bad number of parameters"
363b1     00          | 	byte	0
363b2                 | LR__5985
363b2     46 75 6E 63 
363b6     74 69 6F 6E 
363ba     20 75 6E 64 
363be     65 66 69 6E 
363c2     65 64 20 66 
363c6     6F 72 20 73 
363ca     74 72 69 6E 
363ce     67 73       | 	byte	"Function undefined for strings"
363d0     00          | 	byte	0
363d1                 | LR__5986
363d1     42 61 64 20 
363d5     70 61 72 61 
363d9     6D 65 74 65 
363dd     72          | 	byte	"Bad parameter"
363de     00          | 	byte	0
363df                 | LR__5987
363df     43 61 6E 6E 
363e3     6F 74 20 64 
363e7     65 63 6C 61 
363eb     72 65 20 61 
363ef     6E 20 61 72 
363f3     72 61 79 3A 
363f7     20 74 68 65 
363fb     20 76 61 72 
363ff     69 61 62 6C 
36403     65 20 65 78 
36407     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
3640b     00          | 	byte	0
3640c                 | LR__5988
3640c     45 78 70 65 
36410     63 74 65 64 
36414     20 27 28 27 | 	byte	"Expected '('"
36418     00          | 	byte	0
36419                 | LR__5989
36419     45 78 70 65 
3641d     63 74 65 64 
36421     20 27 29 27 
36425     20 6F 72 20 
36429     27 2C 27    | 	byte	"Expected ')' or ','"
3642c     00          | 	byte	0
3642d                 | LR__5990
3642d     4E 6F 20 6D 
36431     6F 72 65 20 
36435     74 68 61 6E 
36439     20 33 20 64 
3643d     69 6D 65 6E 
36441     73 69 6F 6E 
36445     73 20 73 75 
36449     70 70 6F 72 
3644d     74 65 64    | 	byte	"No more than 3 dimensions supported"
36450     00          | 	byte	0
36451                 | LR__5991
36451     56 61 72 69 
36455     61 62 6C 65 
36459     20 6E 61 6D 
3645d     65 20 65 78 
36461     70 65 63 74 
36465     65 64       | 	byte	"Variable name expected"
36467     00          | 	byte	0
36468                 | LR__5992
36468     54 79 70 65 
3646c     20 6E 61 6D 
36470     65 20 65 78 
36474     70 65 63 74 
36478     65 64       | 	byte	"Type name expected"
3647a     00          | 	byte	0
3647b                 | LR__5993
3647b     54 79 70 65 
3647f     20 6E 6F 74 
36483     20 73 75 70 
36487     70 6F 72 74 
3648b     65 64 20 79 
3648f     65 74       | 	byte	"Type not supported yet"
36491     00          | 	byte	0
36492                 | LR__5994
36492     41 72 72 61 
36496     79 20 69 6E 
3649a     64 65 78 20 
3649e     6F 75 74 20 
364a2     6F 66 20 72 
364a6     61 6E 67 65 | 	byte	"Array index out of range"
364aa     00          | 	byte	0
364ab                 | LR__5995
364ab     42 61 64 20 
364af     74 79 70 65 
364b3     20 77 68 69 
364b7     6C 65 20 61 
364bb     73 73 69 67 
364bf     6E 69 6E 67 
364c3     20 74 6F 20 
364c7     61 72 72 61 
364cb     79          | 	byte	"Bad type while assigning to array"
364cc     00          | 	byte	0
364cd                 | LR__5996
364cd     54 6F 6F 20 
364d1     6D 61 6E 79 
364d5     20 76 61 72 
364d9     69 61 62 6C 
364dd     65 73       | 	byte	"Too many variables"
364df     00          | 	byte	0
364e0                 | LR__5997
364e0     27 54 68 65 
364e4     6E 27 20 65 
364e8     78 70 65 63 
364ec     74 65 64    | 	byte	"'Then' expected"
364ef     00          | 	byte	0
364f0                 | LR__5998
364f0     44 69 72 65 
364f4     63 74 6F 72 
364f8     79 20 64 6F 
364fc     65 73 6E 27 
36500     74 20 65 78 
36504     69 73 74    | 	byte	"Directory doesn't exist"
36507     00          | 	byte	0
36508                 | LR__5999
36508     55 6E 65 78 
3650c     70 65 63 74 
36510     65 64 20 65 
36514     6E 64 20 6F 
36518     66 20 6C 69 
3651c     6E 65       | 	byte	"Unexpected end of line"
3651e     00          | 	byte	0
3651f                 | LR__6000
3651f     4E 6F 20 6D 
36523     6F 72 65 20 
36527     64 61 74 61 | 	byte	"No more data"
3652b     00          | 	byte	0
3652c                 | LR__6001
3652c     45 72 72 6F 
36530     72 20       | 	byte	"Error "
36532     00          | 	byte	0
36533                 | LR__6002
36533     20 2D 20    | 	byte	" - "
36536     00          | 	byte	0
36537                 | LR__6003
36537     20 69 6E 20 
3653b     6C 69 6E 65 
3653f     20          | 	byte	" in line "
36540     00          | 	byte	0
36541                 | LR__6004
36541                 | 	byte	
36541     00          | 	byte	0
36542                 | LR__6005
36542     2F 73 64    | 	byte	"/sd"
36545     00          | 	byte	0
36546                 | LR__6006
36546     2F 73 64 2F 
3654a     62 61 73    | 	byte	"/sd/bas"
3654d     00          | 	byte	0
3654e                 | LR__6007
3654e     2F 73 64 2F 
36552     62 61 73    | 	byte	"/sd/bas"
36555     00          | 	byte	0
36556                 | LR__6008
36556     20 42 41 53 
3655a     49 43 20 62 
3655e     79 74 65 73 
36562     20 66 72 65 
36566     65          | 	byte	" BASIC bytes free"
36567     00          | 	byte	0
36568                 | LR__6009
36568     52 65 61 64 
3656c     79          | 	byte	"Ready"
3656d     00          | 	byte	0
3656e                 | LR__6010
3656e     6E 6F 6E 61 
36572     6D 65 2E 62 
36576     61 73       | 	byte	"noname.bas"
36578     00          | 	byte	0
36579                 | LR__6011
36579     2F 73 64 2F 
3657d     62 61 73 2F 
36581     61 75 74 6F 
36585     72 75 6E 2E 
36589     62 61 73    | 	byte	"/sd/bas/autorun.bas"
3658c     00          | 	byte	0
3658d                 | LR__6012
3658d     72 75 6E 20 
36591     61 75 74 6F 
36595     72 75 6E 2E 
36599     62 61 73    | 	byte	"run autorun.bas"
3659c     00          | 	byte	0
3659d                 | LR__6013
3659d                 | 	byte	
3659d     00          | 	byte	0
3659e     00 00       | 	alignl
365a0                 | _dat_
365a0     00 00 00 00 
365a4     00 00 00 00 
365a8     00 00 00 00 
365ac     00 00 00 00 | 	byte	$00[16]
365b0     61 41 17 0E 
365b4     62 42 00 00 
365b8     63 43 19 10 
365bc     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
365c0     65 45 18 0F 
365c4     66 46 00 00 
365c8     67 47 00 00 
365cc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
365d0     69 49 00 00 
365d4     6A 4A 00 00 
365d8     6B 4B 00 00 
365dc     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
365e0     6D 4D 00 00 
365e4     6E 4E 1A 11 
365e8     6F 4F 1E 15 
365ec     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
365f0     71 51 00 00 
365f4     72 52 00 00 
365f8     73 53 1B 12 
365fc     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
36600     75 55 00 00 
36604     76 56 00 00 
36608     77 57 00 00 
3660c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
36610     79 59 00 00 
36614     7A 5A 1D 14 
36618     31 21 04 00 
3661c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
36620     33 23 06 00 
36624     34 24 07 00 
36628     35 25 08 00 
3662c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
36630     37 26 0A 00 
36634     38 2A 0B 00 
36638     39 28 0C 00 
3663c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
36640     8D 8D 00 00 
36644     9B 9B 00 00 
36648     88 88 00 00 
3664c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
36650     20 20 00 00 
36654     2D 5F 00 00 
36658     3D 2B 00 00 
3665c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
36660     5D 7D 00 00 
36664     5C 7C 00 00 
36668     23 7E 00 00 
3666c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
36670     27 22 00 00 
36674     60 7E 03 00 
36678     2C 3C 00 00 
3667c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
36680     2F 3F 00 00 
36684     B9 B9 00 00 
36688     BA 00 00 00 
3668c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
36690     BC 00 00 00 
36694     BD 00 00 00 
36698     BE 00 00 00 
3669c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
366a0     C0 00 00 00 
366a4     C1 00 00 00 
366a8     C2 00 00 00 
366ac     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
366b0     C4 00 00 00 
366b4     C5 00 00 00 
366b8     C6 00 00 00 
366bc     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
366c0     C8 00 00 00 
366c4     C9 00 00 00 
366c8     CA 00 00 00 
366cc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
366d0     7F 7F 00 00 
366d4     CC 00 00 00 
366d8     CD 00 00 00 
366dc     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
366e0     CF 00 00 00 
366e4     D0 00 00 00 
366e8     D1 00 00 00 
366ec     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
366f0     2F 2F 00 00 
366f4     2A 2A 00 00 
366f8     2D 2D 00 00 
366fc     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
36700     8D 8D 00 00 
36704     31 31 00 00 
36708     32 32 00 00 
3670c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
36710     34 34 00 00 
36714     35 35 00 00 
36718     36 36 00 00 
3671c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
36720     38 38 00 00 
36724     39 39 00 00 
36728     30 30 00 00 
3672c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
36730     5C 7C 00 00 
36734     00 00 00 00 
36738     00 00 00 00 
3673c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
36740     00 00 00 00 
      ...             
36798     00 00 00 00 
3679c     00 00 00 00 | 	byte	$00[96]
367a0     2B 00 A6 F2 
367a4     24 A7 09 80 
367a8     5B 88 4D 89 
367ac     80 88 A5 88 | atari_spl file "atari.spl"
367b0     6D 88 B8 88 
367b4     80 88 CB 88 
367b8     92 88 A5 88 
367bc     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
367c0     A5 88 CA 88 
367c4     A6 88 DD 88 
367c8     B8 88 AB 89 
367cc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
367d0     C8 AD C6 F1 
367d4     91 06 B6 FF 
367d8     13 00 4A 00 
367dc     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
367e0     5D 00 5E 00 
367e4     5D 00 5E 00 
367e8     5E 00 5D 00 
367ec     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
367f0     38 00 83 00 
367f4     25 00 83 00 
367f8     C3 FE D1 04 
367fc     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
36800     48 88 38 85 
36804     41 8A CB 88 
36808     28 89 B8 88 
3680c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
36810     15 89 03 89 
36814     02 89 15 89 
36818     16 89 15 89 
3681c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
36820     15 89 3A 89 
36824     72 89 E3 89 
36828     52 83 AD 97 
3682c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
36830     0C 02 B6 FF 
36834     E1 00 A8 00 
36838     F3 00 A8 00 
3683c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
36840     CE 00 CD 00 
36844     CD 00 BA 00 
36848     E1 00 BB 00 
3684c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
36850     DF 00 C9 FF 
36854     E6 01 B6 06 
36858     EE DD 8D 98 
3685c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
36860     97 89 73 89 
36864     3B 89 60 89 
36868     60 89 60 89 
3686c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
36870     73 89 72 89 
36874     85 89 73 89 
36878     AA 89 60 89 
3687c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
36880     E8 8A 18 86 
36884     92 88 A5 C2 
36888     E0 00 C3 05 
3688c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
36890     F2 00 64 01 
36894     06 01 3E 01 
36898     2B 01 2B 01 
3689c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
368a0     2B 01 2A 01 
368a4     2B 01 2B 01 
368a8     2B 01 18 01 
368ac     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
368b0     39 07 61 F3 
368b4     C0 AF 37 85 
368b8     0F 88 8B 8A 
368bc     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
368c0     AB 89 D0 89 
368c4     AB 89 D0 89 
368c8     D0 89 CF 89 
368cc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
368d0     D0 89 F5 89 
368d4     BD 89 08 8A 
368d8     CF 89 E8 8A 
368dc     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
368e0     53 B3 0D F8 
368e4     F4 07 38 00 
368e8     63 01 63 01 
368ec     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
368f0     88 01 88 01 
368f4     76 01 88 01 
368f8     88 01 89 01 
368fc     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
36900     75 01 AE 01 
36904     76 01 88 01 
36908     4A 00 46 06 
3690c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
36910     08 8A 9A 86 
36914     33 8B 08 8A 
36918     2D 8A F5 89 
3691c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
36920     2D 8A 2D 8A 
36924     2E 8A 1B 8A 
36928     40 8A 2D 8A 
3692c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
36930     2E 8A 79 8A 
36934     66 8A C8 8B 
36938     72 82 2B 97 
3693c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
36940     1D 02 05 01 
36944     F8 01 C0 01 
36948     0B 02 C0 01 
3694c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
36950     F9 01 D3 01 
36954     F8 01 D3 01 
36958     F8 01 D2 01 
3695c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
36960     E6 01 2B 01 
36964     8E 02 5F 07 
36968     F7 E2 ED 9C 
3696c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
36970     E8 8A 78 8A 
36974     78 8A 65 8A 
36978     8B 8A 78 8A 
3697c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
36980     8B 8A 9D 8A 
36984     9D 8A 8B 8A 
36988     C2 8A 78 8A 
3698c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
36990     70 8C 18 86 
36994     8B 8A 23 C9 
36998     CB 03 C4 05 
3699c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
369a0     0B 02 7B 02 
369a4     1E 02 55 02 
369a8     30 02 43 02 
369ac     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
369b0     43 02 44 02 
369b4     43 02 30 02 
369b8     68 02 31 02 
369bc     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
369c0     07 08 3F F7 
369c4     73 B2 13 85 
369c8     15 89 ED 8B 
369cc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
369d0     B0 8A FB 8A 
369d4     D5 8A FA 8A 
369d8     E8 8A FB 8A 
369dc     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
369e0     E8 8A 21 8B 
369e4     E7 8A 33 8B 
369e8     E8 8A 26 8C 
369ec     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
369f0     8D B0 27 F6 
369f4     9C 08 AD 01 
369f8     7B 02 8D 02 
369fc     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
36a00     A1 02 A0 02 
36a04     A1 02 A0 02 
36a08     A0 02 A0 02 
36a0c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
36a10     7B 02 D8 02 
36a14     7B 02 C6 02 
36a18     3E 01 C3 05 
36a1c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
36a20     00 8C 2A 86 
36a24     E0 8C FA 8A 
36a28     6A 8B FB 8A 
36a2c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
36a30     45 8B 45 8B 
36a34     45 8B 6B 8B 
36a38     46 8B 59 8B 
36a3c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
36a40     6B 8B 6B 8B 
36a44     6B 8B 6B 8B 
36a48     7D 8B 7D 8B 
36a4c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
36a50     90 8B 91 8B 
36a54     90 8B 90 8B 
36a58     A3 8B A3 8B 
36a5c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
36a60     B5 8B B6 8B 
36a64     B5 8B B5 8B 
36a68     B6 8B C8 8B 
36a6c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
36a70     C8 8B DA 8B 
36a74     DB 8B DB 8B 
36a78     DB 8B DC 8B 
36a7c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
36a80     EE 8B EE 8B 
36a84     00 8C 01 8C 
36a88     00 8C 01 8C 
36a8c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
36a90     12 8C 13 8C 
36a94     13 8C 26 8C 
36a98     26 8C 26 8C 
36a9c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
36aa0     38 8C 38 8C 
36aa4     38 8C 38 8C 
36aa8     4B 8C 4B 8C 
36aac     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
36ab0     5E 8C 5E 8C 
36ab4     5E 8C 5E 8C 
36ab8     70 8C 70 8C 
36abc     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
36ac0     70 8C 83 8C 
36ac4     83 8C 83 8C 
36ac8     83 8C 96 8C 
36acc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
36ad0     95 8C A9 8C 
36ad4     A9 8C A8 8C 
36ad8     A8 8C A8 8C 
36adc     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
36ae0     BB 8C BB 8C 
36ae4     BB 8C CE 8C 
36ae8     CE 8C CE 8C 
36aec     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
36af0     E0 8C E1 8C 
36af4     E1 8C E0 8C 
36af8     F4 8C F2 8C 
36afc     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
36b00     05 8D 05 8D 
36b04     06 8D 06 8D 
36b08     19 8D 19 8D 
36b0c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
36b10     18 8D 2B 8D 
36b14     2B 8D 2B 8D 
36b18     2A 8D 3E 8D 
36b1c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
36b20     3E 8D 51 8D 
36b24     50 8D 50 8D 
36b28     50 8D 51 8D 
36b2c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
36b30     63 8D 64 8D 
36b34     76 8D 75 8D 
36b38     75 8D 76 8D 
36b3c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
36b40     88 8D 88 8D 
36b44     89 8D 9B 8D 
36b48     9A 8D 9B 8D 
36b4c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
36b50     AD 8D AE 8D 
36b54     AD 8D AE 8D 
36b58     C1 8D C1 8D 
36b5c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
36b60     D3 8D D3 8D 
36b64     D3 8D D3 8D 
36b68     D3 8D E6 8D 
36b6c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
36b70     E6 8D E6 8D 
36b74     F9 8D F9 8D 
36b78     F9 8D F8 8D 
36b7c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
36b80     0B 8E 0B 8E 
36b84     1D 8E 1D 8E 
36b88     1E 8E 1E 8E 
36b8c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
36b90     31 8E 31 8E 
36b94     31 8E 42 8E 
36b98     43 8E 43 8E 
36b9c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
36ba0     56 8E 56 8E 
36ba4     55 8E 56 8E 
36ba8     68 8E 69 8E 
36bac     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
36bb0     69 8E 7B 8E 
36bb4     7C 8E 7B 8E 
36bb8     7B 8E 8D 8E 
36bbc     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
36bc0     8D 8E A1 8E 
36bc4     A0 8E A1 8E 
36bc8     A1 8E A0 8E 
36bcc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
36bd0     B3 8E B3 8E 
36bd4     C6 8E C5 8E 
36bd8     C6 8E C6 8E 
36bdc     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
36be0     D8 8E D9 8E 
36be4     D8 8E EC 8E 
36be8     EB 8E EC 8E 
36bec     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
36bf0     FE 8E FE 8E 
36bf4     FE 8E FE 8E 
36bf8     10 8F 10 8F 
36bfc     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
36c00     11 8F 23 8F 
36c04     24 8F 23 8F 
36c08     24 8F 37 8F 
36c0c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
36c10     36 8F 36 8F 
36c14     48 8F 49 8F 
36c18     49 8F 49 8F 
36c1c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
36c20     5B 8F 5C 8F 
36c24     5B 8F 6E 8F 
36c28     6E 8F 6E 8F 
36c2c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
36c30     81 8F 81 8F 
36c34     81 8F 81 8F 
36c38     93 8F 93 8F 
36c3c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
36c40     93 8F A6 8F 
36c44     A6 8F A6 8F 
36c48     A6 8F B9 8F 
36c4c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
36c50     B9 8F B9 8F 
36c54     CC 8F CB 8F 
36c58     CB 8F CC 8F 
36c5c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
36c60     DF 8F DE 8F 
36c64     DE 8F F1 8F 
36c68     F1 8F F1 8F 
36c6c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
36c70     03 90 04 90 
36c74     04 90 04 90 
36c78     16 90 17 90 
36c7c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
36c80     29 90 28 90 
36c84     29 90 28 90 
36c88     29 90 3C 90 
36c8c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
36c90     3C 90 4F 90 
36c94     4E 90 4E 90 
36c98     4E 90 4E 90 
36c9c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
36ca0     61 90 61 90 
36ca4     73 90 74 90 
36ca8     74 90 74 90 
36cac     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
36cb0     87 90 86 90 
36cb4     87 90 86 90 
36cb8     99 90 99 90 
36cbc     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
36cc0     AB 90 AB 90 
36cc4     AC 90 AB 90 
36cc8     AB 90 BF 90 
36ccc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
36cd0     BE 90 D1 90 
36cd4     D0 90 D1 90 
36cd8     D1 90 D1 90 
36cdc     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
36ce0     E3 90 E4 90 
36ce4     F6 90 F6 90 
36ce8     F6 90 F6 90 
36cec     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
36cf0     09 91 0A 91 
36cf4     0A 91 1C 91 
36cf8     1C 91 1C 91 
36cfc     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
36d00     2F 91 2E 91 
36d04     2F 91 2F 91 
36d08     2E 91 41 91 
36d0c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
36d10     41 91 53 91 
36d14     54 91 54 91 
36d18     53 91 54 91 
36d1c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
36d20     67 91 67 91 
36d24     79 91 7A 91 
36d28     79 91 78 91 
36d2c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
36d30     8C 91 8B 91 
36d34     8C 91 8C 91 
36d38     9E 91 9E 91 
36d3c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
36d40     B1 91 B1 91 
36d44     B2 91 B1 91 
36d48     B1 91 C4 91 
36d4c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
36d50     C4 91 D6 91 
36d54     D7 91 D7 91 
36d58     D7 91 D6 91 
36d5c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
36d60     EA 91 EA 91 
36d64     EA 91 FC 91 
36d68     FC 91 FB 91 
36d6c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
36d70     0E 92 0F 92 
36d74     0F 92 0E 92 
36d78     21 92 21 92 
36d7c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
36d80     21 92 34 92 
36d84     33 92 34 92 
36d88     34 92 47 92 
36d8c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
36d90     46 92 47 92 
36d94     59 92 59 92 
36d98     59 92 59 92 
36d9c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
36da0     6C 92 6C 92 
36da4     6B 92 7E 92 
36da8     7E 92 7E 92 
36dac     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
36db0     92 92 91 92 
36db4     91 92 90 92 
36db8     91 92 A4 92 
36dbc     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
36dc0     A3 92 B6 92 
36dc4     B6 92 B7 92 
36dc8     B7 92 B6 92 
36dcc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
36dd0     CA 92 C9 92 
36dd4     CA 92 DC 92 
36dd8     DC 92 DC 92 
36ddc     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
36de0     EF 92 EF 92 
36de4     EF 92 EF 92 
36de8     01 93 01 93 
36dec     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
36df0     15 93 14 93 
36df4     14 93 14 93 
36df8     14 93 27 93 
36dfc     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
36e00     27 93 39 93 
36e04     3A 93 39 93 
36e08     39 93 39 93 
36e0c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
36e10     4B 93 4C 93 
36e14     5F 93 5F 93 
36e18     5F 93 5E 93 
36e1c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
36e20     5F 93 84 93 
36e24     4C 93 96 93 
36e28     5F 93 AE 94 
36e2c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
36e30     7B C1 00 00 
36e34     00 00 00 00 
36e38     00 00 00 00 
36e3c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e40     00 00 00 00 | 	byte	$00, $00, $00, $00
36e44     7A D7 00 80 
36e48     87 8A 48 8F 
36e4c     EC 8C 76 8D 
36e50     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
36e54     3C 8D 82 8D 
36e58     42 8D 88 8D 
36e5c     8C 8D 8E 8D 
36e60     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
36e64     97 8D DE 8D 
36e68     E1 8D F1 8E 
36e6c     D8 8C A3 83 
36e70     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
36e74     65 71 C9 65 
36e78     FC 64 C4 65 
36e7c     C1 65 BF 65 
36e80     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
36e84     B6 65 B4 65 
36e88     B2 65 AE 65 
36e8c     AC 65 ED 65 
36e90     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
36e94     5E 65 25 66 
36e98     FA 62 23 6B 
36e9c     B5 6C 61 0A 
36ea0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
36ea4     5D 90 BE 8D 
36ea8     47 8E C3 8D 
36eac     09 8E C9 8D 
36eb0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
36eb4     15 8E 19 8E 
36eb8     1B 8E 62 8E 
36ebc     64 8E 68 8E 
36ec0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
36ec4     B5 8E 4C 90 
36ec8     FA 84 3C 9D 
36ecc     98 13 79 6D 
36ed0     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
36ed4     D9 66 50 66 
36ed8     D4 66 4B 66 
36edc     8C 66 46 66 
36ee0     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
36ee4     81 66 3A 66 
36ee8     7C 66 36 66 
36eec     76 66 30 66 
36ef0     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
36ef4     6B 66 88 72 
36ef8     BF 37 E7 B7 
36efc     75 83 8B 8E 
36f00     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
36f04     94 8E 96 8E 
36f08     DD 8E 9C 8E 
36f0c     E2 8E A2 8E 
36f10     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
36f14     EE 8E AE 8E 
36f18     38 8F B5 8E 
36f1c     3F 8F FD 8E 
36f20     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
36f24     A5 87 1E E3 
36f28     6D 5D FA 71 
36f2c     41 64 25 67 
36f30     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
36f34     D9 66 1A 67 
36f38     18 67 15 67 
36f3c     12 67 0F 67 
36f40     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
36f44     07 67 C0 66 
36f48     01 67 BC 66 
36f4c     B8 66 DE 64 
36f50     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
36f54     43 E5 1F 8B 
36f58     14 8A F1 90 
36f5c     1C 8F 63 8F 
36f60     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
36f64     29 8F 6E 8F 
36f68     72 8F 75 8F 
36f6c     34 8F BE 8F 
36f70     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
36f74     84 8F 87 8F 
36f78     CC 8F 56 90 
36f7c     67 91 49 80 
36f80     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
36f84     46 77 A6 66 
36f88     E8 66 B0 67 
36f8c     AD 67 ED 67 
36f90     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
36f94     A2 67 E3 67 
36f98     9D 67 9A 67 
36f9c     98 67 94 67 
36fa0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
36fa4     49 67 CD 67 
36fa8     28 65 5F 6E 
36fac     82 67 3A 01 
36fb0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
36fb4     C2 91 A9 8F 
36fb8     EF 8F AE 8F 
36fbc     F4 8F B5 8F 
36fc0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
36fc4     01 90 03 90 
36fc8     07 90 09 90 
36fcc     0C 90 53 90 
36fd0     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
36fd4     18 90 44 93 
36fd8     85 84 D6 9D 
36fdc     87 1F 2F 75 
36fe0     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
36fe4     C4 68 F6 67 
36fe8     BE 68 F1 67 
36fec     76 68 2E 68 
36ff0     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
36ff4     27 68 24 68 
36ff8     64 68 1E 68 
36ffc     5F 68 19 68 
37000     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
37004     DC 68 56 72 
37008     7E 36 C2 B8 
3700c     D7 84 73 90 
37010     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
37014     7B 90 7F 90 
37018     82 90 84 90 
3701c     CB 90 8B 90 
37020     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
37024     D7 90 96 90 
37028     20 91 59 90 
3702c     25 91 A2 90 
37030     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
37034     D0 89 40 EE 
37038     12 64 C4 71 
3703c     29 66 0C 69 
37040     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
37044     C0 68 02 69 
37048     FE 68 FB 68 
3704c     F9 68 F6 68 
37050     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
37054     EE 68 A8 68 
37058     2C 69 5F 68 
3705c     E2 68 81 66 
37060     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
37064     1E EB A6 8A 
37068     73 8B 5E 93 
3706c     7B 90 48 91 
37070     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
37074     0D 91 11 91 
37078     14 91 16 91 
3707c     5C 91 1C 91 
37080     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
37084     68 91 AF 91 
37088     2A 91 B5 91 
3708c     75 91 1A 94 
37090     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
37094     70 0E CB 6C 
37098     5D 6E C4 67 
3709c     99 69 54 69 
370a0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
370a4     D2 69 49 69 
370a8     89 69 86 69 
370ac     40 69 C4 69 
370b0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
370b4     35 69 76 69 
370b8     58 67 EB 6D 
370bc     E9 6D 89 0F 
370c0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
370c4     33 94 94 91 
370c8     D9 91 56 91 
370cc     E0 91 9F 91 
370d0     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
370d4     EC 91 EE 91 
370d8     F1 91 F4 91 
370dc     F7 91 3D 92 
370e0     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
370e4     46 92 21 94 
370e8     11 89 A4 9D 
370ec     FD 0E 8F 6C 
370f0     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
370f4     28 6A E1 69 
370f8     65 6A 1F 6A 
370fc     5F 6A 1A 6A 
37100     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
37104     54 6A 0F 6A 
37108     4F 6A 09 6A 
3710c     06 6A 03 6A 
37110     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
37114     23 68 69 77 
37118     3A 4D 38 CA 
3711c     38 86 4E 91 
37120     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
37124     64 92 24 92 
37128     6A 92 2A 92 
3712c     70 92 30 92 
37130     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
37134     7B 92 7E 92 
37138     C5 92 84 92 
3713c     CB 92 8A 92 
37140     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
37144     4D 8D F9 E2 
37148     97 59 FE 74 
3714c     DB 68 6D 6A 
37150     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
37154     A8 6A A5 6A 
37158     A3 6A 9F 6A 
3715c     9D 6A 9B 6A 
37160     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
37164     D6 6A 8F 6A 
37168     CF 6A 46 6A 
3716c     CA 6A E1 67 
37170     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
37174     D3 F7 15 92 
37178     90 8C BF 94 
3717c     A6 92 EB 92 
37180     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
37184     B1 92 F7 92 
37188     FA 92 FD 92 
3718c     00 93 02 93 
37190     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
37194     4F 93 52 93 
37198     54 93 22 94 
3719c     5A 93 8F 88 
371a0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
371a4     1C 77 07 6C 
371a8     E8 69 7A 6B 
371ac     34 6B 75 6B 
371b0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
371b4     29 6B 26 6B 
371b8     24 6B 21 6B 
371bc     1D 6B 5E 6B 
371c0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
371c4     12 6B 52 6B 
371c8     34 69 34 6E 
371cc     BA 73 A4 24 
371d0     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
371d4     7A 94 B3 93 
371d8     72 93 31 93 
371dc     78 93 7A 93 
371e0     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
371e4     83 93 86 93 
371e8     89 93 D0 93 
371ec     D2 93 D5 93 
371f0     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
371f4     DD 93 40 96 
371f8     30 8B 99 9C 
371fc     52 10 94 71 
37200     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
37204     46 6C 79 6B 
37208     40 6C B7 6B 
3720c     F7 6B B1 6B 
37210     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
37214     EC 6B A5 6B 
37218     A2 6B 9F 6B 
3721c     9D 6B 9A 6B 
37220     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
37224     C8 6A E4 76 
37228     20 4B F9 CE 
3722c     2E 8A 1A 92 
37230     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
37234     FB 93 BA 93 
37238     01 94 03 94 
3723c     4A 94 09 94 
37240     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
37244     55 94 14 94 
37248     9E 94 1A 94 
3724c     61 94 20 94 
37250     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
37254     3E 87 E5 CD 
37258     5F 50 6C 78 
3725c     B5 6A 04 6C 
37260     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
37264     83 6C 7F 6C 
37268     7C 6C 36 6C 
3726c     76 6C 74 6C 
37270     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
37274     6B 6C 25 6C 
37278     66 6C 1F 6C 
3727c     1D 6C 41 6A 
37280     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
37284     BA FA FC 94 
37288     5B 8D 97 96 
3728c     3B 94 C5 94 
37290     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
37294     89 94 8C 94 
37298     8F 94 92 94 
3729c     94 94 DB 94 
372a0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
372a4     E4 94 E7 94 
372a8     2D 95 74 95 
372ac     C8 96 15 89 
372b0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
372b4     CB 75 31 6F 
372b8     7E 6B 10 6D 
372bc     C9 6C 0A 6D 
372c0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
372c4     BD 6C FF 6C 
372c8     FB 6C F9 6C 
372cc     B2 6C F3 6C 
372d0     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
372d4     A7 6C E8 6C 
372d8     0D 6B 85 6F 
372dc     C7 74 10 28 
372e0     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
372e4     96 96 47 95 
372e8     06 95 0A 95 
372ec     0C 95 0F 95 
372f0     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
372f4     17 95 5E 95 
372f8     61 95 63 95 
372fc     22 95 AC 95 
37300     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
37304     72 95 17 98 
37308     59 8E 01 96 
3730c     CF FC 5A 68 
37310     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
37314     96 6D 50 6D 
37318     D5 6D 4A 6D 
3731c     8C 6D 89 6D 
37320     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
37324     80 6D 3A 6D 
37328     7A 6D 77 6D 
3732c     75 6D 71 6D 
37330     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
37334     18 6C BC 78 
37338     9A 4F 7E CF 
3733c     1F 89 F1 93 
37340     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
37344     D2 95 4E 95 
37348     D7 95 53 95 
3734c     DD 95 E0 95 
37350     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
37354     A5 95 EB 95 
37358     EE 95 F0 95 
3735c     37 96 B3 95 
37360     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
37364     1A 98 D5 8D 
37368     C5 9F CD 0F 
3736c     0F 71 F3 73 
37370     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
37374     D9 6D 5E 6E 
37378     D3 6D 58 6E 
3737c     12 6E 0F 6E 
37380     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
37384     49 6E BF 6D 
37388     87 6E 76 6D 
3738c     81 6E 11 6B 
37390     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
37394     3F 09 44 95 
37398     E5 8D 3F 99 
3739c     D4 95 A2 96 
373a0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
373a4     23 96 69 96 
373a8     6B 96 6E 96 
373ac     71 96 74 96 
373b0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
373b4     BF 96 3C 96 
373b8     C6 96 C8 96 
373bc     A3 98 51 8D 
373c0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
373c4     CF 75 29 73 
373c8     90 6C EC 6E 
373cc     62 6E E7 6E 
373d0     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
373d4     9A 6E 98 6E 
373d8     95 6E 91 6E 
373dc     8E 6E CF 6E 
373e0     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
373e4     40 6E C3 6E 
373e8     E8 6C 45 6F 
373ec     A5 7B C9 35 
373f0     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
373f4     2D 98 23 97 
373f8     E1 96 A0 96 
373fc     A4 96 EA 96 
37400     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
37404     AF 96 F4 96 
37408     F8 96 3E 97 
3740c     FD 96 43 97 
37410     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
37414     08 97 6B 99 
37418     D6 92 88 91 
3741c     D8 EE 84 66 
37420     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
37424     2E 6F E7 6E 
37428     6C 6F 24 6F 
3742c     21 6F 1F 6F 
37430     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
37434     17 6F 13 6F 
37438     54 6F 0E 6F 
3743c     0B 6F 4B 6F 
37440     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
37444     27 6D 1C 7B 
37448     19 59 9F DB 
3744c     66 8E BC 94 
37450     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
37454     67 97 26 97 
37458     6D 97 2B 97 
3745c     72 97 32 97 
37460     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
37464     C1 97 7F 97 
37468     C6 97 85 97 
3746c     CB 97 CE 97 
37470     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
37474     EC 8A C4 C6 
37478     68 4C F4 7D 
3747c     63 6E E8 6E 
37480     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
37484     ED 6F A7 6F 
37488     E7 6F A0 6F 
3748c     E1 6F 9B 6F 
37490     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
37494     D5 6F 8F 6F 
37498     CE 6F 45 6F 
3749c     86 6F 68 6D 
374a0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
374a4     C0 13 AD A2 
374a8     A7 8E 79 99 
374ac     E6 97 E8 97 
374b0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
374b4     F1 97 F3 97 
374b8     F6 97 F9 97 
374bc     FB 97 FE 97 
374c0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
374c4     4A 98 0A 98 
374c8     93 98 0F 98 
374cc     7F 9B BF 8C 
374d0     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
374d4     91 7B 62 73 
374d8     1A 6E B9 70 
374dc     EB 6F B3 70 
374e0     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
374e4     25 70 20 70 
374e8     1E 70 1B 70 
374ec     18 70 15 70 
374f0     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
374f4     0D 70 09 70 
374f8     07 70 03 70 
374fc     01 70 FD 6F 
37500     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
37504     F6 6F F2 6F 
37508     EF 6F EC 6F 
3750c     2C 70 E6 6F 
37510     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
37514     DD 6F 97 6F 
37518     D7 6F 84 6E 
3751c     8F 6F 3F 7D 
37520     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
37522     FF FF FF FF 
37526     FF FF       | atarist_spl file "atarist.spl" '512
37528     00 00 00 00 
3752c     00 00 00 00 
37530     00 00       | 	byte	$00[10]
37532     17 7F F2 7F 
37536     B2 7F 72 7F 
3753a     33 7F F4 7E 
3753e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
37542     36 7E F5 7D 
37546     E9 51 F2 0D 
3754a     8E 00 F3 FD 
3754e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
37552     57 FD 58 FD 
37556     5B FD 5C FD 
3755a     5C FD 60 7D 
3755e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
37562     D6 7C 98 7C 
37566     59 7C 1A 7C 
3756a     DC 7B 9E 7B 
3756e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
37572     F3 05 00 FD 
37576     41 FB EA FA 
3757a     D9 FA DB FA 
3757e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
37582     E4 FA 9B 36 
37586     F8 7A C0 7A 
3758a     84 7A 45 7A 
3758e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
37592     8E 79 51 79 
37596     15 79 D7 78 
3759a     3C 1F EB FF 
3759e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
375a2     6D F8 65 F8 
375a6     68 F8 6D F8 
375aa     70 F8 74 F8 
375ae     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
375b2     AB 60 79 60 
375b6     4B 60 1A 60 
375ba     E9 5F B9 5F 
375be     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
375c2     FB 59 B2 0B 
375c6     92 FA 3A F7 
375ca     96 F6 79 F6 
375ce     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
375d2     82 F6 86 F6 
375d6     8C F6 DB 5D 
375da     F1 5E C1 5E 
375de     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
375e2     34 5E 04 5E 
375e6     D6 5D A6 5D 
375ea     78 5D D4 3E 
375ee     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
375f2     27 F5 BA F4 
375f6     AB F4 AD F4 
375fa     B2 F4 B8 F4 
375fe     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
37602     26 5D 2B 5D 
37606     FC 5C CD 5C 
3760a     9F 5C 70 5C 
3760e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
37612     E5 5B B8 5B 
37616     DB 24 A7 FC 
3761a     D1 F4 4D F3 
3761e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
37622     04 F3 0B F3 
37626     11 F3 16 F3 
3762a     DE 18 98 5B 
3762e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
37632     4E 4A 29 48 
37636     A0 47 6A 47 
3763a     43 47 20 47 
3763e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
37642     E2 F6 98 F2 
37646     C5 F1 A3 F1 
3764a     A3 F1 A8 F1 
3764e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
37652     BF F1 00 3D 
37656     EF 46 CD 46 
3765a     AA 46 86 46 
3765e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
37662     1C 46 F9 45 
37666     D7 45 EE 43 
3766a     DE 02 E8 F3 
3766e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
37672     61 F0 65 F0 
37676     6D F0 74 F0 
3767a     7C F0 84 F0 
3767e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
37682     8E 45 6D 45 
37686     49 45 27 45 
3768a     05 45 E1 44 
3768e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
37692     F1 2F A9 FB 
37696     8B F1 9B EF 
3769a     40 EF 36 EF 
3769e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
376a2     4D EF 56 EF 
376a6     5E EF 7B 44 
376aa     8C 44 69 44 
376ae     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
376b2     03 44 E1 43 
376b6     C0 43 F5 37 
376ba     69 33 0F 11 
376be     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
376c2     66 EE 37 EE 
376c6     38 EE 40 EE 
376ca     48 EE 51 EE 
376ce     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
376d2     7D 32 6A 32 
376d6     51 32 37 32 
376da     1F 32 05 32 
376de     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
376e2     B9 31 A1 31 
376e6     F1 04 F4 F1 
376ea     50 EE A0 ED 
376ee     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
376f2     93 ED 9A ED 
376f6     A4 ED AD ED 
376fa     F4 27 C1 31 
376fe     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
37702     78 31 5F 31 
37706     46 31 2E 31 
3770a     15 31 FC 30 
3770e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
37712     C4 EF 4A ED 
37716     DC EC CB EC 
3771a     D2 EC DA EC 
3771e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
37722     F9 EC 64 2F 
37726     0A 31 F1 30 
3772a     D9 30 C0 30 
3772e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
37732     78 30 5F 30 
37736     46 30 38 23 
3773a     A6 F6 19 EE 
3773e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
37742     20 EC 28 EC 
37746     32 EC 3C EC 
3774a     47 EC 51 EC 
3774e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
37752     A3 22 93 22 
37756     7F 22 6E 22 
3775a     5D 22 4C 22 
3775e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
37762     77 09 76 F1 
37766     CC EC F0 EB 
3776a     CD EB CE EB 
3776e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
37772     ED EB F5 EB 
37776     3E F6 6B 22 
3777a     5F 22 4E 22 
3777e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
37782     1B 22 0B 22 
37786     FA 21 E9 21 
3778a     D8 21 4D FF 
3778e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
37792     92 EB 7B EB 
37796     82 EB 8C EB 
3779a     97 EB A1 EB 
3779e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
377a2     15 22 04 22 
377a6     F3 21 E3 21 
377aa     D2 21 C0 21 
377ae     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
377b2     8E 21 7D 21 
377b6     9A F8 A4 ED 
377ba     8E EB 2F EB 
377be     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
377c2     37 EB 42 EB 
377c6     4C EB 57 EB 
377ca     B2 17 22 19 
377ce     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
377d2     FD 18 EF 18 
377d6     E3 18 D6 18 
377da     CA 18 BD 18 
377de     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
377e2     60 EC 35 EB 
377e6     01 EB 01 EB 
377ea     0C EB 16 EB 
377ee     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
377f2     34 EB D0 18 
377f6     00 19 F4 18 
377fa     E8 18 DA 18 
377fe     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
37802     B6 18 A9 18 
37806     9D 18 91 05 
3780a     F0 EF CA EB 
3780e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
37812     E8 EA F2 EA 
37816     FE EA 07 EB 
3781a     12 EB C2 EF 
3781e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
37822     D9 18 CD 18 
37826     C0 18 B3 18 
3782a     A7 18 9B 18 
3782e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
37832     B8 FC 30 EE 
37836     61 EB DC EA 
3783a     CD EA D2 EA 
3783e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
37842     F3 EA FE EA 
37846     D2 09 D1 18 
3784a     C3 18 17 18 
3784e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
37852     66 11 52 11 
37856     49 11 41 11 
3785a     38 11 E0 F4 
3785e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
37862     C9 EA C5 EA 
37866     CF EA DB EA 
3786a     E6 EA EF EA 
3786e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
37872     89 11 80 11 
37876     78 11 6E 11 
3787a     67 11 5D 11 
3787e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
37882     43 11 32 0D 
37886     9C F1 07 EC 
3788a     F8 EA CD EA 
3788e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
37892     E4 EA ED EA 
37896     F8 EA 02 EB 
3789a     55 11 91 11 
3789e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
378a2     75 11 6E 11 
378a6     64 11 5E 11 
378aa     54 11 4A 11 
378ae     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
378b2     A8 EB F1 EA 
378b6     D9 EA DC EA 
378ba     E8 EA F1 EA 
378be     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
378c2     A6 EB 9E 11 
378c6     A0 11 96 11 
378ca     8D 11 85 11 
378ce     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
378d2     6A 11 CA 0D 
378d6     36 0B 57 F8 
378da     6C ED 57 EB 
378de     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
378e2     F4 EA FF EA 
378e6     09 EB 15 EB 
378ea     1E EB 1A FD 
378ee     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
378f2     ED 0A E8 0A 
378f6     E2 0A DC 0A 
378fa     D6 0A D1 0A 
378fe     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
37902     F8 F3 BC EC 
37906     57 EB 1E EB 
3790a     18 EB 24 EB 
3790e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
37912     42 EB 4D EB 
37916     08 09 20 0B 
3791a     1A 0B 14 0B 
3791e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
37922     04 0B FE 0A 
37926     F9 0A F2 0A 
3792a     84 08 3A F1 
3792e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
37932     42 EB 42 EB 
37936     4E EB 57 EB 
3793a     62 EB 6B EB 
3793e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
37942     48 0B 43 0B 
37946     3C 0B 36 0B 
3794a     31 0B 2C 0B 
3794e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
37952     1B 0B 5C 00 
37956     6A EF 1B EC 
3795a     81 EB 6A EB 
3795e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
37962     85 EB 8E EB 
37966     99 EB A3 EB 
3796a     DD 05 E5 05 
3796e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
37972     DB 05 D8 05 
37976     D5 05 D1 05 
3797a     D0 05 CB 05 
3797e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
37982     0C EC BB EB 
37986     B3 EB BB EB 
3798a     C5 EB D0 EB 
3798e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
37992     E4 F7 2C 06 
37996     28 06 24 06 
3799a     22 06 1F 06 
3799e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
379a2     16 06 14 06 
379a6     0F 06 D0 F3 
379aa     65 ED 2D EC 
379ae     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
379b2     01 EC 0A EC 
379b6     14 EC 1E EC 
379ba     29 EC FB 03 
379be     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
379c2     63 06 60 06 
379c6     5E 06 59 06 
379ca     58 06 54 06 
379ce     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
379d2     69 F1 21 ED 
379d6     55 EC 33 EC 
379da     36 EC 40 EC 
379de     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
379e2     5C EC 68 EC 
379e6     92 02 D9 02 
379ea     D7 02 D7 02 
379ee     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
379f2     D1 02 D1 02 
379f6     CE 02 CD 02 
379fa     5D FC 80 EF 
379fe     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
37a02     83 EC 8A EC 
37a06     93 EC 9C EC 
37a0a     A5 EC B1 EC 
37a0e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
37a12     2B 03 2A 03 
37a16     29 03 26 03 
37a1a     25 03 24 03 
37a1e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
37a22     1F 03 70 F7 
37a26     D0 EE 27 ED 
37a2a     DB EC D4 EC 
37a2e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
37a32     F0 EC FA EC 
37a36     02 ED F9 F4 
37a3a     7B 03 7C 03 
37a3e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
37a42     75 03 73 03 
37a46     72 03 70 03 
37a4a     6D 03 6C 03 
37a4e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
37a52     54 ED 22 ED 
37a56     22 ED 2C ED 
37a5a     35 ED 3F ED 
37a5e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
37a62     14 01 C3 03 
37a66     C1 03 C0 03 
37a6a     5F 01 A5 00 
37a6e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
37a72     7B 00 7C 00 
37a76     20 00 85 F1 
37a7a     2A EE 89 ED 
37a7e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
37a82     80 ED 87 ED 
37a86     90 ED 9A ED 
37a8a     A3 ED 73 00 
37a8e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
37a92     D0 00 D0 00 
37a96     D0 00 D0 00 
37a9a     D0 00 CF 00 
37a9e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
37aa2     80 F0 3D EE 
37aa6     D5 ED C7 ED 
37aaa     CD ED D6 ED 
37aae     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
37ab2     F2 ED FA ED 
37ab6     1D 01 29 01 
37aba     27 01 27 01 
37abe     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
37ac2     25 01 26 01 
37ac6     26 01 23 01 
37aca     D0 F7 EC EF 
37ace     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
37ad2     1C EE 24 EE 
37ad6     2D EE 37 EE 
37ada     40 EE 47 EE 
37ade     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
37ae2     7D 01 7B 01 
37ae6     7A 01 7A 01 
37aea     79 01 78 01 
37aee     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
37af2     84 FE DE F3 
37af6     6C EF 93 EE 
37afa     72 EE 72 EE 
37afe     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
37b02     8B EE 95 EE 
37b06     9E EE 15 FC 
37b0a     67 FE 67 FE 
37b0e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
37b12     6B FE 6B FE 
37b16     6D FE 6D FE 
37b1a     6D FE 6F FE 
37b1e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
37b22     DF EE CC EE 
37b26     CF EE D9 EE 
37b2a     E1 EE EA EE 
37b2e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
37b32     5A FE C4 FE 
37b36     C3 FE C5 FE 
37b3a     C6 FE C6 FE 
37b3e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
37b42     C8 FE C7 FE 
37b46     DA FB 85 F1 
37b4a     8D EF 31 EF 
37b4e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
37b52     34 EF 3E EF 
37b56     46 EF 4F EF 
37b5a     57 EF 0D FF 
37b5e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
37b62     1F FF 1F FF 
37b66     21 FF 21 FF 
37b6a     21 FF 21 FF 
37b6e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
37b72     15 F1 BE EF 
37b76     84 EF 7E EF 
37b7a     88 EF 8F EF 
37b7e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
37b82     A9 EF 06 F2 
37b86     A6 FC AB FC 
37b8a     AD FC AE FC 
37b8e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
37b92     B2 FC B4 FC 
37b96     B6 FC B7 FC 
37b9a     8B F4 BD F0 
37b9e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
37ba2     E4 EF EE EF 
37ba6     F6 EF FD EF 
37baa     04 F0 0E F0 
37bae     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
37bb2     0B FD 0D FD 
37bb6     0F FD 11 FD 
37bba     11 FD 13 FD 
37bbe     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
37bc2     17 FD 64 F3 
37bc6     CD F0 52 F0 
37bca     41 F0 45 F0 
37bce     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
37bd2     5B F0 64 F0 
37bd6     6D F0 FB FC 
37bda     65 FD 68 FD 
37bde     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
37be2     6C FD 6D FD 
37be6     6F FD 70 FD 
37bea     72 FD B3 FB 
37bee     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
37bf2     A4 F0 99 F0 
37bf6     A0 F0 A8 F0 
37bfa     AE F0 B9 F0 
37bfe     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
37c02     CB FB DD FB 
37c06     DE FB E0 FB 
37c0a     E3 FB E3 FB 
37c0e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
37c12     E9 FB EC FB 
37c16     62 F7 27 F2 
37c1a     2A F1 FF F0 
37c1e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
37c22     0C F1 13 F1 
37c26     1B F1 23 F1 
37c2a     33 F2 3C FC 
37c2e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
37c32     42 FC 45 FC 
37c36     47 FC 48 FC 
37c3a     4A FC 4C FC 
37c3e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
37c42     20 F2 77 F1 
37c46     5C F1 5F F1 
37c4a     64 F1 6C F1 
37c4e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
37c52     83 F1 DC F8 
37c56     9A FC 9A FC 
37c5a     9B FC 9E FC 
37c5e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
37c62     A3 FC A4 FC 
37c66     A6 FC A9 FC 
37c6a     90 F4 33 F2 
37c6e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
37c72     BA F1 BF F1 
37c76     C7 F1 CE F1 
37c7a     D6 F1 DC F1 
37c7e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
37c82     F3 FC F5 FC 
37c86     FE FB 79 FB 
37c8a     62 FB 5F FB 
37c8e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
37c92     6F FA AF F3 
37c96     53 F2 12 F2 
37c9a     0F F2 15 F2 
37c9e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
37ca2     2A F2 32 F2 
37ca6     38 F2 9A FB 
37caa     AF FB B1 FB 
37cae     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
37cb2     B7 FB B8 FB 
37cb6     BA FB BC FB 
37cba     C1 FB 3B F8 
37cbe     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
37cc2     6E F2 6C F2 
37cc6     74 F2 7A F2 
37cca     81 F2 87 F2 
37cce     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
37cd2     06 FC 09 FC 
37cd6     0C FC 0E FC 
37cda     0F FC 12 FC 
37cde     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
37ce2     17 FC 1A FC 
37ce6     B2 F6 7B F3 
37cea     DD F2 C5 F2 
37cee     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
37cf2     D4 F2 DB F2 
37cf6     E0 F2 E8 F2 
37cfa     28 F8 60 FC 
37cfe     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
37d02     64 FC 66 FC 
37d06     68 FC 6A FC 
37d0a     6D FC 52 FC 
37d0e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
37d12     78 F3 24 F3 
37d16     1A F3 1E F3 
37d1a     24 F3 2A F3 
37d1e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
37d22     3D F3 80 FA 
37d26     0C FB 0F FB 
37d2a     10 FB 14 FB 
37d2e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
37d32     1B FB 1D FB 
37d36     1F FB 92 FA 
37d3a     DE F4 AE F3 
37d3e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
37d42     79 F3 7E F3 
37d46     84 F3 8C F3 
37d4a     92 F3 97 F3 
37d4e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
37d52     67 FB 69 FB 
37d56     6B FB 6F FB 
37d5a     71 FB 72 FB 
37d5e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
37d62     E3 F8 BA F4 
37d66     EE F3 CC F3 
37d6a     CA F3 CF F3 
37d6e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
37d72     E2 F3 E8 F3 
37d76     ED F3 B7 FB 
37d7a     BC FB BE FB 
37d7e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
37d82     C4 FB C6 FB 
37d86     C8 FB C9 FB 
37d8a     CC FB 8F F7 
37d8e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
37d92     1E F4 1E F4 
37d96     24 F4 2A F4 
37d9a     30 F4 38 F4 
37d9e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
37da2     AD FA B1 FA 
37da6     B4 FA B6 FA 
37daa     BA FA BB FA 
37dae     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
37db2     C2 FA C6 FA 
37db6     55 F6 C6 F4 
37dba     7D F4 72 F4 
37dbe     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
37dc2     83 F4 89 F4 
37dc6     8F F4 94 F4 
37dca     66 FA 03 FB 
37dce     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
37dd2     0A FB 0E FB 
37dd6     10 FB 11 FB 
37dda     16 FB 18 FB 
37dde     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
37de2     F9 F4 CA F4 
37de6     C5 F4 CB F4 
37dea     D1 F4 D7 F4 
37dee     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
37df2     E8 F4 3F FB 
37df6     56 FB 58 FB 
37dfa     5A FB 5E FB 
37dfe     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
37e02     64 FB 64 FB 
37e06     69 FB 99 F9 
37e0a     E9 F5 33 F5 
37e0e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
37e12     1D F5 22 F5 
37e16     27 F5 2E F5 
37e1a     32 F5 37 F5 
37e1e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
37e22     BC FA BC FA 
37e26     C1 FA C2 FA 
37e2a     C4 FA C8 FA 
37e2e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
37e32     F9 F7 DB F5 
37e36     78 F5 69 F5 
37e3a     6A F5 70 F5 
37e3e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
37e42     7F F5 85 F5 
37e46     6E F7 06 FB 
37e4a     0A FB 0B FB 
37e4e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
37e52     14 FB 15 FB 
37e56     18 FB 1B FB 
37e5a     1D FB 70 F7 
37e5e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
37e62     B6 F5 BB F5 
37e66     C0 F5 C6 F5 
37e6a     CA F5 CF F5 
37e6e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
37e72     54 FB 56 FB 
37e76     5A FB 5B FB 
37e7a     5E FB 5F FB 
37e7e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
37e82     67 FB 52 FB 
37e86     29 F7 33 F6 
37e8a     06 F6 02 F6 
37e8e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
37e92     10 F6 16 F6 
37e96     1A F6 1F F6 
37e9a     81 FB 9F FB 
37e9e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
37ea2     51 FB F2 FA 
37ea6     E3 FA E3 FA 
37eaa     E5 FA E9 FA 
37eae     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
37eb2     64 F6 4D F6 
37eb6     4D F6 53 F6 
37eba     57 F6 5C F6 
37ebe     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
37ec2     6A F6 19 FB 
37ec6     1E FB 22 FB 
37eca     23 FB 24 FB 
37ece     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
37ed2     2C FB 2E FB 
37ed6     32 FB F0 F8 
37eda     01 F7 A5 F6 
37ede     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
37ee2     9F F6 A3 F6 
37ee6     A6 F6 AC F6 
37eea     B0 F6 EB F7 
37eee     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
37ef2     68 FB 6C FB 
37ef6     6E FB 71 FB 
37efa     72 FB 74 FB 
37efe     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
37f02     71 F8 21 F7 
37f06     E5 F6 DD F6 
37f0a     E1 F6 E6 F6 
37f0e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
37f12     F5 F6 F7 F6 
37f16     F7 FA AB FB 
37f1a     AD FB AF FB 
37f1e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
37f22     B6 FB B9 FB 
37f26     BB FB BC FB 
37f2a     21 FB 07 F8 
37f2e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
37f32     22 F7 26 F7 
37f36     2B F7 2E F7 
37f3a     34 F7 38 F7 
37f3e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
37f42     13 FB 16 FB 
37f46     17 FB 1B FB 
37f4a     1E FB 20 FB 
37f4e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
37f52     26 FB 77 FA 
37f56     F3 F7 7C F7 
37f5a     67 F7 6A F7 
37f5e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
37f62     74 F7 7A F7 
37f66     7E F7 82 F7 
37f6a     53 FB 5A FB 
37f6e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
37f72     5F FB 63 FB 
37f76     65 FB 67 FB 
37f7a     69 FB 6A FB 
37f7e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
37f82     B5 F7 A9 F7 
37f86     AD F7 B0 F7 
37f8a     B5 F7 B8 F7 
37f8e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
37f92     6E F8 99 FB 
37f96     9C FB 9D FB 
37f9a     9F FB A4 FB 
37f9e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
37fa2     A9 FB AB FB 
37fa6     AD FB 46 F9 
37faa     26 F8 F0 F7 
37fae     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
37fb2     F4 F7 F8 F7 
37fb6     FB F7 FF F7 
37fba     03 F8 65 FA 
37fbe     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
37fc2     2B FB 2F FB 
37fc6     30 FB 32 FB 
37fca     34 FB 38 FB 
37fce     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
37fd2     E9 F8 4A F8 
37fd6     2E F8 2C F8 
37fda     2F F8 36 F8 
37fde     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
37fe2     41 F8 44 F8 
37fe6     4A FB 67 FB 
37fea     68 FB 6B FB 
37fee     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
37ff2     73 FB 74 FB 
37ff6     78 FB 7A FB 
37ffa     14 FB E7 F8 
37ffe     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
38002     6D F8 70 F8 
38006     73 F8 78 F8 
3800a     7C F8 80 F8 
3800e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
38012     A6 FB A7 FB 
38016     A9 FB AC FB 
3801a     AF FB B1 FB 
3801e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
38022     B7 FB 73 FA 
38026     F8 F8 B4 F8 
3802a     A9 F8 AB F8 
3802e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
38032     B4 F8 B8 F8 
38036     BB F8 FA F8 
3803a     64 FB 65 FB 
3803e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
38042     6D FB 6F FB 
38046     70 FB 74 FB 
3804a     77 FB 77 FB 
3804e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
38052     E9 F8 E4 F8 
38056     E8 F8 EB F8 
3805a     EE F8 F2 F8 
3805e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
38062     B5 FA 9F FB 
38066     A1 FB A4 FB 
3806a     A5 FB A9 FB 
3806e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
38072     AE FB B1 FB 
38076     B2 FB C7 F9 
3807a     39 F9 22 F9 
3807e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
38082     26 F9 2A F9 
38086     2E F9 32 F9 
3808a     33 F9 BA FB 
3808e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
38092     DE FB E1 FB 
38096     E2 FB E4 FB 
3809a     E5 FB E7 FB 
3809e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
380a2     C5 F9 67 F9 
380a6     57 F9 56 F9 
380aa     5B F9 5F F9 
380ae     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
380b2     68 F9 6C F9 
380b6     0B FC 11 FC 
380ba     14 FC 15 FC 
380be     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
380c2     B5 FB B5 FB 
380c6     B6 FB B8 FB 
380ca     E9 FA C8 F9 
380ce     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
380d2     90 F9 94 F9 
380d6     95 F9 99 F9 
380da     9D F9 9F F9 
380de     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
380e2     DE FB DF FB 
380e6     E2 FB E4 FB 
380ea     E6 FB E8 FB 
380ee     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
380f2     EF FB AC FA 
380f6     E9 F9 C7 F9 
380fa     C3 F9 C8 F9 
380fe     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
38102     D0 F9 D4 F9 
38106     D6 F9 0E FB 
3810a     11 FC 13 FC 
3810e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
38112     19 FC 1B FC 
38116     1D FC 1E FC 
3811a     21 FC 22 FC 
3811e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
38122     F7 F9 F7 F9 
38126     FB F9 FE F9 
3812a     00 FA 03 FA 
3812e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
38132     1B FC 45 FC 
38136     46 FC 48 FC 
3813a     4A FC 4B FC 
3813e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
38142     52 FC 54 FC 
38146     F3 FB 82 FA 
3814a     35 FA 28 FA 
3814e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
38152     31 FA 32 FA 
38156     37 FA 37 FA 
3815a     3C FA 00 FC 
3815e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
38162     09 FC 0B FC 
38166     0F FC 12 FC 
3816a     12 FC 15 FC 
3816e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
38172     8D FA 60 FA 
38176     5B FA 5C FA 
3817a     60 FA 61 FA 
3817e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
38182     6C FA 6D FA 
38186     37 FC 3A FC 
3818a     3B FC 3D FC 
3818e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
38192     43 FC 44 FC 
38196     45 FC 47 FC 
3819a     51 FB AB FA 
3819e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
381a2     8E FA 91 FA 
381a6     93 FA 95 FA 
381aa     98 FA 9B FA 
381ae     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
381b2     68 FC 6A FC 
381b6     6C FC 6E FC 
381ba     70 FC 72 FC 
381be     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
381c2     76 FC 3B FB 
381c6     D0 FA BB FA 
381ca     B9 FA BD FA 
381ce     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
381d2     C4 FA C6 FA 
381d6     CA FA 13 FC 
381da     3A FC 3A FC 
381de     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
381e2     41 FC 43 FC 
381e6     44 FC 47 FC 
381ea     48 FC 3C FC 
381ee     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
381f2     E6 FA E8 FA 
381f6     EB FA EE FA 
381fa     F0 FA F2 FA 
381fe     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
38202     61 FC 66 FC 
38206     68 FC 6B FC 
3820a     6C FC 6E FC 
3820e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
38212     73 FC 75 FC 
38216     13 FC 3F FB 
3821a     17 FB 12 FB 
3821e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
38222     1A FB 1D FB 
38226     1F FB 20 FB 
3822a     23 FB 92 FC 
3822e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
38232     96 FC 97 FC 
38236     9A FC 9C FC 
3823a     9E FC 9F FC 
3823e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
38242     5A FB 41 FB 
38246     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3824a     73 32 00 04 
3824e     00 00 10 00 
38252     00 00 00 00 
38256     00 00 00 00 | atari2 file "atari2.s2"
3825a     43 87 43 87 
3825e     43 87 44 87 
38262     43 87 44 87 
38266     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3826a     43 87 43 87 
3826e     43 87 44 87 
38272     43 87 43 87 
38276     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3827a     44 87 43 87 
3827e     44 87 43 87 
38282     43 87 43 87 
38286     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3828a     43 87 43 87 
3828e     44 87 43 87 
38292     44 87 44 87 
38296     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3829a     43 87 43 87 
3829e     44 87 43 87 
382a2     43 87 42 87 
382a6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
382aa     43 87 43 87 
382ae     43 87 43 87 
382b2     44 87 43 87 
382b6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
382ba     44 87 44 87 
382be     43 87 44 87 
382c2     43 87 44 87 
382c6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
382ca     44 87 43 87 
382ce     44 87 44 87 
382d2     43 87 43 87 
382d6     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
382da     43 87 44 87 
382de     44 87 43 87 
382e2     43 87 44 87 
382e6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
382ea     43 87 43 87 
382ee     43 87 43 87 
382f2     43 87 43 87 
382f6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
382fa     42 87 43 87 
382fe     44 87 42 87 
38302     43 87 43 87 
38306     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3830a     43 87 44 87 
3830e     44 87 43 87 
38312     43 87 43 87 
38316     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3831a     43 87 5C 87 
3831e     EE 86 AC 87 
38322     4C 7C A3 78 
38326     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3832a     BC 78 BB 78 
3832e     BD 78 BC 78 
38332     BB 78 BD 78 
38336     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3833a     BB 78 BB 78 
3833e     BC 78 BC 78 
38342     BC 78 BB 78 
38346     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3834a     BC 78 BC 78 
3834e     BC 78 BC 78 
38352     BC 78 BC 78 
38356     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3835a     BB 78 BC 78 
3835e     A0 78 4C 7C 
38362     11 7A 29 89 
38366     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3836a     44 87 43 87 
3836e     44 87 43 87 
38372     43 87 42 87 
38376     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3837a     43 87 43 87 
3837e     44 87 ED 85 
38382     71 85 52 79 
38386     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3838a     BC 78 BC 78 
3838e     BC 78 BC 78 
38392     BC 78 BC 78 
38396     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3839a     BC 78 BC 78 
3839e     BC 78 A0 78 
383a2     CF 7A B9 81 
383a6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
383aa     44 87 43 87 
383ae     43 87 44 87 
383b2     43 87 44 87 
383b6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
383ba     43 87 43 87 
383be     43 87 43 87 
383c2     44 87 43 87 
383c6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
383ca     43 87 43 87 
383ce     44 87 43 87 
383d2     44 87 43 87 
383d6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
383da     44 87 43 87 
383de     43 87 43 87 
383e2     5A 87 39 81 
383e6     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
383ea     A5 78 BC 78 
383ee     BB 78 BC 78 
383f2     BB 78 BC 78 
383f6     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
383fa     BC 78 BC 78 
383fe     BC 78 BC 78 
38402     BC 78 8F 79 
38406     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3840a     09 85 47 87 
3840e     43 87 43 87 
38412     42 87 42 87 
38416     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3841a     43 87 43 87 
3841e     43 87 43 87 
38422     43 87 44 87 
38426     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3842a     43 87 43 87 
3842e     44 87 43 87 
38432     42 87 43 87 
38436     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3843a     44 87 43 87 
3843e     43 87 43 87 
38442     44 87 44 87 
38446     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3844a     94 78 55 7A 
3844e     B9 78 BC 78 
38452     BC 78 BC 78 
38456     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3845a     BC 78 BB 78 
3845e     BC 78 BC 78 
38462     BC 78 BC 78 
38466     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3846a     BB 78 BC 78 
3846e     BC 78 BC 78 
38472     BB 78 BC 78 
38476     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3847a     BC 78 BC 78 
3847e     BD 78 BC 78 
38482     BC 78 BB 78 
38486     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3848a     94 78 B3 84 
3848e     36 84 4A 87 
38492     43 87 43 87 
38496     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3849a     43 87 44 87 
3849e     43 87 43 87 
384a2     43 87 43 87 
384a6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
384aa     43 87 44 87 
384ae     43 87 44 87 
384b2     43 87 43 87 
384b6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
384ba     43 87 43 87 
384be     43 87 45 87 
384c2     43 87 43 87 
384c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
384ca     43 87 44 87 
384ce     44 87 44 87 
384d2     43 87 43 87 
384d6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
384da     43 87 42 87 
384de     43 87 43 87 
384e2     44 87 43 87 
384e6     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
384ea     54 87 3C 82 
384ee     36 83 52 79 
384f2     C6 78 BC 78 
384f6     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
384fa     BB 78 BB 78 
384fe     BC 78 BC 78 
38502     BC 78 BC 78 
38506     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3850a     BD 78 ED 78 
3850e     1B 79 F4 83 
38512     4D 83 4E 87 
38516     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3851a     44 87 43 87 
3851e     42 87 44 87 
38522     43 87 42 87 
38526     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3852a     43 87 54 87 
3852e     26 82 B3 84 
38532     D6 77 BB 78 
38536     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3853a     BC 78 BB 78 
3853e     BB 78 BB 78 
38542     BB 78 BB 78 
38546     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3854a     BC 78 BC 78 
3854e     26 79 18 75 
38552     36 83 1F 84 
38556     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3855a     43 87 43 87 
3855e     43 87 43 87 
38562     43 87 44 87 
38566     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3856a     43 87 44 87 
3856e     44 87 43 87 
38572     43 87 43 87 
38576     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3857a     43 87 43 87 
3857e     43 87 43 87 
38582     44 87 44 87 
38586     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3858a     44 87 43 87 
3858e     43 87 43 87 
38592     43 87 44 87 
38596     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3859a     44 87 44 87 
3859e     44 87 43 87 
385a2     44 87 43 87 
385a6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
385aa     43 87 43 87 
385ae     43 87 44 87 
385b2     44 87 43 87 
385b6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
385ba     43 87 43 87 
385be     43 87 43 87 
385c2     43 87 44 87 
385c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
385ca     43 87 44 87 
385ce     43 87 44 87 
385d2     19 87 7D 86 
385d6     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
385da     B1 78 BC 78 
385de     BC 78 BC 78 
385e2     BC 78 BC 78 
385e6     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
385ea     BC 78 BC 78 
385ee     BD 78 BC 78 
385f2     B7 78 3B 7B 
385f6     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
385fa     96 86 44 87 
385fe     43 87 43 87 
38602     43 87 43 87 
38606     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3860a     44 87 44 87 
3860e     43 87 44 87 
38612     43 87 44 87 
38616     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3861a     43 87 44 87 
3861e     43 87 44 87 
38622     43 87 44 87 
38626     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3862a     43 87 44 87 
3862e     43 87 43 87 
38632     44 87 43 87 
38636     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3863a     44 87 44 87 
3863e     43 87 43 87 
38642     43 87 44 87 
38646     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3864a     43 87 43 87 
3864e     43 87 43 87 
38652     44 87 44 87 
38656     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3865a     36 83 CF 7A 
3865e     AB 78 BB 78 
38662     BC 78 BC 78 
38666     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3866a     BB 78 BC 78 
3866e     BC 78 BC 78 
38672     BC 78 BC 78 
38676     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3867a     BC 78 BC 78 
3867e     BC 78 BB 78 
38682     BC 78 BC 78 
38686     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3868a     BB 78 BC 78 
3868e     BB 78 BC 78 
38692     BC 78 BD 78 
38696     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3869a     BC 78 BC 78 
3869e     BC 78 BC 78 
386a2     BC 78 BD 78 
386a6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
386aa     BC 78 BB 78 
386ae     BC 78 BB 78 
386b2     BB 78 BC 78 
386b6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
386ba     BC 78 BC 78 
386be     BC 78 BC 78 
386c2     BC 78 BB 78 
386c6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
386ca     BC 78 BC 78 
386ce     BC 78 BD 78 
386d2     BB 78 BC 78 
386d6     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
386da     BC 78 BC 78 
386de     BC 78 BB 78 
386e2     BC 78 BB 78 
386e6     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
386ea     BB 78 BC 78 
386ee     BC 78 BC 78 
386f2     BC 78 BB 78 
386f6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
386fa     BC 78 BC 78 
386fe     BC 78 BB 78 
38702     BC 78 BB 78 
38706     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3870a     BC 78 BC 78 
3870e     BC 78 BC 78 
38712     BB 78 BC 78 
38716     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3871a     BC 78 9F 78 
3871e     52 79 B3 84 
38722     2F 86 60 87 
38726     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3872a     44 87 43 87 
3872e     43 87 43 87 
38732     43 87 43 87 
38736     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3873a     43 87 43 87 
3873e     43 87 44 87 
38742     43 87 43 87 
38746     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3874a     43 87 43 87 
3874e     43 87 43 87 
38752     43 87 44 87 
38756     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3875a     44 87 44 87 
3875e     5E 87 BC 80 
38762     FB 80 94 78 
38766     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3876a     BD 78 BC 78 
3876e     BB 78 BC 78 
38772     BB 78 BB 78 
38776     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3877a     BC 78 BB 78 
3877e     BB 78 6B 79 
38782     D6 77 AC 87 
38786     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3878a     43 87 44 87 
3878e     43 87 43 87 
38792     44 87 43 87 
38796     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3879a     43 87 44 87 
3879e     43 87 5C 87 
387a2     E7 80 00 80 
387a6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
387aa     BC 78 BD 78 
387ae     BC 78 BC 78 
387b2     BC 78 BB 78 
387b6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
387ba     BC 78 BC 78 
387be     BB 78 BC 78 
387c2     BB 78 BC 78 
387c6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
387ca     BB 78 BC 78 
387ce     BC 78 BC 78 
387d2     BC 78 BC 78 
387d6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
387da     BC 78 BC 78 
387de     BC 78 BC 78 
387e2     A0 78 8D 7B 
387e6     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
387ea     60 87 43 87 
387ee     44 87 44 87 
387f2     43 87 43 87 
387f6     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
387fa     44 87 43 87 
387fe     43 87 43 87 
38802     44 87 73 86 
38806     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3880a     51 7B B6 78 
3880e     BC 78 BD 78 
38812     BC 78 BC 78 
38816     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3881a     BB 78 BC 78 
3881e     BD 78 BB 78 
38822     BC 78 BB 78 
38826     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3882a     BC 78 BC 78 
3882e     BC 78 BC 78 
38832     BB 78 BC 78 
38836     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3883a     BC 78 BB 78 
3883e     BB 78 BC 78 
38842     BC 78 BB 78 
38846     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3884a     22 8C AF 84 
3884e     48 87 43 87 
38852     44 87 43 87 
38856     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3885a     43 87 42 87 
3885e     43 87 43 87 
38862     44 87 43 87 
38866     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3886a     43 87 43 87 
3886e     44 87 44 87 
38872     43 87 43 87 
38876     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3887a     43 87 43 87 
3887e     43 87 43 87 
38882     44 87 43 87 
38886     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3888a     9F 8B D6 77 
3888e     16 7C B3 78 
38892     BC 78 BB 78 
38896     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3889a     BB 78 BC 78 
3889e     BB 78 BC 78 
388a2     BC 78 BC 78 
388a6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
388aa     BC 78 BB 78 
388ae     BB 78 BC 78 
388b2     BB 78 BC 78 
388b6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
388ba     BB 78 BB 78 
388be     BC 78 BC 78 
388c2     BC 78 BB 78 
388c6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
388ca     BC 78 BC 78 
388ce     BC 78 BD 78 
388d2     BB 78 BC 78 
388d6     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
388da     BC 78 BC 78 
388de     BC 78 BB 78 
388e2     BC 78 BC 78 
388e6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
388ea     A8 78 54 7E 
388ee     F4 83 17 82 
388f2     50 87 43 87 
388f6     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
388fa     44 87 43 87 
388fe     44 87 43 87 
38902     43 87 44 87 
38906     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3890a     43 87 28 87 
3890e     20 85 CF 7A 
38912     70 7D AD 78 
38916     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3891a     BB 78 BC 78 
3891e     BC 78 BC 78 
38922     BB 78 BB 78 
38926     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3892a     BB 78 B2 78 
3892e     9A 7C CF 7A 
38932     4A 87 0D 87 
38936     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3893a     43 87 44 87 
3893e     43 87 44 87 
38942     43 87 43 87 
38946     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3894a     44 87 43 87 
3894e     28 87 51 85 
38952     11 7A 1E 7D 
38956     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3895a     BC 78 BB 78 
3895e     BC 78 BC 78 
38962     BC 78 BC 78 
38966     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3896a     BB 78 BC 78 
3896e     BB 78 BC 78 
38972     BC 78 BC 78 
38976     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3897a     BB 78 BC 78 
3897e     BC 78 BC 78 
38982     BD 78 BB 78 
38986     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3898a     BC 78 BB 78 
3898e     BC 78 BC 78 
38992     BC 78 BB 78 
38996     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3899a     BC 78 BC 78 
3899e     BC 78 BC 78 
389a2     BB 78 BC 78 
389a6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
389aa     BC 78 BD 78 
389ae     BC 78 BC 78 
389b2     BC 78 BB 78 
389b6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
389ba     BC 78 BB 78 
389be     BB 78 BC 78 
389c2     BC 78 BB 78 
389c6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
389ca     BB 78 BB 78 
389ce     BB 78 BC 78 
389d2     B6 78 48 7D 
389d6     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
389da     56 87 43 87 
389de     42 87 44 87 
389e2     44 87 43 87 
389e6     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
389ea     43 87 44 87 
389ee     43 87 44 87 
389f2     4C 87 7E 83 
389f6     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
389fa     F7 78 BC 78 
389fe     BC 78 BB 78 
38a02     BB 78 BC 78 
38a06     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38a0a     BC 78 BB 78 
38a0e     BC 78 BC 78 
38a12     BB 78 BC 78 
38a16     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
38a1a     BB 78 BC 78 
38a1e     BC 78 BC 78 
38a22     BC 78 BB 78 
38a26     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38a2a     BC 78 BC 78 
38a2e     BC 78 BC 78 
38a32     BC 78 BB 78 
38a36     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38a3a     BC 78 BB 78 
38a3e     BB 78 BC 78 
38a42     BC 78 BB 78 
38a46     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38a4a     BC 78 BC 78 
38a4e     BB 78 BC 78 
38a52     BC 78 BC 78 
38a56     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
38a5a     73 32 00 04 
38a5e     00 00 10 00 
38a62     00 00 00 00 
38a66     00 00 00 00 | atari12 file "atari12.s2"
38a6a     00 6D 00 6D 
38a6e     00 6D 00 6D 
38a72     00 6D 00 6D 
38a76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38a7a     00 6D 00 6D 
38a7e     00 6D 00 6D 
38a82     00 6D 00 6D 
38a86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38a8a     00 6D 00 6D 
38a8e     00 6D 00 6D 
38a92     00 6D 00 6D 
38a96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38a9a     00 6D 00 6D 
38a9e     00 6D 00 6D 
38aa2     00 6D 00 6D 
38aa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38aaa     00 6D 00 6D 
38aae     00 6D 00 6D 
38ab2     00 6D 00 6D 
38ab6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
38aba     00 6C 00 6C 
38abe     00 6C 00 6C 
38ac2     00 6C 00 6C 
38ac6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38aca     00 6C 00 6C 
38ace     00 6C 00 6C 
38ad2     00 6C 00 6C 
38ad6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38ada     00 6C 00 6C 
38ade     00 6C 00 6C 
38ae2     00 6C 00 6C 
38ae6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38aea     00 6C 00 6C 
38aee     00 6C 00 6C 
38af2     00 6C 00 6C 
38af6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38afa     00 6C 00 6C 
38afe     00 6C 00 6C 
38b02     00 6C 00 6C 
38b06     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b0a     00 6C 00 6C 
38b0e     00 6C 00 6C 
38b12     00 6C 00 6C 
38b16     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b1a     00 6C 00 6C 
38b1e     00 6C 00 6C 
38b22     00 6C 00 6C 
38b26     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b2a     00 6C 00 6C 
38b2e     00 6C 00 6C 
38b32     00 6C 00 6C 
38b36     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b3a     00 6C 00 6C 
38b3e     00 6C 00 6C 
38b42     00 6C 00 6C 
38b46     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b4a     00 6C 00 6C 
38b4e     00 6C 00 6C 
38b52     00 6C 00 6C 
38b56     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b5a     00 6C 00 6C 
38b5e     00 6C 00 6C 
38b62     00 6C 00 6C 
38b66     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38b6a     00 6C 00 6B 
38b6e     00 6B 00 6B 
38b72     00 6B 00 6B 
38b76     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38b7a     00 6B 00 6B 
38b7e     00 6B 00 6B 
38b82     00 6B 00 6B 
38b86     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38b8a     00 6B 00 6B 
38b8e     00 6B 00 6B 
38b92     00 6B 00 6B 
38b96     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38b9a     00 6B 00 6B 
38b9e     00 6B 00 6B 
38ba2     00 6B 00 6B 
38ba6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38baa     00 6B 00 6B 
38bae     00 6B 00 6B 
38bb2     00 6B 00 6B 
38bb6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38bba     00 6B 00 6B 
38bbe     00 6B 00 6B 
38bc2     00 6B 00 6B 
38bc6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38bca     00 6B 00 6B 
38bce     00 6B 00 6B 
38bd2     00 6B 00 6B 
38bd6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38bda     00 6B 00 6B 
38bde     00 6B 00 6B 
38be2     00 6B 00 6B 
38be6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38bea     00 6B 00 6B 
38bee     00 6B 00 6B 
38bf2     00 6B 00 6B 
38bf6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38bfa     00 6B 00 6B 
38bfe     00 6B 00 6B 
38c02     00 6A 00 9D 
38c06     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
38c0a     00 9E 00 9E 
38c0e     00 9E 00 9E 
38c12     00 9E 00 9E 
38c16     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c1a     00 9E 00 9E 
38c1e     00 9E 00 9E 
38c22     00 9E 00 9E 
38c26     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c2a     00 9E 00 9E 
38c2e     00 9E 00 9E 
38c32     00 9E 00 9E 
38c36     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c3a     00 9E 00 9E 
38c3e     00 9E 00 9E 
38c42     00 9E 00 9E 
38c46     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c4a     00 9E 00 9E 
38c4e     00 9E 00 9E 
38c52     00 9E 00 9E 
38c56     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c5a     00 9E 00 9E 
38c5e     00 9E 00 9E 
38c62     00 9E 00 9E 
38c66     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c6a     00 9E 00 9E 
38c6e     00 9E 00 9E 
38c72     00 9E 00 9E 
38c76     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c7a     00 9E 00 9E 
38c7e     00 9E 00 9E 
38c82     00 9E 00 9E 
38c86     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38c8a     00 9E 00 9E 
38c8e     00 9E 00 9E 
38c92     00 9E 00 9E 
38c96     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
38c9a     00 9F 00 9F 
38c9e     00 9F 00 9F 
38ca2     00 9F 00 9F 
38ca6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38caa     00 9F 00 9F 
38cae     00 9F 00 9F 
38cb2     00 9F 00 9F 
38cb6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38cba     00 9F 00 9F 
38cbe     00 9F 00 9F 
38cc2     00 9F 00 9F 
38cc6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38cca     00 9F 00 9F 
38cce     00 9F 00 9F 
38cd2     00 9F 00 9F 
38cd6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38cda     00 9F 00 9F 
38cde     00 9F 00 9F 
38ce2     00 9F 00 9F 
38ce6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38cea     00 9F 00 9F 
38cee     00 9F 00 9F 
38cf2     00 9F 00 9F 
38cf6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38cfa     00 9F 00 9F 
38cfe     00 9F 00 9F 
38d02     00 9F 00 9F 
38d06     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d0a     00 9F 00 9F 
38d0e     00 9F 00 9F 
38d12     00 9F 00 9F 
38d16     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d1a     00 9F 00 9F 
38d1e     00 9F 00 9F 
38d22     00 9F 00 9F 
38d26     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d2a     00 9F 00 9F 
38d2e     00 9F 00 9F 
38d32     00 9F 00 9F 
38d36     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d3a     00 9F 00 9F 
38d3e     00 9F 00 9F 
38d42     00 9F 00 9F 
38d46     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d4a     00 9F 00 9F 
38d4e     00 9F 00 9F 
38d52     00 9F 00 9F 
38d56     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38d5a     00 9F 00 9F 
38d5e     00 9F 00 A0 
38d62     00 A0 00 A0 
38d66     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38d6a     00 A0 00 A0 
38d6e     00 A0 00 A0 
38d72     00 A0 00 A0 
38d76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38d7a     00 A0 00 A0 
38d7e     00 A0 00 A0 
38d82     00 A0 00 A0 
38d86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38d8a     00 A0 00 A0 
38d8e     00 A0 00 A0 
38d92     00 A0 00 A0 
38d96     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38d9a     00 A0 00 A0 
38d9e     00 A0 00 A0 
38da2     00 A0 00 A0 
38da6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38daa     00 A0 00 A0 
38dae     00 A0 00 A0 
38db2     00 A0 00 A0 
38db6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38dba     00 A0 00 A0 
38dbe     00 A0 00 A0 
38dc2     00 A0 00 A0 
38dc6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38dca     00 A0 00 A0 
38dce     00 A0 00 A0 
38dd2     00 A0 00 A0 
38dd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38dda     00 A0 00 A0 
38dde     00 A0 00 A0 
38de2     00 A0 00 A0 
38de6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38dea     00 A0 00 A0 
38dee     00 A0 00 A0 
38df2     00 A0 00 A0 
38df6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38dfa     00 A0 00 A0 
38dfe     00 A0 00 A0 
38e02     00 A0 00 A0 
38e06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38e0a     00 A0 00 A0 
38e0e     00 A0 00 A0 
38e12     00 A0 00 A0 
38e16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38e1a     00 A0 00 A0 
38e1e     00 A0 00 A0 
38e22     00 A0 00 A0 
38e26     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
38e2a     00 6D 00 6D 
38e2e     00 6D 00 6D 
38e32     00 6D 00 6D 
38e36     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e3a     00 6D 00 6D 
38e3e     00 6D 00 6D 
38e42     00 6D 00 6D 
38e46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e4a     00 6D 00 6D 
38e4e     00 6D 00 6D 
38e52     00 6D 00 6D 
38e56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e5a     00 6D 00 6D 
38e5e     00 6D 00 6D 
38e62     00 6D 00 6D 
38e66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e6a     00 6D 00 6D 
38e6e     00 6D 00 6D 
38e72     00 6D 00 6D 
38e76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e7a     00 6D 00 6D 
38e7e     00 6D 00 6D 
38e82     00 6D 00 6D 
38e86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e8a     00 6D 00 6D 
38e8e     00 6D 00 6D 
38e92     00 6D 00 6D 
38e96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38e9a     00 6D 00 6D 
38e9e     00 6D 00 6D 
38ea2     00 6D 00 6D 
38ea6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38eaa     00 6D 00 6D 
38eae     00 A0 00 A0 
38eb2     00 A0 00 A0 
38eb6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38eba     00 A0 00 A0 
38ebe     00 A0 00 A0 
38ec2     00 A0 00 A0 
38ec6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38eca     00 A0 00 A0 
38ece     00 A0 00 A0 
38ed2     00 A0 00 A0 
38ed6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38eda     00 A0 00 A0 
38ede     00 A0 00 A0 
38ee2     00 A0 00 A0 
38ee6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38eea     00 A0 00 A0 
38eee     00 A0 00 A0 
38ef2     00 A0 00 A0 
38ef6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38efa     00 A0 00 A0 
38efe     00 A0 00 A0 
38f02     00 A0 00 A0 
38f06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38f0a     00 A0 00 A0 
38f0e     00 A0 00 A0 
38f12     00 A0 00 A0 
38f16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38f1a     00 A0 00 A0 
38f1e     00 A0 00 A0 
38f22     00 A0 00 A0 
38f26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38f2a     00 A0 00 A0 
38f2e     00 A0 00 A0 
38f32     00 A0 00 A0 
38f36     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
38f3a     00 6D 00 6D 
38f3e     00 6D 00 6D 
38f42     00 6D 00 6D 
38f46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f4a     00 6D 00 6D 
38f4e     00 6D 00 6D 
38f52     00 6D 00 6D 
38f56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f5a     00 6D 00 6D 
38f5e     00 6D 00 6D 
38f62     00 6D 00 6D 
38f66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f6a     00 6D 00 6D 
38f6e     00 6D 00 6D 
38f72     00 6D 00 6D 
38f76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f7a     00 6D 00 6D 
38f7e     00 6D 00 6D 
38f82     00 6D 00 6D 
38f86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f8a     00 6D 00 6D 
38f8e     00 6D 00 6D 
38f92     00 6D 00 6D 
38f96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38f9a     00 6D 00 6D 
38f9e     00 6D 00 6D 
38fa2     00 6D 00 6D 
38fa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38faa     00 6D 00 6D 
38fae     00 6D 00 6D 
38fb2     00 6D 00 6D 
38fb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38fba     00 6D 00 6D 
38fbe     00 6C 00 A0 
38fc2     00 9F 00 A0 
38fc6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
38fca     00 A0 00 A0 
38fce     00 A0 00 A0 
38fd2     00 A0 00 A0 
38fd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38fda     00 A0 00 A0 
38fde     00 A0 00 A0 
38fe2     00 A0 00 A0 
38fe6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38fea     00 A0 00 A0 
38fee     00 A0 00 A0 
38ff2     00 A0 00 A0 
38ff6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38ffa     00 A0 00 A0 
38ffe     00 A0 00 A0 
39002     00 A0 00 A0 
39006     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3900a     00 A0 00 A0 
3900e     00 A0 00 A0 
39012     00 A0 00 A0 
39016     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3901a     00 A0 00 A0 
3901e     00 A0 00 A0 
39022     00 A0 00 A0 
39026     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3902a     00 A0 00 A0 
3902e     00 A0 00 A0 
39032     00 A0 00 A0 
39036     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3903a     00 A0 00 A0 
3903e     00 A0 00 A0 
39042     00 A0 00 A0 
39046     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3904a     00 A0 00 A0 
3904e     00 A0 00 A0 
39052     00 A0 00 A0 
39056     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3905a     00 A0 00 A0 
3905e     00 A0 00 A0 
39062     00 A0 00 A0 
39066     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3906a     00 A0 00 A0 
3906e     00 A0 00 A0 
39072     00 A0 00 A0 
39076     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3907a     00 A1 00 A1 
3907e     00 A1 00 A1 
39082     00 A1 00 A1 
39086     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3908a     00 A1 00 A1 
3908e     00 A1 00 A1 
39092     00 A1 00 A1 
39096     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3909a     00 A1 00 A1 
3909e     00 A1 00 A1 
390a2     00 A1 00 A1 
390a6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
390aa     00 A1 00 A1 
390ae     00 A1 00 A1 
390b2     00 A1 00 A1 
390b6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
390ba     00 A1 00 A1 
390be     00 A1 00 A1 
390c2     00 A1 00 A1 
390c6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
390ca     00 A1 00 A1 
390ce     00 A1 00 A1 
390d2     00 6E 00 6E 
390d6     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
390da     00 6E 00 6E 
390de     00 6E 00 6E 
390e2     00 6E 00 6E 
390e6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
390ea     00 6E 00 6E 
390ee     00 6E 00 6E 
390f2     00 6E 00 6E 
390f6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
390fa     00 6E 00 6E 
390fe     00 6E 00 6E 
39102     00 6E 00 6E 
39106     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3910a     00 6E 00 6D 
3910e     00 6D 00 6D 
39112     00 6D 00 6D 
39116     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3911a     00 6D 00 6D 
3911e     00 6D 00 6D 
39122     00 6D 00 6D 
39126     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3912a     00 6D 00 6D 
3912e     00 6D 00 6D 
39132     00 6D 00 6D 
39136     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3913a     00 6D 00 6D 
3913e     00 6D 00 6D 
39142     00 6D 00 6D 
39146     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3914a     00 6D 00 6D 
3914e     00 6D 00 6D 
39152     00 6D 00 6D 
39156     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3915a     00 6D 00 6D 
3915e     00 6D 00 6D 
39162     00 6D 00 6D 
39166     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3916a     00 6D 00 6D 
3916e     00 6D 00 6D 
39172     00 6D 00 6D 
39176     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3917a     00 6D 00 6D 
3917e     00 6D 00 6D 
39182     00 6D 00 6D 
39186     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3918a     00 6D 00 6D 
3918e     00 6D 00 6D 
39192     00 6D 00 6D 
39196     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3919a     00 6D 00 6D 
3919e     00 6D 00 6D 
391a2     00 6D 00 6D 
391a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
391aa     00 6D 00 6D 
391ae     00 6D 00 6D 
391b2     00 6D 00 6D 
391b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
391ba     00 6D 00 6D 
391be     00 6C 00 6C 
391c2     00 6C 00 6C 
391c6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
391ca     00 6C 00 6C 
391ce     00 6C 00 6C 
391d2     00 6C 00 6C 
391d6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
391da     00 6C 00 6C 
391de     00 6C 00 6C 
391e2     00 9D 00 9F 
391e6     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
391ea     00 9F 00 9F 
391ee     00 9F 00 9F 
391f2     00 A0 00 A0 
391f6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
391fa     00 A0 00 A0 
391fe     00 A0 00 A0 
39202     00 A0 00 A0 
39206     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3920a     00 A0 00 A0 
3920e     00 A0 00 A0 
39212     00 A0 00 A0 
39216     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3921a     00 A0 00 A0 
3921e     00 A0 00 A0 
39222     00 A0 00 A0 
39226     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3922a     00 A0 00 A0 
3922e     00 A0 00 A0 
39232     00 A0 00 A0 
39236     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3923a     00 A0 00 A0 
3923e     00 A0 00 A0 
39242     00 A0 00 A0 
39246     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3924a     00 A0 00 A0 
3924e     00 A0 00 A0 
39252     00 A0 00 A0 
39256     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3925a     00 A0 00 A0 
3925e     00 A0 00 A0 
39262     00 A0 00 A0 
39266     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3926a     01 00 00 00 
3926e     00 00 00 00 
39272     00 00 00 00 
39276     00 00 00 00 | mouse  file "mouse2.def"
3927a     00 00 00 00 
3927e     00 00 00 00 
39282     00 00 00 00 
39286     00 00 00 00 | 	byte	$00[16]
3928a     01 01 00 00 
3928e     00 00 00 00 
39292     00 00 00 00 
39296     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3929a     00 00 00 00 
3929e     00 00 00 00 
392a2     00 00 00 00 
392a6     00 00 00 00 | 	byte	$00[16]
392aa     01 0D 01 00 
392ae     00 00 00 00 
392b2     00 00 00 00 
392b6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
392ba     00 00 00 00 
392be     00 00 00 00 
392c2     00 00 00 00 
392c6     00 00 00 00 | 	byte	$00[16]
392ca     01 0D 0D 01 
392ce     00 00 00 00 
392d2     00 00 00 00 
392d6     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
392da     00 00 00 00 
392de     00 00 00 00 
392e2     00 00 00 00 
392e6     00 00 00 00 | 	byte	$00[16]
392ea     01 0D 0D 0D 
392ee     01 00 00 00 
392f2     00 00 00 00 
392f6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
392fa     00 00 00 00 
392fe     00 00 00 00 
39302     00 00 00 00 
39306     00 00 00 00 | 	byte	$00[16]
3930a     01 0D 0D 0D 
3930e     0D 01 00 00 
39312     00 00 00 00 
39316     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3931a     00 00 00 00 
3931e     00 00 00 00 
39322     00 00 00 00 
39326     00 00 00 00 | 	byte	$00[16]
3932a     01 0D 0D 0D 
3932e     0D 0D 01 00 
39332     00 00 00 00 
39336     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3933a     00 00 00 00 
3933e     00 00 00 00 
39342     00 00 00 00 
39346     00 00 00 00 | 	byte	$00[16]
3934a     01 0D 0D 0D 
3934e     0D 0D 0D 01 
39352     00 00 00 00 
39356     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3935a     00 00 00 00 
3935e     00 00 00 00 
39362     00 00 00 00 
39366     00 00 00 00 | 	byte	$00[16]
3936a     01 0D 0D 0D 
3936e     0D 0D 0D 0C 
39372     01 00 00 00 
39376     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3937a     00 00 00 00 
3937e     00 00 00 00 
39382     00 00 00 00 
39386     00 00 00 00 | 	byte	$00[16]
3938a     01 0D 0D 0D 
3938e     0D 0D 0D 0D 
39392     0C 01 00 00 
39396     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3939a     00 00 00 00 
3939e     00 00 00 00 
393a2     00 00 00 00 
393a6     00 00 00 00 | 	byte	$00[16]
393aa     01 0D 0D 0D 
393ae     0D 0D 0D 0D 
393b2     0D 0C 01 00 
393b6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
393ba     00 00 00 00 
393be     00 00 00 00 
393c2     00 00 00 00 
393c6     00 00 00 00 | 	byte	$00[16]
393ca     01 0D 0D 0D 
393ce     0D 0D 0D 0D 
393d2     0D 0D 0B 01 
393d6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
393da     00 00 00 00 
393de     00 00 00 00 
393e2     00 00 00 00 
393e6     00 00 00 00 | 	byte	$00[16]
393ea     01 0D 0D 0D 
393ee     0C 0D 0D 03 
393f2     01 01 01 01 
393f6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
393fa     00 00 00 00 
393fe     00 00 00 00 
39402     00 00 00 00 
39406     00 00 00 00 | 	byte	$00[16]
3940a     01 0D 0D 0C 
3940e     01 09 0D 03 
39412     00 00 00 00 
39416     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3941a     00 00 00 00 
3941e     00 00 00 00 
39422     00 00 00 00 
39426     00 00 00 00 | 	byte	$00[16]
3942a     01 0D 0C 01 
3942e     00 01 0D 0B 
39432     01 00 00 00 
39436     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3943a     00 00 00 00 
3943e     00 00 00 00 
39442     00 00 00 00 
39446     00 00 00 00 | 	byte	$00[16]
3944a     01 0C 01 00 
3944e     00 01 0A 0D 
39452     01 00 00 00 
39456     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3945a     00 00 00 00 
3945e     00 00 00 00 
39462     00 00 00 00 
39466     00 00 00 00 | 	byte	$00[16]
3946a     01 01 00 00 
3946e     00 00 01 0D 
39472     0B 01 00 00 
39476     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3947a     00 00 00 00 
3947e     00 00 00 00 
39482     00 00 00 00 
39486     00 00 00 00 
3948a     00 00 00 00 
3948e     00 00       | 	byte	$00[22]
39490     01 0B 0D 01 
39494     00 00 00 00 
39498     00 00 00 00 
3949c     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
394a0     00 00 00 00 
394a4     00 00 00 00 
394a8     00 00 00 00 
394ac     00 00 00 00 
394b0     00          | 	byte	$00[17]
394b1     01 01 00 00 
394b5     00 00 00 00 
394b9     00 00 00 00 
394bd     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
394c1     00 00 00 00 
      ...             
39665     00 00 00 00 
39669     00          | 	byte	$00[425]
3966a                 | 
3966a     00 00       |              	org
3966c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
39670 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
39674 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
39678 003             | 
39678 003 00 30 04 F6 |                 mov     psramaddr,#0
3967c 004             | 
3967c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
39680 005 20 00 00 FF 
39684 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
39688 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3968c 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
39690 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
39694 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
39698 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3969c 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
396a0 00d             | 
396a0 00d 20 00 00 FF 
396a4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
396a8 00f E0 03 00 FF 
396ac 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
396b0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
396b4 012             | 
396b4 012             |                 
396b4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
396b8 013             |     
396b8 013 01 2C 60 FD |                 cogid 	t11				' get id
396bc 014 00 00 EC FC |                 coginit #0,#0				' start the new program
396c0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
396c4 016             | 
396c4 016 00 00 00 00 | t11 		long 	0
396c8 017 00 FF 07 00 | mailbox 	long 	$7FF00
396cc 018 00 00 00 00 | psramaddr 	long 	0
396d0 019 00 00 00 00 | pslockval	long 	0
396d4 01a 00 00 00 00 | cmd             long    0
396d8 01b 00 00 00 00 | buf1            long    0
396dc 01c 00 40 00 00 | buf2            long    16384
396e0 01d E4 96 03 00 | 	long	@@@_dat_ + 12612
396e4 01e 50 32 20 52 
396e8 01f 65 74 72 6F 
396ec 020 6D 61 63 68 
396f0 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
396f4 022 42 41 53 49 
396f8 023 43 20 76 65 
396fc 024 72 73 69 6F 
39700 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
39704 026 33 32 00 00 | 	byte	$33, $32, $00, $00
39708 027             | 	alignl
39708 027             | _hg010b_spin2_dat_
39708 027             | 
39708 027 00 00 00 00 
3970c 028 00 00 00 00 
39710 029 00 00 00 00 
39714 02a 00 00 00 00 
39718 02b 00 00 00    | vga_font       file "vgafont.def"
3971b 02b 7E 81 A5 81 
3971f 02c 81 BD 99 81 
39723 02d 81 7E 00 00 
39727 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3972b 02f 7E FF DB FF 
3972f 030 FF C3 E7 FF 
39733 031 FF 7E 00 00 
39737 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3973b 033 00 36 7F 7F 
3973f 034 7F 7F 3E 1C 
39743 035 08 00 00 00 
39747 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3974b 037 00 08 1C 3E 
3974f 038 7F 3E 1C 08 
39753 039 00 00 00 00 
39757 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3975b 03b 18 3C 3C E7 
3975f 03c E7 E7 18 18 
39763 03d 3C 00 00 00 
39767 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3976b 03f 18 3C 7E FF 
3976f 040 FF 7E 18 18 
39773 041 3C 00 00 00 
39777 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3977b 043 00 00 00 18 
3977f 044 3C 3C 18 00 
39783 045 00 00 00 00 
39787 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3978b 047 FF FF FF E7 
3978f 048 C3 C3 E7 FF 
39793 049 FF FF FF FF 
39797 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3979b 04b 00 00 3C 66 
3979f 04c 42 42 66 3C 
397a3 04d 00 00 00 00 
397a7 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
397ab 04f FF FF C3 99 
397af 050 BD BD 99 C3 
397b3 051 FF FF FF FF 
397b7 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
397bb 053 78 70 58 4C 
397bf 054 1E 33 33 33 
397c3 055 33 1E 00 00 
397c7 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
397cb 057 3C 66 66 66 
397cf 058 66 3C 18 7E 
397d3 059 18 18 00 00 
397d7 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
397db 05b FC CC FC 0C 
397df 05c 0C 0C 0C 0E 
397e3 05d 0F 07 00 00 
397e7 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
397eb 05f FE C6 FE C6 
397ef 060 C6 C6 C6 E6 
397f3 061 E7 67 03 00 
397f7 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
397fb 063 18 18 DB 3C 
397ff 064 E7 3C DB 18 
39803 065 18 00 00 00 
39807 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3980b 067 03 07 0F 1F 
3980f 068 7F 1F 0F 07 
39813 069 03 01 00 00 
39817 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3981b 06b 60 70 78 7C 
3981f 06c 7F 7C 78 70 
39823 06d 60 40 00 00 
39827 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3982b 06f 18 3C 7E 18 
3982f 070 18 18 7E 3C 
39833 071 18 00 00 00 
39837 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3983b 073 66 66 66 66 
3983f 074 66 66 66    | 	byte	$66[7]
39842 075 00 66 66 00 
39846 076 00 00 00 00 
3984a 077 00 FE DB DB 
3984e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
39852 079 D8 D8 D8 00 
39856 07a 00 00 00 3E 
3985a 07b 63 06 1C 36 
3985e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
39862 07d 30 63 3E 00 
39866 07e 00 00 00 00 
3986a 07f 00 00 00 00 
3986e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
39872 081 7F 7F 7F 00 
39876 082 00 00 00 00 
3987a 083 00 18 3C 7E 
3987e 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
39882 085 3C 18 7E 00 
39886 086 00 00 00 00 
3988a 087 00 18 3C 7E 
3988e 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
39892 089 18 18 18 00 
39896 08a 00 00 00 00 
3989a 08b 00 18 18 18 
3989e 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
398a2 08d 7E 3C 18 00 
398a6 08e 00 00 00 00 
398aa 08f 00 00 00 18 
398ae 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
398b2 091 00 00 00 00 
398b6 092 00 00 00 00 
398ba 093 00 00 00    | 	byte	$00[11]
398bd 094 0C 06 7F 06 
398c1 095 0C 00 00 00 
398c5 096 00 00 00 00 
398c9 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398cd 098 00 03 03 03 
398d1 099 7F 00 00 00 
398d5 09a 00 00 00 00 
398d9 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398dd 09c 14 36 7F 36 
398e1 09d 14 00 00 00 
398e5 09e 00 00 00 00 
398e9 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
398ed 0a0 1C 1C 3E 3E 
398f1 0a1 7F 7F 00 00 
398f5 0a2 00 00 00 00 
398f9 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
398fd 0a4 7F 3E 3E 1C 
39901 0a5 1C 08 00 00 
39905 0a6 00 00 00 00 
39909 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3990d 0a8 00 00 00 00 
39911 0a9 00 00 00 00 
39915 0aa 00 00 00 00 
39919 0ab 00 00       | 	byte	$00[14]
3991b 0ab 18 3C 3C 3C 
3991f 0ac 18 18 18 00 
39923 0ad 18 18 00 00 
39927 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3992b 0af 66 24 00 00 
3992f 0b0 00 00 00 00 
39933 0b1 00 00 00 00 
39937 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3993b 0b3 00 36 36 7F 
3993f 0b4 36 36 36 7F 
39943 0b5 36 36 00 00 
39947 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3994b 0b7 3E 63 43 03 
3994f 0b8 3E 60 60 61 
39953 0b9 63 3E 18 18 
39957 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3995b 0bb 00 00 43 63 
3995f 0bc 30 18 0C 06 
39963 0bd 63 61 00 00 
39967 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3996b 0bf 1C 36 36 1C 
3996f 0c0 6E 3B 33 33 
39973 0c1 33 6E 00 00 
39977 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3997b 0c3 0C 0C 0C 06 
3997f 0c4 00 00 00 00 
39983 0c5 00 00 00 00 
39987 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3998b 0c7 30 18 0C 0C 
3998f 0c8 0C 0C 0C 0C 
39993 0c9 18 30 00 00 
39997 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3999b 0cb 0C 18 30 30 
3999f 0cc 30 30 30 30 
399a3 0cd 18 0C 00 00 
399a7 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
399ab 0cf 00 00 00 66 
399af 0d0 3C FF 3C 66 
399b3 0d1 00 00 00 00 
399b7 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
399bb 0d3 00 00 00 18 
399bf 0d4 18 7E 18 18 
399c3 0d5 00 00 00 00 
399c7 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
399cb 0d7 00 00 00 00 
399cf 0d8 00 00 00 00 | 	byte	$00[8]
399d3 0d9 18 18 18 0C 
399d7 0da 00 00 00 00 
399db 0db 00 00 00 00 
399df 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
399e3 0dd 00 00 00 00 
399e7 0de 00 00 00 00 
399eb 0df 00 00 00 00 
399ef 0e0 00 00 00 00 | 	byte	$00[16]
399f3 0e1 18 18 00 00 
399f7 0e2 00 00 00 00 
399fb 0e3 00 00 40 60 
399ff 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
39a03 0e5 03 01 00 00 
39a07 0e6 00 00 00 00 
39a0b 0e7 1C 36 63 63 
39a0f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
39a13 0e9 36 1C 00 00 
39a17 0ea 00 00 00 00 
39a1b 0eb 18 1C 1E 18 
39a1f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
39a23 0ed 18 7E 00 00 
39a27 0ee 00 00 00 00 
39a2b 0ef 3E 63 60 30 
39a2f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
39a33 0f1 63 7F 00 00 
39a37 0f2 00 00 00 00 
39a3b 0f3 3E 63 60 60 
39a3f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
39a43 0f5 63 3E 00 00 
39a47 0f6 00 00 00 00 
39a4b 0f7 30 38 3C 36 
39a4f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
39a53 0f9 30 78 00 00 
39a57 0fa 00 00 00 00 
39a5b 0fb 7F 03 03 03 
39a5f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
39a63 0fd 63 3E 00 00 
39a67 0fe 00 00 00 00 
39a6b 0ff 1C 06 03 03 
39a6f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
39a73 101 63 3E 00 00 
39a77 102 00 00 00 00 
39a7b 103 7F 63 60 60 
39a7f 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
39a83 105 0C 0C 00 00 
39a87 106 00 00 00 00 
39a8b 107 3E 63 63 63 
39a8f 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
39a93 109 63 3E 00 00 
39a97 10a 00 00 00 00 
39a9b 10b 3E 63 63 63 
39a9f 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
39aa3 10d 30 1E 00 00 
39aa7 10e 00 00 00 00 
39aab 10f 00 00 00 18 
39aaf 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
39ab3 111 18 18 00 00 
39ab7 112 00 00 00 00 
39abb 113 00 00 00 18 
39abf 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
39ac3 115 18 18 0C 00 
39ac7 116 00 00 00 00 
39acb 117 00 60 30 18 
39acf 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
39ad3 119 30 60 00 00 
39ad7 11a 00 00 00 00 
39adb 11b 00 00 00 7E 
39adf 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
39ae3 11d 00 00 00 00 
39ae7 11e 00 00 00 00 
39aeb 11f 00          | 	byte	$00[9]
39aec 120 06 0C 18 30 
39af0 121 60 30 18 0C 
39af4 122 06 00 00 00 
39af8 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
39afc 124 63 63 30 18 
39b00 125 18 18 00 18 
39b04 126 18 00 00 00 
39b08 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
39b0c 128 3E 63 63 7B 
39b10 129 7B 7B 3B 03 
39b14 12a 3E 00 00 00 
39b18 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
39b1c 12c 1C 36 63 63 
39b20 12d 7F 63 63 63 
39b24 12e 63 00 00 00 
39b28 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
39b2c 130 66 66 66 3E 
39b30 131 66 66 66 66 
39b34 132 3F 00 00 00 
39b38 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
39b3c 134 66 43 03 03 
39b40 135 03 03 43 66 
39b44 136 3C 00 00 00 
39b48 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
39b4c 138 36 66 66 66 
39b50 139 66 66 66 36 
39b54 13a 1F 00 00 00 
39b58 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
39b5c 13c 66 46 16 1E 
39b60 13d 16 06 46 66 
39b64 13e 7F 00 00 00 
39b68 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
39b6c 140 66 46 16 1E 
39b70 141 16 06 06 06 
39b74 142 0F 00 00 00 
39b78 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
39b7c 144 66 43 03 03 
39b80 145 7B 63 63 66 
39b84 146 5C 00 00 00 
39b88 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
39b8c 148 63 63 63 7F 
39b90 149 63 63 63 63 
39b94 14a 63 00 00 00 
39b98 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
39b9c 14c 18 18 18 18 
39ba0 14d 18 18 18 18 | 	byte	$18[8]
39ba4 14e 3C 00 00 00 
39ba8 14f 00 00 00 78 
39bac 150 30 30 30 30 
39bb0 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
39bb4 152 1E 00 00 00 
39bb8 153 00 00 00 67 
39bbc 154 66 66 36 1E 
39bc0 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
39bc4 156 67 00 00 00 
39bc8 157 00 00 00 0F 
39bcc 158 06 06 06 06 
39bd0 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
39bd4 15a 7F 00 00 00 
39bd8 15b 00 00 00 63 
39bdc 15c 77 7F 7F 6B 
39be0 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
39be4 15e 63 00 00 00 
39be8 15f 00 00 00 63 
39bec 160 67 6F 7F 7B 
39bf0 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
39bf4 162 63 00 00 00 
39bf8 163 00 00 00 3E 
39bfc 164 63 63 63 63 
39c00 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
39c04 166 3E 00 00 00 
39c08 167 00 00 00 3F 
39c0c 168 66 66 66 3E 
39c10 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
39c14 16a 0F 00 00 00 
39c18 16b 00 00 00 3E 
39c1c 16c 63 63 63 63 
39c20 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
39c24 16e 3E 30 70 00 
39c28 16f 00 00 00 3F 
39c2c 170 66 66 66 3E 
39c30 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
39c34 172 67 00 00 00 
39c38 173 00 00 00 3E 
39c3c 174 63 63 06 1C 
39c40 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
39c44 176 3E 00 00 00 
39c48 177 00 00 00 7E 
39c4c 178 7E 5A 18 18 
39c50 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
39c54 17a 3C 00 00 00 
39c58 17b 00 00 00 63 
39c5c 17c 63 63 63 63 
39c60 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
39c64 17e 3E 00 00 00 
39c68 17f 00 00 00 63 
39c6c 180 63 63 63 63 
39c70 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
39c74 182 08 00 00 00 
39c78 183 00 00 00 63 
39c7c 184 63 63 63 6B 
39c80 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
39c84 186 36 00 00 00 
39c88 187 00 00 00 63 
39c8c 188 63 36 3E 1C 
39c90 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
39c94 18a 63 00 00 00 
39c98 18b 00 00 00 66 
39c9c 18c 66 66 66 3C 
39ca0 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
39ca4 18e 3C 00 00 00 
39ca8 18f 00 00 00 7F 
39cac 190 63 61 30 18 
39cb0 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
39cb4 192 7F 00 00 00 
39cb8 193 00 00 00 3C 
39cbc 194 0C 0C 0C 0C 
39cc0 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
39cc4 196 3C 00 00 00 
39cc8 197 00 00 00 00 
39ccc 198 01 03 07 0E 
39cd0 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
39cd4 19a 40 00 00 00 
39cd8 19b 00 00 00 3C 
39cdc 19c 30 30 30 30 
39ce0 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
39ce4 19e 3C 00 00 00 
39ce8 19f 1C 36 00 00 
39cec 1a0 00 00 00 00 
39cf0 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39cf4 1a2 00 00 00 00 
39cf8 1a3 00 00 00 00 
39cfc 1a4 00 00 00 00 
39d00 1a5 00 00 00 00 
39d04 1a6 00          | 	byte	$00[17]
39d05 1a6 FF 00 00 0C 
39d09 1a7 18 00 00 00 
39d0d 1a8 00 00 00 00 
39d11 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39d15 1aa 00 00 00 00 
39d19 1ab 00 00 00 00 
39d1d 1ac 00          | 	byte	$00[9]
39d1e 1ac 1E 30 3E 33 
39d22 1ad 33 33 6E 00 
39d26 1ae 00 00 00 00 
39d2a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
39d2e 1b0 1E 36 66 66 
39d32 1b1 66 66 3E 00 
39d36 1b2 00 00 00 00 
39d3a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
39d3e 1b4 3E 63 03 03 
39d42 1b5 03 63 3E 00 
39d46 1b6 00 00 00 00 
39d4a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
39d4e 1b8 3C 36 33 33 
39d52 1b9 33 33 6E 00 
39d56 1ba 00 00 00 00 
39d5a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
39d5e 1bc 3E 63 7F 03 
39d62 1bd 03 63 3E 00 
39d66 1be 00 00 00 00 
39d6a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
39d6e 1c0 0C 1E 0C 0C 
39d72 1c1 0C 0C 1E 00 
39d76 1c2 00 00 00 00 
39d7a 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
39d7e 1c4 6E 33 33 33 
39d82 1c5 33 33 3E 30 
39d86 1c6 33 1E 00 00 
39d8a 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
39d8e 1c8 36 6E 66 66 
39d92 1c9 66 66 67 00 
39d96 1ca 00 00 00 00 
39d9a 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
39d9e 1cc 1C 18 18 18 
39da2 1cd 18 18 3C 00 
39da6 1ce 00 00 00 00 
39daa 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
39dae 1d0 70 60 60 60 
39db2 1d1 60 60 60 66 
39db6 1d2 66 3C 00 00 
39dba 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
39dbe 1d4 66 36 1E 1E 
39dc2 1d5 36 66 67 00 
39dc6 1d6 00 00 00 00 
39dca 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
39dce 1d8 18 18 18 18 
39dd2 1d9 18 18       | 	byte	$18[6]
39dd4 1da 3C 00 00 00 
39dd8 1db 00 00 00 00 
39ddc 1dc 00 00 37 7F 
39de0 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
39de4 1de 63 00 00 00 
39de8 1df 00 00 00 00 
39dec 1e0 00 00 3B 66 
39df0 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
39df4 1e2 66 00 00 00 
39df8 1e3 00 00 00 00 
39dfc 1e4 00 00 3E 63 
39e00 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
39e04 1e6 3E 00 00 00 
39e08 1e7 00 00 00 00 
39e0c 1e8 00 00 3B 66 
39e10 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
39e14 1ea 3E 06 06 0F 
39e18 1eb 00 00 00 00 
39e1c 1ec 00 00 6E 33 
39e20 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
39e24 1ee 3E 30 30 78 
39e28 1ef 00 00 00 00 
39e2c 1f0 00 00 3B 6E 
39e30 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
39e34 1f2 0F 00 00 00 
39e38 1f3 00 00 00 00 
39e3c 1f4 00 00 3E 63 
39e40 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
39e44 1f6 3E 00 00 00 
39e48 1f7 00 00 00 08 
39e4c 1f8 0C 0C 3F 0C 
39e50 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
39e54 1fa 38 00 00 00 
39e58 1fb 00 00 00 00 
39e5c 1fc 00 00 33 33 
39e60 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
39e64 1fe 6E 00 00 00 
39e68 1ff 00 00 00 00 
39e6c 200 00 00 63 63 
39e70 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
39e74 202 1C 00 00 00 
39e78 203 00 00 00 00 
39e7c 204 00 00 63 63 
39e80 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
39e84 206 36 00 00 00 
39e88 207 00 00 00 00 
39e8c 208 00 00 63 36 
39e90 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
39e94 20a 63 00 00 00 
39e98 20b 00 00 00 00 
39e9c 20c 00 00 63 63 
39ea0 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
39ea4 20e 7E 60 30 1F 
39ea8 20f 00 00 00 00 
39eac 210 00 00 7F 33 
39eb0 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
39eb4 212 7F 00 00 00 
39eb8 213 00 00 00 70 
39ebc 214 18 18 18 0E 
39ec0 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
39ec4 216 70 00 00 00 
39ec8 217 00 00 00 18 
39ecc 218 18 18 18 18 
39ed0 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
39ed4 21a 18 00 00 00 
39ed8 21b 00 00 00 0E 
39edc 21c 18 18 18 70 
39ee0 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
39ee4 21e 0E 00 00 00 
39ee8 21f 6E 3B 00 00 
39eec 220 00 00 00 00 
39ef0 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39ef4 222 00 00 00 00 
39ef8 223 00 00 00 00 
39efc 224 00 00       | 	byte	$00[10]
39efe 224 08 1C 36 63 
39f02 225 63 63 7F 00 
39f06 226 00 00 00 00 
39f0a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
39f0e 228 03 03 03 03 
39f12 229 43 66 3C 18 
39f16 22a 30 1E 00 00 
39f1a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
39f1e 22c 33 33 33 33 
39f22 22d 33 33       | 	byte	$33[6]
39f24 22e 6E 00 00 00 
39f28 22f 00 00 60 30 
39f2c 230 18 00 3E 63 
39f30 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
39f34 232 3E 00 00 00 
39f38 233 00 00 08 1C 
39f3c 234 36 00 1E 30 
39f40 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
39f44 236 6E 00 00 00 
39f48 237 00 00 00 00 
39f4c 238 33 00 1E 30 
39f50 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
39f54 23a 6E 00 00 00 
39f58 23b 00 00 1C 36 
39f5c 23c 1C 00 33 33 
39f60 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
39f64 23e 6E 00 00 00 
39f68 23f 00 00 60 30 
39f6c 240 18 00 3E 63 
39f70 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
39f74 242 3E 00 00 00 
39f78 243 00 00 00 00 
39f7c 244 00 00 3E 63 
39f80 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
39f84 246 3E 18 30 1E 
39f88 247 00 00 00 1C 
39f8c 248 58 78 38 18 
39f90 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
39f94 24a 3C 00 00 00 
39f98 24b 00 00 00 00 
39f9c 24c 63 00 3E 63 
39fa0 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
39fa4 24e 3E 00 00 00 
39fa8 24f 66 33 00 3E 
39fac 250 63 63 63 63 
39fb0 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
39fb4 252 3E 00 00 00 
39fb8 253 00 00 CC 66 
39fbc 254 33 00 3E 63 
39fc0 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
39fc4 256 3E 00 00 00 
39fc8 257 00 00 18 3C 
39fcc 258 66 00 1C 18 
39fd0 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
39fd4 25a 3C 00 00 00 
39fd8 25b 30 18 00 7F 
39fdc 25c 63 61 30 18 
39fe0 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
39fe4 25e 7F 00 00 00 
39fe8 25f 00 63 00 08 
39fec 260 1C 36 63 63 
39ff0 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
39ff4 262 63 00 00 00 
39ff8 263 30 18 00 3C 
39ffc 264 66 43 03 03 
3a000 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3a004 266 3C 00 00 00 
3a008 267 30 18 00 7F 
3a00c 268 66 46 16 1E 
3a010 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3a014 26a 7F 00 00 00 
3a018 26b 0C 06 00 0F 
3a01c 26c 06 06 06 06 
3a020 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3a024 26e 7F 00 00 00 
3a028 26f 30 18 00 1C 
3a02c 270 18 18 18 18 
3a030 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3a034 272 3C 00 00 00 
3a038 273 00 00 08 1C 
3a03c 274 36 00 3E 63 
3a040 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3a044 276 3E 00 00 00 
3a048 277 00 00 00 00 
3a04c 278 63 00 3E 63 
3a050 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3a054 27a 3E 00 00 00 
3a058 27b 00 00 00 6F 
3a05c 27c 46 26 06 06 
3a060 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3a064 27e 7F 00 00 00 
3a068 27f 00 00 00 6E 
3a06c 280 4C 2C 0C 0C 
3a070 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3a074 282 1E 00 00 00 
3a078 283 30 18 00 3E 
3a07c 284 63 63 06 1C 
3a080 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3a084 286 3E 00 00 00 
3a088 287 00 00 60 30 
3a08c 288 18 00 3E 63 
3a090 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3a094 28a 3E 00 00 00 
3a098 28b 00 63 00 3E 
3a09c 28c 63 63 63 63 
3a0a0 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3a0a4 28e 3E 00 00 00 
3a0a8 28f 00 63 00 63 
3a0ac 290 63 63 63 63 
3a0b0 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3a0b4 292 3E 00 00 00 
3a0b8 293 6C 38 00 7E 
3a0bc 294 7E 5A 18 18 
3a0c0 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3a0c4 296 3C 00 00 00 
3a0c8 297 00 00 60 48 
3a0cc 298 2C 0C 3F 0C 
3a0d0 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3a0d4 29a 38 00 00 00 
3a0d8 29b 00 00 00 0F 
3a0dc 29c 26 36 1E 0E 
3a0e0 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3a0e4 29e 7F 00 00 00 
3a0e8 29f 00 00 00 00 
3a0ec 2a0 00 63 36 1C 
3a0f0 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3a0f4 2a2 00 00 00 00 
3a0f8 2a3 00 00       | 	byte	$00[6]
3a0fa 2a3 36 1C 08 00 
3a0fe 2a4 3E 63 03 03 
3a102 2a5 03 63 3E 00 
3a106 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3a10a 2a7 30 18 0C 00 
3a10e 2a8 1E 30 3E 33 
3a112 2a9 33 33 6E 00 
3a116 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3a11a 2ab 60 30 18 00 
3a11e 2ac 1C 18 18 18 
3a122 2ad 18 18 3C 00 
3a126 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3a12a 2af 60 30 18 00 
3a12e 2b0 3E 63 63 63 
3a132 2b1 63 63 3E 00 
3a136 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3a13a 2b3 30 18 0C 00 
3a13e 2b4 33 33 33 33 
3a142 2b5 33 33 6E 00 
3a146 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3a14a 2b7 00 08 1C 36 
3a14e 2b8 63 63 7F 63 
3a152 2b9 63 63 63 18 
3a156 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3a15a 2bb 00 00 00 00 
3a15e 2bc 1E 30 3E 33 
3a162 2bd 33 33 6E 18 
3a166 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3a16a 2bf 00 7F 63 61 
3a16e 2c0 30 18 0C 06 
3a172 2c1 43 63 7F 00 
3a176 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3a17a 2c3 36 1C 08 00 
3a17e 2c4 7F 33 18 0C 
3a182 2c5 06 63 7F 00 
3a186 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3a18a 2c7 00 7F 66 46 
3a18e 2c8 16 1E 16 06 
3a192 2c9 46 66 7F 18 
3a196 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3a19a 2cb 00 00 00 00 
3a19e 2cc 3E 63 7F 03 
3a1a2 2cd 03 63 3E 18 
3a1a6 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3a1aa 2cf 00 3C 66 03 
3a1ae 2d0 1F 03 0F 03 
3a1b2 2d1 03 66 3C 00 
3a1b6 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3a1ba 2d3 60 30 18 00 
3a1be 2d4 7F 33 18 0C 
3a1c2 2d5 06 63 7F 00 
3a1c6 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3a1ca 2d7 00 3C 66 43 
3a1ce 2d8 03 03 03 03 
3a1d2 2d9 43 66 3C 00 
3a1d6 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3a1da 2db 00 00 00 00 
3a1de 2dc 3E 63 06 1C 
3a1e2 2dd 30 63 3E 18 
3a1e6 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3a1ea 2df 00 00 00 00 
3a1ee 2e0 00 00       | 	byte	$00[6]
3a1f0 2e1 6C 36 1B 36 
3a1f4 2e2 6C 00 00 00 
3a1f8 2e3 00 00 00 00 
3a1fc 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a200 2e5 1B 36 6C 36 
3a204 2e6 1B 00 00 00 
3a208 2e7 88 22 88 22 
3a20c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3a210 2e9 88 22 88 22 
3a214 2ea 88 22 88 22 
3a218 2eb AA 55 AA 55 
3a21c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3a220 2ed AA 55 AA 55 
3a224 2ee AA 55 AA 55 
3a228 2ef BB EE BB EE 
3a22c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3a230 2f1 BB EE BB EE 
3a234 2f2 BB EE BB EE 
3a238 2f3 18 18 18 18 
3a23c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3a240 2f5 18 18 18 18 
3a244 2f6 18 18 18 18 
3a248 2f7 18 18 18 18 
3a24c 2f8 18 18 18    | 	byte	$18[15]
3a24f 2f8 1F 18 18 18 
3a253 2f9 18 18 18 18 
3a257 2fa 18 30 18 00 
3a25b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3a25f 2fc 63 7F 63 63 
3a263 2fd 63 63 00 00 
3a267 2fe 00 1C 36 00 
3a26b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3a26f 300 63 7F 63 63 
3a273 301 63 63 00 00 
3a277 302 00 36 1C 00 
3a27b 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3a27f 304 1E 16 06 46 
3a283 305 66 7F 00 00 
3a287 306 00 00 00 00 
3a28b 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3a28f 308 1C 30 60 63 
3a293 309 63 3E 18 30 
3a297 30a 1E 6C 6C 6C 
3a29b 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3a29f 30c 6F 6C 6C 6C 
3a2a3 30d 6C 6C 6C 6C 
3a2a7 30e 6C 6C 6C 6C 
3a2ab 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a2af 310 6C 6C 6C 6C 
3a2b3 311 6C 6C 6C 6C 
3a2b7 312 6C          | 	byte	$6c[9]
3a2b8 313 00 00 00 00 
3a2bc 314 00          | 	byte	$00[5]
3a2bd 314 7F 60 6F 6C 
3a2c1 315 6C 6C 6C 6C 
3a2c5 316 6C 6C 6C 6C 
3a2c9 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a2cd 318 6F 60 7F 00 
3a2d1 319 00 00 00 00 
3a2d5 31a 00 00 00 18 
3a2d9 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3a2dd 31c 61 30 18 0C 
3a2e1 31d 06 43 63 7F 
3a2e5 31e 00 00 00 00 
3a2e9 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3a2ed 320 00 7F 33 18 
3a2f1 321 0C 06 63 7F 
3a2f5 322 00 00 00 00 
3a2f9 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3a2fd 324 00 00 1F 18 
3a301 325 18 18 18 18 
3a305 326 18 18 18 18 
3a309 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a30d 328 18 18 F8 00 
3a311 329 00 00 00 00 
3a315 32a 00 00 00 18 
3a319 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3a31d 32c 18 18 FF 00 
3a321 32d 00 00 00 00 
3a325 32e 00 00 00 00 
3a329 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a32d 330 00 00 FF 18 
3a331 331 18 18 18 18 
3a335 332 18 18 18 18 
3a339 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a33d 334 18 18 F8 18 
3a341 335 18 18 18 18 
3a345 336 18 18 18 00 
3a349 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3a34d 338 00 00 FF 00 
3a351 339 00 00 00 00 
3a355 33a 00 00 00 18 
3a359 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3a35d 33c 18 18 FF 18 
3a361 33d 18 18 18 18 
3a365 33e 18 18 18 63 
3a369 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3a36d 340 36 63 63 7F 
3a371 341 63 63 63 63 
3a375 342 00 00 00 00 
3a379 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3a37d 344 00 1E 30 3E 
3a381 345 33 33 33 6E 
3a385 346 00 00 00 6C 
3a389 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3a38d 348 EC 0C FC 00 
3a391 349 00 00 00 00 
3a395 34a 00 00 00 00 
3a399 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a39d 34c FC 0C EC 6C 
3a3a1 34d 6C 6C 6C 6C 
3a3a5 34e 6C 6C 6C 6C 
3a3a9 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a3ad 350 EF 00 FF 00 
3a3b1 351 00 00 00 00 
3a3b5 352 00 00 00 00 
3a3b9 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a3bd 354 FF 00 EF 6C 
3a3c1 355 6C 6C 6C 6C 
3a3c5 356 6C 6C 6C 6C 
3a3c9 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a3cd 358 EC 0C EC 6C 
3a3d1 359 6C 6C 6C 6C 
3a3d5 35a 6C 6C 6C 00 
3a3d9 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3a3dd 35c FF 00 FF 00 
3a3e1 35d 00 00 00 00 
3a3e5 35e 00 00 00 6C 
3a3e9 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3a3ed 360 EF 00 EF 6C 
3a3f1 361 6C 6C 6C 6C 
3a3f5 362 6C 6C 6C 00 
3a3f9 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3a3fd 364 63 3E 63 63 
3a401 365 63 63 3E 63 
3a405 366 00 00 00 00 
3a409 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3a40d 368 30 3C 36 33 
3a411 369 33 33 33 6E 
3a415 36a 00 00 00 00 
3a419 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3a41d 36c 66 66 6F 66 
3a421 36d 66 66 36 1F 
3a425 36e 00 00 00 36 
3a429 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3a42d 370 66 66 66 66 
3a431 371 66 66       | 	byte	$66[6]
3a433 371 36 1F 00 00 
3a437 372 00 00 63 00 
3a43b 373 7F 66 46 16 
3a43f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3a443 375 66 7F 00 00 
3a447 376 00 6C 38 00 
3a44b 377 38 30 30 3C 
3a44f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3a453 379 33 6E 00 00 
3a457 37a 00 36 1C 00 
3a45b 37b 63 67 6F 7F 
3a45f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3a463 37d 63 63 00 00 
3a467 37e 00 30 18 00 
3a46b 37f 3C 18 18 18 
3a46f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3a473 381 18 3C 00 00 
3a477 382 00 3C 66 00 
3a47b 383 3C 18 18 18 
3a47f 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3a483 385 18 3C 00 00 
3a487 386 00 00 00 36 
3a48b 387 1C 08 00 3E 
3a48f 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3a493 389 63 3E 00 00 
3a497 38a 00 18 18 18 
3a49b 38b 18 18 18 18 
3a49f 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3a4a3 38d 00 00 00 00 
3a4a7 38e 00 00 00 00 
3a4ab 38f 00 00 00 00 | 	byte	$00[12]
3a4af 390 F8 18 18 18 
3a4b3 391 18 18 18 18 
3a4b7 392 18 FF FF FF 
3a4bb 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3a4bf 394 FF FF FF FF 
3a4c3 395 FF FF FF FF 
3a4c7 396 FF          | 	byte	$ff[9]
3a4c8 397 00 00 00 00 
3a4cc 398 00 00 00    | 	byte	$00[7]
3a4cf 398 FF FF FF FF 
3a4d3 399 FF FF FF FF 
3a4d7 39a FF          | 	byte	$ff[9]
3a4d8 39b 00 00 00 7E 
3a4dc 39c 7E 5A 18 18 
3a4e0 39d 18 18 18 18 
3a4e4 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3a4e8 39f 1C 36 1C 63 
3a4ec 3a0 63 63 63 63 
3a4f0 3a1 63 63 63 63 
3a4f4 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3a4f8 3a3 FF FF FF FF 
3a4fc 3a4 FF FF FF    | 	byte	$ff[7]
3a4ff 3a4 00 00 00 00 
3a503 3a5 00 00 00 00 
3a507 3a6 00          | 	byte	$00[9]
3a508 3a7 30 18 00 3E 
3a50c 3a8 63 63 63 63 
3a510 3a9 63 63 63 63 
3a514 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3a518 3ab 00 00 00 1E 
3a51c 3ac 33 33 33 1B 
3a520 3ad 33 63 63 63 
3a524 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3a528 3af 1C 36 00 3E 
3a52c 3b0 63 63 63 63 
3a530 3b1 63 63 63 63 
3a534 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3a538 3b3 30 18 00 63 
3a53c 3b4 67 6F 7F 7B 
3a540 3b5 73 63 63 63 
3a544 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3a548 3b7 00 00 60 30 
3a54c 3b8 18 00 3B 66 
3a550 3b9 66 66 66 66 
3a554 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3a558 3bb 00 00 36 1C 
3a55c 3bc 08 00 3B 66 
3a560 3bd 66 66 66 66 
3a564 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3a568 3bf 36 1C 00 3E 
3a56c 3c0 63 63 06 1C 
3a570 3c1 30 60 63 63 
3a574 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3a578 3c3 00 00 36 1C 
3a57c 3c4 08 00 3E 63 
3a580 3c5 06 1C 30 63 
3a584 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3a588 3c7 30 18 00 3F 
3a58c 3c8 66 66 66 3E 
3a590 3c9 36 66 66 66 
3a594 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3a598 3cb 30 18 00 63 
3a59c 3cc 63 63 63 63 
3a5a0 3cd 63 63 63 63 
3a5a4 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3a5a8 3cf 00 00 60 30 
3a5ac 3d0 18 00 3B 6E 
3a5b0 3d1 66 06 06 06 
3a5b4 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3a5b8 3d3 66 33 00 63 
3a5bc 3d4 63 63 63 63 
3a5c0 3d5 63 63 63 63 
3a5c4 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3a5c8 3d7 00 00 60 30 
3a5cc 3d8 18 00 63 63 
3a5d0 3d9 63 63 63 63 
3a5d4 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3a5d8 3db 30 18 00 66 
3a5dc 3dc 66 66 66 3C 
3a5e0 3dd 18 18 18 18 
3a5e4 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3a5e8 3df 00 00 00 08 
3a5ec 3e0 0C 0C 3F 0C 
3a5f0 3e1 0C 0C 0C 6C 
3a5f4 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3a5f8 3e3 30 18 00 00 
3a5fc 3e4 00 00 00 00 
3a600 3e5 00 00 00 00 
3a604 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a608 3e7 00 00 00 00 
3a60c 3e8 00 00 00 00 | 	byte	$00[8]
3a610 3e9 7F 00 00 00 
3a614 3ea 00 00 00 00 
3a618 3eb 66 33 00 00 
3a61c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3a620 3ed 00 00 00 00 
3a624 3ee 00 00 00 00 
3a628 3ef 00 00 00 00 
3a62c 3f0 00 00 00 00 
3a630 3f1 00 00 00 00 
3a634 3f2 00          | 	byte	$00[21]
3a635 3f2 0C 06 3C 36 
3a639 3f3 1C 00 00 00 
3a63d 3f4 00 00 00 00 
3a641 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a645 3f6 00 00 00 63 
3a649 3f7 3E 00 00 00 
3a64d 3f8 00 00 00 00 
3a651 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a655 3fa 00 00 00 00 
3a659 3fb 3E 63 06 1C 
3a65d 3fc 36 63 63 36 
3a661 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3a665 3fe 00 00 00 00 
3a669 3ff 00 00 00 00 | 	byte	$00[8]
3a66d 400 18 00 7E 00 
3a671 401 18 00 00 00 
3a675 402 00 00 00 00 
3a679 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a67d 404 00 00 00 00 
3a681 405 00 00 00 00 | 	byte	$00[8]
3a685 406 18 30 1E 00 
3a689 407 00 00 1C 36 
3a68d 408 36 1C 00 00 
3a691 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3a695 40a 00 00 00 00 
3a699 40b 63 00 00 00 
3a69d 40c 00 00 00 00 
3a6a1 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a6a5 40e 00 00 00 18 
3a6a9 40f 18 00 00 00 
3a6ad 410 00 00 00 00 
3a6b1 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a6b5 412 00 00 00 00 
3a6b9 413 00          | 	byte	$00[5]
3a6ba 413 CC 66 33 00 
3a6be 414 33 33 33 33 
3a6c2 415 33 33 6E 00 
3a6c6 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3a6ca 417 00 3F 66 66 
3a6ce 418 66 3E 36 66 
3a6d2 419 66 66 6F 00 
3a6d6 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3a6da 41b 36 1C 08 00 
3a6de 41c 3B 6E 66 06 
3a6e2 41d 06 06 0F 00 
3a6e6 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3a6ea 41f 00 00 00 7E 
3a6ee 420 7E 7E 7E 7E 
3a6f2 421 7E 7E 00 00 
3a6f6 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3a6fa 423 00 00 00 00 
3a6fe 424 00 00 00 00 
3a702 425 00 00 00 00 
3a706 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a708 427             | 'vga_font       file "vgafont.def"
3a708 427 00 00 00 00 
      ...             
3a738 433 00 00 00 00 
3a73c 434 00 00 00    | st_font        file "st4font.def"
3a73f 434 FF FF 00 00 
3a743 435 00 00 00 00 
3a747 436 00 18 18 18 
3a74b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a74f 438 18 18 18 18 
3a753 439 18 18 18 18 
3a757 43a 18          | 	byte	$18[9]
3a758 43b 00 00 00 00 
3a75c 43c 00 00 00    | 	byte	$00[7]
3a75f 43c FF FF 18 18 
3a763 43d 18 18 18 18 
3a767 43e 18 18 18 18 
3a76b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a76f 440 FF FF 00 00 
3a773 441 00 00 00 00 
3a777 442 00 18 18 18 
3a77b 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a77f 444 1F 1F 18 18 
3a783 445 18 18 18 18 
3a787 446 18 18 18 18 
3a78b 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a78f 448 F8 F8 18 18 
3a793 449 18 18 18 18 
3a797 44a 18 00 00 00 
3a79b 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a79f 44c 1F 1F 18 18 
3a7a3 44d 18 18 18 18 
3a7a7 44e 18 00 00 00 
3a7ab 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a7af 450 F8 F8 18 18 
3a7b3 451 18 18 18 18 
3a7b7 452 18 18 18 18 
3a7bb 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a7bf 454 1F 1F 00 00 
3a7c3 455 00 00 00 00 
3a7c7 456 00 18 18 18 
3a7cb 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a7cf 458 F8 F8 00 00 
3a7d3 459 00 00 00 00 
3a7d7 45a 00 18 18 18 
3a7db 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a7df 45c FF FF 18 18 
3a7e3 45d 18 18 18 18 
3a7e7 45e 18 00 00 18 
3a7eb 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3a7ef 460 66 7E 7E 66 
3a7f3 461 66 66 66 30 
3a7f7 462 18 00 00 7E 
3a7fb 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3a7ff 464 3E 06 06 06 
3a803 465 06 7E 7E 18 
3a807 466 0C 30 18 3C 
3a80b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3a80f 468 06 06 06 66 
3a813 469 66 7E 3C 00 
3a817 46a 00 30 18 66 
3a81b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3a81f 46c 7E 7E 76 76 
3a823 46d 66 66 66 00 
3a827 46e 00 30 18 7C 
3a82b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3a82f 470 1C 38 70 60 
3a833 471 60 7E 3E 00 
3a837 472 00 30 18 7E 
3a83b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3a83f 474 18 0C 0C 06 
3a843 475 06 7E 7E 00 
3a847 476 00 18 18 00 
3a84b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3a84f 478 18 18 0C 0C 
3a853 479 06 7E 7E 00 
3a857 47a 00 30 18 3C 
3a85b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3a85f 47c 66 66 66 66 
3a863 47d 66          | 	byte	$66[5]
3a864 47e 7E 3C 00 00 
3a868 47f 00 00 06 06 
3a86c 480 06 06 16 1E 
3a870 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3a874 482 7E 7E 00 00 
3a878 483 00 00 00 00 
3a87c 484 00 3C 7C 60 
3a880 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3a884 486 7E 7C 30 18 
3a888 487 00 00 00 00 
3a88c 488 00 3C 7E 66 
3a890 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3a894 48a 7E 7C 18 0C 
3a898 48b 00 00 30 18 
3a89c 48c 00 3C 3E 06 
3a8a0 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3a8a4 48e 7E 7C 00 00 
3a8a8 48f 00 00 30 18 
3a8ac 490 00 3E 7E 66 
3a8b0 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3a8b4 492 66 66 00 00 
3a8b8 493 00 00 30 18 
3a8bc 494 00 7C 7E 06 
3a8c0 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3a8c4 496 7E 3E 00 00 
3a8c8 497 00 00 30 18 
3a8cc 498 00 7E 7E 30 
3a8d0 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3a8d4 49a 7E 7E 00 00 
3a8d8 49b 00 00 18 18 
3a8dc 49c 00 7E 7E 30 
3a8e0 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3a8e4 49e 7E 7E 00 00 
3a8e8 49f 00 00 30 18 
3a8ec 4a0 00 3C 7E 66 
3a8f0 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3a8f4 4a2 7E 3C 00 00 
3a8f8 4a3 00 00 1C 1C 
3a8fc 4a4 18 18 38 3C 
3a900 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3a904 4a6 3C 3C 00 00 
3a908 4a7 00 00 00 00 
3a90c 4a8 00 00 00 00 
3a910 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a914 4aa 00 00 00 00 
3a918 4ab 00 00       | 	byte	$00[6]
3a91a 4ab 18 18 18 18 
3a91e 4ac 18 18 18 18 | 	byte	$18[8]
3a922 4ad 00 00 18 18 
3a926 4ae 00 00 00 00 
3a92a 4af 66 66 66 66 
3a92e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3a932 4b1 00 00 00 00 
3a936 4b2 00 00 00 00 
3a93a 4b3 00          | 	byte	$00[9]
3a93b 4b3 66 66 FF FF 
3a93f 4b4 66 66 FF FF 
3a943 4b5 66 66 00 00 
3a947 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3a94b 4b7 7C 7E 06 06 
3a94f 4b8 3E 7C 60 60 
3a953 4b9 7E 3E 18 18 
3a957 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3a95b 4bb 66 30 30 18 
3a95f 4bc 18 0C 0C 66 
3a963 4bd 66 00 00 00 
3a967 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3a96b 4bf 66 66 3C 1C 
3a96f 4c0 1C FC FE 66 
3a973 4c1 66 FE FC 00 
3a977 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3a97b 4c3 18 18 18 18 
3a97f 4c4 00 00 00 00 
3a983 4c5 00 00 00 00 
3a987 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3a98b 4c7 18 1C 0C 0C 
3a98f 4c8 0C 0C 0C 0C 
3a993 4c9 1C 18 30 00 
3a997 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3a99b 4cb 18 38 30 30 
3a99f 4cc 30 30 30 30 
3a9a3 4cd 38 18 0C 00 
3a9a7 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3a9ab 4cf 66 66 3C 3C 
3a9af 4d0 FF FF 3C 3C 
3a9b3 4d1 66 66 00 00 
3a9b7 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3a9bb 4d3 00 18 18 18 
3a9bf 4d4 7E 7E 18 18 
3a9c3 4d5 18 00 00 00 
3a9c7 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a9cb 4d7 00 00 00 00 
3a9cf 4d8 00 00       | 	byte	$00[6]
3a9d1 4d9 18 18 18 18 
3a9d5 4da 18          | 	byte	$18[5]
3a9d6 4da 0C 04 00 00 
3a9da 4db 00 00 00 00 
3a9de 4dc 7E 7E 00 00 
3a9e2 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3a9e6 4de 00 00 00 00 
3a9ea 4df 00 00 00 00 
3a9ee 4e0 00 00 00 00 
3a9f2 4e1 00          | 	byte	$00[13]
3a9f3 4e1 18 18 18 00 
3a9f7 4e2 00 00 00 60 
3a9fb 4e3 60 60 30 30 
3a9ff 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3aa03 4e5 06 06 06 00 
3aa07 4e6 00 00 00 3C 
3aa0b 4e7 7E 66 66 66 
3aa0f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3aa13 4e9 66 7E 3C 00 
3aa17 4ea 00 00 00 18 
3aa1b 4eb 18 1C 1C 18 
3aa1f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3aa23 4ed 18 7E 7E 00 
3aa27 4ee 00 00 00 3C 
3aa2b 4ef 7E 66 66 30 
3aa2f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3aa33 4f1 0C 7E 7E 00 
3aa37 4f2 00 00 00 7E 
3aa3b 4f3 7E 30 30 18 
3aa3f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3aa43 4f5 66 7E 3C 00 
3aa47 4f6 00 00 00 30 
3aa4b 4f7 30 38 38 3C 
3aa4f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3aa53 4f9 7E 30 30 00 
3aa57 4fa 00 00 00 7E 
3aa5b 4fb 7E 06 06 3E 
3aa5f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3aa63 4fd 66 7E 3C 00 
3aa67 4fe 00 00 00 38 
3aa6b 4ff 3C 0E 06 06 
3aa6f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3aa73 501 66 7E 3C 00 
3aa77 502 00 00 00 7E 
3aa7b 503 7E 60 60 30 
3aa7f 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3aa83 505 0C 0C 0C 00 
3aa87 506 00 00 00 3C 
3aa8b 507 7E 66 66 3C 
3aa8f 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3aa93 509 66 7E 3C 00 
3aa97 50a 00 00 00 3C 
3aa9b 50b 7E 66 66 7E 
3aa9f 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3aaa3 50d 70 3C 1C 00 
3aaa7 50e 00 00 00 00 
3aaab 50f 00 00 18 18 
3aaaf 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3aab3 511 18 18 18 00 
3aab7 512 00 00 00 00 
3aabb 513 00 00 18 18 
3aabf 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3aac3 515 18 18 18 0C 
3aac7 516 04 00 00 00 
3aacb 517 70 38 1C 0E 
3aacf 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3aad3 519 70 00 00 00 
3aad7 51a 00 00 00 00 
3aadb 51b 00 00 7E 7E 
3aadf 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3aae3 51d 00 00 00 00 
3aae7 51e 00 00 00 00 | 	byte	$00[8]
3aaeb 51f 0E 1C 38 70 
3aaef 520 E0 70 38 1C 
3aaf3 521 0E 00 00 00 
3aaf7 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3aafb 523 7E 66 66 30 
3aaff 524 30 18 18 18 
3ab03 525 00 18 18 00 
3ab07 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3ab0b 527 7E 66 66 66 
3ab0f 528 66 36 06 66 
3ab13 529 66 7E 3C 00 
3ab17 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3ab1b 52b 3C 7E 66 66 
3ab1f 52c 66 7E 7E 66 
3ab23 52d 66 66 66 00 
3ab27 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3ab2b 52f 7E 66 66 7E 
3ab2f 530 3E 66 66 66 
3ab33 531 66 7E 3E 00 
3ab37 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3ab3b 533 7E 66 66 06 
3ab3f 534 06 06 06 66 
3ab43 535 66 7E 3C 00 
3ab47 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3ab4b 537 7E 66 66 66 
3ab4f 538 66 66 66 66 
3ab53 539 66 7E 3E 00 
3ab57 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3ab5b 53b 7E 06 06 3E 
3ab5f 53c 3E 06 06 06 
3ab63 53d 06 7E 7E 00 
3ab67 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3ab6b 53f 7E 06 06 3E 
3ab6f 540 3E 06 06 06 
3ab73 541 06 06 06 00 
3ab77 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3ab7b 543 7E 06 06 76 
3ab7f 544 76 66 66 66 
3ab83 545 66 7E 3C 00 
3ab87 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3ab8b 547 66 66 66 7E 
3ab8f 548 7E 66 66 66 
3ab93 549 66 66 66 00 
3ab97 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3ab9b 54b 7E 18 18 18 
3ab9f 54c 18 18 18 18 
3aba3 54d 18 7E 7E 00 
3aba7 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3abab 54f 60 60 60 60 
3abaf 550 60 60 60    | 	byte	$60[7]
3abb2 551 66 66 7E 3C 
3abb6 552 00 00 00 00 
3abba 553 66 66 36 36 
3abbe 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3abc2 555 66 66 C6 C6 
3abc6 556 00 00 00 00 
3abca 557 06 06 06 06 
3abce 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3abd2 559 06 06 7E 7E 
3abd6 55a 00 00 00 00 
3abda 55b C6 C6 EE EE 
3abde 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3abe2 55d C6 C6 C6 C6 
3abe6 55e 00 00 00 00 
3abea 55f 66 66 66 6E 
3abee 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3abf2 561 76 66 66 66 
3abf6 562 00 00 00 00 
3abfa 563 3C 7E 66 66 
3abfe 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3ac02 565 66 66 7E 3C 
3ac06 566 00 00 00 00 
3ac0a 567 3E 7E 66 66 
3ac0e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3ac12 569 06 06 06 06 
3ac16 56a 00 00 00 00 
3ac1a 56b 3C 7E 66 66 
3ac1e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3ac22 56d 66 56 3E 6C 
3ac26 56e 00 00 00 00 
3ac2a 56f 3E 7E 66 66 
3ac2e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3ac32 571 66 66 C6 C6 
3ac36 572 00 00 00 00 
3ac3a 573 7C 7E 06 06 
3ac3e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3ac42 575 60 60 7E 3E 
3ac46 576 00 00 00 00 
3ac4a 577 7E 7E 18 18 
3ac4e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3ac52 579 18 18 18 18 
3ac56 57a 00 00 00 00 
3ac5a 57b 66 66 66 66 
3ac5e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3ac62 57d 66 66 7E 3C 
3ac66 57e 00 00 00 00 
3ac6a 57f 66 66 66 66 
3ac6e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3ac72 581 3C 3C 18 18 
3ac76 582 00 00 00 00 
3ac7a 583 C6 C6 C6 C6 
3ac7e 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3ac82 585 FE EE C6 82 
3ac86 586 00 00 00 00 
3ac8a 587 66 66 66 3C 
3ac8e 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3ac92 589 3C 66 66 66 
3ac96 58a 00 00 00 00 
3ac9a 58b 66 66 66 66 
3ac9e 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3aca2 58d 18 18 18 18 
3aca6 58e 00 00 00 00 
3acaa 58f 7E 7E 30 30 
3acae 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3acb2 591 06 06 7E 7E 
3acb6 592 00 00 00 00 
3acba 593 3C 3C 0C 0C 
3acbe 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3acc2 595 0C 0C 3C 3C 
3acc6 596 00 00 00 00 
3acca 597 06 06 0C 0C 
3acce 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3acd2 599 60 60 C0 C0 
3acd6 59a 00 00 00 00 
3acda 59b 3C 3C 30 30 
3acde 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3ace2 59d 30 30 3C 3C 
3ace6 59e 00 00 00 00 
3acea 59f 18 18 3C 3C 
3acee 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3acf2 5a1 00 00 00 00 
3acf6 5a2 00 00 00 00 
3acfa 5a3 00 00 00 00 
3acfe 5a4 00 00 00 00 
3ad02 5a5 00 00       | 	byte	$00[18]
3ad04 5a6 FE FE 00 00 
3ad08 5a7 00 00 0C 0C 
3ad0c 5a8 18 18 00 00 
3ad10 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3ad14 5aa 00 00 00 00 
3ad18 5ab 00 00 00 00 
3ad1c 5ac 00          | 	byte	$00[9]
3ad1d 5ac 3C 7C 60 7C 
3ad21 5ad 7E 66 66 7E 
3ad25 5ae 7C 00 00 00 
3ad29 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3ad2d 5b0 3E 7E 66 66 
3ad31 5b1 66 66 66 7E 
3ad35 5b2 3E 00 00 00 
3ad39 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3ad3d 5b4 3C 3E 06 06 
3ad41 5b5 06 06 06 7E 
3ad45 5b6 7C 00 00 00 
3ad49 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3ad4d 5b8 7C 7E 66 66 
3ad51 5b9 66 66 66 7E 
3ad55 5ba 7C 00 00 00 
3ad59 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3ad5d 5bc 3C 7E 66 66 
3ad61 5bd 7E 06 06 7E 
3ad65 5be 7C 00 00 00 
3ad69 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3ad6d 5c0 18 7E 7E 18 
3ad71 5c1 18 18 18 18 
3ad75 5c2 18 00 00 00 
3ad79 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ad7d 5c4 7C 7E 66 66 
3ad81 5c5 66 66 7E 7C 
3ad85 5c6 60 7E 3E 00 
3ad89 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3ad8d 5c8 3E 7E 66 66 
3ad91 5c9 66 66 66 66 
3ad95 5ca 66 00 00 00 
3ad99 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3ad9d 5cc 1C 1C 18 18 
3ada1 5cd 18 18 18 3C 
3ada5 5ce 3C 00 00 00 
3ada9 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3adad 5d0 30 30 30 30 
3adb1 5d1 30 30 30 30 
3adb5 5d2 30          | 	byte	$30[9]
3adb6 5d2 3E 1E 00 00 
3adba 5d3 06 06 06 36 
3adbe 5d4 36 1E 1E 1E 
3adc2 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3adc6 5d6 00 00 00 00 
3adca 5d7 1C 1C 18 18 
3adce 5d8 18 18 18 18 
3add2 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3add6 5da 00 00 00 00 
3adda 5db 00 00 00    | 	byte	$00[7]
3addd 5dc 6C FE FE D6 
3ade1 5dd D6 C6 C6 C6 
3ade5 5de C6 00 00 00 
3ade9 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3aded 5e0 3E 7E 66 66 
3adf1 5e1 66 66 66 66 
3adf5 5e2 66 00 00 00 
3adf9 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3adfd 5e4 3C 7E 66 66 
3ae01 5e5 66 66 66 7E 
3ae05 5e6 3C 00 00 00 
3ae09 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3ae0d 5e8 3E 7E 66 66 
3ae11 5e9 66 66 66 7E 
3ae15 5ea 3E 06 06 00 
3ae19 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3ae1d 5ec 7C 7E 66 66 
3ae21 5ed 66 66 66 7E 
3ae25 5ee 7C 60 60 00 
3ae29 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3ae2d 5f0 3E 7E 66 06 
3ae31 5f1 06 06 06 06 
3ae35 5f2 06 00 00 00 
3ae39 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3ae3d 5f4 7C 7E 06 0E 
3ae41 5f5 3C 70 60 7E 
3ae45 5f6 3E 00 00 00 
3ae49 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3ae4d 5f8 7E 7E 18 18 
3ae51 5f9 18 18 18 78 
3ae55 5fa 70 00 00 00 
3ae59 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3ae5d 5fc 66 66 66 66 
3ae61 5fd 66 66 66    | 	byte	$66[7]
3ae64 5fe 7E 7C 00 00 
3ae68 5ff 00 00 00 00 
3ae6c 600 00 66 66 66 
3ae70 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3ae74 602 18 18 00 00 
3ae78 603 00 00 00 00 
3ae7c 604 00 C6 C6 D6 
3ae80 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3ae84 606 C6 82 00 00 
3ae88 607 00 00 00 00 
3ae8c 608 00 66 66 3C 
3ae90 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3ae94 60a 66 66 00 00 
3ae98 60b 00 00 00 00 
3ae9c 60c 00 66 66 66 
3aea0 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3aea4 60e 7C 60 7E 3E 
3aea8 60f 00 00 00 00 
3aeac 610 00 7E 7E 30 
3aeb0 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3aeb4 612 7E 7E 00 00 
3aeb8 613 00 00 30 18 
3aebc 614 18 18 18 0C 
3aec0 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3aec4 616 18 30 00 00 
3aec8 617 00 00 18 18 
3aecc 618 18 18 18 18 
3aed0 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3aed4 61a 18 18 00 00 
3aed8 61b 00 00 0C 18 
3aedc 61c 18 18 18 30 
3aee0 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3aee4 61e 18 0C 00 00 
3aee8 61f 00 00 6C 7E 
3aeec 620 36 00 00 00 
3aef0 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3aef4 622 00 00 00 00 
3aef8 623 00 00 00 00 
3aefc 624 00          | 	byte	$00[9]
3aefd 624 18 18 18 18 
3af01 625 18 18 00 00 
3af05 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3af08 627             | 'amiga_font     file "amigafont.def"
3af08 627 00 6C FE FE 
3af0c 628 7C 38 10 00 
3af10 629 18 18 18 F8 
3af14 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3af18 62b C0 C0 C0 C0 
3af1c 62c C0 C0 C0 C0 | 	byte	$c0[8]
3af20 62d 18 18 18 1F 
3af24 62e 1F 00 00 00 
3af28 62f 18 18 18 1F 
3af2c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3af30 631 00 00 00 1F 
3af34 632 1F 18 18 18 
3af38 633 C0 E0 70 38 
3af3c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3af40 635 03 07 0E 1C 
3af44 636 38 70 E0 C0 
3af48 637 80 C0 E0 F0 
3af4c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3af50 639 00 00 00 00 
3af54 63a F0 F0 F0 F0 
3af58 63b 01 03 07 0F 
3af5c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3af60 63d F0 F0 F0 F0 
3af64 63e 00 00 00 00 
3af68 63f 0F 0F 0F 0F 
3af6c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3af70 641 FF FF 00 00 
3af74 642 00 00 00 00 
3af78 643 00 00 00 00 
3af7c 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3af80 645 00 00 00 00 
3af84 646 0F 0F 0F 0F 
3af88 647 00 38 38 EE 
3af8c 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3af90 649 00 00 00 F8 
3af94 64a F8 18 18 18 
3af98 64b 00 00 00 FF 
3af9c 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3afa0 64d 18 18 18 FF 
3afa4 64e FF 18 18 18 
3afa8 64f 00 00 3C 7E 
3afac 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3afb0 651 00 00 00 00 
3afb4 652 FF FF FF FF 
3afb8 653 03 03 03 03 
3afbc 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3afc0 655 00 00 00 FF 
3afc4 656 FF 18 18 18 
3afc8 657 18 18 18 FF 
3afcc 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3afd0 659 0F 0F 0F 0F 
3afd4 65a 0F 0F 0F 0F | 	byte	$0f[8]
3afd8 65b 18 18 18 F8 
3afdc 65c F8 00 00 00 
3afe0 65d 1E 06 1E 06 
3afe4 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3afe8 65f 00 18 3C 7E 
3afec 660 18 18 18 00 
3aff0 661 00 18 18 18 
3aff4 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3aff8 663 00 18 0C 7E 
3affc 664 0C 18 00 00 
3b000 665 00 18 30 7E 
3b004 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3b008 667 00 00 00 00 
3b00c 668 00 00 00 00 
3b010 669 00          | 	byte	$00[9]
3b011 669 18 18 18 18 
3b015 66a 00 18 00 00 
3b019 66b 66 66 66 00 
3b01d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3b021 66d 66 FF 66 66 
3b025 66e FF 66 00 18 
3b029 66f 7C 06 3C 60 
3b02d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3b031 671 66 36 18 0C 
3b035 672 66 62 00 38 
3b039 673 6C 38 1C F6 
3b03d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3b041 675 18 18 18 00 
3b045 676 00 00 00 00 
3b049 677 70 38 18 18 
3b04d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3b051 679 0E 1C 18 18 
3b055 67a 1C 0E 00 00 
3b059 67b 66 3C FF 3C 
3b05d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3b061 67d 18 18 7E 18 
3b065 67e 18 00 00 00 
3b069 67f 00 00 00 00 
3b06d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3b071 681 00 00 7E 00 
3b075 682 00 00 00 00 
3b079 683 00 00 00 00 
3b07d 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3b081 685 60 30 18 0C 
3b085 686 06 02 00 00 
3b089 687 3C 66 76 6E 
3b08d 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3b091 689 18 1C 18 18 
3b095 68a 18 7E 00 00 
3b099 68b 3C 66 30 18 
3b09d 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3b0a1 68d 7E 30 18 30 
3b0a5 68e 66 3C 00 00 
3b0a9 68f 30 38 3C 36 
3b0ad 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3b0b1 691 7E 06 3E 60 
3b0b5 692 66 3C 00 00 
3b0b9 693 3C 06 3E 66 
3b0bd 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3b0c1 695 7E 60 30 18 
3b0c5 696 0C 0C 00 00 
3b0c9 697 3C 66 3C 66 
3b0cd 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3b0d1 699 3C 66 7C 60 
3b0d5 69a 30 1C 00 00 
3b0d9 69b 00 18 18 00 
3b0dd 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3b0e1 69d 00 18 18 00 
3b0e5 69e 18 18 0C 60 
3b0e9 69f 30 18 0C 18 
3b0ed 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3b0f1 6a1 00 7E 00 00 
3b0f5 6a2 7E 00 00 06 
3b0f9 6a3 0C 18 30 18 
3b0fd 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3b101 6a5 3C 66 30 18 
3b105 6a6 00 18 00 00 
3b109 6a7 3C 66 76 76 
3b10d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3b111 6a9 18 3C 66 66 
3b115 6aa 7E 66 00 00 
3b119 6ab 3E 66 3E 66 
3b11d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3b121 6ad 3C 66 06 06 
3b125 6ae 66 3C 00 00 
3b129 6af 1E 36 66 66 
3b12d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3b131 6b1 7E 06 3E 06 
3b135 6b2 06 7E 00 00 
3b139 6b3 7E 06 3E 06 
3b13d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3b141 6b5 7C 06 06 76 
3b145 6b6 66 7C 00 00 
3b149 6b7 66 66 7E 66 
3b14d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3b151 6b9 7E 18 18 18 
3b155 6ba 18 7E 00 00 
3b159 6bb 60 60 60 60 
3b15d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3b161 6bd 66 36 1E 1E 
3b165 6be 36 66 00 00 
3b169 6bf 06 06 06 06 
3b16d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3b171 6c1 C6 EE FE D6 
3b175 6c2 C6 C6 00 00 
3b179 6c3 66 6E 7E 7E 
3b17d 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3b181 6c5 3C 66 66 66 
3b185 6c6 66 3C 00 00 
3b189 6c7 3E 66 66 3E 
3b18d 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3b191 6c9 3C 66 66 66 
3b195 6ca 36 6C 00 00 
3b199 6cb 3E 66 66 3E 
3b19d 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3b1a1 6cd 3C 06 3C 60 
3b1a5 6ce 60 3C 00 00 
3b1a9 6cf 7E 18 18 18 
3b1ad 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3b1b1 6d1 66 66 66 66 
3b1b5 6d2 66          | 	byte	$66[5]
3b1b6 6d2 7E 00 00 66 
3b1ba 6d3 66 66 66 3C 
3b1be 6d4 18 00 00 C6 
3b1c2 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3b1c6 6d6 C6 00 00 66 
3b1ca 6d7 66 3C 3C 66 
3b1ce 6d8 66 00 00 66 
3b1d2 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3b1d6 6da 18 00 00 7E 
3b1da 6db 30 18 0C 06 
3b1de 6dc 7E 00 00 78 
3b1e2 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3b1e6 6de 78 00 00 02 
3b1ea 6df 06 0C 18 30 
3b1ee 6e0 60 00 00 1E 
3b1f2 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3b1f6 6e2 1E 00 00 10 
3b1fa 6e3 38 6C C6 00 
3b1fe 6e4 00 00 00 00 
3b202 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b206 6e6 FF 00 00 18 
3b20a 6e7 3C 7E 7E 3C 
3b20e 6e8 18 00 00 00 
3b212 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3b216 6ea 7C 00 00 06 
3b21a 6eb 06 3E 66 66 
3b21e 6ec 3E 00 00 00 
3b222 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3b226 6ee 3C 00 00 60 
3b22a 6ef 60 7C 66 66 
3b22e 6f0 7C 00 00 00 
3b232 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3b236 6f2 3C 00 00 70 
3b23a 6f3 18 7C 18 18 
3b23e 6f4 18 00 00 00 
3b242 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3b246 6f6 60 3E 00 06 
3b24a 6f7 06 3E 66 66 
3b24e 6f8 66 00 00 18 
3b252 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3b256 6fa 3C 00 00 60 
3b25a 6fb 00 60 60 60 
3b25e 6fc 60 3C 00 06 
3b262 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3b266 6fe 66 00 00 1C 
3b26a 6ff 18 18 18 18 
3b26e 700 3C 00 00 00 
3b272 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3b276 702 C6 00 00 00 
3b27a 703 3E 66 66 66 
3b27e 704 66 00 00 00 
3b282 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3b286 706 3C 00 00 00 
3b28a 707 3E 66 66 3E 
3b28e 708 06 06 00 00 
3b292 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3b296 70a 60 60 00 00 
3b29a 70b 3E 66 06 06 
3b29e 70c 06 00 00 00 
3b2a2 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3b2a6 70e 3E 00 00 18 
3b2aa 70f 7E 18 18 18 
3b2ae 710 70 00 00 00 
3b2b2 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3b2b6 712 7C 00 00 00 
3b2ba 713 66 66 66 3C 
3b2be 714 18 00 00 00 
3b2c2 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3b2c6 716 6C 00 00 00 
3b2ca 717 66 3C 18 3C 
3b2ce 718 66 00 00 00 
3b2d2 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3b2d6 71a 30 1E 00 00 
3b2da 71b 7E 30 18 0C 
3b2de 71c 7E 00 00 18 
3b2e2 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3b2e6 71e 3C 00 18 18 
3b2ea 71f 18 18 18 18 
3b2ee 720 18 18 00 7E 
3b2f2 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3b2f6 722 60 00 10 18 
3b2fa 723 1C 1E 1C 18 
3b2fe 724 10 00 08 18 
3b302 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3b306 726 08 00       | 	byte	$08, $00
3b308 727 00 00 00 00 
3b30c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3b30d 728 80 00 00 00 
3b311 729 00 80 00 00 
3b315 72a 80 80 00 00 
3b319 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3b31d 72c 80 00 80 00 
3b321 72d 00 40 80 00 
3b325 72e AA AA AA 00 
3b329 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3b32d 730 FF 00 00 00 
3b331 731 00 FF 00 00 
3b335 732 FF FF 00 00 
3b339 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3b33d 734 FF 00 FF 00 
3b341 735 00 FF FF 00 
3b345 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3b348 737 00 00 00 00 
3b34c 738 00          | ataripalette   file "ataripalettep2.def"
3b34d 738 11 11 11 00 
3b351 739 22 22 22 00 
3b355 73a 33 33 33 00 
3b359 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3b35d 73c 55 55 55 00 
3b361 73d 66 66 66 00 
3b365 73e 77 77 77 00 
3b369 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3b36d 740 99 99 99 00 
3b371 741 AA AA AA 00 
3b375 742 BB BB BB 00 
3b379 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3b37d 744 DD DD DD 00 
3b381 745 EE EE EE 00 
3b385 746 FF FF FF 00 
3b389 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3b38d 748 00 14 40 00 
3b391 749 00 1E 60 00 
3b395 74a 00 28 80 00 
3b399 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3b39d 74c 00 3C BF 00 
3b3a1 74d 00 46 DF 00 
3b3a5 74e 00 50 FF 00 
3b3a9 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3b3ad 750 39 77 FF 00 
3b3b1 751 55 8A FF 00 
3b3b5 752 71 9E FF 00 
3b3b9 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3b3bd 754 AA C5 FF 00 
3b3c1 755 C6 D8 FF 00 
3b3c5 756 E3 EC FF 00 
3b3c9 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3b3cd 758 00 00 40 00 
3b3d1 759 00 00 60 00 
3b3d5 75a 00 00 80 00 
3b3d9 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3b3dd 75c 00 00 BF 00 
3b3e1 75d 00 00 DF 00 
3b3e5 75e 00 00 FF 00 
3b3e9 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3b3ed 760 39 39 FF 00 
3b3f1 761 55 55 FF 00 
3b3f5 762 71 71 FF 00 
3b3f9 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3b3fd 764 AA AA FF 00 
3b401 765 C6 C6 FF 00 
3b405 766 E3 E3 FF 00 
3b409 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3b40d 768 20 00 40 00 
3b411 769 30 00 60 00 
3b415 76a 40 00 80 00 
3b419 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3b41d 76c 60 00 BF 00 
3b421 76d 70 00 DF 00 
3b425 76e 80 00 FF 00 
3b429 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3b42d 770 9C 39 FF 00 
3b431 771 AA 55 FF 00 
3b435 772 B8 71 FF 00 
3b439 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3b43d 774 D5 AA FF 00 
3b441 775 E3 C6 FF 00 
3b445 776 F1 E3 FF 00 
3b449 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3b44d 778 40 00 40 00 
3b451 779 60 00 60 00 
3b455 77a 80 00 80 00 
3b459 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3b45d 77c BF 00 BF 00 
3b461 77d DF 00 DF 00 
3b465 77e FF 00 FF 00 
3b469 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3b46d 780 FF 39 FF 00 
3b471 781 FF 55 FF 00 
3b475 782 FF 71 FF 00 
3b479 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3b47d 784 FF AA FF 00 
3b481 785 FF C6 FF 00 
3b485 786 FF E3 FF 00 
3b489 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3b48d 788 40 00 20 00 
3b491 789 60 00 30 00 
3b495 78a 80 00 40 00 
3b499 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3b49d 78c BF 00 60 00 
3b4a1 78d DF 00 70 00 
3b4a5 78e FF 00 80 00 
3b4a9 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3b4ad 790 FF 39 9C 00 
3b4b1 791 FF 55 AA 00 
3b4b5 792 FF 71 B8 00 
3b4b9 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3b4bd 794 FF AA D5 00 
3b4c1 795 FF C6 E3 00 
3b4c5 796 FF E3 F1 00 
3b4c9 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3b4cd 798 40 00 00 00 
3b4d1 799 60 00 00 00 
3b4d5 79a 80 00 00 00 
3b4d9 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3b4dd 79c BF 00 00 00 
3b4e1 79d DF 00 00 00 
3b4e5 79e FF 00 00 00 
3b4e9 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3b4ed 7a0 FF 39 39 00 
3b4f1 7a1 FF 55 55 00 
3b4f5 7a2 FF 71 71 00 
3b4f9 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3b4fd 7a4 FF AA AA 00 
3b501 7a5 FF C6 C6 00 
3b505 7a6 FF E3 E3 00 
3b509 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3b50d 7a8 40 10 00 00 
3b511 7a9 60 18 00 00 
3b515 7aa 80 20 00 00 
3b519 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3b51d 7ac BF 30 00 00 
3b521 7ad DF 38 00 00 
3b525 7ae FF 40 00 00 
3b529 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3b52d 7b0 FF 6A 39 00 
3b531 7b1 FF 80 55 00 
3b535 7b2 FF 95 71 00 
3b539 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3b53d 7b4 FF BF AA 00 
3b541 7b5 FF D5 C6 00 
3b545 7b6 FF EA E3 00 
3b549 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3b54d 7b8 40 20 00 00 
3b551 7b9 60 30 00 00 
3b555 7ba 80 40 00 00 
3b559 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3b55d 7bc BF 60 00 00 
3b561 7bd DF 70 00 00 
3b565 7be FF 80 00 00 
3b569 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3b56d 7c0 FF 9C 39 00 
3b571 7c1 FF AA 55 00 
3b575 7c2 FF B8 71 00 
3b579 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3b57d 7c4 FF D5 AA 00 
3b581 7c5 FF E3 C6 00 
3b585 7c6 FF F1 E3 00 
3b589 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3b58d 7c8 40 30 00 00 
3b591 7c9 60 48 00 00 
3b595 7ca 80 60 00 00 
3b599 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3b59d 7cc BF 90 00 00 
3b5a1 7cd DF A8 00 00 
3b5a5 7ce FF C0 00 00 
3b5a9 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3b5ad 7d0 FF CE 39 00 
3b5b1 7d1 FF D5 55 00 
3b5b5 7d2 FF DC 71 00 
3b5b9 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3b5bd 7d4 FF EA AA 00 
3b5c1 7d5 FF F1 C6 00 
3b5c5 7d6 FF F8 E3 00 
3b5c9 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3b5cd 7d8 30 40 00 00 
3b5d1 7d9 48 60 00 00 
3b5d5 7da 60 80 00 00 
3b5d9 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3b5dd 7dc 90 BF 00 00 
3b5e1 7dd A8 DF 00 00 
3b5e5 7de C0 FF 00 00 
3b5e9 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3b5ed 7e0 CE FF 39 00 
3b5f1 7e1 D5 FF 55 00 
3b5f5 7e2 DC FF 71 00 
3b5f9 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3b5fd 7e4 EA FF AA 00 
3b601 7e5 F1 FF C6 00 
3b605 7e6 F8 FF E3 00 
3b609 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3b60d 7e8 00 40 00 00 
3b611 7e9 00 60 00 00 
3b615 7ea 00 80 00 00 
3b619 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3b61d 7ec 00 BF 00 00 
3b621 7ed 00 DF 00 00 
3b625 7ee 00 FF 00 00 
3b629 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3b62d 7f0 39 FF 39 00 
3b631 7f1 55 FF 55 00 
3b635 7f2 71 FF 71 00 
3b639 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3b63d 7f4 AA FF AA 00 
3b641 7f5 C6 FF C6 00 
3b645 7f6 E3 FF E3 00 
3b649 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3b64d 7f8 00 40 14 00 
3b651 7f9 00 60 1E 00 
3b655 7fa 00 80 28 00 
3b659 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3b65d 7fc 00 BF 3C 00 
3b661 7fd 00 DF 46 00 
3b665 7fe 00 FF 50 00 
3b669 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3b66d 800 39 FF 77 00 
3b671 801 55 FF 8A 00 
3b675 802 71 FF 9E 00 
3b679 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3b67d 804 AA FF C5 00 
3b681 805 C6 FF D8 00 
3b685 806 E3 FF EC 00 
3b689 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3b68d 808 00 40 28 00 
3b691 809 00 60 3C 00 
3b695 80a 00 80 50 00 
3b699 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3b69d 80c 00 BF 78 00 
3b6a1 80d 00 DF 8C 00 
3b6a5 80e 00 FF A0 00 
3b6a9 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3b6ad 810 39 FF B5 00 
3b6b1 811 55 FF C0 00 
3b6b5 812 71 FF CA 00 
3b6b9 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3b6bd 814 AA FF DF 00 
3b6c1 815 C6 FF EA 00 
3b6c5 816 E3 FF F4 00 
3b6c9 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3b6cd 818 00 40 40 00 
3b6d1 819 00 60 60 00 
3b6d5 81a 00 80 80 00 
3b6d9 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3b6dd 81c 00 BF BF 00 
3b6e1 81d 00 DF DF 00 
3b6e5 81e 00 FF FF 00 
3b6e9 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3b6ed 820 39 FF FF 00 
3b6f1 821 55 FF FF 00 
3b6f5 822 71 FF FF 00 
3b6f9 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3b6fd 824 AA FF FF 00 
3b701 825 C6 FF FF 00 
3b705 826 E3 FF FF 00 
3b709 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3b70d 828 00 28 40 00 
3b711 829 00 3C 60 00 
3b715 82a 00 50 80 00 
3b719 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3b71d 82c 00 78 BF 00 
3b721 82d 00 8C DF 00 
3b725 82e 00 A0 FF 00 
3b729 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3b72d 830 39 B5 FF 00 
3b731 831 55 C0 FF 00 
3b735 832 71 CA FF 00 
3b739 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3b73d 834 AA DF FF 00 
3b741 835 C6 EA FF 00 
3b745 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3b748 837             | 
3b748 837             | '**********************************************************************************
3b748 837             | '
3b748 837             | '        Timings and colors definitions
3b748 837             | '
3b748 837             | '**********************************************************************************
3b748 837             | 
3b748 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3b748 837 08 00 00 00 
3b74c 838 3C 00 00 00 
3b750 839 08 00 00 00 
3b754 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3b758 83b 07 00 00 00 
3b75c 83c 04 00 00 00 
3b760 83d 01 00 00 00 
3b764 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3b768 83f 58 02 00 00 
3b76c 840 20 9E 4B 14 
3b770 841 FB A8 9E 01 
3b774 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3b778 843 00 00 00 00 
3b77c 844 C0 00 00 00 
3b780 845 00 00 00 00 
3b784 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b788 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3b788 847 00 75 C7 97 
3b78c 848 27 47 F6 0A 
3b790 849 05 79 CB 9B 
3b794 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3b798 84b             | 
3b798 84b             | ''--------  Initialization  ----------------------------------------------------------------
3b798 84b             | 
3b798 84b 28 0C 64 FD | hdmi            setq    #6
3b79c 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3b7a0 84d 28 10 64 FD |                 setq    #8
3b7a4 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3b7a8 84f             | 
3b7a8 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3b7ac 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3b7b0 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3b7b4 852 D6 C6 01 F1 |                 add     t1,hbase
3b7b8 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3b7bc 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3b7c0 855 7B 0B 80 5F 
3b7c4 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3b7c8 857 66 66 86 FF 
3b7cc 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3b7d0 859             | '
3b7d0 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3b7d4 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3b7d8 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3b7dc 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3b7e0 85d             | 
3b7e0 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3b7e4 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3b7e8 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3b7ec 860             | 
3b7ec 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3b7ec 860             | 
3b7ec 860 28 06 64 FD | p101            setq 	#3
3b7f0 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3b7f4 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3b7f8 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3b7fc 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3b800 865 00 A0 05 F6 |                 mov     dlinum, #0
3b804 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3b808 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3b80c 868             | 
3b80c 868             | 
3b80c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3b810 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3b814 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3b818 86b             |                 
3b818 86b             | 
3b818 86b             | 
3b818 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3b818 86b             |   
3b818 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3b81c 86c 29 FE 65 3D |          if_nc  setq2   #255
3b820 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3b824 86e             | 
3b824 86e             | '' -----   up porch (before the picture)
3b824 86e             | 
3b824 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3b828 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3b82c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3b830 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3b834 872             |  
3b834 872             |    
3b834 872             |  
3b834 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3b838 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3b83c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3b840 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3b844 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3b848 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3b84c 878             | 
3b84c 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3b850 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
3b854 87a 48 00 B0 FD | 		call    #dli
3b858 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3b85c 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3b860 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3b864 87e             |                 	
3b864 87e             |                 
3b864 87e             | 
3b864 87e             |  
3b864 87e             | '' ------- the main screen drawing starts here
3b864 87e             | 
3b864 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3b868 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3b86c 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3b870 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
3b874 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3b878 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3b87c 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3b880 885             |               
3b880 885             | 
3b880 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3b884 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3b888 887             | 
3b888 887             | ' ---------------- All visible lines displayed now, start vblank  
3b888 887             | 
3b888 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3b88c 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3b890 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3b894 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3b898 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3b89c 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3b8a0 88d             | 
3b8a0 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3b8a0 88d             | 
3b8a0 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3b8a0 88d             | 
3b8a0 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3b8a4 88e             | 
3b8a4 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3b8a8 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3b8ac 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3b8b0 891             | 
3b8b0 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3b8b4 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3b8b8 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3b8bc 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3b8c0 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3b8c4 896             | 
3b8c4 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3b8c8 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3b8cc 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3b8d0 899 70 00 90 AD |     if_z        jmp     #preload
3b8d4 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3b8d8 89b 94 00 90 AD |     if_z        jmp     #preload2
3b8dc 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3b8e0 89d 0C 00 90 AD |     if_z        jmp     #p390
3b8e4 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3b8e8 89f 28 00 90 AD |     if_z        jmp     #p391  
3b8ec 8a0             | 
3b8ec 8a0 2D 00 64 FD | p308            ret
3b8f0 8a1             |    
3b8f0 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3b8f4 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3b8f8 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3b8fc 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3b900 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3b904 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3b908 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3b90c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3b910 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3b914 8aa             |  
3b914 8aa             | '' --------  Reload palette. To do 
3b914 8aa             | 
3b914 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3b918 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3b91c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3b920 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3b924 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3b928 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3b92c 8b0 70 FF 9F FD |         	jmp     #dli                
3b930 8b1             |       
3b930 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3b930 8b1             | 
3b930 8b1             | 
3b930 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3b930 8b1             | 
3b930 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3b934 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3b938 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3b93c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3b940 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3b944 8b6             |         
3b944 8b6             | '' -------------- Preload a line from PSRAM        
3b944 8b6             |         
3b944 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3b948 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3b94c 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3b950 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
3b954 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3b958 8bb             | 
3b958 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3b95c 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3b960 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3b964 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3b968 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3b96c 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3b970 8c1             |  
3b970 8c1             |  
3b970 8c1             | preload2      '  incmod  dlinum,#3
3b970 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
3b974 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3b978 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3b97c 8c4 28 02 64 FD |                 setq	#1
3b980 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3b984 8c6             |                 
3b984 8c6             | 
3b984 8c6             | '' -------------- Draw sprites
3b984 8c6             | 
3b984 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3b988 8c7 10 5C 0E F5 | 		and t8,#16 wz
3b98c 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3b990 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3b994 8ca             | 		
3b994 8ca             | 
3b994 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3b998 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3b99c 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3b9a0 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3b9a4 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3b9a8 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3b9ac 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3b9b0 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3b9b4 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3b9b8 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3b9bc 8d4 01 52 86 F1 |                 sub     sprite_h,#1
3b9c0 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3b9c4 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3b9c8 8d7             | 
3b9c8 8d7             | 
3b9c8 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3b9cc 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3b9d0 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3b9d4 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3b9d8 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3b9dc 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3b9e0 8dd 00 5E 06 F6 |                 mov 	t9,#0
3b9e4 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3b9e8 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3b9ec 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3b9f0 8e1             |      
3b9f0 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3b9f4 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3b9f8 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3b9fc 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3ba00 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3ba04 8e6             |                 
3ba04 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3ba08 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3ba0c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3ba10 8e9             |   		
3ba10 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3ba14 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3ba18 8eb             | 
3ba18 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3ba1c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3ba20 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3ba24 8ee             |  
3ba24 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3ba28 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3ba2c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3ba30 8f1             | 	
3ba30 8f1             | 	
3ba30 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3ba34 8f2 28 CD 01 F1 | 		add	t4,sprite_w
3ba38 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3ba3c 8f4             | 
3ba3c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3ba40 8f5             | 
3ba40 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3ba44 8f6 01 58 86 F1 | 	 	sub     t6,#1
3ba48 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3ba4c 8f8             | 
3ba4c 8f8 28 58 62 FD |                 setq   	t6
3ba50 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3ba54 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3ba58 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3ba5c 8fc 24 00 90 AD |         if_z    jmp #p898
3ba60 8fd             |          
3ba60 8fd             |         
3ba60 8fd 70 5F 06 F6 |                 mov  t9,#368
3ba64 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3ba68 8ff             | 
3ba68 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3ba6c 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3ba70 901 FF FF 7F FF 
3ba74 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3ba78 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3ba7c 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3ba80 905 2D 01 00 F5 |                 and 0-0, t7
3ba84 906             |                
3ba84 906             | 
3ba84 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3ba88 907 E5 E0 7A FA |                 wmlong 368,t3				
3ba8c 908             |                 
3ba8c 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3ba90 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3ba94 90a 2D 00 64 FD |                 ret
3ba98 90b             | 	
3ba98 90b             | 	
3ba98 90b             |                
3ba98 90b             |  
3ba98 90b             | '' -------------- Graphics line ------------------------------------------------------------
3ba98 90b             |  
3ba98 90b             | 
3ba98 90b             | '' consts and vars
3ba98 90b             | 
3ba98 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3ba9c 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3baa0 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3baa4 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3baa8 90f             | 
3baa8 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3baac 910             | 
3baac 910             | '------ these longs will be set by setmode function
3baac 910             | 
3baac 910 00 00 00 00 | m_bs            long    0        'blanks before sync
3bab0 911 00 00 00 00 | m_sn            long    0        'sync
3bab4 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3bab8 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3babc 914             | 'm_border        long    0        'left/right borders
3babc 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3bac0 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3bac4 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3bac8 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3bacc 918 00 00 00 00 | i_totalvis      long    0
3bad0 919             | 
3bad0 919             | '-------------------------------------
3bad0 919             |  
3bad0 919 00 00 00 00 | linenum         long    0
3bad4 91a 00 00 00 00 | frames          long    0
3bad8 91b 00 00 00 00 | dlinum long 0
3badc 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3bae0 91d             | 
3bae0 91d 00 00 00 00 | vblankptr       long    0
3bae4 91e 00 00 00 00 | modeptr         long    0
3bae8 91f 00 00 00 00 | paletteptr      long    0
3baec 920 00 00 00 00 | dlptr           long    0
3baf0 921 01 00 00 00 | hbase           long    1
3baf4 922 00 00 00 00 | mailbox         long    0
3baf8 923 00 00 00 00 | spriteptr          long 0
3bafc 924             | 
3bafc 924 00 00 00 00 | cmd             long    0
3bb00 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3bb04 926 00 04 00 00 | buf2            long    1024
3bb08 927 01 00 00 00 | dlptr2          long    1
3bb0c 928 01 00 00 00 | dl              long    1
3bb10 929             | 
3bb10 929 00 00 00 00 | buf1c long 0
3bb14 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
3bb18 92b 01 00 00 00 | framebuf2       long    1
3bb1c 92c 01 00 00 00 | hsync0          long    1
3bb20 92d 01 00 00 00 | hsync1          long    1
3bb24 92e             | 
3bb24 92e 01 00 00 00 | t1              long    1
3bb28 92f 00 00 00 00 | t2 long 0
3bb2c 930 00 00 00 00 | t3 long 0
3bb30 931 00 00 00 00 | t4 long 0
3bb34 932             | 
3bb34 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3bb38 933 00 00 00 00 | rcnt2           long    0
3bb3c 934 00 00 00 00 | rcnt2a          long    0
3bb40 935 00 00 00 00 | roffset         long    0
3bb44 936 00 00 00 00 | rdl             long    0  'dl repeat line
3bb48 937 00 00 00 00 | dlc             long    0  'dl command
3bb4c 938             | 
3bb4c 938 FF FF FF FF | affffffff       long    $ffffffff
3bb50 939 00 00 00 00 | sprite1pointer long 0
3bb54 93a 00 00 00 00 | sprite1xy      long 0
3bb58 93b 00 00 00 00 | sprite1wh      long 0
3bb5c 93c 00 00 00 00 | sprite2pointer long 0
3bb60 93d 00 00 00 00 | sprite2xy      long 0
3bb64 93e 00 00 00 00 | sprite2wh      long 0
3bb68 93f 00 00 00 00 | sprite3pointer long 0
3bb6c 940 00 00 00 00 | sprite3xy      long 0
3bb70 941 00 00 00 00 | sprite3wh      long 0
3bb74 942 00 00 00 00 | sprite4pointer long 0
3bb78 943 00 00 00 00 | sprite4xy      long 0
3bb7c 944 00 00 00 00 | sprite4wh      long 0
3bb80 945 00 00 00 00 | sprite5pointer long 0
3bb84 946 00 00 00 00 | sprite5xy      long 0
3bb88 947 00 00 00 00 | sprite5wh      long 0
3bb8c 948 00 00 00 00 | sprite6pointer long 0
3bb90 949 00 00 00 00 | sprite6xy      long 0
3bb94 94a 00 00 00 00 | sprite6wh      long 0
3bb98 94b 00 00 00 00 | sprite7pointer long 0
3bb9c 94c 00 00 00 00 | sprite7xy      long 0
3bba0 94d 00 00 00 00 | sprite7wh      long 0
3bba4 94e 00 00 00 00 | sprite8pointer long 0
3bba8 94f 00 00 00 00 | sprite8xy      long 0
3bbac 950 00 00 00 00 | sprite8wh      long 0
3bbb0 951 00 00 00 00 | sprite9pointer long 0
3bbb4 952 00 00 00 00 | sprite9xy      long 0
3bbb8 953 00 00 00 00 | sprite9wh      long 0
3bbbc 954 00 00 00 00 | sprite10pointer long 0
3bbc0 955 00 00 00 00 | sprite10xy      long 0
3bbc4 956 00 00 00 00 | sprite10wh      long 0
3bbc8 957 00 00 00 00 | sprite11pointer long 0
3bbcc 958 00 00 00 00 | sprite11xy      long 0
3bbd0 959 00 00 00 00 | sprite11wh      long 0
3bbd4 95a 00 00 00 00 | sprite12pointer long 0
3bbd8 95b 00 00 00 00 | sprite12xy      long 0
3bbdc 95c 00 00 00 00 | sprite12wh      long 0
3bbe0 95d 00 00 00 00 | sprite13pointer long 0
3bbe4 95e 00 00 00 00 | sprite13xy      long 0
3bbe8 95f 00 00 00 00 | sprite13wh      long 0
3bbec 960 00 00 00 00 | sprite14pointer long 0
3bbf0 961 00 00 00 00 | sprite14xy      long 0
3bbf4 962 00 00 00 00 | sprite14wh      long 0
3bbf8 963 00 00 00 00 | sprite15pointer long 0
3bbfc 964 00 00 00 00 | sprite15xy      long 0
3bc00 965 00 00 00 00 | sprite15wh      long 0
3bc04 966 00 00 00 00 | sprite16pointer long 0
3bc08 967 00 00 00 00 | sprite16xy      long 0
3bc0c 968 00 00 00 00 | sprite16wh      long 0
3bc10 969 00 00 00 00 | sprite17pointer long 0
3bc14 96a 00 00 00 00 | sprite17xy      long 0
3bc18 96b 00 00 00 00 | sprite17wh      long 0
3bc1c 96c 00 00 00 00 | sprite18pointer long 0
3bc20 96d 00 00 00 00 | sprite18xy      long 0
3bc24 96e 00 00 00 00 | sprite18wh      long 0
3bc28 96f 00 00 00 00 | spritenum long 0
3bc2c 970             | 
3bc2c 970 00 00 00 00 | spriteline long 0
3bc30 971 84 03 00 00 | sprite_x long 900
3bc34 972 00 00 00 00 | sprite_y long 0
3bc38 973 10 00 00 00 | sprite_w long 16
3bc3c 974 40 00 00 00 | sprite_h long 64
3bc40 975 00 00 00 00 | l2 long 0
3bc44 976 00 00 00 00 | t5 long 0
3bc48 977 00 00 00 00 | t6 long 0
3bc4c 978 00 00 00 00 | t7 long 0
3bc50 979 00 00 00 00 | t8 long 0
3bc54 97a 00 00 00 00 | t9 long 0
3bc58 97b 00 00 00 00 | preloadaddr long 0
3bc5c 97c 00 00 00 00 | preloadlineaddr long 0
3bc60 97d 00 04 00 00 | a1024 long 1024
3bc64 97e             | 
3bc64 97e E0 03 00 00 | aa long 992
3bc68 97f FF 03 00 00 | a1023 long 1023
3bc6c 980 00 10 00 00 | a4096 long 4096
3bc70 981             |  fit 368
3bc70 981             | _psram_spin2_dat_
3bc70 981 00 00 00 00 
      ...             
3bd68 9bf 00 00 00 00 
3bd6c 9c0 00 00 00 00 |     listdata long 0[8*8]
3bd70 9c1             |             orgh
3bd70                 | 
3bd70                 | ' driver state
3bd70     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3bd74     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3bd78                 | 
3bd78                 | ' delay profile
3bd78     07 00 00 00 
3bd7c     00 CF 7B 05 
3bd80     80 D1 F0 08 
3bd84     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3bd88     80 C4 60 0F 
3bd8c     80 39 7A 12 
3bd90     40 2D D9 13 
3bd94     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3bd98                 | 
3bd98                 | ' data to be passed to driver when starting it
3bd98                 | startupData
3bd98     00 00 00 00 |     long    0           ' current frequency
3bd9c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3bda0     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3bda4     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3bda8     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3bdac     B8 BD 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3bdb0     38 BE 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3bdb4     58 BE 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3bdb8                 | 
3bdb8                 | ' data for memory
3bdb8                 | deviceData
3bdb8                 |     ' 16 bank parameters follow (16MB per bank)
3bdb8     00 00 00 00 
      ...             
3bdf0     00 00 00 00 
3bdf4     00 00 00 00 |     long    0[16]                               ' banks 0-15
3bdf8                 |     ' 16 banks of pin parameters follow
3bdf8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3bdfc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3be00     FF FF FF FF 
      ...             
3be30     FF FF FF FF 
3be34     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3be38                 | 
3be38                 | ' data for COG polling
3be38                 | qosData 
3be38     00 00 FF FF 
3be3c     00 00 FF FF 
3be40     00 00 FF FF 
3be44     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3be48     00 00 FF FF 
3be4c     00 00 FF FF 
3be50     00 00 FF FF 
3be54     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3be58                 |     
3be58                 | ' mailbox storage
3be58                 | 
3be58                 | mailboxes
3be58     00 00 00 00 
      ...             
3beb0     00 00 00 00 
3beb4     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3beb8                 | 	alignl
3beb8                 | _psram16drv_spin2_dat_
3beb8                 |                             orgh
3beb8     00 00 00 00 
      ...             
3bed0     00 00 00 00 
3bed4     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3bed8                 | 
3bed8                 | driver_start
3bed8                 |                             org
3bed8 000             | '..................................................................................................
3bed8 000             | ' Memory layout for COG RAM once operational:
3bed8 000             | '
3bed8 000             | '  COG RAM address      Usage
3bed8 000             | '  ---------------      ----
3bed8 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3bed8 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3bed8 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3bed8 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3bed8 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3bed8 000             | '  ~$198-$1F3           State and register variables
3bed8 000             | '
3bed8 000             | ' Also during driver COG startup:
3bed8 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3bed8 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3bed8 000             | '..................................................................................................
3bed8 000             |                             
3bed8 000             | ' Mailbox storage after vector initialization
3bed8 000             | 
3bed8 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3bedc 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3bee0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3bee4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3bee8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3beec 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3bef0 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3bef4 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3bef8 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3befc 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3bf00 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3bf04 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3bf08 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3bf0c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3bf10 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3bf14 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3bf18 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3bf1c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3bf20 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3bf24 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3bf28 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3bf2c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3bf30 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3bf34 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3bf38 018             | 
3bf38 018             | ' Mailbox parameter addresses per COG once patched
3bf38 018             |                             
3bf38 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3bf3c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3bf40 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3bf44 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3bf48 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3bf4c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3bf50 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3bf54 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3bf58 020             | 
3bf58 020             | '..................................................................................................
3bf58 020             | ' Per COG request and state setup and service branching
3bf58 020             |         
3bf58 020             | cog0                 
3bf58 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3bf5c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3bf60 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3bf64 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3bf68 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3bf6c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3bf70 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3bf74 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3bf78 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3bf7c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3bf80 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3bf84 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3bf88 02c             | cog1                        
3bf88 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3bf8c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3bf90 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3bf94 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3bf98 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3bf9c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3bfa0 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3bfa4 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3bfa8 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3bfac 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3bfb0 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3bfb4 037 33 CA 63 FD |                             execf   request-0               'jump to service
3bfb8 038             | cog2                         
3bfb8 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3bfbc 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3bfc0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3bfc4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3bfc8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3bfcc 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3bfd0 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3bfd4 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3bfd8 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3bfdc 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3bfe0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3bfe4 043 33 CA 63 FD |                             execf   request-0               'jump to service
3bfe8 044             | cog3                        
3bfe8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3bfec 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3bff0 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3bff4 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3bff8 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3bffc 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c000 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3c004 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3c008 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3c00c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c010 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c014 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3c018 050             | cog4                        
3c018 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3c01c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3c020 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3c024 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3c028 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c02c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c030 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3c034 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3c038 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3c03c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c040 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c044 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3c048 05c             | cog5                        
3c048 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3c04c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3c050 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3c054 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3c058 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c05c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c060 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3c064 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3c068 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3c06c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c070 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c074 067 33 CA 63 FD |                             execf   request-0               'jump to service
3c078 068             | cog6                        
3c078 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3c07c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3c080 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3c084 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3c088 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c08c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c090 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3c094 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3c098 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3c09c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c0a0 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c0a4 073 33 CA 63 FD |                             execf   request-0               'jump to service
3c0a8 074             | cog7                        
3c0a8 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3c0ac 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3c0b0 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3c0b4 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3c0b8 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c0bc 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c0c0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3c0c4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3c0c8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3c0cc 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c0d0 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c0d4 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3c0d8 080             |                             fit     128
3c0d8 080             | 
3c0d8 080             |                             fit     128
3c0d8 080             | pad                         long    0[128-$]                'align init code to $80
3c0d8 080             | 
3c0d8 080             | '..................................................................................................
3c0d8 080             | 
3c0d8 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3c0d8 080             | 
3c0d8 080             | init                        
3c0d8 080             |                             ' get driver scratch long address in hub
3c0d8 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3c0dc 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3c0e0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3c0e4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3c0e8 084             |                     
3c0e8 084             |                             ' read in the additional LUT RAM code
3c0e8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3c0ec 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3c0f0 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3c0f4 087             | 
3c0f4 087             |                             ' read the startup parameters
3c0f4 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3c0f8 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3c0fc 089             | 
3c0fc 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3c0fc 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3c100 08a             | 
3c100 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3c104 08b 01 00 00 5F 
3c108 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3c10c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3c110 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3c114 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3c118 090             | 
3c118 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3c118 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3c11c 091 01 00 00 FF 
3c120 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3c124 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3c128 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3c12c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3c130 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3c134 097 08 DE 47 F5 |                             or      a, #8
3c138 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3c13c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3c140 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3c144 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3c148 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3c14c 09d 01 DE 07 F1 |                             add     a, #1
3c150 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3c154 09f             |  
3c154 09f             |                             ' setup device control pin states
3c154 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3c158 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3c15c 0a1 01 00 00 FF 
3c160 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3c164 0a3             | 
3c164 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3c168 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3c16c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3c170 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3c174 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3c178 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3c17c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3c180 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3c184 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3c188 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3c18c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3c190 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3c194 0af             | pinloop
3c194 0af             |                             ' generate minimum CE high time before access
3c194 0af A1 07 00 FF 
3c198 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3c19c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3c1a0 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3c1a4 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3c1a8 0b4 1F DE 63 FD |                             waitx   a                       'delay
3c1ac 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3c1b0 0b6             | 
3c1b0 0b6             |                             ' setup the COG mailboxes and addresses 
3c1b0 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3c1b4 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3c1b8 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3c1bc 0b9             | 
3c1bc 0b9 28 2E 64 FD |                             setq    #24-1
3c1c0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3c1c4 0bb             | 
3c1c4 0bb             |                             ' setup the polling loop for active COGs 
3c1c4 0bb 01 C2 63 FD |                             cogid   id
3c1c8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3c1cc 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3c1d0 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3c1d4 0bf 0A F0 07 F6 |                             mov     ptra, #10
3c1d8 0c0 E1 F1 03 FA |                             mul     ptra, id
3c1dc 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3c1e0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3c1e4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3c1e8 0c4 03 C2 07 FA |                             mul     id, #3
3c1ec 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3c1f0 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3c1f4 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3c1f8 0c8 D8 01 B0 FD |                             call    #reloadcogs
3c1fc 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3c200 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3c204 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3c204 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3c208 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3c20c 0cd 08 04 DC FC |                             rep     #2, #8
3c210 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3c214 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3c218 0d0             | 
3c218 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3c218 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3c218 0d0 01 C2 63 FD |                             cogid   id
3c21c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3c220 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3c224 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3c228 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3c22c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3c230 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3c234 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3c238 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3c23c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3c240 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3c244 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3c248 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3c24c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3c250 0de A5 E5 03 F1 |                             add     d, const512
3c254 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3c258 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3c25c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3c260 0e2             |                             
3c260 0e2             |                             ' setup register values for control vector loop setup after we return
3c260 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3c264 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3c268 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3c26c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3c270 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3c274 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3c278 0e8 D0 C3 8F F9 |                             altd    id, #id0
3c27c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3c280 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3c284 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3c288 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3c28c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3c290 0ee             |  
3c290 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3c294 0ef 07 CA 07 F5 |                             and     request, #7
3c298 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3c29c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3c2a0 0f2             |                             fit     $100                    'ensure all init code fits this space
3c2a0 0f2             | 
3c2a0 0f2             |                             fit     $100                    'ensure all init code fits this space
3c2a0 0f2             | 
3c2a0 0f2 00 00 00 00 
      ...             
3c2d0 0fe 00 00 00 00 
3c2d4 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3c2d8 100             | 
3c2d8 100             | '..................................................................................................
3c2d8 100             | ' Error result handling and COG notification of request completion
3c2d8 100             | 
3c2d8 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3c2dc 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3c2e0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3c2e4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3c2e8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3c2ec 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3c2f0 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3c2f4 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3c2f8 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3c2fc 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3c300 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3c304 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3c308 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3c30c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3c310 10e             | ' Poller re-starts here after a COG is serviced
3c310 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3c314 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3c318 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3c31c 111             | ' Main dynamic polling loop repeats until a request arrives
3c31c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3c320 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3c324 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3c328 114             | 
3c328 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3c32c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3c330 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3c334 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3c338 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3c33c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3c340 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3c344 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3c348 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3c34c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3c350 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3c354 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3c358 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3c35c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3c360 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3c364 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3c368 124             | 
3c368 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3c36c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3c370 126             |  
3c370 126             | '..................................................................................................
3c370 126             | ' List handler                               
3c370 126             | 
3c370 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3c374 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3c378 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3c37c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3c380 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3c384 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3c388 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3c38c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3c390 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3c394 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3c398 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3c39c 131 33 00 60 FD |                             execf   0-0                     'process the request 
3c3a0 132             | 
3c3a0 132             | '..................................................................................................
3c3a0 132             | ' Restoring per COG state and resuming where we left off
3c3a0 132             | 
3c3a0 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3c3a4 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3c3a8 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3c3ac 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3c3b0 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3c3b4 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3c3b8 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3c3bc 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3c3c0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3c3c4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3c3c8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3c3cc 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3c3d0 13e             |                    
3c3d0 13e             | '..................................................................................................
3c3d0 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3c3d0 13e             | 
3c3d0 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3c3d4 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3c3d8 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3c3dc 141 D0 DF B7 F9 |                             setd    a, #id0
3c3e0 142 D8 DF BF F9 |                             sets    a, #addr1
3c3e4 143 FE FF FF FF 
3c3e8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3c3ec 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3c3f0 146 3F DE A7 F9 |                             alti    a, #%111_111 
3c3f4 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3c3f8 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3c3fc 149 01 E2 63 FD |                             cogid   c
3c400 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3c404 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3c408 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3c40c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3c410 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3c414 14f 00 E0 03 F6 |                             mov     b, 0-0
3c418 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3c41c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3c420 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3c424 153 0C 00 90 AD |             if_z            jmp     #excluded               
3c428 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3c42c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3c430 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3c434 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3c438 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3c43c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3c440 15a             | 
3c440 15a             | 'determine priority cogs and build instructions for the polling sequence
3c440 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3c444 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3c448 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3c44c 15d             | 
3c44c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3c450 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3c454 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3c458 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3c45c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3c460 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3c464 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3c468 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3c46c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3c470 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3c474 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3c478 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3c47c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3c480 16a             | endprioloop
3c480 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3c484 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3c488 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3c48c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3c490 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3c494 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3c498 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3c49c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3c4a0 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3c4a4 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3c4a8 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3c4ac 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3c4b0 176             | 
3c4b0 176             | ' populate the round robin COG polling instructions
3c4b0 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3c4b4 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3c4b8 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3c4bc 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3c4c0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3c4c4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3c4c8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3c4cc 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3c4d0 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3c4d4 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3c4d8 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3c4dc 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3c4e0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3c4e4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3c4e8 184             | '..................................................................................................
3c4e8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3c4e8 184             | 
3c4e8 184             | set_latency                                                 '            (a) set latency
3c4e8 184             | get_latency                                                 '            (b) get latency
3c4e8 184             | set_burst                                                   '            (c) set burst size of bank
3c4e8 184             | get_burst                                                   '            (d) get burst size of bank
3c4e8 184             |                                                             '            (e) dump state
3c4e8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3c4ec 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3c4f0 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3c4f4 187             |                                                             ' | | | | e  account for following AUGS
3c4f4 187 04 00 00 FF 
3c4f8 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3c4fc 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3c500 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3c504 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3c508 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3c50c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3c510 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3c514 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3c518 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3c51c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3c520 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3c524 193             | 
3c524 193             | '..................................................................................................
3c524 193             | ' Misc EXECF code
3c524 193             | 
3c524 193 33 72 63 FD | start_read_exec             execf   newburstr
3c528 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3c52c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3c530 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3c534 197             | 
3c534 197             | '..................................................................................................
3c534 197             | ' Variables
3c534 197             | 
3c534 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3c538 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3c53c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3c540 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3c544 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3c548 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3c54c 19d             | 
3c54c 19d 00 00 00 80 | xfreq1          long    $80000000
3c550 19e 00 00 00 40 | xfreq2          long    $40000000
3c554 19f 03 00 00 00 | delay           long    3
3c558 1a0             | 
3c558 1a0             | lutcodeaddr                 
3c558 1a0             | startupparams
3c558 1a0             | excludedcogs                                    'careful: shared register use!
3c558 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3c55c 1a1 00 00 00 00 | flags           long    0
3c560 1a2             | mask                                            'careful: shared register use!
3c560 1a2 00 00 00 00 | resetmaskA      long    0
3c564 1a3             | limit                                           'careful: shared register use!
3c564 1a3 00 00 00 00 | resetmaskB      long    0
3c568 1a4 00 00 00 00 | datapins        long    0
3c56c 1a5             | const512                                        'careful: shared register use!
3c56c 1a5 00 00 00 00 | devicelist      long    0
3c570 1a6 00 00 00 00 | coglist         long    0
3c574 1a7 00 00 00 00 | mbox            long    0 
3c578 1a8             | 
3c578 1a8             | clkpin                                          'shared with code patched during init
3c578 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3c57c 1a9             | cspin                                           'shared with code patched during init
3c57c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3c580 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3c584 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3c588 1ac 01 00 00 00 | clkdelay        long    1
3c58c 1ad 00 00 00 00 | regdatabus      long    0
3c590 1ae             | 
3c590 1ae 10 00 00 00 | deviceaddr      long    $10
3c594 1af             | rrcounter
3c594 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3c598 1b0             | 
3c598 1b0             | ' jump addresses for the per COG handlers
3c598 1b0 20 00 00 00 | cog0_handler    long    cog0
3c59c 1b1 2C 00 00 00 | cog1_handler    long    cog1
3c5a0 1b2 38 00 00 00 | cog2_handler    long    cog2
3c5a4 1b3 44 00 00 00 | cog3_handler    long    cog3
3c5a8 1b4 50 00 00 00 | cog4_handler    long    cog4
3c5ac 1b5 5C 00 00 00 | cog5_handler    long    cog5
3c5b0 1b6 68 00 00 00 | cog6_handler    long    cog6
3c5b4 1b7 74 00 00 00 | cog7_handler    long    cog7
3c5b8 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3c5bc 1b9             | 
3c5bc 1b9             | ' EXECF sequences
3c5bc 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3c5c0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3c5c4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3c5c8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3c5cc 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3c5d0 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3c5d4 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3c5d8 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3c5d8 1c0             | 
3c5d8 1c0             | 
3c5d8 1c0             | ' SKIPF sequences
3c5d8 1c0             | skiptable
3c5d8 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3c5dc 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3c5e0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3c5e4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3c5e8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3c5ec 1c5 00 00 00 00 | pattern2        long    0
3c5f0 1c6 00 00 00 00 | pattern3        long    0
3c5f4 1c7 77 02 00 00 | singlelong      long    %1001110111  
3c5f8 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3c5fc 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3c600 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3c604 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3c608 1cc             | 
3c608 1cc             | ' LUT RAM address values
3c608 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3c60c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3c610 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3c614 1cf F6 02 00 00 | noread          long    noread_lut
3c618 1d0             | 
3c618 1d0 00 00 00 00 | id0             long    0
3c61c 1d1 01 00 00 00 | id1             long    1
3c620 1d2 02 00 00 00 | id2             long    2
3c624 1d3 03 00 00 00 | id3             long    3
3c628 1d4 04 00 00 00 | id4             long    4
3c62c 1d5 05 00 00 00 | id5             long    5
3c630 1d6 06 00 00 00 | id6             long    6
3c634 1d7 07 00 00 00 | id7             long    7
3c638 1d8             | 
3c638 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3c638 1d8             | 'and COG updates and need to follow immediately after id0-id7
3c638 1d8 00 00 00 00 | addr1           long    0
3c63c 1d9 00 00 00 00 | hubdata         long    0
3c640 1da 00 00 00 00 | count           long    0
3c644 1db 00 00 00 00 | addr2           long    0
3c648 1dc 00 00 00 00 | total           long    0
3c64c 1dd 00 00 00 00 | offset1         long    0
3c650 1de 00 00 00 00 | offset2         long    0
3c654 1df 00 00 00 00 | link            long    0
3c658 1e0             | 
3c658 1e0             | burstwrite                                      'note shared register use during init
3c658 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3c65c 1e1 00 00 00 00 | id              long    0
3c660 1e2             | 
3c660 1e2 00 00 00 00 | header          long    0
3c664 1e3 00 00 00 00 | trailer         long    0
3c668 1e4 00 00 00 00 | cmdaddr         long    0
3c66c 1e5 00 00 00 00 | request         long    0
3c670 1e6 00 00 00 00 | rrlimit         long    0
3c674 1e7 00 00 00 00 | pinconfig       long    0
3c678 1e8 00 00 00 00 | clks            long    0
3c67c 1e9 00 00 00 00 | resume          long    0
3c680 1ea 00 00 00 00 | orighubsize     long    0
3c684 1eb 00 00 00 00 | wrclks          long    0
3c688 1ec             | 
3c688 1ec 00 00 00 00 | pattern         long    0
3c68c 1ed 00 00 00 00 | hubscratch      long    0
3c690 1ee 00 10 00 00 | val4k           long    4096
3c694 1ef             | 
3c694 1ef             | ' temporary general purpose regs
3c694 1ef 00 00 00 00 | a               long    0
3c698 1f0 00 00 00 00 | b               long    0
3c69c 1f1 00 00 00 00 | c               long    0
3c6a0 1f2 00 00 00 00 | d               long    0
3c6a4 1f3             |                 fit     502
3c6a4 1f3             | 
3c6a4 1f3             |                 fit     502
3c6a4 1f3             | 
3c6a4 1f3             | '..................................................................................................
3c6a4 1f3             | 
3c6a4 1f3             |             orgh
3c6a4                 | 
3c6a4                 | lut_code
3c6a4                 | 'HW init code up to 80 longs
3c6a4                 | 
3c6a4                 | '..................................................................................................
3c6a4                 | ' Memory layout for LUT RAM once operational:
3c6a4                 | '
3c6a4                 | '  LUT RAM address      Usage
3c6a4                 | '  ---------------      ----
3c6a4                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3c6a4                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3c6a4                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3c6a4                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3c6a4                 | '
3c6a4                 | ' Also during driver COG startup:
3c6a4                 | ' $230-$24F is used for HW init setup
3c6a4                 | ' $250-$26F is used as temporary vector storage 
3c6a4                 | '..................................................................................................
3c6a4                 | 
3c6a4                 |                 org $230    
3c6a4 230             | 
3c6a4 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3c6a4 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3c6a8 231 24 16 60 FD |                             pollxfi
3c6ac 232 FF AA 2A FF 
3c6b0 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3c6b4 234 28 00 B0 FD |                             call    #sendqspi
3c6b8 235 07 F8 07 FF 
3c6bc 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3c6c0 237 28 00 B0 FD |                             call    #sendspi
3c6c4 238 F8 07 78 FF 
3c6c8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3c6cc 23a 1C 00 B0 FD |                             call    #sendspi
3c6d0 23b 7F 78 78 FF 
3c6d4 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3c6d8 23d 10 00 B0 FD |                             call    #sendspi 
3c6dc 23e 2D 00 64 FD |                             ret
3c6e0 23f             | 
3c6e0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3c6e4 240 32 0C 64 FD |                             skipf   #%110
3c6e8 241 9C EF 03 F6 |                             mov     pb, xsendimm
3c6ec 242             | 
3c6ec 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3c6f0 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3c6f4 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3c6f8 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3c6fc 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3c700 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3c704 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3c708 249 50 48 63 FD |                             fltl    datapins                'float data bus
3c70c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3c710 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3c714 24c             | 
3c714 24c 00 00 00 00 
3c718 24d 00 00 00 00 
3c71c 24e 00 00 00 00 
3c720 24f 00 00 00 00 |                 long    0[$270-32-$]
3c724 250             |                 fit     $270-32  ' keep room for 32 vector longs
3c724 250             |     
3c724 250             |                 fit     $270-32  ' keep room for 32 vector longs
3c724 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3c724 250             | rw_vect ' PSRAM jump vectors
3c724 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3c728 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3c72c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3c730 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3c734 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3c738 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3c73c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3c740 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3c744 258             | ro_vect ' R/O PSRAM jump vectors
3c744 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3c748 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3c74c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3c750 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3c754 25c 00 01 00 00 |                 long    unsupported
3c758 25d 00 01 00 00 |                 long    unsupported
3c75c 25e 00 01 00 00 |                 long    unsupported
3c760 25f 00 01 00 00 |                 long    unsupported
3c764 260             | ctrl_vect ' Control jump vectors
3c764 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3c768 261 00 01 00 00 |                 long    unsupported
3c76c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3c770 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3c774 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3c778 265 00 01 00 00 |                 long    unsupported
3c77c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3c780 267 3E 01 00 00 |                 long    reconfig 
3c784 268             | no_vect ' Invalid bank jump vectors
3c784 268 01 01 00 00 |                 long    invalidbank
3c788 269 01 01 00 00 |                 long    invalidbank
3c78c 26a 01 01 00 00 |                 long    invalidbank
3c790 26b 01 01 00 00 |                 long    invalidbank
3c794 26c 01 01 00 00 |                 long    invalidbank
3c798 26d 01 01 00 00 |                 long    invalidbank
3c79c 26e 01 01 00 00 |                 long    invalidbank
3c7a0 26f 01 01 00 00 |                 long    invalidbank
3c7a4 270             |                 fit     $270
3c7a4 270             | 
3c7a4 270             |                 fit     $270
3c7a4 270             | '..................................................................................................
3c7a4 270             | ' PSRAM READS
3c7a4 270             |                                                             ' a b c d e f
3c7a4 270             |                                                             ' B W L B R L  (a) byte read
3c7a4 270             |                                                             ' Y O O U E O  (b) word read
3c7a4 270             |                                                             ' T R N R S C  (c) long read
3c7a4 270             |                                                             ' E D G S U K  (d) new burst read
3c7a4 270             |                                                             '       T M E  (e) resumed sub-burst
3c7a4 270             |                                                             '         E D  (f) locked sub-burst
3c7a4 270             | 
3c7a4 270             | 
3c7a4 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3c7a8 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3c7ac 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3c7b0 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3c7b4 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3c7b8 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3c7bc 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3c7c0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3c7c4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3c7c8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3c7cc 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3c7d0 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3c7d4 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3c7d8 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3c7dc 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3c7e0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3c7e4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3c7e8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3c7ec 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3c7f0 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3c7f4 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3c7f8 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3c7fc 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3c800 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3c804 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3c808 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3c80c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3c810 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3c814 28c             | 
3c814 28c             |                             ' fall through to read bursts
3c814 28c             |                         
3c814 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3c814 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3c818 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3c81c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3c820 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3c824 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3c828 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3c82c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3c830 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3c834 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3c838 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3c83c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3c840 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3c844 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3c848 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3c84c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3c850 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3c854 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3c858 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3c85c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3c860 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3c864 2a0 E8 D1 03 F1 |                             add     clks, clks
3c868 2a1             | readcommon
3c868 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3c86c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3c870 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3c874 2a4             | 
3c874 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3c878 2a5 69 C8 63 FD |                             rev     cmdaddr
3c87c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3c880 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3c884 2a8             | 
3c884 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3c888 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3c88c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3c88c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3c890 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3c894 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3c898 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3c89c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3c89c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3c8a0 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3c8a4 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3c8a8 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3c8ac 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3c8b0 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3c8b4 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3c8b4 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3c8b8 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3c8bc 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3c8c0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3c8c4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3c8c8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3c8cc 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3c8d0 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3c8d4 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3c8d8 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3c8dc 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3c8e0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3c8e4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3c8e8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3c8ec 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3c8ec 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3c8f0 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3c8f4 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3c8f8 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3c8fc 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3c900 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3c904 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3c908 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3c90c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3c910 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3c914 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3c918 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3c91c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3c920 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3c924 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3c928 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3c92c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3c930 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3c934 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3c938 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3c93c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3c940 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3c944 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3c948 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3c94c 2da 10 03 90 FD |                             jmp     #writecommon
3c950 2db             | 
3c950 2db             | '..................................................................................................
3c950 2db             | ' Burst continuation testing
3c950 2db             | 
3c950 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3c954 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3c958 2dd             | continue_read_lut          
3c958 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3c95c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3c960 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3c964 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3c968 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3c96c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3c970 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3c974 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3c978 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3c97c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3c980 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3c984 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3c988 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3c98c 2ea             | 
3c98c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3c990 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3c994 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3c998 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3c99c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3c9a0 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3c9a4 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3c9a8 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3c9ac 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3c9b0 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3c9b4 2f4 2A 1C 66 0D |             _ret_           push    #poller
3c9b8 2f5             | 
3c9b8 2f5             | 
3c9b8 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3c9bc 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3c9bc 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3c9c0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3c9c4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3c9c8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3c9cc 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3c9d0 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3c9d4 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3c9d8 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3c9dc 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3c9e0 2ff             | '..................................................................................................
3c9e0 2ff             | ' Completion of requests
3c9e0 2ff             | 
3c9e0 2ff             | complete_rw_lut             
3c9e0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3c9e4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3c9e8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3c9ec 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3c9f0 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3c9f4 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3c9f8 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3c9fc 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3ca00 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3ca04 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3ca08 309 32 62 64 AD |             if_z            skipf   #%110001
3ca0c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3ca10 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3ca14 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3ca18 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3ca1c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3ca20 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3ca24 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3ca28 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3ca2c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3ca30 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3ca34 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3ca38 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3ca3c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3ca3c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3ca3c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3ca3c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3ca40 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3ca44 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3ca48 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3ca4c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3ca50 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3ca54 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3ca58 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3ca5c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3ca60 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3ca64 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3ca68 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3ca6c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3ca70 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3ca74 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3ca78 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3ca7c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3ca80 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3ca84 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3ca88 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3ca8c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3ca90 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3ca94 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3ca98 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3ca9c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3caa0 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3caa4 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3caa8 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3caac 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3cab0 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3cab4 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3cab8 335 DF B7 03 A6 |             if_z            mov     addr2, link
3cabc 336 34 FF 9F AD |             if_z            jmp     #checknext
3cac0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3cac4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3cac8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3cacc 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3cad0 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3cad4 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3cad8 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3cadc 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3cae0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3cae4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3cae8 341             | 
3cae8 341             | '..................................................................................................
3cae8 341             | ' PSRAM WRITES
3cae8 341             |                                                             '  a b c d e f g h
3cae8 341             | 
3cae8 341             |                                                             '  B W L F B R L L (a) byte write(s)
3cae8 341             |                                                             '  Y O O I U E O O (b) word write(s)
3cae8 341             |                                                             '  T R N L R S C C (c) long write(s)
3cae8 341             |                                                             '  E D G L S U K K (d) resumed fill
3cae8 341             |                                                             '          T M E E (e) new burst write
3cae8 341             |                                                             '            E D D (f) resumed burst
3cae8 341             |                                                             '              F B (g) locked fill
3cae8 341             |                                                             '              I U (h) locked burst write
3cae8 341             |                                                             '              L R 
3cae8 341             |                                                             '              L S 
3cae8 341             |                                                             '                T 
3cae8 341             | 
3cae8 341             | w_single                   
3cae8 341             | w_fill_cont           
3cae8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3caec 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3caf0 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3caf4 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3caf8 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3cafc 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3cb00 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3cb04 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3cb08 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3cb0c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3cb10 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3cb14 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3cb18 34d             |                ' disable call to r_resume_burst for single longs when z=0
3cb18 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3cb1c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3cb20 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3cb24 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3cb28 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3cb2c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3cb30 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3cb34 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3cb38 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3cb3c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3cb40 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3cb44 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3cb48 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3cb4c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3cb50 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3cb54 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3cb58 35d             |         
3cb58 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3cb58 35d             |             '
3cb58 35d             |             '  At least one of these 3 optional components will be sent
3cb58 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3cb58 35d             |             '     body - N x full longs of data
3cb58 35d             |             '     trailer - last partial long of data
3cb58 35d             |             '
3cb58 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3cb58 35d             |             '
3cb58 35d             |             'Case    Type                           Sends
3cb58 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3cb58 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3cb58 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3cb58 35d             |             ' 4)     Multiple long fill             body only
3cb58 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3cb58 35d             | 
3cb58 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3cb58 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3cb5c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3cb60 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3cb64 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3cb68 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3cb6c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3cb70 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3cb74 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3cb78 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3cb7c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3cb80 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3cb84 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3cb88 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3cb8c 36a             |                             
3cb8c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3cb90 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3cb94 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3cb98 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3cb9c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3cba0 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3cba4 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3cba8 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3cbac 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3cbb0 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3cbb4 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3cbb8 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3cbbc 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3cbc0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3cbc4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3cbc8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3cbcc 37a             | 
3cbcc 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3cbd0 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3cbd4 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3cbd8 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3cbdc 37e             |                  
3cbdc 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3cbe0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3cbe4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3cbe8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3cbec 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3cbf0 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3cbf4 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3cbf8 385             | 
3cbf8 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3cbfc 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3cc00 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3cc04 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3cc08 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3cc0c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3cc10 38b             | 
3cc10 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3cc10 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3cc14 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3cc18 38d 2A B0 63 FD |                             push    addr1                   'save address
3cc1c 38e             | 
3cc1c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3cc1c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3cc20 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3cc24 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3cc28 391             |             
3cc28 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3cc2c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3cc30 393 2B B0 63 FD |                             pop     addr1                   'restore address
3cc34 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3cc38 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3cc3c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3cc40 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3cc44 398             | 
3cc44 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3cc48 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3cc4c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3cc50 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3cc54 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3cc58 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3cc5c 39e             | 
3cc5c 39e             |                             'trailer is done
3cc5c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3cc60 39f             | 
3cc60 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3cc64 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3cc68 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3cc6c 3a2             | 
3cc6c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3cc70 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3cc74 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3cc78 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3cc7c 3a6             |                             
3cc7c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3cc80 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3cc84 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3cc88 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3cc8c 3aa             |                                                          
3cc8c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3cc90 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3cc94 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3cc98 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3cc9c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3cca0 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3cca4 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3cca8 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3ccac 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3ccb0 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3ccb4 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3ccb8 3b5             |  
3ccb8 3b5 59 52 63 FD |                             drvh    cspin
3ccbc 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3ccc0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3ccc4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3ccc8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3cccc 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3ccd0 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3ccd4 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3ccd8 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3ccdc 3be EA E5 03 F6 |                             mov     d, orighubsize
3cce0 3bf EF E5 63 F0 |                             shl     d, a
3cce4 3c0 F2 E3 83 F1 |                             sub     c, d
3cce8 3c1 DD E3 03 F1 |                             add     c, offset1
3ccec 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3ccf0 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3ccf4 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3ccf8 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3ccfc 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3cd00 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3cd04 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3cd08 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3cd0c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3cd10 3cb BB D3 03 F6 |                             mov     resume, restorefill
3cd14 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3cd18 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3cd1c 3ce 6C FC BF CD |             if_c            call    #yield
3cd20 3cf 2D 00 64 FD |                             ret
3cd24 3d0             |                            
3cd24 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3cd24 3d0             |                       '     rczl    pa                      'rotate left into address offset
3cd24 3d0             |                       '     rczl    c wcz                   'restore count and flags
3cd24 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3cd28 3d1 02 EC 67 F0 |                             shl     pa, #2
3cd2c 3d2 28 06 64 AD |             if_z            setq    #3
3cd30 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3cd34 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3cd38 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3cd3c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3cd40 3d7             | 
3cd40 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3cd44 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3cd48 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3cd4c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3cd50 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3cd54 3dc             |                 fit 1024-32
3cd54 3dc             |         
3cd54 3dc             | 
3cd54 3dc             | '..................................................................................................
3cd54 3dc             | 
3cd54 3dc             |                 fit 1024-32
3cd54 3dc 00 00 00 00 
3cd58 3dd 00 00 00 00 
3cd5c 3de 00 00 00 00 
3cd60 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3cd64 3e0             |                 org 1024-32
3cd64 000             | 
3cd64 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3cd64 000 00 00 00 00 |                 long $0000
3cd68 001 11 11 00 00 |                 long $1111
3cd6c 002 22 22 00 00 |                 long $2222
3cd70 003 33 33 00 00 |                 long $3333
3cd74 004 44 44 00 00 |                 long $4444
3cd78 005 55 55 00 00 |                 long $5555
3cd7c 006 66 66 00 00 |                 long $6666
3cd80 007 77 77 00 00 |                 long $7777
3cd84 008 88 88 00 00 |                 long $8888
3cd88 009 99 99 00 00 |                 long $9999
3cd8c 00a AA AA 00 00 |                 long $aaaa
3cd90 00b BB BB 00 00 |                 long $bbbb
3cd94 00c CC CC 00 00 |                 long $cccc
3cd98 00d DD DD 00 00 |                 long $dddd
3cd9c 00e EE EE 00 00 |                 long $eeee
3cda0 00f FF FF 00 00 |                 long $ffff
3cda4 010             | 
3cda4 010             | 'masks
3cda4 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3cda8 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3cdac 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3cdb0 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3cdb4 014             | 
3cdb4 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3cdb8 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3cdbc 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3cdc0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3cdc4 018             | 
3cdc4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3cdc8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3cdcc 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3cdd0 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3cdd4 01c             | 
3cdd4 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3cdd8 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3cddc 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3cde0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3cde4 020             |         fit 1024
3cde4 020             | 
3cde4 020             |         fit 1024
3cde4 020             | 
3cde4 020             | '--------------------------------------------------------------------------------------------------
3cde4 020             |         orgh
3cde4                 | 
3cde4                 | gfxexpansion
3cde4                 |                             'simple line drawing graphics expansion of memory driver
3cde4                 |                             'jmp     #donerepeats                'just return for now
3cde4                 | 
3cde4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3cde8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3cdec     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3cdf0     DD E1 03 F6 |                             mov     b, offset1              'get error term
3cdf4     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3cdf8     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3cdfc     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3ce00     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3ce04     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3ce08     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3ce0c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3ce10     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3ce14     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3ce18     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3ce1c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3ce20     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3ce24     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3ce28     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3ce2c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3ce30     DC E5 33 F9 |                             getword d, total, #0            'get line width
3ce34     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3ce38     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3ce3c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3ce40     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3ce44     C3 03 80 FD |                             jmp     #readmask               'continue filling
3ce48                 | 	alignl
3ce48                 | _usbnew_spin2_dat_
3ce48                 |                 org     $000
3ce48 000             | 
3ce48 000             | usb_host_start
3ce48 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3ce4c 001             | 
3ce4c 001 03 00 00 FF 
3ce50 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3ce54 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3ce58 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3ce5c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3ce60 006 29 70 63 FD |                 setq2   htmp
3ce64 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3ce68 008             | 
3ce68 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3ce6c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3ce70 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3ce74 00b             | 
3ce74 00b             | '------------------------------------------------------------------------------
3ce74 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3ce74 00b             | ' special because the receiving function must not respond with either STALL or
3ce74 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3ce74 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3ce74 00b             | ' corrupt packet, it must ignore the transaction
3ce74 00b             | '------------------------------------------------------------------------------
3ce74 00b             | ' On entry:
3ce74 00b             | '   PTRA - start address of the SETUP data struct.
3ce74 00b             | ' On exit:
3ce74 00b             | '   retval - PID_ACK on success, otherwise error code.
3ce74 00b             | '------------------------------------------------------------------------------
3ce74 00b             | txn_setup
3ce74 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3ce78 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3ce7c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3ce80 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3ce84 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3ce88 010             | .setup
3ce88 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3ce8c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ce90 012 2D 00 64 AD |         if_z    ret
3ce94 013 7C 0B B0 FD |                 call    #retry_wait
3ce98 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ce9c 015 2D 00 64 AD |         if_z    ret
3cea0 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3cea4 017 E0 FF 9F FD |                 jmp     #.setup
3cea8 018             | 
3cea8 018             | '------------------------------------------------------------------------------
3cea8 018             | ' IN/INTERRUPT transaction.
3cea8 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3cea8 018             | '------------------------------------------------------------------------------
3cea8 018             | ' On entry:
3cea8 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3cea8 018             | '     CRC(b19..23).
3cea8 018             | ' On exit:
3cea8 018             | '------------------------------------------------------------------------------
3cea8 018             | txn_in
3cea8 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3ceac 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3ceb0 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3ceb4 01b             | 
3ceb4 01b             |                 ' Fall through to urx_packet
3ceb4 01b             | 
3ceb4 01b             | '------------------------------------------------------------------------------
3ceb4 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3ceb4 01b             | ' received are handshakes and IN DATAx.
3ceb4 01b             | '------------------------------------------------------------------------------
3ceb4 01b             | ' On entry:
3ceb4 01b             | ' On exit:
3ceb4 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3ceb4 01b             | '     returned.
3ceb4 01b             | '------------------------------------------------------------------------------
3ceb4 01b             | urx_packet
3ceb4 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3ceb8 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3cebc 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3cec0 01e 1A 92 63 FD |                 getct   hct2
3cec4 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3cec8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3cecc 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3ced0 022             | .wait_sop
3ced0 022 22 A7 8A FA |                 rdpin   urx, dm
3ced4 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3ced8 024 08 00 90 CD |         if_c    jmp     #.get_pid
3cedc 025 FC 25 CC FB |                 jnct2   #.wait_sop
3cee0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3cee4 027             | .get_pid
3cee4 027 28 02 B0 FD |                 call    #urx_next
3cee8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3ceec 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3cef0 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3cef4 02b             | .chk_pid
3cef4 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cef8 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3cefc 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3cf00 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3cf04 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3cf08 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3cf0c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3cf10 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3cf14 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3cf18 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3cf1c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3cf20 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3cf24 037             | .ack_resend
3cf24 037 22 A7 82 FA |                 rqpin   urx, dm
3cf28 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3cf2c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3cf30 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3cf34 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3cf38 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3cf3c 03d             | .chk_eop
3cf3c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3cf40 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3cf44 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3cf48 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3cf4c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3cf50 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3cf54 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3cf58 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3cf5c 045 2D 00 64 FD |                 ret
3cf60 046             | .idle
3cf60 046 22 A7 82 FA |                 rqpin   urx, dm
3cf64 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3cf68 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3cf6c 049 2D 00 64 FD |                 ret
3cf70 04a             | 
3cf70 04a             | '------------------------------------------------------------------------------
3cf70 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3cf70 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3cf70 04a             | ' if one is required.
3cf70 04a             | '------------------------------------------------------------------------------
3cf70 04a             | ' On entry:
3cf70 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3cf70 04a             | ' On exit:
3cf70 04a             | '------------------------------------------------------------------------------
3cf70 04a             | utx_token
3cf70 04a 22 A7 82 FA |                 rqpin   urx, dm
3cf74 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3cf78 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3cf7c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3cf80 04e 34 0D B0 CD |         if_c    call    #utx_pre
3cf84 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3cf88 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3cf8c 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3cf90 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3cf94 053             | .next_byte
3cf94 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3cf98 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3cf9c 055             | .wait
3cf9c 055 40 46 72 FD |                 testp   dp                      wc
3cfa0 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3cfa4 057 23 03 08 FC |                 akpin   dp
3cfa8 058 22 A5 22 FC |                 wypin   utx, dm
3cfac 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3cfb0 05a             | 
3cfb0 05a             | '------------------------------------------------------------------------------
3cfb0 05a             | ' SETUP/OUT/INTERRUPT transaction.
3cfb0 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3cfb0 05a             | '------------------------------------------------------------------------------
3cfb0 05a             | ' On entry:
3cfb0 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3cfb0 05a             | '     CRC(b19..23).
3cfb0 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3cfb0 05a             | '   pkt_data - count of DATAx payload bytes to send.
3cfb0 05a             | ' On exit:
3cfb0 05a             | '------------------------------------------------------------------------------
3cfb0 05a             | txn_out
3cfb0 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3cfb4 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3cfb8 05c 00 00 C0 FF 
3cfbc 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3cfc0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3cfc4 05f             | 
3cfc4 05f             |                 ' Fall through to utx_data
3cfc4 05f             | 
3cfc4 05f             | '------------------------------------------------------------------------------
3cfc4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3cfc4 05f             | ' calculated while the data byte is being shifted out. Since data stage
3cfc4 05f             | ' success/fail is not determined until the status stage of the transaction,
3cfc4 05f             | ' this routine is only concerned about the current DATAx packet.
3cfc4 05f             | '------------------------------------------------------------------------------
3cfc4 05f             | ' On entry:
3cfc4 05f             | '   PTRA - hub start address of the data to read.
3cfc4 05f             | '   pkt_cnt - data payload size.
3cfc4 05f             | ' On exit:
3cfc4 05f             | '------------------------------------------------------------------------------
3cfc4 05f             | utx_data
3cfc4 05f 22 A7 82 FA |                 rqpin   urx, dm
3cfc8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3cfcc 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3cfd0 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3cfd4 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3cfd8 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3cfdc 065 D8 0C B0 CD |         if_c    call    #utx_pre
3cfe0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3cfe4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3cfe8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3cfec 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3cff0 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3cff4 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3cff8 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3cffc 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3d000 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3d004 06f             | .read_byte
3d004 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3d008 070 F0 00 B0 FD |                 call    #utx_byte
3d00c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3d010 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3d014 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3d018 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3d01c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3d020 076             | .send_crc
3d020 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3d024 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3d028 078 D0 00 B0 FD |                 call    #utx_byte
3d02c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3d030 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3d034 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3d038 07c             | 
3d038 07c             | '------------------------------------------------------------------------------
3d038 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3d038 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3d038 07c             | ' expects that the packet includes at least the CRC word.
3d038 07c             | '
3d038 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3d038 07c             | ' was requested, which makes it difficult to determine where the data stops
3d038 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3d038 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3d038 07c             | ' USB-16 expected residual value of 0xB001.
3d038 07c             | '
3d038 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3d038 07c             | ' so the caller can verify IN success before writing the data to its final
3d038 07c             | ' destination.
3d038 07c             | '------------------------------------------------------------------------------
3d038 07c             | ' On entry:
3d038 07c             | '   pkt_data - max byte count expected to be in the packet.
3d038 07c             | '   newb_flg - signals new byte ready when toggled.
3d038 07c             | ' On exit:
3d038 07c             | '   pkt_cnt - actual number of bytes read.
3d038 07c             | '------------------------------------------------------------------------------
3d038 07c             | urx_data
3d038 07c F7 75 03 F6 |                 mov     htmp2, pb
3d03c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3d040 07e 00 00 C0 FF 
3d044 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3d048 080 BA EF 03 F6 |                 mov     pb, htmp2
3d04c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3d050 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3d054 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3d058 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3d05c 085             | .wait_byte
3d05c 085             | ' In-line rx for max speed
3d05c 085 22 A7 82 FA |                 rqpin   urx, dm
3d060 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3d064 087 53 A5 02 F5 |                 and     utx, urx
3d068 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3d06c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3d070 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3d074 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3d078 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3d07c 08d DC FF 9F FD |                 jmp     #.wait_byte
3d080 08e             | .get_byte
3d080 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3d084 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3d088 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3d08c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3d090 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3d094 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3d098 094             | .end_crc
3d098 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3d09c 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3d0a0 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3d0a4 097 2D 00 64 1D |         if_a    ret
3d0a8 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3d0a8 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3d0a8 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3d0a8 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3d0a8 098 22 A7 82 FA |                 rqpin   urx, dm
3d0ac 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3d0b0 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3d0b4 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3d0b4 09b             | .chk_crc
3d0b4 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3d0b8 09c 58 00 00 FF 
3d0bc 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3d0c0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3d0c4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3d0c8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3d0cc 0a1 34 09 B0 FD |                 call    #poll_waitx
3d0d0 0a2             | 
3d0d0 0a2             |                 ' Fall through to utx_handshake
3d0d0 0a2             | 
3d0d0 0a2             | '------------------------------------------------------------------------------
3d0d0 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3d0d0 0a2             | ' the appropriate IP delay has been inserted.
3d0d0 0a2             | '------------------------------------------------------------------------------
3d0d0 0a2             | ' On entry:
3d0d0 0a2             | '   retval - handshake PID to send.
3d0d0 0a2             | ' On exit:
3d0d0 0a2             | '   retval unchanged.
3d0d0 0a2             | '------------------------------------------------------------------------------
3d0d0 0a2             | utx_handshake
3d0d0 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3d0d4 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3d0d8 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3d0dc 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3d0e0 0a6 5F A5 02 F6 |                 mov     utx, retval
3d0e4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3d0e8 0a8             | .idle
3d0e8 0a8 22 A7 82 FA |                 rqpin   urx, dm
3d0ec 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3d0f0 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3d0f4 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3d0f8 0ac 08 09 90 FD |                 jmp     #poll_waitx
3d0fc 0ad             | 
3d0fc 0ad             | '------------------------------------------------------------------------------
3d0fc 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3d0fc 0ad             | '------------------------------------------------------------------------------
3d0fc 0ad             | ' On entry:
3d0fc 0ad             | '   utx - byte to transmit.
3d0fc 0ad             | ' On exit:
3d0fc 0ad             | '------------------------------------------------------------------------------
3d0fc 0ad             | utx_byte
3d0fc 0ad 40 46 72 FD |                 testp   dp                      wc
3d100 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3d104 0af 23 03 08 FC |                 akpin   dp
3d108 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3d10c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3d110 0b2             | 
3d110 0b2             | '------------------------------------------------------------------------------
3d110 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3d110 0b2             | '------------------------------------------------------------------------------
3d110 0b2             | ' On entry:
3d110 0b2             | ' On exit:
3d110 0b2             | '   retval - the byte read.
3d110 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3d110 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3d110 0b2             | '     received.
3d110 0b2             | '------------------------------------------------------------------------------
3d110 0b2             | urx_next
3d110 0b2 22 A7 8A FA |                 rdpin   urx, dm
3d114 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3d118 0b4 53 A5 02 F5 |                 and     utx, urx
3d11c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3d120 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3d124 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3d128 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3d12c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3d130 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3d134 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3d138 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3d13c 0bd 2D 00 64 FD |                 ret
3d140 0be             | 
3d140 0be             | '------------------------------------------------------------------------------
3d140 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3d140 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3d140 0be             | ' length, and the PID is not included in the CRC calculation:
3d140 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3d140 0be             | '  CRC5  ENDP ADDRESS PID
3d140 0be             | ' %00000_1111_1111111_xxxxxxxx
3d140 0be             | '------------------------------------------------------------------------------
3d140 0be             | ' On entry:
3d140 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3d140 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3d140 0be             | ' On exit:
3d140 0be             | '   ep_addr_pid - CRC value appended to the packet.
3d140 0be             | '------------------------------------------------------------------------------
3d140 0be             | calc_crc5
3d140 0be FF 03 00 FF 
3d144 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3d148 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3d14c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3d150 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3d154 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3d158 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3d15c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3d160 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3d164 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3d168 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3d16c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3d170 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3d174 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3d178 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3d17c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3d180 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3d184 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3d188 0d0             | 
3d188 0d0             | '------------------------------------------------------------------------------
3d188 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3d188 0d0             | '------------------------------------------------------------------------------
3d188 0d0             | isr1_fsframe
3d188 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3d18c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d190 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d194 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d198 0d4             | .wait
3d198 0d4 40 46 72 FD |                 testp   dp                      wc
3d19c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3d1a0 0d6 23 03 08 FC |                 akpin   dp
3d1a4 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3d1a8 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3d1ac 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3d1b0 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3d1b4 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3d1b8 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3d1bc 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3d1c0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3d1c4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3d1c8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3d1cc 0e1 2C FF BF FD |                 call    #utx_byte
3d1d0 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3d1d4 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3d1d8 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3d1dc 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3d1e0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3d1e4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3d1e8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3d1ec 0e9 5B A5 42 F5 |                 or      utx, icrc
3d1f0 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3d1f4 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3d1f8 0ec 20 00 90 FD |                 jmp     #isr1_wait
3d1fc 0ed             | isr1_lsframe
3d1fc 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3d200 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d204 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d208 0f0             | .wait
3d208 0f0 40 46 72 FD |                 testp   dp                      wc
3d20c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3d210 0f2 23 03 08 FC |                 akpin   dp
3d214 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3d218 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3d21c 0f5             | isr1_wait
3d21c 0f5 22 A5 82 FA |                 rqpin   utx, dm
3d220 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3d224 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3d228 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3d22c 0f9 03 00 00 FF 
3d230 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3d234 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3d238 0fc F5 FF 3B FB |                 reti1
3d23c 0fd             | 
3d23c 0fd             | '------------------------------------------------------------------------------
3d23c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3d23c 0fd             | ' transaction will complete before the next frame is triggered.
3d23c 0fd             | '------------------------------------------------------------------------------
3d23c 0fd             | ' On entry:
3d23c 0fd             | ' On exit:
3d23c 0fd             | '------------------------------------------------------------------------------
3d23c 0fd             | wait_txn_ok
3d23c 0fd 1A 74 63 FD |                 getct   htmp2
3d240 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3d244 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d248 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3d24c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3d250 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3d254 103 2D 00 64 FD |                 ret
3d258 104             | 
3d258 104             | '------------------------------------------------------------------------------
3d258 104             | ' A device connection was detected, or a bus reset was requested by the USB
3d258 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3d258 104             | ' and perform a reset sequence prior to device enumeration.
3d258 104             | '------------------------------------------------------------------------------
3d258 104             | dev_reset
3d258 104 22 A7 82 FA |                 rqpin   urx, dm
3d25c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3d260 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3d264 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3d268 108             | reset
3d268 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3d26c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3d270 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3d274 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3d278 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3d27c 10d 1A 92 62 FD |                 getct   iframe_ct_base
3d280 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d284 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d288 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3d28c 111 24 70 07 F1 |                 add     htmp, #36
3d290 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3d294 113             | .framewait
3d294 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3d298 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3d29c 115 2D 00 64 FD |                 ret
3d2a0 116             | 
3d2a0 116             | '------------------------------------------------------------------------------
3d2a0 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3d2a0 116             | '------------------------------------------------------------------------------
3d2a0 116             | ' On entry:
3d2a0 116             | '   PTRA - source address.
3d2a0 116             | '   PB - destination address.
3d2a0 116             | '   hr0 - length of copy, in bytes.
3d2a0 116             | ' On exit:
3d2a0 116             | '------------------------------------------------------------------------------
3d2a0 116             | hmemcpy
3d2a0 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3d2a4 117 F7 71 43 FC |                 wrbyte  htmp, pb
3d2a8 118 01 EE 07 F1 |                 add     pb, #1
3d2ac 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3d2b0 11a             | 
3d2b0 11a             | '------------------------------------------------------------------------------
3d2b0 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3d2b0 11a             | ' loop until the errant device is disconnected.
3d2b0 11a             | '------------------------------------------------------------------------------
3d2b0 11a             | ' On entry:
3d2b0 11a             | ' On exit:
3d2b0 11a             | '------------------------------------------------------------------------------
3d2b0 11a             | host_error
3d2b0 11a             |           if ERROR_LED >= 0
3d2b0 11a             |           end
3d2b0 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3d2b4 11b             | 
3d2b4 11b             | '------------------------------------------------------------------------------
3d2b4 11b             | ' Get HID descriptor buffer for current port
3d2b4 11b             | '------------------------------------------------------------------------------
3d2b4 11b             | ' On entry:
3d2b4 11b             | ' On exit:
3d2b4 11b             | '   PB - HID descriptor buffer pointer
3d2b4 11b             | '------------------------------------------------------------------------------
3d2b4 11b             | get_hid_descr_buffer
3d2b4 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3d2b8 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3d2bc 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3d2c0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3d2c4 11f             | 
3d2c4 11f             | 
3d2c4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3d2c8 120             | 
3d2c8 120             | ' USB commands and error codes
3d2c8 120 00 00 00 00 | cmd_data        long    0
3d2cc 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3d2d0 122             | 
3d2d0 122             | ' Parameters block assigned at cog startup
3d2d0 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3d2d4 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3d2d8 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3d2dc 125             | if ACTIVITY_LED >= 0
3d2dc 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3d2dc 125             | end
3d2dc 125             | if ERROR_LED >= 0
3d2dc 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3d2dc 125             | end
3d2dc 125 00 00 00 00 | hid_descr_p     long    0
3d2e0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3d2e0 126             | 'hkbd_report_p   long    0
3d2e0 126 00 00 00 00 | hub_descr_p     long    0
3d2e4 127 00 00 00 00 | urx_buff_p      long    0
3d2e8 128 00 00 00 00 | dev_desc_buff_p long    0
3d2ec 129 00 00 00 00 | con_desc_buff_p long    0
3d2f0 12a 00 00 00 00 | cache_start_p   long    0
3d2f4 12b 00 00 00 00 | cache_end_p     long    0
3d2f8 12c             | if EMUPAD_MAX_PLAYER > 0
3d2f8 12c             | emupad_out_ptr  long    0
3d2f8 12c             | end
3d2f8 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3d2fc 12d             | 
3d2fc 12d             | hdev_init_start
3d2fc 12d             | hdev_port       res     1
3d2fc 12d             | hdev_port       res     1
3d2fc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3d2fc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3d2fc 12d             | kbm_next_datax  res     1
3d2fc 12d             | kbm_next_datax  res     1
3d2fc 12d             | hub_intf_num    res     1
3d2fc 12d             | hub_intf_num    res     1
3d2fc 12d             | hub_next_datax  res     1
3d2fc 12d             | hub_next_datax  res     1
3d2fc 12d             | hub_status_chg  res     1
3d2fc 12d             | hub_status_chg  res     1
3d2fc 12d             | hub_port_status res     1
3d2fc 12d             | hub_port_status res     1
3d2fc 12d             | if HAVE_MOUSE
3d2fc 12d             | ms_intf_num     res     1
3d2fc 12d             | ms_intf_num     res     1
3d2fc 12d             | ms_in_max_pkt   res     1
3d2fc 12d             | ms_in_max_pkt   res     1
3d2fc 12d             | end
3d2fc 12d             | kb_intf_num     res     1
3d2fc 12d             | kb_intf_num     res     1
3d2fc 12d             | kb_interval     res     1
3d2fc 12d             | kb_interval     res     1
3d2fc 12d             | kb_in_max_pkt   res     1
3d2fc 12d             | kb_in_max_pkt   res     1
3d2fc 12d             | kb_max_index    res     1
3d2fc 12d             | kb_max_index    res     1
3d2fc 12d             | kb_led_states   res     1
3d2fc 12d             | kb_led_states   res     1
3d2fc 12d             | gp_intf_num     res     1
3d2fc 12d             | gp_intf_num     res     1
3d2fc 12d             | gp_interval     res     1
3d2fc 12d             | gp_interval     res     1
3d2fc 12d             | gp_max_index    res     1
3d2fc 12d             | gp_max_index    res     1
3d2fc 12d             | gp_descr_len    res     1+MAX_DEVICES
3d2fc 12d             | gp_descr_len    res     1+MAX_DEVICES
3d2fc 12d             | hdev_init_end
3d2fc 12d             | 
3d2fc 12d             | ' Initialized at cog startup:
3d2fc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3d2fc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3d2fc 12d             | iframe_ct_new   res     1
3d2fc 12d             | iframe_ct_new   res     1
3d2fc 12d             | iframe_ct_base  res     1
3d2fc 12d             | iframe_ct_base  res     1
3d2fc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3d2fc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3d2fc 12d             | 
3d2fc 12d             | ' This register block is reset to zero when a USB device connects
3d2fc 12d             | hreg_init_start
3d2fc 12d             | hstatus         res     1         ' Host status flags
3d2fc 12d             | hstatus         res     1         ' Host status flags
3d2fc 12d             | hctwait         res     1         ' Poll-based wait clocks
3d2fc 12d             | hctwait         res     1         ' Poll-based wait clocks
3d2fc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3d2fc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3d2fc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3d2fc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3d2fc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3d2fc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3d2fc 12d             | xfer_retry      res     1         ' Control transfer retry count
3d2fc 12d             | xfer_retry      res     1         ' Control transfer retry count
3d2fc 12d             | retry           res     1         ' Transaction retry count
3d2fc 12d             | retry           res     1         ' Transaction retry count
3d2fc 12d             | utx             res     1         ' Byte to transmit on USB
3d2fc 12d             | utx             res     1         ' Byte to transmit on USB
3d2fc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3d2fc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3d2fc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3d2fc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3d2fc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3d2fc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3d2fc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3d2fc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3d2fc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3d2fc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3d2fc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3d2fc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3d2fc 12d             | frame           res     1         ' USB 1ms frame counter value
3d2fc 12d             | frame           res     1         ' USB 1ms frame counter value
3d2fc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3d2fc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3d2fc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3d2fc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3d2fc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3d2fc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3d2fc 12d             | crc             res     1         ' Used for CRC16 calculation
3d2fc 12d             | crc             res     1         ' Used for CRC16 calculation
3d2fc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3d2fc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3d2fc 12d             | retval          res     1         ' Global success/fail return parameter
3d2fc 12d             | retval          res     1         ' Global success/fail return parameter
3d2fc 12d             | context_retval  res     1         ' Operation contextual return parameter
3d2fc 12d             | context_retval  res     1         ' Operation contextual return parameter
3d2fc 12d             | ' Device stuff
3d2fc 12d             | hdev_id         res     1+MAX_DEVICES
3d2fc 12d             | hdev_id         res     1+MAX_DEVICES
3d2fc 12d             | hdev_bcd        res     1
3d2fc 12d             | hdev_bcd        res     1
3d2fc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3d2fc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3d2fc 12d             | ' Keyboard/mouse stuff
3d2fc 12d             | hctrl_ep_addr   res     1
3d2fc 12d             | hctrl_ep_addr   res     1
3d2fc 12d             | hctrl_max_pkt   res     1
3d2fc 12d             | hctrl_max_pkt   res     1
3d2fc 12d             | hconfig_base    res     1
3d2fc 12d             | hconfig_base    res     1
3d2fc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3d2fc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3d2fc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3d2fc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3d2fc 12d             | hdev_class      res     1
3d2fc 12d             | hdev_class      res     1
3d2fc 12d             | hdev_subclass   res     1
3d2fc 12d             | hdev_subclass   res     1
3d2fc 12d             | hdev_protocol   res     1
3d2fc 12d             | hdev_protocol   res     1
3d2fc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3d2fc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3d2fc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3d2fc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3d2fc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3d2fc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3d2fc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3d2fc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3d2fc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3d2fc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3d2fc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3d2fc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3d2fc 12d             | if HAVE_MOUSE
3d2fc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3d2fc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3d2fc 12d             | end
3d2fc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3d2fc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3d2fc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3d2fc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3d2fc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3d2fc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3d2fc 12d             | hdev_out_addr   res     1
3d2fc 12d             | hdev_out_addr   res     1
3d2fc 12d             | 
3d2fc 12d             | if EMUPAD_MAX_PLAYER > 0
3d2fc 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3d2fc 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3d2fc 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3d2fc 12d             | end
3d2fc 12d             | 
3d2fc 12d             | hreg_init_end
3d2fc 12d             | 
3d2fc 12d             | hidr_start
3d2fc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3d2fc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3d2fc 12d             | hidr_flags      res     1
3d2fc 12d             | hidr_flags      res     1
3d2fc 12d             | hidr_axis       res     3
3d2fc 12d             | hidr_axis       res     3
3d2fc 12d             | hidr_buttons    res     1
3d2fc 12d             | hidr_buttons    res     1
3d2fc 12d             | hidr_hats       res     1
3d2fc 12d             | hidr_hats       res     1
3d2fc 12d             | '' Above are actually useful values, 6 longs
3d2fc 12d             | hidr_id         res     1
3d2fc 12d             | hidr_id         res     1
3d2fc 12d             | hidr_state      res     1
3d2fc 12d             | hidr_state      res     1
3d2fc 12d             | hidr_size       res     1
3d2fc 12d             | hidr_size       res     1
3d2fc 12d             | hidr_count      res     1
3d2fc 12d             | hidr_count      res     1
3d2fc 12d             | hidr_offset     res     1
3d2fc 12d             | hidr_offset     res     1
3d2fc 12d             | hidr_usage_idx  res     1
3d2fc 12d             | hidr_usage_idx  res     1
3d2fc 12d             | hidr_lminmax    res     1
3d2fc 12d             | hidr_lminmax    res     1
3d2fc 12d             | hidr_pminmax    res     1
3d2fc 12d             | hidr_pminmax    res     1
3d2fc 12d             | hidr_type       res     1
3d2fc 12d             | hidr_type       res     1
3d2fc 12d             | hidr_end
3d2fc 12d             | 
3d2fc 12d             | ' Variables dependent on the system freqency
3d2fc 12d             | _var_64_lower_  res     1
3d2fc 12d             | _var_64_lower_  res     1
3d2fc 12d             | _var_64_upper_  res     1
3d2fc 12d             | _var_64_upper_  res     1
3d2fc 12d             | _12Mbps_        res     1
3d2fc 12d             | _12Mbps_        res     1
3d2fc 12d             | _1_5Mbps_       res     1
3d2fc 12d             | _1_5Mbps_       res     1
3d2fc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3d2fc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3d2fc 12d             | _1us_           res     1         ' 1us
3d2fc 12d             | _1us_           res     1         ' 1us
3d2fc 12d             | _10us_          res     1         ' 10us
3d2fc 12d             | _10us_          res     1         ' 10us
3d2fc 12d             | _33us_          res     1         ' 33us
3d2fc 12d             | _33us_          res     1         ' 33us
3d2fc 12d             | _txn_err_       res     1         ' 250us
3d2fc 12d             | _txn_err_       res     1         ' 250us
3d2fc 12d             | _500us_         res     1         ' 500us
3d2fc 12d             | _500us_         res     1         ' 500us
3d2fc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3d2fc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3d2fc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3d2fc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3d2fc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3d2fc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3d2fc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3d2fc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3d2fc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3d2fc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3d2fc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3d2fc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3d2fc 12d             | _preamble_wait_ res     1
3d2fc 12d             | _preamble_wait_ res     1
3d2fc 12d             | _1ms_           res     1         ' 1ms
3d2fc 12d             | _1ms_           res     1         ' 1ms
3d2fc 12d             | _2ms_           res     1         ' 2ms
3d2fc 12d             | _2ms_           res     1         ' 2ms
3d2fc 12d             | _suspend_wait_  res     1         ' 3ms
3d2fc 12d             | _suspend_wait_  res     1         ' 3ms
3d2fc 12d             | _4ms_           res     1         ' 4ms
3d2fc 12d             | _4ms_           res     1         ' 4ms
3d2fc 12d             | _xfer_wait_     res     1         ' 5ms
3d2fc 12d             | _xfer_wait_     res     1         ' 5ms
3d2fc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3d2fc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3d2fc 12d             | _reset_hold_    res     1         ' 15ms
3d2fc 12d             | _reset_hold_    res     1         ' 15ms
3d2fc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3d2fc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3d2fc 12d             | _21ms_          res     1         ' 21ms
3d2fc 12d             | _21ms_          res     1         ' 21ms
3d2fc 12d             | _100ms_         res     1         ' 100ms
3d2fc 12d             | _100ms_         res     1         ' 100ms
3d2fc 12d             | _500ms_         res     1         ' 500ms
3d2fc 12d             | _500ms_         res     1         ' 500ms
3d2fc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3d2fc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3d2fc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3d2fc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3d2fc 12d             | '------------------------------------------------------------------------------
3d2fc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3d2fc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3d2fc 12d             | _usb_d_ls_nco_  res     1
3d2fc 12d             | _usb_d_ls_nco_  res     1
3d2fc 12d             | _usb_h_fs_nco_  res     1
3d2fc 12d             | _usb_h_fs_nco_  res     1
3d2fc 12d             | _usb_d_fs_nco_  res     1
3d2fc 12d             | _usb_d_fs_nco_  res     1
3d2fc 12d             | '------------------------------------------------------------------------------
3d2fc 12d             | ' Scratch registers
3d2fc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3d2fc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3d2fc 12d             | htmp1           res     1
3d2fc 12d             | htmp1           res     1
3d2fc 12d             | htmp2           res     1
3d2fc 12d             | htmp2           res     1
3d2fc 12d             | htmp3           res     1
3d2fc 12d             | htmp3           res     1
3d2fc 12d             | hrep            res     1         ' Repeat count
3d2fc 12d             | hrep            res     1         ' Repeat count
3d2fc 12d             | hsave0          res     1         ' Subroutine parameter saves
3d2fc 12d             | hsave0          res     1         ' Subroutine parameter saves
3d2fc 12d             | hsave1          res     1
3d2fc 12d             | hsave1          res     1
3d2fc 12d             | hsave2          res     1
3d2fc 12d             | hsave2          res     1
3d2fc 12d             | isrtmp1         res     1
3d2fc 12d             | isrtmp1         res     1
3d2fc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3d2fc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3d2fc 12d             | hr0             res     1         ' Multi-purpose registers
3d2fc 12d             | hr0             res     1         ' Multi-purpose registers
3d2fc 12d             | hr1             res     1
3d2fc 12d             | hr1             res     1
3d2fc 12d             | hr2             res     1
3d2fc 12d             | hr2             res     1
3d2fc 12d             | hr3             res     1
3d2fc 12d             | hr3             res     1
3d2fc 12d             | hpar1           res     1         ' Routine entry/exit parameters
3d2fc 12d             | hpar1           res     1         ' Routine entry/exit parameters
3d2fc 12d             | hpar2           res     1
3d2fc 12d             | hpar2           res     1
3d2fc 12d             | hpar3           res     1
3d2fc 12d             | hpar3           res     1
3d2fc 12d             | hct2            res     1         ' Function response bus turn-around timer
3d2fc 12d             | hct2            res     1         ' Function response bus turn-around timer
3d2fc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3d2fc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3d2fc 12d             | mod_cnt         res     1         ' Used in idle loops
3d2fc 12d             | mod_cnt         res     1         ' Used in idle loops
3d2fc 12d             |                 fit     $1F0
3d2fc 12d             |                 org     $200
3d2fc 200             | hlut_start
3d2fc 200             | 
3d2fc 200             | '------------------------------------------------------------------------------
3d2fc 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3d2fc 200             | ' settings to startup defaults.
3d2fc 200             | '------------------------------------------------------------------------------
3d2fc 200             | ' On entry:
3d2fc 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3d2fc 200             | '------------------------------------------------------------------------------
3d2fc 200             | set_speed_full
3d2fc 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3d300 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3d304 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3d308 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3d30c 204             | '                ret                             wcz     ' Restore caller flags on exit
3d30c 204             | 
3d30c 204             | '------------------------------------------------------------------------------
3d30c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3d30c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3d30c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3d30c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3d30c 204             | ' putting the smart pins into reset.
3d30c 204             | '------------------------------------------------------------------------------
3d30c 204             | ' On entry:
3d30c 204             | ' On exit: CZ flags restored to caller states
3d30c 204             | '------------------------------------------------------------------------------
3d30c 204             | set_speed_low
3d30c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3d310 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3d314 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3d318 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3d31c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3d320 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3d324 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3d328 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3d32c 20c             | 
3d32c 20c             | '------------------------------------------------------------------------------
3d32c 20c             | ' Perform configuration stuff required when a device intitially connects.
3d32c 20c             | '------------------------------------------------------------------------------
3d32c 20c             | ' On entry:
3d32c 20c             | ' On exit:
3d32c 20c             | '------------------------------------------------------------------------------
3d32c 20c             | on_connect
3d32c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3d330 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3d334 20e             | .retry
3d334 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d338 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3d33c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3d340 211 00 08 00 FF 
3d344 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d348 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3d34c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d350 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d354 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d358 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d35c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d360 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3d364 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3d368 21b 4C 03 B0 FD |                 call    #poll_waitx
3d36c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3d370 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3d374 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3d378 21f B8 FF 9F FD |                 jmp     #.retry
3d37c 220             | .get_dev_desc
3d37c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d380 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d384 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d388 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3d38c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3d390 225 88 FB BF FD |                 call    #reset
3d394 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3d398 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d39c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3d3a0 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3d3a4 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d3a8 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3d3ac 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3d3b0 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d3b4 22e 04 00 00 FF 
3d3b8 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3d3bc 230 34 FA BF FD |                 call    #calc_crc5
3d3c0 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3d3c4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d3c8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d3cc 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3d3d0 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d3d4 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d3d8 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d3dc 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3d3e0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d3e4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d3e8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d3ec 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3d3f0 23d C4 02 B0 FD |                 call    #poll_waitx
3d3f4 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3d3f8 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d3fc 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d400 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d404 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d408 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d40c 244 2D 00 64 5D |         if_nz   ret
3d410 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d414 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d418 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d41c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d420 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3d424 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3d428 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3d42c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3d430 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3d434 24e 2C FB 9F CD |         if_b    jmp     #host_error
3d438 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3d43c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3d440 251 2D EC 63 FD |                 call    pa
3d444 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3d448 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3d44c 254 2C EC 63 FD |                 jmp     pa
3d450 255             | 
3d450 255             | '------------------------------------------------------------------------------
3d450 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3d450 255             | ' Status reporting is always in the function-to-host direction.
3d450 255             | '------------------------------------------------------------------------------
3d450 255             | ' On entry:
3d450 255             | '   PTRA - start address of the SETUP data in hub.
3d450 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3d450 255             | '     stage.
3d450 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3d450 255             | ' On exit:
3d450 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3d450 255             | '     contains the count of data stage bytes actually received, which must
3d450 255             | '     always be <= the count requested.
3d450 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3d450 255             | '     more specific USB operation error code.
3d450 255             | '------------------------------------------------------------------------------
3d450 255             | control_read
3d450 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3d454 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3d458 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3d45c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3d460 259             | .xfer_start
3d460 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3d464 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3d468 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d46c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3d470 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3d474 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3d478 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3d47c 260 61 00 00 FF 
3d480 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3d484 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3d488 263             | .data
3d488 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3d48c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3d490 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3d494 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3d498 267             | .nak_retry
3d498 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3d49c 268             | .in_retry
3d49c 268 BC F6 BF FD |                 call    #txn_in
3d4a0 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3d4a4 26a 28 00 90 AD |         if_z    jmp     #.commit
3d4a8 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3d4ac 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3d4b0 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3d4b4 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d4b8 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3d4bc 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3d4c0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3d4c4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3d4c8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3d4cc 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3d4d0 275             | .commit
3d4d0 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3d4d4 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3d4d8 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3d4dc 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3d4e0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3d4e4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3d4e8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3d4ec 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3d4f0 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3d4f4 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3d4f8 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3d4fc 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3d500 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3d504 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3d508 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3d50c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3d510 285             | .pre_status
3d510 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3d514 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3d518 287 00 B0 06 F6 |                 mov     pkt_data, #0
3d51c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3d520 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3d524 28a 61 00 00 FF 
3d528 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3d52c 28c             | .out_retry
3d52c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3d530 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d534 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3d538 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3d53c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3d540 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3d544 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3d548 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3d54c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3d550 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3d554 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3d558 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3d558 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3d558 297             | ' ControlRead() transfer gets things unstuck most of the time...
3d558 297             | .xfer_retry
3d558 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3d55c 298 58 01 B0 FD |                 call    #poll_waitx
3d560 299 8C F9 BF FD |                 call    #wait_txn_ok
3d564 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3d568 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3d56c 29c C8 EF 03 F6 |                 mov     pb, hpar3
3d570 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3d574 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3d578 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3d57c 2a0             | 
3d57c 2a0             | '------------------------------------------------------------------------------
3d57c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3d57c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3d57c 2a0             | ' the SETUP data struct is filled with the required values.
3d57c 2a0             | '------------------------------------------------------------------------------
3d57c 2a0             | ' On entry:
3d57c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3d57c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3d57c 2a0             | '     stage.
3d57c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3d57c 2a0             | ' On exit:
3d57c 2a0             | '   retval - used to convey the success/failure of each stage.
3d57c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3d57c 2a0             | '     more specific USB operation error code.
3d57c 2a0             | '------------------------------------------------------------------------------
3d57c 2a0             | control_write
3d57c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3d580 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d584 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d588 2a3             | 
3d588 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3d58c 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3d590 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3d594 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3d598 2a7             | .xfer_start
3d598 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3d59c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3d5a0 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3d5a4 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d5a8 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3d5ac 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3d5b0 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3d5b4 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3d5b8 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3d5bc 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3d5c0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3d5c4 2b2             | .data
3d5c4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3d5c8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3d5cc 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3d5d0 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3d5d4 2b6             | .out_retry
3d5d4 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3d5d8 2b7 88 F6 BF FD |                 call    #txn_out
3d5dc 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d5e0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3d5e4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3d5e8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3d5ec 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3d5f0 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3d5f4 2be             | .commit
3d5f4 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3d5f8 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3d5fc 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3d600 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3d604 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3d608 2c3             | pre_status_in
3d608 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3d60c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3d610 2c5             | .status_retry
3d610 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3d614 2c6 44 F5 BF FD |                 call    #txn_in
3d618 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3d61c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3d620 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3d624 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3d628 2cb 2D 00 64 AD |         if_z    ret
3d62c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3d630 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3d634 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3d638 2cf             | '               ret                                     ' Caller must handle transfer retirement
3d638 2cf             | 
3d638 2cf             | '------------------------------------------------------------------------------
3d638 2cf             | ' Execute an IN interrupt transaction.
3d638 2cf             | '------------------------------------------------------------------------------
3d638 2cf             | ' On entry:
3d638 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3d638 2cf             | '   hpar2 - Address of the IN data buffer
3d638 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3d638 2cf             | ' On exit:
3d638 2cf             | '   retval - the result of the operation.
3d638 2cf             | '   hpar3 - the count of IN data bytes actually received.
3d638 2cf             | '------------------------------------------------------------------------------
3d638 2cf             | do_int_in
3d638 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3d63c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d640 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d644 2d2             | 
3d644 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3d648 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3d64c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3d650 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3d654 2d6             | .retry
3d654 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3d658 2d7 00 F5 BF FD |                 call    #txn_in
3d65c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3d660 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3d664 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3d668 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3d66c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3d670 2dd 54 00 B0 FD |                 call    #retry_wait
3d674 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3d678 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3d67c 2e0 D4 FF 9F FD |                 jmp     #.retry
3d680 2e1             | .commit
3d680 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3d684 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3d688 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3d68c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3d690 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3d694 2e6             | .post_ret
3d694 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3d698 2e7             | 
3d698 2e7             | 
3d698 2e7             | '------------------------------------------------------------------------------
3d698 2e7             | ' Resets the downstream hub port to FS
3d698 2e7             | '------------------------------------------------------------------------------
3d698 2e7             | dwnstream_reset
3d698 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3d69c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3d6a0 2e9             | 
3d6a0 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3d6a4 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3d6a8 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d6ac 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3d6b0 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3d6b4 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3d6b8 2ef             | 
3d6b8 2ef             | '------------------------------------------------------------------------------
3d6b8 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3d6b8 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3d6b8 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3d6b8 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3d6b8 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3d6b8 2ef             | '------------------------------------------------------------------------------
3d6b8 2ef             | ' On entry:
3d6b8 2ef             | '   hctwait - wait interval in sysclocks.
3d6b8 2ef             | ' On exit:
3d6b8 2ef             | '------------------------------------------------------------------------------
3d6b8 2ef             | poll_waitx
3d6b8 2ef 1A 92 63 FD |                 getct   hct2
3d6bc 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3d6c0 2f1             | .wait
3d6c0 2f1 FF 25 CC FB |                 jnct2   #.wait
3d6c4 2f2 2D 00 64 FD |                 ret
3d6c8 2f3             | 
3d6c8 2f3             | '------------------------------------------------------------------------------
3d6c8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3d6c8 2f3             | '------------------------------------------------------------------------------
3d6c8 2f3             | ' On entry:
3d6c8 2f3             | '   retval - transaction response PID or error code.
3d6c8 2f3             | ' On exit:
3d6c8 2f3             | '------------------------------------------------------------------------------
3d6c8 2f3             | retry_wait
3d6c8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3d6cc 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3d6d0 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d6d4 2f6 14 00 90 AD |         if_z    jmp     #.nak
3d6d8 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3d6dc 2f8 D8 FF BF FD |                 call    #poll_waitx
3d6e0 2f9             | .dec
3d6e0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3d6e4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3d6e8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3d6ec 2fc             | .nak
3d6ec 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3d6f0 2fd C4 FF BF FD |                 call    #poll_waitx
3d6f4 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3d6f8 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3d6fc 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3d700 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3d704 302 2D 00 64 FD |                 ret
3d708 303             | 
3d708 303             | host_reset
3d708 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3d70c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3d710 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3d710 305 BD 01 05 FF 
3d714 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3d718 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3d71c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3d720 309             | ' Check to see if the system clock has been changed.
3d720 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3d724 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3d728 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3d72c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3d730 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3d734 30e 40 46 62 FD |                 dirl    dp
3d738 30f             | 
3d738 30f 28 02 64 FD |                 setq    #1
3d73c 310 80 00 80 FF 
3d740 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3d744 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3d748 313             | .enable
3d748 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3d74c 314 41 46 62 FD |                 dirh    dp
3d750 315 1F 36 63 FD |                 waitx   _1us_
3d754 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3d758 317             | 
3d758 317             |                 ' Handle Port protection enable and startup delay
3d758 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3d75c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3d760 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3d764 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3d768 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3d76c 31c             | 
3d76c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3d770 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3d774 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3d778 31f 00 00 04 F6 |                 mov     0-0, #0
3d77c 320             | .regloop
3d77c 320             | 
3d77c 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3d77c 320             | 
3d77c 320             | discon_entry
3d77c 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3d780 321             | 
3d780 321             |               
3d780 321             |         if HAVE_HIDPAD
3d780 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3d784 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3d788 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3d78c 324 F7 01 68 FC |                 wrlong  #0,pb
3d790 325             |         end
3d790 325             |         if EMUPAD_MAX_PLAYER > 0
3d790 325             |         end
3d790 325             | 
3d790 325             |                 ' Fall through to disconnected loop
3d790 325             | 
3d790 325             | '-----------------------------------------------------------------------------------------------------------------
3d790 325             | ' Device connect handling (Section 7.1.7.3).
3d790 325             | '-----------------------------------------------------------------------------------------------------------------
3d790 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3d790 325             | ' device to connect (Section 7.1.7.3).
3d790 325             | '-----------------------------------------------------------------------------------------------------------------
3d790 325             | disconnected
3d790 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3d794 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3d798 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3d79c 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3d7a0 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3d7a4 32a             |         if ACTIVITY_LED >= 0
3d7a4 32a             |         end
3d7a4 32a 22 A7 82 FA |                 rqpin   urx, dm
3d7a8 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3d7ac 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3d7b0 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3d7b4 32e             | .se1_test
3d7b4 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3d7b8 32f FC FE BF FD |                 call    #poll_waitx
3d7bc 330 22 A7 82 FA |                 rqpin   urx, dm
3d7c0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3d7c4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3d7c8 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3d7cc 334             | .se1            'SE1 is a fatal error condition
3d7cc 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3d7d0 335 E4 FE BF FD |                 call    #poll_waitx
3d7d4 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3d7d8 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3d7dc 338             | .connect_test                                           ' Test lines until stable J/K state seen
3d7dc 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3d7e0 339 22 A7 82 FA |                 rqpin   urx, dm
3d7e4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3d7e8 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3d7ec 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3d7f0 33d             | connected
3d7f0 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3d7f4 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3d7f8 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3d7fc 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3d800 341             | .set_pulse
3d800 341 1A 64 63 FD |                 getct   _pulse_time_
3d804 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3d808 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3d808 343             | ' of 1ms and make a correction, if necessary.
3d808 343             | '                mov     htmp, _1ms_
3d808 343             | '                subs    htmp, iframe_delta
3d808 343             | '                adds    _frame1ms_clks_, htmp
3d808 343             | '                debug(udec(_frame1ms_clks_))
3d808 343             | 
3d808 343             |                 ' Fall through to idle/processing loop
3d808 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3d80c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3d810 345             | 
3d810 345             | hidle
3d810 345 22 A7 82 FA |                 rqpin   urx, dm
3d814 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3d818 347 98 00 90 CD |         if_c    jmp     #.se0_test
3d81c 348 24 06 70 FD |                 pollct3                         wc
3d820 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3d824 34a 1A 94 63 FD |                 getct   hct3
3d828 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3d82c 34c             | 
3d82c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d830 34d 00 70 E3 F8 |                 getbyte htmp
3d834 34e             | 
3d834 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3d838 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3d83c 350 40 00 90 AD |         if_z    jmp     #.poll
3d840 351             | 
3d840 351             |         if _HAVE_GAMEPAD
3d840 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3d844 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3d848 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3d84c 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3d850 355 2C 00 90 AD |         if_z    jmp     #.poll
3d854 356             |         end
3d854 356             | 
3d854 356             |         if HAVE_MOUSE
3d854 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3d858 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3d85c 358 20 00 90 AD |         if_z    jmp     #.poll
3d860 359             |         end
3d860 359             | 
3d860 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3d864 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3d868 35b 14 00 90 AD |         if_z    jmp     #.poll
3d86c 35c             | 
3d86c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3d870 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3d874 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3d878 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3d87c 360             |         if HAVE_MOUSE
3d87c 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3d880 361             |         else
3d880 361             |         end
3d880 361             | 
3d880 361             | .poll
3d880 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3d884 362 2D EC 63 FD |                 call    pa
3d888 363             | .skip_poll
3d888 363             | 
3d888 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3d88c 364             | 
3d88c 364             | .nopoll
3d88c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3d890 365 44 00 90 AD |         if_z    jmp     #hsuspend
3d894 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3d898 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3d89c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3d8a0 369 1A 84 63 FD |                 getct   hr0
3d8a4 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3d8a8 36b             |         if ACTIVITY_LED >= 0
3d8a8 36b             |         end
3d8a8 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3d8ac 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3d8b0 36d 5C FF 9F FD |                 jmp     #hidle
3d8b4 36e             | ' Check for extended SE0 state on the bus
3d8b4 36e             | .se0_test
3d8b4 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3d8b8 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3d8bc 370 22 A7 82 FA |                 rqpin   urx, dm
3d8c0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3d8c4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3d8c8 373 24 F6 BF FD |                 call    #wait_txn_ok
3d8cc 374 00 00 80 FF 
3d8d0 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3d8d4 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3d8d4 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3d8d8 377             | 
3d8d8 377             | hsuspend
3d8d8 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3d8dc 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3d8e0 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3d8e4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3d8e8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3d8ec 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3d8f0 37d             | 
3d8f0 37d             |                 ' Fall through to resume wait loop
3d8f0 37d             | 
3d8f0 37d             | hwait_resume
3d8f0 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3d8f4 37e 02 86 47 F0 |                 shr     hr1, #2
3d8f8 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3d8fc 380             |         if ACTIVITY_LED >= 0
3d8fc 380             |         end
3d8fc 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3d900 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3d904 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3d908 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3d90c 384 18 00 90 AD |         if_z    jmp     #.resume
3d910 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3d914 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3d918 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3d91c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d920 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3d924 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3d928 38b             | .resume
3d928 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3d92c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3d930 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3d934 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3d938 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3d93c 390 1F 70 63 FD |                 waitx   htmp
3d940 391 22 07 28 FC |                 wypin   #OUT_J, dm
3d944 392 01 70 47 F0 |                 shr     htmp, #1
3d948 393 1F 70 63 FD |                 waitx   htmp
3d94c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3d950 395 1A 92 62 FD |                 getct   iframe_ct_base
3d954 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d958 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d95c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3d960 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3d964 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3d968 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3d96c 39c             | 
3d96c 39c             | '------------------------------------------------------------------------------
3d96c 39c             | ' Send preamble to enable low-speed HUB ports
3d96c 39c             | '------------------------------------------------------------------------------
3d96c 39c             | ' On entry:
3d96c 39c             | ' On exit:
3d96c 39c             | '   USB baud rate set to low-speed
3d96c 39c             | '------------------------------------------------------------------------------
3d96c 39c             | utx_pre
3d96c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3d970 39d 40 46 62 FD |                 dirl    dp
3d974 39e 28 02 64 FD |                 setq    #1
3d978 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3d97c 3a0 58 44 62 FD |                 drvl    dm
3d980 3a1 59 46 62 FD |                 drvh    dp
3d984 3a2             | 
3d984 3a2 1E 00 00 FF 
3d988 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3d98c 3a4             | 
3d98c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3d990 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3d994 3a6 28 02 64 3D |         if_nc   setq    #1
3d998 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3d99c 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3d9a0 3a9             | .l1
3d9a0 3a9             | 
3d9a0 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3d9a4 3aa 40 46 62 FD |                 dirl    dp
3d9a8 3ab 28 02 64 FD |                 setq    #1
3d9ac 3ac 80 00 80 FF 
3d9b0 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3d9b4 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3d9b8 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3d9bc 3b0 41 46 62 FD |                 dirh    dp
3d9c0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3d9c4 3b2             | 
3d9c4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3d9c8 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3d9cc 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3d9d0 3b5             | 
3d9d0 3b5             | hlut_end
3d9d0 3b5             |                 fit     $400
3d9d0 3b5             |                 orgh
3d9d0                 | if OVERLAP_MEMORY
3d9d0                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3d9d0                 | end
3d9d0                 | '------------------------------------------------------------------------------
3d9d0                 | ' Routines called from cog space.
3d9d0                 | '------------------------------------------------------------------------------
3d9d0                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3d9d0                 | '------------------------------------------------------------------------------
3d9d0                 | 
3d9d0                 | '------------------------------------------------------------------------------
3d9d0                 | ' USB host cog initialization.
3d9d0                 | '------------------------------------------------------------------------------
3d9d0                 | usb_host_init
3d9d0                 |                 ' Initialize buffer pointers
3d9d0                 |         if OVERLAP_MEMORY
3d9d0                 |         else
3d9d0     3C 15 B0 FE |                 loc     pb, #hid_descr
3d9d4                 |         end
3d9d4     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3d9d8                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3d9d8                 |                 {
3d9d8                 |                 }
3d9d8                 |         
3d9d8                 |                 {
3d9d8                 |                 }
3d9d8                 |                 'loc     pb,#hkbd_report
3d9d8                 |                 'mov     hkbd_report_p,pb
3d9d8                 | 
3d9d8     04 1D B0 FE |                 loc     pb, #hub_descr
3d9dc     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3d9e0     19 1D B0 FE |                 loc     pb, #urx_buff
3d9e4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3d9e8     91 1D B0 FE |                 loc     pb, #dev_desc_buff
3d9ec     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3d9f0     9B 1D B0 FE |                 loc     pb, #con_desc_buff
3d9f4     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3d9f8     14 15 B0 FE |                 loc     pb, #usb_cache_start
3d9fc     F7 55 02 F6 |                 mov     cache_start_p, pb
3da00     E5 1C B0 FE |                 loc     pb, #usb_cache_end
3da04     F7 57 02 F6 |                 mov     cache_end_p, pb
3da08                 | 
3da08                 |         if ERROR_LED >= 0
3da08                 |         end
3da08                 | 
3da08                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3da08                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3da08                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3da08                 | ' Configure and enable the Serial Host USB port.
3da08     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3da0c                 | 
3da0c                 | '------------------------------------------------------------------------------
3da0c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3da0c                 | '------------------------------------------------------------------------------
3da0c                 | ' On entry:
3da0c                 | '   htmp - current CLKFREQ value.
3da0c                 | '------------------------------------------------------------------------------
3da0c                 | hinit_usb_timings
3da0c                 | '                getct   htmp2
3da0c     B8 59 02 F6 |                 mov     save_sysclk, htmp
3da10     8D 5B 80 FF 
3da14     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3da18     18 30 63 FD |                 getqx   _12Mbps_
3da1c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3da20     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3da24     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3da28     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3da2c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3da30     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3da34     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3da38     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3da3c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3da40     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3da44     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3da48     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3da4c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3da50     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3da54     80 00 00 FF 
3da58     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3da5c     18 2C 63 FD |                 getqx   _var_64_lower_
3da60     19 2E 63 FD |                 getqy   _var_64_upper_
3da64     28 2C 63 FD |                 setq    _var_64_lower_
3da68     65 CD 1D FF 
3da6c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3da70     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3da74     01 00 00 FF 
3da78     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3da7c     18 2C 63 FD |                 getqx   _var_64_lower_
3da80     19 2E 63 FD |                 getqy   _var_64_upper_
3da84     28 2C 63 FD |                 setq    _var_64_lower_
3da88     A1 07 00 FF 
3da8c     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3da90     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3da94     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3da98     09 36 57 F0 |                 shr     _1us_, #9               wc
3da9c     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3daa0     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3daa4     18 38 63 FD |                 getqx   _10us_
3daa8     09 38 57 F0 |                 shr     _10us_, #9              wc
3daac     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3dab0     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3dab4     18 3A 63 FD |                 getqx   _33us_
3dab8     09 3A 57 F0 |                 shr     _33us_, #9              wc
3dabc     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3dac0     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3dac4     18 3C 63 FD |                 getqx   _txn_err_
3dac8     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3dacc     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3dad0     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3dad4     18 3E 63 FD |                 getqx   _500us_
3dad8     09 3E 57 F0 |                 shr     _500us_, #9             wc
3dadc     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3dae0     01 00 00 FF 
3dae4     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3dae8     18 40 63 FD |                 getqx   _txn_ok_ls_
3daec     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3daf0     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3daf4     01 00 00 FF 
3daf8     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3dafc     18 42 63 FD |                 getqx   _txn_ok_fs_
3db00     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3db04     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3db08     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3db0c     05 00 00 FF 
3db10     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3db14     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3db18     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3db1c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3db20     1C 00 00 FF 
3db24     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3db28     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3db2c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3db30     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3db34     00 00 00 FF 
3db38     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3db3c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3db40     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3db44     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3db48     04 00 00 FF 
3db4c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3db50     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3db54     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3db58     8D 5B 00 FF 
3db5c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3db60     18 4C 63 FD |                 getqx   _preamble_wait_
3db64     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3db68     01 00 00 FF 
3db6c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3db70     18 2C 63 FD |                 getqx   _var_64_lower_
3db74     19 2E 63 FD |                 getqy   _var_64_upper_
3db78     28 2C 63 FD |                 setq    _var_64_lower_
3db7c     01 00 00 FF 
3db80     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3db84     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3db88     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3db8c     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3db90     FF FF 7F FF 
3db94     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3db98     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3db9c     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3dba0     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3dba4     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3dba8     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3dbac     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3dbb0     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3dbb4     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3dbb8     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3dbbc     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3dbc0     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3dbc4     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3dbc8     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3dbcc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3dbd0     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3dbd4     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3dbd8     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3dbdc     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3dbe0     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3dbe4     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3dbe8     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3dbec     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3dbf0     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3dbf4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3dbf8     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3dbfc     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3dc00                 | '        _ret_   mov     _1sec_, save_sysclk
3dc00                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3dc00                 | '                ret
3dc00                 | {
3dc00                 | }
3dc00                 | 
3dc00                 | '------------------------------------------------------------------------------
3dc00                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3dc00                 | ' one. If it is, start the task progression that will configure the device for
3dc00                 | ' use.
3dc00                 | '------------------------------------------------------------------------------
3dc00                 | ' On entry:
3dc00                 | '   hconfig_base - start address of the cached config descriptor chain.
3dc00                 | ' On exit:
3dc00                 | '------------------------------------------------------------------------------
3dc00                 | hparse_con_desc
3dc00     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3dc04     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3dc08     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3dc0c     4E 70 FF F9 |                 movbyts htmp,#%%1032
3dc10     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3dc14                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3dc14                 | 
3dc14     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3dc18     6E ED 03 F1 |                 add     pa, hconfig_base
3dc1c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3dc20                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3dc20                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3dc20                 | ' that defines a keyboard and/or mouse.
3dc20     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3dc24                 | .next_intf
3dc24     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3dc28     B8 01 90 3D |         if_ae   jmp     #hset_config
3dc2c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3dc30     75 F3 03 F1 |                 add     ptrb, hnext_desc
3dc34     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3dc38     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3dc3c     0C 00 90 AD |         if_z    jmp     #.intf
3dc40     80 71 C7 FA |                 rdbyte  htmp, ptrb
3dc44     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3dc48     D8 FF 9F FD |                 jmp     #.next_intf
3dc4c                 | .intf
3dc4c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3dc50     00 90 07 F6 |                 mov     hpar3, #0
3dc54     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3dc58     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3dc5c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3dc60     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3dc64                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3dc64                 | 
3dc64                 | .endp
3dc64     80 71 C7 FA |                 rdbyte  htmp, ptrb
3dc68     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3dc6c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3dc70     78 00 90 3D |         if_ae   jmp     #.get_device
3dc74     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3dc78     75 F3 03 F1 |                 add     ptrb, hnext_desc
3dc7c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3dc80     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3dc84     64 00 90 AD |         if_z    jmp     #.get_device
3dc88     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3dc8c     04 00 90 AD |         if_z    jmp     #.get_ep
3dc90     D0 FF 9F FD |                 jmp     #.endp
3dc94                 | .get_ep
3dc94     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3dc98     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3dc9c     0F 86 67 F0 |                 shl     hr1, #8 + 7
3dca0     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3dca4     3F 00 00 FF 
3dca8     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3dcac     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3dcb0     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3dcb4     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3dcb8     00 90 0F F2 |                 cmp     hpar3, #0               wz
3dcbc     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3dcc0     A0 FF 9F FD |                 jmp     #.endp
3dcc4                 | .in_ep
3dcc4     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3dcc8     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3dccc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3dccc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3dcd0     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3dcd4     8C FF 9F FD |                 jmp     #.endp
3dcd8                 | .out_ep
3dcd8     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3dcdc     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3dce0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3dce0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3dce4     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3dce8     78 FF 9F FD |                 jmp     #.endp
3dcec                 | 
3dcec                 | .get_device
3dcec     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3dcf0     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3dcf4     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3dcf8     64 00 90 AD |         if_z    jmp     #.gamepad
3dcfc     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3dd00     A8 00 90 AD |         if_z    jmp     #.hub
3dd04     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3dd08     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3dd0c                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3dd0c     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3dd10     4C 00 90 AD |         if_z    jmp     #.gamepad
3dd14     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3dd18     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3dd1c                 | .keyboard
3dd1c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3dd20                 |         if HAVE_MOUSE
3dd20     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3dd24                 |         else
3dd24                 |         end
3dd24     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3dd28     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3dd2c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3dd30     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3dd34     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3dd38     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3dd3c                 |                 'debug(udec(kb_intf_num))
3dd3c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3dd3c     E4 FE 9F FD |                 jmp     #.next_intf
3dd40                 | if HAVE_MOUSE
3dd40                 | .mouse
3dd40     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3dd44     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3dd48     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3dd4c     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3dd50     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3dd54                 |                 'getbyte ms_interval, hr2, #3
3dd54     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3dd58     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3dd5c                 |                 'debug(udec(kb_intf_num))
3dd5c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3dd5c     C4 FE 9F FD |                 jmp     #.next_intf
3dd60                 | end
3dd60                 | .gamepad
3dd60     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3dd64     C7 71 63 F5 |                 xor     htmp, hpar2
3dd68     3F 00 00 FF 
3dd6c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3dd70     B0 FE 9F AD |         if_z    jmp     #.next_intf
3dd74                 |         if HAVE_MOUSE
3dd74     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3dd78     C7 71 63 F5 |                 xor     htmp, hpar2
3dd7c     3F 00 00 FF 
3dd80     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3dd84     9C FE 9F AD |         if_z    jmp     #.next_intf
3dd88                 |         end
3dd88     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3dd8c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3dd90     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3dd94                 | 
3dd94     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3dd98     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3dd9c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3dda0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3dda4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3dda8                 |                 'debug(udec(gp_intf_num))
3dda8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3dda8     78 FE 9F FD |                 jmp     #.next_intf
3ddac                 | .hub
3ddac     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3ddb0     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3ddb4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3ddb8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3ddbc     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3ddc0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3ddc4     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3ddc8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3ddcc     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3ddd0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3ddd4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ddd8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3dddc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3dde0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3dde0     40 FE 9F FD |                 jmp     #.next_intf
3dde4                 | 
3dde4                 | '------------------------------------------------------------------------------
3dde4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3dde4                 | ' it according to its function, or functions. In the case of this boot protocol
3dde4                 | ' keyboard/mouse class driver:
3dde4                 | ' - SetConfiguration(config_num)
3dde4                 | ' - SetProtocol(boot)
3dde4                 | ' - SetIdle(indefinite)
3dde4                 | ' - Enter the device interrupt IN polling task stage.
3dde4                 | '------------------------------------------------------------------------------
3dde4                 | ' On entry:
3dde4                 | ' On exit:
3dde4                 | '------------------------------------------------------------------------------
3dde4                 | hset_config
3dde4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3dde4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3dde4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3dde8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ddec     00 00 0C F2 |                 cmp     0-0, #0                 wz
3ddf0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3ddf4                 |         if HAVE_MOUSE
3ddf4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3ddf8                 |         end
3ddf8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3ddfc     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3de00                 | .set_config
3de00     6C 0E D0 FE |                 loc     ptra, #set_config
3de04     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3de08     6E ED 03 F1 |                 add     pa, hconfig_base
3de0c     F6 8D C3 FA |                 rdbyte  hpar1, pa
3de10     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3de14     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3de18     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3de1c     A0 02 A0 FD |                 call    #control_write
3de20     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3de24     2D 00 64 5D |         if_nz   ret
3de28                 | .kbd_config
3de28     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3de2c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3de30                 | 
3de30     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3de34     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3de38     3F 00 00 FF 
3de3c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3de40     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3de44                 | 
3de44     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3de48     34 0E D0 FE |                 loc     ptra, #set_protocol
3de4c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3de50     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3de54     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3de58     A0 02 A0 FD |                 call    #control_write
3de5c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3de60     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3de64     E4 02 90 5D |         if_nz   jmp     #.notify_client
3de68     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3de6c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3de70     30 03 B0 FD |                 call    #hset_idle
3de74                 |                 'cmp     retval, #PID_ACK        wz
3de74                 |         'if_nz   mov     hkbd_ep_addr, #0
3de74                 |         'if_nz   jmp     #.notify_client
3de74     A8 99 02 F6 |                 mov     hctwait, _2ms_
3de78     EF 02 A0 FD |                 call    #poll_waitx
3de7c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3de80     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3de84     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3de88     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3de8c     2C 03 B0 FD |                 call    #hset_kbdled_report
3de90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3de94     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3de98     B0 02 90 5D |         if_nz   jmp     #.notify_client
3de9c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3dea0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3dea4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3dea8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3deac     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3deb0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3deb4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3deb8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3debc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3dec0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3dec4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3dec8                 |         if !!HAVE_MOUSE
3dec8                 |         end
3dec8                 | 
3dec8                 | .mouse_config
3dec8                 | if HAVE_MOUSE
3dec8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3decc     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3ded0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3ded4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3ded8     3F 00 00 FF 
3dedc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3dee0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3dee4                 | 
3dee4                 |                 debug("mouse passed addr check")
3dee4                 | 
3dee4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3dee8     00 00 80 FF 
3deec     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3def0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3def4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3def8     55 02 A0 FD |                 call    #control_read
3defc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3df00     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3df04     44 02 90 5D |         if_nz   jmp     #.notify_client
3df08     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3df0c     56 01 00 F6 |                 mov     0-0, total_data
3df10     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3df14                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3df14                 | 
3df14     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3df18     64 0D D0 FE |                 loc     ptra, #set_protocol
3df1c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3df20     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3df24     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3df28     A0 02 A0 FD |                 call    #control_write
3df2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3df30     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3df34     14 02 90 5D |         if_nz   jmp     #.notify_client
3df38                 |                 debug("mouse passed SetProtocol")
3df38     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3df3c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3df40     60 02 B0 FD |                 call    #hset_idle
3df44                 |                 'cmp     retval, #PID_ACK        wz
3df44                 |         'if_nz   mov     hmouse_ep_addr, #0
3df44                 |         'if_nz   jmp     #.notify_client
3df44                 |                 debug("mouse passed SetIdle")
3df44     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3df48     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3df4c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3df50     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3df54     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3df58     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3df5c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3df60     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3df64     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3df68     3F 00 00 FF 
3df6c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3df70     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3df74     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3df78     D0 01 90 FD |                 jmp     #.notify_client
3df7c                 | end
3df7c                 | .gamepad_config
3df7c                 | if _HAVE_GAMEPAD
3df7c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3df80     00 00 0C F2 |                 cmp     0-0, #0                 wz
3df84     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3df88     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3df8c     00 70 03 F6 |                 mov     htmp, 0-0
3df90     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3df94     3F 00 00 FF 
3df98     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3df9c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3dfa0                 | 
3dfa0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3dfa4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3dfa8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3dfac     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3dfb0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3dfb4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3dfb8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3dfbc     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3dfc0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3dfc4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3dfc8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3dfcc     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3dfd0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3dfd4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3dfd8                 | 
3dfd8                 |                 if EMUPAD_MAX_PLAYER > 0
3dfd8                 |                 
3dfd8                 | .rule_loop           
3dfd8                 |                 end
3dfd8                 | 
3dfd8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3dfdc     5C 00 90 AD |         if_e    jmp     #.xinput
3dfe0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3dfe4     00 70 03 F6 |                 mov     htmp,0-0
3dfe8     01 A6 02 FF 
3dfec     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3dff0     7C 00 90 AD |         if_e    jmp     #.ps3
3dff4                 | 
3dff4     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3dff8     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3dffc     00 00 80 5F 
3e000     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3e004     03 00 80 AF 
3e008     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3e00c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3e010     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e014     55 02 A0 FD |                 call    #control_read
3e018     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e01c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3e020     00 00 04 56 |         if_nz   mov     0-0, #0
3e024     24 01 90 5D |         if_nz   jmp     #.notify_client
3e028     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3e02c     56 01 00 F6 |                 mov     0-0, total_data
3e030     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e034                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3e034                 | 
3e034     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3e038     10 01 90 FD |                 jmp     #.notify_client
3e03c                 | .xinput
3e03c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3e040     2D EF 03 F6 |                 mov     pb,hdev_port
3e044     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3e048     03 EE 27 F3 |                 fle     pb,#3
3e04c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3e050     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3e054                 | 
3e054     03 B0 06 F6 |                 mov     pkt_data, #3
3e058     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3e05c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3e060     5A 00 A0 FD |                 call    #txn_out
3e064     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3e068                 | 
3e068     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3e06c     DC 00 90 FD |                 jmp     #.notify_client
3e070                 | .ps3
3e070     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3e074     2D EF 03 F6 |                 mov     pb,hdev_port
3e078     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3e07c     04 EE 27 F3 |                 fle     pb,#4
3e080     F7 EF C3 F9 |                 decod   pb
3e084     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3e088                 | 
3e088     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3e08c     00 0C D0 FE |                 loc     ptra, #set_report
3e090     01 00 80 FF 
3e094     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3e098     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e09c     03 61 5C FC |                 wrword  #48, ptra[wLength]
3e0a0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3e0a4     A0 02 A0 FD |                 call    #control_write
3e0a8                 | 
3e0a8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3e0ac     E0 0B D0 FE |                 loc     ptra, #set_report
3e0b0     01 00 80 FF 
3e0b4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3e0b8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e0bc     03 09 5C FC |                 wrword  #4, ptra[wLength]
3e0c0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3e0c4     A0 02 A0 FD |                 call    #control_write
3e0c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3e0cc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3e0d0     00 00 04 56 |         if_nz   mov     0-0, #0
3e0d4     74 00 90 5D |         if_nz   jmp     #.notify_client
3e0d8                 | 
3e0d8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3e0dc     6C 00 90 FD |                 jmp     #.notify_client
3e0e0                 | end
3e0e0                 | 
3e0e0                 | .hub_config
3e0e0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3e0e4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3e0e8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3e0ec     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3e0f0     3F 00 00 FF 
3e0f4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e0f8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3e0fc                 | 
3e0fc     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3e100     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3e104     26 EF 03 F6 |                 mov     pb, hub_descr_p
3e108     55 02 A0 FD |                 call    #control_read
3e10c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e110     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3e114     34 00 90 5D |         if_nz   jmp     #.notify_client
3e118                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3e118                 | 
3e118     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3e11c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3e120     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3e124                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3e124                 | .pwr_loop
3e124     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3e128     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3e12c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3e130     A0 02 A0 FD |                 call    #control_write
3e134     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3e138                 | 
3e138     B1 99 02 F6 |                 mov     hctwait, _500ms_
3e13c     B0 99 02 F1 |                 add     hctwait, _100ms_
3e140     EF 02 A0 FD |                 call    #poll_waitx
3e144                 | 
3e144     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3e148     00 00 90 FD |                 jmp     #.notify_client
3e14c                 | 
3e14c                 | .notify_client
3e14c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3e150     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3e154                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3e154                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3e154     2D 00 64 FD |                 ret
3e158                 | 
3e158                 | '------------------------------------------------------------------------------
3e158                 | ' Initialize the keyboard/mouse data area to start-up values.
3e158                 | '------------------------------------------------------------------------------
3e158                 | ' On entry:
3e158                 | ' On exit:
3e158                 | '------------------------------------------------------------------------------
3e158                 | init_kbdm_data
3e158     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3e15c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3e160                 | 
3e160     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3e164     2B ED 03 F6 |                 mov     pa, cache_end_p
3e168                 | .loop
3e168     61 01 4C FC |                 wrbyte  #0, ptra++
3e16c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3e170     F4 FF 9F CD |         if_b    jmp     #.loop
3e174                 |         
3e174                 |         if EMUPAD_MAX_PLAYER > 0
3e174                 |         end
3e174                 | 
3e174                 | 
3e174     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3e178                 | .regloop
3e178     00 EC 8F F9 |                 altd    pa
3e17c     00 00 04 F6 |                 mov     0-0, #0
3e180     01 EC 07 F1 |                 add     pa, #1
3e184     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3e188     EC FF 9F 5D |         if_nz   jmp     #.regloop
3e18c                 | 
3e18c     E1 E1 61 FF 
3e190     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3e194     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3e198     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3e19c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3e1a0                 | 
3e1a0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3e1a4                 | 
3e1a4                 | '------------------------------------------------------------------------------
3e1a4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3e1a4                 | ' function.
3e1a4                 | '------------------------------------------------------------------------------
3e1a4                 | ' On entry:
3e1a4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3e1a4                 | '   hpar2 - index number of the target interface.
3e1a4                 | ' On exit:
3e1a4                 | '------------------------------------------------------------------------------
3e1a4                 | hset_idle
3e1a4     A8 99 02 F6 |                 mov     hctwait, _2ms_
3e1a8     EF 02 A0 FD |                 call    #poll_waitx
3e1ac     D8 0A D0 FE |                 loc     ptra, #set_idle
3e1b0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3e1b4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3e1b8     A0 02 80 FD |                 jmp     #control_write
3e1bc                 | 
3e1bc                 | '------------------------------------------------------------------------------
3e1bc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3e1bc                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3e1bc                 | '------------------------------------------------------------------------------
3e1bc                 | ' On entry:
3e1bc                 | '   ep_addr_pid - device address and enpoint for the request.
3e1bc                 | ' On exit:
3e1bc                 | '   retval - transaction result.
3e1bc                 | '------------------------------------------------------------------------------
3e1bc                 | hset_kbdled_report
3e1bc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3e1c0     CC 0A D0 FE |                 loc     ptra, #set_report
3e1c4     01 00 80 FF 
3e1c8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3e1cc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e1d0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3e1d4     27 EF 03 F6 |                 mov     pb, urx_buff_p
3e1d8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3e1dc     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3e1e0                 | 
3e1e0                 | '------------------------------------------------------------------------------
3e1e0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3e1e0                 | '------------------------------------------------------------------------------
3e1e0                 | ' On entry:
3e1e0                 | ' On exit:
3e1e0                 | '------------------------------------------------------------------------------
3e1e0                 | hget_kbd_in_report
3e1e0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3e1e4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e1e8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3e1ec     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3e1f0     CF 02 A0 FD |                 call    #do_int_in
3e1f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e1f8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3e1fc                 | 
3e1fc     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e200     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e204                 | 
3e204     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3e208     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3e20c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3e210     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3e214                 | 
3e214     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3e218     18 00 B0 FD |                 call    #hkbd_compare
3e21c                 |         if EMUPAD_MAX_PLAYER > 0
3e21c                 |         end
3e21c                 | 
3e21c                 | .led_check
3e21c     3B 71 03 F6 |                 mov     htmp, kb_led_states
3e220     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3e224     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3e228     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3e22c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3e230     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3e234                 | 
3e234                 | '------------------------------------------------------------------------------
3e234                 | ' Compare current and previous keyboard data buffers for keypress changes.
3e234                 | '------------------------------------------------------------------------------
3e234                 | hkbd_compare
3e234     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e238     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3e23c     61 73 07 FB |                 rdlong  htmp1, ptra++
3e240     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3e244     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3e248     61 73 07 FB |                 rdlong  htmp1, ptra++
3e24c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3e250     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3e254     2D 00 64 AD |         if_z    ret
3e258                 | 
3e258     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3e25c                 | 
3e25c                 |                 ' Handle modifiers
3e25c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3e260     00 87 C7 FA |                 rdbyte  hr1, ptra
3e264     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3e268     63 86 63 FD |                 mergew  hr1
3e26c     08 EC 07 F6 |                 mov     pa,#8
3e270                 | .modloop
3e270     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3e274     E8 8C 07 F6 |                 mov     hpar1,#$E8
3e278     F6 8D 83 F1 |                 sub     hpar1,pa
3e27c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3e280     FB ED 6F FB |                 djnz    pa,#.modloop
3e284                 | 
3e284     6F E0 75 FD | .release        modc    _set    wc
3e288                 |                 'alts    hdev_port, #hid_report_p
3e288                 |                 'mov     ptra, hid_report_p
3e288     02 F0 07 F1 |                 add     ptra, #2
3e28c     06 EC 07 F6 |                 mov     pa, #6
3e290     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3e294     20 00 90 AD |         if_z    jmp     #.rl3
3e298     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3e29c     02 F2 07 F1 |                 add     ptrb, #2
3e2a0     06 EE 07 F6 |                 mov     pb, #6
3e2a4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3e2a8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3e2ac     08 00 90 AD |         if_z    jmp     #.rl3
3e2b0     FC EF 6F FB |                 djnz    pb, #.rl2
3e2b4     68 00 B0 FD |                 call    #hkbd_translate
3e2b8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3e2bc                 | 
3e2bc     00 90 07 F6 |                 mov     hpar3, #0
3e2c0     1F 90 27 F4 |                 bith    hpar3, #31
3e2c4                 | 
3e2c4     6F 00 74 FD | .press          modc    _clr    wc
3e2c8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e2cc     02 F0 07 F1 |                 add     ptra, #2
3e2d0     06 EC 07 F6 |                 mov     pa, #6
3e2d4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3e2d8     20 00 90 AD |         if_z    jmp     #.pl3
3e2dc     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3e2e0     02 F2 07 F1 |                 add     ptrb, #2
3e2e4     06 EE 07 F6 |                 mov     pb, #6
3e2e8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3e2ec     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3e2f0     08 00 90 AD |         if_z    jmp     #.pl3
3e2f4     FC EF 6F FB |                 djnz    pb, #.pl2
3e2f8     24 00 B0 FD |                 call    #hkbd_translate
3e2fc     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3e300                 | 
3e300     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3e304     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3e308     28 02 64 FD |                 setq #1
3e30c     61 73 07 FB |                 rdlong  htmp1, ptra++
3e310     28 02 64 FD |                 setq #1
3e314     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3e318     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3e31c                 | 
3e31c     2D 00 64 FD |                 ret
3e320                 | 
3e320                 | '------------------------------------------------------------------------------
3e320                 | ' Translate keyboard scancode to ASCII
3e320                 | '------------------------------------------------------------------------------
3e320                 | ' On entry:
3e320                 | '   hpar1 - scancode
3e320                 | '   hpar2 - key modifiers state
3e320                 | '       c - pressed (0) or released (1) flag
3e320                 | ' On exit:
3e320                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3e320                 | '               30..17 = unused
3e320                 | '                   18 = scroll-lock state 
3e320                 | '                   17 = caps-lock state
3e320                 | '                   16 = num-lock state 
3e320                 | '                15..8 = key modifiers state
3e320                 | '                 7..0 = scancode
3e320                 | '------------------------------------------------------------------------------
3e320                 | hkbd_translate
3e320     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3e324     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3e328     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3e32c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3e330     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3e334     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3e338                 | 
3e338                 |         if EMUPAD_MAX_PLAYER > 0
3e338                 | 
3e338                 |         if EMUPAD_BT0_BIT >= 0
3e338                 |         end
3e338                 |         if EMUPAD_BT1_BIT >= 0
3e338                 |         end
3e338                 |         if EMUPAD_BT2_BIT >= 0
3e338                 |         end
3e338                 |         if EMUPAD_BT3_BIT >= 0
3e338                 |         end
3e338                 |         if EMUPAD_BT4_BIT >= 0
3e338                 |         end
3e338                 |         if EMUPAD_BT5_BIT >= 0
3e338                 |         end
3e338                 |         if EMUPAD_BT6_BIT >= 0
3e338                 |         end
3e338                 |         if EMUPAD_BT7_BIT >= 0
3e338                 |         end
3e338                 |         if EMUPAD_BT8_BIT >= 0
3e338                 |         end
3e338                 |         if EMUPAD_BT9_BIT >= 0
3e338                 |         end
3e338                 | 
3e338                 |         end
3e338     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3e33c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3e340     1F 8C 47 F4 |                 bitc    hpar1, #31
3e344                 |         if KEYQUEUE_SIZE > 0
3e344     C4 09 B0 FE |                 loc pb,#keyq_head
3e348     F7 71 E3 FA |                 rdword htmp,pb
3e34c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3e350     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3e354     B8 75 03 F6 |                 mov htmp2,htmp
3e358     04 74 07 FA |                 mul htmp2,#4
3e35c     F7 75 03 F1 |                 add htmp2,pb
3e360     02 74 07 F1 |                 add htmp2,#2
3e364     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3e368     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3e36c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3e370     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3e374                 |         end
3e374     2D 00 7C FD |                 ret wcz
3e378                 | 
3e378                 | if HAVE_MOUSE
3e378                 | '------------------------------------------------------------------------------
3e378                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3e378                 | '------------------------------------------------------------------------------
3e378                 | ' On entry:
3e378                 | ' On exit:
3e378                 | '------------------------------------------------------------------------------
3e378                 | hget_mouse_in_report
3e378     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3e37c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e380     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3e384     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3e388     CF 02 A0 FD |                 call    #do_int_in
3e38c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e390     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3e394                 | 
3e394     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e398     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e39c                 | 
3e39c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3e3a0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3e3a4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3e3a8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3e3ac                 | 
3e3ac     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e3b0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3e3b4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3e3b8     01 90 87 31 |         if_ae   sub     hpar3, #1
3e3bc                 | 
3e3bc     40 09 90 FE |                 loc     pa, #mouse_limits
3e3c0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3e3c4                 | 
3e3c4                 |                 ' load xacc,yacc,zacc
3e3c4     28 04 64 FD |                 setq    #3-1
3e3c8     80 87 07 FB |                 rdlong  hr1,ptrb
3e3cc                 |                 ' load limits and outptr
3e3cc     28 04 64 FD |                 setq    #3-1
3e3d0     F6 73 03 FB |                 rdlong  htmp1,pa
3e3d4                 | 
3e3d4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3e3d8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3e3dc     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3e3e0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3e3e4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3e3e8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3e3ec     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3e3f0     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3e3f4                 |               
3e3f4                 | 
3e3f4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3e3f8     07 70 67 F7 |                 signx   htmp, #7
3e3fc     B8 87 03 F1 |                 add     hr1,htmp
3e400     00 72 0F F2 |                 cmp     htmp1,#0 wz
3e404     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3e408     00 86 47 53 |         if_ne   fges    hr1,#0
3e40c                 | 
3e40c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3e410     07 70 67 F7 |                 signx   htmp, #7
3e414     B8 89 03 F1 |                 add     hr2,htmp
3e418     00 74 0F F2 |                 cmp     htmp2,#0 wz
3e41c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3e420     00 88 47 53 |         if_ne   fges    hr2,#0
3e424                 |                 
3e424                 | 
3e424     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3e428     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3e42c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3e430     B8 8B 03 A1 |         if_z    add     hr3,htmp
3e434                 | 
3e434     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3e438     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3e43c                 | 
3e43c                 |                 ' write back accumulators
3e43c     28 04 64 FD |                 setq    #3-1
3e440     80 87 67 FC |                 wrlong  hr1,ptrb
3e444                 |                 ' if outptr set, write X/Y words
3e444     00 76 0F F2 |                 cmp htmp3,#0                    wz
3e448     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3e44c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3e450     2D 00 64 FD |                 ret
3e454                 | end
3e454                 | 
3e454                 | '------------------------------------------------------------------------------
3e454                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3e454                 | '------------------------------------------------------------------------------
3e454                 | ' On entry:
3e454                 | ' On exit:
3e454                 | '------------------------------------------------------------------------------
3e454                 | if _HAVE_GAMEPAD
3e454                 | hget_gp_in_report
3e454     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3e458     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3e45c                 | 
3e45c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e460     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3e464     00 90 E3 F8 |                 getbyte hpar3
3e468     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3e46c     CF 02 A0 FD |                 call    #do_int_in
3e470     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e474     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3e478                 | 
3e478     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e47c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e480                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3e480                 | 
3e480     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3e484     00 70 E3 F8 |                 getbyte htmp                            ' |
3e488     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3e48c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3e490     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3e494     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3e498     B8 01 C0 F8 |                 setbyte htmp                            ' |
3e49c                 | 
3e49c                 | ' Note: the following code compares the current and previous reports
3e49c                 | ' and process the data if there are changes to ease the debug output.
3e49c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3e49c                 | ' gpPreReport buffer.
3e49c                 | 
3e49c                 |                 ' ----- start of block to remove
3e49c                 |                 {
3e49c                 |                 }
3e49c                 |                 ' ----- end of block to remove
3e49c     F4 04 90 FE |                 loc pa,#hpad_translate
3e4a0     2A EC 63 FD |                 push pa
3e4a4                 | 
3e4a4                 |                 ' FALL THROUGH !!!!
3e4a4                 | 
3e4a4                 | '------------------------------------------------------------------------------
3e4a4                 | ' Decode controller report
3e4a4                 | '------------------------------------------------------------------------------
3e4a4                 | hid_decode
3e4a4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3e4a4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3e4a8     00 04 00 FF 
3e4ac     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3e4b0                 | 
3e4b0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3e4b4                 | 
3e4b4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3e4b8     00 2A E3 F8 |                 getbyte hidr_type
3e4bc     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3e4c0     34 02 90 AD |         if_z    jmp     #hpad_xinput
3e4c4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3e4c8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3e4cc     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3e4d0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3e4d4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3e4d8                 |                 
3e4d8                 | 
3e4d8                 | '------------------------------------------------------------------------------
3e4d8                 | ' Handle HID controller (or mouse now
3e4d8                 | ' On entry:
3e4d8                 | '   ptrb - controller report
3e4d8                 | '------------------------------------------------------------------------------
3e4d8                 | hpad_hid
3e4d8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e4dc     F7 F1 03 F6 |                 mov     ptra, pb
3e4e0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3e4e4     00 EC 03 F6 |                 mov     pa, 0-0
3e4e8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3e4e8     19 2A 3B FF 
3e4ec     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3e4f0                 | 
3e4f0                 | .next
3e4f0     00 EC 5F F2 |                 cmps    pa, #0      wcz
3e4f4     2D 00 7C ED |         if_be   ret     wcz
3e4f8                 | 
3e4f8     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3e4fc     01 EC 87 F1 |                 sub     pa, #1
3e500     00 8E 07 F6 |                 mov     hpar2, #0
3e504                 | 
3e504     C6 71 03 F6 |                 mov     htmp, hpar1
3e508     03 70 07 F5 |                 and     htmp, #$03
3e50c     01 70 0F F2 |                 cmp     htmp, #1    wz
3e510     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3e514     07 8E 67 A7 |         if_z    signx   hpar2,#7
3e518     01 EC 87 A1 |         if_z    sub     pa, #1
3e51c     02 70 0F F2 |                 cmp     htmp, #2    wz
3e520     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3e524     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3e528     02 EC 87 A1 |         if_z    sub     pa, #2
3e52c     03 70 0F F2 |                 cmp     htmp, #3    wz
3e530     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3e534     04 EC 87 A1 |         if_z    sub     pa, #4
3e538                 | 
3e538     FC 8C 07 F5 |                 and     hpar1, #$FC
3e53c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3e53c                 | 
3e53c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3e540     0C 01 90 AD |         if_z    jmp     #.report_id
3e544     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3e548     24 01 90 AD |         if_z    jmp     #.usage_page
3e54c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3e550     2C 01 90 AD |         if_z    jmp     #.usage
3e554     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3e558     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3e55c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3e560     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3e564     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3e568     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3e56c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3e570     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3e574     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3e578     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3e57c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3e580     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3e584     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3e588     64 FF 9F 5D |         if_nz   jmp     #.next
3e58c                 | 
3e58c     D8 1D A7 FB |                 tjf     hidr_state,#.next
3e590                 | 
3e590     03 8E 07 F5 |                 and     hpar2, #$03
3e594     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3e598     18 00 90 5D |         if_nz   jmp     #.skip
3e59c                 | 
3e59c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3e5a0     20 00 90 AD |         if_z    jmp     #.axes
3e5a4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3e5a8     5C 00 90 AD |         if_z    jmp     #.hats
3e5ac     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3e5b0     70 00 90 AD |         if_z    jmp     #.buttons
3e5b4                 | .skip
3e5b4     8F 71 03 F6 |                 mov     htmp, hidr_size
3e5b8     90 71 03 FA |                 mul     htmp, hidr_count
3e5bc     B8 23 03 F1 |                 add     hidr_offset, htmp
3e5c0     2C FF 9F FD |                 jmp     #.next
3e5c4                 | .axes
3e5c4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3e5c4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3e5c8     90 87 03 F6 |                 mov     hr1, hidr_count
3e5cc                 | .l1
3e5cc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3e5d0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3e5d4     04 03 B0 FD |                 call    #hpad_getbits
3e5d8     64 03 B0 FD |                 call    #hpad_normalize
3e5dc     06 84 1F F2 |                 cmp     hr0, #6         wcz
3e5e0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3e5e4     00 88 43 C8 |         if_b    getnib  hr2
3e5e8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3e5ec     5F 01 20 C9 |         if_b    setword retval
3e5f0     01 84 07 C1 |         if_b    add     hr0, #1
3e5f4     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3e5f8     F4 87 6F FB |                 djnz    hr1, #.l1
3e5fc                 | 
3e5fc     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3e600     01 1C 07 F6 |                 mov     hidr_state, #1
3e604     E8 FE 9F FD |                 jmp     #.next
3e608                 | .hats
3e608                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3e608     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3e60c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3e610     C8 02 B0 FD |                 call    #hpad_getbits
3e614     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3e618     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3e61c     01 1C 07 F6 |                 mov     hidr_state, #1
3e620     90 FF 9F FD |                 jmp     #.skip
3e624                 | .buttons
3e624                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3e624     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3e628     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3e62c     90 8F 03 FA |                 mul     hpar2, hidr_count
3e630     A8 02 B0 FD |                 call    #hpad_getbits
3e634     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3e638     B8 BF 62 F0 |                 shl     retval, htmp
3e63c     5F 17 43 F5 |                 or      hidr_buttons, retval
3e640     90 71 03 F1 |                 add     htmp, hidr_count
3e644     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3e648     01 1C 07 F6 |                 mov     hidr_state, #1
3e64c     64 FF 9F FD |                 jmp     #.skip
3e650                 | .report_id
3e650     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3e654     2D 00 7C 5D |         if_nz   ret     wcz
3e658     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3e65c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3e660     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3e664     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3e668     01 F2 87 51 |         if_nz   sub     ptrb,#1
3e66c     80 FE 9F FD |                 jmp     #.next
3e670                 | .usage_page
3e670     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3e674     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3e678     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3e67c     70 FE 9F FD |                 jmp     #.next
3e680                 | .usage
3e680     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3e684     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3e688     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3e68c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3e690     5C FE 9F AD |         if_z    jmp     #.next
3e694     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3e698     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3e69c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3e6a0     4C FE 9F AD |         if_z    jmp     #.next
3e6a4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3e6a8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3e6ac     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3e6b0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3e6b4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3e6b8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3e6bc     10 00 90 AD |         if_z    jmp     #.usage_axis
3e6c0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3e6c4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3e6c8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3e6cc     20 FE 9F FD |                 jmp     #.next
3e6d0                 | .usage_axis
3e6d0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3e6d4     18 FE 9F CD |         if_b    jmp     #.next
3e6d8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3e6dc     C7 01 00 F8 |                 setnib  hpar2
3e6e0                 | 
3e6e0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3e6e4     C7 8F C3 F9 |                 decod   hpar2
3e6e8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3e6ec                 | 
3e6ec     01 24 07 F1 |                 add     hidr_usage_idx, #1
3e6f0     02 1C 07 F6 |                 mov     hidr_state, #2
3e6f4     F8 FD 9F FD |                 jmp     #.next
3e6f8                 | 
3e6f8                 | '------------------------------------------------------------------------------
3e6f8                 | ' Handle XInput controller
3e6f8                 | ' On entry:
3e6f8                 | '   ptrb - controller report
3e6f8                 | '------------------------------------------------------------------------------
3e6f8                 | '   Default implementation translates the report to a pseudo-defacto hid
3e6f8                 | '   standard and jumps to hpad_translate for actions.
3e6f8                 | '   Implementors may take specific actions for this kind of controller.
3e6f8                 | '------------------------------------------------------------------------------
3e6f8                 | hpad_xinput
3e6f8     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3e6fc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3e700     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3e704     14 70 0F F2 |                 cmp     htmp, #$14      wz
3e708     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3e70c                 | 
3e70c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3e70c                 | 
3e70c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3e710     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3e714                 | 
3e714     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3e718     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3e71c     5F BF 22 F6 |                 not     retval
3e720     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3e724     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3e728     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3e72c     5F BF 22 F6 |                 not     retval
3e730     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3e734                 | 
3e734     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3e738     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3e73c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3e740     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3e744     F8 01 B0 FD |                 call    #hpad_normalize
3e748     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3e74c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3e750     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3e754     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3e758     E4 01 B0 FD |                 call    #hpad_normalize
3e75c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3e760                 | 
3e760     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3e764     81 BF E6 FA |                 rdword  retval, ptrb[1]
3e768     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3e76c     00 16 47 F4 |                 bitc    hidr_buttons, #0
3e770     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3e774     01 16 47 F4 |                 bitc    hidr_buttons, #1
3e778     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3e77c     02 16 47 F4 |                 bitc    hidr_buttons, #2
3e780     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3e784     03 16 47 F4 |                 bitc    hidr_buttons, #3
3e788     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3e78c     04 16 47 F4 |                 bitc    hidr_buttons, #4
3e790     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3e794     05 16 47 F4 |                 bitc    hidr_buttons, #5
3e798     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3e79c     08 16 47 F4 |                 bitc    hidr_buttons, #8
3e7a0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3e7a4     09 16 47 F4 |                 bitc    hidr_buttons, #9
3e7a8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3e7ac     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3e7b0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3e7b4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3e7b8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3e7bc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3e7c0                 | 
3e7c0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3e7c4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3e7c8     7A BB 7A FF 
3e7cc     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3e7d0     F9 FF 7F FF 
3e7d4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3e7d8     B9 71 5F F9 |                 altgn   htmp, #htmp1
3e7dc     00 70 43 F8 |                 getnib  htmp
3e7e0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3e7e4                 | 
3e7e4     AC 01 90 FD |                 jmp     #hpad_translate
3e7e8                 | 
3e7e8                 | '------------------------------------------------------------------------------
3e7e8                 | ' Handle PS3 controller
3e7e8                 | ' On entry:
3e7e8                 | '   ptrb - controller report
3e7e8                 | '------------------------------------------------------------------------------
3e7e8                 | '   Default implementation translates the report to a pseudo-defacto hid
3e7e8                 | '   standard and jumps to hpad_translate for actions.
3e7e8                 | '   Implementors may take specific actions for this kind of controller.
3e7e8                 | '------------------------------------------------------------------------------
3e7e8                 | hpad_ps3
3e7e8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3e7ec     01 70 0F F2 |                 cmp     htmp, #$01      wz
3e7f0     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3e7f4                 | 
3e7f4                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3e7f4                 | 
3e7f4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3e7f8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3e7fc     40 01 B0 FD |                 call    #hpad_normalize
3e800     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3e804     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3e808     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3e80c     30 01 B0 FD |                 call    #hpad_normalize
3e810     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3e814     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3e818     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3e81c     20 01 B0 FD |                 call    #hpad_normalize
3e820     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3e824     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3e828     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3e82c     10 01 B0 FD |                 call    #hpad_normalize
3e830     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3e834     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3e838     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3e83c                 | 
3e83c     08 8C 07 F6 |                 mov     hpar1, #8
3e840     13 8E 07 F6 |                 mov     hpar2, #19
3e844     94 00 B0 FD |                 call    #hpad_getbits
3e848                 | 
3e848     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3e84c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3e850     00 16 47 F4 |                 bitc    hidr_buttons, #0
3e854     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3e858     01 16 47 F4 |                 bitc    hidr_buttons, #1
3e85c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3e860     02 16 47 F4 |                 bitc    hidr_buttons, #2
3e864     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3e868     03 16 47 F4 |                 bitc    hidr_buttons, #3
3e86c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3e870     04 16 47 F4 |                 bitc    hidr_buttons, #4
3e874     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3e878     05 16 47 F4 |                 bitc    hidr_buttons, #5
3e87c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3e880     06 16 47 F4 |                 bitc    hidr_buttons, #6
3e884     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3e888     07 16 47 F4 |                 bitc    hidr_buttons, #7
3e88c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3e890     08 16 47 F4 |                 bitc    hidr_buttons, #8
3e894     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3e898     09 16 47 F4 |                 bitc    hidr_buttons, #9
3e89c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3e8a0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3e8a4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3e8a8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3e8ac     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3e8b0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3e8b4                 | 
3e8b4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3e8b8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3e8bc     09 FA 79 FF 
3e8c0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3e8c4     FF FA 7F FF 
3e8c8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3e8cc     B9 71 5F F9 |                 altgn   htmp, #htmp1
3e8d0     00 70 43 F8 |                 getnib  htmp
3e8d4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3e8d8                 | 
3e8d8     B8 00 90 FD |                 jmp     #hpad_translate
3e8dc                 | 
3e8dc                 | '------------------------------------------------------------------------------
3e8dc                 | ' Read bits from report data buffer
3e8dc                 | '------------------------------------------------------------------------------
3e8dc                 | ' On entry:
3e8dc                 | '   PTRB - report buffer
3e8dc                 | '   hpar1 - start bit
3e8dc                 | '   hpar2 - number of bits
3e8dc                 | ' On exit:
3e8dc                 | '   retval - bits
3e8dc                 | '------------------------------------------------------------------------------
3e8dc                 | hpad_getbits
3e8dc     C6 71 03 F6 |                 mov     htmp, hpar1
3e8e0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3e8e4     F9 71 03 F1 |                 add     htmp, ptrb
3e8e8     B8 BF 02 FB |                 rdlong  retval, htmp
3e8ec                 | 
3e8ec     C6 73 03 F6 |                 mov     htmp1, hpar1
3e8f0     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3e8f4     B9 BF 42 F0 |                 shr     retval, htmp1
3e8f8                 | 
3e8f8     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3e8fc     10 00 90 1D |         if_a    jmp     #.l1
3e900                 | 
3e900     C7 8F C3 F9 |                 decod   hpar2
3e904     01 8E 87 F1 |                 sub     hpar2, #1
3e908     C7 BF 02 F5 |                 and     retval, hpar2
3e90c     2D 00 64 FD |                 ret
3e910                 | .l1
3e910     FF 7F 00 FF 
3e914     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3e918     03 70 07 F1 |                 add     htmp, #3
3e91c     B8 75 03 FB |                 rdlong  htmp2, htmp
3e920     18 8E 87 F1 |                 sub     hpar2, #24
3e924     C7 8F C3 F9 |                 decod   hpar2
3e928     01 8E 87 F1 |                 sub     hpar2, #1
3e92c     B9 75 43 F0 |                 shr     htmp2, htmp1
3e930     C7 75 03 F5 |                 and     htmp2, hpar2
3e934     18 74 67 F0 |                 shl     htmp2, #24
3e938     BA BF 42 F5 |                 or      retval, htmp2
3e93c     2D 00 64 FD |                 ret
3e940                 | 
3e940                 | '------------------------------------------------------------------------------
3e940                 | ' Normalize value to signed word (-32768 / 32767)
3e940                 | '------------------------------------------------------------------------------
3e940                 | ' On entry:
3e940                 | '   retval - value to normalize
3e940                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3e940                 | '   - or -
3e940                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3e940                 | '   hidr_size - value bits length
3e940                 | ' On exit:
3e940                 | '   retval - normalized value
3e940                 | '------------------------------------------------------------------------------
3e940                 | hpad_normalize
3e940     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3e944     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3e948     2D 00 64 AD |         if_z    ret
3e94c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3e950     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3e954     0F 72 77 F7 |                 signx   htmp1, #15      wc
3e958     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3e95c     00 BE 66 C7 |         if_c    signx   retval, #0-0
3e960     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3e964     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3e968     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3e96c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3e970     B8 71 53 F6 |                 abs     htmp            wc
3e974     1F BE 0E F4 |                 testb   retval, #31     wz
3e978     5F BF 42 F6 |                 abs     retval
3e97c     B8 BF 12 FD |                 qdiv    retval, htmp
3e980     18 BE 62 FD |                 getqx   retval
3e984     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3e988     C0 FF 7F FF 
3e98c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3e990     2D 00 64 FD |                 ret
3e994                 | 
3e994                 | '------------------------------------------------------------------------------
3e994                 | ' Perform controller actions
3e994                 | ' On entry:
3e994                 | '    hidr_id        report id
3e994                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3e994                 | '                      X = hidr_axis+0, #0
3e994                 | '                      Y = hidr_axis+0, #1
3e994                 | '                      Z = hidr_axis+1, #0
3e994                 | '                     RX = hidr_axis+1, #1
3e994                 | '                     RY = hidr_axis+2, #0
3e994                 | '                     RZ = hidr_axis+2, #1
3e994                 | '    hidr_buttons   buttons state (bits 0 to 31)
3e994                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3e994                 | '
3e994                 | '                     -------3 -------2 -------1 -------0 byte
3e994                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3e994                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3e994                 | '                                zyx||| |||||||| ++++++++ n. buttons
3e994                 | '                                |||||| ||||++++--------- n. axes
3e994                 | '                                |||||| ++++------------- n. hats
3e994                 | '                                ++++++------------------ valid axes
3e994                 | '------------------------------------------------------------------------------
3e994                 | hpad_translate
3e994                 | 
3e994                 | 
3e994                 |         if HAVE_HIDPAD
3e994     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3e998     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3e99c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3e9a0     01 70 E7 F2 |                 cmpsub  htmp,#1
3e9a4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3e9a8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3e9ac     2D 00 7C 3D |         if_ae   ret     wcz
3e9b0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3e9b4     B8 F3 03 F1 |                 add     ptrb,htmp
3e9b8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3e9bc     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3e9c0     28 0C 64 FD |                 setq    #7-1
3e9c4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3e9c8                 |         end
3e9c8                 | 
3e9c8                 | 
3e9c8                 |         if EMUPAD_MAX_PLAYER > 0
3e9c8                 | .emupad_no_hat
3e9c8                 |         if EMUPAD_BT0_BIT >= 0
3e9c8                 |         end
3e9c8                 |         if EMUPAD_BT1_BIT >= 0
3e9c8                 |         end
3e9c8                 |         if EMUPAD_BT2_BIT >= 0
3e9c8                 |         end
3e9c8                 |         if EMUPAD_BT3_BIT >= 0
3e9c8                 |         end
3e9c8                 |         if EMUPAD_BT4_BIT >= 0
3e9c8                 |         end
3e9c8                 |         if EMUPAD_BT5_BIT >= 0
3e9c8                 |         end
3e9c8                 |         if EMUPAD_BT6_BIT >= 0
3e9c8                 |         end
3e9c8                 |         if EMUPAD_BT7_BIT >= 0
3e9c8                 |         end
3e9c8                 |         if EMUPAD_BT8_BIT >= 0
3e9c8                 |         end
3e9c8                 |         if EMUPAD_BT9_BIT >= 0
3e9c8                 |         end
3e9c8                 | .emupad_slot_over
3e9c8                 |         end
3e9c8                 | 
3e9c8                 |         if 0
3e9c8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3e9c8                 | 
3e9c8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3e9c8                 | 
3e9c8                 |         end
3e9c8     2D 00 64 FD |                 ret
3e9cc                 | end
3e9cc                 | 
3e9cc                 | if EMUPAD_MAX_PLAYER > 0
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | ' Clear EmuPad state
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | emupad_reset
3e9cc                 | 
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | ' Get EmuPad Player number for current device (into retval)
3e9cc                 | ' Z flag is also set if current device is valid
3e9cc                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | emupad_getnum
3e9cc                 | .loop
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | emupad_discon
3e9cc                 | .loop         
3e9cc                 |         
3e9cc                 |         ' FALL THROUGH!!!
3e9cc                 | 
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | ' Update EmuPad reports (all of them...)
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | emupad_write_reports
3e9cc                 | .devloop
3e9cc                 | 
3e9cc                 | end
3e9cc                 | 
3e9cc                 | 
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | ' On entry:
3e9cc                 | ' On exit:
3e9cc                 | '------------------------------------------------------------------------------
3e9cc                 | hget_hub_status
3e9cc     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3e9d0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e9d4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3e9d8     01 90 2F F9 |                 setword hpar3, #1, #1
3e9dc     CF 02 A0 FD |                 call    #do_int_in
3e9e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e9e4     0C 00 90 AD |         if_z    jmp     #.data
3e9e8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3e9ec     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3e9f0     2D 00 64 FD |                 ret
3e9f4                 | .data
3e9f4     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e9f8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e9fc                 | 
3e9fc     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3ea00     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3ea04     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3ea08     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3ea0c                 |                 debug(ubin_long(hub_status_chg))
3ea0c                 | 
3ea0c     01 5A 06 F6 |                 mov     hdev_port, #1
3ea10                 | .loop
3ea10     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3ea14     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3ea18     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3ea1c     F0 FF 9F 3D |         if_nc   jmp     #.loop
3ea20     2D 00 64 FD |                 ret
3ea24                 | 
3ea24                 | hub_port_handler
3ea24     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3ea28     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ea2c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ea30     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ea34     55 02 A0 FD |                 call    #control_read
3ea38     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3ea3c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3ea3c                 | 
3ea3c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3ea40     50 01 90 5D |         if_x0   jmp     #.other
3ea44     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3ea48     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3ea4c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ea50     A0 02 A0 FD |                 call    #control_write
3ea54     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3ea58     7C 01 90 5D |         if_x0   jmp     #.disconnect
3ea5c     B0 99 02 F6 |                 mov     hctwait, _100ms_
3ea60     EF 02 A0 FD |                 call    #poll_waitx
3ea64                 | 
3ea64     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3ea68     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3ea6c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ea70     A0 02 A0 FD |                 call    #control_write
3ea74                 | 
3ea74     02 76 07 F6 |                 mov     htmp3, #2
3ea78                 | .wait_reset
3ea78     AC 99 02 F6 |                 mov     hctwait, _8ms_
3ea7c     EF 02 A0 FD |                 call    #poll_waitx
3ea80     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ea84     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ea88     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ea8c     55 02 A0 FD |                 call    #control_read
3ea90     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3ea94     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3ea98     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3ea9c                 | 
3ea9c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3eaa0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3eaa4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3eaa8     A0 02 A0 FD |                 call    #control_write
3eaac                 | 
3eaac     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3eab0                 | .wait_recover
3eab0     A7 99 02 F6 |                 mov     hctwait, _1ms_
3eab4     EF 02 A0 FD |                 call    #poll_waitx
3eab8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3eabc                 | 
3eabc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3eac0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3eac4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3eac8                 | 
3eac8     00 08 00 FF 
3eacc     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3ead0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3ead4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3ead8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3eadc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3eae0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eae4     48 01 90 5D |         if_nz   jmp     #.done
3eae8                 | .get_dev_desc
3eae8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3eaec     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3eaf0     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3eaf4     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3eaf8     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3eafc     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3eb00     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3eb04     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eb08     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3eb0c     AC 99 02 F6 |                 mov     hctwait, _8ms_
3eb10     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3eb14     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3eb18     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3eb1c     BE 00 A0 FD |                 call    #calc_crc5
3eb20     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3eb24     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3eb28     F7 AD C2 FA |                 rdbyte  total_data, pb
3eb2c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3eb30     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3eb34     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eb38     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3eb3c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3eb40     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3eb44                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3eb44     9F 99 02 F6 |                 mov     hctwait, _500us_
3eb48     EF 02 A0 FD |                 call    #poll_waitx
3eb4c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3eb50     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3eb54     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3eb58     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3eb5c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eb60     CC 00 90 5D |         if_nz   jmp     #.done
3eb64     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3eb68     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3eb6c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3eb70     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3eb74     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3eb78     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3eb7c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3eb80     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3eb84     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3eb88     A4 00 90 CD |         if_b    jmp     #.done
3eb8c     70 F0 BF FD |                 call    #hparse_con_desc
3eb90     9C 00 90 FD |                 jmp     #.done
3eb94                 | 
3eb94                 | .other
3eb94     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3eb98     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3eb9c     28 00 90 AD |         if_x1   jmp     #.reset_feature
3eba0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3eba4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3eba8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3ebac     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3ebb0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3ebb4     10 00 90 AD |         if_x1   jmp     #.reset_feature
3ebb8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3ebbc     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3ebc0     04 00 90 AD |         if_x1   jmp     #.reset_feature
3ebc4     68 00 90 FD |                 jmp     #.done
3ebc8                 | .reset_feature
3ebc8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3ebcc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ebd0     A0 02 A0 FD |                 call    #control_write
3ebd4     58 00 90 FD |                 jmp     #.done
3ebd8                 | .disconnect
3ebd8                 | 
3ebd8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3ebdc     00 70 E3 F8 |                 getbyte htmp
3ebe0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3ebe4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3ebe8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3ebec     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3ebf0     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3ebf4     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3ebf8                 |         if EMUPAD_MAX_PLAYER > 0
3ebf8                 |         end
3ebf8                 |         if HAVE_MOUSE
3ebf8     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3ebfc     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3ec00     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3ec04                 |         end
3ec04                 |         if HAVE_HIDPAD
3ec04     14 0A F0 FE |                 loc ptrb,#hidpad_report
3ec08     2D 71 03 F6 |                 mov htmp,hdev_port
3ec0c     01 70 E7 F2 |                 cmpsub htmp,#1
3ec10     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3ec14     B8 F3 03 F1 |                 add ptrb,htmp
3ec18     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3ec1c     80 01 6C FC |                 wrlong #0,ptrb
3ec20                 |         end
3ec20                 | 
3ec20     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3ec24     00 00 C4 F8 |                 setbyte #0
3ec28     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ec2c     00 00 04 F6 |                 mov     0-0, #0
3ec30                 | 
3ec30                 | .done
3ec30     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3ec34     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3ec38     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3ec3c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3ec40     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3ec44     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3ec48                 | 
3ec48     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ec4c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ec50     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ec54     55 02 A0 FD |                 call    #control_read
3ec58     00 69 06 FB |                 rdlong  hub_port_status, ptra
3ec5c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3ec5c     2D 00 64 FD |                 ret
3ec60                 | 
3ec60                 | '------------------------------------------------------------------------------
3ec60                 | ' Partially populated SETUP packets
3ec60                 | '------------------------------------------------------------------------------
3ec60     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3ec61     06          |                 byte    REQ_GET_DESC
3ec62     00 01       |                 word    TYPE_DEVICE << 8
3ec64     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ec66     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ec68     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3ec69     06          |                 byte    REQ_GET_DESC
3ec6a     00 02       |                 word    TYPE_CONFIG << 8
3ec6c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ec6e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ec70     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3ec71     09          |                 byte    REQ_SET_CONFIG
3ec72     00 00       |                 word    0       ' Configuration value
3ec74     00 00       |                 word    0       ' Zero
3ec76     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3ec78     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3ec79     05          |                 byte    REQ_SET_ADDR
3ec7a     00 00       |                 word    0       ' Zero
3ec7c     00 00       |                 word    0       ' Zero
3ec7e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3ec80                 | '------------------------------------------------------------------------------
3ec80                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3ec80                 | ' wValue field dictates which protocol should be used.
3ec80                 | '
3ec80                 | ' When initialized, all devices default to report protocol. However the host
3ec80                 | ' should not make any assumptions about the device state and should set the
3ec80                 | ' desired protocol whenever initializing a device.
3ec80                 | '------------------------------------------------------------------------------
3ec80     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3ec81     0B          |                 byte    HID_SET_PROTO
3ec82     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3ec84                 |                                                 ' (HID 1.11 Section 7.2.6).
3ec84     00 00       |                 word    0               ' Interface index number.
3ec86     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3ec88                 | '------------------------------------------------------------------------------
3ec88     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3ec89     0A          |                 byte    HID_SET_IDLE
3ec8a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3ec8c                 |                                         ' reporting until a change is detected in the report data
3ec8c                 | 
3ec8c                 |                                         ' (HID 1.11 Section 7.2.4).
3ec8c     00 00       |                 word    0       ' Interface index number.
3ec8e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3ec90     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3ec91     09          |                 byte    HID_SET_REPORT
3ec92     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3ec94                 |                                         ' (HID 1.11 Section 7.2.2).
3ec94     00 00       |                 word    0       ' Interface index number.
3ec96     00 00       |                 word    0       ' Size of the report, in bytes.
3ec98     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3ec99     06          |                 byte    REQ_GET_DESC
3ec9a     00 22       |                 word    TYPE_REPORT << 8
3ec9c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ec9e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3eca0                 | '------------------------------------------------------------------------------
3eca0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3eca1     06          |                 byte    REQ_GET_DESC
3eca2     00 29       |                 word    TYPE_HUB << 8
3eca4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3eca6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3eca8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3eca9     03          |                 byte    REQ_SET_FEATURE
3ecaa     00 00       |                 word    0       ' port power
3ecac     01 00       |                 word    1       ' Port index number (1+)
3ecae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ecb0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3ecb1     01          |                 byte    REQ_CLEAR_FEATURE
3ecb2     00 00       |                 word    0       ' port power
3ecb4     01 00       |                 word    1       ' Port index number (1+)
3ecb6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ecb8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3ecb9     00          |                 byte    REQ_GET_STATUS
3ecba     00 00       |                 word    0
3ecbc     01 00       |                 word    1       ' Port index number (1+)
3ecbe     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3ecc0                 | '------------------------------------------------------------------------------
3ecc0                 | if _HAVE_GAMEPAD
3ecc0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3ecc4                 | ps3_command_buff
3ecc4     00 00 00 00 
3ecc8     00          |                 byte    $00, $00, $00, $00, $00
3ecc9     00 00 00 00 
3eccd     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3ecce     FF 27 10 00 
3ecd2     32          |                 byte    $FF, $27, $10, $00, $32
3ecd3     FF 27 10 00 
3ecd7     32          |                 byte    $FF, $27, $10, $00, $32
3ecd8     FF 27 10 00 
3ecdc     32          |                 byte    $FF, $27, $10, $00, $32
3ecdd     FF 27 10 00 
3ece1     32          |                 byte    $FF, $27, $10, $00, $32
3ece2     00 00 00 00 
3ece6     00          |                 byte    $00, $00, $00, $00, $00
3ece7     00 00 00 00 
3eceb     00          |                 byte    $00, $00, $00, $00, $00
3ecec     00 00 00 00 
3ecf0     00          |                 byte    $00, $00, $00, $00, $00
3ecf1     00 00 00    |                 byte    $00, $00, $00
3ecf4                 | '------------------------------------------------------------------------------
3ecf4     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3ecf7                 |                                         ' 0x01 All blinking
3ecf7                 |                                         ' 0x02 1 flashes, then on
3ecf7                 |                                         ' 0x03 2 flashes, then on
3ecf7                 |                                         ' 0x04 3 flashes, then on
3ecf7                 |                                         ' 0x05 4 flashes, then on
3ecf7                 |                                         ' 0x06 1 on
3ecf7                 |                                         ' 0x07 2 on
3ecf7                 |                                         ' 0x08 3 on
3ecf7                 |                                         ' 0x09 4 on
3ecf7                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3ecf7                 |                                         ' 0x0B Blinking*
3ecf7                 |                                         ' 0x0C Slow blinking*
3ecf7                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3ecf7     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3ecfa     00          |                 byte    $00             ' Left rumble
3ecfb     00          |                 byte    $00             ' Right rumble
3ecfc     00 00 00    |                 byte    $00, $00, $00
3ecff     00          | end
3ed00                 | alignl
3ed00                 | 
3ed00                 | if HAVE_MOUSE
3ed00     00 00 00 00 
3ed04     00 00 00 00 | mouse_limits long 0[2]
3ed08     00 00 00 00 | mouse_outptr long 0
3ed0c                 | end
3ed0c                 | 
3ed0c                 | if KEYQUEUE_SIZE > 0
3ed0c     00          | keyq_head byte 0
3ed0d     00          | keyq_tail byte 0
3ed0e     00 00 00 00 
      ...             
3ef0a     00 00 00 00 
3ef0e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3ef10                 | alignl
3ef10                 | end
3ef10                 | 
3ef10                 | if EMUPAD_MAX_PLAYER > 0
3ef10                 | emupad_rule_buffer
3ef10                 | if EMUPAD_BUILTIN_RULES
3ef10                 | file "padmap_builtin.dat"
3ef10                 | end
3ef10                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3ef10                 | '' Default rule directly follows!
3ef10                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3ef10                 | end
3ef10                 | 
3ef10                 | '------------------------------------------------------------------------------
3ef10                 | ' The USB data cache area gets zero-filled at every device disconnect
3ef10                 | '------------------------------------------------------------------------------
3ef10                 | usb_cache_start
3ef10                 | 
3ef10                 | ' HID descriptor and report buffers
3ef10                 | if !!OVERLAP_MEMORY
3ef10     00 00 00 00 
      ...             
3f608     00 00 00 00 
3f60c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3f610                 | end
3f610     00 00 00 00 
3f614     00 00 00 00 | hkbd_report     byte    0[8]
3f618     00 00 00 00 | hkbd_led_rep    byte    0
3f61c                 | alignl
3f61c                 | 
3f61c                 | if HAVE_HIDPAD
3f61c     00 00 00 00 
      ...             
3f6d8     00 00 00 00 
3f6dc     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3f6e0                 | end
3f6e0                 | 
3f6e0                 | ' HUB descriptor
3f6e0     00          | hub_descr       byte    0   ' bDescLength
3f6e1     00          |                 byte    0   ' bDescriptorType
3f6e2     00          |                 byte    0   ' bNbrPorts
3f6e3     00 00       |                 word    0   ' wHubCharacteristics
3f6e5     00          |                 byte    0   ' bPwrOn2PwrGood
3f6e6     00          |                 byte    0   ' bHubContrCurrent
3f6e7     00          |                 byte    0   ' DeviceRemoveable
3f6e8     00          |                 byte    0   ' PortPwrCtrlMask
3f6e9                 | 
3f6e9                 | usb_cache_end
3f6e9                 | 
3f6e9                 | if HAVE_MOUSE
3f6e9     00 00 00 00 | mouse_xacc      long 0
3f6ed     00 00 00 00 | mouse_yacc      long 0
3f6f1     00 00 00 00 | mouse_zacc      long 0
3f6f5     00          | mouse_bstate    byte 0
3f6f6     00          | mouse_lpending  byte 0
3f6f7     00          | mouse_rpending  byte 0
3f6f8     00          | mouse_mpending  byte 0
3f6f9     00          | mouse_lock      byte 0
3f6fa     00 00 00    |                 byte 0[3] ' padding
3f6fd                 | end
3f6fd                 | 
3f6fd     00 00 00 00 
      ...             
3f775     00 00 00 00 
3f779     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3f77d     00 00 00 00 
3f781     00 00 00 00 
3f785     00 00 00 00 
3f789     00 00 00 00 
3f78d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3f78f     00 00 00 00 
      ...             
3f887     00 00 00 00 
3f88b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3f88f                 | 
3f88f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3f890                 | 	alignl
3f890                 | _audio096_spin2_dat_
3f890                 | 
3f890                 | audio       org     0
3f890                 | 
3f890     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3f894     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3f898     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3f89c                 |  
3f89c     01 EC 63 FD |             cogid   pa                   ' compute cogid
3f8a0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3f8a4     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3f8a8     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3f8ac                 | 
3f8ac     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3f8b0     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3f8b4     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3f8b8     0F 24 06 FC |             wrpin   dac2,#right
3f8bc     0F 00 1E FC |             wxpin   #256,#right    
3f8c0     41 9C 64 FD |             dirh    #left addpins 1
3f8c4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3f8c8     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3f8cc     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3f8d0                 |             
3f8d0                 | '---------------------------------------------------------------------------------        
3f8d0                 | '----------------- The main loop -------------------------------------------------
3f8d0                 | '---------------------------------------------------------------------------------
3f8d0                 | 
3f8d0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3f8d4     10 00 90 CD |       if_c  jmp     #loop1
3f8d8                 |   
3f8d8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3f8dc     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3f8e0     D5 00 80 F1 |             sub     0-0,a40000000
3f8e4     FD 01 6E FB |             djnz    cn,#p402
3f8e8                 |     
3f8e8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3f8ec     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3f8f0     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3f8f4     01 00 06 C6 |     if_c    mov     cn,#1
3f8f8     DA 02 3A F3 |             fle     ct,time3 wcz
3f8fc     02 00 06 C6 |     if_c    mov     cn,#2     
3f900     DB 02 3A F3 |             fle     ct,time4 wcz
3f904     03 00 06 C6 |     if_c    mov     cn,#3
3f908     DC 02 3A F3 |             fle     ct,time5 wcz
3f90c     04 00 06 C6 |     if_c    mov     cn,#4
3f910     DD 02 3A F3 |             fle     ct,time6 wcz
3f914     05 00 06 C6 |     if_c    mov     cn,#5
3f918     DE 02 3A F3 |             fle     ct,time7 wcz
3f91c     06 00 06 C6 |     if_c    mov     cn,#6
3f920     DF 02 3A F3 |             fle     ct,time8 wcz
3f924     07 00 06 C6 |     if_c    mov     cn,#7
3f928                 | 
3f928                 | 
3f928                 | '----------------------------------------------------------------------------------
3f928                 | '------------- Compute channel samples --------------------------------------------
3f928                 | '----------------------------------------------------------------------------------
3f928                 | 
3f928                 | 
3f928     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3f92c     06 C0 65 F0 |             shl     channeladd,#6
3f930     E0 F0 03 F1 |             add     ptra,channeladd
3f934                 | 
3f934     28 16 64 FD |             setq    #11                        	' read parameters
3f938     00 D7 05 FB |             rdlong  pointer0,ptra
3f93c                 |     	    
3f93c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3f940     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3f944     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3f948     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3f94c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3f950     00 C4 0D F2 |             cmp     qq,#0 wz                         
3f954     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3f958     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3f95c                 |             
3f95c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3f960     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3f964     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3f968                 | 
3f968     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3f96c     EC 08 3A F9 |             getword oldrs,sample0,#1
3f970     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3f974     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3f978     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3f97c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3f980                 | 
3f980     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3f984     00 04 02 F6 |             mov     dt0,0-0    
3f988     D7 04 82 F1 |             sub     dt0,time0
3f98c                 |             
3f98c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3f990     FB 00 00 F1 |             add     0-0,afreq0  	
3f994                 |             
3f994                 | '---- envelopes
3f994                 |             
3f994     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3f998     20 00 00 AF 
3f99c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3f9a0     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3f9a4                 | 
3f9a4     FB 48 02 F6 |             mov     envs1,afreq0
3f9a8     F5 48 02 FA |             mul     envs1,envspd0
3f9ac     24 E7 01 F1 |             add     envph0,envs1 
3f9b0                 | 
3f9b0     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3f9b4     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3f9b8     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3f9bc     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3f9c0     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3f9c4     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3f9c8     00 46 06 36 |     if_ge   mov     envlo,#0
3f9cc     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3f9d0     16 E6 65 30 |     if_ge   shl     envph0,#22
3f9d4                 | 
3f9d4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3f9d8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3f9dc     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3f9e0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3f9e4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3f9e8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3f9ec     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3f9f0     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3f9f4     23 49 02 FA |             mul     envs1,envlo
3f9f8     25 49 02 F1 |             add     envs1,envs2
3f9fc     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3fa00                 |             
3fa00     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3fa04     1B C6 61 AD |     if_z    getrnd  spl
3fa08     58 00 90 AD |     if_z    jmp     #p406
3fa0c                 |  
3fa0c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3fa10     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3fa14     08 D6 45 F0 |             shr     pointer0,#8
3fa18                 |          
3fa18     1F DA 0D F4 |             testb   sstart0,#31 wz            
3fa1c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3fa20     1C DA 0D F4 |             testb   sstart0,#28 wz            
3fa24     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3fa28                 |         
3fa28     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3fa2c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3fa30     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3fa34                 |             
3fa34     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3fa38     ED C4 01 F1 |             add     qq,sstart0            
3fa3c                 | 
3fa3c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3fa40     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3fa44     1C 01 B0 1D |     if_gt   call    #cache_read
3fa48                 |          
3fa48     1F DA 0D F4 |             testb   sstart0,#31 wz 
3fa4c     08 C6 65 50 |     if_nz   shl     spl,#8
3fa50     08 D6 65 50 |     if_nz   shl     pointer0,#8
3fa54     07 D6 65 A0 |     if_z    shl     pointer0,#7
3fa58     1C DA 0D F4 |             testb   sstart0,#28 wz            
3fa5c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3fa60     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3fa64                 | 
3fa64                 | 
3fa64     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3fa68     00 C6 01 F6 |             mov     spl,0-0
3fa6c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3fa70     00 C6 01 F6 |             mov     spl,0-0
3fa74                 | 
3fa74     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3fa78     00 0A 02 F6 |             mov     ls0,0-0
3fa7c     20 00 00 FF 
3fa80     00 C4 05 F6 |             mov     qq,##16384
3fa84     FE C4 81 F1 |             sub     qq,apan0
3fa88     E2 C6 31 FA |             scas    spl,qq
3fa8c     00 0C 02 F6 |             mov     rs0, 0-0
3fa90                 | 
3fa90     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3fa94     06 11 02 F1 |             add     rs,rs0
3fa98     03 0F 82 F1 |             sub     ls,oldls
3fa9c     05 0F 02 F1 |             add     ls,ls0
3faa0                 |    
3faa0     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3faa4     05 D9 21 F9 |             setword sample0,ls0,#0
3faa8                 |             
3faa8     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3faac     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3fab0     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3fab4                 |   '  if_z    mov     sample0,#0
3fab4     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3fab8     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3fabc     04 00 00 AF 
3fac0     00 B0 05 A1 |     if_z    add     time1,##2048
3fac4     D8 B2 01 A6 |     if_z    mov     time2,time1
3fac8     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3facc                 | 
3facc     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3fad0     00 D7 65 FC |             wrlong  pointer0,ptra
3fad4     08 E7 65 FC |             wrlong  envph0,ptra[8]
3fad8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3fadc                 |                       
3fadc     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3fae0     FF C3 25 A7 |     if_z    decmod  front, #511          
3fae4                 |          
3fae4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3fae8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3faec     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3faf0     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3faf4                 | 	    
3faf4                 | 		    
3faf4     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3faf8     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3fafc     04 15 02 F6 |             mov     newsample, oldrs       
3fb00                 | 
3fb00     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3fb04     02 AF 01 F1 |             add     time0,dt0    
3fb08                 |                                      
3fb08     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3fb0c     D8 FD 9F AD |     if_z    jmp     #loop1
3fb10     02 C5 01 F6 |             mov     qq,dt0
3fb14                 | 
3fb14                 |     
3fb14                 |             
3fb14     01 4E 36 F0 | p301        rol     dropper,#1 wc
3fb18     40 00 90 3D |     if_nc   jmp     #p399
3fb1c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3fb20     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3fb24     F4 FF 9F AD |     if_e    jmp     #p398   
3fb28                 | 		
3fb28     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3fb2c     20 00 90 AD |     if_z    jmp     #p302	   
3fb30                 |   
3fb30     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3fb34     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3fb38     02 1E 66 C0 |     if_c    shl     scptr2,#2
3fb3c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3fb40     60 1E 66 FC |             wrlong  scptr2,#$60
3fb44     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3fb48     01 00 00 CF 
3fb4c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3fb50                 | 			    
3fb50     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3fb54     00 00 00 FF 
3fb58     FF C3 05 F7 |             incmod  front, ##511
3fb5c     ED C5 6D FB | p399        djnz    qq,#p301
3fb60                 |             
3fb60     6C FD 9F FD |             jmp     #loop            'loop
3fb64                 | 
3fb64                 | '----------------------------------------------------------------------------------
3fb64                 | '------------- This is the end of the main loop -----------------------------------
3fb64                 | '----------------------------------------------------------------------------------
3fb64                 | 
3fb64                 | '----------------------------------------------------------------------------------
3fb64                 | '------------- PSRAM cache ----------- --------------------------------------------
3fb64                 | '----------------------------------------------------------------------------------
3fb64                 | 
3fb64                 | ' There are 8 cache pointers for 8 channels
3fb64                 | ' if 24 higher bits of address=cache, then get a word from the cache
3fb64                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3fb64                 | 
3fb64                 | 
3fb64     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3fb68                 |             
3fb68     E2 40 02 F6 | 	    mov     addrhi,qq		
3fb6c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3fb70     14 01 96 F9 | 	    alts    cn,#cache1            
3fb74     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3fb78     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3fb7c                 | 	
3fb7c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3fb80     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3fb84     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3fb88     08 38 66 F0 | 	    shl     cmd,#8
3fb8c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3fb90     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3fb94     08 3A 66 F0 |             shl     hubaddr,#8                  '
3fb98     13 3B 02 F1 |             add     hubaddr,hubptr 
3fb9c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3fba0     28 04 64 FD |             setq    #2                          ' write 3 longs
3fba4     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3fba8     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3fbac     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3fbb0                 |             
3fbb0                 | 	
3fbb0     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3fbb4     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3fbb8     13 C5 01 F1 | 	    add     qq,hubptr
3fbbc     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3fbc0     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3fbc4                 |           
3fbc4                 | 
3fbc4                 | '--------------------------------------------------------------------------
3fbc4                 | '------ Interrupt service -------------------------------------------------
3fbc4                 | '------ Output the sample, get the next one if exists ---------------------
3fbc4                 | '--------------------------------------------------------------------------
3fbc4                 | 
3fbc4     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3fbc8     0F D0 25 FC |             wypin   rsample,#right       '4
3fbcc     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3fbd0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3fbd4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3fbd8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3fbdc     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3fbe0                 |     
3fbe0     F5 FF 3B FB |             reti1                        '17/19 
3fbe4                 |           
3fbe4                 | '---------------------------------------------------------------------------
3fbe4                 | '-------- End of interrupt -------------------------------------------------
3fbe4                 | '---------------------------------------------------------------------------    
3fbe4                 | 
3fbe4                 | 
3fbe4                 | '---------------------------------------------------------------------------
3fbe4                 | '------- Variables ---------------------------------------------------------
3fbe4                 | '---------------------------------------------------------------------------
3fbe4                 | 
3fbe4                 | ' constants
3fbe4                 | 
3fbe4     00 00 00 40 | a40000000   long $40000000
3fbe8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3fbec                 | 
3fbec                 | ' Time variables
3fbec                 | 
3fbec     00 00 00 00 | time0       long 0    ' Global sample computing time
3fbf0     01 00 00 00 | time1       long 1    ' Local channels time
3fbf4     02 00 00 00 | time2       long 2
3fbf8     03 00 00 00 | time3       long 3
3fbfc     04 00 00 00 | time4       long 4
3fc00     05 00 00 00 | time5       long 5
3fc04     06 00 00 00 | time6       long 6
3fc08     07 00 00 00 | time7       long 7
3fc0c     08 00 00 00 | time8       long 8
3fc10                 | 
3fc10     00 00 00 00 | channeladd long 0
3fc14                 | 
3fc14     00 00 00 00 | front       long 0
3fc18                 | 
3fc18                 | ' temporary variables 
3fc18     00 00 00 00 | qq          long 0
3fc1c     00 00 00 00 | spl         long 0
3fc20     00 00 00 00 | zero        long 0
3fc24     00 00 00 00 | mailbox     long 0
3fc28     00 00 00 00 | mailbox2 long 0
3fc2c                 | 
3fc2c                 | ' Interrupt ISR variables
3fc2c                 | 
3fc2c     00 00 00 00 | lsample     long 0
3fc30     00 00 00 00 | rsample     long 0
3fc34     00 00 00 00 | lsnext      long 0
3fc38     00 00 00 00 | rsnext      long 0 
3fc3c                 | 
3fc3c                 | ' channel parameter block
3fc3c                 | 
3fc3c     00 00 00 00 | pointer0    long 0     
3fc40     00 00 00 00 | sample0     long 0
3fc44     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3fc48     00 00 00 00 | lstart0     long 0
3fc4c     00 00 00 00 | lend0       long 0
3fc50     00 00 00 00 | volpan0     long 0
3fc54     00 00 00 00 | freqskip0   long 0
3fc58     00 00 00 00 | command0    long 0
3fc5c     00 00 00 00 | envph0	    long 0
3fc60     00 00 00 00 | envptr0	    long 0
3fc64     00 00 00 00 | envspd0	    long 0
3fc68     00 00 00 00 | envlen0	    long 0
3fc6c     00 00 00 00 | res5	    long 0
3fc70     00 00 00 00 | res6	    long 0
3fc74     00 00 00 00 | res7	    long 0
3fc78     00 00 00 00 | res8	    long 0
3fc7c                 | 
3fc7c     00 00 00 00 | afreq0      long 0
3fc80     00 00 00 00 | askip0      long 0
3fc84     00 00 00 00 | avol0       long 0
3fc88     00 00 00 00 | apan0       long 0
3fc8c                 | 
3fc8c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3fc90     00 00 00 00 | cn          long 0
3fc94     00 00 00 00 | ct          long 0
3fc98     00 00 00 00 | dt0         long 0
3fc9c                 | 
3fc9c                 | ' Samples
3fc9c     00 00 00 00 | oldls       long 0
3fca0     00 00 00 00 | oldrs       long 0
3fca4                 | 
3fca4     00 00 00 00 | ls0         long 0
3fca8     00 00 00 00 | rs0         long 0
3fcac                 | 
3fcac     00 00 00 00 | ls          long 0    
3fcb0     00 00 00 00 | rs          long 0
3fcb4                 | 
3fcb4     00 00 00 00 | oldsample   long 0
3fcb8     00 00 00 00 | newsample   long 0
3fcbc                 | 
3fcbc     00 00 00 00 | nrsample    long 0
3fcc0     00 00 00 00 | nlsample    long 0
3fcc4                 | 
3fcc4     00 00 00 00 | scbase long 0
3fcc8     00 00 00 00 | scptr long 0
3fccc     00 00 00 00 | scptr2 long 0
3fcd0     00 00 00 00 | scope long 0
3fcd4                 | 
3fcd4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3fcd8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3fcdc                 | 
3fcdc     00 18 07 00 | hubptr      long $71800
3fce0     00 00 00 00 | cache1      long 0
3fce4     00 00 00 00 | cache2      long 0
3fce8     00 00 00 00 | cache3      long 0
3fcec     00 00 00 00 | cache4      long 0
3fcf0     00 00 00 00 | cache5      long 0
3fcf4     00 00 00 00 | cache6      long 0
3fcf8     00 00 00 00 | cache7      long 0
3fcfc     00 00 00 00 | cache8      long 0
3fd00                 | 
3fd00                 | 
3fd00     00 00 00 00 | cmd         long 0
3fd04     00 00 00 00 | hubaddr     long 0
3fd08     00 01 00 00 | count       long 256
3fd0c     00 00 00 00 | addrlo long 0
3fd10     00 00 00 00 | addrhi long 0
3fd14     00 00 00 00 | pointer00 long 0
3fd18     00 00 00 00 | envhi long 0
3fd1c     00 00 00 00 | envlo long 0
3fd20     00 00 00 00 | envs1 long 0
3fd24     00 00 00 00 | envs2 long 0
3fd28     00 00 00 00 | noise0 long 0
3fd2c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3fd30     00 00 00 00 
3fd34     00 00 00 00 | null  			long 	0,0           ' for channel reset
3fd38                 | 	alignl
3fd38                 | __system__dat_
3fd38     00 00 00 00 
3fd3c     00 00 00 00 | 	byte	$00[8]
3fd40     03 00 00 00 
3fd44     00 00 00 00 
3fd48     00 00 00 00 
3fd4c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3fd50     00 00 00 00 
      ...             
3ffdc     00 00 00 00 
3ffe0     00 00 00 00 | 	byte	$00[660]
3ffe4     00 00 30 0A | 	long	(163 {__system____root_opendir})<<20
3ffe8     00 00 40 0A | 	long	(164 {__system____root_closedir})<<20
3ffec     00 00 50 0A | 	long	(165 {__system____root_readdir})<<20
3fff0     00 00 60 0A | 	long	(166 {__system____root_stat})<<20
3fff4     00 00 00 00 
3fff8     00 00 00 00 
3fffc     00 00 00 00 
40000     00 00 00 00 
40004     00 00 00 00 
40008     00 00 00 00 
4000c     00 00 00 00 | 	byte	$00[28]
40010     78 00 04 00 | 	long	@@@__system__dat_ + 832
40014     7B 00 04 00 | 	long	@@@__system__dat_ + 835
40018     9C 00 04 00 | 	long	@@@__system__dat_ + 868
4001c     B5 00 04 00 | 	long	@@@__system__dat_ + 893
40020     D0 00 04 00 | 	long	@@@__system__dat_ + 920
40024     EA 00 04 00 | 	long	@@@__system__dat_ + 946
40028     FA 00 04 00 | 	long	@@@__system__dat_ + 962
4002c     0C 01 04 00 | 	long	@@@__system__dat_ + 980
40030     1E 01 04 00 | 	long	@@@__system__dat_ + 998
40034     30 01 04 00 | 	long	@@@__system__dat_ + 1016
40038     3C 01 04 00 | 	long	@@@__system__dat_ + 1028
4003c     4D 01 04 00 | 	long	@@@__system__dat_ + 1045
40040     61 01 04 00 | 	long	@@@__system__dat_ + 1065
40044     6B 01 04 00 | 	long	@@@__system__dat_ + 1075
40048     7B 01 04 00 | 	long	@@@__system__dat_ + 1091
4004c     8A 01 04 00 | 	long	@@@__system__dat_ + 1106
40050     A0 01 04 00 | 	long	@@@__system__dat_ + 1128
40054     B9 01 04 00 | 	long	@@@__system__dat_ + 1153
40058     CD 01 04 00 | 	long	@@@__system__dat_ + 1173
4005c     DB 01 04 00 | 	long	@@@__system__dat_ + 1187
40060     EF 01 04 00 | 	long	@@@__system__dat_ + 1207
40064     FB 01 04 00 | 	long	@@@__system__dat_ + 1219
40068     0D 02 04 00 | 	long	@@@__system__dat_ + 1237
4006c     25 02 04 00 | 	long	@@@__system__dat_ + 1261
40070     37 02 04 00 | 	long	@@@__system__dat_ + 1279
40074     4A 02 04 00 | 	long	@@@__system__dat_ + 1298
40078     4F 4B 00 4E 
4007c     75 6D 65 72 
40080     69 63 61 6C 
40084     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
40088     75 6D 65 6E 
4008c     74 20 6F 75 
40090     74 20 6F 66 
40094     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
40098     61 69 6E 00 
4009c     52 65 73 75 
400a0     6C 74 20 6E 
400a4     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
400a8     65 70 72 65 
400ac     73 65 6E 74 
400b0     61 62 6C 65 
400b4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
400b8     65 67 61 6C 
400bc     20 6D 75 6C 
400c0     74 69 62 79 
400c4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
400c8     65 71 75 65 
400cc     6E 63 65 00 
400d0     4E 6F 20 73 
400d4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
400d8     66 69 6C 65 
400dc     20 6F 72 20 
400e0     64 69 72 65 
400e4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
400e8     79 00 42 61 
400ec     64 20 66 69 
400f0     6C 65 20 6E 
400f4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
400f8     72 00 50 65 
400fc     72 6D 69 73 
40100     73 69 6F 6E 
40104     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
40108     69 65 64 00 
4010c     4E 6F 74 20 
40110     65 6E 6F 75 
40114     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
40118     65 6D 6F 72 
4011c     79 00 54 65 
40120     6D 70 6F 72 
40124     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
40128     66 61 69 6C 
4012c     75 72 65 00 
40130     46 69 6C 65 
40134     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
40138     73 74 73 00 
4013c     49 6E 76 61 
40140     6C 69 64 20 
40144     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
40148     6D 65 6E 74 
4014c     00 54 6F 6F 
40150     20 6D 61 6E 
40154     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
40158     65 6E 20 66 
4015c     69 6C 65 73 
40160     00 49 2F 4F 
40164     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
40168     6F 72 00 4E 
4016c     6F 74 20 61 
40170     20 64 69 72 
40174     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
40178     72 79 00 49 
4017c     73 20 61 20 
40180     64 69 72 65 
40184     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
40188     79 00 52 65 
4018c     61 64 20 6F 
40190     6E 6C 79 20 
40194     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
40198     20 73 79 73 
4019c     74 65 6D 00 
401a0     46 75 6E 63 
401a4     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
401a8     20 6E 6F 74 
401ac     20 69 6D 70 
401b0     6C 65 6D 65 
401b4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
401b8     00 44 69 72 
401bc     65 63 74 6F 
401c0     72 79 20 6E 
401c4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
401c8     6D 70 74 79 
401cc     00 4E 61 6D 
401d0     65 20 74 6F 
401d4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
401d8     6E 67 00 44 
401dc     65 76 69 63 
401e0     65 20 6E 6F 
401e4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
401e8     65 6B 61 62 
401ec     6C 65 00 42 
401f0     61 64 20 61 
401f4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
401f8     73 73 00 42 
401fc     72 6F 6B 65 
40200     6E 20 63 6F 
40204     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
40208     74 69 6F 6E 
4020c     00 44 65 76 
40210     69 63 65 20 
40214     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
40218     65 73 6F 75 
4021c     72 63 65 20 
40220     62 75 73 79 
40224     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
40228     73 73 20 64 
4022c     65 76 69 63 
40230     65 20 6C 69 
40234     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
40238     6F 20 73 70 
4023c     61 63 65 20 
40240     6F 6E 20 64 
40244     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
40248     65 00 55 6E 
4024c     6B 6E 6F 77 
40250     6E 20 65 72 
40254     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
40258     00 00 00 00 
4025c     00 00 00 00 
40260     00 00 00 00 | 	byte	$00[12]
40264     05 00 00 00 
40268     00 00 00 00 
4026c     00 00 00 00 
40270     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40274     00 00 00 00 | 	byte	$00, $00, $00, $00
40278     00 00 B0 0B | 	long	(187 {__system___tx})<<20
4027c     00 00 C0 0B | 	long	(188 {__system___rx})<<20
40280     00 00 00 00 | 	byte	$00, $00, $00, $00
40284     00 00 D0 0B | 	long	(189 {__system___rxtxioctl_0761})<<20
40288     00 00 E0 0B | 	long	(190 {__system____dummy_flush_0762})<<20
4028c     00 00 00 00 
40290     00 00 00 00 | 	byte	$00[8]
40294     01 00 00 00 
40298     06 00 00 00 
4029c     00 00 00 00 
402a0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
402a4     00 00 00 00 
402a8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
402ac     00 00 B0 0B | 	long	(187 {__system___tx})<<20
402b0     00 00 C0 0B | 	long	(188 {__system___rx})<<20
402b4     00 00 00 00 | 	byte	$00, $00, $00, $00
402b8     00 00 D0 0B | 	long	(189 {__system___rxtxioctl_0761})<<20
402bc     00 00 E0 0B | 	long	(190 {__system____dummy_flush_0762})<<20
402c0     00 00 00 00 
402c4     00 00 00 00 | 	byte	$00[8]
402c8     01 00 00 00 
402cc     06 00 00 00 
402d0     00 00 00 00 
402d4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
402d8     00 00 00 00 
402dc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
402e0     00 00 B0 0B | 	long	(187 {__system___tx})<<20
402e4     00 00 C0 0B | 	long	(188 {__system___rx})<<20
402e8     00 00 00 00 | 	byte	$00, $00, $00, $00
402ec     00 00 D0 0B | 	long	(189 {__system___rxtxioctl_0761})<<20
402f0     00 00 E0 0B | 	long	(190 {__system____dummy_flush_0762})<<20
402f4     00 00 00 00 
      ...             
40464     00 00 00 00 
40468     00 00 00 00 | 	byte	$00[376]
4046c     70 04 04 00 | 	long	@@@__system__dat_ + 1848
40470     00 00 00 00 
40474     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
40478                 | 	alignl
40478                 | _fatfs_cc_dat_
40478     C7 00 FC 00 
4047c     E9 00 E2 00 
40480     E4 00 E0 00 
40484     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
40488     EA 00 EB 00 
4048c     E8 00 EF 00 
40490     EE 00 EC 00 
40494     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
40498     C9 00 E6 00 
4049c     C6 00 F4 00 
404a0     F6 00 F2 00 
404a4     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
404a8     FF 00 D6 00 
404ac     DC 00 F8 00 
404b0     A3 00 D8 00 
404b4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
404b8     E1 00 ED 00 
404bc     F3 00 FA 00 
404c0     F1 00 D1 00 
404c4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
404c8     BF 00 AE 00 
404cc     AC 00 BD 00 
404d0     BC 00 A1 00 
404d4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
404d8     91 25 92 25 
404dc     93 25 02 25 
404e0     24 25 C1 00 
404e4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
404e8     A9 00 63 25 
404ec     51 25 57 25 
404f0     5D 25 A2 00 
404f4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
404f8     14 25 34 25 
404fc     2C 25 1C 25 
40500     00 25 3C 25 
40504     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
40508     5A 25 54 25 
4050c     69 25 66 25 
40510     60 25 50 25 
40514     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
40518     F0 00 D0 00 
4051c     CA 00 CB 00 
40520     C8 00 31 01 
40524     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
40528     CF 00 18 25 
4052c     0C 25 88 25 
40530     84 25 A6 00 
40534     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
40538     D3 00 DF 00 
4053c     D4 00 D2 00 
40540     F5 00 D5 00 
40544     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
40548     DE 00 DA 00 
4054c     DB 00 D9 00 
40550     FD 00 DD 00 
40554     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
40558     AD 00 B1 00 
4055c     17 20 BE 00 
40560     B6 00 A7 00 
40564     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
40568     B0 00 A8 00 
4056c     B7 00 B9 00 
40570     B3 00 B2 00 
40574     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
40578     61 00 1A 03 
4057c     E0 00 17 03 
40580     F8 00 07 03 
40584     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
40588     78 01 00 01 
4058c     30 01 32 01 
40590     06 01 39 01 
40594     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
40598     2E 01 79 01 
4059c     06 01 80 01 
405a0     4D 00 43 02 
405a4     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
405a8     82 01 84 01 
405ac     84 01 86 01 
405b0     87 01 87 01 
405b4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
405b8     8B 01 8B 01 
405bc     8D 01 8E 01 
405c0     8F 01 90 01 
405c4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
405c8     93 01 94 01 
405cc     F6 01 96 01 
405d0     97 01 98 01 
405d4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
405d8     9B 01 9C 01 
405dc     9D 01 20 02 
405e0     9F 01 A0 01 
405e4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
405e8     A2 01 A4 01 
405ec     A4 01 A6 01 
405f0     A7 01 A7 01 
405f4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
405f8     AB 01 AC 01 
405fc     AC 01 AE 01 
40600     AF 01 AF 01 
40604     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
40608     B3 01 B3 01 
4060c     B5 01 B5 01 
40610     B7 01 B8 01 
40614     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
40618     BB 01 BC 01 
4061c     BC 01 BE 01 
40620     F7 01 C0 01 
40624     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
40628     C3 01 C4 01 
4062c     C5 01 C4 01 
40630     C7 01 C8 01 
40634     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
40638     CB 01 CA 01 
4063c     CD 01 10 01 
40640     DD 01 01 00 
40644     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
40648     12 01 F3 01 
4064c     03 00 F1 01 
40650     F4 01 F4 01 
40654     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
40658     22 02 12 01 
4065c     3A 02 09 00 
40660     65 2C 3B 02 
40664     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
40668     66 2C 3F 02 
4066c     40 02 41 02 
40670     41 02 46 02 
40674     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
40678     40 00 81 01 
4067c     86 01 55 02 
40680     89 01 8A 01 
40684     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
40688     5A 02 90 01 
4068c     5C 02 5D 02 
40690     5E 02 5F 02 
40694     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
40698     62 02 94 01 
4069c     64 02 65 02 
406a0     66 02 67 02 
406a4     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
406a8     6A 02 62 2C 
406ac     6C 02 6D 02 
406b0     6E 02 9C 01 
406b4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
406b8     9D 01 73 02 
406bc     74 02 9F 01 
406c0     76 02 77 02 
406c4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
406c8     7A 02 7B 02 
406cc     7C 02 64 2C 
406d0     7E 02 7F 02 
406d4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
406d8     82 02 A9 01 
406dc     84 02 85 02 
406e0     86 02 87 02 
406e4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
406e8     B1 01 B2 01 
406ec     45 02 8D 02 
406f0     8E 02 8F 02 
406f4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
406f8     B7 01 7B 03 
406fc     03 00 FD 03 
40700     FE 03 FF 03 
40704     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
40708     86 03 88 03 
4070c     89 03 8A 03 
40710     B1 03 11 03 
40714     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
40718     A3 03 A3 03 
4071c     C4 03 08 03 
40720     CC 03 03 00 
40724     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
40728     8F 03 D8 03 
4072c     18 01 F2 03 
40730     0A 00 F9 03 
40734     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
40738     F5 03 F6 03 
4073c     F7 03 F7 03 
40740     F9 03 FA 03 
40744     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
40748     20 03 50 04 
4074c     10 07 60 04 
40750     22 01 8A 04 
40754     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
40758     0E 01 CF 04 
4075c     01 00 C0 04 
40760     D0 04 44 01 
40764     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
40768     00 00 7D 1D 
4076c     01 00 63 2C 
40770     00 1E 96 01 
40774     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
40778     00 1F 08 06 
4077c     10 1F 06 06 
40780     20 1F 08 06 
40784     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
40788     40 1F 06 06 
4078c     51 1F 07 00 
40790     59 1F 52 1F 
40794     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
40798     5D 1F 56 1F 
4079c     5F 1F 60 1F 
407a0     08 06 70 1F 
407a4     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
407a8     BB 1F C8 1F 
407ac     C9 1F CA 1F 
407b0     CB 1F DA 1F 
407b4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
407b8     F9 1F EA 1F 
407bc     EB 1F FA 1F 
407c0     FB 1F 80 1F 
407c4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
407c8     08 06 A0 1F 
407cc     08 06 B0 1F 
407d0     04 00 B8 1F 
407d4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
407d8     BC 1F CC 1F 
407dc     01 00 C3 1F 
407e0     D0 1F 02 06 
407e4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
407e8     E5 1F 01 00 
407ec     EC 1F F3 1F 
407f0     01 00 FC 1F 
407f4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
407f8     32 21 70 21 
407fc     10 02 84 21 
40800     01 00 83 21 
40804     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
40808     30 2C 2F 04 
4080c     60 2C 02 01 
40810     67 2C 06 01 
40814     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
40818     80 2C 64 01 
4081c     00 2D 26 08 
40820     41 FF 1A 03 
40824     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
40828     05 07 09 0E 
4082c     10 12 14 16 
40830     18 1C 1E 43 
40834     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
40838     41 41 43 45 
4083c     45 45 49 49 
40840     49 41 41 45 
40844     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
40848     4F 55 55 59 
4084c     4F 55 4F 9C 
40850     4F 9E 9F 41 
40854     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
40858     A5 A6 A7 A8 
4085c     A9 AA AB AC 
40860     AD AE AF B0 
40864     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
40868     41 41 41 B8 
4086c     B9 BA BB BC 
40870     BD BE BF C0 
40874     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
40878     C5 41 41 C8 
4087c     C9 CA CB CC 
40880     CD CE CF D1 
40884     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
40888     49 49 49 49 
4088c     D9 DA DB DC 
40890     DD 49 DF 4F 
40894     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
40898     4F E6 E8 E8 
4089c     55 55 55 59 
408a0     59 EE EF F0 
408a4     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
408a8     F5 F6 F7 F8 
408ac     F9 FA FB FC 
408b0     FD FE FF 00 
408b4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
408b8     00 00 00 00 | 	byte	$00, $00, $00, $00
408bc     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_close})<<20
408c0     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_read})<<20
408c4     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_write})<<20
408c8     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_lseek})<<20
408cc     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_ioctl})<<20
408d0     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_flush})<<20
408d4     00 00 00 00 
408d8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
408dc     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_open})<<20
408e0     00 00 00 0B | 	long	(176 {_fatfs_cc_v_creat})<<20
408e4     00 00 10 0B | 	long	(177 {_fatfs_cc_v_opendir})<<20
408e8     00 00 20 0B | 	long	(178 {_fatfs_cc_v_closedir})<<20
408ec     00 00 30 0B | 	long	(179 {_fatfs_cc_v_readdir})<<20
408f0     00 00 40 0B | 	long	(180 {_fatfs_cc_v_stat})<<20
408f4     00 00 50 0B | 	long	(181 {_fatfs_cc_v_mkdir})<<20
408f8     00 00 60 0B | 	long	(182 {_fatfs_cc_v_rmdir})<<20
408fc     00 00 70 0B | 	long	(183 {_fatfs_cc_v_remove})<<20
40900     00 00 80 0B | 	long	(184 {_fatfs_cc_v_rename})<<20
40904     00 00 90 0B | 	long	(185 {_fatfs_cc_v_init})<<20
40908     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_deinit})<<20
4090c     FF FF FF FF 
40910     1F 00 00 00 
40914     1C 00 00 00 
40918     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
4091c     1E 00 00 00 
40920     1F 00 00 00 
40924     1E 00 00 00 
40928     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
4092c     1F 00 00 00 
40930     1E 00 00 00 
40934     1F 00 00 00 
40938     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
4093c     1F 00 00 00 
40940     00 00 00 00 
40944     1F 00 00 00 
40948     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
4094c     5A 00 00 00 
40950     78 00 00 00 
40954     97 00 00 00 
40958     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
4095c     D4 00 00 00 
40960     F3 00 00 00 
40964     11 01 00 00 
40968     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
4096c     4E 01 00 00 
40970     6D 01 00 00 
40974     FF FF FF FF 
40978     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
4097c     00 00 00 00 
      ...             
40994     00 00 00 00 
40998     00 00 00 00 | 	byte	$00[32]
4099c     BA 09 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
409a0     BE 09 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
409a4     00 00 00 00 
409a8     00 00 00 00 
409ac     00 00 00 00 
409b0     00 00 00 00 
409b4     00 00       | 	byte	$00[18]
409b6     3F 3F 3F 00 
409ba     55 43 54 00 
409be     55 43 54 00 
409c2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
409c6     00 00 00 00 
409ca     00 00 00    | 	byte	$00[7]
409cd     CA 9A 3B 00 
409d1     00 00 00 01 
409d5     01 01 01 01 
409d9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
409dd     91 11 11 11 
409e1     11 01 01 01 
409e5     01 01 01 01 
409e9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
409ed     01 01 01 01 
409f1     01 01 01    | 	byte	$01[7]
409f4     90 20 20 20 
409f8     20 20 20 20 
409fc     20 20 20 20 
40a00     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
40a04     42 42 42 42 
40a08     42 42 42 42 
40a0c     42 42       | 	byte	$42[10]
40a0e     20 20 20 20 
40a12     20 20 20    | 	byte	$20[7]
40a15     44 44 44 44 
40a19     44 44       | 	byte	$44[6]
40a1b     04 04 04 04 
40a1f     04 04 04 04 
40a23     04 04 04 04 
40a27     04 04 04 04 
40a2b     04 04 04 04 | 	byte	$04[20]
40a2f     20 20 20 20 
40a33     20 20       | 	byte	$20[6]
40a35     48 48 48 48 
40a39     48 48       | 	byte	$48[6]
40a3b     08 08 08 08 
40a3f     08 08 08 08 
40a43     08 08 08 08 
40a47     08 08 08 08 
40a4b     08 08 08 08 | 	byte	$08[20]
40a4f     20 20 20 20 
40a53     01 00 00 00 
40a57     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
40a58                 | __methodtable__
40a58     6C 5C 01 00 | 	long	@_do_no_command
40a5c     00 F6 01 00 | 	long	@_do_plus
40a60     20 E6 01 00 | 	long	@_do_minus
40a64     E8 F4 01 00 | 	long	@_do_or
40a68     A0 EC 01 00 | 	long	@_do_mul
40a6c     E4 D0 01 00 | 	long	@_do_fdiv
40a70     D0 C8 01 00 | 	long	@_do_and
40a74     E8 C9 01 00 | 	long	@_do_div
40a78     80 EA 01 00 | 	long	@_do_mod
40a7c     B4 FC 01 00 | 	long	@_do_shl
40a80     CC FD 01 00 | 	long	@_do_shr
40a84     EC FA 01 00 | 	long	@_do_power
40a88     88 BE 01 00 | 	long	@_do_getvar
40a8c     28 82 01 00 | 	long	@_do_push
40a90     80 B8 01 00 | 	long	@_do_assign
40a94     14 F5 00 00 | 	long	@_do_cls
40a98     38 56 01 00 | 	long	@_do_new
40a9c     6C 7A 01 00 | 	long	@_do_plot
40aa0     14 17 01 00 | 	long	@_do_draw
40aa4     D4 7C 01 00 | 	long	@_do_print
40aa8     F4 F2 00 00 | 	long	@_do_circle
40aac     48 19 01 00 | 	long	@_do_fcircle
40ab0     E8 E1 00 00 | 	long	@_do_box
40ab4     2C 1E 01 00 | 	long	@_do_frame
40ab8     54 F5 00 00 | 	long	@_do_color
40abc     BC 1B 01 00 | 	long	@_do_for
40ac0     A4 58 01 00 | 	long	@_do_next
40ac4     70 44 01 00 | 	long	@_do_list
40ac8     C0 9D 01 00 | 	long	@_do_run
40acc     70 18 01 00 | 	long	@_do_error
40ad0     78 2A 01 00 | 	long	@_do_fast_goto
40ad4     68 2B 01 00 | 	long	@_do_find_goto
40ad8     7C 2D 01 00 | 	long	@_do_slow_goto
40adc     8C 5C 01 00 | 	long	@_do_nothing
40ae0     EC D4 00 00 | 	long	@_test_csave
40ae4     DC A1 01 00 | 	long	@_do_save
40ae8     0C 47 01 00 | 	long	@_do_load
40aec     A8 6D 01 00 | 	long	@_do_pinwrite
40af0     C0 B5 01 00 | 	long	@_do_waitms
40af4     F4 B6 01 00 | 	long	@_do_waitvbl
40af8     70 30 01 00 | 	long	@_do_if
40afc     08 18 01 00 | 	long	@_do_else
40b00     08 CC 01 00 | 	long	@_do_eq
40b04     AC D2 01 00 | 	long	@_do_ge
40b08     78 DC 01 00 | 	long	@_do_le
40b0c     94 D7 01 00 | 	long	@_do_gt
40b10     54 E1 01 00 | 	long	@_do_lt
40b14     0C F0 01 00 | 	long	@_do_ne
40b18     28 9B 01 00 | 	long	@_do_rnd
40b1c     D0 E3 00 00 | 	long	@_do_brun
40b20     6C DD 00 00 | 	long	@_do_beep
40b24     A4 0F 01 00 | 	long	@_do_dir
40b28     DC 69 01 00 | 	long	@_do_paper
40b2c     2C 34 01 00 | 	long	@_do_ink
40b30     40 1B 01 00 | 	long	@_do_font
40b34     48 51 01 00 | 	long	@_do_mode
40b38     F4 54 01 00 | 	long	@_do_mouse
40b3c     F8 28 01 00 | 	long	@_do_gettime
40b40     B0 F6 00 00 | 	long	@_do_cursor
40b44     6C F4 00 00 | 	long	@_do_click
40b48     B0 55 01 00 | 	long	@_do_mousex
40b4c     F4 55 01 00 | 	long	@_do_mousey
40b50     28 55 01 00 | 	long	@_do_mousek
40b54     6C 55 01 00 | 	long	@_do_mousew
40b58     28 AB 01 00 | 	long	@_do_sin
40b5c     60 AE 01 00 | 	long	@_do_stick
40b60     F0 AF 01 00 | 	long	@_do_strig
40b64     80 AC 01 00 | 	long	@_do_sprite
40b68     CC 0A 01 00 | 	long	@_do_defsprite
40b6c     A4 27 01 00 | 	long	@_do_getpixel
40b70     9C B5 01 00 | 	long	@_do_waitclock
40b74     D0 E9 01 00 | 	long	@_do_negative
40b78     AC 88 01 00 | 	long	@_do_rdpin
40b7c     4C 9D 01 00 | 	long	@_do_rqpin
40b80     D4 6B 01 00 | 	long	@_do_pinread
40b84     00 B7 01 00 | 	long	@_do_wrpin
40b88     80 B7 01 00 | 	long	@_do_wxpin
40b8c     00 B8 01 00 | 	long	@_do_wypin
40b90     14 6B 01 00 | 	long	@_do_pinfloat
40b94     94 6B 01 00 | 	long	@_do_pinlo
40b98     54 6B 01 00 | 	long	@_do_pinhi
40b9c     58 6C 01 00 | 	long	@_do_pinstart
40ba0     68 6D 01 00 | 	long	@_do_pintoggle
40ba4     4C 7C 01 00 | 	long	@_do_position
40ba8     8C F5 00 00 | 	long	@_do_cos
40bac     80 B1 01 00 | 	long	@_do_tan
40bb0     54 DC 00 00 | 	long	@_do_atn
40bb4     44 DB 00 00 | 	long	@_do_asin
40bb8     D4 D8 00 00 | 	long	@_do_acos
40bbc     6C AD 01 00 | 	long	@_do_sqr
40bc0     2C 1A 01 00 | 	long	@_do_fill
40bc4     E0 01 01 00 | 	long	@_do_defsnd
40bc8     E4 F6 00 00 | 	long	@_do_defenv
40bcc     84 88 01 00 | 	long	@_do_rad
40bd0     40 0E 01 00 | 	long	@_do_deg
40bd4     AC 34 01 00 | 	long	@_do_int
40bd8     30 6E 01 00 | 	long	@_do_play
40bdc     80 A5 01 00 | 	long	@_do_setdelay
40be0     28 A6 01 00 | 	long	@_do_setenv
40be4     D0 A6 01 00 | 	long	@_do_setlen
40be8     78 A7 01 00 | 	long	@_do_setpan
40bec     C8 A8 01 00 | 	long	@_do_setvol
40bf0     70 A9 01 00 | 	long	@_do_setwave
40bf4     20 A8 01 00 | 	long	@_do_setsustain
40bf8     20 98 01 00 | 	long	@_do_release
40bfc     90 25 01 00 | 	long	@_do_getenvsustain
40c00     3C 7B 01 00 | 	long	@_do_poke
40c04     3C 16 01 00 | 	long	@_do_dpoke
40c08     E4 4D 01 00 | 	long	@_do_lpoke
40c0c     64 6A 01 00 | 	long	@_do_peek
40c10     90 15 01 00 | 	long	@_do_dpeek
40c14     38 4D 01 00 | 	long	@_do_lpeek
40c18     88 1F 01 00 | 	long	@_do_fre
40c1c     A0 26 01 00 | 	long	@_do_getnotevalue
40c20     40 C4 01 00 | 	long	@_do_getaddr
40c24     54 31 01 00 | 	long	@_do_inkey
40c28     54 D8 00 00 | 	long	@_do_abs
40c2c     0C 2F 01 00 | 	long	@_do_hex
40c30     84 E0 00 00 | 	long	@_do_bin
40c34     90 B2 01 00 | 	long	@_do_val
40c38     F4 F1 00 00 | 	long	@_do_chr
40c3c     E4 D9 00 00 | 	long	@_do_asc
40c40     70 41 01 00 | 	long	@_do_left
40c44     9C 99 01 00 | 	long	@_do_right
40c48     BC 4E 01 00 | 	long	@_do_mid
40c4c     FC 42 01 00 | 	long	@_do_len
40c50     60 29 01 00 | 	long	@_do_gosub
40c54     F0 98 01 00 | 	long	@_do_return
40c58     2C 18 01 00 | 	long	@_do_end
40c5c     14 7C 01 00 | 	long	@_do_pop
40c60     BC 4B 01 00 | 	long	@_do_log
40c64     E8 EF 00 00 | 	long	@_do_changevol
40c68     C8 F0 00 00 | 	long	@_do_changewav
40c6c     D8 EE 00 00 | 	long	@_do_changepan
40c70     BC EB 00 00 | 	long	@_do_changefreq
40c74     18 AA 01 00 | 	long	@_do_shutup
40c78     F8 9C 01 00 | 	long	@_do_round
40c7c     60 18 01 00 | 	long	@_do_enter
40c80     B4 5D 01 00 | 	long	@_do_open
40c84     98 F4 00 00 | 	long	@_do_close
40c88     EC 1F 01 00 | 	long	@_do_get
40c8c     44 83 01 00 | 	long	@_do_put
40c90     08 E6 00 00 | 	long	@_do_cd
40c94     68 0E 01 00 | 	long	@_do_delete
40c98     88 50 01 00 | 	long	@_do_mkdir
40c9c     80 DE 00 00 | 	long	@_do_blit
40ca0     54 1F 01 00 | 	long	@_do_framebuf
40ca4     90 5C 01 00 | 	long	@_do_on
40ca8     38 AC 01 00 | 	long	@_do_skip
40cac     68 35 01 00 | 	long	@_do_input
40cb0     10 8B 01 00 | 	long	@_do_read
40cb4     B8 98 01 00 | 	long	@_do_restore
40cb8     5C 62 01 00 | 	long	@_do_padx
40cbc     DC 64 01 00 | 	long	@_do_pady
40cc0     5C 67 01 00 | 	long	@_do_padz
40cc4     CC 60 01 00 | 	long	@_do_padh
40cc8     C8 3D 02 00 | 	long	@_hg010b_spin2_putchar
40ccc     B0 53 03 00 | 	long	@__struct___bas_wrap_sender_tx
40cd0     F4 53 03 00 | 	long	@__struct___bas_wrap_sender_rx
40cd4     3C 54 03 00 | 	long	@__struct___bas_wrap_sender_close
40cd8     E0 52 03 00 | 	long	@__struct__s_vfs_file_t_putchar
40cdc     50 53 03 00 | 	long	@__struct__s_vfs_file_t_getchar
40ce0     98 52 03 00 | 	long	@___strs_cl_pfunc
40ce4     2C B0 02 00 | 	long	@__system____root_opendir
40ce8     C8 B0 02 00 | 	long	@__system____root_closedir
40cec     44 B0 02 00 | 	long	@__system____root_readdir
40cf0     D0 B0 02 00 | 	long	@__system____root_stat
40cf4     1C A9 02 00 | 	long	@__system____default_putc
40cf8     A0 A8 02 00 | 	long	@__system____default_getc
40cfc     C4 A9 02 00 | 	long	@__system____default_flush
40d00     9C 3D 03 00 | 	long	@_fatfs_cc_v_close
40d04     B8 41 03 00 | 	long	@_fatfs_cc_v_read
40d08     CC 42 03 00 | 	long	@_fatfs_cc_v_write
40d0c     AC 43 03 00 | 	long	@_fatfs_cc_v_lseek
40d10     34 44 03 00 | 	long	@_fatfs_cc_v_ioctl
40d14     88 44 03 00 | 	long	@_fatfs_cc_v_open
40d18     00 3D 03 00 | 	long	@_fatfs_cc_v_creat
40d1c     E0 3D 03 00 | 	long	@_fatfs_cc_v_opendir
40d20     54 3E 03 00 | 	long	@_fatfs_cc_v_closedir
40d24     94 3E 03 00 | 	long	@_fatfs_cc_v_readdir
40d28     C8 3F 03 00 | 	long	@_fatfs_cc_v_stat
40d2c     48 44 03 00 | 	long	@_fatfs_cc_v_mkdir
40d30     68 44 03 00 | 	long	@_fatfs_cc_v_rmdir
40d34     58 44 03 00 | 	long	@_fatfs_cc_v_remove
40d38     78 44 03 00 | 	long	@_fatfs_cc_v_rename
40d3c     98 45 03 00 | 	long	@_fatfs_cc_v_init
40d40     A0 45 03 00 | 	long	@_fatfs_cc_v_deinit
40d44     70 5A 02 00 | 	long	@__system___tx
40d48     B0 5A 02 00 | 	long	@__system___rx
40d4c     3C BC 02 00 | 	long	@__system___rxtxioctl_0761
40d50     94 BC 02 00 | 	long	@__system____dummy_flush_0762
40d54     68 45 03 00 | 	long	@_fatfs_cc_v_flush
40d58                 | __heap_base
40d58     00 00 00 00 
      ...             
58458     00 00 00 00 
5845c     00 00 00 00 | 	long	0[24002]
58460                 | objmem
58460     00 00 00 00 
      ...             
62924     00 00 00 00 
62928     00 00 00 00 | 	long	0[10547]
6292c                 | stackspace
6292c     00 00 00 00 | 	long	0[1]
62930 100             | 	org	COG_BSS_START
62930 100             | _var01
62930 100             | 	res	1
62930 101             | _var02
62930 101             | 	res	1
62930 102             | _var03
62930 102             | 	res	1
62930 103             | _var04
62930 103             | 	res	1
62930 104             | _var05
62930 104             | 	res	1
62930 105             | _var06
62930 105             | 	res	1
62930 106             | _var07
62930 106             | 	res	1
62930 107             | _var08
62930 107             | 	res	1
62930 108             | _var09
62930 108             | 	res	1
62930 109             | arg01
62930 109             | 	res	1
62930 10a             | arg02
62930 10a             | 	res	1
62930 10b             | arg03
62930 10b             | 	res	1
62930 10c             | arg04
62930 10c             | 	res	1
62930 10d             | arg05
62930 10d             | 	res	1
62930 10e             | arg06
62930 10e             | 	res	1
62930 10f             | arg07
62930 10f             | 	res	1
62930 110             | arg08
62930 110             | 	res	1
62930 111             | arg09
62930 111             | 	res	1
62930 112             | arg10
62930 112             | 	res	1
62930 113             | local01
62930 113             | 	res	1
62930 114             | local02
62930 114             | 	res	1
62930 115             | local03
62930 115             | 	res	1
62930 116             | local04
62930 116             | 	res	1
62930 117             | local05
62930 117             | 	res	1
62930 118             | local06
62930 118             | 	res	1
62930 119             | local07
62930 119             | 	res	1
62930 11a             | local08
62930 11a             | 	res	1
62930 11b             | local09
62930 11b             | 	res	1
62930 11c             | local10
62930 11c             | 	res	1
62930 11d             | local11
62930 11d             | 	res	1
62930 11e             | local12
62930 11e             | 	res	1
62930 11f             | local13
62930 11f             | 	res	1
62930 120             | local14
62930 120             | 	res	1
62930 121             | local15
62930 121             | 	res	1
62930 122             | local16
62930 122             | 	res	1
62930 123             | local17
62930 123             | 	res	1
62930 124             | local18
62930 124             | 	res	1
62930 125             | local19
62930 125             | 	res	1
62930 126             | local20
62930 126             | 	res	1
62930 127             | local21
62930 127             | 	res	1
62930 128             | local22
62930 128             | 	res	1
62930 129             | local23
62930 129             | 	res	1
62930 12a             | local24
62930 12a             | 	res	1
62930 12b             | local25
62930 12b             | 	res	1
62930 12c             | local26
62930 12c             | 	res	1
62930 12d             | local27
62930 12d             | 	res	1
62930 12e             | local28
62930 12e             | 	res	1
62930 12f             | local29
62930 12f             | 	res	1
62930 130             | local30
62930 130             | 	res	1
62930 131             | local31
62930 131             | 	res	1
62930 132             | local32
62930 132             | 	res	1
62930 133             | local33
62930 133             | 	res	1
62930 134             | local34
62930 134             | 	res	1
62930 135             | local35
62930 135             | 	res	1
62930 136             | local36
62930 136             | 	res	1
62930 137             | local37
62930 137             | 	res	1
62930 138             | local38
62930 138             | 	res	1
62930 139             | local39
62930 139             | 	res	1
62930 13a             | local40
62930 13a             | 	res	1
62930 13b             | local41
62930 13b             | 	res	1
62930 13c             | local42
62930 13c             | 	res	1
62930 13d             | local43
62930 13d             | 	res	1
62930 13e             | local44
62930 13e             | 	res	1
62930 13f             | local45
62930 13f             | 	res	1
62930 140             | local46
62930 140             | 	res	1
62930 141             | local47
62930 141             | 	res	1
62930 142             | local48
62930 142             | 	res	1
62930 143             | local49
62930 143             | 	res	1
62930 144             | muldiva_
62930 144             | 	res	1
62930 145             | muldivb_
62930 145             | 	res	1
62930 146             | 	fit	480
62930 146             | 
