00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 88 D6 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 3F 7F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 3E 7D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 3F 7D 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 7E 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 7C 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 3E 7D 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 3F 7F 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 20 B7 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 58 B4 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 28 A5 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 38 A7 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 90 A2 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 9C 0F 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 78 AE 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 04 41 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 B4 68 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 6C 66 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 44 78 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 50 49 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     C0 E6 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     F4 F7 B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     E8 E5 05 F1 | 	add	objptr, ##41960
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     E8 E5 85 F1 | 	sub	objptr, ##41960
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     EC FA B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     40 02 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     38 FC B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     FC F9 B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     10 CC B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     E8 E5 05 F1 | 	add	objptr, ##41960
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     E8 E5 85 F1 | 	sub	objptr, ##41960
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     08 CA B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     A8 C9 B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F0 E5 05 F1 | 	add	objptr, ##41968
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     B2 E5 85 F1 | 	sub	objptr, ##41906
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     B4 E5 05 F1 | 	add	objptr, ##41908
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     B2 E5 85 F1 | 	sub	objptr, ##41906
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     38 C9 B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     08 E1 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F0 E5 05 F1 | 	add	objptr, ##41968
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F0 E5 85 F1 | 	sub	objptr, ##41968
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     24 E4 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     28 F7 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     7C FE B1 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     78 F8 B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     80 01 00 FF 
00ccc     0A 49 06 F6 | 	mov	local22, ##@LR__5007
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     CC C7 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     58 1D B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     68 FB B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     74 E8 B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     A4 EA B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     B4 F5 B1 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     08 FD B1 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     04 F7 B1 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     68 C6 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     E4 DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     D8 DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     68 DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     34 DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     54 DF B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     44 DF B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     0C C5 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     B8 C4 B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     88 C4 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F0 E5 05 F1 | 	add	objptr, ##41968
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     B2 E5 85 F1 | 	sub	objptr, ##41906
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     B4 E5 05 F1 | 	add	objptr, ##41908
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     B2 E5 85 F1 | 	sub	objptr, ##41906
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     20 C4 B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     F0 DB B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F0 E5 05 F1 | 	add	objptr, ##41968
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F0 E5 85 F1 | 	sub	objptr, ##41968
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     CC DC B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     08 C3 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     B4 C2 B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     84 C2 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F0 E5 05 F1 | 	add	objptr, ##41968
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     B2 E5 85 F1 | 	sub	objptr, ##41906
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     B4 E5 05 F1 | 	add	objptr, ##41908
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     B2 E5 85 F1 | 	sub	objptr, ##41906
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     1C C2 B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     EC D9 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F0 E5 05 F1 | 	add	objptr, ##41968
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F0 E5 85 F1 | 	sub	objptr, ##41968
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     80 01 00 FF 
01328     0B 49 06 F6 | 	mov	local22, ##@LR__5008
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 34 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1A 29 02 F6 | 	mov	local06, local12
01394     14 13 02 F6 | 	mov	arg01, local06
01398     14 DB B1 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 32 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 34 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1A 29 02 F6 | 	mov	local06, local12
013f4     14 13 02 F6 | 	mov	arg01, local06
013f8     B4 DA B1 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 32 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 28 E2 FA | 	rdword	local06, objptr
0140c     02 28 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 28 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 2C 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     16 2B 02 F6 | 	mov	local07, local08
01434     15 29 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 28 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 28 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 34 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1A 29 02 F6 | 	mov	local06, local12
01470     14 13 02 F6 | 	mov	arg01, local06
01474     08 DA B1 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 32 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 28 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     14 13 02 F6 | 	mov	arg01, local06
014d0     AC D9 B1 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 32 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 28 02 FB | 	rdlong	local06, objptr
014e8     14 35 22 F6 | 	not	local12, local06
014ec     F2 34 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 34 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 28 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     F8 C7 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 28 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     E8 C7 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 24 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     BC F5 B1 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     94 F5 B1 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     6C F5 B1 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 1E 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 20 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     10 13 02 F6 | 	mov	arg01, local02
01650     C4 EA B1 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     10 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     14 EB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 22 02 F6 | 	mov	local03, result1
0166c     10 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     04 EB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 22 06 F1 | 	add	local03, ##49152
01680     0F 22 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     11 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     0F 23 02 F6 | 	mov	local03, local01
016a4     02 22 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 22 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     11 15 62 FC | 	wrlong	arg02, local03
016c0     0F 23 02 F6 | 	mov	local03, local01
016c4     02 22 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 22 02 F1 | 	add	local03, objptr
016d0     10 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     68 EA B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     11 FB 61 FC | 	wrlong	result1, local03
016e4     01 1E 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 20 06 F1 | 	add	local02, #1
016ec     07 20 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 1E 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     0F 23 02 F6 | 	mov	local03, local01
01704     02 22 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 22 02 F1 | 	add	local03, objptr
01714     11 01 68 FC | 	wrlong	#0, local03
01718     0F 23 02 F6 | 	mov	local03, local01
0171c     02 22 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 22 02 F1 | 	add	local03, objptr
01728     11 01 68 FC | 	wrlong	#0, local03
0172c     01 1E 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     2F 4A 05 F6 | 	mov	COUNT_, #47
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     7C F0 07 F1 | 	add	ptra, ##636
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     CC 15 B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     04 15 B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 1E 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 20 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     10 23 02 F6 | 	mov	local03, local02
017c4     02 22 66 F0 | 	shl	local03, #2
017c8     A7 22 02 F1 | 	add	local03, fp
017cc     11 01 68 FC | 	wrlong	#0, local03
017d0     01 20 06 F1 | 	add	local02, #1
017d4     7E 20 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 20 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     10 25 02 F6 | 	mov	local04, local02
017f4     03 24 66 F0 | 	shl	local04, #3
017f8     F2 24 02 F1 | 	add	local04, objptr
017fc     80 01 00 FF 
01800     0C 17 06 F6 | 	mov	arg03, ##@LR__5009
01804     12 17 62 FC | 	wrlong	arg03, local04
01808     10 25 02 F6 | 	mov	local04, local02
0180c     03 24 66 F0 | 	shl	local04, #3
01810     F2 26 02 F6 | 	mov	local05, objptr
01814     F2 24 02 F1 | 	add	local04, objptr
01818     00 28 06 F6 | 	mov	local06, #0
0181c     04 24 06 F1 | 	add	local04, #4
01820     12 01 68 FC | 	wrlong	#0, local04
01824     01 20 06 F1 | 	add	local02, #1
01828     7E 20 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     F4 14 B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     2C 14 B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     80 01 00 FF 
01860     0D 25 06 F6 | 	mov	local04, ##@LR__5010
01864     1A 00 00 FF 
01868     D8 E5 05 F1 | 	add	objptr, ##13784
0186c     F2 24 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     D8 E5 85 F1 | 	sub	objptr, ##13784
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 2B 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     15 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 2A 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 2B 8A F1 | 	sub	local07, arg01 wz
0189c     51 00 00 FF 
018a0     F8 E5 05 F1 | 	add	objptr, ##41976
018a4     F2 2A 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     51 00 00 FF 
018ac     F8 E5 85 F1 | 	sub	objptr, ##41976
018b0     60 24 90 AD |  if_e	jmp	#LR__0198
018b4     00 2C 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 20 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 2B 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     15 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 2A 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 2B 82 F1 | 	sub	local07, arg01
018e8     15 2F 02 F6 | 	mov	local09, local07
018ec     01 2E 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     17 21 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     10 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     AC 10 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     80 01 00 FF 
01920     0E 15 06 F6 | 	mov	arg02, ##@LR__5011
01924     30 EF B1 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 2C 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     10 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     6C 10 B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     80 01 00 FF 
01960     10 15 06 F6 | 	mov	arg02, ##@LR__5012
01964     F0 EE B1 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 2C 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     10 25 02 F6 | 	mov	local04, local02
01978     03 24 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 26 02 F6 | 	mov	local05, objptr
01988     F2 24 02 F1 | 	add	local04, objptr
0198c     04 24 06 F1 | 	add	local04, #4
01990     12 2D 62 FC | 	wrlong	local08, local04
01994     01 20 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 20 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     10 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     FC 0F B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     80 01 00 FF 
019d0     12 31 06 F6 | 	mov	local10, ##@LR__5013
019d4     18 15 02 F6 | 	mov	arg02, local10
019d8     7C EE B1 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     10 27 02 F6 | 	mov	local05, local02
019e8     03 26 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 28 02 F6 | 	mov	local06, objptr
019f8     F2 26 02 F1 | 	add	local05, objptr
019fc     04 26 06 F1 | 	add	local05, #4
01a00     13 33 02 FB | 	rdlong	local11, local05
01a04     04 26 86 F1 | 	sub	local05, #4
01a08     19 35 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     51 00 00 FF 
01a1c     F8 E5 05 F1 | 	add	objptr, ##41976
01a20     F2 36 02 FB | 	rdlong	local13, objptr
01a24     51 00 00 FF 
01a28     F8 E5 85 F1 | 	sub	objptr, ##41976
01a2c     1B 39 02 F6 | 	mov	local14, local13
01a30     1C 21 52 F2 | 	cmps	local02, local14 wc
01a34     01 20 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     51 00 00 FF 
01a40     F8 E5 05 F1 | 	add	objptr, ##41976
01a44     F2 24 02 FB | 	rdlong	local04, objptr
01a48     51 00 00 FF 
01a4c     F8 E5 85 F1 | 	sub	objptr, ##41976
01a50     12 21 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 28 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     14 13 02 F6 | 	mov	arg01, local06
01a70     09 2B 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     15 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 2A 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 2B 82 F1 | 	sub	local07, arg01
01a88     15 27 02 F6 | 	mov	local05, local07
01a8c     13 15 02 F6 | 	mov	arg02, local05
01a90     10 15 82 F1 | 	sub	arg02, local02
01a94     14 13 02 F6 | 	mov	arg01, local06
01a98     98 0E B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     98 12 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     D0 11 B2 FD | 	call	#__system__LTrim_S
01aac     51 00 00 FF 
01ab0     FC E5 05 F1 | 	add	objptr, ##41980
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E0 E5 85 F1 | 	sub	objptr, ##13792
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 20 86 F1 | 	sub	local02, #1
01ad0     10 15 02 F6 | 	mov	arg02, local02
01ad4     D4 0D B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     5C 12 B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     94 11 B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     80 01 00 FF 
01b04     14 25 06 F6 | 	mov	local04, ##@LR__5014
01b08     51 00 00 FF 
01b0c     FC E5 05 F1 | 	add	objptr, ##41980
01b10     F2 24 62 FC | 	wrlong	local04, objptr
01b14     51 00 00 FF 
01b18     FC E5 85 F1 | 	sub	objptr, ##41980
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 24 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     51 00 00 FF 
01b40     FC E5 05 F1 | 	add	objptr, ##41980
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     51 00 00 FF 
01b4c     FC E5 85 F1 | 	sub	objptr, ##41980
01b50     80 01 00 FF 
01b54     15 29 06 F6 | 	mov	local06, ##@LR__5015
01b58     14 15 02 F6 | 	mov	arg02, local06
01b5c     F8 EC B1 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 24 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     51 00 00 FF 
01ba0     FC E5 05 F1 | 	add	objptr, ##41980
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     51 00 00 FF 
01bac     FC E5 85 F1 | 	sub	objptr, ##41980
01bb0     80 01 00 FF 
01bb4     16 15 06 F6 | 	mov	arg02, ##@LR__5016
01bb8     9C EC B1 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 24 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 24 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     51 00 00 FF 
01bf8     FC E5 05 F1 | 	add	objptr, ##41980
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     51 00 00 FF 
01c04     FC E5 85 F1 | 	sub	objptr, ##41980
01c08     80 01 00 FF 
01c0c     17 15 06 F6 | 	mov	arg02, ##@LR__5017
01c10     44 EC B1 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 24 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 24 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     51 00 00 FF 
01c50     FC E5 05 F1 | 	add	objptr, ##41980
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     51 00 00 FF 
01c5c     FC E5 85 F1 | 	sub	objptr, ##41980
01c60     80 01 00 FF 
01c64     18 15 06 F6 | 	mov	arg02, ##@LR__5018
01c68     EC EB B1 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 20 06 F6 | 	mov	local02, #0
01c94     01 3A 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 20 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     10 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     08 0D B2 FD | 	call	#__system__Mid_S
01cbc     FD 3C 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     1E 13 02 F6 | 	mov	arg01, local16
01cc4     2C 28 B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     1D 23 02 F6 | 	mov	local03, local15
01cd4     02 22 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 22 02 F1 | 	add	local03, fp
01ce0     11 21 62 FC | 	wrlong	local02, local03
01ce4     01 3A 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     51 00 00 FF 
01cf0     F8 E5 05 F1 | 	add	objptr, ##41976
01cf4     F2 24 02 FB | 	rdlong	local04, objptr
01cf8     51 00 00 FF 
01cfc     F8 E5 85 F1 | 	sub	objptr, ##41976
01d00     12 21 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     1D 23 02 F6 | 	mov	local03, local15
01d0c     02 22 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 30 02 F6 | 	mov	local10, fp
01d18     A7 22 02 F1 | 	add	local03, fp
01d1c     11 21 62 FC | 	wrlong	local02, local03
01d20     00 3E 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 20 06 F6 | 	mov	local02, #0
01d28     1D 41 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     20 21 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     10 23 02 F6 | 	mov	local03, local02
01d3c     02 22 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 22 02 F1 | 	add	local03, fp
01d48     11 27 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     04 E4 05 F1 | 	add	objptr, ##41988
01d54     F2 26 62 FC | 	wrlong	local05, objptr
01d58     10 23 02 F6 | 	mov	local03, local02
01d5c     01 22 06 F1 | 	add	local03, #1
01d60     02 22 66 F0 | 	shl	local03, #2
01d64     A7 30 02 F6 | 	mov	local10, fp
01d68     A7 22 02 F1 | 	add	local03, fp
01d6c     11 27 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 26 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 24 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     04 E4 85 F1 | 	sub	objptr, ##41988
01d88     01 24 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     E8 E5 05 F1 | 	add	objptr, ##13800
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     04 E4 85 F1 | 	sub	objptr, ##41988
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     08 0C B2 FD | 	call	#__system__Mid_S
01dbc     FD 42 02 F6 | 	mov	local19, result1
01dc0     80 01 00 FF 
01dc4     19 15 06 F6 | 	mov	arg02, ##@LR__5019
01dc8     21 13 02 F6 | 	mov	arg01, local19
01dcc     88 EA B1 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     1F 31 02 F6 | 	mov	local10, local17
01ddc     03 30 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 30 02 F1 | 	add	local10, objptr
01dec     18 43 62 FC | 	wrlong	local19, local10
01df0     01 3E 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     E8 E5 05 F1 | 	add	objptr, ##13800
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 32 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     04 E4 85 F1 | 	sub	objptr, ##41988
01e30     19 35 02 F6 | 	mov	local12, local11
01e34     1A 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     84 0B B2 FD | 	call	#__system__Mid_S
01e40     FD 42 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     80 01 00 FF 
01e48     1A 15 06 F6 | 	mov	arg02, ##@LR__5020
01e4c     21 13 02 F6 | 	mov	arg01, local19
01e50     04 EA B1 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     1F 31 02 F6 | 	mov	local10, local17
01e60     03 30 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 30 02 F1 | 	add	local10, objptr
01e70     18 43 62 FC | 	wrlong	local19, local10
01e74     01 3E 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 20 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 24 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 32 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     19 13 02 F6 | 	mov	arg01, local11
01ed0     24 46 B0 FD | 	call	#_isdec
01ed4     FD 34 02 F6 | 	mov	local12, result1
01ed8     1A 29 22 F6 | 	not	local06, local12
01edc     00 28 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     1F 21 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     10 27 02 F6 | 	mov	local05, local02
01ef8     01 26 86 F1 | 	sub	local05, #1
01efc     03 26 66 F0 | 	shl	local05, #3
01f00     F2 26 02 F1 | 	add	local05, objptr
01f04     13 25 02 FB | 	rdlong	local04, local05
01f08     10 29 02 F6 | 	mov	local06, local02
01f0c     01 28 86 F1 | 	sub	local06, #1
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     04 28 06 F1 | 	add	local06, #4
01f1c     14 23 02 FB | 	rdlong	local03, local06
01f20     10 29 02 F6 | 	mov	local06, local02
01f24     03 28 66 F0 | 	shl	local06, #3
01f28     F2 34 02 F6 | 	mov	local12, objptr
01f2c     F2 28 02 F1 | 	add	local06, objptr
01f30     14 25 62 FC | 	wrlong	local04, local06
01f34     10 33 02 F6 | 	mov	local11, local02
01f38     19 37 02 F6 | 	mov	local13, local11
01f3c     03 36 66 F0 | 	shl	local13, #3
01f40     F2 36 02 F1 | 	add	local13, objptr
01f44     04 36 06 F1 | 	add	local13, #4
01f48     1B 23 62 FC | 	wrlong	local03, local13
01f4c     01 20 86 F1 | 	sub	local02, #1
01f50     01 20 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     80 01 00 FF 
01f5c     1B 25 06 F6 | 	mov	local04, ##@LR__5021
01f60     F2 24 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 3E 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 20 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     10 27 02 F6 | 	mov	local05, local02
01f78     03 26 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 26 02 F1 | 	add	local05, objptr
01f88     13 13 02 FB | 	rdlong	arg01, local05
01f8c     80 01 00 FF 
01f90     1D 15 06 F6 | 	mov	arg02, ##@LR__5022
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     B8 E8 B1 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 20 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     10 45 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     10 31 02 F6 | 	mov	local10, local02
01fb4     01 30 06 F1 | 	add	local10, #1
01fb8     03 30 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 30 02 F1 | 	add	local10, objptr
01fc8     18 43 02 FB | 	rdlong	local19, local10
01fcc     22 31 02 F6 | 	mov	local10, local20
01fd0     03 30 66 F0 | 	shl	local10, #3
01fd4     F2 30 02 F1 | 	add	local10, objptr
01fd8     22 33 02 F6 | 	mov	local11, local20
01fdc     19 39 02 F6 | 	mov	local14, local11
01fe0     03 38 66 F0 | 	shl	local14, #3
01fe4     F2 38 02 F1 | 	add	local14, objptr
01fe8     1C 13 02 FB | 	rdlong	arg01, local14
01fec     21 35 02 F6 | 	mov	local12, local19
01ff0     1A 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     8C E8 B1 FD | 	call	#__system___string_concat
02000     18 FB 61 FC | 	wrlong	result1, local10
02004     10 3B 02 F6 | 	mov	local15, local02
02008     01 3A 06 F1 | 	add	local15, #1
0200c     1F 47 02 F6 | 	mov	local21, local17
02010     01 46 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     23 3B 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     1D 27 02 F6 | 	mov	local05, local15
02024     01 26 06 F1 | 	add	local05, #1
02028     03 26 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 26 02 F1 | 	add	local05, objptr
02038     13 25 02 FB | 	rdlong	local04, local05
0203c     1D 29 02 F6 | 	mov	local06, local15
02040     01 28 06 F1 | 	add	local06, #1
02044     03 28 66 F0 | 	shl	local06, #3
02048     F2 28 02 F1 | 	add	local06, objptr
0204c     04 28 06 F1 | 	add	local06, #4
02050     14 23 02 FB | 	rdlong	local03, local06
02054     1D 29 02 F6 | 	mov	local06, local15
02058     03 28 66 F0 | 	shl	local06, #3
0205c     F2 34 02 F6 | 	mov	local12, objptr
02060     F2 28 02 F1 | 	add	local06, objptr
02064     14 25 62 FC | 	wrlong	local04, local06
02068     1D 33 02 F6 | 	mov	local11, local15
0206c     19 37 02 F6 | 	mov	local13, local11
02070     03 36 66 F0 | 	shl	local13, #3
02074     F2 36 02 F1 | 	add	local13, objptr
02078     04 36 06 F1 | 	add	local13, #4
0207c     1B 23 62 FC | 	wrlong	local03, local13
02080     01 3A 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 3E 86 F1 | 	sub	local17, #1
02094     80 01 00 FF 
02098     1F 15 06 F6 | 	mov	arg02, ##@LR__5023
0209c     21 13 02 F6 | 	mov	arg01, local19
020a0     B4 E7 B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     80 01 00 FF 
020b4     21 15 06 F6 | 	mov	arg02, ##@LR__5024
020b8     21 13 02 F6 | 	mov	arg01, local19
020bc     98 E7 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 3E 06 51 |  if_ne	add	local17, #1
020c8     01 20 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     1F 21 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 20 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     10 27 02 F6 | 	mov	local05, local02
020dc     03 26 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 28 02 F6 | 	mov	local06, objptr
020ec     F2 26 02 F1 | 	add	local05, objptr
020f0     13 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     30 08 B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     80 01 00 FF 
0210c     23 15 06 F6 | 	mov	arg02, ##@LR__5025
02110     44 E7 B1 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     10 29 02 F6 | 	mov	local06, local02
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 34 02 F6 | 	mov	local12, objptr
02134     F2 28 02 F1 | 	add	local06, objptr
02138     14 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     60 07 B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     80 01 00 FF 
02154     25 15 06 F6 | 	mov	arg02, ##@LR__5026
02158     FC E6 B1 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     10 31 02 F6 | 	mov	local10, local02
02168     03 30 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 30 02 F1 | 	add	local10, objptr
02178     10 39 02 F6 | 	mov	local14, local02
0217c     03 38 66 F0 | 	shl	local14, #3
02180     F2 38 02 F1 | 	add	local14, objptr
02184     1C 29 02 FB | 	rdlong	local06, local14
02188     10 37 02 F6 | 	mov	local13, local02
0218c     01 36 06 F1 | 	add	local13, #1
02190     03 36 66 F0 | 	shl	local13, #3
02194     F2 36 02 F1 | 	add	local13, objptr
02198     1B 35 02 FB | 	rdlong	local12, local13
0219c     10 49 02 F6 | 	mov	local22, local02
021a0     01 48 06 F1 | 	add	local22, #1
021a4     24 4B 02 F6 | 	mov	local23, local22
021a8     03 4A 66 F0 | 	shl	local23, #3
021ac     F2 4C 02 F6 | 	mov	local24, objptr
021b0     F2 4A 02 F1 | 	add	local23, objptr
021b4     25 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 2B 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 2A 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 2B 82 F1 | 	sub	local07, arg01
021d8     15 33 02 F6 | 	mov	local11, local07
021dc     01 32 86 F1 | 	sub	local11, #1
021e0     1A 13 02 F6 | 	mov	arg01, local12
021e4     19 15 02 F6 | 	mov	arg02, local11
021e8     48 07 B2 FD | 	call	#__system__Right_S
021ec     FD 34 02 F6 | 	mov	local12, result1
021f0     14 13 02 F6 | 	mov	arg01, local06
021f4     1A 15 02 F6 | 	mov	arg02, local12
021f8     90 E6 B1 FD | 	call	#__system___string_concat
021fc     FD 28 02 F6 | 	mov	local06, result1
02200     18 29 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     10 3B 02 F6 | 	mov	local15, local02
02208     01 3A 06 F1 | 	add	local15, #1
0220c     1F 4F 02 F6 | 	mov	local25, local17
02210     01 4E 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     27 3B 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     1D 27 02 F6 | 	mov	local05, local15
02224     01 26 06 F1 | 	add	local05, #1
02228     03 26 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 26 02 F1 | 	add	local05, objptr
02238     13 25 02 FB | 	rdlong	local04, local05
0223c     1D 29 02 F6 | 	mov	local06, local15
02240     01 28 06 F1 | 	add	local06, #1
02244     03 28 66 F0 | 	shl	local06, #3
02248     F2 28 02 F1 | 	add	local06, objptr
0224c     04 28 06 F1 | 	add	local06, #4
02250     14 23 02 FB | 	rdlong	local03, local06
02254     1D 29 02 F6 | 	mov	local06, local15
02258     03 28 66 F0 | 	shl	local06, #3
0225c     F2 34 02 F6 | 	mov	local12, objptr
02260     F2 28 02 F1 | 	add	local06, objptr
02264     14 25 62 FC | 	wrlong	local04, local06
02268     1D 33 02 F6 | 	mov	local11, local15
0226c     19 37 02 F6 | 	mov	local13, local11
02270     03 36 66 F0 | 	shl	local13, #3
02274     F2 36 02 F1 | 	add	local13, objptr
02278     04 36 06 F1 | 	add	local13, #4
0227c     1B 23 62 FC | 	wrlong	local03, local13
02280     01 3A 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 20 86 F1 | 	sub	local02, #1
02294     01 3E 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 20 06 F1 | 	add	local02, #1
0229c     1F 21 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 20 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     10 31 02 F6 | 	mov	local10, local02
022ac     03 30 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 30 02 F1 | 	add	local10, objptr
022bc     18 51 02 FB | 	rdlong	local26, local10
022c0     10 31 02 F6 | 	mov	local10, local02
022c4     01 30 06 F1 | 	add	local10, #1
022c8     03 30 66 F0 | 	shl	local10, #3
022cc     F2 30 02 F1 | 	add	local10, objptr
022d0     18 53 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     80 01 00 FF 
022d8     27 15 06 F6 | 	mov	arg02, ##@LR__5027
022dc     28 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     6C E5 B1 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     80 01 00 FF 
022f8     29 15 06 F6 | 	mov	arg02, ##@LR__5028
022fc     28 13 02 F6 | 	mov	arg01, local26
02300     54 E5 B1 FD | 	call	#__system___string_cmp
02304     FD 22 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     80 01 00 FF 
02310     2B 29 06 F6 | 	mov	local06, ##@LR__5029
02314     28 13 02 F6 | 	mov	arg01, local26
02318     14 15 02 F6 | 	mov	arg02, local06
0231c     38 E5 B1 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     80 01 00 FF 
0232c     2D 35 06 F6 | 	mov	local12, ##@LR__5030
02330     28 13 02 F6 | 	mov	arg01, local26
02334     1A 15 02 F6 | 	mov	arg02, local12
02338     1C E5 B1 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     80 01 00 FF 
02348     2F 33 06 F6 | 	mov	local11, ##@LR__5031
0234c     19 35 02 F6 | 	mov	local12, local11
02350     28 13 02 F6 | 	mov	arg01, local26
02354     1A 15 02 F6 | 	mov	arg02, local12
02358     FC E4 B1 FD | 	call	#__system___string_cmp
0235c     FD 28 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     80 01 00 FF 
02368     31 33 06 F6 | 	mov	local11, ##@LR__5032
0236c     28 13 02 F6 | 	mov	arg01, local26
02370     19 15 02 F6 | 	mov	arg02, local11
02374     E0 E4 B1 FD | 	call	#__system___string_cmp
02378     FD 34 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     80 01 00 FF 
02384     33 39 06 F6 | 	mov	local14, ##@LR__5033
02388     28 13 02 F6 | 	mov	arg01, local26
0238c     1C 15 02 F6 | 	mov	arg02, local14
02390     C4 E4 B1 FD | 	call	#__system___string_cmp
02394     FD 32 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     80 01 00 FF 
023a0     35 55 06 F6 | 	mov	local28, ##@LR__5034
023a4     2A 37 02 F6 | 	mov	local13, local28
023a8     29 13 02 F6 | 	mov	arg01, local27
023ac     1B 15 02 F6 | 	mov	arg02, local13
023b0     A4 E4 B1 FD | 	call	#__system___string_cmp
023b4     FD 38 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     80 01 00 FF 
023c0     37 55 06 F6 | 	mov	local28, ##@LR__5035
023c4     28 13 02 F6 | 	mov	arg01, local26
023c8     2A 15 02 F6 | 	mov	arg02, local28
023cc     88 E4 B1 FD | 	call	#__system___string_cmp
023d0     FD 36 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     80 01 00 FF 
023dc     39 4B 06 F6 | 	mov	local23, ##@LR__5036
023e0     25 49 02 F6 | 	mov	local22, local23
023e4     29 13 02 F6 | 	mov	arg01, local27
023e8     24 15 02 F6 | 	mov	arg02, local22
023ec     68 E4 B1 FD | 	call	#__system___string_cmp
023f0     FD 54 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     80 01 00 FF 
023fc     3B 4B 06 F6 | 	mov	local23, ##@LR__5037
02400     28 13 02 F6 | 	mov	arg01, local26
02404     25 15 02 F6 | 	mov	arg02, local23
02408     4C E4 B1 FD | 	call	#__system___string_cmp
0240c     FD 48 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     80 01 00 FF 
02418     3D 57 06 F6 | 	mov	local29, ##@LR__5038
0241c     2B 4D 02 F6 | 	mov	local24, local29
02420     29 13 02 F6 | 	mov	arg01, local27
02424     26 15 02 F6 | 	mov	arg02, local24
02428     2C E4 B1 FD | 	call	#__system___string_cmp
0242c     FD 4A 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     80 01 00 FF 
02438     3F 59 06 F6 | 	mov	local30, ##@LR__5039
0243c     2C 57 02 F6 | 	mov	local29, local30
02440     28 13 02 F6 | 	mov	arg01, local26
02444     2B 15 02 F6 | 	mov	arg02, local29
02448     0C E4 B1 FD | 	call	#__system___string_cmp
0244c     FD 4C 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     80 01 00 FF 
02458     41 5B 06 F6 | 	mov	local31, ##@LR__5040
0245c     2D 59 02 F6 | 	mov	local30, local31
02460     29 13 02 F6 | 	mov	arg01, local27
02464     2C 15 02 F6 | 	mov	arg02, local30
02468     EC E3 B1 FD | 	call	#__system___string_cmp
0246c     FD 56 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     10 31 02 F6 | 	mov	local10, local02
02478     03 30 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 30 02 F1 | 	add	local10, objptr
02488     29 35 02 F6 | 	mov	local12, local27
0248c     28 13 02 F6 | 	mov	arg01, local26
02490     1A 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     EC E3 B1 FD | 	call	#__system___string_concat
024a0     18 FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     10 3B 02 F6 | 	mov	local15, local02
024a8     01 3A 06 F1 | 	add	local15, #1
024ac     1F 5D 02 F6 | 	mov	local32, local17
024b0     01 5C 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     2E 3B 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     1D 27 02 F6 | 	mov	local05, local15
024c4     01 26 06 F1 | 	add	local05, #1
024c8     03 26 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 26 02 F1 | 	add	local05, objptr
024d8     13 25 02 FB | 	rdlong	local04, local05
024dc     1D 29 02 F6 | 	mov	local06, local15
024e0     01 28 06 F1 | 	add	local06, #1
024e4     03 28 66 F0 | 	shl	local06, #3
024e8     F2 28 02 F1 | 	add	local06, objptr
024ec     04 28 06 F1 | 	add	local06, #4
024f0     14 23 02 FB | 	rdlong	local03, local06
024f4     1D 29 02 F6 | 	mov	local06, local15
024f8     03 28 66 F0 | 	shl	local06, #3
024fc     F2 34 02 F6 | 	mov	local12, objptr
02500     F2 28 02 F1 | 	add	local06, objptr
02504     14 25 62 FC | 	wrlong	local04, local06
02508     1D 33 02 F6 | 	mov	local11, local15
0250c     19 39 02 F6 | 	mov	local14, local11
02510     1C 37 02 F6 | 	mov	local13, local14
02514     03 36 66 F0 | 	shl	local13, #3
02518     F2 54 02 F6 | 	mov	local28, objptr
0251c     F2 36 02 F1 | 	add	local13, objptr
02520     04 36 06 F1 | 	add	local13, #4
02524     1B 23 62 FC | 	wrlong	local03, local13
02528     04 36 86 F1 | 	sub	local13, #4
0252c     01 3A 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 20 86 F1 | 	sub	local02, #1
02540     01 3E 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 20 06 F1 | 	add	local02, #1
02548     1F 21 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 20 06 F6 | 	mov	local02, #0
02554     1F 5F 02 F6 | 	mov	local33, local17
02558     01 5E 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     2F 21 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     10 31 02 F6 | 	mov	local10, local02
02568     03 30 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 30 02 F1 | 	add	local10, objptr
02578     10 35 02 F6 | 	mov	local12, local02
0257c     1A 33 02 F6 | 	mov	local11, local12
02580     19 39 02 F6 | 	mov	local14, local11
02584     03 38 66 F0 | 	shl	local14, #3
02588     F2 36 02 F6 | 	mov	local13, objptr
0258c     F2 38 02 F1 | 	add	local14, objptr
02590     1C 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     9C 07 B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     D4 06 B2 FD | 	call	#__system__LTrim_S
025a8     18 FB 61 FC | 	wrlong	result1, local10
025ac     01 20 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 20 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     10 27 02 F6 | 	mov	local05, local02
025c0     03 26 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 26 02 F1 | 	add	local05, objptr
025d0     13 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 2B 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     15 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 2A 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 2B 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     1F 25 02 F6 | 	mov	local04, local17
025f8     01 24 86 F1 | 	sub	local04, #1
025fc     12 21 0A F2 | 	cmp	local02, local04 wz
02600     01 3E 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     1F 25 02 F6 | 	mov	local04, local17
0260c     01 24 86 F1 | 	sub	local04, #1
02610     12 21 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     10 3B 02 F6 | 	mov	local15, local02
0261c     1F 61 02 F6 | 	mov	local34, local17
02620     01 60 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     30 3B 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     1D 27 02 F6 | 	mov	local05, local15
02630     01 26 06 F1 | 	add	local05, #1
02634     03 26 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 26 02 F1 | 	add	local05, objptr
02644     13 25 02 FB | 	rdlong	local04, local05
02648     1D 29 02 F6 | 	mov	local06, local15
0264c     01 28 06 F1 | 	add	local06, #1
02650     03 28 66 F0 | 	shl	local06, #3
02654     F2 28 02 F1 | 	add	local06, objptr
02658     04 28 06 F1 | 	add	local06, #4
0265c     14 23 02 FB | 	rdlong	local03, local06
02660     1D 31 02 F6 | 	mov	local10, local15
02664     18 29 02 F6 | 	mov	local06, local10
02668     03 28 66 F0 | 	shl	local06, #3
0266c     F2 34 02 F6 | 	mov	local12, objptr
02670     F2 28 02 F1 | 	add	local06, objptr
02674     14 25 62 FC | 	wrlong	local04, local06
02678     1D 33 02 F6 | 	mov	local11, local15
0267c     19 39 02 F6 | 	mov	local14, local11
02680     1C 37 02 F6 | 	mov	local13, local14
02684     03 36 66 F0 | 	shl	local13, #3
02688     F2 54 02 F6 | 	mov	local28, objptr
0268c     F2 36 02 F1 | 	add	local13, objptr
02690     04 36 06 F1 | 	add	local13, #4
02694     1B 23 62 FC | 	wrlong	local03, local13
02698     04 36 86 F1 | 	sub	local13, #4
0269c     01 3A 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 3E 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 20 56 F2 | 	cmps	local02, #1 wc
026b4     01 20 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 20 06 F1 | 	add	local02, #1
026bc     1F 25 02 F6 | 	mov	local04, local17
026c0     01 24 86 F1 | 	sub	local04, #1
026c4     12 21 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 3A 06 F6 | 	mov	local15, #0
026d0     1F 63 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     31 3B 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     1D 27 02 F6 | 	mov	local05, local15
026e0     03 26 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 26 02 F1 | 	add	local05, objptr
026f0     13 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     A8 01 B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     80 01 00 FF 
0270c     43 15 06 F6 | 	mov	arg02, ##@LR__5041
02710     44 E1 B1 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     1D 29 02 F6 | 	mov	local06, local15
02720     03 28 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 34 02 F6 | 	mov	local12, objptr
02730     F2 28 02 F1 | 	add	local06, objptr
02734     14 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     EC 01 B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     80 01 00 FF 
02750     45 15 06 F6 | 	mov	arg02, ##@LR__5042
02754     00 E1 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     1D 31 02 F6 | 	mov	local10, local15
02764     03 30 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 30 02 F1 | 	add	local10, objptr
02774     1D 33 02 F6 | 	mov	local11, local15
02778     19 39 02 F6 | 	mov	local14, local11
0277c     03 38 66 F0 | 	shl	local14, #3
02780     F2 36 02 F6 | 	mov	local13, objptr
02784     F2 38 02 F1 | 	add	local14, objptr
02788     1C 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     24 04 B2 FD | 	call	#__system__LCase_S
02798     18 FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 3A 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 20 06 F6 | 	mov	local02, #0
027a8     1F 65 02 F6 | 	mov	local36, local17
027ac     01 64 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     32 21 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     10 31 02 F6 | 	mov	local10, local02
027c0     03 30 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 30 02 F1 | 	add	local10, objptr
027d0     04 30 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     18 FF 6B FC | 	wrlong	##-1, local10
027dc     01 20 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     F4 3C B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 66 06 56 |  if_ne	mov	local37, #1
0280c     00 66 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     80 01 00 FF 
02828     47 15 06 F6 | 	mov	arg02, ##@LR__5043
0282c     28 E0 B1 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 66 06 A6 |  if_e	mov	local37, #1
02838     00 20 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     80 01 00 FF 
02858     4C 15 06 F6 | 	mov	arg02, ##@LR__5044
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     F0 DF B1 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 20 06 F1 | 	add	local02, #1
02874     1F 21 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     1F 21 52 F2 | 	cmps	local02, local17 wc
02880     10 67 02 C6 |  if_b	mov	local37, local02
02884     01 66 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     33 29 02 F6 | 	mov	local06, local37
02894     03 28 66 F0 | 	shl	local06, #3
02898     F2 34 02 F6 | 	mov	local12, objptr
0289c     F2 28 02 F1 | 	add	local06, objptr
028a0     14 15 02 FB | 	rdlong	arg02, local06
028a4     80 01 00 FF 
028a8     51 17 06 F6 | 	mov	arg03, ##@LR__5045
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     38 05 B2 FD | 	call	#__system__Instr
028bc     FD 68 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 68 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     33 27 02 F6 | 	mov	local05, local37
028cc     03 26 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 26 02 F1 | 	add	local05, objptr
028dc     13 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 2B 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     15 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 2A 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 2B 82 F1 | 	sub	local07, arg01
02900     15 69 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 3E 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     1F 21 02 F6 | 	mov	local02, local17
02910     33 6B 02 F6 | 	mov	local39, local37
02914     01 6A 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     10 27 02 F6 | 	mov	local05, local02
02928     01 26 86 F1 | 	sub	local05, #1
0292c     03 26 66 F0 | 	shl	local05, #3
02930     F2 26 02 F1 | 	add	local05, objptr
02934     13 25 02 FB | 	rdlong	local04, local05
02938     10 29 02 F6 | 	mov	local06, local02
0293c     01 28 86 F1 | 	sub	local06, #1
02940     03 28 66 F0 | 	shl	local06, #3
02944     F2 28 02 F1 | 	add	local06, objptr
02948     04 28 06 F1 | 	add	local06, #4
0294c     14 23 02 FB | 	rdlong	local03, local06
02950     10 29 02 F6 | 	mov	local06, local02
02954     03 28 66 F0 | 	shl	local06, #3
02958     F2 28 02 F1 | 	add	local06, objptr
0295c     14 25 62 FC | 	wrlong	local04, local06
02960     10 37 02 F6 | 	mov	local13, local02
02964     03 36 66 F0 | 	shl	local13, #3
02968     F2 36 02 F1 | 	add	local13, objptr
0296c     04 36 06 F1 | 	add	local13, #4
02970     1B 23 62 FC | 	wrlong	local03, local13
02974     01 20 86 F1 | 	sub	local02, #1
02978     35 21 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     33 31 02 F6 | 	mov	local10, local37
02984     01 30 06 F1 | 	add	local10, #1
02988     03 30 66 F0 | 	shl	local10, #3
0298c     F2 30 02 F1 | 	add	local10, objptr
02990     33 39 02 F6 | 	mov	local14, local37
02994     03 38 66 F0 | 	shl	local14, #3
02998     F2 38 02 F1 | 	add	local14, objptr
0299c     1C 29 02 FB | 	rdlong	local06, local14
029a0     33 55 02 F6 | 	mov	local28, local37
029a4     2A 49 02 F6 | 	mov	local22, local28
029a8     03 48 66 F0 | 	shl	local22, #3
029ac     F2 4A 02 F6 | 	mov	local23, objptr
029b0     F2 48 02 F1 | 	add	local22, objptr
029b4     24 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 2B 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 2A 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 2B 82 F1 | 	sub	local07, arg01
029d8     15 15 02 F6 | 	mov	arg02, local07
029dc     34 15 82 F1 | 	sub	arg02, local38
029e0     14 13 02 F6 | 	mov	arg01, local06
029e4     4C FF B1 FD | 	call	#__system__Right_S
029e8     18 FB 61 FC | 	wrlong	result1, local10
029ec     33 31 02 F6 | 	mov	local10, local37
029f0     03 30 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 30 02 F1 | 	add	local10, objptr
02a00     33 33 02 F6 | 	mov	local11, local37
02a04     19 39 02 F6 | 	mov	local14, local11
02a08     03 38 66 F0 | 	shl	local14, #3
02a0c     F2 36 02 F6 | 	mov	local13, objptr
02a10     F2 38 02 F1 | 	add	local14, objptr
02a14     1C 13 02 FB | 	rdlong	arg01, local14
02a18     34 35 02 F6 | 	mov	local12, local38
02a1c     1A 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     80 FE B1 FD | 	call	#__system__Left_S
02a2c     18 FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     33 27 02 F6 | 	mov	local05, local37
02a34     03 26 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 26 02 F1 | 	add	local05, objptr
02a44     13 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     54 FE B1 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     80 01 00 FF 
02a60     53 15 06 F6 | 	mov	arg02, ##@LR__5046
02a64     F0 DD B1 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     33 29 02 F6 | 	mov	local06, local37
02a74     03 28 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 34 02 F6 | 	mov	local12, objptr
02a84     F2 28 02 F1 | 	add	local06, objptr
02a88     14 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 2B 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 2A 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 2B 82 F1 | 	sub	local07, arg01
02aac     02 2A 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 3E 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     1F 21 02 F6 | 	mov	local02, local17
02abc     33 6D 02 F6 | 	mov	local40, local37
02ac0     01 6C 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     10 27 02 F6 | 	mov	local05, local02
02ad4     01 26 86 F1 | 	sub	local05, #1
02ad8     03 26 66 F0 | 	shl	local05, #3
02adc     F2 26 02 F1 | 	add	local05, objptr
02ae0     13 25 02 FB | 	rdlong	local04, local05
02ae4     10 29 02 F6 | 	mov	local06, local02
02ae8     01 28 86 F1 | 	sub	local06, #1
02aec     03 28 66 F0 | 	shl	local06, #3
02af0     F2 28 02 F1 | 	add	local06, objptr
02af4     04 28 06 F1 | 	add	local06, #4
02af8     14 23 02 FB | 	rdlong	local03, local06
02afc     10 29 02 F6 | 	mov	local06, local02
02b00     03 28 66 F0 | 	shl	local06, #3
02b04     F2 28 02 F1 | 	add	local06, objptr
02b08     14 25 62 FC | 	wrlong	local04, local06
02b0c     10 37 02 F6 | 	mov	local13, local02
02b10     03 36 66 F0 | 	shl	local13, #3
02b14     F2 36 02 F1 | 	add	local13, objptr
02b18     04 36 06 F1 | 	add	local13, #4
02b1c     1B 23 62 FC | 	wrlong	local03, local13
02b20     01 20 86 F1 | 	sub	local02, #1
02b24     36 21 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     33 31 02 F6 | 	mov	local10, local37
02b30     01 30 06 F1 | 	add	local10, #1
02b34     03 30 66 F0 | 	shl	local10, #3
02b38     F2 30 02 F1 | 	add	local10, objptr
02b3c     33 39 02 F6 | 	mov	local14, local37
02b40     03 38 66 F0 | 	shl	local14, #3
02b44     F2 38 02 F1 | 	add	local14, objptr
02b48     1C 29 02 FB | 	rdlong	local06, local14
02b4c     33 37 02 F6 | 	mov	local13, local37
02b50     1B 55 02 F6 | 	mov	local28, local13
02b54     2A 49 02 F6 | 	mov	local22, local28
02b58     03 48 66 F0 | 	shl	local22, #3
02b5c     F2 4A 02 F6 | 	mov	local23, objptr
02b60     F2 48 02 F1 | 	add	local22, objptr
02b64     24 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 2B 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     15 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 2A 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 2B 82 F1 | 	sub	local07, arg01
02b88     15 39 02 F6 | 	mov	local14, local07
02b8c     1C 33 02 F6 | 	mov	local11, local14
02b90     01 32 86 F1 | 	sub	local11, #1
02b94     19 35 02 F6 | 	mov	local12, local11
02b98     14 13 02 F6 | 	mov	arg01, local06
02b9c     1A 15 02 F6 | 	mov	arg02, local12
02ba0     90 FD B1 FD | 	call	#__system__Right_S
02ba4     18 FB 61 FC | 	wrlong	result1, local10
02ba8     33 31 02 F6 | 	mov	local10, local37
02bac     03 30 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 30 02 F1 | 	add	local10, objptr
02bbc     80 01 00 FF 
02bc0     55 29 06 F6 | 	mov	local06, ##@LR__5047
02bc4     18 29 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     33 31 02 F6 | 	mov	local10, local37
02bd4     03 30 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 30 02 F1 | 	add	local10, objptr
02be4     18 6F 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     80 01 00 FF 
02bec     57 15 06 F6 | 	mov	arg02, ##@LR__5048
02bf0     37 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     58 DC B1 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     80 01 00 FF 
02c0c     5D 15 06 F6 | 	mov	arg02, ##@LR__5049
02c10     37 13 02 F6 | 	mov	arg01, local41
02c14     40 DC B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     80 01 00 FF 
02c24     64 15 06 F6 | 	mov	arg02, ##@LR__5050
02c28     37 13 02 F6 | 	mov	arg01, local41
02c2c     28 DC B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     33 27 02 F6 | 	mov	local05, local37
02c3c     01 26 06 F1 | 	add	local05, #1
02c40     03 26 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     13 13 02 FB | 	rdlong	arg01, local05
02c54     80 01 00 FF 
02c58     6A 15 06 F6 | 	mov	arg02, ##@LR__5051
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     F0 DB B1 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     33 31 02 F6 | 	mov	local10, local37
02c74     01 30 06 F1 | 	add	local10, #1
02c78     03 30 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 30 02 F1 | 	add	local10, objptr
02c88     80 01 00 FF 
02c8c     6D 29 06 F6 | 	mov	local06, ##@LR__5052
02c90     18 29 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     33 27 02 F6 | 	mov	local05, local37
02cac     01 26 06 F1 | 	add	local05, #1
02cb0     03 26 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 26 02 F1 | 	add	local05, objptr
02cc0     13 13 02 FB | 	rdlong	arg01, local05
02cc4     80 01 00 FF 
02cc8     6F 15 06 F6 | 	mov	arg02, ##@LR__5053
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     80 DB B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     33 31 02 F6 | 	mov	local10, local37
02ce4     01 30 06 F1 | 	add	local10, #1
02ce8     03 30 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 30 02 F1 | 	add	local10, objptr
02cf8     80 01 00 FF 
02cfc     73 29 06 F6 | 	mov	local06, ##@LR__5054
02d00     18 29 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     80 01 00 FF 
02d1c     75 15 06 F6 | 	mov	arg02, ##@LR__5055
02d20     37 13 02 F6 | 	mov	arg01, local41
02d24     30 DB B1 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     80 01 00 FF 
02d34     7A 15 06 F6 | 	mov	arg02, ##@LR__5056
02d38     37 13 02 F6 | 	mov	arg01, local41
02d3c     18 DB B1 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     33 27 02 F6 | 	mov	local05, local37
02d4c     01 26 06 F1 | 	add	local05, #1
02d50     03 26 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 26 02 F1 | 	add	local05, objptr
02d60     13 13 02 FB | 	rdlong	arg01, local05
02d64     80 01 00 FF 
02d68     7D 15 06 F6 | 	mov	arg02, ##@LR__5057
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     E0 DA B1 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     33 31 02 F6 | 	mov	local10, local37
02d84     01 30 06 F1 | 	add	local10, #1
02d88     03 30 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 30 02 F1 | 	add	local10, objptr
02d98     80 01 00 FF 
02d9c     83 29 06 F6 | 	mov	local06, ##@LR__5058
02da0     18 29 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     33 27 02 F6 | 	mov	local05, local37
02db0     01 26 06 F1 | 	add	local05, #1
02db4     03 26 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 26 02 F1 | 	add	local05, objptr
02dc4     13 13 02 FB | 	rdlong	arg01, local05
02dc8     80 01 00 FF 
02dcc     85 15 06 F6 | 	mov	arg02, ##@LR__5059
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     7C DA B1 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     33 31 02 F6 | 	mov	local10, local37
02de8     01 30 06 F1 | 	add	local10, #1
02dec     03 30 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 30 02 F1 | 	add	local10, objptr
02dfc     80 01 00 FF 
02e00     8E 29 06 F6 | 	mov	local06, ##@LR__5060
02e04     18 29 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     33 27 02 F6 | 	mov	local05, local37
02e14     01 26 06 F1 | 	add	local05, #1
02e18     03 26 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 26 02 F1 | 	add	local05, objptr
02e28     13 13 02 FB | 	rdlong	arg01, local05
02e2c     80 01 00 FF 
02e30     90 15 06 F6 | 	mov	arg02, ##@LR__5061
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     18 DA B1 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     33 31 02 F6 | 	mov	local10, local37
02e4c     01 30 06 F1 | 	add	local10, #1
02e50     03 30 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 30 02 F1 | 	add	local10, objptr
02e60     80 01 00 FF 
02e64     99 29 06 F6 | 	mov	local06, ##@LR__5062
02e68     18 29 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     33 27 02 F6 | 	mov	local05, local37
02e78     01 26 06 F1 | 	add	local05, #1
02e7c     03 26 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 26 02 F1 | 	add	local05, objptr
02e8c     13 13 02 FB | 	rdlong	arg01, local05
02e90     80 01 00 FF 
02e94     9B 15 06 F6 | 	mov	arg02, ##@LR__5063
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     B4 D9 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     33 31 02 F6 | 	mov	local10, local37
02eb0     01 30 06 F1 | 	add	local10, #1
02eb4     03 30 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 30 02 F1 | 	add	local10, objptr
02ec4     80 01 00 FF 
02ec8     A4 29 06 F6 | 	mov	local06, ##@LR__5064
02ecc     18 29 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     33 27 02 F6 | 	mov	local05, local37
02edc     01 26 06 F1 | 	add	local05, #1
02ee0     03 26 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 26 02 F1 | 	add	local05, objptr
02ef0     13 13 02 FB | 	rdlong	arg01, local05
02ef4     80 01 00 FF 
02ef8     A6 15 06 F6 | 	mov	arg02, ##@LR__5065
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     50 D9 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     33 31 02 F6 | 	mov	local10, local37
02f14     01 30 06 F1 | 	add	local10, #1
02f18     03 30 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 30 02 F1 | 	add	local10, objptr
02f28     80 01 00 FF 
02f2c     A9 29 06 F6 | 	mov	local06, ##@LR__5066
02f30     18 29 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 20 06 F6 | 	mov	local02, #0
02f40     1F 71 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     38 21 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     10 31 02 F6 | 	mov	local10, local02
02f50     03 30 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 30 02 F1 | 	add	local10, objptr
02f60     10 33 02 F6 | 	mov	local11, local02
02f64     19 39 02 F6 | 	mov	local14, local11
02f68     1C 37 02 F6 | 	mov	local13, local14
02f6c     03 36 66 F0 | 	shl	local13, #3
02f70     F2 36 02 F1 | 	add	local13, objptr
02f74     1B 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     70 15 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 30 06 F1 | 	add	local10, #4
02f8c     18 FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     10 31 02 F6 | 	mov	local10, local02
02f94     03 30 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 30 02 F1 | 	add	local10, objptr
02fa4     04 30 06 F1 | 	add	local10, #4
02fa8     18 35 02 FB | 	rdlong	local12, local10
02fac     01 34 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     10 31 02 F6 | 	mov	local10, local02
02fc0     03 30 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 30 02 F1 | 	add	local10, objptr
02fd0     10 33 02 F6 | 	mov	local11, local02
02fd4     19 39 02 F6 | 	mov	local14, local11
02fd8     1C 37 02 F6 | 	mov	local13, local14
02fdc     03 36 66 F0 | 	shl	local13, #3
02fe0     F2 36 02 F1 | 	add	local13, objptr
02fe4     1B 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     4C 0D B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 30 06 F1 | 	add	local10, #4
02ffc     18 FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     10 31 02 F6 | 	mov	local10, local02
03004     03 30 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 30 02 F1 | 	add	local10, objptr
03014     04 30 06 F1 | 	add	local10, #4
03018     18 35 02 FB | 	rdlong	local12, local10
0301c     01 34 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     10 31 02 F6 | 	mov	local10, local02
03030     03 30 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 30 02 F1 | 	add	local10, objptr
03040     10 33 02 F6 | 	mov	local11, local02
03044     19 39 02 F6 | 	mov	local14, local11
03048     1C 37 02 F6 | 	mov	local13, local14
0304c     03 36 66 F0 | 	shl	local13, #3
03050     F2 36 02 F1 | 	add	local13, objptr
03054     1B 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     81 01 00 FF 
03064     7E 14 06 F6 | 	mov	arg02, ##@LR__5143
03068     EC D7 B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 30 06 F1 | 	add	local10, #4
03080     18 FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     10 31 02 F6 | 	mov	local10, local02
03088     03 30 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 30 02 F1 | 	add	local10, objptr
03098     04 30 06 F1 | 	add	local10, #4
0309c     18 35 02 FB | 	rdlong	local12, local10
030a0     01 34 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     10 31 02 F6 | 	mov	local10, local02
030b4     03 30 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 30 02 F1 | 	add	local10, objptr
030c4     10 33 02 F6 | 	mov	local11, local02
030c8     19 39 02 F6 | 	mov	local14, local11
030cc     1C 37 02 F6 | 	mov	local13, local14
030d0     03 36 66 F0 | 	shl	local13, #3
030d4     F2 36 02 F1 | 	add	local13, objptr
030d8     1B 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     0C 16 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 30 06 F1 | 	add	local10, #4
030f0     18 FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     10 31 02 F6 | 	mov	local10, local02
030f8     03 30 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 30 02 F1 | 	add	local10, objptr
03108     04 30 06 F1 | 	add	local10, #4
0310c     18 35 02 FB | 	rdlong	local12, local10
03110     01 34 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     10 31 02 F6 | 	mov	local10, local02
03124     03 30 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 30 02 F1 | 	add	local10, objptr
03134     10 33 02 F6 | 	mov	local11, local02
03138     19 39 02 F6 | 	mov	local14, local11
0313c     1C 37 02 F6 | 	mov	local13, local14
03140     03 36 66 F0 | 	shl	local13, #3
03144     F2 54 02 F6 | 	mov	local28, objptr
03148     F2 36 02 F1 | 	add	local13, objptr
0314c     1B 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     F8 24 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 30 06 F1 | 	add	local10, #4
03164     18 FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     10 31 02 F6 | 	mov	local10, local02
0316c     03 30 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 30 02 F1 | 	add	local10, objptr
0317c     04 30 06 F1 | 	add	local10, #4
03180     18 35 02 FB | 	rdlong	local12, local10
03184     01 34 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     10 31 02 F6 | 	mov	local10, local02
03198     03 30 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 30 02 F1 | 	add	local10, objptr
031a8     10 33 02 F6 | 	mov	local11, local02
031ac     19 39 02 F6 | 	mov	local14, local11
031b0     03 38 66 F0 | 	shl	local14, #3
031b4     F2 36 02 F6 | 	mov	local13, objptr
031b8     F2 38 02 F1 | 	add	local14, objptr
031bc     1C 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     BC 0F B0 FD | 	call	#_isnotename
031cc     04 30 06 F1 | 	add	local10, #4
031d0     18 FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     10 31 02 F6 | 	mov	local10, local02
031d8     03 30 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 30 02 F1 | 	add	local10, objptr
031e8     04 30 06 F1 | 	add	local10, #4
031ec     18 29 02 FB | 	rdlong	local06, local10
031f0     01 28 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     10 27 02 F6 | 	mov	local05, local02
03204     03 26 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 26 02 F1 | 	add	local05, objptr
03214     04 26 06 F1 | 	add	local05, #4
03218     13 35 02 FB | 	rdlong	local12, local05
0321c     1A 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     F0 33 B0 FD | 	call	#_getnoteval
0322c     FD 72 02 F6 | 	mov	local43, result1
03230     10 31 02 F6 | 	mov	local10, local02
03234     03 30 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 30 02 F1 | 	add	local10, objptr
03244     39 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     50 F8 B1 FD | 	call	#__system__str_S
03254     18 FB 61 FC | 	wrlong	result1, local10
03258     10 25 02 F6 | 	mov	local04, local02
0325c     12 23 02 F6 | 	mov	local03, local04
03260     11 31 02 F6 | 	mov	local10, local03
03264     03 30 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 30 02 F1 | 	add	local10, objptr
03274     04 30 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     18 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     10 31 02 F6 | 	mov	local10, local02
03290     03 30 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 30 02 F1 | 	add	local10, objptr
032a0     10 39 02 F6 | 	mov	local14, local02
032a4     03 38 66 F0 | 	shl	local14, #3
032a8     F2 38 02 F1 | 	add	local14, objptr
032ac     1C 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     64 0D B0 FD | 	call	#_ischannel
032bc     04 30 06 F1 | 	add	local10, #4
032c0     18 FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     10 31 02 F6 | 	mov	local10, local02
032c8     03 30 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 30 02 F1 | 	add	local10, objptr
032d8     04 30 06 F1 | 	add	local10, #4
032dc     18 29 02 FB | 	rdlong	local06, local10
032e0     01 28 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     10 31 02 F6 | 	mov	local10, local02
032f4     03 30 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 30 02 F1 | 	add	local10, objptr
03304     10 33 02 F6 | 	mov	local11, local02
03308     19 39 02 F6 | 	mov	local14, local11
0330c     03 38 66 F0 | 	shl	local14, #3
03310     F2 36 02 F6 | 	mov	local13, objptr
03314     F2 38 02 F1 | 	add	local14, objptr
03318     1C 13 02 FB | 	rdlong	arg01, local14
0331c     01 34 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     04 F6 B1 FD | 	call	#__system__Right_S
03330     18 FB 61 FC | 	wrlong	result1, local10
03334     10 25 02 F6 | 	mov	local04, local02
03338     12 23 02 F6 | 	mov	local03, local04
0333c     11 31 02 F6 | 	mov	local10, local03
03340     03 30 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 30 02 F1 | 	add	local10, objptr
03350     04 30 06 F1 | 	add	local10, #4
03354     18 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     10 31 02 F6 | 	mov	local10, local02
03368     03 30 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 30 02 F1 | 	add	local10, objptr
03378     10 33 02 F6 | 	mov	local11, local02
0337c     19 39 02 F6 | 	mov	local14, local11
03380     03 38 66 F0 | 	shl	local14, #3
03384     F2 36 02 F6 | 	mov	local13, objptr
03388     F2 38 02 F1 | 	add	local14, objptr
0338c     1C 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     6C 0D B0 FD | 	call	#_isconstant
0339c     04 30 06 F1 | 	add	local10, #4
033a0     18 FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     10 31 02 F6 | 	mov	local10, local02
033a8     03 30 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 30 02 F1 | 	add	local10, objptr
033b8     04 30 06 F1 | 	add	local10, #4
033bc     18 35 02 FB | 	rdlong	local12, local10
033c0     01 34 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     10 31 02 F6 | 	mov	local10, local02
033d4     03 30 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 30 02 F1 | 	add	local10, objptr
033e4     10 35 02 F6 | 	mov	local12, local02
033e8     1A 33 02 F6 | 	mov	local11, local12
033ec     19 39 02 F6 | 	mov	local14, local11
033f0     03 38 66 F0 | 	shl	local14, #3
033f4     F2 36 02 F6 | 	mov	local13, objptr
033f8     F2 38 02 F1 | 	add	local14, objptr
033fc     04 38 06 F1 | 	add	local14, #4
03400     1C 13 02 FB | 	rdlong	arg01, local14
03404     04 38 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 74 C6 C9 |  if_b	decod	local44, #31
03418     00 74 06 36 |  if_ae	mov	local44, #0
0341c     C0 FB B1 FD | 	call	#__system___float_fromuns
03420     3A FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     78 F6 B1 FD | 	call	#__system__str_S
0342c     18 FB 61 FC | 	wrlong	result1, local10
03430     10 25 02 F6 | 	mov	local04, local02
03434     12 23 02 F6 | 	mov	local03, local04
03438     11 31 02 F6 | 	mov	local10, local03
0343c     03 30 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 30 02 F1 | 	add	local10, objptr
0344c     04 30 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     18 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     10 27 02 F6 | 	mov	local05, local02
03468     03 26 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 26 02 F1 | 	add	local05, objptr
03478     13 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     E0 29 B0 FD | 	call	#_isnum
03488     FD 76 02 F6 | 	mov	local45, result1
0348c     10 27 02 F6 | 	mov	local05, local02
03490     03 26 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 26 02 F1 | 	add	local05, objptr
034a0     13 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     A4 2D B0 FD | 	call	#_isint
034b0     FD 78 02 F6 | 	mov	local46, result1
034b4     10 27 02 F6 | 	mov	local05, local02
034b8     03 26 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 26 02 F1 | 	add	local05, objptr
034c8     13 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     20 30 B0 FD | 	call	#_isdec
034d8     FD 7A 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 76 0E F2 | 	cmp	local45, #0 wz
034e0     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     10 25 02 F6 | 	mov	local04, local02
034f0     12 23 02 F6 | 	mov	local03, local04
034f4     11 31 02 F6 | 	mov	local10, local03
034f8     03 30 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 30 02 F1 | 	add	local10, objptr
03508     04 30 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     18 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 76 0E F2 | 	cmp	local45, #0 wz
03524     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03528     3D 25 22 56 |  if_ne	not	local04, local47
0352c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     10 25 02 F6 | 	mov	local04, local02
03538     12 23 02 F6 | 	mov	local03, local04
0353c     11 31 02 F6 | 	mov	local10, local03
03540     03 30 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 30 02 F1 | 	add	local10, objptr
03550     04 30 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     18 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 76 0E F2 | 	cmp	local45, #0 wz
0356c     3C 25 22 56 |  if_ne	not	local04, local46
03570     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03574     3D 23 22 56 |  if_ne	not	local03, local47
03578     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     10 25 02 F6 | 	mov	local04, local02
03584     12 23 02 F6 | 	mov	local03, local04
03588     11 31 02 F6 | 	mov	local10, local03
0358c     03 30 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 30 02 F1 | 	add	local10, objptr
0359c     04 30 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     18 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     10 27 02 F6 | 	mov	local05, local02
035b8     03 26 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 26 02 F1 | 	add	local05, objptr
035c8     13 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     E0 2F B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     10 31 02 F6 | 	mov	local10, local02
035e4     03 30 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 30 02 F1 | 	add	local10, objptr
035f4     04 30 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     18 07 68 FC | 	wrlong	##515, local10
03600     10 25 02 F6 | 	mov	local04, local02
03604     12 23 02 F6 | 	mov	local03, local04
03608     11 31 02 F6 | 	mov	local10, local03
0360c     03 30 66 F0 | 	shl	local10, #3
03610     F2 30 02 F1 | 	add	local10, objptr
03614     10 39 02 F6 | 	mov	local14, local02
03618     03 38 66 F0 | 	shl	local14, #3
0361c     F2 38 02 F1 | 	add	local14, objptr
03620     1C 29 02 FB | 	rdlong	local06, local14
03624     02 34 06 F6 | 	mov	local12, #2
03628     10 49 02 F6 | 	mov	local22, local02
0362c     24 4B 02 F6 | 	mov	local23, local22
03630     03 4A 66 F0 | 	shl	local23, #3
03634     F2 4C 02 F6 | 	mov	local24, objptr
03638     F2 4A 02 F1 | 	add	local23, objptr
0363c     25 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 2B 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     15 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 2A 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 2B 82 F1 | 	sub	local07, arg01
03660     15 37 02 F6 | 	mov	local13, local07
03664     1B 39 02 F6 | 	mov	local14, local13
03668     02 38 86 F1 | 	sub	local14, #2
0366c     1C 33 02 F6 | 	mov	local11, local14
03670     14 13 02 F6 | 	mov	arg01, local06
03674     1A 15 02 F6 | 	mov	arg02, local12
03678     19 17 02 F6 | 	mov	arg03, local11
0367c     44 F3 B1 FD | 	call	#__system__Mid_S
03680     18 FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     10 23 02 F6 | 	mov	local03, local02
0368c     11 27 02 F6 | 	mov	local05, local03
03690     03 26 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 26 02 F1 | 	add	local05, objptr
036a0     13 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     44 25 B0 FD | 	call	#_isname
036b0     FD 24 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     10 25 02 F6 | 	mov	local04, local02
036bc     12 23 02 F6 | 	mov	local03, local04
036c0     11 31 02 F6 | 	mov	local10, local03
036c4     03 30 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 30 02 F1 | 	add	local10, objptr
036d4     04 30 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     18 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 20 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     1F 31 02 F6 | 	mov	local10, local17
036f4     03 30 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 30 02 F1 | 	add	local10, objptr
03704     04 30 06 F1 | 	add	local10, #4
03708     18 FD 6B FC | 	wrlong	#510, local10
0370c     1F 31 02 F6 | 	mov	local10, local17
03710     03 30 66 F0 | 	shl	local10, #3
03714     F2 26 02 F6 | 	mov	local05, objptr
03718     F2 30 02 F1 | 	add	local10, objptr
0371c     80 01 00 FF 
03720     AB 29 06 F6 | 	mov	local06, ##@LR__5067
03724     18 29 62 FC | 	wrlong	local06, local10
03728     10 00 00 FF 
0372c     54 E4 05 F1 | 	add	objptr, ##8276
03730     F2 3E 62 FC | 	wrlong	local17, objptr
03734     45 00 00 FF 
03738     60 E4 85 F1 | 	sub	objptr, ##35424
0373c                 | ' 
0373c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0373c                 | ' 
0373c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0373c                 | '  
0373c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
0373c     80 01 00 FF 
03740     AC 31 06 F6 | 	mov	local10, ##@LR__5068
03744     37 13 02 F6 | 	mov	arg01, local41
03748     18 15 02 F6 | 	mov	arg02, local10
0374c     08 D1 B1 FD | 	call	#__system___string_cmp
03750     00 FA 0D F2 | 	cmp	result1, #0 wz
03754     FC 00 90 AD |  if_e	jmp	#LR__0184
03758     80 01 00 FF 
0375c     B1 27 06 F6 | 	mov	local05, ##@LR__5069
03760     13 31 02 F6 | 	mov	local10, local05
03764     37 13 02 F6 | 	mov	arg01, local41
03768     18 15 02 F6 | 	mov	arg02, local10
0376c     E8 D0 B1 FD | 	call	#__system___string_cmp
03770     00 FA 0D F2 | 	cmp	result1, #0 wz
03774     DC 00 90 AD |  if_e	jmp	#LR__0184
03778     80 01 00 FF 
0377c     B6 29 06 F6 | 	mov	local06, ##@LR__5070
03780     14 27 02 F6 | 	mov	local05, local06
03784     37 13 02 F6 | 	mov	arg01, local41
03788     13 15 02 F6 | 	mov	arg02, local05
0378c     C8 D0 B1 FD | 	call	#__system___string_cmp
03790     FD 30 0A F6 | 	mov	local10, result1 wz
03794     BC 00 90 AD |  if_e	jmp	#LR__0184
03798     80 01 00 FF 
0379c     BB 35 06 F6 | 	mov	local12, ##@LR__5071
037a0     1A 29 02 F6 | 	mov	local06, local12
037a4     37 13 02 F6 | 	mov	arg01, local41
037a8     14 15 02 F6 | 	mov	arg02, local06
037ac     A8 D0 B1 FD | 	call	#__system___string_cmp
037b0     FD 26 0A F6 | 	mov	local05, result1 wz
037b4     9C 00 90 AD |  if_e	jmp	#LR__0184
037b8     80 01 00 FF 
037bc     BF 33 06 F6 | 	mov	local11, ##@LR__5072
037c0     19 35 02 F6 | 	mov	local12, local11
037c4     37 13 02 F6 | 	mov	arg01, local41
037c8     1A 15 02 F6 | 	mov	arg02, local12
037cc     88 D0 B1 FD | 	call	#__system___string_cmp
037d0     FD 28 0A F6 | 	mov	local06, result1 wz
037d4     7C 00 90 AD |  if_e	jmp	#LR__0184
037d8     80 01 00 FF 
037dc     C3 39 06 F6 | 	mov	local14, ##@LR__5073
037e0     1C 33 02 F6 | 	mov	local11, local14
037e4     37 13 02 F6 | 	mov	arg01, local41
037e8     19 15 02 F6 | 	mov	arg02, local11
037ec     68 D0 B1 FD | 	call	#__system___string_cmp
037f0     FD 34 0A F6 | 	mov	local12, result1 wz
037f4     5C 00 90 AD |  if_e	jmp	#LR__0184
037f8     80 01 00 FF 
037fc     C6 37 06 F6 | 	mov	local13, ##@LR__5074
03800     1B 39 02 F6 | 	mov	local14, local13
03804     37 13 02 F6 | 	mov	arg01, local41
03808     1C 15 02 F6 | 	mov	arg02, local14
0380c     48 D0 B1 FD | 	call	#__system___string_cmp
03810     FD 32 0A F6 | 	mov	local11, result1 wz
03814     3C 00 90 AD |  if_e	jmp	#LR__0184
03818     80 01 00 FF 
0381c     CA 37 06 F6 | 	mov	local13, ##@LR__5075
03820     37 13 02 F6 | 	mov	arg01, local41
03824     1B 15 02 F6 | 	mov	arg02, local13
03828     2C D0 B1 FD | 	call	#__system___string_cmp
0382c     FD 38 0A F6 | 	mov	local14, result1 wz
03830     20 00 90 AD |  if_e	jmp	#LR__0184
03834     80 01 00 FF 
03838     D0 49 06 F6 | 	mov	local22, ##@LR__5076
0383c     24 55 02 F6 | 	mov	local28, local22
03840     37 13 02 F6 | 	mov	arg01, local41
03844     2A 15 02 F6 | 	mov	arg02, local28
03848     0C D0 B1 FD | 	call	#__system___string_cmp
0384c     FD 36 0A F6 | 	mov	local13, result1 wz
03850     84 00 90 5D |  if_ne	jmp	#LR__0185
03854                 | LR__0184
03854     33 55 02 F6 | 	mov	local28, local37
03858     01 54 06 F1 | 	add	local28, #1
0385c     2A 49 02 F6 | 	mov	local22, local28
03860     24 4B 02 F6 | 	mov	local23, local22
03864     03 4A 66 F0 | 	shl	local23, #3
03868     35 00 00 FF 
0386c     0C E4 05 F1 | 	add	objptr, ##27148
03870     F2 4C 02 F6 | 	mov	local24, objptr
03874     F2 4A 02 F1 | 	add	local23, objptr
03878     04 4A 06 F1 | 	add	local23, #4
0387c     25 59 02 FB | 	rdlong	local30, local23
03880     04 4A 86 F1 | 	sub	local23, #4
03884     2C 57 02 F6 | 	mov	local29, local30
03888     01 00 00 FF 
0388c     04 56 0E F2 | 	cmp	local29, ##516 wz
03890     35 00 00 FF 
03894     0C E4 85 F1 | 	sub	objptr, ##27148
03898     3C 00 90 5D |  if_ne	jmp	#LR__0185
0389c     33 31 02 F6 | 	mov	local10, local37
038a0     01 30 06 F1 | 	add	local10, #1
038a4     03 30 66 F0 | 	shl	local10, #3
038a8     35 00 00 FF 
038ac     0C E4 05 F1 | 	add	objptr, ##27148
038b0     F2 26 02 F6 | 	mov	local05, objptr
038b4     F2 30 02 F1 | 	add	local10, objptr
038b8     01 00 00 FF 
038bc     03 28 06 F6 | 	mov	local06, ##515
038c0     04 30 06 F1 | 	add	local10, #4
038c4     01 00 80 FF 
038c8     18 07 68 FC | 	wrlong	##515, local10
038cc     04 30 86 F1 | 	sub	local10, #4
038d0     35 00 00 FF 
038d4     0C E4 85 F1 | 	sub	objptr, ##27148
038d8                 | LR__0185
038d8                 | ' 
038d8                 | ' ' determine a type of the line and compile it
038d8                 | ' 
038d8                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
038d8     35 00 00 FF 
038dc     0C E4 05 F1 | 	add	objptr, ##27148
038e0     F2 12 02 FB | 	rdlong	arg01, objptr
038e4     35 00 00 FF 
038e8     0C E4 85 F1 | 	sub	objptr, ##27148
038ec     08 2C B0 FD | 	call	#_isdec
038f0     00 FA 0D F2 | 	cmp	result1, #0 wz
038f4     30 00 90 AD |  if_e	jmp	#LR__0186
038f8     35 00 00 FF 
038fc     0C E4 05 F1 | 	add	objptr, ##27148
03900     F2 12 02 FB | 	rdlong	arg01, objptr
03904     35 00 00 FF 
03908     0C E4 85 F1 | 	sub	objptr, ##27148
0390c     00 14 06 F6 | 	mov	arg02, #0
03910     48 01 B2 FD | 	call	#__system____builtin_atoi
03914     51 00 00 FF 
03918     C4 E5 05 F1 | 	add	objptr, ##41924
0391c     F2 FA 61 FC | 	wrlong	result1, objptr
03920     51 00 00 FF 
03924     C4 E5 85 F1 | 	sub	objptr, ##41924
03928                 | LR__0186
03928                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03928     51 00 00 FF 
0392c     C4 E5 05 F1 | 	add	objptr, ##41924
03930     F2 24 02 FB | 	rdlong	local04, objptr
03934     51 00 00 FF 
03938     C4 E5 85 F1 | 	sub	objptr, ##41924
0393c     01 24 16 F2 | 	cmp	local04, #1 wc
03940     40 00 90 CD |  if_b	jmp	#LR__0187
03944     01 3E 0E F2 | 	cmp	local17, #1 wz
03948     37 00 00 AF 
0394c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03950     F2 26 02 AB |  if_e	rdlong	local05, objptr
03954     37 00 00 AF 
03958     24 E4 85 A1 |  if_e	sub	objptr, ##28196
0395c     13 31 02 A6 |  if_e	mov	local10, local05
03960     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03964     1C 00 90 5D |  if_ne	jmp	#LR__0187
03968     51 00 00 FF 
0396c     C4 E5 05 F1 | 	add	objptr, ##41924
03970     F2 12 02 FB | 	rdlong	arg01, objptr
03974     51 00 00 FF 
03978     C4 E5 85 F1 | 	sub	objptr, ##41924
0397c     24 2D B0 FD | 	call	#_deleteline
03980     70 03 90 FD | 	jmp	#LR__0197
03984                 | LR__0187
03984                 | ' 
03984                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03984     37 00 00 FF 
03988     24 E4 05 F1 | 	add	objptr, ##28196
0398c     F2 24 0A FB | 	rdlong	local04, objptr wz
03990     37 00 00 FF 
03994     24 E4 85 F1 | 	sub	objptr, ##28196
03998     37 00 00 5F 
0399c     24 E4 05 51 |  if_ne	add	objptr, ##28196
039a0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
039a4     37 00 00 5F 
039a8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
039ac     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
039b0     AC 00 90 5D |  if_ne	jmp	#LR__0189
039b4     35 00 00 FF 
039b8     20 E4 05 F1 | 	add	objptr, ##27168
039bc     F2 34 02 FB | 	rdlong	local12, objptr
039c0     35 00 00 FF 
039c4     20 E4 85 F1 | 	sub	objptr, ##27168
039c8     1B 34 0E F2 | 	cmp	local12, #27 wz
039cc     90 00 90 AD |  if_e	jmp	#LR__0189
039d0     51 00 00 FF 
039d4     C4 E5 05 F1 | 	add	objptr, ##41924
039d8     F2 12 02 FB | 	rdlong	arg01, objptr
039dc     1A 00 00 FF 
039e0     A0 E5 85 F1 | 	sub	objptr, ##13728
039e4     F2 16 02 FB | 	rdlong	arg03, objptr
039e8     37 00 00 FF 
039ec     24 E4 85 F1 | 	sub	objptr, ##28196
039f0     00 14 06 F6 | 	mov	arg02, #0
039f4     50 40 B0 FD | 	call	#_compile
039f8     FD 1E 0A F6 | 	mov	local01, result1 wz
039fc                 | '   err=compile(linenum,0,cont) 
039fc                 | '   if err<>0 then printerror(err): goto 101
039fc     0C 00 90 AD |  if_e	jmp	#LR__0188
03a00     0F 13 02 F6 | 	mov	arg01, local01
03a04     98 98 B1 FD | 	call	#_printerror
03a08     08 03 90 FD | 	jmp	#LR__0198
03a0c                 | LR__0188
03a0c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03a0c     51 00 00 FF 
03a10     FC E5 05 F1 | 	add	objptr, ##41980
03a14     F2 12 02 FB | 	rdlong	arg01, objptr
03a18     51 00 00 FF 
03a1c     FC E5 85 F1 | 	sub	objptr, ##41980
03a20     80 01 00 FF 
03a24     D3 15 06 F6 | 	mov	arg02, ##@LR__5077
03a28     2C CE B1 FD | 	call	#__system___string_cmp
03a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a30     C0 02 90 AD |  if_e	jmp	#LR__0197
03a34     51 00 00 FF 
03a38     FC E5 05 F1 | 	add	objptr, ##41980
03a3c     F2 24 02 FB | 	rdlong	local04, objptr
03a40     1A 00 00 FF 
03a44     E0 E5 85 F1 | 	sub	objptr, ##13792
03a48     F2 24 62 FC | 	wrlong	local04, objptr
03a4c     08 E4 05 F1 | 	add	objptr, #8
03a50     F2 08 68 FC | 	wrlong	#4, objptr
03a54     37 00 00 FF 
03a58     24 E4 85 F1 | 	sub	objptr, ##28196
03a5c     54 DD 9F FD | 	jmp	#LR__0070
03a60                 | LR__0189
03a60                 | '       							
03a60                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03a60     37 00 00 FF 
03a64     24 E4 05 F1 | 	add	objptr, ##28196
03a68     F2 24 02 FB | 	rdlong	local04, objptr
03a6c     37 00 00 FF 
03a70     24 E4 85 F1 | 	sub	objptr, ##28196
03a74     01 24 0E F2 | 	cmp	local04, #1 wz
03a78     37 00 00 5F 
03a7c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03a80     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03a84     37 00 00 5F 
03a88     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03a8c     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03a90     AC 00 90 5D |  if_ne	jmp	#LR__0191
03a94     35 00 00 FF 
03a98     18 E4 05 F1 | 	add	objptr, ##27160
03a9c     F2 34 02 FB | 	rdlong	local12, objptr
03aa0     35 00 00 FF 
03aa4     18 E4 85 F1 | 	sub	objptr, ##27160
03aa8     1B 34 0E F2 | 	cmp	local12, #27 wz
03aac     90 00 90 AD |  if_e	jmp	#LR__0191
03ab0     51 00 00 FF 
03ab4     C4 E5 05 F1 | 	add	objptr, ##41924
03ab8     F2 12 02 FB | 	rdlong	arg01, objptr
03abc     1A 00 00 FF 
03ac0     A0 E5 85 F1 | 	sub	objptr, ##13728
03ac4     F2 16 02 FB | 	rdlong	arg03, objptr
03ac8     37 00 00 FF 
03acc     24 E4 85 F1 | 	sub	objptr, ##28196
03ad0     00 14 06 F6 | 	mov	arg02, #0
03ad4     70 3F B0 FD | 	call	#_compile
03ad8     FD 1E 0A F6 | 	mov	local01, result1 wz
03adc                 | '   err=compile(linenum,0,cont) 
03adc                 | '   if err<>0 then printerror(err): goto 101
03adc     0C 00 90 AD |  if_e	jmp	#LR__0190
03ae0     0F 13 02 F6 | 	mov	arg01, local01
03ae4     B8 97 B1 FD | 	call	#_printerror
03ae8     28 02 90 FD | 	jmp	#LR__0198
03aec                 | LR__0190
03aec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03aec     51 00 00 FF 
03af0     FC E5 05 F1 | 	add	objptr, ##41980
03af4     F2 12 02 FB | 	rdlong	arg01, objptr
03af8     51 00 00 FF 
03afc     FC E5 85 F1 | 	sub	objptr, ##41980
03b00     80 01 00 FF 
03b04     D4 15 06 F6 | 	mov	arg02, ##@LR__5078
03b08     4C CD B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     E0 01 90 AD |  if_e	jmp	#LR__0197
03b14     51 00 00 FF 
03b18     FC E5 05 F1 | 	add	objptr, ##41980
03b1c     F2 24 02 FB | 	rdlong	local04, objptr
03b20     1A 00 00 FF 
03b24     E0 E5 85 F1 | 	sub	objptr, ##13792
03b28     F2 24 62 FC | 	wrlong	local04, objptr
03b2c     08 E4 05 F1 | 	add	objptr, #8
03b30     F2 08 68 FC | 	wrlong	#4, objptr
03b34     37 00 00 FF 
03b38     24 E4 85 F1 | 	sub	objptr, ##28196
03b3c     74 DC 9F FD | 	jmp	#LR__0070
03b40                 | LR__0191
03b40                 | ' 							 
03b40                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03b40     37 00 00 FF 
03b44     24 E4 05 F1 | 	add	objptr, ##28196
03b48     F2 24 0A FB | 	rdlong	local04, objptr wz
03b4c     37 00 00 FF 
03b50     24 E4 85 F1 | 	sub	objptr, ##28196
03b54     37 00 00 5F 
03b58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03b5c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03b60     37 00 00 5F 
03b64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03b68     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03b6c     35 00 00 AF 
03b70     20 E4 05 A1 |  if_e	add	objptr, ##27168
03b74     F2 34 02 AB |  if_e	rdlong	local12, objptr
03b78     35 00 00 AF 
03b7c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03b80     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03b84     90 00 90 5D |  if_ne	jmp	#LR__0193
03b88     51 00 00 FF 
03b8c     C4 E5 05 F1 | 	add	objptr, ##41924
03b90     F2 12 02 FB | 	rdlong	arg01, objptr
03b94     1A 00 00 FF 
03b98     A0 E5 85 F1 | 	sub	objptr, ##13728
03b9c     F2 16 02 FB | 	rdlong	arg03, objptr
03ba0     37 00 00 FF 
03ba4     24 E4 85 F1 | 	sub	objptr, ##28196
03ba8     00 14 06 F6 | 	mov	arg02, #0
03bac     60 3F B0 FD | 	call	#_compile_assign
03bb0     FD 1E 0A F6 | 	mov	local01, result1 wz
03bb4                 | '   err=compile_assign(linenum,0,cont)
03bb4                 | '   if err<>0 then printerror(err): goto 101
03bb4     0C 00 90 AD |  if_e	jmp	#LR__0192
03bb8     0F 13 02 F6 | 	mov	arg01, local01
03bbc     E0 96 B1 FD | 	call	#_printerror
03bc0     50 01 90 FD | 	jmp	#LR__0198
03bc4                 | LR__0192
03bc4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03bc4     51 00 00 FF 
03bc8     FC E5 05 F1 | 	add	objptr, ##41980
03bcc     F2 12 02 FB | 	rdlong	arg01, objptr
03bd0     51 00 00 FF 
03bd4     FC E5 85 F1 | 	sub	objptr, ##41980
03bd8     80 01 00 FF 
03bdc     D5 15 06 F6 | 	mov	arg02, ##@LR__5079
03be0     74 CC B1 FD | 	call	#__system___string_cmp
03be4     00 FA 0D F2 | 	cmp	result1, #0 wz
03be8     08 01 90 AD |  if_e	jmp	#LR__0197
03bec     51 00 00 FF 
03bf0     FC E5 05 F1 | 	add	objptr, ##41980
03bf4     F2 24 02 FB | 	rdlong	local04, objptr
03bf8     1A 00 00 FF 
03bfc     E0 E5 85 F1 | 	sub	objptr, ##13792
03c00     F2 24 62 FC | 	wrlong	local04, objptr
03c04     08 E4 05 F1 | 	add	objptr, #8
03c08     F2 08 68 FC | 	wrlong	#4, objptr
03c0c     37 00 00 FF 
03c10     24 E4 85 F1 | 	sub	objptr, ##28196
03c14     9C DB 9F FD | 	jmp	#LR__0070
03c18                 | LR__0193
03c18                 | '     							 
03c18                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03c18     37 00 00 FF 
03c1c     24 E4 05 F1 | 	add	objptr, ##28196
03c20     F2 24 02 FB | 	rdlong	local04, objptr
03c24     37 00 00 FF 
03c28     24 E4 85 F1 | 	sub	objptr, ##28196
03c2c     01 24 0E F2 | 	cmp	local04, #1 wz
03c30     37 00 00 5F 
03c34     24 E4 05 51 |  if_ne	add	objptr, ##28196
03c38     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03c3c     37 00 00 5F 
03c40     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03c44     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03c48     35 00 00 AF 
03c4c     18 E4 05 A1 |  if_e	add	objptr, ##27160
03c50     F2 34 02 AB |  if_e	rdlong	local12, objptr
03c54     35 00 00 AF 
03c58     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03c5c     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03c60     90 00 90 5D |  if_ne	jmp	#LR__0196
03c64     51 00 00 FF 
03c68     C4 E5 05 F1 | 	add	objptr, ##41924
03c6c     F2 12 02 FB | 	rdlong	arg01, objptr
03c70     1A 00 00 FF 
03c74     A0 E5 85 F1 | 	sub	objptr, ##13728
03c78     F2 16 02 FB | 	rdlong	arg03, objptr
03c7c     37 00 00 FF 
03c80     24 E4 85 F1 | 	sub	objptr, ##28196
03c84     00 14 06 F6 | 	mov	arg02, #0
03c88     84 3E B0 FD | 	call	#_compile_assign
03c8c     FD 1E 0A F6 | 	mov	local01, result1 wz
03c90                 | '   err=compile_assign(linenum,0,cont) 
03c90                 | '   if err<>0 then printerror(err): goto 101
03c90     0C 00 90 AD |  if_e	jmp	#LR__0194
03c94     0F 13 02 F6 | 	mov	arg01, local01
03c98     04 96 B1 FD | 	call	#_printerror
03c9c     74 00 90 FD | 	jmp	#LR__0198
03ca0                 | LR__0194
03ca0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03ca0     51 00 00 FF 
03ca4     FC E5 05 F1 | 	add	objptr, ##41980
03ca8     F2 12 02 FB | 	rdlong	arg01, objptr
03cac     51 00 00 FF 
03cb0     FC E5 85 F1 | 	sub	objptr, ##41980
03cb4     80 01 00 FF 
03cb8     D6 15 06 F6 | 	mov	arg02, ##@LR__5080
03cbc     98 CB B1 FD | 	call	#__system___string_cmp
03cc0     00 FA 4D F2 | 	cmps	result1, #0 wz
03cc4     2C 00 90 AD |  if_e	jmp	#LR__0195
03cc8     51 00 00 FF 
03ccc     FC E5 05 F1 | 	add	objptr, ##41980
03cd0     F2 24 02 FB | 	rdlong	local04, objptr
03cd4     1A 00 00 FF 
03cd8     E0 E5 85 F1 | 	sub	objptr, ##13792
03cdc     F2 24 62 FC | 	wrlong	local04, objptr
03ce0     08 E4 05 F1 | 	add	objptr, #8
03ce4     F2 08 68 FC | 	wrlong	#4, objptr
03ce8     37 00 00 FF 
03cec     24 E4 85 F1 | 	sub	objptr, ##28196
03cf0     C0 DA 9F FD | 	jmp	#LR__0070
03cf4                 | LR__0195
03cf4                 | LR__0196
03cf4                 | LR__0197
03cf4                 | ' 
03cf4                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03cf4     51 00 00 FF 
03cf8     C4 E5 05 F1 | 	add	objptr, ##41924
03cfc     F2 24 0A FB | 	rdlong	local04, objptr wz
03d00     51 00 00 FF 
03d04     C4 E5 85 F1 | 	sub	objptr, ##41924
03d08     28 00 90 5D |  if_ne	jmp	#LR__0199
03d0c     02 12 06 F6 | 	mov	arg01, #2
03d10     84 75 B0 FD | 	call	#_execute_line
03d14                 | LR__0198
03d14     80 01 00 FF 
03d18     D7 13 06 F6 | 	mov	arg01, ##@LR__5081
03d1c                 | ' 
03d1c                 | ' write(text)
03d1c     F4 B5 B1 FD | 	call	#_hg010b_spin2_write
03d20                 | ' crlf
03d20     F0 BA B1 FD | 	call	#_hg010b_spin2_crlf
03d24     80 01 00 FF 
03d28     D8 13 06 F6 | 	mov	arg01, ##@LR__5082
03d2c                 | ' 
03d2c                 | ' write(text)
03d2c     E4 B5 B1 FD | 	call	#_hg010b_spin2_write
03d30                 | ' crlf
03d30     E0 BA B1 FD | 	call	#_hg010b_spin2_crlf
03d34                 | LR__0199
03d34     A7 F0 03 F6 | 	mov	ptra, fp
03d38     B2 00 A0 FD | 	call	#popregs_
03d3c                 | _interpret_ret
03d3c     2D 00 64 FD | 	ret
03d40                 | 
03d40                 | ' 
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' '
03d40                 | ' '                          END OF TOKENIZER MAIN CODE
03d40                 | ' '
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' 
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' 
03d40                 | ' ' Check if the part is an operator, return a token or 0 if not found
03d40                 | ' 
03d40                 | ' function isoperator(s as string) as ubyte
03d40                 | _isoperator
03d40     01 4A 05 F6 | 	mov	COUNT_, #1
03d44     A8 00 A0 FD | 	call	#pushregs_
03d48                 | ' 
03d48                 | ' select case s
03d48     09 1F 02 F6 | 	mov	local01, arg01
03d4c     80 01 00 FF 
03d50     DE 15 06 F6 | 	mov	arg02, ##@LR__5083
03d54     0F 13 02 F6 | 	mov	arg01, local01
03d58     FC CA B1 FD | 	call	#__system___string_cmp
03d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d60     FC 01 90 AD |  if_e	jmp	#LR__0200
03d64     80 01 00 FF 
03d68     E0 15 06 F6 | 	mov	arg02, ##@LR__5084
03d6c     0F 13 02 F6 | 	mov	arg01, local01
03d70     E4 CA B1 FD | 	call	#__system___string_cmp
03d74     00 FA 0D F2 | 	cmp	result1, #0 wz
03d78     EC 01 90 AD |  if_e	jmp	#LR__0201
03d7c     80 01 00 FF 
03d80     E2 15 06 F6 | 	mov	arg02, ##@LR__5085
03d84     0F 13 02 F6 | 	mov	arg01, local01
03d88     CC CA B1 FD | 	call	#__system___string_cmp
03d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d90     DC 01 90 AD |  if_e	jmp	#LR__0202
03d94     80 01 00 FF 
03d98     E5 15 06 F6 | 	mov	arg02, ##@LR__5086
03d9c     0F 13 02 F6 | 	mov	arg01, local01
03da0     B4 CA B1 FD | 	call	#__system___string_cmp
03da4     00 FA 0D F2 | 	cmp	result1, #0 wz
03da8     CC 01 90 AD |  if_e	jmp	#LR__0203
03dac     80 01 00 FF 
03db0     E9 15 06 F6 | 	mov	arg02, ##@LR__5087
03db4     0F 13 02 F6 | 	mov	arg01, local01
03db8     9C CA B1 FD | 	call	#__system___string_cmp
03dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc0     BC 01 90 AD |  if_e	jmp	#LR__0204
03dc4     80 01 00 FF 
03dc8     EB 15 06 F6 | 	mov	arg02, ##@LR__5088
03dcc     0F 13 02 F6 | 	mov	arg01, local01
03dd0     84 CA B1 FD | 	call	#__system___string_cmp
03dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd8     AC 01 90 AD |  if_e	jmp	#LR__0205
03ddc     80 01 00 FF 
03de0     ED 15 06 F6 | 	mov	arg02, ##@LR__5089
03de4     0F 13 02 F6 | 	mov	arg01, local01
03de8     6C CA B1 FD | 	call	#__system___string_cmp
03dec     00 FA 0D F2 | 	cmp	result1, #0 wz
03df0     9C 01 90 AD |  if_e	jmp	#LR__0206
03df4     80 01 00 FF 
03df8     F1 15 06 F6 | 	mov	arg02, ##@LR__5090
03dfc     0F 13 02 F6 | 	mov	arg01, local01
03e00     54 CA B1 FD | 	call	#__system___string_cmp
03e04     00 FA 0D F2 | 	cmp	result1, #0 wz
03e08     8C 01 90 AD |  if_e	jmp	#LR__0207
03e0c     80 01 00 FF 
03e10     F5 15 06 F6 | 	mov	arg02, ##@LR__5091
03e14     0F 13 02 F6 | 	mov	arg01, local01
03e18     3C CA B1 FD | 	call	#__system___string_cmp
03e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e20     7C 01 90 AD |  if_e	jmp	#LR__0208
03e24     80 01 00 FF 
03e28     F9 15 06 F6 | 	mov	arg02, ##@LR__5092
03e2c     0F 13 02 F6 | 	mov	arg01, local01
03e30     24 CA B1 FD | 	call	#__system___string_cmp
03e34     00 FA 0D F2 | 	cmp	result1, #0 wz
03e38     6C 01 90 AD |  if_e	jmp	#LR__0209
03e3c     80 01 00 FF 
03e40     FD 15 06 F6 | 	mov	arg02, ##@LR__5093
03e44     0F 13 02 F6 | 	mov	arg01, local01
03e48     0C CA B1 FD | 	call	#__system___string_cmp
03e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e50     5C 01 90 AD |  if_e	jmp	#LR__0210
03e54     81 01 00 FF 
03e58     01 14 06 F6 | 	mov	arg02, ##@LR__5094
03e5c     0F 13 02 F6 | 	mov	arg01, local01
03e60     F4 C9 B1 FD | 	call	#__system___string_cmp
03e64     00 FA 0D F2 | 	cmp	result1, #0 wz
03e68     4C 01 90 AD |  if_e	jmp	#LR__0211
03e6c     81 01 00 FF 
03e70     03 14 06 F6 | 	mov	arg02, ##@LR__5095
03e74     0F 13 02 F6 | 	mov	arg01, local01
03e78     DC C9 B1 FD | 	call	#__system___string_cmp
03e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e80     3C 01 90 AD |  if_e	jmp	#LR__0212
03e84     81 01 00 FF 
03e88     07 14 06 F6 | 	mov	arg02, ##@LR__5096
03e8c     0F 13 02 F6 | 	mov	arg01, local01
03e90     C4 C9 B1 FD | 	call	#__system___string_cmp
03e94     00 FA 0D F2 | 	cmp	result1, #0 wz
03e98     2C 01 90 AD |  if_e	jmp	#LR__0213
03e9c     81 01 00 FF 
03ea0     09 14 06 F6 | 	mov	arg02, ##@LR__5097
03ea4     0F 13 02 F6 | 	mov	arg01, local01
03ea8     AC C9 B1 FD | 	call	#__system___string_cmp
03eac     00 FA 0D F2 | 	cmp	result1, #0 wz
03eb0     1C 01 90 AD |  if_e	jmp	#LR__0214
03eb4     81 01 00 FF 
03eb8     0B 14 06 F6 | 	mov	arg02, ##@LR__5098
03ebc     0F 13 02 F6 | 	mov	arg01, local01
03ec0     94 C9 B1 FD | 	call	#__system___string_cmp
03ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec8     0C 01 90 AD |  if_e	jmp	#LR__0215
03ecc     81 01 00 FF 
03ed0     0E 14 06 F6 | 	mov	arg02, ##@LR__5099
03ed4     0F 13 02 F6 | 	mov	arg01, local01
03ed8     7C C9 B1 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     FC 00 90 AD |  if_e	jmp	#LR__0216
03ee4     81 01 00 FF 
03ee8     11 14 06 F6 | 	mov	arg02, ##@LR__5100
03eec     0F 13 02 F6 | 	mov	arg01, local01
03ef0     64 C9 B1 FD | 	call	#__system___string_cmp
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     EC 00 90 AD |  if_e	jmp	#LR__0217
03efc     81 01 00 FF 
03f00     13 14 06 F6 | 	mov	arg02, ##@LR__5101
03f04     0F 13 02 F6 | 	mov	arg01, local01
03f08     4C C9 B1 FD | 	call	#__system___string_cmp
03f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f10     DC 00 90 AD |  if_e	jmp	#LR__0218
03f14     81 01 00 FF 
03f18     15 14 06 F6 | 	mov	arg02, ##@LR__5102
03f1c     0F 13 02 F6 | 	mov	arg01, local01
03f20     34 C9 B1 FD | 	call	#__system___string_cmp
03f24     00 FA 0D F2 | 	cmp	result1, #0 wz
03f28     CC 00 90 AD |  if_e	jmp	#LR__0219
03f2c     81 01 00 FF 
03f30     18 14 06 F6 | 	mov	arg02, ##@LR__5103
03f34     0F 13 02 F6 | 	mov	arg01, local01
03f38     1C C9 B1 FD | 	call	#__system___string_cmp
03f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f40     BC 00 90 AD |  if_e	jmp	#LR__0220
03f44     81 01 00 FF 
03f48     1B 14 06 F6 | 	mov	arg02, ##@LR__5104
03f4c     0F 13 02 F6 | 	mov	arg01, local01
03f50     04 C9 B1 FD | 	call	#__system___string_cmp
03f54     00 FA 0D F2 | 	cmp	result1, #0 wz
03f58     AC 00 90 AD |  if_e	jmp	#LR__0221
03f5c     B0 00 90 FD | 	jmp	#LR__0222
03f60                 | LR__0200
03f60     01 FA 05 F6 | 	mov	result1, #1
03f64     AC 00 90 FD | 	jmp	#LR__0223
03f68                 | LR__0201
03f68     02 FA 05 F6 | 	mov	result1, #2
03f6c     A4 00 90 FD | 	jmp	#LR__0223
03f70                 | LR__0202
03f70     03 FA 05 F6 | 	mov	result1, #3
03f74     9C 00 90 FD | 	jmp	#LR__0223
03f78                 | LR__0203
03f78     04 FA 05 F6 | 	mov	result1, #4
03f7c     94 00 90 FD | 	jmp	#LR__0223
03f80                 | LR__0204
03f80     05 FA 05 F6 | 	mov	result1, #5
03f84     8C 00 90 FD | 	jmp	#LR__0223
03f88                 | LR__0205
03f88     06 FA 05 F6 | 	mov	result1, #6
03f8c     84 00 90 FD | 	jmp	#LR__0223
03f90                 | LR__0206
03f90     07 FA 05 F6 | 	mov	result1, #7
03f94     7C 00 90 FD | 	jmp	#LR__0223
03f98                 | LR__0207
03f98     08 FA 05 F6 | 	mov	result1, #8
03f9c     74 00 90 FD | 	jmp	#LR__0223
03fa0                 | LR__0208
03fa0     09 FA 05 F6 | 	mov	result1, #9
03fa4     6C 00 90 FD | 	jmp	#LR__0223
03fa8                 | LR__0209
03fa8     0A FA 05 F6 | 	mov	result1, #10
03fac     64 00 90 FD | 	jmp	#LR__0223
03fb0                 | LR__0210
03fb0     0B FA 05 F6 | 	mov	result1, #11
03fb4     5C 00 90 FD | 	jmp	#LR__0223
03fb8                 | LR__0211
03fb8     0C FA 05 F6 | 	mov	result1, #12
03fbc     54 00 90 FD | 	jmp	#LR__0223
03fc0                 | LR__0212
03fc0     0D FA 05 F6 | 	mov	result1, #13
03fc4     4C 00 90 FD | 	jmp	#LR__0223
03fc8                 | LR__0213
03fc8     0E FA 05 F6 | 	mov	result1, #14
03fcc     44 00 90 FD | 	jmp	#LR__0223
03fd0                 | LR__0214
03fd0     1B FA 05 F6 | 	mov	result1, #27
03fd4     3C 00 90 FD | 	jmp	#LR__0223
03fd8                 | LR__0215
03fd8     27 FA 05 F6 | 	mov	result1, #39
03fdc     34 00 90 FD | 	jmp	#LR__0223
03fe0                 | LR__0216
03fe0     26 FA 05 F6 | 	mov	result1, #38
03fe4     2C 00 90 FD | 	jmp	#LR__0223
03fe8                 | LR__0217
03fe8     10 FA 05 F6 | 	mov	result1, #16
03fec     24 00 90 FD | 	jmp	#LR__0223
03ff0                 | LR__0218
03ff0     0F FA 05 F6 | 	mov	result1, #15
03ff4     1C 00 90 FD | 	jmp	#LR__0223
03ff8                 | LR__0219
03ff8     2A FA 05 F6 | 	mov	result1, #42
03ffc     14 00 90 FD | 	jmp	#LR__0223
04000                 | LR__0220
04000     28 FA 05 F6 | 	mov	result1, #40
04004     0C 00 90 FD | 	jmp	#LR__0223
04008                 | LR__0221
04008     29 FA 05 F6 | 	mov	result1, #41
0400c     04 00 90 FD | 	jmp	#LR__0223
04010                 | LR__0222
04010     00 FA 05 F6 | 	mov	result1, #0
04014                 | LR__0223
04014     A7 F0 03 F6 | 	mov	ptra, fp
04018     B2 00 A0 FD | 	call	#popregs_
0401c                 | _isoperator_ret
0401c     2D 00 64 FD | 	ret
04020                 | 
04020                 | ' 
04020                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04020                 | ' 
04020                 | ' function ischannel(s as string) as ulong
04020                 | _ischannel
04020     02 4A 05 F6 | 	mov	COUNT_, #2
04024     A8 00 A0 FD | 	call	#pushregs_
04028                 | ' if left$(s,1)<>"#" then return 0
04028     09 1F 02 F6 | 	mov	local01, arg01
0402c     01 14 06 F6 | 	mov	arg02, #1
04030     78 E8 B1 FD | 	call	#__system__Left_S
04034     FD 12 02 F6 | 	mov	arg01, result1
04038     81 01 00 FF 
0403c     1E 14 06 F6 | 	mov	arg02, ##@LR__5105
04040     14 C8 B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     00 FA 05 56 |  if_ne	mov	result1, #0
0404c     AC 00 90 5D |  if_ne	jmp	#LR__0234
04050                 | ' if len(s)<>2 then return 0
04050     0F 13 02 F6 | 	mov	arg01, local01
04054     09 21 02 F6 | 	mov	local02, arg01
04058     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
0405c                 | LR__0230
0405c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04060     01 20 06 51 |  if_ne	add	local02, #1
04064     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
04068                 | LR__0231
04068     09 21 82 F1 | 	sub	local02, arg01
0406c     10 FB 01 F6 | 	mov	result1, local02
04070     02 FA 0D F2 | 	cmp	result1, #2 wz
04074     00 FA 05 56 |  if_ne	mov	result1, #0
04078     80 00 90 5D |  if_ne	jmp	#LR__0234
0407c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     01 14 06 F6 | 	mov	arg02, #1
04084     AC E8 B1 FD | 	call	#__system__Right_S
04088     FD 12 02 F6 | 	mov	arg01, result1
0408c     81 01 00 FF 
04090     20 14 06 F6 | 	mov	arg02, ##@LR__5106
04094     C0 C7 B1 FD | 	call	#__system___string_cmp
04098     00 FA 55 F2 | 	cmps	result1, #0 wc
0409c     24 00 90 CD |  if_b	jmp	#LR__0232
040a0     0F 13 02 F6 | 	mov	arg01, local01
040a4     01 14 06 F6 | 	mov	arg02, #1
040a8     88 E8 B1 FD | 	call	#__system__Right_S
040ac     FD 12 02 F6 | 	mov	arg01, result1
040b0     81 01 00 FF 
040b4     22 14 06 F6 | 	mov	arg02, ##@LR__5107
040b8     9C C7 B1 FD | 	call	#__system___string_cmp
040bc     01 FA 55 F2 | 	cmps	result1, #1 wc
040c0     08 00 90 CD |  if_b	jmp	#LR__0233
040c4                 | LR__0232
040c4     00 FA 05 F6 | 	mov	result1, #0
040c8     30 00 90 FD | 	jmp	#LR__0234
040cc                 | LR__0233
040cc                 | ' return token_channel+val(right$(s,1))
040cc     0F 13 02 F6 | 	mov	arg01, local01
040d0     01 14 06 F6 | 	mov	arg02, #1
040d4     5C E8 B1 FD | 	call	#__system__Right_S
040d8     FD 12 02 F6 | 	mov	arg01, result1
040dc     10 FB B1 FD | 	call	#__system____builtin_atof
040e0     FD 14 02 F6 | 	mov	arg02, result1
040e4     00 18 21 FF 
040e8     00 12 06 F6 | 	mov	arg01, ##1110441984
040ec     24 EF B1 FD | 	call	#__system___float_add
040f0     FD 12 02 F6 | 	mov	arg01, result1
040f4     00 14 06 F6 | 	mov	arg02, #0
040f8     B0 F7 B1 FD | 	call	#__system___float_tointeger
040fc                 | LR__0234
040fc     A7 F0 03 F6 | 	mov	ptra, fp
04100     B2 00 A0 FD | 	call	#popregs_
04104                 | _ischannel_ret
04104     2D 00 64 FD | 	ret
04108                 | 
04108                 | ' 
04108                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04108                 | ' ' todo: add spin2/pasm constants for pin control
04108                 | ' 
04108                 | ' function isconstant(s as string) as integer
04108                 | _isconstant
04108     01 4A 05 F6 | 	mov	COUNT_, #1
0410c     A8 00 A0 FD | 	call	#pushregs_
04110                 | ' 
04110                 | ' select case s
04110     09 1F 02 F6 | 	mov	local01, arg01
04114     81 01 00 FF 
04118     24 14 06 F6 | 	mov	arg02, ##@LR__5108
0411c     0F 13 02 F6 | 	mov	arg01, local01
04120     34 C7 B1 FD | 	call	#__system___string_cmp
04124     00 FA 0D F2 | 	cmp	result1, #0 wz
04128     34 00 90 AD |  if_e	jmp	#LR__0240
0412c     81 01 00 FF 
04130     2A 14 06 F6 | 	mov	arg02, ##@LR__5109
04134     0F 13 02 F6 | 	mov	arg01, local01
04138     1C C7 B1 FD | 	call	#__system___string_cmp
0413c     00 FA 0D F2 | 	cmp	result1, #0 wz
04140     24 00 90 AD |  if_e	jmp	#LR__0241
04144     81 01 00 FF 
04148     31 14 06 F6 | 	mov	arg02, ##@LR__5110
0414c     0F 13 02 F6 | 	mov	arg01, local01
04150     04 C7 B1 FD | 	call	#__system___string_cmp
04154     00 FA 0D F2 | 	cmp	result1, #0 wz
04158     14 00 90 AD |  if_e	jmp	#LR__0242
0415c     18 00 90 FD | 	jmp	#LR__0243
04160                 | LR__0240
04160     01 FA 05 F6 | 	mov	result1, #1
04164     14 00 90 FD | 	jmp	#LR__0244
04168                 | LR__0241
04168     02 FA 05 F6 | 	mov	result1, #2
0416c     0C 00 90 FD | 	jmp	#LR__0244
04170                 | LR__0242
04170     04 FA 05 F6 | 	mov	result1, #4
04174     04 00 90 FD | 	jmp	#LR__0244
04178                 | LR__0243
04178     00 FA 05 F6 | 	mov	result1, #0
0417c                 | LR__0244
0417c     A7 F0 03 F6 | 	mov	ptra, fp
04180     B2 00 A0 FD | 	call	#popregs_
04184                 | _isconstant_ret
04184     2D 00 64 FD | 	ret
04188                 | 
04188                 | ' 
04188                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04188                 | ' 
04188                 | ' function isnotename(s as string) as ulong
04188                 | _isnotename
04188     07 4A 05 F6 | 	mov	COUNT_, #7
0418c     A8 00 A0 FD | 	call	#pushregs_
04190                 | ' if left$(s,1)<>"#" then return 0
04190     09 1F 02 F6 | 	mov	local01, arg01
04194     01 14 06 F6 | 	mov	arg02, #1
04198     10 E7 B1 FD | 	call	#__system__Left_S
0419c     FD 12 02 F6 | 	mov	arg01, result1
041a0     81 01 00 FF 
041a4     39 14 06 F6 | 	mov	arg02, ##@LR__5111
041a8     AC C6 B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     00 FA 05 56 |  if_ne	mov	result1, #0
041b4     30 03 90 5D |  if_ne	jmp	#LR__0273
041b8                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
041b8     0F 13 02 F6 | 	mov	arg01, local01
041bc     03 14 06 F6 | 	mov	arg02, #3
041c0     01 16 06 F6 | 	mov	arg03, #1
041c4     FC E7 B1 FD | 	call	#__system__Mid_S
041c8     FD 12 02 F6 | 	mov	arg01, result1
041cc     81 01 00 FF 
041d0     3B 14 06 F6 | 	mov	arg02, ##@LR__5112
041d4     80 C6 B1 FD | 	call	#__system___string_cmp
041d8     00 FA 0D F2 | 	cmp	result1, #0 wz
041dc     18 00 90 5D |  if_ne	jmp	#LR__0250
041e0     0F 13 02 F6 | 	mov	arg01, local01
041e4     02 14 06 F6 | 	mov	arg02, #2
041e8     02 16 06 F6 | 	mov	arg03, #2
041ec     D4 E7 B1 FD | 	call	#__system__Mid_S
041f0     FD 20 02 F6 | 	mov	local02, result1
041f4     14 00 90 FD | 	jmp	#LR__0251
041f8                 | LR__0250
041f8     0F 13 02 F6 | 	mov	arg01, local01
041fc     02 14 06 F6 | 	mov	arg02, #2
04200     01 16 06 F6 | 	mov	arg03, #1
04204     BC E7 B1 FD | 	call	#__system__Mid_S
04208     FD 20 02 F6 | 	mov	local02, result1
0420c                 | LR__0251
0420c                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
0420c     0F 13 02 F6 | 	mov	arg01, local01
04210     09 23 02 F6 | 	mov	local03, arg01
04214     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
04218                 | LR__0252
04218     11 FB C9 FA | 	rdbyte	result1, local03 wz
0421c     01 22 06 51 |  if_ne	add	local03, #1
04220     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
04224                 | LR__0253
04224     09 23 82 F1 | 	sub	local03, arg01
04228     11 15 02 F6 | 	mov	arg02, local03
0422c     01 14 86 F1 | 	sub	arg02, #1
04230     0F 13 02 F6 | 	mov	arg01, local01
04234     01 16 06 F6 | 	mov	arg03, #1
04238     88 E7 B1 FD | 	call	#__system__Mid_S
0423c     FD 12 02 F6 | 	mov	arg01, result1
04240     81 01 00 FF 
04244     3D 14 06 F6 | 	mov	arg02, ##@LR__5113
04248     0C C6 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     28 00 90 AD |  if_e	jmp	#LR__0254
04254     0F 13 02 F6 | 	mov	arg01, local01
04258     01 14 06 F6 | 	mov	arg02, #1
0425c     D4 E6 B1 FD | 	call	#__system__Right_S
04260     FD 12 02 F6 | 	mov	arg01, result1
04264     88 F9 B1 FD | 	call	#__system____builtin_atof
04268     FD 12 02 F6 | 	mov	arg01, result1
0426c     00 14 06 F6 | 	mov	arg02, #0
04270     38 F6 B1 FD | 	call	#__system___float_tointeger
04274     FD 24 02 F6 | 	mov	local04, result1
04278     34 00 90 FD | 	jmp	#LR__0255
0427c                 | LR__0254
0427c     0F 13 02 F6 | 	mov	arg01, local01
04280     01 14 06 F6 | 	mov	arg02, #1
04284     AC E6 B1 FD | 	call	#__system__Right_S
04288     FD 12 02 F6 | 	mov	arg01, result1
0428c     60 F9 B1 FD | 	call	#__system____builtin_atof
04290     FD 14 02 F6 | 	mov	arg02, result1
04294     00 C0 5F FF 
04298     00 12 06 F6 | 	mov	arg01, ##-1082130432
0429c     44 F1 B1 FD | 	call	#__system___float_mul
042a0     FD 12 02 F6 | 	mov	arg01, result1
042a4     00 14 06 F6 | 	mov	arg02, #0
042a8     00 F6 B1 FD | 	call	#__system___float_tointeger
042ac     FD 24 02 F6 | 	mov	local04, result1
042b0                 | LR__0255
042b0                 | ' 
042b0                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
042b0     00 24 0E F2 | 	cmp	local04, #0 wz
042b4     24 00 90 5D |  if_ne	jmp	#LR__0256
042b8     0F 13 02 F6 | 	mov	arg01, local01
042bc     01 14 06 F6 | 	mov	arg02, #1
042c0     70 E6 B1 FD | 	call	#__system__Right_S
042c4     FD 12 02 F6 | 	mov	arg01, result1
042c8     81 01 00 FF 
042cc     3F 14 06 F6 | 	mov	arg02, ##@LR__5114
042d0     84 C5 B1 FD | 	call	#__system___string_cmp
042d4     00 FA 0D F2 | 	cmp	result1, #0 wz
042d8     04 24 06 56 |  if_ne	mov	local04, #4
042dc                 | LR__0256
042dc                 | ' 
042dc                 | ' select case s1
042dc     10 27 02 F6 | 	mov	local05, local02
042e0     81 01 00 FF 
042e4     41 14 06 F6 | 	mov	arg02, ##@LR__5115
042e8     13 13 02 F6 | 	mov	arg01, local05
042ec     68 C5 B1 FD | 	call	#__system___string_cmp
042f0     00 FA 0D F2 | 	cmp	result1, #0 wz
042f4     24 01 90 AD |  if_e	jmp	#LR__0257
042f8     81 01 00 FF 
042fc     43 14 06 F6 | 	mov	arg02, ##@LR__5116
04300     13 13 02 F6 | 	mov	arg01, local05
04304     50 C5 B1 FD | 	call	#__system___string_cmp
04308     00 FA 0D F2 | 	cmp	result1, #0 wz
0430c     18 01 90 AD |  if_e	jmp	#LR__0258
04310     81 01 00 FF 
04314     46 14 06 F6 | 	mov	arg02, ##@LR__5117
04318     13 13 02 F6 | 	mov	arg01, local05
0431c     38 C5 B1 FD | 	call	#__system___string_cmp
04320     00 FA 0D F2 | 	cmp	result1, #0 wz
04324     0C 01 90 AD |  if_e	jmp	#LR__0259
04328     81 01 00 FF 
0432c     48 14 06 F6 | 	mov	arg02, ##@LR__5118
04330     13 13 02 F6 | 	mov	arg01, local05
04334     20 C5 B1 FD | 	call	#__system___string_cmp
04338     00 FA 0D F2 | 	cmp	result1, #0 wz
0433c     00 01 90 AD |  if_e	jmp	#LR__0260
04340     81 01 00 FF 
04344     4B 14 06 F6 | 	mov	arg02, ##@LR__5119
04348     13 13 02 F6 | 	mov	arg01, local05
0434c     08 C5 B1 FD | 	call	#__system___string_cmp
04350     00 FA 0D F2 | 	cmp	result1, #0 wz
04354     F4 00 90 AD |  if_e	jmp	#LR__0261
04358     81 01 00 FF 
0435c     4D 14 06 F6 | 	mov	arg02, ##@LR__5120
04360     13 13 02 F6 | 	mov	arg01, local05
04364     F0 C4 B1 FD | 	call	#__system___string_cmp
04368     00 FA 0D F2 | 	cmp	result1, #0 wz
0436c     E8 00 90 AD |  if_e	jmp	#LR__0262
04370     81 01 00 FF 
04374     4F 14 06 F6 | 	mov	arg02, ##@LR__5121
04378     13 13 02 F6 | 	mov	arg01, local05
0437c     D8 C4 B1 FD | 	call	#__system___string_cmp
04380     00 FA 0D F2 | 	cmp	result1, #0 wz
04384     DC 00 90 AD |  if_e	jmp	#LR__0263
04388     81 01 00 FF 
0438c     52 14 06 F6 | 	mov	arg02, ##@LR__5122
04390     13 13 02 F6 | 	mov	arg01, local05
04394     C0 C4 B1 FD | 	call	#__system___string_cmp
04398     00 FA 0D F2 | 	cmp	result1, #0 wz
0439c     D0 00 90 AD |  if_e	jmp	#LR__0264
043a0     81 01 00 FF 
043a4     54 14 06 F6 | 	mov	arg02, ##@LR__5123
043a8     13 13 02 F6 | 	mov	arg01, local05
043ac     A8 C4 B1 FD | 	call	#__system___string_cmp
043b0     00 FA 0D F2 | 	cmp	result1, #0 wz
043b4     C4 00 90 AD |  if_e	jmp	#LR__0265
043b8     81 01 00 FF 
043bc     57 14 06 F6 | 	mov	arg02, ##@LR__5124
043c0     13 13 02 F6 | 	mov	arg01, local05
043c4     90 C4 B1 FD | 	call	#__system___string_cmp
043c8     00 FA 0D F2 | 	cmp	result1, #0 wz
043cc     B8 00 90 AD |  if_e	jmp	#LR__0266
043d0     81 01 00 FF 
043d4     59 14 06 F6 | 	mov	arg02, ##@LR__5125
043d8     13 13 02 F6 | 	mov	arg01, local05
043dc     78 C4 B1 FD | 	call	#__system___string_cmp
043e0     00 FA 0D F2 | 	cmp	result1, #0 wz
043e4     AC 00 90 AD |  if_e	jmp	#LR__0267
043e8     81 01 00 FF 
043ec     5C 14 06 F6 | 	mov	arg02, ##@LR__5126
043f0     13 13 02 F6 | 	mov	arg01, local05
043f4     60 C4 B1 FD | 	call	#__system___string_cmp
043f8     00 FA 0D F2 | 	cmp	result1, #0 wz
043fc     A0 00 90 AD |  if_e	jmp	#LR__0268
04400     81 01 00 FF 
04404     5E 14 06 F6 | 	mov	arg02, ##@LR__5127
04408     13 13 02 F6 | 	mov	arg01, local05
0440c     48 C4 B1 FD | 	call	#__system___string_cmp
04410     00 FA 0D F2 | 	cmp	result1, #0 wz
04414     94 00 90 AD |  if_e	jmp	#LR__0269
04418     9C 00 90 FD | 	jmp	#LR__0270
0441c                 | LR__0257
0441c     01 00 00 FF 
04420     00 29 06 F6 | 	mov	local06, ##768
04424     98 00 90 FD | 	jmp	#LR__0271
04428                 | LR__0258
04428     01 00 00 FF 
0442c     01 29 06 F6 | 	mov	local06, ##769
04430     8C 00 90 FD | 	jmp	#LR__0271
04434                 | LR__0259
04434     01 00 00 FF 
04438     02 29 06 F6 | 	mov	local06, ##770
0443c     80 00 90 FD | 	jmp	#LR__0271
04440                 | LR__0260
04440     01 00 00 FF 
04444     03 29 06 F6 | 	mov	local06, ##771
04448     74 00 90 FD | 	jmp	#LR__0271
0444c                 | LR__0261
0444c     01 00 00 FF 
04450     04 29 06 F6 | 	mov	local06, ##772
04454     68 00 90 FD | 	jmp	#LR__0271
04458                 | LR__0262
04458     01 00 00 FF 
0445c     05 29 06 F6 | 	mov	local06, ##773
04460     5C 00 90 FD | 	jmp	#LR__0271
04464                 | LR__0263
04464     01 00 00 FF 
04468     06 29 06 F6 | 	mov	local06, ##774
0446c     50 00 90 FD | 	jmp	#LR__0271
04470                 | LR__0264
04470     01 00 00 FF 
04474     07 29 06 F6 | 	mov	local06, ##775
04478     44 00 90 FD | 	jmp	#LR__0271
0447c                 | LR__0265
0447c     01 00 00 FF 
04480     08 29 06 F6 | 	mov	local06, ##776
04484     38 00 90 FD | 	jmp	#LR__0271
04488                 | LR__0266
04488     01 00 00 FF 
0448c     09 29 06 F6 | 	mov	local06, ##777
04490     2C 00 90 FD | 	jmp	#LR__0271
04494                 | LR__0267
04494     01 00 00 FF 
04498     0A 29 06 F6 | 	mov	local06, ##778
0449c     20 00 90 FD | 	jmp	#LR__0271
044a0                 | LR__0268
044a0     01 00 00 FF 
044a4     0B 29 06 F6 | 	mov	local06, ##779
044a8     14 00 90 FD | 	jmp	#LR__0271
044ac                 | LR__0269
044ac     01 00 00 FF 
044b0     0B 29 06 F6 | 	mov	local06, ##779
044b4     08 00 90 FD | 	jmp	#LR__0271
044b8                 | LR__0270
044b8     00 FA 05 F6 | 	mov	result1, #0
044bc     28 00 90 FD | 	jmp	#LR__0273
044c0                 | LR__0271
044c0                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
044c0     FF FF 7F FF 
044c4     FF 25 56 F2 | 	cmps	local04, ##-1 wc
044c8     18 00 90 CD |  if_b	jmp	#LR__0272
044cc     0A 24 56 F2 | 	cmps	local04, #10 wc
044d0     12 2B 02 C6 |  if_b	mov	local07, local04
044d4     01 2A 66 C0 |  if_b	shl	local07, #1
044d8     12 2B 02 C1 |  if_b	add	local07, local04
044dc     02 2A 66 C0 |  if_b	shl	local07, #2
044e0     15 29 02 C1 |  if_b	add	local06, local07
044e4                 | LR__0272
044e4                 | ' return token
044e4     14 FB 01 F6 | 	mov	result1, local06
044e8                 | LR__0273
044e8     A7 F0 03 F6 | 	mov	ptra, fp
044ec     B2 00 A0 FD | 	call	#popregs_
044f0                 | _isnotename_ret
044f0     2D 00 64 FD | 	ret
044f4                 | 
044f4                 | ' 
044f4                 | ' ' Check if the part is a separator, return a token or 0 if not found
044f4                 | ' 
044f4                 | ' function isseparator(s as string) as ubyte
044f4                 | _isseparator
044f4     01 4A 05 F6 | 	mov	COUNT_, #1
044f8     A8 00 A0 FD | 	call	#pushregs_
044fc                 | ' 
044fc                 | ' select case s
044fc     09 1F 02 F6 | 	mov	local01, arg01
04500     81 01 00 FF 
04504     60 14 06 F6 | 	mov	arg02, ##@LR__5128
04508     0F 13 02 F6 | 	mov	arg01, local01
0450c     48 C3 B1 FD | 	call	#__system___string_cmp
04510     00 FA 0D F2 | 	cmp	result1, #0 wz
04514     54 01 90 AD |  if_e	jmp	#LR__0280
04518     81 01 00 FF 
0451c     62 14 06 F6 | 	mov	arg02, ##@LR__5129
04520     0F 13 02 F6 | 	mov	arg01, local01
04524     30 C3 B1 FD | 	call	#__system___string_cmp
04528     00 FA 0D F2 | 	cmp	result1, #0 wz
0452c     44 01 90 AD |  if_e	jmp	#LR__0281
04530     81 01 00 FF 
04534     64 14 06 F6 | 	mov	arg02, ##@LR__5130
04538     0F 13 02 F6 | 	mov	arg01, local01
0453c     18 C3 B1 FD | 	call	#__system___string_cmp
04540     00 FA 0D F2 | 	cmp	result1, #0 wz
04544     34 01 90 AD |  if_e	jmp	#LR__0282
04548     81 01 00 FF 
0454c     66 14 06 F6 | 	mov	arg02, ##@LR__5131
04550     0F 13 02 F6 | 	mov	arg01, local01
04554     00 C3 B1 FD | 	call	#__system___string_cmp
04558     00 FA 0D F2 | 	cmp	result1, #0 wz
0455c     24 01 90 AD |  if_e	jmp	#LR__0283
04560     81 01 00 FF 
04564     68 14 06 F6 | 	mov	arg02, ##@LR__5132
04568     0F 13 02 F6 | 	mov	arg01, local01
0456c     E8 C2 B1 FD | 	call	#__system___string_cmp
04570     00 FA 0D F2 | 	cmp	result1, #0 wz
04574     14 01 90 AD |  if_e	jmp	#LR__0284
04578     81 01 00 FF 
0457c     6A 14 06 F6 | 	mov	arg02, ##@LR__5133
04580     0F 13 02 F6 | 	mov	arg01, local01
04584     D0 C2 B1 FD | 	call	#__system___string_cmp
04588     00 FA 0D F2 | 	cmp	result1, #0 wz
0458c     04 01 90 AD |  if_e	jmp	#LR__0285
04590     81 01 00 FF 
04594     6C 14 06 F6 | 	mov	arg02, ##@LR__5134
04598     0F 13 02 F6 | 	mov	arg01, local01
0459c     B8 C2 B1 FD | 	call	#__system___string_cmp
045a0     00 FA 0D F2 | 	cmp	result1, #0 wz
045a4     F4 00 90 AD |  if_e	jmp	#LR__0286
045a8     81 01 00 FF 
045ac     6E 14 06 F6 | 	mov	arg02, ##@LR__5135
045b0     0F 13 02 F6 | 	mov	arg01, local01
045b4     A0 C2 B1 FD | 	call	#__system___string_cmp
045b8     00 FA 0D F2 | 	cmp	result1, #0 wz
045bc     E4 00 90 AD |  if_e	jmp	#LR__0287
045c0     81 01 00 FF 
045c4     70 14 06 F6 | 	mov	arg02, ##@LR__5136
045c8     0F 13 02 F6 | 	mov	arg01, local01
045cc     88 C2 B1 FD | 	call	#__system___string_cmp
045d0     00 FA 0D F2 | 	cmp	result1, #0 wz
045d4     D4 00 90 AD |  if_e	jmp	#LR__0288
045d8     81 01 00 FF 
045dc     72 14 06 F6 | 	mov	arg02, ##@LR__5137
045e0     0F 13 02 F6 | 	mov	arg01, local01
045e4     70 C2 B1 FD | 	call	#__system___string_cmp
045e8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ec     C4 00 90 AD |  if_e	jmp	#LR__0289
045f0     81 01 00 FF 
045f4     74 14 06 F6 | 	mov	arg02, ##@LR__5138
045f8     0F 13 02 F6 | 	mov	arg01, local01
045fc     58 C2 B1 FD | 	call	#__system___string_cmp
04600     00 FA 0D F2 | 	cmp	result1, #0 wz
04604     B4 00 90 AD |  if_e	jmp	#LR__0290
04608     81 01 00 FF 
0460c     76 14 06 F6 | 	mov	arg02, ##@LR__5139
04610     0F 13 02 F6 | 	mov	arg01, local01
04614     40 C2 B1 FD | 	call	#__system___string_cmp
04618     00 FA 0D F2 | 	cmp	result1, #0 wz
0461c     A4 00 90 AD |  if_e	jmp	#LR__0291
04620     81 01 00 FF 
04624     78 14 06 F6 | 	mov	arg02, ##@LR__5140
04628     0F 13 02 F6 | 	mov	arg01, local01
0462c     28 C2 B1 FD | 	call	#__system___string_cmp
04630     00 FA 0D F2 | 	cmp	result1, #0 wz
04634     94 00 90 AD |  if_e	jmp	#LR__0292
04638     81 01 00 FF 
0463c     7A 14 06 F6 | 	mov	arg02, ##@LR__5141
04640     0F 13 02 F6 | 	mov	arg01, local01
04644     10 C2 B1 FD | 	call	#__system___string_cmp
04648     00 FA 0D F2 | 	cmp	result1, #0 wz
0464c     84 00 90 AD |  if_e	jmp	#LR__0293
04650     81 01 00 FF 
04654     7C 14 06 F6 | 	mov	arg02, ##@LR__5142
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     F8 C1 B1 FD | 	call	#__system___string_cmp
04660     00 FA 0D F2 | 	cmp	result1, #0 wz
04664     74 00 90 AD |  if_e	jmp	#LR__0294
04668     78 00 90 FD | 	jmp	#LR__0295
0466c                 | LR__0280
0466c     01 FA 05 F6 | 	mov	result1, #1
04670     74 00 90 FD | 	jmp	#LR__0296
04674                 | LR__0281
04674     02 FA 05 F6 | 	mov	result1, #2
04678     6C 00 90 FD | 	jmp	#LR__0296
0467c                 | LR__0282
0467c     1B FA 05 F6 | 	mov	result1, #27
04680     64 00 90 FD | 	jmp	#LR__0296
04684                 | LR__0283
04684     11 FA 05 F6 | 	mov	result1, #17
04688     5C 00 90 FD | 	jmp	#LR__0296
0468c                 | LR__0284
0468c     05 FA 05 F6 | 	mov	result1, #5
04690     54 00 90 FD | 	jmp	#LR__0296
04694                 | LR__0285
04694     06 FA 05 F6 | 	mov	result1, #6
04698     4C 00 90 FD | 	jmp	#LR__0296
0469c                 | LR__0286
0469c     12 FA 05 F6 | 	mov	result1, #18
046a0     44 00 90 FD | 	jmp	#LR__0296
046a4                 | LR__0287
046a4     13 FA 05 F6 | 	mov	result1, #19
046a8     3C 00 90 FD | 	jmp	#LR__0296
046ac                 | LR__0288
046ac     0C FA 05 F6 | 	mov	result1, #12
046b0     34 00 90 FD | 	jmp	#LR__0296
046b4                 | LR__0289
046b4     14 FA 05 F6 | 	mov	result1, #20
046b8     2C 00 90 FD | 	jmp	#LR__0296
046bc                 | LR__0290
046bc     15 FA 05 F6 | 	mov	result1, #21
046c0     24 00 90 FD | 	jmp	#LR__0296
046c4                 | LR__0291
046c4     16 FA 05 F6 | 	mov	result1, #22
046c8     1C 00 90 FD | 	jmp	#LR__0296
046cc                 | LR__0292
046cc     FF FB 05 F6 | 	mov	result1, #511
046d0     14 00 90 FD | 	jmp	#LR__0296
046d4                 | LR__0293
046d4     0F FA 05 F6 | 	mov	result1, #15
046d8     0C 00 90 FD | 	jmp	#LR__0296
046dc                 | LR__0294
046dc     10 FA 05 F6 | 	mov	result1, #16
046e0     04 00 90 FD | 	jmp	#LR__0296
046e4                 | LR__0295
046e4     00 FA 05 F6 | 	mov	result1, #0
046e8                 | LR__0296
046e8     A7 F0 03 F6 | 	mov	ptra, fp
046ec     B2 00 A0 FD | 	call	#popregs_
046f0                 | _isseparator_ret
046f0     2D 00 64 FD | 	ret
046f4                 | 
046f4                 | ' 
046f4                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
046f4                 | ' 
046f4                 | ' function iscommand(s as string) as ubyte
046f4                 | _iscommand
046f4     01 4A 05 F6 | 	mov	COUNT_, #1
046f8     A8 00 A0 FD | 	call	#pushregs_
046fc                 | ' 
046fc                 | ' select case s
046fc     09 1F 02 F6 | 	mov	local01, arg01
04700     81 01 00 FF 
04704     80 14 06 F6 | 	mov	arg02, ##@LR__5144
04708     0F 13 02 F6 | 	mov	arg01, local01
0470c     48 C1 B1 FD | 	call	#__system___string_cmp
04710     00 FA 0D F2 | 	cmp	result1, #0 wz
04714     5C 0B 90 AD |  if_e	jmp	#LR__0300
04718     81 01 00 FF 
0471c     85 14 06 F6 | 	mov	arg02, ##@LR__5145
04720     0F 13 02 F6 | 	mov	arg01, local01
04724     30 C1 B1 FD | 	call	#__system___string_cmp
04728     00 FA 0D F2 | 	cmp	result1, #0 wz
0472c     4C 0B 90 AD |  if_e	jmp	#LR__0301
04730     81 01 00 FF 
04734     88 14 06 F6 | 	mov	arg02, ##@LR__5146
04738     0F 13 02 F6 | 	mov	arg01, local01
0473c     18 C1 B1 FD | 	call	#__system___string_cmp
04740     00 FA 0D F2 | 	cmp	result1, #0 wz
04744     3C 0B 90 AD |  if_e	jmp	#LR__0302
04748     81 01 00 FF 
0474c     8C 14 06 F6 | 	mov	arg02, ##@LR__5147
04750     0F 13 02 F6 | 	mov	arg01, local01
04754     00 C1 B1 FD | 	call	#__system___string_cmp
04758     00 FA 0D F2 | 	cmp	result1, #0 wz
0475c     2C 0B 90 AD |  if_e	jmp	#LR__0303
04760     81 01 00 FF 
04764     91 14 06 F6 | 	mov	arg02, ##@LR__5148
04768     0F 13 02 F6 | 	mov	arg01, local01
0476c     E8 C0 B1 FD | 	call	#__system___string_cmp
04770     00 FA 0D F2 | 	cmp	result1, #0 wz
04774     1C 0B 90 AD |  if_e	jmp	#LR__0304
04778     81 01 00 FF 
0477c     95 14 06 F6 | 	mov	arg02, ##@LR__5149
04780     0F 13 02 F6 | 	mov	arg01, local01
04784     D0 C0 B1 FD | 	call	#__system___string_cmp
04788     00 FA 0D F2 | 	cmp	result1, #0 wz
0478c     0C 0B 90 AD |  if_e	jmp	#LR__0305
04790     81 01 00 FF 
04794     A0 14 06 F6 | 	mov	arg02, ##@LR__5150
04798     0F 13 02 F6 | 	mov	arg01, local01
0479c     B8 C0 B1 FD | 	call	#__system___string_cmp
047a0     00 FA 0D F2 | 	cmp	result1, #0 wz
047a4     FC 0A 90 AD |  if_e	jmp	#LR__0306
047a8     81 01 00 FF 
047ac     A4 14 06 F6 | 	mov	arg02, ##@LR__5151
047b0     0F 13 02 F6 | 	mov	arg01, local01
047b4     A0 C0 B1 FD | 	call	#__system___string_cmp
047b8     00 FA 0D F2 | 	cmp	result1, #0 wz
047bc     EC 0A 90 AD |  if_e	jmp	#LR__0307
047c0     81 01 00 FF 
047c4     AE 14 06 F6 | 	mov	arg02, ##@LR__5152
047c8     0F 13 02 F6 | 	mov	arg01, local01
047cc     88 C0 B1 FD | 	call	#__system___string_cmp
047d0     00 FA 0D F2 | 	cmp	result1, #0 wz
047d4     DC 0A 90 AD |  if_e	jmp	#LR__0308
047d8     81 01 00 FF 
047dc     B2 14 06 F6 | 	mov	arg02, ##@LR__5153
047e0     0F 13 02 F6 | 	mov	arg01, local01
047e4     70 C0 B1 FD | 	call	#__system___string_cmp
047e8     00 FA 0D F2 | 	cmp	result1, #0 wz
047ec     CC 0A 90 AD |  if_e	jmp	#LR__0309
047f0     81 01 00 FF 
047f4     BC 14 06 F6 | 	mov	arg02, ##@LR__5154
047f8     0F 13 02 F6 | 	mov	arg01, local01
047fc     58 C0 B1 FD | 	call	#__system___string_cmp
04800     00 FA 0D F2 | 	cmp	result1, #0 wz
04804     BC 0A 90 AD |  if_e	jmp	#LR__0310
04808     81 01 00 FF 
0480c     C0 14 06 F6 | 	mov	arg02, ##@LR__5155
04810     0F 13 02 F6 | 	mov	arg01, local01
04814     40 C0 B1 FD | 	call	#__system___string_cmp
04818     00 FA 0D F2 | 	cmp	result1, #0 wz
0481c     AC 0A 90 AD |  if_e	jmp	#LR__0311
04820     81 01 00 FF 
04824     CB 14 06 F6 | 	mov	arg02, ##@LR__5156
04828     0F 13 02 F6 | 	mov	arg01, local01
0482c     28 C0 B1 FD | 	call	#__system___string_cmp
04830     00 FA 0D F2 | 	cmp	result1, #0 wz
04834     9C 0A 90 AD |  if_e	jmp	#LR__0312
04838     81 01 00 FF 
0483c     CF 14 06 F6 | 	mov	arg02, ##@LR__5157
04840     0F 13 02 F6 | 	mov	arg01, local01
04844     10 C0 B1 FD | 	call	#__system___string_cmp
04848     00 FA 0D F2 | 	cmp	result1, #0 wz
0484c     8C 0A 90 AD |  if_e	jmp	#LR__0313
04850     81 01 00 FF 
04854     D6 14 06 F6 | 	mov	arg02, ##@LR__5158
04858     0F 13 02 F6 | 	mov	arg01, local01
0485c     F8 BF B1 FD | 	call	#__system___string_cmp
04860     00 FA 0D F2 | 	cmp	result1, #0 wz
04864     7C 0A 90 AD |  if_e	jmp	#LR__0314
04868     81 01 00 FF 
0486c     DA 14 06 F6 | 	mov	arg02, ##@LR__5159
04870     0F 13 02 F6 | 	mov	arg01, local01
04874     E0 BF B1 FD | 	call	#__system___string_cmp
04878     00 FA 0D F2 | 	cmp	result1, #0 wz
0487c     6C 0A 90 AD |  if_e	jmp	#LR__0315
04880     81 01 00 FF 
04884     E0 14 06 F6 | 	mov	arg02, ##@LR__5160
04888     0F 13 02 F6 | 	mov	arg01, local01
0488c     C8 BF B1 FD | 	call	#__system___string_cmp
04890     00 FA 0D F2 | 	cmp	result1, #0 wz
04894     5C 0A 90 AD |  if_e	jmp	#LR__0316
04898     81 01 00 FF 
0489c     E6 14 06 F6 | 	mov	arg02, ##@LR__5161
048a0     0F 13 02 F6 | 	mov	arg01, local01
048a4     B0 BF B1 FD | 	call	#__system___string_cmp
048a8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ac     4C 0A 90 AD |  if_e	jmp	#LR__0317
048b0     81 01 00 FF 
048b4     EA 14 06 F6 | 	mov	arg02, ##@LR__5162
048b8     0F 13 02 F6 | 	mov	arg01, local01
048bc     98 BF B1 FD | 	call	#__system___string_cmp
048c0     00 FA 0D F2 | 	cmp	result1, #0 wz
048c4     3C 0A 90 AD |  if_e	jmp	#LR__0318
048c8     81 01 00 FF 
048cc     F0 14 06 F6 | 	mov	arg02, ##@LR__5163
048d0     0F 13 02 F6 | 	mov	arg01, local01
048d4     80 BF B1 FD | 	call	#__system___string_cmp
048d8     00 FA 0D F2 | 	cmp	result1, #0 wz
048dc     2C 0A 90 AD |  if_e	jmp	#LR__0319
048e0     81 01 00 FF 
048e4     F3 14 06 F6 | 	mov	arg02, ##@LR__5164
048e8     0F 13 02 F6 | 	mov	arg01, local01
048ec     68 BF B1 FD | 	call	#__system___string_cmp
048f0     00 FA 0D F2 | 	cmp	result1, #0 wz
048f4     1C 0A 90 AD |  if_e	jmp	#LR__0320
048f8     81 01 00 FF 
048fc     F9 14 06 F6 | 	mov	arg02, ##@LR__5165
04900     0F 13 02 F6 | 	mov	arg01, local01
04904     50 BF B1 FD | 	call	#__system___string_cmp
04908     00 FA 0D F2 | 	cmp	result1, #0 wz
0490c     0C 0A 90 AD |  if_e	jmp	#LR__0321
04910     81 01 00 FF 
04914     FD 14 06 F6 | 	mov	arg02, ##@LR__5166
04918     0F 13 02 F6 | 	mov	arg01, local01
0491c     38 BF B1 FD | 	call	#__system___string_cmp
04920     00 FA 0D F2 | 	cmp	result1, #0 wz
04924     FC 09 90 AD |  if_e	jmp	#LR__0322
04928     81 01 00 FF 
0492c     04 15 06 F6 | 	mov	arg02, ##@LR__5167
04930     0F 13 02 F6 | 	mov	arg01, local01
04934     20 BF B1 FD | 	call	#__system___string_cmp
04938     00 FA 0D F2 | 	cmp	result1, #0 wz
0493c     EC 09 90 AD |  if_e	jmp	#LR__0323
04940     81 01 00 FF 
04944     0B 15 06 F6 | 	mov	arg02, ##@LR__5168
04948     0F 13 02 F6 | 	mov	arg01, local01
0494c     08 BF B1 FD | 	call	#__system___string_cmp
04950     00 FA 0D F2 | 	cmp	result1, #0 wz
04954     DC 09 90 AD |  if_e	jmp	#LR__0324
04958     81 01 00 FF 
0495c     12 15 06 F6 | 	mov	arg02, ##@LR__5169
04960     0F 13 02 F6 | 	mov	arg01, local01
04964     F0 BE B1 FD | 	call	#__system___string_cmp
04968     00 FA 0D F2 | 	cmp	result1, #0 wz
0496c     CC 09 90 AD |  if_e	jmp	#LR__0325
04970     81 01 00 FF 
04974     1C 15 06 F6 | 	mov	arg02, ##@LR__5170
04978     0F 13 02 F6 | 	mov	arg01, local01
0497c     D8 BE B1 FD | 	call	#__system___string_cmp
04980     00 FA 0D F2 | 	cmp	result1, #0 wz
04984     BC 09 90 AD |  if_e	jmp	#LR__0326
04988     81 01 00 FF 
0498c     20 15 06 F6 | 	mov	arg02, ##@LR__5171
04990     0F 13 02 F6 | 	mov	arg01, local01
04994     C0 BE B1 FD | 	call	#__system___string_cmp
04998     00 FA 0D F2 | 	cmp	result1, #0 wz
0499c     AC 09 90 AD |  if_e	jmp	#LR__0327
049a0     81 01 00 FF 
049a4     24 15 06 F6 | 	mov	arg02, ##@LR__5172
049a8     0F 13 02 F6 | 	mov	arg01, local01
049ac     A8 BE B1 FD | 	call	#__system___string_cmp
049b0     00 FA 0D F2 | 	cmp	result1, #0 wz
049b4     9C 09 90 AD |  if_e	jmp	#LR__0328
049b8     81 01 00 FF 
049bc     28 15 06 F6 | 	mov	arg02, ##@LR__5173
049c0     0F 13 02 F6 | 	mov	arg01, local01
049c4     90 BE B1 FD | 	call	#__system___string_cmp
049c8     00 FA 0D F2 | 	cmp	result1, #0 wz
049cc     8C 09 90 AD |  if_e	jmp	#LR__0329
049d0     81 01 00 FF 
049d4     2C 15 06 F6 | 	mov	arg02, ##@LR__5174
049d8     0F 13 02 F6 | 	mov	arg01, local01
049dc     78 BE B1 FD | 	call	#__system___string_cmp
049e0     00 FA 0D F2 | 	cmp	result1, #0 wz
049e4     7C 09 90 AD |  if_e	jmp	#LR__0330
049e8     81 01 00 FF 
049ec     32 15 06 F6 | 	mov	arg02, ##@LR__5175
049f0     0F 13 02 F6 | 	mov	arg01, local01
049f4     60 BE B1 FD | 	call	#__system___string_cmp
049f8     00 FA 0D F2 | 	cmp	result1, #0 wz
049fc     6C 09 90 AD |  if_e	jmp	#LR__0331
04a00     81 01 00 FF 
04a04     37 15 06 F6 | 	mov	arg02, ##@LR__5176
04a08     0F 13 02 F6 | 	mov	arg01, local01
04a0c     48 BE B1 FD | 	call	#__system___string_cmp
04a10     00 FA 0D F2 | 	cmp	result1, #0 wz
04a14     5C 09 90 AD |  if_e	jmp	#LR__0332
04a18     81 01 00 FF 
04a1c     3B 15 06 F6 | 	mov	arg02, ##@LR__5177
04a20     0F 13 02 F6 | 	mov	arg01, local01
04a24     30 BE B1 FD | 	call	#__system___string_cmp
04a28     00 FA 0D F2 | 	cmp	result1, #0 wz
04a2c     4C 09 90 AD |  if_e	jmp	#LR__0333
04a30     81 01 00 FF 
04a34     40 15 06 F6 | 	mov	arg02, ##@LR__5178
04a38     0F 13 02 F6 | 	mov	arg01, local01
04a3c     18 BE B1 FD | 	call	#__system___string_cmp
04a40     00 FA 0D F2 | 	cmp	result1, #0 wz
04a44     3C 09 90 AD |  if_e	jmp	#LR__0334
04a48     81 01 00 FF 
04a4c     44 15 06 F6 | 	mov	arg02, ##@LR__5179
04a50     0F 13 02 F6 | 	mov	arg01, local01
04a54     00 BE B1 FD | 	call	#__system___string_cmp
04a58     00 FA 0D F2 | 	cmp	result1, #0 wz
04a5c     2C 09 90 AD |  if_e	jmp	#LR__0335
04a60     81 01 00 FF 
04a64     4A 15 06 F6 | 	mov	arg02, ##@LR__5180
04a68     0F 13 02 F6 | 	mov	arg01, local01
04a6c     E8 BD B1 FD | 	call	#__system___string_cmp
04a70     00 FA 0D F2 | 	cmp	result1, #0 wz
04a74     1C 09 90 AD |  if_e	jmp	#LR__0336
04a78     81 01 00 FF 
04a7c     4D 15 06 F6 | 	mov	arg02, ##@LR__5181
04a80     0F 13 02 F6 | 	mov	arg01, local01
04a84     D0 BD B1 FD | 	call	#__system___string_cmp
04a88     00 FA 0D F2 | 	cmp	result1, #0 wz
04a8c     0C 09 90 AD |  if_e	jmp	#LR__0337
04a90     81 01 00 FF 
04a94     55 15 06 F6 | 	mov	arg02, ##@LR__5182
04a98     0F 13 02 F6 | 	mov	arg01, local01
04a9c     B8 BD B1 FD | 	call	#__system___string_cmp
04aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa4     FC 08 90 AD |  if_e	jmp	#LR__0338
04aa8     81 01 00 FF 
04aac     59 15 06 F6 | 	mov	arg02, ##@LR__5183
04ab0     0F 13 02 F6 | 	mov	arg01, local01
04ab4     A0 BD B1 FD | 	call	#__system___string_cmp
04ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
04abc     EC 08 90 AD |  if_e	jmp	#LR__0339
04ac0     81 01 00 FF 
04ac4     5E 15 06 F6 | 	mov	arg02, ##@LR__5184
04ac8     0F 13 02 F6 | 	mov	arg01, local01
04acc     88 BD B1 FD | 	call	#__system___string_cmp
04ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad4     DC 08 90 AD |  if_e	jmp	#LR__0340
04ad8     81 01 00 FF 
04adc     62 15 06 F6 | 	mov	arg02, ##@LR__5185
04ae0     0F 13 02 F6 | 	mov	arg01, local01
04ae4     70 BD B1 FD | 	call	#__system___string_cmp
04ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
04aec     CC 08 90 AD |  if_e	jmp	#LR__0341
04af0     81 01 00 FF 
04af4     67 15 06 F6 | 	mov	arg02, ##@LR__5186
04af8     0F 13 02 F6 | 	mov	arg01, local01
04afc     58 BD B1 FD | 	call	#__system___string_cmp
04b00     00 FA 0D F2 | 	cmp	result1, #0 wz
04b04     BC 08 90 AD |  if_e	jmp	#LR__0342
04b08     81 01 00 FF 
04b0c     6B 15 06 F6 | 	mov	arg02, ##@LR__5187
04b10     0F 13 02 F6 | 	mov	arg01, local01
04b14     40 BD B1 FD | 	call	#__system___string_cmp
04b18     00 FA 0D F2 | 	cmp	result1, #0 wz
04b1c     AC 08 90 AD |  if_e	jmp	#LR__0343
04b20     81 01 00 FF 
04b24     6E 15 06 F6 | 	mov	arg02, ##@LR__5188
04b28     0F 13 02 F6 | 	mov	arg01, local01
04b2c     28 BD B1 FD | 	call	#__system___string_cmp
04b30     00 FA 0D F2 | 	cmp	result1, #0 wz
04b34     9C 08 90 AD |  if_e	jmp	#LR__0344
04b38     81 01 00 FF 
04b3c     74 15 06 F6 | 	mov	arg02, ##@LR__5189
04b40     0F 13 02 F6 | 	mov	arg01, local01
04b44     10 BD B1 FD | 	call	#__system___string_cmp
04b48     00 FA 0D F2 | 	cmp	result1, #0 wz
04b4c     8C 08 90 AD |  if_e	jmp	#LR__0345
04b50     81 01 00 FF 
04b54     78 15 06 F6 | 	mov	arg02, ##@LR__5190
04b58     0F 13 02 F6 | 	mov	arg01, local01
04b5c     F8 BC B1 FD | 	call	#__system___string_cmp
04b60     00 FA 0D F2 | 	cmp	result1, #0 wz
04b64     7C 08 90 AD |  if_e	jmp	#LR__0346
04b68     81 01 00 FF 
04b6c     7C 15 06 F6 | 	mov	arg02, ##@LR__5191
04b70     0F 13 02 F6 | 	mov	arg01, local01
04b74     E0 BC B1 FD | 	call	#__system___string_cmp
04b78     00 FA 0D F2 | 	cmp	result1, #0 wz
04b7c     6C 08 90 AD |  if_e	jmp	#LR__0347
04b80     81 01 00 FF 
04b84     82 15 06 F6 | 	mov	arg02, ##@LR__5192
04b88     0F 13 02 F6 | 	mov	arg01, local01
04b8c     C8 BC B1 FD | 	call	#__system___string_cmp
04b90     00 FA 0D F2 | 	cmp	result1, #0 wz
04b94     5C 08 90 AD |  if_e	jmp	#LR__0348
04b98     81 01 00 FF 
04b9c     87 15 06 F6 | 	mov	arg02, ##@LR__5193
04ba0     0F 13 02 F6 | 	mov	arg01, local01
04ba4     B0 BC B1 FD | 	call	#__system___string_cmp
04ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bac     4C 08 90 AD |  if_e	jmp	#LR__0349
04bb0     81 01 00 FF 
04bb4     8A 15 06 F6 | 	mov	arg02, ##@LR__5194
04bb8     0F 13 02 F6 | 	mov	arg01, local01
04bbc     98 BC B1 FD | 	call	#__system___string_cmp
04bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc4     3C 08 90 AD |  if_e	jmp	#LR__0350
04bc8     81 01 00 FF 
04bcc     8D 15 06 F6 | 	mov	arg02, ##@LR__5195
04bd0     0F 13 02 F6 | 	mov	arg01, local01
04bd4     80 BC B1 FD | 	call	#__system___string_cmp
04bd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bdc     2C 08 90 AD |  if_e	jmp	#LR__0351
04be0     81 01 00 FF 
04be4     91 15 06 F6 | 	mov	arg02, ##@LR__5196
04be8     0F 13 02 F6 | 	mov	arg01, local01
04bec     68 BC B1 FD | 	call	#__system___string_cmp
04bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf4     1C 08 90 AD |  if_e	jmp	#LR__0352
04bf8     81 01 00 FF 
04bfc     94 15 06 F6 | 	mov	arg02, ##@LR__5197
04c00     0F 13 02 F6 | 	mov	arg01, local01
04c04     50 BC B1 FD | 	call	#__system___string_cmp
04c08     00 FA 0D F2 | 	cmp	result1, #0 wz
04c0c     0C 08 90 AD |  if_e	jmp	#LR__0353
04c10     81 01 00 FF 
04c14     99 15 06 F6 | 	mov	arg02, ##@LR__5198
04c18     0F 13 02 F6 | 	mov	arg01, local01
04c1c     38 BC B1 FD | 	call	#__system___string_cmp
04c20     00 FA 0D F2 | 	cmp	result1, #0 wz
04c24     FC 07 90 AD |  if_e	jmp	#LR__0354
04c28     81 01 00 FF 
04c2c     9C 15 06 F6 | 	mov	arg02, ##@LR__5199
04c30     0F 13 02 F6 | 	mov	arg01, local01
04c34     20 BC B1 FD | 	call	#__system___string_cmp
04c38     00 FA 0D F2 | 	cmp	result1, #0 wz
04c3c     EC 07 90 AD |  if_e	jmp	#LR__0355
04c40     81 01 00 FF 
04c44     A1 15 06 F6 | 	mov	arg02, ##@LR__5200
04c48     0F 13 02 F6 | 	mov	arg01, local01
04c4c     08 BC B1 FD | 	call	#__system___string_cmp
04c50     00 FA 0D F2 | 	cmp	result1, #0 wz
04c54     DC 07 90 AD |  if_e	jmp	#LR__0356
04c58     81 01 00 FF 
04c5c     A5 15 06 F6 | 	mov	arg02, ##@LR__5201
04c60     0F 13 02 F6 | 	mov	arg01, local01
04c64     F0 BB B1 FD | 	call	#__system___string_cmp
04c68     00 FA 0D F2 | 	cmp	result1, #0 wz
04c6c     CC 07 90 AD |  if_e	jmp	#LR__0357
04c70     81 01 00 FF 
04c74     AB 15 06 F6 | 	mov	arg02, ##@LR__5202
04c78     0F 13 02 F6 | 	mov	arg01, local01
04c7c     D8 BB B1 FD | 	call	#__system___string_cmp
04c80     00 FA 0D F2 | 	cmp	result1, #0 wz
04c84     BC 07 90 AD |  if_e	jmp	#LR__0358
04c88     81 01 00 FF 
04c8c     B0 15 06 F6 | 	mov	arg02, ##@LR__5203
04c90     0F 13 02 F6 | 	mov	arg01, local01
04c94     C0 BB B1 FD | 	call	#__system___string_cmp
04c98     00 FA 0D F2 | 	cmp	result1, #0 wz
04c9c     AC 07 90 AD |  if_e	jmp	#LR__0359
04ca0     81 01 00 FF 
04ca4     B3 15 06 F6 | 	mov	arg02, ##@LR__5204
04ca8     0F 13 02 F6 | 	mov	arg01, local01
04cac     A8 BB B1 FD | 	call	#__system___string_cmp
04cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb4     9C 07 90 AD |  if_e	jmp	#LR__0360
04cb8     81 01 00 FF 
04cbc     B9 15 06 F6 | 	mov	arg02, ##@LR__5205
04cc0     0F 13 02 F6 | 	mov	arg01, local01
04cc4     90 BB B1 FD | 	call	#__system___string_cmp
04cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ccc     8C 07 90 AD |  if_e	jmp	#LR__0361
04cd0     81 01 00 FF 
04cd4     BD 15 06 F6 | 	mov	arg02, ##@LR__5206
04cd8     0F 13 02 F6 | 	mov	arg01, local01
04cdc     78 BB B1 FD | 	call	#__system___string_cmp
04ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce4     7C 07 90 AD |  if_e	jmp	#LR__0362
04ce8     81 01 00 FF 
04cec     C2 15 06 F6 | 	mov	arg02, ##@LR__5207
04cf0     0F 13 02 F6 | 	mov	arg01, local01
04cf4     60 BB B1 FD | 	call	#__system___string_cmp
04cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cfc     6C 07 90 AD |  if_e	jmp	#LR__0363
04d00     81 01 00 FF 
04d04     C5 15 06 F6 | 	mov	arg02, ##@LR__5208
04d08     0F 13 02 F6 | 	mov	arg01, local01
04d0c     48 BB B1 FD | 	call	#__system___string_cmp
04d10     00 FA 0D F2 | 	cmp	result1, #0 wz
04d14     5C 07 90 AD |  if_e	jmp	#LR__0364
04d18     81 01 00 FF 
04d1c     CA 15 06 F6 | 	mov	arg02, ##@LR__5209
04d20     0F 13 02 F6 | 	mov	arg01, local01
04d24     30 BB B1 FD | 	call	#__system___string_cmp
04d28     00 FA 0D F2 | 	cmp	result1, #0 wz
04d2c     4C 07 90 AD |  if_e	jmp	#LR__0365
04d30     81 01 00 FF 
04d34     D0 15 06 F6 | 	mov	arg02, ##@LR__5210
04d38     0F 13 02 F6 | 	mov	arg01, local01
04d3c     18 BB B1 FD | 	call	#__system___string_cmp
04d40     00 FA 0D F2 | 	cmp	result1, #0 wz
04d44     3C 07 90 AD |  if_e	jmp	#LR__0366
04d48     81 01 00 FF 
04d4c     D4 15 06 F6 | 	mov	arg02, ##@LR__5211
04d50     0F 13 02 F6 | 	mov	arg01, local01
04d54     00 BB B1 FD | 	call	#__system___string_cmp
04d58     00 FA 0D F2 | 	cmp	result1, #0 wz
04d5c     2C 07 90 AD |  if_e	jmp	#LR__0367
04d60     81 01 00 FF 
04d64     DD 15 06 F6 | 	mov	arg02, ##@LR__5212
04d68     0F 13 02 F6 | 	mov	arg01, local01
04d6c     E8 BA B1 FD | 	call	#__system___string_cmp
04d70     00 FA 0D F2 | 	cmp	result1, #0 wz
04d74     1C 07 90 AD |  if_e	jmp	#LR__0368
04d78     81 01 00 FF 
04d7c     E3 15 06 F6 | 	mov	arg02, ##@LR__5213
04d80     0F 13 02 F6 | 	mov	arg01, local01
04d84     D0 BA B1 FD | 	call	#__system___string_cmp
04d88     00 FA 0D F2 | 	cmp	result1, #0 wz
04d8c     0C 07 90 AD |  if_e	jmp	#LR__0369
04d90     81 01 00 FF 
04d94     E9 15 06 F6 | 	mov	arg02, ##@LR__5214
04d98     0F 13 02 F6 | 	mov	arg01, local01
04d9c     B8 BA B1 FD | 	call	#__system___string_cmp
04da0     00 FA 0D F2 | 	cmp	result1, #0 wz
04da4     FC 06 90 AD |  if_e	jmp	#LR__0370
04da8     81 01 00 FF 
04dac     F2 15 06 F6 | 	mov	arg02, ##@LR__5215
04db0     0F 13 02 F6 | 	mov	arg01, local01
04db4     A0 BA B1 FD | 	call	#__system___string_cmp
04db8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dbc     EC 06 90 AD |  if_e	jmp	#LR__0371
04dc0     81 01 00 FF 
04dc4     FC 15 06 F6 | 	mov	arg02, ##@LR__5216
04dc8     0F 13 02 F6 | 	mov	arg01, local01
04dcc     88 BA B1 FD | 	call	#__system___string_cmp
04dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04dd4     DC 06 90 AD |  if_e	jmp	#LR__0372
04dd8     82 01 00 FF 
04ddc     05 14 06 F6 | 	mov	arg02, ##@LR__5217
04de0     0F 13 02 F6 | 	mov	arg01, local01
04de4     70 BA B1 FD | 	call	#__system___string_cmp
04de8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dec     CC 06 90 AD |  if_e	jmp	#LR__0373
04df0     82 01 00 FF 
04df4     0A 14 06 F6 | 	mov	arg02, ##@LR__5218
04df8     0F 13 02 F6 | 	mov	arg01, local01
04dfc     58 BA B1 FD | 	call	#__system___string_cmp
04e00     00 FA 0D F2 | 	cmp	result1, #0 wz
04e04     BC 06 90 AD |  if_e	jmp	#LR__0374
04e08     82 01 00 FF 
04e0c     0D 14 06 F6 | 	mov	arg02, ##@LR__5219
04e10     0F 13 02 F6 | 	mov	arg01, local01
04e14     40 BA B1 FD | 	call	#__system___string_cmp
04e18     00 FA 0D F2 | 	cmp	result1, #0 wz
04e1c     AC 06 90 AD |  if_e	jmp	#LR__0375
04e20     82 01 00 FF 
04e24     12 14 06 F6 | 	mov	arg02, ##@LR__5220
04e28     0F 13 02 F6 | 	mov	arg01, local01
04e2c     28 BA B1 FD | 	call	#__system___string_cmp
04e30     00 FA 0D F2 | 	cmp	result1, #0 wz
04e34     9C 06 90 AD |  if_e	jmp	#LR__0376
04e38     82 01 00 FF 
04e3c     16 14 06 F6 | 	mov	arg02, ##@LR__5221
04e40     0F 13 02 F6 | 	mov	arg01, local01
04e44     10 BA B1 FD | 	call	#__system___string_cmp
04e48     00 FA 0D F2 | 	cmp	result1, #0 wz
04e4c     8C 06 90 AD |  if_e	jmp	#LR__0377
04e50     82 01 00 FF 
04e54     1B 14 06 F6 | 	mov	arg02, ##@LR__5222
04e58     0F 13 02 F6 | 	mov	arg01, local01
04e5c     F8 B9 B1 FD | 	call	#__system___string_cmp
04e60     00 FA 0D F2 | 	cmp	result1, #0 wz
04e64     7C 06 90 AD |  if_e	jmp	#LR__0378
04e68     82 01 00 FF 
04e6c     1F 14 06 F6 | 	mov	arg02, ##@LR__5223
04e70     0F 13 02 F6 | 	mov	arg01, local01
04e74     E0 B9 B1 FD | 	call	#__system___string_cmp
04e78     00 FA 0D F2 | 	cmp	result1, #0 wz
04e7c     6C 06 90 AD |  if_e	jmp	#LR__0379
04e80     82 01 00 FF 
04e84     28 14 06 F6 | 	mov	arg02, ##@LR__5224
04e88     0F 13 02 F6 | 	mov	arg01, local01
04e8c     C8 B9 B1 FD | 	call	#__system___string_cmp
04e90     00 FA 0D F2 | 	cmp	result1, #0 wz
04e94     5C 06 90 AD |  if_e	jmp	#LR__0380
04e98     82 01 00 FF 
04e9c     2D 14 06 F6 | 	mov	arg02, ##@LR__5225
04ea0     0F 13 02 F6 | 	mov	arg01, local01
04ea4     B0 B9 B1 FD | 	call	#__system___string_cmp
04ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eac     4C 06 90 AD |  if_e	jmp	#LR__0381
04eb0     82 01 00 FF 
04eb4     33 14 06 F6 | 	mov	arg02, ##@LR__5226
04eb8     0F 13 02 F6 | 	mov	arg01, local01
04ebc     98 B9 B1 FD | 	call	#__system___string_cmp
04ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec4     3C 06 90 AD |  if_e	jmp	#LR__0382
04ec8     82 01 00 FF 
04ecc     35 14 06 F6 | 	mov	arg02, ##@LR__5227
04ed0     0F 13 02 F6 | 	mov	arg01, local01
04ed4     80 B9 B1 FD | 	call	#__system___string_cmp
04ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
04edc     2C 06 90 AD |  if_e	jmp	#LR__0383
04ee0     82 01 00 FF 
04ee4     39 14 06 F6 | 	mov	arg02, ##@LR__5228
04ee8     0F 13 02 F6 | 	mov	arg01, local01
04eec     68 B9 B1 FD | 	call	#__system___string_cmp
04ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef4     1C 06 90 AD |  if_e	jmp	#LR__0384
04ef8     82 01 00 FF 
04efc     3D 14 06 F6 | 	mov	arg02, ##@LR__5229
04f00     0F 13 02 F6 | 	mov	arg01, local01
04f04     50 B9 B1 FD | 	call	#__system___string_cmp
04f08     00 FA 0D F2 | 	cmp	result1, #0 wz
04f0c     0C 06 90 AD |  if_e	jmp	#LR__0385
04f10     82 01 00 FF 
04f14     45 14 06 F6 | 	mov	arg02, ##@LR__5230
04f18     0F 13 02 F6 | 	mov	arg01, local01
04f1c     38 B9 B1 FD | 	call	#__system___string_cmp
04f20     00 FA 0D F2 | 	cmp	result1, #0 wz
04f24     FC 05 90 AD |  if_e	jmp	#LR__0386
04f28     82 01 00 FF 
04f2c     49 14 06 F6 | 	mov	arg02, ##@LR__5231
04f30     0F 13 02 F6 | 	mov	arg01, local01
04f34     20 B9 B1 FD | 	call	#__system___string_cmp
04f38     00 FA 0D F2 | 	cmp	result1, #0 wz
04f3c     EC 05 90 AD |  if_e	jmp	#LR__0387
04f40     82 01 00 FF 
04f44     4B 14 06 F6 | 	mov	arg02, ##@LR__5232
04f48     0F 13 02 F6 | 	mov	arg01, local01
04f4c     08 B9 B1 FD | 	call	#__system___string_cmp
04f50     00 FA 0D F2 | 	cmp	result1, #0 wz
04f54     DC 05 90 AD |  if_e	jmp	#LR__0388
04f58     82 01 00 FF 
04f5c     52 14 06 F6 | 	mov	arg02, ##@LR__5233
04f60     0F 13 02 F6 | 	mov	arg01, local01
04f64     F0 B8 B1 FD | 	call	#__system___string_cmp
04f68     00 FA 0D F2 | 	cmp	result1, #0 wz
04f6c     CC 05 90 AD |  if_e	jmp	#LR__0389
04f70     82 01 00 FF 
04f74     56 14 06 F6 | 	mov	arg02, ##@LR__5234
04f78     0F 13 02 F6 | 	mov	arg01, local01
04f7c     D8 B8 B1 FD | 	call	#__system___string_cmp
04f80     00 FA 0D F2 | 	cmp	result1, #0 wz
04f84     BC 05 90 AD |  if_e	jmp	#LR__0390
04f88     82 01 00 FF 
04f8c     5B 14 06 F6 | 	mov	arg02, ##@LR__5235
04f90     0F 13 02 F6 | 	mov	arg01, local01
04f94     C0 B8 B1 FD | 	call	#__system___string_cmp
04f98     00 FA 0D F2 | 	cmp	result1, #0 wz
04f9c     AC 05 90 AD |  if_e	jmp	#LR__0391
04fa0     82 01 00 FF 
04fa4     5E 14 06 F6 | 	mov	arg02, ##@LR__5236
04fa8     0F 13 02 F6 | 	mov	arg01, local01
04fac     A8 B8 B1 FD | 	call	#__system___string_cmp
04fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb4     9C 05 90 AD |  if_e	jmp	#LR__0392
04fb8     82 01 00 FF 
04fbc     67 14 06 F6 | 	mov	arg02, ##@LR__5237
04fc0     0F 13 02 F6 | 	mov	arg01, local01
04fc4     90 B8 B1 FD | 	call	#__system___string_cmp
04fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fcc     8C 05 90 AD |  if_e	jmp	#LR__0393
04fd0     82 01 00 FF 
04fd4     6B 14 06 F6 | 	mov	arg02, ##@LR__5238
04fd8     0F 13 02 F6 | 	mov	arg01, local01
04fdc     78 B8 B1 FD | 	call	#__system___string_cmp
04fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe4     7C 05 90 AD |  if_e	jmp	#LR__0394
04fe8     82 01 00 FF 
04fec     72 14 06 F6 | 	mov	arg02, ##@LR__5239
04ff0     0F 13 02 F6 | 	mov	arg01, local01
04ff4     60 B8 B1 FD | 	call	#__system___string_cmp
04ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ffc     6C 05 90 AD |  if_e	jmp	#LR__0395
05000     82 01 00 FF 
05004     76 14 06 F6 | 	mov	arg02, ##@LR__5240
05008     0F 13 02 F6 | 	mov	arg01, local01
0500c     48 B8 B1 FD | 	call	#__system___string_cmp
05010     00 FA 0D F2 | 	cmp	result1, #0 wz
05014     5C 05 90 AD |  if_e	jmp	#LR__0396
05018     82 01 00 FF 
0501c     7D 14 06 F6 | 	mov	arg02, ##@LR__5241
05020     0F 13 02 F6 | 	mov	arg01, local01
05024     30 B8 B1 FD | 	call	#__system___string_cmp
05028     00 FA 0D F2 | 	cmp	result1, #0 wz
0502c     4C 05 90 AD |  if_e	jmp	#LR__0397
05030     82 01 00 FF 
05034     81 14 06 F6 | 	mov	arg02, ##@LR__5242
05038     0F 13 02 F6 | 	mov	arg01, local01
0503c     18 B8 B1 FD | 	call	#__system___string_cmp
05040     00 FA 0D F2 | 	cmp	result1, #0 wz
05044     3C 05 90 AD |  if_e	jmp	#LR__0398
05048     82 01 00 FF 
0504c     88 14 06 F6 | 	mov	arg02, ##@LR__5243
05050     0F 13 02 F6 | 	mov	arg01, local01
05054     00 B8 B1 FD | 	call	#__system___string_cmp
05058     00 FA 0D F2 | 	cmp	result1, #0 wz
0505c     2C 05 90 AD |  if_e	jmp	#LR__0399
05060     82 01 00 FF 
05064     8B 14 06 F6 | 	mov	arg02, ##@LR__5244
05068     0F 13 02 F6 | 	mov	arg01, local01
0506c     E8 B7 B1 FD | 	call	#__system___string_cmp
05070     00 FA 0D F2 | 	cmp	result1, #0 wz
05074     1C 05 90 AD |  if_e	jmp	#LR__0400
05078     82 01 00 FF 
0507c     96 14 06 F6 | 	mov	arg02, ##@LR__5245
05080     0F 13 02 F6 | 	mov	arg01, local01
05084     D0 B7 B1 FD | 	call	#__system___string_cmp
05088     00 FA 0D F2 | 	cmp	result1, #0 wz
0508c     0C 05 90 AD |  if_e	jmp	#LR__0401
05090     82 01 00 FF 
05094     9A 14 06 F6 | 	mov	arg02, ##@LR__5246
05098     0F 13 02 F6 | 	mov	arg01, local01
0509c     B8 B7 B1 FD | 	call	#__system___string_cmp
050a0     00 FA 0D F2 | 	cmp	result1, #0 wz
050a4     FC 04 90 AD |  if_e	jmp	#LR__0402
050a8     82 01 00 FF 
050ac     A1 14 06 F6 | 	mov	arg02, ##@LR__5247
050b0     0F 13 02 F6 | 	mov	arg01, local01
050b4     A0 B7 B1 FD | 	call	#__system___string_cmp
050b8     00 FA 0D F2 | 	cmp	result1, #0 wz
050bc     EC 04 90 AD |  if_e	jmp	#LR__0403
050c0     82 01 00 FF 
050c4     A5 14 06 F6 | 	mov	arg02, ##@LR__5248
050c8     0F 13 02 F6 | 	mov	arg01, local01
050cc     88 B7 B1 FD | 	call	#__system___string_cmp
050d0     00 FA 0D F2 | 	cmp	result1, #0 wz
050d4     DC 04 90 AD |  if_e	jmp	#LR__0404
050d8     82 01 00 FF 
050dc     AD 14 06 F6 | 	mov	arg02, ##@LR__5249
050e0     0F 13 02 F6 | 	mov	arg01, local01
050e4     70 B7 B1 FD | 	call	#__system___string_cmp
050e8     00 FA 0D F2 | 	cmp	result1, #0 wz
050ec     CC 04 90 AD |  if_e	jmp	#LR__0405
050f0     82 01 00 FF 
050f4     B1 14 06 F6 | 	mov	arg02, ##@LR__5250
050f8     0F 13 02 F6 | 	mov	arg01, local01
050fc     58 B7 B1 FD | 	call	#__system___string_cmp
05100     00 FA 0D F2 | 	cmp	result1, #0 wz
05104     BC 04 90 AD |  if_e	jmp	#LR__0406
05108     82 01 00 FF 
0510c     B8 14 06 F6 | 	mov	arg02, ##@LR__5251
05110     0F 13 02 F6 | 	mov	arg01, local01
05114     40 B7 B1 FD | 	call	#__system___string_cmp
05118     00 FA 0D F2 | 	cmp	result1, #0 wz
0511c     AC 04 90 AD |  if_e	jmp	#LR__0407
05120     82 01 00 FF 
05124     BF 14 06 F6 | 	mov	arg02, ##@LR__5252
05128     0F 13 02 F6 | 	mov	arg01, local01
0512c     28 B7 B1 FD | 	call	#__system___string_cmp
05130     00 FA 0D F2 | 	cmp	result1, #0 wz
05134     9C 04 90 AD |  if_e	jmp	#LR__0408
05138     82 01 00 FF 
0513c     C3 14 06 F6 | 	mov	arg02, ##@LR__5253
05140     0F 13 02 F6 | 	mov	arg01, local01
05144     10 B7 B1 FD | 	call	#__system___string_cmp
05148     00 FA 0D F2 | 	cmp	result1, #0 wz
0514c     8C 04 90 AD |  if_e	jmp	#LR__0409
05150     82 01 00 FF 
05154     C9 14 06 F6 | 	mov	arg02, ##@LR__5254
05158     0F 13 02 F6 | 	mov	arg01, local01
0515c     F8 B6 B1 FD | 	call	#__system___string_cmp
05160     00 FA 0D F2 | 	cmp	result1, #0 wz
05164     7C 04 90 AD |  if_e	jmp	#LR__0410
05168     82 01 00 FF 
0516c     CD 14 06 F6 | 	mov	arg02, ##@LR__5255
05170     0F 13 02 F6 | 	mov	arg01, local01
05174     E0 B6 B1 FD | 	call	#__system___string_cmp
05178     00 FA 0D F2 | 	cmp	result1, #0 wz
0517c     6C 04 90 AD |  if_e	jmp	#LR__0411
05180     82 01 00 FF 
05184     D4 14 06 F6 | 	mov	arg02, ##@LR__5256
05188     0F 13 02 F6 | 	mov	arg01, local01
0518c     C8 B6 B1 FD | 	call	#__system___string_cmp
05190     00 FA 0D F2 | 	cmp	result1, #0 wz
05194     5C 04 90 AD |  if_e	jmp	#LR__0412
05198     82 01 00 FF 
0519c     D9 14 06 F6 | 	mov	arg02, ##@LR__5257
051a0     0F 13 02 F6 | 	mov	arg01, local01
051a4     B0 B6 B1 FD | 	call	#__system___string_cmp
051a8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ac     4C 04 90 AD |  if_e	jmp	#LR__0413
051b0     82 01 00 FF 
051b4     DE 14 06 F6 | 	mov	arg02, ##@LR__5258
051b8     0F 13 02 F6 | 	mov	arg01, local01
051bc     98 B6 B1 FD | 	call	#__system___string_cmp
051c0     00 FA 0D F2 | 	cmp	result1, #0 wz
051c4     3C 04 90 AD |  if_e	jmp	#LR__0414
051c8     82 01 00 FF 
051cc     E5 14 06 F6 | 	mov	arg02, ##@LR__5259
051d0     0F 13 02 F6 | 	mov	arg01, local01
051d4     80 B6 B1 FD | 	call	#__system___string_cmp
051d8     00 FA 0D F2 | 	cmp	result1, #0 wz
051dc     2C 04 90 AD |  if_e	jmp	#LR__0415
051e0     82 01 00 FF 
051e4     E8 14 06 F6 | 	mov	arg02, ##@LR__5260
051e8     0F 13 02 F6 | 	mov	arg01, local01
051ec     68 B6 B1 FD | 	call	#__system___string_cmp
051f0     00 FA 0D F2 | 	cmp	result1, #0 wz
051f4     1C 04 90 AD |  if_e	jmp	#LR__0416
051f8     82 01 00 FF 
051fc     F2 14 06 F6 | 	mov	arg02, ##@LR__5261
05200     0F 13 02 F6 | 	mov	arg01, local01
05204     50 B6 B1 FD | 	call	#__system___string_cmp
05208     00 FA 0D F2 | 	cmp	result1, #0 wz
0520c     0C 04 90 AD |  if_e	jmp	#LR__0417
05210     82 01 00 FF 
05214     F6 14 06 F6 | 	mov	arg02, ##@LR__5262
05218     0F 13 02 F6 | 	mov	arg01, local01
0521c     38 B6 B1 FD | 	call	#__system___string_cmp
05220     00 FA 0D F2 | 	cmp	result1, #0 wz
05224     FC 03 90 AD |  if_e	jmp	#LR__0418
05228     82 01 00 FF 
0522c     FE 14 06 F6 | 	mov	arg02, ##@LR__5263
05230     0F 13 02 F6 | 	mov	arg01, local01
05234     20 B6 B1 FD | 	call	#__system___string_cmp
05238     00 FA 0D F2 | 	cmp	result1, #0 wz
0523c     EC 03 90 AD |  if_e	jmp	#LR__0419
05240     82 01 00 FF 
05244     02 15 06 F6 | 	mov	arg02, ##@LR__5264
05248     0F 13 02 F6 | 	mov	arg01, local01
0524c     08 B6 B1 FD | 	call	#__system___string_cmp
05250     00 FA 0D F2 | 	cmp	result1, #0 wz
05254     DC 03 90 AD |  if_e	jmp	#LR__0420
05258     82 01 00 FF 
0525c     08 15 06 F6 | 	mov	arg02, ##@LR__5265
05260     0F 13 02 F6 | 	mov	arg01, local01
05264     F0 B5 B1 FD | 	call	#__system___string_cmp
05268     00 FA 0D F2 | 	cmp	result1, #0 wz
0526c     CC 03 90 AD |  if_e	jmp	#LR__0421
05270     D0 03 90 FD | 	jmp	#LR__0422
05274                 | LR__0300
05274     5C FA 05 F6 | 	mov	result1, #92
05278     CC 03 90 FD | 	jmp	#LR__0423
0527c                 | LR__0301
0527c     5C FA 05 F6 | 	mov	result1, #92
05280     C4 03 90 FD | 	jmp	#LR__0423
05284                 | LR__0302
05284     47 FA 05 F6 | 	mov	result1, #71
05288     BC 03 90 FD | 	jmp	#LR__0423
0528c                 | LR__0303
0528c     59 FA 05 F6 | 	mov	result1, #89
05290     B4 03 90 FD | 	jmp	#LR__0423
05294                 | LR__0304
05294     59 FA 05 F6 | 	mov	result1, #89
05298     AC 03 90 FD | 	jmp	#LR__0423
0529c                 | LR__0305
0529c     AE FA 05 F6 | 	mov	result1, #174
052a0     A4 03 90 FD | 	jmp	#LR__0423
052a4                 | LR__0306
052a4     AE FA 05 F6 | 	mov	result1, #174
052a8     9C 03 90 FD | 	jmp	#LR__0423
052ac                 | LR__0307
052ac     B1 FA 05 F6 | 	mov	result1, #177
052b0     94 03 90 FD | 	jmp	#LR__0423
052b4                 | LR__0308
052b4     B1 FA 05 F6 | 	mov	result1, #177
052b8     8C 03 90 FD | 	jmp	#LR__0423
052bc                 | LR__0309
052bc     AF FA 05 F6 | 	mov	result1, #175
052c0     84 03 90 FD | 	jmp	#LR__0423
052c4                 | LR__0310
052c4     AF FA 05 F6 | 	mov	result1, #175
052c8     7C 03 90 FD | 	jmp	#LR__0423
052cc                 | LR__0311
052cc     B0 FA 05 F6 | 	mov	result1, #176
052d0     74 03 90 FD | 	jmp	#LR__0423
052d4                 | LR__0312
052d4     B0 FA 05 F6 | 	mov	result1, #176
052d8     6C 03 90 FD | 	jmp	#LR__0423
052dc                 | LR__0313
052dc     45 FA 05 F6 | 	mov	result1, #69
052e0     64 03 90 FD | 	jmp	#LR__0423
052e4                 | LR__0314
052e4     45 FA 05 F6 | 	mov	result1, #69
052e8     5C 03 90 FD | 	jmp	#LR__0423
052ec                 | LR__0315
052ec     69 FA 05 F6 | 	mov	result1, #105
052f0     54 03 90 FD | 	jmp	#LR__0423
052f4                 | LR__0316
052f4     B4 FA 05 F6 | 	mov	result1, #180
052f8     4C 03 90 FD | 	jmp	#LR__0423
052fc                 | LR__0317
052fc     40 FA 05 F6 | 	mov	result1, #64
05300     44 03 90 FD | 	jmp	#LR__0423
05304                 | LR__0318
05304     49 FA 05 F6 | 	mov	result1, #73
05308     3C 03 90 FD | 	jmp	#LR__0423
0530c                 | LR__0319
0530c     49 FA 05 F6 | 	mov	result1, #73
05310     34 03 90 FD | 	jmp	#LR__0423
05314                 | LR__0320
05314     50 FA 05 F6 | 	mov	result1, #80
05318     2C 03 90 FD | 	jmp	#LR__0423
0531c                 | LR__0321
0531c     50 FA 05 F6 | 	mov	result1, #80
05320     24 03 90 FD | 	jmp	#LR__0423
05324                 | LR__0322
05324     68 FA 05 F6 | 	mov	result1, #104
05328     1C 03 90 FD | 	jmp	#LR__0423
0532c                 | LR__0323
0532c     73 FA 05 F6 | 	mov	result1, #115
05330     14 03 90 FD | 	jmp	#LR__0423
05334                 | LR__0324
05334     74 FA 05 F6 | 	mov	result1, #116
05338     0C 03 90 FD | 	jmp	#LR__0423
0533c                 | LR__0325
0533c     6C FA 05 F6 | 	mov	result1, #108
05340     04 03 90 FD | 	jmp	#LR__0423
05344                 | LR__0326
05344     6C FA 05 F6 | 	mov	result1, #108
05348     FC 02 90 FD | 	jmp	#LR__0423
0534c                 | LR__0327
0534c     89 FA 05 F6 | 	mov	result1, #137
05350     F4 02 90 FD | 	jmp	#LR__0423
05354                 | LR__0328
05354     72 FA 05 F6 | 	mov	result1, #114
05358     EC 02 90 FD | 	jmp	#LR__0423
0535c                 | LR__0329
0535c     5D FA 05 F6 | 	mov	result1, #93
05360     E4 02 90 FD | 	jmp	#LR__0423
05364                 | LR__0330
05364     96 FA 05 F6 | 	mov	result1, #150
05368     DC 02 90 FD | 	jmp	#LR__0423
0536c                 | LR__0331
0536c     43 FA 05 F6 | 	mov	result1, #67
05370     D4 02 90 FD | 	jmp	#LR__0423
05374                 | LR__0332
05374     43 FA 05 F6 | 	mov	result1, #67
05378     CC 02 90 FD | 	jmp	#LR__0423
0537c                 | LR__0333
0537c     5A FA 05 F6 | 	mov	result1, #90
05380     C4 02 90 FD | 	jmp	#LR__0423
05384                 | LR__0334
05384     AB FA 05 F6 | 	mov	result1, #171
05388     BC 02 90 FD | 	jmp	#LR__0423
0538c                 | LR__0335
0538c     BD FA 05 F6 | 	mov	result1, #189
05390     B4 02 90 FD | 	jmp	#LR__0423
05394                 | LR__0336
05394     BD FA 05 F6 | 	mov	result1, #189
05398     AC 02 90 FD | 	jmp	#LR__0423
0539c                 | LR__0337
0539c     46 FA 05 F6 | 	mov	result1, #70
053a0     A4 02 90 FD | 	jmp	#LR__0423
053a4                 | LR__0338
053a4     46 FA 05 F6 | 	mov	result1, #70
053a8     9C 02 90 FD | 	jmp	#LR__0423
053ac                 | LR__0339
053ac     71 FA 05 F6 | 	mov	result1, #113
053b0     94 02 90 FD | 	jmp	#LR__0423
053b4                 | LR__0340
053b4     71 FA 05 F6 | 	mov	result1, #113
053b8     8C 02 90 FD | 	jmp	#LR__0423
053bc                 | LR__0341
053bc     60 FA 05 F6 | 	mov	result1, #96
053c0     84 02 90 FD | 	jmp	#LR__0423
053c4                 | LR__0342
053c4     4A FA 05 F6 | 	mov	result1, #74
053c8     7C 02 90 FD | 	jmp	#LR__0423
053cc                 | LR__0343
053cc     4A FA 05 F6 | 	mov	result1, #74
053d0     74 02 90 FD | 	jmp	#LR__0423
053d4                 | LR__0344
053d4     48 FA 05 F6 | 	mov	result1, #72
053d8     6C 02 90 FD | 	jmp	#LR__0423
053dc                 | LR__0345
053dc     48 FA 05 F6 | 	mov	result1, #72
053e0     64 02 90 FD | 	jmp	#LR__0423
053e4                 | LR__0346
053e4     BB FA 05 F6 | 	mov	result1, #187
053e8     5C 02 90 FD | 	jmp	#LR__0423
053ec                 | LR__0347
053ec     A9 FA 05 F6 | 	mov	result1, #169
053f0     54 02 90 FD | 	jmp	#LR__0423
053f4                 | LR__0348
053f4     4E FA 05 F6 | 	mov	result1, #78
053f8     4C 02 90 FD | 	jmp	#LR__0423
053fc                 | LR__0349
053fc     4E FA 05 F6 | 	mov	result1, #78
05400     44 02 90 FD | 	jmp	#LR__0423
05404                 | LR__0350
05404     58 FA 05 F6 | 	mov	result1, #88
05408     3C 02 90 FD | 	jmp	#LR__0423
0540c                 | LR__0351
0540c     5F FA 05 F6 | 	mov	result1, #95
05410     34 02 90 FD | 	jmp	#LR__0423
05414                 | LR__0352
05414     5F FA 05 F6 | 	mov	result1, #95
05418     2C 02 90 FD | 	jmp	#LR__0423
0541c                 | LR__0353
0541c     4C FA 05 F6 | 	mov	result1, #76
05420     24 02 90 FD | 	jmp	#LR__0423
05424                 | LR__0354
05424     4C FA 05 F6 | 	mov	result1, #76
05428     1C 02 90 FD | 	jmp	#LR__0423
0542c                 | LR__0355
0542c     52 FA 05 F6 | 	mov	result1, #82
05430     14 02 90 FD | 	jmp	#LR__0423
05434                 | LR__0356
05434     52 FA 05 F6 | 	mov	result1, #82
05438     0C 02 90 FD | 	jmp	#LR__0423
0543c                 | LR__0357
0543c     97 FA 05 F6 | 	mov	result1, #151
05440     04 02 90 FD | 	jmp	#LR__0423
05444                 | LR__0358
05444     61 FA 05 F6 | 	mov	result1, #97
05448     FC 01 90 FD | 	jmp	#LR__0423
0544c                 | LR__0359
0544c     61 FA 05 F6 | 	mov	result1, #97
05450     F4 01 90 FD | 	jmp	#LR__0423
05454                 | LR__0360
05454     63 FA 05 F6 | 	mov	result1, #99
05458     EC 01 90 FD | 	jmp	#LR__0423
0545c                 | LR__0361
0545c     41 FA 05 F6 | 	mov	result1, #65
05460     E4 01 90 FD | 	jmp	#LR__0423
05464                 | LR__0362
05464     4B FA 05 F6 | 	mov	result1, #75
05468     DC 01 90 FD | 	jmp	#LR__0423
0546c                 | LR__0363
0546c     4B FA 05 F6 | 	mov	result1, #75
05470     D4 01 90 FD | 	jmp	#LR__0423
05474                 | LR__0364
05474     B3 FA 05 F6 | 	mov	result1, #179
05478     CC 01 90 FD | 	jmp	#LR__0423
0547c                 | LR__0365
0547c     5E FA 05 F6 | 	mov	result1, #94
05480     C4 01 90 FD | 	jmp	#LR__0423
05484                 | LR__0366
05484     5E FA 05 F6 | 	mov	result1, #94
05488     BC 01 90 FD | 	jmp	#LR__0423
0548c                 | LR__0367
0548c     7C FA 05 F6 | 	mov	result1, #124
05490     B4 01 90 FD | 	jmp	#LR__0423
05494                 | LR__0368
05494     7E FA 05 F6 | 	mov	result1, #126
05498     AC 01 90 FD | 	jmp	#LR__0423
0549c                 | LR__0369
0549c     7D FA 05 F6 | 	mov	result1, #125
054a0     A4 01 90 FD | 	jmp	#LR__0423
054a4                 | LR__0370
054a4     7F FA 05 F6 | 	mov	result1, #127
054a8     9C 01 90 FD | 	jmp	#LR__0423
054ac                 | LR__0371
054ac     80 FA 05 F6 | 	mov	result1, #128
054b0     94 01 90 FD | 	jmp	#LR__0423
054b4                 | LR__0372
054b4     55 FA 05 F6 | 	mov	result1, #85
054b8     8C 01 90 FD | 	jmp	#LR__0423
054bc                 | LR__0373
054bc     75 FA 05 F6 | 	mov	result1, #117
054c0     84 01 90 FD | 	jmp	#LR__0423
054c4                 | LR__0374
054c4     75 FA 05 F6 | 	mov	result1, #117
054c8     7C 01 90 FD | 	jmp	#LR__0423
054cc                 | LR__0375
054cc     42 FA 05 F6 | 	mov	result1, #66
054d0     74 01 90 FD | 	jmp	#LR__0423
054d4                 | LR__0376
054d4     42 FA 05 F6 | 	mov	result1, #66
054d8     6C 01 90 FD | 	jmp	#LR__0423
054dc                 | LR__0377
054dc     95 FA 05 F6 | 	mov	result1, #149
054e0     64 01 90 FD | 	jmp	#LR__0423
054e4                 | LR__0378
054e4     AC FA 05 F6 | 	mov	result1, #172
054e8     5C 01 90 FD | 	jmp	#LR__0423
054ec                 | LR__0379
054ec     81 FA 05 F6 | 	mov	result1, #129
054f0     54 01 90 FD | 	jmp	#LR__0423
054f4                 | LR__0380
054f4     81 FA 05 F6 | 	mov	result1, #129
054f8     4C 01 90 FD | 	jmp	#LR__0423
054fc                 | LR__0381
054fc     44 FA 05 F6 | 	mov	result1, #68
05500     44 01 90 FD | 	jmp	#LR__0423
05504                 | LR__0382
05504     44 FA 05 F6 | 	mov	result1, #68
05508     3C 01 90 FD | 	jmp	#LR__0423
0550c                 | LR__0383
0550c     BC FA 05 F6 | 	mov	result1, #188
05510     34 01 90 FD | 	jmp	#LR__0423
05514                 | LR__0384
05514     88 FA 05 F6 | 	mov	result1, #136
05518     2C 01 90 FD | 	jmp	#LR__0423
0551c                 | LR__0385
0551c     92 FA 05 F6 | 	mov	result1, #146
05520     24 01 90 FD | 	jmp	#LR__0423
05524                 | LR__0386
05524     BE FA 05 F6 | 	mov	result1, #190
05528     1C 01 90 FD | 	jmp	#LR__0423
0552c                 | LR__0387
0552c     BE FA 05 F6 | 	mov	result1, #190
05530     14 01 90 FD | 	jmp	#LR__0423
05534                 | LR__0388
05534     AA FA 05 F6 | 	mov	result1, #170
05538     0C 01 90 FD | 	jmp	#LR__0423
0553c                 | LR__0389
0553c     4D FA 05 F6 | 	mov	result1, #77
05540     04 01 90 FD | 	jmp	#LR__0423
05544                 | LR__0390
05544     51 FA 05 F6 | 	mov	result1, #81
05548     FC 00 90 FD | 	jmp	#LR__0423
0554c                 | LR__0391
0554c     51 FA 05 F6 | 	mov	result1, #81
05550     F4 00 90 FD | 	jmp	#LR__0423
05554                 | LR__0392
05554     8E FA 05 F6 | 	mov	result1, #142
05558     EC 00 90 FD | 	jmp	#LR__0423
0555c                 | LR__0393
0555c     8E FA 05 F6 | 	mov	result1, #142
05560     E4 00 90 FD | 	jmp	#LR__0423
05564                 | LR__0394
05564     90 FA 05 F6 | 	mov	result1, #144
05568     DC 00 90 FD | 	jmp	#LR__0423
0556c                 | LR__0395
0556c     90 FA 05 F6 | 	mov	result1, #144
05570     D4 00 90 FD | 	jmp	#LR__0423
05574                 | LR__0396
05574     8D FA 05 F6 | 	mov	result1, #141
05578     CC 00 90 FD | 	jmp	#LR__0423
0557c                 | LR__0397
0557c     8D FA 05 F6 | 	mov	result1, #141
05580     C4 00 90 FD | 	jmp	#LR__0423
05584                 | LR__0398
05584     8C FA 05 F6 | 	mov	result1, #140
05588     BC 00 90 FD | 	jmp	#LR__0423
0558c                 | LR__0399
0558c     8C FA 05 F6 | 	mov	result1, #140
05590     B4 00 90 FD | 	jmp	#LR__0423
05594                 | LR__0400
05594     91 FA 05 F6 | 	mov	result1, #145
05598     AC 00 90 FD | 	jmp	#LR__0423
0559c                 | LR__0401
0559c     91 FA 05 F6 | 	mov	result1, #145
055a0     A4 00 90 FD | 	jmp	#LR__0423
055a4                 | LR__0402
055a4     8B FA 05 F6 | 	mov	result1, #139
055a8     9C 00 90 FD | 	jmp	#LR__0423
055ac                 | LR__0403
055ac     8B FA 05 F6 | 	mov	result1, #139
055b0     94 00 90 FD | 	jmp	#LR__0423
055b4                 | LR__0404
055b4     8F FA 05 F6 | 	mov	result1, #143
055b8     8C 00 90 FD | 	jmp	#LR__0423
055bc                 | LR__0405
055bc     8F FA 05 F6 | 	mov	result1, #143
055c0     84 00 90 FD | 	jmp	#LR__0423
055c4                 | LR__0406
055c4     8F FA 05 F6 | 	mov	result1, #143
055c8     7C 00 90 FD | 	jmp	#LR__0423
055cc                 | LR__0407
055cc     B2 FA 05 F6 | 	mov	result1, #178
055d0     74 00 90 FD | 	jmp	#LR__0423
055d4                 | LR__0408
055d4     B2 FA 05 F6 | 	mov	result1, #178
055d8     6C 00 90 FD | 	jmp	#LR__0423
055dc                 | LR__0409
055dc     75 FA 05 F6 | 	mov	result1, #117
055e0     64 00 90 FD | 	jmp	#LR__0423
055e4                 | LR__0410
055e4     75 FA 05 F6 | 	mov	result1, #117
055e8     5C 00 90 FD | 	jmp	#LR__0423
055ec                 | LR__0411
055ec     6D FA 05 F6 | 	mov	result1, #109
055f0     54 00 90 FD | 	jmp	#LR__0423
055f4                 | LR__0412
055f4     6D FA 05 F6 | 	mov	result1, #109
055f8     4C 00 90 FD | 	jmp	#LR__0423
055fc                 | LR__0413
055fc     5B FA 05 F6 | 	mov	result1, #91
05600     44 00 90 FD | 	jmp	#LR__0423
05604                 | LR__0414
05604     56 FA 05 F6 | 	mov	result1, #86
05608     3C 00 90 FD | 	jmp	#LR__0423
0560c                 | LR__0415
0560c     56 FA 05 F6 | 	mov	result1, #86
05610     34 00 90 FD | 	jmp	#LR__0423
05614                 | LR__0416
05614     70 FA 05 F6 | 	mov	result1, #112
05618     2C 00 90 FD | 	jmp	#LR__0423
0561c                 | LR__0417
0561c     70 FA 05 F6 | 	mov	result1, #112
05620     24 00 90 FD | 	jmp	#LR__0423
05624                 | LR__0418
05624     57 FA 05 F6 | 	mov	result1, #87
05628     1C 00 90 FD | 	jmp	#LR__0423
0562c                 | LR__0419
0562c     57 FA 05 F6 | 	mov	result1, #87
05630     14 00 90 FD | 	jmp	#LR__0423
05634                 | LR__0420
05634     77 FA 05 F6 | 	mov	result1, #119
05638     0C 00 90 FD | 	jmp	#LR__0423
0563c                 | LR__0421
0563c     78 FA 05 F6 | 	mov	result1, #120
05640     04 00 90 FD | 	jmp	#LR__0423
05644                 | LR__0422
05644     00 FA 05 F6 | 	mov	result1, #0
05648                 | LR__0423
05648     A7 F0 03 F6 | 	mov	ptra, fp
0564c     B2 00 A0 FD | 	call	#popregs_
05650                 | _iscommand_ret
05650     2D 00 64 FD | 	ret
05654                 | 
05654                 | ' 
05654                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05654                 | ' 
05654                 | ' function isfunction(s as string) as ubyte
05654                 | _isfunction
05654     01 4A 05 F6 | 	mov	COUNT_, #1
05658     A8 00 A0 FD | 	call	#pushregs_
0565c                 | ' 
0565c                 | ' select case s
0565c     09 1F 02 F6 | 	mov	local01, arg01
05660     82 01 00 FF 
05664     0E 15 06 F6 | 	mov	arg02, ##@LR__5266
05668     0F 13 02 F6 | 	mov	arg01, local01
0566c     E8 B1 B1 FD | 	call	#__system___string_cmp
05670     00 FA 0D F2 | 	cmp	result1, #0 wz
05674     0C 04 90 AD |  if_e	jmp	#LR__0430
05678     82 01 00 FF 
0567c     12 15 06 F6 | 	mov	arg02, ##@LR__5267
05680     0F 13 02 F6 | 	mov	arg01, local01
05684     D0 B1 B1 FD | 	call	#__system___string_cmp
05688     00 FA 0D F2 | 	cmp	result1, #0 wz
0568c     FC 03 90 AD |  if_e	jmp	#LR__0431
05690     82 01 00 FF 
05694     17 15 06 F6 | 	mov	arg02, ##@LR__5268
05698     0F 13 02 F6 | 	mov	arg01, local01
0569c     B8 B1 B1 FD | 	call	#__system___string_cmp
056a0     00 FA 0D F2 | 	cmp	result1, #0 wz
056a4     EC 03 90 AD |  if_e	jmp	#LR__0432
056a8     82 01 00 FF 
056ac     1B 15 06 F6 | 	mov	arg02, ##@LR__5269
056b0     0F 13 02 F6 | 	mov	arg01, local01
056b4     A0 B1 B1 FD | 	call	#__system___string_cmp
056b8     00 FA 0D F2 | 	cmp	result1, #0 wz
056bc     DC 03 90 AD |  if_e	jmp	#LR__0433
056c0     82 01 00 FF 
056c4     20 15 06 F6 | 	mov	arg02, ##@LR__5270
056c8     0F 13 02 F6 | 	mov	arg01, local01
056cc     88 B1 B1 FD | 	call	#__system___string_cmp
056d0     00 FA 0D F2 | 	cmp	result1, #0 wz
056d4     CC 03 90 AD |  if_e	jmp	#LR__0434
056d8     82 01 00 FF 
056dc     24 15 06 F6 | 	mov	arg02, ##@LR__5271
056e0     0F 13 02 F6 | 	mov	arg01, local01
056e4     70 B1 B1 FD | 	call	#__system___string_cmp
056e8     00 FA 0D F2 | 	cmp	result1, #0 wz
056ec     BC 03 90 AD |  if_e	jmp	#LR__0435
056f0     82 01 00 FF 
056f4     29 15 06 F6 | 	mov	arg02, ##@LR__5272
056f8     0F 13 02 F6 | 	mov	arg01, local01
056fc     58 B1 B1 FD | 	call	#__system___string_cmp
05700     00 FA 0D F2 | 	cmp	result1, #0 wz
05704     AC 03 90 AD |  if_e	jmp	#LR__0436
05708     82 01 00 FF 
0570c     2D 15 06 F6 | 	mov	arg02, ##@LR__5273
05710     0F 13 02 F6 | 	mov	arg01, local01
05714     40 B1 B1 FD | 	call	#__system___string_cmp
05718     00 FA 0D F2 | 	cmp	result1, #0 wz
0571c     9C 03 90 AD |  if_e	jmp	#LR__0437
05720     82 01 00 FF 
05724     32 15 06 F6 | 	mov	arg02, ##@LR__5274
05728     0F 13 02 F6 | 	mov	arg01, local01
0572c     28 B1 B1 FD | 	call	#__system___string_cmp
05730     00 FA 0D F2 | 	cmp	result1, #0 wz
05734     8C 03 90 AD |  if_e	jmp	#LR__0438
05738     82 01 00 FF 
0573c     37 15 06 F6 | 	mov	arg02, ##@LR__5275
05740     0F 13 02 F6 | 	mov	arg01, local01
05744     10 B1 B1 FD | 	call	#__system___string_cmp
05748     00 FA 0D F2 | 	cmp	result1, #0 wz
0574c     7C 03 90 AD |  if_e	jmp	#LR__0439
05750     82 01 00 FF 
05754     3B 15 06 F6 | 	mov	arg02, ##@LR__5276
05758     0F 13 02 F6 | 	mov	arg01, local01
0575c     F8 B0 B1 FD | 	call	#__system___string_cmp
05760     00 FA 0D F2 | 	cmp	result1, #0 wz
05764     6C 03 90 AD |  if_e	jmp	#LR__0440
05768     82 01 00 FF 
0576c     41 15 06 F6 | 	mov	arg02, ##@LR__5277
05770     0F 13 02 F6 | 	mov	arg01, local01
05774     E0 B0 B1 FD | 	call	#__system___string_cmp
05778     00 FA 0D F2 | 	cmp	result1, #0 wz
0577c     5C 03 90 AD |  if_e	jmp	#LR__0441
05780     82 01 00 FF 
05784     45 15 06 F6 | 	mov	arg02, ##@LR__5278
05788     0F 13 02 F6 | 	mov	arg01, local01
0578c     C8 B0 B1 FD | 	call	#__system___string_cmp
05790     00 FA 0D F2 | 	cmp	result1, #0 wz
05794     4C 03 90 AD |  if_e	jmp	#LR__0442
05798     82 01 00 FF 
0579c     4E 15 06 F6 | 	mov	arg02, ##@LR__5279
057a0     0F 13 02 F6 | 	mov	arg01, local01
057a4     B0 B0 B1 FD | 	call	#__system___string_cmp
057a8     00 FA 0D F2 | 	cmp	result1, #0 wz
057ac     3C 03 90 AD |  if_e	jmp	#LR__0443
057b0     82 01 00 FF 
057b4     52 15 06 F6 | 	mov	arg02, ##@LR__5280
057b8     0F 13 02 F6 | 	mov	arg01, local01
057bc     98 B0 B1 FD | 	call	#__system___string_cmp
057c0     00 FA 0D F2 | 	cmp	result1, #0 wz
057c4     2C 03 90 AD |  if_e	jmp	#LR__0444
057c8     82 01 00 FF 
057cc     60 15 06 F6 | 	mov	arg02, ##@LR__5281
057d0     0F 13 02 F6 | 	mov	arg01, local01
057d4     80 B0 B1 FD | 	call	#__system___string_cmp
057d8     00 FA 0D F2 | 	cmp	result1, #0 wz
057dc     1C 03 90 AD |  if_e	jmp	#LR__0445
057e0     82 01 00 FF 
057e4     6D 15 06 F6 | 	mov	arg02, ##@LR__5282
057e8     0F 13 02 F6 | 	mov	arg01, local01
057ec     68 B0 B1 FD | 	call	#__system___string_cmp
057f0     00 FA 0D F2 | 	cmp	result1, #0 wz
057f4     0C 03 90 AD |  if_e	jmp	#LR__0446
057f8     82 01 00 FF 
057fc     75 15 06 F6 | 	mov	arg02, ##@LR__5283
05800     0F 13 02 F6 | 	mov	arg01, local01
05804     50 B0 B1 FD | 	call	#__system___string_cmp
05808     00 FA 0D F2 | 	cmp	result1, #0 wz
0580c     FC 02 90 AD |  if_e	jmp	#LR__0447
05810     82 01 00 FF 
05814     7A 15 06 F6 | 	mov	arg02, ##@LR__5284
05818     0F 13 02 F6 | 	mov	arg01, local01
0581c     38 B0 B1 FD | 	call	#__system___string_cmp
05820     00 FA 0D F2 | 	cmp	result1, #0 wz
05824     EC 02 90 AD |  if_e	jmp	#LR__0448
05828     82 01 00 FF 
0582c     81 15 06 F6 | 	mov	arg02, ##@LR__5285
05830     0F 13 02 F6 | 	mov	arg01, local01
05834     20 B0 B1 FD | 	call	#__system___string_cmp
05838     00 FA 0D F2 | 	cmp	result1, #0 wz
0583c     DC 02 90 AD |  if_e	jmp	#LR__0449
05840     82 01 00 FF 
05844     85 15 06 F6 | 	mov	arg02, ##@LR__5286
05848     0F 13 02 F6 | 	mov	arg01, local01
0584c     08 B0 B1 FD | 	call	#__system___string_cmp
05850     00 FA 0D F2 | 	cmp	result1, #0 wz
05854     CC 02 90 AD |  if_e	jmp	#LR__0450
05858     82 01 00 FF 
0585c     8B 15 06 F6 | 	mov	arg02, ##@LR__5287
05860     0F 13 02 F6 | 	mov	arg01, local01
05864     F0 AF B1 FD | 	call	#__system___string_cmp
05868     00 FA 0D F2 | 	cmp	result1, #0 wz
0586c     BC 02 90 AD |  if_e	jmp	#LR__0451
05870     82 01 00 FF 
05874     8F 15 06 F6 | 	mov	arg02, ##@LR__5288
05878     0F 13 02 F6 | 	mov	arg01, local01
0587c     D8 AF B1 FD | 	call	#__system___string_cmp
05880     00 FA 0D F2 | 	cmp	result1, #0 wz
05884     AC 02 90 AD |  if_e	jmp	#LR__0452
05888     82 01 00 FF 
0588c     93 15 06 F6 | 	mov	arg02, ##@LR__5289
05890     0F 13 02 F6 | 	mov	arg01, local01
05894     C0 AF B1 FD | 	call	#__system___string_cmp
05898     00 FA 0D F2 | 	cmp	result1, #0 wz
0589c     9C 02 90 AD |  if_e	jmp	#LR__0453
058a0     82 01 00 FF 
058a4     99 15 06 F6 | 	mov	arg02, ##@LR__5290
058a8     0F 13 02 F6 | 	mov	arg01, local01
058ac     A8 AF B1 FD | 	call	#__system___string_cmp
058b0     00 FA 0D F2 | 	cmp	result1, #0 wz
058b4     8C 02 90 AD |  if_e	jmp	#LR__0454
058b8     82 01 00 FF 
058bc     9E 15 06 F6 | 	mov	arg02, ##@LR__5291
058c0     0F 13 02 F6 | 	mov	arg01, local01
058c4     90 AF B1 FD | 	call	#__system___string_cmp
058c8     00 FA 0D F2 | 	cmp	result1, #0 wz
058cc     7C 02 90 AD |  if_e	jmp	#LR__0455
058d0     82 01 00 FF 
058d4     A5 15 06 F6 | 	mov	arg02, ##@LR__5292
058d8     0F 13 02 F6 | 	mov	arg01, local01
058dc     78 AF B1 FD | 	call	#__system___string_cmp
058e0     00 FA 0D F2 | 	cmp	result1, #0 wz
058e4     6C 02 90 AD |  if_e	jmp	#LR__0456
058e8     82 01 00 FF 
058ec     AC 15 06 F6 | 	mov	arg02, ##@LR__5293
058f0     0F 13 02 F6 | 	mov	arg01, local01
058f4     60 AF B1 FD | 	call	#__system___string_cmp
058f8     00 FA 0D F2 | 	cmp	result1, #0 wz
058fc     5C 02 90 AD |  if_e	jmp	#LR__0457
05900     82 01 00 FF 
05904     B3 15 06 F6 | 	mov	arg02, ##@LR__5294
05908     0F 13 02 F6 | 	mov	arg01, local01
0590c     48 AF B1 FD | 	call	#__system___string_cmp
05910     00 FA 0D F2 | 	cmp	result1, #0 wz
05914     4C 02 90 AD |  if_e	jmp	#LR__0458
05918     82 01 00 FF 
0591c     BA 15 06 F6 | 	mov	arg02, ##@LR__5295
05920     0F 13 02 F6 | 	mov	arg01, local01
05924     30 AF B1 FD | 	call	#__system___string_cmp
05928     00 FA 0D F2 | 	cmp	result1, #0 wz
0592c     3C 02 90 AD |  if_e	jmp	#LR__0459
05930     82 01 00 FF 
05934     BF 15 06 F6 | 	mov	arg02, ##@LR__5296
05938     0F 13 02 F6 | 	mov	arg01, local01
0593c     18 AF B1 FD | 	call	#__system___string_cmp
05940     00 FA 0D F2 | 	cmp	result1, #0 wz
05944     2C 02 90 AD |  if_e	jmp	#LR__0460
05948     82 01 00 FF 
0594c     C7 15 06 F6 | 	mov	arg02, ##@LR__5297
05950     0F 13 02 F6 | 	mov	arg01, local01
05954     00 AF B1 FD | 	call	#__system___string_cmp
05958     00 FA 0D F2 | 	cmp	result1, #0 wz
0595c     1C 02 90 AD |  if_e	jmp	#LR__0461
05960     82 01 00 FF 
05964     CD 15 06 F6 | 	mov	arg02, ##@LR__5298
05968     0F 13 02 F6 | 	mov	arg01, local01
0596c     E8 AE B1 FD | 	call	#__system___string_cmp
05970     00 FA 0D F2 | 	cmp	result1, #0 wz
05974     0C 02 90 AD |  if_e	jmp	#LR__0462
05978     82 01 00 FF 
0597c     D4 15 06 F6 | 	mov	arg02, ##@LR__5299
05980     0F 13 02 F6 | 	mov	arg01, local01
05984     D0 AE B1 FD | 	call	#__system___string_cmp
05988     00 FA 0D F2 | 	cmp	result1, #0 wz
0598c     FC 01 90 AD |  if_e	jmp	#LR__0463
05990     82 01 00 FF 
05994     DA 15 06 F6 | 	mov	arg02, ##@LR__5300
05998     0F 13 02 F6 | 	mov	arg01, local01
0599c     B8 AE B1 FD | 	call	#__system___string_cmp
059a0     00 FA 0D F2 | 	cmp	result1, #0 wz
059a4     EC 01 90 AD |  if_e	jmp	#LR__0464
059a8     82 01 00 FF 
059ac     E0 15 06 F6 | 	mov	arg02, ##@LR__5301
059b0     0F 13 02 F6 | 	mov	arg01, local01
059b4     A0 AE B1 FD | 	call	#__system___string_cmp
059b8     00 FA 0D F2 | 	cmp	result1, #0 wz
059bc     DC 01 90 AD |  if_e	jmp	#LR__0465
059c0     82 01 00 FF 
059c4     E4 15 06 F6 | 	mov	arg02, ##@LR__5302
059c8     0F 13 02 F6 | 	mov	arg01, local01
059cc     88 AE B1 FD | 	call	#__system___string_cmp
059d0     00 FA 0D F2 | 	cmp	result1, #0 wz
059d4     CC 01 90 AD |  if_e	jmp	#LR__0466
059d8     82 01 00 FF 
059dc     E8 15 06 F6 | 	mov	arg02, ##@LR__5303
059e0     0F 13 02 F6 | 	mov	arg01, local01
059e4     70 AE B1 FD | 	call	#__system___string_cmp
059e8     00 FA 0D F2 | 	cmp	result1, #0 wz
059ec     BC 01 90 AD |  if_e	jmp	#LR__0467
059f0     82 01 00 FF 
059f4     EC 15 06 F6 | 	mov	arg02, ##@LR__5304
059f8     0F 13 02 F6 | 	mov	arg01, local01
059fc     58 AE B1 FD | 	call	#__system___string_cmp
05a00     00 FA 0D F2 | 	cmp	result1, #0 wz
05a04     AC 01 90 AD |  if_e	jmp	#LR__0468
05a08     82 01 00 FF 
05a0c     F2 15 06 F6 | 	mov	arg02, ##@LR__5305
05a10     0F 13 02 F6 | 	mov	arg01, local01
05a14     40 AE B1 FD | 	call	#__system___string_cmp
05a18     00 FA 0D F2 | 	cmp	result1, #0 wz
05a1c     9C 01 90 AD |  if_e	jmp	#LR__0469
05a20     82 01 00 FF 
05a24     F8 15 06 F6 | 	mov	arg02, ##@LR__5306
05a28     0F 13 02 F6 | 	mov	arg01, local01
05a2c     28 AE B1 FD | 	call	#__system___string_cmp
05a30     00 FA 0D F2 | 	cmp	result1, #0 wz
05a34     8C 01 90 AD |  if_e	jmp	#LR__0470
05a38     82 01 00 FF 
05a3c     FD 15 06 F6 | 	mov	arg02, ##@LR__5307
05a40     0F 13 02 F6 | 	mov	arg01, local01
05a44     10 AE B1 FD | 	call	#__system___string_cmp
05a48     00 FA 0D F2 | 	cmp	result1, #0 wz
05a4c     7C 01 90 AD |  if_e	jmp	#LR__0471
05a50     83 01 00 FF 
05a54     01 14 06 F6 | 	mov	arg02, ##@LR__5308
05a58     0F 13 02 F6 | 	mov	arg01, local01
05a5c     F8 AD B1 FD | 	call	#__system___string_cmp
05a60     00 FA 0D F2 | 	cmp	result1, #0 wz
05a64     6C 01 90 AD |  if_e	jmp	#LR__0472
05a68     83 01 00 FF 
05a6c     05 14 06 F6 | 	mov	arg02, ##@LR__5309
05a70     0F 13 02 F6 | 	mov	arg01, local01
05a74     E0 AD B1 FD | 	call	#__system___string_cmp
05a78     00 FA 0D F2 | 	cmp	result1, #0 wz
05a7c     5C 01 90 AD |  if_e	jmp	#LR__0473
05a80     60 01 90 FD | 	jmp	#LR__0474
05a84                 | LR__0430
05a84     9E FA 05 F6 | 	mov	result1, #158
05a88     5C 01 90 FD | 	jmp	#LR__0475
05a8c                 | LR__0431
05a8c     85 FA 05 F6 | 	mov	result1, #133
05a90     54 01 90 FD | 	jmp	#LR__0475
05a94                 | LR__0432
05a94     9B FA 05 F6 | 	mov	result1, #155
05a98     4C 01 90 FD | 	jmp	#LR__0475
05a9c                 | LR__0433
05a9c     9B FA 05 F6 | 	mov	result1, #155
05aa0     44 01 90 FD | 	jmp	#LR__0475
05aa4                 | LR__0434
05aa4     A7 FA 05 F6 | 	mov	result1, #167
05aa8     3C 01 90 FD | 	jmp	#LR__0475
05aac                 | LR__0435
05aac     84 FA 05 F6 | 	mov	result1, #132
05ab0     34 01 90 FD | 	jmp	#LR__0475
05ab4                 | LR__0436
05ab4     86 FA 05 F6 | 	mov	result1, #134
05ab8     2C 01 90 FD | 	jmp	#LR__0475
05abc                 | LR__0437
05abc     A2 FA 05 F6 | 	mov	result1, #162
05ac0     24 01 90 FD | 	jmp	#LR__0475
05ac4                 | LR__0438
05ac4     9F FA 05 F6 | 	mov	result1, #159
05ac8     1C 01 90 FD | 	jmp	#LR__0475
05acc                 | LR__0439
05acc     82 FA 05 F6 | 	mov	result1, #130
05ad0     14 01 90 FD | 	jmp	#LR__0475
05ad4                 | LR__0440
05ad4     99 FA 05 F6 | 	mov	result1, #153
05ad8     0C 01 90 FD | 	jmp	#LR__0475
05adc                 | LR__0441
05adc     9C FA 05 F6 | 	mov	result1, #156
05ae0     04 01 90 FD | 	jmp	#LR__0475
05ae4                 | LR__0442
05ae4     6F FA 05 F6 | 	mov	result1, #111
05ae8     FC 00 90 FD | 	jmp	#LR__0475
05aec                 | LR__0443
05aec     6F FA 05 F6 | 	mov	result1, #111
05af0     F4 00 90 FD | 	jmp	#LR__0475
05af4                 | LR__0444
05af4     93 FA 05 F6 | 	mov	result1, #147
05af8     EC 00 90 FD | 	jmp	#LR__0475
05afc                 | LR__0445
05afc     94 FA 05 F6 | 	mov	result1, #148
05b00     E4 00 90 FD | 	jmp	#LR__0475
05b04                 | LR__0446
05b04     62 FA 05 F6 | 	mov	result1, #98
05b08     DC 00 90 FD | 	jmp	#LR__0475
05b0c                 | LR__0447
05b0c     A3 FA 05 F6 | 	mov	result1, #163
05b10     D4 00 90 FD | 	jmp	#LR__0475
05b14                 | LR__0448
05b14     9D FA 05 F6 | 	mov	result1, #157
05b18     CC 00 90 FD | 	jmp	#LR__0475
05b1c                 | LR__0449
05b1c     8A FA 05 F6 | 	mov	result1, #138
05b20     C4 00 90 FD | 	jmp	#LR__0475
05b24                 | LR__0450
05b24     A4 FA 05 F6 | 	mov	result1, #164
05b28     BC 00 90 FD | 	jmp	#LR__0475
05b2c                 | LR__0451
05b2c     A8 FA 05 F6 | 	mov	result1, #168
05b30     B4 00 90 FD | 	jmp	#LR__0475
05b34                 | LR__0452
05b34     AD FA 05 F6 | 	mov	result1, #173
05b38     AC 00 90 FD | 	jmp	#LR__0475
05b3c                 | LR__0453
05b3c     9A FA 05 F6 | 	mov	result1, #154
05b40     A4 00 90 FD | 	jmp	#LR__0475
05b44                 | LR__0454
05b44     A6 FA 05 F6 | 	mov	result1, #166
05b48     9C 00 90 FD | 	jmp	#LR__0475
05b4c                 | LR__0455
05b4c     66 FA 05 F6 | 	mov	result1, #102
05b50     94 00 90 FD | 	jmp	#LR__0475
05b54                 | LR__0456
05b54     67 FA 05 F6 | 	mov	result1, #103
05b58     8C 00 90 FD | 	jmp	#LR__0475
05b5c                 | LR__0457
05b5c     64 FA 05 F6 | 	mov	result1, #100
05b60     84 00 90 FD | 	jmp	#LR__0475
05b64                 | LR__0458
05b64     65 FA 05 F6 | 	mov	result1, #101
05b68     7C 00 90 FD | 	jmp	#LR__0475
05b6c                 | LR__0459
05b6c     98 FA 05 F6 | 	mov	result1, #152
05b70     74 00 90 FD | 	jmp	#LR__0475
05b74                 | LR__0460
05b74     7B FA 05 F6 | 	mov	result1, #123
05b78     6C 00 90 FD | 	jmp	#LR__0475
05b7c                 | LR__0461
05b7c     76 FA 05 F6 | 	mov	result1, #118
05b80     64 00 90 FD | 	jmp	#LR__0475
05b84                 | LR__0462
05b84     A5 FA 05 F6 | 	mov	result1, #165
05b88     5C 00 90 FD | 	jmp	#LR__0475
05b8c                 | LR__0463
05b8c     7A FA 05 F6 | 	mov	result1, #122
05b90     54 00 90 FD | 	jmp	#LR__0475
05b94                 | LR__0464
05b94     BF FA 05 F6 | 	mov	result1, #191
05b98     4C 00 90 FD | 	jmp	#LR__0475
05b9c                 | LR__0465
05b9c     54 FA 05 F6 | 	mov	result1, #84
05ba0     44 00 90 FD | 	jmp	#LR__0475
05ba4                 | LR__0466
05ba4     6B FA 05 F6 | 	mov	result1, #107
05ba8     3C 00 90 FD | 	jmp	#LR__0475
05bac                 | LR__0467
05bac     87 FA 05 F6 | 	mov	result1, #135
05bb0     34 00 90 FD | 	jmp	#LR__0475
05bb4                 | LR__0468
05bb4     6A FA 05 F6 | 	mov	result1, #106
05bb8     2C 00 90 FD | 	jmp	#LR__0475
05bbc                 | LR__0469
05bbc     6E FA 05 F6 | 	mov	result1, #110
05bc0     24 00 90 FD | 	jmp	#LR__0475
05bc4                 | LR__0470
05bc4     A1 FA 05 F6 | 	mov	result1, #161
05bc8     1C 00 90 FD | 	jmp	#LR__0475
05bcc                 | LR__0471
05bcc     83 FA 05 F6 | 	mov	result1, #131
05bd0     14 00 90 FD | 	jmp	#LR__0475
05bd4                 | LR__0472
05bd4     A0 FA 05 F6 | 	mov	result1, #160
05bd8     0C 00 90 FD | 	jmp	#LR__0475
05bdc                 | LR__0473
05bdc     9B FA 05 F6 | 	mov	result1, #155
05be0     04 00 90 FD | 	jmp	#LR__0475
05be4                 | LR__0474
05be4     00 FA 05 F6 | 	mov	result1, #0
05be8                 | LR__0475
05be8     A7 F0 03 F6 | 	mov	ptra, fp
05bec     B2 00 A0 FD | 	call	#popregs_
05bf0                 | _isfunction_ret
05bf0     2D 00 64 FD | 	ret
05bf4                 | 
05bf4                 | ' 
05bf4                 | ' ' Check if the part is a name
05bf4                 | ' 
05bf4                 | ' function isname(s as string) as boolean
05bf4                 | _isname
05bf4     0D 4A 05 F6 | 	mov	COUNT_, #13
05bf8     A8 00 A0 FD | 	call	#pushregs_
05bfc     09 1F 02 F6 | 	mov	local01, arg01
05c00     09 21 02 F6 | 	mov	local02, arg01
05c04     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
05c08                 | LR__0480
05c08     10 FB C9 FA | 	rdbyte	result1, local02 wz
05c0c     01 20 06 51 |  if_ne	add	local02, #1
05c10     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05c14                 | LR__0481
05c14     09 21 82 F1 | 	sub	local02, arg01
05c18     10 FB 01 F6 | 	mov	result1, local02
05c1c     FD 22 0A F6 | 	mov	local03, result1 wz
05c20     00 FA 05 A6 |  if_e	mov	result1, #0
05c24     34 02 90 AD |  if_e	jmp	#LR__0493
05c28     0F 13 02 F6 | 	mov	arg01, local01
05c2c     01 14 06 F6 | 	mov	arg02, #1
05c30     01 16 06 F6 | 	mov	arg03, #1
05c34     8C CD B1 FD | 	call	#__system__Mid_S
05c38     FD 24 02 F6 | 	mov	local04, result1
05c3c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05c3c     83 01 00 FF 
05c40     0C 14 06 F6 | 	mov	arg02, ##@LR__5310
05c44     12 13 02 F6 | 	mov	arg01, local04
05c48     0C AC B1 FD | 	call	#__system___string_cmp
05c4c     00 FA 55 F2 | 	cmps	result1, #0 wc
05c50     18 00 90 CD |  if_b	jmp	#LR__0482
05c54     83 01 00 FF 
05c58     0E 14 06 F6 | 	mov	arg02, ##@LR__5311
05c5c     12 13 02 F6 | 	mov	arg01, local04
05c60     F4 AB B1 FD | 	call	#__system___string_cmp
05c64     01 FA 55 F2 | 	cmps	result1, #1 wc
05c68     1C 00 90 CD |  if_b	jmp	#LR__0483
05c6c                 | LR__0482
05c6c     83 01 00 FF 
05c70     10 14 06 F6 | 	mov	arg02, ##@LR__5312
05c74     12 13 02 F6 | 	mov	arg01, local04
05c78     DC AB B1 FD | 	call	#__system___string_cmp
05c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c80     00 FA 05 56 |  if_ne	mov	result1, #0
05c84     D4 01 90 5D |  if_ne	jmp	#LR__0493
05c88                 | LR__0483
05c88                 | ' if l>2 then 
05c88     03 22 56 F2 | 	cmps	local03, #3 wc
05c8c     C8 01 90 CD |  if_b	jmp	#LR__0492
05c90                 | '   for i=2 to l
05c90     02 26 06 F6 | 	mov	local05, #2
05c94     11 29 02 F6 | 	mov	local06, local03
05c98     01 28 06 F1 | 	add	local06, #1
05c9c                 | LR__0484
05c9c     14 27 52 F2 | 	cmps	local05, local06 wc
05ca0     B4 01 90 3D |  if_ae	jmp	#LR__0491
05ca4     0F 13 02 F6 | 	mov	arg01, local01
05ca8     13 15 02 F6 | 	mov	arg02, local05
05cac     01 16 06 F6 | 	mov	arg03, #1
05cb0     10 CD B1 FD | 	call	#__system__Mid_S
05cb4     FD 24 02 F6 | 	mov	local04, result1
05cb8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
05cb8     11 27 52 F2 | 	cmps	local05, local03 wc
05cbc     9C 00 90 3D |  if_ae	jmp	#LR__0487
05cc0     83 01 00 FF 
05cc4     12 14 06 F6 | 	mov	arg02, ##@LR__5313
05cc8     12 13 02 F6 | 	mov	arg01, local04
05ccc     88 AB B1 FD | 	call	#__system___string_cmp
05cd0     00 FA 55 F2 | 	cmps	result1, #0 wc
05cd4     18 00 90 CD |  if_b	jmp	#LR__0485
05cd8     83 01 00 FF 
05cdc     14 14 06 F6 | 	mov	arg02, ##@LR__5314
05ce0     12 13 02 F6 | 	mov	arg01, local04
05ce4     70 AB B1 FD | 	call	#__system___string_cmp
05ce8     01 FA 55 F2 | 	cmps	result1, #1 wc
05cec     6C 00 90 CD |  if_b	jmp	#LR__0487
05cf0                 | LR__0485
05cf0     83 01 00 FF 
05cf4     16 14 06 F6 | 	mov	arg02, ##@LR__5315
05cf8     12 13 02 F6 | 	mov	arg01, local04
05cfc     58 AB B1 FD | 	call	#__system___string_cmp
05d00     00 FA 55 F2 | 	cmps	result1, #0 wc
05d04     18 00 90 CD |  if_b	jmp	#LR__0486
05d08     83 01 00 FF 
05d0c     18 14 06 F6 | 	mov	arg02, ##@LR__5316
05d10     12 13 02 F6 | 	mov	arg01, local04
05d14     40 AB B1 FD | 	call	#__system___string_cmp
05d18     01 FA 55 F2 | 	cmps	result1, #1 wc
05d1c     3C 00 90 CD |  if_b	jmp	#LR__0487
05d20                 | LR__0486
05d20     83 01 00 FF 
05d24     1A 2A 06 F6 | 	mov	local07, ##@LR__5317
05d28     12 13 02 F6 | 	mov	arg01, local04
05d2c     15 15 02 F6 | 	mov	arg02, local07
05d30     24 AB B1 FD | 	call	#__system___string_cmp
05d34     00 FA 0D F2 | 	cmp	result1, #0 wz
05d38     20 00 90 AD |  if_e	jmp	#LR__0487
05d3c     83 01 00 FF 
05d40     1C 2C 06 F6 | 	mov	local08, ##@LR__5318
05d44     12 13 02 F6 | 	mov	arg01, local04
05d48     16 15 02 F6 | 	mov	arg02, local08
05d4c     08 AB B1 FD | 	call	#__system___string_cmp
05d50     FD 2E 0A F6 | 	mov	local09, result1 wz
05d54     00 FA 05 56 |  if_ne	mov	result1, #0
05d58     00 01 90 5D |  if_ne	jmp	#LR__0493
05d5c                 | LR__0487
05d5c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05d5c     11 27 0A F2 | 	cmp	local05, local03 wz
05d60     EC 00 90 5D |  if_ne	jmp	#LR__0490
05d64     83 01 00 FF 
05d68     1E 30 06 F6 | 	mov	local10, ##@LR__5319
05d6c     12 13 02 F6 | 	mov	arg01, local04
05d70     18 15 02 F6 | 	mov	arg02, local10
05d74     E0 AA B1 FD | 	call	#__system___string_cmp
05d78     FD 32 02 F6 | 	mov	local11, result1
05d7c     00 32 56 F2 | 	cmps	local11, #0 wc
05d80     1C 00 90 CD |  if_b	jmp	#LR__0488
05d84     83 01 00 FF 
05d88     20 14 06 F6 | 	mov	arg02, ##@LR__5320
05d8c     12 13 02 F6 | 	mov	arg01, local04
05d90     C4 AA B1 FD | 	call	#__system___string_cmp
05d94     FD 30 02 F6 | 	mov	local10, result1
05d98     01 30 56 F2 | 	cmps	local10, #1 wc
05d9c     B0 00 90 CD |  if_b	jmp	#LR__0490
05da0                 | LR__0488
05da0     83 01 00 FF 
05da4     22 14 06 F6 | 	mov	arg02, ##@LR__5321
05da8     12 13 02 F6 | 	mov	arg01, local04
05dac     A8 AA B1 FD | 	call	#__system___string_cmp
05db0     00 FA 55 F2 | 	cmps	result1, #0 wc
05db4     1C 00 90 CD |  if_b	jmp	#LR__0489
05db8     83 01 00 FF 
05dbc     24 2E 06 F6 | 	mov	local09, ##@LR__5322
05dc0     12 13 02 F6 | 	mov	arg01, local04
05dc4     17 15 02 F6 | 	mov	arg02, local09
05dc8     8C AA B1 FD | 	call	#__system___string_cmp
05dcc     01 FA 55 F2 | 	cmps	result1, #1 wc
05dd0     7C 00 90 CD |  if_b	jmp	#LR__0490
05dd4                 | LR__0489
05dd4     83 01 00 FF 
05dd8     26 2E 06 F6 | 	mov	local09, ##@LR__5323
05ddc     12 13 02 F6 | 	mov	arg01, local04
05de0     17 15 02 F6 | 	mov	arg02, local09
05de4     70 AA B1 FD | 	call	#__system___string_cmp
05de8     00 FA 4D F2 | 	cmps	result1, #0 wz
05dec     60 00 90 AD |  if_e	jmp	#LR__0490
05df0     83 01 00 FF 
05df4     28 2C 06 F6 | 	mov	local08, ##@LR__5324
05df8     12 13 02 F6 | 	mov	arg01, local04
05dfc     16 15 02 F6 | 	mov	arg02, local08
05e00     54 AA B1 FD | 	call	#__system___string_cmp
05e04     FD 2E 0A F6 | 	mov	local09, result1 wz
05e08     44 00 90 AD |  if_e	jmp	#LR__0490
05e0c     83 01 00 FF 
05e10     2A 34 06 F6 | 	mov	local12, ##@LR__5325
05e14     1A 2D 02 F6 | 	mov	local08, local12
05e18     12 13 02 F6 | 	mov	arg01, local04
05e1c     16 15 02 F6 | 	mov	arg02, local08
05e20     34 AA B1 FD | 	call	#__system___string_cmp
05e24     FD 2A 0A F6 | 	mov	local07, result1 wz
05e28     24 00 90 AD |  if_e	jmp	#LR__0490
05e2c     83 01 00 FF 
05e30     2C 36 06 F6 | 	mov	local13, ##@LR__5326
05e34     1B 35 02 F6 | 	mov	local12, local13
05e38     12 13 02 F6 | 	mov	arg01, local04
05e3c     1A 15 02 F6 | 	mov	arg02, local12
05e40     14 AA B1 FD | 	call	#__system___string_cmp
05e44     FD 2C 0A F6 | 	mov	local08, result1 wz
05e48     00 FA 05 56 |  if_ne	mov	result1, #0
05e4c     0C 00 90 5D |  if_ne	jmp	#LR__0493
05e50                 | LR__0490
05e50     01 26 06 F1 | 	add	local05, #1
05e54     44 FE 9F FD | 	jmp	#LR__0484
05e58                 | LR__0491
05e58                 | LR__0492
05e58                 | ' return true
05e58     01 FA 65 F6 | 	neg	result1, #1
05e5c                 | LR__0493
05e5c     A7 F0 03 F6 | 	mov	ptra, fp
05e60     B2 00 A0 FD | 	call	#popregs_
05e64                 | _isname_ret
05e64     2D 00 64 FD | 	ret
05e68                 | 
05e68                 | ' 
05e68                 | ' ' Check if the part is a number.  
05e68                 | ' 
05e68                 | ' function isnum(s as string) as boolean 
05e68                 | _isnum
05e68     13 4A 05 F6 | 	mov	COUNT_, #19
05e6c     A8 00 A0 FD | 	call	#pushregs_
05e70     09 1F 02 F6 | 	mov	local01, arg01
05e74     00 20 06 F6 | 	mov	local02, #0
05e78     00 22 06 F6 | 	mov	local03, #0
05e7c     0F 13 02 F6 | 	mov	arg01, local01
05e80     09 25 02 F6 | 	mov	local04, arg01
05e84     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
05e88                 | LR__0500
05e88     12 FB C9 FA | 	rdbyte	result1, local04 wz
05e8c     01 24 06 51 |  if_ne	add	local04, #1
05e90     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
05e94                 | LR__0501
05e94     09 25 82 F1 | 	sub	local04, arg01
05e98     12 FB 01 F6 | 	mov	result1, local04
05e9c     FD 26 0A F6 | 	mov	local05, result1 wz
05ea0     00 FA 05 A6 |  if_e	mov	result1, #0
05ea4     A0 03 90 AD |  if_e	jmp	#LR__0516
05ea8     0F 13 02 F6 | 	mov	arg01, local01
05eac     01 14 06 F6 | 	mov	arg02, #1
05eb0     01 16 06 F6 | 	mov	arg03, #1
05eb4     0C CB B1 FD | 	call	#__system__Mid_S
05eb8     FD 28 02 F6 | 	mov	local06, result1
05ebc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05ebc     83 01 00 FF 
05ec0     2E 14 06 F6 | 	mov	arg02, ##@LR__5327
05ec4     14 13 02 F6 | 	mov	arg01, local06
05ec8     8C A9 B1 FD | 	call	#__system___string_cmp
05ecc     00 FA 55 F2 | 	cmps	result1, #0 wc
05ed0     1C 00 90 CD |  if_b	jmp	#LR__0502
05ed4     83 01 00 FF 
05ed8     30 2A 06 F6 | 	mov	local07, ##@LR__5328
05edc     14 13 02 F6 | 	mov	arg01, local06
05ee0     15 15 02 F6 | 	mov	arg02, local07
05ee4     70 A9 B1 FD | 	call	#__system___string_cmp
05ee8     01 FA 55 F2 | 	cmps	result1, #1 wc
05eec     84 00 90 CD |  if_b	jmp	#LR__0503
05ef0                 | LR__0502
05ef0     83 01 00 FF 
05ef4     32 2C 06 F6 | 	mov	local08, ##@LR__5329
05ef8     16 2B 02 F6 | 	mov	local07, local08
05efc     14 13 02 F6 | 	mov	arg01, local06
05f00     15 15 02 F6 | 	mov	arg02, local07
05f04     50 A9 B1 FD | 	call	#__system___string_cmp
05f08     00 FA 0D F2 | 	cmp	result1, #0 wz
05f0c     64 00 90 AD |  if_e	jmp	#LR__0503
05f10     83 01 00 FF 
05f14     34 2E 06 F6 | 	mov	local09, ##@LR__5330
05f18     17 2D 02 F6 | 	mov	local08, local09
05f1c     14 13 02 F6 | 	mov	arg01, local06
05f20     16 15 02 F6 | 	mov	arg02, local08
05f24     30 A9 B1 FD | 	call	#__system___string_cmp
05f28     FD 2A 0A F6 | 	mov	local07, result1 wz
05f2c     44 00 90 AD |  if_e	jmp	#LR__0503
05f30     83 01 00 FF 
05f34     36 30 06 F6 | 	mov	local10, ##@LR__5331
05f38     18 2F 02 F6 | 	mov	local09, local10
05f3c     14 13 02 F6 | 	mov	arg01, local06
05f40     17 15 02 F6 | 	mov	arg02, local09
05f44     10 A9 B1 FD | 	call	#__system___string_cmp
05f48     FD 2C 0A F6 | 	mov	local08, result1 wz
05f4c     24 00 90 AD |  if_e	jmp	#LR__0503
05f50     83 01 00 FF 
05f54     38 32 06 F6 | 	mov	local11, ##@LR__5332
05f58     19 31 02 F6 | 	mov	local10, local11
05f5c     14 13 02 F6 | 	mov	arg01, local06
05f60     18 15 02 F6 | 	mov	arg02, local10
05f64     F0 A8 B1 FD | 	call	#__system___string_cmp
05f68     FD 2E 0A F6 | 	mov	local09, result1 wz
05f6c     00 FA 05 56 |  if_ne	mov	result1, #0
05f70     D4 02 90 5D |  if_ne	jmp	#LR__0516
05f74                 | LR__0503
05f74                 | ' if m$="." then ds=1
05f74     83 01 00 FF 
05f78     3A 14 06 F6 | 	mov	arg02, ##@LR__5333
05f7c     14 13 02 F6 | 	mov	arg01, local06
05f80     D4 A8 B1 FD | 	call	#__system___string_cmp
05f84     00 FA 0D F2 | 	cmp	result1, #0 wz
05f88     01 20 06 A6 |  if_e	mov	local02, #1
05f8c                 | ' if m$="$" then hex=1 else hex=0
05f8c     83 01 00 FF 
05f90     3C 14 06 F6 | 	mov	arg02, ##@LR__5334
05f94     14 13 02 F6 | 	mov	arg01, local06
05f98     BC A8 B1 FD | 	call	#__system___string_cmp
05f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa0     01 34 06 A6 |  if_e	mov	local12, #1
05fa4     00 34 06 56 |  if_ne	mov	local12, #0
05fa8                 | ' if m$="%" then bin=1 else bin=0
05fa8     83 01 00 FF 
05fac     3E 14 06 F6 | 	mov	arg02, ##@LR__5335
05fb0     14 13 02 F6 | 	mov	arg01, local06
05fb4     A0 A8 B1 FD | 	call	#__system___string_cmp
05fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fbc     01 36 06 A6 |  if_e	mov	local13, #1
05fc0     00 36 06 56 |  if_ne	mov	local13, #0
05fc4                 | ' if l>1 then 
05fc4     02 26 56 F2 | 	cmps	local05, #2 wc
05fc8     78 02 90 CD |  if_b	jmp	#LR__0515
05fcc                 | '   for i=2 to l
05fcc     02 38 06 F6 | 	mov	local14, #2
05fd0     13 3B 02 F6 | 	mov	local15, local05
05fd4     01 3A 06 F1 | 	add	local15, #1
05fd8                 | LR__0504
05fd8     1D 39 52 F2 | 	cmps	local14, local15 wc
05fdc     64 02 90 3D |  if_ae	jmp	#LR__0514
05fe0     0F 13 02 F6 | 	mov	arg01, local01
05fe4     1C 15 02 F6 | 	mov	arg02, local14
05fe8     01 16 06 F6 | 	mov	arg03, #1
05fec     D4 C9 B1 FD | 	call	#__system__Mid_S
05ff0     FD 28 02 F6 | 	mov	local06, result1
05ff4     00 3C 06 F6 | 	mov	local16, #0
05ff8                 | '     m$=mid$(s,i,1) : b=false
05ff8                 | '     if m$>="0" andalso m$<="9" then b=true  
05ff8     83 01 00 FF 
05ffc     40 14 06 F6 | 	mov	arg02, ##@LR__5336
06000     14 13 02 F6 | 	mov	arg01, local06
06004     50 A8 B1 FD | 	call	#__system___string_cmp
06008     00 FA 55 F2 | 	cmps	result1, #0 wc
0600c     1C 00 90 CD |  if_b	jmp	#LR__0505
06010     83 01 00 FF 
06014     42 2A 06 F6 | 	mov	local07, ##@LR__5337
06018     14 13 02 F6 | 	mov	arg01, local06
0601c     15 15 02 F6 | 	mov	arg02, local07
06020     34 A8 B1 FD | 	call	#__system___string_cmp
06024     01 FA 55 F2 | 	cmps	result1, #1 wc
06028     01 3C 66 C6 |  if_b	neg	local16, #1
0602c                 | LR__0505
0602c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0602c     83 01 00 FF 
06030     44 14 06 F6 | 	mov	arg02, ##@LR__5338
06034     14 13 02 F6 | 	mov	arg01, local06
06038     1C A8 B1 FD | 	call	#__system___string_cmp
0603c     00 FA 0D F2 | 	cmp	result1, #0 wz
06040     7C 00 90 AD |  if_e	jmp	#LR__0506
06044     83 01 00 FF 
06048     46 2A 06 F6 | 	mov	local07, ##@LR__5339
0604c     14 13 02 F6 | 	mov	arg01, local06
06050     15 15 02 F6 | 	mov	arg02, local07
06054     00 A8 B1 FD | 	call	#__system___string_cmp
06058     00 FA 0D F2 | 	cmp	result1, #0 wz
0605c     60 00 90 AD |  if_e	jmp	#LR__0506
06060     83 01 00 FF 
06064     48 2C 06 F6 | 	mov	local08, ##@LR__5340
06068     16 2B 02 F6 | 	mov	local07, local08
0606c     14 13 02 F6 | 	mov	arg01, local06
06070     15 15 02 F6 | 	mov	arg02, local07
06074     E0 A7 B1 FD | 	call	#__system___string_cmp
06078     00 FA 0D F2 | 	cmp	result1, #0 wz
0607c     40 00 90 AD |  if_e	jmp	#LR__0506
06080     83 01 00 FF 
06084     4A 2E 06 F6 | 	mov	local09, ##@LR__5341
06088     17 2D 02 F6 | 	mov	local08, local09
0608c     14 13 02 F6 | 	mov	arg01, local06
06090     16 15 02 F6 | 	mov	arg02, local08
06094     C0 A7 B1 FD | 	call	#__system___string_cmp
06098     FD 2A 0A F6 | 	mov	local07, result1 wz
0609c     20 00 90 AD |  if_e	jmp	#LR__0506
060a0     83 01 00 FF 
060a4     4C 30 06 F6 | 	mov	local10, ##@LR__5342
060a8     18 2F 02 F6 | 	mov	local09, local10
060ac     14 13 02 F6 | 	mov	arg01, local06
060b0     17 15 02 F6 | 	mov	arg02, local09
060b4     A0 A7 B1 FD | 	call	#__system___string_cmp
060b8     FD 2C 0A F6 | 	mov	local08, result1 wz
060bc     04 00 90 5D |  if_ne	jmp	#LR__0507
060c0                 | LR__0506
060c0     01 3C 66 F6 | 	neg	local16, #1
060c4                 | LR__0507
060c4                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
060c4     01 34 0E F2 | 	cmp	local12, #1 wz
060c8     34 00 90 5D |  if_ne	jmp	#LR__0508
060cc     83 01 00 FF 
060d0     4E 14 06 F6 | 	mov	arg02, ##@LR__5343
060d4     14 13 02 F6 | 	mov	arg01, local06
060d8     7C A7 B1 FD | 	call	#__system___string_cmp
060dc     00 FA 55 F2 | 	cmps	result1, #0 wc
060e0     1C 00 90 CD |  if_b	jmp	#LR__0508
060e4     83 01 00 FF 
060e8     50 2A 06 F6 | 	mov	local07, ##@LR__5344
060ec     14 13 02 F6 | 	mov	arg01, local06
060f0     15 15 02 F6 | 	mov	arg02, local07
060f4     60 A7 B1 FD | 	call	#__system___string_cmp
060f8     01 FA 55 F2 | 	cmps	result1, #1 wc
060fc     01 3C 66 C6 |  if_b	neg	local16, #1
06100                 | LR__0508
06100                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06100     01 36 0E F2 | 	cmp	local13, #1 wz
06104     58 00 90 5D |  if_ne	jmp	#LR__0510
06108     83 01 00 FF 
0610c     52 14 06 F6 | 	mov	arg02, ##@LR__5345
06110     14 13 02 F6 | 	mov	arg01, local06
06114     40 A7 B1 FD | 	call	#__system___string_cmp
06118     00 FA 55 F2 | 	cmps	result1, #0 wc
0611c     1C 00 90 CD |  if_b	jmp	#LR__0509
06120     83 01 00 FF 
06124     54 2A 06 F6 | 	mov	local07, ##@LR__5346
06128     14 13 02 F6 | 	mov	arg01, local06
0612c     15 15 02 F6 | 	mov	arg02, local07
06130     24 A7 B1 FD | 	call	#__system___string_cmp
06134     01 FA 55 F2 | 	cmps	result1, #1 wc
06138     24 00 90 CD |  if_b	jmp	#LR__0510
0613c                 | LR__0509
0613c     83 01 00 FF 
06140     56 2C 06 F6 | 	mov	local08, ##@LR__5347
06144     16 2B 02 F6 | 	mov	local07, local08
06148     14 13 02 F6 | 	mov	arg01, local06
0614c     15 15 02 F6 | 	mov	arg02, local07
06150     04 A7 B1 FD | 	call	#__system___string_cmp
06154     00 FA 0D F2 | 	cmp	result1, #0 wz
06158     00 FA 05 56 |  if_ne	mov	result1, #0
0615c     E8 00 90 5D |  if_ne	jmp	#LR__0516
06160                 | LR__0510
06160                 | '     if not b then return false
06160     1E 3D 22 F6 | 	not	local16, local16
06164     00 3C 0E F2 | 	cmp	local16, #0 wz
06168     00 FA 05 56 |  if_ne	mov	result1, #0
0616c     D8 00 90 5D |  if_ne	jmp	#LR__0516
06170                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06170     83 01 00 FF 
06174     58 14 06 F6 | 	mov	arg02, ##@LR__5348
06178     14 13 02 F6 | 	mov	arg01, local06
0617c     D8 A6 B1 FD | 	call	#__system___string_cmp
06180     00 FA 0D F2 | 	cmp	result1, #0 wz
06184     3C 00 90 5D |  if_ne	jmp	#LR__0511
06188     1C 15 02 F6 | 	mov	arg02, local14
0618c     01 14 86 F1 | 	sub	arg02, #1
06190     0F 13 02 F6 | 	mov	arg01, local01
06194     01 16 06 F6 | 	mov	arg03, #1
06198     28 C8 B1 FD | 	call	#__system__Mid_S
0619c     FD 12 02 F6 | 	mov	arg01, result1
061a0     18 CA B1 FD | 	call	#__system__LCase_S
061a4     FD 12 02 F6 | 	mov	arg01, result1
061a8     83 01 00 FF 
061ac     5A 2A 06 F6 | 	mov	local07, ##@LR__5349
061b0     15 15 02 F6 | 	mov	arg02, local07
061b4     A0 A6 B1 FD | 	call	#__system___string_cmp
061b8     00 FA 0D F2 | 	cmp	result1, #0 wz
061bc     00 FA 05 56 |  if_ne	mov	result1, #0
061c0     84 00 90 5D |  if_ne	jmp	#LR__0516
061c4                 | LR__0511
061c4                 | '     if m$="." then ds+=1: if ds>1 then return false
061c4     83 01 00 FF 
061c8     5C 14 06 F6 | 	mov	arg02, ##@LR__5350
061cc     14 13 02 F6 | 	mov	arg01, local06
061d0     84 A6 B1 FD | 	call	#__system___string_cmp
061d4     00 FA 0D F2 | 	cmp	result1, #0 wz
061d8     01 20 06 A1 |  if_e	add	local02, #1
061dc     02 20 56 A2 |  if_e	cmps	local02, #2 wc
061e0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
061e4     60 00 90 2D |  if_nc_and_z	jmp	#LR__0516
061e8                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
061e8     83 01 00 FF 
061ec     5E 3E 06 F6 | 	mov	local17, ##@LR__5351
061f0     1F 41 02 F6 | 	mov	local18, local17
061f4     14 13 02 F6 | 	mov	arg01, local06
061f8     20 15 02 F6 | 	mov	arg02, local18
061fc     58 A6 B1 FD | 	call	#__system___string_cmp
06200     FD 42 0A F6 | 	mov	local19, result1 wz
06204     20 00 90 AD |  if_e	jmp	#LR__0512
06208     83 01 00 FF 
0620c     60 2A 06 F6 | 	mov	local07, ##@LR__5352
06210     15 3F 02 F6 | 	mov	local17, local07
06214     14 13 02 F6 | 	mov	arg01, local06
06218     1F 15 02 F6 | 	mov	arg02, local17
0621c     38 A6 B1 FD | 	call	#__system___string_cmp
06220     FD 40 0A F6 | 	mov	local18, result1 wz
06224     14 00 90 5D |  if_ne	jmp	#LR__0513
06228                 | LR__0512
06228     01 22 06 F1 | 	add	local03, #1
0622c     00 34 0E F2 | 	cmp	local12, #0 wz
06230     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06234     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06238     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0516
0623c                 | LR__0513
0623c     01 38 06 F1 | 	add	local14, #1
06240     94 FD 9F FD | 	jmp	#LR__0504
06244                 | LR__0514
06244                 | LR__0515
06244                 | ' return true
06244     01 FA 65 F6 | 	neg	result1, #1
06248                 | LR__0516
06248     A7 F0 03 F6 | 	mov	ptra, fp
0624c     B2 00 A0 FD | 	call	#popregs_
06250                 | _isnum_ret
06250     2D 00 64 FD | 	ret
06254                 | 
06254                 | '   
06254                 | ' ' Check if the part is an integer number.    
06254                 | '   
06254                 | ' function isint(s as string) as boolean
06254                 | _isint
06254     0E 4A 05 F6 | 	mov	COUNT_, #14
06258     A8 00 A0 FD | 	call	#pushregs_
0625c     09 1F 02 F6 | 	mov	local01, arg01
06260     09 21 02 F6 | 	mov	local02, arg01
06264     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06268                 | LR__0520
06268     10 FB C9 FA | 	rdbyte	result1, local02 wz
0626c     01 20 06 51 |  if_ne	add	local02, #1
06270     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06274                 | LR__0521
06274     09 21 82 F1 | 	sub	local02, arg01
06278     10 FB 01 F6 | 	mov	result1, local02
0627c     FD 22 0A F6 | 	mov	local03, result1 wz
06280     00 FA 05 A6 |  if_e	mov	result1, #0
06284     64 02 90 AD |  if_e	jmp	#LR__0534
06288     0F 13 02 F6 | 	mov	arg01, local01
0628c     01 14 06 F6 | 	mov	arg02, #1
06290     01 16 06 F6 | 	mov	arg03, #1
06294     2C C7 B1 FD | 	call	#__system__Mid_S
06298     FD 24 02 F6 | 	mov	local04, result1
0629c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0629c     83 01 00 FF 
062a0     62 14 06 F6 | 	mov	arg02, ##@LR__5353
062a4     12 13 02 F6 | 	mov	arg01, local04
062a8     AC A5 B1 FD | 	call	#__system___string_cmp
062ac     00 FA 55 F2 | 	cmps	result1, #0 wc
062b0     1C 00 90 CD |  if_b	jmp	#LR__0522
062b4     83 01 00 FF 
062b8     64 26 06 F6 | 	mov	local05, ##@LR__5354
062bc     12 13 02 F6 | 	mov	arg01, local04
062c0     13 15 02 F6 | 	mov	arg02, local05
062c4     90 A5 B1 FD | 	call	#__system___string_cmp
062c8     01 FA 55 F2 | 	cmps	result1, #1 wc
062cc     64 00 90 CD |  if_b	jmp	#LR__0523
062d0                 | LR__0522
062d0     83 01 00 FF 
062d4     66 28 06 F6 | 	mov	local06, ##@LR__5355
062d8     14 27 02 F6 | 	mov	local05, local06
062dc     12 13 02 F6 | 	mov	arg01, local04
062e0     13 15 02 F6 | 	mov	arg02, local05
062e4     70 A5 B1 FD | 	call	#__system___string_cmp
062e8     00 FA 0D F2 | 	cmp	result1, #0 wz
062ec     44 00 90 AD |  if_e	jmp	#LR__0523
062f0     83 01 00 FF 
062f4     68 2A 06 F6 | 	mov	local07, ##@LR__5356
062f8     15 29 02 F6 | 	mov	local06, local07
062fc     12 13 02 F6 | 	mov	arg01, local04
06300     14 15 02 F6 | 	mov	arg02, local06
06304     50 A5 B1 FD | 	call	#__system___string_cmp
06308     FD 26 0A F6 | 	mov	local05, result1 wz
0630c     24 00 90 AD |  if_e	jmp	#LR__0523
06310     83 01 00 FF 
06314     6A 2C 06 F6 | 	mov	local08, ##@LR__5357
06318     16 2B 02 F6 | 	mov	local07, local08
0631c     12 13 02 F6 | 	mov	arg01, local04
06320     15 15 02 F6 | 	mov	arg02, local07
06324     30 A5 B1 FD | 	call	#__system___string_cmp
06328     FD 28 0A F6 | 	mov	local06, result1 wz
0632c     00 FA 05 56 |  if_ne	mov	result1, #0
06330     B8 01 90 5D |  if_ne	jmp	#LR__0534
06334                 | LR__0523
06334                 | ' if m$="$" then hex=1 else hex=0
06334     83 01 00 FF 
06338     6C 14 06 F6 | 	mov	arg02, ##@LR__5358
0633c     12 13 02 F6 | 	mov	arg01, local04
06340     14 A5 B1 FD | 	call	#__system___string_cmp
06344     00 FA 0D F2 | 	cmp	result1, #0 wz
06348     01 2E 06 A6 |  if_e	mov	local09, #1
0634c     00 2E 06 56 |  if_ne	mov	local09, #0
06350                 | ' if m$="%" then bin=1 else bin=0
06350     83 01 00 FF 
06354     6E 14 06 F6 | 	mov	arg02, ##@LR__5359
06358     12 13 02 F6 | 	mov	arg01, local04
0635c     F8 A4 B1 FD | 	call	#__system___string_cmp
06360     00 FA 0D F2 | 	cmp	result1, #0 wz
06364     01 30 06 A6 |  if_e	mov	local10, #1
06368     00 30 06 56 |  if_ne	mov	local10, #0
0636c                 | ' if l>1 then 
0636c     02 22 56 F2 | 	cmps	local03, #2 wc
06370     74 01 90 CD |  if_b	jmp	#LR__0533
06374                 | '   for i=2 to l
06374     02 32 06 F6 | 	mov	local11, #2
06378     11 35 02 F6 | 	mov	local12, local03
0637c     01 34 06 F1 | 	add	local12, #1
06380                 | LR__0524
06380     1A 33 52 F2 | 	cmps	local11, local12 wc
06384     60 01 90 3D |  if_ae	jmp	#LR__0532
06388     0F 13 02 F6 | 	mov	arg01, local01
0638c     19 15 02 F6 | 	mov	arg02, local11
06390     01 16 06 F6 | 	mov	arg03, #1
06394     2C C6 B1 FD | 	call	#__system__Mid_S
06398     FD 24 02 F6 | 	mov	local04, result1
0639c                 | '     m$=mid$(s,i,1) 
0639c                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0639c     00 2E 0E F2 | 	cmp	local09, #0 wz
063a0     50 00 90 5D |  if_ne	jmp	#LR__0526
063a4     83 01 00 FF 
063a8     70 14 06 F6 | 	mov	arg02, ##@LR__5360
063ac     12 13 02 F6 | 	mov	arg01, local04
063b0     A4 A4 B1 FD | 	call	#__system___string_cmp
063b4     00 FA 55 F2 | 	cmps	result1, #0 wc
063b8     18 00 90 CD |  if_b	jmp	#LR__0525
063bc     83 01 00 FF 
063c0     72 14 06 F6 | 	mov	arg02, ##@LR__5361
063c4     12 13 02 F6 | 	mov	arg01, local04
063c8     8C A4 B1 FD | 	call	#__system___string_cmp
063cc     01 FA 55 F2 | 	cmps	result1, #1 wc
063d0     20 00 90 CD |  if_b	jmp	#LR__0526
063d4                 | LR__0525
063d4     83 01 00 FF 
063d8     74 28 06 F6 | 	mov	local06, ##@LR__5362
063dc     12 13 02 F6 | 	mov	arg01, local04
063e0     14 15 02 F6 | 	mov	arg02, local06
063e4     70 A4 B1 FD | 	call	#__system___string_cmp
063e8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ec     00 FA 05 56 |  if_ne	mov	result1, #0
063f0     F8 00 90 5D |  if_ne	jmp	#LR__0534
063f4                 | LR__0526
063f4                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
063f4     01 2E 0E F2 | 	cmp	local09, #1 wz
063f8     90 00 90 5D |  if_ne	jmp	#LR__0529
063fc     83 01 00 FF 
06400     76 14 06 F6 | 	mov	arg02, ##@LR__5363
06404     12 13 02 F6 | 	mov	arg01, local04
06408     4C A4 B1 FD | 	call	#__system___string_cmp
0640c     00 FA 55 F2 | 	cmps	result1, #0 wc
06410     1C 00 90 CD |  if_b	jmp	#LR__0527
06414     83 01 00 FF 
06418     78 14 06 F6 | 	mov	arg02, ##@LR__5364
0641c     12 13 02 F6 | 	mov	arg01, local04
06420     34 A4 B1 FD | 	call	#__system___string_cmp
06424     FD 36 02 F6 | 	mov	local13, result1
06428     01 36 56 F2 | 	cmps	local13, #1 wc
0642c     5C 00 90 CD |  if_b	jmp	#LR__0529
06430                 | LR__0527
06430     83 01 00 FF 
06434     7A 26 06 F6 | 	mov	local05, ##@LR__5365
06438     12 13 02 F6 | 	mov	arg01, local04
0643c     13 15 02 F6 | 	mov	arg02, local05
06440     14 A4 B1 FD | 	call	#__system___string_cmp
06444     FD 38 02 F6 | 	mov	local14, result1
06448     00 38 56 F2 | 	cmps	local14, #0 wc
0644c     1C 00 90 CD |  if_b	jmp	#LR__0528
06450     83 01 00 FF 
06454     7C 2A 06 F6 | 	mov	local07, ##@LR__5366
06458     12 13 02 F6 | 	mov	arg01, local04
0645c     15 15 02 F6 | 	mov	arg02, local07
06460     F4 A3 B1 FD | 	call	#__system___string_cmp
06464     01 FA 55 F2 | 	cmps	result1, #1 wc
06468     20 00 90 CD |  if_b	jmp	#LR__0529
0646c                 | LR__0528
0646c     83 01 00 FF 
06470     7E 2C 06 F6 | 	mov	local08, ##@LR__5367
06474     12 13 02 F6 | 	mov	arg01, local04
06478     16 15 02 F6 | 	mov	arg02, local08
0647c     D8 A3 B1 FD | 	call	#__system___string_cmp
06480     00 FA 0D F2 | 	cmp	result1, #0 wz
06484     00 FA 05 56 |  if_ne	mov	result1, #0
06488     60 00 90 5D |  if_ne	jmp	#LR__0534
0648c                 | LR__0529
0648c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0648c     01 30 0E F2 | 	cmp	local10, #1 wz
06490     4C 00 90 5D |  if_ne	jmp	#LR__0531
06494     83 01 00 FF 
06498     80 14 06 F6 | 	mov	arg02, ##@LR__5368
0649c     12 13 02 F6 | 	mov	arg01, local04
064a0     B4 A3 B1 FD | 	call	#__system___string_cmp
064a4     00 FA 55 F2 | 	cmps	result1, #0 wc
064a8     18 00 90 CD |  if_b	jmp	#LR__0530
064ac     83 01 00 FF 
064b0     82 14 06 F6 | 	mov	arg02, ##@LR__5369
064b4     12 13 02 F6 | 	mov	arg01, local04
064b8     9C A3 B1 FD | 	call	#__system___string_cmp
064bc     01 FA 55 F2 | 	cmps	result1, #1 wc
064c0     1C 00 90 CD |  if_b	jmp	#LR__0531
064c4                 | LR__0530
064c4     83 01 00 FF 
064c8     84 14 06 F6 | 	mov	arg02, ##@LR__5370
064cc     12 13 02 F6 | 	mov	arg01, local04
064d0     84 A3 B1 FD | 	call	#__system___string_cmp
064d4     00 FA 0D F2 | 	cmp	result1, #0 wz
064d8     00 FA 05 56 |  if_ne	mov	result1, #0
064dc     0C 00 90 5D |  if_ne	jmp	#LR__0534
064e0                 | LR__0531
064e0     01 32 06 F1 | 	add	local11, #1
064e4     98 FE 9F FD | 	jmp	#LR__0524
064e8                 | LR__0532
064e8                 | LR__0533
064e8                 | ' return true
064e8     01 FA 65 F6 | 	neg	result1, #1
064ec                 | LR__0534
064ec     A7 F0 03 F6 | 	mov	ptra, fp
064f0     B2 00 A0 FD | 	call	#popregs_
064f4                 | _isint_ret
064f4     2D 00 64 FD | 	ret
064f8                 | 
064f8                 | ' 
064f8                 | ' ' Check if the part is a positive decimal number.  
064f8                 | ' 
064f8                 | ' function isdec(s as string) as boolean
064f8                 | _isdec
064f8     05 4A 05 F6 | 	mov	COUNT_, #5
064fc     A8 00 A0 FD | 	call	#pushregs_
06500     09 1F 02 F6 | 	mov	local01, arg01
06504     09 21 02 F6 | 	mov	local02, arg01
06508     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0650c                 | LR__0540
0650c     10 FB C9 FA | 	rdbyte	result1, local02 wz
06510     01 20 06 51 |  if_ne	add	local02, #1
06514     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06518                 | LR__0541
06518     09 21 82 F1 | 	sub	local02, arg01
0651c     10 FB 01 F6 | 	mov	result1, local02
06520     FD 20 0A F6 | 	mov	local02, result1 wz
06524     00 FA 05 A6 |  if_e	mov	result1, #0
06528     80 00 90 AD |  if_e	jmp	#LR__0546
0652c                 | ' for i=1 to l
0652c     01 22 06 F6 | 	mov	local03, #1
06530     10 25 02 F6 | 	mov	local04, local02
06534     01 24 06 F1 | 	add	local04, #1
06538                 | LR__0542
06538     12 23 52 F2 | 	cmps	local03, local04 wc
0653c     68 00 90 3D |  if_ae	jmp	#LR__0545
06540     0F 13 02 F6 | 	mov	arg01, local01
06544     11 15 02 F6 | 	mov	arg02, local03
06548     01 16 06 F6 | 	mov	arg03, #1
0654c     74 C4 B1 FD | 	call	#__system__Mid_S
06550     FD 26 02 F6 | 	mov	local05, result1
06554                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06554     83 01 00 FF 
06558     86 14 06 F6 | 	mov	arg02, ##@LR__5371
0655c     13 13 02 F6 | 	mov	arg01, local05
06560     F4 A2 B1 FD | 	call	#__system___string_cmp
06564     00 FA 55 F2 | 	cmps	result1, #0 wc
06568     18 00 90 CD |  if_b	jmp	#LR__0543
0656c     83 01 00 FF 
06570     88 14 06 F6 | 	mov	arg02, ##@LR__5372
06574     13 13 02 F6 | 	mov	arg01, local05
06578     DC A2 B1 FD | 	call	#__system___string_cmp
0657c     01 FA 55 F2 | 	cmps	result1, #1 wc
06580     1C 00 90 CD |  if_b	jmp	#LR__0544
06584                 | LR__0543
06584     83 01 00 FF 
06588     8A 14 06 F6 | 	mov	arg02, ##@LR__5373
0658c     13 13 02 F6 | 	mov	arg01, local05
06590     C4 A2 B1 FD | 	call	#__system___string_cmp
06594     00 FA 0D F2 | 	cmp	result1, #0 wz
06598     00 FA 05 56 |  if_ne	mov	result1, #0
0659c     0C 00 90 5D |  if_ne	jmp	#LR__0546
065a0                 | LR__0544
065a0     01 22 06 F1 | 	add	local03, #1
065a4     90 FF 9F FD | 	jmp	#LR__0542
065a8                 | LR__0545
065a8                 | ' return true
065a8     01 FA 65 F6 | 	neg	result1, #1
065ac                 | LR__0546
065ac     A7 F0 03 F6 | 	mov	ptra, fp
065b0     B2 00 A0 FD | 	call	#popregs_
065b4                 | _isdec_ret
065b4     2D 00 64 FD | 	ret
065b8                 | 
065b8                 | ' 
065b8                 | ' ' Check if the part is a string.  
065b8                 | ' 
065b8                 | ' function isstring(s as string) as boolean
065b8                 | _isstring
065b8     01 4A 05 F6 | 	mov	COUNT_, #1
065bc     A8 00 A0 FD | 	call	#pushregs_
065c0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
065c0     09 1F 02 F6 | 	mov	local01, arg01
065c4     01 14 06 F6 | 	mov	arg02, #1
065c8     E0 C2 B1 FD | 	call	#__system__Left_S
065cc     FD 12 02 F6 | 	mov	arg01, result1
065d0     83 01 00 FF 
065d4     8C 14 06 F6 | 	mov	arg02, ##@LR__5374
065d8     7C A2 B1 FD | 	call	#__system___string_cmp
065dc     00 FA 4D F2 | 	cmps	result1, #0 wz
065e0     28 00 90 5D |  if_ne	jmp	#LR__0550
065e4     0F 13 02 F6 | 	mov	arg01, local01
065e8     01 14 06 F6 | 	mov	arg02, #1
065ec     44 C3 B1 FD | 	call	#__system__Right_S
065f0     FD 12 02 F6 | 	mov	arg01, result1
065f4     83 01 00 FF 
065f8     8E 14 06 F6 | 	mov	arg02, ##@LR__5375
065fc     58 A2 B1 FD | 	call	#__system___string_cmp
06600     00 FA 4D F2 | 	cmps	result1, #0 wz
06604     01 FA 65 A6 |  if_e	neg	result1, #1
06608     04 00 90 AD |  if_e	jmp	#LR__0551
0660c                 | LR__0550
0660c     00 FA 05 F6 | 	mov	result1, #0
06610                 | LR__0551
06610     A7 F0 03 F6 | 	mov	ptra, fp
06614     B2 00 A0 FD | 	call	#popregs_
06618                 | _isstring_ret
06618     2D 00 64 FD | 	ret
0661c                 | 
0661c                 | ' 
0661c                 | ' ' getnoteval. Returns the frequency of note token
0661c                 | ' 
0661c                 | ' function getnoteval(token) as single
0661c                 | _getnoteval
0661c     02 4A 05 F6 | 	mov	COUNT_, #2
06620     A8 00 A0 FD | 	call	#pushregs_
06624     01 00 00 FF 
06628     00 13 86 F1 | 	sub	arg01, ##768
0662c     09 15 52 F6 | 	abs	arg02, arg01 wc
06630     0C 14 16 FD | 	qdiv	arg02, #12
06634     14 00 00 FF 
06638     D8 E4 05 F1 | 	add	objptr, ##10456
0663c     19 14 62 FD | 	getqy	arg02
06640     0A 15 82 F6 | 	negc	arg02, arg02
06644     02 14 66 F0 | 	shl	arg02, #2
06648     F2 14 02 F1 | 	add	arg02, objptr
0664c     0A 1F 02 FB | 	rdlong	local01, arg02
06650     09 15 52 F6 | 	abs	arg02, arg01 wc
06654     0C 14 16 FD | 	qdiv	arg02, #12
06658     14 00 00 FF 
0665c     D8 E4 85 F1 | 	sub	objptr, ##10456
06660     01 12 06 F6 | 	mov	arg01, #1
06664                 | ' noteexp=1+(note/12) 
06664                 | ' return (2.0^noteexp)*notebase
06664     18 14 62 FD | 	getqx	arg02
06668     0A 13 82 F3 | 	sumc	arg01, arg02
0666c     09 13 52 F6 | 	abs	arg01, arg01 wc
06670     1F 20 C6 C9 |  if_b	decod	local02, #31
06674     00 20 06 36 |  if_ae	mov	local02, #0
06678     64 C9 B1 FD | 	call	#__system___float_fromuns
0667c     10 FB 61 F5 | 	xor	result1, local02
06680     FD 14 02 F6 | 	mov	arg02, result1
06684     1E 12 C6 F9 | 	decod	arg01, #30
06688     60 DC B1 FD | 	call	#__system____builtin_powf
0668c     FD 12 02 F6 | 	mov	arg01, result1
06690     0F 15 02 F6 | 	mov	arg02, local01
06694     4C CD B1 FD | 	call	#__system___float_mul
06698     A7 F0 03 F6 | 	mov	ptra, fp
0669c     B2 00 A0 FD | 	call	#popregs_
066a0                 | _getnoteval_ret
066a0     2D 00 64 FD | 	ret
066a4                 | 
066a4                 | ' 
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' 
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' '
066a4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
066a4                 | ' '
066a4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
066a4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
066a4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
066a4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
066a4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
066a4                 | ' ' 
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' 
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' ' Helper functions to manage program lines
066a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066a4                 | ' 
066a4                 | ' '----- delete a line from a program
066a4                 | ' 
066a4                 | ' function deleteline(aline as ulong) as integer
066a4                 | _deleteline
066a4     02 4A 05 F6 | 	mov	COUNT_, #2
066a8     A8 00 A0 FD | 	call	#pushregs_
066ac     2C F0 07 F1 | 	add	ptra, #44
066b0     04 4E 05 F1 | 	add	fp, #4
066b4     A7 12 62 FC | 	wrlong	arg01, fp
066b8     4A 00 00 FF 
066bc     88 E4 05 F1 | 	add	objptr, ##38024
066c0     F2 1E 02 FB | 	rdlong	local01, objptr
066c4     0C 4E 05 F1 | 	add	fp, #12
066c8     A7 1E 62 FC | 	wrlong	local01, fp
066cc     10 4E 85 F1 | 	sub	fp, #16
066d0                 | ' 
066d0                 | ' searchptr=programstart
066d0                 | ' do
066d0     3E 00 00 FF 
066d4     BC E5 85 F1 | 	sub	objptr, ##32188
066d8                 | LR__0560
066d8     14 4E 05 F1 | 	add	fp, #20
066dc     A7 12 02 F6 | 	mov	arg01, fp
066e0     04 4E 85 F1 | 	sub	fp, #4
066e4     A7 14 02 FB | 	rdlong	arg02, fp
066e8     10 4E 85 F1 | 	sub	fp, #16
066ec     18 16 06 F6 | 	mov	arg03, #24
066f0     FC 94 B1 FD | 	call	#_psram_spin2_read1
066f4     10 4E 05 F1 | 	add	fp, #16
066f8     A7 1E 02 FB | 	rdlong	local01, fp
066fc     08 4E 85 F1 | 	sub	fp, #8
06700     A7 1E 62 FC | 	wrlong	local01, fp
06704     20 4E 05 F1 | 	add	fp, #32
06708     A7 1E 02 FB | 	rdlong	local01, fp
0670c     18 4E 85 F1 | 	sub	fp, #24
06710     A7 1E 62 FC | 	wrlong	local01, fp
06714     04 4E 05 F1 | 	add	fp, #4
06718     A7 1E 02 FB | 	rdlong	local01, fp
0671c     10 4E 85 F1 | 	sub	fp, #16
06720     A7 16 02 FB | 	rdlong	arg03, fp
06724     04 4E 85 F1 | 	sub	fp, #4
06728     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0672c     28 4E 05 C1 |  if_b	add	fp, #40
06730     A7 20 02 CB |  if_b	rdlong	local02, fp
06734     28 4E 85 C1 |  if_b	sub	fp, #40
06738     FF FF 3F CF 
0673c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06740     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
06744     0B 00 00 FF 
06748     CC E4 85 F1 | 	sub	objptr, ##5836
0674c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
0674c     14 4E 05 F1 | 	add	fp, #20
06750     A7 1E 02 FB | 	rdlong	local01, fp
06754     10 4E 85 F1 | 	sub	fp, #16
06758     A7 20 02 FB | 	rdlong	local02, fp
0675c     04 4E 85 F1 | 	sub	fp, #4
06760     10 1F 0A F2 | 	cmp	local01, local02 wz
06764     01 FA 65 56 |  if_ne	neg	result1, #1
06768     34 02 90 5D |  if_ne	jmp	#LR__0565
0676c     08 4E 05 F1 | 	add	fp, #8
06770     A7 12 02 FB | 	rdlong	arg01, fp
06774     08 4E 85 F1 | 	sub	fp, #8
06778     01 14 66 F6 | 	neg	arg02, #1
0677c     84 6C B1 FD | 	call	#_pslpoke
06780                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06780                 | ' 
06780                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06780     28 4E 05 F1 | 	add	fp, #40
06784     A7 1E 02 FB | 	rdlong	local01, fp
06788     28 4E 85 F1 | 	sub	fp, #40
0678c     FF FF 3F FF 
06790     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06794     24 4E 05 A1 |  if_e	add	fp, #36
06798     A7 20 02 AB |  if_e	rdlong	local02, fp
0679c     24 4E 85 A1 |  if_e	sub	fp, #36
067a0     FF FF 7F AF 
067a4     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
067a8     88 00 90 5D |  if_ne	jmp	#LR__0561
067ac     4A 00 00 FF 
067b0     88 E4 05 F1 | 	add	objptr, ##38024
067b4     00 04 80 FF 
067b8     F2 00 68 FC | 	wrlong	##524288, objptr
067bc     07 00 00 FF 
067c0     2C E4 85 F1 | 	sub	objptr, ##3628
067c4     00 04 80 FF 
067c8     F2 00 68 FC | 	wrlong	##524288, objptr
067cc     07 00 00 FF 
067d0     30 E4 05 F1 | 	add	objptr, ##3632
067d4     F2 00 68 FC | 	wrlong	#0, objptr
067d8     04 E4 05 F1 | 	add	objptr, #4
067dc     FF FF FF FF 
067e0     F2 FE 6B FC | 	wrlong	##-1, objptr
067e4     4A 00 00 FF 
067e8     90 E4 85 F1 | 	sub	objptr, ##38032
067ec     00 12 06 F6 | 	mov	arg01, #0
067f0     01 14 66 F6 | 	neg	arg02, #1
067f4     0C 6C B1 FD | 	call	#_pslpoke
067f8     10 12 06 F6 | 	mov	arg01, #16
067fc     01 14 66 F6 | 	neg	arg02, #1
06800     00 6C B1 FD | 	call	#_pslpoke
06804     14 12 06 F6 | 	mov	arg01, #20
06808     1E 14 CE F9 | 	bmask	arg02, #30
0680c     F4 6B B1 FD | 	call	#_pslpoke
06810     50 00 00 FF 
06814     B8 E4 05 F1 | 	add	objptr, ##41144
06818     00 04 80 FF 
0681c     F2 00 68 FC | 	wrlong	##524288, objptr
06820     04 E4 05 F1 | 	add	objptr, #4
06824     00 04 80 FF 
06828     F2 00 68 FC | 	wrlong	##524288, objptr
0682c     50 00 00 FF 
06830     BC E4 85 F1 | 	sub	objptr, ##41148
06834                 | LR__0561
06834                 | ' 
06834                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06834     28 4E 05 F1 | 	add	fp, #40
06838     A7 1E 02 FB | 	rdlong	local01, fp
0683c     28 4E 85 F1 | 	sub	fp, #40
06840     FF FF 3F FF 
06844     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06848     74 00 90 5D |  if_ne	jmp	#LR__0562
0684c     24 4E 05 F1 | 	add	fp, #36
06850     A7 20 02 FB | 	rdlong	local02, fp
06854     24 4E 85 F1 | 	sub	fp, #36
06858     FF FF 7F FF 
0685c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06860     5C 00 90 AD |  if_e	jmp	#LR__0562
06864     24 4E 05 F1 | 	add	fp, #36
06868     A7 12 02 FB | 	rdlong	arg01, fp
0686c     24 4E 85 F1 | 	sub	fp, #36
06870     14 12 06 F1 | 	add	arg01, #20
06874     1E 14 CE F9 | 	bmask	arg02, #30
06878     88 6B B1 FD | 	call	#_pslpoke
0687c     24 4E 05 F1 | 	add	fp, #36
06880     A7 1E 02 FB | 	rdlong	local01, fp
06884     4A 00 00 FF 
06888     90 E4 05 F1 | 	add	objptr, ##38032
0688c     F2 1E 62 FC | 	wrlong	local01, objptr
06890     4A 00 00 FF 
06894     90 E4 85 F1 | 	sub	objptr, ##38032
06898     A7 12 02 FB | 	rdlong	arg01, fp
0689c     24 4E 85 F1 | 	sub	fp, #36
068a0     90 6C B1 FD | 	call	#_pslpeek
068a4     4A 00 00 FF 
068a8     8C E4 05 F1 | 	add	objptr, ##38028
068ac     F2 FA 61 FC | 	wrlong	result1, objptr
068b0     4A 00 00 FF 
068b4     8C E4 85 F1 | 	sub	objptr, ##38028
068b8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
068b8                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
068b8                 | '   lastline=pslpeek(header(4))
068b8                 | '   return 0
068b8     00 FA 05 F6 | 	mov	result1, #0
068bc     E0 00 90 FD | 	jmp	#LR__0565
068c0                 | LR__0562
068c0                 | ' 
068c0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
068c0     28 4E 05 F1 | 	add	fp, #40
068c4     A7 1E 02 FB | 	rdlong	local01, fp
068c8     28 4E 85 F1 | 	sub	fp, #40
068cc     FF FF 3F FF 
068d0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
068d4     58 00 90 AD |  if_e	jmp	#LR__0563
068d8     24 4E 05 F1 | 	add	fp, #36
068dc     A7 20 02 FB | 	rdlong	local02, fp
068e0     24 4E 85 F1 | 	sub	fp, #36
068e4     FF FF 7F FF 
068e8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
068ec     40 00 90 5D |  if_ne	jmp	#LR__0563
068f0     28 4E 05 F1 | 	add	fp, #40
068f4     A7 12 02 FB | 	rdlong	arg01, fp
068f8     28 4E 85 F1 | 	sub	fp, #40
068fc     10 12 06 F1 | 	add	arg01, #16
06900     01 14 66 F6 | 	neg	arg02, #1
06904     FC 6A B1 FD | 	call	#_pslpoke
06908     28 4E 05 F1 | 	add	fp, #40
0690c     A7 1E 02 FB | 	rdlong	local01, fp
06910     28 4E 85 F1 | 	sub	fp, #40
06914     4A 00 00 FF 
06918     88 E4 05 F1 | 	add	objptr, ##38024
0691c     F2 1E 62 FC | 	wrlong	local01, objptr
06920     4A 00 00 FF 
06924     88 E4 85 F1 | 	sub	objptr, ##38024
06928                 | ' '   print "deleted first line"
06928                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06928                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06928                 | '   return 0
06928     00 FA 05 F6 | 	mov	result1, #0
0692c     70 00 90 FD | 	jmp	#LR__0565
06930                 | LR__0563
06930                 | ' 
06930                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06930     28 4E 05 F1 | 	add	fp, #40
06934     A7 1E 02 FB | 	rdlong	local01, fp
06938     28 4E 85 F1 | 	sub	fp, #40
0693c     FF FF 3F FF 
06940     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06944     24 4E 05 51 |  if_ne	add	fp, #36
06948     A7 20 02 5B |  if_ne	rdlong	local02, fp
0694c     24 4E 85 51 |  if_ne	sub	fp, #36
06950     FF FF 7F 5F 
06954     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
06958     40 00 90 AD |  if_e	jmp	#LR__0564
0695c     28 4E 05 F1 | 	add	fp, #40
06960     A7 12 02 FB | 	rdlong	arg01, fp
06964     10 12 06 F1 | 	add	arg01, #16
06968     04 4E 85 F1 | 	sub	fp, #4
0696c     A7 14 02 FB | 	rdlong	arg02, fp
06970     24 4E 85 F1 | 	sub	fp, #36
06974     8C 6A B1 FD | 	call	#_pslpoke
06978     24 4E 05 F1 | 	add	fp, #36
0697c     A7 12 02 FB | 	rdlong	arg01, fp
06980     14 12 06 F1 | 	add	arg01, #20
06984     04 4E 05 F1 | 	add	fp, #4
06988     A7 14 02 FB | 	rdlong	arg02, fp
0698c     28 4E 85 F1 | 	sub	fp, #40
06990     70 6A B1 FD | 	call	#_pslpoke
06994                 | '    pslpoke(header(5)+16,header(4))  
06994                 | '    pslpoke(header(4)+20, header(5))
06994                 | '    return 0
06994     00 FA 05 F6 | 	mov	result1, #0
06998     04 00 90 FD | 	jmp	#LR__0565
0699c                 | LR__0564
0699c     00 FA 05 F6 | 	mov	result1, #0
069a0                 | LR__0565
069a0     A7 F0 03 F6 | 	mov	ptra, fp
069a4     B2 00 A0 FD | 	call	#popregs_
069a8                 | _deleteline_ret
069a8     2D 00 64 FD | 	ret
069ac                 | 
069ac                 | ' 
069ac                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
069ac                 | ' 
069ac                 | ' sub save_line
069ac                 | _save_line
069ac     03 4A 05 F6 | 	mov	COUNT_, #3
069b0     A8 00 A0 FD | 	call	#pushregs_
069b4     4A 00 00 FF 
069b8     7C E4 05 F1 | 	add	objptr, ##38012
069bc     F2 16 02 FB | 	rdlong	arg03, objptr
069c0     01 16 06 F1 | 	add	arg03, #1
069c4     05 00 00 FF 
069c8     18 E4 85 F1 | 	sub	objptr, ##2584
069cc     F2 14 02 FB | 	rdlong	arg02, objptr
069d0     0B 15 02 FD | 	qmul	arg02, arg03
069d4     0E 00 00 FF 
069d8     44 E4 85 F1 | 	sub	objptr, ##7236
069dc     F2 12 02 FB | 	rdlong	arg01, objptr
069e0     37 00 00 FF 
069e4     20 E4 85 F1 | 	sub	objptr, ##28192
069e8     09 1F 02 F6 | 	mov	local01, arg01
069ec     18 20 62 FD | 	getqx	local02
069f0     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
069f4                 | LR__0570
069f4     0F FB C9 FA | 	rdbyte	result1, local01 wz
069f8     01 1E 06 51 |  if_ne	add	local01, #1
069fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06a00                 | LR__0571
06a00     09 1F 82 F1 | 	sub	local01, arg01
06a04     03 1E CE F7 | 	test	local01, #3 wz
06a08     02 1E 46 50 |  if_ne	shr	local01, #2
06a0c     01 1E 06 51 |  if_ne	add	local01, #1
06a10     02 1E 66 50 |  if_ne	shl	local01, #2
06a14     10 23 02 F6 | 	mov	local03, local02
06a18     0F 23 02 F1 | 	add	local03, local01
06a1c     43 00 00 FF 
06a20     5C E4 05 F1 | 	add	objptr, ##34396
06a24     F2 16 02 FB | 	rdlong	arg03, objptr
06a28     10 17 02 F1 | 	add	arg03, local02
06a2c     04 00 00 FF 
06a30     28 E4 05 F1 | 	add	objptr, ##2088
06a34     F2 16 62 FC | 	wrlong	arg03, objptr
06a38     04 E4 05 F1 | 	add	objptr, #4
06a3c     F2 1E 62 FC | 	wrlong	local01, objptr
06a40     0C E4 85 F1 | 	sub	objptr, #12
06a44     F2 12 02 F6 | 	mov	arg01, objptr
06a48     04 00 00 FF 
06a4c     20 E4 85 F1 | 	sub	objptr, ##2080
06a50     F2 14 02 FB | 	rdlong	arg02, objptr
06a54     10 17 02 F6 | 	mov	arg03, local02
06a58     37 00 00 FF 
06a5c     90 E5 85 F1 | 	sub	objptr, ##28560
06a60     28 92 B1 FD | 	call	#_psram_spin2_write
06a64     2B 00 00 FF 
06a68     54 E5 05 F1 | 	add	objptr, ##22356
06a6c     F2 12 02 FB | 	rdlong	arg01, objptr
06a70     0C 00 00 FF 
06a74     3C E4 05 F1 | 	add	objptr, ##6204
06a78     F2 14 02 FB | 	rdlong	arg02, objptr
06a7c     10 15 02 F1 | 	add	arg02, local02
06a80     0F 17 02 F6 | 	mov	arg03, local01
06a84     37 00 00 FF 
06a88     90 E5 85 F1 | 	sub	objptr, ##28560
06a8c     FC 91 B1 FD | 	call	#_psram_spin2_write
06a90     37 00 00 FF 
06a94     90 E5 05 F1 | 	add	objptr, ##28560
06a98     F2 1E 02 FB | 	rdlong	local01, objptr
06a9c     11 1F 02 F1 | 	add	local01, local03
06aa0     F2 1E 62 FC | 	wrlong	local01, objptr
06aa4     43 00 00 FF 
06aa8     5C E4 85 F1 | 	sub	objptr, ##34396
06aac     A7 F0 03 F6 | 	mov	ptra, fp
06ab0     B2 00 A0 FD | 	call	#popregs_
06ab4                 | _save_line_ret
06ab4     2D 00 64 FD | 	ret
06ab8                 | 
06ab8                 | ' 
06ab8                 | ' '----- Insert a new line into the middle of the program
06ab8                 | ' 
06ab8                 | ' function insertline(aline as ulong) as integer
06ab8                 | _insertline
06ab8     02 4A 05 F6 | 	mov	COUNT_, #2
06abc     A8 00 A0 FD | 	call	#pushregs_
06ac0     28 F0 07 F1 | 	add	ptra, #40
06ac4     04 4E 05 F1 | 	add	fp, #4
06ac8     A7 12 62 FC | 	wrlong	arg01, fp
06acc     4A 00 00 FF 
06ad0     88 E4 05 F1 | 	add	objptr, ##38024
06ad4     F2 1E 02 FB | 	rdlong	local01, objptr
06ad8     04 4E 05 F1 | 	add	fp, #4
06adc     A7 1E 62 FC | 	wrlong	local01, fp
06ae0     08 4E 85 F1 | 	sub	fp, #8
06ae4                 | ' 
06ae4                 | ' do
06ae4     3E 00 00 FF 
06ae8     BC E5 85 F1 | 	sub	objptr, ##32188
06aec                 | LR__0580
06aec     10 4E 05 F1 | 	add	fp, #16
06af0     A7 12 02 F6 | 	mov	arg01, fp
06af4     08 4E 85 F1 | 	sub	fp, #8
06af8     A7 14 02 FB | 	rdlong	arg02, fp
06afc     08 4E 85 F1 | 	sub	fp, #8
06b00     18 16 06 F6 | 	mov	arg03, #24
06b04     E8 90 B1 FD | 	call	#_psram_spin2_read1
06b08     08 4E 05 F1 | 	add	fp, #8
06b0c     A7 1E 02 FB | 	rdlong	local01, fp
06b10     04 4E 05 F1 | 	add	fp, #4
06b14     A7 1E 62 FC | 	wrlong	local01, fp
06b18     18 4E 05 F1 | 	add	fp, #24
06b1c     A7 1E 02 FB | 	rdlong	local01, fp
06b20     1C 4E 85 F1 | 	sub	fp, #28
06b24     A7 1E 62 FC | 	wrlong	local01, fp
06b28     08 4E 05 F1 | 	add	fp, #8
06b2c     A7 1E 02 FB | 	rdlong	local01, fp
06b30     0C 4E 85 F1 | 	sub	fp, #12
06b34     A7 16 02 FB | 	rdlong	arg03, fp
06b38     04 4E 85 F1 | 	sub	fp, #4
06b3c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06b40     24 4E 05 C1 |  if_b	add	fp, #36
06b44     A7 20 02 CB |  if_b	rdlong	local02, fp
06b48     24 4E 85 C1 |  if_b	sub	fp, #36
06b4c     FF FF 3F CF 
06b50     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06b54     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06b58     0B 00 00 FF 
06b5c     CC E4 85 F1 | 	sub	objptr, ##5836
06b60                 | ' 
06b60                 | ' if header(0)=aline then return -1 				' delete it first
06b60     10 4E 05 F1 | 	add	fp, #16
06b64     A7 1E 02 FB | 	rdlong	local01, fp
06b68     0C 4E 85 F1 | 	sub	fp, #12
06b6c     A7 20 02 FB | 	rdlong	local02, fp
06b70     04 4E 85 F1 | 	sub	fp, #4
06b74     10 1F 0A F2 | 	cmp	local01, local02 wz
06b78     01 FA 65 A6 |  if_e	neg	result1, #1
06b7c     48 01 90 AD |  if_e	jmp	#LR__0583
06b80                 | ' if header(0)<aline then return -2 				' end of program reached
06b80     10 4E 05 F1 | 	add	fp, #16
06b84     A7 1E 02 FB | 	rdlong	local01, fp
06b88     0C 4E 85 F1 | 	sub	fp, #12
06b8c     A7 16 02 FB | 	rdlong	arg03, fp
06b90     04 4E 85 F1 | 	sub	fp, #4
06b94     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06b98     02 FA 65 C6 |  if_b	neg	result1, #2
06b9c     28 01 90 CD |  if_b	jmp	#LR__0583
06ba0                 | ' 
06ba0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06ba0     20 4E 05 F1 | 	add	fp, #32
06ba4     A7 1E 02 FB | 	rdlong	local01, fp
06ba8     20 4E 85 F1 | 	sub	fp, #32
06bac     FF FF 7F FF 
06bb0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06bb4     78 00 90 5D |  if_ne	jmp	#LR__0581
06bb8     43 00 00 FF 
06bbc     5C E4 05 F1 | 	add	objptr, ##34396
06bc0     F2 1E 02 FB | 	rdlong	local01, objptr
06bc4     07 00 00 FF 
06bc8     2C E4 05 F1 | 	add	objptr, ##3628
06bcc     F2 1E 62 FC | 	wrlong	local01, objptr
06bd0     0C 4E 05 F1 | 	add	fp, #12
06bd4     A7 12 02 FB | 	rdlong	arg01, fp
06bd8     0C 4E 85 F1 | 	sub	fp, #12
06bdc     10 12 06 F1 | 	add	arg01, #16
06be0     07 00 00 FF 
06be4     2C E4 85 F1 | 	sub	objptr, ##3628
06be8     F2 14 02 FB | 	rdlong	arg02, objptr
06bec     43 00 00 FF 
06bf0     5C E4 85 F1 | 	sub	objptr, ##34396
06bf4     0C 68 B1 FD | 	call	#_pslpoke
06bf8     47 00 00 FF 
06bfc     8C E4 05 F1 | 	add	objptr, ##36492
06c00     FF FF FF FF 
06c04     F2 FE 6B FC | 	wrlong	##-1, objptr
06c08     0C 4E 05 F1 | 	add	fp, #12
06c0c     A7 1E 02 FB | 	rdlong	local01, fp
06c10     0C 4E 85 F1 | 	sub	fp, #12
06c14     04 E4 05 F1 | 	add	objptr, #4
06c18     F2 1E 62 FC | 	wrlong	local01, objptr
06c1c     47 00 00 FF 
06c20     90 E4 85 F1 | 	sub	objptr, ##36496
06c24     84 FD BF FD | 	call	#_save_line
06c28                 | '   programstart=programptr
06c28                 | '   pslpoke(lineptr2+16,programptr)
06c28                 | '   ucompiledline(4)=$FFFF_FFFF
06c28                 | '   ucompiledline(5)=lineptr2
06c28                 | '   save_line
06c28                 | '   return 0
06c28     00 FA 05 F6 | 	mov	result1, #0
06c2c     98 00 90 FD | 	jmp	#LR__0583
06c30                 | LR__0581
06c30                 | ' 
06c30                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
06c30     20 4E 05 F1 | 	add	fp, #32
06c34     A7 1E 02 FB | 	rdlong	local01, fp
06c38     20 4E 85 F1 | 	sub	fp, #32
06c3c     FF FF 7F FF 
06c40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06c44     7C 00 90 AD |  if_e	jmp	#LR__0582
06c48     20 4E 05 F1 | 	add	fp, #32
06c4c     A7 1E 02 FB | 	rdlong	local01, fp
06c50     47 00 00 FF 
06c54     8C E4 05 F1 | 	add	objptr, ##36492
06c58     F2 1E 62 FC | 	wrlong	local01, objptr
06c5c     14 4E 85 F1 | 	sub	fp, #20
06c60     A7 1E 02 FB | 	rdlong	local01, fp
06c64     04 E4 05 F1 | 	add	objptr, #4
06c68     F2 1E 62 FC | 	wrlong	local01, objptr
06c6c     A7 12 02 FB | 	rdlong	arg01, fp
06c70     0C 4E 85 F1 | 	sub	fp, #12
06c74     10 12 06 F1 | 	add	arg01, #16
06c78     04 00 00 FF 
06c7c     34 E4 85 F1 | 	sub	objptr, ##2100
06c80     F2 14 02 FB | 	rdlong	arg02, objptr
06c84     43 00 00 FF 
06c88     5C E4 85 F1 | 	sub	objptr, ##34396
06c8c     74 67 B1 FD | 	call	#_pslpoke
06c90     20 4E 05 F1 | 	add	fp, #32
06c94     A7 12 02 FB | 	rdlong	arg01, fp
06c98     20 4E 85 F1 | 	sub	fp, #32
06c9c     14 12 06 F1 | 	add	arg01, #20
06ca0     43 00 00 FF 
06ca4     5C E4 05 F1 | 	add	objptr, ##34396
06ca8     F2 14 02 FB | 	rdlong	arg02, objptr
06cac     43 00 00 FF 
06cb0     5C E4 85 F1 | 	sub	objptr, ##34396
06cb4     4C 67 B1 FD | 	call	#_pslpoke
06cb8     F0 FC BF FD | 	call	#_save_line
06cbc                 | '   ucompiledline(4)=header(4)
06cbc                 | '   ucompiledline(5)=lineptr2
06cbc                 | '   pslpoke(lineptr2+16,programptr)
06cbc                 | '   pslpoke(header(4)+20,programptr)
06cbc                 | '   save_line
06cbc                 | '   return 0
06cbc     00 FA 05 F6 | 	mov	result1, #0
06cc0     04 00 90 FD | 	jmp	#LR__0583
06cc4                 | LR__0582
06cc4     00 FA 05 F6 | 	mov	result1, #0
06cc8                 | LR__0583
06cc8     A7 F0 03 F6 | 	mov	ptra, fp
06ccc     B2 00 A0 FD | 	call	#popregs_
06cd0                 | _insertline_ret
06cd0     2D 00 64 FD | 	ret
06cd4                 | 
06cd4                 | ' 
06cd4                 | ' '----- Adds a new line at the end of the program
06cd4                 | ' 
06cd4                 | ' sub add_line_at_end(aline) 
06cd4                 | _add_line_at_end
06cd4     4A 00 00 FF 
06cd8     8C E4 05 F1 | 	add	objptr, ##38028
06cdc     F2 12 62 FC | 	wrlong	arg01, objptr
06ce0     04 E4 05 F1 | 	add	objptr, #4
06ce4     F2 14 02 FB | 	rdlong	arg02, objptr
06ce8     03 00 00 FF 
06cec     04 E4 85 F1 | 	sub	objptr, ##1540
06cf0     F2 14 62 FC | 	wrlong	arg02, objptr
06cf4     03 00 00 FF 
06cf8     04 E4 05 F1 | 	add	objptr, ##1540
06cfc     F2 12 02 FB | 	rdlong	arg01, objptr
06d00     14 12 06 F1 | 	add	arg01, #20
06d04     07 00 00 FF 
06d08     34 E4 85 F1 | 	sub	objptr, ##3636
06d0c     F2 14 02 FB | 	rdlong	arg02, objptr
06d10     43 00 00 FF 
06d14     5C E4 85 F1 | 	sub	objptr, ##34396
06d18     E8 66 B1 FD | 	call	#_pslpoke
06d1c     43 00 00 FF 
06d20     5C E4 05 F1 | 	add	objptr, ##34396
06d24     F2 14 02 FB | 	rdlong	arg02, objptr
06d28     07 00 00 FF 
06d2c     34 E4 05 F1 | 	add	objptr, ##3636
06d30     F2 14 62 FC | 	wrlong	arg02, objptr
06d34     03 00 00 FF 
06d38     00 E4 85 F1 | 	sub	objptr, ##1536
06d3c     FF FF BF FF 
06d40     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06d44                 | ' 
06d44                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06d44                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06d44     04 00 00 FF 
06d48     34 E4 85 F1 | 	sub	objptr, ##2100
06d4c     F2 14 02 FB | 	rdlong	arg02, objptr
06d50     43 00 00 FF 
06d54     5C E4 85 F1 | 	sub	objptr, ##34396
06d58     00 04 00 FF 
06d5c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06d60     47 00 00 AF 
06d64     8C E4 05 A1 |  if_e	add	objptr, ##36492
06d68     FF FF FF AF 
06d6c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06d70     47 00 00 AF 
06d74     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06d78     30 FC BF FD | 	call	#_save_line
06d7c     43 00 00 FF 
06d80     5C E4 05 F1 | 	add	objptr, ##34396
06d84     F2 12 02 FB | 	rdlong	arg01, objptr
06d88     43 00 00 FF 
06d8c     5C E4 85 F1 | 	sub	objptr, ##34396
06d90     01 14 66 F6 | 	neg	arg02, #1
06d94     6C 66 B1 FD | 	call	#_pslpoke
06d98                 | _add_line_at_end_ret
06d98     2D 00 64 FD | 	ret
06d9c                 | 
06d9c                 | ' 
06d9c                 | ' '--------------------------------------------------------------------------------------------------------------------------
06d9c                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
06d9c                 | ' '--------------------------------------------------------------------------------------------------------------------------
06d9c                 | ' 
06d9c                 | ' '--------------------------------------------------------------------------------------------------------------------------
06d9c                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
06d9c                 | ' '--------------------------------------------------------------------------------------------------------------------------
06d9c                 | ' 
06d9c                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
06d9c                 | ' 
06d9c                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
06d9c                 | _compile_immediate
06d9c     0A 4A 05 F6 | 	mov	COUNT_, #10
06da0     A8 00 A0 FD | 	call	#pushregs_
06da4                 | _compile_immediate_enter
06da4     09 25 02 F6 | 	mov	local04, arg01
06da8     0A 27 02 F6 | 	mov	local05, arg02
06dac     00 28 06 F6 | 	mov	local06, #0
06db0     00 2A 06 F6 | 	mov	local07, #0
06db4     00 2C 06 F6 | 	mov	local08, #0
06db8                 | ' 
06db8                 | ' ' linetype=cont+1
06db8                 | ' ' 1 : this is the first part of the line that will continue
06db8                 | ' ' 2 - this is the continuation of the line
06db8                 | ' ' 3 - this is the last continued line
06db8                 | ' ' 4 - this is the one and only part
06db8                 | ' ' 5 - continued after if/else
06db8                 | ' 
06db8                 | ' err=0
06db8                 | ' cmd=0
06db8                 | ' vars=0
06db8                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
06db8     02 24 0E F2 | 	cmp	local04, #2 wz
06dbc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06dc0     24 00 90 5D |  if_ne	jmp	#LR__0590
06dc4     35 00 00 FF 
06dc8     10 E4 05 F1 | 	add	objptr, ##27152
06dcc     F2 2A 02 FB | 	rdlong	local07, objptr
06dd0     01 2E 06 F6 | 	mov	local09, #1
06dd4     02 00 00 FF 
06dd8     34 E4 05 F1 | 	add	objptr, ##1076
06ddc     F2 02 68 FC | 	wrlong	#1, objptr
06de0     37 00 00 FF 
06de4     44 E4 85 F1 | 	sub	objptr, ##28228
06de8                 | LR__0590
06de8                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06de8     04 24 0E F2 | 	cmp	local04, #4 wz
06dec     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06df0     30 00 90 5D |  if_ne	jmp	#LR__0591
06df4     35 00 00 FF 
06df8     18 E4 05 F1 | 	add	objptr, ##27160
06dfc     F2 2A 02 FB | 	rdlong	local07, objptr
06e00     02 2E 06 F6 | 	mov	local09, #2
06e04     02 00 00 FF 
06e08     2C E4 05 F1 | 	add	objptr, ##1068
06e0c     F2 04 68 FC | 	wrlong	#2, objptr
06e10     13 00 00 FF 
06e14     38 E4 05 F1 | 	add	objptr, ##9784
06e18     F2 04 68 FC | 	wrlong	#2, objptr
06e1c     4A 00 00 FF 
06e20     7C E4 85 F1 | 	sub	objptr, ##38012
06e24                 | LR__0591
06e24                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
06e24     05 24 0E F2 | 	cmp	local04, #5 wz
06e28     40 00 90 5D |  if_ne	jmp	#LR__0592
06e2c     37 00 00 FF 
06e30     44 E4 05 F1 | 	add	objptr, ##28228
06e34     F2 FC 01 FB | 	rdlong	result2, objptr
06e38     FE 2E 02 F6 | 	mov	local09, result2
06e3c     03 2E 66 F0 | 	shl	local09, #3
06e40     02 00 00 FF 
06e44     38 E4 85 F1 | 	sub	objptr, ##1080
06e48     F2 2E 02 F1 | 	add	local09, objptr
06e4c     04 2E 06 F1 | 	add	local09, #4
06e50     17 2B 02 FB | 	rdlong	local07, local09
06e54     01 FC 05 F1 | 	add	result2, #1
06e58     02 00 00 FF 
06e5c     38 E4 05 F1 | 	add	objptr, ##1080
06e60     F2 FC 61 FC | 	wrlong	result2, objptr
06e64     37 00 00 FF 
06e68     44 E4 85 F1 | 	sub	objptr, ##28228
06e6c                 | LR__0592
06e6c                 | ' 
06e6c                 | ' 'print  "In compile_immediate cmd=:", cmd
06e6c                 | ' 451 select case cmd
06e6c     5C 2A 0E F2 | 	cmp	local07, #92 wz
06e70     80 02 90 AD |  if_e	jmp	#LR__0593
06e74     47 2A 0E F2 | 	cmp	local07, #71 wz
06e78     84 02 90 AD |  if_e	jmp	#LR__0594
06e7c     59 2A 0E F2 | 	cmp	local07, #89 wz
06e80     8C 02 90 AD |  if_e	jmp	#LR__0595
06e84     45 2A 0E F2 | 	cmp	local07, #69 wz
06e88     94 02 90 AD |  if_e	jmp	#LR__0596
06e8c     69 2A 0E F2 | 	cmp	local07, #105 wz
06e90     9C 02 90 AD |  if_e	jmp	#LR__0597
06e94     40 2A 0E F2 | 	cmp	local07, #64 wz
06e98     28 06 90 AD |  if_e	jmp	#LR__0665
06e9c     B4 2A 0E F2 | 	cmp	local07, #180 wz
06ea0     98 02 90 AD |  if_e	jmp	#LR__0598
06ea4     49 2A 0E F2 | 	cmp	local07, #73 wz
06ea8     9C 02 90 AD |  if_e	jmp	#LR__0599
06eac     50 2A 0E F2 | 	cmp	local07, #80 wz
06eb0     A0 02 90 AD |  if_e	jmp	#LR__0600
06eb4     AE 2A 0E F2 | 	cmp	local07, #174 wz
06eb8     A8 02 90 AD |  if_e	jmp	#LR__0601
06ebc     B0 2A 0E F2 | 	cmp	local07, #176 wz
06ec0     AC 02 90 AD |  if_e	jmp	#LR__0602
06ec4     AF 2A 0E F2 | 	cmp	local07, #175 wz
06ec8     B0 02 90 AD |  if_e	jmp	#LR__0603
06ecc     B1 2A 0E F2 | 	cmp	local07, #177 wz
06ed0     B4 02 90 AD |  if_e	jmp	#LR__0604
06ed4     68 2A 0E F2 | 	cmp	local07, #104 wz
06ed8     B8 02 90 AD |  if_e	jmp	#LR__0605
06edc     74 2A 0E F2 | 	cmp	local07, #116 wz
06ee0     BC 02 90 AD |  if_e	jmp	#LR__0606
06ee4     73 2A 0E F2 | 	cmp	local07, #115 wz
06ee8     C4 02 90 AD |  if_e	jmp	#LR__0607
06eec     6C 2A 0E F2 | 	cmp	local07, #108 wz
06ef0     CC 02 90 AD |  if_e	jmp	#LR__0608
06ef4     89 2A 0E F2 | 	cmp	local07, #137 wz
06ef8     C8 05 90 AD |  if_e	jmp	#LR__0665
06efc     72 2A 0E F2 | 	cmp	local07, #114 wz
06f00     CC 02 90 AD |  if_e	jmp	#LR__0609
06f04     5D 2A 0E F2 | 	cmp	local07, #93 wz
06f08     D0 02 90 AD |  if_e	jmp	#LR__0610
06f0c     96 2A 0E F2 | 	cmp	local07, #150 wz
06f10     D8 02 90 AD |  if_e	jmp	#LR__0611
06f14     43 2A 0E F2 | 	cmp	local07, #67 wz
06f18     DC 02 90 AD |  if_e	jmp	#LR__0612
06f1c     5A 2A 0E F2 | 	cmp	local07, #90 wz
06f20     E4 02 90 AD |  if_e	jmp	#LR__0613
06f24     AB 2A 0E F2 | 	cmp	local07, #171 wz
06f28     98 05 90 AD |  if_e	jmp	#LR__0665
06f2c     BD 2A 0E F2 | 	cmp	local07, #189 wz
06f30     E4 02 90 AD |  if_e	jmp	#LR__0614
06f34     BB 2A 0E F2 | 	cmp	local07, #187 wz
06f38     EC 02 90 AD |  if_e	jmp	#LR__0615
06f3c     4E 2A 0E F2 | 	cmp	local07, #78 wz
06f40     F4 02 90 AD |  if_e	jmp	#LR__0616
06f44     A9 2A 0E F2 | 	cmp	local07, #169 wz
06f48     08 03 90 AD |  if_e	jmp	#LR__0618
06f4c     46 2A 0E F2 | 	cmp	local07, #70 wz
06f50     1C 03 90 AD |  if_e	jmp	#LR__0620
06f54     71 2A 0E F2 | 	cmp	local07, #113 wz
06f58     24 03 90 AD |  if_e	jmp	#LR__0621
06f5c     60 2A 0E F2 | 	cmp	local07, #96 wz
06f60     28 03 90 AD |  if_e	jmp	#LR__0622
06f64     4A 2A 0E F2 | 	cmp	local07, #74 wz
06f68     2C 03 90 AD |  if_e	jmp	#LR__0623
06f6c     48 2A 0E F2 | 	cmp	local07, #72 wz
06f70     30 03 90 AD |  if_e	jmp	#LR__0624
06f74     58 2A 0E F2 | 	cmp	local07, #88 wz
06f78     38 03 90 AD |  if_e	jmp	#LR__0625
06f7c     5F 2A 0E F2 | 	cmp	local07, #95 wz
06f80     40 03 90 AD |  if_e	jmp	#LR__0626
06f84     8A 2A 0E F2 | 	cmp	local07, #138 wz
06f88     44 03 90 AD |  if_e	jmp	#LR__0627
06f8c     4C 2A 0E F2 | 	cmp	local07, #76 wz
06f90     48 03 90 AD |  if_e	jmp	#LR__0628
06f94     52 2A 0E F2 | 	cmp	local07, #82 wz
06f98     50 03 90 AD |  if_e	jmp	#LR__0629
06f9c     97 2A 0E F2 | 	cmp	local07, #151 wz
06fa0     58 03 90 AD |  if_e	jmp	#LR__0630
06fa4     61 2A 0E F2 | 	cmp	local07, #97 wz
06fa8     5C 03 90 AD |  if_e	jmp	#LR__0631
06fac     63 2A 0E F2 | 	cmp	local07, #99 wz
06fb0     60 03 90 AD |  if_e	jmp	#LR__0632
06fb4     41 2A 0E F2 | 	cmp	local07, #65 wz
06fb8     08 05 90 AD |  if_e	jmp	#LR__0665
06fbc     4B 2A 0E F2 | 	cmp	local07, #75 wz
06fc0     5C 03 90 AD |  if_e	jmp	#LR__0633
06fc4     B3 2A 0E F2 | 	cmp	local07, #179 wz
06fc8     60 03 90 AD |  if_e	jmp	#LR__0634
06fcc     5E 2A 0E F2 | 	cmp	local07, #94 wz
06fd0     64 03 90 AD |  if_e	jmp	#LR__0635
06fd4     7C 2A 0E F2 | 	cmp	local07, #124 wz
06fd8     68 03 90 AD |  if_e	jmp	#LR__0636
06fdc     7D 2A 0E F2 | 	cmp	local07, #125 wz
06fe0     6C 03 90 AD |  if_e	jmp	#LR__0637
06fe4     7E 2A 0E F2 | 	cmp	local07, #126 wz
06fe8     70 03 90 AD |  if_e	jmp	#LR__0638
06fec     7F 2A 0E F2 | 	cmp	local07, #127 wz
06ff0     74 03 90 AD |  if_e	jmp	#LR__0639
06ff4     80 2A 0E F2 | 	cmp	local07, #128 wz
06ff8     78 03 90 AD |  if_e	jmp	#LR__0640
06ffc     55 2A 0E F2 | 	cmp	local07, #85 wz
07000     7C 03 90 AD |  if_e	jmp	#LR__0641
07004     75 2A 0E F2 | 	cmp	local07, #117 wz
07008     80 03 90 AD |  if_e	jmp	#LR__0642
0700c     42 2A 0E F2 | 	cmp	local07, #66 wz
07010     88 03 90 AD |  if_e	jmp	#LR__0643
07014     95 2A 0E F2 | 	cmp	local07, #149 wz
07018     90 03 90 AD |  if_e	jmp	#LR__0644
0701c     AC 2A 0E F2 | 	cmp	local07, #172 wz
07020     A0 04 90 AD |  if_e	jmp	#LR__0665
07024     81 2A 0E F2 | 	cmp	local07, #129 wz
07028     8C 03 90 AD |  if_e	jmp	#LR__0645
0702c     44 2A 0E F2 | 	cmp	local07, #68 wz
07030     90 03 90 AD |  if_e	jmp	#LR__0646
07034     BC 2A 0E F2 | 	cmp	local07, #188 wz
07038     94 03 90 AD |  if_e	jmp	#LR__0647
0703c     88 2A 0E F2 | 	cmp	local07, #136 wz
07040     80 04 90 AD |  if_e	jmp	#LR__0665
07044     92 2A 0E F2 | 	cmp	local07, #146 wz
07048     94 03 90 AD |  if_e	jmp	#LR__0648
0704c     BE 2A 0E F2 | 	cmp	local07, #190 wz
07050     2C 05 90 AD |  if_e	jmp	#LR__0666
07054     AA 2A 0E F2 | 	cmp	local07, #170 wz
07058     68 04 90 AD |  if_e	jmp	#LR__0665
0705c     4D 2A 0E F2 | 	cmp	local07, #77 wz
07060     88 03 90 AD |  if_e	jmp	#LR__0649
07064     51 2A 0E F2 | 	cmp	local07, #81 wz
07068     90 03 90 AD |  if_e	jmp	#LR__0650
0706c     8E 2A 0E F2 | 	cmp	local07, #142 wz
07070     98 03 90 AD |  if_e	jmp	#LR__0651
07074     90 2A 0E F2 | 	cmp	local07, #144 wz
07078     9C 03 90 AD |  if_e	jmp	#LR__0652
0707c     8D 2A 0E F2 | 	cmp	local07, #141 wz
07080     A0 03 90 AD |  if_e	jmp	#LR__0653
07084     8C 2A 0E F2 | 	cmp	local07, #140 wz
07088     A4 03 90 AD |  if_e	jmp	#LR__0654
0708c     91 2A 0E F2 | 	cmp	local07, #145 wz
07090     A8 03 90 AD |  if_e	jmp	#LR__0655
07094     8B 2A 0E F2 | 	cmp	local07, #139 wz
07098     AC 03 90 AD |  if_e	jmp	#LR__0656
0709c     8F 2A 0E F2 | 	cmp	local07, #143 wz
070a0     B0 03 90 AD |  if_e	jmp	#LR__0657
070a4     B2 2A 0E F2 | 	cmp	local07, #178 wz
070a8     B4 03 90 AD |  if_e	jmp	#LR__0658
070ac     6D 2A 0E F2 | 	cmp	local07, #109 wz
070b0     BC 03 90 AD |  if_e	jmp	#LR__0659
070b4     70 2A 0E F2 | 	cmp	local07, #112 wz
070b8     08 04 90 AD |  if_e	jmp	#LR__0665
070bc     56 2A 0E F2 | 	cmp	local07, #86 wz
070c0     B8 03 90 AD |  if_e	jmp	#LR__0660
070c4     57 2A 0E F2 | 	cmp	local07, #87 wz
070c8     F8 03 90 AD |  if_e	jmp	#LR__0665
070cc     79 2A 0E F2 | 	cmp	local07, #121 wz
070d0     B4 03 90 AD |  if_e	jmp	#LR__0661
070d4     77 2A 0E F2 | 	cmp	local07, #119 wz
070d8     B8 03 90 AD |  if_e	jmp	#LR__0662
070dc     78 2A 0E F2 | 	cmp	local07, #120 wz
070e0     BC 03 90 AD |  if_e	jmp	#LR__0663
070e4     01 00 00 FF 
070e8     04 2A 0E F2 | 	cmp	local07, ##516 wz
070ec     BC 03 90 AD |  if_e	jmp	#LR__0664
070f0     8C 04 90 FD | 	jmp	#LR__0666
070f4                 | LR__0593
070f4     D8 0A B0 FD | 	call	#_compile_fun_2p
070f8     FD 28 02 F6 | 	mov	local06, result1
070fc     C4 03 90 FD | 	jmp	#LR__0665
07100                 | LR__0594
07100     9C 0D B0 FD | 	call	#_compile_fun_varp
07104     FD 2C 02 F6 | 	mov	local08, result1
07108     FE 28 02 F6 | 	mov	local06, result2
0710c     B4 03 90 FD | 	jmp	#LR__0665
07110                 | LR__0595
07110     8C 0D B0 FD | 	call	#_compile_fun_varp
07114     FD 2C 02 F6 | 	mov	local08, result1
07118     FE 28 02 F6 | 	mov	local06, result2
0711c     A4 03 90 FD | 	jmp	#LR__0665
07120                 | LR__0596
07120     7C 0D B0 FD | 	call	#_compile_fun_varp
07124     FD 2C 02 F6 | 	mov	local08, result1
07128     FE 28 02 F6 | 	mov	local06, result2
0712c     94 03 90 FD | 	jmp	#LR__0665
07130                 | LR__0597
07130                 | ' return expr()
07130     4C 2A B0 FD | 	call	#_expr
07134     FD 28 02 F6 | 	mov	local06, result1
07138     88 03 90 FD | 	jmp	#LR__0665
0713c                 | LR__0598
0713c                 | ' return expr()
0713c     40 2A B0 FD | 	call	#_expr
07140     FD 28 02 F6 | 	mov	local06, result1
07144     7C 03 90 FD | 	jmp	#LR__0665
07148                 | LR__0599
07148                 | ' return expr()
07148     34 2A B0 FD | 	call	#_expr
0714c     FD 28 02 F6 | 	mov	local06, result1
07150     70 03 90 FD | 	jmp	#LR__0665
07154                 | LR__0600
07154     48 0D B0 FD | 	call	#_compile_fun_varp
07158     FD 2C 02 F6 | 	mov	local08, result1
0715c     FE 28 02 F6 | 	mov	local06, result2
07160     60 03 90 FD | 	jmp	#LR__0665
07164                 | LR__0601
07164     68 0A B0 FD | 	call	#_compile_fun_2p
07168     FD 28 02 F6 | 	mov	local06, result1
0716c     54 03 90 FD | 	jmp	#LR__0665
07170                 | LR__0602
07170     5C 0A B0 FD | 	call	#_compile_fun_2p
07174     FD 28 02 F6 | 	mov	local06, result1
07178     48 03 90 FD | 	jmp	#LR__0665
0717c                 | LR__0603
0717c     50 0A B0 FD | 	call	#_compile_fun_2p
07180     FD 28 02 F6 | 	mov	local06, result1
07184     3C 03 90 FD | 	jmp	#LR__0665
07188                 | LR__0604
07188     44 0A B0 FD | 	call	#_compile_fun_2p
0718c     FD 28 02 F6 | 	mov	local06, result1
07190     30 03 90 FD | 	jmp	#LR__0665
07194                 | LR__0605
07194                 | ' return expr()
07194     E8 29 B0 FD | 	call	#_expr
07198     FD 28 02 F6 | 	mov	local06, result1
0719c     24 03 90 FD | 	jmp	#LR__0665
071a0                 | LR__0606
071a0     FC 0C B0 FD | 	call	#_compile_fun_varp
071a4     FD 2C 02 F6 | 	mov	local08, result1
071a8     FE 28 02 F6 | 	mov	local06, result2
071ac     14 03 90 FD | 	jmp	#LR__0665
071b0                 | LR__0607
071b0     EC 0C B0 FD | 	call	#_compile_fun_varp
071b4     FD 2C 02 F6 | 	mov	local08, result1
071b8     FE 28 02 F6 | 	mov	local06, result2
071bc     04 03 90 FD | 	jmp	#LR__0665
071c0                 | LR__0608
071c0     DC 0C B0 FD | 	call	#_compile_fun_varp
071c4     FD 2C 02 F6 | 	mov	local08, result1
071c8     FE 28 02 F6 | 	mov	local06, result2
071cc     F4 02 90 FD | 	jmp	#LR__0665
071d0                 | LR__0609
071d0     A0 19 B0 FD | 	call	#_compile_dim
071d4     FD 28 02 F6 | 	mov	local06, result1
071d8     A4 03 90 FD | 	jmp	#LR__0666
071dc                 | LR__0610
071dc     C0 0C B0 FD | 	call	#_compile_fun_varp
071e0     FD 2C 02 F6 | 	mov	local08, result1
071e4     FE 28 02 F6 | 	mov	local06, result2
071e8     D8 02 90 FD | 	jmp	#LR__0665
071ec                 | LR__0611
071ec     E0 09 B0 FD | 	call	#_compile_fun_2p
071f0     FD 28 02 F6 | 	mov	local06, result1
071f4     CC 02 90 FD | 	jmp	#LR__0665
071f8                 | LR__0612
071f8     A4 0C B0 FD | 	call	#_compile_fun_varp
071fc     FD 2C 02 F6 | 	mov	local08, result1
07200     FE 28 02 F6 | 	mov	local06, result2
07204     BC 02 90 FD | 	jmp	#LR__0665
07208                 | LR__0613
07208     13 13 02 F6 | 	mov	arg01, local05
0720c     2C 18 B0 FD | 	call	#_compile_else
07210     FD 28 02 F6 | 	mov	local06, result1
07214     68 03 90 FD | 	jmp	#LR__0666
07218                 | LR__0614
07218     84 0C B0 FD | 	call	#_compile_fun_varp
0721c     FD 2C 02 F6 | 	mov	local08, result1
07220     FE 28 02 F6 | 	mov	local06, result2
07224     9C 02 90 FD | 	jmp	#LR__0665
07228                 | LR__0615
07228     74 0C B0 FD | 	call	#_compile_fun_varp
0722c     FD 2C 02 F6 | 	mov	local08, result1
07230     FE 28 02 F6 | 	mov	local06, result2
07234     8C 02 90 FD | 	jmp	#LR__0665
07238                 | LR__0616
07238     01 26 16 F2 | 	cmp	local05, #1 wc
0723c     08 00 90 CD |  if_b	jmp	#LR__0617
07240     4C 25 B0 FD | 	call	#_compile_goto
07244     38 03 90 FD | 	jmp	#LR__0666
07248                 | LR__0617
07248     19 12 06 F6 | 	mov	arg01, #25
0724c     50 60 B1 FD | 	call	#_printerror
07250     2C 03 90 FD | 	jmp	#LR__0666
07254                 | LR__0618
07254     01 26 16 F2 | 	cmp	local05, #1 wc
07258     08 00 90 CD |  if_b	jmp	#LR__0619
0725c     CC 24 B0 FD | 	call	#_compile_gosub
07260     1C 03 90 FD | 	jmp	#LR__0666
07264                 | LR__0619
07264     19 12 06 F6 | 	mov	arg01, #25
07268     34 60 B1 FD | 	call	#_printerror
0726c     10 03 90 FD | 	jmp	#LR__0666
07270                 | LR__0620
07270     2C 0C B0 FD | 	call	#_compile_fun_varp
07274     FD 2C 02 F6 | 	mov	local08, result1
07278     FE 28 02 F6 | 	mov	local06, result2
0727c     44 02 90 FD | 	jmp	#LR__0665
07280                 | LR__0621
07280     C4 0A B0 FD | 	call	#_compile_fun_4p
07284     FD 28 02 F6 | 	mov	local06, result1
07288     38 02 90 FD | 	jmp	#LR__0665
0728c                 | LR__0622
0728c                 | ' return expr()
0728c     F0 28 B0 FD | 	call	#_expr
07290     FD 28 02 F6 | 	mov	local06, result1
07294     2C 02 90 FD | 	jmp	#LR__0665
07298                 | LR__0623
07298     B4 1F B0 FD | 	call	#_compile_for
0729c     FD 28 02 F6 | 	mov	local06, result1
072a0     DC 02 90 FD | 	jmp	#LR__0666
072a4                 | LR__0624
072a4     F8 0B B0 FD | 	call	#_compile_fun_varp
072a8     FD 2C 02 F6 | 	mov	local08, result1
072ac     FE 28 02 F6 | 	mov	local06, result2
072b0     10 02 90 FD | 	jmp	#LR__0665
072b4                 | LR__0625
072b4     13 13 02 F6 | 	mov	arg01, local05
072b8     F8 15 B0 FD | 	call	#_compile_if
072bc     FD 28 02 F6 | 	mov	local06, result1
072c0     BC 02 90 FD | 	jmp	#LR__0666
072c4                 | LR__0626
072c4                 | ' return expr()
072c4     B8 28 B0 FD | 	call	#_expr
072c8     FD 28 02 F6 | 	mov	local06, result1
072cc     F4 01 90 FD | 	jmp	#LR__0665
072d0                 | LR__0627
072d0                 | ' return expr()
072d0     AC 28 B0 FD | 	call	#_expr
072d4     FD 28 02 F6 | 	mov	local06, result1
072d8     E8 01 90 FD | 	jmp	#LR__0665
072dc                 | LR__0628
072dc     C0 0B B0 FD | 	call	#_compile_fun_varp
072e0     FD 2C 02 F6 | 	mov	local08, result1
072e4     FE 28 02 F6 | 	mov	local06, result2
072e8     D8 01 90 FD | 	jmp	#LR__0665
072ec                 | LR__0629
072ec     B0 0B B0 FD | 	call	#_compile_fun_varp
072f0     FD 2C 02 F6 | 	mov	local08, result1
072f4     FE 28 02 F6 | 	mov	local06, result2
072f8     C8 01 90 FD | 	jmp	#LR__0665
072fc                 | LR__0630
072fc     D0 08 B0 FD | 	call	#_compile_fun_2p
07300     FD 28 02 F6 | 	mov	local06, result1
07304     BC 01 90 FD | 	jmp	#LR__0665
07308                 | LR__0631
07308                 | ' return expr()
07308     74 28 B0 FD | 	call	#_expr
0730c     FD 28 02 F6 | 	mov	local06, result1
07310     B0 01 90 FD | 	jmp	#LR__0665
07314                 | LR__0632
07314                 | ' return expr()
07314     68 28 B0 FD | 	call	#_expr
07318     FD 28 02 F6 | 	mov	local06, result1
0731c     A4 01 90 FD | 	jmp	#LR__0665
07320                 | LR__0633
07320     70 22 B0 FD | 	call	#_compile_next
07324     FD 28 02 F6 | 	mov	local06, result1
07328     54 02 90 FD | 	jmp	#LR__0666
0732c                 | LR__0634
0732c     28 09 B0 FD | 	call	#_compile_fun_3p
07330     FD 28 02 F6 | 	mov	local06, result1
07334     8C 01 90 FD | 	jmp	#LR__0665
07338                 | LR__0635
07338                 | ' return expr()
07338     44 28 B0 FD | 	call	#_expr
0733c     FD 28 02 F6 | 	mov	local06, result1
07340     80 01 90 FD | 	jmp	#LR__0665
07344                 | LR__0636
07344                 | ' return expr()
07344     38 28 B0 FD | 	call	#_expr
07348     FD 28 02 F6 | 	mov	local06, result1
0734c     74 01 90 FD | 	jmp	#LR__0665
07350                 | LR__0637
07350                 | ' return expr()
07350     2C 28 B0 FD | 	call	#_expr
07354     FD 28 02 F6 | 	mov	local06, result1
07358     68 01 90 FD | 	jmp	#LR__0665
0735c                 | LR__0638
0735c                 | ' return expr()
0735c     20 28 B0 FD | 	call	#_expr
07360     FD 28 02 F6 | 	mov	local06, result1
07364     5C 01 90 FD | 	jmp	#LR__0665
07368                 | LR__0639
07368     DC 09 B0 FD | 	call	#_compile_fun_4p
0736c     FD 28 02 F6 | 	mov	local06, result1
07370     50 01 90 FD | 	jmp	#LR__0665
07374                 | LR__0640
07374                 | ' return expr()
07374     08 28 B0 FD | 	call	#_expr
07378     FD 28 02 F6 | 	mov	local06, result1
0737c     44 01 90 FD | 	jmp	#LR__0665
07380                 | LR__0641
07380     4C 08 B0 FD | 	call	#_compile_fun_2p
07384     FD 28 02 F6 | 	mov	local06, result1
07388     38 01 90 FD | 	jmp	#LR__0665
0738c                 | LR__0642
0738c     10 0B B0 FD | 	call	#_compile_fun_varp
07390     FD 2C 02 F6 | 	mov	local08, result1
07394     FE 28 02 F6 | 	mov	local06, result2
07398     28 01 90 FD | 	jmp	#LR__0665
0739c                 | LR__0643
0739c     00 0B B0 FD | 	call	#_compile_fun_varp
073a0     FD 2C 02 F6 | 	mov	local08, result1
073a4     FE 28 02 F6 | 	mov	local06, result2
073a8     18 01 90 FD | 	jmp	#LR__0665
073ac                 | LR__0644
073ac     20 08 B0 FD | 	call	#_compile_fun_2p
073b0     FD 28 02 F6 | 	mov	local06, result1
073b4     0C 01 90 FD | 	jmp	#LR__0665
073b8                 | LR__0645
073b8     14 08 B0 FD | 	call	#_compile_fun_2p
073bc     FD 28 02 F6 | 	mov	local06, result1
073c0     00 01 90 FD | 	jmp	#LR__0665
073c4                 | LR__0646
073c4     14 0E B0 FD | 	call	#_compile_print
073c8     FD 28 02 F6 | 	mov	local06, result1
073cc     B0 01 90 FD | 	jmp	#LR__0666
073d0                 | LR__0647
073d0     CC 0A B0 FD | 	call	#_compile_fun_varp
073d4     FD 2C 02 F6 | 	mov	local08, result1
073d8     FE 28 02 F6 | 	mov	local06, result2
073dc     E4 00 90 FD | 	jmp	#LR__0665
073e0                 | LR__0648
073e0                 | ' return expr()
073e0     9C 27 B0 FD | 	call	#_expr
073e4     FD 28 02 F6 | 	mov	local06, result1
073e8     D8 00 90 FD | 	jmp	#LR__0665
073ec                 | LR__0649
073ec     B0 0A B0 FD | 	call	#_compile_fun_varp
073f0     FD 2C 02 F6 | 	mov	local08, result1
073f4     FE 28 02 F6 | 	mov	local06, result2
073f8     C8 00 90 FD | 	jmp	#LR__0665
073fc                 | LR__0650
073fc     A0 0A B0 FD | 	call	#_compile_fun_varp
07400     FD 2C 02 F6 | 	mov	local08, result1
07404     FE 28 02 F6 | 	mov	local06, result2
07408     B8 00 90 FD | 	jmp	#LR__0665
0740c                 | LR__0651
0740c     C0 07 B0 FD | 	call	#_compile_fun_2p
07410     FD 28 02 F6 | 	mov	local06, result1
07414     AC 00 90 FD | 	jmp	#LR__0665
07418                 | LR__0652
07418     B4 07 B0 FD | 	call	#_compile_fun_2p
0741c     FD 28 02 F6 | 	mov	local06, result1
07420     A0 00 90 FD | 	jmp	#LR__0665
07424                 | LR__0653
07424     A8 07 B0 FD | 	call	#_compile_fun_2p
07428     FD 28 02 F6 | 	mov	local06, result1
0742c     94 00 90 FD | 	jmp	#LR__0665
07430                 | LR__0654
07430     9C 07 B0 FD | 	call	#_compile_fun_2p
07434     FD 28 02 F6 | 	mov	local06, result1
07438     88 00 90 FD | 	jmp	#LR__0665
0743c                 | LR__0655
0743c     90 07 B0 FD | 	call	#_compile_fun_2p
07440     FD 28 02 F6 | 	mov	local06, result1
07444     7C 00 90 FD | 	jmp	#LR__0665
07448                 | LR__0656
07448     84 07 B0 FD | 	call	#_compile_fun_2p
0744c     FD 28 02 F6 | 	mov	local06, result1
07450     70 00 90 FD | 	jmp	#LR__0665
07454                 | LR__0657
07454     78 07 B0 FD | 	call	#_compile_fun_2p
07458     FD 28 02 F6 | 	mov	local06, result1
0745c     64 00 90 FD | 	jmp	#LR__0665
07460                 | LR__0658
07460     3C 0A B0 FD | 	call	#_compile_fun_varp
07464     FD 2C 02 F6 | 	mov	local08, result1
07468     FE 28 02 F6 | 	mov	local06, result2
0746c     54 00 90 FD | 	jmp	#LR__0665
07470                 | LR__0659
07470     E4 07 B0 FD | 	call	#_compile_fun_3p
07474     FD 28 02 F6 | 	mov	local06, result1
07478     48 00 90 FD | 	jmp	#LR__0665
0747c                 | LR__0660
0747c                 | ' return expr()
0747c     00 27 B0 FD | 	call	#_expr
07480     FD 28 02 F6 | 	mov	local06, result1
07484     3C 00 90 FD | 	jmp	#LR__0665
07488                 | LR__0661
07488     44 07 B0 FD | 	call	#_compile_fun_2p
0748c     FD 28 02 F6 | 	mov	local06, result1
07490     30 00 90 FD | 	jmp	#LR__0665
07494                 | LR__0662
07494     38 07 B0 FD | 	call	#_compile_fun_2p
07498     FD 28 02 F6 | 	mov	local06, result1
0749c     24 00 90 FD | 	jmp	#LR__0665
074a0                 | LR__0663
074a0     2C 07 B0 FD | 	call	#_compile_fun_2p
074a4     FD 28 02 F6 | 	mov	local06, result1
074a8     18 00 90 FD | 	jmp	#LR__0665
074ac                 | LR__0664
074ac     CC 0A B0 FD | 	call	#_compile_array_assign
074b0     FD 28 02 F6 | 	mov	local06, result1
074b4     0E 28 0E F2 | 	cmp	local06, #14 wz
074b8     C4 00 90 5D |  if_ne	jmp	#LR__0666
074bc                 | ' return 23
074bc     17 28 06 F6 | 	mov	local06, #23
074c0     BC 00 90 FD | 	jmp	#LR__0666
074c4                 | ' return 23
074c4                 | LR__0665
074c4     15 23 02 F6 | 	mov	local03, local07
074c8     16 1F 02 F6 | 	mov	local01, local08
074cc     0F 2F 02 F6 | 	mov	local09, local01
074d0     10 31 02 F6 | 	mov	local10, local02
074d4     11 2B 02 F6 | 	mov	local07, local03
074d8     4A 00 00 FF 
074dc     7C E4 05 F1 | 	add	objptr, ##38012
074e0     F2 1E 02 FB | 	rdlong	local01, objptr
074e4     0F 2D 02 F6 | 	mov	local08, local01
074e8     01 2C 66 F0 | 	shl	local08, #1
074ec     0F 2D 02 F1 | 	add	local08, local01
074f0     02 2C 66 F0 | 	shl	local08, #2
074f4     03 00 00 FF 
074f8     00 E4 85 F1 | 	sub	objptr, ##1536
074fc     F2 2C 02 F1 | 	add	local08, objptr
07500     16 2F 62 FC | 	wrlong	local09, local08
07504     03 00 00 FF 
07508     00 E4 05 F1 | 	add	objptr, ##1536
0750c     F2 1E 02 FB | 	rdlong	local01, objptr
07510     0F 2F 02 F6 | 	mov	local09, local01
07514     01 2E 66 F0 | 	shl	local09, #1
07518     0F 2F 02 F1 | 	add	local09, local01
0751c     02 2E 66 F0 | 	shl	local09, #2
07520     03 00 00 FF 
07524     00 E4 85 F1 | 	sub	objptr, ##1536
07528     F2 2E 02 F1 | 	add	local09, objptr
0752c     04 2E 06 F1 | 	add	local09, #4
07530     17 31 62 FC | 	wrlong	local10, local09
07534     03 00 00 FF 
07538     00 E4 05 F1 | 	add	objptr, ##1536
0753c     F2 1E 02 FB | 	rdlong	local01, objptr
07540     0F 31 02 F6 | 	mov	local10, local01
07544     01 30 66 F0 | 	shl	local10, #1
07548     0F 31 02 F1 | 	add	local10, local01
0754c     02 30 66 F0 | 	shl	local10, #2
07550     03 00 00 FF 
07554     00 E4 85 F1 | 	sub	objptr, ##1536
07558     F2 30 02 F1 | 	add	local10, objptr
0755c     08 30 06 F1 | 	add	local10, #8
07560     18 2B 62 FC | 	wrlong	local07, local10
07564     03 00 00 FF 
07568     00 E4 05 F1 | 	add	objptr, ##1536
0756c     F2 2E 02 FB | 	rdlong	local09, objptr
07570     01 2E 06 F1 | 	add	local09, #1
07574     F2 2E 62 FC | 	wrlong	local09, objptr
07578     4A 00 00 FF 
0757c     7C E4 85 F1 | 	sub	objptr, ##38012
07580                 | LR__0666
07580                 | ' 
07580                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07580                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07580     03 24 0E F2 | 	cmp	local04, #3 wz
07584     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07588     38 00 90 5D |  if_ne	jmp	#LR__0667
0758c     4A 00 00 FF 
07590     7C E4 05 F1 | 	add	objptr, ##38012
07594     F2 30 02 FB | 	rdlong	local10, objptr
07598     18 1F 02 F6 | 	mov	local01, local10
0759c     01 1E 66 F0 | 	shl	local01, #1
075a0     18 1F 02 F1 | 	add	local01, local10
075a4     02 1E 66 F0 | 	shl	local01, #2
075a8     03 00 00 FF 
075ac     00 E4 85 F1 | 	sub	objptr, ##1536
075b0     F2 1E 02 F1 | 	add	local01, objptr
075b4     08 1E 06 F1 | 	add	local01, #8
075b8     0F FD 6B FC | 	wrlong	#510, local01
075bc     47 00 00 FF 
075c0     7C E4 85 F1 | 	sub	objptr, ##36476
075c4                 | LR__0667
075c4                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
075c4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
075c4     4A 00 00 FF 
075c8     7C E4 05 F1 | 	add	objptr, ##38012
075cc     F2 1E 02 FB | 	rdlong	local01, objptr
075d0     4A 00 00 FF 
075d4     7C E4 85 F1 | 	sub	objptr, ##38012
075d8     97 58 48 FB | 	callpa	#(@LR__0670-@LR__0668)>>2,fcache_load_ptr_
075dc                 | LR__0668
075dc     0F 31 02 F6 | 	mov	local10, local01
075e0     01 30 66 F0 | 	shl	local10, #1
075e4     0F 31 02 F1 | 	add	local10, local01
075e8     02 30 66 F0 | 	shl	local10, #2
075ec     47 00 00 FF 
075f0     7C E4 05 F1 | 	add	objptr, ##36476
075f4     F2 30 02 F1 | 	add	local10, objptr
075f8     08 30 06 F1 | 	add	local10, #8
075fc     18 31 02 FB | 	rdlong	local10, local10
07600     9B 30 0E F2 | 	cmp	local10, #155 wz
07604     47 00 00 FF 
07608     7C E4 85 F1 | 	sub	objptr, ##36476
0760c     70 00 90 5D |  if_ne	jmp	#LR__0669
07610     0F 2F 02 F6 | 	mov	local09, local01
07614     01 2E 86 F1 | 	sub	local09, #1
07618     17 31 02 F6 | 	mov	local10, local09
0761c     01 30 66 F0 | 	shl	local10, #1
07620     17 31 02 F1 | 	add	local10, local09
07624     02 30 66 F0 | 	shl	local10, #2
07628     47 00 00 FF 
0762c     7C E4 05 F1 | 	add	objptr, ##36476
07630     F2 30 02 F1 | 	add	local10, objptr
07634     08 30 06 F1 | 	add	local10, #8
07638     18 31 02 FB | 	rdlong	local10, local10
0763c     11 30 0E F2 | 	cmp	local10, #17 wz
07640     47 00 00 FF 
07644     7C E4 85 F1 | 	sub	objptr, ##36476
07648     34 00 90 5D |  if_ne	jmp	#LR__0669
0764c     0F 2F 02 F6 | 	mov	local09, local01
07650     01 2E 86 F1 | 	sub	local09, #1
07654     17 31 02 F6 | 	mov	local10, local09
07658     01 30 66 F0 | 	shl	local10, #1
0765c     17 31 02 F1 | 	add	local10, local09
07660     02 30 66 F0 | 	shl	local10, #2
07664     47 00 00 FF 
07668     7C E4 05 F1 | 	add	objptr, ##36476
0766c     F2 30 02 F1 | 	add	local10, objptr
07670     08 30 06 F1 | 	add	local10, #8
07674     18 25 68 FC | 	wrlong	#18, local10
07678     47 00 00 FF 
0767c     7C E4 85 F1 | 	sub	objptr, ##36476
07680                 | LR__0669
07680     01 1E 86 F1 | 	sub	local01, #1
07684     01 1E 56 F2 | 	cmps	local01, #1 wc
07688     50 FF 9F 3D |  if_ae	jmp	#LR__0668
0768c                 | LR__0670
0768c                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0768c                 | ' return err
0768c     14 FB 01 F6 | 	mov	result1, local06
07690     A7 F0 03 F6 | 	mov	ptra, fp
07694     B2 00 A0 FD | 	call	#popregs_
07698                 | _compile_immediate_ret
07698     2D 00 64 FD | 	ret
0769c                 | 
0769c                 | ' 
0769c                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
0769c                 | ' 
0769c                 | ' function compile_immediate_assign(linetype as ulong) as ulong
0769c                 | _compile_immediate_assign
0769c     0C 4A 05 F6 | 	mov	COUNT_, #12
076a0     A8 00 A0 FD | 	call	#pushregs_
076a4     09 25 02 F6 | 	mov	local04, arg01
076a8     FF 22 06 F6 | 	mov	local03, #255
076ac     01 26 66 F6 | 	neg	local05, #1
076b0     00 28 06 F6 | 	mov	local06, #0
076b4                 | ' 
076b4                 | ' t1.result_type=result_error : t1.result.uresult=0
076b4                 | ' i=-1: j=-1 : err=0
076b4                 | ' 
076b4                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
076b4     02 24 0E F2 | 	cmp	local04, #2 wz
076b8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
076bc     35 00 00 AF 
076c0     0C E4 05 A1 |  if_e	add	objptr, ##27148
076c4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
076c8     02 00 00 AF 
076cc     38 E4 05 A1 |  if_e	add	objptr, ##1080
076d0     F2 04 68 AC |  if_e	wrlong	#2, objptr
076d4     37 00 00 AF 
076d8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
076dc                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
076dc     04 24 0E F2 | 	cmp	local04, #4 wz
076e0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
076e4     2C 00 90 5D |  if_ne	jmp	#LR__0680
076e8     35 00 00 FF 
076ec     14 E4 05 F1 | 	add	objptr, ##27156
076f0     F2 2A 02 FB | 	rdlong	local07, objptr
076f4     02 00 00 FF 
076f8     30 E4 05 F1 | 	add	objptr, ##1072
076fc     F2 06 68 FC | 	wrlong	#3, objptr
07700     13 00 00 FF 
07704     38 E4 05 F1 | 	add	objptr, ##9784
07708     F2 04 68 FC | 	wrlong	#2, objptr
0770c     4A 00 00 FF 
07710     7C E4 85 F1 | 	sub	objptr, ##38012
07714                 | LR__0680
07714                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07714     05 24 0E F2 | 	cmp	local04, #5 wz
07718     3C 00 90 5D |  if_ne	jmp	#LR__0681
0771c     37 00 00 FF 
07720     44 E4 05 F1 | 	add	objptr, ##28228
07724     F2 FA 01 FB | 	rdlong	result1, objptr
07728     FD 2A 02 F6 | 	mov	local07, result1
0772c     03 2A 66 F0 | 	shl	local07, #3
07730     02 00 00 FF 
07734     38 E4 85 F1 | 	sub	objptr, ##1080
07738     F2 2A 02 F1 | 	add	local07, objptr
0773c     15 2B 02 FB | 	rdlong	local07, local07
07740     02 FA 05 F1 | 	add	result1, #2
07744     02 00 00 FF 
07748     38 E4 05 F1 | 	add	objptr, ##1080
0774c     F2 FA 61 FC | 	wrlong	result1, objptr
07750     37 00 00 FF 
07754     44 E4 85 F1 | 	sub	objptr, ##28228
07758                 | LR__0681
07758     15 13 02 F6 | 	mov	arg01, local07
0775c     01 14 06 F6 | 	mov	arg02, #1
07760     D0 B1 B1 FD | 	call	#__system__Right_S
07764     FD 2C 02 F6 | 	mov	local08, result1
07768     14 24 B0 FD | 	call	#_expr
0776c                 | ' 
0776c                 | ' suffix2$=right$(varname2$,1)
0776c                 | ' expr()
0776c                 | ' if varnum>0 then					' try to find a variable
0776c     35 00 00 FF 
07770     08 E4 05 F1 | 	add	objptr, ##27144
07774     F2 2E 02 FB | 	rdlong	local09, objptr
07778     35 00 00 FF 
0777c     08 E4 85 F1 | 	sub	objptr, ##27144
07780     01 2E 56 F2 | 	cmps	local09, #1 wc
07784     58 00 90 CD |  if_b	jmp	#LR__0684
07788                 | '   for i=0 to varnum-1
07788     00 30 06 F6 | 	mov	local10, #0
0778c     35 00 00 FF 
07790     08 E4 05 F1 | 	add	objptr, ##27144
07794     F2 32 02 FB | 	rdlong	local11, objptr
07798     35 00 00 FF 
0779c     08 E4 85 F1 | 	sub	objptr, ##27144
077a0                 | LR__0682
077a0     19 31 52 F2 | 	cmps	local10, local11 wc
077a4     38 00 90 3D |  if_ae	jmp	#LR__0683
077a8                 | '     if variables(i).name=varname2$ then j=i : exit
077a8     18 2F 02 F6 | 	mov	local09, local10
077ac     04 2E 66 F0 | 	shl	local09, #4
077b0     14 00 00 FF 
077b4     F8 E5 05 F1 | 	add	objptr, ##10744
077b8     F2 2E 02 F1 | 	add	local09, objptr
077bc     17 13 02 FB | 	rdlong	arg01, local09
077c0     15 15 02 F6 | 	mov	arg02, local07
077c4     14 00 00 FF 
077c8     F8 E5 85 F1 | 	sub	objptr, ##10744
077cc     88 90 B1 FD | 	call	#__system___string_cmp
077d0     00 FA 0D F2 | 	cmp	result1, #0 wz
077d4     18 27 02 A6 |  if_e	mov	local05, local10
077d8     01 30 06 51 |  if_ne	add	local10, #1
077dc     C0 FF 9F 5D |  if_ne	jmp	#LR__0682
077e0                 | LR__0683
077e0                 | LR__0684
077e0                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
077e0     FF FF 7F FF 
077e4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
077e8     60 00 90 5D |  if_ne	jmp	#LR__0685
077ec     35 00 00 FF 
077f0     08 E4 05 F1 | 	add	objptr, ##27144
077f4     F2 2E 02 FB | 	rdlong	local09, objptr
077f8     35 00 00 FF 
077fc     08 E4 85 F1 | 	sub	objptr, ##27144
07800     02 00 00 FF 
07804     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07808     40 00 90 3D |  if_ae	jmp	#LR__0685
0780c     35 00 00 FF 
07810     08 E4 05 F1 | 	add	objptr, ##27144
07814     F2 32 02 FB | 	rdlong	local11, objptr
07818     04 32 66 F0 | 	shl	local11, #4
0781c     20 00 00 FF 
07820     10 E4 85 F1 | 	sub	objptr, ##16400
07824     F2 32 02 F1 | 	add	local11, objptr
07828     19 2B 62 FC | 	wrlong	local07, local11
0782c     20 00 00 FF 
07830     10 E4 05 F1 | 	add	objptr, ##16400
07834     F2 2E 02 FB | 	rdlong	local09, objptr
07838     17 27 02 F6 | 	mov	local05, local09
0783c     01 2E 06 F1 | 	add	local09, #1
07840     F2 2E 62 FC | 	wrlong	local09, objptr
07844     35 00 00 FF 
07848     08 E4 85 F1 | 	sub	objptr, ##27144
0784c                 | LR__0685
0784c                 | ' if varnum>=maxvars then
0784c     35 00 00 FF 
07850     08 E4 05 F1 | 	add	objptr, ##27144
07854     F2 2E 02 FB | 	rdlong	local09, objptr
07858     35 00 00 FF 
0785c     08 E4 85 F1 | 	sub	objptr, ##27144
07860     02 00 00 FF 
07864     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07868     2D 28 06 36 |  if_ae	mov	local06, #45
0786c     C8 01 90 3D |  if_ae	jmp	#LR__0690
07870     13 1F 02 F6 | 	mov	local01, local05
07874     17 22 06 F6 | 	mov	local03, #23
07878     0F 2F 02 F6 | 	mov	local09, local01
0787c     10 35 02 F6 | 	mov	local12, local02
07880     11 1F 02 F6 | 	mov	local01, local03
07884     4A 00 00 FF 
07888     7C E4 05 F1 | 	add	objptr, ##38012
0788c     F2 32 02 FB | 	rdlong	local11, objptr
07890     19 31 02 F6 | 	mov	local10, local11
07894     01 30 66 F0 | 	shl	local10, #1
07898     19 31 02 F1 | 	add	local10, local11
0789c     02 30 66 F0 | 	shl	local10, #2
078a0     03 00 00 FF 
078a4     00 E4 85 F1 | 	sub	objptr, ##1536
078a8     F2 30 02 F1 | 	add	local10, objptr
078ac     18 2F 62 FC | 	wrlong	local09, local10
078b0     03 00 00 FF 
078b4     00 E4 05 F1 | 	add	objptr, ##1536
078b8     F2 2E 02 FB | 	rdlong	local09, objptr
078bc     17 33 02 F6 | 	mov	local11, local09
078c0     01 32 66 F0 | 	shl	local11, #1
078c4     17 33 02 F1 | 	add	local11, local09
078c8     02 32 66 F0 | 	shl	local11, #2
078cc     03 00 00 FF 
078d0     00 E4 85 F1 | 	sub	objptr, ##1536
078d4     F2 32 02 F1 | 	add	local11, objptr
078d8     04 32 06 F1 | 	add	local11, #4
078dc     19 35 62 FC | 	wrlong	local12, local11
078e0     03 00 00 FF 
078e4     00 E4 05 F1 | 	add	objptr, ##1536
078e8     F2 2E 02 FB | 	rdlong	local09, objptr
078ec     17 35 02 F6 | 	mov	local12, local09
078f0     01 34 66 F0 | 	shl	local12, #1
078f4     17 35 02 F1 | 	add	local12, local09
078f8     02 34 66 F0 | 	shl	local12, #2
078fc     03 00 00 FF 
07900     00 E4 85 F1 | 	sub	objptr, ##1536
07904     F2 34 02 F1 | 	add	local12, objptr
07908     08 34 06 F1 | 	add	local12, #8
0790c     1A 1F 62 FC | 	wrlong	local01, local12
07910     03 00 00 FF 
07914     00 E4 05 F1 | 	add	objptr, ##1536
07918     F2 2E 02 FB | 	rdlong	local09, objptr
0791c     01 2E 06 F1 | 	add	local09, #1
07920     F2 2E 62 FC | 	wrlong	local09, objptr
07924     4A 00 00 FF 
07928     7C E4 85 F1 | 	sub	objptr, ##38012
0792c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0792c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0792c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0792c     03 24 0E F2 | 	cmp	local04, #3 wz
07930     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07934     38 00 90 5D |  if_ne	jmp	#LR__0686
07938     4A 00 00 FF 
0793c     7C E4 05 F1 | 	add	objptr, ##38012
07940     F2 34 02 FB | 	rdlong	local12, objptr
07944     1A 1F 02 F6 | 	mov	local01, local12
07948     01 1E 66 F0 | 	shl	local01, #1
0794c     1A 1F 02 F1 | 	add	local01, local12
07950     02 1E 66 F0 | 	shl	local01, #2
07954     03 00 00 FF 
07958     00 E4 85 F1 | 	sub	objptr, ##1536
0795c     F2 1E 02 F1 | 	add	local01, objptr
07960     08 1E 06 F1 | 	add	local01, #8
07964     0F FD 6B FC | 	wrlong	#510, local01
07968     47 00 00 FF 
0796c     7C E4 85 F1 | 	sub	objptr, ##36476
07970                 | LR__0686
07970                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07970     4A 00 00 FF 
07974     7C E4 05 F1 | 	add	objptr, ##38012
07978     F2 30 02 FB | 	rdlong	local10, objptr
0797c     4A 00 00 FF 
07980     7C E4 85 F1 | 	sub	objptr, ##38012
07984     97 58 48 FB | 	callpa	#(@LR__0689-@LR__0687)>>2,fcache_load_ptr_
07988                 | LR__0687
07988     18 35 02 F6 | 	mov	local12, local10
0798c     01 34 66 F0 | 	shl	local12, #1
07990     18 35 02 F1 | 	add	local12, local10
07994     02 34 66 F0 | 	shl	local12, #2
07998     47 00 00 FF 
0799c     7C E4 05 F1 | 	add	objptr, ##36476
079a0     F2 34 02 F1 | 	add	local12, objptr
079a4     08 34 06 F1 | 	add	local12, #8
079a8     1A 35 02 FB | 	rdlong	local12, local12
079ac     9B 34 0E F2 | 	cmp	local12, #155 wz
079b0     47 00 00 FF 
079b4     7C E4 85 F1 | 	sub	objptr, ##36476
079b8     70 00 90 5D |  if_ne	jmp	#LR__0688
079bc     18 35 02 F6 | 	mov	local12, local10
079c0     01 34 86 F1 | 	sub	local12, #1
079c4     1A 1F 02 F6 | 	mov	local01, local12
079c8     01 1E 66 F0 | 	shl	local01, #1
079cc     1A 1F 02 F1 | 	add	local01, local12
079d0     02 1E 66 F0 | 	shl	local01, #2
079d4     47 00 00 FF 
079d8     7C E4 05 F1 | 	add	objptr, ##36476
079dc     F2 1E 02 F1 | 	add	local01, objptr
079e0     08 1E 06 F1 | 	add	local01, #8
079e4     0F 1F 02 FB | 	rdlong	local01, local01
079e8     11 1E 0E F2 | 	cmp	local01, #17 wz
079ec     47 00 00 FF 
079f0     7C E4 85 F1 | 	sub	objptr, ##36476
079f4     34 00 90 5D |  if_ne	jmp	#LR__0688
079f8     18 35 02 F6 | 	mov	local12, local10
079fc     01 34 86 F1 | 	sub	local12, #1
07a00     1A 1F 02 F6 | 	mov	local01, local12
07a04     01 1E 66 F0 | 	shl	local01, #1
07a08     1A 1F 02 F1 | 	add	local01, local12
07a0c     02 1E 66 F0 | 	shl	local01, #2
07a10     47 00 00 FF 
07a14     7C E4 05 F1 | 	add	objptr, ##36476
07a18     F2 1E 02 F1 | 	add	local01, objptr
07a1c     08 1E 06 F1 | 	add	local01, #8
07a20     0F 25 68 FC | 	wrlong	#18, local01
07a24     47 00 00 FF 
07a28     7C E4 85 F1 | 	sub	objptr, ##36476
07a2c                 | LR__0688
07a2c     01 30 86 F1 | 	sub	local10, #1
07a30     01 30 56 F2 | 	cmps	local10, #1 wc
07a34     50 FF 9F 3D |  if_ae	jmp	#LR__0687
07a38                 | LR__0689
07a38                 | LR__0690
07a38                 | ' return err
07a38     14 FB 01 F6 | 	mov	result1, local06
07a3c     A7 F0 03 F6 | 	mov	ptra, fp
07a40     B2 00 A0 FD | 	call	#popregs_
07a44                 | _compile_immediate_assign_ret
07a44     2D 00 64 FD | 	ret
07a48                 | 
07a48                 | ' 
07a48                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07a48                 | ' 
07a48                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07a48                 | _compile
07a48     03 4A 05 F6 | 	mov	COUNT_, #3
07a4c     A8 00 A0 FD | 	call	#pushregs_
07a50     09 1F 02 F6 | 	mov	local01, arg01
07a54     0B 21 02 F6 | 	mov	local02, arg03
07a58     47 00 00 FF 
07a5c     7C E4 05 F1 | 	add	objptr, ##36476
07a60     F2 1E 62 FC | 	wrlong	local01, objptr
07a64     04 E4 05 F1 | 	add	objptr, #4
07a68     F2 14 62 FC | 	wrlong	arg02, objptr
07a6c     47 00 00 FF 
07a70     80 E4 85 F1 | 	sub	objptr, ##36480
07a74     10 13 02 F6 | 	mov	arg01, local02
07a78     01 12 06 F1 | 	add	arg01, #1
07a7c     0F 15 02 F6 | 	mov	arg02, local01
07a80     18 F3 BF FD | 	call	#_compile_immediate
07a84     FD 22 0A F6 | 	mov	local03, result1 wz
07a88                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07a88                 | ' ucompiledline(0)=alinemajor
07a88                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07a88                 | ' 
07a88                 | ' ' cont: 
07a88                 | ' ' 0 - this is the first part of the line that will continue
07a88                 | ' ' 1 - this is the continuation of the line
07a88                 | ' ' 2 - this is the last continued line
07a88                 | ' ' 3 - this is the one and only part
07a88                 | ' 
07a88                 | ' err=compile_immediate(cont+1,alinemajor) 
07a88                 | ' if err=0 andalso alinemajor>0 then
07a88     74 00 90 5D |  if_ne	jmp	#LR__0705
07a8c     01 1E 16 F2 | 	cmp	local01, #1 wc
07a90     6C 00 90 CD |  if_b	jmp	#LR__0705
07a94                 | '   if cont=3 orelse cont=2 then 
07a94     03 20 0E F2 | 	cmp	local02, #3 wz
07a98     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07a9c     60 00 90 5D |  if_ne	jmp	#LR__0704
07aa0                 | '     if alinemajor >lastline then 
07aa0     4A 00 00 FF 
07aa4     8C E4 05 F1 | 	add	objptr, ##38028
07aa8     F2 14 02 FB | 	rdlong	arg02, objptr
07aac     4A 00 00 FF 
07ab0     8C E4 85 F1 | 	sub	objptr, ##38028
07ab4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07ab8     0C 00 90 ED |  if_be	jmp	#LR__0700
07abc     0F 13 02 F6 | 	mov	arg01, local01
07ac0     10 F2 BF FD | 	call	#_add_line_at_end
07ac4     38 00 90 FD | 	jmp	#LR__0703
07ac8                 | LR__0700
07ac8     0F 13 02 F6 | 	mov	arg01, local01
07acc     D4 EB BF FD | 	call	#_deleteline
07ad0                 | '       deleteline(alinemajor)  
07ad0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
07ad0     4A 00 00 FF 
07ad4     8C E4 05 F1 | 	add	objptr, ##38028
07ad8     F2 14 02 FB | 	rdlong	arg02, objptr
07adc     4A 00 00 FF 
07ae0     8C E4 85 F1 | 	sub	objptr, ##38028
07ae4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07ae8     0C 00 90 ED |  if_be	jmp	#LR__0701
07aec     0F 13 02 F6 | 	mov	arg01, local01
07af0     E0 F1 BF FD | 	call	#_add_line_at_end
07af4     08 00 90 FD | 	jmp	#LR__0702
07af8                 | LR__0701
07af8     0F 13 02 F6 | 	mov	arg01, local01
07afc     B8 EF BF FD | 	call	#_insertline
07b00                 | LR__0702
07b00                 | LR__0703
07b00                 | LR__0704
07b00                 | LR__0705
07b00                 | ' return err
07b00     11 FB 01 F6 | 	mov	result1, local03
07b04     A7 F0 03 F6 | 	mov	ptra, fp
07b08     B2 00 A0 FD | 	call	#popregs_
07b0c                 | _compile_ret
07b0c     2D 00 64 FD | 	ret
07b10                 | 
07b10                 | ' 
07b10                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
07b10                 | ' 
07b10                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
07b10                 | _compile_assign
07b10     03 4A 05 F6 | 	mov	COUNT_, #3
07b14     A8 00 A0 FD | 	call	#pushregs_
07b18     09 1F 02 F6 | 	mov	local01, arg01
07b1c     0B 21 02 F6 | 	mov	local02, arg03
07b20     47 00 00 FF 
07b24     7C E4 05 F1 | 	add	objptr, ##36476
07b28     F2 1E 62 FC | 	wrlong	local01, objptr
07b2c     04 E4 05 F1 | 	add	objptr, #4
07b30     F2 14 62 FC | 	wrlong	arg02, objptr
07b34     47 00 00 FF 
07b38     80 E4 85 F1 | 	sub	objptr, ##36480
07b3c     10 13 02 F6 | 	mov	arg01, local02
07b40     01 12 06 F1 | 	add	arg01, #1
07b44     54 FB BF FD | 	call	#_compile_immediate_assign
07b48     FD 22 02 F6 | 	mov	local03, result1
07b4c                 | ' 
07b4c                 | ' ucompiledline(0)=alinemajor
07b4c                 | ' ucompiledline(1)=alineminor
07b4c                 | ' 
07b4c                 | ' err=compile_immediate_assign(cont+1) 
07b4c                 | ' if alinemajor>0 then
07b4c     01 1E 16 F2 | 	cmp	local01, #1 wc
07b50     6C 00 90 CD |  if_b	jmp	#LR__0715
07b54                 | '   if cont=3 orelse cont=2 then 
07b54     03 20 0E F2 | 	cmp	local02, #3 wz
07b58     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07b5c     60 00 90 5D |  if_ne	jmp	#LR__0714
07b60                 | '     if alinemajor >lastline then 
07b60     4A 00 00 FF 
07b64     8C E4 05 F1 | 	add	objptr, ##38028
07b68     F2 14 02 FB | 	rdlong	arg02, objptr
07b6c     4A 00 00 FF 
07b70     8C E4 85 F1 | 	sub	objptr, ##38028
07b74     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07b78     0C 00 90 ED |  if_be	jmp	#LR__0710
07b7c     0F 13 02 F6 | 	mov	arg01, local01
07b80     50 F1 BF FD | 	call	#_add_line_at_end
07b84     38 00 90 FD | 	jmp	#LR__0713
07b88                 | LR__0710
07b88     0F 13 02 F6 | 	mov	arg01, local01
07b8c     14 EB BF FD | 	call	#_deleteline
07b90                 | '       deleteline(alinemajor)  
07b90                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07b90     4A 00 00 FF 
07b94     8C E4 05 F1 | 	add	objptr, ##38028
07b98     F2 14 02 FB | 	rdlong	arg02, objptr
07b9c     4A 00 00 FF 
07ba0     8C E4 85 F1 | 	sub	objptr, ##38028
07ba4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07ba8     0C 00 90 ED |  if_be	jmp	#LR__0711
07bac     0F 13 02 F6 | 	mov	arg01, local01
07bb0     20 F1 BF FD | 	call	#_add_line_at_end
07bb4     08 00 90 FD | 	jmp	#LR__0712
07bb8                 | LR__0711
07bb8     0F 13 02 F6 | 	mov	arg01, local01
07bbc     F8 EE BF FD | 	call	#_insertline
07bc0                 | LR__0712
07bc0                 | LR__0713
07bc0                 | LR__0714
07bc0                 | LR__0715
07bc0                 | ' return err
07bc0     11 FB 01 F6 | 	mov	result1, local03
07bc4     A7 F0 03 F6 | 	mov	ptra, fp
07bc8     B2 00 A0 FD | 	call	#popregs_
07bcc                 | _compile_assign_ret
07bcc     2D 00 64 FD | 	ret
07bd0                 | 
07bd0                 | ' 
07bd0                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
07bd0                 | ' 
07bd0                 | ' function compile_fun_2p() as ulong
07bd0                 | _compile_fun_2p
07bd0     01 4A 05 F6 | 	mov	COUNT_, #1
07bd4     A8 00 A0 FD | 	call	#pushregs_
07bd8     A4 1F B0 FD | 	call	#_expr
07bdc     FD 1E 02 F6 | 	mov	local01, result1
07be0                 | ' err=expr() : if err>0 then return err
07be0     01 1E 16 F2 | 	cmp	local01, #1 wc
07be4     0F FB 01 36 |  if_ae	mov	result1, local01
07be8     60 00 90 3D |  if_ae	jmp	#LR__0720
07bec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07bec     37 00 00 FF 
07bf0     44 E4 05 F1 | 	add	objptr, ##28228
07bf4     F2 1E 02 FB | 	rdlong	local01, objptr
07bf8     03 1E 66 F0 | 	shl	local01, #3
07bfc     02 00 00 FF 
07c00     38 E4 85 F1 | 	sub	objptr, ##1080
07c04     F2 1E 02 F1 | 	add	local01, objptr
07c08     04 1E 06 F1 | 	add	local01, #4
07c0c     0F 1F 02 FB | 	rdlong	local01, local01
07c10     11 1E 0E F2 | 	cmp	local01, #17 wz
07c14     35 00 00 FF 
07c18     0C E4 85 F1 | 	sub	objptr, ##27148
07c1c     15 FA 05 56 |  if_ne	mov	result1, #21
07c20     28 00 90 5D |  if_ne	jmp	#LR__0720
07c24     37 00 00 FF 
07c28     44 E4 05 F1 | 	add	objptr, ##28228
07c2c     F2 1E 02 FB | 	rdlong	local01, objptr
07c30     01 1E 06 F1 | 	add	local01, #1
07c34     F2 1E 62 FC | 	wrlong	local01, objptr
07c38     37 00 00 FF 
07c3c     44 E4 85 F1 | 	sub	objptr, ##28228
07c40     3C 1F B0 FD | 	call	#_expr
07c44                 | ' err=expr() : if err>0 then return err
07c44     01 FA 15 F2 | 	cmp	result1, #1 wc
07c48                 | ' return 0
07c48     00 FA 05 C6 |  if_b	mov	result1, #0
07c4c                 | LR__0720
07c4c     A7 F0 03 F6 | 	mov	ptra, fp
07c50     B2 00 A0 FD | 	call	#popregs_
07c54                 | _compile_fun_2p_ret
07c54     2D 00 64 FD | 	ret
07c58                 | 
07c58                 | ' 
07c58                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
07c58                 | ' 
07c58                 | ' function compile_fun_3p() as ulong
07c58                 | _compile_fun_3p
07c58     01 4A 05 F6 | 	mov	COUNT_, #1
07c5c     A8 00 A0 FD | 	call	#pushregs_
07c60     1C 1F B0 FD | 	call	#_expr
07c64     FD 1E 02 F6 | 	mov	local01, result1
07c68                 | ' err=expr() : if err>0 then return err
07c68     01 1E 16 F2 | 	cmp	local01, #1 wc
07c6c     0F FB 01 36 |  if_ae	mov	result1, local01
07c70     C8 00 90 3D |  if_ae	jmp	#LR__0730
07c74                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07c74     37 00 00 FF 
07c78     44 E4 05 F1 | 	add	objptr, ##28228
07c7c     F2 1E 02 FB | 	rdlong	local01, objptr
07c80     03 1E 66 F0 | 	shl	local01, #3
07c84     02 00 00 FF 
07c88     38 E4 85 F1 | 	sub	objptr, ##1080
07c8c     F2 1E 02 F1 | 	add	local01, objptr
07c90     04 1E 06 F1 | 	add	local01, #4
07c94     0F 1F 02 FB | 	rdlong	local01, local01
07c98     11 1E 0E F2 | 	cmp	local01, #17 wz
07c9c     35 00 00 FF 
07ca0     0C E4 85 F1 | 	sub	objptr, ##27148
07ca4     15 FA 05 56 |  if_ne	mov	result1, #21
07ca8     90 00 90 5D |  if_ne	jmp	#LR__0730
07cac     37 00 00 FF 
07cb0     44 E4 05 F1 | 	add	objptr, ##28228
07cb4     F2 1E 02 FB | 	rdlong	local01, objptr
07cb8     01 1E 06 F1 | 	add	local01, #1
07cbc     F2 1E 62 FC | 	wrlong	local01, objptr
07cc0     37 00 00 FF 
07cc4     44 E4 85 F1 | 	sub	objptr, ##28228
07cc8     B4 1E B0 FD | 	call	#_expr
07ccc     FD 1E 02 F6 | 	mov	local01, result1
07cd0                 | ' err=expr() : if err>0 then return err
07cd0     01 1E 16 F2 | 	cmp	local01, #1 wc
07cd4     0F FB 01 36 |  if_ae	mov	result1, local01
07cd8     60 00 90 3D |  if_ae	jmp	#LR__0730
07cdc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07cdc     37 00 00 FF 
07ce0     44 E4 05 F1 | 	add	objptr, ##28228
07ce4     F2 1E 02 FB | 	rdlong	local01, objptr
07ce8     03 1E 66 F0 | 	shl	local01, #3
07cec     02 00 00 FF 
07cf0     38 E4 85 F1 | 	sub	objptr, ##1080
07cf4     F2 1E 02 F1 | 	add	local01, objptr
07cf8     04 1E 06 F1 | 	add	local01, #4
07cfc     0F 1F 02 FB | 	rdlong	local01, local01
07d00     11 1E 0E F2 | 	cmp	local01, #17 wz
07d04     35 00 00 FF 
07d08     0C E4 85 F1 | 	sub	objptr, ##27148
07d0c     15 FA 05 56 |  if_ne	mov	result1, #21
07d10     28 00 90 5D |  if_ne	jmp	#LR__0730
07d14     37 00 00 FF 
07d18     44 E4 05 F1 | 	add	objptr, ##28228
07d1c     F2 1E 02 FB | 	rdlong	local01, objptr
07d20     01 1E 06 F1 | 	add	local01, #1
07d24     F2 1E 62 FC | 	wrlong	local01, objptr
07d28     37 00 00 FF 
07d2c     44 E4 85 F1 | 	sub	objptr, ##28228
07d30     4C 1E B0 FD | 	call	#_expr
07d34                 | ' err=expr() : if err>0 then return err
07d34     01 FA 15 F2 | 	cmp	result1, #1 wc
07d38                 | ' return 0
07d38     00 FA 05 C6 |  if_b	mov	result1, #0
07d3c                 | LR__0730
07d3c     A7 F0 03 F6 | 	mov	ptra, fp
07d40     B2 00 A0 FD | 	call	#popregs_
07d44                 | _compile_fun_3p_ret
07d44     2D 00 64 FD | 	ret
07d48                 | 
07d48                 | ' 
07d48                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
07d48                 | ' 
07d48                 | ' function compile_fun_4p() as ulong
07d48                 | _compile_fun_4p
07d48     01 4A 05 F6 | 	mov	COUNT_, #1
07d4c     A8 00 A0 FD | 	call	#pushregs_
07d50     2C 1E B0 FD | 	call	#_expr
07d54     FD 1E 02 F6 | 	mov	local01, result1
07d58                 | ' err=expr() : if err>0 then return err
07d58     01 1E 16 F2 | 	cmp	local01, #1 wc
07d5c     0F FB 01 36 |  if_ae	mov	result1, local01
07d60     30 01 90 3D |  if_ae	jmp	#LR__0740
07d64                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07d64     37 00 00 FF 
07d68     44 E4 05 F1 | 	add	objptr, ##28228
07d6c     F2 1E 02 FB | 	rdlong	local01, objptr
07d70     03 1E 66 F0 | 	shl	local01, #3
07d74     02 00 00 FF 
07d78     38 E4 85 F1 | 	sub	objptr, ##1080
07d7c     F2 1E 02 F1 | 	add	local01, objptr
07d80     04 1E 06 F1 | 	add	local01, #4
07d84     0F 1F 02 FB | 	rdlong	local01, local01
07d88     11 1E 0E F2 | 	cmp	local01, #17 wz
07d8c     35 00 00 FF 
07d90     0C E4 85 F1 | 	sub	objptr, ##27148
07d94     15 FA 05 56 |  if_ne	mov	result1, #21
07d98     F8 00 90 5D |  if_ne	jmp	#LR__0740
07d9c     37 00 00 FF 
07da0     44 E4 05 F1 | 	add	objptr, ##28228
07da4     F2 1E 02 FB | 	rdlong	local01, objptr
07da8     01 1E 06 F1 | 	add	local01, #1
07dac     F2 1E 62 FC | 	wrlong	local01, objptr
07db0     37 00 00 FF 
07db4     44 E4 85 F1 | 	sub	objptr, ##28228
07db8     C4 1D B0 FD | 	call	#_expr
07dbc     FD 1E 02 F6 | 	mov	local01, result1
07dc0                 | ' err=expr() : if err>0 then return err
07dc0     01 1E 16 F2 | 	cmp	local01, #1 wc
07dc4     0F FB 01 36 |  if_ae	mov	result1, local01
07dc8     C8 00 90 3D |  if_ae	jmp	#LR__0740
07dcc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07dcc     37 00 00 FF 
07dd0     44 E4 05 F1 | 	add	objptr, ##28228
07dd4     F2 1E 02 FB | 	rdlong	local01, objptr
07dd8     03 1E 66 F0 | 	shl	local01, #3
07ddc     02 00 00 FF 
07de0     38 E4 85 F1 | 	sub	objptr, ##1080
07de4     F2 1E 02 F1 | 	add	local01, objptr
07de8     04 1E 06 F1 | 	add	local01, #4
07dec     0F 1F 02 FB | 	rdlong	local01, local01
07df0     11 1E 0E F2 | 	cmp	local01, #17 wz
07df4     35 00 00 FF 
07df8     0C E4 85 F1 | 	sub	objptr, ##27148
07dfc     15 FA 05 56 |  if_ne	mov	result1, #21
07e00     90 00 90 5D |  if_ne	jmp	#LR__0740
07e04     37 00 00 FF 
07e08     44 E4 05 F1 | 	add	objptr, ##28228
07e0c     F2 1E 02 FB | 	rdlong	local01, objptr
07e10     01 1E 06 F1 | 	add	local01, #1
07e14     F2 1E 62 FC | 	wrlong	local01, objptr
07e18     37 00 00 FF 
07e1c     44 E4 85 F1 | 	sub	objptr, ##28228
07e20     5C 1D B0 FD | 	call	#_expr
07e24     FD 1E 02 F6 | 	mov	local01, result1
07e28                 | ' err=expr() : if err>0 then return err
07e28     01 1E 16 F2 | 	cmp	local01, #1 wc
07e2c     0F FB 01 36 |  if_ae	mov	result1, local01
07e30     60 00 90 3D |  if_ae	jmp	#LR__0740
07e34                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
07e34     37 00 00 FF 
07e38     44 E4 05 F1 | 	add	objptr, ##28228
07e3c     F2 1E 02 FB | 	rdlong	local01, objptr
07e40     03 1E 66 F0 | 	shl	local01, #3
07e44     02 00 00 FF 
07e48     38 E4 85 F1 | 	sub	objptr, ##1080
07e4c     F2 1E 02 F1 | 	add	local01, objptr
07e50     04 1E 06 F1 | 	add	local01, #4
07e54     0F 1F 02 FB | 	rdlong	local01, local01
07e58     11 1E 0E F2 | 	cmp	local01, #17 wz
07e5c     35 00 00 FF 
07e60     0C E4 85 F1 | 	sub	objptr, ##27148
07e64     15 FA 05 56 |  if_ne	mov	result1, #21
07e68     28 00 90 5D |  if_ne	jmp	#LR__0740
07e6c     37 00 00 FF 
07e70     44 E4 05 F1 | 	add	objptr, ##28228
07e74     F2 1E 02 FB | 	rdlong	local01, objptr
07e78     01 1E 06 F1 | 	add	local01, #1
07e7c     F2 1E 62 FC | 	wrlong	local01, objptr
07e80     37 00 00 FF 
07e84     44 E4 85 F1 | 	sub	objptr, ##28228
07e88     F4 1C B0 FD | 	call	#_expr
07e8c                 | ' err=expr() : if err>0 then return err
07e8c     01 FA 15 F2 | 	cmp	result1, #1 wc
07e90                 | ' return 0
07e90     00 FA 05 C6 |  if_b	mov	result1, #0
07e94                 | LR__0740
07e94     A7 F0 03 F6 | 	mov	ptra, fp
07e98     B2 00 A0 FD | 	call	#popregs_
07e9c                 | _compile_fun_4p_ret
07e9c     2D 00 64 FD | 	ret
07ea0                 | 
07ea0                 | ' 
07ea0                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
07ea0                 | ' 
07ea0                 | ' function compile_fun_varp() as ulong,ulong 
07ea0                 | _compile_fun_varp
07ea0     03 4A 05 F6 | 	mov	COUNT_, #3
07ea4     A8 00 A0 FD | 	call	#pushregs_
07ea8     00 1E 06 F6 | 	mov	local01, #0
07eac                 | ' 
07eac                 | ' i=0 : err=0
07eac                 | ' if lparts(ct).token<>token_end then
07eac     37 00 00 FF 
07eb0     44 E4 05 F1 | 	add	objptr, ##28228
07eb4     F2 20 02 FB | 	rdlong	local02, objptr
07eb8     03 20 66 F0 | 	shl	local02, #3
07ebc     02 00 00 FF 
07ec0     38 E4 85 F1 | 	sub	objptr, ##1080
07ec4     F2 20 02 F1 | 	add	local02, objptr
07ec8     04 20 06 F1 | 	add	local02, #4
07ecc     10 21 02 FB | 	rdlong	local02, local02
07ed0     FE 21 0E F2 | 	cmp	local02, #510 wz
07ed4     35 00 00 FF 
07ed8     0C E4 85 F1 | 	sub	objptr, ##27148
07edc     88 00 90 AD |  if_e	jmp	#LR__0751
07ee0                 | '   do
07ee0                 | LR__0750
07ee0     9C 1C B0 FD | 	call	#_expr
07ee4     01 1E 06 F1 | 	add	local01, #1
07ee8                 | '     expr()
07ee8                 | '     i+=1
07ee8                 | '     if lparts(ct).token=token_comma then ct+=1
07ee8     37 00 00 FF 
07eec     44 E4 05 F1 | 	add	objptr, ##28228
07ef0     F2 20 02 FB | 	rdlong	local02, objptr
07ef4     03 20 66 F0 | 	shl	local02, #3
07ef8     02 00 00 FF 
07efc     38 E4 85 F1 | 	sub	objptr, ##1080
07f00     F2 20 02 F1 | 	add	local02, objptr
07f04     04 20 06 F1 | 	add	local02, #4
07f08     10 21 02 FB | 	rdlong	local02, local02
07f0c     11 20 0E F2 | 	cmp	local02, #17 wz
07f10     35 00 00 FF 
07f14     0C E4 85 F1 | 	sub	objptr, ##27148
07f18     37 00 00 AF 
07f1c     44 E4 05 A1 |  if_e	add	objptr, ##28228
07f20     F2 22 02 AB |  if_e	rdlong	local03, objptr
07f24     01 22 06 A1 |  if_e	add	local03, #1
07f28     F2 22 62 AC |  if_e	wrlong	local03, objptr
07f2c     37 00 00 AF 
07f30     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07f34                 | '     if lparts(ct).token=token_end then exit loop
07f34     37 00 00 FF 
07f38     44 E4 05 F1 | 	add	objptr, ##28228
07f3c     F2 20 02 FB | 	rdlong	local02, objptr
07f40     03 20 66 F0 | 	shl	local02, #3
07f44     02 00 00 FF 
07f48     38 E4 85 F1 | 	sub	objptr, ##1080
07f4c     F2 20 02 F1 | 	add	local02, objptr
07f50     04 20 06 F1 | 	add	local02, #4
07f54     10 21 02 FB | 	rdlong	local02, local02
07f58     FE 21 0E F2 | 	cmp	local02, #510 wz
07f5c     35 00 00 FF 
07f60     0C E4 85 F1 | 	sub	objptr, ##27148
07f64     78 FF 9F 5D |  if_ne	jmp	#LR__0750
07f68                 | LR__0751
07f68                 | ' return i,err
07f68     0F FB 01 F6 | 	mov	result1, local01
07f6c     00 FC 05 F6 | 	mov	result2, #0
07f70     A7 F0 03 F6 | 	mov	ptra, fp
07f74     B2 00 A0 FD | 	call	#popregs_
07f78                 | _compile_fun_varp_ret
07f78     2D 00 64 FD | 	ret
07f7c                 | 
07f7c                 | ' 
07f7c                 | ' '----- compile assign to an array element
07f7c                 | ' 
07f7c                 | ' function compile_array_assign() as ulong 
07f7c                 | _compile_array_assign
07f7c     0B 4A 05 F6 | 	mov	COUNT_, #11
07f80     A8 00 A0 FD | 	call	#pushregs_
07f84     00 24 06 F6 | 	mov	local04, #0
07f88     00 26 06 F6 | 	mov	local05, #0
07f8c     37 00 00 FF 
07f90     44 E4 05 F1 | 	add	objptr, ##28228
07f94     F2 28 02 FB | 	rdlong	local06, objptr
07f98     14 FB 01 F6 | 	mov	result1, local06
07f9c     01 FA 85 F1 | 	sub	result1, #1
07fa0     03 FA 65 F0 | 	shl	result1, #3
07fa4     02 00 00 FF 
07fa8     38 E4 85 F1 | 	sub	objptr, ##1080
07fac     F2 FA 01 F1 | 	add	result1, objptr
07fb0     FD 2A 02 FB | 	rdlong	local07, result1
07fb4                 | ' numpar=0 : err=0
07fb4                 | ' varname$=lparts(ct-1).part$
07fb4                 | ' if lparts(ct).token=token_lpar then
07fb4     03 28 66 F0 | 	shl	local06, #3
07fb8     F2 28 02 F1 | 	add	local06, objptr
07fbc     04 28 06 F1 | 	add	local06, #4
07fc0     14 29 02 FB | 	rdlong	local06, local06
07fc4     15 28 0E F2 | 	cmp	local06, #21 wz
07fc8     35 00 00 FF 
07fcc     0C E4 85 F1 | 	sub	objptr, ##27148
07fd0     F4 01 90 5D |  if_ne	jmp	#LR__0764
07fd4     37 00 00 FF 
07fd8     44 E4 05 F1 | 	add	objptr, ##28228
07fdc     F2 2C 02 FB | 	rdlong	local08, objptr
07fe0     01 2C 06 F1 | 	add	local08, #1
07fe4     F2 2C 62 FC | 	wrlong	local08, objptr
07fe8     37 00 00 FF 
07fec     44 E4 85 F1 | 	sub	objptr, ##28228
07ff0                 | '   ct+=1 											' omit this lpar, this is for expr list
07ff0                 | '   do
07ff0                 | LR__0760
07ff0     8C 1B B0 FD | 	call	#_expr
07ff4     37 00 00 FF 
07ff8     44 E4 05 F1 | 	add	objptr, ##28228
07ffc     F2 28 02 FB | 	rdlong	local06, objptr
08000     01 28 06 F1 | 	add	local06, #1
08004     F2 28 62 FC | 	wrlong	local06, objptr
08008     01 24 06 F1 | 	add	local04, #1
0800c     01 28 86 F1 | 	sub	local06, #1
08010     03 28 66 F0 | 	shl	local06, #3
08014     02 00 00 FF 
08018     38 E4 85 F1 | 	sub	objptr, ##1080
0801c     F2 28 02 F1 | 	add	local06, objptr
08020     04 28 06 F1 | 	add	local06, #4
08024     14 2D 02 FB | 	rdlong	local08, local06
08028     14 2C 0E F2 | 	cmp	local08, #20 wz
0802c     35 00 00 FF 
08030     0C E4 85 F1 | 	sub	objptr, ##27148
08034     34 00 90 AD |  if_e	jmp	#LR__0761
08038     37 00 00 FF 
0803c     44 E4 05 F1 | 	add	objptr, ##28228
08040     F2 2C 02 FB | 	rdlong	local08, objptr
08044     03 2C 66 F0 | 	shl	local08, #3
08048     02 00 00 FF 
0804c     38 E4 85 F1 | 	sub	objptr, ##1080
08050     F2 2C 02 F1 | 	add	local08, objptr
08054     04 2C 06 F1 | 	add	local08, #4
08058     16 2D 02 FB | 	rdlong	local08, local08
0805c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08060     35 00 00 FF 
08064     0C E4 85 F1 | 	sub	objptr, ##27148
08068     84 FF 9F 5D |  if_ne	jmp	#LR__0760
0806c                 | LR__0761
0806c     37 00 00 FF 
08070     44 E4 05 F1 | 	add	objptr, ##28228
08074     F2 2C 02 FB | 	rdlong	local08, objptr
08078     01 2C 06 F1 | 	add	local08, #1
0807c     F2 2C 62 FC | 	wrlong	local08, objptr
08080     37 00 00 FF 
08084     44 E4 85 F1 | 	sub	objptr, ##28228
08088     F4 1A B0 FD | 	call	#_expr
0808c     01 2E 66 F6 | 	neg	local09, #1
08090     00 30 06 F6 | 	mov	local10, #0
08094                 | '   ct+=1 : expr()
08094                 | '   j=-1 : i=0 
08094                 | '   do 
08094                 | LR__0762
08094                 | '     if variables(i).name=varname$ then j=i: exit loop
08094     18 29 02 F6 | 	mov	local06, local10
08098     04 28 66 F0 | 	shl	local06, #4
0809c     14 00 00 FF 
080a0     F8 E5 05 F1 | 	add	objptr, ##10744
080a4     F2 28 02 F1 | 	add	local06, objptr
080a8     14 13 02 FB | 	rdlong	arg01, local06
080ac     15 15 02 F6 | 	mov	arg02, local07
080b0     14 00 00 FF 
080b4     F8 E5 85 F1 | 	sub	objptr, ##10744
080b8     9C 87 B1 FD | 	call	#__system___string_cmp
080bc     00 FA 0D F2 | 	cmp	result1, #0 wz
080c0     18 2F 02 A6 |  if_e	mov	local09, local10
080c4     20 00 90 AD |  if_e	jmp	#LR__0763
080c8     01 30 06 F1 | 	add	local10, #1
080cc     35 00 00 FF 
080d0     08 E4 05 F1 | 	add	objptr, ##27144
080d4     F2 2C 02 FB | 	rdlong	local08, objptr
080d8     35 00 00 FF 
080dc     08 E4 85 F1 | 	sub	objptr, ##27144
080e0     16 31 5A F2 | 	cmps	local10, local08 wcz
080e4     AC FF 9F ED |  if_be	jmp	#LR__0762
080e8                 | LR__0763
080e8     17 1F 02 F6 | 	mov	local01, local09
080ec     12 21 02 F6 | 	mov	local02, local04
080f0     17 22 06 F6 | 	mov	local03, #23
080f4     0F 2D 02 F6 | 	mov	local08, local01
080f8     10 33 02 F6 | 	mov	local11, local02
080fc     11 2B 02 F6 | 	mov	local07, local03
08100     4A 00 00 FF 
08104     7C E4 05 F1 | 	add	objptr, ##38012
08108     F2 1E 02 FB | 	rdlong	local01, objptr
0810c     0F 2F 02 F6 | 	mov	local09, local01
08110     01 2E 66 F0 | 	shl	local09, #1
08114     0F 2F 02 F1 | 	add	local09, local01
08118     02 2E 66 F0 | 	shl	local09, #2
0811c     03 00 00 FF 
08120     00 E4 85 F1 | 	sub	objptr, ##1536
08124     F2 2E 02 F1 | 	add	local09, objptr
08128     17 2D 62 FC | 	wrlong	local08, local09
0812c     03 00 00 FF 
08130     00 E4 05 F1 | 	add	objptr, ##1536
08134     F2 1E 02 FB | 	rdlong	local01, objptr
08138     0F 2F 02 F6 | 	mov	local09, local01
0813c     01 2E 66 F0 | 	shl	local09, #1
08140     0F 2F 02 F1 | 	add	local09, local01
08144     02 2E 66 F0 | 	shl	local09, #2
08148     03 00 00 FF 
0814c     00 E4 85 F1 | 	sub	objptr, ##1536
08150     F2 2E 02 F1 | 	add	local09, objptr
08154     04 2E 06 F1 | 	add	local09, #4
08158     17 33 62 FC | 	wrlong	local11, local09
0815c     03 00 00 FF 
08160     00 E4 05 F1 | 	add	objptr, ##1536
08164     F2 32 02 FB | 	rdlong	local11, objptr
08168     19 1F 02 F6 | 	mov	local01, local11
0816c     01 1E 66 F0 | 	shl	local01, #1
08170     19 1F 02 F1 | 	add	local01, local11
08174     02 1E 66 F0 | 	shl	local01, #2
08178     03 00 00 FF 
0817c     00 E4 85 F1 | 	sub	objptr, ##1536
08180     F2 1E 02 F1 | 	add	local01, objptr
08184     08 1E 06 F1 | 	add	local01, #8
08188     0F 2B 62 FC | 	wrlong	local07, local01
0818c     03 00 00 FF 
08190     00 E4 05 F1 | 	add	objptr, ##1536
08194     F2 2C 02 FB | 	rdlong	local08, objptr
08198     01 2C 06 F1 | 	add	local08, #1
0819c     F2 2C 62 FC | 	wrlong	local08, objptr
081a0                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
081a0                 | '   if numpar>3 then err=45
081a0     04 24 16 F2 | 	cmp	local04, #4 wc
081a4     2D 26 06 36 |  if_ae	mov	local05, #45
081a8                 | '   if i>varnum then err=20
081a8     15 00 00 FF 
081ac     74 E4 85 F1 | 	sub	objptr, ##10868
081b0     F2 2C 02 FB | 	rdlong	local08, objptr
081b4     35 00 00 FF 
081b8     08 E4 85 F1 | 	sub	objptr, ##27144
081bc     16 31 5A F2 | 	cmps	local10, local08 wcz
081c0     14 26 06 16 |  if_a	mov	local05, #20
081c4     04 00 90 FD | 	jmp	#LR__0765
081c8                 | LR__0764
081c8     0E 26 06 F6 | 	mov	local05, #14
081cc                 | LR__0765
081cc                 | ' return err
081cc     13 FB 01 F6 | 	mov	result1, local05
081d0     A7 F0 03 F6 | 	mov	ptra, fp
081d4     B2 00 A0 FD | 	call	#popregs_
081d8                 | _compile_array_assign_ret
081d8     2D 00 64 FD | 	ret
081dc                 | 
081dc                 | ' 
081dc                 | ' '----- compile print command with its ";" and "," modifiers
081dc                 | ' 
081dc                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
081dc                 | _compile_print
081dc     0B 4A 05 F6 | 	mov	COUNT_, #11
081e0     A8 00 A0 FD | 	call	#pushregs_
081e4     00 1E 06 F6 | 	mov	local01, #0
081e8     1D 22 06 F6 | 	mov	local03, #29
081ec                 | ' t1.result.uresult=0 : t1.result_type=result_uint
081ec                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
081ec     37 00 00 FF 
081f0     44 E4 05 F1 | 	add	objptr, ##28228
081f4     F2 24 02 FB | 	rdlong	local04, objptr
081f8     03 24 66 F0 | 	shl	local04, #3
081fc     02 00 00 FF 
08200     38 E4 85 F1 | 	sub	objptr, ##1080
08204     F2 24 02 F1 | 	add	local04, objptr
08208     04 24 06 F1 | 	add	local04, #4
0820c     12 25 02 FB | 	rdlong	local04, local04
08210     FE 25 0E F2 | 	cmp	local04, #510 wz
08214     35 00 00 FF 
08218     0C E4 85 F1 | 	sub	objptr, ##27148
0821c     68 01 90 5D |  if_ne	jmp	#LR__0770
08220     20 22 06 F6 | 	mov	local03, #32
08224     0F 27 02 F6 | 	mov	local05, local01
08228     10 29 02 F6 | 	mov	local06, local02
0822c     11 2B 02 F6 | 	mov	local07, local03
08230     4A 00 00 FF 
08234     7C E4 05 F1 | 	add	objptr, ##38012
08238     F2 2C 02 FB | 	rdlong	local08, objptr
0823c     16 2F 02 F6 | 	mov	local09, local08
08240     01 2E 66 F0 | 	shl	local09, #1
08244     16 2F 02 F1 | 	add	local09, local08
08248     02 2E 66 F0 | 	shl	local09, #2
0824c     03 00 00 FF 
08250     00 E4 85 F1 | 	sub	objptr, ##1536
08254     F2 2E 02 F1 | 	add	local09, objptr
08258     17 27 62 FC | 	wrlong	local05, local09
0825c     03 00 00 FF 
08260     00 E4 05 F1 | 	add	objptr, ##1536
08264     F2 26 02 FB | 	rdlong	local05, objptr
08268     13 31 02 F6 | 	mov	local10, local05
0826c     01 30 66 F0 | 	shl	local10, #1
08270     13 31 02 F1 | 	add	local10, local05
08274     02 30 66 F0 | 	shl	local10, #2
08278     03 00 00 FF 
0827c     00 E4 85 F1 | 	sub	objptr, ##1536
08280     F2 30 02 F1 | 	add	local10, objptr
08284     04 30 06 F1 | 	add	local10, #4
08288     18 29 62 FC | 	wrlong	local06, local10
0828c     03 00 00 FF 
08290     00 E4 05 F1 | 	add	objptr, ##1536
08294     F2 26 02 FB | 	rdlong	local05, objptr
08298     13 33 02 F6 | 	mov	local11, local05
0829c     01 32 66 F0 | 	shl	local11, #1
082a0     13 33 02 F1 | 	add	local11, local05
082a4     02 32 66 F0 | 	shl	local11, #2
082a8     03 00 00 FF 
082ac     00 E4 85 F1 | 	sub	objptr, ##1536
082b0     F2 32 02 F1 | 	add	local11, objptr
082b4     08 32 06 F1 | 	add	local11, #8
082b8     19 2B 62 FC | 	wrlong	local07, local11
082bc     03 00 00 FF 
082c0     00 E4 05 F1 | 	add	objptr, ##1536
082c4     F2 26 02 FB | 	rdlong	local05, objptr
082c8     01 26 06 F1 | 	add	local05, #1
082cc     F2 26 62 FC | 	wrlong	local05, objptr
082d0     44 22 06 F6 | 	mov	local03, #68
082d4     0F 27 02 F6 | 	mov	local05, local01
082d8     10 29 02 F6 | 	mov	local06, local02
082dc     11 2B 02 F6 | 	mov	local07, local03
082e0     F2 2C 02 FB | 	rdlong	local08, objptr
082e4     16 2F 02 F6 | 	mov	local09, local08
082e8     01 2E 66 F0 | 	shl	local09, #1
082ec     16 2F 02 F1 | 	add	local09, local08
082f0     02 2E 66 F0 | 	shl	local09, #2
082f4     03 00 00 FF 
082f8     00 E4 85 F1 | 	sub	objptr, ##1536
082fc     F2 2E 02 F1 | 	add	local09, objptr
08300     17 27 62 FC | 	wrlong	local05, local09
08304     03 00 00 FF 
08308     00 E4 05 F1 | 	add	objptr, ##1536
0830c     F2 32 02 FB | 	rdlong	local11, objptr
08310     19 31 02 F6 | 	mov	local10, local11
08314     01 30 66 F0 | 	shl	local10, #1
08318     19 31 02 F1 | 	add	local10, local11
0831c     02 30 66 F0 | 	shl	local10, #2
08320     03 00 00 FF 
08324     00 E4 85 F1 | 	sub	objptr, ##1536
08328     F2 30 02 F1 | 	add	local10, objptr
0832c     04 30 06 F1 | 	add	local10, #4
08330     18 29 62 FC | 	wrlong	local06, local10
08334     03 00 00 FF 
08338     00 E4 05 F1 | 	add	objptr, ##1536
0833c     F2 30 02 FB | 	rdlong	local10, objptr
08340     18 33 02 F6 | 	mov	local11, local10
08344     01 32 66 F0 | 	shl	local11, #1
08348     18 33 02 F1 | 	add	local11, local10
0834c     02 32 66 F0 | 	shl	local11, #2
08350     03 00 00 FF 
08354     00 E4 85 F1 | 	sub	objptr, ##1536
08358     F2 32 02 F1 | 	add	local11, objptr
0835c     08 32 06 F1 | 	add	local11, #8
08360     19 2B 62 FC | 	wrlong	local07, local11
08364     03 00 00 FF 
08368     00 E4 05 F1 | 	add	objptr, ##1536
0836c     F2 26 02 FB | 	rdlong	local05, objptr
08370     01 26 06 F1 | 	add	local05, #1
08374     F2 26 62 FC | 	wrlong	local05, objptr
08378     4A 00 00 FF 
0837c     7C E4 85 F1 | 	sub	objptr, ##38012
08380     00 FA 05 F6 | 	mov	result1, #0
08384     20 05 90 FD | 	jmp	#LR__0777
08388                 | LR__0770
08388                 | ' do
08388                 | LR__0771
08388     F4 17 B0 FD | 	call	#_expr
0838c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0838c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0838c     37 00 00 FF 
08390     44 E4 05 F1 | 	add	objptr, ##28228
08394     F2 24 02 FB | 	rdlong	local04, objptr
08398     03 24 66 F0 | 	shl	local04, #3
0839c     02 00 00 FF 
083a0     38 E4 85 F1 | 	sub	objptr, ##1080
083a4     F2 24 02 F1 | 	add	local04, objptr
083a8     04 24 06 F1 | 	add	local04, #4
083ac     12 2D 02 FB | 	rdlong	local08, local04
083b0     11 2C 0E F2 | 	cmp	local08, #17 wz
083b4     35 00 00 FF 
083b8     0C E4 85 F1 | 	sub	objptr, ##27148
083bc     60 01 90 5D |  if_ne	jmp	#LR__0772
083c0     21 22 06 F6 | 	mov	local03, #33
083c4     0F 27 02 F6 | 	mov	local05, local01
083c8     10 29 02 F6 | 	mov	local06, local02
083cc     11 2B 02 F6 | 	mov	local07, local03
083d0     4A 00 00 FF 
083d4     7C E4 05 F1 | 	add	objptr, ##38012
083d8     F2 2C 02 FB | 	rdlong	local08, objptr
083dc     16 2F 02 F6 | 	mov	local09, local08
083e0     01 2E 66 F0 | 	shl	local09, #1
083e4     16 2F 02 F1 | 	add	local09, local08
083e8     02 2E 66 F0 | 	shl	local09, #2
083ec     03 00 00 FF 
083f0     00 E4 85 F1 | 	sub	objptr, ##1536
083f4     F2 2E 02 F1 | 	add	local09, objptr
083f8     17 27 62 FC | 	wrlong	local05, local09
083fc     03 00 00 FF 
08400     00 E4 05 F1 | 	add	objptr, ##1536
08404     F2 32 02 FB | 	rdlong	local11, objptr
08408     19 31 02 F6 | 	mov	local10, local11
0840c     01 30 66 F0 | 	shl	local10, #1
08410     19 31 02 F1 | 	add	local10, local11
08414     02 30 66 F0 | 	shl	local10, #2
08418     03 00 00 FF 
0841c     00 E4 85 F1 | 	sub	objptr, ##1536
08420     F2 30 02 F1 | 	add	local10, objptr
08424     04 30 06 F1 | 	add	local10, #4
08428     18 29 62 FC | 	wrlong	local06, local10
0842c     03 00 00 FF 
08430     00 E4 05 F1 | 	add	objptr, ##1536
08434     F2 26 02 FB | 	rdlong	local05, objptr
08438     13 33 02 F6 | 	mov	local11, local05
0843c     01 32 66 F0 | 	shl	local11, #1
08440     13 33 02 F1 | 	add	local11, local05
08444     02 32 66 F0 | 	shl	local11, #2
08448     03 00 00 FF 
0844c     00 E4 85 F1 | 	sub	objptr, ##1536
08450     F2 32 02 F1 | 	add	local11, objptr
08454     08 32 06 F1 | 	add	local11, #8
08458     19 2B 62 FC | 	wrlong	local07, local11
0845c     03 00 00 FF 
08460     00 E4 05 F1 | 	add	objptr, ##1536
08464     F2 26 02 FB | 	rdlong	local05, objptr
08468     01 26 06 F1 | 	add	local05, #1
0846c     F2 26 62 FC | 	wrlong	local05, objptr
08470     44 22 06 F6 | 	mov	local03, #68
08474     0F 27 02 F6 | 	mov	local05, local01
08478     10 29 02 F6 | 	mov	local06, local02
0847c     11 2B 02 F6 | 	mov	local07, local03
08480     F2 2C 02 FB | 	rdlong	local08, objptr
08484     16 2F 02 F6 | 	mov	local09, local08
08488     01 2E 66 F0 | 	shl	local09, #1
0848c     16 2F 02 F1 | 	add	local09, local08
08490     02 2E 66 F0 | 	shl	local09, #2
08494     03 00 00 FF 
08498     00 E4 85 F1 | 	sub	objptr, ##1536
0849c     F2 2E 02 F1 | 	add	local09, objptr
084a0     17 27 62 FC | 	wrlong	local05, local09
084a4     03 00 00 FF 
084a8     00 E4 05 F1 | 	add	objptr, ##1536
084ac     F2 32 02 FB | 	rdlong	local11, objptr
084b0     19 31 02 F6 | 	mov	local10, local11
084b4     01 30 66 F0 | 	shl	local10, #1
084b8     19 31 02 F1 | 	add	local10, local11
084bc     02 30 66 F0 | 	shl	local10, #2
084c0     03 00 00 FF 
084c4     00 E4 85 F1 | 	sub	objptr, ##1536
084c8     F2 30 02 F1 | 	add	local10, objptr
084cc     04 30 06 F1 | 	add	local10, #4
084d0     18 29 62 FC | 	wrlong	local06, local10
084d4     03 00 00 FF 
084d8     00 E4 05 F1 | 	add	objptr, ##1536
084dc     F2 30 02 FB | 	rdlong	local10, objptr
084e0     18 33 02 F6 | 	mov	local11, local10
084e4     01 32 66 F0 | 	shl	local11, #1
084e8     18 33 02 F1 | 	add	local11, local10
084ec     02 32 66 F0 | 	shl	local11, #2
084f0     03 00 00 FF 
084f4     00 E4 85 F1 | 	sub	objptr, ##1536
084f8     F2 32 02 F1 | 	add	local11, objptr
084fc     08 32 06 F1 | 	add	local11, #8
08500     19 2B 62 FC | 	wrlong	local07, local11
08504     03 00 00 FF 
08508     00 E4 05 F1 | 	add	objptr, ##1536
0850c     F2 26 02 FB | 	rdlong	local05, objptr
08510     01 26 06 F1 | 	add	local05, #1
08514     F2 26 62 FC | 	wrlong	local05, objptr
08518     4A 00 00 FF 
0851c     7C E4 85 F1 | 	sub	objptr, ##38012
08520                 | LR__0772
08520                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08520     37 00 00 FF 
08524     44 E4 05 F1 | 	add	objptr, ##28228
08528     F2 24 02 FB | 	rdlong	local04, objptr
0852c     03 24 66 F0 | 	shl	local04, #3
08530     02 00 00 FF 
08534     38 E4 85 F1 | 	sub	objptr, ##1080
08538     F2 24 02 F1 | 	add	local04, objptr
0853c     04 24 06 F1 | 	add	local04, #4
08540     12 2D 02 FB | 	rdlong	local08, local04
08544     12 2C 0E F2 | 	cmp	local08, #18 wz
08548     35 00 00 FF 
0854c     0C E4 85 F1 | 	sub	objptr, ##27148
08550     60 01 90 5D |  if_ne	jmp	#LR__0773
08554     22 22 06 F6 | 	mov	local03, #34
08558     0F 27 02 F6 | 	mov	local05, local01
0855c     10 29 02 F6 | 	mov	local06, local02
08560     11 2B 02 F6 | 	mov	local07, local03
08564     4A 00 00 FF 
08568     7C E4 05 F1 | 	add	objptr, ##38012
0856c     F2 2C 02 FB | 	rdlong	local08, objptr
08570     16 2F 02 F6 | 	mov	local09, local08
08574     01 2E 66 F0 | 	shl	local09, #1
08578     16 2F 02 F1 | 	add	local09, local08
0857c     02 2E 66 F0 | 	shl	local09, #2
08580     03 00 00 FF 
08584     00 E4 85 F1 | 	sub	objptr, ##1536
08588     F2 2E 02 F1 | 	add	local09, objptr
0858c     17 27 62 FC | 	wrlong	local05, local09
08590     03 00 00 FF 
08594     00 E4 05 F1 | 	add	objptr, ##1536
08598     F2 32 02 FB | 	rdlong	local11, objptr
0859c     19 31 02 F6 | 	mov	local10, local11
085a0     01 30 66 F0 | 	shl	local10, #1
085a4     19 31 02 F1 | 	add	local10, local11
085a8     02 30 66 F0 | 	shl	local10, #2
085ac     03 00 00 FF 
085b0     00 E4 85 F1 | 	sub	objptr, ##1536
085b4     F2 30 02 F1 | 	add	local10, objptr
085b8     04 30 06 F1 | 	add	local10, #4
085bc     18 29 62 FC | 	wrlong	local06, local10
085c0     03 00 00 FF 
085c4     00 E4 05 F1 | 	add	objptr, ##1536
085c8     F2 26 02 FB | 	rdlong	local05, objptr
085cc     13 33 02 F6 | 	mov	local11, local05
085d0     01 32 66 F0 | 	shl	local11, #1
085d4     13 33 02 F1 | 	add	local11, local05
085d8     02 32 66 F0 | 	shl	local11, #2
085dc     03 00 00 FF 
085e0     00 E4 85 F1 | 	sub	objptr, ##1536
085e4     F2 32 02 F1 | 	add	local11, objptr
085e8     08 32 06 F1 | 	add	local11, #8
085ec     19 2B 62 FC | 	wrlong	local07, local11
085f0     03 00 00 FF 
085f4     00 E4 05 F1 | 	add	objptr, ##1536
085f8     F2 26 02 FB | 	rdlong	local05, objptr
085fc     01 26 06 F1 | 	add	local05, #1
08600     F2 26 62 FC | 	wrlong	local05, objptr
08604     44 22 06 F6 | 	mov	local03, #68
08608     0F 27 02 F6 | 	mov	local05, local01
0860c     10 29 02 F6 | 	mov	local06, local02
08610     11 2B 02 F6 | 	mov	local07, local03
08614     F2 2C 02 FB | 	rdlong	local08, objptr
08618     16 2F 02 F6 | 	mov	local09, local08
0861c     01 2E 66 F0 | 	shl	local09, #1
08620     16 2F 02 F1 | 	add	local09, local08
08624     02 2E 66 F0 | 	shl	local09, #2
08628     03 00 00 FF 
0862c     00 E4 85 F1 | 	sub	objptr, ##1536
08630     F2 2E 02 F1 | 	add	local09, objptr
08634     17 27 62 FC | 	wrlong	local05, local09
08638     03 00 00 FF 
0863c     00 E4 05 F1 | 	add	objptr, ##1536
08640     F2 32 02 FB | 	rdlong	local11, objptr
08644     19 31 02 F6 | 	mov	local10, local11
08648     01 30 66 F0 | 	shl	local10, #1
0864c     19 31 02 F1 | 	add	local10, local11
08650     02 30 66 F0 | 	shl	local10, #2
08654     03 00 00 FF 
08658     00 E4 85 F1 | 	sub	objptr, ##1536
0865c     F2 30 02 F1 | 	add	local10, objptr
08660     04 30 06 F1 | 	add	local10, #4
08664     18 29 62 FC | 	wrlong	local06, local10
08668     03 00 00 FF 
0866c     00 E4 05 F1 | 	add	objptr, ##1536
08670     F2 30 02 FB | 	rdlong	local10, objptr
08674     18 33 02 F6 | 	mov	local11, local10
08678     01 32 66 F0 | 	shl	local11, #1
0867c     18 33 02 F1 | 	add	local11, local10
08680     02 32 66 F0 | 	shl	local11, #2
08684     03 00 00 FF 
08688     00 E4 85 F1 | 	sub	objptr, ##1536
0868c     F2 32 02 F1 | 	add	local11, objptr
08690     08 32 06 F1 | 	add	local11, #8
08694     19 2B 62 FC | 	wrlong	local07, local11
08698     03 00 00 FF 
0869c     00 E4 05 F1 | 	add	objptr, ##1536
086a0     F2 26 02 FB | 	rdlong	local05, objptr
086a4     01 26 06 F1 | 	add	local05, #1
086a8     F2 26 62 FC | 	wrlong	local05, objptr
086ac     4A 00 00 FF 
086b0     7C E4 85 F1 | 	sub	objptr, ##38012
086b4                 | LR__0773
086b4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
086b4     37 00 00 FF 
086b8     44 E4 05 F1 | 	add	objptr, ##28228
086bc     F2 24 02 FB | 	rdlong	local04, objptr
086c0     03 24 66 F0 | 	shl	local04, #3
086c4     02 00 00 FF 
086c8     38 E4 85 F1 | 	sub	objptr, ##1080
086cc     F2 24 02 F1 | 	add	local04, objptr
086d0     04 24 06 F1 | 	add	local04, #4
086d4     12 2D 02 FB | 	rdlong	local08, local04
086d8     FE 2D 0E F2 | 	cmp	local08, #510 wz
086dc     35 00 00 FF 
086e0     0C E4 85 F1 | 	sub	objptr, ##27148
086e4     B8 00 90 5D |  if_ne	jmp	#LR__0774
086e8     44 22 06 F6 | 	mov	local03, #68
086ec     0F 27 02 F6 | 	mov	local05, local01
086f0     10 29 02 F6 | 	mov	local06, local02
086f4     11 2B 02 F6 | 	mov	local07, local03
086f8     4A 00 00 FF 
086fc     7C E4 05 F1 | 	add	objptr, ##38012
08700     F2 2C 02 FB | 	rdlong	local08, objptr
08704     16 2F 02 F6 | 	mov	local09, local08
08708     01 2E 66 F0 | 	shl	local09, #1
0870c     16 2F 02 F1 | 	add	local09, local08
08710     02 2E 66 F0 | 	shl	local09, #2
08714     03 00 00 FF 
08718     00 E4 85 F1 | 	sub	objptr, ##1536
0871c     F2 2E 02 F1 | 	add	local09, objptr
08720     17 27 62 FC | 	wrlong	local05, local09
08724     03 00 00 FF 
08728     00 E4 05 F1 | 	add	objptr, ##1536
0872c     F2 32 02 FB | 	rdlong	local11, objptr
08730     19 31 02 F6 | 	mov	local10, local11
08734     01 30 66 F0 | 	shl	local10, #1
08738     19 31 02 F1 | 	add	local10, local11
0873c     02 30 66 F0 | 	shl	local10, #2
08740     03 00 00 FF 
08744     00 E4 85 F1 | 	sub	objptr, ##1536
08748     F2 30 02 F1 | 	add	local10, objptr
0874c     04 30 06 F1 | 	add	local10, #4
08750     18 29 62 FC | 	wrlong	local06, local10
08754     03 00 00 FF 
08758     00 E4 05 F1 | 	add	objptr, ##1536
0875c     F2 30 02 FB | 	rdlong	local10, objptr
08760     18 33 02 F6 | 	mov	local11, local10
08764     01 32 66 F0 | 	shl	local11, #1
08768     18 33 02 F1 | 	add	local11, local10
0876c     02 32 66 F0 | 	shl	local11, #2
08770     03 00 00 FF 
08774     00 E4 85 F1 | 	sub	objptr, ##1536
08778     F2 32 02 F1 | 	add	local11, objptr
0877c     08 32 06 F1 | 	add	local11, #8
08780     19 2B 62 FC | 	wrlong	local07, local11
08784     03 00 00 FF 
08788     00 E4 05 F1 | 	add	objptr, ##1536
0878c     F2 26 02 FB | 	rdlong	local05, objptr
08790     01 26 06 F1 | 	add	local05, #1
08794     F2 26 62 FC | 	wrlong	local05, objptr
08798     4A 00 00 FF 
0879c     7C E4 85 F1 | 	sub	objptr, ##38012
087a0                 | LR__0774
087a0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
087a0     37 00 00 FF 
087a4     44 E4 05 F1 | 	add	objptr, ##28228
087a8     F2 24 02 FB | 	rdlong	local04, objptr
087ac     03 24 66 F0 | 	shl	local04, #3
087b0     02 00 00 FF 
087b4     38 E4 85 F1 | 	sub	objptr, ##1080
087b8     F2 24 02 F1 | 	add	local04, objptr
087bc     04 24 06 F1 | 	add	local04, #4
087c0     12 2D 02 FB | 	rdlong	local08, local04
087c4     11 2C 0E F2 | 	cmp	local08, #17 wz
087c8     35 00 00 FF 
087cc     0C E4 85 F1 | 	sub	objptr, ##27148
087d0     6C 00 90 AD |  if_e	jmp	#LR__0775
087d4     37 00 00 FF 
087d8     44 E4 05 F1 | 	add	objptr, ##28228
087dc     F2 2C 02 FB | 	rdlong	local08, objptr
087e0     03 2C 66 F0 | 	shl	local08, #3
087e4     02 00 00 FF 
087e8     38 E4 85 F1 | 	sub	objptr, ##1080
087ec     F2 2C 02 F1 | 	add	local08, objptr
087f0     04 2C 06 F1 | 	add	local08, #4
087f4     16 2D 02 FB | 	rdlong	local08, local08
087f8     12 2C 0E F2 | 	cmp	local08, #18 wz
087fc     35 00 00 FF 
08800     0C E4 85 F1 | 	sub	objptr, ##27148
08804     38 00 90 AD |  if_e	jmp	#LR__0775
08808     37 00 00 FF 
0880c     44 E4 05 F1 | 	add	objptr, ##28228
08810     F2 32 02 FB | 	rdlong	local11, objptr
08814     03 32 66 F0 | 	shl	local11, #3
08818     02 00 00 FF 
0881c     38 E4 85 F1 | 	sub	objptr, ##1080
08820     F2 32 02 F1 | 	add	local11, objptr
08824     04 32 06 F1 | 	add	local11, #4
08828     19 33 02 FB | 	rdlong	local11, local11
0882c     FE 33 0E F2 | 	cmp	local11, #510 wz
08830     35 00 00 FF 
08834     0C E4 85 F1 | 	sub	objptr, ##27148
08838     16 FA 05 56 |  if_ne	mov	result1, #22
0883c     68 00 90 5D |  if_ne	jmp	#LR__0777
08840                 | LR__0775
08840     37 00 00 FF 
08844     44 E4 05 F1 | 	add	objptr, ##28228
08848     F2 24 02 FB | 	rdlong	local04, objptr
0884c     01 24 06 F1 | 	add	local04, #1
08850     F2 24 62 FC | 	wrlong	local04, objptr
08854     03 24 66 F0 | 	shl	local04, #3
08858     02 00 00 FF 
0885c     38 E4 85 F1 | 	sub	objptr, ##1080
08860     F2 24 02 F1 | 	add	local04, objptr
08864     04 24 06 F1 | 	add	local04, #4
08868     12 2D 02 FB | 	rdlong	local08, local04
0886c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08870     35 00 00 FF 
08874     0C E4 85 F1 | 	sub	objptr, ##27148
08878     28 00 90 AD |  if_e	jmp	#LR__0776
0887c     37 00 00 FF 
08880     44 E4 05 F1 | 	add	objptr, ##28228
08884     F2 32 02 FB | 	rdlong	local11, objptr
08888     0E 00 00 FF 
0888c     1C E4 05 F1 | 	add	objptr, ##7196
08890     F2 30 02 FB | 	rdlong	local10, objptr
08894     45 00 00 FF 
08898     60 E4 85 F1 | 	sub	objptr, ##35424
0889c     18 33 52 F2 | 	cmps	local11, local10 wc
088a0     E4 FA 9F CD |  if_b	jmp	#LR__0771
088a4                 | LR__0776
088a4                 | ' return 0
088a4     00 FA 05 F6 | 	mov	result1, #0
088a8                 | LR__0777
088a8     A7 F0 03 F6 | 	mov	ptra, fp
088ac     B2 00 A0 FD | 	call	#popregs_
088b0                 | _compile_print_ret
088b0     2D 00 64 FD | 	ret
088b4                 | 
088b4                 | ' 
088b4                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
088b4                 | ' 
088b4                 | ' function compile_if(aline as ulong) as ulong  
088b4                 | _compile_if
088b4     09 4A 05 F6 | 	mov	COUNT_, #9
088b8     A8 00 A0 FD | 	call	#pushregs_
088bc                 | _compile_if_enter
088bc     09 25 02 F6 | 	mov	local04, arg01
088c0                 | ' return expr()
088c0     BC 12 B0 FD | 	call	#_expr
088c4     37 00 00 FF 
088c8     44 E4 05 F1 | 	add	objptr, ##28228
088cc     F2 14 02 FB | 	rdlong	arg02, objptr
088d0     0A 27 02 F6 | 	mov	local05, arg02
088d4     03 26 66 F0 | 	shl	local05, #3
088d8     02 00 00 FF 
088dc     38 E4 85 F1 | 	sub	objptr, ##1080
088e0     F2 26 02 F1 | 	add	local05, objptr
088e4     04 26 06 F1 | 	add	local05, #4
088e8     13 27 02 FB | 	rdlong	local05, local05
088ec     01 14 06 F1 | 	add	arg02, #1
088f0     02 00 00 FF 
088f4     38 E4 05 F1 | 	add	objptr, ##1080
088f8     F2 14 62 FC | 	wrlong	arg02, objptr
088fc     37 00 00 FF 
08900     44 E4 85 F1 | 	sub	objptr, ##28228
08904                 | ' 
08904                 | ' err=compile_fun_1p()
08904                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
08904     5B 26 0E F2 | 	cmp	local05, #91 wz
08908     34 FA 05 56 |  if_ne	mov	result1, #52
0890c     20 01 90 5D |  if_ne	jmp	#LR__0782
08910     58 22 06 F6 | 	mov	local03, #88
08914     0F 29 02 F6 | 	mov	local06, local01
08918     10 2B 02 F6 | 	mov	local07, local02
0891c     11 15 02 F6 | 	mov	arg02, local03
08920     4A 00 00 FF 
08924     7C E4 05 F1 | 	add	objptr, ##38012
08928     F2 12 02 FB | 	rdlong	arg01, objptr
0892c     09 2D 02 F6 | 	mov	local08, arg01
08930     01 2C 66 F0 | 	shl	local08, #1
08934     09 2D 02 F1 | 	add	local08, arg01
08938     02 2C 66 F0 | 	shl	local08, #2
0893c     03 00 00 FF 
08940     00 E4 85 F1 | 	sub	objptr, ##1536
08944     F2 2C 02 F1 | 	add	local08, objptr
08948     16 29 62 FC | 	wrlong	local06, local08
0894c     03 00 00 FF 
08950     00 E4 05 F1 | 	add	objptr, ##1536
08954     F2 28 02 FB | 	rdlong	local06, objptr
08958     14 13 02 F6 | 	mov	arg01, local06
0895c     01 12 66 F0 | 	shl	arg01, #1
08960     14 13 02 F1 | 	add	arg01, local06
08964     02 12 66 F0 | 	shl	arg01, #2
08968     03 00 00 FF 
0896c     00 E4 85 F1 | 	sub	objptr, ##1536
08970     F2 12 02 F1 | 	add	arg01, objptr
08974     04 12 06 F1 | 	add	arg01, #4
08978     09 2B 62 FC | 	wrlong	local07, arg01
0897c     03 00 00 FF 
08980     00 E4 05 F1 | 	add	objptr, ##1536
08984     F2 28 02 FB | 	rdlong	local06, objptr
08988     14 13 02 F6 | 	mov	arg01, local06
0898c     01 12 66 F0 | 	shl	arg01, #1
08990     14 13 02 F1 | 	add	arg01, local06
08994     02 12 66 F0 | 	shl	arg01, #2
08998     03 00 00 FF 
0899c     00 E4 85 F1 | 	sub	objptr, ##1536
089a0     F2 12 02 F1 | 	add	arg01, objptr
089a4     08 12 06 F1 | 	add	arg01, #8
089a8     09 15 62 FC | 	wrlong	arg02, arg01
089ac     03 00 00 FF 
089b0     00 E4 05 F1 | 	add	objptr, ##1536
089b4     F2 28 02 FB | 	rdlong	local06, objptr
089b8     01 28 06 F1 | 	add	local06, #1
089bc     F2 28 62 FC | 	wrlong	local06, objptr
089c0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
089c0                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
089c0     13 00 00 FF 
089c4     38 E4 85 F1 | 	sub	objptr, ##9784
089c8     F2 14 02 FB | 	rdlong	arg02, objptr
089cc     01 14 06 F1 | 	add	arg02, #1
089d0     03 14 66 F0 | 	shl	arg02, #3
089d4     02 00 00 FF 
089d8     38 E4 85 F1 | 	sub	objptr, ##1080
089dc     F2 14 02 F1 | 	add	arg02, objptr
089e0     0A 13 02 FB | 	rdlong	arg01, arg02
089e4     35 00 00 FF 
089e8     0C E4 85 F1 | 	sub	objptr, ##27148
089ec                 | ' 
089ec                 | ' select case s
089ec     81 01 00 FF 
089f0     7E 14 06 F6 | 	mov	arg02, ##@LR__5143
089f4     60 7E B1 FD | 	call	#__system___string_cmp
089f8     00 FA 0D F2 | 	cmp	result1, #0 wz
089fc     1B FA 05 A6 |  if_e	mov	result1, #27
08a00     00 FA 05 56 |  if_ne	mov	result1, #0
08a04     00 FA 0D F2 | 	cmp	result1, #0 wz
08a08     10 00 90 AD |  if_e	jmp	#LR__0780
08a0c     05 12 06 F6 | 	mov	arg01, #5
08a10     88 EC BF FD | 	call	#_compile_immediate_assign
08a14     FD 2E 02 F6 | 	mov	local09, result1
08a18     10 00 90 FD | 	jmp	#LR__0781
08a1c                 | LR__0780
08a1c     05 12 06 F6 | 	mov	arg01, #5
08a20     12 15 02 F6 | 	mov	arg02, local04
08a24     74 E3 BF FD | 	call	#_compile_immediate
08a28     FD 2E 02 F6 | 	mov	local09, result1
08a2c                 | LR__0781
08a2c                 | ' return err
08a2c     17 FB 01 F6 | 	mov	result1, local09
08a30                 | LR__0782
08a30     A7 F0 03 F6 | 	mov	ptra, fp
08a34     B2 00 A0 FD | 	call	#popregs_
08a38                 | _compile_if_ret
08a38     2D 00 64 FD | 	ret
08a3c                 | 
08a3c                 | ' 
08a3c                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08a3c                 | ' 
08a3c                 | ' function compile_else(aline as ulong) as ulong  
08a3c                 | _compile_else
08a3c     07 4A 05 F6 | 	mov	COUNT_, #7
08a40     A8 00 A0 FD | 	call	#pushregs_
08a44                 | _compile_else_enter
08a44     09 25 02 F6 | 	mov	local04, arg01
08a48     5A 22 06 F6 | 	mov	local03, #90
08a4c     0F 27 02 F6 | 	mov	local05, local01
08a50     10 29 02 F6 | 	mov	local06, local02
08a54     11 1F 02 F6 | 	mov	local01, local03
08a58     4A 00 00 FF 
08a5c     7C E4 05 F1 | 	add	objptr, ##38012
08a60     F2 14 02 FB | 	rdlong	arg02, objptr
08a64     0A 13 02 F6 | 	mov	arg01, arg02
08a68     01 12 66 F0 | 	shl	arg01, #1
08a6c     0A 13 02 F1 | 	add	arg01, arg02
08a70     02 12 66 F0 | 	shl	arg01, #2
08a74     03 00 00 FF 
08a78     00 E4 85 F1 | 	sub	objptr, ##1536
08a7c     F2 12 02 F1 | 	add	arg01, objptr
08a80     09 27 62 FC | 	wrlong	local05, arg01
08a84     03 00 00 FF 
08a88     00 E4 05 F1 | 	add	objptr, ##1536
08a8c     F2 26 02 FB | 	rdlong	local05, objptr
08a90     13 15 02 F6 | 	mov	arg02, local05
08a94     01 14 66 F0 | 	shl	arg02, #1
08a98     13 15 02 F1 | 	add	arg02, local05
08a9c     02 14 66 F0 | 	shl	arg02, #2
08aa0     03 00 00 FF 
08aa4     00 E4 85 F1 | 	sub	objptr, ##1536
08aa8     F2 14 02 F1 | 	add	arg02, objptr
08aac     04 14 06 F1 | 	add	arg02, #4
08ab0     0A 29 62 FC | 	wrlong	local06, arg02
08ab4     03 00 00 FF 
08ab8     00 E4 05 F1 | 	add	objptr, ##1536
08abc     F2 28 02 FB | 	rdlong	local06, objptr
08ac0     14 27 02 F6 | 	mov	local05, local06
08ac4     01 26 66 F0 | 	shl	local05, #1
08ac8     14 27 02 F1 | 	add	local05, local06
08acc     02 26 66 F0 | 	shl	local05, #2
08ad0     03 00 00 FF 
08ad4     00 E4 85 F1 | 	sub	objptr, ##1536
08ad8     F2 26 02 F1 | 	add	local05, objptr
08adc     08 26 06 F1 | 	add	local05, #8
08ae0     13 1F 62 FC | 	wrlong	local01, local05
08ae4     03 00 00 FF 
08ae8     00 E4 05 F1 | 	add	objptr, ##1536
08aec     F2 26 02 FB | 	rdlong	local05, objptr
08af0     01 26 06 F1 | 	add	local05, #1
08af4     F2 26 62 FC | 	wrlong	local05, objptr
08af8                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08af8                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08af8     13 00 00 FF 
08afc     38 E4 85 F1 | 	sub	objptr, ##9784
08b00     F2 28 02 FB | 	rdlong	local06, objptr
08b04     01 28 06 F1 | 	add	local06, #1
08b08     03 28 66 F0 | 	shl	local06, #3
08b0c     02 00 00 FF 
08b10     38 E4 85 F1 | 	sub	objptr, ##1080
08b14     F2 28 02 F1 | 	add	local06, objptr
08b18     14 13 02 FB | 	rdlong	arg01, local06
08b1c     35 00 00 FF 
08b20     0C E4 85 F1 | 	sub	objptr, ##27148
08b24                 | ' 
08b24                 | ' select case s
08b24     81 01 00 FF 
08b28     7E 14 06 F6 | 	mov	arg02, ##@LR__5143
08b2c     28 7D B1 FD | 	call	#__system___string_cmp
08b30     00 FA 0D F2 | 	cmp	result1, #0 wz
08b34     1B FA 05 A6 |  if_e	mov	result1, #27
08b38     00 FA 05 56 |  if_ne	mov	result1, #0
08b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
08b40     10 00 90 AD |  if_e	jmp	#LR__0790
08b44     05 12 06 F6 | 	mov	arg01, #5
08b48     50 EB BF FD | 	call	#_compile_immediate_assign
08b4c     FD 2A 02 F6 | 	mov	local07, result1
08b50     10 00 90 FD | 	jmp	#LR__0791
08b54                 | LR__0790
08b54     05 12 06 F6 | 	mov	arg01, #5
08b58     12 15 02 F6 | 	mov	arg02, local04
08b5c     3C E2 BF FD | 	call	#_compile_immediate
08b60     FD 2A 02 F6 | 	mov	local07, result1
08b64                 | LR__0791
08b64                 | ' return err
08b64     15 FB 01 F6 | 	mov	result1, local07
08b68     A7 F0 03 F6 | 	mov	ptra, fp
08b6c     B2 00 A0 FD | 	call	#popregs_
08b70                 | _compile_else_ret
08b70     2D 00 64 FD | 	ret
08b74                 | 
08b74                 | ' 
08b74                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
08b74                 | ' 
08b74                 | ' function compile_dim() as ulong  
08b74                 | _compile_dim
08b74     11 4A 05 F6 | 	mov	COUNT_, #17
08b78     A8 00 A0 FD | 	call	#pushregs_
08b7c     01 1E 06 F6 | 	mov	local01, #1
08b80     01 20 06 F6 | 	mov	local02, #1
08b84     01 22 06 F6 | 	mov	local03, #1
08b88                 | ' 
08b88                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08b88                 | ' if isname(lparts(ct).part$) then 
08b88     37 00 00 FF 
08b8c     44 E4 05 F1 | 	add	objptr, ##28228
08b90     F2 18 02 FB | 	rdlong	arg04, objptr
08b94     03 18 66 F0 | 	shl	arg04, #3
08b98     02 00 00 FF 
08b9c     38 E4 85 F1 | 	sub	objptr, ##1080
08ba0     F2 18 02 F1 | 	add	arg04, objptr
08ba4     0C 13 02 FB | 	rdlong	arg01, arg04
08ba8     35 00 00 FF 
08bac     0C E4 85 F1 | 	sub	objptr, ##27148
08bb0     40 D0 BF FD | 	call	#_isname
08bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
08bb8     80 05 90 AD |  if_e	jmp	#LR__0823
08bbc     37 00 00 FF 
08bc0     44 E4 05 F1 | 	add	objptr, ##28228
08bc4     F2 24 02 FB | 	rdlong	local04, objptr
08bc8     03 24 66 F0 | 	shl	local04, #3
08bcc     02 00 00 FF 
08bd0     38 E4 85 F1 | 	sub	objptr, ##1080
08bd4     F2 24 02 F1 | 	add	local04, objptr
08bd8     12 27 02 FB | 	rdlong	local05, local04
08bdc     01 28 66 F6 | 	neg	local06, #1
08be0                 | '   varname2$=lparts(ct).part$ 
08be0                 | '   j=-1
08be0                 | '   if varnum>0 then
08be0     04 E4 85 F1 | 	sub	objptr, #4
08be4     F2 2A 02 FB | 	rdlong	local07, objptr
08be8     35 00 00 FF 
08bec     08 E4 85 F1 | 	sub	objptr, ##27144
08bf0     01 2A 56 F2 | 	cmps	local07, #1 wc
08bf4     58 00 90 CD |  if_b	jmp	#LR__0802
08bf8                 | '     for i=0 to varnum-1
08bf8     00 2C 06 F6 | 	mov	local08, #0
08bfc     35 00 00 FF 
08c00     08 E4 05 F1 | 	add	objptr, ##27144
08c04     F2 2E 02 FB | 	rdlong	local09, objptr
08c08     35 00 00 FF 
08c0c     08 E4 85 F1 | 	sub	objptr, ##27144
08c10                 | LR__0800
08c10     17 2D 52 F2 | 	cmps	local08, local09 wc
08c14     38 00 90 3D |  if_ae	jmp	#LR__0801
08c18                 | '       if variables(i).name=varname2$ then j=i : exit
08c18     16 25 02 F6 | 	mov	local04, local08
08c1c     04 24 66 F0 | 	shl	local04, #4
08c20     14 00 00 FF 
08c24     F8 E5 05 F1 | 	add	objptr, ##10744
08c28     F2 24 02 F1 | 	add	local04, objptr
08c2c     12 13 02 FB | 	rdlong	arg01, local04
08c30     13 15 02 F6 | 	mov	arg02, local05
08c34     14 00 00 FF 
08c38     F8 E5 85 F1 | 	sub	objptr, ##10744
08c3c     18 7C B1 FD | 	call	#__system___string_cmp
08c40     00 FA 0D F2 | 	cmp	result1, #0 wz
08c44     16 29 02 A6 |  if_e	mov	local06, local08
08c48     01 2C 06 51 |  if_ne	add	local08, #1
08c4c     C0 FF 9F 5D |  if_ne	jmp	#LR__0800
08c50                 | LR__0801
08c50                 | LR__0802
08c50                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08c50     FF FF 7F FF 
08c54     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08c58     35 00 00 AF 
08c5c     08 E4 05 A1 |  if_e	add	objptr, ##27144
08c60     F2 28 02 AB |  if_e	rdlong	local06, objptr
08c64     35 00 00 AF 
08c68     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08c6c     78 00 90 AD |  if_e	jmp	#LR__0803
08c70     00 12 06 F6 | 	mov	arg01, #0
08c74     1C D6 B1 FD | 	call	#__system___getiolock_0541
08c78     FD 12 02 F6 | 	mov	arg01, result1
08c7c     B0 7B B1 FD | 	call	#__system___lockmem
08c80     83 01 00 FF 
08c84     90 14 06 F6 | 	mov	arg02, ##@LR__5376
08c88     00 12 06 F6 | 	mov	arg01, #0
08c8c     00 16 06 F6 | 	mov	arg03, #0
08c90     90 88 B1 FD | 	call	#__system___basic_print_string
08c94     51 00 00 FF 
08c98     C4 E5 05 F1 | 	add	objptr, ##41924
08c9c     F2 14 02 FB | 	rdlong	arg02, objptr
08ca0     51 00 00 FF 
08ca4     C4 E5 85 F1 | 	sub	objptr, ##41924
08ca8     00 12 06 F6 | 	mov	arg01, #0
08cac     00 16 06 F6 | 	mov	arg03, #0
08cb0     0A 18 06 F6 | 	mov	arg04, #10
08cb4     F0 88 B1 FD | 	call	#__system___basic_print_unsigned
08cb8     83 01 00 FF 
08cbc     9E 14 06 F6 | 	mov	arg02, ##@LR__5377
08cc0     00 12 06 F6 | 	mov	arg01, #0
08cc4     00 16 06 F6 | 	mov	arg03, #0
08cc8     58 88 B1 FD | 	call	#__system___basic_print_string
08ccc     00 12 06 F6 | 	mov	arg01, #0
08cd0     0A 14 06 F6 | 	mov	arg02, #10
08cd4     00 16 06 F6 | 	mov	arg03, #0
08cd8     F0 87 B1 FD | 	call	#__system___basic_print_char
08cdc     00 12 06 F6 | 	mov	arg01, #0
08ce0     B0 D5 B1 FD | 	call	#__system___getiolock_0541
08ce4     FD 00 68 FC | 	wrlong	#0, result1
08ce8                 | LR__0803
08ce8                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
08ce8     37 00 00 FF 
08cec     44 E4 05 F1 | 	add	objptr, ##28228
08cf0     F2 14 02 FB | 	rdlong	arg02, objptr
08cf4     01 14 06 F1 | 	add	arg02, #1
08cf8     03 14 66 F0 | 	shl	arg02, #3
08cfc     02 00 00 FF 
08d00     38 E4 85 F1 | 	sub	objptr, ##1080
08d04     F2 14 02 F1 | 	add	arg02, objptr
08d08     0A 13 02 FB | 	rdlong	arg01, arg02
08d0c     83 01 00 FF 
08d10     BF 14 06 F6 | 	mov	arg02, ##@LR__5378
08d14     35 00 00 FF 
08d18     0C E4 85 F1 | 	sub	objptr, ##27148
08d1c     38 7B B1 FD | 	call	#__system___string_cmp
08d20     00 FA 0D F2 | 	cmp	result1, #0 wz
08d24     44 00 90 AD |  if_e	jmp	#LR__0804
08d28     37 00 00 FF 
08d2c     44 E4 05 F1 | 	add	objptr, ##28228
08d30     F2 2E 02 FB | 	rdlong	local09, objptr
08d34     01 2E 06 F1 | 	add	local09, #1
08d38     03 2E 66 F0 | 	shl	local09, #3
08d3c     02 00 00 FF 
08d40     38 E4 85 F1 | 	sub	objptr, ##1080
08d44     F2 2E 02 F1 | 	add	local09, objptr
08d48     17 13 02 FB | 	rdlong	arg01, local09
08d4c     83 01 00 FF 
08d50     C1 14 06 F6 | 	mov	arg02, ##@LR__5379
08d54     35 00 00 FF 
08d58     0C E4 85 F1 | 	sub	objptr, ##27148
08d5c     F8 7A B1 FD | 	call	#__system___string_cmp
08d60     00 FA 0D F2 | 	cmp	result1, #0 wz
08d64     2B FA 05 56 |  if_ne	mov	result1, #43
08d68     D8 04 90 5D |  if_ne	jmp	#LR__0825
08d6c                 | LR__0804
08d6c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
08d6c     37 00 00 FF 
08d70     44 E4 05 F1 | 	add	objptr, ##28228
08d74     F2 14 02 FB | 	rdlong	arg02, objptr
08d78     01 14 06 F1 | 	add	arg02, #1
08d7c     03 14 66 F0 | 	shl	arg02, #3
08d80     02 00 00 FF 
08d84     38 E4 85 F1 | 	sub	objptr, ##1080
08d88     F2 14 02 F1 | 	add	arg02, objptr
08d8c     0A 13 02 FB | 	rdlong	arg01, arg02
08d90     83 01 00 FF 
08d94     C4 14 06 F6 | 	mov	arg02, ##@LR__5380
08d98     35 00 00 FF 
08d9c     0C E4 85 F1 | 	sub	objptr, ##27148
08da0     B4 7A B1 FD | 	call	#__system___string_cmp
08da4     00 FA 0D F2 | 	cmp	result1, #0 wz
08da8     37 00 00 AF 
08dac     44 E4 05 A1 |  if_e	add	objptr, ##28228
08db0     F2 30 02 AB |  if_e	rdlong	local10, objptr
08db4     37 00 00 AF 
08db8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08dbc     01 30 06 A1 |  if_e	add	local10, #1
08dc0     5C 01 90 AD |  if_e	jmp	#LR__0809
08dc4     37 00 00 FF 
08dc8     44 E4 05 F1 | 	add	objptr, ##28228
08dcc     F2 30 02 FB | 	rdlong	local10, objptr
08dd0     37 00 00 FF 
08dd4     44 E4 85 F1 | 	sub	objptr, ##28228
08dd8     02 30 06 F1 | 	add	local10, #2
08ddc     00 32 06 F6 | 	mov	local11, #0
08de0                 | '   l=ct+2 : m=0 : do
08de0                 | LR__0805
08de0                 | '   if isdec(lparts(l).part$) then 
08de0     18 25 02 F6 | 	mov	local04, local10
08de4     03 24 66 F0 | 	shl	local04, #3
08de8     35 00 00 FF 
08dec     0C E4 05 F1 | 	add	objptr, ##27148
08df0     F2 24 02 F1 | 	add	local04, objptr
08df4     12 13 02 FB | 	rdlong	arg01, local04
08df8     35 00 00 FF 
08dfc     0C E4 85 F1 | 	sub	objptr, ##27148
08e00     F4 D6 BF FD | 	call	#_isdec
08e04     00 FA 0D F2 | 	cmp	result1, #0 wz
08e08     44 00 90 AD |  if_e	jmp	#LR__0806
08e0c     19 35 02 F6 | 	mov	local12, local11
08e10     0F 35 06 F1 | 	add	local12, #local01
08e14     18 2F 02 F6 | 	mov	local09, local10
08e18     03 2E 66 F0 | 	shl	local09, #3
08e1c     35 00 00 FF 
08e20     0C E4 05 F1 | 	add	objptr, ##27148
08e24     F2 2E 02 F1 | 	add	local09, objptr
08e28     17 13 02 FB | 	rdlong	arg01, local09
08e2c     00 14 06 F6 | 	mov	arg02, #0
08e30     35 00 00 FF 
08e34     0C E4 85 F1 | 	sub	objptr, ##27148
08e38     20 AC B1 FD | 	call	#__system____builtin_atoi
08e3c     FD 36 02 F6 | 	mov	local13, result1
08e40                 | 	'.live	local13
08e40                 | 	'.live	local12
08e40     00 34 8E F9 | 	altd	local12, #0
08e44     1B 35 02 F6 | 	mov	local12, local13
08e48     01 32 06 F1 | 	add	local11, #1
08e4c     08 00 90 FD | 	jmp	#LR__0807
08e50                 | LR__0806
08e50                 | '     return(17)
08e50     11 FA 05 F6 | 	mov	result1, #17
08e54     EC 03 90 FD | 	jmp	#LR__0825
08e58                 | LR__0807
08e58                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
08e58     18 25 02 F6 | 	mov	local04, local10
08e5c     01 24 06 F1 | 	add	local04, #1
08e60     03 24 66 F0 | 	shl	local04, #3
08e64     35 00 00 FF 
08e68     0C E4 05 F1 | 	add	objptr, ##27148
08e6c     F2 24 02 F1 | 	add	local04, objptr
08e70     12 13 02 FB | 	rdlong	arg01, local04
08e74     83 01 00 FF 
08e78     C7 14 06 F6 | 	mov	arg02, ##@LR__5381
08e7c     35 00 00 FF 
08e80     0C E4 85 F1 | 	sub	objptr, ##27148
08e84     D0 79 B1 FD | 	call	#__system___string_cmp
08e88     00 FA 0D F2 | 	cmp	result1, #0 wz
08e8c     3C 00 90 AD |  if_e	jmp	#LR__0808
08e90     18 37 02 F6 | 	mov	local13, local10
08e94     01 36 06 F1 | 	add	local13, #1
08e98     03 36 66 F0 | 	shl	local13, #3
08e9c     35 00 00 FF 
08ea0     0C E4 05 F1 | 	add	objptr, ##27148
08ea4     F2 36 02 F1 | 	add	local13, objptr
08ea8     1B 13 02 FB | 	rdlong	arg01, local13
08eac     83 01 00 FF 
08eb0     C9 14 06 F6 | 	mov	arg02, ##@LR__5382
08eb4     35 00 00 FF 
08eb8     0C E4 85 F1 | 	sub	objptr, ##27148
08ebc     98 79 B1 FD | 	call	#__system___string_cmp
08ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ec4     2C FA 05 56 |  if_ne	mov	result1, #44
08ec8     78 03 90 5D |  if_ne	jmp	#LR__0825
08ecc                 | LR__0808
08ecc     02 30 06 F1 | 	add	local10, #2
08ed0     18 25 02 F6 | 	mov	local04, local10
08ed4     01 24 86 F1 | 	sub	local04, #1
08ed8     03 24 66 F0 | 	shl	local04, #3
08edc     35 00 00 FF 
08ee0     0C E4 05 F1 | 	add	objptr, ##27148
08ee4     F2 24 02 F1 | 	add	local04, objptr
08ee8     12 13 02 FB | 	rdlong	arg01, local04
08eec     83 01 00 FF 
08ef0     CB 14 06 F6 | 	mov	arg02, ##@LR__5383
08ef4     35 00 00 FF 
08ef8     0C E4 85 F1 | 	sub	objptr, ##27148
08efc     58 79 B1 FD | 	call	#__system___string_cmp
08f00     00 FA 0D F2 | 	cmp	result1, #0 wz
08f04     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08f08     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0805
08f0c                 | '   if m>3 then return 45
08f0c     04 32 56 F2 | 	cmps	local11, #4 wc
08f10     2D FA 05 36 |  if_ae	mov	result1, #45
08f14     2C 03 90 3D |  if_ae	jmp	#LR__0825
08f18     00 39 06 F6 | 	mov	local14, #256
08f1c     0C 3A 06 F6 | 	mov	local15, #12
08f20                 | LR__0809
08f20                 | '   arraytype=array_no_type : esize=12
08f20                 | ' 1350 
08f20                 | '   if lparts(l).part$="as" then
08f20     18 25 02 F6 | 	mov	local04, local10
08f24     03 24 66 F0 | 	shl	local04, #3
08f28     35 00 00 FF 
08f2c     0C E4 05 F1 | 	add	objptr, ##27148
08f30     F2 24 02 F1 | 	add	local04, objptr
08f34     12 13 02 FB | 	rdlong	arg01, local04
08f38     83 01 00 FF 
08f3c     CD 14 06 F6 | 	mov	arg02, ##@LR__5384
08f40     35 00 00 FF 
08f44     0C E4 85 F1 | 	sub	objptr, ##27148
08f48     0C 79 B1 FD | 	call	#__system___string_cmp
08f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
08f50     F0 01 90 5D |  if_ne	jmp	#LR__0824
08f54                 | '     select case lparts(l+1).part$
08f54     18 35 02 F6 | 	mov	local12, local10
08f58     01 34 06 F1 | 	add	local12, #1
08f5c     03 34 66 F0 | 	shl	local12, #3
08f60     35 00 00 FF 
08f64     0C E4 05 F1 | 	add	objptr, ##27148
08f68     F2 34 02 F1 | 	add	local12, objptr
08f6c     1A 3D 02 FB | 	rdlong	local16, local12
08f70     83 01 00 FF 
08f74     D0 14 06 F6 | 	mov	arg02, ##@LR__5385
08f78     1E 13 02 F6 | 	mov	arg01, local16
08f7c     35 00 00 FF 
08f80     0C E4 85 F1 | 	sub	objptr, ##27148
08f84     D0 78 B1 FD | 	call	#__system___string_cmp
08f88     00 FA 0D F2 | 	cmp	result1, #0 wz
08f8c     0C 01 90 AD |  if_e	jmp	#LR__0810
08f90     83 01 00 FF 
08f94     D5 14 06 F6 | 	mov	arg02, ##@LR__5386
08f98     1E 13 02 F6 | 	mov	arg01, local16
08f9c     B8 78 B1 FD | 	call	#__system___string_cmp
08fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
08fa4     00 01 90 AD |  if_e	jmp	#LR__0811
08fa8     83 01 00 FF 
08fac     DB 14 06 F6 | 	mov	arg02, ##@LR__5387
08fb0     1E 13 02 F6 | 	mov	arg01, local16
08fb4     A0 78 B1 FD | 	call	#__system___string_cmp
08fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
08fbc     F4 00 90 AD |  if_e	jmp	#LR__0812
08fc0     83 01 00 FF 
08fc4     E1 14 06 F6 | 	mov	arg02, ##@LR__5388
08fc8     1E 13 02 F6 | 	mov	arg01, local16
08fcc     88 78 B1 FD | 	call	#__system___string_cmp
08fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
08fd4     E8 00 90 AD |  if_e	jmp	#LR__0813
08fd8     83 01 00 FF 
08fdc     E8 14 06 F6 | 	mov	arg02, ##@LR__5389
08fe0     1E 13 02 F6 | 	mov	arg01, local16
08fe4     70 78 B1 FD | 	call	#__system___string_cmp
08fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
08fec     DC 00 90 AD |  if_e	jmp	#LR__0814
08ff0     83 01 00 FF 
08ff4     ED 14 06 F6 | 	mov	arg02, ##@LR__5390
08ff8     1E 13 02 F6 | 	mov	arg01, local16
08ffc     58 78 B1 FD | 	call	#__system___string_cmp
09000     00 FA 0D F2 | 	cmp	result1, #0 wz
09004     D0 00 90 AD |  if_e	jmp	#LR__0815
09008     83 01 00 FF 
0900c     F5 14 06 F6 | 	mov	arg02, ##@LR__5391
09010     1E 13 02 F6 | 	mov	arg01, local16
09014     40 78 B1 FD | 	call	#__system___string_cmp
09018     00 FA 0D F2 | 	cmp	result1, #0 wz
0901c     C4 00 90 AD |  if_e	jmp	#LR__0816
09020     83 01 00 FF 
09024     FB 14 06 F6 | 	mov	arg02, ##@LR__5392
09028     1E 13 02 F6 | 	mov	arg01, local16
0902c     28 78 B1 FD | 	call	#__system___string_cmp
09030     00 FA 0D F2 | 	cmp	result1, #0 wz
09034     B8 00 90 AD |  if_e	jmp	#LR__0817
09038     83 01 00 FF 
0903c     01 15 06 F6 | 	mov	arg02, ##@LR__5393
09040     1E 13 02 F6 | 	mov	arg01, local16
09044     10 78 B1 FD | 	call	#__system___string_cmp
09048     00 FA 0D F2 | 	cmp	result1, #0 wz
0904c     AC 00 90 AD |  if_e	jmp	#LR__0818
09050     83 01 00 FF 
09054     08 15 06 F6 | 	mov	arg02, ##@LR__5394
09058     1E 13 02 F6 | 	mov	arg01, local16
0905c     F8 77 B1 FD | 	call	#__system___string_cmp
09060     00 FA 0D F2 | 	cmp	result1, #0 wz
09064     A0 00 90 AD |  if_e	jmp	#LR__0819
09068     83 01 00 FF 
0906c     0F 15 06 F6 | 	mov	arg02, ##@LR__5395
09070     1E 13 02 F6 | 	mov	arg01, local16
09074     E0 77 B1 FD | 	call	#__system___string_cmp
09078     00 FA 0D F2 | 	cmp	result1, #0 wz
0907c     94 00 90 AD |  if_e	jmp	#LR__0820
09080     83 01 00 FF 
09084     16 15 06 F6 | 	mov	arg02, ##@LR__5396
09088     1E 13 02 F6 | 	mov	arg01, local16
0908c     C8 77 B1 FD | 	call	#__system___string_cmp
09090     00 FA 0D F2 | 	cmp	result1, #0 wz
09094     88 00 90 AD |  if_e	jmp	#LR__0821
09098     90 00 90 FD | 	jmp	#LR__0822
0909c                 | LR__0810
0909c     01 39 06 F6 | 	mov	local14, #257
090a0     01 3A 06 F6 | 	mov	local15, #1
090a4     9C 00 90 FD | 	jmp	#LR__0824
090a8                 | LR__0811
090a8     02 39 06 F6 | 	mov	local14, #258
090ac     01 3A 06 F6 | 	mov	local15, #1
090b0     90 00 90 FD | 	jmp	#LR__0824
090b4                 | LR__0812
090b4     03 39 06 F6 | 	mov	local14, #259
090b8     02 3A 06 F6 | 	mov	local15, #2
090bc     84 00 90 FD | 	jmp	#LR__0824
090c0                 | LR__0813
090c0     04 39 06 F6 | 	mov	local14, #260
090c4     02 3A 06 F6 | 	mov	local15, #2
090c8     78 00 90 FD | 	jmp	#LR__0824
090cc                 | LR__0814
090cc     05 39 06 F6 | 	mov	local14, #261
090d0     04 3A 06 F6 | 	mov	local15, #4
090d4     6C 00 90 FD | 	jmp	#LR__0824
090d8                 | LR__0815
090d8     05 39 06 F6 | 	mov	local14, #261
090dc     04 3A 06 F6 | 	mov	local15, #4
090e0     60 00 90 FD | 	jmp	#LR__0824
090e4                 | LR__0816
090e4     06 39 06 F6 | 	mov	local14, #262
090e8     04 3A 06 F6 | 	mov	local15, #4
090ec     54 00 90 FD | 	jmp	#LR__0824
090f0                 | LR__0817
090f0     07 39 06 F6 | 	mov	local14, #263
090f4     08 3A 06 F6 | 	mov	local15, #8
090f8     48 00 90 FD | 	jmp	#LR__0824
090fc                 | LR__0818
090fc     08 39 06 F6 | 	mov	local14, #264
09100     08 3A 06 F6 | 	mov	local15, #8
09104     3C 00 90 FD | 	jmp	#LR__0824
09108                 | LR__0819
09108     09 39 06 F6 | 	mov	local14, #265
0910c     04 3A 06 F6 | 	mov	local15, #4
09110     30 00 90 FD | 	jmp	#LR__0824
09114                 | LR__0820
09114     0A 39 06 F6 | 	mov	local14, #266
09118     08 3A 06 F6 | 	mov	local15, #8
0911c     24 00 90 FD | 	jmp	#LR__0824
09120                 | LR__0821
09120     0B 39 06 F6 | 	mov	local14, #267
09124     04 3A 06 F6 | 	mov	local15, #4
09128     18 00 90 FD | 	jmp	#LR__0824
0912c                 | LR__0822
0912c     2F 12 06 F6 | 	mov	arg01, #47
09130     6C 41 B1 FD | 	call	#_printerror
09134     2F FA 05 F6 | 	mov	result1, #47
09138     08 01 90 FD | 	jmp	#LR__0825
0913c                 | LR__0823
0913c                 | '   return 46
0913c     2E FA 05 F6 | 	mov	result1, #46
09140     00 01 90 FD | 	jmp	#LR__0825
09144                 | LR__0824
09144     0F 3B 02 FD | 	qmul	local15, local01
09148     18 2A 62 FD | 	getqx	local07
0914c     10 2B 02 FD | 	qmul	local07, local02
09150     18 3C 62 FD | 	getqx	local16
09154     11 3D 02 FD | 	qmul	local16, local03
09158     51 00 00 FF 
0915c     AC E5 05 F1 | 	add	objptr, ##41900
09160     F2 3E 02 FB | 	rdlong	local17, objptr
09164     1C 15 02 F6 | 	mov	arg02, local14
09168     18 3C 62 FD | 	getqx	local16
0916c     1E 3F 82 F1 | 	sub	local17, local16
09170     10 3E 86 F1 | 	sub	local17, #16
09174     0F 3E 26 F5 | 	andn	local17, #15
09178     F2 3E 62 FC | 	wrlong	local17, objptr
0917c     51 00 00 FF 
09180     AC E5 85 F1 | 	sub	objptr, ##41900
09184     1F 13 02 F6 | 	mov	arg01, local17
09188     C0 42 B1 FD | 	call	#_psdpoke
0918c     1F 13 02 F6 | 	mov	arg01, local17
09190     02 12 06 F1 | 	add	arg01, #2
09194     1D 15 02 F6 | 	mov	arg02, local15
09198     B0 42 B1 FD | 	call	#_psdpoke
0919c     1F 13 02 F6 | 	mov	arg01, local17
091a0     04 12 06 F1 | 	add	arg01, #4
091a4     0F 15 02 F6 | 	mov	arg02, local01
091a8     58 42 B1 FD | 	call	#_pslpoke
091ac     1F 13 02 F6 | 	mov	arg01, local17
091b0     08 12 06 F1 | 	add	arg01, #8
091b4     10 15 02 F6 | 	mov	arg02, local02
091b8     48 42 B1 FD | 	call	#_pslpoke
091bc     1F 13 02 F6 | 	mov	arg01, local17
091c0     0C 12 06 F1 | 	add	arg01, #12
091c4     11 15 02 F6 | 	mov	arg02, local03
091c8     38 42 B1 FD | 	call	#_pslpoke
091cc     14 35 02 F6 | 	mov	local12, local06
091d0     04 34 66 F0 | 	shl	local12, #4
091d4     14 00 00 FF 
091d8     F8 E5 05 F1 | 	add	objptr, ##10744
091dc     F2 34 02 F1 | 	add	local12, objptr
091e0     1A 27 62 FC | 	wrlong	local05, local12
091e4     14 35 02 F6 | 	mov	local12, local06
091e8     04 34 66 F0 | 	shl	local12, #4
091ec     F2 34 02 F1 | 	add	local12, objptr
091f0     04 34 06 F1 | 	add	local12, #4
091f4     1A 3F 62 FC | 	wrlong	local17, local12
091f8     14 35 02 F6 | 	mov	local12, local06
091fc     04 34 66 F0 | 	shl	local12, #4
09200     F2 34 02 F1 | 	add	local12, objptr
09204     0C 34 06 F1 | 	add	local12, #12
09208     1A 39 62 FC | 	wrlong	local14, local12
0920c                 | ' memtop=arrayptr
0920c                 | ' psdpoke arrayptr,arraytype 
0920c                 | ' psdpoke arrayptr+2,esize 
0920c                 | ' pslpoke arrayptr+4,dims(0)
0920c                 | ' pslpoke arrayptr+8,dims(1)
0920c                 | ' pslpoke arrayptr+12,dims(2)
0920c                 | ' variables(j).name=varname2$
0920c                 | ' variables(j).value.uresult=arrayptr
0920c                 | ' variables(j).vartype=arraytype
0920c                 | ' if j=varnum then varnum+=1
0920c     20 00 00 FF 
09210     10 E4 05 F1 | 	add	objptr, ##16400
09214     F2 2A 02 FB | 	rdlong	local07, objptr
09218     35 00 00 FF 
0921c     08 E4 85 F1 | 	sub	objptr, ##27144
09220     15 29 0A F2 | 	cmp	local06, local07 wz
09224     35 00 00 AF 
09228     08 E4 05 A1 |  if_e	add	objptr, ##27144
0922c     F2 2A 02 AB |  if_e	rdlong	local07, objptr
09230     01 2A 06 A1 |  if_e	add	local07, #1
09234     F2 2A 62 AC |  if_e	wrlong	local07, objptr
09238     35 00 00 AF 
0923c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09240                 | ' return 0
09240     00 FA 05 F6 | 	mov	result1, #0
09244                 | LR__0825
09244     A7 F0 03 F6 | 	mov	ptra, fp
09248     B2 00 A0 FD | 	call	#popregs_
0924c                 | _compile_dim_ret
0924c     2D 00 64 FD | 	ret
09250                 | 
09250                 | ' 
09250                 | ' '----- compile 'for' command. 
09250                 | ' 
09250                 | ' function compile_for() as ulong  
09250                 | _compile_for
09250     05 4A 05 F6 | 	mov	COUNT_, #5
09254     A8 00 A0 FD | 	call	#pushregs_
09258                 | ' 
09258                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
09258     37 00 00 FF 
0925c     44 E4 05 F1 | 	add	objptr, ##28228
09260     F2 14 02 FB | 	rdlong	arg02, objptr
09264     01 14 06 F1 | 	add	arg02, #1
09268     03 14 66 F0 | 	shl	arg02, #3
0926c     02 00 00 FF 
09270     38 E4 85 F1 | 	sub	objptr, ##1080
09274     F2 14 02 F1 | 	add	arg02, objptr
09278     0A 13 02 FB | 	rdlong	arg01, arg02
0927c     35 00 00 FF 
09280     0C E4 85 F1 | 	sub	objptr, ##27148
09284                 | ' 
09284                 | ' select case s
09284     81 01 00 FF 
09288     7E 14 06 F6 | 	mov	arg02, ##@LR__5143
0928c     C8 75 B1 FD | 	call	#__system___string_cmp
09290     00 FA 0D F2 | 	cmp	result1, #0 wz
09294     1B FA 05 A6 |  if_e	mov	result1, #27
09298     00 FA 05 56 |  if_ne	mov	result1, #0
0929c     00 FA 0D F2 | 	cmp	result1, #0 wz
092a0     0C 00 90 AD |  if_e	jmp	#LR__0830
092a4     05 12 06 F6 | 	mov	arg01, #5
092a8     F0 E3 BF FD | 	call	#_compile_immediate_assign
092ac     08 00 90 FD | 	jmp	#LR__0831
092b0                 | LR__0830
092b0     20 FA 05 F6 | 	mov	result1, #32
092b4     D0 02 90 FD | 	jmp	#LR__0835
092b8                 | LR__0831
092b8     4A 00 00 FF 
092bc     7C E4 05 F1 | 	add	objptr, ##38012
092c0     F2 14 02 FB | 	rdlong	arg02, objptr
092c4     0A 13 02 F6 | 	mov	arg01, arg02
092c8     01 12 86 F1 | 	sub	arg01, #1
092cc     09 25 02 F6 | 	mov	local04, arg01
092d0     01 24 66 F0 | 	shl	local04, #1
092d4     09 25 02 F1 | 	add	local04, arg01
092d8     02 24 66 F0 | 	shl	local04, #2
092dc     03 00 00 FF 
092e0     00 E4 85 F1 | 	sub	objptr, ##1536
092e4     F2 24 02 F1 | 	add	local04, objptr
092e8     12 1F 02 FB | 	rdlong	local01, local04
092ec     04 24 06 F1 | 	add	local04, #4
092f0     12 25 02 FB | 	rdlong	local04, local04
092f4     01 14 86 F1 | 	sub	arg02, #1
092f8     0A 13 02 F6 | 	mov	arg01, arg02
092fc     01 12 66 F0 | 	shl	arg01, #1
09300     0A 13 02 F1 | 	add	arg01, arg02
09304     02 12 66 F0 | 	shl	arg01, #2
09308     F2 12 02 F1 | 	add	arg01, objptr
0930c     08 12 06 F1 | 	add	arg01, #8
09310     09 15 02 FB | 	rdlong	arg02, arg01
09314     12 21 02 F6 | 	mov	local02, local04
09318     0A 23 02 F6 | 	mov	local03, arg02
0931c                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0931c     17 22 0E F2 | 	cmp	local03, #23 wz
09320     47 00 00 FF 
09324     7C E4 85 F1 | 	sub	objptr, ##36476
09328     22 FA 05 56 |  if_ne	mov	result1, #34
0932c     58 02 90 5D |  if_ne	jmp	#LR__0835
09330     0F 27 02 F6 | 	mov	local05, local01
09334                 | ' varnum=t1.result.uresult
09334                 | ' if lparts(ct).part$<>"to" then return 33
09334     37 00 00 FF 
09338     44 E4 05 F1 | 	add	objptr, ##28228
0933c     F2 1E 02 FB | 	rdlong	local01, objptr
09340     03 1E 66 F0 | 	shl	local01, #3
09344     02 00 00 FF 
09348     38 E4 85 F1 | 	sub	objptr, ##1080
0934c     F2 1E 02 F1 | 	add	local01, objptr
09350     0F 13 02 FB | 	rdlong	arg01, local01
09354     83 01 00 FF 
09358     1D 15 06 F6 | 	mov	arg02, ##@LR__5397
0935c     35 00 00 FF 
09360     0C E4 85 F1 | 	sub	objptr, ##27148
09364     F0 74 B1 FD | 	call	#__system___string_cmp
09368     00 FA 0D F2 | 	cmp	result1, #0 wz
0936c     21 FA 05 56 |  if_ne	mov	result1, #33
09370     14 02 90 5D |  if_ne	jmp	#LR__0835
09374     37 00 00 FF 
09378     44 E4 05 F1 | 	add	objptr, ##28228
0937c     F2 24 02 FB | 	rdlong	local04, objptr
09380     01 24 06 F1 | 	add	local04, #1
09384     F2 24 62 FC | 	wrlong	local04, objptr
09388     37 00 00 FF 
0938c     44 E4 85 F1 | 	sub	objptr, ##28228
09390     EC 07 B0 FD | 	call	#_expr
09394                 | ' ct+=1
09394                 | ' expr()  										' there is "to" value pushed on the stack
09394                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
09394     37 00 00 FF 
09398     44 E4 05 F1 | 	add	objptr, ##28228
0939c     F2 24 02 FB | 	rdlong	local04, objptr
093a0     03 24 66 F0 | 	shl	local04, #3
093a4     02 00 00 FF 
093a8     38 E4 85 F1 | 	sub	objptr, ##1080
093ac     F2 24 02 F1 | 	add	local04, objptr
093b0     12 13 02 FB | 	rdlong	arg01, local04
093b4     83 01 00 FF 
093b8     20 15 06 F6 | 	mov	arg02, ##@LR__5398
093bc     35 00 00 FF 
093c0     0C E4 85 F1 | 	sub	objptr, ##27148
093c4     90 74 B1 FD | 	call	#__system___string_cmp
093c8     00 FA 0D F2 | 	cmp	result1, #0 wz
093cc     3C 00 90 AD |  if_e	jmp	#LR__0832
093d0     37 00 00 FF 
093d4     44 E4 05 F1 | 	add	objptr, ##28228
093d8     F2 24 02 FB | 	rdlong	local04, objptr
093dc     03 24 66 F0 | 	shl	local04, #3
093e0     02 00 00 FF 
093e4     38 E4 85 F1 | 	sub	objptr, ##1080
093e8     F2 24 02 F1 | 	add	local04, objptr
093ec     12 13 02 FB | 	rdlong	arg01, local04
093f0     83 01 00 FF 
093f4     25 15 06 F6 | 	mov	arg02, ##@LR__5399
093f8     35 00 00 FF 
093fc     0C E4 85 F1 | 	sub	objptr, ##27148
09400     54 74 B1 FD | 	call	#__system___string_cmp
09404     00 FA 0D F2 | 	cmp	result1, #0 wz
09408     24 00 90 5D |  if_ne	jmp	#LR__0833
0940c                 | LR__0832
0940c     37 00 00 FF 
09410     44 E4 05 F1 | 	add	objptr, ##28228
09414     F2 1E 02 FB | 	rdlong	local01, objptr
09418     01 1E 06 F1 | 	add	local01, #1
0941c     F2 1E 62 FC | 	wrlong	local01, objptr
09420     37 00 00 FF 
09424     44 E4 85 F1 | 	sub	objptr, ##28228
09428     54 07 B0 FD | 	call	#_expr
0942c     78 00 90 FD | 	jmp	#LR__0834
09430                 | LR__0833
09430     4A 00 00 FF 
09434     7C E4 05 F1 | 	add	objptr, ##38012
09438     F2 1E 02 FB | 	rdlong	local01, objptr
0943c     0F 25 02 F6 | 	mov	local04, local01
09440     01 24 66 F0 | 	shl	local04, #1
09444     0F 25 02 F1 | 	add	local04, local01
09448     02 24 66 F0 | 	shl	local04, #2
0944c     03 00 00 FF 
09450     00 E4 85 F1 | 	sub	objptr, ##1536
09454     F2 24 02 F1 | 	add	local04, objptr
09458     08 24 06 F1 | 	add	local04, #8
0945c     12 39 68 FC | 	wrlong	#28, local04
09460     03 00 00 FF 
09464     00 E4 05 F1 | 	add	objptr, ##1536
09468     F2 1E 02 FB | 	rdlong	local01, objptr
0946c     0F 25 02 F6 | 	mov	local04, local01
09470     01 24 66 F0 | 	shl	local04, #1
09474     0F 25 02 F1 | 	add	local04, local01
09478     02 24 66 F0 | 	shl	local04, #2
0947c     03 00 00 FF 
09480     00 E4 85 F1 | 	sub	objptr, ##1536
09484     F2 24 02 F1 | 	add	local04, objptr
09488     12 03 68 FC | 	wrlong	#1, local04
0948c     03 00 00 FF 
09490     00 E4 05 F1 | 	add	objptr, ##1536
09494     F2 1E 02 FB | 	rdlong	local01, objptr
09498     01 1E 06 F1 | 	add	local01, #1
0949c     F2 1E 62 FC | 	wrlong	local01, objptr
094a0     4A 00 00 FF 
094a4     7C E4 85 F1 | 	sub	objptr, ##38012
094a8                 | LR__0834
094a8     4A 00 00 FF 
094ac     7C E4 05 F1 | 	add	objptr, ##38012
094b0     F2 1E 02 FB | 	rdlong	local01, objptr
094b4     0F 25 02 F6 | 	mov	local04, local01
094b8     01 24 66 F0 | 	shl	local04, #1
094bc     0F 25 02 F1 | 	add	local04, local01
094c0     02 24 66 F0 | 	shl	local04, #2
094c4     03 00 00 FF 
094c8     00 E4 85 F1 | 	sub	objptr, ##1536
094cc     F2 24 02 F1 | 	add	local04, objptr
094d0     08 24 06 F1 | 	add	local04, #8
094d4     12 39 68 FC | 	wrlong	#28, local04
094d8     03 00 00 FF 
094dc     00 E4 05 F1 | 	add	objptr, ##1536
094e0     F2 1E 02 FB | 	rdlong	local01, objptr
094e4     0F 25 02 F6 | 	mov	local04, local01
094e8     01 24 66 F0 | 	shl	local04, #1
094ec     0F 25 02 F1 | 	add	local04, local01
094f0     02 24 66 F0 | 	shl	local04, #2
094f4     03 00 00 FF 
094f8     00 E4 85 F1 | 	sub	objptr, ##1536
094fc     F2 24 02 F1 | 	add	local04, objptr
09500     12 27 62 FC | 	wrlong	local05, local04
09504     03 00 00 FF 
09508     00 E4 05 F1 | 	add	objptr, ##1536
0950c     F2 26 02 FB | 	rdlong	local05, objptr
09510     01 26 06 F1 | 	add	local05, #1
09514     F2 26 62 FC | 	wrlong	local05, objptr
09518     13 1F 02 F6 | 	mov	local01, local05
0951c     01 1E 66 F0 | 	shl	local01, #1
09520     13 1F 02 F1 | 	add	local01, local05
09524     02 1E 66 F0 | 	shl	local01, #2
09528     03 00 00 FF 
0952c     00 E4 85 F1 | 	sub	objptr, ##1536
09530     F2 1E 02 F1 | 	add	local01, objptr
09534     08 1E 06 F1 | 	add	local01, #8
09538     0F 95 68 FC | 	wrlong	#74, local01
0953c     03 00 00 FF 
09540     00 E4 05 F1 | 	add	objptr, ##1536
09544     F2 26 02 FB | 	rdlong	local05, objptr
09548     13 1F 02 F6 | 	mov	local01, local05
0954c     01 1E 66 F0 | 	shl	local01, #1
09550     13 1F 02 F1 | 	add	local01, local05
09554     02 1E 66 F0 | 	shl	local01, #2
09558     03 00 00 FF 
0955c     00 E4 85 F1 | 	sub	objptr, ##1536
09560     F2 1E 02 F1 | 	add	local01, objptr
09564     0F 01 68 FC | 	wrlong	#0, local01
09568     03 00 00 FF 
0956c     00 E4 05 F1 | 	add	objptr, ##1536
09570     F2 26 02 FB | 	rdlong	local05, objptr
09574     01 26 06 F1 | 	add	local05, #1
09578     F2 26 62 FC | 	wrlong	local05, objptr
0957c     4A 00 00 FF 
09580     7C E4 85 F1 | 	sub	objptr, ##38012
09584                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
09584                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
09584                 | ' return 0
09584     00 FA 05 F6 | 	mov	result1, #0
09588                 | LR__0835
09588     A7 F0 03 F6 | 	mov	ptra, fp
0958c     B2 00 A0 FD | 	call	#popregs_
09590                 | _compile_for_ret
09590     2D 00 64 FD | 	ret
09594                 | 
09594                 | ' 
09594                 | ' '----- compile 'next' command. 
09594                 | ' 
09594                 | ' function compile_next() as ulong
09594                 | _compile_next
09594     04 4A 05 F6 | 	mov	COUNT_, #4
09598     A8 00 A0 FD | 	call	#pushregs_
0959c     37 00 00 FF 
095a0     44 E4 05 F1 | 	add	objptr, ##28228
095a4     F2 14 02 FB | 	rdlong	arg02, objptr
095a8     03 14 66 F0 | 	shl	arg02, #3
095ac     02 00 00 FF 
095b0     38 E4 85 F1 | 	sub	objptr, ##1080
095b4     F2 14 02 F1 | 	add	arg02, objptr
095b8     0A 1F 02 FB | 	rdlong	local01, arg02
095bc                 | ' 
095bc                 | ' varname$=lparts(ct).part$ 
095bc                 | ' if varnum=0 then return 35
095bc     04 E4 85 F1 | 	sub	objptr, #4
095c0     F2 14 0A FB | 	rdlong	arg02, objptr wz
095c4     35 00 00 FF 
095c8     08 E4 85 F1 | 	sub	objptr, ##27144
095cc     23 FA 05 A6 |  if_e	mov	result1, #35
095d0     4C 01 90 AD |  if_e	jmp	#LR__0842
095d4     01 20 66 F6 | 	neg	local02, #1
095d8                 | ' j=-1
095d8                 | ' for i=0 to varnum-1
095d8     00 22 06 F6 | 	mov	local03, #0
095dc     35 00 00 FF 
095e0     08 E4 05 F1 | 	add	objptr, ##27144
095e4     F2 24 02 FB | 	rdlong	local04, objptr
095e8     35 00 00 FF 
095ec     08 E4 85 F1 | 	sub	objptr, ##27144
095f0                 | LR__0840
095f0     12 23 12 F2 | 	cmp	local03, local04 wc
095f4     38 00 90 3D |  if_ae	jmp	#LR__0841
095f8                 | '   if variables(i).name=varname$ then j=i : exit
095f8     11 15 02 F6 | 	mov	arg02, local03
095fc     04 14 66 F0 | 	shl	arg02, #4
09600     14 00 00 FF 
09604     F8 E5 05 F1 | 	add	objptr, ##10744
09608     F2 14 02 F1 | 	add	arg02, objptr
0960c     0A 13 02 FB | 	rdlong	arg01, arg02
09610     0F 15 02 F6 | 	mov	arg02, local01
09614     14 00 00 FF 
09618     F8 E5 85 F1 | 	sub	objptr, ##10744
0961c     38 72 B1 FD | 	call	#__system___string_cmp
09620     00 FA 0D F2 | 	cmp	result1, #0 wz
09624     11 21 02 A6 |  if_e	mov	local02, local03
09628     01 22 06 51 |  if_ne	add	local03, #1
0962c     C0 FF 9F 5D |  if_ne	jmp	#LR__0840
09630                 | LR__0841
09630                 | ' if j=-1 then return 35
09630     FF FF 7F FF 
09634     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09638     23 FA 05 A6 |  if_e	mov	result1, #35
0963c     E0 00 90 AD |  if_e	jmp	#LR__0842
09640     4A 00 00 FF 
09644     7C E4 05 F1 | 	add	objptr, ##38012
09648     F2 24 02 FB | 	rdlong	local04, objptr
0964c     12 23 02 F6 | 	mov	local03, local04
09650     01 22 66 F0 | 	shl	local03, #1
09654     12 23 02 F1 | 	add	local03, local04
09658     02 22 66 F0 | 	shl	local03, #2
0965c     03 00 00 FF 
09660     00 E4 85 F1 | 	sub	objptr, ##1536
09664     F2 22 02 F1 | 	add	local03, objptr
09668     08 22 06 F1 | 	add	local03, #8
0966c     11 39 68 FC | 	wrlong	#28, local03
09670     03 00 00 FF 
09674     00 E4 05 F1 | 	add	objptr, ##1536
09678     F2 24 02 FB | 	rdlong	local04, objptr
0967c     12 23 02 F6 | 	mov	local03, local04
09680     01 22 66 F0 | 	shl	local03, #1
09684     12 23 02 F1 | 	add	local03, local04
09688     02 22 66 F0 | 	shl	local03, #2
0968c     03 00 00 FF 
09690     00 E4 85 F1 | 	sub	objptr, ##1536
09694     F2 22 02 F1 | 	add	local03, objptr
09698     11 21 62 FC | 	wrlong	local02, local03
0969c     03 00 00 FF 
096a0     00 E4 05 F1 | 	add	objptr, ##1536
096a4     F2 24 02 FB | 	rdlong	local04, objptr
096a8     01 24 06 F1 | 	add	local04, #1
096ac     F2 24 62 FC | 	wrlong	local04, objptr
096b0     12 23 02 F6 | 	mov	local03, local04
096b4     01 22 66 F0 | 	shl	local03, #1
096b8     12 23 02 F1 | 	add	local03, local04
096bc     02 22 66 F0 | 	shl	local03, #2
096c0     03 00 00 FF 
096c4     00 E4 85 F1 | 	sub	objptr, ##1536
096c8     F2 22 02 F1 | 	add	local03, objptr
096cc     08 22 06 F1 | 	add	local03, #8
096d0     11 97 68 FC | 	wrlong	#75, local03
096d4     03 00 00 FF 
096d8     00 E4 05 F1 | 	add	objptr, ##1536
096dc     F2 24 02 FB | 	rdlong	local04, objptr
096e0     12 23 02 F6 | 	mov	local03, local04
096e4     01 22 66 F0 | 	shl	local03, #1
096e8     12 23 02 F1 | 	add	local03, local04
096ec     02 22 66 F0 | 	shl	local03, #2
096f0     03 00 00 FF 
096f4     00 E4 85 F1 | 	sub	objptr, ##1536
096f8     F2 22 02 F1 | 	add	local03, objptr
096fc     11 01 68 FC | 	wrlong	#0, local03
09700     03 00 00 FF 
09704     00 E4 05 F1 | 	add	objptr, ##1536
09708     F2 24 02 FB | 	rdlong	local04, objptr
0970c     01 24 06 F1 | 	add	local04, #1
09710     F2 24 62 FC | 	wrlong	local04, objptr
09714     4A 00 00 FF 
09718     7C E4 85 F1 | 	sub	objptr, ##38012
0971c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0971c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0971c                 | ' return 0
0971c     00 FA 05 F6 | 	mov	result1, #0
09720                 | LR__0842
09720     A7 F0 03 F6 | 	mov	ptra, fp
09724     B2 00 A0 FD | 	call	#popregs_
09728                 | _compile_next_ret
09728     2D 00 64 FD | 	ret
0972c                 | 
0972c                 | ' 
0972c                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0972c                 | ' 
0972c                 | ' function compile_gosub() as ulong
0972c                 | _compile_gosub
0972c     02 4A 05 F6 | 	mov	COUNT_, #2
09730     A8 00 A0 FD | 	call	#pushregs_
09734     4A 00 00 FF 
09738     7C E4 05 F1 | 	add	objptr, ##38012
0973c     F2 1E 02 FB | 	rdlong	local01, objptr
09740     0F 21 02 F6 | 	mov	local02, local01
09744     01 20 66 F0 | 	shl	local02, #1
09748     0F 21 02 F1 | 	add	local02, local01
0974c     02 20 66 F0 | 	shl	local02, #2
09750     03 00 00 FF 
09754     00 E4 85 F1 | 	sub	objptr, ##1536
09758     F2 20 02 F1 | 	add	local02, objptr
0975c     08 20 06 F1 | 	add	local02, #8
09760     10 53 69 FC | 	wrlong	#169, local02
09764     03 00 00 FF 
09768     00 E4 05 F1 | 	add	objptr, ##1536
0976c     F2 20 02 FB | 	rdlong	local02, objptr
09770     01 20 06 F1 | 	add	local02, #1
09774     F2 20 62 FC | 	wrlong	local02, objptr
09778     4A 00 00 FF 
0977c     7C E4 85 F1 | 	sub	objptr, ##38012
09780     0C 00 B0 FD | 	call	#_compile_goto
09784                 | ' compiledline(lineptr).result_type=token_gosub
09784                 | ' lineptr+=1
09784                 | ' err=compile_goto()
09784                 | ' return err
09784     A7 F0 03 F6 | 	mov	ptra, fp
09788     B2 00 A0 FD | 	call	#popregs_
0978c                 | _compile_gosub_ret
0978c     2D 00 64 FD | 	ret
09790                 | 
09790                 | ' 
09790                 | ' '----- compile 'goto' 
09790                 | ' 
09790                 | ' function compile_goto( ) as ulong
09790                 | _compile_goto
09790     03 4A 05 F6 | 	mov	COUNT_, #3
09794     A8 00 A0 FD | 	call	#pushregs_
09798     34 F0 07 F1 | 	add	ptra, #52
0979c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0979c     37 00 00 FF 
097a0     44 E4 05 F1 | 	add	objptr, ##28228
097a4     F2 16 02 FB | 	rdlong	arg03, objptr
097a8     03 16 66 F0 | 	shl	arg03, #3
097ac     02 00 00 FF 
097b0     38 E4 85 F1 | 	sub	objptr, ##1080
097b4     F2 16 02 F1 | 	add	arg03, objptr
097b8     04 16 06 F1 | 	add	arg03, #4
097bc     0B 17 02 FB | 	rdlong	arg03, arg03
097c0     01 00 00 FF 
097c4     00 16 0E F2 | 	cmp	arg03, ##512 wz
097c8     35 00 00 FF 
097cc     0C E4 85 F1 | 	sub	objptr, ##27148
097d0     CC 02 90 5D |  if_ne	jmp	#LR__0855
097d4     37 00 00 FF 
097d8     44 E4 05 F1 | 	add	objptr, ##28228
097dc     F2 16 02 FB | 	rdlong	arg03, objptr
097e0     01 16 06 F1 | 	add	arg03, #1
097e4     03 16 66 F0 | 	shl	arg03, #3
097e8     02 00 00 FF 
097ec     38 E4 85 F1 | 	sub	objptr, ##1080
097f0     F2 16 02 F1 | 	add	arg03, objptr
097f4     04 16 06 F1 | 	add	arg03, #4
097f8     0B 17 02 FB | 	rdlong	arg03, arg03
097fc     FE 17 0E F2 | 	cmp	arg03, #510 wz
09800     35 00 00 FF 
09804     0C E4 85 F1 | 	sub	objptr, ##27148
09808     94 02 90 5D |  if_ne	jmp	#LR__0855
0980c     37 00 00 FF 
09810     44 E4 05 F1 | 	add	objptr, ##28228
09814     F2 16 02 FB | 	rdlong	arg03, objptr
09818     03 16 66 F0 | 	shl	arg03, #3
0981c     02 00 00 FF 
09820     38 E4 85 F1 | 	sub	objptr, ##1080
09824     F2 16 02 F1 | 	add	arg03, objptr
09828     0B 13 02 FB | 	rdlong	arg01, arg03
0982c     00 14 06 F6 | 	mov	arg02, #0
09830     35 00 00 FF 
09834     0C E4 85 F1 | 	sub	objptr, ##27148
09838     20 A2 B1 FD | 	call	#__system____builtin_atoi
0983c     04 4E 05 F1 | 	add	fp, #4
09840     A7 FA 61 FC | 	wrlong	result1, fp
09844     4A 00 00 FF 
09848     7C E4 05 F1 | 	add	objptr, ##38012
0984c     F2 1E 02 FB | 	rdlong	local01, objptr
09850     0F 21 02 F6 | 	mov	local02, local01
09854     01 20 66 F0 | 	shl	local02, #1
09858     0F 21 02 F1 | 	add	local02, local01
0985c     02 20 66 F0 | 	shl	local02, #2
09860     03 00 00 FF 
09864     00 E4 85 F1 | 	sub	objptr, ##1536
09868     F2 20 02 F1 | 	add	local02, objptr
0986c     08 20 06 F1 | 	add	local02, #8
09870     10 9D 68 FC | 	wrlong	#78, local02
09874     03 00 00 FF 
09878     0C E4 05 F1 | 	add	objptr, ##1548
0987c     F2 22 02 FB | 	rdlong	local03, objptr
09880     4A 00 00 FF 
09884     88 E4 85 F1 | 	sub	objptr, ##38024
09888     04 4E 05 F1 | 	add	fp, #4
0988c     A7 22 62 FC | 	wrlong	local03, fp
09890     08 4E 85 F1 | 	sub	fp, #8
09894                 | '   gotoline=val%(lparts(ct).part$) 
09894                 | '   compiledline(lineptr).result_type=token_fast_goto
09894                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
09894                 | '   do
09894                 | LR__0850
09894     10 4E 05 F1 | 	add	fp, #16
09898     A7 12 02 F6 | 	mov	arg01, fp
0989c     08 4E 85 F1 | 	sub	fp, #8
098a0     A7 14 02 FB | 	rdlong	arg02, fp
098a4     08 4E 85 F1 | 	sub	fp, #8
098a8     18 16 06 F6 | 	mov	arg03, #24
098ac     0B 00 00 FF 
098b0     CC E4 05 F1 | 	add	objptr, ##5836
098b4     38 63 B1 FD | 	call	#_psram_spin2_read1
098b8     0B 00 00 FF 
098bc     CC E4 85 F1 | 	sub	objptr, ##5836
098c0                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
098c0                 | '     if gotoheader(0)<>$FFFFFFFF then
098c0     10 4E 05 F1 | 	add	fp, #16
098c4     A7 22 02 FB | 	rdlong	local03, fp
098c8     10 4E 85 F1 | 	sub	fp, #16
098cc     FF FF 7F FF 
098d0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
098d4     24 00 90 AD |  if_e	jmp	#LR__0851
098d8     08 4E 05 F1 | 	add	fp, #8
098dc     A7 22 02 FB | 	rdlong	local03, fp
098e0     04 4E 05 F1 | 	add	fp, #4
098e4     A7 22 62 FC | 	wrlong	local03, fp
098e8     18 4E 05 F1 | 	add	fp, #24
098ec     A7 22 02 FB | 	rdlong	local03, fp
098f0     1C 4E 85 F1 | 	sub	fp, #28
098f4     A7 22 62 FC | 	wrlong	local03, fp
098f8     08 4E 85 F1 | 	sub	fp, #8
098fc                 | LR__0851
098fc     24 4E 05 F1 | 	add	fp, #36
09900     A7 22 02 FB | 	rdlong	local03, fp
09904     24 4E 85 F1 | 	sub	fp, #36
09908     FF FF 3F FF 
0990c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09910     10 4E 05 51 |  if_ne	add	fp, #16
09914     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09918     10 4E 85 51 |  if_ne	sub	fp, #16
0991c     FF FF 7F 5F 
09920     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09924     1C 00 90 AD |  if_e	jmp	#LR__0852
09928     10 4E 05 F1 | 	add	fp, #16
0992c     A7 22 02 FB | 	rdlong	local03, fp
09930     0C 4E 85 F1 | 	sub	fp, #12
09934     A7 20 02 FB | 	rdlong	local02, fp
09938     04 4E 85 F1 | 	sub	fp, #4
0993c     10 23 0A F2 | 	cmp	local03, local02 wz
09940     50 FF 9F 5D |  if_ne	jmp	#LR__0850
09944                 | LR__0852
09944                 | '   if gotoheader(0)=gotoline then
09944     10 4E 05 F1 | 	add	fp, #16
09948     A7 22 02 FB | 	rdlong	local03, fp
0994c     0C 4E 85 F1 | 	sub	fp, #12
09950     A7 1E 02 FB | 	rdlong	local01, fp
09954     04 4E 85 F1 | 	sub	fp, #4
09958     0F 23 0A F2 | 	cmp	local03, local01 wz
0995c     7C 00 90 5D |  if_ne	jmp	#LR__0853
09960     4A 00 00 FF 
09964     7C E4 05 F1 | 	add	objptr, ##38012
09968     F2 1E 02 FB | 	rdlong	local01, objptr
0996c     0F 21 02 F6 | 	mov	local02, local01
09970     01 20 66 F0 | 	shl	local02, #1
09974     0F 21 02 F1 | 	add	local02, local01
09978     02 20 66 F0 | 	shl	local02, #2
0997c     03 00 00 FF 
09980     00 E4 85 F1 | 	sub	objptr, ##1536
09984     F2 20 02 F1 | 	add	local02, objptr
09988     0C 4E 05 F1 | 	add	fp, #12
0998c     A7 22 02 FB | 	rdlong	local03, fp
09990     10 23 62 FC | 	wrlong	local03, local02
09994     03 00 00 FF 
09998     00 E4 05 F1 | 	add	objptr, ##1536
0999c     F2 1E 02 FB | 	rdlong	local01, objptr
099a0     0F 21 02 F6 | 	mov	local02, local01
099a4     01 20 66 F0 | 	shl	local02, #1
099a8     0F 21 02 F1 | 	add	local02, local01
099ac     02 20 66 F0 | 	shl	local02, #2
099b0     03 00 00 FF 
099b4     00 E4 85 F1 | 	sub	objptr, ##1536
099b8     F2 20 02 F1 | 	add	local02, objptr
099bc     08 4E 85 F1 | 	sub	fp, #8
099c0     A7 22 02 FB | 	rdlong	local03, fp
099c4     04 4E 85 F1 | 	sub	fp, #4
099c8     04 20 06 F1 | 	add	local02, #4
099cc     10 23 62 FC | 	wrlong	local03, local02
099d0     47 00 00 FF 
099d4     7C E4 85 F1 | 	sub	objptr, ##36476
099d8     A4 00 90 FD | 	jmp	#LR__0854
099dc                 | LR__0853
099dc     4A 00 00 FF 
099e0     7C E4 05 F1 | 	add	objptr, ##38012
099e4     F2 1E 02 FB | 	rdlong	local01, objptr
099e8     0F 21 02 F6 | 	mov	local02, local01
099ec     01 20 66 F0 | 	shl	local02, #1
099f0     0F 21 02 F1 | 	add	local02, local01
099f4     02 20 66 F0 | 	shl	local02, #2
099f8     03 00 00 FF 
099fc     00 E4 85 F1 | 	sub	objptr, ##1536
09a00     F2 20 02 F1 | 	add	local02, objptr
09a04     00 00 C0 FF 
09a08     10 01 68 FC | 	wrlong	##-2147483648, local02
09a0c     03 00 00 FF 
09a10     00 E4 05 F1 | 	add	objptr, ##1536
09a14     F2 1E 02 FB | 	rdlong	local01, objptr
09a18     0F 21 02 F6 | 	mov	local02, local01
09a1c     01 20 66 F0 | 	shl	local02, #1
09a20     0F 21 02 F1 | 	add	local02, local01
09a24     02 20 66 F0 | 	shl	local02, #2
09a28     03 00 00 FF 
09a2c     00 E4 85 F1 | 	sub	objptr, ##1536
09a30     F2 20 02 F1 | 	add	local02, objptr
09a34     04 4E 05 F1 | 	add	fp, #4
09a38     A7 22 02 FB | 	rdlong	local03, fp
09a3c     04 4E 85 F1 | 	sub	fp, #4
09a40     04 20 06 F1 | 	add	local02, #4
09a44     10 23 62 FC | 	wrlong	local03, local02
09a48     03 00 00 FF 
09a4c     00 E4 05 F1 | 	add	objptr, ##1536
09a50     F2 1E 02 FB | 	rdlong	local01, objptr
09a54     0F 21 02 F6 | 	mov	local02, local01
09a58     01 20 66 F0 | 	shl	local02, #1
09a5c     0F 21 02 F1 | 	add	local02, local01
09a60     02 20 66 F0 | 	shl	local02, #2
09a64     03 00 00 FF 
09a68     00 E4 85 F1 | 	sub	objptr, ##1536
09a6c     F2 20 02 F1 | 	add	local02, objptr
09a70     08 20 06 F1 | 	add	local02, #8
09a74     10 A7 68 FC | 	wrlong	#83, local02
09a78     47 00 00 FF 
09a7c     7C E4 85 F1 | 	sub	objptr, ##36476
09a80                 | LR__0854
09a80     4A 00 00 FF 
09a84     7C E4 05 F1 | 	add	objptr, ##38012
09a88     F2 22 02 FB | 	rdlong	local03, objptr
09a8c     01 22 06 F1 | 	add	local03, #1
09a90     F2 22 62 FC | 	wrlong	local03, objptr
09a94     4A 00 00 FF 
09a98     7C E4 85 F1 | 	sub	objptr, ##38012
09a9c     D0 00 90 FD | 	jmp	#LR__0856
09aa0                 | LR__0855
09aa0     DC 00 B0 FD | 	call	#_expr
09aa4     30 4E 05 F1 | 	add	fp, #48
09aa8     A7 9E 68 FC | 	wrlong	#79, fp
09aac     08 4E 85 F1 | 	sub	fp, #8
09ab0     A7 00 68 FC | 	wrlong	#0, fp
09ab4     04 4E 05 F1 | 	add	fp, #4
09ab8     A7 22 02 FB | 	rdlong	local03, fp
09abc     04 4E 05 F1 | 	add	fp, #4
09ac0     A7 1E 02 FB | 	rdlong	local01, fp
09ac4     30 4E 85 F1 | 	sub	fp, #48
09ac8     4A 00 00 FF 
09acc     7C E4 05 F1 | 	add	objptr, ##38012
09ad0     F2 20 02 FB | 	rdlong	local02, objptr
09ad4     10 17 02 F6 | 	mov	arg03, local02
09ad8     01 16 66 F0 | 	shl	arg03, #1
09adc     10 17 02 F1 | 	add	arg03, local02
09ae0     02 16 66 F0 | 	shl	arg03, #2
09ae4     03 00 00 FF 
09ae8     00 E4 85 F1 | 	sub	objptr, ##1536
09aec     F2 16 02 F1 | 	add	arg03, objptr
09af0     0B 01 68 FC | 	wrlong	#0, arg03
09af4     03 00 00 FF 
09af8     00 E4 05 F1 | 	add	objptr, ##1536
09afc     F2 20 02 FB | 	rdlong	local02, objptr
09b00     10 17 02 F6 | 	mov	arg03, local02
09b04     01 16 66 F0 | 	shl	arg03, #1
09b08     10 17 02 F1 | 	add	arg03, local02
09b0c     02 16 66 F0 | 	shl	arg03, #2
09b10     03 00 00 FF 
09b14     00 E4 85 F1 | 	sub	objptr, ##1536
09b18     F2 16 02 F1 | 	add	arg03, objptr
09b1c     04 16 06 F1 | 	add	arg03, #4
09b20     0B 23 62 FC | 	wrlong	local03, arg03
09b24     03 00 00 FF 
09b28     00 E4 05 F1 | 	add	objptr, ##1536
09b2c     F2 22 02 FB | 	rdlong	local03, objptr
09b30     11 21 02 F6 | 	mov	local02, local03
09b34     01 20 66 F0 | 	shl	local02, #1
09b38     11 21 02 F1 | 	add	local02, local03
09b3c     02 20 66 F0 | 	shl	local02, #2
09b40     03 00 00 FF 
09b44     00 E4 85 F1 | 	sub	objptr, ##1536
09b48     F2 20 02 F1 | 	add	local02, objptr
09b4c     08 20 06 F1 | 	add	local02, #8
09b50     10 1F 62 FC | 	wrlong	local01, local02
09b54     03 00 00 FF 
09b58     00 E4 05 F1 | 	add	objptr, ##1536
09b5c     F2 22 02 FB | 	rdlong	local03, objptr
09b60     01 22 06 F1 | 	add	local03, #1
09b64     F2 22 62 FC | 	wrlong	local03, objptr
09b68     4A 00 00 FF 
09b6c     7C E4 85 F1 | 	sub	objptr, ##38012
09b70                 | LR__0856
09b70                 | ' return 0
09b70     00 FA 05 F6 | 	mov	result1, #0
09b74     A7 F0 03 F6 | 	mov	ptra, fp
09b78     B2 00 A0 FD | 	call	#popregs_
09b7c                 | _compile_goto_ret
09b7c     2D 00 64 FD | 	ret
09b80                 | 
09b80                 | ' 
09b80                 | ' 
09b80                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09b80                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
09b80                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09b80                 | ' 
09b80                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09b80                 | ' '
09b80                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
09b80                 | ' '
09b80                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09b80                 | ' 
09b80                 | ' function expr() as ulong 
09b80                 | _expr
09b80     07 4A 05 F6 | 	mov	COUNT_, #7
09b84     A8 00 A0 FD | 	call	#pushregs_
09b88                 | _expr_enter
09b88     37 00 00 FF 
09b8c     44 E4 05 F1 | 	add	objptr, ##28228
09b90     F2 24 02 FB | 	rdlong	local04, objptr
09b94     03 24 66 F0 | 	shl	local04, #3
09b98     02 00 00 FF 
09b9c     38 E4 85 F1 | 	sub	objptr, ##1080
09ba0     F2 24 02 F1 | 	add	local04, objptr
09ba4     04 24 06 F1 | 	add	local04, #4
09ba8     12 27 02 FB | 	rdlong	local05, local04
09bac                 | ' 
09bac                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09bac     FE 27 0E F2 | 	cmp	local05, #510 wz
09bb0     35 00 00 FF 
09bb4     0C E4 85 F1 | 	sub	objptr, ##27148
09bb8     C4 00 90 5D |  if_ne	jmp	#LR__0860
09bbc     1D 1E 06 F6 | 	mov	local01, #29
09bc0     FF 22 06 F6 | 	mov	local03, #255
09bc4     0F 29 02 F6 | 	mov	local06, local01
09bc8     10 2B 02 F6 | 	mov	local07, local02
09bcc     11 1F 02 F6 | 	mov	local01, local03
09bd0     4A 00 00 FF 
09bd4     7C E4 05 F1 | 	add	objptr, ##38012
09bd8     F2 26 02 FB | 	rdlong	local05, objptr
09bdc     13 25 02 F6 | 	mov	local04, local05
09be0     01 24 66 F0 | 	shl	local04, #1
09be4     13 25 02 F1 | 	add	local04, local05
09be8     02 24 66 F0 | 	shl	local04, #2
09bec     03 00 00 FF 
09bf0     00 E4 85 F1 | 	sub	objptr, ##1536
09bf4     F2 24 02 F1 | 	add	local04, objptr
09bf8     12 29 62 FC | 	wrlong	local06, local04
09bfc     03 00 00 FF 
09c00     00 E4 05 F1 | 	add	objptr, ##1536
09c04     F2 28 02 FB | 	rdlong	local06, objptr
09c08     14 27 02 F6 | 	mov	local05, local06
09c0c     01 26 66 F0 | 	shl	local05, #1
09c10     14 27 02 F1 | 	add	local05, local06
09c14     02 26 66 F0 | 	shl	local05, #2
09c18     03 00 00 FF 
09c1c     00 E4 85 F1 | 	sub	objptr, ##1536
09c20     F2 26 02 F1 | 	add	local05, objptr
09c24     04 26 06 F1 | 	add	local05, #4
09c28     13 2B 62 FC | 	wrlong	local07, local05
09c2c     03 00 00 FF 
09c30     00 E4 05 F1 | 	add	objptr, ##1536
09c34     F2 2A 02 FB | 	rdlong	local07, objptr
09c38     15 29 02 F6 | 	mov	local06, local07
09c3c     01 28 66 F0 | 	shl	local06, #1
09c40     15 29 02 F1 | 	add	local06, local07
09c44     02 28 66 F0 | 	shl	local06, #2
09c48     03 00 00 FF 
09c4c     00 E4 85 F1 | 	sub	objptr, ##1536
09c50     F2 28 02 F1 | 	add	local06, objptr
09c54     08 28 06 F1 | 	add	local06, #8
09c58     14 1F 62 FC | 	wrlong	local01, local06
09c5c     03 00 00 FF 
09c60     00 E4 05 F1 | 	add	objptr, ##1536
09c64     F2 28 02 FB | 	rdlong	local06, objptr
09c68     01 28 06 F1 | 	add	local06, #1
09c6c     F2 28 62 FC | 	wrlong	local06, objptr
09c70     4A 00 00 FF 
09c74     7C E4 85 F1 | 	sub	objptr, ##38012
09c78     1D FA 05 F6 | 	mov	result1, #29
09c7c     64 01 90 FD | 	jmp	#LR__0863
09c80                 | LR__0860
09c80     00 1E 06 F6 | 	mov	local01, #0
09c84     68 01 B0 FD | 	call	#_addsub
09c88                 | ' t3.result.uresult=0
09c88                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
09c88                 | ' if err>0 then return err
09c88     01 FA 15 F2 | 	cmp	result1, #1 wc
09c8c     54 01 90 3D |  if_ae	jmp	#LR__0863
09c90     37 00 00 FF 
09c94     44 E4 05 F1 | 	add	objptr, ##28228
09c98     F2 24 02 FB | 	rdlong	local04, objptr
09c9c     03 24 66 F0 | 	shl	local04, #3
09ca0     02 00 00 FF 
09ca4     38 E4 85 F1 | 	sub	objptr, ##1080
09ca8     F2 24 02 F1 | 	add	local04, objptr
09cac     04 24 06 F1 | 	add	local04, #4
09cb0     12 27 02 FB | 	rdlong	local05, local04
09cb4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
09cb4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
09cb4     35 00 00 FF 
09cb8     0C E4 85 F1 | 	sub	objptr, ##27148
09cbc                 | LR__0861
09cbc     1B 26 0E F2 | 	cmp	local05, #27 wz
09cc0     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
09cc4     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09cc8     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09ccc     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09cd0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
09cd4     08 01 90 5D |  if_ne	jmp	#LR__0862
09cd8     37 00 00 FF 
09cdc     44 E4 05 F1 | 	add	objptr, ##28228
09ce0     F2 28 02 FB | 	rdlong	local06, objptr
09ce4     01 28 06 F1 | 	add	local06, #1
09ce8     F2 28 62 FC | 	wrlong	local06, objptr
09cec     37 00 00 FF 
09cf0     44 E4 85 F1 | 	sub	objptr, ##28228
09cf4     F8 00 B0 FD | 	call	#_addsub
09cf8                 | '   ct+=1
09cf8                 | '   err=addsub() : if err>0 then return err
09cf8     01 FA 15 F2 | 	cmp	result1, #1 wc
09cfc     E4 00 90 3D |  if_ae	jmp	#LR__0863
09d00     13 23 02 F6 | 	mov	local03, local05
09d04     0F 29 02 F6 | 	mov	local06, local01
09d08     10 2B 02 F6 | 	mov	local07, local02
09d0c     11 27 02 F6 | 	mov	local05, local03
09d10     4A 00 00 FF 
09d14     7C E4 05 F1 | 	add	objptr, ##38012
09d18     F2 24 02 FB | 	rdlong	local04, objptr
09d1c     12 FB 01 F6 | 	mov	result1, local04
09d20     01 FA 65 F0 | 	shl	result1, #1
09d24     12 FB 01 F1 | 	add	result1, local04
09d28     02 FA 65 F0 | 	shl	result1, #2
09d2c     03 00 00 FF 
09d30     00 E4 85 F1 | 	sub	objptr, ##1536
09d34     F2 FA 01 F1 | 	add	result1, objptr
09d38     FD 28 62 FC | 	wrlong	local06, result1
09d3c     03 00 00 FF 
09d40     00 E4 05 F1 | 	add	objptr, ##1536
09d44     F2 28 02 FB | 	rdlong	local06, objptr
09d48     14 25 02 F6 | 	mov	local04, local06
09d4c     01 24 66 F0 | 	shl	local04, #1
09d50     14 25 02 F1 | 	add	local04, local06
09d54     02 24 66 F0 | 	shl	local04, #2
09d58     03 00 00 FF 
09d5c     00 E4 85 F1 | 	sub	objptr, ##1536
09d60     F2 24 02 F1 | 	add	local04, objptr
09d64     04 24 06 F1 | 	add	local04, #4
09d68     12 2B 62 FC | 	wrlong	local07, local04
09d6c     03 00 00 FF 
09d70     00 E4 05 F1 | 	add	objptr, ##1536
09d74     F2 2A 02 FB | 	rdlong	local07, objptr
09d78     15 29 02 F6 | 	mov	local06, local07
09d7c     01 28 66 F0 | 	shl	local06, #1
09d80     15 29 02 F1 | 	add	local06, local07
09d84     02 28 66 F0 | 	shl	local06, #2
09d88     03 00 00 FF 
09d8c     00 E4 85 F1 | 	sub	objptr, ##1536
09d90     F2 28 02 F1 | 	add	local06, objptr
09d94     08 28 06 F1 | 	add	local06, #8
09d98     14 27 62 FC | 	wrlong	local05, local06
09d9c     03 00 00 FF 
09da0     00 E4 05 F1 | 	add	objptr, ##1536
09da4     F2 28 02 FB | 	rdlong	local06, objptr
09da8     01 28 06 F1 | 	add	local06, #1
09dac     F2 28 62 FC | 	wrlong	local06, objptr
09db0     13 00 00 FF 
09db4     38 E4 85 F1 | 	sub	objptr, ##9784
09db8     F2 24 02 FB | 	rdlong	local04, objptr
09dbc     03 24 66 F0 | 	shl	local04, #3
09dc0     02 00 00 FF 
09dc4     38 E4 85 F1 | 	sub	objptr, ##1080
09dc8     F2 24 02 F1 | 	add	local04, objptr
09dcc     04 24 06 F1 | 	add	local04, #4
09dd0     12 27 02 FB | 	rdlong	local05, local04
09dd4     35 00 00 FF 
09dd8     0C E4 85 F1 | 	sub	objptr, ##27148
09ddc     DC FE 9F FD | 	jmp	#LR__0861
09de0                 | LR__0862
09de0                 | ' return 0  
09de0     00 FA 05 F6 | 	mov	result1, #0
09de4                 | LR__0863
09de4     A7 F0 03 F6 | 	mov	ptra, fp
09de8     B2 00 A0 FD | 	call	#popregs_
09dec                 | _expr_ret
09dec     2D 00 64 FD | 	ret
09df0                 | 
09df0                 | ' 
09df0                 | ' ' Second level operators : add, sub, logic
09df0                 | ' 
09df0                 | ' function addsub() as ulong
09df0                 | _addsub
09df0     07 4A 05 F6 | 	mov	COUNT_, #7
09df4     A8 00 A0 FD | 	call	#pushregs_
09df8                 | _addsub_enter
09df8     00 1E 06 F6 | 	mov	local01, #0
09dfc     60 01 B0 FD | 	call	#_muldiv
09e00                 | ' 
09e00                 | ' t3.result.uresult=0
09e00                 | ' err=muldiv() : if err>0 then return err           			 
09e00     01 FA 15 F2 | 	cmp	result1, #1 wc
09e04     4C 01 90 3D |  if_ae	jmp	#LR__0872
09e08     37 00 00 FF 
09e0c     44 E4 05 F1 | 	add	objptr, ##28228
09e10     F2 24 02 FB | 	rdlong	local04, objptr
09e14     03 24 66 F0 | 	shl	local04, #3
09e18     02 00 00 FF 
09e1c     38 E4 85 F1 | 	sub	objptr, ##1080
09e20     F2 24 02 F1 | 	add	local04, objptr
09e24     04 24 06 F1 | 	add	local04, #4
09e28     12 27 02 FB | 	rdlong	local05, local04
09e2c                 | ' op = lparts(ct).token				 
09e2c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
09e2c     35 00 00 FF 
09e30     0C E4 85 F1 | 	sub	objptr, ##27148
09e34                 | LR__0870
09e34     01 26 0E F2 | 	cmp	local05, #1 wz
09e38     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
09e3c     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
09e40     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
09e44     08 01 90 5D |  if_ne	jmp	#LR__0871
09e48     37 00 00 FF 
09e4c     44 E4 05 F1 | 	add	objptr, ##28228
09e50     F2 24 02 FB | 	rdlong	local04, objptr
09e54     01 24 06 F1 | 	add	local04, #1
09e58     F2 24 62 FC | 	wrlong	local04, objptr
09e5c     37 00 00 FF 
09e60     44 E4 85 F1 | 	sub	objptr, ##28228
09e64     F8 00 B0 FD | 	call	#_muldiv
09e68                 | '   ct+=1
09e68                 | '   err=muldiv() : if err>0 then return err   
09e68     01 FA 15 F2 | 	cmp	result1, #1 wc
09e6c     E4 00 90 3D |  if_ae	jmp	#LR__0872
09e70     13 23 02 F6 | 	mov	local03, local05
09e74     0F 29 02 F6 | 	mov	local06, local01
09e78     10 2B 02 F6 | 	mov	local07, local02
09e7c     11 27 02 F6 | 	mov	local05, local03
09e80     4A 00 00 FF 
09e84     7C E4 05 F1 | 	add	objptr, ##38012
09e88     F2 24 02 FB | 	rdlong	local04, objptr
09e8c     12 FB 01 F6 | 	mov	result1, local04
09e90     01 FA 65 F0 | 	shl	result1, #1
09e94     12 FB 01 F1 | 	add	result1, local04
09e98     02 FA 65 F0 | 	shl	result1, #2
09e9c     03 00 00 FF 
09ea0     00 E4 85 F1 | 	sub	objptr, ##1536
09ea4     F2 FA 01 F1 | 	add	result1, objptr
09ea8     FD 28 62 FC | 	wrlong	local06, result1
09eac     03 00 00 FF 
09eb0     00 E4 05 F1 | 	add	objptr, ##1536
09eb4     F2 28 02 FB | 	rdlong	local06, objptr
09eb8     14 25 02 F6 | 	mov	local04, local06
09ebc     01 24 66 F0 | 	shl	local04, #1
09ec0     14 25 02 F1 | 	add	local04, local06
09ec4     02 24 66 F0 | 	shl	local04, #2
09ec8     03 00 00 FF 
09ecc     00 E4 85 F1 | 	sub	objptr, ##1536
09ed0     F2 24 02 F1 | 	add	local04, objptr
09ed4     04 24 06 F1 | 	add	local04, #4
09ed8     12 2B 62 FC | 	wrlong	local07, local04
09edc     03 00 00 FF 
09ee0     00 E4 05 F1 | 	add	objptr, ##1536
09ee4     F2 2A 02 FB | 	rdlong	local07, objptr
09ee8     15 29 02 F6 | 	mov	local06, local07
09eec     01 28 66 F0 | 	shl	local06, #1
09ef0     15 29 02 F1 | 	add	local06, local07
09ef4     02 28 66 F0 | 	shl	local06, #2
09ef8     03 00 00 FF 
09efc     00 E4 85 F1 | 	sub	objptr, ##1536
09f00     F2 28 02 F1 | 	add	local06, objptr
09f04     08 28 06 F1 | 	add	local06, #8
09f08     14 27 62 FC | 	wrlong	local05, local06
09f0c     03 00 00 FF 
09f10     00 E4 05 F1 | 	add	objptr, ##1536
09f14     F2 28 02 FB | 	rdlong	local06, objptr
09f18     01 28 06 F1 | 	add	local06, #1
09f1c     F2 28 62 FC | 	wrlong	local06, objptr
09f20     13 00 00 FF 
09f24     38 E4 85 F1 | 	sub	objptr, ##9784
09f28     F2 24 02 FB | 	rdlong	local04, objptr
09f2c     03 24 66 F0 | 	shl	local04, #3
09f30     02 00 00 FF 
09f34     38 E4 85 F1 | 	sub	objptr, ##1080
09f38     F2 24 02 F1 | 	add	local04, objptr
09f3c     04 24 06 F1 | 	add	local04, #4
09f40     12 27 02 FB | 	rdlong	local05, local04
09f44     35 00 00 FF 
09f48     0C E4 85 F1 | 	sub	objptr, ##27148
09f4c     E4 FE 9F FD | 	jmp	#LR__0870
09f50                 | LR__0871
09f50                 | ' return 0
09f50     00 FA 05 F6 | 	mov	result1, #0
09f54                 | LR__0872
09f54     A7 F0 03 F6 | 	mov	ptra, fp
09f58     B2 00 A0 FD | 	call	#popregs_
09f5c                 | _addsub_ret
09f5c     2D 00 64 FD | 	ret
09f60                 | 
09f60                 | ' 
09f60                 | ' ' Third level operators : mul,div,shift,power
09f60                 | ' 
09f60                 | ' function muldiv() as ulong
09f60                 | _muldiv
09f60     07 4A 05 F6 | 	mov	COUNT_, #7
09f64     A8 00 A0 FD | 	call	#pushregs_
09f68                 | _muldiv_enter
09f68     00 1E 06 F6 | 	mov	local01, #0
09f6c     6C 01 B0 FD | 	call	#_getvalue
09f70                 | ' 
09f70                 | ' t3.result.uresult=0
09f70                 | ' err=getvalue() : if err>0 then return err     
09f70     01 FA 15 F2 | 	cmp	result1, #1 wc
09f74     58 01 90 3D |  if_ae	jmp	#LR__0882
09f78     37 00 00 FF 
09f7c     44 E4 05 F1 | 	add	objptr, ##28228
09f80     F2 24 02 FB | 	rdlong	local04, objptr
09f84     03 24 66 F0 | 	shl	local04, #3
09f88     02 00 00 FF 
09f8c     38 E4 85 F1 | 	sub	objptr, ##1080
09f90     F2 24 02 F1 | 	add	local04, objptr
09f94     04 24 06 F1 | 	add	local04, #4
09f98     12 27 02 FB | 	rdlong	local05, local04
09f9c                 | ' op = lparts(ct).token
09f9c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09f9c     35 00 00 FF 
09fa0     0C E4 85 F1 | 	sub	objptr, ##27148
09fa4                 | LR__0880
09fa4     05 26 0E F2 | 	cmp	local05, #5 wz
09fa8     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09fac     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09fb0     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09fb4     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09fb8     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09fbc     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09fc0     08 01 90 5D |  if_ne	jmp	#LR__0881
09fc4     37 00 00 FF 
09fc8     44 E4 05 F1 | 	add	objptr, ##28228
09fcc     F2 24 02 FB | 	rdlong	local04, objptr
09fd0     01 24 06 F1 | 	add	local04, #1
09fd4     F2 24 62 FC | 	wrlong	local04, objptr
09fd8     37 00 00 FF 
09fdc     44 E4 85 F1 | 	sub	objptr, ##28228
09fe0     F8 00 B0 FD | 	call	#_getvalue
09fe4                 | '   ct+=1
09fe4                 | '   err=getvalue() :if err>0 then return err   
09fe4     01 FA 15 F2 | 	cmp	result1, #1 wc
09fe8     E4 00 90 3D |  if_ae	jmp	#LR__0882
09fec     13 23 02 F6 | 	mov	local03, local05
09ff0     0F 29 02 F6 | 	mov	local06, local01
09ff4     10 2B 02 F6 | 	mov	local07, local02
09ff8     11 27 02 F6 | 	mov	local05, local03
09ffc     4A 00 00 FF 
0a000     7C E4 05 F1 | 	add	objptr, ##38012
0a004     F2 24 02 FB | 	rdlong	local04, objptr
0a008     12 FB 01 F6 | 	mov	result1, local04
0a00c     01 FA 65 F0 | 	shl	result1, #1
0a010     12 FB 01 F1 | 	add	result1, local04
0a014     02 FA 65 F0 | 	shl	result1, #2
0a018     03 00 00 FF 
0a01c     00 E4 85 F1 | 	sub	objptr, ##1536
0a020     F2 FA 01 F1 | 	add	result1, objptr
0a024     FD 28 62 FC | 	wrlong	local06, result1
0a028     03 00 00 FF 
0a02c     00 E4 05 F1 | 	add	objptr, ##1536
0a030     F2 28 02 FB | 	rdlong	local06, objptr
0a034     14 25 02 F6 | 	mov	local04, local06
0a038     01 24 66 F0 | 	shl	local04, #1
0a03c     14 25 02 F1 | 	add	local04, local06
0a040     02 24 66 F0 | 	shl	local04, #2
0a044     03 00 00 FF 
0a048     00 E4 85 F1 | 	sub	objptr, ##1536
0a04c     F2 24 02 F1 | 	add	local04, objptr
0a050     04 24 06 F1 | 	add	local04, #4
0a054     12 2B 62 FC | 	wrlong	local07, local04
0a058     03 00 00 FF 
0a05c     00 E4 05 F1 | 	add	objptr, ##1536
0a060     F2 2A 02 FB | 	rdlong	local07, objptr
0a064     15 29 02 F6 | 	mov	local06, local07
0a068     01 28 66 F0 | 	shl	local06, #1
0a06c     15 29 02 F1 | 	add	local06, local07
0a070     02 28 66 F0 | 	shl	local06, #2
0a074     03 00 00 FF 
0a078     00 E4 85 F1 | 	sub	objptr, ##1536
0a07c     F2 28 02 F1 | 	add	local06, objptr
0a080     08 28 06 F1 | 	add	local06, #8
0a084     14 27 62 FC | 	wrlong	local05, local06
0a088     03 00 00 FF 
0a08c     00 E4 05 F1 | 	add	objptr, ##1536
0a090     F2 28 02 FB | 	rdlong	local06, objptr
0a094     01 28 06 F1 | 	add	local06, #1
0a098     F2 28 62 FC | 	wrlong	local06, objptr
0a09c     13 00 00 FF 
0a0a0     38 E4 85 F1 | 	sub	objptr, ##9784
0a0a4     F2 24 02 FB | 	rdlong	local04, objptr
0a0a8     03 24 66 F0 | 	shl	local04, #3
0a0ac     02 00 00 FF 
0a0b0     38 E4 85 F1 | 	sub	objptr, ##1080
0a0b4     F2 24 02 F1 | 	add	local04, objptr
0a0b8     04 24 06 F1 | 	add	local04, #4
0a0bc     12 27 02 FB | 	rdlong	local05, local04
0a0c0     35 00 00 FF 
0a0c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a0c8     D8 FE 9F FD | 	jmp	#LR__0880
0a0cc                 | LR__0881
0a0cc                 | ' return 0
0a0cc     00 FA 05 F6 | 	mov	result1, #0
0a0d0                 | LR__0882
0a0d0     A7 F0 03 F6 | 	mov	ptra, fp
0a0d4     B2 00 A0 FD | 	call	#popregs_
0a0d8                 | _muldiv_ret
0a0d8     2D 00 64 FD | 	ret
0a0dc                 | 
0a0dc                 | ' 
0a0dc                 | ' ' Get a value for operations
0a0dc                 | ' 
0a0dc                 | ' function getvalue()  as ulong
0a0dc                 | _getvalue
0a0dc     0B 4A 05 F6 | 	mov	COUNT_, #11
0a0e0     A8 00 A0 FD | 	call	#pushregs_
0a0e4                 | _getvalue_enter
0a0e4     01 24 06 F6 | 	mov	local04, #1
0a0e8     00 1E 06 F6 | 	mov	local01, #0
0a0ec     1D 22 06 F6 | 	mov	local03, #29
0a0f0     37 00 00 FF 
0a0f4     44 E4 05 F1 | 	add	objptr, ##28228
0a0f8     F2 16 02 FB | 	rdlong	arg03, objptr
0a0fc     03 16 66 F0 | 	shl	arg03, #3
0a100     02 00 00 FF 
0a104     38 E4 85 F1 | 	sub	objptr, ##1080
0a108     F2 16 02 F1 | 	add	arg03, objptr
0a10c     04 16 06 F1 | 	add	arg03, #4
0a110     0B 27 02 FB | 	rdlong	local05, arg03
0a114                 | ' 
0a114                 | ' m=1											' for negative numbers
0a114                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a114                 | ' op=lparts(ct).token
0a114                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0a114     02 26 0E F2 | 	cmp	local05, #2 wz
0a118     35 00 00 FF 
0a11c     0C E4 85 F1 | 	sub	objptr, ##27148
0a120     38 00 90 5D |  if_ne	jmp	#LR__0890
0a124     01 24 66 F6 | 	neg	local04, #1
0a128     37 00 00 FF 
0a12c     44 E4 05 F1 | 	add	objptr, ##28228
0a130     F2 26 02 FB | 	rdlong	local05, objptr
0a134     01 26 06 F1 | 	add	local05, #1
0a138     F2 26 62 FC | 	wrlong	local05, objptr
0a13c     03 26 66 F0 | 	shl	local05, #3
0a140     02 00 00 FF 
0a144     38 E4 85 F1 | 	sub	objptr, ##1080
0a148     F2 26 02 F1 | 	add	local05, objptr
0a14c     04 26 06 F1 | 	add	local05, #4
0a150     13 27 02 FB | 	rdlong	local05, local05
0a154     35 00 00 FF 
0a158     0C E4 85 F1 | 	sub	objptr, ##27148
0a15c                 | LR__0890
0a15c                 | ' select case op
0a15c     01 00 00 FF 
0a160     00 26 0E F2 | 	cmp	local05, ##512 wz
0a164     44 00 90 AD |  if_e	jmp	#LR__0891
0a168     01 00 00 FF 
0a16c     01 26 0E F2 | 	cmp	local05, ##513 wz
0a170     90 01 90 AD |  if_e	jmp	#LR__0894
0a174     01 00 00 FF 
0a178     02 26 0E F2 | 	cmp	local05, ##514 wz
0a17c     44 04 90 AD |  if_e	jmp	#LR__0901
0a180     01 00 00 FF 
0a184     03 26 0E F2 | 	cmp	local05, ##515 wz
0a188     A8 05 90 AD |  if_e	jmp	#LR__0904
0a18c     2C 26 0E F2 | 	cmp	local05, #44 wz
0a190     78 07 90 AD |  if_e	jmp	#LR__0909
0a194     01 00 00 FF 
0a198     04 26 0E F2 | 	cmp	local05, ##516 wz
0a19c     70 08 90 AD |  if_e	jmp	#LR__0910
0a1a0     15 26 0E F2 | 	cmp	local05, #21 wz
0a1a4     98 08 90 AD |  if_e	jmp	#LR__0911
0a1a8     10 09 90 FD | 	jmp	#LR__0912
0a1ac                 | LR__0891
0a1ac                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a1ac     01 24 0E F2 | 	cmp	local04, #1 wz
0a1b0     3C 00 90 5D |  if_ne	jmp	#LR__0892
0a1b4     37 00 00 FF 
0a1b8     44 E4 05 F1 | 	add	objptr, ##28228
0a1bc     F2 26 02 FB | 	rdlong	local05, objptr
0a1c0     03 26 66 F0 | 	shl	local05, #3
0a1c4     02 00 00 FF 
0a1c8     38 E4 85 F1 | 	sub	objptr, ##1080
0a1cc     F2 26 02 F1 | 	add	local05, objptr
0a1d0     13 13 02 FB | 	rdlong	arg01, local05
0a1d4     00 14 06 F6 | 	mov	arg02, #0
0a1d8     35 00 00 FF 
0a1dc     0C E4 85 F1 | 	sub	objptr, ##27148
0a1e0     78 98 B1 FD | 	call	#__system____builtin_atoi
0a1e4     FD 24 02 FD | 	qmul	local04, result1
0a1e8     18 1E 62 FD | 	getqx	local01
0a1ec     1C 22 06 F6 | 	mov	local03, #28
0a1f0                 | LR__0892
0a1f0                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a1f0     FF FF 7F FF 
0a1f4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a1f8     3C 00 90 5D |  if_ne	jmp	#LR__0893
0a1fc     37 00 00 FF 
0a200     44 E4 05 F1 | 	add	objptr, ##28228
0a204     F2 26 02 FB | 	rdlong	local05, objptr
0a208     03 26 66 F0 | 	shl	local05, #3
0a20c     02 00 00 FF 
0a210     38 E4 85 F1 | 	sub	objptr, ##1080
0a214     F2 26 02 F1 | 	add	local05, objptr
0a218     13 13 02 FB | 	rdlong	arg01, local05
0a21c     00 14 06 F6 | 	mov	arg02, #0
0a220     35 00 00 FF 
0a224     0C E4 85 F1 | 	sub	objptr, ##27148
0a228     30 98 B1 FD | 	call	#__system____builtin_atoi
0a22c     FD 24 02 FD | 	qmul	local04, result1
0a230     18 1E 62 FD | 	getqx	local01
0a234     1C 22 06 F6 | 	mov	local03, #28
0a238                 | LR__0893
0a238     0F 29 02 F6 | 	mov	local06, local01
0a23c     10 2B 02 F6 | 	mov	local07, local02
0a240     11 27 02 F6 | 	mov	local05, local03
0a244     4A 00 00 FF 
0a248     7C E4 05 F1 | 	add	objptr, ##38012
0a24c     F2 1E 02 FB | 	rdlong	local01, objptr
0a250     0F 25 02 F6 | 	mov	local04, local01
0a254     01 24 66 F0 | 	shl	local04, #1
0a258     0F 25 02 F1 | 	add	local04, local01
0a25c     02 24 66 F0 | 	shl	local04, #2
0a260     03 00 00 FF 
0a264     00 E4 85 F1 | 	sub	objptr, ##1536
0a268     F2 24 02 F1 | 	add	local04, objptr
0a26c     12 29 62 FC | 	wrlong	local06, local04
0a270     03 00 00 FF 
0a274     00 E4 05 F1 | 	add	objptr, ##1536
0a278     F2 28 02 FB | 	rdlong	local06, objptr
0a27c     14 1F 02 F6 | 	mov	local01, local06
0a280     01 1E 66 F0 | 	shl	local01, #1
0a284     14 1F 02 F1 | 	add	local01, local06
0a288     02 1E 66 F0 | 	shl	local01, #2
0a28c     03 00 00 FF 
0a290     00 E4 85 F1 | 	sub	objptr, ##1536
0a294     F2 1E 02 F1 | 	add	local01, objptr
0a298     04 1E 06 F1 | 	add	local01, #4
0a29c     0F 2B 62 FC | 	wrlong	local07, local01
0a2a0     03 00 00 FF 
0a2a4     00 E4 05 F1 | 	add	objptr, ##1536
0a2a8     F2 2A 02 FB | 	rdlong	local07, objptr
0a2ac     15 29 02 F6 | 	mov	local06, local07
0a2b0     01 28 66 F0 | 	shl	local06, #1
0a2b4     15 29 02 F1 | 	add	local06, local07
0a2b8     02 28 66 F0 | 	shl	local06, #2
0a2bc     03 00 00 FF 
0a2c0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2c4     F2 28 02 F1 | 	add	local06, objptr
0a2c8     08 28 06 F1 | 	add	local06, #8
0a2cc     14 27 62 FC | 	wrlong	local05, local06
0a2d0     03 00 00 FF 
0a2d4     00 E4 05 F1 | 	add	objptr, ##1536
0a2d8     F2 28 02 FB | 	rdlong	local06, objptr
0a2dc     01 28 06 F1 | 	add	local06, #1
0a2e0     F2 28 62 FC | 	wrlong	local06, objptr
0a2e4     13 00 00 FF 
0a2e8     38 E4 85 F1 | 	sub	objptr, ##9784
0a2ec     F2 28 02 FB | 	rdlong	local06, objptr
0a2f0     01 28 06 F1 | 	add	local06, #1
0a2f4     F2 28 62 FC | 	wrlong	local06, objptr
0a2f8     37 00 00 FF 
0a2fc     44 E4 85 F1 | 	sub	objptr, ##28228
0a300     E4 07 90 FD | 	jmp	#LR__0913
0a304                 | LR__0894
0a304                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a304     37 00 00 FF 
0a308     44 E4 05 F1 | 	add	objptr, ##28228
0a30c     F2 16 02 FB | 	rdlong	arg03, objptr
0a310     03 16 66 F0 | 	shl	arg03, #3
0a314     02 00 00 FF 
0a318     38 E4 85 F1 | 	sub	objptr, ##1080
0a31c     F2 16 02 F1 | 	add	arg03, objptr
0a320     0B 13 02 FB | 	rdlong	arg01, arg03
0a324     01 14 06 F6 | 	mov	arg02, #1
0a328     35 00 00 FF 
0a32c     0C E4 85 F1 | 	sub	objptr, ##27148
0a330     78 85 B1 FD | 	call	#__system__Left_S
0a334     FD 12 02 F6 | 	mov	arg01, result1
0a338     83 01 00 FF 
0a33c     28 15 06 F6 | 	mov	arg02, ##@LR__5400
0a340     14 65 B1 FD | 	call	#__system___string_cmp
0a344     00 FA 0D F2 | 	cmp	result1, #0 wz
0a348     94 00 90 5D |  if_ne	jmp	#LR__0897
0a34c     37 00 00 FF 
0a350     44 E4 05 F1 | 	add	objptr, ##28228
0a354     F2 2A 02 FB | 	rdlong	local07, objptr
0a358     15 29 02 F6 | 	mov	local06, local07
0a35c     03 28 66 F0 | 	shl	local06, #3
0a360     02 00 00 FF 
0a364     38 E4 85 F1 | 	sub	objptr, ##1080
0a368     F2 28 02 F1 | 	add	local06, objptr
0a36c     83 01 00 FF 
0a370     2A 27 06 F6 | 	mov	local05, ##@LR__5401
0a374     03 2A 66 F0 | 	shl	local07, #3
0a378     F2 2A 02 F1 | 	add	local07, objptr
0a37c     15 2B 02 FB | 	rdlong	local07, local07
0a380     02 00 00 FF 
0a384     38 E4 05 F1 | 	add	objptr, ##1080
0a388     F2 1E 02 FB | 	rdlong	local01, objptr
0a38c     03 1E 66 F0 | 	shl	local01, #3
0a390     02 00 00 FF 
0a394     38 E4 85 F1 | 	sub	objptr, ##1080
0a398     F2 1E 02 F1 | 	add	local01, objptr
0a39c     0F 13 02 FB | 	rdlong	arg01, local01
0a3a0     35 00 00 FF 
0a3a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a3a8     09 2D 02 F6 | 	mov	local08, arg01
0a3ac     97 06 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0a3b0                 | LR__0895
0a3b0     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a3b4     01 2C 06 51 |  if_ne	add	local08, #1
0a3b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0895
0a3bc                 | LR__0896
0a3bc     09 2D 82 F1 | 	sub	local08, arg01
0a3c0     16 15 02 F6 | 	mov	arg02, local08
0a3c4     01 14 86 F1 | 	sub	arg02, #1
0a3c8     15 13 02 F6 | 	mov	arg01, local07
0a3cc     64 85 B1 FD | 	call	#__system__Right_S
0a3d0     FD 14 02 F6 | 	mov	arg02, result1
0a3d4     13 13 02 F6 | 	mov	arg01, local05
0a3d8     B0 64 B1 FD | 	call	#__system___string_concat
0a3dc     14 FB 61 FC | 	wrlong	result1, local06
0a3e0                 | LR__0897
0a3e0                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a3e0     37 00 00 FF 
0a3e4     44 E4 05 F1 | 	add	objptr, ##28228
0a3e8     F2 16 02 FB | 	rdlong	arg03, objptr
0a3ec     03 16 66 F0 | 	shl	arg03, #3
0a3f0     02 00 00 FF 
0a3f4     38 E4 85 F1 | 	sub	objptr, ##1080
0a3f8     F2 16 02 F1 | 	add	arg03, objptr
0a3fc     0B 13 02 FB | 	rdlong	arg01, arg03
0a400     01 14 06 F6 | 	mov	arg02, #1
0a404     35 00 00 FF 
0a408     0C E4 85 F1 | 	sub	objptr, ##27148
0a40c     9C 84 B1 FD | 	call	#__system__Left_S
0a410     FD 12 02 F6 | 	mov	arg01, result1
0a414     83 01 00 FF 
0a418     2D 15 06 F6 | 	mov	arg02, ##@LR__5402
0a41c     38 64 B1 FD | 	call	#__system___string_cmp
0a420     00 FA 0D F2 | 	cmp	result1, #0 wz
0a424     94 00 90 5D |  if_ne	jmp	#LR__0900
0a428     37 00 00 FF 
0a42c     44 E4 05 F1 | 	add	objptr, ##28228
0a430     F2 2A 02 FB | 	rdlong	local07, objptr
0a434     15 29 02 F6 | 	mov	local06, local07
0a438     03 28 66 F0 | 	shl	local06, #3
0a43c     02 00 00 FF 
0a440     38 E4 85 F1 | 	sub	objptr, ##1080
0a444     F2 28 02 F1 | 	add	local06, objptr
0a448     83 01 00 FF 
0a44c     2F 27 06 F6 | 	mov	local05, ##@LR__5403
0a450     03 2A 66 F0 | 	shl	local07, #3
0a454     F2 2A 02 F1 | 	add	local07, objptr
0a458     15 2B 02 FB | 	rdlong	local07, local07
0a45c     02 00 00 FF 
0a460     38 E4 05 F1 | 	add	objptr, ##1080
0a464     F2 1E 02 FB | 	rdlong	local01, objptr
0a468     03 1E 66 F0 | 	shl	local01, #3
0a46c     02 00 00 FF 
0a470     38 E4 85 F1 | 	sub	objptr, ##1080
0a474     F2 1E 02 F1 | 	add	local01, objptr
0a478     0F 13 02 FB | 	rdlong	arg01, local01
0a47c     35 00 00 FF 
0a480     0C E4 85 F1 | 	sub	objptr, ##27148
0a484     09 2D 02 F6 | 	mov	local08, arg01
0a488     97 06 48 FB | 	callpa	#(@LR__0899-@LR__0898)>>2,fcache_load_ptr_
0a48c                 | LR__0898
0a48c     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a490     01 2C 06 51 |  if_ne	add	local08, #1
0a494     F4 FF 9F 5D |  if_ne	jmp	#LR__0898
0a498                 | LR__0899
0a498     09 2D 82 F1 | 	sub	local08, arg01
0a49c     16 15 02 F6 | 	mov	arg02, local08
0a4a0     01 14 86 F1 | 	sub	arg02, #1
0a4a4     15 13 02 F6 | 	mov	arg01, local07
0a4a8     88 84 B1 FD | 	call	#__system__Right_S
0a4ac     FD 14 02 F6 | 	mov	arg02, result1
0a4b0     13 13 02 F6 | 	mov	arg01, local05
0a4b4     D4 63 B1 FD | 	call	#__system___string_concat
0a4b8     14 FB 61 FC | 	wrlong	result1, local06
0a4bc                 | LR__0900
0a4bc     37 00 00 FF 
0a4c0     44 E4 05 F1 | 	add	objptr, ##28228
0a4c4     F2 28 02 FB | 	rdlong	local06, objptr
0a4c8     03 28 66 F0 | 	shl	local06, #3
0a4cc     02 00 00 FF 
0a4d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a4d4     F2 28 02 F1 | 	add	local06, objptr
0a4d8     14 13 02 FB | 	rdlong	arg01, local06
0a4dc     00 14 06 F6 | 	mov	arg02, #0
0a4e0     35 00 00 FF 
0a4e4     0C E4 85 F1 | 	sub	objptr, ##27148
0a4e8     70 95 B1 FD | 	call	#__system____builtin_atoi
0a4ec     FD 24 02 FD | 	qmul	local04, result1
0a4f0     4A 00 00 FF 
0a4f4     7C E4 05 F1 | 	add	objptr, ##38012
0a4f8     F2 28 02 FB | 	rdlong	local06, objptr
0a4fc     14 2F 02 F6 | 	mov	local09, local06
0a500     01 2E 66 F0 | 	shl	local09, #1
0a504     14 2F 02 F1 | 	add	local09, local06
0a508     02 2E 66 F0 | 	shl	local09, #2
0a50c     03 00 00 FF 
0a510     00 E4 85 F1 | 	sub	objptr, ##1536
0a514     F2 2E 02 F1 | 	add	local09, objptr
0a518     03 00 00 FF 
0a51c     00 E4 05 F1 | 	add	objptr, ##1536
0a520     18 1E 62 FD | 	getqx	local01
0a524     1C 22 06 F6 | 	mov	local03, #28
0a528     0F 29 02 F6 | 	mov	local06, local01
0a52c     10 2B 02 F6 | 	mov	local07, local02
0a530     17 29 62 FC | 	wrlong	local06, local09
0a534     11 2F 02 F6 | 	mov	local09, local03
0a538     F2 28 02 FB | 	rdlong	local06, objptr
0a53c     14 27 02 F6 | 	mov	local05, local06
0a540     01 26 66 F0 | 	shl	local05, #1
0a544     14 27 02 F1 | 	add	local05, local06
0a548     02 26 66 F0 | 	shl	local05, #2
0a54c     03 00 00 FF 
0a550     00 E4 85 F1 | 	sub	objptr, ##1536
0a554     F2 26 02 F1 | 	add	local05, objptr
0a558     04 26 06 F1 | 	add	local05, #4
0a55c     13 2B 62 FC | 	wrlong	local07, local05
0a560     03 00 00 FF 
0a564     00 E4 05 F1 | 	add	objptr, ##1536
0a568     F2 2A 02 FB | 	rdlong	local07, objptr
0a56c     15 29 02 F6 | 	mov	local06, local07
0a570     01 28 66 F0 | 	shl	local06, #1
0a574     15 29 02 F1 | 	add	local06, local07
0a578     02 28 66 F0 | 	shl	local06, #2
0a57c     03 00 00 FF 
0a580     00 E4 85 F1 | 	sub	objptr, ##1536
0a584     F2 28 02 F1 | 	add	local06, objptr
0a588     08 28 06 F1 | 	add	local06, #8
0a58c     14 2F 62 FC | 	wrlong	local09, local06
0a590     03 00 00 FF 
0a594     00 E4 05 F1 | 	add	objptr, ##1536
0a598     F2 28 02 FB | 	rdlong	local06, objptr
0a59c     01 28 06 F1 | 	add	local06, #1
0a5a0     F2 28 62 FC | 	wrlong	local06, objptr
0a5a4     13 00 00 FF 
0a5a8     38 E4 85 F1 | 	sub	objptr, ##9784
0a5ac     F2 28 02 FB | 	rdlong	local06, objptr
0a5b0     01 28 06 F1 | 	add	local06, #1
0a5b4     F2 28 62 FC | 	wrlong	local06, objptr
0a5b8     37 00 00 FF 
0a5bc     44 E4 85 F1 | 	sub	objptr, ##28228
0a5c0     24 05 90 FD | 	jmp	#LR__0913
0a5c4                 | LR__0901
0a5c4                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0a5c4     01 24 0E F2 | 	cmp	local04, #1 wz
0a5c8     48 00 90 5D |  if_ne	jmp	#LR__0902
0a5cc     00 C0 1F FF 
0a5d0     00 28 06 F6 | 	mov	local06, ##1065353216
0a5d4     37 00 00 FF 
0a5d8     44 E4 05 F1 | 	add	objptr, ##28228
0a5dc     F2 2E 02 FB | 	rdlong	local09, objptr
0a5e0     03 2E 66 F0 | 	shl	local09, #3
0a5e4     02 00 00 FF 
0a5e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a5ec     F2 2E 02 F1 | 	add	local09, objptr
0a5f0     17 13 02 FB | 	rdlong	arg01, local09
0a5f4     35 00 00 FF 
0a5f8     0C E4 85 F1 | 	sub	objptr, ##27148
0a5fc     F0 95 B1 FD | 	call	#__system____builtin_atof
0a600     FD 14 02 F6 | 	mov	arg02, result1
0a604     14 13 02 F6 | 	mov	arg01, local06
0a608     D8 8D B1 FD | 	call	#__system___float_mul
0a60c     FD 1E 02 F6 | 	mov	local01, result1
0a610     1E 22 06 F6 | 	mov	local03, #30
0a614                 | LR__0902
0a614                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0a614     FF FF 7F FF 
0a618     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a61c     48 00 90 5D |  if_ne	jmp	#LR__0903
0a620     00 C0 5F FF 
0a624     00 28 06 F6 | 	mov	local06, ##-1082130432
0a628     37 00 00 FF 
0a62c     44 E4 05 F1 | 	add	objptr, ##28228
0a630     F2 2E 02 FB | 	rdlong	local09, objptr
0a634     03 2E 66 F0 | 	shl	local09, #3
0a638     02 00 00 FF 
0a63c     38 E4 85 F1 | 	sub	objptr, ##1080
0a640     F2 2E 02 F1 | 	add	local09, objptr
0a644     17 13 02 FB | 	rdlong	arg01, local09
0a648     35 00 00 FF 
0a64c     0C E4 85 F1 | 	sub	objptr, ##27148
0a650     9C 95 B1 FD | 	call	#__system____builtin_atof
0a654     FD 14 02 F6 | 	mov	arg02, result1
0a658     14 13 02 F6 | 	mov	arg01, local06
0a65c     84 8D B1 FD | 	call	#__system___float_mul
0a660     FD 1E 02 F6 | 	mov	local01, result1
0a664     1E 22 06 F6 | 	mov	local03, #30
0a668                 | LR__0903
0a668     0F 29 02 F6 | 	mov	local06, local01
0a66c     10 2B 02 F6 | 	mov	local07, local02
0a670     11 27 02 F6 | 	mov	local05, local03
0a674     4A 00 00 FF 
0a678     7C E4 05 F1 | 	add	objptr, ##38012
0a67c     F2 1E 02 FB | 	rdlong	local01, objptr
0a680     0F 2F 02 F6 | 	mov	local09, local01
0a684     01 2E 66 F0 | 	shl	local09, #1
0a688     0F 2F 02 F1 | 	add	local09, local01
0a68c     02 2E 66 F0 | 	shl	local09, #2
0a690     03 00 00 FF 
0a694     00 E4 85 F1 | 	sub	objptr, ##1536
0a698     F2 2E 02 F1 | 	add	local09, objptr
0a69c     17 29 62 FC | 	wrlong	local06, local09
0a6a0     03 00 00 FF 
0a6a4     00 E4 05 F1 | 	add	objptr, ##1536
0a6a8     F2 2E 02 FB | 	rdlong	local09, objptr
0a6ac     17 29 02 F6 | 	mov	local06, local09
0a6b0     01 28 66 F0 | 	shl	local06, #1
0a6b4     17 29 02 F1 | 	add	local06, local09
0a6b8     02 28 66 F0 | 	shl	local06, #2
0a6bc     03 00 00 FF 
0a6c0     00 E4 85 F1 | 	sub	objptr, ##1536
0a6c4     F2 28 02 F1 | 	add	local06, objptr
0a6c8     04 28 06 F1 | 	add	local06, #4
0a6cc     14 2B 62 FC | 	wrlong	local07, local06
0a6d0     03 00 00 FF 
0a6d4     00 E4 05 F1 | 	add	objptr, ##1536
0a6d8     F2 2E 02 FB | 	rdlong	local09, objptr
0a6dc     17 2B 02 F6 | 	mov	local07, local09
0a6e0     01 2A 66 F0 | 	shl	local07, #1
0a6e4     17 2B 02 F1 | 	add	local07, local09
0a6e8     02 2A 66 F0 | 	shl	local07, #2
0a6ec     03 00 00 FF 
0a6f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a6f4     F2 2A 02 F1 | 	add	local07, objptr
0a6f8     08 2A 06 F1 | 	add	local07, #8
0a6fc     15 27 62 FC | 	wrlong	local05, local07
0a700     03 00 00 FF 
0a704     00 E4 05 F1 | 	add	objptr, ##1536
0a708     F2 28 02 FB | 	rdlong	local06, objptr
0a70c     01 28 06 F1 | 	add	local06, #1
0a710     F2 28 62 FC | 	wrlong	local06, objptr
0a714     13 00 00 FF 
0a718     38 E4 85 F1 | 	sub	objptr, ##9784
0a71c     F2 28 02 FB | 	rdlong	local06, objptr
0a720     01 28 06 F1 | 	add	local06, #1
0a724     F2 28 62 FC | 	wrlong	local06, objptr
0a728     37 00 00 FF 
0a72c     44 E4 85 F1 | 	sub	objptr, ##28228
0a730     B4 03 90 FD | 	jmp	#LR__0913
0a734                 | LR__0904
0a734     37 00 00 FF 
0a738     44 E4 05 F1 | 	add	objptr, ##28228
0a73c     F2 16 02 FB | 	rdlong	arg03, objptr
0a740     03 16 66 F0 | 	shl	arg03, #3
0a744     02 00 00 FF 
0a748     38 E4 85 F1 | 	sub	objptr, ##1080
0a74c     F2 16 02 F1 | 	add	arg03, objptr
0a750     0B 13 02 FB | 	rdlong	arg01, arg03
0a754     35 00 00 FF 
0a758     0C E4 85 F1 | 	sub	objptr, ##27148
0a75c     09 2D 02 F6 | 	mov	local08, arg01
0a760     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a764                 | LR__0905
0a764     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a768     01 2C 06 51 |  if_ne	add	local08, #1
0a76c     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a770                 | LR__0906
0a770     09 2D 82 F1 | 	sub	local08, arg01
0a774     16 FB 01 F6 | 	mov	result1, local08
0a778     51 00 00 FF 
0a77c     F8 E5 05 F1 | 	add	objptr, ##41976
0a780     F2 FA 61 FC | 	wrlong	result1, objptr
0a784     4C E4 85 F1 | 	sub	objptr, #76
0a788     F2 12 02 FB | 	rdlong	arg01, objptr
0a78c     FD 12 82 F1 | 	sub	arg01, result1
0a790     04 12 86 F1 | 	sub	arg01, #4
0a794     03 12 26 F5 | 	andn	arg01, #3
0a798     F2 12 62 FC | 	wrlong	arg01, objptr
0a79c     4C E4 05 F1 | 	add	objptr, #76
0a7a0     F2 14 02 FB | 	rdlong	arg02, objptr
0a7a4     51 00 00 FF 
0a7a8     F8 E5 85 F1 | 	sub	objptr, ##41976
0a7ac     54 2C B1 FD | 	call	#_pslpoke
0a7b0                 | '     pslpoke memtop,l
0a7b0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0a7b0     01 30 06 F6 | 	mov	local10, #1
0a7b4     51 00 00 FF 
0a7b8     F8 E5 05 F1 | 	add	objptr, ##41976
0a7bc     F2 32 02 FB | 	rdlong	local11, objptr
0a7c0     51 00 00 FF 
0a7c4     F8 E5 85 F1 | 	sub	objptr, ##41976
0a7c8     01 32 06 F1 | 	add	local11, #1
0a7cc                 | LR__0907
0a7cc     19 31 52 F2 | 	cmps	local10, local11 wc
0a7d0     5C 00 90 3D |  if_ae	jmp	#LR__0908
0a7d4     51 00 00 FF 
0a7d8     AC E5 05 F1 | 	add	objptr, ##41900
0a7dc     F2 2A 02 FB | 	rdlong	local07, objptr
0a7e0     03 2A 06 F1 | 	add	local07, #3
0a7e4     18 2B 02 F1 | 	add	local07, local10
0a7e8     1A 00 00 FF 
0a7ec     68 E5 85 F1 | 	sub	objptr, ##13672
0a7f0     F2 2E 02 FB | 	rdlong	local09, objptr
0a7f4     03 2E 66 F0 | 	shl	local09, #3
0a7f8     02 00 00 FF 
0a7fc     38 E4 85 F1 | 	sub	objptr, ##1080
0a800     F2 2E 02 F1 | 	add	local09, objptr
0a804     17 13 02 FB | 	rdlong	arg01, local09
0a808     18 15 02 F6 | 	mov	arg02, local10
0a80c     01 16 06 F6 | 	mov	arg03, #1
0a810     35 00 00 FF 
0a814     0C E4 85 F1 | 	sub	objptr, ##27148
0a818     A8 81 B1 FD | 	call	#__system__Mid_S
0a81c     FD 14 C2 FA | 	rdbyte	arg02, result1
0a820     15 13 02 F6 | 	mov	arg01, local07
0a824     6C 2C B1 FD | 	call	#_pspoke
0a828     01 30 06 F1 | 	add	local10, #1
0a82c     9C FF 9F FD | 	jmp	#LR__0907
0a830                 | LR__0908
0a830     51 00 00 FF 
0a834     AC E5 05 F1 | 	add	objptr, ##41900
0a838     F2 1E 02 FB | 	rdlong	local01, objptr
0a83c     2B 22 06 F6 | 	mov	local03, #43
0a840     0F 29 02 F6 | 	mov	local06, local01
0a844     10 2B 02 F6 | 	mov	local07, local02
0a848     11 33 02 F6 | 	mov	local11, local03
0a84c     07 00 00 FF 
0a850     30 E5 85 F1 | 	sub	objptr, ##3888
0a854     F2 30 02 FB | 	rdlong	local10, objptr
0a858     18 2F 02 F6 | 	mov	local09, local10
0a85c     01 2E 66 F0 | 	shl	local09, #1
0a860     18 2F 02 F1 | 	add	local09, local10
0a864     02 2E 66 F0 | 	shl	local09, #2
0a868     03 00 00 FF 
0a86c     00 E4 85 F1 | 	sub	objptr, ##1536
0a870     F2 2E 02 F1 | 	add	local09, objptr
0a874     17 29 62 FC | 	wrlong	local06, local09
0a878     03 00 00 FF 
0a87c     00 E4 05 F1 | 	add	objptr, ##1536
0a880     F2 30 02 FB | 	rdlong	local10, objptr
0a884     18 2F 02 F6 | 	mov	local09, local10
0a888     01 2E 66 F0 | 	shl	local09, #1
0a88c     18 2F 02 F1 | 	add	local09, local10
0a890     02 2E 66 F0 | 	shl	local09, #2
0a894     03 00 00 FF 
0a898     00 E4 85 F1 | 	sub	objptr, ##1536
0a89c     F2 2E 02 F1 | 	add	local09, objptr
0a8a0     04 2E 06 F1 | 	add	local09, #4
0a8a4     17 2B 62 FC | 	wrlong	local07, local09
0a8a8     03 00 00 FF 
0a8ac     00 E4 05 F1 | 	add	objptr, ##1536
0a8b0     F2 30 02 FB | 	rdlong	local10, objptr
0a8b4     18 2F 02 F6 | 	mov	local09, local10
0a8b8     01 2E 66 F0 | 	shl	local09, #1
0a8bc     18 2F 02 F1 | 	add	local09, local10
0a8c0     02 2E 66 F0 | 	shl	local09, #2
0a8c4     03 00 00 FF 
0a8c8     00 E4 85 F1 | 	sub	objptr, ##1536
0a8cc     F2 2E 02 F1 | 	add	local09, objptr
0a8d0     08 2E 06 F1 | 	add	local09, #8
0a8d4     17 33 62 FC | 	wrlong	local11, local09
0a8d8     03 00 00 FF 
0a8dc     00 E4 05 F1 | 	add	objptr, ##1536
0a8e0     F2 28 02 FB | 	rdlong	local06, objptr
0a8e4     01 28 06 F1 | 	add	local06, #1
0a8e8     F2 28 62 FC | 	wrlong	local06, objptr
0a8ec     13 00 00 FF 
0a8f0     38 E4 85 F1 | 	sub	objptr, ##9784
0a8f4     F2 28 02 FB | 	rdlong	local06, objptr
0a8f8     01 28 06 F1 | 	add	local06, #1
0a8fc     F2 28 62 FC | 	wrlong	local06, objptr
0a900     37 00 00 FF 
0a904     44 E4 85 F1 | 	sub	objptr, ##28228
0a908     DC 01 90 FD | 	jmp	#LR__0913
0a90c                 | LR__0909
0a90c     2C 22 06 F6 | 	mov	local03, #44
0a910     37 00 00 FF 
0a914     44 E4 05 F1 | 	add	objptr, ##28228
0a918     F2 28 02 FB | 	rdlong	local06, objptr
0a91c     03 28 66 F0 | 	shl	local06, #3
0a920     02 00 00 FF 
0a924     38 E4 85 F1 | 	sub	objptr, ##1080
0a928     F2 28 02 F1 | 	add	local06, objptr
0a92c     14 13 02 FB | 	rdlong	arg01, local06
0a930     00 14 06 F6 | 	mov	arg02, #0
0a934     35 00 00 FF 
0a938     0C E4 85 F1 | 	sub	objptr, ##27148
0a93c     1C 91 B1 FD | 	call	#__system____builtin_atoi
0a940     FD 1E 02 F6 | 	mov	local01, result1
0a944     0F 29 02 F6 | 	mov	local06, local01
0a948     10 2B 02 F6 | 	mov	local07, local02
0a94c     11 33 02 F6 | 	mov	local11, local03
0a950     4A 00 00 FF 
0a954     7C E4 05 F1 | 	add	objptr, ##38012
0a958     F2 30 02 FB | 	rdlong	local10, objptr
0a95c     18 2F 02 F6 | 	mov	local09, local10
0a960     01 2E 66 F0 | 	shl	local09, #1
0a964     18 2F 02 F1 | 	add	local09, local10
0a968     02 2E 66 F0 | 	shl	local09, #2
0a96c     03 00 00 FF 
0a970     00 E4 85 F1 | 	sub	objptr, ##1536
0a974     F2 2E 02 F1 | 	add	local09, objptr
0a978     17 29 62 FC | 	wrlong	local06, local09
0a97c     03 00 00 FF 
0a980     00 E4 05 F1 | 	add	objptr, ##1536
0a984     F2 30 02 FB | 	rdlong	local10, objptr
0a988     18 2F 02 F6 | 	mov	local09, local10
0a98c     01 2E 66 F0 | 	shl	local09, #1
0a990     18 2F 02 F1 | 	add	local09, local10
0a994     02 2E 66 F0 | 	shl	local09, #2
0a998     03 00 00 FF 
0a99c     00 E4 85 F1 | 	sub	objptr, ##1536
0a9a0     F2 2E 02 F1 | 	add	local09, objptr
0a9a4     04 2E 06 F1 | 	add	local09, #4
0a9a8     17 2B 62 FC | 	wrlong	local07, local09
0a9ac     03 00 00 FF 
0a9b0     00 E4 05 F1 | 	add	objptr, ##1536
0a9b4     F2 30 02 FB | 	rdlong	local10, objptr
0a9b8     18 2F 02 F6 | 	mov	local09, local10
0a9bc     01 2E 66 F0 | 	shl	local09, #1
0a9c0     18 2F 02 F1 | 	add	local09, local10
0a9c4     02 2E 66 F0 | 	shl	local09, #2
0a9c8     03 00 00 FF 
0a9cc     00 E4 85 F1 | 	sub	objptr, ##1536
0a9d0     F2 2E 02 F1 | 	add	local09, objptr
0a9d4     08 2E 06 F1 | 	add	local09, #8
0a9d8     17 33 62 FC | 	wrlong	local11, local09
0a9dc     03 00 00 FF 
0a9e0     00 E4 05 F1 | 	add	objptr, ##1536
0a9e4     F2 28 02 FB | 	rdlong	local06, objptr
0a9e8     01 28 06 F1 | 	add	local06, #1
0a9ec     F2 28 62 FC | 	wrlong	local06, objptr
0a9f0     13 00 00 FF 
0a9f4     38 E4 85 F1 | 	sub	objptr, ##9784
0a9f8     F2 28 02 FB | 	rdlong	local06, objptr
0a9fc     01 28 06 F1 | 	add	local06, #1
0aa00     F2 28 62 FC | 	wrlong	local06, objptr
0aa04     37 00 00 FF 
0aa08     44 E4 85 F1 | 	sub	objptr, ##28228
0aa0c     D8 00 90 FD | 	jmp	#LR__0913
0aa10                 | LR__0910
0aa10     12 13 02 F6 | 	mov	arg01, local04
0aa14     24 04 B0 FD | 	call	#_getvar
0aa18     37 00 00 FF 
0aa1c     44 E4 05 F1 | 	add	objptr, ##28228
0aa20     F2 28 02 FB | 	rdlong	local06, objptr
0aa24     01 28 06 F1 | 	add	local06, #1
0aa28     F2 28 62 FC | 	wrlong	local06, objptr
0aa2c     37 00 00 FF 
0aa30     44 E4 85 F1 | 	sub	objptr, ##28228
0aa34                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0aa34     01 FA 55 F2 | 	cmps	result1, #1 wc
0aa38     B0 00 90 3D |  if_ae	jmp	#LR__0914
0aa3c     A8 00 90 FD | 	jmp	#LR__0913
0aa40                 | LR__0911
0aa40     37 00 00 FF 
0aa44     44 E4 05 F1 | 	add	objptr, ##28228
0aa48     F2 28 02 FB | 	rdlong	local06, objptr
0aa4c     01 28 06 F1 | 	add	local06, #1
0aa50     F2 28 62 FC | 	wrlong	local06, objptr
0aa54     37 00 00 FF 
0aa58     44 E4 85 F1 | 	sub	objptr, ##28228
0aa5c     20 F1 BF FD | 	call	#_expr
0aa60                 | '     ct+=1
0aa60                 | '     err=expr() : if err>0 then return err 
0aa60     01 FA 55 F2 | 	cmps	result1, #1 wc
0aa64     84 00 90 3D |  if_ae	jmp	#LR__0914
0aa68                 | '     if lparts(ct).token=token_rpar then ct+=1
0aa68     37 00 00 FF 
0aa6c     44 E4 05 F1 | 	add	objptr, ##28228
0aa70     F2 32 02 FB | 	rdlong	local11, objptr
0aa74     03 32 66 F0 | 	shl	local11, #3
0aa78     02 00 00 FF 
0aa7c     38 E4 85 F1 | 	sub	objptr, ##1080
0aa80     F2 32 02 F1 | 	add	local11, objptr
0aa84     04 32 06 F1 | 	add	local11, #4
0aa88     19 33 02 FB | 	rdlong	local11, local11
0aa8c     14 32 0E F2 | 	cmp	local11, #20 wz
0aa90     35 00 00 FF 
0aa94     0C E4 85 F1 | 	sub	objptr, ##27148
0aa98     4C 00 90 5D |  if_ne	jmp	#LR__0913
0aa9c     37 00 00 FF 
0aaa0     44 E4 05 F1 | 	add	objptr, ##28228
0aaa4     F2 28 02 FB | 	rdlong	local06, objptr
0aaa8     01 28 06 F1 | 	add	local06, #1
0aaac     F2 28 62 FC | 	wrlong	local06, objptr
0aab0     37 00 00 FF 
0aab4     44 E4 85 F1 | 	sub	objptr, ##28228
0aab8     2C 00 90 FD | 	jmp	#LR__0913
0aabc                 | LR__0912
0aabc     12 13 02 F6 | 	mov	arg01, local04
0aac0     34 00 B0 FD | 	call	#_getfun
0aac4     37 00 00 FF 
0aac8     44 E4 05 F1 | 	add	objptr, ##28228
0aacc     F2 28 02 FB | 	rdlong	local06, objptr
0aad0     01 28 06 F1 | 	add	local06, #1
0aad4     F2 28 62 FC | 	wrlong	local06, objptr
0aad8     37 00 00 FF 
0aadc     44 E4 85 F1 | 	sub	objptr, ##28228
0aae0                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0aae0     01 FA 55 F2 | 	cmps	result1, #1 wc
0aae4     04 00 90 3D |  if_ae	jmp	#LR__0914
0aae8                 | LR__0913
0aae8                 | ' return 0  
0aae8     00 FA 05 F6 | 	mov	result1, #0
0aaec                 | LR__0914
0aaec     A7 F0 03 F6 | 	mov	ptra, fp
0aaf0     B2 00 A0 FD | 	call	#popregs_
0aaf4                 | _getvalue_ret
0aaf4     2D 00 64 FD | 	ret
0aaf8                 | 
0aaf8                 | ' 
0aaf8                 | ' ' Get a function result 
0aaf8                 | ' 
0aaf8                 | ' function getfun(m as integer) as ulong
0aaf8                 | _getfun
0aaf8     0F 4A 05 F6 | 	mov	COUNT_, #15
0aafc     A8 00 A0 FD | 	call	#pushregs_
0ab00                 | _getfun_enter
0ab00     09 25 02 F6 | 	mov	local04, arg01
0ab04     37 00 00 FF 
0ab08     44 E4 05 F1 | 	add	objptr, ##28228
0ab0c     F2 26 02 FB | 	rdlong	local05, objptr
0ab10     13 29 02 F6 | 	mov	local06, local05
0ab14     00 2A 06 F6 | 	mov	local07, #0
0ab18                 | ' oldct=ct
0ab18                 | ' numpar=0
0ab18                 | ' if lparts(ct+1).token=token_lpar then
0ab18     01 26 06 F1 | 	add	local05, #1
0ab1c     03 26 66 F0 | 	shl	local05, #3
0ab20     02 00 00 FF 
0ab24     38 E4 85 F1 | 	sub	objptr, ##1080
0ab28     F2 26 02 F1 | 	add	local05, objptr
0ab2c     04 26 06 F1 | 	add	local05, #4
0ab30     13 27 02 FB | 	rdlong	local05, local05
0ab34     15 26 0E F2 | 	cmp	local05, #21 wz
0ab38     35 00 00 FF 
0ab3c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab40     54 01 90 5D |  if_ne	jmp	#LR__0924
0ab44     37 00 00 FF 
0ab48     44 E4 05 F1 | 	add	objptr, ##28228
0ab4c     F2 2C 02 FB | 	rdlong	local08, objptr
0ab50     01 2C 06 F1 | 	add	local08, #1
0ab54     F2 2C 62 FC | 	wrlong	local08, objptr
0ab58     37 00 00 FF 
0ab5c     44 E4 85 F1 | 	sub	objptr, ##28228
0ab60                 | '   ct+=1 											' omit this lpar, this is for expr list
0ab60                 | '   do
0ab60                 | LR__0920
0ab60     37 00 00 FF 
0ab64     44 E4 05 F1 | 	add	objptr, ##28228
0ab68     F2 26 02 FB | 	rdlong	local05, objptr
0ab6c     01 26 06 F1 | 	add	local05, #1
0ab70     F2 26 62 FC | 	wrlong	local05, objptr
0ab74                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ab74                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ab74     03 26 66 F0 | 	shl	local05, #3
0ab78     02 00 00 FF 
0ab7c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab80     F2 26 02 F1 | 	add	local05, objptr
0ab84     04 26 06 F1 | 	add	local05, #4
0ab88     13 2D 02 FB | 	rdlong	local08, local05
0ab8c     15 2C 0E F2 | 	cmp	local08, #21 wz
0ab90     35 00 00 FF 
0ab94     0C E4 85 F1 | 	sub	objptr, ##27148
0ab98     44 00 90 5D |  if_ne	jmp	#LR__0921
0ab9c     37 00 00 FF 
0aba0     44 E4 05 F1 | 	add	objptr, ##28228
0aba4     F2 2C 02 FB | 	rdlong	local08, objptr
0aba8     01 2C 06 F1 | 	add	local08, #1
0abac     F2 2C 62 FC | 	wrlong	local08, objptr
0abb0     37 00 00 FF 
0abb4     44 E4 85 F1 | 	sub	objptr, ##28228
0abb8     C4 EF BF FD | 	call	#_expr
0abbc     FD 2E 02 F6 | 	mov	local09, result1
0abc0     37 00 00 FF 
0abc4     44 E4 05 F1 | 	add	objptr, ##28228
0abc8     F2 2C 02 FB | 	rdlong	local08, objptr
0abcc     01 2C 06 F1 | 	add	local08, #1
0abd0     F2 2C 62 FC | 	wrlong	local08, objptr
0abd4     37 00 00 FF 
0abd8     44 E4 85 F1 | 	sub	objptr, ##28228
0abdc     08 00 90 FD | 	jmp	#LR__0922
0abe0                 | LR__0921
0abe0     9C EF BF FD | 	call	#_expr
0abe4     FD 2E 02 F6 | 	mov	local09, result1
0abe8                 | LR__0922
0abe8                 | '     if err>0 then return err
0abe8     01 2E 16 F2 | 	cmp	local09, #1 wc
0abec     17 FB 01 36 |  if_ae	mov	result1, local09
0abf0     3C 02 90 3D |  if_ae	jmp	#LR__0926
0abf4     01 2A 06 F1 | 	add	local07, #1
0abf8     37 00 00 FF 
0abfc     44 E4 05 F1 | 	add	objptr, ##28228
0ac00     F2 26 02 FB | 	rdlong	local05, objptr
0ac04     03 26 66 F0 | 	shl	local05, #3
0ac08     02 00 00 FF 
0ac0c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac10     F2 26 02 F1 | 	add	local05, objptr
0ac14     04 26 06 F1 | 	add	local05, #4
0ac18     13 2F 02 FB | 	rdlong	local09, local05
0ac1c     14 2E 0E F2 | 	cmp	local09, #20 wz
0ac20     35 00 00 FF 
0ac24     0C E4 85 F1 | 	sub	objptr, ##27148
0ac28     34 00 90 AD |  if_e	jmp	#LR__0923
0ac2c     37 00 00 FF 
0ac30     44 E4 05 F1 | 	add	objptr, ##28228
0ac34     F2 2E 02 FB | 	rdlong	local09, objptr
0ac38     03 2E 66 F0 | 	shl	local09, #3
0ac3c     02 00 00 FF 
0ac40     38 E4 85 F1 | 	sub	objptr, ##1080
0ac44     F2 2E 02 F1 | 	add	local09, objptr
0ac48     04 2E 06 F1 | 	add	local09, #4
0ac4c     17 2F 02 FB | 	rdlong	local09, local09
0ac50     FE 2F 0E F2 | 	cmp	local09, #510 wz
0ac54     35 00 00 FF 
0ac58     0C E4 85 F1 | 	sub	objptr, ##27148
0ac5c     00 FF 9F 5D |  if_ne	jmp	#LR__0920
0ac60                 | LR__0923
0ac60                 | '   if lparts(ct).token=token_end then return 14
0ac60     37 00 00 FF 
0ac64     44 E4 05 F1 | 	add	objptr, ##28228
0ac68     F2 26 02 FB | 	rdlong	local05, objptr
0ac6c     03 26 66 F0 | 	shl	local05, #3
0ac70     02 00 00 FF 
0ac74     38 E4 85 F1 | 	sub	objptr, ##1080
0ac78     F2 26 02 F1 | 	add	local05, objptr
0ac7c     04 26 06 F1 | 	add	local05, #4
0ac80     13 2F 02 FB | 	rdlong	local09, local05
0ac84     FE 2F 0E F2 | 	cmp	local09, #510 wz
0ac88     35 00 00 FF 
0ac8c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac90     0E FA 05 A6 |  if_e	mov	result1, #14
0ac94     98 01 90 AD |  if_e	jmp	#LR__0926
0ac98                 | LR__0924
0ac98     15 1F 02 F6 | 	mov	local01, local07
0ac9c     03 28 66 F0 | 	shl	local06, #3
0aca0     35 00 00 FF 
0aca4     0C E4 05 F1 | 	add	objptr, ##27148
0aca8     F2 28 02 F1 | 	add	local06, objptr
0acac     04 28 06 F1 | 	add	local06, #4
0acb0     14 23 02 FB | 	rdlong	local03, local06
0acb4     0F 2D 02 F6 | 	mov	local08, local01
0acb8     10 31 02 F6 | 	mov	local10, local02
0acbc     11 33 02 F6 | 	mov	local11, local03
0acc0     15 00 00 FF 
0acc4     70 E4 05 F1 | 	add	objptr, ##10864
0acc8     F2 34 02 FB | 	rdlong	local12, objptr
0accc     1A 37 02 F6 | 	mov	local13, local12
0acd0     01 36 66 F0 | 	shl	local13, #1
0acd4     1A 37 02 F1 | 	add	local13, local12
0acd8     02 36 66 F0 | 	shl	local13, #2
0acdc     03 00 00 FF 
0ace0     00 E4 85 F1 | 	sub	objptr, ##1536
0ace4     F2 36 02 F1 | 	add	local13, objptr
0ace8     1B 2D 62 FC | 	wrlong	local08, local13
0acec     03 00 00 FF 
0acf0     00 E4 05 F1 | 	add	objptr, ##1536
0acf4     F2 2C 02 FB | 	rdlong	local08, objptr
0acf8     16 39 02 F6 | 	mov	local14, local08
0acfc     01 38 66 F0 | 	shl	local14, #1
0ad00     16 39 02 F1 | 	add	local14, local08
0ad04     02 38 66 F0 | 	shl	local14, #2
0ad08     03 00 00 FF 
0ad0c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad10     F2 38 02 F1 | 	add	local14, objptr
0ad14     04 38 06 F1 | 	add	local14, #4
0ad18     1C 31 62 FC | 	wrlong	local10, local14
0ad1c     03 00 00 FF 
0ad20     00 E4 05 F1 | 	add	objptr, ##1536
0ad24     F2 2C 02 FB | 	rdlong	local08, objptr
0ad28     16 3B 02 F6 | 	mov	local15, local08
0ad2c     01 3A 66 F0 | 	shl	local15, #1
0ad30     16 3B 02 F1 | 	add	local15, local08
0ad34     02 3A 66 F0 | 	shl	local15, #2
0ad38     03 00 00 FF 
0ad3c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad40     F2 3A 02 F1 | 	add	local15, objptr
0ad44     08 3A 06 F1 | 	add	local15, #8
0ad48     1D 33 62 FC | 	wrlong	local11, local15
0ad4c     03 00 00 FF 
0ad50     00 E4 05 F1 | 	add	objptr, ##1536
0ad54     F2 2C 02 FB | 	rdlong	local08, objptr
0ad58     01 2C 06 F1 | 	add	local08, #1
0ad5c     F2 2C 62 FC | 	wrlong	local08, objptr
0ad60     4A 00 00 FF 
0ad64     7C E4 85 F1 | 	sub	objptr, ##38012
0ad68                 | ' t2.result.uresult=numpar
0ad68                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0ad68                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0ad68                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0ad68     FF FF 7F FF 
0ad6c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0ad70     B8 00 90 5D |  if_ne	jmp	#LR__0925
0ad74     15 22 06 F6 | 	mov	local03, #21
0ad78     0F 2D 02 F6 | 	mov	local08, local01
0ad7c     10 31 02 F6 | 	mov	local10, local02
0ad80     11 33 02 F6 | 	mov	local11, local03
0ad84     4A 00 00 FF 
0ad88     7C E4 05 F1 | 	add	objptr, ##38012
0ad8c     F2 34 02 FB | 	rdlong	local12, objptr
0ad90     1A 37 02 F6 | 	mov	local13, local12
0ad94     01 36 66 F0 | 	shl	local13, #1
0ad98     1A 37 02 F1 | 	add	local13, local12
0ad9c     02 36 66 F0 | 	shl	local13, #2
0ada0     03 00 00 FF 
0ada4     00 E4 85 F1 | 	sub	objptr, ##1536
0ada8     F2 36 02 F1 | 	add	local13, objptr
0adac     1B 2D 62 FC | 	wrlong	local08, local13
0adb0     03 00 00 FF 
0adb4     00 E4 05 F1 | 	add	objptr, ##1536
0adb8     F2 3A 02 FB | 	rdlong	local15, objptr
0adbc     1D 39 02 F6 | 	mov	local14, local15
0adc0     01 38 66 F0 | 	shl	local14, #1
0adc4     1D 39 02 F1 | 	add	local14, local15
0adc8     02 38 66 F0 | 	shl	local14, #2
0adcc     03 00 00 FF 
0add0     00 E4 85 F1 | 	sub	objptr, ##1536
0add4     F2 38 02 F1 | 	add	local14, objptr
0add8     04 38 06 F1 | 	add	local14, #4
0addc     1C 31 62 FC | 	wrlong	local10, local14
0ade0     03 00 00 FF 
0ade4     00 E4 05 F1 | 	add	objptr, ##1536
0ade8     F2 38 02 FB | 	rdlong	local14, objptr
0adec     1C 3B 02 F6 | 	mov	local15, local14
0adf0     01 3A 66 F0 | 	shl	local15, #1
0adf4     1C 3B 02 F1 | 	add	local15, local14
0adf8     02 3A 66 F0 | 	shl	local15, #2
0adfc     03 00 00 FF 
0ae00     00 E4 85 F1 | 	sub	objptr, ##1536
0ae04     F2 3A 02 F1 | 	add	local15, objptr
0ae08     08 3A 06 F1 | 	add	local15, #8
0ae0c     1D 33 62 FC | 	wrlong	local11, local15
0ae10     03 00 00 FF 
0ae14     00 E4 05 F1 | 	add	objptr, ##1536
0ae18     F2 2C 02 FB | 	rdlong	local08, objptr
0ae1c     01 2C 06 F1 | 	add	local08, #1
0ae20     F2 2C 62 FC | 	wrlong	local08, objptr
0ae24     4A 00 00 FF 
0ae28     7C E4 85 F1 | 	sub	objptr, ##38012
0ae2c                 | LR__0925
0ae2c                 | ' return 0
0ae2c     00 FA 05 F6 | 	mov	result1, #0
0ae30                 | LR__0926
0ae30     A7 F0 03 F6 | 	mov	ptra, fp
0ae34     B2 00 A0 FD | 	call	#popregs_
0ae38                 | _getfun_ret
0ae38     2D 00 64 FD | 	ret
0ae3c                 | 
0ae3c                 | '   
0ae3c                 | '   
0ae3c                 | ' function getvar(m as integer) as ulong
0ae3c                 | _getvar
0ae3c     11 4A 05 F6 | 	mov	COUNT_, #17
0ae40     A8 00 A0 FD | 	call	#pushregs_
0ae44                 | _getvar_enter
0ae44     09 25 02 F6 | 	mov	local04, arg01
0ae48     37 00 00 FF 
0ae4c     44 E4 05 F1 | 	add	objptr, ##28228
0ae50     F2 26 02 FB | 	rdlong	local05, objptr
0ae54     03 26 66 F0 | 	shl	local05, #3
0ae58     02 00 00 FF 
0ae5c     38 E4 85 F1 | 	sub	objptr, ##1080
0ae60     F2 26 02 F1 | 	add	local05, objptr
0ae64     13 29 02 FB | 	rdlong	local06, local05
0ae68     01 2A 66 F6 | 	neg	local07, #1
0ae6c                 | ' 
0ae6c                 | ' varname$=lparts(ct).part$
0ae6c                 | ' j=-1
0ae6c                 | ' 
0ae6c                 | ' for i=0 to varnum-1
0ae6c     00 2C 06 F6 | 	mov	local08, #0
0ae70     04 E4 85 F1 | 	sub	objptr, #4
0ae74     F2 2E 02 FB | 	rdlong	local09, objptr
0ae78     35 00 00 FF 
0ae7c     08 E4 85 F1 | 	sub	objptr, ##27144
0ae80                 | LR__0930
0ae80     17 2D 52 F2 | 	cmps	local08, local09 wc
0ae84     38 00 90 3D |  if_ae	jmp	#LR__0931
0ae88                 | '   if variables(i).name=varname$ then j=i : exit
0ae88     16 27 02 F6 | 	mov	local05, local08
0ae8c     04 26 66 F0 | 	shl	local05, #4
0ae90     14 00 00 FF 
0ae94     F8 E5 05 F1 | 	add	objptr, ##10744
0ae98     F2 26 02 F1 | 	add	local05, objptr
0ae9c     13 13 02 FB | 	rdlong	arg01, local05
0aea0     14 15 02 F6 | 	mov	arg02, local06
0aea4     14 00 00 FF 
0aea8     F8 E5 85 F1 | 	sub	objptr, ##10744
0aeac     A8 59 B1 FD | 	call	#__system___string_cmp
0aeb0     00 FA 0D F2 | 	cmp	result1, #0 wz
0aeb4     16 2B 02 A6 |  if_e	mov	local07, local08
0aeb8     01 2C 06 51 |  if_ne	add	local08, #1
0aebc     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0aec0                 | LR__0931
0aec0                 | ' if  j=-1 andalso varnum<maxvars then   
0aec0     FF FF 7F FF 
0aec4     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0aec8     A8 00 90 5D |  if_ne	jmp	#LR__0932
0aecc     35 00 00 FF 
0aed0     08 E4 05 F1 | 	add	objptr, ##27144
0aed4     F2 2E 02 FB | 	rdlong	local09, objptr
0aed8     35 00 00 FF 
0aedc     08 E4 85 F1 | 	sub	objptr, ##27144
0aee0     02 00 00 FF 
0aee4     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0aee8     88 00 90 3D |  if_ae	jmp	#LR__0932
0aeec     35 00 00 FF 
0aef0     08 E4 05 F1 | 	add	objptr, ##27144
0aef4     F2 26 02 FB | 	rdlong	local05, objptr
0aef8     04 26 66 F0 | 	shl	local05, #4
0aefc     20 00 00 FF 
0af00     10 E4 85 F1 | 	sub	objptr, ##16400
0af04     F2 26 02 F1 | 	add	local05, objptr
0af08     13 29 62 FC | 	wrlong	local06, local05
0af0c     20 00 00 FF 
0af10     10 E4 05 F1 | 	add	objptr, ##16400
0af14     F2 26 02 FB | 	rdlong	local05, objptr
0af18     04 26 66 F0 | 	shl	local05, #4
0af1c     20 00 00 FF 
0af20     10 E4 85 F1 | 	sub	objptr, ##16400
0af24     F2 26 02 F1 | 	add	local05, objptr
0af28     04 26 06 F1 | 	add	local05, #4
0af2c     13 01 68 FC | 	wrlong	#0, local05
0af30     20 00 00 FF 
0af34     10 E4 05 F1 | 	add	objptr, ##16400
0af38     F2 26 02 FB | 	rdlong	local05, objptr
0af3c     04 26 66 F0 | 	shl	local05, #4
0af40     20 00 00 FF 
0af44     10 E4 85 F1 | 	sub	objptr, ##16400
0af48     F2 26 02 F1 | 	add	local05, objptr
0af4c     0C 26 06 F1 | 	add	local05, #12
0af50     13 39 68 FC | 	wrlong	#28, local05
0af54     20 00 00 FF 
0af58     10 E4 05 F1 | 	add	objptr, ##16400
0af5c     F2 2E 02 FB | 	rdlong	local09, objptr
0af60     17 2B 02 F6 | 	mov	local07, local09
0af64     01 2E 06 F1 | 	add	local09, #1
0af68     F2 2E 62 FC | 	wrlong	local09, objptr
0af6c     35 00 00 FF 
0af70     08 E4 85 F1 | 	sub	objptr, ##27144
0af74                 | LR__0932
0af74     00 2E 06 F6 | 	mov	local09, #0
0af78                 | ' numpar=0
0af78                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0af78     37 00 00 FF 
0af7c     44 E4 05 F1 | 	add	objptr, ##28228
0af80     F2 26 02 FB | 	rdlong	local05, objptr
0af84     01 26 06 F1 | 	add	local05, #1
0af88     03 26 66 F0 | 	shl	local05, #3
0af8c     02 00 00 FF 
0af90     38 E4 85 F1 | 	sub	objptr, ##1080
0af94     F2 26 02 F1 | 	add	local05, objptr
0af98     04 26 06 F1 | 	add	local05, #4
0af9c     13 2D 02 FB | 	rdlong	local08, local05
0afa0     15 2C 0E F2 | 	cmp	local08, #21 wz
0afa4     35 00 00 FF 
0afa8     0C E4 85 F1 | 	sub	objptr, ##27148
0afac     54 01 90 5D |  if_ne	jmp	#LR__0937
0afb0     37 00 00 FF 
0afb4     44 E4 05 F1 | 	add	objptr, ##28228
0afb8     F2 30 02 FB | 	rdlong	local10, objptr
0afbc     01 30 06 F1 | 	add	local10, #1
0afc0     F2 30 62 FC | 	wrlong	local10, objptr
0afc4     37 00 00 FF 
0afc8     44 E4 85 F1 | 	sub	objptr, ##28228
0afcc                 | '   ct+=1 											' omit this lpar, this is for expr list
0afcc                 | '   do
0afcc                 | LR__0933
0afcc     37 00 00 FF 
0afd0     44 E4 05 F1 | 	add	objptr, ##28228
0afd4     F2 26 02 FB | 	rdlong	local05, objptr
0afd8     01 26 06 F1 | 	add	local05, #1
0afdc     F2 26 62 FC | 	wrlong	local05, objptr
0afe0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0afe0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0afe0     03 26 66 F0 | 	shl	local05, #3
0afe4     02 00 00 FF 
0afe8     38 E4 85 F1 | 	sub	objptr, ##1080
0afec     F2 26 02 F1 | 	add	local05, objptr
0aff0     04 26 06 F1 | 	add	local05, #4
0aff4     13 31 02 FB | 	rdlong	local10, local05
0aff8     15 30 0E F2 | 	cmp	local10, #21 wz
0affc     35 00 00 FF 
0b000     0C E4 85 F1 | 	sub	objptr, ##27148
0b004     44 00 90 5D |  if_ne	jmp	#LR__0934
0b008     37 00 00 FF 
0b00c     44 E4 05 F1 | 	add	objptr, ##28228
0b010     F2 30 02 FB | 	rdlong	local10, objptr
0b014     01 30 06 F1 | 	add	local10, #1
0b018     F2 30 62 FC | 	wrlong	local10, objptr
0b01c     37 00 00 FF 
0b020     44 E4 85 F1 | 	sub	objptr, ##28228
0b024     58 EB BF FD | 	call	#_expr
0b028     FD 32 02 F6 | 	mov	local11, result1
0b02c     37 00 00 FF 
0b030     44 E4 05 F1 | 	add	objptr, ##28228
0b034     F2 30 02 FB | 	rdlong	local10, objptr
0b038     01 30 06 F1 | 	add	local10, #1
0b03c     F2 30 62 FC | 	wrlong	local10, objptr
0b040     37 00 00 FF 
0b044     44 E4 85 F1 | 	sub	objptr, ##28228
0b048     08 00 90 FD | 	jmp	#LR__0935
0b04c                 | LR__0934
0b04c     30 EB BF FD | 	call	#_expr
0b050     FD 32 02 F6 | 	mov	local11, result1
0b054                 | LR__0935
0b054                 | '     if err>0 then return err
0b054     01 32 56 F2 | 	cmps	local11, #1 wc
0b058     19 FB 01 36 |  if_ae	mov	result1, local11
0b05c     2C 02 90 3D |  if_ae	jmp	#LR__0939
0b060     01 2E 06 F1 | 	add	local09, #1
0b064     37 00 00 FF 
0b068     44 E4 05 F1 | 	add	objptr, ##28228
0b06c     F2 26 02 FB | 	rdlong	local05, objptr
0b070     03 26 66 F0 | 	shl	local05, #3
0b074     02 00 00 FF 
0b078     38 E4 85 F1 | 	sub	objptr, ##1080
0b07c     F2 26 02 F1 | 	add	local05, objptr
0b080     04 26 06 F1 | 	add	local05, #4
0b084     13 33 02 FB | 	rdlong	local11, local05
0b088     14 32 0E F2 | 	cmp	local11, #20 wz
0b08c     35 00 00 FF 
0b090     0C E4 85 F1 | 	sub	objptr, ##27148
0b094     34 00 90 AD |  if_e	jmp	#LR__0936
0b098     37 00 00 FF 
0b09c     44 E4 05 F1 | 	add	objptr, ##28228
0b0a0     F2 32 02 FB | 	rdlong	local11, objptr
0b0a4     03 32 66 F0 | 	shl	local11, #3
0b0a8     02 00 00 FF 
0b0ac     38 E4 85 F1 | 	sub	objptr, ##1080
0b0b0     F2 32 02 F1 | 	add	local11, objptr
0b0b4     04 32 06 F1 | 	add	local11, #4
0b0b8     19 33 02 FB | 	rdlong	local11, local11
0b0bc     FE 33 0E F2 | 	cmp	local11, #510 wz
0b0c0     35 00 00 FF 
0b0c4     0C E4 85 F1 | 	sub	objptr, ##27148
0b0c8     00 FF 9F 5D |  if_ne	jmp	#LR__0933
0b0cc                 | LR__0936
0b0cc                 | '     if lparts(ct).token=token_end then return 14
0b0cc     37 00 00 FF 
0b0d0     44 E4 05 F1 | 	add	objptr, ##28228
0b0d4     F2 26 02 FB | 	rdlong	local05, objptr
0b0d8     03 26 66 F0 | 	shl	local05, #3
0b0dc     02 00 00 FF 
0b0e0     38 E4 85 F1 | 	sub	objptr, ##1080
0b0e4     F2 26 02 F1 | 	add	local05, objptr
0b0e8     04 26 06 F1 | 	add	local05, #4
0b0ec     13 33 02 FB | 	rdlong	local11, local05
0b0f0     FE 33 0E F2 | 	cmp	local11, #510 wz
0b0f4     35 00 00 FF 
0b0f8     0C E4 85 F1 | 	sub	objptr, ##27148
0b0fc     0E FA 05 A6 |  if_e	mov	result1, #14
0b100     88 01 90 AD |  if_e	jmp	#LR__0939
0b104                 | LR__0937
0b104     17 21 02 F6 | 	mov	local02, local09
0b108     11 22 06 F6 | 	mov	local03, #17
0b10c     15 1F 02 F6 | 	mov	local01, local07
0b110     0F 31 02 F6 | 	mov	local10, local01
0b114     10 35 02 F6 | 	mov	local12, local02
0b118     11 37 02 F6 | 	mov	local13, local03
0b11c     4A 00 00 FF 
0b120     7C E4 05 F1 | 	add	objptr, ##38012
0b124     F2 38 02 FB | 	rdlong	local14, objptr
0b128     1C 3B 02 F6 | 	mov	local15, local14
0b12c     01 3A 66 F0 | 	shl	local15, #1
0b130     1C 3B 02 F1 | 	add	local15, local14
0b134     02 3A 66 F0 | 	shl	local15, #2
0b138     03 00 00 FF 
0b13c     00 E4 85 F1 | 	sub	objptr, ##1536
0b140     F2 3A 02 F1 | 	add	local15, objptr
0b144     1D 31 62 FC | 	wrlong	local10, local15
0b148     03 00 00 FF 
0b14c     00 E4 05 F1 | 	add	objptr, ##1536
0b150     F2 30 02 FB | 	rdlong	local10, objptr
0b154     18 3D 02 F6 | 	mov	local16, local10
0b158     01 3C 66 F0 | 	shl	local16, #1
0b15c     18 3D 02 F1 | 	add	local16, local10
0b160     02 3C 66 F0 | 	shl	local16, #2
0b164     03 00 00 FF 
0b168     00 E4 85 F1 | 	sub	objptr, ##1536
0b16c     F2 3C 02 F1 | 	add	local16, objptr
0b170     04 3C 06 F1 | 	add	local16, #4
0b174     1E 35 62 FC | 	wrlong	local12, local16
0b178     03 00 00 FF 
0b17c     00 E4 05 F1 | 	add	objptr, ##1536
0b180     F2 30 02 FB | 	rdlong	local10, objptr
0b184     18 3F 02 F6 | 	mov	local17, local10
0b188     01 3E 66 F0 | 	shl	local17, #1
0b18c     18 3F 02 F1 | 	add	local17, local10
0b190     02 3E 66 F0 | 	shl	local17, #2
0b194     03 00 00 FF 
0b198     00 E4 85 F1 | 	sub	objptr, ##1536
0b19c     F2 3E 02 F1 | 	add	local17, objptr
0b1a0     08 3E 06 F1 | 	add	local17, #8
0b1a4     1F 37 62 FC | 	wrlong	local13, local17
0b1a8     03 00 00 FF 
0b1ac     00 E4 05 F1 | 	add	objptr, ##1536
0b1b0     F2 30 02 FB | 	rdlong	local10, objptr
0b1b4     01 30 06 F1 | 	add	local10, #1
0b1b8     F2 30 62 FC | 	wrlong	local10, objptr
0b1bc     4A 00 00 FF 
0b1c0     7C E4 85 F1 | 	sub	objptr, ##38012
0b1c4                 | ' t2.result.twowords(1)=numpar
0b1c4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b1c4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b1c4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b1c4     FF FF 7F FF 
0b1c8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b1cc     B8 00 90 5D |  if_ne	jmp	#LR__0938
0b1d0     15 22 06 F6 | 	mov	local03, #21
0b1d4     0F 31 02 F6 | 	mov	local10, local01
0b1d8     10 35 02 F6 | 	mov	local12, local02
0b1dc     11 37 02 F6 | 	mov	local13, local03
0b1e0     4A 00 00 FF 
0b1e4     7C E4 05 F1 | 	add	objptr, ##38012
0b1e8     F2 38 02 FB | 	rdlong	local14, objptr
0b1ec     1C 3B 02 F6 | 	mov	local15, local14
0b1f0     01 3A 66 F0 | 	shl	local15, #1
0b1f4     1C 3B 02 F1 | 	add	local15, local14
0b1f8     02 3A 66 F0 | 	shl	local15, #2
0b1fc     03 00 00 FF 
0b200     00 E4 85 F1 | 	sub	objptr, ##1536
0b204     F2 3A 02 F1 | 	add	local15, objptr
0b208     1D 31 62 FC | 	wrlong	local10, local15
0b20c     03 00 00 FF 
0b210     00 E4 05 F1 | 	add	objptr, ##1536
0b214     F2 3E 02 FB | 	rdlong	local17, objptr
0b218     1F 3D 02 F6 | 	mov	local16, local17
0b21c     01 3C 66 F0 | 	shl	local16, #1
0b220     1F 3D 02 F1 | 	add	local16, local17
0b224     02 3C 66 F0 | 	shl	local16, #2
0b228     03 00 00 FF 
0b22c     00 E4 85 F1 | 	sub	objptr, ##1536
0b230     F2 3C 02 F1 | 	add	local16, objptr
0b234     04 3C 06 F1 | 	add	local16, #4
0b238     1E 35 62 FC | 	wrlong	local12, local16
0b23c     03 00 00 FF 
0b240     00 E4 05 F1 | 	add	objptr, ##1536
0b244     F2 3C 02 FB | 	rdlong	local16, objptr
0b248     1E 3F 02 F6 | 	mov	local17, local16
0b24c     01 3E 66 F0 | 	shl	local17, #1
0b250     1E 3F 02 F1 | 	add	local17, local16
0b254     02 3E 66 F0 | 	shl	local17, #2
0b258     03 00 00 FF 
0b25c     00 E4 85 F1 | 	sub	objptr, ##1536
0b260     F2 3E 02 F1 | 	add	local17, objptr
0b264     08 3E 06 F1 | 	add	local17, #8
0b268     1F 37 62 FC | 	wrlong	local13, local17
0b26c     03 00 00 FF 
0b270     00 E4 05 F1 | 	add	objptr, ##1536
0b274     F2 30 02 FB | 	rdlong	local10, objptr
0b278     01 30 06 F1 | 	add	local10, #1
0b27c     F2 30 62 FC | 	wrlong	local10, objptr
0b280     4A 00 00 FF 
0b284     7C E4 85 F1 | 	sub	objptr, ##38012
0b288                 | LR__0938
0b288                 | ' return 0
0b288     00 FA 05 F6 | 	mov	result1, #0
0b28c                 | LR__0939
0b28c     A7 F0 03 F6 | 	mov	ptra, fp
0b290     B2 00 A0 FD | 	call	#popregs_
0b294                 | _getvar_ret
0b294     2D 00 64 FD | 	ret
0b298                 | 
0b298                 | ' 
0b298                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b298                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' 
0b298                 | ' 
0b298                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' '                                                                                                                                       -
0b298                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b298                 | ' '                                                                                                                                       -
0b298                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' 
0b298                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b298                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b298                 | ' 
0b298                 | ' function execute_line (astart=0 as integer) as integer
0b298                 | _execute_line
0b298     04 4A 05 F6 | 	mov	COUNT_, #4
0b29c     A8 00 A0 FD | 	call	#pushregs_
0b2a0     50 00 00 FF 
0b2a4     BC E4 05 F1 | 	add	objptr, ##41148
0b2a8     F2 00 68 FC | 	wrlong	#0, objptr
0b2ac                 | ' 
0b2ac                 | ' runptr2=0
0b2ac                 | ' for lineptr_e=astart to lineptr-1
0b2ac     06 00 00 FF 
0b2b0     3C E4 85 F1 | 	sub	objptr, ##3132
0b2b4     F2 12 62 FC | 	wrlong	arg01, objptr
0b2b8     04 E4 85 F1 | 	sub	objptr, #4
0b2bc     F2 1E 02 FB | 	rdlong	local01, objptr
0b2c0     4A 00 00 FF 
0b2c4     7C E4 85 F1 | 	sub	objptr, ##38012
0b2c8                 | LR__0940
0b2c8     4A 00 00 FF 
0b2cc     80 E4 05 F1 | 	add	objptr, ##38016
0b2d0     F2 FA 01 FB | 	rdlong	result1, objptr
0b2d4     4A 00 00 FF 
0b2d8     80 E4 85 F1 | 	sub	objptr, ##38016
0b2dc     0F FB 51 F2 | 	cmps	result1, local01 wc
0b2e0     98 00 90 3D |  if_ae	jmp	#LR__0941
0b2e4     4A 00 00 FF 
0b2e8     80 E4 05 F1 | 	add	objptr, ##38016
0b2ec     F2 FA 01 FB | 	rdlong	result1, objptr
0b2f0     FD 20 02 F6 | 	mov	local02, result1
0b2f4     01 20 66 F0 | 	shl	local02, #1
0b2f8     FD 20 02 F1 | 	add	local02, result1
0b2fc     02 20 66 F0 | 	shl	local02, #2
0b300     03 00 00 FF 
0b304     04 E4 85 F1 | 	sub	objptr, ##1540
0b308     F2 20 02 F1 | 	add	local02, objptr
0b30c     08 20 06 F1 | 	add	local02, #8
0b310     10 21 02 FB | 	rdlong	local02, local02
0b314     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b318     02 20 66 F0 | 	shl	local02, #2
0b31c     04 00 00 FF 
0b320     1C E4 85 F1 | 	sub	objptr, ##2076
0b324     F2 20 02 F1 | 	add	local02, objptr
0b328     10 21 02 FB | 	rdlong	local02, local02
0b32c     10 23 02 F6 | 	mov	local03, local02
0b330     13 20 46 F7 | 	zerox	local02, #19
0b334     14 22 46 F0 | 	shr	local03, #20
0b338     02 22 66 F0 | 	shl	local03, #2
0b33c     ED 22 02 F1 | 	add	local03, __methods__
0b340     11 23 02 FB | 	rdlong	local03, local03
0b344     43 00 00 FF 
0b348     60 E4 85 F1 | 	sub	objptr, ##34400
0b34c     F2 24 02 F6 | 	mov	local04, objptr
0b350     10 E5 01 F6 | 	mov	objptr, local02
0b354     2D 22 62 FD | 	call	local03
0b358     12 E5 01 F6 | 	mov	objptr, local04
0b35c     4A 00 00 FF 
0b360     80 E4 05 F1 | 	add	objptr, ##38016
0b364     F2 24 02 FB | 	rdlong	local04, objptr
0b368     01 24 06 F1 | 	add	local04, #1
0b36c     F2 24 62 FC | 	wrlong	local04, objptr
0b370     4A 00 00 FF 
0b374     80 E4 85 F1 | 	sub	objptr, ##38016
0b378     4C FF 9F FD | 	jmp	#LR__0940
0b37c                 | LR__0941
0b37c                 | ' return runptr2
0b37c     50 00 00 FF 
0b380     BC E4 05 F1 | 	add	objptr, ##41148
0b384     F2 FA 01 FB | 	rdlong	result1, objptr
0b388     50 00 00 FF 
0b38c     BC E4 85 F1 | 	sub	objptr, ##41148
0b390     A7 F0 03 F6 | 	mov	ptra, fp
0b394     B2 00 A0 FD | 	call	#popregs_
0b398                 | _execute_line_ret
0b398     2D 00 64 FD | 	ret
0b39c                 | 
0b39c                 | ' 
0b39c                 | ' 
0b39c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b39c                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0b39c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b39c                 | ' 
0b39c                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b39c                 | ' 
0b39c                 | ' function pop() as expr_result
0b39c                 | _pop
0b39c                 | ' if stackpointer=0 then
0b39c     43 00 00 FF 
0b3a0     58 E4 05 F1 | 	add	objptr, ##34392
0b3a4     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b3a8     43 00 00 FF 
0b3ac     58 E4 85 F1 | 	sub	objptr, ##34392
0b3b0     FF 04 06 A6 |  if_e	mov	_var03, #255
0b3b4     18 00 06 A6 |  if_e	mov	_var01, #24
0b3b8     68 00 90 AD |  if_e	jmp	#LR__0950
0b3bc     43 00 00 FF 
0b3c0     58 E4 05 F1 | 	add	objptr, ##34392
0b3c4     F2 FA 01 FB | 	rdlong	result1, objptr
0b3c8     01 FA 85 F1 | 	sub	result1, #1
0b3cc     F2 FA 61 FC | 	wrlong	result1, objptr
0b3d0     FD FE 01 F6 | 	mov	result3, result1
0b3d4     01 FE 65 F0 | 	shl	result3, #1
0b3d8     FD FE 01 F1 | 	add	result3, result1
0b3dc     02 FE 65 F0 | 	shl	result3, #2
0b3e0     0C 00 00 FF 
0b3e4     0C E4 85 F1 | 	sub	objptr, ##6156
0b3e8     F2 FE 01 F1 | 	add	result3, objptr
0b3ec     FF 00 02 FB | 	rdlong	_var01, result3
0b3f0     04 FE 05 F1 | 	add	result3, #4
0b3f4     FF FE 01 FB | 	rdlong	result3, result3
0b3f8     FD FC 01 F6 | 	mov	result2, result1
0b3fc     01 FC 65 F0 | 	shl	result2, #1
0b400     FD FC 01 F1 | 	add	result2, result1
0b404     02 FC 65 F0 | 	shl	result2, #2
0b408     F2 FC 01 F1 | 	add	result2, objptr
0b40c     08 FC 05 F1 | 	add	result2, #8
0b410     FE FA 01 FB | 	rdlong	result1, result2
0b414     FF 02 02 F6 | 	mov	_var02, result3
0b418     FD 04 02 F6 | 	mov	_var03, result1
0b41c     37 00 00 FF 
0b420     4C E4 85 F1 | 	sub	objptr, ##28236
0b424                 | LR__0950
0b424                 | ' return t1
0b424     01 FD 01 F6 | 	mov	result2, _var02
0b428     02 FF 01 F6 | 	mov	result3, _var03
0b42c     00 FB 01 F6 | 	mov	result1, _var01
0b430                 | _pop_ret
0b430     2D 00 64 FD | 	ret
0b434                 | 
0b434                 | ' 
0b434                 | ' sub push(t1 as expr_result )
0b434                 | _push
0b434                 | ' if stackpointer<maxstack then 
0b434     43 00 00 FF 
0b438     58 E4 05 F1 | 	add	objptr, ##34392
0b43c     F2 00 02 FB | 	rdlong	_var01, objptr
0b440     43 00 00 FF 
0b444     58 E4 85 F1 | 	sub	objptr, ##34392
0b448     01 00 00 FF 
0b44c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b450     BC 00 90 3D |  if_ae	jmp	#LR__0960
0b454     09 01 02 FB | 	rdlong	_var01, arg01
0b458     04 12 06 F1 | 	add	arg01, #4
0b45c     09 03 02 FB | 	rdlong	_var02, arg01
0b460     04 12 06 F1 | 	add	arg01, #4
0b464     09 13 02 FB | 	rdlong	arg01, arg01
0b468     43 00 00 FF 
0b46c     58 E4 05 F1 | 	add	objptr, ##34392
0b470     F2 04 02 FB | 	rdlong	_var03, objptr
0b474     02 07 02 F6 | 	mov	_var04, _var03
0b478     01 06 66 F0 | 	shl	_var04, #1
0b47c     02 07 02 F1 | 	add	_var04, _var03
0b480     02 06 66 F0 | 	shl	_var04, #2
0b484     0C 00 00 FF 
0b488     0C E4 85 F1 | 	sub	objptr, ##6156
0b48c     F2 06 02 F1 | 	add	_var04, objptr
0b490     03 01 62 FC | 	wrlong	_var01, _var04
0b494     0C 00 00 FF 
0b498     0C E4 05 F1 | 	add	objptr, ##6156
0b49c     F2 06 02 FB | 	rdlong	_var04, objptr
0b4a0     03 05 02 F6 | 	mov	_var03, _var04
0b4a4     01 04 66 F0 | 	shl	_var03, #1
0b4a8     03 05 02 F1 | 	add	_var03, _var04
0b4ac     02 04 66 F0 | 	shl	_var03, #2
0b4b0     0C 00 00 FF 
0b4b4     0C E4 85 F1 | 	sub	objptr, ##6156
0b4b8     F2 04 02 F1 | 	add	_var03, objptr
0b4bc     04 04 06 F1 | 	add	_var03, #4
0b4c0     02 03 62 FC | 	wrlong	_var02, _var03
0b4c4     0C 00 00 FF 
0b4c8     0C E4 05 F1 | 	add	objptr, ##6156
0b4cc     F2 06 02 FB | 	rdlong	_var04, objptr
0b4d0     03 05 02 F6 | 	mov	_var03, _var04
0b4d4     01 04 66 F0 | 	shl	_var03, #1
0b4d8     03 05 02 F1 | 	add	_var03, _var04
0b4dc     02 04 66 F0 | 	shl	_var03, #2
0b4e0     0C 00 00 FF 
0b4e4     0C E4 85 F1 | 	sub	objptr, ##6156
0b4e8     F2 04 02 F1 | 	add	_var03, objptr
0b4ec     08 04 06 F1 | 	add	_var03, #8
0b4f0     02 13 62 FC | 	wrlong	arg01, _var03
0b4f4     0C 00 00 FF 
0b4f8     0C E4 05 F1 | 	add	objptr, ##6156
0b4fc     F2 00 02 FB | 	rdlong	_var01, objptr
0b500     01 00 06 F1 | 	add	_var01, #1
0b504     F2 00 62 FC | 	wrlong	_var01, objptr
0b508     43 00 00 FF 
0b50c     58 E4 85 F1 | 	sub	objptr, ##34392
0b510                 | LR__0960
0b510                 | _push_ret
0b510     2D 00 64 FD | 	ret
0b514                 | 
0b514                 | ' 
0b514                 | ' ' -------------------------------- Runtime converting functions
0b514                 | ' 
0b514                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0b514                 | ' 
0b514                 | ' function  convertstring(psaddr as ulong) as string
0b514                 | _convertstring
0b514     04 4A 05 F6 | 	mov	COUNT_, #4
0b518     A8 00 A0 FD | 	call	#pushregs_
0b51c     09 1F 02 F6 | 	mov	local01, arg01
0b520     10 20 B1 FD | 	call	#_pslpeek
0b524     FD 20 02 F6 | 	mov	local02, result1
0b528     83 01 00 FF 
0b52c     32 23 06 F6 | 	mov	local03, ##@LR__5404
0b530                 | ' l=pslpeek(psaddr)
0b530                 | ' s="" 
0b530                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0b530     01 24 06 F6 | 	mov	local04, #1
0b534     01 20 06 F1 | 	add	local02, #1
0b538                 | LR__0970
0b538     10 25 52 F2 | 	cmps	local04, local02 wc
0b53c     30 00 90 3D |  if_ae	jmp	#LR__0971
0b540     0F 13 02 F6 | 	mov	arg01, local01
0b544     03 12 06 F1 | 	add	arg01, #3
0b548     12 13 02 F1 | 	add	arg01, local04
0b54c     8C 1F B1 FD | 	call	#_pspeek
0b550     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0b554     18 75 B1 FD | 	call	#__system__Chr_S
0b558     FD 14 02 F6 | 	mov	arg02, result1
0b55c     11 13 02 F6 | 	mov	arg01, local03
0b560     28 53 B1 FD | 	call	#__system___string_concat
0b564     FD 22 02 F6 | 	mov	local03, result1
0b568     01 24 06 F1 | 	add	local04, #1
0b56c     C8 FF 9F FD | 	jmp	#LR__0970
0b570                 | LR__0971
0b570                 | ' return s
0b570     11 FB 01 F6 | 	mov	result1, local03
0b574     A7 F0 03 F6 | 	mov	ptra, fp
0b578     B2 00 A0 FD | 	call	#popregs_
0b57c                 | _convertstring_ret
0b57c     2D 00 64 FD | 	ret
0b580                 | 
0b580                 | ' 
0b580                 | ' ' converts a variable to an integer
0b580                 | ' 
0b580                 | ' function converttoint (t1 as expr_result) as integer 
0b580                 | _converttoint
0b580     02 4A 05 F6 | 	mov	COUNT_, #2
0b584     A8 00 A0 FD | 	call	#pushregs_
0b588     09 1F 02 F6 | 	mov	local01, arg01
0b58c                 | ' 
0b58c                 | ' select case t1.result_type
0b58c     08 1E 06 F1 | 	add	local01, #8
0b590     0F 21 02 FB | 	rdlong	local02, local01
0b594     08 1E 86 F1 | 	sub	local01, #8
0b598     1C 20 0E F2 | 	cmp	local02, #28 wz
0b59c     2C 00 90 AD |  if_e	jmp	#LR__0980
0b5a0     1D 20 0E F2 | 	cmp	local02, #29 wz
0b5a4     2C 00 90 AD |  if_e	jmp	#LR__0981
0b5a8     1E 20 0E F2 | 	cmp	local02, #30 wz
0b5ac     2C 00 90 AD |  if_e	jmp	#LR__0982
0b5b0     1F 20 0E F2 | 	cmp	local02, #31 wz
0b5b4     34 00 90 AD |  if_e	jmp	#LR__0983
0b5b8     2B 20 0E F2 | 	cmp	local02, #43 wz
0b5bc     44 00 90 AD |  if_e	jmp	#LR__0984
0b5c0     2C 20 0E F2 | 	cmp	local02, #44 wz
0b5c4     5C 00 90 AD |  if_e	jmp	#LR__0985
0b5c8     60 00 90 FD | 	jmp	#LR__0986
0b5cc                 | LR__0980
0b5cc     0F FB 01 FB | 	rdlong	result1, local01
0b5d0     5C 00 90 FD | 	jmp	#LR__0987
0b5d4                 | LR__0981
0b5d4     0F FB 01 FB | 	rdlong	result1, local01
0b5d8     54 00 90 FD | 	jmp	#LR__0987
0b5dc                 | LR__0982
0b5dc     0F 13 02 FB | 	rdlong	arg01, local01
0b5e0     01 14 06 F6 | 	mov	arg02, #1
0b5e4     C4 82 B1 FD | 	call	#__system___float_tointeger
0b5e8     44 00 90 FD | 	jmp	#LR__0987
0b5ec                 | LR__0983
0b5ec     0F 13 02 FB | 	rdlong	arg01, local01
0b5f0     FC 85 B1 FD | 	call	#__system____builtin_atof
0b5f4     FD 12 02 F6 | 	mov	arg01, result1
0b5f8     01 14 06 F6 | 	mov	arg02, #1
0b5fc     AC 82 B1 FD | 	call	#__system___float_tointeger
0b600     2C 00 90 FD | 	jmp	#LR__0987
0b604                 | LR__0984
0b604     0F 13 02 FB | 	rdlong	arg01, local01
0b608     08 FF BF FD | 	call	#_convertstring
0b60c     FD 12 02 F6 | 	mov	arg01, result1
0b610     DC 85 B1 FD | 	call	#__system____builtin_atof
0b614     FD 12 02 F6 | 	mov	arg01, result1
0b618     01 14 06 F6 | 	mov	arg02, #1
0b61c     8C 82 B1 FD | 	call	#__system___float_tointeger
0b620     0C 00 90 FD | 	jmp	#LR__0987
0b624                 | LR__0985
0b624     0F FB 01 FB | 	rdlong	result1, local01
0b628     04 00 90 FD | 	jmp	#LR__0987
0b62c                 | LR__0986
0b62c     00 FA 05 F6 | 	mov	result1, #0
0b630                 | LR__0987
0b630     A7 F0 03 F6 | 	mov	ptra, fp
0b634     B2 00 A0 FD | 	call	#popregs_
0b638                 | _converttoint_ret
0b638     2D 00 64 FD | 	ret
0b63c                 | 
0b63c                 | ' 
0b63c                 | ' ' converts a variable to float
0b63c                 | ' 
0b63c                 | ' function converttofloat (t1 as expr_result) as single
0b63c                 | _converttofloat
0b63c     03 4A 05 F6 | 	mov	COUNT_, #3
0b640     A8 00 A0 FD | 	call	#pushregs_
0b644     09 1F 02 F6 | 	mov	local01, arg01
0b648                 | ' 
0b648                 | ' select case t1.result_type
0b648     08 1E 06 F1 | 	add	local01, #8
0b64c     0F 21 02 FB | 	rdlong	local02, local01
0b650     08 1E 86 F1 | 	sub	local01, #8
0b654     1C 20 0E F2 | 	cmp	local02, #28 wz
0b658     24 00 90 AD |  if_e	jmp	#LR__0990
0b65c     1D 20 0E F2 | 	cmp	local02, #29 wz
0b660     38 00 90 AD |  if_e	jmp	#LR__0991
0b664     1E 20 0E F2 | 	cmp	local02, #30 wz
0b668     3C 00 90 AD |  if_e	jmp	#LR__0992
0b66c     1F 20 0E F2 | 	cmp	local02, #31 wz
0b670     3C 00 90 AD |  if_e	jmp	#LR__0993
0b674     2B 20 0E F2 | 	cmp	local02, #43 wz
0b678     40 00 90 AD |  if_e	jmp	#LR__0994
0b67c     50 00 90 FD | 	jmp	#LR__0995
0b680                 | LR__0990
0b680     0F 13 02 FB | 	rdlong	arg01, local01
0b684     09 13 52 F6 | 	abs	arg01, arg01 wc
0b688     1F 22 C6 C9 |  if_b	decod	local03, #31
0b68c     00 22 06 36 |  if_ae	mov	local03, #0
0b690     4C 79 B1 FD | 	call	#__system___float_fromuns
0b694     11 FB 61 F5 | 	xor	result1, local03
0b698     38 00 90 FD | 	jmp	#LR__0996
0b69c                 | LR__0991
0b69c     0F 13 02 FB | 	rdlong	arg01, local01
0b6a0     3C 79 B1 FD | 	call	#__system___float_fromuns
0b6a4     2C 00 90 FD | 	jmp	#LR__0996
0b6a8                 | LR__0992
0b6a8     0F FB 01 FB | 	rdlong	result1, local01
0b6ac     24 00 90 FD | 	jmp	#LR__0996
0b6b0                 | LR__0993
0b6b0     0F 13 02 FB | 	rdlong	arg01, local01
0b6b4     38 85 B1 FD | 	call	#__system____builtin_atof
0b6b8     18 00 90 FD | 	jmp	#LR__0996
0b6bc                 | LR__0994
0b6bc     0F 13 02 FB | 	rdlong	arg01, local01
0b6c0     50 FE BF FD | 	call	#_convertstring
0b6c4     FD 12 02 F6 | 	mov	arg01, result1
0b6c8     24 85 B1 FD | 	call	#__system____builtin_atof
0b6cc     04 00 90 FD | 	jmp	#LR__0996
0b6d0                 | LR__0995
0b6d0     00 FA 05 F6 | 	mov	result1, #0
0b6d4                 | LR__0996
0b6d4     A7 F0 03 F6 | 	mov	ptra, fp
0b6d8     B2 00 A0 FD | 	call	#popregs_
0b6dc                 | _converttofloat_ret
0b6dc     2D 00 64 FD | 	ret
0b6e0                 | 
0b6e0                 | ' 
0b6e0                 | ' '----------------- End of converting 
0b6e0                 | ' 
0b6e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b6e0                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0b6e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b6e0                 | ' 
0b6e0                 | ' sub csave_block(address as ulong)
0b6e0                 | _csave_block
0b6e0     09 01 02 F6 | 	mov	_var01, arg01
0b6e4                 | ' 
0b6e4                 | ' for i=0 to 63 step 2
0b6e4     00 02 06 F6 | 	mov	_var02, #0
0b6e8                 | LR__1000
0b6e8                 | '   do: loop until lpeek(base+64*7)>32768
0b6e8     37 00 00 FF 
0b6ec     10 E4 05 F1 | 	add	objptr, ##28176
0b6f0     97 0C 48 FB | 	callpa	#(@LR__1002-@LR__1001)>>2,fcache_load_ptr_
0b6f4                 | LR__1001
0b6f4     F2 12 02 FB | 	rdlong	arg01, objptr
0b6f8     C0 13 06 F1 | 	add	arg01, #448
0b6fc     09 FB 01 FB | 	rdlong	result1, arg01
0b700     40 00 00 FF 
0b704     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b708     E8 FF 9F CD |  if_b	jmp	#LR__1001
0b70c                 | LR__1002
0b70c     00 13 02 F6 | 	mov	arg01, _var01
0b710     01 05 02 F6 | 	mov	_var03, _var02
0b714     02 04 66 F0 | 	shl	_var03, #2
0b718     02 13 02 F1 | 	add	arg01, _var03
0b71c     09 07 02 FB | 	rdlong	_var04, arg01
0b720     1B 00 00 FF 
0b724     00 E4 05 F1 | 	add	objptr, ##13824
0b728     F2 06 62 FC | 	wrlong	_var04, objptr
0b72c     52 00 00 FF 
0b730     10 E4 85 F1 | 	sub	objptr, ##42000
0b734                 | '   q=lpeek(address+4*i)
0b734                 | '      for bit=0 to 31
0b734     00 08 06 F6 | 	mov	_var05, #0
0b738     97 84 48 FB | 	callpa	#(@LR__1007-@LR__1003)>>2,fcache_load_ptr_
0b73c                 | LR__1003
0b73c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0b73c     52 00 00 FF 
0b740     10 E4 05 F1 | 	add	objptr, ##42000
0b744     F2 06 02 FB | 	rdlong	_var04, objptr
0b748     52 00 00 FF 
0b74c     10 E4 85 F1 | 	sub	objptr, ##42000
0b750     04 05 C2 F9 | 	decod	_var03, _var05
0b754     02 07 CA F7 | 	test	_var04, _var03 wz
0b758     60 00 90 AD |  if_e	jmp	#LR__1004
0b75c     04 05 02 F6 | 	mov	_var03, _var05
0b760     02 04 66 F0 | 	shl	_var03, #2
0b764     4D 00 00 FF 
0b768     B4 E5 05 F1 | 	add	objptr, ##39860
0b76c     F2 04 02 F1 | 	add	_var03, objptr
0b770     02 FF 48 FC | 	wrbyte	#127, _var03
0b774     04 05 02 F6 | 	mov	_var03, _var05
0b778     02 04 66 F0 | 	shl	_var03, #2
0b77c     01 04 06 F1 | 	add	_var03, #1
0b780     F2 04 02 F1 | 	add	_var03, objptr
0b784     02 01 49 FC | 	wrbyte	#128, _var03
0b788     04 05 02 F6 | 	mov	_var03, _var05
0b78c     02 04 66 F0 | 	shl	_var03, #2
0b790     02 04 06 F1 | 	add	_var03, #2
0b794     F2 04 02 F1 | 	add	_var03, objptr
0b798     02 FF 48 FC | 	wrbyte	#127, _var03
0b79c     04 05 02 F6 | 	mov	_var03, _var05
0b7a0     02 04 66 F0 | 	shl	_var03, #2
0b7a4     03 04 06 F1 | 	add	_var03, #3
0b7a8     F2 04 02 F1 | 	add	_var03, objptr
0b7ac     02 01 49 FC | 	wrbyte	#128, _var03
0b7b0     4D 00 00 FF 
0b7b4     B4 E5 85 F1 | 	sub	objptr, ##39860
0b7b8     5C 00 90 FD | 	jmp	#LR__1005
0b7bc                 | LR__1004
0b7bc     04 05 02 F6 | 	mov	_var03, _var05
0b7c0     02 04 66 F0 | 	shl	_var03, #2
0b7c4     4D 00 00 FF 
0b7c8     B4 E5 05 F1 | 	add	objptr, ##39860
0b7cc     F2 04 02 F1 | 	add	_var03, objptr
0b7d0     02 01 49 FC | 	wrbyte	#128, _var03
0b7d4     04 05 02 F6 | 	mov	_var03, _var05
0b7d8     02 04 66 F0 | 	shl	_var03, #2
0b7dc     01 04 06 F1 | 	add	_var03, #1
0b7e0     F2 04 02 F1 | 	add	_var03, objptr
0b7e4     02 01 49 FC | 	wrbyte	#128, _var03
0b7e8     04 05 02 F6 | 	mov	_var03, _var05
0b7ec     02 04 66 F0 | 	shl	_var03, #2
0b7f0     02 04 06 F1 | 	add	_var03, #2
0b7f4     F2 04 02 F1 | 	add	_var03, objptr
0b7f8     02 FF 48 FC | 	wrbyte	#127, _var03
0b7fc     04 05 02 F6 | 	mov	_var03, _var05
0b800     02 04 66 F0 | 	shl	_var03, #2
0b804     03 04 06 F1 | 	add	_var03, #3
0b808     F2 04 02 F1 | 	add	_var03, objptr
0b80c     02 FF 48 FC | 	wrbyte	#127, _var03
0b810     4D 00 00 FF 
0b814     B4 E5 85 F1 | 	sub	objptr, ##39860
0b818                 | LR__1005
0b818     01 08 06 F1 | 	add	_var05, #1
0b81c     20 08 56 F2 | 	cmps	_var05, #32 wc
0b820     18 FF 9F CD |  if_b	jmp	#LR__1003
0b824                 | '   do: loop until lpeek(base+64*7)<32768
0b824     37 00 00 FF 
0b828     10 E4 05 F1 | 	add	objptr, ##28176
0b82c                 | LR__1006
0b82c     F2 12 02 FB | 	rdlong	arg01, objptr
0b830     C0 13 06 F1 | 	add	arg01, #448
0b834     09 FB 01 FB | 	rdlong	result1, arg01
0b838     40 00 00 FF 
0b83c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0b840     E8 FF 9F 3D |  if_ae	jmp	#LR__1006
0b844                 | LR__1007
0b844     00 13 02 F6 | 	mov	arg01, _var01
0b848     04 12 06 F1 | 	add	arg01, #4
0b84c     01 05 02 F6 | 	mov	_var03, _var02
0b850     02 04 66 F0 | 	shl	_var03, #2
0b854     02 13 02 F1 | 	add	arg01, _var03
0b858     09 07 02 FB | 	rdlong	_var04, arg01
0b85c     1B 00 00 FF 
0b860     00 E4 05 F1 | 	add	objptr, ##13824
0b864     F2 06 62 FC | 	wrlong	_var04, objptr
0b868     52 00 00 FF 
0b86c     10 E4 85 F1 | 	sub	objptr, ##42000
0b870                 | '   q=lpeek(address+4+4*i)
0b870                 | '      for bit=0 to 31
0b870     00 08 06 F6 | 	mov	_var05, #0
0b874     97 94 48 FB | 	callpa	#(@LR__1011-@LR__1008)>>2,fcache_load_ptr_
0b878                 | LR__1008
0b878                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0b878     52 00 00 FF 
0b87c     10 E4 05 F1 | 	add	objptr, ##42000
0b880     F2 06 02 FB | 	rdlong	_var04, objptr
0b884     52 00 00 FF 
0b888     10 E4 85 F1 | 	sub	objptr, ##42000
0b88c     04 05 C2 F9 | 	decod	_var03, _var05
0b890     02 07 CA F7 | 	test	_var04, _var03 wz
0b894     80 00 90 AD |  if_e	jmp	#LR__1009
0b898     04 0B 02 F6 | 	mov	_var06, _var05
0b89c     02 0A 66 F0 | 	shl	_var06, #2
0b8a0     80 04 06 F6 | 	mov	_var03, #128
0b8a4     05 05 02 F1 | 	add	_var03, _var06
0b8a8     4D 00 00 FF 
0b8ac     B4 E5 05 F1 | 	add	objptr, ##39860
0b8b0     F2 04 02 F1 | 	add	_var03, objptr
0b8b4     02 FF 48 FC | 	wrbyte	#127, _var03
0b8b8     04 0B 02 F6 | 	mov	_var06, _var05
0b8bc     02 0A 66 F0 | 	shl	_var06, #2
0b8c0     80 04 06 F6 | 	mov	_var03, #128
0b8c4     05 05 02 F1 | 	add	_var03, _var06
0b8c8     01 04 06 F1 | 	add	_var03, #1
0b8cc     F2 04 02 F1 | 	add	_var03, objptr
0b8d0     02 01 49 FC | 	wrbyte	#128, _var03
0b8d4     04 0B 02 F6 | 	mov	_var06, _var05
0b8d8     02 0A 66 F0 | 	shl	_var06, #2
0b8dc     80 04 06 F6 | 	mov	_var03, #128
0b8e0     05 05 02 F1 | 	add	_var03, _var06
0b8e4     02 04 06 F1 | 	add	_var03, #2
0b8e8     F2 04 02 F1 | 	add	_var03, objptr
0b8ec     02 FF 48 FC | 	wrbyte	#127, _var03
0b8f0     04 0B 02 F6 | 	mov	_var06, _var05
0b8f4     02 0A 66 F0 | 	shl	_var06, #2
0b8f8     80 04 06 F6 | 	mov	_var03, #128
0b8fc     05 05 02 F1 | 	add	_var03, _var06
0b900     03 04 06 F1 | 	add	_var03, #3
0b904     F2 04 02 F1 | 	add	_var03, objptr
0b908     02 01 49 FC | 	wrbyte	#128, _var03
0b90c     4D 00 00 FF 
0b910     B4 E5 85 F1 | 	sub	objptr, ##39860
0b914     7C 00 90 FD | 	jmp	#LR__1010
0b918                 | LR__1009
0b918     04 0B 02 F6 | 	mov	_var06, _var05
0b91c     02 0A 66 F0 | 	shl	_var06, #2
0b920     80 04 06 F6 | 	mov	_var03, #128
0b924     05 05 02 F1 | 	add	_var03, _var06
0b928     4D 00 00 FF 
0b92c     B4 E5 05 F1 | 	add	objptr, ##39860
0b930     F2 04 02 F1 | 	add	_var03, objptr
0b934     02 01 49 FC | 	wrbyte	#128, _var03
0b938     04 0B 02 F6 | 	mov	_var06, _var05
0b93c     02 0A 66 F0 | 	shl	_var06, #2
0b940     80 04 06 F6 | 	mov	_var03, #128
0b944     05 05 02 F1 | 	add	_var03, _var06
0b948     01 04 06 F1 | 	add	_var03, #1
0b94c     F2 04 02 F1 | 	add	_var03, objptr
0b950     02 01 49 FC | 	wrbyte	#128, _var03
0b954     04 0B 02 F6 | 	mov	_var06, _var05
0b958     02 0A 66 F0 | 	shl	_var06, #2
0b95c     80 04 06 F6 | 	mov	_var03, #128
0b960     05 05 02 F1 | 	add	_var03, _var06
0b964     02 04 06 F1 | 	add	_var03, #2
0b968     F2 04 02 F1 | 	add	_var03, objptr
0b96c     02 FF 48 FC | 	wrbyte	#127, _var03
0b970     04 0B 02 F6 | 	mov	_var06, _var05
0b974     02 0A 66 F0 | 	shl	_var06, #2
0b978     80 04 06 F6 | 	mov	_var03, #128
0b97c     05 05 02 F1 | 	add	_var03, _var06
0b980     03 04 06 F1 | 	add	_var03, #3
0b984     F2 04 02 F1 | 	add	_var03, objptr
0b988     02 FF 48 FC | 	wrbyte	#127, _var03
0b98c     4D 00 00 FF 
0b990     B4 E5 85 F1 | 	sub	objptr, ##39860
0b994                 | LR__1010
0b994     01 08 06 F1 | 	add	_var05, #1
0b998     20 08 56 F2 | 	cmps	_var05, #32 wc
0b99c     D8 FE 9F CD |  if_b	jmp	#LR__1008
0b9a0                 | LR__1011
0b9a0     02 02 06 F1 | 	add	_var02, #2
0b9a4     40 02 56 F2 | 	cmps	_var02, #64 wc
0b9a8     3C FD 9F CD |  if_b	jmp	#LR__1000
0b9ac                 | ' do: loop until lpeek(base+64*7)>32768
0b9ac     37 00 00 FF 
0b9b0     10 E4 05 F1 | 	add	objptr, ##28176
0b9b4     97 84 48 FB | 	callpa	#(@LR__1020-@LR__1012)>>2,fcache_load_ptr_
0b9b8                 | LR__1012
0b9b8     F2 12 02 FB | 	rdlong	arg01, objptr
0b9bc     C0 13 06 F1 | 	add	arg01, #448
0b9c0     09 FB 01 FB | 	rdlong	result1, arg01
0b9c4     40 00 00 FF 
0b9c8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b9cc     E8 FF 9F CD |  if_b	jmp	#LR__1012
0b9d0     37 00 00 FF 
0b9d4     10 E4 85 F1 | 	sub	objptr, ##28176
0b9d8                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b9d8     00 02 06 F6 | 	mov	_var02, #0
0b9dc                 | LR__1013
0b9dc     01 07 52 F6 | 	abs	_var04, _var02 wc
0b9e0     07 06 06 F5 | 	and	_var04, #7
0b9e4     03 07 82 F6 | 	negc	_var04, _var04
0b9e8     04 06 56 F2 | 	cmps	_var04, #4 wc
0b9ec     20 00 90 3D |  if_ae	jmp	#LR__1014
0b9f0     01 0B 02 F6 | 	mov	_var06, _var02
0b9f4     4D 00 00 FF 
0b9f8     B4 E5 05 F1 | 	add	objptr, ##39860
0b9fc     F2 0A 02 F1 | 	add	_var06, objptr
0ba00     05 FF 48 FC | 	wrbyte	#127, _var06
0ba04     4D 00 00 FF 
0ba08     B4 E5 85 F1 | 	sub	objptr, ##39860
0ba0c     1C 00 90 FD | 	jmp	#LR__1015
0ba10                 | LR__1014
0ba10     01 0B 02 F6 | 	mov	_var06, _var02
0ba14     4D 00 00 FF 
0ba18     B4 E5 05 F1 | 	add	objptr, ##39860
0ba1c     F2 0A 02 F1 | 	add	_var06, objptr
0ba20     05 01 49 FC | 	wrbyte	#128, _var06
0ba24     4D 00 00 FF 
0ba28     B4 E5 85 F1 | 	sub	objptr, ##39860
0ba2c                 | LR__1015
0ba2c     01 02 06 F1 | 	add	_var02, #1
0ba30     80 02 56 F2 | 	cmps	_var02, #128 wc
0ba34     A4 FF 9F CD |  if_b	jmp	#LR__1013
0ba38                 | ' 
0ba38                 | ' do: loop until lpeek(base+64*7)<32768
0ba38     37 00 00 FF 
0ba3c     10 E4 05 F1 | 	add	objptr, ##28176
0ba40                 | LR__1016
0ba40     F2 12 02 FB | 	rdlong	arg01, objptr
0ba44     C0 13 06 F1 | 	add	arg01, #448
0ba48     09 FB 01 FB | 	rdlong	result1, arg01
0ba4c     40 00 00 FF 
0ba50     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ba54     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0ba58     37 00 00 FF 
0ba5c     10 E4 85 F1 | 	sub	objptr, ##28176
0ba60                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0ba60     80 02 06 F6 | 	mov	_var02, #128
0ba64                 | LR__1017
0ba64     01 07 52 F6 | 	abs	_var04, _var02 wc
0ba68     07 06 06 F5 | 	and	_var04, #7
0ba6c     03 07 82 F6 | 	negc	_var04, _var04
0ba70     04 06 56 F2 | 	cmps	_var04, #4 wc
0ba74     20 00 90 3D |  if_ae	jmp	#LR__1018
0ba78     01 0B 02 F6 | 	mov	_var06, _var02
0ba7c     4D 00 00 FF 
0ba80     B4 E5 05 F1 | 	add	objptr, ##39860
0ba84     F2 0A 02 F1 | 	add	_var06, objptr
0ba88     05 FF 48 FC | 	wrbyte	#127, _var06
0ba8c     4D 00 00 FF 
0ba90     B4 E5 85 F1 | 	sub	objptr, ##39860
0ba94     1C 00 90 FD | 	jmp	#LR__1019
0ba98                 | LR__1018
0ba98     01 0B 02 F6 | 	mov	_var06, _var02
0ba9c     4D 00 00 FF 
0baa0     B4 E5 05 F1 | 	add	objptr, ##39860
0baa4     F2 0A 02 F1 | 	add	_var06, objptr
0baa8     05 01 49 FC | 	wrbyte	#128, _var06
0baac     4D 00 00 FF 
0bab0     B4 E5 85 F1 | 	sub	objptr, ##39860
0bab4                 | LR__1019
0bab4     01 02 06 F1 | 	add	_var02, #1
0bab8     00 03 16 F2 | 	cmp	_var02, #256 wc
0babc     A4 FF 9F CD |  if_b	jmp	#LR__1017
0bac0                 | LR__1020
0bac0                 | _csave_block_ret
0bac0     2D 00 64 FD | 	ret
0bac4                 | 
0bac4                 | ' 
0bac4                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0bac4                 | _csave_addtoblock
0bac4     04 4A 05 F6 | 	mov	COUNT_, #4
0bac8     A8 00 A0 FD | 	call	#pushregs_
0bacc     09 1F 02 F6 | 	mov	local01, arg01
0bad0                 | ' 
0bad0                 | ' if force=0 then
0bad0     07 14 4E F7 | 	zerox	arg02, #7 wz
0bad4     78 00 90 5D |  if_ne	jmp	#LR__1030
0bad8     50 00 00 FF 
0badc     B4 E4 05 F1 | 	add	objptr, ##41140
0bae0     F2 14 02 FB | 	rdlong	arg02, objptr
0bae4     02 00 00 FF 
0bae8     00 E4 85 F1 | 	sub	objptr, ##1024
0baec     F2 14 02 F1 | 	add	arg02, objptr
0baf0     0A 1F 42 FC | 	wrbyte	local01, arg02
0baf4     02 00 00 FF 
0baf8     00 E4 05 F1 | 	add	objptr, ##1024
0bafc     F2 1E 02 FB | 	rdlong	local01, objptr
0bb00     01 1E 06 F1 | 	add	local01, #1
0bb04     F2 1E 62 FC | 	wrlong	local01, objptr
0bb08                 | '   block(blockptr)=d
0bb08                 | '   blockptr+=1
0bb08                 | '   if blockptr>=255 then
0bb08     50 00 00 FF 
0bb0c     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb10     FF 1E 16 F2 | 	cmp	local01, #255 wc
0bb14     E4 00 90 CD |  if_b	jmp	#LR__1034
0bb18     4E 00 00 FF 
0bb1c     B4 E4 05 F1 | 	add	objptr, ##40116
0bb20     F2 12 02 F6 | 	mov	arg01, objptr
0bb24     4E 00 00 FF 
0bb28     B4 E4 85 F1 | 	sub	objptr, ##40116
0bb2c     B0 FB BF FD | 	call	#_csave_block
0bb30     50 00 00 FF 
0bb34     B4 E4 05 F1 | 	add	objptr, ##41140
0bb38     F2 00 68 FC | 	wrlong	#0, objptr
0bb3c     50 00 00 FF 
0bb40     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb44     2C 13 06 F6 | 	mov	arg01, #300
0bb48     D8 4F B1 FD | 	call	#__system___waitms
0bb4c     AC 00 90 FD | 	jmp	#LR__1034
0bb50                 | LR__1030
0bb50     50 00 00 FF 
0bb54     B4 E4 05 F1 | 	add	objptr, ##41140
0bb58     F2 20 02 FB | 	rdlong	local02, objptr
0bb5c     02 00 00 FF 
0bb60     00 E4 85 F1 | 	sub	objptr, ##1024
0bb64     F2 20 02 F1 | 	add	local02, objptr
0bb68     10 1F 42 FC | 	wrbyte	local01, local02
0bb6c                 | '   block(blockptr)=d
0bb6c                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0bb6c     02 00 00 FF 
0bb70     00 E4 05 F1 | 	add	objptr, ##1024
0bb74     F2 22 02 FB | 	rdlong	local03, objptr
0bb78     50 00 00 FF 
0bb7c     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb80     FF 22 16 F2 | 	cmp	local03, #255 wc
0bb84     40 00 90 3D |  if_ae	jmp	#LR__1033
0bb88     50 00 00 FF 
0bb8c     B4 E4 05 F1 | 	add	objptr, ##41140
0bb90     F2 24 02 FB | 	rdlong	local04, objptr
0bb94     50 00 00 FF 
0bb98     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb9c                 | LR__1031
0bb9c     00 25 56 F2 | 	cmps	local04, #256 wc
0bba0     24 00 90 3D |  if_ae	jmp	#LR__1032
0bba4     12 21 02 F6 | 	mov	local02, local04
0bba8     4E 00 00 FF 
0bbac     B4 E4 05 F1 | 	add	objptr, ##40116
0bbb0     F2 20 02 F1 | 	add	local02, objptr
0bbb4     10 01 48 FC | 	wrbyte	#0, local02
0bbb8     01 24 06 F1 | 	add	local04, #1
0bbbc     4E 00 00 FF 
0bbc0     B4 E4 85 F1 | 	sub	objptr, ##40116
0bbc4     D4 FF 9F FD | 	jmp	#LR__1031
0bbc8                 | LR__1032
0bbc8                 | LR__1033
0bbc8     4E 00 00 FF 
0bbcc     B4 E4 05 F1 | 	add	objptr, ##40116
0bbd0     F2 12 02 F6 | 	mov	arg01, objptr
0bbd4     4E 00 00 FF 
0bbd8     B4 E4 85 F1 | 	sub	objptr, ##40116
0bbdc     00 FB BF FD | 	call	#_csave_block
0bbe0     50 00 00 FF 
0bbe4     B4 E4 05 F1 | 	add	objptr, ##41140
0bbe8     F2 00 68 FC | 	wrlong	#0, objptr
0bbec     50 00 00 FF 
0bbf0     B4 E4 85 F1 | 	sub	objptr, ##41140
0bbf4     2C 13 06 F6 | 	mov	arg01, #300
0bbf8     28 4F B1 FD | 	call	#__system___waitms
0bbfc                 | LR__1034
0bbfc     A7 F0 03 F6 | 	mov	ptra, fp
0bc00     B2 00 A0 FD | 	call	#popregs_
0bc04                 | _csave_addtoblock_ret
0bc04     2D 00 64 FD | 	ret
0bc08                 | 
0bc08                 | ' 
0bc08                 | ' '----------------------- csave
0bc08                 | ' 
0bc08                 | ' sub test_csave
0bc08                 | _test_csave
0bc08     04 4A 05 F6 | 	mov	COUNT_, #4
0bc0c     A8 00 A0 FD | 	call	#pushregs_
0bc10     C0 F0 07 F1 | 	add	ptra, #192
0bc14                 | ' 'dim fileheader,savestart, saveptr as ulong
0bc14                 | ' 
0bc14                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0bc14     4A 00 00 FF 
0bc18     88 E4 05 F1 | 	add	objptr, ##38024
0bc1c     F2 12 02 FB | 	rdlong	arg01, objptr
0bc20     4A 00 00 FF 
0bc24     88 E4 85 F1 | 	sub	objptr, ##38024
0bc28     08 19 B1 FD | 	call	#_pslpeek
0bc2c     FF FF 7F FF 
0bc30     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0bc34     0C 00 90 5D |  if_ne	jmp	#LR__1040
0bc38     1B 12 06 F6 | 	mov	arg01, #27
0bc3c     60 16 B1 FD | 	call	#_printerror
0bc40     1C 03 90 FD | 	jmp	#LR__1054
0bc44                 | LR__1040
0bc44     54 F7 BF FD | 	call	#_pop
0bc48     90 4E 05 F1 | 	add	fp, #144
0bc4c     A7 FA 61 FC | 	wrlong	result1, fp
0bc50     04 4E 05 F1 | 	add	fp, #4
0bc54     A7 FC 61 FC | 	wrlong	result2, fp
0bc58     04 4E 05 F1 | 	add	fp, #4
0bc5c     A7 FE 61 FC | 	wrlong	result3, fp
0bc60                 | ' t1=pop()
0bc60                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0bc60     98 4E 85 F1 | 	sub	fp, #152
0bc64     1F FE 0D F2 | 	cmp	result3, #31 wz
0bc68     24 00 90 AD |  if_e	jmp	#LR__1041
0bc6c     51 00 00 FF 
0bc70     D8 E5 05 F1 | 	add	objptr, ##41944
0bc74     F2 1C 02 FB | 	rdlong	arg06, objptr
0bc78     51 00 00 FF 
0bc7c     D8 E5 85 F1 | 	sub	objptr, ##41944
0bc80     8C 4E 05 F1 | 	add	fp, #140
0bc84     A7 1C 62 FC | 	wrlong	arg06, fp
0bc88     8C 4E 85 F1 | 	sub	fp, #140
0bc8c     14 00 90 FD | 	jmp	#LR__1042
0bc90                 | LR__1041
0bc90     90 4E 05 F1 | 	add	fp, #144
0bc94     A7 1C 02 FB | 	rdlong	arg06, fp
0bc98     04 4E 85 F1 | 	sub	fp, #4
0bc9c     A7 1C 62 FC | 	wrlong	arg06, fp
0bca0     8C 4E 85 F1 | 	sub	fp, #140
0bca4                 | LR__1042
0bca4                 | ' 
0bca4                 | ' ' prepare 1 kHz header wave
0bca4                 | ' 
0bca4                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bca4     A7 00 68 FC | 	wrlong	#0, fp
0bca8     97 34 48 FB | 	callpa	#(@LR__1046-@LR__1043)>>2,fcache_load_ptr_
0bcac                 | LR__1043
0bcac     A7 1C 02 FB | 	rdlong	arg06, fp
0bcb0     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0bcb4     07 1A 06 F5 | 	and	arg05, #7
0bcb8     0D 1B 82 F6 | 	negc	arg05, arg05
0bcbc     04 1A 56 F2 | 	cmps	arg05, #4 wc
0bcc0     20 00 90 3D |  if_ae	jmp	#LR__1044
0bcc4     A7 1A 02 FB | 	rdlong	arg05, fp
0bcc8     4D 00 00 FF 
0bccc     B4 E5 05 F1 | 	add	objptr, ##39860
0bcd0     F2 1A 02 F1 | 	add	arg05, objptr
0bcd4     0D FF 48 FC | 	wrbyte	#127, arg05
0bcd8     4D 00 00 FF 
0bcdc     B4 E5 85 F1 | 	sub	objptr, ##39860
0bce0     1C 00 90 FD | 	jmp	#LR__1045
0bce4                 | LR__1044
0bce4     A7 1A 02 FB | 	rdlong	arg05, fp
0bce8     4D 00 00 FF 
0bcec     B4 E5 05 F1 | 	add	objptr, ##39860
0bcf0     F2 1A 02 F1 | 	add	arg05, objptr
0bcf4     0D 01 49 FC | 	wrbyte	#128, arg05
0bcf8     4D 00 00 FF 
0bcfc     B4 E5 85 F1 | 	sub	objptr, ##39860
0bd00                 | LR__1045
0bd00     A7 1A 02 FB | 	rdlong	arg05, fp
0bd04     01 1A 06 F1 | 	add	arg05, #1
0bd08     A7 1A 62 FC | 	wrlong	arg05, fp
0bd0c     00 1B 56 F2 | 	cmps	arg05, #256 wc
0bd10     98 FF 9F CD |  if_b	jmp	#LR__1043
0bd14                 | LR__1046
0bd14     4D 00 00 FF 
0bd18     B4 E5 05 F1 | 	add	objptr, ##39860
0bd1c     F2 14 02 F6 | 	mov	arg02, objptr
0bd20     07 12 06 F6 | 	mov	arg01, #7
0bd24     0F 00 00 FF 
0bd28     40 17 06 F6 | 	mov	arg03, ##8000
0bd2c     0E 18 C6 F9 | 	decod	arg04, #14
0bd30     00 1B 06 F6 | 	mov	arg05, #256
0bd34     00 1C 06 F6 | 	mov	arg06, #0
0bd38     42 00 00 FF 
0bd3c     E8 E4 85 F1 | 	sub	objptr, ##34024
0bd40     48 47 B1 FD | 	call	#_audio096_spin2_play8
0bd44     0B 00 00 FF 
0bd48     CC E4 85 F1 | 	sub	objptr, ##5836
0bd4c     05 00 00 FF 
0bd50     B8 13 06 F6 | 	mov	arg01, ##3000
0bd54     CC 4D B1 FD | 	call	#__system___waitms
0bd58     50 00 00 FF 
0bd5c     B4 E4 05 F1 | 	add	objptr, ##41140
0bd60     F2 00 68 FC | 	wrlong	#0, objptr
0bd64     50 00 00 FF 
0bd68     B4 E4 85 F1 | 	sub	objptr, ##41140
0bd6c     72 12 06 F6 | 	mov	arg01, #114
0bd70     00 14 06 F6 | 	mov	arg02, #0
0bd74     4C FD BF FD | 	call	#_csave_addtoblock
0bd78     62 12 06 F6 | 	mov	arg01, #98
0bd7c     00 14 06 F6 | 	mov	arg02, #0
0bd80     40 FD BF FD | 	call	#_csave_addtoblock
0bd84     61 12 06 F6 | 	mov	arg01, #97
0bd88     00 14 06 F6 | 	mov	arg02, #0
0bd8c     34 FD BF FD | 	call	#_csave_addtoblock
0bd90     0D 12 06 F6 | 	mov	arg01, #13
0bd94     00 14 06 F6 | 	mov	arg02, #0
0bd98     28 FD BF FD | 	call	#_csave_addtoblock
0bd9c                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0bd9c                 | ' waitms 3000 
0bd9c                 | ' 
0bd9c                 | ' blockptr=0
0bd9c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0bd9c                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0bd9c     A7 02 68 FC | 	wrlong	#1, fp
0bda0     8C 4E 05 F1 | 	add	fp, #140
0bda4     A7 12 02 FB | 	rdlong	arg01, fp
0bda8     8C 4E 85 F1 | 	sub	fp, #140
0bdac     09 1F 02 F6 | 	mov	local01, arg01
0bdb0     97 06 48 FB | 	callpa	#(@LR__1048-@LR__1047)>>2,fcache_load_ptr_
0bdb4                 | LR__1047
0bdb4     0F FB C9 FA | 	rdbyte	result1, local01 wz
0bdb8     01 1E 06 51 |  if_ne	add	local01, #1
0bdbc     F4 FF 9F 5D |  if_ne	jmp	#LR__1047
0bdc0                 | LR__1048
0bdc0     09 1F 82 F1 | 	sub	local01, arg01
0bdc4     0F 21 02 F6 | 	mov	local02, local01
0bdc8     01 20 06 F1 | 	add	local02, #1
0bdcc                 | LR__1049
0bdcc     A7 1A 02 FB | 	rdlong	arg05, fp
0bdd0     10 1B 52 F2 | 	cmps	arg05, local02 wc
0bdd4     34 00 90 3D |  if_ae	jmp	#LR__1050
0bdd8     8C 4E 05 F1 | 	add	fp, #140
0bddc     A7 12 02 FB | 	rdlong	arg01, fp
0bde0     8C 4E 85 F1 | 	sub	fp, #140
0bde4     A7 14 02 FB | 	rdlong	arg02, fp
0bde8     01 16 06 F6 | 	mov	arg03, #1
0bdec     D4 6B B1 FD | 	call	#__system__Mid_S
0bdf0     FD 12 C2 FA | 	rdbyte	arg01, result1
0bdf4     00 14 06 F6 | 	mov	arg02, #0
0bdf8     C8 FC BF FD | 	call	#_csave_addtoblock
0bdfc     A7 1A 02 FB | 	rdlong	arg05, fp
0be00     01 1A 06 F1 | 	add	arg05, #1
0be04     A7 1A 62 FC | 	wrlong	arg05, fp
0be08     C0 FF 9F FD | 	jmp	#LR__1049
0be0c                 | LR__1050
0be0c     00 12 06 F6 | 	mov	arg01, #0
0be10     00 14 06 F6 | 	mov	arg02, #0
0be14     AC FC BF FD | 	call	#_csave_addtoblock
0be18     72 12 06 F6 | 	mov	arg01, #114
0be1c     00 14 06 F6 | 	mov	arg02, #0
0be20     A0 FC BF FD | 	call	#_csave_addtoblock
0be24     62 12 06 F6 | 	mov	arg01, #98
0be28     00 14 06 F6 | 	mov	arg02, #0
0be2c     94 FC BF FD | 	call	#_csave_addtoblock
0be30     73 12 06 F6 | 	mov	arg01, #115
0be34     00 14 06 F6 | 	mov	arg02, #0
0be38     88 FC BF FD | 	call	#_csave_addtoblock
0be3c     0D 12 06 F6 | 	mov	arg01, #13
0be40     00 14 06 F6 | 	mov	arg02, #0
0be44     7C FC BF FD | 	call	#_csave_addtoblock
0be48     4A 00 00 FF 
0be4c     88 E4 05 F1 | 	add	objptr, ##38024
0be50     F2 22 02 FB | 	rdlong	local03, objptr
0be54     4A 00 00 FF 
0be58     88 E4 85 F1 | 	sub	objptr, ##38024
0be5c     9C 4E 05 F1 | 	add	fp, #156
0be60     A7 22 62 FC | 	wrlong	local03, fp
0be64     9C 4E 85 F1 | 	sub	fp, #156
0be68                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0be68                 | ' 
0be68                 | ' saveptr=programstart
0be68                 | ' do
0be68                 | LR__1051
0be68     A0 4E 05 F1 | 	add	fp, #160
0be6c     A7 12 02 F6 | 	mov	arg01, fp
0be70     04 4E 85 F1 | 	sub	fp, #4
0be74     A7 14 02 FB | 	rdlong	arg02, fp
0be78     9C 4E 85 F1 | 	sub	fp, #156
0be7c     18 16 06 F6 | 	mov	arg03, #24
0be80     0B 00 00 FF 
0be84     CC E4 05 F1 | 	add	objptr, ##5836
0be88     64 3D B1 FD | 	call	#_psram_spin2_read1
0be8c     0C 4E 05 F1 | 	add	fp, #12
0be90     A7 12 02 F6 | 	mov	arg01, fp
0be94     9C 4E 05 F1 | 	add	fp, #156
0be98     A7 14 02 FB | 	rdlong	arg02, fp
0be9c     04 4E 05 F1 | 	add	fp, #4
0bea0     A7 16 02 FB | 	rdlong	arg03, fp
0bea4     AC 4E 85 F1 | 	sub	fp, #172
0bea8     44 3D B1 FD | 	call	#_psram_spin2_read1
0beac     0B 00 00 FF 
0beb0     CC E4 85 F1 | 	sub	objptr, ##5836
0beb4     AC 4E 05 F1 | 	add	fp, #172
0beb8     A7 12 02 FB | 	rdlong	arg01, fp
0bebc     AC 4E 85 F1 | 	sub	fp, #172
0bec0     00 14 06 F6 | 	mov	arg02, #0
0bec4     FC FB BF FD | 	call	#_csave_addtoblock
0bec8                 | ' 
0bec8                 | '   psram.read1(varptr(header(0)),saveptr,24)
0bec8                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0bec8                 | '   csave_addtoblock(header(3),0) ' that's always <255
0bec8                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0bec8     A7 00 68 FC | 	wrlong	#0, fp
0becc     AC 4E 05 F1 | 	add	fp, #172
0bed0     A7 24 02 FB | 	rdlong	local04, fp
0bed4     AC 4E 85 F1 | 	sub	fp, #172
0bed8                 | LR__1052
0bed8     A7 22 02 FB | 	rdlong	local03, fp
0bedc     12 23 52 F2 | 	cmps	local03, local04 wc
0bee0     2C 00 90 3D |  if_ae	jmp	#LR__1053
0bee4     A7 22 02 FB | 	rdlong	local03, fp
0bee8     0C 4E 05 F1 | 	add	fp, #12
0beec     A7 22 02 F1 | 	add	local03, fp
0bef0     11 13 C2 FA | 	rdbyte	arg01, local03
0bef4     00 14 06 F6 | 	mov	arg02, #0
0bef8     0C 4E 85 F1 | 	sub	fp, #12
0befc     C4 FB BF FD | 	call	#_csave_addtoblock
0bf00     A7 22 02 FB | 	rdlong	local03, fp
0bf04     01 22 06 F1 | 	add	local03, #1
0bf08     A7 22 62 FC | 	wrlong	local03, fp
0bf0c     C8 FF 9F FD | 	jmp	#LR__1052
0bf10                 | LR__1053
0bf10     B4 4E 05 F1 | 	add	fp, #180
0bf14     A7 22 02 FB | 	rdlong	local03, fp
0bf18     18 4E 85 F1 | 	sub	fp, #24
0bf1c     A7 22 62 FC | 	wrlong	local03, fp
0bf20     18 4E 05 F1 | 	add	fp, #24
0bf24     A7 22 02 FB | 	rdlong	local03, fp
0bf28     B4 4E 85 F1 | 	sub	fp, #180
0bf2c     FF FF 3F FF 
0bf30     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0bf34     30 FF 9F 5D |  if_ne	jmp	#LR__1051
0bf38     00 12 06 F6 | 	mov	arg01, #0
0bf3c     01 14 06 F6 | 	mov	arg02, #1
0bf40     80 FB BF FD | 	call	#_csave_addtoblock
0bf44     37 00 00 FF 
0bf48     10 E4 05 F1 | 	add	objptr, ##28176
0bf4c     F2 12 02 FB | 	rdlong	arg01, objptr
0bf50     37 00 00 FF 
0bf54     10 E4 85 F1 | 	sub	objptr, ##28176
0bf58     D4 13 06 F1 | 	add	arg01, #468
0bf5c     09 01 58 FC | 	wrword	#0, arg01
0bf60                 | LR__1054
0bf60     A7 F0 03 F6 | 	mov	ptra, fp
0bf64     B2 00 A0 FD | 	call	#popregs_
0bf68                 | _test_csave_ret
0bf68     2D 00 64 FD | 	ret
0bf6c                 | 
0bf6c                 | ' 
0bf6c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf6c                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0bf6c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf6c                 | ' 
0bf6c                 | ' 
0bf6c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf6c                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0bf6c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf6c                 | ' 
0bf6c                 | ' '-------------------- abs
0bf6c                 | ' 
0bf6c                 | ' sub do_abs
0bf6c                 | _do_abs
0bf6c     01 4A 05 F6 | 	mov	COUNT_, #1
0bf70     A8 00 A0 FD | 	call	#pushregs_
0bf74     0C F0 07 F1 | 	add	ptra, #12
0bf78     20 F4 BF FD | 	call	#_pop
0bf7c     FF 1E 02 F6 | 	mov	local01, result3
0bf80     A7 FA 61 FC | 	wrlong	result1, fp
0bf84     04 4E 05 F1 | 	add	fp, #4
0bf88     A7 FC 61 FC | 	wrlong	result2, fp
0bf8c     04 4E 05 F1 | 	add	fp, #4
0bf90     A7 1E 62 FC | 	wrlong	local01, fp
0bf94                 | ' 
0bf94                 | ' t1=pop()
0bf94                 | ' if t1.result_type=result_int then 
0bf94     08 4E 85 F1 | 	sub	fp, #8
0bf98     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bf9c     A7 12 02 AB |  if_e	rdlong	arg01, fp
0bfa0     09 1F 42 A6 |  if_e	abs	local01, arg01
0bfa4     A7 1E 62 AC |  if_e	wrlong	local01, fp
0bfa8     2C 00 90 AD |  if_e	jmp	#LR__1060
0bfac     08 4E 05 F1 | 	add	fp, #8
0bfb0     A7 1E 02 FB | 	rdlong	local01, fp
0bfb4     08 4E 85 F1 | 	sub	fp, #8
0bfb8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bfbc     A7 FA 01 AB |  if_e	rdlong	result1, fp
0bfc0     1F FA 05 A4 |  if_e	bitl	result1, #31
0bfc4     A7 FA 61 AC |  if_e	wrlong	result1, fp
0bfc8     08 4E 05 51 |  if_ne	add	fp, #8
0bfcc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0bfd0     08 4E 85 51 |  if_ne	sub	fp, #8
0bfd4     A7 50 68 5C |  if_ne	wrlong	#40, fp
0bfd8                 | LR__1060
0bfd8     A7 12 02 F6 | 	mov	arg01, fp
0bfdc     54 F4 BF FD | 	call	#_push
0bfe0     A7 F0 03 F6 | 	mov	ptra, fp
0bfe4     B2 00 A0 FD | 	call	#popregs_
0bfe8                 | _do_abs_ret
0bfe8     2D 00 64 FD | 	ret
0bfec                 | 
0bfec                 | ' 
0bfec                 | ' '-------------------- acos
0bfec                 | ' 
0bfec                 | ' sub do_acos
0bfec                 | _do_acos
0bfec     01 4A 05 F6 | 	mov	COUNT_, #1
0bff0     A8 00 A0 FD | 	call	#pushregs_
0bff4     10 F0 07 F1 | 	add	ptra, #16
0bff8     4A 00 00 FF 
0bffc     80 E4 05 F1 | 	add	objptr, ##38016
0c000     F2 1E 02 FB | 	rdlong	local01, objptr
0c004     0F 17 02 F6 | 	mov	arg03, local01
0c008     01 16 66 F0 | 	shl	arg03, #1
0c00c     0F 17 02 F1 | 	add	arg03, local01
0c010     02 16 66 F0 | 	shl	arg03, #2
0c014     03 00 00 FF 
0c018     04 E4 85 F1 | 	sub	objptr, ##1540
0c01c     F2 16 02 F1 | 	add	arg03, objptr
0c020     0B 17 02 FB | 	rdlong	arg03, arg03
0c024     0C 4E 05 F1 | 	add	fp, #12
0c028     A7 16 62 FC | 	wrlong	arg03, fp
0c02c                 | ' 
0c02c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c02c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0c02c     0C 4E 85 F1 | 	sub	fp, #12
0c030     02 16 16 F2 | 	cmp	arg03, #2 wc
0c034     47 00 00 FF 
0c038     7C E4 85 F1 | 	sub	objptr, ##36476
0c03c     0C 4E 05 C1 |  if_b	add	fp, #12
0c040     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c044     0C 4E 85 C1 |  if_b	sub	fp, #12
0c048     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1070
0c04c     00 12 06 F6 | 	mov	arg01, #0
0c050     40 A2 B1 FD | 	call	#__system___getiolock_0541
0c054     FD 12 02 F6 | 	mov	arg01, result1
0c058     D4 47 B1 FD | 	call	#__system___lockmem
0c05c     83 01 00 FF 
0c060     33 15 06 F6 | 	mov	arg02, ##@LR__5405
0c064     00 12 06 F6 | 	mov	arg01, #0
0c068     00 16 06 F6 | 	mov	arg03, #0
0c06c     B4 54 B1 FD | 	call	#__system___basic_print_string
0c070     00 12 06 F6 | 	mov	arg01, #0
0c074     1C A2 B1 FD | 	call	#__system___getiolock_0541
0c078     FD 00 68 FC | 	wrlong	#0, result1
0c07c     27 12 06 F6 | 	mov	arg01, #39
0c080     1C 12 B1 FD | 	call	#_printerror
0c084     64 00 90 FD | 	jmp	#LR__1071
0c088                 | LR__1070
0c088     10 F3 BF FD | 	call	#_pop
0c08c     FF 1E 02 F6 | 	mov	local01, result3
0c090     A7 FA 61 FC | 	wrlong	result1, fp
0c094     04 4E 05 F1 | 	add	fp, #4
0c098     A7 FC 61 FC | 	wrlong	result2, fp
0c09c     04 4E 05 F1 | 	add	fp, #4
0c0a0     A7 1E 62 FC | 	wrlong	local01, fp
0c0a4     08 4E 85 F1 | 	sub	fp, #8
0c0a8     A7 12 02 F6 | 	mov	arg01, fp
0c0ac     8C F5 BF FD | 	call	#_converttofloat
0c0b0     FD 12 02 F6 | 	mov	arg01, result1
0c0b4     6C 7E B1 FD | 	call	#__system____builtin_acosf
0c0b8     FD 12 02 F6 | 	mov	arg01, result1
0c0bc     51 00 00 FF 
0c0c0     C0 E5 05 F1 | 	add	objptr, ##41920
0c0c4     F2 14 02 FB | 	rdlong	arg02, objptr
0c0c8     51 00 00 FF 
0c0cc     C0 E5 85 F1 | 	sub	objptr, ##41920
0c0d0     10 73 B1 FD | 	call	#__system___float_mul
0c0d4     A7 FA 61 FC | 	wrlong	result1, fp
0c0d8     08 4E 05 F1 | 	add	fp, #8
0c0dc     A7 3C 68 FC | 	wrlong	#30, fp
0c0e0     08 4E 85 F1 | 	sub	fp, #8
0c0e4     A7 12 02 F6 | 	mov	arg01, fp
0c0e8     48 F3 BF FD | 	call	#_push
0c0ec                 | LR__1071
0c0ec     A7 F0 03 F6 | 	mov	ptra, fp
0c0f0     B2 00 A0 FD | 	call	#popregs_
0c0f4                 | _do_acos_ret
0c0f4     2D 00 64 FD | 	ret
0c0f8                 | 
0c0f8                 | ' 
0c0f8                 | ' '-------------------- asc
0c0f8                 | ' 
0c0f8                 | ' sub do_asc
0c0f8                 | _do_asc
0c0f8     01 4A 05 F6 | 	mov	COUNT_, #1
0c0fc     A8 00 A0 FD | 	call	#pushregs_
0c100     14 F0 07 F1 | 	add	ptra, #20
0c104     4A 00 00 FF 
0c108     80 E4 05 F1 | 	add	objptr, ##38016
0c10c     F2 1E 02 FB | 	rdlong	local01, objptr
0c110     0F 17 02 F6 | 	mov	arg03, local01
0c114     01 16 66 F0 | 	shl	arg03, #1
0c118     0F 17 02 F1 | 	add	arg03, local01
0c11c     02 16 66 F0 | 	shl	arg03, #2
0c120     03 00 00 FF 
0c124     04 E4 85 F1 | 	sub	objptr, ##1540
0c128     F2 16 02 F1 | 	add	arg03, objptr
0c12c     0B 17 02 FB | 	rdlong	arg03, arg03
0c130     0C 4E 05 F1 | 	add	fp, #12
0c134     A7 16 62 FC | 	wrlong	arg03, fp
0c138                 | ' 
0c138                 | ' numpar=compiledline(lineptr_e).result.uresult
0c138                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0c138     0C 4E 85 F1 | 	sub	fp, #12
0c13c     02 16 16 F2 | 	cmp	arg03, #2 wc
0c140     47 00 00 FF 
0c144     7C E4 85 F1 | 	sub	objptr, ##36476
0c148     0C 4E 05 C1 |  if_b	add	fp, #12
0c14c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c150     0C 4E 85 C1 |  if_b	sub	fp, #12
0c154     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1080
0c158     00 12 06 F6 | 	mov	arg01, #0
0c15c     34 A1 B1 FD | 	call	#__system___getiolock_0541
0c160     FD 12 02 F6 | 	mov	arg01, result1
0c164     C8 46 B1 FD | 	call	#__system___lockmem
0c168     83 01 00 FF 
0c16c     3A 15 06 F6 | 	mov	arg02, ##@LR__5406
0c170     00 12 06 F6 | 	mov	arg01, #0
0c174     00 16 06 F6 | 	mov	arg03, #0
0c178     A8 53 B1 FD | 	call	#__system___basic_print_string
0c17c     00 12 06 F6 | 	mov	arg01, #0
0c180     10 A1 B1 FD | 	call	#__system___getiolock_0541
0c184     FD 00 68 FC | 	wrlong	#0, result1
0c188     27 12 06 F6 | 	mov	arg01, #39
0c18c     10 11 B1 FD | 	call	#_printerror
0c190     B0 00 90 FD | 	jmp	#LR__1083
0c194                 | LR__1080
0c194     04 F2 BF FD | 	call	#_pop
0c198     FF 16 02 F6 | 	mov	arg03, result3
0c19c     A7 FA 61 FC | 	wrlong	result1, fp
0c1a0     04 4E 05 F1 | 	add	fp, #4
0c1a4     A7 FC 61 FC | 	wrlong	result2, fp
0c1a8     04 4E 05 F1 | 	add	fp, #4
0c1ac     A7 16 62 FC | 	wrlong	arg03, fp
0c1b0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0c1b0     08 4E 85 F1 | 	sub	fp, #8
0c1b4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c1b8     18 00 90 5D |  if_ne	jmp	#LR__1081
0c1bc     A7 12 02 FB | 	rdlong	arg01, fp
0c1c0     50 F3 BF FD | 	call	#_convertstring
0c1c4     A7 FA 61 FC | 	wrlong	result1, fp
0c1c8     08 4E 05 F1 | 	add	fp, #8
0c1cc     A7 3E 68 FC | 	wrlong	#31, fp
0c1d0     08 4E 85 F1 | 	sub	fp, #8
0c1d4                 | LR__1081
0c1d4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0c1d4     08 4E 05 F1 | 	add	fp, #8
0c1d8     A7 16 02 FB | 	rdlong	arg03, fp
0c1dc     08 4E 85 F1 | 	sub	fp, #8
0c1e0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0c1e4     3C 00 90 AD |  if_e	jmp	#LR__1082
0c1e8     00 12 06 F6 | 	mov	arg01, #0
0c1ec     A4 A0 B1 FD | 	call	#__system___getiolock_0541
0c1f0     FD 12 02 F6 | 	mov	arg01, result1
0c1f4     38 46 B1 FD | 	call	#__system___lockmem
0c1f8     83 01 00 FF 
0c1fc     40 15 06 F6 | 	mov	arg02, ##@LR__5407
0c200     00 12 06 F6 | 	mov	arg01, #0
0c204     00 16 06 F6 | 	mov	arg03, #0
0c208     18 53 B1 FD | 	call	#__system___basic_print_string
0c20c     00 12 06 F6 | 	mov	arg01, #0
0c210     80 A0 B1 FD | 	call	#__system___getiolock_0541
0c214     FD 00 68 FC | 	wrlong	#0, result1
0c218     0F 12 06 F6 | 	mov	arg01, #15
0c21c     80 10 B1 FD | 	call	#_printerror
0c220     20 00 90 FD | 	jmp	#LR__1083
0c224                 | LR__1082
0c224     A7 1E 02 FB | 	rdlong	local01, fp
0c228     0F 1F C2 FA | 	rdbyte	local01, local01
0c22c     A7 1E 62 FC | 	wrlong	local01, fp
0c230     08 4E 05 F1 | 	add	fp, #8
0c234     A7 38 68 FC | 	wrlong	#28, fp
0c238     08 4E 85 F1 | 	sub	fp, #8
0c23c     A7 12 02 F6 | 	mov	arg01, fp
0c240     F0 F1 BF FD | 	call	#_push
0c244                 | LR__1083
0c244     A7 F0 03 F6 | 	mov	ptra, fp
0c248     B2 00 A0 FD | 	call	#popregs_
0c24c                 | _do_asc_ret
0c24c     2D 00 64 FD | 	ret
0c250                 | 
0c250                 | ' 
0c250                 | ' '-------------------- asin
0c250                 | ' 
0c250                 | ' sub do_asin
0c250                 | _do_asin
0c250     01 4A 05 F6 | 	mov	COUNT_, #1
0c254     A8 00 A0 FD | 	call	#pushregs_
0c258     10 F0 07 F1 | 	add	ptra, #16
0c25c     4A 00 00 FF 
0c260     80 E4 05 F1 | 	add	objptr, ##38016
0c264     F2 1E 02 FB | 	rdlong	local01, objptr
0c268     0F 17 02 F6 | 	mov	arg03, local01
0c26c     01 16 66 F0 | 	shl	arg03, #1
0c270     0F 17 02 F1 | 	add	arg03, local01
0c274     02 16 66 F0 | 	shl	arg03, #2
0c278     03 00 00 FF 
0c27c     04 E4 85 F1 | 	sub	objptr, ##1540
0c280     F2 16 02 F1 | 	add	arg03, objptr
0c284     0B 17 02 FB | 	rdlong	arg03, arg03
0c288     0C 4E 05 F1 | 	add	fp, #12
0c28c     A7 16 62 FC | 	wrlong	arg03, fp
0c290                 | ' 
0c290                 | ' numpar=compiledline(lineptr_e).result.uresult
0c290                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0c290     0C 4E 85 F1 | 	sub	fp, #12
0c294     02 16 16 F2 | 	cmp	arg03, #2 wc
0c298     47 00 00 FF 
0c29c     7C E4 85 F1 | 	sub	objptr, ##36476
0c2a0     0C 4E 05 C1 |  if_b	add	fp, #12
0c2a4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c2a8     0C 4E 85 C1 |  if_b	sub	fp, #12
0c2ac     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1090
0c2b0     00 12 06 F6 | 	mov	arg01, #0
0c2b4     DC 9F B1 FD | 	call	#__system___getiolock_0541
0c2b8     FD 12 02 F6 | 	mov	arg01, result1
0c2bc     70 45 B1 FD | 	call	#__system___lockmem
0c2c0     83 01 00 FF 
0c2c4     46 15 06 F6 | 	mov	arg02, ##@LR__5408
0c2c8     00 12 06 F6 | 	mov	arg01, #0
0c2cc     00 16 06 F6 | 	mov	arg03, #0
0c2d0     50 52 B1 FD | 	call	#__system___basic_print_string
0c2d4     00 12 06 F6 | 	mov	arg01, #0
0c2d8     B8 9F B1 FD | 	call	#__system___getiolock_0541
0c2dc     FD 00 68 FC | 	wrlong	#0, result1
0c2e0     27 12 06 F6 | 	mov	arg01, #39
0c2e4     B8 0F B1 FD | 	call	#_printerror
0c2e8     64 00 90 FD | 	jmp	#LR__1091
0c2ec                 | LR__1090
0c2ec     AC F0 BF FD | 	call	#_pop
0c2f0     FF 1E 02 F6 | 	mov	local01, result3
0c2f4     A7 FA 61 FC | 	wrlong	result1, fp
0c2f8     04 4E 05 F1 | 	add	fp, #4
0c2fc     A7 FC 61 FC | 	wrlong	result2, fp
0c300     04 4E 05 F1 | 	add	fp, #4
0c304     A7 1E 62 FC | 	wrlong	local01, fp
0c308     08 4E 85 F1 | 	sub	fp, #8
0c30c     A7 12 02 F6 | 	mov	arg01, fp
0c310     28 F3 BF FD | 	call	#_converttofloat
0c314     FD 12 02 F6 | 	mov	arg01, result1
0c318     BC 7B B1 FD | 	call	#__system____builtin_asinf
0c31c     FD 12 02 F6 | 	mov	arg01, result1
0c320     51 00 00 FF 
0c324     C0 E5 05 F1 | 	add	objptr, ##41920
0c328     F2 14 02 FB | 	rdlong	arg02, objptr
0c32c     51 00 00 FF 
0c330     C0 E5 85 F1 | 	sub	objptr, ##41920
0c334     AC 70 B1 FD | 	call	#__system___float_mul
0c338     A7 FA 61 FC | 	wrlong	result1, fp
0c33c     08 4E 05 F1 | 	add	fp, #8
0c340     A7 3C 68 FC | 	wrlong	#30, fp
0c344     08 4E 85 F1 | 	sub	fp, #8
0c348     A7 12 02 F6 | 	mov	arg01, fp
0c34c     E4 F0 BF FD | 	call	#_push
0c350                 | LR__1091
0c350     A7 F0 03 F6 | 	mov	ptra, fp
0c354     B2 00 A0 FD | 	call	#popregs_
0c358                 | _do_asin_ret
0c358     2D 00 64 FD | 	ret
0c35c                 | 
0c35c                 | ' 
0c35c                 | ' '-------------------- atn
0c35c                 | ' 
0c35c                 | ' sub do_atn
0c35c                 | _do_atn
0c35c     01 4A 05 F6 | 	mov	COUNT_, #1
0c360     A8 00 A0 FD | 	call	#pushregs_
0c364     10 F0 07 F1 | 	add	ptra, #16
0c368     4A 00 00 FF 
0c36c     80 E4 05 F1 | 	add	objptr, ##38016
0c370     F2 1E 02 FB | 	rdlong	local01, objptr
0c374     0F 17 02 F6 | 	mov	arg03, local01
0c378     01 16 66 F0 | 	shl	arg03, #1
0c37c     0F 17 02 F1 | 	add	arg03, local01
0c380     02 16 66 F0 | 	shl	arg03, #2
0c384     03 00 00 FF 
0c388     04 E4 85 F1 | 	sub	objptr, ##1540
0c38c     F2 16 02 F1 | 	add	arg03, objptr
0c390     0B 17 02 FB | 	rdlong	arg03, arg03
0c394     0C 4E 05 F1 | 	add	fp, #12
0c398     A7 16 62 FC | 	wrlong	arg03, fp
0c39c                 | ' 
0c39c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c39c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0c39c     0C 4E 85 F1 | 	sub	fp, #12
0c3a0     02 16 16 F2 | 	cmp	arg03, #2 wc
0c3a4     47 00 00 FF 
0c3a8     7C E4 85 F1 | 	sub	objptr, ##36476
0c3ac     0C 4E 05 C1 |  if_b	add	fp, #12
0c3b0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c3b4     0C 4E 85 C1 |  if_b	sub	fp, #12
0c3b8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1100
0c3bc     00 12 06 F6 | 	mov	arg01, #0
0c3c0     D0 9E B1 FD | 	call	#__system___getiolock_0541
0c3c4     FD 12 02 F6 | 	mov	arg01, result1
0c3c8     64 44 B1 FD | 	call	#__system___lockmem
0c3cc     83 01 00 FF 
0c3d0     4D 15 06 F6 | 	mov	arg02, ##@LR__5409
0c3d4     00 12 06 F6 | 	mov	arg01, #0
0c3d8     00 16 06 F6 | 	mov	arg03, #0
0c3dc     44 51 B1 FD | 	call	#__system___basic_print_string
0c3e0     00 12 06 F6 | 	mov	arg01, #0
0c3e4     AC 9E B1 FD | 	call	#__system___getiolock_0541
0c3e8     FD 00 68 FC | 	wrlong	#0, result1
0c3ec     27 12 06 F6 | 	mov	arg01, #39
0c3f0     AC 0E B1 FD | 	call	#_printerror
0c3f4     6C 00 90 FD | 	jmp	#LR__1101
0c3f8                 | LR__1100
0c3f8     A0 EF BF FD | 	call	#_pop
0c3fc     FF 1E 02 F6 | 	mov	local01, result3
0c400     A7 FA 61 FC | 	wrlong	result1, fp
0c404     04 4E 05 F1 | 	add	fp, #4
0c408     A7 FC 61 FC | 	wrlong	result2, fp
0c40c     04 4E 05 F1 | 	add	fp, #4
0c410     A7 1E 62 FC | 	wrlong	local01, fp
0c414     08 4E 85 F1 | 	sub	fp, #8
0c418     A7 12 02 F6 | 	mov	arg01, fp
0c41c     1C F2 BF FD | 	call	#_converttofloat
0c420     FD 12 02 F6 | 	mov	arg01, result1
0c424     00 C0 1F FF 
0c428     00 14 06 F6 | 	mov	arg02, ##1065353216
0c42c     40 7B B1 FD | 	call	#__system____builtin_atan2f
0c430     FD 12 02 F6 | 	mov	arg01, result1
0c434     51 00 00 FF 
0c438     C0 E5 05 F1 | 	add	objptr, ##41920
0c43c     F2 14 02 FB | 	rdlong	arg02, objptr
0c440     51 00 00 FF 
0c444     C0 E5 85 F1 | 	sub	objptr, ##41920
0c448     98 6F B1 FD | 	call	#__system___float_mul
0c44c     A7 FA 61 FC | 	wrlong	result1, fp
0c450     08 4E 05 F1 | 	add	fp, #8
0c454     A7 3C 68 FC | 	wrlong	#30, fp
0c458     08 4E 85 F1 | 	sub	fp, #8
0c45c     A7 12 02 F6 | 	mov	arg01, fp
0c460     D0 EF BF FD | 	call	#_push
0c464                 | LR__1101
0c464     A7 F0 03 F6 | 	mov	ptra, fp
0c468     B2 00 A0 FD | 	call	#popregs_
0c46c                 | _do_atn_ret
0c46c     2D 00 64 FD | 	ret
0c470                 | 
0c470                 | ' 
0c470                 | ' '-------------------- beep
0c470                 | ' 
0c470                 | ' sub do_beep
0c470                 | _do_beep
0c470     02 4A 05 F6 | 	mov	COUNT_, #2
0c474     A8 00 A0 FD | 	call	#pushregs_
0c478     20 F0 07 F1 | 	add	ptra, #32
0c47c     1C EF BF FD | 	call	#_pop
0c480     FD 1E 02 F6 | 	mov	local01, result1
0c484     FE 1C 02 F6 | 	mov	arg06, result2
0c488     FF 20 02 F6 | 	mov	local02, result3
0c48c     0C 4E 05 F1 | 	add	fp, #12
0c490     A7 1E 62 FC | 	wrlong	local01, fp
0c494     04 4E 05 F1 | 	add	fp, #4
0c498     A7 1C 62 FC | 	wrlong	arg06, fp
0c49c     04 4E 05 F1 | 	add	fp, #4
0c4a0     A7 20 62 FC | 	wrlong	local02, fp
0c4a4     14 4E 85 F1 | 	sub	fp, #20
0c4a8     F0 EE BF FD | 	call	#_pop
0c4ac     A7 FA 61 FC | 	wrlong	result1, fp
0c4b0     04 4E 05 F1 | 	add	fp, #4
0c4b4     A7 FC 61 FC | 	wrlong	result2, fp
0c4b8     04 4E 05 F1 | 	add	fp, #4
0c4bc     A7 FE 61 FC | 	wrlong	result3, fp
0c4c0                 | ' 
0c4c0                 | ' t2=pop()
0c4c0                 | ' t1=pop()
0c4c0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0c4c0     08 4E 85 F1 | 	sub	fp, #8
0c4c4     1C FE 0D F2 | 	cmp	result3, #28 wz
0c4c8     08 4E 05 51 |  if_ne	add	fp, #8
0c4cc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c4d0     08 4E 85 51 |  if_ne	sub	fp, #8
0c4d4     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
0c4d8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c4dc     18 4E 05 A1 |  if_e	add	fp, #24
0c4e0     A7 1E 62 AC |  if_e	wrlong	local01, fp
0c4e4     18 4E 85 A1 |  if_e	sub	fp, #24
0c4e8     14 00 90 AD |  if_e	jmp	#LR__1110
0c4ec     A7 12 02 F6 | 	mov	arg01, fp
0c4f0     8C F0 BF FD | 	call	#_converttoint
0c4f4     18 4E 05 F1 | 	add	fp, #24
0c4f8     A7 FA 61 FC | 	wrlong	result1, fp
0c4fc     18 4E 85 F1 | 	sub	fp, #24
0c500                 | LR__1110
0c500     1C 4E 05 F1 | 	add	fp, #28
0c504     A7 FE 48 FC | 	wrbyte	#127, fp
0c508     01 4E 05 F1 | 	add	fp, #1
0c50c     A7 00 49 FC | 	wrbyte	#128, fp
0c510     01 4E 85 F1 | 	sub	fp, #1
0c514     A7 14 02 F6 | 	mov	arg02, fp
0c518     04 4E 85 F1 | 	sub	fp, #4
0c51c     A7 16 02 FB | 	rdlong	arg03, fp
0c520     18 4E 85 F1 | 	sub	fp, #24
0c524     01 16 66 F0 | 	shl	arg03, #1
0c528     07 12 06 F6 | 	mov	arg01, #7
0c52c     0E 18 C6 F9 | 	decod	arg04, #14
0c530     02 1A 06 F6 | 	mov	arg05, #2
0c534     00 1C 06 F6 | 	mov	arg06, #0
0c538     0B 00 00 FF 
0c53c     CC E4 05 F1 | 	add	objptr, ##5836
0c540     48 3F B1 FD | 	call	#_audio096_spin2_play8
0c544     0B 00 00 FF 
0c548     CC E4 85 F1 | 	sub	objptr, ##5836
0c54c     0C 4E 05 F1 | 	add	fp, #12
0c550     A7 12 02 F6 | 	mov	arg01, fp
0c554     0C 4E 85 F1 | 	sub	fp, #12
0c558     D8 EE BF FD | 	call	#_push
0c55c     58 A6 B0 FD | 	call	#_do_waitms
0c560     07 12 06 F6 | 	mov	arg01, #7
0c564     0B 00 00 FF 
0c568     CC E4 05 F1 | 	add	objptr, ##5836
0c56c     C0 3F B1 FD | 	call	#_audio096_spin2_stop
0c570     0B 00 00 FF 
0c574     CC E4 85 F1 | 	sub	objptr, ##5836
0c578     A7 F0 03 F6 | 	mov	ptra, fp
0c57c     B2 00 A0 FD | 	call	#popregs_
0c580                 | _do_beep_ret
0c580     2D 00 64 FD | 	ret
0c584                 | 
0c584                 | ' 
0c584                 | ' '-------------------- bin$
0c584                 | ' 
0c584                 | ' sub do_bin
0c584                 | _do_bin
0c584     01 4A 05 F6 | 	mov	COUNT_, #1
0c588     A8 00 A0 FD | 	call	#pushregs_
0c58c     18 F0 07 F1 | 	add	ptra, #24
0c590     4A 00 00 FF 
0c594     80 E4 05 F1 | 	add	objptr, ##38016
0c598     F2 1E 02 FB | 	rdlong	local01, objptr
0c59c     0F 17 02 F6 | 	mov	arg03, local01
0c5a0     01 16 66 F0 | 	shl	arg03, #1
0c5a4     0F 17 02 F1 | 	add	arg03, local01
0c5a8     02 16 66 F0 | 	shl	arg03, #2
0c5ac     03 00 00 FF 
0c5b0     04 E4 85 F1 | 	sub	objptr, ##1540
0c5b4     F2 16 02 F1 | 	add	arg03, objptr
0c5b8     0B 17 02 FB | 	rdlong	arg03, arg03
0c5bc     0C 4E 05 F1 | 	add	fp, #12
0c5c0     A7 16 62 FC | 	wrlong	arg03, fp
0c5c4                 | ' 
0c5c4                 | ' numpar=compiledline(lineptr_e).result.uresult
0c5c4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0c5c4     0C 4E 85 F1 | 	sub	fp, #12
0c5c8     03 16 16 F2 | 	cmp	arg03, #3 wc
0c5cc     47 00 00 FF 
0c5d0     7C E4 85 F1 | 	sub	objptr, ##36476
0c5d4     0C 4E 05 C1 |  if_b	add	fp, #12
0c5d8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c5dc     0C 4E 85 C1 |  if_b	sub	fp, #12
0c5e0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0c5e4     00 12 06 F6 | 	mov	arg01, #0
0c5e8     A8 9C B1 FD | 	call	#__system___getiolock_0541
0c5ec     FD 12 02 F6 | 	mov	arg01, result1
0c5f0     3C 42 B1 FD | 	call	#__system___lockmem
0c5f4     83 01 00 FF 
0c5f8     53 15 06 F6 | 	mov	arg02, ##@LR__5410
0c5fc     00 12 06 F6 | 	mov	arg01, #0
0c600     00 16 06 F6 | 	mov	arg03, #0
0c604     1C 4F B1 FD | 	call	#__system___basic_print_string
0c608     00 12 06 F6 | 	mov	arg01, #0
0c60c     84 9C B1 FD | 	call	#__system___getiolock_0541
0c610     FD 00 68 FC | 	wrlong	#0, result1
0c614     27 12 06 F6 | 	mov	arg01, #39
0c618     84 0C B1 FD | 	call	#_printerror
0c61c     B8 00 90 FD | 	jmp	#LR__1123
0c620                 | LR__1120
0c620                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0c620     0C 4E 05 F1 | 	add	fp, #12
0c624     A7 1E 02 FB | 	rdlong	local01, fp
0c628     0C 4E 85 F1 | 	sub	fp, #12
0c62c     02 1E 0E F2 | 	cmp	local01, #2 wz
0c630     38 00 90 5D |  if_ne	jmp	#LR__1121
0c634     64 ED BF FD | 	call	#_pop
0c638     FF 1E 02 F6 | 	mov	local01, result3
0c63c     A7 FA 61 FC | 	wrlong	result1, fp
0c640     04 4E 05 F1 | 	add	fp, #4
0c644     A7 FC 61 FC | 	wrlong	result2, fp
0c648     04 4E 05 F1 | 	add	fp, #4
0c64c     A7 1E 62 FC | 	wrlong	local01, fp
0c650     08 4E 85 F1 | 	sub	fp, #8
0c654     A7 12 02 F6 | 	mov	arg01, fp
0c658     24 EF BF FD | 	call	#_converttoint
0c65c     14 4E 05 F1 | 	add	fp, #20
0c660     A7 FA 61 FC | 	wrlong	result1, fp
0c664     14 4E 85 F1 | 	sub	fp, #20
0c668     0C 00 90 FD | 	jmp	#LR__1122
0c66c                 | LR__1121
0c66c     14 4E 05 F1 | 	add	fp, #20
0c670     A7 00 68 FC | 	wrlong	#0, fp
0c674     14 4E 85 F1 | 	sub	fp, #20
0c678                 | LR__1122
0c678     20 ED BF FD | 	call	#_pop
0c67c     FF 1E 02 F6 | 	mov	local01, result3
0c680     A7 FA 61 FC | 	wrlong	result1, fp
0c684     04 4E 05 F1 | 	add	fp, #4
0c688     A7 FC 61 FC | 	wrlong	result2, fp
0c68c     04 4E 05 F1 | 	add	fp, #4
0c690     A7 1E 62 FC | 	wrlong	local01, fp
0c694     08 4E 85 F1 | 	sub	fp, #8
0c698     A7 12 02 F6 | 	mov	arg01, fp
0c69c     E0 EE BF FD | 	call	#_converttoint
0c6a0     10 4E 05 F1 | 	add	fp, #16
0c6a4     A7 FA 61 FC | 	wrlong	result1, fp
0c6a8     FD 12 02 F6 | 	mov	arg01, result1
0c6ac     04 4E 05 F1 | 	add	fp, #4
0c6b0     A7 14 02 FB | 	rdlong	arg02, fp
0c6b4     14 4E 85 F1 | 	sub	fp, #20
0c6b8     02 16 06 F6 | 	mov	arg03, #2
0c6bc     40 64 B1 FD | 	call	#__system__Number_S
0c6c0     A7 FA 61 FC | 	wrlong	result1, fp
0c6c4     08 4E 05 F1 | 	add	fp, #8
0c6c8     A7 3E 68 FC | 	wrlong	#31, fp
0c6cc     08 4E 85 F1 | 	sub	fp, #8
0c6d0     A7 12 02 F6 | 	mov	arg01, fp
0c6d4     5C ED BF FD | 	call	#_push
0c6d8                 | LR__1123
0c6d8     A7 F0 03 F6 | 	mov	ptra, fp
0c6dc     B2 00 A0 FD | 	call	#popregs_
0c6e0                 | _do_bin_ret
0c6e0     2D 00 64 FD | 	ret
0c6e4                 | 
0c6e4                 | ' 
0c6e4                 | ' '-------------------- box
0c6e4                 | ' 
0c6e4                 | ' sub do_box
0c6e4                 | _do_box
0c6e4     03 4A 05 F6 | 	mov	COUNT_, #3
0c6e8     A8 00 A0 FD | 	call	#pushregs_
0c6ec     30 F0 07 F1 | 	add	ptra, #48
0c6f0     A8 EC BF FD | 	call	#_pop
0c6f4     FD 1A 02 F6 | 	mov	arg05, result1
0c6f8     FE 18 02 F6 | 	mov	arg04, result2
0c6fc     FF 16 02 F6 | 	mov	arg03, result3
0c700     24 4E 05 F1 | 	add	fp, #36
0c704     A7 1A 62 FC | 	wrlong	arg05, fp
0c708     04 4E 05 F1 | 	add	fp, #4
0c70c     A7 18 62 FC | 	wrlong	arg04, fp
0c710     04 4E 05 F1 | 	add	fp, #4
0c714     A7 16 62 FC | 	wrlong	arg03, fp
0c718     2C 4E 85 F1 | 	sub	fp, #44
0c71c     7C EC BF FD | 	call	#_pop
0c720     FD 1A 02 F6 | 	mov	arg05, result1
0c724     FE 18 02 F6 | 	mov	arg04, result2
0c728     FF 16 02 F6 | 	mov	arg03, result3
0c72c     18 4E 05 F1 | 	add	fp, #24
0c730     A7 1A 62 FC | 	wrlong	arg05, fp
0c734     04 4E 05 F1 | 	add	fp, #4
0c738     A7 18 62 FC | 	wrlong	arg04, fp
0c73c     04 4E 05 F1 | 	add	fp, #4
0c740     A7 16 62 FC | 	wrlong	arg03, fp
0c744     20 4E 85 F1 | 	sub	fp, #32
0c748     50 EC BF FD | 	call	#_pop
0c74c     FD 1A 02 F6 | 	mov	arg05, result1
0c750     FE 18 02 F6 | 	mov	arg04, result2
0c754     FF 1E 02 F6 | 	mov	local01, result3
0c758     0C 4E 05 F1 | 	add	fp, #12
0c75c     A7 1A 62 FC | 	wrlong	arg05, fp
0c760     04 4E 05 F1 | 	add	fp, #4
0c764     A7 18 62 FC | 	wrlong	arg04, fp
0c768     04 4E 05 F1 | 	add	fp, #4
0c76c     A7 1E 62 FC | 	wrlong	local01, fp
0c770     14 4E 85 F1 | 	sub	fp, #20
0c774     24 EC BF FD | 	call	#_pop
0c778     A7 FA 61 FC | 	wrlong	result1, fp
0c77c     04 4E 05 F1 | 	add	fp, #4
0c780     A7 FC 61 FC | 	wrlong	result2, fp
0c784     04 4E 05 F1 | 	add	fp, #4
0c788     A7 FE 61 FC | 	wrlong	result3, fp
0c78c                 | ' 
0c78c                 | ' t4=pop()
0c78c                 | ' t3=pop()
0c78c                 | ' t2=pop()
0c78c                 | ' t1=pop()
0c78c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0c78c     FF 1A 02 F6 | 	mov	arg05, result3
0c790     08 4E 85 F1 | 	sub	fp, #8
0c794     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0c798     08 4E 05 51 |  if_ne	add	fp, #8
0c79c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c7a0     08 4E 85 51 |  if_ne	sub	fp, #8
0c7a4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0c7a8     A8 00 90 5D |  if_ne	jmp	#LR__1130
0c7ac     14 4E 05 F1 | 	add	fp, #20
0c7b0     A7 1E 02 FB | 	rdlong	local01, fp
0c7b4     14 4E 85 F1 | 	sub	fp, #20
0c7b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c7bc     14 4E 05 51 |  if_ne	add	fp, #20
0c7c0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c7c4     14 4E 85 51 |  if_ne	sub	fp, #20
0c7c8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c7cc     84 00 90 5D |  if_ne	jmp	#LR__1130
0c7d0     20 4E 05 F1 | 	add	fp, #32
0c7d4     A7 1E 02 FB | 	rdlong	local01, fp
0c7d8     20 4E 85 F1 | 	sub	fp, #32
0c7dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c7e0     20 4E 05 51 |  if_ne	add	fp, #32
0c7e4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c7e8     20 4E 85 51 |  if_ne	sub	fp, #32
0c7ec     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c7f0     60 00 90 5D |  if_ne	jmp	#LR__1130
0c7f4     2C 4E 05 F1 | 	add	fp, #44
0c7f8     A7 1E 02 FB | 	rdlong	local01, fp
0c7fc     2C 4E 85 F1 | 	sub	fp, #44
0c800     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c804     2C 4E 05 51 |  if_ne	add	fp, #44
0c808     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c80c     2C 4E 85 51 |  if_ne	sub	fp, #44
0c810     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c814     3C 00 90 5D |  if_ne	jmp	#LR__1130
0c818     A7 12 02 FB | 	rdlong	arg01, fp
0c81c     0C 4E 05 F1 | 	add	fp, #12
0c820     A7 14 02 FB | 	rdlong	arg02, fp
0c824     0C 4E 05 F1 | 	add	fp, #12
0c828     A7 16 02 FB | 	rdlong	arg03, fp
0c82c     0C 4E 05 F1 | 	add	fp, #12
0c830     A7 18 02 FB | 	rdlong	arg04, fp
0c834     24 4E 85 F1 | 	sub	fp, #36
0c838     37 00 00 FF 
0c83c     28 E4 05 F1 | 	add	objptr, ##28200
0c840     F2 1A 02 FB | 	rdlong	arg05, objptr
0c844     37 00 00 FF 
0c848     28 E4 85 F1 | 	sub	objptr, ##28200
0c84c     3C 24 B1 FD | 	call	#_hg010b_spin2_box
0c850                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0c850     6C 00 90 FD | 	jmp	#LR__1131
0c854                 | LR__1130
0c854     A7 12 02 F6 | 	mov	arg01, fp
0c858     24 ED BF FD | 	call	#_converttoint
0c85c     FD 20 02 F6 | 	mov	local02, result1
0c860     0C 4E 05 F1 | 	add	fp, #12
0c864     A7 12 02 F6 | 	mov	arg01, fp
0c868     0C 4E 85 F1 | 	sub	fp, #12
0c86c     10 ED BF FD | 	call	#_converttoint
0c870     FD 22 02 F6 | 	mov	local03, result1
0c874     18 4E 05 F1 | 	add	fp, #24
0c878     A7 12 02 F6 | 	mov	arg01, fp
0c87c     18 4E 85 F1 | 	sub	fp, #24
0c880     FC EC BF FD | 	call	#_converttoint
0c884     FD 1E 02 F6 | 	mov	local01, result1
0c888     24 4E 05 F1 | 	add	fp, #36
0c88c     A7 12 02 F6 | 	mov	arg01, fp
0c890     24 4E 85 F1 | 	sub	fp, #36
0c894     E8 EC BF FD | 	call	#_converttoint
0c898     FD 18 02 F6 | 	mov	arg04, result1
0c89c     37 00 00 FF 
0c8a0     28 E4 05 F1 | 	add	objptr, ##28200
0c8a4     F2 1A 02 FB | 	rdlong	arg05, objptr
0c8a8     37 00 00 FF 
0c8ac     28 E4 85 F1 | 	sub	objptr, ##28200
0c8b0     10 13 02 F6 | 	mov	arg01, local02
0c8b4     11 15 02 F6 | 	mov	arg02, local03
0c8b8     0F 17 02 F6 | 	mov	arg03, local01
0c8bc     CC 23 B1 FD | 	call	#_hg010b_spin2_box
0c8c0                 | LR__1131
0c8c0     A7 F0 03 F6 | 	mov	ptra, fp
0c8c4     B2 00 A0 FD | 	call	#popregs_
0c8c8                 | _do_box_ret
0c8c8     2D 00 64 FD | 	ret
0c8cc                 | 
0c8cc                 | ' 
0c8cc                 | ' '-------------------- brun
0c8cc                 | ' 
0c8cc                 | ' sub do_brun
0c8cc                 | _do_brun
0c8cc     08 4A 05 F6 | 	mov	COUNT_, #8
0c8d0     A8 00 A0 FD | 	call	#pushregs_
0c8d4     C4 EA BF FD | 	call	#_pop
0c8d8     FE 1A 02 F6 | 	mov	arg05, result2
0c8dc     FF 18 02 F6 | 	mov	arg04, result3
0c8e0     FD 1E 02 F6 | 	mov	local01, result1
0c8e4     0D 21 02 F6 | 	mov	local02, arg05
0c8e8     0C 23 02 F6 | 	mov	local03, arg04
0c8ec                 | ' 
0c8ec                 | ' t1=pop() 
0c8ec                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0c8ec     2B 22 0E F2 | 	cmp	local03, #43 wz
0c8f0     10 00 90 5D |  if_ne	jmp	#LR__1140
0c8f4     0F 13 02 F6 | 	mov	arg01, local01
0c8f8     18 EC BF FD | 	call	#_convertstring
0c8fc     FD 1E 02 F6 | 	mov	local01, result1
0c900     1F 22 06 F6 | 	mov	local03, #31
0c904                 | LR__1140
0c904                 | ' if t1.result_type=result_string then
0c904     1F 22 0E F2 | 	cmp	local03, #31 wz
0c908     EC 01 90 5D |  if_ne	jmp	#LR__1144
0c90c     0F 25 02 F6 | 	mov	local04, local01
0c910                 | '   filename=t1.result.sresult
0c910                 | '   if left$(filename,1)="/" then 
0c910     12 13 02 F6 | 	mov	arg01, local04
0c914     01 14 06 F6 | 	mov	arg02, #1
0c918     90 5F B1 FD | 	call	#__system__Left_S
0c91c     FD 12 02 F6 | 	mov	arg01, result1
0c920     83 01 00 FF 
0c924     5A 15 06 F6 | 	mov	arg02, ##@LR__5411
0c928     2C 3F B1 FD | 	call	#__system___string_cmp
0c92c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c930     12 27 02 A6 |  if_e	mov	local05, local04
0c934     14 00 90 AD |  if_e	jmp	#LR__1141
0c938     83 01 00 FF 
0c93c     5C 13 06 F6 | 	mov	arg01, ##@LR__5412
0c940     12 15 02 F6 | 	mov	arg02, local04
0c944     44 3F B1 FD | 	call	#__system___string_concat
0c948     FD 26 02 F6 | 	mov	local05, result1
0c94c                 | LR__1141
0c94c                 | '   open fullfilename for input as #9
0c94c     09 12 06 F6 | 	mov	arg01, #9
0c950     13 15 02 F6 | 	mov	arg02, local05
0c954     00 16 06 F6 | 	mov	arg03, #0
0c958     D8 4A B1 FD | 	call	#__system___basic_open_string
0c95c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c960     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0c964     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c968     FD 28 0A F6 | 	mov	local06, result1 wz
0c96c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0c96c     8C 00 90 AD |  if_e	jmp	#LR__1142
0c970     00 12 06 F6 | 	mov	arg01, #0
0c974     1C 99 B1 FD | 	call	#__system___getiolock_0541
0c978     FD 12 02 F6 | 	mov	arg01, result1
0c97c     B0 3E B1 FD | 	call	#__system___lockmem
0c980     83 01 00 FF 
0c984     65 15 06 F6 | 	mov	arg02, ##@LR__5413
0c988     00 12 06 F6 | 	mov	arg01, #0
0c98c     00 16 06 F6 | 	mov	arg03, #0
0c990     90 4B B1 FD | 	call	#__system___basic_print_string
0c994     00 12 06 F6 | 	mov	arg01, #0
0c998     14 15 02 F6 | 	mov	arg02, local06
0c99c     00 16 06 F6 | 	mov	arg03, #0
0c9a0     0A 18 06 F6 | 	mov	arg04, #10
0c9a4     C0 4B B1 FD | 	call	#__system___basic_print_integer
0c9a8     83 01 00 FF 
0c9ac     73 15 06 F6 | 	mov	arg02, ##@LR__5414
0c9b0     00 12 06 F6 | 	mov	arg01, #0
0c9b4     00 16 06 F6 | 	mov	arg03, #0
0c9b8     68 4B B1 FD | 	call	#__system___basic_print_string
0c9bc     14 13 02 F6 | 	mov	arg01, local06
0c9c0     34 65 B1 FD | 	call	#__system___strerror
0c9c4     FD 14 02 F6 | 	mov	arg02, result1
0c9c8     00 12 06 F6 | 	mov	arg01, #0
0c9cc     00 16 06 F6 | 	mov	arg03, #0
0c9d0     50 4B B1 FD | 	call	#__system___basic_print_string
0c9d4     00 12 06 F6 | 	mov	arg01, #0
0c9d8     0A 14 06 F6 | 	mov	arg02, #10
0c9dc     00 16 06 F6 | 	mov	arg03, #0
0c9e0     E8 4A B1 FD | 	call	#__system___basic_print_char
0c9e4     00 12 06 F6 | 	mov	arg01, #0
0c9e8     A8 98 B1 FD | 	call	#__system___getiolock_0541
0c9ec     FD 00 68 FC | 	wrlong	#0, result1
0c9f0     09 12 06 F6 | 	mov	arg01, #9
0c9f4     CC 8E B1 FD | 	call	#__system__close
0c9f8     FC 00 90 FD | 	jmp	#LR__1145
0c9fc                 | LR__1142
0c9fc     01 2A 06 F6 | 	mov	local07, #1
0ca00     00 2C 06 F6 | 	mov	local08, #0
0ca04                 | '   do
0ca04                 | LR__1143
0ca04                 | '     get #9,pos,block(0),1024,r : pos+=r	
0ca04     4E 00 00 FF 
0ca08     B4 E4 05 F1 | 	add	objptr, ##40116
0ca0c     F2 16 02 F6 | 	mov	arg03, objptr
0ca10     4E 00 00 FF 
0ca14     B4 E4 85 F1 | 	sub	objptr, ##40116
0ca18     09 12 06 F6 | 	mov	arg01, #9
0ca1c     15 15 02 F6 | 	mov	arg02, local07
0ca20     0A 18 C6 F9 | 	decod	arg04, #10
0ca24     01 1A 06 F6 | 	mov	arg05, #1
0ca28     74 4C B1 FD | 	call	#__system___basic_get
0ca2c     FD 28 02 F6 | 	mov	local06, result1
0ca30     FD 2A 02 F1 | 	add	local07, result1
0ca34     4E 00 00 FF 
0ca38     B4 E4 05 F1 | 	add	objptr, ##40116
0ca3c     F2 12 02 F6 | 	mov	arg01, objptr
0ca40     16 15 02 F6 | 	mov	arg02, local08
0ca44     0A 16 C6 F9 | 	decod	arg03, #10
0ca48     42 00 00 FF 
0ca4c     E8 E5 85 F1 | 	sub	objptr, ##34280
0ca50     38 32 B1 FD | 	call	#_psram_spin2_write
0ca54     0B 00 00 FF 
0ca58     CC E4 85 F1 | 	sub	objptr, ##5836
0ca5c     14 2D 02 F1 | 	add	local08, local06
0ca60     02 00 00 FF 
0ca64     00 28 0E F2 | 	cmp	local06, ##1024 wz
0ca68     E0 03 00 AF 
0ca6c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
0ca70     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1143
0ca74     36 00 00 FF 
0ca78     FC E5 05 F1 | 	add	objptr, ##28156
0ca7c     F2 12 02 FB | 	rdlong	arg01, objptr
0ca80     03 12 62 FD | 	cogstop	arg01
0ca84     04 E4 05 F1 | 	add	objptr, #4
0ca88     F2 12 02 FB | 	rdlong	arg01, objptr
0ca8c     03 12 62 FD | 	cogstop	arg01
0ca90     04 E4 05 F1 | 	add	objptr, #4
0ca94     F2 12 02 FB | 	rdlong	arg01, objptr
0ca98     03 12 62 FD | 	cogstop	arg01
0ca9c     19 00 00 FF 
0caa0     14 E5 05 F1 | 	add	objptr, ##13076
0caa4     F2 12 02 FB | 	rdlong	arg01, objptr
0caa8     03 12 62 FD | 	cogstop	arg01
0caac     18 00 00 FF 
0cab0     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0cab4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0cab8     18 00 00 FF 
0cabc     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0cac0     19 00 00 FF 
0cac4     0C E5 85 F1 | 	sub	objptr, ##13068
0cac8     1E 2C 06 F6 | 	mov	local08, #30
0cacc     28 E4 61 FD | 	setq	objptr
0cad0     0A 2D F2 FC | 	coginit	local08, arg02 wc
0cad4     01 2C 66 C6 |  if_b	neg	local08, #1
0cad8     1B 00 00 FF 
0cadc     14 E4 05 F1 | 	add	objptr, ##13844
0cae0     F2 2C 62 FC | 	wrlong	local08, objptr
0cae4     52 00 00 FF 
0cae8     20 E4 85 F1 | 	sub	objptr, ##42016
0caec     00 12 06 F6 | 	mov	arg01, #0
0caf0     01 12 62 FD | 	cogid	arg01
0caf4     03 12 62 FD | 	cogstop	arg01
0caf8                 | LR__1144
0caf8                 | LR__1145
0caf8     A7 F0 03 F6 | 	mov	ptra, fp
0cafc     B2 00 A0 FD | 	call	#popregs_
0cb00                 | _do_brun_ret
0cb00     2D 00 64 FD | 	ret
0cb04                 | 
0cb04                 | ' 
0cb04                 | ' '-------------------- changefreq
0cb04                 | ' 
0cb04                 | ' sub do_changefreq
0cb04                 | _do_changefreq
0cb04     04 4A 05 F6 | 	mov	COUNT_, #4
0cb08     A8 00 A0 FD | 	call	#pushregs_
0cb0c     28 F0 07 F1 | 	add	ptra, #40
0cb10     88 E8 BF FD | 	call	#_pop
0cb14     FF 14 02 F6 | 	mov	arg02, result3
0cb18     A7 FA 61 FC | 	wrlong	result1, fp
0cb1c     04 4E 05 F1 | 	add	fp, #4
0cb20     A7 FC 61 FC | 	wrlong	result2, fp
0cb24     04 4E 05 F1 | 	add	fp, #4
0cb28     A7 14 62 FC | 	wrlong	arg02, fp
0cb2c     08 4E 85 F1 | 	sub	fp, #8
0cb30     A7 12 02 F6 | 	mov	arg01, fp
0cb34     04 EB BF FD | 	call	#_converttofloat
0cb38     24 4E 05 F1 | 	add	fp, #36
0cb3c     A7 FA 61 FC | 	wrlong	result1, fp
0cb40     24 4E 85 F1 | 	sub	fp, #36
0cb44     FD 14 02 F6 | 	mov	arg02, result1
0cb48     FC 16 20 FF 
0cb4c     54 12 06 F6 | 	mov	arg01, ##1076754516
0cb50     60 78 B1 FD | 	call	#__system____builtin_logbase
0cb54     FD 1E 02 F6 | 	mov	local01, result1
0cb58     1E 14 C6 F9 | 	decod	arg02, #30
0cb5c     FC 16 20 FF 
0cb60     54 12 06 F6 | 	mov	arg01, ##1076754516
0cb64     4C 78 B1 FD | 	call	#__system____builtin_logbase
0cb68     FD 14 02 F6 | 	mov	arg02, result1
0cb6c     0F 13 02 F6 | 	mov	arg01, local01
0cb70     74 6A B1 FD | 	call	#__system___float_div
0cb74     FD 12 02 F6 | 	mov	arg01, result1
0cb78     00 14 06 F6 | 	mov	arg02, #0
0cb7c     2C 6D B1 FD | 	call	#__system___float_tointeger
0cb80     10 4E 05 F1 | 	add	fp, #16
0cb84     A7 FA 61 FC | 	wrlong	result1, fp
0cb88     1E 1E C6 F9 | 	decod	local01, #30
0cb8c     FD 12 02 F6 | 	mov	arg01, result1
0cb90     10 4E 85 F1 | 	sub	fp, #16
0cb94     05 12 06 F1 | 	add	arg01, #5
0cb98     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb9c     1F 20 C6 C9 |  if_b	decod	local02, #31
0cba0     00 20 06 36 |  if_ae	mov	local02, #0
0cba4     38 64 B1 FD | 	call	#__system___float_fromuns
0cba8     10 FB 61 F5 | 	xor	result1, local02
0cbac     FD 14 02 F6 | 	mov	arg02, result1
0cbb0     0F 13 02 F6 | 	mov	arg01, local01
0cbb4     34 77 B1 FD | 	call	#__system____builtin_powf
0cbb8     FD 12 02 F6 | 	mov	arg01, result1
0cbbc     01 14 06 F6 | 	mov	arg02, #1
0cbc0     E8 6C B1 FD | 	call	#__system___float_tointeger
0cbc4     14 4E 05 F1 | 	add	fp, #20
0cbc8     A7 FA 61 FC | 	wrlong	result1, fp
0cbcc                 | ' skip=round(2^(lfreq+5))
0cbcc                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0cbcc     14 4E 85 F1 | 	sub	fp, #20
0cbd0     40 00 00 FF 
0cbd4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cbd8     30 00 90 CD |  if_b	jmp	#LR__1150
0cbdc     14 4E 05 F1 | 	add	fp, #20
0cbe0     A7 1E 02 FB | 	rdlong	local01, fp
0cbe4     0F 1F 52 F6 | 	abs	local01, local01 wc
0cbe8     0F 1E 46 F0 | 	shr	local01, #15
0cbec     0F 1F 82 F6 | 	negc	local01, local01
0cbf0     04 4E 05 F1 | 	add	fp, #4
0cbf4     A7 1E 62 FC | 	wrlong	local01, fp
0cbf8     04 4E 85 F1 | 	sub	fp, #4
0cbfc     40 00 80 FF 
0cc00     A7 00 68 FC | 	wrlong	##32768, fp
0cc04     14 4E 85 F1 | 	sub	fp, #20
0cc08     0C 00 90 FD | 	jmp	#LR__1151
0cc0c                 | LR__1150
0cc0c     18 4E 05 F1 | 	add	fp, #24
0cc10     A7 02 68 FC | 	wrlong	#1, fp
0cc14     18 4E 85 F1 | 	sub	fp, #24
0cc18                 | LR__1151
0cc18     24 4E 05 F1 | 	add	fp, #36
0cc1c     A7 14 02 FB | 	rdlong	arg02, fp
0cc20     24 4E 85 F1 | 	sub	fp, #36
0cc24     3E 2C 25 FF 
0cc28     3C 12 06 F6 | 	mov	arg01, ##1247312956
0cc2c     B8 69 B1 FD | 	call	#__system___float_div
0cc30     FD 1E 02 F6 | 	mov	local01, result1
0cc34     18 4E 05 F1 | 	add	fp, #24
0cc38     A7 12 02 FB | 	rdlong	arg01, fp
0cc3c     18 4E 85 F1 | 	sub	fp, #24
0cc40     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc44     1F 20 C6 C9 |  if_b	decod	local02, #31
0cc48     00 20 06 36 |  if_ae	mov	local02, #0
0cc4c     90 63 B1 FD | 	call	#__system___float_fromuns
0cc50     10 FB 61 F5 | 	xor	result1, local02
0cc54     FD 22 02 F6 | 	mov	local03, result1
0cc58     1E 24 C6 F9 | 	decod	local04, #30
0cc5c     0D 12 06 F6 | 	mov	arg01, #13
0cc60     10 4E 05 F1 | 	add	fp, #16
0cc64     A7 14 02 FB | 	rdlong	arg02, fp
0cc68     10 4E 85 F1 | 	sub	fp, #16
0cc6c     0A 13 82 F1 | 	sub	arg01, arg02
0cc70     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc74     1F 20 C6 C9 |  if_b	decod	local02, #31
0cc78     00 20 06 36 |  if_ae	mov	local02, #0
0cc7c     60 63 B1 FD | 	call	#__system___float_fromuns
0cc80     10 FB 61 F5 | 	xor	result1, local02
0cc84     FD 14 02 F6 | 	mov	arg02, result1
0cc88     12 13 02 F6 | 	mov	arg01, local04
0cc8c     5C 76 B1 FD | 	call	#__system____builtin_powf
0cc90     FD 14 02 F6 | 	mov	arg02, result1
0cc94     11 13 02 F6 | 	mov	arg01, local03
0cc98     48 67 B1 FD | 	call	#__system___float_mul
0cc9c     FD 14 02 F6 | 	mov	arg02, result1
0cca0     0F 13 02 F6 | 	mov	arg01, local01
0cca4     40 69 B1 FD | 	call	#__system___float_div
0cca8     FD 12 02 F6 | 	mov	arg01, result1
0ccac     01 14 06 F6 | 	mov	arg02, #1
0ccb0     F8 6B B1 FD | 	call	#__system___float_tointeger
0ccb4     FD 1E 02 F6 | 	mov	local01, result1
0ccb8     1C 4E 05 F1 | 	add	fp, #28
0ccbc     A7 1E 62 FC | 	wrlong	local01, fp
0ccc0     1C 4E 85 F1 | 	sub	fp, #28
0ccc4     D4 E6 BF FD | 	call	#_pop
0ccc8     FF 24 02 F6 | 	mov	local04, result3
0cccc     A7 FA 61 FC | 	wrlong	result1, fp
0ccd0     04 4E 05 F1 | 	add	fp, #4
0ccd4     A7 FC 61 FC | 	wrlong	result2, fp
0ccd8     04 4E 05 F1 | 	add	fp, #4
0ccdc     A7 24 62 FC | 	wrlong	local04, fp
0cce0     08 4E 85 F1 | 	sub	fp, #8
0cce4     A7 12 02 F6 | 	mov	arg01, fp
0cce8     94 E8 BF FD | 	call	#_converttoint
0ccec     FD 22 52 F6 | 	abs	local03, result1 wc
0ccf0     07 22 06 F5 | 	and	local03, #7
0ccf4     11 23 82 F6 | 	negc	local03, local03
0ccf8     0C 4E 05 F1 | 	add	fp, #12
0ccfc     A7 22 62 FC | 	wrlong	local03, fp
0cd00     08 4E 05 F1 | 	add	fp, #8
0cd04     A7 1E 02 FB | 	rdlong	local01, fp
0cd08     10 1E 66 F0 | 	shl	local01, #16
0cd0c     08 4E 05 F1 | 	add	fp, #8
0cd10     A7 24 02 FB | 	rdlong	local04, fp
0cd14     12 1F 02 F1 | 	add	local01, local04
0cd18     04 4E 05 F1 | 	add	fp, #4
0cd1c     A7 1E 62 FC | 	wrlong	local01, fp
0cd20                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0cd20     37 00 00 FF 
0cd24     10 E4 05 F1 | 	add	objptr, ##28176
0cd28     F2 12 02 FB | 	rdlong	arg01, objptr
0cd2c     37 00 00 FF 
0cd30     10 E4 85 F1 | 	sub	objptr, ##28176
0cd34     14 4E 85 F1 | 	sub	fp, #20
0cd38     A7 24 02 FB | 	rdlong	local04, fp
0cd3c     0C 4E 85 F1 | 	sub	fp, #12
0cd40     06 24 66 F0 | 	shl	local04, #6
0cd44     12 13 02 F1 | 	add	arg01, local04
0cd48     08 12 06 F1 | 	add	arg01, #8
0cd4c     09 FB 01 FB | 	rdlong	result1, arg01
0cd50     1B FA 2D F4 | 	testbn	result1, #27 wz
0cd54     3C 00 90 5D |  if_ne	jmp	#LR__1152
0cd58     37 00 00 FF 
0cd5c     10 E4 05 F1 | 	add	objptr, ##28176
0cd60     F2 12 02 FB | 	rdlong	arg01, objptr
0cd64     37 00 00 FF 
0cd68     10 E4 85 F1 | 	sub	objptr, ##28176
0cd6c     0C 4E 05 F1 | 	add	fp, #12
0cd70     A7 24 02 FB | 	rdlong	local04, fp
0cd74     06 24 66 F0 | 	shl	local04, #6
0cd78     12 13 02 F1 | 	add	arg01, local04
0cd7c     18 12 06 F1 | 	add	arg01, #24
0cd80     14 4E 05 F1 | 	add	fp, #20
0cd84     A7 14 02 FB | 	rdlong	arg02, fp
0cd88     20 4E 85 F1 | 	sub	fp, #32
0cd8c     09 15 62 FC | 	wrlong	arg02, arg01
0cd90     80 00 90 FD | 	jmp	#LR__1153
0cd94                 | LR__1152
0cd94     37 00 00 FF 
0cd98     10 E4 05 F1 | 	add	objptr, ##28176
0cd9c     F2 1E 02 FB | 	rdlong	local01, objptr
0cda0     37 00 00 FF 
0cda4     10 E4 85 F1 | 	sub	objptr, ##28176
0cda8     0C 4E 05 F1 | 	add	fp, #12
0cdac     A7 24 02 FB | 	rdlong	local04, fp
0cdb0     06 24 66 F0 | 	shl	local04, #6
0cdb4     12 1F 02 F1 | 	add	local01, local04
0cdb8     18 1E 06 F1 | 	add	local01, #24
0cdbc     18 4E 05 F1 | 	add	fp, #24
0cdc0     A7 14 02 FB | 	rdlong	arg02, fp
0cdc4     24 4E 85 F1 | 	sub	fp, #36
0cdc8     3E 2C 25 FF 
0cdcc     3C 12 06 F6 | 	mov	arg01, ##1247312956
0cdd0     14 68 B1 FD | 	call	#__system___float_div
0cdd4     FD 12 02 F6 | 	mov	arg01, result1
0cdd8     01 14 06 F6 | 	mov	arg02, #1
0cddc     CC 6A B1 FD | 	call	#__system___float_tointeger
0cde0     0F FB 51 FC | 	wrword	result1, local01
0cde4     37 00 00 FF 
0cde8     10 E4 05 F1 | 	add	objptr, ##28176
0cdec     F2 12 02 FB | 	rdlong	arg01, objptr
0cdf0     37 00 00 FF 
0cdf4     10 E4 85 F1 | 	sub	objptr, ##28176
0cdf8     0C 4E 05 F1 | 	add	fp, #12
0cdfc     A7 24 02 FB | 	rdlong	local04, fp
0ce00     0C 4E 85 F1 | 	sub	fp, #12
0ce04     06 24 66 F0 | 	shl	local04, #6
0ce08     12 13 02 F1 | 	add	arg01, local04
0ce0c     1A 12 06 F1 | 	add	arg01, #26
0ce10     09 01 5A FC | 	wrword	#256, arg01
0ce14                 | LR__1153
0ce14     A7 F0 03 F6 | 	mov	ptra, fp
0ce18     B2 00 A0 FD | 	call	#popregs_
0ce1c                 | _do_changefreq_ret
0ce1c     2D 00 64 FD | 	ret
0ce20                 | 
0ce20                 | ' 
0ce20                 | ' '-------------------- changepan
0ce20                 | ' 
0ce20                 | ' sub do_changepan
0ce20                 | _do_changepan
0ce20     01 4A 05 F6 | 	mov	COUNT_, #1
0ce24     A8 00 A0 FD | 	call	#pushregs_
0ce28     14 F0 07 F1 | 	add	ptra, #20
0ce2c     6C E5 BF FD | 	call	#_pop
0ce30     A7 FA 61 FC | 	wrlong	result1, fp
0ce34     04 4E 05 F1 | 	add	fp, #4
0ce38     A7 FC 61 FC | 	wrlong	result2, fp
0ce3c     04 4E 05 F1 | 	add	fp, #4
0ce40     A7 FE 61 FC | 	wrlong	result3, fp
0ce44     08 4E 85 F1 | 	sub	fp, #8
0ce48     00 00 23 FF 
0ce4c     00 1E 06 F6 | 	mov	local01, ##1174405120
0ce50     A7 12 02 F6 | 	mov	arg01, fp
0ce54     E4 E7 BF FD | 	call	#_converttofloat
0ce58     FD 14 02 F6 | 	mov	arg02, result1
0ce5c     0F 13 02 F6 | 	mov	arg01, local01
0ce60     80 65 B1 FD | 	call	#__system___float_mul
0ce64     FD 12 02 F6 | 	mov	arg01, result1
0ce68     01 14 06 F6 | 	mov	arg02, #1
0ce6c     3C 6A B1 FD | 	call	#__system___float_tointeger
0ce70     0D 1E C6 F9 | 	decod	local01, #13
0ce74     FD 1E 02 F1 | 	add	local01, result1
0ce78     10 4E 05 F1 | 	add	fp, #16
0ce7c     A7 1E 62 FC | 	wrlong	local01, fp
0ce80                 | ' 
0ce80                 | ' t1=pop()
0ce80                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ce80                 | ' if pan<0 then pan=0
0ce80     10 4E 85 F1 | 	sub	fp, #16
0ce84     00 1E 56 F2 | 	cmps	local01, #0 wc
0ce88     10 4E 05 C1 |  if_b	add	fp, #16
0ce8c     A7 00 68 CC |  if_b	wrlong	#0, fp
0ce90     10 4E 85 C1 |  if_b	sub	fp, #16
0ce94                 | ' if pan>16384 then pan=16384
0ce94     10 4E 05 F1 | 	add	fp, #16
0ce98     A7 1E 02 FB | 	rdlong	local01, fp
0ce9c     10 4E 85 F1 | 	sub	fp, #16
0cea0     20 00 00 FF 
0cea4     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0cea8     10 4E 05 31 |  if_ae	add	fp, #16
0ceac     20 00 80 3F 
0ceb0     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ceb4     10 4E 85 31 |  if_ae	sub	fp, #16
0ceb8     E0 E4 BF FD | 	call	#_pop
0cebc     FF 1E 02 F6 | 	mov	local01, result3
0cec0     A7 FA 61 FC | 	wrlong	result1, fp
0cec4     04 4E 05 F1 | 	add	fp, #4
0cec8     A7 FC 61 FC | 	wrlong	result2, fp
0cecc     04 4E 05 F1 | 	add	fp, #4
0ced0     A7 1E 62 FC | 	wrlong	local01, fp
0ced4     08 4E 85 F1 | 	sub	fp, #8
0ced8     A7 12 02 F6 | 	mov	arg01, fp
0cedc     A0 E6 BF FD | 	call	#_converttoint
0cee0     FD 1E 52 F6 | 	abs	local01, result1 wc
0cee4     07 1E 06 F5 | 	and	local01, #7
0cee8     0F 1F 82 F6 | 	negc	local01, local01
0ceec     0C 4E 05 F1 | 	add	fp, #12
0cef0     A7 1E 62 FC | 	wrlong	local01, fp
0cef4     37 00 00 FF 
0cef8     10 E4 05 F1 | 	add	objptr, ##28176
0cefc     F2 12 02 FB | 	rdlong	arg01, objptr
0cf00     37 00 00 FF 
0cf04     10 E4 85 F1 | 	sub	objptr, ##28176
0cf08     06 1E 66 F0 | 	shl	local01, #6
0cf0c     0F 13 02 F1 | 	add	arg01, local01
0cf10     16 12 06 F1 | 	add	arg01, #22
0cf14     04 4E 05 F1 | 	add	fp, #4
0cf18     A7 14 02 FB | 	rdlong	arg02, fp
0cf1c     10 4E 85 F1 | 	sub	fp, #16
0cf20     09 15 52 FC | 	wrword	arg02, arg01
0cf24     A7 F0 03 F6 | 	mov	ptra, fp
0cf28     B2 00 A0 FD | 	call	#popregs_
0cf2c                 | _do_changepan_ret
0cf2c     2D 00 64 FD | 	ret
0cf30                 | 
0cf30                 | ' 
0cf30                 | ' '-------------------- changevol
0cf30                 | ' 
0cf30                 | ' sub do_changevol
0cf30                 | _do_changevol
0cf30     00 4A 05 F6 | 	mov	COUNT_, #0
0cf34     A8 00 A0 FD | 	call	#pushregs_
0cf38     14 F0 07 F1 | 	add	ptra, #20
0cf3c     5C E4 BF FD | 	call	#_pop
0cf40     FF 14 02 F6 | 	mov	arg02, result3
0cf44     A7 FA 61 FC | 	wrlong	result1, fp
0cf48     04 4E 05 F1 | 	add	fp, #4
0cf4c     A7 FC 61 FC | 	wrlong	result2, fp
0cf50     04 4E 05 F1 | 	add	fp, #4
0cf54     A7 14 62 FC | 	wrlong	arg02, fp
0cf58     08 4E 85 F1 | 	sub	fp, #8
0cf5c     A7 12 02 F6 | 	mov	arg01, fp
0cf60     D8 E6 BF FD | 	call	#_converttofloat
0cf64     FD 12 02 F6 | 	mov	arg01, result1
0cf68     00 3D 22 FF 
0cf6c     00 14 06 F6 | 	mov	arg02, ##1148846080
0cf70     70 64 B1 FD | 	call	#__system___float_mul
0cf74     FD 12 02 F6 | 	mov	arg01, result1
0cf78     01 14 06 F6 | 	mov	arg02, #1
0cf7c     2C 69 B1 FD | 	call	#__system___float_tointeger
0cf80     FD 14 52 F6 | 	abs	arg02, result1 wc
0cf84     0D 14 46 F7 | 	zerox	arg02, #13
0cf88     0A 15 82 F6 | 	negc	arg02, arg02
0cf8c     10 4E 05 F1 | 	add	fp, #16
0cf90     A7 14 62 FC | 	wrlong	arg02, fp
0cf94     10 4E 85 F1 | 	sub	fp, #16
0cf98     00 E4 BF FD | 	call	#_pop
0cf9c     FF 14 02 F6 | 	mov	arg02, result3
0cfa0     A7 FA 61 FC | 	wrlong	result1, fp
0cfa4     04 4E 05 F1 | 	add	fp, #4
0cfa8     A7 FC 61 FC | 	wrlong	result2, fp
0cfac     04 4E 05 F1 | 	add	fp, #4
0cfb0     A7 14 62 FC | 	wrlong	arg02, fp
0cfb4     08 4E 85 F1 | 	sub	fp, #8
0cfb8     A7 12 02 F6 | 	mov	arg01, fp
0cfbc     C0 E5 BF FD | 	call	#_converttoint
0cfc0     FD 14 52 F6 | 	abs	arg02, result1 wc
0cfc4     07 14 06 F5 | 	and	arg02, #7
0cfc8     0A 15 82 F6 | 	negc	arg02, arg02
0cfcc     0C 4E 05 F1 | 	add	fp, #12
0cfd0     A7 14 62 FC | 	wrlong	arg02, fp
0cfd4     37 00 00 FF 
0cfd8     10 E4 05 F1 | 	add	objptr, ##28176
0cfdc     F2 12 02 FB | 	rdlong	arg01, objptr
0cfe0     37 00 00 FF 
0cfe4     10 E4 85 F1 | 	sub	objptr, ##28176
0cfe8     06 14 66 F0 | 	shl	arg02, #6
0cfec     0A 13 02 F1 | 	add	arg01, arg02
0cff0     14 12 06 F1 | 	add	arg01, #20
0cff4     04 4E 05 F1 | 	add	fp, #4
0cff8     A7 14 02 FB | 	rdlong	arg02, fp
0cffc     10 4E 85 F1 | 	sub	fp, #16
0d000     09 15 52 FC | 	wrword	arg02, arg01
0d004     A7 F0 03 F6 | 	mov	ptra, fp
0d008     B2 00 A0 FD | 	call	#popregs_
0d00c                 | _do_changevol_ret
0d00c     2D 00 64 FD | 	ret
0d010                 | 
0d010                 | ' 
0d010                 | ' '-------------------- changewav
0d010                 | ' 
0d010                 | ' sub do_changewav
0d010                 | _do_changewav
0d010     00 4A 05 F6 | 	mov	COUNT_, #0
0d014     A8 00 A0 FD | 	call	#pushregs_
0d018     14 F0 07 F1 | 	add	ptra, #20
0d01c     7C E3 BF FD | 	call	#_pop
0d020     FF 14 02 F6 | 	mov	arg02, result3
0d024     A7 FA 61 FC | 	wrlong	result1, fp
0d028     04 4E 05 F1 | 	add	fp, #4
0d02c     A7 FC 61 FC | 	wrlong	result2, fp
0d030     04 4E 05 F1 | 	add	fp, #4
0d034     A7 14 62 FC | 	wrlong	arg02, fp
0d038     08 4E 85 F1 | 	sub	fp, #8
0d03c     A7 12 02 F6 | 	mov	arg01, fp
0d040     3C E5 BF FD | 	call	#_converttoint
0d044     10 4E 05 F1 | 	add	fp, #16
0d048     A7 FA 61 FC | 	wrlong	result1, fp
0d04c                 | ' 
0d04c                 | ' t1=pop()
0d04c                 | ' wave=converttoint(t1)
0d04c                 | ' if wave<0 then wave=0
0d04c     FD 14 02 F6 | 	mov	arg02, result1
0d050     10 4E 85 F1 | 	sub	fp, #16
0d054     00 14 56 F2 | 	cmps	arg02, #0 wc
0d058     10 4E 05 C1 |  if_b	add	fp, #16
0d05c     A7 00 68 CC |  if_b	wrlong	#0, fp
0d060     10 4E 85 C1 |  if_b	sub	fp, #16
0d064     34 E3 BF FD | 	call	#_pop
0d068     FF 14 02 F6 | 	mov	arg02, result3
0d06c     A7 FA 61 FC | 	wrlong	result1, fp
0d070     04 4E 05 F1 | 	add	fp, #4
0d074     A7 FC 61 FC | 	wrlong	result2, fp
0d078     04 4E 05 F1 | 	add	fp, #4
0d07c     A7 14 62 FC | 	wrlong	arg02, fp
0d080     08 4E 85 F1 | 	sub	fp, #8
0d084     A7 12 02 F6 | 	mov	arg01, fp
0d088     F4 E4 BF FD | 	call	#_converttoint
0d08c     FD 14 52 F6 | 	abs	arg02, result1 wc
0d090     07 14 06 F5 | 	and	arg02, #7
0d094     0A 15 82 F6 | 	negc	arg02, arg02
0d098     0C 4E 05 F1 | 	add	fp, #12
0d09c     A7 14 62 FC | 	wrlong	arg02, fp
0d0a0                 | ' if wave <32 then 
0d0a0     04 4E 05 F1 | 	add	fp, #4
0d0a4     A7 14 02 FB | 	rdlong	arg02, fp
0d0a8     10 4E 85 F1 | 	sub	fp, #16
0d0ac     20 14 56 F2 | 	cmps	arg02, #32 wc
0d0b0     48 00 90 3D |  if_ae	jmp	#LR__1160
0d0b4     37 00 00 FF 
0d0b8     10 E4 05 F1 | 	add	objptr, ##28176
0d0bc     F2 12 02 FB | 	rdlong	arg01, objptr
0d0c0     37 00 00 FF 
0d0c4     10 E4 85 F1 | 	sub	objptr, ##28176
0d0c8     0C 4E 05 F1 | 	add	fp, #12
0d0cc     A7 14 02 FB | 	rdlong	arg02, fp
0d0d0     06 14 66 F0 | 	shl	arg02, #6
0d0d4     0A 13 02 F1 | 	add	arg01, arg02
0d0d8     08 12 06 F1 | 	add	arg01, #8
0d0dc     04 4E 05 F1 | 	add	fp, #4
0d0e0     A7 14 02 FB | 	rdlong	arg02, fp
0d0e4     10 4E 85 F1 | 	sub	fp, #16
0d0e8     0B 14 66 F0 | 	shl	arg02, #11
0d0ec     00 00 40 FF 
0d0f0     00 14 06 F1 | 	add	arg02, ##-2147483648
0d0f4     09 15 62 FC | 	wrlong	arg02, arg01
0d0f8     34 00 90 FD | 	jmp	#LR__1161
0d0fc                 | LR__1160
0d0fc     37 00 00 FF 
0d100     10 E4 05 F1 | 	add	objptr, ##28176
0d104     F2 12 02 FB | 	rdlong	arg01, objptr
0d108     37 00 00 FF 
0d10c     10 E4 85 F1 | 	sub	objptr, ##28176
0d110     0C 4E 05 F1 | 	add	fp, #12
0d114     A7 14 02 FB | 	rdlong	arg02, fp
0d118     0C 4E 85 F1 | 	sub	fp, #12
0d11c     06 14 66 F0 | 	shl	arg02, #6
0d120     0A 13 02 F1 | 	add	arg01, arg02
0d124     08 12 06 F1 | 	add	arg01, #8
0d128     00 00 C4 FF 
0d12c     09 01 68 FC | 	wrlong	##-2013265920, arg01
0d130                 | LR__1161
0d130     A7 F0 03 F6 | 	mov	ptra, fp
0d134     B2 00 A0 FD | 	call	#popregs_
0d138                 | _do_changewav_ret
0d138     2D 00 64 FD | 	ret
0d13c                 | 
0d13c                 | ' 
0d13c                 | ' '-------------------- chr$
0d13c                 | ' 
0d13c                 | ' sub do_chr
0d13c                 | _do_chr
0d13c     01 4A 05 F6 | 	mov	COUNT_, #1
0d140     A8 00 A0 FD | 	call	#pushregs_
0d144     14 F0 07 F1 | 	add	ptra, #20
0d148     4A 00 00 FF 
0d14c     80 E4 05 F1 | 	add	objptr, ##38016
0d150     F2 1E 02 FB | 	rdlong	local01, objptr
0d154     0F 17 02 F6 | 	mov	arg03, local01
0d158     01 16 66 F0 | 	shl	arg03, #1
0d15c     0F 17 02 F1 | 	add	arg03, local01
0d160     02 16 66 F0 | 	shl	arg03, #2
0d164     03 00 00 FF 
0d168     04 E4 85 F1 | 	sub	objptr, ##1540
0d16c     F2 16 02 F1 | 	add	arg03, objptr
0d170     0B 17 02 FB | 	rdlong	arg03, arg03
0d174     0C 4E 05 F1 | 	add	fp, #12
0d178     A7 16 62 FC | 	wrlong	arg03, fp
0d17c                 | ' 
0d17c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d17c                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0d17c     0C 4E 85 F1 | 	sub	fp, #12
0d180     02 16 16 F2 | 	cmp	arg03, #2 wc
0d184     47 00 00 FF 
0d188     7C E4 85 F1 | 	sub	objptr, ##36476
0d18c     0C 4E 05 C1 |  if_b	add	fp, #12
0d190     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0d194     0C 4E 85 C1 |  if_b	sub	fp, #12
0d198     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0d19c     00 12 06 F6 | 	mov	arg01, #0
0d1a0     F0 90 B1 FD | 	call	#__system___getiolock_0541
0d1a4     FD 12 02 F6 | 	mov	arg01, result1
0d1a8     84 36 B1 FD | 	call	#__system___lockmem
0d1ac     83 01 00 FF 
0d1b0     76 15 06 F6 | 	mov	arg02, ##@LR__5415
0d1b4     00 12 06 F6 | 	mov	arg01, #0
0d1b8     00 16 06 F6 | 	mov	arg03, #0
0d1bc     64 43 B1 FD | 	call	#__system___basic_print_string
0d1c0     00 12 06 F6 | 	mov	arg01, #0
0d1c4     CC 90 B1 FD | 	call	#__system___getiolock_0541
0d1c8     FD 00 68 FC | 	wrlong	#0, result1
0d1cc     27 12 06 F6 | 	mov	arg01, #39
0d1d0     CC 00 B1 FD | 	call	#_printerror
0d1d4     54 00 90 FD | 	jmp	#LR__1171
0d1d8                 | LR__1170
0d1d8     C0 E1 BF FD | 	call	#_pop
0d1dc     FF 1E 02 F6 | 	mov	local01, result3
0d1e0     A7 FA 61 FC | 	wrlong	result1, fp
0d1e4     04 4E 05 F1 | 	add	fp, #4
0d1e8     A7 FC 61 FC | 	wrlong	result2, fp
0d1ec     04 4E 05 F1 | 	add	fp, #4
0d1f0     A7 1E 62 FC | 	wrlong	local01, fp
0d1f4     08 4E 85 F1 | 	sub	fp, #8
0d1f8     A7 12 02 F6 | 	mov	arg01, fp
0d1fc     80 E3 BF FD | 	call	#_converttoint
0d200     10 4E 05 F1 | 	add	fp, #16
0d204     A7 FA 61 FC | 	wrlong	result1, fp
0d208     FD 12 02 F6 | 	mov	arg01, result1
0d20c     10 4E 85 F1 | 	sub	fp, #16
0d210     5C 58 B1 FD | 	call	#__system__Chr_S
0d214     A7 FA 61 FC | 	wrlong	result1, fp
0d218     08 4E 05 F1 | 	add	fp, #8
0d21c     A7 3E 68 FC | 	wrlong	#31, fp
0d220     08 4E 85 F1 | 	sub	fp, #8
0d224     A7 12 02 F6 | 	mov	arg01, fp
0d228     08 E2 BF FD | 	call	#_push
0d22c                 | LR__1171
0d22c     A7 F0 03 F6 | 	mov	ptra, fp
0d230     B2 00 A0 FD | 	call	#popregs_
0d234                 | _do_chr_ret
0d234     2D 00 64 FD | 	ret
0d238                 | 
0d238                 | ' 
0d238                 | ' '-------------------- circle
0d238                 | ' 
0d238                 | ' sub do_circle
0d238                 | _do_circle
0d238     02 4A 05 F6 | 	mov	COUNT_, #2
0d23c     A8 00 A0 FD | 	call	#pushregs_
0d240     24 F0 07 F1 | 	add	ptra, #36
0d244     54 E1 BF FD | 	call	#_pop
0d248     FD 18 02 F6 | 	mov	arg04, result1
0d24c     FE 16 02 F6 | 	mov	arg03, result2
0d250     FF 14 02 F6 | 	mov	arg02, result3
0d254     18 4E 05 F1 | 	add	fp, #24
0d258     A7 18 62 FC | 	wrlong	arg04, fp
0d25c     04 4E 05 F1 | 	add	fp, #4
0d260     A7 16 62 FC | 	wrlong	arg03, fp
0d264     04 4E 05 F1 | 	add	fp, #4
0d268     A7 14 62 FC | 	wrlong	arg02, fp
0d26c     20 4E 85 F1 | 	sub	fp, #32
0d270     28 E1 BF FD | 	call	#_pop
0d274     FD 18 02 F6 | 	mov	arg04, result1
0d278     FE 16 02 F6 | 	mov	arg03, result2
0d27c     FF 1E 02 F6 | 	mov	local01, result3
0d280     0C 4E 05 F1 | 	add	fp, #12
0d284     A7 18 62 FC | 	wrlong	arg04, fp
0d288     04 4E 05 F1 | 	add	fp, #4
0d28c     A7 16 62 FC | 	wrlong	arg03, fp
0d290     04 4E 05 F1 | 	add	fp, #4
0d294     A7 1E 62 FC | 	wrlong	local01, fp
0d298     14 4E 85 F1 | 	sub	fp, #20
0d29c     FC E0 BF FD | 	call	#_pop
0d2a0     A7 FA 61 FC | 	wrlong	result1, fp
0d2a4     04 4E 05 F1 | 	add	fp, #4
0d2a8     A7 FC 61 FC | 	wrlong	result2, fp
0d2ac     04 4E 05 F1 | 	add	fp, #4
0d2b0     A7 FE 61 FC | 	wrlong	result3, fp
0d2b4                 | ' 
0d2b4                 | ' t3=pop()
0d2b4                 | ' t2=pop()
0d2b4                 | ' t1=pop()
0d2b4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0d2b4     FF 18 02 F6 | 	mov	arg04, result3
0d2b8     08 4E 85 F1 | 	sub	fp, #8
0d2bc     1C 18 0E F2 | 	cmp	arg04, #28 wz
0d2c0     08 4E 05 51 |  if_ne	add	fp, #8
0d2c4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d2c8     08 4E 85 51 |  if_ne	sub	fp, #8
0d2cc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0d2d0     7C 00 90 5D |  if_ne	jmp	#LR__1180
0d2d4     14 4E 05 F1 | 	add	fp, #20
0d2d8     A7 1E 02 FB | 	rdlong	local01, fp
0d2dc     14 4E 85 F1 | 	sub	fp, #20
0d2e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d2e4     14 4E 05 51 |  if_ne	add	fp, #20
0d2e8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0d2ec     14 4E 85 51 |  if_ne	sub	fp, #20
0d2f0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0d2f4     58 00 90 5D |  if_ne	jmp	#LR__1180
0d2f8     20 4E 05 F1 | 	add	fp, #32
0d2fc     A7 1E 02 FB | 	rdlong	local01, fp
0d300     20 4E 85 F1 | 	sub	fp, #32
0d304     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d308     20 4E 05 51 |  if_ne	add	fp, #32
0d30c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0d310     20 4E 85 51 |  if_ne	sub	fp, #32
0d314     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0d318     34 00 90 5D |  if_ne	jmp	#LR__1180
0d31c     A7 12 02 FB | 	rdlong	arg01, fp
0d320     0C 4E 05 F1 | 	add	fp, #12
0d324     A7 14 02 FB | 	rdlong	arg02, fp
0d328     0C 4E 05 F1 | 	add	fp, #12
0d32c     A7 16 02 FB | 	rdlong	arg03, fp
0d330     18 4E 85 F1 | 	sub	fp, #24
0d334     37 00 00 FF 
0d338     28 E4 05 F1 | 	add	objptr, ##28200
0d33c     F2 18 02 FB | 	rdlong	arg04, objptr
0d340     37 00 00 FF 
0d344     28 E4 85 F1 | 	sub	objptr, ##28200
0d348     74 17 B1 FD | 	call	#_hg010b_spin2_circle
0d34c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0d34c     54 00 90 FD | 	jmp	#LR__1181
0d350                 | LR__1180
0d350     A7 12 02 F6 | 	mov	arg01, fp
0d354     28 E2 BF FD | 	call	#_converttoint
0d358     FD 1E 02 F6 | 	mov	local01, result1
0d35c     0C 4E 05 F1 | 	add	fp, #12
0d360     A7 12 02 F6 | 	mov	arg01, fp
0d364     0C 4E 85 F1 | 	sub	fp, #12
0d368     14 E2 BF FD | 	call	#_converttoint
0d36c     FD 20 02 F6 | 	mov	local02, result1
0d370     18 4E 05 F1 | 	add	fp, #24
0d374     A7 12 02 F6 | 	mov	arg01, fp
0d378     18 4E 85 F1 | 	sub	fp, #24
0d37c     00 E2 BF FD | 	call	#_converttoint
0d380     FD 16 02 F6 | 	mov	arg03, result1
0d384     37 00 00 FF 
0d388     28 E4 05 F1 | 	add	objptr, ##28200
0d38c     F2 18 02 FB | 	rdlong	arg04, objptr
0d390     37 00 00 FF 
0d394     28 E4 85 F1 | 	sub	objptr, ##28200
0d398     0F 13 02 F6 | 	mov	arg01, local01
0d39c     10 15 02 F6 | 	mov	arg02, local02
0d3a0     1C 17 B1 FD | 	call	#_hg010b_spin2_circle
0d3a4                 | LR__1181
0d3a4     A7 F0 03 F6 | 	mov	ptra, fp
0d3a8     B2 00 A0 FD | 	call	#popregs_
0d3ac                 | _do_circle_ret
0d3ac     2D 00 64 FD | 	ret
0d3b0                 | 
0d3b0                 | ' 
0d3b0                 | ' '-------------------- click
0d3b0                 | ' 
0d3b0                 | ' sub do_click
0d3b0                 | _do_click
0d3b0     E8 DF BF FD | 	call	#_pop
0d3b4     00 FA 4D F2 | 	cmps	result1, #0 wz
0d3b8                 | ' 
0d3b8                 | ' t1=pop()
0d3b8                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0d3b8     50 00 00 AF 
0d3bc     14 E5 05 A1 |  if_e	add	objptr, ##41236
0d3c0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0d3c4     50 00 00 FF 
0d3c8     14 E5 C5 F3 | 	sumz	objptr, ##41236
0d3cc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0d3d0     50 00 00 5F 
0d3d4     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0d3d8                 | _do_click_ret
0d3d8     2D 00 64 FD | 	ret
0d3dc                 | 
0d3dc                 | ' 
0d3dc                 | ' '-------------------- close
0d3dc                 | ' 
0d3dc                 | ' sub do_close
0d3dc                 | _do_close
0d3dc     03 4A 05 F6 | 	mov	COUNT_, #3
0d3e0     A8 00 A0 FD | 	call	#pushregs_
0d3e4     B4 DF BF FD | 	call	#_pop
0d3e8     FD 1E 02 F6 | 	mov	local01, result1
0d3ec     FF 16 02 F6 | 	mov	arg03, result3
0d3f0     FE 20 02 F6 | 	mov	local02, result2
0d3f4     0B 23 02 F6 | 	mov	local03, arg03
0d3f8                 | ' 
0d3f8                 | ' numpar=compiledline(lineptr_e).result.uresult
0d3f8                 | ' t1=pop()
0d3f8                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0d3f8     2C 22 0E F2 | 	cmp	local03, #44 wz
0d3fc     44 00 90 AD |  if_e	jmp	#LR__1190
0d400     00 12 06 F6 | 	mov	arg01, #0
0d404     8C 8E B1 FD | 	call	#__system___getiolock_0541
0d408     FD 12 02 F6 | 	mov	arg01, result1
0d40c     20 34 B1 FD | 	call	#__system___lockmem
0d410     83 01 00 FF 
0d414     7D 15 06 F6 | 	mov	arg02, ##@LR__5416
0d418     00 12 06 F6 | 	mov	arg01, #0
0d41c     00 16 06 F6 | 	mov	arg03, #0
0d420     00 41 B1 FD | 	call	#__system___basic_print_string
0d424     00 12 06 F6 | 	mov	arg01, #0
0d428     0A 14 06 F6 | 	mov	arg02, #10
0d42c     00 16 06 F6 | 	mov	arg03, #0
0d430     98 40 B1 FD | 	call	#__system___basic_print_char
0d434     00 12 06 F6 | 	mov	arg01, #0
0d438     58 8E B1 FD | 	call	#__system___getiolock_0541
0d43c     FD 00 68 FC | 	wrlong	#0, result1
0d440     08 00 90 FD | 	jmp	#LR__1191
0d444                 | LR__1190
0d444                 | ' channel  = t1.result.iresult
0d444                 | ' close #channel
0d444     0F 13 02 F6 | 	mov	arg01, local01
0d448     78 84 B1 FD | 	call	#__system__close
0d44c                 | LR__1191
0d44c     A7 F0 03 F6 | 	mov	ptra, fp
0d450     B2 00 A0 FD | 	call	#popregs_
0d454                 | _do_close_ret
0d454     2D 00 64 FD | 	ret
0d458                 | 
0d458                 | ' 
0d458                 | ' '-------------------- cls
0d458                 | ' 
0d458                 | ' sub do_cls
0d458                 | _do_cls
0d458     37 00 00 FF 
0d45c     3C E4 05 F1 | 	add	objptr, ##28220
0d460     F2 12 02 FB | 	rdlong	arg01, objptr
0d464     04 E4 85 F1 | 	sub	objptr, #4
0d468     F2 14 02 FB | 	rdlong	arg02, objptr
0d46c     37 00 00 FF 
0d470     38 E4 85 F1 | 	sub	objptr, ##28216
0d474     DC 1A B1 FD | 	call	#_hg010b_spin2_cls
0d478     37 00 00 FF 
0d47c     3C E4 05 F1 | 	add	objptr, ##28220
0d480     F2 14 02 FB | 	rdlong	arg02, objptr
0d484     14 E4 85 F1 | 	sub	objptr, #20
0d488     F2 14 62 FC | 	wrlong	arg02, objptr
0d48c     37 00 00 FF 
0d490     28 E4 85 F1 | 	sub	objptr, ##28200
0d494                 | _do_cls_ret
0d494     2D 00 64 FD | 	ret
0d498                 | 
0d498                 | ' 
0d498                 | ' '-------------------- color
0d498                 | ' 
0d498                 | ' sub do_color
0d498                 | _do_color
0d498     03 4A 05 F6 | 	mov	COUNT_, #3
0d49c     A8 00 A0 FD | 	call	#pushregs_
0d4a0     F8 DE BF FD | 	call	#_pop
0d4a4     FD 1E 02 F6 | 	mov	local01, result1
0d4a8     FE 20 02 F6 | 	mov	local02, result2
0d4ac     FF 22 02 F6 | 	mov	local03, result3
0d4b0     37 00 00 FF 
0d4b4     28 E4 05 F1 | 	add	objptr, ##28200
0d4b8     F2 1E 62 FC | 	wrlong	local01, objptr
0d4bc     37 00 00 FF 
0d4c0     28 E4 85 F1 | 	sub	objptr, ##28200
0d4c4     A7 F0 03 F6 | 	mov	ptra, fp
0d4c8     B2 00 A0 FD | 	call	#popregs_
0d4cc                 | _do_color_ret
0d4cc     2D 00 64 FD | 	ret
0d4d0                 | 
0d4d0                 | ' 
0d4d0                 | ' '-------------------- cos
0d4d0                 | ' 
0d4d0                 | ' sub do_cos
0d4d0                 | _do_cos
0d4d0     01 4A 05 F6 | 	mov	COUNT_, #1
0d4d4     A8 00 A0 FD | 	call	#pushregs_
0d4d8     10 F0 07 F1 | 	add	ptra, #16
0d4dc     4A 00 00 FF 
0d4e0     80 E4 05 F1 | 	add	objptr, ##38016
0d4e4     F2 1E 02 FB | 	rdlong	local01, objptr
0d4e8     0F 17 02 F6 | 	mov	arg03, local01
0d4ec     01 16 66 F0 | 	shl	arg03, #1
0d4f0     0F 17 02 F1 | 	add	arg03, local01
0d4f4     02 16 66 F0 | 	shl	arg03, #2
0d4f8     03 00 00 FF 
0d4fc     04 E4 85 F1 | 	sub	objptr, ##1540
0d500     F2 16 02 F1 | 	add	arg03, objptr
0d504     0B 17 02 FB | 	rdlong	arg03, arg03
0d508     0C 4E 05 F1 | 	add	fp, #12
0d50c     A7 16 62 FC | 	wrlong	arg03, fp
0d510                 | ' 
0d510                 | ' numpar=compiledline(lineptr_e).result.uresult
0d510                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0d510     0C 4E 85 F1 | 	sub	fp, #12
0d514     02 16 16 F2 | 	cmp	arg03, #2 wc
0d518     47 00 00 FF 
0d51c     7C E4 85 F1 | 	sub	objptr, ##36476
0d520     0C 4E 05 C1 |  if_b	add	fp, #12
0d524     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0d528     0C 4E 85 C1 |  if_b	sub	fp, #12
0d52c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0d530     00 12 06 F6 | 	mov	arg01, #0
0d534     5C 8D B1 FD | 	call	#__system___getiolock_0541
0d538     FD 12 02 F6 | 	mov	arg01, result1
0d53c     F0 32 B1 FD | 	call	#__system___lockmem
0d540     83 01 00 FF 
0d544     8F 15 06 F6 | 	mov	arg02, ##@LR__5417
0d548     00 12 06 F6 | 	mov	arg01, #0
0d54c     00 16 06 F6 | 	mov	arg03, #0
0d550     D0 3F B1 FD | 	call	#__system___basic_print_string
0d554     00 12 06 F6 | 	mov	arg01, #0
0d558     38 8D B1 FD | 	call	#__system___getiolock_0541
0d55c     FD 00 68 FC | 	wrlong	#0, result1
0d560     27 12 06 F6 | 	mov	arg01, #39
0d564     38 FD B0 FD | 	call	#_printerror
0d568     78 00 90 FD | 	jmp	#LR__1201
0d56c                 | LR__1200
0d56c     2C DE BF FD | 	call	#_pop
0d570     A7 FA 61 FC | 	wrlong	result1, fp
0d574     04 4E 05 F1 | 	add	fp, #4
0d578     A7 FC 61 FC | 	wrlong	result2, fp
0d57c     04 4E 05 F1 | 	add	fp, #4
0d580     A7 FE 61 FC | 	wrlong	result3, fp
0d584     08 4E 85 F1 | 	sub	fp, #8
0d588     51 00 00 FF 
0d58c     BC E5 05 F1 | 	add	objptr, ##41916
0d590     F2 1E 02 FB | 	rdlong	local01, objptr
0d594     51 00 00 FF 
0d598     BC E5 85 F1 | 	sub	objptr, ##41916
0d59c     A7 12 02 F6 | 	mov	arg01, fp
0d5a0     98 E0 BF FD | 	call	#_converttofloat
0d5a4     FD 14 02 F6 | 	mov	arg02, result1
0d5a8     0F 13 02 F6 | 	mov	arg01, local01
0d5ac     34 5E B1 FD | 	call	#__system___float_mul
0d5b0     FD 14 02 F6 | 	mov	arg02, result1
0d5b4     87 E4 1F FF 
0d5b8     DB 13 06 F6 | 	mov	arg01, ##1070141403
0d5bc     1F 14 E6 F4 | 	bitnot	arg02, #31
0d5c0     50 5A B1 FD | 	call	#__system___float_add
0d5c4     FD 12 02 F6 | 	mov	arg01, result1
0d5c8     78 67 B1 FD | 	call	#__system____builtin_sinf
0d5cc     A7 FA 61 FC | 	wrlong	result1, fp
0d5d0     08 4E 05 F1 | 	add	fp, #8
0d5d4     A7 3C 68 FC | 	wrlong	#30, fp
0d5d8     08 4E 85 F1 | 	sub	fp, #8
0d5dc     A7 12 02 F6 | 	mov	arg01, fp
0d5e0     50 DE BF FD | 	call	#_push
0d5e4                 | LR__1201
0d5e4     A7 F0 03 F6 | 	mov	ptra, fp
0d5e8     B2 00 A0 FD | 	call	#popregs_
0d5ec                 | _do_cos_ret
0d5ec     2D 00 64 FD | 	ret
0d5f0                 | 
0d5f0                 | ' 
0d5f0                 | ' '-------------------- cursor
0d5f0                 | ' 
0d5f0                 | ' sub do_cursor
0d5f0                 | _do_cursor
0d5f0     A8 DD BF FD | 	call	#_pop
0d5f4     00 FA 4D F2 | 	cmps	result1, #0 wz
0d5f8                 | ' t1=pop()
0d5f8                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0d5f8     14 00 90 5D |  if_ne	jmp	#LR__1210
0d5fc     11 12 06 F6 | 	mov	arg01, #17
0d600     00 14 06 F6 | 	mov	arg02, #0
0d604     00 16 06 F6 | 	mov	arg03, #0
0d608     28 0C B1 FD | 	call	#_hg010b_spin2_setspritesize
0d60c     10 00 90 FD | 	jmp	#LR__1211
0d610                 | LR__1210
0d610     11 12 06 F6 | 	mov	arg01, #17
0d614     08 14 06 F6 | 	mov	arg02, #8
0d618     10 16 06 F6 | 	mov	arg03, #16
0d61c     14 0C B1 FD | 	call	#_hg010b_spin2_setspritesize
0d620                 | LR__1211
0d620                 | _do_cursor_ret
0d620     2D 00 64 FD | 	ret
0d624                 | 
0d624                 | ' 
0d624                 | ' '-------------------- defenv
0d624                 | ' 
0d624                 | ' sub do_defenv
0d624                 | _do_defenv
0d624     08 4A 05 F6 | 	mov	COUNT_, #8
0d628     A8 00 A0 FD | 	call	#pushregs_
0d62c     58 F0 07 F1 | 	add	ptra, #88
0d630     4A 00 00 FF 
0d634     80 E4 05 F1 | 	add	objptr, ##38016
0d638     F2 1E 02 FB | 	rdlong	local01, objptr
0d63c     0F 1B 02 F6 | 	mov	arg05, local01
0d640     01 1A 66 F0 | 	shl	arg05, #1
0d644     0F 1B 02 F1 | 	add	arg05, local01
0d648     02 1A 66 F0 | 	shl	arg05, #2
0d64c     03 00 00 FF 
0d650     04 E4 85 F1 | 	sub	objptr, ##1540
0d654     F2 1A 02 F1 | 	add	arg05, objptr
0d658     0D 1B 02 FB | 	rdlong	arg05, arg05
0d65c     10 4E 05 F1 | 	add	fp, #16
0d660     A7 1A 62 FC | 	wrlong	arg05, fp
0d664                 | ' 
0d664                 | ' numpar=compiledline(lineptr_e).result.uresult
0d664                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0d664     10 4E 85 F1 | 	sub	fp, #16
0d668     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d66c     47 00 00 FF 
0d670     7C E4 85 F1 | 	sub	objptr, ##36476
0d674     10 4E 05 51 |  if_ne	add	fp, #16
0d678     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d67c     10 4E 85 51 |  if_ne	sub	fp, #16
0d680     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0d684     8C 0A 90 5D |  if_ne	jmp	#LR__1241
0d688                 | ' 
0d688                 | ' if numpar=2 then						' env from .h2 or from a pointer
0d688     10 4E 05 F1 | 	add	fp, #16
0d68c     A7 1E 02 FB | 	rdlong	local01, fp
0d690     10 4E 85 F1 | 	sub	fp, #16
0d694     02 1E 0E F2 | 	cmp	local01, #2 wz
0d698     24 04 90 5D |  if_ne	jmp	#LR__1233
0d69c     FC DC BF FD | 	call	#_pop
0d6a0     FF 1A 02 F6 | 	mov	arg05, result3
0d6a4     40 4E 05 F1 | 	add	fp, #64
0d6a8     A7 FA 61 FC | 	wrlong	result1, fp
0d6ac     04 4E 05 F1 | 	add	fp, #4
0d6b0     A7 FC 61 FC | 	wrlong	result2, fp
0d6b4     04 4E 05 F1 | 	add	fp, #4
0d6b8     A7 1A 62 FC | 	wrlong	arg05, fp
0d6bc                 | '   t1=pop()
0d6bc                 | '   if t1.result_type=result_string2 then 
0d6bc     48 4E 85 F1 | 	sub	fp, #72
0d6c0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d6c4     20 00 90 5D |  if_ne	jmp	#LR__1220
0d6c8     40 4E 05 F1 | 	add	fp, #64
0d6cc     A7 12 02 FB | 	rdlong	arg01, fp
0d6d0     40 4E 85 F1 | 	sub	fp, #64
0d6d4     3C DE BF FD | 	call	#_convertstring
0d6d8     4C 4E 05 F1 | 	add	fp, #76
0d6dc     A7 FA 61 FC | 	wrlong	result1, fp
0d6e0     4C 4E 85 F1 | 	sub	fp, #76
0d6e4     58 00 90 FD | 	jmp	#LR__1223
0d6e8                 | LR__1220
0d6e8     48 4E 05 F1 | 	add	fp, #72
0d6ec     A7 1E 02 FB | 	rdlong	local01, fp
0d6f0     48 4E 85 F1 | 	sub	fp, #72
0d6f4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d6f8     18 00 90 5D |  if_ne	jmp	#LR__1221
0d6fc     40 4E 05 F1 | 	add	fp, #64
0d700     A7 1E 02 FB | 	rdlong	local01, fp
0d704     0C 4E 05 F1 | 	add	fp, #12
0d708     A7 1E 62 FC | 	wrlong	local01, fp
0d70c     4C 4E 85 F1 | 	sub	fp, #76
0d710     2C 00 90 FD | 	jmp	#LR__1222
0d714                 | LR__1221
0d714     83 01 00 FF 
0d718     95 1F 06 F6 | 	mov	local01, ##@LR__5418
0d71c     4C 4E 05 F1 | 	add	fp, #76
0d720     A7 1E 62 FC | 	wrlong	local01, fp
0d724     0C 4E 85 F1 | 	sub	fp, #12
0d728     A7 12 02 F6 | 	mov	arg01, fp
0d72c     40 4E 85 F1 | 	sub	fp, #64
0d730     4C DE BF FD | 	call	#_converttoint
0d734     1C 4E 05 F1 | 	add	fp, #28
0d738     A7 FA 61 FC | 	wrlong	result1, fp
0d73c     1C 4E 85 F1 | 	sub	fp, #28
0d740                 | LR__1222
0d740                 | LR__1223
0d740                 | '   if s1<>"" then 
0d740     4C 4E 05 F1 | 	add	fp, #76
0d744     A7 12 02 FB | 	rdlong	arg01, fp
0d748     4C 4E 85 F1 | 	sub	fp, #76
0d74c     83 01 00 FF 
0d750     96 15 06 F6 | 	mov	arg02, ##@LR__5419
0d754     00 31 B1 FD | 	call	#__system___string_cmp
0d758     00 FA 0D F2 | 	cmp	result1, #0 wz
0d75c     24 02 90 AD |  if_e	jmp	#LR__1227
0d760     38 DC BF FD | 	call	#_pop
0d764     FF 1E 02 F6 | 	mov	local01, result3
0d768     40 4E 05 F1 | 	add	fp, #64
0d76c     A7 FA 61 FC | 	wrlong	result1, fp
0d770     04 4E 05 F1 | 	add	fp, #4
0d774     A7 FC 61 FC | 	wrlong	result2, fp
0d778     04 4E 05 F1 | 	add	fp, #4
0d77c     A7 1E 62 FC | 	wrlong	local01, fp
0d780     08 4E 85 F1 | 	sub	fp, #8
0d784     A7 12 02 F6 | 	mov	arg01, fp
0d788     40 4E 85 F1 | 	sub	fp, #64
0d78c     F0 DD BF FD | 	call	#_converttoint
0d790     18 4E 05 F1 | 	add	fp, #24
0d794     A7 FA 61 FC | 	wrlong	result1, fp
0d798     18 4E 85 F1 | 	sub	fp, #24
0d79c                 | '     t1=pop()
0d79c                 | '     channel=converttoint(t1) 
0d79c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0d79c     09 12 06 F6 | 	mov	arg01, #9
0d7a0     20 81 B1 FD | 	call	#__system__close
0d7a4     09 1E 06 F6 | 	mov	local01, #9
0d7a8     83 01 00 FF 
0d7ac     97 13 06 F6 | 	mov	arg01, ##@LR__5420
0d7b0     4C 4E 05 F1 | 	add	fp, #76
0d7b4     A7 14 02 FB | 	rdlong	arg02, fp
0d7b8     4C 4E 85 F1 | 	sub	fp, #76
0d7bc     CC 30 B1 FD | 	call	#__system___string_concat
0d7c0     FD 14 02 F6 | 	mov	arg02, result1
0d7c4     0F 13 02 F6 | 	mov	arg01, local01
0d7c8     00 16 06 F6 | 	mov	arg03, #0
0d7cc     64 3C B1 FD | 	call	#__system___basic_open_string
0d7d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d7d4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d7d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d7dc     0C 4E 05 F1 | 	add	fp, #12
0d7e0     A7 FA 61 FC | 	wrlong	result1, fp
0d7e4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d7e4     0C 4E 85 F1 | 	sub	fp, #12
0d7e8     A0 00 90 AD |  if_e	jmp	#LR__1224
0d7ec     00 12 06 F6 | 	mov	arg01, #0
0d7f0     A0 8A B1 FD | 	call	#__system___getiolock_0541
0d7f4     FD 12 02 F6 | 	mov	arg01, result1
0d7f8     34 30 B1 FD | 	call	#__system___lockmem
0d7fc     83 01 00 FF 
0d800     A4 15 06 F6 | 	mov	arg02, ##@LR__5421
0d804     00 12 06 F6 | 	mov	arg01, #0
0d808     00 16 06 F6 | 	mov	arg03, #0
0d80c     14 3D B1 FD | 	call	#__system___basic_print_string
0d810     0C 4E 05 F1 | 	add	fp, #12
0d814     A7 14 02 FB | 	rdlong	arg02, fp
0d818     0C 4E 85 F1 | 	sub	fp, #12
0d81c     00 12 06 F6 | 	mov	arg01, #0
0d820     00 16 06 F6 | 	mov	arg03, #0
0d824     0A 18 06 F6 | 	mov	arg04, #10
0d828     3C 3D B1 FD | 	call	#__system___basic_print_integer
0d82c     83 01 00 FF 
0d830     B2 15 06 F6 | 	mov	arg02, ##@LR__5422
0d834     00 12 06 F6 | 	mov	arg01, #0
0d838     00 16 06 F6 | 	mov	arg03, #0
0d83c     E4 3C B1 FD | 	call	#__system___basic_print_string
0d840     00 1E 06 F6 | 	mov	local01, #0
0d844     0C 4E 05 F1 | 	add	fp, #12
0d848     A7 12 02 FB | 	rdlong	arg01, fp
0d84c     0C 4E 85 F1 | 	sub	fp, #12
0d850     A4 56 B1 FD | 	call	#__system___strerror
0d854     FD 14 02 F6 | 	mov	arg02, result1
0d858     0F 13 02 F6 | 	mov	arg01, local01
0d85c     00 16 06 F6 | 	mov	arg03, #0
0d860     C0 3C B1 FD | 	call	#__system___basic_print_string
0d864     00 12 06 F6 | 	mov	arg01, #0
0d868     0A 14 06 F6 | 	mov	arg02, #10
0d86c     00 16 06 F6 | 	mov	arg03, #0
0d870     58 3C B1 FD | 	call	#__system___basic_print_char
0d874     00 12 06 F6 | 	mov	arg01, #0
0d878     18 8A B1 FD | 	call	#__system___getiolock_0541
0d87c     FD 00 68 FC | 	wrlong	#0, result1
0d880     09 12 06 F6 | 	mov	arg01, #9
0d884     3C 80 B1 FD | 	call	#__system__close
0d888     88 08 90 FD | 	jmp	#LR__1241
0d88c                 | LR__1224
0d88c                 | '     get #9,17,envbuf8(channel,0),256
0d88c     18 4E 05 F1 | 	add	fp, #24
0d890     A7 1A 02 FB | 	rdlong	arg05, fp
0d894     18 4E 85 F1 | 	sub	fp, #24
0d898     0D 17 02 F6 | 	mov	arg03, arg05
0d89c     09 16 66 F0 | 	shl	arg03, #9
0d8a0     0D 17 02 F1 | 	add	arg03, arg05
0d8a4     0C 00 00 FF 
0d8a8     D8 E4 05 F1 | 	add	objptr, ##6360
0d8ac     F2 16 02 F1 | 	add	arg03, objptr
0d8b0     09 12 06 F6 | 	mov	arg01, #9
0d8b4     11 14 06 F6 | 	mov	arg02, #17
0d8b8     00 19 06 F6 | 	mov	arg04, #256
0d8bc     01 1A 06 F6 | 	mov	arg05, #1
0d8c0     0C 00 00 FF 
0d8c4     D8 E4 85 F1 | 	sub	objptr, ##6360
0d8c8     D4 3D B1 FD | 	call	#__system___basic_get
0d8cc                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0d8cc     14 4E 05 F1 | 	add	fp, #20
0d8d0     A7 FE 69 FC | 	wrlong	#255, fp
0d8d4     14 4E 85 F1 | 	sub	fp, #20
0d8d8     0C 00 00 FF 
0d8dc     D8 E4 05 F1 | 	add	objptr, ##6360
0d8e0     97 30 48 FB | 	callpa	#(@LR__1226-@LR__1225)>>2,fcache_load_ptr_
0d8e4                 | LR__1225
0d8e4     18 4E 05 F1 | 	add	fp, #24
0d8e8     A7 16 02 FB | 	rdlong	arg03, fp
0d8ec     0B 1F 02 F6 | 	mov	local01, arg03
0d8f0     09 1E 66 F0 | 	shl	local01, #9
0d8f4     F2 1E 02 F1 | 	add	local01, objptr
0d8f8     04 4E 85 F1 | 	sub	fp, #4
0d8fc     A7 1A 02 FB | 	rdlong	arg05, fp
0d900     0D 19 02 F6 | 	mov	arg04, arg05
0d904     01 18 66 F0 | 	shl	arg04, #1
0d908     0F 19 02 F1 | 	add	arg04, local01
0d90c     0B 1F 02 F6 | 	mov	local01, arg03
0d910     09 1E 66 F0 | 	shl	local01, #9
0d914     0B 1F 02 F1 | 	add	local01, arg03
0d918     F2 1E 02 F1 | 	add	local01, objptr
0d91c     0F 1B 02 F1 | 	add	arg05, local01
0d920     0D 1F C2 FA | 	rdbyte	local01, arg05
0d924     00 1F 06 FA | 	mul	local01, #256
0d928     0C 1F 52 FC | 	wrword	local01, arg04
0d92c     A7 1E 02 FB | 	rdlong	local01, fp
0d930     01 1E 86 F1 | 	sub	local01, #1
0d934     A7 1E 62 FC | 	wrlong	local01, fp
0d938     14 4E 85 F1 | 	sub	fp, #20
0d93c     00 1E 56 F2 | 	cmps	local01, #0 wc
0d940     A0 FF 9F 3D |  if_ae	jmp	#LR__1225
0d944                 | LR__1226
0d944     0C 00 00 FF 
0d948     D8 E4 85 F1 | 	sub	objptr, ##6360
0d94c                 | '     close #9
0d94c     09 12 06 F6 | 	mov	arg01, #9
0d950     70 7F B1 FD | 	call	#__system__close
0d954     18 4E 05 F1 | 	add	fp, #24
0d958     A7 1E 02 FB | 	rdlong	local01, fp
0d95c     18 4E 85 F1 | 	sub	fp, #24
0d960     09 1E 66 F0 | 	shl	local01, #9
0d964     0C 00 00 FF 
0d968     D8 E4 05 F1 | 	add	objptr, ##6360
0d96c     F2 1E 02 F1 | 	add	local01, objptr
0d970     FE 1F 06 F1 | 	add	local01, #510
0d974     0F 01 58 FC | 	wrword	#0, local01
0d978                 | '     envbuf(channel,255)=0                                                              
0d978                 | '     return
0d978     0C 00 00 FF 
0d97c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d980     90 07 90 FD | 	jmp	#LR__1241
0d984                 | LR__1227
0d984                 | '     if wptr < $80000 then 
0d984     1C 4E 05 F1 | 	add	fp, #28
0d988     A7 20 02 FB | 	rdlong	local02, fp
0d98c     1C 4E 85 F1 | 	sub	fp, #28
0d990     00 04 00 FF 
0d994     00 20 56 F2 | 	cmps	local02, ##524288 wc
0d998     7C 00 90 3D |  if_ae	jmp	#LR__1230
0d99c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0d99c     14 4E 05 F1 | 	add	fp, #20
0d9a0     A7 00 68 FC | 	wrlong	#0, fp
0d9a4     14 4E 85 F1 | 	sub	fp, #20
0d9a8     0C 00 00 FF 
0d9ac     D8 E4 05 F1 | 	add	objptr, ##6360
0d9b0     97 2C 48 FB | 	callpa	#(@LR__1229-@LR__1228)>>2,fcache_load_ptr_
0d9b4                 | LR__1228
0d9b4     18 4E 05 F1 | 	add	fp, #24
0d9b8     A7 20 02 FB | 	rdlong	local02, fp
0d9bc     09 20 66 F0 | 	shl	local02, #9
0d9c0     F2 20 02 F1 | 	add	local02, objptr
0d9c4     04 4E 85 F1 | 	sub	fp, #4
0d9c8     A7 1E 02 FB | 	rdlong	local01, fp
0d9cc     0F 1B 02 F6 | 	mov	arg05, local01
0d9d0     01 1A 66 F0 | 	shl	arg05, #1
0d9d4     10 1B 02 F1 | 	add	arg05, local02
0d9d8     08 4E 05 F1 | 	add	fp, #8
0d9dc     A7 12 02 FB | 	rdlong	arg01, fp
0d9e0     01 1E 66 F0 | 	shl	local01, #1
0d9e4     0F 13 02 F1 | 	add	arg01, local01
0d9e8     09 FB E1 FA | 	rdword	result1, arg01
0d9ec     0D FB 51 FC | 	wrword	result1, arg05
0d9f0     08 4E 85 F1 | 	sub	fp, #8
0d9f4     A7 20 02 FB | 	rdlong	local02, fp
0d9f8     01 20 06 F1 | 	add	local02, #1
0d9fc     A7 20 62 FC | 	wrlong	local02, fp
0da00     14 4E 85 F1 | 	sub	fp, #20
0da04     00 21 56 F2 | 	cmps	local02, #256 wc
0da08     A8 FF 9F CD |  if_b	jmp	#LR__1228
0da0c                 | LR__1229
0da0c     0C 00 00 FF 
0da10     D8 E4 85 F1 | 	sub	objptr, ##6360
0da14     78 00 90 FD | 	jmp	#LR__1232
0da18                 | LR__1230
0da18                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0da18     14 4E 05 F1 | 	add	fp, #20
0da1c     A7 00 68 FC | 	wrlong	#0, fp
0da20     14 4E 85 F1 | 	sub	fp, #20
0da24                 | LR__1231
0da24     18 4E 05 F1 | 	add	fp, #24
0da28     A7 20 02 FB | 	rdlong	local02, fp
0da2c     09 20 66 F0 | 	shl	local02, #9
0da30     0C 00 00 FF 
0da34     D8 E4 05 F1 | 	add	objptr, ##6360
0da38     F2 20 02 F1 | 	add	local02, objptr
0da3c     04 4E 85 F1 | 	sub	fp, #4
0da40     A7 1E 02 FB | 	rdlong	local01, fp
0da44     0F 23 02 F6 | 	mov	local03, local01
0da48     01 22 66 F0 | 	shl	local03, #1
0da4c     10 23 02 F1 | 	add	local03, local02
0da50     08 4E 05 F1 | 	add	fp, #8
0da54     A7 12 02 FB | 	rdlong	arg01, fp
0da58     1C 4E 85 F1 | 	sub	fp, #28
0da5c     01 1E 66 F0 | 	shl	local01, #1
0da60     0F 13 02 F1 | 	add	arg01, local01
0da64     0C 00 00 FF 
0da68     D8 E4 85 F1 | 	sub	objptr, ##6360
0da6c     1C FB B0 FD | 	call	#_psdpeek
0da70     11 FB 51 FC | 	wrword	result1, local03
0da74     14 4E 05 F1 | 	add	fp, #20
0da78     A7 22 02 FB | 	rdlong	local03, fp
0da7c     01 22 06 F1 | 	add	local03, #1
0da80     A7 22 62 FC | 	wrlong	local03, fp
0da84     14 4E 85 F1 | 	sub	fp, #20
0da88     00 23 56 F2 | 	cmps	local03, #256 wc
0da8c     94 FF 9F CD |  if_b	jmp	#LR__1231
0da90                 | LR__1232
0da90     18 4E 05 F1 | 	add	fp, #24
0da94     A7 22 02 FB | 	rdlong	local03, fp
0da98     18 4E 85 F1 | 	sub	fp, #24
0da9c     09 22 66 F0 | 	shl	local03, #9
0daa0     0C 00 00 FF 
0daa4     D8 E4 05 F1 | 	add	objptr, ##6360
0daa8     F2 22 02 F1 | 	add	local03, objptr
0daac     FE 23 06 F1 | 	add	local03, #510
0dab0     11 01 58 FC | 	wrword	#0, local03
0dab4                 | '     envbuf(channel,255)=0
0dab4                 | '     return   
0dab4     0C 00 00 FF 
0dab8     D8 E4 85 F1 | 	sub	objptr, ##6360
0dabc     54 06 90 FD | 	jmp	#LR__1241
0dac0                 | LR__1233
0dac0                 | ' 
0dac0                 | ' if numpar=5 then   						 'simple adsr
0dac0     10 4E 05 F1 | 	add	fp, #16
0dac4     A7 20 02 FB | 	rdlong	local02, fp
0dac8     10 4E 85 F1 | 	sub	fp, #16
0dacc     05 20 0E F2 | 	cmp	local02, #5 wz
0dad0     14 06 90 5D |  if_ne	jmp	#LR__1240
0dad4     C4 D8 BF FD | 	call	#_pop
0dad8     FF 1E 02 F6 | 	mov	local01, result3
0dadc     40 4E 05 F1 | 	add	fp, #64
0dae0     A7 FA 61 FC | 	wrlong	result1, fp
0dae4     04 4E 05 F1 | 	add	fp, #4
0dae8     A7 FC 61 FC | 	wrlong	result2, fp
0daec     04 4E 05 F1 | 	add	fp, #4
0daf0     A7 1E 62 FC | 	wrlong	local01, fp
0daf4     08 4E 85 F1 | 	sub	fp, #8
0daf8     A7 12 02 F6 | 	mov	arg01, fp
0dafc     40 4E 85 F1 | 	sub	fp, #64
0db00     38 DB BF FD | 	call	#_converttofloat
0db04     FD 20 02 F6 | 	mov	local02, result1
0db08     2C 4E 05 F1 | 	add	fp, #44
0db0c     A7 20 62 FC | 	wrlong	local02, fp
0db10     2C 4E 85 F1 | 	sub	fp, #44
0db14     84 D8 BF FD | 	call	#_pop
0db18     FF 1E 02 F6 | 	mov	local01, result3
0db1c     40 4E 05 F1 | 	add	fp, #64
0db20     A7 FA 61 FC | 	wrlong	result1, fp
0db24     04 4E 05 F1 | 	add	fp, #4
0db28     A7 FC 61 FC | 	wrlong	result2, fp
0db2c     04 4E 05 F1 | 	add	fp, #4
0db30     A7 1E 62 FC | 	wrlong	local01, fp
0db34     08 4E 85 F1 | 	sub	fp, #8
0db38     A7 12 02 F6 | 	mov	arg01, fp
0db3c     40 4E 85 F1 | 	sub	fp, #64
0db40     F8 DA BF FD | 	call	#_converttofloat
0db44     FD 20 02 F6 | 	mov	local02, result1
0db48     28 4E 05 F1 | 	add	fp, #40
0db4c     A7 20 62 FC | 	wrlong	local02, fp
0db50     28 4E 85 F1 | 	sub	fp, #40
0db54     44 D8 BF FD | 	call	#_pop
0db58     FF 1E 02 F6 | 	mov	local01, result3
0db5c     40 4E 05 F1 | 	add	fp, #64
0db60     A7 FA 61 FC | 	wrlong	result1, fp
0db64     04 4E 05 F1 | 	add	fp, #4
0db68     A7 FC 61 FC | 	wrlong	result2, fp
0db6c     04 4E 05 F1 | 	add	fp, #4
0db70     A7 1E 62 FC | 	wrlong	local01, fp
0db74     08 4E 85 F1 | 	sub	fp, #8
0db78     A7 12 02 F6 | 	mov	arg01, fp
0db7c     40 4E 85 F1 | 	sub	fp, #64
0db80     B8 DA BF FD | 	call	#_converttofloat
0db84     FD 20 02 F6 | 	mov	local02, result1
0db88     24 4E 05 F1 | 	add	fp, #36
0db8c     A7 20 62 FC | 	wrlong	local02, fp
0db90     24 4E 85 F1 | 	sub	fp, #36
0db94     04 D8 BF FD | 	call	#_pop
0db98     FF 1E 02 F6 | 	mov	local01, result3
0db9c     40 4E 05 F1 | 	add	fp, #64
0dba0     A7 FA 61 FC | 	wrlong	result1, fp
0dba4     04 4E 05 F1 | 	add	fp, #4
0dba8     A7 FC 61 FC | 	wrlong	result2, fp
0dbac     04 4E 05 F1 | 	add	fp, #4
0dbb0     A7 1E 62 FC | 	wrlong	local01, fp
0dbb4     08 4E 85 F1 | 	sub	fp, #8
0dbb8     A7 12 02 F6 | 	mov	arg01, fp
0dbbc     40 4E 85 F1 | 	sub	fp, #64
0dbc0     78 DA BF FD | 	call	#_converttofloat
0dbc4     FD 20 02 F6 | 	mov	local02, result1
0dbc8     20 4E 05 F1 | 	add	fp, #32
0dbcc     A7 20 62 FC | 	wrlong	local02, fp
0dbd0     20 4E 85 F1 | 	sub	fp, #32
0dbd4     C4 D7 BF FD | 	call	#_pop
0dbd8     FF 1E 02 F6 | 	mov	local01, result3
0dbdc     40 4E 05 F1 | 	add	fp, #64
0dbe0     A7 FA 61 FC | 	wrlong	result1, fp
0dbe4     04 4E 05 F1 | 	add	fp, #4
0dbe8     A7 FC 61 FC | 	wrlong	result2, fp
0dbec     04 4E 05 F1 | 	add	fp, #4
0dbf0     A7 1E 62 FC | 	wrlong	local01, fp
0dbf4     08 4E 85 F1 | 	sub	fp, #8
0dbf8     A7 12 02 F6 | 	mov	arg01, fp
0dbfc     40 4E 85 F1 | 	sub	fp, #64
0dc00     7C D9 BF FD | 	call	#_converttoint
0dc04     18 4E 05 F1 | 	add	fp, #24
0dc08     A7 FA 61 FC | 	wrlong	result1, fp
0dc0c                 | '   t1=pop() : rr=converttofloat(t1)
0dc0c                 | '   t1=pop() : ss=converttofloat(t1) 
0dc0c                 | '   t1=pop() : dd=converttofloat(t1)
0dc0c                 | '   t1=pop() : aa=converttofloat(t1)
0dc0c                 | '   t1=pop() : channel=converttoint(t1)
0dc0c                 | '   if ss<0.0 then ss=0.0 
0dc0c     10 4E 05 F1 | 	add	fp, #16
0dc10     A7 12 02 FB | 	rdlong	arg01, fp
0dc14     28 4E 85 F1 | 	sub	fp, #40
0dc18     00 14 06 F6 | 	mov	arg02, #0
0dc1c     01 16 06 F6 | 	mov	arg03, #1
0dc20     F4 5B B1 FD | 	call	#__system___float_cmp
0dc24     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc28     28 4E 05 C1 |  if_b	add	fp, #40
0dc2c     A7 00 68 CC |  if_b	wrlong	#0, fp
0dc30     28 4E 85 C1 |  if_b	sub	fp, #40
0dc34                 | '   if ss>1.0 then ss=1.0
0dc34     28 4E 05 F1 | 	add	fp, #40
0dc38     A7 12 02 FB | 	rdlong	arg01, fp
0dc3c     28 4E 85 F1 | 	sub	fp, #40
0dc40     00 C0 1F FF 
0dc44     00 14 06 F6 | 	mov	arg02, ##1065353216
0dc48     01 16 66 F6 | 	neg	arg03, #1
0dc4c     C8 5B B1 FD | 	call	#__system___float_cmp
0dc50     01 FA 55 F2 | 	cmps	result1, #1 wc
0dc54     28 4E 05 31 |  if_ae	add	fp, #40
0dc58     00 C0 9F 3F 
0dc5c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0dc60     28 4E 85 31 |  if_ae	sub	fp, #40
0dc64     20 4E 05 F1 | 	add	fp, #32
0dc68     A7 12 02 FB | 	rdlong	arg01, fp
0dc6c     04 4E 05 F1 | 	add	fp, #4
0dc70     A7 14 02 FB | 	rdlong	arg02, fp
0dc74     24 4E 85 F1 | 	sub	fp, #36
0dc78     98 53 B1 FD | 	call	#__system___float_add
0dc7c     FD 12 02 F6 | 	mov	arg01, result1
0dc80     2C 4E 05 F1 | 	add	fp, #44
0dc84     A7 14 02 FB | 	rdlong	arg02, fp
0dc88     2C 4E 85 F1 | 	sub	fp, #44
0dc8c     84 53 B1 FD | 	call	#__system___float_add
0dc90     30 4E 05 F1 | 	add	fp, #48
0dc94     A7 FA 61 FC | 	wrlong	result1, fp
0dc98     FD 14 02 F6 | 	mov	arg02, result1
0dc9c     30 4E 85 F1 | 	sub	fp, #48
0dca0     00 C0 21 FF 
0dca4     00 12 06 F6 | 	mov	arg01, ##1132462080
0dca8     3C 59 B1 FD | 	call	#__system___float_div
0dcac     34 4E 05 F1 | 	add	fp, #52
0dcb0     A7 FA 61 FC | 	wrlong	result1, fp
0dcb4     14 4E 85 F1 | 	sub	fp, #20
0dcb8     A7 12 02 FB | 	rdlong	arg01, fp
0dcbc     FD 14 02 F6 | 	mov	arg02, result1
0dcc0     20 4E 85 F1 | 	sub	fp, #32
0dcc4     1C 57 B1 FD | 	call	#__system___float_mul
0dcc8     FD 12 02 F6 | 	mov	arg01, result1
0dccc     01 14 06 F6 | 	mov	arg02, #1
0dcd0     D8 5B B1 FD | 	call	#__system___float_tointeger
0dcd4     A7 FA 61 FC | 	wrlong	result1, fp
0dcd8     24 4E 05 F1 | 	add	fp, #36
0dcdc     A7 12 02 FB | 	rdlong	arg01, fp
0dce0     10 4E 05 F1 | 	add	fp, #16
0dce4     A7 14 02 FB | 	rdlong	arg02, fp
0dce8     34 4E 85 F1 | 	sub	fp, #52
0dcec     F4 56 B1 FD | 	call	#__system___float_mul
0dcf0     FD 12 02 F6 | 	mov	arg01, result1
0dcf4     01 14 06 F6 | 	mov	arg02, #1
0dcf8     B0 5B B1 FD | 	call	#__system___float_tointeger
0dcfc     04 4E 05 F1 | 	add	fp, #4
0dd00     A7 FA 61 FC | 	wrlong	result1, fp
0dd04     28 4E 05 F1 | 	add	fp, #40
0dd08     A7 12 02 FB | 	rdlong	arg01, fp
0dd0c     08 4E 05 F1 | 	add	fp, #8
0dd10     A7 14 02 FB | 	rdlong	arg02, fp
0dd14     34 4E 85 F1 | 	sub	fp, #52
0dd18     C8 56 B1 FD | 	call	#__system___float_mul
0dd1c     FD 12 02 F6 | 	mov	arg01, result1
0dd20     01 14 06 F6 | 	mov	arg02, #1
0dd24     84 5B B1 FD | 	call	#__system___float_tointeger
0dd28     0C 4E 05 F1 | 	add	fp, #12
0dd2c     A7 FA 61 FC | 	wrlong	result1, fp
0dd30     0C 4E 85 F1 | 	sub	fp, #12
0dd34     F8 BF 23 FF 
0dd38     00 20 06 F6 | 	mov	local02, ##1199566848
0dd3c     A7 12 02 FB | 	rdlong	arg01, fp
0dd40     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd44     1F 24 C6 C9 |  if_b	decod	local04, #31
0dd48     00 24 06 36 |  if_ae	mov	local04, #0
0dd4c     90 52 B1 FD | 	call	#__system___float_fromuns
0dd50     12 FB 61 F5 | 	xor	result1, local04
0dd54     FD 14 02 F6 | 	mov	arg02, result1
0dd58     10 13 02 F6 | 	mov	arg01, local02
0dd5c     88 58 B1 FD | 	call	#__system___float_div
0dd60     38 4E 05 F1 | 	add	fp, #56
0dd64     A7 FA 61 FC | 	wrlong	result1, fp
0dd68     F8 BF 23 FF 
0dd6c     00 20 06 F6 | 	mov	local02, ##1199566848
0dd70     10 4E 85 F1 | 	sub	fp, #16
0dd74     A7 14 02 FB | 	rdlong	arg02, fp
0dd78     28 4E 85 F1 | 	sub	fp, #40
0dd7c     F8 BF 23 FF 
0dd80     00 12 06 F6 | 	mov	arg01, ##1199566848
0dd84     5C 56 B1 FD | 	call	#__system___float_mul
0dd88     FD 14 02 F6 | 	mov	arg02, result1
0dd8c     10 13 02 F6 | 	mov	arg01, local02
0dd90     1F 14 E6 F4 | 	bitnot	arg02, #31
0dd94     7C 52 B1 FD | 	call	#__system___float_add
0dd98     FD 20 02 F6 | 	mov	local02, result1
0dd9c     04 4E 05 F1 | 	add	fp, #4
0dda0     A7 12 02 FB | 	rdlong	arg01, fp
0dda4     04 4E 85 F1 | 	sub	fp, #4
0dda8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ddac     1F 24 C6 C9 |  if_b	decod	local04, #31
0ddb0     00 24 06 36 |  if_ae	mov	local04, #0
0ddb4     28 52 B1 FD | 	call	#__system___float_fromuns
0ddb8     12 FB 61 F5 | 	xor	result1, local04
0ddbc     FD 14 02 F6 | 	mov	arg02, result1
0ddc0     10 13 02 F6 | 	mov	arg01, local02
0ddc4     20 58 B1 FD | 	call	#__system___float_div
0ddc8     24 4E 05 F1 | 	add	fp, #36
0ddcc     A7 FA 61 FC | 	wrlong	result1, fp
0ddd0     04 4E 05 F1 | 	add	fp, #4
0ddd4     A7 14 02 FB | 	rdlong	arg02, fp
0ddd8     28 4E 85 F1 | 	sub	fp, #40
0dddc     F8 BF 23 FF 
0dde0     00 12 06 F6 | 	mov	arg01, ##1199566848
0dde4     FC 55 B1 FD | 	call	#__system___float_mul
0dde8     FD 20 02 F6 | 	mov	local02, result1
0ddec     0C 4E 05 F1 | 	add	fp, #12
0ddf0     A7 12 02 FB | 	rdlong	arg01, fp
0ddf4     0C 4E 85 F1 | 	sub	fp, #12
0ddf8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ddfc     1F 24 C6 C9 |  if_b	decod	local04, #31
0de00     00 24 06 36 |  if_ae	mov	local04, #0
0de04     D8 51 B1 FD | 	call	#__system___float_fromuns
0de08     12 FB 61 F5 | 	xor	result1, local04
0de0c     FD 14 02 F6 | 	mov	arg02, result1
0de10     10 13 02 F6 | 	mov	arg01, local02
0de14     D0 57 B1 FD | 	call	#__system___float_div
0de18     3C 4E 05 F1 | 	add	fp, #60
0de1c     A7 FA 61 FC | 	wrlong	result1, fp
0de20     24 4E 85 F1 | 	sub	fp, #36
0de24     A7 26 02 FB | 	rdlong	local05, fp
0de28     18 4E 85 F1 | 	sub	fp, #24
0de2c     01 26 66 F0 | 	shl	local05, #1
0de30     51 00 00 FF 
0de34     C8 E5 05 F1 | 	add	objptr, ##41928
0de38     F2 26 02 F1 | 	add	local05, objptr
0de3c     A7 28 02 FB | 	rdlong	local06, fp
0de40     04 4E 05 F1 | 	add	fp, #4
0de44     A7 22 02 FB | 	rdlong	local03, fp
0de48     11 29 02 F1 | 	add	local06, local03
0de4c     13 29 52 FC | 	wrword	local06, local05
0de50     1C 4E 05 F1 | 	add	fp, #28
0de54     A7 00 68 FC | 	wrlong	#0, fp
0de58                 | '   fulltime=aa+dd+rr
0de58                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0de58                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0de58                 | '   suspoints(channel)=a+d
0de58                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0de58     0C 4E 85 F1 | 	sub	fp, #12
0de5c     A7 00 68 FC | 	wrlong	#0, fp
0de60     14 4E 85 F1 | 	sub	fp, #20
0de64     A7 2A 02 FB | 	rdlong	local07, fp
0de68     51 00 00 FF 
0de6c     C8 E5 85 F1 | 	sub	objptr, ##41928
0de70                 | LR__1234
0de70     14 4E 05 F1 | 	add	fp, #20
0de74     A7 20 02 FB | 	rdlong	local02, fp
0de78     14 4E 85 F1 | 	sub	fp, #20
0de7c     15 21 52 F2 | 	cmps	local02, local07 wc
0de80     80 00 90 3D |  if_ae	jmp	#LR__1235
0de84     18 4E 05 F1 | 	add	fp, #24
0de88     A7 28 02 FB | 	rdlong	local06, fp
0de8c     09 28 66 F0 | 	shl	local06, #9
0de90     0C 00 00 FF 
0de94     D8 E4 05 F1 | 	add	objptr, ##6360
0de98     F2 28 02 F1 | 	add	local06, objptr
0de9c     04 4E 85 F1 | 	sub	fp, #4
0dea0     A7 26 02 FB | 	rdlong	local05, fp
0dea4     01 26 66 F0 | 	shl	local05, #1
0dea8     14 27 02 F1 | 	add	local05, local06
0deac     0C 4E 05 F1 | 	add	fp, #12
0deb0     A7 12 02 FB | 	rdlong	arg01, fp
0deb4     20 4E 85 F1 | 	sub	fp, #32
0deb8     0C 00 00 FF 
0debc     D8 E4 85 F1 | 	sub	objptr, ##6360
0dec0     01 14 06 F6 | 	mov	arg02, #1
0dec4     E4 59 B1 FD | 	call	#__system___float_tointeger
0dec8     13 FB 51 FC | 	wrword	result1, local05
0decc     20 4E 05 F1 | 	add	fp, #32
0ded0     A7 12 02 FB | 	rdlong	arg01, fp
0ded4     18 4E 05 F1 | 	add	fp, #24
0ded8     A7 14 02 FB | 	rdlong	arg02, fp
0dedc     38 4E 85 F1 | 	sub	fp, #56
0dee0     30 51 B1 FD | 	call	#__system___float_add
0dee4     20 4E 05 F1 | 	add	fp, #32
0dee8     A7 FA 61 FC | 	wrlong	result1, fp
0deec     0C 4E 85 F1 | 	sub	fp, #12
0def0     A7 28 02 FB | 	rdlong	local06, fp
0def4     01 28 06 F1 | 	add	local06, #1
0def8     A7 28 62 FC | 	wrlong	local06, fp
0defc     14 4E 85 F1 | 	sub	fp, #20
0df00     6C FF 9F FD | 	jmp	#LR__1234
0df04                 | LR__1235
0df04                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0df04     A7 20 02 FB | 	rdlong	local02, fp
0df08     14 4E 05 F1 | 	add	fp, #20
0df0c     A7 20 62 FC | 	wrlong	local02, fp
0df10     14 4E 85 F1 | 	sub	fp, #20
0df14     A7 2C 02 FB | 	rdlong	local08, fp
0df18     04 4E 05 F1 | 	add	fp, #4
0df1c     A7 20 02 FB | 	rdlong	local02, fp
0df20     04 4E 85 F1 | 	sub	fp, #4
0df24     10 2D 02 F1 | 	add	local08, local02
0df28                 | LR__1236
0df28     14 4E 05 F1 | 	add	fp, #20
0df2c     A7 20 02 FB | 	rdlong	local02, fp
0df30     14 4E 85 F1 | 	sub	fp, #20
0df34     16 21 52 F2 | 	cmps	local02, local08 wc
0df38     A8 00 90 3D |  if_ae	jmp	#LR__1237
0df3c     18 4E 05 F1 | 	add	fp, #24
0df40     A7 2A 02 FB | 	rdlong	local07, fp
0df44     09 2A 66 F0 | 	shl	local07, #9
0df48     0C 00 00 FF 
0df4c     D8 E4 05 F1 | 	add	objptr, ##6360
0df50     F2 2A 02 F1 | 	add	local07, objptr
0df54     04 4E 85 F1 | 	sub	fp, #4
0df58     A7 28 02 FB | 	rdlong	local06, fp
0df5c     01 28 66 F0 | 	shl	local06, #1
0df60     15 29 02 F1 | 	add	local06, local07
0df64     0C 4E 05 F1 | 	add	fp, #12
0df68     A7 12 02 FB | 	rdlong	arg01, fp
0df6c     20 4E 85 F1 | 	sub	fp, #32
0df70     0C 00 00 FF 
0df74     D8 E4 85 F1 | 	sub	objptr, ##6360
0df78     01 14 06 F6 | 	mov	arg02, #1
0df7c     2C 59 B1 FD | 	call	#__system___float_tointeger
0df80     14 FB 51 FC | 	wrword	result1, local06
0df84     20 4E 05 F1 | 	add	fp, #32
0df88     A7 12 02 FB | 	rdlong	arg01, fp
0df8c     04 4E 05 F1 | 	add	fp, #4
0df90     A7 14 02 FB | 	rdlong	arg02, fp
0df94     24 4E 85 F1 | 	sub	fp, #36
0df98     1F 14 E6 F4 | 	bitnot	arg02, #31
0df9c     74 50 B1 FD | 	call	#__system___float_add
0dfa0     20 4E 05 F1 | 	add	fp, #32
0dfa4     A7 FA 61 FC | 	wrlong	result1, fp
0dfa8     20 4E 85 F1 | 	sub	fp, #32
0dfac     FD 12 02 F6 | 	mov	arg01, result1
0dfb0     00 14 06 F6 | 	mov	arg02, #0
0dfb4     01 16 06 F6 | 	mov	arg03, #1
0dfb8     5C 58 B1 FD | 	call	#__system___float_cmp
0dfbc     00 FA 55 F2 | 	cmps	result1, #0 wc
0dfc0     20 4E 05 C1 |  if_b	add	fp, #32
0dfc4     A7 00 68 CC |  if_b	wrlong	#0, fp
0dfc8     20 4E 85 C1 |  if_b	sub	fp, #32
0dfcc     14 4E 05 F1 | 	add	fp, #20
0dfd0     A7 2A 02 FB | 	rdlong	local07, fp
0dfd4     01 2A 06 F1 | 	add	local07, #1
0dfd8     A7 2A 62 FC | 	wrlong	local07, fp
0dfdc     14 4E 85 F1 | 	sub	fp, #20
0dfe0     44 FF 9F FD | 	jmp	#LR__1236
0dfe4                 | LR__1237
0dfe4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0dfe4     A7 20 02 FB | 	rdlong	local02, fp
0dfe8     04 4E 05 F1 | 	add	fp, #4
0dfec     A7 2C 02 FB | 	rdlong	local08, fp
0dff0     16 21 02 F1 | 	add	local02, local08
0dff4     10 4E 05 F1 | 	add	fp, #16
0dff8     A7 20 62 FC | 	wrlong	local02, fp
0dffc     14 4E 85 F1 | 	sub	fp, #20
0e000                 | LR__1238
0e000     14 4E 05 F1 | 	add	fp, #20
0e004     A7 26 02 FB | 	rdlong	local05, fp
0e008     14 4E 85 F1 | 	sub	fp, #20
0e00c     00 27 56 F2 | 	cmps	local05, #256 wc
0e010     A8 00 90 3D |  if_ae	jmp	#LR__1239
0e014     18 4E 05 F1 | 	add	fp, #24
0e018     A7 2C 02 FB | 	rdlong	local08, fp
0e01c     09 2C 66 F0 | 	shl	local08, #9
0e020     0C 00 00 FF 
0e024     D8 E4 05 F1 | 	add	objptr, ##6360
0e028     F2 2C 02 F1 | 	add	local08, objptr
0e02c     04 4E 85 F1 | 	sub	fp, #4
0e030     A7 2A 02 FB | 	rdlong	local07, fp
0e034     01 2A 66 F0 | 	shl	local07, #1
0e038     16 2B 02 F1 | 	add	local07, local08
0e03c     0C 4E 05 F1 | 	add	fp, #12
0e040     A7 12 02 FB | 	rdlong	arg01, fp
0e044     20 4E 85 F1 | 	sub	fp, #32
0e048     0C 00 00 FF 
0e04c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e050     01 14 06 F6 | 	mov	arg02, #1
0e054     54 58 B1 FD | 	call	#__system___float_tointeger
0e058     15 FB 51 FC | 	wrword	result1, local07
0e05c     20 4E 05 F1 | 	add	fp, #32
0e060     A7 12 02 FB | 	rdlong	arg01, fp
0e064     1C 4E 05 F1 | 	add	fp, #28
0e068     A7 14 02 FB | 	rdlong	arg02, fp
0e06c     3C 4E 85 F1 | 	sub	fp, #60
0e070     1F 14 E6 F4 | 	bitnot	arg02, #31
0e074     9C 4F B1 FD | 	call	#__system___float_add
0e078     20 4E 05 F1 | 	add	fp, #32
0e07c     A7 FA 61 FC | 	wrlong	result1, fp
0e080     20 4E 85 F1 | 	sub	fp, #32
0e084     FD 12 02 F6 | 	mov	arg01, result1
0e088     00 14 06 F6 | 	mov	arg02, #0
0e08c     01 16 06 F6 | 	mov	arg03, #1
0e090     84 57 B1 FD | 	call	#__system___float_cmp
0e094     00 FA 55 F2 | 	cmps	result1, #0 wc
0e098     20 4E 05 C1 |  if_b	add	fp, #32
0e09c     A7 00 68 CC |  if_b	wrlong	#0, fp
0e0a0     20 4E 85 C1 |  if_b	sub	fp, #32
0e0a4     14 4E 05 F1 | 	add	fp, #20
0e0a8     A7 2C 02 FB | 	rdlong	local08, fp
0e0ac     01 2C 06 F1 | 	add	local08, #1
0e0b0     A7 2C 62 FC | 	wrlong	local08, fp
0e0b4     14 4E 85 F1 | 	sub	fp, #20
0e0b8     44 FF 9F FD | 	jmp	#LR__1238
0e0bc                 | LR__1239
0e0bc     18 4E 05 F1 | 	add	fp, #24
0e0c0     A7 26 02 FB | 	rdlong	local05, fp
0e0c4     18 4E 85 F1 | 	sub	fp, #24
0e0c8     09 26 66 F0 | 	shl	local05, #9
0e0cc     0C 00 00 FF 
0e0d0     D8 E4 05 F1 | 	add	objptr, ##6360
0e0d4     F2 26 02 F1 | 	add	local05, objptr
0e0d8     FE 27 06 F1 | 	add	local05, #510
0e0dc     13 01 58 FC | 	wrword	#0, local05
0e0e0     0C 00 00 FF 
0e0e4     D8 E4 85 F1 | 	sub	objptr, ##6360
0e0e8                 | LR__1240
0e0e8     18 4E 05 F1 | 	add	fp, #24
0e0ec     A7 26 02 FB | 	rdlong	local05, fp
0e0f0     18 4E 85 F1 | 	sub	fp, #24
0e0f4     09 26 66 F0 | 	shl	local05, #9
0e0f8     0C 00 00 FF 
0e0fc     D8 E4 05 F1 | 	add	objptr, ##6360
0e100     F2 26 02 F1 | 	add	local05, objptr
0e104     FE 27 06 F1 | 	add	local05, #510
0e108     13 01 58 FC | 	wrword	#0, local05
0e10c     0C 00 00 FF 
0e110     D8 E4 85 F1 | 	sub	objptr, ##6360
0e114                 | LR__1241
0e114     A7 F0 03 F6 | 	mov	ptra, fp
0e118     B2 00 A0 FD | 	call	#popregs_
0e11c                 | _do_defenv_ret
0e11c     2D 00 64 FD | 	ret
0e120                 | 
0e120                 | ' 
0e120                 | ' '-------------------- defsnd
0e120                 | ' 
0e120                 | ' sub do_defsnd
0e120                 | _do_defsnd
0e120     04 4A 05 F6 | 	mov	COUNT_, #4
0e124     A8 00 A0 FD | 	call	#pushregs_
0e128     88 F0 07 F1 | 	add	ptra, #136
0e12c     4A 00 00 FF 
0e130     80 E4 05 F1 | 	add	objptr, ##38016
0e134     F2 1A 02 FB | 	rdlong	arg05, objptr
0e138     0D 19 02 F6 | 	mov	arg04, arg05
0e13c     01 18 66 F0 | 	shl	arg04, #1
0e140     0D 19 02 F1 | 	add	arg04, arg05
0e144     02 18 66 F0 | 	shl	arg04, #2
0e148     03 00 00 FF 
0e14c     04 E4 85 F1 | 	sub	objptr, ##1540
0e150     F2 18 02 F1 | 	add	arg04, objptr
0e154     0C 1B 02 FB | 	rdlong	arg05, arg04
0e158     A7 1A 62 FC | 	wrlong	arg05, fp
0e15c                 | ' 
0e15c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e15c                 | ' 
0e15c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0e15c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0e15c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0e15c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0e15c                 | ' 
0e15c                 | ' if numpar<2 then return
0e15c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0e160     47 00 00 FF 
0e164     7C E4 85 F1 | 	sub	objptr, ##36476
0e168     94 08 90 CD |  if_b	jmp	#LR__1273
0e16c                 | '  
0e16c                 | ' if numpar=2 then
0e16c     A7 1A 02 FB | 	rdlong	arg05, fp
0e170     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e174     A0 03 90 5D |  if_ne	jmp	#LR__1260
0e178     20 D2 BF FD | 	call	#_pop
0e17c     FF 1A 02 F6 | 	mov	arg05, result3
0e180     2C 4E 05 F1 | 	add	fp, #44
0e184     A7 FA 61 FC | 	wrlong	result1, fp
0e188     04 4E 05 F1 | 	add	fp, #4
0e18c     A7 FC 61 FC | 	wrlong	result2, fp
0e190     04 4E 05 F1 | 	add	fp, #4
0e194     A7 1A 62 FC | 	wrlong	arg05, fp
0e198                 | '   t1=pop()
0e198                 | '   if t1.result_type=result_string2 then 
0e198     34 4E 85 F1 | 	sub	fp, #52
0e19c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e1a0     20 00 90 5D |  if_ne	jmp	#LR__1250
0e1a4     2C 4E 05 F1 | 	add	fp, #44
0e1a8     A7 12 02 FB | 	rdlong	arg01, fp
0e1ac     2C 4E 85 F1 | 	sub	fp, #44
0e1b0     60 D3 BF FD | 	call	#_convertstring
0e1b4     38 4E 05 F1 | 	add	fp, #56
0e1b8     A7 FA 61 FC | 	wrlong	result1, fp
0e1bc     38 4E 85 F1 | 	sub	fp, #56
0e1c0     58 00 90 FD | 	jmp	#LR__1253
0e1c4                 | LR__1250
0e1c4     34 4E 05 F1 | 	add	fp, #52
0e1c8     A7 1A 02 FB | 	rdlong	arg05, fp
0e1cc     34 4E 85 F1 | 	sub	fp, #52
0e1d0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0e1d4     18 00 90 5D |  if_ne	jmp	#LR__1251
0e1d8     2C 4E 05 F1 | 	add	fp, #44
0e1dc     A7 1A 02 FB | 	rdlong	arg05, fp
0e1e0     0C 4E 05 F1 | 	add	fp, #12
0e1e4     A7 1A 62 FC | 	wrlong	arg05, fp
0e1e8     38 4E 85 F1 | 	sub	fp, #56
0e1ec     2C 00 90 FD | 	jmp	#LR__1252
0e1f0                 | LR__1251
0e1f0     83 01 00 FF 
0e1f4     B5 1B 06 F6 | 	mov	arg05, ##@LR__5423
0e1f8     38 4E 05 F1 | 	add	fp, #56
0e1fc     A7 1A 62 FC | 	wrlong	arg05, fp
0e200     0C 4E 85 F1 | 	sub	fp, #12
0e204     A7 12 02 F6 | 	mov	arg01, fp
0e208     2C 4E 85 F1 | 	sub	fp, #44
0e20c     70 D3 BF FD | 	call	#_converttoint
0e210     14 4E 05 F1 | 	add	fp, #20
0e214     A7 FA 61 FC | 	wrlong	result1, fp
0e218     14 4E 85 F1 | 	sub	fp, #20
0e21c                 | LR__1252
0e21c                 | LR__1253
0e21c                 | '   if s<>"" then 
0e21c     38 4E 05 F1 | 	add	fp, #56
0e220     A7 12 02 FB | 	rdlong	arg01, fp
0e224     38 4E 85 F1 | 	sub	fp, #56
0e228     83 01 00 FF 
0e22c     B6 15 06 F6 | 	mov	arg02, ##@LR__5424
0e230     24 26 B1 FD | 	call	#__system___string_cmp
0e234     00 FA 0D F2 | 	cmp	result1, #0 wz
0e238     E0 01 90 AD |  if_e	jmp	#LR__1256
0e23c     5C D1 BF FD | 	call	#_pop
0e240     FF 1A 02 F6 | 	mov	arg05, result3
0e244     2C 4E 05 F1 | 	add	fp, #44
0e248     A7 FA 61 FC | 	wrlong	result1, fp
0e24c     04 4E 05 F1 | 	add	fp, #4
0e250     A7 FC 61 FC | 	wrlong	result2, fp
0e254     04 4E 05 F1 | 	add	fp, #4
0e258     A7 1A 62 FC | 	wrlong	arg05, fp
0e25c     08 4E 85 F1 | 	sub	fp, #8
0e260     A7 12 02 F6 | 	mov	arg01, fp
0e264     2C 4E 85 F1 | 	sub	fp, #44
0e268     14 D3 BF FD | 	call	#_converttoint
0e26c     10 4E 05 F1 | 	add	fp, #16
0e270     A7 FA 61 FC | 	wrlong	result1, fp
0e274                 | '     t1=pop()
0e274                 | '     channel=converttoint(t1) : if channel>31 then return
0e274     FD 1A 02 F6 | 	mov	arg05, result1
0e278     10 4E 85 F1 | 	sub	fp, #16
0e27c     20 1A 56 F2 | 	cmps	arg05, #32 wc
0e280     7C 07 90 3D |  if_ae	jmp	#LR__1273
0e284                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0e284     09 12 06 F6 | 	mov	arg01, #9
0e288     38 76 B1 FD | 	call	#__system__close
0e28c     09 1E 06 F6 | 	mov	local01, #9
0e290     83 01 00 FF 
0e294     B7 13 06 F6 | 	mov	arg01, ##@LR__5425
0e298     38 4E 05 F1 | 	add	fp, #56
0e29c     A7 14 02 FB | 	rdlong	arg02, fp
0e2a0     38 4E 85 F1 | 	sub	fp, #56
0e2a4     E4 25 B1 FD | 	call	#__system___string_concat
0e2a8     FD 14 02 F6 | 	mov	arg02, result1
0e2ac     0F 13 02 F6 | 	mov	arg01, local01
0e2b0     00 16 06 F6 | 	mov	arg03, #0
0e2b4     7C 31 B1 FD | 	call	#__system___basic_open_string
0e2b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e2bc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0e2c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e2c4     52 00 00 FF 
0e2c8     18 E4 05 F1 | 	add	objptr, ##42008
0e2cc     F2 FA 61 FC | 	wrlong	result1, objptr
0e2d0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0e2d0     52 00 00 FF 
0e2d4     18 E4 85 F1 | 	sub	objptr, ##42008
0e2d8     B0 00 90 AD |  if_e	jmp	#LR__1254
0e2dc     00 12 06 F6 | 	mov	arg01, #0
0e2e0     B0 7F B1 FD | 	call	#__system___getiolock_0541
0e2e4     FD 12 02 F6 | 	mov	arg01, result1
0e2e8     44 25 B1 FD | 	call	#__system___lockmem
0e2ec     83 01 00 FF 
0e2f0     C4 15 06 F6 | 	mov	arg02, ##@LR__5426
0e2f4     00 12 06 F6 | 	mov	arg01, #0
0e2f8     00 16 06 F6 | 	mov	arg03, #0
0e2fc     24 32 B1 FD | 	call	#__system___basic_print_string
0e300     52 00 00 FF 
0e304     18 E4 05 F1 | 	add	objptr, ##42008
0e308     F2 14 02 FB | 	rdlong	arg02, objptr
0e30c     52 00 00 FF 
0e310     18 E4 85 F1 | 	sub	objptr, ##42008
0e314     00 12 06 F6 | 	mov	arg01, #0
0e318     00 16 06 F6 | 	mov	arg03, #0
0e31c     0A 18 06 F6 | 	mov	arg04, #10
0e320     44 32 B1 FD | 	call	#__system___basic_print_integer
0e324     83 01 00 FF 
0e328     D2 15 06 F6 | 	mov	arg02, ##@LR__5427
0e32c     00 12 06 F6 | 	mov	arg01, #0
0e330     00 16 06 F6 | 	mov	arg03, #0
0e334     EC 31 B1 FD | 	call	#__system___basic_print_string
0e338     00 1E 06 F6 | 	mov	local01, #0
0e33c     52 00 00 FF 
0e340     18 E4 05 F1 | 	add	objptr, ##42008
0e344     F2 12 02 FB | 	rdlong	arg01, objptr
0e348     52 00 00 FF 
0e34c     18 E4 85 F1 | 	sub	objptr, ##42008
0e350     A4 4B B1 FD | 	call	#__system___strerror
0e354     FD 14 02 F6 | 	mov	arg02, result1
0e358     0F 13 02 F6 | 	mov	arg01, local01
0e35c     00 16 06 F6 | 	mov	arg03, #0
0e360     C0 31 B1 FD | 	call	#__system___basic_print_string
0e364     00 12 06 F6 | 	mov	arg01, #0
0e368     0A 14 06 F6 | 	mov	arg02, #10
0e36c     00 16 06 F6 | 	mov	arg03, #0
0e370     58 31 B1 FD | 	call	#__system___basic_print_char
0e374     00 12 06 F6 | 	mov	arg01, #0
0e378     18 7F B1 FD | 	call	#__system___getiolock_0541
0e37c     FD 00 68 FC | 	wrlong	#0, result1
0e380     09 12 06 F6 | 	mov	arg01, #9
0e384     3C 75 B1 FD | 	call	#__system__close
0e388     74 06 90 FD | 	jmp	#LR__1273
0e38c                 | LR__1254
0e38c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0e38c     04 4E 05 F1 | 	add	fp, #4
0e390     A7 00 68 FC | 	wrlong	#0, fp
0e394                 | LR__1255
0e394     A7 1E 02 FB | 	rdlong	local01, fp
0e398     01 1E 66 F0 | 	shl	local01, #1
0e39c     11 14 06 F6 | 	mov	arg02, #17
0e3a0     0F 15 02 F1 | 	add	arg02, local01
0e3a4     78 4E 05 F1 | 	add	fp, #120
0e3a8     A7 16 02 F6 | 	mov	arg03, fp
0e3ac     7C 4E 85 F1 | 	sub	fp, #124
0e3b0     09 12 06 F6 | 	mov	arg01, #9
0e3b4     01 18 06 F6 | 	mov	arg04, #1
0e3b8     02 1A 06 F6 | 	mov	arg05, #2
0e3bc     E0 32 B1 FD | 	call	#__system___basic_get
0e3c0     10 4E 05 F1 | 	add	fp, #16
0e3c4     A7 12 02 FB | 	rdlong	arg01, fp
0e3c8     0B 12 66 F0 | 	shl	arg01, #11
0e3cc     0C 4E 85 F1 | 	sub	fp, #12
0e3d0     A7 1E 02 FB | 	rdlong	local01, fp
0e3d4     01 1E 66 F0 | 	shl	local01, #1
0e3d8     0F 13 02 F1 | 	add	arg01, local01
0e3dc     78 4E 05 F1 | 	add	fp, #120
0e3e0     A7 14 E2 FA | 	rdword	arg02, fp
0e3e4     7C 4E 85 F1 | 	sub	fp, #124
0e3e8     0F 14 66 F7 | 	signx	arg02, #15
0e3ec     5C F0 B0 FD | 	call	#_psdpoke
0e3f0     04 4E 05 F1 | 	add	fp, #4
0e3f4     A7 1E 02 FB | 	rdlong	local01, fp
0e3f8     01 1E 06 F1 | 	add	local01, #1
0e3fc     A7 1E 62 FC | 	wrlong	local01, fp
0e400     02 00 00 FF 
0e404     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0e408     88 FF 9F CD |  if_b	jmp	#LR__1255
0e40c     04 4E 85 F1 | 	sub	fp, #4
0e410                 | '     close #9
0e410     09 12 06 F6 | 	mov	arg01, #9
0e414     AC 74 B1 FD | 	call	#__system__close
0e418                 | '     return
0e418     E4 05 90 FD | 	jmp	#LR__1273
0e41c                 | LR__1256
0e41c                 | '     if wptr < ($80000 - 2048) then 
0e41c     14 4E 05 F1 | 	add	fp, #20
0e420     A7 1E 02 FB | 	rdlong	local01, fp
0e424     14 4E 85 F1 | 	sub	fp, #20
0e428     FC 03 00 FF 
0e42c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0e430     70 00 90 3D |  if_ae	jmp	#LR__1258
0e434                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0e434     04 4E 05 F1 | 	add	fp, #4
0e438     A7 00 68 FC | 	wrlong	#0, fp
0e43c     04 4E 85 F1 | 	sub	fp, #4
0e440                 | LR__1257
0e440     10 4E 05 F1 | 	add	fp, #16
0e444     A7 1E 02 FB | 	rdlong	local01, fp
0e448     0B 1E 66 F0 | 	shl	local01, #11
0e44c     0C 4E 85 F1 | 	sub	fp, #12
0e450     A7 1A 02 FB | 	rdlong	arg05, fp
0e454     0D 19 02 F6 | 	mov	arg04, arg05
0e458     01 18 66 F0 | 	shl	arg04, #1
0e45c     0C 1F 02 F1 | 	add	local01, arg04
0e460     10 4E 05 F1 | 	add	fp, #16
0e464     A7 12 02 FB | 	rdlong	arg01, fp
0e468     14 4E 85 F1 | 	sub	fp, #20
0e46c     01 1A 66 F0 | 	shl	arg05, #1
0e470     0D 13 02 F1 | 	add	arg01, arg05
0e474     09 15 E2 FA | 	rdword	arg02, arg01
0e478     0F 13 02 F6 | 	mov	arg01, local01
0e47c     CC EF B0 FD | 	call	#_psdpoke
0e480     04 4E 05 F1 | 	add	fp, #4
0e484     A7 1E 02 FB | 	rdlong	local01, fp
0e488     01 1E 06 F1 | 	add	local01, #1
0e48c     A7 1E 62 FC | 	wrlong	local01, fp
0e490     04 4E 85 F1 | 	sub	fp, #4
0e494     02 00 00 FF 
0e498     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0e49c     A0 FF 9F CD |  if_b	jmp	#LR__1257
0e4a0     5C 05 90 FD | 	jmp	#LR__1273
0e4a4                 | LR__1258
0e4a4                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0e4a4     04 4E 05 F1 | 	add	fp, #4
0e4a8     A7 00 68 FC | 	wrlong	#0, fp
0e4ac     04 4E 85 F1 | 	sub	fp, #4
0e4b0                 | LR__1259
0e4b0     10 4E 05 F1 | 	add	fp, #16
0e4b4     A7 1E 02 FB | 	rdlong	local01, fp
0e4b8     0B 1E 66 F0 | 	shl	local01, #11
0e4bc     0C 4E 85 F1 | 	sub	fp, #12
0e4c0     A7 1A 02 FB | 	rdlong	arg05, fp
0e4c4     0D 19 02 F6 | 	mov	arg04, arg05
0e4c8     01 18 66 F0 | 	shl	arg04, #1
0e4cc     0C 1F 02 F1 | 	add	local01, arg04
0e4d0     10 4E 05 F1 | 	add	fp, #16
0e4d4     A7 12 02 FB | 	rdlong	arg01, fp
0e4d8     14 4E 85 F1 | 	sub	fp, #20
0e4dc     01 1A 66 F0 | 	shl	arg05, #1
0e4e0     0D 13 02 F1 | 	add	arg01, arg05
0e4e4     A4 F0 B0 FD | 	call	#_psdpeek
0e4e8     FD 14 02 F6 | 	mov	arg02, result1
0e4ec     0F 13 02 F6 | 	mov	arg01, local01
0e4f0     58 EF B0 FD | 	call	#_psdpoke
0e4f4     04 4E 05 F1 | 	add	fp, #4
0e4f8     A7 1E 02 FB | 	rdlong	local01, fp
0e4fc     01 1E 06 F1 | 	add	local01, #1
0e500     A7 1E 62 FC | 	wrlong	local01, fp
0e504     04 4E 85 F1 | 	sub	fp, #4
0e508     02 00 00 FF 
0e50c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0e510     9C FF 9F CD |  if_b	jmp	#LR__1259
0e514                 | '     return 
0e514     E8 04 90 FD | 	jmp	#LR__1273
0e518                 | '   return
0e518                 | LR__1260
0e518                 | ' for i=0 to 15 : harm(i)=0: next i  
0e518     04 4E 05 F1 | 	add	fp, #4
0e51c     A7 00 68 FC | 	wrlong	#0, fp
0e520     97 16 48 FB | 	callpa	#(@LR__1262-@LR__1261)>>2,fcache_load_ptr_
0e524                 | LR__1261
0e524     A7 1E 02 FB | 	rdlong	local01, fp
0e528     02 1E 66 F0 | 	shl	local01, #2
0e52c     38 4E 05 F1 | 	add	fp, #56
0e530     A7 1E 02 F1 | 	add	local01, fp
0e534     0F 01 68 FC | 	wrlong	#0, local01
0e538     38 4E 85 F1 | 	sub	fp, #56
0e53c     A7 1E 02 FB | 	rdlong	local01, fp
0e540     01 1E 06 F1 | 	add	local01, #1
0e544     A7 1E 62 FC | 	wrlong	local01, fp
0e548     10 1E 56 F2 | 	cmps	local01, #16 wc
0e54c     D4 FF 9F CD |  if_b	jmp	#LR__1261
0e550                 | LR__1262
0e550     04 4E 85 F1 | 	sub	fp, #4
0e554                 | ' for i=numpar to 2 step -1 
0e554     A7 1E 02 FB | 	rdlong	local01, fp
0e558     04 4E 05 F1 | 	add	fp, #4
0e55c     A7 1E 62 FC | 	wrlong	local01, fp
0e560     04 4E 85 F1 | 	sub	fp, #4
0e564                 | LR__1263
0e564     34 CE BF FD | 	call	#_pop
0e568     2C 4E 05 F1 | 	add	fp, #44
0e56c     A7 FA 61 FC | 	wrlong	result1, fp
0e570     04 4E 05 F1 | 	add	fp, #4
0e574     A7 FC 61 FC | 	wrlong	result2, fp
0e578     04 4E 05 F1 | 	add	fp, #4
0e57c     A7 FE 61 FC | 	wrlong	result3, fp
0e580     30 4E 85 F1 | 	sub	fp, #48
0e584     A7 1E 02 FB | 	rdlong	local01, fp
0e588     02 1E 86 F1 | 	sub	local01, #2
0e58c     02 1E 66 F0 | 	shl	local01, #2
0e590     38 4E 05 F1 | 	add	fp, #56
0e594     A7 1E 02 F1 | 	add	local01, fp
0e598     10 4E 85 F1 | 	sub	fp, #16
0e59c     A7 12 02 F6 | 	mov	arg01, fp
0e5a0     2C 4E 85 F1 | 	sub	fp, #44
0e5a4     94 D0 BF FD | 	call	#_converttofloat
0e5a8     0F FB 61 FC | 	wrlong	result1, local01
0e5ac     04 4E 05 F1 | 	add	fp, #4
0e5b0     A7 1E 02 FB | 	rdlong	local01, fp
0e5b4     01 1E 86 F1 | 	sub	local01, #1
0e5b8     A7 1E 62 FC | 	wrlong	local01, fp
0e5bc     04 4E 85 F1 | 	sub	fp, #4
0e5c0     02 1E 56 F2 | 	cmps	local01, #2 wc
0e5c4     9C FF 9F 3D |  if_ae	jmp	#LR__1263
0e5c8     D0 CD BF FD | 	call	#_pop
0e5cc     FF 1E 02 F6 | 	mov	local01, result3
0e5d0     2C 4E 05 F1 | 	add	fp, #44
0e5d4     A7 FA 61 FC | 	wrlong	result1, fp
0e5d8     04 4E 05 F1 | 	add	fp, #4
0e5dc     A7 FC 61 FC | 	wrlong	result2, fp
0e5e0     04 4E 05 F1 | 	add	fp, #4
0e5e4     A7 1E 62 FC | 	wrlong	local01, fp
0e5e8     08 4E 85 F1 | 	sub	fp, #8
0e5ec     A7 12 02 F6 | 	mov	arg01, fp
0e5f0     2C 4E 85 F1 | 	sub	fp, #44
0e5f4     88 CF BF FD | 	call	#_converttoint
0e5f8     10 4E 05 F1 | 	add	fp, #16
0e5fc     A7 FA 61 FC | 	wrlong	result1, fp
0e600                 | ' t1=pop()
0e600                 | ' channel=converttoint(t1) : : if channel>31 then return
0e600     FD 1E 02 F6 | 	mov	local01, result1
0e604     10 4E 85 F1 | 	sub	fp, #16
0e608     20 1E 56 F2 | 	cmps	local01, #32 wc
0e60c     F0 03 90 3D |  if_ae	jmp	#LR__1273
0e610     20 4E 05 F1 | 	add	fp, #32
0e614     A7 00 68 FC | 	wrlong	#0, fp
0e618                 | ' max=0
0e618                 | ' if harm(0)<0 then
0e618     1C 4E 05 F1 | 	add	fp, #28
0e61c     A7 12 02 FB | 	rdlong	arg01, fp
0e620     3C 4E 85 F1 | 	sub	fp, #60
0e624     00 14 06 F6 | 	mov	arg02, #0
0e628     01 16 06 F6 | 	mov	arg03, #1
0e62c     E8 51 B1 FD | 	call	#__system___float_cmp
0e630     00 FA 55 F2 | 	cmps	result1, #0 wc
0e634     04 01 90 3D |  if_ae	jmp	#LR__1266
0e638     3C 4E 05 F1 | 	add	fp, #60
0e63c     A7 FA 01 FB | 	rdlong	result1, fp
0e640     1F FA 05 F4 | 	bitl	result1, #31
0e644     24 4E 85 F1 | 	sub	fp, #36
0e648     A7 FA 61 FC | 	wrlong	result1, fp
0e64c     28 4E 05 F1 | 	add	fp, #40
0e650     A7 FA 01 FB | 	rdlong	result1, fp
0e654     1F FA 05 F4 | 	bitl	result1, #31
0e658     24 4E 85 F1 | 	sub	fp, #36
0e65c     A7 FA 61 FC | 	wrlong	result1, fp
0e660     20 4E 05 F1 | 	add	fp, #32
0e664     00 C0 9F FF 
0e668     A7 00 68 FC | 	wrlong	##1065353216, fp
0e66c     24 4E 85 F1 | 	sub	fp, #36
0e670     A7 1E 02 FB | 	rdlong	local01, fp
0e674     28 4E 05 F1 | 	add	fp, #40
0e678     A7 1E 62 FC | 	wrlong	local01, fp
0e67c     24 4E 85 F1 | 	sub	fp, #36
0e680     A7 1E 02 FB | 	rdlong	local01, fp
0e684     28 4E 05 F1 | 	add	fp, #40
0e688     A7 1E 62 FC | 	wrlong	local01, fp
0e68c                 | '   harm(0)=1
0e68c                 | '   harm(1)=even
0e68c                 | '   harm(2)=odd
0e68c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0e68c     40 4E 85 F1 | 	sub	fp, #64
0e690     A7 06 68 FC | 	wrlong	#3, fp
0e694                 | LR__1264
0e694     A7 1A 02 FB | 	rdlong	arg05, fp
0e698     0D 21 02 F6 | 	mov	local02, arg05
0e69c     02 20 66 F0 | 	shl	local02, #2
0e6a0     38 4E 05 F1 | 	add	fp, #56
0e6a4     A7 20 02 F1 | 	add	local02, fp
0e6a8     02 1A 86 F1 | 	sub	arg05, #2
0e6ac     02 1A 66 F0 | 	shl	arg05, #2
0e6b0     A7 1A 02 F1 | 	add	arg05, fp
0e6b4     0D 13 02 FB | 	rdlong	arg01, arg05
0e6b8     24 4E 85 F1 | 	sub	fp, #36
0e6bc     A7 14 02 FB | 	rdlong	arg02, fp
0e6c0     18 4E 85 F1 | 	sub	fp, #24
0e6c4     1C 4D B1 FD | 	call	#__system___float_mul
0e6c8     10 FB 61 FC | 	wrlong	result1, local02
0e6cc     04 4E 05 F1 | 	add	fp, #4
0e6d0     A7 22 02 FB | 	rdlong	local03, fp
0e6d4     02 22 06 F1 | 	add	local03, #2
0e6d8     A7 22 62 FC | 	wrlong	local03, fp
0e6dc     10 22 56 F2 | 	cmps	local03, #16 wc
0e6e0     B0 FF 9F CD |  if_b	jmp	#LR__1264
0e6e4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0e6e4     A7 08 68 FC | 	wrlong	#4, fp
0e6e8                 | LR__1265
0e6e8     A7 22 02 FB | 	rdlong	local03, fp
0e6ec     11 21 02 F6 | 	mov	local02, local03
0e6f0     02 20 66 F0 | 	shl	local02, #2
0e6f4     38 4E 05 F1 | 	add	fp, #56
0e6f8     A7 20 02 F1 | 	add	local02, fp
0e6fc     02 22 86 F1 | 	sub	local03, #2
0e700     02 22 66 F0 | 	shl	local03, #2
0e704     A7 22 02 F1 | 	add	local03, fp
0e708     11 13 02 FB | 	rdlong	arg01, local03
0e70c     20 4E 85 F1 | 	sub	fp, #32
0e710     A7 14 02 FB | 	rdlong	arg02, fp
0e714     1C 4E 85 F1 | 	sub	fp, #28
0e718     C8 4C B1 FD | 	call	#__system___float_mul
0e71c     10 FB 61 FC | 	wrlong	result1, local02
0e720     04 4E 05 F1 | 	add	fp, #4
0e724     A7 22 02 FB | 	rdlong	local03, fp
0e728     02 22 06 F1 | 	add	local03, #2
0e72c     A7 22 62 FC | 	wrlong	local03, fp
0e730     0F 22 56 F2 | 	cmps	local03, #15 wc
0e734     B0 FF 9F CD |  if_b	jmp	#LR__1265
0e738     04 4E 85 F1 | 	sub	fp, #4
0e73c                 | LR__1266
0e73c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0e73c     3C 4E 05 F1 | 	add	fp, #60
0e740     A7 12 02 FB | 	rdlong	arg01, fp
0e744     3C 4E 85 F1 | 	sub	fp, #60
0e748     00 14 06 F6 | 	mov	arg02, #0
0e74c     01 16 66 F6 | 	neg	arg03, #1
0e750     C4 50 B1 FD | 	call	#__system___float_cmp
0e754     00 FA 55 F2 | 	cmps	result1, #0 wc
0e758     A4 02 90 CD |  if_b	jmp	#LR__1272
0e75c                 | '   for i=0 to 1023
0e75c     04 4E 05 F1 | 	add	fp, #4
0e760     A7 00 68 FC | 	wrlong	#0, fp
0e764     04 4E 85 F1 | 	sub	fp, #4
0e768                 | LR__1267
0e768     24 4E 05 F1 | 	add	fp, #36
0e76c     A7 00 68 FC | 	wrlong	#0, fp
0e770                 | '     spl=0
0e770                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0e770     1C 4E 85 F1 | 	sub	fp, #28
0e774     A7 00 68 FC | 	wrlong	#0, fp
0e778                 | LR__1268
0e778     A7 20 02 FB | 	rdlong	local02, fp
0e77c     02 20 66 F0 | 	shl	local02, #2
0e780     34 4E 05 F1 | 	add	fp, #52
0e784     A7 20 02 F1 | 	add	local02, fp
0e788     10 23 02 FB | 	rdlong	local03, local02
0e78c     87 E4 1D FF 
0e790     DB 21 06 F6 | 	mov	local02, ##1003032539
0e794     38 4E 85 F1 | 	sub	fp, #56
0e798     A7 12 02 FB | 	rdlong	arg01, fp
0e79c     04 4E 85 F1 | 	sub	fp, #4
0e7a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e7a4     1F 24 C6 C9 |  if_b	decod	local04, #31
0e7a8     00 24 06 36 |  if_ae	mov	local04, #0
0e7ac     30 48 B1 FD | 	call	#__system___float_fromuns
0e7b0     12 FB 61 F5 | 	xor	result1, local04
0e7b4     FD 14 02 F6 | 	mov	arg02, result1
0e7b8     10 13 02 F6 | 	mov	arg01, local02
0e7bc     24 4C B1 FD | 	call	#__system___float_mul
0e7c0     FD 20 02 F6 | 	mov	local02, result1
0e7c4     08 4E 05 F1 | 	add	fp, #8
0e7c8     A7 12 02 FB | 	rdlong	arg01, fp
0e7cc     08 4E 85 F1 | 	sub	fp, #8
0e7d0     01 12 06 F1 | 	add	arg01, #1
0e7d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e7d8     1F 24 C6 C9 |  if_b	decod	local04, #31
0e7dc     00 24 06 36 |  if_ae	mov	local04, #0
0e7e0     FC 47 B1 FD | 	call	#__system___float_fromuns
0e7e4     12 FB 61 F5 | 	xor	result1, local04
0e7e8     FD 14 02 F6 | 	mov	arg02, result1
0e7ec     10 13 02 F6 | 	mov	arg01, local02
0e7f0     F0 4B B1 FD | 	call	#__system___float_mul
0e7f4     FD 12 02 F6 | 	mov	arg01, result1
0e7f8     48 55 B1 FD | 	call	#__system____builtin_sinf
0e7fc     FD 14 02 F6 | 	mov	arg02, result1
0e800     11 13 02 F6 | 	mov	arg01, local03
0e804     DC 4B B1 FD | 	call	#__system___float_mul
0e808     FD 14 02 F6 | 	mov	arg02, result1
0e80c     24 4E 05 F1 | 	add	fp, #36
0e810     A7 12 02 FB | 	rdlong	arg01, fp
0e814     24 4E 85 F1 | 	sub	fp, #36
0e818     F8 47 B1 FD | 	call	#__system___float_add
0e81c     24 4E 05 F1 | 	add	fp, #36
0e820     A7 FA 61 FC | 	wrlong	result1, fp
0e824     1C 4E 85 F1 | 	sub	fp, #28
0e828     A7 16 02 FB | 	rdlong	arg03, fp
0e82c     01 16 06 F1 | 	add	arg03, #1
0e830     A7 16 62 FC | 	wrlong	arg03, fp
0e834     10 16 56 F2 | 	cmps	arg03, #16 wc
0e838     3C FF 9F CD |  if_b	jmp	#LR__1268
0e83c                 | '     if abs(spl)>max then max=abs(spl)  
0e83c     1C 4E 05 F1 | 	add	fp, #28
0e840     A7 12 02 FB | 	rdlong	arg01, fp
0e844     1F 12 06 F4 | 	bitl	arg01, #31
0e848     04 4E 85 F1 | 	sub	fp, #4
0e84c     A7 14 02 FB | 	rdlong	arg02, fp
0e850     20 4E 85 F1 | 	sub	fp, #32
0e854     01 16 66 F6 | 	neg	arg03, #1
0e858     BC 4F B1 FD | 	call	#__system___float_cmp
0e85c     01 FA 55 F2 | 	cmps	result1, #1 wc
0e860     18 00 90 CD |  if_b	jmp	#LR__1269
0e864     24 4E 05 F1 | 	add	fp, #36
0e868     A7 FA 01 FB | 	rdlong	result1, fp
0e86c     1F FA 05 F4 | 	bitl	result1, #31
0e870     04 4E 85 F1 | 	sub	fp, #4
0e874     A7 FA 61 FC | 	wrlong	result1, fp
0e878     20 4E 85 F1 | 	sub	fp, #32
0e87c                 | LR__1269
0e87c     04 4E 05 F1 | 	add	fp, #4
0e880     A7 22 02 FB | 	rdlong	local03, fp
0e884     01 22 06 F1 | 	add	local03, #1
0e888     A7 22 62 FC | 	wrlong	local03, fp
0e88c     04 4E 85 F1 | 	sub	fp, #4
0e890     02 00 00 FF 
0e894     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e898     CC FE 9F CD |  if_b	jmp	#LR__1267
0e89c                 | '   for i=0 to 1023
0e89c     04 4E 05 F1 | 	add	fp, #4
0e8a0     A7 00 68 FC | 	wrlong	#0, fp
0e8a4     04 4E 85 F1 | 	sub	fp, #4
0e8a8                 | LR__1270
0e8a8     24 4E 05 F1 | 	add	fp, #36
0e8ac     A7 00 68 FC | 	wrlong	#0, fp
0e8b0                 | '     spl=0
0e8b0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
0e8b0     1C 4E 85 F1 | 	sub	fp, #28
0e8b4     A7 00 68 FC | 	wrlong	#0, fp
0e8b8                 | LR__1271
0e8b8     A7 22 02 FB | 	rdlong	local03, fp
0e8bc     02 22 66 F0 | 	shl	local03, #2
0e8c0     34 4E 05 F1 | 	add	fp, #52
0e8c4     A7 22 02 F1 | 	add	local03, fp
0e8c8     11 23 02 FB | 	rdlong	local03, local03
0e8cc     1C 4E 85 F1 | 	sub	fp, #28
0e8d0     A7 14 02 FB | 	rdlong	arg02, fp
0e8d4     20 4E 85 F1 | 	sub	fp, #32
0e8d8     58 7F 23 FF 
0e8dc     00 12 06 F6 | 	mov	arg01, ##1191096320
0e8e0     04 4D B1 FD | 	call	#__system___float_div
0e8e4     FD 14 02 F6 | 	mov	arg02, result1
0e8e8     11 13 02 F6 | 	mov	arg01, local03
0e8ec     F4 4A B1 FD | 	call	#__system___float_mul
0e8f0     FD 22 02 F6 | 	mov	local03, result1
0e8f4     87 E4 1D FF 
0e8f8     DB 21 06 F6 | 	mov	local02, ##1003032539
0e8fc     04 4E 05 F1 | 	add	fp, #4
0e900     A7 12 02 FB | 	rdlong	arg01, fp
0e904     04 4E 85 F1 | 	sub	fp, #4
0e908     09 13 52 F6 | 	abs	arg01, arg01 wc
0e90c     1F 24 C6 C9 |  if_b	decod	local04, #31
0e910     00 24 06 36 |  if_ae	mov	local04, #0
0e914     C8 46 B1 FD | 	call	#__system___float_fromuns
0e918     12 FB 61 F5 | 	xor	result1, local04
0e91c     FD 14 02 F6 | 	mov	arg02, result1
0e920     10 13 02 F6 | 	mov	arg01, local02
0e924     BC 4A B1 FD | 	call	#__system___float_mul
0e928     FD 20 02 F6 | 	mov	local02, result1
0e92c     08 4E 05 F1 | 	add	fp, #8
0e930     A7 12 02 FB | 	rdlong	arg01, fp
0e934     08 4E 85 F1 | 	sub	fp, #8
0e938     01 12 06 F1 | 	add	arg01, #1
0e93c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e940     1F 24 C6 C9 |  if_b	decod	local04, #31
0e944     00 24 06 36 |  if_ae	mov	local04, #0
0e948     94 46 B1 FD | 	call	#__system___float_fromuns
0e94c     12 FB 61 F5 | 	xor	result1, local04
0e950     FD 14 02 F6 | 	mov	arg02, result1
0e954     10 13 02 F6 | 	mov	arg01, local02
0e958     88 4A B1 FD | 	call	#__system___float_mul
0e95c     FD 12 02 F6 | 	mov	arg01, result1
0e960     E0 53 B1 FD | 	call	#__system____builtin_sinf
0e964     FD 14 02 F6 | 	mov	arg02, result1
0e968     11 13 02 F6 | 	mov	arg01, local03
0e96c     74 4A B1 FD | 	call	#__system___float_mul
0e970     FD 14 02 F6 | 	mov	arg02, result1
0e974     24 4E 05 F1 | 	add	fp, #36
0e978     A7 12 02 FB | 	rdlong	arg01, fp
0e97c     24 4E 85 F1 | 	sub	fp, #36
0e980     90 46 B1 FD | 	call	#__system___float_add
0e984     24 4E 05 F1 | 	add	fp, #36
0e988     A7 FA 61 FC | 	wrlong	result1, fp
0e98c     1C 4E 85 F1 | 	sub	fp, #28
0e990     A7 22 02 FB | 	rdlong	local03, fp
0e994     01 22 06 F1 | 	add	local03, #1
0e998     A7 22 62 FC | 	wrlong	local03, fp
0e99c     10 22 56 F2 | 	cmps	local03, #16 wc
0e9a0     14 FF 9F CD |  if_b	jmp	#LR__1271
0e9a4     08 4E 05 F1 | 	add	fp, #8
0e9a8     A7 22 02 FB | 	rdlong	local03, fp
0e9ac     0B 22 66 F0 | 	shl	local03, #11
0e9b0     0C 4E 85 F1 | 	sub	fp, #12
0e9b4     A7 20 02 FB | 	rdlong	local02, fp
0e9b8     01 20 66 F0 | 	shl	local02, #1
0e9bc     10 23 02 F1 | 	add	local03, local02
0e9c0     20 4E 05 F1 | 	add	fp, #32
0e9c4     A7 12 02 FB | 	rdlong	arg01, fp
0e9c8     24 4E 85 F1 | 	sub	fp, #36
0e9cc     01 14 06 F6 | 	mov	arg02, #1
0e9d0     D8 4E B1 FD | 	call	#__system___float_tointeger
0e9d4     FD 14 02 F6 | 	mov	arg02, result1
0e9d8     11 13 02 F6 | 	mov	arg01, local03
0e9dc     6C EA B0 FD | 	call	#_psdpoke
0e9e0     04 4E 05 F1 | 	add	fp, #4
0e9e4     A7 22 02 FB | 	rdlong	local03, fp
0e9e8     01 22 06 F1 | 	add	local03, #1
0e9ec     A7 22 62 FC | 	wrlong	local03, fp
0e9f0     04 4E 85 F1 | 	sub	fp, #4
0e9f4     02 00 00 FF 
0e9f8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e9fc     A8 FE 9F CD |  if_b	jmp	#LR__1270
0ea00                 | LR__1272
0ea00                 | LR__1273
0ea00     A7 F0 03 F6 | 	mov	ptra, fp
0ea04     B2 00 A0 FD | 	call	#popregs_
0ea08                 | _do_defsnd_ret
0ea08     2D 00 64 FD | 	ret
0ea0c                 | 
0ea0c                 | ' 
0ea0c                 | ' '-------------------- defsprite
0ea0c                 | ' 
0ea0c                 | ' sub do_defsprite
0ea0c                 | _do_defsprite
0ea0c     07 4A 05 F6 | 	mov	COUNT_, #7
0ea10     A8 00 A0 FD | 	call	#pushregs_
0ea14     60 F0 07 F1 | 	add	ptra, #96
0ea18     80 C9 BF FD | 	call	#_pop
0ea1c     FD 16 02 F6 | 	mov	arg03, result1
0ea20     FE 14 02 F6 | 	mov	arg02, result2
0ea24     FF 12 02 F6 | 	mov	arg01, result3
0ea28     30 4E 05 F1 | 	add	fp, #48
0ea2c     A7 16 62 FC | 	wrlong	arg03, fp
0ea30     04 4E 05 F1 | 	add	fp, #4
0ea34     A7 14 62 FC | 	wrlong	arg02, fp
0ea38     04 4E 05 F1 | 	add	fp, #4
0ea3c     A7 12 62 FC | 	wrlong	arg01, fp
0ea40     38 4E 85 F1 | 	sub	fp, #56
0ea44     54 C9 BF FD | 	call	#_pop
0ea48     FD 16 02 F6 | 	mov	arg03, result1
0ea4c     FE 14 02 F6 | 	mov	arg02, result2
0ea50     FF 12 02 F6 | 	mov	arg01, result3
0ea54     24 4E 05 F1 | 	add	fp, #36
0ea58     A7 16 62 FC | 	wrlong	arg03, fp
0ea5c     04 4E 05 F1 | 	add	fp, #4
0ea60     A7 14 62 FC | 	wrlong	arg02, fp
0ea64     04 4E 05 F1 | 	add	fp, #4
0ea68     A7 12 62 FC | 	wrlong	arg01, fp
0ea6c     2C 4E 85 F1 | 	sub	fp, #44
0ea70     28 C9 BF FD | 	call	#_pop
0ea74     FD 16 02 F6 | 	mov	arg03, result1
0ea78     FE 14 02 F6 | 	mov	arg02, result2
0ea7c     FF 12 02 F6 | 	mov	arg01, result3
0ea80     18 4E 05 F1 | 	add	fp, #24
0ea84     A7 16 62 FC | 	wrlong	arg03, fp
0ea88     04 4E 05 F1 | 	add	fp, #4
0ea8c     A7 14 62 FC | 	wrlong	arg02, fp
0ea90     04 4E 05 F1 | 	add	fp, #4
0ea94     A7 12 62 FC | 	wrlong	arg01, fp
0ea98     20 4E 85 F1 | 	sub	fp, #32
0ea9c     FC C8 BF FD | 	call	#_pop
0eaa0     FD 16 02 F6 | 	mov	arg03, result1
0eaa4     FE 14 02 F6 | 	mov	arg02, result2
0eaa8     FF 12 02 F6 | 	mov	arg01, result3
0eaac     0C 4E 05 F1 | 	add	fp, #12
0eab0     A7 16 62 FC | 	wrlong	arg03, fp
0eab4     04 4E 05 F1 | 	add	fp, #4
0eab8     A7 14 62 FC | 	wrlong	arg02, fp
0eabc     04 4E 05 F1 | 	add	fp, #4
0eac0     A7 12 62 FC | 	wrlong	arg01, fp
0eac4     14 4E 85 F1 | 	sub	fp, #20
0eac8     D0 C8 BF FD | 	call	#_pop
0eacc     FF 16 02 F6 | 	mov	arg03, result3
0ead0     A7 FA 61 FC | 	wrlong	result1, fp
0ead4     04 4E 05 F1 | 	add	fp, #4
0ead8     A7 FC 61 FC | 	wrlong	result2, fp
0eadc     04 4E 05 F1 | 	add	fp, #4
0eae0     A7 16 62 FC | 	wrlong	arg03, fp
0eae4     08 4E 85 F1 | 	sub	fp, #8
0eae8     A7 12 02 F6 | 	mov	arg01, fp
0eaec     90 CA BF FD | 	call	#_converttoint
0eaf0     3C 4E 05 F1 | 	add	fp, #60
0eaf4     A7 FA 61 FC | 	wrlong	result1, fp
0eaf8     30 4E 85 F1 | 	sub	fp, #48
0eafc     A7 12 02 F6 | 	mov	arg01, fp
0eb00     0C 4E 85 F1 | 	sub	fp, #12
0eb04     78 CA BF FD | 	call	#_converttoint
0eb08     40 4E 05 F1 | 	add	fp, #64
0eb0c     A7 FA 61 FC | 	wrlong	result1, fp
0eb10     28 4E 85 F1 | 	sub	fp, #40
0eb14     A7 12 02 F6 | 	mov	arg01, fp
0eb18     18 4E 85 F1 | 	sub	fp, #24
0eb1c     60 CA BF FD | 	call	#_converttoint
0eb20     44 4E 05 F1 | 	add	fp, #68
0eb24     A7 FA 61 FC | 	wrlong	result1, fp
0eb28     20 4E 85 F1 | 	sub	fp, #32
0eb2c     A7 12 02 F6 | 	mov	arg01, fp
0eb30     24 4E 85 F1 | 	sub	fp, #36
0eb34     48 CA BF FD | 	call	#_converttoint
0eb38     48 4E 05 F1 | 	add	fp, #72
0eb3c     A7 FA 61 FC | 	wrlong	result1, fp
0eb40     18 4E 85 F1 | 	sub	fp, #24
0eb44     A7 12 02 F6 | 	mov	arg01, fp
0eb48     30 4E 85 F1 | 	sub	fp, #48
0eb4c     30 CA BF FD | 	call	#_converttoint
0eb50     4C 4E 05 F1 | 	add	fp, #76
0eb54     A7 FA 61 FC | 	wrlong	result1, fp
0eb58                 | ' 
0eb58                 | ' t5=pop()
0eb58                 | ' t4=pop()
0eb58                 | ' t3=pop()
0eb58                 | ' t2=pop()
0eb58                 | ' t1=pop()
0eb58                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
0eb58                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
0eb58     10 4E 85 F1 | 	sub	fp, #16
0eb5c     A7 16 02 FB | 	rdlong	arg03, fp
0eb60     3C 4E 85 F1 | 	sub	fp, #60
0eb64     02 16 66 F0 | 	shl	arg03, #2
0eb68     51 00 00 FF 
0eb6c     68 E5 05 F1 | 	add	objptr, ##41832
0eb70     F2 16 02 F1 | 	add	arg03, objptr
0eb74     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0eb78     51 00 00 FF 
0eb7c     68 E5 85 F1 | 	sub	objptr, ##41832
0eb80     2C 00 90 AD |  if_e	jmp	#LR__1280
0eb84     3C 4E 05 F1 | 	add	fp, #60
0eb88     A7 16 02 FB | 	rdlong	arg03, fp
0eb8c     3C 4E 85 F1 | 	sub	fp, #60
0eb90     02 16 66 F0 | 	shl	arg03, #2
0eb94     51 00 00 FF 
0eb98     68 E5 05 F1 | 	add	objptr, ##41832
0eb9c     F2 16 02 F1 | 	add	arg03, objptr
0eba0     0B 13 02 FB | 	rdlong	arg01, arg03
0eba4     51 00 00 FF 
0eba8     68 E5 85 F1 | 	sub	objptr, ##41832
0ebac     98 5C B1 FD | 	call	#__system___gc_free
0ebb0                 | LR__1280
0ebb0     3C 4E 05 F1 | 	add	fp, #60
0ebb4     A7 1E 02 FB | 	rdlong	local01, fp
0ebb8     0C 4E 05 F1 | 	add	fp, #12
0ebbc     A7 16 02 FB | 	rdlong	arg03, fp
0ebc0     04 4E 05 F1 | 	add	fp, #4
0ebc4     A7 14 02 FB | 	rdlong	arg02, fp
0ebc8     0A 17 02 FD | 	qmul	arg03, arg02
0ebcc     02 1E 66 F0 | 	shl	local01, #2
0ebd0     51 00 00 FF 
0ebd4     68 E5 05 F1 | 	add	objptr, ##41832
0ebd8     F2 1E 02 F1 | 	add	local01, objptr
0ebdc     4C 4E 85 F1 | 	sub	fp, #76
0ebe0     51 00 00 FF 
0ebe4     68 E5 85 F1 | 	sub	objptr, ##41832
0ebe8     18 12 62 FD | 	getqx	arg01
0ebec     1C 5B B1 FD | 	call	#__system___gc_alloc_managed
0ebf0     0F FB 61 FC | 	wrlong	result1, local01
0ebf4                 | ' for y=a3 to a3+a5-1
0ebf4     44 4E 05 F1 | 	add	fp, #68
0ebf8     A7 20 02 FB | 	rdlong	local02, fp
0ebfc     0C 4E 05 F1 | 	add	fp, #12
0ec00     A7 20 62 FC | 	wrlong	local02, fp
0ec04     0C 4E 85 F1 | 	sub	fp, #12
0ec08     A7 22 02 FB | 	rdlong	local03, fp
0ec0c     08 4E 05 F1 | 	add	fp, #8
0ec10     A7 24 02 FB | 	rdlong	local04, fp
0ec14     4C 4E 85 F1 | 	sub	fp, #76
0ec18     12 23 02 F1 | 	add	local03, local04
0ec1c                 | LR__1281
0ec1c     50 4E 05 F1 | 	add	fp, #80
0ec20     A7 20 02 FB | 	rdlong	local02, fp
0ec24     50 4E 85 F1 | 	sub	fp, #80
0ec28     11 21 52 F2 | 	cmps	local02, local03 wc
0ec2c     F4 00 90 3D |  if_ae	jmp	#LR__1284
0ec30                 | '   for x=a2 to a4+a2-1
0ec30     40 4E 05 F1 | 	add	fp, #64
0ec34     A7 1E 02 FB | 	rdlong	local01, fp
0ec38     14 4E 05 F1 | 	add	fp, #20
0ec3c     A7 1E 62 FC | 	wrlong	local01, fp
0ec40     0C 4E 85 F1 | 	sub	fp, #12
0ec44     A7 26 02 FB | 	rdlong	local05, fp
0ec48     08 4E 85 F1 | 	sub	fp, #8
0ec4c     A7 28 02 FB | 	rdlong	local06, fp
0ec50     40 4E 85 F1 | 	sub	fp, #64
0ec54     14 27 02 F1 | 	add	local05, local06
0ec58                 | LR__1282
0ec58     54 4E 05 F1 | 	add	fp, #84
0ec5c     A7 1E 02 FB | 	rdlong	local01, fp
0ec60     54 4E 85 F1 | 	sub	fp, #84
0ec64     13 1F 52 F2 | 	cmps	local01, local05 wc
0ec68     A0 00 90 3D |  if_ae	jmp	#LR__1283
0ec6c     3C 4E 05 F1 | 	add	fp, #60
0ec70     A7 28 02 FB | 	rdlong	local06, fp
0ec74     18 4E 05 F1 | 	add	fp, #24
0ec78     A7 24 02 FB | 	rdlong	local04, fp
0ec7c     14 4E 85 F1 | 	sub	fp, #20
0ec80     A7 20 02 FB | 	rdlong	local02, fp
0ec84     10 4E 05 F1 | 	add	fp, #16
0ec88     A7 1E 02 FB | 	rdlong	local01, fp
0ec8c     0F 17 02 F6 | 	mov	arg03, local01
0ec90     0C 4E 85 F1 | 	sub	fp, #12
0ec94     A7 14 02 FB | 	rdlong	arg02, fp
0ec98     0A 17 82 F1 | 	sub	arg03, arg02
0ec9c     04 4E 05 F1 | 	add	fp, #4
0eca0     A7 14 02 FB | 	rdlong	arg02, fp
0eca4     0A 17 02 FD | 	qmul	arg03, arg02
0eca8     02 28 66 F0 | 	shl	local06, #2
0ecac     51 00 00 FF 
0ecb0     68 E5 05 F1 | 	add	objptr, ##41832
0ecb4     F2 28 02 F1 | 	add	local06, objptr
0ecb8     14 29 02 FB | 	rdlong	local06, local06
0ecbc     12 2B 02 F6 | 	mov	local07, local04
0ecc0     10 2B 82 F1 | 	sub	local07, local02
0ecc4     51 00 00 FF 
0ecc8     68 E5 85 F1 | 	sub	objptr, ##41832
0eccc     F2 12 02 FB | 	rdlong	arg01, objptr
0ecd0     12 13 02 F1 | 	add	arg01, local04
0ecd4     48 4E 85 F1 | 	sub	fp, #72
0ecd8     0A 1E 66 F0 | 	shl	local01, #10
0ecdc     0F 13 02 F1 | 	add	arg01, local01
0ece0     18 24 62 FD | 	getqx	local04
0ece4     12 2B 02 F1 | 	add	local07, local04
0ece8     14 2B 02 F1 | 	add	local07, local06
0ecec     EC E7 B0 FD | 	call	#_pspeek
0ecf0     15 FB 41 FC | 	wrbyte	result1, local07
0ecf4     54 4E 05 F1 | 	add	fp, #84
0ecf8     A7 2A 02 FB | 	rdlong	local07, fp
0ecfc     01 2A 06 F1 | 	add	local07, #1
0ed00     A7 2A 62 FC | 	wrlong	local07, fp
0ed04     54 4E 85 F1 | 	sub	fp, #84
0ed08     4C FF 9F FD | 	jmp	#LR__1282
0ed0c                 | LR__1283
0ed0c     50 4E 05 F1 | 	add	fp, #80
0ed10     A7 2A 02 FB | 	rdlong	local07, fp
0ed14     01 2A 06 F1 | 	add	local07, #1
0ed18     A7 2A 62 FC | 	wrlong	local07, fp
0ed1c     50 4E 85 F1 | 	sub	fp, #80
0ed20     F8 FE 9F FD | 	jmp	#LR__1281
0ed24                 | LR__1284
0ed24     3C 4E 05 F1 | 	add	fp, #60
0ed28     A7 2A 02 FB | 	rdlong	local07, fp
0ed2c     15 13 02 F6 | 	mov	arg01, local07
0ed30     3C 4E 85 F1 | 	sub	fp, #60
0ed34     02 2A 66 F0 | 	shl	local07, #2
0ed38     51 00 00 FF 
0ed3c     68 E5 05 F1 | 	add	objptr, ##41832
0ed40     F2 2A 02 F1 | 	add	local07, objptr
0ed44     15 15 02 FB | 	rdlong	arg02, local07
0ed48     51 00 00 FF 
0ed4c     68 E5 85 F1 | 	sub	objptr, ##41832
0ed50     50 F4 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0ed54     3C 4E 05 F1 | 	add	fp, #60
0ed58     A7 12 02 FB | 	rdlong	arg01, fp
0ed5c     0C 4E 05 F1 | 	add	fp, #12
0ed60     A7 14 02 FB | 	rdlong	arg02, fp
0ed64     04 4E 05 F1 | 	add	fp, #4
0ed68     A7 16 02 FB | 	rdlong	arg03, fp
0ed6c     4C 4E 85 F1 | 	sub	fp, #76
0ed70     C0 F4 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ed74     A7 F0 03 F6 | 	mov	ptra, fp
0ed78     B2 00 A0 FD | 	call	#popregs_
0ed7c                 | _do_defsprite_ret
0ed7c     2D 00 64 FD | 	ret
0ed80                 | 
0ed80                 | ' 
0ed80                 | ' '-------------------- deg
0ed80                 | ' 
0ed80                 | ' sub do_deg
0ed80                 | _do_deg
0ed80     51 00 00 FF 
0ed84     BC E5 05 F1 | 	add	objptr, ##41916
0ed88     7D 47 9E FF 
0ed8c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
0ed90     04 E4 05 F1 | 	add	objptr, #4
0ed94     97 32 A1 FF 
0ed98     F2 C2 69 FC | 	wrlong	##1113927393, objptr
0ed9c     51 00 00 FF 
0eda0     C0 E5 85 F1 | 	sub	objptr, ##41920
0eda4                 | _do_deg_ret
0eda4     2D 00 64 FD | 	ret
0eda8                 | 
0eda8                 | ' 
0eda8                 | ' '-------------------- dir
0eda8                 | ' 
0eda8                 | ' sub do_dir
0eda8                 | _do_dir
0eda8     13 4A 05 F6 | 	mov	COUNT_, #19
0edac     A8 00 A0 FD | 	call	#pushregs_
0edb0     01 00 00 FF 
0edb4     38 F0 07 F1 | 	add	ptra, ##568
0edb8     83 01 00 FF 
0edbc     D5 13 06 F6 | 	mov	arg01, ##@LR__5428
0edc0     F8 20 B1 FD | 	call	#__system___chdir
0edc4                 | ' 
0edc4                 | ' chdir("/sd/bas")       ' set working directory - TODO allow to change it!
0edc4                 | ' print "Working directory: "; currentdir$ 
0edc4     00 12 06 F6 | 	mov	arg01, #0
0edc8     C8 74 B1 FD | 	call	#__system___getiolock_0541
0edcc     FD 12 02 F6 | 	mov	arg01, result1
0edd0     5C 1A B1 FD | 	call	#__system___lockmem
0edd4     83 01 00 FF 
0edd8     DD 15 06 F6 | 	mov	arg02, ##@LR__5429
0eddc     00 12 06 F6 | 	mov	arg01, #0
0ede0     00 16 06 F6 | 	mov	arg03, #0
0ede4     3C 27 B1 FD | 	call	#__system___basic_print_string
0ede8     4A 00 00 FF 
0edec     94 E4 05 F1 | 	add	objptr, ##38036
0edf0     F2 14 02 FB | 	rdlong	arg02, objptr
0edf4     4A 00 00 FF 
0edf8     94 E4 85 F1 | 	sub	objptr, ##38036
0edfc     00 12 06 F6 | 	mov	arg01, #0
0ee00     00 16 06 F6 | 	mov	arg03, #0
0ee04     1C 27 B1 FD | 	call	#__system___basic_print_string
0ee08     00 12 06 F6 | 	mov	arg01, #0
0ee0c     0A 14 06 F6 | 	mov	arg02, #10
0ee10     00 16 06 F6 | 	mov	arg03, #0
0ee14     B4 26 B1 FD | 	call	#__system___basic_print_char
0ee18     01 1E 06 F6 | 	mov	local01, #1
0ee1c     00 12 06 F6 | 	mov	arg01, #0
0ee20     70 74 B1 FD | 	call	#__system___getiolock_0541
0ee24     FD 00 68 FC | 	wrlong	#0, result1
0ee28     00 20 06 F6 | 	mov	local02, #0
0ee2c     00 22 06 F6 | 	mov	local03, #0
0ee30                 | ' px=0
0ee30                 | ' for i=0 to 127: filelist(i)="" : next i
0ee30     00 24 06 F6 | 	mov	local04, #0
0ee34     1C 4E 05 F1 | 	add	fp, #28
0ee38     97 12 48 FB | 	callpa	#(@LR__1291-@LR__1290)>>2,fcache_load_ptr_
0ee3c                 | LR__1290
0ee3c     12 27 02 F6 | 	mov	local05, local04
0ee40     02 26 66 F0 | 	shl	local05, #2
0ee44     A7 26 02 F1 | 	add	local05, fp
0ee48     83 01 00 FF 
0ee4c     F1 29 06 F6 | 	mov	local06, ##@LR__5430
0ee50     13 29 62 FC | 	wrlong	local06, local05
0ee54     01 24 06 F1 | 	add	local04, #1
0ee58     80 24 56 F2 | 	cmps	local04, #128 wc
0ee5c     DC FF 9F CD |  if_b	jmp	#LR__1290
0ee60                 | LR__1291
0ee60     1C 4E 85 F1 | 	sub	fp, #28
0ee64     83 01 00 FF 
0ee68     F2 13 06 F6 | 	mov	arg01, ##@LR__5431
0ee6c     10 14 06 F6 | 	mov	arg02, #16
0ee70     58 75 B1 FD | 	call	#__system___basic_dir
0ee74     FD 2A 02 F6 | 	mov	local07, result1
0ee78     00 2C 06 F6 | 	mov	local08, #0
0ee7c                 | ' filename=dir$("*", fbDirectory)
0ee7c                 | ' n=0
0ee7c                 | ' while filename <> "" andalso filename <> nil andalso n<128
0ee7c                 | LR__1292
0ee7c     83 01 00 FF 
0ee80     F4 2F 06 F6 | 	mov	local09, ##@LR__5432
0ee84     15 13 02 F6 | 	mov	arg01, local07
0ee88     17 15 02 F6 | 	mov	arg02, local09
0ee8c     C8 19 B1 FD | 	call	#__system___string_cmp
0ee90     00 FA 0D F2 | 	cmp	result1, #0 wz
0ee94     68 00 90 AD |  if_e	jmp	#LR__1293
0ee98     00 2E 06 F6 | 	mov	local09, #0
0ee9c     15 13 02 F6 | 	mov	arg01, local07
0eea0     00 14 06 F6 | 	mov	arg02, #0
0eea4     B0 19 B1 FD | 	call	#__system___string_cmp
0eea8     00 FA 0D F2 | 	cmp	result1, #0 wz
0eeac     50 00 90 AD |  if_e	jmp	#LR__1293
0eeb0     80 2C 56 F2 | 	cmps	local08, #128 wc
0eeb4     48 00 90 3D |  if_ae	jmp	#LR__1293
0eeb8     83 01 00 FF 
0eebc     F5 13 06 F6 | 	mov	arg01, ##@LR__5433
0eec0     15 15 02 F6 | 	mov	arg02, local07
0eec4     C4 19 B1 FD | 	call	#__system___string_concat
0eec8     FD 2A 02 F6 | 	mov	local07, result1
0eecc     16 27 02 F6 | 	mov	local05, local08
0eed0     02 26 66 F0 | 	shl	local05, #2
0eed4     1C 4E 05 F1 | 	add	fp, #28
0eed8     A7 26 02 F1 | 	add	local05, fp
0eedc     13 2B 62 FC | 	wrlong	local07, local05
0eee0     01 2C 06 F1 | 	add	local08, #1
0eee4     00 26 06 F6 | 	mov	local05, #0
0eee8     00 12 06 F6 | 	mov	arg01, #0
0eeec     00 14 06 F6 | 	mov	arg02, #0
0eef0     1C 4E 85 F1 | 	sub	fp, #28
0eef4     D4 74 B1 FD | 	call	#__system___basic_dir
0eef8     FD 2A 02 F6 | 	mov	local07, result1
0eefc     7C FF 9F FD | 	jmp	#LR__1292
0ef00                 | LR__1293
0ef00                 | ' for i=0 to n-1			' now sort this
0ef00     00 24 06 F6 | 	mov	local04, #0
0ef04     16 31 02 F6 | 	mov	local10, local08
0ef08                 | LR__1294
0ef08     18 25 52 F2 | 	cmps	local04, local10 wc
0ef0c     DC 00 90 3D |  if_ae	jmp	#LR__1298
0ef10     00 32 06 F6 | 	mov	local11, #0
0ef14                 | '   swapped=false
0ef14                 | '   for j=0 to n-i-2
0ef14     00 34 06 F6 | 	mov	local12, #0
0ef18     16 37 02 F6 | 	mov	local13, local08
0ef1c     12 37 82 F1 | 	sub	local13, local04
0ef20     01 36 86 F1 | 	sub	local13, #1
0ef24                 | LR__1295
0ef24     1B 35 52 F2 | 	cmps	local12, local13 wc
0ef28     B0 00 90 3D |  if_ae	jmp	#LR__1297
0ef2c                 | '     if filelist(j) > filelist(j+1) then
0ef2c     1A 2F 02 F6 | 	mov	local09, local12
0ef30     02 2E 66 F0 | 	shl	local09, #2
0ef34     1C 4E 05 F1 | 	add	fp, #28
0ef38     A7 2E 02 F1 | 	add	local09, fp
0ef3c     17 13 02 FB | 	rdlong	arg01, local09
0ef40     1A 2F 02 F6 | 	mov	local09, local12
0ef44     01 2E 06 F1 | 	add	local09, #1
0ef48     17 29 02 F6 | 	mov	local06, local09
0ef4c     02 28 66 F0 | 	shl	local06, #2
0ef50     A7 1E 02 F6 | 	mov	local01, fp
0ef54     A7 28 02 F1 | 	add	local06, fp
0ef58     14 27 02 FB | 	rdlong	local05, local06
0ef5c     13 15 02 F6 | 	mov	arg02, local05
0ef60     1C 4E 85 F1 | 	sub	fp, #28
0ef64     F0 18 B1 FD | 	call	#__system___string_cmp
0ef68     01 FA 55 F2 | 	cmps	result1, #1 wc
0ef6c     64 00 90 CD |  if_b	jmp	#LR__1296
0ef70     1A 2F 02 F6 | 	mov	local09, local12
0ef74     01 2E 06 F1 | 	add	local09, #1
0ef78     02 2E 66 F0 | 	shl	local09, #2
0ef7c     1C 4E 05 F1 | 	add	fp, #28
0ef80     A7 2E 02 F1 | 	add	local09, fp
0ef84     17 33 02 FB | 	rdlong	local11, local09
0ef88     1A 29 02 F6 | 	mov	local06, local12
0ef8c     02 28 66 F0 | 	shl	local06, #2
0ef90     A7 28 02 F1 | 	add	local06, fp
0ef94     14 27 02 FB | 	rdlong	local05, local06
0ef98     1A 2F 02 F6 | 	mov	local09, local12
0ef9c     17 29 02 F6 | 	mov	local06, local09
0efa0     02 28 66 F0 | 	shl	local06, #2
0efa4     A7 1E 02 F6 | 	mov	local01, fp
0efa8     A7 28 02 F1 | 	add	local06, fp
0efac     14 33 62 FC | 	wrlong	local11, local06
0efb0     1A 21 02 F6 | 	mov	local02, local12
0efb4     01 20 06 F1 | 	add	local02, #1
0efb8     10 39 02 F6 | 	mov	local14, local02
0efbc     02 38 66 F0 | 	shl	local14, #2
0efc0     A7 3A 02 F6 | 	mov	local15, fp
0efc4     A7 38 02 F1 | 	add	local14, fp
0efc8     1C 27 62 FC | 	wrlong	local05, local14
0efcc     01 32 66 F6 | 	neg	local11, #1
0efd0     1C 4E 85 F1 | 	sub	fp, #28
0efd4                 | LR__1296
0efd4     01 34 06 F1 | 	add	local12, #1
0efd8     48 FF 9F FD | 	jmp	#LR__1295
0efdc                 | LR__1297
0efdc                 | ' if not swapped then exit for
0efdc     19 3D 22 F6 | 	not	local16, local11
0efe0     00 3C 0E F2 | 	cmp	local16, #0 wz
0efe4     01 24 06 A1 |  if_e	add	local04, #1
0efe8     1C FF 9F AD |  if_e	jmp	#LR__1294
0efec                 | LR__1298
0efec                 | ' for i=0 to n-1
0efec     00 24 06 F6 | 	mov	local04, #0
0eff0     16 3F 02 F6 | 	mov	local17, local08
0eff4                 | LR__1299
0eff4     1F 25 52 F2 | 	cmps	local04, local17 wc
0eff8     94 00 90 3D |  if_ae	jmp	#LR__1301
0effc                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0effc     00 12 06 F6 | 	mov	arg01, #0
0f000     90 72 B1 FD | 	call	#__system___getiolock_0541
0f004     FD 12 02 F6 | 	mov	arg01, result1
0f008     24 18 B1 FD | 	call	#__system___lockmem
0f00c     12 21 02 F6 | 	mov	local02, local04
0f010     02 20 66 F0 | 	shl	local02, #2
0f014     1C 4E 05 F1 | 	add	fp, #28
0f018     A7 38 02 F6 | 	mov	local14, fp
0f01c     A7 20 02 F1 | 	add	local02, fp
0f020     10 15 02 FB | 	rdlong	arg02, local02
0f024     00 1E 06 F6 | 	mov	local01, #0
0f028     00 12 06 F6 | 	mov	arg01, #0
0f02c     00 16 06 F6 | 	mov	arg03, #0
0f030     1C 4E 85 F1 | 	sub	fp, #28
0f034     EC 24 B1 FD | 	call	#__system___basic_print_string
0f038     00 12 06 F6 | 	mov	arg01, #0
0f03c     54 72 B1 FD | 	call	#__system___getiolock_0541
0f040     FD 00 68 FC | 	wrlong	#0, result1
0f044     40 22 06 F1 | 	add	local03, #64
0f048     11 13 02 F6 | 	mov	arg01, local03
0f04c     30 FE B0 FD | 	call	#_hg010b_spin2_setcursorx
0f050     00 23 56 F2 | 	cmps	local03, #256 wc
0f054     30 00 90 CD |  if_b	jmp	#LR__1300
0f058     00 22 06 F6 | 	mov	local03, #0
0f05c     00 12 06 F6 | 	mov	arg01, #0
0f060     30 72 B1 FD | 	call	#__system___getiolock_0541
0f064     FD 12 02 F6 | 	mov	arg01, result1
0f068     C4 17 B1 FD | 	call	#__system___lockmem
0f06c     00 12 06 F6 | 	mov	arg01, #0
0f070     0A 14 06 F6 | 	mov	arg02, #10
0f074     00 16 06 F6 | 	mov	arg03, #0
0f078     50 24 B1 FD | 	call	#__system___basic_print_char
0f07c     00 12 06 F6 | 	mov	arg01, #0
0f080     10 72 B1 FD | 	call	#__system___getiolock_0541
0f084     FD 00 68 FC | 	wrlong	#0, result1
0f088                 | LR__1300
0f088     01 24 06 F1 | 	add	local04, #1
0f08c     64 FF 9F FD | 	jmp	#LR__1299
0f090                 | LR__1301
0f090                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0f090     80 2C 56 F2 | 	cmps	local08, #128 wc
0f094     44 00 90 CD |  if_b	jmp	#LR__1302
0f098     00 12 06 F6 | 	mov	arg01, #0
0f09c     F4 71 B1 FD | 	call	#__system___getiolock_0541
0f0a0     FD 12 02 F6 | 	mov	arg01, result1
0f0a4     88 17 B1 FD | 	call	#__system___lockmem
0f0a8     83 01 00 FF 
0f0ac     FC 15 06 F6 | 	mov	arg02, ##@LR__5434
0f0b0     00 12 06 F6 | 	mov	arg01, #0
0f0b4     00 16 06 F6 | 	mov	arg03, #0
0f0b8     68 24 B1 FD | 	call	#__system___basic_print_string
0f0bc     00 12 06 F6 | 	mov	arg01, #0
0f0c0     0A 14 06 F6 | 	mov	arg02, #10
0f0c4     00 16 06 F6 | 	mov	arg03, #0
0f0c8     00 24 B1 FD | 	call	#__system___basic_print_char
0f0cc     00 12 06 F6 | 	mov	arg01, #0
0f0d0     C0 71 B1 FD | 	call	#__system___getiolock_0541
0f0d4     FD 00 68 FC | 	wrlong	#0, result1
0f0d8     00 1E 06 F6 | 	mov	local01, #0
0f0dc                 | LR__1302
0f0dc                 | ' print
0f0dc     00 12 06 F6 | 	mov	arg01, #0
0f0e0     B0 71 B1 FD | 	call	#__system___getiolock_0541
0f0e4     FD 12 02 F6 | 	mov	arg01, result1
0f0e8     44 17 B1 FD | 	call	#__system___lockmem
0f0ec     00 12 06 F6 | 	mov	arg01, #0
0f0f0     0A 14 06 F6 | 	mov	arg02, #10
0f0f4     00 16 06 F6 | 	mov	arg03, #0
0f0f8     D0 23 B1 FD | 	call	#__system___basic_print_char
0f0fc     00 12 06 F6 | 	mov	arg01, #0
0f100     90 71 B1 FD | 	call	#__system___getiolock_0541
0f104     FD 00 68 FC | 	wrlong	#0, result1
0f108     00 28 06 F6 | 	mov	local06, #0
0f10c     00 2C 06 F6 | 	mov	local08, #0
0f110     00 22 06 F6 | 	mov	local03, #0
0f114                 | ' return cursor_y
0f114     3E E4 05 F1 | 	add	objptr, #62
0f118     F2 40 C2 FA | 	rdbyte	local18, objptr
0f11c     3E E4 85 F1 | 	sub	objptr, #62
0f120     84 01 00 FF 
0f124     2E 12 06 F6 | 	mov	arg01, ##@LR__5435
0f128     21 14 06 F6 | 	mov	arg02, #33
0f12c     9C 72 B1 FD | 	call	#__system___basic_dir
0f130     FD 2A 02 F6 | 	mov	local07, result1
0f134                 | ' n=0
0f134                 | ' px=0: py=v.getcursory()
0f134                 | ' filename = dir$("*", fbNormal )   
0f134                 | ' do while filename <> "" andalso filename <> nil andalso n<128
0f134                 | LR__1303
0f134     84 01 00 FF 
0f138     30 2E 06 F6 | 	mov	local09, ##@LR__5436
0f13c     15 13 02 F6 | 	mov	arg01, local07
0f140     17 15 02 F6 | 	mov	arg02, local09
0f144     10 17 B1 FD | 	call	#__system___string_cmp
0f148     00 FA 0D F2 | 	cmp	result1, #0 wz
0f14c     54 00 90 AD |  if_e	jmp	#LR__1304
0f150     00 2E 06 F6 | 	mov	local09, #0
0f154     15 13 02 F6 | 	mov	arg01, local07
0f158     00 14 06 F6 | 	mov	arg02, #0
0f15c     F8 16 B1 FD | 	call	#__system___string_cmp
0f160     00 FA 0D F2 | 	cmp	result1, #0 wz
0f164     3C 00 90 AD |  if_e	jmp	#LR__1304
0f168     80 2C 56 F2 | 	cmps	local08, #128 wc
0f16c     34 00 90 3D |  if_ae	jmp	#LR__1304
0f170     16 27 02 F6 | 	mov	local05, local08
0f174     02 26 66 F0 | 	shl	local05, #2
0f178     1C 4E 05 F1 | 	add	fp, #28
0f17c     A7 26 02 F1 | 	add	local05, fp
0f180     13 2B 62 FC | 	wrlong	local07, local05
0f184     01 2C 06 F1 | 	add	local08, #1
0f188     00 26 06 F6 | 	mov	local05, #0
0f18c     00 12 06 F6 | 	mov	arg01, #0
0f190     00 14 06 F6 | 	mov	arg02, #0
0f194     1C 4E 85 F1 | 	sub	fp, #28
0f198     30 72 B1 FD | 	call	#__system___basic_dir
0f19c     FD 2A 02 F6 | 	mov	local07, result1
0f1a0     90 FF 9F FD | 	jmp	#LR__1303
0f1a4                 | LR__1304
0f1a4                 | ' for i =0 to n-1
0f1a4     00 24 06 F6 | 	mov	local04, #0
0f1a8                 | LR__1305
0f1a8     16 25 52 F2 | 	cmps	local04, local08 wc
0f1ac     D8 00 90 3D |  if_ae	jmp	#LR__1309
0f1b0     00 32 06 F6 | 	mov	local11, #0
0f1b4                 | '   swapped=false
0f1b4                 | '   for j=0 to n-i-2
0f1b4     00 34 06 F6 | 	mov	local12, #0
0f1b8     16 43 02 F6 | 	mov	local19, local08
0f1bc     12 43 82 F1 | 	sub	local19, local04
0f1c0     01 42 86 F1 | 	sub	local19, #1
0f1c4                 | LR__1306
0f1c4     21 35 52 F2 | 	cmps	local12, local19 wc
0f1c8     AC 00 90 3D |  if_ae	jmp	#LR__1308
0f1cc                 | '     if filelist(j) > filelist(j+1) then
0f1cc     1A 2F 02 F6 | 	mov	local09, local12
0f1d0     02 2E 66 F0 | 	shl	local09, #2
0f1d4     1C 4E 05 F1 | 	add	fp, #28
0f1d8     A7 2E 02 F1 | 	add	local09, fp
0f1dc     17 13 02 FB | 	rdlong	arg01, local09
0f1e0     1A 2F 02 F6 | 	mov	local09, local12
0f1e4     01 2E 06 F1 | 	add	local09, #1
0f1e8     17 29 02 F6 | 	mov	local06, local09
0f1ec     02 28 66 F0 | 	shl	local06, #2
0f1f0     A7 1E 02 F6 | 	mov	local01, fp
0f1f4     A7 28 02 F1 | 	add	local06, fp
0f1f8     14 27 02 FB | 	rdlong	local05, local06
0f1fc     13 15 02 F6 | 	mov	arg02, local05
0f200     1C 4E 85 F1 | 	sub	fp, #28
0f204     50 16 B1 FD | 	call	#__system___string_cmp
0f208     01 FA 55 F2 | 	cmps	result1, #1 wc
0f20c     60 00 90 CD |  if_b	jmp	#LR__1307
0f210     1A 2F 02 F6 | 	mov	local09, local12
0f214     01 2E 06 F1 | 	add	local09, #1
0f218     02 2E 66 F0 | 	shl	local09, #2
0f21c     1C 4E 05 F1 | 	add	fp, #28
0f220     A7 2E 02 F1 | 	add	local09, fp
0f224     17 3D 02 FB | 	rdlong	local16, local09
0f228     1A 29 02 F6 | 	mov	local06, local12
0f22c     02 28 66 F0 | 	shl	local06, #2
0f230     A7 28 02 F1 | 	add	local06, fp
0f234     14 27 02 FB | 	rdlong	local05, local06
0f238     1A 2F 02 F6 | 	mov	local09, local12
0f23c     17 29 02 F6 | 	mov	local06, local09
0f240     02 28 66 F0 | 	shl	local06, #2
0f244     A7 1E 02 F6 | 	mov	local01, fp
0f248     A7 28 02 F1 | 	add	local06, fp
0f24c     14 3D 62 FC | 	wrlong	local16, local06
0f250     1A 39 02 F6 | 	mov	local14, local12
0f254     01 38 06 F1 | 	add	local14, #1
0f258     02 38 66 F0 | 	shl	local14, #2
0f25c     A7 3A 02 F6 | 	mov	local15, fp
0f260     A7 38 02 F1 | 	add	local14, fp
0f264     1C 27 62 FC | 	wrlong	local05, local14
0f268     01 32 66 F6 | 	neg	local11, #1
0f26c     1C 4E 85 F1 | 	sub	fp, #28
0f270                 | LR__1307
0f270     01 34 06 F1 | 	add	local12, #1
0f274     4C FF 9F FD | 	jmp	#LR__1306
0f278                 | LR__1308
0f278                 | ' if not swapped then exit for
0f278     19 3D 22 F6 | 	not	local16, local11
0f27c     00 3C 0E F2 | 	cmp	local16, #0 wz
0f280     01 24 06 A1 |  if_e	add	local04, #1
0f284     20 FF 9F AD |  if_e	jmp	#LR__1305
0f288                 | LR__1309
0f288                 | ' for i=0 to n-1
0f288     00 24 06 F6 | 	mov	local04, #0
0f28c                 | LR__1310
0f28c     16 25 52 F2 | 	cmps	local04, local08 wc
0f290     8C 00 90 3D |  if_ae	jmp	#LR__1312
0f294                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0f294     00 12 06 F6 | 	mov	arg01, #0
0f298     F8 6F B1 FD | 	call	#__system___getiolock_0541
0f29c     FD 12 02 F6 | 	mov	arg01, result1
0f2a0     8C 15 B1 FD | 	call	#__system___lockmem
0f2a4     12 21 02 F6 | 	mov	local02, local04
0f2a8     02 20 66 F0 | 	shl	local02, #2
0f2ac     1C 4E 05 F1 | 	add	fp, #28
0f2b0     A7 20 02 F1 | 	add	local02, fp
0f2b4     10 15 02 FB | 	rdlong	arg02, local02
0f2b8     00 12 06 F6 | 	mov	arg01, #0
0f2bc     00 16 06 F6 | 	mov	arg03, #0
0f2c0     1C 4E 85 F1 | 	sub	fp, #28
0f2c4     5C 22 B1 FD | 	call	#__system___basic_print_string
0f2c8     00 12 06 F6 | 	mov	arg01, #0
0f2cc     C4 6F B1 FD | 	call	#__system___getiolock_0541
0f2d0     FD 00 68 FC | 	wrlong	#0, result1
0f2d4     40 22 06 F1 | 	add	local03, #64
0f2d8     11 13 02 F6 | 	mov	arg01, local03
0f2dc     A0 FB B0 FD | 	call	#_hg010b_spin2_setcursorx
0f2e0     00 23 56 F2 | 	cmps	local03, #256 wc
0f2e4     30 00 90 CD |  if_b	jmp	#LR__1311
0f2e8     00 22 06 F6 | 	mov	local03, #0
0f2ec     00 12 06 F6 | 	mov	arg01, #0
0f2f0     A0 6F B1 FD | 	call	#__system___getiolock_0541
0f2f4     FD 12 02 F6 | 	mov	arg01, result1
0f2f8     34 15 B1 FD | 	call	#__system___lockmem
0f2fc     00 12 06 F6 | 	mov	arg01, #0
0f300     0A 14 06 F6 | 	mov	arg02, #10
0f304     00 16 06 F6 | 	mov	arg03, #0
0f308     C0 21 B1 FD | 	call	#__system___basic_print_char
0f30c     00 12 06 F6 | 	mov	arg01, #0
0f310     80 6F B1 FD | 	call	#__system___getiolock_0541
0f314     FD 00 68 FC | 	wrlong	#0, result1
0f318                 | LR__1311
0f318     01 24 06 F1 | 	add	local04, #1
0f31c     6C FF 9F FD | 	jmp	#LR__1310
0f320                 | LR__1312
0f320                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0f320     80 2C 56 F2 | 	cmps	local08, #128 wc
0f324     40 00 90 CD |  if_b	jmp	#LR__1313
0f328     00 12 06 F6 | 	mov	arg01, #0
0f32c     64 6F B1 FD | 	call	#__system___getiolock_0541
0f330     FD 12 02 F6 | 	mov	arg01, result1
0f334     F8 14 B1 FD | 	call	#__system___lockmem
0f338     84 01 00 FF 
0f33c     31 14 06 F6 | 	mov	arg02, ##@LR__5437
0f340     00 12 06 F6 | 	mov	arg01, #0
0f344     00 16 06 F6 | 	mov	arg03, #0
0f348     D8 21 B1 FD | 	call	#__system___basic_print_string
0f34c     00 12 06 F6 | 	mov	arg01, #0
0f350     0A 14 06 F6 | 	mov	arg02, #10
0f354     00 16 06 F6 | 	mov	arg03, #0
0f358     70 21 B1 FD | 	call	#__system___basic_print_char
0f35c     00 12 06 F6 | 	mov	arg01, #0
0f360     30 6F B1 FD | 	call	#__system___getiolock_0541
0f364     FD 00 68 FC | 	wrlong	#0, result1
0f368                 | LR__1313
0f368                 | ' print
0f368     00 12 06 F6 | 	mov	arg01, #0
0f36c     24 6F B1 FD | 	call	#__system___getiolock_0541
0f370     FD 12 02 F6 | 	mov	arg01, result1
0f374     B8 14 B1 FD | 	call	#__system___lockmem
0f378     00 12 06 F6 | 	mov	arg01, #0
0f37c     0A 14 06 F6 | 	mov	arg02, #10
0f380     00 16 06 F6 | 	mov	arg03, #0
0f384     44 21 B1 FD | 	call	#__system___basic_print_char
0f388     00 12 06 F6 | 	mov	arg01, #0
0f38c     04 6F B1 FD | 	call	#__system___getiolock_0541
0f390     FD 00 68 FC | 	wrlong	#0, result1
0f394     A7 F0 03 F6 | 	mov	ptra, fp
0f398     B2 00 A0 FD | 	call	#popregs_
0f39c                 | _do_dir_ret
0f39c     2D 00 64 FD | 	ret
0f3a0                 | 
0f3a0                 | ' 
0f3a0                 | ' '-------------------- dpeek
0f3a0                 | ' 
0f3a0                 | ' sub do_dpeek
0f3a0                 | _do_dpeek
0f3a0     00 4A 05 F6 | 	mov	COUNT_, #0
0f3a4     A8 00 A0 FD | 	call	#pushregs_
0f3a8     14 F0 07 F1 | 	add	ptra, #20
0f3ac     EC BF BF FD | 	call	#_pop
0f3b0     A7 FA 61 FC | 	wrlong	result1, fp
0f3b4     04 4E 05 F1 | 	add	fp, #4
0f3b8     A7 FC 61 FC | 	wrlong	result2, fp
0f3bc     04 4E 05 F1 | 	add	fp, #4
0f3c0     A7 FE 61 FC | 	wrlong	result3, fp
0f3c4     08 4E 85 F1 | 	sub	fp, #8
0f3c8     A7 12 02 F6 | 	mov	arg01, fp
0f3cc     B0 C1 BF FD | 	call	#_converttoint
0f3d0     0C 4E 05 F1 | 	add	fp, #12
0f3d4     A7 FA 61 FC | 	wrlong	result1, fp
0f3d8                 | ' 
0f3d8                 | ' t1=pop()
0f3d8                 | ' a=converttoint(t1)
0f3d8                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
0f3d8     0C 4E 85 F1 | 	sub	fp, #12
0f3dc     00 04 00 FF 
0f3e0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f3e4     1C 00 90 3D |  if_ae	jmp	#LR__1320
0f3e8     0C 4E 05 F1 | 	add	fp, #12
0f3ec     A7 12 02 FB | 	rdlong	arg01, fp
0f3f0     09 FB E1 FA | 	rdword	result1, arg01
0f3f4     04 4E 05 F1 | 	add	fp, #4
0f3f8     A7 FA 61 FC | 	wrlong	result1, fp
0f3fc     10 4E 85 F1 | 	sub	fp, #16
0f400     1C 00 90 FD | 	jmp	#LR__1321
0f404                 | LR__1320
0f404     0C 4E 05 F1 | 	add	fp, #12
0f408     A7 12 02 FB | 	rdlong	arg01, fp
0f40c     0C 4E 85 F1 | 	sub	fp, #12
0f410     78 E1 B0 FD | 	call	#_psdpeek
0f414     10 4E 05 F1 | 	add	fp, #16
0f418     A7 FA 61 FC | 	wrlong	result1, fp
0f41c     10 4E 85 F1 | 	sub	fp, #16
0f420                 | LR__1321
0f420     08 4E 05 F1 | 	add	fp, #8
0f424     A7 3A 68 FC | 	wrlong	#29, fp
0f428     08 4E 05 F1 | 	add	fp, #8
0f42c     A7 12 02 FB | 	rdlong	arg01, fp
0f430     10 4E 85 F1 | 	sub	fp, #16
0f434     A7 12 62 FC | 	wrlong	arg01, fp
0f438     A7 12 02 F6 | 	mov	arg01, fp
0f43c     F4 BF BF FD | 	call	#_push
0f440     A7 F0 03 F6 | 	mov	ptra, fp
0f444     B2 00 A0 FD | 	call	#popregs_
0f448                 | _do_dpeek_ret
0f448     2D 00 64 FD | 	ret
0f44c                 | 
0f44c                 | ' 
0f44c                 | ' '-------------------- dpoke
0f44c                 | ' 
0f44c                 | ' sub do_dpoke
0f44c                 | _do_dpoke
0f44c     01 4A 05 F6 | 	mov	COUNT_, #1
0f450     A8 00 A0 FD | 	call	#pushregs_
0f454     20 F0 07 F1 | 	add	ptra, #32
0f458     40 BF BF FD | 	call	#_pop
0f45c     FD 14 02 F6 | 	mov	arg02, result1
0f460     FE 12 02 F6 | 	mov	arg01, result2
0f464     FF 1E 02 F6 | 	mov	local01, result3
0f468     A7 14 62 FC | 	wrlong	arg02, fp
0f46c     04 4E 05 F1 | 	add	fp, #4
0f470     A7 12 62 FC | 	wrlong	arg01, fp
0f474     04 4E 05 F1 | 	add	fp, #4
0f478     A7 1E 62 FC | 	wrlong	local01, fp
0f47c     08 4E 85 F1 | 	sub	fp, #8
0f480     18 BF BF FD | 	call	#_pop
0f484     FF 1E 02 F6 | 	mov	local01, result3
0f488     0C 4E 05 F1 | 	add	fp, #12
0f48c     A7 FA 61 FC | 	wrlong	result1, fp
0f490     04 4E 05 F1 | 	add	fp, #4
0f494     A7 FC 61 FC | 	wrlong	result2, fp
0f498     04 4E 05 F1 | 	add	fp, #4
0f49c     A7 1E 62 FC | 	wrlong	local01, fp
0f4a0     08 4E 85 F1 | 	sub	fp, #8
0f4a4     A7 12 02 F6 | 	mov	arg01, fp
0f4a8     0C 4E 85 F1 | 	sub	fp, #12
0f4ac     D0 C0 BF FD | 	call	#_converttoint
0f4b0     18 4E 05 F1 | 	add	fp, #24
0f4b4     A7 FA 61 FC | 	wrlong	result1, fp
0f4b8     18 4E 85 F1 | 	sub	fp, #24
0f4bc     A7 12 02 F6 | 	mov	arg01, fp
0f4c0     BC C0 BF FD | 	call	#_converttoint
0f4c4     1C 4E 05 F1 | 	add	fp, #28
0f4c8     A7 FA 61 FC | 	wrlong	result1, fp
0f4cc                 | ' 
0f4cc                 | ' t1=pop() 'value
0f4cc                 | ' t2=pop() 
0f4cc                 | ' a=converttoint(t2) : v=converttoint(t1)
0f4cc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
0f4cc     04 4E 85 F1 | 	sub	fp, #4
0f4d0     A7 1E 02 FB | 	rdlong	local01, fp
0f4d4     18 4E 85 F1 | 	sub	fp, #24
0f4d8     00 04 00 FF 
0f4dc     00 1E 16 F2 | 	cmp	local01, ##524288 wc
0f4e0     1C 00 90 3D |  if_ae	jmp	#LR__1330
0f4e4     18 4E 05 F1 | 	add	fp, #24
0f4e8     A7 12 02 FB | 	rdlong	arg01, fp
0f4ec     04 4E 05 F1 | 	add	fp, #4
0f4f0     A7 14 02 FB | 	rdlong	arg02, fp
0f4f4     1C 4E 85 F1 | 	sub	fp, #28
0f4f8     09 15 52 FC | 	wrword	arg02, arg01
0f4fc     18 00 90 FD | 	jmp	#LR__1331
0f500                 | LR__1330
0f500     18 4E 05 F1 | 	add	fp, #24
0f504     A7 12 02 FB | 	rdlong	arg01, fp
0f508     04 4E 05 F1 | 	add	fp, #4
0f50c     A7 14 02 FB | 	rdlong	arg02, fp
0f510     1C 4E 85 F1 | 	sub	fp, #28
0f514     34 DF B0 FD | 	call	#_psdpoke
0f518                 | LR__1331
0f518     A7 F0 03 F6 | 	mov	ptra, fp
0f51c     B2 00 A0 FD | 	call	#popregs_
0f520                 | _do_dpoke_ret
0f520     2D 00 64 FD | 	ret
0f524                 | 
0f524                 | ' '-------------------- draw
0f524                 | ' 
0f524                 | ' sub do_draw
0f524                 | _do_draw
0f524     00 4A 05 F6 | 	mov	COUNT_, #0
0f528     A8 00 A0 FD | 	call	#pushregs_
0f52c     20 F0 07 F1 | 	add	ptra, #32
0f530     68 BE BF FD | 	call	#_pop
0f534     FD 1A 02 F6 | 	mov	arg05, result1
0f538     FE 18 02 F6 | 	mov	arg04, result2
0f53c     FF 16 02 F6 | 	mov	arg03, result3
0f540     0C 4E 05 F1 | 	add	fp, #12
0f544     A7 1A 62 FC | 	wrlong	arg05, fp
0f548     04 4E 05 F1 | 	add	fp, #4
0f54c     A7 18 62 FC | 	wrlong	arg04, fp
0f550     04 4E 05 F1 | 	add	fp, #4
0f554     A7 16 62 FC | 	wrlong	arg03, fp
0f558     14 4E 85 F1 | 	sub	fp, #20
0f55c     3C BE BF FD | 	call	#_pop
0f560     FF 1A 02 F6 | 	mov	arg05, result3
0f564     A7 FA 61 FC | 	wrlong	result1, fp
0f568     04 4E 05 F1 | 	add	fp, #4
0f56c     A7 FC 61 FC | 	wrlong	result2, fp
0f570     04 4E 05 F1 | 	add	fp, #4
0f574     A7 1A 62 FC | 	wrlong	arg05, fp
0f578     08 4E 85 F1 | 	sub	fp, #8
0f57c     A7 12 02 F6 | 	mov	arg01, fp
0f580     FC BF BF FD | 	call	#_converttoint
0f584     18 4E 05 F1 | 	add	fp, #24
0f588     A7 FA 61 FC | 	wrlong	result1, fp
0f58c     0C 4E 85 F1 | 	sub	fp, #12
0f590     A7 12 02 F6 | 	mov	arg01, fp
0f594     0C 4E 85 F1 | 	sub	fp, #12
0f598     E4 BF BF FD | 	call	#_converttoint
0f59c     1C 4E 05 F1 | 	add	fp, #28
0f5a0     A7 FA 61 FC | 	wrlong	result1, fp
0f5a4     37 00 00 FF 
0f5a8     2C E4 05 F1 | 	add	objptr, ##28204
0f5ac     F2 12 02 FB | 	rdlong	arg01, objptr
0f5b0     04 E4 05 F1 | 	add	objptr, #4
0f5b4     F2 14 02 FB | 	rdlong	arg02, objptr
0f5b8     04 4E 85 F1 | 	sub	fp, #4
0f5bc     A7 16 02 FB | 	rdlong	arg03, fp
0f5c0     FD 18 02 F6 | 	mov	arg04, result1
0f5c4     18 4E 85 F1 | 	sub	fp, #24
0f5c8     08 E4 85 F1 | 	sub	objptr, #8
0f5cc     F2 1A 02 FB | 	rdlong	arg05, objptr
0f5d0     37 00 00 FF 
0f5d4     28 E4 85 F1 | 	sub	objptr, ##28200
0f5d8     54 EF B0 FD | 	call	#_hg010b_spin2_draw
0f5dc     18 4E 05 F1 | 	add	fp, #24
0f5e0     A7 1A 02 FB | 	rdlong	arg05, fp
0f5e4     37 00 00 FF 
0f5e8     2C E4 05 F1 | 	add	objptr, ##28204
0f5ec     F2 1A 62 FC | 	wrlong	arg05, objptr
0f5f0     04 4E 05 F1 | 	add	fp, #4
0f5f4     A7 1A 02 FB | 	rdlong	arg05, fp
0f5f8     1C 4E 85 F1 | 	sub	fp, #28
0f5fc     04 E4 05 F1 | 	add	objptr, #4
0f600     F2 1A 62 FC | 	wrlong	arg05, objptr
0f604     37 00 00 FF 
0f608     30 E4 85 F1 | 	sub	objptr, ##28208
0f60c     A7 F0 03 F6 | 	mov	ptra, fp
0f610     B2 00 A0 FD | 	call	#popregs_
0f614                 | _do_draw_ret
0f614     2D 00 64 FD | 	ret
0f618                 | 
0f618                 | ' 
0f618                 | ' '-------------------- else
0f618                 | ' 
0f618                 | ' sub do_else
0f618                 | _do_else
0f618     4A 00 00 FF 
0f61c     7C E4 05 F1 | 	add	objptr, ##38012
0f620     F2 00 02 FB | 	rdlong	_var01, objptr
0f624     01 00 86 F1 | 	sub	_var01, #1
0f628     04 E4 05 F1 | 	add	objptr, #4
0f62c     F2 00 62 FC | 	wrlong	_var01, objptr
0f630     4A 00 00 FF 
0f634     80 E4 85 F1 | 	sub	objptr, ##38016
0f638                 | _do_else_ret
0f638     2D 00 64 FD | 	ret
0f63c                 | 
0f63c                 | ' 
0f63c                 | ' '-------------------- end
0f63c                 | ' 
0f63c                 | ' sub do_end
0f63c                 | _do_end
0f63c     4A 00 00 FF 
0f640     7C E4 05 F1 | 	add	objptr, ##38012
0f644     F2 00 02 FB | 	rdlong	_var01, objptr
0f648     01 00 86 F1 | 	sub	_var01, #1
0f64c     04 E4 05 F1 | 	add	objptr, #4
0f650     F2 00 62 FC | 	wrlong	_var01, objptr
0f654     06 00 00 FF 
0f658     38 E4 05 F1 | 	add	objptr, ##3128
0f65c     FF FF BF FF 
0f660     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0f664     50 00 00 FF 
0f668     B8 E4 85 F1 | 	sub	objptr, ##41144
0f66c                 | _do_end_ret
0f66c     2D 00 64 FD | 	ret
0f670                 | 
0f670                 | ' 
0f670                 | ' '-------------------- enter
0f670                 | ' 
0f670                 | ' sub do_enter
0f670                 | _do_enter
0f670     02 00 00 FF 
0f674     D2 12 06 F6 | 	mov	arg01, ##1234
0f678     44 22 B0 FD | 	call	#_do_load
0f67c                 | _do_enter_ret
0f67c     2D 00 64 FD | 	ret
0f680                 | 
0f680                 | ' 
0f680                 | ' '------------------- error processing
0f680                 | ' 
0f680                 | ' sub do_error
0f680                 | _do_error
0f680     01 4A 05 F6 | 	mov	COUNT_, #1
0f684     A8 00 A0 FD | 	call	#pushregs_
0f688     4A 00 00 FF 
0f68c     80 E4 05 F1 | 	add	objptr, ##38016
0f690     F2 18 02 FB | 	rdlong	arg04, objptr
0f694     0C 17 02 F6 | 	mov	arg03, arg04
0f698     01 16 66 F0 | 	shl	arg03, #1
0f69c     0C 17 02 F1 | 	add	arg03, arg04
0f6a0     02 16 66 F0 | 	shl	arg03, #2
0f6a4     03 00 00 FF 
0f6a8     04 E4 85 F1 | 	sub	objptr, ##1540
0f6ac     F2 16 02 F1 | 	add	arg03, objptr
0f6b0     0B 1F 02 FB | 	rdlong	local01, arg03
0f6b4                 | ' r=compiledline(lineptr_e).result.uresult
0f6b4                 | ' print "Error ";r;": ";errors$(r)
0f6b4     00 12 06 F6 | 	mov	arg01, #0
0f6b8     47 00 00 FF 
0f6bc     7C E4 85 F1 | 	sub	objptr, ##36476
0f6c0     D0 6B B1 FD | 	call	#__system___getiolock_0541
0f6c4     FD 12 02 F6 | 	mov	arg01, result1
0f6c8     64 11 B1 FD | 	call	#__system___lockmem
0f6cc     84 01 00 FF 
0f6d0     63 14 06 F6 | 	mov	arg02, ##@LR__5438
0f6d4     00 12 06 F6 | 	mov	arg01, #0
0f6d8     00 16 06 F6 | 	mov	arg03, #0
0f6dc     44 1E B1 FD | 	call	#__system___basic_print_string
0f6e0     00 12 06 F6 | 	mov	arg01, #0
0f6e4     0F 15 02 F6 | 	mov	arg02, local01
0f6e8     00 16 06 F6 | 	mov	arg03, #0
0f6ec     0A 18 06 F6 | 	mov	arg04, #10
0f6f0     B4 1E B1 FD | 	call	#__system___basic_print_unsigned
0f6f4     84 01 00 FF 
0f6f8     6A 14 06 F6 | 	mov	arg02, ##@LR__5439
0f6fc     00 12 06 F6 | 	mov	arg01, #0
0f700     00 16 06 F6 | 	mov	arg03, #0
0f704     1C 1E B1 FD | 	call	#__system___basic_print_string
0f708     02 1E 66 F0 | 	shl	local01, #2
0f70c     45 00 00 FF 
0f710     7C E4 05 F1 | 	add	objptr, ##35452
0f714     F2 1E 02 F1 | 	add	local01, objptr
0f718     0F 15 02 FB | 	rdlong	arg02, local01
0f71c     00 12 06 F6 | 	mov	arg01, #0
0f720     00 16 06 F6 | 	mov	arg03, #0
0f724     45 00 00 FF 
0f728     7C E4 85 F1 | 	sub	objptr, ##35452
0f72c     F4 1D B1 FD | 	call	#__system___basic_print_string
0f730     00 12 06 F6 | 	mov	arg01, #0
0f734     0A 14 06 F6 | 	mov	arg02, #10
0f738     00 16 06 F6 | 	mov	arg03, #0
0f73c     8C 1D B1 FD | 	call	#__system___basic_print_char
0f740     00 12 06 F6 | 	mov	arg01, #0
0f744     4C 6B B1 FD | 	call	#__system___getiolock_0541
0f748     FD 00 68 FC | 	wrlong	#0, result1
0f74c     A7 F0 03 F6 | 	mov	ptra, fp
0f750     B2 00 A0 FD | 	call	#popregs_
0f754                 | _do_error_ret
0f754     2D 00 64 FD | 	ret
0f758                 | 
0f758                 | ' 
0f758                 | ' '-------------------- fcircle
0f758                 | ' 
0f758                 | ' sub do_fcircle
0f758                 | _do_fcircle
0f758     02 4A 05 F6 | 	mov	COUNT_, #2
0f75c     A8 00 A0 FD | 	call	#pushregs_
0f760     24 F0 07 F1 | 	add	ptra, #36
0f764     34 BC BF FD | 	call	#_pop
0f768     FD 14 02 F6 | 	mov	arg02, result1
0f76c     FE 18 02 F6 | 	mov	arg04, result2
0f770     FF 16 02 F6 | 	mov	arg03, result3
0f774     18 4E 05 F1 | 	add	fp, #24
0f778     A7 14 62 FC | 	wrlong	arg02, fp
0f77c     04 4E 05 F1 | 	add	fp, #4
0f780     A7 18 62 FC | 	wrlong	arg04, fp
0f784     04 4E 05 F1 | 	add	fp, #4
0f788     A7 16 62 FC | 	wrlong	arg03, fp
0f78c     20 4E 85 F1 | 	sub	fp, #32
0f790     08 BC BF FD | 	call	#_pop
0f794     FD 14 02 F6 | 	mov	arg02, result1
0f798     FE 18 02 F6 | 	mov	arg04, result2
0f79c     FF 16 02 F6 | 	mov	arg03, result3
0f7a0     0C 4E 05 F1 | 	add	fp, #12
0f7a4     A7 14 62 FC | 	wrlong	arg02, fp
0f7a8     04 4E 05 F1 | 	add	fp, #4
0f7ac     A7 18 62 FC | 	wrlong	arg04, fp
0f7b0     04 4E 05 F1 | 	add	fp, #4
0f7b4     A7 16 62 FC | 	wrlong	arg03, fp
0f7b8     14 4E 85 F1 | 	sub	fp, #20
0f7bc     DC BB BF FD | 	call	#_pop
0f7c0     FF 14 02 F6 | 	mov	arg02, result3
0f7c4     A7 FA 61 FC | 	wrlong	result1, fp
0f7c8     04 4E 05 F1 | 	add	fp, #4
0f7cc     A7 FC 61 FC | 	wrlong	result2, fp
0f7d0     04 4E 05 F1 | 	add	fp, #4
0f7d4     A7 14 62 FC | 	wrlong	arg02, fp
0f7d8     08 4E 85 F1 | 	sub	fp, #8
0f7dc     A7 12 02 F6 | 	mov	arg01, fp
0f7e0     9C BD BF FD | 	call	#_converttoint
0f7e4     FD 1E 02 F6 | 	mov	local01, result1
0f7e8     0C 4E 05 F1 | 	add	fp, #12
0f7ec     A7 12 02 F6 | 	mov	arg01, fp
0f7f0     0C 4E 85 F1 | 	sub	fp, #12
0f7f4     88 BD BF FD | 	call	#_converttoint
0f7f8     FD 20 02 F6 | 	mov	local02, result1
0f7fc     18 4E 05 F1 | 	add	fp, #24
0f800     A7 12 02 F6 | 	mov	arg01, fp
0f804     18 4E 85 F1 | 	sub	fp, #24
0f808     74 BD BF FD | 	call	#_converttoint
0f80c     FD 16 02 F6 | 	mov	arg03, result1
0f810     37 00 00 FF 
0f814     28 E4 05 F1 | 	add	objptr, ##28200
0f818     F2 18 02 FB | 	rdlong	arg04, objptr
0f81c     37 00 00 FF 
0f820     28 E4 85 F1 | 	sub	objptr, ##28200
0f824     0F 13 02 F6 | 	mov	arg01, local01
0f828     10 15 02 F6 | 	mov	arg02, local02
0f82c     84 F1 B0 FD | 	call	#_hg010b_spin2_fcircle
0f830     A7 F0 03 F6 | 	mov	ptra, fp
0f834     B2 00 A0 FD | 	call	#popregs_
0f838                 | _do_fcircle_ret
0f838     2D 00 64 FD | 	ret
0f83c                 | 
0f83c                 | ' 
0f83c                 | ' '-------------------- fill
0f83c                 | ' 
0f83c                 | ' sub do_fill
0f83c                 | _do_fill
0f83c     03 4A 05 F6 | 	mov	COUNT_, #3
0f840     A8 00 A0 FD | 	call	#pushregs_
0f844     30 F0 07 F1 | 	add	ptra, #48
0f848     50 BB BF FD | 	call	#_pop
0f84c     FD 16 02 F6 | 	mov	arg03, result1
0f850     FE 14 02 F6 | 	mov	arg02, result2
0f854     FF 18 02 F6 | 	mov	arg04, result3
0f858     24 4E 05 F1 | 	add	fp, #36
0f85c     A7 16 62 FC | 	wrlong	arg03, fp
0f860     04 4E 05 F1 | 	add	fp, #4
0f864     A7 14 62 FC | 	wrlong	arg02, fp
0f868     04 4E 05 F1 | 	add	fp, #4
0f86c     A7 18 62 FC | 	wrlong	arg04, fp
0f870     2C 4E 85 F1 | 	sub	fp, #44
0f874     24 BB BF FD | 	call	#_pop
0f878     FD 16 02 F6 | 	mov	arg03, result1
0f87c     FE 14 02 F6 | 	mov	arg02, result2
0f880     FF 18 02 F6 | 	mov	arg04, result3
0f884     18 4E 05 F1 | 	add	fp, #24
0f888     A7 16 62 FC | 	wrlong	arg03, fp
0f88c     04 4E 05 F1 | 	add	fp, #4
0f890     A7 14 62 FC | 	wrlong	arg02, fp
0f894     04 4E 05 F1 | 	add	fp, #4
0f898     A7 18 62 FC | 	wrlong	arg04, fp
0f89c     20 4E 85 F1 | 	sub	fp, #32
0f8a0     F8 BA BF FD | 	call	#_pop
0f8a4     FD 16 02 F6 | 	mov	arg03, result1
0f8a8     FE 14 02 F6 | 	mov	arg02, result2
0f8ac     FF 18 02 F6 | 	mov	arg04, result3
0f8b0     0C 4E 05 F1 | 	add	fp, #12
0f8b4     A7 16 62 FC | 	wrlong	arg03, fp
0f8b8     04 4E 05 F1 | 	add	fp, #4
0f8bc     A7 14 62 FC | 	wrlong	arg02, fp
0f8c0     04 4E 05 F1 | 	add	fp, #4
0f8c4     A7 18 62 FC | 	wrlong	arg04, fp
0f8c8     14 4E 85 F1 | 	sub	fp, #20
0f8cc     CC BA BF FD | 	call	#_pop
0f8d0     FF 16 02 F6 | 	mov	arg03, result3
0f8d4     A7 FA 61 FC | 	wrlong	result1, fp
0f8d8     04 4E 05 F1 | 	add	fp, #4
0f8dc     A7 FC 61 FC | 	wrlong	result2, fp
0f8e0     04 4E 05 F1 | 	add	fp, #4
0f8e4     A7 16 62 FC | 	wrlong	arg03, fp
0f8e8     08 4E 85 F1 | 	sub	fp, #8
0f8ec     A7 12 02 F6 | 	mov	arg01, fp
0f8f0     8C BC BF FD | 	call	#_converttoint
0f8f4     FD 1E 02 F6 | 	mov	local01, result1
0f8f8     0C 4E 05 F1 | 	add	fp, #12
0f8fc     A7 12 02 F6 | 	mov	arg01, fp
0f900     0C 4E 85 F1 | 	sub	fp, #12
0f904     78 BC BF FD | 	call	#_converttoint
0f908     FD 20 02 F6 | 	mov	local02, result1
0f90c     18 4E 05 F1 | 	add	fp, #24
0f910     A7 12 02 F6 | 	mov	arg01, fp
0f914     18 4E 85 F1 | 	sub	fp, #24
0f918     64 BC BF FD | 	call	#_converttoint
0f91c     FD 22 02 F6 | 	mov	local03, result1
0f920     24 4E 05 F1 | 	add	fp, #36
0f924     A7 12 02 F6 | 	mov	arg01, fp
0f928     24 4E 85 F1 | 	sub	fp, #36
0f92c     50 BC BF FD | 	call	#_converttoint
0f930     FD 18 02 F6 | 	mov	arg04, result1
0f934     0F 13 02 F6 | 	mov	arg01, local01
0f938     10 15 02 F6 | 	mov	arg02, local02
0f93c     11 17 02 F6 | 	mov	arg03, local03
0f940     DC ED B0 FD | 	call	#_hg010b_spin2_fill
0f944     A7 F0 03 F6 | 	mov	ptra, fp
0f948     B2 00 A0 FD | 	call	#popregs_
0f94c                 | _do_fill_ret
0f94c     2D 00 64 FD | 	ret
0f950                 | 
0f950                 | ' 
0f950                 | ' '-------------------- font
0f950                 | ' 
0f950                 | ' sub do_font
0f950                 | _do_font
0f950     03 4A 05 F6 | 	mov	COUNT_, #3
0f954     A8 00 A0 FD | 	call	#pushregs_
0f958     40 BA BF FD | 	call	#_pop
0f95c     FD 1E 02 F6 | 	mov	local01, result1
0f960     FE 20 02 F6 | 	mov	local02, result2
0f964     FF 22 02 F6 | 	mov	local03, result3
0f968                 | ' 
0f968                 | ' t1=pop() 
0f968                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0f968     1E 22 0E F2 | 	cmp	local03, #30 wz
0f96c     10 00 90 5D |  if_ne	jmp	#LR__1340
0f970     0F 13 02 F6 | 	mov	arg01, local01
0f974     00 14 06 F6 | 	mov	arg02, #0
0f978     30 3F B1 FD | 	call	#__system___float_tointeger
0f97c     FD 1E 02 F6 | 	mov	local01, result1
0f980                 | LR__1340
0f980                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0f980     1F 22 0E F2 | 	cmp	local03, #31 wz
0f984     18 00 90 5D |  if_ne	jmp	#LR__1341
0f988     0F 13 02 F6 | 	mov	arg01, local01
0f98c     60 42 B1 FD | 	call	#__system____builtin_atof
0f990     FD 12 02 F6 | 	mov	arg01, result1
0f994     00 14 06 F6 | 	mov	arg02, #0
0f998     10 3F B1 FD | 	call	#__system___float_tointeger
0f99c     FD 1E 02 F6 | 	mov	local01, result1
0f9a0                 | LR__1341
0f9a0     37 00 00 FF 
0f9a4     40 E4 05 F1 | 	add	objptr, ##28224
0f9a8     F2 1E 62 FC | 	wrlong	local01, objptr
0f9ac     37 00 00 FF 
0f9b0     40 E4 85 F1 | 	sub	objptr, ##28224
0f9b4     02 1E 66 F0 | 	shl	local01, #2
0f9b8     0F 13 02 F6 | 	mov	arg01, local01
0f9bc     44 F4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0f9c0     A7 F0 03 F6 | 	mov	ptra, fp
0f9c4     B2 00 A0 FD | 	call	#popregs_
0f9c8                 | _do_font_ret
0f9c8     2D 00 64 FD | 	ret
0f9cc                 | 
0f9cc                 | ' 
0f9cc                 | ' '-------------------- for
0f9cc                 | ' 
0f9cc                 | ' sub do_for()
0f9cc                 | _do_for
0f9cc     01 4A 05 F6 | 	mov	COUNT_, #1
0f9d0     A8 00 A0 FD | 	call	#pushregs_
0f9d4     10 F0 07 F1 | 	add	ptra, #16
0f9d8     50 00 00 FF 
0f9dc     08 E5 05 F1 | 	add	objptr, ##41224
0f9e0     F2 12 02 FB | 	rdlong	arg01, objptr
0f9e4     01 12 06 F1 | 	add	arg01, #1
0f9e8     F2 12 62 FC | 	wrlong	arg01, objptr
0f9ec     50 00 00 FF 
0f9f0     08 E5 85 F1 | 	sub	objptr, ##41224
0f9f4     A4 B9 BF FD | 	call	#_pop
0f9f8     A7 FA 61 FC | 	wrlong	result1, fp
0f9fc     04 4E 05 F1 | 	add	fp, #4
0fa00     A7 FC 61 FC | 	wrlong	result2, fp
0fa04     04 4E 05 F1 | 	add	fp, #4
0fa08     A7 FE 61 FC | 	wrlong	result3, fp
0fa0c     08 4E 85 F1 | 	sub	fp, #8
0fa10     50 00 00 FF 
0fa14     08 E5 05 F1 | 	add	objptr, ##41224
0fa18     F2 12 02 FB | 	rdlong	arg01, objptr
0fa1c     09 1F 02 F6 | 	mov	local01, arg01
0fa20     02 1E 66 F0 | 	shl	local01, #2
0fa24     09 1F 02 F1 | 	add	local01, arg01
0fa28     02 1E 66 F0 | 	shl	local01, #2
0fa2c     06 00 00 FF 
0fa30     70 E4 85 F1 | 	sub	objptr, ##3184
0fa34     F2 1E 02 F1 | 	add	local01, objptr
0fa38     A7 12 02 FB | 	rdlong	arg01, fp
0fa3c     08 1E 06 F1 | 	add	local01, #8
0fa40     0F 13 62 FC | 	wrlong	arg01, local01
0fa44     4A 00 00 FF 
0fa48     98 E4 85 F1 | 	sub	objptr, ##38040
0fa4c     4C B9 BF FD | 	call	#_pop
0fa50     A7 FA 61 FC | 	wrlong	result1, fp
0fa54     04 4E 05 F1 | 	add	fp, #4
0fa58     A7 FC 61 FC | 	wrlong	result2, fp
0fa5c     04 4E 05 F1 | 	add	fp, #4
0fa60     A7 FE 61 FC | 	wrlong	result3, fp
0fa64     08 4E 85 F1 | 	sub	fp, #8
0fa68     50 00 00 FF 
0fa6c     08 E5 05 F1 | 	add	objptr, ##41224
0fa70     F2 12 02 FB | 	rdlong	arg01, objptr
0fa74     09 1F 02 F6 | 	mov	local01, arg01
0fa78     02 1E 66 F0 | 	shl	local01, #2
0fa7c     09 1F 02 F1 | 	add	local01, arg01
0fa80     02 1E 66 F0 | 	shl	local01, #2
0fa84     06 00 00 FF 
0fa88     70 E4 85 F1 | 	sub	objptr, ##3184
0fa8c     F2 1E 02 F1 | 	add	local01, objptr
0fa90     A7 12 02 F6 | 	mov	arg01, fp
0fa94     4A 00 00 FF 
0fa98     98 E4 85 F1 | 	sub	objptr, ##38040
0fa9c     E0 BA BF FD | 	call	#_converttoint
0faa0     FD 12 02 F6 | 	mov	arg01, result1
0faa4     0C 1E 06 F1 | 	add	local01, #12
0faa8     0F 13 62 FC | 	wrlong	arg01, local01
0faac     EC B8 BF FD | 	call	#_pop
0fab0     A7 FA 61 FC | 	wrlong	result1, fp
0fab4     04 4E 05 F1 | 	add	fp, #4
0fab8     A7 FC 61 FC | 	wrlong	result2, fp
0fabc     04 4E 05 F1 | 	add	fp, #4
0fac0     A7 FE 61 FC | 	wrlong	result3, fp
0fac4     08 4E 85 F1 | 	sub	fp, #8
0fac8     50 00 00 FF 
0facc     08 E5 05 F1 | 	add	objptr, ##41224
0fad0     F2 12 02 FB | 	rdlong	arg01, objptr
0fad4     09 1F 02 F6 | 	mov	local01, arg01
0fad8     02 1E 66 F0 | 	shl	local01, #2
0fadc     09 1F 02 F1 | 	add	local01, arg01
0fae0     02 1E 66 F0 | 	shl	local01, #2
0fae4     06 00 00 FF 
0fae8     70 E4 85 F1 | 	sub	objptr, ##3184
0faec     F2 1E 02 F1 | 	add	local01, objptr
0faf0     A7 12 02 F6 | 	mov	arg01, fp
0faf4     4A 00 00 FF 
0faf8     98 E4 85 F1 | 	sub	objptr, ##38040
0fafc     80 BA BF FD | 	call	#_converttoint
0fb00     10 1E 06 F1 | 	add	local01, #16
0fb04     0F FB 61 FC | 	wrlong	result1, local01
0fb08                 | ' fortop+=1
0fb08                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
0fb08                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
0fb08                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
0fb08                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
0fb08     4A 00 00 FF 
0fb0c     80 E4 05 F1 | 	add	objptr, ##38016
0fb10     F2 12 02 FB | 	rdlong	arg01, objptr
0fb14     09 1F 02 F6 | 	mov	local01, arg01
0fb18     01 1E 66 F0 | 	shl	local01, #1
0fb1c     09 1F 02 F1 | 	add	local01, arg01
0fb20     02 1E 66 F0 | 	shl	local01, #2
0fb24     03 00 00 FF 
0fb28     04 E4 85 F1 | 	sub	objptr, ##1540
0fb2c     F2 1E 02 F1 | 	add	local01, objptr
0fb30     08 1E 06 F1 | 	add	local01, #8
0fb34     0F 1F 02 FB | 	rdlong	local01, local01
0fb38     FE 1F 0E F2 | 	cmp	local01, #510 wz
0fb3c     47 00 00 FF 
0fb40     7C E4 85 F1 | 	sub	objptr, ##36476
0fb44     70 00 90 5D |  if_ne	jmp	#LR__1350
0fb48     50 00 00 FF 
0fb4c     08 E5 05 F1 | 	add	objptr, ##41224
0fb50     F2 12 02 FB | 	rdlong	arg01, objptr
0fb54     09 1F 02 F6 | 	mov	local01, arg01
0fb58     02 1E 66 F0 | 	shl	local01, #2
0fb5c     09 1F 02 F1 | 	add	local01, arg01
0fb60     02 1E 66 F0 | 	shl	local01, #2
0fb64     06 00 00 FF 
0fb68     70 E4 85 F1 | 	sub	objptr, ##3184
0fb6c     F2 1E 02 F1 | 	add	local01, objptr
0fb70     06 00 00 FF 
0fb74     20 E4 05 F1 | 	add	objptr, ##3104
0fb78     F2 12 02 FB | 	rdlong	arg01, objptr
0fb7c     0F 13 62 FC | 	wrlong	arg01, local01
0fb80     50 E4 05 F1 | 	add	objptr, #80
0fb84     F2 12 02 FB | 	rdlong	arg01, objptr
0fb88     09 1F 02 F6 | 	mov	local01, arg01
0fb8c     02 1E 66 F0 | 	shl	local01, #2
0fb90     09 1F 02 F1 | 	add	local01, arg01
0fb94     02 1E 66 F0 | 	shl	local01, #2
0fb98     06 00 00 FF 
0fb9c     70 E4 85 F1 | 	sub	objptr, ##3184
0fba0     F2 1E 02 F1 | 	add	local01, objptr
0fba4     04 1E 06 F1 | 	add	local01, #4
0fba8     0F 01 68 FC | 	wrlong	#0, local01
0fbac     4A 00 00 FF 
0fbb0     98 E4 85 F1 | 	sub	objptr, ##38040
0fbb4     78 00 90 FD | 	jmp	#LR__1351
0fbb8                 | LR__1350
0fbb8     50 00 00 FF 
0fbbc     08 E5 05 F1 | 	add	objptr, ##41224
0fbc0     F2 12 02 FB | 	rdlong	arg01, objptr
0fbc4     09 1F 02 F6 | 	mov	local01, arg01
0fbc8     02 1E 66 F0 | 	shl	local01, #2
0fbcc     09 1F 02 F1 | 	add	local01, arg01
0fbd0     02 1E 66 F0 | 	shl	local01, #2
0fbd4     06 00 00 FF 
0fbd8     70 E4 85 F1 | 	sub	objptr, ##3184
0fbdc     F2 1E 02 F1 | 	add	local01, objptr
0fbe0     06 00 00 FF 
0fbe4     28 E4 05 F1 | 	add	objptr, ##3112
0fbe8     F2 12 02 FB | 	rdlong	arg01, objptr
0fbec     0F 13 62 FC | 	wrlong	arg01, local01
0fbf0     48 E4 05 F1 | 	add	objptr, #72
0fbf4     F2 12 02 FB | 	rdlong	arg01, objptr
0fbf8     09 1F 02 F6 | 	mov	local01, arg01
0fbfc     02 1E 66 F0 | 	shl	local01, #2
0fc00     09 1F 02 F1 | 	add	local01, arg01
0fc04     02 1E 66 F0 | 	shl	local01, #2
0fc08     06 00 00 FF 
0fc0c     70 E4 85 F1 | 	sub	objptr, ##3184
0fc10     F2 1E 02 F1 | 	add	local01, objptr
0fc14     18 E4 85 F1 | 	sub	objptr, #24
0fc18     F2 12 02 FB | 	rdlong	arg01, objptr
0fc1c     4A 00 00 FF 
0fc20     80 E4 85 F1 | 	sub	objptr, ##38016
0fc24     01 12 06 F1 | 	add	arg01, #1
0fc28     04 1E 06 F1 | 	add	local01, #4
0fc2c     0F 13 62 FC | 	wrlong	arg01, local01
0fc30                 | LR__1351
0fc30     A7 F0 03 F6 | 	mov	ptra, fp
0fc34     B2 00 A0 FD | 	call	#popregs_
0fc38                 | _do_for_ret
0fc38     2D 00 64 FD | 	ret
0fc3c                 | 
0fc3c                 | ' 
0fc3c                 | ' '-------------------- frame
0fc3c                 | ' 
0fc3c                 | ' sub do_frame
0fc3c                 | _do_frame
0fc3c     03 4A 05 F6 | 	mov	COUNT_, #3
0fc40     A8 00 A0 FD | 	call	#pushregs_
0fc44     30 F0 07 F1 | 	add	ptra, #48
0fc48     50 B7 BF FD | 	call	#_pop
0fc4c     FD 16 02 F6 | 	mov	arg03, result1
0fc50     FE 14 02 F6 | 	mov	arg02, result2
0fc54     FF 1A 02 F6 | 	mov	arg05, result3
0fc58     24 4E 05 F1 | 	add	fp, #36
0fc5c     A7 16 62 FC | 	wrlong	arg03, fp
0fc60     04 4E 05 F1 | 	add	fp, #4
0fc64     A7 14 62 FC | 	wrlong	arg02, fp
0fc68     04 4E 05 F1 | 	add	fp, #4
0fc6c     A7 1A 62 FC | 	wrlong	arg05, fp
0fc70     2C 4E 85 F1 | 	sub	fp, #44
0fc74     24 B7 BF FD | 	call	#_pop
0fc78     FD 16 02 F6 | 	mov	arg03, result1
0fc7c     FE 14 02 F6 | 	mov	arg02, result2
0fc80     FF 1A 02 F6 | 	mov	arg05, result3
0fc84     18 4E 05 F1 | 	add	fp, #24
0fc88     A7 16 62 FC | 	wrlong	arg03, fp
0fc8c     04 4E 05 F1 | 	add	fp, #4
0fc90     A7 14 62 FC | 	wrlong	arg02, fp
0fc94     04 4E 05 F1 | 	add	fp, #4
0fc98     A7 1A 62 FC | 	wrlong	arg05, fp
0fc9c     20 4E 85 F1 | 	sub	fp, #32
0fca0     F8 B6 BF FD | 	call	#_pop
0fca4     FD 16 02 F6 | 	mov	arg03, result1
0fca8     FE 14 02 F6 | 	mov	arg02, result2
0fcac     FF 1A 02 F6 | 	mov	arg05, result3
0fcb0     0C 4E 05 F1 | 	add	fp, #12
0fcb4     A7 16 62 FC | 	wrlong	arg03, fp
0fcb8     04 4E 05 F1 | 	add	fp, #4
0fcbc     A7 14 62 FC | 	wrlong	arg02, fp
0fcc0     04 4E 05 F1 | 	add	fp, #4
0fcc4     A7 1A 62 FC | 	wrlong	arg05, fp
0fcc8     14 4E 85 F1 | 	sub	fp, #20
0fccc     CC B6 BF FD | 	call	#_pop
0fcd0     FF 16 02 F6 | 	mov	arg03, result3
0fcd4     A7 FA 61 FC | 	wrlong	result1, fp
0fcd8     04 4E 05 F1 | 	add	fp, #4
0fcdc     A7 FC 61 FC | 	wrlong	result2, fp
0fce0     04 4E 05 F1 | 	add	fp, #4
0fce4     A7 16 62 FC | 	wrlong	arg03, fp
0fce8     08 4E 85 F1 | 	sub	fp, #8
0fcec     A7 12 02 F6 | 	mov	arg01, fp
0fcf0     8C B8 BF FD | 	call	#_converttoint
0fcf4     FD 1E 02 F6 | 	mov	local01, result1
0fcf8     0C 4E 05 F1 | 	add	fp, #12
0fcfc     A7 12 02 F6 | 	mov	arg01, fp
0fd00     0C 4E 85 F1 | 	sub	fp, #12
0fd04     78 B8 BF FD | 	call	#_converttoint
0fd08     FD 20 02 F6 | 	mov	local02, result1
0fd0c     18 4E 05 F1 | 	add	fp, #24
0fd10     A7 12 02 F6 | 	mov	arg01, fp
0fd14     18 4E 85 F1 | 	sub	fp, #24
0fd18     64 B8 BF FD | 	call	#_converttoint
0fd1c     FD 22 02 F6 | 	mov	local03, result1
0fd20     24 4E 05 F1 | 	add	fp, #36
0fd24     A7 12 02 F6 | 	mov	arg01, fp
0fd28     24 4E 85 F1 | 	sub	fp, #36
0fd2c     50 B8 BF FD | 	call	#_converttoint
0fd30     FD 18 02 F6 | 	mov	arg04, result1
0fd34     37 00 00 FF 
0fd38     28 E4 05 F1 | 	add	objptr, ##28200
0fd3c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd40     37 00 00 FF 
0fd44     28 E4 85 F1 | 	sub	objptr, ##28200
0fd48     0F 13 02 F6 | 	mov	arg01, local01
0fd4c     10 15 02 F6 | 	mov	arg02, local02
0fd50     11 17 02 F6 | 	mov	arg03, local03
0fd54     B4 EE B0 FD | 	call	#_hg010b_spin2_frame
0fd58     A7 F0 03 F6 | 	mov	ptra, fp
0fd5c     B2 00 A0 FD | 	call	#popregs_
0fd60                 | _do_frame_ret
0fd60     2D 00 64 FD | 	ret
0fd64                 | 
0fd64                 | ' 
0fd64                 | ' '-------------------- fre
0fd64                 | ' 
0fd64                 | ' sub do_fre
0fd64                 | _do_fre
0fd64     01 4A 05 F6 | 	mov	COUNT_, #1
0fd68     A8 00 A0 FD | 	call	#pushregs_
0fd6c     0C F0 07 F1 | 	add	ptra, #12
0fd70     51 00 00 FF 
0fd74     AC E5 05 F1 | 	add	objptr, ##41900
0fd78     F2 12 02 FB | 	rdlong	arg01, objptr
0fd7c     0E 00 00 FF 
0fd80     50 E5 85 F1 | 	sub	objptr, ##7504
0fd84     F2 1E 02 FB | 	rdlong	local01, objptr
0fd88     0F 13 82 F1 | 	sub	arg01, local01
0fd8c     0E 00 00 FF 
0fd90     BC E5 05 F1 | 	add	objptr, ##7612
0fd94     F2 12 62 FC | 	wrlong	arg01, objptr
0fd98     08 4E 05 F1 | 	add	fp, #8
0fd9c     A7 3A 68 FC | 	wrlong	#29, fp
0fda0     08 4E 85 F1 | 	sub	fp, #8
0fda4     F2 1E 02 FB | 	rdlong	local01, objptr
0fda8     52 00 00 FF 
0fdac     18 E4 85 F1 | 	sub	objptr, ##42008
0fdb0     A7 1E 62 FC | 	wrlong	local01, fp
0fdb4     A7 12 02 F6 | 	mov	arg01, fp
0fdb8     78 B6 BF FD | 	call	#_push
0fdbc     A7 F0 03 F6 | 	mov	ptra, fp
0fdc0     B2 00 A0 FD | 	call	#popregs_
0fdc4                 | _do_fre_ret
0fdc4     2D 00 64 FD | 	ret
0fdc8                 | 
0fdc8                 | ' 
0fdc8                 | ' '-------------------- get
0fdc8                 | ' 
0fdc8                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
0fdc8                 | _do_get
0fdc8     09 4A 05 F6 | 	mov	COUNT_, #9
0fdcc     A8 00 A0 FD | 	call	#pushregs_
0fdd0     40 F0 07 F1 | 	add	ptra, #64
0fdd4     4A 00 00 FF 
0fdd8     80 E4 05 F1 | 	add	objptr, ##38016
0fddc     F2 1A 02 FB | 	rdlong	arg05, objptr
0fde0     0D 19 02 F6 | 	mov	arg04, arg05
0fde4     01 18 66 F0 | 	shl	arg04, #1
0fde8     0D 19 02 F1 | 	add	arg04, arg05
0fdec     02 18 66 F0 | 	shl	arg04, #2
0fdf0     03 00 00 FF 
0fdf4     04 E4 85 F1 | 	sub	objptr, ##1540
0fdf8     F2 18 02 F1 | 	add	arg04, objptr
0fdfc     0C 1B 02 FB | 	rdlong	arg05, arg04
0fe00     A7 1A 62 FC | 	wrlong	arg05, fp
0fe04                 | ' 
0fe04                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe04                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
0fe04     04 1A 0E F2 | 	cmp	arg05, #4 wz
0fe08     47 00 00 FF 
0fe0c     7C E4 85 F1 | 	sub	objptr, ##36476
0fe10     48 00 90 5D |  if_ne	jmp	#LR__1360
0fe14     84 B5 BF FD | 	call	#_pop
0fe18     FF 1A 02 F6 | 	mov	arg05, result3
0fe1c     1C 4E 05 F1 | 	add	fp, #28
0fe20     A7 FA 61 FC | 	wrlong	result1, fp
0fe24     04 4E 05 F1 | 	add	fp, #4
0fe28     A7 FC 61 FC | 	wrlong	result2, fp
0fe2c     04 4E 05 F1 | 	add	fp, #4
0fe30     A7 1A 62 FC | 	wrlong	arg05, fp
0fe34     08 4E 85 F1 | 	sub	fp, #8
0fe38     A7 12 02 F6 | 	mov	arg01, fp
0fe3c     1C 4E 85 F1 | 	sub	fp, #28
0fe40     3C B7 BF FD | 	call	#_converttoint
0fe44     52 00 00 FF 
0fe48     14 E4 05 F1 | 	add	objptr, ##42004
0fe4c     F2 FA 61 FC | 	wrlong	result1, objptr
0fe50     52 00 00 FF 
0fe54     14 E4 85 F1 | 	sub	objptr, ##42004
0fe58     18 00 90 FD | 	jmp	#LR__1361
0fe5c                 | LR__1360
0fe5c     52 00 00 FF 
0fe60     14 E4 05 F1 | 	add	objptr, ##42004
0fe64     FF FF FF FF 
0fe68     F2 FE 6B FC | 	wrlong	##-1, objptr
0fe6c     52 00 00 FF 
0fe70     14 E4 85 F1 | 	sub	objptr, ##42004
0fe74                 | LR__1361
0fe74                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
0fe74     A7 16 02 FB | 	rdlong	arg03, fp
0fe78     03 16 56 F2 | 	cmps	arg03, #3 wc
0fe7c     40 00 90 CD |  if_b	jmp	#LR__1362
0fe80     18 B5 BF FD | 	call	#_pop
0fe84     FF 16 02 F6 | 	mov	arg03, result3
0fe88     1C 4E 05 F1 | 	add	fp, #28
0fe8c     A7 FA 61 FC | 	wrlong	result1, fp
0fe90     04 4E 05 F1 | 	add	fp, #4
0fe94     A7 FC 61 FC | 	wrlong	result2, fp
0fe98     04 4E 05 F1 | 	add	fp, #4
0fe9c     A7 16 62 FC | 	wrlong	arg03, fp
0fea0     08 4E 85 F1 | 	sub	fp, #8
0fea4     A7 12 02 F6 | 	mov	arg01, fp
0fea8     1C 4E 85 F1 | 	sub	fp, #28
0feac     D0 B6 BF FD | 	call	#_converttoint
0feb0     08 4E 05 F1 | 	add	fp, #8
0feb4     A7 FA 61 FC | 	wrlong	result1, fp
0feb8     08 4E 85 F1 | 	sub	fp, #8
0febc     0C 00 90 FD | 	jmp	#LR__1363
0fec0                 | LR__1362
0fec0     08 4E 05 F1 | 	add	fp, #8
0fec4     A7 02 68 FC | 	wrlong	#1, fp
0fec8     08 4E 85 F1 | 	sub	fp, #8
0fecc                 | LR__1363
0fecc                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
0fecc     A7 16 02 FB | 	rdlong	arg03, fp
0fed0     02 16 56 F2 | 	cmps	arg03, #2 wc
0fed4     3C 00 90 CD |  if_b	jmp	#LR__1364
0fed8     C0 B4 BF FD | 	call	#_pop
0fedc     FF 16 02 F6 | 	mov	arg03, result3
0fee0     1C 4E 05 F1 | 	add	fp, #28
0fee4     A7 FA 61 FC | 	wrlong	result1, fp
0fee8     04 4E 05 F1 | 	add	fp, #4
0feec     A7 FC 61 FC | 	wrlong	result2, fp
0fef0     04 4E 05 F1 | 	add	fp, #4
0fef4     A7 16 62 FC | 	wrlong	arg03, fp
0fef8     08 4E 85 F1 | 	sub	fp, #8
0fefc     A7 12 02 F6 | 	mov	arg01, fp
0ff00     1C 4E 85 F1 | 	sub	fp, #28
0ff04     78 B6 BF FD | 	call	#_converttoint
0ff08     0C 4E 05 F1 | 	add	fp, #12
0ff0c     A7 FA 61 FC | 	wrlong	result1, fp
0ff10     0C 4E 85 F1 | 	sub	fp, #12
0ff14                 | LR__1364
0ff14     84 B4 BF FD | 	call	#_pop
0ff18     FF 16 02 F6 | 	mov	arg03, result3
0ff1c     1C 4E 05 F1 | 	add	fp, #28
0ff20     A7 FA 61 FC | 	wrlong	result1, fp
0ff24     04 4E 05 F1 | 	add	fp, #4
0ff28     A7 FC 61 FC | 	wrlong	result2, fp
0ff2c     04 4E 05 F1 | 	add	fp, #4
0ff30     A7 16 62 FC | 	wrlong	arg03, fp
0ff34     08 4E 85 F1 | 	sub	fp, #8
0ff38     A7 12 02 F6 | 	mov	arg01, fp
0ff3c     1C 4E 85 F1 | 	sub	fp, #28
0ff40     3C B6 BF FD | 	call	#_converttoint
0ff44     04 4E 05 F1 | 	add	fp, #4
0ff48     A7 FA 61 FC | 	wrlong	result1, fp
0ff4c     10 4E 05 F1 | 	add	fp, #16
0ff50     A7 16 02 FB | 	rdlong	arg03, fp
0ff54     14 4E 85 F1 | 	sub	fp, #20
0ff58     02 16 66 F0 | 	shl	arg03, #2
0ff5c     50 00 00 FF 
0ff60     C4 E4 05 F1 | 	add	objptr, ##41156
0ff64     F2 1E 02 F6 | 	mov	local01, objptr
0ff68     F2 16 02 F1 | 	add	arg03, objptr
0ff6c     0B 01 68 FC | 	wrlong	#0, arg03
0ff70                 | ' t1=pop() : channel=converttoint(t1)
0ff70                 | ' getres(j)=0
0ff70                 | ' if pos>=0 then
0ff70     01 00 00 FF 
0ff74     50 E5 05 F1 | 	add	objptr, ##848
0ff78     F2 20 02 FB | 	rdlong	local02, objptr
0ff7c     52 00 00 FF 
0ff80     14 E4 85 F1 | 	sub	objptr, ##42004
0ff84     00 20 56 F2 | 	cmps	local02, #0 wc
0ff88     F0 01 90 CD |  if_b	jmp	#LR__1371
0ff8c                 | '   for i=0 to  amount/1024
0ff8c     10 4E 05 F1 | 	add	fp, #16
0ff90     A7 00 68 FC | 	wrlong	#0, fp
0ff94     08 4E 85 F1 | 	sub	fp, #8
0ff98     A7 22 02 FB | 	rdlong	local03, fp
0ff9c     08 4E 85 F1 | 	sub	fp, #8
0ffa0     11 25 52 F6 | 	abs	local04, local03 wc
0ffa4     0A 24 46 F0 | 	shr	local04, #10
0ffa8     12 25 82 F6 | 	negc	local04, local04
0ffac     01 24 06 F1 | 	add	local04, #1
0ffb0                 | LR__1365
0ffb0     10 4E 05 F1 | 	add	fp, #16
0ffb4     A7 22 02 FB | 	rdlong	local03, fp
0ffb8     10 4E 85 F1 | 	sub	fp, #16
0ffbc     12 23 52 F2 | 	cmps	local03, local04 wc
0ffc0     9C 03 90 3D |  if_ae	jmp	#LR__1379
0ffc4                 | '     get #channel,pos+1,block(0),amount,r
0ffc4     04 4E 05 F1 | 	add	fp, #4
0ffc8     A7 12 02 FB | 	rdlong	arg01, fp
0ffcc     52 00 00 FF 
0ffd0     14 E4 05 F1 | 	add	objptr, ##42004
0ffd4     F2 14 02 FB | 	rdlong	arg02, objptr
0ffd8     01 14 06 F1 | 	add	arg02, #1
0ffdc     03 00 00 FF 
0ffe0     60 E5 85 F1 | 	sub	objptr, ##1888
0ffe4     F2 16 02 F6 | 	mov	arg03, objptr
0ffe8     4E 00 00 FF 
0ffec     B4 E4 85 F1 | 	sub	objptr, ##40116
0fff0     04 4E 05 F1 | 	add	fp, #4
0fff4     A7 18 02 FB | 	rdlong	arg04, fp
0fff8     08 4E 85 F1 | 	sub	fp, #8
0fffc     01 1A 06 F6 | 	mov	arg05, #1
10000     9C 16 B1 FD | 	call	#__system___basic_get
10004     18 4E 05 F1 | 	add	fp, #24
10008     A7 FA 61 FC | 	wrlong	result1, fp
1000c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1000c     0C 4E 85 F1 | 	sub	fp, #12
10010     A7 20 02 FB | 	rdlong	local02, fp
10014     0C 4E 85 F1 | 	sub	fp, #12
10018     00 04 00 FF 
1001c     00 20 56 F2 | 	cmps	local02, ##524288 wc
10020     7C 00 90 3D |  if_ae	jmp	#LR__1367
10024     14 4E 05 F1 | 	add	fp, #20
10028     A7 00 68 FC | 	wrlong	#0, fp
1002c     04 4E 05 F1 | 	add	fp, #4
10030     A7 26 02 FB | 	rdlong	local05, fp
10034     18 4E 85 F1 | 	sub	fp, #24
10038                 | LR__1366
10038     14 4E 05 F1 | 	add	fp, #20
1003c     A7 20 02 FB | 	rdlong	local02, fp
10040     14 4E 85 F1 | 	sub	fp, #20
10044     13 21 52 F2 | 	cmps	local02, local05 wc
10048     D8 00 90 3D |  if_ae	jmp	#LR__1370
1004c     0C 4E 05 F1 | 	add	fp, #12
10050     A7 12 02 FB | 	rdlong	arg01, fp
10054     04 4E 05 F1 | 	add	fp, #4
10058     A7 22 02 FB | 	rdlong	local03, fp
1005c     0A 22 66 F0 | 	shl	local03, #10
10060     11 13 02 F1 | 	add	arg01, local03
10064     04 4E 05 F1 | 	add	fp, #4
10068     A7 22 02 FB | 	rdlong	local03, fp
1006c     11 13 02 F1 | 	add	arg01, local03
10070     4E 00 00 FF 
10074     B4 E4 05 F1 | 	add	objptr, ##40116
10078     F2 22 02 F1 | 	add	local03, objptr
1007c     11 15 C2 FA | 	rdbyte	arg02, local03
10080     09 15 42 FC | 	wrbyte	arg02, arg01
10084     4E 00 00 FF 
10088     B4 E4 85 F1 | 	sub	objptr, ##40116
1008c     A7 22 02 FB | 	rdlong	local03, fp
10090     01 22 06 F1 | 	add	local03, #1
10094     A7 22 62 FC | 	wrlong	local03, fp
10098     14 4E 85 F1 | 	sub	fp, #20
1009c     98 FF 9F FD | 	jmp	#LR__1366
100a0                 | LR__1367
100a0     14 4E 05 F1 | 	add	fp, #20
100a4     A7 00 68 FC | 	wrlong	#0, fp
100a8     04 4E 05 F1 | 	add	fp, #4
100ac     A7 28 02 FB | 	rdlong	local06, fp
100b0     18 4E 85 F1 | 	sub	fp, #24
100b4                 | LR__1368
100b4     14 4E 05 F1 | 	add	fp, #20
100b8     A7 20 02 FB | 	rdlong	local02, fp
100bc     14 4E 85 F1 | 	sub	fp, #20
100c0     14 21 52 F2 | 	cmps	local02, local06 wc
100c4     5C 00 90 3D |  if_ae	jmp	#LR__1369
100c8     0C 4E 05 F1 | 	add	fp, #12
100cc     A7 12 02 FB | 	rdlong	arg01, fp
100d0     04 4E 05 F1 | 	add	fp, #4
100d4     A7 26 02 FB | 	rdlong	local05, fp
100d8     0A 26 66 F0 | 	shl	local05, #10
100dc     13 13 02 F1 | 	add	arg01, local05
100e0     04 4E 05 F1 | 	add	fp, #4
100e4     A7 26 02 FB | 	rdlong	local05, fp
100e8     13 13 02 F1 | 	add	arg01, local05
100ec     14 4E 85 F1 | 	sub	fp, #20
100f0     4E 00 00 FF 
100f4     B4 E4 05 F1 | 	add	objptr, ##40116
100f8     F2 26 02 F1 | 	add	local05, objptr
100fc     13 15 C2 FA | 	rdbyte	arg02, local05
10100     4E 00 00 FF 
10104     B4 E4 85 F1 | 	sub	objptr, ##40116
10108     88 D3 B0 FD | 	call	#_pspoke
1010c     14 4E 05 F1 | 	add	fp, #20
10110     A7 26 02 FB | 	rdlong	local05, fp
10114     01 26 06 F1 | 	add	local05, #1
10118     A7 26 62 FC | 	wrlong	local05, fp
1011c     14 4E 85 F1 | 	sub	fp, #20
10120     90 FF 9F FD | 	jmp	#LR__1368
10124                 | LR__1369
10124                 | LR__1370
10124     14 4E 05 F1 | 	add	fp, #20
10128     A7 28 02 FB | 	rdlong	local06, fp
1012c     14 23 02 F6 | 	mov	local03, local06
10130     02 22 66 F0 | 	shl	local03, #2
10134     50 00 00 FF 
10138     C4 E4 05 F1 | 	add	objptr, ##41156
1013c     F2 22 02 F1 | 	add	local03, objptr
10140     02 28 66 F0 | 	shl	local06, #2
10144     F2 28 02 F1 | 	add	local06, objptr
10148     14 29 02 FB | 	rdlong	local06, local06
1014c     04 4E 05 F1 | 	add	fp, #4
10150     A7 26 02 FB | 	rdlong	local05, fp
10154     13 29 02 F1 | 	add	local06, local05
10158     11 29 62 FC | 	wrlong	local06, local03
1015c     08 4E 85 F1 | 	sub	fp, #8
10160     A7 28 02 FB | 	rdlong	local06, fp
10164     01 28 06 F1 | 	add	local06, #1
10168     A7 28 62 FC | 	wrlong	local06, fp
1016c     10 4E 85 F1 | 	sub	fp, #16
10170     50 00 00 FF 
10174     C4 E4 85 F1 | 	sub	objptr, ##41156
10178     34 FE 9F FD | 	jmp	#LR__1365
1017c                 | LR__1371
1017c                 | '   for i=0 to  amount/1024
1017c     10 4E 05 F1 | 	add	fp, #16
10180     A7 00 68 FC | 	wrlong	#0, fp
10184     08 4E 85 F1 | 	sub	fp, #8
10188     A7 22 02 FB | 	rdlong	local03, fp
1018c     08 4E 85 F1 | 	sub	fp, #8
10190     11 2B 52 F6 | 	abs	local07, local03 wc
10194     0A 2A 46 F0 | 	shr	local07, #10
10198     15 2B 82 F6 | 	negc	local07, local07
1019c     01 2A 06 F1 | 	add	local07, #1
101a0                 | LR__1372
101a0     10 4E 05 F1 | 	add	fp, #16
101a4     A7 22 02 FB | 	rdlong	local03, fp
101a8     10 4E 85 F1 | 	sub	fp, #16
101ac     15 23 52 F2 | 	cmps	local03, local07 wc
101b0     AC 01 90 3D |  if_ae	jmp	#LR__1378
101b4                 | '     get #channel,,block(0),amount,r
101b4     04 4E 05 F1 | 	add	fp, #4
101b8     A7 12 02 FB | 	rdlong	arg01, fp
101bc     4E 00 00 FF 
101c0     B4 E4 05 F1 | 	add	objptr, ##40116
101c4     F2 16 02 F6 | 	mov	arg03, objptr
101c8     4E 00 00 FF 
101cc     B4 E4 85 F1 | 	sub	objptr, ##40116
101d0     04 4E 05 F1 | 	add	fp, #4
101d4     A7 18 02 FB | 	rdlong	arg04, fp
101d8     08 4E 85 F1 | 	sub	fp, #8
101dc     00 14 06 F6 | 	mov	arg02, #0
101e0     01 1A 06 F6 | 	mov	arg05, #1
101e4     B8 14 B1 FD | 	call	#__system___basic_get
101e8     18 4E 05 F1 | 	add	fp, #24
101ec     A7 FA 61 FC | 	wrlong	result1, fp
101f0                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
101f0     0C 4E 85 F1 | 	sub	fp, #12
101f4     A7 20 02 FB | 	rdlong	local02, fp
101f8     0C 4E 85 F1 | 	sub	fp, #12
101fc     00 04 00 FF 
10200     00 20 56 F2 | 	cmps	local02, ##524288 wc
10204     7C 00 90 3D |  if_ae	jmp	#LR__1374
10208     14 4E 05 F1 | 	add	fp, #20
1020c     A7 00 68 FC | 	wrlong	#0, fp
10210     04 4E 05 F1 | 	add	fp, #4
10214     A7 2C 02 FB | 	rdlong	local08, fp
10218     18 4E 85 F1 | 	sub	fp, #24
1021c                 | LR__1373
1021c     14 4E 05 F1 | 	add	fp, #20
10220     A7 20 02 FB | 	rdlong	local02, fp
10224     14 4E 85 F1 | 	sub	fp, #20
10228     16 21 52 F2 | 	cmps	local02, local08 wc
1022c     D8 00 90 3D |  if_ae	jmp	#LR__1377
10230     0C 4E 05 F1 | 	add	fp, #12
10234     A7 12 02 FB | 	rdlong	arg01, fp
10238     04 4E 05 F1 | 	add	fp, #4
1023c     A7 28 02 FB | 	rdlong	local06, fp
10240     0A 28 66 F0 | 	shl	local06, #10
10244     14 13 02 F1 | 	add	arg01, local06
10248     04 4E 05 F1 | 	add	fp, #4
1024c     A7 28 02 FB | 	rdlong	local06, fp
10250     14 13 02 F1 | 	add	arg01, local06
10254     4E 00 00 FF 
10258     B4 E4 05 F1 | 	add	objptr, ##40116
1025c     F2 28 02 F1 | 	add	local06, objptr
10260     14 15 C2 FA | 	rdbyte	arg02, local06
10264     09 15 42 FC | 	wrbyte	arg02, arg01
10268     4E 00 00 FF 
1026c     B4 E4 85 F1 | 	sub	objptr, ##40116
10270     A7 28 02 FB | 	rdlong	local06, fp
10274     01 28 06 F1 | 	add	local06, #1
10278     A7 28 62 FC | 	wrlong	local06, fp
1027c     14 4E 85 F1 | 	sub	fp, #20
10280     98 FF 9F FD | 	jmp	#LR__1373
10284                 | LR__1374
10284     14 4E 05 F1 | 	add	fp, #20
10288     A7 00 68 FC | 	wrlong	#0, fp
1028c     04 4E 05 F1 | 	add	fp, #4
10290     A7 2E 02 FB | 	rdlong	local09, fp
10294     18 4E 85 F1 | 	sub	fp, #24
10298                 | LR__1375
10298     14 4E 05 F1 | 	add	fp, #20
1029c     A7 20 02 FB | 	rdlong	local02, fp
102a0     14 4E 85 F1 | 	sub	fp, #20
102a4     17 21 52 F2 | 	cmps	local02, local09 wc
102a8     5C 00 90 3D |  if_ae	jmp	#LR__1376
102ac     0C 4E 05 F1 | 	add	fp, #12
102b0     A7 12 02 FB | 	rdlong	arg01, fp
102b4     04 4E 05 F1 | 	add	fp, #4
102b8     A7 2C 02 FB | 	rdlong	local08, fp
102bc     0A 2C 66 F0 | 	shl	local08, #10
102c0     16 13 02 F1 | 	add	arg01, local08
102c4     04 4E 05 F1 | 	add	fp, #4
102c8     A7 2C 02 FB | 	rdlong	local08, fp
102cc     16 13 02 F1 | 	add	arg01, local08
102d0     14 4E 85 F1 | 	sub	fp, #20
102d4     4E 00 00 FF 
102d8     B4 E4 05 F1 | 	add	objptr, ##40116
102dc     F2 2C 02 F1 | 	add	local08, objptr
102e0     16 15 C2 FA | 	rdbyte	arg02, local08
102e4     4E 00 00 FF 
102e8     B4 E4 85 F1 | 	sub	objptr, ##40116
102ec     A4 D1 B0 FD | 	call	#_pspoke
102f0     14 4E 05 F1 | 	add	fp, #20
102f4     A7 2C 02 FB | 	rdlong	local08, fp
102f8     01 2C 06 F1 | 	add	local08, #1
102fc     A7 2C 62 FC | 	wrlong	local08, fp
10300     14 4E 85 F1 | 	sub	fp, #20
10304     90 FF 9F FD | 	jmp	#LR__1375
10308                 | LR__1376
10308                 | LR__1377
10308     14 4E 05 F1 | 	add	fp, #20
1030c     A7 2E 02 FB | 	rdlong	local09, fp
10310     17 29 02 F6 | 	mov	local06, local09
10314     02 28 66 F0 | 	shl	local06, #2
10318     50 00 00 FF 
1031c     C4 E4 05 F1 | 	add	objptr, ##41156
10320     F2 28 02 F1 | 	add	local06, objptr
10324     02 2E 66 F0 | 	shl	local09, #2
10328     F2 2E 02 F1 | 	add	local09, objptr
1032c     17 2F 02 FB | 	rdlong	local09, local09
10330     04 4E 05 F1 | 	add	fp, #4
10334     A7 2C 02 FB | 	rdlong	local08, fp
10338     16 2F 02 F1 | 	add	local09, local08
1033c     14 2F 62 FC | 	wrlong	local09, local06
10340     08 4E 85 F1 | 	sub	fp, #8
10344     A7 2E 02 FB | 	rdlong	local09, fp
10348     01 2E 06 F1 | 	add	local09, #1
1034c     A7 2E 62 FC | 	wrlong	local09, fp
10350     10 4E 85 F1 | 	sub	fp, #16
10354     50 00 00 FF 
10358     C4 E4 85 F1 | 	sub	objptr, ##41156
1035c     40 FE 9F FD | 	jmp	#LR__1372
10360                 | LR__1378
10360                 | LR__1379
10360     A7 F0 03 F6 | 	mov	ptra, fp
10364     B2 00 A0 FD | 	call	#popregs_
10368                 | _do_get_ret
10368     2D 00 64 FD | 	ret
1036c                 | 
1036c                 | ' 
1036c                 | ' '-------------------- getenvsustain
1036c                 | ' 
1036c                 | ' sub do_getenvsustain
1036c                 | _do_getenvsustain
1036c     01 4A 05 F6 | 	mov	COUNT_, #1
10370     A8 00 A0 FD | 	call	#pushregs_
10374     10 F0 07 F1 | 	add	ptra, #16
10378     4A 00 00 FF 
1037c     80 E4 05 F1 | 	add	objptr, ##38016
10380     F2 1E 02 FB | 	rdlong	local01, objptr
10384     0F 17 02 F6 | 	mov	arg03, local01
10388     01 16 66 F0 | 	shl	arg03, #1
1038c     0F 17 02 F1 | 	add	arg03, local01
10390     02 16 66 F0 | 	shl	arg03, #2
10394     03 00 00 FF 
10398     04 E4 85 F1 | 	sub	objptr, ##1540
1039c     F2 16 02 F1 | 	add	arg03, objptr
103a0     0B 17 02 FB | 	rdlong	arg03, arg03
103a4     0C 4E 05 F1 | 	add	fp, #12
103a8     A7 16 62 FC | 	wrlong	arg03, fp
103ac                 | ' 
103ac                 | ' numpar=compiledline(lineptr_e).result.uresult
103ac                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
103ac     0C 4E 85 F1 | 	sub	fp, #12
103b0     02 16 16 F2 | 	cmp	arg03, #2 wc
103b4     47 00 00 FF 
103b8     7C E4 85 F1 | 	sub	objptr, ##36476
103bc     0C 4E 05 C1 |  if_b	add	fp, #12
103c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
103c4     0C 4E 85 C1 |  if_b	sub	fp, #12
103c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
103cc     00 12 06 F6 | 	mov	arg01, #0
103d0     C0 5E B1 FD | 	call	#__system___getiolock_0541
103d4     FD 12 02 F6 | 	mov	arg01, result1
103d8     54 04 B1 FD | 	call	#__system___lockmem
103dc     84 01 00 FF 
103e0     6D 14 06 F6 | 	mov	arg02, ##@LR__5440
103e4     00 12 06 F6 | 	mov	arg01, #0
103e8     00 16 06 F6 | 	mov	arg03, #0
103ec     34 11 B1 FD | 	call	#__system___basic_print_string
103f0     00 12 06 F6 | 	mov	arg01, #0
103f4     9C 5E B1 FD | 	call	#__system___getiolock_0541
103f8     FD 00 68 FC | 	wrlong	#0, result1
103fc     27 12 06 F6 | 	mov	arg01, #39
10400     9C CE B0 FD | 	call	#_printerror
10404     64 00 90 FD | 	jmp	#LR__1381
10408                 | LR__1380
10408     90 AF BF FD | 	call	#_pop
1040c     FD 1E 02 F6 | 	mov	local01, result1
10410     FE 16 02 F6 | 	mov	arg03, result2
10414     A7 1E 62 FC | 	wrlong	local01, fp
10418     04 4E 05 F1 | 	add	fp, #4
1041c     A7 16 62 FC | 	wrlong	arg03, fp
10420     04 4E 05 F1 | 	add	fp, #4
10424     A7 FE 61 FC | 	wrlong	result3, fp
10428     08 4E 85 F1 | 	sub	fp, #8
1042c     A7 12 02 F6 | 	mov	arg01, fp
10430     4C B1 BF FD | 	call	#_converttoint
10434     FD 1E 02 F6 | 	mov	local01, result1
10438     01 1E 66 F0 | 	shl	local01, #1
1043c     51 00 00 FF 
10440     C8 E5 05 F1 | 	add	objptr, ##41928
10444     F2 1E 02 F1 | 	add	local01, objptr
10448     0F 1F E2 FA | 	rdword	local01, local01
1044c     A7 1E 62 FC | 	wrlong	local01, fp
10450     08 4E 05 F1 | 	add	fp, #8
10454     A7 38 68 FC | 	wrlong	#28, fp
10458     08 4E 85 F1 | 	sub	fp, #8
1045c     A7 12 02 F6 | 	mov	arg01, fp
10460     51 00 00 FF 
10464     C8 E5 85 F1 | 	sub	objptr, ##41928
10468     C8 AF BF FD | 	call	#_push
1046c                 | LR__1381
1046c     A7 F0 03 F6 | 	mov	ptra, fp
10470     B2 00 A0 FD | 	call	#popregs_
10474                 | _do_getenvsustain_ret
10474     2D 00 64 FD | 	ret
10478                 | 
10478                 | ' 
10478                 | ' '-------------------- getnotevalue
10478                 | ' 
10478                 | ' sub do_getnotevalue
10478                 | _do_getnotevalue
10478     01 4A 05 F6 | 	mov	COUNT_, #1
1047c     A8 00 A0 FD | 	call	#pushregs_
10480     1C F0 07 F1 | 	add	ptra, #28
10484     14 AF BF FD | 	call	#_pop
10488     FF 14 02 F6 | 	mov	arg02, result3
1048c     10 4E 05 F1 | 	add	fp, #16
10490     A7 FA 61 FC | 	wrlong	result1, fp
10494     04 4E 05 F1 | 	add	fp, #4
10498     A7 FC 61 FC | 	wrlong	result2, fp
1049c     04 4E 05 F1 | 	add	fp, #4
104a0     A7 14 62 FC | 	wrlong	arg02, fp
104a4     08 4E 85 F1 | 	sub	fp, #8
104a8     A7 12 02 F6 | 	mov	arg01, fp
104ac     10 4E 85 F1 | 	sub	fp, #16
104b0     CC B0 BF FD | 	call	#_converttoint
104b4     FD 14 52 F6 | 	abs	arg02, result1 wc
104b8     0C 14 16 FD | 	qdiv	arg02, #12
104bc     0C 4E 05 F1 | 	add	fp, #12
104c0     A7 FA 61 FC | 	wrlong	result1, fp
104c4     14 00 00 FF 
104c8     D8 E4 05 F1 | 	add	objptr, ##10456
104cc     08 4E 85 F1 | 	sub	fp, #8
104d0     19 14 62 FD | 	getqy	arg02
104d4     0A 15 82 F6 | 	negc	arg02, arg02
104d8     02 14 66 F0 | 	shl	arg02, #2
104dc     F2 14 02 F1 | 	add	arg02, objptr
104e0     0A 15 02 FB | 	rdlong	arg02, arg02
104e4     A7 14 62 FC | 	wrlong	arg02, fp
104e8     08 4E 05 F1 | 	add	fp, #8
104ec     A7 14 02 FB | 	rdlong	arg02, fp
104f0     0A 15 52 F6 | 	abs	arg02, arg02 wc
104f4     0C 14 16 FD | 	qdiv	arg02, #12
104f8     0C 4E 85 F1 | 	sub	fp, #12
104fc     14 00 00 FF 
10500     D8 E4 85 F1 | 	sub	objptr, ##10456
10504     18 14 62 FD | 	getqx	arg02
10508     0A 13 82 F6 | 	negc	arg01, arg02
1050c     09 13 52 F6 | 	abs	arg01, arg01 wc
10510     1F 1E C6 C9 |  if_b	decod	local01, #31
10514     00 1E 06 36 |  if_ae	mov	local01, #0
10518     C4 2A B1 FD | 	call	#__system___float_fromuns
1051c     0F FB 61 F5 | 	xor	result1, local01
10520     08 4E 05 F1 | 	add	fp, #8
10524     A7 FA 61 FC | 	wrlong	result1, fp
10528     FD 14 02 F6 | 	mov	arg02, result1
1052c     08 4E 85 F1 | 	sub	fp, #8
10530     1E 12 C6 F9 | 	decod	arg01, #30
10534     B4 3D B1 FD | 	call	#__system____builtin_powf
10538     FD 12 02 F6 | 	mov	arg01, result1
1053c     04 4E 05 F1 | 	add	fp, #4
10540     A7 14 02 FB | 	rdlong	arg02, fp
10544     04 4E 85 F1 | 	sub	fp, #4
10548     98 2E B1 FD | 	call	#__system___float_mul
1054c     A7 FA 61 FC | 	wrlong	result1, fp
10550     10 4E 05 F1 | 	add	fp, #16
10554     A7 FA 61 FC | 	wrlong	result1, fp
10558     08 4E 05 F1 | 	add	fp, #8
1055c     A7 3C 68 FC | 	wrlong	#30, fp
10560     08 4E 85 F1 | 	sub	fp, #8
10564     A7 12 02 F6 | 	mov	arg01, fp
10568     10 4E 85 F1 | 	sub	fp, #16
1056c     C4 AE BF FD | 	call	#_push
10570     A7 F0 03 F6 | 	mov	ptra, fp
10574     B2 00 A0 FD | 	call	#popregs_
10578                 | _do_getnotevalue_ret
10578     2D 00 64 FD | 	ret
1057c                 | 
1057c                 | ' 
1057c                 | ' '-------------------- getpixel
1057c                 | ' 
1057c                 | ' sub do_getpixel
1057c                 | _do_getpixel
1057c     00 4A 05 F6 | 	mov	COUNT_, #0
10580     A8 00 A0 FD | 	call	#pushregs_
10584     24 F0 07 F1 | 	add	ptra, #36
10588     4A 00 00 FF 
1058c     80 E4 05 F1 | 	add	objptr, ##38016
10590     F2 16 02 FB | 	rdlong	arg03, objptr
10594     0B 15 02 F6 | 	mov	arg02, arg03
10598     01 14 66 F0 | 	shl	arg02, #1
1059c     0B 15 02 F1 | 	add	arg02, arg03
105a0     02 14 66 F0 | 	shl	arg02, #2
105a4     03 00 00 FF 
105a8     04 E4 85 F1 | 	sub	objptr, ##1540
105ac     F2 14 02 F1 | 	add	arg02, objptr
105b0     0A 17 02 FB | 	rdlong	arg03, arg02
105b4     18 4E 05 F1 | 	add	fp, #24
105b8     A7 16 62 FC | 	wrlong	arg03, fp
105bc                 | ' 
105bc                 | ' numpar=compiledline(lineptr_e).result.uresult
105bc                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
105bc     18 4E 85 F1 | 	sub	fp, #24
105c0     02 16 0E F2 | 	cmp	arg03, #2 wz
105c4     47 00 00 FF 
105c8     7C E4 85 F1 | 	sub	objptr, ##36476
105cc     3C 00 90 AD |  if_e	jmp	#LR__1390
105d0     00 12 06 F6 | 	mov	arg01, #0
105d4     BC 5C B1 FD | 	call	#__system___getiolock_0541
105d8     FD 12 02 F6 | 	mov	arg01, result1
105dc     50 02 B1 FD | 	call	#__system___lockmem
105e0     84 01 00 FF 
105e4     7D 14 06 F6 | 	mov	arg02, ##@LR__5441
105e8     00 12 06 F6 | 	mov	arg01, #0
105ec     00 16 06 F6 | 	mov	arg03, #0
105f0     30 0F B1 FD | 	call	#__system___basic_print_string
105f4     00 12 06 F6 | 	mov	arg01, #0
105f8     98 5C B1 FD | 	call	#__system___getiolock_0541
105fc     FD 00 68 FC | 	wrlong	#0, result1
10600     27 12 06 F6 | 	mov	arg01, #39
10604     98 CC B0 FD | 	call	#_printerror
10608     B4 00 90 FD | 	jmp	#LR__1391
1060c                 | LR__1390
1060c     8C AD BF FD | 	call	#_pop
10610     FD 16 02 F6 | 	mov	arg03, result1
10614     FE 14 02 F6 | 	mov	arg02, result2
10618     FF 12 02 F6 | 	mov	arg01, result3
1061c     0C 4E 05 F1 | 	add	fp, #12
10620     A7 16 62 FC | 	wrlong	arg03, fp
10624     04 4E 05 F1 | 	add	fp, #4
10628     A7 14 62 FC | 	wrlong	arg02, fp
1062c     04 4E 05 F1 | 	add	fp, #4
10630     A7 12 62 FC | 	wrlong	arg01, fp
10634     14 4E 85 F1 | 	sub	fp, #20
10638     60 AD BF FD | 	call	#_pop
1063c     FF 16 02 F6 | 	mov	arg03, result3
10640     A7 FA 61 FC | 	wrlong	result1, fp
10644     04 4E 05 F1 | 	add	fp, #4
10648     A7 FC 61 FC | 	wrlong	result2, fp
1064c     04 4E 05 F1 | 	add	fp, #4
10650     A7 16 62 FC | 	wrlong	arg03, fp
10654     08 4E 85 F1 | 	sub	fp, #8
10658     A7 12 02 F6 | 	mov	arg01, fp
1065c     20 AF BF FD | 	call	#_converttoint
10660     1C 4E 05 F1 | 	add	fp, #28
10664     A7 FA 61 FC | 	wrlong	result1, fp
10668     10 4E 85 F1 | 	sub	fp, #16
1066c     A7 12 02 F6 | 	mov	arg01, fp
10670     0C 4E 85 F1 | 	sub	fp, #12
10674     08 AF BF FD | 	call	#_converttoint
10678     FD 16 02 F6 | 	mov	arg03, result1
1067c     20 4E 05 F1 | 	add	fp, #32
10680     A7 16 62 FC | 	wrlong	arg03, fp
10684     F2 12 02 FB | 	rdlong	arg01, objptr
10688     04 4E 85 F1 | 	sub	fp, #4
1068c     A7 FE 01 FB | 	rdlong	result3, fp
10690     FF 12 02 F1 | 	add	arg01, result3
10694     1C 4E 85 F1 | 	sub	fp, #28
10698     0A 16 66 F0 | 	shl	arg03, #10
1069c     0B 13 02 F1 | 	add	arg01, arg03
106a0     38 CE B0 FD | 	call	#_pspeek
106a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
106a8     A7 FA 61 FC | 	wrlong	result1, fp
106ac     08 4E 05 F1 | 	add	fp, #8
106b0     A7 3A 68 FC | 	wrlong	#29, fp
106b4     08 4E 85 F1 | 	sub	fp, #8
106b8     A7 12 02 F6 | 	mov	arg01, fp
106bc     74 AD BF FD | 	call	#_push
106c0                 | LR__1391
106c0     A7 F0 03 F6 | 	mov	ptra, fp
106c4     B2 00 A0 FD | 	call	#popregs_
106c8                 | _do_getpixel_ret
106c8     2D 00 64 FD | 	ret
106cc                 | 
106cc                 | ' 
106cc                 | ' '-------------------- gettime
106cc                 | ' 
106cc                 | ' sub do_gettime
106cc                 | _do_gettime
106cc     02 4A 05 F6 | 	mov	COUNT_, #2
106d0     A8 00 A0 FD | 	call	#pushregs_
106d4     14 F0 07 F1 | 	add	ptra, #20
106d8                 | ' 
106d8                 | ' const asm 
106d8     1A 1E 72 FD | 	getct	local01 wc
106dc     1A 20 62 FD | 	getct	local02
106e0                 | ' return hi1, lo1
106e0     10 FD 01 F6 | 	mov	result2, local02
106e4     A7 1E 62 FC | 	wrlong	local01, fp
106e8     04 4E 05 F1 | 	add	fp, #4
106ec     A7 FC 61 FC | 	wrlong	result2, fp
106f0     0C 4E 05 F1 | 	add	fp, #12
106f4     A7 3A 68 FC | 	wrlong	#29, fp
106f8     0C 4E 85 F1 | 	sub	fp, #12
106fc     A7 12 02 FB | 	rdlong	arg01, fp
10700     04 4E 05 F1 | 	add	fp, #4
10704     A7 12 62 FC | 	wrlong	arg01, fp
10708     08 4E 85 F1 | 	sub	fp, #8
1070c     A7 12 02 FB | 	rdlong	arg01, fp
10710     0C 4E 05 F1 | 	add	fp, #12
10714     A7 12 62 FC | 	wrlong	arg01, fp
10718     04 4E 85 F1 | 	sub	fp, #4
1071c     A7 12 02 F6 | 	mov	arg01, fp
10720     08 4E 85 F1 | 	sub	fp, #8
10724     0C AD BF FD | 	call	#_push
10728     A7 F0 03 F6 | 	mov	ptra, fp
1072c     B2 00 A0 FD | 	call	#popregs_
10730                 | _do_gettime_ret
10730     2D 00 64 FD | 	ret
10734                 | 
10734                 | ' 
10734                 | ' '-------------------- gosub
10734                 | ' 
10734                 | ' sub do_gosub()
10734                 | _do_gosub
10734     50 00 00 FF 
10738     0C E5 05 F1 | 	add	objptr, ##41228
1073c     F2 00 02 FB | 	rdlong	_var01, objptr
10740     01 00 06 F1 | 	add	_var01, #1
10744     F2 00 62 FC | 	wrlong	_var01, objptr
10748                 | ' gosubtop+=1
10748                 | ' if compiledline(lineptr_e+1).result_type=token_end then
10748     06 00 00 FF 
1074c     8C E4 85 F1 | 	sub	objptr, ##3212
10750     F2 00 02 FB | 	rdlong	_var01, objptr
10754     01 00 06 F1 | 	add	_var01, #1
10758     00 03 02 F6 | 	mov	_var02, _var01
1075c     01 02 66 F0 | 	shl	_var02, #1
10760     00 03 02 F1 | 	add	_var02, _var01
10764     02 02 66 F0 | 	shl	_var02, #2
10768     03 00 00 FF 
1076c     04 E4 85 F1 | 	sub	objptr, ##1540
10770     F2 02 02 F1 | 	add	_var02, objptr
10774     08 02 06 F1 | 	add	_var02, #8
10778     01 03 02 FB | 	rdlong	_var02, _var02
1077c     FE 03 0E F2 | 	cmp	_var02, #510 wz
10780     47 00 00 FF 
10784     7C E4 85 F1 | 	sub	objptr, ##36476
10788     58 00 90 5D |  if_ne	jmp	#LR__1400
1078c     50 00 00 FF 
10790     0C E5 05 F1 | 	add	objptr, ##41228
10794     F2 02 02 FB | 	rdlong	_var02, objptr
10798     03 02 66 F0 | 	shl	_var02, #3
1079c     03 00 00 FF 
107a0     60 E5 85 F1 | 	sub	objptr, ##1888
107a4     F2 02 02 F1 | 	add	_var02, objptr
107a8     03 00 00 FF 
107ac     0C E5 05 F1 | 	add	objptr, ##1804
107b0     F2 00 02 FB | 	rdlong	_var01, objptr
107b4     01 01 62 FC | 	wrlong	_var01, _var02
107b8     54 E4 05 F1 | 	add	objptr, #84
107bc     F2 02 02 FB | 	rdlong	_var02, objptr
107c0     03 02 66 F0 | 	shl	_var02, #3
107c4     03 00 00 FF 
107c8     60 E5 85 F1 | 	sub	objptr, ##1888
107cc     F2 02 02 F1 | 	add	_var02, objptr
107d0     04 02 06 F1 | 	add	_var02, #4
107d4     01 01 68 FC | 	wrlong	#0, _var02
107d8     4C 00 00 FF 
107dc     AC E5 85 F1 | 	sub	objptr, ##39340
107e0     64 00 90 FD | 	jmp	#LR__1401
107e4                 | LR__1400
107e4     50 00 00 FF 
107e8     0C E5 05 F1 | 	add	objptr, ##41228
107ec     F2 02 02 FB | 	rdlong	_var02, objptr
107f0     03 02 66 F0 | 	shl	_var02, #3
107f4     03 00 00 FF 
107f8     60 E5 85 F1 | 	sub	objptr, ##1888
107fc     F2 02 02 F1 | 	add	_var02, objptr
10800     03 00 00 FF 
10804     14 E5 05 F1 | 	add	objptr, ##1812
10808     F2 00 02 FB | 	rdlong	_var01, objptr
1080c     01 01 62 FC | 	wrlong	_var01, _var02
10810     4C E4 05 F1 | 	add	objptr, #76
10814     F2 02 02 FB | 	rdlong	_var02, objptr
10818     03 02 66 F0 | 	shl	_var02, #3
1081c     03 00 00 FF 
10820     60 E5 85 F1 | 	sub	objptr, ##1888
10824     F2 02 02 F1 | 	add	_var02, objptr
10828     02 00 00 FF 
1082c     2C E5 85 F1 | 	sub	objptr, ##1324
10830     F2 00 02 FB | 	rdlong	_var01, objptr
10834     4A 00 00 FF 
10838     80 E4 85 F1 | 	sub	objptr, ##38016
1083c     02 00 06 F1 | 	add	_var01, #2
10840     04 02 06 F1 | 	add	_var02, #4
10844     01 01 62 FC | 	wrlong	_var01, _var02
10848                 | LR__1401
10848                 | _do_gosub_ret
10848     2D 00 64 FD | 	ret
1084c                 | 
1084c                 | ' 
1084c                 | ' '--------------------- goto
1084c                 | ' 
1084c                 | ' '------- fast goto
1084c                 | ' 
1084c                 | ' sub do_fast_goto
1084c                 | _do_fast_goto
1084c     02 4A 05 F6 | 	mov	COUNT_, #2
10850     A8 00 A0 FD | 	call	#pushregs_
10854                 | _do_fast_goto_enter
10854     4A 00 00 FF 
10858     80 E4 05 F1 | 	add	objptr, ##38016
1085c     F2 12 02 FB | 	rdlong	arg01, objptr
10860     09 1F 02 F6 | 	mov	local01, arg01
10864     01 1E 66 F0 | 	shl	local01, #1
10868     09 1F 02 F1 | 	add	local01, arg01
1086c     02 1E 66 F0 | 	shl	local01, #2
10870     03 00 00 FF 
10874     04 E4 85 F1 | 	sub	objptr, ##1540
10878     F2 1E 02 F1 | 	add	local01, objptr
1087c     0F 21 02 FB | 	rdlong	local02, local01
10880     10 13 02 F6 | 	mov	arg01, local02
10884     47 00 00 FF 
10888     7C E4 85 F1 | 	sub	objptr, ##36476
1088c     A4 CC B0 FD | 	call	#_pslpeek
10890     FD 12 02 F6 | 	mov	arg01, result1
10894                 | ' 
10894                 | ' testptr=compiledline(lineptr_e).result.uresult
10894                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
10894                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
10894     4A 00 00 FF 
10898     80 E4 05 F1 | 	add	objptr, ##38016
1089c     F2 FA 01 FB | 	rdlong	result1, objptr
108a0     FD 1E 02 F6 | 	mov	local01, result1
108a4     01 1E 66 F0 | 	shl	local01, #1
108a8     FD 1E 02 F1 | 	add	local01, result1
108ac     02 1E 66 F0 | 	shl	local01, #2
108b0     03 00 00 FF 
108b4     04 E4 85 F1 | 	sub	objptr, ##1540
108b8     F2 1E 02 F1 | 	add	local01, objptr
108bc     04 1E 06 F1 | 	add	local01, #4
108c0     0F 1F 02 FB | 	rdlong	local01, local01
108c4     0F 13 0A F2 | 	cmp	arg01, local01 wz
108c8     47 00 00 FF 
108cc     7C E4 85 F1 | 	sub	objptr, ##36476
108d0     58 00 90 5D |  if_ne	jmp	#LR__1410
108d4     50 00 00 FF 
108d8     B8 E4 05 F1 | 	add	objptr, ##41144
108dc     F2 20 62 FC | 	wrlong	local02, objptr
108e0     06 00 00 FF 
108e4     3C E4 85 F1 | 	sub	objptr, ##3132
108e8     F2 20 02 FB | 	rdlong	local02, objptr
108ec     01 20 86 F1 | 	sub	local02, #1
108f0     04 E4 05 F1 | 	add	objptr, #4
108f4     F2 20 62 FC | 	wrlong	local02, objptr
108f8                 | '   runptr=testptr
108f8                 | '   lineptr_e=lineptr-1
108f8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
108f8     06 00 00 FF 
108fc     84 E4 05 F1 | 	add	objptr, ##3204
10900     F2 20 02 FB | 	rdlong	local02, objptr
10904     50 00 00 FF 
10908     04 E5 85 F1 | 	sub	objptr, ##41220
1090c     FF FF 3F FF 
10910     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10914     50 00 00 AF 
10918     04 E5 05 A1 |  if_e	add	objptr, ##41220
1091c     F2 00 68 AC |  if_e	wrlong	#0, objptr
10920     50 00 00 AF 
10924     04 E5 85 A1 |  if_e	sub	objptr, ##41220
10928     04 00 90 FD | 	jmp	#LR__1411
1092c                 | LR__1410
1092c     0C 00 B0 FD | 	call	#_do_find_goto
10930                 | LR__1411
10930     A7 F0 03 F6 | 	mov	ptra, fp
10934     B2 00 A0 FD | 	call	#popregs_
10938                 | _do_fast_goto_ret
10938     2D 00 64 FD | 	ret
1093c                 | 
1093c                 | ' 
1093c                 | ' '------- find goto  
1093c                 | ' 
1093c                 | ' sub do_find_goto
1093c                 | _do_find_goto
1093c     03 4A 05 F6 | 	mov	COUNT_, #3
10940     A8 00 A0 FD | 	call	#pushregs_
10944     24 F0 07 F1 | 	add	ptra, #36
10948                 | _do_find_goto_enter
10948     4A 00 00 FF 
1094c     80 E4 05 F1 | 	add	objptr, ##38016
10950     F2 1E 02 FB | 	rdlong	local01, objptr
10954     0F 21 02 F6 | 	mov	local02, local01
10958     01 20 66 F0 | 	shl	local02, #1
1095c     0F 21 02 F1 | 	add	local02, local01
10960     02 20 66 F0 | 	shl	local02, #2
10964     03 00 00 FF 
10968     04 E4 85 F1 | 	sub	objptr, ##1540
1096c     F2 20 02 F1 | 	add	local02, objptr
10970     04 20 06 F1 | 	add	local02, #4
10974     10 21 02 FB | 	rdlong	local02, local02
10978     A7 20 62 FC | 	wrlong	local02, fp
1097c     03 00 00 FF 
10980     0C E4 05 F1 | 	add	objptr, ##1548
10984     F2 22 02 FB | 	rdlong	local03, objptr
10988     4A 00 00 FF 
1098c     88 E4 85 F1 | 	sub	objptr, ##38024
10990     04 4E 05 F1 | 	add	fp, #4
10994     A7 22 62 FC | 	wrlong	local03, fp
10998     04 4E 85 F1 | 	sub	fp, #4
1099c                 | ' 
1099c                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
1099c                 | ' gotoptr=programstart
1099c                 | ' do
1099c                 | LR__1420
1099c     0C 4E 05 F1 | 	add	fp, #12
109a0     A7 12 02 F6 | 	mov	arg01, fp
109a4     08 4E 85 F1 | 	sub	fp, #8
109a8     A7 14 02 FB | 	rdlong	arg02, fp
109ac     04 4E 85 F1 | 	sub	fp, #4
109b0     18 16 06 F6 | 	mov	arg03, #24
109b4     0B 00 00 FF 
109b8     CC E4 05 F1 | 	add	objptr, ##5836
109bc     30 F2 B0 FD | 	call	#_psram_spin2_read1
109c0     0B 00 00 FF 
109c4     CC E4 85 F1 | 	sub	objptr, ##5836
109c8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
109c8                 | '   if gotoheader(0)<>$FFFFFFFF then
109c8     0C 4E 05 F1 | 	add	fp, #12
109cc     A7 22 02 FB | 	rdlong	local03, fp
109d0     0C 4E 85 F1 | 	sub	fp, #12
109d4     FF FF 7F FF 
109d8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
109dc     24 00 90 AD |  if_e	jmp	#LR__1421
109e0     04 4E 05 F1 | 	add	fp, #4
109e4     A7 22 02 FB | 	rdlong	local03, fp
109e8     04 4E 05 F1 | 	add	fp, #4
109ec     A7 22 62 FC | 	wrlong	local03, fp
109f0     18 4E 05 F1 | 	add	fp, #24
109f4     A7 22 02 FB | 	rdlong	local03, fp
109f8     1C 4E 85 F1 | 	sub	fp, #28
109fc     A7 22 62 FC | 	wrlong	local03, fp
10a00     04 4E 85 F1 | 	sub	fp, #4
10a04                 | LR__1421
10a04     20 4E 05 F1 | 	add	fp, #32
10a08     A7 22 02 FB | 	rdlong	local03, fp
10a0c     20 4E 85 F1 | 	sub	fp, #32
10a10     FF FF 3F FF 
10a14     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
10a18     0C 4E 05 51 |  if_ne	add	fp, #12
10a1c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10a20     0C 4E 85 51 |  if_ne	sub	fp, #12
10a24     FF FF 7F 5F 
10a28     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
10a2c     18 00 90 AD |  if_e	jmp	#LR__1422
10a30     0C 4E 05 F1 | 	add	fp, #12
10a34     A7 22 02 FB | 	rdlong	local03, fp
10a38     0C 4E 85 F1 | 	sub	fp, #12
10a3c     A7 20 02 FB | 	rdlong	local02, fp
10a40     10 23 0A F2 | 	cmp	local03, local02 wz
10a44     54 FF 9F 5D |  if_ne	jmp	#LR__1420
10a48                 | LR__1422
10a48                 | ' 
10a48                 | ' if gotoheader(0)=gotoline then
10a48     0C 4E 05 F1 | 	add	fp, #12
10a4c     A7 22 02 FB | 	rdlong	local03, fp
10a50     0C 4E 85 F1 | 	sub	fp, #12
10a54     A7 1E 02 FB | 	rdlong	local01, fp
10a58     0F 23 0A F2 | 	cmp	local03, local01 wz
10a5c     D8 00 90 5D |  if_ne	jmp	#LR__1423
10a60     4A 00 00 FF 
10a64     80 E4 05 F1 | 	add	objptr, ##38016
10a68     F2 1E 02 FB | 	rdlong	local01, objptr
10a6c     0F 21 02 F6 | 	mov	local02, local01
10a70     01 20 66 F0 | 	shl	local02, #1
10a74     0F 21 02 F1 | 	add	local02, local01
10a78     02 20 66 F0 | 	shl	local02, #2
10a7c     03 00 00 FF 
10a80     04 E4 85 F1 | 	sub	objptr, ##1540
10a84     F2 20 02 F1 | 	add	local02, objptr
10a88     08 4E 05 F1 | 	add	fp, #8
10a8c     A7 22 02 FB | 	rdlong	local03, fp
10a90     10 23 62 FC | 	wrlong	local03, local02
10a94     03 00 00 FF 
10a98     04 E4 05 F1 | 	add	objptr, ##1540
10a9c     F2 1E 02 FB | 	rdlong	local01, objptr
10aa0     0F 21 02 F6 | 	mov	local02, local01
10aa4     01 20 66 F0 | 	shl	local02, #1
10aa8     0F 21 02 F1 | 	add	local02, local01
10aac     02 20 66 F0 | 	shl	local02, #2
10ab0     03 00 00 FF 
10ab4     04 E4 85 F1 | 	sub	objptr, ##1540
10ab8     F2 20 02 F1 | 	add	local02, objptr
10abc     08 20 06 F1 | 	add	local02, #8
10ac0     10 9D 68 FC | 	wrlong	#78, local02
10ac4     03 00 00 FF 
10ac8     04 E4 05 F1 | 	add	objptr, ##1540
10acc     F2 20 02 FB | 	rdlong	local02, objptr
10ad0     10 13 02 F6 | 	mov	arg01, local02
10ad4     01 12 66 F0 | 	shl	arg01, #1
10ad8     10 13 02 F1 | 	add	arg01, local02
10adc     02 12 66 F0 | 	shl	arg01, #2
10ae0     03 00 00 FF 
10ae4     04 E4 85 F1 | 	sub	objptr, ##1540
10ae8     F2 12 02 F1 | 	add	arg01, objptr
10aec     09 00 00 FF 
10af0     44 E4 05 F1 | 	add	objptr, ##4676
10af4     F2 14 02 FB | 	rdlong	arg02, objptr
10af8     02 22 06 F6 | 	mov	local03, #2
10afc     10 23 02 F1 | 	add	local03, local02
10b00     0B 00 00 FF 
10b04     5C E4 85 F1 | 	sub	objptr, ##5724
10b08     F2 16 02 FB | 	rdlong	arg03, objptr
10b0c     0B 23 02 FD | 	qmul	local03, arg03
10b10     08 4E 85 F1 | 	sub	fp, #8
10b14     39 00 00 FF 
10b18     98 E5 85 F1 | 	sub	objptr, ##29592
10b1c     18 22 62 FD | 	getqx	local03
10b20     11 15 02 F1 | 	add	arg02, local03
10b24     64 F1 B0 FD | 	call	#_psram_spin2_write
10b28     0B 00 00 FF 
10b2c     CC E4 85 F1 | 	sub	objptr, ##5836
10b30     18 FD BF FD | 	call	#_do_fast_goto
10b34     08 00 90 FD | 	jmp	#LR__1424
10b38                 | LR__1423
10b38     26 12 06 F6 | 	mov	arg01, #38
10b3c     60 C7 B0 FD | 	call	#_printerror
10b40                 | LR__1424
10b40     A7 F0 03 F6 | 	mov	ptra, fp
10b44     B2 00 A0 FD | 	call	#popregs_
10b48                 | _do_find_goto_ret
10b48     2D 00 64 FD | 	ret
10b4c                 | 
10b4c                 | ' 
10b4c                 | ' '------- slow goto  
10b4c                 | ' 
10b4c                 | ' sub do_slow_goto
10b4c                 | _do_slow_goto
10b4c     02 4A 05 F6 | 	mov	COUNT_, #2
10b50     A8 00 A0 FD | 	call	#pushregs_
10b54     30 F0 07 F1 | 	add	ptra, #48
10b58     40 A8 BF FD | 	call	#_pop
10b5c     FF 1E 02 F6 | 	mov	local01, result3
10b60     24 4E 05 F1 | 	add	fp, #36
10b64     A7 FA 61 FC | 	wrlong	result1, fp
10b68     04 4E 05 F1 | 	add	fp, #4
10b6c     A7 FC 61 FC | 	wrlong	result2, fp
10b70     04 4E 05 F1 | 	add	fp, #4
10b74     A7 1E 62 FC | 	wrlong	local01, fp
10b78     08 4E 85 F1 | 	sub	fp, #8
10b7c     A7 12 02 F6 | 	mov	arg01, fp
10b80     24 4E 85 F1 | 	sub	fp, #36
10b84     F8 A9 BF FD | 	call	#_converttoint
10b88     A7 FA 61 FC | 	wrlong	result1, fp
10b8c     4A 00 00 FF 
10b90     88 E4 05 F1 | 	add	objptr, ##38024
10b94     F2 20 02 FB | 	rdlong	local02, objptr
10b98     4A 00 00 FF 
10b9c     88 E4 85 F1 | 	sub	objptr, ##38024
10ba0     04 4E 05 F1 | 	add	fp, #4
10ba4     A7 20 62 FC | 	wrlong	local02, fp
10ba8     04 4E 85 F1 | 	sub	fp, #4
10bac                 | ' 
10bac                 | ' t1=pop() : gotoline=converttoint(t1)
10bac                 | ' gotoptr=programstart
10bac                 | ' do
10bac                 | LR__1430
10bac     0C 4E 05 F1 | 	add	fp, #12
10bb0     A7 12 02 F6 | 	mov	arg01, fp
10bb4     08 4E 85 F1 | 	sub	fp, #8
10bb8     A7 14 02 FB | 	rdlong	arg02, fp
10bbc     04 4E 85 F1 | 	sub	fp, #4
10bc0     18 16 06 F6 | 	mov	arg03, #24
10bc4     0B 00 00 FF 
10bc8     CC E4 05 F1 | 	add	objptr, ##5836
10bcc     20 F0 B0 FD | 	call	#_psram_spin2_read1
10bd0     0B 00 00 FF 
10bd4     CC E4 85 F1 | 	sub	objptr, ##5836
10bd8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10bd8                 | '   if gotoheader(0)<>$FFFFFFFF then
10bd8     0C 4E 05 F1 | 	add	fp, #12
10bdc     A7 20 02 FB | 	rdlong	local02, fp
10be0     0C 4E 85 F1 | 	sub	fp, #12
10be4     FF FF 7F FF 
10be8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
10bec     24 00 90 AD |  if_e	jmp	#LR__1431
10bf0     04 4E 05 F1 | 	add	fp, #4
10bf4     A7 20 02 FB | 	rdlong	local02, fp
10bf8     04 4E 05 F1 | 	add	fp, #4
10bfc     A7 20 62 FC | 	wrlong	local02, fp
10c00     18 4E 05 F1 | 	add	fp, #24
10c04     A7 20 02 FB | 	rdlong	local02, fp
10c08     1C 4E 85 F1 | 	sub	fp, #28
10c0c     A7 20 62 FC | 	wrlong	local02, fp
10c10     04 4E 85 F1 | 	sub	fp, #4
10c14                 | LR__1431
10c14     20 4E 05 F1 | 	add	fp, #32
10c18     A7 20 02 FB | 	rdlong	local02, fp
10c1c     20 4E 85 F1 | 	sub	fp, #32
10c20     FF FF 3F FF 
10c24     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10c28     0C 4E 05 51 |  if_ne	add	fp, #12
10c2c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10c30     0C 4E 85 51 |  if_ne	sub	fp, #12
10c34     FF FF 7F 5F 
10c38     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
10c3c     18 00 90 AD |  if_e	jmp	#LR__1432
10c40     0C 4E 05 F1 | 	add	fp, #12
10c44     A7 20 02 FB | 	rdlong	local02, fp
10c48     0C 4E 85 F1 | 	sub	fp, #12
10c4c     A7 16 02 FB | 	rdlong	arg03, fp
10c50     0B 21 0A F2 | 	cmp	local02, arg03 wz
10c54     54 FF 9F 5D |  if_ne	jmp	#LR__1430
10c58                 | LR__1432
10c58                 | ' if gotoheader(0)=gotoline then  
10c58     0C 4E 05 F1 | 	add	fp, #12
10c5c     A7 20 02 FB | 	rdlong	local02, fp
10c60     0C 4E 85 F1 | 	sub	fp, #12
10c64     A7 1E 02 FB | 	rdlong	local01, fp
10c68     0F 21 0A F2 | 	cmp	local02, local01 wz
10c6c     60 00 90 5D |  if_ne	jmp	#LR__1433
10c70     08 4E 05 F1 | 	add	fp, #8
10c74     A7 20 02 FB | 	rdlong	local02, fp
10c78     08 4E 85 F1 | 	sub	fp, #8
10c7c     50 00 00 FF 
10c80     B8 E4 05 F1 | 	add	objptr, ##41144
10c84     F2 20 62 FC | 	wrlong	local02, objptr
10c88     06 00 00 FF 
10c8c     3C E4 85 F1 | 	sub	objptr, ##3132
10c90     F2 20 02 FB | 	rdlong	local02, objptr
10c94     01 20 86 F1 | 	sub	local02, #1
10c98     04 E4 05 F1 | 	add	objptr, #4
10c9c     F2 20 62 FC | 	wrlong	local02, objptr
10ca0                 | '    runptr=oldgotoptr
10ca0                 | '    lineptr_e=lineptr-1
10ca0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
10ca0     06 00 00 FF 
10ca4     84 E4 05 F1 | 	add	objptr, ##3204
10ca8     F2 20 02 FB | 	rdlong	local02, objptr
10cac     50 00 00 FF 
10cb0     04 E5 85 F1 | 	sub	objptr, ##41220
10cb4     FF FF 3F FF 
10cb8     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10cbc     50 00 00 AF 
10cc0     04 E5 05 A1 |  if_e	add	objptr, ##41220
10cc4     F2 00 68 AC |  if_e	wrlong	#0, objptr
10cc8     50 00 00 AF 
10ccc     04 E5 85 A1 |  if_e	sub	objptr, ##41220
10cd0                 | LR__1433
10cd0     A7 F0 03 F6 | 	mov	ptra, fp
10cd4     B2 00 A0 FD | 	call	#popregs_
10cd8                 | _do_slow_goto_ret
10cd8     2D 00 64 FD | 	ret
10cdc                 | 
10cdc                 | ' 
10cdc                 | ' ' ----------------  hex$
10cdc                 | ' 
10cdc                 | ' sub do_hex
10cdc                 | _do_hex
10cdc     01 4A 05 F6 | 	mov	COUNT_, #1
10ce0     A8 00 A0 FD | 	call	#pushregs_
10ce4     18 F0 07 F1 | 	add	ptra, #24
10ce8     4A 00 00 FF 
10cec     80 E4 05 F1 | 	add	objptr, ##38016
10cf0     F2 1E 02 FB | 	rdlong	local01, objptr
10cf4     0F 17 02 F6 | 	mov	arg03, local01
10cf8     01 16 66 F0 | 	shl	arg03, #1
10cfc     0F 17 02 F1 | 	add	arg03, local01
10d00     02 16 66 F0 | 	shl	arg03, #2
10d04     03 00 00 FF 
10d08     04 E4 85 F1 | 	sub	objptr, ##1540
10d0c     F2 16 02 F1 | 	add	arg03, objptr
10d10     0B 17 02 FB | 	rdlong	arg03, arg03
10d14     0C 4E 05 F1 | 	add	fp, #12
10d18     A7 16 62 FC | 	wrlong	arg03, fp
10d1c                 | ' 
10d1c                 | ' numpar=compiledline(lineptr_e).result.uresult
10d1c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
10d1c     0C 4E 85 F1 | 	sub	fp, #12
10d20     03 16 16 F2 | 	cmp	arg03, #3 wc
10d24     47 00 00 FF 
10d28     7C E4 85 F1 | 	sub	objptr, ##36476
10d2c     0C 4E 05 C1 |  if_b	add	fp, #12
10d30     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10d34     0C 4E 85 C1 |  if_b	sub	fp, #12
10d38     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1440
10d3c     00 12 06 F6 | 	mov	arg01, #0
10d40     50 55 B1 FD | 	call	#__system___getiolock_0541
10d44     FD 12 02 F6 | 	mov	arg01, result1
10d48     E4 FA B0 FD | 	call	#__system___lockmem
10d4c     84 01 00 FF 
10d50     88 14 06 F6 | 	mov	arg02, ##@LR__5442
10d54     00 12 06 F6 | 	mov	arg01, #0
10d58     00 16 06 F6 | 	mov	arg03, #0
10d5c     C4 07 B1 FD | 	call	#__system___basic_print_string
10d60     00 12 06 F6 | 	mov	arg01, #0
10d64     2C 55 B1 FD | 	call	#__system___getiolock_0541
10d68     FD 00 68 FC | 	wrlong	#0, result1
10d6c     27 12 06 F6 | 	mov	arg01, #39
10d70     2C C5 B0 FD | 	call	#_printerror
10d74     B8 00 90 FD | 	jmp	#LR__1443
10d78                 | LR__1440
10d78                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
10d78     0C 4E 05 F1 | 	add	fp, #12
10d7c     A7 1E 02 FB | 	rdlong	local01, fp
10d80     0C 4E 85 F1 | 	sub	fp, #12
10d84     02 1E 0E F2 | 	cmp	local01, #2 wz
10d88     38 00 90 5D |  if_ne	jmp	#LR__1441
10d8c     0C A6 BF FD | 	call	#_pop
10d90     FF 1E 02 F6 | 	mov	local01, result3
10d94     A7 FA 61 FC | 	wrlong	result1, fp
10d98     04 4E 05 F1 | 	add	fp, #4
10d9c     A7 FC 61 FC | 	wrlong	result2, fp
10da0     04 4E 05 F1 | 	add	fp, #4
10da4     A7 1E 62 FC | 	wrlong	local01, fp
10da8     08 4E 85 F1 | 	sub	fp, #8
10dac     A7 12 02 F6 | 	mov	arg01, fp
10db0     CC A7 BF FD | 	call	#_converttoint
10db4     14 4E 05 F1 | 	add	fp, #20
10db8     A7 FA 61 FC | 	wrlong	result1, fp
10dbc     14 4E 85 F1 | 	sub	fp, #20
10dc0     0C 00 90 FD | 	jmp	#LR__1442
10dc4                 | LR__1441
10dc4     14 4E 05 F1 | 	add	fp, #20
10dc8     A7 10 68 FC | 	wrlong	#8, fp
10dcc     14 4E 85 F1 | 	sub	fp, #20
10dd0                 | LR__1442
10dd0     C8 A5 BF FD | 	call	#_pop
10dd4     FF 1E 02 F6 | 	mov	local01, result3
10dd8     A7 FA 61 FC | 	wrlong	result1, fp
10ddc     04 4E 05 F1 | 	add	fp, #4
10de0     A7 FC 61 FC | 	wrlong	result2, fp
10de4     04 4E 05 F1 | 	add	fp, #4
10de8     A7 1E 62 FC | 	wrlong	local01, fp
10dec     08 4E 85 F1 | 	sub	fp, #8
10df0     A7 12 02 F6 | 	mov	arg01, fp
10df4     88 A7 BF FD | 	call	#_converttoint
10df8     10 4E 05 F1 | 	add	fp, #16
10dfc     A7 FA 61 FC | 	wrlong	result1, fp
10e00     FD 12 02 F6 | 	mov	arg01, result1
10e04     04 4E 05 F1 | 	add	fp, #4
10e08     A7 14 02 FB | 	rdlong	arg02, fp
10e0c     14 4E 85 F1 | 	sub	fp, #20
10e10     10 16 06 F6 | 	mov	arg03, #16
10e14     E8 1C B1 FD | 	call	#__system__Number_S
10e18     A7 FA 61 FC | 	wrlong	result1, fp
10e1c     08 4E 05 F1 | 	add	fp, #8
10e20     A7 3E 68 FC | 	wrlong	#31, fp
10e24     08 4E 85 F1 | 	sub	fp, #8
10e28     A7 12 02 F6 | 	mov	arg01, fp
10e2c     04 A6 BF FD | 	call	#_push
10e30                 | LR__1443
10e30     A7 F0 03 F6 | 	mov	ptra, fp
10e34     B2 00 A0 FD | 	call	#popregs_
10e38                 | _do_hex_ret
10e38     2D 00 64 FD | 	ret
10e3c                 | 
10e3c                 | ' 
10e3c                 | ' ' ----------------  if
10e3c                 | ' 
10e3c                 | ' sub do_if
10e3c                 | _do_if
10e3c     05 4A 05 F6 | 	mov	COUNT_, #5
10e40     A8 00 A0 FD | 	call	#pushregs_
10e44     54 A5 BF FD | 	call	#_pop
10e48     FD 1E 0A F6 | 	mov	local01, result1 wz
10e4c     FE 20 02 F6 | 	mov	local02, result2
10e50     FF 22 02 F6 | 	mov	local03, result3
10e54                 | ' t1=pop()
10e54                 | ' ' if uresult=0, jump over else
10e54                 | ' if t1.result.uresult = 0 then 
10e54     BC 00 90 5D |  if_ne	jmp	#LR__1452
10e58                 | '   for i=lineptr_e to lineptr-1
10e58     4A 00 00 FF 
10e5c     80 E4 05 F1 | 	add	objptr, ##38016
10e60     F2 24 02 FB | 	rdlong	local04, objptr
10e64     04 E4 85 F1 | 	sub	objptr, #4
10e68     F2 26 02 FB | 	rdlong	local05, objptr
10e6c     4A 00 00 FF 
10e70     7C E4 85 F1 | 	sub	objptr, ##38012
10e74                 | LR__1450
10e74     13 25 52 F2 | 	cmps	local04, local05 wc
10e78     78 00 90 3D |  if_ae	jmp	#LR__1451
10e7c     12 FF 01 F6 | 	mov	result3, local04
10e80     01 FE 65 F0 | 	shl	result3, #1
10e84     12 FF 01 F1 | 	add	result3, local04
10e88     02 FE 65 F0 | 	shl	result3, #2
10e8c     47 00 00 FF 
10e90     7C E4 05 F1 | 	add	objptr, ##36476
10e94     F2 FE 01 F1 | 	add	result3, objptr
10e98     FF 1E 02 FB | 	rdlong	local01, result3
10e9c     04 FE 05 F1 | 	add	result3, #4
10ea0     FF FC 01 FB | 	rdlong	result2, result3
10ea4     12 FF 01 F6 | 	mov	result3, local04
10ea8     01 FE 65 F0 | 	shl	result3, #1
10eac     12 FF 01 F1 | 	add	result3, local04
10eb0     02 FE 65 F0 | 	shl	result3, #2
10eb4     F2 FE 01 F1 | 	add	result3, objptr
10eb8     08 FE 05 F1 | 	add	result3, #8
10ebc     FF FE 01 FB | 	rdlong	result3, result3
10ec0     FE 20 02 F6 | 	mov	local02, result2
10ec4     FF 22 02 F6 | 	mov	local03, result3
10ec8                 | '     t1=compiledline(i)
10ec8                 | '     if t1.result_type=token_else then lineptr_e=i : return
10ec8     5A 22 0E F2 | 	cmp	local03, #90 wz
10ecc     47 00 00 FF 
10ed0     7C E4 85 F1 | 	sub	objptr, ##36476
10ed4     4A 00 00 AF 
10ed8     80 E4 05 A1 |  if_e	add	objptr, ##38016
10edc     F2 24 62 AC |  if_e	wrlong	local04, objptr
10ee0     4A 00 00 AF 
10ee4     80 E4 85 A1 |  if_e	sub	objptr, ##38016
10ee8     28 00 90 AD |  if_e	jmp	#LR__1453
10eec     01 24 06 F1 | 	add	local04, #1
10ef0     80 FF 9F FD | 	jmp	#LR__1450
10ef4                 | LR__1451
10ef4     4A 00 00 FF 
10ef8     7C E4 05 F1 | 	add	objptr, ##38012
10efc     F2 26 02 FB | 	rdlong	local05, objptr
10f00     01 26 86 F1 | 	sub	local05, #1
10f04     04 E4 05 F1 | 	add	objptr, #4
10f08     F2 26 62 FC | 	wrlong	local05, objptr
10f0c     4A 00 00 FF 
10f10     80 E4 85 F1 | 	sub	objptr, ##38016
10f14                 | LR__1452
10f14                 | LR__1453
10f14     A7 F0 03 F6 | 	mov	ptra, fp
10f18     B2 00 A0 FD | 	call	#popregs_
10f1c                 | _do_if_ret
10f1c     2D 00 64 FD | 	ret
10f20                 | 
10f20                 | ' 
10f20                 | ' ' ----------------  inkey$
10f20                 | ' 
10f20                 | ' sub do_inkey
10f20                 | _do_inkey
10f20     02 4A 05 F6 | 	mov	COUNT_, #2
10f24     A8 00 A0 FD | 	call	#pushregs_
10f28     0C F0 07 F1 | 	add	ptra, #12
10f2c     EC F0 B0 FD | 	call	#_usbnew_spin2_get_key
10f30     45 00 00 FF 
10f34     74 E4 05 F1 | 	add	objptr, ##35444
10f38     F2 FA 61 FC | 	wrlong	result1, objptr
10f3c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
10f3c     45 00 00 FF 
10f40     74 E4 85 F1 | 	sub	objptr, ##35444
10f44     00 FA 0D F2 | 	cmp	result1, #0 wz
10f48     94 00 90 AD |  if_e	jmp	#LR__1461
10f4c     45 00 00 FF 
10f50     74 E4 05 F1 | 	add	objptr, ##35444
10f54     F2 1C 02 FB | 	rdlong	arg06, objptr
10f58     45 00 00 FF 
10f5c     74 E4 85 F1 | 	sub	objptr, ##35444
10f60     00 00 40 FF 
10f64     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
10f68     45 00 00 CF 
10f6c     74 E4 05 C1 |  if_b	add	objptr, ##35444
10f70     F2 1E 02 CB |  if_b	rdlong	local01, objptr
10f74     45 00 00 CF 
10f78     74 E4 85 C1 |  if_b	sub	objptr, ##35444
10f7c     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
10f80     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
10f84     58 00 90 3D |  if_ae	jmp	#LR__1461
10f88                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
10f88     50 00 00 FF 
10f8c     14 E5 05 F1 | 	add	objptr, ##41236
10f90     F2 1C 02 FB | 	rdlong	arg06, objptr
10f94     50 00 00 FF 
10f98     14 E5 85 F1 | 	sub	objptr, ##41236
10f9c     01 1C 0E F2 | 	cmp	arg06, #1 wz
10fa0     3C 00 90 5D |  if_ne	jmp	#LR__1460
10fa4     51 00 00 FF 
10fa8     B8 E5 05 F1 | 	add	objptr, ##41912
10fac     F2 14 02 FB | 	rdlong	arg02, objptr
10fb0     04 E4 85 F1 | 	sub	objptr, #4
10fb4     F2 1A 02 FB | 	rdlong	arg05, objptr
10fb8     07 12 06 F6 | 	mov	arg01, #7
10fbc     56 00 00 FF 
10fc0     44 16 06 F6 | 	mov	arg03, ##44100
10fc4     0C 18 C6 F9 | 	decod	arg04, #12
10fc8     01 1C 66 F6 | 	neg	arg06, #1
10fcc     46 00 00 FF 
10fd0     E8 E4 85 F1 | 	sub	objptr, ##36072
10fd4     E8 F3 B0 FD | 	call	#_audio096_spin2_play
10fd8     0B 00 00 FF 
10fdc     CC E4 85 F1 | 	sub	objptr, ##5836
10fe0                 | LR__1460
10fe0                 | LR__1461
10fe0                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
10fe0     45 00 00 FF 
10fe4     74 E4 05 F1 | 	add	objptr, ##35444
10fe8     F2 1C 0A FB | 	rdlong	arg06, objptr wz
10fec     45 00 00 FF 
10ff0     74 E4 85 F1 | 	sub	objptr, ##35444
10ff4     D4 01 90 AD |  if_e	jmp	#LR__1470
10ff8     45 00 00 FF 
10ffc     74 E4 05 F1 | 	add	objptr, ##35444
11000     F2 1C 02 FB | 	rdlong	arg06, objptr
11004     45 00 00 FF 
11008     74 E4 85 F1 | 	sub	objptr, ##35444
1100c     00 00 40 FF 
11010     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11014     45 00 00 CF 
11018     74 E4 05 C1 |  if_b	add	objptr, ##35444
1101c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
11020     45 00 00 CF 
11024     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11028     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
1102c     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
11030     98 01 90 3D |  if_ae	jmp	#LR__1470
11034                 | '   if leds and 2 = 2 then 
11034     51 00 00 FF 
11038     E8 E5 05 F1 | 	add	objptr, ##41960
1103c     F2 1E 0A FB | 	rdlong	local01, objptr wz
11040     51 00 00 FF 
11044     E8 E5 85 F1 | 	sub	objptr, ##41960
11048     58 01 90 AD |  if_e	jmp	#LR__1469
1104c                 | '     if key>96 andalso key<123 then
1104c     45 00 00 FF 
11050     74 E4 05 F1 | 	add	objptr, ##35444
11054     F2 1E 02 FB | 	rdlong	local01, objptr
11058     45 00 00 FF 
1105c     74 E4 85 F1 | 	sub	objptr, ##35444
11060     61 1E 16 F2 | 	cmp	local01, #97 wc
11064     3C 00 90 CD |  if_b	jmp	#LR__1462
11068     45 00 00 FF 
1106c     74 E4 05 F1 | 	add	objptr, ##35444
11070     F2 1E 02 FB | 	rdlong	local01, objptr
11074     45 00 00 FF 
11078     74 E4 85 F1 | 	sub	objptr, ##35444
1107c     7B 1E 16 F2 | 	cmp	local01, #123 wc
11080     20 00 90 3D |  if_ae	jmp	#LR__1462
11084     45 00 00 FF 
11088     74 E4 05 F1 | 	add	objptr, ##35444
1108c     F2 1E 02 FB | 	rdlong	local01, objptr
11090     20 1E 86 F1 | 	sub	local01, #32
11094     F2 1E 62 FC | 	wrlong	local01, objptr
11098     45 00 00 FF 
1109c     74 E4 85 F1 | 	sub	objptr, ##35444
110a0     00 01 90 FD | 	jmp	#LR__1468
110a4                 | LR__1462
110a4     45 00 00 FF 
110a8     74 E4 05 F1 | 	add	objptr, ##35444
110ac     F2 1E 02 FB | 	rdlong	local01, objptr
110b0     45 00 00 FF 
110b4     74 E4 85 F1 | 	sub	objptr, ##35444
110b8     41 1E 16 F2 | 	cmp	local01, #65 wc
110bc     3C 00 90 CD |  if_b	jmp	#LR__1463
110c0     45 00 00 FF 
110c4     74 E4 05 F1 | 	add	objptr, ##35444
110c8     F2 1E 02 FB | 	rdlong	local01, objptr
110cc     45 00 00 FF 
110d0     74 E4 85 F1 | 	sub	objptr, ##35444
110d4     5B 1E 16 F2 | 	cmp	local01, #91 wc
110d8     20 00 90 3D |  if_ae	jmp	#LR__1463
110dc     45 00 00 FF 
110e0     74 E4 05 F1 | 	add	objptr, ##35444
110e4     F2 1E 02 FB | 	rdlong	local01, objptr
110e8     20 1E 06 F1 | 	add	local01, #32
110ec     F2 1E 62 FC | 	wrlong	local01, objptr
110f0     45 00 00 FF 
110f4     74 E4 85 F1 | 	sub	objptr, ##35444
110f8     A8 00 90 FD | 	jmp	#LR__1467
110fc                 | LR__1463
110fc     45 00 00 FF 
11100     74 E4 05 F1 | 	add	objptr, ##35444
11104     F2 1E 02 FB | 	rdlong	local01, objptr
11108     45 00 00 FF 
1110c     74 E4 85 F1 | 	sub	objptr, ##35444
11110     17 1E 16 F2 | 	cmp	local01, #23 wc
11114     3C 00 90 CD |  if_b	jmp	#LR__1464
11118     45 00 00 FF 
1111c     74 E4 05 F1 | 	add	objptr, ##35444
11120     F2 1E 02 FB | 	rdlong	local01, objptr
11124     45 00 00 FF 
11128     74 E4 85 F1 | 	sub	objptr, ##35444
1112c     20 1E 16 F2 | 	cmp	local01, #32 wc
11130     20 00 90 3D |  if_ae	jmp	#LR__1464
11134     45 00 00 FF 
11138     74 E4 05 F1 | 	add	objptr, ##35444
1113c     F2 1E 02 FB | 	rdlong	local01, objptr
11140     09 1E 86 F1 | 	sub	local01, #9
11144     F2 1E 62 FC | 	wrlong	local01, objptr
11148     45 00 00 FF 
1114c     74 E4 85 F1 | 	sub	objptr, ##35444
11150     50 00 90 FD | 	jmp	#LR__1466
11154                 | LR__1464
11154     45 00 00 FF 
11158     74 E4 05 F1 | 	add	objptr, ##35444
1115c     F2 20 02 FB | 	rdlong	local02, objptr
11160     45 00 00 FF 
11164     74 E4 85 F1 | 	sub	objptr, ##35444
11168     0E 20 16 F2 | 	cmp	local02, #14 wc
1116c     34 00 90 CD |  if_b	jmp	#LR__1465
11170     45 00 00 FF 
11174     74 E4 05 F1 | 	add	objptr, ##35444
11178     F2 1E 02 FB | 	rdlong	local01, objptr
1117c     45 00 00 FF 
11180     74 E4 85 F1 | 	sub	objptr, ##35444
11184     17 1E 16 F2 | 	cmp	local01, #23 wc
11188     51 00 00 CF 
1118c     EC E5 05 C1 |  if_b	add	objptr, ##41964
11190     F2 20 02 CB |  if_b	rdlong	local02, objptr
11194     27 20 06 C1 |  if_b	add	local02, #39
11198     F2 20 62 CC |  if_b	wrlong	local02, objptr
1119c     51 00 00 CF 
111a0     EC E5 85 C1 |  if_b	sub	objptr, ##41964
111a4                 | LR__1465
111a4                 | LR__1466
111a4                 | LR__1467
111a4                 | LR__1468
111a4                 | LR__1469
111a4     45 00 00 FF 
111a8     74 E4 05 F1 | 	add	objptr, ##35444
111ac     F2 12 02 FB | 	rdlong	arg01, objptr
111b0     45 00 00 FF 
111b4     74 E4 85 F1 | 	sub	objptr, ##35444
111b8     28 C4 B0 FD | 	call	#_scantochar
111bc     FD 12 02 F6 | 	mov	arg01, result1
111c0     AC 18 B1 FD | 	call	#__system__Chr_S
111c4     A7 FA 61 FC | 	wrlong	result1, fp
111c8     0C 00 90 FD | 	jmp	#LR__1471
111cc                 | LR__1470
111cc     84 01 00 FF 
111d0     8F 20 06 F6 | 	mov	local02, ##@LR__5443
111d4     A7 20 62 FC | 	wrlong	local02, fp
111d8                 | LR__1471
111d8     08 4E 05 F1 | 	add	fp, #8
111dc     A7 3E 68 FC | 	wrlong	#31, fp
111e0     08 4E 85 F1 | 	sub	fp, #8
111e4     A7 12 02 F6 | 	mov	arg01, fp
111e8     48 A2 BF FD | 	call	#_push
111ec     A7 F0 03 F6 | 	mov	ptra, fp
111f0     B2 00 A0 FD | 	call	#popregs_
111f4                 | _do_inkey_ret
111f4     2D 00 64 FD | 	ret
111f8                 | 
111f8                 | ' 
111f8                 | ' ' ----------------  ink
111f8                 | ' 
111f8                 | ' sub do_ink
111f8                 | _do_ink
111f8     00 4A 05 F6 | 	mov	COUNT_, #0
111fc     A8 00 A0 FD | 	call	#pushregs_
11200     0C F0 07 F1 | 	add	ptra, #12
11204     94 A1 BF FD | 	call	#_pop
11208     FF 14 02 F6 | 	mov	arg02, result3
1120c     A7 FA 61 FC | 	wrlong	result1, fp
11210     04 4E 05 F1 | 	add	fp, #4
11214     A7 FC 61 FC | 	wrlong	result2, fp
11218     04 4E 05 F1 | 	add	fp, #4
1121c     A7 14 62 FC | 	wrlong	arg02, fp
11220     08 4E 85 F1 | 	sub	fp, #8
11224     A7 12 02 F6 | 	mov	arg01, fp
11228     54 A3 BF FD | 	call	#_converttoint
1122c     37 00 00 FF 
11230     3C E4 05 F1 | 	add	objptr, ##28220
11234     F2 FA 61 FC | 	wrlong	result1, objptr
11238     04 E4 85 F1 | 	sub	objptr, #4
1123c     F2 14 02 FB | 	rdlong	arg02, objptr
11240                 | ' 
11240                 | ' write_color:=ff
11240     36 00 00 FF 
11244     F7 E5 85 F1 | 	sub	objptr, ##28151
11248     F2 FA 61 FC | 	wrlong	result1, objptr
1124c                 | ' write_background:=bb
1124c     04 E4 05 F1 | 	add	objptr, #4
11250     F2 14 62 FC | 	wrlong	arg02, objptr
11254     36 00 00 FF 
11258     F7 E5 05 F1 | 	add	objptr, ##28151
1125c     F2 12 02 FB | 	rdlong	arg01, objptr
11260     37 00 00 FF 
11264     3C E4 85 F1 | 	sub	objptr, ##28220
11268     54 CB B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1126c     A7 F0 03 F6 | 	mov	ptra, fp
11270     B2 00 A0 FD | 	call	#popregs_
11274                 | _do_ink_ret
11274     2D 00 64 FD | 	ret
11278                 | 
11278                 | ' 
11278                 | ' ' ----------------  int
11278                 | ' 
11278                 | ' sub do_int
11278                 | _do_int
11278     02 4A 05 F6 | 	mov	COUNT_, #2
1127c     A8 00 A0 FD | 	call	#pushregs_
11280     10 F0 07 F1 | 	add	ptra, #16
11284     14 A1 BF FD | 	call	#_pop
11288     FE 1E 02 F6 | 	mov	local01, result2
1128c     FF 20 02 F6 | 	mov	local02, result3
11290     A7 FA 61 FC | 	wrlong	result1, fp
11294     04 4E 05 F1 | 	add	fp, #4
11298     A7 1E 62 FC | 	wrlong	local01, fp
1129c     04 4E 05 F1 | 	add	fp, #4
112a0     A7 20 62 FC | 	wrlong	local02, fp
112a4                 | ' 
112a4                 | ' t1=pop()
112a4                 | ' select case t1.result_type
112a4     08 4E 85 F1 | 	sub	fp, #8
112a8     1E 20 0E F2 | 	cmp	local02, #30 wz
112ac     14 00 90 AD |  if_e	jmp	#LR__1480
112b0     1F 20 0E F2 | 	cmp	local02, #31 wz
112b4     20 00 90 AD |  if_e	jmp	#LR__1481
112b8     2B 20 0E F2 | 	cmp	local02, #43 wz
112bc     34 00 90 AD |  if_e	jmp	#LR__1482
112c0     50 00 90 FD | 	jmp	#LR__1483
112c4                 | LR__1480
112c4     A7 12 02 FB | 	rdlong	arg01, fp
112c8     00 14 06 F6 | 	mov	arg02, #0
112cc     DC 25 B1 FD | 	call	#__system___float_tointeger
112d0     A7 FA 61 FC | 	wrlong	result1, fp
112d4     3C 00 90 FD | 	jmp	#LR__1483
112d8                 | LR__1481
112d8     A7 12 02 FB | 	rdlong	arg01, fp
112dc     10 29 B1 FD | 	call	#__system____builtin_atof
112e0     FD 12 02 F6 | 	mov	arg01, result1
112e4     00 14 06 F6 | 	mov	arg02, #0
112e8     C0 25 B1 FD | 	call	#__system___float_tointeger
112ec     A7 FA 61 FC | 	wrlong	result1, fp
112f0     20 00 90 FD | 	jmp	#LR__1483
112f4                 | LR__1482
112f4     A7 12 02 FB | 	rdlong	arg01, fp
112f8     18 A2 BF FD | 	call	#_convertstring
112fc     FD 12 02 F6 | 	mov	arg01, result1
11300     EC 28 B1 FD | 	call	#__system____builtin_atof
11304     FD 12 02 F6 | 	mov	arg01, result1
11308     00 14 06 F6 | 	mov	arg02, #0
1130c     9C 25 B1 FD | 	call	#__system___float_tointeger
11310     A7 FA 61 FC | 	wrlong	result1, fp
11314                 | LR__1483
11314     08 4E 05 F1 | 	add	fp, #8
11318     A7 38 68 FC | 	wrlong	#28, fp
1131c     08 4E 85 F1 | 	sub	fp, #8
11320     A7 12 02 F6 | 	mov	arg01, fp
11324     0C A1 BF FD | 	call	#_push
11328     A7 F0 03 F6 | 	mov	ptra, fp
1132c     B2 00 A0 FD | 	call	#popregs_
11330                 | _do_int_ret
11330     2D 00 64 FD | 	ret
11334                 | 
11334                 | ' 
11334                 | ' ' ----------------  left$
11334                 | ' 
11334                 | ' sub do_left
11334                 | _do_left
11334     00 4A 05 F6 | 	mov	COUNT_, #0
11338     A8 00 A0 FD | 	call	#pushregs_
1133c     14 F0 07 F1 | 	add	ptra, #20
11340     4A 00 00 FF 
11344     80 E4 05 F1 | 	add	objptr, ##38016
11348     F2 16 02 FB | 	rdlong	arg03, objptr
1134c     0B 15 02 F6 | 	mov	arg02, arg03
11350     01 14 66 F0 | 	shl	arg02, #1
11354     0B 15 02 F1 | 	add	arg02, arg03
11358     02 14 66 F0 | 	shl	arg02, #2
1135c     03 00 00 FF 
11360     04 E4 85 F1 | 	sub	objptr, ##1540
11364     F2 14 02 F1 | 	add	arg02, objptr
11368     0A 17 02 FB | 	rdlong	arg03, arg02
1136c     0C 4E 05 F1 | 	add	fp, #12
11370     A7 16 62 FC | 	wrlong	arg03, fp
11374                 | ' 
11374                 | ' numpar=compiledline(lineptr_e).result.uresult
11374                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
11374     0C 4E 85 F1 | 	sub	fp, #12
11378     02 16 0E F2 | 	cmp	arg03, #2 wz
1137c     47 00 00 FF 
11380     7C E4 85 F1 | 	sub	objptr, ##36476
11384     3C 00 90 AD |  if_e	jmp	#LR__1490
11388     00 12 06 F6 | 	mov	arg01, #0
1138c     04 4F B1 FD | 	call	#__system___getiolock_0541
11390     FD 12 02 F6 | 	mov	arg01, result1
11394     98 F4 B0 FD | 	call	#__system___lockmem
11398     84 01 00 FF 
1139c     90 14 06 F6 | 	mov	arg02, ##@LR__5444
113a0     00 12 06 F6 | 	mov	arg01, #0
113a4     00 16 06 F6 | 	mov	arg03, #0
113a8     78 01 B1 FD | 	call	#__system___basic_print_string
113ac     00 12 06 F6 | 	mov	arg01, #0
113b0     E0 4E B1 FD | 	call	#__system___getiolock_0541
113b4     FD 00 68 FC | 	wrlong	#0, result1
113b8     27 12 06 F6 | 	mov	arg01, #39
113bc     E0 BE B0 FD | 	call	#_printerror
113c0     E8 00 90 FD | 	jmp	#LR__1493
113c4                 | LR__1490
113c4     D4 9F BF FD | 	call	#_pop
113c8     FF 16 02 F6 | 	mov	arg03, result3
113cc     A7 FA 61 FC | 	wrlong	result1, fp
113d0     04 4E 05 F1 | 	add	fp, #4
113d4     A7 FC 61 FC | 	wrlong	result2, fp
113d8     04 4E 05 F1 | 	add	fp, #4
113dc     A7 16 62 FC | 	wrlong	arg03, fp
113e0     08 4E 85 F1 | 	sub	fp, #8
113e4     A7 12 02 F6 | 	mov	arg01, fp
113e8     94 A1 BF FD | 	call	#_converttoint
113ec     FD 16 02 F6 | 	mov	arg03, result1
113f0     10 4E 05 F1 | 	add	fp, #16
113f4     A7 16 62 FC | 	wrlong	arg03, fp
113f8     10 4E 85 F1 | 	sub	fp, #16
113fc     9C 9F BF FD | 	call	#_pop
11400     FF 16 02 F6 | 	mov	arg03, result3
11404     A7 FA 61 FC | 	wrlong	result1, fp
11408     04 4E 05 F1 | 	add	fp, #4
1140c     A7 FC 61 FC | 	wrlong	result2, fp
11410     04 4E 05 F1 | 	add	fp, #4
11414     A7 16 62 FC | 	wrlong	arg03, fp
11418                 | ' t1=pop() : arg=converttoint(t1)
11418                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11418     08 4E 85 F1 | 	sub	fp, #8
1141c     2B 16 0E F2 | 	cmp	arg03, #43 wz
11420     18 00 90 5D |  if_ne	jmp	#LR__1491
11424     A7 12 02 FB | 	rdlong	arg01, fp
11428     E8 A0 BF FD | 	call	#_convertstring
1142c     A7 FA 61 FC | 	wrlong	result1, fp
11430     08 4E 05 F1 | 	add	fp, #8
11434     A7 3E 68 FC | 	wrlong	#31, fp
11438     08 4E 85 F1 | 	sub	fp, #8
1143c                 | LR__1491
1143c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
1143c     08 4E 05 F1 | 	add	fp, #8
11440     A7 16 02 FB | 	rdlong	arg03, fp
11444     08 4E 85 F1 | 	sub	fp, #8
11448     1F 16 0E F2 | 	cmp	arg03, #31 wz
1144c     3C 00 90 AD |  if_e	jmp	#LR__1492
11450     00 12 06 F6 | 	mov	arg01, #0
11454     3C 4E B1 FD | 	call	#__system___getiolock_0541
11458     FD 12 02 F6 | 	mov	arg01, result1
1145c     D0 F3 B0 FD | 	call	#__system___lockmem
11460     84 01 00 FF 
11464     98 14 06 F6 | 	mov	arg02, ##@LR__5445
11468     00 12 06 F6 | 	mov	arg01, #0
1146c     00 16 06 F6 | 	mov	arg03, #0
11470     B0 00 B1 FD | 	call	#__system___basic_print_string
11474     00 12 06 F6 | 	mov	arg01, #0
11478     18 4E B1 FD | 	call	#__system___getiolock_0541
1147c     FD 00 68 FC | 	wrlong	#0, result1
11480     0F 12 06 F6 | 	mov	arg01, #15
11484     18 BE B0 FD | 	call	#_printerror
11488     20 00 90 FD | 	jmp	#LR__1493
1148c                 | LR__1492
1148c     A7 12 02 FB | 	rdlong	arg01, fp
11490     10 4E 05 F1 | 	add	fp, #16
11494     A7 14 02 FB | 	rdlong	arg02, fp
11498     10 4E 85 F1 | 	sub	fp, #16
1149c     0C 14 B1 FD | 	call	#__system__Left_S
114a0     A7 FA 61 FC | 	wrlong	result1, fp
114a4     A7 12 02 F6 | 	mov	arg01, fp
114a8     88 9F BF FD | 	call	#_push
114ac                 | LR__1493
114ac     A7 F0 03 F6 | 	mov	ptra, fp
114b0     B2 00 A0 FD | 	call	#popregs_
114b4                 | _do_left_ret
114b4     2D 00 64 FD | 	ret
114b8                 | 
114b8                 | ' 
114b8                 | ' ' ----------------  len
114b8                 | ' 
114b8                 | ' sub do_len
114b8                 | _do_len
114b8     02 4A 05 F6 | 	mov	COUNT_, #2
114bc     A8 00 A0 FD | 	call	#pushregs_
114c0     14 F0 07 F1 | 	add	ptra, #20
114c4     4A 00 00 FF 
114c8     80 E4 05 F1 | 	add	objptr, ##38016
114cc     F2 1E 02 FB | 	rdlong	local01, objptr
114d0     0F 17 02 F6 | 	mov	arg03, local01
114d4     01 16 66 F0 | 	shl	arg03, #1
114d8     0F 17 02 F1 | 	add	arg03, local01
114dc     02 16 66 F0 | 	shl	arg03, #2
114e0     03 00 00 FF 
114e4     04 E4 85 F1 | 	sub	objptr, ##1540
114e8     F2 16 02 F1 | 	add	arg03, objptr
114ec     0B 17 02 FB | 	rdlong	arg03, arg03
114f0     0C 4E 05 F1 | 	add	fp, #12
114f4     A7 16 62 FC | 	wrlong	arg03, fp
114f8                 | ' 
114f8                 | ' numpar=compiledline(lineptr_e).result.uresult
114f8                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
114f8     0C 4E 85 F1 | 	sub	fp, #12
114fc     02 16 16 F2 | 	cmp	arg03, #2 wc
11500     47 00 00 FF 
11504     7C E4 85 F1 | 	sub	objptr, ##36476
11508     0C 4E 05 C1 |  if_b	add	fp, #12
1150c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11510     0C 4E 85 C1 |  if_b	sub	fp, #12
11514     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1500
11518     00 12 06 F6 | 	mov	arg01, #0
1151c     74 4D B1 FD | 	call	#__system___getiolock_0541
11520     FD 12 02 F6 | 	mov	arg01, result1
11524     08 F3 B0 FD | 	call	#__system___lockmem
11528     84 01 00 FF 
1152c     A0 14 06 F6 | 	mov	arg02, ##@LR__5446
11530     00 12 06 F6 | 	mov	arg01, #0
11534     00 16 06 F6 | 	mov	arg03, #0
11538     E8 FF B0 FD | 	call	#__system___basic_print_string
1153c     00 12 06 F6 | 	mov	arg01, #0
11540     50 4D B1 FD | 	call	#__system___getiolock_0541
11544     FD 00 68 FC | 	wrlong	#0, result1
11548     27 12 06 F6 | 	mov	arg01, #39
1154c     50 BD B0 FD | 	call	#_printerror
11550     C4 00 90 FD | 	jmp	#LR__1505
11554                 | LR__1500
11554     44 9E BF FD | 	call	#_pop
11558     FF 16 02 F6 | 	mov	arg03, result3
1155c     A7 FA 61 FC | 	wrlong	result1, fp
11560     04 4E 05 F1 | 	add	fp, #4
11564     A7 FC 61 FC | 	wrlong	result2, fp
11568     04 4E 05 F1 | 	add	fp, #4
1156c     A7 16 62 FC | 	wrlong	arg03, fp
11570                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11570     08 4E 85 F1 | 	sub	fp, #8
11574     2B 16 0E F2 | 	cmp	arg03, #43 wz
11578     18 00 90 5D |  if_ne	jmp	#LR__1501
1157c     A7 12 02 FB | 	rdlong	arg01, fp
11580     90 9F BF FD | 	call	#_convertstring
11584     A7 FA 61 FC | 	wrlong	result1, fp
11588     08 4E 05 F1 | 	add	fp, #8
1158c     A7 3E 68 FC | 	wrlong	#31, fp
11590     08 4E 85 F1 | 	sub	fp, #8
11594                 | LR__1501
11594                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
11594     08 4E 05 F1 | 	add	fp, #8
11598     A7 16 02 FB | 	rdlong	arg03, fp
1159c     08 4E 85 F1 | 	sub	fp, #8
115a0     1F 16 0E F2 | 	cmp	arg03, #31 wz
115a4     3C 00 90 AD |  if_e	jmp	#LR__1502
115a8     00 12 06 F6 | 	mov	arg01, #0
115ac     E4 4C B1 FD | 	call	#__system___getiolock_0541
115b0     FD 12 02 F6 | 	mov	arg01, result1
115b4     78 F2 B0 FD | 	call	#__system___lockmem
115b8     84 01 00 FF 
115bc     A6 14 06 F6 | 	mov	arg02, ##@LR__5447
115c0     00 12 06 F6 | 	mov	arg01, #0
115c4     00 16 06 F6 | 	mov	arg03, #0
115c8     58 FF B0 FD | 	call	#__system___basic_print_string
115cc     00 12 06 F6 | 	mov	arg01, #0
115d0     C0 4C B1 FD | 	call	#__system___getiolock_0541
115d4     FD 00 68 FC | 	wrlong	#0, result1
115d8     0F 12 06 F6 | 	mov	arg01, #15
115dc     C0 BC B0 FD | 	call	#_printerror
115e0     34 00 90 FD | 	jmp	#LR__1505
115e4                 | LR__1502
115e4     A7 12 02 FB | 	rdlong	arg01, fp
115e8     09 21 02 F6 | 	mov	local02, arg01
115ec     97 06 48 FB | 	callpa	#(@LR__1504-@LR__1503)>>2,fcache_load_ptr_
115f0                 | LR__1503
115f0     10 FB C9 FA | 	rdbyte	result1, local02 wz
115f4     01 20 06 51 |  if_ne	add	local02, #1
115f8     F4 FF 9F 5D |  if_ne	jmp	#LR__1503
115fc                 | LR__1504
115fc     09 21 82 F1 | 	sub	local02, arg01
11600     A7 20 62 FC | 	wrlong	local02, fp
11604     08 4E 05 F1 | 	add	fp, #8
11608     A7 38 68 FC | 	wrlong	#28, fp
1160c     08 4E 85 F1 | 	sub	fp, #8
11610     A7 12 02 F6 | 	mov	arg01, fp
11614     1C 9E BF FD | 	call	#_push
11618                 | LR__1505
11618     A7 F0 03 F6 | 	mov	ptra, fp
1161c     B2 00 A0 FD | 	call	#popregs_
11620                 | _do_len_ret
11620     2D 00 64 FD | 	ret
11624                 | 
11624                 | ' 
11624                 | ' ' ----------------  list
11624                 | ' 
11624                 | ' sub do_list
11624                 | _do_list
11624     02 4A 05 F6 | 	mov	COUNT_, #2
11628     A8 00 A0 FD | 	call	#pushregs_
1162c     B8 F0 07 F1 | 	add	ptra, #184
11630     04 4E 05 F1 | 	add	fp, #4
11634     A7 00 68 FC | 	wrlong	#0, fp
11638     04 4E 05 F1 | 	add	fp, #4
1163c     FF FF BF FF 
11640     A7 FE 6B FC | 	wrlong	##2147483647, fp
11644     08 4E 85 F1 | 	sub	fp, #8
11648     4A 00 00 FF 
1164c     80 E4 05 F1 | 	add	objptr, ##38016
11650     F2 1E 02 FB | 	rdlong	local01, objptr
11654     0F 17 02 F6 | 	mov	arg03, local01
11658     01 16 66 F0 | 	shl	arg03, #1
1165c     0F 17 02 F1 | 	add	arg03, local01
11660     02 16 66 F0 | 	shl	arg03, #2
11664     03 00 00 FF 
11668     04 E4 85 F1 | 	sub	objptr, ##1540
1166c     F2 16 02 F1 | 	add	arg03, objptr
11670     0B 17 02 FB | 	rdlong	arg03, arg03
11674     A7 16 62 FC | 	wrlong	arg03, fp
11678                 | ' 
11678                 | ' startline=0 : endline=$7FFFFFFF
11678                 | ' numpar=compiledline(lineptr_e).result.uresult
11678                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
11678     01 16 0E F2 | 	cmp	arg03, #1 wz
1167c     47 00 00 FF 
11680     7C E4 85 F1 | 	sub	objptr, ##36476
11684     3C 00 90 5D |  if_ne	jmp	#LR__1510
11688     10 9D BF FD | 	call	#_pop
1168c     FF 1E 02 F6 | 	mov	local01, result3
11690     0C 4E 05 F1 | 	add	fp, #12
11694     A7 FA 61 FC | 	wrlong	result1, fp
11698     04 4E 05 F1 | 	add	fp, #4
1169c     A7 FC 61 FC | 	wrlong	result2, fp
116a0     04 4E 05 F1 | 	add	fp, #4
116a4     A7 1E 62 FC | 	wrlong	local01, fp
116a8     08 4E 85 F1 | 	sub	fp, #8
116ac     A7 12 02 F6 | 	mov	arg01, fp
116b0     0C 4E 85 F1 | 	sub	fp, #12
116b4     C8 9E BF FD | 	call	#_converttoint
116b8     04 4E 05 F1 | 	add	fp, #4
116bc     A7 FA 61 FC | 	wrlong	result1, fp
116c0     04 4E 85 F1 | 	sub	fp, #4
116c4                 | LR__1510
116c4                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
116c4     A7 16 02 FB | 	rdlong	arg03, fp
116c8     02 16 0E F2 | 	cmp	arg03, #2 wz
116cc     7C 00 90 5D |  if_ne	jmp	#LR__1511
116d0     C8 9C BF FD | 	call	#_pop
116d4     FF 1E 02 F6 | 	mov	local01, result3
116d8     0C 4E 05 F1 | 	add	fp, #12
116dc     A7 FA 61 FC | 	wrlong	result1, fp
116e0     04 4E 05 F1 | 	add	fp, #4
116e4     A7 FC 61 FC | 	wrlong	result2, fp
116e8     04 4E 05 F1 | 	add	fp, #4
116ec     A7 1E 62 FC | 	wrlong	local01, fp
116f0     08 4E 85 F1 | 	sub	fp, #8
116f4     A7 12 02 F6 | 	mov	arg01, fp
116f8     0C 4E 85 F1 | 	sub	fp, #12
116fc     80 9E BF FD | 	call	#_converttoint
11700     FD 1E 02 F6 | 	mov	local01, result1
11704     08 4E 05 F1 | 	add	fp, #8
11708     A7 1E 62 FC | 	wrlong	local01, fp
1170c     08 4E 85 F1 | 	sub	fp, #8
11710     88 9C BF FD | 	call	#_pop
11714     FF 1E 02 F6 | 	mov	local01, result3
11718     0C 4E 05 F1 | 	add	fp, #12
1171c     A7 FA 61 FC | 	wrlong	result1, fp
11720     04 4E 05 F1 | 	add	fp, #4
11724     A7 FC 61 FC | 	wrlong	result2, fp
11728     04 4E 05 F1 | 	add	fp, #4
1172c     A7 1E 62 FC | 	wrlong	local01, fp
11730     08 4E 85 F1 | 	sub	fp, #8
11734     A7 12 02 F6 | 	mov	arg01, fp
11738     0C 4E 85 F1 | 	sub	fp, #12
1173c     40 9E BF FD | 	call	#_converttoint
11740     04 4E 05 F1 | 	add	fp, #4
11744     A7 FA 61 FC | 	wrlong	result1, fp
11748     04 4E 85 F1 | 	sub	fp, #4
1174c                 | LR__1511
1174c                 | ' 
1174c                 | ' 
1174c                 | ' print
1174c     00 12 06 F6 | 	mov	arg01, #0
11750     40 4B B1 FD | 	call	#__system___getiolock_0541
11754     FD 12 02 F6 | 	mov	arg01, result1
11758     D4 F0 B0 FD | 	call	#__system___lockmem
1175c     00 12 06 F6 | 	mov	arg01, #0
11760     0A 14 06 F6 | 	mov	arg02, #10
11764     00 16 06 F6 | 	mov	arg03, #0
11768     60 FD B0 FD | 	call	#__system___basic_print_char
1176c     00 12 06 F6 | 	mov	arg01, #0
11770     20 4B B1 FD | 	call	#__system___getiolock_0541
11774     FD 00 68 FC | 	wrlong	#0, result1
11778     4A 00 00 FF 
1177c     88 E4 05 F1 | 	add	objptr, ##38024
11780     F2 20 02 FB | 	rdlong	local02, objptr
11784     07 00 00 FF 
11788     9C E5 05 F1 | 	add	objptr, ##3996
1178c     F2 20 62 FC | 	wrlong	local02, objptr
11790     52 00 00 FF 
11794     24 E4 85 F1 | 	sub	objptr, ##42020
11798                 | ' do 
11798                 | LR__1512
11798     20 4E 05 F1 | 	add	fp, #32
1179c     A7 12 02 F6 | 	mov	arg01, fp
117a0     20 4E 85 F1 | 	sub	fp, #32
117a4     52 00 00 FF 
117a8     24 E4 05 F1 | 	add	objptr, ##42020
117ac     F2 14 02 FB | 	rdlong	arg02, objptr
117b0     18 16 06 F6 | 	mov	arg03, #24
117b4     46 00 00 FF 
117b8     58 E5 85 F1 | 	sub	objptr, ##36184
117bc     30 E4 B0 FD | 	call	#_psram_spin2_read1
117c0     0B 00 00 FF 
117c4     CC E4 85 F1 | 	sub	objptr, ##5836
117c8                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
117c8                 | '   
117c8                 | '   if header(0)<> $FFFFFFFF then
117c8     20 4E 05 F1 | 	add	fp, #32
117cc     A7 20 02 FB | 	rdlong	local02, fp
117d0     20 4E 85 F1 | 	sub	fp, #32
117d4     FF FF 7F FF 
117d8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
117dc     A8 00 90 AD |  if_e	jmp	#LR__1514
117e0     38 4E 05 F1 | 	add	fp, #56
117e4     3F 16 06 F6 | 	mov	arg03, #63
117e8     28 16 62 FD | 	setq	arg03
117ec     A7 00 68 FC | 	wrlong	#0, fp
117f0     A7 12 02 F6 | 	mov	arg01, fp
117f4     10 4E 85 F1 | 	sub	fp, #16
117f8     A7 14 02 FB | 	rdlong	arg02, fp
117fc     04 4E 05 F1 | 	add	fp, #4
11800     A7 16 02 FB | 	rdlong	arg03, fp
11804     2C 4E 85 F1 | 	sub	fp, #44
11808     0B 00 00 FF 
1180c     CC E4 05 F1 | 	add	objptr, ##5836
11810     DC E3 B0 FD | 	call	#_psram_spin2_read1
11814     0B 00 00 FF 
11818     CC E4 85 F1 | 	sub	objptr, ##5836
1181c                 | '     longfill(linebuf,0,64)
1181c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
1181c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
1181c     20 4E 05 F1 | 	add	fp, #32
11820     A7 20 02 FB | 	rdlong	local02, fp
11824     1C 4E 85 F1 | 	sub	fp, #28
11828     A7 1E 02 FB | 	rdlong	local01, fp
1182c     04 4E 85 F1 | 	sub	fp, #4
11830     0F 21 52 F2 | 	cmps	local02, local01 wc
11834     30 00 90 CD |  if_b	jmp	#LR__1513
11838     20 4E 05 F1 | 	add	fp, #32
1183c     A7 20 02 FB | 	rdlong	local02, fp
11840     18 4E 85 F1 | 	sub	fp, #24
11844     A7 16 02 FB | 	rdlong	arg03, fp
11848     08 4E 85 F1 | 	sub	fp, #8
1184c     0B 21 5A F2 | 	cmps	local02, arg03 wcz
11850     14 00 90 1D |  if_a	jmp	#LR__1513
11854     38 4E 05 F1 | 	add	fp, #56
11858     A7 12 02 F6 | 	mov	arg01, fp
1185c     38 4E 85 F1 | 	sub	fp, #56
11860                 | ' 
11860                 | ' write(text)
11860     B0 DA B0 FD | 	call	#_hg010b_spin2_write
11864                 | ' crlf
11864     AC DF B0 FD | 	call	#_hg010b_spin2_crlf
11868                 | LR__1513
11868     34 4E 05 F1 | 	add	fp, #52
1186c     A7 20 02 FB | 	rdlong	local02, fp
11870     34 4E 85 F1 | 	sub	fp, #52
11874     52 00 00 FF 
11878     24 E4 05 F1 | 	add	objptr, ##42020
1187c     F2 20 62 FC | 	wrlong	local02, objptr
11880     52 00 00 FF 
11884     24 E4 85 F1 | 	sub	objptr, ##42020
11888                 | LR__1514
11888     34 4E 05 F1 | 	add	fp, #52
1188c     A7 20 02 FB | 	rdlong	local02, fp
11890     34 4E 85 F1 | 	sub	fp, #52
11894     FF FF 3F FF 
11898     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1189c     20 4E 05 51 |  if_ne	add	fp, #32
118a0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
118a4     20 4E 85 51 |  if_ne	sub	fp, #32
118a8     FF FF 7F 5F 
118ac     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
118b0     E4 FE 9F 5D |  if_ne	jmp	#LR__1512
118b4     A7 F0 03 F6 | 	mov	ptra, fp
118b8     B2 00 A0 FD | 	call	#popregs_
118bc                 | _do_list_ret
118bc     2D 00 64 FD | 	ret
118c0                 | 
118c0                 | ' 
118c0                 | ' '-------------------- load
118c0                 | ' 
118c0                 | ' sub do_load(amode=0 as integer)  
118c0                 | _do_load
118c0     01 4A 05 F6 | 	mov	COUNT_, #1
118c4     A8 00 A0 FD | 	call	#pushregs_
118c8     AC F0 07 F1 | 	add	ptra, #172
118cc     A7 12 62 FC | 	wrlong	arg01, fp
118d0     4A 00 00 FF 
118d4     80 E4 05 F1 | 	add	objptr, ##38016
118d8     F2 14 02 FB | 	rdlong	arg02, objptr
118dc     0A 13 02 F6 | 	mov	arg01, arg02
118e0     01 12 66 F0 | 	shl	arg01, #1
118e4     0A 13 02 F1 | 	add	arg01, arg02
118e8     02 12 66 F0 | 	shl	arg01, #2
118ec     03 00 00 FF 
118f0     04 E4 85 F1 | 	sub	objptr, ##1540
118f4     F2 12 02 F1 | 	add	arg01, objptr
118f8     09 15 02 FB | 	rdlong	arg02, arg01
118fc     1C 4E 05 F1 | 	add	fp, #28
11900     A7 14 62 FC | 	wrlong	arg02, fp
11904     8C 4E 05 F1 | 	add	fp, #140
11908     A7 12 02 F6 | 	mov	arg01, fp
1190c     47 00 00 FF 
11910     7C E4 85 F1 | 	sub	objptr, ##36476
11914     80 4E 85 F1 | 	sub	fp, #128
11918     09 4F 61 FC | 	wrlong	fp, arg01
1191c                 | ' numpar=compiledline(lineptr_e).result.uresult
1191c                 | ' lpoke varptr(line2$),varptr(line2)
1191c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1191c     0C 4E 85 F1 | 	sub	fp, #12
11920     A7 1E 02 FB | 	rdlong	local01, fp
11924     1C 4E 85 F1 | 	sub	fp, #28
11928     01 1E 56 F2 | 	cmps	local01, #1 wc
1192c     24 00 90 CD |  if_b	jmp	#LR__1520
11930     68 9A BF FD | 	call	#_pop
11934     04 4E 05 F1 | 	add	fp, #4
11938     A7 FA 61 FC | 	wrlong	result1, fp
1193c     04 4E 05 F1 | 	add	fp, #4
11940     A7 FC 61 FC | 	wrlong	result2, fp
11944     04 4E 05 F1 | 	add	fp, #4
11948     A7 FE 61 FC | 	wrlong	result3, fp
1194c     0C 4E 85 F1 | 	sub	fp, #12
11950     28 00 90 FD | 	jmp	#LR__1521
11954                 | LR__1520
11954     51 00 00 FF 
11958     D8 E5 05 F1 | 	add	objptr, ##41944
1195c     F2 1E 02 FB | 	rdlong	local01, objptr
11960     51 00 00 FF 
11964     D8 E5 85 F1 | 	sub	objptr, ##41944
11968     04 4E 05 F1 | 	add	fp, #4
1196c     A7 1E 62 FC | 	wrlong	local01, fp
11970     08 4E 05 F1 | 	add	fp, #8
11974     A7 3E 68 FC | 	wrlong	#31, fp
11978     0C 4E 85 F1 | 	sub	fp, #12
1197c                 | LR__1521
1197c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
1197c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
1197c     0C 4E 05 F1 | 	add	fp, #12
11980     A7 1E 02 FB | 	rdlong	local01, fp
11984     0C 4E 85 F1 | 	sub	fp, #12
11988     2B 1E 0E F2 | 	cmp	local01, #43 wz
1198c     24 00 90 5D |  if_ne	jmp	#LR__1522
11990     04 4E 05 F1 | 	add	fp, #4
11994     A7 12 02 FB | 	rdlong	arg01, fp
11998     04 4E 85 F1 | 	sub	fp, #4
1199c     74 9B BF FD | 	call	#_convertstring
119a0     04 4E 05 F1 | 	add	fp, #4
119a4     A7 FA 61 FC | 	wrlong	result1, fp
119a8     08 4E 05 F1 | 	add	fp, #8
119ac     A7 3E 68 FC | 	wrlong	#31, fp
119b0     0C 4E 85 F1 | 	sub	fp, #12
119b4                 | LR__1522
119b4                 | ' if t1.result_type=result_string then
119b4     0C 4E 05 F1 | 	add	fp, #12
119b8     A7 1E 02 FB | 	rdlong	local01, fp
119bc     0C 4E 85 F1 | 	sub	fp, #12
119c0     1F 1E 0E F2 | 	cmp	local01, #31 wz
119c4     E0 02 90 5D |  if_ne	jmp	#LR__1528
119c8                 | '   if amode<>1234 then do_new
119c8     A7 1E 02 FB | 	rdlong	local01, fp
119cc     02 00 00 FF 
119d0     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
119d4     24 0D B0 5D |  if_ne	call	#_do_new
119d8                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
119d8     04 4E 05 F1 | 	add	fp, #4
119dc     A7 12 02 FB | 	rdlong	arg01, fp
119e0     04 4E 85 F1 | 	sub	fp, #4
119e4     84 01 00 FF 
119e8     AC 14 06 F6 | 	mov	arg02, ##@LR__5448
119ec     68 EE B0 FD | 	call	#__system___string_cmp
119f0     00 FA 0D F2 | 	cmp	result1, #0 wz
119f4     24 00 90 5D |  if_ne	jmp	#LR__1523
119f8     51 00 00 FF 
119fc     D8 E5 05 F1 | 	add	objptr, ##41944
11a00     F2 1E 02 FB | 	rdlong	local01, objptr
11a04     51 00 00 FF 
11a08     D8 E5 85 F1 | 	sub	objptr, ##41944
11a0c     04 4E 05 F1 | 	add	fp, #4
11a10     A7 1E 62 FC | 	wrlong	local01, fp
11a14     04 4E 85 F1 | 	sub	fp, #4
11a18     20 00 90 FD | 	jmp	#LR__1524
11a1c                 | LR__1523
11a1c     04 4E 05 F1 | 	add	fp, #4
11a20     A7 1E 02 FB | 	rdlong	local01, fp
11a24     04 4E 85 F1 | 	sub	fp, #4
11a28     51 00 00 FF 
11a2c     D8 E5 05 F1 | 	add	objptr, ##41944
11a30     F2 1E 62 FC | 	wrlong	local01, objptr
11a34     51 00 00 FF 
11a38     D8 E5 85 F1 | 	sub	objptr, ##41944
11a3c                 | LR__1524
11a3c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
11a3c     09 12 06 F6 | 	mov	arg01, #9
11a40     80 3E B1 FD | 	call	#__system__close
11a44     09 1E 06 F6 | 	mov	local01, #9
11a48     4A 00 00 FF 
11a4c     94 E4 05 F1 | 	add	objptr, ##38036
11a50     F2 12 02 FB | 	rdlong	arg01, objptr
11a54     4A 00 00 FF 
11a58     94 E4 85 F1 | 	sub	objptr, ##38036
11a5c     84 01 00 FF 
11a60     AD 14 06 F6 | 	mov	arg02, ##@LR__5449
11a64     24 EE B0 FD | 	call	#__system___string_concat
11a68     FD 12 02 F6 | 	mov	arg01, result1
11a6c     04 4E 05 F1 | 	add	fp, #4
11a70     A7 14 02 FB | 	rdlong	arg02, fp
11a74     04 4E 85 F1 | 	sub	fp, #4
11a78     10 EE B0 FD | 	call	#__system___string_concat
11a7c     FD 14 02 F6 | 	mov	arg02, result1
11a80     0F 13 02 F6 | 	mov	arg01, local01
11a84     00 16 06 F6 | 	mov	arg03, #0
11a88     A8 F9 B0 FD | 	call	#__system___basic_open_string
11a8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11a90     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
11a94     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11a98     14 4E 05 F1 | 	add	fp, #20
11a9c     A7 FA 61 FC | 	wrlong	result1, fp
11aa0                 | '   r=geterr() 
11aa0                 | '   if r then 
11aa0     14 4E 85 F1 | 	sub	fp, #20
11aa4     50 01 90 AD |  if_e	jmp	#LR__1526
11aa8                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
11aa8     09 12 06 F6 | 	mov	arg01, #9
11aac     14 3E B1 FD | 	call	#__system__close
11ab0     09 1E 06 F6 | 	mov	local01, #9
11ab4     4A 00 00 FF 
11ab8     94 E4 05 F1 | 	add	objptr, ##38036
11abc     F2 12 02 FB | 	rdlong	arg01, objptr
11ac0     4A 00 00 FF 
11ac4     94 E4 85 F1 | 	sub	objptr, ##38036
11ac8     84 01 00 FF 
11acc     AF 14 06 F6 | 	mov	arg02, ##@LR__5450
11ad0     B8 ED B0 FD | 	call	#__system___string_concat
11ad4     FD 12 02 F6 | 	mov	arg01, result1
11ad8     04 4E 05 F1 | 	add	fp, #4
11adc     A7 14 02 FB | 	rdlong	arg02, fp
11ae0     04 4E 85 F1 | 	sub	fp, #4
11ae4     A4 ED B0 FD | 	call	#__system___string_concat
11ae8     FD 12 02 F6 | 	mov	arg01, result1
11aec     84 01 00 FF 
11af0     B1 14 06 F6 | 	mov	arg02, ##@LR__5451
11af4     94 ED B0 FD | 	call	#__system___string_concat
11af8     FD 14 02 F6 | 	mov	arg02, result1
11afc     0F 13 02 F6 | 	mov	arg01, local01
11b00     00 16 06 F6 | 	mov	arg03, #0
11b04     2C F9 B0 FD | 	call	#__system___basic_open_string
11b08     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11b0c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
11b10     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11b14     14 4E 05 F1 | 	add	fp, #20
11b18     A7 FA 61 FC | 	wrlong	result1, fp
11b1c                 | '     r=geterr() 
11b1c                 | '     if r then 
11b1c     14 4E 85 F1 | 	sub	fp, #20
11b20     A0 00 90 AD |  if_e	jmp	#LR__1525
11b24                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
11b24     00 12 06 F6 | 	mov	arg01, #0
11b28     68 47 B1 FD | 	call	#__system___getiolock_0541
11b2c     FD 12 02 F6 | 	mov	arg01, result1
11b30     FC EC B0 FD | 	call	#__system___lockmem
11b34     84 01 00 FF 
11b38     B6 14 06 F6 | 	mov	arg02, ##@LR__5452
11b3c     00 12 06 F6 | 	mov	arg01, #0
11b40     00 16 06 F6 | 	mov	arg03, #0
11b44     DC F9 B0 FD | 	call	#__system___basic_print_string
11b48     14 4E 05 F1 | 	add	fp, #20
11b4c     A7 14 02 FB | 	rdlong	arg02, fp
11b50     14 4E 85 F1 | 	sub	fp, #20
11b54     00 12 06 F6 | 	mov	arg01, #0
11b58     00 16 06 F6 | 	mov	arg03, #0
11b5c     0A 18 06 F6 | 	mov	arg04, #10
11b60     04 FA B0 FD | 	call	#__system___basic_print_integer
11b64     84 01 00 FF 
11b68     C4 14 06 F6 | 	mov	arg02, ##@LR__5453
11b6c     00 12 06 F6 | 	mov	arg01, #0
11b70     00 16 06 F6 | 	mov	arg03, #0
11b74     AC F9 B0 FD | 	call	#__system___basic_print_string
11b78     00 1E 06 F6 | 	mov	local01, #0
11b7c     14 4E 05 F1 | 	add	fp, #20
11b80     A7 12 02 FB | 	rdlong	arg01, fp
11b84     14 4E 85 F1 | 	sub	fp, #20
11b88     6C 13 B1 FD | 	call	#__system___strerror
11b8c     FD 14 02 F6 | 	mov	arg02, result1
11b90     0F 13 02 F6 | 	mov	arg01, local01
11b94     00 16 06 F6 | 	mov	arg03, #0
11b98     88 F9 B0 FD | 	call	#__system___basic_print_string
11b9c     00 12 06 F6 | 	mov	arg01, #0
11ba0     0A 14 06 F6 | 	mov	arg02, #10
11ba4     00 16 06 F6 | 	mov	arg03, #0
11ba8     20 F9 B0 FD | 	call	#__system___basic_print_char
11bac     00 12 06 F6 | 	mov	arg01, #0
11bb0     E0 46 B1 FD | 	call	#__system___getiolock_0541
11bb4     FD 00 68 FC | 	wrlong	#0, result1
11bb8     09 12 06 F6 | 	mov	arg01, #9
11bbc     04 3D B1 FD | 	call	#__system__close
11bc0     7C 01 90 FD | 	jmp	#LR__1530
11bc4                 | LR__1525
11bc4     51 00 00 FF 
11bc8     D8 E5 05 F1 | 	add	objptr, ##41944
11bcc     F2 12 02 FB | 	rdlong	arg01, objptr
11bd0     51 00 00 FF 
11bd4     D8 E5 85 F1 | 	sub	objptr, ##41944
11bd8     84 01 00 FF 
11bdc     C7 14 06 F6 | 	mov	arg02, ##@LR__5454
11be0     A8 EC B0 FD | 	call	#__system___string_concat
11be4     51 00 00 FF 
11be8     D8 E5 05 F1 | 	add	objptr, ##41944
11bec     F2 FA 61 FC | 	wrlong	result1, objptr
11bf0     51 00 00 FF 
11bf4     D8 E5 85 F1 | 	sub	objptr, ##41944
11bf8                 | LR__1526
11bf8                 | '   close #9: open currentdir$+"/"+loadname for input as #9
11bf8     09 12 06 F6 | 	mov	arg01, #9
11bfc     C4 3C B1 FD | 	call	#__system__close
11c00     09 1E 06 F6 | 	mov	local01, #9
11c04     4A 00 00 FF 
11c08     94 E4 05 F1 | 	add	objptr, ##38036
11c0c     F2 12 02 FB | 	rdlong	arg01, objptr
11c10     4A 00 00 FF 
11c14     94 E4 85 F1 | 	sub	objptr, ##38036
11c18     84 01 00 FF 
11c1c     CC 14 06 F6 | 	mov	arg02, ##@LR__5455
11c20     68 EC B0 FD | 	call	#__system___string_concat
11c24     FD 12 02 F6 | 	mov	arg01, result1
11c28     51 00 00 FF 
11c2c     D8 E5 05 F1 | 	add	objptr, ##41944
11c30     F2 14 02 FB | 	rdlong	arg02, objptr
11c34     51 00 00 FF 
11c38     D8 E5 85 F1 | 	sub	objptr, ##41944
11c3c     4C EC B0 FD | 	call	#__system___string_concat
11c40     FD 14 02 F6 | 	mov	arg02, result1
11c44     0F 13 02 F6 | 	mov	arg01, local01
11c48     00 16 06 F6 | 	mov	arg03, #0
11c4c     E4 F7 B0 FD | 	call	#__system___basic_open_string
11c50                 | '   do
11c50                 | LR__1527
11c50     09 12 06 F6 | 	mov	arg01, #9
11c54     E4 ED B0 FD | 	call	#__system___basic_read_line
11c58     FD 1E 02 F6 | 	mov	local01, result1
11c5c     37 00 00 FF 
11c60     1C E4 05 F1 | 	add	objptr, ##28188
11c64     F2 1E 62 FC | 	wrlong	local01, objptr
11c68     37 00 00 FF 
11c6c     1C E4 85 F1 | 	sub	objptr, ##28188
11c70     D4 FA BE FD | 	call	#_interpret
11c74     37 00 00 FF 
11c78     1C E4 05 F1 | 	add	objptr, ##28188
11c7c     F2 12 02 FB | 	rdlong	arg01, objptr
11c80     37 00 00 FF 
11c84     1C E4 85 F1 | 	sub	objptr, ##28188
11c88     84 01 00 FF 
11c8c     CE 14 06 F6 | 	mov	arg02, ##@LR__5456
11c90     C4 EB B0 FD | 	call	#__system___string_cmp
11c94     00 FA 0D F2 | 	cmp	result1, #0 wz
11c98     B4 FF 9F 5D |  if_ne	jmp	#LR__1527
11c9c                 | '   close #9   
11c9c     09 12 06 F6 | 	mov	arg01, #9
11ca0     20 3C B1 FD | 	call	#__system__close
11ca4     08 00 90 FD | 	jmp	#LR__1529
11ca8                 | LR__1528
11ca8     1E 12 06 F6 | 	mov	arg01, #30
11cac     F0 B5 B0 FD | 	call	#_printerror
11cb0                 | LR__1529
11cb0                 | ' print "Loaded ";currentdir$+"/"+loadname
11cb0     00 12 06 F6 | 	mov	arg01, #0
11cb4     DC 45 B1 FD | 	call	#__system___getiolock_0541
11cb8     FD 12 02 F6 | 	mov	arg01, result1
11cbc     70 EB B0 FD | 	call	#__system___lockmem
11cc0     84 01 00 FF 
11cc4     CF 14 06 F6 | 	mov	arg02, ##@LR__5457
11cc8     00 12 06 F6 | 	mov	arg01, #0
11ccc     00 16 06 F6 | 	mov	arg03, #0
11cd0     50 F8 B0 FD | 	call	#__system___basic_print_string
11cd4     00 1E 06 F6 | 	mov	local01, #0
11cd8     4A 00 00 FF 
11cdc     94 E4 05 F1 | 	add	objptr, ##38036
11ce0     F2 12 02 FB | 	rdlong	arg01, objptr
11ce4     4A 00 00 FF 
11ce8     94 E4 85 F1 | 	sub	objptr, ##38036
11cec     84 01 00 FF 
11cf0     D7 14 06 F6 | 	mov	arg02, ##@LR__5458
11cf4     94 EB B0 FD | 	call	#__system___string_concat
11cf8     FD 12 02 F6 | 	mov	arg01, result1
11cfc     51 00 00 FF 
11d00     D8 E5 05 F1 | 	add	objptr, ##41944
11d04     F2 14 02 FB | 	rdlong	arg02, objptr
11d08     51 00 00 FF 
11d0c     D8 E5 85 F1 | 	sub	objptr, ##41944
11d10     78 EB B0 FD | 	call	#__system___string_concat
11d14     FD 14 02 F6 | 	mov	arg02, result1
11d18     0F 13 02 F6 | 	mov	arg01, local01
11d1c     00 16 06 F6 | 	mov	arg03, #0
11d20     00 F8 B0 FD | 	call	#__system___basic_print_string
11d24     00 12 06 F6 | 	mov	arg01, #0
11d28     0A 14 06 F6 | 	mov	arg02, #10
11d2c     00 16 06 F6 | 	mov	arg03, #0
11d30     98 F7 B0 FD | 	call	#__system___basic_print_char
11d34     00 12 06 F6 | 	mov	arg01, #0
11d38     58 45 B1 FD | 	call	#__system___getiolock_0541
11d3c     FD 00 68 FC | 	wrlong	#0, result1
11d40                 | LR__1530
11d40     A7 F0 03 F6 | 	mov	ptra, fp
11d44     B2 00 A0 FD | 	call	#popregs_
11d48                 | _do_load_ret
11d48     2D 00 64 FD | 	ret
11d4c                 | 
11d4c                 | ' 
11d4c                 | ' '-------------------- log
11d4c                 | ' 
11d4c                 | ' sub do_log
11d4c                 | _do_log
11d4c     01 4A 05 F6 | 	mov	COUNT_, #1
11d50     A8 00 A0 FD | 	call	#pushregs_
11d54     14 F0 07 F1 | 	add	ptra, #20
11d58     4A 00 00 FF 
11d5c     80 E4 05 F1 | 	add	objptr, ##38016
11d60     F2 1E 02 FB | 	rdlong	local01, objptr
11d64     0F 17 02 F6 | 	mov	arg03, local01
11d68     01 16 66 F0 | 	shl	arg03, #1
11d6c     0F 17 02 F1 | 	add	arg03, local01
11d70     02 16 66 F0 | 	shl	arg03, #2
11d74     03 00 00 FF 
11d78     04 E4 85 F1 | 	sub	objptr, ##1540
11d7c     F2 16 02 F1 | 	add	arg03, objptr
11d80     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11d84     0C 4E 05 F1 | 	add	fp, #12
11d88     A7 16 62 FC | 	wrlong	arg03, fp
11d8c                 | ' 
11d8c                 | ' numpar=compiledline(lineptr_e).result.uresult
11d8c                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
11d8c     0C 4E 85 F1 | 	sub	fp, #12
11d90     47 00 00 FF 
11d94     7C E4 85 F1 | 	sub	objptr, ##36476
11d98     0C 4E 05 51 |  if_ne	add	fp, #12
11d9c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11da0     0C 4E 85 51 |  if_ne	sub	fp, #12
11da4     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
11da8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1540
11dac     00 12 06 F6 | 	mov	arg01, #0
11db0     E0 44 B1 FD | 	call	#__system___getiolock_0541
11db4     FD 12 02 F6 | 	mov	arg01, result1
11db8     74 EA B0 FD | 	call	#__system___lockmem
11dbc     84 01 00 FF 
11dc0     D9 14 06 F6 | 	mov	arg02, ##@LR__5459
11dc4     00 12 06 F6 | 	mov	arg01, #0
11dc8     00 16 06 F6 | 	mov	arg03, #0
11dcc     54 F7 B0 FD | 	call	#__system___basic_print_string
11dd0     00 12 06 F6 | 	mov	arg01, #0
11dd4     BC 44 B1 FD | 	call	#__system___getiolock_0541
11dd8     FD 00 68 FC | 	wrlong	#0, result1
11ddc     27 12 06 F6 | 	mov	arg01, #39
11de0     BC B4 B0 FD | 	call	#_printerror
11de4     D0 00 90 FD | 	jmp	#LR__1543
11de8                 | LR__1540
11de8                 | ' if numpar=2 then 
11de8     0C 4E 05 F1 | 	add	fp, #12
11dec     A7 1E 02 FB | 	rdlong	local01, fp
11df0     0C 4E 85 F1 | 	sub	fp, #12
11df4     02 1E 0E F2 | 	cmp	local01, #2 wz
11df8     48 00 90 5D |  if_ne	jmp	#LR__1541
11dfc     9C 95 BF FD | 	call	#_pop
11e00     FF 1E 02 F6 | 	mov	local01, result3
11e04     A7 FA 61 FC | 	wrlong	result1, fp
11e08     04 4E 05 F1 | 	add	fp, #4
11e0c     A7 FC 61 FC | 	wrlong	result2, fp
11e10     04 4E 05 F1 | 	add	fp, #4
11e14     A7 1E 62 FC | 	wrlong	local01, fp
11e18     08 4E 85 F1 | 	sub	fp, #8
11e1c     A7 12 02 F6 | 	mov	arg01, fp
11e20     18 98 BF FD | 	call	#_converttofloat
11e24     FD 14 02 F6 | 	mov	arg02, result1
11e28     FC 16 20 FF 
11e2c     54 12 06 F6 | 	mov	arg01, ##1076754516
11e30     80 25 B1 FD | 	call	#__system____builtin_logbase
11e34     10 4E 05 F1 | 	add	fp, #16
11e38     A7 FA 61 FC | 	wrlong	result1, fp
11e3c     10 4E 85 F1 | 	sub	fp, #16
11e40     10 00 90 FD | 	jmp	#LR__1542
11e44                 | LR__1541
11e44     10 4E 05 F1 | 	add	fp, #16
11e48     00 C0 9F FF 
11e4c     A7 00 68 FC | 	wrlong	##1065353216, fp
11e50     10 4E 85 F1 | 	sub	fp, #16
11e54                 | LR__1542
11e54     44 95 BF FD | 	call	#_pop
11e58     FF 1E 02 F6 | 	mov	local01, result3
11e5c     A7 FA 61 FC | 	wrlong	result1, fp
11e60     04 4E 05 F1 | 	add	fp, #4
11e64     A7 FC 61 FC | 	wrlong	result2, fp
11e68     04 4E 05 F1 | 	add	fp, #4
11e6c     A7 1E 62 FC | 	wrlong	local01, fp
11e70     08 4E 85 F1 | 	sub	fp, #8
11e74     A7 12 02 F6 | 	mov	arg01, fp
11e78     C0 97 BF FD | 	call	#_converttofloat
11e7c     FD 14 02 F6 | 	mov	arg02, result1
11e80     FC 16 20 FF 
11e84     54 12 06 F6 | 	mov	arg01, ##1076754516
11e88     28 25 B1 FD | 	call	#__system____builtin_logbase
11e8c     FD 12 02 F6 | 	mov	arg01, result1
11e90     10 4E 05 F1 | 	add	fp, #16
11e94     A7 14 02 FB | 	rdlong	arg02, fp
11e98     10 4E 85 F1 | 	sub	fp, #16
11e9c     48 17 B1 FD | 	call	#__system___float_div
11ea0     A7 FA 61 FC | 	wrlong	result1, fp
11ea4     08 4E 05 F1 | 	add	fp, #8
11ea8     A7 3C 68 FC | 	wrlong	#30, fp
11eac     08 4E 85 F1 | 	sub	fp, #8
11eb0     A7 12 02 F6 | 	mov	arg01, fp
11eb4     7C 95 BF FD | 	call	#_push
11eb8                 | LR__1543
11eb8     A7 F0 03 F6 | 	mov	ptra, fp
11ebc     B2 00 A0 FD | 	call	#popregs_
11ec0                 | _do_log_ret
11ec0     2D 00 64 FD | 	ret
11ec4                 | 
11ec4                 | ' 
11ec4                 | ' '-------------------- lpeek
11ec4                 | ' 
11ec4                 | ' sub do_lpeek
11ec4                 | _do_lpeek
11ec4     00 4A 05 F6 | 	mov	COUNT_, #0
11ec8     A8 00 A0 FD | 	call	#pushregs_
11ecc     14 F0 07 F1 | 	add	ptra, #20
11ed0     C8 94 BF FD | 	call	#_pop
11ed4     A7 FA 61 FC | 	wrlong	result1, fp
11ed8     04 4E 05 F1 | 	add	fp, #4
11edc     A7 FC 61 FC | 	wrlong	result2, fp
11ee0     04 4E 05 F1 | 	add	fp, #4
11ee4     A7 FE 61 FC | 	wrlong	result3, fp
11ee8     08 4E 85 F1 | 	sub	fp, #8
11eec     A7 12 02 F6 | 	mov	arg01, fp
11ef0     8C 96 BF FD | 	call	#_converttoint
11ef4     0C 4E 05 F1 | 	add	fp, #12
11ef8     A7 FA 61 FC | 	wrlong	result1, fp
11efc                 | ' 
11efc                 | ' t1=pop()
11efc                 | ' a=converttoint(t1)
11efc                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
11efc     0C 4E 85 F1 | 	sub	fp, #12
11f00     00 04 00 FF 
11f04     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11f08     1C 00 90 3D |  if_ae	jmp	#LR__1550
11f0c     0C 4E 05 F1 | 	add	fp, #12
11f10     A7 12 02 FB | 	rdlong	arg01, fp
11f14     09 FB 01 FB | 	rdlong	result1, arg01
11f18     04 4E 05 F1 | 	add	fp, #4
11f1c     A7 FA 61 FC | 	wrlong	result1, fp
11f20     10 4E 85 F1 | 	sub	fp, #16
11f24     1C 00 90 FD | 	jmp	#LR__1551
11f28                 | LR__1550
11f28     0C 4E 05 F1 | 	add	fp, #12
11f2c     A7 12 02 FB | 	rdlong	arg01, fp
11f30     0C 4E 85 F1 | 	sub	fp, #12
11f34     FC B5 B0 FD | 	call	#_pslpeek
11f38     10 4E 05 F1 | 	add	fp, #16
11f3c     A7 FA 61 FC | 	wrlong	result1, fp
11f40     10 4E 85 F1 | 	sub	fp, #16
11f44                 | LR__1551
11f44     08 4E 05 F1 | 	add	fp, #8
11f48     A7 3A 68 FC | 	wrlong	#29, fp
11f4c     08 4E 05 F1 | 	add	fp, #8
11f50     A7 12 02 FB | 	rdlong	arg01, fp
11f54     10 4E 85 F1 | 	sub	fp, #16
11f58     A7 12 62 FC | 	wrlong	arg01, fp
11f5c     A7 12 02 F6 | 	mov	arg01, fp
11f60     D0 94 BF FD | 	call	#_push
11f64     A7 F0 03 F6 | 	mov	ptra, fp
11f68     B2 00 A0 FD | 	call	#popregs_
11f6c                 | _do_lpeek_ret
11f6c     2D 00 64 FD | 	ret
11f70                 | 
11f70                 | ' 
11f70                 | ' '-------------------- lpoke
11f70                 | ' 
11f70                 | ' sub do_lpoke
11f70                 | _do_lpoke
11f70     01 4A 05 F6 | 	mov	COUNT_, #1
11f74     A8 00 A0 FD | 	call	#pushregs_
11f78     20 F0 07 F1 | 	add	ptra, #32
11f7c     1C 94 BF FD | 	call	#_pop
11f80     FD 14 02 F6 | 	mov	arg02, result1
11f84     FE 12 02 F6 | 	mov	arg01, result2
11f88     FF 1E 02 F6 | 	mov	local01, result3
11f8c     A7 14 62 FC | 	wrlong	arg02, fp
11f90     04 4E 05 F1 | 	add	fp, #4
11f94     A7 12 62 FC | 	wrlong	arg01, fp
11f98     04 4E 05 F1 | 	add	fp, #4
11f9c     A7 1E 62 FC | 	wrlong	local01, fp
11fa0     08 4E 85 F1 | 	sub	fp, #8
11fa4     F4 93 BF FD | 	call	#_pop
11fa8     FF 1E 02 F6 | 	mov	local01, result3
11fac     0C 4E 05 F1 | 	add	fp, #12
11fb0     A7 FA 61 FC | 	wrlong	result1, fp
11fb4     04 4E 05 F1 | 	add	fp, #4
11fb8     A7 FC 61 FC | 	wrlong	result2, fp
11fbc     04 4E 05 F1 | 	add	fp, #4
11fc0     A7 1E 62 FC | 	wrlong	local01, fp
11fc4     08 4E 85 F1 | 	sub	fp, #8
11fc8     A7 12 02 F6 | 	mov	arg01, fp
11fcc     0C 4E 85 F1 | 	sub	fp, #12
11fd0     AC 95 BF FD | 	call	#_converttoint
11fd4     18 4E 05 F1 | 	add	fp, #24
11fd8     A7 FA 61 FC | 	wrlong	result1, fp
11fdc     18 4E 85 F1 | 	sub	fp, #24
11fe0     A7 12 02 F6 | 	mov	arg01, fp
11fe4     98 95 BF FD | 	call	#_converttoint
11fe8     1C 4E 05 F1 | 	add	fp, #28
11fec     A7 FA 61 FC | 	wrlong	result1, fp
11ff0                 | ' 
11ff0                 | ' t1=pop() 'value
11ff0                 | ' t2=pop() 
11ff0                 | ' a=converttoint(t2) : v=converttoint(t1)
11ff0                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
11ff0     04 4E 85 F1 | 	sub	fp, #4
11ff4     A7 1E 02 FB | 	rdlong	local01, fp
11ff8     18 4E 85 F1 | 	sub	fp, #24
11ffc     00 04 00 FF 
12000     00 1E 16 F2 | 	cmp	local01, ##524288 wc
12004     1C 00 90 3D |  if_ae	jmp	#LR__1560
12008     18 4E 05 F1 | 	add	fp, #24
1200c     A7 12 02 FB | 	rdlong	arg01, fp
12010     04 4E 05 F1 | 	add	fp, #4
12014     A7 14 02 FB | 	rdlong	arg02, fp
12018     1C 4E 85 F1 | 	sub	fp, #28
1201c     09 15 62 FC | 	wrlong	arg02, arg01
12020     18 00 90 FD | 	jmp	#LR__1561
12024                 | LR__1560
12024     18 4E 05 F1 | 	add	fp, #24
12028     A7 12 02 FB | 	rdlong	arg01, fp
1202c     04 4E 05 F1 | 	add	fp, #4
12030     A7 14 02 FB | 	rdlong	arg02, fp
12034     1C 4E 85 F1 | 	sub	fp, #28
12038     C8 B3 B0 FD | 	call	#_pslpoke
1203c                 | LR__1561
1203c     A7 F0 03 F6 | 	mov	ptra, fp
12040     B2 00 A0 FD | 	call	#popregs_
12044                 | _do_lpoke_ret
12044     2D 00 64 FD | 	ret
12048                 | 
12048                 | ' 
12048                 | ' '-------------------- mid$
12048                 | ' 
12048                 | ' sub do_mid
12048                 | _do_mid
12048     00 4A 05 F6 | 	mov	COUNT_, #0
1204c     A8 00 A0 FD | 	call	#pushregs_
12050     18 F0 07 F1 | 	add	ptra, #24
12054     4A 00 00 FF 
12058     80 E4 05 F1 | 	add	objptr, ##38016
1205c     F2 16 02 FB | 	rdlong	arg03, objptr
12060     0B 15 02 F6 | 	mov	arg02, arg03
12064     01 14 66 F0 | 	shl	arg02, #1
12068     0B 15 02 F1 | 	add	arg02, arg03
1206c     02 14 66 F0 | 	shl	arg02, #2
12070     03 00 00 FF 
12074     04 E4 85 F1 | 	sub	objptr, ##1540
12078     F2 14 02 F1 | 	add	arg02, objptr
1207c     0A 17 02 FB | 	rdlong	arg03, arg02
12080     0C 4E 05 F1 | 	add	fp, #12
12084     A7 16 62 FC | 	wrlong	arg03, fp
12088                 | ' 
12088                 | ' numpar=compiledline(lineptr_e).result.uresult
12088                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
12088     0C 4E 85 F1 | 	sub	fp, #12
1208c     03 16 0E F2 | 	cmp	arg03, #3 wz
12090     47 00 00 FF 
12094     7C E4 85 F1 | 	sub	objptr, ##36476
12098     3C 00 90 AD |  if_e	jmp	#LR__1570
1209c     00 12 06 F6 | 	mov	arg01, #0
120a0     F0 41 B1 FD | 	call	#__system___getiolock_0541
120a4     FD 12 02 F6 | 	mov	arg01, result1
120a8     84 E7 B0 FD | 	call	#__system___lockmem
120ac     84 01 00 FF 
120b0     DF 14 06 F6 | 	mov	arg02, ##@LR__5460
120b4     00 12 06 F6 | 	mov	arg01, #0
120b8     00 16 06 F6 | 	mov	arg03, #0
120bc     64 F4 B0 FD | 	call	#__system___basic_print_string
120c0     00 12 06 F6 | 	mov	arg01, #0
120c4     CC 41 B1 FD | 	call	#__system___getiolock_0541
120c8     FD 00 68 FC | 	wrlong	#0, result1
120cc     27 12 06 F6 | 	mov	arg01, #39
120d0     CC B1 B0 FD | 	call	#_printerror
120d4     28 01 90 FD | 	jmp	#LR__1573
120d8                 | LR__1570
120d8     C0 92 BF FD | 	call	#_pop
120dc     FF 16 02 F6 | 	mov	arg03, result3
120e0     A7 FA 61 FC | 	wrlong	result1, fp
120e4     04 4E 05 F1 | 	add	fp, #4
120e8     A7 FC 61 FC | 	wrlong	result2, fp
120ec     04 4E 05 F1 | 	add	fp, #4
120f0     A7 16 62 FC | 	wrlong	arg03, fp
120f4     08 4E 85 F1 | 	sub	fp, #8
120f8     A7 12 02 F6 | 	mov	arg01, fp
120fc     80 94 BF FD | 	call	#_converttoint
12100     FD 16 02 F6 | 	mov	arg03, result1
12104     14 4E 05 F1 | 	add	fp, #20
12108     A7 16 62 FC | 	wrlong	arg03, fp
1210c     14 4E 85 F1 | 	sub	fp, #20
12110     88 92 BF FD | 	call	#_pop
12114     FF 16 02 F6 | 	mov	arg03, result3
12118     A7 FA 61 FC | 	wrlong	result1, fp
1211c     04 4E 05 F1 | 	add	fp, #4
12120     A7 FC 61 FC | 	wrlong	result2, fp
12124     04 4E 05 F1 | 	add	fp, #4
12128     A7 16 62 FC | 	wrlong	arg03, fp
1212c     08 4E 85 F1 | 	sub	fp, #8
12130     A7 12 02 F6 | 	mov	arg01, fp
12134     48 94 BF FD | 	call	#_converttoint
12138     FD 16 02 F6 | 	mov	arg03, result1
1213c     10 4E 05 F1 | 	add	fp, #16
12140     A7 16 62 FC | 	wrlong	arg03, fp
12144     10 4E 85 F1 | 	sub	fp, #16
12148     50 92 BF FD | 	call	#_pop
1214c     FF 16 02 F6 | 	mov	arg03, result3
12150     A7 FA 61 FC | 	wrlong	result1, fp
12154     04 4E 05 F1 | 	add	fp, #4
12158     A7 FC 61 FC | 	wrlong	result2, fp
1215c     04 4E 05 F1 | 	add	fp, #4
12160     A7 16 62 FC | 	wrlong	arg03, fp
12164                 | ' t1=pop() : arg2=converttoint(t1)
12164                 | ' t1=pop() : arg1=converttoint(t1)
12164                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12164     08 4E 85 F1 | 	sub	fp, #8
12168     2B 16 0E F2 | 	cmp	arg03, #43 wz
1216c     18 00 90 5D |  if_ne	jmp	#LR__1571
12170     A7 12 02 FB | 	rdlong	arg01, fp
12174     9C 93 BF FD | 	call	#_convertstring
12178     A7 FA 61 FC | 	wrlong	result1, fp
1217c     08 4E 05 F1 | 	add	fp, #8
12180     A7 3E 68 FC | 	wrlong	#31, fp
12184     08 4E 85 F1 | 	sub	fp, #8
12188                 | LR__1571
12188                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
12188     08 4E 05 F1 | 	add	fp, #8
1218c     A7 16 02 FB | 	rdlong	arg03, fp
12190     08 4E 85 F1 | 	sub	fp, #8
12194     1F 16 0E F2 | 	cmp	arg03, #31 wz
12198     3C 00 90 AD |  if_e	jmp	#LR__1572
1219c     00 12 06 F6 | 	mov	arg01, #0
121a0     F0 40 B1 FD | 	call	#__system___getiolock_0541
121a4     FD 12 02 F6 | 	mov	arg01, result1
121a8     84 E6 B0 FD | 	call	#__system___lockmem
121ac     84 01 00 FF 
121b0     E6 14 06 F6 | 	mov	arg02, ##@LR__5461
121b4     00 12 06 F6 | 	mov	arg01, #0
121b8     00 16 06 F6 | 	mov	arg03, #0
121bc     64 F3 B0 FD | 	call	#__system___basic_print_string
121c0     00 12 06 F6 | 	mov	arg01, #0
121c4     CC 40 B1 FD | 	call	#__system___getiolock_0541
121c8     FD 00 68 FC | 	wrlong	#0, result1
121cc     0F 12 06 F6 | 	mov	arg01, #15
121d0     CC B0 B0 FD | 	call	#_printerror
121d4     28 00 90 FD | 	jmp	#LR__1573
121d8                 | LR__1572
121d8     A7 12 02 FB | 	rdlong	arg01, fp
121dc     10 4E 05 F1 | 	add	fp, #16
121e0     A7 14 02 FB | 	rdlong	arg02, fp
121e4     04 4E 05 F1 | 	add	fp, #4
121e8     A7 16 02 FB | 	rdlong	arg03, fp
121ec     14 4E 85 F1 | 	sub	fp, #20
121f0     D0 07 B1 FD | 	call	#__system__Mid_S
121f4     A7 FA 61 FC | 	wrlong	result1, fp
121f8     A7 12 02 F6 | 	mov	arg01, fp
121fc     34 92 BF FD | 	call	#_push
12200                 | LR__1573
12200     A7 F0 03 F6 | 	mov	ptra, fp
12204     B2 00 A0 FD | 	call	#popregs_
12208                 | _do_mid_ret
12208     2D 00 64 FD | 	ret
1220c                 | 
1220c                 | ' 
1220c                 | ' '-------------------- mode
1220c                 | ' 
1220c                 | ' sub do_mode
1220c                 | _do_mode
1220c     05 4A 05 F6 | 	mov	COUNT_, #5
12210     A8 00 A0 FD | 	call	#pushregs_
12214     84 91 BF FD | 	call	#_pop
12218     FD 1E 02 F6 | 	mov	local01, result1
1221c     FE 20 02 F6 | 	mov	local02, result2
12220     FF 22 02 F6 | 	mov	local03, result3
12224                 | ' t1=pop() 
12224                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12224     1E 22 0E F2 | 	cmp	local03, #30 wz
12228     10 00 90 5D |  if_ne	jmp	#LR__1580
1222c     0F 13 02 F6 | 	mov	arg01, local01
12230     00 14 06 F6 | 	mov	arg02, #0
12234     74 16 B1 FD | 	call	#__system___float_tointeger
12238     FD 1E 02 F6 | 	mov	local01, result1
1223c                 | LR__1580
1223c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1223c     1F 22 0E F2 | 	cmp	local03, #31 wz
12240     18 00 90 5D |  if_ne	jmp	#LR__1581
12244     0F 13 02 F6 | 	mov	arg01, local01
12248     A4 19 B1 FD | 	call	#__system____builtin_atof
1224c     FD 12 02 F6 | 	mov	arg01, result1
12250     00 14 06 F6 | 	mov	arg02, #0
12254     54 16 B1 FD | 	call	#__system___float_tointeger
12258     FD 1E 02 F6 | 	mov	local01, result1
1225c                 | LR__1581
1225c                 | ' select case t1.result.iresult
1225c     0F 25 02 F6 | 	mov	local04, local01
12260     05 24 26 F3 | 	fle	local04, #5
12264     30 24 62 FD | 	jmprel	local04
12268                 | LR__1582
12268     14 00 90 FD | 	jmp	#LR__1583
1226c     A8 00 90 FD | 	jmp	#LR__1584
12270     10 01 90 FD | 	jmp	#LR__1585
12274     78 01 90 FD | 	jmp	#LR__1586
12278     E0 01 90 FD | 	jmp	#LR__1587
1227c     70 02 90 FD | 	jmp	#LR__1588
12280                 | LR__1583
12280     37 00 00 FF 
12284     40 E4 05 F1 | 	add	objptr, ##28224
12288     F2 02 68 FC | 	wrlong	#1, objptr
1228c     04 E4 85 F1 | 	sub	objptr, #4
12290     F2 34 69 FC | 	wrlong	#154, objptr
12294     19 00 00 FF 
12298     D8 E4 05 F1 | 	add	objptr, ##13016
1229c     F2 02 68 FC | 	wrlong	#1, objptr
122a0     19 00 00 FF 
122a4     DC E4 85 F1 | 	sub	objptr, ##13020
122a8     F2 26 69 FC | 	wrlong	#147, objptr
122ac     37 00 00 FF 
122b0     38 E4 85 F1 | 	sub	objptr, ##28216
122b4     04 12 06 F6 | 	mov	arg01, #4
122b8     48 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
122bc     37 00 00 FF 
122c0     3C E4 05 F1 | 	add	objptr, ##28220
122c4     F2 12 02 FB | 	rdlong	arg01, objptr
122c8     04 E4 85 F1 | 	sub	objptr, #4
122cc     F2 14 02 FB | 	rdlong	arg02, objptr
122d0                 | ' 
122d0                 | ' write_color:=ff
122d0     36 00 00 FF 
122d4     F7 E5 85 F1 | 	sub	objptr, ##28151
122d8     F2 12 62 FC | 	wrlong	arg01, objptr
122dc                 | ' write_background:=bb
122dc     04 E4 05 F1 | 	add	objptr, #4
122e0     F2 14 62 FC | 	wrlong	arg02, objptr
122e4     01 00 00 FF 
122e8     00 EA 05 F1 | 	add	ptr__dat__, ##512
122ec     51 00 00 FF 
122f0     73 E5 05 F1 | 	add	objptr, ##41843
122f4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
122f8     04 E4 85 F1 | 	sub	objptr, #4
122fc     03 00 80 FF 
12300     F2 30 69 FC | 	wrlong	##1688, objptr
12304     51 00 00 FF 
12308     B4 E5 85 F1 | 	sub	objptr, ##41908
1230c     01 00 00 FF 
12310     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12314     D8 01 90 FD | 	jmp	#LR__1588
12318                 | LR__1584
12318     37 00 00 FF 
1231c     40 E4 05 F1 | 	add	objptr, ##28224
12320     F2 00 68 FC | 	wrlong	#0, objptr
12324     04 E4 85 F1 | 	sub	objptr, #4
12328     F2 2E 68 FC | 	wrlong	#23, objptr
1232c     19 00 00 FF 
12330     D8 E4 05 F1 | 	add	objptr, ##13016
12334     F2 00 68 FC | 	wrlong	#0, objptr
12338     19 00 00 FF 
1233c     DC E4 85 F1 | 	sub	objptr, ##13020
12340     F2 00 68 FC | 	wrlong	#0, objptr
12344     37 00 00 FF 
12348     38 E4 85 F1 | 	sub	objptr, ##28216
1234c     00 12 06 F6 | 	mov	arg01, #0
12350     B0 CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
12354     37 00 00 FF 
12358     3C E4 05 F1 | 	add	objptr, ##28220
1235c     F2 12 02 FB | 	rdlong	arg01, objptr
12360     04 E4 85 F1 | 	sub	objptr, #4
12364     F2 14 02 FB | 	rdlong	arg02, objptr
12368                 | ' 
12368                 | ' write_color:=ff
12368     36 00 00 FF 
1236c     F7 E5 85 F1 | 	sub	objptr, ##28151
12370     F2 12 62 FC | 	wrlong	arg01, objptr
12374                 | ' write_background:=bb
12374     04 E4 05 F1 | 	add	objptr, #4
12378     F2 14 62 FC | 	wrlong	arg02, objptr
1237c     45 E4 85 F1 | 	sub	objptr, #69
12380     6C 01 90 FD | 	jmp	#LR__1588
12384                 | LR__1585
12384     37 00 00 FF 
12388     40 E4 05 F1 | 	add	objptr, ##28224
1238c     F2 00 68 FC | 	wrlong	#0, objptr
12390     04 E4 85 F1 | 	sub	objptr, #4
12394     F2 6A 69 FC | 	wrlong	#181, objptr
12398     19 00 00 FF 
1239c     D8 E4 05 F1 | 	add	objptr, ##13016
123a0     F2 00 68 FC | 	wrlong	#0, objptr
123a4     19 00 00 FF 
123a8     DC E4 85 F1 | 	sub	objptr, ##13020
123ac     F2 00 68 FC | 	wrlong	#0, objptr
123b0     37 00 00 FF 
123b4     38 E4 85 F1 | 	sub	objptr, ##28216
123b8     00 12 06 F6 | 	mov	arg01, #0
123bc     44 CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
123c0     37 00 00 FF 
123c4     3C E4 05 F1 | 	add	objptr, ##28220
123c8     F2 12 02 FB | 	rdlong	arg01, objptr
123cc     04 E4 85 F1 | 	sub	objptr, #4
123d0     F2 14 02 FB | 	rdlong	arg02, objptr
123d4                 | ' 
123d4                 | ' write_color:=ff
123d4     36 00 00 FF 
123d8     F7 E5 85 F1 | 	sub	objptr, ##28151
123dc     F2 12 62 FC | 	wrlong	arg01, objptr
123e0                 | ' write_background:=bb
123e0     04 E4 05 F1 | 	add	objptr, #4
123e4     F2 14 62 FC | 	wrlong	arg02, objptr
123e8     45 E4 85 F1 | 	sub	objptr, #69
123ec     00 01 90 FD | 	jmp	#LR__1588
123f0                 | LR__1586
123f0     37 00 00 FF 
123f4     40 E4 05 F1 | 	add	objptr, ##28224
123f8     F2 00 68 FC | 	wrlong	#0, objptr
123fc     04 E4 85 F1 | 	sub	objptr, #4
12400     F2 1E 68 FC | 	wrlong	#15, objptr
12404     19 00 00 FF 
12408     D8 E4 05 F1 | 	add	objptr, ##13016
1240c     F2 00 68 FC | 	wrlong	#0, objptr
12410     19 00 00 FF 
12414     DC E4 85 F1 | 	sub	objptr, ##13020
12418     F2 00 68 FC | 	wrlong	#0, objptr
1241c     37 00 00 FF 
12420     38 E4 85 F1 | 	sub	objptr, ##28216
12424     00 12 06 F6 | 	mov	arg01, #0
12428     D8 C9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1242c     37 00 00 FF 
12430     3C E4 05 F1 | 	add	objptr, ##28220
12434     F2 12 02 FB | 	rdlong	arg01, objptr
12438     04 E4 85 F1 | 	sub	objptr, #4
1243c     F2 14 02 FB | 	rdlong	arg02, objptr
12440                 | ' 
12440                 | ' write_color:=ff
12440     36 00 00 FF 
12444     F7 E5 85 F1 | 	sub	objptr, ##28151
12448     F2 12 62 FC | 	wrlong	arg01, objptr
1244c                 | ' write_background:=bb
1244c     04 E4 05 F1 | 	add	objptr, #4
12450     F2 14 62 FC | 	wrlong	arg02, objptr
12454     45 E4 85 F1 | 	sub	objptr, #69
12458     94 00 90 FD | 	jmp	#LR__1588
1245c                 | LR__1587
1245c     37 00 00 FF 
12460     40 E4 05 F1 | 	add	objptr, ##28224
12464     F2 02 68 FC | 	wrlong	#1, objptr
12468     04 E4 85 F1 | 	sub	objptr, #4
1246c     F2 02 68 FC | 	wrlong	#1, objptr
12470     19 00 00 FF 
12474     D8 E4 05 F1 | 	add	objptr, ##13016
12478     F2 02 68 FC | 	wrlong	#1, objptr
1247c     19 00 00 FF 
12480     DC E4 85 F1 | 	sub	objptr, ##13020
12484     F2 1C 68 FC | 	wrlong	#14, objptr
12488     37 00 00 FF 
1248c     38 E4 85 F1 | 	sub	objptr, ##28216
12490     04 12 06 F6 | 	mov	arg01, #4
12494     6C C9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
12498     37 00 00 FF 
1249c     3C E4 05 F1 | 	add	objptr, ##28220
124a0     F2 12 02 FB | 	rdlong	arg01, objptr
124a4     04 E4 85 F1 | 	sub	objptr, #4
124a8     F2 14 02 FB | 	rdlong	arg02, objptr
124ac                 | ' 
124ac                 | ' write_color:=ff
124ac     36 00 00 FF 
124b0     F7 E5 85 F1 | 	sub	objptr, ##28151
124b4     F2 12 62 FC | 	wrlong	arg01, objptr
124b8                 | ' write_background:=bb
124b8     04 E4 05 F1 | 	add	objptr, #4
124bc     F2 14 62 FC | 	wrlong	arg02, objptr
124c0     07 00 00 FF 
124c4     82 EB 05 F1 | 	add	ptr__dat__, ##3970
124c8     51 00 00 FF 
124cc     73 E5 05 F1 | 	add	objptr, ##41843
124d0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
124d4     04 E4 85 F1 | 	sub	objptr, #4
124d8     03 00 80 FF 
124dc     F2 30 69 FC | 	wrlong	##1688, objptr
124e0     51 00 00 FF 
124e4     B4 E5 85 F1 | 	sub	objptr, ##41908
124e8     07 00 00 FF 
124ec     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
124f0                 | LR__1588
124f0     51 00 00 FF 
124f4     B0 E5 05 F1 | 	add	objptr, ##41904
124f8     F2 1E 62 FC | 	wrlong	local01, objptr
124fc     04 E4 85 F1 | 	sub	objptr, #4
12500     F2 12 02 FB | 	rdlong	arg01, objptr
12504     0E 00 00 FF 
12508     50 E5 85 F1 | 	sub	objptr, ##7504
1250c     F2 26 02 FB | 	rdlong	local05, objptr
12510     43 00 00 FF 
12514     5C E4 85 F1 | 	sub	objptr, ##34396
12518     13 13 82 F1 | 	sub	arg01, local05
1251c     00 14 06 F6 | 	mov	arg02, #0
12520     0A 16 06 F6 | 	mov	arg03, #10
12524     D8 05 B1 FD | 	call	#__system__Number_S
12528     FD 12 02 F6 | 	mov	arg01, result1
1252c     84 01 00 FF 
12530     ED 14 06 F6 | 	mov	arg02, ##@LR__5462
12534     54 E3 B0 FD | 	call	#__system___string_concat
12538     50 00 00 FF 
1253c     10 E5 05 F1 | 	add	objptr, ##41232
12540     F2 FA 61 FC | 	wrlong	result1, objptr
12544     19 00 00 FF 
12548     D4 E4 85 F1 | 	sub	objptr, ##13012
1254c     F2 12 02 FB | 	rdlong	arg01, objptr
12550     04 E4 85 F1 | 	sub	objptr, #4
12554     F2 14 02 FB | 	rdlong	arg02, objptr
12558     37 00 00 FF 
1255c     38 E4 85 F1 | 	sub	objptr, ##28216
12560     F0 C9 B0 FD | 	call	#_hg010b_spin2_cls
12564     84 01 00 FF 
12568     FF 12 06 F6 | 	mov	arg01, ##@LR__5463
1256c                 | ' 
1256c                 | ' write(text)
1256c     A4 CD B0 FD | 	call	#_hg010b_spin2_write
12570                 | ' crlf
12570     A0 D2 B0 FD | 	call	#_hg010b_spin2_crlf
12574     18 00 00 FF 
12578     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1257c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
12580     18 00 00 FF 
12584     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
12588                 | ' 
12588                 | ' write(text)
12588     88 CD B0 FD | 	call	#_hg010b_spin2_write
1258c                 | ' crlf
1258c     84 D2 B0 FD | 	call	#_hg010b_spin2_crlf
12590     50 00 00 FF 
12594     10 E5 05 F1 | 	add	objptr, ##41232
12598     F2 12 02 FB | 	rdlong	arg01, objptr
1259c     50 00 00 FF 
125a0     10 E5 85 F1 | 	sub	objptr, ##41232
125a4                 | ' 
125a4                 | ' write(text)
125a4     6C CD B0 FD | 	call	#_hg010b_spin2_write
125a8                 | ' crlf
125a8     68 D2 B0 FD | 	call	#_hg010b_spin2_crlf
125ac     A7 F0 03 F6 | 	mov	ptra, fp
125b0     B2 00 A0 FD | 	call	#popregs_
125b4                 | _do_mode_ret
125b4     2D 00 64 FD | 	ret
125b8                 | 
125b8                 | ' 
125b8                 | ' '-------------------- mouse
125b8                 | ' 
125b8                 | ' sub do_mouse
125b8                 | _do_mouse
125b8     E0 8D BF FD | 	call	#_pop
125bc     00 FA 4D F2 | 	cmps	result1, #0 wz
125c0                 | ' 
125c0                 | ' t1=pop()
125c0                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
125c0     14 00 90 5D |  if_ne	jmp	#LR__1590
125c4     10 12 06 F6 | 	mov	arg01, #16
125c8     00 14 06 F6 | 	mov	arg02, #0
125cc     00 16 06 F6 | 	mov	arg03, #0
125d0     60 BC B0 FD | 	call	#_hg010b_spin2_setspritesize
125d4     10 00 90 FD | 	jmp	#LR__1591
125d8                 | LR__1590
125d8     10 12 06 F6 | 	mov	arg01, #16
125dc     20 14 06 F6 | 	mov	arg02, #32
125e0     20 16 06 F6 | 	mov	arg03, #32
125e4     4C BC B0 FD | 	call	#_hg010b_spin2_setspritesize
125e8                 | LR__1591
125e8                 | _do_mouse_ret
125e8     2D 00 64 FD | 	ret
125ec                 | 
125ec                 | ' 
125ec                 | ' '-------------------- mousek
125ec                 | ' 
125ec                 | ' sub do_mousek
125ec                 | _do_mousek
125ec     00 4A 05 F6 | 	mov	COUNT_, #0
125f0     A8 00 A0 FD | 	call	#pushregs_
125f4     0C F0 07 F1 | 	add	ptra, #12
125f8     08 4E 05 F1 | 	add	fp, #8
125fc     A7 3A 68 FC | 	wrlong	#29, fp
12600     08 4E 85 F1 | 	sub	fp, #8
12604     51 00 00 FF 
12608     28 E5 05 F1 | 	add	objptr, ##41768
1260c     F2 12 02 FB | 	rdlong	arg01, objptr
12610     51 00 00 FF 
12614     28 E5 85 F1 | 	sub	objptr, ##41768
12618     A7 12 62 FC | 	wrlong	arg01, fp
1261c     A7 12 02 F6 | 	mov	arg01, fp
12620     10 8E BF FD | 	call	#_push
12624     A7 F0 03 F6 | 	mov	ptra, fp
12628     B2 00 A0 FD | 	call	#popregs_
1262c                 | _do_mousek_ret
1262c     2D 00 64 FD | 	ret
12630                 | 
12630                 | ' 
12630                 | ' '-------------------- mousew
12630                 | ' 
12630                 | ' sub do_mousew
12630                 | _do_mousew
12630     00 4A 05 F6 | 	mov	COUNT_, #0
12634     A8 00 A0 FD | 	call	#pushregs_
12638     0C F0 07 F1 | 	add	ptra, #12
1263c     08 4E 05 F1 | 	add	fp, #8
12640     A7 38 68 FC | 	wrlong	#28, fp
12644     08 4E 85 F1 | 	sub	fp, #8
12648     51 00 00 FF 
1264c     2C E5 05 F1 | 	add	objptr, ##41772
12650     F2 12 02 FB | 	rdlong	arg01, objptr
12654     51 00 00 FF 
12658     2C E5 85 F1 | 	sub	objptr, ##41772
1265c     A7 12 62 FC | 	wrlong	arg01, fp
12660     A7 12 02 F6 | 	mov	arg01, fp
12664     CC 8D BF FD | 	call	#_push
12668     A7 F0 03 F6 | 	mov	ptra, fp
1266c     B2 00 A0 FD | 	call	#popregs_
12670                 | _do_mousew_ret
12670     2D 00 64 FD | 	ret
12674                 | 
12674                 | ' 
12674                 | ' '-------------------- mousex
12674                 | ' 
12674                 | ' sub do_mousex
12674                 | _do_mousex
12674     00 4A 05 F6 | 	mov	COUNT_, #0
12678     A8 00 A0 FD | 	call	#pushregs_
1267c     0C F0 07 F1 | 	add	ptra, #12
12680     08 4E 05 F1 | 	add	fp, #8
12684     A7 3A 68 FC | 	wrlong	#29, fp
12688     08 4E 85 F1 | 	sub	fp, #8
1268c     51 00 00 FF 
12690     20 E5 05 F1 | 	add	objptr, ##41760
12694     F2 12 02 FB | 	rdlong	arg01, objptr
12698     51 00 00 FF 
1269c     20 E5 85 F1 | 	sub	objptr, ##41760
126a0     A7 12 62 FC | 	wrlong	arg01, fp
126a4     A7 12 02 F6 | 	mov	arg01, fp
126a8     88 8D BF FD | 	call	#_push
126ac     A7 F0 03 F6 | 	mov	ptra, fp
126b0     B2 00 A0 FD | 	call	#popregs_
126b4                 | _do_mousex_ret
126b4     2D 00 64 FD | 	ret
126b8                 | 
126b8                 | ' 
126b8                 | ' '-------------------- mousey
126b8                 | ' 
126b8                 | ' sub do_mousey
126b8                 | _do_mousey
126b8     00 4A 05 F6 | 	mov	COUNT_, #0
126bc     A8 00 A0 FD | 	call	#pushregs_
126c0     0C F0 07 F1 | 	add	ptra, #12
126c4     08 4E 05 F1 | 	add	fp, #8
126c8     A7 3A 68 FC | 	wrlong	#29, fp
126cc     08 4E 85 F1 | 	sub	fp, #8
126d0     51 00 00 FF 
126d4     24 E5 05 F1 | 	add	objptr, ##41764
126d8     F2 12 02 FB | 	rdlong	arg01, objptr
126dc     51 00 00 FF 
126e0     24 E5 85 F1 | 	sub	objptr, ##41764
126e4     A7 12 62 FC | 	wrlong	arg01, fp
126e8     A7 12 02 F6 | 	mov	arg01, fp
126ec     44 8D BF FD | 	call	#_push
126f0     A7 F0 03 F6 | 	mov	ptra, fp
126f4     B2 00 A0 FD | 	call	#popregs_
126f8                 | _do_mousey_ret
126f8     2D 00 64 FD | 	ret
126fc                 | 
126fc                 | ' 
126fc                 | ' '------------------ new
126fc                 | ' 
126fc                 | ' sub do_new
126fc                 | _do_new
126fc     03 4A 05 F6 | 	mov	COUNT_, #3
12700     A8 00 A0 FD | 	call	#pushregs_
12704     13 12 C6 F9 | 	decod	arg01, #19
12708     01 14 66 F6 | 	neg	arg02, #1
1270c     F4 AC B0 FD | 	call	#_pslpoke
12710     35 00 00 FF 
12714     08 E4 05 F1 | 	add	objptr, ##27144
12718     F2 00 68 FC | 	wrlong	#0, objptr
1271c                 | ' 
1271c                 | ' pslpoke(memlo,$FFFFFFFF)
1271c                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
1271c     00 1E 06 F6 | 	mov	local01, #0
12720     20 00 00 FF 
12724     10 E4 85 F1 | 	sub	objptr, ##16400
12728     97 1E 48 FB | 	callpa	#(@LR__1601-@LR__1600)>>2,fcache_load_ptr_
1272c                 | LR__1600
1272c     0F 17 02 F6 | 	mov	arg03, local01
12730     04 16 66 F0 | 	shl	arg03, #4
12734     F2 16 02 F1 | 	add	arg03, objptr
12738     84 01 00 FF 
1273c     00 15 06 F6 | 	mov	arg02, ##@LR__5464
12740     0B 15 62 FC | 	wrlong	arg02, arg03
12744     0F 21 02 F6 | 	mov	local02, local01
12748     04 20 66 F0 | 	shl	local02, #4
1274c     F2 20 02 F1 | 	add	local02, objptr
12750     0C 20 06 F1 | 	add	local02, #12
12754     10 01 68 FC | 	wrlong	#0, local02
12758     01 1E 06 F1 | 	add	local01, #1
1275c     02 00 00 FF 
12760     01 1E 56 F2 | 	cmps	local01, ##1025 wc
12764     C4 FF 9F CD |  if_b	jmp	#LR__1600
12768                 | LR__1601
12768     35 00 00 FF 
1276c     90 E4 05 F1 | 	add	objptr, ##27280
12770     00 04 80 FF 
12774     F2 00 68 FC | 	wrlong	##524288, objptr
12778     06 00 00 FF 
1277c     30 E4 05 F1 | 	add	objptr, ##3120
12780     00 04 80 FF 
12784     F2 00 68 FC | 	wrlong	##524288, objptr
12788     04 E4 05 F1 | 	add	objptr, #4
1278c     00 04 80 FF 
12790     F2 00 68 FC | 	wrlong	##524288, objptr
12794     0D 00 00 FF 
12798     64 E4 85 F1 | 	sub	objptr, ##6756
1279c     F2 00 68 FC | 	wrlong	#0, objptr
127a0     07 00 00 FF 
127a4     24 E4 05 F1 | 	add	objptr, ##3620
127a8     F2 00 68 FC | 	wrlong	#0, objptr
127ac     07 00 00 FF 
127b0     20 E4 85 F1 | 	sub	objptr, ##3616
127b4     00 04 80 FF 
127b8     F2 00 68 FC | 	wrlong	##524288, objptr
127bc     07 00 00 FF 
127c0     30 E4 05 F1 | 	add	objptr, ##3632
127c4     F2 00 68 FC | 	wrlong	#0, objptr
127c8     04 E4 05 F1 | 	add	objptr, #4
127cc     FF FF FF FF 
127d0     F2 FE 6B FC | 	wrlong	##-1, objptr
127d4     06 00 00 FF 
127d8     78 E4 05 F1 | 	add	objptr, ##3192
127dc     F2 00 68 FC | 	wrlong	#0, objptr
127e0     04 E4 05 F1 | 	add	objptr, #4
127e4     F2 00 68 FC | 	wrlong	#0, objptr
127e8                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
127e8                 | ' stackpointer=0
127e8                 | ' lineptr=0 
127e8                 | ' programptr=memlo ': stringptr=0
127e8                 | ' 
127e8                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
127e8                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
127e8     00 1E 06 F6 | 	mov	local01, #0
127ec     06 00 00 FF 
127f0     74 E4 85 F1 | 	sub	objptr, ##3188
127f4     97 16 48 FB | 	callpa	#(@LR__1603-@LR__1602)>>2,fcache_load_ptr_
127f8                 | LR__1602
127f8     0F 21 02 F6 | 	mov	local02, local01
127fc     02 20 66 F0 | 	shl	local02, #2
12800     0F 21 02 F1 | 	add	local02, local01
12804     02 20 66 F0 | 	shl	local02, #2
12808     F2 20 02 F1 | 	add	local02, objptr
1280c     08 20 06 F1 | 	add	local02, #8
12810     FF FF FF FF 
12814     10 FF 6B FC | 	wrlong	##-1, local02
12818     01 1E 06 F1 | 	add	local01, #1
1281c     41 1E 56 F2 | 	cmps	local01, #65 wc
12820     D4 FF 9F CD |  if_b	jmp	#LR__1602
12824                 | LR__1603
12824     4A 00 00 FF 
12828     98 E4 85 F1 | 	sub	objptr, ##38040
1282c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
1282c     00 1E 06 F6 | 	mov	local01, #0
12830                 | LR__1604
12830     0F 21 02 F6 | 	mov	local02, local01
12834     02 20 66 F0 | 	shl	local02, #2
12838     51 00 00 FF 
1283c     68 E5 05 F1 | 	add	objptr, ##41832
12840     F2 20 02 F1 | 	add	local02, objptr
12844     10 23 0A FB | 	rdlong	local03, local02 wz
12848     51 00 00 FF 
1284c     68 E5 85 F1 | 	sub	objptr, ##41832
12850     34 00 90 AD |  if_e	jmp	#LR__1605
12854     0F 13 02 F6 | 	mov	arg01, local01
12858     00 14 06 F6 | 	mov	arg02, #0
1285c     00 16 06 F6 | 	mov	arg03, #0
12860     D0 B9 B0 FD | 	call	#_hg010b_spin2_setspritesize
12864     0F 21 02 F6 | 	mov	local02, local01
12868     02 20 66 F0 | 	shl	local02, #2
1286c     51 00 00 FF 
12870     68 E5 05 F1 | 	add	objptr, ##41832
12874     F2 20 02 F1 | 	add	local02, objptr
12878     10 13 02 FB | 	rdlong	arg01, local02
1287c     51 00 00 FF 
12880     68 E5 85 F1 | 	sub	objptr, ##41832
12884     C0 1F B1 FD | 	call	#__system___gc_free
12888                 | LR__1605
12888     01 1E 06 F1 | 	add	local01, #1
1288c     10 1E 56 F2 | 	cmps	local01, #16 wc
12890     9C FF 9F CD |  if_b	jmp	#LR__1604
12894     51 00 00 FF 
12898     BC E5 05 F1 | 	add	objptr, ##41916
1289c     00 C0 9F FF 
128a0     F2 00 68 FC | 	wrlong	##1065353216, objptr
128a4     04 E4 05 F1 | 	add	objptr, #4
128a8     00 C0 9F FF 
128ac     F2 00 68 FC | 	wrlong	##1065353216, objptr
128b0     51 00 00 FF 
128b4     BC E5 85 F1 | 	sub	objptr, ##41916
128b8     F2 22 02 FB | 	rdlong	local03, objptr
128bc     51 00 00 FF 
128c0     A8 E5 05 F1 | 	add	objptr, ##41896
128c4     F2 22 62 FC | 	wrlong	local03, objptr
128c8     51 00 00 FF 
128cc     AC E5 85 F1 | 	sub	objptr, ##41900
128d0     11 12 06 F6 | 	mov	arg01, #17
128d4     08 14 06 F6 | 	mov	arg02, #8
128d8     10 16 06 F6 | 	mov	arg03, #16
128dc     54 B9 B0 FD | 	call	#_hg010b_spin2_setspritesize
128e0     10 12 06 F6 | 	mov	arg01, #16
128e4     20 14 06 F6 | 	mov	arg02, #32
128e8     20 16 06 F6 | 	mov	arg03, #32
128ec     44 B9 B0 FD | 	call	#_hg010b_spin2_setspritesize
128f0     84 01 00 FF 
128f4     01 23 06 F6 | 	mov	local03, ##@LR__5465
128f8     51 00 00 FF 
128fc     D8 E5 05 F1 | 	add	objptr, ##41944
12900     F2 22 62 FC | 	wrlong	local03, objptr
12904     51 00 00 FF 
12908     D8 E5 85 F1 | 	sub	objptr, ##41944
1290c     B8 9D B0 FD | 	call	#_init_audio
12910     A7 F0 03 F6 | 	mov	ptra, fp
12914     B2 00 A0 FD | 	call	#popregs_
12918                 | _do_new_ret
12918     2D 00 64 FD | 	ret
1291c                 | 
1291c                 | ' 
1291c                 | ' '-------------------- next
1291c                 | ' 
1291c                 | ' sub do_next()
1291c                 | _do_next
1291c     04 4A 05 F6 | 	mov	COUNT_, #4
12920     A8 00 A0 FD | 	call	#pushregs_
12924     74 8A BF FD | 	call	#_pop
12928     FD 1E 02 F6 | 	mov	local01, result1
1292c     FE 20 02 F6 | 	mov	local02, result2
12930     FF 22 02 F6 | 	mov	local03, result3
12934                 | ' t1=pop() :varnum=t1.result.uresult
12934                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
12934     50 00 00 FF 
12938     08 E5 05 F1 | 	add	objptr, ##41224
1293c     F2 12 02 FB | 	rdlong	arg01, objptr
12940     09 15 02 F6 | 	mov	arg02, arg01
12944     02 14 66 F0 | 	shl	arg02, #2
12948     09 15 02 F1 | 	add	arg02, arg01
1294c     02 14 66 F0 | 	shl	arg02, #2
12950     06 00 00 FF 
12954     70 E4 85 F1 | 	sub	objptr, ##3184
12958     F2 14 02 F1 | 	add	arg02, objptr
1295c     08 14 06 F1 | 	add	arg02, #8
12960     0A 15 02 FB | 	rdlong	arg02, arg02
12964     0F 15 0A F2 | 	cmp	arg02, local01 wz
12968     4A 00 00 FF 
1296c     98 E4 85 F1 | 	sub	objptr, ##38040
12970     0C 00 90 AD |  if_e	jmp	#LR__1610
12974     25 12 06 F6 | 	mov	arg01, #37
12978     24 A9 B0 FD | 	call	#_printerror
1297c     54 03 90 FD | 	jmp	#LR__1617
12980                 | LR__1610
12980                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
12980     0F 15 02 F6 | 	mov	arg02, local01
12984     04 14 66 F0 | 	shl	arg02, #4
12988     14 00 00 FF 
1298c     F8 E5 05 F1 | 	add	objptr, ##10744
12990     F2 14 02 F1 | 	add	arg02, objptr
12994     0C 14 06 F1 | 	add	arg02, #12
12998     0A 15 02 FB | 	rdlong	arg02, arg02
1299c     1E 14 0E F2 | 	cmp	arg02, #30 wz
129a0     14 00 00 FF 
129a4     F8 E5 85 F1 | 	sub	objptr, ##10744
129a8     54 00 90 5D |  if_ne	jmp	#LR__1611
129ac     0F 15 02 F6 | 	mov	arg02, local01
129b0     04 14 66 F0 | 	shl	arg02, #4
129b4     14 00 00 FF 
129b8     F8 E5 05 F1 | 	add	objptr, ##10744
129bc     F2 14 02 F1 | 	add	arg02, objptr
129c0     0C 14 06 F1 | 	add	arg02, #12
129c4     0A 39 68 FC | 	wrlong	#28, arg02
129c8     0F 25 02 F6 | 	mov	local04, local01
129cc     04 24 66 F0 | 	shl	local04, #4
129d0     F2 24 02 F1 | 	add	local04, objptr
129d4     0F 13 02 F6 | 	mov	arg01, local01
129d8     04 12 66 F0 | 	shl	arg01, #4
129dc     F2 12 02 F1 | 	add	arg01, objptr
129e0     04 12 06 F1 | 	add	arg01, #4
129e4     09 13 02 FB | 	rdlong	arg01, arg01
129e8     14 00 00 FF 
129ec     F8 E5 85 F1 | 	sub	objptr, ##10744
129f0     01 14 06 F6 | 	mov	arg02, #1
129f4     B4 0E B1 FD | 	call	#__system___float_tointeger
129f8     04 24 06 F1 | 	add	local04, #4
129fc     12 FB 61 FC | 	wrlong	result1, local04
12a00                 | LR__1611
12a00     50 00 00 FF 
12a04     08 E5 05 F1 | 	add	objptr, ##41224
12a08     F2 12 02 FB | 	rdlong	arg01, objptr
12a0c     09 25 02 F6 | 	mov	local04, arg01
12a10     02 24 66 F0 | 	shl	local04, #2
12a14     09 25 02 F1 | 	add	local04, arg01
12a18     02 24 66 F0 | 	shl	local04, #2
12a1c     06 00 00 FF 
12a20     70 E4 85 F1 | 	sub	objptr, ##3184
12a24     F2 24 02 F1 | 	add	local04, objptr
12a28     0C 24 06 F1 | 	add	local04, #12
12a2c     12 25 02 FB | 	rdlong	local04, local04
12a30     0F 13 02 F6 | 	mov	arg01, local01
12a34     04 12 66 F0 | 	shl	arg01, #4
12a38     35 00 00 FF 
12a3c     A0 E4 85 F1 | 	sub	objptr, ##27296
12a40     F2 12 02 F1 | 	add	arg01, objptr
12a44     0F FF 01 F6 | 	mov	result3, local01
12a48     04 FE 65 F0 | 	shl	result3, #4
12a4c     F2 FE 01 F1 | 	add	result3, objptr
12a50     04 FE 05 F1 | 	add	result3, #4
12a54     FF FE 01 FB | 	rdlong	result3, result3
12a58     12 FF 01 F1 | 	add	result3, local04
12a5c     04 12 06 F1 | 	add	arg01, #4
12a60     09 FF 61 FC | 	wrlong	result3, arg01
12a64                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
12a64                 | ' if fortable(fortop).stepval>=0 then
12a64     3B 00 00 FF 
12a68     10 E5 05 F1 | 	add	objptr, ##30480
12a6c     F2 12 02 FB | 	rdlong	arg01, objptr
12a70     09 25 02 F6 | 	mov	local04, arg01
12a74     02 24 66 F0 | 	shl	local04, #2
12a78     09 25 02 F1 | 	add	local04, arg01
12a7c     02 24 66 F0 | 	shl	local04, #2
12a80     06 00 00 FF 
12a84     70 E4 85 F1 | 	sub	objptr, ##3184
12a88     F2 24 02 F1 | 	add	local04, objptr
12a8c     0C 24 06 F1 | 	add	local04, #12
12a90     12 25 02 FB | 	rdlong	local04, local04
12a94     00 24 56 F2 | 	cmps	local04, #0 wc
12a98     4A 00 00 FF 
12a9c     98 E4 85 F1 | 	sub	objptr, ##38040
12aa0     78 00 90 CD |  if_b	jmp	#LR__1612
12aa4                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
12aa4     04 1E 66 F0 | 	shl	local01, #4
12aa8     14 00 00 FF 
12aac     F8 E5 05 F1 | 	add	objptr, ##10744
12ab0     F2 1E 02 F1 | 	add	local01, objptr
12ab4     3B 00 00 FF 
12ab8     10 E5 05 F1 | 	add	objptr, ##30480
12abc     F2 24 02 FB | 	rdlong	local04, objptr
12ac0     12 13 02 F6 | 	mov	arg01, local04
12ac4     02 12 66 F0 | 	shl	arg01, #2
12ac8     12 13 02 F1 | 	add	arg01, local04
12acc     02 12 66 F0 | 	shl	arg01, #2
12ad0     06 00 00 FF 
12ad4     70 E4 85 F1 | 	sub	objptr, ##3184
12ad8     F2 12 02 F1 | 	add	arg01, objptr
12adc     04 1E 06 F1 | 	add	local01, #4
12ae0     0F 25 02 FB | 	rdlong	local04, local01
12ae4     10 12 06 F1 | 	add	arg01, #16
12ae8     09 13 02 FB | 	rdlong	arg01, arg01
12aec     09 25 5A F2 | 	cmps	local04, arg01 wcz
12af0     4A 00 00 FF 
12af4     98 E4 85 F1 | 	sub	objptr, ##38040
12af8     9C 00 90 ED |  if_be	jmp	#LR__1614
12afc     50 00 00 FF 
12b00     08 E5 05 F1 | 	add	objptr, ##41224
12b04     F2 24 02 FB | 	rdlong	local04, objptr
12b08     01 24 86 F1 | 	sub	local04, #1
12b0c     F2 24 62 FC | 	wrlong	local04, objptr
12b10     50 00 00 FF 
12b14     08 E5 85 F1 | 	sub	objptr, ##41224
12b18     B8 01 90 FD | 	jmp	#LR__1617
12b1c                 | LR__1612
12b1c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
12b1c     0F 13 02 F6 | 	mov	arg01, local01
12b20     04 12 66 F0 | 	shl	arg01, #4
12b24     14 00 00 FF 
12b28     F8 E5 05 F1 | 	add	objptr, ##10744
12b2c     F2 12 02 F1 | 	add	arg01, objptr
12b30     3B 00 00 FF 
12b34     10 E5 05 F1 | 	add	objptr, ##30480
12b38     F2 24 02 FB | 	rdlong	local04, objptr
12b3c     12 1F 02 F6 | 	mov	local01, local04
12b40     02 1E 66 F0 | 	shl	local01, #2
12b44     12 1F 02 F1 | 	add	local01, local04
12b48     02 1E 66 F0 | 	shl	local01, #2
12b4c     06 00 00 FF 
12b50     70 E4 85 F1 | 	sub	objptr, ##3184
12b54     F2 1E 02 F1 | 	add	local01, objptr
12b58     04 12 06 F1 | 	add	arg01, #4
12b5c     09 13 02 FB | 	rdlong	arg01, arg01
12b60     10 1E 06 F1 | 	add	local01, #16
12b64     0F 1F 02 FB | 	rdlong	local01, local01
12b68     0F 13 52 F2 | 	cmps	arg01, local01 wc
12b6c     4A 00 00 FF 
12b70     98 E4 85 F1 | 	sub	objptr, ##38040
12b74     20 00 90 3D |  if_ae	jmp	#LR__1613
12b78     50 00 00 FF 
12b7c     08 E5 05 F1 | 	add	objptr, ##41224
12b80     F2 24 02 FB | 	rdlong	local04, objptr
12b84     01 24 86 F1 | 	sub	local04, #1
12b88     F2 24 62 FC | 	wrlong	local04, objptr
12b8c     50 00 00 FF 
12b90     08 E5 85 F1 | 	sub	objptr, ##41224
12b94     3C 01 90 FD | 	jmp	#LR__1617
12b98                 | LR__1613
12b98                 | LR__1614
12b98                 | ' ' if not returned, goto pointer 
12b98                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
12b98     50 00 00 FF 
12b9c     EC E4 05 F1 | 	add	objptr, ##41196
12ba0     F2 24 02 FB | 	rdlong	local04, objptr
12ba4     50 00 00 FF 
12ba8     EC E4 85 F1 | 	sub	objptr, ##41196
12bac     01 24 16 F2 | 	cmp	local04, #1 wc
12bb0     DC 00 90 CD |  if_b	jmp	#LR__1615
12bb4     50 00 00 FF 
12bb8     08 E5 05 F1 | 	add	objptr, ##41224
12bbc     F2 1E 02 FB | 	rdlong	local01, objptr
12bc0     0F 25 02 F6 | 	mov	local04, local01
12bc4     02 24 66 F0 | 	shl	local04, #2
12bc8     0F 25 02 F1 | 	add	local04, local01
12bcc     02 24 66 F0 | 	shl	local04, #2
12bd0     06 00 00 FF 
12bd4     70 E4 85 F1 | 	sub	objptr, ##3184
12bd8     F2 24 02 F1 | 	add	local04, objptr
12bdc     06 00 00 FF 
12be0     20 E4 05 F1 | 	add	objptr, ##3104
12be4     F2 1E 02 FB | 	rdlong	local01, objptr
12be8     50 00 00 FF 
12bec     B8 E4 85 F1 | 	sub	objptr, ##41144
12bf0     12 25 02 FB | 	rdlong	local04, local04
12bf4     12 1F 0A F2 | 	cmp	local01, local04 wz
12bf8     94 00 90 AD |  if_e	jmp	#LR__1615
12bfc     50 00 00 FF 
12c00     08 E5 05 F1 | 	add	objptr, ##41224
12c04     F2 1E 02 FB | 	rdlong	local01, objptr
12c08     0F 25 02 F6 | 	mov	local04, local01
12c0c     02 24 66 F0 | 	shl	local04, #2
12c10     0F 25 02 F1 | 	add	local04, local01
12c14     02 24 66 F0 | 	shl	local04, #2
12c18     06 00 00 FF 
12c1c     70 E4 85 F1 | 	sub	objptr, ##3184
12c20     F2 24 02 F1 | 	add	local04, objptr
12c24     12 25 02 FB | 	rdlong	local04, local04
12c28     06 00 00 FF 
12c2c     20 E4 05 F1 | 	add	objptr, ##3104
12c30     F2 24 62 FC | 	wrlong	local04, objptr
12c34     50 E4 05 F1 | 	add	objptr, #80
12c38     F2 1E 02 FB | 	rdlong	local01, objptr
12c3c     0F 25 02 F6 | 	mov	local04, local01
12c40     02 24 66 F0 | 	shl	local04, #2
12c44     0F 25 02 F1 | 	add	local04, local01
12c48     02 24 66 F0 | 	shl	local04, #2
12c4c     06 00 00 FF 
12c50     70 E4 85 F1 | 	sub	objptr, ##3184
12c54     F2 24 02 F1 | 	add	local04, objptr
12c58     04 24 06 F1 | 	add	local04, #4
12c5c     12 25 02 FB | 	rdlong	local04, local04
12c60     06 00 00 FF 
12c64     24 E4 05 F1 | 	add	objptr, ##3108
12c68     F2 24 62 FC | 	wrlong	local04, objptr
12c6c     06 00 00 FF 
12c70     40 E4 85 F1 | 	sub	objptr, ##3136
12c74     F2 24 02 FB | 	rdlong	local04, objptr
12c78     01 24 86 F1 | 	sub	local04, #1
12c7c     04 E4 05 F1 | 	add	objptr, #4
12c80     F2 24 62 FC | 	wrlong	local04, objptr
12c84     4A 00 00 FF 
12c88     80 E4 85 F1 | 	sub	objptr, ##38016
12c8c     44 00 90 FD | 	jmp	#LR__1616
12c90                 | LR__1615
12c90     50 00 00 FF 
12c94     08 E5 05 F1 | 	add	objptr, ##41224
12c98     F2 24 02 FB | 	rdlong	local04, objptr
12c9c     12 1F 02 F6 | 	mov	local01, local04
12ca0     02 1E 66 F0 | 	shl	local01, #2
12ca4     12 1F 02 F1 | 	add	local01, local04
12ca8     02 1E 66 F0 | 	shl	local01, #2
12cac     06 00 00 FF 
12cb0     70 E4 85 F1 | 	sub	objptr, ##3184
12cb4     F2 1E 02 F1 | 	add	local01, objptr
12cb8     04 1E 06 F1 | 	add	local01, #4
12cbc     0F 1F 02 FB | 	rdlong	local01, local01
12cc0     01 1E 86 F1 | 	sub	local01, #1
12cc4     18 E4 85 F1 | 	sub	objptr, #24
12cc8     F2 1E 62 FC | 	wrlong	local01, objptr
12ccc     4A 00 00 FF 
12cd0     80 E4 85 F1 | 	sub	objptr, ##38016
12cd4                 | LR__1616
12cd4                 | LR__1617
12cd4     A7 F0 03 F6 | 	mov	ptra, fp
12cd8     B2 00 A0 FD | 	call	#popregs_
12cdc                 | _do_next_ret
12cdc     2D 00 64 FD | 	ret
12ce0                 | 
12ce0                 | ' 
12ce0                 | ' '-------------------- no command (print "Unknown command")
12ce0                 | ' 
12ce0                 | ' sub do_no_command
12ce0                 | _do_no_command
12ce0     17 12 06 F6 | 	mov	arg01, #23
12ce4     B8 A5 B0 FD | 	call	#_printerror
12ce8                 | _do_no_command_ret
12ce8     2D 00 64 FD | 	ret
12cec                 | 
12cec                 | ' 
12cec                 | ' '-------------------- nothing
12cec                 | ' 
12cec                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves (then, else) 
12cec                 | _do_nothing
12cec                 | _do_nothing_ret
12cec     2D 00 64 FD | 	ret
12cf0                 | 
12cf0                 | ' 
12cf0                 | ' '-------------------- open
12cf0                 | ' 
12cf0                 | ' sub do_open
12cf0                 | _do_open
12cf0     02 4A 05 F6 | 	mov	COUNT_, #2
12cf4     A8 00 A0 FD | 	call	#pushregs_
12cf8     20 F0 07 F1 | 	add	ptra, #32
12cfc     4A 00 00 FF 
12d00     80 E4 05 F1 | 	add	objptr, ##38016
12d04     F2 16 02 FB | 	rdlong	arg03, objptr
12d08     0B 15 02 F6 | 	mov	arg02, arg03
12d0c     01 14 66 F0 | 	shl	arg02, #1
12d10     0B 15 02 F1 | 	add	arg02, arg03
12d14     02 14 66 F0 | 	shl	arg02, #2
12d18     03 00 00 FF 
12d1c     04 E4 85 F1 | 	sub	objptr, ##1540
12d20     F2 14 02 F1 | 	add	arg02, objptr
12d24     0A 17 02 FB | 	rdlong	arg03, arg02
12d28     10 4E 05 F1 | 	add	fp, #16
12d2c     A7 16 62 FC | 	wrlong	arg03, fp
12d30     10 4E 85 F1 | 	sub	fp, #16
12d34     47 00 00 FF 
12d38     7C E4 85 F1 | 	sub	objptr, ##36476
12d3c     5C 86 BF FD | 	call	#_pop
12d40     FF 16 02 F6 | 	mov	arg03, result3
12d44     A7 FA 61 FC | 	wrlong	result1, fp
12d48     04 4E 05 F1 | 	add	fp, #4
12d4c     A7 FC 61 FC | 	wrlong	result2, fp
12d50     04 4E 05 F1 | 	add	fp, #4
12d54     A7 16 62 FC | 	wrlong	arg03, fp
12d58                 | ' 
12d58                 | ' numpar=compiledline(lineptr_e).result.uresult
12d58                 | ' 
12d58                 | ' t1=pop()
12d58                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12d58     08 4E 85 F1 | 	sub	fp, #8
12d5c     2B 16 0E F2 | 	cmp	arg03, #43 wz
12d60     18 00 90 5D |  if_ne	jmp	#LR__1620
12d64     A7 12 02 FB | 	rdlong	arg01, fp
12d68     A8 87 BF FD | 	call	#_convertstring
12d6c     A7 FA 61 FC | 	wrlong	result1, fp
12d70     08 4E 05 F1 | 	add	fp, #8
12d74     A7 3E 68 FC | 	wrlong	#31, fp
12d78     08 4E 85 F1 | 	sub	fp, #8
12d7c                 | LR__1620
12d7c                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
12d7c     08 4E 05 F1 | 	add	fp, #8
12d80     A7 16 02 FB | 	rdlong	arg03, fp
12d84     08 4E 85 F1 | 	sub	fp, #8
12d88     1F 16 0E F2 | 	cmp	arg03, #31 wz
12d8c     44 00 90 AD |  if_e	jmp	#LR__1621
12d90     00 12 06 F6 | 	mov	arg01, #0
12d94     FC 34 B1 FD | 	call	#__system___getiolock_0541
12d98     FD 12 02 F6 | 	mov	arg01, result1
12d9c     90 DA B0 FD | 	call	#__system___lockmem
12da0     84 01 00 FF 
12da4     0C 15 06 F6 | 	mov	arg02, ##@LR__5466
12da8     00 12 06 F6 | 	mov	arg01, #0
12dac     00 16 06 F6 | 	mov	arg03, #0
12db0     70 E7 B0 FD | 	call	#__system___basic_print_string
12db4     00 12 06 F6 | 	mov	arg01, #0
12db8     0A 14 06 F6 | 	mov	arg02, #10
12dbc     00 16 06 F6 | 	mov	arg03, #0
12dc0     08 E7 B0 FD | 	call	#__system___basic_print_char
12dc4     00 12 06 F6 | 	mov	arg01, #0
12dc8     C8 34 B1 FD | 	call	#__system___getiolock_0541
12dcc     FD 00 68 FC | 	wrlong	#0, result1
12dd0     28 02 90 FD | 	jmp	#LR__1632
12dd4                 | LR__1621
12dd4     A7 16 02 FB | 	rdlong	arg03, fp
12dd8     0C 4E 05 F1 | 	add	fp, #12
12ddc     A7 16 62 FC | 	wrlong	arg03, fp
12de0     0C 4E 85 F1 | 	sub	fp, #12
12de4     B4 85 BF FD | 	call	#_pop
12de8     FF 16 02 F6 | 	mov	arg03, result3
12dec     A7 FA 61 FC | 	wrlong	result1, fp
12df0     04 4E 05 F1 | 	add	fp, #4
12df4     A7 FC 61 FC | 	wrlong	result2, fp
12df8     04 4E 05 F1 | 	add	fp, #4
12dfc     A7 16 62 FC | 	wrlong	arg03, fp
12e00                 | ' filename=t1.result.sresult
12e00                 | ' t1=pop()
12e00                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12e00     08 4E 85 F1 | 	sub	fp, #8
12e04     2B 16 0E F2 | 	cmp	arg03, #43 wz
12e08     18 00 90 5D |  if_ne	jmp	#LR__1622
12e0c     A7 12 02 FB | 	rdlong	arg01, fp
12e10     00 87 BF FD | 	call	#_convertstring
12e14     A7 FA 61 FC | 	wrlong	result1, fp
12e18     08 4E 05 F1 | 	add	fp, #8
12e1c     A7 3E 68 FC | 	wrlong	#31, fp
12e20     08 4E 85 F1 | 	sub	fp, #8
12e24                 | LR__1622
12e24     14 4E 05 F1 | 	add	fp, #20
12e28     A7 00 68 FC | 	wrlong	#0, fp
12e2c                 | ' mode=0
12e2c                 | ' if t1.result_type=result_string then
12e2c     0C 4E 85 F1 | 	sub	fp, #12
12e30     A7 14 02 FB | 	rdlong	arg02, fp
12e34     08 4E 85 F1 | 	sub	fp, #8
12e38     1F 14 0E F2 | 	cmp	arg02, #31 wz
12e3c     64 00 90 5D |  if_ne	jmp	#LR__1623
12e40                 | '   if t1.result.sresult="read" then mode=1
12e40     A7 12 02 FB | 	rdlong	arg01, fp
12e44     84 01 00 FF 
12e48     1E 15 06 F6 | 	mov	arg02, ##@LR__5467
12e4c     08 DA B0 FD | 	call	#__system___string_cmp
12e50     00 FA 0D F2 | 	cmp	result1, #0 wz
12e54     14 4E 05 A1 |  if_e	add	fp, #20
12e58     A7 02 68 AC |  if_e	wrlong	#1, fp
12e5c     14 4E 85 A1 |  if_e	sub	fp, #20
12e60                 | '   if t1.result.sresult="write" then mode=2
12e60     A7 12 02 FB | 	rdlong	arg01, fp
12e64     84 01 00 FF 
12e68     23 15 06 F6 | 	mov	arg02, ##@LR__5468
12e6c     E8 D9 B0 FD | 	call	#__system___string_cmp
12e70     00 FA 0D F2 | 	cmp	result1, #0 wz
12e74     14 4E 05 A1 |  if_e	add	fp, #20
12e78     A7 04 68 AC |  if_e	wrlong	#2, fp
12e7c     14 4E 85 A1 |  if_e	sub	fp, #20
12e80                 | '   if t1.result.sresult="append" then mode=4
12e80     A7 12 02 FB | 	rdlong	arg01, fp
12e84     84 01 00 FF 
12e88     29 15 06 F6 | 	mov	arg02, ##@LR__5469
12e8c     C8 D9 B0 FD | 	call	#__system___string_cmp
12e90     00 FA 0D F2 | 	cmp	result1, #0 wz
12e94     14 4E 05 A1 |  if_e	add	fp, #20
12e98     A7 08 68 AC |  if_e	wrlong	#4, fp
12e9c     14 4E 85 A1 |  if_e	sub	fp, #20
12ea0     14 00 90 FD | 	jmp	#LR__1624
12ea4                 | LR__1623
12ea4     A7 12 02 F6 | 	mov	arg01, fp
12ea8     D4 86 BF FD | 	call	#_converttoint
12eac     14 4E 05 F1 | 	add	fp, #20
12eb0     A7 FA 61 FC | 	wrlong	result1, fp
12eb4     14 4E 85 F1 | 	sub	fp, #20
12eb8                 | LR__1624
12eb8     E0 84 BF FD | 	call	#_pop
12ebc     FF 16 02 F6 | 	mov	arg03, result3
12ec0     A7 FA 61 FC | 	wrlong	result1, fp
12ec4     04 4E 05 F1 | 	add	fp, #4
12ec8     A7 FC 61 FC | 	wrlong	result2, fp
12ecc     04 4E 05 F1 | 	add	fp, #4
12ed0     A7 16 62 FC | 	wrlong	arg03, fp
12ed4                 | ' t1=pop()
12ed4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
12ed4     08 4E 85 F1 | 	sub	fp, #8
12ed8     2C 16 0E F2 | 	cmp	arg03, #44 wz
12edc     44 00 90 AD |  if_e	jmp	#LR__1625
12ee0     00 12 06 F6 | 	mov	arg01, #0
12ee4     AC 33 B1 FD | 	call	#__system___getiolock_0541
12ee8     FD 12 02 F6 | 	mov	arg01, result1
12eec     40 D9 B0 FD | 	call	#__system___lockmem
12ef0     84 01 00 FF 
12ef4     30 15 06 F6 | 	mov	arg02, ##@LR__5470
12ef8     00 12 06 F6 | 	mov	arg01, #0
12efc     00 16 06 F6 | 	mov	arg03, #0
12f00     20 E6 B0 FD | 	call	#__system___basic_print_string
12f04     00 12 06 F6 | 	mov	arg01, #0
12f08     0A 14 06 F6 | 	mov	arg02, #10
12f0c     00 16 06 F6 | 	mov	arg03, #0
12f10     B8 E5 B0 FD | 	call	#__system___basic_print_char
12f14     00 12 06 F6 | 	mov	arg01, #0
12f18     78 33 B1 FD | 	call	#__system___getiolock_0541
12f1c     FD 00 68 FC | 	wrlong	#0, result1
12f20     D8 00 90 FD | 	jmp	#LR__1632
12f24                 | LR__1625
12f24     A7 1E 02 FB | 	rdlong	local01, fp
12f28     18 4E 05 F1 | 	add	fp, #24
12f2c     A7 1E 62 FC | 	wrlong	local01, fp
12f30                 | ' channel  = t1.result.iresult
12f30                 | ' select case  mode
12f30     04 4E 85 F1 | 	sub	fp, #4
12f34     A7 20 02 FB | 	rdlong	local02, fp
12f38     14 4E 85 F1 | 	sub	fp, #20
12f3c     01 20 86 F1 | 	sub	local02, #1
12f40     04 20 26 F3 | 	fle	local02, #4
12f44     30 20 62 FD | 	jmprel	local02
12f48                 | LR__1626
12f48     10 00 90 FD | 	jmp	#LR__1627
12f4c     2C 00 90 FD | 	jmp	#LR__1628
12f50     68 00 90 FD | 	jmp	#LR__1630
12f54     44 00 90 FD | 	jmp	#LR__1629
12f58     60 00 90 FD | 	jmp	#LR__1630
12f5c                 | LR__1627
12f5c     18 4E 05 F1 | 	add	fp, #24
12f60     A7 12 02 FB | 	rdlong	arg01, fp
12f64     0C 4E 85 F1 | 	sub	fp, #12
12f68     A7 14 02 FB | 	rdlong	arg02, fp
12f6c     0C 4E 85 F1 | 	sub	fp, #12
12f70     00 16 06 F6 | 	mov	arg03, #0
12f74     BC E4 B0 FD | 	call	#__system___basic_open_string
12f78     80 00 90 FD | 	jmp	#LR__1631
12f7c                 | LR__1628
12f7c     18 4E 05 F1 | 	add	fp, #24
12f80     A7 12 02 FB | 	rdlong	arg01, fp
12f84     0C 4E 85 F1 | 	sub	fp, #12
12f88     A7 14 02 FB | 	rdlong	arg02, fp
12f8c     0C 4E 85 F1 | 	sub	fp, #12
12f90     0D 16 06 F6 | 	mov	arg03, #13
12f94     9C E4 B0 FD | 	call	#__system___basic_open_string
12f98     60 00 90 FD | 	jmp	#LR__1631
12f9c                 | LR__1629
12f9c     18 4E 05 F1 | 	add	fp, #24
12fa0     A7 12 02 FB | 	rdlong	arg01, fp
12fa4     0C 4E 85 F1 | 	sub	fp, #12
12fa8     A7 14 02 FB | 	rdlong	arg02, fp
12fac     0C 4E 85 F1 | 	sub	fp, #12
12fb0     25 16 06 F6 | 	mov	arg03, #37
12fb4     7C E4 B0 FD | 	call	#__system___basic_open_string
12fb8     40 00 90 FD | 	jmp	#LR__1631
12fbc                 | LR__1630
12fbc     00 12 06 F6 | 	mov	arg01, #0
12fc0     D0 32 B1 FD | 	call	#__system___getiolock_0541
12fc4     FD 12 02 F6 | 	mov	arg01, result1
12fc8     64 D8 B0 FD | 	call	#__system___lockmem
12fcc     84 01 00 FF 
12fd0     42 15 06 F6 | 	mov	arg02, ##@LR__5471
12fd4     00 12 06 F6 | 	mov	arg01, #0
12fd8     00 16 06 F6 | 	mov	arg03, #0
12fdc     44 E5 B0 FD | 	call	#__system___basic_print_string
12fe0     00 12 06 F6 | 	mov	arg01, #0
12fe4     0A 14 06 F6 | 	mov	arg02, #10
12fe8     00 16 06 F6 | 	mov	arg03, #0
12fec     DC E4 B0 FD | 	call	#__system___basic_print_char
12ff0     00 12 06 F6 | 	mov	arg01, #0
12ff4     9C 32 B1 FD | 	call	#__system___getiolock_0541
12ff8     FD 00 68 FC | 	wrlong	#0, result1
12ffc                 | LR__1631
12ffc                 | LR__1632
12ffc     A7 F0 03 F6 | 	mov	ptra, fp
13000     B2 00 A0 FD | 	call	#popregs_
13004                 | _do_open_ret
13004     2D 00 64 FD | 	ret
13008                 | 
13008                 | ' 
13008                 | ' '-------------------- paper
13008                 | ' 
13008                 | ' sub do_paper
13008                 | _do_paper
13008     03 4A 05 F6 | 	mov	COUNT_, #3
1300c     A8 00 A0 FD | 	call	#pushregs_
13010     88 83 BF FD | 	call	#_pop
13014     FD 1E 02 F6 | 	mov	local01, result1
13018     FE 20 02 F6 | 	mov	local02, result2
1301c     FF 22 02 F6 | 	mov	local03, result3
13020                 | ' t1=pop() 
13020                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13020     1E 22 0E F2 | 	cmp	local03, #30 wz
13024     10 00 90 5D |  if_ne	jmp	#LR__1640
13028     0F 13 02 F6 | 	mov	arg01, local01
1302c     00 14 06 F6 | 	mov	arg02, #0
13030     78 08 B1 FD | 	call	#__system___float_tointeger
13034     FD 1E 02 F6 | 	mov	local01, result1
13038                 | LR__1640
13038                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13038     1F 22 0E F2 | 	cmp	local03, #31 wz
1303c     18 00 90 5D |  if_ne	jmp	#LR__1641
13040     0F 13 02 F6 | 	mov	arg01, local01
13044     A8 0B B1 FD | 	call	#__system____builtin_atof
13048     FD 12 02 F6 | 	mov	arg01, result1
1304c     00 14 06 F6 | 	mov	arg02, #0
13050     58 08 B1 FD | 	call	#__system___float_tointeger
13054     FD 1E 02 F6 | 	mov	local01, result1
13058                 | LR__1641
13058     37 00 00 FF 
1305c     38 E4 05 F1 | 	add	objptr, ##28216
13060     F2 1E 62 FC | 	wrlong	local01, objptr
13064     04 E4 05 F1 | 	add	objptr, #4
13068     F2 12 02 FB | 	rdlong	arg01, objptr
1306c                 | ' 
1306c                 | ' write_color:=ff
1306c     36 00 00 FF 
13070     FB E5 85 F1 | 	sub	objptr, ##28155
13074     F2 12 62 FC | 	wrlong	arg01, objptr
13078                 | ' write_background:=bb
13078     04 E4 05 F1 | 	add	objptr, #4
1307c     F2 1E 62 FC | 	wrlong	local01, objptr
13080     45 E4 85 F1 | 	sub	objptr, #69
13084     A7 F0 03 F6 | 	mov	ptra, fp
13088     B2 00 A0 FD | 	call	#popregs_
1308c                 | _do_paper_ret
1308c     2D 00 64 FD | 	ret
13090                 | 
13090                 | ' 
13090                 | ' '-------------------- peek
13090                 | ' 
13090                 | ' sub do_peek
13090                 | _do_peek
13090     00 4A 05 F6 | 	mov	COUNT_, #0
13094     A8 00 A0 FD | 	call	#pushregs_
13098     14 F0 07 F1 | 	add	ptra, #20
1309c     FC 82 BF FD | 	call	#_pop
130a0     A7 FA 61 FC | 	wrlong	result1, fp
130a4     04 4E 05 F1 | 	add	fp, #4
130a8     A7 FC 61 FC | 	wrlong	result2, fp
130ac     04 4E 05 F1 | 	add	fp, #4
130b0     A7 FE 61 FC | 	wrlong	result3, fp
130b4     08 4E 85 F1 | 	sub	fp, #8
130b8     A7 12 02 F6 | 	mov	arg01, fp
130bc     C0 84 BF FD | 	call	#_converttoint
130c0     0C 4E 05 F1 | 	add	fp, #12
130c4     A7 FA 61 FC | 	wrlong	result1, fp
130c8                 | ' 
130c8                 | ' t1=pop()
130c8                 | ' a=converttoint(t1)
130c8                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
130c8     0C 4E 85 F1 | 	sub	fp, #12
130cc     00 04 00 FF 
130d0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
130d4     1C 00 90 3D |  if_ae	jmp	#LR__1650
130d8     0C 4E 05 F1 | 	add	fp, #12
130dc     A7 12 02 FB | 	rdlong	arg01, fp
130e0     09 FB C1 FA | 	rdbyte	result1, arg01
130e4     04 4E 05 F1 | 	add	fp, #4
130e8     A7 FA 61 FC | 	wrlong	result1, fp
130ec     10 4E 85 F1 | 	sub	fp, #16
130f0     20 00 90 FD | 	jmp	#LR__1651
130f4                 | LR__1650
130f4     0C 4E 05 F1 | 	add	fp, #12
130f8     A7 12 02 FB | 	rdlong	arg01, fp
130fc     0C 4E 85 F1 | 	sub	fp, #12
13100     D8 A3 B0 FD | 	call	#_pspeek
13104     FD FA E1 F8 | 	getbyte	result1, result1, #0
13108     10 4E 05 F1 | 	add	fp, #16
1310c     A7 FA 61 FC | 	wrlong	result1, fp
13110     10 4E 85 F1 | 	sub	fp, #16
13114                 | LR__1651
13114     08 4E 05 F1 | 	add	fp, #8
13118     A7 3A 68 FC | 	wrlong	#29, fp
1311c     08 4E 05 F1 | 	add	fp, #8
13120     A7 12 02 FB | 	rdlong	arg01, fp
13124     10 4E 85 F1 | 	sub	fp, #16
13128     A7 12 62 FC | 	wrlong	arg01, fp
1312c     A7 12 02 F6 | 	mov	arg01, fp
13130     00 83 BF FD | 	call	#_push
13134     A7 F0 03 F6 | 	mov	ptra, fp
13138     B2 00 A0 FD | 	call	#popregs_
1313c                 | _do_peek_ret
1313c     2D 00 64 FD | 	ret
13140                 | 
13140                 | ' 
13140                 | ' '-------------------- pinfloat
13140                 | ' 
13140                 | ' sub do_pinfloat
13140                 | _do_pinfloat
13140     00 4A 05 F6 | 	mov	COUNT_, #0
13144     A8 00 A0 FD | 	call	#pushregs_
13148     0C F0 07 F1 | 	add	ptra, #12
1314c     4C 82 BF FD | 	call	#_pop
13150     A7 FA 61 FC | 	wrlong	result1, fp
13154     04 4E 05 F1 | 	add	fp, #4
13158     A7 FC 61 FC | 	wrlong	result2, fp
1315c     04 4E 05 F1 | 	add	fp, #4
13160     A7 FE 61 FC | 	wrlong	result3, fp
13164     08 4E 85 F1 | 	sub	fp, #8
13168     A7 12 02 F6 | 	mov	arg01, fp
1316c     10 84 BF FD | 	call	#_converttoint
13170     50 FA 61 FD | 	fltl	result1
13174     A7 F0 03 F6 | 	mov	ptra, fp
13178     B2 00 A0 FD | 	call	#popregs_
1317c                 | _do_pinfloat_ret
1317c     2D 00 64 FD | 	ret
13180                 | 
13180                 | ' 
13180                 | ' '-------------------- pinhi
13180                 | ' 
13180                 | ' sub do_pinhi
13180                 | _do_pinhi
13180     00 4A 05 F6 | 	mov	COUNT_, #0
13184     A8 00 A0 FD | 	call	#pushregs_
13188     0C F0 07 F1 | 	add	ptra, #12
1318c     0C 82 BF FD | 	call	#_pop
13190     A7 FA 61 FC | 	wrlong	result1, fp
13194     04 4E 05 F1 | 	add	fp, #4
13198     A7 FC 61 FC | 	wrlong	result2, fp
1319c     04 4E 05 F1 | 	add	fp, #4
131a0     A7 FE 61 FC | 	wrlong	result3, fp
131a4     08 4E 85 F1 | 	sub	fp, #8
131a8     A7 12 02 F6 | 	mov	arg01, fp
131ac     D0 83 BF FD | 	call	#_converttoint
131b0     59 FA 61 FD | 	drvh	result1
131b4     A7 F0 03 F6 | 	mov	ptra, fp
131b8     B2 00 A0 FD | 	call	#popregs_
131bc                 | _do_pinhi_ret
131bc     2D 00 64 FD | 	ret
131c0                 | 
131c0                 | ' 
131c0                 | ' '-------------------- pinlo
131c0                 | ' 
131c0                 | ' sub do_pinlo
131c0                 | _do_pinlo
131c0     00 4A 05 F6 | 	mov	COUNT_, #0
131c4     A8 00 A0 FD | 	call	#pushregs_
131c8     0C F0 07 F1 | 	add	ptra, #12
131cc     CC 81 BF FD | 	call	#_pop
131d0     A7 FA 61 FC | 	wrlong	result1, fp
131d4     04 4E 05 F1 | 	add	fp, #4
131d8     A7 FC 61 FC | 	wrlong	result2, fp
131dc     04 4E 05 F1 | 	add	fp, #4
131e0     A7 FE 61 FC | 	wrlong	result3, fp
131e4     08 4E 85 F1 | 	sub	fp, #8
131e8     A7 12 02 F6 | 	mov	arg01, fp
131ec     90 83 BF FD | 	call	#_converttoint
131f0     58 FA 61 FD | 	drvl	result1
131f4     A7 F0 03 F6 | 	mov	ptra, fp
131f8     B2 00 A0 FD | 	call	#popregs_
131fc                 | _do_pinlo_ret
131fc     2D 00 64 FD | 	ret
13200                 | 
13200                 | ' 
13200                 | ' '-------------------- pinread
13200                 | ' 
13200                 | ' sub do_pinread
13200                 | _do_pinread
13200     00 4A 05 F6 | 	mov	COUNT_, #0
13204     A8 00 A0 FD | 	call	#pushregs_
13208     0C F0 07 F1 | 	add	ptra, #12
1320c     8C 81 BF FD | 	call	#_pop
13210     A7 FA 61 FC | 	wrlong	result1, fp
13214     04 4E 05 F1 | 	add	fp, #4
13218     A7 FC 61 FC | 	wrlong	result2, fp
1321c     04 4E 05 F1 | 	add	fp, #4
13220     A7 FE 61 FC | 	wrlong	result3, fp
13224     08 4E 85 F1 | 	sub	fp, #8
13228     A7 12 02 F6 | 	mov	arg01, fp
1322c     50 83 BF FD | 	call	#_converttoint
13230     FD 12 02 F6 | 	mov	arg01, result1
13234     20 12 CE F7 | 	test	arg01, #32 wz
13238     FF FB 01 56 |  if_ne	mov	result1, inb
1323c     FE FB 01 A6 |  if_e	mov	result1, ina
13240     09 FB 41 F0 | 	shr	result1, arg01
13244     06 12 46 F0 | 	shr	arg01, #6
13248     09 FB 41 F7 | 	zerox	result1, arg01
1324c     52 00 00 FF 
13250     18 E4 05 F1 | 	add	objptr, ##42008
13254     F2 FA 61 FC | 	wrlong	result1, objptr
13258     52 00 00 FF 
1325c     18 E4 85 F1 | 	sub	objptr, ##42008
13260     08 4E 05 F1 | 	add	fp, #8
13264     A7 3A 68 FC | 	wrlong	#29, fp
13268     08 4E 85 F1 | 	sub	fp, #8
1326c     A7 08 68 FC | 	wrlong	#4, fp
13270     A7 12 02 F6 | 	mov	arg01, fp
13274     BC 81 BF FD | 	call	#_push
13278     A7 F0 03 F6 | 	mov	ptra, fp
1327c     B2 00 A0 FD | 	call	#popregs_
13280                 | _do_pinread_ret
13280     2D 00 64 FD | 	ret
13284                 | 
13284                 | ' 
13284                 | ' '-------------------- pinstart
13284                 | ' 
13284                 | ' sub do_pinstart
13284                 | _do_pinstart
13284     03 4A 05 F6 | 	mov	COUNT_, #3
13288     A8 00 A0 FD | 	call	#pushregs_
1328c     30 F0 07 F1 | 	add	ptra, #48
13290     08 81 BF FD | 	call	#_pop
13294     FD 16 02 F6 | 	mov	arg03, result1
13298     FE 14 02 F6 | 	mov	arg02, result2
1329c     FF 18 02 F6 | 	mov	arg04, result3
132a0     A7 16 62 FC | 	wrlong	arg03, fp
132a4     04 4E 05 F1 | 	add	fp, #4
132a8     A7 14 62 FC | 	wrlong	arg02, fp
132ac     04 4E 05 F1 | 	add	fp, #4
132b0     A7 18 62 FC | 	wrlong	arg04, fp
132b4     08 4E 85 F1 | 	sub	fp, #8
132b8     E0 80 BF FD | 	call	#_pop
132bc     FD 16 02 F6 | 	mov	arg03, result1
132c0     FE 14 02 F6 | 	mov	arg02, result2
132c4     FF 18 02 F6 | 	mov	arg04, result3
132c8     0C 4E 05 F1 | 	add	fp, #12
132cc     A7 16 62 FC | 	wrlong	arg03, fp
132d0     04 4E 05 F1 | 	add	fp, #4
132d4     A7 14 62 FC | 	wrlong	arg02, fp
132d8     04 4E 05 F1 | 	add	fp, #4
132dc     A7 18 62 FC | 	wrlong	arg04, fp
132e0     14 4E 85 F1 | 	sub	fp, #20
132e4     B4 80 BF FD | 	call	#_pop
132e8     FD 16 02 F6 | 	mov	arg03, result1
132ec     FE 14 02 F6 | 	mov	arg02, result2
132f0     FF 18 02 F6 | 	mov	arg04, result3
132f4     18 4E 05 F1 | 	add	fp, #24
132f8     A7 16 62 FC | 	wrlong	arg03, fp
132fc     04 4E 05 F1 | 	add	fp, #4
13300     A7 14 62 FC | 	wrlong	arg02, fp
13304     04 4E 05 F1 | 	add	fp, #4
13308     A7 18 62 FC | 	wrlong	arg04, fp
1330c     20 4E 85 F1 | 	sub	fp, #32
13310     88 80 BF FD | 	call	#_pop
13314     FF 16 02 F6 | 	mov	arg03, result3
13318     24 4E 05 F1 | 	add	fp, #36
1331c     A7 FA 61 FC | 	wrlong	result1, fp
13320     04 4E 05 F1 | 	add	fp, #4
13324     A7 FC 61 FC | 	wrlong	result2, fp
13328     04 4E 05 F1 | 	add	fp, #4
1332c     A7 16 62 FC | 	wrlong	arg03, fp
13330     08 4E 85 F1 | 	sub	fp, #8
13334     A7 12 02 F6 | 	mov	arg01, fp
13338     24 4E 85 F1 | 	sub	fp, #36
1333c     40 82 BF FD | 	call	#_converttoint
13340     FD 1E 02 F6 | 	mov	local01, result1
13344     18 4E 05 F1 | 	add	fp, #24
13348     A7 12 02 F6 | 	mov	arg01, fp
1334c     18 4E 85 F1 | 	sub	fp, #24
13350     2C 82 BF FD | 	call	#_converttoint
13354     FD 20 02 F6 | 	mov	local02, result1
13358     0C 4E 05 F1 | 	add	fp, #12
1335c     A7 12 02 F6 | 	mov	arg01, fp
13360     0C 4E 85 F1 | 	sub	fp, #12
13364     18 82 BF FD | 	call	#_converttoint
13368     FD 22 02 F6 | 	mov	local03, result1
1336c     A7 12 02 F6 | 	mov	arg01, fp
13370     0C 82 BF FD | 	call	#_converttoint
13374     40 1E 62 FD | 	dirl	local01
13378     0F 21 02 FC | 	wrpin	local02, local01
1337c     0F 23 12 FC | 	wxpin	local03, local01
13380     0F FB 21 FC | 	wypin	result1, local01
13384     41 1E 62 FD | 	dirh	local01
13388     A7 F0 03 F6 | 	mov	ptra, fp
1338c     B2 00 A0 FD | 	call	#popregs_
13390                 | _do_pinstart_ret
13390     2D 00 64 FD | 	ret
13394                 | 
13394                 | ' 
13394                 | ' '-------------------- pintoggle
13394                 | ' 
13394                 | ' sub do_pintoggle
13394                 | _do_pintoggle
13394     00 4A 05 F6 | 	mov	COUNT_, #0
13398     A8 00 A0 FD | 	call	#pushregs_
1339c     0C F0 07 F1 | 	add	ptra, #12
133a0     F8 7F BF FD | 	call	#_pop
133a4     A7 FA 61 FC | 	wrlong	result1, fp
133a8     04 4E 05 F1 | 	add	fp, #4
133ac     A7 FC 61 FC | 	wrlong	result2, fp
133b0     04 4E 05 F1 | 	add	fp, #4
133b4     A7 FE 61 FC | 	wrlong	result3, fp
133b8     08 4E 85 F1 | 	sub	fp, #8
133bc     A7 12 02 F6 | 	mov	arg01, fp
133c0     BC 81 BF FD | 	call	#_converttoint
133c4     5F FA 61 FD | 	drvnot	result1
133c8     A7 F0 03 F6 | 	mov	ptra, fp
133cc     B2 00 A0 FD | 	call	#popregs_
133d0                 | _do_pintoggle_ret
133d0     2D 00 64 FD | 	ret
133d4                 | 
133d4                 | ' 
133d4                 | ' '-------------------- pinwrite
133d4                 | ' 
133d4                 | ' sub do_pinwrite
133d4                 | _do_pinwrite
133d4     01 4A 05 F6 | 	mov	COUNT_, #1
133d8     A8 00 A0 FD | 	call	#pushregs_
133dc     18 F0 07 F1 | 	add	ptra, #24
133e0     B8 7F BF FD | 	call	#_pop
133e4     FD 14 02 F6 | 	mov	arg02, result1
133e8     FE 12 02 F6 | 	mov	arg01, result2
133ec     FF 1E 02 F6 | 	mov	local01, result3
133f0     A7 14 62 FC | 	wrlong	arg02, fp
133f4     04 4E 05 F1 | 	add	fp, #4
133f8     A7 12 62 FC | 	wrlong	arg01, fp
133fc     04 4E 05 F1 | 	add	fp, #4
13400     A7 1E 62 FC | 	wrlong	local01, fp
13404     08 4E 85 F1 | 	sub	fp, #8
13408     90 7F BF FD | 	call	#_pop
1340c     FF 1E 02 F6 | 	mov	local01, result3
13410     0C 4E 05 F1 | 	add	fp, #12
13414     A7 FA 61 FC | 	wrlong	result1, fp
13418     04 4E 05 F1 | 	add	fp, #4
1341c     A7 FC 61 FC | 	wrlong	result2, fp
13420     04 4E 05 F1 | 	add	fp, #4
13424     A7 1E 62 FC | 	wrlong	local01, fp
13428     08 4E 85 F1 | 	sub	fp, #8
1342c     A7 12 02 F6 | 	mov	arg01, fp
13430     0C 4E 85 F1 | 	sub	fp, #12
13434     48 81 BF FD | 	call	#_converttoint
13438     FD 1E 02 F6 | 	mov	local01, result1
1343c     A7 12 02 F6 | 	mov	arg01, fp
13440     3C 81 BF FD | 	call	#_converttoint
13444     FD 14 02 F6 | 	mov	arg02, result1
13448     0F 13 02 F6 | 	mov	arg01, local01
1344c     94 D5 B0 FD | 	call	#__system___pinwrite
13450     A7 F0 03 F6 | 	mov	ptra, fp
13454     B2 00 A0 FD | 	call	#popregs_
13458                 | _do_pinwrite_ret
13458     2D 00 64 FD | 	ret
1345c                 | 
1345c                 | ' 
1345c                 | ' '-------------------- play
1345c                 | ' 
1345c                 | ' sub do_play
1345c                 | _do_play
1345c     08 4A 05 F6 | 	mov	COUNT_, #8
13460     A8 00 A0 FD | 	call	#pushregs_
13464     7C F0 07 F1 | 	add	ptra, #124
13468     68 4E 05 F1 | 	add	fp, #104
1346c     77 CC A1 FF 
13470     A7 7C 6B FC | 	wrlong	##1134096318, fp
13474                 | ' speed_coeff=305.873
13474                 | ' 
13474                 | ' for i=0 to 8 : params(i)=-2.0 : next i
13474     64 4E 85 F1 | 	sub	fp, #100
13478     A7 00 68 FC | 	wrlong	#0, fp
1347c     97 18 48 FB | 	callpa	#(@LR__1661-@LR__1660)>>2,fcache_load_ptr_
13480                 | LR__1660
13480     A7 16 02 FB | 	rdlong	arg03, fp
13484     02 16 66 F0 | 	shl	arg03, #2
13488     34 4E 05 F1 | 	add	fp, #52
1348c     A7 16 02 F1 | 	add	arg03, fp
13490     00 00 E0 FF 
13494     0B 01 68 FC | 	wrlong	##-1073741824, arg03
13498     34 4E 85 F1 | 	sub	fp, #52
1349c     A7 1E 02 FB | 	rdlong	local01, fp
134a0     01 1E 06 F1 | 	add	local01, #1
134a4     A7 1E 62 FC | 	wrlong	local01, fp
134a8     09 1E 56 F2 | 	cmps	local01, #9 wc
134ac     D0 FF 9F CD |  if_b	jmp	#LR__1660
134b0                 | LR__1661
134b0     04 4E 85 F1 | 	sub	fp, #4
134b4     4A 00 00 FF 
134b8     80 E4 05 F1 | 	add	objptr, ##38016
134bc     F2 20 02 FB | 	rdlong	local02, objptr
134c0     10 23 02 F6 | 	mov	local03, local02
134c4     01 22 66 F0 | 	shl	local03, #1
134c8     10 23 02 F1 | 	add	local03, local02
134cc     02 22 66 F0 | 	shl	local03, #2
134d0     03 00 00 FF 
134d4     04 E4 85 F1 | 	sub	objptr, ##1540
134d8     F2 22 02 F1 | 	add	local03, objptr
134dc     11 25 02 FB | 	rdlong	local04, local03
134e0     A7 24 62 FC | 	wrlong	local04, fp
134e4                 | ' numpar=compiledline(lineptr_e).result.uresult
134e4                 | ' for i=numpar to 1 step -1 
134e4     04 4E 05 F1 | 	add	fp, #4
134e8     A7 24 62 FC | 	wrlong	local04, fp
134ec     04 4E 85 F1 | 	sub	fp, #4
134f0     47 00 00 FF 
134f4     7C E4 85 F1 | 	sub	objptr, ##36476
134f8                 | LR__1662
134f8     A0 7E BF FD | 	call	#_pop
134fc     5C 4E 05 F1 | 	add	fp, #92
13500     A7 FA 61 FC | 	wrlong	result1, fp
13504     04 4E 05 F1 | 	add	fp, #4
13508     A7 FC 61 FC | 	wrlong	result2, fp
1350c     04 4E 05 F1 | 	add	fp, #4
13510     A7 FE 61 FC | 	wrlong	result3, fp
13514     60 4E 85 F1 | 	sub	fp, #96
13518     A7 22 02 FB | 	rdlong	local03, fp
1351c     01 22 86 F1 | 	sub	local03, #1
13520     02 22 66 F0 | 	shl	local03, #2
13524     34 4E 05 F1 | 	add	fp, #52
13528     A7 22 02 F1 | 	add	local03, fp
1352c     24 4E 05 F1 | 	add	fp, #36
13530     A7 26 02 F6 | 	mov	local05, fp
13534     13 13 02 F6 | 	mov	arg01, local05
13538     5C 4E 85 F1 | 	sub	fp, #92
1353c     FC 80 BF FD | 	call	#_converttofloat
13540     11 FB 61 FC | 	wrlong	result1, local03
13544     04 4E 05 F1 | 	add	fp, #4
13548     A7 1E 02 FB | 	rdlong	local01, fp
1354c     01 1E 86 F1 | 	sub	local01, #1
13550     A7 1E 62 FC | 	wrlong	local01, fp
13554     04 4E 85 F1 | 	sub	fp, #4
13558     01 1E 56 F2 | 	cmps	local01, #1 wc
1355c     98 FF 9F 3D |  if_ae	jmp	#LR__1662
13560                 | ' 
13560                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
13560     38 4E 05 F1 | 	add	fp, #56
13564     A7 12 02 FB | 	rdlong	arg01, fp
13568     38 4E 85 F1 | 	sub	fp, #56
1356c     00 14 06 F6 | 	mov	arg02, #0
13570     01 16 06 F6 | 	mov	arg03, #1
13574     A0 02 B1 FD | 	call	#__system___float_cmp
13578     00 FA 55 F2 | 	cmps	result1, #0 wc
1357c     0C 4E 05 C1 |  if_b	add	fp, #12
13580     A7 00 68 CC |  if_b	wrlong	#0, fp
13584     0C 4E 85 C1 |  if_b	sub	fp, #12
13588     2C 00 90 CD |  if_b	jmp	#LR__1663
1358c     38 4E 05 F1 | 	add	fp, #56
13590     A7 12 02 FB | 	rdlong	arg01, fp
13594     38 4E 85 F1 | 	sub	fp, #56
13598     01 14 06 F6 | 	mov	arg02, #1
1359c     0C 03 B1 FD | 	call	#__system___float_tointeger
135a0     FD 1E 52 F6 | 	abs	local01, result1 wc
135a4     07 1E 06 F5 | 	and	local01, #7
135a8     0F 1F 82 F6 | 	negc	local01, local01
135ac     0C 4E 05 F1 | 	add	fp, #12
135b0     A7 1E 62 FC | 	wrlong	local01, fp
135b4     0C 4E 85 F1 | 	sub	fp, #12
135b8                 | LR__1663
135b8                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
135b8     3C 4E 05 F1 | 	add	fp, #60
135bc     A7 12 02 FB | 	rdlong	arg01, fp
135c0     3C 4E 85 F1 | 	sub	fp, #60
135c4     00 14 06 F6 | 	mov	arg02, #0
135c8     01 16 06 F6 | 	mov	arg03, #1
135cc     48 02 B1 FD | 	call	#__system___float_cmp
135d0     00 FA 55 F2 | 	cmps	result1, #0 wc
135d4     40 00 90 3D |  if_ae	jmp	#LR__1664
135d8     0C 4E 05 F1 | 	add	fp, #12
135dc     A7 20 02 FB | 	rdlong	local02, fp
135e0     10 23 02 F6 | 	mov	local03, local02
135e4     01 22 66 F0 | 	shl	local03, #1
135e8     10 23 02 F1 | 	add	local03, local02
135ec     03 22 66 F0 | 	shl	local03, #3
135f0     14 00 00 FF 
135f4     38 E5 05 F1 | 	add	objptr, ##10552
135f8     F2 22 02 F1 | 	add	local03, objptr
135fc     11 29 02 FB | 	rdlong	local06, local03
13600     60 4E 05 F1 | 	add	fp, #96
13604     A7 28 62 FC | 	wrlong	local06, fp
13608     6C 4E 85 F1 | 	sub	fp, #108
1360c     14 00 00 FF 
13610     38 E5 85 F1 | 	sub	objptr, ##10552
13614     44 00 90 FD | 	jmp	#LR__1665
13618                 | LR__1664
13618     3C 4E 05 F1 | 	add	fp, #60
1361c     A7 24 02 FB | 	rdlong	local04, fp
13620     30 4E 05 F1 | 	add	fp, #48
13624     A7 24 62 FC | 	wrlong	local04, fp
13628     60 4E 85 F1 | 	sub	fp, #96
1362c     A7 20 02 FB | 	rdlong	local02, fp
13630     10 23 02 F6 | 	mov	local03, local02
13634     01 22 66 F0 | 	shl	local03, #1
13638     10 23 02 F1 | 	add	local03, local02
1363c     03 22 66 F0 | 	shl	local03, #3
13640     14 00 00 FF 
13644     38 E5 05 F1 | 	add	objptr, ##10552
13648     F2 22 02 F1 | 	add	local03, objptr
1364c     0C 4E 85 F1 | 	sub	fp, #12
13650     11 25 62 FC | 	wrlong	local04, local03
13654     14 00 00 FF 
13658     38 E5 85 F1 | 	sub	objptr, ##10552
1365c                 | LR__1665
1365c                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
1365c     40 4E 05 F1 | 	add	fp, #64
13660     A7 12 02 FB | 	rdlong	arg01, fp
13664     40 4E 85 F1 | 	sub	fp, #64
13668     00 14 06 F6 | 	mov	arg02, #0
1366c     01 16 06 F6 | 	mov	arg03, #1
13670     A4 01 B1 FD | 	call	#__system___float_cmp
13674     00 FA 55 F2 | 	cmps	result1, #0 wc
13678     24 00 90 CD |  if_b	jmp	#LR__1666
1367c     40 4E 05 F1 | 	add	fp, #64
13680     A7 12 02 FB | 	rdlong	arg01, fp
13684     40 4E 85 F1 | 	sub	fp, #64
13688     20 0E 23 FF 
1368c     00 14 06 F6 | 	mov	arg02, ##1176256512
13690     01 16 66 F6 | 	neg	arg03, #1
13694     80 01 B1 FD | 	call	#__system___float_cmp
13698     01 FA 55 F2 | 	cmps	result1, #1 wc
1369c     48 00 90 CD |  if_b	jmp	#LR__1667
136a0                 | LR__1666
136a0     0C 4E 05 F1 | 	add	fp, #12
136a4     A7 22 02 FB | 	rdlong	local03, fp
136a8     11 2B 02 F6 | 	mov	local07, local03
136ac     01 2A 66 F0 | 	shl	local07, #1
136b0     11 2B 02 F1 | 	add	local07, local03
136b4     03 2A 66 F0 | 	shl	local07, #3
136b8     14 00 00 FF 
136bc     38 E5 05 F1 | 	add	objptr, ##10552
136c0     F2 2A 02 F1 | 	add	local07, objptr
136c4     06 2A 06 F1 | 	add	local07, #6
136c8     15 27 E2 FA | 	rdword	local05, local07
136cc     13 25 32 F9 | 	getword	local04, local05, #0
136d0     1C 4E 05 F1 | 	add	fp, #28
136d4     A7 24 62 FC | 	wrlong	local04, fp
136d8     28 4E 85 F1 | 	sub	fp, #40
136dc     14 00 00 FF 
136e0     38 E5 85 F1 | 	sub	objptr, ##10552
136e4     54 00 90 FD | 	jmp	#LR__1668
136e8                 | LR__1667
136e8     40 4E 05 F1 | 	add	fp, #64
136ec     A7 12 02 FB | 	rdlong	arg01, fp
136f0     40 4E 85 F1 | 	sub	fp, #64
136f4     01 14 06 F6 | 	mov	arg02, #1
136f8     B0 01 B1 FD | 	call	#__system___float_tointeger
136fc     28 4E 05 F1 | 	add	fp, #40
13700     A7 FA 61 FC | 	wrlong	result1, fp
13704     1C 4E 85 F1 | 	sub	fp, #28
13708     A7 20 02 FB | 	rdlong	local02, fp
1370c     10 23 02 F6 | 	mov	local03, local02
13710     01 22 66 F0 | 	shl	local03, #1
13714     10 23 02 F1 | 	add	local03, local02
13718     03 22 66 F0 | 	shl	local03, #3
1371c     14 00 00 FF 
13720     38 E5 05 F1 | 	add	objptr, ##10552
13724     F2 22 02 F1 | 	add	local03, objptr
13728     0C 4E 85 F1 | 	sub	fp, #12
1372c     06 22 06 F1 | 	add	local03, #6
13730     11 FB 51 FC | 	wrword	result1, local03
13734     14 00 00 FF 
13738     38 E5 85 F1 | 	sub	objptr, ##10552
1373c                 | LR__1668
1373c                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
1373c     44 4E 05 F1 | 	add	fp, #68
13740     A7 12 02 FB | 	rdlong	arg01, fp
13744     44 4E 85 F1 | 	sub	fp, #68
13748     00 14 06 F6 | 	mov	arg02, #0
1374c     01 16 06 F6 | 	mov	arg03, #1
13750     C4 00 B1 FD | 	call	#__system___float_cmp
13754     00 FA 55 F2 | 	cmps	result1, #0 wc
13758     24 00 90 CD |  if_b	jmp	#LR__1669
1375c     44 4E 05 F1 | 	add	fp, #68
13760     A7 12 02 FB | 	rdlong	arg01, fp
13764     44 4E 85 F1 | 	sub	fp, #68
13768     89 C1 20 FF 
1376c     6F 14 06 F6 | 	mov	arg02, ##1099108975
13770     01 16 66 F6 | 	neg	arg03, #1
13774     A0 00 B1 FD | 	call	#__system___float_cmp
13778     01 FA 55 F2 | 	cmps	result1, #1 wc
1377c     44 00 90 CD |  if_b	jmp	#LR__1670
13780                 | LR__1669
13780     0C 4E 05 F1 | 	add	fp, #12
13784     A7 20 02 FB | 	rdlong	local02, fp
13788     10 23 02 F6 | 	mov	local03, local02
1378c     01 22 66 F0 | 	shl	local03, #1
13790     10 23 02 F1 | 	add	local03, local02
13794     03 22 66 F0 | 	shl	local03, #3
13798     14 00 00 FF 
1379c     38 E5 05 F1 | 	add	objptr, ##10552
137a0     F2 22 02 F1 | 	add	local03, objptr
137a4     0C 22 06 F1 | 	add	local03, #12
137a8     11 29 02 FB | 	rdlong	local06, local03
137ac     68 4E 05 F1 | 	add	fp, #104
137b0     A7 28 62 FC | 	wrlong	local06, fp
137b4     74 4E 85 F1 | 	sub	fp, #116
137b8     14 00 00 FF 
137bc     38 E5 85 F1 | 	sub	objptr, ##10552
137c0     48 00 90 FD | 	jmp	#LR__1671
137c4                 | LR__1670
137c4     44 4E 05 F1 | 	add	fp, #68
137c8     A7 24 02 FB | 	rdlong	local04, fp
137cc     30 4E 05 F1 | 	add	fp, #48
137d0     A7 24 62 FC | 	wrlong	local04, fp
137d4     68 4E 85 F1 | 	sub	fp, #104
137d8     A7 20 02 FB | 	rdlong	local02, fp
137dc     10 23 02 F6 | 	mov	local03, local02
137e0     01 22 66 F0 | 	shl	local03, #1
137e4     10 23 02 F1 | 	add	local03, local02
137e8     03 22 66 F0 | 	shl	local03, #3
137ec     14 00 00 FF 
137f0     38 E5 05 F1 | 	add	objptr, ##10552
137f4     F2 22 02 F1 | 	add	local03, objptr
137f8     0C 4E 85 F1 | 	sub	fp, #12
137fc     0C 22 06 F1 | 	add	local03, #12
13800     11 25 62 FC | 	wrlong	local04, local03
13804     14 00 00 FF 
13808     38 E5 85 F1 | 	sub	objptr, ##10552
1380c                 | LR__1671
1380c                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
1380c     48 4E 05 F1 | 	add	fp, #72
13810     A7 12 02 FB | 	rdlong	arg01, fp
13814     48 4E 85 F1 | 	sub	fp, #72
13818     00 14 06 F6 | 	mov	arg02, #0
1381c     01 16 06 F6 | 	mov	arg03, #1
13820     F4 FF B0 FD | 	call	#__system___float_cmp
13824     00 FA 55 F2 | 	cmps	result1, #0 wc
13828     24 00 90 CD |  if_b	jmp	#LR__1672
1382c     48 4E 05 F1 | 	add	fp, #72
13830     A7 12 02 FB | 	rdlong	arg01, fp
13834     48 4E 85 F1 | 	sub	fp, #72
13838     00 00 21 FF 
1383c     00 14 06 F6 | 	mov	arg02, ##1107296256
13840     01 16 66 F6 | 	neg	arg03, #1
13844     D0 FF B0 FD | 	call	#__system___float_cmp
13848     01 FA 55 F2 | 	cmps	result1, #1 wc
1384c     48 00 90 CD |  if_b	jmp	#LR__1673
13850                 | LR__1672
13850     0C 4E 05 F1 | 	add	fp, #12
13854     A7 22 02 FB | 	rdlong	local03, fp
13858     11 2B 02 F6 | 	mov	local07, local03
1385c     01 2A 66 F0 | 	shl	local07, #1
13860     11 2B 02 F1 | 	add	local07, local03
13864     03 2A 66 F0 | 	shl	local07, #3
13868     14 00 00 FF 
1386c     38 E5 05 F1 | 	add	objptr, ##10552
13870     F2 2A 02 F1 | 	add	local07, objptr
13874     04 2A 06 F1 | 	add	local07, #4
13878     15 27 C2 FA | 	rdbyte	local05, local07
1387c     13 25 E2 F8 | 	getbyte	local04, local05, #0
13880     14 4E 05 F1 | 	add	fp, #20
13884     A7 24 62 FC | 	wrlong	local04, fp
13888     20 4E 85 F1 | 	sub	fp, #32
1388c     14 00 00 FF 
13890     38 E5 85 F1 | 	sub	objptr, ##10552
13894     54 00 90 FD | 	jmp	#LR__1674
13898                 | LR__1673
13898     48 4E 05 F1 | 	add	fp, #72
1389c     A7 12 02 FB | 	rdlong	arg01, fp
138a0     48 4E 85 F1 | 	sub	fp, #72
138a4     01 14 06 F6 | 	mov	arg02, #1
138a8     00 00 B1 FD | 	call	#__system___float_tointeger
138ac     20 4E 05 F1 | 	add	fp, #32
138b0     A7 FA 61 FC | 	wrlong	result1, fp
138b4     14 4E 85 F1 | 	sub	fp, #20
138b8     A7 20 02 FB | 	rdlong	local02, fp
138bc     10 23 02 F6 | 	mov	local03, local02
138c0     01 22 66 F0 | 	shl	local03, #1
138c4     10 23 02 F1 | 	add	local03, local02
138c8     03 22 66 F0 | 	shl	local03, #3
138cc     14 00 00 FF 
138d0     38 E5 05 F1 | 	add	objptr, ##10552
138d4     F2 22 02 F1 | 	add	local03, objptr
138d8     0C 4E 85 F1 | 	sub	fp, #12
138dc     04 22 06 F1 | 	add	local03, #4
138e0     11 FB 41 FC | 	wrbyte	result1, local03
138e4     14 00 00 FF 
138e8     38 E5 85 F1 | 	sub	objptr, ##10552
138ec                 | LR__1674
138ec                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
138ec     4C 4E 05 F1 | 	add	fp, #76
138f0     A7 12 02 FB | 	rdlong	arg01, fp
138f4     4C 4E 85 F1 | 	sub	fp, #76
138f8     00 14 06 F6 | 	mov	arg02, #0
138fc     01 16 06 F6 | 	mov	arg03, #1
13900     14 FF B0 FD | 	call	#__system___float_cmp
13904     00 FA 55 F2 | 	cmps	result1, #0 wc
13908     24 00 90 CD |  if_b	jmp	#LR__1675
1390c     4C 4E 05 F1 | 	add	fp, #76
13910     A7 12 02 FB | 	rdlong	arg01, fp
13914     4C 4E 85 F1 | 	sub	fp, #76
13918     00 80 20 FF 
1391c     00 14 06 F6 | 	mov	arg02, ##1090519040
13920     01 16 66 F6 | 	neg	arg03, #1
13924     F0 FE B0 FD | 	call	#__system___float_cmp
13928     01 FA 55 F2 | 	cmps	result1, #1 wc
1392c     48 00 90 CD |  if_b	jmp	#LR__1676
13930                 | LR__1675
13930     0C 4E 05 F1 | 	add	fp, #12
13934     A7 22 02 FB | 	rdlong	local03, fp
13938     11 2B 02 F6 | 	mov	local07, local03
1393c     01 2A 66 F0 | 	shl	local07, #1
13940     11 2B 02 F1 | 	add	local07, local03
13944     03 2A 66 F0 | 	shl	local07, #3
13948     14 00 00 FF 
1394c     38 E5 05 F1 | 	add	objptr, ##10552
13950     F2 2A 02 F1 | 	add	local07, objptr
13954     05 2A 06 F1 | 	add	local07, #5
13958     15 27 C2 FA | 	rdbyte	local05, local07
1395c     13 25 E2 F8 | 	getbyte	local04, local05, #0
13960     18 4E 05 F1 | 	add	fp, #24
13964     A7 24 62 FC | 	wrlong	local04, fp
13968     24 4E 85 F1 | 	sub	fp, #36
1396c     14 00 00 FF 
13970     38 E5 85 F1 | 	sub	objptr, ##10552
13974     54 00 90 FD | 	jmp	#LR__1677
13978                 | LR__1676
13978     4C 4E 05 F1 | 	add	fp, #76
1397c     A7 12 02 FB | 	rdlong	arg01, fp
13980     4C 4E 85 F1 | 	sub	fp, #76
13984     01 14 06 F6 | 	mov	arg02, #1
13988     20 FF B0 FD | 	call	#__system___float_tointeger
1398c     24 4E 05 F1 | 	add	fp, #36
13990     A7 FA 61 FC | 	wrlong	result1, fp
13994     18 4E 85 F1 | 	sub	fp, #24
13998     A7 20 02 FB | 	rdlong	local02, fp
1399c     10 23 02 F6 | 	mov	local03, local02
139a0     01 22 66 F0 | 	shl	local03, #1
139a4     10 23 02 F1 | 	add	local03, local02
139a8     03 22 66 F0 | 	shl	local03, #3
139ac     14 00 00 FF 
139b0     38 E5 05 F1 | 	add	objptr, ##10552
139b4     F2 22 02 F1 | 	add	local03, objptr
139b8     0C 4E 85 F1 | 	sub	fp, #12
139bc     05 22 06 F1 | 	add	local03, #5
139c0     11 FB 41 FC | 	wrbyte	result1, local03
139c4     14 00 00 FF 
139c8     38 E5 85 F1 | 	sub	objptr, ##10552
139cc                 | LR__1677
139cc                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
139cc     50 4E 05 F1 | 	add	fp, #80
139d0     A7 12 02 FB | 	rdlong	arg01, fp
139d4     50 4E 85 F1 | 	sub	fp, #80
139d8     00 14 06 F6 | 	mov	arg02, #0
139dc     01 16 06 F6 | 	mov	arg03, #1
139e0     34 FE B0 FD | 	call	#__system___float_cmp
139e4     00 FA 55 F2 | 	cmps	result1, #0 wc
139e8     24 00 90 CD |  if_b	jmp	#LR__1678
139ec     50 4E 05 F1 | 	add	fp, #80
139f0     A7 12 02 FB | 	rdlong	arg01, fp
139f4     50 4E 85 F1 | 	sub	fp, #80
139f8     00 3D 22 FF 
139fc     00 14 06 F6 | 	mov	arg02, ##1148846080
13a00     01 16 66 F6 | 	neg	arg03, #1
13a04     10 FE B0 FD | 	call	#__system___float_cmp
13a08     01 FA 55 F2 | 	cmps	result1, #1 wc
13a0c     44 00 90 CD |  if_b	jmp	#LR__1679
13a10                 | LR__1678
13a10     0C 4E 05 F1 | 	add	fp, #12
13a14     A7 20 02 FB | 	rdlong	local02, fp
13a18     10 23 02 F6 | 	mov	local03, local02
13a1c     01 22 66 F0 | 	shl	local03, #1
13a20     10 23 02 F1 | 	add	local03, local02
13a24     03 22 66 F0 | 	shl	local03, #3
13a28     14 00 00 FF 
13a2c     38 E5 05 F1 | 	add	objptr, ##10552
13a30     F2 22 02 F1 | 	add	local03, objptr
13a34     08 22 06 F1 | 	add	local03, #8
13a38     11 29 02 FB | 	rdlong	local06, local03
13a3c     6C 4E 05 F1 | 	add	fp, #108
13a40     A7 28 62 FC | 	wrlong	local06, fp
13a44     78 4E 85 F1 | 	sub	fp, #120
13a48     14 00 00 FF 
13a4c     38 E5 85 F1 | 	sub	objptr, ##10552
13a50     48 00 90 FD | 	jmp	#LR__1680
13a54                 | LR__1679
13a54     50 4E 05 F1 | 	add	fp, #80
13a58     A7 28 02 FB | 	rdlong	local06, fp
13a5c     28 4E 05 F1 | 	add	fp, #40
13a60     A7 28 62 FC | 	wrlong	local06, fp
13a64     6C 4E 85 F1 | 	sub	fp, #108
13a68     A7 20 02 FB | 	rdlong	local02, fp
13a6c     10 23 02 F6 | 	mov	local03, local02
13a70     01 22 66 F0 | 	shl	local03, #1
13a74     10 23 02 F1 | 	add	local03, local02
13a78     03 22 66 F0 | 	shl	local03, #3
13a7c     14 00 00 FF 
13a80     38 E5 05 F1 | 	add	objptr, ##10552
13a84     F2 22 02 F1 | 	add	local03, objptr
13a88     0C 4E 85 F1 | 	sub	fp, #12
13a8c     08 22 06 F1 | 	add	local03, #8
13a90     11 29 62 FC | 	wrlong	local06, local03
13a94     14 00 00 FF 
13a98     38 E5 85 F1 | 	sub	objptr, ##10552
13a9c                 | LR__1680
13a9c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
13a9c     54 4E 05 F1 | 	add	fp, #84
13aa0     A7 12 02 FB | 	rdlong	arg01, fp
13aa4     54 4E 85 F1 | 	sub	fp, #84
13aa8     00 C0 5F FF 
13aac     00 14 06 F6 | 	mov	arg02, ##-1082130432
13ab0     01 16 06 F6 | 	mov	arg03, #1
13ab4     60 FD B0 FD | 	call	#__system___float_cmp
13ab8     00 FA 55 F2 | 	cmps	result1, #0 wc
13abc     24 00 90 CD |  if_b	jmp	#LR__1681
13ac0     54 4E 05 F1 | 	add	fp, #84
13ac4     A7 12 02 FB | 	rdlong	arg01, fp
13ac8     54 4E 85 F1 | 	sub	fp, #84
13acc     00 C0 1F FF 
13ad0     00 14 06 F6 | 	mov	arg02, ##1065353216
13ad4     01 16 66 F6 | 	neg	arg03, #1
13ad8     3C FD B0 FD | 	call	#__system___float_cmp
13adc     01 FA 55 F2 | 	cmps	result1, #1 wc
13ae0     44 00 90 CD |  if_b	jmp	#LR__1682
13ae4                 | LR__1681
13ae4     0C 4E 05 F1 | 	add	fp, #12
13ae8     A7 20 02 FB | 	rdlong	local02, fp
13aec     10 23 02 F6 | 	mov	local03, local02
13af0     01 22 66 F0 | 	shl	local03, #1
13af4     10 23 02 F1 | 	add	local03, local02
13af8     03 22 66 F0 | 	shl	local03, #3
13afc     14 00 00 FF 
13b00     38 E5 05 F1 | 	add	objptr, ##10552
13b04     F2 22 02 F1 | 	add	local03, objptr
13b08     10 22 06 F1 | 	add	local03, #16
13b0c     11 29 02 FB | 	rdlong	local06, local03
13b10     64 4E 05 F1 | 	add	fp, #100
13b14     A7 28 62 FC | 	wrlong	local06, fp
13b18     70 4E 85 F1 | 	sub	fp, #112
13b1c     14 00 00 FF 
13b20     38 E5 85 F1 | 	sub	objptr, ##10552
13b24     48 00 90 FD | 	jmp	#LR__1683
13b28                 | LR__1682
13b28     54 4E 05 F1 | 	add	fp, #84
13b2c     A7 28 02 FB | 	rdlong	local06, fp
13b30     1C 4E 05 F1 | 	add	fp, #28
13b34     A7 28 62 FC | 	wrlong	local06, fp
13b38     64 4E 85 F1 | 	sub	fp, #100
13b3c     A7 20 02 FB | 	rdlong	local02, fp
13b40     10 23 02 F6 | 	mov	local03, local02
13b44     01 22 66 F0 | 	shl	local03, #1
13b48     10 23 02 F1 | 	add	local03, local02
13b4c     03 22 66 F0 | 	shl	local03, #3
13b50     14 00 00 FF 
13b54     38 E5 05 F1 | 	add	objptr, ##10552
13b58     F2 22 02 F1 | 	add	local03, objptr
13b5c     0C 4E 85 F1 | 	sub	fp, #12
13b60     10 22 06 F1 | 	add	local03, #16
13b64     11 29 62 FC | 	wrlong	local06, local03
13b68     14 00 00 FF 
13b6c     38 E5 85 F1 | 	sub	objptr, ##10552
13b70                 | LR__1683
13b70                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
13b70     58 4E 05 F1 | 	add	fp, #88
13b74     A7 12 02 FB | 	rdlong	arg01, fp
13b78     58 4E 85 F1 | 	sub	fp, #88
13b7c     00 14 06 F6 | 	mov	arg02, #0
13b80     01 16 06 F6 | 	mov	arg03, #1
13b84     90 FC B0 FD | 	call	#__system___float_cmp
13b88     00 FA 55 F2 | 	cmps	result1, #0 wc
13b8c     24 00 90 CD |  if_b	jmp	#LR__1684
13b90     58 4E 05 F1 | 	add	fp, #88
13b94     A7 12 02 FB | 	rdlong	arg01, fp
13b98     58 4E 85 F1 | 	sub	fp, #88
13b9c     80 BF 21 FF 
13ba0     00 14 06 F6 | 	mov	arg02, ##1132396544
13ba4     01 16 66 F6 | 	neg	arg03, #1
13ba8     6C FC B0 FD | 	call	#__system___float_cmp
13bac     01 FA 55 F2 | 	cmps	result1, #1 wc
13bb0     44 00 90 CD |  if_b	jmp	#LR__1685
13bb4                 | LR__1684
13bb4     0C 4E 05 F1 | 	add	fp, #12
13bb8     A7 22 02 FB | 	rdlong	local03, fp
13bbc     11 2B 02 F6 | 	mov	local07, local03
13bc0     01 2A 66 F0 | 	shl	local07, #1
13bc4     11 2B 02 F1 | 	add	local07, local03
13bc8     03 2A 66 F0 | 	shl	local07, #3
13bcc     14 00 00 FF 
13bd0     38 E5 05 F1 | 	add	objptr, ##10552
13bd4     F2 2A 02 F1 | 	add	local07, objptr
13bd8     14 2A 06 F1 | 	add	local07, #20
13bdc     15 25 E2 FA | 	rdword	local04, local07
13be0     20 4E 05 F1 | 	add	fp, #32
13be4     A7 24 62 FC | 	wrlong	local04, fp
13be8     2C 4E 85 F1 | 	sub	fp, #44
13bec     14 00 00 FF 
13bf0     38 E5 85 F1 | 	sub	objptr, ##10552
13bf4     54 00 90 FD | 	jmp	#LR__1686
13bf8                 | LR__1685
13bf8     58 4E 05 F1 | 	add	fp, #88
13bfc     A7 12 02 FB | 	rdlong	arg01, fp
13c00     58 4E 85 F1 | 	sub	fp, #88
13c04     01 14 06 F6 | 	mov	arg02, #1
13c08     A0 FC B0 FD | 	call	#__system___float_tointeger
13c0c     2C 4E 05 F1 | 	add	fp, #44
13c10     A7 FA 61 FC | 	wrlong	result1, fp
13c14     20 4E 85 F1 | 	sub	fp, #32
13c18     A7 20 02 FB | 	rdlong	local02, fp
13c1c     10 23 02 F6 | 	mov	local03, local02
13c20     01 22 66 F0 | 	shl	local03, #1
13c24     10 23 02 F1 | 	add	local03, local02
13c28     03 22 66 F0 | 	shl	local03, #3
13c2c     14 00 00 FF 
13c30     38 E5 05 F1 | 	add	objptr, ##10552
13c34     F2 22 02 F1 | 	add	local03, objptr
13c38     0C 4E 85 F1 | 	sub	fp, #12
13c3c     14 22 06 F1 | 	add	local03, #20
13c40     11 FB 51 FC | 	wrword	result1, local03
13c44     14 00 00 FF 
13c48     38 E5 85 F1 | 	sub	objptr, ##10552
13c4c                 | LR__1686
13c4c     6C 4E 05 F1 | 	add	fp, #108
13c50     A7 14 02 FB | 	rdlong	arg02, fp
13c54     6C 4E 85 F1 | 	sub	fp, #108
13c58     FC 16 20 FF 
13c5c     54 12 06 F6 | 	mov	arg01, ##1076754516
13c60     50 07 B1 FD | 	call	#__system____builtin_logbase
13c64     FD 24 02 F6 | 	mov	local04, result1
13c68     1E 14 C6 F9 | 	decod	arg02, #30
13c6c     FC 16 20 FF 
13c70     54 12 06 F6 | 	mov	arg01, ##1076754516
13c74     3C 07 B1 FD | 	call	#__system____builtin_logbase
13c78     FD 14 02 F6 | 	mov	arg02, result1
13c7c     12 13 02 F6 | 	mov	arg01, local04
13c80     64 F9 B0 FD | 	call	#__system___float_div
13c84     FD 12 02 F6 | 	mov	arg01, result1
13c88     00 14 06 F6 | 	mov	arg02, #0
13c8c     1C FC B0 FD | 	call	#__system___float_tointeger
13c90     30 4E 05 F1 | 	add	fp, #48
13c94     A7 FA 61 FC | 	wrlong	result1, fp
13c98     1E 24 C6 F9 | 	decod	local04, #30
13c9c     FD 12 02 F6 | 	mov	arg01, result1
13ca0     30 4E 85 F1 | 	sub	fp, #48
13ca4     05 12 06 F1 | 	add	arg01, #5
13ca8     09 13 52 F6 | 	abs	arg01, arg01 wc
13cac     1F 2C C6 C9 |  if_b	decod	local08, #31
13cb0     00 2C 06 36 |  if_ae	mov	local08, #0
13cb4     28 F3 B0 FD | 	call	#__system___float_fromuns
13cb8     16 FB 61 F5 | 	xor	result1, local08
13cbc     FD 14 02 F6 | 	mov	arg02, result1
13cc0     12 13 02 F6 | 	mov	arg01, local04
13cc4     24 06 B1 FD | 	call	#__system____builtin_powf
13cc8     FD 12 02 F6 | 	mov	arg01, result1
13ccc     01 14 06 F6 | 	mov	arg02, #1
13cd0     D8 FB B0 FD | 	call	#__system___float_tointeger
13cd4     10 4E 05 F1 | 	add	fp, #16
13cd8     A7 FA 61 FC | 	wrlong	result1, fp
13cdc                 | ' skip=round(2^(lfreq+5))
13cdc                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
13cdc     10 4E 85 F1 | 	sub	fp, #16
13ce0     40 00 00 FF 
13ce4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
13ce8     30 00 90 CD |  if_b	jmp	#LR__1687
13cec     10 4E 05 F1 | 	add	fp, #16
13cf0     A7 1E 02 FB | 	rdlong	local01, fp
13cf4     0F 25 52 F6 | 	abs	local04, local01 wc
13cf8     0F 24 46 F0 | 	shr	local04, #15
13cfc     12 25 82 F6 | 	negc	local04, local04
13d00     0C 4E 85 F1 | 	sub	fp, #12
13d04     A7 24 62 FC | 	wrlong	local04, fp
13d08     0C 4E 05 F1 | 	add	fp, #12
13d0c     40 00 80 FF 
13d10     A7 00 68 FC | 	wrlong	##32768, fp
13d14     10 4E 85 F1 | 	sub	fp, #16
13d18     0C 00 90 FD | 	jmp	#LR__1688
13d1c                 | LR__1687
13d1c     04 4E 05 F1 | 	add	fp, #4
13d20     A7 02 68 FC | 	wrlong	#1, fp
13d24     04 4E 85 F1 | 	sub	fp, #4
13d28                 | LR__1688
13d28     6C 4E 05 F1 | 	add	fp, #108
13d2c     A7 14 02 FB | 	rdlong	arg02, fp
13d30     6C 4E 85 F1 | 	sub	fp, #108
13d34     3E 2C 25 FF 
13d38     3C 12 06 F6 | 	mov	arg01, ##1247312956
13d3c     A8 F8 B0 FD | 	call	#__system___float_div
13d40     FD 24 02 F6 | 	mov	local04, result1
13d44     04 4E 05 F1 | 	add	fp, #4
13d48     A7 12 02 FB | 	rdlong	arg01, fp
13d4c     04 4E 85 F1 | 	sub	fp, #4
13d50     09 13 52 F6 | 	abs	arg01, arg01 wc
13d54     1F 2C C6 C9 |  if_b	decod	local08, #31
13d58     00 2C 06 36 |  if_ae	mov	local08, #0
13d5c     80 F2 B0 FD | 	call	#__system___float_fromuns
13d60     16 FB 61 F5 | 	xor	result1, local08
13d64     FD 1E 02 F6 | 	mov	local01, result1
13d68     1E 20 C6 F9 | 	decod	local02, #30
13d6c     0D 12 06 F6 | 	mov	arg01, #13
13d70     30 4E 05 F1 | 	add	fp, #48
13d74     A7 28 02 FB | 	rdlong	local06, fp
13d78     30 4E 85 F1 | 	sub	fp, #48
13d7c     14 13 82 F1 | 	sub	arg01, local06
13d80     09 13 52 F6 | 	abs	arg01, arg01 wc
13d84     1F 2C C6 C9 |  if_b	decod	local08, #31
13d88     00 2C 06 36 |  if_ae	mov	local08, #0
13d8c     50 F2 B0 FD | 	call	#__system___float_fromuns
13d90     16 FB 61 F5 | 	xor	result1, local08
13d94     FD 14 02 F6 | 	mov	arg02, result1
13d98     10 13 02 F6 | 	mov	arg01, local02
13d9c     4C 05 B1 FD | 	call	#__system____builtin_powf
13da0     FD 14 02 F6 | 	mov	arg02, result1
13da4     0F 13 02 F6 | 	mov	arg01, local01
13da8     38 F6 B0 FD | 	call	#__system___float_mul
13dac     FD 14 02 F6 | 	mov	arg02, result1
13db0     12 13 02 F6 | 	mov	arg01, local04
13db4     30 F8 B0 FD | 	call	#__system___float_div
13db8     FD 12 02 F6 | 	mov	arg01, result1
13dbc     01 14 06 F6 | 	mov	arg02, #1
13dc0     E8 FA B0 FD | 	call	#__system___float_tointeger
13dc4     34 4E 05 F1 | 	add	fp, #52
13dc8     A7 FA 61 FC | 	wrlong	result1, fp
13dcc     34 4E 05 F1 | 	add	fp, #52
13dd0     A7 12 02 FB | 	rdlong	arg01, fp
13dd4     10 4E 05 F1 | 	add	fp, #16
13dd8     A7 14 02 FB | 	rdlong	arg02, fp
13ddc     78 4E 85 F1 | 	sub	fp, #120
13de0     04 F8 B0 FD | 	call	#__system___float_div
13de4     FD 12 02 F6 | 	mov	arg01, result1
13de8     01 14 06 F6 | 	mov	arg02, #1
13dec     BC FA B0 FD | 	call	#__system___float_tointeger
13df0     FD 24 02 F6 | 	mov	local04, result1
13df4     14 4E 05 F1 | 	add	fp, #20
13df8     A7 24 62 FC | 	wrlong	local04, fp
13dfc     5C 4E 05 F1 | 	add	fp, #92
13e00     A7 14 02 FB | 	rdlong	arg02, fp
13e04     70 4E 85 F1 | 	sub	fp, #112
13e08     00 00 23 FF 
13e0c     00 12 06 F6 | 	mov	arg01, ##1174405120
13e10     D0 F5 B0 FD | 	call	#__system___float_mul
13e14     FD 12 02 F6 | 	mov	arg01, result1
13e18     01 14 06 F6 | 	mov	arg02, #1
13e1c     8C FA B0 FD | 	call	#__system___float_tointeger
13e20     0D 24 C6 F9 | 	decod	local04, #13
13e24     FD 24 02 F1 | 	add	local04, result1
13e28     18 4E 05 F1 | 	add	fp, #24
13e2c     A7 24 62 FC | 	wrlong	local04, fp
13e30     5C 4E 05 F1 | 	add	fp, #92
13e34     A7 14 02 FB | 	rdlong	arg02, fp
13e38     74 4E 85 F1 | 	sub	fp, #116
13e3c     00 3D 22 FF 
13e40     00 12 06 F6 | 	mov	arg01, ##1148846080
13e44     9C F5 B0 FD | 	call	#__system___float_mul
13e48     FD 12 02 F6 | 	mov	arg01, result1
13e4c     01 14 06 F6 | 	mov	arg02, #1
13e50     58 FA B0 FD | 	call	#__system___float_tointeger
13e54     1C 4E 05 F1 | 	add	fp, #28
13e58     A7 FA 61 FC | 	wrlong	result1, fp
13e5c     37 00 00 FF 
13e60     10 E4 05 F1 | 	add	objptr, ##28176
13e64     F2 24 02 FB | 	rdlong	local04, objptr
13e68     37 00 00 FF 
13e6c     10 E4 85 F1 | 	sub	objptr, ##28176
13e70     10 4E 85 F1 | 	sub	fp, #16
13e74     A7 20 02 FB | 	rdlong	local02, fp
13e78     06 20 66 F0 | 	shl	local02, #6
13e7c     10 25 02 F1 | 	add	local04, local02
13e80     04 4E 85 F1 | 	sub	fp, #4
13e84     A7 24 62 FC | 	wrlong	local04, fp
13e88                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
13e88                 | ' speed=round(speed_coeff/slen)
13e88                 | ' ipan=8192+round(8192*pan)
13e88                 | ' ivol=round(1000.0*vol)
13e88                 | ' base2=base+64*channel
13e88                 | ' if wave <32 then 
13e88     18 4E 05 F1 | 	add	fp, #24
13e8c     A7 24 02 FB | 	rdlong	local04, fp
13e90     20 4E 85 F1 | 	sub	fp, #32
13e94     20 24 56 F2 | 	cmps	local04, #32 wc
13e98     2C 00 90 3D |  if_ae	jmp	#LR__1689
13e9c     08 4E 05 F1 | 	add	fp, #8
13ea0     A7 12 02 FB | 	rdlong	arg01, fp
13ea4     08 12 06 F1 | 	add	arg01, #8
13ea8     18 4E 05 F1 | 	add	fp, #24
13eac     A7 14 02 FB | 	rdlong	arg02, fp
13eb0     20 4E 85 F1 | 	sub	fp, #32
13eb4     0B 14 66 F0 | 	shl	arg02, #11
13eb8     00 00 60 FF 
13ebc     00 14 06 F1 | 	add	arg02, ##-1073741824
13ec0     09 15 62 FC | 	wrlong	arg02, arg01
13ec4     18 00 90 FD | 	jmp	#LR__1690
13ec8                 | LR__1689
13ec8     08 4E 05 F1 | 	add	fp, #8
13ecc     A7 12 02 FB | 	rdlong	arg01, fp
13ed0     08 4E 85 F1 | 	sub	fp, #8
13ed4     08 12 06 F1 | 	add	arg01, #8
13ed8     00 00 E4 FF 
13edc     09 01 68 FC | 	wrlong	##-939524096, arg01
13ee0                 | LR__1690
13ee0     08 4E 05 F1 | 	add	fp, #8
13ee4     A7 12 02 FB | 	rdlong	arg01, fp
13ee8     10 12 06 F1 | 	add	arg01, #16
13eec     04 00 80 FF 
13ef0     09 01 68 FC | 	wrlong	##2048, arg01
13ef4     A7 12 02 FB | 	rdlong	arg01, fp
13ef8     0C 12 06 F1 | 	add	arg01, #12
13efc     09 01 68 FC | 	wrlong	#0, arg01
13f00     A7 12 02 FB | 	rdlong	arg01, fp
13f04     14 12 06 F1 | 	add	arg01, #20
13f08     14 4E 05 F1 | 	add	fp, #20
13f0c     A7 14 02 FB | 	rdlong	arg02, fp
13f10     09 15 52 FC | 	wrword	arg02, arg01
13f14     14 4E 85 F1 | 	sub	fp, #20
13f18     A7 12 02 FB | 	rdlong	arg01, fp
13f1c     16 12 06 F1 | 	add	arg01, #22
13f20     10 4E 05 F1 | 	add	fp, #16
13f24     A7 14 02 FB | 	rdlong	arg02, fp
13f28     09 15 52 FC | 	wrword	arg02, arg01
13f2c                 | ' lpoke base2+16,2048
13f2c                 | ' lpoke base2+12,0
13f2c                 | ' dpoke base2+20,ivol 
13f2c                 | ' dpoke base2+22,ipan 
13f2c                 | ' if wave<32 then
13f2c     08 4E 05 F1 | 	add	fp, #8
13f30     A7 24 02 FB | 	rdlong	local04, fp
13f34     20 4E 85 F1 | 	sub	fp, #32
13f38     20 24 56 F2 | 	cmps	local04, #32 wc
13f3c     38 00 90 3D |  if_ae	jmp	#LR__1691
13f40     08 4E 05 F1 | 	add	fp, #8
13f44     A7 12 02 FB | 	rdlong	arg01, fp
13f48     18 12 06 F1 | 	add	arg01, #24
13f4c     2C 4E 05 F1 | 	add	fp, #44
13f50     A7 14 02 FB | 	rdlong	arg02, fp
13f54     09 15 52 FC | 	wrword	arg02, arg01
13f58     2C 4E 85 F1 | 	sub	fp, #44
13f5c     A7 12 02 FB | 	rdlong	arg01, fp
13f60     1A 12 06 F1 | 	add	arg01, #26
13f64     08 4E 05 F1 | 	add	fp, #8
13f68     A7 14 02 FB | 	rdlong	arg02, fp
13f6c     10 4E 85 F1 | 	sub	fp, #16
13f70     09 15 52 FC | 	wrword	arg02, arg01
13f74     48 00 90 FD | 	jmp	#LR__1692
13f78                 | LR__1691
13f78     08 4E 05 F1 | 	add	fp, #8
13f7c     A7 24 02 FB | 	rdlong	local04, fp
13f80     18 24 06 F1 | 	add	local04, #24
13f84     64 4E 05 F1 | 	add	fp, #100
13f88     A7 14 02 FB | 	rdlong	arg02, fp
13f8c     6C 4E 85 F1 | 	sub	fp, #108
13f90     3E 2C 25 FF 
13f94     3C 12 06 F6 | 	mov	arg01, ##1247312956
13f98     4C F6 B0 FD | 	call	#__system___float_div
13f9c     FD 12 02 F6 | 	mov	arg01, result1
13fa0     01 14 06 F6 | 	mov	arg02, #1
13fa4     04 F9 B0 FD | 	call	#__system___float_tointeger
13fa8     12 FB 51 FC | 	wrword	result1, local04
13fac     08 4E 05 F1 | 	add	fp, #8
13fb0     A7 12 02 FB | 	rdlong	arg01, fp
13fb4     08 4E 85 F1 | 	sub	fp, #8
13fb8     1A 12 06 F1 | 	add	arg01, #26
13fbc     09 01 5A FC | 	wrword	#256, arg01
13fc0                 | LR__1692
13fc0     08 4E 05 F1 | 	add	fp, #8
13fc4     A7 12 02 FB | 	rdlong	arg01, fp
13fc8     1C 12 06 F1 | 	add	arg01, #28
13fcc     09 01 68 FC | 	wrlong	#0, arg01
13fd0     A7 12 02 FB | 	rdlong	arg01, fp
13fd4     20 12 06 F1 | 	add	arg01, #32
13fd8     09 01 68 FC | 	wrlong	#0, arg01
13fdc                 | ' lpoke base2+28,$0000_0000
13fdc                 | ' lpoke base2+32,0 
13fdc                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
13fdc     1C 4E 05 F1 | 	add	fp, #28
13fe0     A7 24 02 FB | 	rdlong	local04, fp
13fe4     24 4E 85 F1 | 	sub	fp, #36
13fe8     08 24 0E F2 | 	cmp	local04, #8 wz
13fec     18 00 90 5D |  if_ne	jmp	#LR__1693
13ff0     08 4E 05 F1 | 	add	fp, #8
13ff4     A7 12 02 FB | 	rdlong	arg01, fp
13ff8     08 4E 85 F1 | 	sub	fp, #8
13ffc     24 12 06 F1 | 	add	arg01, #36
14000     09 01 68 FC | 	wrlong	#0, arg01
14004     34 00 90 FD | 	jmp	#LR__1694
14008                 | LR__1693
14008     08 4E 05 F1 | 	add	fp, #8
1400c     A7 12 02 FB | 	rdlong	arg01, fp
14010     24 12 06 F1 | 	add	arg01, #36
14014     1C 4E 05 F1 | 	add	fp, #28
14018     A7 14 02 FB | 	rdlong	arg02, fp
1401c     24 4E 85 F1 | 	sub	fp, #36
14020     09 14 66 F0 | 	shl	arg02, #9
14024     0C 00 00 FF 
14028     D8 E4 05 F1 | 	add	objptr, ##6360
1402c     F2 14 02 F1 | 	add	arg02, objptr
14030     0C 00 00 FF 
14034     D8 E4 85 F1 | 	sub	objptr, ##6360
14038     09 15 62 FC | 	wrlong	arg02, arg01
1403c                 | LR__1694
1403c     08 4E 05 F1 | 	add	fp, #8
14040     A7 12 02 FB | 	rdlong	arg01, fp
14044     28 12 06 F1 | 	add	arg01, #40
14048     0C 4E 05 F1 | 	add	fp, #12
1404c     A7 14 02 FB | 	rdlong	arg02, fp
14050     09 15 62 FC | 	wrlong	arg02, arg01
14054     0C 4E 85 F1 | 	sub	fp, #12
14058     A7 12 02 FB | 	rdlong	arg01, fp
1405c     2C 12 06 F1 | 	add	arg01, #44
14060     24 4E 05 F1 | 	add	fp, #36
14064     A7 14 02 FB | 	rdlong	arg02, fp
14068     09 15 62 FC | 	wrlong	arg02, arg01
1406c                 | ' lpoke base2+40,speed 
1406c                 | ' lpoke base2+44,sus 
1406c                 | ' if delay>0 then waitms(delay) 
1406c     04 4E 85 F1 | 	sub	fp, #4
14070     A7 24 02 FB | 	rdlong	local04, fp
14074     28 4E 85 F1 | 	sub	fp, #40
14078     01 24 56 F2 | 	cmps	local04, #1 wc
1407c     28 4E 05 31 |  if_ae	add	fp, #40
14080     A7 12 02 3B |  if_ae	rdlong	arg01, fp
14084     28 4E 85 31 |  if_ae	sub	fp, #40
14088     98 CA B0 3D |  if_ae	call	#__system___waitms
1408c     A7 F0 03 F6 | 	mov	ptra, fp
14090     B2 00 A0 FD | 	call	#popregs_
14094                 | _do_play_ret
14094     2D 00 64 FD | 	ret
14098                 | 
14098                 | ' 
14098                 | ' '-------------------- plot
14098                 | ' 
14098                 | ' sub do_plot
14098                 | _do_plot
14098     00 4A 05 F6 | 	mov	COUNT_, #0
1409c     A8 00 A0 FD | 	call	#pushregs_
140a0     20 F0 07 F1 | 	add	ptra, #32
140a4     F4 72 BF FD | 	call	#_pop
140a8     FD 16 02 F6 | 	mov	arg03, result1
140ac     FE 14 02 F6 | 	mov	arg02, result2
140b0     FF 12 02 F6 | 	mov	arg01, result3
140b4     0C 4E 05 F1 | 	add	fp, #12
140b8     A7 16 62 FC | 	wrlong	arg03, fp
140bc     04 4E 05 F1 | 	add	fp, #4
140c0     A7 14 62 FC | 	wrlong	arg02, fp
140c4     04 4E 05 F1 | 	add	fp, #4
140c8     A7 12 62 FC | 	wrlong	arg01, fp
140cc     14 4E 85 F1 | 	sub	fp, #20
140d0     C8 72 BF FD | 	call	#_pop
140d4     FF 16 02 F6 | 	mov	arg03, result3
140d8     A7 FA 61 FC | 	wrlong	result1, fp
140dc     04 4E 05 F1 | 	add	fp, #4
140e0     A7 FC 61 FC | 	wrlong	result2, fp
140e4     04 4E 05 F1 | 	add	fp, #4
140e8     A7 16 62 FC | 	wrlong	arg03, fp
140ec     08 4E 85 F1 | 	sub	fp, #8
140f0     A7 12 02 F6 | 	mov	arg01, fp
140f4     88 74 BF FD | 	call	#_converttoint
140f8     18 4E 05 F1 | 	add	fp, #24
140fc     A7 FA 61 FC | 	wrlong	result1, fp
14100     0C 4E 85 F1 | 	sub	fp, #12
14104     A7 12 02 F6 | 	mov	arg01, fp
14108     0C 4E 85 F1 | 	sub	fp, #12
1410c     70 74 BF FD | 	call	#_converttoint
14110     1C 4E 05 F1 | 	add	fp, #28
14114     A7 FA 61 FC | 	wrlong	result1, fp
14118     04 4E 85 F1 | 	sub	fp, #4
1411c     A7 16 02 FB | 	rdlong	arg03, fp
14120     37 00 00 FF 
14124     2C E4 05 F1 | 	add	objptr, ##28204
14128     F2 16 62 FC | 	wrlong	arg03, objptr
1412c     04 4E 05 F1 | 	add	fp, #4
14130     A7 14 02 FB | 	rdlong	arg02, fp
14134     1C 4E 85 F1 | 	sub	fp, #28
14138     04 E4 05 F1 | 	add	objptr, #4
1413c     F2 14 62 FC | 	wrlong	arg02, objptr
14140     04 E4 85 F1 | 	sub	objptr, #4
14144     F2 12 02 FB | 	rdlong	arg01, objptr
14148     04 E4 85 F1 | 	sub	objptr, #4
1414c     F2 16 02 FB | 	rdlong	arg03, objptr
14150     37 00 00 FF 
14154     28 E4 85 F1 | 	sub	objptr, ##28200
14158     24 A1 B0 FD | 	call	#_hg010b_spin2_putpixel
1415c     A7 F0 03 F6 | 	mov	ptra, fp
14160     B2 00 A0 FD | 	call	#popregs_
14164                 | _do_plot_ret
14164     2D 00 64 FD | 	ret
14168                 | 
14168                 | ' 
14168                 | ' '-------------------- poke
14168                 | ' 
14168                 | ' sub do_poke
14168                 | _do_poke
14168     01 4A 05 F6 | 	mov	COUNT_, #1
1416c     A8 00 A0 FD | 	call	#pushregs_
14170     20 F0 07 F1 | 	add	ptra, #32
14174     24 72 BF FD | 	call	#_pop
14178     FD 14 02 F6 | 	mov	arg02, result1
1417c     FE 12 02 F6 | 	mov	arg01, result2
14180     FF 1E 02 F6 | 	mov	local01, result3
14184     A7 14 62 FC | 	wrlong	arg02, fp
14188     04 4E 05 F1 | 	add	fp, #4
1418c     A7 12 62 FC | 	wrlong	arg01, fp
14190     04 4E 05 F1 | 	add	fp, #4
14194     A7 1E 62 FC | 	wrlong	local01, fp
14198     08 4E 85 F1 | 	sub	fp, #8
1419c     FC 71 BF FD | 	call	#_pop
141a0     FF 1E 02 F6 | 	mov	local01, result3
141a4     0C 4E 05 F1 | 	add	fp, #12
141a8     A7 FA 61 FC | 	wrlong	result1, fp
141ac     04 4E 05 F1 | 	add	fp, #4
141b0     A7 FC 61 FC | 	wrlong	result2, fp
141b4     04 4E 05 F1 | 	add	fp, #4
141b8     A7 1E 62 FC | 	wrlong	local01, fp
141bc     08 4E 85 F1 | 	sub	fp, #8
141c0     A7 12 02 F6 | 	mov	arg01, fp
141c4     0C 4E 85 F1 | 	sub	fp, #12
141c8     B4 73 BF FD | 	call	#_converttoint
141cc     18 4E 05 F1 | 	add	fp, #24
141d0     A7 FA 61 FC | 	wrlong	result1, fp
141d4     18 4E 85 F1 | 	sub	fp, #24
141d8     A7 12 02 F6 | 	mov	arg01, fp
141dc     A0 73 BF FD | 	call	#_converttoint
141e0     1C 4E 05 F1 | 	add	fp, #28
141e4     A7 FA 61 FC | 	wrlong	result1, fp
141e8                 | ' t1=pop() 'value
141e8                 | ' t2=pop() 
141e8                 | ' a=converttoint(t2) : v=converttoint(t1)
141e8                 | ' if a<$80000 then poke a,v else pspoke a,v
141e8     04 4E 85 F1 | 	sub	fp, #4
141ec     A7 1E 02 FB | 	rdlong	local01, fp
141f0     18 4E 85 F1 | 	sub	fp, #24
141f4     00 04 00 FF 
141f8     00 1E 16 F2 | 	cmp	local01, ##524288 wc
141fc     1C 00 90 3D |  if_ae	jmp	#LR__1700
14200     18 4E 05 F1 | 	add	fp, #24
14204     A7 12 02 FB | 	rdlong	arg01, fp
14208     04 4E 05 F1 | 	add	fp, #4
1420c     A7 14 02 FB | 	rdlong	arg02, fp
14210     1C 4E 85 F1 | 	sub	fp, #28
14214     09 15 42 FC | 	wrbyte	arg02, arg01
14218     18 00 90 FD | 	jmp	#LR__1701
1421c                 | LR__1700
1421c     18 4E 05 F1 | 	add	fp, #24
14220     A7 12 02 FB | 	rdlong	arg01, fp
14224     04 4E 05 F1 | 	add	fp, #4
14228     A7 14 02 FB | 	rdlong	arg02, fp
1422c     1C 4E 85 F1 | 	sub	fp, #28
14230     60 92 B0 FD | 	call	#_pspoke
14234                 | LR__1701
14234     A7 F0 03 F6 | 	mov	ptra, fp
14238     B2 00 A0 FD | 	call	#popregs_
1423c                 | _do_poke_ret
1423c     2D 00 64 FD | 	ret
14240                 | 
14240                 | ' 
14240                 | ' '-------------------- pop
14240                 | ' 
14240                 | ' sub do_pop()
14240                 | _do_pop
14240                 | ' if gosubtop>0 then  gosubtop -=1 
14240     50 00 00 FF 
14244     0C E5 05 F1 | 	add	objptr, ##41228
14248     F2 00 02 FB | 	rdlong	_var01, objptr
1424c     50 00 00 FF 
14250     0C E5 85 F1 | 	sub	objptr, ##41228
14254     01 00 56 F2 | 	cmps	_var01, #1 wc
14258     50 00 00 3F 
1425c     0C E5 05 31 |  if_ae	add	objptr, ##41228
14260     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
14264     01 00 86 31 |  if_ae	sub	_var01, #1
14268     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
1426c     50 00 00 3F 
14270     0C E5 85 31 |  if_ae	sub	objptr, ##41228
14274                 | _do_pop_ret
14274     2D 00 64 FD | 	ret
14278                 | 
14278                 | ' 
14278                 | ' '-------------------- position
14278                 | ' 
14278                 | ' sub do_position
14278                 | _do_position
14278     01 4A 05 F6 | 	mov	COUNT_, #1
1427c     A8 00 A0 FD | 	call	#pushregs_
14280     18 F0 07 F1 | 	add	ptra, #24
14284     14 71 BF FD | 	call	#_pop
14288     FD 14 02 F6 | 	mov	arg02, result1
1428c     FE 12 02 F6 | 	mov	arg01, result2
14290     FF 1E 02 F6 | 	mov	local01, result3
14294     A7 14 62 FC | 	wrlong	arg02, fp
14298     04 4E 05 F1 | 	add	fp, #4
1429c     A7 12 62 FC | 	wrlong	arg01, fp
142a0     04 4E 05 F1 | 	add	fp, #4
142a4     A7 1E 62 FC | 	wrlong	local01, fp
142a8     08 4E 85 F1 | 	sub	fp, #8
142ac     EC 70 BF FD | 	call	#_pop
142b0     FF 1E 02 F6 | 	mov	local01, result3
142b4     0C 4E 05 F1 | 	add	fp, #12
142b8     A7 FA 61 FC | 	wrlong	result1, fp
142bc     04 4E 05 F1 | 	add	fp, #4
142c0     A7 FC 61 FC | 	wrlong	result2, fp
142c4     04 4E 05 F1 | 	add	fp, #4
142c8     A7 1E 62 FC | 	wrlong	local01, fp
142cc     08 4E 85 F1 | 	sub	fp, #8
142d0     A7 12 02 F6 | 	mov	arg01, fp
142d4     0C 4E 85 F1 | 	sub	fp, #12
142d8     A4 72 BF FD | 	call	#_converttoint
142dc     FD 1E 02 F6 | 	mov	local01, result1
142e0     A7 12 02 F6 | 	mov	arg01, fp
142e4     98 72 BF FD | 	call	#_converttoint
142e8     FD 14 02 F6 | 	mov	arg02, result1
142ec     0F 13 02 F6 | 	mov	arg01, local01
142f0     50 AB B0 FD | 	call	#_hg010b_spin2_setcursorpos
142f4     A7 F0 03 F6 | 	mov	ptra, fp
142f8     B2 00 A0 FD | 	call	#popregs_
142fc                 | _do_position_ret
142fc     2D 00 64 FD | 	ret
14300                 | 
14300                 | ' 
14300                 | ' '-------------------- print
14300                 | ' 
14300                 | ' sub do_print  
14300                 | _do_print
14300     0B 4A 05 F6 | 	mov	COUNT_, #11
14304     A8 00 A0 FD | 	call	#pushregs_
14308     00 24 06 F6 | 	mov	local04, #0
1430c     8C 70 BF FD | 	call	#_pop
14310     FD 26 02 F6 | 	mov	local05, result1
14314     FE 28 02 F6 | 	mov	local06, result2
14318     FF 2A 02 F6 | 	mov	local07, result3
1431c     13 1F 02 F6 | 	mov	local01, local05
14320     14 21 02 F6 | 	mov	local02, local06
14324     15 23 02 F6 | 	mov	local03, local07
14328                 | '  
14328                 | ' r=0
14328                 | ' t1=pop() 
14328                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
14328     21 22 0E F2 | 	cmp	local03, #33 wz
1432c     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
14330     20 00 90 5D |  if_ne	jmp	#LR__1710
14334     11 25 02 F6 | 	mov	local04, local03
14338     60 70 BF FD | 	call	#_pop
1433c     FD 26 02 F6 | 	mov	local05, result1
14340     FE 28 02 F6 | 	mov	local06, result2
14344     FF 2A 02 F6 | 	mov	local07, result3
14348     13 1F 02 F6 | 	mov	local01, local05
1434c     14 21 02 F6 | 	mov	local02, local06
14350     15 23 02 F6 | 	mov	local03, local07
14354                 | LR__1710
14354                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
14354     20 22 0E F2 | 	cmp	local03, #32 wz
14358     11 25 02 A6 |  if_e	mov	local04, local03
1435c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
1435c     FF 22 0E F2 | 	cmp	local03, #255 wz
14360     0C 00 90 5D |  if_ne	jmp	#LR__1711
14364     0F 13 02 F6 | 	mov	arg01, local01
14368     34 8F B0 FD | 	call	#_printerror
1436c     D4 04 90 FD | 	jmp	#LR__1730
14370                 | LR__1711
14370                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
14370     2B 22 0E F2 | 	cmp	local03, #43 wz
14374     14 00 90 5D |  if_ne	jmp	#LR__1712
14378     0F 13 02 F6 | 	mov	arg01, local01
1437c     94 71 BF FD | 	call	#_convertstring
14380     FD 26 02 F6 | 	mov	local05, result1
14384     13 1F 02 F6 | 	mov	local01, local05
14388     1F 22 06 F6 | 	mov	local03, #31
1438c                 | LR__1712
1438c                 | ' 
1438c                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
1438c     2C 22 0E F2 | 	cmp	local03, #44 wz
14390     80 00 90 5D |  if_ne	jmp	#LR__1713
14394     00 12 06 F6 | 	mov	arg01, #0
14398     F8 1E B1 FD | 	call	#__system___getiolock_0541
1439c     FD 12 02 F6 | 	mov	arg01, result1
143a0     8C C4 B0 FD | 	call	#__system___lockmem
143a4     84 01 00 FF 
143a8     55 15 06 F6 | 	mov	arg02, ##@LR__5472
143ac     00 12 06 F6 | 	mov	arg01, #0
143b0     00 16 06 F6 | 	mov	arg03, #0
143b4     6C D1 B0 FD | 	call	#__system___basic_print_string
143b8     0A 2C 06 F6 | 	mov	local08, #10
143bc     00 12 06 F6 | 	mov	arg01, #0
143c0     0F 15 02 F6 | 	mov	arg02, local01
143c4     00 16 06 F6 | 	mov	arg03, #0
143c8     0A 18 06 F6 | 	mov	arg04, #10
143cc     98 D1 B0 FD | 	call	#__system___basic_print_integer
143d0     FD 2E 02 F6 | 	mov	local09, result1
143d4     00 12 06 F6 | 	mov	arg01, #0
143d8     0A 14 06 F6 | 	mov	arg02, #10
143dc     00 16 06 F6 | 	mov	arg03, #0
143e0     E8 D0 B0 FD | 	call	#__system___basic_print_char
143e4     01 30 06 F6 | 	mov	local10, #1
143e8     00 12 06 F6 | 	mov	arg01, #0
143ec     A4 1E B1 FD | 	call	#__system___getiolock_0541
143f0     FD 00 68 FC | 	wrlong	#0, result1
143f4     00 32 06 F6 | 	mov	local11, #0
143f8     A0 6F BF FD | 	call	#_pop
143fc     FD 26 02 F6 | 	mov	local05, result1
14400     FE 28 02 F6 | 	mov	local06, result2
14404     FF 2A 02 F6 | 	mov	local07, result3
14408     13 1F 02 F6 | 	mov	local01, local05
1440c     14 21 02 F6 | 	mov	local02, local06
14410     15 23 02 F6 | 	mov	local03, local07
14414                 | LR__1713
14414                 | ' 
14414                 | ' if r=print_mod_comma  then
14414     21 24 0E F2 | 	cmp	local04, #33 wz
14418     AC 01 90 5D |  if_ne	jmp	#LR__1718
1441c                 | '   if t1.result_type=result_int then print t1.result.iresult,
1441c     1C 22 0E F2 | 	cmp	local03, #28 wz
14420     64 00 90 5D |  if_ne	jmp	#LR__1714
14424     00 12 06 F6 | 	mov	arg01, #0
14428     68 1E B1 FD | 	call	#__system___getiolock_0541
1442c     FD 12 02 F6 | 	mov	arg01, result1
14430     FC C3 B0 FD | 	call	#__system___lockmem
14434     00 28 06 F6 | 	mov	local06, #0
14438     00 12 06 F6 | 	mov	arg01, #0
1443c     0F 15 02 F6 | 	mov	arg02, local01
14440     00 16 06 F6 | 	mov	arg03, #0
14444     0A 18 06 F6 | 	mov	arg04, #10
14448     1C D1 B0 FD | 	call	#__system___basic_print_integer
1444c     FD 2A 02 F6 | 	mov	local07, result1
14450     14 27 02 F6 | 	mov	local05, local06
14454     15 27 02 F1 | 	add	local05, local07
14458     00 32 06 F6 | 	mov	local11, #0
1445c     00 12 06 F6 | 	mov	arg01, #0
14460     09 14 06 F6 | 	mov	arg02, #9
14464     00 16 06 F6 | 	mov	arg03, #0
14468     60 D0 B0 FD | 	call	#__system___basic_print_char
1446c     FD 2E 02 F6 | 	mov	local09, result1
14470     FD 26 02 F1 | 	add	local05, result1
14474     00 12 06 F6 | 	mov	arg01, #0
14478     18 1E B1 FD | 	call	#__system___getiolock_0541
1447c     FD 00 68 FC | 	wrlong	#0, result1
14480     00 FA 05 F6 | 	mov	result1, #0
14484     00 30 06 F6 | 	mov	local10, #0
14488                 | LR__1714
14488                 | '   if t1.result_type=result_uint then print t1.result.uresult,
14488     1D 22 0E F2 | 	cmp	local03, #29 wz
1448c     64 00 90 5D |  if_ne	jmp	#LR__1715
14490     00 12 06 F6 | 	mov	arg01, #0
14494     FC 1D B1 FD | 	call	#__system___getiolock_0541
14498     FD 12 02 F6 | 	mov	arg01, result1
1449c     90 C3 B0 FD | 	call	#__system___lockmem
144a0     00 28 06 F6 | 	mov	local06, #0
144a4     00 12 06 F6 | 	mov	arg01, #0
144a8     0F 15 02 F6 | 	mov	arg02, local01
144ac     00 16 06 F6 | 	mov	arg03, #0
144b0     0A 18 06 F6 | 	mov	arg04, #10
144b4     F0 D0 B0 FD | 	call	#__system___basic_print_unsigned
144b8     FD 2A 02 F6 | 	mov	local07, result1
144bc     14 27 02 F6 | 	mov	local05, local06
144c0     15 27 02 F1 | 	add	local05, local07
144c4     00 32 06 F6 | 	mov	local11, #0
144c8     00 12 06 F6 | 	mov	arg01, #0
144cc     09 14 06 F6 | 	mov	arg02, #9
144d0     00 16 06 F6 | 	mov	arg03, #0
144d4     F4 CF B0 FD | 	call	#__system___basic_print_char
144d8     FD 2E 02 F6 | 	mov	local09, result1
144dc     FD 26 02 F1 | 	add	local05, result1
144e0     00 12 06 F6 | 	mov	arg01, #0
144e4     AC 1D B1 FD | 	call	#__system___getiolock_0541
144e8     FD 00 68 FC | 	wrlong	#0, result1
144ec     00 FA 05 F6 | 	mov	result1, #0
144f0     00 30 06 F6 | 	mov	local10, #0
144f4                 | LR__1715
144f4                 | '   if t1.result_type=result_float then print t1.result.fresult,
144f4     1E 22 0E F2 | 	cmp	local03, #30 wz
144f8     64 00 90 5D |  if_ne	jmp	#LR__1716
144fc     00 12 06 F6 | 	mov	arg01, #0
14500     90 1D B1 FD | 	call	#__system___getiolock_0541
14504     FD 12 02 F6 | 	mov	arg01, result1
14508     24 C3 B0 FD | 	call	#__system___lockmem
1450c     00 28 06 F6 | 	mov	local06, #0
14510     00 12 06 F6 | 	mov	arg01, #0
14514     0F 15 02 F6 | 	mov	arg02, local01
14518     00 16 06 F6 | 	mov	arg03, #0
1451c     23 18 06 F6 | 	mov	arg04, #35
14520     D8 F4 B0 FD | 	call	#__system___basic_print_float
14524     FD 2A 02 F6 | 	mov	local07, result1
14528     14 27 02 F6 | 	mov	local05, local06
1452c     15 27 02 F1 | 	add	local05, local07
14530     00 32 06 F6 | 	mov	local11, #0
14534     00 12 06 F6 | 	mov	arg01, #0
14538     09 14 06 F6 | 	mov	arg02, #9
1453c     00 16 06 F6 | 	mov	arg03, #0
14540     88 CF B0 FD | 	call	#__system___basic_print_char
14544     FD 2E 02 F6 | 	mov	local09, result1
14548     FD 26 02 F1 | 	add	local05, result1
1454c     00 12 06 F6 | 	mov	arg01, #0
14550     40 1D B1 FD | 	call	#__system___getiolock_0541
14554     FD 00 68 FC | 	wrlong	#0, result1
14558     00 FA 05 F6 | 	mov	result1, #0
1455c     00 30 06 F6 | 	mov	local10, #0
14560                 | LR__1716
14560                 | '   if t1.result_type=result_string then print t1.result.sresult,
14560     1F 22 0E F2 | 	cmp	local03, #31 wz
14564     60 00 90 5D |  if_ne	jmp	#LR__1717
14568     00 12 06 F6 | 	mov	arg01, #0
1456c     24 1D B1 FD | 	call	#__system___getiolock_0541
14570     FD 12 02 F6 | 	mov	arg01, result1
14574     B8 C2 B0 FD | 	call	#__system___lockmem
14578     00 28 06 F6 | 	mov	local06, #0
1457c     00 12 06 F6 | 	mov	arg01, #0
14580     0F 15 02 F6 | 	mov	arg02, local01
14584     00 16 06 F6 | 	mov	arg03, #0
14588     98 CF B0 FD | 	call	#__system___basic_print_string
1458c     FD 2A 02 F6 | 	mov	local07, result1
14590     14 27 02 F6 | 	mov	local05, local06
14594     15 27 02 F1 | 	add	local05, local07
14598     00 32 06 F6 | 	mov	local11, #0
1459c     00 12 06 F6 | 	mov	arg01, #0
145a0     09 14 06 F6 | 	mov	arg02, #9
145a4     00 16 06 F6 | 	mov	arg03, #0
145a8     20 CF B0 FD | 	call	#__system___basic_print_char
145ac     FD 2E 02 F6 | 	mov	local09, result1
145b0     FD 26 02 F1 | 	add	local05, result1
145b4     00 12 06 F6 | 	mov	arg01, #0
145b8     D8 1C B1 FD | 	call	#__system___getiolock_0541
145bc     FD 00 68 FC | 	wrlong	#0, result1
145c0     00 FA 05 F6 | 	mov	result1, #0
145c4     00 30 06 F6 | 	mov	local10, #0
145c8                 | LR__1717
145c8                 | LR__1718
145c8                 | ' if r=print_mod_semicolon then 
145c8     22 24 0E F2 | 	cmp	local04, #34 wz
145cc     1C 01 90 5D |  if_ne	jmp	#LR__1723
145d0                 | '   if t1.result_type=result_int then print t1.result.iresult;
145d0     1C 22 0E F2 | 	cmp	local03, #28 wz
145d4     50 00 90 5D |  if_ne	jmp	#LR__1719
145d8     00 12 06 F6 | 	mov	arg01, #0
145dc     B4 1C B1 FD | 	call	#__system___getiolock_0541
145e0     FD 12 02 F6 | 	mov	arg01, result1
145e4     48 C2 B0 FD | 	call	#__system___lockmem
145e8     00 28 06 F6 | 	mov	local06, #0
145ec     00 30 06 F6 | 	mov	local10, #0
145f0     0A 32 06 F6 | 	mov	local11, #10
145f4     00 12 06 F6 | 	mov	arg01, #0
145f8     0F 15 02 F6 | 	mov	arg02, local01
145fc     00 16 06 F6 | 	mov	arg03, #0
14600     0A 18 06 F6 | 	mov	arg04, #10
14604     60 CF B0 FD | 	call	#__system___basic_print_integer
14608     FD 2A 02 F6 | 	mov	local07, result1
1460c     14 27 02 F6 | 	mov	local05, local06
14610     15 27 02 F1 | 	add	local05, local07
14614     00 12 06 F6 | 	mov	arg01, #0
14618     78 1C B1 FD | 	call	#__system___getiolock_0541
1461c     FD 00 68 FC | 	wrlong	#0, result1
14620     00 FA 05 F6 | 	mov	result1, #0
14624     00 2E 06 F6 | 	mov	local09, #0
14628                 | LR__1719
14628                 | '   if t1.result_type=result_uint then print t1.result.uresult;
14628     1D 22 0E F2 | 	cmp	local03, #29 wz
1462c     50 00 90 5D |  if_ne	jmp	#LR__1720
14630     00 12 06 F6 | 	mov	arg01, #0
14634     5C 1C B1 FD | 	call	#__system___getiolock_0541
14638     FD 12 02 F6 | 	mov	arg01, result1
1463c     F0 C1 B0 FD | 	call	#__system___lockmem
14640     00 28 06 F6 | 	mov	local06, #0
14644     00 30 06 F6 | 	mov	local10, #0
14648     0A 32 06 F6 | 	mov	local11, #10
1464c     00 12 06 F6 | 	mov	arg01, #0
14650     0F 15 02 F6 | 	mov	arg02, local01
14654     00 16 06 F6 | 	mov	arg03, #0
14658     0A 18 06 F6 | 	mov	arg04, #10
1465c     48 CF B0 FD | 	call	#__system___basic_print_unsigned
14660     FD 2A 02 F6 | 	mov	local07, result1
14664     14 27 02 F6 | 	mov	local05, local06
14668     15 27 02 F1 | 	add	local05, local07
1466c     00 12 06 F6 | 	mov	arg01, #0
14670     20 1C B1 FD | 	call	#__system___getiolock_0541
14674     FD 00 68 FC | 	wrlong	#0, result1
14678     00 FA 05 F6 | 	mov	result1, #0
1467c     00 2E 06 F6 | 	mov	local09, #0
14680                 | LR__1720
14680                 | '   if t1.result_type=result_float then print t1.result.fresult;
14680     1E 22 0E F2 | 	cmp	local03, #30 wz
14684     30 00 90 5D |  if_ne	jmp	#LR__1721
14688     00 12 06 F6 | 	mov	arg01, #0
1468c     04 1C B1 FD | 	call	#__system___getiolock_0541
14690     FD 12 02 F6 | 	mov	arg01, result1
14694     98 C1 B0 FD | 	call	#__system___lockmem
14698     00 12 06 F6 | 	mov	arg01, #0
1469c     0F 15 02 F6 | 	mov	arg02, local01
146a0     00 16 06 F6 | 	mov	arg03, #0
146a4     23 18 06 F6 | 	mov	arg04, #35
146a8     50 F3 B0 FD | 	call	#__system___basic_print_float
146ac     00 12 06 F6 | 	mov	arg01, #0
146b0     E0 1B B1 FD | 	call	#__system___getiolock_0541
146b4     FD 00 68 FC | 	wrlong	#0, result1
146b8                 | LR__1721
146b8                 | '   if t1.result_type=result_string then print t1.result.sresult;
146b8     1F 22 0E F2 | 	cmp	local03, #31 wz
146bc     2C 00 90 5D |  if_ne	jmp	#LR__1722
146c0     00 12 06 F6 | 	mov	arg01, #0
146c4     CC 1B B1 FD | 	call	#__system___getiolock_0541
146c8     FD 12 02 F6 | 	mov	arg01, result1
146cc     60 C1 B0 FD | 	call	#__system___lockmem
146d0     00 12 06 F6 | 	mov	arg01, #0
146d4     0F 15 02 F6 | 	mov	arg02, local01
146d8     00 16 06 F6 | 	mov	arg03, #0
146dc     44 CE B0 FD | 	call	#__system___basic_print_string
146e0     00 12 06 F6 | 	mov	arg01, #0
146e4     AC 1B B1 FD | 	call	#__system___getiolock_0541
146e8     FD 00 68 FC | 	wrlong	#0, result1
146ec                 | LR__1722
146ec                 | LR__1723
146ec                 | ' if r=0 then 
146ec     00 24 0E F2 | 	cmp	local04, #0 wz
146f0     1C 01 90 5D |  if_ne	jmp	#LR__1728
146f4                 | '   if t1.result_type=result_int then print t1.result.iresult
146f4     1C 22 0E F2 | 	cmp	local03, #28 wz
146f8     40 00 90 5D |  if_ne	jmp	#LR__1724
146fc     00 12 06 F6 | 	mov	arg01, #0
14700     90 1B B1 FD | 	call	#__system___getiolock_0541
14704     FD 12 02 F6 | 	mov	arg01, result1
14708     24 C1 B0 FD | 	call	#__system___lockmem
1470c     00 12 06 F6 | 	mov	arg01, #0
14710     0F 15 02 F6 | 	mov	arg02, local01
14714     00 16 06 F6 | 	mov	arg03, #0
14718     0A 18 06 F6 | 	mov	arg04, #10
1471c     48 CE B0 FD | 	call	#__system___basic_print_integer
14720     00 12 06 F6 | 	mov	arg01, #0
14724     0A 14 06 F6 | 	mov	arg02, #10
14728     00 16 06 F6 | 	mov	arg03, #0
1472c     9C CD B0 FD | 	call	#__system___basic_print_char
14730     00 12 06 F6 | 	mov	arg01, #0
14734     5C 1B B1 FD | 	call	#__system___getiolock_0541
14738     FD 00 68 FC | 	wrlong	#0, result1
1473c                 | LR__1724
1473c                 | '   if t1.result_type=result_uint then print t1.result.uresult
1473c     1D 22 0E F2 | 	cmp	local03, #29 wz
14740     40 00 90 5D |  if_ne	jmp	#LR__1725
14744     00 12 06 F6 | 	mov	arg01, #0
14748     48 1B B1 FD | 	call	#__system___getiolock_0541
1474c     FD 12 02 F6 | 	mov	arg01, result1
14750     DC C0 B0 FD | 	call	#__system___lockmem
14754     00 12 06 F6 | 	mov	arg01, #0
14758     0F 15 02 F6 | 	mov	arg02, local01
1475c     00 16 06 F6 | 	mov	arg03, #0
14760     0A 18 06 F6 | 	mov	arg04, #10
14764     40 CE B0 FD | 	call	#__system___basic_print_unsigned
14768     00 12 06 F6 | 	mov	arg01, #0
1476c     0A 14 06 F6 | 	mov	arg02, #10
14770     00 16 06 F6 | 	mov	arg03, #0
14774     54 CD B0 FD | 	call	#__system___basic_print_char
14778     00 12 06 F6 | 	mov	arg01, #0
1477c     14 1B B1 FD | 	call	#__system___getiolock_0541
14780     FD 00 68 FC | 	wrlong	#0, result1
14784                 | LR__1725
14784                 | '   if t1.result_type=result_float then print t1.result.fresult
14784     1E 22 0E F2 | 	cmp	local03, #30 wz
14788     40 00 90 5D |  if_ne	jmp	#LR__1726
1478c     00 12 06 F6 | 	mov	arg01, #0
14790     00 1B B1 FD | 	call	#__system___getiolock_0541
14794     FD 12 02 F6 | 	mov	arg01, result1
14798     94 C0 B0 FD | 	call	#__system___lockmem
1479c     00 12 06 F6 | 	mov	arg01, #0
147a0     0F 15 02 F6 | 	mov	arg02, local01
147a4     00 16 06 F6 | 	mov	arg03, #0
147a8     23 18 06 F6 | 	mov	arg04, #35
147ac     4C F2 B0 FD | 	call	#__system___basic_print_float
147b0     00 12 06 F6 | 	mov	arg01, #0
147b4     0A 14 06 F6 | 	mov	arg02, #10
147b8     00 16 06 F6 | 	mov	arg03, #0
147bc     0C CD B0 FD | 	call	#__system___basic_print_char
147c0     00 12 06 F6 | 	mov	arg01, #0
147c4     CC 1A B1 FD | 	call	#__system___getiolock_0541
147c8     FD 00 68 FC | 	wrlong	#0, result1
147cc                 | LR__1726
147cc                 | '   if t1.result_type=result_string then print t1.result.sresult
147cc     1F 22 0E F2 | 	cmp	local03, #31 wz
147d0     3C 00 90 5D |  if_ne	jmp	#LR__1727
147d4     00 12 06 F6 | 	mov	arg01, #0
147d8     B8 1A B1 FD | 	call	#__system___getiolock_0541
147dc     FD 12 02 F6 | 	mov	arg01, result1
147e0     4C C0 B0 FD | 	call	#__system___lockmem
147e4     00 12 06 F6 | 	mov	arg01, #0
147e8     0F 15 02 F6 | 	mov	arg02, local01
147ec     00 16 06 F6 | 	mov	arg03, #0
147f0     30 CD B0 FD | 	call	#__system___basic_print_string
147f4     00 12 06 F6 | 	mov	arg01, #0
147f8     0A 14 06 F6 | 	mov	arg02, #10
147fc     00 16 06 F6 | 	mov	arg03, #0
14800     C8 CC B0 FD | 	call	#__system___basic_print_char
14804     00 12 06 F6 | 	mov	arg01, #0
14808     88 1A B1 FD | 	call	#__system___getiolock_0541
1480c     FD 00 68 FC | 	wrlong	#0, result1
14810                 | LR__1727
14810                 | LR__1728
14810                 | ' if r=print_mod_empty then print
14810     20 24 0E F2 | 	cmp	local04, #32 wz
14814     2C 00 90 5D |  if_ne	jmp	#LR__1729
14818     00 12 06 F6 | 	mov	arg01, #0
1481c     74 1A B1 FD | 	call	#__system___getiolock_0541
14820     FD 12 02 F6 | 	mov	arg01, result1
14824     08 C0 B0 FD | 	call	#__system___lockmem
14828     00 12 06 F6 | 	mov	arg01, #0
1482c     0A 14 06 F6 | 	mov	arg02, #10
14830     00 16 06 F6 | 	mov	arg03, #0
14834     94 CC B0 FD | 	call	#__system___basic_print_char
14838     00 12 06 F6 | 	mov	arg01, #0
1483c     54 1A B1 FD | 	call	#__system___getiolock_0541
14840     FD 00 68 FC | 	wrlong	#0, result1
14844                 | LR__1729
14844                 | LR__1730
14844     A7 F0 03 F6 | 	mov	ptra, fp
14848     B2 00 A0 FD | 	call	#popregs_
1484c                 | _do_print_ret
1484c     2D 00 64 FD | 	ret
14850                 | 
14850                 | ' 
14850                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
14850                 | ' 
14850                 | ' sub do_push
14850                 | _do_push
14850                 | ' if stackpointer<maxstack then 
14850     43 00 00 FF 
14854     58 E4 05 F1 | 	add	objptr, ##34392
14858     F2 00 02 FB | 	rdlong	_var01, objptr
1485c     43 00 00 FF 
14860     58 E4 85 F1 | 	sub	objptr, ##34392
14864     01 00 00 FF 
14868     00 00 56 F2 | 	cmps	_var01, ##512 wc
1486c     F8 00 90 3D |  if_ae	jmp	#LR__1740
14870     4A 00 00 FF 
14874     80 E4 05 F1 | 	add	objptr, ##38016
14878     F2 02 02 FB | 	rdlong	_var02, objptr
1487c     01 05 02 F6 | 	mov	_var03, _var02
14880     01 04 66 F0 | 	shl	_var03, #1
14884     01 05 02 F1 | 	add	_var03, _var02
14888     02 04 66 F0 | 	shl	_var03, #2
1488c     03 00 00 FF 
14890     04 E4 85 F1 | 	sub	objptr, ##1540
14894     F2 04 02 F1 | 	add	_var03, objptr
14898     02 01 02 FB | 	rdlong	_var01, _var03
1489c     04 04 06 F1 | 	add	_var03, #4
148a0     02 07 02 FB | 	rdlong	_var04, _var03
148a4     01 05 02 F6 | 	mov	_var03, _var02
148a8     01 04 66 F0 | 	shl	_var03, #1
148ac     01 05 02 F1 | 	add	_var03, _var02
148b0     02 04 66 F0 | 	shl	_var03, #2
148b4     F2 04 02 F1 | 	add	_var03, objptr
148b8     08 04 06 F1 | 	add	_var03, #8
148bc     02 03 02 FB | 	rdlong	_var02, _var03
148c0     04 00 00 FF 
148c4     24 E4 85 F1 | 	sub	objptr, ##2084
148c8     F2 04 02 FB | 	rdlong	_var03, objptr
148cc     02 09 02 F6 | 	mov	_var05, _var03
148d0     01 08 66 F0 | 	shl	_var05, #1
148d4     02 09 02 F1 | 	add	_var05, _var03
148d8     02 08 66 F0 | 	shl	_var05, #2
148dc     0C 00 00 FF 
148e0     0C E4 85 F1 | 	sub	objptr, ##6156
148e4     F2 08 02 F1 | 	add	_var05, objptr
148e8     04 01 62 FC | 	wrlong	_var01, _var05
148ec     0C 00 00 FF 
148f0     0C E4 05 F1 | 	add	objptr, ##6156
148f4     F2 08 02 FB | 	rdlong	_var05, objptr
148f8     04 05 02 F6 | 	mov	_var03, _var05
148fc     01 04 66 F0 | 	shl	_var03, #1
14900     04 05 02 F1 | 	add	_var03, _var05
14904     02 04 66 F0 | 	shl	_var03, #2
14908     0C 00 00 FF 
1490c     0C E4 85 F1 | 	sub	objptr, ##6156
14910     F2 04 02 F1 | 	add	_var03, objptr
14914     04 04 06 F1 | 	add	_var03, #4
14918     02 07 62 FC | 	wrlong	_var04, _var03
1491c     0C 00 00 FF 
14920     0C E4 05 F1 | 	add	objptr, ##6156
14924     F2 08 02 FB | 	rdlong	_var05, objptr
14928     04 07 02 F6 | 	mov	_var04, _var05
1492c     01 06 66 F0 | 	shl	_var04, #1
14930     04 07 02 F1 | 	add	_var04, _var05
14934     02 06 66 F0 | 	shl	_var04, #2
14938     0C 00 00 FF 
1493c     0C E4 85 F1 | 	sub	objptr, ##6156
14940     F2 06 02 F1 | 	add	_var04, objptr
14944     08 06 06 F1 | 	add	_var04, #8
14948     03 03 62 FC | 	wrlong	_var02, _var04
1494c     0C 00 00 FF 
14950     0C E4 05 F1 | 	add	objptr, ##6156
14954     F2 00 02 FB | 	rdlong	_var01, objptr
14958     01 00 06 F1 | 	add	_var01, #1
1495c     F2 00 62 FC | 	wrlong	_var01, objptr
14960     43 00 00 FF 
14964     58 E4 85 F1 | 	sub	objptr, ##34392
14968                 | LR__1740
14968                 | _do_push_ret
14968     2D 00 64 FD | 	ret
1496c                 | 
1496c                 | ' 
1496c                 | ' '-------------------- put
1496c                 | ' 
1496c                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
1496c                 | _do_put
1496c     03 4A 05 F6 | 	mov	COUNT_, #3
14970     A8 00 A0 FD | 	call	#pushregs_
14974     28 F0 07 F1 | 	add	ptra, #40
14978     4A 00 00 FF 
1497c     80 E4 05 F1 | 	add	objptr, ##38016
14980     F2 1A 02 FB | 	rdlong	arg05, objptr
14984     0D 19 02 F6 | 	mov	arg04, arg05
14988     01 18 66 F0 | 	shl	arg04, #1
1498c     0D 19 02 F1 | 	add	arg04, arg05
14990     02 18 66 F0 | 	shl	arg04, #2
14994     03 00 00 FF 
14998     04 E4 85 F1 | 	sub	objptr, ##1540
1499c     F2 18 02 F1 | 	add	arg04, objptr
149a0     0C 1B 02 FB | 	rdlong	arg05, arg04
149a4     A7 1A 62 FC | 	wrlong	arg05, fp
149a8                 | ' 
149a8                 | ' numpar=compiledline(lineptr_e).result.uresult
149a8                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
149a8     04 1A 0E F2 | 	cmp	arg05, #4 wz
149ac     47 00 00 FF 
149b0     7C E4 85 F1 | 	sub	objptr, ##36476
149b4     48 00 90 5D |  if_ne	jmp	#LR__1750
149b8     E0 69 BF FD | 	call	#_pop
149bc     FF 1A 02 F6 | 	mov	arg05, result3
149c0     1C 4E 05 F1 | 	add	fp, #28
149c4     A7 FA 61 FC | 	wrlong	result1, fp
149c8     04 4E 05 F1 | 	add	fp, #4
149cc     A7 FC 61 FC | 	wrlong	result2, fp
149d0     04 4E 05 F1 | 	add	fp, #4
149d4     A7 1A 62 FC | 	wrlong	arg05, fp
149d8     08 4E 85 F1 | 	sub	fp, #8
149dc     A7 12 02 F6 | 	mov	arg01, fp
149e0     1C 4E 85 F1 | 	sub	fp, #28
149e4     98 6B BF FD | 	call	#_converttoint
149e8     52 00 00 FF 
149ec     14 E4 05 F1 | 	add	objptr, ##42004
149f0     F2 FA 61 FC | 	wrlong	result1, objptr
149f4     52 00 00 FF 
149f8     14 E4 85 F1 | 	sub	objptr, ##42004
149fc     18 00 90 FD | 	jmp	#LR__1751
14a00                 | LR__1750
14a00     52 00 00 FF 
14a04     14 E4 05 F1 | 	add	objptr, ##42004
14a08     FF FF FF FF 
14a0c     F2 FE 6B FC | 	wrlong	##-1, objptr
14a10     52 00 00 FF 
14a14     14 E4 85 F1 | 	sub	objptr, ##42004
14a18                 | LR__1751
14a18                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
14a18     A7 1A 02 FB | 	rdlong	arg05, fp
14a1c     03 1A 56 F2 | 	cmps	arg05, #3 wc
14a20     40 00 90 CD |  if_b	jmp	#LR__1752
14a24     74 69 BF FD | 	call	#_pop
14a28     FF 1A 02 F6 | 	mov	arg05, result3
14a2c     1C 4E 05 F1 | 	add	fp, #28
14a30     A7 FA 61 FC | 	wrlong	result1, fp
14a34     04 4E 05 F1 | 	add	fp, #4
14a38     A7 FC 61 FC | 	wrlong	result2, fp
14a3c     04 4E 05 F1 | 	add	fp, #4
14a40     A7 1A 62 FC | 	wrlong	arg05, fp
14a44     08 4E 85 F1 | 	sub	fp, #8
14a48     A7 12 02 F6 | 	mov	arg01, fp
14a4c     1C 4E 85 F1 | 	sub	fp, #28
14a50     2C 6B BF FD | 	call	#_converttoint
14a54     08 4E 05 F1 | 	add	fp, #8
14a58     A7 FA 61 FC | 	wrlong	result1, fp
14a5c     08 4E 85 F1 | 	sub	fp, #8
14a60     0C 00 90 FD | 	jmp	#LR__1753
14a64                 | LR__1752
14a64     08 4E 05 F1 | 	add	fp, #8
14a68     A7 02 68 FC | 	wrlong	#1, fp
14a6c     08 4E 85 F1 | 	sub	fp, #8
14a70                 | LR__1753
14a70                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
14a70     A7 18 02 FB | 	rdlong	arg04, fp
14a74     02 18 56 F2 | 	cmps	arg04, #2 wc
14a78     3C 00 90 CD |  if_b	jmp	#LR__1754
14a7c     1C 69 BF FD | 	call	#_pop
14a80     FF 18 02 F6 | 	mov	arg04, result3
14a84     1C 4E 05 F1 | 	add	fp, #28
14a88     A7 FA 61 FC | 	wrlong	result1, fp
14a8c     04 4E 05 F1 | 	add	fp, #4
14a90     A7 FC 61 FC | 	wrlong	result2, fp
14a94     04 4E 05 F1 | 	add	fp, #4
14a98     A7 18 62 FC | 	wrlong	arg04, fp
14a9c     08 4E 85 F1 | 	sub	fp, #8
14aa0     A7 12 02 F6 | 	mov	arg01, fp
14aa4     1C 4E 85 F1 | 	sub	fp, #28
14aa8     D4 6A BF FD | 	call	#_converttoint
14aac     0C 4E 05 F1 | 	add	fp, #12
14ab0     A7 FA 61 FC | 	wrlong	result1, fp
14ab4     0C 4E 85 F1 | 	sub	fp, #12
14ab8                 | LR__1754
14ab8     E0 68 BF FD | 	call	#_pop
14abc     FF 18 02 F6 | 	mov	arg04, result3
14ac0     1C 4E 05 F1 | 	add	fp, #28
14ac4     A7 FA 61 FC | 	wrlong	result1, fp
14ac8     04 4E 05 F1 | 	add	fp, #4
14acc     A7 FC 61 FC | 	wrlong	result2, fp
14ad0     04 4E 05 F1 | 	add	fp, #4
14ad4     A7 18 62 FC | 	wrlong	arg04, fp
14ad8     08 4E 85 F1 | 	sub	fp, #8
14adc     A7 12 02 F6 | 	mov	arg01, fp
14ae0     1C 4E 85 F1 | 	sub	fp, #28
14ae4     98 6A BF FD | 	call	#_converttoint
14ae8     04 4E 05 F1 | 	add	fp, #4
14aec     A7 FA 61 FC | 	wrlong	result1, fp
14af0     10 4E 05 F1 | 	add	fp, #16
14af4     A7 1E 02 FB | 	rdlong	local01, fp
14af8     14 4E 85 F1 | 	sub	fp, #20
14afc     02 1E 66 F0 | 	shl	local01, #2
14b00     50 00 00 FF 
14b04     C4 E4 05 F1 | 	add	objptr, ##41156
14b08     F2 1E 02 F1 | 	add	local01, objptr
14b0c     0F 01 68 FC | 	wrlong	#0, local01
14b10                 | ' t1=pop() : channel=converttoint(t1)
14b10                 | ' getres(j)=0
14b10                 | ' if pos>=0 then
14b10     01 00 00 FF 
14b14     50 E5 05 F1 | 	add	objptr, ##848
14b18     F2 20 02 FB | 	rdlong	local02, objptr
14b1c     52 00 00 FF 
14b20     14 E4 85 F1 | 	sub	objptr, ##42004
14b24     00 20 56 F2 | 	cmps	local02, #0 wc
14b28     C0 01 90 CD |  if_b	jmp	#LR__1760
14b2c     10 4E 05 F1 | 	add	fp, #16
14b30     A7 00 68 FC | 	wrlong	#0, fp
14b34     10 4E 85 F1 | 	sub	fp, #16
14b38                 | '    i=0: do
14b38                 | LR__1755
14b38     14 4E 05 F1 | 	add	fp, #20
14b3c     A7 00 68 FC | 	wrlong	#0, fp
14b40     14 4E 85 F1 | 	sub	fp, #20
14b44                 | '    j=0: do    
14b44                 | LR__1756
14b44                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
14b44     0C 4E 05 F1 | 	add	fp, #12
14b48     A7 20 02 FB | 	rdlong	local02, fp
14b4c     0C 4E 85 F1 | 	sub	fp, #12
14b50     00 04 00 FF 
14b54     00 20 56 F2 | 	cmps	local02, ##524288 wc
14b58     4C 00 90 3D |  if_ae	jmp	#LR__1757
14b5c     14 4E 05 F1 | 	add	fp, #20
14b60     A7 20 02 FB | 	rdlong	local02, fp
14b64     10 1F 02 F6 | 	mov	local01, local02
14b68     4E 00 00 FF 
14b6c     B4 E4 05 F1 | 	add	objptr, ##40116
14b70     F2 1E 02 F1 | 	add	local01, objptr
14b74     08 4E 85 F1 | 	sub	fp, #8
14b78     A7 12 02 FB | 	rdlong	arg01, fp
14b7c     04 4E 05 F1 | 	add	fp, #4
14b80     A7 18 02 FB | 	rdlong	arg04, fp
14b84     0A 18 66 F0 | 	shl	arg04, #10
14b88     0C 13 02 F1 | 	add	arg01, arg04
14b8c     10 4E 85 F1 | 	sub	fp, #16
14b90     10 13 02 F1 | 	add	arg01, local02
14b94     09 FB C1 FA | 	rdbyte	result1, arg01
14b98     4E 00 00 FF 
14b9c     B4 E4 85 F1 | 	sub	objptr, ##40116
14ba0     0F FB 41 FC | 	wrbyte	result1, local01
14ba4     48 00 90 FD | 	jmp	#LR__1758
14ba8                 | LR__1757
14ba8     14 4E 05 F1 | 	add	fp, #20
14bac     A7 20 02 FB | 	rdlong	local02, fp
14bb0     10 1F 02 F6 | 	mov	local01, local02
14bb4     4E 00 00 FF 
14bb8     B4 E4 05 F1 | 	add	objptr, ##40116
14bbc     F2 1E 02 F1 | 	add	local01, objptr
14bc0     08 4E 85 F1 | 	sub	fp, #8
14bc4     A7 12 02 FB | 	rdlong	arg01, fp
14bc8     04 4E 05 F1 | 	add	fp, #4
14bcc     A7 18 02 FB | 	rdlong	arg04, fp
14bd0     0A 18 66 F0 | 	shl	arg04, #10
14bd4     0C 13 02 F1 | 	add	arg01, arg04
14bd8     10 4E 85 F1 | 	sub	fp, #16
14bdc     10 13 02 F1 | 	add	arg01, local02
14be0     4E 00 00 FF 
14be4     B4 E4 85 F1 | 	sub	objptr, ##40116
14be8     F0 88 B0 FD | 	call	#_pspeek
14bec     0F FB 41 FC | 	wrbyte	result1, local01
14bf0                 | LR__1758
14bf0     14 4E 05 F1 | 	add	fp, #20
14bf4     A7 20 02 FB | 	rdlong	local02, fp
14bf8     01 20 06 F1 | 	add	local02, #1
14bfc     A7 20 62 FC | 	wrlong	local02, fp
14c00     14 4E 85 F1 | 	sub	fp, #20
14c04     02 00 00 FF 
14c08     00 20 56 F2 | 	cmps	local02, ##1024 wc
14c0c     2C 00 90 3D |  if_ae	jmp	#LR__1759
14c10     10 4E 05 F1 | 	add	fp, #16
14c14     A7 1E 02 FB | 	rdlong	local01, fp
14c18     0A 1E 66 F0 | 	shl	local01, #10
14c1c     04 4E 05 F1 | 	add	fp, #4
14c20     A7 20 02 FB | 	rdlong	local02, fp
14c24     10 1F 02 F1 | 	add	local01, local02
14c28     0C 4E 85 F1 | 	sub	fp, #12
14c2c     A7 20 02 FB | 	rdlong	local02, fp
14c30     08 4E 85 F1 | 	sub	fp, #8
14c34     10 1F 5A F2 | 	cmps	local01, local02 wcz
14c38     08 FF 9F ED |  if_be	jmp	#LR__1756
14c3c                 | LR__1759
14c3c                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
14c3c     04 4E 05 F1 | 	add	fp, #4
14c40     A7 12 02 FB | 	rdlong	arg01, fp
14c44     52 00 00 FF 
14c48     14 E4 05 F1 | 	add	objptr, ##42004
14c4c     F2 14 02 FB | 	rdlong	arg02, objptr
14c50     01 14 06 F1 | 	add	arg02, #1
14c54     03 00 00 FF 
14c58     60 E5 85 F1 | 	sub	objptr, ##1888
14c5c     F2 16 02 F6 | 	mov	arg03, objptr
14c60     4E 00 00 FF 
14c64     B4 E4 85 F1 | 	sub	objptr, ##40116
14c68     04 4E 05 F1 | 	add	fp, #4
14c6c     A7 18 02 FB | 	rdlong	arg04, fp
14c70     08 4E 85 F1 | 	sub	fp, #8
14c74     01 1A 06 F6 | 	mov	arg05, #1
14c78     B8 C9 B0 FD | 	call	#__system___basic_put
14c7c     18 4E 05 F1 | 	add	fp, #24
14c80     A7 FA 61 FC | 	wrlong	result1, fp
14c84     14 4E 85 F1 | 	sub	fp, #20
14c88     A7 1E 02 FB | 	rdlong	local01, fp
14c8c     02 1E 66 F0 | 	shl	local01, #2
14c90     50 00 00 FF 
14c94     C4 E4 05 F1 | 	add	objptr, ##41156
14c98     F2 1E 02 F1 | 	add	local01, objptr
14c9c     0F FB 61 FC | 	wrlong	result1, local01
14ca0                 | '    if 1024*i+j>amount then exit loop
14ca0     0C 4E 05 F1 | 	add	fp, #12
14ca4     A7 20 02 FB | 	rdlong	local02, fp
14ca8     0A 20 66 F0 | 	shl	local02, #10
14cac     04 4E 05 F1 | 	add	fp, #4
14cb0     A7 1E 02 FB | 	rdlong	local01, fp
14cb4     0F 21 02 F1 | 	add	local02, local01
14cb8     0C 4E 85 F1 | 	sub	fp, #12
14cbc     A7 1E 02 FB | 	rdlong	local01, fp
14cc0     08 4E 85 F1 | 	sub	fp, #8
14cc4     0F 21 5A F2 | 	cmps	local02, local01 wcz
14cc8     50 00 00 FF 
14ccc     C4 E4 85 F1 | 	sub	objptr, ##41156
14cd0     CC 01 90 1D |  if_a	jmp	#LR__1767
14cd4     10 4E 05 F1 | 	add	fp, #16
14cd8     A7 20 02 FB | 	rdlong	local02, fp
14cdc     01 20 06 F1 | 	add	local02, #1
14ce0     A7 20 62 FC | 	wrlong	local02, fp
14ce4     10 4E 85 F1 | 	sub	fp, #16
14ce8     4C FE 9F FD | 	jmp	#LR__1755
14cec                 | LR__1760
14cec     10 4E 05 F1 | 	add	fp, #16
14cf0     A7 00 68 FC | 	wrlong	#0, fp
14cf4     10 4E 85 F1 | 	sub	fp, #16
14cf8                 | '    i=0: do
14cf8                 | LR__1761
14cf8     14 4E 05 F1 | 	add	fp, #20
14cfc     A7 00 68 FC | 	wrlong	#0, fp
14d00     14 4E 85 F1 | 	sub	fp, #20
14d04                 | '    j=0: do  
14d04                 | LR__1762
14d04                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
14d04     0C 4E 05 F1 | 	add	fp, #12
14d08     A7 20 02 FB | 	rdlong	local02, fp
14d0c     0C 4E 85 F1 | 	sub	fp, #12
14d10     00 04 00 FF 
14d14     00 20 56 F2 | 	cmps	local02, ##524288 wc
14d18     4C 00 90 3D |  if_ae	jmp	#LR__1763
14d1c     14 4E 05 F1 | 	add	fp, #20
14d20     A7 20 02 FB | 	rdlong	local02, fp
14d24     10 1F 02 F6 | 	mov	local01, local02
14d28     4E 00 00 FF 
14d2c     B4 E4 05 F1 | 	add	objptr, ##40116
14d30     F2 1E 02 F1 | 	add	local01, objptr
14d34     08 4E 85 F1 | 	sub	fp, #8
14d38     A7 12 02 FB | 	rdlong	arg01, fp
14d3c     04 4E 05 F1 | 	add	fp, #4
14d40     A7 18 02 FB | 	rdlong	arg04, fp
14d44     0A 18 66 F0 | 	shl	arg04, #10
14d48     0C 13 02 F1 | 	add	arg01, arg04
14d4c     10 4E 85 F1 | 	sub	fp, #16
14d50     10 13 02 F1 | 	add	arg01, local02
14d54     09 FB C1 FA | 	rdbyte	result1, arg01
14d58     4E 00 00 FF 
14d5c     B4 E4 85 F1 | 	sub	objptr, ##40116
14d60     0F FB 41 FC | 	wrbyte	result1, local01
14d64     48 00 90 FD | 	jmp	#LR__1764
14d68                 | LR__1763
14d68     14 4E 05 F1 | 	add	fp, #20
14d6c     A7 20 02 FB | 	rdlong	local02, fp
14d70     10 1F 02 F6 | 	mov	local01, local02
14d74     4E 00 00 FF 
14d78     B4 E4 05 F1 | 	add	objptr, ##40116
14d7c     F2 1E 02 F1 | 	add	local01, objptr
14d80     08 4E 85 F1 | 	sub	fp, #8
14d84     A7 12 02 FB | 	rdlong	arg01, fp
14d88     04 4E 05 F1 | 	add	fp, #4
14d8c     A7 18 02 FB | 	rdlong	arg04, fp
14d90     0A 18 66 F0 | 	shl	arg04, #10
14d94     0C 13 02 F1 | 	add	arg01, arg04
14d98     10 4E 85 F1 | 	sub	fp, #16
14d9c     10 13 02 F1 | 	add	arg01, local02
14da0     4E 00 00 FF 
14da4     B4 E4 85 F1 | 	sub	objptr, ##40116
14da8     30 87 B0 FD | 	call	#_pspeek
14dac     0F FB 41 FC | 	wrbyte	result1, local01
14db0                 | LR__1764
14db0     14 4E 05 F1 | 	add	fp, #20
14db4     A7 20 02 FB | 	rdlong	local02, fp
14db8     01 20 06 F1 | 	add	local02, #1
14dbc     A7 20 62 FC | 	wrlong	local02, fp
14dc0     14 4E 85 F1 | 	sub	fp, #20
14dc4     02 00 00 FF 
14dc8     00 20 56 F2 | 	cmps	local02, ##1024 wc
14dcc     2C 00 90 3D |  if_ae	jmp	#LR__1765
14dd0     10 4E 05 F1 | 	add	fp, #16
14dd4     A7 1E 02 FB | 	rdlong	local01, fp
14dd8     0A 1E 66 F0 | 	shl	local01, #10
14ddc     04 4E 05 F1 | 	add	fp, #4
14de0     A7 20 02 FB | 	rdlong	local02, fp
14de4     10 1F 02 F1 | 	add	local01, local02
14de8     0C 4E 85 F1 | 	sub	fp, #12
14dec     A7 20 02 FB | 	rdlong	local02, fp
14df0     08 4E 85 F1 | 	sub	fp, #8
14df4     10 1F 5A F2 | 	cmps	local01, local02 wcz
14df8     08 FF 9F ED |  if_be	jmp	#LR__1762
14dfc                 | LR__1765
14dfc                 | '    put #channel,,block(0),amount, r : getres(channel)=r
14dfc     04 4E 05 F1 | 	add	fp, #4
14e00     A7 12 02 FB | 	rdlong	arg01, fp
14e04     4E 00 00 FF 
14e08     B4 E4 05 F1 | 	add	objptr, ##40116
14e0c     F2 16 02 F6 | 	mov	arg03, objptr
14e10     4E 00 00 FF 
14e14     B4 E4 85 F1 | 	sub	objptr, ##40116
14e18     04 4E 05 F1 | 	add	fp, #4
14e1c     A7 18 02 FB | 	rdlong	arg04, fp
14e20     08 4E 85 F1 | 	sub	fp, #8
14e24     00 14 06 F6 | 	mov	arg02, #0
14e28     01 1A 06 F6 | 	mov	arg05, #1
14e2c     04 C8 B0 FD | 	call	#__system___basic_put
14e30     18 4E 05 F1 | 	add	fp, #24
14e34     A7 FA 61 FC | 	wrlong	result1, fp
14e38     14 4E 85 F1 | 	sub	fp, #20
14e3c     A7 1E 02 FB | 	rdlong	local01, fp
14e40     02 1E 66 F0 | 	shl	local01, #2
14e44     50 00 00 FF 
14e48     C4 E4 05 F1 | 	add	objptr, ##41156
14e4c     F2 1E 02 F1 | 	add	local01, objptr
14e50     0F FB 61 FC | 	wrlong	result1, local01
14e54                 | '    if 1024*i+j>amount then exit loop
14e54     0C 4E 05 F1 | 	add	fp, #12
14e58     A7 20 02 FB | 	rdlong	local02, fp
14e5c     0A 20 66 F0 | 	shl	local02, #10
14e60     04 4E 05 F1 | 	add	fp, #4
14e64     A7 1E 02 FB | 	rdlong	local01, fp
14e68     0F 21 02 F1 | 	add	local02, local01
14e6c     0C 4E 85 F1 | 	sub	fp, #12
14e70     A7 22 02 FB | 	rdlong	local03, fp
14e74     08 4E 85 F1 | 	sub	fp, #8
14e78     11 21 5A F2 | 	cmps	local02, local03 wcz
14e7c     50 00 00 FF 
14e80     C4 E4 85 F1 | 	sub	objptr, ##41156
14e84     18 00 90 1D |  if_a	jmp	#LR__1766
14e88     10 4E 05 F1 | 	add	fp, #16
14e8c     A7 20 02 FB | 	rdlong	local02, fp
14e90     01 20 06 F1 | 	add	local02, #1
14e94     A7 20 62 FC | 	wrlong	local02, fp
14e98     10 4E 85 F1 | 	sub	fp, #16
14e9c     58 FE 9F FD | 	jmp	#LR__1761
14ea0                 | LR__1766
14ea0                 | LR__1767
14ea0     A7 F0 03 F6 | 	mov	ptra, fp
14ea4     B2 00 A0 FD | 	call	#popregs_
14ea8                 | _do_put_ret
14ea8     2D 00 64 FD | 	ret
14eac                 | 
14eac                 | ' 
14eac                 | ' '-------------------- rad
14eac                 | ' 
14eac                 | ' sub do_rad
14eac                 | _do_rad
14eac     51 00 00 FF 
14eb0     BC E5 05 F1 | 	add	objptr, ##41916
14eb4     00 C0 9F FF 
14eb8     F2 00 68 FC | 	wrlong	##1065353216, objptr
14ebc     04 E4 05 F1 | 	add	objptr, #4
14ec0     00 C0 9F FF 
14ec4     F2 00 68 FC | 	wrlong	##1065353216, objptr
14ec8     51 00 00 FF 
14ecc     C0 E5 85 F1 | 	sub	objptr, ##41920
14ed0                 | _do_rad_ret
14ed0     2D 00 64 FD | 	ret
14ed4                 | 
14ed4                 | ' 
14ed4                 | ' '-------------------- rdpin
14ed4                 | ' 
14ed4                 | ' sub do_rdpin
14ed4                 | _do_rdpin
14ed4     00 4A 05 F6 | 	mov	COUNT_, #0
14ed8     A8 00 A0 FD | 	call	#pushregs_
14edc     0C F0 07 F1 | 	add	ptra, #12
14ee0     B8 64 BF FD | 	call	#_pop
14ee4     A7 FA 61 FC | 	wrlong	result1, fp
14ee8     04 4E 05 F1 | 	add	fp, #4
14eec     A7 FC 61 FC | 	wrlong	result2, fp
14ef0     04 4E 05 F1 | 	add	fp, #4
14ef4     A7 FE 61 FC | 	wrlong	result3, fp
14ef8     08 4E 85 F1 | 	sub	fp, #8
14efc     A7 12 02 F6 | 	mov	arg01, fp
14f00     7C 66 BF FD | 	call	#_converttoint
14f04     FD FA 89 FA | 	rdpin	result1, result1
14f08     52 00 00 FF 
14f0c     18 E4 05 F1 | 	add	objptr, ##42008
14f10     F2 FA 61 FC | 	wrlong	result1, objptr
14f14     52 00 00 FF 
14f18     18 E4 85 F1 | 	sub	objptr, ##42008
14f1c     08 4E 05 F1 | 	add	fp, #8
14f20     A7 3A 68 FC | 	wrlong	#29, fp
14f24     08 4E 85 F1 | 	sub	fp, #8
14f28     A7 08 68 FC | 	wrlong	#4, fp
14f2c     A7 12 02 F6 | 	mov	arg01, fp
14f30     00 65 BF FD | 	call	#_push
14f34     A7 F0 03 F6 | 	mov	ptra, fp
14f38     B2 00 A0 FD | 	call	#popregs_
14f3c                 | _do_rdpin_ret
14f3c     2D 00 64 FD | 	ret
14f40                 | 
14f40                 | ' 
14f40                 | ' '------------------- release
14f40                 | ' 
14f40                 | ' sub do_release
14f40                 | _do_release
14f40     00 4A 05 F6 | 	mov	COUNT_, #0
14f44     A8 00 A0 FD | 	call	#pushregs_
14f48     10 F0 07 F1 | 	add	ptra, #16
14f4c     4C 64 BF FD | 	call	#_pop
14f50     FF 14 02 F6 | 	mov	arg02, result3
14f54     A7 FA 61 FC | 	wrlong	result1, fp
14f58     04 4E 05 F1 | 	add	fp, #4
14f5c     A7 FC 61 FC | 	wrlong	result2, fp
14f60     04 4E 05 F1 | 	add	fp, #4
14f64     A7 14 62 FC | 	wrlong	arg02, fp
14f68     08 4E 85 F1 | 	sub	fp, #8
14f6c     A7 12 02 F6 | 	mov	arg01, fp
14f70     0C 66 BF FD | 	call	#_converttoint
14f74     0C 4E 05 F1 | 	add	fp, #12
14f78     A7 FA 61 FC | 	wrlong	result1, fp
14f7c                 | ' 
14f7c                 | ' t1=pop()
14f7c                 | ' channel=converttoint(t1)
14f7c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
14f7c     0C 4E 85 F1 | 	sub	fp, #12
14f80     00 FA 55 F2 | 	cmps	result1, #0 wc
14f84     44 00 90 CD |  if_b	jmp	#LR__1770
14f88     0C 4E 05 F1 | 	add	fp, #12
14f8c     A7 14 02 FB | 	rdlong	arg02, fp
14f90     0C 4E 85 F1 | 	sub	fp, #12
14f94     08 14 56 F2 | 	cmps	arg02, #8 wc
14f98     30 00 90 3D |  if_ae	jmp	#LR__1770
14f9c     37 00 00 FF 
14fa0     10 E4 05 F1 | 	add	objptr, ##28176
14fa4     F2 12 02 FB | 	rdlong	arg01, objptr
14fa8     37 00 00 FF 
14fac     10 E4 85 F1 | 	sub	objptr, ##28176
14fb0     0C 4E 05 F1 | 	add	fp, #12
14fb4     A7 14 02 FB | 	rdlong	arg02, fp
14fb8     0C 4E 85 F1 | 	sub	fp, #12
14fbc     06 14 66 F0 | 	shl	arg02, #6
14fc0     0A 13 02 F1 | 	add	arg01, arg02
14fc4     2C 12 06 F1 | 	add	arg01, #44
14fc8     09 FF 69 FC | 	wrlong	#255, arg01
14fcc                 | LR__1770
14fcc     A7 F0 03 F6 | 	mov	ptra, fp
14fd0     B2 00 A0 FD | 	call	#popregs_
14fd4                 | _do_release_ret
14fd4     2D 00 64 FD | 	ret
14fd8                 | 
14fd8                 | ' 
14fd8                 | ' '------------------- return
14fd8                 | ' 
14fd8                 | ' sub do_return()
14fd8                 | _do_return
14fd8                 | ' if gosubtop>0 then
14fd8     50 00 00 FF 
14fdc     0C E5 05 F1 | 	add	objptr, ##41228
14fe0     F2 00 02 FB | 	rdlong	_var01, objptr
14fe4     50 00 00 FF 
14fe8     0C E5 85 F1 | 	sub	objptr, ##41228
14fec     01 00 56 F2 | 	cmps	_var01, #1 wc
14ff0     8C 00 90 CD |  if_b	jmp	#LR__1780
14ff4     50 00 00 FF 
14ff8     0C E5 05 F1 | 	add	objptr, ##41228
14ffc     F2 00 02 FB | 	rdlong	_var01, objptr
15000     03 00 66 F0 | 	shl	_var01, #3
15004     03 00 00 FF 
15008     60 E5 85 F1 | 	sub	objptr, ##1888
1500c     F2 00 02 F1 | 	add	_var01, objptr
15010     00 01 02 FB | 	rdlong	_var01, _var01
15014     03 00 00 FF 
15018     0C E5 05 F1 | 	add	objptr, ##1804
1501c     F2 00 62 FC | 	wrlong	_var01, objptr
15020     54 E4 05 F1 | 	add	objptr, #84
15024     F2 00 02 FB | 	rdlong	_var01, objptr
15028     03 00 66 F0 | 	shl	_var01, #3
1502c     03 00 00 FF 
15030     60 E5 85 F1 | 	sub	objptr, ##1888
15034     F2 00 02 F1 | 	add	_var01, objptr
15038     04 00 06 F1 | 	add	_var01, #4
1503c     00 01 02 FB | 	rdlong	_var01, _var01
15040     03 00 00 FF 
15044     10 E5 05 F1 | 	add	objptr, ##1808
15048     F2 00 62 FC | 	wrlong	_var01, objptr
1504c     06 00 00 FF 
15050     40 E4 85 F1 | 	sub	objptr, ##3136
15054     F2 00 02 FB | 	rdlong	_var01, objptr
15058     01 00 86 F1 | 	sub	_var01, #1
1505c     04 E4 05 F1 | 	add	objptr, #4
15060     F2 00 62 FC | 	wrlong	_var01, objptr
15064     06 00 00 FF 
15068     8C E4 05 F1 | 	add	objptr, ##3212
1506c     F2 00 02 FB | 	rdlong	_var01, objptr
15070     01 00 86 F1 | 	sub	_var01, #1
15074     F2 00 62 FC | 	wrlong	_var01, objptr
15078     50 00 00 FF 
1507c     0C E5 85 F1 | 	sub	objptr, ##41228
15080                 | LR__1780
15080                 | _do_return_ret
15080     2D 00 64 FD | 	ret
15084                 | 
15084                 | ' 
15084                 | ' '------------------- right$
15084                 | ' 
15084                 | ' sub do_right
15084                 | _do_right
15084     00 4A 05 F6 | 	mov	COUNT_, #0
15088     A8 00 A0 FD | 	call	#pushregs_
1508c     14 F0 07 F1 | 	add	ptra, #20
15090     4A 00 00 FF 
15094     80 E4 05 F1 | 	add	objptr, ##38016
15098     F2 16 02 FB | 	rdlong	arg03, objptr
1509c     0B 15 02 F6 | 	mov	arg02, arg03
150a0     01 14 66 F0 | 	shl	arg02, #1
150a4     0B 15 02 F1 | 	add	arg02, arg03
150a8     02 14 66 F0 | 	shl	arg02, #2
150ac     03 00 00 FF 
150b0     04 E4 85 F1 | 	sub	objptr, ##1540
150b4     F2 14 02 F1 | 	add	arg02, objptr
150b8     0A 17 02 FB | 	rdlong	arg03, arg02
150bc     0C 4E 05 F1 | 	add	fp, #12
150c0     A7 16 62 FC | 	wrlong	arg03, fp
150c4                 | ' 
150c4                 | ' numpar=compiledline(lineptr_e).result.uresult
150c4                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
150c4     0C 4E 85 F1 | 	sub	fp, #12
150c8     02 16 0E F2 | 	cmp	arg03, #2 wz
150cc     47 00 00 FF 
150d0     7C E4 85 F1 | 	sub	objptr, ##36476
150d4     3C 00 90 AD |  if_e	jmp	#LR__1790
150d8     00 12 06 F6 | 	mov	arg01, #0
150dc     B4 11 B1 FD | 	call	#__system___getiolock_0541
150e0     FD 12 02 F6 | 	mov	arg01, result1
150e4     48 B7 B0 FD | 	call	#__system___lockmem
150e8     84 01 00 FF 
150ec     7C 15 06 F6 | 	mov	arg02, ##@LR__5473
150f0     00 12 06 F6 | 	mov	arg01, #0
150f4     00 16 06 F6 | 	mov	arg03, #0
150f8     28 C4 B0 FD | 	call	#__system___basic_print_string
150fc     00 12 06 F6 | 	mov	arg01, #0
15100     90 11 B1 FD | 	call	#__system___getiolock_0541
15104     FD 00 68 FC | 	wrlong	#0, result1
15108     27 12 06 F6 | 	mov	arg01, #39
1510c     90 81 B0 FD | 	call	#_printerror
15110     E8 00 90 FD | 	jmp	#LR__1793
15114                 | LR__1790
15114     84 62 BF FD | 	call	#_pop
15118     FF 16 02 F6 | 	mov	arg03, result3
1511c     A7 FA 61 FC | 	wrlong	result1, fp
15120     04 4E 05 F1 | 	add	fp, #4
15124     A7 FC 61 FC | 	wrlong	result2, fp
15128     04 4E 05 F1 | 	add	fp, #4
1512c     A7 16 62 FC | 	wrlong	arg03, fp
15130     08 4E 85 F1 | 	sub	fp, #8
15134     A7 12 02 F6 | 	mov	arg01, fp
15138     44 64 BF FD | 	call	#_converttoint
1513c     FD 16 02 F6 | 	mov	arg03, result1
15140     10 4E 05 F1 | 	add	fp, #16
15144     A7 16 62 FC | 	wrlong	arg03, fp
15148     10 4E 85 F1 | 	sub	fp, #16
1514c     4C 62 BF FD | 	call	#_pop
15150     FF 16 02 F6 | 	mov	arg03, result3
15154     A7 FA 61 FC | 	wrlong	result1, fp
15158     04 4E 05 F1 | 	add	fp, #4
1515c     A7 FC 61 FC | 	wrlong	result2, fp
15160     04 4E 05 F1 | 	add	fp, #4
15164     A7 16 62 FC | 	wrlong	arg03, fp
15168                 | ' t1=pop() : arg=converttoint(t1)
15168                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15168     08 4E 85 F1 | 	sub	fp, #8
1516c     2B 16 0E F2 | 	cmp	arg03, #43 wz
15170     18 00 90 5D |  if_ne	jmp	#LR__1791
15174     A7 12 02 FB | 	rdlong	arg01, fp
15178     98 63 BF FD | 	call	#_convertstring
1517c     A7 FA 61 FC | 	wrlong	result1, fp
15180     08 4E 05 F1 | 	add	fp, #8
15184     A7 3E 68 FC | 	wrlong	#31, fp
15188     08 4E 85 F1 | 	sub	fp, #8
1518c                 | LR__1791
1518c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1518c     08 4E 05 F1 | 	add	fp, #8
15190     A7 16 02 FB | 	rdlong	arg03, fp
15194     08 4E 85 F1 | 	sub	fp, #8
15198     1F 16 0E F2 | 	cmp	arg03, #31 wz
1519c     3C 00 90 AD |  if_e	jmp	#LR__1792
151a0     00 12 06 F6 | 	mov	arg01, #0
151a4     EC 10 B1 FD | 	call	#__system___getiolock_0541
151a8     FD 12 02 F6 | 	mov	arg01, result1
151ac     80 B6 B0 FD | 	call	#__system___lockmem
151b0     84 01 00 FF 
151b4     85 15 06 F6 | 	mov	arg02, ##@LR__5474
151b8     00 12 06 F6 | 	mov	arg01, #0
151bc     00 16 06 F6 | 	mov	arg03, #0
151c0     60 C3 B0 FD | 	call	#__system___basic_print_string
151c4     00 12 06 F6 | 	mov	arg01, #0
151c8     C8 10 B1 FD | 	call	#__system___getiolock_0541
151cc     FD 00 68 FC | 	wrlong	#0, result1
151d0     0F 12 06 F6 | 	mov	arg01, #15
151d4     C8 80 B0 FD | 	call	#_printerror
151d8     20 00 90 FD | 	jmp	#LR__1793
151dc                 | LR__1792
151dc     A7 12 02 FB | 	rdlong	arg01, fp
151e0     10 4E 05 F1 | 	add	fp, #16
151e4     A7 14 02 FB | 	rdlong	arg02, fp
151e8     10 4E 85 F1 | 	sub	fp, #16
151ec     44 D7 B0 FD | 	call	#__system__Right_S
151f0     A7 FA 61 FC | 	wrlong	result1, fp
151f4     A7 12 02 F6 | 	mov	arg01, fp
151f8     38 62 BF FD | 	call	#_push
151fc                 | LR__1793
151fc     A7 F0 03 F6 | 	mov	ptra, fp
15200     B2 00 A0 FD | 	call	#popregs_
15204                 | _do_right_ret
15204     2D 00 64 FD | 	ret
15208                 | 
15208                 | ' 
15208                 | ' '------------------- rnd
15208                 | ' 
15208                 | ' sub do_rnd
15208                 | _do_rnd
15208     01 4A 05 F6 | 	mov	COUNT_, #1
1520c     A8 00 A0 FD | 	call	#pushregs_
15210     10 F0 07 F1 | 	add	ptra, #16
15214     4A 00 00 FF 
15218     80 E4 05 F1 | 	add	objptr, ##38016
1521c     F2 1E 02 FB | 	rdlong	local01, objptr
15220     0F 17 02 F6 | 	mov	arg03, local01
15224     01 16 66 F0 | 	shl	arg03, #1
15228     0F 17 02 F1 | 	add	arg03, local01
1522c     02 16 66 F0 | 	shl	arg03, #2
15230     03 00 00 FF 
15234     04 E4 85 F1 | 	sub	objptr, ##1540
15238     F2 16 02 F1 | 	add	arg03, objptr
1523c     0B 17 02 FB | 	rdlong	arg03, arg03
15240     0C 4E 05 F1 | 	add	fp, #12
15244     A7 16 62 FC | 	wrlong	arg03, fp
15248                 | ' 
15248                 | ' numpar=compiledline(lineptr_e).result.uresult
15248                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15248     0C 4E 85 F1 | 	sub	fp, #12
1524c     02 16 16 F2 | 	cmp	arg03, #2 wc
15250     47 00 00 FF 
15254     7C E4 85 F1 | 	sub	objptr, ##36476
15258     3C 00 90 CD |  if_b	jmp	#LR__1800
1525c     00 12 06 F6 | 	mov	arg01, #0
15260     30 10 B1 FD | 	call	#__system___getiolock_0541
15264     FD 12 02 F6 | 	mov	arg01, result1
15268     C4 B5 B0 FD | 	call	#__system___lockmem
1526c     84 01 00 FF 
15270     8E 15 06 F6 | 	mov	arg02, ##@LR__5475
15274     00 12 06 F6 | 	mov	arg01, #0
15278     00 16 06 F6 | 	mov	arg03, #0
1527c     A4 C2 B0 FD | 	call	#__system___basic_print_string
15280     00 12 06 F6 | 	mov	arg01, #0
15284     0C 10 B1 FD | 	call	#__system___getiolock_0541
15288     FD 00 68 FC | 	wrlong	#0, result1
1528c     27 12 06 F6 | 	mov	arg01, #39
15290     0C 80 B0 FD | 	call	#_printerror
15294     2C 01 90 FD | 	jmp	#LR__1807
15298                 | LR__1800
15298                 | ' if numpar=0 then
15298     0C 4E 05 F1 | 	add	fp, #12
1529c     A7 FE 09 FB | 	rdlong	result3, fp wz
152a0     0C 4E 85 F1 | 	sub	fp, #12
152a4     20 00 90 5D |  if_ne	jmp	#LR__1801
152a8     08 4E 05 F1 | 	add	fp, #8
152ac     A7 3A 68 FC | 	wrlong	#29, fp
152b0     08 4E 85 F1 | 	sub	fp, #8
152b4     1B FA 61 FD | 	getrnd	result1
152b8     A7 FA 61 FC | 	wrlong	result1, fp
152bc     A7 12 02 F6 | 	mov	arg01, fp
152c0     70 61 BF FD | 	call	#_push
152c4     FC 00 90 FD | 	jmp	#LR__1806
152c8                 | LR__1801
152c8     D0 60 BF FD | 	call	#_pop
152cc     A7 FA 61 FC | 	wrlong	result1, fp
152d0     04 4E 05 F1 | 	add	fp, #4
152d4     A7 FC 61 FC | 	wrlong	result2, fp
152d8     04 4E 05 F1 | 	add	fp, #4
152dc     A7 FE 61 FC | 	wrlong	result3, fp
152e0                 | '   t1=pop()
152e0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
152e0     08 4E 85 F1 | 	sub	fp, #8
152e4     1C FE 0D F2 | 	cmp	result3, #28 wz
152e8     08 4E 05 51 |  if_ne	add	fp, #8
152ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
152f0     08 4E 85 51 |  if_ne	sub	fp, #8
152f4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
152f8     2C 00 90 5D |  if_ne	jmp	#LR__1802
152fc     1B FA 61 FD | 	getrnd	result1
15300     A7 1E 02 FB | 	rdlong	local01, fp
15304     0F FB 11 FD | 	qdiv	result1, local01
15308     A7 12 02 F6 | 	mov	arg01, fp
1530c     19 1E 62 FD | 	getqy	local01
15310     A7 1E 62 FC | 	wrlong	local01, fp
15314     08 4E 05 F1 | 	add	fp, #8
15318     A7 3A 68 FC | 	wrlong	#29, fp
1531c     08 4E 85 F1 | 	sub	fp, #8
15320     10 61 BF FD | 	call	#_push
15324     9C 00 90 FD | 	jmp	#LR__1805
15328                 | LR__1802
15328     08 4E 05 F1 | 	add	fp, #8
1532c     A7 1E 02 FB | 	rdlong	local01, fp
15330     08 4E 85 F1 | 	sub	fp, #8
15334     1E 1E 0E F2 | 	cmp	local01, #30 wz
15338     48 00 90 5D |  if_ne	jmp	#LR__1803
1533c     A7 12 02 FB | 	rdlong	arg01, fp
15340     00 C0 24 FF 
15344     00 14 06 F6 | 	mov	arg02, ##1233125376
15348     9C E2 B0 FD | 	call	#__system___float_div
1534c     FD 1E 02 F6 | 	mov	local01, result1
15350     1B 12 62 FD | 	getrnd	arg01
15354     74 13 06 F4 | 	bitl	arg01, #372
15358     84 DC B0 FD | 	call	#__system___float_fromuns
1535c     FD 14 02 F6 | 	mov	arg02, result1
15360     0F 13 02 F6 | 	mov	arg01, local01
15364     7C E0 B0 FD | 	call	#__system___float_mul
15368     A7 FA 61 FC | 	wrlong	result1, fp
1536c     08 4E 05 F1 | 	add	fp, #8
15370     A7 3C 68 FC | 	wrlong	#30, fp
15374     08 4E 85 F1 | 	sub	fp, #8
15378     A7 12 02 F6 | 	mov	arg01, fp
1537c     B4 60 BF FD | 	call	#_push
15380     40 00 90 FD | 	jmp	#LR__1804
15384                 | LR__1803
15384                 | '     print "rnd: "; : printerror(40) 
15384     00 12 06 F6 | 	mov	arg01, #0
15388     08 0F B1 FD | 	call	#__system___getiolock_0541
1538c     FD 12 02 F6 | 	mov	arg01, result1
15390     9C B4 B0 FD | 	call	#__system___lockmem
15394     84 01 00 FF 
15398     94 15 06 F6 | 	mov	arg02, ##@LR__5476
1539c     00 12 06 F6 | 	mov	arg01, #0
153a0     00 16 06 F6 | 	mov	arg03, #0
153a4     7C C1 B0 FD | 	call	#__system___basic_print_string
153a8     00 12 06 F6 | 	mov	arg01, #0
153ac     E4 0E B1 FD | 	call	#__system___getiolock_0541
153b0     FD 00 68 FC | 	wrlong	#0, result1
153b4     28 12 06 F6 | 	mov	arg01, #40
153b8     E4 7E B0 FD | 	call	#_printerror
153bc     A7 12 02 F6 | 	mov	arg01, fp
153c0     70 60 BF FD | 	call	#_push
153c4                 | LR__1804
153c4                 | LR__1805
153c4                 | LR__1806
153c4                 | LR__1807
153c4     A7 F0 03 F6 | 	mov	ptra, fp
153c8     B2 00 A0 FD | 	call	#popregs_
153cc                 | _do_rnd_ret
153cc     2D 00 64 FD | 	ret
153d0                 | 
153d0                 | ' 
153d0                 | ' '-------------------- round
153d0                 | ' 
153d0                 | ' sub do_round
153d0                 | _do_round
153d0     00 4A 05 F6 | 	mov	COUNT_, #0
153d4     A8 00 A0 FD | 	call	#pushregs_
153d8     0C F0 07 F1 | 	add	ptra, #12
153dc     BC 5F BF FD | 	call	#_pop
153e0     A7 FA 61 FC | 	wrlong	result1, fp
153e4     04 4E 05 F1 | 	add	fp, #4
153e8     A7 FC 61 FC | 	wrlong	result2, fp
153ec     04 4E 05 F1 | 	add	fp, #4
153f0     A7 FE 61 FC | 	wrlong	result3, fp
153f4     08 4E 85 F1 | 	sub	fp, #8
153f8     A7 12 02 F6 | 	mov	arg01, fp
153fc     80 61 BF FD | 	call	#_converttoint
15400     A7 FA 61 FC | 	wrlong	result1, fp
15404     08 4E 05 F1 | 	add	fp, #8
15408     A7 38 68 FC | 	wrlong	#28, fp
1540c     08 4E 85 F1 | 	sub	fp, #8
15410     A7 12 02 F6 | 	mov	arg01, fp
15414     1C 60 BF FD | 	call	#_push
15418     A7 F0 03 F6 | 	mov	ptra, fp
1541c     B2 00 A0 FD | 	call	#popregs_
15420                 | _do_round_ret
15420     2D 00 64 FD | 	ret
15424                 | 
15424                 | ' 
15424                 | ' '-------------------- rqpin
15424                 | ' 
15424                 | ' sub do_rqpin
15424                 | _do_rqpin
15424     00 4A 05 F6 | 	mov	COUNT_, #0
15428     A8 00 A0 FD | 	call	#pushregs_
1542c     0C F0 07 F1 | 	add	ptra, #12
15430     68 5F BF FD | 	call	#_pop
15434     A7 FA 61 FC | 	wrlong	result1, fp
15438     04 4E 05 F1 | 	add	fp, #4
1543c     A7 FC 61 FC | 	wrlong	result2, fp
15440     04 4E 05 F1 | 	add	fp, #4
15444     A7 FE 61 FC | 	wrlong	result3, fp
15448     08 4E 85 F1 | 	sub	fp, #8
1544c     A7 12 02 F6 | 	mov	arg01, fp
15450     2C 61 BF FD | 	call	#_converttoint
15454     FD 12 02 F6 | 	mov	arg01, result1
15458     00 FA 05 F6 | 	mov	result1, #0
1545c     09 FB 81 FA | 	rqpin	result1, arg01
15460     52 00 00 FF 
15464     18 E4 05 F1 | 	add	objptr, ##42008
15468     F2 FA 61 FC | 	wrlong	result1, objptr
1546c     52 00 00 FF 
15470     18 E4 85 F1 | 	sub	objptr, ##42008
15474     08 4E 05 F1 | 	add	fp, #8
15478     A7 3A 68 FC | 	wrlong	#29, fp
1547c     08 4E 85 F1 | 	sub	fp, #8
15480     A7 08 68 FC | 	wrlong	#4, fp
15484     A7 12 02 F6 | 	mov	arg01, fp
15488     A8 5F BF FD | 	call	#_push
1548c     A7 F0 03 F6 | 	mov	ptra, fp
15490     B2 00 A0 FD | 	call	#popregs_
15494                 | _do_rqpin_ret
15494     2D 00 64 FD | 	ret
15498                 | 
15498                 | ' 
15498                 | ' ' ------------------ run
15498                 | ' 
15498                 | ' sub do_run
15498                 | _do_run
15498     04 4A 05 F6 | 	mov	COUNT_, #4
1549c     A8 00 A0 FD | 	call	#pushregs_
154a0     4A 00 00 FF 
154a4     80 E4 05 F1 | 	add	objptr, ##38016
154a8     F2 1E 02 FB | 	rdlong	local01, objptr
154ac     06 00 00 FF 
154b0     38 E4 05 F1 | 	add	objptr, ##3128
154b4     F2 20 02 FB | 	rdlong	local02, objptr
154b8     04 E4 05 F1 | 	add	objptr, #4
154bc     F2 22 02 FB | 	rdlong	local03, objptr
154c0     0F 19 02 F6 | 	mov	arg04, local01
154c4     0C 17 02 F6 | 	mov	arg03, arg04
154c8     01 16 66 F0 | 	shl	arg03, #1
154cc     0C 17 02 F1 | 	add	arg03, arg04
154d0     02 16 66 F0 | 	shl	arg03, #2
154d4     09 00 00 FF 
154d8     40 E4 85 F1 | 	sub	objptr, ##4672
154dc     F2 16 02 F1 | 	add	arg03, objptr
154e0     0B 15 02 FB | 	rdlong	arg02, arg03
154e4                 | ' 
154e4                 | ' r_lineptr_e=lineptr_e
154e4                 | ' r_runptr=runptr
154e4                 | ' r_runptr2=runptr2
154e4                 | ' 
154e4                 | ' numpar=compiledline(lineptr_e).result.uresult
154e4                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
154e4     01 14 0E F2 | 	cmp	arg02, #1 wz
154e8     47 00 00 FF 
154ec     7C E4 85 F1 | 	sub	objptr, ##36476
154f0     00 12 06 A6 |  if_e	mov	arg01, #0
154f4     C8 C3 BF AD |  if_e	call	#_do_load
154f8     4A 00 00 FF 
154fc     88 E4 05 F1 | 	add	objptr, ##38024
15500     F2 18 02 FB | 	rdlong	arg04, objptr
15504     06 00 00 FF 
15508     30 E4 05 F1 | 	add	objptr, ##3120
1550c     F2 18 62 FC | 	wrlong	arg04, objptr
15510     04 E4 05 F1 | 	add	objptr, #4
15514     F2 00 68 FC | 	wrlong	#0, objptr
15518     04 E4 05 F1 | 	add	objptr, #4
1551c     FF FF FF FF 
15520     F2 FE 6B FC | 	wrlong	##-1, objptr
15524                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
15524                 | ' if inrun>0 then 
15524     2C E4 05 F1 | 	add	objptr, #44
15528     F2 18 02 FB | 	rdlong	arg04, objptr
1552c     50 00 00 FF 
15530     EC E4 85 F1 | 	sub	objptr, ##41196
15534     01 18 16 F2 | 	cmp	arg04, #1 wc
15538     30 00 90 CD |  if_b	jmp	#LR__1810
1553c     50 00 00 FF 
15540     F0 E4 05 F1 | 	add	objptr, ##41200
15544     F2 12 02 F6 | 	mov	arg01, objptr
15548     38 E4 85 F1 | 	sub	objptr, #56
1554c     F2 14 02 FB | 	rdlong	arg02, objptr
15550     18 16 06 F6 | 	mov	arg03, #24
15554     44 00 00 FF 
15558     EC E5 85 F1 | 	sub	objptr, ##35308
1555c     90 A6 B0 FD | 	call	#_psram_spin2_read1
15560     0B 00 00 FF 
15564     CC E4 85 F1 | 	sub	objptr, ##5836
15568                 | '   psram.read1(varptr(runheader),runptr,24)  
15568                 | '   return
15568     D4 02 90 FD | 	jmp	#LR__1816
1556c                 | LR__1810
1556c     50 00 00 FF 
15570     EC E4 05 F1 | 	add	objptr, ##41196
15574     F2 02 68 FC | 	wrlong	#1, objptr
15578     04 E4 05 F1 | 	add	objptr, #4
1557c     F2 12 02 F6 | 	mov	arg01, objptr
15580     38 E4 85 F1 | 	sub	objptr, #56
15584     F2 14 02 FB | 	rdlong	arg02, objptr
15588     18 16 06 F6 | 	mov	arg03, #24
1558c     44 00 00 FF 
15590     EC E5 85 F1 | 	sub	objptr, ##35308
15594     58 A6 B0 FD | 	call	#_psram_spin2_read1
15598                 | ' inrun=1
15598                 | ' psram.read1(varptr(runheader),runptr,24) 
15598                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
15598     45 00 00 FF 
1559c     24 E4 05 F1 | 	add	objptr, ##35364
155a0     F2 24 02 FB | 	rdlong	local04, objptr
155a4     50 00 00 FF 
155a8     F0 E4 85 F1 | 	sub	objptr, ##41200
155ac     FF FF 7F FF 
155b0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
155b4     50 00 00 AF 
155b8     EC E4 05 A1 |  if_e	add	objptr, ##41196
155bc     F2 00 68 AC |  if_e	wrlong	#0, objptr
155c0     50 00 00 AF 
155c4     EC E4 85 A1 |  if_e	sub	objptr, ##41196
155c8     74 02 90 AD |  if_e	jmp	#LR__1816
155cc                 | ' do 
155cc                 | LR__1811
155cc                 | '   if runptr<>oldrunptr then
155cc     50 00 00 FF 
155d0     B8 E4 05 F1 | 	add	objptr, ##41144
155d4     F2 24 02 FB | 	rdlong	local04, objptr
155d8     08 E4 05 F1 | 	add	objptr, #8
155dc     F2 18 02 FB | 	rdlong	arg04, objptr
155e0     50 00 00 FF 
155e4     C0 E4 85 F1 | 	sub	objptr, ##41152
155e8     0C 25 0A F2 | 	cmp	local04, arg04 wz
155ec     CC 00 90 AD |  if_e	jmp	#LR__1812
155f0     50 00 00 FF 
155f4     F0 E4 05 F1 | 	add	objptr, ##41200
155f8     F2 12 02 F6 | 	mov	arg01, objptr
155fc     38 E4 85 F1 | 	sub	objptr, #56
15600     F2 14 02 FB | 	rdlong	arg02, objptr
15604     18 16 06 F6 | 	mov	arg03, #24
15608     44 00 00 FF 
1560c     EC E5 85 F1 | 	sub	objptr, ##35308
15610     DC A5 B0 FD | 	call	#_psram_spin2_read1
15614     3B 00 00 FF 
15618     B0 E5 05 F1 | 	add	objptr, ##30640
1561c     F2 12 02 F6 | 	mov	arg01, objptr
15620     09 00 00 FF 
15624     3C E4 05 F1 | 	add	objptr, ##4668
15628     F2 14 02 FB | 	rdlong	arg02, objptr
1562c     0B 00 00 FF 
15630     54 E4 85 F1 | 	sub	objptr, ##5716
15634     F2 24 02 FB | 	rdlong	local04, objptr
15638     01 24 66 F0 | 	shl	local04, #1
1563c     12 15 02 F1 | 	add	arg02, local04
15640     0B 00 00 FF 
15644     94 E4 05 F1 | 	add	objptr, ##5780
15648     F2 16 02 FB | 	rdlong	arg03, objptr
1564c     40 E4 85 F1 | 	sub	objptr, #64
15650     F2 24 02 FB | 	rdlong	local04, objptr
15654     12 17 82 F1 | 	sub	arg03, local04
15658     44 00 00 FF 
1565c     EC E5 85 F1 | 	sub	objptr, ##35308
15660     8C A5 B0 FD | 	call	#_psram_spin2_read1
15664     45 00 00 FF 
15668     2C E4 05 F1 | 	add	objptr, ##35372
1566c     F2 24 02 FB | 	rdlong	local04, objptr
15670     40 E4 85 F1 | 	sub	objptr, #64
15674     F2 14 02 FB | 	rdlong	arg02, objptr
15678     0A 25 82 F1 | 	sub	local04, arg02
1567c     0B 00 00 FF 
15680     54 E4 85 F1 | 	sub	objptr, ##5716
15684     F2 14 02 FB | 	rdlong	arg02, objptr
15688     0A 25 12 FD | 	qdiv	local04, arg02
1568c     05 00 00 FF 
15690     18 E4 05 F1 | 	add	objptr, ##2584
15694     18 24 62 FD | 	getqx	local04
15698     03 24 86 F1 | 	sub	local04, #3
1569c     F2 24 62 FC | 	wrlong	local04, objptr
156a0     06 00 00 FF 
156a4     3C E4 05 F1 | 	add	objptr, ##3132
156a8     F2 24 02 FB | 	rdlong	local04, objptr
156ac     08 E4 05 F1 | 	add	objptr, #8
156b0     F2 24 62 FC | 	wrlong	local04, objptr
156b4     50 00 00 FF 
156b8     C0 E4 85 F1 | 	sub	objptr, ##41152
156bc                 | LR__1812
156bc     50 00 00 FF 
156c0     04 E5 05 F1 | 	add	objptr, ##41220
156c4     F2 24 02 FB | 	rdlong	local04, objptr
156c8     4C E4 85 F1 | 	sub	objptr, #76
156cc     F2 24 62 FC | 	wrlong	local04, objptr
156d0     04 E4 05 F1 | 	add	objptr, #4
156d4     F2 12 02 FB | 	rdlong	arg01, objptr
156d8     50 00 00 FF 
156dc     BC E4 85 F1 | 	sub	objptr, ##41148
156e0     B4 5B BF FD | 	call	#_execute_line
156e4     50 00 00 FF 
156e8     BC E4 05 F1 | 	add	objptr, ##41148
156ec     F2 FA 61 FC | 	wrlong	result1, objptr
156f0     04 E4 85 F1 | 	sub	objptr, #4
156f4     F2 24 02 FB | 	rdlong	local04, objptr
156f8     50 00 00 FF 
156fc     B8 E4 85 F1 | 	sub	objptr, ##41144
15700     FF FF 3F FF 
15704     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
15708     30 00 90 AD |  if_e	jmp	#LR__1814
1570c     E0 12 06 F6 | 	mov	arg01, #224
15710     6C A8 B0 FD | 	call	#_usbnew_spin2_keystate
15714     00 FA 0D F2 | 	cmp	result1, #0 wz
15718     10 00 90 5D |  if_ne	jmp	#LR__1813
1571c     E4 12 06 F6 | 	mov	arg01, #228
15720     5C A8 B0 FD | 	call	#_usbnew_spin2_keystate
15724     00 FA 0D F2 | 	cmp	result1, #0 wz
15728     A0 FE 9F AD |  if_e	jmp	#LR__1811
1572c                 | LR__1813
1572c     06 12 06 F6 | 	mov	arg01, #6
15730     4C A8 B0 FD | 	call	#_usbnew_spin2_keystate
15734     00 FA 0D F2 | 	cmp	result1, #0 wz
15738     90 FE 9F AD |  if_e	jmp	#LR__1811
1573c                 | LR__1814
1573c                 | '   ''do whatever kbm.peek_latest_key()=$106 
1573c                 | ' if runptr<>$7FFF_FFFF then 
1573c     50 00 00 FF 
15740     B8 E4 05 F1 | 	add	objptr, ##41144
15744     F2 24 02 FB | 	rdlong	local04, objptr
15748     50 00 00 FF 
1574c     B8 E4 85 F1 | 	sub	objptr, ##41144
15750     FF FF 3F FF 
15754     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
15758     90 00 90 AD |  if_e	jmp	#LR__1815
1575c                 | '   print: print "Stopped at line ";runheader(0) 
1575c     00 12 06 F6 | 	mov	arg01, #0
15760     30 0B B1 FD | 	call	#__system___getiolock_0541
15764     FD 12 02 F6 | 	mov	arg01, result1
15768     C4 B0 B0 FD | 	call	#__system___lockmem
1576c     00 12 06 F6 | 	mov	arg01, #0
15770     0A 14 06 F6 | 	mov	arg02, #10
15774     00 16 06 F6 | 	mov	arg03, #0
15778     50 BD B0 FD | 	call	#__system___basic_print_char
1577c     00 12 06 F6 | 	mov	arg01, #0
15780     10 0B B1 FD | 	call	#__system___getiolock_0541
15784     FD 00 68 FC | 	wrlong	#0, result1
15788     00 12 06 F6 | 	mov	arg01, #0
1578c     04 0B B1 FD | 	call	#__system___getiolock_0541
15790     FD 12 02 F6 | 	mov	arg01, result1
15794     98 B0 B0 FD | 	call	#__system___lockmem
15798     84 01 00 FF 
1579c     9A 15 06 F6 | 	mov	arg02, ##@LR__5477
157a0     00 12 06 F6 | 	mov	arg01, #0
157a4     00 16 06 F6 | 	mov	arg03, #0
157a8     78 BD B0 FD | 	call	#__system___basic_print_string
157ac     50 00 00 FF 
157b0     F0 E4 05 F1 | 	add	objptr, ##41200
157b4     F2 14 02 FB | 	rdlong	arg02, objptr
157b8     50 00 00 FF 
157bc     F0 E4 85 F1 | 	sub	objptr, ##41200
157c0     00 12 06 F6 | 	mov	arg01, #0
157c4     00 16 06 F6 | 	mov	arg03, #0
157c8     0A 18 06 F6 | 	mov	arg04, #10
157cc     D8 BD B0 FD | 	call	#__system___basic_print_unsigned
157d0     00 12 06 F6 | 	mov	arg01, #0
157d4     0A 14 06 F6 | 	mov	arg02, #10
157d8     00 16 06 F6 | 	mov	arg03, #0
157dc     EC BC B0 FD | 	call	#__system___basic_print_char
157e0     00 12 06 F6 | 	mov	arg01, #0
157e4     AC 0A B1 FD | 	call	#__system___getiolock_0541
157e8     FD 00 68 FC | 	wrlong	#0, result1
157ec                 | LR__1815
157ec     50 00 00 FF 
157f0     EC E4 05 F1 | 	add	objptr, ##41196
157f4     F2 00 68 FC | 	wrlong	#0, objptr
157f8     06 00 00 FF 
157fc     6C E4 85 F1 | 	sub	objptr, ##3180
15800     F2 1E 62 FC | 	wrlong	local01, objptr
15804     06 00 00 FF 
15808     38 E4 05 F1 | 	add	objptr, ##3128
1580c     F2 20 62 FC | 	wrlong	local02, objptr
15810     04 E4 05 F1 | 	add	objptr, #4
15814     F2 22 62 FC | 	wrlong	local03, objptr
15818     50 00 00 FF 
1581c     BC E4 85 F1 | 	sub	objptr, ##41148
15820     11 12 06 F6 | 	mov	arg01, #17
15824     08 14 06 F6 | 	mov	arg02, #8
15828     10 16 06 F6 | 	mov	arg03, #16
1582c     04 8A B0 FD | 	call	#_hg010b_spin2_setspritesize
15830     10 12 06 F6 | 	mov	arg01, #16
15834     20 14 06 F6 | 	mov	arg02, #32
15838     20 16 06 F6 | 	mov	arg03, #32
1583c     F4 89 B0 FD | 	call	#_hg010b_spin2_setspritesize
15840                 | LR__1816
15840     A7 F0 03 F6 | 	mov	ptra, fp
15844     B2 00 A0 FD | 	call	#popregs_
15848                 | _do_run_ret
15848     2D 00 64 FD | 	ret
1584c                 | 
1584c                 | ' 
1584c                 | ' ' ------------------ save
1584c                 | ' 
1584c                 | ' sub do_save                        
1584c                 | _do_save
1584c     04 4A 05 F6 | 	mov	COUNT_, #4
15850     A8 00 A0 FD | 	call	#pushregs_
15854     B8 F0 07 F1 | 	add	ptra, #184
15858     4A 00 00 FF 
1585c     80 E4 05 F1 | 	add	objptr, ##38016
15860     F2 1E 02 FB | 	rdlong	local01, objptr
15864     0F 21 02 F6 | 	mov	local02, local01
15868     01 20 66 F0 | 	shl	local02, #1
1586c     0F 21 02 F1 | 	add	local02, local01
15870     02 20 66 F0 | 	shl	local02, #2
15874     03 00 00 FF 
15878     04 E4 85 F1 | 	sub	objptr, ##1540
1587c     F2 20 02 F1 | 	add	local02, objptr
15880     10 23 02 FB | 	rdlong	local03, local02
15884     10 4E 05 F1 | 	add	fp, #16
15888     A7 22 62 FC | 	wrlong	local03, fp
1588c                 | ' 
1588c                 | ' numpar=compiledline(lineptr_e).result.uresult
1588c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1588c     10 4E 85 F1 | 	sub	fp, #16
15890     01 22 56 F2 | 	cmps	local03, #1 wc
15894     47 00 00 FF 
15898     7C E4 85 F1 | 	sub	objptr, ##36476
1589c     20 00 90 CD |  if_b	jmp	#LR__1820
158a0     F8 5A BF FD | 	call	#_pop
158a4     A7 FA 61 FC | 	wrlong	result1, fp
158a8     04 4E 05 F1 | 	add	fp, #4
158ac     A7 FC 61 FC | 	wrlong	result2, fp
158b0     04 4E 05 F1 | 	add	fp, #4
158b4     A7 FE 61 FC | 	wrlong	result3, fp
158b8     08 4E 85 F1 | 	sub	fp, #8
158bc     24 00 90 FD | 	jmp	#LR__1821
158c0                 | LR__1820
158c0     51 00 00 FF 
158c4     D8 E5 05 F1 | 	add	objptr, ##41944
158c8     F2 22 02 FB | 	rdlong	local03, objptr
158cc     51 00 00 FF 
158d0     D8 E5 85 F1 | 	sub	objptr, ##41944
158d4     A7 22 62 FC | 	wrlong	local03, fp
158d8     08 4E 05 F1 | 	add	fp, #8
158dc     A7 3E 68 FC | 	wrlong	#31, fp
158e0     08 4E 85 F1 | 	sub	fp, #8
158e4                 | LR__1821
158e4                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
158e4     4A 00 00 FF 
158e8     88 E4 05 F1 | 	add	objptr, ##38024
158ec     F2 12 02 FB | 	rdlong	arg01, objptr
158f0     4A 00 00 FF 
158f4     88 E4 85 F1 | 	sub	objptr, ##38024
158f8     38 7C B0 FD | 	call	#_pslpeek
158fc     FF FF 7F FF 
15900     FF FB 0D F2 | 	cmp	result1, ##-1 wz
15904     0C 00 90 5D |  if_ne	jmp	#LR__1822
15908     1B 12 06 F6 | 	mov	arg01, #27
1590c     90 79 B0 FD | 	call	#_printerror
15910     CC 02 90 FD | 	jmp	#LR__1828
15914                 | LR__1822
15914                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
15914     08 4E 05 F1 | 	add	fp, #8
15918     A7 22 02 FB | 	rdlong	local03, fp
1591c     08 4E 85 F1 | 	sub	fp, #8
15920     2B 22 0E F2 | 	cmp	local03, #43 wz
15924     18 00 90 5D |  if_ne	jmp	#LR__1823
15928     A7 12 02 FB | 	rdlong	arg01, fp
1592c     E4 5B BF FD | 	call	#_convertstring
15930     A7 FA 61 FC | 	wrlong	result1, fp
15934     08 4E 05 F1 | 	add	fp, #8
15938     A7 3E 68 FC | 	wrlong	#31, fp
1593c     08 4E 85 F1 | 	sub	fp, #8
15940                 | LR__1823
15940                 | ' if t1.result_type=result_string then
15940     08 4E 05 F1 | 	add	fp, #8
15944     A7 22 02 FB | 	rdlong	local03, fp
15948     08 4E 85 F1 | 	sub	fp, #8
1594c     1F 22 0E F2 | 	cmp	local03, #31 wz
15950     8C 02 90 5D |  if_ne	jmp	#LR__1827
15954                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
15954     A7 12 02 FB | 	rdlong	arg01, fp
15958     84 01 00 FF 
1595c     AB 15 06 F6 | 	mov	arg02, ##@LR__5478
15960     F4 AE B0 FD | 	call	#__system___string_cmp
15964     00 FA 0D F2 | 	cmp	result1, #0 wz
15968     51 00 00 AF 
1596c     D8 E5 05 A1 |  if_e	add	objptr, ##41944
15970     F2 22 02 AB |  if_e	rdlong	local03, objptr
15974     A7 22 62 AC |  if_e	wrlong	local03, fp
15978     51 00 00 AF 
1597c     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
15980     A7 22 02 5B |  if_ne	rdlong	local03, fp
15984     51 00 00 5F 
15988     D8 E5 05 51 |  if_ne	add	objptr, ##41944
1598c     F2 22 62 5C |  if_ne	wrlong	local03, objptr
15990     51 00 00 5F 
15994     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
15998                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
15998     09 12 06 F6 | 	mov	arg01, #9
1599c     24 FF B0 FD | 	call	#__system__close
159a0     09 22 06 F6 | 	mov	local03, #9
159a4     4A 00 00 FF 
159a8     94 E4 05 F1 | 	add	objptr, ##38036
159ac     F2 12 02 FB | 	rdlong	arg01, objptr
159b0     4A 00 00 FF 
159b4     94 E4 85 F1 | 	sub	objptr, ##38036
159b8     84 01 00 FF 
159bc     AC 15 06 F6 | 	mov	arg02, ##@LR__5479
159c0     C8 AE B0 FD | 	call	#__system___string_concat
159c4     FD 12 02 F6 | 	mov	arg01, result1
159c8     A7 14 02 FB | 	rdlong	arg02, fp
159cc     BC AE B0 FD | 	call	#__system___string_concat
159d0     FD 14 02 F6 | 	mov	arg02, result1
159d4     11 13 02 F6 | 	mov	arg01, local03
159d8     0D 16 06 F6 | 	mov	arg03, #13
159dc     54 BA B0 FD | 	call	#__system___basic_open_string
159e0     4A 00 00 FF 
159e4     88 E4 05 F1 | 	add	objptr, ##38024
159e8     F2 22 02 FB | 	rdlong	local03, objptr
159ec     4A 00 00 FF 
159f0     88 E4 85 F1 | 	sub	objptr, ##38024
159f4     B0 4E 05 F1 | 	add	fp, #176
159f8     A7 22 62 FC | 	wrlong	local03, fp
159fc     B0 4E 85 F1 | 	sub	fp, #176
15a00                 | '   saveptr=programstart
15a00                 | '   do
15a00                 | LR__1824
15a00     14 4E 05 F1 | 	add	fp, #20
15a04     A7 12 02 F6 | 	mov	arg01, fp
15a08     9C 4E 05 F1 | 	add	fp, #156
15a0c     A7 14 02 FB | 	rdlong	arg02, fp
15a10     B0 4E 85 F1 | 	sub	fp, #176
15a14     18 16 06 F6 | 	mov	arg03, #24
15a18     0B 00 00 FF 
15a1c     CC E4 05 F1 | 	add	objptr, ##5836
15a20     CC A1 B0 FD | 	call	#_psram_spin2_read1
15a24     2C 4E 05 F1 | 	add	fp, #44
15a28     A7 12 02 F6 | 	mov	arg01, fp
15a2c     10 4E 85 F1 | 	sub	fp, #16
15a30     A7 14 02 FB | 	rdlong	arg02, fp
15a34     04 4E 05 F1 | 	add	fp, #4
15a38     A7 16 02 FB | 	rdlong	arg03, fp
15a3c     20 4E 85 F1 | 	sub	fp, #32
15a40     AC A1 B0 FD | 	call	#_psram_spin2_read1
15a44     0B 00 00 FF 
15a48     CC E4 85 F1 | 	sub	objptr, ##5836
15a4c     84 01 00 FF 
15a50     AE 23 06 F6 | 	mov	local03, ##@LR__5480
15a54     AC 4E 05 F1 | 	add	fp, #172
15a58     A7 22 62 FC | 	wrlong	local03, fp
15a5c                 | '     psram.read1(varptr(header(0)),saveptr,24)
15a5c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
15a5c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
15a5c     A0 4E 85 F1 | 	sub	fp, #160
15a60     A7 02 68 FC | 	wrlong	#1, fp
15a64     14 4E 05 F1 | 	add	fp, #20
15a68     A7 24 02 FB | 	rdlong	local04, fp
15a6c     20 4E 85 F1 | 	sub	fp, #32
15a70     01 24 06 F1 | 	add	local04, #1
15a74                 | LR__1825
15a74     0C 4E 05 F1 | 	add	fp, #12
15a78     A7 22 02 FB | 	rdlong	local03, fp
15a7c     0C 4E 85 F1 | 	sub	fp, #12
15a80     12 23 52 F2 | 	cmps	local03, local04 wc
15a84     54 00 90 3D |  if_ae	jmp	#LR__1826
15a88     AC 4E 05 F1 | 	add	fp, #172
15a8c     A7 1E 02 FB | 	rdlong	local01, fp
15a90     A0 4E 85 F1 | 	sub	fp, #160
15a94     A7 22 02 FB | 	rdlong	local03, fp
15a98     01 22 86 F1 | 	sub	local03, #1
15a9c     20 4E 05 F1 | 	add	fp, #32
15aa0     A7 22 02 F1 | 	add	local03, fp
15aa4     11 13 C2 FA | 	rdbyte	arg01, local03
15aa8     2C 4E 85 F1 | 	sub	fp, #44
15aac     C0 CF B0 FD | 	call	#__system__Chr_S
15ab0     FD 14 02 F6 | 	mov	arg02, result1
15ab4     0F 13 02 F6 | 	mov	arg01, local01
15ab8     D0 AD B0 FD | 	call	#__system___string_concat
15abc     AC 4E 05 F1 | 	add	fp, #172
15ac0     A7 FA 61 FC | 	wrlong	result1, fp
15ac4     A0 4E 85 F1 | 	sub	fp, #160
15ac8     A7 22 02 FB | 	rdlong	local03, fp
15acc     01 22 06 F1 | 	add	local03, #1
15ad0     A7 22 62 FC | 	wrlong	local03, fp
15ad4     0C 4E 85 F1 | 	sub	fp, #12
15ad8     98 FF 9F FD | 	jmp	#LR__1825
15adc                 | LR__1826
15adc                 | '     print #9, saveline$
15adc     09 12 06 F6 | 	mov	arg01, #9
15ae0     B0 07 B1 FD | 	call	#__system___getiolock_0541
15ae4     FD 12 02 F6 | 	mov	arg01, result1
15ae8     44 AD B0 FD | 	call	#__system___lockmem
15aec     AC 4E 05 F1 | 	add	fp, #172
15af0     A7 14 02 FB | 	rdlong	arg02, fp
15af4     AC 4E 85 F1 | 	sub	fp, #172
15af8     09 12 06 F6 | 	mov	arg01, #9
15afc     00 16 06 F6 | 	mov	arg03, #0
15b00     20 BA B0 FD | 	call	#__system___basic_print_string
15b04     09 12 06 F6 | 	mov	arg01, #9
15b08     0A 14 06 F6 | 	mov	arg02, #10
15b0c     00 16 06 F6 | 	mov	arg03, #0
15b10     B8 B9 B0 FD | 	call	#__system___basic_print_char
15b14     09 12 06 F6 | 	mov	arg01, #9
15b18     78 07 B1 FD | 	call	#__system___getiolock_0541
15b1c     FD 00 68 FC | 	wrlong	#0, result1
15b20     28 4E 05 F1 | 	add	fp, #40
15b24     A7 22 02 FB | 	rdlong	local03, fp
15b28     88 4E 05 F1 | 	add	fp, #136
15b2c     A7 22 62 FC | 	wrlong	local03, fp
15b30     88 4E 85 F1 | 	sub	fp, #136
15b34     A7 22 02 FB | 	rdlong	local03, fp
15b38     28 4E 85 F1 | 	sub	fp, #40
15b3c     FF FF 3F FF 
15b40     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
15b44     B8 FE 9F 5D |  if_ne	jmp	#LR__1824
15b48                 | '   close #9  
15b48     09 12 06 F6 | 	mov	arg01, #9
15b4c     74 FD B0 FD | 	call	#__system__close
15b50                 | '   print "Saved as ";currentdir$+"/"+loadname
15b50     00 12 06 F6 | 	mov	arg01, #0
15b54     3C 07 B1 FD | 	call	#__system___getiolock_0541
15b58     FD 12 02 F6 | 	mov	arg01, result1
15b5c     D0 AC B0 FD | 	call	#__system___lockmem
15b60     84 01 00 FF 
15b64     AF 15 06 F6 | 	mov	arg02, ##@LR__5481
15b68     00 12 06 F6 | 	mov	arg01, #0
15b6c     00 16 06 F6 | 	mov	arg03, #0
15b70     B0 B9 B0 FD | 	call	#__system___basic_print_string
15b74     00 20 06 F6 | 	mov	local02, #0
15b78     4A 00 00 FF 
15b7c     94 E4 05 F1 | 	add	objptr, ##38036
15b80     F2 12 02 FB | 	rdlong	arg01, objptr
15b84     4A 00 00 FF 
15b88     94 E4 85 F1 | 	sub	objptr, ##38036
15b8c     84 01 00 FF 
15b90     B9 15 06 F6 | 	mov	arg02, ##@LR__5482
15b94     F4 AC B0 FD | 	call	#__system___string_concat
15b98     FD 12 02 F6 | 	mov	arg01, result1
15b9c     51 00 00 FF 
15ba0     D8 E5 05 F1 | 	add	objptr, ##41944
15ba4     F2 14 02 FB | 	rdlong	arg02, objptr
15ba8     51 00 00 FF 
15bac     D8 E5 85 F1 | 	sub	objptr, ##41944
15bb0     D8 AC B0 FD | 	call	#__system___string_concat
15bb4     FD 14 02 F6 | 	mov	arg02, result1
15bb8     10 13 02 F6 | 	mov	arg01, local02
15bbc     00 16 06 F6 | 	mov	arg03, #0
15bc0     60 B9 B0 FD | 	call	#__system___basic_print_string
15bc4     00 12 06 F6 | 	mov	arg01, #0
15bc8     0A 14 06 F6 | 	mov	arg02, #10
15bcc     00 16 06 F6 | 	mov	arg03, #0
15bd0     F8 B8 B0 FD | 	call	#__system___basic_print_char
15bd4     00 12 06 F6 | 	mov	arg01, #0
15bd8     B8 06 B1 FD | 	call	#__system___getiolock_0541
15bdc     FD 00 68 FC | 	wrlong	#0, result1
15be0                 | LR__1827
15be0                 | LR__1828
15be0     A7 F0 03 F6 | 	mov	ptra, fp
15be4     B2 00 A0 FD | 	call	#popregs_
15be8                 | _do_save_ret
15be8     2D 00 64 FD | 	ret
15bec                 | 
15bec                 | ' 
15bec                 | ' ' ------------------ setdelay
15bec                 | ' 
15bec                 | ' sub do_setdelay
15bec                 | _do_setdelay
15bec     02 4A 05 F6 | 	mov	COUNT_, #2
15bf0     A8 00 A0 FD | 	call	#pushregs_
15bf4     18 F0 07 F1 | 	add	ptra, #24
15bf8     A0 57 BF FD | 	call	#_pop
15bfc     FD 12 02 F6 | 	mov	arg01, result1
15c00     FE 1E 02 F6 | 	mov	local01, result2
15c04     FF 20 02 F6 | 	mov	local02, result3
15c08     A7 12 62 FC | 	wrlong	arg01, fp
15c0c     04 4E 05 F1 | 	add	fp, #4
15c10     A7 1E 62 FC | 	wrlong	local01, fp
15c14     04 4E 05 F1 | 	add	fp, #4
15c18     A7 20 62 FC | 	wrlong	local02, fp
15c1c     08 4E 85 F1 | 	sub	fp, #8
15c20     78 57 BF FD | 	call	#_pop
15c24     FD 20 02 F6 | 	mov	local02, result1
15c28     0C 4E 05 F1 | 	add	fp, #12
15c2c     A7 20 62 FC | 	wrlong	local02, fp
15c30     04 4E 05 F1 | 	add	fp, #4
15c34     A7 FC 61 FC | 	wrlong	result2, fp
15c38     04 4E 05 F1 | 	add	fp, #4
15c3c     A7 FE 61 FC | 	wrlong	result3, fp
15c40     08 4E 85 F1 | 	sub	fp, #8
15c44     A7 12 02 F6 | 	mov	arg01, fp
15c48     0C 4E 85 F1 | 	sub	fp, #12
15c4c     30 59 BF FD | 	call	#_converttoint
15c50     FD 20 02 F6 | 	mov	local02, result1
15c54     10 1F 02 F6 | 	mov	local01, local02
15c58     01 1E 66 F0 | 	shl	local01, #1
15c5c     10 1F 02 F1 | 	add	local01, local02
15c60     03 1E 66 F0 | 	shl	local01, #3
15c64     14 00 00 FF 
15c68     38 E5 05 F1 | 	add	objptr, ##10552
15c6c     F2 1E 02 F1 | 	add	local01, objptr
15c70     A7 12 02 F6 | 	mov	arg01, fp
15c74     14 00 00 FF 
15c78     38 E5 85 F1 | 	sub	objptr, ##10552
15c7c     00 59 BF FD | 	call	#_converttoint
15c80     06 1E 06 F1 | 	add	local01, #6
15c84     0F FB 51 FC | 	wrword	result1, local01
15c88     A7 F0 03 F6 | 	mov	ptra, fp
15c8c     B2 00 A0 FD | 	call	#popregs_
15c90                 | _do_setdelay_ret
15c90     2D 00 64 FD | 	ret
15c94                 | 
15c94                 | ' 
15c94                 | ' ' ------------------ setenv
15c94                 | ' 
15c94                 | ' sub do_setenv
15c94                 | _do_setenv
15c94     02 4A 05 F6 | 	mov	COUNT_, #2
15c98     A8 00 A0 FD | 	call	#pushregs_
15c9c     18 F0 07 F1 | 	add	ptra, #24
15ca0     F8 56 BF FD | 	call	#_pop
15ca4     FD 12 02 F6 | 	mov	arg01, result1
15ca8     FE 1E 02 F6 | 	mov	local01, result2
15cac     FF 20 02 F6 | 	mov	local02, result3
15cb0     A7 12 62 FC | 	wrlong	arg01, fp
15cb4     04 4E 05 F1 | 	add	fp, #4
15cb8     A7 1E 62 FC | 	wrlong	local01, fp
15cbc     04 4E 05 F1 | 	add	fp, #4
15cc0     A7 20 62 FC | 	wrlong	local02, fp
15cc4     08 4E 85 F1 | 	sub	fp, #8
15cc8     D0 56 BF FD | 	call	#_pop
15ccc     FD 20 02 F6 | 	mov	local02, result1
15cd0     0C 4E 05 F1 | 	add	fp, #12
15cd4     A7 20 62 FC | 	wrlong	local02, fp
15cd8     04 4E 05 F1 | 	add	fp, #4
15cdc     A7 FC 61 FC | 	wrlong	result2, fp
15ce0     04 4E 05 F1 | 	add	fp, #4
15ce4     A7 FE 61 FC | 	wrlong	result3, fp
15ce8     08 4E 85 F1 | 	sub	fp, #8
15cec     A7 12 02 F6 | 	mov	arg01, fp
15cf0     0C 4E 85 F1 | 	sub	fp, #12
15cf4     88 58 BF FD | 	call	#_converttoint
15cf8     FD 20 02 F6 | 	mov	local02, result1
15cfc     10 1F 02 F6 | 	mov	local01, local02
15d00     01 1E 66 F0 | 	shl	local01, #1
15d04     10 1F 02 F1 | 	add	local01, local02
15d08     03 1E 66 F0 | 	shl	local01, #3
15d0c     14 00 00 FF 
15d10     38 E5 05 F1 | 	add	objptr, ##10552
15d14     F2 1E 02 F1 | 	add	local01, objptr
15d18     A7 12 02 F6 | 	mov	arg01, fp
15d1c     14 00 00 FF 
15d20     38 E5 85 F1 | 	sub	objptr, ##10552
15d24     58 58 BF FD | 	call	#_converttoint
15d28     05 1E 06 F1 | 	add	local01, #5
15d2c     0F FB 41 FC | 	wrbyte	result1, local01
15d30     A7 F0 03 F6 | 	mov	ptra, fp
15d34     B2 00 A0 FD | 	call	#popregs_
15d38                 | _do_setenv_ret
15d38     2D 00 64 FD | 	ret
15d3c                 | 
15d3c                 | ' 
15d3c                 | ' ' ------------------ setlen
15d3c                 | ' 
15d3c                 | ' sub do_setlen
15d3c                 | _do_setlen
15d3c     02 4A 05 F6 | 	mov	COUNT_, #2
15d40     A8 00 A0 FD | 	call	#pushregs_
15d44     18 F0 07 F1 | 	add	ptra, #24
15d48     50 56 BF FD | 	call	#_pop
15d4c     FD 12 02 F6 | 	mov	arg01, result1
15d50     FE 1E 02 F6 | 	mov	local01, result2
15d54     FF 20 02 F6 | 	mov	local02, result3
15d58     A7 12 62 FC | 	wrlong	arg01, fp
15d5c     04 4E 05 F1 | 	add	fp, #4
15d60     A7 1E 62 FC | 	wrlong	local01, fp
15d64     04 4E 05 F1 | 	add	fp, #4
15d68     A7 20 62 FC | 	wrlong	local02, fp
15d6c     08 4E 85 F1 | 	sub	fp, #8
15d70     28 56 BF FD | 	call	#_pop
15d74     FD 20 02 F6 | 	mov	local02, result1
15d78     0C 4E 05 F1 | 	add	fp, #12
15d7c     A7 20 62 FC | 	wrlong	local02, fp
15d80     04 4E 05 F1 | 	add	fp, #4
15d84     A7 FC 61 FC | 	wrlong	result2, fp
15d88     04 4E 05 F1 | 	add	fp, #4
15d8c     A7 FE 61 FC | 	wrlong	result3, fp
15d90     08 4E 85 F1 | 	sub	fp, #8
15d94     A7 12 02 F6 | 	mov	arg01, fp
15d98     0C 4E 85 F1 | 	sub	fp, #12
15d9c     E0 57 BF FD | 	call	#_converttoint
15da0     FD 20 02 F6 | 	mov	local02, result1
15da4     10 1F 02 F6 | 	mov	local01, local02
15da8     01 1E 66 F0 | 	shl	local01, #1
15dac     10 1F 02 F1 | 	add	local01, local02
15db0     03 1E 66 F0 | 	shl	local01, #3
15db4     14 00 00 FF 
15db8     38 E5 05 F1 | 	add	objptr, ##10552
15dbc     F2 1E 02 F1 | 	add	local01, objptr
15dc0     A7 12 02 F6 | 	mov	arg01, fp
15dc4     14 00 00 FF 
15dc8     38 E5 85 F1 | 	sub	objptr, ##10552
15dcc     6C 58 BF FD | 	call	#_converttofloat
15dd0     08 1E 06 F1 | 	add	local01, #8
15dd4     0F FB 61 FC | 	wrlong	result1, local01
15dd8     A7 F0 03 F6 | 	mov	ptra, fp
15ddc     B2 00 A0 FD | 	call	#popregs_
15de0                 | _do_setlen_ret
15de0     2D 00 64 FD | 	ret
15de4                 | 
15de4                 | ' 
15de4                 | ' ' ------------------ setpan
15de4                 | ' 
15de4                 | ' sub do_setpan
15de4                 | _do_setpan
15de4     02 4A 05 F6 | 	mov	COUNT_, #2
15de8     A8 00 A0 FD | 	call	#pushregs_
15dec     18 F0 07 F1 | 	add	ptra, #24
15df0     A8 55 BF FD | 	call	#_pop
15df4     FD 12 02 F6 | 	mov	arg01, result1
15df8     FE 1E 02 F6 | 	mov	local01, result2
15dfc     FF 20 02 F6 | 	mov	local02, result3
15e00     A7 12 62 FC | 	wrlong	arg01, fp
15e04     04 4E 05 F1 | 	add	fp, #4
15e08     A7 1E 62 FC | 	wrlong	local01, fp
15e0c     04 4E 05 F1 | 	add	fp, #4
15e10     A7 20 62 FC | 	wrlong	local02, fp
15e14     08 4E 85 F1 | 	sub	fp, #8
15e18     80 55 BF FD | 	call	#_pop
15e1c     FD 20 02 F6 | 	mov	local02, result1
15e20     0C 4E 05 F1 | 	add	fp, #12
15e24     A7 20 62 FC | 	wrlong	local02, fp
15e28     04 4E 05 F1 | 	add	fp, #4
15e2c     A7 FC 61 FC | 	wrlong	result2, fp
15e30     04 4E 05 F1 | 	add	fp, #4
15e34     A7 FE 61 FC | 	wrlong	result3, fp
15e38     08 4E 85 F1 | 	sub	fp, #8
15e3c     A7 12 02 F6 | 	mov	arg01, fp
15e40     0C 4E 85 F1 | 	sub	fp, #12
15e44     38 57 BF FD | 	call	#_converttoint
15e48     FD 20 02 F6 | 	mov	local02, result1
15e4c     10 1F 02 F6 | 	mov	local01, local02
15e50     01 1E 66 F0 | 	shl	local01, #1
15e54     10 1F 02 F1 | 	add	local01, local02
15e58     03 1E 66 F0 | 	shl	local01, #3
15e5c     14 00 00 FF 
15e60     38 E5 05 F1 | 	add	objptr, ##10552
15e64     F2 1E 02 F1 | 	add	local01, objptr
15e68     A7 12 02 F6 | 	mov	arg01, fp
15e6c     14 00 00 FF 
15e70     38 E5 85 F1 | 	sub	objptr, ##10552
15e74     C4 57 BF FD | 	call	#_converttofloat
15e78     10 1E 06 F1 | 	add	local01, #16
15e7c     0F FB 61 FC | 	wrlong	result1, local01
15e80     A7 F0 03 F6 | 	mov	ptra, fp
15e84     B2 00 A0 FD | 	call	#popregs_
15e88                 | _do_setpan_ret
15e88     2D 00 64 FD | 	ret
15e8c                 | 
15e8c                 | ' 
15e8c                 | ' ' ------------------ setsustain
15e8c                 | ' 
15e8c                 | ' sub do_setsustain
15e8c                 | _do_setsustain
15e8c     02 4A 05 F6 | 	mov	COUNT_, #2
15e90     A8 00 A0 FD | 	call	#pushregs_
15e94     18 F0 07 F1 | 	add	ptra, #24
15e98     00 55 BF FD | 	call	#_pop
15e9c     FD 12 02 F6 | 	mov	arg01, result1
15ea0     FE 1E 02 F6 | 	mov	local01, result2
15ea4     FF 20 02 F6 | 	mov	local02, result3
15ea8     A7 12 62 FC | 	wrlong	arg01, fp
15eac     04 4E 05 F1 | 	add	fp, #4
15eb0     A7 1E 62 FC | 	wrlong	local01, fp
15eb4     04 4E 05 F1 | 	add	fp, #4
15eb8     A7 20 62 FC | 	wrlong	local02, fp
15ebc     08 4E 85 F1 | 	sub	fp, #8
15ec0     D8 54 BF FD | 	call	#_pop
15ec4     FD 20 02 F6 | 	mov	local02, result1
15ec8     0C 4E 05 F1 | 	add	fp, #12
15ecc     A7 20 62 FC | 	wrlong	local02, fp
15ed0     04 4E 05 F1 | 	add	fp, #4
15ed4     A7 FC 61 FC | 	wrlong	result2, fp
15ed8     04 4E 05 F1 | 	add	fp, #4
15edc     A7 FE 61 FC | 	wrlong	result3, fp
15ee0     08 4E 85 F1 | 	sub	fp, #8
15ee4     A7 12 02 F6 | 	mov	arg01, fp
15ee8     0C 4E 85 F1 | 	sub	fp, #12
15eec     90 56 BF FD | 	call	#_converttoint
15ef0     FD 20 02 F6 | 	mov	local02, result1
15ef4     10 1F 02 F6 | 	mov	local01, local02
15ef8     01 1E 66 F0 | 	shl	local01, #1
15efc     10 1F 02 F1 | 	add	local01, local02
15f00     03 1E 66 F0 | 	shl	local01, #3
15f04     14 00 00 FF 
15f08     38 E5 05 F1 | 	add	objptr, ##10552
15f0c     F2 1E 02 F1 | 	add	local01, objptr
15f10     A7 12 02 F6 | 	mov	arg01, fp
15f14     14 00 00 FF 
15f18     38 E5 85 F1 | 	sub	objptr, ##10552
15f1c     60 56 BF FD | 	call	#_converttoint
15f20     14 1E 06 F1 | 	add	local01, #20
15f24     0F FB 51 FC | 	wrword	result1, local01
15f28     A7 F0 03 F6 | 	mov	ptra, fp
15f2c     B2 00 A0 FD | 	call	#popregs_
15f30                 | _do_setsustain_ret
15f30     2D 00 64 FD | 	ret
15f34                 | 
15f34                 | ' 
15f34                 | ' ' ------------------ setvol
15f34                 | ' 
15f34                 | ' sub do_setvol
15f34                 | _do_setvol
15f34     02 4A 05 F6 | 	mov	COUNT_, #2
15f38     A8 00 A0 FD | 	call	#pushregs_
15f3c     18 F0 07 F1 | 	add	ptra, #24
15f40     58 54 BF FD | 	call	#_pop
15f44     FD 12 02 F6 | 	mov	arg01, result1
15f48     FE 1E 02 F6 | 	mov	local01, result2
15f4c     FF 20 02 F6 | 	mov	local02, result3
15f50     A7 12 62 FC | 	wrlong	arg01, fp
15f54     04 4E 05 F1 | 	add	fp, #4
15f58     A7 1E 62 FC | 	wrlong	local01, fp
15f5c     04 4E 05 F1 | 	add	fp, #4
15f60     A7 20 62 FC | 	wrlong	local02, fp
15f64     08 4E 85 F1 | 	sub	fp, #8
15f68     30 54 BF FD | 	call	#_pop
15f6c     FD 20 02 F6 | 	mov	local02, result1
15f70     0C 4E 05 F1 | 	add	fp, #12
15f74     A7 20 62 FC | 	wrlong	local02, fp
15f78     04 4E 05 F1 | 	add	fp, #4
15f7c     A7 FC 61 FC | 	wrlong	result2, fp
15f80     04 4E 05 F1 | 	add	fp, #4
15f84     A7 FE 61 FC | 	wrlong	result3, fp
15f88     08 4E 85 F1 | 	sub	fp, #8
15f8c     A7 12 02 F6 | 	mov	arg01, fp
15f90     0C 4E 85 F1 | 	sub	fp, #12
15f94     E8 55 BF FD | 	call	#_converttoint
15f98     FD 20 02 F6 | 	mov	local02, result1
15f9c     10 1F 02 F6 | 	mov	local01, local02
15fa0     01 1E 66 F0 | 	shl	local01, #1
15fa4     10 1F 02 F1 | 	add	local01, local02
15fa8     03 1E 66 F0 | 	shl	local01, #3
15fac     14 00 00 FF 
15fb0     38 E5 05 F1 | 	add	objptr, ##10552
15fb4     F2 1E 02 F1 | 	add	local01, objptr
15fb8     A7 12 02 F6 | 	mov	arg01, fp
15fbc     14 00 00 FF 
15fc0     38 E5 85 F1 | 	sub	objptr, ##10552
15fc4     74 56 BF FD | 	call	#_converttofloat
15fc8     0C 1E 06 F1 | 	add	local01, #12
15fcc     0F FB 61 FC | 	wrlong	result1, local01
15fd0     A7 F0 03 F6 | 	mov	ptra, fp
15fd4     B2 00 A0 FD | 	call	#popregs_
15fd8                 | _do_setvol_ret
15fd8     2D 00 64 FD | 	ret
15fdc                 | 
15fdc                 | ' 
15fdc                 | ' ' ------------------ setwave
15fdc                 | ' 
15fdc                 | ' sub do_setwave
15fdc                 | _do_setwave
15fdc     02 4A 05 F6 | 	mov	COUNT_, #2
15fe0     A8 00 A0 FD | 	call	#pushregs_
15fe4     18 F0 07 F1 | 	add	ptra, #24
15fe8     B0 53 BF FD | 	call	#_pop
15fec     FD 12 02 F6 | 	mov	arg01, result1
15ff0     FE 1E 02 F6 | 	mov	local01, result2
15ff4     FF 20 02 F6 | 	mov	local02, result3
15ff8     A7 12 62 FC | 	wrlong	arg01, fp
15ffc     04 4E 05 F1 | 	add	fp, #4
16000     A7 1E 62 FC | 	wrlong	local01, fp
16004     04 4E 05 F1 | 	add	fp, #4
16008     A7 20 62 FC | 	wrlong	local02, fp
1600c     08 4E 85 F1 | 	sub	fp, #8
16010     88 53 BF FD | 	call	#_pop
16014     FD 20 02 F6 | 	mov	local02, result1
16018     0C 4E 05 F1 | 	add	fp, #12
1601c     A7 20 62 FC | 	wrlong	local02, fp
16020     04 4E 05 F1 | 	add	fp, #4
16024     A7 FC 61 FC | 	wrlong	result2, fp
16028     04 4E 05 F1 | 	add	fp, #4
1602c     A7 FE 61 FC | 	wrlong	result3, fp
16030     08 4E 85 F1 | 	sub	fp, #8
16034     A7 12 02 F6 | 	mov	arg01, fp
16038     0C 4E 85 F1 | 	sub	fp, #12
1603c     40 55 BF FD | 	call	#_converttoint
16040     FD 20 02 F6 | 	mov	local02, result1
16044     10 1F 02 F6 | 	mov	local01, local02
16048     01 1E 66 F0 | 	shl	local01, #1
1604c     10 1F 02 F1 | 	add	local01, local02
16050     03 1E 66 F0 | 	shl	local01, #3
16054     14 00 00 FF 
16058     38 E5 05 F1 | 	add	objptr, ##10552
1605c     F2 1E 02 F1 | 	add	local01, objptr
16060     A7 12 02 F6 | 	mov	arg01, fp
16064     14 00 00 FF 
16068     38 E5 85 F1 | 	sub	objptr, ##10552
1606c     10 55 BF FD | 	call	#_converttoint
16070     04 1E 06 F1 | 	add	local01, #4
16074     0F FB 41 FC | 	wrbyte	result1, local01
16078     A7 F0 03 F6 | 	mov	ptra, fp
1607c     B2 00 A0 FD | 	call	#popregs_
16080                 | _do_setwave_ret
16080     2D 00 64 FD | 	ret
16084                 | 
16084                 | ' 
16084                 | ' ' ------------------ shutup
16084                 | ' 
16084                 | ' sub do_shutup
16084                 | _do_shutup
16084     03 4A 05 F6 | 	mov	COUNT_, #3
16088     A8 00 A0 FD | 	call	#pushregs_
1608c     18 F0 07 F1 | 	add	ptra, #24
16090     4A 00 00 FF 
16094     80 E4 05 F1 | 	add	objptr, ##38016
16098     F2 1E 02 FB | 	rdlong	local01, objptr
1609c     0F 21 02 F6 | 	mov	local02, local01
160a0     01 20 66 F0 | 	shl	local02, #1
160a4     0F 21 02 F1 | 	add	local02, local01
160a8     02 20 66 F0 | 	shl	local02, #2
160ac     03 00 00 FF 
160b0     04 E4 85 F1 | 	sub	objptr, ##1540
160b4     F2 20 02 F1 | 	add	local02, objptr
160b8     10 23 0A FB | 	rdlong	local03, local02 wz
160bc     14 4E 05 F1 | 	add	fp, #20
160c0     A7 22 62 FC | 	wrlong	local03, fp
160c4                 | ' 
160c4                 | ' numpar=compiledline(lineptr_e).result.uresult
160c4                 | ' if numpar=0 then
160c4     14 4E 85 F1 | 	sub	fp, #20
160c8     47 00 00 FF 
160cc     7C E4 85 F1 | 	sub	objptr, ##36476
160d0     50 00 90 5D |  if_ne	jmp	#LR__1832
160d4                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
160d4     10 4E 05 F1 | 	add	fp, #16
160d8     A7 00 68 FC | 	wrlong	#0, fp
160dc     37 00 00 FF 
160e0     10 E4 05 F1 | 	add	objptr, ##28176
160e4     97 16 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
160e8                 | LR__1830
160e8     F2 12 02 FB | 	rdlong	arg01, objptr
160ec     A7 22 02 FB | 	rdlong	local03, fp
160f0     06 22 66 F0 | 	shl	local03, #6
160f4     11 13 02 F1 | 	add	arg01, local03
160f8     14 12 06 F1 | 	add	arg01, #20
160fc     09 01 58 FC | 	wrword	#0, arg01
16100     A7 22 02 FB | 	rdlong	local03, fp
16104     01 22 06 F1 | 	add	local03, #1
16108     A7 22 62 FC | 	wrlong	local03, fp
1610c     08 22 56 F2 | 	cmps	local03, #8 wc
16110     D4 FF 9F CD |  if_b	jmp	#LR__1830
16114                 | LR__1831
16114     37 00 00 FF 
16118     10 E4 85 F1 | 	sub	objptr, ##28176
1611c     10 4E 85 F1 | 	sub	fp, #16
16120     64 00 90 FD | 	jmp	#LR__1833
16124                 | LR__1832
16124     74 52 BF FD | 	call	#_pop
16128     FF 1E 02 F6 | 	mov	local01, result3
1612c     A7 FA 61 FC | 	wrlong	result1, fp
16130     04 4E 05 F1 | 	add	fp, #4
16134     A7 FC 61 FC | 	wrlong	result2, fp
16138     04 4E 05 F1 | 	add	fp, #4
1613c     A7 1E 62 FC | 	wrlong	local01, fp
16140     08 4E 85 F1 | 	sub	fp, #8
16144     A7 12 02 F6 | 	mov	arg01, fp
16148     34 54 BF FD | 	call	#_converttoint
1614c     FD 22 52 F6 | 	abs	local03, result1 wc
16150     07 22 06 F5 | 	and	local03, #7
16154     11 21 82 F6 | 	negc	local02, local03
16158     0C 4E 05 F1 | 	add	fp, #12
1615c     A7 20 62 FC | 	wrlong	local02, fp
16160     37 00 00 FF 
16164     10 E4 05 F1 | 	add	objptr, ##28176
16168     F2 12 02 FB | 	rdlong	arg01, objptr
1616c     37 00 00 FF 
16170     10 E4 85 F1 | 	sub	objptr, ##28176
16174     0C 4E 85 F1 | 	sub	fp, #12
16178     06 20 66 F0 | 	shl	local02, #6
1617c     10 13 02 F1 | 	add	arg01, local02
16180     14 12 06 F1 | 	add	arg01, #20
16184     09 01 58 FC | 	wrword	#0, arg01
16188                 | LR__1833
16188     A7 F0 03 F6 | 	mov	ptra, fp
1618c     B2 00 A0 FD | 	call	#popregs_
16190                 | _do_shutup_ret
16190     2D 00 64 FD | 	ret
16194                 | 
16194                 | ' 
16194                 | ' ' ------------------ sin
16194                 | ' 
16194                 | ' sub do_sin
16194                 | _do_sin
16194     01 4A 05 F6 | 	mov	COUNT_, #1
16198     A8 00 A0 FD | 	call	#pushregs_
1619c     10 F0 07 F1 | 	add	ptra, #16
161a0     4A 00 00 FF 
161a4     80 E4 05 F1 | 	add	objptr, ##38016
161a8     F2 1E 02 FB | 	rdlong	local01, objptr
161ac     0F 17 02 F6 | 	mov	arg03, local01
161b0     01 16 66 F0 | 	shl	arg03, #1
161b4     0F 17 02 F1 | 	add	arg03, local01
161b8     02 16 66 F0 | 	shl	arg03, #2
161bc     03 00 00 FF 
161c0     04 E4 85 F1 | 	sub	objptr, ##1540
161c4     F2 16 02 F1 | 	add	arg03, objptr
161c8     0B 17 02 FB | 	rdlong	arg03, arg03
161cc     0C 4E 05 F1 | 	add	fp, #12
161d0     A7 16 62 FC | 	wrlong	arg03, fp
161d4                 | ' 
161d4                 | ' numpar=compiledline(lineptr_e).result.uresult
161d4                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
161d4     0C 4E 85 F1 | 	sub	fp, #12
161d8     02 16 16 F2 | 	cmp	arg03, #2 wc
161dc     47 00 00 FF 
161e0     7C E4 85 F1 | 	sub	objptr, ##36476
161e4     0C 4E 05 C1 |  if_b	add	fp, #12
161e8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
161ec     0C 4E 85 C1 |  if_b	sub	fp, #12
161f0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1840
161f4     00 12 06 F6 | 	mov	arg01, #0
161f8     98 00 B1 FD | 	call	#__system___getiolock_0541
161fc     FD 12 02 F6 | 	mov	arg01, result1
16200     2C A6 B0 FD | 	call	#__system___lockmem
16204     84 01 00 FF 
16208     BB 15 06 F6 | 	mov	arg02, ##@LR__5483
1620c     00 12 06 F6 | 	mov	arg01, #0
16210     00 16 06 F6 | 	mov	arg03, #0
16214     0C B3 B0 FD | 	call	#__system___basic_print_string
16218     00 12 06 F6 | 	mov	arg01, #0
1621c     74 00 B1 FD | 	call	#__system___getiolock_0541
16220     FD 00 68 FC | 	wrlong	#0, result1
16224     27 12 06 F6 | 	mov	arg01, #39
16228     74 70 B0 FD | 	call	#_printerror
1622c     64 00 90 FD | 	jmp	#LR__1841
16230                 | LR__1840
16230     68 51 BF FD | 	call	#_pop
16234     A7 FA 61 FC | 	wrlong	result1, fp
16238     04 4E 05 F1 | 	add	fp, #4
1623c     A7 FC 61 FC | 	wrlong	result2, fp
16240     04 4E 05 F1 | 	add	fp, #4
16244     A7 FE 61 FC | 	wrlong	result3, fp
16248     08 4E 85 F1 | 	sub	fp, #8
1624c     51 00 00 FF 
16250     BC E5 05 F1 | 	add	objptr, ##41916
16254     F2 1E 02 FB | 	rdlong	local01, objptr
16258     51 00 00 FF 
1625c     BC E5 85 F1 | 	sub	objptr, ##41916
16260     A7 12 02 F6 | 	mov	arg01, fp
16264     D4 53 BF FD | 	call	#_converttofloat
16268     FD 14 02 F6 | 	mov	arg02, result1
1626c     0F 13 02 F6 | 	mov	arg01, local01
16270     70 D1 B0 FD | 	call	#__system___float_mul
16274     FD 12 02 F6 | 	mov	arg01, result1
16278     C8 DA B0 FD | 	call	#__system____builtin_sinf
1627c     A7 FA 61 FC | 	wrlong	result1, fp
16280     08 4E 05 F1 | 	add	fp, #8
16284     A7 3C 68 FC | 	wrlong	#30, fp
16288     08 4E 85 F1 | 	sub	fp, #8
1628c     A7 12 02 F6 | 	mov	arg01, fp
16290     A0 51 BF FD | 	call	#_push
16294                 | LR__1841
16294     A7 F0 03 F6 | 	mov	ptra, fp
16298     B2 00 A0 FD | 	call	#popregs_
1629c                 | _do_sin_ret
1629c     2D 00 64 FD | 	ret
162a0                 | 
162a0                 | ' 
162a0                 | ' ' ------------------ sprite
162a0                 | ' 
162a0                 | ' sub do_sprite
162a0                 | _do_sprite
162a0     00 4A 05 F6 | 	mov	COUNT_, #0
162a4     A8 00 A0 FD | 	call	#pushregs_
162a8     30 F0 07 F1 | 	add	ptra, #48
162ac     EC 50 BF FD | 	call	#_pop
162b0     FD 16 02 F6 | 	mov	arg03, result1
162b4     FE 14 02 F6 | 	mov	arg02, result2
162b8     FF 12 02 F6 | 	mov	arg01, result3
162bc     18 4E 05 F1 | 	add	fp, #24
162c0     A7 16 62 FC | 	wrlong	arg03, fp
162c4     04 4E 05 F1 | 	add	fp, #4
162c8     A7 14 62 FC | 	wrlong	arg02, fp
162cc     04 4E 05 F1 | 	add	fp, #4
162d0     A7 12 62 FC | 	wrlong	arg01, fp
162d4     20 4E 85 F1 | 	sub	fp, #32
162d8     C0 50 BF FD | 	call	#_pop
162dc     FD 16 02 F6 | 	mov	arg03, result1
162e0     FE 14 02 F6 | 	mov	arg02, result2
162e4     FF 12 02 F6 | 	mov	arg01, result3
162e8     0C 4E 05 F1 | 	add	fp, #12
162ec     A7 16 62 FC | 	wrlong	arg03, fp
162f0     04 4E 05 F1 | 	add	fp, #4
162f4     A7 14 62 FC | 	wrlong	arg02, fp
162f8     04 4E 05 F1 | 	add	fp, #4
162fc     A7 12 62 FC | 	wrlong	arg01, fp
16300     14 4E 85 F1 | 	sub	fp, #20
16304     94 50 BF FD | 	call	#_pop
16308     FF 16 02 F6 | 	mov	arg03, result3
1630c     A7 FA 61 FC | 	wrlong	result1, fp
16310     04 4E 05 F1 | 	add	fp, #4
16314     A7 FC 61 FC | 	wrlong	result2, fp
16318     04 4E 05 F1 | 	add	fp, #4
1631c     A7 16 62 FC | 	wrlong	arg03, fp
16320     08 4E 85 F1 | 	sub	fp, #8
16324     A7 12 02 F6 | 	mov	arg01, fp
16328     54 52 BF FD | 	call	#_converttoint
1632c     24 4E 05 F1 | 	add	fp, #36
16330     A7 FA 61 FC | 	wrlong	result1, fp
16334     18 4E 85 F1 | 	sub	fp, #24
16338     A7 12 02 F6 | 	mov	arg01, fp
1633c     0C 4E 85 F1 | 	sub	fp, #12
16340     3C 52 BF FD | 	call	#_converttoint
16344     28 4E 05 F1 | 	add	fp, #40
16348     A7 FA 61 FC | 	wrlong	result1, fp
1634c     10 4E 85 F1 | 	sub	fp, #16
16350     A7 12 02 F6 | 	mov	arg01, fp
16354     18 4E 85 F1 | 	sub	fp, #24
16358     24 52 BF FD | 	call	#_converttoint
1635c     2C 4E 05 F1 | 	add	fp, #44
16360     A7 FA 61 FC | 	wrlong	result1, fp
16364     08 4E 85 F1 | 	sub	fp, #8
16368     A7 12 02 FB | 	rdlong	arg01, fp
1636c     04 4E 05 F1 | 	add	fp, #4
16370     A7 14 02 FB | 	rdlong	arg02, fp
16374     FD 16 02 F6 | 	mov	arg03, result1
16378     28 4E 85 F1 | 	sub	fp, #40
1637c     4C 7E B0 FD | 	call	#_hg010b_spin2_setspritepos
16380     A7 F0 03 F6 | 	mov	ptra, fp
16384     B2 00 A0 FD | 	call	#popregs_
16388                 | _do_sprite_ret
16388     2D 00 64 FD | 	ret
1638c                 | 
1638c                 | ' 
1638c                 | ' ' ------------------ sqr
1638c                 | ' 
1638c                 | ' sub do_sqr
1638c                 | _do_sqr
1638c     01 4A 05 F6 | 	mov	COUNT_, #1
16390     A8 00 A0 FD | 	call	#pushregs_
16394     10 F0 07 F1 | 	add	ptra, #16
16398     4A 00 00 FF 
1639c     80 E4 05 F1 | 	add	objptr, ##38016
163a0     F2 1E 02 FB | 	rdlong	local01, objptr
163a4     0F 17 02 F6 | 	mov	arg03, local01
163a8     01 16 66 F0 | 	shl	arg03, #1
163ac     0F 17 02 F1 | 	add	arg03, local01
163b0     02 16 66 F0 | 	shl	arg03, #2
163b4     03 00 00 FF 
163b8     04 E4 85 F1 | 	sub	objptr, ##1540
163bc     F2 16 02 F1 | 	add	arg03, objptr
163c0     0B 17 02 FB | 	rdlong	arg03, arg03
163c4     0C 4E 05 F1 | 	add	fp, #12
163c8     A7 16 62 FC | 	wrlong	arg03, fp
163cc                 | ' 
163cc                 | ' numpar=compiledline(lineptr_e).result.uresult
163cc                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
163cc     0C 4E 85 F1 | 	sub	fp, #12
163d0     02 16 16 F2 | 	cmp	arg03, #2 wc
163d4     47 00 00 FF 
163d8     7C E4 85 F1 | 	sub	objptr, ##36476
163dc     0C 4E 05 C1 |  if_b	add	fp, #12
163e0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
163e4     0C 4E 85 C1 |  if_b	sub	fp, #12
163e8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1850
163ec     00 12 06 F6 | 	mov	arg01, #0
163f0     A0 FE B0 FD | 	call	#__system___getiolock_0541
163f4     FD 12 02 F6 | 	mov	arg01, result1
163f8     34 A4 B0 FD | 	call	#__system___lockmem
163fc     84 01 00 FF 
16400     C1 15 06 F6 | 	mov	arg02, ##@LR__5484
16404     00 12 06 F6 | 	mov	arg01, #0
16408     00 16 06 F6 | 	mov	arg03, #0
1640c     14 B1 B0 FD | 	call	#__system___basic_print_string
16410     00 12 06 F6 | 	mov	arg01, #0
16414     7C FE B0 FD | 	call	#__system___getiolock_0541
16418     FD 00 68 FC | 	wrlong	#0, result1
1641c     27 12 06 F6 | 	mov	arg01, #39
16420     7C 6E B0 FD | 	call	#_printerror
16424     48 00 90 FD | 	jmp	#LR__1851
16428                 | LR__1850
16428     70 4F BF FD | 	call	#_pop
1642c     FF 1E 02 F6 | 	mov	local01, result3
16430     A7 FA 61 FC | 	wrlong	result1, fp
16434     04 4E 05 F1 | 	add	fp, #4
16438     A7 FC 61 FC | 	wrlong	result2, fp
1643c     04 4E 05 F1 | 	add	fp, #4
16440     A7 1E 62 FC | 	wrlong	local01, fp
16444     08 4E 85 F1 | 	sub	fp, #8
16448     A7 12 02 F6 | 	mov	arg01, fp
1644c     EC 51 BF FD | 	call	#_converttofloat
16450     FD 12 02 F6 | 	mov	arg01, result1
16454     B4 CE B0 FD | 	call	#__system___float_sqrt
16458     A7 FA 61 FC | 	wrlong	result1, fp
1645c     08 4E 05 F1 | 	add	fp, #8
16460     A7 3C 68 FC | 	wrlong	#30, fp
16464     08 4E 85 F1 | 	sub	fp, #8
16468     A7 12 02 F6 | 	mov	arg01, fp
1646c     C4 4F BF FD | 	call	#_push
16470                 | LR__1851
16470     A7 F0 03 F6 | 	mov	ptra, fp
16474     B2 00 A0 FD | 	call	#popregs_
16478                 | _do_sqr_ret
16478     2D 00 64 FD | 	ret
1647c                 | 
1647c                 | ' 
1647c                 | ' ' ------------------ stick
1647c                 | ' 
1647c                 | ' sub do_stick
1647c                 | _do_stick
1647c     01 4A 05 F6 | 	mov	COUNT_, #1
16480     A8 00 A0 FD | 	call	#pushregs_
16484     10 F0 07 F1 | 	add	ptra, #16
16488     4A 00 00 FF 
1648c     80 E4 05 F1 | 	add	objptr, ##38016
16490     F2 1E 02 FB | 	rdlong	local01, objptr
16494     0F 17 02 F6 | 	mov	arg03, local01
16498     01 16 66 F0 | 	shl	arg03, #1
1649c     0F 17 02 F1 | 	add	arg03, local01
164a0     02 16 66 F0 | 	shl	arg03, #2
164a4     03 00 00 FF 
164a8     04 E4 85 F1 | 	sub	objptr, ##1540
164ac     F2 16 02 F1 | 	add	arg03, objptr
164b0     0B 17 02 FB | 	rdlong	arg03, arg03
164b4     0C 4E 05 F1 | 	add	fp, #12
164b8     A7 16 62 FC | 	wrlong	arg03, fp
164bc                 | ' 
164bc                 | ' numpar=compiledline(lineptr_e).result.uresult
164bc                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
164bc     0C 4E 85 F1 | 	sub	fp, #12
164c0     02 16 16 F2 | 	cmp	arg03, #2 wc
164c4     47 00 00 FF 
164c8     7C E4 85 F1 | 	sub	objptr, ##36476
164cc     3C 00 90 CD |  if_b	jmp	#LR__1860
164d0     00 12 06 F6 | 	mov	arg01, #0
164d4     BC FD B0 FD | 	call	#__system___getiolock_0541
164d8     FD 12 02 F6 | 	mov	arg01, result1
164dc     50 A3 B0 FD | 	call	#__system___lockmem
164e0     84 01 00 FF 
164e4     C7 15 06 F6 | 	mov	arg02, ##@LR__5485
164e8     00 12 06 F6 | 	mov	arg01, #0
164ec     00 16 06 F6 | 	mov	arg03, #0
164f0     30 B0 B0 FD | 	call	#__system___basic_print_string
164f4     00 12 06 F6 | 	mov	arg01, #0
164f8     98 FD B0 FD | 	call	#__system___getiolock_0541
164fc     FD 00 68 FC | 	wrlong	#0, result1
16500     27 12 06 F6 | 	mov	arg01, #39
16504     98 6D B0 FD | 	call	#_printerror
16508     E8 00 90 FD | 	jmp	#LR__1864
1650c                 | LR__1860
1650c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1650c     0C 4E 05 F1 | 	add	fp, #12
16510     A7 FE 09 FB | 	rdlong	result3, fp wz
16514     0C 4E 85 F1 | 	sub	fp, #12
16518     30 00 90 5D |  if_ne	jmp	#LR__1861
1651c     51 00 00 FF 
16520     30 E5 05 F1 | 	add	objptr, ##41776
16524     F2 1E 02 FB | 	rdlong	local01, objptr
16528     51 00 00 FF 
1652c     30 E5 85 F1 | 	sub	objptr, ##41776
16530     A7 1E 62 FC | 	wrlong	local01, fp
16534     08 4E 05 F1 | 	add	fp, #8
16538     A7 3A 68 FC | 	wrlong	#29, fp
1653c     08 4E 85 F1 | 	sub	fp, #8
16540     A7 12 02 F6 | 	mov	arg01, fp
16544     EC 4E BF FD | 	call	#_push
16548     A8 00 90 FD | 	jmp	#LR__1864
1654c                 | LR__1861
1654c     4C 4E BF FD | 	call	#_pop
16550     A7 FA 61 FC | 	wrlong	result1, fp
16554     04 4E 05 F1 | 	add	fp, #4
16558     A7 FC 61 FC | 	wrlong	result2, fp
1655c     04 4E 05 F1 | 	add	fp, #4
16560     A7 FE 61 FC | 	wrlong	result3, fp
16564                 | ' t1=pop()
16564                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16564     08 4E 85 F1 | 	sub	fp, #8
16568     1C FE 0D F2 | 	cmp	result3, #28 wz
1656c     08 4E 05 51 |  if_ne	add	fp, #8
16570     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16574     08 4E 85 51 |  if_ne	sub	fp, #8
16578     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1657c     6C 00 90 5D |  if_ne	jmp	#LR__1863
16580     A7 1E 02 FB | 	rdlong	local01, fp
16584     52 00 00 FF 
16588     10 E4 05 F1 | 	add	objptr, ##42000
1658c     F2 1E 62 FC | 	wrlong	local01, objptr
16590                 | '   q=t1.result.uresult
16590                 | '   if q<7 then 
16590     52 00 00 FF 
16594     10 E4 85 F1 | 	sub	objptr, ##42000
16598     07 1E 56 F2 | 	cmps	local01, #7 wc
1659c     40 00 90 3D |  if_ae	jmp	#LR__1862
165a0     52 00 00 FF 
165a4     10 E4 05 F1 | 	add	objptr, ##42000
165a8     F2 1E 02 FB | 	rdlong	local01, objptr
165ac     02 1E 66 F0 | 	shl	local01, #2
165b0     E0 E4 85 F1 | 	sub	objptr, #224
165b4     F2 1E 02 F1 | 	add	local01, objptr
165b8     0F 1F 02 FB | 	rdlong	local01, local01
165bc     A7 1E 62 FC | 	wrlong	local01, fp
165c0     08 4E 05 F1 | 	add	fp, #8
165c4     A7 3A 68 FC | 	wrlong	#29, fp
165c8     08 4E 85 F1 | 	sub	fp, #8
165cc     A7 12 02 F6 | 	mov	arg01, fp
165d0     51 00 00 FF 
165d4     30 E5 85 F1 | 	sub	objptr, ##41776
165d8     58 4E BF FD | 	call	#_push
165dc                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
165dc     14 00 90 FD | 	jmp	#LR__1864
165e0                 | LR__1862
165e0     29 12 06 F6 | 	mov	arg01, #41
165e4     B8 6C B0 FD | 	call	#_printerror
165e8                 | '      printerror(41) : return
165e8     08 00 90 FD | 	jmp	#LR__1864
165ec                 | LR__1863
165ec     29 12 06 F6 | 	mov	arg01, #41
165f0     AC 6C B0 FD | 	call	#_printerror
165f4                 | LR__1864
165f4     A7 F0 03 F6 | 	mov	ptra, fp
165f8     B2 00 A0 FD | 	call	#popregs_
165fc                 | _do_stick_ret
165fc     2D 00 64 FD | 	ret
16600                 | 
16600                 | ' 
16600                 | ' ' ------------------ strig
16600                 | ' 
16600                 | ' sub do_strig
16600                 | _do_strig
16600     01 4A 05 F6 | 	mov	COUNT_, #1
16604     A8 00 A0 FD | 	call	#pushregs_
16608     10 F0 07 F1 | 	add	ptra, #16
1660c     4A 00 00 FF 
16610     80 E4 05 F1 | 	add	objptr, ##38016
16614     F2 1E 02 FB | 	rdlong	local01, objptr
16618     0F 17 02 F6 | 	mov	arg03, local01
1661c     01 16 66 F0 | 	shl	arg03, #1
16620     0F 17 02 F1 | 	add	arg03, local01
16624     02 16 66 F0 | 	shl	arg03, #2
16628     03 00 00 FF 
1662c     04 E4 85 F1 | 	sub	objptr, ##1540
16630     F2 16 02 F1 | 	add	arg03, objptr
16634     0B 17 02 FB | 	rdlong	arg03, arg03
16638     0C 4E 05 F1 | 	add	fp, #12
1663c     A7 16 62 FC | 	wrlong	arg03, fp
16640                 | ' 
16640                 | ' numpar=compiledline(lineptr_e).result.uresult
16640                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
16640     0C 4E 85 F1 | 	sub	fp, #12
16644     02 16 16 F2 | 	cmp	arg03, #2 wc
16648     47 00 00 FF 
1664c     7C E4 85 F1 | 	sub	objptr, ##36476
16650     3C 00 90 CD |  if_b	jmp	#LR__1870
16654     00 12 06 F6 | 	mov	arg01, #0
16658     38 FC B0 FD | 	call	#__system___getiolock_0541
1665c     FD 12 02 F6 | 	mov	arg01, result1
16660     CC A1 B0 FD | 	call	#__system___lockmem
16664     84 01 00 FF 
16668     CF 15 06 F6 | 	mov	arg02, ##@LR__5486
1666c     00 12 06 F6 | 	mov	arg01, #0
16670     00 16 06 F6 | 	mov	arg03, #0
16674     AC AE B0 FD | 	call	#__system___basic_print_string
16678     00 12 06 F6 | 	mov	arg01, #0
1667c     14 FC B0 FD | 	call	#__system___getiolock_0541
16680     FD 00 68 FC | 	wrlong	#0, result1
16684     27 12 06 F6 | 	mov	arg01, #39
16688     14 6C B0 FD | 	call	#_printerror
1668c     E8 00 90 FD | 	jmp	#LR__1874
16690                 | LR__1870
16690                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
16690     0C 4E 05 F1 | 	add	fp, #12
16694     A7 FE 09 FB | 	rdlong	result3, fp wz
16698     0C 4E 85 F1 | 	sub	fp, #12
1669c     30 00 90 5D |  if_ne	jmp	#LR__1871
166a0     51 00 00 FF 
166a4     4C E5 05 F1 | 	add	objptr, ##41804
166a8     F2 1E 02 FB | 	rdlong	local01, objptr
166ac     51 00 00 FF 
166b0     4C E5 85 F1 | 	sub	objptr, ##41804
166b4     A7 1E 62 FC | 	wrlong	local01, fp
166b8     08 4E 05 F1 | 	add	fp, #8
166bc     A7 3A 68 FC | 	wrlong	#29, fp
166c0     08 4E 85 F1 | 	sub	fp, #8
166c4     A7 12 02 F6 | 	mov	arg01, fp
166c8     68 4D BF FD | 	call	#_push
166cc     A8 00 90 FD | 	jmp	#LR__1874
166d0                 | LR__1871
166d0     C8 4C BF FD | 	call	#_pop
166d4     A7 FA 61 FC | 	wrlong	result1, fp
166d8     04 4E 05 F1 | 	add	fp, #4
166dc     A7 FC 61 FC | 	wrlong	result2, fp
166e0     04 4E 05 F1 | 	add	fp, #4
166e4     A7 FE 61 FC | 	wrlong	result3, fp
166e8                 | ' t1=pop()
166e8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
166e8     08 4E 85 F1 | 	sub	fp, #8
166ec     1C FE 0D F2 | 	cmp	result3, #28 wz
166f0     08 4E 05 51 |  if_ne	add	fp, #8
166f4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
166f8     08 4E 85 51 |  if_ne	sub	fp, #8
166fc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16700     6C 00 90 5D |  if_ne	jmp	#LR__1873
16704     A7 1E 02 FB | 	rdlong	local01, fp
16708     52 00 00 FF 
1670c     10 E4 05 F1 | 	add	objptr, ##42000
16710     F2 1E 62 FC | 	wrlong	local01, objptr
16714                 | '   q=t1.result.uresult
16714                 | '   if q<7 then 
16714     52 00 00 FF 
16718     10 E4 85 F1 | 	sub	objptr, ##42000
1671c     07 1E 56 F2 | 	cmps	local01, #7 wc
16720     40 00 90 3D |  if_ae	jmp	#LR__1872
16724     52 00 00 FF 
16728     10 E4 05 F1 | 	add	objptr, ##42000
1672c     F2 1E 02 FB | 	rdlong	local01, objptr
16730     02 1E 66 F0 | 	shl	local01, #2
16734     C4 E4 85 F1 | 	sub	objptr, #196
16738     F2 1E 02 F1 | 	add	local01, objptr
1673c     0F 1F 02 FB | 	rdlong	local01, local01
16740     A7 1E 62 FC | 	wrlong	local01, fp
16744     08 4E 05 F1 | 	add	fp, #8
16748     A7 3A 68 FC | 	wrlong	#29, fp
1674c     08 4E 85 F1 | 	sub	fp, #8
16750     A7 12 02 F6 | 	mov	arg01, fp
16754     51 00 00 FF 
16758     4C E5 85 F1 | 	sub	objptr, ##41804
1675c     D4 4C BF FD | 	call	#_push
16760                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
16760     14 00 90 FD | 	jmp	#LR__1874
16764                 | LR__1872
16764     29 12 06 F6 | 	mov	arg01, #41
16768     34 6B B0 FD | 	call	#_printerror
1676c                 | '      printerror(41) : return
1676c     08 00 90 FD | 	jmp	#LR__1874
16770                 | LR__1873
16770     29 12 06 F6 | 	mov	arg01, #41
16774     28 6B B0 FD | 	call	#_printerror
16778                 | LR__1874
16778     A7 F0 03 F6 | 	mov	ptra, fp
1677c     B2 00 A0 FD | 	call	#popregs_
16780                 | _do_strig_ret
16780     2D 00 64 FD | 	ret
16784                 | 
16784                 | ' 
16784                 | ' ' ------------------ tan
16784                 | ' 
16784                 | ' sub do_tan
16784                 | _do_tan
16784     01 4A 05 F6 | 	mov	COUNT_, #1
16788     A8 00 A0 FD | 	call	#pushregs_
1678c     10 F0 07 F1 | 	add	ptra, #16
16790     4A 00 00 FF 
16794     80 E4 05 F1 | 	add	objptr, ##38016
16798     F2 1E 02 FB | 	rdlong	local01, objptr
1679c     0F 17 02 F6 | 	mov	arg03, local01
167a0     01 16 66 F0 | 	shl	arg03, #1
167a4     0F 17 02 F1 | 	add	arg03, local01
167a8     02 16 66 F0 | 	shl	arg03, #2
167ac     03 00 00 FF 
167b0     04 E4 85 F1 | 	sub	objptr, ##1540
167b4     F2 16 02 F1 | 	add	arg03, objptr
167b8     0B 17 02 FB | 	rdlong	arg03, arg03
167bc     0C 4E 05 F1 | 	add	fp, #12
167c0     A7 16 62 FC | 	wrlong	arg03, fp
167c4                 | ' 
167c4                 | ' numpar=compiledline(lineptr_e).result.uresult
167c4                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
167c4     0C 4E 85 F1 | 	sub	fp, #12
167c8     02 16 16 F2 | 	cmp	arg03, #2 wc
167cc     47 00 00 FF 
167d0     7C E4 85 F1 | 	sub	objptr, ##36476
167d4     0C 4E 05 C1 |  if_b	add	fp, #12
167d8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
167dc     0C 4E 85 C1 |  if_b	sub	fp, #12
167e0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1880
167e4     00 12 06 F6 | 	mov	arg01, #0
167e8     A8 FA B0 FD | 	call	#__system___getiolock_0541
167ec     FD 12 02 F6 | 	mov	arg01, result1
167f0     3C A0 B0 FD | 	call	#__system___lockmem
167f4     84 01 00 FF 
167f8     D7 15 06 F6 | 	mov	arg02, ##@LR__5487
167fc     00 12 06 F6 | 	mov	arg01, #0
16800     00 16 06 F6 | 	mov	arg03, #0
16804     1C AD B0 FD | 	call	#__system___basic_print_string
16808     00 12 06 F6 | 	mov	arg01, #0
1680c     84 FA B0 FD | 	call	#__system___getiolock_0541
16810     FD 00 68 FC | 	wrlong	#0, result1
16814     27 12 06 F6 | 	mov	arg01, #39
16818     84 6A B0 FD | 	call	#_printerror
1681c     64 00 90 FD | 	jmp	#LR__1881
16820                 | LR__1880
16820     78 4B BF FD | 	call	#_pop
16824     A7 FA 61 FC | 	wrlong	result1, fp
16828     04 4E 05 F1 | 	add	fp, #4
1682c     A7 FC 61 FC | 	wrlong	result2, fp
16830     04 4E 05 F1 | 	add	fp, #4
16834     A7 FE 61 FC | 	wrlong	result3, fp
16838     08 4E 85 F1 | 	sub	fp, #8
1683c     51 00 00 FF 
16840     BC E5 05 F1 | 	add	objptr, ##41916
16844     F2 1E 02 FB | 	rdlong	local01, objptr
16848     51 00 00 FF 
1684c     BC E5 85 F1 | 	sub	objptr, ##41916
16850     A7 12 02 F6 | 	mov	arg01, fp
16854     E4 4D BF FD | 	call	#_converttofloat
16858     FD 14 02 F6 | 	mov	arg02, result1
1685c     0F 13 02 F6 | 	mov	arg01, local01
16860     80 CB B0 FD | 	call	#__system___float_mul
16864     FD 12 02 F6 | 	mov	arg01, result1
16868     24 D6 B0 FD | 	call	#__system____builtin_tanf
1686c     A7 FA 61 FC | 	wrlong	result1, fp
16870     08 4E 05 F1 | 	add	fp, #8
16874     A7 3C 68 FC | 	wrlong	#30, fp
16878     08 4E 85 F1 | 	sub	fp, #8
1687c     A7 12 02 F6 | 	mov	arg01, fp
16880     B0 4B BF FD | 	call	#_push
16884                 | LR__1881
16884     A7 F0 03 F6 | 	mov	ptra, fp
16888     B2 00 A0 FD | 	call	#popregs_
1688c                 | _do_tan_ret
1688c     2D 00 64 FD | 	ret
16890                 | 
16890                 | ' 
16890                 | ' ' ------------------ val
16890                 | ' 
16890                 | ' sub do_val
16890                 | _do_val
16890     03 4A 05 F6 | 	mov	COUNT_, #3
16894     A8 00 A0 FD | 	call	#pushregs_
16898     20 F0 07 F1 | 	add	ptra, #32
1689c     4A 00 00 FF 
168a0     80 E4 05 F1 | 	add	objptr, ##38016
168a4     F2 16 02 FB | 	rdlong	arg03, objptr
168a8     0B 1F 02 F6 | 	mov	local01, arg03
168ac     01 1E 66 F0 | 	shl	local01, #1
168b0     0B 1F 02 F1 | 	add	local01, arg03
168b4     02 1E 66 F0 | 	shl	local01, #2
168b8     03 00 00 FF 
168bc     04 E4 85 F1 | 	sub	objptr, ##1540
168c0     F2 1E 02 F1 | 	add	local01, objptr
168c4     0F 17 02 FB | 	rdlong	arg03, local01
168c8     0C 4E 05 F1 | 	add	fp, #12
168cc     A7 16 62 FC | 	wrlong	arg03, fp
168d0                 | ' 
168d0                 | ' numpar=compiledline(lineptr_e).result.uresult
168d0                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
168d0     0C 4E 85 F1 | 	sub	fp, #12
168d4     02 16 16 F2 | 	cmp	arg03, #2 wc
168d8     47 00 00 FF 
168dc     7C E4 85 F1 | 	sub	objptr, ##36476
168e0     0C 4E 05 C1 |  if_b	add	fp, #12
168e4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
168e8     0C 4E 85 C1 |  if_b	sub	fp, #12
168ec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1890
168f0     00 12 06 F6 | 	mov	arg01, #0
168f4     9C F9 B0 FD | 	call	#__system___getiolock_0541
168f8     FD 12 02 F6 | 	mov	arg01, result1
168fc     30 9F B0 FD | 	call	#__system___lockmem
16900     84 01 00 FF 
16904     DD 15 06 F6 | 	mov	arg02, ##@LR__5488
16908     00 12 06 F6 | 	mov	arg01, #0
1690c     00 16 06 F6 | 	mov	arg03, #0
16910     10 AC B0 FD | 	call	#__system___basic_print_string
16914     00 12 06 F6 | 	mov	arg01, #0
16918     78 F9 B0 FD | 	call	#__system___getiolock_0541
1691c     FD 00 68 FC | 	wrlong	#0, result1
16920     27 12 06 F6 | 	mov	arg01, #39
16924     78 69 B0 FD | 	call	#_printerror
16928     5C 02 90 FD | 	jmp	#LR__1903
1692c                 | LR__1890
1692c     6C 4A BF FD | 	call	#_pop
16930     FF 16 02 F6 | 	mov	arg03, result3
16934     A7 FA 61 FC | 	wrlong	result1, fp
16938     04 4E 05 F1 | 	add	fp, #4
1693c     A7 FC 61 FC | 	wrlong	result2, fp
16940     04 4E 05 F1 | 	add	fp, #4
16944     A7 16 62 FC | 	wrlong	arg03, fp
16948                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16948     08 4E 85 F1 | 	sub	fp, #8
1694c     2B 16 0E F2 | 	cmp	arg03, #43 wz
16950     18 00 90 5D |  if_ne	jmp	#LR__1891
16954     A7 12 02 FB | 	rdlong	arg01, fp
16958     B8 4B BF FD | 	call	#_convertstring
1695c     A7 FA 61 FC | 	wrlong	result1, fp
16960     08 4E 05 F1 | 	add	fp, #8
16964     A7 3E 68 FC | 	wrlong	#31, fp
16968     08 4E 85 F1 | 	sub	fp, #8
1696c                 | LR__1891
1696c                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1696c     08 4E 05 F1 | 	add	fp, #8
16970     A7 16 02 FB | 	rdlong	arg03, fp
16974     08 4E 85 F1 | 	sub	fp, #8
16978     1F 16 0E F2 | 	cmp	arg03, #31 wz
1697c     3C 00 90 AD |  if_e	jmp	#LR__1892
16980     00 12 06 F6 | 	mov	arg01, #0
16984     0C F9 B0 FD | 	call	#__system___getiolock_0541
16988     FD 12 02 F6 | 	mov	arg01, result1
1698c     A0 9E B0 FD | 	call	#__system___lockmem
16990     84 01 00 FF 
16994     E3 15 06 F6 | 	mov	arg02, ##@LR__5489
16998     00 12 06 F6 | 	mov	arg01, #0
1699c     00 16 06 F6 | 	mov	arg03, #0
169a0     80 AB B0 FD | 	call	#__system___basic_print_string
169a4     00 12 06 F6 | 	mov	arg01, #0
169a8     E8 F8 B0 FD | 	call	#__system___getiolock_0541
169ac     FD 00 68 FC | 	wrlong	#0, result1
169b0     0F 12 06 F6 | 	mov	arg01, #15
169b4     E8 68 B0 FD | 	call	#_printerror
169b8     CC 01 90 FD | 	jmp	#LR__1903
169bc                 | LR__1892
169bc                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
169bc     A7 12 02 FB | 	rdlong	arg01, fp
169c0     01 14 06 F6 | 	mov	arg02, #1
169c4     E4 BE B0 FD | 	call	#__system__Left_S
169c8     FD 12 02 F6 | 	mov	arg01, result1
169cc     84 01 00 FF 
169d0     E9 15 06 F6 | 	mov	arg02, ##@LR__5490
169d4     80 9E B0 FD | 	call	#__system___string_cmp
169d8     00 FA 0D F2 | 	cmp	result1, #0 wz
169dc     48 00 90 5D |  if_ne	jmp	#LR__1895
169e0     84 01 00 FF 
169e4     EB 1F 06 F6 | 	mov	local01, ##@LR__5491
169e8     A7 16 02 FB | 	rdlong	arg03, fp
169ec     0B 13 02 F6 | 	mov	arg01, arg03
169f0     09 21 02 F6 | 	mov	local02, arg01
169f4     97 06 48 FB | 	callpa	#(@LR__1894-@LR__1893)>>2,fcache_load_ptr_
169f8                 | LR__1893
169f8     10 FB C9 FA | 	rdbyte	result1, local02 wz
169fc     01 20 06 51 |  if_ne	add	local02, #1
16a00     F4 FF 9F 5D |  if_ne	jmp	#LR__1893
16a04                 | LR__1894
16a04     09 21 82 F1 | 	sub	local02, arg01
16a08     10 15 02 F6 | 	mov	arg02, local02
16a0c     01 14 86 F1 | 	sub	arg02, #1
16a10     0B 13 02 F6 | 	mov	arg01, arg03
16a14     1C BF B0 FD | 	call	#__system__Right_S
16a18     FD 14 02 F6 | 	mov	arg02, result1
16a1c     0F 13 02 F6 | 	mov	arg01, local01
16a20     68 9E B0 FD | 	call	#__system___string_concat
16a24     A7 FA 61 FC | 	wrlong	result1, fp
16a28                 | LR__1895
16a28                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16a28     A7 12 02 FB | 	rdlong	arg01, fp
16a2c     01 14 06 F6 | 	mov	arg02, #1
16a30     78 BE B0 FD | 	call	#__system__Left_S
16a34     FD 12 02 F6 | 	mov	arg01, result1
16a38     84 01 00 FF 
16a3c     EE 15 06 F6 | 	mov	arg02, ##@LR__5492
16a40     14 9E B0 FD | 	call	#__system___string_cmp
16a44     00 FA 0D F2 | 	cmp	result1, #0 wz
16a48     48 00 90 5D |  if_ne	jmp	#LR__1898
16a4c     84 01 00 FF 
16a50     F0 1F 06 F6 | 	mov	local01, ##@LR__5493
16a54     A7 16 02 FB | 	rdlong	arg03, fp
16a58     0B 13 02 F6 | 	mov	arg01, arg03
16a5c     09 21 02 F6 | 	mov	local02, arg01
16a60     97 06 48 FB | 	callpa	#(@LR__1897-@LR__1896)>>2,fcache_load_ptr_
16a64                 | LR__1896
16a64     10 FB C9 FA | 	rdbyte	result1, local02 wz
16a68     01 20 06 51 |  if_ne	add	local02, #1
16a6c     F4 FF 9F 5D |  if_ne	jmp	#LR__1896
16a70                 | LR__1897
16a70     09 21 82 F1 | 	sub	local02, arg01
16a74     10 15 02 F6 | 	mov	arg02, local02
16a78     01 14 86 F1 | 	sub	arg02, #1
16a7c     0B 13 02 F6 | 	mov	arg01, arg03
16a80     B0 BE B0 FD | 	call	#__system__Right_S
16a84     FD 14 02 F6 | 	mov	arg02, result1
16a88     0F 13 02 F6 | 	mov	arg01, local01
16a8c     FC 9D B0 FD | 	call	#__system___string_concat
16a90     A7 FA 61 FC | 	wrlong	result1, fp
16a94                 | LR__1898
16a94     A7 12 02 FB | 	rdlong	arg01, fp
16a98     54 D1 B0 FD | 	call	#__system____builtin_atof
16a9c     1C 4E 05 F1 | 	add	fp, #28
16aa0     A7 FA 61 FC | 	wrlong	result1, fp
16aa4     1C 4E 85 F1 | 	sub	fp, #28
16aa8     A7 12 02 FB | 	rdlong	arg01, fp
16aac     00 14 06 F6 | 	mov	arg02, #0
16ab0     A8 CF B0 FD | 	call	#__system____builtin_atoi
16ab4     18 4E 05 F1 | 	add	fp, #24
16ab8     A7 FA 61 FC | 	wrlong	result1, fp
16abc                 | ' fval=val(t1.result.sresult)
16abc                 | ' ival=val%(t1.result.sresult)
16abc                 | ' if fval=ival then
16abc     04 4E 05 F1 | 	add	fp, #4
16ac0     A7 1E 02 FB | 	rdlong	local01, fp
16ac4     1C 4E 85 F1 | 	sub	fp, #28
16ac8     FD 12 52 F6 | 	abs	arg01, result1 wc
16acc     1F 22 C6 C9 |  if_b	decod	local03, #31
16ad0     00 22 06 36 |  if_ae	mov	local03, #0
16ad4     08 C5 B0 FD | 	call	#__system___float_fromuns
16ad8     11 FB 61 F5 | 	xor	result1, local03
16adc     FD 14 02 F6 | 	mov	arg02, result1
16ae0     0F 13 02 F6 | 	mov	arg01, local01
16ae4     01 16 06 F6 | 	mov	arg03, #1
16ae8     2C CD B0 FD | 	call	#__system___float_cmp
16aec     00 FA 0D F2 | 	cmp	result1, #0 wz
16af0     20 00 90 5D |  if_ne	jmp	#LR__1899
16af4     18 4E 05 F1 | 	add	fp, #24
16af8     A7 1E 02 FB | 	rdlong	local01, fp
16afc     18 4E 85 F1 | 	sub	fp, #24
16b00     A7 1E 62 FC | 	wrlong	local01, fp
16b04     08 4E 05 F1 | 	add	fp, #8
16b08     A7 38 68 FC | 	wrlong	#28, fp
16b0c     08 4E 85 F1 | 	sub	fp, #8
16b10     6C 00 90 FD | 	jmp	#LR__1902
16b14                 | LR__1899
16b14                 | '   if fval=0 andalso ival<>0 then
16b14     1C 4E 05 F1 | 	add	fp, #28
16b18     A7 12 02 FB | 	rdlong	arg01, fp
16b1c     1C 4E 85 F1 | 	sub	fp, #28
16b20     00 14 06 F6 | 	mov	arg02, #0
16b24     01 16 06 F6 | 	mov	arg03, #1
16b28     EC CC B0 FD | 	call	#__system___float_cmp
16b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
16b30     30 00 90 5D |  if_ne	jmp	#LR__1900
16b34     18 4E 05 F1 | 	add	fp, #24
16b38     A7 1E 0A FB | 	rdlong	local01, fp wz
16b3c     18 4E 85 F1 | 	sub	fp, #24
16b40     20 00 90 AD |  if_e	jmp	#LR__1900
16b44     18 4E 05 F1 | 	add	fp, #24
16b48     A7 1E 02 FB | 	rdlong	local01, fp
16b4c     18 4E 85 F1 | 	sub	fp, #24
16b50     A7 1E 62 FC | 	wrlong	local01, fp
16b54     08 4E 05 F1 | 	add	fp, #8
16b58     A7 38 68 FC | 	wrlong	#28, fp
16b5c     08 4E 85 F1 | 	sub	fp, #8
16b60     1C 00 90 FD | 	jmp	#LR__1901
16b64                 | LR__1900
16b64     1C 4E 05 F1 | 	add	fp, #28
16b68     A7 1E 02 FB | 	rdlong	local01, fp
16b6c     1C 4E 85 F1 | 	sub	fp, #28
16b70     A7 1E 62 FC | 	wrlong	local01, fp
16b74     08 4E 05 F1 | 	add	fp, #8
16b78     A7 3C 68 FC | 	wrlong	#30, fp
16b7c     08 4E 85 F1 | 	sub	fp, #8
16b80                 | LR__1901
16b80                 | LR__1902
16b80     A7 12 02 F6 | 	mov	arg01, fp
16b84     AC 48 BF FD | 	call	#_push
16b88                 | LR__1903
16b88     A7 F0 03 F6 | 	mov	ptra, fp
16b8c     B2 00 A0 FD | 	call	#popregs_
16b90                 | _do_val_ret
16b90     2D 00 64 FD | 	ret
16b94                 | 
16b94                 | ' 
16b94                 | ' ' ------------------ waitclock
16b94                 | ' 
16b94                 | ' sub do_waitclock
16b94                 | _do_waitclock
16b94     51 00 00 FF 
16b98     A8 E5 05 F1 | 	add	objptr, ##41896
16b9c     F2 00 02 FB | 	rdlong	_var01, objptr
16ba0                 | ' c=hkcnt
16ba0                 | ' do: loop until hkcnt<>c
16ba0                 | LR__1910
16ba0     F2 02 02 FB | 	rdlong	_var02, objptr
16ba4     00 03 0A F2 | 	cmp	_var02, _var01 wz
16ba8     F4 FF 9F AD |  if_e	jmp	#LR__1910
16bac     51 00 00 FF 
16bb0     A8 E5 85 F1 | 	sub	objptr, ##41896
16bb4                 | _do_waitclock_ret
16bb4     2D 00 64 FD | 	ret
16bb8                 | 
16bb8                 | ' 
16bb8                 | ' ' ------------------ waitms
16bb8                 | ' 
16bb8                 | ' sub do_waitms
16bb8                 | _do_waitms
16bb8     01 4A 05 F6 | 	mov	COUNT_, #1
16bbc     A8 00 A0 FD | 	call	#pushregs_
16bc0     18 F0 07 F1 | 	add	ptra, #24
16bc4     D4 47 BF FD | 	call	#_pop
16bc8     A7 FA 61 FC | 	wrlong	result1, fp
16bcc     04 4E 05 F1 | 	add	fp, #4
16bd0     A7 FC 61 FC | 	wrlong	result2, fp
16bd4     04 4E 05 F1 | 	add	fp, #4
16bd8     A7 FE 61 FC | 	wrlong	result3, fp
16bdc     08 4E 85 F1 | 	sub	fp, #8
16be0     A7 12 02 F6 | 	mov	arg01, fp
16be4     98 49 BF FD | 	call	#_converttoint
16be8     0C 4E 05 F1 | 	add	fp, #12
16bec     A7 FA 61 FC | 	wrlong	result1, fp
16bf0                 | ' 
16bf0                 | ' t1=pop()  
16bf0                 | ' t=converttoint(t1)
16bf0                 | ' if t<0 then return
16bf0     0C 4E 85 F1 | 	sub	fp, #12
16bf4     00 FA 55 F2 | 	cmps	result1, #0 wc
16bf8     E4 00 90 CD |  if_b	jmp	#LR__1926
16bfc                 | ' if t < 1000 then 
16bfc     0C 4E 05 F1 | 	add	fp, #12
16c00     A7 12 02 FB | 	rdlong	arg01, fp
16c04     0C 4E 85 F1 | 	sub	fp, #12
16c08     01 00 00 FF 
16c0c     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
16c10     14 00 90 3D |  if_ae	jmp	#LR__1920
16c14     0C 4E 05 F1 | 	add	fp, #12
16c18     A7 12 02 FB | 	rdlong	arg01, fp
16c1c     0C 4E 85 F1 | 	sub	fp, #12
16c20     00 9F B0 FD | 	call	#__system___waitms
16c24     B8 00 90 FD | 	jmp	#LR__1925
16c28                 | LR__1920
16c28     10 4E 05 F1 | 	add	fp, #16
16c2c     A7 02 68 FC | 	wrlong	#1, fp
16c30     04 4E 85 F1 | 	sub	fp, #4
16c34     A7 12 02 FB | 	rdlong	arg01, fp
16c38     09 13 52 F6 | 	abs	arg01, arg01 wc
16c3c     01 00 00 FF 
16c40     E8 13 16 FD | 	qdiv	arg01, ##1000
16c44                 | '   for i=1 to t/1000
16c44     0C 4E 85 F1 | 	sub	fp, #12
16c48     18 1E 62 FD | 	getqx	local01
16c4c     0F 1F 82 F6 | 	negc	local01, local01
16c50     01 1E 06 F1 | 	add	local01, #1
16c54                 | LR__1921
16c54     10 4E 05 F1 | 	add	fp, #16
16c58     A7 12 02 FB | 	rdlong	arg01, fp
16c5c     10 4E 85 F1 | 	sub	fp, #16
16c60     0F 13 52 F2 | 	cmps	arg01, local01 wc
16c64     54 00 90 3D |  if_ae	jmp	#LR__1924
16c68     01 00 00 FF 
16c6c     E8 13 06 F6 | 	mov	arg01, ##1000
16c70     B0 9E B0 FD | 	call	#__system___waitms
16c74                 | '     waitms(1000)
16c74                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
16c74     E0 12 06 F6 | 	mov	arg01, #224
16c78     04 93 B0 FD | 	call	#_usbnew_spin2_keystate
16c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
16c80     10 00 90 5D |  if_ne	jmp	#LR__1922
16c84     E4 12 06 F6 | 	mov	arg01, #228
16c88     F4 92 B0 FD | 	call	#_usbnew_spin2_keystate
16c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
16c90     10 00 90 AD |  if_e	jmp	#LR__1923
16c94                 | LR__1922
16c94     06 12 06 F6 | 	mov	arg01, #6
16c98     E4 92 B0 FD | 	call	#_usbnew_spin2_keystate
16c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
16ca0     3C 00 90 5D |  if_ne	jmp	#LR__1926
16ca4                 | LR__1923
16ca4     10 4E 05 F1 | 	add	fp, #16
16ca8     A7 12 02 FB | 	rdlong	arg01, fp
16cac     01 12 06 F1 | 	add	arg01, #1
16cb0     A7 12 62 FC | 	wrlong	arg01, fp
16cb4     10 4E 85 F1 | 	sub	fp, #16
16cb8     98 FF 9F FD | 	jmp	#LR__1921
16cbc                 | LR__1924
16cbc     0C 4E 05 F1 | 	add	fp, #12
16cc0     A7 1E 02 FB | 	rdlong	local01, fp
16cc4     0F 1F 52 F6 | 	abs	local01, local01 wc
16cc8     01 00 00 FF 
16ccc     E8 1F 16 FD | 	qdiv	local01, ##1000
16cd0     0C 4E 85 F1 | 	sub	fp, #12
16cd4     19 1E 62 FD | 	getqy	local01
16cd8     0F 13 82 F6 | 	negc	arg01, local01
16cdc     44 9E B0 FD | 	call	#__system___waitms
16ce0                 | LR__1925
16ce0                 | LR__1926
16ce0     A7 F0 03 F6 | 	mov	ptra, fp
16ce4     B2 00 A0 FD | 	call	#popregs_
16ce8                 | _do_waitms_ret
16ce8     2D 00 64 FD | 	ret
16cec                 | 
16cec                 | ' 
16cec                 | ' ' ------------------ waitvbl
16cec                 | ' 
16cec                 | ' sub do_waitvbl
16cec                 | _do_waitvbl
16cec     01 12 06 F6 | 	mov	arg01, #1
16cf0     F0 81 B0 FD | 	call	#_hg010b_spin2_waitvbl
16cf4                 | _do_waitvbl_ret
16cf4     2D 00 64 FD | 	ret
16cf8                 | 
16cf8                 | ' 
16cf8                 | ' ' ------------------ wrpin
16cf8                 | ' 
16cf8                 | ' sub do_wrpin
16cf8                 | _do_wrpin
16cf8     01 4A 05 F6 | 	mov	COUNT_, #1
16cfc     A8 00 A0 FD | 	call	#pushregs_
16d00     18 F0 07 F1 | 	add	ptra, #24
16d04     94 46 BF FD | 	call	#_pop
16d08     FD 14 02 F6 | 	mov	arg02, result1
16d0c     FE 12 02 F6 | 	mov	arg01, result2
16d10     FF 1E 02 F6 | 	mov	local01, result3
16d14     A7 14 62 FC | 	wrlong	arg02, fp
16d18     04 4E 05 F1 | 	add	fp, #4
16d1c     A7 12 62 FC | 	wrlong	arg01, fp
16d20     04 4E 05 F1 | 	add	fp, #4
16d24     A7 1E 62 FC | 	wrlong	local01, fp
16d28     08 4E 85 F1 | 	sub	fp, #8
16d2c     6C 46 BF FD | 	call	#_pop
16d30     FF 1E 02 F6 | 	mov	local01, result3
16d34     0C 4E 05 F1 | 	add	fp, #12
16d38     A7 FA 61 FC | 	wrlong	result1, fp
16d3c     04 4E 05 F1 | 	add	fp, #4
16d40     A7 FC 61 FC | 	wrlong	result2, fp
16d44     04 4E 05 F1 | 	add	fp, #4
16d48     A7 1E 62 FC | 	wrlong	local01, fp
16d4c     08 4E 85 F1 | 	sub	fp, #8
16d50     A7 12 02 F6 | 	mov	arg01, fp
16d54     0C 4E 85 F1 | 	sub	fp, #12
16d58     24 48 BF FD | 	call	#_converttoint
16d5c     FD 1E 02 F6 | 	mov	local01, result1
16d60     A7 12 02 F6 | 	mov	arg01, fp
16d64     18 48 BF FD | 	call	#_converttoint
16d68     0F FB 01 FC | 	wrpin	result1, local01
16d6c     A7 F0 03 F6 | 	mov	ptra, fp
16d70     B2 00 A0 FD | 	call	#popregs_
16d74                 | _do_wrpin_ret
16d74     2D 00 64 FD | 	ret
16d78                 | 
16d78                 | ' 
16d78                 | ' ' ------------------ wxpin
16d78                 | ' 
16d78                 | ' sub do_wxpin
16d78                 | _do_wxpin
16d78     01 4A 05 F6 | 	mov	COUNT_, #1
16d7c     A8 00 A0 FD | 	call	#pushregs_
16d80     18 F0 07 F1 | 	add	ptra, #24
16d84     14 46 BF FD | 	call	#_pop
16d88     FD 14 02 F6 | 	mov	arg02, result1
16d8c     FE 12 02 F6 | 	mov	arg01, result2
16d90     FF 1E 02 F6 | 	mov	local01, result3
16d94     A7 14 62 FC | 	wrlong	arg02, fp
16d98     04 4E 05 F1 | 	add	fp, #4
16d9c     A7 12 62 FC | 	wrlong	arg01, fp
16da0     04 4E 05 F1 | 	add	fp, #4
16da4     A7 1E 62 FC | 	wrlong	local01, fp
16da8     08 4E 85 F1 | 	sub	fp, #8
16dac     EC 45 BF FD | 	call	#_pop
16db0     FF 1E 02 F6 | 	mov	local01, result3
16db4     0C 4E 05 F1 | 	add	fp, #12
16db8     A7 FA 61 FC | 	wrlong	result1, fp
16dbc     04 4E 05 F1 | 	add	fp, #4
16dc0     A7 FC 61 FC | 	wrlong	result2, fp
16dc4     04 4E 05 F1 | 	add	fp, #4
16dc8     A7 1E 62 FC | 	wrlong	local01, fp
16dcc     08 4E 85 F1 | 	sub	fp, #8
16dd0     A7 12 02 F6 | 	mov	arg01, fp
16dd4     0C 4E 85 F1 | 	sub	fp, #12
16dd8     A4 47 BF FD | 	call	#_converttoint
16ddc     FD 1E 02 F6 | 	mov	local01, result1
16de0     A7 12 02 F6 | 	mov	arg01, fp
16de4     98 47 BF FD | 	call	#_converttoint
16de8     0F FB 11 FC | 	wxpin	result1, local01
16dec     A7 F0 03 F6 | 	mov	ptra, fp
16df0     B2 00 A0 FD | 	call	#popregs_
16df4                 | _do_wxpin_ret
16df4     2D 00 64 FD | 	ret
16df8                 | 
16df8                 | ' 
16df8                 | ' ' ------------------ wypin
16df8                 | ' 
16df8                 | ' sub do_wypin
16df8                 | _do_wypin
16df8     01 4A 05 F6 | 	mov	COUNT_, #1
16dfc     A8 00 A0 FD | 	call	#pushregs_
16e00     18 F0 07 F1 | 	add	ptra, #24
16e04     94 45 BF FD | 	call	#_pop
16e08     FD 14 02 F6 | 	mov	arg02, result1
16e0c     FE 12 02 F6 | 	mov	arg01, result2
16e10     FF 1E 02 F6 | 	mov	local01, result3
16e14     A7 14 62 FC | 	wrlong	arg02, fp
16e18     04 4E 05 F1 | 	add	fp, #4
16e1c     A7 12 62 FC | 	wrlong	arg01, fp
16e20     04 4E 05 F1 | 	add	fp, #4
16e24     A7 1E 62 FC | 	wrlong	local01, fp
16e28     08 4E 85 F1 | 	sub	fp, #8
16e2c     6C 45 BF FD | 	call	#_pop
16e30     FF 1E 02 F6 | 	mov	local01, result3
16e34     0C 4E 05 F1 | 	add	fp, #12
16e38     A7 FA 61 FC | 	wrlong	result1, fp
16e3c     04 4E 05 F1 | 	add	fp, #4
16e40     A7 FC 61 FC | 	wrlong	result2, fp
16e44     04 4E 05 F1 | 	add	fp, #4
16e48     A7 1E 62 FC | 	wrlong	local01, fp
16e4c     08 4E 85 F1 | 	sub	fp, #8
16e50     A7 12 02 F6 | 	mov	arg01, fp
16e54     0C 4E 85 F1 | 	sub	fp, #12
16e58     24 47 BF FD | 	call	#_converttoint
16e5c     FD 1E 02 F6 | 	mov	local01, result1
16e60     A7 12 02 F6 | 	mov	arg01, fp
16e64     18 47 BF FD | 	call	#_converttoint
16e68     0F FB 21 FC | 	wypin	result1, local01
16e6c     A7 F0 03 F6 | 	mov	ptra, fp
16e70     B2 00 A0 FD | 	call	#popregs_
16e74                 | _do_wypin_ret
16e74     2D 00 64 FD | 	ret
16e78                 | 
16e78                 | ' 
16e78                 | ' 
16e78                 | ' 
16e78                 | ' 
16e78                 | ' 
16e78                 | ' 
16e78                 | ' 
16e78                 | ' 
16e78                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
16e78                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
16e78                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
16e78                 | ' 
16e78                 | ' 
16e78                 | ' '------------------ Assign
16e78                 | ' 
16e78                 | ' sub do_assign
16e78                 | _do_assign
16e78     05 4A 05 F6 | 	mov	COUNT_, #5
16e7c     A8 00 A0 FD | 	call	#pushregs_
16e80     44 F0 07 F1 | 	add	ptra, #68
16e84     4A 00 00 FF 
16e88     80 E4 05 F1 | 	add	objptr, ##38016
16e8c     F2 16 02 FB | 	rdlong	arg03, objptr
16e90     0B 15 02 F6 | 	mov	arg02, arg03
16e94     01 14 66 F0 | 	shl	arg02, #1
16e98     0B 15 02 F1 | 	add	arg02, arg03
16e9c     02 14 66 F0 | 	shl	arg02, #2
16ea0     03 00 00 FF 
16ea4     04 E4 85 F1 | 	sub	objptr, ##1540
16ea8     F2 14 02 F1 | 	add	arg02, objptr
16eac     0A 15 02 FB | 	rdlong	arg02, arg02
16eb0     18 4E 05 F1 | 	add	fp, #24
16eb4     A7 14 62 FC | 	wrlong	arg02, fp
16eb8                 | ' 
16eb8                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
16eb8                 | ' if variables(varnum).vartype<array_no_type then 
16eb8     18 4E 85 F1 | 	sub	fp, #24
16ebc     04 14 66 F0 | 	shl	arg02, #4
16ec0     32 00 00 FF 
16ec4     84 E4 85 F1 | 	sub	objptr, ##25732
16ec8     F2 14 02 F1 | 	add	arg02, objptr
16ecc     0C 14 06 F1 | 	add	arg02, #12
16ed0     0A 17 02 FB | 	rdlong	arg03, arg02
16ed4     00 17 16 F2 | 	cmp	arg03, #256 wc
16ed8     14 00 00 FF 
16edc     F8 E5 85 F1 | 	sub	objptr, ##10744
16ee0     18 01 90 3D |  if_ae	jmp	#LR__1930
16ee4     B4 44 BF FD | 	call	#_pop
16ee8     A7 FA 61 FC | 	wrlong	result1, fp
16eec     04 4E 05 F1 | 	add	fp, #4
16ef0     A7 FC 61 FC | 	wrlong	result2, fp
16ef4     04 4E 05 F1 | 	add	fp, #4
16ef8     A7 FE 61 FC | 	wrlong	result3, fp
16efc     08 4E 85 F1 | 	sub	fp, #8
16f00     A7 16 02 FB | 	rdlong	arg03, fp
16f04     04 4E 05 F1 | 	add	fp, #4
16f08     A7 14 02 FB | 	rdlong	arg02, fp
16f0c     14 4E 05 F1 | 	add	fp, #20
16f10     A7 12 02 FB | 	rdlong	arg01, fp
16f14     04 12 66 F0 | 	shl	arg01, #4
16f18     14 00 00 FF 
16f1c     F8 E5 05 F1 | 	add	objptr, ##10744
16f20     F2 12 02 F1 | 	add	arg01, objptr
16f24     04 12 06 F1 | 	add	arg01, #4
16f28     09 17 62 FC | 	wrlong	arg03, arg01
16f2c     A7 16 02 FB | 	rdlong	arg03, fp
16f30     04 16 66 F0 | 	shl	arg03, #4
16f34     F2 16 02 F1 | 	add	arg03, objptr
16f38     08 16 06 F1 | 	add	arg03, #8
16f3c     0B 15 62 FC | 	wrlong	arg02, arg03
16f40     A7 16 02 FB | 	rdlong	arg03, fp
16f44     04 16 66 F0 | 	shl	arg03, #4
16f48     F2 16 02 F1 | 	add	arg03, objptr
16f4c     10 4E 85 F1 | 	sub	fp, #16
16f50     A7 14 02 FB | 	rdlong	arg02, fp
16f54     0C 16 06 F1 | 	add	arg03, #12
16f58     0B 15 62 FC | 	wrlong	arg02, arg03
16f5c                 | '   t1=pop() 
16f5c                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
16f5c                 | '   if variables(varnum).vartype<>result_string2 then return
16f5c     10 4E 05 F1 | 	add	fp, #16
16f60     A7 16 02 FB | 	rdlong	arg03, fp
16f64     18 4E 85 F1 | 	sub	fp, #24
16f68     04 16 66 F0 | 	shl	arg03, #4
16f6c     F2 16 02 F1 | 	add	arg03, objptr
16f70     0C 16 06 F1 | 	add	arg03, #12
16f74     0B 17 02 FB | 	rdlong	arg03, arg03
16f78     2B 16 0E F2 | 	cmp	arg03, #43 wz
16f7c     14 00 00 FF 
16f80     F8 E5 85 F1 | 	sub	objptr, ##10744
16f84     E4 04 90 5D |  if_ne	jmp	#LR__1953
16f88     18 4E 05 F1 | 	add	fp, #24
16f8c     A7 16 02 FB | 	rdlong	arg03, fp
16f90     0B 1F 02 F6 | 	mov	local01, arg03
16f94     04 1E 66 F0 | 	shl	local01, #4
16f98     14 00 00 FF 
16f9c     F8 E5 05 F1 | 	add	objptr, ##10744
16fa0     F2 1E 02 F1 | 	add	local01, objptr
16fa4     18 4E 85 F1 | 	sub	fp, #24
16fa8     04 16 66 F0 | 	shl	arg03, #4
16fac     F2 16 02 F1 | 	add	arg03, objptr
16fb0     04 16 06 F1 | 	add	arg03, #4
16fb4     0B 13 02 FB | 	rdlong	arg01, arg03
16fb8     14 00 00 FF 
16fbc     F8 E5 85 F1 | 	sub	objptr, ##10744
16fc0     50 45 BF FD | 	call	#_convertstring
16fc4     04 1E 06 F1 | 	add	local01, #4
16fc8     0F FB 61 FC | 	wrlong	result1, local01
16fcc     18 4E 05 F1 | 	add	fp, #24
16fd0     A7 1E 02 FB | 	rdlong	local01, fp
16fd4     18 4E 85 F1 | 	sub	fp, #24
16fd8     04 1E 66 F0 | 	shl	local01, #4
16fdc     14 00 00 FF 
16fe0     F8 E5 05 F1 | 	add	objptr, ##10744
16fe4     F2 1E 02 F1 | 	add	local01, objptr
16fe8     0C 1E 06 F1 | 	add	local01, #12
16fec     0F 3F 68 FC | 	wrlong	#31, local01
16ff0                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
16ff0                 | '   variables(varnum).vartype=result_string
16ff0                 | '   return
16ff0     14 00 00 FF 
16ff4     F8 E5 85 F1 | 	sub	objptr, ##10744
16ff8     70 04 90 FD | 	jmp	#LR__1953
16ffc                 | LR__1930
16ffc                 | ' for i=0 to 2 : arrid(i)=0 : next i
16ffc     1C 4E 05 F1 | 	add	fp, #28
17000     A7 00 68 FC | 	wrlong	#0, fp
17004     97 16 48 FB | 	callpa	#(@LR__1932-@LR__1931)>>2,fcache_load_ptr_
17008                 | LR__1931
17008     A7 1E 02 FB | 	rdlong	local01, fp
1700c     02 1E 66 F0 | 	shl	local01, #2
17010     18 4E 05 F1 | 	add	fp, #24
17014     A7 1E 02 F1 | 	add	local01, fp
17018     0F 01 68 FC | 	wrlong	#0, local01
1701c     18 4E 85 F1 | 	sub	fp, #24
17020     A7 1E 02 FB | 	rdlong	local01, fp
17024     01 1E 06 F1 | 	add	local01, #1
17028     A7 1E 62 FC | 	wrlong	local01, fp
1702c     03 1E 16 F2 | 	cmp	local01, #3 wc
17030     D4 FF 9F CD |  if_b	jmp	#LR__1931
17034                 | LR__1932
17034     4A 00 00 FF 
17038     80 E4 05 F1 | 	add	objptr, ##38016
1703c     F2 16 02 FB | 	rdlong	arg03, objptr
17040     0B 1F 02 F6 | 	mov	local01, arg03
17044     01 1E 66 F0 | 	shl	local01, #1
17048     0B 1F 02 F1 | 	add	local01, arg03
1704c     02 1E 66 F0 | 	shl	local01, #2
17050     03 00 00 FF 
17054     04 E4 85 F1 | 	sub	objptr, ##1540
17058     F2 1E 02 F1 | 	add	local01, objptr
1705c     04 1E 06 F1 | 	add	local01, #4
17060     0F 21 02 FB | 	rdlong	local02, local01
17064     04 4E 05 F1 | 	add	fp, #4
17068     A7 20 62 FC | 	wrlong	local02, fp
1706c     20 4E 85 F1 | 	sub	fp, #32
17070     47 00 00 FF 
17074     7C E4 85 F1 | 	sub	objptr, ##36476
17078     20 43 BF FD | 	call	#_pop
1707c     A7 FA 61 FC | 	wrlong	result1, fp
17080     04 4E 05 F1 | 	add	fp, #4
17084     A7 FC 61 FC | 	wrlong	result2, fp
17088     04 4E 05 F1 | 	add	fp, #4
1708c     A7 FE 61 FC | 	wrlong	result3, fp
17090                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
17090                 | ' t1=pop() ' var value
17090                 | ' if numpar>0 then
17090     18 4E 05 F1 | 	add	fp, #24
17094     A7 22 02 FB | 	rdlong	local03, fp
17098     20 4E 85 F1 | 	sub	fp, #32
1709c     01 22 16 F2 | 	cmp	local03, #1 wc
170a0     78 00 90 CD |  if_b	jmp	#LR__1935
170a4                 | '   for i=numpar to 1 step -1
170a4     20 4E 05 F1 | 	add	fp, #32
170a8     A7 24 0A FB | 	rdlong	local04, fp wz
170ac     04 4E 85 F1 | 	sub	fp, #4
170b0     A7 24 62 FC | 	wrlong	local04, fp
170b4     1C 4E 85 F1 | 	sub	fp, #28
170b8     60 00 90 AD |  if_e	jmp	#LR__1934
170bc                 | LR__1933
170bc     DC 42 BF FD | 	call	#_pop
170c0     0C 4E 05 F1 | 	add	fp, #12
170c4     A7 FA 61 FC | 	wrlong	result1, fp
170c8     04 4E 05 F1 | 	add	fp, #4
170cc     A7 FC 61 FC | 	wrlong	result2, fp
170d0     04 4E 05 F1 | 	add	fp, #4
170d4     A7 FE 61 FC | 	wrlong	result3, fp
170d8     08 4E 05 F1 | 	add	fp, #8
170dc     A7 22 02 FB | 	rdlong	local03, fp
170e0     01 22 86 F1 | 	sub	local03, #1
170e4     02 22 66 F0 | 	shl	local03, #2
170e8     18 4E 05 F1 | 	add	fp, #24
170ec     A7 22 02 F1 | 	add	local03, fp
170f0     28 4E 85 F1 | 	sub	fp, #40
170f4     A7 12 02 F6 | 	mov	arg01, fp
170f8     0C 4E 85 F1 | 	sub	fp, #12
170fc     80 44 BF FD | 	call	#_converttoint
17100     11 FB 61 FC | 	wrlong	result1, local03
17104     1C 4E 05 F1 | 	add	fp, #28
17108     A7 24 02 FB | 	rdlong	local04, fp
1710c     01 24 8E F1 | 	sub	local04, #1 wz
17110     A7 24 62 FC | 	wrlong	local04, fp
17114     1C 4E 85 F1 | 	sub	fp, #28
17118     A0 FF 9F 5D |  if_ne	jmp	#LR__1933
1711c                 | LR__1934
1711c                 | LR__1935
1711c     18 4E 05 F1 | 	add	fp, #24
17120     A7 1E 02 FB | 	rdlong	local01, fp
17124     04 1E 66 F0 | 	shl	local01, #4
17128     14 00 00 FF 
1712c     F8 E5 05 F1 | 	add	objptr, ##10744
17130     F2 1E 02 F1 | 	add	local01, objptr
17134     04 1E 06 F1 | 	add	local01, #4
17138     0F 13 02 FB | 	rdlong	arg01, local01
1713c     0C 4E 05 F1 | 	add	fp, #12
17140     A7 12 62 FC | 	wrlong	arg01, fp
17144     24 4E 85 F1 | 	sub	fp, #36
17148     14 00 00 FF 
1714c     F8 E5 85 F1 | 	sub	objptr, ##10744
17150     E0 63 B0 FD | 	call	#_pslpeek
17154     FD 24 32 F9 | 	getword	local04, result1, #0
17158     28 4E 05 F1 | 	add	fp, #40
1715c     A7 24 62 FC | 	wrlong	local04, fp
17160     04 4E 85 F1 | 	sub	fp, #4
17164     A7 12 02 FB | 	rdlong	arg01, fp
17168     24 4E 85 F1 | 	sub	fp, #36
1716c     02 12 06 F1 | 	add	arg01, #2
17170     68 63 B0 FD | 	call	#_pspeek
17174     FD FA E1 F8 | 	getbyte	result1, result1, #0
17178     2C 4E 05 F1 | 	add	fp, #44
1717c     A7 FA 61 FC | 	wrlong	result1, fp
17180                 | ' esize=pspeek(arrptr+2)
17180                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
17180     08 4E 85 F1 | 	sub	fp, #8
17184     A7 12 02 FB | 	rdlong	arg01, fp
17188     24 4E 85 F1 | 	sub	fp, #36
1718c     04 12 06 F1 | 	add	arg01, #4
17190     A0 63 B0 FD | 	call	#_pslpeek
17194     FD 24 02 F6 | 	mov	local04, result1
17198     34 4E 05 F1 | 	add	fp, #52
1719c     A7 1E 02 FB | 	rdlong	local01, fp
171a0     34 4E 85 F1 | 	sub	fp, #52
171a4     12 1F 12 F2 | 	cmp	local01, local04 wc
171a8     54 00 90 3D |  if_ae	jmp	#LR__1936
171ac     24 4E 05 F1 | 	add	fp, #36
171b0     A7 12 02 FB | 	rdlong	arg01, fp
171b4     24 4E 85 F1 | 	sub	fp, #36
171b8     08 12 06 F1 | 	add	arg01, #8
171bc     74 63 B0 FD | 	call	#_pslpeek
171c0     FD 1E 02 F6 | 	mov	local01, result1
171c4     38 4E 05 F1 | 	add	fp, #56
171c8     A7 24 02 FB | 	rdlong	local04, fp
171cc     38 4E 85 F1 | 	sub	fp, #56
171d0     0F 25 12 F2 | 	cmp	local04, local01 wc
171d4     28 00 90 3D |  if_ae	jmp	#LR__1936
171d8     24 4E 05 F1 | 	add	fp, #36
171dc     A7 12 02 FB | 	rdlong	arg01, fp
171e0     24 4E 85 F1 | 	sub	fp, #36
171e4     0C 12 06 F1 | 	add	arg01, #12
171e8     48 63 B0 FD | 	call	#_pslpeek
171ec     3C 4E 05 F1 | 	add	fp, #60
171f0     A7 24 02 FB | 	rdlong	local04, fp
171f4     3C 4E 85 F1 | 	sub	fp, #60
171f8     FD 24 12 F2 | 	cmp	local04, result1 wc
171fc     0C 00 90 CD |  if_b	jmp	#LR__1937
17200                 | LR__1936
17200     31 12 06 F6 | 	mov	arg01, #49
17204     98 60 B0 FD | 	call	#_printerror
17208     60 02 90 FD | 	jmp	#LR__1953
1720c                 | LR__1937
1720c     24 4E 05 F1 | 	add	fp, #36
17210     A7 12 02 FB | 	rdlong	arg01, fp
17214     09 25 02 F6 | 	mov	local04, arg01
17218     10 24 06 F1 | 	add	local04, #16
1721c     24 4E 85 F1 | 	sub	fp, #36
17220     04 12 06 F1 | 	add	arg01, #4
17224     0C 63 B0 FD | 	call	#_pslpeek
17228     FD 1E 02 F6 | 	mov	local01, result1
1722c     38 4E 05 F1 | 	add	fp, #56
17230     A7 20 02 FB | 	rdlong	local02, fp
17234     10 1F 02 FD | 	qmul	local01, local02
17238     04 4E 85 F1 | 	sub	fp, #4
1723c     A7 22 02 FB | 	rdlong	local03, fp
17240     10 4E 85 F1 | 	sub	fp, #16
17244     A7 12 02 FB | 	rdlong	arg01, fp
17248     24 4E 85 F1 | 	sub	fp, #36
1724c     08 12 06 F1 | 	add	arg01, #8
17250     18 20 62 FD | 	getqx	local02
17254     10 23 02 F1 | 	add	local03, local02
17258     D8 62 B0 FD | 	call	#_pslpeek
1725c     FD 20 02 F6 | 	mov	local02, result1
17260     24 4E 05 F1 | 	add	fp, #36
17264     A7 12 02 FB | 	rdlong	arg01, fp
17268     24 4E 85 F1 | 	sub	fp, #36
1726c     04 12 06 F1 | 	add	arg01, #4
17270     C0 62 B0 FD | 	call	#_pslpeek
17274     FD 20 02 FD | 	qmul	local02, result1
17278     3C 4E 05 F1 | 	add	fp, #60
1727c     A7 20 02 FB | 	rdlong	local02, fp
17280     18 1E 62 FD | 	getqx	local01
17284     10 1F 02 FD | 	qmul	local01, local02
17288     10 4E 85 F1 | 	sub	fp, #16
1728c     A7 20 02 FB | 	rdlong	local02, fp
17290     18 1E 62 FD | 	getqx	local01
17294     0F 23 02 F1 | 	add	local03, local01
17298     11 21 02 FD | 	qmul	local02, local03
1729c     04 4E 05 F1 | 	add	fp, #4
172a0                 | ' 
172a0                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
172a0                 | ' select case arrtype
172a0     18 22 62 FD | 	getqx	local03
172a4     11 25 02 F1 | 	add	local04, local03
172a8     A7 24 62 FC | 	wrlong	local04, fp
172ac     08 4E 85 F1 | 	sub	fp, #8
172b0     A7 26 02 FB | 	rdlong	local05, fp
172b4     28 4E 85 F1 | 	sub	fp, #40
172b8     00 27 86 F1 | 	sub	local05, #256
172bc     0C 26 26 F3 | 	fle	local05, #12
172c0     30 26 62 FD | 	jmprel	local05
172c4                 | LR__1938
172c4     30 00 90 FD | 	jmp	#LR__1939
172c8     58 00 90 FD | 	jmp	#LR__1940
172cc     6C 00 90 FD | 	jmp	#LR__1941
172d0     80 00 90 FD | 	jmp	#LR__1942
172d4     B0 00 90 FD | 	jmp	#LR__1943
172d8     E0 00 90 FD | 	jmp	#LR__1944
172dc     F4 00 90 FD | 	jmp	#LR__1945
172e0     08 01 90 FD | 	jmp	#LR__1946
172e4     1C 01 90 FD | 	jmp	#LR__1947
172e8     30 01 90 FD | 	jmp	#LR__1948
172ec     44 01 90 FD | 	jmp	#LR__1949
172f0     58 01 90 FD | 	jmp	#LR__1950
172f4     6C 01 90 FD | 	jmp	#LR__1951
172f8                 | LR__1939
172f8     A7 12 02 F6 | 	mov	arg01, fp
172fc     30 4E 05 F1 | 	add	fp, #48
17300     A7 14 02 FB | 	rdlong	arg02, fp
17304     30 4E 85 F1 | 	sub	fp, #48
17308     0C 16 06 F6 | 	mov	arg03, #12
1730c     0B 00 00 FF 
17310     CC E4 05 F1 | 	add	objptr, ##5836
17314     74 89 B0 FD | 	call	#_psram_spin2_write
17318     0B 00 00 FF 
1731c     CC E4 85 F1 | 	sub	objptr, ##5836
17320     48 01 90 FD | 	jmp	#LR__1952
17324                 | LR__1940
17324     30 4E 05 F1 | 	add	fp, #48
17328     A7 12 02 FB | 	rdlong	arg01, fp
1732c     30 4E 85 F1 | 	sub	fp, #48
17330     A7 14 02 FB | 	rdlong	arg02, fp
17334     5C 61 B0 FD | 	call	#_pspoke
17338     30 01 90 FD | 	jmp	#LR__1952
1733c                 | LR__1941
1733c     30 4E 05 F1 | 	add	fp, #48
17340     A7 12 02 FB | 	rdlong	arg01, fp
17344     30 4E 85 F1 | 	sub	fp, #48
17348     A7 14 02 FB | 	rdlong	arg02, fp
1734c     44 61 B0 FD | 	call	#_pspoke
17350     18 01 90 FD | 	jmp	#LR__1952
17354                 | LR__1942
17354     30 4E 05 F1 | 	add	fp, #48
17358     A7 12 02 FB | 	rdlong	arg01, fp
1735c     30 4E 85 F1 | 	sub	fp, #48
17360     A7 14 02 FB | 	rdlong	arg02, fp
17364     2C 61 B0 FD | 	call	#_pspoke
17368     30 4E 05 F1 | 	add	fp, #48
1736c     A7 12 02 FB | 	rdlong	arg01, fp
17370     30 4E 85 F1 | 	sub	fp, #48
17374     01 12 06 F1 | 	add	arg01, #1
17378     A7 14 02 FB | 	rdlong	arg02, fp
1737c     08 14 46 F0 | 	shr	arg02, #8
17380     10 61 B0 FD | 	call	#_pspoke
17384     E4 00 90 FD | 	jmp	#LR__1952
17388                 | LR__1943
17388     30 4E 05 F1 | 	add	fp, #48
1738c     A7 12 02 FB | 	rdlong	arg01, fp
17390     30 4E 85 F1 | 	sub	fp, #48
17394     A7 14 02 FB | 	rdlong	arg02, fp
17398     F8 60 B0 FD | 	call	#_pspoke
1739c     30 4E 05 F1 | 	add	fp, #48
173a0     A7 12 02 FB | 	rdlong	arg01, fp
173a4     30 4E 85 F1 | 	sub	fp, #48
173a8     01 12 06 F1 | 	add	arg01, #1
173ac     A7 14 02 FB | 	rdlong	arg02, fp
173b0     08 14 46 F0 | 	shr	arg02, #8
173b4     DC 60 B0 FD | 	call	#_pspoke
173b8     B0 00 90 FD | 	jmp	#LR__1952
173bc                 | LR__1944
173bc     30 4E 05 F1 | 	add	fp, #48
173c0     A7 12 02 FB | 	rdlong	arg01, fp
173c4     30 4E 85 F1 | 	sub	fp, #48
173c8     A7 14 02 FB | 	rdlong	arg02, fp
173cc     34 60 B0 FD | 	call	#_pslpoke
173d0     98 00 90 FD | 	jmp	#LR__1952
173d4                 | LR__1945
173d4     30 4E 05 F1 | 	add	fp, #48
173d8     A7 12 02 FB | 	rdlong	arg01, fp
173dc     30 4E 85 F1 | 	sub	fp, #48
173e0     A7 14 02 FB | 	rdlong	arg02, fp
173e4     1C 60 B0 FD | 	call	#_pslpoke
173e8     80 00 90 FD | 	jmp	#LR__1952
173ec                 | LR__1946
173ec     30 4E 05 F1 | 	add	fp, #48
173f0     A7 12 02 FB | 	rdlong	arg01, fp
173f4     30 4E 85 F1 | 	sub	fp, #48
173f8     A7 14 02 FB | 	rdlong	arg02, fp
173fc     04 60 B0 FD | 	call	#_pslpoke
17400     68 00 90 FD | 	jmp	#LR__1952
17404                 | LR__1947
17404     30 4E 05 F1 | 	add	fp, #48
17408     A7 12 02 FB | 	rdlong	arg01, fp
1740c     30 4E 85 F1 | 	sub	fp, #48
17410     A7 14 02 FB | 	rdlong	arg02, fp
17414     EC 5F B0 FD | 	call	#_pslpoke
17418     50 00 90 FD | 	jmp	#LR__1952
1741c                 | LR__1948
1741c     30 4E 05 F1 | 	add	fp, #48
17420     A7 12 02 FB | 	rdlong	arg01, fp
17424     30 4E 85 F1 | 	sub	fp, #48
17428     A7 14 02 FB | 	rdlong	arg02, fp
1742c     D4 5F B0 FD | 	call	#_pslpoke
17430     38 00 90 FD | 	jmp	#LR__1952
17434                 | LR__1949
17434     30 4E 05 F1 | 	add	fp, #48
17438     A7 12 02 FB | 	rdlong	arg01, fp
1743c     30 4E 85 F1 | 	sub	fp, #48
17440     A7 14 02 FB | 	rdlong	arg02, fp
17444     BC 5F B0 FD | 	call	#_pslpoke
17448     20 00 90 FD | 	jmp	#LR__1952
1744c                 | LR__1950
1744c     30 4E 05 F1 | 	add	fp, #48
17450     A7 12 02 FB | 	rdlong	arg01, fp
17454     30 4E 85 F1 | 	sub	fp, #48
17458     A7 14 02 FB | 	rdlong	arg02, fp
1745c     A4 5F B0 FD | 	call	#_pslpoke
17460     08 00 90 FD | 	jmp	#LR__1952
17464                 | LR__1951
17464     32 12 06 F6 | 	mov	arg01, #50
17468     34 5E B0 FD | 	call	#_printerror
1746c                 | LR__1952
1746c                 | LR__1953
1746c     A7 F0 03 F6 | 	mov	ptra, fp
17470     B2 00 A0 FD | 	call	#popregs_
17474                 | _do_assign_ret
17474     2D 00 64 FD | 	ret
17478                 | 
17478                 | ' 
17478                 | ' 
17478                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
17478                 | ' 
17478                 | ' sub do_getvar
17478                 | _do_getvar
17478     04 4A 05 F6 | 	mov	COUNT_, #4
1747c     A8 00 A0 FD | 	call	#pushregs_
17480     3C F0 07 F1 | 	add	ptra, #60
17484                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
17484     4A 00 00 FF 
17488     80 E4 05 F1 | 	add	objptr, ##38016
1748c     F2 1E 02 FB | 	rdlong	local01, objptr
17490     0F 17 02 F6 | 	mov	arg03, local01
17494     01 16 66 F0 | 	shl	arg03, #1
17498     0F 17 02 F1 | 	add	arg03, local01
1749c     02 16 66 F0 | 	shl	arg03, #2
174a0     03 00 00 FF 
174a4     04 E4 85 F1 | 	sub	objptr, ##1540
174a8     F2 16 02 F1 | 	add	arg03, objptr
174ac     04 16 06 F1 | 	add	arg03, #4
174b0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
174b4     47 00 00 FF 
174b8     7C E4 85 F1 | 	sub	objptr, ##36476
174bc     C4 00 90 5D |  if_ne	jmp	#LR__1961
174c0     4A 00 00 FF 
174c4     80 E4 05 F1 | 	add	objptr, ##38016
174c8     F2 1E 02 FB | 	rdlong	local01, objptr
174cc     0F 13 02 F6 | 	mov	arg01, local01
174d0     01 12 66 F0 | 	shl	arg01, #1
174d4     0F 13 02 F1 | 	add	arg01, local01
174d8     02 12 66 F0 | 	shl	arg01, #2
174dc     03 00 00 FF 
174e0     04 E4 85 F1 | 	sub	objptr, ##1540
174e4     F2 12 02 F1 | 	add	arg01, objptr
174e8     09 1F 02 FB | 	rdlong	local01, arg01
174ec     04 1E 66 F0 | 	shl	local01, #4
174f0     32 00 00 FF 
174f4     84 E4 85 F1 | 	sub	objptr, ##25732
174f8     F2 1E 02 F1 | 	add	local01, objptr
174fc     04 1E 06 F1 | 	add	local01, #4
17500     0F 13 02 FB | 	rdlong	arg01, local01
17504     04 1E 06 F1 | 	add	local01, #4
17508     0F 1F 02 FB | 	rdlong	local01, local01
1750c     A7 12 62 FC | 	wrlong	arg01, fp
17510     04 4E 05 F1 | 	add	fp, #4
17514     A7 1E 62 FC | 	wrlong	local01, fp
17518     35 00 00 FF 
1751c     88 E4 05 F1 | 	add	objptr, ##27272
17520     F2 1E 02 FB | 	rdlong	local01, objptr
17524     0F 13 02 F6 | 	mov	arg01, local01
17528     01 12 66 F0 | 	shl	arg01, #1
1752c     0F 13 02 F1 | 	add	arg01, local01
17530     02 12 66 F0 | 	shl	arg01, #2
17534     03 00 00 FF 
17538     04 E4 85 F1 | 	sub	objptr, ##1540
1753c     F2 12 02 F1 | 	add	arg01, objptr
17540     09 1F 02 FB | 	rdlong	local01, arg01
17544     04 1E 66 F0 | 	shl	local01, #4
17548     32 00 00 FF 
1754c     84 E4 85 F1 | 	sub	objptr, ##25732
17550     F2 1E 02 F1 | 	add	local01, objptr
17554     0C 1E 06 F1 | 	add	local01, #12
17558     0F 1F 02 FB | 	rdlong	local01, local01
1755c     04 4E 05 F1 | 	add	fp, #4
17560     A7 1E 62 FC | 	wrlong	local01, fp
17564                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
17564                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
17564                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
17564     08 4E 85 F1 | 	sub	fp, #8
17568     00 1F 16 F2 | 	cmp	local01, #256 wc
1756c     14 00 00 FF 
17570     F8 E5 85 F1 | 	sub	objptr, ##10744
17574     0C 00 90 3D |  if_ae	jmp	#LR__1960
17578     A7 12 02 F6 | 	mov	arg01, fp
1757c     B4 3E BF FD | 	call	#_push
17580     A0 04 90 FD | 	jmp	#LR__1982
17584                 | LR__1960
17584                 | LR__1961
17584     4A 00 00 FF 
17588     80 E4 05 F1 | 	add	objptr, ##38016
1758c     F2 16 02 FB | 	rdlong	arg03, objptr
17590     0B 15 02 F6 | 	mov	arg02, arg03
17594     01 14 66 F0 | 	shl	arg02, #1
17598     0B 15 02 F1 | 	add	arg02, arg03
1759c     02 14 66 F0 | 	shl	arg02, #2
175a0     03 00 00 FF 
175a4     04 E4 85 F1 | 	sub	objptr, ##1540
175a8     F2 14 02 F1 | 	add	arg02, objptr
175ac     0A 17 02 FB | 	rdlong	arg03, arg02
175b0     04 16 66 F0 | 	shl	arg03, #4
175b4     32 00 00 FF 
175b8     84 E4 85 F1 | 	sub	objptr, ##25732
175bc     F2 16 02 F1 | 	add	arg03, objptr
175c0     04 16 06 F1 | 	add	arg03, #4
175c4     0B 13 02 FB | 	rdlong	arg01, arg03
175c8     0C 4E 05 F1 | 	add	fp, #12
175cc     A7 12 62 FC | 	wrlong	arg01, fp
175d0     0C 4E 85 F1 | 	sub	fp, #12
175d4     14 00 00 FF 
175d8     F8 E5 85 F1 | 	sub	objptr, ##10744
175dc     54 5F B0 FD | 	call	#_pslpeek
175e0     FD FA 31 F9 | 	getword	result1, result1, #0
175e4     10 4E 05 F1 | 	add	fp, #16
175e8     A7 FA 61 FC | 	wrlong	result1, fp
175ec     4A 00 00 FF 
175f0     80 E4 05 F1 | 	add	objptr, ##38016
175f4     F2 16 02 FB | 	rdlong	arg03, objptr
175f8     0B 15 02 F6 | 	mov	arg02, arg03
175fc     01 14 66 F0 | 	shl	arg02, #1
17600     0B 15 02 F1 | 	add	arg02, arg03
17604     02 14 66 F0 | 	shl	arg02, #2
17608     03 00 00 FF 
1760c     04 E4 85 F1 | 	sub	objptr, ##1540
17610     F2 14 02 F1 | 	add	arg02, objptr
17614     04 14 06 F1 | 	add	arg02, #4
17618     0A 17 02 FB | 	rdlong	arg03, arg02
1761c     04 4E 05 F1 | 	add	fp, #4
17620     A7 16 62 FC | 	wrlong	arg03, fp
17624     08 4E 85 F1 | 	sub	fp, #8
17628     A7 12 02 FB | 	rdlong	arg01, fp
1762c     0C 4E 85 F1 | 	sub	fp, #12
17630     02 12 06 F1 | 	add	arg01, #2
17634     47 00 00 FF 
17638     7C E4 85 F1 | 	sub	objptr, ##36476
1763c     9C 5E B0 FD | 	call	#_pspeek
17640     FD FA E1 F8 | 	getbyte	result1, result1, #0
17644     18 4E 05 F1 | 	add	fp, #24
17648     A7 FA 61 FC | 	wrlong	result1, fp
1764c     0C 4E 85 F1 | 	sub	fp, #12
17650     A7 12 02 FB | 	rdlong	arg01, fp
17654     0C 4E 85 F1 | 	sub	fp, #12
17658     04 12 06 F1 | 	add	arg01, #4
1765c     D4 5E B0 FD | 	call	#_pslpeek
17660     1C 4E 05 F1 | 	add	fp, #28
17664     A7 FA 61 FC | 	wrlong	result1, fp
17668     10 4E 85 F1 | 	sub	fp, #16
1766c     A7 12 02 FB | 	rdlong	arg01, fp
17670     0C 4E 85 F1 | 	sub	fp, #12
17674     08 12 06 F1 | 	add	arg01, #8
17678     B8 5E B0 FD | 	call	#_pslpeek
1767c     20 4E 05 F1 | 	add	fp, #32
17680     A7 FA 61 FC | 	wrlong	result1, fp
17684     14 4E 85 F1 | 	sub	fp, #20
17688     A7 12 02 FB | 	rdlong	arg01, fp
1768c     0C 4E 85 F1 | 	sub	fp, #12
17690     0C 12 06 F1 | 	add	arg01, #12
17694     9C 5E B0 FD | 	call	#_pslpeek
17698     24 4E 05 F1 | 	add	fp, #36
1769c     A7 FA 61 FC | 	wrlong	result1, fp
176a0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
176a0                 | ' esize=pspeek(arrptr+2)
176a0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
176a0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
176a0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
176a0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
176a0     10 4E 85 F1 | 	sub	fp, #16
176a4     A7 16 02 FB | 	rdlong	arg03, fp
176a8     14 4E 85 F1 | 	sub	fp, #20
176ac     03 16 16 F2 | 	cmp	arg03, #3 wc
176b0     38 00 90 CD |  if_b	jmp	#LR__1962
176b4     E4 3C BF FD | 	call	#_pop
176b8     FF 16 02 F6 | 	mov	arg03, result3
176bc     A7 FA 61 FC | 	wrlong	result1, fp
176c0     04 4E 05 F1 | 	add	fp, #4
176c4     A7 FC 61 FC | 	wrlong	result2, fp
176c8     04 4E 05 F1 | 	add	fp, #4
176cc     A7 16 62 FC | 	wrlong	arg03, fp
176d0     08 4E 85 F1 | 	sub	fp, #8
176d4     A7 12 02 F6 | 	mov	arg01, fp
176d8     A4 3E BF FD | 	call	#_converttoint
176dc     30 4E 05 F1 | 	add	fp, #48
176e0     A7 FA 61 FC | 	wrlong	result1, fp
176e4     30 4E 85 F1 | 	sub	fp, #48
176e8     0C 00 90 FD | 	jmp	#LR__1963
176ec                 | LR__1962
176ec     30 4E 05 F1 | 	add	fp, #48
176f0     A7 00 68 FC | 	wrlong	#0, fp
176f4     30 4E 85 F1 | 	sub	fp, #48
176f8                 | LR__1963
176f8                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
176f8     14 4E 05 F1 | 	add	fp, #20
176fc     A7 16 02 FB | 	rdlong	arg03, fp
17700     14 4E 85 F1 | 	sub	fp, #20
17704     02 16 16 F2 | 	cmp	arg03, #2 wc
17708     38 00 90 CD |  if_b	jmp	#LR__1964
1770c     8C 3C BF FD | 	call	#_pop
17710     FF 16 02 F6 | 	mov	arg03, result3
17714     A7 FA 61 FC | 	wrlong	result1, fp
17718     04 4E 05 F1 | 	add	fp, #4
1771c     A7 FC 61 FC | 	wrlong	result2, fp
17720     04 4E 05 F1 | 	add	fp, #4
17724     A7 16 62 FC | 	wrlong	arg03, fp
17728     08 4E 85 F1 | 	sub	fp, #8
1772c     A7 12 02 F6 | 	mov	arg01, fp
17730     4C 3E BF FD | 	call	#_converttoint
17734     2C 4E 05 F1 | 	add	fp, #44
17738     A7 FA 61 FC | 	wrlong	result1, fp
1773c     2C 4E 85 F1 | 	sub	fp, #44
17740     0C 00 90 FD | 	jmp	#LR__1965
17744                 | LR__1964
17744     2C 4E 05 F1 | 	add	fp, #44
17748     A7 00 68 FC | 	wrlong	#0, fp
1774c     2C 4E 85 F1 | 	sub	fp, #44
17750                 | LR__1965
17750                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
17750     14 4E 05 F1 | 	add	fp, #20
17754     A7 16 02 FB | 	rdlong	arg03, fp
17758     14 4E 85 F1 | 	sub	fp, #20
1775c     01 16 16 F2 | 	cmp	arg03, #1 wc
17760     38 00 90 CD |  if_b	jmp	#LR__1966
17764     34 3C BF FD | 	call	#_pop
17768     FF 16 02 F6 | 	mov	arg03, result3
1776c     A7 FA 61 FC | 	wrlong	result1, fp
17770     04 4E 05 F1 | 	add	fp, #4
17774     A7 FC 61 FC | 	wrlong	result2, fp
17778     04 4E 05 F1 | 	add	fp, #4
1777c     A7 16 62 FC | 	wrlong	arg03, fp
17780     08 4E 85 F1 | 	sub	fp, #8
17784     A7 12 02 F6 | 	mov	arg01, fp
17788     F4 3D BF FD | 	call	#_converttoint
1778c     28 4E 05 F1 | 	add	fp, #40
17790     A7 FA 61 FC | 	wrlong	result1, fp
17794     28 4E 85 F1 | 	sub	fp, #40
17798     0C 00 90 FD | 	jmp	#LR__1967
1779c                 | LR__1966
1779c     28 4E 05 F1 | 	add	fp, #40
177a0     A7 00 68 FC | 	wrlong	#0, fp
177a4     28 4E 85 F1 | 	sub	fp, #40
177a8                 | LR__1967
177a8     0C 4E 05 F1 | 	add	fp, #12
177ac     A7 20 02 FB | 	rdlong	local02, fp
177b0     1C 4E 05 F1 | 	add	fp, #28
177b4     A7 22 02 FB | 	rdlong	local03, fp
177b8     04 4E 05 F1 | 	add	fp, #4
177bc     A7 FC 01 FB | 	rdlong	result2, fp
177c0     10 4E 85 F1 | 	sub	fp, #16
177c4     A7 FE 01 FB | 	rdlong	result3, fp
177c8     FF FC 01 FD | 	qmul	result2, result3
177cc     10 20 06 F1 | 	add	local02, #16
177d0     14 4E 05 F1 | 	add	fp, #20
177d4     A7 FC 01 FB | 	rdlong	result2, fp
177d8     18 FA 61 FD | 	getqx	result1
177dc     FF FC 01 FD | 	qmul	result2, result3
177e0     FD 22 02 F1 | 	add	local03, result1
177e4     10 4E 85 F1 | 	sub	fp, #16
177e8     A7 FE 01 FB | 	rdlong	result3, fp
177ec     18 FC 61 FD | 	getqx	result2
177f0     FF FC 01 FD | 	qmul	result2, result3
177f4     08 4E 85 F1 | 	sub	fp, #8
177f8     A7 FE 01 FB | 	rdlong	result3, fp
177fc     18 FC 61 FD | 	getqx	result2
17800     FE 22 02 F1 | 	add	local03, result2
17804     FF 22 02 FD | 	qmul	local03, result3
17808     1C 4E 05 F1 | 	add	fp, #28
1780c                 | ' 
1780c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1780c                 | ' 
1780c                 | ' select case vartype
1780c     18 FC 61 FD | 	getqx	result2
17810     FE 20 02 F1 | 	add	local02, result2
17814     A7 20 62 FC | 	wrlong	local02, fp
17818     24 4E 85 F1 | 	sub	fp, #36
1781c     A7 24 02 FB | 	rdlong	local04, fp
17820     10 4E 85 F1 | 	sub	fp, #16
17824     00 25 86 F1 | 	sub	local04, #256
17828     0C 24 26 F3 | 	fle	local04, #12
1782c     30 24 62 FD | 	jmprel	local04
17830                 | LR__1968
17830     30 00 90 FD | 	jmp	#LR__1969
17834     58 00 90 FD | 	jmp	#LR__1970
17838     8C 00 90 FD | 	jmp	#LR__1971
1783c     AC 00 90 FD | 	jmp	#LR__1972
17840     E8 00 90 FD | 	jmp	#LR__1973
17844     08 01 90 FD | 	jmp	#LR__1974
17848     24 01 90 FD | 	jmp	#LR__1975
1784c     40 01 90 FD | 	jmp	#LR__1976
17850     50 01 90 FD | 	jmp	#LR__1977
17854     60 01 90 FD | 	jmp	#LR__1978
17858     7C 01 90 FD | 	jmp	#LR__1979
1785c     8C 01 90 FD | 	jmp	#LR__1980
17860     B8 01 90 FD | 	jmp	#LR__1981
17864                 | LR__1969
17864     A7 12 02 F6 | 	mov	arg01, fp
17868     34 4E 05 F1 | 	add	fp, #52
1786c     A7 14 02 FB | 	rdlong	arg02, fp
17870     34 4E 85 F1 | 	sub	fp, #52
17874     0C 16 06 F6 | 	mov	arg03, #12
17878     0B 00 00 FF 
1787c     CC E4 05 F1 | 	add	objptr, ##5836
17880     6C 83 B0 FD | 	call	#_psram_spin2_read1
17884     0B 00 00 FF 
17888     CC E4 85 F1 | 	sub	objptr, ##5836
1788c     8C 01 90 FD | 	jmp	#LR__1981
17890                 | LR__1970
17890     08 4E 05 F1 | 	add	fp, #8
17894     A7 38 68 FC | 	wrlong	#28, fp
17898     2C 4E 05 F1 | 	add	fp, #44
1789c     A7 12 02 FB | 	rdlong	arg01, fp
178a0     34 4E 85 F1 | 	sub	fp, #52
178a4     34 5C B0 FD | 	call	#_pspeek
178a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
178ac     A7 FA 61 FC | 	wrlong	result1, fp
178b0     80 FA 15 F2 | 	cmp	result1, #128 wc
178b4     00 1F 66 36 |  if_ae	neg	local01, #256
178b8     A7 22 02 3B |  if_ae	rdlong	local03, fp
178bc     11 1F 42 35 |  if_ae	or	local01, local03
178c0     A7 1E 62 3C |  if_ae	wrlong	local01, fp
178c4     54 01 90 FD | 	jmp	#LR__1981
178c8                 | LR__1971
178c8     08 4E 05 F1 | 	add	fp, #8
178cc     A7 3A 68 FC | 	wrlong	#29, fp
178d0     2C 4E 05 F1 | 	add	fp, #44
178d4     A7 12 02 FB | 	rdlong	arg01, fp
178d8     34 4E 85 F1 | 	sub	fp, #52
178dc     FC 5B B0 FD | 	call	#_pspeek
178e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
178e4     A7 FA 61 FC | 	wrlong	result1, fp
178e8     30 01 90 FD | 	jmp	#LR__1981
178ec                 | LR__1972
178ec     08 4E 05 F1 | 	add	fp, #8
178f0     A7 38 68 FC | 	wrlong	#28, fp
178f4     2C 4E 05 F1 | 	add	fp, #44
178f8     A7 12 02 FB | 	rdlong	arg01, fp
178fc     34 4E 85 F1 | 	sub	fp, #52
17900     30 5C B0 FD | 	call	#_pslpeek
17904     FD FA 31 F9 | 	getword	result1, result1, #0
17908     A7 FA 61 FC | 	wrlong	result1, fp
1790c     40 00 00 FF 
17910     00 FA 15 F2 | 	cmp	result1, ##32768 wc
17914     FF 7F 00 3F 
17918     00 1F 06 36 |  if_ae	mov	local01, ##16776960
1791c     A7 22 02 3B |  if_ae	rdlong	local03, fp
17920     11 1F 42 35 |  if_ae	or	local01, local03
17924     A7 1E 62 3C |  if_ae	wrlong	local01, fp
17928     F0 00 90 FD | 	jmp	#LR__1981
1792c                 | LR__1973
1792c     08 4E 05 F1 | 	add	fp, #8
17930     A7 3A 68 FC | 	wrlong	#29, fp
17934     2C 4E 05 F1 | 	add	fp, #44
17938     A7 12 02 FB | 	rdlong	arg01, fp
1793c     34 4E 85 F1 | 	sub	fp, #52
17940     F0 5B B0 FD | 	call	#_pslpeek
17944     FD FA 31 F9 | 	getword	result1, result1, #0
17948     A7 FA 61 FC | 	wrlong	result1, fp
1794c     CC 00 90 FD | 	jmp	#LR__1981
17950                 | LR__1974
17950     08 4E 05 F1 | 	add	fp, #8
17954     A7 38 68 FC | 	wrlong	#28, fp
17958     2C 4E 05 F1 | 	add	fp, #44
1795c     A7 12 02 FB | 	rdlong	arg01, fp
17960     34 4E 85 F1 | 	sub	fp, #52
17964     CC 5B B0 FD | 	call	#_pslpeek
17968     A7 FA 61 FC | 	wrlong	result1, fp
1796c     AC 00 90 FD | 	jmp	#LR__1981
17970                 | LR__1975
17970     08 4E 05 F1 | 	add	fp, #8
17974     A7 3A 68 FC | 	wrlong	#29, fp
17978     2C 4E 05 F1 | 	add	fp, #44
1797c     A7 12 02 FB | 	rdlong	arg01, fp
17980     34 4E 85 F1 | 	sub	fp, #52
17984     AC 5B B0 FD | 	call	#_pslpeek
17988     A7 FA 61 FC | 	wrlong	result1, fp
1798c     8C 00 90 FD | 	jmp	#LR__1981
17990                 | LR__1976
17990     08 4E 05 F1 | 	add	fp, #8
17994     A7 FE 69 FC | 	wrlong	#255, fp
17998     08 4E 85 F1 | 	sub	fp, #8
1799c     A7 60 68 FC | 	wrlong	#48, fp
179a0     78 00 90 FD | 	jmp	#LR__1981
179a4                 | LR__1977
179a4     08 4E 05 F1 | 	add	fp, #8
179a8     A7 FE 69 FC | 	wrlong	#255, fp
179ac     08 4E 85 F1 | 	sub	fp, #8
179b0     A7 60 68 FC | 	wrlong	#48, fp
179b4     64 00 90 FD | 	jmp	#LR__1981
179b8                 | LR__1978
179b8     08 4E 05 F1 | 	add	fp, #8
179bc     A7 3C 68 FC | 	wrlong	#30, fp
179c0     2C 4E 05 F1 | 	add	fp, #44
179c4     A7 12 02 FB | 	rdlong	arg01, fp
179c8     34 4E 85 F1 | 	sub	fp, #52
179cc     64 5B B0 FD | 	call	#_pslpeek
179d0     A7 FA 61 FC | 	wrlong	result1, fp
179d4     44 00 90 FD | 	jmp	#LR__1981
179d8                 | LR__1979
179d8     08 4E 05 F1 | 	add	fp, #8
179dc     A7 FE 69 FC | 	wrlong	#255, fp
179e0     08 4E 85 F1 | 	sub	fp, #8
179e4     A7 60 68 FC | 	wrlong	#48, fp
179e8     30 00 90 FD | 	jmp	#LR__1981
179ec                 | LR__1980
179ec     08 4E 05 F1 | 	add	fp, #8
179f0     A7 3E 68 FC | 	wrlong	#31, fp
179f4     2C 4E 05 F1 | 	add	fp, #44
179f8     A7 12 02 FB | 	rdlong	arg01, fp
179fc     34 4E 85 F1 | 	sub	fp, #52
17a00     30 5B B0 FD | 	call	#_pslpeek
17a04     A7 FA 61 FC | 	wrlong	result1, fp
17a08     00 04 00 FF 
17a0c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17a10     08 4E 05 31 |  if_ae	add	fp, #8
17a14     A7 56 68 3C |  if_ae	wrlong	#43, fp
17a18     08 4E 85 31 |  if_ae	sub	fp, #8
17a1c                 | LR__1981
17a1c     A7 12 02 F6 | 	mov	arg01, fp
17a20     10 3A BF FD | 	call	#_push
17a24                 | LR__1982
17a24     A7 F0 03 F6 | 	mov	ptra, fp
17a28     B2 00 A0 FD | 	call	#popregs_
17a2c                 | _do_getvar_ret
17a2c     2D 00 64 FD | 	ret
17a30                 | 
17a30                 | ' 
17a30                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
17a30                 | ' 
17a30                 | ' sub do_getaddr
17a30                 | _do_getaddr
17a30     01 4A 05 F6 | 	mov	COUNT_, #1
17a34     A8 00 A0 FD | 	call	#pushregs_
17a38     38 F0 07 F1 | 	add	ptra, #56
17a3c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
17a3c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
17a3c     4A 00 00 FF 
17a40     80 E4 05 F1 | 	add	objptr, ##38016
17a44     F2 12 02 FB | 	rdlong	arg01, objptr
17a48     09 FD 01 F6 | 	mov	result2, arg01
17a4c     01 FC 65 F0 | 	shl	result2, #1
17a50     09 FD 01 F1 | 	add	result2, arg01
17a54     02 FC 65 F0 | 	shl	result2, #2
17a58     03 00 00 FF 
17a5c     04 E4 85 F1 | 	sub	objptr, ##1540
17a60     F2 FC 01 F1 | 	add	result2, objptr
17a64     04 FC 05 F1 | 	add	result2, #4
17a68     FE FC 09 FB | 	rdlong	result2, result2 wz
17a6c     47 00 00 FF 
17a70     7C E4 85 F1 | 	sub	objptr, ##36476
17a74     C4 00 90 5D |  if_ne	jmp	#LR__1990
17a78     4A 00 00 FF 
17a7c     80 E4 05 F1 | 	add	objptr, ##38016
17a80     F2 12 02 FB | 	rdlong	arg01, objptr
17a84     09 FD 01 F6 | 	mov	result2, arg01
17a88     01 FC 65 F0 | 	shl	result2, #1
17a8c     09 FD 01 F1 | 	add	result2, arg01
17a90     02 FC 65 F0 | 	shl	result2, #2
17a94     03 00 00 FF 
17a98     04 E4 85 F1 | 	sub	objptr, ##1540
17a9c     F2 FC 01 F1 | 	add	result2, objptr
17aa0     FE 12 02 FB | 	rdlong	arg01, result2
17aa4     04 12 66 F0 | 	shl	arg01, #4
17aa8     32 00 00 FF 
17aac     84 E4 85 F1 | 	sub	objptr, ##25732
17ab0     F2 12 02 F1 | 	add	arg01, objptr
17ab4     0C 12 06 F1 | 	add	arg01, #12
17ab8     09 13 02 FB | 	rdlong	arg01, arg01
17abc     08 4E 05 F1 | 	add	fp, #8
17ac0     A7 12 62 FC | 	wrlong	arg01, fp
17ac4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
17ac4                 | '    if t1.result_type>=array_no_type then goto 2200
17ac4     08 4E 85 F1 | 	sub	fp, #8
17ac8     00 13 16 F2 | 	cmp	arg01, #256 wc
17acc     14 00 00 FF 
17ad0     F8 E5 85 F1 | 	sub	objptr, ##10744
17ad4     64 00 90 3D |  if_ae	jmp	#LR__1991
17ad8     4A 00 00 FF 
17adc     80 E4 05 F1 | 	add	objptr, ##38016
17ae0     F2 12 02 FB | 	rdlong	arg01, objptr
17ae4     09 FB 01 F6 | 	mov	result1, arg01
17ae8     01 FA 65 F0 | 	shl	result1, #1
17aec     09 FB 01 F1 | 	add	result1, arg01
17af0     02 FA 65 F0 | 	shl	result1, #2
17af4     03 00 00 FF 
17af8     04 E4 85 F1 | 	sub	objptr, ##1540
17afc     F2 FA 01 F1 | 	add	result1, objptr
17b00     FD FA 01 FB | 	rdlong	result1, result1
17b04     04 FA 65 F0 | 	shl	result1, #4
17b08     32 00 00 FF 
17b0c     84 E4 85 F1 | 	sub	objptr, ##25732
17b10     F2 FA 01 F1 | 	add	result1, objptr
17b14     04 FA 05 F1 | 	add	result1, #4
17b18     14 00 00 FF 
17b1c     F8 E5 85 F1 | 	sub	objptr, ##10744
17b20     A7 FA 61 FC | 	wrlong	result1, fp
17b24     08 4E 05 F1 | 	add	fp, #8
17b28     A7 3A 68 FC | 	wrlong	#29, fp
17b2c     08 4E 85 F1 | 	sub	fp, #8
17b30     A7 12 02 F6 | 	mov	arg01, fp
17b34     FC 38 BF FD | 	call	#_push
17b38                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
17b38                 | '   t1.result_type=result_uint
17b38                 | '   push t1 : return
17b38     D8 02 90 FD | 	jmp	#LR__2000
17b3c                 | LR__1990
17b3c                 | LR__1991
17b3c     4A 00 00 FF 
17b40     80 E4 05 F1 | 	add	objptr, ##38016
17b44     F2 FE 01 FB | 	rdlong	result3, objptr
17b48     FF 12 02 F6 | 	mov	arg01, result3
17b4c     01 12 66 F0 | 	shl	arg01, #1
17b50     FF 12 02 F1 | 	add	arg01, result3
17b54     02 12 66 F0 | 	shl	arg01, #2
17b58     03 00 00 FF 
17b5c     04 E4 85 F1 | 	sub	objptr, ##1540
17b60     F2 12 02 F1 | 	add	arg01, objptr
17b64     09 13 02 FB | 	rdlong	arg01, arg01
17b68     04 12 66 F0 | 	shl	arg01, #4
17b6c     32 00 00 FF 
17b70     84 E4 85 F1 | 	sub	objptr, ##25732
17b74     F2 12 02 F1 | 	add	arg01, objptr
17b78     04 12 06 F1 | 	add	arg01, #4
17b7c     09 13 02 FB | 	rdlong	arg01, arg01
17b80     0C 4E 05 F1 | 	add	fp, #12
17b84     A7 12 62 FC | 	wrlong	arg01, fp
17b88     0C 4E 85 F1 | 	sub	fp, #12
17b8c     14 00 00 FF 
17b90     F8 E5 85 F1 | 	sub	objptr, ##10744
17b94     9C 59 B0 FD | 	call	#_pslpeek
17b98     FD FA 31 F9 | 	getword	result1, result1, #0
17b9c     10 4E 05 F1 | 	add	fp, #16
17ba0     A7 FA 61 FC | 	wrlong	result1, fp
17ba4     4A 00 00 FF 
17ba8     80 E4 05 F1 | 	add	objptr, ##38016
17bac     F2 FE 01 FB | 	rdlong	result3, objptr
17bb0     FF 12 02 F6 | 	mov	arg01, result3
17bb4     01 12 66 F0 | 	shl	arg01, #1
17bb8     FF 12 02 F1 | 	add	arg01, result3
17bbc     02 12 66 F0 | 	shl	arg01, #2
17bc0     03 00 00 FF 
17bc4     04 E4 85 F1 | 	sub	objptr, ##1540
17bc8     F2 12 02 F1 | 	add	arg01, objptr
17bcc     04 12 06 F1 | 	add	arg01, #4
17bd0     09 13 02 FB | 	rdlong	arg01, arg01
17bd4     04 4E 05 F1 | 	add	fp, #4
17bd8     A7 12 62 FC | 	wrlong	arg01, fp
17bdc     08 4E 85 F1 | 	sub	fp, #8
17be0     A7 12 02 FB | 	rdlong	arg01, fp
17be4     0C 4E 85 F1 | 	sub	fp, #12
17be8     02 12 06 F1 | 	add	arg01, #2
17bec     47 00 00 FF 
17bf0     7C E4 85 F1 | 	sub	objptr, ##36476
17bf4     E4 58 B0 FD | 	call	#_pspeek
17bf8     FD FA E1 F8 | 	getbyte	result1, result1, #0
17bfc     18 4E 05 F1 | 	add	fp, #24
17c00     A7 FA 61 FC | 	wrlong	result1, fp
17c04     0C 4E 85 F1 | 	sub	fp, #12
17c08     A7 12 02 FB | 	rdlong	arg01, fp
17c0c     0C 4E 85 F1 | 	sub	fp, #12
17c10     04 12 06 F1 | 	add	arg01, #4
17c14     1C 59 B0 FD | 	call	#_pslpeek
17c18     1C 4E 05 F1 | 	add	fp, #28
17c1c     A7 FA 61 FC | 	wrlong	result1, fp
17c20     10 4E 85 F1 | 	sub	fp, #16
17c24     A7 12 02 FB | 	rdlong	arg01, fp
17c28     0C 4E 85 F1 | 	sub	fp, #12
17c2c     08 12 06 F1 | 	add	arg01, #8
17c30     00 59 B0 FD | 	call	#_pslpeek
17c34     20 4E 05 F1 | 	add	fp, #32
17c38     A7 FA 61 FC | 	wrlong	result1, fp
17c3c     14 4E 85 F1 | 	sub	fp, #20
17c40     A7 12 02 FB | 	rdlong	arg01, fp
17c44     0C 4E 85 F1 | 	sub	fp, #12
17c48     0C 12 06 F1 | 	add	arg01, #12
17c4c     E4 58 B0 FD | 	call	#_pslpeek
17c50     24 4E 05 F1 | 	add	fp, #36
17c54     A7 FA 61 FC | 	wrlong	result1, fp
17c58                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
17c58                 | ' esize=pspeek(arrptr+2)
17c58                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
17c58                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
17c58                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
17c58                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
17c58     10 4E 85 F1 | 	sub	fp, #16
17c5c     A7 12 02 FB | 	rdlong	arg01, fp
17c60     14 4E 85 F1 | 	sub	fp, #20
17c64     03 12 16 F2 | 	cmp	arg01, #3 wc
17c68     34 00 90 CD |  if_b	jmp	#LR__1992
17c6c     2C 37 BF FD | 	call	#_pop
17c70     A7 FA 61 FC | 	wrlong	result1, fp
17c74     04 4E 05 F1 | 	add	fp, #4
17c78     A7 FC 61 FC | 	wrlong	result2, fp
17c7c     04 4E 05 F1 | 	add	fp, #4
17c80     A7 FE 61 FC | 	wrlong	result3, fp
17c84     08 4E 85 F1 | 	sub	fp, #8
17c88     A7 12 02 F6 | 	mov	arg01, fp
17c8c     F0 38 BF FD | 	call	#_converttoint
17c90     30 4E 05 F1 | 	add	fp, #48
17c94     A7 FA 61 FC | 	wrlong	result1, fp
17c98     30 4E 85 F1 | 	sub	fp, #48
17c9c     0C 00 90 FD | 	jmp	#LR__1993
17ca0                 | LR__1992
17ca0     30 4E 05 F1 | 	add	fp, #48
17ca4     A7 00 68 FC | 	wrlong	#0, fp
17ca8     30 4E 85 F1 | 	sub	fp, #48
17cac                 | LR__1993
17cac                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
17cac     14 4E 05 F1 | 	add	fp, #20
17cb0     A7 12 02 FB | 	rdlong	arg01, fp
17cb4     14 4E 85 F1 | 	sub	fp, #20
17cb8     02 12 16 F2 | 	cmp	arg01, #2 wc
17cbc     34 00 90 CD |  if_b	jmp	#LR__1994
17cc0     D8 36 BF FD | 	call	#_pop
17cc4     A7 FA 61 FC | 	wrlong	result1, fp
17cc8     04 4E 05 F1 | 	add	fp, #4
17ccc     A7 FC 61 FC | 	wrlong	result2, fp
17cd0     04 4E 05 F1 | 	add	fp, #4
17cd4     A7 FE 61 FC | 	wrlong	result3, fp
17cd8     08 4E 85 F1 | 	sub	fp, #8
17cdc     A7 12 02 F6 | 	mov	arg01, fp
17ce0     9C 38 BF FD | 	call	#_converttoint
17ce4     2C 4E 05 F1 | 	add	fp, #44
17ce8     A7 FA 61 FC | 	wrlong	result1, fp
17cec     2C 4E 85 F1 | 	sub	fp, #44
17cf0     0C 00 90 FD | 	jmp	#LR__1995
17cf4                 | LR__1994
17cf4     2C 4E 05 F1 | 	add	fp, #44
17cf8     A7 00 68 FC | 	wrlong	#0, fp
17cfc     2C 4E 85 F1 | 	sub	fp, #44
17d00                 | LR__1995
17d00                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
17d00     14 4E 05 F1 | 	add	fp, #20
17d04     A7 12 02 FB | 	rdlong	arg01, fp
17d08     14 4E 85 F1 | 	sub	fp, #20
17d0c     01 12 16 F2 | 	cmp	arg01, #1 wc
17d10     34 00 90 CD |  if_b	jmp	#LR__1996
17d14     84 36 BF FD | 	call	#_pop
17d18     A7 FA 61 FC | 	wrlong	result1, fp
17d1c     04 4E 05 F1 | 	add	fp, #4
17d20     A7 FC 61 FC | 	wrlong	result2, fp
17d24     04 4E 05 F1 | 	add	fp, #4
17d28     A7 FE 61 FC | 	wrlong	result3, fp
17d2c     08 4E 85 F1 | 	sub	fp, #8
17d30     A7 12 02 F6 | 	mov	arg01, fp
17d34     48 38 BF FD | 	call	#_converttoint
17d38     28 4E 05 F1 | 	add	fp, #40
17d3c     A7 FA 61 FC | 	wrlong	result1, fp
17d40     28 4E 85 F1 | 	sub	fp, #40
17d44     0C 00 90 FD | 	jmp	#LR__1997
17d48                 | LR__1996
17d48     28 4E 05 F1 | 	add	fp, #40
17d4c     A7 00 68 FC | 	wrlong	#0, fp
17d50     28 4E 85 F1 | 	sub	fp, #40
17d54                 | LR__1997
17d54                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
17d54                 | ' if numpar>0 then
17d54     14 4E 05 F1 | 	add	fp, #20
17d58     A7 FE 01 FB | 	rdlong	result3, fp
17d5c     14 4E 85 F1 | 	sub	fp, #20
17d60     01 FE 15 F2 | 	cmp	result3, #1 wc
17d64     8C 00 90 CD |  if_b	jmp	#LR__1998
17d68     0C 4E 05 F1 | 	add	fp, #12
17d6c     A7 FC 01 FB | 	rdlong	result2, fp
17d70     1C 4E 05 F1 | 	add	fp, #28
17d74     A7 FE 01 FB | 	rdlong	result3, fp
17d78     04 4E 05 F1 | 	add	fp, #4
17d7c     A7 12 02 FB | 	rdlong	arg01, fp
17d80     10 4E 85 F1 | 	sub	fp, #16
17d84     A7 FA 01 FB | 	rdlong	result1, fp
17d88     FD 12 02 FD | 	qmul	arg01, result1
17d8c     10 FC 05 F1 | 	add	result2, #16
17d90     14 4E 05 F1 | 	add	fp, #20
17d94     A7 1E 02 FB | 	rdlong	local01, fp
17d98     18 12 62 FD | 	getqx	arg01
17d9c     FD 1E 02 FD | 	qmul	local01, result1
17da0     09 FF 01 F1 | 	add	result3, arg01
17da4     10 4E 85 F1 | 	sub	fp, #16
17da8     A7 1E 02 FB | 	rdlong	local01, fp
17dac     18 FA 61 FD | 	getqx	result1
17db0     0F FB 01 FD | 	qmul	result1, local01
17db4     08 4E 85 F1 | 	sub	fp, #8
17db8     A7 1E 02 FB | 	rdlong	local01, fp
17dbc     18 FA 61 FD | 	getqx	result1
17dc0     FD FE 01 F1 | 	add	result3, result1
17dc4     0F FF 01 FD | 	qmul	result3, local01
17dc8     1C 4E 05 F1 | 	add	fp, #28
17dcc     18 1E 62 FD | 	getqx	local01
17dd0     0F FD 01 F1 | 	add	result2, local01
17dd4     A7 FC 61 FC | 	wrlong	result2, fp
17dd8     2C 4E 85 F1 | 	sub	fp, #44
17ddc     A7 3A 68 FC | 	wrlong	#29, fp
17de0     2C 4E 05 F1 | 	add	fp, #44
17de4     A7 1E 02 FB | 	rdlong	local01, fp
17de8     34 4E 85 F1 | 	sub	fp, #52
17dec     A7 1E 62 FC | 	wrlong	local01, fp
17df0     18 00 90 FD | 	jmp	#LR__1999
17df4                 | LR__1998
17df4     08 4E 05 F1 | 	add	fp, #8
17df8     A7 3A 68 FC | 	wrlong	#29, fp
17dfc     04 4E 05 F1 | 	add	fp, #4
17e00     A7 1E 02 FB | 	rdlong	local01, fp
17e04     0C 4E 85 F1 | 	sub	fp, #12
17e08     A7 1E 62 FC | 	wrlong	local01, fp
17e0c                 | LR__1999
17e0c     A7 12 02 F6 | 	mov	arg01, fp
17e10     20 36 BF FD | 	call	#_push
17e14                 | LR__2000
17e14     A7 F0 03 F6 | 	mov	ptra, fp
17e18     B2 00 A0 FD | 	call	#popregs_
17e1c                 | _do_getaddr_ret
17e1c     2D 00 64 FD | 	ret
17e20                 | 
17e20                 | ' 
17e20                 | ' 
17e20                 | ' 
17e20                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17e20                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
17e20                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17e20                 | ' 
17e20                 | ' '--------------------------------- AND 
17e20                 | ' 
17e20                 | ' sub do_and 
17e20                 | _do_and
17e20     03 4A 05 F6 | 	mov	COUNT_, #3
17e24     A8 00 A0 FD | 	call	#pushregs_
17e28     18 F0 07 F1 | 	add	ptra, #24
17e2c     6C 35 BF FD | 	call	#_pop
17e30     FD 12 02 F6 | 	mov	arg01, result1
17e34     FE 1E 02 F6 | 	mov	local01, result2
17e38     FF 20 02 F6 | 	mov	local02, result3
17e3c     0C 4E 05 F1 | 	add	fp, #12
17e40     A7 12 62 FC | 	wrlong	arg01, fp
17e44     04 4E 05 F1 | 	add	fp, #4
17e48     A7 1E 62 FC | 	wrlong	local01, fp
17e4c     04 4E 05 F1 | 	add	fp, #4
17e50     A7 20 62 FC | 	wrlong	local02, fp
17e54     14 4E 85 F1 | 	sub	fp, #20
17e58     40 35 BF FD | 	call	#_pop
17e5c     FF 22 02 F6 | 	mov	local03, result3
17e60     A7 FA 61 FC | 	wrlong	result1, fp
17e64     04 4E 05 F1 | 	add	fp, #4
17e68     A7 FC 61 FC | 	wrlong	result2, fp
17e6c     04 4E 05 F1 | 	add	fp, #4
17e70     A7 22 62 FC | 	wrlong	local03, fp
17e74                 | ' 
17e74                 | ' t2=pop()
17e74                 | ' t1=pop()
17e74                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
17e74     08 4E 85 F1 | 	sub	fp, #8
17e78     1C 22 0E F2 | 	cmp	local03, #28 wz
17e7c     A7 22 02 AB |  if_e	rdlong	local03, fp
17e80     A7 22 62 AC |  if_e	wrlong	local03, fp
17e84     08 4E 05 A1 |  if_e	add	fp, #8
17e88     A7 3A 68 AC |  if_e	wrlong	#29, fp
17e8c     08 4E 85 A1 |  if_e	sub	fp, #8
17e90                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
17e90     14 4E 05 F1 | 	add	fp, #20
17e94     A7 22 02 FB | 	rdlong	local03, fp
17e98     14 4E 85 F1 | 	sub	fp, #20
17e9c     1C 22 0E F2 | 	cmp	local03, #28 wz
17ea0     18 00 90 5D |  if_ne	jmp	#LR__2010
17ea4     0C 4E 05 F1 | 	add	fp, #12
17ea8     A7 22 02 FB | 	rdlong	local03, fp
17eac     A7 22 62 FC | 	wrlong	local03, fp
17eb0     08 4E 05 F1 | 	add	fp, #8
17eb4     A7 3A 68 FC | 	wrlong	#29, fp
17eb8     14 4E 85 F1 | 	sub	fp, #20
17ebc                 | LR__2010
17ebc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
17ebc     08 4E 05 F1 | 	add	fp, #8
17ec0     A7 22 02 FB | 	rdlong	local03, fp
17ec4     08 4E 85 F1 | 	sub	fp, #8
17ec8     1F 22 0E F2 | 	cmp	local03, #31 wz
17ecc     14 4E 05 51 |  if_ne	add	fp, #20
17ed0     A7 20 02 5B |  if_ne	rdlong	local02, fp
17ed4     14 4E 85 51 |  if_ne	sub	fp, #20
17ed8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
17edc     08 4E 05 51 |  if_ne	add	fp, #8
17ee0     A7 22 02 5B |  if_ne	rdlong	local03, fp
17ee4     08 4E 85 51 |  if_ne	sub	fp, #8
17ee8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
17eec     14 4E 05 51 |  if_ne	add	fp, #20
17ef0     14 4E 85 51 |  if_ne	sub	fp, #20
17ef4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
17ef8     A7 0C 68 AC |  if_e	wrlong	#6, fp
17efc     08 4E 05 A1 |  if_e	add	fp, #8
17f00     A7 FE 69 AC |  if_e	wrlong	#255, fp
17f04     08 4E 85 A1 |  if_e	sub	fp, #8
17f08     18 00 90 AD |  if_e	jmp	#LR__2011
17f0c     A7 22 02 FB | 	rdlong	local03, fp
17f10     0C 4E 05 F1 | 	add	fp, #12
17f14     A7 1E 02 FB | 	rdlong	local01, fp
17f18     0C 4E 85 F1 | 	sub	fp, #12
17f1c     0F 23 02 F5 | 	and	local03, local01
17f20     A7 22 62 FC | 	wrlong	local03, fp
17f24                 | LR__2011
17f24     A7 12 02 F6 | 	mov	arg01, fp
17f28     08 35 BF FD | 	call	#_push
17f2c     A7 F0 03 F6 | 	mov	ptra, fp
17f30     B2 00 A0 FD | 	call	#popregs_
17f34                 | _do_and_ret
17f34     2D 00 64 FD | 	ret
17f38                 | 
17f38                 | ' 
17f38                 | ' '--------------------------------- DIV (integer divide)
17f38                 | ' 
17f38                 | ' sub do_div 
17f38                 | _do_div
17f38     01 4A 05 F6 | 	mov	COUNT_, #1
17f3c     A8 00 A0 FD | 	call	#pushregs_
17f40     18 F0 07 F1 | 	add	ptra, #24
17f44     54 34 BF FD | 	call	#_pop
17f48     FD 7E 02 F6 | 	mov	muldivb_, result1
17f4c     FE 7C 02 F6 | 	mov	muldiva_, result2
17f50     FF 1E 02 F6 | 	mov	local01, result3
17f54     0C 4E 05 F1 | 	add	fp, #12
17f58     A7 7E 62 FC | 	wrlong	muldivb_, fp
17f5c     04 4E 05 F1 | 	add	fp, #4
17f60     A7 7C 62 FC | 	wrlong	muldiva_, fp
17f64     04 4E 05 F1 | 	add	fp, #4
17f68     A7 1E 62 FC | 	wrlong	local01, fp
17f6c     14 4E 85 F1 | 	sub	fp, #20
17f70     28 34 BF FD | 	call	#_pop
17f74     A7 FA 61 FC | 	wrlong	result1, fp
17f78     04 4E 05 F1 | 	add	fp, #4
17f7c     A7 FC 61 FC | 	wrlong	result2, fp
17f80     04 4E 05 F1 | 	add	fp, #4
17f84     A7 FE 61 FC | 	wrlong	result3, fp
17f88                 | ' 
17f88                 | ' t2=pop()
17f88                 | ' t1=pop()
17f88                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
17f88     08 4E 85 F1 | 	sub	fp, #8
17f8c     1F FE 0D F2 | 	cmp	result3, #31 wz
17f90     14 4E 05 51 |  if_ne	add	fp, #20
17f94     A7 12 02 5B |  if_ne	rdlong	arg01, fp
17f98     14 4E 85 51 |  if_ne	sub	fp, #20
17f9c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
17fa0     A7 14 68 AC |  if_e	wrlong	#10, fp
17fa4     08 4E 05 A1 |  if_e	add	fp, #8
17fa8     A7 FE 69 AC |  if_e	wrlong	#255, fp
17fac     08 4E 85 A1 |  if_e	sub	fp, #8
17fb0     90 01 90 AD |  if_e	jmp	#LR__2026
17fb4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
17fb4     08 4E 05 F1 | 	add	fp, #8
17fb8     A7 7E 02 FB | 	rdlong	muldivb_, fp
17fbc     08 4E 85 F1 | 	sub	fp, #8
17fc0     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
17fc4     1C 00 90 5D |  if_ne	jmp	#LR__2020
17fc8     08 4E 05 F1 | 	add	fp, #8
17fcc     A7 38 68 FC | 	wrlong	#28, fp
17fd0     08 4E 85 F1 | 	sub	fp, #8
17fd4     A7 12 02 FB | 	rdlong	arg01, fp
17fd8     00 14 06 F6 | 	mov	arg02, #0
17fdc     CC B8 B0 FD | 	call	#__system___float_tointeger
17fe0     A7 FA 61 FC | 	wrlong	result1, fp
17fe4                 | LR__2020
17fe4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
17fe4     14 4E 05 F1 | 	add	fp, #20
17fe8     A7 7E 02 FB | 	rdlong	muldivb_, fp
17fec     14 4E 85 F1 | 	sub	fp, #20
17ff0     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
17ff4     28 00 90 5D |  if_ne	jmp	#LR__2021
17ff8     14 4E 05 F1 | 	add	fp, #20
17ffc     A7 38 68 FC | 	wrlong	#28, fp
18000     08 4E 85 F1 | 	sub	fp, #8
18004     A7 12 02 FB | 	rdlong	arg01, fp
18008     0C 4E 85 F1 | 	sub	fp, #12
1800c     00 14 06 F6 | 	mov	arg02, #0
18010     98 B8 B0 FD | 	call	#__system___float_tointeger
18014     0C 4E 05 F1 | 	add	fp, #12
18018     A7 FA 61 FC | 	wrlong	result1, fp
1801c     0C 4E 85 F1 | 	sub	fp, #12
18020                 | LR__2021
18020                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
18020     08 4E 05 F1 | 	add	fp, #8
18024     A7 7E 02 FB | 	rdlong	muldivb_, fp
18028     08 4E 85 F1 | 	sub	fp, #8
1802c     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
18030     14 4E 05 A1 |  if_e	add	fp, #20
18034     A7 1E 02 AB |  if_e	rdlong	local01, fp
18038     14 4E 85 A1 |  if_e	sub	fp, #20
1803c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
18040     20 00 90 5D |  if_ne	jmp	#LR__2022
18044     0C 4E 05 F1 | 	add	fp, #12
18048     A7 1E 02 FB | 	rdlong	local01, fp
1804c     0C 4E 85 F1 | 	sub	fp, #12
18050     A7 7E 02 FB | 	rdlong	muldivb_, fp
18054     0F 7F 12 FD | 	qdiv	muldivb_, local01
18058     18 1E 62 FD | 	getqx	local01
1805c     A7 1E 62 FC | 	wrlong	local01, fp
18060     E0 00 90 FD | 	jmp	#LR__2026
18064                 | LR__2022
18064                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
18064     08 4E 05 F1 | 	add	fp, #8
18068     A7 7E 02 FB | 	rdlong	muldivb_, fp
1806c     08 4E 85 F1 | 	sub	fp, #8
18070     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
18074     14 4E 05 A1 |  if_e	add	fp, #20
18078     A7 1E 02 AB |  if_e	rdlong	local01, fp
1807c     14 4E 85 A1 |  if_e	sub	fp, #20
18080     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18084     2C 00 90 5D |  if_ne	jmp	#LR__2023
18088     0C 4E 05 F1 | 	add	fp, #12
1808c     A7 1E 02 FB | 	rdlong	local01, fp
18090     0C 4E 85 F1 | 	sub	fp, #12
18094     A7 7E 02 FB | 	rdlong	muldivb_, fp
18098     0F 7F 12 FD | 	qdiv	muldivb_, local01
1809c     18 1E 62 FD | 	getqx	local01
180a0     A7 1E 62 FC | 	wrlong	local01, fp
180a4     08 4E 05 F1 | 	add	fp, #8
180a8     A7 38 68 FC | 	wrlong	#28, fp
180ac     08 4E 85 F1 | 	sub	fp, #8
180b0     90 00 90 FD | 	jmp	#LR__2026
180b4                 | LR__2023
180b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
180b4     08 4E 05 F1 | 	add	fp, #8
180b8     A7 7E 02 FB | 	rdlong	muldivb_, fp
180bc     08 4E 85 F1 | 	sub	fp, #8
180c0     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
180c4     14 4E 05 A1 |  if_e	add	fp, #20
180c8     A7 1E 02 AB |  if_e	rdlong	local01, fp
180cc     14 4E 85 A1 |  if_e	sub	fp, #20
180d0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
180d4     1C 00 90 5D |  if_ne	jmp	#LR__2024
180d8     A7 7C 02 FB | 	rdlong	muldiva_, fp
180dc     0C 4E 05 F1 | 	add	fp, #12
180e0     A7 7E 02 FB | 	rdlong	muldivb_, fp
180e4     0C 4E 85 F1 | 	sub	fp, #12
180e8     BA 00 A0 FD | 	call	#divide_
180ec     A7 7E 62 FC | 	wrlong	muldivb_, fp
180f0     50 00 90 FD | 	jmp	#LR__2026
180f4                 | LR__2024
180f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
180f4     08 4E 05 F1 | 	add	fp, #8
180f8     A7 7E 02 FB | 	rdlong	muldivb_, fp
180fc     08 4E 85 F1 | 	sub	fp, #8
18100     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
18104     14 4E 05 A1 |  if_e	add	fp, #20
18108     A7 1E 02 AB |  if_e	rdlong	local01, fp
1810c     14 4E 85 A1 |  if_e	sub	fp, #20
18110     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18114     1C 00 90 5D |  if_ne	jmp	#LR__2025
18118     A7 7C 02 FB | 	rdlong	muldiva_, fp
1811c     0C 4E 05 F1 | 	add	fp, #12
18120     A7 7E 02 FB | 	rdlong	muldivb_, fp
18124     0C 4E 85 F1 | 	sub	fp, #12
18128     BA 00 A0 FD | 	call	#divide_
1812c     A7 7E 62 FC | 	wrlong	muldivb_, fp
18130     10 00 90 FD | 	jmp	#LR__2026
18134                 | LR__2025
18134     A7 16 68 FC | 	wrlong	#11, fp
18138     08 4E 05 F1 | 	add	fp, #8
1813c     A7 FE 69 FC | 	wrlong	#255, fp
18140     08 4E 85 F1 | 	sub	fp, #8
18144                 | LR__2026
18144     A7 12 02 F6 | 	mov	arg01, fp
18148     E8 32 BF FD | 	call	#_push
1814c     A7 F0 03 F6 | 	mov	ptra, fp
18150     B2 00 A0 FD | 	call	#popregs_
18154                 | _do_div_ret
18154     2D 00 64 FD | 	ret
18158                 | 
18158                 | ' 
18158                 | ' '--------------------------------- equal (=)
18158                 | ' 
18158                 | ' sub do_eq
18158                 | _do_eq
18158     05 4A 05 F6 | 	mov	COUNT_, #5
1815c     A8 00 A0 FD | 	call	#pushregs_
18160     18 F0 07 F1 | 	add	ptra, #24
18164     34 32 BF FD | 	call	#_pop
18168     FD 1E 02 F6 | 	mov	local01, result1
1816c     FE 20 02 F6 | 	mov	local02, result2
18170     FF 22 02 F6 | 	mov	local03, result3
18174     0C 4E 05 F1 | 	add	fp, #12
18178     A7 1E 62 FC | 	wrlong	local01, fp
1817c     04 4E 05 F1 | 	add	fp, #4
18180     A7 20 62 FC | 	wrlong	local02, fp
18184     04 4E 05 F1 | 	add	fp, #4
18188     A7 22 62 FC | 	wrlong	local03, fp
1818c     14 4E 85 F1 | 	sub	fp, #20
18190     08 32 BF FD | 	call	#_pop
18194     FF 22 02 F6 | 	mov	local03, result3
18198     A7 FA 61 FC | 	wrlong	result1, fp
1819c     04 4E 05 F1 | 	add	fp, #4
181a0     A7 FC 61 FC | 	wrlong	result2, fp
181a4     04 4E 05 F1 | 	add	fp, #4
181a8     A7 22 62 FC | 	wrlong	local03, fp
181ac                 | ' 
181ac                 | ' t2=pop()
181ac                 | ' t1=pop()
181ac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
181ac     08 4E 85 F1 | 	sub	fp, #8
181b0     1F 22 0E F2 | 	cmp	local03, #31 wz
181b4     14 4E 05 A1 |  if_e	add	fp, #20
181b8     A7 24 02 AB |  if_e	rdlong	local04, fp
181bc     14 4E 85 A1 |  if_e	sub	fp, #20
181c0     12 23 02 A6 |  if_e	mov	local03, local04
181c4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
181c8     28 00 90 5D |  if_ne	jmp	#LR__2030
181cc     00 1E 06 F6 | 	mov	local01, #0
181d0     A7 12 02 FB | 	rdlong	arg01, fp
181d4     0C 4E 05 F1 | 	add	fp, #12
181d8     A7 14 02 FB | 	rdlong	arg02, fp
181dc     0C 4E 85 F1 | 	sub	fp, #12
181e0     74 86 B0 FD | 	call	#__system___string_cmp
181e4     00 FA 0D F2 | 	cmp	result1, #0 wz
181e8     00 1E 26 A6 |  if_e	not	local01, #0
181ec     A7 1E 62 FC | 	wrlong	local01, fp
181f0     1C 04 90 FD | 	jmp	#LR__2043
181f4                 | LR__2030
181f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
181f4     08 4E 05 F1 | 	add	fp, #8
181f8     A7 1E 02 FB | 	rdlong	local01, fp
181fc     08 4E 85 F1 | 	sub	fp, #8
18200     1E 1E 0E F2 | 	cmp	local01, #30 wz
18204     14 4E 05 A1 |  if_e	add	fp, #20
18208     A7 24 02 AB |  if_e	rdlong	local04, fp
1820c     14 4E 85 A1 |  if_e	sub	fp, #20
18210     12 23 02 A6 |  if_e	mov	local03, local04
18214     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18218     2C 00 90 5D |  if_ne	jmp	#LR__2031
1821c     00 1E 06 F6 | 	mov	local01, #0
18220     A7 12 02 FB | 	rdlong	arg01, fp
18224     0C 4E 05 F1 | 	add	fp, #12
18228     A7 14 02 FB | 	rdlong	arg02, fp
1822c     0C 4E 85 F1 | 	sub	fp, #12
18230     01 16 06 F6 | 	mov	arg03, #1
18234     E0 B5 B0 FD | 	call	#__system___float_cmp
18238     00 FA 0D F2 | 	cmp	result1, #0 wz
1823c     00 1E 26 A6 |  if_e	not	local01, #0
18240     A7 1E 62 FC | 	wrlong	local01, fp
18244     C8 03 90 FD | 	jmp	#LR__2043
18248                 | LR__2031
18248                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
18248     08 4E 05 F1 | 	add	fp, #8
1824c     A7 1E 02 FB | 	rdlong	local01, fp
18250     08 4E 85 F1 | 	sub	fp, #8
18254     1E 1E 0E F2 | 	cmp	local01, #30 wz
18258     14 4E 05 A1 |  if_e	add	fp, #20
1825c     A7 24 02 AB |  if_e	rdlong	local04, fp
18260     14 4E 85 A1 |  if_e	sub	fp, #20
18264     12 23 02 A6 |  if_e	mov	local03, local04
18268     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1826c     48 00 90 5D |  if_ne	jmp	#LR__2032
18270     00 1E 06 F6 | 	mov	local01, #0
18274     A7 20 02 FB | 	rdlong	local02, fp
18278     0C 4E 05 F1 | 	add	fp, #12
1827c     A7 12 02 FB | 	rdlong	arg01, fp
18280     0C 4E 85 F1 | 	sub	fp, #12
18284     09 13 52 F6 | 	abs	arg01, arg01 wc
18288     1F 26 C6 C9 |  if_b	decod	local05, #31
1828c     00 26 06 36 |  if_ae	mov	local05, #0
18290     4C AD B0 FD | 	call	#__system___float_fromuns
18294     13 FB 61 F5 | 	xor	result1, local05
18298     FD 14 02 F6 | 	mov	arg02, result1
1829c     10 13 02 F6 | 	mov	arg01, local02
182a0     01 16 06 F6 | 	mov	arg03, #1
182a4     70 B5 B0 FD | 	call	#__system___float_cmp
182a8     00 FA 0D F2 | 	cmp	result1, #0 wz
182ac     00 1E 26 A6 |  if_e	not	local01, #0
182b0     A7 1E 62 FC | 	wrlong	local01, fp
182b4     58 03 90 FD | 	jmp	#LR__2043
182b8                 | LR__2032
182b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
182b8     08 4E 05 F1 | 	add	fp, #8
182bc     A7 1E 02 FB | 	rdlong	local01, fp
182c0     08 4E 85 F1 | 	sub	fp, #8
182c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
182c8     14 4E 05 A1 |  if_e	add	fp, #20
182cc     A7 24 02 AB |  if_e	rdlong	local04, fp
182d0     14 4E 85 A1 |  if_e	sub	fp, #20
182d4     12 23 02 A6 |  if_e	mov	local03, local04
182d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
182dc     38 00 90 5D |  if_ne	jmp	#LR__2033
182e0     00 1E 06 F6 | 	mov	local01, #0
182e4     A7 20 02 FB | 	rdlong	local02, fp
182e8     0C 4E 05 F1 | 	add	fp, #12
182ec     A7 12 02 FB | 	rdlong	arg01, fp
182f0     0C 4E 85 F1 | 	sub	fp, #12
182f4     E8 AC B0 FD | 	call	#__system___float_fromuns
182f8     FD 14 02 F6 | 	mov	arg02, result1
182fc     10 13 02 F6 | 	mov	arg01, local02
18300     01 16 06 F6 | 	mov	arg03, #1
18304     10 B5 B0 FD | 	call	#__system___float_cmp
18308     00 FA 0D F2 | 	cmp	result1, #0 wz
1830c     00 1E 26 A6 |  if_e	not	local01, #0
18310     A7 1E 62 FC | 	wrlong	local01, fp
18314     F8 02 90 FD | 	jmp	#LR__2043
18318                 | LR__2033
18318                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
18318     08 4E 05 F1 | 	add	fp, #8
1831c     A7 1E 02 FB | 	rdlong	local01, fp
18320     08 4E 85 F1 | 	sub	fp, #8
18324     1C 1E 0E F2 | 	cmp	local01, #28 wz
18328     14 4E 05 A1 |  if_e	add	fp, #20
1832c     A7 24 02 AB |  if_e	rdlong	local04, fp
18330     14 4E 85 A1 |  if_e	sub	fp, #20
18334     12 23 02 A6 |  if_e	mov	local03, local04
18338     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1833c     44 00 90 5D |  if_ne	jmp	#LR__2034
18340     00 1E 06 F6 | 	mov	local01, #0
18344     A7 12 02 FB | 	rdlong	arg01, fp
18348     09 13 52 F6 | 	abs	arg01, arg01 wc
1834c     1F 26 C6 C9 |  if_b	decod	local05, #31
18350     00 26 06 36 |  if_ae	mov	local05, #0
18354     88 AC B0 FD | 	call	#__system___float_fromuns
18358     13 FB 61 F5 | 	xor	result1, local05
1835c     FD 12 02 F6 | 	mov	arg01, result1
18360     0C 4E 05 F1 | 	add	fp, #12
18364     A7 14 02 FB | 	rdlong	arg02, fp
18368     0C 4E 85 F1 | 	sub	fp, #12
1836c     01 16 06 F6 | 	mov	arg03, #1
18370     A4 B4 B0 FD | 	call	#__system___float_cmp
18374     00 FA 0D F2 | 	cmp	result1, #0 wz
18378     00 1E 26 A6 |  if_e	not	local01, #0
1837c     A7 1E 62 FC | 	wrlong	local01, fp
18380     8C 02 90 FD | 	jmp	#LR__2043
18384                 | LR__2034
18384                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
18384     08 4E 05 F1 | 	add	fp, #8
18388     A7 1E 02 FB | 	rdlong	local01, fp
1838c     08 4E 85 F1 | 	sub	fp, #8
18390     1C 1E 0E F2 | 	cmp	local01, #28 wz
18394     14 4E 05 A1 |  if_e	add	fp, #20
18398     A7 24 02 AB |  if_e	rdlong	local04, fp
1839c     14 4E 85 A1 |  if_e	sub	fp, #20
183a0     12 23 02 A6 |  if_e	mov	local03, local04
183a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
183a8     24 00 90 5D |  if_ne	jmp	#LR__2035
183ac     00 1E 06 F6 | 	mov	local01, #0
183b0     A7 20 02 FB | 	rdlong	local02, fp
183b4     0C 4E 05 F1 | 	add	fp, #12
183b8     A7 22 02 FB | 	rdlong	local03, fp
183bc     0C 4E 85 F1 | 	sub	fp, #12
183c0     11 21 0A F2 | 	cmp	local02, local03 wz
183c4     01 1E 66 A6 |  if_e	neg	local01, #1
183c8     A7 1E 62 FC | 	wrlong	local01, fp
183cc     40 02 90 FD | 	jmp	#LR__2043
183d0                 | LR__2035
183d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
183d0     08 4E 05 F1 | 	add	fp, #8
183d4     A7 1E 02 FB | 	rdlong	local01, fp
183d8     08 4E 85 F1 | 	sub	fp, #8
183dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
183e0     14 4E 05 A1 |  if_e	add	fp, #20
183e4     A7 24 02 AB |  if_e	rdlong	local04, fp
183e8     14 4E 85 A1 |  if_e	sub	fp, #20
183ec     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
183f0     24 00 90 5D |  if_ne	jmp	#LR__2036
183f4     00 1E 06 F6 | 	mov	local01, #0
183f8     A7 20 02 FB | 	rdlong	local02, fp
183fc     0C 4E 05 F1 | 	add	fp, #12
18400     A7 22 02 FB | 	rdlong	local03, fp
18404     0C 4E 85 F1 | 	sub	fp, #12
18408     11 21 0A F2 | 	cmp	local02, local03 wz
1840c     01 1E 66 A6 |  if_e	neg	local01, #1
18410     A7 1E 62 FC | 	wrlong	local01, fp
18414     F8 01 90 FD | 	jmp	#LR__2043
18418                 | LR__2036
18418                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
18418     08 4E 05 F1 | 	add	fp, #8
1841c     A7 1E 02 FB | 	rdlong	local01, fp
18420     08 4E 85 F1 | 	sub	fp, #8
18424     1D 1E 0E F2 | 	cmp	local01, #29 wz
18428     14 4E 05 A1 |  if_e	add	fp, #20
1842c     A7 22 02 AB |  if_e	rdlong	local03, fp
18430     14 4E 85 A1 |  if_e	sub	fp, #20
18434     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18438     34 00 90 5D |  if_ne	jmp	#LR__2037
1843c     00 1E 06 F6 | 	mov	local01, #0
18440     A7 12 02 FB | 	rdlong	arg01, fp
18444     98 AB B0 FD | 	call	#__system___float_fromuns
18448     FD 12 02 F6 | 	mov	arg01, result1
1844c     0C 4E 05 F1 | 	add	fp, #12
18450     A7 14 02 FB | 	rdlong	arg02, fp
18454     0C 4E 85 F1 | 	sub	fp, #12
18458     01 16 06 F6 | 	mov	arg03, #1
1845c     B8 B3 B0 FD | 	call	#__system___float_cmp
18460     00 FA 0D F2 | 	cmp	result1, #0 wz
18464     00 1E 26 A6 |  if_e	not	local01, #0
18468     A7 1E 62 FC | 	wrlong	local01, fp
1846c     A0 01 90 FD | 	jmp	#LR__2043
18470                 | LR__2037
18470                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
18470     08 4E 05 F1 | 	add	fp, #8
18474     A7 1E 02 FB | 	rdlong	local01, fp
18478     08 4E 85 F1 | 	sub	fp, #8
1847c     1D 1E 0E F2 | 	cmp	local01, #29 wz
18480     14 4E 05 A1 |  if_e	add	fp, #20
18484     A7 22 02 AB |  if_e	rdlong	local03, fp
18488     14 4E 85 A1 |  if_e	sub	fp, #20
1848c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18490     24 00 90 5D |  if_ne	jmp	#LR__2038
18494     00 1E 06 F6 | 	mov	local01, #0
18498     A7 20 02 FB | 	rdlong	local02, fp
1849c     0C 4E 05 F1 | 	add	fp, #12
184a0     A7 22 02 FB | 	rdlong	local03, fp
184a4     0C 4E 85 F1 | 	sub	fp, #12
184a8     11 21 0A F2 | 	cmp	local02, local03 wz
184ac     01 1E 66 A6 |  if_e	neg	local01, #1
184b0     A7 1E 62 FC | 	wrlong	local01, fp
184b4     58 01 90 FD | 	jmp	#LR__2043
184b8                 | LR__2038
184b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
184b8     08 4E 05 F1 | 	add	fp, #8
184bc     A7 1E 02 FB | 	rdlong	local01, fp
184c0     08 4E 85 F1 | 	sub	fp, #8
184c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
184c8     14 4E 05 A1 |  if_e	add	fp, #20
184cc     A7 22 02 AB |  if_e	rdlong	local03, fp
184d0     14 4E 85 A1 |  if_e	sub	fp, #20
184d4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
184d8     24 00 90 5D |  if_ne	jmp	#LR__2039
184dc     00 1E 06 F6 | 	mov	local01, #0
184e0     A7 20 02 FB | 	rdlong	local02, fp
184e4     0C 4E 05 F1 | 	add	fp, #12
184e8     A7 22 02 FB | 	rdlong	local03, fp
184ec     0C 4E 85 F1 | 	sub	fp, #12
184f0     11 21 0A F2 | 	cmp	local02, local03 wz
184f4     01 1E 66 A6 |  if_e	neg	local01, #1
184f8     A7 1E 62 FC | 	wrlong	local01, fp
184fc     10 01 90 FD | 	jmp	#LR__2043
18500                 | LR__2039
18500                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
18500     08 4E 05 F1 | 	add	fp, #8
18504     A7 1E 02 FB | 	rdlong	local01, fp
18508     08 4E 85 F1 | 	sub	fp, #8
1850c     2B 1E 0E F2 | 	cmp	local01, #43 wz
18510     14 4E 05 A1 |  if_e	add	fp, #20
18514     A7 22 02 AB |  if_e	rdlong	local03, fp
18518     14 4E 85 A1 |  if_e	sub	fp, #20
1851c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18520     30 00 90 5D |  if_ne	jmp	#LR__2040
18524     00 1E 06 F6 | 	mov	local01, #0
18528     A7 12 02 FB | 	rdlong	arg01, fp
1852c     E4 2F BF FD | 	call	#_convertstring
18530     FD 12 02 F6 | 	mov	arg01, result1
18534     0C 4E 05 F1 | 	add	fp, #12
18538     A7 14 02 FB | 	rdlong	arg02, fp
1853c     0C 4E 85 F1 | 	sub	fp, #12
18540     14 83 B0 FD | 	call	#__system___string_cmp
18544     00 FA 0D F2 | 	cmp	result1, #0 wz
18548     00 1E 26 A6 |  if_e	not	local01, #0
1854c     A7 1E 62 FC | 	wrlong	local01, fp
18550     BC 00 90 FD | 	jmp	#LR__2043
18554                 | LR__2040
18554                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
18554     08 4E 05 F1 | 	add	fp, #8
18558     A7 1E 02 FB | 	rdlong	local01, fp
1855c     08 4E 85 F1 | 	sub	fp, #8
18560     1F 1E 0E F2 | 	cmp	local01, #31 wz
18564     14 4E 05 A1 |  if_e	add	fp, #20
18568     A7 22 02 AB |  if_e	rdlong	local03, fp
1856c     14 4E 85 A1 |  if_e	sub	fp, #20
18570     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18574     34 00 90 5D |  if_ne	jmp	#LR__2041
18578     00 1E 06 F6 | 	mov	local01, #0
1857c     A7 20 02 FB | 	rdlong	local02, fp
18580     0C 4E 05 F1 | 	add	fp, #12
18584     A7 12 02 FB | 	rdlong	arg01, fp
18588     0C 4E 85 F1 | 	sub	fp, #12
1858c     84 2F BF FD | 	call	#_convertstring
18590     FD 14 02 F6 | 	mov	arg02, result1
18594     10 13 02 F6 | 	mov	arg01, local02
18598     BC 82 B0 FD | 	call	#__system___string_cmp
1859c     00 FA 0D F2 | 	cmp	result1, #0 wz
185a0     00 1E 26 A6 |  if_e	not	local01, #0
185a4     A7 1E 62 FC | 	wrlong	local01, fp
185a8     64 00 90 FD | 	jmp	#LR__2043
185ac                 | LR__2041
185ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
185ac     08 4E 05 F1 | 	add	fp, #8
185b0     A7 1E 02 FB | 	rdlong	local01, fp
185b4     08 4E 85 F1 | 	sub	fp, #8
185b8     2B 1E 0E F2 | 	cmp	local01, #43 wz
185bc     14 4E 05 A1 |  if_e	add	fp, #20
185c0     A7 22 02 AB |  if_e	rdlong	local03, fp
185c4     14 4E 85 A1 |  if_e	sub	fp, #20
185c8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
185cc     3C 00 90 5D |  if_ne	jmp	#LR__2042
185d0     00 1E 06 F6 | 	mov	local01, #0
185d4     A7 12 02 FB | 	rdlong	arg01, fp
185d8     38 2F BF FD | 	call	#_convertstring
185dc     FD 20 02 F6 | 	mov	local02, result1
185e0     0C 4E 05 F1 | 	add	fp, #12
185e4     A7 12 02 FB | 	rdlong	arg01, fp
185e8     0C 4E 85 F1 | 	sub	fp, #12
185ec     24 2F BF FD | 	call	#_convertstring
185f0     FD 14 02 F6 | 	mov	arg02, result1
185f4     10 13 02 F6 | 	mov	arg01, local02
185f8     5C 82 B0 FD | 	call	#__system___string_cmp
185fc     00 FA 0D F2 | 	cmp	result1, #0 wz
18600     00 1E 26 A6 |  if_e	not	local01, #0
18604     A7 1E 62 FC | 	wrlong	local01, fp
18608     04 00 90 FD | 	jmp	#LR__2043
1860c                 | LR__2042
1860c     A7 00 68 FC | 	wrlong	#0, fp
18610                 | LR__2043
18610     08 4E 05 F1 | 	add	fp, #8
18614     A7 38 68 FC | 	wrlong	#28, fp
18618     08 4E 85 F1 | 	sub	fp, #8
1861c     A7 12 02 F6 | 	mov	arg01, fp
18620     10 2E BF FD | 	call	#_push
18624     A7 F0 03 F6 | 	mov	ptra, fp
18628     B2 00 A0 FD | 	call	#popregs_
1862c                 | _do_eq_ret
1862c     2D 00 64 FD | 	ret
18630                 | 
18630                 | ' 
18630                 | ' '--------------------------------- fdiv (/) - float divide
18630                 | ' 
18630                 | ' sub do_fdiv 
18630                 | _do_fdiv
18630     02 4A 05 F6 | 	mov	COUNT_, #2
18634     A8 00 A0 FD | 	call	#pushregs_
18638     18 F0 07 F1 | 	add	ptra, #24
1863c     5C 2D BF FD | 	call	#_pop
18640     FD 14 02 F6 | 	mov	arg02, result1
18644     FE 12 02 F6 | 	mov	arg01, result2
18648     FF 1E 02 F6 | 	mov	local01, result3
1864c     0C 4E 05 F1 | 	add	fp, #12
18650     A7 14 62 FC | 	wrlong	arg02, fp
18654     04 4E 05 F1 | 	add	fp, #4
18658     A7 12 62 FC | 	wrlong	arg01, fp
1865c     04 4E 05 F1 | 	add	fp, #4
18660     A7 1E 62 FC | 	wrlong	local01, fp
18664     14 4E 85 F1 | 	sub	fp, #20
18668     30 2D BF FD | 	call	#_pop
1866c     A7 FA 61 FC | 	wrlong	result1, fp
18670     04 4E 05 F1 | 	add	fp, #4
18674     A7 FC 61 FC | 	wrlong	result2, fp
18678     04 4E 05 F1 | 	add	fp, #4
1867c     A7 FE 61 FC | 	wrlong	result3, fp
18680                 | ' 
18680                 | ' t2=pop()
18680                 | ' t1=pop()
18680                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
18680     08 4E 85 F1 | 	sub	fp, #8
18684     1F FE 0D F2 | 	cmp	result3, #31 wz
18688     14 4E 05 51 |  if_ne	add	fp, #20
1868c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18690     14 4E 85 51 |  if_ne	sub	fp, #20
18694     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
18698     A7 14 68 AC |  if_e	wrlong	#10, fp
1869c     08 4E 05 A1 |  if_e	add	fp, #8
186a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
186a4     08 4E 85 A1 |  if_e	sub	fp, #8
186a8     38 01 90 AD |  if_e	jmp	#LR__2055
186ac                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
186ac     08 4E 05 F1 | 	add	fp, #8
186b0     A7 14 02 FB | 	rdlong	arg02, fp
186b4     08 4E 85 F1 | 	sub	fp, #8
186b8     1C 14 0E F2 | 	cmp	arg02, #28 wz
186bc     28 00 90 5D |  if_ne	jmp	#LR__2050
186c0     08 4E 05 F1 | 	add	fp, #8
186c4     A7 3C 68 FC | 	wrlong	#30, fp
186c8     08 4E 85 F1 | 	sub	fp, #8
186cc     A7 12 02 FB | 	rdlong	arg01, fp
186d0     09 13 52 F6 | 	abs	arg01, arg01 wc
186d4     1F 20 C6 C9 |  if_b	decod	local02, #31
186d8     00 20 06 36 |  if_ae	mov	local02, #0
186dc     00 A9 B0 FD | 	call	#__system___float_fromuns
186e0     10 FB 61 F5 | 	xor	result1, local02
186e4     A7 FA 61 FC | 	wrlong	result1, fp
186e8                 | LR__2050
186e8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
186e8     08 4E 05 F1 | 	add	fp, #8
186ec     A7 14 02 FB | 	rdlong	arg02, fp
186f0     08 4E 85 F1 | 	sub	fp, #8
186f4     1D 14 0E F2 | 	cmp	arg02, #29 wz
186f8     18 00 90 5D |  if_ne	jmp	#LR__2051
186fc     08 4E 05 F1 | 	add	fp, #8
18700     A7 3C 68 FC | 	wrlong	#30, fp
18704     08 4E 85 F1 | 	sub	fp, #8
18708     A7 12 02 FB | 	rdlong	arg01, fp
1870c     D0 A8 B0 FD | 	call	#__system___float_fromuns
18710     A7 FA 61 FC | 	wrlong	result1, fp
18714                 | LR__2051
18714                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
18714     14 4E 05 F1 | 	add	fp, #20
18718     A7 14 02 FB | 	rdlong	arg02, fp
1871c     14 4E 85 F1 | 	sub	fp, #20
18720     1C 14 0E F2 | 	cmp	arg02, #28 wz
18724     34 00 90 5D |  if_ne	jmp	#LR__2052
18728     14 4E 05 F1 | 	add	fp, #20
1872c     A7 3C 68 FC | 	wrlong	#30, fp
18730     08 4E 85 F1 | 	sub	fp, #8
18734     A7 12 02 FB | 	rdlong	arg01, fp
18738     0C 4E 85 F1 | 	sub	fp, #12
1873c     09 13 52 F6 | 	abs	arg01, arg01 wc
18740     1F 20 C6 C9 |  if_b	decod	local02, #31
18744     00 20 06 36 |  if_ae	mov	local02, #0
18748     94 A8 B0 FD | 	call	#__system___float_fromuns
1874c     10 FB 61 F5 | 	xor	result1, local02
18750     0C 4E 05 F1 | 	add	fp, #12
18754     A7 FA 61 FC | 	wrlong	result1, fp
18758     0C 4E 85 F1 | 	sub	fp, #12
1875c                 | LR__2052
1875c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1875c     14 4E 05 F1 | 	add	fp, #20
18760     A7 14 02 FB | 	rdlong	arg02, fp
18764     14 4E 85 F1 | 	sub	fp, #20
18768     1D 14 0E F2 | 	cmp	arg02, #29 wz
1876c     24 00 90 5D |  if_ne	jmp	#LR__2053
18770     14 4E 05 F1 | 	add	fp, #20
18774     A7 3C 68 FC | 	wrlong	#30, fp
18778     08 4E 85 F1 | 	sub	fp, #8
1877c     A7 12 02 FB | 	rdlong	arg01, fp
18780     0C 4E 85 F1 | 	sub	fp, #12
18784     58 A8 B0 FD | 	call	#__system___float_fromuns
18788     0C 4E 05 F1 | 	add	fp, #12
1878c     A7 FA 61 FC | 	wrlong	result1, fp
18790     0C 4E 85 F1 | 	sub	fp, #12
18794                 | LR__2053
18794                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
18794     08 4E 05 F1 | 	add	fp, #8
18798     A7 14 02 FB | 	rdlong	arg02, fp
1879c     08 4E 85 F1 | 	sub	fp, #8
187a0     1E 14 0E F2 | 	cmp	arg02, #30 wz
187a4     14 4E 05 A1 |  if_e	add	fp, #20
187a8     A7 1E 02 AB |  if_e	rdlong	local01, fp
187ac     14 4E 85 A1 |  if_e	sub	fp, #20
187b0     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
187b4     1C 00 90 5D |  if_ne	jmp	#LR__2054
187b8     A7 12 02 FB | 	rdlong	arg01, fp
187bc     0C 4E 05 F1 | 	add	fp, #12
187c0     A7 14 02 FB | 	rdlong	arg02, fp
187c4     0C 4E 85 F1 | 	sub	fp, #12
187c8     1C AE B0 FD | 	call	#__system___float_div
187cc     A7 FA 61 FC | 	wrlong	result1, fp
187d0     10 00 90 FD | 	jmp	#LR__2055
187d4                 | LR__2054
187d4     A7 16 68 FC | 	wrlong	#11, fp
187d8     08 4E 05 F1 | 	add	fp, #8
187dc     A7 FE 69 FC | 	wrlong	#255, fp
187e0     08 4E 85 F1 | 	sub	fp, #8
187e4                 | LR__2055
187e4     A7 12 02 F6 | 	mov	arg01, fp
187e8     48 2C BF FD | 	call	#_push
187ec     A7 F0 03 F6 | 	mov	ptra, fp
187f0     B2 00 A0 FD | 	call	#popregs_
187f4                 | _do_fdiv_ret
187f4     2D 00 64 FD | 	ret
187f8                 | 
187f8                 | ' 
187f8                 | ' '--------------------------------- greater or equal (>=)
187f8                 | ' 
187f8                 | ' sub do_ge
187f8                 | _do_ge
187f8     05 4A 05 F6 | 	mov	COUNT_, #5
187fc     A8 00 A0 FD | 	call	#pushregs_
18800     18 F0 07 F1 | 	add	ptra, #24
18804     94 2B BF FD | 	call	#_pop
18808     FD 1E 02 F6 | 	mov	local01, result1
1880c     FE 20 02 F6 | 	mov	local02, result2
18810     FF 22 02 F6 | 	mov	local03, result3
18814     0C 4E 05 F1 | 	add	fp, #12
18818     A7 1E 62 FC | 	wrlong	local01, fp
1881c     04 4E 05 F1 | 	add	fp, #4
18820     A7 20 62 FC | 	wrlong	local02, fp
18824     04 4E 05 F1 | 	add	fp, #4
18828     A7 22 62 FC | 	wrlong	local03, fp
1882c     14 4E 85 F1 | 	sub	fp, #20
18830     68 2B BF FD | 	call	#_pop
18834     FF 22 02 F6 | 	mov	local03, result3
18838     A7 FA 61 FC | 	wrlong	result1, fp
1883c     04 4E 05 F1 | 	add	fp, #4
18840     A7 FC 61 FC | 	wrlong	result2, fp
18844     04 4E 05 F1 | 	add	fp, #4
18848     A7 22 62 FC | 	wrlong	local03, fp
1884c                 | ' 
1884c                 | ' t2=pop()
1884c                 | ' t1=pop()
1884c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1884c     08 4E 85 F1 | 	sub	fp, #8
18850     1F 22 0E F2 | 	cmp	local03, #31 wz
18854     14 4E 05 A1 |  if_e	add	fp, #20
18858     A7 24 02 AB |  if_e	rdlong	local04, fp
1885c     14 4E 85 A1 |  if_e	sub	fp, #20
18860     12 23 02 A6 |  if_e	mov	local03, local04
18864     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18868     28 00 90 5D |  if_ne	jmp	#LR__2060
1886c     00 1E 06 F6 | 	mov	local01, #0
18870     A7 12 02 FB | 	rdlong	arg01, fp
18874     0C 4E 05 F1 | 	add	fp, #12
18878     A7 14 02 FB | 	rdlong	arg02, fp
1887c     0C 4E 85 F1 | 	sub	fp, #12
18880     D4 7F B0 FD | 	call	#__system___string_cmp
18884     00 FA 55 F2 | 	cmps	result1, #0 wc
18888     00 1E 26 36 |  if_ae	not	local01, #0
1888c     A7 1E 62 FC | 	wrlong	local01, fp
18890     1C 04 90 FD | 	jmp	#LR__2073
18894                 | LR__2060
18894                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
18894     08 4E 05 F1 | 	add	fp, #8
18898     A7 1E 02 FB | 	rdlong	local01, fp
1889c     08 4E 85 F1 | 	sub	fp, #8
188a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
188a4     14 4E 05 A1 |  if_e	add	fp, #20
188a8     A7 24 02 AB |  if_e	rdlong	local04, fp
188ac     14 4E 85 A1 |  if_e	sub	fp, #20
188b0     12 23 02 A6 |  if_e	mov	local03, local04
188b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
188b8     2C 00 90 5D |  if_ne	jmp	#LR__2061
188bc     00 1E 06 F6 | 	mov	local01, #0
188c0     A7 12 02 FB | 	rdlong	arg01, fp
188c4     0C 4E 05 F1 | 	add	fp, #12
188c8     A7 14 02 FB | 	rdlong	arg02, fp
188cc     0C 4E 85 F1 | 	sub	fp, #12
188d0     01 16 66 F6 | 	neg	arg03, #1
188d4     40 AF B0 FD | 	call	#__system___float_cmp
188d8     00 FA 55 F2 | 	cmps	result1, #0 wc
188dc     00 1E 26 36 |  if_ae	not	local01, #0
188e0     A7 1E 62 FC | 	wrlong	local01, fp
188e4     C8 03 90 FD | 	jmp	#LR__2073
188e8                 | LR__2061
188e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
188e8     08 4E 05 F1 | 	add	fp, #8
188ec     A7 1E 02 FB | 	rdlong	local01, fp
188f0     08 4E 85 F1 | 	sub	fp, #8
188f4     1E 1E 0E F2 | 	cmp	local01, #30 wz
188f8     14 4E 05 A1 |  if_e	add	fp, #20
188fc     A7 24 02 AB |  if_e	rdlong	local04, fp
18900     14 4E 85 A1 |  if_e	sub	fp, #20
18904     12 23 02 A6 |  if_e	mov	local03, local04
18908     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1890c     48 00 90 5D |  if_ne	jmp	#LR__2062
18910     00 1E 06 F6 | 	mov	local01, #0
18914     A7 20 02 FB | 	rdlong	local02, fp
18918     0C 4E 05 F1 | 	add	fp, #12
1891c     A7 12 02 FB | 	rdlong	arg01, fp
18920     0C 4E 85 F1 | 	sub	fp, #12
18924     09 13 52 F6 | 	abs	arg01, arg01 wc
18928     1F 26 C6 C9 |  if_b	decod	local05, #31
1892c     00 26 06 36 |  if_ae	mov	local05, #0
18930     AC A6 B0 FD | 	call	#__system___float_fromuns
18934     13 FB 61 F5 | 	xor	result1, local05
18938     FD 14 02 F6 | 	mov	arg02, result1
1893c     10 13 02 F6 | 	mov	arg01, local02
18940     01 16 66 F6 | 	neg	arg03, #1
18944     D0 AE B0 FD | 	call	#__system___float_cmp
18948     00 FA 55 F2 | 	cmps	result1, #0 wc
1894c     00 1E 26 36 |  if_ae	not	local01, #0
18950     A7 1E 62 FC | 	wrlong	local01, fp
18954     58 03 90 FD | 	jmp	#LR__2073
18958                 | LR__2062
18958                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
18958     08 4E 05 F1 | 	add	fp, #8
1895c     A7 1E 02 FB | 	rdlong	local01, fp
18960     08 4E 85 F1 | 	sub	fp, #8
18964     1E 1E 0E F2 | 	cmp	local01, #30 wz
18968     14 4E 05 A1 |  if_e	add	fp, #20
1896c     A7 24 02 AB |  if_e	rdlong	local04, fp
18970     14 4E 85 A1 |  if_e	sub	fp, #20
18974     12 23 02 A6 |  if_e	mov	local03, local04
18978     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1897c     38 00 90 5D |  if_ne	jmp	#LR__2063
18980     00 1E 06 F6 | 	mov	local01, #0
18984     A7 20 02 FB | 	rdlong	local02, fp
18988     0C 4E 05 F1 | 	add	fp, #12
1898c     A7 12 02 FB | 	rdlong	arg01, fp
18990     0C 4E 85 F1 | 	sub	fp, #12
18994     48 A6 B0 FD | 	call	#__system___float_fromuns
18998     FD 14 02 F6 | 	mov	arg02, result1
1899c     10 13 02 F6 | 	mov	arg01, local02
189a0     01 16 66 F6 | 	neg	arg03, #1
189a4     70 AE B0 FD | 	call	#__system___float_cmp
189a8     00 FA 55 F2 | 	cmps	result1, #0 wc
189ac     00 1E 26 36 |  if_ae	not	local01, #0
189b0     A7 1E 62 FC | 	wrlong	local01, fp
189b4     F8 02 90 FD | 	jmp	#LR__2073
189b8                 | LR__2063
189b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
189b8     08 4E 05 F1 | 	add	fp, #8
189bc     A7 1E 02 FB | 	rdlong	local01, fp
189c0     08 4E 85 F1 | 	sub	fp, #8
189c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
189c8     14 4E 05 A1 |  if_e	add	fp, #20
189cc     A7 24 02 AB |  if_e	rdlong	local04, fp
189d0     14 4E 85 A1 |  if_e	sub	fp, #20
189d4     12 23 02 A6 |  if_e	mov	local03, local04
189d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
189dc     44 00 90 5D |  if_ne	jmp	#LR__2064
189e0     00 1E 06 F6 | 	mov	local01, #0
189e4     A7 12 02 FB | 	rdlong	arg01, fp
189e8     09 13 52 F6 | 	abs	arg01, arg01 wc
189ec     1F 26 C6 C9 |  if_b	decod	local05, #31
189f0     00 26 06 36 |  if_ae	mov	local05, #0
189f4     E8 A5 B0 FD | 	call	#__system___float_fromuns
189f8     13 FB 61 F5 | 	xor	result1, local05
189fc     FD 12 02 F6 | 	mov	arg01, result1
18a00     0C 4E 05 F1 | 	add	fp, #12
18a04     A7 14 02 FB | 	rdlong	arg02, fp
18a08     0C 4E 85 F1 | 	sub	fp, #12
18a0c     01 16 66 F6 | 	neg	arg03, #1
18a10     04 AE B0 FD | 	call	#__system___float_cmp
18a14     00 FA 55 F2 | 	cmps	result1, #0 wc
18a18     00 1E 26 36 |  if_ae	not	local01, #0
18a1c     A7 1E 62 FC | 	wrlong	local01, fp
18a20     8C 02 90 FD | 	jmp	#LR__2073
18a24                 | LR__2064
18a24                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
18a24     08 4E 05 F1 | 	add	fp, #8
18a28     A7 1E 02 FB | 	rdlong	local01, fp
18a2c     08 4E 85 F1 | 	sub	fp, #8
18a30     1C 1E 0E F2 | 	cmp	local01, #28 wz
18a34     14 4E 05 A1 |  if_e	add	fp, #20
18a38     A7 24 02 AB |  if_e	rdlong	local04, fp
18a3c     14 4E 85 A1 |  if_e	sub	fp, #20
18a40     12 23 02 A6 |  if_e	mov	local03, local04
18a44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18a48     24 00 90 5D |  if_ne	jmp	#LR__2065
18a4c     00 1E 06 F6 | 	mov	local01, #0
18a50     A7 20 02 FB | 	rdlong	local02, fp
18a54     0C 4E 05 F1 | 	add	fp, #12
18a58     A7 22 02 FB | 	rdlong	local03, fp
18a5c     0C 4E 85 F1 | 	sub	fp, #12
18a60     11 21 52 F2 | 	cmps	local02, local03 wc
18a64     01 1E 66 36 |  if_ae	neg	local01, #1
18a68     A7 1E 62 FC | 	wrlong	local01, fp
18a6c     40 02 90 FD | 	jmp	#LR__2073
18a70                 | LR__2065
18a70                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
18a70     08 4E 05 F1 | 	add	fp, #8
18a74     A7 1E 02 FB | 	rdlong	local01, fp
18a78     08 4E 85 F1 | 	sub	fp, #8
18a7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18a80     14 4E 05 A1 |  if_e	add	fp, #20
18a84     A7 24 02 AB |  if_e	rdlong	local04, fp
18a88     14 4E 85 A1 |  if_e	sub	fp, #20
18a8c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
18a90     24 00 90 5D |  if_ne	jmp	#LR__2066
18a94     00 1E 06 F6 | 	mov	local01, #0
18a98     A7 20 02 FB | 	rdlong	local02, fp
18a9c     0C 4E 05 F1 | 	add	fp, #12
18aa0     A7 22 02 FB | 	rdlong	local03, fp
18aa4     0C 4E 85 F1 | 	sub	fp, #12
18aa8     11 21 52 F2 | 	cmps	local02, local03 wc
18aac     01 1E 66 36 |  if_ae	neg	local01, #1
18ab0     A7 1E 62 FC | 	wrlong	local01, fp
18ab4     F8 01 90 FD | 	jmp	#LR__2073
18ab8                 | LR__2066
18ab8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
18ab8     08 4E 05 F1 | 	add	fp, #8
18abc     A7 1E 02 FB | 	rdlong	local01, fp
18ac0     08 4E 85 F1 | 	sub	fp, #8
18ac4     1D 1E 0E F2 | 	cmp	local01, #29 wz
18ac8     14 4E 05 A1 |  if_e	add	fp, #20
18acc     A7 22 02 AB |  if_e	rdlong	local03, fp
18ad0     14 4E 85 A1 |  if_e	sub	fp, #20
18ad4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18ad8     34 00 90 5D |  if_ne	jmp	#LR__2067
18adc     00 1E 06 F6 | 	mov	local01, #0
18ae0     A7 12 02 FB | 	rdlong	arg01, fp
18ae4     F8 A4 B0 FD | 	call	#__system___float_fromuns
18ae8     FD 12 02 F6 | 	mov	arg01, result1
18aec     0C 4E 05 F1 | 	add	fp, #12
18af0     A7 14 02 FB | 	rdlong	arg02, fp
18af4     0C 4E 85 F1 | 	sub	fp, #12
18af8     01 16 66 F6 | 	neg	arg03, #1
18afc     18 AD B0 FD | 	call	#__system___float_cmp
18b00     00 FA 55 F2 | 	cmps	result1, #0 wc
18b04     00 1E 26 36 |  if_ae	not	local01, #0
18b08     A7 1E 62 FC | 	wrlong	local01, fp
18b0c     A0 01 90 FD | 	jmp	#LR__2073
18b10                 | LR__2067
18b10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
18b10     08 4E 05 F1 | 	add	fp, #8
18b14     A7 1E 02 FB | 	rdlong	local01, fp
18b18     08 4E 85 F1 | 	sub	fp, #8
18b1c     1D 1E 0E F2 | 	cmp	local01, #29 wz
18b20     14 4E 05 A1 |  if_e	add	fp, #20
18b24     A7 22 02 AB |  if_e	rdlong	local03, fp
18b28     14 4E 85 A1 |  if_e	sub	fp, #20
18b2c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18b30     24 00 90 5D |  if_ne	jmp	#LR__2068
18b34     00 1E 06 F6 | 	mov	local01, #0
18b38     A7 20 02 FB | 	rdlong	local02, fp
18b3c     0C 4E 05 F1 | 	add	fp, #12
18b40     A7 22 02 FB | 	rdlong	local03, fp
18b44     0C 4E 85 F1 | 	sub	fp, #12
18b48     11 21 52 F2 | 	cmps	local02, local03 wc
18b4c     01 1E 66 36 |  if_ae	neg	local01, #1
18b50     A7 1E 62 FC | 	wrlong	local01, fp
18b54     58 01 90 FD | 	jmp	#LR__2073
18b58                 | LR__2068
18b58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
18b58     08 4E 05 F1 | 	add	fp, #8
18b5c     A7 1E 02 FB | 	rdlong	local01, fp
18b60     08 4E 85 F1 | 	sub	fp, #8
18b64     1D 1E 0E F2 | 	cmp	local01, #29 wz
18b68     14 4E 05 A1 |  if_e	add	fp, #20
18b6c     A7 22 02 AB |  if_e	rdlong	local03, fp
18b70     14 4E 85 A1 |  if_e	sub	fp, #20
18b74     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18b78     24 00 90 5D |  if_ne	jmp	#LR__2069
18b7c     00 1E 06 F6 | 	mov	local01, #0
18b80     A7 20 02 FB | 	rdlong	local02, fp
18b84     0C 4E 05 F1 | 	add	fp, #12
18b88     A7 22 02 FB | 	rdlong	local03, fp
18b8c     0C 4E 85 F1 | 	sub	fp, #12
18b90     11 21 12 F2 | 	cmp	local02, local03 wc
18b94     01 1E 66 36 |  if_ae	neg	local01, #1
18b98     A7 1E 62 FC | 	wrlong	local01, fp
18b9c     10 01 90 FD | 	jmp	#LR__2073
18ba0                 | LR__2069
18ba0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
18ba0     08 4E 05 F1 | 	add	fp, #8
18ba4     A7 1E 02 FB | 	rdlong	local01, fp
18ba8     08 4E 85 F1 | 	sub	fp, #8
18bac     2B 1E 0E F2 | 	cmp	local01, #43 wz
18bb0     14 4E 05 A1 |  if_e	add	fp, #20
18bb4     A7 22 02 AB |  if_e	rdlong	local03, fp
18bb8     14 4E 85 A1 |  if_e	sub	fp, #20
18bbc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18bc0     30 00 90 5D |  if_ne	jmp	#LR__2070
18bc4     00 1E 06 F6 | 	mov	local01, #0
18bc8     A7 12 02 FB | 	rdlong	arg01, fp
18bcc     44 29 BF FD | 	call	#_convertstring
18bd0     FD 12 02 F6 | 	mov	arg01, result1
18bd4     0C 4E 05 F1 | 	add	fp, #12
18bd8     A7 14 02 FB | 	rdlong	arg02, fp
18bdc     0C 4E 85 F1 | 	sub	fp, #12
18be0     74 7C B0 FD | 	call	#__system___string_cmp
18be4     00 FA 55 F2 | 	cmps	result1, #0 wc
18be8     00 1E 26 36 |  if_ae	not	local01, #0
18bec     A7 1E 62 FC | 	wrlong	local01, fp
18bf0     BC 00 90 FD | 	jmp	#LR__2073
18bf4                 | LR__2070
18bf4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
18bf4     08 4E 05 F1 | 	add	fp, #8
18bf8     A7 1E 02 FB | 	rdlong	local01, fp
18bfc     08 4E 85 F1 | 	sub	fp, #8
18c00     1F 1E 0E F2 | 	cmp	local01, #31 wz
18c04     14 4E 05 A1 |  if_e	add	fp, #20
18c08     A7 22 02 AB |  if_e	rdlong	local03, fp
18c0c     14 4E 85 A1 |  if_e	sub	fp, #20
18c10     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18c14     34 00 90 5D |  if_ne	jmp	#LR__2071
18c18     00 1E 06 F6 | 	mov	local01, #0
18c1c     A7 20 02 FB | 	rdlong	local02, fp
18c20     0C 4E 05 F1 | 	add	fp, #12
18c24     A7 12 02 FB | 	rdlong	arg01, fp
18c28     0C 4E 85 F1 | 	sub	fp, #12
18c2c     E4 28 BF FD | 	call	#_convertstring
18c30     FD 14 02 F6 | 	mov	arg02, result1
18c34     10 13 02 F6 | 	mov	arg01, local02
18c38     1C 7C B0 FD | 	call	#__system___string_cmp
18c3c     00 FA 55 F2 | 	cmps	result1, #0 wc
18c40     00 1E 26 36 |  if_ae	not	local01, #0
18c44     A7 1E 62 FC | 	wrlong	local01, fp
18c48     64 00 90 FD | 	jmp	#LR__2073
18c4c                 | LR__2071
18c4c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
18c4c     08 4E 05 F1 | 	add	fp, #8
18c50     A7 1E 02 FB | 	rdlong	local01, fp
18c54     08 4E 85 F1 | 	sub	fp, #8
18c58     2B 1E 0E F2 | 	cmp	local01, #43 wz
18c5c     14 4E 05 A1 |  if_e	add	fp, #20
18c60     A7 22 02 AB |  if_e	rdlong	local03, fp
18c64     14 4E 85 A1 |  if_e	sub	fp, #20
18c68     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18c6c     3C 00 90 5D |  if_ne	jmp	#LR__2072
18c70     00 1E 06 F6 | 	mov	local01, #0
18c74     A7 12 02 FB | 	rdlong	arg01, fp
18c78     98 28 BF FD | 	call	#_convertstring
18c7c     FD 20 02 F6 | 	mov	local02, result1
18c80     0C 4E 05 F1 | 	add	fp, #12
18c84     A7 12 02 FB | 	rdlong	arg01, fp
18c88     0C 4E 85 F1 | 	sub	fp, #12
18c8c     84 28 BF FD | 	call	#_convertstring
18c90     FD 14 02 F6 | 	mov	arg02, result1
18c94     10 13 02 F6 | 	mov	arg01, local02
18c98     BC 7B B0 FD | 	call	#__system___string_cmp
18c9c     00 FA 55 F2 | 	cmps	result1, #0 wc
18ca0     00 1E 26 36 |  if_ae	not	local01, #0
18ca4     A7 1E 62 FC | 	wrlong	local01, fp
18ca8     04 00 90 FD | 	jmp	#LR__2073
18cac                 | LR__2072
18cac     A7 00 68 FC | 	wrlong	#0, fp
18cb0                 | LR__2073
18cb0     08 4E 05 F1 | 	add	fp, #8
18cb4     A7 38 68 FC | 	wrlong	#28, fp
18cb8     08 4E 85 F1 | 	sub	fp, #8
18cbc     A7 12 02 F6 | 	mov	arg01, fp
18cc0     70 27 BF FD | 	call	#_push
18cc4     A7 F0 03 F6 | 	mov	ptra, fp
18cc8     B2 00 A0 FD | 	call	#popregs_
18ccc                 | _do_ge_ret
18ccc     2D 00 64 FD | 	ret
18cd0                 | 
18cd0                 | ' 
18cd0                 | ' '--------------------------------- greater than (>)
18cd0                 | ' 
18cd0                 | ' sub do_gt
18cd0                 | _do_gt
18cd0     05 4A 05 F6 | 	mov	COUNT_, #5
18cd4     A8 00 A0 FD | 	call	#pushregs_
18cd8     18 F0 07 F1 | 	add	ptra, #24
18cdc     BC 26 BF FD | 	call	#_pop
18ce0     FD 1E 02 F6 | 	mov	local01, result1
18ce4     FE 20 02 F6 | 	mov	local02, result2
18ce8     FF 22 02 F6 | 	mov	local03, result3
18cec     0C 4E 05 F1 | 	add	fp, #12
18cf0     A7 1E 62 FC | 	wrlong	local01, fp
18cf4     04 4E 05 F1 | 	add	fp, #4
18cf8     A7 20 62 FC | 	wrlong	local02, fp
18cfc     04 4E 05 F1 | 	add	fp, #4
18d00     A7 22 62 FC | 	wrlong	local03, fp
18d04     14 4E 85 F1 | 	sub	fp, #20
18d08     90 26 BF FD | 	call	#_pop
18d0c     FF 22 02 F6 | 	mov	local03, result3
18d10     A7 FA 61 FC | 	wrlong	result1, fp
18d14     04 4E 05 F1 | 	add	fp, #4
18d18     A7 FC 61 FC | 	wrlong	result2, fp
18d1c     04 4E 05 F1 | 	add	fp, #4
18d20     A7 22 62 FC | 	wrlong	local03, fp
18d24                 | ' 
18d24                 | ' t2=pop()
18d24                 | ' t1=pop()
18d24                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
18d24     08 4E 85 F1 | 	sub	fp, #8
18d28     1F 22 0E F2 | 	cmp	local03, #31 wz
18d2c     14 4E 05 A1 |  if_e	add	fp, #20
18d30     A7 24 02 AB |  if_e	rdlong	local04, fp
18d34     14 4E 85 A1 |  if_e	sub	fp, #20
18d38     12 23 02 A6 |  if_e	mov	local03, local04
18d3c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18d40     28 00 90 5D |  if_ne	jmp	#LR__2080
18d44     00 1E 06 F6 | 	mov	local01, #0
18d48     A7 12 02 FB | 	rdlong	arg01, fp
18d4c     0C 4E 05 F1 | 	add	fp, #12
18d50     A7 14 02 FB | 	rdlong	arg02, fp
18d54     0C 4E 85 F1 | 	sub	fp, #12
18d58     FC 7A B0 FD | 	call	#__system___string_cmp
18d5c     01 FA 55 F2 | 	cmps	result1, #1 wc
18d60     00 1E 26 36 |  if_ae	not	local01, #0
18d64     A7 1E 62 FC | 	wrlong	local01, fp
18d68     1C 04 90 FD | 	jmp	#LR__2093
18d6c                 | LR__2080
18d6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
18d6c     08 4E 05 F1 | 	add	fp, #8
18d70     A7 1E 02 FB | 	rdlong	local01, fp
18d74     08 4E 85 F1 | 	sub	fp, #8
18d78     1E 1E 0E F2 | 	cmp	local01, #30 wz
18d7c     14 4E 05 A1 |  if_e	add	fp, #20
18d80     A7 24 02 AB |  if_e	rdlong	local04, fp
18d84     14 4E 85 A1 |  if_e	sub	fp, #20
18d88     12 23 02 A6 |  if_e	mov	local03, local04
18d8c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18d90     2C 00 90 5D |  if_ne	jmp	#LR__2081
18d94     00 1E 06 F6 | 	mov	local01, #0
18d98     A7 12 02 FB | 	rdlong	arg01, fp
18d9c     0C 4E 05 F1 | 	add	fp, #12
18da0     A7 14 02 FB | 	rdlong	arg02, fp
18da4     0C 4E 85 F1 | 	sub	fp, #12
18da8     01 16 66 F6 | 	neg	arg03, #1
18dac     68 AA B0 FD | 	call	#__system___float_cmp
18db0     01 FA 55 F2 | 	cmps	result1, #1 wc
18db4     00 1E 26 36 |  if_ae	not	local01, #0
18db8     A7 1E 62 FC | 	wrlong	local01, fp
18dbc     C8 03 90 FD | 	jmp	#LR__2093
18dc0                 | LR__2081
18dc0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
18dc0     08 4E 05 F1 | 	add	fp, #8
18dc4     A7 1E 02 FB | 	rdlong	local01, fp
18dc8     08 4E 85 F1 | 	sub	fp, #8
18dcc     1E 1E 0E F2 | 	cmp	local01, #30 wz
18dd0     14 4E 05 A1 |  if_e	add	fp, #20
18dd4     A7 24 02 AB |  if_e	rdlong	local04, fp
18dd8     14 4E 85 A1 |  if_e	sub	fp, #20
18ddc     12 23 02 A6 |  if_e	mov	local03, local04
18de0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18de4     48 00 90 5D |  if_ne	jmp	#LR__2082
18de8     00 1E 06 F6 | 	mov	local01, #0
18dec     A7 20 02 FB | 	rdlong	local02, fp
18df0     0C 4E 05 F1 | 	add	fp, #12
18df4     A7 12 02 FB | 	rdlong	arg01, fp
18df8     0C 4E 85 F1 | 	sub	fp, #12
18dfc     09 13 52 F6 | 	abs	arg01, arg01 wc
18e00     1F 26 C6 C9 |  if_b	decod	local05, #31
18e04     00 26 06 36 |  if_ae	mov	local05, #0
18e08     D4 A1 B0 FD | 	call	#__system___float_fromuns
18e0c     13 FB 61 F5 | 	xor	result1, local05
18e10     FD 14 02 F6 | 	mov	arg02, result1
18e14     10 13 02 F6 | 	mov	arg01, local02
18e18     01 16 66 F6 | 	neg	arg03, #1
18e1c     F8 A9 B0 FD | 	call	#__system___float_cmp
18e20     01 FA 55 F2 | 	cmps	result1, #1 wc
18e24     00 1E 26 36 |  if_ae	not	local01, #0
18e28     A7 1E 62 FC | 	wrlong	local01, fp
18e2c     58 03 90 FD | 	jmp	#LR__2093
18e30                 | LR__2082
18e30                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
18e30     08 4E 05 F1 | 	add	fp, #8
18e34     A7 1E 02 FB | 	rdlong	local01, fp
18e38     08 4E 85 F1 | 	sub	fp, #8
18e3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
18e40     14 4E 05 A1 |  if_e	add	fp, #20
18e44     A7 24 02 AB |  if_e	rdlong	local04, fp
18e48     14 4E 85 A1 |  if_e	sub	fp, #20
18e4c     12 23 02 A6 |  if_e	mov	local03, local04
18e50     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18e54     38 00 90 5D |  if_ne	jmp	#LR__2083
18e58     00 1E 06 F6 | 	mov	local01, #0
18e5c     A7 20 02 FB | 	rdlong	local02, fp
18e60     0C 4E 05 F1 | 	add	fp, #12
18e64     A7 12 02 FB | 	rdlong	arg01, fp
18e68     0C 4E 85 F1 | 	sub	fp, #12
18e6c     70 A1 B0 FD | 	call	#__system___float_fromuns
18e70     FD 14 02 F6 | 	mov	arg02, result1
18e74     10 13 02 F6 | 	mov	arg01, local02
18e78     01 16 66 F6 | 	neg	arg03, #1
18e7c     98 A9 B0 FD | 	call	#__system___float_cmp
18e80     01 FA 55 F2 | 	cmps	result1, #1 wc
18e84     00 1E 26 36 |  if_ae	not	local01, #0
18e88     A7 1E 62 FC | 	wrlong	local01, fp
18e8c     F8 02 90 FD | 	jmp	#LR__2093
18e90                 | LR__2083
18e90                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
18e90     08 4E 05 F1 | 	add	fp, #8
18e94     A7 1E 02 FB | 	rdlong	local01, fp
18e98     08 4E 85 F1 | 	sub	fp, #8
18e9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ea0     14 4E 05 A1 |  if_e	add	fp, #20
18ea4     A7 24 02 AB |  if_e	rdlong	local04, fp
18ea8     14 4E 85 A1 |  if_e	sub	fp, #20
18eac     12 23 02 A6 |  if_e	mov	local03, local04
18eb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18eb4     44 00 90 5D |  if_ne	jmp	#LR__2084
18eb8     00 1E 06 F6 | 	mov	local01, #0
18ebc     A7 12 02 FB | 	rdlong	arg01, fp
18ec0     09 13 52 F6 | 	abs	arg01, arg01 wc
18ec4     1F 26 C6 C9 |  if_b	decod	local05, #31
18ec8     00 26 06 36 |  if_ae	mov	local05, #0
18ecc     10 A1 B0 FD | 	call	#__system___float_fromuns
18ed0     13 FB 61 F5 | 	xor	result1, local05
18ed4     FD 12 02 F6 | 	mov	arg01, result1
18ed8     0C 4E 05 F1 | 	add	fp, #12
18edc     A7 14 02 FB | 	rdlong	arg02, fp
18ee0     0C 4E 85 F1 | 	sub	fp, #12
18ee4     01 16 66 F6 | 	neg	arg03, #1
18ee8     2C A9 B0 FD | 	call	#__system___float_cmp
18eec     01 FA 55 F2 | 	cmps	result1, #1 wc
18ef0     00 1E 26 36 |  if_ae	not	local01, #0
18ef4     A7 1E 62 FC | 	wrlong	local01, fp
18ef8     8C 02 90 FD | 	jmp	#LR__2093
18efc                 | LR__2084
18efc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
18efc     08 4E 05 F1 | 	add	fp, #8
18f00     A7 1E 02 FB | 	rdlong	local01, fp
18f04     08 4E 85 F1 | 	sub	fp, #8
18f08     1C 1E 0E F2 | 	cmp	local01, #28 wz
18f0c     14 4E 05 A1 |  if_e	add	fp, #20
18f10     A7 24 02 AB |  if_e	rdlong	local04, fp
18f14     14 4E 85 A1 |  if_e	sub	fp, #20
18f18     12 23 02 A6 |  if_e	mov	local03, local04
18f1c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18f20     24 00 90 5D |  if_ne	jmp	#LR__2085
18f24     00 1E 06 F6 | 	mov	local01, #0
18f28     A7 20 02 FB | 	rdlong	local02, fp
18f2c     0C 4E 05 F1 | 	add	fp, #12
18f30     A7 22 02 FB | 	rdlong	local03, fp
18f34     0C 4E 85 F1 | 	sub	fp, #12
18f38     11 21 5A F2 | 	cmps	local02, local03 wcz
18f3c     01 1E 66 16 |  if_a	neg	local01, #1
18f40     A7 1E 62 FC | 	wrlong	local01, fp
18f44     40 02 90 FD | 	jmp	#LR__2093
18f48                 | LR__2085
18f48                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
18f48     08 4E 05 F1 | 	add	fp, #8
18f4c     A7 1E 02 FB | 	rdlong	local01, fp
18f50     08 4E 85 F1 | 	sub	fp, #8
18f54     1C 1E 0E F2 | 	cmp	local01, #28 wz
18f58     14 4E 05 A1 |  if_e	add	fp, #20
18f5c     A7 24 02 AB |  if_e	rdlong	local04, fp
18f60     14 4E 85 A1 |  if_e	sub	fp, #20
18f64     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
18f68     24 00 90 5D |  if_ne	jmp	#LR__2086
18f6c     00 1E 06 F6 | 	mov	local01, #0
18f70     A7 20 02 FB | 	rdlong	local02, fp
18f74     0C 4E 05 F1 | 	add	fp, #12
18f78     A7 22 02 FB | 	rdlong	local03, fp
18f7c     0C 4E 85 F1 | 	sub	fp, #12
18f80     11 21 5A F2 | 	cmps	local02, local03 wcz
18f84     01 1E 66 16 |  if_a	neg	local01, #1
18f88     A7 1E 62 FC | 	wrlong	local01, fp
18f8c     F8 01 90 FD | 	jmp	#LR__2093
18f90                 | LR__2086
18f90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
18f90     08 4E 05 F1 | 	add	fp, #8
18f94     A7 1E 02 FB | 	rdlong	local01, fp
18f98     08 4E 85 F1 | 	sub	fp, #8
18f9c     1D 1E 0E F2 | 	cmp	local01, #29 wz
18fa0     14 4E 05 A1 |  if_e	add	fp, #20
18fa4     A7 22 02 AB |  if_e	rdlong	local03, fp
18fa8     14 4E 85 A1 |  if_e	sub	fp, #20
18fac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18fb0     34 00 90 5D |  if_ne	jmp	#LR__2087
18fb4     00 1E 06 F6 | 	mov	local01, #0
18fb8     A7 12 02 FB | 	rdlong	arg01, fp
18fbc     20 A0 B0 FD | 	call	#__system___float_fromuns
18fc0     FD 12 02 F6 | 	mov	arg01, result1
18fc4     0C 4E 05 F1 | 	add	fp, #12
18fc8     A7 14 02 FB | 	rdlong	arg02, fp
18fcc     0C 4E 85 F1 | 	sub	fp, #12
18fd0     01 16 66 F6 | 	neg	arg03, #1
18fd4     40 A8 B0 FD | 	call	#__system___float_cmp
18fd8     01 FA 55 F2 | 	cmps	result1, #1 wc
18fdc     00 1E 26 36 |  if_ae	not	local01, #0
18fe0     A7 1E 62 FC | 	wrlong	local01, fp
18fe4     A0 01 90 FD | 	jmp	#LR__2093
18fe8                 | LR__2087
18fe8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
18fe8     08 4E 05 F1 | 	add	fp, #8
18fec     A7 1E 02 FB | 	rdlong	local01, fp
18ff0     08 4E 85 F1 | 	sub	fp, #8
18ff4     1D 1E 0E F2 | 	cmp	local01, #29 wz
18ff8     14 4E 05 A1 |  if_e	add	fp, #20
18ffc     A7 22 02 AB |  if_e	rdlong	local03, fp
19000     14 4E 85 A1 |  if_e	sub	fp, #20
19004     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19008     24 00 90 5D |  if_ne	jmp	#LR__2088
1900c     00 1E 06 F6 | 	mov	local01, #0
19010     A7 20 02 FB | 	rdlong	local02, fp
19014     0C 4E 05 F1 | 	add	fp, #12
19018     A7 22 02 FB | 	rdlong	local03, fp
1901c     0C 4E 85 F1 | 	sub	fp, #12
19020     11 21 5A F2 | 	cmps	local02, local03 wcz
19024     01 1E 66 16 |  if_a	neg	local01, #1
19028     A7 1E 62 FC | 	wrlong	local01, fp
1902c     58 01 90 FD | 	jmp	#LR__2093
19030                 | LR__2088
19030                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
19030     08 4E 05 F1 | 	add	fp, #8
19034     A7 1E 02 FB | 	rdlong	local01, fp
19038     08 4E 85 F1 | 	sub	fp, #8
1903c     1D 1E 0E F2 | 	cmp	local01, #29 wz
19040     14 4E 05 A1 |  if_e	add	fp, #20
19044     A7 22 02 AB |  if_e	rdlong	local03, fp
19048     14 4E 85 A1 |  if_e	sub	fp, #20
1904c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19050     24 00 90 5D |  if_ne	jmp	#LR__2089
19054     00 1E 06 F6 | 	mov	local01, #0
19058     A7 20 02 FB | 	rdlong	local02, fp
1905c     0C 4E 05 F1 | 	add	fp, #12
19060     A7 22 02 FB | 	rdlong	local03, fp
19064     0C 4E 85 F1 | 	sub	fp, #12
19068     11 21 1A F2 | 	cmp	local02, local03 wcz
1906c     01 1E 66 16 |  if_a	neg	local01, #1
19070     A7 1E 62 FC | 	wrlong	local01, fp
19074     10 01 90 FD | 	jmp	#LR__2093
19078                 | LR__2089
19078                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
19078     08 4E 05 F1 | 	add	fp, #8
1907c     A7 1E 02 FB | 	rdlong	local01, fp
19080     08 4E 85 F1 | 	sub	fp, #8
19084     2B 1E 0E F2 | 	cmp	local01, #43 wz
19088     14 4E 05 A1 |  if_e	add	fp, #20
1908c     A7 22 02 AB |  if_e	rdlong	local03, fp
19090     14 4E 85 A1 |  if_e	sub	fp, #20
19094     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19098     30 00 90 5D |  if_ne	jmp	#LR__2090
1909c     00 1E 06 F6 | 	mov	local01, #0
190a0     A7 12 02 FB | 	rdlong	arg01, fp
190a4     6C 24 BF FD | 	call	#_convertstring
190a8     FD 12 02 F6 | 	mov	arg01, result1
190ac     0C 4E 05 F1 | 	add	fp, #12
190b0     A7 14 02 FB | 	rdlong	arg02, fp
190b4     0C 4E 85 F1 | 	sub	fp, #12
190b8     9C 77 B0 FD | 	call	#__system___string_cmp
190bc     01 FA 55 F2 | 	cmps	result1, #1 wc
190c0     00 1E 26 36 |  if_ae	not	local01, #0
190c4     A7 1E 62 FC | 	wrlong	local01, fp
190c8     BC 00 90 FD | 	jmp	#LR__2093
190cc                 | LR__2090
190cc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
190cc     08 4E 05 F1 | 	add	fp, #8
190d0     A7 1E 02 FB | 	rdlong	local01, fp
190d4     08 4E 85 F1 | 	sub	fp, #8
190d8     1F 1E 0E F2 | 	cmp	local01, #31 wz
190dc     14 4E 05 A1 |  if_e	add	fp, #20
190e0     A7 22 02 AB |  if_e	rdlong	local03, fp
190e4     14 4E 85 A1 |  if_e	sub	fp, #20
190e8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
190ec     34 00 90 5D |  if_ne	jmp	#LR__2091
190f0     00 1E 06 F6 | 	mov	local01, #0
190f4     A7 20 02 FB | 	rdlong	local02, fp
190f8     0C 4E 05 F1 | 	add	fp, #12
190fc     A7 12 02 FB | 	rdlong	arg01, fp
19100     0C 4E 85 F1 | 	sub	fp, #12
19104     0C 24 BF FD | 	call	#_convertstring
19108     FD 14 02 F6 | 	mov	arg02, result1
1910c     10 13 02 F6 | 	mov	arg01, local02
19110     44 77 B0 FD | 	call	#__system___string_cmp
19114     01 FA 55 F2 | 	cmps	result1, #1 wc
19118     00 1E 26 36 |  if_ae	not	local01, #0
1911c     A7 1E 62 FC | 	wrlong	local01, fp
19120     64 00 90 FD | 	jmp	#LR__2093
19124                 | LR__2091
19124                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
19124     08 4E 05 F1 | 	add	fp, #8
19128     A7 1E 02 FB | 	rdlong	local01, fp
1912c     08 4E 85 F1 | 	sub	fp, #8
19130     2B 1E 0E F2 | 	cmp	local01, #43 wz
19134     14 4E 05 A1 |  if_e	add	fp, #20
19138     A7 22 02 AB |  if_e	rdlong	local03, fp
1913c     14 4E 85 A1 |  if_e	sub	fp, #20
19140     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19144     3C 00 90 5D |  if_ne	jmp	#LR__2092
19148     00 1E 06 F6 | 	mov	local01, #0
1914c     A7 12 02 FB | 	rdlong	arg01, fp
19150     C0 23 BF FD | 	call	#_convertstring
19154     FD 20 02 F6 | 	mov	local02, result1
19158     0C 4E 05 F1 | 	add	fp, #12
1915c     A7 12 02 FB | 	rdlong	arg01, fp
19160     0C 4E 85 F1 | 	sub	fp, #12
19164     AC 23 BF FD | 	call	#_convertstring
19168     FD 14 02 F6 | 	mov	arg02, result1
1916c     10 13 02 F6 | 	mov	arg01, local02
19170     E4 76 B0 FD | 	call	#__system___string_cmp
19174     01 FA 55 F2 | 	cmps	result1, #1 wc
19178     00 1E 26 36 |  if_ae	not	local01, #0
1917c     A7 1E 62 FC | 	wrlong	local01, fp
19180     04 00 90 FD | 	jmp	#LR__2093
19184                 | LR__2092
19184     A7 00 68 FC | 	wrlong	#0, fp
19188                 | LR__2093
19188     08 4E 05 F1 | 	add	fp, #8
1918c     A7 38 68 FC | 	wrlong	#28, fp
19190     08 4E 85 F1 | 	sub	fp, #8
19194     A7 12 02 F6 | 	mov	arg01, fp
19198     98 22 BF FD | 	call	#_push
1919c     A7 F0 03 F6 | 	mov	ptra, fp
191a0     B2 00 A0 FD | 	call	#popregs_
191a4                 | _do_gt_ret
191a4     2D 00 64 FD | 	ret
191a8                 | 
191a8                 | ' 
191a8                 | ' '--------------------------------- less or equal (<=)
191a8                 | ' 
191a8                 | ' sub do_le
191a8                 | _do_le
191a8     05 4A 05 F6 | 	mov	COUNT_, #5
191ac     A8 00 A0 FD | 	call	#pushregs_
191b0     18 F0 07 F1 | 	add	ptra, #24
191b4     E4 21 BF FD | 	call	#_pop
191b8     FD 1E 02 F6 | 	mov	local01, result1
191bc     FE 20 02 F6 | 	mov	local02, result2
191c0     FF 22 02 F6 | 	mov	local03, result3
191c4     0C 4E 05 F1 | 	add	fp, #12
191c8     A7 1E 62 FC | 	wrlong	local01, fp
191cc     04 4E 05 F1 | 	add	fp, #4
191d0     A7 20 62 FC | 	wrlong	local02, fp
191d4     04 4E 05 F1 | 	add	fp, #4
191d8     A7 22 62 FC | 	wrlong	local03, fp
191dc     14 4E 85 F1 | 	sub	fp, #20
191e0     B8 21 BF FD | 	call	#_pop
191e4     FF 22 02 F6 | 	mov	local03, result3
191e8     A7 FA 61 FC | 	wrlong	result1, fp
191ec     04 4E 05 F1 | 	add	fp, #4
191f0     A7 FC 61 FC | 	wrlong	result2, fp
191f4     04 4E 05 F1 | 	add	fp, #4
191f8     A7 22 62 FC | 	wrlong	local03, fp
191fc                 | ' 
191fc                 | ' t2=pop()
191fc                 | ' t1=pop()
191fc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
191fc     08 4E 85 F1 | 	sub	fp, #8
19200     1F 22 0E F2 | 	cmp	local03, #31 wz
19204     14 4E 05 A1 |  if_e	add	fp, #20
19208     A7 24 02 AB |  if_e	rdlong	local04, fp
1920c     14 4E 85 A1 |  if_e	sub	fp, #20
19210     12 23 02 A6 |  if_e	mov	local03, local04
19214     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19218     28 00 90 5D |  if_ne	jmp	#LR__2100
1921c     00 1E 06 F6 | 	mov	local01, #0
19220     A7 12 02 FB | 	rdlong	arg01, fp
19224     0C 4E 05 F1 | 	add	fp, #12
19228     A7 14 02 FB | 	rdlong	arg02, fp
1922c     0C 4E 85 F1 | 	sub	fp, #12
19230     24 76 B0 FD | 	call	#__system___string_cmp
19234     01 FA 55 F2 | 	cmps	result1, #1 wc
19238     00 1E 26 C6 |  if_b	not	local01, #0
1923c     A7 1E 62 FC | 	wrlong	local01, fp
19240     1C 04 90 FD | 	jmp	#LR__2113
19244                 | LR__2100
19244                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
19244     08 4E 05 F1 | 	add	fp, #8
19248     A7 1E 02 FB | 	rdlong	local01, fp
1924c     08 4E 85 F1 | 	sub	fp, #8
19250     1E 1E 0E F2 | 	cmp	local01, #30 wz
19254     14 4E 05 A1 |  if_e	add	fp, #20
19258     A7 24 02 AB |  if_e	rdlong	local04, fp
1925c     14 4E 85 A1 |  if_e	sub	fp, #20
19260     12 23 02 A6 |  if_e	mov	local03, local04
19264     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19268     2C 00 90 5D |  if_ne	jmp	#LR__2101
1926c     00 1E 06 F6 | 	mov	local01, #0
19270     A7 12 02 FB | 	rdlong	arg01, fp
19274     0C 4E 05 F1 | 	add	fp, #12
19278     A7 14 02 FB | 	rdlong	arg02, fp
1927c     0C 4E 85 F1 | 	sub	fp, #12
19280     01 16 06 F6 | 	mov	arg03, #1
19284     90 A5 B0 FD | 	call	#__system___float_cmp
19288     01 FA 55 F2 | 	cmps	result1, #1 wc
1928c     00 1E 26 C6 |  if_b	not	local01, #0
19290     A7 1E 62 FC | 	wrlong	local01, fp
19294     C8 03 90 FD | 	jmp	#LR__2113
19298                 | LR__2101
19298                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
19298     08 4E 05 F1 | 	add	fp, #8
1929c     A7 1E 02 FB | 	rdlong	local01, fp
192a0     08 4E 85 F1 | 	sub	fp, #8
192a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
192a8     14 4E 05 A1 |  if_e	add	fp, #20
192ac     A7 24 02 AB |  if_e	rdlong	local04, fp
192b0     14 4E 85 A1 |  if_e	sub	fp, #20
192b4     12 23 02 A6 |  if_e	mov	local03, local04
192b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
192bc     48 00 90 5D |  if_ne	jmp	#LR__2102
192c0     00 1E 06 F6 | 	mov	local01, #0
192c4     A7 20 02 FB | 	rdlong	local02, fp
192c8     0C 4E 05 F1 | 	add	fp, #12
192cc     A7 12 02 FB | 	rdlong	arg01, fp
192d0     0C 4E 85 F1 | 	sub	fp, #12
192d4     09 13 52 F6 | 	abs	arg01, arg01 wc
192d8     1F 26 C6 C9 |  if_b	decod	local05, #31
192dc     00 26 06 36 |  if_ae	mov	local05, #0
192e0     FC 9C B0 FD | 	call	#__system___float_fromuns
192e4     13 FB 61 F5 | 	xor	result1, local05
192e8     FD 14 02 F6 | 	mov	arg02, result1
192ec     10 13 02 F6 | 	mov	arg01, local02
192f0     01 16 06 F6 | 	mov	arg03, #1
192f4     20 A5 B0 FD | 	call	#__system___float_cmp
192f8     01 FA 55 F2 | 	cmps	result1, #1 wc
192fc     00 1E 26 C6 |  if_b	not	local01, #0
19300     A7 1E 62 FC | 	wrlong	local01, fp
19304     58 03 90 FD | 	jmp	#LR__2113
19308                 | LR__2102
19308                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
19308     08 4E 05 F1 | 	add	fp, #8
1930c     A7 1E 02 FB | 	rdlong	local01, fp
19310     08 4E 85 F1 | 	sub	fp, #8
19314     1E 1E 0E F2 | 	cmp	local01, #30 wz
19318     14 4E 05 A1 |  if_e	add	fp, #20
1931c     A7 24 02 AB |  if_e	rdlong	local04, fp
19320     14 4E 85 A1 |  if_e	sub	fp, #20
19324     12 23 02 A6 |  if_e	mov	local03, local04
19328     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1932c     38 00 90 5D |  if_ne	jmp	#LR__2103
19330     00 1E 06 F6 | 	mov	local01, #0
19334     A7 20 02 FB | 	rdlong	local02, fp
19338     0C 4E 05 F1 | 	add	fp, #12
1933c     A7 12 02 FB | 	rdlong	arg01, fp
19340     0C 4E 85 F1 | 	sub	fp, #12
19344     98 9C B0 FD | 	call	#__system___float_fromuns
19348     FD 14 02 F6 | 	mov	arg02, result1
1934c     10 13 02 F6 | 	mov	arg01, local02
19350     01 16 06 F6 | 	mov	arg03, #1
19354     C0 A4 B0 FD | 	call	#__system___float_cmp
19358     01 FA 55 F2 | 	cmps	result1, #1 wc
1935c     00 1E 26 C6 |  if_b	not	local01, #0
19360     A7 1E 62 FC | 	wrlong	local01, fp
19364     F8 02 90 FD | 	jmp	#LR__2113
19368                 | LR__2103
19368                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
19368     08 4E 05 F1 | 	add	fp, #8
1936c     A7 1E 02 FB | 	rdlong	local01, fp
19370     08 4E 85 F1 | 	sub	fp, #8
19374     1C 1E 0E F2 | 	cmp	local01, #28 wz
19378     14 4E 05 A1 |  if_e	add	fp, #20
1937c     A7 24 02 AB |  if_e	rdlong	local04, fp
19380     14 4E 85 A1 |  if_e	sub	fp, #20
19384     12 23 02 A6 |  if_e	mov	local03, local04
19388     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1938c     44 00 90 5D |  if_ne	jmp	#LR__2104
19390     00 1E 06 F6 | 	mov	local01, #0
19394     A7 12 02 FB | 	rdlong	arg01, fp
19398     09 13 52 F6 | 	abs	arg01, arg01 wc
1939c     1F 26 C6 C9 |  if_b	decod	local05, #31
193a0     00 26 06 36 |  if_ae	mov	local05, #0
193a4     38 9C B0 FD | 	call	#__system___float_fromuns
193a8     13 FB 61 F5 | 	xor	result1, local05
193ac     FD 12 02 F6 | 	mov	arg01, result1
193b0     0C 4E 05 F1 | 	add	fp, #12
193b4     A7 14 02 FB | 	rdlong	arg02, fp
193b8     0C 4E 85 F1 | 	sub	fp, #12
193bc     01 16 06 F6 | 	mov	arg03, #1
193c0     54 A4 B0 FD | 	call	#__system___float_cmp
193c4     01 FA 55 F2 | 	cmps	result1, #1 wc
193c8     00 1E 26 C6 |  if_b	not	local01, #0
193cc     A7 1E 62 FC | 	wrlong	local01, fp
193d0     8C 02 90 FD | 	jmp	#LR__2113
193d4                 | LR__2104
193d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
193d4     08 4E 05 F1 | 	add	fp, #8
193d8     A7 1E 02 FB | 	rdlong	local01, fp
193dc     08 4E 85 F1 | 	sub	fp, #8
193e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
193e4     14 4E 05 A1 |  if_e	add	fp, #20
193e8     A7 24 02 AB |  if_e	rdlong	local04, fp
193ec     14 4E 85 A1 |  if_e	sub	fp, #20
193f0     12 23 02 A6 |  if_e	mov	local03, local04
193f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
193f8     24 00 90 5D |  if_ne	jmp	#LR__2105
193fc     00 1E 06 F6 | 	mov	local01, #0
19400     A7 20 02 FB | 	rdlong	local02, fp
19404     0C 4E 05 F1 | 	add	fp, #12
19408     A7 22 02 FB | 	rdlong	local03, fp
1940c     0C 4E 85 F1 | 	sub	fp, #12
19410     11 21 5A F2 | 	cmps	local02, local03 wcz
19414     01 1E 66 E6 |  if_be	neg	local01, #1
19418     A7 1E 62 FC | 	wrlong	local01, fp
1941c     40 02 90 FD | 	jmp	#LR__2113
19420                 | LR__2105
19420                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
19420     08 4E 05 F1 | 	add	fp, #8
19424     A7 1E 02 FB | 	rdlong	local01, fp
19428     08 4E 85 F1 | 	sub	fp, #8
1942c     1C 1E 0E F2 | 	cmp	local01, #28 wz
19430     14 4E 05 A1 |  if_e	add	fp, #20
19434     A7 24 02 AB |  if_e	rdlong	local04, fp
19438     14 4E 85 A1 |  if_e	sub	fp, #20
1943c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19440     24 00 90 5D |  if_ne	jmp	#LR__2106
19444     00 1E 06 F6 | 	mov	local01, #0
19448     A7 20 02 FB | 	rdlong	local02, fp
1944c     0C 4E 05 F1 | 	add	fp, #12
19450     A7 22 02 FB | 	rdlong	local03, fp
19454     0C 4E 85 F1 | 	sub	fp, #12
19458     11 21 5A F2 | 	cmps	local02, local03 wcz
1945c     01 1E 66 E6 |  if_be	neg	local01, #1
19460     A7 1E 62 FC | 	wrlong	local01, fp
19464     F8 01 90 FD | 	jmp	#LR__2113
19468                 | LR__2106
19468                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
19468     08 4E 05 F1 | 	add	fp, #8
1946c     A7 1E 02 FB | 	rdlong	local01, fp
19470     08 4E 85 F1 | 	sub	fp, #8
19474     1D 1E 0E F2 | 	cmp	local01, #29 wz
19478     14 4E 05 A1 |  if_e	add	fp, #20
1947c     A7 22 02 AB |  if_e	rdlong	local03, fp
19480     14 4E 85 A1 |  if_e	sub	fp, #20
19484     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19488     34 00 90 5D |  if_ne	jmp	#LR__2107
1948c     00 1E 06 F6 | 	mov	local01, #0
19490     A7 12 02 FB | 	rdlong	arg01, fp
19494     48 9B B0 FD | 	call	#__system___float_fromuns
19498     FD 12 02 F6 | 	mov	arg01, result1
1949c     0C 4E 05 F1 | 	add	fp, #12
194a0     A7 14 02 FB | 	rdlong	arg02, fp
194a4     0C 4E 85 F1 | 	sub	fp, #12
194a8     01 16 06 F6 | 	mov	arg03, #1
194ac     68 A3 B0 FD | 	call	#__system___float_cmp
194b0     01 FA 55 F2 | 	cmps	result1, #1 wc
194b4     00 1E 26 C6 |  if_b	not	local01, #0
194b8     A7 1E 62 FC | 	wrlong	local01, fp
194bc     A0 01 90 FD | 	jmp	#LR__2113
194c0                 | LR__2107
194c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
194c0     08 4E 05 F1 | 	add	fp, #8
194c4     A7 1E 02 FB | 	rdlong	local01, fp
194c8     08 4E 85 F1 | 	sub	fp, #8
194cc     1D 1E 0E F2 | 	cmp	local01, #29 wz
194d0     14 4E 05 A1 |  if_e	add	fp, #20
194d4     A7 22 02 AB |  if_e	rdlong	local03, fp
194d8     14 4E 85 A1 |  if_e	sub	fp, #20
194dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
194e0     24 00 90 5D |  if_ne	jmp	#LR__2108
194e4     00 1E 06 F6 | 	mov	local01, #0
194e8     A7 20 02 FB | 	rdlong	local02, fp
194ec     0C 4E 05 F1 | 	add	fp, #12
194f0     A7 22 02 FB | 	rdlong	local03, fp
194f4     0C 4E 85 F1 | 	sub	fp, #12
194f8     11 21 5A F2 | 	cmps	local02, local03 wcz
194fc     01 1E 66 E6 |  if_be	neg	local01, #1
19500     A7 1E 62 FC | 	wrlong	local01, fp
19504     58 01 90 FD | 	jmp	#LR__2113
19508                 | LR__2108
19508                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
19508     08 4E 05 F1 | 	add	fp, #8
1950c     A7 1E 02 FB | 	rdlong	local01, fp
19510     08 4E 85 F1 | 	sub	fp, #8
19514     1D 1E 0E F2 | 	cmp	local01, #29 wz
19518     14 4E 05 A1 |  if_e	add	fp, #20
1951c     A7 22 02 AB |  if_e	rdlong	local03, fp
19520     14 4E 85 A1 |  if_e	sub	fp, #20
19524     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19528     24 00 90 5D |  if_ne	jmp	#LR__2109
1952c     00 1E 06 F6 | 	mov	local01, #0
19530     A7 20 02 FB | 	rdlong	local02, fp
19534     0C 4E 05 F1 | 	add	fp, #12
19538     A7 22 02 FB | 	rdlong	local03, fp
1953c     0C 4E 85 F1 | 	sub	fp, #12
19540     11 21 1A F2 | 	cmp	local02, local03 wcz
19544     01 1E 66 E6 |  if_be	neg	local01, #1
19548     A7 1E 62 FC | 	wrlong	local01, fp
1954c     10 01 90 FD | 	jmp	#LR__2113
19550                 | LR__2109
19550                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
19550     08 4E 05 F1 | 	add	fp, #8
19554     A7 1E 02 FB | 	rdlong	local01, fp
19558     08 4E 85 F1 | 	sub	fp, #8
1955c     2B 1E 0E F2 | 	cmp	local01, #43 wz
19560     14 4E 05 A1 |  if_e	add	fp, #20
19564     A7 22 02 AB |  if_e	rdlong	local03, fp
19568     14 4E 85 A1 |  if_e	sub	fp, #20
1956c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19570     30 00 90 5D |  if_ne	jmp	#LR__2110
19574     00 1E 06 F6 | 	mov	local01, #0
19578     A7 12 02 FB | 	rdlong	arg01, fp
1957c     94 1F BF FD | 	call	#_convertstring
19580     FD 12 02 F6 | 	mov	arg01, result1
19584     0C 4E 05 F1 | 	add	fp, #12
19588     A7 14 02 FB | 	rdlong	arg02, fp
1958c     0C 4E 85 F1 | 	sub	fp, #12
19590     C4 72 B0 FD | 	call	#__system___string_cmp
19594     01 FA 55 F2 | 	cmps	result1, #1 wc
19598     00 1E 26 C6 |  if_b	not	local01, #0
1959c     A7 1E 62 FC | 	wrlong	local01, fp
195a0     BC 00 90 FD | 	jmp	#LR__2113
195a4                 | LR__2110
195a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
195a4     08 4E 05 F1 | 	add	fp, #8
195a8     A7 1E 02 FB | 	rdlong	local01, fp
195ac     08 4E 85 F1 | 	sub	fp, #8
195b0     1F 1E 0E F2 | 	cmp	local01, #31 wz
195b4     14 4E 05 A1 |  if_e	add	fp, #20
195b8     A7 22 02 AB |  if_e	rdlong	local03, fp
195bc     14 4E 85 A1 |  if_e	sub	fp, #20
195c0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
195c4     34 00 90 5D |  if_ne	jmp	#LR__2111
195c8     00 1E 06 F6 | 	mov	local01, #0
195cc     A7 20 02 FB | 	rdlong	local02, fp
195d0     0C 4E 05 F1 | 	add	fp, #12
195d4     A7 12 02 FB | 	rdlong	arg01, fp
195d8     0C 4E 85 F1 | 	sub	fp, #12
195dc     34 1F BF FD | 	call	#_convertstring
195e0     FD 14 02 F6 | 	mov	arg02, result1
195e4     10 13 02 F6 | 	mov	arg01, local02
195e8     6C 72 B0 FD | 	call	#__system___string_cmp
195ec     01 FA 55 F2 | 	cmps	result1, #1 wc
195f0     00 1E 26 C6 |  if_b	not	local01, #0
195f4     A7 1E 62 FC | 	wrlong	local01, fp
195f8     64 00 90 FD | 	jmp	#LR__2113
195fc                 | LR__2111
195fc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
195fc     08 4E 05 F1 | 	add	fp, #8
19600     A7 1E 02 FB | 	rdlong	local01, fp
19604     08 4E 85 F1 | 	sub	fp, #8
19608     2B 1E 0E F2 | 	cmp	local01, #43 wz
1960c     14 4E 05 A1 |  if_e	add	fp, #20
19610     A7 22 02 AB |  if_e	rdlong	local03, fp
19614     14 4E 85 A1 |  if_e	sub	fp, #20
19618     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1961c     3C 00 90 5D |  if_ne	jmp	#LR__2112
19620     00 1E 06 F6 | 	mov	local01, #0
19624     A7 12 02 FB | 	rdlong	arg01, fp
19628     E8 1E BF FD | 	call	#_convertstring
1962c     FD 20 02 F6 | 	mov	local02, result1
19630     0C 4E 05 F1 | 	add	fp, #12
19634     A7 12 02 FB | 	rdlong	arg01, fp
19638     0C 4E 85 F1 | 	sub	fp, #12
1963c     D4 1E BF FD | 	call	#_convertstring
19640     FD 14 02 F6 | 	mov	arg02, result1
19644     10 13 02 F6 | 	mov	arg01, local02
19648     0C 72 B0 FD | 	call	#__system___string_cmp
1964c     01 FA 55 F2 | 	cmps	result1, #1 wc
19650     00 1E 26 C6 |  if_b	not	local01, #0
19654     A7 1E 62 FC | 	wrlong	local01, fp
19658     04 00 90 FD | 	jmp	#LR__2113
1965c                 | LR__2112
1965c     A7 00 68 FC | 	wrlong	#0, fp
19660                 | LR__2113
19660     08 4E 05 F1 | 	add	fp, #8
19664     A7 38 68 FC | 	wrlong	#28, fp
19668     08 4E 85 F1 | 	sub	fp, #8
1966c     A7 12 02 F6 | 	mov	arg01, fp
19670     C0 1D BF FD | 	call	#_push
19674     A7 F0 03 F6 | 	mov	ptra, fp
19678     B2 00 A0 FD | 	call	#popregs_
1967c                 | _do_le_ret
1967c     2D 00 64 FD | 	ret
19680                 | 
19680                 | ' 
19680                 | ' '--------------------------------- less than (<)
19680                 | ' 
19680                 | ' sub do_lt
19680                 | _do_lt
19680     05 4A 05 F6 | 	mov	COUNT_, #5
19684     A8 00 A0 FD | 	call	#pushregs_
19688     18 F0 07 F1 | 	add	ptra, #24
1968c     0C 1D BF FD | 	call	#_pop
19690     FD 1E 02 F6 | 	mov	local01, result1
19694     FE 20 02 F6 | 	mov	local02, result2
19698     FF 22 02 F6 | 	mov	local03, result3
1969c     0C 4E 05 F1 | 	add	fp, #12
196a0     A7 1E 62 FC | 	wrlong	local01, fp
196a4     04 4E 05 F1 | 	add	fp, #4
196a8     A7 20 62 FC | 	wrlong	local02, fp
196ac     04 4E 05 F1 | 	add	fp, #4
196b0     A7 22 62 FC | 	wrlong	local03, fp
196b4     14 4E 85 F1 | 	sub	fp, #20
196b8     E0 1C BF FD | 	call	#_pop
196bc     FF 22 02 F6 | 	mov	local03, result3
196c0     A7 FA 61 FC | 	wrlong	result1, fp
196c4     04 4E 05 F1 | 	add	fp, #4
196c8     A7 FC 61 FC | 	wrlong	result2, fp
196cc     04 4E 05 F1 | 	add	fp, #4
196d0     A7 22 62 FC | 	wrlong	local03, fp
196d4                 | ' 
196d4                 | ' t2=pop()
196d4                 | ' t1=pop()
196d4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
196d4     08 4E 85 F1 | 	sub	fp, #8
196d8     1F 22 0E F2 | 	cmp	local03, #31 wz
196dc     14 4E 05 A1 |  if_e	add	fp, #20
196e0     A7 24 02 AB |  if_e	rdlong	local04, fp
196e4     14 4E 85 A1 |  if_e	sub	fp, #20
196e8     12 23 02 A6 |  if_e	mov	local03, local04
196ec     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
196f0     28 00 90 5D |  if_ne	jmp	#LR__2120
196f4     00 1E 06 F6 | 	mov	local01, #0
196f8     A7 12 02 FB | 	rdlong	arg01, fp
196fc     0C 4E 05 F1 | 	add	fp, #12
19700     A7 14 02 FB | 	rdlong	arg02, fp
19704     0C 4E 85 F1 | 	sub	fp, #12
19708     4C 71 B0 FD | 	call	#__system___string_cmp
1970c     00 FA 55 F2 | 	cmps	result1, #0 wc
19710     00 1E 26 C6 |  if_b	not	local01, #0
19714     A7 1E 62 FC | 	wrlong	local01, fp
19718     0C 04 90 FD | 	jmp	#LR__2133
1971c                 | LR__2120
1971c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1971c     08 4E 05 F1 | 	add	fp, #8
19720     A7 1E 02 FB | 	rdlong	local01, fp
19724     08 4E 85 F1 | 	sub	fp, #8
19728     1E 1E 0E F2 | 	cmp	local01, #30 wz
1972c     14 4E 05 A1 |  if_e	add	fp, #20
19730     A7 24 02 AB |  if_e	rdlong	local04, fp
19734     14 4E 85 A1 |  if_e	sub	fp, #20
19738     12 23 02 A6 |  if_e	mov	local03, local04
1973c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19740     2C 00 90 5D |  if_ne	jmp	#LR__2121
19744     00 1E 06 F6 | 	mov	local01, #0
19748     A7 12 02 FB | 	rdlong	arg01, fp
1974c     0C 4E 05 F1 | 	add	fp, #12
19750     A7 14 02 FB | 	rdlong	arg02, fp
19754     0C 4E 85 F1 | 	sub	fp, #12
19758     01 16 06 F6 | 	mov	arg03, #1
1975c     B8 A0 B0 FD | 	call	#__system___float_cmp
19760     00 FA 55 F2 | 	cmps	result1, #0 wc
19764     00 1E 26 C6 |  if_b	not	local01, #0
19768     A7 1E 62 FC | 	wrlong	local01, fp
1976c     B8 03 90 FD | 	jmp	#LR__2133
19770                 | LR__2121
19770                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
19770     08 4E 05 F1 | 	add	fp, #8
19774     A7 1E 02 FB | 	rdlong	local01, fp
19778     08 4E 85 F1 | 	sub	fp, #8
1977c     1E 1E 0E F2 | 	cmp	local01, #30 wz
19780     14 4E 05 A1 |  if_e	add	fp, #20
19784     A7 24 02 AB |  if_e	rdlong	local04, fp
19788     14 4E 85 A1 |  if_e	sub	fp, #20
1978c     12 23 02 A6 |  if_e	mov	local03, local04
19790     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19794     48 00 90 5D |  if_ne	jmp	#LR__2122
19798     00 1E 06 F6 | 	mov	local01, #0
1979c     A7 20 02 FB | 	rdlong	local02, fp
197a0     0C 4E 05 F1 | 	add	fp, #12
197a4     A7 12 02 FB | 	rdlong	arg01, fp
197a8     0C 4E 85 F1 | 	sub	fp, #12
197ac     09 13 52 F6 | 	abs	arg01, arg01 wc
197b0     1F 26 C6 C9 |  if_b	decod	local05, #31
197b4     00 26 06 36 |  if_ae	mov	local05, #0
197b8     24 98 B0 FD | 	call	#__system___float_fromuns
197bc     13 FB 61 F5 | 	xor	result1, local05
197c0     FD 14 02 F6 | 	mov	arg02, result1
197c4     10 13 02 F6 | 	mov	arg01, local02
197c8     01 16 06 F6 | 	mov	arg03, #1
197cc     48 A0 B0 FD | 	call	#__system___float_cmp
197d0     00 FA 55 F2 | 	cmps	result1, #0 wc
197d4     00 1E 26 C6 |  if_b	not	local01, #0
197d8     A7 1E 62 FC | 	wrlong	local01, fp
197dc     48 03 90 FD | 	jmp	#LR__2133
197e0                 | LR__2122
197e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
197e0     08 4E 05 F1 | 	add	fp, #8
197e4     A7 1E 02 FB | 	rdlong	local01, fp
197e8     08 4E 85 F1 | 	sub	fp, #8
197ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
197f0     14 4E 05 A1 |  if_e	add	fp, #20
197f4     A7 24 02 AB |  if_e	rdlong	local04, fp
197f8     14 4E 85 A1 |  if_e	sub	fp, #20
197fc     12 23 02 A6 |  if_e	mov	local03, local04
19800     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19804     38 00 90 5D |  if_ne	jmp	#LR__2123
19808     00 1E 06 F6 | 	mov	local01, #0
1980c     A7 20 02 FB | 	rdlong	local02, fp
19810     0C 4E 05 F1 | 	add	fp, #12
19814     A7 12 02 FB | 	rdlong	arg01, fp
19818     0C 4E 85 F1 | 	sub	fp, #12
1981c     C0 97 B0 FD | 	call	#__system___float_fromuns
19820     FD 14 02 F6 | 	mov	arg02, result1
19824     10 13 02 F6 | 	mov	arg01, local02
19828     01 16 06 F6 | 	mov	arg03, #1
1982c     E8 9F B0 FD | 	call	#__system___float_cmp
19830     00 FA 55 F2 | 	cmps	result1, #0 wc
19834     00 1E 26 C6 |  if_b	not	local01, #0
19838     A7 1E 62 FC | 	wrlong	local01, fp
1983c     E8 02 90 FD | 	jmp	#LR__2133
19840                 | LR__2123
19840                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
19840     08 4E 05 F1 | 	add	fp, #8
19844     A7 1E 02 FB | 	rdlong	local01, fp
19848     08 4E 85 F1 | 	sub	fp, #8
1984c     1C 1E 0E F2 | 	cmp	local01, #28 wz
19850     14 4E 05 A1 |  if_e	add	fp, #20
19854     A7 24 02 AB |  if_e	rdlong	local04, fp
19858     14 4E 85 A1 |  if_e	sub	fp, #20
1985c     12 23 02 A6 |  if_e	mov	local03, local04
19860     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19864     44 00 90 5D |  if_ne	jmp	#LR__2124
19868     00 1E 06 F6 | 	mov	local01, #0
1986c     A7 12 02 FB | 	rdlong	arg01, fp
19870     09 13 52 F6 | 	abs	arg01, arg01 wc
19874     1F 26 C6 C9 |  if_b	decod	local05, #31
19878     00 26 06 36 |  if_ae	mov	local05, #0
1987c     60 97 B0 FD | 	call	#__system___float_fromuns
19880     13 FB 61 F5 | 	xor	result1, local05
19884     FD 12 02 F6 | 	mov	arg01, result1
19888     0C 4E 05 F1 | 	add	fp, #12
1988c     A7 14 02 FB | 	rdlong	arg02, fp
19890     0C 4E 85 F1 | 	sub	fp, #12
19894     01 16 06 F6 | 	mov	arg03, #1
19898     7C 9F B0 FD | 	call	#__system___float_cmp
1989c     00 FA 55 F2 | 	cmps	result1, #0 wc
198a0     00 1E 26 C6 |  if_b	not	local01, #0
198a4     A7 1E 62 FC | 	wrlong	local01, fp
198a8     7C 02 90 FD | 	jmp	#LR__2133
198ac                 | LR__2124
198ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
198ac     08 4E 05 F1 | 	add	fp, #8
198b0     A7 1E 02 FB | 	rdlong	local01, fp
198b4     08 4E 85 F1 | 	sub	fp, #8
198b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
198bc     14 4E 05 A1 |  if_e	add	fp, #20
198c0     A7 24 02 AB |  if_e	rdlong	local04, fp
198c4     14 4E 85 A1 |  if_e	sub	fp, #20
198c8     12 23 02 A6 |  if_e	mov	local03, local04
198cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
198d0     20 00 90 5D |  if_ne	jmp	#LR__2125
198d4     A7 20 02 FB | 	rdlong	local02, fp
198d8     0C 4E 05 F1 | 	add	fp, #12
198dc     A7 22 02 FB | 	rdlong	local03, fp
198e0     0C 4E 85 F1 | 	sub	fp, #12
198e4     11 21 52 F2 | 	cmps	local02, local03 wc
198e8     0F 1F A2 F1 | 	subx	local01, local01
198ec     A7 1E 62 FC | 	wrlong	local01, fp
198f0     34 02 90 FD | 	jmp	#LR__2133
198f4                 | LR__2125
198f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
198f4     08 4E 05 F1 | 	add	fp, #8
198f8     A7 1E 02 FB | 	rdlong	local01, fp
198fc     08 4E 85 F1 | 	sub	fp, #8
19900     1C 1E 0E F2 | 	cmp	local01, #28 wz
19904     14 4E 05 A1 |  if_e	add	fp, #20
19908     A7 24 02 AB |  if_e	rdlong	local04, fp
1990c     14 4E 85 A1 |  if_e	sub	fp, #20
19910     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19914     20 00 90 5D |  if_ne	jmp	#LR__2126
19918     A7 20 02 FB | 	rdlong	local02, fp
1991c     0C 4E 05 F1 | 	add	fp, #12
19920     A7 22 02 FB | 	rdlong	local03, fp
19924     0C 4E 85 F1 | 	sub	fp, #12
19928     11 21 52 F2 | 	cmps	local02, local03 wc
1992c     0F 1F A2 F1 | 	subx	local01, local01
19930     A7 1E 62 FC | 	wrlong	local01, fp
19934     F0 01 90 FD | 	jmp	#LR__2133
19938                 | LR__2126
19938                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
19938     08 4E 05 F1 | 	add	fp, #8
1993c     A7 1E 02 FB | 	rdlong	local01, fp
19940     08 4E 85 F1 | 	sub	fp, #8
19944     1D 1E 0E F2 | 	cmp	local01, #29 wz
19948     14 4E 05 A1 |  if_e	add	fp, #20
1994c     A7 22 02 AB |  if_e	rdlong	local03, fp
19950     14 4E 85 A1 |  if_e	sub	fp, #20
19954     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19958     34 00 90 5D |  if_ne	jmp	#LR__2127
1995c     00 1E 06 F6 | 	mov	local01, #0
19960     A7 12 02 FB | 	rdlong	arg01, fp
19964     78 96 B0 FD | 	call	#__system___float_fromuns
19968     FD 12 02 F6 | 	mov	arg01, result1
1996c     0C 4E 05 F1 | 	add	fp, #12
19970     A7 14 02 FB | 	rdlong	arg02, fp
19974     0C 4E 85 F1 | 	sub	fp, #12
19978     01 16 06 F6 | 	mov	arg03, #1
1997c     98 9E B0 FD | 	call	#__system___float_cmp
19980     00 FA 55 F2 | 	cmps	result1, #0 wc
19984     00 1E 26 C6 |  if_b	not	local01, #0
19988     A7 1E 62 FC | 	wrlong	local01, fp
1998c     98 01 90 FD | 	jmp	#LR__2133
19990                 | LR__2127
19990                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
19990     08 4E 05 F1 | 	add	fp, #8
19994     A7 1E 02 FB | 	rdlong	local01, fp
19998     08 4E 85 F1 | 	sub	fp, #8
1999c     1D 1E 0E F2 | 	cmp	local01, #29 wz
199a0     14 4E 05 A1 |  if_e	add	fp, #20
199a4     A7 22 02 AB |  if_e	rdlong	local03, fp
199a8     14 4E 85 A1 |  if_e	sub	fp, #20
199ac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
199b0     20 00 90 5D |  if_ne	jmp	#LR__2128
199b4     A7 20 02 FB | 	rdlong	local02, fp
199b8     0C 4E 05 F1 | 	add	fp, #12
199bc     A7 22 02 FB | 	rdlong	local03, fp
199c0     0C 4E 85 F1 | 	sub	fp, #12
199c4     11 21 52 F2 | 	cmps	local02, local03 wc
199c8     0F 1F A2 F1 | 	subx	local01, local01
199cc     A7 1E 62 FC | 	wrlong	local01, fp
199d0     54 01 90 FD | 	jmp	#LR__2133
199d4                 | LR__2128
199d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
199d4     08 4E 05 F1 | 	add	fp, #8
199d8     A7 1E 02 FB | 	rdlong	local01, fp
199dc     08 4E 85 F1 | 	sub	fp, #8
199e0     1D 1E 0E F2 | 	cmp	local01, #29 wz
199e4     14 4E 05 A1 |  if_e	add	fp, #20
199e8     A7 22 02 AB |  if_e	rdlong	local03, fp
199ec     14 4E 85 A1 |  if_e	sub	fp, #20
199f0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
199f4     20 00 90 5D |  if_ne	jmp	#LR__2129
199f8     A7 20 02 FB | 	rdlong	local02, fp
199fc     0C 4E 05 F1 | 	add	fp, #12
19a00     A7 22 02 FB | 	rdlong	local03, fp
19a04     0C 4E 85 F1 | 	sub	fp, #12
19a08     11 21 12 F2 | 	cmp	local02, local03 wc
19a0c     0F 1F A2 F1 | 	subx	local01, local01
19a10     A7 1E 62 FC | 	wrlong	local01, fp
19a14     10 01 90 FD | 	jmp	#LR__2133
19a18                 | LR__2129
19a18                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
19a18     08 4E 05 F1 | 	add	fp, #8
19a1c     A7 1E 02 FB | 	rdlong	local01, fp
19a20     08 4E 85 F1 | 	sub	fp, #8
19a24     2B 1E 0E F2 | 	cmp	local01, #43 wz
19a28     14 4E 05 A1 |  if_e	add	fp, #20
19a2c     A7 22 02 AB |  if_e	rdlong	local03, fp
19a30     14 4E 85 A1 |  if_e	sub	fp, #20
19a34     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19a38     30 00 90 5D |  if_ne	jmp	#LR__2130
19a3c     00 1E 06 F6 | 	mov	local01, #0
19a40     A7 12 02 FB | 	rdlong	arg01, fp
19a44     CC 1A BF FD | 	call	#_convertstring
19a48     FD 12 02 F6 | 	mov	arg01, result1
19a4c     0C 4E 05 F1 | 	add	fp, #12
19a50     A7 14 02 FB | 	rdlong	arg02, fp
19a54     0C 4E 85 F1 | 	sub	fp, #12
19a58     FC 6D B0 FD | 	call	#__system___string_cmp
19a5c     00 FA 55 F2 | 	cmps	result1, #0 wc
19a60     00 1E 26 C6 |  if_b	not	local01, #0
19a64     A7 1E 62 FC | 	wrlong	local01, fp
19a68     BC 00 90 FD | 	jmp	#LR__2133
19a6c                 | LR__2130
19a6c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
19a6c     08 4E 05 F1 | 	add	fp, #8
19a70     A7 1E 02 FB | 	rdlong	local01, fp
19a74     08 4E 85 F1 | 	sub	fp, #8
19a78     1F 1E 0E F2 | 	cmp	local01, #31 wz
19a7c     14 4E 05 A1 |  if_e	add	fp, #20
19a80     A7 22 02 AB |  if_e	rdlong	local03, fp
19a84     14 4E 85 A1 |  if_e	sub	fp, #20
19a88     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19a8c     34 00 90 5D |  if_ne	jmp	#LR__2131
19a90     00 1E 06 F6 | 	mov	local01, #0
19a94     A7 20 02 FB | 	rdlong	local02, fp
19a98     0C 4E 05 F1 | 	add	fp, #12
19a9c     A7 12 02 FB | 	rdlong	arg01, fp
19aa0     0C 4E 85 F1 | 	sub	fp, #12
19aa4     6C 1A BF FD | 	call	#_convertstring
19aa8     FD 14 02 F6 | 	mov	arg02, result1
19aac     10 13 02 F6 | 	mov	arg01, local02
19ab0     A4 6D B0 FD | 	call	#__system___string_cmp
19ab4     00 FA 55 F2 | 	cmps	result1, #0 wc
19ab8     00 1E 26 C6 |  if_b	not	local01, #0
19abc     A7 1E 62 FC | 	wrlong	local01, fp
19ac0     64 00 90 FD | 	jmp	#LR__2133
19ac4                 | LR__2131
19ac4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
19ac4     08 4E 05 F1 | 	add	fp, #8
19ac8     A7 1E 02 FB | 	rdlong	local01, fp
19acc     08 4E 85 F1 | 	sub	fp, #8
19ad0     2B 1E 0E F2 | 	cmp	local01, #43 wz
19ad4     14 4E 05 A1 |  if_e	add	fp, #20
19ad8     A7 22 02 AB |  if_e	rdlong	local03, fp
19adc     14 4E 85 A1 |  if_e	sub	fp, #20
19ae0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19ae4     3C 00 90 5D |  if_ne	jmp	#LR__2132
19ae8     00 1E 06 F6 | 	mov	local01, #0
19aec     A7 12 02 FB | 	rdlong	arg01, fp
19af0     20 1A BF FD | 	call	#_convertstring
19af4     FD 20 02 F6 | 	mov	local02, result1
19af8     0C 4E 05 F1 | 	add	fp, #12
19afc     A7 12 02 FB | 	rdlong	arg01, fp
19b00     0C 4E 85 F1 | 	sub	fp, #12
19b04     0C 1A BF FD | 	call	#_convertstring
19b08     FD 14 02 F6 | 	mov	arg02, result1
19b0c     10 13 02 F6 | 	mov	arg01, local02
19b10     44 6D B0 FD | 	call	#__system___string_cmp
19b14     00 FA 55 F2 | 	cmps	result1, #0 wc
19b18     00 1E 26 C6 |  if_b	not	local01, #0
19b1c     A7 1E 62 FC | 	wrlong	local01, fp
19b20     04 00 90 FD | 	jmp	#LR__2133
19b24                 | LR__2132
19b24     A7 00 68 FC | 	wrlong	#0, fp
19b28                 | LR__2133
19b28     08 4E 05 F1 | 	add	fp, #8
19b2c     A7 38 68 FC | 	wrlong	#28, fp
19b30     08 4E 85 F1 | 	sub	fp, #8
19b34     A7 12 02 F6 | 	mov	arg01, fp
19b38     F8 18 BF FD | 	call	#_push
19b3c     A7 F0 03 F6 | 	mov	ptra, fp
19b40     B2 00 A0 FD | 	call	#popregs_
19b44                 | _do_lt_ret
19b44     2D 00 64 FD | 	ret
19b48                 | 
19b48                 | ' 
19b48                 | ' '--------------------------------- minus (-)
19b48                 | ' 
19b48                 | ' sub do_minus
19b48                 | _do_minus
19b48     05 4A 05 F6 | 	mov	COUNT_, #5
19b4c     A8 00 A0 FD | 	call	#pushregs_
19b50     18 F0 07 F1 | 	add	ptra, #24
19b54     44 18 BF FD | 	call	#_pop
19b58     FD 1E 02 F6 | 	mov	local01, result1
19b5c     FE 20 02 F6 | 	mov	local02, result2
19b60     FF 22 02 F6 | 	mov	local03, result3
19b64     0C 4E 05 F1 | 	add	fp, #12
19b68     A7 1E 62 FC | 	wrlong	local01, fp
19b6c     04 4E 05 F1 | 	add	fp, #4
19b70     A7 20 62 FC | 	wrlong	local02, fp
19b74     04 4E 05 F1 | 	add	fp, #4
19b78     A7 22 62 FC | 	wrlong	local03, fp
19b7c     14 4E 85 F1 | 	sub	fp, #20
19b80     18 18 BF FD | 	call	#_pop
19b84     FF 22 02 F6 | 	mov	local03, result3
19b88     A7 FA 61 FC | 	wrlong	result1, fp
19b8c     04 4E 05 F1 | 	add	fp, #4
19b90     A7 FC 61 FC | 	wrlong	result2, fp
19b94     04 4E 05 F1 | 	add	fp, #4
19b98     A7 22 62 FC | 	wrlong	local03, fp
19b9c                 | ' 
19b9c                 | ' t2=pop()
19b9c                 | ' t1=pop()
19b9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
19b9c     08 4E 85 F1 | 	sub	fp, #8
19ba0     1D 22 0E F2 | 	cmp	local03, #29 wz
19ba4     14 4E 05 A1 |  if_e	add	fp, #20
19ba8     A7 24 02 AB |  if_e	rdlong	local04, fp
19bac     14 4E 85 A1 |  if_e	sub	fp, #20
19bb0     12 23 02 A6 |  if_e	mov	local03, local04
19bb4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19bb8     5C 00 90 5D |  if_ne	jmp	#LR__2141
19bbc                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
19bbc     0C 4E 05 F1 | 	add	fp, #12
19bc0     A7 1E 02 FB | 	rdlong	local01, fp
19bc4     0C 4E 85 F1 | 	sub	fp, #12
19bc8     A7 22 02 FB | 	rdlong	local03, fp
19bcc     11 1F 12 F2 | 	cmp	local01, local03 wc
19bd0     1C 00 90 3D |  if_ae	jmp	#LR__2140
19bd4     A7 1E 02 FB | 	rdlong	local01, fp
19bd8     0C 4E 05 F1 | 	add	fp, #12
19bdc     A7 20 02 FB | 	rdlong	local02, fp
19be0     0C 4E 85 F1 | 	sub	fp, #12
19be4     10 1F 82 F1 | 	sub	local01, local02
19be8     A7 1E 62 FC | 	wrlong	local01, fp
19bec     F4 02 90 FD | 	jmp	#LR__2150
19bf0                 | LR__2140
19bf0     A7 1E 02 FB | 	rdlong	local01, fp
19bf4     0C 4E 05 F1 | 	add	fp, #12
19bf8     A7 20 02 FB | 	rdlong	local02, fp
19bfc     0C 4E 85 F1 | 	sub	fp, #12
19c00     10 1F 82 F1 | 	sub	local01, local02
19c04     A7 1E 62 FC | 	wrlong	local01, fp
19c08     08 4E 05 F1 | 	add	fp, #8
19c0c     A7 38 68 FC | 	wrlong	#28, fp
19c10     08 4E 85 F1 | 	sub	fp, #8
19c14     CC 02 90 FD | 	jmp	#LR__2150
19c18                 | LR__2141
19c18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
19c18     08 4E 05 F1 | 	add	fp, #8
19c1c     A7 1E 02 FB | 	rdlong	local01, fp
19c20     08 4E 85 F1 | 	sub	fp, #8
19c24     1D 1E 0E F2 | 	cmp	local01, #29 wz
19c28     14 4E 05 A1 |  if_e	add	fp, #20
19c2c     A7 24 02 AB |  if_e	rdlong	local04, fp
19c30     14 4E 85 A1 |  if_e	sub	fp, #20
19c34     12 23 02 A6 |  if_e	mov	local03, local04
19c38     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19c3c     28 00 90 5D |  if_ne	jmp	#LR__2142
19c40     A7 1E 02 FB | 	rdlong	local01, fp
19c44     0C 4E 05 F1 | 	add	fp, #12
19c48     A7 20 02 FB | 	rdlong	local02, fp
19c4c     0C 4E 85 F1 | 	sub	fp, #12
19c50     10 1F 82 F1 | 	sub	local01, local02
19c54     A7 1E 62 FC | 	wrlong	local01, fp
19c58     08 4E 05 F1 | 	add	fp, #8
19c5c     A7 38 68 FC | 	wrlong	#28, fp
19c60     08 4E 85 F1 | 	sub	fp, #8
19c64     7C 02 90 FD | 	jmp	#LR__2150
19c68                 | LR__2142
19c68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
19c68     08 4E 05 F1 | 	add	fp, #8
19c6c     A7 1E 02 FB | 	rdlong	local01, fp
19c70     08 4E 85 F1 | 	sub	fp, #8
19c74     1D 1E 0E F2 | 	cmp	local01, #29 wz
19c78     14 4E 05 A1 |  if_e	add	fp, #20
19c7c     A7 24 02 AB |  if_e	rdlong	local04, fp
19c80     14 4E 85 A1 |  if_e	sub	fp, #20
19c84     12 23 02 A6 |  if_e	mov	local03, local04
19c88     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19c8c     34 00 90 5D |  if_ne	jmp	#LR__2143
19c90     A7 12 02 FB | 	rdlong	arg01, fp
19c94     48 93 B0 FD | 	call	#__system___float_fromuns
19c98     FD 12 02 F6 | 	mov	arg01, result1
19c9c     0C 4E 05 F1 | 	add	fp, #12
19ca0     A7 14 02 FB | 	rdlong	arg02, fp
19ca4     0C 4E 85 F1 | 	sub	fp, #12
19ca8     1F 14 E6 F4 | 	bitnot	arg02, #31
19cac     64 93 B0 FD | 	call	#__system___float_add
19cb0     A7 FA 61 FC | 	wrlong	result1, fp
19cb4     08 4E 05 F1 | 	add	fp, #8
19cb8     A7 3C 68 FC | 	wrlong	#30, fp
19cbc     08 4E 85 F1 | 	sub	fp, #8
19cc0     20 02 90 FD | 	jmp	#LR__2150
19cc4                 | LR__2143
19cc4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
19cc4     08 4E 05 F1 | 	add	fp, #8
19cc8     A7 1E 02 FB | 	rdlong	local01, fp
19ccc     08 4E 85 F1 | 	sub	fp, #8
19cd0     1C 1E 0E F2 | 	cmp	local01, #28 wz
19cd4     14 4E 05 A1 |  if_e	add	fp, #20
19cd8     A7 24 02 AB |  if_e	rdlong	local04, fp
19cdc     14 4E 85 A1 |  if_e	sub	fp, #20
19ce0     12 23 02 A6 |  if_e	mov	local03, local04
19ce4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19ce8     1C 00 90 5D |  if_ne	jmp	#LR__2144
19cec     A7 1E 02 FB | 	rdlong	local01, fp
19cf0     0C 4E 05 F1 | 	add	fp, #12
19cf4     A7 20 02 FB | 	rdlong	local02, fp
19cf8     0C 4E 85 F1 | 	sub	fp, #12
19cfc     10 1F 82 F1 | 	sub	local01, local02
19d00     A7 1E 62 FC | 	wrlong	local01, fp
19d04     DC 01 90 FD | 	jmp	#LR__2150
19d08                 | LR__2144
19d08                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
19d08     08 4E 05 F1 | 	add	fp, #8
19d0c     A7 1E 02 FB | 	rdlong	local01, fp
19d10     08 4E 85 F1 | 	sub	fp, #8
19d14     1C 1E 0E F2 | 	cmp	local01, #28 wz
19d18     14 4E 05 A1 |  if_e	add	fp, #20
19d1c     A7 24 02 AB |  if_e	rdlong	local04, fp
19d20     14 4E 85 A1 |  if_e	sub	fp, #20
19d24     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
19d28     1C 00 90 5D |  if_ne	jmp	#LR__2145
19d2c     A7 1E 02 FB | 	rdlong	local01, fp
19d30     0C 4E 05 F1 | 	add	fp, #12
19d34     A7 20 02 FB | 	rdlong	local02, fp
19d38     0C 4E 85 F1 | 	sub	fp, #12
19d3c     10 1F 82 F1 | 	sub	local01, local02
19d40     A7 1E 62 FC | 	wrlong	local01, fp
19d44     9C 01 90 FD | 	jmp	#LR__2150
19d48                 | LR__2145
19d48                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
19d48     08 4E 05 F1 | 	add	fp, #8
19d4c     A7 1E 02 FB | 	rdlong	local01, fp
19d50     08 4E 85 F1 | 	sub	fp, #8
19d54     1C 1E 0E F2 | 	cmp	local01, #28 wz
19d58     14 4E 05 A1 |  if_e	add	fp, #20
19d5c     A7 22 02 AB |  if_e	rdlong	local03, fp
19d60     14 4E 85 A1 |  if_e	sub	fp, #20
19d64     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19d68     44 00 90 5D |  if_ne	jmp	#LR__2146
19d6c     A7 12 02 FB | 	rdlong	arg01, fp
19d70     09 13 52 F6 | 	abs	arg01, arg01 wc
19d74     1F 26 C6 C9 |  if_b	decod	local05, #31
19d78     00 26 06 36 |  if_ae	mov	local05, #0
19d7c     60 92 B0 FD | 	call	#__system___float_fromuns
19d80     13 FB 61 F5 | 	xor	result1, local05
19d84     FD 12 02 F6 | 	mov	arg01, result1
19d88     0C 4E 05 F1 | 	add	fp, #12
19d8c     A7 14 02 FB | 	rdlong	arg02, fp
19d90     0C 4E 85 F1 | 	sub	fp, #12
19d94     1F 14 E6 F4 | 	bitnot	arg02, #31
19d98     78 92 B0 FD | 	call	#__system___float_add
19d9c     A7 FA 61 FC | 	wrlong	result1, fp
19da0     08 4E 05 F1 | 	add	fp, #8
19da4     A7 3C 68 FC | 	wrlong	#30, fp
19da8     08 4E 85 F1 | 	sub	fp, #8
19dac     34 01 90 FD | 	jmp	#LR__2150
19db0                 | LR__2146
19db0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
19db0     08 4E 05 F1 | 	add	fp, #8
19db4     A7 1E 02 FB | 	rdlong	local01, fp
19db8     08 4E 85 F1 | 	sub	fp, #8
19dbc     1E 1E 0E F2 | 	cmp	local01, #30 wz
19dc0     14 4E 05 A1 |  if_e	add	fp, #20
19dc4     A7 22 02 AB |  if_e	rdlong	local03, fp
19dc8     14 4E 85 A1 |  if_e	sub	fp, #20
19dcc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19dd0     2C 00 90 5D |  if_ne	jmp	#LR__2147
19dd4     A7 1E 02 FB | 	rdlong	local01, fp
19dd8     0C 4E 05 F1 | 	add	fp, #12
19ddc     A7 12 02 FB | 	rdlong	arg01, fp
19de0     0C 4E 85 F1 | 	sub	fp, #12
19de4     F8 91 B0 FD | 	call	#__system___float_fromuns
19de8     FD 14 02 F6 | 	mov	arg02, result1
19dec     0F 13 02 F6 | 	mov	arg01, local01
19df0     1F 14 E6 F4 | 	bitnot	arg02, #31
19df4     1C 92 B0 FD | 	call	#__system___float_add
19df8     A7 FA 61 FC | 	wrlong	result1, fp
19dfc     E4 00 90 FD | 	jmp	#LR__2150
19e00                 | LR__2147
19e00                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
19e00     08 4E 05 F1 | 	add	fp, #8
19e04     A7 1E 02 FB | 	rdlong	local01, fp
19e08     08 4E 85 F1 | 	sub	fp, #8
19e0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
19e10     14 4E 05 A1 |  if_e	add	fp, #20
19e14     A7 22 02 AB |  if_e	rdlong	local03, fp
19e18     14 4E 85 A1 |  if_e	sub	fp, #20
19e1c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19e20     3C 00 90 5D |  if_ne	jmp	#LR__2148
19e24     A7 1E 02 FB | 	rdlong	local01, fp
19e28     0C 4E 05 F1 | 	add	fp, #12
19e2c     A7 12 02 FB | 	rdlong	arg01, fp
19e30     0C 4E 85 F1 | 	sub	fp, #12
19e34     09 13 52 F6 | 	abs	arg01, arg01 wc
19e38     1F 26 C6 C9 |  if_b	decod	local05, #31
19e3c     00 26 06 36 |  if_ae	mov	local05, #0
19e40     9C 91 B0 FD | 	call	#__system___float_fromuns
19e44     13 FB 61 F5 | 	xor	result1, local05
19e48     FD 14 02 F6 | 	mov	arg02, result1
19e4c     0F 13 02 F6 | 	mov	arg01, local01
19e50     1F 14 E6 F4 | 	bitnot	arg02, #31
19e54     BC 91 B0 FD | 	call	#__system___float_add
19e58     A7 FA 61 FC | 	wrlong	result1, fp
19e5c     84 00 90 FD | 	jmp	#LR__2150
19e60                 | LR__2148
19e60                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
19e60     08 4E 05 F1 | 	add	fp, #8
19e64     A7 1E 02 FB | 	rdlong	local01, fp
19e68     08 4E 85 F1 | 	sub	fp, #8
19e6c     1E 1E 0E F2 | 	cmp	local01, #30 wz
19e70     14 4E 05 A1 |  if_e	add	fp, #20
19e74     A7 22 02 AB |  if_e	rdlong	local03, fp
19e78     14 4E 85 A1 |  if_e	sub	fp, #20
19e7c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19e80     20 00 90 5D |  if_ne	jmp	#LR__2149
19e84     A7 12 02 FB | 	rdlong	arg01, fp
19e88     0C 4E 05 F1 | 	add	fp, #12
19e8c     A7 14 02 FB | 	rdlong	arg02, fp
19e90     0C 4E 85 F1 | 	sub	fp, #12
19e94     1F 14 E6 F4 | 	bitnot	arg02, #31
19e98     78 91 B0 FD | 	call	#__system___float_add
19e9c     A7 FA 61 FC | 	wrlong	result1, fp
19ea0     40 00 90 FD | 	jmp	#LR__2150
19ea4                 | LR__2149
19ea4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
19ea4     08 4E 05 F1 | 	add	fp, #8
19ea8     A7 1E 02 FB | 	rdlong	local01, fp
19eac     08 4E 85 F1 | 	sub	fp, #8
19eb0     1F 1E 0E F2 | 	cmp	local01, #31 wz
19eb4     14 4E 05 51 |  if_ne	add	fp, #20
19eb8     A7 22 02 5B |  if_ne	rdlong	local03, fp
19ebc     14 4E 85 51 |  if_ne	sub	fp, #20
19ec0     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
19ec4     A7 06 68 AC |  if_e	wrlong	#3, fp
19ec8     08 4E 05 A1 |  if_e	add	fp, #8
19ecc     A7 FE 69 AC |  if_e	wrlong	#255, fp
19ed0     08 4E 85 A1 |  if_e	sub	fp, #8
19ed4     A7 0A 68 5C |  if_ne	wrlong	#5, fp
19ed8     08 4E 05 51 |  if_ne	add	fp, #8
19edc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
19ee0     08 4E 85 51 |  if_ne	sub	fp, #8
19ee4                 | LR__2150
19ee4     A7 12 02 F6 | 	mov	arg01, fp
19ee8     48 15 BF FD | 	call	#_push
19eec     A7 F0 03 F6 | 	mov	ptra, fp
19ef0     B2 00 A0 FD | 	call	#popregs_
19ef4                 | _do_minus_ret
19ef4     2D 00 64 FD | 	ret
19ef8                 | 
19ef8                 | ' 
19ef8                 | ' '--------------------------------- negative (-), one argument negative
19ef8                 | ' 
19ef8                 | ' sub do_negative
19ef8                 | _do_negative
19ef8     02 4A 05 F6 | 	mov	COUNT_, #2
19efc     A8 00 A0 FD | 	call	#pushregs_
19f00     0C F0 07 F1 | 	add	ptra, #12
19f04     94 14 BF FD | 	call	#_pop
19f08     FF 1E 02 F6 | 	mov	local01, result3
19f0c     A7 FA 61 FC | 	wrlong	result1, fp
19f10     04 4E 05 F1 | 	add	fp, #4
19f14     A7 FC 61 FC | 	wrlong	result2, fp
19f18     04 4E 05 F1 | 	add	fp, #4
19f1c     A7 1E 62 FC | 	wrlong	local01, fp
19f20                 | ' 
19f20                 | ' t1=pop()
19f20                 | ' if t1.result_type=result_int then 
19f20     08 4E 85 F1 | 	sub	fp, #8
19f24     1C 1E 0E F2 | 	cmp	local01, #28 wz
19f28     A7 20 02 AB |  if_e	rdlong	local02, fp
19f2c     10 1F 62 A6 |  if_e	neg	local01, local02
19f30     A7 1E 62 AC |  if_e	wrlong	local01, fp
19f34     5C 00 90 AD |  if_e	jmp	#LR__2162
19f38     08 4E 05 F1 | 	add	fp, #8
19f3c     A7 1E 02 FB | 	rdlong	local01, fp
19f40     08 4E 85 F1 | 	sub	fp, #8
19f44     1D 1E 0E F2 | 	cmp	local01, #29 wz
19f48     1C 00 90 5D |  if_ne	jmp	#LR__2160
19f4c     A7 20 02 FB | 	rdlong	local02, fp
19f50     10 1F 62 F6 | 	neg	local01, local02
19f54     A7 1E 62 FC | 	wrlong	local01, fp
19f58     08 4E 05 F1 | 	add	fp, #8
19f5c     A7 38 68 FC | 	wrlong	#28, fp
19f60     08 4E 85 F1 | 	sub	fp, #8
19f64     2C 00 90 FD | 	jmp	#LR__2161
19f68                 | LR__2160
19f68     08 4E 05 F1 | 	add	fp, #8
19f6c     A7 1E 02 FB | 	rdlong	local01, fp
19f70     08 4E 85 F1 | 	sub	fp, #8
19f74     1E 1E 0E F2 | 	cmp	local01, #30 wz
19f78     A7 FA 01 AB |  if_e	rdlong	result1, fp
19f7c     1F FA E5 A4 |  if_e	bitnot	result1, #31
19f80     A7 FA 61 AC |  if_e	wrlong	result1, fp
19f84     08 4E 05 51 |  if_ne	add	fp, #8
19f88     A7 FE 69 5C |  if_ne	wrlong	#255, fp
19f8c     08 4E 85 51 |  if_ne	sub	fp, #8
19f90     A7 50 68 5C |  if_ne	wrlong	#40, fp
19f94                 | LR__2161
19f94                 | LR__2162
19f94     A7 12 02 F6 | 	mov	arg01, fp
19f98     98 14 BF FD | 	call	#_push
19f9c     A7 F0 03 F6 | 	mov	ptra, fp
19fa0     B2 00 A0 FD | 	call	#popregs_
19fa4                 | _do_negative_ret
19fa4     2D 00 64 FD | 	ret
19fa8                 | 
19fa8                 | ' 
19fa8                 | ' '--------------------------------- MOD (modulo)
19fa8                 | ' 
19fa8                 | ' sub do_mod 
19fa8                 | _do_mod
19fa8     01 4A 05 F6 | 	mov	COUNT_, #1
19fac     A8 00 A0 FD | 	call	#pushregs_
19fb0     18 F0 07 F1 | 	add	ptra, #24
19fb4     E4 13 BF FD | 	call	#_pop
19fb8     FD 7E 02 F6 | 	mov	muldivb_, result1
19fbc     FE 7C 02 F6 | 	mov	muldiva_, result2
19fc0     FF 1E 02 F6 | 	mov	local01, result3
19fc4     0C 4E 05 F1 | 	add	fp, #12
19fc8     A7 7E 62 FC | 	wrlong	muldivb_, fp
19fcc     04 4E 05 F1 | 	add	fp, #4
19fd0     A7 7C 62 FC | 	wrlong	muldiva_, fp
19fd4     04 4E 05 F1 | 	add	fp, #4
19fd8     A7 1E 62 FC | 	wrlong	local01, fp
19fdc     14 4E 85 F1 | 	sub	fp, #20
19fe0     B8 13 BF FD | 	call	#_pop
19fe4     A7 FA 61 FC | 	wrlong	result1, fp
19fe8     04 4E 05 F1 | 	add	fp, #4
19fec     A7 FC 61 FC | 	wrlong	result2, fp
19ff0     04 4E 05 F1 | 	add	fp, #4
19ff4     A7 FE 61 FC | 	wrlong	result3, fp
19ff8                 | ' 
19ff8                 | ' t2=pop()
19ff8                 | ' t1=pop()
19ff8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
19ff8     08 4E 85 F1 | 	sub	fp, #8
19ffc     1F FE 0D F2 | 	cmp	result3, #31 wz
1a000     14 4E 05 51 |  if_ne	add	fp, #20
1a004     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a008     14 4E 85 51 |  if_ne	sub	fp, #20
1a00c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1a010     A7 14 68 AC |  if_e	wrlong	#10, fp
1a014     08 4E 05 A1 |  if_e	add	fp, #8
1a018     A7 FE 69 AC |  if_e	wrlong	#255, fp
1a01c     08 4E 85 A1 |  if_e	sub	fp, #8
1a020     90 01 90 AD |  if_e	jmp	#LR__2176
1a024                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1a024     08 4E 05 F1 | 	add	fp, #8
1a028     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a02c     08 4E 85 F1 | 	sub	fp, #8
1a030     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1a034     1C 00 90 5D |  if_ne	jmp	#LR__2170
1a038     08 4E 05 F1 | 	add	fp, #8
1a03c     A7 38 68 FC | 	wrlong	#28, fp
1a040     08 4E 85 F1 | 	sub	fp, #8
1a044     A7 12 02 FB | 	rdlong	arg01, fp
1a048     00 14 06 F6 | 	mov	arg02, #0
1a04c     5C 98 B0 FD | 	call	#__system___float_tointeger
1a050     A7 FA 61 FC | 	wrlong	result1, fp
1a054                 | LR__2170
1a054                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1a054     14 4E 05 F1 | 	add	fp, #20
1a058     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a05c     14 4E 85 F1 | 	sub	fp, #20
1a060     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1a064     28 00 90 5D |  if_ne	jmp	#LR__2171
1a068     14 4E 05 F1 | 	add	fp, #20
1a06c     A7 38 68 FC | 	wrlong	#28, fp
1a070     08 4E 85 F1 | 	sub	fp, #8
1a074     A7 12 02 FB | 	rdlong	arg01, fp
1a078     0C 4E 85 F1 | 	sub	fp, #12
1a07c     00 14 06 F6 | 	mov	arg02, #0
1a080     28 98 B0 FD | 	call	#__system___float_tointeger
1a084     0C 4E 05 F1 | 	add	fp, #12
1a088     A7 FA 61 FC | 	wrlong	result1, fp
1a08c     0C 4E 85 F1 | 	sub	fp, #12
1a090                 | LR__2171
1a090                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1a090     08 4E 05 F1 | 	add	fp, #8
1a094     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a098     08 4E 85 F1 | 	sub	fp, #8
1a09c     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
1a0a0     14 4E 05 A1 |  if_e	add	fp, #20
1a0a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a0a8     14 4E 85 A1 |  if_e	sub	fp, #20
1a0ac     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1a0b0     20 00 90 5D |  if_ne	jmp	#LR__2172
1a0b4     0C 4E 05 F1 | 	add	fp, #12
1a0b8     A7 1E 02 FB | 	rdlong	local01, fp
1a0bc     0C 4E 85 F1 | 	sub	fp, #12
1a0c0     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a0c4     0F 7F 12 FD | 	qdiv	muldivb_, local01
1a0c8     19 1E 62 FD | 	getqy	local01
1a0cc     A7 1E 62 FC | 	wrlong	local01, fp
1a0d0     E0 00 90 FD | 	jmp	#LR__2176
1a0d4                 | LR__2172
1a0d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1a0d4     08 4E 05 F1 | 	add	fp, #8
1a0d8     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a0dc     08 4E 85 F1 | 	sub	fp, #8
1a0e0     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
1a0e4     14 4E 05 A1 |  if_e	add	fp, #20
1a0e8     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a0ec     14 4E 85 A1 |  if_e	sub	fp, #20
1a0f0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1a0f4     2C 00 90 5D |  if_ne	jmp	#LR__2173
1a0f8     0C 4E 05 F1 | 	add	fp, #12
1a0fc     A7 1E 02 FB | 	rdlong	local01, fp
1a100     0C 4E 85 F1 | 	sub	fp, #12
1a104     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a108     0F 7F 12 FD | 	qdiv	muldivb_, local01
1a10c     19 1E 62 FD | 	getqy	local01
1a110     A7 1E 62 FC | 	wrlong	local01, fp
1a114     08 4E 05 F1 | 	add	fp, #8
1a118     A7 38 68 FC | 	wrlong	#28, fp
1a11c     08 4E 85 F1 | 	sub	fp, #8
1a120     90 00 90 FD | 	jmp	#LR__2176
1a124                 | LR__2173
1a124                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1a124     08 4E 05 F1 | 	add	fp, #8
1a128     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a12c     08 4E 85 F1 | 	sub	fp, #8
1a130     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
1a134     14 4E 05 A1 |  if_e	add	fp, #20
1a138     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a13c     14 4E 85 A1 |  if_e	sub	fp, #20
1a140     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1a144     1C 00 90 5D |  if_ne	jmp	#LR__2174
1a148     A7 7C 02 FB | 	rdlong	muldiva_, fp
1a14c     0C 4E 05 F1 | 	add	fp, #12
1a150     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a154     0C 4E 85 F1 | 	sub	fp, #12
1a158     BA 00 A0 FD | 	call	#divide_
1a15c     A7 7C 62 FC | 	wrlong	muldiva_, fp
1a160     50 00 90 FD | 	jmp	#LR__2176
1a164                 | LR__2174
1a164                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1a164     08 4E 05 F1 | 	add	fp, #8
1a168     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a16c     08 4E 85 F1 | 	sub	fp, #8
1a170     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
1a174     14 4E 05 A1 |  if_e	add	fp, #20
1a178     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a17c     14 4E 85 A1 |  if_e	sub	fp, #20
1a180     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1a184     1C 00 90 5D |  if_ne	jmp	#LR__2175
1a188     A7 7C 02 FB | 	rdlong	muldiva_, fp
1a18c     0C 4E 05 F1 | 	add	fp, #12
1a190     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a194     0C 4E 85 F1 | 	sub	fp, #12
1a198     BA 00 A0 FD | 	call	#divide_
1a19c     A7 7C 62 FC | 	wrlong	muldiva_, fp
1a1a0     10 00 90 FD | 	jmp	#LR__2176
1a1a4                 | LR__2175
1a1a4     A7 16 68 FC | 	wrlong	#11, fp
1a1a8     08 4E 05 F1 | 	add	fp, #8
1a1ac     A7 FE 69 FC | 	wrlong	#255, fp
1a1b0     08 4E 85 F1 | 	sub	fp, #8
1a1b4                 | LR__2176
1a1b4     A7 12 02 F6 | 	mov	arg01, fp
1a1b8     78 12 BF FD | 	call	#_push
1a1bc     A7 F0 03 F6 | 	mov	ptra, fp
1a1c0     B2 00 A0 FD | 	call	#popregs_
1a1c4                 | _do_mod_ret
1a1c4     2D 00 64 FD | 	ret
1a1c8                 | 
1a1c8                 | ' 
1a1c8                 | ' '--------------------------------- mul (*)
1a1c8                 | ' 
1a1c8                 | ' sub do_mul
1a1c8                 | _do_mul
1a1c8     05 4A 05 F6 | 	mov	COUNT_, #5
1a1cc     A8 00 A0 FD | 	call	#pushregs_
1a1d0     18 F0 07 F1 | 	add	ptra, #24
1a1d4     C4 11 BF FD | 	call	#_pop
1a1d8     FD 1E 02 F6 | 	mov	local01, result1
1a1dc     FE 20 02 F6 | 	mov	local02, result2
1a1e0     FF 22 02 F6 | 	mov	local03, result3
1a1e4     0C 4E 05 F1 | 	add	fp, #12
1a1e8     A7 1E 62 FC | 	wrlong	local01, fp
1a1ec     04 4E 05 F1 | 	add	fp, #4
1a1f0     A7 20 62 FC | 	wrlong	local02, fp
1a1f4     04 4E 05 F1 | 	add	fp, #4
1a1f8     A7 22 62 FC | 	wrlong	local03, fp
1a1fc     14 4E 85 F1 | 	sub	fp, #20
1a200     98 11 BF FD | 	call	#_pop
1a204     FF 22 02 F6 | 	mov	local03, result3
1a208     A7 FA 61 FC | 	wrlong	result1, fp
1a20c     04 4E 05 F1 | 	add	fp, #4
1a210     A7 FC 61 FC | 	wrlong	result2, fp
1a214     04 4E 05 F1 | 	add	fp, #4
1a218     A7 22 62 FC | 	wrlong	local03, fp
1a21c                 | ' 
1a21c                 | ' t2=pop()
1a21c                 | ' t1=pop()
1a21c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1a21c     08 4E 85 F1 | 	sub	fp, #8
1a220     1D 22 0E F2 | 	cmp	local03, #29 wz
1a224     14 4E 05 A1 |  if_e	add	fp, #20
1a228     A7 24 02 AB |  if_e	rdlong	local04, fp
1a22c     14 4E 85 A1 |  if_e	sub	fp, #20
1a230     12 23 02 A6 |  if_e	mov	local03, local04
1a234     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a238     20 00 90 5D |  if_ne	jmp	#LR__2180
1a23c     A7 20 02 FB | 	rdlong	local02, fp
1a240     0C 4E 05 F1 | 	add	fp, #12
1a244     A7 22 02 FB | 	rdlong	local03, fp
1a248     11 21 02 FD | 	qmul	local02, local03
1a24c     0C 4E 85 F1 | 	sub	fp, #12
1a250     18 1E 62 FD | 	getqx	local01
1a254     A7 1E 62 FC | 	wrlong	local01, fp
1a258     C4 02 90 FD | 	jmp	#LR__2189
1a25c                 | LR__2180
1a25c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1a25c     08 4E 05 F1 | 	add	fp, #8
1a260     A7 1E 02 FB | 	rdlong	local01, fp
1a264     08 4E 85 F1 | 	sub	fp, #8
1a268     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a26c     14 4E 05 A1 |  if_e	add	fp, #20
1a270     A7 24 02 AB |  if_e	rdlong	local04, fp
1a274     14 4E 85 A1 |  if_e	sub	fp, #20
1a278     12 23 02 A6 |  if_e	mov	local03, local04
1a27c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a280     2C 00 90 5D |  if_ne	jmp	#LR__2181
1a284     A7 20 02 FB | 	rdlong	local02, fp
1a288     0C 4E 05 F1 | 	add	fp, #12
1a28c     A7 22 02 FB | 	rdlong	local03, fp
1a290     11 21 02 FD | 	qmul	local02, local03
1a294     0C 4E 85 F1 | 	sub	fp, #12
1a298     18 1E 62 FD | 	getqx	local01
1a29c     A7 1E 62 FC | 	wrlong	local01, fp
1a2a0     08 4E 05 F1 | 	add	fp, #8
1a2a4     A7 38 68 FC | 	wrlong	#28, fp
1a2a8     08 4E 85 F1 | 	sub	fp, #8
1a2ac     70 02 90 FD | 	jmp	#LR__2189
1a2b0                 | LR__2181
1a2b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1a2b0     08 4E 05 F1 | 	add	fp, #8
1a2b4     A7 1E 02 FB | 	rdlong	local01, fp
1a2b8     08 4E 85 F1 | 	sub	fp, #8
1a2bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a2c0     14 4E 05 A1 |  if_e	add	fp, #20
1a2c4     A7 24 02 AB |  if_e	rdlong	local04, fp
1a2c8     14 4E 85 A1 |  if_e	sub	fp, #20
1a2cc     12 23 02 A6 |  if_e	mov	local03, local04
1a2d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a2d4     30 00 90 5D |  if_ne	jmp	#LR__2182
1a2d8     A7 12 02 FB | 	rdlong	arg01, fp
1a2dc     00 8D B0 FD | 	call	#__system___float_fromuns
1a2e0     FD 12 02 F6 | 	mov	arg01, result1
1a2e4     0C 4E 05 F1 | 	add	fp, #12
1a2e8     A7 14 02 FB | 	rdlong	arg02, fp
1a2ec     0C 4E 85 F1 | 	sub	fp, #12
1a2f0     F0 90 B0 FD | 	call	#__system___float_mul
1a2f4     A7 FA 61 FC | 	wrlong	result1, fp
1a2f8     08 4E 05 F1 | 	add	fp, #8
1a2fc     A7 3C 68 FC | 	wrlong	#30, fp
1a300     08 4E 85 F1 | 	sub	fp, #8
1a304     18 02 90 FD | 	jmp	#LR__2189
1a308                 | LR__2182
1a308                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1a308     08 4E 05 F1 | 	add	fp, #8
1a30c     A7 1E 02 FB | 	rdlong	local01, fp
1a310     08 4E 85 F1 | 	sub	fp, #8
1a314     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a318     14 4E 05 A1 |  if_e	add	fp, #20
1a31c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a320     14 4E 85 A1 |  if_e	sub	fp, #20
1a324     12 23 02 A6 |  if_e	mov	local03, local04
1a328     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a32c     20 00 90 5D |  if_ne	jmp	#LR__2183
1a330     A7 20 02 FB | 	rdlong	local02, fp
1a334     0C 4E 05 F1 | 	add	fp, #12
1a338     A7 22 02 FB | 	rdlong	local03, fp
1a33c     11 21 02 FD | 	qmul	local02, local03
1a340     0C 4E 85 F1 | 	sub	fp, #12
1a344     18 1E 62 FD | 	getqx	local01
1a348     A7 1E 62 FC | 	wrlong	local01, fp
1a34c     D0 01 90 FD | 	jmp	#LR__2189
1a350                 | LR__2183
1a350                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1a350     08 4E 05 F1 | 	add	fp, #8
1a354     A7 1E 02 FB | 	rdlong	local01, fp
1a358     08 4E 85 F1 | 	sub	fp, #8
1a35c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a360     14 4E 05 A1 |  if_e	add	fp, #20
1a364     A7 24 02 AB |  if_e	rdlong	local04, fp
1a368     14 4E 85 A1 |  if_e	sub	fp, #20
1a36c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1a370     20 00 90 5D |  if_ne	jmp	#LR__2184
1a374     A7 20 02 FB | 	rdlong	local02, fp
1a378     0C 4E 05 F1 | 	add	fp, #12
1a37c     A7 22 02 FB | 	rdlong	local03, fp
1a380     11 21 02 FD | 	qmul	local02, local03
1a384     0C 4E 85 F1 | 	sub	fp, #12
1a388     18 1E 62 FD | 	getqx	local01
1a38c     A7 1E 62 FC | 	wrlong	local01, fp
1a390     8C 01 90 FD | 	jmp	#LR__2189
1a394                 | LR__2184
1a394                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1a394     08 4E 05 F1 | 	add	fp, #8
1a398     A7 1E 02 FB | 	rdlong	local01, fp
1a39c     08 4E 85 F1 | 	sub	fp, #8
1a3a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a3a4     14 4E 05 A1 |  if_e	add	fp, #20
1a3a8     A7 22 02 AB |  if_e	rdlong	local03, fp
1a3ac     14 4E 85 A1 |  if_e	sub	fp, #20
1a3b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a3b4     40 00 90 5D |  if_ne	jmp	#LR__2185
1a3b8     A7 12 02 FB | 	rdlong	arg01, fp
1a3bc     09 13 52 F6 | 	abs	arg01, arg01 wc
1a3c0     1F 26 C6 C9 |  if_b	decod	local05, #31
1a3c4     00 26 06 36 |  if_ae	mov	local05, #0
1a3c8     14 8C B0 FD | 	call	#__system___float_fromuns
1a3cc     13 FB 61 F5 | 	xor	result1, local05
1a3d0     FD 12 02 F6 | 	mov	arg01, result1
1a3d4     0C 4E 05 F1 | 	add	fp, #12
1a3d8     A7 14 02 FB | 	rdlong	arg02, fp
1a3dc     0C 4E 85 F1 | 	sub	fp, #12
1a3e0     00 90 B0 FD | 	call	#__system___float_mul
1a3e4     A7 FA 61 FC | 	wrlong	result1, fp
1a3e8     08 4E 05 F1 | 	add	fp, #8
1a3ec     A7 3C 68 FC | 	wrlong	#30, fp
1a3f0     08 4E 85 F1 | 	sub	fp, #8
1a3f4     28 01 90 FD | 	jmp	#LR__2189
1a3f8                 | LR__2185
1a3f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1a3f8     08 4E 05 F1 | 	add	fp, #8
1a3fc     A7 1E 02 FB | 	rdlong	local01, fp
1a400     08 4E 85 F1 | 	sub	fp, #8
1a404     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a408     14 4E 05 A1 |  if_e	add	fp, #20
1a40c     A7 22 02 AB |  if_e	rdlong	local03, fp
1a410     14 4E 85 A1 |  if_e	sub	fp, #20
1a414     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a418     28 00 90 5D |  if_ne	jmp	#LR__2186
1a41c     A7 1E 02 FB | 	rdlong	local01, fp
1a420     0C 4E 05 F1 | 	add	fp, #12
1a424     A7 12 02 FB | 	rdlong	arg01, fp
1a428     0C 4E 85 F1 | 	sub	fp, #12
1a42c     B0 8B B0 FD | 	call	#__system___float_fromuns
1a430     FD 14 02 F6 | 	mov	arg02, result1
1a434     0F 13 02 F6 | 	mov	arg01, local01
1a438     A8 8F B0 FD | 	call	#__system___float_mul
1a43c     A7 FA 61 FC | 	wrlong	result1, fp
1a440     DC 00 90 FD | 	jmp	#LR__2189
1a444                 | LR__2186
1a444                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1a444     08 4E 05 F1 | 	add	fp, #8
1a448     A7 1E 02 FB | 	rdlong	local01, fp
1a44c     08 4E 85 F1 | 	sub	fp, #8
1a450     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a454     14 4E 05 A1 |  if_e	add	fp, #20
1a458     A7 22 02 AB |  if_e	rdlong	local03, fp
1a45c     14 4E 85 A1 |  if_e	sub	fp, #20
1a460     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a464     38 00 90 5D |  if_ne	jmp	#LR__2187
1a468     A7 1E 02 FB | 	rdlong	local01, fp
1a46c     0C 4E 05 F1 | 	add	fp, #12
1a470     A7 12 02 FB | 	rdlong	arg01, fp
1a474     0C 4E 85 F1 | 	sub	fp, #12
1a478     09 13 52 F6 | 	abs	arg01, arg01 wc
1a47c     1F 26 C6 C9 |  if_b	decod	local05, #31
1a480     00 26 06 36 |  if_ae	mov	local05, #0
1a484     58 8B B0 FD | 	call	#__system___float_fromuns
1a488     13 FB 61 F5 | 	xor	result1, local05
1a48c     FD 14 02 F6 | 	mov	arg02, result1
1a490     0F 13 02 F6 | 	mov	arg01, local01
1a494     4C 8F B0 FD | 	call	#__system___float_mul
1a498     A7 FA 61 FC | 	wrlong	result1, fp
1a49c     80 00 90 FD | 	jmp	#LR__2189
1a4a0                 | LR__2187
1a4a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1a4a0     08 4E 05 F1 | 	add	fp, #8
1a4a4     A7 1E 02 FB | 	rdlong	local01, fp
1a4a8     08 4E 85 F1 | 	sub	fp, #8
1a4ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a4b0     14 4E 05 A1 |  if_e	add	fp, #20
1a4b4     A7 22 02 AB |  if_e	rdlong	local03, fp
1a4b8     14 4E 85 A1 |  if_e	sub	fp, #20
1a4bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a4c0     1C 00 90 5D |  if_ne	jmp	#LR__2188
1a4c4     A7 12 02 FB | 	rdlong	arg01, fp
1a4c8     0C 4E 05 F1 | 	add	fp, #12
1a4cc     A7 14 02 FB | 	rdlong	arg02, fp
1a4d0     0C 4E 85 F1 | 	sub	fp, #12
1a4d4     0C 8F B0 FD | 	call	#__system___float_mul
1a4d8     A7 FA 61 FC | 	wrlong	result1, fp
1a4dc     40 00 90 FD | 	jmp	#LR__2189
1a4e0                 | LR__2188
1a4e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1a4e0     08 4E 05 F1 | 	add	fp, #8
1a4e4     A7 1E 02 FB | 	rdlong	local01, fp
1a4e8     08 4E 85 F1 | 	sub	fp, #8
1a4ec     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a4f0     14 4E 05 51 |  if_ne	add	fp, #20
1a4f4     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a4f8     14 4E 85 51 |  if_ne	sub	fp, #20
1a4fc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1a500     A7 10 68 AC |  if_e	wrlong	#8, fp
1a504     08 4E 05 A1 |  if_e	add	fp, #8
1a508     A7 FE 69 AC |  if_e	wrlong	#255, fp
1a50c     08 4E 85 A1 |  if_e	sub	fp, #8
1a510     A7 12 68 5C |  if_ne	wrlong	#9, fp
1a514     08 4E 05 51 |  if_ne	add	fp, #8
1a518     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1a51c     08 4E 85 51 |  if_ne	sub	fp, #8
1a520                 | LR__2189
1a520     A7 12 02 F6 | 	mov	arg01, fp
1a524     0C 0F BF FD | 	call	#_push
1a528     A7 F0 03 F6 | 	mov	ptra, fp
1a52c     B2 00 A0 FD | 	call	#popregs_
1a530                 | _do_mul_ret
1a530     2D 00 64 FD | 	ret
1a534                 | 
1a534                 | ' 
1a534                 | ' '--------------------------------- not equal (<>)
1a534                 | ' 
1a534                 | ' sub do_ne
1a534                 | _do_ne
1a534     05 4A 05 F6 | 	mov	COUNT_, #5
1a538     A8 00 A0 FD | 	call	#pushregs_
1a53c     18 F0 07 F1 | 	add	ptra, #24
1a540     58 0E BF FD | 	call	#_pop
1a544     FD 1E 02 F6 | 	mov	local01, result1
1a548     FE 20 02 F6 | 	mov	local02, result2
1a54c     FF 22 02 F6 | 	mov	local03, result3
1a550     0C 4E 05 F1 | 	add	fp, #12
1a554     A7 1E 62 FC | 	wrlong	local01, fp
1a558     04 4E 05 F1 | 	add	fp, #4
1a55c     A7 20 62 FC | 	wrlong	local02, fp
1a560     04 4E 05 F1 | 	add	fp, #4
1a564     A7 22 62 FC | 	wrlong	local03, fp
1a568     14 4E 85 F1 | 	sub	fp, #20
1a56c     2C 0E BF FD | 	call	#_pop
1a570     FF 22 02 F6 | 	mov	local03, result3
1a574     A7 FA 61 FC | 	wrlong	result1, fp
1a578     04 4E 05 F1 | 	add	fp, #4
1a57c     A7 FC 61 FC | 	wrlong	result2, fp
1a580     04 4E 05 F1 | 	add	fp, #4
1a584     A7 22 62 FC | 	wrlong	local03, fp
1a588                 | ' 
1a588                 | ' t2=pop()
1a588                 | ' t1=pop()
1a588                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1a588     08 4E 85 F1 | 	sub	fp, #8
1a58c     1F 22 0E F2 | 	cmp	local03, #31 wz
1a590     14 4E 05 A1 |  if_e	add	fp, #20
1a594     A7 24 02 AB |  if_e	rdlong	local04, fp
1a598     14 4E 85 A1 |  if_e	sub	fp, #20
1a59c     12 23 02 A6 |  if_e	mov	local03, local04
1a5a0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a5a4     28 00 90 5D |  if_ne	jmp	#LR__2190
1a5a8     00 1E 06 F6 | 	mov	local01, #0
1a5ac     A7 12 02 FB | 	rdlong	arg01, fp
1a5b0     0C 4E 05 F1 | 	add	fp, #12
1a5b4     A7 14 02 FB | 	rdlong	arg02, fp
1a5b8     0C 4E 85 F1 | 	sub	fp, #12
1a5bc     98 62 B0 FD | 	call	#__system___string_cmp
1a5c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5c4     00 1E 26 56 |  if_ne	not	local01, #0
1a5c8     A7 1E 62 FC | 	wrlong	local01, fp
1a5cc     1C 04 90 FD | 	jmp	#LR__2203
1a5d0                 | LR__2190
1a5d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1a5d0     08 4E 05 F1 | 	add	fp, #8
1a5d4     A7 1E 02 FB | 	rdlong	local01, fp
1a5d8     08 4E 85 F1 | 	sub	fp, #8
1a5dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a5e0     14 4E 05 A1 |  if_e	add	fp, #20
1a5e4     A7 24 02 AB |  if_e	rdlong	local04, fp
1a5e8     14 4E 85 A1 |  if_e	sub	fp, #20
1a5ec     12 23 02 A6 |  if_e	mov	local03, local04
1a5f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a5f4     2C 00 90 5D |  if_ne	jmp	#LR__2191
1a5f8     00 1E 06 F6 | 	mov	local01, #0
1a5fc     A7 12 02 FB | 	rdlong	arg01, fp
1a600     0C 4E 05 F1 | 	add	fp, #12
1a604     A7 14 02 FB | 	rdlong	arg02, fp
1a608     0C 4E 85 F1 | 	sub	fp, #12
1a60c     01 16 06 F6 | 	mov	arg03, #1
1a610     04 92 B0 FD | 	call	#__system___float_cmp
1a614     00 FA 0D F2 | 	cmp	result1, #0 wz
1a618     00 1E 26 56 |  if_ne	not	local01, #0
1a61c     A7 1E 62 FC | 	wrlong	local01, fp
1a620     C8 03 90 FD | 	jmp	#LR__2203
1a624                 | LR__2191
1a624                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1a624     08 4E 05 F1 | 	add	fp, #8
1a628     A7 1E 02 FB | 	rdlong	local01, fp
1a62c     08 4E 85 F1 | 	sub	fp, #8
1a630     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a634     14 4E 05 A1 |  if_e	add	fp, #20
1a638     A7 24 02 AB |  if_e	rdlong	local04, fp
1a63c     14 4E 85 A1 |  if_e	sub	fp, #20
1a640     12 23 02 A6 |  if_e	mov	local03, local04
1a644     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a648     48 00 90 5D |  if_ne	jmp	#LR__2192
1a64c     00 1E 06 F6 | 	mov	local01, #0
1a650     A7 20 02 FB | 	rdlong	local02, fp
1a654     0C 4E 05 F1 | 	add	fp, #12
1a658     A7 12 02 FB | 	rdlong	arg01, fp
1a65c     0C 4E 85 F1 | 	sub	fp, #12
1a660     09 13 52 F6 | 	abs	arg01, arg01 wc
1a664     1F 26 C6 C9 |  if_b	decod	local05, #31
1a668     00 26 06 36 |  if_ae	mov	local05, #0
1a66c     70 89 B0 FD | 	call	#__system___float_fromuns
1a670     13 FB 61 F5 | 	xor	result1, local05
1a674     FD 14 02 F6 | 	mov	arg02, result1
1a678     10 13 02 F6 | 	mov	arg01, local02
1a67c     01 16 06 F6 | 	mov	arg03, #1
1a680     94 91 B0 FD | 	call	#__system___float_cmp
1a684     00 FA 0D F2 | 	cmp	result1, #0 wz
1a688     00 1E 26 56 |  if_ne	not	local01, #0
1a68c     A7 1E 62 FC | 	wrlong	local01, fp
1a690     58 03 90 FD | 	jmp	#LR__2203
1a694                 | LR__2192
1a694                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1a694     08 4E 05 F1 | 	add	fp, #8
1a698     A7 1E 02 FB | 	rdlong	local01, fp
1a69c     08 4E 85 F1 | 	sub	fp, #8
1a6a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a6a4     14 4E 05 A1 |  if_e	add	fp, #20
1a6a8     A7 24 02 AB |  if_e	rdlong	local04, fp
1a6ac     14 4E 85 A1 |  if_e	sub	fp, #20
1a6b0     12 23 02 A6 |  if_e	mov	local03, local04
1a6b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a6b8     38 00 90 5D |  if_ne	jmp	#LR__2193
1a6bc     00 1E 06 F6 | 	mov	local01, #0
1a6c0     A7 20 02 FB | 	rdlong	local02, fp
1a6c4     0C 4E 05 F1 | 	add	fp, #12
1a6c8     A7 12 02 FB | 	rdlong	arg01, fp
1a6cc     0C 4E 85 F1 | 	sub	fp, #12
1a6d0     0C 89 B0 FD | 	call	#__system___float_fromuns
1a6d4     FD 14 02 F6 | 	mov	arg02, result1
1a6d8     10 13 02 F6 | 	mov	arg01, local02
1a6dc     01 16 06 F6 | 	mov	arg03, #1
1a6e0     34 91 B0 FD | 	call	#__system___float_cmp
1a6e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a6e8     00 1E 26 56 |  if_ne	not	local01, #0
1a6ec     A7 1E 62 FC | 	wrlong	local01, fp
1a6f0     F8 02 90 FD | 	jmp	#LR__2203
1a6f4                 | LR__2193
1a6f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1a6f4     08 4E 05 F1 | 	add	fp, #8
1a6f8     A7 1E 02 FB | 	rdlong	local01, fp
1a6fc     08 4E 85 F1 | 	sub	fp, #8
1a700     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a704     14 4E 05 A1 |  if_e	add	fp, #20
1a708     A7 24 02 AB |  if_e	rdlong	local04, fp
1a70c     14 4E 85 A1 |  if_e	sub	fp, #20
1a710     12 23 02 A6 |  if_e	mov	local03, local04
1a714     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a718     44 00 90 5D |  if_ne	jmp	#LR__2194
1a71c     00 1E 06 F6 | 	mov	local01, #0
1a720     A7 12 02 FB | 	rdlong	arg01, fp
1a724     09 13 52 F6 | 	abs	arg01, arg01 wc
1a728     1F 26 C6 C9 |  if_b	decod	local05, #31
1a72c     00 26 06 36 |  if_ae	mov	local05, #0
1a730     AC 88 B0 FD | 	call	#__system___float_fromuns
1a734     13 FB 61 F5 | 	xor	result1, local05
1a738     FD 12 02 F6 | 	mov	arg01, result1
1a73c     0C 4E 05 F1 | 	add	fp, #12
1a740     A7 14 02 FB | 	rdlong	arg02, fp
1a744     0C 4E 85 F1 | 	sub	fp, #12
1a748     01 16 06 F6 | 	mov	arg03, #1
1a74c     C8 90 B0 FD | 	call	#__system___float_cmp
1a750     00 FA 0D F2 | 	cmp	result1, #0 wz
1a754     00 1E 26 56 |  if_ne	not	local01, #0
1a758     A7 1E 62 FC | 	wrlong	local01, fp
1a75c     8C 02 90 FD | 	jmp	#LR__2203
1a760                 | LR__2194
1a760                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1a760     08 4E 05 F1 | 	add	fp, #8
1a764     A7 1E 02 FB | 	rdlong	local01, fp
1a768     08 4E 85 F1 | 	sub	fp, #8
1a76c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a770     14 4E 05 A1 |  if_e	add	fp, #20
1a774     A7 24 02 AB |  if_e	rdlong	local04, fp
1a778     14 4E 85 A1 |  if_e	sub	fp, #20
1a77c     12 23 02 A6 |  if_e	mov	local03, local04
1a780     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a784     24 00 90 5D |  if_ne	jmp	#LR__2195
1a788     00 1E 06 F6 | 	mov	local01, #0
1a78c     A7 20 02 FB | 	rdlong	local02, fp
1a790     0C 4E 05 F1 | 	add	fp, #12
1a794     A7 22 02 FB | 	rdlong	local03, fp
1a798     0C 4E 85 F1 | 	sub	fp, #12
1a79c     11 21 0A F2 | 	cmp	local02, local03 wz
1a7a0     01 1E 66 56 |  if_ne	neg	local01, #1
1a7a4     A7 1E 62 FC | 	wrlong	local01, fp
1a7a8     40 02 90 FD | 	jmp	#LR__2203
1a7ac                 | LR__2195
1a7ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1a7ac     08 4E 05 F1 | 	add	fp, #8
1a7b0     A7 1E 02 FB | 	rdlong	local01, fp
1a7b4     08 4E 85 F1 | 	sub	fp, #8
1a7b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a7bc     14 4E 05 A1 |  if_e	add	fp, #20
1a7c0     A7 24 02 AB |  if_e	rdlong	local04, fp
1a7c4     14 4E 85 A1 |  if_e	sub	fp, #20
1a7c8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1a7cc     24 00 90 5D |  if_ne	jmp	#LR__2196
1a7d0     00 1E 06 F6 | 	mov	local01, #0
1a7d4     A7 20 02 FB | 	rdlong	local02, fp
1a7d8     0C 4E 05 F1 | 	add	fp, #12
1a7dc     A7 22 02 FB | 	rdlong	local03, fp
1a7e0     0C 4E 85 F1 | 	sub	fp, #12
1a7e4     11 21 0A F2 | 	cmp	local02, local03 wz
1a7e8     01 1E 66 56 |  if_ne	neg	local01, #1
1a7ec     A7 1E 62 FC | 	wrlong	local01, fp
1a7f0     F8 01 90 FD | 	jmp	#LR__2203
1a7f4                 | LR__2196
1a7f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1a7f4     08 4E 05 F1 | 	add	fp, #8
1a7f8     A7 1E 02 FB | 	rdlong	local01, fp
1a7fc     08 4E 85 F1 | 	sub	fp, #8
1a800     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a804     14 4E 05 A1 |  if_e	add	fp, #20
1a808     A7 22 02 AB |  if_e	rdlong	local03, fp
1a80c     14 4E 85 A1 |  if_e	sub	fp, #20
1a810     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a814     34 00 90 5D |  if_ne	jmp	#LR__2197
1a818     00 1E 06 F6 | 	mov	local01, #0
1a81c     A7 12 02 FB | 	rdlong	arg01, fp
1a820     BC 87 B0 FD | 	call	#__system___float_fromuns
1a824     FD 12 02 F6 | 	mov	arg01, result1
1a828     0C 4E 05 F1 | 	add	fp, #12
1a82c     A7 14 02 FB | 	rdlong	arg02, fp
1a830     0C 4E 85 F1 | 	sub	fp, #12
1a834     01 16 06 F6 | 	mov	arg03, #1
1a838     DC 8F B0 FD | 	call	#__system___float_cmp
1a83c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a840     00 1E 26 56 |  if_ne	not	local01, #0
1a844     A7 1E 62 FC | 	wrlong	local01, fp
1a848     A0 01 90 FD | 	jmp	#LR__2203
1a84c                 | LR__2197
1a84c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1a84c     08 4E 05 F1 | 	add	fp, #8
1a850     A7 1E 02 FB | 	rdlong	local01, fp
1a854     08 4E 85 F1 | 	sub	fp, #8
1a858     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a85c     14 4E 05 A1 |  if_e	add	fp, #20
1a860     A7 22 02 AB |  if_e	rdlong	local03, fp
1a864     14 4E 85 A1 |  if_e	sub	fp, #20
1a868     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a86c     24 00 90 5D |  if_ne	jmp	#LR__2198
1a870     00 1E 06 F6 | 	mov	local01, #0
1a874     A7 20 02 FB | 	rdlong	local02, fp
1a878     0C 4E 05 F1 | 	add	fp, #12
1a87c     A7 22 02 FB | 	rdlong	local03, fp
1a880     0C 4E 85 F1 | 	sub	fp, #12
1a884     11 21 0A F2 | 	cmp	local02, local03 wz
1a888     01 1E 66 56 |  if_ne	neg	local01, #1
1a88c     A7 1E 62 FC | 	wrlong	local01, fp
1a890     58 01 90 FD | 	jmp	#LR__2203
1a894                 | LR__2198
1a894                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1a894     08 4E 05 F1 | 	add	fp, #8
1a898     A7 1E 02 FB | 	rdlong	local01, fp
1a89c     08 4E 85 F1 | 	sub	fp, #8
1a8a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a8a4     14 4E 05 A1 |  if_e	add	fp, #20
1a8a8     A7 22 02 AB |  if_e	rdlong	local03, fp
1a8ac     14 4E 85 A1 |  if_e	sub	fp, #20
1a8b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a8b4     24 00 90 5D |  if_ne	jmp	#LR__2199
1a8b8     00 1E 06 F6 | 	mov	local01, #0
1a8bc     A7 20 02 FB | 	rdlong	local02, fp
1a8c0     0C 4E 05 F1 | 	add	fp, #12
1a8c4     A7 22 02 FB | 	rdlong	local03, fp
1a8c8     0C 4E 85 F1 | 	sub	fp, #12
1a8cc     11 21 0A F2 | 	cmp	local02, local03 wz
1a8d0     01 1E 66 56 |  if_ne	neg	local01, #1
1a8d4     A7 1E 62 FC | 	wrlong	local01, fp
1a8d8     10 01 90 FD | 	jmp	#LR__2203
1a8dc                 | LR__2199
1a8dc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1a8dc     08 4E 05 F1 | 	add	fp, #8
1a8e0     A7 1E 02 FB | 	rdlong	local01, fp
1a8e4     08 4E 85 F1 | 	sub	fp, #8
1a8e8     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a8ec     14 4E 05 A1 |  if_e	add	fp, #20
1a8f0     A7 22 02 AB |  if_e	rdlong	local03, fp
1a8f4     14 4E 85 A1 |  if_e	sub	fp, #20
1a8f8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a8fc     30 00 90 5D |  if_ne	jmp	#LR__2200
1a900     00 1E 06 F6 | 	mov	local01, #0
1a904     A7 12 02 FB | 	rdlong	arg01, fp
1a908     08 0C BF FD | 	call	#_convertstring
1a90c     FD 12 02 F6 | 	mov	arg01, result1
1a910     0C 4E 05 F1 | 	add	fp, #12
1a914     A7 14 02 FB | 	rdlong	arg02, fp
1a918     0C 4E 85 F1 | 	sub	fp, #12
1a91c     38 5F B0 FD | 	call	#__system___string_cmp
1a920     00 FA 0D F2 | 	cmp	result1, #0 wz
1a924     00 1E 26 56 |  if_ne	not	local01, #0
1a928     A7 1E 62 FC | 	wrlong	local01, fp
1a92c     BC 00 90 FD | 	jmp	#LR__2203
1a930                 | LR__2200
1a930                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1a930     08 4E 05 F1 | 	add	fp, #8
1a934     A7 1E 02 FB | 	rdlong	local01, fp
1a938     08 4E 85 F1 | 	sub	fp, #8
1a93c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a940     14 4E 05 A1 |  if_e	add	fp, #20
1a944     A7 22 02 AB |  if_e	rdlong	local03, fp
1a948     14 4E 85 A1 |  if_e	sub	fp, #20
1a94c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a950     34 00 90 5D |  if_ne	jmp	#LR__2201
1a954     00 1E 06 F6 | 	mov	local01, #0
1a958     A7 20 02 FB | 	rdlong	local02, fp
1a95c     0C 4E 05 F1 | 	add	fp, #12
1a960     A7 12 02 FB | 	rdlong	arg01, fp
1a964     0C 4E 85 F1 | 	sub	fp, #12
1a968     A8 0B BF FD | 	call	#_convertstring
1a96c     FD 14 02 F6 | 	mov	arg02, result1
1a970     10 13 02 F6 | 	mov	arg01, local02
1a974     E0 5E B0 FD | 	call	#__system___string_cmp
1a978     00 FA 0D F2 | 	cmp	result1, #0 wz
1a97c     00 1E 26 56 |  if_ne	not	local01, #0
1a980     A7 1E 62 FC | 	wrlong	local01, fp
1a984     64 00 90 FD | 	jmp	#LR__2203
1a988                 | LR__2201
1a988                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1a988     08 4E 05 F1 | 	add	fp, #8
1a98c     A7 1E 02 FB | 	rdlong	local01, fp
1a990     08 4E 85 F1 | 	sub	fp, #8
1a994     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a998     14 4E 05 A1 |  if_e	add	fp, #20
1a99c     A7 22 02 AB |  if_e	rdlong	local03, fp
1a9a0     14 4E 85 A1 |  if_e	sub	fp, #20
1a9a4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a9a8     3C 00 90 5D |  if_ne	jmp	#LR__2202
1a9ac     00 1E 06 F6 | 	mov	local01, #0
1a9b0     A7 12 02 FB | 	rdlong	arg01, fp
1a9b4     5C 0B BF FD | 	call	#_convertstring
1a9b8     FD 20 02 F6 | 	mov	local02, result1
1a9bc     0C 4E 05 F1 | 	add	fp, #12
1a9c0     A7 12 02 FB | 	rdlong	arg01, fp
1a9c4     0C 4E 85 F1 | 	sub	fp, #12
1a9c8     48 0B BF FD | 	call	#_convertstring
1a9cc     FD 14 02 F6 | 	mov	arg02, result1
1a9d0     10 13 02 F6 | 	mov	arg01, local02
1a9d4     80 5E B0 FD | 	call	#__system___string_cmp
1a9d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a9dc     00 1E 26 56 |  if_ne	not	local01, #0
1a9e0     A7 1E 62 FC | 	wrlong	local01, fp
1a9e4     04 00 90 FD | 	jmp	#LR__2203
1a9e8                 | LR__2202
1a9e8     A7 00 68 FC | 	wrlong	#0, fp
1a9ec                 | LR__2203
1a9ec     08 4E 05 F1 | 	add	fp, #8
1a9f0     A7 38 68 FC | 	wrlong	#28, fp
1a9f4     08 4E 85 F1 | 	sub	fp, #8
1a9f8     A7 12 02 F6 | 	mov	arg01, fp
1a9fc     34 0A BF FD | 	call	#_push
1aa00     A7 F0 03 F6 | 	mov	ptra, fp
1aa04     B2 00 A0 FD | 	call	#popregs_
1aa08                 | _do_ne_ret
1aa08     2D 00 64 FD | 	ret
1aa0c                 | 
1aa0c                 | ' 
1aa0c                 | ' '--------------------------------- OR
1aa0c                 | ' 
1aa0c                 | ' sub do_or 
1aa0c                 | _do_or
1aa0c     03 4A 05 F6 | 	mov	COUNT_, #3
1aa10     A8 00 A0 FD | 	call	#pushregs_
1aa14     18 F0 07 F1 | 	add	ptra, #24
1aa18     80 09 BF FD | 	call	#_pop
1aa1c     FD 12 02 F6 | 	mov	arg01, result1
1aa20     FE 1E 02 F6 | 	mov	local01, result2
1aa24     FF 20 02 F6 | 	mov	local02, result3
1aa28     0C 4E 05 F1 | 	add	fp, #12
1aa2c     A7 12 62 FC | 	wrlong	arg01, fp
1aa30     04 4E 05 F1 | 	add	fp, #4
1aa34     A7 1E 62 FC | 	wrlong	local01, fp
1aa38     04 4E 05 F1 | 	add	fp, #4
1aa3c     A7 20 62 FC | 	wrlong	local02, fp
1aa40     14 4E 85 F1 | 	sub	fp, #20
1aa44     54 09 BF FD | 	call	#_pop
1aa48     FF 22 02 F6 | 	mov	local03, result3
1aa4c     A7 FA 61 FC | 	wrlong	result1, fp
1aa50     04 4E 05 F1 | 	add	fp, #4
1aa54     A7 FC 61 FC | 	wrlong	result2, fp
1aa58     04 4E 05 F1 | 	add	fp, #4
1aa5c     A7 22 62 FC | 	wrlong	local03, fp
1aa60                 | ' 
1aa60                 | ' t2=pop()
1aa60                 | ' t1=pop()
1aa60                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1aa60     08 4E 85 F1 | 	sub	fp, #8
1aa64     1C 22 0E F2 | 	cmp	local03, #28 wz
1aa68     A7 22 02 AB |  if_e	rdlong	local03, fp
1aa6c     A7 22 62 AC |  if_e	wrlong	local03, fp
1aa70     08 4E 05 A1 |  if_e	add	fp, #8
1aa74     A7 3A 68 AC |  if_e	wrlong	#29, fp
1aa78     08 4E 85 A1 |  if_e	sub	fp, #8
1aa7c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1aa7c     14 4E 05 F1 | 	add	fp, #20
1aa80     A7 22 02 FB | 	rdlong	local03, fp
1aa84     14 4E 85 F1 | 	sub	fp, #20
1aa88     1C 22 0E F2 | 	cmp	local03, #28 wz
1aa8c     18 00 90 5D |  if_ne	jmp	#LR__2210
1aa90     0C 4E 05 F1 | 	add	fp, #12
1aa94     A7 22 02 FB | 	rdlong	local03, fp
1aa98     A7 22 62 FC | 	wrlong	local03, fp
1aa9c     08 4E 05 F1 | 	add	fp, #8
1aaa0     A7 3A 68 FC | 	wrlong	#29, fp
1aaa4     14 4E 85 F1 | 	sub	fp, #20
1aaa8                 | LR__2210
1aaa8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1aaa8     08 4E 05 F1 | 	add	fp, #8
1aaac     A7 22 02 FB | 	rdlong	local03, fp
1aab0     08 4E 85 F1 | 	sub	fp, #8
1aab4     1F 22 0E F2 | 	cmp	local03, #31 wz
1aab8     14 4E 05 51 |  if_ne	add	fp, #20
1aabc     A7 20 02 5B |  if_ne	rdlong	local02, fp
1aac0     14 4E 85 51 |  if_ne	sub	fp, #20
1aac4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1aac8     08 4E 05 51 |  if_ne	add	fp, #8
1aacc     A7 22 02 5B |  if_ne	rdlong	local03, fp
1aad0     08 4E 85 51 |  if_ne	sub	fp, #8
1aad4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1aad8     14 4E 05 51 |  if_ne	add	fp, #20
1aadc     14 4E 85 51 |  if_ne	sub	fp, #20
1aae0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1aae4     A7 0C 68 AC |  if_e	wrlong	#6, fp
1aae8     08 4E 05 A1 |  if_e	add	fp, #8
1aaec     A7 FE 69 AC |  if_e	wrlong	#255, fp
1aaf0     08 4E 85 A1 |  if_e	sub	fp, #8
1aaf4     18 00 90 AD |  if_e	jmp	#LR__2211
1aaf8     A7 22 02 FB | 	rdlong	local03, fp
1aafc     0C 4E 05 F1 | 	add	fp, #12
1ab00     A7 1E 02 FB | 	rdlong	local01, fp
1ab04     0C 4E 85 F1 | 	sub	fp, #12
1ab08     0F 23 42 F5 | 	or	local03, local01
1ab0c     A7 22 62 FC | 	wrlong	local03, fp
1ab10                 | LR__2211
1ab10     A7 12 02 F6 | 	mov	arg01, fp
1ab14     1C 09 BF FD | 	call	#_push
1ab18     A7 F0 03 F6 | 	mov	ptra, fp
1ab1c     B2 00 A0 FD | 	call	#popregs_
1ab20                 | _do_or_ret
1ab20     2D 00 64 FD | 	ret
1ab24                 | 
1ab24                 | ' 
1ab24                 | ' '--------------------------------- plus (+)
1ab24                 | ' 
1ab24                 | ' sub do_plus 
1ab24                 | _do_plus
1ab24     05 4A 05 F6 | 	mov	COUNT_, #5
1ab28     A8 00 A0 FD | 	call	#pushregs_
1ab2c     18 F0 07 F1 | 	add	ptra, #24
1ab30     68 08 BF FD | 	call	#_pop
1ab34     FD 1E 02 F6 | 	mov	local01, result1
1ab38     FE 20 02 F6 | 	mov	local02, result2
1ab3c     FF 22 02 F6 | 	mov	local03, result3
1ab40     0C 4E 05 F1 | 	add	fp, #12
1ab44     A7 1E 62 FC | 	wrlong	local01, fp
1ab48     04 4E 05 F1 | 	add	fp, #4
1ab4c     A7 20 62 FC | 	wrlong	local02, fp
1ab50     04 4E 05 F1 | 	add	fp, #4
1ab54     A7 22 62 FC | 	wrlong	local03, fp
1ab58     14 4E 85 F1 | 	sub	fp, #20
1ab5c     3C 08 BF FD | 	call	#_pop
1ab60     FF 22 02 F6 | 	mov	local03, result3
1ab64     A7 FA 61 FC | 	wrlong	result1, fp
1ab68     04 4E 05 F1 | 	add	fp, #4
1ab6c     A7 FC 61 FC | 	wrlong	result2, fp
1ab70     04 4E 05 F1 | 	add	fp, #4
1ab74     A7 22 62 FC | 	wrlong	local03, fp
1ab78                 | ' 
1ab78                 | ' t2=pop()
1ab78                 | ' t1=pop()
1ab78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1ab78     08 4E 85 F1 | 	sub	fp, #8
1ab7c     1D 22 0E F2 | 	cmp	local03, #29 wz
1ab80     14 4E 05 A1 |  if_e	add	fp, #20
1ab84     A7 24 02 AB |  if_e	rdlong	local04, fp
1ab88     14 4E 85 A1 |  if_e	sub	fp, #20
1ab8c     12 23 02 A6 |  if_e	mov	local03, local04
1ab90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1ab94     1C 00 90 5D |  if_ne	jmp	#LR__2220
1ab98     A7 1E 02 FB | 	rdlong	local01, fp
1ab9c     0C 4E 05 F1 | 	add	fp, #12
1aba0     A7 20 02 FB | 	rdlong	local02, fp
1aba4     0C 4E 85 F1 | 	sub	fp, #12
1aba8     10 1F 02 F1 | 	add	local01, local02
1abac     A7 1E 62 FC | 	wrlong	local01, fp
1abb0     48 04 90 FD | 	jmp	#LR__2235
1abb4                 | LR__2220
1abb4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1abb4     08 4E 05 F1 | 	add	fp, #8
1abb8     A7 1E 02 FB | 	rdlong	local01, fp
1abbc     08 4E 85 F1 | 	sub	fp, #8
1abc0     1D 1E 0E F2 | 	cmp	local01, #29 wz
1abc4     14 4E 05 A1 |  if_e	add	fp, #20
1abc8     A7 24 02 AB |  if_e	rdlong	local04, fp
1abcc     14 4E 85 A1 |  if_e	sub	fp, #20
1abd0     12 23 02 A6 |  if_e	mov	local03, local04
1abd4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1abd8     28 00 90 5D |  if_ne	jmp	#LR__2221
1abdc     A7 1E 02 FB | 	rdlong	local01, fp
1abe0     0C 4E 05 F1 | 	add	fp, #12
1abe4     A7 20 02 FB | 	rdlong	local02, fp
1abe8     0C 4E 85 F1 | 	sub	fp, #12
1abec     10 1F 02 F1 | 	add	local01, local02
1abf0     A7 1E 62 FC | 	wrlong	local01, fp
1abf4     08 4E 05 F1 | 	add	fp, #8
1abf8     A7 38 68 FC | 	wrlong	#28, fp
1abfc     08 4E 85 F1 | 	sub	fp, #8
1ac00     F8 03 90 FD | 	jmp	#LR__2235
1ac04                 | LR__2221
1ac04                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1ac04     08 4E 05 F1 | 	add	fp, #8
1ac08     A7 1E 02 FB | 	rdlong	local01, fp
1ac0c     08 4E 85 F1 | 	sub	fp, #8
1ac10     1D 1E 0E F2 | 	cmp	local01, #29 wz
1ac14     14 4E 05 A1 |  if_e	add	fp, #20
1ac18     A7 24 02 AB |  if_e	rdlong	local04, fp
1ac1c     14 4E 85 A1 |  if_e	sub	fp, #20
1ac20     12 23 02 A6 |  if_e	mov	local03, local04
1ac24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1ac28     30 00 90 5D |  if_ne	jmp	#LR__2222
1ac2c     A7 12 02 FB | 	rdlong	arg01, fp
1ac30     AC 83 B0 FD | 	call	#__system___float_fromuns
1ac34     FD 12 02 F6 | 	mov	arg01, result1
1ac38     0C 4E 05 F1 | 	add	fp, #12
1ac3c     A7 14 02 FB | 	rdlong	arg02, fp
1ac40     0C 4E 85 F1 | 	sub	fp, #12
1ac44     CC 83 B0 FD | 	call	#__system___float_add
1ac48     A7 FA 61 FC | 	wrlong	result1, fp
1ac4c     08 4E 05 F1 | 	add	fp, #8
1ac50     A7 3C 68 FC | 	wrlong	#30, fp
1ac54     08 4E 85 F1 | 	sub	fp, #8
1ac58     A0 03 90 FD | 	jmp	#LR__2235
1ac5c                 | LR__2222
1ac5c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1ac5c     08 4E 05 F1 | 	add	fp, #8
1ac60     A7 1E 02 FB | 	rdlong	local01, fp
1ac64     08 4E 85 F1 | 	sub	fp, #8
1ac68     1C 1E 0E F2 | 	cmp	local01, #28 wz
1ac6c     14 4E 05 A1 |  if_e	add	fp, #20
1ac70     A7 24 02 AB |  if_e	rdlong	local04, fp
1ac74     14 4E 85 A1 |  if_e	sub	fp, #20
1ac78     12 23 02 A6 |  if_e	mov	local03, local04
1ac7c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1ac80     1C 00 90 5D |  if_ne	jmp	#LR__2223
1ac84     A7 1E 02 FB | 	rdlong	local01, fp
1ac88     0C 4E 05 F1 | 	add	fp, #12
1ac8c     A7 20 02 FB | 	rdlong	local02, fp
1ac90     0C 4E 85 F1 | 	sub	fp, #12
1ac94     10 1F 02 F1 | 	add	local01, local02
1ac98     A7 1E 62 FC | 	wrlong	local01, fp
1ac9c     5C 03 90 FD | 	jmp	#LR__2235
1aca0                 | LR__2223
1aca0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1aca0     08 4E 05 F1 | 	add	fp, #8
1aca4     A7 1E 02 FB | 	rdlong	local01, fp
1aca8     08 4E 85 F1 | 	sub	fp, #8
1acac     1C 1E 0E F2 | 	cmp	local01, #28 wz
1acb0     14 4E 05 A1 |  if_e	add	fp, #20
1acb4     A7 24 02 AB |  if_e	rdlong	local04, fp
1acb8     14 4E 85 A1 |  if_e	sub	fp, #20
1acbc     12 23 02 A6 |  if_e	mov	local03, local04
1acc0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1acc4     1C 00 90 5D |  if_ne	jmp	#LR__2224
1acc8     A7 1E 02 FB | 	rdlong	local01, fp
1accc     0C 4E 05 F1 | 	add	fp, #12
1acd0     A7 20 02 FB | 	rdlong	local02, fp
1acd4     0C 4E 85 F1 | 	sub	fp, #12
1acd8     10 1F 02 F1 | 	add	local01, local02
1acdc     A7 1E 62 FC | 	wrlong	local01, fp
1ace0     18 03 90 FD | 	jmp	#LR__2235
1ace4                 | LR__2224
1ace4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1ace4     08 4E 05 F1 | 	add	fp, #8
1ace8     A7 1E 02 FB | 	rdlong	local01, fp
1acec     08 4E 85 F1 | 	sub	fp, #8
1acf0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1acf4     14 4E 05 A1 |  if_e	add	fp, #20
1acf8     A7 24 02 AB |  if_e	rdlong	local04, fp
1acfc     14 4E 85 A1 |  if_e	sub	fp, #20
1ad00     12 23 02 A6 |  if_e	mov	local03, local04
1ad04     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1ad08     40 00 90 5D |  if_ne	jmp	#LR__2225
1ad0c     A7 12 02 FB | 	rdlong	arg01, fp
1ad10     09 13 52 F6 | 	abs	arg01, arg01 wc
1ad14     1F 26 C6 C9 |  if_b	decod	local05, #31
1ad18     00 26 06 36 |  if_ae	mov	local05, #0
1ad1c     C0 82 B0 FD | 	call	#__system___float_fromuns
1ad20     13 FB 61 F5 | 	xor	result1, local05
1ad24     FD 12 02 F6 | 	mov	arg01, result1
1ad28     0C 4E 05 F1 | 	add	fp, #12
1ad2c     A7 14 02 FB | 	rdlong	arg02, fp
1ad30     0C 4E 85 F1 | 	sub	fp, #12
1ad34     DC 82 B0 FD | 	call	#__system___float_add
1ad38     A7 FA 61 FC | 	wrlong	result1, fp
1ad3c     08 4E 05 F1 | 	add	fp, #8
1ad40     A7 3C 68 FC | 	wrlong	#30, fp
1ad44     08 4E 85 F1 | 	sub	fp, #8
1ad48     B0 02 90 FD | 	jmp	#LR__2235
1ad4c                 | LR__2225
1ad4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1ad4c     08 4E 05 F1 | 	add	fp, #8
1ad50     A7 1E 02 FB | 	rdlong	local01, fp
1ad54     08 4E 85 F1 | 	sub	fp, #8
1ad58     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ad5c     14 4E 05 A1 |  if_e	add	fp, #20
1ad60     A7 24 02 AB |  if_e	rdlong	local04, fp
1ad64     14 4E 85 A1 |  if_e	sub	fp, #20
1ad68     12 23 02 A6 |  if_e	mov	local03, local04
1ad6c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1ad70     28 00 90 5D |  if_ne	jmp	#LR__2226
1ad74     A7 1E 02 FB | 	rdlong	local01, fp
1ad78     0C 4E 05 F1 | 	add	fp, #12
1ad7c     A7 12 02 FB | 	rdlong	arg01, fp
1ad80     0C 4E 85 F1 | 	sub	fp, #12
1ad84     58 82 B0 FD | 	call	#__system___float_fromuns
1ad88     FD 14 02 F6 | 	mov	arg02, result1
1ad8c     0F 13 02 F6 | 	mov	arg01, local01
1ad90     80 82 B0 FD | 	call	#__system___float_add
1ad94     A7 FA 61 FC | 	wrlong	result1, fp
1ad98     60 02 90 FD | 	jmp	#LR__2235
1ad9c                 | LR__2226
1ad9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1ad9c     08 4E 05 F1 | 	add	fp, #8
1ada0     A7 1E 02 FB | 	rdlong	local01, fp
1ada4     08 4E 85 F1 | 	sub	fp, #8
1ada8     1E 1E 0E F2 | 	cmp	local01, #30 wz
1adac     14 4E 05 A1 |  if_e	add	fp, #20
1adb0     A7 24 02 AB |  if_e	rdlong	local04, fp
1adb4     14 4E 85 A1 |  if_e	sub	fp, #20
1adb8     12 23 02 A6 |  if_e	mov	local03, local04
1adbc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1adc0     38 00 90 5D |  if_ne	jmp	#LR__2227
1adc4     A7 1E 02 FB | 	rdlong	local01, fp
1adc8     0C 4E 05 F1 | 	add	fp, #12
1adcc     A7 12 02 FB | 	rdlong	arg01, fp
1add0     0C 4E 85 F1 | 	sub	fp, #12
1add4     09 13 52 F6 | 	abs	arg01, arg01 wc
1add8     1F 26 C6 C9 |  if_b	decod	local05, #31
1addc     00 26 06 36 |  if_ae	mov	local05, #0
1ade0     FC 81 B0 FD | 	call	#__system___float_fromuns
1ade4     13 FB 61 F5 | 	xor	result1, local05
1ade8     FD 14 02 F6 | 	mov	arg02, result1
1adec     0F 13 02 F6 | 	mov	arg01, local01
1adf0     20 82 B0 FD | 	call	#__system___float_add
1adf4     A7 FA 61 FC | 	wrlong	result1, fp
1adf8     00 02 90 FD | 	jmp	#LR__2235
1adfc                 | LR__2227
1adfc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1adfc     08 4E 05 F1 | 	add	fp, #8
1ae00     A7 1E 02 FB | 	rdlong	local01, fp
1ae04     08 4E 85 F1 | 	sub	fp, #8
1ae08     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ae0c     14 4E 05 A1 |  if_e	add	fp, #20
1ae10     A7 24 02 AB |  if_e	rdlong	local04, fp
1ae14     14 4E 85 A1 |  if_e	sub	fp, #20
1ae18     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
1ae1c     1C 00 90 5D |  if_ne	jmp	#LR__2228
1ae20     A7 12 02 FB | 	rdlong	arg01, fp
1ae24     0C 4E 05 F1 | 	add	fp, #12
1ae28     A7 14 02 FB | 	rdlong	arg02, fp
1ae2c     0C 4E 85 F1 | 	sub	fp, #12
1ae30     E0 81 B0 FD | 	call	#__system___float_add
1ae34     A7 FA 61 FC | 	wrlong	result1, fp
1ae38     C0 01 90 FD | 	jmp	#LR__2235
1ae3c                 | LR__2228
1ae3c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1ae3c     08 4E 05 F1 | 	add	fp, #8
1ae40     A7 1E 02 FB | 	rdlong	local01, fp
1ae44     08 4E 85 F1 | 	sub	fp, #8
1ae48     1F 1E 0E F2 | 	cmp	local01, #31 wz
1ae4c     24 00 90 5D |  if_ne	jmp	#LR__2229
1ae50     14 4E 05 F1 | 	add	fp, #20
1ae54     A7 22 02 FB | 	rdlong	local03, fp
1ae58     14 4E 85 F1 | 	sub	fp, #20
1ae5c     1F 22 0E F2 | 	cmp	local03, #31 wz
1ae60     A7 04 68 5C |  if_ne	wrlong	#2, fp
1ae64     08 4E 05 51 |  if_ne	add	fp, #8
1ae68     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ae6c     08 4E 85 51 |  if_ne	sub	fp, #8
1ae70     88 01 90 5D |  if_ne	jmp	#LR__2235
1ae74                 | LR__2229
1ae74                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1ae74     14 4E 05 F1 | 	add	fp, #20
1ae78     A7 1E 02 FB | 	rdlong	local01, fp
1ae7c     14 4E 85 F1 | 	sub	fp, #20
1ae80     1F 1E 0E F2 | 	cmp	local01, #31 wz
1ae84     24 00 90 5D |  if_ne	jmp	#LR__2230
1ae88     08 4E 05 F1 | 	add	fp, #8
1ae8c     A7 22 02 FB | 	rdlong	local03, fp
1ae90     08 4E 85 F1 | 	sub	fp, #8
1ae94     1F 22 0E F2 | 	cmp	local03, #31 wz
1ae98     A7 04 68 5C |  if_ne	wrlong	#2, fp
1ae9c     08 4E 05 51 |  if_ne	add	fp, #8
1aea0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1aea4     08 4E 85 51 |  if_ne	sub	fp, #8
1aea8     50 01 90 5D |  if_ne	jmp	#LR__2235
1aeac                 | LR__2230
1aeac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1aeac     08 4E 05 F1 | 	add	fp, #8
1aeb0     A7 1E 02 FB | 	rdlong	local01, fp
1aeb4     08 4E 85 F1 | 	sub	fp, #8
1aeb8     1F 1E 0E F2 | 	cmp	local01, #31 wz
1aebc     14 4E 05 A1 |  if_e	add	fp, #20
1aec0     A7 22 02 AB |  if_e	rdlong	local03, fp
1aec4     14 4E 85 A1 |  if_e	sub	fp, #20
1aec8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1aecc     1C 00 90 5D |  if_ne	jmp	#LR__2231
1aed0     A7 12 02 FB | 	rdlong	arg01, fp
1aed4     0C 4E 05 F1 | 	add	fp, #12
1aed8     A7 14 02 FB | 	rdlong	arg02, fp
1aedc     0C 4E 85 F1 | 	sub	fp, #12
1aee0     A8 59 B0 FD | 	call	#__system___string_concat
1aee4     A7 FA 61 FC | 	wrlong	result1, fp
1aee8     10 01 90 FD | 	jmp	#LR__2235
1aeec                 | LR__2231
1aeec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1aeec     08 4E 05 F1 | 	add	fp, #8
1aef0     A7 1E 02 FB | 	rdlong	local01, fp
1aef4     08 4E 85 F1 | 	sub	fp, #8
1aef8     2B 1E 0E F2 | 	cmp	local01, #43 wz
1aefc     14 4E 05 A1 |  if_e	add	fp, #20
1af00     A7 22 02 AB |  if_e	rdlong	local03, fp
1af04     14 4E 85 A1 |  if_e	sub	fp, #20
1af08     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1af0c     30 00 90 5D |  if_ne	jmp	#LR__2232
1af10     A7 12 02 FB | 	rdlong	arg01, fp
1af14     FC 05 BF FD | 	call	#_convertstring
1af18     FD 12 02 F6 | 	mov	arg01, result1
1af1c     0C 4E 05 F1 | 	add	fp, #12
1af20     A7 14 02 FB | 	rdlong	arg02, fp
1af24     0C 4E 85 F1 | 	sub	fp, #12
1af28     60 59 B0 FD | 	call	#__system___string_concat
1af2c     A7 FA 61 FC | 	wrlong	result1, fp
1af30     08 4E 05 F1 | 	add	fp, #8
1af34     A7 3E 68 FC | 	wrlong	#31, fp
1af38     08 4E 85 F1 | 	sub	fp, #8
1af3c     BC 00 90 FD | 	jmp	#LR__2235
1af40                 | LR__2232
1af40                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1af40     08 4E 05 F1 | 	add	fp, #8
1af44     A7 1E 02 FB | 	rdlong	local01, fp
1af48     08 4E 85 F1 | 	sub	fp, #8
1af4c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1af50     14 4E 05 A1 |  if_e	add	fp, #20
1af54     A7 22 02 AB |  if_e	rdlong	local03, fp
1af58     14 4E 85 A1 |  if_e	sub	fp, #20
1af5c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1af60     28 00 90 5D |  if_ne	jmp	#LR__2233
1af64     A7 1E 02 FB | 	rdlong	local01, fp
1af68     0C 4E 05 F1 | 	add	fp, #12
1af6c     A7 12 02 FB | 	rdlong	arg01, fp
1af70     0C 4E 85 F1 | 	sub	fp, #12
1af74     9C 05 BF FD | 	call	#_convertstring
1af78     FD 14 02 F6 | 	mov	arg02, result1
1af7c     0F 13 02 F6 | 	mov	arg01, local01
1af80     08 59 B0 FD | 	call	#__system___string_concat
1af84     A7 FA 61 FC | 	wrlong	result1, fp
1af88     70 00 90 FD | 	jmp	#LR__2235
1af8c                 | LR__2233
1af8c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1af8c     08 4E 05 F1 | 	add	fp, #8
1af90     A7 1E 02 FB | 	rdlong	local01, fp
1af94     08 4E 85 F1 | 	sub	fp, #8
1af98     2B 1E 0E F2 | 	cmp	local01, #43 wz
1af9c     14 4E 05 A1 |  if_e	add	fp, #20
1afa0     A7 22 02 AB |  if_e	rdlong	local03, fp
1afa4     14 4E 85 A1 |  if_e	sub	fp, #20
1afa8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1afac     3C 00 90 5D |  if_ne	jmp	#LR__2234
1afb0     A7 12 02 FB | 	rdlong	arg01, fp
1afb4     5C 05 BF FD | 	call	#_convertstring
1afb8     FD 1E 02 F6 | 	mov	local01, result1
1afbc     0C 4E 05 F1 | 	add	fp, #12
1afc0     A7 12 02 FB | 	rdlong	arg01, fp
1afc4     0C 4E 85 F1 | 	sub	fp, #12
1afc8     48 05 BF FD | 	call	#_convertstring
1afcc     FD 14 02 F6 | 	mov	arg02, result1
1afd0     0F 13 02 F6 | 	mov	arg01, local01
1afd4     B4 58 B0 FD | 	call	#__system___string_concat
1afd8     A7 FA 61 FC | 	wrlong	result1, fp
1afdc     08 4E 05 F1 | 	add	fp, #8
1afe0     A7 3E 68 FC | 	wrlong	#31, fp
1afe4     08 4E 85 F1 | 	sub	fp, #8
1afe8     10 00 90 FD | 	jmp	#LR__2235
1afec                 | LR__2234
1afec     A7 08 68 FC | 	wrlong	#4, fp
1aff0     08 4E 05 F1 | 	add	fp, #8
1aff4     A7 FE 69 FC | 	wrlong	#255, fp
1aff8     08 4E 85 F1 | 	sub	fp, #8
1affc                 | LR__2235
1affc     A7 12 02 F6 | 	mov	arg01, fp
1b000     30 04 BF FD | 	call	#_push
1b004     A7 F0 03 F6 | 	mov	ptra, fp
1b008     B2 00 A0 FD | 	call	#popregs_
1b00c                 | _do_plus_ret
1b00c     2D 00 64 FD | 	ret
1b010                 | 
1b010                 | ' 
1b010                 | ' '--------------------------------- power (^)
1b010                 | ' 
1b010                 | ' sub do_power 
1b010                 | _do_power
1b010     02 4A 05 F6 | 	mov	COUNT_, #2
1b014     A8 00 A0 FD | 	call	#pushregs_
1b018     18 F0 07 F1 | 	add	ptra, #24
1b01c     7C 03 BF FD | 	call	#_pop
1b020     FD 14 02 F6 | 	mov	arg02, result1
1b024     FE 12 02 F6 | 	mov	arg01, result2
1b028     FF 1E 02 F6 | 	mov	local01, result3
1b02c     0C 4E 05 F1 | 	add	fp, #12
1b030     A7 14 62 FC | 	wrlong	arg02, fp
1b034     04 4E 05 F1 | 	add	fp, #4
1b038     A7 12 62 FC | 	wrlong	arg01, fp
1b03c     04 4E 05 F1 | 	add	fp, #4
1b040     A7 1E 62 FC | 	wrlong	local01, fp
1b044     14 4E 85 F1 | 	sub	fp, #20
1b048     50 03 BF FD | 	call	#_pop
1b04c     A7 FA 61 FC | 	wrlong	result1, fp
1b050     04 4E 05 F1 | 	add	fp, #4
1b054     A7 FC 61 FC | 	wrlong	result2, fp
1b058     04 4E 05 F1 | 	add	fp, #4
1b05c     A7 FE 61 FC | 	wrlong	result3, fp
1b060                 | ' 
1b060                 | ' t2=pop()
1b060                 | ' t1=pop()
1b060                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1b060     08 4E 85 F1 | 	sub	fp, #8
1b064     1F FE 0D F2 | 	cmp	result3, #31 wz
1b068     14 4E 05 51 |  if_ne	add	fp, #20
1b06c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1b070     14 4E 85 51 |  if_ne	sub	fp, #20
1b074     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1b078     A7 18 68 AC |  if_e	wrlong	#12, fp
1b07c     08 4E 05 A1 |  if_e	add	fp, #8
1b080     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b084     08 4E 85 A1 |  if_e	sub	fp, #8
1b088     38 01 90 AD |  if_e	jmp	#LR__2245
1b08c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1b08c     08 4E 05 F1 | 	add	fp, #8
1b090     A7 14 02 FB | 	rdlong	arg02, fp
1b094     08 4E 85 F1 | 	sub	fp, #8
1b098     1C 14 0E F2 | 	cmp	arg02, #28 wz
1b09c     28 00 90 5D |  if_ne	jmp	#LR__2240
1b0a0     08 4E 05 F1 | 	add	fp, #8
1b0a4     A7 3C 68 FC | 	wrlong	#30, fp
1b0a8     08 4E 85 F1 | 	sub	fp, #8
1b0ac     A7 12 02 FB | 	rdlong	arg01, fp
1b0b0     09 13 52 F6 | 	abs	arg01, arg01 wc
1b0b4     1F 20 C6 C9 |  if_b	decod	local02, #31
1b0b8     00 20 06 36 |  if_ae	mov	local02, #0
1b0bc     20 7F B0 FD | 	call	#__system___float_fromuns
1b0c0     10 FB 61 F5 | 	xor	result1, local02
1b0c4     A7 FA 61 FC | 	wrlong	result1, fp
1b0c8                 | LR__2240
1b0c8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1b0c8     08 4E 05 F1 | 	add	fp, #8
1b0cc     A7 14 02 FB | 	rdlong	arg02, fp
1b0d0     08 4E 85 F1 | 	sub	fp, #8
1b0d4     1D 14 0E F2 | 	cmp	arg02, #29 wz
1b0d8     18 00 90 5D |  if_ne	jmp	#LR__2241
1b0dc     08 4E 05 F1 | 	add	fp, #8
1b0e0     A7 3C 68 FC | 	wrlong	#30, fp
1b0e4     08 4E 85 F1 | 	sub	fp, #8
1b0e8     A7 12 02 FB | 	rdlong	arg01, fp
1b0ec     F0 7E B0 FD | 	call	#__system___float_fromuns
1b0f0     A7 FA 61 FC | 	wrlong	result1, fp
1b0f4                 | LR__2241
1b0f4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1b0f4     14 4E 05 F1 | 	add	fp, #20
1b0f8     A7 14 02 FB | 	rdlong	arg02, fp
1b0fc     14 4E 85 F1 | 	sub	fp, #20
1b100     1C 14 0E F2 | 	cmp	arg02, #28 wz
1b104     34 00 90 5D |  if_ne	jmp	#LR__2242
1b108     14 4E 05 F1 | 	add	fp, #20
1b10c     A7 3C 68 FC | 	wrlong	#30, fp
1b110     08 4E 85 F1 | 	sub	fp, #8
1b114     A7 12 02 FB | 	rdlong	arg01, fp
1b118     0C 4E 85 F1 | 	sub	fp, #12
1b11c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b120     1F 20 C6 C9 |  if_b	decod	local02, #31
1b124     00 20 06 36 |  if_ae	mov	local02, #0
1b128     B4 7E B0 FD | 	call	#__system___float_fromuns
1b12c     10 FB 61 F5 | 	xor	result1, local02
1b130     0C 4E 05 F1 | 	add	fp, #12
1b134     A7 FA 61 FC | 	wrlong	result1, fp
1b138     0C 4E 85 F1 | 	sub	fp, #12
1b13c                 | LR__2242
1b13c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1b13c     14 4E 05 F1 | 	add	fp, #20
1b140     A7 14 02 FB | 	rdlong	arg02, fp
1b144     14 4E 85 F1 | 	sub	fp, #20
1b148     1D 14 0E F2 | 	cmp	arg02, #29 wz
1b14c     24 00 90 5D |  if_ne	jmp	#LR__2243
1b150     14 4E 05 F1 | 	add	fp, #20
1b154     A7 3C 68 FC | 	wrlong	#30, fp
1b158     08 4E 85 F1 | 	sub	fp, #8
1b15c     A7 12 02 FB | 	rdlong	arg01, fp
1b160     0C 4E 85 F1 | 	sub	fp, #12
1b164     78 7E B0 FD | 	call	#__system___float_fromuns
1b168     0C 4E 05 F1 | 	add	fp, #12
1b16c     A7 FA 61 FC | 	wrlong	result1, fp
1b170     0C 4E 85 F1 | 	sub	fp, #12
1b174                 | LR__2243
1b174                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1b174     08 4E 05 F1 | 	add	fp, #8
1b178     A7 14 02 FB | 	rdlong	arg02, fp
1b17c     08 4E 85 F1 | 	sub	fp, #8
1b180     1E 14 0E F2 | 	cmp	arg02, #30 wz
1b184     14 4E 05 A1 |  if_e	add	fp, #20
1b188     A7 1E 02 AB |  if_e	rdlong	local01, fp
1b18c     14 4E 85 A1 |  if_e	sub	fp, #20
1b190     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1b194     1C 00 90 5D |  if_ne	jmp	#LR__2244
1b198     A7 12 02 FB | 	rdlong	arg01, fp
1b19c     0C 4E 05 F1 | 	add	fp, #12
1b1a0     A7 14 02 FB | 	rdlong	arg02, fp
1b1a4     0C 4E 85 F1 | 	sub	fp, #12
1b1a8     40 91 B0 FD | 	call	#__system____builtin_powf
1b1ac     A7 FA 61 FC | 	wrlong	result1, fp
1b1b0     10 00 90 FD | 	jmp	#LR__2245
1b1b4                 | LR__2244
1b1b4     A7 1A 68 FC | 	wrlong	#13, fp
1b1b8     08 4E 05 F1 | 	add	fp, #8
1b1bc     A7 FE 69 FC | 	wrlong	#255, fp
1b1c0     08 4E 85 F1 | 	sub	fp, #8
1b1c4                 | LR__2245
1b1c4     A7 12 02 F6 | 	mov	arg01, fp
1b1c8     68 02 BF FD | 	call	#_push
1b1cc     A7 F0 03 F6 | 	mov	ptra, fp
1b1d0     B2 00 A0 FD | 	call	#popregs_
1b1d4                 | _do_power_ret
1b1d4     2D 00 64 FD | 	ret
1b1d8                 | 
1b1d8                 | ' 
1b1d8                 | ' '--------------------------------- SHL
1b1d8                 | ' 
1b1d8                 | ' sub do_shl 
1b1d8                 | _do_shl
1b1d8     03 4A 05 F6 | 	mov	COUNT_, #3
1b1dc     A8 00 A0 FD | 	call	#pushregs_
1b1e0     18 F0 07 F1 | 	add	ptra, #24
1b1e4     B4 01 BF FD | 	call	#_pop
1b1e8     FD 12 02 F6 | 	mov	arg01, result1
1b1ec     FE 1E 02 F6 | 	mov	local01, result2
1b1f0     FF 20 02 F6 | 	mov	local02, result3
1b1f4     0C 4E 05 F1 | 	add	fp, #12
1b1f8     A7 12 62 FC | 	wrlong	arg01, fp
1b1fc     04 4E 05 F1 | 	add	fp, #4
1b200     A7 1E 62 FC | 	wrlong	local01, fp
1b204     04 4E 05 F1 | 	add	fp, #4
1b208     A7 20 62 FC | 	wrlong	local02, fp
1b20c     14 4E 85 F1 | 	sub	fp, #20
1b210     88 01 BF FD | 	call	#_pop
1b214     FF 22 02 F6 | 	mov	local03, result3
1b218     A7 FA 61 FC | 	wrlong	result1, fp
1b21c     04 4E 05 F1 | 	add	fp, #4
1b220     A7 FC 61 FC | 	wrlong	result2, fp
1b224     04 4E 05 F1 | 	add	fp, #4
1b228     A7 22 62 FC | 	wrlong	local03, fp
1b22c                 | ' 
1b22c                 | ' t2=pop()
1b22c                 | ' t1=pop()
1b22c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1b22c     08 4E 85 F1 | 	sub	fp, #8
1b230     1C 22 0E F2 | 	cmp	local03, #28 wz
1b234     A7 22 02 AB |  if_e	rdlong	local03, fp
1b238     A7 22 62 AC |  if_e	wrlong	local03, fp
1b23c     08 4E 05 A1 |  if_e	add	fp, #8
1b240     A7 3A 68 AC |  if_e	wrlong	#29, fp
1b244     08 4E 85 A1 |  if_e	sub	fp, #8
1b248                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1b248     14 4E 05 F1 | 	add	fp, #20
1b24c     A7 22 02 FB | 	rdlong	local03, fp
1b250     14 4E 85 F1 | 	sub	fp, #20
1b254     1C 22 0E F2 | 	cmp	local03, #28 wz
1b258     18 00 90 5D |  if_ne	jmp	#LR__2250
1b25c     0C 4E 05 F1 | 	add	fp, #12
1b260     A7 22 02 FB | 	rdlong	local03, fp
1b264     A7 22 62 FC | 	wrlong	local03, fp
1b268     08 4E 05 F1 | 	add	fp, #8
1b26c     A7 3A 68 FC | 	wrlong	#29, fp
1b270     14 4E 85 F1 | 	sub	fp, #20
1b274                 | LR__2250
1b274                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1b274     08 4E 05 F1 | 	add	fp, #8
1b278     A7 22 02 FB | 	rdlong	local03, fp
1b27c     08 4E 85 F1 | 	sub	fp, #8
1b280     1F 22 0E F2 | 	cmp	local03, #31 wz
1b284     14 4E 05 51 |  if_ne	add	fp, #20
1b288     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b28c     14 4E 85 51 |  if_ne	sub	fp, #20
1b290     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1b294     08 4E 05 51 |  if_ne	add	fp, #8
1b298     A7 22 02 5B |  if_ne	rdlong	local03, fp
1b29c     08 4E 85 51 |  if_ne	sub	fp, #8
1b2a0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1b2a4     14 4E 05 51 |  if_ne	add	fp, #20
1b2a8     14 4E 85 51 |  if_ne	sub	fp, #20
1b2ac     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1b2b0     A7 0C 68 AC |  if_e	wrlong	#6, fp
1b2b4     08 4E 05 A1 |  if_e	add	fp, #8
1b2b8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b2bc     08 4E 85 A1 |  if_e	sub	fp, #8
1b2c0     18 00 90 AD |  if_e	jmp	#LR__2251
1b2c4     A7 22 02 FB | 	rdlong	local03, fp
1b2c8     0C 4E 05 F1 | 	add	fp, #12
1b2cc     A7 1E 02 FB | 	rdlong	local01, fp
1b2d0     0C 4E 85 F1 | 	sub	fp, #12
1b2d4     0F 23 62 F0 | 	shl	local03, local01
1b2d8     A7 22 62 FC | 	wrlong	local03, fp
1b2dc                 | LR__2251
1b2dc     A7 12 02 F6 | 	mov	arg01, fp
1b2e0     50 01 BF FD | 	call	#_push
1b2e4     A7 F0 03 F6 | 	mov	ptra, fp
1b2e8     B2 00 A0 FD | 	call	#popregs_
1b2ec                 | _do_shl_ret
1b2ec     2D 00 64 FD | 	ret
1b2f0                 | 
1b2f0                 | ' 
1b2f0                 | ' '--------------------------------- SHR
1b2f0                 | ' 
1b2f0                 | ' sub do_shr 
1b2f0                 | _do_shr
1b2f0     03 4A 05 F6 | 	mov	COUNT_, #3
1b2f4     A8 00 A0 FD | 	call	#pushregs_
1b2f8     18 F0 07 F1 | 	add	ptra, #24
1b2fc     9C 00 BF FD | 	call	#_pop
1b300     FD 12 02 F6 | 	mov	arg01, result1
1b304     FE 1E 02 F6 | 	mov	local01, result2
1b308     FF 20 02 F6 | 	mov	local02, result3
1b30c     0C 4E 05 F1 | 	add	fp, #12
1b310     A7 12 62 FC | 	wrlong	arg01, fp
1b314     04 4E 05 F1 | 	add	fp, #4
1b318     A7 1E 62 FC | 	wrlong	local01, fp
1b31c     04 4E 05 F1 | 	add	fp, #4
1b320     A7 20 62 FC | 	wrlong	local02, fp
1b324     14 4E 85 F1 | 	sub	fp, #20
1b328     70 00 BF FD | 	call	#_pop
1b32c     FF 22 02 F6 | 	mov	local03, result3
1b330     A7 FA 61 FC | 	wrlong	result1, fp
1b334     04 4E 05 F1 | 	add	fp, #4
1b338     A7 FC 61 FC | 	wrlong	result2, fp
1b33c     04 4E 05 F1 | 	add	fp, #4
1b340     A7 22 62 FC | 	wrlong	local03, fp
1b344                 | ' 
1b344                 | ' t2=pop()
1b344                 | ' t1=pop()
1b344                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1b344     08 4E 85 F1 | 	sub	fp, #8
1b348     1C 22 0E F2 | 	cmp	local03, #28 wz
1b34c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b350     A7 22 62 AC |  if_e	wrlong	local03, fp
1b354     08 4E 05 A1 |  if_e	add	fp, #8
1b358     A7 3A 68 AC |  if_e	wrlong	#29, fp
1b35c     08 4E 85 A1 |  if_e	sub	fp, #8
1b360                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1b360     14 4E 05 F1 | 	add	fp, #20
1b364     A7 22 02 FB | 	rdlong	local03, fp
1b368     14 4E 85 F1 | 	sub	fp, #20
1b36c     1C 22 0E F2 | 	cmp	local03, #28 wz
1b370     18 00 90 5D |  if_ne	jmp	#LR__2260
1b374     0C 4E 05 F1 | 	add	fp, #12
1b378     A7 22 02 FB | 	rdlong	local03, fp
1b37c     A7 22 62 FC | 	wrlong	local03, fp
1b380     08 4E 05 F1 | 	add	fp, #8
1b384     A7 3A 68 FC | 	wrlong	#29, fp
1b388     14 4E 85 F1 | 	sub	fp, #20
1b38c                 | LR__2260
1b38c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1b38c     08 4E 05 F1 | 	add	fp, #8
1b390     A7 22 02 FB | 	rdlong	local03, fp
1b394     08 4E 85 F1 | 	sub	fp, #8
1b398     1F 22 0E F2 | 	cmp	local03, #31 wz
1b39c     14 4E 05 51 |  if_ne	add	fp, #20
1b3a0     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b3a4     14 4E 85 51 |  if_ne	sub	fp, #20
1b3a8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1b3ac     08 4E 05 51 |  if_ne	add	fp, #8
1b3b0     A7 22 02 5B |  if_ne	rdlong	local03, fp
1b3b4     08 4E 85 51 |  if_ne	sub	fp, #8
1b3b8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1b3bc     14 4E 05 51 |  if_ne	add	fp, #20
1b3c0     14 4E 85 51 |  if_ne	sub	fp, #20
1b3c4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1b3c8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1b3cc     08 4E 05 A1 |  if_e	add	fp, #8
1b3d0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b3d4     08 4E 85 A1 |  if_e	sub	fp, #8
1b3d8     18 00 90 AD |  if_e	jmp	#LR__2261
1b3dc     A7 22 02 FB | 	rdlong	local03, fp
1b3e0     0C 4E 05 F1 | 	add	fp, #12
1b3e4     A7 1E 02 FB | 	rdlong	local01, fp
1b3e8     0C 4E 85 F1 | 	sub	fp, #12
1b3ec     0F 23 42 F0 | 	shr	local03, local01
1b3f0     A7 22 62 FC | 	wrlong	local03, fp
1b3f4                 | LR__2261
1b3f4     A7 12 02 F6 | 	mov	arg01, fp
1b3f8     38 00 BF FD | 	call	#_push
1b3fc     A7 F0 03 F6 | 	mov	ptra, fp
1b400     B2 00 A0 FD | 	call	#popregs_
1b404                 | _do_shr_ret
1b404     2D 00 64 FD | 	ret
1b408                 | 
1b408                 | ' 
1b408                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b408                 | ' 
1b408                 | ' ''----------------------------------------------------------------------------------------------------
1b408                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1b408                 | ' ''----------------------------------------------------------------------------------------------------
1b408                 | ' 
1b408                 | ' ''--------------------------- Command function pointers
1b408                 | ' 
1b408                 | ' sub init_commands
1b408                 | _init_commands
1b408                 | ' 
1b408                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b408     00 00 06 F6 | 	mov	_var01, #0
1b40c     97 16 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
1b410                 | LR__2270
1b410     00 FB 01 F6 | 	mov	result1, _var01
1b414     02 FA 65 F0 | 	shl	result1, #2
1b418     43 00 00 FF 
1b41c     60 E4 05 F1 | 	add	objptr, ##34400
1b420     F2 FA 01 F1 | 	add	result1, objptr
1b424     43 00 00 FF 
1b428     60 E4 85 F1 | 	sub	objptr, ##34400
1b42c     FD E4 61 FC | 	wrlong	objptr, result1
1b430     01 00 06 F1 | 	add	_var01, #1
1b434     00 01 56 F2 | 	cmps	_var01, #256 wc
1b438     D4 FF 9F CD |  if_b	jmp	#LR__2270
1b43c                 | LR__2271
1b43c     F2 FA 01 F6 | 	mov	result1, objptr
1b440     14 FA 25 F4 | 	bith	result1, #20
1b444     43 00 00 FF 
1b448     64 E4 05 F1 | 	add	objptr, ##34404
1b44c     F2 FA 61 FC | 	wrlong	result1, objptr
1b450     43 00 00 FF 
1b454     64 E4 85 F1 | 	sub	objptr, ##34404
1b458     F2 FA 01 F6 | 	mov	result1, objptr
1b45c     15 FA 25 F4 | 	bith	result1, #21
1b460     43 00 00 FF 
1b464     68 E4 05 F1 | 	add	objptr, ##34408
1b468     F2 FA 61 FC | 	wrlong	result1, objptr
1b46c     43 00 00 FF 
1b470     68 E4 85 F1 | 	sub	objptr, ##34408
1b474     F2 FA 01 F6 | 	mov	result1, objptr
1b478     34 FA 25 F4 | 	bith	result1, #52
1b47c     43 00 00 FF 
1b480     6C E4 05 F1 | 	add	objptr, ##34412
1b484     F2 FA 61 FC | 	wrlong	result1, objptr
1b488     43 00 00 FF 
1b48c     6C E4 85 F1 | 	sub	objptr, ##34412
1b490     F2 FA 01 F6 | 	mov	result1, objptr
1b494     16 FA 25 F4 | 	bith	result1, #22
1b498     43 00 00 FF 
1b49c     74 E4 05 F1 | 	add	objptr, ##34420
1b4a0     F2 FA 61 FC | 	wrlong	result1, objptr
1b4a4     43 00 00 FF 
1b4a8     74 E4 85 F1 | 	sub	objptr, ##34420
1b4ac     F2 FA 01 F6 | 	mov	result1, objptr
1b4b0     00 28 00 FF 
1b4b4     00 FA 45 F5 | 	or	result1, ##5242880
1b4b8     43 00 00 FF 
1b4bc     78 E4 05 F1 | 	add	objptr, ##34424
1b4c0     F2 FA 61 FC | 	wrlong	result1, objptr
1b4c4     43 00 00 FF 
1b4c8     78 E4 85 F1 | 	sub	objptr, ##34424
1b4cc     F2 FA 01 F6 | 	mov	result1, objptr
1b4d0     35 FA 25 F4 | 	bith	result1, #53
1b4d4     43 00 00 FF 
1b4d8     7C E4 05 F1 | 	add	objptr, ##34428
1b4dc     F2 FA 61 FC | 	wrlong	result1, objptr
1b4e0     43 00 00 FF 
1b4e4     7C E4 85 F1 | 	sub	objptr, ##34428
1b4e8     F2 FA 01 F6 | 	mov	result1, objptr
1b4ec     54 FA 25 F4 | 	bith	result1, #84
1b4f0     43 00 00 FF 
1b4f4     80 E4 05 F1 | 	add	objptr, ##34432
1b4f8     F2 FA 61 FC | 	wrlong	result1, objptr
1b4fc     43 00 00 FF 
1b500     80 E4 85 F1 | 	sub	objptr, ##34432
1b504     F2 FA 01 F6 | 	mov	result1, objptr
1b508     17 FA 25 F4 | 	bith	result1, #23
1b50c     43 00 00 FF 
1b510     84 E4 05 F1 | 	add	objptr, ##34436
1b514     F2 FA 61 FC | 	wrlong	result1, objptr
1b518     43 00 00 FF 
1b51c     84 E4 85 F1 | 	sub	objptr, ##34436
1b520     F2 FA 01 F6 | 	mov	result1, objptr
1b524     00 48 00 FF 
1b528     00 FA 45 F5 | 	or	result1, ##9437184
1b52c     43 00 00 FF 
1b530     88 E4 05 F1 | 	add	objptr, ##34440
1b534     F2 FA 61 FC | 	wrlong	result1, objptr
1b538     43 00 00 FF 
1b53c     88 E4 85 F1 | 	sub	objptr, ##34440
1b540     F2 FA 01 F6 | 	mov	result1, objptr
1b544     00 50 00 FF 
1b548     00 FA 45 F5 | 	or	result1, ##10485760
1b54c     43 00 00 FF 
1b550     8C E4 05 F1 | 	add	objptr, ##34444
1b554     F2 FA 61 FC | 	wrlong	result1, objptr
1b558     43 00 00 FF 
1b55c     8C E4 85 F1 | 	sub	objptr, ##34444
1b560     F2 FA 01 F6 | 	mov	result1, objptr
1b564     00 58 00 FF 
1b568     00 FA 45 F5 | 	or	result1, ##11534336
1b56c     43 00 00 FF 
1b570     90 E4 05 F1 | 	add	objptr, ##34448
1b574     F2 FA 61 FC | 	wrlong	result1, objptr
1b578     43 00 00 FF 
1b57c     90 E4 85 F1 | 	sub	objptr, ##34448
1b580     F2 FA 01 F6 | 	mov	result1, objptr
1b584     36 FA 25 F4 | 	bith	result1, #54
1b588     43 00 00 FF 
1b58c     A4 E4 05 F1 | 	add	objptr, ##34468
1b590     F2 FA 61 FC | 	wrlong	result1, objptr
1b594     43 00 00 FF 
1b598     A4 E4 85 F1 | 	sub	objptr, ##34468
1b59c     F2 FA 01 F6 | 	mov	result1, objptr
1b5a0     00 68 00 FF 
1b5a4     00 FA 45 F5 | 	or	result1, ##13631488
1b5a8     43 00 00 FF 
1b5ac     D4 E4 05 F1 | 	add	objptr, ##34516
1b5b0     F2 FA 61 FC | 	wrlong	result1, objptr
1b5b4     43 00 00 FF 
1b5b8     D4 E4 85 F1 | 	sub	objptr, ##34516
1b5bc     F2 FA 01 F6 | 	mov	result1, objptr
1b5c0     00 68 00 FF 
1b5c4     00 FA 45 F5 | 	or	result1, ##13631488
1b5c8     43 00 00 FF 
1b5cc     D0 E4 05 F1 | 	add	objptr, ##34512
1b5d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b5d4     43 00 00 FF 
1b5d8     D0 E4 85 F1 | 	sub	objptr, ##34512
1b5dc     F2 FA 01 F6 | 	mov	result1, objptr
1b5e0     00 68 00 FF 
1b5e4     00 FA 45 F5 | 	or	result1, ##13631488
1b5e8     43 00 00 FF 
1b5ec     D8 E4 05 F1 | 	add	objptr, ##34520
1b5f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b5f4     43 00 00 FF 
1b5f8     D8 E4 85 F1 | 	sub	objptr, ##34520
1b5fc     F2 FA 01 F6 | 	mov	result1, objptr
1b600     00 68 00 FF 
1b604     00 FA 45 F5 | 	or	result1, ##13631488
1b608     43 00 00 FF 
1b60c     DC E4 05 F1 | 	add	objptr, ##34524
1b610     F2 FA 61 FC | 	wrlong	result1, objptr
1b614     43 00 00 FF 
1b618     DC E4 85 F1 | 	sub	objptr, ##34524
1b61c     F2 FA 01 F6 | 	mov	result1, objptr
1b620     00 68 00 FF 
1b624     00 FA 45 F5 | 	or	result1, ##13631488
1b628     43 00 00 FF 
1b62c     0C E5 05 F1 | 	add	objptr, ##34572
1b630     F2 FA 61 FC | 	wrlong	result1, objptr
1b634     43 00 00 FF 
1b638     0C E5 85 F1 | 	sub	objptr, ##34572
1b63c     F2 FA 01 F6 | 	mov	result1, objptr
1b640     55 FA 25 F4 | 	bith	result1, #85
1b644     43 00 00 FF 
1b648     BC E4 05 F1 | 	add	objptr, ##34492
1b64c     F2 FA 61 FC | 	wrlong	result1, objptr
1b650     43 00 00 FF 
1b654     BC E4 85 F1 | 	sub	objptr, ##34492
1b658     F2 FA 01 F6 | 	mov	result1, objptr
1b65c     00 68 00 FF 
1b660     00 FA 45 F5 | 	or	result1, ##13631488
1b664     43 00 00 FF 
1b668     10 E5 05 F1 | 	add	objptr, ##34576
1b66c     F2 FA 61 FC | 	wrlong	result1, objptr
1b670     43 00 00 FF 
1b674     10 E5 85 F1 | 	sub	objptr, ##34576
1b678     F2 FA 01 F6 | 	mov	result1, objptr
1b67c     00 68 00 FF 
1b680     00 FA 45 F5 | 	or	result1, ##13631488
1b684     43 00 00 FF 
1b688     E0 E4 05 F1 | 	add	objptr, ##34528
1b68c     F2 FA 61 FC | 	wrlong	result1, objptr
1b690     43 00 00 FF 
1b694     E0 E4 85 F1 | 	sub	objptr, ##34528
1b698     F2 FA 01 F6 | 	mov	result1, objptr
1b69c     00 68 00 FF 
1b6a0     00 FA 45 F5 | 	or	result1, ##13631488
1b6a4     43 00 00 FF 
1b6a8     E4 E4 05 F1 | 	add	objptr, ##34532
1b6ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b6b0     43 00 00 FF 
1b6b4     E4 E4 85 F1 | 	sub	objptr, ##34532
1b6b8     F2 FA 01 F6 | 	mov	result1, objptr
1b6bc     00 68 00 FF 
1b6c0     00 FA 45 F5 | 	or	result1, ##13631488
1b6c4     43 00 00 FF 
1b6c8     E8 E4 05 F1 | 	add	objptr, ##34536
1b6cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b6d0     43 00 00 FF 
1b6d4     E8 E4 85 F1 | 	sub	objptr, ##34536
1b6d8     F2 FA 01 F6 | 	mov	result1, objptr
1b6dc     74 FA 25 F4 | 	bith	result1, #116
1b6e0     43 00 00 FF 
1b6e4     60 E5 05 F1 | 	add	objptr, ##34656
1b6e8     F2 FA 61 FC | 	wrlong	result1, objptr
1b6ec     43 00 00 FF 
1b6f0     60 E5 85 F1 | 	sub	objptr, ##34656
1b6f4     F2 FA 01 F6 | 	mov	result1, objptr
1b6f8     18 FA 25 F4 | 	bith	result1, #24
1b6fc     43 00 00 FF 
1b700     64 E5 05 F1 | 	add	objptr, ##34660
1b704     F2 FA 61 FC | 	wrlong	result1, objptr
1b708     43 00 00 FF 
1b70c     64 E5 85 F1 | 	sub	objptr, ##34660
1b710     F2 FA 01 F6 | 	mov	result1, objptr
1b714     00 88 00 FF 
1b718     00 FA 45 F5 | 	or	result1, ##17825792
1b71c     43 00 00 FF 
1b720     68 E5 05 F1 | 	add	objptr, ##34664
1b724     F2 FA 61 FC | 	wrlong	result1, objptr
1b728     43 00 00 FF 
1b72c     68 E5 85 F1 | 	sub	objptr, ##34664
1b730     F2 FA 01 F6 | 	mov	result1, objptr
1b734     00 90 00 FF 
1b738     00 FA 45 F5 | 	or	result1, ##18874368
1b73c     43 00 00 FF 
1b740     6C E5 05 F1 | 	add	objptr, ##34668
1b744     F2 FA 61 FC | 	wrlong	result1, objptr
1b748     43 00 00 FF 
1b74c     6C E5 85 F1 | 	sub	objptr, ##34668
1b750     F2 FA 01 F6 | 	mov	result1, objptr
1b754     00 98 00 FF 
1b758     00 FA 45 F5 | 	or	result1, ##19922944
1b75c     43 00 00 FF 
1b760     70 E5 05 F1 | 	add	objptr, ##34672
1b764     F2 FA 61 FC | 	wrlong	result1, objptr
1b768     43 00 00 FF 
1b76c     70 E5 85 F1 | 	sub	objptr, ##34672
1b770     F2 FA 01 F6 | 	mov	result1, objptr
1b774     00 A0 00 FF 
1b778     00 FA 45 F5 | 	or	result1, ##20971520
1b77c     43 00 00 FF 
1b780     74 E5 05 F1 | 	add	objptr, ##34676
1b784     F2 FA 61 FC | 	wrlong	result1, objptr
1b788     43 00 00 FF 
1b78c     74 E5 85 F1 | 	sub	objptr, ##34676
1b790     F2 FA 01 F6 | 	mov	result1, objptr
1b794     00 A8 00 FF 
1b798     00 FA 45 F5 | 	or	result1, ##22020096
1b79c     43 00 00 FF 
1b7a0     78 E5 05 F1 | 	add	objptr, ##34680
1b7a4     F2 FA 61 FC | 	wrlong	result1, objptr
1b7a8     43 00 00 FF 
1b7ac     78 E5 85 F1 | 	sub	objptr, ##34680
1b7b0     F2 FA 01 F6 | 	mov	result1, objptr
1b7b4     00 B0 00 FF 
1b7b8     00 FA 45 F5 | 	or	result1, ##23068672
1b7bc     43 00 00 FF 
1b7c0     7C E5 05 F1 | 	add	objptr, ##34684
1b7c4     F2 FA 61 FC | 	wrlong	result1, objptr
1b7c8     43 00 00 FF 
1b7cc     7C E5 85 F1 | 	sub	objptr, ##34684
1b7d0     F2 FA 01 F6 | 	mov	result1, objptr
1b7d4     00 B8 00 FF 
1b7d8     00 FA 45 F5 | 	or	result1, ##24117248
1b7dc     43 00 00 FF 
1b7e0     80 E5 05 F1 | 	add	objptr, ##34688
1b7e4     F2 FA 61 FC | 	wrlong	result1, objptr
1b7e8     43 00 00 FF 
1b7ec     80 E5 85 F1 | 	sub	objptr, ##34688
1b7f0     F2 FA 01 F6 | 	mov	result1, objptr
1b7f4     37 FA 25 F4 | 	bith	result1, #55
1b7f8     43 00 00 FF 
1b7fc     84 E5 05 F1 | 	add	objptr, ##34692
1b800     F2 FA 61 FC | 	wrlong	result1, objptr
1b804     43 00 00 FF 
1b808     84 E5 85 F1 | 	sub	objptr, ##34692
1b80c     F2 FA 01 F6 | 	mov	result1, objptr
1b810     00 C8 00 FF 
1b814     00 FA 45 F5 | 	or	result1, ##26214400
1b818     43 00 00 FF 
1b81c     88 E5 05 F1 | 	add	objptr, ##34696
1b820     F2 FA 61 FC | 	wrlong	result1, objptr
1b824     43 00 00 FF 
1b828     88 E5 85 F1 | 	sub	objptr, ##34696
1b82c     F2 FA 01 F6 | 	mov	result1, objptr
1b830     00 D0 00 FF 
1b834     00 FA 45 F5 | 	or	result1, ##27262976
1b838     43 00 00 FF 
1b83c     8C E5 05 F1 | 	add	objptr, ##34700
1b840     F2 FA 61 FC | 	wrlong	result1, objptr
1b844     43 00 00 FF 
1b848     8C E5 85 F1 | 	sub	objptr, ##34700
1b84c     F2 FA 01 F6 | 	mov	result1, objptr
1b850     00 D8 00 FF 
1b854     00 FA 45 F5 | 	or	result1, ##28311552
1b858     43 00 00 FF 
1b85c     90 E5 05 F1 | 	add	objptr, ##34704
1b860     F2 FA 61 FC | 	wrlong	result1, objptr
1b864     43 00 00 FF 
1b868     90 E5 85 F1 | 	sub	objptr, ##34704
1b86c     F2 FA 01 F6 | 	mov	result1, objptr
1b870     56 FA 25 F4 | 	bith	result1, #86
1b874     43 00 00 FF 
1b878     94 E5 05 F1 | 	add	objptr, ##34708
1b87c     F2 FA 61 FC | 	wrlong	result1, objptr
1b880     43 00 00 FF 
1b884     94 E5 85 F1 | 	sub	objptr, ##34708
1b888     F2 FA 01 F6 | 	mov	result1, objptr
1b88c     00 E8 00 FF 
1b890     00 FA 45 F5 | 	or	result1, ##30408704
1b894     45 00 00 FF 
1b898     5C E4 05 F1 | 	add	objptr, ##35420
1b89c     F2 FA 61 FC | 	wrlong	result1, objptr
1b8a0     45 00 00 FF 
1b8a4     5C E4 85 F1 | 	sub	objptr, ##35420
1b8a8     F2 FA 01 F6 | 	mov	result1, objptr
1b8ac     75 FA 25 F4 | 	bith	result1, #117
1b8b0     43 00 00 FF 
1b8b4     98 E5 05 F1 | 	add	objptr, ##34712
1b8b8     F2 FA 61 FC | 	wrlong	result1, objptr
1b8bc     43 00 00 FF 
1b8c0     98 E5 85 F1 | 	sub	objptr, ##34712
1b8c4     F2 FA 01 F6 | 	mov	result1, objptr
1b8c8     94 FA 25 F4 | 	bith	result1, #148
1b8cc     43 00 00 FF 
1b8d0     AC E5 05 F1 | 	add	objptr, ##34732
1b8d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b8d8     43 00 00 FF 
1b8dc     AC E5 85 F1 | 	sub	objptr, ##34732
1b8e0     F2 FA 01 F6 | 	mov	result1, objptr
1b8e4     19 FA 25 F4 | 	bith	result1, #25
1b8e8     43 00 00 FF 
1b8ec     9C E5 05 F1 | 	add	objptr, ##34716
1b8f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b8f4     43 00 00 FF 
1b8f8     9C E5 85 F1 | 	sub	objptr, ##34716
1b8fc     F2 FA 01 F6 | 	mov	result1, objptr
1b900     00 08 01 FF 
1b904     00 FA 45 F5 | 	or	result1, ##34603008
1b908     43 00 00 FF 
1b90c     B8 E4 05 F1 | 	add	objptr, ##34488
1b910     F2 FA 61 FC | 	wrlong	result1, objptr
1b914     43 00 00 FF 
1b918     B8 E4 85 F1 | 	sub	objptr, ##34488
1b91c     F2 FA 01 F6 | 	mov	result1, objptr
1b920     00 10 01 FF 
1b924     00 FA 45 F5 | 	or	result1, ##35651584
1b928     43 00 00 FF 
1b92c     A0 E5 05 F1 | 	add	objptr, ##34720
1b930     F2 FA 61 FC | 	wrlong	result1, objptr
1b934     43 00 00 FF 
1b938     A0 E5 85 F1 | 	sub	objptr, ##34720
1b93c     F2 FA 01 F6 | 	mov	result1, objptr
1b940     00 18 01 FF 
1b944     00 FA 45 F5 | 	or	result1, ##36700160
1b948     43 00 00 FF 
1b94c     A4 E5 05 F1 | 	add	objptr, ##34724
1b950     F2 FA 61 FC | 	wrlong	result1, objptr
1b954     43 00 00 FF 
1b958     A4 E5 85 F1 | 	sub	objptr, ##34724
1b95c     F2 FA 01 F6 | 	mov	result1, objptr
1b960     00 20 01 FF 
1b964     00 FA 45 F5 | 	or	result1, ##37748736
1b968     43 00 00 FF 
1b96c     A8 E5 05 F1 | 	add	objptr, ##34728
1b970     F2 FA 61 FC | 	wrlong	result1, objptr
1b974     43 00 00 FF 
1b978     A8 E5 85 F1 | 	sub	objptr, ##34728
1b97c     F2 FA 01 F6 | 	mov	result1, objptr
1b980     00 28 01 FF 
1b984     00 FA 45 F5 | 	or	result1, ##38797312
1b988     43 00 00 FF 
1b98c     B4 E5 05 F1 | 	add	objptr, ##34740
1b990     F2 FA 61 FC | 	wrlong	result1, objptr
1b994     43 00 00 FF 
1b998     B4 E5 85 F1 | 	sub	objptr, ##34740
1b99c     F2 FA 01 F6 | 	mov	result1, objptr
1b9a0     00 30 01 FF 
1b9a4     00 FA 45 F5 | 	or	result1, ##39845888
1b9a8     43 00 00 FF 
1b9ac     B8 E5 05 F1 | 	add	objptr, ##34744
1b9b0     F2 FA 61 FC | 	wrlong	result1, objptr
1b9b4     43 00 00 FF 
1b9b8     B8 E5 85 F1 | 	sub	objptr, ##34744
1b9bc     F2 FA 01 F6 | 	mov	result1, objptr
1b9c0     00 38 01 FF 
1b9c4     00 FA 45 F5 | 	or	result1, ##40894464
1b9c8     43 00 00 FF 
1b9cc     BC E5 05 F1 | 	add	objptr, ##34748
1b9d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b9d4     43 00 00 FF 
1b9d8     BC E5 85 F1 | 	sub	objptr, ##34748
1b9dc     F2 FA 01 F6 | 	mov	result1, objptr
1b9e0     00 40 01 FF 
1b9e4     00 FA 45 F5 | 	or	result1, ##41943040
1b9e8     43 00 00 FF 
1b9ec     C0 E5 05 F1 | 	add	objptr, ##34752
1b9f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b9f4     43 00 00 FF 
1b9f8     C0 E5 85 F1 | 	sub	objptr, ##34752
1b9fc     F2 FA 01 F6 | 	mov	result1, objptr
1ba00     00 48 01 FF 
1ba04     00 FA 45 F5 | 	or	result1, ##42991616
1ba08     43 00 00 FF 
1ba0c     C8 E5 05 F1 | 	add	objptr, ##34760
1ba10     F2 FA 61 FC | 	wrlong	result1, objptr
1ba14     43 00 00 FF 
1ba18     C8 E5 85 F1 | 	sub	objptr, ##34760
1ba1c     F2 FA 01 F6 | 	mov	result1, objptr
1ba20     00 08 01 FF 
1ba24     00 FA 45 F5 | 	or	result1, ##34603008
1ba28     43 00 00 FF 
1ba2c     CC E5 05 F1 | 	add	objptr, ##34764
1ba30     F2 FA 61 FC | 	wrlong	result1, objptr
1ba34     43 00 00 FF 
1ba38     CC E5 85 F1 | 	sub	objptr, ##34764
1ba3c     F2 FA 01 F6 | 	mov	result1, objptr
1ba40     00 50 01 FF 
1ba44     00 FA 45 F5 | 	or	result1, ##44040192
1ba48     43 00 00 FF 
1ba4c     CC E4 05 F1 | 	add	objptr, ##34508
1ba50     F2 FA 61 FC | 	wrlong	result1, objptr
1ba54     43 00 00 FF 
1ba58     CC E4 85 F1 | 	sub	objptr, ##34508
1ba5c     F2 FA 01 F6 | 	mov	result1, objptr
1ba60     00 58 01 FF 
1ba64     00 FA 45 F5 | 	or	result1, ##45088768
1ba68     43 00 00 FF 
1ba6c     FC E4 05 F1 | 	add	objptr, ##34556
1ba70     F2 FA 61 FC | 	wrlong	result1, objptr
1ba74     43 00 00 FF 
1ba78     FC E4 85 F1 | 	sub	objptr, ##34556
1ba7c     F2 FA 01 F6 | 	mov	result1, objptr
1ba80     00 60 01 FF 
1ba84     00 FA 45 F5 | 	or	result1, ##46137344
1ba88     43 00 00 FF 
1ba8c     F8 E4 05 F1 | 	add	objptr, ##34552
1ba90     F2 FA 61 FC | 	wrlong	result1, objptr
1ba94     43 00 00 FF 
1ba98     F8 E4 85 F1 | 	sub	objptr, ##34552
1ba9c     F2 FA 01 F6 | 	mov	result1, objptr
1baa0     00 68 01 FF 
1baa4     00 FA 45 F5 | 	or	result1, ##47185920
1baa8     43 00 00 FF 
1baac     9C E4 05 F1 | 	add	objptr, ##34460
1bab0     F2 FA 61 FC | 	wrlong	result1, objptr
1bab4     43 00 00 FF 
1bab8     9C E4 85 F1 | 	sub	objptr, ##34460
1babc     F2 FA 01 F6 | 	mov	result1, objptr
1bac0     00 70 01 FF 
1bac4     00 FA 45 F5 | 	or	result1, ##48234496
1bac8     43 00 00 FF 
1bacc     A0 E4 05 F1 | 	add	objptr, ##34464
1bad0     F2 FA 61 FC | 	wrlong	result1, objptr
1bad4     43 00 00 FF 
1bad8     A0 E4 85 F1 | 	sub	objptr, ##34464
1badc     F2 FA 01 F6 | 	mov	result1, objptr
1bae0     00 78 01 FF 
1bae4     00 FA 45 F5 | 	or	result1, ##49283072
1bae8     43 00 00 FF 
1baec     08 E5 05 F1 | 	add	objptr, ##34568
1baf0     F2 FA 61 FC | 	wrlong	result1, objptr
1baf4     43 00 00 FF 
1baf8     08 E5 85 F1 | 	sub	objptr, ##34568
1bafc     F2 FA 01 F6 | 	mov	result1, objptr
1bb00     38 FA 25 F4 | 	bith	result1, #56
1bb04     43 00 00 FF 
1bb08     B0 E5 05 F1 | 	add	objptr, ##34736
1bb0c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb10     43 00 00 FF 
1bb14     B0 E5 85 F1 | 	sub	objptr, ##34736
1bb18     F2 FA 01 F6 | 	mov	result1, objptr
1bb1c     00 88 01 FF 
1bb20     00 FA 45 F5 | 	or	result1, ##51380224
1bb24     43 00 00 FF 
1bb28     C4 E5 05 F1 | 	add	objptr, ##34756
1bb2c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb30     43 00 00 FF 
1bb34     C4 E5 85 F1 | 	sub	objptr, ##34756
1bb38     F2 FA 01 F6 | 	mov	result1, objptr
1bb3c     00 90 01 FF 
1bb40     00 FA 45 F5 | 	or	result1, ##52428800
1bb44     43 00 00 FF 
1bb48     D0 E5 05 F1 | 	add	objptr, ##34768
1bb4c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb50     43 00 00 FF 
1bb54     D0 E5 85 F1 | 	sub	objptr, ##34768
1bb58     F2 FA 01 F6 | 	mov	result1, objptr
1bb5c     00 98 01 FF 
1bb60     00 FA 45 F5 | 	or	result1, ##53477376
1bb64     43 00 00 FF 
1bb68     D4 E5 05 F1 | 	add	objptr, ##34772
1bb6c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb70     43 00 00 FF 
1bb74     D4 E5 85 F1 | 	sub	objptr, ##34772
1bb78     F2 FA 01 F6 | 	mov	result1, objptr
1bb7c     00 A0 01 FF 
1bb80     00 FA 45 F5 | 	or	result1, ##54525952
1bb84     43 00 00 FF 
1bb88     D8 E5 05 F1 | 	add	objptr, ##34776
1bb8c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb90     43 00 00 FF 
1bb94     D8 E5 85 F1 | 	sub	objptr, ##34776
1bb98     F2 FA 01 F6 | 	mov	result1, objptr
1bb9c     00 A8 01 FF 
1bba0     00 FA 45 F5 | 	or	result1, ##55574528
1bba4     43 00 00 FF 
1bba8     DC E5 05 F1 | 	add	objptr, ##34780
1bbac     F2 FA 61 FC | 	wrlong	result1, objptr
1bbb0     43 00 00 FF 
1bbb4     DC E5 85 F1 | 	sub	objptr, ##34780
1bbb8     F2 FA 01 F6 | 	mov	result1, objptr
1bbbc     00 B0 01 FF 
1bbc0     00 FA 45 F5 | 	or	result1, ##56623104
1bbc4     43 00 00 FF 
1bbc8     E0 E5 05 F1 | 	add	objptr, ##34784
1bbcc     F2 FA 61 FC | 	wrlong	result1, objptr
1bbd0     43 00 00 FF 
1bbd4     E0 E5 85 F1 | 	sub	objptr, ##34784
1bbd8     F2 FA 01 F6 | 	mov	result1, objptr
1bbdc     00 B8 01 FF 
1bbe0     00 FA 45 F5 | 	or	result1, ##57671680
1bbe4     43 00 00 FF 
1bbe8     E4 E5 05 F1 | 	add	objptr, ##34788
1bbec     F2 FA 61 FC | 	wrlong	result1, objptr
1bbf0     43 00 00 FF 
1bbf4     E4 E5 85 F1 | 	sub	objptr, ##34788
1bbf8     F2 FA 01 F6 | 	mov	result1, objptr
1bbfc     94 FA 25 F4 | 	bith	result1, #148
1bc00     43 00 00 FF 
1bc04     AC E5 05 F1 | 	add	objptr, ##34732
1bc08     F2 FA 61 FC | 	wrlong	result1, objptr
1bc0c     43 00 00 FF 
1bc10     AC E5 85 F1 | 	sub	objptr, ##34732
1bc14     F2 FA 01 F6 | 	mov	result1, objptr
1bc18     57 FA 25 F4 | 	bith	result1, #87
1bc1c     43 00 00 FF 
1bc20     EC E5 05 F1 | 	add	objptr, ##34796
1bc24     F2 FA 61 FC | 	wrlong	result1, objptr
1bc28     43 00 00 FF 
1bc2c     EC E5 85 F1 | 	sub	objptr, ##34796
1bc30     F2 FA 01 F6 | 	mov	result1, objptr
1bc34     00 C8 01 FF 
1bc38     00 FA 45 F5 | 	or	result1, ##59768832
1bc3c     43 00 00 FF 
1bc40     E8 E5 05 F1 | 	add	objptr, ##34792
1bc44     F2 FA 61 FC | 	wrlong	result1, objptr
1bc48     43 00 00 FF 
1bc4c     E8 E5 85 F1 | 	sub	objptr, ##34792
1bc50     F2 FA 01 F6 | 	mov	result1, objptr
1bc54     00 D0 01 FF 
1bc58     00 FA 45 F5 | 	or	result1, ##60817408
1bc5c     44 00 00 FF 
1bc60     00 E4 05 F1 | 	add	objptr, ##34816
1bc64     F2 FA 61 FC | 	wrlong	result1, objptr
1bc68     44 00 00 FF 
1bc6c     00 E4 85 F1 | 	sub	objptr, ##34816
1bc70     F2 FA 01 F6 | 	mov	result1, objptr
1bc74     00 D8 01 FF 
1bc78     00 FA 45 F5 | 	or	result1, ##61865984
1bc7c     44 00 00 FF 
1bc80     04 E4 05 F1 | 	add	objptr, ##34820
1bc84     F2 FA 61 FC | 	wrlong	result1, objptr
1bc88     44 00 00 FF 
1bc8c     04 E4 85 F1 | 	sub	objptr, ##34820
1bc90     F2 FA 01 F6 | 	mov	result1, objptr
1bc94     76 FA 25 F4 | 	bith	result1, #118
1bc98     43 00 00 FF 
1bc9c     F0 E5 05 F1 | 	add	objptr, ##34800
1bca0     F2 FA 61 FC | 	wrlong	result1, objptr
1bca4     43 00 00 FF 
1bca8     F0 E5 85 F1 | 	sub	objptr, ##34800
1bcac     F2 FA 01 F6 | 	mov	result1, objptr
1bcb0     00 E8 01 FF 
1bcb4     00 FA 45 F5 | 	or	result1, ##63963136
1bcb8     43 00 00 FF 
1bcbc     F4 E5 05 F1 | 	add	objptr, ##34804
1bcc0     F2 FA 61 FC | 	wrlong	result1, objptr
1bcc4     43 00 00 FF 
1bcc8     F4 E5 85 F1 | 	sub	objptr, ##34804
1bccc     F2 FA 01 F6 | 	mov	result1, objptr
1bcd0     95 FA 25 F4 | 	bith	result1, #149
1bcd4     43 00 00 FF 
1bcd8     F8 E5 05 F1 | 	add	objptr, ##34808
1bcdc     F2 FA 61 FC | 	wrlong	result1, objptr
1bce0     43 00 00 FF 
1bce4     F8 E5 85 F1 | 	sub	objptr, ##34808
1bce8     F2 FA 01 F6 | 	mov	result1, objptr
1bcec     B4 FA 25 F4 | 	bith	result1, #180
1bcf0     43 00 00 FF 
1bcf4     FC E5 05 F1 | 	add	objptr, ##34812
1bcf8     F2 FA 61 FC | 	wrlong	result1, objptr
1bcfc     43 00 00 FF 
1bd00     FC E5 85 F1 | 	sub	objptr, ##34812
1bd04     F2 FA 01 F6 | 	mov	result1, objptr
1bd08     1A FA 25 F4 | 	bith	result1, #26
1bd0c     44 00 00 FF 
1bd10     0C E4 05 F1 | 	add	objptr, ##34828
1bd14     F2 FA 61 FC | 	wrlong	result1, objptr
1bd18     44 00 00 FF 
1bd1c     0C E4 85 F1 | 	sub	objptr, ##34828
1bd20     F2 FA 01 F6 | 	mov	result1, objptr
1bd24     00 08 02 FF 
1bd28     00 FA 45 F5 | 	or	result1, ##68157440
1bd2c     44 00 00 FF 
1bd30     08 E4 05 F1 | 	add	objptr, ##34824
1bd34     F2 FA 61 FC | 	wrlong	result1, objptr
1bd38     44 00 00 FF 
1bd3c     08 E4 85 F1 | 	sub	objptr, ##34824
1bd40     F2 FA 01 F6 | 	mov	result1, objptr
1bd44     00 10 02 FF 
1bd48     00 FA 45 F5 | 	or	result1, ##69206016
1bd4c     44 00 00 FF 
1bd50     18 E4 05 F1 | 	add	objptr, ##34840
1bd54     F2 FA 61 FC | 	wrlong	result1, objptr
1bd58     44 00 00 FF 
1bd5c     18 E4 85 F1 | 	sub	objptr, ##34840
1bd60     F2 FA 01 F6 | 	mov	result1, objptr
1bd64     00 18 02 FF 
1bd68     00 FA 45 F5 | 	or	result1, ##70254592
1bd6c     44 00 00 FF 
1bd70     14 E4 05 F1 | 	add	objptr, ##34836
1bd74     F2 FA 61 FC | 	wrlong	result1, objptr
1bd78     44 00 00 FF 
1bd7c     14 E4 85 F1 | 	sub	objptr, ##34836
1bd80     F2 FA 01 F6 | 	mov	result1, objptr
1bd84     00 20 02 FF 
1bd88     00 FA 45 F5 | 	or	result1, ##71303168
1bd8c     44 00 00 FF 
1bd90     10 E4 05 F1 | 	add	objptr, ##34832
1bd94     F2 FA 61 FC | 	wrlong	result1, objptr
1bd98     44 00 00 FF 
1bd9c     10 E4 85 F1 | 	sub	objptr, ##34832
1bda0     F2 FA 01 F6 | 	mov	result1, objptr
1bda4     00 28 02 FF 
1bda8     00 FA 45 F5 | 	or	result1, ##72351744
1bdac     44 00 00 FF 
1bdb0     1C E4 05 F1 | 	add	objptr, ##34844
1bdb4     F2 FA 61 FC | 	wrlong	result1, objptr
1bdb8     44 00 00 FF 
1bdbc     1C E4 85 F1 | 	sub	objptr, ##34844
1bdc0     F2 FA 01 F6 | 	mov	result1, objptr
1bdc4     00 30 02 FF 
1bdc8     00 FA 45 F5 | 	or	result1, ##73400320
1bdcc     44 00 00 FF 
1bdd0     20 E4 05 F1 | 	add	objptr, ##34848
1bdd4     F2 FA 61 FC | 	wrlong	result1, objptr
1bdd8     44 00 00 FF 
1bddc     20 E4 85 F1 | 	sub	objptr, ##34848
1bde0     F2 FA 01 F6 | 	mov	result1, objptr
1bde4     00 38 02 FF 
1bde8     00 FA 45 F5 | 	or	result1, ##74448896
1bdec     43 00 00 FF 
1bdf0     B4 E4 05 F1 | 	add	objptr, ##34484
1bdf4     F2 FA 61 FC | 	wrlong	result1, objptr
1bdf8     43 00 00 FF 
1bdfc     B4 E4 85 F1 | 	sub	objptr, ##34484
1be00     F2 FA 01 F6 | 	mov	result1, objptr
1be04     00 40 02 FF 
1be08     00 FA 45 F5 | 	or	result1, ##75497472
1be0c     44 00 00 FF 
1be10     38 E4 05 F1 | 	add	objptr, ##34872
1be14     F2 FA 61 FC | 	wrlong	result1, objptr
1be18     44 00 00 FF 
1be1c     38 E4 85 F1 | 	sub	objptr, ##34872
1be20     F2 FA 01 F6 | 	mov	result1, objptr
1be24     00 48 02 FF 
1be28     00 FA 45 F5 | 	or	result1, ##76546048
1be2c     44 00 00 FF 
1be30     48 E4 05 F1 | 	add	objptr, ##34888
1be34     F2 FA 61 FC | 	wrlong	result1, objptr
1be38     44 00 00 FF 
1be3c     48 E4 85 F1 | 	sub	objptr, ##34888
1be40     F2 FA 01 F6 | 	mov	result1, objptr
1be44     00 50 02 FF 
1be48     00 FA 45 F5 | 	or	result1, ##77594624
1be4c     44 00 00 FF 
1be50     4C E4 05 F1 | 	add	objptr, ##34892
1be54     F2 FA 61 FC | 	wrlong	result1, objptr
1be58     44 00 00 FF 
1be5c     4C E4 85 F1 | 	sub	objptr, ##34892
1be60     F2 FA 01 F6 | 	mov	result1, objptr
1be64     00 58 02 FF 
1be68     00 FA 45 F5 | 	or	result1, ##78643200
1be6c     44 00 00 FF 
1be70     44 E4 05 F1 | 	add	objptr, ##34884
1be74     F2 FA 61 FC | 	wrlong	result1, objptr
1be78     44 00 00 FF 
1be7c     44 E4 85 F1 | 	sub	objptr, ##34884
1be80     F2 FA 01 F6 | 	mov	result1, objptr
1be84     00 60 02 FF 
1be88     00 FA 45 F5 | 	or	result1, ##79691776
1be8c     44 00 00 FF 
1be90     3C E4 05 F1 | 	add	objptr, ##34876
1be94     F2 FA 61 FC | 	wrlong	result1, objptr
1be98     44 00 00 FF 
1be9c     3C E4 85 F1 | 	sub	objptr, ##34876
1bea0     F2 FA 01 F6 | 	mov	result1, objptr
1bea4     00 68 02 FF 
1bea8     00 FA 45 F5 | 	or	result1, ##80740352
1beac     44 00 00 FF 
1beb0     40 E4 05 F1 | 	add	objptr, ##34880
1beb4     F2 FA 61 FC | 	wrlong	result1, objptr
1beb8     44 00 00 FF 
1bebc     40 E4 85 F1 | 	sub	objptr, ##34880
1bec0     F2 FA 01 F6 | 	mov	result1, objptr
1bec4     00 70 02 FF 
1bec8     00 FA 45 F5 | 	or	result1, ##81788928
1becc     44 00 00 FF 
1bed0     50 E4 05 F1 | 	add	objptr, ##34896
1bed4     F2 FA 61 FC | 	wrlong	result1, objptr
1bed8     44 00 00 FF 
1bedc     50 E4 85 F1 | 	sub	objptr, ##34896
1bee0     F2 FA 01 F6 | 	mov	result1, objptr
1bee4     00 78 02 FF 
1bee8     00 FA 45 F5 | 	or	result1, ##82837504
1beec     44 00 00 FF 
1bef0     54 E4 05 F1 | 	add	objptr, ##34900
1bef4     F2 FA 61 FC | 	wrlong	result1, objptr
1bef8     44 00 00 FF 
1befc     54 E4 85 F1 | 	sub	objptr, ##34900
1bf00     F2 FA 01 F6 | 	mov	result1, objptr
1bf04     00 80 02 FF 
1bf08     00 FA 45 F5 | 	or	result1, ##83886080
1bf0c     44 00 00 FF 
1bf10     58 E4 05 F1 | 	add	objptr, ##34904
1bf14     F2 FA 61 FC | 	wrlong	result1, objptr
1bf18     44 00 00 FF 
1bf1c     58 E4 85 F1 | 	sub	objptr, ##34904
1bf20     F2 FA 01 F6 | 	mov	result1, objptr
1bf24     00 88 02 FF 
1bf28     00 FA 45 F5 | 	or	result1, ##84934656
1bf2c     44 00 00 FF 
1bf30     5C E4 05 F1 | 	add	objptr, ##34908
1bf34     F2 FA 61 FC | 	wrlong	result1, objptr
1bf38     44 00 00 FF 
1bf3c     5C E4 85 F1 | 	sub	objptr, ##34908
1bf40     F2 FA 01 F6 | 	mov	result1, objptr
1bf44     00 90 02 FF 
1bf48     00 FA 45 F5 | 	or	result1, ##85983232
1bf4c     44 00 00 FF 
1bf50     60 E4 05 F1 | 	add	objptr, ##34912
1bf54     F2 FA 61 FC | 	wrlong	result1, objptr
1bf58     44 00 00 FF 
1bf5c     60 E4 85 F1 | 	sub	objptr, ##34912
1bf60     F2 FA 01 F6 | 	mov	result1, objptr
1bf64     00 98 02 FF 
1bf68     00 FA 45 F5 | 	or	result1, ##87031808
1bf6c     44 00 00 FF 
1bf70     64 E4 05 F1 | 	add	objptr, ##34916
1bf74     F2 FA 61 FC | 	wrlong	result1, objptr
1bf78     44 00 00 FF 
1bf7c     64 E4 85 F1 | 	sub	objptr, ##34916
1bf80     F2 FA 01 F6 | 	mov	result1, objptr
1bf84     00 A0 02 FF 
1bf88     00 FA 45 F5 | 	or	result1, ##88080384
1bf8c     44 00 00 FF 
1bf90     68 E4 05 F1 | 	add	objptr, ##34920
1bf94     F2 FA 61 FC | 	wrlong	result1, objptr
1bf98     44 00 00 FF 
1bf9c     68 E4 85 F1 | 	sub	objptr, ##34920
1bfa0     F2 FA 01 F6 | 	mov	result1, objptr
1bfa4     00 A8 02 FF 
1bfa8     00 FA 45 F5 | 	or	result1, ##89128960
1bfac     44 00 00 FF 
1bfb0     6C E4 05 F1 | 	add	objptr, ##34924
1bfb4     F2 FA 61 FC | 	wrlong	result1, objptr
1bfb8     44 00 00 FF 
1bfbc     6C E4 85 F1 | 	sub	objptr, ##34924
1bfc0     F2 FA 01 F6 | 	mov	result1, objptr
1bfc4     00 B0 02 FF 
1bfc8     00 FA 45 F5 | 	or	result1, ##90177536
1bfcc     44 00 00 FF 
1bfd0     78 E4 05 F1 | 	add	objptr, ##34936
1bfd4     F2 FA 61 FC | 	wrlong	result1, objptr
1bfd8     44 00 00 FF 
1bfdc     78 E4 85 F1 | 	sub	objptr, ##34936
1bfe0     F2 FA 01 F6 | 	mov	result1, objptr
1bfe4     00 B8 02 FF 
1bfe8     00 FA 45 F5 | 	or	result1, ##91226112
1bfec     44 00 00 FF 
1bff0     70 E4 05 F1 | 	add	objptr, ##34928
1bff4     F2 FA 61 FC | 	wrlong	result1, objptr
1bff8     44 00 00 FF 
1bffc     70 E4 85 F1 | 	sub	objptr, ##34928
1c000     F2 FA 01 F6 | 	mov	result1, objptr
1c004     00 C0 02 FF 
1c008     00 FA 45 F5 | 	or	result1, ##92274688
1c00c     44 00 00 FF 
1c010     74 E4 05 F1 | 	add	objptr, ##34932
1c014     F2 FA 61 FC | 	wrlong	result1, objptr
1c018     44 00 00 FF 
1c01c     74 E4 85 F1 | 	sub	objptr, ##34932
1c020     F2 FA 01 F6 | 	mov	result1, objptr
1c024     00 C8 02 FF 
1c028     00 FA 45 F5 | 	or	result1, ##93323264
1c02c     44 00 00 FF 
1c030     7C E4 05 F1 | 	add	objptr, ##34940
1c034     F2 FA 61 FC | 	wrlong	result1, objptr
1c038     44 00 00 FF 
1c03c     7C E4 85 F1 | 	sub	objptr, ##34940
1c040     F2 FA 01 F6 | 	mov	result1, objptr
1c044     00 D0 02 FF 
1c048     00 FA 45 F5 | 	or	result1, ##94371840
1c04c     44 00 00 FF 
1c050     24 E4 05 F1 | 	add	objptr, ##34852
1c054     F2 FA 61 FC | 	wrlong	result1, objptr
1c058     44 00 00 FF 
1c05c     24 E4 85 F1 | 	sub	objptr, ##34852
1c060     F2 FA 01 F6 | 	mov	result1, objptr
1c064     00 D8 02 FF 
1c068     00 FA 45 F5 | 	or	result1, ##95420416
1c06c     44 00 00 FF 
1c070     2C E4 05 F1 | 	add	objptr, ##34860
1c074     F2 FA 61 FC | 	wrlong	result1, objptr
1c078     44 00 00 FF 
1c07c     2C E4 85 F1 | 	sub	objptr, ##34860
1c080     F2 FA 01 F6 | 	mov	result1, objptr
1c084     00 E0 02 FF 
1c088     00 FA 45 F5 | 	or	result1, ##96468992
1c08c     44 00 00 FF 
1c090     30 E4 05 F1 | 	add	objptr, ##34864
1c094     F2 FA 61 FC | 	wrlong	result1, objptr
1c098     44 00 00 FF 
1c09c     30 E4 85 F1 | 	sub	objptr, ##34864
1c0a0     F2 FA 01 F6 | 	mov	result1, objptr
1c0a4     00 E8 02 FF 
1c0a8     00 FA 45 F5 | 	or	result1, ##97517568
1c0ac     44 00 00 FF 
1c0b0     80 E4 05 F1 | 	add	objptr, ##34944
1c0b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c0b8     44 00 00 FF 
1c0bc     80 E4 85 F1 | 	sub	objptr, ##34944
1c0c0     F2 FA 01 F6 | 	mov	result1, objptr
1c0c4     00 F0 02 FF 
1c0c8     00 FA 45 F5 | 	or	result1, ##98566144
1c0cc     44 00 00 FF 
1c0d0     84 E4 05 F1 | 	add	objptr, ##34948
1c0d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c0d8     44 00 00 FF 
1c0dc     84 E4 85 F1 | 	sub	objptr, ##34948
1c0e0     F2 FA 01 F6 | 	mov	result1, objptr
1c0e4     00 F8 02 FF 
1c0e8     00 FA 45 F5 | 	or	result1, ##99614720
1c0ec     44 00 00 FF 
1c0f0     88 E4 05 F1 | 	add	objptr, ##34952
1c0f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c0f8     44 00 00 FF 
1c0fc     88 E4 85 F1 | 	sub	objptr, ##34952
1c100     F2 FA 01 F6 | 	mov	result1, objptr
1c104     39 FA 25 F4 | 	bith	result1, #57
1c108     44 00 00 FF 
1c10c     34 E4 05 F1 | 	add	objptr, ##34868
1c110     F2 FA 61 FC | 	wrlong	result1, objptr
1c114     44 00 00 FF 
1c118     34 E4 85 F1 | 	sub	objptr, ##34868
1c11c     F2 FA 01 F6 | 	mov	result1, objptr
1c120     00 08 03 FF 
1c124     00 FA 45 F5 | 	or	result1, ##101711872
1c128     44 00 00 FF 
1c12c     98 E4 05 F1 | 	add	objptr, ##34968
1c130     F2 FA 61 FC | 	wrlong	result1, objptr
1c134     44 00 00 FF 
1c138     98 E4 85 F1 | 	sub	objptr, ##34968
1c13c     F2 FA 01 F6 | 	mov	result1, objptr
1c140     00 10 03 FF 
1c144     00 FA 45 F5 | 	or	result1, ##102760448
1c148     44 00 00 FF 
1c14c     A0 E4 05 F1 | 	add	objptr, ##34976
1c150     F2 FA 61 FC | 	wrlong	result1, objptr
1c154     44 00 00 FF 
1c158     A0 E4 85 F1 | 	sub	objptr, ##34976
1c15c     F2 FA 01 F6 | 	mov	result1, objptr
1c160     00 18 03 FF 
1c164     00 FA 45 F5 | 	or	result1, ##103809024
1c168     44 00 00 FF 
1c16c     94 E4 05 F1 | 	add	objptr, ##34964
1c170     F2 FA 61 FC | 	wrlong	result1, objptr
1c174     44 00 00 FF 
1c178     94 E4 85 F1 | 	sub	objptr, ##34964
1c17c     F2 FA 01 F6 | 	mov	result1, objptr
1c180     00 20 03 FF 
1c184     00 FA 45 F5 | 	or	result1, ##104857600
1c188     44 00 00 FF 
1c18c     90 E4 05 F1 | 	add	objptr, ##34960
1c190     F2 FA 61 FC | 	wrlong	result1, objptr
1c194     44 00 00 FF 
1c198     90 E4 85 F1 | 	sub	objptr, ##34960
1c19c     F2 FA 01 F6 | 	mov	result1, objptr
1c1a0     00 28 03 FF 
1c1a4     00 FA 45 F5 | 	or	result1, ##105906176
1c1a8     44 00 00 FF 
1c1ac     8C E4 05 F1 | 	add	objptr, ##34956
1c1b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1b4     44 00 00 FF 
1c1b8     8C E4 85 F1 | 	sub	objptr, ##34956
1c1bc     F2 FA 01 F6 | 	mov	result1, objptr
1c1c0     00 30 03 FF 
1c1c4     00 FA 45 F5 | 	or	result1, ##106954752
1c1c8     44 00 00 FF 
1c1cc     9C E4 05 F1 | 	add	objptr, ##34972
1c1d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1d4     44 00 00 FF 
1c1d8     9C E4 85 F1 | 	sub	objptr, ##34972
1c1dc     F2 FA 01 F6 | 	mov	result1, objptr
1c1e0     00 38 03 FF 
1c1e4     00 FA 45 F5 | 	or	result1, ##108003328
1c1e8     44 00 00 FF 
1c1ec     A4 E4 05 F1 | 	add	objptr, ##34980
1c1f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1f4     44 00 00 FF 
1c1f8     A4 E4 85 F1 | 	sub	objptr, ##34980
1c1fc     F2 FA 01 F6 | 	mov	result1, objptr
1c200     00 40 03 FF 
1c204     00 FA 45 F5 | 	or	result1, ##109051904
1c208     44 00 00 FF 
1c20c     A8 E4 05 F1 | 	add	objptr, ##34984
1c210     F2 FA 61 FC | 	wrlong	result1, objptr
1c214     44 00 00 FF 
1c218     A8 E4 85 F1 | 	sub	objptr, ##34984
1c21c     F2 FA 01 F6 | 	mov	result1, objptr
1c220     00 48 03 FF 
1c224     00 FA 45 F5 | 	or	result1, ##110100480
1c228     44 00 00 FF 
1c22c     AC E4 05 F1 | 	add	objptr, ##34988
1c230     F2 FA 61 FC | 	wrlong	result1, objptr
1c234     44 00 00 FF 
1c238     AC E4 85 F1 | 	sub	objptr, ##34988
1c23c     F2 FA 01 F6 | 	mov	result1, objptr
1c240     00 50 03 FF 
1c244     00 FA 45 F5 | 	or	result1, ##111149056
1c248     44 00 00 FF 
1c24c     B4 E4 05 F1 | 	add	objptr, ##34996
1c250     F2 FA 61 FC | 	wrlong	result1, objptr
1c254     44 00 00 FF 
1c258     B4 E4 85 F1 | 	sub	objptr, ##34996
1c25c     F2 FA 01 F6 | 	mov	result1, objptr
1c260     00 58 03 FF 
1c264     00 FA 45 F5 | 	or	result1, ##112197632
1c268     44 00 00 FF 
1c26c     B8 E4 05 F1 | 	add	objptr, ##35000
1c270     F2 FA 61 FC | 	wrlong	result1, objptr
1c274     44 00 00 FF 
1c278     B8 E4 85 F1 | 	sub	objptr, ##35000
1c27c     F2 FA 01 F6 | 	mov	result1, objptr
1c280     00 60 03 FF 
1c284     00 FA 45 F5 | 	or	result1, ##113246208
1c288     44 00 00 FF 
1c28c     BC E4 05 F1 | 	add	objptr, ##35004
1c290     F2 FA 61 FC | 	wrlong	result1, objptr
1c294     44 00 00 FF 
1c298     BC E4 85 F1 | 	sub	objptr, ##35004
1c29c     F2 FA 01 F6 | 	mov	result1, objptr
1c2a0     00 68 03 FF 
1c2a4     00 FA 45 F5 | 	or	result1, ##114294784
1c2a8     44 00 00 FF 
1c2ac     C0 E4 05 F1 | 	add	objptr, ##35008
1c2b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c2b4     44 00 00 FF 
1c2b8     C0 E4 85 F1 | 	sub	objptr, ##35008
1c2bc     F2 FA 01 F6 | 	mov	result1, objptr
1c2c0     00 70 03 FF 
1c2c4     00 FA 45 F5 | 	or	result1, ##115343360
1c2c8     44 00 00 FF 
1c2cc     C4 E4 05 F1 | 	add	objptr, ##35012
1c2d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c2d4     44 00 00 FF 
1c2d8     C4 E4 85 F1 | 	sub	objptr, ##35012
1c2dc     F2 FA 01 F6 | 	mov	result1, objptr
1c2e0     00 78 03 FF 
1c2e4     00 FA 45 F5 | 	or	result1, ##116391936
1c2e8     44 00 00 FF 
1c2ec     C8 E4 05 F1 | 	add	objptr, ##35016
1c2f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c2f4     44 00 00 FF 
1c2f8     C8 E4 85 F1 | 	sub	objptr, ##35016
1c2fc     F2 FA 01 F6 | 	mov	result1, objptr
1c300     00 08 01 FF 
1c304     00 FA 45 F5 | 	or	result1, ##34603008
1c308     44 00 00 FF 
1c30c     CC E4 05 F1 | 	add	objptr, ##35020
1c310     F2 FA 61 FC | 	wrlong	result1, objptr
1c314     44 00 00 FF 
1c318     CC E4 85 F1 | 	sub	objptr, ##35020
1c31c     F2 FA 01 F6 | 	mov	result1, objptr
1c320     58 FA 25 F4 | 	bith	result1, #88
1c324     44 00 00 FF 
1c328     D0 E4 05 F1 | 	add	objptr, ##35024
1c32c     F2 FA 61 FC | 	wrlong	result1, objptr
1c330     44 00 00 FF 
1c334     D0 E4 85 F1 | 	sub	objptr, ##35024
1c338     F2 FA 01 F6 | 	mov	result1, objptr
1c33c     00 88 03 FF 
1c340     00 FA 45 F5 | 	or	result1, ##118489088
1c344     44 00 00 FF 
1c348     B0 E4 05 F1 | 	add	objptr, ##34992
1c34c     F2 FA 61 FC | 	wrlong	result1, objptr
1c350     44 00 00 FF 
1c354     B0 E4 85 F1 | 	sub	objptr, ##34992
1c358     F2 FA 01 F6 | 	mov	result1, objptr
1c35c     00 90 03 FF 
1c360     00 FA 45 F5 | 	or	result1, ##119537664
1c364     43 00 00 FF 
1c368     A8 E4 05 F1 | 	add	objptr, ##34472
1c36c     F2 FA 61 FC | 	wrlong	result1, objptr
1c370     43 00 00 FF 
1c374     A8 E4 85 F1 | 	sub	objptr, ##34472
1c378     F2 FA 01 F6 | 	mov	result1, objptr
1c37c     00 98 03 FF 
1c380     00 FA 45 F5 | 	or	result1, ##120586240
1c384     44 00 00 FF 
1c388     D4 E4 05 F1 | 	add	objptr, ##35028
1c38c     F2 FA 61 FC | 	wrlong	result1, objptr
1c390     44 00 00 FF 
1c394     D4 E4 85 F1 | 	sub	objptr, ##35028
1c398     F2 FA 01 F6 | 	mov	result1, objptr
1c39c     00 A0 03 FF 
1c3a0     00 FA 45 F5 | 	or	result1, ##121634816
1c3a4     44 00 00 FF 
1c3a8     D8 E4 05 F1 | 	add	objptr, ##35032
1c3ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c3b0     44 00 00 FF 
1c3b4     D8 E4 85 F1 | 	sub	objptr, ##35032
1c3b8     F2 FA 01 F6 | 	mov	result1, objptr
1c3bc     00 A8 03 FF 
1c3c0     00 FA 45 F5 | 	or	result1, ##122683392
1c3c4     44 00 00 FF 
1c3c8     EC E4 05 F1 | 	add	objptr, ##35052
1c3cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c3d0     44 00 00 FF 
1c3d4     EC E4 85 F1 | 	sub	objptr, ##35052
1c3d8     F2 FA 01 F6 | 	mov	result1, objptr
1c3dc     00 B0 03 FF 
1c3e0     00 FA 45 F5 | 	or	result1, ##123731968
1c3e4     44 00 00 FF 
1c3e8     E8 E4 05 F1 | 	add	objptr, ##35048
1c3ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c3f0     44 00 00 FF 
1c3f4     E8 E4 85 F1 | 	sub	objptr, ##35048
1c3f8     F2 FA 01 F6 | 	mov	result1, objptr
1c3fc     00 B8 03 FF 
1c400     00 FA 45 F5 | 	or	result1, ##124780544
1c404     44 00 00 FF 
1c408     E0 E4 05 F1 | 	add	objptr, ##35040
1c40c     F2 FA 61 FC | 	wrlong	result1, objptr
1c410     44 00 00 FF 
1c414     E0 E4 85 F1 | 	sub	objptr, ##35040
1c418     F2 FA 01 F6 | 	mov	result1, objptr
1c41c     77 FA 25 F4 | 	bith	result1, #119
1c420     44 00 00 FF 
1c424     DC E4 05 F1 | 	add	objptr, ##35036
1c428     F2 FA 61 FC | 	wrlong	result1, objptr
1c42c     44 00 00 FF 
1c430     DC E4 85 F1 | 	sub	objptr, ##35036
1c434     F2 FA 01 F6 | 	mov	result1, objptr
1c438     00 C8 03 FF 
1c43c     00 FA 45 F5 | 	or	result1, ##126877696
1c440     44 00 00 FF 
1c444     FC E4 05 F1 | 	add	objptr, ##35068
1c448     F2 FA 61 FC | 	wrlong	result1, objptr
1c44c     44 00 00 FF 
1c450     FC E4 85 F1 | 	sub	objptr, ##35068
1c454     F2 FA 01 F6 | 	mov	result1, objptr
1c458     00 D0 03 FF 
1c45c     00 FA 45 F5 | 	or	result1, ##127926272
1c460     44 00 00 FF 
1c464     F0 E4 05 F1 | 	add	objptr, ##35056
1c468     F2 FA 61 FC | 	wrlong	result1, objptr
1c46c     44 00 00 FF 
1c470     F0 E4 85 F1 | 	sub	objptr, ##35056
1c474     F2 FA 01 F6 | 	mov	result1, objptr
1c478     00 D8 03 FF 
1c47c     00 FA 45 F5 | 	or	result1, ##128974848
1c480     44 00 00 FF 
1c484     F4 E4 05 F1 | 	add	objptr, ##35060
1c488     F2 FA 61 FC | 	wrlong	result1, objptr
1c48c     44 00 00 FF 
1c490     F4 E4 85 F1 | 	sub	objptr, ##35060
1c494     F2 FA 01 F6 | 	mov	result1, objptr
1c498     96 FA 25 F4 | 	bith	result1, #150
1c49c     44 00 00 FF 
1c4a0     F8 E4 05 F1 | 	add	objptr, ##35064
1c4a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4a8     44 00 00 FF 
1c4ac     F8 E4 85 F1 | 	sub	objptr, ##35064
1c4b0     F2 FA 01 F6 | 	mov	result1, objptr
1c4b4     00 E8 03 FF 
1c4b8     00 FA 45 F5 | 	or	result1, ##131072000
1c4bc     44 00 00 FF 
1c4c0     00 E5 05 F1 | 	add	objptr, ##35072
1c4c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4c8     44 00 00 FF 
1c4cc     00 E5 85 F1 | 	sub	objptr, ##35072
1c4d0     F2 FA 01 F6 | 	mov	result1, objptr
1c4d4     B5 FA 25 F4 | 	bith	result1, #181
1c4d8     44 00 00 FF 
1c4dc     04 E5 05 F1 | 	add	objptr, ##35076
1c4e0     F2 FA 61 FC | 	wrlong	result1, objptr
1c4e4     44 00 00 FF 
1c4e8     04 E5 85 F1 | 	sub	objptr, ##35076
1c4ec     F2 FA 01 F6 | 	mov	result1, objptr
1c4f0     D4 FA 25 F4 | 	bith	result1, #212
1c4f4     44 00 00 FF 
1c4f8     08 E5 05 F1 | 	add	objptr, ##35080
1c4fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c500     44 00 00 FF 
1c504     08 E5 85 F1 | 	sub	objptr, ##35080
1c508     F2 FA 01 F6 | 	mov	result1, objptr
1c50c     1B FA 25 F4 | 	bith	result1, #27
1c510     44 00 00 FF 
1c514     0C E5 05 F1 | 	add	objptr, ##35084
1c518     F2 FA 61 FC | 	wrlong	result1, objptr
1c51c     44 00 00 FF 
1c520     0C E5 85 F1 | 	sub	objptr, ##35084
1c524     F2 FA 01 F6 | 	mov	result1, objptr
1c528     00 08 04 FF 
1c52c     00 FA 45 F5 | 	or	result1, ##135266304
1c530     44 00 00 FF 
1c534     10 E5 05 F1 | 	add	objptr, ##35088
1c538     F2 FA 61 FC | 	wrlong	result1, objptr
1c53c     44 00 00 FF 
1c540     10 E5 85 F1 | 	sub	objptr, ##35088
1c544     F2 FA 01 F6 | 	mov	result1, objptr
1c548     00 10 04 FF 
1c54c     00 FA 45 F5 | 	or	result1, ##136314880
1c550     44 00 00 FF 
1c554     14 E5 05 F1 | 	add	objptr, ##35092
1c558     F2 FA 61 FC | 	wrlong	result1, objptr
1c55c     44 00 00 FF 
1c560     14 E5 85 F1 | 	sub	objptr, ##35092
1c564     F2 FA 01 F6 | 	mov	result1, objptr
1c568     00 18 04 FF 
1c56c     00 FA 45 F5 | 	or	result1, ##137363456
1c570     44 00 00 FF 
1c574     1C E5 05 F1 | 	add	objptr, ##35100
1c578     F2 FA 61 FC | 	wrlong	result1, objptr
1c57c     44 00 00 FF 
1c580     1C E5 85 F1 | 	sub	objptr, ##35100
1c584     F2 FA 01 F6 | 	mov	result1, objptr
1c588     00 20 04 FF 
1c58c     00 FA 45 F5 | 	or	result1, ##138412032
1c590     44 00 00 FF 
1c594     20 E5 05 F1 | 	add	objptr, ##35104
1c598     F2 FA 61 FC | 	wrlong	result1, objptr
1c59c     44 00 00 FF 
1c5a0     20 E5 85 F1 | 	sub	objptr, ##35104
1c5a4     F2 FA 01 F6 | 	mov	result1, objptr
1c5a8     00 28 04 FF 
1c5ac     00 FA 45 F5 | 	or	result1, ##139460608
1c5b0     44 00 00 FF 
1c5b4     24 E5 05 F1 | 	add	objptr, ##35108
1c5b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5bc     44 00 00 FF 
1c5c0     24 E5 85 F1 | 	sub	objptr, ##35108
1c5c4     F2 FA 01 F6 | 	mov	result1, objptr
1c5c8     00 30 04 FF 
1c5cc     00 FA 45 F5 | 	or	result1, ##140509184
1c5d0     44 00 00 FF 
1c5d4     18 E5 05 F1 | 	add	objptr, ##35096
1c5d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5dc     44 00 00 FF 
1c5e0     18 E5 85 F1 | 	sub	objptr, ##35096
1c5e4     F2 FA 01 F6 | 	mov	result1, objptr
1c5e8     00 38 04 FF 
1c5ec     00 FA 45 F5 | 	or	result1, ##141557760
1c5f0     44 00 00 FF 
1c5f4     28 E5 05 F1 | 	add	objptr, ##35112
1c5f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5fc     44 00 00 FF 
1c600     28 E5 85 F1 | 	sub	objptr, ##35112
1c604     F2 FA 01 F6 | 	mov	result1, objptr
1c608     00 40 04 FF 
1c60c     00 FA 45 F5 | 	or	result1, ##142606336
1c610     44 00 00 FF 
1c614     5C E5 05 F1 | 	add	objptr, ##35164
1c618     F2 FA 61 FC | 	wrlong	result1, objptr
1c61c     44 00 00 FF 
1c620     5C E5 85 F1 | 	sub	objptr, ##35164
1c624     F2 FA 01 F6 | 	mov	result1, objptr
1c628     00 48 04 FF 
1c62c     00 FA 45 F5 | 	or	result1, ##143654912
1c630     44 00 00 FF 
1c634     54 E5 05 F1 | 	add	objptr, ##35156
1c638     F2 FA 61 FC | 	wrlong	result1, objptr
1c63c     44 00 00 FF 
1c640     54 E5 85 F1 | 	sub	objptr, ##35156
1c644     F2 FA 01 F6 | 	mov	result1, objptr
1c648     00 50 04 FF 
1c64c     00 FA 45 F5 | 	or	result1, ##144703488
1c650     44 00 00 FF 
1c654     2C E5 05 F1 | 	add	objptr, ##35116
1c658     F2 FA 61 FC | 	wrlong	result1, objptr
1c65c     44 00 00 FF 
1c660     2C E5 85 F1 | 	sub	objptr, ##35116
1c664     F2 FA 01 F6 | 	mov	result1, objptr
1c668     00 58 04 FF 
1c66c     00 FA 45 F5 | 	or	result1, ##145752064
1c670     44 00 00 FF 
1c674     30 E5 05 F1 | 	add	objptr, ##35120
1c678     F2 FA 61 FC | 	wrlong	result1, objptr
1c67c     44 00 00 FF 
1c680     30 E5 85 F1 | 	sub	objptr, ##35120
1c684     F2 FA 01 F6 | 	mov	result1, objptr
1c688     00 60 04 FF 
1c68c     00 FA 45 F5 | 	or	result1, ##146800640
1c690     44 00 00 FF 
1c694     4C E5 05 F1 | 	add	objptr, ##35148
1c698     F2 FA 61 FC | 	wrlong	result1, objptr
1c69c     44 00 00 FF 
1c6a0     4C E5 85 F1 | 	sub	objptr, ##35148
1c6a4     F2 FA 01 F6 | 	mov	result1, objptr
1c6a8     00 68 04 FF 
1c6ac     00 FA 45 F5 | 	or	result1, ##147849216
1c6b0     44 00 00 FF 
1c6b4     50 E5 05 F1 | 	add	objptr, ##35152
1c6b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c6bc     44 00 00 FF 
1c6c0     50 E5 85 F1 | 	sub	objptr, ##35152
1c6c4                 | _init_commands_ret
1c6c4     2D 00 64 FD | 	ret
1c6c8                 | 
1c6c8                 | ' 
1c6c8                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1c6c8                 | ' 
1c6c8                 | ' sub init_audio
1c6c8                 | _init_audio
1c6c8     06 4A 05 F6 | 	mov	COUNT_, #6
1c6cc     A8 00 A0 FD | 	call	#pushregs_
1c6d0     00 C0 1F FF 
1c6d4     00 1E 06 F6 | 	mov	local01, ##1065353216
1c6d8                 | ' 
1c6d8                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c6d8     00 20 06 F6 | 	mov	local02, #0
1c6dc                 | LR__2280
1c6dc     10 23 02 F6 | 	mov	local03, local02
1c6e0     01 22 66 F0 | 	shl	local03, #1
1c6e4     58 7F 23 FF 
1c6e8     00 24 06 F6 | 	mov	local04, ##1191096320
1c6ec     10 13 52 F6 | 	abs	arg01, local02 wc
1c6f0     1F 26 C6 C9 |  if_b	decod	local05, #31
1c6f4     00 26 06 36 |  if_ae	mov	local05, #0
1c6f8     E4 68 B0 FD | 	call	#__system___float_fromuns
1c6fc     13 FB 61 F5 | 	xor	result1, local05
1c700     FD 12 02 F6 | 	mov	arg01, result1
1c704     87 24 20 FF 
1c708     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c70c     D4 6C B0 FD | 	call	#__system___float_mul
1c710     FD 12 02 F6 | 	mov	arg01, result1
1c714     00 00 22 FF 
1c718     00 14 06 F6 | 	mov	arg02, ##1140850688
1c71c     C8 6E B0 FD | 	call	#__system___float_div
1c720     FD 12 02 F6 | 	mov	arg01, result1
1c724     1C 76 B0 FD | 	call	#__system____builtin_sinf
1c728     FD 14 02 F6 | 	mov	arg02, result1
1c72c     12 13 02 F6 | 	mov	arg01, local04
1c730     B0 6C B0 FD | 	call	#__system___float_mul
1c734     FD 12 02 F6 | 	mov	arg01, result1
1c738     01 14 06 F6 | 	mov	arg02, #1
1c73c     6C 71 B0 FD | 	call	#__system___float_tointeger
1c740     FD 14 02 F6 | 	mov	arg02, result1
1c744     11 13 02 F6 | 	mov	arg01, local03
1c748     00 0D B0 FD | 	call	#_psdpoke
1c74c     01 20 06 F1 | 	add	local02, #1
1c750     02 00 00 FF 
1c754     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c758     80 FF 9F CD |  if_b	jmp	#LR__2280
1c75c                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1c75c     00 20 06 F6 | 	mov	local02, #0
1c760                 | LR__2281
1c760     10 15 02 F6 | 	mov	arg02, local02
1c764     01 14 66 F0 | 	shl	arg02, #1
1c768     0B 12 C6 F9 | 	decod	arg01, #11
1c76c     0A 13 02 F1 | 	add	arg01, arg02
1c770     10 25 02 F6 | 	mov	local04, local02
1c774     07 24 66 F0 | 	shl	local04, #7
1c778     10 25 82 F1 | 	sub	local04, local02
1c77c     C0 FF 7F FF 
1c780     00 15 06 F6 | 	mov	arg02, ##-32512
1c784     12 15 02 F1 | 	add	arg02, local04
1c788     C0 0C B0 FD | 	call	#_psdpoke
1c78c     09 24 C6 F9 | 	decod	local04, #9
1c790     10 25 02 F1 | 	add	local04, local02
1c794     01 24 66 F0 | 	shl	local04, #1
1c798     0B 12 C6 F9 | 	decod	arg01, #11
1c79c     12 13 02 F1 | 	add	arg01, local04
1c7a0     10 27 02 F6 | 	mov	local05, local02
1c7a4     07 26 66 F0 | 	shl	local05, #7
1c7a8     10 27 82 F1 | 	sub	local05, local02
1c7ac     3F 00 00 FF 
1c7b0     00 15 06 F6 | 	mov	arg02, ##32512
1c7b4     13 15 82 F1 | 	sub	arg02, local05
1c7b8     90 0C B0 FD | 	call	#_psdpoke
1c7bc     01 20 06 F1 | 	add	local02, #1
1c7c0     01 00 00 FF 
1c7c4     00 20 56 F2 | 	cmps	local02, ##512 wc
1c7c8     94 FF 9F CD |  if_b	jmp	#LR__2281
1c7cc                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c7cc     00 20 06 F6 | 	mov	local02, #0
1c7d0                 | LR__2282
1c7d0     10 27 02 F6 | 	mov	local05, local02
1c7d4     01 26 66 F0 | 	shl	local05, #1
1c7d8     0C 12 C6 F9 | 	decod	arg01, #12
1c7dc     13 13 02 F1 | 	add	arg01, local05
1c7e0     10 27 02 F6 | 	mov	local05, local02
1c7e4     06 26 66 F0 | 	shl	local05, #6
1c7e8     10 27 82 F1 | 	sub	local05, local02
1c7ec     C1 FF 7F FF 
1c7f0     00 14 06 F6 | 	mov	arg02, ##-32256
1c7f4     13 15 02 F1 | 	add	arg02, local05
1c7f8     50 0C B0 FD | 	call	#_psdpoke
1c7fc     01 20 06 F1 | 	add	local02, #1
1c800     02 00 00 FF 
1c804     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c808     C4 FF 9F CD |  if_b	jmp	#LR__2282
1c80c                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1c80c     00 20 06 F6 | 	mov	local02, #0
1c810                 | LR__2283
1c810     10 27 02 F6 | 	mov	local05, local02
1c814     01 26 66 F0 | 	shl	local05, #1
1c818     0C 00 00 FF 
1c81c     00 12 06 F6 | 	mov	arg01, ##6144
1c820     13 13 02 F1 | 	add	arg01, local05
1c824     C0 FF 7F FF 
1c828     A8 14 06 F6 | 	mov	arg02, ##-32600
1c82c     1C 0C B0 FD | 	call	#_psdpoke
1c830     01 20 06 F1 | 	add	local02, #1
1c834     80 20 56 F2 | 	cmps	local02, #128 wc
1c838     D4 FF 9F CD |  if_b	jmp	#LR__2283
1c83c     80 20 06 F6 | 	mov	local02, #128
1c840                 | LR__2284
1c840     10 27 02 F6 | 	mov	local05, local02
1c844     01 26 66 F0 | 	shl	local05, #1
1c848     0C 00 00 FF 
1c84c     00 12 06 F6 | 	mov	arg01, ##6144
1c850     13 13 02 F1 | 	add	arg01, local05
1c854     3F 00 00 FF 
1c858     58 15 06 F6 | 	mov	arg02, ##32600
1c85c     EC 0B B0 FD | 	call	#_psdpoke
1c860     01 20 06 F1 | 	add	local02, #1
1c864     02 00 00 FF 
1c868     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c86c     D0 FF 9F CD |  if_b	jmp	#LR__2284
1c870                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1c870     00 20 06 F6 | 	mov	local02, #0
1c874                 | LR__2285
1c874     10 27 02 F6 | 	mov	local05, local02
1c878     01 26 66 F0 | 	shl	local05, #1
1c87c     0D 12 C6 F9 | 	decod	arg01, #13
1c880     13 13 02 F1 | 	add	arg01, local05
1c884     C0 FF 7F FF 
1c888     A8 14 06 F6 | 	mov	arg02, ##-32600
1c88c     BC 0B B0 FD | 	call	#_psdpoke
1c890     01 20 06 F1 | 	add	local02, #1
1c894     01 00 00 FF 
1c898     00 20 56 F2 | 	cmps	local02, ##512 wc
1c89c     D4 FF 9F CD |  if_b	jmp	#LR__2285
1c8a0     09 20 C6 F9 | 	decod	local02, #9
1c8a4                 | LR__2286
1c8a4     10 27 02 F6 | 	mov	local05, local02
1c8a8     01 26 66 F0 | 	shl	local05, #1
1c8ac     0D 12 C6 F9 | 	decod	arg01, #13
1c8b0     13 13 02 F1 | 	add	arg01, local05
1c8b4     3F 00 00 FF 
1c8b8     58 15 06 F6 | 	mov	arg02, ##32600
1c8bc     8C 0B B0 FD | 	call	#_psdpoke
1c8c0     01 20 06 F1 | 	add	local02, #1
1c8c4     02 00 00 FF 
1c8c8     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c8cc     D4 FF 9F CD |  if_b	jmp	#LR__2286
1c8d0                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1c8d0     00 20 06 F6 | 	mov	local02, #0
1c8d4                 | LR__2287
1c8d4     10 27 02 F6 | 	mov	local05, local02
1c8d8     01 26 66 F0 | 	shl	local05, #1
1c8dc     14 00 00 FF 
1c8e0     00 12 06 F6 | 	mov	arg01, ##10240
1c8e4     13 13 02 F1 | 	add	arg01, local05
1c8e8     C0 FF 7F FF 
1c8ec     A8 14 06 F6 | 	mov	arg02, ##-32600
1c8f0     58 0B B0 FD | 	call	#_psdpoke
1c8f4     01 20 06 F1 | 	add	local02, #1
1c8f8     00 21 56 F2 | 	cmps	local02, #256 wc
1c8fc     D4 FF 9F CD |  if_b	jmp	#LR__2287
1c900     00 21 06 F6 | 	mov	local02, #256
1c904                 | LR__2288
1c904     10 27 02 F6 | 	mov	local05, local02
1c908     01 26 66 F0 | 	shl	local05, #1
1c90c     14 00 00 FF 
1c910     00 12 06 F6 | 	mov	arg01, ##10240
1c914     13 13 02 F1 | 	add	arg01, local05
1c918     3F 00 00 FF 
1c91c     58 15 06 F6 | 	mov	arg02, ##32600
1c920     28 0B B0 FD | 	call	#_psdpoke
1c924     01 20 06 F1 | 	add	local02, #1
1c928     02 00 00 FF 
1c92c     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c930     D0 FF 9F CD |  if_b	jmp	#LR__2288
1c934                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1c934     18 00 00 FF 
1c938     00 20 06 F6 | 	mov	local02, ##12288
1c93c                 | LR__2289
1c93c     10 13 02 F6 | 	mov	arg01, local02
1c940     00 14 06 F6 | 	mov	arg02, #0
1c944     BC 0A B0 FD | 	call	#_pslpoke
1c948     04 20 06 F1 | 	add	local02, #4
1c94c     77 00 00 FF 
1c950     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1c954     E4 FF 9F CD |  if_b	jmp	#LR__2289
1c958                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c958     00 20 06 F6 | 	mov	local02, #0
1c95c                 | LR__2290
1c95c     10 27 02 F6 | 	mov	local05, local02
1c960     01 26 66 F0 | 	shl	local05, #1
1c964     78 00 00 FF 
1c968     00 22 06 F6 | 	mov	local03, ##61440
1c96c     13 23 02 F1 | 	add	local03, local05
1c970     12 00 00 FF 
1c974     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1c978     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1c97c     12 00 00 FF 
1c980     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1c984     10 12 06 F1 | 	add	arg01, #16
1c988     10 15 02 F6 | 	mov	arg02, local02
1c98c     01 14 66 F0 | 	shl	arg02, #1
1c990     0A 13 02 F1 | 	add	arg01, arg02
1c994     09 15 E2 FA | 	rdword	arg02, arg01
1c998     11 13 02 F6 | 	mov	arg01, local03
1c99c     AC 0A B0 FD | 	call	#_psdpoke
1c9a0     01 20 06 F1 | 	add	local02, #1
1c9a4     02 00 00 FF 
1c9a8     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c9ac     AC FF 9F CD |  if_b	jmp	#LR__2290
1c9b0                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1c9b0     00 20 06 F6 | 	mov	local02, #0
1c9b4                 | LR__2291
1c9b4     10 27 02 F6 | 	mov	local05, local02
1c9b8     01 26 66 F0 | 	shl	local05, #1
1c9bc     7C 00 00 FF 
1c9c0     00 22 06 F6 | 	mov	local03, ##63488
1c9c4     13 23 02 F1 | 	add	local03, local05
1c9c8     0E 00 00 FF 
1c9cc     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1c9d0     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1c9d4     0E 00 00 FF 
1c9d8     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1c9dc     10 12 06 F1 | 	add	arg01, #16
1c9e0     10 15 02 F6 | 	mov	arg02, local02
1c9e4     01 14 66 F0 | 	shl	arg02, #1
1c9e8     0A 13 02 F1 | 	add	arg01, arg02
1c9ec     09 15 E2 FA | 	rdword	arg02, arg01
1c9f0     11 13 02 F6 | 	mov	arg01, local03
1c9f4     54 0A B0 FD | 	call	#_psdpoke
1c9f8     01 20 06 F1 | 	add	local02, #1
1c9fc     02 00 00 FF 
1ca00     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ca04     AC FF 9F CD |  if_b	jmp	#LR__2291
1ca08                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1ca08     00 20 06 F6 | 	mov	local02, #0
1ca0c     0C 00 00 FF 
1ca10     D8 E4 05 F1 | 	add	objptr, ##6360
1ca14     97 18 48 FB | 	callpa	#(@LR__2293-@LR__2292)>>2,fcache_load_ptr_
1ca18                 | LR__2292
1ca18     10 27 02 F6 | 	mov	local05, local02
1ca1c     01 26 66 F0 | 	shl	local05, #1
1ca20     F2 26 02 F1 | 	add	local05, objptr
1ca24     10 23 02 F6 | 	mov	local03, local02
1ca28     08 22 66 F0 | 	shl	local03, #8
1ca2c     7F 00 00 FF 
1ca30     00 29 06 F6 | 	mov	local06, ##65280
1ca34     11 29 82 F1 | 	sub	local06, local03
1ca38     13 29 52 FC | 	wrword	local06, local05
1ca3c     01 20 06 F1 | 	add	local02, #1
1ca40     00 21 56 F2 | 	cmps	local02, #256 wc
1ca44     D0 FF 9F CD |  if_b	jmp	#LR__2292
1ca48                 | LR__2293
1ca48     0C 00 00 FF 
1ca4c     D8 E4 85 F1 | 	sub	objptr, ##6360
1ca50                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1ca50     00 20 06 F6 | 	mov	local02, #0
1ca54                 | LR__2294
1ca54     10 27 02 F6 | 	mov	local05, local02
1ca58     01 26 66 F0 | 	shl	local05, #1
1ca5c     0D 00 00 FF 
1ca60     D8 E4 05 F1 | 	add	objptr, ##6872
1ca64     F2 26 02 F1 | 	add	local05, objptr
1ca68     80 BF 23 FF 
1ca6c     00 12 06 F6 | 	mov	arg01, ##1199505408
1ca70     0F 15 02 F6 | 	mov	arg02, local01
1ca74     0D 00 00 FF 
1ca78     D8 E4 85 F1 | 	sub	objptr, ##6872
1ca7c     64 69 B0 FD | 	call	#__system___float_mul
1ca80     FD 12 02 F6 | 	mov	arg01, result1
1ca84     01 14 06 F6 | 	mov	arg02, #1
1ca88     20 6E B0 FD | 	call	#__system___float_tointeger
1ca8c     13 FB 51 FC | 	wrword	result1, local05
1ca90     0F 13 02 F6 | 	mov	arg01, local01
1ca94     CC BC 1F FF 
1ca98     9A 15 06 F6 | 	mov	arg02, ##1064933786
1ca9c     44 69 B0 FD | 	call	#__system___float_mul
1caa0     FD 1E 02 F6 | 	mov	local01, result1
1caa4     01 20 06 F1 | 	add	local02, #1
1caa8     00 21 56 F2 | 	cmps	local02, #256 wc
1caac     A4 FF 9F CD |  if_b	jmp	#LR__2294
1cab0     0E 00 00 FF 
1cab4     D6 E4 05 F1 | 	add	objptr, ##7382
1cab8     F2 00 58 FC | 	wrword	#0, objptr
1cabc                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1cabc     00 20 06 F6 | 	mov	local02, #0
1cac0     02 E4 05 F1 | 	add	objptr, #2
1cac4     97 10 48 FB | 	callpa	#(@LR__2296-@LR__2295)>>2,fcache_load_ptr_
1cac8                 | LR__2295
1cac8     10 27 02 F6 | 	mov	local05, local02
1cacc     01 26 66 F0 | 	shl	local05, #1
1cad0     F2 26 02 F1 | 	add	local05, objptr
1cad4     7F 00 80 FF 
1cad8     13 01 5A FC | 	wrword	##65280, local05
1cadc     01 20 06 F1 | 	add	local02, #1
1cae0     FF 20 56 F2 | 	cmps	local02, #255 wc
1cae4     E0 FF 9F CD |  if_b	jmp	#LR__2295
1cae8                 | LR__2296
1cae8     FE E5 05 F1 | 	add	objptr, #510
1caec     F2 00 58 FC | 	wrword	#0, objptr
1caf0                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1caf0     00 20 06 F6 | 	mov	local02, #0
1caf4     02 E4 05 F1 | 	add	objptr, #2
1caf8     97 52 48 FB | 	callpa	#(@LR__2301-@LR__2297)>>2,fcache_load_ptr_
1cafc                 | LR__2297
1cafc     10 27 02 F6 | 	mov	local05, local02
1cb00     01 26 66 F0 | 	shl	local05, #1
1cb04     F2 26 02 F1 | 	add	local05, objptr
1cb08     10 29 02 F6 | 	mov	local06, local02
1cb0c     0C 28 66 F0 | 	shl	local06, #12
1cb10     13 29 52 FC | 	wrword	local06, local05
1cb14     01 20 06 F1 | 	add	local02, #1
1cb18     10 20 56 F2 | 	cmps	local02, #16 wc
1cb1c     DC FF 9F CD |  if_b	jmp	#LR__2297
1cb20                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cb20     10 20 06 F6 | 	mov	local02, #16
1cb24                 | LR__2298
1cb24     10 27 02 F6 | 	mov	local05, local02
1cb28     01 26 66 F0 | 	shl	local05, #1
1cb2c     F2 26 02 F1 | 	add	local05, objptr
1cb30     7F 00 80 FF 
1cb34     13 01 5A FC | 	wrword	##65280, local05
1cb38     01 20 06 F1 | 	add	local02, #1
1cb3c     F0 20 16 F2 | 	cmp	local02, #240 wc
1cb40     E0 FF 9F CD |  if_b	jmp	#LR__2298
1cb44                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1cb44     F0 20 06 F6 | 	mov	local02, #240
1cb48                 | LR__2299
1cb48     10 27 02 F6 | 	mov	local05, local02
1cb4c     01 26 66 F0 | 	shl	local05, #1
1cb50     F2 26 02 F1 | 	add	local05, objptr
1cb54     FF 22 06 F6 | 	mov	local03, #255
1cb58     10 23 82 F1 | 	sub	local03, local02
1cb5c     0C 22 66 F0 | 	shl	local03, #12
1cb60     13 23 52 FC | 	wrword	local03, local05
1cb64     01 20 06 F1 | 	add	local02, #1
1cb68     00 21 16 F2 | 	cmp	local02, #256 wc
1cb6c     D8 FF 9F CD |  if_b	jmp	#LR__2299
1cb70                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1cb70     00 20 06 F6 | 	mov	local02, #0
1cb74     01 00 00 FF 
1cb78     00 E4 05 F1 | 	add	objptr, ##512
1cb7c                 | LR__2300
1cb7c     10 27 02 F6 | 	mov	local05, local02
1cb80     01 26 66 F0 | 	shl	local05, #1
1cb84     F2 26 02 F1 | 	add	local05, objptr
1cb88     10 29 02 F6 | 	mov	local06, local02
1cb8c     08 28 66 F0 | 	shl	local06, #8
1cb90     13 29 52 FC | 	wrword	local06, local05
1cb94     01 20 06 F1 | 	add	local02, #1
1cb98     00 21 56 F2 | 	cmps	local02, #256 wc
1cb9c     DC FF 9F CD |  if_b	jmp	#LR__2300
1cba0                 | LR__2301
1cba0     FE E5 05 F1 | 	add	objptr, #510
1cba4     F2 00 58 FC | 	wrword	#0, objptr
1cba8                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1cba8     00 20 06 F6 | 	mov	local02, #0
1cbac     02 E4 05 F1 | 	add	objptr, #2
1cbb0     97 6A 48 FB | 	callpa	#(@LR__2306-@LR__2302)>>2,fcache_load_ptr_
1cbb4                 | LR__2302
1cbb4     10 27 02 F6 | 	mov	local05, local02
1cbb8     01 26 66 F0 | 	shl	local05, #1
1cbbc     F2 26 02 F1 | 	add	local05, objptr
1cbc0     10 29 02 F6 | 	mov	local06, local02
1cbc4     04 28 66 F0 | 	shl	local06, #4
1cbc8     10 29 02 F1 | 	add	local06, local02
1cbcc     04 28 66 F0 | 	shl	local06, #4
1cbd0     13 29 52 FC | 	wrword	local06, local05
1cbd4     01 20 06 F1 | 	add	local02, #1
1cbd8     F0 20 56 F2 | 	cmps	local02, #240 wc
1cbdc     D4 FF 9F CD |  if_b	jmp	#LR__2302
1cbe0     F0 20 06 F6 | 	mov	local02, #240
1cbe4                 | LR__2303
1cbe4     10 27 02 F6 | 	mov	local05, local02
1cbe8     01 26 66 F0 | 	shl	local05, #1
1cbec     F2 26 02 F1 | 	add	local05, objptr
1cbf0     FF 22 06 F6 | 	mov	local03, #255
1cbf4     10 23 82 F1 | 	sub	local03, local02
1cbf8     0C 22 66 F0 | 	shl	local03, #12
1cbfc     13 23 52 FC | 	wrword	local03, local05
1cc00     01 20 06 F1 | 	add	local02, #1
1cc04     00 21 16 F2 | 	cmp	local02, #256 wc
1cc08     D8 FF 9F CD |  if_b	jmp	#LR__2303
1cc0c                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1cc0c     00 20 06 F6 | 	mov	local02, #0
1cc10     01 00 00 FF 
1cc14     00 E4 05 F1 | 	add	objptr, ##512
1cc18                 | LR__2304
1cc18     10 27 02 F6 | 	mov	local05, local02
1cc1c     01 26 66 F0 | 	shl	local05, #1
1cc20     F2 26 02 F1 | 	add	local05, objptr
1cc24     10 29 02 F6 | 	mov	local06, local02
1cc28     09 28 66 F0 | 	shl	local06, #9
1cc2c     13 29 52 FC | 	wrword	local06, local05
1cc30     FF 26 06 F6 | 	mov	local05, #255
1cc34     10 27 82 F1 | 	sub	local05, local02
1cc38     01 26 66 F0 | 	shl	local05, #1
1cc3c     F2 26 02 F1 | 	add	local05, objptr
1cc40     10 29 02 F6 | 	mov	local06, local02
1cc44     09 28 66 F0 | 	shl	local06, #9
1cc48     13 29 52 FC | 	wrword	local06, local05
1cc4c     01 20 06 F1 | 	add	local02, #1
1cc50     80 20 56 F2 | 	cmps	local02, #128 wc
1cc54     C0 FF 9F CD |  if_b	jmp	#LR__2304
1cc58                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1cc58     00 20 06 F6 | 	mov	local02, #0
1cc5c     01 00 00 FF 
1cc60     00 E4 05 F1 | 	add	objptr, ##512
1cc64                 | LR__2305
1cc64     10 27 02 F6 | 	mov	local05, local02
1cc68     01 26 66 F0 | 	shl	local05, #1
1cc6c     F2 26 02 F1 | 	add	local05, objptr
1cc70     10 29 02 F6 | 	mov	local06, local02
1cc74     0D 28 66 F0 | 	shl	local06, #13
1cc78     13 29 52 FC | 	wrword	local06, local05
1cc7c     01 20 06 F1 | 	add	local02, #1
1cc80     08 20 56 F2 | 	cmps	local02, #8 wc
1cc84     DC FF 9F CD |  if_b	jmp	#LR__2305
1cc88                 | LR__2306
1cc88                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1cc88     08 20 06 F6 | 	mov	local02, #8
1cc8c     97 42 48 FB | 	callpa	#(@LR__2310-@LR__2307)>>2,fcache_load_ptr_
1cc90                 | LR__2307
1cc90     10 27 02 F6 | 	mov	local05, local02
1cc94     01 26 66 F0 | 	shl	local05, #1
1cc98     F2 26 02 F1 | 	add	local05, objptr
1cc9c     10 1F 02 F6 | 	mov	local01, local02
1cca0     08 1E 86 F1 | 	sub	local01, #8
1cca4     0B 1E 66 F0 | 	shl	local01, #11
1cca8     7F 00 00 FF 
1ccac     00 29 06 F6 | 	mov	local06, ##65280
1ccb0     0F 29 82 F1 | 	sub	local06, local01
1ccb4     13 29 52 FC | 	wrword	local06, local05
1ccb8     01 20 06 F1 | 	add	local02, #1
1ccbc     18 20 16 F2 | 	cmp	local02, #24 wc
1ccc0     CC FF 9F CD |  if_b	jmp	#LR__2307
1ccc4                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1ccc4     18 20 06 F6 | 	mov	local02, #24
1ccc8                 | LR__2308
1ccc8     10 27 02 F6 | 	mov	local05, local02
1cccc     01 26 66 F0 | 	shl	local05, #1
1ccd0     F2 26 02 F1 | 	add	local05, objptr
1ccd4     40 00 80 FF 
1ccd8     13 01 58 FC | 	wrword	##32768, local05
1ccdc     01 20 06 F1 | 	add	local02, #1
1cce0     81 20 16 F2 | 	cmp	local02, #129 wc
1cce4     E0 FF 9F CD |  if_b	jmp	#LR__2308
1cce8                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1cce8     81 20 06 F6 | 	mov	local02, #129
1ccec                 | LR__2309
1ccec     10 27 02 F6 | 	mov	local05, local02
1ccf0     01 26 66 F0 | 	shl	local05, #1
1ccf4     F2 26 02 F1 | 	add	local05, objptr
1ccf8     FF 22 06 F6 | 	mov	local03, #255
1ccfc     10 23 82 F1 | 	sub	local03, local02
1cd00     08 22 66 F0 | 	shl	local03, #8
1cd04     13 23 52 FC | 	wrword	local03, local05
1cd08     01 20 06 F1 | 	add	local02, #1
1cd0c     00 21 16 F2 | 	cmp	local02, #256 wc
1cd10     D8 FF 9F CD |  if_b	jmp	#LR__2309
1cd14                 | LR__2310
1cd14     3E 00 00 FF 
1cd18     FE E4 05 F1 | 	add	objptr, ##31998
1cd1c     F2 00 59 FC | 	wrword	#128, objptr
1cd20     51 00 00 FF 
1cd24     D6 E5 85 F1 | 	sub	objptr, ##41942
1cd28                 | ' for i=0 to 7
1cd28     00 20 06 F6 | 	mov	local02, #0
1cd2c     97 8E 48 FB | 	callpa	#(@LR__2312-@LR__2311)>>2,fcache_load_ptr_
1cd30                 | LR__2311
1cd30     10 27 02 F6 | 	mov	local05, local02
1cd34     01 26 66 F0 | 	shl	local05, #1
1cd38     10 27 02 F1 | 	add	local05, local02
1cd3c     03 26 66 F0 | 	shl	local05, #3
1cd40     14 00 00 FF 
1cd44     38 E5 05 F1 | 	add	objptr, ##10552
1cd48     F2 26 02 F1 | 	add	local05, objptr
1cd4c     00 EE A1 FF 
1cd50     13 01 68 FC | 	wrlong	##1138491392, local05
1cd54     10 27 02 F6 | 	mov	local05, local02
1cd58     01 26 66 F0 | 	shl	local05, #1
1cd5c     10 27 02 F1 | 	add	local05, local02
1cd60     03 26 66 F0 | 	shl	local05, #3
1cd64     F2 26 02 F1 | 	add	local05, objptr
1cd68     04 26 06 F1 | 	add	local05, #4
1cd6c     13 21 42 FC | 	wrbyte	local02, local05
1cd70     10 27 02 F6 | 	mov	local05, local02
1cd74     01 26 66 F0 | 	shl	local05, #1
1cd78     10 27 02 F1 | 	add	local05, local02
1cd7c     03 26 66 F0 | 	shl	local05, #3
1cd80     F2 26 02 F1 | 	add	local05, objptr
1cd84     05 26 06 F1 | 	add	local05, #5
1cd88     13 21 42 FC | 	wrbyte	local02, local05
1cd8c     10 27 02 F6 | 	mov	local05, local02
1cd90     01 26 66 F0 | 	shl	local05, #1
1cd94     10 27 02 F1 | 	add	local05, local02
1cd98     03 26 66 F0 | 	shl	local05, #3
1cd9c     F2 26 02 F1 | 	add	local05, objptr
1cda0     06 26 06 F1 | 	add	local05, #6
1cda4     13 01 58 FC | 	wrword	#0, local05
1cda8     10 27 02 F6 | 	mov	local05, local02
1cdac     01 26 66 F0 | 	shl	local05, #1
1cdb0     10 27 02 F1 | 	add	local05, local02
1cdb4     03 26 66 F0 | 	shl	local05, #3
1cdb8     F2 26 02 F1 | 	add	local05, objptr
1cdbc     08 26 06 F1 | 	add	local05, #8
1cdc0     00 C0 9F FF 
1cdc4     13 01 68 FC | 	wrlong	##1065353216, local05
1cdc8     10 27 02 F6 | 	mov	local05, local02
1cdcc     01 26 66 F0 | 	shl	local05, #1
1cdd0     10 27 02 F1 | 	add	local05, local02
1cdd4     03 26 66 F0 | 	shl	local05, #3
1cdd8     F2 26 02 F1 | 	add	local05, objptr
1cddc     0C 26 06 F1 | 	add	local05, #12
1cde0     00 40 A0 FF 
1cde4     13 01 68 FC | 	wrlong	##1082130432, local05
1cde8     10 27 02 F6 | 	mov	local05, local02
1cdec     01 26 66 F0 | 	shl	local05, #1
1cdf0     10 27 02 F1 | 	add	local05, local02
1cdf4     03 26 66 F0 | 	shl	local05, #3
1cdf8     F2 26 02 F1 | 	add	local05, objptr
1cdfc     10 26 06 F1 | 	add	local05, #16
1ce00     13 01 68 FC | 	wrlong	#0, local05
1ce04     10 27 02 F6 | 	mov	local05, local02
1ce08     01 26 66 F0 | 	shl	local05, #1
1ce0c     10 27 02 F1 | 	add	local05, local02
1ce10     03 26 66 F0 | 	shl	local05, #3
1ce14     F2 26 02 F1 | 	add	local05, objptr
1ce18     14 26 06 F1 | 	add	local05, #20
1ce1c     13 FF 59 FC | 	wrword	#255, local05
1ce20     10 27 02 F6 | 	mov	local05, local02
1ce24     01 26 66 F0 | 	shl	local05, #1
1ce28     3D 00 00 FF 
1ce2c     90 E4 05 F1 | 	add	objptr, ##31376
1ce30     F2 26 02 F1 | 	add	local05, objptr
1ce34     13 FF 59 FC | 	wrword	#255, local05
1ce38     01 20 06 F1 | 	add	local02, #1
1ce3c     08 20 56 F2 | 	cmps	local02, #8 wc
1ce40     51 00 00 FF 
1ce44     C8 E5 85 F1 | 	sub	objptr, ##41928
1ce48     E4 FE 9F CD |  if_b	jmp	#LR__2311
1ce4c                 | LR__2312
1ce4c     00 6E 20 FF 
1ce50     00 28 06 F6 | 	mov	local06, ##1088159744
1ce54                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1ce54     03 26 06 F6 | 	mov	local05, #3
1ce58                 | LR__2313
1ce58     14 13 02 F6 | 	mov	arg01, local06
1ce5c     CE C3 1F FF 
1ce60     7D 14 06 F6 | 	mov	arg02, ##1065852029
1ce64     7C 65 B0 FD | 	call	#__system___float_mul
1ce68     FD 28 02 F6 | 	mov	local06, result1
1ce6c     FA 27 6E FB | 	djnz	local05, #LR__2313
1ce70     00 20 06 F6 | 	mov	local02, #0
1ce74                 | LR__2314
1ce74     10 25 02 F6 | 	mov	local04, local02
1ce78     02 24 66 F0 | 	shl	local04, #2
1ce7c     14 00 00 FF 
1ce80     D8 E4 05 F1 | 	add	objptr, ##10456
1ce84     F2 24 02 F1 | 	add	local04, objptr
1ce88     12 29 62 FC | 	wrlong	local06, local04
1ce8c     14 13 02 F6 | 	mov	arg01, local06
1ce90     CE C3 1F FF 
1ce94     7D 14 06 F6 | 	mov	arg02, ##1065852029
1ce98     14 00 00 FF 
1ce9c     D8 E4 85 F1 | 	sub	objptr, ##10456
1cea0     40 65 B0 FD | 	call	#__system___float_mul
1cea4     FD 28 02 F6 | 	mov	local06, result1
1cea8     01 20 06 F1 | 	add	local02, #1
1ceac     0C 20 56 F2 | 	cmps	local02, #12 wc
1ceb0     C0 FF 9F CD |  if_b	jmp	#LR__2314
1ceb4     14 00 00 FF 
1ceb8     08 E5 05 F1 | 	add	objptr, ##10504
1cebc     F2 50 6B FC | 	wrlong	#424, objptr
1cec0     04 E4 05 F1 | 	add	objptr, #4
1cec4     F2 20 6B FC | 	wrlong	#400, objptr
1cec8     04 E4 05 F1 | 	add	objptr, #4
1cecc     F2 F2 6A FC | 	wrlong	#377, objptr
1ced0     04 E4 05 F1 | 	add	objptr, #4
1ced4     F2 C8 6A FC | 	wrlong	#356, objptr
1ced8     04 E4 05 F1 | 	add	objptr, #4
1cedc     F2 A0 6A FC | 	wrlong	#336, objptr
1cee0     04 E4 05 F1 | 	add	objptr, #4
1cee4     F2 7A 6A FC | 	wrlong	#317, objptr
1cee8     04 E4 05 F1 | 	add	objptr, #4
1ceec     F2 58 6A FC | 	wrlong	#300, objptr
1cef0     04 E4 05 F1 | 	add	objptr, #4
1cef4     F2 36 6A FC | 	wrlong	#283, objptr
1cef8     04 E4 05 F1 | 	add	objptr, #4
1cefc     F2 16 6A FC | 	wrlong	#267, objptr
1cf00     04 E4 05 F1 | 	add	objptr, #4
1cf04     F2 F8 69 FC | 	wrlong	#252, objptr
1cf08     04 E4 05 F1 | 	add	objptr, #4
1cf0c     F2 DC 69 FC | 	wrlong	#238, objptr
1cf10     04 E4 05 F1 | 	add	objptr, #4
1cf14     F2 C0 69 FC | 	wrlong	#224, objptr
1cf18     3D 00 00 FF 
1cf1c     A2 E4 05 F1 | 	add	objptr, ##31394
1cf20     F2 00 59 FC | 	wrword	#128, objptr
1cf24     02 E4 85 F1 | 	sub	objptr, #2
1cf28     F2 00 59 FC | 	wrword	#128, objptr
1cf2c     51 00 00 FF 
1cf30     D4 E5 85 F1 | 	sub	objptr, ##41940
1cf34     A7 F0 03 F6 | 	mov	ptra, fp
1cf38     B2 00 A0 FD | 	call	#popregs_
1cf3c                 | _init_audio_ret
1cf3c     2D 00 64 FD | 	ret
1cf40                 | 
1cf40                 | ' 
1cf40                 | ' '------------------- Error messages
1cf40                 | ' 
1cf40                 | ' sub init_error_strings
1cf40                 | _init_error_strings
1cf40     84 01 00 FF 
1cf44     F3 01 06 F6 | 	mov	_var01, ##@LR__5494
1cf48     45 00 00 FF 
1cf4c     7C E4 05 F1 | 	add	objptr, ##35452
1cf50     F2 00 62 FC | 	wrlong	_var01, objptr
1cf54     84 01 00 FF 
1cf58     F4 01 06 F6 | 	mov	_var01, ##@LR__5495
1cf5c     04 E4 05 F1 | 	add	objptr, #4
1cf60     F2 00 62 FC | 	wrlong	_var01, objptr
1cf64     85 01 00 FF 
1cf68     19 00 06 F6 | 	mov	_var01, ##@LR__5496
1cf6c     04 E4 05 F1 | 	add	objptr, #4
1cf70     F2 00 62 FC | 	wrlong	_var01, objptr
1cf74     85 01 00 FF 
1cf78     3A 00 06 F6 | 	mov	_var01, ##@LR__5497
1cf7c     04 E4 05 F1 | 	add	objptr, #4
1cf80     F2 00 62 FC | 	wrlong	_var01, objptr
1cf84     85 01 00 FF 
1cf88     54 00 06 F6 | 	mov	_var01, ##@LR__5498
1cf8c     04 E4 05 F1 | 	add	objptr, #4
1cf90     F2 00 62 FC | 	wrlong	_var01, objptr
1cf94     85 01 00 FF 
1cf98     70 00 06 F6 | 	mov	_var01, ##@LR__5499
1cf9c     04 E4 05 F1 | 	add	objptr, #4
1cfa0     F2 00 62 FC | 	wrlong	_var01, objptr
1cfa4     85 01 00 FF 
1cfa8     92 00 06 F6 | 	mov	_var01, ##@LR__5500
1cfac     04 E4 05 F1 | 	add	objptr, #4
1cfb0     F2 00 62 FC | 	wrlong	_var01, objptr
1cfb4     85 01 00 FF 
1cfb8     C0 00 06 F6 | 	mov	_var01, ##@LR__5501
1cfbc     04 E4 05 F1 | 	add	objptr, #4
1cfc0     F2 00 62 FC | 	wrlong	_var01, objptr
1cfc4     85 01 00 FF 
1cfc8     EB 00 06 F6 | 	mov	_var01, ##@LR__5502
1cfcc     04 E4 05 F1 | 	add	objptr, #4
1cfd0     F2 00 62 FC | 	wrlong	_var01, objptr
1cfd4     85 01 00 FF 
1cfd8     04 01 06 F6 | 	mov	_var01, ##@LR__5503
1cfdc     04 E4 05 F1 | 	add	objptr, #4
1cfe0     F2 00 62 FC | 	wrlong	_var01, objptr
1cfe4     85 01 00 FF 
1cfe8     25 01 06 F6 | 	mov	_var01, ##@LR__5504
1cfec     04 E4 05 F1 | 	add	objptr, #4
1cff0     F2 00 62 FC | 	wrlong	_var01, objptr
1cff4     85 01 00 FF 
1cff8     3C 01 06 F6 | 	mov	_var01, ##@LR__5505
1cffc     04 E4 05 F1 | 	add	objptr, #4
1d000     F2 00 62 FC | 	wrlong	_var01, objptr
1d004     85 01 00 FF 
1d008     5A 01 06 F6 | 	mov	_var01, ##@LR__5506
1d00c     04 E4 05 F1 | 	add	objptr, #4
1d010     F2 00 62 FC | 	wrlong	_var01, objptr
1d014     85 01 00 FF 
1d018     7E 01 06 F6 | 	mov	_var01, ##@LR__5507
1d01c     04 E4 05 F1 | 	add	objptr, #4
1d020     F2 00 62 FC | 	wrlong	_var01, objptr
1d024     85 01 00 FF 
1d028     A5 01 06 F6 | 	mov	_var01, ##@LR__5508
1d02c     04 E4 05 F1 | 	add	objptr, #4
1d030     F2 00 62 FC | 	wrlong	_var01, objptr
1d034     85 01 00 FF 
1d038     C1 01 06 F6 | 	mov	_var01, ##@LR__5509
1d03c     04 E4 05 F1 | 	add	objptr, #4
1d040     F2 00 62 FC | 	wrlong	_var01, objptr
1d044     85 01 00 FF 
1d048     D2 01 06 F6 | 	mov	_var01, ##@LR__5510
1d04c     04 E4 05 F1 | 	add	objptr, #4
1d050     F2 00 62 FC | 	wrlong	_var01, objptr
1d054     85 01 00 FF 
1d058     E2 01 06 F6 | 	mov	_var01, ##@LR__5511
1d05c     04 E4 05 F1 | 	add	objptr, #4
1d060     F2 00 62 FC | 	wrlong	_var01, objptr
1d064     85 01 00 FF 
1d068     FD 01 06 F6 | 	mov	_var01, ##@LR__5512
1d06c     04 E4 05 F1 | 	add	objptr, #4
1d070     F2 00 62 FC | 	wrlong	_var01, objptr
1d074     86 01 00 FF 
1d078     0F 00 06 F6 | 	mov	_var01, ##@LR__5513
1d07c     04 E4 05 F1 | 	add	objptr, #4
1d080     F2 00 62 FC | 	wrlong	_var01, objptr
1d084     86 01 00 FF 
1d088     27 00 06 F6 | 	mov	_var01, ##@LR__5514
1d08c     04 E4 05 F1 | 	add	objptr, #4
1d090     F2 00 62 FC | 	wrlong	_var01, objptr
1d094     86 01 00 FF 
1d098     3B 00 06 F6 | 	mov	_var01, ##@LR__5515
1d09c     04 E4 05 F1 | 	add	objptr, #4
1d0a0     F2 00 62 FC | 	wrlong	_var01, objptr
1d0a4     86 01 00 FF 
1d0a8     4B 00 06 F6 | 	mov	_var01, ##@LR__5516
1d0ac     04 E4 05 F1 | 	add	objptr, #4
1d0b0     F2 00 62 FC | 	wrlong	_var01, objptr
1d0b4     86 01 00 FF 
1d0b8     68 00 06 F6 | 	mov	_var01, ##@LR__5517
1d0bc     04 E4 05 F1 | 	add	objptr, #4
1d0c0     F2 00 62 FC | 	wrlong	_var01, objptr
1d0c4     86 01 00 FF 
1d0c8     79 00 06 F6 | 	mov	_var01, ##@LR__5518
1d0cc     04 E4 05 F1 | 	add	objptr, #4
1d0d0     F2 00 62 FC | 	wrlong	_var01, objptr
1d0d4     86 01 00 FF 
1d0d8     8A 00 06 F6 | 	mov	_var01, ##@LR__5519
1d0dc     04 E4 05 F1 | 	add	objptr, #4
1d0e0     F2 00 62 FC | 	wrlong	_var01, objptr
1d0e4     86 01 00 FF 
1d0e8     BE 00 06 F6 | 	mov	_var01, ##@LR__5520
1d0ec     04 E4 05 F1 | 	add	objptr, #4
1d0f0     F2 00 62 FC | 	wrlong	_var01, objptr
1d0f4     86 01 00 FF 
1d0f8     DA 00 06 F6 | 	mov	_var01, ##@LR__5521
1d0fc     04 E4 05 F1 | 	add	objptr, #4
1d100     F2 00 62 FC | 	wrlong	_var01, objptr
1d104     86 01 00 FF 
1d108     F0 00 06 F6 | 	mov	_var01, ##@LR__5522
1d10c     04 E4 05 F1 | 	add	objptr, #4
1d110     F2 00 62 FC | 	wrlong	_var01, objptr
1d114     86 01 00 FF 
1d118     FD 00 06 F6 | 	mov	_var01, ##@LR__5523
1d11c     04 E4 05 F1 | 	add	objptr, #4
1d120     F2 00 62 FC | 	wrlong	_var01, objptr
1d124     86 01 00 FF 
1d128     0F 01 06 F6 | 	mov	_var01, ##@LR__5524
1d12c     04 E4 05 F1 | 	add	objptr, #4
1d130     F2 00 62 FC | 	wrlong	_var01, objptr
1d134     86 01 00 FF 
1d138     20 01 06 F6 | 	mov	_var01, ##@LR__5525
1d13c     04 E4 05 F1 | 	add	objptr, #4
1d140     F2 00 62 FC | 	wrlong	_var01, objptr
1d144     86 01 00 FF 
1d148     3C 01 06 F6 | 	mov	_var01, ##@LR__5526
1d14c     04 E4 05 F1 | 	add	objptr, #4
1d150     F2 00 62 FC | 	wrlong	_var01, objptr
1d154     86 01 00 FF 
1d158     4D 01 06 F6 | 	mov	_var01, ##@LR__5527
1d15c     04 E4 05 F1 | 	add	objptr, #4
1d160     F2 00 62 FC | 	wrlong	_var01, objptr
1d164     86 01 00 FF 
1d168     5C 01 06 F6 | 	mov	_var01, ##@LR__5528
1d16c     04 E4 05 F1 | 	add	objptr, #4
1d170     F2 00 62 FC | 	wrlong	_var01, objptr
1d174     86 01 00 FF 
1d178     77 01 06 F6 | 	mov	_var01, ##@LR__5529
1d17c     04 E4 05 F1 | 	add	objptr, #4
1d180     F2 00 62 FC | 	wrlong	_var01, objptr
1d184     86 01 00 FF 
1d188     AB 01 06 F6 | 	mov	_var01, ##@LR__5530
1d18c     04 E4 05 F1 | 	add	objptr, #4
1d190     F2 00 62 FC | 	wrlong	_var01, objptr
1d194     86 01 00 FF 
1d198     C4 01 06 F6 | 	mov	_var01, ##@LR__5531
1d19c     04 E4 05 F1 | 	add	objptr, #4
1d1a0     F2 00 62 FC | 	wrlong	_var01, objptr
1d1a4     86 01 00 FF 
1d1a8     E0 01 06 F6 | 	mov	_var01, ##@LR__5532
1d1ac     04 E4 05 F1 | 	add	objptr, #4
1d1b0     F2 00 62 FC | 	wrlong	_var01, objptr
1d1b4     86 01 00 FF 
1d1b8     FE 01 06 F6 | 	mov	_var01, ##@LR__5533
1d1bc     04 E4 05 F1 | 	add	objptr, #4
1d1c0     F2 00 62 FC | 	wrlong	_var01, objptr
1d1c4     87 01 00 FF 
1d1c8     17 00 06 F6 | 	mov	_var01, ##@LR__5534
1d1cc     04 E4 05 F1 | 	add	objptr, #4
1d1d0     F2 00 62 FC | 	wrlong	_var01, objptr
1d1d4     87 01 00 FF 
1d1d8     36 00 06 F6 | 	mov	_var01, ##@LR__5535
1d1dc     04 E4 05 F1 | 	add	objptr, #4
1d1e0     F2 00 62 FC | 	wrlong	_var01, objptr
1d1e4     87 01 00 FF 
1d1e8     45 00 06 F6 | 	mov	_var01, ##@LR__5536
1d1ec     04 E4 05 F1 | 	add	objptr, #4
1d1f0     F2 00 62 FC | 	wrlong	_var01, objptr
1d1f4     87 01 00 FF 
1d1f8     73 00 06 F6 | 	mov	_var01, ##@LR__5537
1d1fc     04 E4 05 F1 | 	add	objptr, #4
1d200     F2 00 62 FC | 	wrlong	_var01, objptr
1d204     87 01 00 FF 
1d208     81 00 06 F6 | 	mov	_var01, ##@LR__5538
1d20c     04 E4 05 F1 | 	add	objptr, #4
1d210     F2 00 62 FC | 	wrlong	_var01, objptr
1d214     87 01 00 FF 
1d218     96 00 06 F6 | 	mov	_var01, ##@LR__5539
1d21c     04 E4 05 F1 | 	add	objptr, #4
1d220     F2 00 62 FC | 	wrlong	_var01, objptr
1d224     87 01 00 FF 
1d228     BA 00 06 F6 | 	mov	_var01, ##@LR__5540
1d22c     04 E4 05 F1 | 	add	objptr, #4
1d230     F2 00 62 FC | 	wrlong	_var01, objptr
1d234     87 01 00 FF 
1d238     D1 00 06 F6 | 	mov	_var01, ##@LR__5541
1d23c     04 E4 05 F1 | 	add	objptr, #4
1d240     F2 00 62 FC | 	wrlong	_var01, objptr
1d244     87 01 00 FF 
1d248     E4 00 06 F6 | 	mov	_var01, ##@LR__5542
1d24c     04 E4 05 F1 | 	add	objptr, #4
1d250     F2 00 62 FC | 	wrlong	_var01, objptr
1d254     87 01 00 FF 
1d258     FB 00 06 F6 | 	mov	_var01, ##@LR__5543
1d25c     04 E4 05 F1 | 	add	objptr, #4
1d260     F2 00 62 FC | 	wrlong	_var01, objptr
1d264     87 01 00 FF 
1d268     14 01 06 F6 | 	mov	_var01, ##@LR__5544
1d26c     04 E4 05 F1 | 	add	objptr, #4
1d270     F2 00 62 FC | 	wrlong	_var01, objptr
1d274     87 01 00 FF 
1d278     36 01 06 F6 | 	mov	_var01, ##@LR__5545
1d27c     04 E4 05 F1 | 	add	objptr, #4
1d280     F2 00 62 FC | 	wrlong	_var01, objptr
1d284     87 01 00 FF 
1d288     49 01 06 F6 | 	mov	_var01, ##@LR__5546
1d28c     04 E4 05 F1 | 	add	objptr, #4
1d290     F2 00 62 FC | 	wrlong	_var01, objptr
1d294     45 00 00 FF 
1d298     4C E5 85 F1 | 	sub	objptr, ##35660
1d29c                 | _init_error_strings_ret
1d29c     2D 00 64 FD | 	ret
1d2a0                 | 
1d2a0                 | '         
1d2a0                 | ' sub printerror(err as integer)
1d2a0                 | _printerror
1d2a0     01 4A 05 F6 | 	mov	COUNT_, #1
1d2a4     A8 00 A0 FD | 	call	#pushregs_
1d2a8     09 1F 02 F6 | 	mov	local01, arg01
1d2ac     87 01 00 FF 
1d2b0     59 13 06 F6 | 	mov	arg01, ##@LR__5547
1d2b4     5C 20 B0 FD | 	call	#_hg010b_spin2_write
1d2b8     0F 13 02 F6 | 	mov	arg01, local01
1d2bc     F8 25 B0 FD | 	call	#_hg010b_spin2_inttostr
1d2c0     FD 12 02 F6 | 	mov	arg01, result1
1d2c4     4C 20 B0 FD | 	call	#_hg010b_spin2_write
1d2c8     87 01 00 FF 
1d2cc     60 13 06 F6 | 	mov	arg01, ##@LR__5548
1d2d0     40 20 B0 FD | 	call	#_hg010b_spin2_write
1d2d4     02 1E 66 F0 | 	shl	local01, #2
1d2d8     45 00 00 FF 
1d2dc     7C E4 05 F1 | 	add	objptr, ##35452
1d2e0     F2 1E 02 F1 | 	add	local01, objptr
1d2e4     0F 13 02 FB | 	rdlong	arg01, local01
1d2e8     45 00 00 FF 
1d2ec     7C E4 85 F1 | 	sub	objptr, ##35452
1d2f0                 | ' 
1d2f0                 | ' write(text)
1d2f0     20 20 B0 FD | 	call	#_hg010b_spin2_write
1d2f4                 | ' crlf
1d2f4     1C 25 B0 FD | 	call	#_hg010b_spin2_crlf
1d2f8     A7 F0 03 F6 | 	mov	ptra, fp
1d2fc     B2 00 A0 FD | 	call	#popregs_
1d300                 | _printerror_ret
1d300     2D 00 64 FD | 	ret
1d304                 | 
1d304                 | ' 
1d304                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d304                 | ' 
1d304                 | ' sub startpsram
1d304                 | _startpsram
1d304     00 12 06 F6 | 	mov	arg01, #0
1d308     0A 14 C6 F9 | 	decod	arg02, #10
1d30c     0B 16 06 F6 | 	mov	arg03, #11
1d310     07 18 06 F6 | 	mov	arg04, #7
1d314     0B 00 00 FF 
1d318     CC E4 05 F1 | 	add	objptr, ##5836
1d31c     A4 26 B0 FD | 	call	#_psram_spin2_startx
1d320     2B 00 00 FF 
1d324     3C E5 05 F1 | 	add	objptr, ##22332
1d328     F2 FA 61 FC | 	wrlong	result1, objptr
1d32c                 | '     return $7FF00 + cog*12
1d32c     0C E4 05 F1 | 	add	objptr, #12
1d330     FF 03 80 FF 
1d334     F2 00 6A FC | 	wrlong	##524032, objptr
1d338     37 00 00 FF 
1d33c     14 E4 85 F1 | 	sub	objptr, ##28180
1d340                 | _startpsram_ret
1d340     2D 00 64 FD | 	ret
1d344                 | 
1d344                 | ' 
1d344                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d344                 | _startvideo
1d344     01 4A 05 F6 | 	mov	COUNT_, #1
1d348     A8 00 A0 FD | 	call	#pushregs_
1d34c     37 00 00 FF 
1d350     14 E4 05 F1 | 	add	objptr, ##28180
1d354     F2 18 02 FB | 	rdlong	arg04, objptr
1d358     37 00 00 FF 
1d35c     14 E4 85 F1 | 	sub	objptr, ##28180
1d360     0A 13 02 F6 | 	mov	arg01, arg02
1d364     0C 15 02 F6 | 	mov	arg02, arg04
1d368     A0 07 B0 FD | 	call	#_hg010b_spin2_start
1d36c     37 00 00 FF 
1d370     00 E4 05 F1 | 	add	objptr, ##28160
1d374     F2 FA 61 FC | 	wrlong	result1, objptr
1d378                 | ' 
1d378                 | ' videocog=v.start(pin,mbox)
1d378                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d378     00 1E 06 F6 | 	mov	local01, #0
1d37c     2B 00 00 FF 
1d380     34 E5 85 F1 | 	sub	objptr, ##22324
1d384                 | LR__2320
1d384     0F 13 02 F6 | 	mov	arg01, local01
1d388     00 28 00 FF 
1d38c     00 14 06 F6 | 	mov	arg02, ##5242880
1d390     88 2A B0 FD | 	call	#_psram_spin2_setQos
1d394     01 1E 06 F1 | 	add	local01, #1
1d398     08 1E 56 F2 | 	cmps	local01, #8 wc
1d39c     E4 FF 9F CD |  if_b	jmp	#LR__2320
1d3a0     2B 00 00 FF 
1d3a4     34 E5 05 F1 | 	add	objptr, ##22324
1d3a8     F2 12 02 FB | 	rdlong	arg01, objptr
1d3ac     7A 00 02 FF 
1d3b0     00 14 06 F6 | 	mov	arg02, ##67171328
1d3b4     2B 00 00 FF 
1d3b8     34 E5 85 F1 | 	sub	objptr, ##22324
1d3bc     5C 2A B0 FD | 	call	#_psram_spin2_setQos
1d3c0     0B 00 00 FF 
1d3c4     CC E4 85 F1 | 	sub	objptr, ##5836
1d3c8                 | ' psram.setQoS(videocog, $0400f400) 
1d3c8                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d3c8     F2 14 02 F6 | 	mov	arg02, objptr
1d3cc     00 70 04 FF 
1d3d0     00 14 46 F5 | 	or	arg02, ##148897792
1d3d4     00 16 06 F6 | 	mov	arg03, #0
1d3d8     00 18 06 F6 | 	mov	arg04, #0
1d3dc     00 12 06 F6 | 	mov	arg01, #0
1d3e0     F4 3E B0 FD | 	call	#__system___basic_open
1d3e4                 | ' return videocog
1d3e4     37 00 00 FF 
1d3e8     00 E4 05 F1 | 	add	objptr, ##28160
1d3ec     F2 FA 01 FB | 	rdlong	result1, objptr
1d3f0     37 00 00 FF 
1d3f4     00 E4 85 F1 | 	sub	objptr, ##28160
1d3f8     A7 F0 03 F6 | 	mov	ptra, fp
1d3fc     B2 00 A0 FD | 	call	#popregs_
1d400                 | _startvideo_ret
1d400     2D 00 64 FD | 	ret
1d404                 | 
1d404                 | ' 
1d404                 | ' 
1d404                 | ' 
1d404                 | ' '' ------------------------------- Convenient psram peek/poke
1d404                 | ' 
1d404                 | ' sub pslpoke(addr as ulong,value as ulong)
1d404                 | _pslpoke
1d404     00 4A 05 F6 | 	mov	COUNT_, #0
1d408     A8 00 A0 FD | 	call	#pushregs_
1d40c     08 F0 07 F1 | 	add	ptra, #8
1d410     A7 12 62 FC | 	wrlong	arg01, fp
1d414     04 4E 05 F1 | 	add	fp, #4
1d418     A7 14 62 FC | 	wrlong	arg02, fp
1d41c     A7 12 02 F6 | 	mov	arg01, fp
1d420     04 4E 85 F1 | 	sub	fp, #4
1d424     A7 14 02 FB | 	rdlong	arg02, fp
1d428     04 16 06 F6 | 	mov	arg03, #4
1d42c     0B 00 00 FF 
1d430     CC E4 05 F1 | 	add	objptr, ##5836
1d434     54 28 B0 FD | 	call	#_psram_spin2_write
1d438     0B 00 00 FF 
1d43c     CC E4 85 F1 | 	sub	objptr, ##5836
1d440     A7 F0 03 F6 | 	mov	ptra, fp
1d444     B2 00 A0 FD | 	call	#popregs_
1d448                 | _pslpoke_ret
1d448     2D 00 64 FD | 	ret
1d44c                 | 
1d44c                 | ' 
1d44c                 | ' sub psdpoke(addr as ulong,value as ulong)
1d44c                 | _psdpoke
1d44c     00 4A 05 F6 | 	mov	COUNT_, #0
1d450     A8 00 A0 FD | 	call	#pushregs_
1d454     08 F0 07 F1 | 	add	ptra, #8
1d458     A7 12 62 FC | 	wrlong	arg01, fp
1d45c     04 4E 05 F1 | 	add	fp, #4
1d460     A7 14 62 FC | 	wrlong	arg02, fp
1d464     A7 12 02 F6 | 	mov	arg01, fp
1d468     04 4E 85 F1 | 	sub	fp, #4
1d46c     A7 14 02 FB | 	rdlong	arg02, fp
1d470     02 16 06 F6 | 	mov	arg03, #2
1d474     0B 00 00 FF 
1d478     CC E4 05 F1 | 	add	objptr, ##5836
1d47c     0C 28 B0 FD | 	call	#_psram_spin2_write
1d480     0B 00 00 FF 
1d484     CC E4 85 F1 | 	sub	objptr, ##5836
1d488     A7 F0 03 F6 | 	mov	ptra, fp
1d48c     B2 00 A0 FD | 	call	#popregs_
1d490                 | _psdpoke_ret
1d490     2D 00 64 FD | 	ret
1d494                 | 
1d494                 | ' 
1d494                 | ' sub pspoke(addr as ulong,value as ulong)
1d494                 | _pspoke
1d494     00 4A 05 F6 | 	mov	COUNT_, #0
1d498     A8 00 A0 FD | 	call	#pushregs_
1d49c     08 F0 07 F1 | 	add	ptra, #8
1d4a0     A7 12 62 FC | 	wrlong	arg01, fp
1d4a4     04 4E 05 F1 | 	add	fp, #4
1d4a8     A7 14 62 FC | 	wrlong	arg02, fp
1d4ac     A7 12 02 F6 | 	mov	arg01, fp
1d4b0     04 4E 85 F1 | 	sub	fp, #4
1d4b4     A7 14 02 FB | 	rdlong	arg02, fp
1d4b8     01 16 06 F6 | 	mov	arg03, #1
1d4bc     0B 00 00 FF 
1d4c0     CC E4 05 F1 | 	add	objptr, ##5836
1d4c4     C4 27 B0 FD | 	call	#_psram_spin2_write
1d4c8     0B 00 00 FF 
1d4cc     CC E4 85 F1 | 	sub	objptr, ##5836
1d4d0     A7 F0 03 F6 | 	mov	ptra, fp
1d4d4     B2 00 A0 FD | 	call	#popregs_
1d4d8                 | _pspoke_ret
1d4d8     2D 00 64 FD | 	ret
1d4dc                 | 
1d4dc                 | ' 
1d4dc                 | ' function pspeek(adr as ulong) as ubyte
1d4dc                 | _pspeek
1d4dc     00 4A 05 F6 | 	mov	COUNT_, #0
1d4e0     A8 00 A0 FD | 	call	#pushregs_
1d4e4     0C F0 07 F1 | 	add	ptra, #12
1d4e8     04 4E 05 F1 | 	add	fp, #4
1d4ec     A7 12 62 FC | 	wrlong	arg01, fp
1d4f0     04 4E 05 F1 | 	add	fp, #4
1d4f4     A7 12 02 F6 | 	mov	arg01, fp
1d4f8     04 4E 85 F1 | 	sub	fp, #4
1d4fc     A7 14 02 FB | 	rdlong	arg02, fp
1d500     04 4E 85 F1 | 	sub	fp, #4
1d504     01 16 06 F6 | 	mov	arg03, #1
1d508     0B 00 00 FF 
1d50c     CC E4 05 F1 | 	add	objptr, ##5836
1d510     DC 26 B0 FD | 	call	#_psram_spin2_read1
1d514     0B 00 00 FF 
1d518     CC E4 85 F1 | 	sub	objptr, ##5836
1d51c                 | ' psram.read1(varptr(res),adr,1)
1d51c                 | ' return res
1d51c     08 4E 05 F1 | 	add	fp, #8
1d520     A7 FA C1 FA | 	rdbyte	result1, fp
1d524     08 4E 85 F1 | 	sub	fp, #8
1d528     A7 F0 03 F6 | 	mov	ptra, fp
1d52c     B2 00 A0 FD | 	call	#popregs_
1d530                 | _pspeek_ret
1d530     2D 00 64 FD | 	ret
1d534                 | 
1d534                 | ' 
1d534                 | ' function pslpeek(adr as ulong) as ulong
1d534                 | _pslpeek
1d534     00 4A 05 F6 | 	mov	COUNT_, #0
1d538     A8 00 A0 FD | 	call	#pushregs_
1d53c     0C F0 07 F1 | 	add	ptra, #12
1d540     04 4E 05 F1 | 	add	fp, #4
1d544     A7 12 62 FC | 	wrlong	arg01, fp
1d548     04 4E 05 F1 | 	add	fp, #4
1d54c     A7 12 02 F6 | 	mov	arg01, fp
1d550     04 4E 85 F1 | 	sub	fp, #4
1d554     A7 14 02 FB | 	rdlong	arg02, fp
1d558     04 4E 85 F1 | 	sub	fp, #4
1d55c     04 16 06 F6 | 	mov	arg03, #4
1d560     0B 00 00 FF 
1d564     CC E4 05 F1 | 	add	objptr, ##5836
1d568     84 26 B0 FD | 	call	#_psram_spin2_read1
1d56c     0B 00 00 FF 
1d570     CC E4 85 F1 | 	sub	objptr, ##5836
1d574                 | ' psram.read1(varptr(res),adr,4)
1d574                 | ' return res
1d574     08 4E 05 F1 | 	add	fp, #8
1d578     A7 FA 01 FB | 	rdlong	result1, fp
1d57c     08 4E 85 F1 | 	sub	fp, #8
1d580     A7 F0 03 F6 | 	mov	ptra, fp
1d584     B2 00 A0 FD | 	call	#popregs_
1d588                 | _pslpeek_ret
1d588     2D 00 64 FD | 	ret
1d58c                 | 
1d58c                 | ' 
1d58c                 | ' function psdpeek(adr as ulong) as ulong
1d58c                 | _psdpeek
1d58c     00 4A 05 F6 | 	mov	COUNT_, #0
1d590     A8 00 A0 FD | 	call	#pushregs_
1d594     0C F0 07 F1 | 	add	ptra, #12
1d598     04 4E 05 F1 | 	add	fp, #4
1d59c     A7 12 62 FC | 	wrlong	arg01, fp
1d5a0     04 4E 05 F1 | 	add	fp, #4
1d5a4     A7 12 02 F6 | 	mov	arg01, fp
1d5a8     04 4E 85 F1 | 	sub	fp, #4
1d5ac     A7 14 02 FB | 	rdlong	arg02, fp
1d5b0     04 4E 85 F1 | 	sub	fp, #4
1d5b4     02 16 06 F6 | 	mov	arg03, #2
1d5b8     0B 00 00 FF 
1d5bc     CC E4 05 F1 | 	add	objptr, ##5836
1d5c0     2C 26 B0 FD | 	call	#_psram_spin2_read1
1d5c4     0B 00 00 FF 
1d5c8     CC E4 85 F1 | 	sub	objptr, ##5836
1d5cc                 | ' psram.read1(varptr(res),adr,2)
1d5cc                 | ' return res
1d5cc     08 4E 05 F1 | 	add	fp, #8
1d5d0     A7 FA E1 FA | 	rdword	result1, fp
1d5d4     08 4E 85 F1 | 	sub	fp, #8
1d5d8     A7 F0 03 F6 | 	mov	ptra, fp
1d5dc     B2 00 A0 FD | 	call	#popregs_
1d5e0                 | _psdpeek_ret
1d5e0     2D 00 64 FD | 	ret
1d5e4                 | 
1d5e4                 | ' 
1d5e4                 | ' '' ------------------------------- USB keyboard scan to char translator
1d5e4                 | ' 
1d5e4                 | ' function scantochar(key)
1d5e4                 | _scantochar
1d5e4                 | ' 
1d5e4                 | ' select case (key shr 8) and 255
1d5e4     09 01 02 F6 | 	mov	_var01, arg01
1d5e8     08 00 C6 F0 | 	sar	_var01, #8
1d5ec     FF 00 0E F5 | 	and	_var01, #255 wz
1d5f0     24 00 90 AD |  if_e	jmp	#LR__2330
1d5f4     02 00 0E F2 | 	cmp	_var01, #2 wz
1d5f8     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d5fc     30 00 90 AD |  if_e	jmp	#LR__2331
1d600     40 00 0E F2 | 	cmp	_var01, #64 wz
1d604     44 00 90 AD |  if_e	jmp	#LR__2332
1d608     42 00 0E F2 | 	cmp	_var01, #66 wz
1d60c     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d610     70 00 90 5D |  if_ne	jmp	#LR__2334
1d614     50 00 90 FD | 	jmp	#LR__2333
1d618                 | LR__2330
1d618     09 FB 01 F6 | 	mov	result1, arg01
1d61c     7F FA 05 F5 | 	and	result1, #127
1d620     02 FA 65 F0 | 	shl	result1, #2
1d624     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d628     FD FA C1 FA | 	rdbyte	result1, result1
1d62c     54 00 90 FD | 	jmp	#_scantochar_ret
1d630                 | LR__2331
1d630     09 FB 01 F6 | 	mov	result1, arg01
1d634     7F FA 05 F5 | 	and	result1, #127
1d638     02 FA 65 F0 | 	shl	result1, #2
1d63c     01 FA 05 F1 | 	add	result1, #1
1d640     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d644     FD FA C1 FA | 	rdbyte	result1, result1
1d648     38 00 90 FD | 	jmp	#_scantochar_ret
1d64c                 | LR__2332
1d64c     09 FB 01 F6 | 	mov	result1, arg01
1d650     7F FA 05 F5 | 	and	result1, #127
1d654     02 FA 65 F0 | 	shl	result1, #2
1d658     02 FA 05 F1 | 	add	result1, #2
1d65c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d660     FD FA C1 FA | 	rdbyte	result1, result1
1d664     1C 00 90 FD | 	jmp	#_scantochar_ret
1d668                 | LR__2333
1d668     09 FB 01 F6 | 	mov	result1, arg01
1d66c     7F FA 05 F5 | 	and	result1, #127
1d670     02 FA 65 F0 | 	shl	result1, #2
1d674     03 FA 05 F1 | 	add	result1, #3
1d678     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d67c     FD FA C1 FA | 	rdbyte	result1, result1
1d680     00 00 90 FD | 	jmp	#_scantochar_ret
1d684                 | LR__2334
1d684                 | _scantochar_ret
1d684     2D 00 64 FD | 	ret
1d688                 | 
1d688                 | _program
1d688     01 4A 05 F6 | 	mov	COUNT_, #1
1d68c     A8 00 A0 FD | 	call	#pushregs_
1d690     70 FC BF FD | 	call	#_startpsram
1d694     40 12 06 F6 | 	mov	arg01, #64
1d698     00 14 06 F6 | 	mov	arg02, #0
1d69c     00 16 06 F6 | 	mov	arg03, #0
1d6a0     A0 FC BF FD | 	call	#_startvideo
1d6a4     37 00 00 FF 
1d6a8     14 E4 05 F1 | 	add	objptr, ##28180
1d6ac     F2 12 02 FB | 	rdlong	arg01, objptr
1d6b0     00 14 06 F6 | 	mov	arg02, #0
1d6b4     FB 03 00 FF 
1d6b8     00 17 06 F6 | 	mov	arg03, ##521984
1d6bc     2B 00 00 FF 
1d6c0     48 E5 85 F1 | 	sub	objptr, ##22344
1d6c4     04 2B B0 FD | 	call	#_audio096_spin2_start
1d6c8     FE 16 02 F6 | 	mov	arg03, result2
1d6cc     2B 00 00 FF 
1d6d0     30 E5 05 F1 | 	add	objptr, ##22320
1d6d4     F2 FA 61 FC | 	wrlong	result1, objptr
1d6d8     14 E4 05 F1 | 	add	objptr, #20
1d6dc     F2 16 62 FC | 	wrlong	arg03, objptr
1d6e0     37 00 00 FF 
1d6e4     10 E4 85 F1 | 	sub	objptr, ##28176
1d6e8     32 12 06 F6 | 	mov	arg01, #50
1d6ec     34 34 B0 FD | 	call	#__system___waitms
1d6f0     37 00 00 FF 
1d6f4     10 E4 05 F1 | 	add	objptr, ##28176
1d6f8     F2 12 02 FB | 	rdlong	arg01, objptr
1d6fc     37 00 00 FF 
1d700     10 E4 85 F1 | 	sub	objptr, ##28176
1d704     14 12 06 F1 | 	add	arg01, #20
1d708     20 00 80 FF 
1d70c     09 01 58 FC | 	wrword	##16384, arg01
1d710     10 28 B0 FD | 	call	#_usbnew_spin2_start
1d714     37 00 00 FF 
1d718     04 E4 05 F1 | 	add	objptr, ##28164
1d71c     F2 FA 61 FC | 	wrlong	result1, objptr
1d720                 | '   mouse_limits[0] := xlim
1d720     0F 00 00 FF 
1d724     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1d728     01 00 80 FF 
1d72c     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1d730                 | '   mouse_limits[1] := ylim
1d730     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d734     01 00 80 FF 
1d738     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1d73c     36 00 00 FF 
1d740     F3 E4 85 F1 | 	sub	objptr, ##27891
1d744     F2 12 02 F6 | 	mov	arg01, objptr
1d748     11 E5 85 F1 | 	sub	objptr, #273
1d74c     C4 12 06 F1 | 	add	arg01, #196
1d750                 | '   mouse_outptr := ptr
1d750     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d754     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1d758     0F 00 00 FF 
1d75c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1d760     16 00 00 FF 
1d764     CA EA 05 F1 | 	add	ptr__dat__, ##11466
1d768     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d76c     16 00 00 FF 
1d770     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
1d774     10 12 06 F6 | 	mov	arg01, #16
1d778     28 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1d77c     10 12 06 F6 | 	mov	arg01, #16
1d780     20 14 06 F6 | 	mov	arg02, #32
1d784     20 16 06 F6 | 	mov	arg03, #32
1d788     A8 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1d78c     09 12 C6 F9 | 	decod	arg01, #9
1d790     2C 15 06 F6 | 	mov	arg02, #300
1d794     E4 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1d798     F2 16 02 F6 | 	mov	arg03, objptr
1d79c     50 00 00 FF 
1d7a0     1C E5 05 F1 | 	add	objptr, ##41244
1d7a4     F2 14 02 F6 | 	mov	arg02, objptr
1d7a8     0A 17 62 FC | 	wrlong	arg03, arg02
1d7ac     04 14 06 F1 | 	add	arg02, #4
1d7b0     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1d7b4     EF 14 02 F6 | 	mov	arg02, entryptr__
1d7b8     1E FA 05 F6 | 	mov	result1, #30
1d7bc     28 E4 61 FD | 	setq	objptr
1d7c0     0A FB F1 FC | 	coginit	result1, arg02 wc
1d7c4     01 FA 65 C6 |  if_b	neg	result1, #1
1d7c8     04 E4 85 F1 | 	sub	objptr, #4
1d7cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d7d0     01 00 00 FF 
1d7d4     90 E4 05 F1 | 	add	objptr, ##656
1d7d8     F2 00 68 FC | 	wrlong	#0, objptr
1d7dc     1A 00 00 FF 
1d7e0     74 E5 85 F1 | 	sub	objptr, ##13684
1d7e4     F2 04 68 FC | 	wrlong	#2, objptr
1d7e8     04 E4 05 F1 | 	add	objptr, #4
1d7ec     F2 26 69 FC | 	wrlong	#147, objptr
1d7f0     04 E4 05 F1 | 	add	objptr, #4
1d7f4     F2 34 69 FC | 	wrlong	#154, objptr
1d7f8     04 E4 05 F1 | 	add	objptr, #4
1d7fc     F2 08 68 FC | 	wrlong	#4, objptr
1d800     04 E4 85 F1 | 	sub	objptr, #4
1d804     F2 16 02 FB | 	rdlong	arg03, objptr
1d808     14 E4 85 F1 | 	sub	objptr, #20
1d80c     F2 16 62 FC | 	wrlong	arg03, objptr
1d810     04 E4 05 F1 | 	add	objptr, #4
1d814     F2 00 68 FC | 	wrlong	#0, objptr
1d818     04 E4 05 F1 | 	add	objptr, #4
1d81c     F2 00 68 FC | 	wrlong	#0, objptr
1d820     19 00 00 FF 
1d824     E4 E4 05 F1 | 	add	objptr, ##13028
1d828     F2 02 68 FC | 	wrlong	#1, objptr
1d82c     01 00 00 FF 
1d830     9C E4 05 F1 | 	add	objptr, ##668
1d834     F2 00 68 FC | 	wrlong	#0, objptr
1d838     01 00 00 FF 
1d83c     00 EA 05 F1 | 	add	ptr__dat__, ##512
1d840     08 E4 05 F1 | 	add	objptr, #8
1d844     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1d848     04 E4 85 F1 | 	sub	objptr, #4
1d84c     03 00 80 FF 
1d850     F2 3C 69 FC | 	wrlong	##1694, objptr
1d854     0C 00 00 FF 
1d858     50 E5 85 F1 | 	sub	objptr, ##6480
1d85c     F2 18 68 FC | 	wrlong	#12, objptr
1d860     45 00 00 FF 
1d864     64 E4 85 F1 | 	sub	objptr, ##35428
1d868     01 00 00 FF 
1d86c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1d870     94 DB BF FD | 	call	#_init_commands
1d874     C8 F6 BF FD | 	call	#_init_error_strings
1d878     4C EE BF FD | 	call	#_init_audio
1d87c     7C 4E BF FD | 	call	#_do_new
1d880     37 00 00 FF 
1d884     3C E4 05 F1 | 	add	objptr, ##28220
1d888     F2 12 02 FB | 	rdlong	arg01, objptr
1d88c     04 E4 85 F1 | 	sub	objptr, #4
1d890     F2 14 02 FB | 	rdlong	arg02, objptr
1d894     37 00 00 FF 
1d898     38 E4 85 F1 | 	sub	objptr, ##28216
1d89c     B4 16 B0 FD | 	call	#_hg010b_spin2_cls
1d8a0     37 00 00 FF 
1d8a4     40 E4 05 F1 | 	add	objptr, ##28224
1d8a8     F2 12 02 FB | 	rdlong	arg01, objptr
1d8ac     37 00 00 FF 
1d8b0     40 E4 85 F1 | 	sub	objptr, ##28224
1d8b4     4C 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1d8b8                 | ' 
1d8b8                 | ' leading_spaces:=amount
1d8b8     01 00 00 FF 
1d8bc     B6 E4 05 F1 | 	add	objptr, ##694
1d8c0     F2 04 68 FC | 	wrlong	#2, objptr
1d8c4     01 00 00 FF 
1d8c8     B6 E4 85 F1 | 	sub	objptr, ##694
1d8cc     87 01 00 FF 
1d8d0     63 1F 06 F6 | 	mov	local01, ##@LR__5549
1d8d4     3D 12 06 F6 | 	mov	arg01, #61
1d8d8     3C 14 06 F6 | 	mov	arg02, #60
1d8dc     3B 16 06 F6 | 	mov	arg03, #59
1d8e0     3A 18 06 F6 | 	mov	arg04, #58
1d8e4     08 7A B0 FD | 	call	#__system___vfs_open_sdcardx
1d8e8     FD 14 02 F6 | 	mov	arg02, result1
1d8ec     0F 13 02 F6 | 	mov	arg01, local01
1d8f0     08 33 B0 FD | 	call	#__system___mount
1d8f4     87 01 00 FF 
1d8f8     67 13 06 F6 | 	mov	arg01, ##@LR__5550
1d8fc     BC 35 B0 FD | 	call	#__system___chdir
1d900     87 01 00 FF 
1d904     6F 1F 06 F6 | 	mov	local01, ##@LR__5551
1d908     4A 00 00 FF 
1d90c     94 E4 05 F1 | 	add	objptr, ##38036
1d910     F2 1E 62 FC | 	wrlong	local01, objptr
1d914     13 00 00 FF 
1d918     60 E4 85 F1 | 	sub	objptr, ##9824
1d91c     F2 12 02 FB | 	rdlong	arg01, objptr
1d920     37 00 00 FF 
1d924     34 E4 85 F1 | 	sub	objptr, ##28212
1d928     01 12 66 F0 | 	shl	arg01, #1
1d92c     01 14 06 F6 | 	mov	arg02, #1
1d930     10 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1d934                 | ' init_commands
1d934                 | ' init_error_strings
1d934                 | ' init_audio
1d934                 | ' do_new
1d934                 | ' cls(ink, paper)
1d934                 | ' v.setfontfamily(font) 				' use ST Mono font
1d934                 | ' v.setleadingspaces(2)
1d934                 | ' mount "/sd", _vfs_open_sdcard()
1d934                 | ' chdir "/sd/bas"
1d934                 | ' currentdir$="/sd/bas"
1d934                 | ' position 2*editor_spaces,1 : print ver$
1d934     00 12 06 F6 | 	mov	arg01, #0
1d938     58 89 B0 FD | 	call	#__system___getiolock_0541
1d93c     FD 12 02 F6 | 	mov	arg01, result1
1d940     EC 2E B0 FD | 	call	#__system___lockmem
1d944     18 00 00 FF 
1d948     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1d94c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1d950     18 00 00 FF 
1d954     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1d958     00 12 06 F6 | 	mov	arg01, #0
1d95c     00 16 06 F6 | 	mov	arg03, #0
1d960     C0 3B B0 FD | 	call	#__system___basic_print_string
1d964     00 12 06 F6 | 	mov	arg01, #0
1d968     0A 14 06 F6 | 	mov	arg02, #10
1d96c     00 16 06 F6 | 	mov	arg03, #0
1d970     58 3B B0 FD | 	call	#__system___basic_print_char
1d974     00 12 06 F6 | 	mov	arg01, #0
1d978     18 89 B0 FD | 	call	#__system___getiolock_0541
1d97c     FD 00 68 FC | 	wrlong	#0, result1
1d980     51 00 00 FF 
1d984     AC E5 05 F1 | 	add	objptr, ##41900
1d988     F2 12 02 FB | 	rdlong	arg01, objptr
1d98c     0E 00 00 FF 
1d990     50 E5 85 F1 | 	sub	objptr, ##7504
1d994     F2 1E 02 FB | 	rdlong	local01, objptr
1d998     43 00 00 FF 
1d99c     5C E4 85 F1 | 	sub	objptr, ##34396
1d9a0     0F 13 82 F1 | 	sub	arg01, local01
1d9a4     00 14 06 F6 | 	mov	arg02, #0
1d9a8     0A 16 06 F6 | 	mov	arg03, #10
1d9ac     50 51 B0 FD | 	call	#__system__Number_S
1d9b0     FD 12 02 F6 | 	mov	arg01, result1
1d9b4     87 01 00 FF 
1d9b8     77 15 06 F6 | 	mov	arg02, ##@LR__5552
1d9bc     CC 2E B0 FD | 	call	#__system___string_concat
1d9c0     FD 1E 02 F6 | 	mov	local01, result1
1d9c4     50 00 00 FF 
1d9c8     10 E5 05 F1 | 	add	objptr, ##41232
1d9cc     F2 1E 62 FC | 	wrlong	local01, objptr
1d9d0     50 00 00 FF 
1d9d4     10 E5 85 F1 | 	sub	objptr, ##41232
1d9d8                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1d9d8     00 12 06 F6 | 	mov	arg01, #0
1d9dc     B4 88 B0 FD | 	call	#__system___getiolock_0541
1d9e0     FD 12 02 F6 | 	mov	arg01, result1
1d9e4     48 2E B0 FD | 	call	#__system___lockmem
1d9e8     50 00 00 FF 
1d9ec     10 E5 05 F1 | 	add	objptr, ##41232
1d9f0     F2 14 02 FB | 	rdlong	arg02, objptr
1d9f4     50 00 00 FF 
1d9f8     10 E5 85 F1 | 	sub	objptr, ##41232
1d9fc     00 12 06 F6 | 	mov	arg01, #0
1da00     00 16 06 F6 | 	mov	arg03, #0
1da04     1C 3B B0 FD | 	call	#__system___basic_print_string
1da08     00 12 06 F6 | 	mov	arg01, #0
1da0c     0A 14 06 F6 | 	mov	arg02, #10
1da10     00 16 06 F6 | 	mov	arg03, #0
1da14     B4 3A B0 FD | 	call	#__system___basic_print_char
1da18     00 12 06 F6 | 	mov	arg01, #0
1da1c     74 88 B0 FD | 	call	#__system___getiolock_0541
1da20     FD 00 68 FC | 	wrlong	#0, result1
1da24     37 00 00 FF 
1da28     34 E4 05 F1 | 	add	objptr, ##28212
1da2c     F2 12 02 FB | 	rdlong	arg01, objptr
1da30     37 00 00 FF 
1da34     34 E4 85 F1 | 	sub	objptr, ##28212
1da38     01 12 66 F0 | 	shl	arg01, #1
1da3c     04 14 06 F6 | 	mov	arg02, #4
1da40     00 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1da44                 | ' position 2*editor_spaces,4 : print "Ready"
1da44     00 12 06 F6 | 	mov	arg01, #0
1da48     48 88 B0 FD | 	call	#__system___getiolock_0541
1da4c     FD 12 02 F6 | 	mov	arg01, result1
1da50     DC 2D B0 FD | 	call	#__system___lockmem
1da54     87 01 00 FF 
1da58     89 15 06 F6 | 	mov	arg02, ##@LR__5553
1da5c     00 12 06 F6 | 	mov	arg01, #0
1da60     00 16 06 F6 | 	mov	arg03, #0
1da64     BC 3A B0 FD | 	call	#__system___basic_print_string
1da68     00 12 06 F6 | 	mov	arg01, #0
1da6c     0A 14 06 F6 | 	mov	arg02, #10
1da70     00 16 06 F6 | 	mov	arg03, #0
1da74     54 3A B0 FD | 	call	#__system___basic_print_char
1da78     00 12 06 F6 | 	mov	arg01, #0
1da7c     14 88 B0 FD | 	call	#__system___getiolock_0541
1da80     FD 00 68 FC | 	wrlong	#0, result1
1da84     00 14 06 F6 | 	mov	arg02, #0
1da88     01 14 D6 F7 | 	test	arg02, #1 wc
1da8c     5A 4C 64 FD | 	drvc	#38
1da90     01 14 D6 F7 | 	test	arg02, #1 wc
1da94     5A 4E 64 FD | 	drvc	#39
1da98     87 01 00 FF 
1da9c     8F 1F 06 F6 | 	mov	local01, ##@LR__5554
1daa0     51 00 00 FF 
1daa4     D8 E5 05 F1 | 	add	objptr, ##41944
1daa8     F2 1E 62 FC | 	wrlong	local01, objptr
1daac     04 E4 05 F1 | 	add	objptr, #4
1dab0     FF FF FF FF 
1dab4     F2 FE 6B FC | 	wrlong	##-1, objptr
1dab8     51 00 00 FF 
1dabc     DC E5 85 F1 | 	sub	objptr, ##41948
1dac0                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dac0                 | ' loadname="noname.bas"
1dac0                 | ' do_insert=-1
1dac0                 | ' 
1dac0                 | ' '-------------------------------------------------------------------------------------------------------- 
1dac0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dac0                 | ' '--------------------------------------------------------------------------------------------------------
1dac0                 | ' 
1dac0                 | ' do
1dac0                 | LR__2340
1dac0     40 2D BE FD | 	call	#_edit
1dac4     FD 1E 02 F6 | 	mov	local01, result1
1dac8     37 00 00 FF 
1dacc     1C E4 05 F1 | 	add	objptr, ##28188
1dad0     F2 1E 62 FC | 	wrlong	local01, objptr
1dad4     37 00 00 FF 
1dad8     1C E4 85 F1 | 	sub	objptr, ##28188
1dadc     68 3C BE FD | 	call	#_interpret
1dae0     87 01 00 FF 
1dae4     9A 1F 06 F6 | 	mov	local01, ##@LR__5555
1dae8     37 00 00 FF 
1daec     1C E4 05 F1 | 	add	objptr, ##28188
1daf0     F2 1E 62 FC | 	wrlong	local01, objptr
1daf4     37 00 00 FF 
1daf8     1C E4 85 F1 | 	sub	objptr, ##28188
1dafc     C0 FF 9F FD | 	jmp	#LR__2340
1db00     A7 F0 03 F6 | 	mov	ptra, fp
1db04     B2 00 A0 FD | 	call	#popregs_
1db08                 | _program_ret
1db08     2D 00 64 FD | 	ret
1db0c                 | 
1db0c                 | ' '' this is not a main program.
1db0c                 | ' 
1db0c                 | ' '****************************************************************************************************************
1db0c                 | ' '                                                                                                             	*
1db0c                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1db0c                 | ' '                                                                                                            	*
1db0c                 | ' ' base - HDMI base pin												*
1db0c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1db0c                 | ' '														*
1db0c                 | ' '														*
1db0c                 | ' '****************************************************************************************************************
1db0c                 | ' 
1db0c                 | ' pub start(base,mb):result |i
1db0c                 | _hg010b_spin2_start
1db0c                 | ' 
1db0c                 | ' '--------------------------- initialize pointers and variables
1db0c                 | ' 
1db0c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1db0c     34 E4 05 F1 | 	add	objptr, #52
1db10     F2 FA 01 F6 | 	mov	result1, objptr
1db14     28 E4 85 F1 | 	sub	objptr, #40
1db18     F2 FA 61 FC | 	wrlong	result1, objptr
1db1c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1db1c                 | ' hdmibase:=base							' HDMI base pin, 8*n
1db1c     18 E4 05 F1 | 	add	objptr, #24
1db20     F2 12 62 FC | 	wrlong	arg01, objptr
1db24                 | ' mailbox_ptr:=mb		
1db24     04 E4 05 F1 | 	add	objptr, #4
1db28     F2 14 62 FC | 	wrlong	arg02, objptr
1db2c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1db2c     C1 E5 05 F1 | 	add	objptr, #449
1db30     F2 14 62 FC | 	wrlong	arg02, objptr
1db34                 | ' sprite_ptr:=@spr1ptr
1db34     D8 E4 85 F1 | 	sub	objptr, #216
1db38     F2 FA 01 F6 | 	mov	result1, objptr
1db3c     E5 E4 85 F1 | 	sub	objptr, #229
1db40     F2 FA 61 FC | 	wrlong	result1, objptr
1db44                 | ' 
1db44                 | ' 		'
1db44                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1db44     E5 E4 05 F1 | 	add	objptr, #229
1db48     F2 FA 01 FB | 	rdlong	result1, objptr
1db4c     D0 FA 05 F1 | 	add	result1, #208
1db50     FD 10 58 FC | 	wrword	#8, result1
1db54                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1db54     F2 16 02 FB | 	rdlong	arg03, objptr
1db58     D2 16 06 F1 | 	add	arg03, #210
1db5c     0B 21 58 FC | 	wrword	#16, arg03
1db60                 | ' leading_spaces:=0				'
1db60     A5 E5 05 F1 | 	add	objptr, #421
1db64     F2 00 68 FC | 	wrlong	#0, objptr
1db68                 | ' 
1db68                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1db68     99 E4 85 F1 | 	sub	objptr, #153
1db6c     00 00 A0 FF 
1db70     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1db74                 | ' emptydl[1]:=0
1db74     04 E4 05 F1 | 	add	objptr, #4
1db78     F2 00 68 FC | 	wrlong	#0, objptr
1db7c                 | ' 
1db7c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1db7c                 | ' 
1db7c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1db7c     28 E5 85 F1 | 	sub	objptr, #296
1db80     F2 02 68 FC | 	wrlong	#1, objptr
1db84                 | ' if s_debug<>0
1db84                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1db84     20 00 80 FF 
1db88     F2 00 68 FC | 	wrlong	##16384, objptr
1db8c     F9 E4 85 F1 | 	sub	objptr, #249
1db90                 | ' setmode()							' set the mode, see below
1db90     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1db94                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1db94     49 E4 05 F1 | 	add	objptr, #73
1db98     F2 FA 01 F6 | 	mov	result1, objptr
1db9c     35 E4 85 F1 | 	sub	objptr, #53
1dba0     F2 FA 61 FC | 	wrlong	result1, objptr
1dba4                 | ' cursor_ptr:=@cursor_x						
1dba4     28 E4 05 F1 | 	add	objptr, #40
1dba8     F2 16 02 F6 | 	mov	arg03, objptr
1dbac     2C E4 85 F1 | 	sub	objptr, #44
1dbb0     F2 16 62 FC | 	wrlong	arg03, objptr
1dbb4                 | ' fontnum:=0  							' start with a PC type font 
1dbb4     55 E4 05 F1 | 	add	objptr, #85
1dbb8     F2 00 68 FC | 	wrlong	#0, objptr
1dbbc                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1dbbc     1C E4 05 F1 | 	add	objptr, #28
1dbc0     F2 12 02 F6 | 	mov	arg01, objptr
1dbc4     81 E4 85 F1 | 	sub	objptr, #129
1dbc8     10 00 00 FF 
1dbcc     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1dbd0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dbd4     10 00 00 FF 
1dbd8     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1dbdc     10 16 06 F6 | 	mov	arg03, #16
1dbe0     6C 2B B0 FD | 	call	#__system____builtin_memmove
1dbe4                 | ' leading_spaces:=0
1dbe4     01 00 00 FF 
1dbe8     B6 E4 05 F1 | 	add	objptr, ##694
1dbec     F2 00 68 FC | 	wrlong	#0, objptr
1dbf0     01 00 00 FF 
1dbf4     B6 E4 85 F1 | 	sub	objptr, ##694
1dbf8                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dbf8                 | ' 
1dbf8                 | ' initcursor(154)
1dbf8     9A 12 06 F6 | 	mov	arg01, #154
1dbfc     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1dc00                 | ' 
1dc00                 | ' '---------------------------- start the cog
1dc00                 | ' 
1dc00                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1dc00     10 00 00 FF 
1dc04     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1dc08     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dc0c     10 00 00 FF 
1dc10     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1dc14     14 E4 05 F1 | 	add	objptr, #20
1dc18     10 FA 05 F6 | 	mov	result1, #16
1dc1c     28 E4 61 FD | 	setq	objptr
1dc20     0A FB F1 FC | 	coginit	result1, arg02 wc
1dc24     01 FA 65 C6 |  if_b	neg	result1, #1
1dc28     1C E4 05 F1 | 	add	objptr, #28
1dc2c     F2 FA 61 FC | 	wrlong	result1, objptr
1dc30     30 E4 85 F1 | 	sub	objptr, #48
1dc34                 | ' waitms(40)							' wait for stabilize
1dc34     28 12 06 F6 | 	mov	arg01, #40
1dc38     E8 2E B0 FD | 	call	#__system___waitms
1dc3c                 | ' return cog							' return the driver's cog #
1dc3c     30 E4 05 F1 | 	add	objptr, #48
1dc40     F2 FA 01 FB | 	rdlong	result1, objptr
1dc44     30 E4 85 F1 | 	sub	objptr, #48
1dc48                 | _hg010b_spin2_start_ret
1dc48     2D 00 64 FD | 	ret
1dc4c                 | 
1dc4c                 | ' 
1dc4c                 | ' 
1dc4c                 | ' '**************************************************************************************************************** 
1dc4c                 | ' '                                                                                                             	*
1dc4c                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1dc4c                 | ' '  Mode number - see start() above or bits below								*
1dc4c                 | ' '                                                                                                             	*
1dc4c                 | ' '****************************************************************************************************************
1dc4c                 | ' 
1dc4c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dc4c                 | ' pub initcursor(color) |i
1dc4c                 | _hg010b_spin2_initcursor
1dc4c     03 4A 05 F6 | 	mov	COUNT_, #3
1dc50     A8 00 A0 FD | 	call	#pushregs_
1dc54     09 1F 02 F6 | 	mov	local01, arg01
1dc58                 | ' 
1dc58                 | ' cursor_x:=0							' place the cursor at 0:0
1dc58     3C E4 05 F1 | 	add	objptr, #60
1dc5c     F2 00 58 FC | 	wrword	#0, objptr
1dc60                 | ' cursor_y:=0
1dc60     02 E4 05 F1 | 	add	objptr, #2
1dc64     F2 00 48 FC | 	wrbyte	#0, objptr
1dc68                 | ' repeat i from 0 to 111
1dc68     00 20 06 F6 | 	mov	local02, #0
1dc6c     F8 E5 05 F1 | 	add	objptr, #504
1dc70     97 1A 48 FB | 	callpa	#(@LR__2352-@LR__2350)>>2,fcache_load_ptr_
1dc74                 | LR__2350
1dc74                 | '   cursor[i]:=0
1dc74     10 23 02 F6 | 	mov	local03, local02
1dc78     F2 22 02 F1 | 	add	local03, objptr
1dc7c     11 01 48 FC | 	wrbyte	#0, local03
1dc80     01 20 06 F1 | 	add	local02, #1
1dc84     70 20 56 F2 | 	cmps	local02, #112 wc
1dc88     E8 FF 9F CD |  if_b	jmp	#LR__2350
1dc8c                 | ' repeat i from 112 to 127
1dc8c     70 20 06 F6 | 	mov	local02, #112
1dc90                 | LR__2351
1dc90                 | '   cursor[i]:=color  
1dc90     10 23 02 F6 | 	mov	local03, local02
1dc94     F2 22 02 F1 | 	add	local03, objptr
1dc98     11 1F 42 FC | 	wrbyte	local01, local03
1dc9c     01 20 06 F1 | 	add	local02, #1
1dca0     80 20 16 F2 | 	cmp	local02, #128 wc
1dca4     E8 FF 9F CD |  if_b	jmp	#LR__2351
1dca8                 | LR__2352
1dca8                 | ' 'repeat i from 0 to 127
1dca8                 | ' '  if ((i/8)//2)
1dca8                 | ' '    cursor[i]:=15
1dca8                 | ' '  else
1dca8                 | ' '    cursor[i]:=0
1dca8                 | ' '  if i>=120    
1dca8                 | ' '    cursor[i]:=40
1dca8                 | ' setspriteptr(17,@cursor)
1dca8     F2 14 02 F6 | 	mov	arg02, objptr
1dcac     01 00 00 FF 
1dcb0     36 E4 85 F1 | 	sub	objptr, ##566
1dcb4     11 12 06 F6 | 	mov	arg01, #17
1dcb8     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1dcbc                 | ' setspritesize(17,8,16)
1dcbc     11 12 06 F6 | 	mov	arg01, #17
1dcc0     08 14 06 F6 | 	mov	arg02, #8
1dcc4     10 16 06 F6 | 	mov	arg03, #16
1dcc8     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1dccc                 | ' setspritepos(17,0,0)
1dccc     11 12 06 F6 | 	mov	arg01, #17
1dcd0     00 14 06 F6 | 	mov	arg02, #0
1dcd4     00 16 06 F6 | 	mov	arg03, #0
1dcd8     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1dcdc                 | ' cursorshape:=14
1dcdc     0B 00 00 FF 
1dce0     C6 E4 05 F1 | 	add	objptr, ##5830
1dce4     F2 1C 68 FC | 	wrlong	#14, objptr
1dce8                 | ' cursorcolor:=color
1dce8     04 E4 85 F1 | 	sub	objptr, #4
1dcec     F2 1E 62 FC | 	wrlong	local01, objptr
1dcf0     0B 00 00 FF 
1dcf4     C2 E4 85 F1 | 	sub	objptr, ##5826
1dcf8     A7 F0 03 F6 | 	mov	ptra, fp
1dcfc     B2 00 A0 FD | 	call	#popregs_
1dd00                 | _hg010b_spin2_initcursor_ret
1dd00     2D 00 64 FD | 	ret
1dd04                 | 
1dd04                 | ' 
1dd04                 | ' pub setcursorshape(shape) | i
1dd04                 | _hg010b_spin2_setcursorshape
1dd04                 | ' 
1dd04                 | ' cursorshape:=shape
1dd04     0B 00 00 FF 
1dd08     C6 E4 05 F1 | 	add	objptr, ##5830
1dd0c     F2 12 62 FC | 	wrlong	arg01, objptr
1dd10                 | ' repeat i from 0 to (8*cursorshape)-1
1dd10     00 00 06 F6 | 	mov	_var01, #0
1dd14     09 03 02 F6 | 	mov	_var02, arg01
1dd18     03 02 66 F0 | 	shl	_var02, #3
1dd1c     01 02 86 F1 | 	sub	_var02, #1
1dd20     00 02 56 F2 | 	cmps	_var02, #0 wc
1dd24     01 04 86 F6 | 	negc	_var03, #1
1dd28     02 07 02 F6 | 	mov	_var04, _var03
1dd2c     02 03 02 F1 | 	add	_var02, _var03
1dd30     0A 00 00 FF 
1dd34     90 E4 85 F1 | 	sub	objptr, ##5264
1dd38     97 0C 48 FB | 	callpa	#(@LR__2361-@LR__2360)>>2,fcache_load_ptr_
1dd3c                 | LR__2360
1dd3c                 | '   cursor[i]:=0
1dd3c     00 05 02 F6 | 	mov	_var03, _var01
1dd40     F2 04 02 F1 | 	add	_var03, objptr
1dd44     02 01 48 FC | 	wrbyte	#0, _var03
1dd48     03 01 02 F1 | 	add	_var01, _var04
1dd4c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1dd50     E8 FF 9F 5D |  if_ne	jmp	#LR__2360
1dd54                 | LR__2361
1dd54                 | ' repeat i from 8*cursorshape to 127
1dd54     0A 00 00 FF 
1dd58     90 E4 05 F1 | 	add	objptr, ##5264
1dd5c     F2 06 02 FB | 	rdlong	_var04, objptr
1dd60     03 01 02 F6 | 	mov	_var01, _var04
1dd64     03 00 66 F0 | 	shl	_var01, #3
1dd68     0B 00 00 FF 
1dd6c     C6 E4 85 F1 | 	sub	objptr, ##5830
1dd70     03 06 66 F0 | 	shl	_var04, #3
1dd74     80 06 56 F2 | 	cmps	_var04, #128 wc
1dd78     01 04 A6 F6 | 	negnc	_var03, #1
1dd7c     7F 02 06 F6 | 	mov	_var02, #127
1dd80     02 03 02 F1 | 	add	_var02, _var03
1dd84     97 1A 48 FB | 	callpa	#(@LR__2363-@LR__2362)>>2,fcache_load_ptr_
1dd88                 | LR__2362
1dd88                 | '   cursor[i]:=cursorcolor
1dd88     00 07 02 F6 | 	mov	_var04, _var01
1dd8c     01 00 00 FF 
1dd90     36 E4 05 F1 | 	add	objptr, ##566
1dd94     F2 06 02 F1 | 	add	_var04, objptr
1dd98     0A 00 00 FF 
1dd9c     8C E4 05 F1 | 	add	objptr, ##5260
1dda0     F2 12 02 FB | 	rdlong	arg01, objptr
1dda4     0B 00 00 FF 
1dda8     C2 E4 85 F1 | 	sub	objptr, ##5826
1ddac     03 13 42 FC | 	wrbyte	arg01, _var04
1ddb0     02 01 02 F1 | 	add	_var01, _var03
1ddb4     01 01 0A F2 | 	cmp	_var01, _var02 wz
1ddb8     CC FF 9F 5D |  if_ne	jmp	#LR__2362
1ddbc                 | LR__2363
1ddbc                 | _hg010b_spin2_setcursorshape_ret
1ddbc     2D 00 64 FD | 	ret
1ddc0                 | 
1ddc0                 | ' 
1ddc0                 | ' pub setcursorcolor(color) | i
1ddc0                 | _hg010b_spin2_setcursorcolor
1ddc0                 | ' 
1ddc0                 | ' cursorcolor:=color
1ddc0     0B 00 00 FF 
1ddc4     C2 E4 05 F1 | 	add	objptr, ##5826
1ddc8     F2 12 62 FC | 	wrlong	arg01, objptr
1ddcc                 | ' repeat i from 0 to (8*cursorshape)-1
1ddcc     00 12 06 F6 | 	mov	arg01, #0
1ddd0     04 E4 05 F1 | 	add	objptr, #4
1ddd4     F2 00 02 FB | 	rdlong	_var01, objptr
1ddd8     03 00 66 F0 | 	shl	_var01, #3
1dddc     01 00 86 F1 | 	sub	_var01, #1
1dde0     00 00 56 F2 | 	cmps	_var01, #0 wc
1dde4     01 02 86 F6 | 	negc	_var02, #1
1dde8     01 05 02 F6 | 	mov	_var03, _var02
1ddec     01 01 02 F1 | 	add	_var01, _var02
1ddf0     0A 00 00 FF 
1ddf4     90 E4 85 F1 | 	sub	objptr, ##5264
1ddf8     97 0C 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
1ddfc                 | LR__2370
1ddfc                 | '   cursor[i]:=0
1ddfc     09 03 02 F6 | 	mov	_var02, arg01
1de00     F2 02 02 F1 | 	add	_var02, objptr
1de04     01 01 48 FC | 	wrbyte	#0, _var02
1de08     02 13 02 F1 | 	add	arg01, _var03
1de0c     00 13 0A F2 | 	cmp	arg01, _var01 wz
1de10     E8 FF 9F 5D |  if_ne	jmp	#LR__2370
1de14                 | LR__2371
1de14                 | ' repeat i from 8*cursorshape to 127
1de14     0A 00 00 FF 
1de18     90 E4 05 F1 | 	add	objptr, ##5264
1de1c     F2 04 02 FB | 	rdlong	_var03, objptr
1de20     02 13 02 F6 | 	mov	arg01, _var03
1de24     03 12 66 F0 | 	shl	arg01, #3
1de28     0B 00 00 FF 
1de2c     C6 E4 85 F1 | 	sub	objptr, ##5830
1de30     03 04 66 F0 | 	shl	_var03, #3
1de34     80 04 56 F2 | 	cmps	_var03, #128 wc
1de38     01 02 A6 F6 | 	negnc	_var02, #1
1de3c     7F 00 06 F6 | 	mov	_var01, #127
1de40     01 01 02 F1 | 	add	_var01, _var02
1de44     97 1A 48 FB | 	callpa	#(@LR__2373-@LR__2372)>>2,fcache_load_ptr_
1de48                 | LR__2372
1de48                 | '   cursor[i]:=cursorcolor
1de48     09 05 02 F6 | 	mov	_var03, arg01
1de4c     01 00 00 FF 
1de50     36 E4 05 F1 | 	add	objptr, ##566
1de54     F2 04 02 F1 | 	add	_var03, objptr
1de58     0A 00 00 FF 
1de5c     8C E4 05 F1 | 	add	objptr, ##5260
1de60     F2 06 02 FB | 	rdlong	_var04, objptr
1de64     0B 00 00 FF 
1de68     C2 E4 85 F1 | 	sub	objptr, ##5826
1de6c     02 07 42 FC | 	wrbyte	_var04, _var03
1de70     01 13 02 F1 | 	add	arg01, _var02
1de74     00 13 0A F2 | 	cmp	arg01, _var01 wz
1de78     CC FF 9F 5D |  if_ne	jmp	#LR__2372
1de7c                 | LR__2373
1de7c                 | _hg010b_spin2_setcursorcolor_ret
1de7c     2D 00 64 FD | 	ret
1de80                 | 
1de80                 | '   
1de80                 | '   
1de80                 | '   
1de80                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1de80                 | _hg010b_spin2_setmode
1de80     02 4A 05 F6 | 	mov	COUNT_, #2
1de84     A8 00 A0 FD | 	call	#pushregs_
1de88                 | ' 
1de88                 | ' 
1de88                 | ' dl_ptr:=@emptydl[0]
1de88     01 00 00 FF 
1de8c     1D E4 05 F1 | 	add	objptr, ##541
1de90     F2 1A 02 F6 | 	mov	arg05, objptr
1de94     FD E5 85 F1 | 	sub	objptr, #509
1de98     F2 1A 62 FC | 	wrlong	arg05, objptr
1de9c                 | ' 
1de9c                 | ' if cog>0 
1de9c     10 E4 05 F1 | 	add	objptr, #16
1dea0     F2 1A 02 FB | 	rdlong	arg05, objptr
1dea4     30 E4 85 F1 | 	sub	objptr, #48
1dea8     01 1A 56 F2 | 	cmps	arg05, #1 wc
1deac                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1deac     01 12 06 36 |  if_ae	mov	arg01, #1
1deb0     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1deb4                 | ' xres:=1024
1deb4     01 00 00 FF 
1deb8     26 E4 05 F1 | 	add	objptr, ##550
1debc     02 00 80 FF 
1dec0     F2 00 68 FC | 	wrlong	##1024, objptr
1dec4                 | ' yres:=600
1dec4     04 E4 05 F1 | 	add	objptr, #4
1dec8     01 00 80 FF 
1decc     F2 B0 68 FC | 	wrlong	##600, objptr
1ded0                 | ' ppl:=(timings[3])
1ded0     10 00 00 FF 
1ded4     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1ded8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1dedc     51 E5 85 F1 | 	sub	objptr, #337
1dee0     F2 1A 62 FC | 	wrlong	arg05, objptr
1dee4                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1dee4     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1dee8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1deec     01 1E 66 F0 | 	shl	local01, #1
1def0     80 E4 85 F1 | 	sub	objptr, #128
1def4     F2 1E 62 FC | 	wrlong	local01, objptr
1def8                 | ' cpl1:=cpl '' todo remove
1def8     04 E4 05 F1 | 	add	objptr, #4
1defc     F2 1E 62 FC | 	wrlong	local01, objptr
1df00                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1df00     02 00 00 FF 
1df04     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1df08     41 E4 85 F1 | 	sub	objptr, #65
1df0c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1df10                 | ' repeat i from 0 to 3
1df10     00 20 06 F6 | 	mov	local02, #0
1df14     02 00 00 FF 
1df18     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1df1c     08 E4 05 F1 | 	add	objptr, #8
1df20     97 20 48 FB | 	callpa	#(@LR__2381-@LR__2380)>>2,fcache_load_ptr_
1df24                 | LR__2380
1df24                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1df24     10 1F 02 F6 | 	mov	local01, local02
1df28     02 1E 66 F0 | 	shl	local01, #2
1df2c     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1df30     F2 1A 02 FB | 	rdlong	arg05, objptr
1df34     11 1A 66 F0 | 	shl	arg05, #17
1df38     0F 1F 02 FB | 	rdlong	local01, local01
1df3c     0D 1F 02 F1 | 	add	local01, arg05
1df40     80 40 38 FF 
1df44     00 1E 06 F1 | 	add	local01, ##1887502336
1df48     10 1B 02 F6 | 	mov	arg05, local02
1df4c     02 1A 66 F0 | 	shl	arg05, #2
1df50     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1df54     0D 1F 62 FC | 	wrlong	local01, arg05
1df58     01 20 06 F1 | 	add	local02, #1
1df5c     04 20 56 F2 | 	cmps	local02, #4 wc
1df60     C0 FF 9F CD |  if_b	jmp	#LR__2380
1df64                 | LR__2381
1df64     24 E4 85 F1 | 	sub	objptr, #36
1df68                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1df68     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1df6c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1df70     14 1E 66 FC | 	wrlong	local01, #20
1df74                 | ' hubset(timings[10])
1df74     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1df78     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1df7c     10 00 00 FF 
1df80     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1df84     00 12 62 FD | 	hubset	arg01
1df88                 | ' waitms(1)                                                   	' wait for stabilization
1df88     01 12 06 F6 | 	mov	arg01, #1
1df8c     94 2B B0 FD | 	call	#__system___waitms
1df90     10 00 00 FF 
1df94     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1df98     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1df9c     61 E4 05 F1 | 	add	objptr, #97
1dfa0     F2 20 62 FC | 	wrlong	local02, objptr
1dfa4     10 1F 52 F6 | 	abs	local01, local02 wc
1dfa8     04 1E 46 F0 | 	shr	local01, #4
1dfac     0F 1F 82 F6 | 	negc	local01, local01
1dfb0     9C E4 05 F1 | 	add	objptr, #156
1dfb4     F2 1E 62 FC | 	wrlong	local01, objptr
1dfb8     A4 E4 85 F1 | 	sub	objptr, #164
1dfbc     F2 20 02 FB | 	rdlong	local02, objptr
1dfc0     08 E4 05 F1 | 	add	objptr, #8
1dfc4     F2 1E 02 FB | 	rdlong	local01, objptr
1dfc8     0F 21 02 FD | 	qmul	local02, local01
1dfcc                 | ' lines:=timings[11]
1dfcc                 | ' t_lines:=lines/16
1dfcc                 | ' buflen:=cpl*lines						' framebuffer length in longs
1dfcc     29 E4 85 F1 | 	sub	objptr, #41
1dfd0     19 1E C6 F9 | 	decod	local01, #25
1dfd4     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1dfd8     18 20 62 FD | 	getqx	local02
1dfdc     F2 20 62 FC | 	wrlong	local02, objptr
1dfe0     38 E4 85 F1 | 	sub	objptr, #56
1dfe4     02 20 66 F0 | 	shl	local02, #2
1dfe8     10 1F 82 F1 | 	sub	local01, local02
1dfec     F2 1E 62 FC | 	wrlong	local01, objptr
1dff0     FD E4 05 F1 | 	add	objptr, #253
1dff4     F2 20 02 FB | 	rdlong	local02, objptr
1dff8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1dffc     0D 21 02 FD | 	qmul	local02, arg05
1e000                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e000                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e000     F9 E4 85 F1 | 	sub	objptr, #249
1e004                 | ' mode_ptr:=@timings						' set pointers to timings
1e004     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e008                 | ' graphmode:=1024+512+192+48							' det global variable
1e008                 | ' makedl(graphmode)							' make a DL for the mode
1e008     03 00 00 FF 
1e00c     F0 12 06 F6 | 	mov	arg01, ##1776
1e010     18 20 62 FD | 	getqx	local02
1e014     10 1F 82 F1 | 	sub	local01, local02
1e018     F2 1E 62 FC | 	wrlong	local01, objptr
1e01c     14 E4 05 F1 | 	add	objptr, #20
1e020     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e024     79 E4 05 F1 | 	add	objptr, #121
1e028     03 00 80 FF 
1e02c     F2 E0 69 FC | 	wrlong	##1776, objptr
1e030     91 E4 85 F1 | 	sub	objptr, #145
1e034     10 00 00 FF 
1e038     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e03c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e040                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e040     F2 1E 02 FB | 	rdlong	local01, objptr
1e044     DD E4 05 F1 | 	add	objptr, #221
1e048     F2 1E 62 FC | 	wrlong	local01, objptr
1e04c                 | ' s_font_ptr:=font_ptr
1e04c     D5 E4 85 F1 | 	sub	objptr, #213
1e050     F2 1E 02 FB | 	rdlong	local01, objptr
1e054     D9 E4 05 F1 | 	add	objptr, #217
1e058     F2 1E 62 FC | 	wrlong	local01, objptr
1e05c                 | ' s_lines:=lines
1e05c     80 E4 85 F1 | 	sub	objptr, #128
1e060     F2 1E 02 FB | 	rdlong	local01, objptr
1e064     84 E4 05 F1 | 	add	objptr, #132
1e068     F2 1E 62 FC | 	wrlong	local01, objptr
1e06c                 | ' s_buflen:=buflen
1e06c     AD E4 85 F1 | 	sub	objptr, #173
1e070     F2 1E 02 FB | 	rdlong	local01, objptr
1e074     B5 E4 05 F1 | 	add	objptr, #181
1e078     F2 1E 62 FC | 	wrlong	local01, objptr
1e07c                 | ' s_cpl:=cpl
1e07c     94 E4 85 F1 | 	sub	objptr, #148
1e080     F2 1E 02 FB | 	rdlong	local01, objptr
1e084     90 E4 05 F1 | 	add	objptr, #144
1e088     F2 1E 62 FC | 	wrlong	local01, objptr
1e08c                 | ' s_cpl1:=cpl
1e08c     90 E4 85 F1 | 	sub	objptr, #144
1e090     F2 1E 02 FB | 	rdlong	local01, objptr
1e094     98 E4 05 F1 | 	add	objptr, #152
1e098     F2 1E 62 FC | 	wrlong	local01, objptr
1e09c                 | ' st_lines:=t_lines
1e09c     0C E4 05 F1 | 	add	objptr, #12
1e0a0     F2 1E 02 FB | 	rdlong	local01, objptr
1e0a4     04 E4 05 F1 | 	add	objptr, #4
1e0a8     F2 1E 62 FC | 	wrlong	local01, objptr
1e0ac                 | ' ppl:=ppl/xzoom  
1e0ac     28 E4 85 F1 | 	sub	objptr, #40
1e0b0     F2 7C 02 FB | 	rdlong	muldiva_, objptr
1e0b4     2C E4 05 F1 | 	add	objptr, #44
1e0b8     F2 7E 02 FB | 	rdlong	muldivb_, objptr
1e0bc     05 E5 85 F1 | 	sub	objptr, #261
1e0c0     BA 00 A0 FD | 	call	#divide_
1e0c4     D9 E4 05 F1 | 	add	objptr, #217
1e0c8     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e0cc                 | ' s_ppl:=ppl
1e0cc     1C E4 05 F1 | 	add	objptr, #28
1e0d0     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e0d4     F5 E4 85 F1 | 	sub	objptr, #245
1e0d8                 | ' waitms(20)							' wait 
1e0d8     14 12 06 F6 | 	mov	arg01, #20
1e0dc     44 2A B0 FD | 	call	#__system___waitms
1e0e0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e0e0     04 E4 05 F1 | 	add	objptr, #4
1e0e4     F2 12 02 FB | 	rdlong	arg01, objptr
1e0e8     04 E4 85 F1 | 	sub	objptr, #4
1e0ec     F2 16 02 FB | 	rdlong	arg03, objptr
1e0f0     09 17 82 F1 | 	sub	arg03, arg01
1e0f4     20 14 06 F6 | 	mov	arg02, #32
1e0f8     00 18 06 F6 | 	mov	arg04, #0
1e0fc     01 1A 06 F6 | 	mov	arg05, #1
1e100     0B 00 00 FF 
1e104     CC E4 05 F1 | 	add	objptr, ##5836
1e108     1C 1C B0 FD | 	call	#_psram_spin2_fill
1e10c     0B 00 00 FF 
1e110     CC E4 85 F1 | 	sub	objptr, ##5836
1e114     A7 F0 03 F6 | 	mov	ptra, fp
1e118     B2 00 A0 FD | 	call	#popregs_
1e11c                 | _hg010b_spin2_setmode_ret
1e11c     2D 00 64 FD | 	ret
1e120                 | 
1e120                 | ' 
1e120                 | ' '****************************************************************************************************************
1e120                 | ' '                                                                                                             	*
1e120                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e120                 | ' '                                                                                                             	*
1e120                 | ' '****************************************************************************************************************
1e120                 | ' 
1e120                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e120                 | _hg010b_spin2_makedl
1e120                 | ' 
1e120                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e120                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e120                 | ' repeat i from 0 to 11                                                           ' clear DL
1e120     00 00 06 F6 | 	mov	_var01, #0
1e124     ED E5 05 F1 | 	add	objptr, #493
1e128     97 0E 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1e12c                 | LR__2390
1e12c                 | '   displaylist[i]:=0 
1e12c     00 03 02 F6 | 	mov	_var02, _var01
1e130     02 02 66 F0 | 	shl	_var02, #2
1e134     F2 02 02 F1 | 	add	_var02, objptr
1e138     01 01 68 FC | 	wrlong	#0, _var02
1e13c     01 00 06 F1 | 	add	_var01, #1
1e140     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e144     E4 FF 9F CD |  if_b	jmp	#LR__2390
1e148                 | LR__2391
1e148                 | '                         ' 
1e148                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e148     8C E5 85 F1 | 	sub	objptr, #396
1e14c     F2 02 02 FB | 	rdlong	_var02, objptr
1e150     14 02 66 F0 | 	shl	_var02, #20
1e154     01 02 06 F1 | 	add	_var02, #1
1e158     04 E4 85 F1 | 	sub	objptr, #4
1e15c     F2 00 02 FB | 	rdlong	_var01, objptr
1e160     02 00 66 F0 | 	shl	_var01, #2
1e164     04 00 66 F0 | 	shl	_var01, #4
1e168     00 03 02 F1 | 	add	_var02, _var01
1e16c     90 E5 05 F1 | 	add	objptr, #400
1e170     F2 02 62 FC | 	wrlong	_var02, objptr
1e174     ED E5 85 F1 | 	sub	objptr, #493
1e178                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e178     F2 02 02 FB | 	rdlong	_var02, objptr
1e17c     04 02 66 F0 | 	shl	_var02, #4
1e180     02 02 06 F1 | 	add	_var02, #2
1e184     F1 E5 05 F1 | 	add	objptr, #497
1e188     F2 02 62 FC | 	wrlong	_var02, objptr
1e18c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e18c     04 E4 85 F1 | 	sub	objptr, #4
1e190     F2 02 02 F6 | 	mov	_var02, objptr
1e194     CD E5 85 F1 | 	sub	objptr, #461
1e198     F2 02 62 FC | 	wrlong	_var02, objptr
1e19c     20 E4 85 F1 | 	sub	objptr, #32
1e1a0                 | _hg010b_spin2_makedl_ret
1e1a0     2D 00 64 FD | 	ret
1e1a4                 | 
1e1a4                 | ' 
1e1a4                 | ' 
1e1a4                 | ' '****************************************************************************************************************
1e1a4                 | ' '                                                                        					*
1e1a4                 | ' '  Graphic primitives                                                    					*
1e1a4                 | ' '                                                                        					*
1e1a4                 | ' '****************************************************************************************************************
1e1a4                 | ' 
1e1a4                 | ' pub setspriteptr(num,ptr)
1e1a4                 | _hg010b_spin2_setspriteptr
1e1a4                 | ' long[@spr1ptr+12*num]:=ptr
1e1a4     11 E5 05 F1 | 	add	objptr, #273
1e1a8     F2 00 02 F6 | 	mov	_var01, objptr
1e1ac     09 03 02 F6 | 	mov	_var02, arg01
1e1b0     01 02 66 F0 | 	shl	_var02, #1
1e1b4     09 03 02 F1 | 	add	_var02, arg01
1e1b8     02 02 66 F0 | 	shl	_var02, #2
1e1bc     01 01 02 F1 | 	add	_var01, _var02
1e1c0     00 15 62 FC | 	wrlong	arg02, _var01
1e1c4     11 E5 85 F1 | 	sub	objptr, #273
1e1c8                 | _hg010b_spin2_setspriteptr_ret
1e1c8     2D 00 64 FD | 	ret
1e1cc                 | 
1e1cc                 | ' 
1e1cc                 | ' pub setspritepos(num,x,y)
1e1cc                 | _hg010b_spin2_setspritepos
1e1cc                 | ' if y>601
1e1cc     01 00 00 FF 
1e1d0     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e1d4                 | '   y:=601
1e1d4     01 00 00 3F 
1e1d8     59 16 06 36 |  if_ae	mov	arg03, ##601
1e1dc                 | ' if x>1024
1e1dc     02 00 00 FF 
1e1e0     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e1e4                 | '   x:=1024
1e1e4     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e1e8                 | ' word[@spr1ptr+12*num+4]:=x
1e1e8     11 E5 05 F1 | 	add	objptr, #273
1e1ec     F2 00 02 F6 | 	mov	_var01, objptr
1e1f0     09 03 02 F6 | 	mov	_var02, arg01
1e1f4     01 02 66 F0 | 	shl	_var02, #1
1e1f8     09 03 02 F1 | 	add	_var02, arg01
1e1fc     02 02 66 F0 | 	shl	_var02, #2
1e200     01 01 02 F1 | 	add	_var01, _var02
1e204     04 00 06 F1 | 	add	_var01, #4
1e208     00 15 52 FC | 	wrword	arg02, _var01
1e20c                 | ' word[@spr1ptr+12*num+6]:=y
1e20c     F2 00 02 F6 | 	mov	_var01, objptr
1e210     09 03 02 F6 | 	mov	_var02, arg01
1e214     01 02 66 F0 | 	shl	_var02, #1
1e218     09 03 02 F1 | 	add	_var02, arg01
1e21c     02 02 66 F0 | 	shl	_var02, #2
1e220     01 01 02 F1 | 	add	_var01, _var02
1e224     06 00 06 F1 | 	add	_var01, #6
1e228     00 17 52 FC | 	wrword	arg03, _var01
1e22c     11 E5 85 F1 | 	sub	objptr, #273
1e230                 | _hg010b_spin2_setspritepos_ret
1e230     2D 00 64 FD | 	ret
1e234                 | 
1e234                 | ' 
1e234                 | ' pub setspritesize(num,w,h)
1e234                 | _hg010b_spin2_setspritesize
1e234                 | ' word[@spr1ptr+12*num+8]:=w
1e234     11 E5 05 F1 | 	add	objptr, #273
1e238     F2 00 02 F6 | 	mov	_var01, objptr
1e23c     09 03 02 F6 | 	mov	_var02, arg01
1e240     01 02 66 F0 | 	shl	_var02, #1
1e244     09 03 02 F1 | 	add	_var02, arg01
1e248     02 02 66 F0 | 	shl	_var02, #2
1e24c     01 01 02 F1 | 	add	_var01, _var02
1e250     08 00 06 F1 | 	add	_var01, #8
1e254     00 15 52 FC | 	wrword	arg02, _var01
1e258                 | ' word[@spr1ptr+12*num+10]:=h
1e258     F2 00 02 F6 | 	mov	_var01, objptr
1e25c     09 03 02 F6 | 	mov	_var02, arg01
1e260     01 02 66 F0 | 	shl	_var02, #1
1e264     09 03 02 F1 | 	add	_var02, arg01
1e268     02 02 66 F0 | 	shl	_var02, #2
1e26c     01 01 02 F1 | 	add	_var01, _var02
1e270     0A 00 06 F1 | 	add	_var01, #10
1e274     00 17 52 FC | 	wrword	arg03, _var01
1e278     11 E5 85 F1 | 	sub	objptr, #273
1e27c                 | _hg010b_spin2_setspritesize_ret
1e27c     2D 00 64 FD | 	ret
1e280                 | 
1e280                 | ' 
1e280                 | ' 
1e280                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e280                 | ' 
1e280                 | ' 
1e280                 | ' pub putpixel(x,y,c)
1e280                 | _hg010b_spin2_putpixel
1e280     04 4A 05 F6 | 	mov	COUNT_, #4
1e284     A8 00 A0 FD | 	call	#pushregs_
1e288     09 1F 02 F6 | 	mov	local01, arg01
1e28c                 | ' 
1e28c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e28c     00 20 06 F6 | 	mov	local02, #0
1e290     00 1E 56 F2 | 	cmps	local01, #0 wc
1e294     01 20 66 36 |  if_ae	neg	local02, #1
1e298     E9 E4 05 F1 | 	add	objptr, #233
1e29c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e2a0     02 1A 66 F0 | 	shl	arg05, #2
1e2a4     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e2a8     11 23 A2 F1 | 	subx	local03, local03
1e2ac     11 21 02 F5 | 	and	local02, local03
1e2b0     00 22 06 F6 | 	mov	local03, #0
1e2b4     00 14 56 F2 | 	cmps	arg02, #0 wc
1e2b8     01 22 66 36 |  if_ae	neg	local03, #1
1e2bc     11 21 02 F5 | 	and	local02, local03
1e2c0     04 E4 85 F1 | 	sub	objptr, #4
1e2c4     F2 22 02 FB | 	rdlong	local03, objptr
1e2c8     E5 E4 85 F1 | 	sub	objptr, #229
1e2cc     11 15 52 F2 | 	cmps	arg02, local03 wc
1e2d0     12 25 A2 F1 | 	subx	local04, local04
1e2d4     12 21 CA F7 | 	test	local02, local04 wz
1e2d8     48 00 90 AD |  if_e	jmp	#LR__2400
1e2dc     DD E4 05 F1 | 	add	objptr, #221
1e2e0     F2 12 02 FB | 	rdlong	arg01, objptr
1e2e4     14 E4 05 F1 | 	add	objptr, #20
1e2e8     F2 24 02 FB | 	rdlong	local04, objptr
1e2ec     02 24 66 F0 | 	shl	local04, #2
1e2f0     0A 25 02 FD | 	qmul	local04, arg02
1e2f4                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e2f4     0B 15 02 F6 | 	mov	arg02, arg03
1e2f8     01 16 06 F6 | 	mov	arg03, #1
1e2fc     00 18 06 F6 | 	mov	arg04, #0
1e300     01 1A 06 F6 | 	mov	arg05, #1
1e304     0A 00 00 FF 
1e308     DB E5 05 F1 | 	add	objptr, ##5595
1e30c     18 24 62 FD | 	getqx	local04
1e310     0F 25 02 F1 | 	add	local04, local01
1e314     12 13 02 F1 | 	add	arg01, local04
1e318     0C 1A B0 FD | 	call	#_psram_spin2_fill
1e31c     0B 00 00 FF 
1e320     CC E4 85 F1 | 	sub	objptr, ##5836
1e324                 | LR__2400
1e324     A7 F0 03 F6 | 	mov	ptra, fp
1e328     B2 00 A0 FD | 	call	#popregs_
1e32c                 | _hg010b_spin2_putpixel_ret
1e32c     2D 00 64 FD | 	ret
1e330                 | 
1e330                 | ' 
1e330                 | ' pub putpixel2(x,y,c)
1e330                 | _hg010b_spin2_putpixel2
1e330     02 4A 05 F6 | 	mov	COUNT_, #2
1e334     A8 00 A0 FD | 	call	#pushregs_
1e338     DD E4 05 F1 | 	add	objptr, #221
1e33c     F2 1E 02 FB | 	rdlong	local01, objptr
1e340     14 E4 05 F1 | 	add	objptr, #20
1e344     F2 1A 02 FB | 	rdlong	arg05, objptr
1e348     02 1A 66 F0 | 	shl	arg05, #2
1e34c     0A 1B 02 FD | 	qmul	arg05, arg02
1e350                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e350     0B 15 02 F6 | 	mov	arg02, arg03
1e354     01 16 06 F6 | 	mov	arg03, #1
1e358     00 18 06 F6 | 	mov	arg04, #0
1e35c     01 1A 06 F6 | 	mov	arg05, #1
1e360     0A 00 00 FF 
1e364     DB E5 05 F1 | 	add	objptr, ##5595
1e368     18 20 62 FD | 	getqx	local02
1e36c     09 21 02 F1 | 	add	local02, arg01
1e370     10 1F 02 F1 | 	add	local01, local02
1e374     0F 13 02 F6 | 	mov	arg01, local01
1e378     AC 19 B0 FD | 	call	#_psram_spin2_fill
1e37c     0B 00 00 FF 
1e380     CC E4 85 F1 | 	sub	objptr, ##5836
1e384     A7 F0 03 F6 | 	mov	ptra, fp
1e388     B2 00 A0 FD | 	call	#popregs_
1e38c                 | _hg010b_spin2_putpixel2_ret
1e38c     2D 00 64 FD | 	ret
1e390                 | 
1e390                 | ' 
1e390                 | ' pub getpixel2(x,y): c 
1e390                 | _hg010b_spin2_getpixel2
1e390     02 4A 05 F6 | 	mov	COUNT_, #2
1e394     A8 00 A0 FD | 	call	#pushregs_
1e398     0C F0 07 F1 | 	add	ptra, #12
1e39c     04 4E 05 F1 | 	add	fp, #4
1e3a0     A7 12 62 FC | 	wrlong	arg01, fp
1e3a4     04 4E 05 F1 | 	add	fp, #4
1e3a8     A7 14 62 FC | 	wrlong	arg02, fp
1e3ac     08 4E 85 F1 | 	sub	fp, #8
1e3b0     A7 00 68 FC | 	wrlong	#0, fp
1e3b4     A7 12 02 F6 | 	mov	arg01, fp
1e3b8     DD E4 05 F1 | 	add	objptr, #221
1e3bc     F2 14 02 FB | 	rdlong	arg02, objptr
1e3c0     14 E4 05 F1 | 	add	objptr, #20
1e3c4     F2 16 02 FB | 	rdlong	arg03, objptr
1e3c8     02 16 66 F0 | 	shl	arg03, #2
1e3cc     08 4E 05 F1 | 	add	fp, #8
1e3d0     A7 FA 01 FB | 	rdlong	result1, fp
1e3d4     FD 16 02 FD | 	qmul	arg03, result1
1e3d8                 | ' 
1e3d8                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e3d8     04 4E 85 F1 | 	sub	fp, #4
1e3dc     A7 1E 02 FB | 	rdlong	local01, fp
1e3e0     04 4E 85 F1 | 	sub	fp, #4
1e3e4     01 16 06 F6 | 	mov	arg03, #1
1e3e8     0A 00 00 FF 
1e3ec     DB E5 05 F1 | 	add	objptr, ##5595
1e3f0     18 20 62 FD | 	getqx	local02
1e3f4     0F 21 02 F1 | 	add	local02, local01
1e3f8     10 15 02 F1 | 	add	arg02, local02
1e3fc     F0 17 B0 FD | 	call	#_psram_spin2_read1
1e400     0B 00 00 FF 
1e404     CC E4 85 F1 | 	sub	objptr, ##5836
1e408                 | ' return c
1e408     A7 FA 01 FB | 	rdlong	result1, fp
1e40c     A7 F0 03 F6 | 	mov	ptra, fp
1e410     B2 00 A0 FD | 	call	#popregs_
1e414                 | _hg010b_spin2_getpixel2_ret
1e414     2D 00 64 FD | 	ret
1e418                 | 
1e418                 | '   
1e418                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e418                 | ' 
1e418                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e418                 | _hg010b_spin2_fastline
1e418     02 4A 05 F6 | 	mov	COUNT_, #2
1e41c     A8 00 A0 FD | 	call	#pushregs_
1e420     09 1F 02 F6 | 	mov	local01, arg01
1e424     0A 21 02 F6 | 	mov	local02, arg02
1e428                 | ' 
1e428                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e428     00 16 56 F2 | 	cmps	arg03, #0 wc
1e42c     F4 00 90 CD |  if_b	jmp	#LR__2410
1e430     01 00 00 FF 
1e434     2A E4 05 F1 | 	add	objptr, ##554
1e438     F2 1A 02 FB | 	rdlong	arg05, objptr
1e43c     01 00 00 FF 
1e440     2A E4 85 F1 | 	sub	objptr, ##554
1e444     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e448     D8 00 90 3D |  if_ae	jmp	#LR__2410
1e44c     00 1E 56 F2 | 	cmps	local01, #0 wc
1e450     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e454     CC 00 90 CD |  if_b	jmp	#LR__2410
1e458     01 00 00 FF 
1e45c     26 E4 05 F1 | 	add	objptr, ##550
1e460     F2 1A 02 FB | 	rdlong	arg05, objptr
1e464     01 00 00 FF 
1e468     26 E4 85 F1 | 	sub	objptr, ##550
1e46c     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e470     01 00 00 1F 
1e474     26 E4 05 11 |  if_a	add	objptr, ##550
1e478     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e47c     01 00 00 1F 
1e480     26 E4 85 11 |  if_a	sub	objptr, ##550
1e484     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e488                 | '   return
1e488     98 00 90 1D |  if_a	jmp	#LR__2410
1e48c     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e490     0F 1B 02 16 |  if_a	mov	arg05, local01
1e494     10 1F 02 16 |  if_a	mov	local01, local02
1e498     0D 21 02 16 |  if_a	mov	local02, arg05
1e49c     00 1E 56 F2 | 	cmps	local01, #0 wc
1e4a0     00 1E 06 C6 |  if_b	mov	local01, #0
1e4a4     01 00 00 FF 
1e4a8     26 E4 05 F1 | 	add	objptr, ##550
1e4ac     F2 1A 02 FB | 	rdlong	arg05, objptr
1e4b0     01 00 00 FF 
1e4b4     26 E4 85 F1 | 	sub	objptr, ##550
1e4b8     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e4bc     01 00 00 3F 
1e4c0     26 E4 05 31 |  if_ae	add	objptr, ##550
1e4c4     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e4c8     01 00 00 3F 
1e4cc     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e4d0     DD E4 05 F1 | 	add	objptr, #221
1e4d4     F2 12 02 FB | 	rdlong	arg01, objptr
1e4d8     14 E4 05 F1 | 	add	objptr, #20
1e4dc     F2 1A 02 FB | 	rdlong	arg05, objptr
1e4e0     02 1A 66 F0 | 	shl	arg05, #2
1e4e4     0B 1B 02 FD | 	qmul	arg05, arg03
1e4e8                 | ' if x1>x2
1e4e8                 | '   x1,x2:=x2,x1
1e4e8                 | ' if x1<0 
1e4e8                 | '   x1:=0
1e4e8                 | ' if x2>=xres
1e4e8                 | '   x2:=xres-1  
1e4e8     01 20 86 31 |  if_ae	sub	local02, #1
1e4ec                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e4ec     01 16 06 F6 | 	mov	arg03, #1
1e4f0     10 17 02 F1 | 	add	arg03, local02
1e4f4     0F 17 82 F1 | 	sub	arg03, local01
1e4f8     0C 15 02 F6 | 	mov	arg02, arg04
1e4fc     00 18 06 F6 | 	mov	arg04, #0
1e500     01 1A 06 F6 | 	mov	arg05, #1
1e504     0A 00 00 FF 
1e508     DB E5 05 F1 | 	add	objptr, ##5595
1e50c     18 20 62 FD | 	getqx	local02
1e510     0F 21 02 F1 | 	add	local02, local01
1e514     10 13 02 F1 | 	add	arg01, local02
1e518     0C 18 B0 FD | 	call	#_psram_spin2_fill
1e51c     0B 00 00 FF 
1e520     CC E4 85 F1 | 	sub	objptr, ##5836
1e524                 | LR__2410
1e524     A7 F0 03 F6 | 	mov	ptra, fp
1e528     B2 00 A0 FD | 	call	#popregs_
1e52c                 | _hg010b_spin2_fastline_ret
1e52c     2D 00 64 FD | 	ret
1e530                 | 
1e530                 | ' 
1e530                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e530                 | _hg010b_spin2_draw
1e530     0E 4A 05 F6 | 	mov	COUNT_, #14
1e534     A8 00 A0 FD | 	call	#pushregs_
1e538     09 1F 02 F6 | 	mov	local01, arg01
1e53c     0A 21 02 F6 | 	mov	local02, arg02
1e540     0B 23 02 F6 | 	mov	local03, arg03
1e544     0C 25 02 F6 | 	mov	local04, arg04
1e548     0D 27 02 F6 | 	mov	local05, arg05
1e54c                 | ' 
1e54c                 | ' if (y1==y2)
1e54c     12 21 0A F2 | 	cmp	local02, local04 wz
1e550     18 00 90 5D |  if_ne	jmp	#LR__2420
1e554                 | '   fastline(x1,x2,y1,c)
1e554     0F 13 02 F6 | 	mov	arg01, local01
1e558     11 15 02 F6 | 	mov	arg02, local03
1e55c     10 17 02 F6 | 	mov	arg03, local02
1e560     13 19 02 F6 | 	mov	arg04, local05
1e564     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e568     F8 00 90 FD | 	jmp	#LR__2426
1e56c                 | LR__2420
1e56c                 | ' else  
1e56c                 | '   x:=x1
1e56c     0F 29 02 F6 | 	mov	local06, local01
1e570                 | '   y:=y1
1e570     10 2B 02 F6 | 	mov	local07, local02
1e574                 | ' 
1e574                 | '   if (x1<x2) 
1e574     11 1F 52 F2 | 	cmps	local01, local03 wc
1e578                 | '     xi:=1
1e578     01 2C 06 C6 |  if_b	mov	local08, #1
1e57c                 | '     dx:=x2-x1
1e57c     11 2F 02 C6 |  if_b	mov	local09, local03
1e580     0F 2F 82 C1 |  if_b	sub	local09, local01
1e584                 | '   else
1e584                 | '     xi:=-1
1e584     01 2C 66 36 |  if_ae	neg	local08, #1
1e588                 | '     dx:=x1-x2
1e588     11 1F 82 31 |  if_ae	sub	local01, local03
1e58c     0F 2F 02 36 |  if_ae	mov	local09, local01
1e590                 | '   
1e590                 | '   if (y1<y2) 
1e590     12 21 52 F2 | 	cmps	local02, local04 wc
1e594                 | '     yi:=1
1e594     01 30 06 C6 |  if_b	mov	local10, #1
1e598                 | '     dy:=y2-y1
1e598     12 33 02 C6 |  if_b	mov	local11, local04
1e59c     10 33 82 C1 |  if_b	sub	local11, local02
1e5a0                 | '   else
1e5a0                 | '     yi:=-1
1e5a0     01 30 66 36 |  if_ae	neg	local10, #1
1e5a4                 | '     dy:=y1-y2
1e5a4     12 21 82 31 |  if_ae	sub	local02, local04
1e5a8     10 33 02 36 |  if_ae	mov	local11, local02
1e5ac                 | ' 
1e5ac                 | '   putpixel(x,y,c)
1e5ac     13 17 02 F6 | 	mov	arg03, local05
1e5b0     14 13 02 F6 | 	mov	arg01, local06
1e5b4     15 15 02 F6 | 	mov	arg02, local07
1e5b8     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e5bc                 | ' 
1e5bc                 | '   if (dx>dy)
1e5bc     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e5c0     50 00 90 ED |  if_be	jmp	#LR__2422
1e5c4                 | '     ai:=(dy-dx)*2
1e5c4     19 35 02 F6 | 	mov	local12, local11
1e5c8     17 35 82 F1 | 	sub	local12, local09
1e5cc     01 34 66 F0 | 	shl	local12, #1
1e5d0                 | '     bi:=dy*2
1e5d0     01 32 66 F0 | 	shl	local11, #1
1e5d4     19 37 02 F6 | 	mov	local13, local11
1e5d8                 | '     d:= bi-dx
1e5d8     1B 39 02 F6 | 	mov	local14, local13
1e5dc     17 39 82 F1 | 	sub	local14, local09
1e5e0                 | '     repeat while (x<>x2) 
1e5e0                 | LR__2421
1e5e0     11 29 0A F2 | 	cmp	local06, local03 wz
1e5e4     7C 00 90 AD |  if_e	jmp	#LR__2425
1e5e8                 | '       if (d>=0) 
1e5e8     00 38 56 F2 | 	cmps	local14, #0 wc
1e5ec                 | '         x+=xi
1e5ec     16 29 02 31 |  if_ae	add	local06, local08
1e5f0                 | '         y+=yi
1e5f0     18 2B 02 31 |  if_ae	add	local07, local10
1e5f4                 | '         d+=ai
1e5f4     1A 39 02 31 |  if_ae	add	local14, local12
1e5f8                 | '       else
1e5f8                 | '         d+=bi
1e5f8     1B 39 02 C1 |  if_b	add	local14, local13
1e5fc                 | '         x+=xi
1e5fc     16 29 02 C1 |  if_b	add	local06, local08
1e600                 | '       putpixel(x,y,c)
1e600     14 13 02 F6 | 	mov	arg01, local06
1e604     15 15 02 F6 | 	mov	arg02, local07
1e608     13 17 02 F6 | 	mov	arg03, local05
1e60c     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e610     CC FF 9F FD | 	jmp	#LR__2421
1e614                 | LR__2422
1e614                 | '   else
1e614                 | '     ai:=(dx-dy)*2
1e614     17 35 02 F6 | 	mov	local12, local09
1e618     19 35 82 F1 | 	sub	local12, local11
1e61c     01 34 66 F0 | 	shl	local12, #1
1e620                 | '     bi:=dx*2
1e620     01 2E 66 F0 | 	shl	local09, #1
1e624     17 37 02 F6 | 	mov	local13, local09
1e628                 | '     d:=bi-dy
1e628     1B 39 02 F6 | 	mov	local14, local13
1e62c     19 39 82 F1 | 	sub	local14, local11
1e630                 | '     repeat while (y<>y2)
1e630                 | LR__2423
1e630     12 2B 0A F2 | 	cmp	local07, local04 wz
1e634     2C 00 90 AD |  if_e	jmp	#LR__2424
1e638                 | '       if (d>=0)
1e638     00 38 56 F2 | 	cmps	local14, #0 wc
1e63c                 | '         x+=xi
1e63c     16 29 02 31 |  if_ae	add	local06, local08
1e640                 | '         y+=yi
1e640     18 2B 02 31 |  if_ae	add	local07, local10
1e644                 | '         d+=ai
1e644     1A 39 02 31 |  if_ae	add	local14, local12
1e648                 | '       else
1e648                 | '         d+=bi
1e648     1B 39 02 C1 |  if_b	add	local14, local13
1e64c                 | '         y+=yi
1e64c     18 2B 02 C1 |  if_b	add	local07, local10
1e650                 | '       putpixel(x, y,c)
1e650     14 13 02 F6 | 	mov	arg01, local06
1e654     15 15 02 F6 | 	mov	arg02, local07
1e658     13 17 02 F6 | 	mov	arg03, local05
1e65c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e660     CC FF 9F FD | 	jmp	#LR__2423
1e664                 | LR__2424
1e664                 | LR__2425
1e664                 | LR__2426
1e664     A7 F0 03 F6 | 	mov	ptra, fp
1e668     B2 00 A0 FD | 	call	#popregs_
1e66c                 | _hg010b_spin2_draw_ret
1e66c     2D 00 64 FD | 	ret
1e670                 | 
1e670                 | '  
1e670                 | ' pub fillpush(val) 
1e670                 | _hg010b_spin2_fillpush
1e670                 | ' fillstack[fillptr]:=val
1e670     0B 00 00 FF 
1e674     BA E4 05 F1 | 	add	objptr, ##5818
1e678     F2 00 02 FB | 	rdlong	_var01, objptr
1e67c     02 00 66 F0 | 	shl	_var01, #2
1e680     0A 00 00 FF 
1e684     00 E4 85 F1 | 	sub	objptr, ##5120
1e688     F2 00 02 F1 | 	add	_var01, objptr
1e68c     00 13 62 FC | 	wrlong	arg01, _var01
1e690                 | ' fillptr+=1   
1e690     0A 00 00 FF 
1e694     00 E4 05 F1 | 	add	objptr, ##5120
1e698     F2 00 02 FB | 	rdlong	_var01, objptr
1e69c     01 00 06 F1 | 	add	_var01, #1
1e6a0     F2 00 62 FC | 	wrlong	_var01, objptr
1e6a4     0B 00 00 FF 
1e6a8     BA E4 85 F1 | 	sub	objptr, ##5818
1e6ac                 | _hg010b_spin2_fillpush_ret
1e6ac     2D 00 64 FD | 	ret
1e6b0                 | 
1e6b0                 | ' 
1e6b0                 | '     
1e6b0                 | ' pub fillpop() : val
1e6b0                 | _hg010b_spin2_fillpop
1e6b0                 | ' 
1e6b0                 | ' fillptr-=1
1e6b0     0B 00 00 FF 
1e6b4     BA E4 05 F1 | 	add	objptr, ##5818
1e6b8     F2 FA 01 FB | 	rdlong	result1, objptr
1e6bc     01 FA 85 F1 | 	sub	result1, #1
1e6c0     F2 FA 61 FC | 	wrlong	result1, objptr
1e6c4                 | ' if fillptr<0
1e6c4     0B 00 00 FF 
1e6c8     BA E4 85 F1 | 	sub	objptr, ##5818
1e6cc     00 FA 55 F2 | 	cmps	result1, #0 wc
1e6d0                 | '   fillptr:=0
1e6d0     0B 00 00 CF 
1e6d4     BA E4 05 C1 |  if_b	add	objptr, ##5818
1e6d8     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e6dc     0B 00 00 CF 
1e6e0     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1e6e4                 | '   val:=-12345
1e6e4     E7 FF 7F CF 
1e6e8     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1e6ec     28 00 90 CD |  if_b	jmp	#LR__2430
1e6f0                 | ' else 
1e6f0                 | '   val:=fillstack[fillptr]
1e6f0     0B 00 00 FF 
1e6f4     BA E4 05 F1 | 	add	objptr, ##5818
1e6f8     F2 00 02 FB | 	rdlong	_var01, objptr
1e6fc     02 00 66 F0 | 	shl	_var01, #2
1e700     0A 00 00 FF 
1e704     00 E4 85 F1 | 	sub	objptr, ##5120
1e708     F2 00 02 F1 | 	add	_var01, objptr
1e70c     00 01 02 FB | 	rdlong	_var01, _var01
1e710     01 00 00 FF 
1e714     BA E4 85 F1 | 	sub	objptr, ##698
1e718                 | LR__2430
1e718                 | ' return val
1e718     00 FB 01 F6 | 	mov	result1, _var01
1e71c                 | _hg010b_spin2_fillpop_ret
1e71c     2D 00 64 FD | 	ret
1e720                 | 
1e720                 | ' 
1e720                 | '       
1e720                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1e720                 | _hg010b_spin2_fill
1e720     0B 4A 05 F6 | 	mov	COUNT_, #11
1e724     A8 00 A0 FD | 	call	#pushregs_
1e728                 | ' 
1e728                 | ' newcolor:=newcolor & 255
1e728     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1e72c                 | ' oldcolor:=oldcolor & 255
1e72c     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1e730                 | ' 
1e730                 | ' if (oldcolor == newcolor) 
1e730     0F 21 0A F2 | 	cmp	local02, local01 wz
1e734                 | '   return
1e734     70 02 90 AD |  if_e	jmp	#LR__2449
1e738                 | ' 
1e738                 | ' fillptr:=0
1e738     0B 00 00 FF 
1e73c     BA E4 05 F1 | 	add	objptr, ##5818
1e740     F2 00 68 FC | 	wrlong	#0, objptr
1e744                 | ' fillmax:=0
1e744     04 E4 05 F1 | 	add	objptr, #4
1e748     F2 00 68 FC | 	wrlong	#0, objptr
1e74c     0B 00 00 FF 
1e750     BE E4 85 F1 | 	sub	objptr, ##5822
1e754                 | ' fillpush(x)
1e754     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e758                 | ' fillpush(y)
1e758     0A 13 02 F6 | 	mov	arg01, arg02
1e75c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e760                 | ' y:=fillpop()
1e760     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1e764     FD 22 02 F6 | 	mov	local03, result1
1e768                 | ' x:=fillpop()
1e768     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1e76c     FD 24 02 F6 | 	mov	local04, result1
1e770                 | ' 'pinhigh(38)
1e770                 | ' repeat while (x>-1)       
1e770                 | LR__2440
1e770     00 24 56 F2 | 	cmps	local04, #0 wc
1e774     30 02 90 CD |  if_b	jmp	#LR__2448
1e778                 | '  ' pintoggle(39)
1e778                 | '   x1 := x
1e778     12 27 02 F6 | 	mov	local05, local04
1e77c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1e77c                 | LR__2441
1e77c     00 28 06 F6 | 	mov	local06, #0
1e780     00 2A 06 F6 | 	mov	local07, #0
1e784     00 26 56 F2 | 	cmps	local05, #0 wc
1e788     01 2A 66 36 |  if_ae	neg	local07, #1
1e78c     00 2A 0E F2 | 	cmp	local07, #0 wz
1e790     00 28 26 56 |  if_ne	not	local06, #0
1e794     00 2C 06 F6 | 	mov	local08, #0
1e798     00 2E 06 F6 | 	mov	local09, #0
1e79c     11 15 02 F6 | 	mov	arg02, local03
1e7a0     13 13 02 F6 | 	mov	arg01, local05
1e7a4     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e7a8     10 FB 09 F2 | 	cmp	result1, local02 wz
1e7ac     00 2E 26 A6 |  if_e	not	local09, #0
1e7b0     00 2E 0E F2 | 	cmp	local09, #0 wz
1e7b4     00 2C 26 56 |  if_ne	not	local08, #0
1e7b8     16 29 CA F7 | 	test	local06, local08 wz
1e7bc                 | '     x1--
1e7bc     01 26 86 51 |  if_ne	sub	local05, #1
1e7c0     B8 FF 9F 5D |  if_ne	jmp	#LR__2441
1e7c4                 | '   x1++
1e7c4     01 26 06 F1 | 	add	local05, #1
1e7c8                 | '   spanabove := 0
1e7c8     00 30 06 F6 | 	mov	local10, #0
1e7cc                 | '   spanbelow := 0
1e7cc     00 32 06 F6 | 	mov	local11, #0
1e7d0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1e7d0                 | LR__2442
1e7d0     00 28 06 F6 | 	mov	local06, #0
1e7d4     02 00 00 FF 
1e7d8     00 26 56 F2 | 	cmps	local05, ##1024 wc
1e7dc     00 28 26 C6 |  if_b	not	local06, #0
1e7e0     00 2C 06 F6 | 	mov	local08, #0
1e7e4     00 2E 06 F6 | 	mov	local09, #0
1e7e8     11 15 02 F6 | 	mov	arg02, local03
1e7ec     13 13 02 F6 | 	mov	arg01, local05
1e7f0     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e7f4     10 FB 09 F2 | 	cmp	result1, local02 wz
1e7f8     00 2E 26 A6 |  if_e	not	local09, #0
1e7fc     00 2E 0E F2 | 	cmp	local09, #0 wz
1e800     00 2C 26 56 |  if_ne	not	local08, #0
1e804     16 29 CA F7 | 	test	local06, local08 wz
1e808     88 01 90 AD |  if_e	jmp	#LR__2447
1e80c                 | '     putpixel2 (x1,y, newcolor & 255)
1e80c     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1e810     13 13 02 F6 | 	mov	arg01, local05
1e814     11 15 02 F6 | 	mov	arg02, local03
1e818     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1e81c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1e81c     00 28 06 F6 | 	mov	local06, #0
1e820     00 2A 06 F6 | 	mov	local07, #0
1e824     00 30 0E F2 | 	cmp	local10, #0 wz
1e828     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1e82c     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1e830     00 2A 0E F2 | 	cmp	local07, #0 wz
1e834     00 28 26 56 |  if_ne	not	local06, #0
1e838     00 2C 06 F6 | 	mov	local08, #0
1e83c     00 2E 06 F6 | 	mov	local09, #0
1e840     11 15 02 F6 | 	mov	arg02, local03
1e844     01 14 86 F1 | 	sub	arg02, #1
1e848     13 13 02 F6 | 	mov	arg01, local05
1e84c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e850     10 FB 09 F2 | 	cmp	result1, local02 wz
1e854     00 2E 26 A6 |  if_e	not	local09, #0
1e858     00 2E 0E F2 | 	cmp	local09, #0 wz
1e85c     00 2C 26 56 |  if_ne	not	local08, #0
1e860     16 29 CA F7 | 	test	local06, local08 wz
1e864     1C 00 90 AD |  if_e	jmp	#LR__2443
1e868                 | '       fillpush(x1)
1e868     13 13 02 F6 | 	mov	arg01, local05
1e86c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1e870                 | '       fillpush(y-1)
1e870     11 13 02 F6 | 	mov	arg01, local03
1e874     01 12 86 F1 | 	sub	arg01, #1
1e878     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1e87c                 | '       spanabove := 1 
1e87c     01 30 06 F6 | 	mov	local10, #1
1e880     4C 00 90 FD | 	jmp	#LR__2444
1e884                 | LR__2443
1e884                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1e884     00 28 06 F6 | 	mov	local06, #0
1e888     00 2A 06 F6 | 	mov	local07, #0
1e88c     00 30 0E F2 | 	cmp	local10, #0 wz
1e890     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1e894     01 2A 66 16 |  if_a	neg	local07, #1
1e898     00 2A 0E F2 | 	cmp	local07, #0 wz
1e89c     00 28 26 56 |  if_ne	not	local06, #0
1e8a0     00 2C 06 F6 | 	mov	local08, #0
1e8a4     00 2E 06 F6 | 	mov	local09, #0
1e8a8     11 15 02 F6 | 	mov	arg02, local03
1e8ac     01 14 86 F1 | 	sub	arg02, #1
1e8b0     13 13 02 F6 | 	mov	arg01, local05
1e8b4     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e8b8     10 FB 09 F2 | 	cmp	result1, local02 wz
1e8bc     00 2E 26 56 |  if_ne	not	local09, #0
1e8c0     00 2E 0E F2 | 	cmp	local09, #0 wz
1e8c4     00 2C 26 56 |  if_ne	not	local08, #0
1e8c8     16 29 CA F7 | 	test	local06, local08 wz
1e8cc                 | '       spanabove := 0 
1e8cc     00 30 06 56 |  if_ne	mov	local10, #0
1e8d0                 | LR__2444
1e8d0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1e8d0     00 28 06 F6 | 	mov	local06, #0
1e8d4     00 2A 06 F6 | 	mov	local07, #0
1e8d8     00 32 0E F2 | 	cmp	local11, #0 wz
1e8dc     01 00 00 AF 
1e8e0     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1e8e4     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1e8e8     00 2A 0E F2 | 	cmp	local07, #0 wz
1e8ec     00 28 26 56 |  if_ne	not	local06, #0
1e8f0     00 2C 06 F6 | 	mov	local08, #0
1e8f4     00 2E 06 F6 | 	mov	local09, #0
1e8f8     11 15 02 F6 | 	mov	arg02, local03
1e8fc     01 14 06 F1 | 	add	arg02, #1
1e900     13 13 02 F6 | 	mov	arg01, local05
1e904     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e908     10 FB 09 F2 | 	cmp	result1, local02 wz
1e90c     00 2E 26 A6 |  if_e	not	local09, #0
1e910     00 2E 0E F2 | 	cmp	local09, #0 wz
1e914     00 2C 26 56 |  if_ne	not	local08, #0
1e918     16 29 CA F7 | 	test	local06, local08 wz
1e91c     1C 00 90 AD |  if_e	jmp	#LR__2445
1e920                 | '       fillpush(x1)
1e920     13 13 02 F6 | 	mov	arg01, local05
1e924     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1e928                 | '       fillpush(y + 1)
1e928     11 13 02 F6 | 	mov	arg01, local03
1e92c     01 12 06 F1 | 	add	arg01, #1
1e930     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1e934                 | '       spanBelow := 1
1e934     01 32 06 F6 | 	mov	local11, #1
1e938     50 00 90 FD | 	jmp	#LR__2446
1e93c                 | LR__2445
1e93c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1e93c     00 28 06 F6 | 	mov	local06, #0
1e940     00 2A 06 F6 | 	mov	local07, #0
1e944     00 32 0E F2 | 	cmp	local11, #0 wz
1e948     01 00 00 5F 
1e94c     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1e950     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1e954     00 2A 0E F2 | 	cmp	local07, #0 wz
1e958     00 28 26 56 |  if_ne	not	local06, #0
1e95c     00 2C 06 F6 | 	mov	local08, #0
1e960     00 2E 06 F6 | 	mov	local09, #0
1e964     11 15 02 F6 | 	mov	arg02, local03
1e968     01 14 06 F1 | 	add	arg02, #1
1e96c     13 13 02 F6 | 	mov	arg01, local05
1e970     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e974     10 FB 09 F2 | 	cmp	result1, local02 wz
1e978     00 2E 26 56 |  if_ne	not	local09, #0
1e97c     00 2E 0E F2 | 	cmp	local09, #0 wz
1e980     00 2C 26 56 |  if_ne	not	local08, #0
1e984     16 29 CA F7 | 	test	local06, local08 wz
1e988                 | '       spanbelow := 0
1e988     00 32 06 56 |  if_ne	mov	local11, #0
1e98c                 | LR__2446
1e98c                 | '     x1++
1e98c     01 26 06 F1 | 	add	local05, #1
1e990     3C FE 9F FD | 	jmp	#LR__2442
1e994                 | LR__2447
1e994                 | '   y:=fillpop()
1e994     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1e998     FD 22 02 F6 | 	mov	local03, result1
1e99c                 | '   x:=fillpop()
1e99c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1e9a0     FD 24 02 F6 | 	mov	local04, result1
1e9a4     C8 FD 9F FD | 	jmp	#LR__2440
1e9a8                 | LR__2448
1e9a8                 | LR__2449
1e9a8     A7 F0 03 F6 | 	mov	ptra, fp
1e9ac     B2 00 A0 FD | 	call	#popregs_
1e9b0                 | _hg010b_spin2_fill_ret
1e9b0     2D 00 64 FD | 	ret
1e9b4                 | 
1e9b4                 | ' 'pinlow(38)    
1e9b4                 | ' 
1e9b4                 | ' '-- A filled circle -----------------------------------------------------
1e9b4                 | ' 
1e9b4                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1e9b4                 | _hg010b_spin2_fcircle
1e9b4     08 4A 05 F6 | 	mov	COUNT_, #8
1e9b8     A8 00 A0 FD | 	call	#pushregs_
1e9bc     0B 1F 02 F6 | 	mov	local01, arg03
1e9c0     FF FF 7F FF 
1e9c4     FE 1F 06 FD | 	qmul	local01, ##-2
1e9c8     09 21 02 F6 | 	mov	local02, arg01
1e9cc     0A 23 02 F6 | 	mov	local03, arg02
1e9d0     0C 25 02 F6 | 	mov	local04, arg04
1e9d4                 | ' 
1e9d4                 | ' d:=5-4*r
1e9d4     0F 19 02 F6 | 	mov	arg04, local01
1e9d8     02 18 66 F0 | 	shl	arg04, #2
1e9dc     05 26 06 F6 | 	mov	local05, #5
1e9e0     0C 27 82 F1 | 	sub	local05, arg04
1e9e4                 | ' x:=0
1e9e4     00 28 06 F6 | 	mov	local06, #0
1e9e8                 | ' y:=r
1e9e8                 | ' da:=(-2*r+5)*4
1e9e8                 | ' db:=3*4
1e9e8     0C 2A 06 F6 | 	mov	local07, #12
1e9ec                 | ' repeat while (x<=y) 
1e9ec     18 2C 62 FD | 	getqx	local08
1e9f0     05 2C 06 F1 | 	add	local08, #5
1e9f4     02 2C 66 F0 | 	shl	local08, #2
1e9f8                 | LR__2450
1e9f8     0F 29 5A F2 | 	cmps	local06, local01 wcz
1e9fc     B4 00 90 1D |  if_a	jmp	#LR__2452
1ea00                 | '   fastline(x0-x,x0+x,y0-y,c)
1ea00     10 13 02 F6 | 	mov	arg01, local02
1ea04     14 13 82 F1 | 	sub	arg01, local06
1ea08     10 15 02 F6 | 	mov	arg02, local02
1ea0c     14 15 02 F1 | 	add	arg02, local06
1ea10     11 17 02 F6 | 	mov	arg03, local03
1ea14     0F 17 82 F1 | 	sub	arg03, local01
1ea18     12 19 02 F6 | 	mov	arg04, local04
1ea1c     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea20                 | '   fastline(x0-x,x0+x,y0+y,c)
1ea20     10 13 02 F6 | 	mov	arg01, local02
1ea24     14 13 82 F1 | 	sub	arg01, local06
1ea28     10 15 02 F6 | 	mov	arg02, local02
1ea2c     14 15 02 F1 | 	add	arg02, local06
1ea30     11 17 02 F6 | 	mov	arg03, local03
1ea34     0F 17 02 F1 | 	add	arg03, local01
1ea38     12 19 02 F6 | 	mov	arg04, local04
1ea3c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea40                 | '   fastline(x0-y,x0+y,y0-x,c)
1ea40     10 13 02 F6 | 	mov	arg01, local02
1ea44     0F 13 82 F1 | 	sub	arg01, local01
1ea48     10 15 02 F6 | 	mov	arg02, local02
1ea4c     0F 15 02 F1 | 	add	arg02, local01
1ea50     11 17 02 F6 | 	mov	arg03, local03
1ea54     14 17 82 F1 | 	sub	arg03, local06
1ea58     12 19 02 F6 | 	mov	arg04, local04
1ea5c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea60                 | '   fastline(x0-y,x0+y,y0+x,c)
1ea60     10 13 02 F6 | 	mov	arg01, local02
1ea64     0F 13 82 F1 | 	sub	arg01, local01
1ea68     10 15 02 F6 | 	mov	arg02, local02
1ea6c     0F 15 02 F1 | 	add	arg02, local01
1ea70     11 17 02 F6 | 	mov	arg03, local03
1ea74     14 17 02 F1 | 	add	arg03, local06
1ea78     12 19 02 F6 | 	mov	arg04, local04
1ea7c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea80                 | '   if d>0 
1ea80     01 26 56 F2 | 	cmps	local05, #1 wc
1ea84     18 00 90 CD |  if_b	jmp	#LR__2451
1ea88                 | '     d+=da
1ea88     16 27 02 F1 | 	add	local05, local08
1ea8c                 | '     y-=1
1ea8c     01 1E 86 F1 | 	sub	local01, #1
1ea90                 | '     x+=1
1ea90     01 28 06 F1 | 	add	local06, #1
1ea94                 | '     da+=4*4
1ea94     10 2C 06 F1 | 	add	local08, #16
1ea98                 | '     db+=2*4
1ea98     08 2A 06 F1 | 	add	local07, #8
1ea9c     58 FF 9F FD | 	jmp	#LR__2450
1eaa0                 | LR__2451
1eaa0                 | '   else
1eaa0                 | '     d+=db
1eaa0     15 27 02 F1 | 	add	local05, local07
1eaa4                 | '     x+=1
1eaa4     01 28 06 F1 | 	add	local06, #1
1eaa8                 | '     da+=2*4
1eaa8     08 2C 06 F1 | 	add	local08, #8
1eaac                 | '     db+=2*4
1eaac     08 2A 06 F1 | 	add	local07, #8
1eab0     44 FF 9F FD | 	jmp	#LR__2450
1eab4                 | LR__2452
1eab4     A7 F0 03 F6 | 	mov	ptra, fp
1eab8     B2 00 A0 FD | 	call	#popregs_
1eabc                 | _hg010b_spin2_fcircle_ret
1eabc     2D 00 64 FD | 	ret
1eac0                 | 
1eac0                 | '  
1eac0                 | ' '-- A circle ------------------------------------------------------------ 
1eac0                 | '  
1eac0                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1eac0                 | _hg010b_spin2_circle
1eac0     08 4A 05 F6 | 	mov	COUNT_, #8
1eac4     A8 00 A0 FD | 	call	#pushregs_
1eac8     0B 1F 02 F6 | 	mov	local01, arg03
1eacc     FF FF 7F FF 
1ead0     FE 1F 06 FD | 	qmul	local01, ##-2
1ead4     09 21 02 F6 | 	mov	local02, arg01
1ead8     0A 23 02 F6 | 	mov	local03, arg02
1eadc     0C 25 02 F6 | 	mov	local04, arg04
1eae0                 | ' 
1eae0                 | '  
1eae0                 | ' d:=5-4*r
1eae0     0F 19 02 F6 | 	mov	arg04, local01
1eae4     02 18 66 F0 | 	shl	arg04, #2
1eae8     05 26 06 F6 | 	mov	local05, #5
1eaec     0C 27 82 F1 | 	sub	local05, arg04
1eaf0                 | ' x:=0
1eaf0     00 28 06 F6 | 	mov	local06, #0
1eaf4                 | ' y:=r
1eaf4                 | ' da:=(-2*r+5)*4
1eaf4                 | ' db:=3*4
1eaf4     0C 2A 06 F6 | 	mov	local07, #12
1eaf8                 | ' repeat while (x<=y) 
1eaf8     18 2C 62 FD | 	getqx	local08
1eafc     05 2C 06 F1 | 	add	local08, #5
1eb00     02 2C 66 F0 | 	shl	local08, #2
1eb04                 | LR__2460
1eb04     0F 29 5A F2 | 	cmps	local06, local01 wcz
1eb08     F4 00 90 1D |  if_a	jmp	#LR__2462
1eb0c                 | '   putpixel(x0-x,y0-y,c)
1eb0c     10 13 02 F6 | 	mov	arg01, local02
1eb10     14 13 82 F1 | 	sub	arg01, local06
1eb14     11 15 02 F6 | 	mov	arg02, local03
1eb18     0F 15 82 F1 | 	sub	arg02, local01
1eb1c     12 17 02 F6 | 	mov	arg03, local04
1eb20     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb24                 | '   putpixel(x0-x,y0+y,c)
1eb24     10 13 02 F6 | 	mov	arg01, local02
1eb28     14 13 82 F1 | 	sub	arg01, local06
1eb2c     11 15 02 F6 | 	mov	arg02, local03
1eb30     0F 15 02 F1 | 	add	arg02, local01
1eb34     12 17 02 F6 | 	mov	arg03, local04
1eb38     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb3c                 | '   putpixel(x0+x,y0-y,c)
1eb3c     10 13 02 F6 | 	mov	arg01, local02
1eb40     14 13 02 F1 | 	add	arg01, local06
1eb44     11 15 02 F6 | 	mov	arg02, local03
1eb48     0F 15 82 F1 | 	sub	arg02, local01
1eb4c     12 17 02 F6 | 	mov	arg03, local04
1eb50     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb54                 | '   putpixel(x0+x,y0+y,c)
1eb54     10 13 02 F6 | 	mov	arg01, local02
1eb58     14 13 02 F1 | 	add	arg01, local06
1eb5c     11 15 02 F6 | 	mov	arg02, local03
1eb60     0F 15 02 F1 | 	add	arg02, local01
1eb64     12 17 02 F6 | 	mov	arg03, local04
1eb68     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb6c                 | '   putpixel(x0-y,y0-x,c)
1eb6c     10 13 02 F6 | 	mov	arg01, local02
1eb70     0F 13 82 F1 | 	sub	arg01, local01
1eb74     11 15 02 F6 | 	mov	arg02, local03
1eb78     14 15 82 F1 | 	sub	arg02, local06
1eb7c     12 17 02 F6 | 	mov	arg03, local04
1eb80     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eb84                 | '   putpixel(x0-y,y0+x,c)
1eb84     10 13 02 F6 | 	mov	arg01, local02
1eb88     0F 13 82 F1 | 	sub	arg01, local01
1eb8c     11 15 02 F6 | 	mov	arg02, local03
1eb90     14 15 02 F1 | 	add	arg02, local06
1eb94     12 17 02 F6 | 	mov	arg03, local04
1eb98     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eb9c                 | '   putpixel(x0+y,y0-x,c)
1eb9c     10 13 02 F6 | 	mov	arg01, local02
1eba0     0F 13 02 F1 | 	add	arg01, local01
1eba4     11 15 02 F6 | 	mov	arg02, local03
1eba8     14 15 82 F1 | 	sub	arg02, local06
1ebac     12 17 02 F6 | 	mov	arg03, local04
1ebb0     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ebb4                 | '   putpixel(x0+y,y0+x,c)
1ebb4     10 13 02 F6 | 	mov	arg01, local02
1ebb8     0F 13 02 F1 | 	add	arg01, local01
1ebbc     11 15 02 F6 | 	mov	arg02, local03
1ebc0     14 15 02 F1 | 	add	arg02, local06
1ebc4     12 17 02 F6 | 	mov	arg03, local04
1ebc8     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ebcc                 | '   if d>0 
1ebcc     01 26 56 F2 | 	cmps	local05, #1 wc
1ebd0     18 00 90 CD |  if_b	jmp	#LR__2461
1ebd4                 | '     d+=da
1ebd4     16 27 02 F1 | 	add	local05, local08
1ebd8                 | '     y-=1
1ebd8     01 1E 86 F1 | 	sub	local01, #1
1ebdc                 | '     x+=1
1ebdc     01 28 06 F1 | 	add	local06, #1
1ebe0                 | '     da+=4*4
1ebe0     10 2C 06 F1 | 	add	local08, #16
1ebe4                 | '     db+=2*4
1ebe4     08 2A 06 F1 | 	add	local07, #8
1ebe8     18 FF 9F FD | 	jmp	#LR__2460
1ebec                 | LR__2461
1ebec                 | '   else
1ebec                 | '     d+=db
1ebec     15 27 02 F1 | 	add	local05, local07
1ebf0                 | '     x+=1
1ebf0     01 28 06 F1 | 	add	local06, #1
1ebf4                 | '     da+=2*4
1ebf4     08 2C 06 F1 | 	add	local08, #8
1ebf8                 | '     db+=2*4
1ebf8     08 2A 06 F1 | 	add	local07, #8
1ebfc     04 FF 9F FD | 	jmp	#LR__2460
1ec00                 | LR__2462
1ec00     A7 F0 03 F6 | 	mov	ptra, fp
1ec04     B2 00 A0 FD | 	call	#popregs_
1ec08                 | _hg010b_spin2_circle_ret
1ec08     2D 00 64 FD | 	ret
1ec0c                 | 
1ec0c                 | '     
1ec0c                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ec0c                 | ' 
1ec0c                 | ' pub frame(x1,y1,x2,y2,c)
1ec0c                 | _hg010b_spin2_frame
1ec0c     05 4A 05 F6 | 	mov	COUNT_, #5
1ec10     A8 00 A0 FD | 	call	#pushregs_
1ec14     09 1F 02 F6 | 	mov	local01, arg01
1ec18     0A 21 02 F6 | 	mov	local02, arg02
1ec1c     0B 23 02 F6 | 	mov	local03, arg03
1ec20     0C 25 02 F6 | 	mov	local04, arg04
1ec24     0D 27 02 F6 | 	mov	local05, arg05
1ec28                 | ' 
1ec28                 | ' fastline(x1,x2,y1,c)
1ec28     0F 13 02 F6 | 	mov	arg01, local01
1ec2c     11 15 02 F6 | 	mov	arg02, local03
1ec30     10 17 02 F6 | 	mov	arg03, local02
1ec34     13 19 02 F6 | 	mov	arg04, local05
1ec38     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ec3c                 | ' fastline(x1,x2,y2,c)
1ec3c     0F 13 02 F6 | 	mov	arg01, local01
1ec40     11 15 02 F6 | 	mov	arg02, local03
1ec44     12 17 02 F6 | 	mov	arg03, local04
1ec48     13 19 02 F6 | 	mov	arg04, local05
1ec4c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ec50                 | ' line(x1,y1,x1,y2,c)
1ec50     0F 13 02 F6 | 	mov	arg01, local01
1ec54     10 15 02 F6 | 	mov	arg02, local02
1ec58     0F 17 02 F6 | 	mov	arg03, local01
1ec5c     12 19 02 F6 | 	mov	arg04, local04
1ec60     13 1B 02 F6 | 	mov	arg05, local05
1ec64                 | ' draw(x1,y1,x2,y2,c)
1ec64     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ec68                 | ' line(x2,y1,x2,y2,c)
1ec68     11 13 02 F6 | 	mov	arg01, local03
1ec6c     10 15 02 F6 | 	mov	arg02, local02
1ec70     11 17 02 F6 | 	mov	arg03, local03
1ec74     12 19 02 F6 | 	mov	arg04, local04
1ec78     13 1B 02 F6 | 	mov	arg05, local05
1ec7c                 | ' draw(x1,y1,x2,y2,c)
1ec7c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1ec80     A7 F0 03 F6 | 	mov	ptra, fp
1ec84     B2 00 A0 FD | 	call	#popregs_
1ec88                 | _hg010b_spin2_frame_ret
1ec88     2D 00 64 FD | 	ret
1ec8c                 | 
1ec8c                 | ' 
1ec8c                 | ' '-- A box (a filled rectangle) ----------------------------------------
1ec8c                 | ' 
1ec8c                 | ' pub box(x1,y1,x2,y2,c) |yy
1ec8c                 | _hg010b_spin2_box
1ec8c     06 4A 05 F6 | 	mov	COUNT_, #6
1ec90     A8 00 A0 FD | 	call	#pushregs_
1ec94     09 1F 02 F6 | 	mov	local01, arg01
1ec98     0A 21 02 F6 | 	mov	local02, arg02
1ec9c     0B 23 02 F6 | 	mov	local03, arg03
1eca0     0C 25 02 F6 | 	mov	local04, arg04
1eca4     0D 27 02 F6 | 	mov	local05, arg05
1eca8                 | ' 
1eca8                 | ' repeat yy from y1 to y2
1eca8     10 25 52 F2 | 	cmps	local04, local02 wc
1ecac     01 28 86 F6 | 	negc	local06, #1
1ecb0     14 25 02 F1 | 	add	local04, local06
1ecb4                 | LR__2470
1ecb4                 | '   fastline(x1,x2,yy,c)
1ecb4     0F 13 02 F6 | 	mov	arg01, local01
1ecb8     11 15 02 F6 | 	mov	arg02, local03
1ecbc     13 19 02 F6 | 	mov	arg04, local05
1ecc0     10 17 02 F6 | 	mov	arg03, local02
1ecc4     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ecc8     14 21 02 F1 | 	add	local02, local06
1eccc     12 21 0A F2 | 	cmp	local02, local04 wz
1ecd0     E0 FF 9F 5D |  if_ne	jmp	#LR__2470
1ecd4     A7 F0 03 F6 | 	mov	ptra, fp
1ecd8     B2 00 A0 FD | 	call	#popregs_
1ecdc                 | _hg010b_spin2_box_ret
1ecdc     2D 00 64 FD | 	ret
1ece0                 | 
1ece0                 | '       
1ece0                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1ece0                 | _hg010b_spin2_putcharxycgf
1ece0                 | ' 
1ece0                 | '  
1ece0                 | ' repeat yy from 0 to 15
1ece0     00 00 06 F6 | 	mov	_var01, #0
1ece4     97 8C 48 FB | 	callpa	#(@LR__2482-@LR__2480)>>2,fcache_load_ptr_
1ece8                 | LR__2480
1ece8                 | ' 
1ece8                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1ece8     95 E4 05 F1 | 	add	objptr, #149
1ecec     F2 02 02 FB | 	rdlong	_var02, objptr
1ecf0     0A 02 66 F0 | 	shl	_var02, #10
1ecf4     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1ecf8     01 05 02 F1 | 	add	_var03, _var02
1ecfc     0B 03 02 F6 | 	mov	_var02, arg03
1ed00     04 02 66 F0 | 	shl	_var02, #4
1ed04     01 05 02 F1 | 	add	_var03, _var02
1ed08     00 05 02 F1 | 	add	_var03, _var01
1ed0c     02 05 C2 FA | 	rdbyte	_var03, _var03
1ed10                 | '   asm
1ed10     00 04 0E F4 | 	testb	_var03, #0 wz
1ed14     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ed18     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ed1c     01 04 0E F4 | 	testb	_var03, #1 wz
1ed20     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ed24     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ed28     02 04 0E F4 | 	testb	_var03, #2 wz
1ed2c     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ed30     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1ed34     03 04 0E F4 | 	testb	_var03, #3 wz
1ed38     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1ed3c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1ed40     04 04 0E F4 | 	testb	_var03, #4 wz
1ed44     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1ed48     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1ed4c     05 04 0E F4 | 	testb	_var03, #5 wz
1ed50     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ed54     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ed58     06 04 0E F4 | 	testb	_var03, #6 wz
1ed5c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ed60     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1ed64     07 04 0E F4 | 	testb	_var03, #7 wz
1ed68     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1ed6c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1ed70                 | '   
1ed70                 | '   ccc[0]:=c1
1ed70     99 E5 05 F1 | 	add	objptr, #409
1ed74     F2 06 62 FC | 	wrlong	_var04, objptr
1ed78                 | '   ccc[1]:=c2 
1ed78     04 E4 05 F1 | 	add	objptr, #4
1ed7c     F2 08 62 FC | 	wrlong	_var05, objptr
1ed80                 | '   long[mailbox0][2]:=8
1ed80     49 E4 85 F1 | 	sub	objptr, #73
1ed84     F2 04 02 FB | 	rdlong	_var03, objptr
1ed88     08 04 06 F1 | 	add	_var03, #8
1ed8c     02 11 68 FC | 	wrlong	#8, _var03
1ed90                 | '   long[mailbox0][1]:=@ccc
1ed90     45 E4 05 F1 | 	add	objptr, #69
1ed94     F2 04 02 F6 | 	mov	_var03, objptr
1ed98     45 E4 85 F1 | 	sub	objptr, #69
1ed9c     F2 02 02 FB | 	rdlong	_var02, objptr
1eda0     04 02 06 F1 | 	add	_var02, #4
1eda4     01 05 62 FC | 	wrlong	_var03, _var02
1eda8                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1eda8     0C E5 85 F1 | 	sub	objptr, #268
1edac     F2 04 02 FB | 	rdlong	_var03, objptr
1edb0     0A 03 02 F6 | 	mov	_var02, arg02
1edb4     00 03 02 F1 | 	add	_var02, _var01
1edb8     0A 02 66 F0 | 	shl	_var02, #10
1edbc     09 0B 02 F6 | 	mov	_var06, arg01
1edc0     02 0A 66 F0 | 	shl	_var06, #2
1edc4     05 03 02 F1 | 	add	_var02, _var06
1edc8     01 05 02 F1 | 	add	_var03, _var02
1edcc     00 00 78 FF 
1edd0     00 04 06 F1 | 	add	_var03, ##-268435456
1edd4     0C E5 05 F1 | 	add	objptr, #268
1edd8     F2 0A 02 FB | 	rdlong	_var06, objptr
1eddc     05 05 62 FC | 	wrlong	_var03, _var06
1ede0                 | '   repeat
1ede0                 | LR__2481
1ede0     F2 04 02 FB | 	rdlong	_var03, objptr
1ede4     02 03 02 FB | 	rdlong	_var02, _var03
1ede8     00 02 56 F2 | 	cmps	_var02, #0 wc
1edec     F0 FF 9F CD |  if_b	jmp	#LR__2481
1edf0     E9 E5 85 F1 | 	sub	objptr, #489
1edf4     01 00 06 F1 | 	add	_var01, #1
1edf8     10 00 56 F2 | 	cmps	_var01, #16 wc
1edfc     E8 FE 9F CD |  if_b	jmp	#LR__2480
1ee00                 | LR__2482
1ee00                 | _hg010b_spin2_putcharxycgf_ret
1ee00     2D 00 64 FD | 	ret
1ee04                 | 
1ee04                 | ' 
1ee04                 | ' 
1ee04                 | ' '**********************************************************************r***
1ee04                 | ' '                                                                        *
1ee04                 | ' ' Font related functions                                                 *
1ee04                 | ' '                                                                        *
1ee04                 | ' '*************************************************************************
1ee04                 | ' 
1ee04                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1ee04                 | ' 
1ee04                 | ' pub setfontfamily(afontnum)
1ee04                 | _hg010b_spin2_setfontfamily
1ee04                 | ' 
1ee04                 | ' font_family:=afontnum
1ee04     95 E4 05 F1 | 	add	objptr, #149
1ee08     F2 12 62 FC | 	wrlong	arg01, objptr
1ee0c     95 E4 85 F1 | 	sub	objptr, #149
1ee10                 | ' 'if afontnum==8
1ee10                 | ' '  font_ptr:=@amiga_font
1ee10                 | ' 
1ee10                 | ' if afontnum==4
1ee10     04 12 0E F2 | 	cmp	arg01, #4 wz
1ee14                 | '   font_ptr:=@st_font
1ee14     08 00 00 AF 
1ee18     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1ee1c     08 E4 05 A1 |  if_e	add	objptr, #8
1ee20     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ee24     08 E4 85 A1 |  if_e	sub	objptr, #8
1ee28     08 00 00 AF 
1ee2c     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1ee30                 | ' if afontnum==0
1ee30     00 12 0E F2 | 	cmp	arg01, #0 wz
1ee34                 | '   font_ptr:=@vga_font
1ee34     08 E4 05 A1 |  if_e	add	objptr, #8
1ee38     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ee3c     08 E4 85 A1 |  if_e	sub	objptr, #8
1ee40                 | _hg010b_spin2_setfontfamily_ret
1ee40     2D 00 64 FD | 	ret
1ee44                 | 
1ee44                 | ' 
1ee44                 | ' '*************************************************************************
1ee44                 | ' '                                                                        *
1ee44                 | ' '  Cursor functions                                                      *
1ee44                 | ' '                                                                        *
1ee44                 | ' '*************************************************************************
1ee44                 | ' 
1ee44                 | ' 
1ee44                 | ' pub setcursorpos(x,y)
1ee44                 | _hg010b_spin2_setcursorpos
1ee44                 | ' 
1ee44                 | ' ''---------- Set the (x,y) position of cursor
1ee44                 | ' 
1ee44                 | ' cursor_x:=x
1ee44     3C E4 05 F1 | 	add	objptr, #60
1ee48     F2 12 52 FC | 	wrword	arg01, objptr
1ee4c                 | ' cursor_y:=y
1ee4c     02 E4 05 F1 | 	add	objptr, #2
1ee50     F2 14 42 FC | 	wrbyte	arg02, objptr
1ee54                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ee54     02 E4 85 F1 | 	sub	objptr, #2
1ee58     F2 14 E2 FA | 	rdword	arg02, objptr
1ee5c     02 14 66 F0 | 	shl	arg02, #2
1ee60     02 E4 05 F1 | 	add	objptr, #2
1ee64     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ee68     3E E4 85 F1 | 	sub	objptr, #62
1ee6c     04 16 66 F0 | 	shl	arg03, #4
1ee70     04 16 06 F1 | 	add	arg03, #4
1ee74     11 12 06 F6 | 	mov	arg01, #17
1ee78     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1ee7c                 | _hg010b_spin2_setcursorpos_ret
1ee7c     2D 00 64 FD | 	ret
1ee80                 | 
1ee80                 | ' 
1ee80                 | ' pub setcursorx(x)
1ee80                 | _hg010b_spin2_setcursorx
1ee80                 | ' cursor_x:=x
1ee80     3C E4 05 F1 | 	add	objptr, #60
1ee84     F2 12 52 FC | 	wrword	arg01, objptr
1ee88                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ee88     F2 14 E2 FA | 	rdword	arg02, objptr
1ee8c     02 14 66 F0 | 	shl	arg02, #2
1ee90     02 E4 05 F1 | 	add	objptr, #2
1ee94     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ee98     3E E4 85 F1 | 	sub	objptr, #62
1ee9c     04 16 66 F0 | 	shl	arg03, #4
1eea0     04 16 06 F1 | 	add	arg03, #4
1eea4     11 12 06 F6 | 	mov	arg01, #17
1eea8     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1eeac                 | _hg010b_spin2_setcursorx_ret
1eeac     2D 00 64 FD | 	ret
1eeb0                 | 
1eeb0                 | ' 
1eeb0                 | ' pub setcursory(y) 
1eeb0                 | _hg010b_spin2_setcursory
1eeb0                 | ' cursor_y:=y
1eeb0     3E E4 05 F1 | 	add	objptr, #62
1eeb4     F2 12 42 FC | 	wrbyte	arg01, objptr
1eeb8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1eeb8     02 E4 85 F1 | 	sub	objptr, #2
1eebc     F2 14 E2 FA | 	rdword	arg02, objptr
1eec0     02 14 66 F0 | 	shl	arg02, #2
1eec4     02 E4 05 F1 | 	add	objptr, #2
1eec8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1eecc     3E E4 85 F1 | 	sub	objptr, #62
1eed0     04 16 66 F0 | 	shl	arg03, #4
1eed4     04 16 06 F1 | 	add	arg03, #4
1eed8     11 12 06 F6 | 	mov	arg01, #17
1eedc     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1eee0                 | _hg010b_spin2_setcursory_ret
1eee0     2D 00 64 FD | 	ret
1eee4                 | 
1eee4                 | ' 
1eee4                 | ' '*************************************************************************
1eee4                 | ' '                                                                        *
1eee4                 | ' '  VBlank functions                                                      *
1eee4                 | ' '                                                                        *
1eee4                 | ' '*************************************************************************
1eee4                 | ' 
1eee4                 | ' pub waitvbl(amount) | i
1eee4                 | _hg010b_spin2_waitvbl
1eee4     03 4A 05 F6 | 	mov	COUNT_, #3
1eee8     A8 00 A0 FD | 	call	#pushregs_
1eeec     09 1F 02 F6 | 	mov	local01, arg01
1eef0                 | ' 
1eef0                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1eef0                 | ' 
1eef0                 | ' repeat i from 1 to amount
1eef0     01 20 06 F6 | 	mov	local02, #1
1eef4     01 1E 56 F2 | 	cmps	local01, #1 wc
1eef8     01 22 86 F6 | 	negc	local03, #1
1eefc     11 1F 02 F1 | 	add	local01, local03
1ef00                 | LR__2490
1ef00                 | '   repeat until vblank==0
1ef00                 | LR__2491
1ef00     49 E4 05 F1 | 	add	objptr, #73
1ef04     F2 12 0A FB | 	rdlong	arg01, objptr wz
1ef08     49 E4 85 F1 | 	sub	objptr, #73
1ef0c     0C 00 90 AD |  if_e	jmp	#LR__2492
1ef10                 | '     waitus(100)
1ef10     64 12 06 F6 | 	mov	arg01, #100
1ef14     78 1C B0 FD | 	call	#__system___waitus
1ef18     E4 FF 9F FD | 	jmp	#LR__2491
1ef1c                 | LR__2492
1ef1c                 | '   repeat until vblank==1
1ef1c                 | LR__2493
1ef1c     49 E4 05 F1 | 	add	objptr, #73
1ef20     F2 12 02 FB | 	rdlong	arg01, objptr
1ef24     49 E4 85 F1 | 	sub	objptr, #73
1ef28     01 12 0E F2 | 	cmp	arg01, #1 wz
1ef2c     0C 00 90 AD |  if_e	jmp	#LR__2494
1ef30                 | '     waitus(100)
1ef30     64 12 06 F6 | 	mov	arg01, #100
1ef34     58 1C B0 FD | 	call	#__system___waitus
1ef38     E0 FF 9F FD | 	jmp	#LR__2493
1ef3c                 | LR__2494
1ef3c     11 21 02 F1 | 	add	local02, local03
1ef40     0F 21 0A F2 | 	cmp	local02, local01 wz
1ef44     B8 FF 9F 5D |  if_ne	jmp	#LR__2490
1ef48     A7 F0 03 F6 | 	mov	ptra, fp
1ef4c     B2 00 A0 FD | 	call	#popregs_
1ef50                 | _hg010b_spin2_waitvbl_ret
1ef50     2D 00 64 FD | 	ret
1ef54                 | 
1ef54                 | ' 
1ef54                 | ' 
1ef54                 | ' pub cls(fc,bc)   :c,i
1ef54                 | _hg010b_spin2_cls
1ef54     02 4A 05 F6 | 	mov	COUNT_, #2
1ef58     A8 00 A0 FD | 	call	#pushregs_
1ef5c     09 1F 02 F6 | 	mov	local01, arg01
1ef60     0A 21 02 F6 | 	mov	local02, arg02
1ef64                 | ' 
1ef64                 | ' c:=bc
1ef64                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1ef64     DD E4 05 F1 | 	add	objptr, #221
1ef68     F2 12 02 FB | 	rdlong	arg01, objptr
1ef6c     A5 E4 85 F1 | 	sub	objptr, #165
1ef70     F2 16 02 FB | 	rdlong	arg03, objptr
1ef74     02 16 66 F0 | 	shl	arg03, #2
1ef78     10 15 02 F6 | 	mov	arg02, local02
1ef7c     00 18 06 F6 | 	mov	arg04, #0
1ef80     01 1A 06 F6 | 	mov	arg05, #1
1ef84     0B 00 00 FF 
1ef88     94 E4 05 F1 | 	add	objptr, ##5780
1ef8c     98 0D B0 FD | 	call	#_psram_spin2_fill
1ef90                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1ef90     0B 00 00 FF 
1ef94     C8 E4 85 F1 | 	sub	objptr, ##5832
1ef98     F2 12 02 FB | 	rdlong	arg01, objptr
1ef9c     04 E4 85 F1 | 	sub	objptr, #4
1efa0     F2 16 02 FB | 	rdlong	arg03, objptr
1efa4     09 17 82 F1 | 	sub	arg03, arg01
1efa8     20 14 06 F6 | 	mov	arg02, #32
1efac     00 18 06 F6 | 	mov	arg04, #0
1efb0     01 1A 06 F6 | 	mov	arg05, #1
1efb4     0B 00 00 FF 
1efb8     CC E4 05 F1 | 	add	objptr, ##5836
1efbc     68 0D B0 FD | 	call	#_psram_spin2_fill
1efc0                 | ' setwritecolors(fc,bc)
1efc0                 | ' 
1efc0                 | ' write_color:=ff
1efc0     0B 00 00 FF 
1efc4     8B E4 85 F1 | 	sub	objptr, ##5771
1efc8     F2 1E 62 FC | 	wrlong	local01, objptr
1efcc                 | ' write_background:=bb
1efcc     04 E4 05 F1 | 	add	objptr, #4
1efd0     F2 20 62 FC | 	wrlong	local02, objptr
1efd4                 | ' cursor_x:=0
1efd4     09 E4 85 F1 | 	sub	objptr, #9
1efd8     F2 00 58 FC | 	wrword	#0, objptr
1efdc                 | ' cursor_y:=0
1efdc     02 E4 05 F1 | 	add	objptr, #2
1efe0     F2 00 48 FC | 	wrbyte	#0, objptr
1efe4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1efe4     02 E4 85 F1 | 	sub	objptr, #2
1efe8     F2 14 E2 FA | 	rdword	arg02, objptr
1efec     02 14 66 F0 | 	shl	arg02, #2
1eff0     02 E4 05 F1 | 	add	objptr, #2
1eff4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1eff8     3E E4 85 F1 | 	sub	objptr, #62
1effc     04 16 66 F0 | 	shl	arg03, #4
1f000     04 16 06 F1 | 	add	arg03, #4
1f004     11 12 06 F6 | 	mov	arg01, #17
1f008     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f00c                 | ' setcursorcolor(fc)
1f00c     0F 13 02 F6 | 	mov	arg01, local01
1f010     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f014     10 FB 01 F6 | 	mov	result1, local02
1f018     00 FC 05 F6 | 	mov	result2, #0
1f01c     A7 F0 03 F6 | 	mov	ptra, fp
1f020     B2 00 A0 FD | 	call	#popregs_
1f024                 | _hg010b_spin2_cls_ret
1f024     2D 00 64 FD | 	ret
1f028                 | 
1f028                 | ' 
1f028                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f028                 | ' 
1f028                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f028                 | _hg010b_spin2_putchar
1f028     02 4A 05 F6 | 	mov	COUNT_, #2
1f02c     A8 00 A0 FD | 	call	#pushregs_
1f030     09 1F 02 F6 | 	mov	local01, arg01
1f034                 | ' 
1f034                 | ' if achar==10
1f034     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f038                 | '   crlf()
1f038     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f03c                 | ' if achar==9
1f03c     09 1E 0E F2 | 	cmp	local01, #9 wz
1f040     18 00 90 5D |  if_ne	jmp	#LR__2500
1f044                 | '   cursor_x:=(cursor_x& %11110000)+16
1f044     3C E4 05 F1 | 	add	objptr, #60
1f048     F2 16 E2 FA | 	rdword	arg03, objptr
1f04c     F0 16 06 F5 | 	and	arg03, #240
1f050     10 16 06 F1 | 	add	arg03, #16
1f054     F2 16 52 FC | 	wrword	arg03, objptr
1f058     3C E4 85 F1 | 	sub	objptr, #60
1f05c                 | LR__2500
1f05c                 | '   
1f05c                 | ' if (achar<>9) && (achar<>10) 
1f05c     09 1E 0E F2 | 	cmp	local01, #9 wz
1f060     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f064     A8 00 90 AD |  if_e	jmp	#LR__2501
1f068                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f068     3C E4 05 F1 | 	add	objptr, #60
1f06c     F2 12 E2 FA | 	rdword	arg01, objptr
1f070     02 E4 05 F1 | 	add	objptr, #2
1f074     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f078     04 14 66 F0 | 	shl	arg02, #4
1f07c     04 14 06 F1 | 	add	arg02, #4
1f080     03 E4 05 F1 | 	add	objptr, #3
1f084     F2 18 02 FB | 	rdlong	arg04, objptr
1f088     04 E4 05 F1 | 	add	objptr, #4
1f08c     F2 1A 02 FB | 	rdlong	arg05, objptr
1f090     45 E4 85 F1 | 	sub	objptr, #69
1f094     0F 17 02 F6 | 	mov	arg03, local01
1f098     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f09c     04 E4 05 F1 | 	add	objptr, #4
1f0a0     F2 12 02 FB | 	rdlong	arg01, objptr
1f0a4     10 00 00 FF 
1f0a8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f0ac     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f0b0     3A E4 05 F1 | 	add	objptr, #58
1f0b4     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f0b8     0D 17 02 FD | 	qmul	arg03, arg05
1f0bc                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f0bc     10 00 00 FF 
1f0c0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f0c4     02 E4 85 F1 | 	sub	objptr, #2
1f0c8     F2 20 E2 FA | 	rdword	local02, objptr
1f0cc     01 20 46 F0 | 	shr	local02, #1
1f0d0     0F 15 02 F6 | 	mov	arg02, local01
1f0d4     01 16 06 F6 | 	mov	arg03, #1
1f0d8     00 18 06 F6 | 	mov	arg04, #0
1f0dc     01 1A 06 F6 | 	mov	arg05, #1
1f0e0     0B 00 00 FF 
1f0e4     90 E4 05 F1 | 	add	objptr, ##5776
1f0e8     18 1E 62 FD | 	getqx	local01
1f0ec     10 1F 02 F1 | 	add	local01, local02
1f0f0     0F 13 02 F1 | 	add	arg01, local01
1f0f4     30 0C B0 FD | 	call	#_psram_spin2_fill
1f0f8                 | '   cursor_x+=2
1f0f8     0B 00 00 FF 
1f0fc     90 E4 85 F1 | 	sub	objptr, ##5776
1f100     F2 20 E2 FA | 	rdword	local02, objptr
1f104     02 20 06 F1 | 	add	local02, #2
1f108     F2 20 52 FC | 	wrword	local02, objptr
1f10c     3C E4 85 F1 | 	sub	objptr, #60
1f110                 | LR__2501
1f110                 | ' 
1f110                 | ' if cursor_x>=256
1f110     3C E4 05 F1 | 	add	objptr, #60
1f114     F2 20 E2 FA | 	rdword	local02, objptr
1f118     3C E4 85 F1 | 	sub	objptr, #60
1f11c     00 21 56 F2 | 	cmps	local02, #256 wc
1f120     64 00 90 CD |  if_b	jmp	#LR__2503
1f124                 | '   cursor_x:=0
1f124     3C E4 05 F1 | 	add	objptr, #60
1f128     F2 00 58 FC | 	wrword	#0, objptr
1f12c                 | '   cursor_y+=1
1f12c     02 E4 05 F1 | 	add	objptr, #2
1f130     F2 20 C2 FA | 	rdbyte	local02, objptr
1f134     01 20 06 F1 | 	add	local02, #1
1f138     F2 20 42 FC | 	wrbyte	local02, objptr
1f13c                 | '   if cursor_y>st_lines-1
1f13c     C3 E4 05 F1 | 	add	objptr, #195
1f140     F2 20 02 FB | 	rdlong	local02, objptr
1f144     01 20 86 F1 | 	sub	local02, #1
1f148     C3 E4 85 F1 | 	sub	objptr, #195
1f14c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f150     3E E4 85 F1 | 	sub	objptr, #62
1f154     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f158     2C 00 90 ED |  if_be	jmp	#LR__2502
1f15c                 | '     scrollup2()
1f15c     00 12 06 F6 | 	mov	arg01, #0
1f160     01 00 00 FF 
1f164     58 14 06 F6 | 	mov	arg02, ##600
1f168     10 16 06 F6 | 	mov	arg03, #16
1f16c     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f170                 | '     cursor_y:=st_lines-1
1f170     01 E5 05 F1 | 	add	objptr, #257
1f174     F2 20 02 FB | 	rdlong	local02, objptr
1f178     01 20 86 F1 | 	sub	local02, #1
1f17c     C3 E4 85 F1 | 	sub	objptr, #195
1f180     F2 20 42 FC | 	wrbyte	local02, objptr
1f184     3E E4 85 F1 | 	sub	objptr, #62
1f188                 | LR__2502
1f188                 | LR__2503
1f188                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f188     3C E4 05 F1 | 	add	objptr, #60
1f18c     F2 14 E2 FA | 	rdword	arg02, objptr
1f190     02 14 66 F0 | 	shl	arg02, #2
1f194     02 E4 05 F1 | 	add	objptr, #2
1f198     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f19c     3E E4 85 F1 | 	sub	objptr, #62
1f1a0     04 16 66 F0 | 	shl	arg03, #4
1f1a4     04 16 06 F1 | 	add	arg03, #4
1f1a8     11 12 06 F6 | 	mov	arg01, #17
1f1ac     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f1b0     A7 F0 03 F6 | 	mov	ptra, fp
1f1b4     B2 00 A0 FD | 	call	#popregs_
1f1b8                 | _hg010b_spin2_putchar_ret
1f1b8     2D 00 64 FD | 	ret
1f1bc                 | 
1f1bc                 | '     
1f1bc                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f1bc                 | ' 
1f1bc                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f1bc                 | _hg010b_spin2_putchar2
1f1bc     02 4A 05 F6 | 	mov	COUNT_, #2
1f1c0     A8 00 A0 FD | 	call	#pushregs_
1f1c4     09 1F 02 F6 | 	mov	local01, arg01
1f1c8                 | ' 
1f1c8                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f1c8     3C E4 05 F1 | 	add	objptr, #60
1f1cc     F2 12 E2 FA | 	rdword	arg01, objptr
1f1d0     02 E4 05 F1 | 	add	objptr, #2
1f1d4     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f1d8     04 14 66 F0 | 	shl	arg02, #4
1f1dc     04 14 06 F1 | 	add	arg02, #4
1f1e0     03 E4 05 F1 | 	add	objptr, #3
1f1e4     F2 18 02 FB | 	rdlong	arg04, objptr
1f1e8     04 E4 05 F1 | 	add	objptr, #4
1f1ec     F2 1A 02 FB | 	rdlong	arg05, objptr
1f1f0     45 E4 85 F1 | 	sub	objptr, #69
1f1f4     0F 17 02 F6 | 	mov	arg03, local01
1f1f8     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f1fc     04 E4 05 F1 | 	add	objptr, #4
1f200     F2 12 02 FB | 	rdlong	arg01, objptr
1f204     10 00 00 FF 
1f208     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f20c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f210     3A E4 05 F1 | 	add	objptr, #58
1f214     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f218     0D 17 02 FD | 	qmul	arg03, arg05
1f21c                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f21c     10 00 00 FF 
1f220     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f224     02 E4 85 F1 | 	sub	objptr, #2
1f228     F2 20 E2 FA | 	rdword	local02, objptr
1f22c     01 20 46 F0 | 	shr	local02, #1
1f230     0F 15 02 F6 | 	mov	arg02, local01
1f234     01 16 06 F6 | 	mov	arg03, #1
1f238     00 18 06 F6 | 	mov	arg04, #0
1f23c     01 1A 06 F6 | 	mov	arg05, #1
1f240     0B 00 00 FF 
1f244     90 E4 05 F1 | 	add	objptr, ##5776
1f248     18 1E 62 FD | 	getqx	local01
1f24c     10 1F 02 F1 | 	add	local01, local02
1f250     0F 13 02 F1 | 	add	arg01, local01
1f254     D0 0A B0 FD | 	call	#_psram_spin2_fill
1f258                 | ' 
1f258                 | ' cursor_x+=2
1f258     0B 00 00 FF 
1f25c     90 E4 85 F1 | 	sub	objptr, ##5776
1f260     F2 20 E2 FA | 	rdword	local02, objptr
1f264     02 20 06 F1 | 	add	local02, #2
1f268     F2 20 52 FC | 	wrword	local02, objptr
1f26c                 | ' if cursor_x>=256
1f26c     F2 20 E2 FA | 	rdword	local02, objptr
1f270     3C E4 85 F1 | 	sub	objptr, #60
1f274     00 21 56 F2 | 	cmps	local02, #256 wc
1f278     64 00 90 CD |  if_b	jmp	#LR__2511
1f27c                 | '   cursor_x:=0
1f27c     3C E4 05 F1 | 	add	objptr, #60
1f280     F2 00 58 FC | 	wrword	#0, objptr
1f284                 | '   cursor_y+=1
1f284     02 E4 05 F1 | 	add	objptr, #2
1f288     F2 20 C2 FA | 	rdbyte	local02, objptr
1f28c     01 20 06 F1 | 	add	local02, #1
1f290     F2 20 42 FC | 	wrbyte	local02, objptr
1f294                 | '   if cursor_y>st_lines-1
1f294     C3 E4 05 F1 | 	add	objptr, #195
1f298     F2 20 02 FB | 	rdlong	local02, objptr
1f29c     01 20 86 F1 | 	sub	local02, #1
1f2a0     C3 E4 85 F1 | 	sub	objptr, #195
1f2a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f2a8     3E E4 85 F1 | 	sub	objptr, #62
1f2ac     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f2b0     2C 00 90 ED |  if_be	jmp	#LR__2510
1f2b4                 | '     scrollup2()
1f2b4     00 12 06 F6 | 	mov	arg01, #0
1f2b8     01 00 00 FF 
1f2bc     58 14 06 F6 | 	mov	arg02, ##600
1f2c0     10 16 06 F6 | 	mov	arg03, #16
1f2c4     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f2c8                 | '     cursor_y:=st_lines-1
1f2c8     01 E5 05 F1 | 	add	objptr, #257
1f2cc     F2 20 02 FB | 	rdlong	local02, objptr
1f2d0     01 20 86 F1 | 	sub	local02, #1
1f2d4     C3 E4 85 F1 | 	sub	objptr, #195
1f2d8     F2 20 42 FC | 	wrbyte	local02, objptr
1f2dc     3E E4 85 F1 | 	sub	objptr, #62
1f2e0                 | LR__2510
1f2e0                 | LR__2511
1f2e0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f2e0     3C E4 05 F1 | 	add	objptr, #60
1f2e4     F2 14 E2 FA | 	rdword	arg02, objptr
1f2e8     02 14 66 F0 | 	shl	arg02, #2
1f2ec     02 E4 05 F1 | 	add	objptr, #2
1f2f0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f2f4     3E E4 85 F1 | 	sub	objptr, #62
1f2f8     04 16 66 F0 | 	shl	arg03, #4
1f2fc     04 16 06 F1 | 	add	arg03, #4
1f300     11 12 06 F6 | 	mov	arg01, #17
1f304     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f308     A7 F0 03 F6 | 	mov	ptra, fp
1f30c     B2 00 A0 FD | 	call	#popregs_
1f310                 | _hg010b_spin2_putchar2_ret
1f310     2D 00 64 FD | 	ret
1f314                 | 
1f314                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f314                 | ' 
1f314                 | ' pub write(text) | iii,c,ncx,ncy
1f314                 | _hg010b_spin2_write
1f314     04 4A 05 F6 | 	mov	COUNT_, #4
1f318     A8 00 A0 FD | 	call	#pushregs_
1f31c     09 1F 02 F6 | 	mov	local01, arg01
1f320                 | ' 
1f320                 | ' repeat iii from 0 to strsize(text)-1
1f320     00 20 06 F6 | 	mov	local02, #0
1f324     0F 13 02 F6 | 	mov	arg01, local01
1f328     09 23 02 F6 | 	mov	local03, arg01
1f32c     97 06 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
1f330                 | LR__2520
1f330     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f334     01 22 06 51 |  if_ne	add	local03, #1
1f338     F4 FF 9F 5D |  if_ne	jmp	#LR__2520
1f33c                 | LR__2521
1f33c     09 23 82 F1 | 	sub	local03, arg01
1f340     01 22 86 F1 | 	sub	local03, #1
1f344     00 22 56 F2 | 	cmps	local03, #0 wc
1f348     01 24 86 F6 | 	negc	local04, #1
1f34c     12 23 02 F1 | 	add	local03, local04
1f350                 | LR__2522
1f350                 | '   putchar2(byte[text+iii])
1f350     0F 13 02 F6 | 	mov	arg01, local01
1f354     10 13 02 F1 | 	add	arg01, local02
1f358     09 13 C2 FA | 	rdbyte	arg01, arg01
1f35c     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f360     12 21 02 F1 | 	add	local02, local04
1f364     11 21 0A F2 | 	cmp	local02, local03 wz
1f368     E4 FF 9F 5D |  if_ne	jmp	#LR__2522
1f36c     A7 F0 03 F6 | 	mov	ptra, fp
1f370     B2 00 A0 FD | 	call	#popregs_
1f374                 | _hg010b_spin2_write_ret
1f374     2D 00 64 FD | 	ret
1f378                 | 
1f378                 | '    
1f378                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f378                 | ' 
1f378                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f378                 | _hg010b_spin2_scrollup2
1f378     03 4A 05 F6 | 	mov	COUNT_, #3
1f37c     A8 00 A0 FD | 	call	#pushregs_
1f380                 | ' 	
1f380                 | ' repeat i from 4 to 579 
1f380     04 1E 06 F6 | 	mov	local01, #4
1f384                 | LR__2530
1f384     F9 E4 05 F1 | 	add	objptr, #249
1f388     F2 1A 02 FB | 	rdlong	arg05, objptr
1f38c     1C E4 85 F1 | 	sub	objptr, #28
1f390     F2 14 02 FB | 	rdlong	arg02, objptr
1f394     0F 19 02 F6 | 	mov	arg04, local01
1f398     10 18 06 F1 | 	add	arg04, #16
1f39c     02 18 66 F0 | 	shl	arg04, #2
1f3a0     14 E4 05 F1 | 	add	objptr, #20
1f3a4     F2 16 02 FB | 	rdlong	arg03, objptr
1f3a8     0B 19 02 FD | 	qmul	arg04, arg03
1f3ac                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f3ac     F6 03 00 FF 
1f3b0     00 12 06 F6 | 	mov	arg01, ##519168
1f3b4     0D 13 82 F1 | 	sub	arg01, arg05
1f3b8     02 16 66 F0 | 	shl	arg03, #2
1f3bc     0A 00 00 FF 
1f3c0     DB E5 05 F1 | 	add	objptr, ##5595
1f3c4     18 1A 62 FD | 	getqx	arg05
1f3c8     0D 15 02 F1 | 	add	arg02, arg05
1f3cc     20 08 B0 FD | 	call	#_psram_spin2_read1
1f3d0     0A 00 00 FF 
1f3d4     D3 E5 85 F1 | 	sub	objptr, ##5587
1f3d8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f3dc     1C E4 85 F1 | 	sub	objptr, #28
1f3e0     F2 14 02 FB | 	rdlong	arg02, objptr
1f3e4     0F 19 02 F6 | 	mov	arg04, local01
1f3e8     02 18 66 F0 | 	shl	arg04, #2
1f3ec     14 E4 05 F1 | 	add	objptr, #20
1f3f0     F2 16 02 FB | 	rdlong	arg03, objptr
1f3f4     0B 19 02 FD | 	qmul	arg04, arg03
1f3f8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f3f8     F6 03 00 FF 
1f3fc     00 12 06 F6 | 	mov	arg01, ##519168
1f400     0D 13 82 F1 | 	sub	arg01, arg05
1f404     02 16 66 F0 | 	shl	arg03, #2
1f408     0A 00 00 FF 
1f40c     DB E5 05 F1 | 	add	objptr, ##5595
1f410     18 1A 62 FD | 	getqx	arg05
1f414     0D 15 02 F1 | 	add	arg02, arg05
1f418     70 08 B0 FD | 	call	#_psram_spin2_write
1f41c     0B 00 00 FF 
1f420     CC E4 85 F1 | 	sub	objptr, ##5836
1f424     01 1E 06 F1 | 	add	local01, #1
1f428     01 00 00 FF 
1f42c     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f430     50 FF 9F CD |  if_b	jmp	#LR__2530
1f434                 | ' 
1f434                 | ' repeat i from 580 to 599
1f434     01 00 00 FF 
1f438     44 1E 06 F6 | 	mov	local01, ##580
1f43c                 | LR__2531
1f43c                 | '    fastline(0,1023,i,write_background)   
1f43c     45 E4 05 F1 | 	add	objptr, #69
1f440     F2 18 02 FB | 	rdlong	arg04, objptr
1f444     45 E4 85 F1 | 	sub	objptr, #69
1f448     00 12 06 F6 | 	mov	arg01, #0
1f44c     09 14 CE F9 | 	bmask	arg02, #9
1f450     0F 17 02 F6 | 	mov	arg03, local01
1f454     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f458     01 1E 06 F1 | 	add	local01, #1
1f45c     01 00 00 FF 
1f460     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f464     D4 FF 9F CD |  if_b	jmp	#LR__2531
1f468                 | ' repeat i from 0 to 3
1f468     00 1E 06 F6 | 	mov	local01, #0
1f46c                 | LR__2532
1f46c                 | '    fastline(0,1023,i,write_background)      
1f46c     45 E4 05 F1 | 	add	objptr, #69
1f470     F2 18 02 FB | 	rdlong	arg04, objptr
1f474     45 E4 85 F1 | 	sub	objptr, #69
1f478     00 12 06 F6 | 	mov	arg01, #0
1f47c     09 14 CE F9 | 	bmask	arg02, #9
1f480     0F 17 02 F6 | 	mov	arg03, local01
1f484     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f488     01 1E 06 F1 | 	add	local01, #1
1f48c     04 1E 56 F2 | 	cmps	local01, #4 wc
1f490     D8 FF 9F CD |  if_b	jmp	#LR__2532
1f494                 | ' 
1f494                 | ' repeat i from 0 to 35
1f494     00 1E 06 F6 | 	mov	local01, #0
1f498                 | LR__2533
1f498     0F 1B 02 F6 | 	mov	arg05, local01
1f49c     01 1A 06 F1 | 	add	arg05, #1
1f4a0     10 00 00 FF 
1f4a4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f4a8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f4ac     0B 1B 02 FD | 	qmul	arg05, arg03
1f4b0                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f4b0     F6 03 00 FF 
1f4b4     00 12 06 F6 | 	mov	arg01, ##519168
1f4b8     F9 E4 05 F1 | 	add	objptr, #249
1f4bc     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4c0     0D 13 82 F1 | 	sub	arg01, arg05
1f4c4     F5 E4 85 F1 | 	sub	objptr, #245
1f4c8     F2 14 02 FB | 	rdlong	arg02, objptr
1f4cc     10 00 00 FF 
1f4d0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f4d4     0B 00 00 FF 
1f4d8     C8 E4 05 F1 | 	add	objptr, ##5832
1f4dc     18 1A 62 FD | 	getqx	arg05
1f4e0     0D 15 02 F1 | 	add	arg02, arg05
1f4e4     08 07 B0 FD | 	call	#_psram_spin2_read1
1f4e8     10 00 00 FF 
1f4ec     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f4f0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f4f4     0B 1F 02 FD | 	qmul	local01, arg03
1f4f8                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f4f8     F6 03 00 FF 
1f4fc     00 12 06 F6 | 	mov	arg01, ##519168
1f500     0A 00 00 FF 
1f504     D3 E5 85 F1 | 	sub	objptr, ##5587
1f508     F2 1A 02 FB | 	rdlong	arg05, objptr
1f50c     0D 13 82 F1 | 	sub	arg01, arg05
1f510     F5 E4 85 F1 | 	sub	objptr, #245
1f514     F2 14 02 FB | 	rdlong	arg02, objptr
1f518     10 00 00 FF 
1f51c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f520     0B 00 00 FF 
1f524     C8 E4 05 F1 | 	add	objptr, ##5832
1f528     18 1A 62 FD | 	getqx	arg05
1f52c     0D 15 02 F1 | 	add	arg02, arg05
1f530     58 07 B0 FD | 	call	#_psram_spin2_write
1f534     0B 00 00 FF 
1f538     CC E4 85 F1 | 	sub	objptr, ##5836
1f53c     01 1E 06 F1 | 	add	local01, #1
1f540     24 1E 56 F2 | 	cmps	local01, #36 wc
1f544     50 FF 9F CD |  if_b	jmp	#LR__2533
1f548                 | ' repeat i from 0 to timings[7]-1
1f548     00 1E 06 F6 | 	mov	local01, #0
1f54c     10 00 00 FF 
1f550     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f554     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f558     10 00 00 FF 
1f55c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f560     01 20 86 F1 | 	sub	local02, #1
1f564     00 20 56 F2 | 	cmps	local02, #0 wc
1f568     01 22 86 F6 | 	negc	local03, #1
1f56c     11 21 02 F1 | 	add	local02, local03
1f570                 | LR__2534
1f570                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f570     04 E4 05 F1 | 	add	objptr, #4
1f574     F2 12 02 FB | 	rdlong	arg01, objptr
1f578     10 00 00 FF 
1f57c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f580     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f584     10 00 00 FF 
1f588     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f58c     0D 19 02 F6 | 	mov	arg04, arg05
1f590     03 18 66 F0 | 	shl	arg04, #3
1f594     0D 19 02 F1 | 	add	arg04, arg05
1f598     02 18 66 F0 | 	shl	arg04, #2
1f59c     0F 19 02 F1 | 	add	arg04, local01
1f5a0     0C 13 02 F1 | 	add	arg01, arg04
1f5a4     20 14 06 F6 | 	mov	arg02, #32
1f5a8     01 16 06 F6 | 	mov	arg03, #1
1f5ac     00 18 06 F6 | 	mov	arg04, #0
1f5b0     01 1A 06 F6 | 	mov	arg05, #1
1f5b4     0B 00 00 FF 
1f5b8     C8 E4 05 F1 | 	add	objptr, ##5832
1f5bc     68 07 B0 FD | 	call	#_psram_spin2_fill
1f5c0     0B 00 00 FF 
1f5c4     CC E4 85 F1 | 	sub	objptr, ##5836
1f5c8     11 1F 02 F1 | 	add	local01, local03
1f5cc     10 1F 0A F2 | 	cmp	local01, local02 wz
1f5d0     9C FF 9F 5D |  if_ne	jmp	#LR__2534
1f5d4     A7 F0 03 F6 | 	mov	ptra, fp
1f5d8     B2 00 A0 FD | 	call	#popregs_
1f5dc                 | _hg010b_spin2_scrollup2_ret
1f5dc     2D 00 64 FD | 	ret
1f5e0                 | 
1f5e0                 | '  
1f5e0                 | ' ''----------- Scroll the screen one line down 
1f5e0                 | ' 
1f5e0                 | ' pub scrolldown(start=0) | i
1f5e0                 | _hg010b_spin2_scrolldown
1f5e0     05 4A 05 F6 | 	mov	COUNT_, #5
1f5e4     A8 00 A0 FD | 	call	#pushregs_
1f5e8     09 1F 02 F6 | 	mov	local01, arg01
1f5ec                 | ' 
1f5ec                 | ' repeat i from 579 to (start*16)+4
1f5ec     01 00 00 FF 
1f5f0     43 20 06 F6 | 	mov	local02, ##579
1f5f4     0F 23 02 F6 | 	mov	local03, local01
1f5f8     04 22 66 F0 | 	shl	local03, #4
1f5fc     04 22 06 F1 | 	add	local03, #4
1f600     01 00 00 FF 
1f604     43 22 56 F2 | 	cmps	local03, ##579 wc
1f608     01 24 86 F6 | 	negc	local04, #1
1f60c     12 27 02 F6 | 	mov	local05, local04
1f610     12 23 02 F1 | 	add	local03, local04
1f614                 | LR__2540
1f614     F9 E4 05 F1 | 	add	objptr, #249
1f618     F2 24 02 FB | 	rdlong	local04, objptr
1f61c     1C E4 85 F1 | 	sub	objptr, #28
1f620     F2 14 02 FB | 	rdlong	arg02, objptr
1f624     10 1B 02 F6 | 	mov	arg05, local02
1f628     02 1A 66 F0 | 	shl	arg05, #2
1f62c     14 E4 05 F1 | 	add	objptr, #20
1f630     F2 16 02 FB | 	rdlong	arg03, objptr
1f634     0B 1B 02 FD | 	qmul	arg05, arg03
1f638                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f638     F6 03 00 FF 
1f63c     00 12 06 F6 | 	mov	arg01, ##519168
1f640     12 13 82 F1 | 	sub	arg01, local04
1f644     02 16 66 F0 | 	shl	arg03, #2
1f648     0A 00 00 FF 
1f64c     DB E5 05 F1 | 	add	objptr, ##5595
1f650     18 24 62 FD | 	getqx	local04
1f654     12 15 02 F1 | 	add	arg02, local04
1f658     94 05 B0 FD | 	call	#_psram_spin2_read1
1f65c     0A 00 00 FF 
1f660     D3 E5 85 F1 | 	sub	objptr, ##5587
1f664     F2 24 02 FB | 	rdlong	local04, objptr
1f668     1C E4 85 F1 | 	sub	objptr, #28
1f66c     F2 14 02 FB | 	rdlong	arg02, objptr
1f670     10 1B 02 F6 | 	mov	arg05, local02
1f674     10 1A 06 F1 | 	add	arg05, #16
1f678     02 1A 66 F0 | 	shl	arg05, #2
1f67c     14 E4 05 F1 | 	add	objptr, #20
1f680     F2 16 02 FB | 	rdlong	arg03, objptr
1f684     0B 1B 02 FD | 	qmul	arg05, arg03
1f688                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f688     F6 03 00 FF 
1f68c     00 12 06 F6 | 	mov	arg01, ##519168
1f690     12 13 82 F1 | 	sub	arg01, local04
1f694     02 16 66 F0 | 	shl	arg03, #2
1f698     0A 00 00 FF 
1f69c     DB E5 05 F1 | 	add	objptr, ##5595
1f6a0     18 24 62 FD | 	getqx	local04
1f6a4     12 15 02 F1 | 	add	arg02, local04
1f6a8     E0 05 B0 FD | 	call	#_psram_spin2_write
1f6ac     0B 00 00 FF 
1f6b0     CC E4 85 F1 | 	sub	objptr, ##5836
1f6b4     13 21 02 F1 | 	add	local02, local05
1f6b8     11 21 0A F2 | 	cmp	local02, local03 wz
1f6bc     54 FF 9F 5D |  if_ne	jmp	#LR__2540
1f6c0                 | ' 
1f6c0                 | ' repeat i from (start*16)+4 to (start*16)+19
1f6c0     0F 21 02 F6 | 	mov	local02, local01
1f6c4     04 20 66 F0 | 	shl	local02, #4
1f6c8     04 20 06 F1 | 	add	local02, #4
1f6cc     0F 27 02 F6 | 	mov	local05, local01
1f6d0     04 26 66 F0 | 	shl	local05, #4
1f6d4     13 26 06 F1 | 	add	local05, #19
1f6d8     0F 25 02 F6 | 	mov	local04, local01
1f6dc     04 24 66 F0 | 	shl	local04, #4
1f6e0     04 24 06 F1 | 	add	local04, #4
1f6e4     12 27 52 F2 | 	cmps	local05, local04 wc
1f6e8     01 24 86 F6 | 	negc	local04, #1
1f6ec     12 23 02 F6 | 	mov	local03, local04
1f6f0     12 27 02 F1 | 	add	local05, local04
1f6f4                 | LR__2541
1f6f4                 | '    fastline(0,1023,i,write_background)    
1f6f4     45 E4 05 F1 | 	add	objptr, #69
1f6f8     F2 18 02 FB | 	rdlong	arg04, objptr
1f6fc     45 E4 85 F1 | 	sub	objptr, #69
1f700     00 12 06 F6 | 	mov	arg01, #0
1f704     09 14 CE F9 | 	bmask	arg02, #9
1f708     10 17 02 F6 | 	mov	arg03, local02
1f70c     08 ED BF FD | 	call	#_hg010b_spin2_fastline
1f710     11 21 02 F1 | 	add	local02, local03
1f714     13 21 0A F2 | 	cmp	local02, local05 wz
1f718     D8 FF 9F 5D |  if_ne	jmp	#LR__2541
1f71c                 | '    
1f71c                 | ' repeat i from 35 to start
1f71c     23 20 06 F6 | 	mov	local02, #35
1f720     23 1E 56 F2 | 	cmps	local01, #35 wc
1f724     01 24 86 F6 | 	negc	local04, #1
1f728     0F 27 02 F6 | 	mov	local05, local01
1f72c     12 27 02 F1 | 	add	local05, local04
1f730                 | LR__2542
1f730                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
1f730     F6 03 00 FF 
1f734     00 12 06 F6 | 	mov	arg01, ##519168
1f738     F9 E4 05 F1 | 	add	objptr, #249
1f73c     F2 22 02 FB | 	rdlong	local03, objptr
1f740     11 13 82 F1 | 	sub	arg01, local03
1f744     F5 E4 85 F1 | 	sub	objptr, #245
1f748     F2 14 02 FB | 	rdlong	arg02, objptr
1f74c     10 23 02 F6 | 	mov	local03, local02
1f750     07 22 66 F0 | 	shl	local03, #7
1f754     11 15 02 F1 | 	add	arg02, local03
1f758     80 16 06 F6 | 	mov	arg03, #128
1f75c     0B 00 00 FF 
1f760     C8 E4 05 F1 | 	add	objptr, ##5832
1f764     88 04 B0 FD | 	call	#_psram_spin2_read1
1f768                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
1f768     F6 03 00 FF 
1f76c     00 12 06 F6 | 	mov	arg01, ##519168
1f770     0A 00 00 FF 
1f774     D3 E5 85 F1 | 	sub	objptr, ##5587
1f778     F2 22 02 FB | 	rdlong	local03, objptr
1f77c     11 13 82 F1 | 	sub	arg01, local03
1f780     F5 E4 85 F1 | 	sub	objptr, #245
1f784     F2 14 02 FB | 	rdlong	arg02, objptr
1f788     10 23 02 F6 | 	mov	local03, local02
1f78c     01 22 06 F1 | 	add	local03, #1
1f790     07 22 66 F0 | 	shl	local03, #7
1f794     11 15 02 F1 | 	add	arg02, local03
1f798     80 16 06 F6 | 	mov	arg03, #128
1f79c     0B 00 00 FF 
1f7a0     C8 E4 05 F1 | 	add	objptr, ##5832
1f7a4     E4 04 B0 FD | 	call	#_psram_spin2_write
1f7a8     0B 00 00 FF 
1f7ac     CC E4 85 F1 | 	sub	objptr, ##5836
1f7b0     12 21 02 F1 | 	add	local02, local04
1f7b4     13 21 0A F2 | 	cmp	local02, local05 wz
1f7b8     74 FF 9F 5D |  if_ne	jmp	#LR__2542
1f7bc                 | ' repeat i from 0 to 127
1f7bc     00 20 06 F6 | 	mov	local02, #0
1f7c0                 | LR__2543
1f7c0                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
1f7c0     04 E4 05 F1 | 	add	objptr, #4
1f7c4     F2 12 02 FB | 	rdlong	arg01, objptr
1f7c8     0F 27 02 F6 | 	mov	local05, local01
1f7cc     07 26 66 F0 | 	shl	local05, #7
1f7d0     13 13 02 F1 | 	add	arg01, local05
1f7d4     10 13 02 F1 | 	add	arg01, local02
1f7d8     20 14 06 F6 | 	mov	arg02, #32
1f7dc     01 16 06 F6 | 	mov	arg03, #1
1f7e0     00 18 06 F6 | 	mov	arg04, #0
1f7e4     01 1A 06 F6 | 	mov	arg05, #1
1f7e8     0B 00 00 FF 
1f7ec     C8 E4 05 F1 | 	add	objptr, ##5832
1f7f0     34 05 B0 FD | 	call	#_psram_spin2_fill
1f7f4     0B 00 00 FF 
1f7f8     CC E4 85 F1 | 	sub	objptr, ##5836
1f7fc     01 20 06 F1 | 	add	local02, #1
1f800     80 20 56 F2 | 	cmps	local02, #128 wc
1f804     B8 FF 9F CD |  if_b	jmp	#LR__2543
1f808     A7 F0 03 F6 | 	mov	ptra, fp
1f80c     B2 00 A0 FD | 	call	#popregs_
1f810                 | _hg010b_spin2_scrolldown_ret
1f810     2D 00 64 FD | 	ret
1f814                 | 
1f814                 | ' 
1f814                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1f814                 | ' 
1f814                 | ' pub crlf()
1f814                 | _hg010b_spin2_crlf
1f814                 | ' 
1f814                 | ' cursor_x:=leading_spaces*2
1f814     01 00 00 FF 
1f818     B6 E4 05 F1 | 	add	objptr, ##694
1f81c     F2 16 02 FB | 	rdlong	arg03, objptr
1f820     01 16 66 F0 | 	shl	arg03, #1
1f824     01 00 00 FF 
1f828     7A E4 85 F1 | 	sub	objptr, ##634
1f82c     F2 16 52 FC | 	wrword	arg03, objptr
1f830                 | ' cursor_y+=1
1f830     02 E4 05 F1 | 	add	objptr, #2
1f834     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f838     01 16 06 F1 | 	add	arg03, #1
1f83c     F2 16 42 FC | 	wrbyte	arg03, objptr
1f840                 | ' if cursor_y>st_lines-1
1f840     C3 E4 05 F1 | 	add	objptr, #195
1f844     F2 16 02 FB | 	rdlong	arg03, objptr
1f848     01 16 86 F1 | 	sub	arg03, #1
1f84c     C3 E4 85 F1 | 	sub	objptr, #195
1f850     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f854     3E E4 85 F1 | 	sub	objptr, #62
1f858     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1f85c     2C 00 90 ED |  if_be	jmp	#LR__2550
1f860                 | '   scrollup2()
1f860     00 12 06 F6 | 	mov	arg01, #0
1f864     01 00 00 FF 
1f868     58 14 06 F6 | 	mov	arg02, ##600
1f86c     10 16 06 F6 | 	mov	arg03, #16
1f870     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
1f874                 | '   cursor_y:=st_lines-1
1f874     01 E5 05 F1 | 	add	objptr, #257
1f878     F2 16 02 FB | 	rdlong	arg03, objptr
1f87c     01 16 86 F1 | 	sub	arg03, #1
1f880     C3 E4 85 F1 | 	sub	objptr, #195
1f884     F2 16 42 FC | 	wrbyte	arg03, objptr
1f888     3E E4 85 F1 | 	sub	objptr, #62
1f88c                 | LR__2550
1f88c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1f88c     3C E4 05 F1 | 	add	objptr, #60
1f890     F2 14 E2 FA | 	rdword	arg02, objptr
1f894     02 14 66 F0 | 	shl	arg02, #2
1f898     02 E4 05 F1 | 	add	objptr, #2
1f89c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f8a0     3E E4 85 F1 | 	sub	objptr, #62
1f8a4     04 16 66 F0 | 	shl	arg03, #4
1f8a8     04 16 06 F1 | 	add	arg03, #4
1f8ac     11 12 06 F6 | 	mov	arg01, #17
1f8b0     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
1f8b4                 | _hg010b_spin2_crlf_ret
1f8b4     2D 00 64 FD | 	ret
1f8b8                 | 
1f8b8                 | ' 
1f8b8                 | ' 
1f8b8                 | ' '*************************************************************************
1f8b8                 | ' '                                                                        *
1f8b8                 | ' '  Conversions                                                           *
1f8b8                 | ' '                                                                        *
1f8b8                 | ' '*************************************************************************
1f8b8                 | ' 
1f8b8                 | ' ''---------- Convert a integer to dec string, return a pointer
1f8b8                 | ' 
1f8b8                 | ' pub inttostr(i):result |q,pos,k,j
1f8b8                 | _hg010b_spin2_inttostr
1f8b8     03 4A 05 F6 | 	mov	COUNT_, #3
1f8bc     A8 00 A0 FD | 	call	#pushregs_
1f8c0     09 1F 0A F6 | 	mov	local01, arg01 wz
1f8c4                 | ' 
1f8c4                 | ' j:=i
1f8c4                 | ' pos:=10
1f8c4     0A 20 06 F6 | 	mov	local02, #10
1f8c8                 | ' k:=0
1f8c8     00 22 06 F6 | 	mov	local03, #0
1f8cc                 | ' 
1f8cc                 | ' if (j==0)
1f8cc     18 00 90 5D |  if_ne	jmp	#LR__2560
1f8d0                 | '   n_string[0]:=48
1f8d0     4D E4 05 F1 | 	add	objptr, #77
1f8d4     F2 60 48 FC | 	wrbyte	#48, objptr
1f8d8                 | '   n_string[1]:=0
1f8d8     01 E4 05 F1 | 	add	objptr, #1
1f8dc     F2 00 48 FC | 	wrbyte	#0, objptr
1f8e0     4E E4 85 F1 | 	sub	objptr, #78
1f8e4     C4 00 90 FD | 	jmp	#LR__2567
1f8e8                 | LR__2560
1f8e8                 | ' 
1f8e8                 | ' else
1f8e8                 | '   if (j<0)
1f8e8     0F 1F 52 F6 | 	abs	local01, local01 wc
1f8ec                 | '     j:=0-j
1f8ec                 | '     k:=45
1f8ec     2D 22 06 C6 |  if_b	mov	local03, #45
1f8f0                 | ' 
1f8f0                 | '   n_string[11]:=0
1f8f0     58 E4 05 F1 | 	add	objptr, #88
1f8f4     F2 00 48 FC | 	wrbyte	#0, objptr
1f8f8     58 E4 85 F1 | 	sub	objptr, #88
1f8fc     97 24 48 FB | 	callpa	#(@LR__2562-@LR__2561)>>2,fcache_load_ptr_
1f900                 | '   repeat while (pos>-1)
1f900                 | LR__2561
1f900     00 20 56 F2 | 	cmps	local02, #0 wc
1f904     40 00 90 CD |  if_b	jmp	#LR__2563
1f908     0F FB 51 F6 | 	abs	result1, local01 wc
1f90c     0A FA 15 FD | 	qdiv	result1, #10
1f910                 | '     q:=j//10
1f910     19 FA 61 FD | 	getqy	result1
1f914     FD FA 81 F6 | 	negc	result1, result1
1f918     0F 1F 52 F6 | 	abs	local01, local01 wc
1f91c     0A 1E 16 FD | 	qdiv	local01, #10
1f920                 | '     q:=48+q
1f920     30 FA 05 F1 | 	add	result1, #48
1f924                 | '     n_string[pos]:=q
1f924     10 1F 02 F6 | 	mov	local01, local02
1f928     4D E4 05 F1 | 	add	objptr, #77
1f92c     F2 1E 02 F1 | 	add	local01, objptr
1f930     0F FB 41 FC | 	wrbyte	result1, local01
1f934                 | '     j:=j/10
1f934     4D E4 85 F1 | 	sub	objptr, #77
1f938                 | '     pos-=1
1f938     01 20 86 F1 | 	sub	local02, #1
1f93c     18 1E 62 FD | 	getqx	local01
1f940     0F 1F 82 F6 | 	negc	local01, local01
1f944     B8 FF 9F FD | 	jmp	#LR__2561
1f948                 | LR__2562
1f948                 | LR__2563
1f948                 | '   repeat while n_string[0]==48
1f948                 | LR__2564
1f948     4D E4 05 F1 | 	add	objptr, #77
1f94c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f950     4D E4 85 F1 | 	sub	objptr, #77
1f954     30 16 0E F2 | 	cmp	arg03, #48 wz
1f958     20 00 90 5D |  if_ne	jmp	#LR__2565
1f95c                 | '     bytemove(@n_string,@n_string+1,12)
1f95c     4D E4 05 F1 | 	add	objptr, #77
1f960     F2 12 02 F6 | 	mov	arg01, objptr
1f964     F2 14 02 F6 | 	mov	arg02, objptr
1f968     4D E4 85 F1 | 	sub	objptr, #77
1f96c     01 14 06 F1 | 	add	arg02, #1
1f970     0C 16 06 F6 | 	mov	arg03, #12
1f974     D8 0D B0 FD | 	call	#__system____builtin_memmove
1f978     CC FF 9F FD | 	jmp	#LR__2564
1f97c                 | LR__2565
1f97c                 | ' 
1f97c                 | '   if k==45
1f97c     2D 22 0E F2 | 	cmp	local03, #45 wz
1f980     28 00 90 5D |  if_ne	jmp	#LR__2566
1f984                 | '      bytemove(@n_string+1,@n_string,12)
1f984     4D E4 05 F1 | 	add	objptr, #77
1f988     F2 12 02 F6 | 	mov	arg01, objptr
1f98c     01 12 06 F1 | 	add	arg01, #1
1f990     F2 14 02 F6 | 	mov	arg02, objptr
1f994     4D E4 85 F1 | 	sub	objptr, #77
1f998     0C 16 06 F6 | 	mov	arg03, #12
1f99c     B0 0D B0 FD | 	call	#__system____builtin_memmove
1f9a0                 | '      n_string[0]:=k
1f9a0     4D E4 05 F1 | 	add	objptr, #77
1f9a4     F2 22 42 FC | 	wrbyte	local03, objptr
1f9a8     4D E4 85 F1 | 	sub	objptr, #77
1f9ac                 | LR__2566
1f9ac                 | LR__2567
1f9ac                 | ' 
1f9ac                 | ' q:=@n_string
1f9ac     4D E4 05 F1 | 	add	objptr, #77
1f9b0     F2 FA 01 F6 | 	mov	result1, objptr
1f9b4     4D E4 85 F1 | 	sub	objptr, #77
1f9b8                 | ' return q
1f9b8     A7 F0 03 F6 | 	mov	ptra, fp
1f9bc     B2 00 A0 FD | 	call	#popregs_
1f9c0                 | _hg010b_spin2_inttostr_ret
1f9c0     2D 00 64 FD | 	ret
1f9c4                 | 
1f9c4                 | ' 
1f9c4                 | ' '..............................................................................
1f9c4                 | ' 
1f9c4                 | ' {{
1f9c4                 | ' }}
1f9c4                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1f9c4                 | _psram_spin2_startx
1f9c4     04 4A 05 F6 | 	mov	COUNT_, #4
1f9c8     A8 00 A0 FD | 	call	#pushregs_
1f9cc     09 1F 02 F6 | 	mov	local01, arg01
1f9d0     0B 21 02 F6 | 	mov	local02, arg03
1f9d4     0C 23 02 F6 | 	mov	local03, arg04
1f9d8                 | '     stop() ' restart driver if required
1f9d8     54 01 B0 FD | 	call	#_psram_spin2_stop
1f9dc     00 1E 0E F2 | 	cmp	local01, #0 wz
1f9e0     14 1E 06 AB |  if_e	rdlong	local01, #20
1f9e4     0F 15 52 F6 | 	abs	arg02, local01 wc
1f9e8     A1 07 00 FF 
1f9ec     40 14 16 FD | 	qdiv	arg02, ##1000000
1f9f0                 | ' 
1f9f0                 | '     ' use current frequency if none specified
1f9f0                 | ' 
1f9f0                 | '     if freq == 0 
1f9f0                 | '         freq := clkfreq 
1f9f0                 | ' 
1f9f0                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1f9f0                 | ' 
1f9f0                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1f9f0                 | '     if burst < 0
1f9f0                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1f9f0     18 14 62 FD | 	getqx	arg02
1f9f4     0A 19 82 F6 | 	negc	arg04, arg02
1f9f8     03 18 66 F0 | 	shl	arg04, #3
1f9fc     84 18 86 F1 | 	sub	arg04, #132
1fa00     04 18 46 F0 | 	shr	arg04, #4
1fa04     04 18 66 F0 | 	shl	arg04, #4
1fa08     00 18 56 F2 | 	cmps	arg04, #0 wc
1fa0c     0E FA 65 C6 |  if_b	neg	result1, #14
1fa10     10 01 90 CD |  if_b	jmp	#LR__2573
1fa14                 | ' 
1fa14                 | '     ' compute the input delay
1fa14                 | ' 
1fa14                 | '     if delay <= 0
1fa14     01 20 56 F2 | 	cmps	local02, #1 wc
1fa18     10 00 90 3D |  if_ae	jmp	#LR__2570
1fa1c                 | '         delay := lookupDelay(freq)
1fa1c     0F 13 02 F6 | 	mov	arg01, local01
1fa20     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1fa24     FD 20 02 F6 | 	mov	local02, result1
1fa28     04 00 90 FD | 	jmp	#LR__2571
1fa2c                 | LR__2570
1fa2c                 | '     else
1fa2c                 | '         delay <#= $f ' limit to 15
1fa2c     0F 20 66 F3 | 	fles	local02, #15
1fa30                 | LR__2571
1fa30                 | ' 
1fa30                 | '     ' create our lock
1fa30                 | ' 
1fa30                 | '     driverlock := LOCKNEW()  
1fa30     00 FA 05 F6 | 	mov	result1, #0
1fa34     04 FA 61 FD | 	locknew	result1
1fa38     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fa3c     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1fa40                 | '     if driverlock == -1
1fa40     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fa44     FF FF 7F FF 
1fa48     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fa4c                 | '         return ERR_NO_LOCK
1fa4c     1A FA 65 A6 |  if_e	neg	result1, #26
1fa50     D0 00 90 AD |  if_e	jmp	#LR__2573
1fa54                 | ' 
1fa54                 | '     ' patch in the proper data and HUB addresses to the startup structure
1fa54                 | ' 
1fa54                 | '     long[@startupData][0]:=clkfreq
1fa54     14 1E 06 FB | 	rdlong	local01, #20
1fa58     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1fa5c     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1fa60                 | ' '    long[@startupData][1]:=$1000_0000
1fa60                 | '     long[@startupData][5]:=@deviceData
1fa60     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fa64     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fa68     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1fa6c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fa70     14 14 06 F1 | 	add	arg02, #20
1fa74     0A 1F 62 FC | 	wrlong	local01, arg02
1fa78                 | '     long[@startupData][6]:=@qosData
1fa78     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1fa7c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fa80     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fa84     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fa88     18 14 06 F1 | 	add	arg02, #24
1fa8c     0A 1F 62 FC | 	wrlong	local01, arg02
1fa90                 | '     long[@startupData][7]:=$7FF00
1fa90     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fa94     1C 1E 06 F1 | 	add	local01, #28
1fa98     FF 03 80 FF 
1fa9c     0F 01 6A FC | 	wrlong	##524032, local01
1faa0                 | ' 
1faa0                 | '     ' setup some default bank and QoS parameter values
1faa0                 | ' 
1faa0                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1faa0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1faa4     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1faa8     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1faac     10 18 66 F0 | 	shl	arg04, #16
1fab0     0C 20 66 F0 | 	shl	local02, #12
1fab4     10 19 42 F5 | 	or	arg04, local02
1fab8     18 18 46 F5 | 	or	arg04, #24
1fabc     0C 15 02 F6 | 	mov	arg02, arg04
1fac0     02 16 06 F6 | 	mov	arg03, #2
1fac4     A0 00 A0 FD | 	call	#\builtin_longfill_
1fac8                 | '     longfill(@qosData, $FFFF0000, 8)
1fac8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1facc     07 16 06 F6 | 	mov	arg03, #7
1fad0     28 16 62 FD | 	setq	arg03
1fad4     80 FF FF FF 
1fad8     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1fadc                 | ' 
1fadc                 | '     ' get the address of the PSRAM memory driver so we can start it
1fadc                 | ' 
1fadc                 | '     driverAddr:= driver.getDriverAddr()
1fadc                 | '     return @driver_start
1fadc     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1fae0     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1fae4     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1fae8                 | ' 
1fae8                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1fae8                 | ' 
1fae8                 | '     if desiredcog < 0
1fae8     00 22 56 F2 | 	cmps	local03, #0 wc
1faec                 | '         desiredcog := NEWCOG
1faec     10 22 06 C6 |  if_b	mov	local03, #16
1faf0                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1faf0     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1faf4     11 25 02 F6 | 	mov	local04, local03
1faf8     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1fafc     0A 25 F2 FC | 	coginit	local04, arg02 wc
1fb00     01 24 66 C6 |  if_b	neg	local04, #1
1fb04     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fb08     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fb0c                 | '     repeat until long[@startupData] == 0 
1fb0c     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fb10                 | LR__2572
1fb10     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fb14     F8 FF 9F 5D |  if_ne	jmp	#LR__2572
1fb18                 | ' 
1fb18                 | '     return drivercog
1fb18     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fb1c     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fb20     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fb24                 | LR__2573
1fb24     A7 F0 03 F6 | 	mov	ptra, fp
1fb28     B2 00 A0 FD | 	call	#popregs_
1fb2c                 | _psram_spin2_startx_ret
1fb2c     2D 00 64 FD | 	ret
1fb30                 | 
1fb30                 | ' 
1fb30                 | ' '..............................................................................
1fb30                 | ' 
1fb30                 | ' {{
1fb30                 | ' }}
1fb30                 | ' PUB stop() : i
1fb30                 | _psram_spin2_stop
1fb30     00 00 06 F6 | 	mov	_var01, #0
1fb34                 | '     if drivercog <> -1
1fb34     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fb38     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fb3c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fb40     FF FF 7F FF 
1fb44     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fb48     70 00 90 AD |  if_e	jmp	#LR__2583
1fb4c                 | '         cogstop(drivercog) ' a rather brutal stop
1fb4c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fb50     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fb54     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fb58     03 12 62 FD | 	cogstop	arg01
1fb5c     97 26 48 FB | 	callpa	#(@LR__2582-@LR__2580)>>2,fcache_load_ptr_
1fb60                 | '         repeat i from 0 to 7
1fb60                 | LR__2580
1fb60                 | '             if long[$7FF00][i*3] < 0
1fb60     00 FB 01 F6 | 	mov	result1, _var01
1fb64     01 FA 65 F0 | 	shl	result1, #1
1fb68     00 FB 01 F1 | 	add	result1, _var01
1fb6c     02 FA 65 F0 | 	shl	result1, #2
1fb70     FF 03 00 FF 
1fb74     00 FB 05 F1 | 	add	result1, ##524032
1fb78     FD FA 01 FB | 	rdlong	result1, result1
1fb7c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb80     1C 00 90 3D |  if_ae	jmp	#LR__2581
1fb84                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fb84     00 FB 01 F6 | 	mov	result1, _var01
1fb88     01 FA 65 F0 | 	shl	result1, #1
1fb8c     00 FB 01 F1 | 	add	result1, _var01
1fb90     02 FA 65 F0 | 	shl	result1, #2
1fb94     FF 03 00 FF 
1fb98     00 FB 05 F1 | 	add	result1, ##524032
1fb9c     FD 20 68 FC | 	wrlong	#16, result1
1fba0                 | LR__2581
1fba0     01 00 06 F1 | 	add	_var01, #1
1fba4     08 00 56 F2 | 	cmps	_var01, #8 wc
1fba8     B4 FF 9F CD |  if_b	jmp	#LR__2580
1fbac                 | LR__2582
1fbac                 | '         drivercog := -1
1fbac     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fbb0     FF FF FF FF 
1fbb4     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fbb8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fbbc                 | LR__2583
1fbbc                 | '     if driverlock <> -1
1fbbc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fbc0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fbc4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fbc8     FF FF 7F FF 
1fbcc     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fbd0                 | '         LOCKRET(driverlock)
1fbd0     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1fbd4     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1fbd8     05 12 62 5D |  if_ne	lockret	arg01
1fbdc                 | '         driverlock := -1
1fbdc     FF FF FF 5F 
1fbe0     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1fbe4     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1fbe8     00 FB 01 F6 | 	mov	result1, _var01
1fbec                 | _psram_spin2_stop_ret
1fbec     2D 00 64 FD | 	ret
1fbf0                 | 
1fbf0                 | ' 
1fbf0                 | ' '..............................................................................
1fbf0                 | ' 
1fbf0                 | ' {{
1fbf0                 | ' }}
1fbf0                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fbf0                 | _psram_spin2_read1
1fbf0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fbf0                 | '     if drivercog == -1 ' driver must be running
1fbf0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fbf4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fbf8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fbfc     FF FF 7F FF 
1fc00     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fc04                 | '         return ERR_INACTIVE
1fc04     0F FA 65 A6 |  if_e	neg	result1, #15
1fc08     7C 00 90 AD |  if_e	jmp	#LR__2591
1fc0c                 | '     if count == 0 ' don't even bother reading
1fc0c     00 16 0E F2 | 	cmp	arg03, #0 wz
1fc10                 | '         return 0
1fc10     00 FA 05 A6 |  if_e	mov	result1, #0
1fc14     70 00 90 AD |  if_e	jmp	#LR__2591
1fc18                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fc18     00 FA 05 F6 | 	mov	result1, #0
1fc1c     01 FA 61 FD | 	cogid	result1
1fc20     FD 00 02 F6 | 	mov	_var01, result1
1fc24     01 00 66 F0 | 	shl	_var01, #1
1fc28     FD 00 02 F1 | 	add	_var01, result1
1fc2c     02 00 66 F0 | 	shl	_var01, #2
1fc30     FF 03 00 FF 
1fc34     00 03 06 F6 | 	mov	_var02, ##524032
1fc38     00 03 02 F1 | 	add	_var02, _var01
1fc3c                 | '     if long[mailbox] < 0
1fc3c     01 01 02 FB | 	rdlong	_var01, _var02
1fc40     00 00 56 F2 | 	cmps	_var01, #0 wc
1fc44                 | '         return ERR_MAILBOX_BUSY
1fc44     1C FA 65 C6 |  if_b	neg	result1, #28
1fc48     3C 00 90 CD |  if_b	jmp	#LR__2591
1fc4c                 | '     long[mailbox][2] := count
1fc4c     08 02 06 F1 | 	add	_var02, #8
1fc50     01 17 62 FC | 	wrlong	arg03, _var02
1fc54                 | '     long[mailbox][1] := dstHubAddr
1fc54     04 02 86 F1 | 	sub	_var02, #4
1fc58     01 13 62 FC | 	wrlong	arg01, _var02
1fc5c     04 02 86 F1 | 	sub	_var02, #4
1fc60                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1fc60     0A 05 02 F6 | 	mov	_var03, arg02
1fc64     D9 04 06 F4 | 	bitl	_var03, #217
1fc68     00 00 58 FF 
1fc6c     00 00 06 F6 | 	mov	_var01, ##-1342177280
1fc70     02 01 02 F1 | 	add	_var01, _var03
1fc74     01 01 62 FC | 	wrlong	_var01, _var02
1fc78                 | '     repeat
1fc78                 | LR__2590
1fc78                 | '         result := long[mailbox]    
1fc78     01 05 02 FB | 	rdlong	_var03, _var02
1fc7c     00 04 56 F2 | 	cmps	_var03, #0 wc
1fc80     F4 FF 9F CD |  if_b	jmp	#LR__2590
1fc84                 | '     while result < 0   
1fc84                 | '     return -result                       'return success or error
1fc84     02 FB 61 F6 | 	neg	result1, _var03
1fc88                 | LR__2591
1fc88                 | _psram_spin2_read1_ret
1fc88     2D 00 64 FD | 	ret
1fc8c                 | 
1fc8c                 | ' 
1fc8c                 | ' '..............................................................................
1fc8c                 | ' 
1fc8c                 | ' {{
1fc8c                 | ' }}
1fc8c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1fc8c                 | _psram_spin2_write
1fc8c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fc8c                 | '     if drivercog == -1 ' driver must be running
1fc8c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fc90     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fc94     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc98     FF FF 7F FF 
1fc9c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fca0                 | '         return ERR_INACTIVE
1fca0     0F FA 65 A6 |  if_e	neg	result1, #15
1fca4     7C 00 90 AD |  if_e	jmp	#LR__2601
1fca8                 | '     if count == 0 ' don't even bother writing
1fca8     00 16 0E F2 | 	cmp	arg03, #0 wz
1fcac                 | '         return 0
1fcac     00 FA 05 A6 |  if_e	mov	result1, #0
1fcb0     70 00 90 AD |  if_e	jmp	#LR__2601
1fcb4                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fcb4     00 FA 05 F6 | 	mov	result1, #0
1fcb8     01 FA 61 FD | 	cogid	result1
1fcbc     FD 00 02 F6 | 	mov	_var01, result1
1fcc0     01 00 66 F0 | 	shl	_var01, #1
1fcc4     FD 00 02 F1 | 	add	_var01, result1
1fcc8     02 00 66 F0 | 	shl	_var01, #2
1fccc     FF 03 00 FF 
1fcd0     00 03 06 F6 | 	mov	_var02, ##524032
1fcd4     00 03 02 F1 | 	add	_var02, _var01
1fcd8                 | '     if long[mailbox] < 0
1fcd8     01 01 02 FB | 	rdlong	_var01, _var02
1fcdc     00 00 56 F2 | 	cmps	_var01, #0 wc
1fce0                 | '         return ERR_MAILBOX_BUSY
1fce0     1C FA 65 C6 |  if_b	neg	result1, #28
1fce4     3C 00 90 CD |  if_b	jmp	#LR__2601
1fce8                 | '     long[mailbox][2] := count
1fce8     08 02 06 F1 | 	add	_var02, #8
1fcec     01 17 62 FC | 	wrlong	arg03, _var02
1fcf0                 | '     long[mailbox][1] := srcHubAddr
1fcf0     04 02 86 F1 | 	sub	_var02, #4
1fcf4     01 13 62 FC | 	wrlong	arg01, _var02
1fcf8     04 02 86 F1 | 	sub	_var02, #4
1fcfc                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1fcfc     0A 05 02 F6 | 	mov	_var03, arg02
1fd00     D9 04 06 F4 | 	bitl	_var03, #217
1fd04     00 00 78 FF 
1fd08     00 00 06 F6 | 	mov	_var01, ##-268435456
1fd0c     02 01 02 F1 | 	add	_var01, _var03
1fd10     01 01 62 FC | 	wrlong	_var01, _var02
1fd14                 | '     repeat
1fd14                 | LR__2600
1fd14                 | '         result := long[mailbox]    
1fd14     01 05 02 FB | 	rdlong	_var03, _var02
1fd18     00 04 56 F2 | 	cmps	_var03, #0 wc
1fd1c     F4 FF 9F CD |  if_b	jmp	#LR__2600
1fd20                 | '     while result < 0   
1fd20                 | '     return -result                       'return success or error
1fd20     02 FB 61 F6 | 	neg	result1, _var03
1fd24                 | LR__2601
1fd24                 | _psram_spin2_write_ret
1fd24     2D 00 64 FD | 	ret
1fd28                 | 
1fd28                 | ' 
1fd28                 | ' ' generalized fill
1fd28                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1fd28                 | _psram_spin2_fill
1fd28     09 01 02 F6 | 	mov	_var01, arg01
1fd2c     0A 03 02 F6 | 	mov	_var02, arg02
1fd30     0B 05 02 F6 | 	mov	_var03, arg03
1fd34     0D 07 02 F6 | 	mov	_var04, arg05
1fd38                 | '     case datasize 
1fd38     01 06 86 F1 | 	sub	_var04, #1
1fd3c     04 06 26 F3 | 	fle	_var04, #4
1fd40     30 06 62 FD | 	jmprel	_var04
1fd44                 | LR__2610
1fd44     10 00 90 FD | 	jmp	#LR__2611
1fd48     18 00 90 FD | 	jmp	#LR__2612
1fd4c     2C 00 90 FD | 	jmp	#LR__2614
1fd50     1C 00 90 FD | 	jmp	#LR__2613
1fd54     24 00 90 FD | 	jmp	#LR__2614
1fd58                 | LR__2611
1fd58                 | '         1: req := driver.R_WRITEBYTE
1fd58     00 00 60 FF 
1fd5c     00 08 06 F6 | 	mov	_var05, ##-1073741824
1fd60     20 00 90 FD | 	jmp	#LR__2615
1fd64                 | LR__2612
1fd64                 | '         2: req := driver.R_WRITEWORD
1fd64     00 00 68 FF 
1fd68     00 08 06 F6 | 	mov	_var05, ##-805306368
1fd6c     14 00 90 FD | 	jmp	#LR__2615
1fd70                 | LR__2613
1fd70                 | '         4: req := driver.R_WRITELONG
1fd70     00 00 70 FF 
1fd74     00 08 06 F6 | 	mov	_var05, ##-536870912
1fd78     08 00 90 FD | 	jmp	#LR__2615
1fd7c                 | LR__2614
1fd7c                 | '         other : return ERR_INVALID
1fd7c     06 FA 65 F6 | 	neg	result1, #6
1fd80     94 00 90 FD | 	jmp	#LR__2617
1fd84                 | LR__2615
1fd84                 | '     if count == 0   ' nothing to do
1fd84     00 04 0E F2 | 	cmp	_var03, #0 wz
1fd88                 | '         return 0
1fd88     00 FA 05 A6 |  if_e	mov	result1, #0
1fd8c     88 00 90 AD |  if_e	jmp	#LR__2617
1fd90                 | '     if drivercog == -1
1fd90     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fd94     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1fd98     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fd9c     FF FF 7F FF 
1fda0     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1fda4                 | '         return ERR_INACTIVE
1fda4     0F FA 65 A6 |  if_e	neg	result1, #15
1fda8     6C 00 90 AD |  if_e	jmp	#LR__2617
1fdac                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1fdac     00 FA 05 F6 | 	mov	result1, #0
1fdb0     01 FA 61 FD | 	cogid	result1
1fdb4     FD 06 02 F6 | 	mov	_var04, result1
1fdb8     01 06 66 F0 | 	shl	_var04, #1
1fdbc     FD 06 02 F1 | 	add	_var04, result1
1fdc0     02 06 66 F0 | 	shl	_var04, #2
1fdc4     FF 03 00 FF 
1fdc8     00 0B 06 F6 | 	mov	_var06, ##524032
1fdcc     03 0B 02 F1 | 	add	_var06, _var04
1fdd0                 | '     if long[mailbox] < 0
1fdd0     05 07 02 FB | 	rdlong	_var04, _var06
1fdd4     00 06 56 F2 | 	cmps	_var04, #0 wc
1fdd8                 | '         return ERR_MAILBOX_BUSY
1fdd8     1C FA 65 C6 |  if_b	neg	result1, #28
1fddc     38 00 90 CD |  if_b	jmp	#LR__2617
1fde0                 | '     long[mailbox][2] := count
1fde0     08 0A 06 F1 | 	add	_var06, #8
1fde4     05 05 62 FC | 	wrlong	_var03, _var06
1fde8                 | '     long[mailbox][1] := pattern
1fde8     04 0A 86 F1 | 	sub	_var06, #4
1fdec     05 03 62 FC | 	wrlong	_var02, _var06
1fdf0     04 0A 86 F1 | 	sub	_var06, #4
1fdf4                 | '     long[mailbox] := req + (addr & $1ffffff)
1fdf4     04 0D 02 F6 | 	mov	_var07, _var05
1fdf8     00 0F 02 F6 | 	mov	_var08, _var01
1fdfc     D9 0E 06 F4 | 	bitl	_var08, #217
1fe00     07 0D 02 F1 | 	add	_var07, _var08
1fe04     05 0D 62 FC | 	wrlong	_var07, _var06
1fe08                 | '     repeat
1fe08                 | LR__2616
1fe08                 | '         r := long[mailbox]
1fe08     05 0F 02 FB | 	rdlong	_var08, _var06
1fe0c     00 0E 56 F2 | 	cmps	_var08, #0 wc
1fe10     F4 FF 9F CD |  if_b	jmp	#LR__2616
1fe14                 | '     while r < 0
1fe14                 | '     return -r                  ' return 0 for success or negated error code
1fe14     07 FB 61 F6 | 	neg	result1, _var08
1fe18                 | LR__2617
1fe18                 | _psram_spin2_fill_ret
1fe18     2D 00 64 FD | 	ret
1fe1c                 | 
1fe1c                 | ' 
1fe1c                 | ' '..............................................................................
1fe1c                 | ' 
1fe1c                 | ' {{
1fe1c                 | ' }}
1fe1c                 | ' PUB setQos(cog, qos) : result | mailbox
1fe1c                 | _psram_spin2_setQos
1fe1c     09 01 02 F6 | 	mov	_var01, arg01
1fe20                 | '     if drivercog == -1 ' driver must be running
1fe20     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe24     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fe28     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe2c     FF FF 7F FF 
1fe30     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fe34                 | '         return ERR_INACTIVE
1fe34     0F FA 65 A6 |  if_e	neg	result1, #15
1fe38     9C 00 90 AD |  if_e	jmp	#LR__2624
1fe3c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1fe3c     00 00 56 F2 | 	cmps	_var01, #0 wc
1fe40     08 00 90 CD |  if_b	jmp	#LR__2620
1fe44     08 00 56 F2 | 	cmps	_var01, #8 wc
1fe48     08 00 90 CD |  if_b	jmp	#LR__2621
1fe4c                 | LR__2620
1fe4c                 | '         return ERR_INVALID
1fe4c     06 FA 65 F6 | 	neg	result1, #6
1fe50     84 00 90 FD | 	jmp	#LR__2624
1fe54                 | LR__2621
1fe54                 | '     long[@qosData][cog] := qos & !$1ff
1fe54     FF 15 26 F5 | 	andn	arg02, #511
1fe58     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fe5c     02 00 66 F0 | 	shl	_var01, #2
1fe60     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1fe64     00 15 62 FC | 	wrlong	arg02, _var01
1fe68                 | '     mailbox := $7FF00 + drivercog*12
1fe68     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1fe6c     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1fe70     02 07 02 F6 | 	mov	_var04, _var03
1fe74     01 06 66 F0 | 	shl	_var04, #1
1fe78     02 07 02 F1 | 	add	_var04, _var03
1fe7c     02 06 66 F0 | 	shl	_var04, #2
1fe80     FF 03 00 FF 
1fe84     00 09 06 F6 | 	mov	_var05, ##524032
1fe88     03 09 02 F1 | 	add	_var05, _var04
1fe8c                 | '     repeat until LOCKTRY(driverlock)
1fe8c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1fe90                 | LR__2622
1fe90     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fe94     06 12 72 FD | 	locktry	arg01 wc
1fe98     F4 FF 9F 3D |  if_ae	jmp	#LR__2622
1fe9c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fea0                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1fea0     00 06 06 F6 | 	mov	_var04, #0
1fea4     01 06 62 FD | 	cogid	_var04
1fea8     00 00 78 FF 
1feac     00 02 06 F6 | 	mov	_var02, ##-268435456
1feb0     03 03 02 F1 | 	add	_var02, _var04
1feb4     04 03 62 FC | 	wrlong	_var02, _var05
1feb8                 | '     repeat while long[mailbox] < 0
1feb8                 | LR__2623
1feb8     04 03 02 FB | 	rdlong	_var02, _var05
1febc     00 02 56 F2 | 	cmps	_var02, #0 wc
1fec0     F4 FF 9F CD |  if_b	jmp	#LR__2623
1fec4                 | '     LOCKREL(driverlock)
1fec4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fec8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fecc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fed0     07 12 72 FD | 	lockrel	arg01 wc
1fed4     00 FA 05 F6 | 	mov	result1, #0
1fed8                 | LR__2624
1fed8                 | _psram_spin2_setQos_ret
1fed8     2D 00 64 FD | 	ret
1fedc                 | 
1fedc                 | ' 
1fedc                 | ' '..............................................................................
1fedc                 | ' 
1fedc                 | ' {{
1fedc                 | ' }}
1fedc                 | ' PRI lookupDelay(freq) : delay | profile
1fedc                 | _psram_spin2_lookupDelay
1fedc                 | '     profile := @delayTable
1fedc     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1fee0     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1fee4                 | '     delay := long[profile][0]
1fee4     00 03 02 FB | 	rdlong	_var02, _var01
1fee8                 | '     repeat while long[profile][1] 
1fee8     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1feec     97 16 48 FB | 	callpa	#(@LR__2631-@LR__2630)>>2,fcache_load_ptr_
1fef0                 | LR__2630
1fef0     04 00 06 F1 | 	add	_var01, #4
1fef4     00 FB 09 FB | 	rdlong	result1, _var01 wz
1fef8     04 00 86 F1 | 	sub	_var01, #4
1fefc     1C 00 90 AD |  if_e	jmp	#LR__2632
1ff00                 | '         if freq +< long[profile][1] 
1ff00     04 00 06 F1 | 	add	_var01, #4
1ff04     00 FB 01 FB | 	rdlong	result1, _var01
1ff08     04 00 86 F1 | 	sub	_var01, #4
1ff0c     FD 12 12 F2 | 	cmp	arg01, result1 wc
1ff10                 | '             quit
1ff10                 | '         profile += 4
1ff10     04 00 06 31 |  if_ae	add	_var01, #4
1ff14                 | '         delay++
1ff14     01 02 06 31 |  if_ae	add	_var02, #1
1ff18     D4 FF 9F 3D |  if_ae	jmp	#LR__2630
1ff1c                 | LR__2631
1ff1c                 | LR__2632
1ff1c     01 FB 01 F6 | 	mov	result1, _var02
1ff20                 | _psram_spin2_lookupDelay_ret
1ff20     2D 00 64 FD | 	ret
1ff24                 | 
1ff24                 | ' 
1ff24                 | ' PUB start() : r
1ff24                 | _usbnew_spin2_start
1ff24     00 00 06 F6 | 	mov	_var01, #0
1ff28                 | '   ifnot driver_cog
1ff28     15 00 00 FF 
1ff2c     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1ff30     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1ff34     15 00 00 FF 
1ff38     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1ff3c     38 00 90 5D |  if_ne	jmp	#LR__2640
1ff40                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1ff40     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1ff44     10 00 06 F6 | 	mov	_var01, #16
1ff48     00 16 06 F6 | 	mov	arg03, #0
1ff4c     28 16 62 FD | 	setq	arg03
1ff50     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1ff54     01 00 66 C6 |  if_b	neg	_var01, #1
1ff58                 | '     if r >= 0
1ff58     00 00 56 F2 | 	cmps	_var01, #0 wc
1ff5c                 | '       driver_cog := r+1
1ff5c     00 03 02 36 |  if_ae	mov	_var02, _var01
1ff60     01 02 06 31 |  if_ae	add	_var02, #1
1ff64     15 00 00 3F 
1ff68     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1ff6c     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1ff70     15 00 00 3F 
1ff74     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1ff78                 | LR__2640
1ff78     00 FB 01 F6 | 	mov	result1, _var01
1ff7c                 | _usbnew_spin2_start_ret
1ff7c     2D 00 64 FD | 	ret
1ff80                 | 
1ff80                 | '     '' (Always enabled)
1ff80                 | ' 
1ff80                 | ' '' Get current pressed state of a keyboard key
1ff80                 | ' PUB keystate(key) : r | buf[2],tmp
1ff80                 | _usbnew_spin2_keystate
1ff80     00 04 06 F6 | 	mov	_var03, #0
1ff84                 | '   if key >= $E0 && key < $E8
1ff84     E0 12 56 F2 | 	cmps	arg01, #224 wc
1ff88     34 00 90 CD |  if_b	jmp	#LR__2650
1ff8c     E8 12 56 F2 | 	cmps	arg01, #232 wc
1ff90     2C 00 90 3D |  if_ae	jmp	#LR__2650
1ff94                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1ff94     00 FA 05 F6 | 	mov	result1, #0
1ff98     13 00 00 FF 
1ff9c     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1ffa0     09 07 02 F6 | 	mov	_var04, arg01
1ffa4     E0 06 86 F1 | 	sub	_var04, #224
1ffa8     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1ffac     03 09 4A F0 | 	shr	_var05, _var04 wz
1ffb0     13 00 00 FF 
1ffb4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1ffb8     01 FA 65 56 |  if_ne	neg	result1, #1
1ffbc     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1ffc0                 | LR__2650
1ffc0                 | '   else
1ffc0                 | '     '' Do this in inline ASM to ensure atomicity
1ffc0                 | '     tmp := @hkbd_report
1ffc0     13 00 00 FF 
1ffc4     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1ffc8     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1ffcc                 | '     org
1ffcc     13 00 00 FF 
1ffd0     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1ffd4     97 1E 48 FB | 	callpa	#(@LR__2652-@LR__2651)>>2,fcache_load_ptr_
1ffd8                 | LR__2651
1ffd8 000             | 	org	0
1ffd8 000 28 02 64 FD | 	setq	#1
1ffdc 001 04 01 02 FB | 	rdlong	_var01, _var05
1ffe0 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1ffe4 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1ffe8 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1ffec 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1fff0 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1fff4 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1fff8 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1fffc 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20000 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
20004 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20008 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
2000c 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20010 00e 01 04 66 A6 |  if_e	neg	_var03, #1
20014 00f             | LR__2652
20014                 | 	orgh
20014     02 FB 01 F6 | 	mov	result1, _var03
20018                 | _usbnew_spin2_keystate_ret
20018     2D 00 64 FD | 	ret
2001c                 | 
2001c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
2001c                 | ' 
2001c                 | ' '' Return key event from buffer if there is one
2001c                 | ' PUB get_key() : r | tail
2001c                 | _usbnew_spin2_get_key
2001c                 | '   tail := keyq_tail
2001c     0F 00 00 FF 
20020     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20024     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
20028                 | '   if keyq_head == tail
20028     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2002c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
20030     0F 00 00 FF 
20034     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
20038     00 03 0A F2 | 	cmp	_var02, _var01 wz
2003c                 | '     return 0 ' No event
2003c     00 FA 05 A6 |  if_e	mov	result1, #0
20040     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20044                 | '   r := keyq_data[tail]
20044     00 03 02 F6 | 	mov	_var02, _var01
20048     02 02 66 F0 | 	shl	_var02, #2
2004c     0F 00 00 FF 
20050     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20054     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
20058     01 FB 01 FB | 	rdlong	result1, _var02
2005c                 | '   if ++tail == KEYQUEUE_SIZE
2005c     01 00 06 F1 | 	add	_var01, #1
20060     80 00 0E F2 | 	cmp	_var01, #128 wz
20064                 | '     tail := 0
20064     00 00 06 A6 |  if_e	mov	_var01, #0
20068                 | '   keyq_tail := tail
20068     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2006c     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
20070     0F 00 00 FF 
20074     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
20078                 | _usbnew_spin2_get_key_ret
20078     2D 00 64 FD | 	ret
2007c                 | 
2007c                 | ' 
2007c                 | ' '' Emulate mouse movement
2007c                 | ' PUB mouse_move(x,y)
2007c                 | _usbnew_spin2_mouse_move
2007c     02 4A 05 F6 | 	mov	COUNT_, #2
20080     A8 00 A0 FD | 	call	#pushregs_
20084     09 1F 02 F6 | 	mov	local01, arg01
20088     0A 21 02 F6 | 	mov	local02, arg02
2008c                 | '   mouse_lock := 1
2008c     14 00 00 FF 
20090     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20094     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
20098     14 00 00 FF 
2009c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
200a0                 | '   waitus(2) ' hope driver is now done
200a0     02 12 06 F6 | 	mov	arg01, #2
200a4     E8 0A B0 FD | 	call	#__system___waitus
200a8                 | '   mouse_xacc := x
200a8     14 00 00 FF 
200ac     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
200b0     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
200b4                 | '   mouse_yacc := y
200b4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
200b8     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
200bc                 | '   if mouse_outptr
200bc     04 00 00 FF 
200c0     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
200c4     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
200c8     0F 00 00 FF 
200cc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
200d0     24 00 90 AD |  if_e	jmp	#LR__2660
200d4                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
200d4     10 20 66 F0 | 	shl	local02, #16
200d8     0F 1F 32 F9 | 	getword	local01, local01, #0
200dc     0F 21 42 F5 | 	or	local02, local01
200e0     0F 00 00 FF 
200e4     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
200e8     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
200ec     0F 00 00 FF 
200f0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
200f4     0F 21 62 FC | 	wrlong	local02, local01
200f8                 | LR__2660
200f8                 | '   mouse_lock := 0
200f8     14 00 00 FF 
200fc     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20100     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
20104     14 00 00 FF 
20108     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
2010c     A7 F0 03 F6 | 	mov	ptra, fp
20110     B2 00 A0 FD | 	call	#popregs_
20114                 | _usbnew_spin2_mouse_move_ret
20114     2D 00 64 FD | 	ret
20118                 | 
20118                 | '     '' Set HAVE_HIDPAD to enable.
20118                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
20118                 | ' 
20118                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
20118                 | ' PUB hidpad_id(dev) : r
20118                 | _usbnew_spin2_hidpad_id
20118                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
20118     13 00 00 FF 
2011c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20120     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20124     09 01 02 F6 | 	mov	_var01, arg01
20128     03 00 66 F0 | 	shl	_var01, #3
2012c     09 01 82 F1 | 	sub	_var01, arg01
20130     02 00 66 F0 | 	shl	_var01, #2
20134     00 FB 01 F1 | 	add	result1, _var01
20138     FD FA 01 FB | 	rdlong	result1, result1
2013c     13 00 00 FF 
20140     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20144                 | _usbnew_spin2_hidpad_id_ret
20144     2D 00 64 FD | 	ret
20148                 | 
20148                 | ' 
20148                 | ' '' Get all button states for a device
20148                 | ' PUB hidpad_buttons(dev) : r 
20148                 | _usbnew_spin2_hidpad_buttons
20148                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20148     13 00 00 FF 
2014c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20150     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20154     09 01 02 F6 | 	mov	_var01, arg01
20158     03 00 66 F0 | 	shl	_var01, #3
2015c     09 01 82 F1 | 	sub	_var01, arg01
20160     02 00 66 F0 | 	shl	_var01, #2
20164     00 FB 01 F1 | 	add	result1, _var01
20168     14 FA 05 F1 | 	add	result1, #20
2016c     FD FA 01 FB | 	rdlong	result1, result1
20170     13 00 00 FF 
20174     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20178                 | _usbnew_spin2_hidpad_buttons_ret
20178     2D 00 64 FD | 	ret
2017c                 | 
2017c                 | ' 
2017c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
2017c                 | ' PUB hidpad_axis(dev,axnum) : r
2017c                 | _usbnew_spin2_hidpad_axis
2017c                 | '   if axnum +>= 6
2017c     06 14 16 F2 | 	cmp	arg02, #6 wc
20180                 | '     return 0
20180     00 FA 05 36 |  if_ae	mov	result1, #0
20184     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
20188                 | '   else 
20188                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
20188     13 00 00 FF 
2018c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20190     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20194     09 01 02 F6 | 	mov	_var01, arg01
20198     03 00 66 F0 | 	shl	_var01, #3
2019c     09 01 82 F1 | 	sub	_var01, arg01
201a0     02 00 66 F0 | 	shl	_var01, #2
201a4     00 FB 01 F1 | 	add	result1, _var01
201a8     04 00 06 F6 | 	mov	_var01, #4
201ac     0A 01 02 F1 | 	add	_var01, arg02
201b0     01 00 66 F0 | 	shl	_var01, #1
201b4     FD 00 02 F1 | 	add	_var01, result1
201b8     00 FB E1 FA | 	rdword	result1, _var01
201bc     0F FA 65 F7 | 	signx	result1, #15
201c0     13 00 00 FF 
201c4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
201c8                 | _usbnew_spin2_hidpad_axis_ret
201c8     2D 00 64 FD | 	ret
201cc                 | 
201cc                 | ' 
201cc                 | ' 
201cc                 | ' '--------------------------------------------------------------
201cc                 | ' '---------- Init the variables, start the cog. ----------------
201cc                 | ' '--------------------------------------------------------------
201cc                 | ' 
201cc                 | ' pub start(mbox,scope,cache) :cog,base | iii
201cc                 | _audio096_spin2_start
201cc     04 4A 05 F6 | 	mov	COUNT_, #4
201d0     A8 00 A0 FD | 	call	#pushregs_
201d4     09 1F 02 F6 | 	mov	local01, arg01
201d8                 | ' 
201d8                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
201d8                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
201d8                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
201d8                 | ' 
201d8                 | ' mailboxaddr:=mbox 
201d8     F2 1E 62 FC | 	wrlong	local01, objptr
201dc                 | ' scope_ptr:=scope
201dc     04 E4 05 F1 | 	add	objptr, #4
201e0     F2 14 62 FC | 	wrlong	arg02, objptr
201e4                 | ' cache_ptr:=cache
201e4     04 E4 05 F1 | 	add	objptr, #4
201e8     F2 16 62 FC | 	wrlong	arg03, objptr
201ec                 | ' base:=@channel1[0]
201ec     04 E4 05 F1 | 	add	objptr, #4
201f0     F2 20 02 F6 | 	mov	local02, objptr
201f4                 | ' long[$40]:=mbox
201f4     40 1E 66 FC | 	wrlong	local01, #64
201f8                 | ' repeat iii from 0 to 7
201f8     00 22 06 F6 | 	mov	local03, #0
201fc     02 00 00 FF 
20200     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
20204     0C E4 85 F1 | 	sub	objptr, #12
20208     97 BC 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
2020c                 | LR__2670
2020c                 | '   long[base+64*iii]:=0
2020c     10 1F 02 F6 | 	mov	local01, local02
20210     11 FD 01 F6 | 	mov	result2, local03
20214     06 FC 65 F0 | 	shl	result2, #6
20218     FE 1E 02 F1 | 	add	local01, result2
2021c     0F 01 68 FC | 	wrlong	#0, local01
20220                 | '   long[base+64*iii+4]:=0
20220     10 1F 02 F6 | 	mov	local01, local02
20224     11 FD 01 F6 | 	mov	result2, local03
20228     06 FC 65 F0 | 	shl	result2, #6
2022c     FE 1E 02 F1 | 	add	local01, result2
20230     04 1E 06 F1 | 	add	local01, #4
20234     0F 01 68 FC | 	wrlong	#0, local01
20238                 | '   long[base+64*iii+12]:=0
20238     10 25 02 F6 | 	mov	local04, local02
2023c     11 1F 02 F6 | 	mov	local01, local03
20240     06 1E 66 F0 | 	shl	local01, #6
20244     0F 25 02 F1 | 	add	local04, local01
20248     0C 24 06 F1 | 	add	local04, #12
2024c     12 01 68 FC | 	wrlong	#0, local04
20250                 | '   long[base+64*iii+16]:=2 
20250     10 25 02 F6 | 	mov	local04, local02
20254     11 1F 02 F6 | 	mov	local01, local03
20258     06 1E 66 F0 | 	shl	local01, #6
2025c     0F 25 02 F1 | 	add	local04, local01
20260     10 24 06 F1 | 	add	local04, #16
20264     12 05 68 FC | 	wrlong	#2, local04
20268                 | '   word[base+64*iii+20]:=0
20268     10 25 02 F6 | 	mov	local04, local02
2026c     11 1F 02 F6 | 	mov	local01, local03
20270     06 1E 66 F0 | 	shl	local01, #6
20274     0F 25 02 F1 | 	add	local04, local01
20278     14 24 06 F1 | 	add	local04, #20
2027c     12 01 58 FC | 	wrword	#0, local04
20280                 | '   word[base+64*iii+22]:=8192
20280     10 25 02 F6 | 	mov	local04, local02
20284     11 1F 02 F6 | 	mov	local01, local03
20288     06 1E 66 F0 | 	shl	local01, #6
2028c     0F 25 02 F1 | 	add	local04, local01
20290     16 24 06 F1 | 	add	local04, #22
20294     10 00 80 FF 
20298     12 01 58 FC | 	wrword	##8192, local04
2029c                 | '   word[base+64*iii+24]:=4000+2*iii
2029c     11 25 02 F6 | 	mov	local04, local03
202a0     01 24 66 F0 | 	shl	local04, #1
202a4     07 00 00 FF 
202a8     A0 1F 06 F6 | 	mov	local01, ##4000
202ac     12 1F 02 F1 | 	add	local01, local04
202b0     10 25 02 F6 | 	mov	local04, local02
202b4     11 FD 01 F6 | 	mov	result2, local03
202b8     06 FC 65 F0 | 	shl	result2, #6
202bc     FE 24 02 F1 | 	add	local04, result2
202c0     18 24 06 F1 | 	add	local04, #24
202c4     12 1F 52 FC | 	wrword	local01, local04
202c8                 | '   word[base+64*iii+26]:=2
202c8     10 25 02 F6 | 	mov	local04, local02
202cc     11 1F 02 F6 | 	mov	local01, local03
202d0     06 1E 66 F0 | 	shl	local01, #6
202d4     0F 25 02 F1 | 	add	local04, local01
202d8     1A 24 06 F1 | 	add	local04, #26
202dc     12 05 58 FC | 	wrword	#2, local04
202e0                 | '   long [base+64*iii+8]:=@null | $C0000000
202e0     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
202e4     3E 1E 26 F4 | 	bith	local01, #62
202e8     10 25 02 F6 | 	mov	local04, local02
202ec     11 17 02 F6 | 	mov	arg03, local03
202f0     06 16 66 F0 | 	shl	arg03, #6
202f4     0B 25 02 F1 | 	add	local04, arg03
202f8     08 24 06 F1 | 	add	local04, #8
202fc     12 1F 62 FC | 	wrlong	local01, local04
20300                 | '   long[base+64*iii+32]:=0
20300     10 25 02 F6 | 	mov	local04, local02
20304     11 1F 02 F6 | 	mov	local01, local03
20308     06 1E 66 F0 | 	shl	local01, #6
2030c     0F 25 02 F1 | 	add	local04, local01
20310     20 24 06 F1 | 	add	local04, #32
20314     12 01 68 FC | 	wrlong	#0, local04
20318                 | '   long[base+64*iii+36]:=0
20318     10 25 02 F6 | 	mov	local04, local02
2031c     11 1F 02 F6 | 	mov	local01, local03
20320     06 1E 66 F0 | 	shl	local01, #6
20324     0F 25 02 F1 | 	add	local04, local01
20328     24 24 06 F1 | 	add	local04, #36
2032c     12 01 68 FC | 	wrlong	#0, local04
20330                 | '   long[base+64*iii+40]:=0
20330     10 25 02 F6 | 	mov	local04, local02
20334     11 1F 02 F6 | 	mov	local01, local03
20338     06 1E 66 F0 | 	shl	local01, #6
2033c     0F 25 02 F1 | 	add	local04, local01
20340     28 24 06 F1 | 	add	local04, #40
20344     12 01 68 FC | 	wrlong	#0, local04
20348                 | '   long[base+64*iii+44]:=0
20348     10 25 02 F6 | 	mov	local04, local02
2034c     11 1F 02 F6 | 	mov	local01, local03
20350     06 1E 66 F0 | 	shl	local01, #6
20354     0F 25 02 F1 | 	add	local04, local01
20358     2C 24 06 F1 | 	add	local04, #44
2035c     12 01 68 FC | 	wrlong	#0, local04
20360                 | '   long[base+64*iii+28]:=0
20360     10 25 02 F6 | 	mov	local04, local02
20364     11 1F 02 F6 | 	mov	local01, local03
20368     06 1E 66 F0 | 	shl	local01, #6
2036c     0F 25 02 F1 | 	add	local04, local01
20370     1C 24 06 F1 | 	add	local04, #28
20374     12 01 68 FC | 	wrlong	#0, local04
20378     01 22 06 F1 | 	add	local03, #1
2037c     08 22 56 F2 | 	cmps	local03, #8 wc
20380     88 FE 9F CD |  if_b	jmp	#LR__2670
20384                 | LR__2671
20384     02 00 00 FF 
20388     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
2038c                 | '   
2038c                 | ' cog:=coginit(16,@audio,@mailboxaddr)
2038c     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
20390     F2 16 02 F6 | 	mov	arg03, objptr
20394     10 24 06 F6 | 	mov	local04, #16
20398     28 16 62 FD | 	setq	arg03
2039c     0A 25 F2 FC | 	coginit	local04, arg02 wc
203a0     01 24 66 C6 |  if_b	neg	local04, #1
203a4                 | ' waitms(100)
203a4     64 12 06 F6 | 	mov	arg01, #100
203a8     78 07 B0 FD | 	call	#__system___waitms
203ac                 | ' return cog,base
203ac     10 FD 01 F6 | 	mov	result2, local02
203b0     12 FB 01 F6 | 	mov	result1, local04
203b4     A7 F0 03 F6 | 	mov	ptra, fp
203b8     B2 00 A0 FD | 	call	#popregs_
203bc                 | _audio096_spin2_start_ret
203bc     2D 00 64 FD | 	ret
203c0                 | 
203c0                 | ' 
203c0                 | ' ' a simple play procedure to not poke everything. 
203c0                 | ' 
203c0                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
203c0                 | _audio096_spin2_play
203c0     0C E4 05 F1 | 	add	objptr, #12
203c4     F2 00 02 F6 | 	mov	_var01, objptr
203c8     06 12 66 F0 | 	shl	arg01, #6
203cc     09 01 02 F1 | 	add	_var01, arg01
203d0     00 13 02 F6 | 	mov	arg01, _var01
203d4     0C 12 06 F1 | 	add	arg01, #12
203d8     09 1B 62 FC | 	wrlong	arg05, arg01
203dc     00 1C 56 F2 | 	cmps	arg06, #0 wc
203e0     00 13 02 36 |  if_ae	mov	arg01, _var01
203e4     10 12 06 31 |  if_ae	add	arg01, #16
203e8     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
203ec     02 1A 06 C1 |  if_b	add	arg05, #2
203f0     00 13 02 C6 |  if_b	mov	arg01, _var01
203f4     10 12 06 C1 |  if_b	add	arg01, #16
203f8     09 1B 62 CC |  if_b	wrlong	arg05, arg01
203fc     0B 13 52 F6 | 	abs	arg01, arg03 wc
20400     0F 1B 80 FF 
20404     09 1F 1A FD | 	qdiv	##3546895, arg01
20408                 | ' 
20408                 | ' base2:=@channel1[0]+64*channel
20408                 | ' 
20408                 | ' 
20408                 | ' long[base2+12]:= len
20408                 | ' if loop >=0 
20408                 | '   long[base2+16]:= loop
20408     0C E4 85 F1 | 	sub	objptr, #12
2040c                 | ' else
2040c                 | '   long[base2+16]:= len+2
2040c                 | ' word[base2+20]:=vol
2040c     00 13 02 F6 | 	mov	arg01, _var01
20410     14 12 06 F1 | 	add	arg01, #20
20414     09 19 52 FC | 	wrword	arg04, arg01
20418                 | ' word[base2+24]:= 3546895/splfreq 
20418     00 19 02 F6 | 	mov	arg04, _var01
2041c     18 18 06 F1 | 	add	arg04, #24
20420                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20420                 | ' long[base2+28]:=$40000000    
20420                 | ' long[base2+32]:=0    
20420                 | ' long[base2+36]:=0    
20420                 | ' long[base2+40]:=0    
20420                 | ' long[base2+44]:=0    
20420                 | ' long[base2+8]:=sample+$C0000000     
20420     00 00 60 FF 
20424     00 14 06 F1 | 	add	arg02, ##-1073741824
20428     18 12 62 FD | 	getqx	arg01
2042c     09 13 82 F6 | 	negc	arg01, arg01
20430     0C 13 52 FC | 	wrword	arg01, arg04
20434     00 13 02 F6 | 	mov	arg01, _var01
20438     1A 12 06 F1 | 	add	arg01, #26
2043c     09 01 5A FC | 	wrword	#256, arg01
20440     00 13 02 F6 | 	mov	arg01, _var01
20444     1C 12 06 F1 | 	add	arg01, #28
20448     00 00 A0 FF 
2044c     09 01 68 FC | 	wrlong	##1073741824, arg01
20450     00 13 02 F6 | 	mov	arg01, _var01
20454     20 12 06 F1 | 	add	arg01, #32
20458     09 01 68 FC | 	wrlong	#0, arg01
2045c     00 13 02 F6 | 	mov	arg01, _var01
20460     24 12 06 F1 | 	add	arg01, #36
20464     09 01 68 FC | 	wrlong	#0, arg01
20468     00 13 02 F6 | 	mov	arg01, _var01
2046c     28 12 06 F1 | 	add	arg01, #40
20470     09 01 68 FC | 	wrlong	#0, arg01
20474     00 13 02 F6 | 	mov	arg01, _var01
20478     2C 12 06 F1 | 	add	arg01, #44
2047c     09 01 68 FC | 	wrlong	#0, arg01
20480     08 00 06 F1 | 	add	_var01, #8
20484     00 15 62 FC | 	wrlong	arg02, _var01
20488                 | _audio096_spin2_play_ret
20488     2D 00 64 FD | 	ret
2048c                 | 
2048c                 | ' 
2048c                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
2048c                 | _audio096_spin2_play8
2048c                 | ' 
2048c                 | ' base2:=@channel1[0]+64*channel
2048c     0C E4 05 F1 | 	add	objptr, #12
20490     F2 00 02 F6 | 	mov	_var01, objptr
20494     06 12 66 F0 | 	shl	arg01, #6
20498     09 01 02 F1 | 	add	_var01, arg01
2049c                 | ' long[base2]:=0
2049c     00 01 68 FC | 	wrlong	#0, _var01
204a0                 | ' long[base2+8]:=sample+$40000000 
204a0     00 00 20 FF 
204a4     00 14 06 F1 | 	add	arg02, ##1073741824
204a8     00 13 02 F6 | 	mov	arg01, _var01
204ac     08 12 06 F1 | 	add	arg01, #8
204b0     09 15 62 FC | 	wrlong	arg02, arg01
204b4                 | ' if loop>=0
204b4     00 1C 56 F2 | 	cmps	arg06, #0 wc
204b8     0C E4 85 F1 | 	sub	objptr, #12
204bc     1C 00 90 CD |  if_b	jmp	#LR__2680
204c0                 | '   long[base2+12]:=loop
204c0     00 15 02 F6 | 	mov	arg02, _var01
204c4     0C 14 06 F1 | 	add	arg02, #12
204c8     0A 1D 62 FC | 	wrlong	arg06, arg02
204cc                 | '   long[base2+16]:= len
204cc     00 1D 02 F6 | 	mov	arg06, _var01
204d0     10 1C 06 F1 | 	add	arg06, #16
204d4     0E 1B 62 FC | 	wrlong	arg05, arg06
204d8     1C 00 90 FD | 	jmp	#LR__2681
204dc                 | LR__2680
204dc                 | ' else
204dc                 | '   long[base2+12]:= len
204dc     00 1D 02 F6 | 	mov	arg06, _var01
204e0     0C 1C 06 F1 | 	add	arg06, #12
204e4     0E 1B 62 FC | 	wrlong	arg05, arg06
204e8                 | '   long[base2+16]:= len+1
204e8     01 1A 06 F1 | 	add	arg05, #1
204ec     00 13 02 F6 | 	mov	arg01, _var01
204f0     10 12 06 F1 | 	add	arg01, #16
204f4     09 1B 62 FC | 	wrlong	arg05, arg01
204f8                 | LR__2681
204f8     0B 17 52 F6 | 	abs	arg03, arg03 wc
204fc     0F 1B 80 FF 
20500     0B 1F 1A FD | 	qdiv	##3546895, arg03
20504                 | ' word[base2+20]:=vol
20504     00 17 02 F6 | 	mov	arg03, _var01
20508     14 16 06 F1 | 	add	arg03, #20
2050c     0B 19 52 FC | 	wrword	arg04, arg03
20510                 | ' word[base2+24]:= 3546895 /splfreq 
20510     00 13 02 F6 | 	mov	arg01, _var01
20514     18 12 06 F1 | 	add	arg01, #24
20518                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20518     1A 00 06 F1 | 	add	_var01, #26
2051c     18 18 62 FD | 	getqx	arg04
20520     0C 19 82 F6 | 	negc	arg04, arg04
20524     09 19 52 FC | 	wrword	arg04, arg01
20528     00 01 5A FC | 	wrword	#256, _var01
2052c                 | _audio096_spin2_play8_ret
2052c     2D 00 64 FD | 	ret
20530                 | 
20530                 | ' 'long[base2+28]:=$40000000
20530                 | ' 
20530                 | '     
20530                 | ' pub stop(channel) 'silence it
20530                 | _audio096_spin2_stop
20530                 | ' 
20530                 | ' word[@channel1[0]+64*channel+20]:=0
20530     0C E4 05 F1 | 	add	objptr, #12
20534     F2 00 02 F6 | 	mov	_var01, objptr
20538     09 03 02 F6 | 	mov	_var02, arg01
2053c     06 02 66 F0 | 	shl	_var02, #6
20540     01 01 02 F1 | 	add	_var01, _var02
20544     14 00 06 F1 | 	add	_var01, #20
20548     00 01 58 FC | 	wrword	#0, _var01
2054c                 | ' word[@channel1[0]+64*channel+20]:=0
2054c     F2 00 02 F6 | 	mov	_var01, objptr
20550     06 12 66 F0 | 	shl	arg01, #6
20554     09 01 02 F1 | 	add	_var01, arg01
20558     14 00 06 F1 | 	add	_var01, #20
2055c     00 01 58 FC | 	wrword	#0, _var01
20560     0C E4 85 F1 | 	sub	objptr, #12
20564                 | _audio096_spin2_stop_ret
20564     2D 00 64 FD | 	ret
20568                 | hubexit
20568     81 00 80 FD | 	jmp	#cogexit
2056c                 | 
2056c                 | __system___setbaud
2056c     14 7C 06 FB | 	rdlong	muldiva_, #20
20570     09 7F 02 F6 | 	mov	muldivb_, arg01
20574     BA 00 A0 FD | 	call	#divide_
20578     97 06 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
2057c                 | LR__2690
2057c     3E FA 9D FA | 	rdpin	result1, #62 wc
20580     FE FC A1 F1 | 	subx	result2, result2
20584     F4 FF 9F CD |  if_b	jmp	#LR__2690
20588                 | LR__2691
20588     40 7C 64 FD | 	dirl	#62
2058c     40 7E 64 FD | 	dirl	#63
20590     F3 7E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
20594     10 7E 66 F0 | 	shl	muldivb_, #16
20598     07 14 06 F6 | 	mov	arg02, #7
2059c     3F 15 02 F1 | 	add	arg02, muldivb_
205a0     3E F8 0C FC | 	wrpin	#124, #62
205a4     3E 14 16 FC | 	wxpin	arg02, #62
205a8     3F 7C 0C FC | 	wrpin	#62, #63
205ac     14 14 06 F1 | 	add	arg02, #20
205b0     3F 14 16 FC | 	wxpin	arg02, #63
205b4     41 7C 64 FD | 	dirh	#62
205b8     41 7E 64 FD | 	dirh	#63
205bc                 | __system___setbaud_ret
205bc     2D 00 64 FD | 	ret
205c0                 | 
205c0                 | __system___txraw
205c0     01 4A 05 F6 | 	mov	COUNT_, #1
205c4     A8 00 A0 FD | 	call	#pushregs_
205c8     09 1F 02 F6 | 	mov	local01, arg01
205cc     97 06 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
205d0                 | LR__2700
205d0     3E FA 9D FA | 	rdpin	result1, #62 wc
205d4     FE FC A1 F1 | 	subx	result2, result2
205d8     F4 FF 9F CD |  if_b	jmp	#LR__2700
205dc                 | LR__2701
205dc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
205e0     C2 01 00 AF 
205e4     00 12 06 A6 |  if_e	mov	arg01, ##230400
205e8     80 FF BF AD |  if_e	call	#__system___setbaud
205ec     58 7C 64 FD | 	drvl	#62
205f0     3E 1E 26 FC | 	wypin	local01, #62
205f4     01 FA 05 F6 | 	mov	result1, #1
205f8     A7 F0 03 F6 | 	mov	ptra, fp
205fc     B2 00 A0 FD | 	call	#popregs_
20600                 | __system___txraw_ret
20600     2D 00 64 FD | 	ret
20604                 | 
20604                 | __system___rxraw
20604     0D 4A 05 F6 | 	mov	COUNT_, #13
20608     A8 00 A0 FD | 	call	#pushregs_
2060c     09 1F 02 F6 | 	mov	local01, arg01
20610     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
20614     C2 01 00 AF 
20618     00 12 06 A6 |  if_e	mov	arg01, ##230400
2061c     4C FF BF AD |  if_e	call	#__system___setbaud
20620     00 1E 0E F2 | 	cmp	local01, #0 wz
20624     20 00 90 AD |  if_e	jmp	#LR__2710
20628     14 22 06 FB | 	rdlong	local03, #20
2062c     0A 22 46 F0 | 	shr	local03, #10
20630     11 1F 02 FD | 	qmul	local01, local03
20634     1A FA 61 FD | 	getct	result1
20638     18 24 62 FD | 	getqx	local04
2063c     12 FB 01 F1 | 	add	result1, local04
20640     FD 26 02 F6 | 	mov	local05, result1
20644     04 00 90 FD | 	jmp	#LR__2711
20648                 | LR__2710
20648     00 26 06 F6 | 	mov	local05, #0
2064c                 | LR__2711
2064c     01 28 66 F6 | 	neg	local06, #1
20650     3F 2A 06 F6 | 	mov	local07, #63
20654     00 2C 06 F6 | 	mov	local08, #0
20658     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2065c     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
20660     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20664                 | LR__2712
20664     08 2E 16 F4 | 	testb	local09, #8 wc
20668     09 2E 76 F4 | 	testbn	local09, #9 andc
2066c     0A 2E 46 F0 | 	shr	local09, #10
20670     01 2C 06 C6 |  if_b	mov	local08, #1
20674     40 7E 6C 3D |  if_ae	testp	#63 wz
20678     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
2067c     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
20680     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
20684                 | LR__2713
20684     00 20 06 F6 | 	mov	local02, #0
20688     00 2C 0E F2 | 	cmp	local08, #0 wz
2068c     01 20 66 56 |  if_ne	neg	local02, #1
20690     00 30 06 F6 | 	mov	local10, #0
20694     00 22 06 F6 | 	mov	local03, #0
20698     00 1E 0E F2 | 	cmp	local01, #0 wz
2069c     01 22 66 56 |  if_ne	neg	local03, #1
206a0     00 24 06 F6 | 	mov	local04, #0
206a4     00 32 06 F6 | 	mov	local11, #0
206a8     13 35 02 F6 | 	mov	local12, local05
206ac     1A FA 61 FD | 	getct	result1
206b0     FD 36 02 F6 | 	mov	local13, result1
206b4     1B 35 82 F1 | 	sub	local12, local13
206b8     00 34 56 F2 | 	cmps	local12, #0 wc
206bc     00 32 26 C6 |  if_b	not	local11, #0
206c0     00 32 0E F2 | 	cmp	local11, #0 wz
206c4     00 24 26 56 |  if_ne	not	local04, #0
206c8     12 23 CA F7 | 	test	local03, local04 wz
206cc     00 30 26 56 |  if_ne	not	local10, #0
206d0     18 21 4A F5 | 	or	local02, local10 wz
206d4     8C FF 9F AD |  if_e	jmp	#LR__2712
206d8     00 2C 0E F2 | 	cmp	local08, #0 wz
206dc     17 29 02 56 |  if_ne	mov	local06, local09
206e0     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
206e4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
206e8     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
206ec     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
206f0     14 FB 01 F6 | 	mov	result1, local06
206f4     A7 F0 03 F6 | 	mov	ptra, fp
206f8     B2 00 A0 FD | 	call	#popregs_
206fc                 | __system___rxraw_ret
206fc     2D 00 64 FD | 	ret
20700                 | 
20700                 | __system___getus
20700     1A FC 71 FD | 	getct	result2 wc
20704     1A 00 62 FD | 	getct	_var01
20708     10 E6 05 F1 | 	add	ptr___system__dat__, #16
2070c     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
20710     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20714     20 00 90 5D |  if_ne	jmp	#LR__2720
20718     14 02 06 FB | 	rdlong	_var02, #20
2071c     A1 07 00 FF 
20720     40 02 16 FD | 	qdiv	_var02, ##1000000
20724     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20728     18 FA 61 FD | 	getqx	result1
2072c     FD 02 02 F6 | 	mov	_var02, result1
20730     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
20734     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20738                 | LR__2720
20738     01 FD 11 FD | 	qdiv	result2, _var02
2073c     19 FC 61 FD | 	getqy	result2
20740     28 FC 61 FD | 	setq	result2
20744     01 01 12 FD | 	qdiv	_var01, _var02
20748     18 FA 61 FD | 	getqx	result1
2074c                 | __system___getus_ret
2074c     2D 00 64 FD | 	ret
20750                 | 
20750                 | __system____builtin_memmove
20750     09 01 02 F6 | 	mov	_var01, arg01
20754     0A 13 52 F2 | 	cmps	arg01, arg02 wc
20758     10 00 90 CD |  if_b	jmp	#LR__2730
2075c     0A 03 02 F6 | 	mov	_var02, arg02
20760     0B 03 02 F1 | 	add	_var02, arg03
20764     01 13 52 F2 | 	cmps	arg01, _var02 wc
20768     48 00 90 CD |  if_b	jmp	#LR__2736
2076c                 | LR__2730
2076c     0B 05 02 F6 | 	mov	_var03, arg03
20770     02 04 4E F0 | 	shr	_var03, #2 wz
20774     18 00 90 AD |  if_e	jmp	#LR__2735
20778     97 0A 48 FB | 	callpa	#(@LR__2733-@LR__2731)>>2,fcache_load_ptr_
2077c                 | LR__2731
2077c     02 09 D8 FC | 	rep	@LR__2734, _var03
20780                 | LR__2732
20780     0A 05 02 FB | 	rdlong	_var03, arg02
20784     09 05 62 FC | 	wrlong	_var03, arg01
20788     04 12 06 F1 | 	add	arg01, #4
2078c     04 14 06 F1 | 	add	arg02, #4
20790                 | LR__2733
20790                 | LR__2734
20790                 | LR__2735
20790     02 16 CE F7 | 	test	arg03, #2 wz
20794     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
20798     09 03 52 5C |  if_ne	wrword	_var02, arg01
2079c     02 12 06 51 |  if_ne	add	arg01, #2
207a0     02 14 06 51 |  if_ne	add	arg02, #2
207a4     01 16 CE F7 | 	test	arg03, #1 wz
207a8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
207ac     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
207b0     28 00 90 FD | 	jmp	#LR__2742
207b4                 | LR__2736
207b4     0B 13 02 F1 | 	add	arg01, arg03
207b8     0B 15 02 F1 | 	add	arg02, arg03
207bc     0B 07 0A F6 | 	mov	_var04, arg03 wz
207c0     18 00 90 AD |  if_e	jmp	#LR__2741
207c4     97 0A 48 FB | 	callpa	#(@LR__2739-@LR__2737)>>2,fcache_load_ptr_
207c8                 | LR__2737
207c8     03 09 D8 FC | 	rep	@LR__2740, _var04
207cc                 | LR__2738
207cc     01 12 86 F1 | 	sub	arg01, #1
207d0     01 14 86 F1 | 	sub	arg02, #1
207d4     0A 03 C2 FA | 	rdbyte	_var02, arg02
207d8     09 03 42 FC | 	wrbyte	_var02, arg01
207dc                 | LR__2739
207dc                 | LR__2740
207dc                 | LR__2741
207dc                 | LR__2742
207dc     00 FB 01 F6 | 	mov	result1, _var01
207e0                 | __system____builtin_memmove_ret
207e0     2D 00 64 FD | 	ret
207e4                 | 
207e4                 | __system____builtin_strcpy
207e4     09 01 02 F6 | 	mov	_var01, arg01
207e8     97 0A 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
207ec                 | LR__2750
207ec     0A FB C9 FA | 	rdbyte	result1, arg02 wz
207f0     09 FB 41 FC | 	wrbyte	result1, arg01
207f4     01 14 06 F1 | 	add	arg02, #1
207f8     01 12 06 F1 | 	add	arg01, #1
207fc     EC FF 9F 5D |  if_ne	jmp	#LR__2750
20800                 | LR__2751
20800     00 FB 01 F6 | 	mov	result1, _var01
20804                 | __system____builtin_strcpy_ret
20804     2D 00 64 FD | 	ret
20808                 | 
20808                 | __system____topofstack
20808     00 4A 05 F6 | 	mov	COUNT_, #0
2080c     A8 00 A0 FD | 	call	#pushregs_
20810     08 F0 07 F1 | 	add	ptra, #8
20814     04 4E 05 F1 | 	add	fp, #4
20818     A7 12 62 FC | 	wrlong	arg01, fp
2081c     A7 FA 01 F6 | 	mov	result1, fp
20820     04 4E 85 F1 | 	sub	fp, #4
20824     A7 F0 03 F6 | 	mov	ptra, fp
20828     B2 00 A0 FD | 	call	#popregs_
2082c                 | __system____topofstack_ret
2082c     2D 00 64 FD | 	ret
20830                 | 
20830                 | __system___lockmem
20830     00 FA 05 F6 | 	mov	result1, #0
20834     01 FA 61 FD | 	cogid	result1
20838     00 FB 05 F1 | 	add	result1, #256
2083c                 | LR__2760
2083c     09 01 0A FB | 	rdlong	_var01, arg01 wz
20840     09 FB 61 AC |  if_e	wrlong	result1, arg01
20844     09 01 02 AB |  if_e	rdlong	_var01, arg01
20848     09 01 02 AB |  if_e	rdlong	_var01, arg01
2084c     FD 00 0A F2 | 	cmp	_var01, result1 wz
20850     E8 FF 9F 5D |  if_ne	jmp	#LR__2760
20854                 | __system___lockmem_ret
20854     2D 00 64 FD | 	ret
20858                 | 
20858                 | __system___string_cmp
20858     97 14 48 FB | 	callpa	#(@LR__2771-@LR__2770)>>2,fcache_load_ptr_
2085c                 | LR__2770
2085c     09 01 C2 FA | 	rdbyte	_var01, arg01
20860     0A 03 C2 FA | 	rdbyte	_var02, arg02
20864     00 05 02 F6 | 	mov	_var03, _var01
20868     01 05 8A F1 | 	sub	_var03, _var02 wz
2086c     01 12 06 F1 | 	add	arg01, #1
20870     01 14 06 F1 | 	add	arg02, #1
20874     0C 00 90 5D |  if_ne	jmp	#LR__2772
20878     00 00 0E F2 | 	cmp	_var01, #0 wz
2087c     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
20880     D8 FF 9F 5D |  if_ne	jmp	#LR__2770
20884                 | LR__2771
20884                 | LR__2772
20884     02 FB 01 F6 | 	mov	result1, _var03
20888                 | __system___string_cmp_ret
20888     2D 00 64 FD | 	ret
2088c                 | 
2088c                 | __system___string_concat
2088c     05 4A 05 F6 | 	mov	COUNT_, #5
20890     A8 00 A0 FD | 	call	#pushregs_
20894     09 1F 02 F6 | 	mov	local01, arg01
20898     0A 21 02 F6 | 	mov	local02, arg02
2089c     0F 13 02 F6 | 	mov	arg01, local01
208a0     09 23 02 F6 | 	mov	local03, arg01
208a4     97 06 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
208a8                 | LR__2780
208a8     11 FB C9 FA | 	rdbyte	result1, local03 wz
208ac     01 22 06 51 |  if_ne	add	local03, #1
208b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2780
208b4                 | LR__2781
208b4     09 23 82 F1 | 	sub	local03, arg01
208b8     11 25 02 F6 | 	mov	local04, local03
208bc     10 13 02 F6 | 	mov	arg01, local02
208c0     09 23 02 F6 | 	mov	local03, arg01
208c4     97 06 48 FB | 	callpa	#(@LR__2783-@LR__2782)>>2,fcache_load_ptr_
208c8                 | LR__2782
208c8     11 FB C9 FA | 	rdbyte	result1, local03 wz
208cc     01 22 06 51 |  if_ne	add	local03, #1
208d0     F4 FF 9F 5D |  if_ne	jmp	#LR__2782
208d4                 | LR__2783
208d4     09 23 82 F1 | 	sub	local03, arg01
208d8     12 13 02 F6 | 	mov	arg01, local04
208dc     11 13 02 F1 | 	add	arg01, local03
208e0     01 12 06 F1 | 	add	arg01, #1
208e4     24 3E B0 FD | 	call	#__system___gc_alloc_managed
208e8     FD 26 0A F6 | 	mov	local05, result1 wz
208ec     28 00 90 AD |  if_e	jmp	#LR__2784
208f0     13 13 02 F6 | 	mov	arg01, local05
208f4     0F 15 02 F6 | 	mov	arg02, local01
208f8     12 17 02 F6 | 	mov	arg03, local04
208fc     50 FE BF FD | 	call	#__system____builtin_memmove
20900     13 13 02 F6 | 	mov	arg01, local05
20904     12 13 02 F1 | 	add	arg01, local04
20908     01 22 06 F1 | 	add	local03, #1
2090c     10 15 02 F6 | 	mov	arg02, local02
20910     11 17 02 F6 | 	mov	arg03, local03
20914     38 FE BF FD | 	call	#__system____builtin_memmove
20918                 | LR__2784
20918     13 FB 01 F6 | 	mov	result1, local05
2091c     A7 F0 03 F6 | 	mov	ptra, fp
20920     B2 00 A0 FD | 	call	#popregs_
20924                 | __system___string_concat_ret
20924     2D 00 64 FD | 	ret
20928                 | 
20928                 | __system___tx
20928     02 4A 05 F6 | 	mov	COUNT_, #2
2092c     A8 00 A0 FD | 	call	#pushregs_
20930     09 1F 02 F6 | 	mov	local01, arg01
20934     0A 1E 0E F2 | 	cmp	local01, #10 wz
20938     18 00 90 5D |  if_ne	jmp	#LR__2790
2093c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20940     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20944     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20948     02 20 CE F7 | 	test	local02, #2 wz
2094c     0D 12 06 56 |  if_ne	mov	arg01, #13
20950     6C FC BF 5D |  if_ne	call	#__system___txraw
20954                 | LR__2790
20954     0F 13 02 F6 | 	mov	arg01, local01
20958     64 FC BF FD | 	call	#__system___txraw
2095c     A7 F0 03 F6 | 	mov	ptra, fp
20960     B2 00 A0 FD | 	call	#popregs_
20964                 | __system___tx_ret
20964     2D 00 64 FD | 	ret
20968                 | 
20968                 | __system___rx
20968     01 4A 05 F6 | 	mov	COUNT_, #1
2096c     A8 00 A0 FD | 	call	#pushregs_
20970                 | LR__2800
20970     00 12 06 F6 | 	mov	arg01, #0
20974     8C FC BF FD | 	call	#__system___rxraw
20978     FD 1E 02 F6 | 	mov	local01, result1
2097c     FF FF 7F FF 
20980     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
20984     E8 FF 9F AD |  if_e	jmp	#LR__2800
20988     0D 1E 0E F2 | 	cmp	local01, #13 wz
2098c     14 00 90 5D |  if_ne	jmp	#LR__2801
20990     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20994     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20998     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2099c     02 FA CD F7 | 	test	result1, #2 wz
209a0     0A 1E 06 56 |  if_ne	mov	local01, #10
209a4                 | LR__2801
209a4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
209a8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
209ac     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
209b0     01 12 CE F7 | 	test	arg01, #1 wz
209b4     1C 00 90 AD |  if_e	jmp	#LR__2804
209b8     7F 1E 0E F2 | 	cmp	local01, #127 wz
209bc     0C 00 90 5D |  if_ne	jmp	#LR__2802
209c0     08 12 06 F6 | 	mov	arg01, #8
209c4     60 FF BF FD | 	call	#__system___tx
209c8     08 00 90 FD | 	jmp	#LR__2803
209cc                 | LR__2802
209cc     0F 13 02 F6 | 	mov	arg01, local01
209d0     54 FF BF FD | 	call	#__system___tx
209d4                 | LR__2803
209d4                 | LR__2804
209d4     0F FB 01 F6 | 	mov	result1, local01
209d8     A7 F0 03 F6 | 	mov	ptra, fp
209dc     B2 00 A0 FD | 	call	#popregs_
209e0                 | __system___rx_ret
209e0     2D 00 64 FD | 	ret
209e4                 | 
209e4                 | __system___pinwrite
209e4     09 01 02 F6 | 	mov	_var01, arg01
209e8     1F 00 06 F5 | 	and	_var01, #31
209ec     20 12 CE F7 | 	test	arg01, #32 wz
209f0     06 12 46 F0 | 	shr	arg01, #6
209f4     09 13 CA F9 | 	bmask	arg01, arg01
209f8     00 13 62 F0 | 	shl	arg01, _var01
209fc     00 15 62 F0 | 	shl	arg02, _var01
20a00     1C 00 90 AD |  if_e	jmp	#LR__2810
20a04     09 F7 43 F5 | 	or	dirb, arg01
20a08     FD 01 02 F6 | 	mov	_var01, outb
20a0c     09 01 22 F5 | 	andn	_var01, arg01
20a10     09 15 02 F5 | 	and	arg02, arg01
20a14     0A 01 42 F5 | 	or	_var01, arg02
20a18     00 FB 03 F6 | 	mov	outb, _var01
20a1c     18 00 90 FD | 	jmp	#LR__2811
20a20                 | LR__2810
20a20     09 F5 43 F5 | 	or	dira, arg01
20a24     FC 01 02 F6 | 	mov	_var01, outa
20a28     09 01 22 F5 | 	andn	_var01, arg01
20a2c     09 15 02 F5 | 	and	arg02, arg01
20a30     0A 01 42 F5 | 	or	_var01, arg02
20a34     00 F9 03 F6 | 	mov	outa, _var01
20a38                 | LR__2811
20a38                 | __system___pinwrite_ret
20a38     2D 00 64 FD | 	ret
20a3c                 | 
20a3c                 | __system___basic_read_line
20a3c     06 4A 05 F6 | 	mov	COUNT_, #6
20a40     A8 00 A0 FD | 	call	#pushregs_
20a44     09 1F 02 F6 | 	mov	local01, arg01
20a48     00 20 06 F6 | 	mov	local02, #0
20a4c     18 22 06 F6 | 	mov	local03, #24
20a50     00 24 06 F6 | 	mov	local04, #0
20a54     18 12 06 F6 | 	mov	arg01, #24
20a58     B0 3C B0 FD | 	call	#__system___gc_alloc_managed
20a5c     FD 26 0A F6 | 	mov	local05, result1 wz
20a60     13 FB 01 A6 |  if_e	mov	result1, local05
20a64     B0 00 90 AD |  if_e	jmp	#LR__2823
20a68                 | LR__2820
20a68     0F 13 02 F6 | 	mov	arg01, local01
20a6c     78 0B B0 FD | 	call	#__system___basic_get_char
20a70     FD 28 02 F6 | 	mov	local06, result1
20a74     01 28 56 F2 | 	cmps	local06, #1 wc
20a78     8C 00 90 CD |  if_b	jmp	#LR__2822
20a7c     0A 28 0E F2 | 	cmp	local06, #10 wz
20a80     10 00 90 5D |  if_ne	jmp	#LR__2821
20a84     00 24 0E F2 | 	cmp	local04, #0 wz
20a88     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20a8c     01 20 86 11 |  if_a	sub	local02, #1
20a90     74 00 90 FD | 	jmp	#LR__2822
20a94                 | LR__2821
20a94     0D 28 0E F2 | 	cmp	local06, #13 wz
20a98     01 24 06 A6 |  if_e	mov	local04, #1
20a9c     00 24 06 56 |  if_ne	mov	local04, #0
20aa0     08 28 0E F2 | 	cmp	local06, #8 wz
20aa4     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20aa8     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20aac     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20ab0     B4 FF 9F AD |  if_e	jmp	#LR__2820
20ab4     13 17 02 F6 | 	mov	arg03, local05
20ab8     10 17 02 F1 | 	add	arg03, local02
20abc     0B 29 42 FC | 	wrbyte	local06, arg03
20ac0     01 20 06 F1 | 	add	local02, #1
20ac4     11 21 0A F2 | 	cmp	local02, local03 wz
20ac8     9C FF 9F 5D |  if_ne	jmp	#LR__2820
20acc     11 13 02 F6 | 	mov	arg01, local03
20ad0     20 12 06 F1 | 	add	arg01, #32
20ad4     34 3C B0 FD | 	call	#__system___gc_alloc_managed
20ad8     FD 28 0A F6 | 	mov	local06, result1 wz
20adc     14 FB 01 A6 |  if_e	mov	result1, local06
20ae0     34 00 90 AD |  if_e	jmp	#LR__2823
20ae4     14 13 02 F6 | 	mov	arg01, local06
20ae8     13 15 02 F6 | 	mov	arg02, local05
20aec     11 17 02 F6 | 	mov	arg03, local03
20af0     5C FC BF FD | 	call	#__system____builtin_memmove
20af4     20 22 06 F1 | 	add	local03, #32
20af8     13 13 02 F6 | 	mov	arg01, local05
20afc     48 3D B0 FD | 	call	#__system___gc_free
20b00     14 27 02 F6 | 	mov	local05, local06
20b04     60 FF 9F FD | 	jmp	#LR__2820
20b08                 | LR__2822
20b08     13 29 02 F6 | 	mov	local06, local05
20b0c     10 29 02 F1 | 	add	local06, local02
20b10     14 01 48 FC | 	wrbyte	#0, local06
20b14     13 FB 01 F6 | 	mov	result1, local05
20b18                 | LR__2823
20b18     A7 F0 03 F6 | 	mov	ptra, fp
20b1c     B2 00 A0 FD | 	call	#popregs_
20b20                 | __system___basic_read_line_ret
20b20     2D 00 64 FD | 	ret
20b24                 | 
20b24                 | __system___waitms
20b24     09 01 02 F6 | 	mov	_var01, arg01
20b28     1A 02 62 FD | 	getct	_var02
20b2c     14 04 06 FB | 	rdlong	_var03, #20
20b30     97 14 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
20b34                 | LR__2830
20b34     01 00 00 FF 
20b38     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20b3c     1C 00 90 CD |  if_b	jmp	#LR__2832
20b40     02 03 02 F1 | 	add	_var02, _var03
20b44     01 13 02 F6 | 	mov	arg01, _var02
20b48     00 12 66 FA | 	addct1	arg01, #0
20b4c     24 22 60 FD | 	waitct1
20b50     01 00 00 FF 
20b54     E8 01 86 F1 | 	sub	_var01, ##1000
20b58     D8 FF 9F FD | 	jmp	#LR__2830
20b5c                 | LR__2831
20b5c                 | LR__2832
20b5c     01 00 56 F2 | 	cmps	_var01, #1 wc
20b60     28 00 90 CD |  if_b	jmp	#LR__2833
20b64     02 01 02 FD | 	qmul	_var01, _var03
20b68     01 00 00 FF 
20b6c     E8 17 06 F6 | 	mov	arg03, ##1000
20b70     19 FA 61 FD | 	getqy	result1
20b74     18 12 62 FD | 	getqx	arg01
20b78     28 FA 61 FD | 	setq	result1
20b7c     0B 13 12 FD | 	qdiv	arg01, arg03
20b80     18 12 62 FD | 	getqx	arg01
20b84     01 13 62 FA | 	addct1	arg01, _var02
20b88     24 22 60 FD | 	waitct1
20b8c                 | LR__2833
20b8c                 | __system___waitms_ret
20b8c     2D 00 64 FD | 	ret
20b90                 | 
20b90                 | __system___waitus
20b90     09 01 02 F6 | 	mov	_var01, arg01
20b94     1A 02 62 FD | 	getct	_var02
20b98     14 04 06 FB | 	rdlong	_var03, #20
20b9c     97 14 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
20ba0                 | LR__2840
20ba0     A1 07 00 FF 
20ba4     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20ba8     1C 00 90 CD |  if_b	jmp	#LR__2842
20bac     02 03 02 F1 | 	add	_var02, _var03
20bb0     01 13 02 F6 | 	mov	arg01, _var02
20bb4     00 12 66 FA | 	addct1	arg01, #0
20bb8     24 22 60 FD | 	waitct1
20bbc     A1 07 00 FF 
20bc0     40 00 86 F1 | 	sub	_var01, ##1000000
20bc4     D8 FF 9F FD | 	jmp	#LR__2840
20bc8                 | LR__2841
20bc8                 | LR__2842
20bc8     01 00 56 F2 | 	cmps	_var01, #1 wc
20bcc     28 00 90 CD |  if_b	jmp	#LR__2843
20bd0     02 01 02 FD | 	qmul	_var01, _var03
20bd4     A1 07 00 FF 
20bd8     40 16 06 F6 | 	mov	arg03, ##1000000
20bdc     19 FA 61 FD | 	getqy	result1
20be0     18 12 62 FD | 	getqx	arg01
20be4     28 FA 61 FD | 	setq	result1
20be8     0B 13 12 FD | 	qdiv	arg01, arg03
20bec     18 FA 61 FD | 	getqx	result1
20bf0     FD 02 62 FA | 	addct1	_var02, result1
20bf4     24 22 60 FD | 	waitct1
20bf8                 | LR__2843
20bf8                 | __system___waitus_ret
20bf8     2D 00 64 FD | 	ret
20bfc                 | 
20bfc                 | __system___mount
20bfc     0B 4A 05 F6 | 	mov	COUNT_, #11
20c00     A8 00 A0 FD | 	call	#pushregs_
20c04     09 1F 02 F6 | 	mov	local01, arg01
20c08     0A 21 0A F6 | 	mov	local02, arg02 wz
20c0c     01 22 66 F6 | 	neg	local03, #1
20c10     01 FA 65 A6 |  if_e	neg	result1, #1
20c14     98 02 90 AD |  if_e	jmp	#LR__2865
20c18     0F FB C1 FA | 	rdbyte	result1, local01
20c1c     2F FA 0D F2 | 	cmp	result1, #47 wz
20c20     28 00 90 5D |  if_ne	jmp	#LR__2852
20c24     0F 13 02 F6 | 	mov	arg01, local01
20c28     09 25 02 F6 | 	mov	local04, arg01
20c2c     97 06 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
20c30                 | LR__2850
20c30     12 FB C9 FA | 	rdbyte	result1, local04 wz
20c34     01 24 06 51 |  if_ne	add	local04, #1
20c38     F4 FF 9F 5D |  if_ne	jmp	#LR__2850
20c3c                 | LR__2851
20c3c     09 25 82 F1 | 	sub	local04, arg01
20c40     12 FB 01 F6 | 	mov	result1, local04
20c44     10 FA 55 F2 | 	cmps	result1, #16 wc
20c48     14 00 90 CD |  if_b	jmp	#LR__2853
20c4c                 | LR__2852
20c4c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20c50     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20c54     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20c58     01 FA 65 F6 | 	neg	result1, #1
20c5c     50 02 90 FD | 	jmp	#LR__2865
20c60                 | LR__2853
20c60     00 26 06 F6 | 	mov	local05, #0
20c64                 | LR__2854
20c64     04 26 56 F2 | 	cmps	local05, #4 wc
20c68     B0 00 90 3D |  if_ae	jmp	#LR__2859
20c6c     13 13 02 F6 | 	mov	arg01, local05
20c70     02 12 66 F0 | 	shl	arg01, #2
20c74     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20c78     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20c7c     09 FB 09 FB | 	rdlong	result1, arg01 wz
20c80     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20c84     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20c88     13 23 02 86 |  if_c_and_z	mov	local03, local05
20c8c     84 00 90 8D |  if_c_and_z	jmp	#LR__2858
20c90     13 13 02 F6 | 	mov	arg01, local05
20c94     02 12 66 F0 | 	shl	arg01, #2
20c98     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20c9c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20ca0     09 13 02 FB | 	rdlong	arg01, arg01
20ca4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ca8     09 25 02 F6 | 	mov	local04, arg01
20cac     97 06 48 FB | 	callpa	#(@LR__2856-@LR__2855)>>2,fcache_load_ptr_
20cb0                 | LR__2855
20cb0     12 FB C9 FA | 	rdbyte	result1, local04 wz
20cb4     01 24 06 51 |  if_ne	add	local04, #1
20cb8     F4 FF 9F 5D |  if_ne	jmp	#LR__2855
20cbc                 | LR__2856
20cbc     09 25 82 F1 | 	sub	local04, arg01
20cc0     12 29 02 F6 | 	mov	local06, local04
20cc4     14 13 02 F6 | 	mov	arg01, local06
20cc8     0F 13 02 F1 | 	add	arg01, local01
20ccc     09 FB C1 FA | 	rdbyte	result1, arg01
20cd0     2F FA 0D F2 | 	cmp	result1, #47 wz
20cd4     14 2B 02 56 |  if_ne	mov	local07, local06
20cd8     0F 2B 02 51 |  if_ne	add	local07, local01
20cdc     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20ce0     30 00 90 5D |  if_ne	jmp	#LR__2857
20ce4     13 17 02 F6 | 	mov	arg03, local05
20ce8     02 16 66 F0 | 	shl	arg03, #2
20cec     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20cf0     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20cf4     0B 15 02 FB | 	rdlong	arg02, arg03
20cf8     0F 13 02 F6 | 	mov	arg01, local01
20cfc     14 17 02 F6 | 	mov	arg03, local06
20d00     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20d04     84 4E B0 FD | 	call	#__system__strncmp
20d08     00 FA 0D F2 | 	cmp	result1, #0 wz
20d0c     13 23 02 A6 |  if_e	mov	local03, local05
20d10     08 00 90 AD |  if_e	jmp	#LR__2859
20d14                 | LR__2857
20d14                 | LR__2858
20d14     01 26 06 F1 | 	add	local05, #1
20d18     48 FF 9F FD | 	jmp	#LR__2854
20d1c                 | LR__2859
20d1c     FF FF 7F FF 
20d20     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20d24     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20d28     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
20d2c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20d30     01 FA 65 A6 |  if_e	neg	result1, #1
20d34     78 01 90 AD |  if_e	jmp	#LR__2865
20d38     11 27 02 F6 | 	mov	local05, local03
20d3c     13 2B 02 F6 | 	mov	local07, local05
20d40     02 2A 66 F0 | 	shl	local07, #2
20d44     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20d48     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
20d4c     15 29 0A FB | 	rdlong	local06, local07 wz
20d50     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20d54     58 00 90 AD |  if_e	jmp	#LR__2860
20d58     4C 28 06 F1 | 	add	local06, #76
20d5c     14 2B 0A FB | 	rdlong	local07, local06 wz
20d60     4C 28 86 F1 | 	sub	local06, #76
20d64     48 00 90 AD |  if_e	jmp	#LR__2860
20d68     4C 28 06 F1 | 	add	local06, #76
20d6c     14 2B 02 FB | 	rdlong	local07, local06
20d70     15 23 02 F6 | 	mov	local03, local07
20d74     13 2A 46 F7 | 	zerox	local07, #19
20d78     14 22 46 F0 | 	shr	local03, #20
20d7c     02 22 66 F0 | 	shl	local03, #2
20d80     ED 22 02 F1 | 	add	local03, __methods__
20d84     11 23 02 FB | 	rdlong	local03, local03
20d88     13 29 02 F6 | 	mov	local06, local05
20d8c     02 28 66 F0 | 	shl	local06, #2
20d90     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20d94     F3 28 02 F1 | 	add	local06, ptr___system__dat__
20d98     14 13 02 FB | 	rdlong	arg01, local06
20d9c     F2 28 02 F6 | 	mov	local06, objptr
20da0     15 E5 01 F6 | 	mov	objptr, local07
20da4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20da8     2D 22 62 FD | 	call	local03
20dac     14 E5 01 F6 | 	mov	objptr, local06
20db0                 | LR__2860
20db0     13 2D 02 F6 | 	mov	local08, local05
20db4     02 2C 66 F0 | 	shl	local08, #2
20db8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20dbc     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20dc0     16 21 62 FC | 	wrlong	local02, local08
20dc4     00 20 0E F2 | 	cmp	local02, #0 wz
20dc8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20dcc     18 00 90 5D |  if_ne	jmp	#LR__2861
20dd0     02 26 66 F0 | 	shl	local05, #2
20dd4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20dd8     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20ddc     13 01 68 FC | 	wrlong	#0, local05
20de0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20de4     C4 00 90 FD | 	jmp	#LR__2864
20de8                 | LR__2861
20de8     13 2F 02 F6 | 	mov	local09, local05
20dec     04 2E 66 F0 | 	shl	local09, #4
20df0     24 E6 05 F1 | 	add	ptr___system__dat__, #36
20df4     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
20df8     17 13 02 F6 | 	mov	arg01, local09
20dfc     0F 15 02 F6 | 	mov	arg02, local01
20e00     10 16 06 F6 | 	mov	arg03, #16
20e04     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
20e08     D4 4C B0 FD | 	call	#__system__strncpy
20e0c     48 20 06 F1 | 	add	local02, #72
20e10     10 2D 0A FB | 	rdlong	local08, local02 wz
20e14     48 20 86 F1 | 	sub	local02, #72
20e18     7C 00 90 AD |  if_e	jmp	#LR__2863
20e1c     48 20 06 F1 | 	add	local02, #72
20e20     10 2D 02 FB | 	rdlong	local08, local02
20e24     16 31 02 F6 | 	mov	local10, local08
20e28     13 2C 46 F7 | 	zerox	local08, #19
20e2c     14 30 46 F0 | 	shr	local10, #20
20e30     02 30 66 F0 | 	shl	local10, #2
20e34     ED 30 02 F1 | 	add	local10, __methods__
20e38     18 31 02 FB | 	rdlong	local10, local10
20e3c     17 13 02 F6 | 	mov	arg01, local09
20e40     F2 32 02 F6 | 	mov	local11, objptr
20e44     16 E5 01 F6 | 	mov	objptr, local08
20e48     2D 30 62 FD | 	call	local10
20e4c     19 E5 01 F6 | 	mov	objptr, local11
20e50     FD 12 0A F6 | 	mov	arg01, result1 wz
20e54     40 00 90 AD |  if_e	jmp	#LR__2862
20e58     13 2D 02 F6 | 	mov	local08, local05
20e5c     02 2C 66 F0 | 	shl	local08, #2
20e60     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20e64     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20e68     16 01 68 FC | 	wrlong	#0, local08
20e6c     02 26 66 F0 | 	shl	local05, #2
20e70     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20e74     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20e78     13 01 68 FC | 	wrlong	#0, local05
20e7c     09 13 6A F6 | 	neg	arg01, arg01 wz
20e80     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
20e84     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20e88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20e8c     01 FA 65 56 |  if_ne	neg	result1, #1
20e90     00 FA 05 A6 |  if_e	mov	result1, #0
20e94     18 00 90 FD | 	jmp	#LR__2865
20e98                 | LR__2862
20e98                 | LR__2863
20e98     02 26 66 F0 | 	shl	local05, #2
20e9c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20ea0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20ea4     13 2F 62 FC | 	wrlong	local09, local05
20ea8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20eac                 | LR__2864
20eac     00 FA 05 F6 | 	mov	result1, #0
20eb0                 | LR__2865
20eb0     A7 F0 03 F6 | 	mov	ptra, fp
20eb4     B2 00 A0 FD | 	call	#popregs_
20eb8                 | __system___mount_ret
20eb8     2D 00 64 FD | 	ret
20ebc                 | 
20ebc                 | __system___chdir
20ebc     00 4A 05 F6 | 	mov	COUNT_, #0
20ec0     A8 00 A0 FD | 	call	#pushregs_
20ec4     40 F0 07 F1 | 	add	ptra, #64
20ec8     04 4E 05 F1 | 	add	fp, #4
20ecc     A7 12 62 FC | 	wrlong	arg01, fp
20ed0     04 4E 05 F1 | 	add	fp, #4
20ed4     A7 14 02 F6 | 	mov	arg02, fp
20ed8     08 4E 85 F1 | 	sub	fp, #8
20edc     A4 48 B0 FD | 	call	#__system__stat
20ee0     3C 4E 05 F1 | 	add	fp, #60
20ee4     A7 FA 61 FC | 	wrlong	result1, fp
20ee8     3C 4E 85 F1 | 	sub	fp, #60
20eec     00 FA 0D F2 | 	cmp	result1, #0 wz
20ef0     3C 4E 05 51 |  if_ne	add	fp, #60
20ef4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
20ef8     3C 4E 85 51 |  if_ne	sub	fp, #60
20efc     BC 00 90 5D |  if_ne	jmp	#LR__2872
20f00     10 4E 05 F1 | 	add	fp, #16
20f04     A7 12 02 FB | 	rdlong	arg01, fp
20f08     10 4E 85 F1 | 	sub	fp, #16
20f0c     78 00 00 FF 
20f10     00 12 06 F5 | 	and	arg01, ##61440
20f14     08 00 00 FF 
20f18     00 12 0E F2 | 	cmp	arg01, ##4096 wz
20f1c     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
20f20     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
20f24     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
20f28     01 FA 65 56 |  if_ne	neg	result1, #1
20f2c     8C 00 90 5D |  if_ne	jmp	#LR__2872
20f30     04 4E 05 F1 | 	add	fp, #4
20f34     A7 16 02 FB | 	rdlong	arg03, fp
20f38     04 4E 85 F1 | 	sub	fp, #4
20f3c     0B 17 C2 FA | 	rdbyte	arg03, arg03
20f40     2F 16 0E F2 | 	cmp	arg03, #47 wz
20f44     24 00 90 5D |  if_ne	jmp	#LR__2870
20f48     84 E6 05 F1 | 	add	ptr___system__dat__, #132
20f4c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20f50     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20f54     04 4E 05 F1 | 	add	fp, #4
20f58     A7 14 02 FB | 	rdlong	arg02, fp
20f5c     04 4E 85 F1 | 	sub	fp, #4
20f60     00 17 06 F6 | 	mov	arg03, #256
20f64     78 4B B0 FD | 	call	#__system__strncpy
20f68     4C 00 90 FD | 	jmp	#LR__2871
20f6c                 | LR__2870
20f6c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20f70     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20f74     38 4E 05 F1 | 	add	fp, #56
20f78     A7 12 62 FC | 	wrlong	arg01, fp
20f7c     38 4E 85 F1 | 	sub	fp, #56
20f80     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
20f84     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
20f88     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20f8c     00 17 06 F6 | 	mov	arg03, #256
20f90     4C 4B B0 FD | 	call	#__system__strncpy
20f94     38 4E 05 F1 | 	add	fp, #56
20f98     A7 12 02 FB | 	rdlong	arg01, fp
20f9c     34 4E 85 F1 | 	sub	fp, #52
20fa0     A7 14 02 FB | 	rdlong	arg02, fp
20fa4     04 4E 85 F1 | 	sub	fp, #4
20fa8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
20fac     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
20fb0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20fb4     10 00 B0 FD | 	call	#__system____getvfsforfile
20fb8                 | LR__2871
20fb8     00 FA 05 F6 | 	mov	result1, #0
20fbc                 | LR__2872
20fbc     A7 F0 03 F6 | 	mov	ptra, fp
20fc0     B2 00 A0 FD | 	call	#popregs_
20fc4                 | __system___chdir_ret
20fc4     2D 00 64 FD | 	ret
20fc8                 | 
20fc8                 | __system____getvfsforfile
20fc8     0E 4A 05 F6 | 	mov	COUNT_, #14
20fcc     A8 00 A0 FD | 	call	#pushregs_
20fd0     09 1F 02 F6 | 	mov	local01, arg01
20fd4     0A 21 02 F6 | 	mov	local02, arg02
20fd8     0B 23 02 F6 | 	mov	local03, arg03
20fdc     97 10 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20fe0                 | LR__2880
20fe0     10 FB C1 FA | 	rdbyte	result1, local02
20fe4     2F FA 0D F2 | 	cmp	result1, #47 wz
20fe8     01 20 06 A1 |  if_e	add	local02, #1
20fec     10 25 C2 AA |  if_e	rdbyte	local04, local02
20ff0     01 20 86 A1 |  if_e	sub	local02, #1
20ff4     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
20ff8     01 20 06 A1 |  if_e	add	local02, #1
20ffc     E0 FF 9F AD |  if_e	jmp	#LR__2880
21000                 | LR__2881
21000     10 25 C2 FA | 	rdbyte	local04, local02
21004     2F 24 0E F2 | 	cmp	local04, #47 wz
21008     14 00 90 5D |  if_ne	jmp	#LR__2882
2100c     0F 13 02 F6 | 	mov	arg01, local01
21010     10 15 02 F6 | 	mov	arg02, local02
21014     00 17 06 F6 | 	mov	arg03, #256
21018     C4 4A B0 FD | 	call	#__system__strncpy
2101c     7C 00 90 FD | 	jmp	#LR__2884
21020                 | LR__2882
21020     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21024     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21028     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2102c     0F 13 02 F6 | 	mov	arg01, local01
21030     00 17 06 F6 | 	mov	arg03, #256
21034     A8 4A B0 FD | 	call	#__system__strncpy
21038     10 25 CA FA | 	rdbyte	local04, local02 wz
2103c     5C 00 90 AD |  if_e	jmp	#LR__2883
21040     10 25 C2 FA | 	rdbyte	local04, local02
21044     2E 24 0E F2 | 	cmp	local04, #46 wz
21048     01 20 06 A1 |  if_e	add	local02, #1
2104c     10 27 C2 AA |  if_e	rdbyte	local05, local02
21050     01 20 86 A1 |  if_e	sub	local02, #1
21054     13 29 02 A6 |  if_e	mov	local06, local05
21058     07 28 4E A7 |  if_e	zerox	local06, #7 wz
2105c     3C 00 90 AD |  if_e	jmp	#LR__2883
21060     0F 27 C2 FA | 	rdbyte	local05, local01
21064     2F 26 0E F2 | 	cmp	local05, #47 wz
21068     01 1E 06 A1 |  if_e	add	local01, #1
2106c     0F 25 C2 AA |  if_e	rdbyte	local04, local01
21070     01 1E 86 A1 |  if_e	sub	local01, #1
21074     00 24 4E A2 |  if_e	cmps	local04, #0 wz
21078     80 01 00 5F 
2107c     78 14 06 56 |  if_ne	mov	arg02, ##@LR__4980
21080     0F 13 02 56 |  if_ne	mov	arg01, local01
21084     00 17 06 56 |  if_ne	mov	arg03, #256
21088     A0 4A B0 5D |  if_ne	call	#__system__strncat
2108c     0F 13 02 F6 | 	mov	arg01, local01
21090     10 15 02 F6 | 	mov	arg02, local02
21094     00 17 06 F6 | 	mov	arg03, #256
21098     90 4A B0 FD | 	call	#__system__strncat
2109c                 | LR__2883
2109c                 | LR__2884
2109c     0F 13 02 F6 | 	mov	arg01, local01
210a0     48 4C B0 FD | 	call	#__system___normalizeName
210a4     0F 25 CA FA | 	rdbyte	local04, local01 wz
210a8     1C 00 90 AD |  if_e	jmp	#LR__2885
210ac     0F 25 C2 FA | 	rdbyte	local04, local01
210b0     2F 24 0E F2 | 	cmp	local04, #47 wz
210b4     01 1E 06 A1 |  if_e	add	local01, #1
210b8     0F 29 C2 AA |  if_e	rdbyte	local06, local01
210bc     01 1E 86 A1 |  if_e	sub	local01, #1
210c0     00 28 4E A2 |  if_e	cmps	local06, #0 wz
210c4     18 00 90 5D |  if_ne	jmp	#LR__2886
210c8                 | LR__2885
210c8     01 00 00 FF 
210cc     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
210d0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
210d4     01 00 00 FF 
210d8     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
210dc     EC 01 90 FD | 	jmp	#LR__2900
210e0                 | LR__2886
210e0     00 2A 06 F6 | 	mov	local07, #0
210e4                 | LR__2887
210e4     04 2A 56 F2 | 	cmps	local07, #4 wc
210e8     CC 01 90 3D |  if_ae	jmp	#LR__2899
210ec     15 29 02 F6 | 	mov	local06, local07
210f0     02 28 66 F0 | 	shl	local06, #2
210f4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
210f8     F3 28 02 F1 | 	add	local06, ptr___system__dat__
210fc     14 29 0A FB | 	rdlong	local06, local06 wz
21100     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21104     A8 01 90 AD |  if_e	jmp	#LR__2898
21108     15 25 02 F6 | 	mov	local04, local07
2110c     02 24 66 F0 | 	shl	local04, #2
21110     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21114     F3 24 02 F1 | 	add	local04, ptr___system__dat__
21118     12 13 02 FB | 	rdlong	arg01, local04
2111c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21120     09 2D 02 F6 | 	mov	local08, arg01
21124     97 06 48 FB | 	callpa	#(@LR__2889-@LR__2888)>>2,fcache_load_ptr_
21128                 | LR__2888
21128     16 FB C9 FA | 	rdbyte	result1, local08 wz
2112c     01 2C 06 51 |  if_ne	add	local08, #1
21130     F4 FF 9F 5D |  if_ne	jmp	#LR__2888
21134                 | LR__2889
21134     09 2D 82 F1 | 	sub	local08, arg01
21138     16 2F 02 F6 | 	mov	local09, local08
2113c     17 25 02 F6 | 	mov	local04, local09
21140     0F 25 02 F1 | 	add	local04, local01
21144     12 29 C2 FA | 	rdbyte	local06, local04
21148     2F 28 0E F2 | 	cmp	local06, #47 wz
2114c     17 31 02 56 |  if_ne	mov	local10, local09
21150     0F 31 02 51 |  if_ne	add	local10, local01
21154     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21158     54 01 90 5D |  if_ne	jmp	#LR__2897
2115c     15 17 02 F6 | 	mov	arg03, local07
21160     02 16 66 F0 | 	shl	arg03, #2
21164     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21168     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
2116c     0B 15 02 FB | 	rdlong	arg02, arg03
21170     17 17 02 F6 | 	mov	arg03, local09
21174     0F 13 02 F6 | 	mov	arg01, local01
21178     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2117c     0C 4A B0 FD | 	call	#__system__strncmp
21180     00 FA 4D F2 | 	cmps	result1, #0 wz
21184     28 01 90 5D |  if_ne	jmp	#LR__2897
21188     15 33 02 F6 | 	mov	local11, local07
2118c     02 32 66 F0 | 	shl	local11, #2
21190     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21194     F3 32 02 F1 | 	add	local11, ptr___system__dat__
21198     19 35 02 FB | 	rdlong	local12, local11
2119c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
211a0     97 22 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
211a4                 | LR__2890
211a4     17 29 02 F6 | 	mov	local06, local09
211a8     01 28 06 F1 | 	add	local06, #1
211ac     0F 29 02 F1 | 	add	local06, local01
211b0     14 33 C2 FA | 	rdbyte	local11, local06
211b4     2E 32 0E F2 | 	cmp	local11, #46 wz
211b8     2C 00 90 5D |  if_ne	jmp	#LR__2892
211bc     17 33 02 F6 | 	mov	local11, local09
211c0     02 32 06 F1 | 	add	local11, #2
211c4     0F 33 02 F1 | 	add	local11, local01
211c8     19 31 C2 FA | 	rdbyte	local10, local11
211cc     2F 30 0E F2 | 	cmp	local10, #47 wz
211d0     17 37 02 56 |  if_ne	mov	local13, local09
211d4     02 36 06 51 |  if_ne	add	local13, #2
211d8     0F 37 02 51 |  if_ne	add	local13, local01
211dc     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
211e0     01 2E 06 A1 |  if_e	add	local09, #1
211e4     BC FF 9F AD |  if_e	jmp	#LR__2890
211e8                 | LR__2891
211e8                 | LR__2892
211e8     00 22 0E F2 | 	cmp	local03, #0 wz
211ec     11 13 02 56 |  if_ne	mov	arg01, local03
211f0     0F 15 02 56 |  if_ne	mov	arg02, local01
211f4     00 17 06 56 |  if_ne	mov	arg03, #256
211f8     E4 48 B0 5D |  if_ne	call	#__system__strncpy
211fc     0F 15 02 F6 | 	mov	arg02, local01
21200     17 15 02 F1 | 	add	arg02, local09
21204     01 14 06 F1 | 	add	arg02, #1
21208     0F 13 02 F6 | 	mov	arg01, local01
2120c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
21210     0F 13 02 F6 | 	mov	arg01, local01
21214     09 2D 02 F6 | 	mov	local08, arg01
21218     97 06 48 FB | 	callpa	#(@LR__2894-@LR__2893)>>2,fcache_load_ptr_
2121c                 | LR__2893
2121c     16 FB C9 FA | 	rdbyte	result1, local08 wz
21220     01 2C 06 51 |  if_ne	add	local08, #1
21224     F4 FF 9F 5D |  if_ne	jmp	#LR__2893
21228                 | LR__2894
21228     09 2D 82 F1 | 	sub	local08, arg01
2122c     16 2F 02 F6 | 	mov	local09, local08
21230                 | LR__2895
21230     01 2E 56 F2 | 	cmps	local09, #1 wc
21234     70 00 90 CD |  if_b	jmp	#LR__2896
21238     17 25 02 F6 | 	mov	local04, local09
2123c     0F 25 02 F1 | 	add	local04, local01
21240     12 33 C2 FA | 	rdbyte	local11, local04
21244     2F 32 0E F2 | 	cmp	local11, #47 wz
21248     17 33 02 A6 |  if_e	mov	local11, local09
2124c     0F 33 02 A1 |  if_e	add	local11, local01
21250     19 01 48 AC |  if_e	wrbyte	#0, local11
21254     01 2E 86 A1 |  if_e	sub	local09, #1
21258     D4 FF 9F AD |  if_e	jmp	#LR__2895
2125c     17 25 02 F6 | 	mov	local04, local09
21260     0F 25 02 F1 | 	add	local04, local01
21264     12 33 C2 FA | 	rdbyte	local11, local04
21268     2E 32 0E F2 | 	cmp	local11, #46 wz
2126c     38 00 90 5D |  if_ne	jmp	#LR__2896
21270     02 2E 56 F2 | 	cmps	local09, #2 wc
21274     30 00 90 CD |  if_b	jmp	#LR__2896
21278     17 39 02 F6 | 	mov	local14, local09
2127c     01 38 86 F1 | 	sub	local14, #1
21280     0F 39 02 F1 | 	add	local14, local01
21284     1C 27 C2 FA | 	rdbyte	local05, local14
21288     2F 26 0E F2 | 	cmp	local05, #47 wz
2128c     18 00 90 5D |  if_ne	jmp	#LR__2896
21290     17 25 02 F6 | 	mov	local04, local09
21294     01 24 86 F1 | 	sub	local04, #1
21298     0F 25 02 F1 | 	add	local04, local01
2129c     12 01 48 FC | 	wrbyte	#0, local04
212a0     02 2E 86 F1 | 	sub	local09, #2
212a4     88 FF 9F FD | 	jmp	#LR__2895
212a8                 | LR__2896
212a8     1A FB 01 F6 | 	mov	result1, local12
212ac     1C 00 90 FD | 	jmp	#LR__2900
212b0                 | LR__2897
212b0                 | LR__2898
212b0     01 2A 06 F1 | 	add	local07, #1
212b4     2C FE 9F FD | 	jmp	#LR__2887
212b8                 | LR__2899
212b8     03 00 00 FF 
212bc     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
212c0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
212c4     03 00 00 FF 
212c8     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
212cc                 | LR__2900
212cc     A7 F0 03 F6 | 	mov	ptra, fp
212d0     B2 00 A0 FD | 	call	#popregs_
212d4                 | __system____getvfsforfile_ret
212d4     2D 00 64 FD | 	ret
212d8                 | 
212d8                 | __system___basic_open
212d8     05 4A 05 F6 | 	mov	COUNT_, #5
212dc     A8 00 A0 FD | 	call	#pushregs_
212e0     0A 1F 02 F6 | 	mov	local01, arg02
212e4     0B 21 02 F6 | 	mov	local02, arg03
212e8     0C 23 02 F6 | 	mov	local03, arg04
212ec     00 24 06 F6 | 	mov	local04, #0
212f0     C4 47 B0 FD | 	call	#__system____getftab
212f4     FD 26 0A F6 | 	mov	local05, result1 wz
212f8     18 00 90 5D |  if_ne	jmp	#LR__2910
212fc     EE 12 02 F6 | 	mov	arg01, abortchain
21300     0C 14 06 F6 | 	mov	arg02, #12
21304     01 16 06 F6 | 	mov	arg03, #1
21308     DA 00 A0 FD | 	call	#__longjmp
2130c     01 FA 65 F6 | 	neg	result1, #1
21310     14 01 90 FD | 	jmp	#LR__2919
21314                 | LR__2910
21314     08 26 06 F1 | 	add	local05, #8
21318     13 FB 09 FB | 	rdlong	result1, local05 wz
2131c     08 26 86 F1 | 	sub	local05, #8
21320     13 13 02 56 |  if_ne	mov	arg01, local05
21324     E4 3E B0 5D |  if_ne	call	#__system___closeraw
21328     00 1E 0E F2 | 	cmp	local01, #0 wz
2132c     00 20 0E A2 |  if_e	cmp	local02, #0 wz
21330     00 22 0E A2 |  if_e	cmp	local03, #0 wz
21334     3C 00 90 AD |  if_e	jmp	#LR__2912
21338     0C 12 06 F6 | 	mov	arg01, #12
2133c     CC 33 B0 FD | 	call	#__system___gc_alloc_managed
21340     FD 24 0A F6 | 	mov	local04, result1 wz
21344     18 00 90 5D |  if_ne	jmp	#LR__2911
21348     EE 12 02 F6 | 	mov	arg01, abortchain
2134c     07 14 06 F6 | 	mov	arg02, #7
21350     01 16 06 F6 | 	mov	arg03, #1
21354     DA 00 A0 FD | 	call	#__longjmp
21358     01 FA 65 F6 | 	neg	result1, #1
2135c     C8 00 90 FD | 	jmp	#LR__2919
21360                 | LR__2911
21360     12 01 68 FC | 	wrlong	#0, local04
21364     04 24 06 F1 | 	add	local04, #4
21368     12 01 68 FC | 	wrlong	#0, local04
2136c     04 24 86 F1 | 	sub	local04, #4
21370     13 25 62 FC | 	wrlong	local04, local05
21374                 | LR__2912
21374     00 1E 0E F2 | 	cmp	local01, #0 wz
21378     20 00 90 AD |  if_e	jmp	#LR__2913
2137c     12 1F 62 FC | 	wrlong	local01, local04
21380     12 FB 01 F6 | 	mov	result1, local04
21384     00 78 04 FF 
21388     00 FA 45 F5 | 	or	result1, ##149946368
2138c     1C 26 06 F1 | 	add	local05, #28
21390     13 FB 61 FC | 	wrlong	result1, local05
21394     1C 26 86 F1 | 	sub	local05, #28
21398     0C 00 90 FD | 	jmp	#LR__2914
2139c                 | LR__2913
2139c     1C 26 06 F1 | 	add	local05, #28
213a0     13 01 68 FC | 	wrlong	#0, local05
213a4     1C 26 86 F1 | 	sub	local05, #28
213a8                 | LR__2914
213a8     00 20 0E F2 | 	cmp	local02, #0 wz
213ac     28 00 90 AD |  if_e	jmp	#LR__2915
213b0     04 24 06 F1 | 	add	local04, #4
213b4     12 21 62 FC | 	wrlong	local02, local04
213b8     04 24 86 F1 | 	sub	local04, #4
213bc     12 FB 01 F6 | 	mov	result1, local04
213c0     00 80 04 FF 
213c4     00 FA 45 F5 | 	or	result1, ##150994944
213c8     20 26 06 F1 | 	add	local05, #32
213cc     13 FB 61 FC | 	wrlong	result1, local05
213d0     20 26 86 F1 | 	sub	local05, #32
213d4     0C 00 90 FD | 	jmp	#LR__2916
213d8                 | LR__2915
213d8     20 26 06 F1 | 	add	local05, #32
213dc     13 01 68 FC | 	wrlong	#0, local05
213e0     20 26 86 F1 | 	sub	local05, #32
213e4                 | LR__2916
213e4     00 22 0E F2 | 	cmp	local03, #0 wz
213e8     24 00 90 AD |  if_e	jmp	#LR__2917
213ec     08 24 06 F1 | 	add	local04, #8
213f0     12 23 62 FC | 	wrlong	local03, local04
213f4     08 24 86 F1 | 	sub	local04, #8
213f8     00 88 04 FF 
213fc     00 24 46 F5 | 	or	local04, ##152043520
21400     24 26 06 F1 | 	add	local05, #36
21404     13 25 62 FC | 	wrlong	local04, local05
21408     24 26 86 F1 | 	sub	local05, #36
2140c     0C 00 90 FD | 	jmp	#LR__2918
21410                 | LR__2917
21410     24 26 06 F1 | 	add	local05, #36
21414     13 01 68 FC | 	wrlong	#0, local05
21418     24 26 86 F1 | 	sub	local05, #36
2141c                 | LR__2918
2141c     08 26 06 F1 | 	add	local05, #8
21420     13 0F 68 FC | 	wrlong	#7, local05
21424     00 FA 05 F6 | 	mov	result1, #0
21428                 | LR__2919
21428     A7 F0 03 F6 | 	mov	ptra, fp
2142c     B2 00 A0 FD | 	call	#popregs_
21430                 | __system___basic_open_ret
21430     2D 00 64 FD | 	ret
21434                 | 
21434                 | __system___basic_open_string
21434     04 4A 05 F6 | 	mov	COUNT_, #4
21438     A8 00 A0 FD | 	call	#pushregs_
2143c     0A 1F 02 F6 | 	mov	local01, arg02
21440     0B 21 02 F6 | 	mov	local02, arg03
21444     70 46 B0 FD | 	call	#__system____getftab
21448     FD 22 0A F6 | 	mov	local03, result1 wz
2144c     18 00 90 5D |  if_ne	jmp	#LR__2920
21450     EE 12 02 F6 | 	mov	arg01, abortchain
21454     0C 14 06 F6 | 	mov	arg02, #12
21458     01 16 06 F6 | 	mov	arg03, #1
2145c     DA 00 A0 FD | 	call	#__longjmp
21460     01 FA 65 F6 | 	neg	result1, #1
21464     58 00 90 FD | 	jmp	#LR__2922
21468                 | LR__2920
21468     08 22 06 F1 | 	add	local03, #8
2146c     11 19 0A FB | 	rdlong	arg04, local03 wz
21470     08 22 86 F1 | 	sub	local03, #8
21474     11 13 02 56 |  if_ne	mov	arg01, local03
21478     90 3D B0 5D |  if_ne	call	#__system___closeraw
2147c     0F 15 02 F6 | 	mov	arg02, local01
21480     10 17 02 F6 | 	mov	arg03, local02
21484     11 13 02 F6 | 	mov	arg01, local03
21488     B6 19 06 F6 | 	mov	arg04, #438
2148c     78 3A B0 FD | 	call	#__system___openraw
21490     FD 24 02 F6 | 	mov	local04, result1
21494     00 24 56 F2 | 	cmps	local04, #0 wc
21498     20 00 90 3D |  if_ae	jmp	#LR__2921
2149c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
214a0     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
214a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
214a8     EE 12 02 F6 | 	mov	arg01, abortchain
214ac     01 16 06 F6 | 	mov	arg03, #1
214b0     DA 00 A0 FD | 	call	#__longjmp
214b4     01 FA 65 F6 | 	neg	result1, #1
214b8     04 00 90 FD | 	jmp	#LR__2922
214bc                 | LR__2921
214bc     12 FB 01 F6 | 	mov	result1, local04
214c0                 | LR__2922
214c0     A7 F0 03 F6 | 	mov	ptra, fp
214c4     B2 00 A0 FD | 	call	#popregs_
214c8                 | __system___basic_open_string_ret
214c8     2D 00 64 FD | 	ret
214cc                 | 
214cc                 | __system___basic_print_char
214cc     03 4A 05 F6 | 	mov	COUNT_, #3
214d0     A8 00 A0 FD | 	call	#pushregs_
214d4     0A 1F 02 F6 | 	mov	local01, arg02
214d8     30 4D B0 FD | 	call	#__system___gettxfunc
214dc     FD 20 0A F6 | 	mov	local02, result1 wz
214e0     00 FA 05 A6 |  if_e	mov	result1, #0
214e4     30 00 90 AD |  if_e	jmp	#LR__2930
214e8     10 23 02 F6 | 	mov	local03, local02
214ec     13 20 46 F7 | 	zerox	local02, #19
214f0     14 22 46 F0 | 	shr	local03, #20
214f4     02 22 66 F0 | 	shl	local03, #2
214f8     ED 22 02 F1 | 	add	local03, __methods__
214fc     11 23 02 FB | 	rdlong	local03, local03
21500     0F 13 02 F6 | 	mov	arg01, local01
21504     F2 1E 02 F6 | 	mov	local01, objptr
21508     10 E5 01 F6 | 	mov	objptr, local02
2150c     2D 22 62 FD | 	call	local03
21510     0F E5 01 F6 | 	mov	objptr, local01
21514     01 FA 05 F6 | 	mov	result1, #1
21518                 | LR__2930
21518     A7 F0 03 F6 | 	mov	ptra, fp
2151c     B2 00 A0 FD | 	call	#popregs_
21520                 | __system___basic_print_char_ret
21520     2D 00 64 FD | 	ret
21524                 | 
21524                 | __system___basic_print_string
21524     03 4A 05 F6 | 	mov	COUNT_, #3
21528     A8 00 A0 FD | 	call	#pushregs_
2152c     0A 1F 02 F6 | 	mov	local01, arg02
21530     0B 21 02 F6 | 	mov	local02, arg03
21534     D4 4C B0 FD | 	call	#__system___gettxfunc
21538     FD 22 0A F6 | 	mov	local03, result1 wz
2153c     00 FA 05 A6 |  if_e	mov	result1, #0
21540     18 00 90 AD |  if_e	jmp	#LR__2940
21544     00 1E 0E F2 | 	cmp	local01, #0 wz
21548     00 FA 05 A6 |  if_e	mov	result1, #0
2154c     11 13 02 56 |  if_ne	mov	arg01, local03
21550     10 15 02 56 |  if_ne	mov	arg02, local02
21554     0F 17 02 56 |  if_ne	mov	arg03, local01
21558     08 02 B0 5D |  if_ne	call	#__system___fmtstr
2155c                 | LR__2940
2155c     A7 F0 03 F6 | 	mov	ptra, fp
21560     B2 00 A0 FD | 	call	#popregs_
21564                 | __system___basic_print_string_ret
21564     2D 00 64 FD | 	ret
21568                 | 
21568                 | __system___basic_print_integer
21568     04 4A 05 F6 | 	mov	COUNT_, #4
2156c     A8 00 A0 FD | 	call	#pushregs_
21570     0A 1F 02 F6 | 	mov	local01, arg02
21574     0B 21 02 F6 | 	mov	local02, arg03
21578     0C 23 02 F6 | 	mov	local03, arg04
2157c     8C 4C B0 FD | 	call	#__system___gettxfunc
21580     FD 24 0A F6 | 	mov	local04, result1 wz
21584     00 FA 05 A6 |  if_e	mov	result1, #0
21588     12 13 02 56 |  if_ne	mov	arg01, local04
2158c     10 15 02 56 |  if_ne	mov	arg02, local02
21590     0F 17 02 56 |  if_ne	mov	arg03, local01
21594     11 19 02 56 |  if_ne	mov	arg04, local03
21598     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
2159c     A7 F0 03 F6 | 	mov	ptra, fp
215a0     B2 00 A0 FD | 	call	#popregs_
215a4                 | __system___basic_print_integer_ret
215a4     2D 00 64 FD | 	ret
215a8                 | 
215a8                 | __system___basic_print_unsigned
215a8     03 4A 05 F6 | 	mov	COUNT_, #3
215ac     A8 00 A0 FD | 	call	#pushregs_
215b0     0A 1F 02 F6 | 	mov	local01, arg02
215b4     0B 21 02 F6 | 	mov	local02, arg03
215b8     0C 23 02 F6 | 	mov	local03, arg04
215bc     4C 4C B0 FD | 	call	#__system___gettxfunc
215c0     FD 12 0A F6 | 	mov	arg01, result1 wz
215c4     00 FA 05 A6 |  if_e	mov	result1, #0
215c8     3A 20 26 54 |  if_ne	bith	local02, #58
215cc     10 15 02 56 |  if_ne	mov	arg02, local02
215d0     0F 17 02 56 |  if_ne	mov	arg03, local01
215d4     11 19 02 56 |  if_ne	mov	arg04, local03
215d8     74 02 B0 5D |  if_ne	call	#__system___fmtnum
215dc     A7 F0 03 F6 | 	mov	ptra, fp
215e0     B2 00 A0 FD | 	call	#popregs_
215e4                 | __system___basic_print_unsigned_ret
215e4     2D 00 64 FD | 	ret
215e8                 | 
215e8                 | __system___basic_get_char
215e8     03 4A 05 F6 | 	mov	COUNT_, #3
215ec     A8 00 A0 FD | 	call	#pushregs_
215f0     5C 4C B0 FD | 	call	#__system___getrxfunc
215f4     FD 1E 0A F6 | 	mov	local01, result1 wz
215f8     01 FA 65 A6 |  if_e	neg	result1, #1
215fc     28 00 90 AD |  if_e	jmp	#LR__2950
21600     0F 21 02 F6 | 	mov	local02, local01
21604     13 1E 46 F7 | 	zerox	local01, #19
21608     14 20 46 F0 | 	shr	local02, #20
2160c     02 20 66 F0 | 	shl	local02, #2
21610     ED 20 02 F1 | 	add	local02, __methods__
21614     10 21 02 FB | 	rdlong	local02, local02
21618     F2 22 02 F6 | 	mov	local03, objptr
2161c     0F E5 01 F6 | 	mov	objptr, local01
21620     2D 20 62 FD | 	call	local02
21624     11 E5 01 F6 | 	mov	objptr, local03
21628                 | LR__2950
21628     A7 F0 03 F6 | 	mov	ptra, fp
2162c     B2 00 A0 FD | 	call	#popregs_
21630                 | __system___basic_get_char_ret
21630     2D 00 64 FD | 	ret
21634                 | 
21634                 | __system___basic_put
21634     04 4A 05 F6 | 	mov	COUNT_, #4
21638     A8 00 A0 FD | 	call	#pushregs_
2163c     0D 1F 02 F6 | 	mov	local01, arg05
21640     0F 19 02 FD | 	qmul	arg04, local01
21644     09 21 02 F6 | 	mov	local02, arg01
21648     0B 23 02 F6 | 	mov	local03, arg03
2164c     00 14 0E F2 | 	cmp	arg02, #0 wz
21650     01 14 86 51 |  if_ne	sub	arg02, #1
21654     10 13 02 56 |  if_ne	mov	arg01, local02
21658     00 16 06 56 |  if_ne	mov	arg03, #0
2165c     18 24 62 FD | 	getqx	local04
21660     9C 42 B0 5D |  if_ne	call	#__system__lseek
21664     11 15 02 F6 | 	mov	arg02, local03
21668     12 17 02 F6 | 	mov	arg03, local04
2166c     10 13 02 F6 | 	mov	arg01, local02
21670     D8 41 B0 FD | 	call	#__system__write
21674     FD 24 02 F6 | 	mov	local04, result1
21678     01 24 56 F2 | 	cmps	local04, #1 wc
2167c     10 00 90 CD |  if_b	jmp	#LR__2960
21680     12 7D 02 F6 | 	mov	muldiva_, local04
21684     0F 7F 02 F6 | 	mov	muldivb_, local01
21688     BA 00 A0 FD | 	call	#divide_
2168c     3F 25 02 F6 | 	mov	local04, muldivb_
21690                 | LR__2960
21690     12 FB 01 F6 | 	mov	result1, local04
21694     A7 F0 03 F6 | 	mov	ptra, fp
21698     B2 00 A0 FD | 	call	#popregs_
2169c                 | __system___basic_put_ret
2169c     2D 00 64 FD | 	ret
216a0                 | 
216a0                 | __system___basic_get
216a0     04 4A 05 F6 | 	mov	COUNT_, #4
216a4     A8 00 A0 FD | 	call	#pushregs_
216a8     0D 1F 02 F6 | 	mov	local01, arg05
216ac     0F 19 02 FD | 	qmul	arg04, local01
216b0     09 21 02 F6 | 	mov	local02, arg01
216b4     0B 23 02 F6 | 	mov	local03, arg03
216b8     00 14 0E F2 | 	cmp	arg02, #0 wz
216bc     01 14 86 51 |  if_ne	sub	arg02, #1
216c0     10 13 02 56 |  if_ne	mov	arg01, local02
216c4     00 16 06 56 |  if_ne	mov	arg03, #0
216c8     18 24 62 FD | 	getqx	local04
216cc     30 42 B0 5D |  if_ne	call	#__system__lseek
216d0     11 15 02 F6 | 	mov	arg02, local03
216d4     12 17 02 F6 | 	mov	arg03, local04
216d8     10 13 02 F6 | 	mov	arg01, local02
216dc     A8 41 B0 FD | 	call	#__system__read
216e0     FD 24 02 F6 | 	mov	local04, result1
216e4     01 24 56 F2 | 	cmps	local04, #1 wc
216e8     10 00 90 CD |  if_b	jmp	#LR__2970
216ec     12 7D 02 F6 | 	mov	muldiva_, local04
216f0     0F 7F 02 F6 | 	mov	muldivb_, local01
216f4     BA 00 A0 FD | 	call	#divide_
216f8     3F 25 02 F6 | 	mov	local04, muldivb_
216fc                 | LR__2970
216fc     12 FB 01 F6 | 	mov	result1, local04
21700     A7 F0 03 F6 | 	mov	ptra, fp
21704     B2 00 A0 FD | 	call	#popregs_
21708                 | __system___basic_get_ret
21708     2D 00 64 FD | 	ret
2170c                 | 
2170c                 | __system___fmtchar
2170c     00 4A 05 F6 | 	mov	COUNT_, #0
21710     A8 00 A0 FD | 	call	#pushregs_
21714     10 F0 07 F1 | 	add	ptra, #16
21718     04 4E 05 F1 | 	add	fp, #4
2171c     A7 12 62 FC | 	wrlong	arg01, fp
21720     04 4E 05 F1 | 	add	fp, #4
21724     A7 14 62 FC | 	wrlong	arg02, fp
21728     04 4E 05 F1 | 	add	fp, #4
2172c     A7 16 62 FC | 	wrlong	arg03, fp
21730     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21734     A7 16 62 FC | 	wrlong	arg03, fp
21738     08 4E 85 F1 | 	sub	fp, #8
2173c     A7 12 02 FB | 	rdlong	arg01, fp
21740     04 4E 05 F1 | 	add	fp, #4
21744     A7 14 02 FB | 	rdlong	arg02, fp
21748     04 4E 05 F1 | 	add	fp, #4
2174c     A7 16 02 F6 | 	mov	arg03, fp
21750     0C 4E 85 F1 | 	sub	fp, #12
21754     0C 00 B0 FD | 	call	#__system___fmtstr
21758     A7 F0 03 F6 | 	mov	ptra, fp
2175c     B2 00 A0 FD | 	call	#popregs_
21760                 | __system___fmtchar_ret
21760     2D 00 64 FD | 	ret
21764                 | 
21764                 | __system___fmtstr
21764     09 4A 05 F6 | 	mov	COUNT_, #9
21768     A8 00 A0 FD | 	call	#pushregs_
2176c     09 1F 02 F6 | 	mov	local01, arg01
21770     0A 21 02 F6 | 	mov	local02, arg02
21774     0B 23 02 F6 | 	mov	local03, arg03
21778     10 19 E2 F8 | 	getbyte	arg04, local02, #0
2177c     11 13 02 F6 | 	mov	arg01, local03
21780     09 25 02 F6 | 	mov	local04, arg01
21784     97 06 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
21788                 | LR__2980
21788     12 FB C9 FA | 	rdbyte	result1, local04 wz
2178c     01 24 06 51 |  if_ne	add	local04, #1
21790     F4 FF 9F 5D |  if_ne	jmp	#LR__2980
21794                 | LR__2981
21794     09 25 82 F1 | 	sub	local04, arg01
21798     00 18 0E F2 | 	cmp	arg04, #0 wz
2179c     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
217a0     10 15 02 F6 | 	mov	arg02, local02
217a4     12 17 02 F6 | 	mov	arg03, local04
217a8     0F 13 02 F6 | 	mov	arg01, local01
217ac     02 18 06 F6 | 	mov	arg04, #2
217b0     F8 46 B0 FD | 	call	#__system___fmtpad
217b4     FD 26 02 F6 | 	mov	local05, result1
217b8     00 26 56 F2 | 	cmps	local05, #0 wc
217bc     13 FB 01 C6 |  if_b	mov	result1, local05
217c0     80 00 90 CD |  if_b	jmp	#LR__2984
217c4     01 24 56 F2 | 	cmps	local04, #1 wc
217c8     50 00 90 CD |  if_b	jmp	#LR__2983
217cc     12 29 02 F6 | 	mov	local06, local04
217d0                 | LR__2982
217d0     0F 2B 02 F6 | 	mov	local07, local01
217d4     0F 2D 02 F6 | 	mov	local08, local01
217d8     13 2A 46 F7 | 	zerox	local07, #19
217dc     14 2C 46 F0 | 	shr	local08, #20
217e0     02 2C 66 F0 | 	shl	local08, #2
217e4     ED 2C 02 F1 | 	add	local08, __methods__
217e8     16 2D 02 FB | 	rdlong	local08, local08
217ec     11 13 C2 FA | 	rdbyte	arg01, local03
217f0     F2 2E 02 F6 | 	mov	local09, objptr
217f4     15 E5 01 F6 | 	mov	objptr, local07
217f8     01 22 06 F1 | 	add	local03, #1
217fc     2D 2C 62 FD | 	call	local08
21800     17 E5 01 F6 | 	mov	objptr, local09
21804     FD 2E 02 F6 | 	mov	local09, result1
21808     00 2E 56 F2 | 	cmps	local09, #0 wc
2180c     17 FB 01 C6 |  if_b	mov	result1, local09
21810     30 00 90 CD |  if_b	jmp	#LR__2984
21814     17 27 02 F1 | 	add	local05, local09
21818     ED 29 6E FB | 	djnz	local06, #LR__2982
2181c                 | LR__2983
2181c     10 15 02 F6 | 	mov	arg02, local02
21820     12 17 02 F6 | 	mov	arg03, local04
21824     0F 13 02 F6 | 	mov	arg01, local01
21828     01 18 06 F6 | 	mov	arg04, #1
2182c     7C 46 B0 FD | 	call	#__system___fmtpad
21830     FD 2E 02 F6 | 	mov	local09, result1
21834     00 2E 56 F2 | 	cmps	local09, #0 wc
21838     17 FB 01 C6 |  if_b	mov	result1, local09
2183c     17 27 02 31 |  if_ae	add	local05, local09
21840     13 FB 01 36 |  if_ae	mov	result1, local05
21844                 | LR__2984
21844     A7 F0 03 F6 | 	mov	ptra, fp
21848     B2 00 A0 FD | 	call	#popregs_
2184c                 | __system___fmtstr_ret
2184c     2D 00 64 FD | 	ret
21850                 | 
21850                 | __system___fmtnum
21850     0B 4A 05 F6 | 	mov	COUNT_, #11
21854     A8 00 A0 FD | 	call	#pushregs_
21858     09 1F 02 F6 | 	mov	local01, arg01
2185c     0A 21 02 F6 | 	mov	local02, arg02
21860     0B 23 02 F6 | 	mov	local03, arg03
21864     0C 25 02 F6 | 	mov	local04, arg04
21868     F8 27 02 F6 | 	mov	local05, ptra
2186c     13 29 02 F6 | 	mov	local06, local05
21870     00 2A 06 F6 | 	mov	local07, #0
21874     10 2D 02 F6 | 	mov	local08, local02
21878     10 2C 46 F0 | 	shr	local08, #16
2187c     3F 2C 06 F5 | 	and	local08, #63
21880     10 2F E2 F8 | 	getbyte	local09, local02, #0
21884     10 31 02 F6 | 	mov	local10, local02
21888     1A 30 46 F0 | 	shr	local10, #26
2188c     03 30 06 F5 | 	and	local10, #3
21890     18 33 02 F6 | 	mov	local11, local10
21894     01 2C 56 F2 | 	cmps	local08, #1 wc
21898     44 F0 07 F1 | 	add	ptra, #68
2189c     01 2C 86 31 |  if_ae	sub	local08, #1
218a0     41 2E 56 F2 | 	cmps	local09, #65 wc
218a4     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
218a8     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
218ac     03 32 0E F2 | 	cmp	local11, #3 wz
218b0     00 32 06 A6 |  if_e	mov	local11, #0
218b4     00 22 56 52 |  if_ne	cmps	local03, #0 wc
218b8     04 32 06 46 |  if_c_and_nz	mov	local11, #4
218bc     11 23 62 46 |  if_c_and_nz	neg	local03, local03
218c0     00 32 0E F2 | 	cmp	local11, #0 wz
218c4     4C 00 90 AD |  if_e	jmp	#LR__2993
218c8     01 2A 06 F6 | 	mov	local07, #1
218cc     17 2D 0A F2 | 	cmp	local08, local09 wz
218d0     18 00 90 5D |  if_ne	jmp	#LR__2991
218d4     05 2C 6E FB | 	djnz	local08, #LR__2990
218d8     0F 13 02 F6 | 	mov	arg01, local01
218dc     10 15 02 F6 | 	mov	arg02, local02
218e0     23 16 06 F6 | 	mov	arg03, #35
218e4     24 FE BF FD | 	call	#__system___fmtchar
218e8     88 00 90 FD | 	jmp	#LR__2997
218ec                 | LR__2990
218ec                 | LR__2991
218ec     02 32 0E F2 | 	cmp	local11, #2 wz
218f0     14 31 02 A6 |  if_e	mov	local10, local06
218f4     01 28 06 A1 |  if_e	add	local06, #1
218f8     18 41 48 AC |  if_e	wrbyte	#32, local10
218fc     14 00 90 AD |  if_e	jmp	#LR__2992
21900     04 32 0E F2 | 	cmp	local11, #4 wz
21904     14 5B 48 AC |  if_e	wrbyte	#45, local06
21908     01 28 06 A1 |  if_e	add	local06, #1
2190c     14 57 48 5C |  if_ne	wrbyte	#43, local06
21910     01 28 06 51 |  if_ne	add	local06, #1
21914                 | LR__2992
21914                 | LR__2993
21914     14 13 02 F6 | 	mov	arg01, local06
21918     11 15 02 F6 | 	mov	arg02, local03
2191c     12 17 02 F6 | 	mov	arg03, local04
21920     16 19 02 F6 | 	mov	arg04, local08
21924     00 1A 06 F6 | 	mov	arg05, #0
21928     1D 20 2E F4 | 	testbn	local02, #29 wz
2192c     01 1A 06 56 |  if_ne	mov	arg05, #1
21930     40 46 B0 FD | 	call	#__system___uitoa
21934     FD 2A 02 F1 | 	add	local07, result1
21938     17 2B 5A F2 | 	cmps	local07, local09 wcz
2193c     24 00 90 ED |  if_be	jmp	#LR__2996
21940     97 0E 48 FB | 	callpa	#(@LR__2995-@LR__2994)>>2,fcache_load_ptr_
21944                 | LR__2994
21944     17 31 02 F6 | 	mov	local10, local09
21948     01 30 56 F2 | 	cmps	local10, #1 wc
2194c     01 2E 86 F1 | 	sub	local09, #1
21950     14 31 02 36 |  if_ae	mov	local10, local06
21954     01 28 06 31 |  if_ae	add	local06, #1
21958     18 47 48 3C |  if_ae	wrbyte	#35, local10
2195c     E4 FF 9F 3D |  if_ae	jmp	#LR__2994
21960                 | LR__2995
21960     14 01 48 FC | 	wrbyte	#0, local06
21964                 | LR__2996
21964     0F 13 02 F6 | 	mov	arg01, local01
21968     10 15 02 F6 | 	mov	arg02, local02
2196c     13 17 02 F6 | 	mov	arg03, local05
21970     F0 FD BF FD | 	call	#__system___fmtstr
21974                 | LR__2997
21974     A7 F0 03 F6 | 	mov	ptra, fp
21978     B2 00 A0 FD | 	call	#popregs_
2197c                 | __system___fmtnum_ret
2197c     2D 00 64 FD | 	ret
21980                 | 
21980                 | __system___fmtfloat
21980     10 4A 05 F6 | 	mov	COUNT_, #16
21984     A8 00 A0 FD | 	call	#pushregs_
21988     24 F1 07 F1 | 	add	ptra, #292
2198c     04 4E 05 F1 | 	add	fp, #4
21990     A7 12 62 FC | 	wrlong	arg01, fp
21994     04 4E 05 F1 | 	add	fp, #4
21998     A7 14 62 FC | 	wrlong	arg02, fp
2199c     04 4E 05 F1 | 	add	fp, #4
219a0     A7 16 62 FC | 	wrlong	arg03, fp
219a4     04 4E 05 F1 | 	add	fp, #4
219a8     A7 18 62 FC | 	wrlong	arg04, fp
219ac     0C 4E 05 F1 | 	add	fp, #12
219b0     A7 14 68 FC | 	wrlong	#10, fp
219b4     08 4E 05 F1 | 	add	fp, #8
219b8     A7 00 68 FC | 	wrlong	#0, fp
219bc     08 4E 05 F1 | 	add	fp, #8
219c0     A7 00 68 FC | 	wrlong	#0, fp
219c4     08 4E 05 F1 | 	add	fp, #8
219c8     A7 00 68 FC | 	wrlong	#0, fp
219cc     04 4E 05 F1 | 	add	fp, #4
219d0     A7 04 68 FC | 	wrlong	#2, fp
219d4     04 4E 05 F1 | 	add	fp, #4
219d8     A7 00 68 FC | 	wrlong	#0, fp
219dc     04 4E 05 F1 | 	add	fp, #4
219e0     A7 00 68 FC | 	wrlong	#0, fp
219e4     04 4E 05 F1 | 	add	fp, #4
219e8     A7 00 68 FC | 	wrlong	#0, fp
219ec     04 4E 05 F1 | 	add	fp, #4
219f0     A7 00 68 FC | 	wrlong	#0, fp
219f4     18 4E 05 F1 | 	add	fp, #24
219f8     A7 00 68 FC | 	wrlong	#0, fp
219fc     68 4E 05 F1 | 	add	fp, #104
21a00     A7 1E 02 F6 | 	mov	local01, fp
21a04     08 4E 85 F1 | 	sub	fp, #8
21a08     A7 1E 62 FC | 	wrlong	local01, fp
21a0c     04 4E 05 F1 | 	add	fp, #4
21a10     A7 1E 62 FC | 	wrlong	local01, fp
21a14     BC 4E 85 F1 | 	sub	fp, #188
21a18     A7 1E 02 FB | 	rdlong	local01, fp
21a1c     10 1E 46 F0 | 	shr	local01, #16
21a20     3F 1E 06 F5 | 	and	local01, #63
21a24     B0 4E 05 F1 | 	add	fp, #176
21a28     A7 1E 62 FC | 	wrlong	local01, fp
21a2c     B0 4E 85 F1 | 	sub	fp, #176
21a30     A7 1E 02 FB | 	rdlong	local01, fp
21a34     1C 1E 46 F0 | 	shr	local01, #28
21a38     01 1E 06 F5 | 	and	local01, #1
21a3c     08 4F 05 F1 | 	add	fp, #264
21a40     A7 1E 62 FC | 	wrlong	local01, fp
21a44     58 4E 85 F1 | 	sub	fp, #88
21a48     A7 1E 0A FB | 	rdlong	local01, fp wz
21a4c     B8 4E 85 F1 | 	sub	fp, #184
21a50     3C 00 90 5D |  if_ne	jmp	#LR__3001
21a54     10 4E 05 F1 | 	add	fp, #16
21a58     A7 1E 02 FB | 	rdlong	local01, fp
21a5c     10 4E 85 F1 | 	sub	fp, #16
21a60     61 1E 0E F2 | 	cmp	local01, #97 wz
21a64     18 00 90 5D |  if_ne	jmp	#LR__3000
21a68     B8 4E 05 F1 | 	add	fp, #184
21a6c     A7 1A 68 FC | 	wrlong	#13, fp
21a70     84 4E 85 F1 | 	sub	fp, #132
21a74     A7 02 68 FC | 	wrlong	#1, fp
21a78     34 4E 85 F1 | 	sub	fp, #52
21a7c     24 00 90 FD | 	jmp	#LR__3002
21a80                 | LR__3000
21a80     B8 4E 05 F1 | 	add	fp, #184
21a84     A7 0C 68 FC | 	wrlong	#6, fp
21a88     B8 4E 85 F1 | 	sub	fp, #184
21a8c     14 00 90 FD | 	jmp	#LR__3002
21a90                 | LR__3001
21a90     B8 4E 05 F1 | 	add	fp, #184
21a94     A7 1E 02 FB | 	rdlong	local01, fp
21a98     01 1E 86 F1 | 	sub	local01, #1
21a9c     A7 1E 62 FC | 	wrlong	local01, fp
21aa0     B8 4E 85 F1 | 	sub	fp, #184
21aa4                 | LR__3002
21aa4     08 4E 05 F1 | 	add	fp, #8
21aa8     A7 1E 02 FB | 	rdlong	local01, fp
21aac     16 1E 46 F0 | 	shr	local01, #22
21ab0     03 1E 06 F5 | 	and	local01, #3
21ab4     04 4F 05 F1 | 	add	fp, #260
21ab8     A7 1E 62 FC | 	wrlong	local01, fp
21abc     04 4F 85 F1 | 	sub	fp, #260
21ac0     A7 1E 02 FB | 	rdlong	local01, fp
21ac4     1D 1E 46 F0 | 	shr	local01, #29
21ac8     01 1E 06 F5 | 	and	local01, #1
21acc     B4 4E 05 F1 | 	add	fp, #180
21ad0     A7 1E 62 FC | 	wrlong	local01, fp
21ad4     B4 4E 85 F1 | 	sub	fp, #180
21ad8     A7 1E 02 FB | 	rdlong	local01, fp
21adc     0F 1F EA F8 | 	getbyte	local01, local01, #1
21ae0     60 4E 05 F1 | 	add	fp, #96
21ae4     A7 1E 62 FC | 	wrlong	local01, fp
21ae8     60 4E 85 F1 | 	sub	fp, #96
21aec     A7 1E 02 FB | 	rdlong	local01, fp
21af0     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21af4     64 4E 05 F1 | 	add	fp, #100
21af8     A7 1E 62 FC | 	wrlong	local01, fp
21afc     00 1E 06 F6 | 	mov	local01, #0
21b00     5C 4E 85 F1 | 	sub	fp, #92
21b04     A7 1A 02 FB | 	rdlong	arg05, fp
21b08     65 1A 0E F2 | 	cmp	arg05, #101 wz
21b0c     01 1E 06 A6 |  if_e	mov	local01, #1
21b10     14 4E 05 F1 | 	add	fp, #20
21b14     A7 1E 62 FC | 	wrlong	local01, fp
21b18     98 4E 05 F1 | 	add	fp, #152
21b1c     A7 20 0A FB | 	rdlong	local02, fp wz
21b20     45 1E 06 56 |  if_ne	mov	local01, #69
21b24     65 1E 06 A6 |  if_e	mov	local01, #101
21b28     8C 4E 85 F1 | 	sub	fp, #140
21b2c     A7 1E 62 FC | 	wrlong	local01, fp
21b30     20 4E 85 F1 | 	sub	fp, #32
21b34     A7 1E 02 FB | 	rdlong	local01, fp
21b38     10 4E 85 F1 | 	sub	fp, #16
21b3c     61 1E 0E F2 | 	cmp	local01, #97 wz
21b40     4C 00 90 5D |  if_ne	jmp	#LR__3003
21b44     24 4E 05 F1 | 	add	fp, #36
21b48     A7 02 68 FC | 	wrlong	#1, fp
21b4c     98 4E 05 F1 | 	add	fp, #152
21b50     A7 20 0A FB | 	rdlong	local02, fp wz
21b54     50 1E 06 56 |  if_ne	mov	local01, #80
21b58     70 1E 06 A6 |  if_e	mov	local01, #112
21b5c     8C 4E 85 F1 | 	sub	fp, #140
21b60     A7 1E 62 FC | 	wrlong	local01, fp
21b64     14 4E 85 F1 | 	sub	fp, #20
21b68     A7 04 68 FC | 	wrlong	#2, fp
21b6c     1C 4E 05 F1 | 	add	fp, #28
21b70     A7 02 68 FC | 	wrlong	#1, fp
21b74     84 4E 05 F1 | 	add	fp, #132
21b78     A7 20 0A FB | 	rdlong	local02, fp wz
21b7c     58 1E 06 56 |  if_ne	mov	local01, #88
21b80     78 1E 06 A6 |  if_e	mov	local01, #120
21b84     7C 4E 85 F1 | 	sub	fp, #124
21b88     A7 1E 62 FC | 	wrlong	local01, fp
21b8c     40 4E 85 F1 | 	sub	fp, #64
21b90                 | LR__3003
21b90     10 4E 05 F1 | 	add	fp, #16
21b94     A7 1E 02 FB | 	rdlong	local01, fp
21b98     10 4E 85 F1 | 	sub	fp, #16
21b9c     23 1E 0E F2 | 	cmp	local01, #35 wz
21ba0     3C 00 90 5D |  if_ne	jmp	#LR__3006
21ba4     48 4E 05 F1 | 	add	fp, #72
21ba8     A7 02 68 FC | 	wrlong	#1, fp
21bac     C8 4E 05 F1 | 	add	fp, #200
21bb0     A7 1E 0A FB | 	rdlong	local01, fp wz
21bb4     10 4F 85 F1 | 	sub	fp, #272
21bb8     18 00 90 AD |  if_e	jmp	#LR__3004
21bbc     10 4E 05 F1 | 	add	fp, #16
21bc0     A7 CC 68 FC | 	wrlong	#102, fp
21bc4     00 4F 05 F1 | 	add	fp, #256
21bc8     A7 00 68 FC | 	wrlong	#0, fp
21bcc     10 4F 85 F1 | 	sub	fp, #272
21bd0     0C 00 90 FD | 	jmp	#LR__3005
21bd4                 | LR__3004
21bd4     10 4F 05 F1 | 	add	fp, #272
21bd8     A7 02 68 FC | 	wrlong	#1, fp
21bdc     10 4F 85 F1 | 	sub	fp, #272
21be0                 | LR__3005
21be0                 | LR__3006
21be0     08 4E 05 F1 | 	add	fp, #8
21be4     A7 1E 02 FB | 	rdlong	local01, fp
21be8     1A 1E 46 F0 | 	shr	local01, #26
21bec     03 1E 06 F5 | 	and	local01, #3
21bf0     5C 4E 05 F1 | 	add	fp, #92
21bf4     A7 1E 62 FC | 	wrlong	local01, fp
21bf8     58 4E 85 F1 | 	sub	fp, #88
21bfc     A7 FA 01 FB | 	rdlong	result1, fp
21c00     0C 4E 85 F1 | 	sub	fp, #12
21c04     1F FA 4D F0 | 	shr	result1, #31 wz
21c08     20 00 90 AD |  if_e	jmp	#LR__3007
21c0c     2C 4E 05 F1 | 	add	fp, #44
21c10     A7 5A 68 FC | 	wrlong	#45, fp
21c14     20 4E 85 F1 | 	sub	fp, #32
21c18     A7 FA 01 FB | 	rdlong	result1, fp
21c1c     1F FA E5 F4 | 	bitnot	result1, #31
21c20     A7 FA 61 FC | 	wrlong	result1, fp
21c24     0C 4E 85 F1 | 	sub	fp, #12
21c28     3C 00 90 FD | 	jmp	#LR__3009
21c2c                 | LR__3007
21c2c     64 4E 05 F1 | 	add	fp, #100
21c30     A7 1E 02 FB | 	rdlong	local01, fp
21c34     64 4E 85 F1 | 	sub	fp, #100
21c38     01 1E 0E F2 | 	cmp	local01, #1 wz
21c3c     2C 4E 05 A1 |  if_e	add	fp, #44
21c40     A7 56 68 AC |  if_e	wrlong	#43, fp
21c44     2C 4E 85 A1 |  if_e	sub	fp, #44
21c48     1C 00 90 AD |  if_e	jmp	#LR__3008
21c4c     64 4E 05 F1 | 	add	fp, #100
21c50     A7 1E 02 FB | 	rdlong	local01, fp
21c54     64 4E 85 F1 | 	sub	fp, #100
21c58     02 1E 0E F2 | 	cmp	local01, #2 wz
21c5c     2C 4E 05 A1 |  if_e	add	fp, #44
21c60     A7 40 68 AC |  if_e	wrlong	#32, fp
21c64     2C 4E 85 A1 |  if_e	sub	fp, #44
21c68                 | LR__3008
21c68                 | LR__3009
21c68     08 4E 05 F1 | 	add	fp, #8
21c6c     A7 1E 02 FB | 	rdlong	local01, fp
21c70     18 1E 46 F0 | 	shr	local01, #24
21c74     03 1E 06 F5 | 	and	local01, #3
21c78     3C 4E 05 F1 | 	add	fp, #60
21c7c     A7 1E 62 FC | 	wrlong	local01, fp
21c80     00 1E 06 F6 | 	mov	local01, #0
21c84     18 4E 85 F1 | 	sub	fp, #24
21c88     A7 22 0A FB | 	rdlong	local03, fp wz
21c8c     2C 4E 85 F1 | 	sub	fp, #44
21c90     18 00 90 5D |  if_ne	jmp	#LR__3010
21c94     1C 4E 05 F1 | 	add	fp, #28
21c98     A7 24 02 FB | 	rdlong	local04, fp
21c9c     1C 4E 85 F1 | 	sub	fp, #28
21ca0     12 27 02 F6 | 	mov	local05, local04
21ca4     0A 26 0E F2 | 	cmp	local05, #10 wz
21ca8     04 00 90 AD |  if_e	jmp	#LR__3011
21cac                 | LR__3010
21cac     01 1E 66 F5 | 	xor	local01, #1
21cb0                 | LR__3011
21cb0     3C 4E 05 F1 | 	add	fp, #60
21cb4     A7 1E 62 FC | 	wrlong	local01, fp
21cb8     3C 4E 85 F1 | 	sub	fp, #60
21cbc     00 1E 0E F2 | 	cmp	local01, #0 wz
21cc0     0C 01 90 AD |  if_e	jmp	#LR__3013
21cc4     44 4E 05 F1 | 	add	fp, #68
21cc8     A7 26 02 FB | 	rdlong	local05, fp
21ccc     44 4E 85 F1 | 	sub	fp, #68
21cd0     13 23 02 F6 | 	mov	local03, local05
21cd4     02 22 0E F2 | 	cmp	local03, #2 wz
21cd8     F4 00 90 5D |  if_ne	jmp	#LR__3013
21cdc     0C 4F 05 F1 | 	add	fp, #268
21ce0     A7 28 02 FB | 	rdlong	local06, fp
21ce4     0C 4F 85 F1 | 	sub	fp, #268
21ce8     14 25 02 F6 | 	mov	local04, local06
21cec     02 24 0E F2 | 	cmp	local04, #2 wz
21cf0     DC 00 90 AD |  if_e	jmp	#LR__3013
21cf4     C0 4E 05 F1 | 	add	fp, #192
21cf8     A7 12 02 FB | 	rdlong	arg01, fp
21cfc     94 4E 85 F1 | 	sub	fp, #148
21d00     A7 14 02 FB | 	rdlong	arg02, fp
21d04     14 4E 05 F1 | 	add	fp, #20
21d08     A7 16 02 FB | 	rdlong	arg03, fp
21d0c     40 4E 85 F1 | 	sub	fp, #64
21d10     C8 44 B0 FD | 	call	#__system__emitsign_0501
21d14     14 4F 05 F1 | 	add	fp, #276
21d18     A7 FA 61 FC | 	wrlong	result1, fp
21d1c     14 4F 85 F1 | 	sub	fp, #276
21d20     00 FA 55 F2 | 	cmps	result1, #0 wc
21d24     14 4F 05 C1 |  if_b	add	fp, #276
21d28     A7 FA 01 CB |  if_b	rdlong	result1, fp
21d2c     14 4F 85 C1 |  if_b	sub	fp, #276
21d30     6C 0B 90 CD |  if_b	jmp	#LR__3063
21d34     C0 4E 05 F1 | 	add	fp, #192
21d38     A7 1E 02 FB | 	rdlong	local01, fp
21d3c     54 4E 05 F1 | 	add	fp, #84
21d40     A7 26 02 FB | 	rdlong	local05, fp
21d44     13 23 02 F6 | 	mov	local03, local05
21d48     13 1F 02 F1 | 	add	local01, local05
21d4c     54 4E 85 F1 | 	sub	fp, #84
21d50     A7 1E 62 FC | 	wrlong	local01, fp
21d54     58 4E 85 F1 | 	sub	fp, #88
21d58     A7 1E 0A FB | 	rdlong	local01, fp wz
21d5c     68 4E 85 F1 | 	sub	fp, #104
21d60     60 00 90 AD |  if_e	jmp	#LR__3012
21d64     68 4E 05 F1 | 	add	fp, #104
21d68     A7 1E 02 FB | 	rdlong	local01, fp
21d6c     AC 4E 05 F1 | 	add	fp, #172
21d70     A7 22 02 FB | 	rdlong	local03, fp
21d74     11 1F 82 F1 | 	sub	local01, local03
21d78     AC 4E 85 F1 | 	sub	fp, #172
21d7c     A7 1E 62 FC | 	wrlong	local01, fp
21d80     68 4E 85 F1 | 	sub	fp, #104
21d84     00 1E 56 F2 | 	cmps	local01, #0 wc
21d88     68 4E 05 C1 |  if_b	add	fp, #104
21d8c     A7 00 68 CC |  if_b	wrlong	#0, fp
21d90     68 4E 85 C1 |  if_b	sub	fp, #104
21d94     08 4E 05 F1 | 	add	fp, #8
21d98     A7 1E 02 FB | 	rdlong	local01, fp
21d9c     E8 1E 06 F4 | 	bitl	local01, #232
21da0     A7 1E 62 FC | 	wrlong	local01, fp
21da4     60 4E 05 F1 | 	add	fp, #96
21da8     A7 26 02 FB | 	rdlong	local05, fp
21dac     13 23 02 F6 | 	mov	local03, local05
21db0     08 22 66 F0 | 	shl	local03, #8
21db4     11 1F 42 F5 | 	or	local01, local03
21db8     60 4E 85 F1 | 	sub	fp, #96
21dbc     A7 1E 62 FC | 	wrlong	local01, fp
21dc0     08 4E 85 F1 | 	sub	fp, #8
21dc4                 | LR__3012
21dc4     3C 4E 05 F1 | 	add	fp, #60
21dc8     A7 00 68 FC | 	wrlong	#0, fp
21dcc     3C 4E 85 F1 | 	sub	fp, #60
21dd0                 | LR__3013
21dd0     0C 4E 05 F1 | 	add	fp, #12
21dd4     A7 12 02 FB | 	rdlong	arg01, fp
21dd8     0C 4E 85 F1 | 	sub	fp, #12
21ddc     28 1F B0 FD | 	call	#__system____builtin_ilogb
21de0     FF FF 3F FF 
21de4     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
21de8     50 00 90 5D |  if_ne	jmp	#LR__3015
21dec     2C 4E 05 F1 | 	add	fp, #44
21df0     A7 1E 0A FB | 	rdlong	local01, fp wz
21df4     2C 4E 85 F1 | 	sub	fp, #44
21df8     24 00 90 AD |  if_e	jmp	#LR__3014
21dfc     C0 4E 05 F1 | 	add	fp, #192
21e00     A7 20 02 FB | 	rdlong	local02, fp
21e04     10 23 02 F6 | 	mov	local03, local02
21e08     01 22 06 F1 | 	add	local03, #1
21e0c     A7 22 62 FC | 	wrlong	local03, fp
21e10     94 4E 85 F1 | 	sub	fp, #148
21e14     A7 24 02 FB | 	rdlong	local04, fp
21e18     2C 4E 85 F1 | 	sub	fp, #44
21e1c     10 25 42 FC | 	wrbyte	local04, local02
21e20                 | LR__3014
21e20     C0 4E 05 F1 | 	add	fp, #192
21e24     A7 12 02 FB | 	rdlong	arg01, fp
21e28     C0 4E 85 F1 | 	sub	fp, #192
21e2c     80 01 00 FF 
21e30     7A 14 06 F6 | 	mov	arg02, ##@LR__4981
21e34     AC E9 BF FD | 	call	#__system____builtin_strcpy
21e38     A4 08 90 FD | 	jmp	#LR__3051
21e3c                 | LR__3015
21e3c     0C 4E 05 F1 | 	add	fp, #12
21e40     A7 20 02 FB | 	rdlong	local02, fp
21e44     0C 4E 85 F1 | 	sub	fp, #12
21e48     10 13 02 F6 | 	mov	arg01, local02
21e4c     B8 1E B0 FD | 	call	#__system____builtin_ilogb
21e50     00 00 40 FF 
21e54     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
21e58     50 00 90 5D |  if_ne	jmp	#LR__3017
21e5c     2C 4E 05 F1 | 	add	fp, #44
21e60     A7 1E 0A FB | 	rdlong	local01, fp wz
21e64     2C 4E 85 F1 | 	sub	fp, #44
21e68     24 00 90 AD |  if_e	jmp	#LR__3016
21e6c     C0 4E 05 F1 | 	add	fp, #192
21e70     A7 20 02 FB | 	rdlong	local02, fp
21e74     10 23 02 F6 | 	mov	local03, local02
21e78     01 22 06 F1 | 	add	local03, #1
21e7c     A7 22 62 FC | 	wrlong	local03, fp
21e80     94 4E 85 F1 | 	sub	fp, #148
21e84     A7 24 02 FB | 	rdlong	local04, fp
21e88     2C 4E 85 F1 | 	sub	fp, #44
21e8c     10 25 42 FC | 	wrbyte	local04, local02
21e90                 | LR__3016
21e90     C0 4E 05 F1 | 	add	fp, #192
21e94     A7 12 02 FB | 	rdlong	arg01, fp
21e98     C0 4E 85 F1 | 	sub	fp, #192
21e9c     80 01 00 FF 
21ea0     7E 14 06 F6 | 	mov	arg02, ##@LR__4982
21ea4     3C E9 BF FD | 	call	#__system____builtin_strcpy
21ea8     34 08 90 FD | 	jmp	#LR__3051
21eac                 | LR__3017
21eac     10 4E 05 F1 | 	add	fp, #16
21eb0     A7 1E 02 FB | 	rdlong	local01, fp
21eb4     10 4E 85 F1 | 	sub	fp, #16
21eb8     67 1E 0E F2 | 	cmp	local01, #103 wz
21ebc     10 4E 05 51 |  if_ne	add	fp, #16
21ec0     A7 22 02 5B |  if_ne	rdlong	local03, fp
21ec4     10 4E 85 51 |  if_ne	sub	fp, #16
21ec8     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
21ecc     94 01 90 5D |  if_ne	jmp	#LR__3022
21ed0     0C 4E 05 F1 | 	add	fp, #12
21ed4     A7 12 02 FB | 	rdlong	arg01, fp
21ed8     08 4E 05 F1 | 	add	fp, #8
21edc     A7 14 02 F6 | 	mov	arg02, fp
21ee0     0C 4E 05 F1 | 	add	fp, #12
21ee4     A7 16 02 F6 | 	mov	arg03, fp
21ee8     98 4E 05 F1 | 	add	fp, #152
21eec     A7 18 02 FB | 	rdlong	arg04, fp
21ef0     9C 4E 85 F1 | 	sub	fp, #156
21ef4     A7 1A 02 FB | 	rdlong	arg05, fp
21ef8     1C 4E 85 F1 | 	sub	fp, #28
21efc     E8 40 B0 FD | 	call	#__system__disassemble_0499
21f00     10 4E 05 F1 | 	add	fp, #16
21f04     A7 1E 02 FB | 	rdlong	local01, fp
21f08     10 4E 85 F1 | 	sub	fp, #16
21f0c     23 1E 0E F2 | 	cmp	local01, #35 wz
21f10     A0 00 90 5D |  if_ne	jmp	#LR__3019
21f14     20 4E 05 F1 | 	add	fp, #32
21f18     A7 1E 02 FB | 	rdlong	local01, fp
21f1c     98 4E 05 F1 | 	add	fp, #152
21f20     A7 22 02 FB | 	rdlong	local03, fp
21f24     B8 4E 85 F1 | 	sub	fp, #184
21f28     11 1F 5A F2 | 	cmps	local01, local03 wcz
21f2c     24 4E 05 11 |  if_a	add	fp, #36
21f30     A7 02 68 1C |  if_a	wrlong	#1, fp
21f34     24 4E 85 11 |  if_a	sub	fp, #36
21f38     A4 01 90 1D |  if_a	jmp	#LR__3025
21f3c     20 4E 05 F1 | 	add	fp, #32
21f40     A7 1E 02 FB | 	rdlong	local01, fp
21f44     20 4E 85 F1 | 	sub	fp, #32
21f48     00 1E 56 F2 | 	cmps	local01, #0 wc
21f4c     2C 00 90 3D |  if_ae	jmp	#LR__3018
21f50     B8 4E 05 F1 | 	add	fp, #184
21f54     A7 1E 02 FB | 	rdlong	local01, fp
21f58     0F 1F 62 F6 | 	neg	local01, local01
21f5c     98 4E 85 F1 | 	sub	fp, #152
21f60     A7 22 02 FB | 	rdlong	local03, fp
21f64     20 4E 85 F1 | 	sub	fp, #32
21f68     0F 23 5A F2 | 	cmps	local03, local01 wcz
21f6c     24 4E 05 E1 |  if_be	add	fp, #36
21f70     A7 02 68 EC |  if_be	wrlong	#1, fp
21f74     24 4E 85 E1 |  if_be	sub	fp, #36
21f78     64 01 90 FD | 	jmp	#LR__3025
21f7c                 | LR__3018
21f7c     20 4E 05 F1 | 	add	fp, #32
21f80     A7 1E 02 FB | 	rdlong	local01, fp
21f84     20 4E 85 F1 | 	sub	fp, #32
21f88     01 1E 56 F2 | 	cmps	local01, #1 wc
21f8c     50 01 90 CD |  if_b	jmp	#LR__3025
21f90     B8 4E 05 F1 | 	add	fp, #184
21f94     A7 1E 02 FB | 	rdlong	local01, fp
21f98     98 4E 85 F1 | 	sub	fp, #152
21f9c     A7 22 02 FB | 	rdlong	local03, fp
21fa0     11 1F 82 F1 | 	sub	local01, local03
21fa4     98 4E 05 F1 | 	add	fp, #152
21fa8     A7 1E 62 FC | 	wrlong	local01, fp
21fac     B8 4E 85 F1 | 	sub	fp, #184
21fb0     2C 01 90 FD | 	jmp	#LR__3025
21fb4                 | LR__3019
21fb4     00 1E 06 F6 | 	mov	local01, #0
21fb8     08 4E 05 F1 | 	add	fp, #8
21fbc     A7 20 02 FB | 	rdlong	local02, fp
21fc0     1C 20 46 F0 | 	shr	local02, #28
21fc4     01 20 0E F5 | 	and	local02, #1 wz
21fc8     01 1E 06 A6 |  if_e	mov	local01, #1
21fcc     2C 4E 05 F1 | 	add	fp, #44
21fd0     A7 1E 62 FC | 	wrlong	local01, fp
21fd4     14 4E 85 F1 | 	sub	fp, #20
21fd8     A7 1E 02 FB | 	rdlong	local01, fp
21fdc     98 4E 05 F1 | 	add	fp, #152
21fe0     A7 22 02 FB | 	rdlong	local03, fp
21fe4     B8 4E 85 F1 | 	sub	fp, #184
21fe8     11 1F 52 F2 | 	cmps	local01, local03 wc
21fec     18 00 90 3D |  if_ae	jmp	#LR__3020
21ff0     20 4E 05 F1 | 	add	fp, #32
21ff4     A7 24 02 FB | 	rdlong	local04, fp
21ff8     20 4E 85 F1 | 	sub	fp, #32
21ffc     FF FF 7F FF 
22000     FC 25 56 F2 | 	cmps	local04, ##-4 wc
22004     10 00 90 3D |  if_ae	jmp	#LR__3021
22008                 | LR__3020
22008     24 4E 05 F1 | 	add	fp, #36
2200c     A7 02 68 FC | 	wrlong	#1, fp
22010     24 4E 85 F1 | 	sub	fp, #36
22014     C8 00 90 FD | 	jmp	#LR__3025
22018                 | LR__3021
22018     B8 4E 05 F1 | 	add	fp, #184
2201c     A7 24 02 FB | 	rdlong	local04, fp
22020     98 4E 85 F1 | 	sub	fp, #152
22024     A7 22 02 FB | 	rdlong	local03, fp
22028     11 25 82 F1 | 	sub	local04, local03
2202c     98 4E 05 F1 | 	add	fp, #152
22030     A7 24 62 FC | 	wrlong	local04, fp
22034     AC 4E 85 F1 | 	sub	fp, #172
22038     A7 12 02 FB | 	rdlong	arg01, fp
2203c     08 4E 05 F1 | 	add	fp, #8
22040     A7 14 02 F6 | 	mov	arg02, fp
22044     0C 4E 05 F1 | 	add	fp, #12
22048     A7 16 02 F6 | 	mov	arg03, fp
2204c     12 19 62 F6 | 	neg	arg04, local04
22050     04 4E 85 F1 | 	sub	fp, #4
22054     A7 1A 02 FB | 	rdlong	arg05, fp
22058     1C 4E 85 F1 | 	sub	fp, #28
2205c     88 3F B0 FD | 	call	#__system__disassemble_0499
22060     7C 00 90 FD | 	jmp	#LR__3025
22064                 | LR__3022
22064     24 4E 05 F1 | 	add	fp, #36
22068     A7 1E 0A FB | 	rdlong	local01, fp wz
2206c     24 4E 85 F1 | 	sub	fp, #36
22070     34 00 90 AD |  if_e	jmp	#LR__3023
22074     0C 4E 05 F1 | 	add	fp, #12
22078     A7 12 02 FB | 	rdlong	arg01, fp
2207c     08 4E 05 F1 | 	add	fp, #8
22080     A7 14 02 F6 | 	mov	arg02, fp
22084     0C 4E 05 F1 | 	add	fp, #12
22088     A7 16 02 F6 | 	mov	arg03, fp
2208c     98 4E 05 F1 | 	add	fp, #152
22090     A7 18 02 FB | 	rdlong	arg04, fp
22094     9C 4E 85 F1 | 	sub	fp, #156
22098     A7 1A 02 FB | 	rdlong	arg05, fp
2209c     1C 4E 85 F1 | 	sub	fp, #28
220a0     44 3F B0 FD | 	call	#__system__disassemble_0499
220a4     38 00 90 FD | 	jmp	#LR__3024
220a8                 | LR__3023
220a8     0C 4E 05 F1 | 	add	fp, #12
220ac     A7 12 02 FB | 	rdlong	arg01, fp
220b0     08 4E 05 F1 | 	add	fp, #8
220b4     A7 14 02 F6 | 	mov	arg02, fp
220b8     0C 4E 05 F1 | 	add	fp, #12
220bc     A7 16 02 F6 | 	mov	arg03, fp
220c0     98 4E 05 F1 | 	add	fp, #152
220c4     A7 24 02 FB | 	rdlong	local04, fp
220c8     01 24 06 F1 | 	add	local04, #1
220cc     12 19 62 F6 | 	neg	arg04, local04
220d0     9C 4E 85 F1 | 	sub	fp, #156
220d4     A7 1A 02 FB | 	rdlong	arg05, fp
220d8     1C 4E 85 F1 | 	sub	fp, #28
220dc     08 3F B0 FD | 	call	#__system__disassemble_0499
220e0                 | LR__3024
220e0                 | LR__3025
220e0     1C 4E 05 F1 | 	add	fp, #28
220e4     A7 1E 02 FB | 	rdlong	local01, fp
220e8     1C 4E 85 F1 | 	sub	fp, #28
220ec     02 1E 0E F2 | 	cmp	local01, #2 wz
220f0     4C 00 90 5D |  if_ne	jmp	#LR__3028
220f4     1C 4E 05 F1 | 	add	fp, #28
220f8     A7 20 68 FC | 	wrlong	#16, fp
220fc     1C 4E 85 F1 | 	sub	fp, #28
22100                 | LR__3026
22100     14 4E 05 F1 | 	add	fp, #20
22104     A7 1E 0A FB | 	rdlong	local01, fp wz
22108     14 4E 85 F1 | 	sub	fp, #20
2210c     30 00 90 AD |  if_e	jmp	#LR__3027
22110     14 4E 05 F1 | 	add	fp, #20
22114     A7 22 02 FB | 	rdlong	local03, fp
22118     14 4E 85 F1 | 	sub	fp, #20
2211c     00 80 00 FF 
22120     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22124     18 00 90 3D |  if_ae	jmp	#LR__3027
22128     14 4E 05 F1 | 	add	fp, #20
2212c     A7 1E 02 FB | 	rdlong	local01, fp
22130     01 1E 66 F0 | 	shl	local01, #1
22134     A7 1E 62 FC | 	wrlong	local01, fp
22138     14 4E 85 F1 | 	sub	fp, #20
2213c     C0 FF 9F FD | 	jmp	#LR__3026
22140                 | LR__3027
22140                 | LR__3028
22140     70 4E 05 F1 | 	add	fp, #112
22144     A7 12 02 F6 | 	mov	arg01, fp
22148     5C 4E 85 F1 | 	sub	fp, #92
2214c     A7 14 02 FB | 	rdlong	arg02, fp
22150     08 4E 05 F1 | 	add	fp, #8
22154     A7 16 02 FB | 	rdlong	arg03, fp
22158     A0 4E 05 F1 | 	add	fp, #160
2215c     A7 1A 02 FB | 	rdlong	arg05, fp
22160     BC 4E 85 F1 | 	sub	fp, #188
22164     01 18 06 F6 | 	mov	arg04, #1
22168     08 3E B0 FD | 	call	#__system___uitoa
2216c     58 4E 05 F1 | 	add	fp, #88
22170     A7 FA 61 FC | 	wrlong	result1, fp
22174     38 4E 85 F1 | 	sub	fp, #56
22178     A7 1E 02 FB | 	rdlong	local01, fp
2217c     20 4E 85 F1 | 	sub	fp, #32
22180     00 1E 56 F2 | 	cmps	local01, #0 wc
22184     50 00 90 3D |  if_ae	jmp	#LR__3029
22188     60 4E 05 F1 | 	add	fp, #96
2218c     A7 5A 68 FC | 	wrlong	#45, fp
22190     50 4E 05 F1 | 	add	fp, #80
22194     A7 12 02 F6 | 	mov	arg01, fp
22198     90 4E 85 F1 | 	sub	fp, #144
2219c     A7 22 02 FB | 	rdlong	local03, fp
221a0     11 15 62 F6 | 	neg	arg02, local03
221a4     18 4E 05 F1 | 	add	fp, #24
221a8     A7 18 02 FB | 	rdlong	arg04, fp
221ac     84 4E 05 F1 | 	add	fp, #132
221b0     A7 28 02 FB | 	rdlong	local06, fp
221b4     BC 4E 85 F1 | 	sub	fp, #188
221b8     14 25 02 F6 | 	mov	local04, local06
221bc     0A 16 06 F6 | 	mov	arg03, #10
221c0     12 1B 02 F6 | 	mov	arg05, local04
221c4     AC 3D B0 FD | 	call	#__system___uitoa
221c8     5C 4E 05 F1 | 	add	fp, #92
221cc     A7 FA 61 FC | 	wrlong	result1, fp
221d0     5C 4E 85 F1 | 	sub	fp, #92
221d4     48 00 90 FD | 	jmp	#LR__3030
221d8                 | LR__3029
221d8     60 4E 05 F1 | 	add	fp, #96
221dc     A7 56 68 FC | 	wrlong	#43, fp
221e0     50 4E 05 F1 | 	add	fp, #80
221e4     A7 12 02 F6 | 	mov	arg01, fp
221e8     90 4E 85 F1 | 	sub	fp, #144
221ec     A7 14 02 FB | 	rdlong	arg02, fp
221f0     18 4E 05 F1 | 	add	fp, #24
221f4     A7 18 02 FB | 	rdlong	arg04, fp
221f8     84 4E 05 F1 | 	add	fp, #132
221fc     A7 28 02 FB | 	rdlong	local06, fp
22200     BC 4E 85 F1 | 	sub	fp, #188
22204     14 25 02 F6 | 	mov	local04, local06
22208     0A 16 06 F6 | 	mov	arg03, #10
2220c     12 1B 02 F6 | 	mov	arg05, local04
22210     60 3D B0 FD | 	call	#__system___uitoa
22214     5C 4E 05 F1 | 	add	fp, #92
22218     A7 FA 61 FC | 	wrlong	result1, fp
2221c     5C 4E 85 F1 | 	sub	fp, #92
22220                 | LR__3030
22220     24 4E 05 F1 | 	add	fp, #36
22224     A7 1E 0A FB | 	rdlong	local01, fp wz
22228     24 4E 85 F1 | 	sub	fp, #36
2222c     2C 00 90 AD |  if_e	jmp	#LR__3031
22230     50 4E 05 F1 | 	add	fp, #80
22234     A7 00 68 FC | 	wrlong	#0, fp
22238     04 4E 85 F1 | 	sub	fp, #4
2223c     A7 00 68 FC | 	wrlong	#0, fp
22240     6C 4E 05 F1 | 	add	fp, #108
22244     A7 1E 02 FB | 	rdlong	local01, fp
22248     01 1E 06 F1 | 	add	local01, #1
2224c     64 4E 85 F1 | 	sub	fp, #100
22250     A7 1E 62 FC | 	wrlong	local01, fp
22254     54 4E 85 F1 | 	sub	fp, #84
22258     88 00 90 FD | 	jmp	#LR__3034
2225c                 | LR__3031
2225c     20 4E 05 F1 | 	add	fp, #32
22260     A7 1E 02 FB | 	rdlong	local01, fp
22264     20 4E 85 F1 | 	sub	fp, #32
22268     00 1E 56 F2 | 	cmps	local01, #0 wc
2226c     40 00 90 3D |  if_ae	jmp	#LR__3032
22270     20 4E 05 F1 | 	add	fp, #32
22274     A7 20 02 FB | 	rdlong	local02, fp
22278     30 4E 05 F1 | 	add	fp, #48
2227c     A7 20 62 FC | 	wrlong	local02, fp
22280     04 4E 85 F1 | 	sub	fp, #4
22284     A7 20 62 FC | 	wrlong	local02, fp
22288     2C 4E 85 F1 | 	sub	fp, #44
2228c     A7 1E 02 FB | 	rdlong	local01, fp
22290     98 4E 05 F1 | 	add	fp, #152
22294     A7 22 02 FB | 	rdlong	local03, fp
22298     11 1F 02 F1 | 	add	local01, local03
2229c     01 1E 06 F1 | 	add	local01, #1
222a0     64 4E 85 F1 | 	sub	fp, #100
222a4     A7 1E 62 FC | 	wrlong	local01, fp
222a8     54 4E 85 F1 | 	sub	fp, #84
222ac     34 00 90 FD | 	jmp	#LR__3033
222b0                 | LR__3032
222b0     4C 4E 05 F1 | 	add	fp, #76
222b4     A7 00 68 FC | 	wrlong	#0, fp
222b8     2C 4E 85 F1 | 	sub	fp, #44
222bc     A7 1E 02 FB | 	rdlong	local01, fp
222c0     30 4E 05 F1 | 	add	fp, #48
222c4     A7 1E 62 FC | 	wrlong	local01, fp
222c8     68 4E 05 F1 | 	add	fp, #104
222cc     A7 22 02 FB | 	rdlong	local03, fp
222d0     11 1F 02 F1 | 	add	local01, local03
222d4     01 1E 06 F1 | 	add	local01, #1
222d8     64 4E 85 F1 | 	sub	fp, #100
222dc     A7 1E 62 FC | 	wrlong	local01, fp
222e0     54 4E 85 F1 | 	sub	fp, #84
222e4                 | LR__3033
222e4                 | LR__3034
222e4     54 4E 05 F1 | 	add	fp, #84
222e8     A7 1E 02 FB | 	rdlong	local01, fp
222ec     08 4E 85 F1 | 	sub	fp, #8
222f0     A7 22 02 FB | 	rdlong	local03, fp
222f4     11 1F 82 F1 | 	sub	local01, local03
222f8     01 1E 06 F1 | 	add	local01, #1
222fc     24 4E 85 F1 | 	sub	fp, #36
22300     A7 1E 62 FC | 	wrlong	local01, fp
22304     04 4E 05 F1 | 	add	fp, #4
22308     A7 1E 0A FB | 	rdlong	local01, fp wz
2230c     2C 4E 85 F1 | 	sub	fp, #44
22310     28 4E 05 51 |  if_ne	add	fp, #40
22314     A7 22 02 5B |  if_ne	rdlong	local03, fp
22318     01 22 06 51 |  if_ne	add	local03, #1
2231c     A7 22 62 5C |  if_ne	wrlong	local03, fp
22320     28 4E 85 51 |  if_ne	sub	fp, #40
22324     1C 4E 05 F1 | 	add	fp, #28
22328     A7 1E 02 FB | 	rdlong	local01, fp
2232c     1C 4E 85 F1 | 	sub	fp, #28
22330     10 1E 0E F2 | 	cmp	local01, #16 wz
22334     28 4E 05 A1 |  if_e	add	fp, #40
22338     A7 1E 02 AB |  if_e	rdlong	local01, fp
2233c     02 1E 06 A1 |  if_e	add	local01, #2
22340     A7 1E 62 AC |  if_e	wrlong	local01, fp
22344     28 4E 85 A1 |  if_e	sub	fp, #40
22348     24 4E 05 F1 | 	add	fp, #36
2234c     A7 1E 0A FB | 	rdlong	local01, fp wz
22350     24 4E 85 F1 | 	sub	fp, #36
22354     28 00 90 AD |  if_e	jmp	#LR__3035
22358     28 4E 05 F1 | 	add	fp, #40
2235c     A7 1E 02 FB | 	rdlong	local01, fp
22360     02 22 06 F6 | 	mov	local03, #2
22364     34 4E 05 F1 | 	add	fp, #52
22368     A7 26 02 FB | 	rdlong	local05, fp
2236c     13 23 02 F1 | 	add	local03, local05
22370     11 1F 02 F1 | 	add	local01, local03
22374     34 4E 85 F1 | 	sub	fp, #52
22378     A7 1E 62 FC | 	wrlong	local01, fp
2237c     28 4E 85 F1 | 	sub	fp, #40
22380                 | LR__3035
22380     28 4E 05 F1 | 	add	fp, #40
22384     A7 1E 02 FB | 	rdlong	local01, fp
22388     28 4E 85 F1 | 	sub	fp, #40
2238c     41 1E 56 F2 | 	cmps	local01, #65 wc
22390     01 FA 65 36 |  if_ae	neg	result1, #1
22394     08 05 90 3D |  if_ae	jmp	#LR__3063
22398     3C 4E 05 F1 | 	add	fp, #60
2239c     A7 1E 0A FB | 	rdlong	local01, fp wz
223a0     3C 4E 85 F1 | 	sub	fp, #60
223a4     60 00 90 AD |  if_e	jmp	#LR__3036
223a8     C0 4E 05 F1 | 	add	fp, #192
223ac     A7 12 02 FB | 	rdlong	arg01, fp
223b0     94 4E 85 F1 | 	sub	fp, #148
223b4     A7 14 02 FB | 	rdlong	arg02, fp
223b8     14 4E 05 F1 | 	add	fp, #20
223bc     A7 16 02 FB | 	rdlong	arg03, fp
223c0     40 4E 85 F1 | 	sub	fp, #64
223c4     14 3E B0 FD | 	call	#__system__emitsign_0501
223c8     18 4F 05 F1 | 	add	fp, #280
223cc     A7 FA 61 FC | 	wrlong	result1, fp
223d0     18 4F 85 F1 | 	sub	fp, #280
223d4     00 FA 55 F2 | 	cmps	result1, #0 wc
223d8     18 4F 05 C1 |  if_b	add	fp, #280
223dc     A7 FA 01 CB |  if_b	rdlong	result1, fp
223e0     18 4F 85 C1 |  if_b	sub	fp, #280
223e4     B8 04 90 CD |  if_b	jmp	#LR__3063
223e8     C0 4E 05 F1 | 	add	fp, #192
223ec     A7 1E 02 FB | 	rdlong	local01, fp
223f0     58 4E 05 F1 | 	add	fp, #88
223f4     A7 22 02 FB | 	rdlong	local03, fp
223f8     11 1F 02 F1 | 	add	local01, local03
223fc     58 4E 85 F1 | 	sub	fp, #88
22400     A7 1E 62 FC | 	wrlong	local01, fp
22404     C0 4E 85 F1 | 	sub	fp, #192
22408                 | LR__3036
22408     4C 4E 05 F1 | 	add	fp, #76
2240c     A7 1E 02 FB | 	rdlong	local01, fp
22410     34 4E 85 F1 | 	sub	fp, #52
22414     A7 1E 62 FC | 	wrlong	local01, fp
22418     18 4E 85 F1 | 	sub	fp, #24
2241c     97 9E 48 FB | 	callpa	#(@LR__3042-@LR__3037)>>2,fcache_load_ptr_
22420                 | LR__3037
22420     18 4E 05 F1 | 	add	fp, #24
22424     A7 20 02 FB | 	rdlong	local02, fp
22428     3C 4E 05 F1 | 	add	fp, #60
2242c     A7 26 02 FB | 	rdlong	local05, fp
22430     54 4E 85 F1 | 	sub	fp, #84
22434     13 21 52 F2 | 	cmps	local02, local05 wc
22438     20 01 90 3D |  if_ae	jmp	#LR__3043
2243c     18 4E 05 F1 | 	add	fp, #24
22440     A7 28 02 FB | 	rdlong	local06, fp
22444     18 4E 85 F1 | 	sub	fp, #24
22448     00 28 56 F2 | 	cmps	local06, #0 wc
2244c     58 00 90 CD |  if_b	jmp	#LR__3038
22450     18 4E 05 F1 | 	add	fp, #24
22454     A7 28 02 FB | 	rdlong	local06, fp
22458     40 4E 05 F1 | 	add	fp, #64
2245c     A7 2A 02 FB | 	rdlong	local07, fp
22460     58 4E 85 F1 | 	sub	fp, #88
22464     15 29 52 F2 | 	cmps	local06, local07 wc
22468     3C 00 90 3D |  if_ae	jmp	#LR__3038
2246c     C0 4E 05 F1 | 	add	fp, #192
22470     A7 2C 02 FB | 	rdlong	local08, fp
22474     16 2B 02 F6 | 	mov	local07, local08
22478     01 2A 06 F1 | 	add	local07, #1
2247c     A7 2A 62 FC | 	wrlong	local07, fp
22480     A8 4E 85 F1 | 	sub	fp, #168
22484     A7 2A 02 FB | 	rdlong	local07, fp
22488     15 2F 02 F6 | 	mov	local09, local07
2248c     58 4E 05 F1 | 	add	fp, #88
22490     A7 30 02 F6 | 	mov	local10, fp
22494     A7 2E 02 F1 | 	add	local09, fp
22498     17 33 C2 FA | 	rdbyte	local11, local09
2249c     16 33 42 FC | 	wrbyte	local11, local08
224a0     70 4E 85 F1 | 	sub	fp, #112
224a4     20 00 90 FD | 	jmp	#LR__3039
224a8                 | LR__3038
224a8     C0 4E 05 F1 | 	add	fp, #192
224ac     A7 2C 02 FB | 	rdlong	local08, fp
224b0     16 2F 02 F6 | 	mov	local09, local08
224b4     01 2E 06 F1 | 	add	local09, #1
224b8     A7 2E 62 FC | 	wrlong	local09, fp
224bc     C0 4E 85 F1 | 	sub	fp, #192
224c0     30 2E 06 F6 | 	mov	local09, #48
224c4     16 61 48 FC | 	wrbyte	#48, local08
224c8                 | LR__3039
224c8     18 4E 05 F1 | 	add	fp, #24
224cc     A7 28 02 FB | 	rdlong	local06, fp
224d0     38 4E 05 F1 | 	add	fp, #56
224d4     A7 34 02 FB | 	rdlong	local12, fp
224d8     50 4E 85 F1 | 	sub	fp, #80
224dc     1A 29 0A F2 | 	cmp	local06, local12 wz
224e0     5C 00 90 5D |  if_ne	jmp	#LR__3041
224e4     10 4F 05 F1 | 	add	fp, #272
224e8     A7 2A 02 FB | 	rdlong	local07, fp
224ec     10 4F 85 F1 | 	sub	fp, #272
224f0     15 2F 0A F6 | 	mov	local09, local07 wz
224f4     28 00 90 5D |  if_ne	jmp	#LR__3040
224f8     54 4E 05 F1 | 	add	fp, #84
224fc     A7 32 02 FB | 	rdlong	local11, fp
22500     19 31 02 F6 | 	mov	local10, local11
22504     01 30 86 F1 | 	sub	local10, #1
22508     3C 4E 85 F1 | 	sub	fp, #60
2250c     A7 36 02 FB | 	rdlong	local13, fp
22510     18 4E 85 F1 | 	sub	fp, #24
22514     1B 39 02 F6 | 	mov	local14, local13
22518     18 39 52 F2 | 	cmps	local14, local10 wc
2251c     20 00 90 3D |  if_ae	jmp	#LR__3041
22520                 | LR__3040
22520     C0 4E 05 F1 | 	add	fp, #192
22524     A7 2C 02 FB | 	rdlong	local08, fp
22528     16 35 02 F6 | 	mov	local12, local08
2252c     01 34 06 F1 | 	add	local12, #1
22530     A7 34 62 FC | 	wrlong	local12, fp
22534     C0 4E 85 F1 | 	sub	fp, #192
22538     2E 2E 06 F6 | 	mov	local09, #46
2253c     16 5D 48 FC | 	wrbyte	#46, local08
22540                 | LR__3041
22540     18 4E 05 F1 | 	add	fp, #24
22544     A7 3A 02 FB | 	rdlong	local15, fp
22548     1D 35 02 F6 | 	mov	local12, local15
2254c     01 34 06 F1 | 	add	local12, #1
22550     A7 34 62 FC | 	wrlong	local12, fp
22554     18 4E 85 F1 | 	sub	fp, #24
22558     C4 FE 9F FD | 	jmp	#LR__3037
2255c                 | LR__3042
2255c                 | LR__3043
2255c     34 4E 05 F1 | 	add	fp, #52
22560     A7 1E 0A FB | 	rdlong	local01, fp wz
22564     34 4E 85 F1 | 	sub	fp, #52
22568     A0 00 90 AD |  if_e	jmp	#LR__3047
2256c     C0 4E 05 F1 | 	add	fp, #192
22570     A7 1E 02 FB | 	rdlong	local01, fp
22574     01 1E 86 F1 | 	sub	local01, #1
22578     A7 1E 62 FC | 	wrlong	local01, fp
2257c     C0 4E 85 F1 | 	sub	fp, #192
22580     97 26 48 FB | 	callpa	#(@LR__3045-@LR__3044)>>2,fcache_load_ptr_
22584                 | LR__3044
22584     C0 4E 05 F1 | 	add	fp, #192
22588     A7 1E 02 FB | 	rdlong	local01, fp
2258c     04 4E 05 F1 | 	add	fp, #4
22590     A7 22 02 FB | 	rdlong	local03, fp
22594     C4 4E 85 F1 | 	sub	fp, #196
22598     11 1F 5A F2 | 	cmps	local01, local03 wcz
2259c     30 00 90 ED |  if_be	jmp	#LR__3046
225a0     C0 4E 05 F1 | 	add	fp, #192
225a4     A7 28 02 FB | 	rdlong	local06, fp
225a8     C0 4E 85 F1 | 	sub	fp, #192
225ac     14 25 C2 FA | 	rdbyte	local04, local06
225b0     30 24 0E F2 | 	cmp	local04, #48 wz
225b4     18 00 90 5D |  if_ne	jmp	#LR__3046
225b8     C0 4E 05 F1 | 	add	fp, #192
225bc     A7 1E 02 FB | 	rdlong	local01, fp
225c0     01 1E 86 F1 | 	sub	local01, #1
225c4     A7 1E 62 FC | 	wrlong	local01, fp
225c8     C0 4E 85 F1 | 	sub	fp, #192
225cc     B4 FF 9F FD | 	jmp	#LR__3044
225d0                 | LR__3045
225d0                 | LR__3046
225d0     C0 4E 05 F1 | 	add	fp, #192
225d4     A7 20 02 FB | 	rdlong	local02, fp
225d8     C0 4E 85 F1 | 	sub	fp, #192
225dc     10 1F C2 FA | 	rdbyte	local01, local02
225e0     2E 1E 0E F2 | 	cmp	local01, #46 wz
225e4     C0 4E 05 A1 |  if_e	add	fp, #192
225e8     A7 1E 02 AB |  if_e	rdlong	local01, fp
225ec     01 1E 86 A1 |  if_e	sub	local01, #1
225f0     A7 1E 62 AC |  if_e	wrlong	local01, fp
225f4     C0 4E 85 A1 |  if_e	sub	fp, #192
225f8     C0 4E 05 F1 | 	add	fp, #192
225fc     A7 22 02 FB | 	rdlong	local03, fp
22600     01 22 06 F1 | 	add	local03, #1
22604     A7 22 62 FC | 	wrlong	local03, fp
22608     C0 4E 85 F1 | 	sub	fp, #192
2260c                 | LR__3047
2260c     24 4E 05 F1 | 	add	fp, #36
22610     A7 1E 0A FB | 	rdlong	local01, fp wz
22614     24 4E 85 F1 | 	sub	fp, #36
22618     B4 00 90 AD |  if_e	jmp	#LR__3050
2261c     C0 4E 05 F1 | 	add	fp, #192
22620     A7 20 02 FB | 	rdlong	local02, fp
22624     10 23 02 F6 | 	mov	local03, local02
22628     01 22 06 F1 | 	add	local03, #1
2262c     A7 22 62 FC | 	wrlong	local03, fp
22630     90 4E 85 F1 | 	sub	fp, #144
22634     A7 24 02 FB | 	rdlong	local04, fp
22638     10 25 42 FC | 	wrbyte	local04, local02
2263c     90 4E 05 F1 | 	add	fp, #144
22640     A7 20 02 FB | 	rdlong	local02, fp
22644     10 23 02 F6 | 	mov	local03, local02
22648     01 22 06 F1 | 	add	local03, #1
2264c     A7 22 62 FC | 	wrlong	local03, fp
22650     60 4E 85 F1 | 	sub	fp, #96
22654     A7 24 02 FB | 	rdlong	local04, fp
22658     10 25 42 FC | 	wrbyte	local04, local02
2265c     48 4E 85 F1 | 	sub	fp, #72
22660     A7 00 68 FC | 	wrlong	#0, fp
22664     18 4E 85 F1 | 	sub	fp, #24
22668                 | LR__3048
22668     18 4E 05 F1 | 	add	fp, #24
2266c     A7 20 02 FB | 	rdlong	local02, fp
22670     44 4E 05 F1 | 	add	fp, #68
22674     A7 26 02 FB | 	rdlong	local05, fp
22678     5C 4E 85 F1 | 	sub	fp, #92
2267c     13 21 52 F2 | 	cmps	local02, local05 wc
22680     4C 00 90 3D |  if_ae	jmp	#LR__3049
22684     C0 4E 05 F1 | 	add	fp, #192
22688     A7 2C 02 FB | 	rdlong	local08, fp
2268c     16 35 02 F6 | 	mov	local12, local08
22690     01 34 06 F1 | 	add	local12, #1
22694     A7 34 62 FC | 	wrlong	local12, fp
22698     A8 4E 85 F1 | 	sub	fp, #168
2269c     A7 2A 02 FB | 	rdlong	local07, fp
226a0     15 2F 02 F6 | 	mov	local09, local07
226a4     98 4E 05 F1 | 	add	fp, #152
226a8     A7 30 02 F6 | 	mov	local10, fp
226ac     A7 2E 02 F1 | 	add	local09, fp
226b0     17 33 C2 FA | 	rdbyte	local11, local09
226b4     16 33 42 FC | 	wrbyte	local11, local08
226b8     98 4E 85 F1 | 	sub	fp, #152
226bc     A7 34 02 FB | 	rdlong	local12, fp
226c0     01 34 06 F1 | 	add	local12, #1
226c4     A7 34 62 FC | 	wrlong	local12, fp
226c8     18 4E 85 F1 | 	sub	fp, #24
226cc     98 FF 9F FD | 	jmp	#LR__3048
226d0                 | LR__3049
226d0                 | LR__3050
226d0     C0 4E 05 F1 | 	add	fp, #192
226d4     A7 1E 02 FB | 	rdlong	local01, fp
226d8     C0 4E 85 F1 | 	sub	fp, #192
226dc     0F 01 48 FC | 	wrbyte	#0, local01
226e0                 | LR__3051
226e0     6C 4E 05 F1 | 	add	fp, #108
226e4     A7 1E 0A FB | 	rdlong	local01, fp wz
226e8     6C 4E 85 F1 | 	sub	fp, #108
226ec     90 01 90 AD |  if_e	jmp	#LR__3062
226f0     48 4E 05 F1 | 	add	fp, #72
226f4     A7 22 0A FB | 	rdlong	local03, fp wz
226f8     48 4E 85 F1 | 	sub	fp, #72
226fc     80 01 90 AD |  if_e	jmp	#LR__3062
22700     C4 4E 05 F1 | 	add	fp, #196
22704     A7 12 02 FB | 	rdlong	arg01, fp
22708     C4 4E 85 F1 | 	sub	fp, #196
2270c     09 3D 02 F6 | 	mov	local16, arg01
22710     97 06 48 FB | 	callpa	#(@LR__3053-@LR__3052)>>2,fcache_load_ptr_
22714                 | LR__3052
22714     1E FB C9 FA | 	rdbyte	result1, local16 wz
22718     01 3C 06 51 |  if_ne	add	local16, #1
2271c     F4 FF 9F 5D |  if_ne	jmp	#LR__3052
22720                 | LR__3053
22720     09 3D 82 F1 | 	sub	local16, arg01
22724     1E 25 02 F6 | 	mov	local04, local16
22728     6C 4E 05 F1 | 	add	fp, #108
2272c     A7 28 02 FB | 	rdlong	local06, fp
22730     6C 4E 85 F1 | 	sub	fp, #108
22734     14 25 5A F2 | 	cmps	local04, local06 wcz
22738     44 01 90 ED |  if_be	jmp	#LR__3062
2273c     C4 4E 05 F1 | 	add	fp, #196
22740     A7 1E 02 FB | 	rdlong	local01, fp
22744     5C 4E 05 F1 | 	add	fp, #92
22748     A7 1E 62 FC | 	wrlong	local01, fp
2274c     FC 4E 85 F1 | 	sub	fp, #252
22750     A7 1E 0A FB | 	rdlong	local01, fp wz
22754     24 4E 85 F1 | 	sub	fp, #36
22758     20 00 90 AD |  if_e	jmp	#LR__3054
2275c     B8 4E 05 F1 | 	add	fp, #184
22760     A7 00 68 FC | 	wrlong	#0, fp
22764     4C 4E 85 F1 | 	sub	fp, #76
22768     A7 1E 02 FB | 	rdlong	local01, fp
2276c     B0 4E 05 F1 | 	add	fp, #176
22770     A7 1E 62 FC | 	wrlong	local01, fp
22774     1C 4F 85 F1 | 	sub	fp, #284
22778     24 00 90 FD | 	jmp	#LR__3055
2277c                 | LR__3054
2277c     6C 4E 05 F1 | 	add	fp, #108
22780     A7 1E 02 FB | 	rdlong	local01, fp
22784     01 1E 86 F1 | 	sub	local01, #1
22788     4C 4E 05 F1 | 	add	fp, #76
2278c     A7 22 02 FB | 	rdlong	local03, fp
22790     11 1F 82 F1 | 	sub	local01, local03
22794     64 4E 05 F1 | 	add	fp, #100
22798     A7 1E 62 FC | 	wrlong	local01, fp
2279c     1C 4F 85 F1 | 	sub	fp, #284
227a0                 | LR__3055
227a0     97 20 48 FB | 	callpa	#(@LR__3057-@LR__3056)>>2,fcache_load_ptr_
227a4                 | LR__3056
227a4     1C 4F 05 F1 | 	add	fp, #284
227a8     A7 1E 0A FB | 	rdlong	local01, fp wz
227ac     1C 4F 85 F1 | 	sub	fp, #284
227b0     30 00 90 AD |  if_e	jmp	#LR__3058
227b4     20 4F 05 F1 | 	add	fp, #288
227b8     A7 20 02 FB | 	rdlong	local02, fp
227bc     10 23 02 F6 | 	mov	local03, local02
227c0     01 22 06 F1 | 	add	local03, #1
227c4     A7 22 62 FC | 	wrlong	local03, fp
227c8     10 55 48 FC | 	wrbyte	#42, local02
227cc     04 4E 85 F1 | 	sub	fp, #4
227d0     A7 1E 02 FB | 	rdlong	local01, fp
227d4     01 1E 86 F1 | 	sub	local01, #1
227d8     A7 1E 62 FC | 	wrlong	local01, fp
227dc     1C 4F 85 F1 | 	sub	fp, #284
227e0     C0 FF 9F FD | 	jmp	#LR__3056
227e4                 | LR__3057
227e4                 | LR__3058
227e4     B8 4E 05 F1 | 	add	fp, #184
227e8     A7 1E 0A FB | 	rdlong	local01, fp wz
227ec     B8 4E 85 F1 | 	sub	fp, #184
227f0     70 00 90 AD |  if_e	jmp	#LR__3061
227f4     20 4F 05 F1 | 	add	fp, #288
227f8     A7 20 02 FB | 	rdlong	local02, fp
227fc     10 23 02 F6 | 	mov	local03, local02
22800     01 22 06 F1 | 	add	local03, #1
22804     A7 22 62 FC | 	wrlong	local03, fp
22808     10 5D 48 FC | 	wrbyte	#46, local02
2280c     04 4E 85 F1 | 	sub	fp, #4
22810     A7 00 68 FC | 	wrlong	#0, fp
22814     1C 4F 85 F1 | 	sub	fp, #284
22818                 | LR__3059
22818     1C 4F 05 F1 | 	add	fp, #284
2281c     A7 20 02 FB | 	rdlong	local02, fp
22820     64 4E 85 F1 | 	sub	fp, #100
22824     A7 26 02 FB | 	rdlong	local05, fp
22828     B8 4E 85 F1 | 	sub	fp, #184
2282c     13 21 52 F2 | 	cmps	local02, local05 wc
22830     30 00 90 3D |  if_ae	jmp	#LR__3060
22834     20 4F 05 F1 | 	add	fp, #288
22838     A7 2C 02 FB | 	rdlong	local08, fp
2283c     16 35 02 F6 | 	mov	local12, local08
22840     01 34 06 F1 | 	add	local12, #1
22844     A7 34 62 FC | 	wrlong	local12, fp
22848     16 55 48 FC | 	wrbyte	#42, local08
2284c     04 4E 85 F1 | 	sub	fp, #4
22850     A7 34 02 FB | 	rdlong	local12, fp
22854     01 34 06 F1 | 	add	local12, #1
22858     A7 34 62 FC | 	wrlong	local12, fp
2285c     1C 4F 85 F1 | 	sub	fp, #284
22860     B4 FF 9F FD | 	jmp	#LR__3059
22864                 | LR__3060
22864                 | LR__3061
22864     20 4F 05 F1 | 	add	fp, #288
22868     A7 20 02 FB | 	rdlong	local02, fp
2286c     10 23 02 F6 | 	mov	local03, local02
22870     01 22 06 F1 | 	add	local03, #1
22874     A7 22 62 FC | 	wrlong	local03, fp
22878     20 4F 85 F1 | 	sub	fp, #288
2287c     10 01 48 FC | 	wrbyte	#0, local02
22880                 | LR__3062
22880     04 4E 05 F1 | 	add	fp, #4
22884     A7 12 02 FB | 	rdlong	arg01, fp
22888     04 4E 05 F1 | 	add	fp, #4
2288c     A7 14 02 FB | 	rdlong	arg02, fp
22890     BC 4E 05 F1 | 	add	fp, #188
22894     A7 16 02 FB | 	rdlong	arg03, fp
22898     C4 4E 85 F1 | 	sub	fp, #196
2289c     C4 EE BF FD | 	call	#__system___fmtstr
228a0                 | LR__3063
228a0     A7 F0 03 F6 | 	mov	ptra, fp
228a4     B2 00 A0 FD | 	call	#popregs_
228a8                 | __system___fmtfloat_ret
228a8     2D 00 64 FD | 	ret
228ac                 | 
228ac                 | __system__Left_S
228ac     04 4A 05 F6 | 	mov	COUNT_, #4
228b0     A8 00 A0 FD | 	call	#pushregs_
228b4     09 1F 02 F6 | 	mov	local01, arg01
228b8     0A 21 02 F6 | 	mov	local02, arg02
228bc     01 20 56 F2 | 	cmps	local02, #1 wc
228c0     80 01 00 CF 
228c4     82 FA 05 C6 |  if_b	mov	result1, ##@LR__4983
228c8     5C 00 90 CD |  if_b	jmp	#LR__3073
228cc     0F 13 02 F6 | 	mov	arg01, local01
228d0     09 23 02 F6 | 	mov	local03, arg01
228d4     97 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
228d8                 | LR__3070
228d8     11 FB C9 FA | 	rdbyte	result1, local03 wz
228dc     01 22 06 51 |  if_ne	add	local03, #1
228e0     F4 FF 9F 5D |  if_ne	jmp	#LR__3070
228e4                 | LR__3071
228e4     09 23 82 F1 | 	sub	local03, arg01
228e8     11 FB 01 F6 | 	mov	result1, local03
228ec     10 FB 59 F2 | 	cmps	result1, local02 wcz
228f0     0F FB 01 E6 |  if_be	mov	result1, local01
228f4     30 00 90 ED |  if_be	jmp	#LR__3073
228f8     10 13 02 F6 | 	mov	arg01, local02
228fc     02 12 06 F1 | 	add	arg01, #2
22900     08 1E B0 FD | 	call	#__system___gc_alloc_managed
22904     FD 24 0A F6 | 	mov	local04, result1 wz
22908     18 00 90 AD |  if_e	jmp	#LR__3072
2290c     12 13 02 F6 | 	mov	arg01, local04
22910     0F 15 02 F6 | 	mov	arg02, local01
22914     10 17 02 F6 | 	mov	arg03, local02
22918     34 DE BF FD | 	call	#__system____builtin_memmove
2291c     12 21 02 F1 | 	add	local02, local04
22920     10 01 48 FC | 	wrbyte	#0, local02
22924                 | LR__3072
22924     12 FB 01 F6 | 	mov	result1, local04
22928                 | LR__3073
22928     A7 F0 03 F6 | 	mov	ptra, fp
2292c     B2 00 A0 FD | 	call	#popregs_
22930                 | __system__Left_S_ret
22930     2D 00 64 FD | 	ret
22934                 | 
22934                 | __system__Right_S
22934     05 4A 05 F6 | 	mov	COUNT_, #5
22938     A8 00 A0 FD | 	call	#pushregs_
2293c     09 1F 02 F6 | 	mov	local01, arg01
22940     0A 21 02 F6 | 	mov	local02, arg02
22944     01 20 56 F2 | 	cmps	local02, #1 wc
22948     80 01 00 CF 
2294c     83 FA 05 C6 |  if_b	mov	result1, ##@LR__4984
22950     64 00 90 CD |  if_b	jmp	#LR__3083
22954     0F 13 02 F6 | 	mov	arg01, local01
22958     09 23 02 F6 | 	mov	local03, arg01
2295c     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
22960                 | LR__3080
22960     11 FB C9 FA | 	rdbyte	result1, local03 wz
22964     01 22 06 51 |  if_ne	add	local03, #1
22968     F4 FF 9F 5D |  if_ne	jmp	#LR__3080
2296c                 | LR__3081
2296c     09 23 82 F1 | 	sub	local03, arg01
22970     11 FB 01 F6 | 	mov	result1, local03
22974     FD 24 02 F6 | 	mov	local04, result1
22978     10 25 5A F2 | 	cmps	local04, local02 wcz
2297c     0F FB 01 E6 |  if_be	mov	result1, local01
22980     34 00 90 ED |  if_be	jmp	#LR__3083
22984     10 13 02 F6 | 	mov	arg01, local02
22988     02 12 06 F1 | 	add	arg01, #2
2298c     7C 1D B0 FD | 	call	#__system___gc_alloc_managed
22990     FD 26 0A F6 | 	mov	local05, result1 wz
22994     1C 00 90 AD |  if_e	jmp	#LR__3082
22998     10 25 82 F1 | 	sub	local04, local02
2299c     0F 25 02 F1 | 	add	local04, local01
229a0     01 20 06 F1 | 	add	local02, #1
229a4     13 13 02 F6 | 	mov	arg01, local05
229a8     12 15 02 F6 | 	mov	arg02, local04
229ac     10 17 02 F6 | 	mov	arg03, local02
229b0     9C DD BF FD | 	call	#__system____builtin_memmove
229b4                 | LR__3082
229b4     13 FB 01 F6 | 	mov	result1, local05
229b8                 | LR__3083
229b8     A7 F0 03 F6 | 	mov	ptra, fp
229bc     B2 00 A0 FD | 	call	#popregs_
229c0                 | __system__Right_S_ret
229c0     2D 00 64 FD | 	ret
229c4                 | 
229c4                 | __system__Mid_S
229c4     05 4A 05 F6 | 	mov	COUNT_, #5
229c8     A8 00 A0 FD | 	call	#pushregs_
229cc     09 1F 02 F6 | 	mov	local01, arg01
229d0     0A 21 02 F6 | 	mov	local02, arg02
229d4     01 16 56 F2 | 	cmps	arg03, #1 wc
229d8     80 01 00 CF 
229dc     84 FA 05 C6 |  if_b	mov	result1, ##@LR__4985
229e0     80 00 90 CD |  if_b	jmp	#LR__3093
229e4     01 20 86 F1 | 	sub	local02, #1
229e8     00 20 56 F3 | 	fges	local02, #0 wc
229ec     0F 13 02 F6 | 	mov	arg01, local01
229f0     09 23 02 F6 | 	mov	local03, arg01
229f4     97 06 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
229f8                 | LR__3090
229f8     11 FB C9 FA | 	rdbyte	result1, local03 wz
229fc     01 22 06 51 |  if_ne	add	local03, #1
22a00     F4 FF 9F 5D |  if_ne	jmp	#LR__3090
22a04                 | LR__3091
22a04     09 23 82 F1 | 	sub	local03, arg01
22a08     11 FB 01 F6 | 	mov	result1, local03
22a0c     FD 14 02 F6 | 	mov	arg02, result1
22a10     10 15 52 F2 | 	cmps	arg02, local02 wc
22a14     80 01 00 CF 
22a18     85 FA 05 C6 |  if_b	mov	result1, ##@LR__4986
22a1c     44 00 90 CD |  if_b	jmp	#LR__3093
22a20     0A 25 02 F6 | 	mov	local04, arg02
22a24     10 25 82 F1 | 	sub	local04, local02
22a28     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22a2c     0B 25 02 16 |  if_a	mov	local04, arg03
22a30     12 13 02 F6 | 	mov	arg01, local04
22a34     02 12 06 F1 | 	add	arg01, #2
22a38     D0 1C B0 FD | 	call	#__system___gc_alloc_managed
22a3c     FD 26 0A F6 | 	mov	local05, result1 wz
22a40     1C 00 90 AD |  if_e	jmp	#LR__3092
22a44     0F 21 02 F1 | 	add	local02, local01
22a48     13 13 02 F6 | 	mov	arg01, local05
22a4c     10 15 02 F6 | 	mov	arg02, local02
22a50     12 17 02 F6 | 	mov	arg03, local04
22a54     F8 DC BF FD | 	call	#__system____builtin_memmove
22a58     13 25 02 F1 | 	add	local04, local05
22a5c     12 01 48 FC | 	wrbyte	#0, local04
22a60                 | LR__3092
22a60     13 FB 01 F6 | 	mov	result1, local05
22a64                 | LR__3093
22a64     A7 F0 03 F6 | 	mov	ptra, fp
22a68     B2 00 A0 FD | 	call	#popregs_
22a6c                 | __system__Mid_S_ret
22a6c     2D 00 64 FD | 	ret
22a70                 | 
22a70                 | __system__Chr_S
22a70     01 4A 05 F6 | 	mov	COUNT_, #1
22a74     A8 00 A0 FD | 	call	#pushregs_
22a78     09 1F 02 F6 | 	mov	local01, arg01
22a7c     03 12 06 F6 | 	mov	arg01, #3
22a80     88 1C B0 FD | 	call	#__system___gc_alloc_managed
22a84     00 FA 4D F2 | 	cmps	result1, #0 wz
22a88     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22a8c     01 FA 05 51 |  if_ne	add	result1, #1
22a90     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22a94     01 FA 85 51 |  if_ne	sub	result1, #1
22a98     A7 F0 03 F6 | 	mov	ptra, fp
22a9c     B2 00 A0 FD | 	call	#popregs_
22aa0                 | __system__Chr_S_ret
22aa0     2D 00 64 FD | 	ret
22aa4                 | 
22aa4                 | __system__str_S
22aa4     02 4A 05 F6 | 	mov	COUNT_, #2
22aa8     A8 00 A0 FD | 	call	#pushregs_
22aac     09 1F 02 F6 | 	mov	local01, arg01
22ab0     10 12 06 F6 | 	mov	arg01, #16
22ab4     54 1C B0 FD | 	call	#__system___gc_alloc_managed
22ab8     FD 20 0A F6 | 	mov	local02, result1 wz
22abc     30 00 90 AD |  if_e	jmp	#LR__3100
22ac0     F8 13 02 F6 | 	mov	arg01, ptra
22ac4     08 F0 07 F1 | 	add	ptra, #8
22ac8     09 21 62 FC | 	wrlong	local02, arg01
22acc     04 12 06 F1 | 	add	arg01, #4
22ad0     09 01 68 FC | 	wrlong	#0, arg01
22ad4     04 12 86 F1 | 	sub	arg01, #4
22ad8     00 A0 04 FF 
22adc     00 12 46 F5 | 	or	arg01, ##155189248
22ae0     00 14 06 F6 | 	mov	arg02, #0
22ae4     0F 17 02 F6 | 	mov	arg03, local01
22ae8     67 18 06 F6 | 	mov	arg04, #103
22aec     90 EE BF FD | 	call	#__system___fmtfloat
22af0                 | LR__3100
22af0     10 FB 01 F6 | 	mov	result1, local02
22af4     A7 F0 03 F6 | 	mov	ptra, fp
22af8     B2 00 A0 FD | 	call	#popregs_
22afc                 | __system__str_S_ret
22afc     2D 00 64 FD | 	ret
22b00                 | 
22b00                 | __system__Number_S
22b00     08 4A 05 F6 | 	mov	COUNT_, #8
22b04     A8 00 A0 FD | 	call	#pushregs_
22b08     09 1F 02 F6 | 	mov	local01, arg01
22b0c     0A 21 0A F6 | 	mov	local02, arg02 wz
22b10     0B 23 02 F6 | 	mov	local03, arg03
22b14     3C 00 90 5D |  if_ne	jmp	#LR__3112
22b18     01 20 06 F6 | 	mov	local02, #1
22b1c     11 25 02 F6 | 	mov	local04, local03
22b20     01 26 06 F6 | 	mov	local05, #1
22b24     97 16 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
22b28                 | LR__3110
22b28     00 28 06 F6 | 	mov	local06, #0
22b2c     0F 25 1A F2 | 	cmp	local04, local01 wcz
22b30     01 28 66 E6 |  if_be	neg	local06, #1
22b34     12 27 12 F2 | 	cmp	local05, local04 wc
22b38     15 2B A2 F1 | 	subx	local07, local07
22b3c     15 29 CA F7 | 	test	local06, local07 wz
22b40     11 25 02 5D |  if_ne	qmul	local04, local03
22b44     12 27 02 56 |  if_ne	mov	local05, local04
22b48     01 20 06 51 |  if_ne	add	local02, #1
22b4c     18 24 62 5D |  if_ne	getqx	local04
22b50     D4 FF 9F 5D |  if_ne	jmp	#LR__3110
22b54                 | LR__3111
22b54                 | LR__3112
22b54     20 20 36 F3 | 	fle	local02, #32 wc
22b58     10 13 02 F6 | 	mov	arg01, local02
22b5c     02 12 06 F1 | 	add	arg01, #2
22b60     A8 1B B0 FD | 	call	#__system___gc_alloc_managed
22b64     FD 28 02 F6 | 	mov	local06, result1
22b68     10 2B 02 F6 | 	mov	local07, local02
22b6c     14 2B 02 F1 | 	add	local07, local06
22b70     15 01 48 FC | 	wrbyte	#0, local07
22b74     97 1A 48 FB | 	callpa	#(@LR__3114-@LR__3113)>>2,fcache_load_ptr_
22b78                 | LR__3113
22b78     01 20 16 F2 | 	cmp	local02, #1 wc
22b7c     2C 00 90 CD |  if_b	jmp	#LR__3115
22b80     11 1F 12 FD | 	qdiv	local01, local03
22b84     01 20 86 F1 | 	sub	local02, #1
22b88     10 2B 02 F6 | 	mov	local07, local02
22b8c     14 2B 02 F1 | 	add	local07, local06
22b90     19 2C 62 FD | 	getqy	local08
22b94     0A 2C 16 F2 | 	cmp	local08, #10 wc
22b98     30 2C 06 C1 |  if_b	add	local08, #48
22b9c     37 2C 06 31 |  if_ae	add	local08, #55
22ba0     15 2D 42 FC | 	wrbyte	local08, local07
22ba4     18 1E 62 FD | 	getqx	local01
22ba8     CC FF 9F FD | 	jmp	#LR__3113
22bac                 | LR__3114
22bac                 | LR__3115
22bac     14 FB 01 F6 | 	mov	result1, local06
22bb0     A7 F0 03 F6 | 	mov	ptra, fp
22bb4     B2 00 A0 FD | 	call	#popregs_
22bb8                 | __system__Number_S_ret
22bb8     2D 00 64 FD | 	ret
22bbc                 | 
22bbc                 | __system__LCase_S
22bbc     07 4A 05 F6 | 	mov	COUNT_, #7
22bc0     A8 00 A0 FD | 	call	#pushregs_
22bc4     09 1F 02 F6 | 	mov	local01, arg01
22bc8     09 21 02 F6 | 	mov	local02, arg01
22bcc     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
22bd0                 | LR__3120
22bd0     10 FB C9 FA | 	rdbyte	result1, local02 wz
22bd4     01 20 06 51 |  if_ne	add	local02, #1
22bd8     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
22bdc                 | LR__3121
22bdc     09 21 82 F1 | 	sub	local02, arg01
22be0     10 FB 01 F6 | 	mov	result1, local02
22be4     FD 20 0A F6 | 	mov	local02, result1 wz
22be8     80 01 00 AF 
22bec     86 FA 05 A6 |  if_e	mov	result1, ##@LR__4987
22bf0     7C 00 90 AD |  if_e	jmp	#LR__3127
22bf4     10 13 02 F6 | 	mov	arg01, local02
22bf8     02 12 06 F1 | 	add	arg01, #2
22bfc     0C 1B B0 FD | 	call	#__system___gc_alloc_managed
22c00     FD 22 0A F6 | 	mov	local03, result1 wz
22c04     64 00 90 AD |  if_e	jmp	#LR__3126
22c08     01 24 66 F6 | 	neg	local04, #1
22c0c     97 26 48 FB | 	callpa	#(@LR__3125-@LR__3122)>>2,fcache_load_ptr_
22c10                 | LR__3122
22c10     01 24 06 F1 | 	add	local04, #1
22c14     12 27 02 F6 | 	mov	local05, local04
22c18     0F 27 02 F1 | 	add	local05, local01
22c1c     13 29 C2 FA | 	rdbyte	local06, local05
22c20     41 28 56 F2 | 	cmps	local06, #65 wc
22c24     18 00 90 CD |  if_b	jmp	#LR__3123
22c28     5B 28 56 F2 | 	cmps	local06, #91 wc
22c2c     12 2B 02 C6 |  if_b	mov	local07, local04
22c30     11 2B 02 C1 |  if_b	add	local07, local03
22c34     20 28 06 C1 |  if_b	add	local06, #32
22c38     15 29 42 CC |  if_b	wrbyte	local06, local07
22c3c     0C 00 90 CD |  if_b	jmp	#LR__3124
22c40                 | LR__3123
22c40     12 2B 02 F6 | 	mov	local07, local04
22c44     11 2B 02 F1 | 	add	local07, local03
22c48     15 29 42 FC | 	wrbyte	local06, local07
22c4c                 | LR__3124
22c4c     10 29 02 F6 | 	mov	local06, local02
22c50     01 28 86 F1 | 	sub	local06, #1
22c54     14 25 0A F2 | 	cmp	local04, local06 wz
22c58     B4 FF 9F 5D |  if_ne	jmp	#LR__3122
22c5c                 | LR__3125
22c5c     11 21 02 F1 | 	add	local02, local03
22c60     10 01 48 FC | 	wrbyte	#0, local02
22c64     11 FB 01 F6 | 	mov	result1, local03
22c68     04 00 90 FD | 	jmp	#LR__3127
22c6c                 | LR__3126
22c6c     11 FB 01 F6 | 	mov	result1, local03
22c70                 | LR__3127
22c70     A7 F0 03 F6 | 	mov	ptra, fp
22c74     B2 00 A0 FD | 	call	#popregs_
22c78                 | __system__LCase_S_ret
22c78     2D 00 64 FD | 	ret
22c7c                 | 
22c7c                 | __system__LTrim_S
22c7c     05 4A 05 F6 | 	mov	COUNT_, #5
22c80     A8 00 A0 FD | 	call	#pushregs_
22c84     09 1F 02 F6 | 	mov	local01, arg01
22c88     09 21 02 F6 | 	mov	local02, arg01
22c8c     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
22c90                 | LR__3130
22c90     10 FB C9 FA | 	rdbyte	result1, local02 wz
22c94     01 20 06 51 |  if_ne	add	local02, #1
22c98     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
22c9c                 | LR__3131
22c9c     09 21 82 F1 | 	sub	local02, arg01
22ca0     10 FB 01 F6 | 	mov	result1, local02
22ca4     FD 20 0A F6 | 	mov	local02, result1 wz
22ca8     80 01 00 AF 
22cac     87 FA 05 A6 |  if_e	mov	result1, ##@LR__4988
22cb0     7C 00 90 AD |  if_e	jmp	#LR__3136
22cb4     00 22 06 F6 | 	mov	local03, #0
22cb8     10 25 02 F6 | 	mov	local04, local02
22cbc                 | LR__3132
22cbc     12 23 52 F2 | 	cmps	local03, local04 wc
22cc0     68 00 90 3D |  if_ae	jmp	#LR__3135
22cc4     11 17 02 F6 | 	mov	arg03, local03
22cc8     0F 17 02 F1 | 	add	arg03, local01
22ccc     0B 17 C2 FA | 	rdbyte	arg03, arg03
22cd0     20 16 0E F2 | 	cmp	arg03, #32 wz
22cd4     4C 00 90 AD |  if_e	jmp	#LR__3134
22cd8     10 13 02 F6 | 	mov	arg01, local02
22cdc     11 13 82 F1 | 	sub	arg01, local03
22ce0     02 12 06 F1 | 	add	arg01, #2
22ce4     24 1A B0 FD | 	call	#__system___gc_alloc_managed
22ce8     FD 26 0A F6 | 	mov	local05, result1 wz
22cec     2C 00 90 AD |  if_e	jmp	#LR__3133
22cf0     11 15 02 F6 | 	mov	arg02, local03
22cf4     0F 15 02 F1 | 	add	arg02, local01
22cf8     10 17 02 F6 | 	mov	arg03, local02
22cfc     11 17 82 F1 | 	sub	arg03, local03
22d00     13 13 02 F6 | 	mov	arg01, local05
22d04     48 DA BF FD | 	call	#__system____builtin_memmove
22d08     11 21 82 F1 | 	sub	local02, local03
22d0c     13 21 02 F1 | 	add	local02, local05
22d10     10 01 48 FC | 	wrbyte	#0, local02
22d14     13 FB 01 F6 | 	mov	result1, local05
22d18     14 00 90 FD | 	jmp	#LR__3136
22d1c                 | LR__3133
22d1c     13 FB 01 F6 | 	mov	result1, local05
22d20     0C 00 90 FD | 	jmp	#LR__3136
22d24                 | LR__3134
22d24     01 22 06 F1 | 	add	local03, #1
22d28     90 FF 9F FD | 	jmp	#LR__3132
22d2c                 | LR__3135
22d2c     0F FB 01 F6 | 	mov	result1, local01
22d30                 | LR__3136
22d30     A7 F0 03 F6 | 	mov	ptra, fp
22d34     B2 00 A0 FD | 	call	#popregs_
22d38                 | __system__LTrim_S_ret
22d38     2D 00 64 FD | 	ret
22d3c                 | 
22d3c                 | __system__RTrim_S
22d3c     04 4A 05 F6 | 	mov	COUNT_, #4
22d40     A8 00 A0 FD | 	call	#pushregs_
22d44     09 1F 02 F6 | 	mov	local01, arg01
22d48     09 21 02 F6 | 	mov	local02, arg01
22d4c     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
22d50                 | LR__3140
22d50     10 FB C9 FA | 	rdbyte	result1, local02 wz
22d54     01 20 06 51 |  if_ne	add	local02, #1
22d58     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
22d5c                 | LR__3141
22d5c     09 21 82 F1 | 	sub	local02, arg01
22d60     10 FB 01 F6 | 	mov	result1, local02
22d64     FD 20 0A F6 | 	mov	local02, result1 wz
22d68     80 01 00 AF 
22d6c     88 FA 05 A6 |  if_e	mov	result1, ##@LR__4989
22d70     74 00 90 AD |  if_e	jmp	#LR__3145
22d74     10 23 02 F6 | 	mov	local03, local02
22d78     01 22 86 F1 | 	sub	local03, #1
22d7c                 | LR__3142
22d7c     11 15 02 F6 | 	mov	arg02, local03
22d80     0F 15 02 F1 | 	add	arg02, local01
22d84     0A 21 C2 FA | 	rdbyte	local02, arg02
22d88     20 20 0E F2 | 	cmp	local02, #32 wz
22d8c     44 00 90 AD |  if_e	jmp	#LR__3144
22d90     11 13 02 F6 | 	mov	arg01, local03
22d94     02 12 06 F1 | 	add	arg01, #2
22d98     70 19 B0 FD | 	call	#__system___gc_alloc_managed
22d9c     FD 24 0A F6 | 	mov	local04, result1 wz
22da0     28 00 90 AD |  if_e	jmp	#LR__3143
22da4     11 17 02 F6 | 	mov	arg03, local03
22da8     01 16 06 F1 | 	add	arg03, #1
22dac     12 13 02 F6 | 	mov	arg01, local04
22db0     0F 15 02 F6 | 	mov	arg02, local01
22db4     98 D9 BF FD | 	call	#__system____builtin_memmove
22db8     01 22 06 F1 | 	add	local03, #1
22dbc     12 23 02 F1 | 	add	local03, local04
22dc0     11 01 48 FC | 	wrbyte	#0, local03
22dc4     12 FB 01 F6 | 	mov	result1, local04
22dc8     1C 00 90 FD | 	jmp	#LR__3145
22dcc                 | LR__3143
22dcc     12 FB 01 F6 | 	mov	result1, local04
22dd0     14 00 90 FD | 	jmp	#LR__3145
22dd4                 | LR__3144
22dd4     01 22 86 F1 | 	sub	local03, #1
22dd8     00 22 56 F2 | 	cmps	local03, #0 wc
22ddc     9C FF 9F 3D |  if_ae	jmp	#LR__3142
22de0     80 01 00 FF 
22de4     89 FA 05 F6 | 	mov	result1, ##@LR__4990
22de8                 | LR__3145
22de8     A7 F0 03 F6 | 	mov	ptra, fp
22dec     B2 00 A0 FD | 	call	#popregs_
22df0                 | __system__RTrim_S_ret
22df0     2D 00 64 FD | 	ret
22df4                 | 
22df4                 | __system__Instr
22df4     07 4A 05 F6 | 	mov	COUNT_, #7
22df8     A8 00 A0 FD | 	call	#pushregs_
22dfc     09 1F 02 F6 | 	mov	local01, arg01
22e00     0A 21 02 F6 | 	mov	local02, arg02
22e04     0B 23 02 F6 | 	mov	local03, arg03
22e08     11 13 02 F6 | 	mov	arg01, local03
22e0c     09 25 02 F6 | 	mov	local04, arg01
22e10     97 06 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22e14                 | LR__3150
22e14     12 FB C9 FA | 	rdbyte	result1, local04 wz
22e18     01 24 06 51 |  if_ne	add	local04, #1
22e1c     F4 FF 9F 5D |  if_ne	jmp	#LR__3150
22e20                 | LR__3151
22e20     09 25 82 F1 | 	sub	local04, arg01
22e24     12 27 02 F6 | 	mov	local05, local04
22e28     10 13 02 F6 | 	mov	arg01, local02
22e2c     09 25 02 F6 | 	mov	local04, arg01
22e30     97 06 48 FB | 	callpa	#(@LR__3153-@LR__3152)>>2,fcache_load_ptr_
22e34                 | LR__3152
22e34     12 FB C9 FA | 	rdbyte	result1, local04 wz
22e38     01 24 06 51 |  if_ne	add	local04, #1
22e3c     F4 FF 9F 5D |  if_ne	jmp	#LR__3152
22e40                 | LR__3153
22e40     09 25 82 F1 | 	sub	local04, arg01
22e44     12 FB 01 F6 | 	mov	result1, local04
22e48     FD 18 0A F6 | 	mov	arg04, result1 wz
22e4c     00 FA 05 A6 |  if_e	mov	result1, #0
22e50     98 00 90 AD |  if_e	jmp	#LR__3157
22e54     00 26 0E F2 | 	cmp	local05, #0 wz
22e58     00 FA 05 A6 |  if_e	mov	result1, #0
22e5c     8C 00 90 AD |  if_e	jmp	#LR__3157
22e60     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
22e64     00 FA 05 16 |  if_a	mov	result1, #0
22e68     80 00 90 1D |  if_a	jmp	#LR__3157
22e6c     01 1E 56 F2 | 	cmps	local01, #1 wc
22e70     01 1E 06 C6 |  if_b	mov	local01, #1
22e74     11 29 C2 FA | 	rdbyte	local06, local03
22e78     01 26 0E F2 | 	cmp	local05, #1 wz
22e7c     18 00 90 5D |  if_ne	jmp	#LR__3154
22e80     10 13 02 F6 | 	mov	arg01, local02
22e84     14 15 02 F6 | 	mov	arg02, local06
22e88     0F 17 02 F6 | 	mov	arg03, local01
22e8c     00 18 06 F6 | 	mov	arg04, #0
22e90     50 34 B0 FD | 	call	#__system____ScanForChar
22e94     54 00 90 FD | 	jmp	#LR__3157
22e98                 | LR__3154
22e98     0F 2B 02 F6 | 	mov	local07, local01
22e9c                 | LR__3155
22e9c     10 13 02 F6 | 	mov	arg01, local02
22ea0     14 15 02 F6 | 	mov	arg02, local06
22ea4     15 17 02 F6 | 	mov	arg03, local07
22ea8     00 18 06 F6 | 	mov	arg04, #0
22eac     34 34 B0 FD | 	call	#__system____ScanForChar
22eb0     FD 2A 0A F6 | 	mov	local07, result1 wz
22eb4     30 00 90 AD |  if_e	jmp	#LR__3156
22eb8     13 17 02 F6 | 	mov	arg03, local05
22ebc     10 13 02 F6 | 	mov	arg01, local02
22ec0     15 15 02 F6 | 	mov	arg02, local07
22ec4     FC FA BF FD | 	call	#__system__Mid_S
22ec8     FD 12 02 F6 | 	mov	arg01, result1
22ecc     11 15 02 F6 | 	mov	arg02, local03
22ed0     84 D9 BF FD | 	call	#__system___string_cmp
22ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
22ed8     15 FB 01 A6 |  if_e	mov	result1, local07
22edc     0C 00 90 AD |  if_e	jmp	#LR__3157
22ee0     13 2B 02 F1 | 	add	local07, local05
22ee4     B4 FF 9F FD | 	jmp	#LR__3155
22ee8                 | LR__3156
22ee8     00 FA 05 F6 | 	mov	result1, #0
22eec                 | LR__3157
22eec     A7 F0 03 F6 | 	mov	ptra, fp
22ef0     B2 00 A0 FD | 	call	#popregs_
22ef4                 | __system__Instr_ret
22ef4     2D 00 64 FD | 	ret
22ef8                 | 
22ef8                 | __system___strerror
22ef8     00 12 56 F2 | 	cmps	arg01, #0 wc
22efc     08 00 90 CD |  if_b	jmp	#LR__3160
22f00     1A 12 56 F2 | 	cmps	arg01, #26 wc
22f04     04 00 90 CD |  if_b	jmp	#LR__3161
22f08                 | LR__3160
22f08     19 12 06 F6 | 	mov	arg01, #25
22f0c                 | LR__3161
22f0c     02 12 66 F0 | 	shl	arg01, #2
22f10     01 00 00 FF 
22f14     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
22f18     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22f1c     09 FB 01 FB | 	rdlong	result1, arg01
22f20     01 00 00 FF 
22f24     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
22f28                 | __system___strerror_ret
22f28     2D 00 64 FD | 	ret
22f2c                 | 
22f2c                 | __system___int64_shl
22f2c     20 16 CE F7 | 	test	arg03, #32 wz
22f30     09 15 02 56 |  if_ne	mov	arg02, arg01
22f34     00 12 06 56 |  if_ne	mov	arg01, #0
22f38     1F 16 CE F7 | 	test	arg03, #31 wz
22f3c     18 00 90 AD |  if_e	jmp	#LR__3170
22f40     0B 15 62 F0 | 	shl	arg02, arg03
22f44     09 FB 01 F6 | 	mov	result1, arg01
22f48     0B FD 61 F6 | 	neg	result2, arg03
22f4c     FE FA 41 F0 | 	shr	result1, result2
22f50     FD 14 42 F5 | 	or	arg02, result1
22f54     0B 13 62 F0 | 	shl	arg01, arg03
22f58                 | LR__3170
22f58     0A FD 01 F6 | 	mov	result2, arg02
22f5c     09 FB 01 F6 | 	mov	result1, arg01
22f60                 | __system___int64_shl_ret
22f60     2D 00 64 FD | 	ret
22f64                 | 
22f64                 | __system___usepins
22f64     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22f68     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22f6c     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
22f70     00 13 CA F7 | 	test	arg01, _var01 wz
22f74     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
22f78     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
22f7c     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
22f80     01 15 CA A7 |  if_e	test	arg02, _var02 wz
22f84     00 FA 05 56 |  if_ne	mov	result1, #0
22f88     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
22f8c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22f90     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
22f94     09 03 42 F5 | 	or	_var02, arg01
22f98     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22f9c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22fa0     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
22fa4     0A 03 42 F5 | 	or	_var02, arg02
22fa8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22fac     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
22fb0     01 FA 65 F6 | 	neg	result1, #1
22fb4                 | __system___usepins_ret
22fb4     2D 00 64 FD | 	ret
22fb8                 | 
22fb8                 | __system___freepins
22fb8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22fbc     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22fc0     09 01 22 F5 | 	andn	_var01, arg01
22fc4     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
22fc8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22fcc     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22fd0     0A 01 22 F5 | 	andn	_var01, arg02
22fd4     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
22fd8     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
22fdc                 | __system___freepins_ret
22fdc     2D 00 64 FD | 	ret
22fe0                 | 
22fe0                 | __system___float_fromuns
22fe0     09 17 0A F6 | 	mov	arg03, arg01 wz
22fe4     0B FB 01 A6 |  if_e	mov	result1, arg03
22fe8     24 00 90 AD |  if_e	jmp	#LR__3180
22fec     0B 15 92 F7 | 	encod	arg02, arg03 wc
22ff0     01 14 06 C1 |  if_b	add	arg02, #1
22ff4     01 14 86 F1 | 	sub	arg02, #1
22ff8     1F 12 06 F6 | 	mov	arg01, #31
22ffc     0A 13 82 F1 | 	sub	arg01, arg02
23000     09 17 62 F0 | 	shl	arg03, arg01
23004     02 16 46 F0 | 	shr	arg03, #2
23008     00 12 06 F6 | 	mov	arg01, #0
2300c     4C 09 B0 FD | 	call	#__system___float_Pack
23010                 | LR__3180
23010                 | __system___float_fromuns_ret
23010     2D 00 64 FD | 	ret
23014                 | 
23014                 | __system___float_add
23014     0F 4A 05 F6 | 	mov	COUNT_, #15
23018     A8 00 A0 FD | 	call	#pushregs_
2301c     09 1F 02 F6 | 	mov	local01, arg01
23020     0A 21 02 F6 | 	mov	local02, arg02
23024     00 22 06 F6 | 	mov	local03, #0
23028     0F 25 02 F6 | 	mov	local04, local01
2302c     12 27 02 F6 | 	mov	local05, local04
23030     16 26 46 F7 | 	zerox	local05, #22
23034     12 29 02 F6 | 	mov	local06, local04
23038     01 28 66 F0 | 	shl	local06, #1
2303c     18 28 46 F0 | 	shr	local06, #24
23040     1F 24 46 F0 | 	shr	local04, #31
23044     10 13 02 F6 | 	mov	arg01, local02
23048     09 FB 01 F6 | 	mov	result1, arg01
2304c     FD 2A 02 F6 | 	mov	local07, result1
23050     15 2D 02 F6 | 	mov	local08, local07
23054     16 2C 46 F7 | 	zerox	local08, #22
23058     15 2F 02 F6 | 	mov	local09, local07
2305c     01 2E 66 F0 | 	shl	local09, #1
23060     18 2E 46 F0 | 	shr	local09, #24
23064     17 31 02 F6 | 	mov	local10, local09
23068     1F 2A 46 F0 | 	shr	local07, #31
2306c     00 32 06 F6 | 	mov	local11, #0
23070     00 34 06 F6 | 	mov	local12, #0
23074     18 29 12 F2 | 	cmp	local06, local10 wc
23078     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
2307c     2C 00 90 1D |  if_a	jmp	#LR__3190
23080     16 27 12 32 |  if_ae	cmp	local05, local08 wc
23084     24 00 90 3D |  if_ae	jmp	#LR__3190
23088     13 37 02 F6 | 	mov	local13, local05
2308c     16 27 02 F6 | 	mov	local05, local08
23090     1B 2D 02 F6 | 	mov	local08, local13
23094     14 37 02 F6 | 	mov	local13, local06
23098     18 29 02 F6 | 	mov	local06, local10
2309c     1B 31 02 F6 | 	mov	local10, local13
230a0     12 37 02 F6 | 	mov	local13, local04
230a4     15 25 02 F6 | 	mov	local04, local07
230a8     1B 2B 02 F6 | 	mov	local07, local13
230ac                 | LR__3190
230ac     FF 28 0E F2 | 	cmp	local06, #255 wz
230b0     70 01 90 AD |  if_e	jmp	#LR__3205
230b4     00 28 0E F2 | 	cmp	local06, #0 wz
230b8     AC 01 90 AD |  if_e	jmp	#LR__3207
230bc     17 26 26 F4 | 	bith	local05, #23
230c0                 | LR__3191
230c0     00 30 0E F2 | 	cmp	local10, #0 wz
230c4     F0 01 90 AD |  if_e	jmp	#LR__3211
230c8     17 2C 26 F4 | 	bith	local08, #23
230cc                 | LR__3192
230cc     7F 28 86 F1 | 	sub	local06, #127
230d0     7F 30 86 F1 | 	sub	local10, #127
230d4     14 39 02 F6 | 	mov	local14, local06
230d8     18 39 82 F1 | 	sub	local14, local10
230dc     97 14 48 FB | 	callpa	#(@LR__3194-@LR__3193)>>2,fcache_load_ptr_
230e0                 | LR__3193
230e0     20 38 56 F2 | 	cmps	local14, #32 wc
230e4     20 00 90 CD |  if_b	jmp	#LR__3195
230e8     16 2F 02 F6 | 	mov	local09, local08
230ec     00 32 0E F2 | 	cmp	local11, #0 wz
230f0     6F 32 62 FD | 	wrnz	local11
230f4     19 2F 42 F5 | 	or	local09, local11
230f8     17 33 02 F6 | 	mov	local11, local09
230fc     00 2C 06 F6 | 	mov	local08, #0
23100     20 38 86 F1 | 	sub	local14, #32
23104     D8 FF 9F FD | 	jmp	#LR__3193
23108                 | LR__3194
23108                 | LR__3195
23108     00 38 0E F2 | 	cmp	local14, #0 wz
2310c     38 00 90 AD |  if_e	jmp	#LR__3196
23110     16 37 02 F6 | 	mov	local13, local08
23114     20 30 06 F6 | 	mov	local10, #32
23118     1C 31 82 F1 | 	sub	local10, local14
2311c     18 37 62 F0 | 	shl	local13, local10
23120     19 31 02 F6 | 	mov	local10, local11
23124     20 2E 06 F6 | 	mov	local09, #32
23128     1C 2F 82 F1 | 	sub	local09, local14
2312c     17 31 6A F0 | 	shl	local10, local09 wz
23130     1C 33 42 F0 | 	shr	local11, local14
23134     1C 2D 42 F0 | 	shr	local08, local14
23138     1B 33 42 F5 | 	or	local11, local13
2313c     00 3A 06 F6 | 	mov	local15, #0
23140     01 3A 06 56 |  if_ne	mov	local15, #1
23144     1D 33 42 F5 | 	or	local11, local15
23148                 | LR__3196
23148     12 3B 02 F6 | 	mov	local15, local04
2314c     15 3B 62 F5 | 	xor	local15, local07
23150     01 3A CE F7 | 	test	local15, #1 wz
23154     18 00 90 AD |  if_e	jmp	#LR__3197
23158     16 2D 22 F6 | 	not	local08, local08
2315c     19 33 22 F6 | 	not	local11, local11
23160     01 32 0E F1 | 	add	local11, #1 wz
23164     00 3A 06 F6 | 	mov	local15, #0
23168     01 3A 06 A6 |  if_e	mov	local15, #1
2316c     1D 2D 02 F1 | 	add	local08, local15
23170                 | LR__3197
23170     19 35 12 F1 | 	add	local12, local11 wc
23174     16 27 22 F1 | 	addx	local05, local08
23178     00 26 56 F2 | 	cmps	local05, #0 wc
2317c     1C 00 90 3D |  if_ae	jmp	#LR__3198
23180     01 24 66 F5 | 	xor	local04, #1
23184     13 27 22 F6 | 	not	local05, local05
23188     1A 35 22 F6 | 	not	local12, local12
2318c     01 34 0E F1 | 	add	local12, #1 wz
23190     00 3A 06 F6 | 	mov	local15, #0
23194     01 3A 06 A6 |  if_e	mov	local15, #1
23198     1D 27 02 F1 | 	add	local05, local15
2319c                 | LR__3198
2319c     00 80 00 FF 
231a0     00 26 16 F2 | 	cmp	local05, ##16777216 wc
231a4     28 00 90 CD |  if_b	jmp	#LR__3199
231a8     01 28 06 F1 | 	add	local06, #1
231ac     1A 39 02 F6 | 	mov	local14, local12
231b0     01 38 06 F5 | 	and	local14, #1
231b4     01 34 46 F0 | 	shr	local12, #1
231b8     13 3B 02 F6 | 	mov	local15, local05
231bc     1F 3A 66 F0 | 	shl	local15, #31
231c0     1D 35 42 F5 | 	or	local12, local15
231c4     1C 35 42 F5 | 	or	local12, local14
231c8     01 26 46 F0 | 	shr	local05, #1
231cc     3C 00 90 FD | 	jmp	#LR__3204
231d0                 | LR__3199
231d0     00 40 00 FF 
231d4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
231d8     30 00 90 3D |  if_ae	jmp	#LR__3203
231dc     00 26 0E F2 | 	cmp	local05, #0 wz
231e0     00 34 0E A2 |  if_e	cmp	local12, #0 wz
231e4     08 24 46 A5 |  if_e	or	local04, #8
231e8     01 24 26 A5 |  if_e	andn	local04, #1
231ec     1C 00 90 AD |  if_e	jmp	#LR__3202
231f0                 | LR__3200
231f0     00 40 00 FF 
231f4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
231f8     10 00 90 3D |  if_ae	jmp	#LR__3201
231fc     1A 35 12 F1 | 	add	local12, local12 wc
23200     13 27 22 F1 | 	addx	local05, local05
23204     01 28 86 F1 | 	sub	local06, #1
23208     E4 FF 9F FD | 	jmp	#LR__3200
2320c                 | LR__3201
2320c                 | LR__3202
2320c                 | LR__3203
2320c                 | LR__3204
2320c     13 13 02 F6 | 	mov	arg01, local05
23210     1A 15 02 F6 | 	mov	arg02, local12
23214     14 17 02 F6 | 	mov	arg03, local06
23218     12 19 02 F6 | 	mov	arg04, local04
2321c     08 35 B0 FD | 	call	#__system__pack_0607
23220     DC 00 90 FD | 	jmp	#LR__3215
23224                 | LR__3205
23224     FF 30 0E F2 | 	cmp	local10, #255 wz
23228     10 00 90 5D |  if_ne	jmp	#LR__3206
2322c     12 2B 0A F2 | 	cmp	local07, local04 wz
23230     00 F8 3F 5F 
23234     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23238     C4 00 90 5D |  if_ne	jmp	#LR__3215
2323c                 | LR__3206
2323c     00 26 0E F2 | 	cmp	local05, #0 wz
23240     00 F8 3F 5F 
23244     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23248     B4 00 90 5D |  if_ne	jmp	#LR__3215
2324c     1A 15 02 F6 | 	mov	arg02, local12
23250     14 17 02 F6 | 	mov	arg03, local06
23254     12 19 02 F6 | 	mov	arg04, local04
23258     02 18 46 F5 | 	or	arg04, #2
2325c     13 13 02 F6 | 	mov	arg01, local05
23260     C4 34 B0 FD | 	call	#__system__pack_0607
23264     98 00 90 FD | 	jmp	#LR__3215
23268                 | LR__3207
23268     00 26 0E F2 | 	cmp	local05, #0 wz
2326c     28 00 90 AD |  if_e	jmp	#LR__3210
23270     01 26 66 F0 | 	shl	local05, #1
23274     97 0E 48 FB | 	callpa	#(@LR__3209-@LR__3208)>>2,fcache_load_ptr_
23278                 | LR__3208
23278     00 40 00 FF 
2327c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23280     14 3B 02 C6 |  if_b	mov	local15, local06
23284     01 3A 86 C1 |  if_b	sub	local15, #1
23288     1D 29 02 C6 |  if_b	mov	local06, local15
2328c     01 26 66 C0 |  if_b	shl	local05, #1
23290     E4 FF 9F CD |  if_b	jmp	#LR__3208
23294                 | LR__3209
23294     28 FE 9F FD | 	jmp	#LR__3191
23298                 | LR__3210
23298     15 25 02 F5 | 	and	local04, local07
2329c     12 19 02 F6 | 	mov	arg04, local04
232a0     08 18 46 F5 | 	or	arg04, #8
232a4     00 12 06 F6 | 	mov	arg01, #0
232a8     00 14 06 F6 | 	mov	arg02, #0
232ac     00 16 06 F6 | 	mov	arg03, #0
232b0     74 34 B0 FD | 	call	#__system__pack_0607
232b4     48 00 90 FD | 	jmp	#LR__3215
232b8                 | LR__3211
232b8     00 2C 0E F2 | 	cmp	local08, #0 wz
232bc     28 00 90 AD |  if_e	jmp	#LR__3214
232c0     01 2C 66 F0 | 	shl	local08, #1
232c4     97 0E 48 FB | 	callpa	#(@LR__3213-@LR__3212)>>2,fcache_load_ptr_
232c8                 | LR__3212
232c8     00 40 00 FF 
232cc     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
232d0     18 3B 02 C6 |  if_b	mov	local15, local10
232d4     01 3A 86 C1 |  if_b	sub	local15, #1
232d8     1D 31 02 C6 |  if_b	mov	local10, local15
232dc     01 2C 66 C0 |  if_b	shl	local08, #1
232e0     E4 FF 9F CD |  if_b	jmp	#LR__3212
232e4                 | LR__3213
232e4     E4 FD 9F FD | 	jmp	#LR__3192
232e8                 | LR__3214
232e8     7F 28 86 F1 | 	sub	local06, #127
232ec     13 13 02 F6 | 	mov	arg01, local05
232f0     1A 15 02 F6 | 	mov	arg02, local12
232f4     14 17 02 F6 | 	mov	arg03, local06
232f8     12 19 02 F6 | 	mov	arg04, local04
232fc     28 34 B0 FD | 	call	#__system__pack_0607
23300                 | LR__3215
23300     A7 F0 03 F6 | 	mov	ptra, fp
23304     B2 00 A0 FD | 	call	#popregs_
23308                 | __system___float_add_ret
23308     2D 00 64 FD | 	ret
2330c                 | 
2330c                 | __system___float_sqrt
2330c     04 4A 05 F6 | 	mov	COUNT_, #4
23310     A8 00 A0 FD | 	call	#pushregs_
23314     09 1F 02 F6 | 	mov	local01, arg01
23318     09 FB 01 F6 | 	mov	result1, arg01
2331c     FD 20 02 F6 | 	mov	local02, result1
23320     10 23 02 F6 | 	mov	local03, local02
23324     16 22 46 F7 | 	zerox	local03, #22
23328     10 25 02 F6 | 	mov	local04, local02
2332c     01 24 66 F0 | 	shl	local04, #1
23330     18 24 4E F0 | 	shr	local04, #24 wz
23334     1F 20 46 F0 | 	shr	local02, #31
23338     70 00 90 AD |  if_e	jmp	#LR__3221
2333c     17 22 26 F4 | 	bith	local03, #23
23340                 | LR__3220
23340     00 20 0E F2 | 	cmp	local02, #0 wz
23344     00 F8 3F 5F 
23348     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2334c     88 00 90 5D |  if_ne	jmp	#LR__3224
23350     FF 24 0E F2 | 	cmp	local04, #255 wz
23354     0F FB 01 A6 |  if_e	mov	result1, local01
23358     7C 00 90 AD |  if_e	jmp	#LR__3224
2335c     7F 24 86 F1 | 	sub	local04, #127
23360     01 24 CE F7 | 	test	local04, #1 wz
23364     01 22 66 50 |  if_ne	shl	local03, #1
23368     05 22 66 F0 | 	shl	local03, #5
2336c     11 01 38 FD | 	qsqrt	#0, local03
23370     01 24 86 51 |  if_ne	sub	local04, #1
23374     12 25 52 F6 | 	abs	local04, local04 wc
23378     01 24 46 F0 | 	shr	local04, #1
2337c     12 17 82 F6 | 	negc	arg03, local04
23380     10 19 02 F6 | 	mov	arg04, local02
23384     18 12 62 FD | 	getqx	arg01
23388     09 15 02 F6 | 	mov	arg02, arg01
2338c     19 14 66 F0 | 	shl	arg02, #25
23390     07 12 46 F0 | 	shr	arg01, #7
23394     00 80 00 FF 
23398     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
2339c     01 16 06 31 |  if_ae	add	arg03, #1
233a0     01 12 46 30 |  if_ae	shr	arg01, #1
233a4     80 33 B0 FD | 	call	#__system__pack_0607
233a8     2C 00 90 FD | 	jmp	#LR__3224
233ac                 | LR__3221
233ac     00 22 0E F2 | 	cmp	local03, #0 wz
233b0     0F FB 01 A6 |  if_e	mov	result1, local01
233b4     20 00 90 AD |  if_e	jmp	#LR__3224
233b8     01 22 66 F0 | 	shl	local03, #1
233bc     97 0A 48 FB | 	callpa	#(@LR__3223-@LR__3222)>>2,fcache_load_ptr_
233c0                 | LR__3222
233c0     00 40 00 FF 
233c4     00 22 16 F2 | 	cmp	local03, ##8388608 wc
233c8     01 24 86 C1 |  if_b	sub	local04, #1
233cc     01 22 66 C0 |  if_b	shl	local03, #1
233d0     EC FF 9F CD |  if_b	jmp	#LR__3222
233d4                 | LR__3223
233d4     68 FF 9F FD | 	jmp	#LR__3220
233d8                 | LR__3224
233d8     A7 F0 03 F6 | 	mov	ptra, fp
233dc     B2 00 A0 FD | 	call	#popregs_
233e0                 | __system___float_sqrt_ret
233e0     2D 00 64 FD | 	ret
233e4                 | 
233e4                 | __system___float_mul
233e4     0B 4A 05 F6 | 	mov	COUNT_, #11
233e8     A8 00 A0 FD | 	call	#pushregs_
233ec     09 1F 02 F6 | 	mov	local01, arg01
233f0     0A 21 02 F6 | 	mov	local02, arg02
233f4     0F 23 02 F6 | 	mov	local03, local01
233f8     11 25 02 F6 | 	mov	local04, local03
233fc     16 24 46 F7 | 	zerox	local04, #22
23400     11 27 02 F6 | 	mov	local05, local03
23404     01 26 66 F0 | 	shl	local05, #1
23408     18 26 46 F0 | 	shr	local05, #24
2340c     1F 22 46 F0 | 	shr	local03, #31
23410     10 FB 01 F6 | 	mov	result1, local02
23414     FD 28 02 F6 | 	mov	local06, result1
23418     14 2B 02 F6 | 	mov	local07, local06
2341c     16 2A 46 F7 | 	zerox	local07, #22
23420     14 2D 02 F6 | 	mov	local08, local06
23424     01 2C 66 F0 | 	shl	local08, #1
23428     18 2C 46 F0 | 	shr	local08, #24
2342c     1F 28 46 F0 | 	shr	local06, #31
23430     14 23 62 F5 | 	xor	local03, local06
23434     FF 26 0E F2 | 	cmp	local05, #255 wz
23438     90 00 90 AD |  if_e	jmp	#LR__3233
2343c     FF 2C 0E F2 | 	cmp	local08, #255 wz
23440     D8 00 90 AD |  if_e	jmp	#LR__3235
23444     00 26 0E F2 | 	cmp	local05, #0 wz
23448     0C 01 90 AD |  if_e	jmp	#LR__3236
2344c     17 24 26 F4 | 	bith	local04, #23
23450                 | LR__3230
23450     00 2C 0E F2 | 	cmp	local08, #0 wz
23454     44 01 90 AD |  if_e	jmp	#LR__3240
23458     17 2A 26 F4 | 	bith	local07, #23
2345c                 | LR__3231
2345c     12 21 02 F6 | 	mov	local02, local04
23460     04 20 66 F0 | 	shl	local02, #4
23464     15 29 02 F6 | 	mov	local06, local07
23468     05 28 66 F0 | 	shl	local06, #5
2346c     14 21 02 FD | 	qmul	local02, local06
23470     16 27 02 F1 | 	add	local05, local08
23474     FE 26 86 F1 | 	sub	local05, #254
23478     13 2F 02 F6 | 	mov	local09, local05
2347c     04 24 66 F0 | 	shl	local04, #4
23480     05 2A 66 F0 | 	shl	local07, #5
23484     18 30 62 FD | 	getqx	local10
23488     15 25 02 FD | 	qmul	local04, local07
2348c     19 32 62 FD | 	getqy	local11
23490     00 80 00 FF 
23494     00 32 16 F2 | 	cmp	local11, ##16777216 wc
23498     18 00 90 CD |  if_b	jmp	#LR__3232
2349c     01 2E 06 F1 | 	add	local09, #1
234a0     01 30 46 F0 | 	shr	local10, #1
234a4     19 2D 02 F6 | 	mov	local08, local11
234a8     1F 2C 66 F0 | 	shl	local08, #31
234ac     16 31 42 F5 | 	or	local10, local08
234b0     01 32 46 F0 | 	shr	local11, #1
234b4                 | LR__3232
234b4     19 13 02 F6 | 	mov	arg01, local11
234b8     18 15 02 F6 | 	mov	arg02, local10
234bc     17 17 02 F6 | 	mov	arg03, local09
234c0     11 19 02 F6 | 	mov	arg04, local03
234c4     60 32 B0 FD | 	call	#__system__pack_0607
234c8     10 01 90 FD | 	jmp	#LR__3244
234cc                 | LR__3233
234cc     00 24 0E F2 | 	cmp	local04, #0 wz
234d0     0F FB 01 56 |  if_ne	mov	result1, local01
234d4     04 01 90 5D |  if_ne	jmp	#LR__3244
234d8     FF 2C 56 F2 | 	cmps	local08, #255 wc
234dc     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
234e0     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
234e4     18 00 90 4D |  if_c_and_nz	jmp	#LR__3234
234e8     00 F8 3F CF 
234ec     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
234f0     E8 00 90 CD |  if_b	jmp	#LR__3244
234f4     00 2A 0E F2 | 	cmp	local07, #0 wz
234f8     10 FB 01 56 |  if_ne	mov	result1, local02
234fc     DC 00 90 5D |  if_ne	jmp	#LR__3244
23500                 | LR__3234
23500     02 22 46 F5 | 	or	local03, #2
23504     00 12 06 F6 | 	mov	arg01, #0
23508     00 14 06 F6 | 	mov	arg02, #0
2350c     13 17 02 F6 | 	mov	arg03, local05
23510     11 19 02 F6 | 	mov	arg04, local03
23514     10 32 B0 FD | 	call	#__system__pack_0607
23518     C0 00 90 FD | 	jmp	#LR__3244
2351c                 | LR__3235
2351c     00 26 0E F2 | 	cmp	local05, #0 wz
23520     00 24 0E A2 |  if_e	cmp	local04, #0 wz
23524     00 F8 3F AF 
23528     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2352c     AC 00 90 AD |  if_e	jmp	#LR__3244
23530     00 2A 0E F2 | 	cmp	local07, #0 wz
23534     10 FB 01 56 |  if_ne	mov	result1, local02
23538     A0 00 90 5D |  if_ne	jmp	#LR__3244
2353c     16 17 02 F6 | 	mov	arg03, local08
23540     11 19 02 F6 | 	mov	arg04, local03
23544     02 18 46 F5 | 	or	arg04, #2
23548     00 12 06 F6 | 	mov	arg01, #0
2354c     00 14 06 F6 | 	mov	arg02, #0
23550     D4 31 B0 FD | 	call	#__system__pack_0607
23554     84 00 90 FD | 	jmp	#LR__3244
23558                 | LR__3236
23558     00 24 0E F2 | 	cmp	local04, #0 wz
2355c     20 00 90 AD |  if_e	jmp	#LR__3239
23560     01 24 66 F0 | 	shl	local04, #1
23564     97 0A 48 FB | 	callpa	#(@LR__3238-@LR__3237)>>2,fcache_load_ptr_
23568                 | LR__3237
23568     00 40 00 FF 
2356c     00 24 16 F2 | 	cmp	local04, ##8388608 wc
23570     01 26 86 C1 |  if_b	sub	local05, #1
23574     01 24 66 C0 |  if_b	shl	local04, #1
23578     EC FF 9F CD |  if_b	jmp	#LR__3237
2357c                 | LR__3238
2357c     D0 FE 9F FD | 	jmp	#LR__3230
23580                 | LR__3239
23580     08 22 46 F5 | 	or	local03, #8
23584     00 12 06 F6 | 	mov	arg01, #0
23588     00 14 06 F6 | 	mov	arg02, #0
2358c     00 16 06 F6 | 	mov	arg03, #0
23590     11 19 02 F6 | 	mov	arg04, local03
23594     90 31 B0 FD | 	call	#__system__pack_0607
23598     40 00 90 FD | 	jmp	#LR__3244
2359c                 | LR__3240
2359c     00 2A 0E F2 | 	cmp	local07, #0 wz
235a0     20 00 90 AD |  if_e	jmp	#LR__3243
235a4     01 2A 66 F0 | 	shl	local07, #1
235a8     97 0A 48 FB | 	callpa	#(@LR__3242-@LR__3241)>>2,fcache_load_ptr_
235ac                 | LR__3241
235ac     00 40 00 FF 
235b0     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
235b4     01 2C 86 C1 |  if_b	sub	local08, #1
235b8     01 2A 66 C0 |  if_b	shl	local07, #1
235bc     EC FF 9F CD |  if_b	jmp	#LR__3241
235c0                 | LR__3242
235c0     98 FE 9F FD | 	jmp	#LR__3231
235c4                 | LR__3243
235c4     08 22 46 F5 | 	or	local03, #8
235c8     00 12 06 F6 | 	mov	arg01, #0
235cc     00 14 06 F6 | 	mov	arg02, #0
235d0     00 16 06 F6 | 	mov	arg03, #0
235d4     11 19 02 F6 | 	mov	arg04, local03
235d8     4C 31 B0 FD | 	call	#__system__pack_0607
235dc                 | LR__3244
235dc     A7 F0 03 F6 | 	mov	ptra, fp
235e0     B2 00 A0 FD | 	call	#popregs_
235e4                 | __system___float_mul_ret
235e4     2D 00 64 FD | 	ret
235e8                 | 
235e8                 | __system___float_div
235e8     0E 4A 05 F6 | 	mov	COUNT_, #14
235ec     A8 00 A0 FD | 	call	#pushregs_
235f0     09 23 02 F6 | 	mov	local03, arg01
235f4     0A 25 02 F6 | 	mov	local04, arg02
235f8     11 27 02 F6 | 	mov	local05, local03
235fc     13 29 02 F6 | 	mov	local06, local05
23600     16 28 46 F7 | 	zerox	local06, #22
23604     13 2B 02 F6 | 	mov	local07, local05
23608     01 2A 66 F0 | 	shl	local07, #1
2360c     18 2A 46 F0 | 	shr	local07, #24
23610     1F 26 46 F0 | 	shr	local05, #31
23614     12 FB 01 F6 | 	mov	result1, local04
23618     FD 2C 02 F6 | 	mov	local08, result1
2361c     16 2F 02 F6 | 	mov	local09, local08
23620     16 2E 46 F7 | 	zerox	local09, #22
23624     16 31 02 F6 | 	mov	local10, local08
23628     01 30 66 F0 | 	shl	local10, #1
2362c     18 30 46 F0 | 	shr	local10, #24
23630     1F 2C 46 F0 | 	shr	local08, #31
23634     16 27 62 F5 | 	xor	local05, local08
23638     FF 2A 0E F2 | 	cmp	local07, #255 wz
2363c     D4 00 90 AD |  if_e	jmp	#LR__3255
23640     FF 30 0E F2 | 	cmp	local10, #255 wz
23644     04 01 90 AD |  if_e	jmp	#LR__3256
23648     00 2A 0E F2 | 	cmp	local07, #0 wz
2364c     24 01 90 AD |  if_e	jmp	#LR__3257
23650     17 28 26 F4 | 	bith	local06, #23
23654                 | LR__3250
23654     00 30 0E F2 | 	cmp	local10, #0 wz
23658     70 01 90 AD |  if_e	jmp	#LR__3261
2365c     17 2E 26 F4 | 	bith	local09, #23
23660                 | LR__3251
23660     18 2B 82 F1 | 	sub	local07, local10
23664     15 33 02 F6 | 	mov	local11, local07
23668     14 13 02 F6 | 	mov	arg01, local06
2366c     02 12 46 F0 | 	shr	arg01, #2
23670     1E 28 66 F0 | 	shl	local06, #30
23674     14 15 02 F6 | 	mov	arg02, local06
23678     17 17 02 F6 | 	mov	arg03, local09
2367c     28 12 62 FD | 	setq	arg01
23680     0B 15 12 FD | 	qdiv	arg02, arg03
23684     00 34 06 F6 | 	mov	local12, #0
23688     18 1E 62 FD | 	getqx	local01
2368c     19 FC 61 FD | 	getqy	result2
23690     FE 20 02 F6 | 	mov	local02, result2
23694     0F 37 02 F6 | 	mov	local13, local01
23698     00 20 4E F2 | 	cmps	local02, #0 wz
2369c     1B 39 02 F6 | 	mov	local14, local13
236a0     19 38 66 F0 | 	shl	local14, #25
236a4     01 34 06 56 |  if_ne	mov	local12, #1
236a8     1A 39 42 F5 | 	or	local14, local12
236ac     07 36 46 F0 | 	shr	local13, #7
236b0     00 80 00 FF 
236b4     00 36 16 F2 | 	cmp	local13, ##16777216 wc
236b8     1C 00 90 CD |  if_b	jmp	#LR__3252
236bc     01 32 06 F1 | 	add	local11, #1
236c0     01 38 46 F0 | 	shr	local14, #1
236c4     1B 35 02 F6 | 	mov	local12, local13
236c8     1F 34 66 F0 | 	shl	local12, #31
236cc     1A 39 42 F5 | 	or	local14, local12
236d0     01 36 46 F0 | 	shr	local13, #1
236d4     24 00 90 FD | 	jmp	#LR__3254
236d8                 | LR__3252
236d8     00 40 00 FF 
236dc     00 36 16 F2 | 	cmp	local13, ##8388608 wc
236e0     18 00 90 3D |  if_ae	jmp	#LR__3253
236e4     01 32 86 F1 | 	sub	local11, #1
236e8     01 36 66 F0 | 	shl	local13, #1
236ec     1C 35 02 F6 | 	mov	local12, local14
236f0     1F 34 46 F0 | 	shr	local12, #31
236f4     1A 37 42 F5 | 	or	local13, local12
236f8     01 38 66 F0 | 	shl	local14, #1
236fc                 | LR__3253
236fc                 | LR__3254
236fc     1B 13 02 F6 | 	mov	arg01, local13
23700     1C 15 02 F6 | 	mov	arg02, local14
23704     19 17 02 F6 | 	mov	arg03, local11
23708     13 19 02 F6 | 	mov	arg04, local05
2370c     18 30 B0 FD | 	call	#__system__pack_0607
23710     F8 00 90 FD | 	jmp	#LR__3265
23714                 | LR__3255
23714     00 28 0E F2 | 	cmp	local06, #0 wz
23718     11 FB 01 56 |  if_ne	mov	result1, local03
2371c     EC 00 90 5D |  if_ne	jmp	#LR__3265
23720     FF 30 0E F2 | 	cmp	local10, #255 wz
23724     00 F8 3F AF 
23728     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2372c     DC 00 90 AD |  if_e	jmp	#LR__3265
23730     02 26 46 F5 | 	or	local05, #2
23734     00 12 06 F6 | 	mov	arg01, #0
23738     00 14 06 F6 | 	mov	arg02, #0
2373c     15 17 02 F6 | 	mov	arg03, local07
23740     13 19 02 F6 | 	mov	arg04, local05
23744     E0 2F B0 FD | 	call	#__system__pack_0607
23748     C0 00 90 FD | 	jmp	#LR__3265
2374c                 | LR__3256
2374c     00 2E 0E F2 | 	cmp	local09, #0 wz
23750     12 FB 01 56 |  if_ne	mov	result1, local04
23754     B4 00 90 5D |  if_ne	jmp	#LR__3265
23758     13 19 02 F6 | 	mov	arg04, local05
2375c     08 18 46 F5 | 	or	arg04, #8
23760     00 12 06 F6 | 	mov	arg01, #0
23764     00 14 06 F6 | 	mov	arg02, #0
23768     00 16 06 F6 | 	mov	arg03, #0
2376c     B8 2F B0 FD | 	call	#__system__pack_0607
23770     98 00 90 FD | 	jmp	#LR__3265
23774                 | LR__3257
23774     00 28 0E F2 | 	cmp	local06, #0 wz
23778     20 00 90 AD |  if_e	jmp	#LR__3260
2377c     01 28 66 F0 | 	shl	local06, #1
23780     97 0A 48 FB | 	callpa	#(@LR__3259-@LR__3258)>>2,fcache_load_ptr_
23784                 | LR__3258
23784     00 40 00 FF 
23788     00 28 16 F2 | 	cmp	local06, ##8388608 wc
2378c     01 2A 86 C1 |  if_b	sub	local07, #1
23790     01 28 66 C0 |  if_b	shl	local06, #1
23794     EC FF 9F CD |  if_b	jmp	#LR__3258
23798                 | LR__3259
23798     B8 FE 9F FD | 	jmp	#LR__3250
2379c                 | LR__3260
2379c     00 30 0E F2 | 	cmp	local10, #0 wz
237a0     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
237a4     00 F8 3F AF 
237a8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
237ac     5C 00 90 AD |  if_e	jmp	#LR__3265
237b0     13 19 02 F6 | 	mov	arg04, local05
237b4     08 18 46 F5 | 	or	arg04, #8
237b8     00 12 06 F6 | 	mov	arg01, #0
237bc     00 14 06 F6 | 	mov	arg02, #0
237c0     00 16 06 F6 | 	mov	arg03, #0
237c4     60 2F B0 FD | 	call	#__system__pack_0607
237c8     40 00 90 FD | 	jmp	#LR__3265
237cc                 | LR__3261
237cc     00 2E 0E F2 | 	cmp	local09, #0 wz
237d0     20 00 90 AD |  if_e	jmp	#LR__3264
237d4     01 2E 66 F0 | 	shl	local09, #1
237d8     97 0A 48 FB | 	callpa	#(@LR__3263-@LR__3262)>>2,fcache_load_ptr_
237dc                 | LR__3262
237dc     00 40 00 FF 
237e0     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
237e4     01 30 86 C1 |  if_b	sub	local10, #1
237e8     01 2E 66 C0 |  if_b	shl	local09, #1
237ec     EC FF 9F CD |  if_b	jmp	#LR__3262
237f0                 | LR__3263
237f0     6C FE 9F FD | 	jmp	#LR__3251
237f4                 | LR__3264
237f4     02 26 46 F5 | 	or	local05, #2
237f8     00 12 06 F6 | 	mov	arg01, #0
237fc     00 14 06 F6 | 	mov	arg02, #0
23800     00 16 06 F6 | 	mov	arg03, #0
23804     13 19 02 F6 | 	mov	arg04, local05
23808     1C 2F B0 FD | 	call	#__system__pack_0607
2380c                 | LR__3265
2380c     A7 F0 03 F6 | 	mov	ptra, fp
23810     B2 00 A0 FD | 	call	#popregs_
23814                 | __system___float_div_ret
23814     2D 00 64 FD | 	ret
23818                 | 
23818                 | __system___float_cmp
23818     00 C0 3F FF 
2381c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
23820     00 C0 3F CF 
23824     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
23828     0B FB 01 36 |  if_ae	mov	result1, arg03
2382c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23830     00 C0 7F FF 
23834     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
23838     00 C0 7F CF 
2383c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
23840     0B FB 01 36 |  if_ae	mov	result1, arg03
23844     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23848     00 12 56 F2 | 	cmps	arg01, #0 wc
2384c     2C 00 90 3D |  if_ae	jmp	#LR__3270
23850     00 14 56 F2 | 	cmps	arg02, #0 wc
23854     0A FB 01 C6 |  if_b	mov	result1, arg02
23858     09 FB 81 C1 |  if_b	sub	result1, arg01
2385c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
23860     00 14 0E F2 | 	cmp	arg02, #0 wz
23864     00 00 40 AF 
23868     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2386c     00 FA 05 A6 |  if_e	mov	result1, #0
23870     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23874     01 FA 65 F6 | 	neg	result1, #1
23878     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2387c                 | LR__3270
2387c     00 14 56 F2 | 	cmps	arg02, #0 wc
23880     1C 00 90 3D |  if_ae	jmp	#LR__3271
23884     00 12 0E F2 | 	cmp	arg01, #0 wz
23888     00 00 40 AF 
2388c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
23890     00 FA 05 A6 |  if_e	mov	result1, #0
23894     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23898     01 FA 05 F6 | 	mov	result1, #1
2389c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
238a0                 | LR__3271
238a0     0A 13 82 F1 | 	sub	arg01, arg02
238a4     09 FB 01 F6 | 	mov	result1, arg01
238a8                 | __system___float_cmp_ret
238a8     2D 00 64 FD | 	ret
238ac                 | 
238ac                 | __system___float_tointeger
238ac     02 4A 05 F6 | 	mov	COUNT_, #2
238b0     A8 00 A0 FD | 	call	#pushregs_
238b4     50 00 B0 FD | 	call	#__system___float_Unpack
238b8     FF FF 7F FF 
238bc     FF FD 55 F2 | 	cmps	result2, ##-1 wc
238c0     34 00 90 CD |  if_b	jmp	#LR__3280
238c4     1F FC 55 F2 | 	cmps	result2, #31 wc
238c8     2C 00 90 3D |  if_ae	jmp	#LR__3280
238cc     02 FE 65 F0 | 	shl	result3, #2
238d0     1E 1E 06 F6 | 	mov	local01, #30
238d4     FE 1E 82 F1 | 	sub	local01, result2
238d8     0F FF 41 F0 | 	shr	result3, local01
238dc     FF 20 02 F6 | 	mov	local02, result3
238e0     0A 21 02 F1 | 	add	local02, arg02
238e4     01 20 46 F0 | 	shr	local02, #1
238e8     00 FA 0D F2 | 	cmp	result1, #0 wz
238ec     10 21 62 56 |  if_ne	neg	local02, local02
238f0     10 FB 01 F6 | 	mov	result1, local02
238f4     04 00 90 FD | 	jmp	#LR__3281
238f8                 | LR__3280
238f8     00 FA 05 F6 | 	mov	result1, #0
238fc                 | LR__3281
238fc     A7 F0 03 F6 | 	mov	ptra, fp
23900     B2 00 A0 FD | 	call	#popregs_
23904                 | __system___float_tointeger_ret
23904     2D 00 64 FD | 	ret
23908                 | 
23908                 | __system___float_Unpack
23908     09 01 02 F6 | 	mov	_var01, arg01
2390c     1F 00 46 F0 | 	shr	_var01, #31
23910     09 03 02 F6 | 	mov	_var02, arg01
23914     01 02 66 F0 | 	shl	_var02, #1
23918     18 02 4E F0 | 	shr	_var02, #24 wz
2391c     17 13 06 F4 | 	bitl	arg01, #279
23920     06 12 66 50 |  if_ne	shl	arg01, #6
23924     1D 12 26 54 |  if_ne	bith	arg01, #29
23928     1C 00 90 5D |  if_ne	jmp	#LR__3290
2392c     09 05 92 F7 | 	encod	_var03, arg01 wc
23930     01 04 06 C1 |  if_b	add	_var03, #1
23934     17 04 86 F1 | 	sub	_var03, #23
23938     02 03 02 F6 | 	mov	_var02, _var03
2393c     07 FC 05 F6 | 	mov	result2, #7
23940     02 FD 81 F1 | 	sub	result2, _var03
23944     FE 12 62 F0 | 	shl	arg01, result2
23948                 | LR__3290
23948     7F 02 86 F1 | 	sub	_var02, #127
2394c     09 FF 01 F6 | 	mov	result3, arg01
23950     00 FB 01 F6 | 	mov	result1, _var01
23954     01 FD 01 F6 | 	mov	result2, _var02
23958                 | __system___float_Unpack_ret
23958     2D 00 64 FD | 	ret
2395c                 | 
2395c                 | __system___float_Pack
2395c     00 00 06 F6 | 	mov	_var01, #0
23960     00 16 0E F2 | 	cmp	arg03, #0 wz
23964     8C 00 90 AD |  if_e	jmp	#LR__3301
23968     0B 03 92 F7 | 	encod	_var02, arg03 wc
2396c     01 02 06 C1 |  if_b	add	_var02, #1
23970     21 00 06 F6 | 	mov	_var01, #33
23974     01 01 82 F1 | 	sub	_var01, _var02
23978     00 17 62 F0 | 	shl	arg03, _var01
2397c     03 02 06 F6 | 	mov	_var02, #3
23980     00 03 82 F1 | 	sub	_var02, _var01
23984     01 15 02 F1 | 	add	arg02, _var02
23988     0A 05 02 F6 | 	mov	_var03, arg02
2398c     00 17 06 F1 | 	add	arg03, #256
23990     0B 03 02 F6 | 	mov	_var02, arg03
23994     FF 02 2E F5 | 	andn	_var02, #255 wz
23998     01 04 06 A1 |  if_e	add	_var03, #1
2399c     7F 04 06 F1 | 	add	_var03, #127
239a0     FF FF 7F FF 
239a4     E9 05 46 F3 | 	fges	_var03, ##-23
239a8     FF 04 66 F3 | 	fles	_var03, #255
239ac     01 04 56 F2 | 	cmps	_var03, #1 wc
239b0     1C 00 90 3D |  if_ae	jmp	#LR__3300
239b4     01 16 46 F0 | 	shr	arg03, #1
239b8     1F 02 C6 F9 | 	decod	_var02, #31
239bc     0B 03 02 F1 | 	add	_var02, arg03
239c0     02 05 62 F6 | 	neg	_var03, _var03
239c4     02 03 42 F0 | 	shr	_var02, _var03
239c8     01 17 02 F6 | 	mov	arg03, _var02
239cc     00 04 06 F6 | 	mov	_var03, #0
239d0                 | LR__3300
239d0     09 FB 01 F6 | 	mov	result1, arg01
239d4     1F FA 65 F0 | 	shl	result1, #31
239d8     02 03 02 F6 | 	mov	_var02, _var03
239dc     17 02 66 F0 | 	shl	_var02, #23
239e0     01 FB 41 F5 | 	or	result1, _var02
239e4     0B 07 02 F6 | 	mov	_var04, arg03
239e8     09 06 46 F0 | 	shr	_var04, #9
239ec     03 FB 41 F5 | 	or	result1, _var04
239f0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
239f4                 | LR__3301
239f4     00 FB 01 F6 | 	mov	result1, _var01
239f8                 | __system___float_Pack_ret
239f8     2D 00 64 FD | 	ret
239fc                 | 
239fc                 | __system___basic_print_float
239fc     05 4A 05 F6 | 	mov	COUNT_, #5
23a00     A8 00 A0 FD | 	call	#pushregs_
23a04     09 1F 02 F6 | 	mov	local01, arg01
23a08     0A 21 02 F6 | 	mov	local02, arg02
23a0c     0B 23 0A F6 | 	mov	local03, arg03 wz
23a10     0C 25 02 F6 | 	mov	local04, arg04
23a14     14 00 90 5D |  if_ne	jmp	#LR__3310
23a18     23 24 0E F2 | 	cmp	local04, #35 wz
23a1c     80 02 10 AF 
23a20     00 26 06 A6 |  if_e	mov	local05, ##537198592
23a24     1D 26 C6 59 |  if_ne	decod	local05, #29
23a28     13 23 02 F6 | 	mov	local03, local05
23a2c                 | LR__3310
23a2c     0F 13 02 F6 | 	mov	arg01, local01
23a30     D8 27 B0 FD | 	call	#__system___gettxfunc
23a34     FD 26 0A F6 | 	mov	local05, result1 wz
23a38     00 FA 05 A6 |  if_e	mov	result1, #0
23a3c     13 13 02 56 |  if_ne	mov	arg01, local05
23a40     11 15 02 56 |  if_ne	mov	arg02, local03
23a44     10 17 02 56 |  if_ne	mov	arg03, local02
23a48     12 19 02 56 |  if_ne	mov	arg04, local04
23a4c     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23a50     A7 F0 03 F6 | 	mov	ptra, fp
23a54     B2 00 A0 FD | 	call	#popregs_
23a58                 | __system___basic_print_float_ret
23a58     2D 00 64 FD | 	ret
23a5c                 | 
23a5c                 | __system____builtin_atoi
23a5c     07 4A 05 F6 | 	mov	COUNT_, #7
23a60     A8 00 A0 FD | 	call	#pushregs_
23a64                 | __system____builtin_atoi_enter
23a64     09 1F 02 F6 | 	mov	local01, arg01
23a68     0A 21 02 F6 | 	mov	local02, arg02
23a6c     00 22 06 F6 | 	mov	local03, #0
23a70     00 24 06 F6 | 	mov	local04, #0
23a74     00 26 06 F6 | 	mov	local05, #0
23a78     97 1C 48 FB | 	callpa	#(@LR__3322-@LR__3320)>>2,fcache_load_ptr_
23a7c                 | LR__3320
23a7c     0F 29 C2 FA | 	rdbyte	local06, local01
23a80     20 28 0E F2 | 	cmp	local06, #32 wz
23a84     01 1E 06 A1 |  if_e	add	local01, #1
23a88     F0 FF 9F AD |  if_e	jmp	#LR__3320
23a8c     0F 2B C2 FA | 	rdbyte	local07, local01
23a90                 | LR__3321
23a90     2D 2A 0E F2 | 	cmp	local07, #45 wz
23a94     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23a98     18 00 90 5D |  if_ne	jmp	#LR__3323
23a9c     01 1E 06 F1 | 	add	local01, #1
23aa0     2D 2A 0E F2 | 	cmp	local07, #45 wz
23aa4     01 28 06 A6 |  if_e	mov	local06, #1
23aa8     14 27 C2 A2 |  if_e	subr	local05, local06
23aac     0F 2B C2 FA | 	rdbyte	local07, local01
23ab0     DC FF 9F FD | 	jmp	#LR__3321
23ab4                 | LR__3322
23ab4                 | LR__3323
23ab4     00 20 0E F2 | 	cmp	local02, #0 wz
23ab8     1C 00 90 5D |  if_ne	jmp	#LR__3325
23abc     24 2A 0E F2 | 	cmp	local07, #36 wz
23ac0     10 20 06 A6 |  if_e	mov	local02, #16
23ac4     01 1E 06 A1 |  if_e	add	local01, #1
23ac8     0C 00 90 AD |  if_e	jmp	#LR__3324
23acc     25 2A 0E F2 | 	cmp	local07, #37 wz
23ad0     02 20 06 A6 |  if_e	mov	local02, #2
23ad4     01 1E 06 A1 |  if_e	add	local01, #1
23ad8                 | LR__3324
23ad8                 | LR__3325
23ad8     97 48 48 FB | 	callpa	#(@LR__3333-@LR__3326)>>2,fcache_load_ptr_
23adc                 | LR__3326
23adc                 | LR__3327
23adc     0F 2B C2 FA | 	rdbyte	local07, local01
23ae0     5F 2A 0E F2 | 	cmp	local07, #95 wz
23ae4     01 1E 06 F1 | 	add	local01, #1
23ae8     F0 FF 9F AD |  if_e	jmp	#LR__3327
23aec     30 2A 0E F2 | 	cmp	local07, #48 wz
23af0     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23af4     00 24 06 A6 |  if_e	mov	local04, #0
23af8     60 00 90 AD |  if_e	jmp	#LR__3332
23afc     31 2A 56 F2 | 	cmps	local07, #49 wc
23b00     18 00 90 CD |  if_b	jmp	#LR__3328
23b04     3A 2A 56 F2 | 	cmps	local07, #58 wc
23b08     15 25 02 C6 |  if_b	mov	local04, local07
23b0c     30 24 86 C1 |  if_b	sub	local04, #48
23b10     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23b14     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23b18     40 00 90 CD |  if_b	jmp	#LR__3331
23b1c                 | LR__3328
23b1c     0B 20 56 F2 | 	cmps	local02, #11 wc
23b20     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23b24     14 00 90 CD |  if_b	jmp	#LR__3329
23b28     67 2A 56 F2 | 	cmps	local07, #103 wc
23b2c     61 2A 86 C1 |  if_b	sub	local07, #97
23b30     0A 24 06 C6 |  if_b	mov	local04, #10
23b34     15 25 02 C1 |  if_b	add	local04, local07
23b38     20 00 90 CD |  if_b	jmp	#LR__3330
23b3c                 | LR__3329
23b3c     0B 20 56 F2 | 	cmps	local02, #11 wc
23b40     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23b44     24 00 90 CD |  if_b	jmp	#LR__3334
23b48     47 2A 56 F2 | 	cmps	local07, #71 wc
23b4c     41 2A 86 C1 |  if_b	sub	local07, #65
23b50     0A 24 06 C6 |  if_b	mov	local04, #10
23b54     15 25 02 C1 |  if_b	add	local04, local07
23b58     10 00 90 3D |  if_ae	jmp	#LR__3334
23b5c                 | LR__3330
23b5c                 | LR__3331
23b5c                 | LR__3332
23b5c     11 21 02 FD | 	qmul	local02, local03
23b60     18 22 62 FD | 	getqx	local03
23b64     12 23 02 F1 | 	add	local03, local04
23b68     70 FF 9F FD | 	jmp	#LR__3326
23b6c                 | LR__3333
23b6c                 | LR__3334
23b6c     00 20 0E F2 | 	cmp	local02, #0 wz
23b70     64 00 90 5D |  if_ne	jmp	#LR__3340
23b74     78 2A 0E F2 | 	cmp	local07, #120 wz
23b78     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23b7c     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23b80     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23b84     14 00 90 5D |  if_ne	jmp	#LR__3335
23b88     0F 13 02 F6 | 	mov	arg01, local01
23b8c     10 14 06 F6 | 	mov	arg02, #16
23b90     C8 FE BF FD | 	call	#__system____builtin_atoi
23b94     FD 22 02 F6 | 	mov	local03, result1
23b98     3C 00 90 FD | 	jmp	#LR__3339
23b9c                 | LR__3335
23b9c     62 2A 0E F2 | 	cmp	local07, #98 wz
23ba0     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23ba4     14 00 90 5D |  if_ne	jmp	#LR__3336
23ba8     0F 13 02 F6 | 	mov	arg01, local01
23bac     02 14 06 F6 | 	mov	arg02, #2
23bb0     A8 FE BF FD | 	call	#__system____builtin_atoi
23bb4     FD 22 02 F6 | 	mov	local03, result1
23bb8     1C 00 90 FD | 	jmp	#LR__3338
23bbc                 | LR__3336
23bbc     6F 2A 0E F2 | 	cmp	local07, #111 wz
23bc0     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23bc4     10 00 90 5D |  if_ne	jmp	#LR__3337
23bc8     0F 13 02 F6 | 	mov	arg01, local01
23bcc     08 14 06 F6 | 	mov	arg02, #8
23bd0     88 FE BF FD | 	call	#__system____builtin_atoi
23bd4     FD 22 02 F6 | 	mov	local03, result1
23bd8                 | LR__3337
23bd8                 | LR__3338
23bd8                 | LR__3339
23bd8                 | LR__3340
23bd8     00 26 0E F2 | 	cmp	local05, #0 wz
23bdc     11 23 62 56 |  if_ne	neg	local03, local03
23be0     11 FB 01 F6 | 	mov	result1, local03
23be4     A7 F0 03 F6 | 	mov	ptra, fp
23be8     B2 00 A0 FD | 	call	#popregs_
23bec                 | __system____builtin_atoi_ret
23bec     2D 00 64 FD | 	ret
23bf0                 | 
23bf0                 | __system____builtin_atof
23bf0     07 4A 05 F6 | 	mov	COUNT_, #7
23bf4     A8 00 A0 FD | 	call	#pushregs_
23bf8     09 1F 02 F6 | 	mov	local01, arg01
23bfc     00 20 06 F6 | 	mov	local02, #0
23c00     00 22 06 F6 | 	mov	local03, #0
23c04     00 24 06 F6 | 	mov	local04, #0
23c08     00 26 06 F6 | 	mov	local05, #0
23c0c     97 08 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
23c10                 | LR__3350
23c10     0F 17 C2 FA | 	rdbyte	arg03, local01
23c14     20 16 0E F2 | 	cmp	arg03, #32 wz
23c18     01 1E 06 A1 |  if_e	add	local01, #1
23c1c     F0 FF 9F AD |  if_e	jmp	#LR__3350
23c20                 | LR__3351
23c20     0F 29 C2 FA | 	rdbyte	local06, local01
23c24                 | LR__3352
23c24     2B 28 0E F2 | 	cmp	local06, #43 wz
23c28     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23c2c     14 00 90 5D |  if_ne	jmp	#LR__3353
23c30     2D 28 0E F2 | 	cmp	local06, #45 wz
23c34     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23c38     01 1E 06 F1 | 	add	local01, #1
23c3c     0F 29 C2 FA | 	rdbyte	local06, local01
23c40     E0 FF 9F FD | 	jmp	#LR__3352
23c44                 | LR__3353
23c44                 | LR__3354
23c44     97 08 48 FB | 	callpa	#(@LR__3356-@LR__3355)>>2,fcache_load_ptr_
23c48                 | LR__3355
23c48     0F 29 C2 FA | 	rdbyte	local06, local01
23c4c     5F 28 0E F2 | 	cmp	local06, #95 wz
23c50     01 1E 06 F1 | 	add	local01, #1
23c54     F0 FF 9F AD |  if_e	jmp	#LR__3355
23c58                 | LR__3356
23c58     00 28 0E F2 | 	cmp	local06, #0 wz
23c5c     5C 00 90 AD |  if_e	jmp	#LR__3358
23c60     30 28 56 F2 | 	cmps	local06, #48 wc
23c64     44 00 90 CD |  if_b	jmp	#LR__3357
23c68     3A 28 56 F2 | 	cmps	local06, #58 wc
23c6c     3C 00 90 3D |  if_ae	jmp	#LR__3357
23c70     10 13 02 F6 | 	mov	arg01, local02
23c74     00 90 20 FF 
23c78     00 14 06 F6 | 	mov	arg02, ##1092616192
23c7c     64 F7 BF FD | 	call	#__system___float_mul
23c80     FD 20 02 F6 | 	mov	local02, result1
23c84     30 28 86 F1 | 	sub	local06, #48
23c88     14 13 02 F6 | 	mov	arg01, local06
23c8c     50 F3 BF FD | 	call	#__system___float_fromuns
23c90     FD 14 02 F6 | 	mov	arg02, result1
23c94     10 13 02 F6 | 	mov	arg01, local02
23c98     78 F3 BF FD | 	call	#__system___float_add
23c9c     FD 20 02 F6 | 	mov	local02, result1
23ca0     00 26 0E F2 | 	cmp	local05, #0 wz
23ca4     01 22 86 51 |  if_ne	sub	local03, #1
23ca8     98 FF 9F FD | 	jmp	#LR__3354
23cac                 | LR__3357
23cac     2E 28 0E F2 | 	cmp	local06, #46 wz
23cb0     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23cb4     01 26 06 A6 |  if_e	mov	local05, #1
23cb8     88 FF 9F AD |  if_e	jmp	#LR__3354
23cbc                 | LR__3358
23cbc     45 28 0E F2 | 	cmp	local06, #69 wz
23cc0     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23cc4     18 00 90 5D |  if_ne	jmp	#LR__3359
23cc8     0F 13 02 F6 | 	mov	arg01, local01
23ccc     00 14 06 F6 | 	mov	arg02, #0
23cd0     88 FD BF FD | 	call	#__system____builtin_atoi
23cd4     11 FB 01 F1 | 	add	result1, local03
23cd8     FD 2A 02 F6 | 	mov	local07, result1
23cdc     04 00 90 FD | 	jmp	#LR__3360
23ce0                 | LR__3359
23ce0     11 2B 02 F6 | 	mov	local07, local03
23ce4                 | LR__3360
23ce4     15 17 02 F6 | 	mov	arg03, local07
23ce8     10 13 02 F6 | 	mov	arg01, local02
23cec     00 90 20 FF 
23cf0     00 14 06 F6 | 	mov	arg02, ##1092616192
23cf4     F4 06 B0 FD | 	call	#__system___float_pow_n
23cf8     12 FB 61 F5 | 	xor	result1, local04
23cfc     A7 F0 03 F6 | 	mov	ptra, fp
23d00     B2 00 A0 FD | 	call	#popregs_
23d04                 | __system____builtin_atof_ret
23d04     2D 00 64 FD | 	ret
23d08                 | 
23d08                 | __system____builtin_ilogb
23d08     FC FB BF FD | 	call	#__system___float_Unpack
23d0c     00 FE 0D F2 | 	cmp	result3, #0 wz
23d10     00 00 40 AF 
23d14     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23d18     24 00 90 AD |  if_e	jmp	#LR__3371
23d1c     80 FC 0D F2 | 	cmp	result2, #128 wz
23d20     18 00 90 5D |  if_ne	jmp	#LR__3370
23d24     00 00 10 FF 
23d28     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
23d2c     1E FA CD A9 |  if_e	bmask	result1, #30
23d30     0C 00 90 AD |  if_e	jmp	#LR__3371
23d34     1F FA C5 F9 | 	decod	result1, #31
23d38     04 00 90 FD | 	jmp	#LR__3371
23d3c                 | LR__3370
23d3c     FE FA 01 F6 | 	mov	result1, result2
23d40                 | LR__3371
23d40                 | __system____builtin_ilogb_ret
23d40     2D 00 64 FD | 	ret
23d44                 | 
23d44                 | __system____builtin_sinf
23d44     03 4A 05 F6 | 	mov	COUNT_, #3
23d48     A8 00 A0 FD | 	call	#pushregs_
23d4c     09 1F 02 F6 | 	mov	local01, arg01
23d50     87 64 20 FF 
23d54     DB 15 06 F6 | 	mov	arg02, ##1086918619
23d58     8C F8 BF FD | 	call	#__system___float_div
23d5c     FD 12 02 F6 | 	mov	arg01, result1
23d60     00 14 06 F6 | 	mov	arg02, #0
23d64     44 FB BF FD | 	call	#__system___float_tointeger
23d68     FD 16 0A F6 | 	mov	arg03, result1 wz
23d6c     44 00 90 AD |  if_e	jmp	#LR__3380
23d70     0B 13 52 F6 | 	abs	arg01, arg03 wc
23d74     1F 20 C6 C9 |  if_b	decod	local02, #31
23d78     00 20 06 36 |  if_ae	mov	local02, #0
23d7c     60 F2 BF FD | 	call	#__system___float_fromuns
23d80     10 FB 61 F5 | 	xor	result1, local02
23d84     FD 12 02 F6 | 	mov	arg01, result1
23d88     1E 14 C6 F9 | 	decod	arg02, #30
23d8c     54 F6 BF FD | 	call	#__system___float_mul
23d90     FD 12 02 F6 | 	mov	arg01, result1
23d94     87 24 20 FF 
23d98     DB 15 06 F6 | 	mov	arg02, ##1078530011
23d9c     44 F6 BF FD | 	call	#__system___float_mul
23da0     FD 14 02 F6 | 	mov	arg02, result1
23da4     0F 13 02 F6 | 	mov	arg01, local01
23da8     1F 14 E6 F4 | 	bitnot	arg02, #31
23dac     64 F2 BF FD | 	call	#__system___float_add
23db0     FD 1E 02 F6 | 	mov	local01, result1
23db4                 | LR__3380
23db4     0F 13 02 F6 | 	mov	arg01, local01
23db8     66 E6 1E FF 
23dbc     CD 14 06 F6 | 	mov	arg02, ##1036831949
23dc0     01 16 06 F6 | 	mov	arg03, #1
23dc4     50 FA BF FD | 	call	#__system___float_cmp
23dc8     00 FA 55 F2 | 	cmps	result1, #0 wc
23dcc     5C 00 90 3D |  if_ae	jmp	#LR__3381
23dd0     0F 13 02 F6 | 	mov	arg01, local01
23dd4     66 E6 5E FF 
23dd8     CD 14 06 F6 | 	mov	arg02, ##-1110651699
23ddc     01 16 66 F6 | 	neg	arg03, #1
23de0     34 FA BF FD | 	call	#__system___float_cmp
23de4     01 FA 55 F2 | 	cmps	result1, #1 wc
23de8     40 00 90 CD |  if_b	jmp	#LR__3381
23dec     0F 13 02 F6 | 	mov	arg01, local01
23df0     0F 15 02 F6 | 	mov	arg02, local01
23df4     EC F5 BF FD | 	call	#__system___float_mul
23df8     FD 12 02 F6 | 	mov	arg01, result1
23dfc     0F 15 02 F6 | 	mov	arg02, local01
23e00     E0 F5 BF FD | 	call	#__system___float_mul
23e04     FD 12 02 F6 | 	mov	arg01, result1
23e08     00 60 20 FF 
23e0c     00 14 06 F6 | 	mov	arg02, ##1086324736
23e10     D4 F7 BF FD | 	call	#__system___float_div
23e14     FD 14 02 F6 | 	mov	arg02, result1
23e18     0F 13 02 F6 | 	mov	arg01, local01
23e1c     1F 14 E6 F4 | 	bitnot	arg02, #31
23e20     F0 F1 BF FD | 	call	#__system___float_add
23e24     FD 22 02 F6 | 	mov	local03, result1
23e28     54 00 90 FD | 	jmp	#LR__3382
23e2c                 | LR__3381
23e2c     0F 13 02 F6 | 	mov	arg01, local01
23e30     7C 91 26 FF 
23e34     83 15 06 F6 | 	mov	arg02, ##1294137731
23e38     A8 F5 BF FD | 	call	#__system___float_mul
23e3c     FD 12 02 F6 | 	mov	arg01, result1
23e40     00 14 06 F6 | 	mov	arg02, #0
23e44     64 FA BF FD | 	call	#__system___float_tointeger
23e48     02 FA 65 F0 | 	shl	result1, #2
23e4c     00 00 A0 FF 
23e50     FD 00 48 FD | 	qrotate	##1073741824, result1
23e54     19 12 62 FD | 	getqy	arg01
23e58     09 13 52 F6 | 	abs	arg01, arg01 wc
23e5c     1F 20 C6 C9 |  if_b	decod	local02, #31
23e60     00 20 06 36 |  if_ae	mov	local02, #0
23e64     78 F1 BF FD | 	call	#__system___float_fromuns
23e68     10 FB 61 F5 | 	xor	result1, local02
23e6c     FD 12 02 F6 | 	mov	arg01, result1
23e70     00 40 27 FF 
23e74     00 14 06 F6 | 	mov	arg02, ##1317011456
23e78     6C F7 BF FD | 	call	#__system___float_div
23e7c     FD 22 02 F6 | 	mov	local03, result1
23e80                 | LR__3382
23e80     11 FB 01 F6 | 	mov	result1, local03
23e84     A7 F0 03 F6 | 	mov	ptra, fp
23e88     B2 00 A0 FD | 	call	#popregs_
23e8c                 | __system____builtin_sinf_ret
23e8c     2D 00 64 FD | 	ret
23e90                 | 
23e90                 | __system____builtin_tanf
23e90     02 4A 05 F6 | 	mov	COUNT_, #2
23e94     A8 00 A0 FD | 	call	#pushregs_
23e98     09 1F 02 F6 | 	mov	local01, arg01
23e9c     A4 FE BF FD | 	call	#__system____builtin_sinf
23ea0     FD 20 02 F6 | 	mov	local02, result1
23ea4     0F 15 02 F6 | 	mov	arg02, local01
23ea8     87 E4 1F FF 
23eac     DB 13 06 F6 | 	mov	arg01, ##1070141403
23eb0     1F 14 E6 F4 | 	bitnot	arg02, #31
23eb4     5C F1 BF FD | 	call	#__system___float_add
23eb8     FD 12 02 F6 | 	mov	arg01, result1
23ebc     84 FE BF FD | 	call	#__system____builtin_sinf
23ec0     FD 14 02 F6 | 	mov	arg02, result1
23ec4     10 13 02 F6 | 	mov	arg01, local02
23ec8     1C F7 BF FD | 	call	#__system___float_div
23ecc     A7 F0 03 F6 | 	mov	ptra, fp
23ed0     B2 00 A0 FD | 	call	#popregs_
23ed4                 | __system____builtin_tanf_ret
23ed4     2D 00 64 FD | 	ret
23ed8                 | 
23ed8                 | __system____builtin_asinf
23ed8     01 4A 05 F6 | 	mov	COUNT_, #1
23edc     A8 00 A0 FD | 	call	#pushregs_
23ee0     09 1F 02 F6 | 	mov	local01, arg01
23ee4     0F 15 02 F6 | 	mov	arg02, local01
23ee8     0F 13 02 F6 | 	mov	arg01, local01
23eec     F4 F4 BF FD | 	call	#__system___float_mul
23ef0     FD 14 02 F6 | 	mov	arg02, result1
23ef4     00 C0 1F FF 
23ef8     00 12 06 F6 | 	mov	arg01, ##1065353216
23efc     1F 14 E6 F4 | 	bitnot	arg02, #31
23f00     10 F1 BF FD | 	call	#__system___float_add
23f04     FD 12 02 F6 | 	mov	arg01, result1
23f08     00 F4 BF FD | 	call	#__system___float_sqrt
23f0c     FD 14 02 F6 | 	mov	arg02, result1
23f10     0F 13 02 F6 | 	mov	arg01, local01
23f14     58 00 B0 FD | 	call	#__system____builtin_atan2f
23f18     A7 F0 03 F6 | 	mov	ptra, fp
23f1c     B2 00 A0 FD | 	call	#popregs_
23f20                 | __system____builtin_asinf_ret
23f20     2D 00 64 FD | 	ret
23f24                 | 
23f24                 | __system____builtin_acosf
23f24     01 4A 05 F6 | 	mov	COUNT_, #1
23f28     A8 00 A0 FD | 	call	#pushregs_
23f2c     09 1F 02 F6 | 	mov	local01, arg01
23f30     0F 15 02 F6 | 	mov	arg02, local01
23f34     0F 13 02 F6 | 	mov	arg01, local01
23f38     A8 F4 BF FD | 	call	#__system___float_mul
23f3c     FD 14 02 F6 | 	mov	arg02, result1
23f40     00 C0 1F FF 
23f44     00 12 06 F6 | 	mov	arg01, ##1065353216
23f48     1F 14 E6 F4 | 	bitnot	arg02, #31
23f4c     C4 F0 BF FD | 	call	#__system___float_add
23f50     FD 12 02 F6 | 	mov	arg01, result1
23f54     B4 F3 BF FD | 	call	#__system___float_sqrt
23f58     FD 12 02 F6 | 	mov	arg01, result1
23f5c     0F 15 02 F6 | 	mov	arg02, local01
23f60     0C 00 B0 FD | 	call	#__system____builtin_atan2f
23f64     A7 F0 03 F6 | 	mov	ptra, fp
23f68     B2 00 A0 FD | 	call	#popregs_
23f6c                 | __system____builtin_acosf_ret
23f6c     2D 00 64 FD | 	ret
23f70                 | 
23f70                 | __system____builtin_atan2f
23f70     04 4A 05 F6 | 	mov	COUNT_, #4
23f74     A8 00 A0 FD | 	call	#pushregs_
23f78     09 1F 02 F6 | 	mov	local01, arg01
23f7c     0A 21 02 F6 | 	mov	local02, arg02
23f80     0F 13 02 F6 | 	mov	arg01, local01
23f84     00 14 06 F6 | 	mov	arg02, #0
23f88     01 16 06 F6 | 	mov	arg03, #1
23f8c     88 F8 BF FD | 	call	#__system___float_cmp
23f90     00 FA 0D F2 | 	cmp	result1, #0 wz
23f94     28 00 90 5D |  if_ne	jmp	#LR__3390
23f98     10 13 02 F6 | 	mov	arg01, local02
23f9c     00 14 06 F6 | 	mov	arg02, #0
23fa0     01 16 06 F6 | 	mov	arg03, #1
23fa4     70 F8 BF FD | 	call	#__system___float_cmp
23fa8     00 FA 55 F2 | 	cmps	result1, #0 wc
23fac     87 24 60 CF 
23fb0     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
23fb4     DC 00 90 CD |  if_b	jmp	#LR__3391
23fb8     00 FA 05 F6 | 	mov	result1, #0
23fbc     D4 00 90 FD | 	jmp	#LR__3391
23fc0                 | LR__3390
23fc0     10 13 02 F6 | 	mov	arg01, local02
23fc4     10 15 02 F6 | 	mov	arg02, local02
23fc8     18 F4 BF FD | 	call	#__system___float_mul
23fcc     FD 22 02 F6 | 	mov	local03, result1
23fd0     0F 13 02 F6 | 	mov	arg01, local01
23fd4     0F 15 02 F6 | 	mov	arg02, local01
23fd8     08 F4 BF FD | 	call	#__system___float_mul
23fdc     FD 14 02 F6 | 	mov	arg02, result1
23fe0     11 13 02 F6 | 	mov	arg01, local03
23fe4     2C F0 BF FD | 	call	#__system___float_add
23fe8     FD 12 02 F6 | 	mov	arg01, result1
23fec     1C F3 BF FD | 	call	#__system___float_sqrt
23ff0     FD 22 02 F6 | 	mov	local03, result1
23ff4     10 13 02 F6 | 	mov	arg01, local02
23ff8     11 15 02 F6 | 	mov	arg02, local03
23ffc     E8 F5 BF FD | 	call	#__system___float_div
24000     FD 20 02 F6 | 	mov	local02, result1
24004     0F 13 02 F6 | 	mov	arg01, local01
24008     11 15 02 F6 | 	mov	arg02, local03
2400c     D8 F5 BF FD | 	call	#__system___float_div
24010     FD 1E 02 F6 | 	mov	local01, result1
24014     00 40 27 FF 
24018     00 12 06 F6 | 	mov	arg01, ##1317011456
2401c     10 15 02 F6 | 	mov	arg02, local02
24020     C0 F3 BF FD | 	call	#__system___float_mul
24024     FD 12 02 F6 | 	mov	arg01, result1
24028     00 14 06 F6 | 	mov	arg02, #0
2402c     7C F8 BF FD | 	call	#__system___float_tointeger
24030     FD 22 02 F6 | 	mov	local03, result1
24034     00 40 27 FF 
24038     00 12 06 F6 | 	mov	arg01, ##1317011456
2403c     0F 15 02 F6 | 	mov	arg02, local01
24040     A0 F3 BF FD | 	call	#__system___float_mul
24044     FD 12 02 F6 | 	mov	arg01, result1
24048     00 14 06 F6 | 	mov	arg02, #0
2404c     5C F8 BF FD | 	call	#__system___float_tointeger
24050     FD 22 52 FD | 	qvector	local03, result1
24054     87 24 20 FF 
24058     DB 23 06 F6 | 	mov	local03, ##1078530011
2405c     19 12 62 FD | 	getqy	arg01
24060     01 12 C6 F0 | 	sar	arg01, #1
24064     09 13 52 F6 | 	abs	arg01, arg01 wc
24068     1F 24 C6 C9 |  if_b	decod	local04, #31
2406c     00 24 06 36 |  if_ae	mov	local04, #0
24070     6C EF BF FD | 	call	#__system___float_fromuns
24074     12 FB 61 F5 | 	xor	result1, local04
24078     FD 12 02 F6 | 	mov	arg01, result1
2407c     00 40 27 FF 
24080     00 14 06 F6 | 	mov	arg02, ##1317011456
24084     60 F5 BF FD | 	call	#__system___float_div
24088     FD 14 02 F6 | 	mov	arg02, result1
2408c     11 13 02 F6 | 	mov	arg01, local03
24090     50 F3 BF FD | 	call	#__system___float_mul
24094                 | LR__3391
24094     A7 F0 03 F6 | 	mov	ptra, fp
24098     B2 00 A0 FD | 	call	#popregs_
2409c                 | __system____builtin_atan2f_ret
2409c     2D 00 64 FD | 	ret
240a0                 | 
240a0                 | __system____builtin_exp2f
240a0     04 4A 05 F6 | 	mov	COUNT_, #4
240a4     A8 00 A0 FD | 	call	#pushregs_
240a8     09 1F 02 F6 | 	mov	local01, arg01
240ac     00 7F 21 FF 
240b0     00 14 06 F6 | 	mov	arg02, ##1123942400
240b4     01 16 66 F6 | 	neg	arg03, #1
240b8     5C F7 BF FD | 	call	#__system___float_cmp
240bc     00 FA 55 F2 | 	cmps	result1, #0 wc
240c0     00 C0 3F 3F 
240c4     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
240c8     DC 00 90 3D |  if_ae	jmp	#LR__3401
240cc     0F 13 02 F6 | 	mov	arg01, local01
240d0     00 7F 61 FF 
240d4     00 14 06 F6 | 	mov	arg02, ##-1023541248
240d8     01 16 06 F6 | 	mov	arg03, #1
240dc     38 F7 BF FD | 	call	#__system___float_cmp
240e0     00 FA 55 F2 | 	cmps	result1, #0 wc
240e4     00 FA 05 C6 |  if_b	mov	result1, #0
240e8     BC 00 90 CD |  if_b	jmp	#LR__3401
240ec     0F 13 02 F6 | 	mov	arg01, local01
240f0     00 14 06 F6 | 	mov	arg02, #0
240f4     B4 F7 BF FD | 	call	#__system___float_tointeger
240f8     FD 20 02 F6 | 	mov	local02, result1
240fc     10 13 52 F6 | 	abs	arg01, local02 wc
24100     1F 22 C6 C9 |  if_b	decod	local03, #31
24104     00 22 06 36 |  if_ae	mov	local03, #0
24108     D4 EE BF FD | 	call	#__system___float_fromuns
2410c     11 FB 61 F5 | 	xor	result1, local03
24110     FD 14 02 F6 | 	mov	arg02, result1
24114     0F 13 02 F6 | 	mov	arg01, local01
24118     1F 14 E6 F4 | 	bitnot	arg02, #31
2411c     F4 EE BF FD | 	call	#__system___float_add
24120     FD 24 02 F6 | 	mov	local04, result1
24124     12 13 02 F6 | 	mov	arg01, local04
24128     00 14 06 F6 | 	mov	arg02, #0
2412c     01 16 06 F6 | 	mov	arg03, #1
24130     E4 F6 BF FD | 	call	#__system___float_cmp
24134     00 FA 55 F2 | 	cmps	result1, #0 wc
24138     18 00 90 3D |  if_ae	jmp	#LR__3400
2413c     12 13 02 F6 | 	mov	arg01, local04
24140     00 C0 1F FF 
24144     00 14 06 F6 | 	mov	arg02, ##1065353216
24148     C8 EE BF FD | 	call	#__system___float_add
2414c     FD 24 02 F6 | 	mov	local04, result1
24150     01 20 86 F1 | 	sub	local02, #1
24154                 | LR__3400
24154     7F 20 06 F1 | 	add	local02, #127
24158     17 20 66 F0 | 	shl	local02, #23
2415c     12 13 02 F6 | 	mov	arg01, local04
24160     00 80 26 FF 
24164     00 14 06 F6 | 	mov	arg02, ##1291845632
24168     78 F2 BF FD | 	call	#__system___float_mul
2416c     FD 12 02 F6 | 	mov	arg01, result1
24170     00 14 06 F6 | 	mov	arg02, #0
24174     34 F7 BF FD | 	call	#__system___float_tointeger
24178     FD 24 0A F6 | 	mov	local04, result1 wz
2417c     10 FB 01 A6 |  if_e	mov	result1, local02
24180     24 00 90 AD |  if_e	jmp	#LR__3401
24184     3E 24 26 F4 | 	bith	local04, #62
24188     0F 24 62 FD | 	qexp	local04
2418c     10 13 02 F6 | 	mov	arg01, local02
24190     18 14 62 FD | 	getqx	arg02
24194     01 14 06 F1 | 	add	arg02, #1
24198     01 14 46 F0 | 	shr	arg02, #1
2419c     00 80 1F FF 
241a0     00 14 06 F1 | 	add	arg02, ##1056964608
241a4     3C F2 BF FD | 	call	#__system___float_mul
241a8                 | LR__3401
241a8     A7 F0 03 F6 | 	mov	ptra, fp
241ac     B2 00 A0 FD | 	call	#popregs_
241b0                 | __system____builtin_exp2f_ret
241b0     2D 00 64 FD | 	ret
241b4                 | 
241b4                 | __system____builtin_log2f
241b4     06 4A 05 F6 | 	mov	COUNT_, #6
241b8     A8 00 A0 FD | 	call	#pushregs_
241bc     09 1F 02 F6 | 	mov	local01, arg01
241c0     09 21 0A F6 | 	mov	local02, arg01 wz
241c4     00 00 40 5F 
241c8     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
241cc     00 40 00 AF 
241d0     00 FA 65 A6 |  if_e	neg	result1, ##8388608
241d4     08 01 90 AD |  if_e	jmp	#LR__3414
241d8     00 20 56 F2 | 	cmps	local02, #0 wc
241dc     00 E0 3F CF 
241e0     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
241e4     F8 00 90 CD |  if_b	jmp	#LR__3414
241e8     0F 13 02 F6 | 	mov	arg01, local01
241ec     00 90 20 FF 
241f0     00 14 06 F6 | 	mov	arg02, ##1092616192
241f4     01 16 06 F6 | 	mov	arg03, #1
241f8     1C F6 BF FD | 	call	#__system___float_cmp
241fc     00 FA 0D F2 | 	cmp	result1, #0 wz
24200     4D 2A 20 AF 
24204     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
24208     D4 00 90 AD |  if_e	jmp	#LR__3414
2420c     0F 13 02 F6 | 	mov	arg01, local01
24210     FC 16 20 FF 
24214     54 14 06 F6 | 	mov	arg02, ##1076754516
24218     01 16 06 F6 | 	mov	arg03, #1
2421c     F8 F5 BF FD | 	call	#__system___float_cmp
24220     00 FA 0D F2 | 	cmp	result1, #0 wz
24224     55 DC 1F AF 
24228     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2422c     B0 00 90 AD |  if_e	jmp	#LR__3414
24230     10 23 02 F6 | 	mov	local03, local02
24234     17 22 46 F0 | 	shr	local03, #23
24238     11 23 E2 F8 | 	getbyte	local03, local03, #0
2423c     17 21 06 F4 | 	bitl	local02, #279
24240     10 25 02 F6 | 	mov	local04, local02
24244     FF 22 0E F2 | 	cmp	local03, #255 wz
24248     1C 00 90 5D |  if_ne	jmp	#LR__3410
2424c     00 24 0E F2 | 	cmp	local04, #0 wz
24250     00 C0 3F 5F 
24254     00 26 06 56 |  if_ne	mov	local05, ##2139095040
24258     00 E0 3F AF 
2425c     00 26 06 A6 |  if_e	mov	local05, ##2143289344
24260     13 FB 01 F6 | 	mov	result1, local05
24264     78 00 90 FD | 	jmp	#LR__3414
24268                 | LR__3410
24268     00 22 0E F2 | 	cmp	local03, #0 wz
2426c     17 24 26 54 |  if_ne	bith	local04, #23
24270     7F 22 86 51 |  if_ne	sub	local03, #127
24274     28 00 90 5D |  if_ne	jmp	#LR__3413
24278     00 24 0E F2 | 	cmp	local04, #0 wz
2427c     00 40 00 AF 
24280     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24284     58 00 90 AD |  if_e	jmp	#LR__3414
24288     7E 22 66 F6 | 	neg	local03, #126
2428c     97 08 48 FB | 	callpa	#(@LR__3412-@LR__3411)>>2,fcache_load_ptr_
24290                 | LR__3411
24290     17 24 2E F4 | 	testbn	local04, #23 wz
24294     01 24 66 A0 |  if_e	shl	local04, #1
24298     01 22 06 A1 |  if_e	add	local03, #1
2429c     F0 FF 9F AD |  if_e	jmp	#LR__3411
242a0                 | LR__3412
242a0                 | LR__3413
242a0     0E 24 62 FD | 	qlog	local04
242a4     01 22 86 F1 | 	sub	local03, #1
242a8     11 13 52 F6 | 	abs	arg01, local03 wc
242ac     1F 28 C6 C9 |  if_b	decod	local06, #31
242b0     00 28 06 36 |  if_ae	mov	local06, #0
242b4     18 26 62 FD | 	getqx	local05
242b8     9B 26 06 F4 | 	bitl	local05, #155
242bc     08 26 06 F1 | 	add	local05, #8
242c0     04 26 46 F0 | 	shr	local05, #4
242c4     00 C0 1F FF 
242c8     00 26 06 F1 | 	add	local05, ##1065353216
242cc     10 ED BF FD | 	call	#__system___float_fromuns
242d0     14 FB 61 F5 | 	xor	result1, local06
242d4     FD 14 02 F6 | 	mov	arg02, result1
242d8     13 13 02 F6 | 	mov	arg01, local05
242dc     34 ED BF FD | 	call	#__system___float_add
242e0                 | LR__3414
242e0     A7 F0 03 F6 | 	mov	ptra, fp
242e4     B2 00 A0 FD | 	call	#popregs_
242e8                 | __system____builtin_log2f_ret
242e8     2D 00 64 FD | 	ret
242ec                 | 
242ec                 | __system____builtin_powf
242ec     04 4A 05 F6 | 	mov	COUNT_, #4
242f0     A8 00 A0 FD | 	call	#pushregs_
242f4     09 1F 02 F6 | 	mov	local01, arg01
242f8     0A 21 02 F6 | 	mov	local02, arg02
242fc     10 13 02 F6 | 	mov	arg01, local02
24300     00 14 06 F6 | 	mov	arg02, #0
24304     A4 F5 BF FD | 	call	#__system___float_tointeger
24308     FD 22 02 F6 | 	mov	local03, result1
2430c     11 13 52 F6 | 	abs	arg01, local03 wc
24310     1F 24 C6 C9 |  if_b	decod	local04, #31
24314     00 24 06 36 |  if_ae	mov	local04, #0
24318     C4 EC BF FD | 	call	#__system___float_fromuns
2431c     12 FB 61 F5 | 	xor	result1, local04
24320     FD 12 02 F6 | 	mov	arg01, result1
24324     10 15 02 F6 | 	mov	arg02, local02
24328     01 16 06 F6 | 	mov	arg03, #1
2432c     E8 F4 BF FD | 	call	#__system___float_cmp
24330     00 FA 0D F2 | 	cmp	result1, #0 wz
24334     18 00 90 5D |  if_ne	jmp	#LR__3420
24338     00 C0 1F FF 
2433c     00 12 06 F6 | 	mov	arg01, ##1065353216
24340     0F 15 02 F6 | 	mov	arg02, local01
24344     11 17 02 F6 | 	mov	arg03, local03
24348     A0 00 B0 FD | 	call	#__system___float_pow_n
2434c     58 00 90 FD | 	jmp	#LR__3421
24350                 | LR__3420
24350     0F 13 02 F6 | 	mov	arg01, local01
24354     00 14 06 F6 | 	mov	arg02, #0
24358     01 16 06 F6 | 	mov	arg03, #1
2435c     B8 F4 BF FD | 	call	#__system___float_cmp
24360     00 FA 55 F2 | 	cmps	result1, #0 wc
24364     00 E0 3F CF 
24368     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2436c     38 00 90 CD |  if_b	jmp	#LR__3421
24370     0F 13 02 F6 | 	mov	arg01, local01
24374     00 14 06 F6 | 	mov	arg02, #0
24378     01 16 06 F6 | 	mov	arg03, #1
2437c     98 F4 BF FD | 	call	#__system___float_cmp
24380     00 FA 0D F2 | 	cmp	result1, #0 wz
24384     00 FA 05 A6 |  if_e	mov	result1, #0
24388     1C 00 90 AD |  if_e	jmp	#LR__3421
2438c     0F 13 02 F6 | 	mov	arg01, local01
24390     20 FE BF FD | 	call	#__system____builtin_log2f
24394     FD 12 02 F6 | 	mov	arg01, result1
24398     10 15 02 F6 | 	mov	arg02, local02
2439c     44 F0 BF FD | 	call	#__system___float_mul
243a0     FD 12 02 F6 | 	mov	arg01, result1
243a4     F8 FC BF FD | 	call	#__system____builtin_exp2f
243a8                 | LR__3421
243a8     A7 F0 03 F6 | 	mov	ptra, fp
243ac     B2 00 A0 FD | 	call	#popregs_
243b0                 | __system____builtin_powf_ret
243b0     2D 00 64 FD | 	ret
243b4                 | 
243b4                 | __system____builtin_logbase
243b4     02 4A 05 F6 | 	mov	COUNT_, #2
243b8     A8 00 A0 FD | 	call	#pushregs_
243bc     09 1F 02 F6 | 	mov	local01, arg01
243c0     0A 13 02 F6 | 	mov	arg01, arg02
243c4     EC FD BF FD | 	call	#__system____builtin_log2f
243c8     FD 20 02 F6 | 	mov	local02, result1
243cc     0F 13 02 F6 | 	mov	arg01, local01
243d0     E0 FD BF FD | 	call	#__system____builtin_log2f
243d4     FD 14 02 F6 | 	mov	arg02, result1
243d8     10 13 02 F6 | 	mov	arg01, local02
243dc     08 F2 BF FD | 	call	#__system___float_div
243e0     A7 F0 03 F6 | 	mov	ptra, fp
243e4     B2 00 A0 FD | 	call	#popregs_
243e8                 | __system____builtin_logbase_ret
243e8     2D 00 64 FD | 	ret
243ec                 | 
243ec                 | __system___float_pow_n
243ec     05 4A 05 F6 | 	mov	COUNT_, #5
243f0     A8 00 A0 FD | 	call	#pushregs_
243f4     09 1F 02 F6 | 	mov	local01, arg01
243f8     0A 21 02 F6 | 	mov	local02, arg02
243fc     0B 23 02 F6 | 	mov	local03, arg03
24400     00 22 56 F2 | 	cmps	local03, #0 wc
24404     18 00 90 3D |  if_ae	jmp	#LR__3430
24408     01 24 06 F6 | 	mov	local04, #1
2440c     11 23 62 F6 | 	neg	local03, local03
24410     00 22 56 F2 | 	cmps	local03, #0 wc
24414     00 FA 05 C6 |  if_b	mov	result1, #0
24418     94 00 90 CD |  if_b	jmp	#LR__3438
2441c     04 00 90 FD | 	jmp	#LR__3431
24420                 | LR__3430
24420     00 24 06 F6 | 	mov	local04, #0
24424                 | LR__3431
24424     00 C0 1F FF 
24428     00 26 06 F6 | 	mov	local05, ##1065353216
2442c                 | LR__3432
2442c     01 22 56 F2 | 	cmps	local03, #1 wc
24430     30 00 90 CD |  if_b	jmp	#LR__3434
24434     01 22 CE F7 | 	test	local03, #1 wz
24438     10 00 90 AD |  if_e	jmp	#LR__3433
2443c     13 13 02 F6 | 	mov	arg01, local05
24440     10 15 02 F6 | 	mov	arg02, local02
24444     9C EF BF FD | 	call	#__system___float_mul
24448     FD 26 02 F6 | 	mov	local05, result1
2444c                 | LR__3433
2444c     01 22 C6 F0 | 	sar	local03, #1
24450     10 13 02 F6 | 	mov	arg01, local02
24454     10 15 02 F6 | 	mov	arg02, local02
24458     88 EF BF FD | 	call	#__system___float_mul
2445c     FD 20 02 F6 | 	mov	local02, result1
24460     C8 FF 9F FD | 	jmp	#LR__3432
24464                 | LR__3434
24464     00 24 0E F2 | 	cmp	local04, #0 wz
24468     14 00 90 AD |  if_e	jmp	#LR__3435
2446c     0F 13 02 F6 | 	mov	arg01, local01
24470     13 15 02 F6 | 	mov	arg02, local05
24474     70 F1 BF FD | 	call	#__system___float_div
24478     FD 26 02 F6 | 	mov	local05, result1
2447c     2C 00 90 FD | 	jmp	#LR__3437
24480                 | LR__3435
24480     0F 13 02 F6 | 	mov	arg01, local01
24484     00 C0 1F FF 
24488     00 14 06 F6 | 	mov	arg02, ##1065353216
2448c     01 16 06 F6 | 	mov	arg03, #1
24490     84 F3 BF FD | 	call	#__system___float_cmp
24494     00 FA 0D F2 | 	cmp	result1, #0 wz
24498     10 00 90 AD |  if_e	jmp	#LR__3436
2449c     0F 13 02 F6 | 	mov	arg01, local01
244a0     13 15 02 F6 | 	mov	arg02, local05
244a4     3C EF BF FD | 	call	#__system___float_mul
244a8     FD 26 02 F6 | 	mov	local05, result1
244ac                 | LR__3436
244ac                 | LR__3437
244ac     13 FB 01 F6 | 	mov	result1, local05
244b0                 | LR__3438
244b0     A7 F0 03 F6 | 	mov	ptra, fp
244b4     B2 00 A0 FD | 	call	#popregs_
244b8                 | __system___float_pow_n_ret
244b8     2D 00 64 FD | 	ret
244bc                 | 
244bc                 | __system___gc_ptrs
244bc     EC 00 02 F6 | 	mov	_var01, __heap_ptr
244c0     00 03 02 F6 | 	mov	_var02, _var01
244c4     76 01 00 FF 
244c8     F8 03 06 F1 | 	add	_var02, ##191992
244cc     00 FD 09 FB | 	rdlong	result2, _var01 wz
244d0     74 00 90 5D |  if_ne	jmp	#LR__3440
244d4     01 FD 01 F6 | 	mov	result2, _var02
244d8     00 FD 81 F1 | 	sub	result2, _var01
244dc     00 03 58 FC | 	wrword	#1, _var01
244e0     00 FB 01 F6 | 	mov	result1, _var01
244e4     02 FA 05 F1 | 	add	result1, #2
244e8     36 00 80 FF 
244ec     FD 20 59 FC | 	wrword	##27792, result1
244f0     00 FB 01 F6 | 	mov	result1, _var01
244f4     04 FA 05 F1 | 	add	result1, #4
244f8     FD 00 58 FC | 	wrword	#0, result1
244fc     00 FB 01 F6 | 	mov	result1, _var01
24500     06 FA 05 F1 | 	add	result1, #6
24504     FD 02 58 FC | 	wrword	#1, result1
24508     10 00 06 F1 | 	add	_var01, #16
2450c     FE FC 51 F6 | 	abs	result2, result2 wc
24510     04 FC 45 F0 | 	shr	result2, #4
24514     FE FC 81 F6 | 	negc	result2, result2
24518     00 FD 51 FC | 	wrword	result2, _var01
2451c     00 FD 01 F6 | 	mov	result2, _var01
24520     02 FC 05 F1 | 	add	result2, #2
24524     36 00 80 FF 
24528     FE 1E 59 FC | 	wrword	##27791, result2
2452c     00 FD 01 F6 | 	mov	result2, _var01
24530     04 FC 05 F1 | 	add	result2, #4
24534     FE 00 58 FC | 	wrword	#0, result2
24538     00 FD 01 F6 | 	mov	result2, _var01
2453c     06 FC 05 F1 | 	add	result2, #6
24540     FE 00 58 FC | 	wrword	#0, result2
24544     10 00 86 F1 | 	sub	_var01, #16
24548                 | LR__3440
24548     00 FB 01 F6 | 	mov	result1, _var01
2454c     01 FD 01 F6 | 	mov	result2, _var02
24550                 | __system___gc_ptrs_ret
24550     2D 00 64 FD | 	ret
24554                 | 
24554                 | __system___gc_tryalloc
24554     0B 4A 05 F6 | 	mov	COUNT_, #11
24558     A8 00 A0 FD | 	call	#pushregs_
2455c     09 1F 02 F6 | 	mov	local01, arg01
24560     0A 21 02 F6 | 	mov	local02, arg02
24564     54 FF BF FD | 	call	#__system___gc_ptrs
24568     FD 22 02 F6 | 	mov	local03, result1
2456c     FE 24 02 F6 | 	mov	local04, result2
24570     11 27 02 F6 | 	mov	local05, local03
24574     00 28 06 F6 | 	mov	local06, #0
24578     97 1E 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
2457c                 | LR__3450
2457c     13 2B 02 F6 | 	mov	local07, local05
24580     06 26 06 F1 | 	add	local05, #6
24584     13 15 EA FA | 	rdword	arg02, local05 wz
24588     11 13 02 F6 | 	mov	arg01, local03
2458c     00 FA 05 A6 |  if_e	mov	result1, #0
24590     04 14 66 50 |  if_ne	shl	arg02, #4
24594     0A 13 02 51 |  if_ne	add	arg01, arg02
24598     09 FB 01 56 |  if_ne	mov	result1, arg01
2459c     FD 26 0A F6 | 	mov	local05, result1 wz
245a0     13 29 E2 5A |  if_ne	rdword	local06, local05
245a4     00 26 0E F2 | 	cmp	local05, #0 wz
245a8     12 27 52 52 |  if_ne	cmps	local05, local04 wc
245ac     08 00 90 1D |  if_a	jmp	#LR__3452
245b0     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
245b4     C4 FF 9F 1D |  if_a	jmp	#LR__3450
245b8                 | LR__3451
245b8                 | LR__3452
245b8     00 26 0E F2 | 	cmp	local05, #0 wz
245bc     13 FB 01 A6 |  if_e	mov	result1, local05
245c0     3C 01 90 AD |  if_e	jmp	#LR__3455
245c4     13 FD 01 F6 | 	mov	result2, local05
245c8     06 FC 05 F1 | 	add	result2, #6
245cc     FE 2C E2 FA | 	rdword	local08, result2
245d0     14 1F 52 F2 | 	cmps	local01, local06 wc
245d4     C0 00 90 3D |  if_ae	jmp	#LR__3454
245d8     13 1F 52 FC | 	wrword	local01, local05
245dc     13 13 02 F6 | 	mov	arg01, local05
245e0     0F 2D 02 F6 | 	mov	local08, local01
245e4     04 2C 66 F0 | 	shl	local08, #4
245e8     16 13 02 F1 | 	add	arg01, local08
245ec     0F 29 82 F1 | 	sub	local06, local01
245f0     09 29 52 FC | 	wrword	local06, arg01
245f4     09 2D 02 F6 | 	mov	local08, arg01
245f8     02 2C 06 F1 | 	add	local08, #2
245fc     36 00 80 FF 
24600     16 1F 59 FC | 	wrword	##27791, local08
24604     13 15 0A F6 | 	mov	arg02, local05 wz
24608     00 FA 05 A6 |  if_e	mov	result1, #0
2460c     11 15 82 51 |  if_ne	sub	arg02, local03
24610     04 14 46 50 |  if_ne	shr	arg02, #4
24614     0A FB 01 56 |  if_ne	mov	result1, arg02
24618     09 2D 02 F6 | 	mov	local08, arg01
2461c     04 2C 06 F1 | 	add	local08, #4
24620     16 FB 51 FC | 	wrword	result1, local08
24624     13 2D 02 F6 | 	mov	local08, local05
24628     06 2C 06 F1 | 	add	local08, #6
2462c     09 15 02 F6 | 	mov	arg02, arg01
24630     16 2D E2 FA | 	rdword	local08, local08
24634     06 14 06 F1 | 	add	arg02, #6
24638     0A 2D 52 FC | 	wrword	local08, arg02
2463c     09 2F 02 F6 | 	mov	local09, arg01
24640     17 15 0A F6 | 	mov	arg02, local09 wz
24644     00 FA 05 A6 |  if_e	mov	result1, #0
24648     11 15 82 51 |  if_ne	sub	arg02, local03
2464c     04 14 46 50 |  if_ne	shr	arg02, #4
24650     0A FB 01 56 |  if_ne	mov	result1, arg02
24654     FD 2C 02 F6 | 	mov	local08, result1
24658     09 31 EA FA | 	rdword	local10, arg01 wz
2465c     00 FA 05 A6 |  if_e	mov	result1, #0
24660     04 30 66 50 |  if_ne	shl	local10, #4
24664     18 13 02 51 |  if_ne	add	arg01, local10
24668     09 FB 01 56 |  if_ne	mov	result1, arg01
2466c     FD 32 0A F6 | 	mov	local11, result1 wz
24670     24 00 90 AD |  if_e	jmp	#LR__3453
24674     12 33 52 F2 | 	cmps	local11, local04 wc
24678     1C 00 90 3D |  if_ae	jmp	#LR__3453
2467c     17 15 0A F6 | 	mov	arg02, local09 wz
24680     00 FA 05 A6 |  if_e	mov	result1, #0
24684     11 15 82 51 |  if_ne	sub	arg02, local03
24688     04 14 46 50 |  if_ne	shr	arg02, #4
2468c     0A FB 01 56 |  if_ne	mov	result1, arg02
24690     04 32 06 F1 | 	add	local11, #4
24694     19 FB 51 FC | 	wrword	result1, local11
24698                 | LR__3453
24698                 | LR__3454
24698     06 2A 06 F1 | 	add	local07, #6
2469c     15 2D 52 FC | 	wrword	local08, local07
246a0     36 00 00 FF 
246a4     80 2E 06 F6 | 	mov	local09, ##27776
246a8     10 2F 42 F5 | 	or	local09, local02
246ac     00 FA 05 F6 | 	mov	result1, #0
246b0     01 FA 61 FD | 	cogid	result1
246b4     FD 2E 42 F5 | 	or	local09, result1
246b8     13 33 02 F6 | 	mov	local11, local05
246bc     02 32 06 F1 | 	add	local11, #2
246c0     19 2F 52 FC | 	wrword	local09, local11
246c4     11 2F 02 F6 | 	mov	local09, local03
246c8     08 2E 06 F1 | 	add	local09, #8
246cc     13 33 02 F6 | 	mov	local11, local05
246d0     17 2F E2 FA | 	rdword	local09, local09
246d4     06 32 06 F1 | 	add	local11, #6
246d8     19 2F 52 FC | 	wrword	local09, local11
246dc     13 15 0A F6 | 	mov	arg02, local05 wz
246e0     00 FA 05 A6 |  if_e	mov	result1, #0
246e4     11 15 82 51 |  if_ne	sub	arg02, local03
246e8     04 14 46 50 |  if_ne	shr	arg02, #4
246ec     0A FB 01 56 |  if_ne	mov	result1, arg02
246f0     08 22 06 F1 | 	add	local03, #8
246f4     11 FB 51 FC | 	wrword	result1, local03
246f8     08 26 06 F1 | 	add	local05, #8
246fc     13 FB 01 F6 | 	mov	result1, local05
24700                 | LR__3455
24700     A7 F0 03 F6 | 	mov	ptra, fp
24704     B2 00 A0 FD | 	call	#popregs_
24708                 | __system___gc_tryalloc_ret
24708     2D 00 64 FD | 	ret
2470c                 | 
2470c                 | __system___gc_alloc_managed
2470c     01 4A 05 F6 | 	mov	COUNT_, #1
24710     A8 00 A0 FD | 	call	#pushregs_
24714     09 1F 02 F6 | 	mov	local01, arg01
24718     00 14 06 F6 | 	mov	arg02, #0
2471c     1C 00 B0 FD | 	call	#__system___gc_doalloc
24720     FD 14 0A F6 | 	mov	arg02, result1 wz
24724     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
24728     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2472c     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
24730     A7 F0 03 F6 | 	mov	ptra, fp
24734     B2 00 A0 FD | 	call	#popregs_
24738                 | __system___gc_alloc_managed_ret
24738     2D 00 64 FD | 	ret
2473c                 | 
2473c                 | __system___gc_doalloc
2473c     06 4A 05 F6 | 	mov	COUNT_, #6
24740     A8 00 A0 FD | 	call	#pushregs_
24744     09 1F 0A F6 | 	mov	local01, arg01 wz
24748     0A 21 02 F6 | 	mov	local02, arg02
2474c     00 FA 05 A6 |  if_e	mov	result1, #0
24750     8C 00 90 AD |  if_e	jmp	#LR__3467
24754     17 1E 06 F1 | 	add	local01, #23
24758     0F 1E 26 F5 | 	andn	local01, #15
2475c     04 1E 46 F0 | 	shr	local01, #4
24760     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24764     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24768     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2476c     C0 C0 BF FD | 	call	#__system___lockmem
24770     0F 13 02 F6 | 	mov	arg01, local01
24774     10 15 02 F6 | 	mov	arg02, local02
24778     D8 FD BF FD | 	call	#__system___gc_tryalloc
2477c     FD 22 0A F6 | 	mov	local03, result1 wz
24780     14 00 90 5D |  if_ne	jmp	#LR__3460
24784     70 03 B0 FD | 	call	#__system___gc_docollect
24788     0F 13 02 F6 | 	mov	arg01, local01
2478c     10 15 02 F6 | 	mov	arg02, local02
24790     C0 FD BF FD | 	call	#__system___gc_tryalloc
24794     FD 22 02 F6 | 	mov	local03, result1
24798                 | LR__3460
24798     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2479c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
247a0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
247a4     09 01 68 FC | 	wrlong	#0, arg01
247a8     00 22 0E F2 | 	cmp	local03, #0 wz
247ac     2C 00 90 AD |  if_e	jmp	#LR__3466
247b0     04 1E 66 F0 | 	shl	local01, #4
247b4     08 1E 86 F1 | 	sub	local01, #8
247b8     0F 25 52 F6 | 	abs	local04, local01 wc
247bc     02 24 46 F0 | 	shr	local04, #2
247c0     12 27 8A F6 | 	negc	local05, local04 wz
247c4     11 29 02 F6 | 	mov	local06, local03
247c8     10 00 90 AD |  if_e	jmp	#LR__3465
247cc     97 06 48 FB | 	callpa	#(@LR__3463-@LR__3461)>>2,fcache_load_ptr_
247d0                 | LR__3461
247d0     13 05 D8 FC | 	rep	@LR__3464, local05
247d4                 | LR__3462
247d4     14 01 68 FC | 	wrlong	#0, local06
247d8     04 28 06 F1 | 	add	local06, #4
247dc                 | LR__3463
247dc                 | LR__3464
247dc                 | LR__3465
247dc                 | LR__3466
247dc     11 FB 01 F6 | 	mov	result1, local03
247e0                 | LR__3467
247e0     A7 F0 03 F6 | 	mov	ptra, fp
247e4     B2 00 A0 FD | 	call	#popregs_
247e8                 | __system___gc_doalloc_ret
247e8     2D 00 64 FD | 	ret
247ec                 | 
247ec                 | __system___gc_isvalidptr
247ec     F8 16 06 F4 | 	bitl	arg03, #248
247f0     08 16 86 F1 | 	sub	arg03, #8
247f4     09 17 52 F2 | 	cmps	arg03, arg01 wc
247f8     08 00 90 CD |  if_b	jmp	#LR__3470
247fc     0A 17 52 F2 | 	cmps	arg03, arg02 wc
24800     08 00 90 CD |  if_b	jmp	#LR__3471
24804                 | LR__3470
24804     00 FA 05 F6 | 	mov	result1, #0
24808     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2480c                 | LR__3471
2480c     0B 01 02 F6 | 	mov	_var01, arg03
24810     09 01 62 F5 | 	xor	_var01, arg01
24814     0F 00 CE F7 | 	test	_var01, #15 wz
24818     00 FA 05 56 |  if_ne	mov	result1, #0
2481c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
24820     0B 01 02 F6 | 	mov	_var01, arg03
24824     02 00 06 F1 | 	add	_var01, #2
24828     00 01 E2 FA | 	rdword	_var01, _var01
2482c     7F 00 00 FF 
24830     C0 01 06 F5 | 	and	_var01, ##65472
24834     36 00 00 FF 
24838     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2483c     00 FA 05 56 |  if_ne	mov	result1, #0
24840     0B FB 01 A6 |  if_e	mov	result1, arg03
24844                 | __system___gc_isvalidptr_ret
24844     2D 00 64 FD | 	ret
24848                 | 
24848                 | __system___gc_free
24848     09 17 02 F6 | 	mov	arg03, arg01
2484c     6C FC BF FD | 	call	#__system___gc_ptrs
24850     FD 12 02 F6 | 	mov	arg01, result1
24854     FE 14 02 F6 | 	mov	arg02, result2
24858     90 FF BF FD | 	call	#__system___gc_isvalidptr
2485c     FD 14 0A F6 | 	mov	arg02, result1 wz
24860     28 00 90 AD |  if_e	jmp	#LR__3480
24864     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24868     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2486c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24870     BC BF BF FD | 	call	#__system___lockmem
24874     0A 13 02 F6 | 	mov	arg01, arg02
24878     14 00 B0 FD | 	call	#__system___gc_dofree
2487c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24880     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24884     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24888     09 01 68 FC | 	wrlong	#0, arg01
2488c                 | LR__3480
2488c                 | __system___gc_free_ret
2488c     2D 00 64 FD | 	ret
24890                 | 
24890                 | __system___gc_dofree
24890     06 4A 05 F6 | 	mov	COUNT_, #6
24894     A8 00 A0 FD | 	call	#pushregs_
24898     09 1F 02 F6 | 	mov	local01, arg01
2489c     1C FC BF FD | 	call	#__system___gc_ptrs
248a0     FD 20 02 F6 | 	mov	local02, result1
248a4     FE 22 02 F6 | 	mov	local03, result2
248a8     0F 15 02 F6 | 	mov	arg02, local01
248ac     02 14 06 F1 | 	add	arg02, #2
248b0     36 00 80 FF 
248b4     0A 1F 59 FC | 	wrword	##27791, arg02
248b8     0F 25 02 F6 | 	mov	local04, local01
248bc     0F 13 02 F6 | 	mov	arg01, local01
248c0     09 27 EA FA | 	rdword	local05, arg01 wz
248c4     00 FA 05 A6 |  if_e	mov	result1, #0
248c8     04 26 66 50 |  if_ne	shl	local05, #4
248cc     13 13 02 51 |  if_ne	add	arg01, local05
248d0     09 FB 01 56 |  if_ne	mov	result1, arg01
248d4     FD 28 02 F6 | 	mov	local06, result1
248d8     97 24 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
248dc                 | LR__3490
248dc     04 24 06 F1 | 	add	local04, #4
248e0     12 15 EA FA | 	rdword	arg02, local04 wz
248e4     10 13 02 F6 | 	mov	arg01, local02
248e8     00 FA 05 A6 |  if_e	mov	result1, #0
248ec     04 14 66 50 |  if_ne	shl	arg02, #4
248f0     0A 13 02 51 |  if_ne	add	arg01, arg02
248f4     09 FB 01 56 |  if_ne	mov	result1, arg01
248f8     FD 24 0A F6 | 	mov	local04, result1 wz
248fc     24 00 90 AD |  if_e	jmp	#LR__3492
24900     12 13 02 F6 | 	mov	arg01, local04
24904     00 FA 05 F6 | 	mov	result1, #0
24908     02 12 06 F1 | 	add	arg01, #2
2490c     09 13 E2 FA | 	rdword	arg01, arg01
24910     36 00 00 FF 
24914     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24918     01 FA 65 A6 |  if_e	neg	result1, #1
2491c     00 FA 0D F2 | 	cmp	result1, #0 wz
24920     B8 FF 9F AD |  if_e	jmp	#LR__3490
24924                 | LR__3491
24924                 | LR__3492
24924     00 24 0E F2 | 	cmp	local04, #0 wz
24928     10 25 02 A6 |  if_e	mov	local04, local02
2492c     12 15 02 F6 | 	mov	arg02, local04
24930     06 14 06 F1 | 	add	arg02, #6
24934     0F 13 02 F6 | 	mov	arg01, local01
24938     0A 15 E2 FA | 	rdword	arg02, arg02
2493c     06 12 06 F1 | 	add	arg01, #6
24940     09 15 52 FC | 	wrword	arg02, arg01
24944     0F 15 0A F6 | 	mov	arg02, local01 wz
24948     00 FA 05 A6 |  if_e	mov	result1, #0
2494c     10 15 82 51 |  if_ne	sub	arg02, local02
24950     04 14 46 50 |  if_ne	shr	arg02, #4
24954     0A FB 01 56 |  if_ne	mov	result1, arg02
24958     12 15 02 F6 | 	mov	arg02, local04
2495c     06 14 06 F1 | 	add	arg02, #6
24960     0A FB 51 FC | 	wrword	result1, arg02
24964     10 25 0A F2 | 	cmp	local04, local02 wz
24968     A4 00 90 AD |  if_e	jmp	#LR__3495
2496c     12 13 02 F6 | 	mov	arg01, local04
24970     09 27 EA FA | 	rdword	local05, arg01 wz
24974     00 FA 05 A6 |  if_e	mov	result1, #0
24978     04 26 66 50 |  if_ne	shl	local05, #4
2497c     13 13 02 51 |  if_ne	add	arg01, local05
24980     09 FB 01 56 |  if_ne	mov	result1, arg01
24984     0F FB 09 F2 | 	cmp	result1, local01 wz
24988     84 00 90 5D |  if_ne	jmp	#LR__3494
2498c     12 29 E2 FA | 	rdword	local06, local04
24990     0F 15 E2 FA | 	rdword	arg02, local01
24994     0A 29 02 F1 | 	add	local06, arg02
24998     12 29 52 FC | 	wrword	local06, local04
2499c     0F 29 02 F6 | 	mov	local06, local01
249a0     02 28 06 F1 | 	add	local06, #2
249a4     14 01 58 FC | 	wrword	#0, local06
249a8     0F 13 02 F6 | 	mov	arg01, local01
249ac     09 27 EA FA | 	rdword	local05, arg01 wz
249b0     00 FA 05 A6 |  if_e	mov	result1, #0
249b4     04 26 66 50 |  if_ne	shl	local05, #4
249b8     13 13 02 51 |  if_ne	add	arg01, local05
249bc     09 FB 01 56 |  if_ne	mov	result1, arg01
249c0     FD 28 02 F6 | 	mov	local06, result1
249c4     11 29 52 F2 | 	cmps	local06, local03 wc
249c8     20 00 90 3D |  if_ae	jmp	#LR__3493
249cc     12 15 0A F6 | 	mov	arg02, local04 wz
249d0     00 FA 05 A6 |  if_e	mov	result1, #0
249d4     10 15 82 51 |  if_ne	sub	arg02, local02
249d8     04 14 46 50 |  if_ne	shr	arg02, #4
249dc     0A FB 01 56 |  if_ne	mov	result1, arg02
249e0     14 15 02 F6 | 	mov	arg02, local06
249e4     04 14 06 F1 | 	add	arg02, #4
249e8     0A FB 51 FC | 	wrword	result1, arg02
249ec                 | LR__3493
249ec     0F 15 02 F6 | 	mov	arg02, local01
249f0     06 14 06 F1 | 	add	arg02, #6
249f4     12 FD 01 F6 | 	mov	result2, local04
249f8     0A 15 E2 FA | 	rdword	arg02, arg02
249fc     06 FC 05 F1 | 	add	result2, #6
24a00     FE 14 52 FC | 	wrword	arg02, result2
24a04     06 1E 06 F1 | 	add	local01, #6
24a08     0F 01 58 FC | 	wrword	#0, local01
24a0c     12 1F 02 F6 | 	mov	local01, local04
24a10                 | LR__3494
24a10                 | LR__3495
24a10     0F 13 02 F6 | 	mov	arg01, local01
24a14     09 27 EA FA | 	rdword	local05, arg01 wz
24a18     00 FA 05 A6 |  if_e	mov	result1, #0
24a1c     04 26 66 50 |  if_ne	shl	local05, #4
24a20     13 13 02 51 |  if_ne	add	arg01, local05
24a24     09 FB 01 56 |  if_ne	mov	result1, arg01
24a28     FD 14 0A F6 | 	mov	arg02, result1 wz
24a2c     B8 00 90 AD |  if_e	jmp	#LR__3497
24a30     11 15 52 F2 | 	cmps	arg02, local03 wc
24a34     B0 00 90 3D |  if_ae	jmp	#LR__3497
24a38     0A 13 02 F6 | 	mov	arg01, arg02
24a3c     00 FA 05 F6 | 	mov	result1, #0
24a40     02 12 06 F1 | 	add	arg01, #2
24a44     09 13 E2 FA | 	rdword	arg01, arg01
24a48     36 00 00 FF 
24a4c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24a50     01 FA 65 A6 |  if_e	neg	result1, #1
24a54     00 FA 0D F2 | 	cmp	result1, #0 wz
24a58     8C 00 90 AD |  if_e	jmp	#LR__3497
24a5c     0F 25 02 F6 | 	mov	local04, local01
24a60     12 29 E2 FA | 	rdword	local06, local04
24a64     0A 13 02 F6 | 	mov	arg01, arg02
24a68     09 1F E2 FA | 	rdword	local01, arg01
24a6c     0F 29 02 F1 | 	add	local06, local01
24a70     12 29 52 FC | 	wrword	local06, local04
24a74     09 29 02 F6 | 	mov	local06, arg01
24a78     06 28 06 F1 | 	add	local06, #6
24a7c     12 1F 02 F6 | 	mov	local01, local04
24a80     14 29 E2 FA | 	rdword	local06, local06
24a84     06 1E 06 F1 | 	add	local01, #6
24a88     0F 29 52 FC | 	wrword	local06, local01
24a8c     09 29 02 F6 | 	mov	local06, arg01
24a90     02 28 06 F1 | 	add	local06, #2
24a94     14 55 59 FC | 	wrword	#170, local06
24a98     09 29 02 F6 | 	mov	local06, arg01
24a9c     06 28 06 F1 | 	add	local06, #6
24aa0     14 01 58 FC | 	wrword	#0, local06
24aa4     09 27 EA FA | 	rdword	local05, arg01 wz
24aa8     00 FA 05 A6 |  if_e	mov	result1, #0
24aac     04 26 66 50 |  if_ne	shl	local05, #4
24ab0     13 13 02 51 |  if_ne	add	arg01, local05
24ab4     09 FB 01 56 |  if_ne	mov	result1, arg01
24ab8     FD 28 0A F6 | 	mov	local06, result1 wz
24abc     28 00 90 AD |  if_e	jmp	#LR__3496
24ac0     11 29 52 F2 | 	cmps	local06, local03 wc
24ac4     20 00 90 3D |  if_ae	jmp	#LR__3496
24ac8     12 15 0A F6 | 	mov	arg02, local04 wz
24acc     00 FA 05 A6 |  if_e	mov	result1, #0
24ad0     10 15 82 51 |  if_ne	sub	arg02, local02
24ad4     04 14 46 50 |  if_ne	shr	arg02, #4
24ad8     0A FB 01 56 |  if_ne	mov	result1, arg02
24adc     14 25 02 F6 | 	mov	local04, local06
24ae0     04 24 06 F1 | 	add	local04, #4
24ae4     12 FB 51 FC | 	wrword	result1, local04
24ae8                 | LR__3496
24ae8                 | LR__3497
24ae8     14 FB 01 F6 | 	mov	result1, local06
24aec     A7 F0 03 F6 | 	mov	ptra, fp
24af0     B2 00 A0 FD | 	call	#popregs_
24af4                 | __system___gc_dofree_ret
24af4     2D 00 64 FD | 	ret
24af8                 | 
24af8                 | __system___gc_docollect
24af8     05 4A 05 F6 | 	mov	COUNT_, #5
24afc     A8 00 A0 FD | 	call	#pushregs_
24b00     B8 F9 BF FD | 	call	#__system___gc_ptrs
24b04     FE 1E 02 F6 | 	mov	local01, result2
24b08     FD 20 02 F6 | 	mov	local02, result1
24b0c     10 13 02 F6 | 	mov	arg01, local02
24b10     09 23 EA FA | 	rdword	local03, arg01 wz
24b14     00 FA 05 A6 |  if_e	mov	result1, #0
24b18     04 22 66 50 |  if_ne	shl	local03, #4
24b1c     11 13 02 51 |  if_ne	add	arg01, local03
24b20     09 FB 01 56 |  if_ne	mov	result1, arg01
24b24     FD 24 0A F6 | 	mov	local04, result1 wz
24b28     00 FA 05 F6 | 	mov	result1, #0
24b2c     01 FA 61 FD | 	cogid	result1
24b30     FD 26 02 F6 | 	mov	local05, result1
24b34     48 00 90 AD |  if_e	jmp	#LR__3502
24b38     97 22 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
24b3c                 | LR__3500
24b3c     0F 25 52 F2 | 	cmps	local04, local01 wc
24b40     3C 00 90 3D |  if_ae	jmp	#LR__3502
24b44     12 15 02 F6 | 	mov	arg02, local04
24b48     02 14 06 F1 | 	add	arg02, #2
24b4c     0A 15 E2 FA | 	rdword	arg02, arg02
24b50     20 14 26 F5 | 	andn	arg02, #32
24b54     12 13 02 F6 | 	mov	arg01, local04
24b58     02 12 06 F1 | 	add	arg01, #2
24b5c     09 15 52 FC | 	wrword	arg02, arg01
24b60     12 13 02 F6 | 	mov	arg01, local04
24b64     09 23 EA FA | 	rdword	local03, arg01 wz
24b68     00 FA 05 A6 |  if_e	mov	result1, #0
24b6c     04 22 66 50 |  if_ne	shl	local03, #4
24b70     11 13 02 51 |  if_ne	add	arg01, local03
24b74     09 FB 01 56 |  if_ne	mov	result1, arg01
24b78     FD 24 0A F6 | 	mov	local04, result1 wz
24b7c     BC FF 9F 5D |  if_ne	jmp	#LR__3500
24b80                 | LR__3501
24b80                 | LR__3502
24b80     00 22 06 F6 | 	mov	local03, #0
24b84     00 12 06 F6 | 	mov	arg01, #0
24b88     7C BC BF FD | 	call	#__system____topofstack
24b8c     FD 14 02 F6 | 	mov	arg02, result1
24b90     11 13 02 F6 | 	mov	arg01, local03
24b94     90 00 B0 FD | 	call	#__system___gc_markhub
24b98     1C 01 B0 FD | 	call	#__system___gc_markcog
24b9c     10 13 02 F6 | 	mov	arg01, local02
24ba0     09 23 EA FA | 	rdword	local03, arg01 wz
24ba4     00 FA 05 A6 |  if_e	mov	result1, #0
24ba8     04 22 66 50 |  if_ne	shl	local03, #4
24bac     11 13 02 51 |  if_ne	add	arg01, local03
24bb0     09 FB 01 56 |  if_ne	mov	result1, arg01
24bb4     FD 20 0A F6 | 	mov	local02, result1 wz
24bb8     60 00 90 AD |  if_e	jmp	#LR__3506
24bbc                 | LR__3503
24bbc     10 25 02 F6 | 	mov	local04, local02
24bc0     12 13 02 F6 | 	mov	arg01, local04
24bc4     09 23 EA FA | 	rdword	local03, arg01 wz
24bc8     00 FA 05 A6 |  if_e	mov	result1, #0
24bcc     04 22 66 50 |  if_ne	shl	local03, #4
24bd0     11 13 02 51 |  if_ne	add	arg01, local03
24bd4     09 FB 01 56 |  if_ne	mov	result1, arg01
24bd8     FD 20 02 F6 | 	mov	local02, result1
24bdc     12 15 02 F6 | 	mov	arg02, local04
24be0     02 14 06 F1 | 	add	arg02, #2
24be4     0A 15 E2 FA | 	rdword	arg02, arg02
24be8     20 14 CE F7 | 	test	arg02, #32 wz
24bec     10 14 CE A7 |  if_e	test	arg02, #16 wz
24bf0     1C 00 90 5D |  if_ne	jmp	#LR__3505
24bf4     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24bf8     13 15 0A F2 | 	cmp	arg02, local05 wz
24bfc     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24c00     0C 00 90 5D |  if_ne	jmp	#LR__3504
24c04     12 13 02 F6 | 	mov	arg01, local04
24c08     84 FC BF FD | 	call	#__system___gc_dofree
24c0c     FD 20 02 F6 | 	mov	local02, result1
24c10                 | LR__3504
24c10                 | LR__3505
24c10     00 20 0E F2 | 	cmp	local02, #0 wz
24c14     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24c18     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3503
24c1c                 | LR__3506
24c1c     A7 F0 03 F6 | 	mov	ptra, fp
24c20     B2 00 A0 FD | 	call	#popregs_
24c24                 | __system___gc_docollect_ret
24c24     2D 00 64 FD | 	ret
24c28                 | 
24c28                 | __system___gc_markhub
24c28     04 4A 05 F6 | 	mov	COUNT_, #4
24c2c     A8 00 A0 FD | 	call	#pushregs_
24c30     09 1F 02 F6 | 	mov	local01, arg01
24c34     0A 21 02 F6 | 	mov	local02, arg02
24c38     80 F8 BF FD | 	call	#__system___gc_ptrs
24c3c     FD 22 02 F6 | 	mov	local03, result1
24c40     FE 24 02 F6 | 	mov	local04, result2
24c44                 | LR__3510
24c44     10 1F 52 F2 | 	cmps	local01, local02 wc
24c48     60 00 90 3D |  if_ae	jmp	#LR__3511
24c4c     0F 17 02 FB | 	rdlong	arg03, local01
24c50     04 1E 06 F1 | 	add	local01, #4
24c54     12 15 02 F6 | 	mov	arg02, local04
24c58     11 13 02 F6 | 	mov	arg01, local03
24c5c     8C FB BF FD | 	call	#__system___gc_isvalidptr
24c60     FD 16 0A F6 | 	mov	arg03, result1 wz
24c64     DC FF 9F AD |  if_e	jmp	#LR__3510
24c68     0B 13 02 F6 | 	mov	arg01, arg03
24c6c     00 FA 05 F6 | 	mov	result1, #0
24c70     02 12 06 F1 | 	add	arg01, #2
24c74     09 13 E2 FA | 	rdword	arg01, arg01
24c78     36 00 00 FF 
24c7c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24c80     01 FA 65 A6 |  if_e	neg	result1, #1
24c84     00 FA 0D F2 | 	cmp	result1, #0 wz
24c88     B8 FF 9F 5D |  if_ne	jmp	#LR__3510
24c8c     0B FD 01 F6 | 	mov	result2, arg03
24c90     02 FC 05 F1 | 	add	result2, #2
24c94     FE FC E1 FA | 	rdword	result2, result2
24c98     0F FC 25 F5 | 	andn	result2, #15
24c9c     2E FC 45 F5 | 	or	result2, #46
24ca0     02 16 06 F1 | 	add	arg03, #2
24ca4     0B FD 51 FC | 	wrword	result2, arg03
24ca8     98 FF 9F FD | 	jmp	#LR__3510
24cac                 | LR__3511
24cac     A7 F0 03 F6 | 	mov	ptra, fp
24cb0     B2 00 A0 FD | 	call	#popregs_
24cb4                 | __system___gc_markhub_ret
24cb4     2D 00 64 FD | 	ret
24cb8                 | 
24cb8                 | __system___gc_markcog
24cb8     04 4A 05 F6 | 	mov	COUNT_, #4
24cbc     A8 00 A0 FD | 	call	#pushregs_
24cc0     F8 F7 BF FD | 	call	#__system___gc_ptrs
24cc4     FD 1E 02 F6 | 	mov	local01, result1
24cc8     FE 20 02 F6 | 	mov	local02, result2
24ccc     EF 23 06 F6 | 	mov	local03, #495
24cd0                 | LR__3520
24cd0                 | 	'.live	local03
24cd0     00 22 96 F9 | 	alts	local03, #0
24cd4     11 25 02 F6 | 	mov	local04, local03
24cd8     0F 13 02 F6 | 	mov	arg01, local01
24cdc     10 15 02 F6 | 	mov	arg02, local02
24ce0     12 17 02 F6 | 	mov	arg03, local04
24ce4     04 FB BF FD | 	call	#__system___gc_isvalidptr
24ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
24cec     18 00 90 AD |  if_e	jmp	#LR__3521
24cf0     FD 24 02 F6 | 	mov	local04, result1
24cf4     02 24 06 F1 | 	add	local04, #2
24cf8     12 25 E2 FA | 	rdword	local04, local04
24cfc     20 24 46 F5 | 	or	local04, #32
24d00     02 FA 05 F1 | 	add	result1, #2
24d04     FD 24 52 FC | 	wrword	local04, result1
24d08                 | LR__3521
24d08     01 22 86 F1 | 	sub	local03, #1
24d0c     00 22 56 F2 | 	cmps	local03, #0 wc
24d10     BC FF 9F 3D |  if_ae	jmp	#LR__3520
24d14     A7 F0 03 F6 | 	mov	ptra, fp
24d18     B2 00 A0 FD | 	call	#popregs_
24d1c                 | __system___gc_markcog_ret
24d1c     2D 00 64 FD | 	ret
24d20                 | 
24d20                 | __system__opendir
24d20     06 4A 05 F6 | 	mov	COUNT_, #6
24d24     A8 00 A0 FD | 	call	#pushregs_
24d28     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24d2c     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
24d30     09 15 02 F6 | 	mov	arg02, arg01
24d34     0F 13 02 F6 | 	mov	arg01, local01
24d38     00 16 06 F6 | 	mov	arg03, #0
24d3c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24d40     84 C2 BF FD | 	call	#__system____getvfsforfile
24d44     FD 20 0A F6 | 	mov	local02, result1 wz
24d48     10 00 90 AD |  if_e	jmp	#LR__3530
24d4c     28 20 06 F1 | 	add	local02, #40
24d50     10 17 0A FB | 	rdlong	arg03, local02 wz
24d54     28 20 86 F1 | 	sub	local02, #40
24d58     14 00 90 5D |  if_ne	jmp	#LR__3531
24d5c                 | LR__3530
24d5c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24d60     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24d64     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24d68     00 FA 05 F6 | 	mov	result1, #0
24d6c     90 00 90 FD | 	jmp	#LR__3533
24d70                 | LR__3531
24d70     5C 12 06 F6 | 	mov	arg01, #92
24d74     10 14 06 F6 | 	mov	arg02, #16
24d78     C0 F9 BF FD | 	call	#__system___gc_doalloc
24d7c     FD 22 0A F6 | 	mov	local03, result1 wz
24d80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24d84     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
24d88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24d8c     00 FA 05 A6 |  if_e	mov	result1, #0
24d90     6C 00 90 AD |  if_e	jmp	#LR__3533
24d94     28 20 06 F1 | 	add	local02, #40
24d98     10 25 02 FB | 	rdlong	local04, local02
24d9c     12 27 02 F6 | 	mov	local05, local04
24da0     28 20 86 F1 | 	sub	local02, #40
24da4     13 26 46 F7 | 	zerox	local05, #19
24da8     14 24 46 F0 | 	shr	local04, #20
24dac     02 24 66 F0 | 	shl	local04, #2
24db0     ED 24 02 F1 | 	add	local04, __methods__
24db4     12 25 02 FB | 	rdlong	local04, local04
24db8     11 13 02 F6 | 	mov	arg01, local03
24dbc     0F 15 02 F6 | 	mov	arg02, local01
24dc0     F2 28 02 F6 | 	mov	local06, objptr
24dc4     13 E5 01 F6 | 	mov	objptr, local05
24dc8     2D 24 62 FD | 	call	local04
24dcc     14 E5 01 F6 | 	mov	objptr, local06
24dd0     FD 16 0A F6 | 	mov	arg03, result1 wz
24dd4     20 00 90 AD |  if_e	jmp	#LR__3532
24dd8     00 16 4E F2 | 	cmps	arg03, #0 wz
24ddc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24de0     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
24de4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24de8     11 13 02 F6 | 	mov	arg01, local03
24dec     58 FA BF FD | 	call	#__system___gc_free
24df0     00 FA 05 F6 | 	mov	result1, #0
24df4     08 00 90 FD | 	jmp	#LR__3533
24df8                 | LR__3532
24df8     11 21 62 FC | 	wrlong	local02, local03
24dfc     11 FB 01 F6 | 	mov	result1, local03
24e00                 | LR__3533
24e00     A7 F0 03 F6 | 	mov	ptra, fp
24e04     B2 00 A0 FD | 	call	#popregs_
24e08                 | __system__opendir_ret
24e08     2D 00 64 FD | 	ret
24e0c                 | 
24e0c                 | __system__closedir
24e0c     04 4A 05 F6 | 	mov	COUNT_, #4
24e10     A8 00 A0 FD | 	call	#pushregs_
24e14     09 1F 02 F6 | 	mov	local01, arg01
24e18     0F 13 02 FB | 	rdlong	arg01, local01
24e1c     2C 12 06 F1 | 	add	arg01, #44
24e20     09 21 02 FB | 	rdlong	local02, arg01
24e24     10 23 02 F6 | 	mov	local03, local02
24e28     13 22 46 F7 | 	zerox	local03, #19
24e2c     14 20 46 F0 | 	shr	local02, #20
24e30     02 20 66 F0 | 	shl	local02, #2
24e34     ED 20 02 F1 | 	add	local02, __methods__
24e38     10 21 02 FB | 	rdlong	local02, local02
24e3c     0F 13 02 F6 | 	mov	arg01, local01
24e40     F2 24 02 F6 | 	mov	local04, objptr
24e44     11 E5 01 F6 | 	mov	objptr, local03
24e48     2D 20 62 FD | 	call	local02
24e4c     12 E5 01 F6 | 	mov	objptr, local04
24e50     FD 24 02 F6 | 	mov	local04, result1
24e54     0F 13 02 F6 | 	mov	arg01, local01
24e58     EC F9 BF FD | 	call	#__system___gc_free
24e5c     00 24 4E F2 | 	cmps	local04, #0 wz
24e60     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24e64     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
24e68     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e6c     01 FA 65 56 |  if_ne	neg	result1, #1
24e70     00 FA 05 A6 |  if_e	mov	result1, #0
24e74     A7 F0 03 F6 | 	mov	ptra, fp
24e78     B2 00 A0 FD | 	call	#popregs_
24e7c                 | __system__closedir_ret
24e7c     2D 00 64 FD | 	ret
24e80                 | 
24e80                 | __system__readdir
24e80     04 4A 05 F6 | 	mov	COUNT_, #4
24e84     A8 00 A0 FD | 	call	#pushregs_
24e88     09 15 0A FB | 	rdlong	arg02, arg01 wz
24e8c     08 12 06 F1 | 	add	arg01, #8
24e90     09 1F 02 F6 | 	mov	local01, arg01
24e94     08 12 86 F1 | 	sub	arg01, #8
24e98     00 FA 05 A6 |  if_e	mov	result1, #0
24e9c     5C 00 90 AD |  if_e	jmp	#LR__3541
24ea0     30 14 06 F1 | 	add	arg02, #48
24ea4     0A 21 02 FB | 	rdlong	local02, arg02
24ea8     10 23 02 F6 | 	mov	local03, local02
24eac     13 22 46 F7 | 	zerox	local03, #19
24eb0     14 20 46 F0 | 	shr	local02, #20
24eb4     02 20 66 F0 | 	shl	local02, #2
24eb8     ED 20 02 F1 | 	add	local02, __methods__
24ebc     10 21 02 FB | 	rdlong	local02, local02
24ec0     0F 15 02 F6 | 	mov	arg02, local01
24ec4     F2 24 02 F6 | 	mov	local04, objptr
24ec8     11 E5 01 F6 | 	mov	objptr, local03
24ecc     2D 20 62 FD | 	call	local02
24ed0     12 E5 01 F6 | 	mov	objptr, local04
24ed4     00 FA 4D F2 | 	cmps	result1, #0 wz
24ed8     1C 00 90 AD |  if_e	jmp	#LR__3540
24edc     01 FA 55 F2 | 	cmps	result1, #1 wc
24ee0     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
24ee4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
24ee8     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
24eec     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
24ef0     00 FA 05 F6 | 	mov	result1, #0
24ef4     04 00 90 FD | 	jmp	#LR__3541
24ef8                 | LR__3540
24ef8     0F FB 01 F6 | 	mov	result1, local01
24efc                 | LR__3541
24efc     A7 F0 03 F6 | 	mov	ptra, fp
24f00     B2 00 A0 FD | 	call	#popregs_
24f04                 | __system__readdir_ret
24f04     2D 00 64 FD | 	ret
24f08                 | 
24f08                 | __system___openraw
24f08     15 4A 05 F6 | 	mov	COUNT_, #21
24f0c     A8 00 A0 FD | 	call	#pushregs_
24f10     09 1F 02 F6 | 	mov	local01, arg01
24f14     0A 21 02 F6 | 	mov	local02, arg02
24f18     0B 23 02 F6 | 	mov	local03, arg03
24f1c     0C 25 02 F6 | 	mov	local04, arg04
24f20     04 26 06 F6 | 	mov	local05, #4
24f24     0F 29 02 F6 | 	mov	local06, local01
24f28     00 2A 06 F6 | 	mov	local07, #0
24f2c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24f30     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
24f34     16 13 02 F6 | 	mov	arg01, local08
24f38     10 15 02 F6 | 	mov	arg02, local02
24f3c     00 16 06 F6 | 	mov	arg03, #0
24f40     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24f44     80 C0 BF FD | 	call	#__system____getvfsforfile
24f48     FD 2E 0A F6 | 	mov	local09, result1 wz
24f4c     10 00 90 AD |  if_e	jmp	#LR__3550
24f50     20 2E 06 F1 | 	add	local09, #32
24f54     17 FB 09 FB | 	rdlong	result1, local09 wz
24f58     20 2E 86 F1 | 	sub	local09, #32
24f5c     14 00 90 5D |  if_ne	jmp	#LR__3551
24f60                 | LR__3550
24f60     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24f64     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24f68     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24f6c     01 FA 65 F6 | 	neg	result1, #1
24f70     8C 02 90 FD | 	jmp	#LR__3564
24f74                 | LR__3551
24f74     14 13 02 F6 | 	mov	arg01, local06
24f78     00 14 06 F6 | 	mov	arg02, #0
24f7c     34 16 06 F6 | 	mov	arg03, #52
24f80     09 31 02 F6 | 	mov	local10, arg01
24f84     98 00 A0 FD | 	call	#\builtin_bytefill_
24f88     20 2E 06 F1 | 	add	local09, #32
24f8c     17 33 02 FB | 	rdlong	local11, local09
24f90     19 35 02 F6 | 	mov	local12, local11
24f94     19 37 02 F6 | 	mov	local13, local11
24f98     20 2E 86 F1 | 	sub	local09, #32
24f9c     1B 39 02 F6 | 	mov	local14, local13
24fa0     13 34 46 F7 | 	zerox	local12, #19
24fa4     14 38 46 F0 | 	shr	local14, #20
24fa8     02 38 66 F0 | 	shl	local14, #2
24fac     ED 38 02 F1 | 	add	local14, __methods__
24fb0     1C 39 02 FB | 	rdlong	local14, local14
24fb4     14 3B 02 F6 | 	mov	local15, local06
24fb8     16 3D 02 F6 | 	mov	local16, local08
24fbc     11 3F 02 F6 | 	mov	local17, local03
24fc0     1D 13 02 F6 | 	mov	arg01, local15
24fc4     1E 15 02 F6 | 	mov	arg02, local16
24fc8     1F 17 02 F6 | 	mov	arg03, local17
24fcc     F2 40 02 F6 | 	mov	local18, objptr
24fd0     1A E5 01 F6 | 	mov	objptr, local12
24fd4     2D 38 62 FD | 	call	local14
24fd8     20 E5 01 F6 | 	mov	objptr, local18
24fdc     FD 42 0A F6 | 	mov	local19, result1 wz
24fe0     04 22 CE 57 |  if_ne	test	local03, #4 wz
24fe4     58 00 90 AD |  if_e	jmp	#LR__3552
24fe8     24 2E 06 F1 | 	add	local09, #36
24fec     17 33 02 FB | 	rdlong	local11, local09
24ff0     19 35 02 F6 | 	mov	local12, local11
24ff4     19 37 02 F6 | 	mov	local13, local11
24ff8     24 2E 86 F1 | 	sub	local09, #36
24ffc     1B 39 02 F6 | 	mov	local14, local13
25000     13 34 46 F7 | 	zerox	local12, #19
25004     14 38 46 F0 | 	shr	local14, #20
25008     02 38 66 F0 | 	shl	local14, #2
2500c     ED 38 02 F1 | 	add	local14, __methods__
25010     1C 39 02 FB | 	rdlong	local14, local14
25014     14 3B 02 F6 | 	mov	local15, local06
25018     16 3D 02 F6 | 	mov	local16, local08
2501c     12 3F 02 F6 | 	mov	local17, local04
25020     1D 13 02 F6 | 	mov	arg01, local15
25024     1E 15 02 F6 | 	mov	arg02, local16
25028     1F 17 02 F6 | 	mov	arg03, local17
2502c     F2 40 02 F6 | 	mov	local18, objptr
25030     1A E5 01 F6 | 	mov	objptr, local12
25034     2D 38 62 FD | 	call	local14
25038     20 E5 01 F6 | 	mov	objptr, local18
2503c     FD 42 02 F6 | 	mov	local19, result1
25040                 | LR__3552
25040     00 42 0E F2 | 	cmp	local19, #0 wz
25044     8C 01 90 5D |  if_ne	jmp	#LR__3562
25048     11 45 02 F6 | 	mov	local20, local03
2504c     03 44 0E F5 | 	and	local20, #3 wz
25050     02 26 46 55 |  if_ne	or	local05, #2
25054     01 44 0E F2 | 	cmp	local20, #1 wz
25058     01 26 46 55 |  if_ne	or	local05, #1
2505c     20 22 CE F7 | 	test	local03, #32 wz
25060     C0 26 46 55 |  if_ne	or	local05, #192
25064     08 28 06 F1 | 	add	local06, #8
25068     14 27 62 FC | 	wrlong	local05, local06
2506c     0C 28 06 F1 | 	add	local06, #12
25070     14 47 0A FB | 	rdlong	local21, local06 wz
25074     14 28 86 F1 | 	sub	local06, #20
25078     18 00 90 5D |  if_ne	jmp	#LR__3553
2507c     04 2E 06 F1 | 	add	local09, #4
25080     17 47 02 FB | 	rdlong	local21, local09
25084     04 2E 86 F1 | 	sub	local09, #4
25088     14 28 06 F1 | 	add	local06, #20
2508c     14 47 62 FC | 	wrlong	local21, local06
25090     14 28 86 F1 | 	sub	local06, #20
25094                 | LR__3553
25094     18 28 06 F1 | 	add	local06, #24
25098     14 47 0A FB | 	rdlong	local21, local06 wz
2509c     18 28 86 F1 | 	sub	local06, #24
250a0     18 00 90 5D |  if_ne	jmp	#LR__3554
250a4     08 2E 06 F1 | 	add	local09, #8
250a8     17 47 02 FB | 	rdlong	local21, local09
250ac     08 2E 86 F1 | 	sub	local09, #8
250b0     18 28 06 F1 | 	add	local06, #24
250b4     14 47 62 FC | 	wrlong	local21, local06
250b8     18 28 86 F1 | 	sub	local06, #24
250bc                 | LR__3554
250bc     24 28 06 F1 | 	add	local06, #36
250c0     14 47 0A FB | 	rdlong	local21, local06 wz
250c4     24 28 86 F1 | 	sub	local06, #36
250c8     17 47 02 AB |  if_e	rdlong	local21, local09
250cc     24 28 06 A1 |  if_e	add	local06, #36
250d0     14 47 62 AC |  if_e	wrlong	local21, local06
250d4     24 28 86 A1 |  if_e	sub	local06, #36
250d8     28 28 06 F1 | 	add	local06, #40
250dc     14 47 0A FB | 	rdlong	local21, local06 wz
250e0     28 28 86 F1 | 	sub	local06, #40
250e4     18 00 90 5D |  if_ne	jmp	#LR__3555
250e8     10 2E 06 F1 | 	add	local09, #16
250ec     17 47 02 FB | 	rdlong	local21, local09
250f0     10 2E 86 F1 | 	sub	local09, #16
250f4     28 28 06 F1 | 	add	local06, #40
250f8     14 47 62 FC | 	wrlong	local21, local06
250fc     28 28 86 F1 | 	sub	local06, #40
25100                 | LR__3555
25100     30 28 06 F1 | 	add	local06, #48
25104     14 47 0A FB | 	rdlong	local21, local06 wz
25108     30 28 86 F1 | 	sub	local06, #48
2510c     18 00 90 5D |  if_ne	jmp	#LR__3556
25110     0C 2E 06 F1 | 	add	local09, #12
25114     17 47 02 FB | 	rdlong	local21, local09
25118     0C 2E 86 F1 | 	sub	local09, #12
2511c     30 28 06 F1 | 	add	local06, #48
25120     14 47 62 FC | 	wrlong	local21, local06
25124     30 28 86 F1 | 	sub	local06, #48
25128                 | LR__3556
25128     1C 28 06 F1 | 	add	local06, #28
2512c     14 47 0A FB | 	rdlong	local21, local06 wz
25130     1C 28 86 F1 | 	sub	local06, #28
25134     1C 00 90 5D |  if_ne	jmp	#LR__3557
25138     01 2A 06 F6 | 	mov	local07, #1
2513c     F2 12 02 F6 | 	mov	arg01, objptr
25140     00 C8 04 FF 
25144     00 12 46 F5 | 	or	arg01, ##160432128
25148     1C 28 06 F1 | 	add	local06, #28
2514c     14 13 62 FC | 	wrlong	arg01, local06
25150     1C 28 86 F1 | 	sub	local06, #28
25154                 | LR__3557
25154     20 28 06 F1 | 	add	local06, #32
25158     14 47 0A FB | 	rdlong	local21, local06 wz
2515c     20 28 86 F1 | 	sub	local06, #32
25160     1C 00 90 5D |  if_ne	jmp	#LR__3558
25164     01 2A 06 F6 | 	mov	local07, #1
25168     F2 12 02 F6 | 	mov	arg01, objptr
2516c     00 D0 04 FF 
25170     00 12 46 F5 | 	or	arg01, ##161480704
25174     20 28 06 F1 | 	add	local06, #32
25178     14 13 62 FC | 	wrlong	arg01, local06
2517c     20 28 86 F1 | 	sub	local06, #32
25180                 | LR__3558
25180     2C 28 06 F1 | 	add	local06, #44
25184     14 47 0A FB | 	rdlong	local21, local06 wz
25188     2C 28 86 F1 | 	sub	local06, #44
2518c     44 00 90 5D |  if_ne	jmp	#LR__3561
25190     14 2E 06 F1 | 	add	local09, #20
25194     17 47 0A FB | 	rdlong	local21, local09 wz
25198     14 2E 86 F1 | 	sub	local09, #20
2519c     18 00 90 AD |  if_e	jmp	#LR__3559
251a0     14 2E 06 F1 | 	add	local09, #20
251a4     17 47 02 FB | 	rdlong	local21, local09
251a8     2C 28 06 F1 | 	add	local06, #44
251ac     14 47 62 FC | 	wrlong	local21, local06
251b0     2C 28 86 F1 | 	sub	local06, #44
251b4     1C 00 90 FD | 	jmp	#LR__3560
251b8                 | LR__3559
251b8     01 2A 06 F6 | 	mov	local07, #1
251bc     F2 12 02 F6 | 	mov	arg01, objptr
251c0     00 D8 04 FF 
251c4     00 12 46 F5 | 	or	arg01, ##162529280
251c8     2C 28 06 F1 | 	add	local06, #44
251cc     14 13 62 FC | 	wrlong	arg01, local06
251d0     2C 28 86 F1 | 	sub	local06, #44
251d4                 | LR__3560
251d4                 | LR__3561
251d4                 | LR__3562
251d4     00 2A 0E F2 | 	cmp	local07, #0 wz
251d8     14 13 02 56 |  if_ne	mov	arg01, local06
251dc     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
251e0     00 42 0E F2 | 	cmp	local19, #0 wz
251e4     00 12 06 A6 |  if_e	mov	arg01, #0
251e8     10 00 90 5D |  if_ne	jmp	#LR__3563
251ec     00 12 4E F2 | 	cmps	arg01, #0 wz
251f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
251f4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
251f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
251fc                 | LR__3563
251fc     21 FB 01 F6 | 	mov	result1, local19
25200                 | LR__3564
25200     A7 F0 03 F6 | 	mov	ptra, fp
25204     B2 00 A0 FD | 	call	#popregs_
25208                 | __system___openraw_ret
25208     2D 00 64 FD | 	ret
2520c                 | 
2520c                 | __system___closeraw
2520c     05 4A 05 F6 | 	mov	COUNT_, #5
25210     A8 00 A0 FD | 	call	#pushregs_
25214     09 1F 02 F6 | 	mov	local01, arg01
25218     00 20 06 F6 | 	mov	local02, #0
2521c     08 1E 06 F1 | 	add	local01, #8
25220     0F FB 09 FB | 	rdlong	result1, local01 wz
25224     08 1E 86 F1 | 	sub	local01, #8
25228     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2522c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25230     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25234     01 FA 65 A6 |  if_e	neg	result1, #1
25238     A8 00 90 AD |  if_e	jmp	#LR__3572
2523c     2C 1E 06 F1 | 	add	local01, #44
25240     0F FB 09 FB | 	rdlong	result1, local01 wz
25244     2C 1E 86 F1 | 	sub	local01, #44
25248     38 00 90 AD |  if_e	jmp	#LR__3570
2524c     2C 1E 06 F1 | 	add	local01, #44
25250     0F 23 02 FB | 	rdlong	local03, local01
25254     11 25 02 F6 | 	mov	local04, local03
25258     2C 1E 86 F1 | 	sub	local01, #44
2525c     13 24 46 F7 | 	zerox	local04, #19
25260     14 22 46 F0 | 	shr	local03, #20
25264     02 22 66 F0 | 	shl	local03, #2
25268     ED 22 02 F1 | 	add	local03, __methods__
2526c     11 23 02 FB | 	rdlong	local03, local03
25270     0F 13 02 F6 | 	mov	arg01, local01
25274     F2 26 02 F6 | 	mov	local05, objptr
25278     12 E5 01 F6 | 	mov	objptr, local04
2527c     2D 22 62 FD | 	call	local03
25280     13 E5 01 F6 | 	mov	objptr, local05
25284                 | LR__3570
25284     24 1E 06 F1 | 	add	local01, #36
25288     0F 27 0A FB | 	rdlong	local05, local01 wz
2528c     24 1E 86 F1 | 	sub	local01, #36
25290     3C 00 90 AD |  if_e	jmp	#LR__3571
25294     24 1E 06 F1 | 	add	local01, #36
25298     0F 23 02 FB | 	rdlong	local03, local01
2529c     11 25 02 F6 | 	mov	local04, local03
252a0     24 1E 86 F1 | 	sub	local01, #36
252a4     13 24 46 F7 | 	zerox	local04, #19
252a8     14 22 46 F0 | 	shr	local03, #20
252ac     02 22 66 F0 | 	shl	local03, #2
252b0     ED 22 02 F1 | 	add	local03, __methods__
252b4     11 23 02 FB | 	rdlong	local03, local03
252b8     0F 13 02 F6 | 	mov	arg01, local01
252bc     F2 26 02 F6 | 	mov	local05, objptr
252c0     12 E5 01 F6 | 	mov	objptr, local04
252c4     2D 22 62 FD | 	call	local03
252c8     13 E5 01 F6 | 	mov	objptr, local05
252cc     FD 20 02 F6 | 	mov	local02, result1
252d0                 | LR__3571
252d0     0F 13 02 F6 | 	mov	arg01, local01
252d4     00 14 06 F6 | 	mov	arg02, #0
252d8     34 16 06 F6 | 	mov	arg03, #52
252dc     98 00 A0 FD | 	call	#\builtin_bytefill_
252e0     10 FB 01 F6 | 	mov	result1, local02
252e4                 | LR__3572
252e4     A7 F0 03 F6 | 	mov	ptra, fp
252e8     B2 00 A0 FD | 	call	#popregs_
252ec                 | __system___closeraw_ret
252ec     2D 00 64 FD | 	ret
252f0                 | 
252f0                 | __system___vfs_open_sdcardx
252f0     0B 4A 05 F6 | 	mov	COUNT_, #11
252f4     A8 00 A0 FD | 	call	#pushregs_
252f8     09 23 02 F6 | 	mov	local03, arg01
252fc     0A 25 02 F6 | 	mov	local04, arg02
25300     0B 27 02 F6 | 	mov	local05, arg03
25304     0C 29 02 F6 | 	mov	local06, arg04
25308     01 00 00 FF 
2530c     24 12 06 F6 | 	mov	arg01, ##548
25310     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
25314     FD 2A 02 F6 | 	mov	local07, result1
25318     01 00 00 FF 
2531c     34 12 06 F6 | 	mov	arg01, ##564
25320     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
25324     FD 2C 02 F6 | 	mov	local08, result1
25328     11 19 02 F6 | 	mov	arg04, local03
2532c     1F 18 C6 F0 | 	sar	arg04, #31
25330     11 17 02 F6 | 	mov	arg03, local03
25334     01 12 06 F6 | 	mov	arg01, #1
25338     00 14 06 F6 | 	mov	arg02, #0
2533c     EC DB BF FD | 	call	#__system___int64_shl
25340     FD 1E 02 F6 | 	mov	local01, result1
25344     FE 2E 02 F6 | 	mov	local09, result2
25348     12 19 02 F6 | 	mov	arg04, local04
2534c     1F 18 C6 F0 | 	sar	arg04, #31
25350     12 17 02 F6 | 	mov	arg03, local04
25354     01 12 06 F6 | 	mov	arg01, #1
25358     00 14 06 F6 | 	mov	arg02, #0
2535c     CC DB BF FD | 	call	#__system___int64_shl
25360     FD 1E 42 F5 | 	or	local01, result1
25364     FE 2E 42 F5 | 	or	local09, result2
25368     13 19 02 F6 | 	mov	arg04, local05
2536c     1F 18 C6 F0 | 	sar	arg04, #31
25370     13 17 02 F6 | 	mov	arg03, local05
25374     01 12 06 F6 | 	mov	arg01, #1
25378     00 14 06 F6 | 	mov	arg02, #0
2537c     AC DB BF FD | 	call	#__system___int64_shl
25380     FD 1E 42 F5 | 	or	local01, result1
25384     FE 2E 42 F5 | 	or	local09, result2
25388     14 19 02 F6 | 	mov	arg04, local06
2538c     1F 18 C6 F0 | 	sar	arg04, #31
25390     14 17 02 F6 | 	mov	arg03, local06
25394     01 12 06 F6 | 	mov	arg01, #1
25398     00 14 06 F6 | 	mov	arg02, #0
2539c     8C DB BF FD | 	call	#__system___int64_shl
253a0     17 15 02 F6 | 	mov	arg02, local09
253a4     FD 1E 42 F5 | 	or	local01, result1
253a8     0A FD 41 F5 | 	or	result2, arg02
253ac     FE 20 02 F6 | 	mov	local02, result2
253b0     0F 13 02 F6 | 	mov	arg01, local01
253b4     10 15 02 F6 | 	mov	arg02, local02
253b8     A8 DB BF FD | 	call	#__system___usepins
253bc     00 FA 0D F2 | 	cmp	result1, #0 wz
253c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
253c4     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
253c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
253cc     00 FA 05 A6 |  if_e	mov	result1, #0
253d0     B4 00 90 AD |  if_e	jmp	#LR__3582
253d4     0F 31 02 F6 | 	mov	local10, local01
253d8     10 2F 02 F6 | 	mov	local09, local02
253dc     01 00 00 FF 
253e0     08 2A 06 F1 | 	add	local07, ##520
253e4     15 31 62 FC | 	wrlong	local10, local07
253e8     04 2A 06 F1 | 	add	local07, #4
253ec     15 2F 62 FC | 	wrlong	local09, local07
253f0     01 00 00 FF 
253f4     0C 2A 86 F1 | 	sub	local07, ##524
253f8     14 1B 02 F6 | 	mov	arg05, local06
253fc     00 12 06 F6 | 	mov	arg01, #0
25400     11 15 02 F6 | 	mov	arg02, local03
25404     12 17 02 F6 | 	mov	arg03, local04
25408     13 19 02 F6 | 	mov	arg04, local05
2540c     F2 30 02 F6 | 	mov	local10, objptr
25410     15 E5 01 F6 | 	mov	objptr, local07
25414     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
25418     18 E5 01 F6 | 	mov	objptr, local10
2541c     FD 32 0A F6 | 	mov	local11, result1 wz
25420     24 00 90 5D |  if_ne	jmp	#LR__3580
25424     80 01 00 FF 
25428     E2 14 06 F6 | 	mov	arg02, ##@LR__4997
2542c     16 13 02 F6 | 	mov	arg01, local08
25430     00 16 06 F6 | 	mov	arg03, #0
25434     F2 32 02 F6 | 	mov	local11, objptr
25438     15 E5 01 F6 | 	mov	objptr, local07
2543c     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
25440     19 E5 01 F6 | 	mov	objptr, local11
25444     FD 32 02 F6 | 	mov	local11, result1
25448                 | LR__3580
25448     00 32 0E F2 | 	cmp	local11, #0 wz
2544c     24 00 90 AD |  if_e	jmp	#LR__3581
25450     0F 13 02 F6 | 	mov	arg01, local01
25454     10 15 02 F6 | 	mov	arg02, local02
25458     5C DB BF FD | 	call	#__system___freepins
2545c     19 13 6A F6 | 	neg	arg01, local11 wz
25460     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25464     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25468     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2546c     00 FA 05 F6 | 	mov	result1, #0
25470     14 00 90 FD | 	jmp	#LR__3582
25474                 | LR__3581
25474     15 13 02 F6 | 	mov	arg01, local07
25478     F2 32 02 F6 | 	mov	local11, objptr
2547c     15 E5 01 F6 | 	mov	objptr, local07
25480     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
25484     19 E5 01 F6 | 	mov	objptr, local11
25488                 | LR__3582
25488     A7 F0 03 F6 | 	mov	ptra, fp
2548c     B2 00 A0 FD | 	call	#popregs_
25490                 | __system___vfs_open_sdcardx_ret
25490     2D 00 64 FD | 	ret
25494                 | 
25494                 | __system____default_getc
25494     03 4A 05 F6 | 	mov	COUNT_, #3
25498     A8 00 A0 FD | 	call	#pushregs_
2549c     09 1F 02 F6 | 	mov	local01, arg01
254a0     0F 21 02 FB | 	rdlong	local02, local01
254a4     08 20 06 F1 | 	add	local02, #8
254a8     10 23 02 FB | 	rdlong	local03, local02
254ac     02 22 CE F7 | 	test	local03, #2 wz
254b0     0F 13 02 56 |  if_ne	mov	arg01, local01
254b4     00 01 B0 5D |  if_ne	call	#__system____default_flush
254b8     10 23 02 FB | 	rdlong	local03, local02
254bc     01 22 46 F5 | 	or	local03, #1
254c0     10 23 62 FC | 	wrlong	local03, local02
254c4     08 20 86 F1 | 	sub	local02, #8
254c8     10 23 0A FB | 	rdlong	local03, local02 wz
254cc     0C 00 90 5D |  if_ne	jmp	#LR__3590
254d0     0F 13 02 F6 | 	mov	arg01, local01
254d4     68 18 B0 FD | 	call	#__system____default_filbuf
254d8     FD 22 02 F6 | 	mov	local03, result1
254dc                 | LR__3590
254dc     01 22 56 F2 | 	cmps	local03, #1 wc
254e0     01 FA 65 C6 |  if_b	neg	result1, #1
254e4     1C 00 90 CD |  if_b	jmp	#LR__3591
254e8     01 22 86 F1 | 	sub	local03, #1
254ec     10 23 62 FC | 	wrlong	local03, local02
254f0     04 20 06 F1 | 	add	local02, #4
254f4     10 23 02 FB | 	rdlong	local03, local02
254f8     11 FB C1 FA | 	rdbyte	result1, local03
254fc     01 22 06 F1 | 	add	local03, #1
25500     10 23 62 FC | 	wrlong	local03, local02
25504                 | LR__3591
25504     A7 F0 03 F6 | 	mov	ptra, fp
25508     B2 00 A0 FD | 	call	#popregs_
2550c                 | __system____default_getc_ret
2550c     2D 00 64 FD | 	ret
25510                 | 
25510                 | __system____default_putc
25510     06 4A 05 F6 | 	mov	COUNT_, #6
25514     A8 00 A0 FD | 	call	#pushregs_
25518     09 1F 02 F6 | 	mov	local01, arg01
2551c     0A 21 02 F6 | 	mov	local02, arg02
25520     10 23 02 FB | 	rdlong	local03, local02
25524     08 22 06 F1 | 	add	local03, #8
25528     11 FB 01 FB | 	rdlong	result1, local03
2552c     01 FA CD F7 | 	test	result1, #1 wz
25530     10 13 02 56 |  if_ne	mov	arg01, local02
25534     80 00 B0 5D |  if_ne	call	#__system____default_flush
25538     11 25 02 FB | 	rdlong	local04, local03
2553c     02 24 46 F5 | 	or	local04, #2
25540     11 25 62 FC | 	wrlong	local04, local03
25544     08 22 86 F1 | 	sub	local03, #8
25548     11 27 02 FB | 	rdlong	local05, local03
2554c     10 22 06 F1 | 	add	local03, #16
25550     11 15 02 FB | 	rdlong	arg02, local03
25554     10 22 86 F1 | 	sub	local03, #16
25558     13 FB 01 F6 | 	mov	result1, local05
2555c     0A FB 01 F1 | 	add	result1, arg02
25560     FD 1E 42 FC | 	wrbyte	local01, result1
25564     0F 1F E2 F8 | 	getbyte	local01, local01, #0
25568     01 26 06 F1 | 	add	local05, #1
2556c     11 27 62 FC | 	wrlong	local05, local03
25570     06 20 06 F1 | 	add	local02, #6
25574     10 29 EA FA | 	rdword	local06, local02 wz
25578     06 20 86 F1 | 	sub	local02, #6
2557c     0C 22 06 51 |  if_ne	add	local03, #12
25580     11 25 02 5B |  if_ne	rdlong	local04, local03
25584     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
25588     0C 00 90 AD |  if_e	jmp	#LR__3600
2558c     0A 1E 0E F2 | 	cmp	local01, #10 wz
25590     01 28 0E A2 |  if_e	cmp	local06, #1 wz
25594     10 00 90 5D |  if_ne	jmp	#LR__3601
25598                 | LR__3600
25598     10 13 02 F6 | 	mov	arg01, local02
2559c     18 00 B0 FD | 	call	#__system____default_flush
255a0     00 FA 0D F2 | 	cmp	result1, #0 wz
255a4     01 1E 66 56 |  if_ne	neg	local01, #1
255a8                 | LR__3601
255a8     0F FB 01 F6 | 	mov	result1, local01
255ac     A7 F0 03 F6 | 	mov	ptra, fp
255b0     B2 00 A0 FD | 	call	#popregs_
255b4                 | __system____default_putc_ret
255b4     2D 00 64 FD | 	ret
255b8                 | 
255b8                 | __system____default_flush
255b8     06 4A 05 F6 | 	mov	COUNT_, #6
255bc     A8 00 A0 FD | 	call	#pushregs_
255c0     09 1F 02 F6 | 	mov	local01, arg01
255c4     0F 21 02 FB | 	rdlong	local02, local01
255c8     10 23 02 FB | 	rdlong	local03, local02
255cc     08 20 06 F1 | 	add	local02, #8
255d0     10 FB 01 FB | 	rdlong	result1, local02
255d4     08 20 86 F1 | 	sub	local02, #8
255d8     02 FA CD F7 | 	test	result1, #2 wz
255dc     D0 00 90 AD |  if_e	jmp	#LR__3612
255e0     01 22 56 F2 | 	cmps	local03, #1 wc
255e4     20 01 90 CD |  if_b	jmp	#LR__3614
255e8     08 1E 06 F1 | 	add	local01, #8
255ec     0F FB 01 FB | 	rdlong	result1, local01
255f0     08 1E 86 F1 | 	sub	local01, #8
255f4     40 FA CD F7 | 	test	result1, #64 wz
255f8     68 00 90 AD |  if_e	jmp	#LR__3611
255fc     08 1E 06 F1 | 	add	local01, #8
25600     0F 17 02 FB | 	rdlong	arg03, local01
25604     08 1E 86 F1 | 	sub	local01, #8
25608     80 16 CE F7 | 	test	arg03, #128 wz
2560c     54 00 90 AD |  if_e	jmp	#LR__3610
25610     30 1E 06 F1 | 	add	local01, #48
25614     0F 25 02 FB | 	rdlong	local04, local01
25618     12 27 02 F6 | 	mov	local05, local04
2561c     30 1E 86 F1 | 	sub	local01, #48
25620     13 26 46 F7 | 	zerox	local05, #19
25624     14 24 46 F0 | 	shr	local04, #20
25628     02 24 66 F0 | 	shl	local04, #2
2562c     ED 24 02 F1 | 	add	local04, __methods__
25630     12 25 02 FB | 	rdlong	local04, local04
25634     0F 13 02 F6 | 	mov	arg01, local01
25638     00 14 06 F6 | 	mov	arg02, #0
2563c     02 16 06 F6 | 	mov	arg03, #2
25640     F2 28 02 F6 | 	mov	local06, objptr
25644     13 E5 01 F6 | 	mov	objptr, local05
25648     2D 24 62 FD | 	call	local04
2564c     14 E5 01 F6 | 	mov	objptr, local06
25650     08 1E 06 F1 | 	add	local01, #8
25654     0F 29 02 FB | 	rdlong	local06, local01
25658     80 28 26 F5 | 	andn	local06, #128
2565c     0F 29 62 FC | 	wrlong	local06, local01
25660     08 1E 86 F1 | 	sub	local01, #8
25664                 | LR__3610
25664                 | LR__3611
25664     18 1E 06 F1 | 	add	local01, #24
25668     0F 25 02 FB | 	rdlong	local04, local01
2566c     12 27 02 F6 | 	mov	local05, local04
25670     18 1E 86 F1 | 	sub	local01, #24
25674     13 26 46 F7 | 	zerox	local05, #19
25678     14 24 46 F0 | 	shr	local04, #20
2567c     02 24 66 F0 | 	shl	local04, #2
25680     ED 24 02 F1 | 	add	local04, __methods__
25684     12 25 02 FB | 	rdlong	local04, local04
25688     10 20 06 F1 | 	add	local02, #16
2568c     10 15 02 FB | 	rdlong	arg02, local02
25690     10 20 86 F1 | 	sub	local02, #16
25694     0F 13 02 F6 | 	mov	arg01, local01
25698     11 17 02 F6 | 	mov	arg03, local03
2569c     F2 28 02 F6 | 	mov	local06, objptr
256a0     13 E5 01 F6 | 	mov	objptr, local05
256a4     2D 24 62 FD | 	call	local04
256a8     14 E5 01 F6 | 	mov	objptr, local06
256ac     58 00 90 FD | 	jmp	#LR__3614
256b0                 | LR__3612
256b0     08 20 06 F1 | 	add	local02, #8
256b4     10 29 02 FB | 	rdlong	local06, local02
256b8     08 20 86 F1 | 	sub	local02, #8
256bc     01 28 CE F7 | 	test	local06, #1 wz
256c0     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
256c4     40 00 90 AD |  if_e	jmp	#LR__3613
256c8     30 1E 06 F1 | 	add	local01, #48
256cc     0F 25 02 FB | 	rdlong	local04, local01
256d0     12 27 02 F6 | 	mov	local05, local04
256d4     30 1E 86 F1 | 	sub	local01, #48
256d8     13 26 46 F7 | 	zerox	local05, #19
256dc     14 24 46 F0 | 	shr	local04, #20
256e0     02 24 66 F0 | 	shl	local04, #2
256e4     ED 24 02 F1 | 	add	local04, __methods__
256e8     12 25 02 FB | 	rdlong	local04, local04
256ec     0F 13 02 F6 | 	mov	arg01, local01
256f0     11 15 62 F6 | 	neg	arg02, local03
256f4     01 16 06 F6 | 	mov	arg03, #1
256f8     F2 28 02 F6 | 	mov	local06, objptr
256fc     13 E5 01 F6 | 	mov	objptr, local05
25700     2D 24 62 FD | 	call	local04
25704     14 E5 01 F6 | 	mov	objptr, local06
25708                 | LR__3613
25708                 | LR__3614
25708     10 01 68 FC | 	wrlong	#0, local02
2570c     04 20 06 F1 | 	add	local02, #4
25710     10 01 68 FC | 	wrlong	#0, local02
25714     04 20 06 F1 | 	add	local02, #4
25718     10 01 68 FC | 	wrlong	#0, local02
2571c     00 FA 05 F6 | 	mov	result1, #0
25720     A7 F0 03 F6 | 	mov	ptra, fp
25724     B2 00 A0 FD | 	call	#popregs_
25728                 | __system____default_flush_ret
25728     2D 00 64 FD | 	ret
2572c                 | 
2572c                 | __system____default_buffer_init
2572c     02 4A 05 F6 | 	mov	COUNT_, #2
25730     A8 00 A0 FD | 	call	#pushregs_
25734     09 1F 02 F6 | 	mov	local01, arg01
25738     0F 21 02 FB | 	rdlong	local02, local01
2573c     0F 13 02 F6 | 	mov	arg01, local01
25740     34 03 B0 FD | 	call	#__system___isatty
25744     00 FA 0D F2 | 	cmp	result1, #0 wz
25748     06 1E 06 51 |  if_ne	add	local01, #6
2574c     0F 0B 58 5C |  if_ne	wrword	#5, local01
25750     06 1E 06 A1 |  if_e	add	local01, #6
25754     0F 0D 58 AC |  if_e	wrword	#6, local01
25758     14 20 06 F1 | 	add	local02, #20
2575c     10 1F 02 F6 | 	mov	local01, local02
25760     04 20 86 F1 | 	sub	local02, #4
25764     10 1F 62 FC | 	wrlong	local01, local02
25768     04 20 86 F1 | 	sub	local02, #4
2576c     02 00 80 FF 
25770     10 01 68 FC | 	wrlong	##1024, local02
25774     00 FA 05 F6 | 	mov	result1, #0
25778     A7 F0 03 F6 | 	mov	ptra, fp
2577c     B2 00 A0 FD | 	call	#popregs_
25780                 | __system____default_buffer_init_ret
25780     2D 00 64 FD | 	ret
25784                 | 
25784                 | __system__stat
25784     04 4A 05 F6 | 	mov	COUNT_, #4
25788     A8 00 A0 FD | 	call	#pushregs_
2578c     0A 1F 02 F6 | 	mov	local01, arg02
25790     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25794     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
25798     09 15 02 F6 | 	mov	arg02, arg01
2579c     10 13 02 F6 | 	mov	arg01, local02
257a0     00 16 06 F6 | 	mov	arg03, #0
257a4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
257a8     1C B8 BF FD | 	call	#__system____getvfsforfile
257ac     FD 22 0A F6 | 	mov	local03, result1 wz
257b0     10 00 90 AD |  if_e	jmp	#LR__3620
257b4     34 22 06 F1 | 	add	local03, #52
257b8     11 17 0A FB | 	rdlong	arg03, local03 wz
257bc     34 22 86 F1 | 	sub	local03, #52
257c0     14 00 90 5D |  if_ne	jmp	#LR__3621
257c4                 | LR__3620
257c4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
257c8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
257cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
257d0     01 FA 65 F6 | 	neg	result1, #1
257d4     68 00 90 FD | 	jmp	#LR__3622
257d8                 | LR__3621
257d8     0F 13 02 F6 | 	mov	arg01, local01
257dc     00 14 06 F6 | 	mov	arg02, #0
257e0     30 16 06 F6 | 	mov	arg03, #48
257e4     09 25 02 F6 | 	mov	local04, arg01
257e8     98 00 A0 FD | 	call	#\builtin_bytefill_
257ec     12 FB 01 F6 | 	mov	result1, local04
257f0     10 13 CA FA | 	rdbyte	arg01, local02 wz
257f4     08 1E 06 A1 |  if_e	add	local01, #8
257f8     08 00 80 AF 
257fc     0F FF 6B AC |  if_e	wrlong	##4607, local01
25800     00 FA 05 A6 |  if_e	mov	result1, #0
25804     38 00 90 AD |  if_e	jmp	#LR__3622
25808     34 22 06 F1 | 	add	local03, #52
2580c     11 23 02 FB | 	rdlong	local03, local03
25810     11 25 02 F6 | 	mov	local04, local03
25814     13 22 46 F7 | 	zerox	local03, #19
25818     14 24 46 F0 | 	shr	local04, #20
2581c     02 24 66 F0 | 	shl	local04, #2
25820     ED 24 02 F1 | 	add	local04, __methods__
25824     12 25 02 FB | 	rdlong	local04, local04
25828     10 13 02 F6 | 	mov	arg01, local02
2582c     0F 15 02 F6 | 	mov	arg02, local01
25830     F2 20 02 F6 | 	mov	local02, objptr
25834     11 E5 01 F6 | 	mov	objptr, local03
25838     2D 24 62 FD | 	call	local04
2583c     10 E5 01 F6 | 	mov	objptr, local02
25840                 | LR__3622
25840     A7 F0 03 F6 | 	mov	ptra, fp
25844     B2 00 A0 FD | 	call	#popregs_
25848                 | __system__stat_ret
25848     2D 00 64 FD | 	ret
2584c                 | 
2584c                 | __system__write
2584c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25850     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25854     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25858     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2585c     01 FA 65 36 |  if_ae	neg	result1, #1
25860     20 00 90 3D |  if_ae	jmp	#LR__3630
25864     34 12 06 FD | 	qmul	arg01, #52
25868     02 00 00 FF 
2586c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25870     18 12 62 FD | 	getqx	arg01
25874     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25878     02 00 00 FF 
2587c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25880     0C 10 B0 FD | 	call	#__system___vfswrite
25884                 | LR__3630
25884                 | __system__write_ret
25884     2D 00 64 FD | 	ret
25888                 | 
25888                 | __system__read
25888     0A 12 16 F2 | 	cmp	arg01, #10 wc
2588c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25890     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25894     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25898     01 FA 65 36 |  if_ae	neg	result1, #1
2589c     20 00 90 3D |  if_ae	jmp	#LR__3640
258a0     34 12 06 FD | 	qmul	arg01, #52
258a4     02 00 00 FF 
258a8     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
258ac     18 12 62 FD | 	getqx	arg01
258b0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
258b4     02 00 00 FF 
258b8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
258bc     98 11 B0 FD | 	call	#__system___vfsread
258c0                 | LR__3640
258c0                 | __system__read_ret
258c0     2D 00 64 FD | 	ret
258c4                 | 
258c4                 | __system__close
258c4     0A 12 16 F2 | 	cmp	arg01, #10 wc
258c8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
258cc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
258d0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
258d4     01 FA 65 36 |  if_ae	neg	result1, #1
258d8     20 00 90 3D |  if_ae	jmp	#LR__3650
258dc     34 12 06 FD | 	qmul	arg01, #52
258e0     02 00 00 FF 
258e4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
258e8     18 12 62 FD | 	getqx	arg01
258ec     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
258f0     02 00 00 FF 
258f4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
258f8     10 F9 BF FD | 	call	#__system___closeraw
258fc                 | LR__3650
258fc                 | __system__close_ret
258fc     2D 00 64 FD | 	ret
25900                 | 
25900                 | __system__lseek
25900     06 4A 05 F6 | 	mov	COUNT_, #6
25904     A8 00 A0 FD | 	call	#pushregs_
25908     0A 12 16 F2 | 	cmp	arg01, #10 wc
2590c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25910     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25914     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25918     01 FA 65 36 |  if_ae	neg	result1, #1
2591c     C4 00 90 3D |  if_ae	jmp	#LR__3661
25920     34 12 06 FD | 	qmul	arg01, #52
25924     02 00 00 FF 
25928     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
2592c     18 1E 62 FD | 	getqx	local01
25930     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25934     30 1E 06 F1 | 	add	local01, #48
25938     0F 13 0A FB | 	rdlong	arg01, local01 wz
2593c     30 1E 86 F1 | 	sub	local01, #48
25940     02 00 00 FF 
25944     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25948     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2594c     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25950     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25954     01 FA 65 A6 |  if_e	neg	result1, #1
25958     88 00 90 AD |  if_e	jmp	#LR__3661
2595c     08 1E 06 F1 | 	add	local01, #8
25960     0F 21 02 FB | 	rdlong	local02, local01
25964     08 1E 86 F1 | 	sub	local01, #8
25968     40 20 CE F7 | 	test	local02, #64 wz
2596c     08 1E 06 51 |  if_ne	add	local01, #8
25970     0F 21 02 5B |  if_ne	rdlong	local02, local01
25974     80 20 46 55 |  if_ne	or	local02, #128
25978     0F 21 62 5C |  if_ne	wrlong	local02, local01
2597c     08 1E 86 51 |  if_ne	sub	local01, #8
25980     30 1E 06 F1 | 	add	local01, #48
25984     0F 23 02 FB | 	rdlong	local03, local01
25988     11 25 02 F6 | 	mov	local04, local03
2598c     30 1E 86 F1 | 	sub	local01, #48
25990     13 24 46 F7 | 	zerox	local04, #19
25994     14 22 46 F0 | 	shr	local03, #20
25998     02 22 66 F0 | 	shl	local03, #2
2599c     ED 22 02 F1 | 	add	local03, __methods__
259a0     11 23 02 FB | 	rdlong	local03, local03
259a4     0F 13 02 F6 | 	mov	arg01, local01
259a8     F2 26 02 F6 | 	mov	local05, objptr
259ac     12 E5 01 F6 | 	mov	objptr, local04
259b0     2D 22 62 FD | 	call	local03
259b4     13 E5 01 F6 | 	mov	objptr, local05
259b8     FD 28 02 F6 | 	mov	local06, result1
259bc     00 28 56 F2 | 	cmps	local06, #0 wc
259c0     1C 00 90 3D |  if_ae	jmp	#LR__3660
259c4     14 13 6A F6 | 	neg	arg01, local06 wz
259c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
259cc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
259d0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
259d4     01 FA 65 56 |  if_ne	neg	result1, #1
259d8     00 FA 05 A6 |  if_e	mov	result1, #0
259dc     04 00 90 FD | 	jmp	#LR__3661
259e0                 | LR__3660
259e0     14 FB 01 F6 | 	mov	result1, local06
259e4                 | LR__3661
259e4     A7 F0 03 F6 | 	mov	ptra, fp
259e8     B2 00 A0 FD | 	call	#popregs_
259ec                 | __system__lseek_ret
259ec     2D 00 64 FD | 	ret
259f0                 | 
259f0                 | __system___ioctl
259f0     03 4A 05 F6 | 	mov	COUNT_, #3
259f4     A8 00 A0 FD | 	call	#pushregs_
259f8     00 12 4E F2 | 	cmps	arg01, #0 wz
259fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25a00     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25a04     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25a08     01 FA 65 A6 |  if_e	neg	result1, #1
25a0c     5C 00 90 AD |  if_e	jmp	#LR__3671
25a10     28 12 06 F1 | 	add	arg01, #40
25a14     09 1F 02 FB | 	rdlong	local01, arg01
25a18     0F 21 02 F6 | 	mov	local02, local01
25a1c     28 12 86 F1 | 	sub	arg01, #40
25a20     13 20 46 F7 | 	zerox	local02, #19
25a24     14 1E 46 F0 | 	shr	local01, #20
25a28     02 1E 66 F0 | 	shl	local01, #2
25a2c     ED 1E 02 F1 | 	add	local01, __methods__
25a30     0F 1F 02 FB | 	rdlong	local01, local01
25a34     F2 22 02 F6 | 	mov	local03, objptr
25a38     10 E5 01 F6 | 	mov	objptr, local02
25a3c     2D 1E 62 FD | 	call	local01
25a40     11 E5 01 F6 | 	mov	objptr, local03
25a44     FD 12 0A F6 | 	mov	arg01, result1 wz
25a48     1C 00 90 AD |  if_e	jmp	#LR__3670
25a4c     00 12 4E F2 | 	cmps	arg01, #0 wz
25a50     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25a54     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25a58     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25a5c     01 FA 65 56 |  if_ne	neg	result1, #1
25a60     00 FA 05 A6 |  if_e	mov	result1, #0
25a64     04 00 90 FD | 	jmp	#LR__3671
25a68                 | LR__3670
25a68     00 FA 05 F6 | 	mov	result1, #0
25a6c                 | LR__3671
25a6c     A7 F0 03 F6 | 	mov	ptra, fp
25a70     B2 00 A0 FD | 	call	#popregs_
25a74                 | __system___ioctl_ret
25a74     2D 00 64 FD | 	ret
25a78                 | 
25a78                 | __system___isatty
25a78     00 4A 05 F6 | 	mov	COUNT_, #0
25a7c     A8 00 A0 FD | 	call	#pushregs_
25a80     0C F0 07 F1 | 	add	ptra, #12
25a84     04 4E 05 F1 | 	add	fp, #4
25a88     A7 12 62 FC | 	wrlong	arg01, fp
25a8c     04 4E 05 F1 | 	add	fp, #4
25a90     A7 16 02 F6 | 	mov	arg03, fp
25a94     08 4E 85 F1 | 	sub	fp, #8
25a98     00 15 06 F6 | 	mov	arg02, #256
25a9c     50 FF BF FD | 	call	#__system___ioctl
25aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
25aa4     01 FA 05 A6 |  if_e	mov	result1, #1
25aa8     00 FA 05 56 |  if_ne	mov	result1, #0
25aac     A7 F0 03 F6 | 	mov	ptra, fp
25ab0     B2 00 A0 FD | 	call	#popregs_
25ab4                 | __system___isatty_ret
25ab4     2D 00 64 FD | 	ret
25ab8                 | 
25ab8                 | __system____getftab
25ab8     0A 12 16 F2 | 	cmp	arg01, #10 wc
25abc     34 12 06 CD |  if_b	qmul	arg01, #52
25ac0     00 FA 05 36 |  if_ae	mov	result1, #0
25ac4     02 00 00 CF 
25ac8     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25acc     18 FA 61 CD |  if_b	getqx	result1
25ad0     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25ad4     02 00 00 CF 
25ad8     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25adc                 | __system____getftab_ret
25adc     2D 00 64 FD | 	ret
25ae0                 | 
25ae0                 | __system__strncpy
25ae0     09 01 02 F6 | 	mov	_var01, arg01
25ae4                 | LR__3680
25ae4     01 16 86 F1 | 	sub	arg03, #1
25ae8     00 16 56 F2 | 	cmps	arg03, #0 wc
25aec     18 00 90 CD |  if_b	jmp	#LR__3681
25af0     0A FB C1 FA | 	rdbyte	result1, arg02
25af4     00 FB 41 FC | 	wrbyte	result1, _var01
25af8     01 14 06 F1 | 	add	arg02, #1
25afc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25b00     01 00 06 F1 | 	add	_var01, #1
25b04     DC FF 9F 5D |  if_ne	jmp	#LR__3680
25b08                 | LR__3681
25b08     97 0C 48 FB | 	callpa	#(@LR__3683-@LR__3682)>>2,fcache_load_ptr_
25b0c                 | LR__3682
25b0c     01 16 86 F1 | 	sub	arg03, #1
25b10     00 16 56 F2 | 	cmps	arg03, #0 wc
25b14     00 03 02 36 |  if_ae	mov	_var02, _var01
25b18     01 00 06 31 |  if_ae	add	_var01, #1
25b1c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25b20     E8 FF 9F 3D |  if_ae	jmp	#LR__3682
25b24                 | LR__3683
25b24     09 FB 01 F6 | 	mov	result1, arg01
25b28                 | __system__strncpy_ret
25b28     2D 00 64 FD | 	ret
25b2c                 | 
25b2c                 | __system__strncat
25b2c     00 14 4E F2 | 	cmps	arg02, #0 wz
25b30     50 00 90 AD |  if_e	jmp	#LR__3694
25b34     01 16 16 F2 | 	cmp	arg03, #1 wc
25b38     48 00 90 CD |  if_b	jmp	#LR__3694
25b3c     09 01 02 F6 | 	mov	_var01, arg01
25b40     97 1E 48 FB | 	callpa	#(@LR__3692-@LR__3690)>>2,fcache_load_ptr_
25b44                 | LR__3690
25b44     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25b48     01 00 06 51 |  if_ne	add	_var01, #1
25b4c     F4 FF 9F 5D |  if_ne	jmp	#LR__3690
25b50     0B 03 02 F6 | 	mov	_var02, arg03
25b54                 | LR__3691
25b54     0A 05 C2 FA | 	rdbyte	_var03, arg02
25b58     02 07 02 F6 | 	mov	_var04, _var03
25b5c     07 06 4E F7 | 	zerox	_var04, #7 wz
25b60     01 14 06 F1 | 	add	arg02, #1
25b64     18 00 90 AD |  if_e	jmp	#LR__3693
25b68     01 02 86 F1 | 	sub	_var02, #1
25b6c     00 02 56 F2 | 	cmps	_var02, #0 wc
25b70     00 07 02 36 |  if_ae	mov	_var04, _var01
25b74     01 00 06 31 |  if_ae	add	_var01, #1
25b78     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25b7c     D4 FF 9F 3D |  if_ae	jmp	#LR__3691
25b80                 | LR__3692
25b80                 | LR__3693
25b80     00 01 48 FC | 	wrbyte	#0, _var01
25b84                 | LR__3694
25b84     09 FB 01 F6 | 	mov	result1, arg01
25b88                 | __system__strncat_ret
25b88     2D 00 64 FD | 	ret
25b8c                 | 
25b8c                 | __system__strncmp
25b8c     09 01 0A F6 | 	mov	_var01, arg01 wz
25b90     14 00 90 5D |  if_ne	jmp	#LR__3700
25b94     00 14 0E F2 | 	cmp	arg02, #0 wz
25b98     01 02 66 56 |  if_ne	neg	_var02, #1
25b9c     00 02 06 A6 |  if_e	mov	_var02, #0
25ba0     01 FB 01 F6 | 	mov	result1, _var02
25ba4     74 00 90 FD | 	jmp	#__system__strncmp_ret
25ba8                 | LR__3700
25ba8     00 14 0E F2 | 	cmp	arg02, #0 wz
25bac     01 FA 05 A6 |  if_e	mov	result1, #1
25bb0     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25bb4     0B 05 02 F6 | 	mov	_var03, arg03
25bb8     97 16 48 FB | 	callpa	#(@LR__3702-@LR__3701)>>2,fcache_load_ptr_
25bbc                 | LR__3701
25bbc     00 07 C2 FA | 	rdbyte	_var04, _var01
25bc0     0A 09 02 F6 | 	mov	_var05, arg02
25bc4     04 0B C2 FA | 	rdbyte	_var06, _var05
25bc8     01 04 86 F1 | 	sub	_var03, #1
25bcc     00 04 56 F2 | 	cmps	_var03, #0 wc
25bd0     01 00 06 F1 | 	add	_var01, #1
25bd4     01 14 06 F1 | 	add	arg02, #1
25bd8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25bdc     08 00 90 2D |  if_nc_and_z	jmp	#LR__3703
25be0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25be4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3701
25be8                 | LR__3702
25be8                 | LR__3703
25be8     00 04 56 F2 | 	cmps	_var03, #0 wc
25bec     00 FA 05 C6 |  if_b	mov	result1, #0
25bf0     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25bf4     05 07 0A F2 | 	cmp	_var04, _var06 wz
25bf8     00 FA 05 A6 |  if_e	mov	result1, #0
25bfc     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25c00     00 06 0E F2 | 	cmp	_var04, #0 wz
25c04     01 FA 65 A6 |  if_e	neg	result1, #1
25c08     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25c0c     00 0A 0E F2 | 	cmp	_var06, #0 wz
25c10     01 FA 05 A6 |  if_e	mov	result1, #1
25c14     03 FB 01 56 |  if_ne	mov	result1, _var04
25c18     05 FB 81 51 |  if_ne	sub	result1, _var06
25c1c                 | __system__strncmp_ret
25c1c     2D 00 64 FD | 	ret
25c20                 | 
25c20                 | __system____root_opendir
25c20     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25c24     04 12 06 F1 | 	add	arg01, #4
25c28     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25c2c     00 FA 05 F6 | 	mov	result1, #0
25c30     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25c34                 | __system____root_opendir_ret
25c34     2D 00 64 FD | 	ret
25c38                 | 
25c38                 | __system____root_readdir
25c38     03 4A 05 F6 | 	mov	COUNT_, #3
25c3c     A8 00 A0 FD | 	call	#pushregs_
25c40     09 1F 02 F6 | 	mov	local01, arg01
25c44     0A 21 02 F6 | 	mov	local02, arg02
25c48     04 1E 06 F1 | 	add	local01, #4
25c4c     0F 23 02 FB | 	rdlong	local03, local01
25c50     04 1E 86 F1 | 	sub	local01, #4
25c54                 | LR__3710
25c54     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25c58     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25c5c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25c60     01 FA 65 A6 |  if_e	neg	result1, #1
25c64     48 00 90 AD |  if_e	jmp	#LR__3711
25c68     11 17 0A FB | 	rdlong	arg03, local03 wz
25c6c     04 22 06 A1 |  if_e	add	local03, #4
25c70     E0 FF 9F AD |  if_e	jmp	#LR__3710
25c74     11 15 02 FB | 	rdlong	arg02, local03
25c78     01 14 06 F1 | 	add	arg02, #1
25c7c     10 13 02 F6 | 	mov	arg01, local02
25c80     40 16 06 F6 | 	mov	arg03, #64
25c84     58 FE BF FD | 	call	#__system__strncpy
25c88     50 20 06 F1 | 	add	local02, #80
25c8c     10 03 48 FC | 	wrbyte	#1, local02
25c90     08 20 86 F1 | 	sub	local02, #8
25c94     10 01 68 FC | 	wrlong	#0, local02
25c98     04 20 06 F1 | 	add	local02, #4
25c9c     10 01 68 FC | 	wrlong	#0, local02
25ca0     04 22 06 F1 | 	add	local03, #4
25ca4     04 1E 06 F1 | 	add	local01, #4
25ca8     0F 23 62 FC | 	wrlong	local03, local01
25cac     00 FA 05 F6 | 	mov	result1, #0
25cb0                 | LR__3711
25cb0     A7 F0 03 F6 | 	mov	ptra, fp
25cb4     B2 00 A0 FD | 	call	#popregs_
25cb8                 | __system____root_readdir_ret
25cb8     2D 00 64 FD | 	ret
25cbc                 | 
25cbc                 | __system____root_closedir
25cbc     00 FA 05 F6 | 	mov	result1, #0
25cc0                 | __system____root_closedir_ret
25cc0     2D 00 64 FD | 	ret
25cc4                 | 
25cc4                 | __system____root_stat
25cc4     0A 01 02 F6 | 	mov	_var01, arg02
25cc8     00 13 02 F6 | 	mov	arg01, _var01
25ccc     00 14 06 F6 | 	mov	arg02, #0
25cd0     30 16 06 F6 | 	mov	arg03, #48
25cd4     98 00 A0 FD | 	call	#\builtin_bytefill_
25cd8     08 00 06 F1 | 	add	_var01, #8
25cdc     08 00 80 FF 
25ce0     00 FF 6B FC | 	wrlong	##4607, _var01
25ce4     00 FA 05 F6 | 	mov	result1, #0
25ce8                 | __system____root_stat_ret
25ce8     2D 00 64 FD | 	ret
25cec                 | 
25cec                 | __system___normalizeName
25cec     00 00 06 F6 | 	mov	_var01, #0
25cf0     09 03 02 F6 | 	mov	_var02, arg01
25cf4     01 05 02 F6 | 	mov	_var03, _var02
25cf8                 | LR__3720
25cf8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25cfc     5C 01 90 AD |  if_e	jmp	#LR__3739
25d00     00 00 0E F2 | 	cmp	_var01, #0 wz
25d04     02 07 02 56 |  if_ne	mov	_var04, _var03
25d08     01 04 06 51 |  if_ne	add	_var03, #1
25d0c     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25d10     00 00 06 56 |  if_ne	mov	_var01, #0
25d14     01 07 C2 FA | 	rdbyte	_var04, _var02
25d18     2E 06 0E F2 | 	cmp	_var04, #46 wz
25d1c     D8 00 90 5D |  if_ne	jmp	#LR__3732
25d20     01 02 06 F1 | 	add	_var02, #1
25d24     01 07 C2 FA | 	rdbyte	_var04, _var02
25d28     01 02 86 F1 | 	sub	_var02, #1
25d2c     2F 06 0E F2 | 	cmp	_var04, #47 wz
25d30     18 00 90 AD |  if_e	jmp	#LR__3721
25d34     01 02 06 F1 | 	add	_var02, #1
25d38     01 09 C2 FA | 	rdbyte	_var05, _var02
25d3c     01 02 86 F1 | 	sub	_var02, #1
25d40     04 0B 02 F6 | 	mov	_var06, _var05
25d44     07 0A 4E F7 | 	zerox	_var06, #7 wz
25d48     10 00 90 5D |  if_ne	jmp	#LR__3722
25d4c                 | LR__3721
25d4c     01 0D 02 F6 | 	mov	_var07, _var02
25d50     01 0C 06 F1 | 	add	_var07, #1
25d54     06 03 02 F6 | 	mov	_var02, _var07
25d58     E0 00 90 FD | 	jmp	#LR__3736
25d5c                 | LR__3722
25d5c     01 02 06 F1 | 	add	_var02, #1
25d60     01 0D C2 FA | 	rdbyte	_var07, _var02
25d64     01 02 86 F1 | 	sub	_var02, #1
25d68     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25d6c     2E 06 0E F2 | 	cmp	_var04, #46 wz
25d70     84 00 90 5D |  if_ne	jmp	#LR__3731
25d74     02 02 06 F1 | 	add	_var02, #2
25d78     01 0D C2 FA | 	rdbyte	_var07, _var02
25d7c     02 02 86 F1 | 	sub	_var02, #2
25d80     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25d84     2F 06 0E F2 | 	cmp	_var04, #47 wz
25d88     18 00 90 AD |  if_e	jmp	#LR__3723
25d8c     02 02 06 F1 | 	add	_var02, #2
25d90     01 09 C2 FA | 	rdbyte	_var05, _var02
25d94     02 02 86 F1 | 	sub	_var02, #2
25d98     04 0B 02 F6 | 	mov	_var06, _var05
25d9c     07 0A 4E F7 | 	zerox	_var06, #7 wz
25da0     54 00 90 5D |  if_ne	jmp	#LR__3730
25da4                 | LR__3723
25da4     02 02 06 F1 | 	add	_var02, #2
25da8     09 05 5A F2 | 	cmps	_var03, arg01 wcz
25dac     40 00 90 ED |  if_be	jmp	#LR__3729
25db0     02 0F 02 F6 | 	mov	_var08, _var03
25db4     01 0E 86 F1 | 	sub	_var08, #1
25db8                 | LR__3724
25db8     07 07 C2 FA | 	rdbyte	_var04, _var08
25dbc     2F 06 0E F2 | 	cmp	_var04, #47 wz
25dc0     0C 00 90 5D |  if_ne	jmp	#LR__3725
25dc4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25dc8     01 0E 86 11 |  if_a	sub	_var08, #1
25dcc     E8 FF 9F 1D |  if_a	jmp	#LR__3724
25dd0                 | LR__3725
25dd0     97 0C 48 FB | 	callpa	#(@LR__3727-@LR__3726)>>2,fcache_load_ptr_
25dd4                 | LR__3726
25dd4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25dd8     10 00 90 ED |  if_be	jmp	#LR__3728
25ddc     07 07 C2 FA | 	rdbyte	_var04, _var08
25de0     2F 06 0E F2 | 	cmp	_var04, #47 wz
25de4     01 0E 86 51 |  if_ne	sub	_var08, #1
25de8     E8 FF 9F 5D |  if_ne	jmp	#LR__3726
25dec                 | LR__3727
25dec                 | LR__3728
25dec     07 05 02 F6 | 	mov	_var03, _var08
25df0                 | LR__3729
25df0     01 00 06 F6 | 	mov	_var01, #1
25df4     44 00 90 FD | 	jmp	#LR__3736
25df8                 | LR__3730
25df8                 | LR__3731
25df8                 | LR__3732
25df8     97 18 48 FB | 	callpa	#(@LR__3734-@LR__3733)>>2,fcache_load_ptr_
25dfc                 | LR__3733
25dfc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25e00     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
25e04     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
25e08     20 00 90 AD |  if_e	jmp	#LR__3735
25e0c     01 0B 02 F6 | 	mov	_var06, _var02
25e10     01 09 02 F6 | 	mov	_var05, _var02
25e14     01 08 06 F1 | 	add	_var05, #1
25e18     05 11 C2 FA | 	rdbyte	_var09, _var06
25e1c     04 03 02 F6 | 	mov	_var02, _var05
25e20     02 11 42 FC | 	wrbyte	_var09, _var03
25e24     01 04 06 F1 | 	add	_var03, #1
25e28     D0 FF 9F FD | 	jmp	#LR__3733
25e2c                 | LR__3734
25e2c                 | LR__3735
25e2c     01 07 C2 FA | 	rdbyte	_var04, _var02
25e30     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e34     C0 FE 9F 5D |  if_ne	jmp	#LR__3720
25e38     01 00 06 F6 | 	mov	_var01, #1
25e3c                 | LR__3736
25e3c     97 0C 48 FB | 	callpa	#(@LR__3738-@LR__3737)>>2,fcache_load_ptr_
25e40                 | LR__3737
25e40     01 07 C2 FA | 	rdbyte	_var04, _var02
25e44     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e48     01 0D 02 A6 |  if_e	mov	_var07, _var02
25e4c     01 0C 06 A1 |  if_e	add	_var07, #1
25e50     06 03 02 A6 |  if_e	mov	_var02, _var07
25e54     E8 FF 9F AD |  if_e	jmp	#LR__3737
25e58                 | LR__3738
25e58     9C FE 9F FD | 	jmp	#LR__3720
25e5c                 | LR__3739
25e5c     02 01 48 FC | 	wrbyte	#0, _var03
25e60                 | __system___normalizeName_ret
25e60     2D 00 64 FD | 	ret
25e64                 | 
25e64                 | __system___strrev
25e64     09 01 CA FA | 	rdbyte	_var01, arg01 wz
25e68     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
25e6c     09 03 02 F6 | 	mov	_var02, arg01
25e70     97 1A 48 FB | 	callpa	#(@LR__3742-@LR__3740)>>2,fcache_load_ptr_
25e74                 | LR__3740
25e74     01 01 CA FA | 	rdbyte	_var01, _var02 wz
25e78     01 02 06 51 |  if_ne	add	_var02, #1
25e7c     F4 FF 9F 5D |  if_ne	jmp	#LR__3740
25e80     01 02 86 F1 | 	sub	_var02, #1
25e84                 | LR__3741
25e84     09 03 5A F2 | 	cmps	_var02, arg01 wcz
25e88     1C 00 90 ED |  if_be	jmp	#LR__3743
25e8c     09 01 C2 FA | 	rdbyte	_var01, arg01
25e90     01 05 C2 FA | 	rdbyte	_var03, _var02
25e94     09 05 42 FC | 	wrbyte	_var03, arg01
25e98     01 01 42 FC | 	wrbyte	_var01, _var02
25e9c     01 12 06 F1 | 	add	arg01, #1
25ea0     01 02 86 F1 | 	sub	_var02, #1
25ea4     DC FF 9F FD | 	jmp	#LR__3741
25ea8                 | LR__3742
25ea8                 | LR__3743
25ea8                 | __system___strrev_ret
25ea8     2D 00 64 FD | 	ret
25eac                 | 
25eac                 | __system___fmtpad
25eac     06 4A 05 F6 | 	mov	COUNT_, #6
25eb0     A8 00 A0 FD | 	call	#pushregs_
25eb4     09 1F 02 F6 | 	mov	local01, arg01
25eb8     0A 21 02 F6 | 	mov	local02, arg02
25ebc     0B 23 02 F6 | 	mov	local03, arg03
25ec0     10 13 EA F8 | 	getbyte	arg01, local02, #1
25ec4     16 20 46 F0 | 	shr	local02, #22
25ec8     03 20 0E F5 | 	and	local02, #3 wz
25ecc     00 24 06 F6 | 	mov	local04, #0
25ed0     01 20 06 A6 |  if_e	mov	local02, #1
25ed4     0C 21 CA F7 | 	test	local02, arg04 wz
25ed8     00 FA 05 A6 |  if_e	mov	result1, #0
25edc     88 00 90 AD |  if_e	jmp	#LR__3753
25ee0     09 23 C2 F2 | 	subr	local03, arg01
25ee4     01 22 56 F2 | 	cmps	local03, #1 wc
25ee8     00 FA 05 C6 |  if_b	mov	result1, #0
25eec     78 00 90 CD |  if_b	jmp	#LR__3753
25ef0     03 20 0E F2 | 	cmp	local02, #3 wz
25ef4     18 00 90 5D |  if_ne	jmp	#LR__3750
25ef8     01 18 0E F2 | 	cmp	arg04, #1 wz
25efc     6E 20 62 FD | 	wrz	local02
25f00     10 23 02 F1 | 	add	local03, local02
25f04     11 23 52 F6 | 	abs	local03, local03 wc
25f08     01 22 46 F0 | 	shr	local03, #1
25f0c     11 23 82 F6 | 	negc	local03, local03
25f10                 | LR__3750
25f10     01 22 56 F2 | 	cmps	local03, #1 wc
25f14     4C 00 90 CD |  if_b	jmp	#LR__3752
25f18     11 27 02 F6 | 	mov	local05, local03
25f1c                 | LR__3751
25f1c     0F 21 02 F6 | 	mov	local02, local01
25f20     0F 29 02 F6 | 	mov	local06, local01
25f24     13 20 46 F7 | 	zerox	local02, #19
25f28     14 28 46 F0 | 	shr	local06, #20
25f2c     02 28 66 F0 | 	shl	local06, #2
25f30     ED 28 02 F1 | 	add	local06, __methods__
25f34     14 29 02 FB | 	rdlong	local06, local06
25f38     20 12 06 F6 | 	mov	arg01, #32
25f3c     F2 22 02 F6 | 	mov	local03, objptr
25f40     10 E5 01 F6 | 	mov	objptr, local02
25f44     2D 28 62 FD | 	call	local06
25f48     11 E5 01 F6 | 	mov	objptr, local03
25f4c     FD 28 02 F6 | 	mov	local06, result1
25f50     00 28 56 F2 | 	cmps	local06, #0 wc
25f54     14 FB 01 C6 |  if_b	mov	result1, local06
25f58     0C 00 90 CD |  if_b	jmp	#LR__3753
25f5c     14 25 02 F1 | 	add	local04, local06
25f60     EE 27 6E FB | 	djnz	local05, #LR__3751
25f64                 | LR__3752
25f64     12 FB 01 F6 | 	mov	result1, local04
25f68                 | LR__3753
25f68     A7 F0 03 F6 | 	mov	ptra, fp
25f6c     B2 00 A0 FD | 	call	#popregs_
25f70                 | __system___fmtpad_ret
25f70     2D 00 64 FD | 	ret
25f74                 | 
25f74                 | __system___uitoa
25f74     04 4A 05 F6 | 	mov	COUNT_, #4
25f78     A8 00 A0 FD | 	call	#pushregs_
25f7c     09 1F 02 F6 | 	mov	local01, arg01
25f80     00 1A 4E F2 | 	cmps	arg05, #0 wz
25f84     0F 1B 02 F6 | 	mov	arg05, local01
25f88     00 20 06 F6 | 	mov	local02, #0
25f8c     37 22 06 56 |  if_ne	mov	local03, #55
25f90     57 22 06 A6 |  if_e	mov	local03, #87
25f94                 | LR__3760
25f94     0B 15 12 FD | 	qdiv	arg02, arg03
25f98     19 24 62 FD | 	getqy	local04
25f9c     0B 15 12 FD | 	qdiv	arg02, arg03
25fa0     0A 24 16 F2 | 	cmp	local04, #10 wc
25fa4     30 24 06 C1 |  if_b	add	local04, #48
25fa8     11 25 02 31 |  if_ae	add	local04, local03
25fac     0D 25 42 FC | 	wrbyte	local04, arg05
25fb0     01 1A 06 F1 | 	add	arg05, #1
25fb4     01 20 06 F1 | 	add	local02, #1
25fb8     18 14 62 FD | 	getqx	arg02
25fbc     00 14 0E F2 | 	cmp	arg02, #0 wz
25fc0     D0 FF 9F 5D |  if_ne	jmp	#LR__3760
25fc4     0C 21 12 F2 | 	cmp	local02, arg04 wc
25fc8     C8 FF 9F CD |  if_b	jmp	#LR__3760
25fcc     0D 01 48 FC | 	wrbyte	#0, arg05
25fd0     0F 13 02 F6 | 	mov	arg01, local01
25fd4     8C FE BF FD | 	call	#__system___strrev
25fd8     10 FB 01 F6 | 	mov	result1, local02
25fdc     A7 F0 03 F6 | 	mov	ptra, fp
25fe0     B2 00 A0 FD | 	call	#popregs_
25fe4                 | __system___uitoa_ret
25fe4     2D 00 64 FD | 	ret
25fe8                 | 
25fe8                 | __system__disassemble_0499
25fe8     10 4A 05 F6 | 	mov	COUNT_, #16
25fec     A8 00 A0 FD | 	call	#pushregs_
25ff0     09 1F 02 F6 | 	mov	local01, arg01
25ff4     0A 21 02 F6 | 	mov	local02, arg02
25ff8     0B 23 02 F6 | 	mov	local03, arg03
25ffc     0C 25 02 F6 | 	mov	local04, arg04
26000     0D 27 02 F6 | 	mov	local05, arg05
26004     13 13 52 F6 | 	abs	arg01, local05 wc
26008     1F 28 C6 C9 |  if_b	decod	local06, #31
2600c     00 28 06 36 |  if_ae	mov	local06, #0
26010     CC CF BF FD | 	call	#__system___float_fromuns
26014     14 FB 61 F5 | 	xor	result1, local06
26018     FD 2A 02 F6 | 	mov	local07, result1
2601c     00 2C 06 F6 | 	mov	local08, #0
26020     0F 13 02 F6 | 	mov	arg01, local01
26024     00 14 06 F6 | 	mov	arg02, #0
26028     01 16 06 F6 | 	mov	arg03, #1
2602c     E8 D7 BF FD | 	call	#__system___float_cmp
26030     00 FA 0D F2 | 	cmp	result1, #0 wz
26034     00 2E 06 A6 |  if_e	mov	local09, #0
26038     10 01 68 AC |  if_e	wrlong	#0, local02
2603c     11 2F 62 AC |  if_e	wrlong	local09, local03
26040     8C 01 90 AD |  if_e	jmp	#LR__3782
26044     0F 13 02 F6 | 	mov	arg01, local01
26048     BC DC BF FD | 	call	#__system____builtin_ilogb
2604c     FD 30 02 F6 | 	mov	local10, result1
26050     0A 26 0E F2 | 	cmp	local05, #10 wz
26054     24 00 90 5D |  if_ne	jmp	#LR__3770
26058     18 2F 02 F6 | 	mov	local09, local10
2605c     01 2E 66 F0 | 	shl	local09, #1
26060     18 2F 02 F1 | 	add	local09, local10
26064     17 31 52 F6 | 	abs	local10, local09 wc
26068     0A 30 16 FD | 	qdiv	local10, #10
2606c     09 32 06 F6 | 	mov	local11, #9
26070     18 30 62 FD | 	getqx	local10
26074     18 31 82 F6 | 	negc	local10, local10
26078     04 00 90 FD | 	jmp	#LR__3771
2607c                 | LR__3770
2607c     18 32 06 F6 | 	mov	local11, #24
26080                 | LR__3771
26080                 | LR__3772
26080     08 2C 56 F2 | 	cmps	local08, #8 wc
26084     01 2C 06 F1 | 	add	local08, #1
26088     60 00 90 3D |  if_ae	jmp	#LR__3773
2608c     00 C0 1F FF 
26090     00 12 06 F6 | 	mov	arg01, ##1065353216
26094     15 15 02 F6 | 	mov	arg02, local07
26098     18 17 02 F6 | 	mov	arg03, local10
2609c     4C E3 BF FD | 	call	#__system___float_pow_n
260a0     FD 14 02 F6 | 	mov	arg02, result1
260a4     0F 13 02 F6 | 	mov	arg01, local01
260a8     3C D5 BF FD | 	call	#__system___float_div
260ac     FD 34 02 F6 | 	mov	local12, result1
260b0     1A 13 02 F6 | 	mov	arg01, local12
260b4     00 C0 1F FF 
260b8     00 14 06 F6 | 	mov	arg02, ##1065353216
260bc     01 16 06 F6 | 	mov	arg03, #1
260c0     54 D7 BF FD | 	call	#__system___float_cmp
260c4     00 FA 55 F2 | 	cmps	result1, #0 wc
260c8     01 30 86 C1 |  if_b	sub	local10, #1
260cc     B0 FF 9F CD |  if_b	jmp	#LR__3772
260d0     15 15 02 F6 | 	mov	arg02, local07
260d4     1A 13 02 F6 | 	mov	arg01, local12
260d8     01 16 66 F6 | 	neg	arg03, #1
260dc     38 D7 BF FD | 	call	#__system___float_cmp
260e0     00 FA 55 F2 | 	cmps	result1, #0 wc
260e4     01 30 06 31 |  if_ae	add	local10, #1
260e8     94 FF 9F 3D |  if_ae	jmp	#LR__3772
260ec                 | LR__3773
260ec     1A 13 02 F6 | 	mov	arg01, local12
260f0     14 DC BF FD | 	call	#__system____builtin_ilogb
260f4     FD 36 02 F6 | 	mov	local13, result1
260f8     1A 39 02 F6 | 	mov	local14, local12
260fc     17 39 06 F4 | 	bitl	local14, #279
26100     17 38 26 F4 | 	bith	local14, #23
26104     1B 39 62 F0 | 	shl	local14, local13
26108     02 26 0E F2 | 	cmp	local05, #2 wz
2610c     02 24 66 A0 |  if_e	shl	local04, #2
26110     00 3A 06 F6 | 	mov	local15, #0
26114     00 24 56 F2 | 	cmps	local04, #0 wc
26118     10 00 90 3D |  if_ae	jmp	#LR__3774
2611c     18 25 C2 F2 | 	subr	local04, local10
26120     00 24 56 F2 | 	cmps	local04, #0 wc
26124     A0 00 90 CD |  if_b	jmp	#LR__3781
26128     04 00 90 FD | 	jmp	#LR__3775
2612c                 | LR__3774
2612c     01 24 06 F1 | 	add	local04, #1
26130                 | LR__3775
26130     19 25 7A F3 | 	fles	local04, local11 wcz
26134     01 3C 06 F6 | 	mov	local16, #1
26138     97 22 48 FB | 	callpa	#(@LR__3777-@LR__3776)>>2,fcache_load_ptr_
2613c                 | LR__3776
2613c     00 40 00 FF 
26140     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
26144     38 00 90 3D |  if_ae	jmp	#LR__3778
26148     01 24 56 F2 | 	cmps	local04, #1 wc
2614c     01 24 86 F1 | 	sub	local04, #1
26150     2C 00 90 CD |  if_b	jmp	#LR__3778
26154     13 3B 02 FD | 	qmul	local15, local05
26158     1C 37 02 F6 | 	mov	local13, local14
2615c     17 36 46 F0 | 	shr	local13, #23
26160     17 39 06 F4 | 	bitl	local14, #279
26164     18 3A 62 FD | 	getqx	local15
26168     13 3D 02 FD | 	qmul	local16, local05
2616c     18 3C 62 FD | 	getqx	local16
26170     13 39 02 FD | 	qmul	local14, local05
26174     1B 3B 02 F1 | 	add	local15, local13
26178     18 38 62 FD | 	getqx	local14
2617c     BC FF 9F FD | 	jmp	#LR__3776
26180                 | LR__3777
26180                 | LR__3778
26180     13 2F 02 F6 | 	mov	local09, local05
26184     17 2E 66 F0 | 	shl	local09, #23
26188     17 37 52 F6 | 	abs	local13, local09 wc
2618c     01 36 46 F0 | 	shr	local13, #1
26190     1B 37 82 F6 | 	negc	local13, local13
26194     1B 39 1A F2 | 	cmp	local14, local13 wcz
26198     20 00 90 1D |  if_a	jmp	#LR__3779
2619c     17 26 66 F0 | 	shl	local05, #23
261a0     13 37 52 F6 | 	abs	local13, local05 wc
261a4     01 36 46 F0 | 	shr	local13, #1
261a8     1B 37 82 F6 | 	negc	local13, local13
261ac     1B 39 0A F2 | 	cmp	local14, local13 wz
261b0     14 00 90 5D |  if_ne	jmp	#LR__3780
261b4     01 3A CE F7 | 	test	local15, #1 wz
261b8     0C 00 90 AD |  if_e	jmp	#LR__3780
261bc                 | LR__3779
261bc     01 3A 06 F1 | 	add	local15, #1
261c0     1E 3B 0A F2 | 	cmp	local15, local16 wz
261c4     01 30 06 A1 |  if_e	add	local10, #1
261c8                 | LR__3780
261c8                 | LR__3781
261c8     10 3B 62 FC | 	wrlong	local15, local02
261cc     11 31 62 FC | 	wrlong	local10, local03
261d0                 | LR__3782
261d0     A7 F0 03 F6 | 	mov	ptra, fp
261d4     B2 00 A0 FD | 	call	#popregs_
261d8                 | __system__disassemble_0499_ret
261d8     2D 00 64 FD | 	ret
261dc                 | 
261dc                 | __system__emitsign_0501
261dc     00 FA 05 F6 | 	mov	result1, #0
261e0     00 14 0E F2 | 	cmp	arg02, #0 wz
261e4     09 01 02 56 |  if_ne	mov	_var01, arg01
261e8     01 12 06 51 |  if_ne	add	arg01, #1
261ec     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
261f0     01 FA 05 56 |  if_ne	mov	result1, #1
261f4     00 16 0E F2 | 	cmp	arg03, #0 wz
261f8     09 61 48 5C |  if_ne	wrbyte	#48, arg01
261fc     01 12 06 51 |  if_ne	add	arg01, #1
26200     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
26204     02 FA 05 51 |  if_ne	add	result1, #2
26208                 | __system__emitsign_0501_ret
26208     2D 00 64 FD | 	ret
2620c                 | 
2620c                 | __system___gettxfunc
2620c     01 4A 05 F6 | 	mov	COUNT_, #1
26210     A8 00 A0 FD | 	call	#pushregs_
26214     A0 F8 BF FD | 	call	#__system____getftab
26218     FD 1E 0A F6 | 	mov	local01, result1 wz
2621c     10 00 90 AD |  if_e	jmp	#LR__3790
26220     08 1E 06 F1 | 	add	local01, #8
26224     0F 15 0A FB | 	rdlong	arg02, local01 wz
26228     08 1E 86 F1 | 	sub	local01, #8
2622c     08 00 90 5D |  if_ne	jmp	#LR__3791
26230                 | LR__3790
26230     00 FA 05 F6 | 	mov	result1, #0
26234     0C 00 90 FD | 	jmp	#LR__3792
26238                 | LR__3791
26238     00 90 04 FF 
2623c     00 1E 46 F5 | 	or	local01, ##153092096
26240     0F FB 01 F6 | 	mov	result1, local01
26244                 | LR__3792
26244     A7 F0 03 F6 | 	mov	ptra, fp
26248     B2 00 A0 FD | 	call	#popregs_
2624c                 | __system___gettxfunc_ret
2624c     2D 00 64 FD | 	ret
26250                 | 
26250                 | __system___getrxfunc
26250     01 4A 05 F6 | 	mov	COUNT_, #1
26254     A8 00 A0 FD | 	call	#pushregs_
26258     5C F8 BF FD | 	call	#__system____getftab
2625c     FD 1E 0A F6 | 	mov	local01, result1 wz
26260     10 00 90 AD |  if_e	jmp	#LR__3800
26264     08 1E 06 F1 | 	add	local01, #8
26268     0F 15 0A FB | 	rdlong	arg02, local01 wz
2626c     08 1E 86 F1 | 	sub	local01, #8
26270     08 00 90 5D |  if_ne	jmp	#LR__3801
26274                 | LR__3800
26274     00 FA 05 F6 | 	mov	result1, #0
26278     0C 00 90 FD | 	jmp	#LR__3802
2627c                 | LR__3801
2627c     00 98 04 FF 
26280     00 1E 46 F5 | 	or	local01, ##154140672
26284     0F FB 01 F6 | 	mov	result1, local01
26288                 | LR__3802
26288     A7 F0 03 F6 | 	mov	ptra, fp
2628c     B2 00 A0 FD | 	call	#popregs_
26290                 | __system___getrxfunc_ret
26290     2D 00 64 FD | 	ret
26294                 | 
26294                 | __system___getiolock_0541
26294     01 4A 05 F6 | 	mov	COUNT_, #1
26298     A8 00 A0 FD | 	call	#pushregs_
2629c     18 F8 BF FD | 	call	#__system____getftab
262a0     FD 1E 0A F6 | 	mov	local01, result1 wz
262a4     10 00 90 AD |  if_e	jmp	#LR__3810
262a8     08 1E 06 F1 | 	add	local01, #8
262ac     0F FB 09 FB | 	rdlong	result1, local01 wz
262b0     08 1E 86 F1 | 	sub	local01, #8
262b4     18 00 90 5D |  if_ne	jmp	#LR__3811
262b8                 | LR__3810
262b8     01 00 00 FF 
262bc     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
262c0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
262c4     01 00 00 FF 
262c8     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
262cc     08 00 90 FD | 	jmp	#LR__3812
262d0                 | LR__3811
262d0     0C 1E 06 F1 | 	add	local01, #12
262d4     0F FB 01 F6 | 	mov	result1, local01
262d8                 | LR__3812
262d8     A7 F0 03 F6 | 	mov	ptra, fp
262dc     B2 00 A0 FD | 	call	#popregs_
262e0                 | __system___getiolock_0541_ret
262e0     2D 00 64 FD | 	ret
262e4                 | 
262e4                 | __system____ScanForChar
262e4     09 01 02 F6 | 	mov	_var01, arg01
262e8     09 03 02 F6 | 	mov	_var02, arg01
262ec     97 06 48 FB | 	callpa	#(@LR__3821-@LR__3820)>>2,fcache_load_ptr_
262f0                 | LR__3820
262f0     01 FB C9 FA | 	rdbyte	result1, _var02 wz
262f4     01 02 06 51 |  if_ne	add	_var02, #1
262f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3820
262fc                 | LR__3821
262fc     09 03 82 F1 | 	sub	_var02, arg01
26300     01 FB 01 F6 | 	mov	result1, _var02
26304     FD 12 0A F6 | 	mov	arg01, result1 wz
26308     00 FA 05 A6 |  if_e	mov	result1, #0
2630c     B8 00 90 AD |  if_e	jmp	#LR__3828
26310     0A 05 02 F6 | 	mov	_var03, arg02
26314     07 04 4E F7 | 	zerox	_var03, #7 wz
26318     00 FA 05 A6 |  if_e	mov	result1, #0
2631c     A8 00 90 AD |  if_e	jmp	#LR__3828
26320     01 16 16 F2 | 	cmp	arg03, #1 wc
26324     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
26328     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2632c     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
26330     94 00 90 4D |  if_c_and_nz	jmp	#LR__3828
26334     09 17 1A F2 | 	cmp	arg03, arg01 wcz
26338     10 00 90 ED |  if_be	jmp	#LR__3822
2633c     00 18 0E F2 | 	cmp	arg04, #0 wz
26340     00 FA 05 A6 |  if_e	mov	result1, #0
26344     80 00 90 AD |  if_e	jmp	#LR__3828
26348     09 17 02 F6 | 	mov	arg03, arg01
2634c                 | LR__3822
2634c     01 16 86 F1 | 	sub	arg03, #1
26350     00 18 0E F2 | 	cmp	arg04, #0 wz
26354     38 00 90 5D |  if_ne	jmp	#LR__3824
26358     0B 07 02 F6 | 	mov	_var04, arg03
2635c     09 09 02 F6 | 	mov	_var05, arg01
26360                 | LR__3823
26360     04 07 12 F2 | 	cmp	_var04, _var05 wc
26364     5C 00 90 3D |  if_ae	jmp	#LR__3827
26368     03 05 02 F6 | 	mov	_var03, _var04
2636c     00 05 02 F1 | 	add	_var03, _var01
26370     02 05 C2 FA | 	rdbyte	_var03, _var03
26374     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
26378     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2637c     01 06 06 A1 |  if_e	add	_var04, #1
26380     03 FB 01 A6 |  if_e	mov	result1, _var04
26384     40 00 90 AD |  if_e	jmp	#LR__3828
26388     01 06 06 F1 | 	add	_var04, #1
2638c     D0 FF 9F FD | 	jmp	#LR__3823
26390                 | LR__3824
26390     0B 07 02 F6 | 	mov	_var04, arg03
26394                 | LR__3825
26394     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
26398     28 00 90 1D |  if_a	jmp	#LR__3826
2639c     03 09 02 F6 | 	mov	_var05, _var04
263a0     00 09 02 F1 | 	add	_var05, _var01
263a4     04 05 C2 FA | 	rdbyte	_var03, _var05
263a8     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
263ac     04 05 0A F2 | 	cmp	_var03, _var05 wz
263b0     01 06 06 A1 |  if_e	add	_var04, #1
263b4     03 FB 01 A6 |  if_e	mov	result1, _var04
263b8     0C 00 90 AD |  if_e	jmp	#LR__3828
263bc     01 06 86 F1 | 	sub	_var04, #1
263c0     D0 FF 9F FD | 	jmp	#LR__3825
263c4                 | LR__3826
263c4                 | LR__3827
263c4     00 FA 05 F6 | 	mov	result1, #0
263c8                 | LR__3828
263c8                 | __system____ScanForChar_ret
263c8     2D 00 64 FD | 	ret
263cc                 | 
263cc                 | __system___basic_dir
263cc     05 4A 05 F6 | 	mov	COUNT_, #5
263d0     A8 00 A0 FD | 	call	#pushregs_
263d4     4C F0 07 F1 | 	add	ptra, #76
263d8     04 4E 05 F1 | 	add	fp, #4
263dc     A7 12 62 FC | 	wrlong	arg01, fp
263e0     04 4E 05 F1 | 	add	fp, #4
263e4     A7 14 62 FC | 	wrlong	arg02, fp
263e8     04 4E 85 F1 | 	sub	fp, #4
263ec     A7 14 0A FB | 	rdlong	arg02, fp wz
263f0     04 4E 85 F1 | 	sub	fp, #4
263f4     04 4E 05 51 |  if_ne	add	fp, #4
263f8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
263fc     04 4E 85 51 |  if_ne	sub	fp, #4
26400     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
26404     70 00 90 AD |  if_e	jmp	#LR__3830
26408     03 00 00 FF 
2640c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26410     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26414     03 00 00 FF 
26418     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2641c     03 00 00 5F 
26420     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
26424     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
26428     03 00 00 5F 
2642c     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
26430     D8 E9 BF 5D |  if_ne	call	#__system__closedir
26434     80 01 00 FF 
26438     E4 12 06 F6 | 	mov	arg01, ##@LR__4998
2643c     E0 E8 BF FD | 	call	#__system__opendir
26440     03 00 00 FF 
26444     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26448     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2644c     08 4E 05 F1 | 	add	fp, #8
26450     A7 20 02 FB | 	rdlong	local02, fp
26454     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26458     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
2645c     04 4E 85 F1 | 	sub	fp, #4
26460     A7 20 02 FB | 	rdlong	local02, fp
26464     04 4E 85 F1 | 	sub	fp, #4
26468     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2646c     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26470     03 00 00 FF 
26474     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
26478                 | LR__3830
26478     03 00 00 FF 
2647c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26480     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26484     03 00 00 FF 
26488     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2648c     80 01 00 AF 
26490     E6 FA 05 A6 |  if_e	mov	result1, ##@LR__4999
26494     84 02 90 AD |  if_e	jmp	#LR__3843
26498                 | LR__3831
26498     03 00 00 FF 
2649c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
264a0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
264a4     03 00 00 FF 
264a8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
264ac     D0 E9 BF FD | 	call	#__system__readdir
264b0     0C 4E 05 F1 | 	add	fp, #12
264b4     A7 FA 61 FC | 	wrlong	result1, fp
264b8     0C 4E 85 F1 | 	sub	fp, #12
264bc     00 FA 0D F2 | 	cmp	result1, #0 wz
264c0     38 00 90 5D |  if_ne	jmp	#LR__3832
264c4     03 00 00 FF 
264c8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
264cc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
264d0     03 00 00 FF 
264d4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
264d8     30 E9 BF FD | 	call	#__system__closedir
264dc     03 00 00 FF 
264e0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
264e4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
264e8     03 00 00 FF 
264ec     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
264f0     80 01 00 FF 
264f4     E8 FA 05 F6 | 	mov	result1, ##@LR__5000
264f8     20 02 90 FD | 	jmp	#LR__3843
264fc                 | LR__3832
264fc     0C 4E 05 F1 | 	add	fp, #12
26500     A7 12 02 FB | 	rdlong	arg01, fp
26504     0C 4E 85 F1 | 	sub	fp, #12
26508     03 00 00 FF 
2650c     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
26510     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
26514     03 00 00 FF 
26518     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2651c     10 09 B0 FD | 	call	#__system___pat_match
26520     00 FA 0D F2 | 	cmp	result1, #0 wz
26524     70 FF 9F AD |  if_e	jmp	#LR__3831
26528     03 00 00 FF 
2652c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26530     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26534     03 00 00 FF 
26538     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2653c     78 01 90 AD |  if_e	jmp	#LR__3839
26540     0C 4E 05 F1 | 	add	fp, #12
26544     A7 12 02 FB | 	rdlong	arg01, fp
26548     04 4E 05 F1 | 	add	fp, #4
2654c     A7 14 02 F6 | 	mov	arg02, fp
26550     10 4E 85 F1 | 	sub	fp, #16
26554     2C F2 BF FD | 	call	#__system__stat
26558     40 4E 05 F1 | 	add	fp, #64
2655c     A7 FA 61 FC | 	wrlong	result1, fp
26560     40 4E 85 F1 | 	sub	fp, #64
26564     00 FA 0D F2 | 	cmp	result1, #0 wz
26568     80 01 00 5F 
2656c     EA FA 05 56 |  if_ne	mov	result1, ##@LR__5001
26570     A8 01 90 5D |  if_ne	jmp	#LR__3843
26574     18 4E 05 F1 | 	add	fp, #24
26578     A7 20 02 FB | 	rdlong	local02, fp
2657c     78 00 00 FF 
26580     00 20 06 F5 | 	and	local02, ##61440
26584     2C 4E 05 F1 | 	add	fp, #44
26588     A7 20 62 FC | 	wrlong	local02, fp
2658c     38 4E 85 F1 | 	sub	fp, #56
26590     A7 20 02 FB | 	rdlong	local02, fp
26594     0C 4E 85 F1 | 	sub	fp, #12
26598     10 21 C2 FA | 	rdbyte	local02, local02
2659c     2E 20 0E F2 | 	cmp	local02, #46 wz
265a0     08 4E 05 A1 |  if_e	add	fp, #8
265a4     A7 04 68 AC |  if_e	wrlong	#2, fp
265a8     08 4E C5 F3 | 	sumz	fp, #8
265ac     A7 00 68 5C |  if_ne	wrlong	#0, fp
265b0     08 4E 85 51 |  if_ne	sub	fp, #8
265b4     44 4E 05 F1 | 	add	fp, #68
265b8     A7 20 02 FB | 	rdlong	local02, fp
265bc     44 4E 85 F1 | 	sub	fp, #68
265c0     08 00 00 FF 
265c4     00 20 0E F2 | 	cmp	local02, ##4096 wz
265c8     18 00 90 5D |  if_ne	jmp	#LR__3833
265cc     08 4E 05 F1 | 	add	fp, #8
265d0     A7 20 02 FB | 	rdlong	local02, fp
265d4     10 20 46 F5 | 	or	local02, #16
265d8     A7 20 62 FC | 	wrlong	local02, fp
265dc     08 4E 85 F1 | 	sub	fp, #8
265e0     AC 00 90 FD | 	jmp	#LR__3838
265e4                 | LR__3833
265e4     44 4E 05 F1 | 	add	fp, #68
265e8     A7 20 02 FB | 	rdlong	local02, fp
265ec     44 4E 85 F1 | 	sub	fp, #68
265f0     10 00 00 FF 
265f4     00 20 0E F2 | 	cmp	local02, ##8192 wz
265f8     44 4E 05 51 |  if_ne	add	fp, #68
265fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26600     44 4E 85 51 |  if_ne	sub	fp, #68
26604     18 00 00 5F 
26608     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
2660c     44 4E 05 51 |  if_ne	add	fp, #68
26610     0F 23 02 56 |  if_ne	mov	local03, local01
26614     44 4E 85 51 |  if_ne	sub	fp, #68
26618     20 00 00 5F 
2661c     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
26620     18 00 90 5D |  if_ne	jmp	#LR__3834
26624     08 4E 05 F1 | 	add	fp, #8
26628     A7 20 02 FB | 	rdlong	local02, fp
2662c     04 20 46 F5 | 	or	local02, #4
26630     A7 20 62 FC | 	wrlong	local02, fp
26634     08 4E 85 F1 | 	sub	fp, #8
26638     54 00 90 FD | 	jmp	#LR__3837
2663c                 | LR__3834
2663c     18 4E 05 F1 | 	add	fp, #24
26640     A7 20 02 FB | 	rdlong	local02, fp
26644     18 4E 85 F1 | 	sub	fp, #24
26648     92 20 CE F7 | 	test	local02, #146 wz
2664c     18 00 90 5D |  if_ne	jmp	#LR__3835
26650     08 4E 05 F1 | 	add	fp, #8
26654     A7 20 02 FB | 	rdlong	local02, fp
26658     01 20 46 F5 | 	or	local02, #1
2665c     A7 20 62 FC | 	wrlong	local02, fp
26660     08 4E 85 F1 | 	sub	fp, #8
26664     28 00 90 FD | 	jmp	#LR__3836
26668                 | LR__3835
26668     44 4E 05 F1 | 	add	fp, #68
2666c     A7 24 02 FB | 	rdlong	local04, fp
26670     44 4E 85 F1 | 	sub	fp, #68
26674     08 00 00 FF 
26678     00 24 0E F2 | 	cmp	local04, ##4096 wz
2667c     08 4E 05 51 |  if_ne	add	fp, #8
26680     A7 24 02 5B |  if_ne	rdlong	local04, fp
26684     20 24 46 55 |  if_ne	or	local04, #32
26688     A7 24 62 5C |  if_ne	wrlong	local04, fp
2668c     08 4E 85 51 |  if_ne	sub	fp, #8
26690                 | LR__3836
26690                 | LR__3837
26690                 | LR__3838
26690     08 4E 05 F1 | 	add	fp, #8
26694     A7 24 02 FB | 	rdlong	local04, fp
26698     08 4E 85 F1 | 	sub	fp, #8
2669c     03 00 00 FF 
266a0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
266a4     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
266a8     03 00 00 FF 
266ac     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
266b0     0F 25 CA F7 | 	test	local04, local01 wz
266b4     E0 FD 9F AD |  if_e	jmp	#LR__3831
266b8                 | LR__3839
266b8     0C 4E 05 F1 | 	add	fp, #12
266bc     A7 12 02 FB | 	rdlong	arg01, fp
266c0     0C 4E 85 F1 | 	sub	fp, #12
266c4     09 27 02 F6 | 	mov	local05, arg01
266c8     97 06 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
266cc                 | LR__3840
266cc     13 FB C9 FA | 	rdbyte	result1, local05 wz
266d0     01 26 06 51 |  if_ne	add	local05, #1
266d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3840
266d8                 | LR__3841
266d8     13 13 C2 F2 | 	subr	arg01, local05
266dc     01 12 06 F1 | 	add	arg01, #1
266e0     28 E0 BF FD | 	call	#__system___gc_alloc_managed
266e4     48 4E 05 F1 | 	add	fp, #72
266e8     A7 FA 61 FC | 	wrlong	result1, fp
266ec     48 4E 85 F1 | 	sub	fp, #72
266f0     00 FA 0D F2 | 	cmp	result1, #0 wz
266f4     18 00 90 AD |  if_e	jmp	#LR__3842
266f8     48 4E 05 F1 | 	add	fp, #72
266fc     A7 12 02 FB | 	rdlong	arg01, fp
26700     3C 4E 85 F1 | 	sub	fp, #60
26704     A7 14 02 FB | 	rdlong	arg02, fp
26708     0C 4E 85 F1 | 	sub	fp, #12
2670c     D4 A0 BF FD | 	call	#__system____builtin_strcpy
26710                 | LR__3842
26710     48 4E 05 F1 | 	add	fp, #72
26714     A7 FA 01 FB | 	rdlong	result1, fp
26718     48 4E 85 F1 | 	sub	fp, #72
2671c                 | LR__3843
2671c     A7 F0 03 F6 | 	mov	ptra, fp
26720     B2 00 A0 FD | 	call	#popregs_
26724                 | __system___basic_dir_ret
26724     2D 00 64 FD | 	ret
26728                 | 
26728                 | __system__pack_0607
26728     09 01 02 F6 | 	mov	_var01, arg01
2672c     7F 16 06 F1 | 	add	arg03, #127
26730     04 18 CE F7 | 	test	arg04, #4 wz
26734     10 00 90 AD |  if_e	jmp	#LR__3850
26738     00 00 0E F2 | 	cmp	_var01, #0 wz
2673c     16 00 C6 A9 |  if_e	decod	_var01, #22
26740     F7 00 26 F4 | 	bith	_var01, #247
26744     B4 00 90 FD | 	jmp	#LR__3859
26748                 | LR__3850
26748     02 18 CE F7 | 	test	arg04, #2 wz
2674c     00 C0 3F 5F 
26750     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
26754     00 14 06 56 |  if_ne	mov	arg02, #0
26758     A0 00 90 5D |  if_ne	jmp	#LR__3858
2675c     08 18 CE F7 | 	test	arg04, #8 wz
26760     00 00 06 56 |  if_ne	mov	_var01, #0
26764     94 00 90 5D |  if_ne	jmp	#LR__3857
26768     FF 16 56 F2 | 	cmps	arg03, #255 wc
2676c     00 C0 3F 3F 
26770     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
26774     00 14 06 36 |  if_ae	mov	arg02, #0
26778     80 00 90 3D |  if_ae	jmp	#LR__3856
2677c     01 16 56 F2 | 	cmps	arg03, #1 wc
26780     6C 00 90 3D |  if_ae	jmp	#LR__3854
26784     01 14 46 F0 | 	shr	arg02, #1
26788     00 03 02 F6 | 	mov	_var02, _var01
2678c     01 02 06 F5 | 	and	_var02, #1
26790     1F 02 66 F0 | 	shl	_var02, #31
26794     01 15 42 F5 | 	or	arg02, _var02
26798     01 00 46 F0 | 	shr	_var01, #1
2679c     97 1E 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
267a0                 | LR__3851
267a0     00 16 56 F2 | 	cmps	arg03, #0 wc
267a4     34 00 90 3D |  if_ae	jmp	#LR__3853
267a8     00 00 0E F2 | 	cmp	_var01, #0 wz
267ac     2C 00 90 AD |  if_e	jmp	#LR__3853
267b0     0A 13 02 F6 | 	mov	arg01, arg02
267b4     01 12 06 F5 | 	and	arg01, #1
267b8     01 16 06 F1 | 	add	arg03, #1
267bc     01 14 46 F0 | 	shr	arg02, #1
267c0     00 03 02 F6 | 	mov	_var02, _var01
267c4     01 02 06 F5 | 	and	_var02, #1
267c8     1F 02 66 F0 | 	shl	_var02, #31
267cc     01 15 42 F5 | 	or	arg02, _var02
267d0     09 15 42 F5 | 	or	arg02, arg01
267d4     01 00 46 F0 | 	shr	_var01, #1
267d8     C4 FF 9F FD | 	jmp	#LR__3851
267dc                 | LR__3852
267dc                 | LR__3853
267dc     00 16 56 F2 | 	cmps	arg03, #0 wc
267e0     18 00 90 3D |  if_ae	jmp	#LR__3855
267e4     00 14 0E F2 | 	cmp	arg02, #0 wz
267e8     6F 14 62 FD | 	wrnz	arg02
267ec     0C 00 90 FD | 	jmp	#LR__3855
267f0                 | LR__3854
267f0     17 01 06 F4 | 	bitl	_var01, #279
267f4     17 16 66 F0 | 	shl	arg03, #23
267f8     0B 01 42 F5 | 	or	_var01, arg03
267fc                 | LR__3855
267fc                 | LR__3856
267fc                 | LR__3857
267fc                 | LR__3858
267fc                 | LR__3859
267fc     01 00 CE F7 | 	test	_var01, #1 wz
26800     01 14 46 55 |  if_ne	or	arg02, #1
26804     0A 17 02 F6 | 	mov	arg03, arg02
26808     00 02 06 F6 | 	mov	_var02, #0
2680c     FF FF 3F FF 
26810     FF 15 06 F1 | 	add	arg02, ##2147483647
26814     0B 15 12 F2 | 	cmp	arg02, arg03 wc
26818     01 02 06 C6 |  if_b	mov	_var02, #1
2681c     01 01 02 F1 | 	add	_var01, _var02
26820     01 18 CE F7 | 	test	arg04, #1 wz
26824     1F 00 26 54 |  if_ne	bith	_var01, #31
26828     00 FB 01 F6 | 	mov	result1, _var01
2682c                 | __system__pack_0607_ret
2682c     2D 00 64 FD | 	ret
26830                 | 
26830                 | __system___rxtxioctl_0697
26830     00 15 0E F2 | 	cmp	arg02, #256 wz
26834     0C 00 90 AD |  if_e	jmp	#LR__3860
26838     01 15 0E F2 | 	cmp	arg02, #257 wz
2683c     1C 00 90 AD |  if_e	jmp	#LR__3861
26840     30 00 90 FD | 	jmp	#LR__3862
26844                 | LR__3860
26844     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26848     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2684c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26850     0B FB 61 FC | 	wrlong	result1, arg03
26854     00 FA 05 F6 | 	mov	result1, #0
26858     28 00 90 FD | 	jmp	#LR__3863
2685c                 | LR__3861
2685c     0B 13 02 FB | 	rdlong	arg01, arg03
26860     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26864     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26868     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2686c     00 FA 05 F6 | 	mov	result1, #0
26870     10 00 90 FD | 	jmp	#LR__3863
26874                 | LR__3862
26874     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26878     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2687c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26880     01 FA 65 F6 | 	neg	result1, #1
26884                 | LR__3863
26884                 | __system___rxtxioctl_0697_ret
26884     2D 00 64 FD | 	ret
26888                 | 
26888                 | __system____dummy_flush_0698
26888     00 FA 05 F6 | 	mov	result1, #0
2688c                 | __system____dummy_flush_0698_ret
2688c     2D 00 64 FD | 	ret
26890                 | 
26890                 | __system___vfswrite
26890     09 4A 05 F6 | 	mov	COUNT_, #9
26894     A8 00 A0 FD | 	call	#pushregs_
26898     09 1F 02 F6 | 	mov	local01, arg01
2689c     0A 21 02 F6 | 	mov	local02, arg02
268a0     0B 23 02 F6 | 	mov	local03, arg03
268a4     10 25 02 F6 | 	mov	local04, local02
268a8     08 1E 06 F1 | 	add	local01, #8
268ac     0F 13 02 FB | 	rdlong	arg01, local01
268b0     08 1E 86 F1 | 	sub	local01, #8
268b4     02 12 CE F7 | 	test	arg01, #2 wz
268b8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
268bc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
268c0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
268c4     01 FA 65 A6 |  if_e	neg	result1, #1
268c8     80 01 90 AD |  if_e	jmp	#LR__3876
268cc     08 1E 06 F1 | 	add	local01, #8
268d0     0F FB 01 FB | 	rdlong	result1, local01
268d4     08 1E 86 F1 | 	sub	local01, #8
268d8     40 FA CD F7 | 	test	result1, #64 wz
268dc     68 00 90 AD |  if_e	jmp	#LR__3871
268e0     08 1E 06 F1 | 	add	local01, #8
268e4     0F 15 02 FB | 	rdlong	arg02, local01
268e8     08 1E 86 F1 | 	sub	local01, #8
268ec     80 14 CE F7 | 	test	arg02, #128 wz
268f0     54 00 90 AD |  if_e	jmp	#LR__3870
268f4     30 1E 06 F1 | 	add	local01, #48
268f8     0F 27 02 FB | 	rdlong	local05, local01
268fc     13 29 02 F6 | 	mov	local06, local05
26900     30 1E 86 F1 | 	sub	local01, #48
26904     13 28 46 F7 | 	zerox	local06, #19
26908     14 26 46 F0 | 	shr	local05, #20
2690c     02 26 66 F0 | 	shl	local05, #2
26910     ED 26 02 F1 | 	add	local05, __methods__
26914     13 27 02 FB | 	rdlong	local05, local05
26918     0F 13 02 F6 | 	mov	arg01, local01
2691c     00 14 06 F6 | 	mov	arg02, #0
26920     02 16 06 F6 | 	mov	arg03, #2
26924     F2 2A 02 F6 | 	mov	local07, objptr
26928     14 E5 01 F6 | 	mov	objptr, local06
2692c     2D 26 62 FD | 	call	local05
26930     15 E5 01 F6 | 	mov	objptr, local07
26934     08 1E 06 F1 | 	add	local01, #8
26938     0F 2B 02 FB | 	rdlong	local07, local01
2693c     80 2A 26 F5 | 	andn	local07, #128
26940     0F 2B 62 FC | 	wrlong	local07, local01
26944     08 1E 86 F1 | 	sub	local01, #8
26948                 | LR__3870
26948                 | LR__3871
26948     18 1E 06 F1 | 	add	local01, #24
2694c     0F 2B 0A FB | 	rdlong	local07, local01 wz
26950     18 1E 86 F1 | 	sub	local01, #24
26954     80 00 90 AD |  if_e	jmp	#LR__3873
26958     18 1E 06 F1 | 	add	local01, #24
2695c     0F 27 02 FB | 	rdlong	local05, local01
26960     13 29 02 F6 | 	mov	local06, local05
26964     18 1E 86 F1 | 	sub	local01, #24
26968     13 28 46 F7 | 	zerox	local06, #19
2696c     14 26 46 F0 | 	shr	local05, #20
26970     02 26 66 F0 | 	shl	local05, #2
26974     ED 26 02 F1 | 	add	local05, __methods__
26978     13 27 02 FB | 	rdlong	local05, local05
2697c     10 15 02 F6 | 	mov	arg02, local02
26980     11 17 02 F6 | 	mov	arg03, local03
26984     0F 13 02 F6 | 	mov	arg01, local01
26988     F2 2A 02 F6 | 	mov	local07, objptr
2698c     14 E5 01 F6 | 	mov	objptr, local06
26990     2D 26 62 FD | 	call	local05
26994     15 E5 01 F6 | 	mov	objptr, local07
26998     FD 2C 02 F6 | 	mov	local08, result1
2699c     00 2C 56 F2 | 	cmps	local08, #0 wc
269a0     2C 00 90 3D |  if_ae	jmp	#LR__3872
269a4     08 1E 06 F1 | 	add	local01, #8
269a8     0F 2B 02 FB | 	rdlong	local07, local01
269ac     20 2A 46 F5 | 	or	local07, #32
269b0     0F 2B 62 FC | 	wrlong	local07, local01
269b4     00 2C 4E F2 | 	cmps	local08, #0 wz
269b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
269bc     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
269c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
269c4     01 FA 65 56 |  if_ne	neg	result1, #1
269c8     00 FA 05 A6 |  if_e	mov	result1, #0
269cc     7C 00 90 FD | 	jmp	#LR__3876
269d0                 | LR__3872
269d0     16 FB 01 F6 | 	mov	result1, local08
269d4     74 00 90 FD | 	jmp	#LR__3876
269d8                 | LR__3873
269d8     1C 1E 06 F1 | 	add	local01, #28
269dc     0F 2F 0A FB | 	rdlong	local09, local01 wz
269e0     1C 1E 86 F1 | 	sub	local01, #28
269e4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
269e8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
269ec     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
269f0     01 FA 65 A6 |  if_e	neg	result1, #1
269f4     54 00 90 AD |  if_e	jmp	#LR__3876
269f8     00 2C 06 F6 | 	mov	local08, #0
269fc                 | LR__3874
269fc     01 22 16 F2 | 	cmp	local03, #1 wc
26a00     44 00 90 CD |  if_b	jmp	#LR__3875
26a04     17 29 02 F6 | 	mov	local06, local09
26a08     17 27 02 F6 | 	mov	local05, local09
26a0c     13 28 46 F7 | 	zerox	local06, #19
26a10     14 26 46 F0 | 	shr	local05, #20
26a14     02 26 66 F0 | 	shl	local05, #2
26a18     ED 26 02 F1 | 	add	local05, __methods__
26a1c     13 27 02 FB | 	rdlong	local05, local05
26a20     12 13 C2 FA | 	rdbyte	arg01, local04
26a24     0F 15 02 F6 | 	mov	arg02, local01
26a28     F2 2A 02 F6 | 	mov	local07, objptr
26a2c     14 E5 01 F6 | 	mov	objptr, local06
26a30     01 24 06 F1 | 	add	local04, #1
26a34     2D 26 62 FD | 	call	local05
26a38     15 E5 01 F6 | 	mov	objptr, local07
26a3c     FD 2C 02 F1 | 	add	local08, result1
26a40     01 22 86 F1 | 	sub	local03, #1
26a44     B4 FF 9F FD | 	jmp	#LR__3874
26a48                 | LR__3875
26a48     16 FB 01 F6 | 	mov	result1, local08
26a4c                 | LR__3876
26a4c     A7 F0 03 F6 | 	mov	ptra, fp
26a50     B2 00 A0 FD | 	call	#popregs_
26a54                 | __system___vfswrite_ret
26a54     2D 00 64 FD | 	ret
26a58                 | 
26a58                 | __system___vfsread
26a58     03 4A 05 F6 | 	mov	COUNT_, #3
26a5c     A8 00 A0 FD | 	call	#pushregs_
26a60     28 F0 07 F1 | 	add	ptra, #40
26a64     04 4E 05 F1 | 	add	fp, #4
26a68     A7 12 62 FC | 	wrlong	arg01, fp
26a6c     04 4E 05 F1 | 	add	fp, #4
26a70     A7 14 62 FC | 	wrlong	arg02, fp
26a74     04 4E 05 F1 | 	add	fp, #4
26a78     A7 16 62 FC | 	wrlong	arg03, fp
26a7c     04 4E 85 F1 | 	sub	fp, #4
26a80     A7 FA 01 FB | 	rdlong	result1, fp
26a84     14 4E 05 F1 | 	add	fp, #20
26a88     A7 FA 61 FC | 	wrlong	result1, fp
26a8c     04 4E 05 F1 | 	add	fp, #4
26a90     A7 00 68 FC | 	wrlong	#0, fp
26a94     1C 4E 85 F1 | 	sub	fp, #28
26a98     A7 12 02 FB | 	rdlong	arg01, fp
26a9c     04 4E 85 F1 | 	sub	fp, #4
26aa0     08 12 06 F1 | 	add	arg01, #8
26aa4     09 FB 01 FB | 	rdlong	result1, arg01
26aa8     01 FA CD F7 | 	test	result1, #1 wz
26aac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26ab0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26ab4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26ab8     01 FA 65 A6 |  if_e	neg	result1, #1
26abc     74 02 90 AD |  if_e	jmp	#LR__3886
26ac0     04 4E 05 F1 | 	add	fp, #4
26ac4     A7 12 02 FB | 	rdlong	arg01, fp
26ac8     04 4E 85 F1 | 	sub	fp, #4
26acc     14 12 06 F1 | 	add	arg01, #20
26ad0     09 FB 09 FB | 	rdlong	result1, arg01 wz
26ad4     B8 00 90 AD |  if_e	jmp	#LR__3881
26ad8     04 4E 05 F1 | 	add	fp, #4
26adc     A7 12 02 FB | 	rdlong	arg01, fp
26ae0     09 17 02 F6 | 	mov	arg03, arg01
26ae4     14 16 06 F1 | 	add	arg03, #20
26ae8     0B 1F 02 FB | 	rdlong	local01, arg03
26aec     0F 21 02 F6 | 	mov	local02, local01
26af0     13 1E 46 F7 | 	zerox	local01, #19
26af4     14 20 46 F0 | 	shr	local02, #20
26af8     02 20 66 F0 | 	shl	local02, #2
26afc     ED 20 02 F1 | 	add	local02, __methods__
26b00     10 21 02 FB | 	rdlong	local02, local02
26b04     04 4E 05 F1 | 	add	fp, #4
26b08     A7 14 02 FB | 	rdlong	arg02, fp
26b0c     04 4E 05 F1 | 	add	fp, #4
26b10     A7 16 02 FB | 	rdlong	arg03, fp
26b14     0C 4E 85 F1 | 	sub	fp, #12
26b18     F2 22 02 F6 | 	mov	local03, objptr
26b1c     0F E5 01 F6 | 	mov	objptr, local01
26b20     2D 20 62 FD | 	call	local02
26b24     11 E5 01 F6 | 	mov	objptr, local03
26b28     10 4E 05 F1 | 	add	fp, #16
26b2c     A7 FA 61 FC | 	wrlong	result1, fp
26b30     10 4E 85 F1 | 	sub	fp, #16
26b34     00 FA 55 F2 | 	cmps	result1, #0 wc
26b38     44 00 90 3D |  if_ae	jmp	#LR__3880
26b3c     04 4E 05 F1 | 	add	fp, #4
26b40     A7 22 02 FB | 	rdlong	local03, fp
26b44     11 1F 02 F6 | 	mov	local01, local03
26b48     08 22 06 F1 | 	add	local03, #8
26b4c     11 21 02 FB | 	rdlong	local02, local03
26b50     20 20 46 F5 | 	or	local02, #32
26b54     08 1E 06 F1 | 	add	local01, #8
26b58     0F 21 62 FC | 	wrlong	local02, local01
26b5c     0C 4E 05 F1 | 	add	fp, #12
26b60     A7 12 0A FB | 	rdlong	arg01, fp wz
26b64     10 4E 85 F1 | 	sub	fp, #16
26b68     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26b6c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26b70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26b74     01 FA 65 56 |  if_ne	neg	result1, #1
26b78     00 FA 05 A6 |  if_e	mov	result1, #0
26b7c     B4 01 90 FD | 	jmp	#LR__3886
26b80                 | LR__3880
26b80     10 4E 05 F1 | 	add	fp, #16
26b84     A7 FA 01 FB | 	rdlong	result1, fp
26b88     10 4E 85 F1 | 	sub	fp, #16
26b8c     A4 01 90 FD | 	jmp	#LR__3886
26b90                 | LR__3881
26b90     04 4E 05 F1 | 	add	fp, #4
26b94     A7 12 02 FB | 	rdlong	arg01, fp
26b98     20 12 06 F1 | 	add	arg01, #32
26b9c     09 13 0A FB | 	rdlong	arg01, arg01 wz
26ba0     14 4E 05 F1 | 	add	fp, #20
26ba4     A7 12 62 FC | 	wrlong	arg01, fp
26ba8     18 4E 85 F1 | 	sub	fp, #24
26bac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26bb0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26bb4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26bb8     01 FA 65 A6 |  if_e	neg	result1, #1
26bbc     74 01 90 AD |  if_e	jmp	#LR__3886
26bc0     04 4E 05 F1 | 	add	fp, #4
26bc4     A7 22 02 FB | 	rdlong	local03, fp
26bc8     04 4E 85 F1 | 	sub	fp, #4
26bcc     28 22 06 F1 | 	add	local03, #40
26bd0     11 21 0A FB | 	rdlong	local02, local03 wz
26bd4     7C 00 90 AD |  if_e	jmp	#LR__3883
26bd8     04 4E 05 F1 | 	add	fp, #4
26bdc     A7 12 02 FB | 	rdlong	arg01, fp
26be0     09 23 02 F6 | 	mov	local03, arg01
26be4     28 22 06 F1 | 	add	local03, #40
26be8     11 1F 02 FB | 	rdlong	local01, local03
26bec     0F 21 02 F6 | 	mov	local02, local01
26bf0     13 1E 46 F7 | 	zerox	local01, #19
26bf4     14 20 46 F0 | 	shr	local02, #20
26bf8     02 20 66 F0 | 	shl	local02, #2
26bfc     ED 20 02 F1 | 	add	local02, __methods__
26c00     10 21 02 FB | 	rdlong	local02, local02
26c04     20 4E 05 F1 | 	add	fp, #32
26c08     A7 16 02 F6 | 	mov	arg03, fp
26c0c     24 4E 85 F1 | 	sub	fp, #36
26c10     00 15 06 F6 | 	mov	arg02, #256
26c14     F2 22 02 F6 | 	mov	local03, objptr
26c18     0F E5 01 F6 | 	mov	objptr, local01
26c1c     2D 20 62 FD | 	call	local02
26c20     11 E5 01 F6 | 	mov	objptr, local03
26c24     10 4E 05 F1 | 	add	fp, #16
26c28     A7 FA 61 FC | 	wrlong	result1, fp
26c2c     00 FA 4D F2 | 	cmps	result1, #0 wz
26c30     10 4E 85 F1 | 	sub	fp, #16
26c34     1C 00 90 5D |  if_ne	jmp	#LR__3882
26c38     24 4E 05 F1 | 	add	fp, #36
26c3c     A7 20 02 FB | 	rdlong	local02, fp
26c40     24 4E 85 F1 | 	sub	fp, #36
26c44     02 20 CE F7 | 	test	local02, #2 wz
26c48     20 4E 05 51 |  if_ne	add	fp, #32
26c4c     A7 02 68 5C |  if_ne	wrlong	#1, fp
26c50     20 4E 85 51 |  if_ne	sub	fp, #32
26c54                 | LR__3882
26c54                 | LR__3883
26c54     10 4E 05 F1 | 	add	fp, #16
26c58     A7 00 68 FC | 	wrlong	#0, fp
26c5c     10 4E 85 F1 | 	sub	fp, #16
26c60                 | LR__3884
26c60     0C 4E 05 F1 | 	add	fp, #12
26c64     A7 22 02 FB | 	rdlong	local03, fp
26c68     0C 4E 85 F1 | 	sub	fp, #12
26c6c     01 22 16 F2 | 	cmp	local03, #1 wc
26c70     B4 00 90 CD |  if_b	jmp	#LR__3885
26c74     18 4E 05 F1 | 	add	fp, #24
26c78     A7 20 02 FB | 	rdlong	local02, fp
26c7c     10 23 02 F6 | 	mov	local03, local02
26c80     13 22 46 F7 | 	zerox	local03, #19
26c84     14 20 46 F0 | 	shr	local02, #20
26c88     02 20 66 F0 | 	shl	local02, #2
26c8c     ED 20 02 F1 | 	add	local02, __methods__
26c90     10 21 02 FB | 	rdlong	local02, local02
26c94     14 4E 85 F1 | 	sub	fp, #20
26c98     A7 12 02 FB | 	rdlong	arg01, fp
26c9c     04 4E 85 F1 | 	sub	fp, #4
26ca0     F2 1E 02 F6 | 	mov	local01, objptr
26ca4     11 E5 01 F6 | 	mov	objptr, local03
26ca8     2D 20 62 FD | 	call	local02
26cac     0F E5 01 F6 | 	mov	objptr, local01
26cb0     14 4E 05 F1 | 	add	fp, #20
26cb4     A7 FA 61 FC | 	wrlong	result1, fp
26cb8     14 4E 85 F1 | 	sub	fp, #20
26cbc     00 FA 55 F2 | 	cmps	result1, #0 wc
26cc0     64 00 90 CD |  if_b	jmp	#LR__3885
26cc4     1C 4E 05 F1 | 	add	fp, #28
26cc8     A7 22 02 FB | 	rdlong	local03, fp
26ccc     11 21 02 F6 | 	mov	local02, local03
26cd0     01 20 06 F1 | 	add	local02, #1
26cd4     A7 20 62 FC | 	wrlong	local02, fp
26cd8     08 4E 85 F1 | 	sub	fp, #8
26cdc     A7 20 02 FB | 	rdlong	local02, fp
26ce0     11 21 42 FC | 	wrbyte	local02, local03
26ce4     04 4E 85 F1 | 	sub	fp, #4
26ce8     A7 22 02 FB | 	rdlong	local03, fp
26cec     01 22 06 F1 | 	add	local03, #1
26cf0     A7 22 62 FC | 	wrlong	local03, fp
26cf4     04 4E 85 F1 | 	sub	fp, #4
26cf8     A7 22 02 FB | 	rdlong	local03, fp
26cfc     01 22 86 F1 | 	sub	local03, #1
26d00     A7 22 62 FC | 	wrlong	local03, fp
26d04     14 4E 05 F1 | 	add	fp, #20
26d08     A7 22 0A FB | 	rdlong	local03, fp wz
26d0c     20 4E 85 F1 | 	sub	fp, #32
26d10     4C FF 9F AD |  if_e	jmp	#LR__3884
26d14     14 4E 05 F1 | 	add	fp, #20
26d18     A7 20 02 FB | 	rdlong	local02, fp
26d1c     14 4E 85 F1 | 	sub	fp, #20
26d20     0A 20 0E F2 | 	cmp	local02, #10 wz
26d24     38 FF 9F 5D |  if_ne	jmp	#LR__3884
26d28                 | LR__3885
26d28     10 4E 05 F1 | 	add	fp, #16
26d2c     A7 FA 01 FB | 	rdlong	result1, fp
26d30     10 4E 85 F1 | 	sub	fp, #16
26d34                 | LR__3886
26d34     A7 F0 03 F6 | 	mov	ptra, fp
26d38     B2 00 A0 FD | 	call	#popregs_
26d3c                 | __system___vfsread_ret
26d3c     2D 00 64 FD | 	ret
26d40                 | 
26d40                 | __system____default_filbuf
26d40     04 4A 05 F6 | 	mov	COUNT_, #4
26d44     A8 00 A0 FD | 	call	#pushregs_
26d48     09 1F 02 F6 | 	mov	local01, arg01
26d4c     0F 21 02 FB | 	rdlong	local02, local01
26d50     0C 20 06 F1 | 	add	local02, #12
26d54     10 FB 09 FB | 	rdlong	result1, local02 wz
26d58     0C 20 86 F1 | 	sub	local02, #12
26d5c     20 00 90 5D |  if_ne	jmp	#LR__3890
26d60     14 20 06 F1 | 	add	local02, #20
26d64     10 FB 01 F6 | 	mov	result1, local02
26d68     04 20 86 F1 | 	sub	local02, #4
26d6c     10 FB 61 FC | 	wrlong	result1, local02
26d70     04 20 86 F1 | 	sub	local02, #4
26d74     02 00 80 FF 
26d78     10 01 68 FC | 	wrlong	##1024, local02
26d7c     0C 20 86 F1 | 	sub	local02, #12
26d80                 | LR__3890
26d80     14 1E 06 F1 | 	add	local01, #20
26d84     0F 23 02 FB | 	rdlong	local03, local01
26d88     11 25 02 F6 | 	mov	local04, local03
26d8c     14 1E 86 F1 | 	sub	local01, #20
26d90     13 24 46 F7 | 	zerox	local04, #19
26d94     14 22 46 F0 | 	shr	local03, #20
26d98     02 22 66 F0 | 	shl	local03, #2
26d9c     ED 22 02 F1 | 	add	local03, __methods__
26da0     11 23 02 FB | 	rdlong	local03, local03
26da4     10 20 06 F1 | 	add	local02, #16
26da8     10 15 02 FB | 	rdlong	arg02, local02
26dac     04 20 86 F1 | 	sub	local02, #4
26db0     10 17 02 FB | 	rdlong	arg03, local02
26db4     0C 20 86 F1 | 	sub	local02, #12
26db8     0F 13 02 F6 | 	mov	arg01, local01
26dbc     F2 1E 02 F6 | 	mov	local01, objptr
26dc0     12 E5 01 F6 | 	mov	objptr, local04
26dc4     2D 22 62 FD | 	call	local03
26dc8     0F E5 01 F6 | 	mov	objptr, local01
26dcc     FD 24 02 F6 | 	mov	local04, result1
26dd0     00 24 56 F2 | 	cmps	local04, #0 wc
26dd4     01 FA 65 C6 |  if_b	neg	result1, #1
26dd8     28 00 90 CD |  if_b	jmp	#LR__3891
26ddc     10 25 62 FC | 	wrlong	local04, local02
26de0     10 20 06 F1 | 	add	local02, #16
26de4     10 23 02 FB | 	rdlong	local03, local02
26de8     0C 20 86 F1 | 	sub	local02, #12
26dec     10 23 62 FC | 	wrlong	local03, local02
26df0     04 20 06 F1 | 	add	local02, #4
26df4     10 23 02 FB | 	rdlong	local03, local02
26df8     01 22 46 F5 | 	or	local03, #1
26dfc     10 23 62 FC | 	wrlong	local03, local02
26e00     12 FB 01 F6 | 	mov	result1, local04
26e04                 | LR__3891
26e04     A7 F0 03 F6 | 	mov	ptra, fp
26e08     B2 00 A0 FD | 	call	#popregs_
26e0c                 | __system____default_filbuf_ret
26e0c     2D 00 64 FD | 	ret
26e10                 | 
26e10                 | __system__getlower_1083
26e10     41 12 56 F2 | 	cmps	arg01, #65 wc
26e14     10 00 90 CD |  if_b	jmp	#LR__3900
26e18     5B 12 56 F2 | 	cmps	arg01, #91 wc
26e1c     09 FB 01 C6 |  if_b	mov	result1, arg01
26e20     20 FA 05 C1 |  if_b	add	result1, #32
26e24     04 00 90 CD |  if_b	jmp	#__system__getlower_1083_ret
26e28                 | LR__3900
26e28     09 FB 01 F6 | 	mov	result1, arg01
26e2c                 | __system__getlower_1083_ret
26e2c     2D 00 64 FD | 	ret
26e30                 | 
26e30                 | __system___pat_match
26e30     08 4A 05 F6 | 	mov	COUNT_, #8
26e34     A8 00 A0 FD | 	call	#pushregs_
26e38     09 1F 02 F6 | 	mov	local01, arg01
26e3c                 | LR__3910
26e3c     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
26e40     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
26e44     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
26e48     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
26e4c     2C 00 90 AD |  if_e	jmp	#LR__3911
26e50     0A 13 C2 FA | 	rdbyte	arg01, arg02
26e54     B8 FF BF FD | 	call	#__system__getlower_1083
26e58     FD 22 02 F6 | 	mov	local03, result1
26e5c     0F 13 C2 FA | 	rdbyte	arg01, local01
26e60     AC FF BF FD | 	call	#__system__getlower_1083
26e64     11 FB 09 F2 | 	cmp	result1, local03 wz
26e68     00 FA 05 56 |  if_ne	mov	result1, #0
26e6c     FC 00 90 5D |  if_ne	jmp	#LR__3919
26e70     01 1E 06 F1 | 	add	local01, #1
26e74     01 14 06 F1 | 	add	arg02, #1
26e78     C0 FF 9F FD | 	jmp	#LR__3910
26e7c                 | LR__3911
26e7c     0A 23 C2 FA | 	rdbyte	local03, arg02
26e80     2A 22 0E F2 | 	cmp	local03, #42 wz
26e84     D4 00 90 5D |  if_ne	jmp	#LR__3918
26e88     01 14 06 F1 | 	add	arg02, #1
26e8c     0A 21 C2 FA | 	rdbyte	local02, arg02
26e90     01 14 86 F1 | 	sub	arg02, #1
26e94     2E 20 0E F2 | 	cmp	local02, #46 wz
26e98     28 00 90 5D |  if_ne	jmp	#LR__3912
26e9c     02 14 06 F1 | 	add	arg02, #2
26ea0     0A 21 C2 FA | 	rdbyte	local02, arg02
26ea4     02 14 86 F1 | 	sub	arg02, #2
26ea8     2A 20 0E F2 | 	cmp	local02, #42 wz
26eac     03 14 06 A1 |  if_e	add	arg02, #3
26eb0     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
26eb4     03 14 86 A1 |  if_e	sub	arg02, #3
26eb8     12 27 0A A6 |  if_e	mov	local05, local04 wz
26ebc     01 FA 05 A6 |  if_e	mov	result1, #1
26ec0     A8 00 90 AD |  if_e	jmp	#LR__3919
26ec4                 | LR__3912
26ec4     01 14 06 F1 | 	add	arg02, #1
26ec8     00 28 06 F6 | 	mov	local06, #0
26ecc     97 1E 48 FB | 	callpa	#(@LR__3915-@LR__3913)>>2,fcache_load_ptr_
26ed0                 | LR__3913
26ed0     14 2B 02 F6 | 	mov	local07, local06
26ed4     0A 2B 02 F1 | 	add	local07, arg02
26ed8     15 2B CA FA | 	rdbyte	local07, local07 wz
26edc     14 27 02 56 |  if_ne	mov	local05, local06
26ee0     01 26 06 51 |  if_ne	add	local05, #1
26ee4     13 29 02 56 |  if_ne	mov	local06, local05
26ee8     E4 FF 9F 5D |  if_ne	jmp	#LR__3913
26eec     00 2C 06 F6 | 	mov	local08, #0
26ef0                 | LR__3914
26ef0     16 2B 02 F6 | 	mov	local07, local08
26ef4     0F 2B 02 F1 | 	add	local07, local01
26ef8     15 2B CA FA | 	rdbyte	local07, local07 wz
26efc     16 27 02 56 |  if_ne	mov	local05, local08
26f00     01 26 06 51 |  if_ne	add	local05, #1
26f04     13 2D 02 56 |  if_ne	mov	local08, local05
26f08     E4 FF 9F 5D |  if_ne	jmp	#LR__3914
26f0c                 | LR__3915
26f0c     14 2D 52 F2 | 	cmps	local08, local06 wc
26f10     00 FA 05 C6 |  if_b	mov	result1, #0
26f14     54 00 90 CD |  if_b	jmp	#LR__3919
26f18     16 21 02 F6 | 	mov	local02, local08
26f1c     14 21 82 F1 | 	sub	local02, local06
26f20     10 1F 02 F1 | 	add	local01, local02
26f24                 | LR__3916
26f24     01 28 56 F2 | 	cmps	local06, #1 wc
26f28     30 00 90 CD |  if_b	jmp	#LR__3917
26f2c     0F 13 C2 FA | 	rdbyte	arg01, local01
26f30     DC FE BF FD | 	call	#__system__getlower_1083
26f34     FD 2C 02 F6 | 	mov	local08, result1
26f38     0A 13 C2 FA | 	rdbyte	arg01, arg02
26f3c     D0 FE BF FD | 	call	#__system__getlower_1083
26f40     FD 2C 0A F2 | 	cmp	local08, result1 wz
26f44     00 FA 05 56 |  if_ne	mov	result1, #0
26f48     20 00 90 5D |  if_ne	jmp	#LR__3919
26f4c     01 1E 06 F1 | 	add	local01, #1
26f50     01 14 06 F1 | 	add	arg02, #1
26f54     01 28 86 F1 | 	sub	local06, #1
26f58     C8 FF 9F FD | 	jmp	#LR__3916
26f5c                 | LR__3917
26f5c                 | LR__3918
26f5c     0A 2D CA FA | 	rdbyte	local08, arg02 wz
26f60     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
26f64     01 FA 05 A6 |  if_e	mov	result1, #1
26f68     00 FA 05 56 |  if_ne	mov	result1, #0
26f6c                 | LR__3919
26f6c     A7 F0 03 F6 | 	mov	ptra, fp
26f70     B2 00 A0 FD | 	call	#popregs_
26f74                 | __system___pat_match_ret
26f74     2D 00 64 FD | 	ret
26f78                 | 
26f78                 | _fatfs_cc_ff_uni2oem
26f78     00 00 06 F6 | 	mov	_var01, #0
26f7c     80 12 16 F2 | 	cmp	arg01, #128 wc
26f80     09 01 02 C6 |  if_b	mov	_var01, arg01
26f84     58 00 90 CD |  if_b	jmp	#LR__3924
26f88     80 00 00 FF 
26f8c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
26f90     4C 00 90 3D |  if_ae	jmp	#LR__3923
26f94     0A FB 31 F9 | 	getword	result1, arg02, #0
26f98     01 00 00 FF 
26f9c     52 FB 0D F2 | 	cmp	result1, ##850 wz
26fa0     3C 00 90 5D |  if_ne	jmp	#LR__3923
26fa4                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
26fa4     00 00 06 F6 | 	mov	_var01, #0
26fa8     97 14 48 FB | 	callpa	#(@LR__3921-@LR__3920)>>2,fcache_load_ptr_
26fac                 | LR__3920
26fac     00 FB 31 F9 | 	getword	result1, _var01, #0
26fb0     80 FA 15 F2 | 	cmp	result1, #128 wc
26fb4     1C 00 90 3D |  if_ae	jmp	#LR__3922
26fb8     00 FB 31 F9 | 	getword	result1, _var01, #0
26fbc     01 FA 65 F0 | 	shl	result1, #1
26fc0     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
26fc4     FD FA E1 FA | 	rdword	result1, result1
26fc8     FD 12 0A F2 | 	cmp	arg01, result1 wz
26fcc     01 00 06 51 |  if_ne	add	_var01, #1
26fd0     D8 FF 9F 5D |  if_ne	jmp	#LR__3920
26fd4                 | LR__3921
26fd4                 | LR__3922
26fd4     00 01 32 F9 | 	getword	_var01, _var01, #0
26fd8     80 00 06 F1 | 	add	_var01, #128
26fdc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
26fe0                 | LR__3923
26fe0                 | LR__3924
26fe0                 | ' 			c = (c + 0x80) & 0xFF;
26fe0                 | ' 		}
26fe0                 | ' 	}
26fe0                 | ' 
26fe0                 | ' 	return c;
26fe0     00 FB 01 F6 | 	mov	result1, _var01
26fe4                 | _fatfs_cc_ff_uni2oem_ret
26fe4     2D 00 64 FD | 	ret
26fe8                 | 
26fe8                 | _fatfs_cc_ff_oem2uni
26fe8     00 00 06 F6 | 	mov	_var01, #0
26fec     09 FB 31 F9 | 	getword	result1, arg01, #0
26ff0     80 FA 15 F2 | 	cmp	result1, #128 wc
26ff4     09 01 02 C6 |  if_b	mov	_var01, arg01
26ff8     2C 00 90 CD |  if_b	jmp	#LR__3931
26ffc     0A 15 32 F9 | 	getword	arg02, arg02, #0
27000     01 00 00 FF 
27004     52 15 0E F2 | 	cmp	arg02, ##850 wz
27008     1C 00 90 5D |  if_ne	jmp	#LR__3930
2700c     09 FB 31 F9 | 	getword	result1, arg01, #0
27010     00 FB 15 F2 | 	cmp	result1, #256 wc
27014     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
27018     80 12 86 C1 |  if_b	sub	arg01, #128
2701c     01 12 66 C0 |  if_b	shl	arg01, #1
27020     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
27024     09 01 E2 CA |  if_b	rdword	_var01, arg01
27028                 | LR__3930
27028                 | LR__3931
27028                 | ' 		}
27028                 | ' 	}
27028                 | ' 
27028                 | ' 	return c;
27028     00 FB 01 F6 | 	mov	result1, _var01
2702c                 | _fatfs_cc_ff_oem2uni_ret
2702c     2D 00 64 FD | 	ret
27030                 | 
27030                 | _fatfs_cc_ff_wtoupper
27030     09 01 02 F6 | 	mov	_var01, arg01
27034     80 00 00 FF 
27038     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2703c     60 01 90 3D |  if_ae	jmp	#LR__3953
27040     00 03 02 F6 | 	mov	_var02, _var01
27044     01 01 32 F9 | 	getword	_var01, _var02, #0
27048     08 00 00 FF 
2704c     00 00 16 F2 | 	cmp	_var01, ##4096 wc
27050     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
27054     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
27058     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2705c     01 00 00 3F 
27060     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
27064     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
27068     01 00 00 3F 
2706c     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
27070     02 07 02 F6 | 	mov	_var04, _var03
27074                 | ' 		uc = (WORD)uni;
27074                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
27074                 | ' 		for (;;) {
27074                 | LR__3940
27074     03 09 E2 FA | 	rdword	_var05, _var04
27078     04 05 02 F6 | 	mov	_var03, _var05
2707c     0F 04 4E F7 | 	zerox	_var03, #15 wz
27080     02 06 06 F1 | 	add	_var04, #2
27084     14 01 90 AD |  if_e	jmp	#LR__3952
27088     01 05 32 F9 | 	getword	_var03, _var02, #0
2708c     04 01 32 F9 | 	getword	_var01, _var05, #0
27090     00 05 12 F2 | 	cmp	_var03, _var01 wc
27094     04 01 90 CD |  if_b	jmp	#LR__3952
27098     03 0B E2 FA | 	rdword	_var06, _var04
2709c     05 0D 32 F9 | 	getword	_var07, _var06, #0
270a0     08 0C 46 F0 | 	shr	_var07, #8
270a4     05 0B 32 F9 | 	getword	_var06, _var06, #0
270a8     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
270ac     01 05 32 F9 | 	getword	_var03, _var02, #0
270b0     04 0F 32 F9 | 	getword	_var08, _var05, #0
270b4     05 01 32 F9 | 	getword	_var01, _var06, #0
270b8     00 0F 02 F1 | 	add	_var08, _var01
270bc     07 05 52 F2 | 	cmps	_var03, _var08 wc
270c0     02 06 06 F1 | 	add	_var04, #2
270c4     C4 00 90 3D |  if_ae	jmp	#LR__3951
270c8                 | ' 				switch (cmd) {
270c8     06 11 32 F9 | 	getword	_var09, _var07, #0
270cc     09 10 26 F3 | 	fle	_var09, #9
270d0     30 10 62 FD | 	jmprel	_var09
270d4                 | LR__3941
270d4     24 00 90 FD | 	jmp	#LR__3942
270d8     3C 00 90 FD | 	jmp	#LR__3943
270dc     54 00 90 FD | 	jmp	#LR__3944
270e0     5C 00 90 FD | 	jmp	#LR__3945
270e4     64 00 90 FD | 	jmp	#LR__3946
270e8     6C 00 90 FD | 	jmp	#LR__3947
270ec     74 00 90 FD | 	jmp	#LR__3948
270f0     7C 00 90 FD | 	jmp	#LR__3949
270f4     84 00 90 FD | 	jmp	#LR__3950
270f8     A0 00 90 FD | 	jmp	#LR__3952
270fc                 | LR__3942
270fc     01 03 32 F9 | 	getword	_var02, _var02, #0
27100     04 09 32 F9 | 	getword	_var05, _var05, #0
27104     04 03 82 F1 | 	sub	_var02, _var05
27108     01 02 66 F0 | 	shl	_var02, #1
2710c     03 03 02 F1 | 	add	_var02, _var04
27110     01 03 E2 FA | 	rdword	_var02, _var02
27114     84 00 90 FD | 	jmp	#LR__3952
27118                 | LR__3943
27118     01 05 32 F9 | 	getword	_var03, _var02, #0
2711c     01 03 32 F9 | 	getword	_var02, _var02, #0
27120     04 09 32 F9 | 	getword	_var05, _var05, #0
27124     04 03 82 F1 | 	sub	_var02, _var05
27128     01 02 06 F5 | 	and	_var02, #1
2712c     02 03 C2 F2 | 	subr	_var02, _var03
27130     68 00 90 FD | 	jmp	#LR__3952
27134                 | LR__3944
27134     01 03 32 F9 | 	getword	_var02, _var02, #0
27138     10 02 86 F1 | 	sub	_var02, #16
2713c     5C 00 90 FD | 	jmp	#LR__3952
27140                 | LR__3945
27140     01 03 32 F9 | 	getword	_var02, _var02, #0
27144     20 02 86 F1 | 	sub	_var02, #32
27148     50 00 90 FD | 	jmp	#LR__3952
2714c                 | LR__3946
2714c     01 03 32 F9 | 	getword	_var02, _var02, #0
27150     30 02 86 F1 | 	sub	_var02, #48
27154     44 00 90 FD | 	jmp	#LR__3952
27158                 | LR__3947
27158     01 03 32 F9 | 	getword	_var02, _var02, #0
2715c     1A 02 86 F1 | 	sub	_var02, #26
27160     38 00 90 FD | 	jmp	#LR__3952
27164                 | LR__3948
27164     01 03 32 F9 | 	getword	_var02, _var02, #0
27168     08 02 06 F1 | 	add	_var02, #8
2716c     2C 00 90 FD | 	jmp	#LR__3952
27170                 | LR__3949
27170     01 03 32 F9 | 	getword	_var02, _var02, #0
27174     50 02 86 F1 | 	sub	_var02, #80
27178     20 00 90 FD | 	jmp	#LR__3952
2717c                 | LR__3950
2717c     01 03 32 F9 | 	getword	_var02, _var02, #0
27180     0E 00 00 FF 
27184     60 02 86 F1 | 	sub	_var02, ##7264
27188                 | ' 				}
27188                 | ' 				break;
27188     10 00 90 FD | 	jmp	#LR__3952
2718c                 | LR__3951
2718c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
27190     02 0A 06 AA |  if_e	mul	_var06, #2
27194     05 07 02 A1 |  if_e	add	_var04, _var06
27198     D8 FE 9F FD | 	jmp	#LR__3940
2719c                 | LR__3952
2719c     01 01 32 F9 | 	getword	_var01, _var02, #0
271a0                 | LR__3953
271a0                 | ' 		}
271a0                 | ' 		uni = uc;
271a0                 | ' 	}
271a0                 | ' 
271a0                 | ' 	return uni;
271a0     00 FB 01 F6 | 	mov	result1, _var01
271a4                 | _fatfs_cc_ff_wtoupper_ret
271a4     2D 00 64 FD | 	ret
271a8                 | 
271a8                 | _fatfs_cc_strncpy
271a8     09 01 02 F6 | 	mov	_var01, arg01
271ac     97 12 48 FB | 	callpa	#(@LR__3961-@LR__3960)>>2,fcache_load_ptr_
271b0                 | ' 
271b0                 | ' 	dscan = dst;
271b0                 | ' 	sscan = src;
271b0                 | ' 	count = n;
271b0                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
271b0                 | LR__3960
271b0     01 16 86 F1 | 	sub	arg03, #1
271b4     00 16 56 F2 | 	cmps	arg03, #0 wc
271b8     18 00 90 CD |  if_b	jmp	#LR__3962
271bc     0A FB C1 FA | 	rdbyte	result1, arg02
271c0     00 FB 41 FC | 	wrbyte	result1, _var01
271c4     01 14 06 F1 | 	add	arg02, #1
271c8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
271cc                 | ' 		continue;
271cc     01 00 06 F1 | 	add	_var01, #1
271d0     DC FF 9F 5D |  if_ne	jmp	#LR__3960
271d4                 | LR__3961
271d4                 | LR__3962
271d4     97 0C 48 FB | 	callpa	#(@LR__3964-@LR__3963)>>2,fcache_load_ptr_
271d8                 | ' 	while (--count >= 0)
271d8                 | LR__3963
271d8     01 16 86 F1 | 	sub	arg03, #1
271dc     00 16 56 F2 | 	cmps	arg03, #0 wc
271e0     00 03 02 36 |  if_ae	mov	_var02, _var01
271e4     01 00 06 31 |  if_ae	add	_var01, #1
271e8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
271ec     E8 FF 9F 3D |  if_ae	jmp	#LR__3963
271f0                 | LR__3964
271f0                 | ' 		*dscan++ = '\0';
271f0                 | ' 	return(dst);
271f0     09 FB 01 F6 | 	mov	result1, arg01
271f4                 | _fatfs_cc_strncpy_ret
271f4     2D 00 64 FD | 	ret
271f8                 | 
271f8                 | _fatfs_cc_memcmp
271f8                 | ' 	for (n = size; n > 0; n--)
271f8     00 16 0E F2 | 	cmp	arg03, #0 wz
271fc     28 00 90 AD |  if_e	jmp	#LR__3971
27200                 | LR__3970
27200     09 01 C2 FA | 	rdbyte	_var01, arg01
27204     0A 03 C2 FA | 	rdbyte	_var02, arg02
27208     01 01 0A F2 | 	cmp	_var01, _var02 wz
2720c     01 12 06 A1 |  if_e	add	arg01, #1
27210     01 14 06 A1 |  if_e	add	arg02, #1
27214                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
27214     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
27218     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2721c     01 FB 81 51 |  if_ne	sub	result1, _var02
27220     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
27224     F6 17 6E FB | 	djnz	arg03, #LR__3970
27228                 | LR__3971
27228                 | ' 
27228                 | ' 	return(0);
27228     00 FA 05 F6 | 	mov	result1, #0
2722c                 | _fatfs_cc_memcmp_ret
2722c     2D 00 64 FD | 	ret
27230                 | 
27230                 | _fatfs_cc_strncmp
27230     09 01 0A F6 | 	mov	_var01, arg01 wz
27234     14 00 90 5D |  if_ne	jmp	#LR__3980
27238                 | ' 		return scan2 ? -1 : 0;
27238     00 14 0E F2 | 	cmp	arg02, #0 wz
2723c     01 02 66 56 |  if_ne	neg	_var02, #1
27240     00 02 06 A6 |  if_e	mov	_var02, #0
27244     01 FB 01 F6 | 	mov	result1, _var02
27248     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2724c                 | LR__3980
2724c     00 14 0E F2 | 	cmp	arg02, #0 wz
27250     01 FA 05 A6 |  if_e	mov	result1, #1
27254     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27258     0B 05 02 F6 | 	mov	_var03, arg03
2725c     97 16 48 FB | 	callpa	#(@LR__3982-@LR__3981)>>2,fcache_load_ptr_
27260                 | ' 	count = n;
27260                 | ' 	do {
27260                 | LR__3981
27260     00 07 C2 FA | 	rdbyte	_var04, _var01
27264     0A 09 02 F6 | 	mov	_var05, arg02
27268     04 0B C2 FA | 	rdbyte	_var06, _var05
2726c     01 04 86 F1 | 	sub	_var03, #1
27270     00 04 56 F2 | 	cmps	_var03, #0 wc
27274     01 00 06 F1 | 	add	_var01, #1
27278     01 14 06 F1 | 	add	arg02, #1
2727c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
27280     08 00 90 2D |  if_nc_and_z	jmp	#LR__3983
27284     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
27288     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3981
2728c                 | LR__3982
2728c                 | LR__3983
2728c     00 04 56 F2 | 	cmps	_var03, #0 wc
27290                 | ' 		return(0);
27290     00 FA 05 C6 |  if_b	mov	result1, #0
27294     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
27298     05 07 0A F2 | 	cmp	_var04, _var06 wz
2729c                 | ' 		return(0);
2729c     00 FA 05 A6 |  if_e	mov	result1, #0
272a0     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
272a4     00 06 0E F2 | 	cmp	_var04, #0 wz
272a8                 | ' 		return(-1);
272a8     01 FA 65 A6 |  if_e	neg	result1, #1
272ac     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
272b0     00 0A 0E F2 | 	cmp	_var06, #0 wz
272b4                 | ' 		return(1);
272b4     01 FA 05 A6 |  if_e	mov	result1, #1
272b8                 | ' 		return(c1 - c2);
272b8     03 FB 01 56 |  if_ne	mov	result1, _var04
272bc     05 FB 81 51 |  if_ne	sub	result1, _var06
272c0                 | _fatfs_cc_strncmp_ret
272c0     2D 00 64 FD | 	ret
272c4                 | 
272c4                 | _fatfs_cc_strchr
272c4                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
272c4                 | ' 	while ((c = *s++) != (char) charwanted)
272c4                 | LR__3990
272c4     09 01 02 F6 | 	mov	_var01, arg01
272c8     00 03 C2 FA | 	rdbyte	_var02, _var01
272cc     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
272d0     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
272d4     03 05 0A F2 | 	cmp	_var03, _var04 wz
272d8     01 12 06 F1 | 	add	arg01, #1
272dc     14 00 90 AD |  if_e	jmp	#LR__3991
272e0     01 05 02 F6 | 	mov	_var03, _var02
272e4     07 04 4E F7 | 	zerox	_var03, #7 wz
272e8     00 FA 05 A6 |  if_e	mov	result1, #0
272ec     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
272f0     D0 FF 9F FD | 	jmp	#LR__3990
272f4                 | LR__3991
272f4                 | ' 	return((char *)--s);
272f4     01 12 86 F1 | 	sub	arg01, #1
272f8     09 FB 01 F6 | 	mov	result1, arg01
272fc                 | _fatfs_cc_strchr_ret
272fc     2D 00 64 FD | 	ret
27300                 | 
27300                 | _fatfs_cc_disk_initialize
27300     04 4A 05 F6 | 	mov	COUNT_, #4
27304     A8 00 A0 FD | 	call	#pushregs_
27308     40 F0 07 F1 | 	add	ptra, #64
2730c     04 4E 05 F1 | 	add	fp, #4
27310     A7 12 42 FC | 	wrbyte	arg01, fp
27314     01 00 00 FF 
27318     14 E4 05 F1 | 	add	objptr, ##532
2731c     F2 18 02 FB | 	rdlong	arg04, objptr
27320     2C 4E 05 F1 | 	add	fp, #44
27324     A7 18 62 FC | 	wrlong	arg04, fp
27328     04 E4 85 F1 | 	sub	objptr, #4
2732c     F2 18 02 FB | 	rdlong	arg04, objptr
27330     04 4E 05 F1 | 	add	fp, #4
27334     A7 18 62 FC | 	wrlong	arg04, fp
27338     08 E4 05 F1 | 	add	objptr, #8
2733c     F2 18 02 FB | 	rdlong	arg04, objptr
27340     04 4E 05 F1 | 	add	fp, #4
27344     A7 18 62 FC | 	wrlong	arg04, fp
27348     04 E4 05 F1 | 	add	objptr, #4
2734c     F2 18 02 FB | 	rdlong	arg04, objptr
27350     04 4E 05 F1 | 	add	fp, #4
27354     A7 18 62 FC | 	wrlong	arg04, fp
27358     04 E4 05 F1 | 	add	objptr, #4
2735c     F2 02 48 FC | 	wrbyte	#1, objptr
27360     01 00 00 FF 
27364     20 E4 85 F1 | 	sub	objptr, ##544
27368     38 4E 85 F1 | 	sub	fp, #56
2736c     A7 18 CA FA | 	rdbyte	arg04, fp wz
27370     04 4E 85 F1 | 	sub	fp, #4
27374                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27374                 | '             return RES_NOTRDY;
27374     03 FA 05 56 |  if_ne	mov	result1, #3
27378     D8 05 90 5D |  if_ne	jmp	#LR__4018
2737c     13 00 00 FF 
27380     10 13 06 F6 | 	mov	arg01, ##10000
27384     08 98 BF FD | 	call	#__system___waitus
27388     30 4E 05 F1 | 	add	fp, #48
2738c     A7 12 02 FB | 	rdlong	arg01, fp
27390     09 01 08 FC | 	wrpin	#0, arg01
27394     04 4E 05 F1 | 	add	fp, #4
27398     A7 12 02 FB | 	rdlong	arg01, fp
2739c     09 01 08 FC | 	wrpin	#0, arg01
273a0     04 4E 05 F1 | 	add	fp, #4
273a4     A7 12 02 FB | 	rdlong	arg01, fp
273a8     09 01 08 FC | 	wrpin	#0, arg01
273ac     04 4E 05 F1 | 	add	fp, #4
273b0     A7 12 02 FB | 	rdlong	arg01, fp
273b4     09 00 80 FF 
273b8     09 01 08 FC | 	wrpin	##4608, arg01
273bc     0C 4E 85 F1 | 	sub	fp, #12
273c0     A7 12 02 FB | 	rdlong	arg01, fp
273c4     59 12 62 FD | 	drvh	arg01
273c8     04 4E 05 F1 | 	add	fp, #4
273cc     A7 12 02 FB | 	rdlong	arg01, fp
273d0     59 12 62 FD | 	drvh	arg01
273d4     04 4E 05 F1 | 	add	fp, #4
273d8     A7 12 02 FB | 	rdlong	arg01, fp
273dc     59 12 62 FD | 	drvh	arg01
273e0     04 4E 05 F1 | 	add	fp, #4
273e4     A7 12 02 FB | 	rdlong	arg01, fp
273e8     59 12 62 FD | 	drvh	arg01
273ec     20 4E 85 F1 | 	sub	fp, #32
273f0     00 04 80 FF 
273f4     A7 20 68 FC | 	wrlong	##524304, fp
273f8     04 4E 05 F1 | 	add	fp, #4
273fc     20 03 80 FF 
27400     A7 90 68 FC | 	wrlong	##409672, fp
27404     14 4E 05 F1 | 	add	fp, #20
27408     A7 1E 02 FB | 	rdlong	local01, fp
2740c     18 4E 85 F1 | 	sub	fp, #24
27410     A7 16 02 FB | 	rdlong	arg03, fp
27414     40 1E 62 FD | 	dirl	local01
27418     A0 03 80 FF 
2741c     0F 91 08 FC | 	wrpin	##475208, local01
27420     0F 17 12 FC | 	wxpin	arg03, local01
27424     0F 01 28 FC | 	wypin	#0, local01
27428     41 1E 62 FD | 	dirh	local01
2742c     1C 4E 05 F1 | 	add	fp, #28
27430     A7 20 02 FB | 	rdlong	local02, fp
27434     10 1F 82 F1 | 	sub	local01, local02
27438     07 1E 06 F5 | 	and	local01, #7
2743c     18 1E 66 F0 | 	shl	local01, #24
27440     78 14 06 F6 | 	mov	arg02, #120
27444     0F 15 42 F5 | 	or	arg02, local01
27448     14 4E 85 F1 | 	sub	fp, #20
2744c     A7 14 62 FC | 	wrlong	arg02, fp
27450     14 4E 05 F1 | 	add	fp, #20
27454     A7 12 02 FB | 	rdlong	arg01, fp
27458     10 14 26 F4 | 	bith	arg02, #16
2745c     40 12 62 FD | 	dirl	arg01
27460     09 15 02 FC | 	wrpin	arg02, arg01
27464     09 3F 18 FC | 	wxpin	#31, arg01
27468     FF FF FF FF 
2746c     09 FF 2B FC | 	wypin	##-1, arg01
27470     41 12 62 FD | 	dirh	arg01
27474     04 4E 85 F1 | 	sub	fp, #4
27478     A7 14 02 FB | 	rdlong	arg02, fp
2747c     08 4E 05 F1 | 	add	fp, #8
27480     A7 22 02 FB | 	rdlong	local03, fp
27484     11 15 82 F1 | 	sub	arg02, local03
27488     07 14 06 F5 | 	and	arg02, #7
2748c     18 14 66 F0 | 	shl	arg02, #24
27490     14 4E 85 F1 | 	sub	fp, #20
27494     A7 14 62 FC | 	wrlong	arg02, fp
27498     29 00 00 FF 
2749c     7A 14 46 F5 | 	or	arg02, ##21114
274a0     A7 14 62 FC | 	wrlong	arg02, fp
274a4     14 4E 05 F1 | 	add	fp, #20
274a8     A7 12 02 FB | 	rdlong	arg01, fp
274ac     40 12 62 FD | 	dirl	arg01
274b0     09 15 02 FC | 	wrpin	arg02, arg01
274b4     09 4F 18 FC | 	wxpin	#39, arg01
274b8     09 01 28 FC | 	wypin	#0, arg01
274bc     41 12 62 FD | 	dirh	arg01
274c0     28 4E 85 F1 | 	sub	fp, #40
274c4     A7 12 02 F6 | 	mov	arg01, fp
274c8     14 4E 85 F1 | 	sub	fp, #20
274cc     0A 14 06 F6 | 	mov	arg02, #10
274d0     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1117
274d4     00 12 06 F6 | 	mov	arg01, #0
274d8     00 14 06 F6 | 	mov	arg02, #0
274dc     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
274e0     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1127
274e4     64 12 06 F6 | 	mov	arg01, #100
274e8     A4 96 BF FD | 	call	#__system___waitus
274ec     14 4E 05 F1 | 	add	fp, #20
274f0     A7 12 02 F6 | 	mov	arg01, fp
274f4     14 4E 85 F1 | 	sub	fp, #20
274f8     0A 14 06 F6 | 	mov	arg02, #10
274fc     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1117
27500     0C 4E 05 F1 | 	add	fp, #12
27504     A7 00 48 FC | 	wrbyte	#0, fp
27508     0C 4E 85 F1 | 	sub	fp, #12
2750c     00 12 06 F6 | 	mov	arg01, #0
27510     00 14 06 F6 | 	mov	arg02, #0
27514     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27518     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2751c     01 18 0E F2 | 	cmp	arg04, #1 wz
27520     B8 03 90 5D |  if_ne	jmp	#LR__4017
27524     08 12 06 F6 | 	mov	arg01, #8
27528     AA 15 06 F6 | 	mov	arg02, #426
2752c     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27530     FD FA E1 F8 | 	getbyte	result1, result1, #0
27534     01 FA 0D F2 | 	cmp	result1, #1 wz
27538     98 01 90 5D |  if_ne	jmp	#LR__4003
2753c     14 4E 05 F1 | 	add	fp, #20
27540     A7 12 02 F6 | 	mov	arg01, fp
27544     14 4E 85 F1 | 	sub	fp, #20
27548     04 14 06 F6 | 	mov	arg02, #4
2754c     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1117
27550     16 4E 05 F1 | 	add	fp, #22
27554     A7 24 C2 FA | 	rdbyte	local04, fp
27558     16 4E 85 F1 | 	sub	fp, #22
2755c     01 24 0E F2 | 	cmp	local04, #1 wz
27560     17 4E 05 A1 |  if_e	add	fp, #23
27564     A7 22 C2 AA |  if_e	rdbyte	local03, fp
27568     17 4E 85 A1 |  if_e	sub	fp, #23
2756c     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
27570     68 03 90 5D |  if_ne	jmp	#LR__4016
27574                 | ' 				for (tmr = 1000; tmr; tmr--) {
27574     18 4E 05 F1 | 	add	fp, #24
27578     01 00 80 FF 
2757c     A7 D0 6B FC | 	wrlong	##1000, fp
27580     18 4E 85 F1 | 	sub	fp, #24
27584                 | LR__4000
27584     18 4E 05 F1 | 	add	fp, #24
27588     A7 1E 0A FB | 	rdlong	local01, fp wz
2758c     18 4E 85 F1 | 	sub	fp, #24
27590     3C 00 90 AD |  if_e	jmp	#LR__4001
27594     A9 12 06 F6 | 	mov	arg01, #169
27598     1E 14 C6 F9 | 	decod	arg02, #30
2759c     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
275a0     FD 24 02 F6 | 	mov	local04, result1
275a4     07 24 4E F7 | 	zerox	local04, #7 wz
275a8     24 00 90 AD |  if_e	jmp	#LR__4001
275ac     01 00 00 FF 
275b0     E8 13 06 F6 | 	mov	arg01, ##1000
275b4     D8 95 BF FD | 	call	#__system___waitus
275b8     18 4E 05 F1 | 	add	fp, #24
275bc     A7 24 02 FB | 	rdlong	local04, fp
275c0     01 24 86 F1 | 	sub	local04, #1
275c4     A7 24 62 FC | 	wrlong	local04, fp
275c8     18 4E 85 F1 | 	sub	fp, #24
275cc     B4 FF 9F FD | 	jmp	#LR__4000
275d0                 | LR__4001
275d0     18 4E 05 F1 | 	add	fp, #24
275d4     A7 24 0A FB | 	rdlong	local04, fp wz
275d8     18 4E 85 F1 | 	sub	fp, #24
275dc     4C 00 90 AD |  if_e	jmp	#LR__4002
275e0     3A 12 06 F6 | 	mov	arg01, #58
275e4     00 14 06 F6 | 	mov	arg02, #0
275e8     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
275ec     FD 22 02 F6 | 	mov	local03, result1
275f0     07 22 4E F7 | 	zerox	local03, #7 wz
275f4     34 00 90 5D |  if_ne	jmp	#LR__4002
275f8     14 4E 05 F1 | 	add	fp, #20
275fc     A7 12 02 F6 | 	mov	arg01, fp
27600     14 4E 85 F1 | 	sub	fp, #20
27604     04 14 06 F6 | 	mov	arg02, #4
27608     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2760c     14 4E 05 F1 | 	add	fp, #20
27610     A7 1E C2 FA | 	rdbyte	local01, fp
27614     40 1E CE F7 | 	test	local01, #64 wz
27618     0C 24 06 56 |  if_ne	mov	local04, #12
2761c     04 24 06 A6 |  if_e	mov	local04, #4
27620     08 4E 85 F1 | 	sub	fp, #8
27624     A7 24 42 FC | 	wrbyte	local04, fp
27628     0C 4E 85 F1 | 	sub	fp, #12
2762c                 | LR__4002
2762c     14 24 06 FB | 	rdlong	local04, #20
27630     18 4E 05 F1 | 	add	fp, #24
27634     A7 24 62 FC | 	wrlong	local04, fp
27638     0C 4E 05 F1 | 	add	fp, #12
2763c     A7 24 02 FB | 	rdlong	local04, fp
27640     1B 24 26 F4 | 	bith	local04, #27
27644     A7 24 62 FC | 	wrlong	local04, fp
27648     0C 4E 85 F1 | 	sub	fp, #12
2764c     A7 24 02 FB | 	rdlong	local04, fp
27650     18 4E 85 F1 | 	sub	fp, #24
27654     68 78 04 FF 
27658     81 25 16 F2 | 	cmp	local04, ##150000001 wc
2765c     1C 4E 05 C1 |  if_b	add	fp, #28
27660     00 01 80 CF 
27664     A7 08 68 CC |  if_b	wrlong	##131076, fp
27668     1C 4E 85 C1 |  if_b	sub	fp, #28
2766c     6C 02 90 CD |  if_b	jmp	#LR__4016
27670     18 4E 05 F1 | 	add	fp, #24
27674     A7 24 02 FB | 	rdlong	local04, fp
27678     18 4E 85 F1 | 	sub	fp, #24
2767c     E1 F5 05 FF 
27680     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27684     1C 4E 05 C1 |  if_b	add	fp, #28
27688     00 01 80 CF 
2768c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
27690     1C 4E 85 C1 |  if_b	sub	fp, #28
27694     44 02 90 CD |  if_b	jmp	#LR__4016
27698     18 4E 05 F1 | 	add	fp, #24
2769c     A7 24 02 FB | 	rdlong	local04, fp
276a0     18 4E 85 F1 | 	sub	fp, #24
276a4     3B 58 08 FF 
276a8     01 24 16 F2 | 	cmp	local04, ##280000001 wc
276ac     1C 4E 05 C1 |  if_b	add	fp, #28
276b0     00 01 80 CF 
276b4     A7 0C 68 CC |  if_b	wrlong	##131078, fp
276b8     1C 4E 85 C1 |  if_b	sub	fp, #28
276bc     1C 02 90 CD |  if_b	jmp	#LR__4016
276c0     1C 4E 05 F1 | 	add	fp, #28
276c4     80 01 80 FF 
276c8     A7 10 68 FC | 	wrlong	##196616, fp
276cc     1C 4E 85 F1 | 	sub	fp, #28
276d0     08 02 90 FD | 	jmp	#LR__4016
276d4                 | LR__4003
276d4     A9 12 06 F6 | 	mov	arg01, #169
276d8     00 14 06 F6 | 	mov	arg02, #0
276dc     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
276e0     FD 24 E2 F8 | 	getbyte	local04, result1, #0
276e4     02 24 16 F2 | 	cmp	local04, #2 wc
276e8     18 00 90 3D |  if_ae	jmp	#LR__4004
276ec     0C 4E 05 F1 | 	add	fp, #12
276f0     A7 04 48 FC | 	wrbyte	#2, fp
276f4     04 4E 05 F1 | 	add	fp, #4
276f8     A7 52 49 FC | 	wrbyte	#169, fp
276fc     10 4E 85 F1 | 	sub	fp, #16
27700     14 00 90 FD | 	jmp	#LR__4005
27704                 | LR__4004
27704     0C 4E 05 F1 | 	add	fp, #12
27708     A7 02 48 FC | 	wrbyte	#1, fp
2770c     04 4E 05 F1 | 	add	fp, #4
27710     A7 02 48 FC | 	wrbyte	#1, fp
27714     10 4E 85 F1 | 	sub	fp, #16
27718                 | LR__4005
27718                 | ' 				ty =  0x01 ; cmd =  (1) ;
27718                 | ' 			}
27718                 | ' 			for (tmr = 1000; tmr; tmr--) {
27718     18 4E 05 F1 | 	add	fp, #24
2771c     01 00 80 FF 
27720     A7 D0 6B FC | 	wrlong	##1000, fp
27724     18 4E 85 F1 | 	sub	fp, #24
27728                 | LR__4006
27728     18 4E 05 F1 | 	add	fp, #24
2772c     A7 22 0A FB | 	rdlong	local03, fp wz
27730     18 4E 85 F1 | 	sub	fp, #24
27734     44 00 90 AD |  if_e	jmp	#LR__4007
27738     10 4E 05 F1 | 	add	fp, #16
2773c     A7 12 C2 FA | 	rdbyte	arg01, fp
27740     10 4E 85 F1 | 	sub	fp, #16
27744     00 14 06 F6 | 	mov	arg02, #0
27748     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
2774c     FD 24 02 F6 | 	mov	local04, result1
27750     07 24 4E F7 | 	zerox	local04, #7 wz
27754     24 00 90 AD |  if_e	jmp	#LR__4007
27758     01 00 00 FF 
2775c     E8 13 06 F6 | 	mov	arg01, ##1000
27760     2C 94 BF FD | 	call	#__system___waitus
27764     18 4E 05 F1 | 	add	fp, #24
27768     A7 24 02 FB | 	rdlong	local04, fp
2776c     01 24 86 F1 | 	sub	local04, #1
27770     A7 24 62 FC | 	wrlong	local04, fp
27774     18 4E 85 F1 | 	sub	fp, #24
27778     AC FF 9F FD | 	jmp	#LR__4006
2777c                 | LR__4007
2777c     18 4E 05 F1 | 	add	fp, #24
27780     A7 24 0A FB | 	rdlong	local04, fp wz
27784     18 4E 85 F1 | 	sub	fp, #24
27788     14 00 90 AD |  if_e	jmp	#LR__4008
2778c     10 12 06 F6 | 	mov	arg01, #16
27790     09 14 C6 F9 | 	decod	arg02, #9
27794     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27798     07 FA 4D F7 | 	zerox	result1, #7 wz
2779c     0C 00 90 AD |  if_e	jmp	#LR__4009
277a0                 | LR__4008
277a0     0C 4E 05 F1 | 	add	fp, #12
277a4     A7 00 48 FC | 	wrbyte	#0, fp
277a8     0C 4E 85 F1 | 	sub	fp, #12
277ac                 | LR__4009
277ac     14 24 06 FB | 	rdlong	local04, #20
277b0     18 4E 05 F1 | 	add	fp, #24
277b4     A7 24 62 FC | 	wrlong	local04, fp
277b8     18 4E 85 F1 | 	sub	fp, #24
277bc     F0 FA 02 FF 
277c0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
277c4     18 00 90 3D |  if_ae	jmp	#LR__4010
277c8     24 4E 05 F1 | 	add	fp, #36
277cc     A7 24 02 FB | 	rdlong	local04, fp
277d0     1B 24 26 F4 | 	bith	local04, #27
277d4     A7 24 62 FC | 	wrlong	local04, fp
277d8     24 4E 85 F1 | 	sub	fp, #36
277dc     2C 00 90 FD | 	jmp	#LR__4011
277e0                 | LR__4010
277e0     18 4E 05 F1 | 	add	fp, #24
277e4     A7 24 02 FB | 	rdlong	local04, fp
277e8     18 4E 85 F1 | 	sub	fp, #24
277ec     E1 F5 05 FF 
277f0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
277f4     24 4E 05 C1 |  if_b	add	fp, #36
277f8     A7 24 02 CB |  if_b	rdlong	local04, fp
277fc     80 00 04 CF 
27800     00 24 46 C5 |  if_b	or	local04, ##134283264
27804     A7 24 62 CC |  if_b	wrlong	local04, fp
27808     24 4E 85 C1 |  if_b	sub	fp, #36
2780c                 | LR__4011
2780c     18 4E 05 F1 | 	add	fp, #24
27810     A7 24 02 FB | 	rdlong	local04, fp
27814     18 4E 85 F1 | 	sub	fp, #24
27818     F0 FA 02 FF 
2781c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27820     1C 4E 05 C1 |  if_b	add	fp, #28
27824     00 01 80 CF 
27828     A7 08 68 CC |  if_b	wrlong	##131076, fp
2782c     1C 4E 85 C1 |  if_b	sub	fp, #28
27830     A8 00 90 CD |  if_b	jmp	#LR__4015
27834     18 4E 05 F1 | 	add	fp, #24
27838     A7 24 02 FB | 	rdlong	local04, fp
2783c     18 4E 85 F1 | 	sub	fp, #24
27840     68 78 04 FF 
27844     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27848     1C 4E 05 C1 |  if_b	add	fp, #28
2784c     80 01 80 CF 
27850     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27854     1C 4E 85 C1 |  if_b	sub	fp, #28
27858     80 00 90 CD |  if_b	jmp	#LR__4014
2785c     18 4E 05 F1 | 	add	fp, #24
27860     A7 24 02 FB | 	rdlong	local04, fp
27864     18 4E 85 F1 | 	sub	fp, #24
27868     E1 F5 05 FF 
2786c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27870     1C 4E 05 C1 |  if_b	add	fp, #28
27874     00 02 80 CF 
27878     A7 10 68 CC |  if_b	wrlong	##262152, fp
2787c     1C 4E 85 C1 |  if_b	sub	fp, #28
27880     58 00 90 CD |  if_b	jmp	#LR__4013
27884     18 4E 05 F1 | 	add	fp, #24
27888     A7 24 02 FB | 	rdlong	local04, fp
2788c     18 4E 85 F1 | 	sub	fp, #24
27890     59 73 07 FF 
27894     81 24 16 F2 | 	cmp	local04, ##250000001 wc
27898     1C 4E 05 C1 |  if_b	add	fp, #28
2789c     80 02 80 CF 
278a0     A7 14 68 CC |  if_b	wrlong	##327690, fp
278a4     1C 4E 85 C1 |  if_b	sub	fp, #28
278a8     30 00 90 CD |  if_b	jmp	#LR__4012
278ac     18 4E 05 F1 | 	add	fp, #24
278b0     A7 24 02 FB | 	rdlong	local04, fp
278b4     18 4E 85 F1 | 	sub	fp, #24
278b8     D1 F0 08 FF 
278bc     01 25 16 F2 | 	cmp	local04, ##300000001 wc
278c0     1C 4E 05 C1 |  if_b	add	fp, #28
278c4     00 03 80 CF 
278c8     A7 18 68 CC |  if_b	wrlong	##393228, fp
278cc     1C 4E 85 F3 | 	sumc	fp, #28
278d0     80 03 80 3F 
278d4     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
278d8     1C 4E 85 31 |  if_ae	sub	fp, #28
278dc                 | LR__4012
278dc                 | LR__4013
278dc                 | LR__4014
278dc                 | LR__4015
278dc                 | LR__4016
278dc                 | LR__4017
278dc     0C 4E 05 F1 | 	add	fp, #12
278e0     A7 24 C2 FA | 	rdbyte	local04, fp
278e4     01 00 00 FF 
278e8     21 E4 05 F1 | 	add	objptr, ##545
278ec     F2 24 42 FC | 	wrbyte	local04, objptr
278f0     A7 1E CA FA | 	rdbyte	local01, fp wz
278f4     00 24 06 56 |  if_ne	mov	local04, #0
278f8     01 24 06 A6 |  if_e	mov	local04, #1
278fc     20 4E 05 F1 | 	add	fp, #32
27900     A7 24 42 FC | 	wrbyte	local04, fp
27904     A7 24 C2 FA | 	rdbyte	local04, fp
27908     2C 4E 85 F1 | 	sub	fp, #44
2790c     01 E4 85 F1 | 	sub	objptr, #1
27910     F2 24 42 FC | 	wrbyte	local04, objptr
27914     01 00 00 FF 
27918     20 E4 85 F1 | 	sub	objptr, ##544
2791c     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1127
27920     34 4E 05 F1 | 	add	fp, #52
27924     A7 12 02 FB | 	rdlong	arg01, fp
27928     18 4E 85 F1 | 	sub	fp, #24
2792c     A7 14 02 FB | 	rdlong	arg02, fp
27930     09 15 12 FC | 	wxpin	arg02, arg01
27934     1C 4E 05 F1 | 	add	fp, #28
27938     A7 12 02 FB | 	rdlong	arg01, fp
2793c     14 4E 85 F1 | 	sub	fp, #20
27940     A7 14 02 FB | 	rdlong	arg02, fp
27944     09 15 02 FC | 	wrpin	arg02, arg01
27948                 | ' 
27948                 | ' 		}
27948                 | ' 	}
27948                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27948                 | ' 	CardType = ty;
27948                 | ' 	s = ty ? 0 :  0x01 ;
27948                 | ' 	Stat = s;
27948                 | ' 
27948                 | ' 	deselect();
27948                 | ' 
27948                 | ' 
27948                 | ' 	_wxpin( PIN_CLK, ck_div );
27948                 | ' 	_wrpin( PIN_DI, spm_tx );
27948                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27948                 | ' 	return s;
27948     08 4E 05 F1 | 	add	fp, #8
2794c     A7 FA C1 FA | 	rdbyte	result1, fp
27950     2C 4E 85 F1 | 	sub	fp, #44
27954                 | LR__4018
27954     A7 F0 03 F6 | 	mov	ptra, fp
27958     B2 00 A0 FD | 	call	#popregs_
2795c                 | _fatfs_cc_disk_initialize_ret
2795c     2D 00 64 FD | 	ret
27960                 | 
27960                 | _fatfs_cc_disk_read
27960     05 4A 05 F6 | 	mov	COUNT_, #5
27964     A8 00 A0 FD | 	call	#pushregs_
27968     0A 1F 02 F6 | 	mov	local01, arg02
2796c     0B 21 02 F6 | 	mov	local02, arg03
27970     0C 23 02 F6 | 	mov	local03, arg04
27974     00 12 0E F2 | 	cmp	arg01, #0 wz
27978     01 FA 05 56 |  if_ne	mov	result1, #1
2797c                 | ' 
2797c                 | ' 	return Stat;
2797c     01 00 00 AF 
27980     20 E4 05 A1 |  if_e	add	objptr, ##544
27984     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27988     01 00 00 AF 
2798c     20 E4 85 A1 |  if_e	sub	objptr, ##544
27990     FD FA E1 F8 | 	getbyte	result1, result1, #0
27994     01 FA CD F7 | 	test	result1, #1 wz
27998     03 FA 05 56 |  if_ne	mov	result1, #3
2799c     84 00 90 5D |  if_ne	jmp	#LR__4022
279a0     01 00 00 FF 
279a4     21 E4 05 F1 | 	add	objptr, ##545
279a8     F2 24 C2 FA | 	rdbyte	local04, objptr
279ac     01 00 00 FF 
279b0     21 E4 85 F1 | 	sub	objptr, ##545
279b4     08 24 CE F7 | 	test	local04, #8 wz
279b8     09 20 66 A0 |  if_e	shl	local02, #9
279bc     02 22 16 F2 | 	cmp	local03, #2 wc
279c0     12 24 06 36 |  if_ae	mov	local04, #18
279c4     11 24 06 C6 |  if_b	mov	local04, #17
279c8     10 15 02 F6 | 	mov	arg02, local02
279cc     12 13 02 F6 | 	mov	arg01, local04
279d0     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1141
279d4     FD 26 02 F6 | 	mov	local05, result1
279d8     07 26 4E F7 | 	zerox	local05, #7 wz
279dc     30 00 90 5D |  if_ne	jmp	#LR__4021
279e0                 | ' 		do {
279e0                 | LR__4020
279e0     0F 13 02 F6 | 	mov	arg01, local01
279e4     09 14 C6 F9 | 	decod	arg02, #9
279e8     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1135
279ec     00 FA 0D F2 | 	cmp	result1, #0 wz
279f0     01 00 00 5F 
279f4     00 1E 06 51 |  if_ne	add	local01, ##512
279f8     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4020
279fc     12 25 E2 F8 | 	getbyte	local04, local04, #0
27a00     12 24 0E F2 | 	cmp	local04, #18 wz
27a04     0C 12 06 A6 |  if_e	mov	arg01, #12
27a08     00 14 06 A6 |  if_e	mov	arg02, #0
27a0c     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1141
27a10                 | LR__4021
27a10     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1127
27a14                 | ' 	}
27a14                 | ' 	deselect();
27a14                 | ' 
27a14                 | ' 	return count ? RES_ERROR : RES_OK;
27a14     00 22 0E F2 | 	cmp	local03, #0 wz
27a18     01 26 06 56 |  if_ne	mov	local05, #1
27a1c     00 26 06 A6 |  if_e	mov	local05, #0
27a20     13 FB 01 F6 | 	mov	result1, local05
27a24                 | LR__4022
27a24     A7 F0 03 F6 | 	mov	ptra, fp
27a28     B2 00 A0 FD | 	call	#popregs_
27a2c                 | _fatfs_cc_disk_read_ret
27a2c     2D 00 64 FD | 	ret
27a30                 | 
27a30                 | _fatfs_cc_disk_write
27a30     04 4A 05 F6 | 	mov	COUNT_, #4
27a34     A8 00 A0 FD | 	call	#pushregs_
27a38     0A 1F 02 F6 | 	mov	local01, arg02
27a3c     0C 21 02 F6 | 	mov	local02, arg04
27a40     0B 23 02 F6 | 	mov	local03, arg03
27a44     00 12 0E F2 | 	cmp	arg01, #0 wz
27a48     01 FA 05 56 |  if_ne	mov	result1, #1
27a4c                 | ' 
27a4c                 | ' 	return Stat;
27a4c     01 00 00 AF 
27a50     20 E4 05 A1 |  if_e	add	objptr, ##544
27a54     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27a58     01 00 00 AF 
27a5c     20 E4 85 A1 |  if_e	sub	objptr, ##544
27a60     FD FA E1 F8 | 	getbyte	result1, result1, #0
27a64     01 FA CD F7 | 	test	result1, #1 wz
27a68     03 FA 05 56 |  if_ne	mov	result1, #3
27a6c     D4 00 90 5D |  if_ne	jmp	#LR__4034
27a70     01 00 00 FF 
27a74     21 E4 05 F1 | 	add	objptr, ##545
27a78     F2 16 C2 FA | 	rdbyte	arg03, objptr
27a7c     01 00 00 FF 
27a80     21 E4 85 F1 | 	sub	objptr, ##545
27a84     08 16 CE F7 | 	test	arg03, #8 wz
27a88     09 22 66 A0 |  if_e	shl	local03, #9
27a8c     01 20 0E F2 | 	cmp	local02, #1 wz
27a90     30 00 90 5D |  if_ne	jmp	#LR__4030
27a94     18 12 06 F6 | 	mov	arg01, #24
27a98     11 15 02 F6 | 	mov	arg02, local03
27a9c     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27aa0     FD 24 02 F6 | 	mov	local04, result1
27aa4     07 24 4E F7 | 	zerox	local04, #7 wz
27aa8     84 00 90 5D |  if_ne	jmp	#LR__4033
27aac     0F 13 02 F6 | 	mov	arg01, local01
27ab0     FE 14 06 F6 | 	mov	arg02, #254
27ab4     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1137
27ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
27abc     00 20 06 56 |  if_ne	mov	local02, #0
27ac0     6C 00 90 FD | 	jmp	#LR__4033
27ac4                 | LR__4030
27ac4     01 00 00 FF 
27ac8     21 E4 05 F1 | 	add	objptr, ##545
27acc     F2 24 C2 FA | 	rdbyte	local04, objptr
27ad0     01 00 00 FF 
27ad4     21 E4 85 F1 | 	sub	objptr, ##545
27ad8     06 24 CE F7 | 	test	local04, #6 wz
27adc     97 12 06 56 |  if_ne	mov	arg01, #151
27ae0     10 15 02 56 |  if_ne	mov	arg02, local02
27ae4     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1141
27ae8     11 15 02 F6 | 	mov	arg02, local03
27aec     19 12 06 F6 | 	mov	arg01, #25
27af0     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27af4     FD 24 02 F6 | 	mov	local04, result1
27af8     07 24 4E F7 | 	zerox	local04, #7 wz
27afc     30 00 90 5D |  if_ne	jmp	#LR__4032
27b00                 | ' 			do {
27b00                 | LR__4031
27b00     0F 13 02 F6 | 	mov	arg01, local01
27b04     FC 14 06 F6 | 	mov	arg02, #252
27b08     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1137
27b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
27b10     01 00 00 5F 
27b14     00 1E 06 51 |  if_ne	add	local01, ##512
27b18     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4031
27b1c     00 12 06 F6 | 	mov	arg01, #0
27b20     FD 14 06 F6 | 	mov	arg02, #253
27b24     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1137
27b28     00 FA 0D F2 | 	cmp	result1, #0 wz
27b2c     01 20 06 A6 |  if_e	mov	local02, #1
27b30                 | LR__4032
27b30                 | LR__4033
27b30     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1127
27b34                 | ' 				count = 1;
27b34                 | ' 		}
27b34                 | ' 	}
27b34                 | ' 	deselect();
27b34                 | ' 
27b34                 | ' 	return count ? RES_ERROR : RES_OK;
27b34     00 20 0E F2 | 	cmp	local02, #0 wz
27b38     01 24 06 56 |  if_ne	mov	local04, #1
27b3c     00 24 06 A6 |  if_e	mov	local04, #0
27b40     12 FB 01 F6 | 	mov	result1, local04
27b44                 | LR__4034
27b44     A7 F0 03 F6 | 	mov	ptra, fp
27b48     B2 00 A0 FD | 	call	#popregs_
27b4c                 | _fatfs_cc_disk_write_ret
27b4c     2D 00 64 FD | 	ret
27b50                 | 
27b50                 | _fatfs_cc_disk_ioctl
27b50     01 4A 05 F6 | 	mov	COUNT_, #1
27b54     A8 00 A0 FD | 	call	#pushregs_
27b58     30 F0 07 F1 | 	add	ptra, #48
27b5c     04 4E 05 F1 | 	add	fp, #4
27b60     A7 12 42 FC | 	wrbyte	arg01, fp
27b64     04 4E 05 F1 | 	add	fp, #4
27b68     A7 14 42 FC | 	wrbyte	arg02, fp
27b6c     04 4E 05 F1 | 	add	fp, #4
27b70     A7 16 62 FC | 	wrlong	arg03, fp
27b74     08 4E 85 F1 | 	sub	fp, #8
27b78     A7 12 CA FA | 	rdbyte	arg01, fp wz
27b7c     04 4E 85 F1 | 	sub	fp, #4
27b80     01 FA 05 56 |  if_ne	mov	result1, #1
27b84                 | ' 
27b84                 | ' 	return Stat;
27b84     01 00 00 AF 
27b88     20 E4 05 A1 |  if_e	add	objptr, ##544
27b8c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27b90     01 00 00 AF 
27b94     20 E4 85 A1 |  if_e	sub	objptr, ##544
27b98     FD FA E1 F8 | 	getbyte	result1, result1, #0
27b9c     01 FA CD F7 | 	test	result1, #1 wz
27ba0     03 FA 05 56 |  if_ne	mov	result1, #3
27ba4     E4 01 90 5D |  if_ne	jmp	#LR__4048
27ba8     10 4E 05 F1 | 	add	fp, #16
27bac     A7 02 68 FC | 	wrlong	#1, fp
27bb0                 | ' 
27bb0                 | ' 	res = RES_ERROR;
27bb0                 | ' 	switch (ctrl) {
27bb0     08 4E 85 F1 | 	sub	fp, #8
27bb4     A7 1E C2 FA | 	rdbyte	local01, fp
27bb8     08 4E 85 F1 | 	sub	fp, #8
27bbc     04 1E 26 F3 | 	fle	local01, #4
27bc0     30 1E 62 FD | 	jmprel	local01
27bc4                 | LR__4040
27bc4     10 00 90 FD | 	jmp	#LR__4041
27bc8     24 00 90 FD | 	jmp	#LR__4042
27bcc     A0 01 90 FD | 	jmp	#LR__4046
27bd0     80 01 90 FD | 	jmp	#LR__4045
27bd4     98 01 90 FD | 	jmp	#LR__4046
27bd8                 | LR__4041
27bd8     B4 79 B0 FD | 	call	#_fatfs_cc_select_1131
27bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
27be0     10 4E 05 51 |  if_ne	add	fp, #16
27be4     A7 00 68 5C |  if_ne	wrlong	#0, fp
27be8     10 4E 85 51 |  if_ne	sub	fp, #16
27bec                 | ' 			break;
27bec     8C 01 90 FD | 	jmp	#LR__4047
27bf0                 | LR__4042
27bf0     09 12 06 F6 | 	mov	arg01, #9
27bf4     00 14 06 F6 | 	mov	arg02, #0
27bf8     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1141
27bfc     FD 1E 02 F6 | 	mov	local01, result1
27c00     07 1E 4E F7 | 	zerox	local01, #7 wz
27c04     74 01 90 5D |  if_ne	jmp	#LR__4047
27c08     18 4E 05 F1 | 	add	fp, #24
27c0c     A7 12 02 F6 | 	mov	arg01, fp
27c10     18 4E 85 F1 | 	sub	fp, #24
27c14     10 14 06 F6 | 	mov	arg02, #16
27c18     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1135
27c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
27c20     58 01 90 AD |  if_e	jmp	#LR__4047
27c24     18 4E 05 F1 | 	add	fp, #24
27c28     A7 1E C2 FA | 	rdbyte	local01, fp
27c2c     18 4E 85 F1 | 	sub	fp, #24
27c30     06 1E 46 F0 | 	shr	local01, #6
27c34     01 1E 0E F2 | 	cmp	local01, #1 wz
27c38     5C 00 90 5D |  if_ne	jmp	#LR__4043
27c3c     21 4E 05 F1 | 	add	fp, #33
27c40     A7 1E C2 FA | 	rdbyte	local01, fp
27c44     01 4E 85 F1 | 	sub	fp, #1
27c48     A7 FA C1 FA | 	rdbyte	result1, fp
27c4c     FD FA 31 F9 | 	getword	result1, result1, #0
27c50     08 FA 65 F0 | 	shl	result1, #8
27c54     FD 1E 02 F1 | 	add	local01, result1
27c58     01 4E 85 F1 | 	sub	fp, #1
27c5c     A7 FA C1 FA | 	rdbyte	result1, fp
27c60     3F FA 05 F5 | 	and	result1, #63
27c64     10 FA 65 F0 | 	shl	result1, #16
27c68     FD 1E 02 F1 | 	add	local01, result1
27c6c     01 1E 06 F1 | 	add	local01, #1
27c70     09 4E 05 F1 | 	add	fp, #9
27c74     A7 1E 62 FC | 	wrlong	local01, fp
27c78     1C 4E 85 F1 | 	sub	fp, #28
27c7c     A7 1E 02 FB | 	rdlong	local01, fp
27c80     1C 4E 05 F1 | 	add	fp, #28
27c84     A7 FA 01 FB | 	rdlong	result1, fp
27c88     28 4E 85 F1 | 	sub	fp, #40
27c8c     0A FA 65 F0 | 	shl	result1, #10
27c90     0F FB 61 FC | 	wrlong	result1, local01
27c94     AC 00 90 FD | 	jmp	#LR__4044
27c98                 | LR__4043
27c98     1D 4E 05 F1 | 	add	fp, #29
27c9c     A7 1E C2 FA | 	rdbyte	local01, fp
27ca0     0F 1F 42 F8 | 	getnib	local01, local01, #0
27ca4     05 4E 05 F1 | 	add	fp, #5
27ca8     A7 FA C1 FA | 	rdbyte	result1, fp
27cac     80 FA 05 F5 | 	and	result1, #128
27cb0     07 FA C5 F0 | 	sar	result1, #7
27cb4     FD 1E 02 F1 | 	add	local01, result1
27cb8     01 4E 85 F1 | 	sub	fp, #1
27cbc     A7 FA C1 FA | 	rdbyte	result1, fp
27cc0     03 FA 05 F5 | 	and	result1, #3
27cc4     01 FA 65 F0 | 	shl	result1, #1
27cc8     FD 1E 02 F1 | 	add	local01, result1
27ccc     02 1E 06 F1 | 	add	local01, #2
27cd0     0D 4E 85 F1 | 	sub	fp, #13
27cd4     A7 1E 42 FC | 	wrbyte	local01, fp
27cd8     0C 4E 05 F1 | 	add	fp, #12
27cdc     A7 1E C2 FA | 	rdbyte	local01, fp
27ce0     06 1E 46 F0 | 	shr	local01, #6
27ce4     01 4E 85 F1 | 	sub	fp, #1
27ce8     A7 FA C1 FA | 	rdbyte	result1, fp
27cec     FD FA 31 F9 | 	getword	result1, result1, #0
27cf0     02 FA 65 F0 | 	shl	result1, #2
27cf4     FD 1E 02 F1 | 	add	local01, result1
27cf8     01 4E 85 F1 | 	sub	fp, #1
27cfc     A7 FA C1 FA | 	rdbyte	result1, fp
27d00     03 FA 05 F5 | 	and	result1, #3
27d04     FD FA 31 F9 | 	getword	result1, result1, #0
27d08     0A FA 65 F0 | 	shl	result1, #10
27d0c     FD 1E 02 F1 | 	add	local01, result1
27d10     01 1E 06 F1 | 	add	local01, #1
27d14     0A 4E 05 F1 | 	add	fp, #10
27d18     A7 1E 62 FC | 	wrlong	local01, fp
27d1c     1C 4E 85 F1 | 	sub	fp, #28
27d20     A7 1E 02 FB | 	rdlong	local01, fp
27d24     1C 4E 05 F1 | 	add	fp, #28
27d28     A7 FA 01 FB | 	rdlong	result1, fp
27d2c     14 4E 85 F1 | 	sub	fp, #20
27d30     A7 16 C2 FA | 	rdbyte	arg03, fp
27d34     14 4E 85 F1 | 	sub	fp, #20
27d38     09 16 86 F1 | 	sub	arg03, #9
27d3c     0B FB 61 F0 | 	shl	result1, arg03
27d40     0F FB 61 FC | 	wrlong	result1, local01
27d44                 | LR__4044
27d44     10 4E 05 F1 | 	add	fp, #16
27d48     A7 00 68 FC | 	wrlong	#0, fp
27d4c     10 4E 85 F1 | 	sub	fp, #16
27d50                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
27d50                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
27d50                 | ' 					*(LBA_t*)buff = cs << (n - 9);
27d50                 | ' 				}
27d50                 | ' 				res = RES_OK;
27d50                 | ' 			}
27d50                 | ' 			break;
27d50     28 00 90 FD | 	jmp	#LR__4047
27d54                 | LR__4045
27d54     0C 4E 05 F1 | 	add	fp, #12
27d58     A7 1E 02 FB | 	rdlong	local01, fp
27d5c     0F 01 69 FC | 	wrlong	#128, local01
27d60     04 4E 05 F1 | 	add	fp, #4
27d64     A7 00 68 FC | 	wrlong	#0, fp
27d68     10 4E 85 F1 | 	sub	fp, #16
27d6c                 | ' 			*(DWORD*)buff = 128;
27d6c                 | ' 			res = RES_OK;
27d6c                 | ' 			break;
27d6c     0C 00 90 FD | 	jmp	#LR__4047
27d70                 | LR__4046
27d70     10 4E 05 F1 | 	add	fp, #16
27d74     A7 08 68 FC | 	wrlong	#4, fp
27d78     10 4E 85 F1 | 	sub	fp, #16
27d7c                 | LR__4047
27d7c     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1127
27d80                 | ' 			res = RES_PARERR;
27d80                 | ' 	}
27d80                 | ' 
27d80                 | ' 	deselect();
27d80                 | ' 
27d80                 | ' 	return res;
27d80     10 4E 05 F1 | 	add	fp, #16
27d84     A7 FA 01 FB | 	rdlong	result1, fp
27d88     10 4E 85 F1 | 	sub	fp, #16
27d8c                 | LR__4048
27d8c     A7 F0 03 F6 | 	mov	ptra, fp
27d90     B2 00 A0 FD | 	call	#popregs_
27d94                 | _fatfs_cc_disk_ioctl_ret
27d94     2D 00 64 FD | 	ret
27d98                 | 
27d98                 | _fatfs_cc_disk_setpins
27d98     00 12 0E F2 | 	cmp	arg01, #0 wz
27d9c     01 FA 65 56 |  if_ne	neg	result1, #1
27da0     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
27da4     01 00 00 FF 
27da8     10 E4 05 F1 | 	add	objptr, ##528
27dac     F2 14 62 FC | 	wrlong	arg02, objptr
27db0     04 E4 05 F1 | 	add	objptr, #4
27db4     F2 16 62 FC | 	wrlong	arg03, objptr
27db8     04 E4 05 F1 | 	add	objptr, #4
27dbc     F2 18 62 FC | 	wrlong	arg04, objptr
27dc0     04 E4 05 F1 | 	add	objptr, #4
27dc4     F2 1A 62 FC | 	wrlong	arg05, objptr
27dc8     01 00 00 FF 
27dcc     1C E4 85 F1 | 	sub	objptr, ##540
27dd0     00 FA 05 F6 | 	mov	result1, #0
27dd4                 | _fatfs_cc_disk_setpins_ret
27dd4     2D 00 64 FD | 	ret
27dd8                 | 
27dd8                 | _fatfs_cc_tchar2uni
27dd8     09 01 02 FB | 	rdlong	_var01, arg01
27ddc     00 03 02 F6 | 	mov	_var02, _var01
27de0     01 00 06 F1 | 	add	_var01, #1
27de4     00 05 02 F6 | 	mov	_var03, _var01
27de8     01 07 C2 FA | 	rdbyte	_var04, _var02
27dec     80 06 CE F7 | 	test	_var04, #128 wz
27df0     E8 00 90 AD |  if_e	jmp	#LR__4057
27df4     03 09 02 F6 | 	mov	_var05, _var04
27df8     E0 08 06 F5 | 	and	_var05, #224
27dfc     C0 08 0E F2 | 	cmp	_var05, #192 wz
27e00     1F 06 06 A5 |  if_e	and	_var04, #31
27e04     01 0A 06 A6 |  if_e	mov	_var06, #1
27e08     34 00 90 AD |  if_e	jmp	#LR__4051
27e0c     03 09 02 F6 | 	mov	_var05, _var04
27e10     F0 08 06 F5 | 	and	_var05, #240
27e14     E0 08 0E F2 | 	cmp	_var05, #224 wz
27e18     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
27e1c     02 0A 06 A6 |  if_e	mov	_var06, #2
27e20     1C 00 90 AD |  if_e	jmp	#LR__4050
27e24     03 09 02 F6 | 	mov	_var05, _var04
27e28     F8 08 06 F5 | 	and	_var05, #248
27e2c     F0 08 0E F2 | 	cmp	_var05, #240 wz
27e30     07 06 06 A5 |  if_e	and	_var04, #7
27e34     03 0A 06 A6 |  if_e	mov	_var06, #3
27e38                 | ' 			return 0xFFFFFFFF;
27e38     01 FA 65 56 |  if_ne	neg	result1, #1
27e3c     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27e40                 | LR__4050
27e40                 | LR__4051
27e40                 | ' 		}
27e40                 | ' 		do {
27e40                 | LR__4052
27e40     02 0D C2 FA | 	rdbyte	_var07, _var03
27e44     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
27e48     C0 08 06 F5 | 	and	_var05, #192
27e4c     80 08 0E F2 | 	cmp	_var05, #128 wz
27e50     01 04 06 F1 | 	add	_var03, #1
27e54     01 FA 65 56 |  if_ne	neg	result1, #1
27e58     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27e5c     06 06 66 F0 | 	shl	_var04, #6
27e60     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
27e64     3F 02 06 F5 | 	and	_var02, #63
27e68     01 07 42 F5 | 	or	_var04, _var02
27e6c     F4 0B 6E FB | 	djnz	_var06, #LR__4052
27e70     80 06 16 F2 | 	cmp	_var04, #128 wc
27e74     24 00 90 CD |  if_b	jmp	#LR__4054
27e78     6C 00 00 FF 
27e7c     00 06 16 F2 | 	cmp	_var04, ##55296 wc
27e80     0C 00 90 CD |  if_b	jmp	#LR__4053
27e84     70 00 00 FF 
27e88     00 06 16 F2 | 	cmp	_var04, ##57344 wc
27e8c     0C 00 90 CD |  if_b	jmp	#LR__4054
27e90                 | LR__4053
27e90     80 08 00 FF 
27e94     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
27e98     08 00 90 CD |  if_b	jmp	#LR__4055
27e9c                 | LR__4054
27e9c     01 FA 65 F6 | 	neg	result1, #1
27ea0     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
27ea4                 | LR__4055
27ea4     80 00 00 FF 
27ea8     00 06 16 F2 | 	cmp	_var04, ##65536 wc
27eac     2C 00 90 CD |  if_b	jmp	#LR__4056
27eb0     03 03 02 F6 | 	mov	_var02, _var04
27eb4     80 00 00 FF 
27eb8     00 02 86 F1 | 	sub	_var02, ##65536
27ebc     06 02 66 F0 | 	shl	_var02, #6
27ec0     80 FF 01 FF 
27ec4     00 02 06 F5 | 	and	_var02, ##67043328
27ec8     6E 00 6C FF 
27ecc     00 08 06 F6 | 	mov	_var05, ##-671032320
27ed0     01 09 42 F5 | 	or	_var05, _var02
27ed4     09 06 46 F7 | 	zerox	_var04, #9
27ed8     04 07 42 F5 | 	or	_var04, _var05
27edc                 | LR__4056
27edc                 | LR__4057
27edc     09 05 62 FC | 	wrlong	_var03, arg01
27ee0                 | ' 	}
27ee0                 | ' #line 811 "ff.c"
27ee0                 | ' 	*str = p;
27ee0                 | ' 	return uc;
27ee0     03 FB 01 F6 | 	mov	result1, _var04
27ee4                 | _fatfs_cc_tchar2uni_ret
27ee4     2D 00 64 FD | 	ret
27ee8                 | 
27ee8                 | _fatfs_cc_put_utf
27ee8     80 12 16 F2 | 	cmp	arg01, #128 wc
27eec     18 00 90 3D |  if_ae	jmp	#LR__4060
27ef0     01 16 16 F2 | 	cmp	arg03, #1 wc
27ef4     00 FA 05 C6 |  if_b	mov	result1, #0
27ef8     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27efc     0A 13 42 FC | 	wrbyte	arg01, arg02
27f00                 | ' 		*buf = (TCHAR)chr;
27f00                 | ' 		return 1;
27f00     01 FA 05 F6 | 	mov	result1, #1
27f04     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27f08                 | LR__4060
27f08     04 00 00 FF 
27f0c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
27f10     40 00 90 3D |  if_ae	jmp	#LR__4061
27f14     02 16 16 F2 | 	cmp	arg03, #2 wc
27f18     00 FA 05 C6 |  if_b	mov	result1, #0
27f1c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27f20     09 FB 01 F6 | 	mov	result1, arg01
27f24     06 FA 45 F0 | 	shr	result1, #6
27f28     1F FA 05 F5 | 	and	result1, #31
27f2c     C0 16 06 F6 | 	mov	arg03, #192
27f30     FD 16 42 F5 | 	or	arg03, result1
27f34     0A 17 42 FC | 	wrbyte	arg03, arg02
27f38     01 14 06 F1 | 	add	arg02, #1
27f3c     3F 12 06 F5 | 	and	arg01, #63
27f40     80 FA 05 F6 | 	mov	result1, #128
27f44     09 FB 41 F5 | 	or	result1, arg01
27f48     0A FB 41 FC | 	wrbyte	result1, arg02
27f4c                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
27f4c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
27f4c                 | ' 		return 2;
27f4c     02 FA 05 F6 | 	mov	result1, #2
27f50     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27f54                 | LR__4061
27f54     80 00 00 FF 
27f58     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27f5c     70 00 90 3D |  if_ae	jmp	#LR__4064
27f60     03 16 16 F2 | 	cmp	arg03, #3 wc
27f64     18 00 90 CD |  if_b	jmp	#LR__4062
27f68     6C 00 00 FF 
27f6c     00 12 16 F2 | 	cmp	arg01, ##55296 wc
27f70     14 00 90 CD |  if_b	jmp	#LR__4063
27f74     70 00 00 FF 
27f78     00 12 16 F2 | 	cmp	arg01, ##57344 wc
27f7c     08 00 90 3D |  if_ae	jmp	#LR__4063
27f80                 | LR__4062
27f80     00 FA 05 F6 | 	mov	result1, #0
27f84     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27f88                 | LR__4063
27f88     09 FB 59 F8 | 	getnib	result1, arg01, #3
27f8c     E0 16 06 F6 | 	mov	arg03, #224
27f90     FD 16 42 F5 | 	or	arg03, result1
27f94     0A 17 42 FC | 	wrbyte	arg03, arg02
27f98     01 14 06 F1 | 	add	arg02, #1
27f9c     09 FB 01 F6 | 	mov	result1, arg01
27fa0     06 FA 45 F0 | 	shr	result1, #6
27fa4     3F FA 05 F5 | 	and	result1, #63
27fa8     80 16 06 F6 | 	mov	arg03, #128
27fac     FD 16 42 F5 | 	or	arg03, result1
27fb0     0A 17 42 FC | 	wrbyte	arg03, arg02
27fb4     01 14 06 F1 | 	add	arg02, #1
27fb8     3F 12 06 F5 | 	and	arg01, #63
27fbc     80 FA 05 F6 | 	mov	result1, #128
27fc0     09 FB 41 F5 | 	or	result1, arg01
27fc4     0A FB 41 FC | 	wrbyte	result1, arg02
27fc8                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
27fc8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
27fc8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
27fc8                 | ' 		return 3;
27fc8     03 FA 05 F6 | 	mov	result1, #3
27fcc     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27fd0                 | LR__4064
27fd0     04 16 16 F2 | 	cmp	arg03, #4 wc
27fd4     00 FA 05 C6 |  if_b	mov	result1, #0
27fd8     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27fdc     09 01 02 F6 | 	mov	_var01, arg01
27fe0     E0 01 06 F4 | 	bitl	_var01, #480
27fe4     00 00 6C FF 
27fe8     00 00 86 F1 | 	sub	_var01, ##-671088640
27fec     06 00 46 F0 | 	shr	_var01, #6
27ff0     09 13 32 F9 | 	getword	arg01, arg01, #0
27ff4     6E 00 00 FF 
27ff8     00 12 86 F1 | 	sub	arg01, ##56320
27ffc     00 08 00 FF 
28000     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
28004     02 00 00 CF 
28008     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2800c     00 FA 05 36 |  if_ae	mov	result1, #0
28010     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
28014     09 01 42 F5 | 	or	_var01, arg01
28018     80 00 00 FF 
2801c     00 00 06 F1 | 	add	_var01, ##65536
28020     00 FB 01 F6 | 	mov	result1, _var01
28024     12 FA 45 F0 | 	shr	result1, #18
28028     07 FA 05 F5 | 	and	result1, #7
2802c     F0 16 06 F6 | 	mov	arg03, #240
28030     FD 16 42 F5 | 	or	arg03, result1
28034     0A 17 42 FC | 	wrbyte	arg03, arg02
28038     01 14 06 F1 | 	add	arg02, #1
2803c     00 FB 01 F6 | 	mov	result1, _var01
28040     0C FA 45 F0 | 	shr	result1, #12
28044     3F FA 05 F5 | 	and	result1, #63
28048     80 16 06 F6 | 	mov	arg03, #128
2804c     FD 16 42 F5 | 	or	arg03, result1
28050     0A 17 42 FC | 	wrbyte	arg03, arg02
28054     01 14 06 F1 | 	add	arg02, #1
28058     00 FB 01 F6 | 	mov	result1, _var01
2805c     06 FA 45 F0 | 	shr	result1, #6
28060     3F FA 05 F5 | 	and	result1, #63
28064     80 16 06 F6 | 	mov	arg03, #128
28068     FD 16 42 F5 | 	or	arg03, result1
2806c     0A 17 42 FC | 	wrbyte	arg03, arg02
28070     01 14 06 F1 | 	add	arg02, #1
28074     3F 00 06 F5 | 	and	_var01, #63
28078     80 FA 05 F6 | 	mov	result1, #128
2807c     00 FB 41 F5 | 	or	result1, _var01
28080     0A FB 41 FC | 	wrbyte	result1, arg02
28084                 | ' 	chr = (hc | chr) + 0x10000;
28084                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
28084                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
28084                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28084                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28084                 | ' 	return 4;
28084     04 FA 05 F6 | 	mov	result1, #4
28088                 | _fatfs_cc_put_utf_ret
28088     2D 00 64 FD | 	ret
2808c                 | 
2808c                 | _fatfs_cc_sync_window
2808c     02 4A 05 F6 | 	mov	COUNT_, #2
28090     A8 00 A0 FD | 	call	#pushregs_
28094     09 1F 02 F6 | 	mov	local01, arg01
28098     00 20 06 F6 | 	mov	local02, #0
2809c     03 1E 06 F1 | 	add	local01, #3
280a0     0F FB C9 FA | 	rdbyte	result1, local01 wz
280a4     03 1E 86 F1 | 	sub	local01, #3
280a8     A4 00 90 AD |  if_e	jmp	#LR__4072
280ac     01 1E 06 F1 | 	add	local01, #1
280b0     0F 13 C2 FA | 	rdbyte	arg01, local01
280b4     33 1E 06 F1 | 	add	local01, #51
280b8     0F 15 02 F6 | 	mov	arg02, local01
280bc     04 1E 86 F1 | 	sub	local01, #4
280c0     0F 17 02 FB | 	rdlong	arg03, local01
280c4     30 1E 86 F1 | 	sub	local01, #48
280c8     01 18 06 F6 | 	mov	arg04, #1
280cc     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
280d0     00 FA 0D F2 | 	cmp	result1, #0 wz
280d4     74 00 90 5D |  if_ne	jmp	#LR__4070
280d8     03 1E 06 F1 | 	add	local01, #3
280dc     0F 01 48 FC | 	wrbyte	#0, local01
280e0     2D 1E 06 F1 | 	add	local01, #45
280e4     0F FB 01 FB | 	rdlong	result1, local01
280e8     0C 1E 86 F1 | 	sub	local01, #12
280ec     0F 19 02 FB | 	rdlong	arg04, local01
280f0     0C FB 81 F1 | 	sub	result1, arg04
280f4     08 1E 86 F1 | 	sub	local01, #8
280f8     0F 19 02 FB | 	rdlong	arg04, local01
280fc     1C 1E 86 F1 | 	sub	local01, #28
28100     0C FB 11 F2 | 	cmp	result1, arg04 wc
28104     48 00 90 3D |  if_ae	jmp	#LR__4071
28108     02 1E 06 F1 | 	add	local01, #2
2810c     0F 19 C2 FA | 	rdbyte	arg04, local01
28110     02 1E 86 F1 | 	sub	local01, #2
28114     02 18 0E F2 | 	cmp	arg04, #2 wz
28118     34 00 90 5D |  if_ne	jmp	#LR__4071
2811c     01 1E 06 F1 | 	add	local01, #1
28120     0F 13 C2 FA | 	rdbyte	arg01, local01
28124     33 1E 06 F1 | 	add	local01, #51
28128     0F 15 02 F6 | 	mov	arg02, local01
2812c     04 1E 86 F1 | 	sub	local01, #4
28130     0F 17 02 FB | 	rdlong	arg03, local01
28134     14 1E 86 F1 | 	sub	local01, #20
28138     0F 1F 02 FB | 	rdlong	local01, local01
2813c     0F 17 02 F1 | 	add	arg03, local01
28140     01 18 06 F6 | 	mov	arg04, #1
28144     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
28148     04 00 90 FD | 	jmp	#LR__4071
2814c                 | LR__4070
2814c     01 20 06 F6 | 	mov	local02, #1
28150                 | LR__4071
28150                 | LR__4072
28150                 | ' 			res = FR_DISK_ERR;
28150                 | ' 		}
28150                 | ' 	}
28150                 | ' 	return res;
28150     10 FB 01 F6 | 	mov	result1, local02
28154     A7 F0 03 F6 | 	mov	ptra, fp
28158     B2 00 A0 FD | 	call	#popregs_
2815c                 | _fatfs_cc_sync_window_ret
2815c     2D 00 64 FD | 	ret
28160                 | 
28160                 | _fatfs_cc_move_window
28160     03 4A 05 F6 | 	mov	COUNT_, #3
28164     A8 00 A0 FD | 	call	#pushregs_
28168     09 1F 02 F6 | 	mov	local01, arg01
2816c     0A 21 02 F6 | 	mov	local02, arg02
28170     00 22 06 F6 | 	mov	local03, #0
28174     30 1E 06 F1 | 	add	local01, #48
28178     0F 19 02 FB | 	rdlong	arg04, local01
2817c     30 1E 86 F1 | 	sub	local01, #48
28180     0C 21 0A F2 | 	cmp	local02, arg04 wz
28184     40 00 90 AD |  if_e	jmp	#LR__4081
28188     0F 13 02 F6 | 	mov	arg01, local01
2818c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
28190     FD 22 0A F6 | 	mov	local03, result1 wz
28194     30 00 90 5D |  if_ne	jmp	#LR__4080
28198     01 1E 06 F1 | 	add	local01, #1
2819c     0F 13 C2 FA | 	rdbyte	arg01, local01
281a0     33 1E 06 F1 | 	add	local01, #51
281a4     0F 15 02 F6 | 	mov	arg02, local01
281a8     10 17 02 F6 | 	mov	arg03, local02
281ac     01 18 06 F6 | 	mov	arg04, #1
281b0     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
281b4     00 FA 0D F2 | 	cmp	result1, #0 wz
281b8     01 20 66 56 |  if_ne	neg	local02, #1
281bc     01 22 06 56 |  if_ne	mov	local03, #1
281c0     04 1E 86 F1 | 	sub	local01, #4
281c4     0F 21 62 FC | 	wrlong	local02, local01
281c8                 | LR__4080
281c8                 | LR__4081
281c8                 | ' 				sect = (LBA_t)0 - 1;
281c8                 | ' 				res = FR_DISK_ERR;
281c8                 | ' 			}
281c8                 | ' 			fs->winsect = sect;
281c8                 | ' 		}
281c8                 | ' 	}
281c8                 | ' 	return res;
281c8     11 FB 01 F6 | 	mov	result1, local03
281cc     A7 F0 03 F6 | 	mov	ptra, fp
281d0     B2 00 A0 FD | 	call	#popregs_
281d4                 | _fatfs_cc_move_window_ret
281d4     2D 00 64 FD | 	ret
281d8                 | 
281d8                 | _fatfs_cc_sync_fs
281d8     02 4A 05 F6 | 	mov	COUNT_, #2
281dc     A8 00 A0 FD | 	call	#pushregs_
281e0     09 1F 02 F6 | 	mov	local01, arg01
281e4     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
281e8     FD 20 0A F6 | 	mov	local02, result1 wz
281ec     D8 00 90 5D |  if_ne	jmp	#LR__4091
281f0     0F 19 C2 FA | 	rdbyte	arg04, local01
281f4     03 18 0E F2 | 	cmp	arg04, #3 wz
281f8     04 1E 06 A1 |  if_e	add	local01, #4
281fc     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
28200     04 1E 86 A1 |  if_e	sub	local01, #4
28204     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
28208     A0 00 90 5D |  if_ne	jmp	#LR__4090
2820c     34 1E 06 F1 | 	add	local01, #52
28210     0F 13 02 F6 | 	mov	arg01, local01
28214     00 14 06 F6 | 	mov	arg02, #0
28218     09 16 C6 F9 | 	decod	arg03, #9
2821c     98 00 A0 FD | 	call	#\builtin_bytefill_
28220     0F 13 02 F6 | 	mov	arg01, local01
28224     FE 13 06 F1 | 	add	arg01, #510
28228     55 00 80 FF 
2822c     09 AB 58 FC | 	wrword	##43605, arg01
28230     A9 B0 A0 FF 
28234     0F A5 68 FC | 	wrlong	##1096897106, local01
28238     0F 13 02 F6 | 	mov	arg01, local01
2823c     E4 13 06 F1 | 	add	arg01, #484
28240     B9 A0 B0 FF 
28244     09 E5 68 FC | 	wrlong	##1631679090, arg01
28248     0F 13 02 F6 | 	mov	arg01, local01
2824c     E8 13 06 F1 | 	add	arg01, #488
28250     20 1E 86 F1 | 	sub	local01, #32
28254     0F 15 02 FB | 	rdlong	arg02, local01
28258     09 15 62 FC | 	wrlong	arg02, arg01
2825c     20 1E 06 F1 | 	add	local01, #32
28260     0F 13 02 F6 | 	mov	arg01, local01
28264     EC 13 06 F1 | 	add	arg01, #492
28268     24 1E 86 F1 | 	sub	local01, #36
2826c     0F 15 02 FB | 	rdlong	arg02, local01
28270     09 15 62 FC | 	wrlong	arg02, arg01
28274     10 1E 06 F1 | 	add	local01, #16
28278     0F 17 02 FB | 	rdlong	arg03, local01
2827c     01 16 06 F1 | 	add	arg03, #1
28280     10 1E 06 F1 | 	add	local01, #16
28284     0F 17 62 FC | 	wrlong	arg03, local01
28288     2F 1E 86 F1 | 	sub	local01, #47
2828c     0F 13 C2 FA | 	rdbyte	arg01, local01
28290     33 1E 06 F1 | 	add	local01, #51
28294     0F 15 02 F6 | 	mov	arg02, local01
28298     01 18 06 F6 | 	mov	arg04, #1
2829c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
282a0     30 1E 86 F1 | 	sub	local01, #48
282a4     0F 01 48 FC | 	wrbyte	#0, local01
282a8     04 1E 86 F1 | 	sub	local01, #4
282ac                 | LR__4090
282ac     01 1E 06 F1 | 	add	local01, #1
282b0     0F 13 C2 FA | 	rdbyte	arg01, local01
282b4     00 14 06 F6 | 	mov	arg02, #0
282b8     00 16 06 F6 | 	mov	arg03, #0
282bc     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
282c0     00 FA 0D F2 | 	cmp	result1, #0 wz
282c4     01 20 06 56 |  if_ne	mov	local02, #1
282c8                 | LR__4091
282c8                 | ' 	}
282c8                 | ' 
282c8                 | ' 	return res;
282c8     10 FB 01 F6 | 	mov	result1, local02
282cc     A7 F0 03 F6 | 	mov	ptra, fp
282d0     B2 00 A0 FD | 	call	#popregs_
282d4                 | _fatfs_cc_sync_fs_ret
282d4     2D 00 64 FD | 	ret
282d8                 | 
282d8                 | _fatfs_cc_clst2sect
282d8     02 14 86 F1 | 	sub	arg02, #2
282dc     18 12 06 F1 | 	add	arg01, #24
282e0     09 01 02 FB | 	rdlong	_var01, arg01
282e4     18 12 86 F1 | 	sub	arg01, #24
282e8     02 00 86 F1 | 	sub	_var01, #2
282ec     00 15 12 F2 | 	cmp	arg02, _var01 wc
282f0     00 FA 05 36 |  if_ae	mov	result1, #0
282f4     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
282f8     0A 12 06 F1 | 	add	arg01, #10
282fc     09 01 E2 FA | 	rdword	_var01, arg01
28300     0A 01 02 FD | 	qmul	_var01, arg02
28304                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
28304     22 12 06 F1 | 	add	arg01, #34
28308     09 FB 01 FB | 	rdlong	result1, arg01
2830c     18 00 62 FD | 	getqx	_var01
28310     00 FB 01 F1 | 	add	result1, _var01
28314                 | _fatfs_cc_clst2sect_ret
28314     2D 00 64 FD | 	ret
28318                 | 
28318                 | _fatfs_cc_get_fat
28318     07 4A 05 F6 | 	mov	COUNT_, #7
2831c     A8 00 A0 FD | 	call	#pushregs_
28320     0A 1F 02 F6 | 	mov	local01, arg02
28324     09 21 02 FB | 	rdlong	local02, arg01
28328     02 1E 16 F2 | 	cmp	local01, #2 wc
2832c     14 00 90 CD |  if_b	jmp	#LR__4100
28330     18 20 06 F1 | 	add	local02, #24
28334     10 23 02 FB | 	rdlong	local03, local02
28338     18 20 86 F1 | 	sub	local02, #24
2833c     11 1F 12 F2 | 	cmp	local01, local03 wc
28340     08 00 90 CD |  if_b	jmp	#LR__4101
28344                 | LR__4100
28344     01 24 06 F6 | 	mov	local04, #1
28348     60 01 90 FD | 	jmp	#LR__4108
2834c                 | LR__4101
2834c     01 24 66 F6 | 	neg	local04, #1
28350                 | ' 		val = 0xFFFFFFFF;
28350                 | ' 
28350                 | ' 		switch (fs->fs_type) {
28350     10 27 C2 FA | 	rdbyte	local05, local02
28354     01 26 86 F1 | 	sub	local05, #1
28358     03 26 26 F3 | 	fle	local05, #3
2835c     30 26 62 FD | 	jmprel	local05
28360                 | LR__4102
28360     0C 00 90 FD | 	jmp	#LR__4103
28364     B8 00 90 FD | 	jmp	#LR__4104
28368     F8 00 90 FD | 	jmp	#LR__4105
2836c     38 01 90 FD | 	jmp	#LR__4106
28370                 | LR__4103
28370     0F 27 02 F6 | 	mov	local05, local01
28374     0F 13 02 F6 | 	mov	arg01, local01
28378     01 12 46 F0 | 	shr	arg01, #1
2837c     09 27 02 F1 | 	add	local05, arg01
28380     10 13 02 F6 | 	mov	arg01, local02
28384     13 29 02 F6 | 	mov	local06, local05
28388     09 28 46 F0 | 	shr	local06, #9
2838c     24 20 06 F1 | 	add	local02, #36
28390     10 15 02 FB | 	rdlong	arg02, local02
28394     24 20 86 F1 | 	sub	local02, #36
28398     14 15 02 F1 | 	add	arg02, local06
2839c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
283a0     00 FA 0D F2 | 	cmp	result1, #0 wz
283a4     04 01 90 5D |  if_ne	jmp	#LR__4107
283a8     13 29 02 F6 | 	mov	local06, local05
283ac     FF 29 06 F5 | 	and	local06, #511
283b0     34 20 06 F1 | 	add	local02, #52
283b4     10 29 02 F1 | 	add	local06, local02
283b8     14 2B C2 FA | 	rdbyte	local07, local06
283bc     34 20 86 F1 | 	sub	local02, #52
283c0     10 13 02 F6 | 	mov	arg01, local02
283c4     01 26 06 F1 | 	add	local05, #1
283c8     13 29 02 F6 | 	mov	local06, local05
283cc     09 28 46 F0 | 	shr	local06, #9
283d0     24 20 06 F1 | 	add	local02, #36
283d4     10 15 02 FB | 	rdlong	arg02, local02
283d8     24 20 86 F1 | 	sub	local02, #36
283dc     14 15 02 F1 | 	add	arg02, local06
283e0     7C FD BF FD | 	call	#_fatfs_cc_move_window
283e4     00 FA 0D F2 | 	cmp	result1, #0 wz
283e8     C0 00 90 5D |  if_ne	jmp	#LR__4107
283ec     FF 27 06 F5 | 	and	local05, #511
283f0     34 20 06 F1 | 	add	local02, #52
283f4     10 27 02 F1 | 	add	local05, local02
283f8     13 29 C2 FA | 	rdbyte	local06, local05
283fc     08 28 66 F0 | 	shl	local06, #8
28400     14 2B 42 F5 | 	or	local07, local06
28404     01 1E CE F7 | 	test	local01, #1 wz
28408     04 2A 46 50 |  if_ne	shr	local07, #4
2840c     15 23 02 56 |  if_ne	mov	local03, local07
28410     0B 2A 46 A7 |  if_e	zerox	local07, #11
28414     15 23 02 A6 |  if_e	mov	local03, local07
28418     11 25 02 F6 | 	mov	local04, local03
2841c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2841c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2841c                 | ' 			break;
2841c     8C 00 90 FD | 	jmp	#LR__4107
28420                 | LR__4104
28420     10 13 02 F6 | 	mov	arg01, local02
28424     0F 29 02 F6 | 	mov	local06, local01
28428     08 28 46 F0 | 	shr	local06, #8
2842c     24 20 06 F1 | 	add	local02, #36
28430     10 15 02 FB | 	rdlong	arg02, local02
28434     24 20 86 F1 | 	sub	local02, #36
28438     14 15 02 F1 | 	add	arg02, local06
2843c     20 FD BF FD | 	call	#_fatfs_cc_move_window
28440     00 FA 0D F2 | 	cmp	result1, #0 wz
28444     64 00 90 5D |  if_ne	jmp	#LR__4107
28448     34 20 06 F1 | 	add	local02, #52
2844c     01 1E 66 F0 | 	shl	local01, #1
28450     FF 1F 06 F5 | 	and	local01, #511
28454     0F 21 02 F1 | 	add	local02, local01
28458                 | ' {
28458                 | ' 
28458                 | ' 	return *((WORD*)ptr);
28458     10 FB E1 FA | 	rdword	result1, local02
2845c     FD 24 32 F9 | 	getword	local04, result1, #0
28460                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
28460                 | ' 			break;
28460     48 00 90 FD | 	jmp	#LR__4107
28464                 | LR__4105
28464     10 13 02 F6 | 	mov	arg01, local02
28468     0F 29 02 F6 | 	mov	local06, local01
2846c     07 28 46 F0 | 	shr	local06, #7
28470     24 20 06 F1 | 	add	local02, #36
28474     10 15 02 FB | 	rdlong	arg02, local02
28478     24 20 86 F1 | 	sub	local02, #36
2847c     14 15 02 F1 | 	add	arg02, local06
28480     DC FC BF FD | 	call	#_fatfs_cc_move_window
28484     00 FA 0D F2 | 	cmp	result1, #0 wz
28488     20 00 90 5D |  if_ne	jmp	#LR__4107
2848c     34 20 06 F1 | 	add	local02, #52
28490     02 1E 66 F0 | 	shl	local01, #2
28494     FF 1F 06 F5 | 	and	local01, #511
28498     0F 21 02 F1 | 	add	local02, local01
2849c                 | ' {
2849c                 | ' 
2849c                 | ' 	return *((DWORD*)ptr);
2849c     10 25 02 FB | 	rdlong	local04, local02
284a0     7C 24 06 F4 | 	bitl	local04, #124
284a4                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
284a4                 | ' 			break;
284a4     04 00 90 FD | 	jmp	#LR__4107
284a8                 | LR__4106
284a8     01 24 06 F6 | 	mov	local04, #1
284ac                 | LR__4107
284ac                 | LR__4108
284ac                 | ' 			val = 1;
284ac                 | ' 		}
284ac                 | ' 	}
284ac                 | ' 
284ac                 | ' 	return val;
284ac     12 FB 01 F6 | 	mov	result1, local04
284b0     A7 F0 03 F6 | 	mov	ptra, fp
284b4     B2 00 A0 FD | 	call	#popregs_
284b8                 | _fatfs_cc_get_fat_ret
284b8     2D 00 64 FD | 	ret
284bc                 | 
284bc                 | _fatfs_cc_put_fat
284bc     08 4A 05 F6 | 	mov	COUNT_, #8
284c0     A8 00 A0 FD | 	call	#pushregs_
284c4     09 1F 02 F6 | 	mov	local01, arg01
284c8     0A 21 02 F6 | 	mov	local02, arg02
284cc     0B 23 02 F6 | 	mov	local03, arg03
284d0     02 24 06 F6 | 	mov	local04, #2
284d4     02 20 16 F2 | 	cmp	local02, #2 wc
284d8     E0 01 90 CD |  if_b	jmp	#LR__4117
284dc     18 1E 06 F1 | 	add	local01, #24
284e0     0F 27 02 FB | 	rdlong	local05, local01
284e4     18 1E 86 F1 | 	sub	local01, #24
284e8     13 21 12 F2 | 	cmp	local02, local05 wc
284ec     CC 01 90 3D |  if_ae	jmp	#LR__4117
284f0                 | ' 		switch (fs->fs_type) {
284f0     0F 29 C2 FA | 	rdbyte	local06, local01
284f4     01 28 86 F1 | 	sub	local06, #1
284f8     03 28 26 F3 | 	fle	local06, #3
284fc     30 28 62 FD | 	jmprel	local06
28500                 | LR__4110
28500     0C 00 90 FD | 	jmp	#LR__4111
28504     F8 00 90 FD | 	jmp	#LR__4114
28508     40 01 90 FD | 	jmp	#LR__4115
2850c     AC 01 90 FD | 	jmp	#LR__4116
28510                 | LR__4111
28510     10 2B 02 F6 | 	mov	local07, local02
28514     10 27 02 F6 | 	mov	local05, local02
28518     01 26 46 F0 | 	shr	local05, #1
2851c     13 2B 02 F1 | 	add	local07, local05
28520     0F 13 02 F6 | 	mov	arg01, local01
28524     15 29 02 F6 | 	mov	local06, local07
28528     09 28 46 F0 | 	shr	local06, #9
2852c     24 1E 06 F1 | 	add	local01, #36
28530     0F 15 02 FB | 	rdlong	arg02, local01
28534     24 1E 86 F1 | 	sub	local01, #36
28538     14 15 02 F1 | 	add	arg02, local06
2853c     20 FC BF FD | 	call	#_fatfs_cc_move_window
28540     FD 24 0A F6 | 	mov	local04, result1 wz
28544     74 01 90 5D |  if_ne	jmp	#LR__4116
28548     34 1E 06 F1 | 	add	local01, #52
2854c     0F 2D 02 F6 | 	mov	local08, local01
28550     15 27 02 F6 | 	mov	local05, local07
28554     FF 27 06 F5 | 	and	local05, #511
28558     13 2D 02 F1 | 	add	local08, local05
2855c     01 20 CE F7 | 	test	local02, #1 wz
28560     34 1E 86 F1 | 	sub	local01, #52
28564     01 2A 06 F1 | 	add	local07, #1
28568     18 00 90 AD |  if_e	jmp	#LR__4112
2856c     16 27 C2 FA | 	rdbyte	local05, local08
28570     13 27 42 F8 | 	getnib	local05, local05, #0
28574     11 29 E2 F8 | 	getbyte	local06, local03, #0
28578     04 28 66 F0 | 	shl	local06, #4
2857c     14 27 42 F5 | 	or	local05, local06
28580     04 00 90 FD | 	jmp	#LR__4113
28584                 | LR__4112
28584     11 27 02 F6 | 	mov	local05, local03
28588                 | LR__4113
28588     16 27 42 FC | 	wrbyte	local05, local08
2858c     03 1E 06 F1 | 	add	local01, #3
28590     0F 03 48 FC | 	wrbyte	#1, local01
28594     03 1E 86 F1 | 	sub	local01, #3
28598     0F 13 02 F6 | 	mov	arg01, local01
2859c     15 2D 02 F6 | 	mov	local08, local07
285a0     09 2C 46 F0 | 	shr	local08, #9
285a4     24 1E 06 F1 | 	add	local01, #36
285a8     0F 15 02 FB | 	rdlong	arg02, local01
285ac     24 1E 86 F1 | 	sub	local01, #36
285b0     16 15 02 F1 | 	add	arg02, local08
285b4     A8 FB BF FD | 	call	#_fatfs_cc_move_window
285b8     FD 24 0A F6 | 	mov	local04, result1 wz
285bc     FC 00 90 5D |  if_ne	jmp	#LR__4116
285c0     34 1E 06 F1 | 	add	local01, #52
285c4     0F 2D 02 F6 | 	mov	local08, local01
285c8     FF 2B 06 F5 | 	and	local07, #511
285cc     15 2D 02 F1 | 	add	local08, local07
285d0     01 20 CE F7 | 	test	local02, #1 wz
285d4     04 22 46 50 |  if_ne	shr	local03, #4
285d8     11 27 02 56 |  if_ne	mov	local05, local03
285dc     16 27 C2 AA |  if_e	rdbyte	local05, local08
285e0     F0 26 06 A5 |  if_e	and	local05, #240
285e4     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
285e8     11 23 42 A8 |  if_e	getnib	local03, local03, #0
285ec     11 27 42 A5 |  if_e	or	local05, local03
285f0     16 27 42 FC | 	wrbyte	local05, local08
285f4     31 1E 86 F1 | 	sub	local01, #49
285f8     0F 03 48 FC | 	wrbyte	#1, local01
285fc                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
285fc                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
285fc                 | ' 			fs->wflag = 1;
285fc                 | ' 			break;
285fc     BC 00 90 FD | 	jmp	#LR__4116
28600                 | LR__4114
28600     0F 13 02 F6 | 	mov	arg01, local01
28604     10 2D 02 F6 | 	mov	local08, local02
28608     08 2C 46 F0 | 	shr	local08, #8
2860c     24 1E 06 F1 | 	add	local01, #36
28610     0F 15 02 FB | 	rdlong	arg02, local01
28614     24 1E 86 F1 | 	sub	local01, #36
28618     16 15 02 F1 | 	add	arg02, local08
2861c     40 FB BF FD | 	call	#_fatfs_cc_move_window
28620     FD 24 0A F6 | 	mov	local04, result1 wz
28624     94 00 90 5D |  if_ne	jmp	#LR__4116
28628     34 1E 06 F1 | 	add	local01, #52
2862c     0F 13 02 F6 | 	mov	arg01, local01
28630     01 20 66 F0 | 	shl	local02, #1
28634     FF 21 06 F5 | 	and	local02, #511
28638     10 13 02 F1 | 	add	arg01, local02
2863c     09 23 52 FC | 	wrword	local03, arg01
28640     31 1E 86 F1 | 	sub	local01, #49
28644     0F 03 48 FC | 	wrbyte	#1, local01
28648                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
28648                 | ' 			fs->wflag = 1;
28648                 | ' 			break;
28648     70 00 90 FD | 	jmp	#LR__4116
2864c                 | LR__4115
2864c     0F 13 02 F6 | 	mov	arg01, local01
28650     10 2D 02 F6 | 	mov	local08, local02
28654     07 2C 46 F0 | 	shr	local08, #7
28658     24 1E 06 F1 | 	add	local01, #36
2865c     0F 15 02 FB | 	rdlong	arg02, local01
28660     24 1E 86 F1 | 	sub	local01, #36
28664     16 15 02 F1 | 	add	arg02, local08
28668     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2866c     FD 24 0A F6 | 	mov	local04, result1 wz
28670     48 00 90 5D |  if_ne	jmp	#LR__4116
28674     7C 22 06 F4 | 	bitl	local03, #124
28678     34 1E 06 F1 | 	add	local01, #52
2867c     10 2D 02 F6 | 	mov	local08, local02
28680     02 2C 66 F0 | 	shl	local08, #2
28684     FF 2D 06 F5 | 	and	local08, #511
28688     0F 13 02 F6 | 	mov	arg01, local01
2868c     16 13 02 F1 | 	add	arg01, local08
28690                 | ' {
28690                 | ' 
28690                 | ' 	return *((DWORD*)ptr);
28690     09 2D 02 FB | 	rdlong	local08, arg01
28694     00 00 78 FF 
28698     00 2C 06 F5 | 	and	local08, ##-268435456
2869c     16 23 42 F5 | 	or	local03, local08
286a0     0F 13 02 F6 | 	mov	arg01, local01
286a4     02 20 66 F0 | 	shl	local02, #2
286a8     FF 21 06 F5 | 	and	local02, #511
286ac     10 13 02 F1 | 	add	arg01, local02
286b0     09 23 62 FC | 	wrlong	local03, arg01
286b4     31 1E 86 F1 | 	sub	local01, #49
286b8     0F 03 48 FC | 	wrbyte	#1, local01
286bc                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
286bc                 | ' 			}
286bc                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
286bc                 | ' 			fs->wflag = 1;
286bc                 | ' 			break;
286bc                 | LR__4116
286bc                 | LR__4117
286bc                 | ' 		}
286bc                 | ' 	}
286bc                 | ' 	return res;
286bc     12 FB 01 F6 | 	mov	result1, local04
286c0     A7 F0 03 F6 | 	mov	ptra, fp
286c4     B2 00 A0 FD | 	call	#popregs_
286c8                 | _fatfs_cc_put_fat_ret
286c8     2D 00 64 FD | 	ret
286cc                 | 
286cc                 | _fatfs_cc_remove_chain
286cc     05 4A 05 F6 | 	mov	COUNT_, #5
286d0     A8 00 A0 FD | 	call	#pushregs_
286d4     09 1F 02 F6 | 	mov	local01, arg01
286d8     0A 21 02 F6 | 	mov	local02, arg02
286dc     0B 23 02 F6 | 	mov	local03, arg03
286e0     0F 25 02 FB | 	rdlong	local04, local01
286e4     02 20 16 F2 | 	cmp	local02, #2 wc
286e8     14 00 90 CD |  if_b	jmp	#LR__4120
286ec     18 24 06 F1 | 	add	local04, #24
286f0     12 FB 01 FB | 	rdlong	result1, local04
286f4     18 24 86 F1 | 	sub	local04, #24
286f8     FD 20 12 F2 | 	cmp	local02, result1 wc
286fc     08 00 90 CD |  if_b	jmp	#LR__4121
28700                 | LR__4120
28700     02 FA 05 F6 | 	mov	result1, #2
28704     CC 00 90 FD | 	jmp	#LR__4126
28708                 | LR__4121
28708     00 22 0E F2 | 	cmp	local03, #0 wz
2870c     18 00 90 AD |  if_e	jmp	#LR__4122
28710     11 15 02 F6 | 	mov	arg02, local03
28714     12 13 02 F6 | 	mov	arg01, local04
28718     01 16 66 F6 | 	neg	arg03, #1
2871c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
28720     00 FA 0D F2 | 	cmp	result1, #0 wz
28724     AC 00 90 5D |  if_ne	jmp	#LR__4126
28728                 | LR__4122
28728                 | ' 	}
28728                 | ' 
28728                 | ' 
28728                 | ' 	do {
28728                 | LR__4123
28728     10 15 02 F6 | 	mov	arg02, local02
2872c     0F 13 02 F6 | 	mov	arg01, local01
28730     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
28734     FD 26 0A F6 | 	mov	local05, result1 wz
28738     94 00 90 AD |  if_e	jmp	#LR__4125
2873c     01 26 0E F2 | 	cmp	local05, #1 wz
28740     02 FA 05 A6 |  if_e	mov	result1, #2
28744     8C 00 90 AD |  if_e	jmp	#LR__4126
28748     FF FF 7F FF 
2874c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28750     01 FA 05 A6 |  if_e	mov	result1, #1
28754     7C 00 90 AD |  if_e	jmp	#LR__4126
28758     10 15 02 F6 | 	mov	arg02, local02
2875c     12 13 02 F6 | 	mov	arg01, local04
28760     00 16 06 F6 | 	mov	arg03, #0
28764     54 FD BF FD | 	call	#_fatfs_cc_put_fat
28768     FD 22 0A F6 | 	mov	local03, result1 wz
2876c     11 FB 01 56 |  if_ne	mov	result1, local03
28770     60 00 90 5D |  if_ne	jmp	#LR__4126
28774     18 24 06 F1 | 	add	local04, #24
28778     12 23 02 FB | 	rdlong	local03, local04
2877c     02 22 86 F1 | 	sub	local03, #2
28780     04 24 86 F1 | 	sub	local04, #4
28784     12 21 02 FB | 	rdlong	local02, local04
28788     14 24 86 F1 | 	sub	local04, #20
2878c     11 21 12 F2 | 	cmp	local02, local03 wc
28790     24 00 90 3D |  if_ae	jmp	#LR__4124
28794     14 24 06 F1 | 	add	local04, #20
28798     12 23 02 FB | 	rdlong	local03, local04
2879c     01 22 06 F1 | 	add	local03, #1
287a0     12 23 62 FC | 	wrlong	local03, local04
287a4     10 24 86 F1 | 	sub	local04, #16
287a8     12 23 C2 FA | 	rdbyte	local03, local04
287ac     01 22 46 F5 | 	or	local03, #1
287b0     12 23 42 FC | 	wrbyte	local03, local04
287b4     04 24 86 F1 | 	sub	local04, #4
287b8                 | LR__4124
287b8     13 21 02 F6 | 	mov	local02, local05
287bc     18 24 06 F1 | 	add	local04, #24
287c0     12 27 02 FB | 	rdlong	local05, local04
287c4     18 24 86 F1 | 	sub	local04, #24
287c8     13 21 12 F2 | 	cmp	local02, local05 wc
287cc     58 FF 9F CD |  if_b	jmp	#LR__4123
287d0                 | LR__4125
287d0                 | ' #line 1500 "ff.c"
287d0                 | ' 	return FR_OK;
287d0     00 FA 05 F6 | 	mov	result1, #0
287d4                 | LR__4126
287d4     A7 F0 03 F6 | 	mov	ptra, fp
287d8     B2 00 A0 FD | 	call	#popregs_
287dc                 | _fatfs_cc_remove_chain_ret
287dc     2D 00 64 FD | 	ret
287e0                 | 
287e0                 | _fatfs_cc_create_chain
287e0     09 4A 05 F6 | 	mov	COUNT_, #9
287e4     A8 00 A0 FD | 	call	#pushregs_
287e8     09 1F 02 F6 | 	mov	local01, arg01
287ec     0A 21 0A F6 | 	mov	local02, arg02 wz
287f0     0F 23 02 FB | 	rdlong	local03, local01
287f4     28 00 90 5D |  if_ne	jmp	#LR__4130
287f8     10 22 06 F1 | 	add	local03, #16
287fc     11 25 0A FB | 	rdlong	local04, local03 wz
28800     10 22 86 F1 | 	sub	local03, #16
28804     18 22 06 51 |  if_ne	add	local03, #24
28808     11 27 02 5B |  if_ne	rdlong	local05, local03
2880c     18 22 86 51 |  if_ne	sub	local03, #24
28810     13 25 12 52 |  if_ne	cmp	local04, local05 wc
28814     50 00 90 4D |  if_c_and_nz	jmp	#LR__4131
28818     01 24 06 F6 | 	mov	local04, #1
2881c     48 00 90 FD | 	jmp	#LR__4131
28820                 | LR__4130
28820     10 15 02 F6 | 	mov	arg02, local02
28824     0F 13 02 F6 | 	mov	arg01, local01
28828     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2882c     FD 24 02 F6 | 	mov	local04, result1
28830     02 24 16 F2 | 	cmp	local04, #2 wc
28834     01 FA 05 C6 |  if_b	mov	result1, #1
28838     BC 01 90 CD |  if_b	jmp	#LR__4141
2883c     FF FF 7F FF 
28840     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28844     12 FB 01 A6 |  if_e	mov	result1, local04
28848     AC 01 90 AD |  if_e	jmp	#LR__4141
2884c     18 22 06 F1 | 	add	local03, #24
28850     11 27 02 FB | 	rdlong	local05, local03
28854     18 22 86 F1 | 	sub	local03, #24
28858     13 25 12 F2 | 	cmp	local04, local05 wc
2885c     12 FB 01 C6 |  if_b	mov	result1, local04
28860     94 01 90 CD |  if_b	jmp	#LR__4141
28864     10 25 02 F6 | 	mov	local04, local02
28868                 | LR__4131
28868     14 22 06 F1 | 	add	local03, #20
2886c     11 27 0A FB | 	rdlong	local05, local03 wz
28870     14 22 86 F1 | 	sub	local03, #20
28874     00 FA 05 A6 |  if_e	mov	result1, #0
28878     7C 01 90 AD |  if_e	jmp	#LR__4141
2887c     00 28 06 F6 | 	mov	local06, #0
28880     10 25 0A F2 | 	cmp	local04, local02 wz
28884     74 00 90 5D |  if_ne	jmp	#LR__4134
28888     12 29 02 F6 | 	mov	local06, local04
2888c     01 28 06 F1 | 	add	local06, #1
28890     18 22 06 F1 | 	add	local03, #24
28894     11 27 02 FB | 	rdlong	local05, local03
28898     18 22 86 F1 | 	sub	local03, #24
2889c     13 29 12 F2 | 	cmp	local06, local05 wc
288a0     02 28 06 36 |  if_ae	mov	local06, #2
288a4     14 15 02 F6 | 	mov	arg02, local06
288a8     0F 13 02 F6 | 	mov	arg01, local01
288ac     68 FA BF FD | 	call	#_fatfs_cc_get_fat
288b0     FD 26 02 F6 | 	mov	local05, result1
288b4     01 26 0E F2 | 	cmp	local05, #1 wz
288b8     FF FF 7F 5F 
288bc     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
288c0     13 FB 01 A6 |  if_e	mov	result1, local05
288c4     30 01 90 AD |  if_e	jmp	#LR__4141
288c8     00 26 0E F2 | 	cmp	local05, #0 wz
288cc     2C 00 90 AD |  if_e	jmp	#LR__4133
288d0     10 22 06 F1 | 	add	local03, #16
288d4     11 2B 02 FB | 	rdlong	local07, local03
288d8     10 22 86 F1 | 	sub	local03, #16
288dc     02 2A 16 F2 | 	cmp	local07, #2 wc
288e0     14 00 90 CD |  if_b	jmp	#LR__4132
288e4     18 22 06 F1 | 	add	local03, #24
288e8     11 27 02 FB | 	rdlong	local05, local03
288ec     18 22 86 F1 | 	sub	local03, #24
288f0     13 2B 12 F2 | 	cmp	local07, local05 wc
288f4     15 25 02 C6 |  if_b	mov	local04, local07
288f8                 | LR__4132
288f8     00 28 06 F6 | 	mov	local06, #0
288fc                 | LR__4133
288fc                 | LR__4134
288fc     00 28 0E F2 | 	cmp	local06, #0 wz
28900     60 00 90 5D |  if_ne	jmp	#LR__4137
28904     12 29 02 F6 | 	mov	local06, local04
28908                 | ' 			ncl = scl;
28908                 | ' 			for (;;) {
28908                 | LR__4135
28908     01 28 06 F1 | 	add	local06, #1
2890c     18 22 06 F1 | 	add	local03, #24
28910     11 27 02 FB | 	rdlong	local05, local03
28914     18 22 86 F1 | 	sub	local03, #24
28918     13 29 12 F2 | 	cmp	local06, local05 wc
2891c     02 28 06 36 |  if_ae	mov	local06, #2
28920     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
28924     00 FA 05 16 |  if_a	mov	result1, #0
28928     CC 00 90 1D |  if_a	jmp	#LR__4141
2892c     14 15 02 F6 | 	mov	arg02, local06
28930     0F 13 02 F6 | 	mov	arg01, local01
28934     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
28938     FD 2A 0A F6 | 	mov	local07, result1 wz
2893c     24 00 90 AD |  if_e	jmp	#LR__4136
28940     01 2A 0E F2 | 	cmp	local07, #1 wz
28944     FF FF 7F 5F 
28948     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
2894c     15 FB 01 A6 |  if_e	mov	result1, local07
28950     A4 00 90 AD |  if_e	jmp	#LR__4141
28954     12 29 0A F2 | 	cmp	local06, local04 wz
28958     00 FA 05 A6 |  if_e	mov	result1, #0
2895c     98 00 90 AD |  if_e	jmp	#LR__4141
28960     A4 FF 9F FD | 	jmp	#LR__4135
28964                 | LR__4136
28964                 | LR__4137
28964     11 13 02 F6 | 	mov	arg01, local03
28968     14 15 02 F6 | 	mov	arg02, local06
2896c     01 16 66 F6 | 	neg	arg03, #1
28970     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28974     FD 2C 0A F6 | 	mov	local08, result1 wz
28978     1C 00 90 5D |  if_ne	jmp	#LR__4138
2897c     00 20 0E F2 | 	cmp	local02, #0 wz
28980     14 00 90 AD |  if_e	jmp	#LR__4138
28984     11 13 02 F6 | 	mov	arg01, local03
28988     10 15 02 F6 | 	mov	arg02, local02
2898c     14 17 02 F6 | 	mov	arg03, local06
28990     28 FB BF FD | 	call	#_fatfs_cc_put_fat
28994     FD 2C 02 F6 | 	mov	local08, result1
28998                 | LR__4138
28998     00 2C 0E F2 | 	cmp	local08, #0 wz
2899c     4C 00 90 5D |  if_ne	jmp	#LR__4139
289a0     10 22 06 F1 | 	add	local03, #16
289a4     11 29 62 FC | 	wrlong	local06, local03
289a8     08 22 06 F1 | 	add	local03, #8
289ac     11 27 02 FB | 	rdlong	local05, local03
289b0     02 26 86 F1 | 	sub	local05, #2
289b4     04 22 86 F1 | 	sub	local03, #4
289b8     11 2F 02 FB | 	rdlong	local09, local03
289bc     14 22 86 F1 | 	sub	local03, #20
289c0     13 2F 1A F2 | 	cmp	local09, local05 wcz
289c4     14 22 06 E1 |  if_be	add	local03, #20
289c8     11 2F 02 EB |  if_be	rdlong	local09, local03
289cc     01 2E 86 E1 |  if_be	sub	local09, #1
289d0     11 2F 62 EC |  if_be	wrlong	local09, local03
289d4     14 22 86 E1 |  if_be	sub	local03, #20
289d8     04 22 06 F1 | 	add	local03, #4
289dc     11 27 C2 FA | 	rdbyte	local05, local03
289e0     01 26 46 F5 | 	or	local05, #1
289e4     11 27 42 FC | 	wrbyte	local05, local03
289e8     08 00 90 FD | 	jmp	#LR__4140
289ec                 | LR__4139
289ec     01 2C 0E F2 | 	cmp	local08, #1 wz
289f0     01 28 C6 F6 | 	negz	local06, #1
289f4                 | LR__4140
289f4                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
289f4                 | ' 	}
289f4                 | ' 
289f4                 | ' 	return ncl;
289f4     14 FB 01 F6 | 	mov	result1, local06
289f8                 | LR__4141
289f8     A7 F0 03 F6 | 	mov	ptra, fp
289fc     B2 00 A0 FD | 	call	#popregs_
28a00                 | _fatfs_cc_create_chain_ret
28a00     2D 00 64 FD | 	ret
28a04                 | 
28a04                 | _fatfs_cc_dir_clear
28a04     06 4A 05 F6 | 	mov	COUNT_, #6
28a08     A8 00 A0 FD | 	call	#pushregs_
28a0c     09 1F 02 F6 | 	mov	local01, arg01
28a10     0A 21 02 F6 | 	mov	local02, arg02
28a14     0F 13 02 F6 | 	mov	arg01, local01
28a18     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
28a20     01 FA 05 56 |  if_ne	mov	result1, #1
28a24     90 00 90 5D |  if_ne	jmp	#LR__4152
28a28     0F 13 02 F6 | 	mov	arg01, local01
28a2c     10 15 02 F6 | 	mov	arg02, local02
28a30     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28a34     FD 22 02 F6 | 	mov	local03, result1
28a38     30 1E 06 F1 | 	add	local01, #48
28a3c     0F 23 62 FC | 	wrlong	local03, local01
28a40     04 1E 06 F1 | 	add	local01, #4
28a44     0F 13 02 F6 | 	mov	arg01, local01
28a48     00 14 06 F6 | 	mov	arg02, #0
28a4c     09 16 C6 F9 | 	decod	arg03, #9
28a50     98 00 A0 FD | 	call	#\builtin_bytefill_
28a54     0F 25 02 F6 | 	mov	local04, local01
28a58                 | ' #line 1667 "ff.c"
28a58                 | ' 	{
28a58                 | ' 		ibuf = fs->win; szb = 1;
28a58                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28a58     00 26 06 F6 | 	mov	local05, #0
28a5c     34 1E 86 F1 | 	sub	local01, #52
28a60                 | LR__4150
28a60     0A 1E 06 F1 | 	add	local01, #10
28a64     0F 29 E2 FA | 	rdword	local06, local01
28a68     0A 1E 86 F1 | 	sub	local01, #10
28a6c     14 27 12 F2 | 	cmp	local05, local06 wc
28a70     2C 00 90 3D |  if_ae	jmp	#LR__4151
28a74     01 1E 06 F1 | 	add	local01, #1
28a78     0F 13 C2 FA | 	rdbyte	arg01, local01
28a7c     01 1E 86 F1 | 	sub	local01, #1
28a80     12 15 02 F6 | 	mov	arg02, local04
28a84     11 17 02 F6 | 	mov	arg03, local03
28a88     13 17 02 F1 | 	add	arg03, local05
28a8c     01 18 06 F6 | 	mov	arg04, #1
28a90     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28a94     00 FA 0D F2 | 	cmp	result1, #0 wz
28a98     01 26 06 A1 |  if_e	add	local05, #1
28a9c     C0 FF 9F AD |  if_e	jmp	#LR__4150
28aa0                 | LR__4151
28aa0                 | ' 	}
28aa0                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28aa0     0A 1E 06 F1 | 	add	local01, #10
28aa4     0F 25 E2 FA | 	rdword	local04, local01
28aa8     12 27 0A F2 | 	cmp	local05, local04 wz
28aac     00 28 06 A6 |  if_e	mov	local06, #0
28ab0     01 28 06 56 |  if_ne	mov	local06, #1
28ab4     14 FB 01 F6 | 	mov	result1, local06
28ab8                 | LR__4152
28ab8     A7 F0 03 F6 | 	mov	ptra, fp
28abc     B2 00 A0 FD | 	call	#popregs_
28ac0                 | _fatfs_cc_dir_clear_ret
28ac0     2D 00 64 FD | 	ret
28ac4                 | 
28ac4                 | _fatfs_cc_dir_sdi
28ac4     06 4A 05 F6 | 	mov	COUNT_, #6
28ac8     A8 00 A0 FD | 	call	#pushregs_
28acc     09 1F 02 F6 | 	mov	local01, arg01
28ad0     0A 21 02 F6 | 	mov	local02, arg02
28ad4     0F 23 02 FB | 	rdlong	local03, local01
28ad8     00 10 00 FF 
28adc     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28ae0     1F 20 CE C7 |  if_b	test	local02, #31 wz
28ae4                 | ' 		return FR_INT_ERR;
28ae4     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28ae8     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4166
28aec     10 1E 06 F1 | 	add	local01, #16
28af0     0F 21 62 FC | 	wrlong	local02, local01
28af4     08 1E 86 F1 | 	sub	local01, #8
28af8     0F 25 0A FB | 	rdlong	local04, local01 wz
28afc     08 1E 86 F1 | 	sub	local01, #8
28b00     11 27 C2 AA |  if_e	rdbyte	local05, local03
28b04     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28b08     28 22 06 21 |  if_nc_and_z	add	local03, #40
28b0c     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28b10     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28b14     00 24 0E F2 | 	cmp	local04, #0 wz
28b18     3C 00 90 5D |  if_ne	jmp	#LR__4160
28b1c     10 27 02 F6 | 	mov	local05, local02
28b20     05 26 46 F0 | 	shr	local05, #5
28b24     08 22 06 F1 | 	add	local03, #8
28b28     11 15 E2 FA | 	rdword	arg02, local03
28b2c     08 22 86 F1 | 	sub	local03, #8
28b30     0A 27 12 F2 | 	cmp	local05, arg02 wc
28b34     02 FA 05 36 |  if_ae	mov	result1, #2
28b38     E4 00 90 3D |  if_ae	jmp	#LR__4166
28b3c     28 22 06 F1 | 	add	local03, #40
28b40     11 27 02 FB | 	rdlong	local05, local03
28b44     28 22 86 F1 | 	sub	local03, #40
28b48     18 1E 06 F1 | 	add	local01, #24
28b4c     0F 27 62 FC | 	wrlong	local05, local01
28b50     18 1E 86 F1 | 	sub	local01, #24
28b54     7C 00 90 FD | 	jmp	#LR__4165
28b58                 | LR__4160
28b58     0A 22 06 F1 | 	add	local03, #10
28b5c     11 29 E2 FA | 	rdword	local06, local03
28b60     0A 22 86 F1 | 	sub	local03, #10
28b64     09 28 66 F0 | 	shl	local06, #9
28b68                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28b68                 | ' 		while (ofs >= csz) {
28b68                 | LR__4161
28b68     14 21 12 F2 | 	cmp	local02, local06 wc
28b6c     4C 00 90 CD |  if_b	jmp	#LR__4164
28b70     0F 13 02 F6 | 	mov	arg01, local01
28b74     12 15 02 F6 | 	mov	arg02, local04
28b78     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28b7c     FD 24 02 F6 | 	mov	local04, result1
28b80     FF FF 7F FF 
28b84     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28b88     01 FA 05 A6 |  if_e	mov	result1, #1
28b8c     90 00 90 AD |  if_e	jmp	#LR__4166
28b90     02 24 16 F2 | 	cmp	local04, #2 wc
28b94     14 00 90 CD |  if_b	jmp	#LR__4162
28b98     18 22 06 F1 | 	add	local03, #24
28b9c     11 27 02 FB | 	rdlong	local05, local03
28ba0     18 22 86 F1 | 	sub	local03, #24
28ba4     13 25 12 F2 | 	cmp	local04, local05 wc
28ba8     08 00 90 CD |  if_b	jmp	#LR__4163
28bac                 | LR__4162
28bac     02 FA 05 F6 | 	mov	result1, #2
28bb0     6C 00 90 FD | 	jmp	#LR__4166
28bb4                 | LR__4163
28bb4     14 21 82 F1 | 	sub	local02, local06
28bb8     AC FF 9F FD | 	jmp	#LR__4161
28bbc                 | LR__4164
28bbc     11 13 02 F6 | 	mov	arg01, local03
28bc0     12 15 02 F6 | 	mov	arg02, local04
28bc4     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28bc8     18 1E 06 F1 | 	add	local01, #24
28bcc     0F FB 61 FC | 	wrlong	result1, local01
28bd0     18 1E 86 F1 | 	sub	local01, #24
28bd4                 | LR__4165
28bd4     14 1E 06 F1 | 	add	local01, #20
28bd8     0F 25 62 FC | 	wrlong	local04, local01
28bdc     04 1E 06 F1 | 	add	local01, #4
28be0     0F 27 0A FB | 	rdlong	local05, local01 wz
28be4     18 1E 86 F1 | 	sub	local01, #24
28be8     02 FA 05 A6 |  if_e	mov	result1, #2
28bec     30 00 90 AD |  if_e	jmp	#LR__4166
28bf0     10 29 02 F6 | 	mov	local06, local02
28bf4     09 28 46 F0 | 	shr	local06, #9
28bf8     18 1E 06 F1 | 	add	local01, #24
28bfc     0F 27 02 FB | 	rdlong	local05, local01
28c00     14 27 02 F1 | 	add	local05, local06
28c04     0F 27 62 FC | 	wrlong	local05, local01
28c08     34 22 06 F1 | 	add	local03, #52
28c0c     FF 21 06 F5 | 	and	local02, #511
28c10     10 23 02 F1 | 	add	local03, local02
28c14     04 1E 06 F1 | 	add	local01, #4
28c18     0F 23 62 FC | 	wrlong	local03, local01
28c1c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28c1c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28c1c                 | ' 
28c1c                 | ' 	return FR_OK;
28c1c     00 FA 05 F6 | 	mov	result1, #0
28c20                 | LR__4166
28c20     A7 F0 03 F6 | 	mov	ptra, fp
28c24     B2 00 A0 FD | 	call	#popregs_
28c28                 | _fatfs_cc_dir_sdi_ret
28c28     2D 00 64 FD | 	ret
28c2c                 | 
28c2c                 | _fatfs_cc_dir_next
28c2c     05 4A 05 F6 | 	mov	COUNT_, #5
28c30     A8 00 A0 FD | 	call	#pushregs_
28c34     09 1F 02 F6 | 	mov	local01, arg01
28c38     0A 21 02 F6 | 	mov	local02, arg02
28c3c     0F 23 02 FB | 	rdlong	local03, local01
28c40     10 1E 06 F1 | 	add	local01, #16
28c44     0F 25 02 FB | 	rdlong	local04, local01
28c48     10 1E 86 F1 | 	sub	local01, #16
28c4c     20 24 06 F1 | 	add	local04, #32
28c50     00 10 00 FF 
28c54     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28c58     18 1E 06 31 |  if_ae	add	local01, #24
28c5c     0F 01 68 3C |  if_ae	wrlong	#0, local01
28c60     18 1E 86 31 |  if_ae	sub	local01, #24
28c64     18 1E 06 F1 | 	add	local01, #24
28c68     0F 15 0A FB | 	rdlong	arg02, local01 wz
28c6c     18 1E 86 F1 | 	sub	local01, #24
28c70     04 FA 05 A6 |  if_e	mov	result1, #4
28c74     64 01 90 AD |  if_e	jmp	#LR__4175
28c78     FF 25 CE F7 | 	test	local04, #511 wz
28c7c     3C 01 90 5D |  if_ne	jmp	#LR__4174
28c80     18 1E 06 F1 | 	add	local01, #24
28c84     0F 15 02 FB | 	rdlong	arg02, local01
28c88     01 14 06 F1 | 	add	arg02, #1
28c8c     0F 15 62 FC | 	wrlong	arg02, local01
28c90     04 1E 86 F1 | 	sub	local01, #4
28c94     0F 15 0A FB | 	rdlong	arg02, local01 wz
28c98     14 1E 86 F1 | 	sub	local01, #20
28c9c     2C 00 90 5D |  if_ne	jmp	#LR__4170
28ca0     12 15 02 F6 | 	mov	arg02, local04
28ca4     05 14 46 F0 | 	shr	arg02, #5
28ca8     08 22 06 F1 | 	add	local03, #8
28cac     11 21 E2 FA | 	rdword	local02, local03
28cb0     08 22 86 F1 | 	sub	local03, #8
28cb4     10 15 12 F2 | 	cmp	arg02, local02 wc
28cb8     18 1E 06 31 |  if_ae	add	local01, #24
28cbc     0F 01 68 3C |  if_ae	wrlong	#0, local01
28cc0                 | ' 				dp->sect = 0; return FR_NO_FILE;
28cc0     04 FA 05 36 |  if_ae	mov	result1, #4
28cc4     14 01 90 3D |  if_ae	jmp	#LR__4175
28cc8     F0 00 90 FD | 	jmp	#LR__4173
28ccc                 | LR__4170
28ccc     12 13 02 F6 | 	mov	arg01, local04
28cd0     09 12 46 F0 | 	shr	arg01, #9
28cd4     0A 22 06 F1 | 	add	local03, #10
28cd8     11 15 E2 FA | 	rdword	arg02, local03
28cdc     0A 22 86 F1 | 	sub	local03, #10
28ce0     01 14 86 F1 | 	sub	arg02, #1
28ce4     0A 13 CA F7 | 	test	arg01, arg02 wz
28ce8     D0 00 90 5D |  if_ne	jmp	#LR__4172
28cec     0F 13 02 F6 | 	mov	arg01, local01
28cf0     14 1E 06 F1 | 	add	local01, #20
28cf4     0F 15 02 FB | 	rdlong	arg02, local01
28cf8     14 1E 86 F1 | 	sub	local01, #20
28cfc     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28d00     FD 26 02 F6 | 	mov	local05, result1
28d04     02 26 16 F2 | 	cmp	local05, #2 wc
28d08     02 FA 05 C6 |  if_b	mov	result1, #2
28d0c     CC 00 90 CD |  if_b	jmp	#LR__4175
28d10     FF FF 7F FF 
28d14     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28d18     01 FA 05 A6 |  if_e	mov	result1, #1
28d1c     BC 00 90 AD |  if_e	jmp	#LR__4175
28d20     18 22 06 F1 | 	add	local03, #24
28d24     11 15 02 FB | 	rdlong	arg02, local03
28d28     18 22 86 F1 | 	sub	local03, #24
28d2c     0A 27 12 F2 | 	cmp	local05, arg02 wc
28d30     68 00 90 CD |  if_b	jmp	#LR__4171
28d34     00 20 0E F2 | 	cmp	local02, #0 wz
28d38     18 1E 06 A1 |  if_e	add	local01, #24
28d3c     0F 01 68 AC |  if_e	wrlong	#0, local01
28d40                 | ' 						dp->sect = 0; return FR_NO_FILE;
28d40     04 FA 05 A6 |  if_e	mov	result1, #4
28d44     94 00 90 AD |  if_e	jmp	#LR__4175
28d48     0F 13 02 F6 | 	mov	arg01, local01
28d4c     14 1E 06 F1 | 	add	local01, #20
28d50     0F 15 02 FB | 	rdlong	arg02, local01
28d54     14 1E 86 F1 | 	sub	local01, #20
28d58     84 FA BF FD | 	call	#_fatfs_cc_create_chain
28d5c     FD 26 0A F6 | 	mov	local05, result1 wz
28d60     07 FA 05 A6 |  if_e	mov	result1, #7
28d64     74 00 90 AD |  if_e	jmp	#LR__4175
28d68     01 26 0E F2 | 	cmp	local05, #1 wz
28d6c     02 FA 05 A6 |  if_e	mov	result1, #2
28d70     68 00 90 AD |  if_e	jmp	#LR__4175
28d74     FF FF 7F FF 
28d78     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28d7c     01 FA 05 A6 |  if_e	mov	result1, #1
28d80     58 00 90 AD |  if_e	jmp	#LR__4175
28d84     13 15 02 F6 | 	mov	arg02, local05
28d88     11 13 02 F6 | 	mov	arg01, local03
28d8c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
28d90     00 FA 0D F2 | 	cmp	result1, #0 wz
28d94     01 FA 05 56 |  if_ne	mov	result1, #1
28d98     40 00 90 5D |  if_ne	jmp	#LR__4175
28d9c                 | LR__4171
28d9c     14 1E 06 F1 | 	add	local01, #20
28da0     0F 27 62 FC | 	wrlong	local05, local01
28da4     11 13 02 F6 | 	mov	arg01, local03
28da8     13 15 02 F6 | 	mov	arg02, local05
28dac     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
28db0     04 1E 06 F1 | 	add	local01, #4
28db4     0F FB 61 FC | 	wrlong	result1, local01
28db8     18 1E 86 F1 | 	sub	local01, #24
28dbc                 | LR__4172
28dbc                 | LR__4173
28dbc                 | LR__4174
28dbc     10 1E 06 F1 | 	add	local01, #16
28dc0     0F 25 62 FC | 	wrlong	local04, local01
28dc4     34 22 06 F1 | 	add	local03, #52
28dc8     FF 25 06 F5 | 	and	local04, #511
28dcc     12 23 02 F1 | 	add	local03, local04
28dd0     0C 1E 06 F1 | 	add	local01, #12
28dd4     0F 23 62 FC | 	wrlong	local03, local01
28dd8                 | ' #line 1771 "ff.c"
28dd8                 | ' 				}
28dd8                 | ' 				dp->clust = clst;
28dd8                 | ' 				dp->sect = clst2sect(fs, clst);
28dd8                 | ' 			}
28dd8                 | ' 		}
28dd8                 | ' 	}
28dd8                 | ' 	dp->dptr = ofs;
28dd8                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
28dd8                 | ' 
28dd8                 | ' 	return FR_OK;
28dd8     00 FA 05 F6 | 	mov	result1, #0
28ddc                 | LR__4175
28ddc     A7 F0 03 F6 | 	mov	ptra, fp
28de0     B2 00 A0 FD | 	call	#popregs_
28de4                 | _fatfs_cc_dir_next_ret
28de4     2D 00 64 FD | 	ret
28de8                 | 
28de8                 | _fatfs_cc_dir_alloc
28de8     08 4A 05 F6 | 	mov	COUNT_, #8
28dec     A8 00 A0 FD | 	call	#pushregs_
28df0     09 1F 02 F6 | 	mov	local01, arg01
28df4     0A 21 02 F6 | 	mov	local02, arg02
28df8     0F 23 02 FB | 	rdlong	local03, local01
28dfc     0F 13 02 F6 | 	mov	arg01, local01
28e00     00 14 06 F6 | 	mov	arg02, #0
28e04     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
28e08     FD 24 0A F6 | 	mov	local04, result1 wz
28e0c     70 00 90 5D |  if_ne	jmp	#LR__4184
28e10     00 26 06 F6 | 	mov	local05, #0
28e14                 | ' 		n = 0;
28e14                 | ' 		do {
28e14                 | LR__4180
28e14     18 1E 06 F1 | 	add	local01, #24
28e18     0F 15 02 FB | 	rdlong	arg02, local01
28e1c     18 1E 86 F1 | 	sub	local01, #24
28e20     11 13 02 F6 | 	mov	arg01, local03
28e24     38 F3 BF FD | 	call	#_fatfs_cc_move_window
28e28     FD 24 0A F6 | 	mov	local04, result1 wz
28e2c     50 00 90 5D |  if_ne	jmp	#LR__4183
28e30     1C 1E 06 F1 | 	add	local01, #28
28e34     0F 29 02 FB | 	rdlong	local06, local01
28e38     1C 1E 86 F1 | 	sub	local01, #28
28e3c     14 29 C2 FA | 	rdbyte	local06, local06
28e40     E5 28 0E F2 | 	cmp	local06, #229 wz
28e44     1C 1E 06 51 |  if_ne	add	local01, #28
28e48     0F 2B 02 5B |  if_ne	rdlong	local07, local01
28e4c     1C 1E 86 51 |  if_ne	sub	local01, #28
28e50     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
28e54     10 00 90 5D |  if_ne	jmp	#LR__4181
28e58     01 26 06 F1 | 	add	local05, #1
28e5c     10 27 0A F2 | 	cmp	local05, local02 wz
28e60     1C 00 90 AD |  if_e	jmp	#LR__4183
28e64     04 00 90 FD | 	jmp	#LR__4182
28e68                 | LR__4181
28e68     00 26 06 F6 | 	mov	local05, #0
28e6c                 | LR__4182
28e6c     0F 13 02 F6 | 	mov	arg01, local01
28e70     01 14 06 F6 | 	mov	arg02, #1
28e74     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
28e78     FD 24 0A F6 | 	mov	local04, result1 wz
28e7c     94 FF 9F AD |  if_e	jmp	#LR__4180
28e80                 | LR__4183
28e80                 | LR__4184
28e80     04 24 0E F2 | 	cmp	local04, #4 wz
28e84     07 24 06 A6 |  if_e	mov	local04, #7
28e88                 | ' 	return res;
28e88     12 FB 01 F6 | 	mov	result1, local04
28e8c     A7 F0 03 F6 | 	mov	ptra, fp
28e90     B2 00 A0 FD | 	call	#popregs_
28e94                 | _fatfs_cc_dir_alloc_ret
28e94     2D 00 64 FD | 	ret
28e98                 | 
28e98                 | _fatfs_cc_ld_clust
28e98     09 01 02 F6 | 	mov	_var01, arg01
28e9c     0A 13 02 F6 | 	mov	arg01, arg02
28ea0     1A 12 06 F1 | 	add	arg01, #26
28ea4                 | ' {
28ea4                 | ' 
28ea4                 | ' 	return *((WORD*)ptr);
28ea4     09 FB E1 FA | 	rdword	result1, arg01
28ea8     FD 12 32 F9 | 	getword	arg01, result1, #0
28eac     00 01 C2 FA | 	rdbyte	_var01, _var01
28eb0     03 00 0E F2 | 	cmp	_var01, #3 wz
28eb4     14 14 06 A1 |  if_e	add	arg02, #20
28eb8                 | ' {
28eb8                 | ' 
28eb8                 | ' 	return *((WORD*)ptr);
28eb8     0A FB E1 AA |  if_e	rdword	result1, arg02
28ebc     10 FA 65 A0 |  if_e	shl	result1, #16
28ec0     FD 12 42 A5 |  if_e	or	arg01, result1
28ec4                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
28ec4                 | ' 	}
28ec4                 | ' 
28ec4                 | ' 	return cl;
28ec4     09 FB 01 F6 | 	mov	result1, arg01
28ec8                 | _fatfs_cc_ld_clust_ret
28ec8     2D 00 64 FD | 	ret
28ecc                 | 
28ecc                 | _fatfs_cc_st_clust
28ecc     09 01 02 F6 | 	mov	_var01, arg01
28ed0     0A 13 02 F6 | 	mov	arg01, arg02
28ed4     1A 12 06 F1 | 	add	arg01, #26
28ed8     09 17 52 FC | 	wrword	arg03, arg01
28edc     00 01 C2 FA | 	rdbyte	_var01, _var01
28ee0     03 00 0E F2 | 	cmp	_var01, #3 wz
28ee4     14 14 06 A1 |  if_e	add	arg02, #20
28ee8     10 16 46 A0 |  if_e	shr	arg03, #16
28eec     0A 17 52 AC |  if_e	wrword	arg03, arg02
28ef0                 | _fatfs_cc_st_clust_ret
28ef0     2D 00 64 FD | 	ret
28ef4                 | 
28ef4                 | _fatfs_cc_cmp_lfn
28ef4     07 4A 05 F6 | 	mov	COUNT_, #7
28ef8     A8 00 A0 FD | 	call	#pushregs_
28efc     09 1F 02 F6 | 	mov	local01, arg01
28f00     0A 13 02 F6 | 	mov	arg01, arg02
28f04     1A 12 06 F1 | 	add	arg01, #26
28f08                 | ' {
28f08                 | ' 
28f08                 | ' 	return *((WORD*)ptr);
28f08     09 FB E9 FA | 	rdword	result1, arg01 wz
28f0c     00 FA 05 56 |  if_ne	mov	result1, #0
28f10     E0 00 90 5D |  if_ne	jmp	#LR__4196
28f14     0A 21 C2 FA | 	rdbyte	local02, arg02
28f18     3F 20 06 F5 | 	and	local02, #63
28f1c     01 20 86 F1 | 	sub	local02, #1
28f20     0D 20 06 FD | 	qmul	local02, #13
28f24                 | ' 
28f24                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
28f24                 | ' 
28f24                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
28f24     01 22 06 F6 | 	mov	local03, #1
28f28     00 24 06 F6 | 	mov	local04, #0
28f2c     18 26 62 FD | 	getqx	local05
28f30                 | LR__4190
28f30     0D 24 16 F2 | 	cmp	local04, #13 wc
28f34     9C 00 90 3D |  if_ae	jmp	#LR__4195
28f38     0A 13 02 F6 | 	mov	arg01, arg02
28f3c     12 21 02 F6 | 	mov	local02, local04
28f40     01 00 00 FF 
28f44     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
28f48     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
28f4c     10 21 C2 FA | 	rdbyte	local02, local02
28f50     01 20 06 FA | 	mul	local02, #1
28f54     10 13 02 F1 | 	add	arg01, local02
28f58     01 00 00 FF 
28f5c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
28f60                 | ' {
28f60                 | ' 
28f60                 | ' 	return *((WORD*)ptr);
28f60     09 FB E1 FA | 	rdword	result1, arg01
28f64     FD 28 02 F6 | 	mov	local06, result1
28f68     11 21 02 F6 | 	mov	local02, local03
28f6c     0F 20 4E F7 | 	zerox	local02, #15 wz
28f70     44 00 90 AD |  if_e	jmp	#LR__4193
28f74     00 27 16 F2 | 	cmp	local05, #256 wc
28f78     2C 00 90 3D |  if_ae	jmp	#LR__4191
28f7c     14 13 32 F9 | 	getword	arg01, local06, #0
28f80     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
28f84     FD 20 02 F6 | 	mov	local02, result1
28f88     13 23 02 F6 | 	mov	local03, local05
28f8c     01 22 66 F0 | 	shl	local03, #1
28f90     0F 23 02 F1 | 	add	local03, local01
28f94     11 13 E2 FA | 	rdword	arg01, local03
28f98     01 26 06 F1 | 	add	local05, #1
28f9c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
28fa0     FD 20 0A F2 | 	cmp	local02, result1 wz
28fa4     08 00 90 AD |  if_e	jmp	#LR__4192
28fa8                 | LR__4191
28fa8                 | ' 				return 0;
28fa8     00 FA 05 F6 | 	mov	result1, #0
28fac     44 00 90 FD | 	jmp	#LR__4196
28fb0                 | LR__4192
28fb0     14 23 02 F6 | 	mov	local03, local06
28fb4     14 00 90 FD | 	jmp	#LR__4194
28fb8                 | LR__4193
28fb8     14 29 32 F9 | 	getword	local06, local06, #0
28fbc     7F 00 00 FF 
28fc0     FF 29 0E F2 | 	cmp	local06, ##65535 wz
28fc4     00 FA 05 56 |  if_ne	mov	result1, #0
28fc8     28 00 90 5D |  if_ne	jmp	#LR__4196
28fcc                 | LR__4194
28fcc     01 24 06 F1 | 	add	local04, #1
28fd0     5C FF 9F FD | 	jmp	#LR__4190
28fd4                 | LR__4195
28fd4     0A 21 C2 FA | 	rdbyte	local02, arg02
28fd8     40 20 CE F7 | 	test	local02, #64 wz
28fdc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
28fe0     01 26 66 50 |  if_ne	shl	local05, #1
28fe4     0F 27 02 51 |  if_ne	add	local05, local01
28fe8     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
28fec     00 FA 05 56 |  if_ne	mov	result1, #0
28ff0                 | ' 
28ff0                 | ' 	return 1;
28ff0     01 FA 05 A6 |  if_e	mov	result1, #1
28ff4                 | LR__4196
28ff4     A7 F0 03 F6 | 	mov	ptra, fp
28ff8     B2 00 A0 FD | 	call	#popregs_
28ffc                 | _fatfs_cc_cmp_lfn_ret
28ffc     2D 00 64 FD | 	ret
29000                 | 
29000                 | _fatfs_cc_pick_lfn
29000     09 01 02 F6 | 	mov	_var01, arg01
29004     0A 13 02 F6 | 	mov	arg01, arg02
29008     1A 12 06 F1 | 	add	arg01, #26
2900c                 | ' {
2900c                 | ' 
2900c                 | ' 	return *((WORD*)ptr);
2900c     09 FB E9 FA | 	rdword	result1, arg01 wz
29010     00 FA 05 56 |  if_ne	mov	result1, #0
29014     D4 00 90 5D |  if_ne	jmp	#LR__4205
29018     0A 03 C2 FA | 	rdbyte	_var02, arg02
2901c     40 02 26 F5 | 	andn	_var02, #64
29020     01 02 86 F1 | 	sub	_var02, #1
29024     0D 02 06 FD | 	qmul	_var02, #13
29028                 | ' 
29028                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
29028                 | ' 
29028                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
29028     01 04 06 F6 | 	mov	_var03, #1
2902c     00 06 06 F6 | 	mov	_var04, #0
29030     18 08 62 FD | 	getqx	_var05
29034                 | LR__4200
29034     0D 06 16 F2 | 	cmp	_var04, #13 wc
29038     80 00 90 3D |  if_ae	jmp	#LR__4203
2903c     0A 13 02 F6 | 	mov	arg01, arg02
29040     03 03 02 F6 | 	mov	_var02, _var04
29044     01 00 00 FF 
29048     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2904c     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
29050     01 03 C2 FA | 	rdbyte	_var02, _var02
29054     01 02 06 FA | 	mul	_var02, #1
29058     01 13 02 F1 | 	add	arg01, _var02
2905c     01 00 00 FF 
29060     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29064                 | ' {
29064                 | ' 
29064                 | ' 	return *((WORD*)ptr);
29064     09 FB E1 FA | 	rdword	result1, arg01
29068     FD 0A 02 F6 | 	mov	_var06, result1
2906c     02 03 02 F6 | 	mov	_var02, _var03
29070     0F 02 4E F7 | 	zerox	_var02, #15 wz
29074     28 00 90 AD |  if_e	jmp	#LR__4201
29078     00 09 16 F2 | 	cmp	_var05, #256 wc
2907c     00 FA 05 36 |  if_ae	mov	result1, #0
29080     68 00 90 3D |  if_ae	jmp	#LR__4205
29084     04 03 02 F6 | 	mov	_var02, _var05
29088     01 02 66 F0 | 	shl	_var02, #1
2908c     00 03 02 F1 | 	add	_var02, _var01
29090     05 05 02 F6 | 	mov	_var03, _var06
29094     01 05 52 FC | 	wrword	_var03, _var02
29098     01 08 06 F1 | 	add	_var05, #1
2909c     14 00 90 FD | 	jmp	#LR__4202
290a0                 | LR__4201
290a0     05 0B 32 F9 | 	getword	_var06, _var06, #0
290a4     7F 00 00 FF 
290a8     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
290ac     00 FA 05 56 |  if_ne	mov	result1, #0
290b0     38 00 90 5D |  if_ne	jmp	#LR__4205
290b4                 | LR__4202
290b4     01 06 06 F1 | 	add	_var04, #1
290b8     78 FF 9F FD | 	jmp	#LR__4200
290bc                 | LR__4203
290bc     0A 03 C2 FA | 	rdbyte	_var02, arg02
290c0     40 02 CE F7 | 	test	_var02, #64 wz
290c4     02 0D 02 56 |  if_ne	mov	_var07, _var03
290c8     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
290cc     18 00 90 AD |  if_e	jmp	#LR__4204
290d0     00 09 16 F2 | 	cmp	_var05, #256 wc
290d4     00 FA 05 36 |  if_ae	mov	result1, #0
290d8     10 00 90 3D |  if_ae	jmp	#LR__4205
290dc     01 08 66 F0 | 	shl	_var05, #1
290e0     00 09 02 F1 | 	add	_var05, _var01
290e4     04 01 58 FC | 	wrword	#0, _var05
290e8                 | LR__4204
290e8                 | ' 		lfnbuf[i] = 0;
290e8                 | ' 	}
290e8                 | ' 
290e8                 | ' 	return 1;
290e8     01 FA 05 F6 | 	mov	result1, #1
290ec                 | LR__4205
290ec                 | _fatfs_cc_pick_lfn_ret
290ec     2D 00 64 FD | 	ret
290f0                 | 
290f0                 | _fatfs_cc_put_lfn
290f0     0D 14 06 F1 | 	add	arg02, #13
290f4     0A 19 42 FC | 	wrbyte	arg04, arg02
290f8     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
290fc     01 18 86 F1 | 	sub	arg04, #1
29100     0D 18 06 FD | 	qmul	arg04, #13
29104     09 01 02 F6 | 	mov	_var01, arg01
29108     02 14 86 F1 | 	sub	arg02, #2
2910c     0A 1F 48 FC | 	wrbyte	#15, arg02
29110     01 14 06 F1 | 	add	arg02, #1
29114     0A 01 48 FC | 	wrbyte	#0, arg02
29118     0C 14 86 F1 | 	sub	arg02, #12
2911c     0A 13 02 F6 | 	mov	arg01, arg02
29120     1A 12 06 F1 | 	add	arg01, #26
29124     09 01 58 FC | 	wrword	#0, arg01
29128     00 02 06 F6 | 	mov	_var02, #0
2912c     00 04 06 F6 | 	mov	_var03, #0
29130                 | ' 	BYTE* dir,
29130                 | ' 	BYTE ord,
29130                 | ' 	BYTE sum
29130                 | ' )
29130                 | ' {
29130                 | ' 	UINT i, s;
29130                 | ' 	WCHAR wc;
29130                 | ' 
29130                 | ' 
29130                 | ' 	dir[ 13 ] = sum;
29130                 | ' 	dir[ 11 ] =  0x0F ;
29130                 | ' 	dir[ 12 ] = 0;
29130                 | ' 	st_word(dir +  26 , 0);
29130                 | ' 
29130                 | ' 	i = (ord - 1) * 13;
29130                 | ' 	s = wc = 0;
29130                 | ' 	do {
29130     01 00 00 FF 
29134     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29138     18 06 62 FD | 	getqx	_var04
2913c     97 2A 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
29140                 | LR__4210
29140     01 19 32 F9 | 	getword	arg04, _var02, #0
29144     7F 00 00 FF 
29148     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2914c     03 13 02 56 |  if_ne	mov	arg01, _var04
29150     01 06 06 51 |  if_ne	add	_var04, #1
29154     01 12 66 50 |  if_ne	shl	arg01, #1
29158     00 13 02 51 |  if_ne	add	arg01, _var01
2915c     09 03 E2 5A |  if_ne	rdword	_var02, arg01
29160     0A 13 02 F6 | 	mov	arg01, arg02
29164     02 19 02 F6 | 	mov	arg04, _var03
29168     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2916c     0C 19 C2 FA | 	rdbyte	arg04, arg04
29170     01 18 06 FA | 	mul	arg04, #1
29174     0C 13 02 F1 | 	add	arg01, arg04
29178     09 03 52 FC | 	wrword	_var02, arg01
2917c     01 19 02 F6 | 	mov	arg04, _var02
29180     0F 18 4E F7 | 	zerox	arg04, #15 wz
29184     0F 02 CE A9 |  if_e	bmask	_var02, #15
29188     01 04 06 F1 | 	add	_var03, #1
2918c     0D 04 16 F2 | 	cmp	_var03, #13 wc
29190     AC FF 9F CD |  if_b	jmp	#LR__4210
29194                 | LR__4211
29194     01 00 00 FF 
29198     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2919c     01 03 32 F9 | 	getword	_var02, _var02, #0
291a0     7F 00 00 FF 
291a4     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
291a8     01 06 66 50 |  if_ne	shl	_var04, #1
291ac     00 07 02 51 |  if_ne	add	_var04, _var01
291b0     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
291b4     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
291b8     40 16 46 A5 |  if_e	or	arg03, #64
291bc     0A 17 42 FC | 	wrbyte	arg03, arg02
291c0                 | _fatfs_cc_put_lfn_ret
291c0     2D 00 64 FD | 	ret
291c4                 | 
291c4                 | _fatfs_cc_gen_numname
291c4     08 4A 05 F6 | 	mov	COUNT_, #8
291c8     A8 00 A0 FD | 	call	#pushregs_
291cc     2C F0 07 F1 | 	add	ptra, #44
291d0     09 1F 02 F6 | 	mov	local01, arg01
291d4     0A 21 02 F6 | 	mov	local02, arg02
291d8     0B 23 02 F6 | 	mov	local03, arg03
291dc     0C 25 02 F6 | 	mov	local04, arg04
291e0     0F 13 02 F6 | 	mov	arg01, local01
291e4     10 15 02 F6 | 	mov	arg02, local02
291e8     0B 16 06 F6 | 	mov	arg03, #11
291ec     60 75 BF FD | 	call	#__system____builtin_memmove
291f0     06 24 16 F2 | 	cmp	local04, #6 wc
291f4     48 00 90 CD |  if_b	jmp	#LR__4225
291f8     12 27 02 F6 | 	mov	local05, local04
291fc     97 1E 48 FB | 	callpa	#(@LR__4223-@LR__4220)>>2,fcache_load_ptr_
29200                 | ' 		sreg = seq;
29200                 | ' 		while (*lfn) {
29200                 | LR__4220
29200     11 29 EA FA | 	rdword	local06, local03 wz
29204     34 00 90 AD |  if_e	jmp	#LR__4224
29208     11 2B E2 FA | 	rdword	local07, local03
2920c                 | ' 			wc = *lfn++;
2920c                 | ' 			for (i = 0; i < 16; i++) {
2920c     02 22 06 F1 | 	add	local03, #2
29210     10 12 DC FC | 	rep	@LR__4222, #16
29214                 | LR__4221
29214     01 26 66 F0 | 	shl	local05, #1
29218     15 29 32 F9 | 	getword	local06, local07, #0
2921c     01 28 06 F5 | 	and	local06, #1
29220     14 27 02 F1 | 	add	local05, local06
29224     15 2B 32 F9 | 	getword	local07, local07, #0
29228     01 2A 46 F0 | 	shr	local07, #1
2922c     10 26 2E F4 | 	testbn	local05, #16 wz
29230     88 00 00 5F 
29234     21 26 66 55 |  if_ne	xor	local05, ##69665
29238                 | LR__4222
29238     C4 FF 9F FD | 	jmp	#LR__4220
2923c                 | LR__4223
2923c                 | LR__4224
2923c     13 25 02 F6 | 	mov	local04, local05
29240                 | LR__4225
29240     07 2A 06 F6 | 	mov	local07, #7
29244                 | ' 			}
29244                 | ' 		}
29244                 | ' 		seq = (UINT)sreg;
29244                 | ' 	}
29244                 | ' 
29244                 | ' 
29244                 | ' 	i = 7;
29244                 | ' 	do {
29244     10 4E 05 F1 | 	add	fp, #16
29248     97 1A 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
2924c                 | LR__4226
2924c     12 27 42 F8 | 	getnib	local05, local04, #0
29250     30 26 06 F1 | 	add	local05, #48
29254     04 24 46 F0 | 	shr	local04, #4
29258     13 29 E2 F8 | 	getbyte	local06, local05, #0
2925c     3A 28 16 F2 | 	cmp	local06, #58 wc
29260     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
29264     07 26 06 31 |  if_ae	add	local05, #7
29268     15 29 02 F6 | 	mov	local06, local07
2926c     01 2A 8E F1 | 	sub	local07, #1 wz
29270     A7 28 02 F1 | 	add	local06, fp
29274     14 27 42 FC | 	wrbyte	local05, local06
29278     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
2927c     CC FF 9F 5D |  if_ne	jmp	#LR__4226
29280                 | LR__4227
29280     15 29 02 F6 | 	mov	local06, local07
29284     A7 28 02 F1 | 	add	local06, fp
29288     14 FD 48 FC | 	wrbyte	#126, local06
2928c                 | ' 	ns[i] = '~';
2928c                 | ' 
2928c                 | ' 
2928c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2928c     00 26 06 F6 | 	mov	local05, #0
29290     10 4E 85 F1 | 	sub	fp, #16
29294     97 2A 48 FB | 	callpa	#(@LR__4230-@LR__4228)>>2,fcache_load_ptr_
29298                 | LR__4228
29298     15 27 12 F2 | 	cmp	local05, local07 wc
2929c     4C 00 90 3D |  if_ae	jmp	#LR__4231
292a0     13 29 02 F6 | 	mov	local06, local05
292a4     0F 29 02 F1 | 	add	local06, local01
292a8     14 29 C2 FA | 	rdbyte	local06, local06
292ac     20 28 0E F2 | 	cmp	local06, #32 wz
292b0     38 00 90 AD |  if_e	jmp	#LR__4231
292b4     13 13 02 F6 | 	mov	arg01, local05
292b8     0F 13 02 F1 | 	add	arg01, local01
292bc     09 13 CA FA | 	rdbyte	arg01, arg01 wz
292c0     00 FA 05 56 |  if_ne	mov	result1, #0
292c4                 | ' 
292c4                 | ' 	return 0;
292c4     00 FA 05 A6 |  if_e	mov	result1, #0
292c8     00 FA 0D F2 | 	cmp	result1, #0 wz
292cc     14 00 90 AD |  if_e	jmp	#LR__4229
292d0     15 29 02 F6 | 	mov	local06, local07
292d4     01 28 86 F1 | 	sub	local06, #1
292d8     14 27 0A F2 | 	cmp	local05, local06 wz
292dc     0C 00 90 AD |  if_e	jmp	#LR__4231
292e0     01 26 06 F1 | 	add	local05, #1
292e4                 | LR__4229
292e4     01 26 06 F1 | 	add	local05, #1
292e8     AC FF 9F FD | 	jmp	#LR__4228
292ec                 | LR__4230
292ec                 | LR__4231
292ec     97 20 48 FB | 	callpa	#(@LR__4235-@LR__4232)>>2,fcache_load_ptr_
292f0                 | ' 			j++;
292f0                 | ' 		}
292f0                 | ' 	}
292f0                 | ' 	do {
292f0                 | LR__4232
292f0     13 29 02 F6 | 	mov	local06, local05
292f4     0F 29 02 F1 | 	add	local06, local01
292f8     08 2A 16 F2 | 	cmp	local07, #8 wc
292fc     01 26 06 F1 | 	add	local05, #1
29300     1C 00 90 3D |  if_ae	jmp	#LR__4233
29304     15 25 02 F6 | 	mov	local04, local07
29308     10 4E 05 F1 | 	add	fp, #16
2930c     A7 24 02 F1 | 	add	local04, fp
29310     12 2D C2 FA | 	rdbyte	local08, local04
29314     01 2A 06 F1 | 	add	local07, #1
29318     10 4E 85 F1 | 	sub	fp, #16
2931c     04 00 90 FD | 	jmp	#LR__4234
29320                 | LR__4233
29320     20 2C 06 F6 | 	mov	local08, #32
29324                 | LR__4234
29324     14 2D 42 FC | 	wrbyte	local08, local06
29328     08 26 16 F2 | 	cmp	local05, #8 wc
2932c     C0 FF 9F CD |  if_b	jmp	#LR__4232
29330                 | LR__4235
29330     A7 F0 03 F6 | 	mov	ptra, fp
29334     B2 00 A0 FD | 	call	#popregs_
29338                 | _fatfs_cc_gen_numname_ret
29338     2D 00 64 FD | 	ret
2933c                 | 
2933c                 | _fatfs_cc_sum_sfn
2933c     00 00 06 F6 | 	mov	_var01, #0
29340                 | ' )
29340                 | ' {
29340                 | ' 	BYTE sum = 0;
29340                 | ' 	UINT n = 11;
29340                 | ' 
29340                 | ' 	do {
29340     97 12 48 FB | 	callpa	#(@LR__4242-@LR__4240)>>2,fcache_load_ptr_
29344                 | LR__4240
29344     0B 10 DC FC | 	rep	@LR__4243, #11
29348                 | LR__4241
29348     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2934c     01 FA 45 F0 | 	shr	result1, #1
29350     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
29354     07 00 66 F0 | 	shl	_var01, #7
29358     00 FB 01 F1 | 	add	result1, _var01
2935c     09 01 C2 FA | 	rdbyte	_var01, arg01
29360     FD 00 02 F1 | 	add	_var01, result1
29364     01 12 06 F1 | 	add	arg01, #1
29368                 | LR__4242
29368                 | LR__4243
29368                 | ' 	return sum;
29368     00 FB 01 F6 | 	mov	result1, _var01
2936c                 | _fatfs_cc_sum_sfn_ret
2936c     2D 00 64 FD | 	ret
29370                 | 
29370                 | _fatfs_cc_dir_read
29370     0C 4A 05 F6 | 	mov	COUNT_, #12
29374     A8 00 A0 FD | 	call	#pushregs_
29378     09 1F 02 F6 | 	mov	local01, arg01
2937c     0A 21 02 F6 | 	mov	local02, arg02
29380     04 22 06 F6 | 	mov	local03, #4
29384     0F 25 02 FB | 	rdlong	local04, local01
29388     FF 26 06 F6 | 	mov	local05, #255
2938c     FF 28 06 F6 | 	mov	local06, #255
29390                 | ' )
29390                 | ' {
29390                 | ' 	FRESULT res = FR_NO_FILE;
29390                 | ' 	FATFS *fs = dp->obj.fs;
29390                 | ' 	BYTE attr, b;
29390                 | ' 
29390                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
29390                 | ' 
29390                 | ' 
29390                 | ' 	while (dp->sect) {
29390                 | LR__4250
29390     18 1E 06 F1 | 	add	local01, #24
29394     0F FB 09 FB | 	rdlong	result1, local01 wz
29398     18 1E 86 F1 | 	sub	local01, #24
2939c     AC 01 90 AD |  if_e	jmp	#LR__4260
293a0     18 1E 06 F1 | 	add	local01, #24
293a4     0F 15 02 FB | 	rdlong	arg02, local01
293a8     18 1E 86 F1 | 	sub	local01, #24
293ac     12 13 02 F6 | 	mov	arg01, local04
293b0     AC ED BF FD | 	call	#_fatfs_cc_move_window
293b4     FD 22 0A F6 | 	mov	local03, result1 wz
293b8     90 01 90 5D |  if_ne	jmp	#LR__4260
293bc     1C 1E 06 F1 | 	add	local01, #28
293c0     0F FB 01 FB | 	rdlong	result1, local01
293c4     1C 1E 86 F1 | 	sub	local01, #28
293c8     FD 2A C2 FA | 	rdbyte	local07, result1
293cc     15 FB 01 F6 | 	mov	result1, local07
293d0     07 FA 4D F7 | 	zerox	result1, #7 wz
293d4     04 22 06 A6 |  if_e	mov	local03, #4
293d8                 | ' 			res = FR_NO_FILE; break;
293d8     70 01 90 AD |  if_e	jmp	#LR__4260
293dc     1C 1E 06 F1 | 	add	local01, #28
293e0     0F 2D 02 FB | 	rdlong	local08, local01
293e4     0B 2C 06 F1 | 	add	local08, #11
293e8     16 2F C2 FA | 	rdbyte	local09, local08
293ec     3F 2E 06 F5 | 	and	local09, #63
293f0     16 1E 86 F1 | 	sub	local01, #22
293f4     0F 2F 42 FC | 	wrbyte	local09, local01
293f8     06 1E 86 F1 | 	sub	local01, #6
293fc     15 FB E1 F8 | 	getbyte	result1, local07, #0
29400     E5 FA 0D F2 | 	cmp	result1, #229 wz
29404     15 2D 02 56 |  if_ne	mov	local08, local07
29408     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
2940c     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
29410     1C 00 90 AD |  if_e	jmp	#LR__4251
29414     00 30 06 F6 | 	mov	local10, #0
29418     17 2D E2 F8 | 	getbyte	local08, local09, #0
2941c     20 2C 26 F5 | 	andn	local08, #32
29420     08 2C 0E F2 | 	cmp	local08, #8 wz
29424     01 30 06 A6 |  if_e	mov	local10, #1
29428     10 31 0A F2 | 	cmp	local10, local02 wz
2942c     08 00 90 AD |  if_e	jmp	#LR__4252
29430                 | LR__4251
29430     FF 26 06 F6 | 	mov	local05, #255
29434     00 01 90 FD | 	jmp	#LR__4259
29438                 | LR__4252
29438     17 2F E2 F8 | 	getbyte	local09, local09, #0
2943c     0F 2E 0E F2 | 	cmp	local09, #15 wz
29440     B4 00 90 5D |  if_ne	jmp	#LR__4256
29444     15 33 E2 F8 | 	getbyte	local11, local07, #0
29448     40 32 CE F7 | 	test	local11, #64 wz
2944c     30 00 90 AD |  if_e	jmp	#LR__4253
29450     1C 1E 06 F1 | 	add	local01, #28
29454     0F 33 02 FB | 	rdlong	local11, local01
29458     0D 32 06 F1 | 	add	local11, #13
2945c     19 29 C2 FA | 	rdbyte	local06, local11
29460     15 2B E2 F8 | 	getbyte	local07, local07, #0
29464     BF 2A 06 F5 | 	and	local07, #191
29468     15 27 02 F6 | 	mov	local05, local07
2946c     0C 1E 86 F1 | 	sub	local01, #12
29470     0F 33 02 FB | 	rdlong	local11, local01
29474     1C 1E 06 F1 | 	add	local01, #28
29478     0F 33 62 FC | 	wrlong	local11, local01
2947c     2C 1E 86 F1 | 	sub	local01, #44
29480                 | LR__4253
29480     15 2D E2 F8 | 	getbyte	local08, local07, #0
29484     13 31 E2 F8 | 	getbyte	local10, local05, #0
29488     18 2D 0A F2 | 	cmp	local08, local10 wz
2948c     5C 00 90 5D |  if_ne	jmp	#LR__4254
29490     14 31 E2 F8 | 	getbyte	local10, local06, #0
29494     1C 1E 06 F1 | 	add	local01, #28
29498     0F 2F 02 FB | 	rdlong	local09, local01
2949c     1C 1E 86 F1 | 	sub	local01, #28
294a0     0D 2E 06 F1 | 	add	local09, #13
294a4     17 2D C2 FA | 	rdbyte	local08, local09
294a8     16 2F E2 F8 | 	getbyte	local09, local08, #0
294ac     17 31 0A F2 | 	cmp	local10, local09 wz
294b0     38 00 90 5D |  if_ne	jmp	#LR__4254
294b4     0C 24 06 F1 | 	add	local04, #12
294b8     12 13 02 FB | 	rdlong	arg01, local04
294bc     0C 24 86 F1 | 	sub	local04, #12
294c0     1C 1E 06 F1 | 	add	local01, #28
294c4     0F 35 02 FB | 	rdlong	local12, local01
294c8     1C 1E 86 F1 | 	sub	local01, #28
294cc     1A 15 02 F6 | 	mov	arg02, local12
294d0     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
294d4     00 FA 4D F2 | 	cmps	result1, #0 wz
294d8     13 35 02 56 |  if_ne	mov	local12, local05
294dc     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
294e0     01 34 86 51 |  if_ne	sub	local12, #1
294e4     1A 33 02 56 |  if_ne	mov	local11, local12
294e8     04 00 90 5D |  if_ne	jmp	#LR__4255
294ec                 | LR__4254
294ec     FF 32 06 F6 | 	mov	local11, #255
294f0                 | LR__4255
294f0     19 27 02 F6 | 	mov	local05, local11
294f4     40 00 90 FD | 	jmp	#LR__4258
294f8                 | LR__4256
294f8     13 33 02 F6 | 	mov	local11, local05
294fc     07 32 4E F7 | 	zerox	local11, #7 wz
29500     20 00 90 5D |  if_ne	jmp	#LR__4257
29504     14 29 E2 F8 | 	getbyte	local06, local06, #0
29508     1C 1E 06 F1 | 	add	local01, #28
2950c     0F 13 02 FB | 	rdlong	arg01, local01
29510     1C 1E 86 F1 | 	sub	local01, #28
29514     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
29518     FD FA E1 F8 | 	getbyte	result1, result1, #0
2951c     FD 28 0A F2 | 	cmp	local06, result1 wz
29520     28 00 90 AD |  if_e	jmp	#LR__4260
29524                 | LR__4257
29524     2C 1E 06 F1 | 	add	local01, #44
29528     FF FF FF FF 
2952c     0F FF 6B FC | 	wrlong	##-1, local01
29530     2C 1E 86 F1 | 	sub	local01, #44
29534                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
29534                 | ' 					}
29534                 | ' 					break;
29534     14 00 90 FD | 	jmp	#LR__4260
29538                 | LR__4258
29538                 | LR__4259
29538     0F 13 02 F6 | 	mov	arg01, local01
2953c     00 14 06 F6 | 	mov	arg02, #0
29540     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
29544     FD 22 0A F6 | 	mov	local03, result1 wz
29548     44 FE 9F AD |  if_e	jmp	#LR__4250
2954c                 | LR__4260
2954c     00 22 0E F2 | 	cmp	local03, #0 wz
29550     18 1E 06 51 |  if_ne	add	local01, #24
29554     0F 01 68 5C |  if_ne	wrlong	#0, local01
29558                 | ' 	return res;
29558     11 FB 01 F6 | 	mov	result1, local03
2955c     A7 F0 03 F6 | 	mov	ptra, fp
29560     B2 00 A0 FD | 	call	#popregs_
29564                 | _fatfs_cc_dir_read_ret
29564     2D 00 64 FD | 	ret
29568                 | 
29568                 | _fatfs_cc_dir_find
29568     0B 4A 05 F6 | 	mov	COUNT_, #11
2956c     A8 00 A0 FD | 	call	#pushregs_
29570     09 1F 02 F6 | 	mov	local01, arg01
29574     0F 21 02 FB | 	rdlong	local02, local01
29578     0F 13 02 F6 | 	mov	arg01, local01
2957c     00 14 06 F6 | 	mov	arg02, #0
29580     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
29584     00 FA 0D F2 | 	cmp	result1, #0 wz
29588     18 02 90 5D |  if_ne	jmp	#LR__4282
2958c     FF 22 06 F6 | 	mov	local03, #255
29590     FF 24 06 F6 | 	mov	local04, #255
29594     2C 1E 06 F1 | 	add	local01, #44
29598     FF FF FF FF 
2959c     0F FF 6B FC | 	wrlong	##-1, local01
295a0     2C 1E 86 F1 | 	sub	local01, #44
295a4                 | ' #line 2404 "ff.c"
295a4                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
295a4                 | ' 
295a4                 | ' 	do {
295a4                 | LR__4270
295a4     18 1E 06 F1 | 	add	local01, #24
295a8     0F 15 02 FB | 	rdlong	arg02, local01
295ac     18 1E 86 F1 | 	sub	local01, #24
295b0     10 13 02 F6 | 	mov	arg01, local02
295b4     A8 EB BF FD | 	call	#_fatfs_cc_move_window
295b8     FD 26 0A F6 | 	mov	local05, result1 wz
295bc     E0 01 90 5D |  if_ne	jmp	#LR__4281
295c0     1C 1E 06 F1 | 	add	local01, #28
295c4     0F 17 02 FB | 	rdlong	arg03, local01
295c8     1C 1E 86 F1 | 	sub	local01, #28
295cc     0B 29 C2 FA | 	rdbyte	local06, arg03
295d0     14 17 02 F6 | 	mov	arg03, local06
295d4     07 16 4E F7 | 	zerox	arg03, #7 wz
295d8     04 26 06 A6 |  if_e	mov	local05, #4
295dc     C0 01 90 AD |  if_e	jmp	#LR__4281
295e0     1C 1E 06 F1 | 	add	local01, #28
295e4     0F 2B 02 FB | 	rdlong	local07, local01
295e8     15 17 02 F6 | 	mov	arg03, local07
295ec     0B 16 06 F1 | 	add	arg03, #11
295f0     0B 2D C2 FA | 	rdbyte	local08, arg03
295f4     3F 2C 06 F5 | 	and	local08, #63
295f8     16 1E 86 F1 | 	sub	local01, #22
295fc     0F 2D 42 FC | 	wrbyte	local08, local01
29600     06 1E 86 F1 | 	sub	local01, #6
29604     14 17 E2 F8 | 	getbyte	arg03, local06, #0
29608     E5 16 0E F2 | 	cmp	arg03, #229 wz
2960c     18 00 90 AD |  if_e	jmp	#LR__4271
29610     16 17 E2 F8 | 	getbyte	arg03, local08, #0
29614     08 16 CE F7 | 	test	arg03, #8 wz
29618     16 2B 02 56 |  if_ne	mov	local07, local08
2961c     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
29620     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
29624     18 00 90 AD |  if_e	jmp	#LR__4272
29628                 | LR__4271
29628     FF 24 06 F6 | 	mov	local04, #255
2962c     2C 1E 06 F1 | 	add	local01, #44
29630     FF FF FF FF 
29634     0F FF 6B FC | 	wrlong	##-1, local01
29638     2C 1E 86 F1 | 	sub	local01, #44
2963c     4C 01 90 FD | 	jmp	#LR__4280
29640                 | LR__4272
29640     16 2D E2 F8 | 	getbyte	local08, local08, #0
29644     0F 2C 0E F2 | 	cmp	local08, #15 wz
29648     C8 00 90 5D |  if_ne	jmp	#LR__4276
2964c     2B 1E 06 F1 | 	add	local01, #43
29650     0F 2D C2 FA | 	rdbyte	local08, local01
29654     2B 1E 86 F1 | 	sub	local01, #43
29658     40 2C CE F7 | 	test	local08, #64 wz
2965c     2C 01 90 5D |  if_ne	jmp	#LR__4279
29660     14 2F E2 F8 | 	getbyte	local09, local06, #0
29664     40 2E CE F7 | 	test	local09, #64 wz
29668     30 00 90 AD |  if_e	jmp	#LR__4273
2966c     1C 1E 06 F1 | 	add	local01, #28
29670     0F 2F 02 FB | 	rdlong	local09, local01
29674     0D 2E 06 F1 | 	add	local09, #13
29678     17 23 C2 FA | 	rdbyte	local03, local09
2967c     14 29 E2 F8 | 	getbyte	local06, local06, #0
29680     BF 28 06 F5 | 	and	local06, #191
29684     14 25 02 F6 | 	mov	local04, local06
29688     0C 1E 86 F1 | 	sub	local01, #12
2968c     0F 2F 02 FB | 	rdlong	local09, local01
29690     1C 1E 06 F1 | 	add	local01, #28
29694     0F 2F 62 FC | 	wrlong	local09, local01
29698     2C 1E 86 F1 | 	sub	local01, #44
2969c                 | LR__4273
2969c     14 31 E2 F8 | 	getbyte	local10, local06, #0
296a0     12 2B E2 F8 | 	getbyte	local07, local04, #0
296a4     15 31 0A F2 | 	cmp	local10, local07 wz
296a8     5C 00 90 5D |  if_ne	jmp	#LR__4274
296ac     11 2D E2 F8 | 	getbyte	local08, local03, #0
296b0     1C 1E 06 F1 | 	add	local01, #28
296b4     0F 2B 02 FB | 	rdlong	local07, local01
296b8     1C 1E 86 F1 | 	sub	local01, #28
296bc     0D 2A 06 F1 | 	add	local07, #13
296c0     15 29 C2 FA | 	rdbyte	local06, local07
296c4     14 2B E2 F8 | 	getbyte	local07, local06, #0
296c8     15 2D 0A F2 | 	cmp	local08, local07 wz
296cc     38 00 90 5D |  if_ne	jmp	#LR__4274
296d0     0C 20 06 F1 | 	add	local02, #12
296d4     10 13 02 FB | 	rdlong	arg01, local02
296d8     0C 20 86 F1 | 	sub	local02, #12
296dc     1C 1E 06 F1 | 	add	local01, #28
296e0     0F 33 02 FB | 	rdlong	local11, local01
296e4     1C 1E 86 F1 | 	sub	local01, #28
296e8     19 15 02 F6 | 	mov	arg02, local11
296ec     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
296f0     00 FA 4D F2 | 	cmps	result1, #0 wz
296f4     12 33 02 56 |  if_ne	mov	local11, local04
296f8     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
296fc     01 32 86 51 |  if_ne	sub	local11, #1
29700     19 2F 02 56 |  if_ne	mov	local09, local11
29704     04 00 90 5D |  if_ne	jmp	#LR__4275
29708                 | LR__4274
29708     FF 2E 06 F6 | 	mov	local09, #255
2970c                 | LR__4275
2970c     17 25 02 F6 | 	mov	local04, local09
29710     78 00 90 FD | 	jmp	#LR__4279
29714                 | LR__4276
29714     12 2F 02 F6 | 	mov	local09, local04
29718     07 2E 4E F7 | 	zerox	local09, #7 wz
2971c     20 00 90 5D |  if_ne	jmp	#LR__4277
29720     11 31 E2 F8 | 	getbyte	local10, local03, #0
29724     1C 1E 06 F1 | 	add	local01, #28
29728     0F 13 02 FB | 	rdlong	arg01, local01
2972c     1C 1E 86 F1 | 	sub	local01, #28
29730     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
29734     FD FA E1 F8 | 	getbyte	result1, result1, #0
29738     FD 30 0A F2 | 	cmp	local10, result1 wz
2973c     60 00 90 AD |  if_e	jmp	#LR__4281
29740                 | LR__4277
29740     2B 1E 06 F1 | 	add	local01, #43
29744     0F 2F C2 FA | 	rdbyte	local09, local01
29748     2B 1E 86 F1 | 	sub	local01, #43
2974c     01 2E CE F7 | 	test	local09, #1 wz
29750     24 00 90 5D |  if_ne	jmp	#LR__4278
29754     1C 1E 06 F1 | 	add	local01, #28
29758     0F 13 02 FB | 	rdlong	arg01, local01
2975c     04 1E 06 F1 | 	add	local01, #4
29760     0F 15 02 F6 | 	mov	arg02, local01
29764     20 1E 86 F1 | 	sub	local01, #32
29768     0B 16 06 F6 | 	mov	arg03, #11
2976c     88 DA BF FD | 	call	#_fatfs_cc_memcmp
29770     00 FA 0D F2 | 	cmp	result1, #0 wz
29774     28 00 90 AD |  if_e	jmp	#LR__4281
29778                 | LR__4278
29778     FF 24 06 F6 | 	mov	local04, #255
2977c     2C 1E 06 F1 | 	add	local01, #44
29780     FF FF FF FF 
29784     0F FF 6B FC | 	wrlong	##-1, local01
29788     2C 1E 86 F1 | 	sub	local01, #44
2978c                 | LR__4279
2978c                 | LR__4280
2978c     0F 13 02 F6 | 	mov	arg01, local01
29790     00 14 06 F6 | 	mov	arg02, #0
29794     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
29798     FD 26 0A F6 | 	mov	local05, result1 wz
2979c     04 FE 9F AD |  if_e	jmp	#LR__4270
297a0                 | LR__4281
297a0                 | ' 
297a0                 | ' 	return res;
297a0     13 FB 01 F6 | 	mov	result1, local05
297a4                 | LR__4282
297a4     A7 F0 03 F6 | 	mov	ptra, fp
297a8     B2 00 A0 FD | 	call	#popregs_
297ac                 | _fatfs_cc_dir_find_ret
297ac     2D 00 64 FD | 	ret
297b0                 | 
297b0                 | _fatfs_cc_dir_register
297b0     0A 4A 05 F6 | 	mov	COUNT_, #10
297b4     A8 00 A0 FD | 	call	#pushregs_
297b8     2C F0 07 F1 | 	add	ptra, #44
297bc     04 4E 05 F1 | 	add	fp, #4
297c0     A7 12 62 FC | 	wrlong	arg01, fp
297c4     09 1F 02 FB | 	rdlong	local01, arg01
297c8     08 4E 05 F1 | 	add	fp, #8
297cc     A7 1E 62 FC | 	wrlong	local01, fp
297d0     08 4E 85 F1 | 	sub	fp, #8
297d4     A7 20 02 FB | 	rdlong	local02, fp
297d8     04 4E 85 F1 | 	sub	fp, #4
297dc     2B 20 06 F1 | 	add	local02, #43
297e0     10 21 C2 FA | 	rdbyte	local02, local02
297e4     A0 20 CE F7 | 	test	local02, #160 wz
297e8     06 FA 05 56 |  if_ne	mov	result1, #6
297ec     F8 03 90 5D |  if_ne	jmp	#LR__4305
297f0                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
297f0     14 4E 05 F1 | 	add	fp, #20
297f4     A7 00 68 FC | 	wrlong	#0, fp
297f8     14 4E 85 F1 | 	sub	fp, #20
297fc     97 28 48 FB | 	callpa	#(@LR__4291-@LR__4290)>>2,fcache_load_ptr_
29800                 | LR__4290
29800     0C 4E 05 F1 | 	add	fp, #12
29804     A7 20 02 FB | 	rdlong	local02, fp
29808     0C 20 06 F1 | 	add	local02, #12
2980c     10 23 02 FB | 	rdlong	local03, local02
29810     08 4E 05 F1 | 	add	fp, #8
29814     A7 24 02 FB | 	rdlong	local04, fp
29818     14 4E 85 F1 | 	sub	fp, #20
2981c     01 24 66 F0 | 	shl	local04, #1
29820     11 25 02 F1 | 	add	local04, local03
29824     12 21 EA FA | 	rdword	local02, local04 wz
29828     24 00 90 AD |  if_e	jmp	#LR__4292
2982c     14 4E 05 F1 | 	add	fp, #20
29830     A7 26 02 FB | 	rdlong	local05, fp
29834     13 29 02 F6 | 	mov	local06, local05
29838     13 2B 02 F6 | 	mov	local07, local05
2983c     15 2D 02 F6 | 	mov	local08, local07
29840     01 2C 06 F1 | 	add	local08, #1
29844     A7 2C 62 FC | 	wrlong	local08, fp
29848     14 4E 85 F1 | 	sub	fp, #20
2984c     B0 FF 9F FD | 	jmp	#LR__4290
29850                 | LR__4291
29850                 | LR__4292
29850     1C 4E 05 F1 | 	add	fp, #28
29854     A7 12 02 F6 | 	mov	arg01, fp
29858     18 4E 85 F1 | 	sub	fp, #24
2985c     A7 14 02 FB | 	rdlong	arg02, fp
29860     04 4E 85 F1 | 	sub	fp, #4
29864     20 14 06 F1 | 	add	arg02, #32
29868     0C 16 06 F6 | 	mov	arg03, #12
2986c     E0 6E BF FD | 	call	#__system____builtin_memmove
29870     27 4E 05 F1 | 	add	fp, #39
29874     A7 2E C2 FA | 	rdbyte	local09, fp
29878     27 4E 85 F1 | 	sub	fp, #39
2987c     01 2E CE F7 | 	test	local09, #1 wz
29880     F4 00 90 AD |  if_e	jmp	#LR__4295
29884     04 4E 05 F1 | 	add	fp, #4
29888     A7 30 02 FB | 	rdlong	local10, fp
2988c     2B 30 06 F1 | 	add	local10, #43
29890     18 81 48 FC | 	wrbyte	#64, local10
29894                 | ' 		dp->fn[ 11 ] =  0x40 ;
29894                 | ' 		for (n = 1; n < 100; n++) {
29894     0C 4E 05 F1 | 	add	fp, #12
29898     A7 02 68 FC | 	wrlong	#1, fp
2989c     10 4E 85 F1 | 	sub	fp, #16
298a0                 | LR__4293
298a0     10 4E 05 F1 | 	add	fp, #16
298a4     A7 20 02 FB | 	rdlong	local02, fp
298a8     10 4E 85 F1 | 	sub	fp, #16
298ac     64 20 16 F2 | 	cmp	local02, #100 wc
298b0     70 00 90 3D |  if_ae	jmp	#LR__4294
298b4     04 4E 05 F1 | 	add	fp, #4
298b8     A7 12 02 FB | 	rdlong	arg01, fp
298bc     20 12 06 F1 | 	add	arg01, #32
298c0     18 4E 05 F1 | 	add	fp, #24
298c4     A7 14 02 F6 | 	mov	arg02, fp
298c8     10 4E 85 F1 | 	sub	fp, #16
298cc     A7 30 02 FB | 	rdlong	local10, fp
298d0     0C 30 06 F1 | 	add	local10, #12
298d4     18 17 02 FB | 	rdlong	arg03, local10
298d8     04 4E 05 F1 | 	add	fp, #4
298dc     A7 18 02 FB | 	rdlong	arg04, fp
298e0     10 4E 85 F1 | 	sub	fp, #16
298e4     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
298e8     04 4E 05 F1 | 	add	fp, #4
298ec     A7 12 02 FB | 	rdlong	arg01, fp
298f0     04 4E 85 F1 | 	sub	fp, #4
298f4     70 FC BF FD | 	call	#_fatfs_cc_dir_find
298f8     08 4E 05 F1 | 	add	fp, #8
298fc     A7 FA 61 FC | 	wrlong	result1, fp
29900     00 FA 4D F2 | 	cmps	result1, #0 wz
29904     08 4E 85 F1 | 	sub	fp, #8
29908     18 00 90 5D |  if_ne	jmp	#LR__4294
2990c     10 4E 05 F1 | 	add	fp, #16
29910     A7 30 02 FB | 	rdlong	local10, fp
29914     01 30 06 F1 | 	add	local10, #1
29918     A7 30 62 FC | 	wrlong	local10, fp
2991c     10 4E 85 F1 | 	sub	fp, #16
29920     7C FF 9F FD | 	jmp	#LR__4293
29924                 | LR__4294
29924     10 4E 05 F1 | 	add	fp, #16
29928     A7 30 02 FB | 	rdlong	local10, fp
2992c     10 4E 85 F1 | 	sub	fp, #16
29930     64 30 0E F2 | 	cmp	local10, #100 wz
29934     07 FA 05 A6 |  if_e	mov	result1, #7
29938     AC 02 90 AD |  if_e	jmp	#LR__4305
2993c     08 4E 05 F1 | 	add	fp, #8
29940     A7 30 02 FB | 	rdlong	local10, fp
29944     08 4E 85 F1 | 	sub	fp, #8
29948     04 30 0E F2 | 	cmp	local10, #4 wz
2994c     08 4E 05 51 |  if_ne	add	fp, #8
29950     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29954     08 4E 85 51 |  if_ne	sub	fp, #8
29958     8C 02 90 5D |  if_ne	jmp	#LR__4305
2995c     04 4E 05 F1 | 	add	fp, #4
29960     A7 30 02 FB | 	rdlong	local10, fp
29964     23 4E 05 F1 | 	add	fp, #35
29968     A7 1E C2 FA | 	rdbyte	local01, fp
2996c     27 4E 85 F1 | 	sub	fp, #39
29970     2B 30 06 F1 | 	add	local10, #43
29974     18 1F 42 FC | 	wrbyte	local01, local10
29978                 | LR__4295
29978     27 4E 05 F1 | 	add	fp, #39
2997c     A7 20 C2 FA | 	rdbyte	local02, fp
29980     27 4E 85 F1 | 	sub	fp, #39
29984     02 20 CE F7 | 	test	local02, #2 wz
29988     20 00 90 AD |  if_e	jmp	#LR__4296
2998c     14 4E 05 F1 | 	add	fp, #20
29990     A7 30 02 FB | 	rdlong	local10, fp
29994     0C 30 06 F1 | 	add	local10, #12
29998     0D 30 16 FD | 	qdiv	local10, #13
2999c     14 4E 85 F1 | 	sub	fp, #20
299a0     18 30 62 FD | 	getqx	local10
299a4     01 30 06 F1 | 	add	local10, #1
299a8     04 00 90 FD | 	jmp	#LR__4297
299ac                 | LR__4296
299ac     01 30 06 F6 | 	mov	local10, #1
299b0                 | LR__4297
299b0     18 4E 05 F1 | 	add	fp, #24
299b4     A7 30 62 FC | 	wrlong	local10, fp
299b8     14 4E 85 F1 | 	sub	fp, #20
299bc     A7 12 02 FB | 	rdlong	arg01, fp
299c0     18 15 02 F6 | 	mov	arg02, local10
299c4     04 4E 85 F1 | 	sub	fp, #4
299c8     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
299cc     08 4E 05 F1 | 	add	fp, #8
299d0     A7 FA 61 FC | 	wrlong	result1, fp
299d4     08 4E 85 F1 | 	sub	fp, #8
299d8     00 FA 0D F2 | 	cmp	result1, #0 wz
299dc     38 01 90 5D |  if_ne	jmp	#LR__4302
299e0     18 4E 05 F1 | 	add	fp, #24
299e4     A7 30 02 FB | 	rdlong	local10, fp
299e8     01 30 8E F1 | 	sub	local10, #1 wz
299ec     A7 30 62 FC | 	wrlong	local10, fp
299f0     18 4E 85 F1 | 	sub	fp, #24
299f4     20 01 90 AD |  if_e	jmp	#LR__4302
299f8     04 4E 05 F1 | 	add	fp, #4
299fc     A7 30 02 FB | 	rdlong	local10, fp
29a00     18 13 02 F6 | 	mov	arg01, local10
29a04     14 4E 05 F1 | 	add	fp, #20
29a08     A7 18 02 FB | 	rdlong	arg04, fp
29a0c     18 4E 85 F1 | 	sub	fp, #24
29a10     05 18 66 F0 | 	shl	arg04, #5
29a14     10 30 06 F1 | 	add	local10, #16
29a18     18 15 02 FB | 	rdlong	arg02, local10
29a1c     0C 15 82 F1 | 	sub	arg02, arg04
29a20     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29a24     08 4E 05 F1 | 	add	fp, #8
29a28     A7 FA 61 FC | 	wrlong	result1, fp
29a2c     08 4E 85 F1 | 	sub	fp, #8
29a30     00 FA 0D F2 | 	cmp	result1, #0 wz
29a34     E0 00 90 5D |  if_ne	jmp	#LR__4301
29a38     04 4E 05 F1 | 	add	fp, #4
29a3c     A7 12 02 FB | 	rdlong	arg01, fp
29a40     04 4E 85 F1 | 	sub	fp, #4
29a44     20 12 06 F1 | 	add	arg01, #32
29a48     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29a4c     FD 30 02 F6 | 	mov	local10, result1
29a50     28 4E 05 F1 | 	add	fp, #40
29a54     A7 30 42 FC | 	wrbyte	local10, fp
29a58     28 4E 85 F1 | 	sub	fp, #40
29a5c                 | ' 			sum = sum_sfn(dp->fn);
29a5c                 | ' 			do {
29a5c                 | LR__4298
29a5c     0C 4E 05 F1 | 	add	fp, #12
29a60     A7 12 02 FB | 	rdlong	arg01, fp
29a64     08 4E 85 F1 | 	sub	fp, #8
29a68     A7 1E 02 FB | 	rdlong	local01, fp
29a6c     04 4E 85 F1 | 	sub	fp, #4
29a70     18 1E 06 F1 | 	add	local01, #24
29a74     0F 15 02 FB | 	rdlong	arg02, local01
29a78     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29a7c     08 4E 05 F1 | 	add	fp, #8
29a80     A7 FA 61 FC | 	wrlong	result1, fp
29a84     00 FA 4D F2 | 	cmps	result1, #0 wz
29a88     08 4E 85 F1 | 	sub	fp, #8
29a8c     88 00 90 5D |  if_ne	jmp	#LR__4300
29a90     0C 4E 05 F1 | 	add	fp, #12
29a94     A7 20 02 FB | 	rdlong	local02, fp
29a98     0C 20 06 F1 | 	add	local02, #12
29a9c     10 13 02 FB | 	rdlong	arg01, local02
29aa0     08 4E 85 F1 | 	sub	fp, #8
29aa4     A7 1E 02 FB | 	rdlong	local01, fp
29aa8     1C 1E 06 F1 | 	add	local01, #28
29aac     0F 15 02 FB | 	rdlong	arg02, local01
29ab0     14 4E 05 F1 | 	add	fp, #20
29ab4     A7 16 02 FB | 	rdlong	arg03, fp
29ab8     10 4E 05 F1 | 	add	fp, #16
29abc     A7 18 C2 FA | 	rdbyte	arg04, fp
29ac0     28 4E 85 F1 | 	sub	fp, #40
29ac4     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29ac8     0C 4E 05 F1 | 	add	fp, #12
29acc     A7 30 02 FB | 	rdlong	local10, fp
29ad0     03 30 06 F1 | 	add	local10, #3
29ad4     18 03 48 FC | 	wrbyte	#1, local10
29ad8     08 4E 85 F1 | 	sub	fp, #8
29adc     A7 12 02 FB | 	rdlong	arg01, fp
29ae0     04 4E 85 F1 | 	sub	fp, #4
29ae4     00 14 06 F6 | 	mov	arg02, #0
29ae8     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29aec     08 4E 05 F1 | 	add	fp, #8
29af0     A7 FA 61 FC | 	wrlong	result1, fp
29af4     00 FA 4D F2 | 	cmps	result1, #0 wz
29af8     08 4E 85 F1 | 	sub	fp, #8
29afc     18 00 90 5D |  if_ne	jmp	#LR__4299
29b00     18 4E 05 F1 | 	add	fp, #24
29b04     A7 30 02 FB | 	rdlong	local10, fp
29b08     01 30 8E F1 | 	sub	local10, #1 wz
29b0c     A7 30 62 FC | 	wrlong	local10, fp
29b10     18 4E 85 F1 | 	sub	fp, #24
29b14     44 FF 9F 5D |  if_ne	jmp	#LR__4298
29b18                 | LR__4299
29b18                 | LR__4300
29b18                 | LR__4301
29b18                 | LR__4302
29b18     08 4E 05 F1 | 	add	fp, #8
29b1c     A7 30 0A FB | 	rdlong	local10, fp wz
29b20     08 4E 85 F1 | 	sub	fp, #8
29b24     B4 00 90 5D |  if_ne	jmp	#LR__4304
29b28     0C 4E 05 F1 | 	add	fp, #12
29b2c     A7 12 02 FB | 	rdlong	arg01, fp
29b30     08 4E 85 F1 | 	sub	fp, #8
29b34     A7 1E 02 FB | 	rdlong	local01, fp
29b38     04 4E 85 F1 | 	sub	fp, #4
29b3c     18 1E 06 F1 | 	add	local01, #24
29b40     0F 15 02 FB | 	rdlong	arg02, local01
29b44     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29b48     08 4E 05 F1 | 	add	fp, #8
29b4c     A7 FA 61 FC | 	wrlong	result1, fp
29b50     08 4E 85 F1 | 	sub	fp, #8
29b54     00 FA 0D F2 | 	cmp	result1, #0 wz
29b58     80 00 90 5D |  if_ne	jmp	#LR__4303
29b5c     04 4E 05 F1 | 	add	fp, #4
29b60     A7 20 02 FB | 	rdlong	local02, fp
29b64     04 4E 85 F1 | 	sub	fp, #4
29b68     1C 20 06 F1 | 	add	local02, #28
29b6c     10 13 02 FB | 	rdlong	arg01, local02
29b70     00 14 06 F6 | 	mov	arg02, #0
29b74     20 16 06 F6 | 	mov	arg03, #32
29b78     98 00 A0 FD | 	call	#\builtin_bytefill_
29b7c     04 4E 05 F1 | 	add	fp, #4
29b80     A7 14 02 FB | 	rdlong	arg02, fp
29b84     0A 1F 02 F6 | 	mov	local01, arg02
29b88     1C 1E 06 F1 | 	add	local01, #28
29b8c     0F 13 02 FB | 	rdlong	arg01, local01
29b90     04 4E 85 F1 | 	sub	fp, #4
29b94     20 14 06 F1 | 	add	arg02, #32
29b98     0B 16 06 F6 | 	mov	arg03, #11
29b9c     B0 6B BF FD | 	call	#__system____builtin_memmove
29ba0     04 4E 05 F1 | 	add	fp, #4
29ba4     A7 2E 02 FB | 	rdlong	local09, fp
29ba8     17 31 02 F6 | 	mov	local10, local09
29bac     1C 30 06 F1 | 	add	local10, #28
29bb0     18 1F 02 FB | 	rdlong	local01, local10
29bb4     2B 2E 06 F1 | 	add	local09, #43
29bb8     17 31 C2 FA | 	rdbyte	local10, local09
29bbc     18 30 06 F5 | 	and	local10, #24
29bc0     0C 1E 06 F1 | 	add	local01, #12
29bc4     0F 31 42 FC | 	wrbyte	local10, local01
29bc8     08 4E 05 F1 | 	add	fp, #8
29bcc     A7 30 02 FB | 	rdlong	local10, fp
29bd0     0C 4E 85 F1 | 	sub	fp, #12
29bd4     03 30 06 F1 | 	add	local10, #3
29bd8     18 03 48 FC | 	wrbyte	#1, local10
29bdc                 | LR__4303
29bdc                 | LR__4304
29bdc                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29bdc                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29bdc                 | ' 
29bdc                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29bdc                 | ' 
29bdc                 | ' 			fs->wflag = 1;
29bdc                 | ' 		}
29bdc                 | ' 	}
29bdc                 | ' 
29bdc                 | ' 	return res;
29bdc     08 4E 05 F1 | 	add	fp, #8
29be0     A7 FA 01 FB | 	rdlong	result1, fp
29be4     08 4E 85 F1 | 	sub	fp, #8
29be8                 | LR__4305
29be8     A7 F0 03 F6 | 	mov	ptra, fp
29bec     B2 00 A0 FD | 	call	#popregs_
29bf0                 | _fatfs_cc_dir_register_ret
29bf0     2D 00 64 FD | 	ret
29bf4                 | 
29bf4                 | _fatfs_cc_dir_remove
29bf4     05 4A 05 F6 | 	mov	COUNT_, #5
29bf8     A8 00 A0 FD | 	call	#pushregs_
29bfc     09 1F 02 F6 | 	mov	local01, arg01
29c00     0F 21 02 FB | 	rdlong	local02, local01
29c04     10 1E 06 F1 | 	add	local01, #16
29c08     0F 23 02 FB | 	rdlong	local03, local01
29c0c     1C 1E 06 F1 | 	add	local01, #28
29c10     0F 15 02 FB | 	rdlong	arg02, local01
29c14     2C 1E 86 F1 | 	sub	local01, #44
29c18     FF FF 7F FF 
29c1c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29c20     00 24 06 A6 |  if_e	mov	local04, #0
29c24     18 00 90 AD |  if_e	jmp	#LR__4310
29c28     0F 13 02 F6 | 	mov	arg01, local01
29c2c     2C 1E 06 F1 | 	add	local01, #44
29c30     0F 15 02 FB | 	rdlong	arg02, local01
29c34     2C 1E 86 F1 | 	sub	local01, #44
29c38     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29c3c     FD 24 02 F6 | 	mov	local04, result1
29c40                 | LR__4310
29c40     12 27 0A F6 | 	mov	local05, local04 wz
29c44     64 00 90 5D |  if_ne	jmp	#LR__4313
29c48                 | ' 		do {
29c48                 | LR__4311
29c48     18 1E 06 F1 | 	add	local01, #24
29c4c     0F 15 02 FB | 	rdlong	arg02, local01
29c50     18 1E 86 F1 | 	sub	local01, #24
29c54     10 13 02 F6 | 	mov	arg01, local02
29c58     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29c5c     FD 26 0A F6 | 	mov	local05, result1 wz
29c60     40 00 90 5D |  if_ne	jmp	#LR__4312
29c64     1C 1E 06 F1 | 	add	local01, #28
29c68     0F 25 02 FB | 	rdlong	local04, local01
29c6c     12 CB 49 FC | 	wrbyte	#229, local04
29c70     03 20 06 F1 | 	add	local02, #3
29c74     10 03 48 FC | 	wrbyte	#1, local02
29c78     03 20 86 F1 | 	sub	local02, #3
29c7c     0C 1E 86 F1 | 	sub	local01, #12
29c80     0F 25 02 FB | 	rdlong	local04, local01
29c84     10 1E 86 F1 | 	sub	local01, #16
29c88     11 25 12 F2 | 	cmp	local04, local03 wc
29c8c     14 00 90 3D |  if_ae	jmp	#LR__4312
29c90     0F 13 02 F6 | 	mov	arg01, local01
29c94     00 14 06 F6 | 	mov	arg02, #0
29c98     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29c9c     FD 26 0A F6 | 	mov	local05, result1 wz
29ca0     A4 FF 9F AD |  if_e	jmp	#LR__4311
29ca4                 | LR__4312
29ca4     04 26 0E F2 | 	cmp	local05, #4 wz
29ca8     02 26 06 A6 |  if_e	mov	local05, #2
29cac                 | LR__4313
29cac                 | ' 	}
29cac                 | ' #line 2590 "ff.c"
29cac                 | ' 	return res;
29cac     13 FB 01 F6 | 	mov	result1, local05
29cb0     A7 F0 03 F6 | 	mov	ptra, fp
29cb4     B2 00 A0 FD | 	call	#popregs_
29cb8                 | _fatfs_cc_dir_remove_ret
29cb8     2D 00 64 FD | 	ret
29cbc                 | 
29cbc                 | _fatfs_cc_get_fileinfo
29cbc     0F 4A 05 F6 | 	mov	COUNT_, #15
29cc0     A8 00 A0 FD | 	call	#pushregs_
29cc4     09 1F 02 F6 | 	mov	local01, arg01
29cc8     0A 21 02 F6 | 	mov	local02, arg02
29ccc     0F 23 02 FB | 	rdlong	local03, local01
29cd0     1C 20 06 F1 | 	add	local02, #28
29cd4     10 01 48 FC | 	wrbyte	#0, local02
29cd8     1C 20 86 F1 | 	sub	local02, #28
29cdc     18 1E 06 F1 | 	add	local01, #24
29ce0     0F 25 0A FB | 	rdlong	local04, local01 wz
29ce4     18 1E 86 F1 | 	sub	local01, #24
29ce8     90 03 90 AD |  if_e	jmp	#LR__4334
29cec     2C 1E 06 F1 | 	add	local01, #44
29cf0     0F 25 02 FB | 	rdlong	local04, local01
29cf4     2C 1E 86 F1 | 	sub	local01, #44
29cf8     FF FF 7F FF 
29cfc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29d00     D8 00 90 AD |  if_e	jmp	#LR__4323
29d04     00 26 06 F6 | 	mov	local05, #0
29d08     00 28 06 F6 | 	mov	local06, #0
29d0c     00 2A 06 F6 | 	mov	local07, #0
29d10                 | ' 			si = di = 0;
29d10                 | ' 			hs = 0;
29d10                 | ' 			while (fs->lfnbuf[si] != 0) {
29d10                 | LR__4320
29d10     0C 22 06 F1 | 	add	local03, #12
29d14     11 25 02 FB | 	rdlong	local04, local03
29d18     0C 22 86 F1 | 	sub	local03, #12
29d1c     14 2D 02 F6 | 	mov	local08, local06
29d20     01 2C 66 F0 | 	shl	local08, #1
29d24     12 2D 02 F1 | 	add	local08, local04
29d28     16 25 EA FA | 	rdword	local04, local08 wz
29d2c     90 00 90 AD |  if_e	jmp	#LR__4322
29d30     0C 22 06 F1 | 	add	local03, #12
29d34     11 2F 02 FB | 	rdlong	local09, local03
29d38     0C 22 86 F1 | 	sub	local03, #12
29d3c     14 31 02 F6 | 	mov	local10, local06
29d40     01 30 66 F0 | 	shl	local10, #1
29d44     17 31 02 F1 | 	add	local10, local09
29d48     18 33 E2 FA | 	rdword	local11, local10
29d4c     15 25 02 F6 | 	mov	local04, local07
29d50     0F 24 4E F7 | 	zerox	local04, #15 wz
29d54     01 28 06 F1 | 	add	local06, #1
29d58     24 00 90 5D |  if_ne	jmp	#LR__4321
29d5c     19 35 32 F9 | 	getword	local12, local11, #0
29d60     6C 00 00 FF 
29d64     00 34 16 F2 | 	cmp	local12, ##55296 wc
29d68     14 00 90 CD |  if_b	jmp	#LR__4321
29d6c     19 37 32 F9 | 	getword	local13, local11, #0
29d70     70 00 00 FF 
29d74     00 36 16 F2 | 	cmp	local13, ##57344 wc
29d78     19 2B 02 C6 |  if_b	mov	local07, local11
29d7c                 | ' 					hs = wc; continue;
29d7c     90 FF 9F CD |  if_b	jmp	#LR__4320
29d80                 | LR__4321
29d80     15 13 32 F9 | 	getword	arg01, local07, #0
29d84     10 12 66 F0 | 	shl	arg01, #16
29d88     19 33 32 F9 | 	getword	local11, local11, #0
29d8c     19 13 42 F5 | 	or	arg01, local11
29d90     13 15 02 F6 | 	mov	arg02, local05
29d94     1C 20 06 F1 | 	add	local02, #28
29d98     10 15 02 F1 | 	add	arg02, local02
29d9c     FF 16 06 F6 | 	mov	arg03, #255
29da0     13 17 82 F1 | 	sub	arg03, local05
29da4     1C 20 86 F1 | 	sub	local02, #28
29da8     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
29dac     FD 38 0A F6 | 	mov	local14, result1 wz
29db0     00 26 06 A6 |  if_e	mov	local05, #0
29db4     1C 27 02 51 |  if_ne	add	local05, local14
29db8     00 2A 06 56 |  if_ne	mov	local07, #0
29dbc     50 FF 9F 5D |  if_ne	jmp	#LR__4320
29dc0                 | LR__4322
29dc0     15 25 02 F6 | 	mov	local04, local07
29dc4     0F 24 4E F7 | 	zerox	local04, #15 wz
29dc8     00 26 06 56 |  if_ne	mov	local05, #0
29dcc     1C 20 06 F1 | 	add	local02, #28
29dd0     10 27 02 F1 | 	add	local05, local02
29dd4     13 01 48 FC | 	wrbyte	#0, local05
29dd8     1C 20 86 F1 | 	sub	local02, #28
29ddc                 | LR__4323
29ddc     00 26 06 F6 | 	mov	local05, #0
29de0     00 28 06 F6 | 	mov	local06, #0
29de4                 | ' 			fno->fname[di] = 0;
29de4                 | ' 		}
29de4                 | ' 	}
29de4                 | ' 
29de4                 | ' 	si = di = 0;
29de4                 | ' 	while (si < 11) {
29de4                 | LR__4324
29de4     0B 28 16 F2 | 	cmp	local06, #11 wc
29de8     20 01 90 3D |  if_ae	jmp	#LR__4327
29dec     1C 1E 06 F1 | 	add	local01, #28
29df0     0F 2F 02 FB | 	rdlong	local09, local01
29df4     1C 1E 86 F1 | 	sub	local01, #28
29df8     14 31 02 F6 | 	mov	local10, local06
29dfc     17 31 02 F1 | 	add	local10, local09
29e00     18 33 C2 FA | 	rdbyte	local11, local10
29e04     19 25 32 F9 | 	getword	local04, local11, #0
29e08     20 24 0E F2 | 	cmp	local04, #32 wz
29e0c     01 28 06 F1 | 	add	local06, #1
29e10     D0 FF 9F AD |  if_e	jmp	#LR__4324
29e14     19 25 32 F9 | 	getword	local04, local11, #0
29e18     05 24 0E F2 | 	cmp	local04, #5 wz
29e1c     E5 32 06 A6 |  if_e	mov	local11, #229
29e20     09 28 0E F2 | 	cmp	local06, #9 wz
29e24     20 00 90 5D |  if_ne	jmp	#LR__4325
29e28     0C 26 16 F2 | 	cmp	local05, #12 wc
29e2c     18 00 90 3D |  if_ae	jmp	#LR__4325
29e30     13 37 02 F6 | 	mov	local13, local05
29e34     0C 20 06 F1 | 	add	local02, #12
29e38     10 37 02 F1 | 	add	local13, local02
29e3c     1B 5D 48 FC | 	wrbyte	#46, local13
29e40     01 26 06 F1 | 	add	local05, #1
29e44     0C 20 86 F1 | 	sub	local02, #12
29e48                 | LR__4325
29e48     19 13 32 F9 | 	getword	arg01, local11, #0
29e4c     07 12 4E F7 | 	zerox	arg01, #7 wz
29e50     00 FA 05 56 |  if_ne	mov	result1, #0
29e54                 | ' 
29e54                 | ' 	return 0;
29e54     00 FA 05 A6 |  if_e	mov	result1, #0
29e58     00 FA 0D F2 | 	cmp	result1, #0 wz
29e5c     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
29e60     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
29e64     50 00 90 AD |  if_e	jmp	#LR__4326
29e68     1C 1E 06 F1 | 	add	local01, #28
29e6c     0F 31 02 FB | 	rdlong	local10, local01
29e70     1C 1E 86 F1 | 	sub	local01, #28
29e74     14 2D 02 F6 | 	mov	local08, local06
29e78     18 2D 02 F1 | 	add	local08, local10
29e7c     16 13 CA FA | 	rdbyte	arg01, local08 wz
29e80     00 FA 05 56 |  if_ne	mov	result1, #0
29e84                 | ' 
29e84                 | ' 	return 0;
29e84     00 FA 05 A6 |  if_e	mov	result1, #0
29e88     00 FA 0D F2 | 	cmp	result1, #0 wz
29e8c     28 00 90 AD |  if_e	jmp	#LR__4326
29e90     19 33 32 F9 | 	getword	local11, local11, #0
29e94     08 32 66 F0 | 	shl	local11, #8
29e98     1C 1E 06 F1 | 	add	local01, #28
29e9c     0F 39 02 FB | 	rdlong	local14, local01
29ea0     1C 1E 86 F1 | 	sub	local01, #28
29ea4     14 2F 02 F6 | 	mov	local09, local06
29ea8     1C 2F 02 F1 | 	add	local09, local14
29eac     17 35 C2 FA | 	rdbyte	local12, local09
29eb0     1A 33 42 F5 | 	or	local11, local12
29eb4     01 28 06 F1 | 	add	local06, #1
29eb8                 | LR__4326
29eb8     19 13 02 F6 | 	mov	arg01, local11
29ebc     01 00 00 FF 
29ec0     52 15 06 F6 | 	mov	arg02, ##850
29ec4     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
29ec8     FD 32 02 F6 | 	mov	local11, result1
29ecc     19 25 02 F6 | 	mov	local04, local11
29ed0     0F 24 4E F7 | 	zerox	local04, #15 wz
29ed4     00 26 06 A6 |  if_e	mov	local05, #0
29ed8     30 00 90 AD |  if_e	jmp	#LR__4327
29edc     19 13 32 F9 | 	getword	arg01, local11, #0
29ee0     13 15 02 F6 | 	mov	arg02, local05
29ee4     0C 20 06 F1 | 	add	local02, #12
29ee8     10 15 02 F1 | 	add	arg02, local02
29eec     0C 16 06 F6 | 	mov	arg03, #12
29ef0     13 17 82 F1 | 	sub	arg03, local05
29ef4     0C 20 86 F1 | 	sub	local02, #12
29ef8     EC DF BF FD | 	call	#_fatfs_cc_put_utf
29efc     FD 38 0A F6 | 	mov	local14, result1 wz
29f00     00 26 06 A6 |  if_e	mov	local05, #0
29f04     1C 27 02 51 |  if_ne	add	local05, local14
29f08     D8 FE 9F 5D |  if_ne	jmp	#LR__4324
29f0c                 | LR__4327
29f0c     13 25 02 F6 | 	mov	local04, local05
29f10     0C 20 06 F1 | 	add	local02, #12
29f14     10 25 02 F1 | 	add	local04, local02
29f18     12 01 48 FC | 	wrbyte	#0, local04
29f1c     10 20 06 F1 | 	add	local02, #16
29f20     10 25 CA FA | 	rdbyte	local04, local02 wz
29f24     1C 20 86 F1 | 	sub	local02, #28
29f28     F8 00 90 5D |  if_ne	jmp	#LR__4333
29f2c     00 26 0E F2 | 	cmp	local05, #0 wz
29f30     1C 00 90 5D |  if_ne	jmp	#LR__4328
29f34     13 37 02 F6 | 	mov	local13, local05
29f38     1C 20 06 F1 | 	add	local02, #28
29f3c     10 37 02 F1 | 	add	local13, local02
29f40     1B 7F 48 FC | 	wrbyte	#63, local13
29f44     01 26 06 F1 | 	add	local05, #1
29f48     1C 20 86 F1 | 	sub	local02, #28
29f4c     A4 00 90 FD | 	jmp	#LR__4332
29f50                 | LR__4328
29f50                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
29f50     00 26 06 F6 | 	mov	local05, #0
29f54     00 28 06 F6 | 	mov	local06, #0
29f58     08 3A 06 F6 | 	mov	local15, #8
29f5c                 | LR__4329
29f5c     14 25 02 F6 | 	mov	local04, local06
29f60     0C 20 06 F1 | 	add	local02, #12
29f64     10 25 02 F1 | 	add	local04, local02
29f68     12 37 CA FA | 	rdbyte	local13, local04 wz
29f6c     0C 20 86 F1 | 	sub	local02, #12
29f70     80 00 90 AD |  if_e	jmp	#LR__4331
29f74     14 2D 02 F6 | 	mov	local08, local06
29f78     0C 20 06 F1 | 	add	local02, #12
29f7c     10 2D 02 F1 | 	add	local08, local02
29f80     16 33 C2 FA | 	rdbyte	local11, local08
29f84     19 39 32 F9 | 	getword	local14, local11, #0
29f88     2E 38 0E F2 | 	cmp	local14, #46 wz
29f8c     0C 20 86 F1 | 	sub	local02, #12
29f90     10 3A 06 A6 |  if_e	mov	local15, #16
29f94     19 39 32 F9 | 	getword	local14, local11, #0
29f98     41 38 16 F2 | 	cmp	local14, #65 wc
29f9c     30 00 90 CD |  if_b	jmp	#LR__4330
29fa0     19 2D 32 F9 | 	getword	local08, local11, #0
29fa4     5B 2C 16 F2 | 	cmp	local08, #91 wc
29fa8     24 00 90 3D |  if_ae	jmp	#LR__4330
29fac     1C 1E 06 F1 | 	add	local01, #28
29fb0     0F 2F 02 FB | 	rdlong	local09, local01
29fb4     1C 1E 86 F1 | 	sub	local01, #28
29fb8     0C 2E 06 F1 | 	add	local09, #12
29fbc     17 31 C2 FA | 	rdbyte	local10, local09
29fc0     1D 39 E2 F8 | 	getbyte	local14, local15, #0
29fc4     1C 31 CA F7 | 	test	local10, local14 wz
29fc8     19 33 32 59 |  if_ne	getword	local11, local11, #0
29fcc     20 32 06 51 |  if_ne	add	local11, #32
29fd0                 | LR__4330
29fd0     13 39 02 F6 | 	mov	local14, local05
29fd4     1C 20 06 F1 | 	add	local02, #28
29fd8     10 39 02 F1 | 	add	local14, local02
29fdc     19 33 32 F9 | 	getword	local11, local11, #0
29fe0     1C 33 42 FC | 	wrbyte	local11, local14
29fe4     01 28 06 F1 | 	add	local06, #1
29fe8     01 26 06 F1 | 	add	local05, #1
29fec     1C 20 86 F1 | 	sub	local02, #28
29ff0     68 FF 9F FD | 	jmp	#LR__4329
29ff4                 | LR__4331
29ff4                 | LR__4332
29ff4     1C 20 06 F1 | 	add	local02, #28
29ff8     10 27 02 F1 | 	add	local05, local02
29ffc     13 01 48 FC | 	wrbyte	#0, local05
2a000     1C 1E 06 F1 | 	add	local01, #28
2a004     0F 25 02 FB | 	rdlong	local04, local01
2a008     1C 1E 86 F1 | 	sub	local01, #28
2a00c     0C 24 06 F1 | 	add	local04, #12
2a010     12 37 CA FA | 	rdbyte	local13, local04 wz
2a014     1C 20 86 F1 | 	sub	local02, #28
2a018     0C 20 06 A1 |  if_e	add	local02, #12
2a01c     10 01 48 AC |  if_e	wrbyte	#0, local02
2a020     0C 20 86 A1 |  if_e	sub	local02, #12
2a024                 | LR__4333
2a024     1C 1E 06 F1 | 	add	local01, #28
2a028     0F 35 02 FB | 	rdlong	local12, local01
2a02c     0B 34 06 F1 | 	add	local12, #11
2a030     1A 25 C2 FA | 	rdbyte	local04, local12
2a034     3F 24 06 F5 | 	and	local04, #63
2a038     08 20 06 F1 | 	add	local02, #8
2a03c     10 25 42 FC | 	wrbyte	local04, local02
2a040     08 20 86 F1 | 	sub	local02, #8
2a044     0F 13 02 FB | 	rdlong	arg01, local01
2a048     1C 12 06 F1 | 	add	arg01, #28
2a04c                 | ' {
2a04c                 | ' 
2a04c                 | ' 	return *((DWORD*)ptr);
2a04c     09 FB 01 FB | 	rdlong	result1, arg01
2a050     10 FB 61 FC | 	wrlong	result1, local02
2a054     0F 13 02 FB | 	rdlong	arg01, local01
2a058     16 12 06 F1 | 	add	arg01, #22
2a05c                 | ' {
2a05c                 | ' 
2a05c                 | ' 	return *((WORD*)ptr);
2a05c     09 FB E1 FA | 	rdword	result1, arg01
2a060     06 20 06 F1 | 	add	local02, #6
2a064     10 FB 51 FC | 	wrword	result1, local02
2a068     0F 13 02 FB | 	rdlong	arg01, local01
2a06c     18 12 06 F1 | 	add	arg01, #24
2a070                 | ' {
2a070                 | ' 
2a070                 | ' 	return *((WORD*)ptr);
2a070     09 FB E1 FA | 	rdword	result1, arg01
2a074     02 20 86 F1 | 	sub	local02, #2
2a078     10 FB 51 FC | 	wrword	result1, local02
2a07c                 | LR__4334
2a07c     A7 F0 03 F6 | 	mov	ptra, fp
2a080     B2 00 A0 FD | 	call	#popregs_
2a084                 | _fatfs_cc_get_fileinfo_ret
2a084     2D 00 64 FD | 	ret
2a088                 | 
2a088                 | _fatfs_cc_create_name
2a088     0D 4A 05 F6 | 	mov	COUNT_, #13
2a08c     A8 00 A0 FD | 	call	#pushregs_
2a090     34 F0 07 F1 | 	add	ptra, #52
2a094     04 4E 05 F1 | 	add	fp, #4
2a098     A7 12 62 FC | 	wrlong	arg01, fp
2a09c     04 4E 05 F1 | 	add	fp, #4
2a0a0     A7 14 62 FC | 	wrlong	arg02, fp
2a0a4     0A FB 01 FB | 	rdlong	result1, arg02
2a0a8     28 4E 05 F1 | 	add	fp, #40
2a0ac     A7 FA 61 FC | 	wrlong	result1, fp
2a0b0     2C 4E 85 F1 | 	sub	fp, #44
2a0b4     A7 FA 01 FB | 	rdlong	result1, fp
2a0b8     FD 1E 02 FB | 	rdlong	local01, result1
2a0bc     0C 1E 06 F1 | 	add	local01, #12
2a0c0     0F 21 02 FB | 	rdlong	local02, local01
2a0c4     14 4E 05 F1 | 	add	fp, #20
2a0c8     A7 20 62 FC | 	wrlong	local02, fp
2a0cc     14 4E 05 F1 | 	add	fp, #20
2a0d0     A7 00 68 FC | 	wrlong	#0, fp
2a0d4     2C 4E 85 F1 | 	sub	fp, #44
2a0d8                 | ' 
2a0d8                 | ' 
2a0d8                 | ' 
2a0d8                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a0d8                 | ' 	for (;;) {
2a0d8                 | LR__4340
2a0d8     30 4E 05 F1 | 	add	fp, #48
2a0dc     A7 12 02 F6 | 	mov	arg01, fp
2a0e0     30 4E 85 F1 | 	sub	fp, #48
2a0e4     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a0e8     1C 4E 05 F1 | 	add	fp, #28
2a0ec     A7 FA 61 FC | 	wrlong	result1, fp
2a0f0     1C 4E 85 F1 | 	sub	fp, #28
2a0f4     FF FF 7F FF 
2a0f8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a0fc     06 FA 05 A6 |  if_e	mov	result1, #6
2a100     74 08 90 AD |  if_e	jmp	#LR__4380
2a104     1C 4E 05 F1 | 	add	fp, #28
2a108     A7 1E 02 FB | 	rdlong	local01, fp
2a10c     1C 4E 85 F1 | 	sub	fp, #28
2a110     80 00 00 FF 
2a114     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a118     3C 00 90 CD |  if_b	jmp	#LR__4341
2a11c     18 4E 05 F1 | 	add	fp, #24
2a120     A7 22 02 FB | 	rdlong	local03, fp
2a124     14 4E 05 F1 | 	add	fp, #20
2a128     A7 1E 02 FB | 	rdlong	local01, fp
2a12c     0F 25 02 F6 | 	mov	local04, local01
2a130     01 24 06 F1 | 	add	local04, #1
2a134     A7 24 62 FC | 	wrlong	local04, fp
2a138     01 1E 66 F0 | 	shl	local01, #1
2a13c     11 1F 02 F1 | 	add	local01, local03
2a140     10 4E 85 F1 | 	sub	fp, #16
2a144     A7 26 02 FB | 	rdlong	local05, fp
2a148     1C 4E 85 F1 | 	sub	fp, #28
2a14c     13 29 02 F6 | 	mov	local06, local05
2a150     10 28 46 F0 | 	shr	local06, #16
2a154     0F 29 52 FC | 	wrword	local06, local01
2a158                 | LR__4341
2a158     1C 4E 05 F1 | 	add	fp, #28
2a15c     A7 1E 02 FB | 	rdlong	local01, fp
2a160     08 4E 85 F1 | 	sub	fp, #8
2a164     A7 1E 52 FC | 	wrword	local01, fp
2a168     A7 1E E2 FA | 	rdword	local01, fp
2a16c     14 4E 85 F1 | 	sub	fp, #20
2a170     20 1E 16 F2 | 	cmp	local01, #32 wc
2a174     B0 00 90 CD |  if_b	jmp	#LR__4343
2a178     14 4E 05 F1 | 	add	fp, #20
2a17c     A7 1E E2 FA | 	rdword	local01, fp
2a180     14 4E 85 F1 | 	sub	fp, #20
2a184     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a188     14 4E 05 51 |  if_ne	add	fp, #20
2a18c     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a190     14 4E 85 51 |  if_ne	sub	fp, #20
2a194     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a198     8C 00 90 AD |  if_e	jmp	#LR__4343
2a19c     14 4E 05 F1 | 	add	fp, #20
2a1a0     A7 12 E2 FA | 	rdword	arg01, fp
2a1a4     14 4E 85 F1 | 	sub	fp, #20
2a1a8     80 12 16 F2 | 	cmp	arg01, #128 wc
2a1ac     24 00 90 3D |  if_ae	jmp	#LR__4342
2a1b0     80 01 00 FF 
2a1b4     EC 12 06 F6 | 	mov	arg01, ##@LR__5002
2a1b8     14 4E 05 F1 | 	add	fp, #20
2a1bc     A7 14 E2 FA | 	rdword	arg02, fp
2a1c0     14 4E 85 F1 | 	sub	fp, #20
2a1c4     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a1c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a1cc     06 FA 05 56 |  if_ne	mov	result1, #6
2a1d0     A4 07 90 5D |  if_ne	jmp	#LR__4380
2a1d4                 | LR__4342
2a1d4     2C 4E 05 F1 | 	add	fp, #44
2a1d8     A7 28 02 FB | 	rdlong	local06, fp
2a1dc     2C 4E 85 F1 | 	sub	fp, #44
2a1e0     FF 28 16 F2 | 	cmp	local06, #255 wc
2a1e4     06 FA 05 36 |  if_ae	mov	result1, #6
2a1e8     8C 07 90 3D |  if_ae	jmp	#LR__4380
2a1ec     18 4E 05 F1 | 	add	fp, #24
2a1f0     A7 22 02 FB | 	rdlong	local03, fp
2a1f4     14 4E 05 F1 | 	add	fp, #20
2a1f8     A7 20 02 FB | 	rdlong	local02, fp
2a1fc     10 25 02 F6 | 	mov	local04, local02
2a200     01 24 06 F1 | 	add	local04, #1
2a204     A7 24 62 FC | 	wrlong	local04, fp
2a208     10 1F 02 F6 | 	mov	local01, local02
2a20c     01 1E 66 F0 | 	shl	local01, #1
2a210     11 1F 02 F1 | 	add	local01, local03
2a214     18 4E 85 F1 | 	sub	fp, #24
2a218     A7 28 E2 FA | 	rdword	local06, fp
2a21c     14 4E 85 F1 | 	sub	fp, #20
2a220     0F 29 52 FC | 	wrword	local06, local01
2a224     B0 FE 9F FD | 	jmp	#LR__4340
2a228                 | LR__4343
2a228     14 4E 05 F1 | 	add	fp, #20
2a22c     A7 2A E2 FA | 	rdword	local07, fp
2a230     14 4E 85 F1 | 	sub	fp, #20
2a234     20 2A 16 F2 | 	cmp	local07, #32 wc
2a238     10 4E 05 C1 |  if_b	add	fp, #16
2a23c     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a240     10 4E 85 C1 |  if_b	sub	fp, #16
2a244     74 00 90 CD |  if_b	jmp	#LR__4348
2a248     97 24 48 FB | 	callpa	#(@LR__4346-@LR__4344)>>2,fcache_load_ptr_
2a24c                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a24c                 | LR__4344
2a24c     30 4E 05 F1 | 	add	fp, #48
2a250     A7 24 02 FB | 	rdlong	local04, fp
2a254     30 4E 85 F1 | 	sub	fp, #48
2a258     12 2B C2 FA | 	rdbyte	local07, local04
2a25c     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a260     18 00 90 AD |  if_e	jmp	#LR__4345
2a264     30 4E 05 F1 | 	add	fp, #48
2a268     A7 24 02 FB | 	rdlong	local04, fp
2a26c     30 4E 85 F1 | 	sub	fp, #48
2a270     12 21 C2 FA | 	rdbyte	local02, local04
2a274     5C 20 0E F2 | 	cmp	local02, #92 wz
2a278     18 00 90 5D |  if_ne	jmp	#LR__4347
2a27c                 | LR__4345
2a27c     30 4E 05 F1 | 	add	fp, #48
2a280     A7 1E 02 FB | 	rdlong	local01, fp
2a284     01 1E 06 F1 | 	add	local01, #1
2a288     A7 1E 62 FC | 	wrlong	local01, fp
2a28c     30 4E 85 F1 | 	sub	fp, #48
2a290     B8 FF 9F FD | 	jmp	#LR__4344
2a294                 | LR__4346
2a294                 | LR__4347
2a294     10 4E 05 F1 | 	add	fp, #16
2a298     A7 00 48 FC | 	wrbyte	#0, fp
2a29c     20 4E 05 F1 | 	add	fp, #32
2a2a0     A7 28 02 FB | 	rdlong	local06, fp
2a2a4     30 4E 85 F1 | 	sub	fp, #48
2a2a8     14 2B C2 FA | 	rdbyte	local07, local06
2a2ac     20 2A 16 F2 | 	cmp	local07, #32 wc
2a2b0     10 4E 05 C1 |  if_b	add	fp, #16
2a2b4     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a2b8     10 4E 85 C1 |  if_b	sub	fp, #16
2a2bc                 | LR__4348
2a2bc     08 4E 05 F1 | 	add	fp, #8
2a2c0     A7 2A 02 FB | 	rdlong	local07, fp
2a2c4     28 4E 05 F1 | 	add	fp, #40
2a2c8     A7 1E 02 FB | 	rdlong	local01, fp
2a2cc     30 4E 85 F1 | 	sub	fp, #48
2a2d0     15 1F 62 FC | 	wrlong	local01, local07
2a2d4     97 38 48 FB | 	callpa	#(@LR__4350-@LR__4349)>>2,fcache_load_ptr_
2a2d8                 | ' 	}
2a2d8                 | ' 	*path = p;
2a2d8                 | ' #line 2862 "ff.c"
2a2d8                 | ' 	while (di) {
2a2d8                 | LR__4349
2a2d8     2C 4E 05 F1 | 	add	fp, #44
2a2dc     A7 2A 0A FB | 	rdlong	local07, fp wz
2a2e0     2C 4E 85 F1 | 	sub	fp, #44
2a2e4     60 00 90 AD |  if_e	jmp	#LR__4351
2a2e8     18 4E 05 F1 | 	add	fp, #24
2a2ec     A7 28 02 FB | 	rdlong	local06, fp
2a2f0     14 4E 05 F1 | 	add	fp, #20
2a2f4     A7 24 02 FB | 	rdlong	local04, fp
2a2f8     01 24 86 F1 | 	sub	local04, #1
2a2fc     01 24 66 F0 | 	shl	local04, #1
2a300     14 25 02 F1 | 	add	local04, local06
2a304     12 29 E2 FA | 	rdword	local06, local04
2a308     18 4E 85 F1 | 	sub	fp, #24
2a30c     A7 28 52 FC | 	wrword	local06, fp
2a310     A7 2A E2 FA | 	rdword	local07, fp
2a314     14 4E 85 F1 | 	sub	fp, #20
2a318     20 2A 0E F2 | 	cmp	local07, #32 wz
2a31c     14 4E 05 51 |  if_ne	add	fp, #20
2a320     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a324     14 4E 85 51 |  if_ne	sub	fp, #20
2a328     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a32c     18 00 90 5D |  if_ne	jmp	#LR__4351
2a330     2C 4E 05 F1 | 	add	fp, #44
2a334     A7 1E 02 FB | 	rdlong	local01, fp
2a338     01 1E 86 F1 | 	sub	local01, #1
2a33c     A7 1E 62 FC | 	wrlong	local01, fp
2a340     2C 4E 85 F1 | 	sub	fp, #44
2a344     90 FF 9F FD | 	jmp	#LR__4349
2a348                 | LR__4350
2a348                 | LR__4351
2a348     18 4E 05 F1 | 	add	fp, #24
2a34c     A7 2C 02 FB | 	rdlong	local08, fp
2a350     14 4E 05 F1 | 	add	fp, #20
2a354     A7 24 02 FB | 	rdlong	local04, fp
2a358     01 24 66 F0 | 	shl	local04, #1
2a35c     16 25 02 F1 | 	add	local04, local08
2a360     12 01 58 FC | 	wrword	#0, local04
2a364     A7 2A 0A FB | 	rdlong	local07, fp wz
2a368     2C 4E 85 F1 | 	sub	fp, #44
2a36c     06 FA 05 A6 |  if_e	mov	result1, #6
2a370     04 06 90 AD |  if_e	jmp	#LR__4380
2a374                 | ' 
2a374                 | ' 
2a374                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a374     28 4E 05 F1 | 	add	fp, #40
2a378     A7 00 68 FC | 	wrlong	#0, fp
2a37c     28 4E 85 F1 | 	sub	fp, #40
2a380     97 22 48 FB | 	callpa	#(@LR__4353-@LR__4352)>>2,fcache_load_ptr_
2a384                 | LR__4352
2a384     18 4E 05 F1 | 	add	fp, #24
2a388     A7 2E 02 FB | 	rdlong	local09, fp
2a38c     10 4E 05 F1 | 	add	fp, #16
2a390     A7 30 02 FB | 	rdlong	local10, fp
2a394     28 4E 85 F1 | 	sub	fp, #40
2a398     01 30 66 F0 | 	shl	local10, #1
2a39c     17 31 02 F1 | 	add	local10, local09
2a3a0     18 33 E2 FA | 	rdword	local11, local10
2a3a4     20 32 0E F2 | 	cmp	local11, #32 wz
2a3a8     1C 00 90 5D |  if_ne	jmp	#LR__4354
2a3ac     28 4E 05 F1 | 	add	fp, #40
2a3b0     A7 34 02 FB | 	rdlong	local12, fp
2a3b4     1A 27 02 F6 | 	mov	local05, local12
2a3b8     01 26 06 F1 | 	add	local05, #1
2a3bc     A7 26 62 FC | 	wrlong	local05, fp
2a3c0     28 4E 85 F1 | 	sub	fp, #40
2a3c4     BC FF 9F FD | 	jmp	#LR__4352
2a3c8                 | LR__4353
2a3c8                 | LR__4354
2a3c8     28 4E 05 F1 | 	add	fp, #40
2a3cc     A7 2A 02 FB | 	rdlong	local07, fp
2a3d0     28 4E 85 F1 | 	sub	fp, #40
2a3d4     01 2A 16 F2 | 	cmp	local07, #1 wc
2a3d8     28 00 90 3D |  if_ae	jmp	#LR__4355
2a3dc     18 4E 05 F1 | 	add	fp, #24
2a3e0     A7 22 02 FB | 	rdlong	local03, fp
2a3e4     10 4E 05 F1 | 	add	fp, #16
2a3e8     A7 2E 02 FB | 	rdlong	local09, fp
2a3ec     28 4E 85 F1 | 	sub	fp, #40
2a3f0     01 2E 66 F0 | 	shl	local09, #1
2a3f4     11 2F 02 F1 | 	add	local09, local03
2a3f8     17 1F E2 FA | 	rdword	local01, local09
2a3fc     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a400     14 00 90 5D |  if_ne	jmp	#LR__4356
2a404                 | LR__4355
2a404     10 4E 05 F1 | 	add	fp, #16
2a408     A7 2A C2 FA | 	rdbyte	local07, fp
2a40c     03 2A 46 F5 | 	or	local07, #3
2a410     A7 2A 42 FC | 	wrbyte	local07, fp
2a414     10 4E 85 F1 | 	sub	fp, #16
2a418                 | LR__4356
2a418     97 2C 48 FB | 	callpa	#(@LR__4358-@LR__4357)>>2,fcache_load_ptr_
2a41c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a41c                 | LR__4357
2a41c     2C 4E 05 F1 | 	add	fp, #44
2a420     A7 2A 02 FB | 	rdlong	local07, fp
2a424     2C 4E 85 F1 | 	sub	fp, #44
2a428     01 2A 16 F2 | 	cmp	local07, #1 wc
2a42c     44 00 90 CD |  if_b	jmp	#LR__4359
2a430     18 4E 05 F1 | 	add	fp, #24
2a434     A7 28 02 FB | 	rdlong	local06, fp
2a438     14 4E 05 F1 | 	add	fp, #20
2a43c     A7 22 02 FB | 	rdlong	local03, fp
2a440     2C 4E 85 F1 | 	sub	fp, #44
2a444     01 22 86 F1 | 	sub	local03, #1
2a448     01 22 66 F0 | 	shl	local03, #1
2a44c     14 23 02 F1 | 	add	local03, local06
2a450     11 1F E2 FA | 	rdword	local01, local03
2a454     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a458     18 00 90 AD |  if_e	jmp	#LR__4359
2a45c     2C 4E 05 F1 | 	add	fp, #44
2a460     A7 1E 02 FB | 	rdlong	local01, fp
2a464     01 1E 86 F1 | 	sub	local01, #1
2a468     A7 1E 62 FC | 	wrlong	local01, fp
2a46c     2C 4E 85 F1 | 	sub	fp, #44
2a470     A8 FF 9F FD | 	jmp	#LR__4357
2a474                 | LR__4358
2a474                 | LR__4359
2a474     04 4E 05 F1 | 	add	fp, #4
2a478     A7 12 02 FB | 	rdlong	arg01, fp
2a47c     04 4E 85 F1 | 	sub	fp, #4
2a480     20 12 06 F1 | 	add	arg01, #32
2a484     20 14 06 F6 | 	mov	arg02, #32
2a488     0B 16 06 F6 | 	mov	arg03, #11
2a48c     09 37 02 F6 | 	mov	local13, arg01
2a490     98 00 A0 FD | 	call	#\builtin_bytefill_
2a494     1B FB 01 F6 | 	mov	result1, local13
2a498     0C 4E 05 F1 | 	add	fp, #12
2a49c     A7 00 48 FC | 	wrbyte	#0, fp
2a4a0     A7 2A C2 FA | 	rdbyte	local07, fp
2a4a4     14 4E 05 F1 | 	add	fp, #20
2a4a8     A7 2A 62 FC | 	wrlong	local07, fp
2a4ac     04 4E 05 F1 | 	add	fp, #4
2a4b0     A7 10 68 FC | 	wrlong	#8, fp
2a4b4     24 4E 85 F1 | 	sub	fp, #36
2a4b8                 | ' 
2a4b8                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a4b8                 | ' 	i = b = 0; ni = 8;
2a4b8                 | ' 	for (;;) {
2a4b8                 | LR__4360
2a4b8     18 4E 05 F1 | 	add	fp, #24
2a4bc     A7 22 02 FB | 	rdlong	local03, fp
2a4c0     10 4E 05 F1 | 	add	fp, #16
2a4c4     A7 2E 02 FB | 	rdlong	local09, fp
2a4c8     17 25 02 F6 | 	mov	local04, local09
2a4cc     01 24 06 F1 | 	add	local04, #1
2a4d0     A7 24 62 FC | 	wrlong	local04, fp
2a4d4     01 2E 66 F0 | 	shl	local09, #1
2a4d8     11 2F 02 F1 | 	add	local09, local03
2a4dc     17 29 E2 FA | 	rdword	local06, local09
2a4e0     14 4E 85 F1 | 	sub	fp, #20
2a4e4     A7 28 52 FC | 	wrword	local06, fp
2a4e8     A7 2A EA FA | 	rdword	local07, fp wz
2a4ec     14 4E 85 F1 | 	sub	fp, #20
2a4f0     74 03 90 AD |  if_e	jmp	#LR__4376
2a4f4     14 4E 05 F1 | 	add	fp, #20
2a4f8     A7 2A E2 FA | 	rdword	local07, fp
2a4fc     14 4E 85 F1 | 	sub	fp, #20
2a500     20 2A 0E F2 | 	cmp	local07, #32 wz
2a504     30 00 90 AD |  if_e	jmp	#LR__4361
2a508     14 4E 05 F1 | 	add	fp, #20
2a50c     A7 1E E2 FA | 	rdword	local01, fp
2a510     14 4E 85 F1 | 	sub	fp, #20
2a514     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a518     34 00 90 5D |  if_ne	jmp	#LR__4362
2a51c     28 4E 05 F1 | 	add	fp, #40
2a520     A7 24 02 FB | 	rdlong	local04, fp
2a524     04 4E 05 F1 | 	add	fp, #4
2a528     A7 30 02 FB | 	rdlong	local10, fp
2a52c     2C 4E 85 F1 | 	sub	fp, #44
2a530     18 25 0A F2 | 	cmp	local04, local10 wz
2a534     18 00 90 AD |  if_e	jmp	#LR__4362
2a538                 | LR__4361
2a538     10 4E 05 F1 | 	add	fp, #16
2a53c     A7 2A C2 FA | 	rdbyte	local07, fp
2a540     03 2A 46 F5 | 	or	local07, #3
2a544     A7 2A 42 FC | 	wrbyte	local07, fp
2a548     10 4E 85 F1 | 	sub	fp, #16
2a54c                 | ' 			cf |=  0x01  |  0x02 ;
2a54c                 | ' 			continue;
2a54c     68 FF 9F FD | 	jmp	#LR__4360
2a550                 | LR__4362
2a550     20 4E 05 F1 | 	add	fp, #32
2a554     A7 2A 02 FB | 	rdlong	local07, fp
2a558     04 4E 05 F1 | 	add	fp, #4
2a55c     A7 1E 02 FB | 	rdlong	local01, fp
2a560     24 4E 85 F1 | 	sub	fp, #36
2a564     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a568     1C 00 90 3D |  if_ae	jmp	#LR__4363
2a56c     28 4E 05 F1 | 	add	fp, #40
2a570     A7 2C 02 FB | 	rdlong	local08, fp
2a574     04 4E 05 F1 | 	add	fp, #4
2a578     A7 30 02 FB | 	rdlong	local10, fp
2a57c     2C 4E 85 F1 | 	sub	fp, #44
2a580     18 2D 0A F2 | 	cmp	local08, local10 wz
2a584     B0 00 90 5D |  if_ne	jmp	#LR__4365
2a588                 | LR__4363
2a588     24 4E 05 F1 | 	add	fp, #36
2a58c     A7 2A 02 FB | 	rdlong	local07, fp
2a590     24 4E 85 F1 | 	sub	fp, #36
2a594     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a598     18 00 90 5D |  if_ne	jmp	#LR__4364
2a59c     10 4E 05 F1 | 	add	fp, #16
2a5a0     A7 2A C2 FA | 	rdbyte	local07, fp
2a5a4     03 2A 46 F5 | 	or	local07, #3
2a5a8     A7 2A 42 FC | 	wrbyte	local07, fp
2a5ac     10 4E 85 F1 | 	sub	fp, #16
2a5b0                 | ' 				cf |=  0x01  |  0x02 ;
2a5b0                 | ' 				break;
2a5b0     B4 02 90 FD | 	jmp	#LR__4376
2a5b4                 | LR__4364
2a5b4     28 4E 05 F1 | 	add	fp, #40
2a5b8     A7 2A 02 FB | 	rdlong	local07, fp
2a5bc     04 4E 05 F1 | 	add	fp, #4
2a5c0     A7 1E 02 FB | 	rdlong	local01, fp
2a5c4     2C 4E 85 F1 | 	sub	fp, #44
2a5c8     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a5cc     10 4E 05 51 |  if_ne	add	fp, #16
2a5d0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a5d4     03 2A 46 55 |  if_ne	or	local07, #3
2a5d8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a5dc     10 4E 85 51 |  if_ne	sub	fp, #16
2a5e0     28 4E 05 F1 | 	add	fp, #40
2a5e4     A7 2A 02 FB | 	rdlong	local07, fp
2a5e8     04 4E 05 F1 | 	add	fp, #4
2a5ec     A7 20 02 FB | 	rdlong	local02, fp
2a5f0     2C 4E 85 F1 | 	sub	fp, #44
2a5f4     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a5f8     6C 02 90 1D |  if_a	jmp	#LR__4376
2a5fc     2C 4E 05 F1 | 	add	fp, #44
2a600     A7 2A 02 FB | 	rdlong	local07, fp
2a604     04 4E 85 F1 | 	sub	fp, #4
2a608     A7 2A 62 FC | 	wrlong	local07, fp
2a60c     08 4E 85 F1 | 	sub	fp, #8
2a610     A7 10 68 FC | 	wrlong	#8, fp
2a614     04 4E 05 F1 | 	add	fp, #4
2a618     A7 16 68 FC | 	wrlong	#11, fp
2a61c     18 4E 85 F1 | 	sub	fp, #24
2a620     A7 32 C2 FA | 	rdbyte	local11, fp
2a624     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a628     02 2A 66 F0 | 	shl	local07, #2
2a62c     A7 2A 42 FC | 	wrbyte	local07, fp
2a630     0C 4E 85 F1 | 	sub	fp, #12
2a634                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a634                 | ' 			continue;
2a634     80 FE 9F FD | 	jmp	#LR__4360
2a638                 | LR__4365
2a638     14 4E 05 F1 | 	add	fp, #20
2a63c     A7 2A E2 FA | 	rdword	local07, fp
2a640     14 4E 85 F1 | 	sub	fp, #20
2a644     80 2A 16 F2 | 	cmp	local07, #128 wc
2a648     6C 00 90 CD |  if_b	jmp	#LR__4367
2a64c     10 4E 05 F1 | 	add	fp, #16
2a650     A7 2A C2 FA | 	rdbyte	local07, fp
2a654     02 2A 46 F5 | 	or	local07, #2
2a658     A7 2A 42 FC | 	wrbyte	local07, fp
2a65c     04 4E 05 F1 | 	add	fp, #4
2a660     A7 12 E2 FA | 	rdword	arg01, fp
2a664     14 4E 85 F1 | 	sub	fp, #20
2a668     01 00 00 FF 
2a66c     52 15 06 F6 | 	mov	arg02, ##850
2a670     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a674     14 4E 05 F1 | 	add	fp, #20
2a678     A7 FA 51 FC | 	wrword	result1, fp
2a67c     A7 2A E2 FA | 	rdword	local07, fp
2a680     14 4E 85 F1 | 	sub	fp, #20
2a684     80 2A CE F7 | 	test	local07, #128 wz
2a688     2C 00 90 AD |  if_e	jmp	#LR__4366
2a68c     14 4E 05 F1 | 	add	fp, #20
2a690     A7 20 E2 FA | 	rdword	local02, fp
2a694     7F 20 06 F5 | 	and	local02, #127
2a698     01 00 00 FF 
2a69c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a6a0     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a6a4     10 2B C2 FA | 	rdbyte	local07, local02
2a6a8     A7 2A 52 FC | 	wrword	local07, fp
2a6ac     14 4E 85 F1 | 	sub	fp, #20
2a6b0     01 00 00 FF 
2a6b4     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a6b8                 | LR__4366
2a6b8                 | LR__4367
2a6b8     14 4E 05 F1 | 	add	fp, #20
2a6bc     A7 2A E2 FA | 	rdword	local07, fp
2a6c0     14 4E 85 F1 | 	sub	fp, #20
2a6c4     00 2B 16 F2 | 	cmp	local07, #256 wc
2a6c8     88 00 90 CD |  if_b	jmp	#LR__4369
2a6cc     24 4E 05 F1 | 	add	fp, #36
2a6d0     A7 2A 02 FB | 	rdlong	local07, fp
2a6d4     01 2A 86 F1 | 	sub	local07, #1
2a6d8     04 4E 85 F1 | 	sub	fp, #4
2a6dc     A7 20 02 FB | 	rdlong	local02, fp
2a6e0     20 4E 85 F1 | 	sub	fp, #32
2a6e4     15 21 12 F2 | 	cmp	local02, local07 wc
2a6e8     2C 00 90 CD |  if_b	jmp	#LR__4368
2a6ec     10 4E 05 F1 | 	add	fp, #16
2a6f0     A7 32 C2 FA | 	rdbyte	local11, fp
2a6f4     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a6f8     03 2A 46 F5 | 	or	local07, #3
2a6fc     A7 2A 42 FC | 	wrbyte	local07, fp
2a700     14 4E 05 F1 | 	add	fp, #20
2a704     A7 2A 02 FB | 	rdlong	local07, fp
2a708     04 4E 85 F1 | 	sub	fp, #4
2a70c     A7 2A 62 FC | 	wrlong	local07, fp
2a710     20 4E 85 F1 | 	sub	fp, #32
2a714                 | ' 				cf |=  0x01  |  0x02 ;
2a714                 | ' 				i = ni; continue;
2a714     A0 FD 9F FD | 	jmp	#LR__4360
2a718                 | LR__4368
2a718     04 4E 05 F1 | 	add	fp, #4
2a71c     A7 2E 02 FB | 	rdlong	local09, fp
2a720     1C 4E 05 F1 | 	add	fp, #28
2a724     A7 30 02 FB | 	rdlong	local10, fp
2a728     18 25 02 F6 | 	mov	local04, local10
2a72c     01 24 06 F1 | 	add	local04, #1
2a730     A7 24 62 FC | 	wrlong	local04, fp
2a734     20 2E 06 F1 | 	add	local09, #32
2a738     17 31 02 F1 | 	add	local10, local09
2a73c     0C 4E 85 F1 | 	sub	fp, #12
2a740     A7 22 E2 FA | 	rdword	local03, fp
2a744     14 4E 85 F1 | 	sub	fp, #20
2a748     08 22 46 F0 | 	shr	local03, #8
2a74c     18 23 42 FC | 	wrbyte	local03, local10
2a750     D4 00 90 FD | 	jmp	#LR__4375
2a754                 | LR__4369
2a754     14 4E 05 F1 | 	add	fp, #20
2a758     A7 2A EA FA | 	rdword	local07, fp wz
2a75c     14 4E 85 F1 | 	sub	fp, #20
2a760     20 00 90 AD |  if_e	jmp	#LR__4370
2a764     80 01 00 FF 
2a768     F5 12 06 F6 | 	mov	arg01, ##@LR__5003
2a76c     14 4E 05 F1 | 	add	fp, #20
2a770     A7 14 E2 FA | 	rdword	arg02, fp
2a774     14 4E 85 F1 | 	sub	fp, #20
2a778     48 CB BF FD | 	call	#_fatfs_cc_strchr
2a77c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a780     20 00 90 AD |  if_e	jmp	#LR__4371
2a784                 | LR__4370
2a784     14 4E 05 F1 | 	add	fp, #20
2a788     A7 BE 58 FC | 	wrword	#95, fp
2a78c     04 4E 85 F1 | 	sub	fp, #4
2a790     A7 2A C2 FA | 	rdbyte	local07, fp
2a794     03 2A 46 F5 | 	or	local07, #3
2a798     A7 2A 42 FC | 	wrbyte	local07, fp
2a79c     10 4E 85 F1 | 	sub	fp, #16
2a7a0     84 00 90 FD | 	jmp	#LR__4374
2a7a4                 | LR__4371
2a7a4     14 4E 05 F1 | 	add	fp, #20
2a7a8     A7 2A E2 FA | 	rdword	local07, fp
2a7ac     14 4E 85 F1 | 	sub	fp, #20
2a7b0     41 2A 16 F2 | 	cmp	local07, #65 wc
2a7b4     24 00 90 CD |  if_b	jmp	#LR__4372
2a7b8     14 4E 05 F1 | 	add	fp, #20
2a7bc     A7 1E E2 FA | 	rdword	local01, fp
2a7c0     14 4E 85 F1 | 	sub	fp, #20
2a7c4     5B 1E 16 F2 | 	cmp	local01, #91 wc
2a7c8     0C 4E 05 C1 |  if_b	add	fp, #12
2a7cc     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2a7d0     02 2A 46 C5 |  if_b	or	local07, #2
2a7d4     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2a7d8     0C 4E 85 C1 |  if_b	sub	fp, #12
2a7dc                 | LR__4372
2a7dc     14 4E 05 F1 | 	add	fp, #20
2a7e0     A7 2A E2 FA | 	rdword	local07, fp
2a7e4     14 4E 85 F1 | 	sub	fp, #20
2a7e8     61 2A 16 F2 | 	cmp	local07, #97 wc
2a7ec     38 00 90 CD |  if_b	jmp	#LR__4373
2a7f0     14 4E 05 F1 | 	add	fp, #20
2a7f4     A7 1E E2 FA | 	rdword	local01, fp
2a7f8     14 4E 85 F1 | 	sub	fp, #20
2a7fc     7B 1E 16 F2 | 	cmp	local01, #123 wc
2a800     24 00 90 3D |  if_ae	jmp	#LR__4373
2a804     0C 4E 05 F1 | 	add	fp, #12
2a808     A7 2A C2 FA | 	rdbyte	local07, fp
2a80c     01 2A 46 F5 | 	or	local07, #1
2a810     A7 2A 42 FC | 	wrbyte	local07, fp
2a814     08 4E 05 F1 | 	add	fp, #8
2a818     A7 2A E2 FA | 	rdword	local07, fp
2a81c     20 2A 86 F1 | 	sub	local07, #32
2a820     A7 2A 52 FC | 	wrword	local07, fp
2a824     14 4E 85 F1 | 	sub	fp, #20
2a828                 | LR__4373
2a828                 | LR__4374
2a828                 | LR__4375
2a828     04 4E 05 F1 | 	add	fp, #4
2a82c     A7 32 02 FB | 	rdlong	local11, fp
2a830     19 2F 02 F6 | 	mov	local09, local11
2a834     1C 4E 05 F1 | 	add	fp, #28
2a838     A7 20 02 FB | 	rdlong	local02, fp
2a83c     10 25 02 F6 | 	mov	local04, local02
2a840     01 24 06 F1 | 	add	local04, #1
2a844     A7 24 62 FC | 	wrlong	local04, fp
2a848     10 31 02 F6 | 	mov	local10, local02
2a84c     20 2E 06 F1 | 	add	local09, #32
2a850     17 31 02 F1 | 	add	local10, local09
2a854     0C 4E 85 F1 | 	sub	fp, #12
2a858     A7 22 E2 FA | 	rdword	local03, fp
2a85c     14 4E 85 F1 | 	sub	fp, #20
2a860     18 23 42 FC | 	wrbyte	local03, local10
2a864     50 FC 9F FD | 	jmp	#LR__4360
2a868                 | LR__4376
2a868     04 4E 05 F1 | 	add	fp, #4
2a86c     A7 32 02 FB | 	rdlong	local11, fp
2a870     04 4E 85 F1 | 	sub	fp, #4
2a874     20 32 06 F1 | 	add	local11, #32
2a878     19 2B C2 FA | 	rdbyte	local07, local11
2a87c     E5 2A 0E F2 | 	cmp	local07, #229 wz
2a880     04 4E 05 A1 |  if_e	add	fp, #4
2a884     A7 2A 02 AB |  if_e	rdlong	local07, fp
2a888     04 4E 85 A1 |  if_e	sub	fp, #4
2a88c     20 2A 06 A1 |  if_e	add	local07, #32
2a890     15 0B 48 AC |  if_e	wrbyte	#5, local07
2a894     24 4E 05 F1 | 	add	fp, #36
2a898     A7 2A 02 FB | 	rdlong	local07, fp
2a89c     24 4E 85 F1 | 	sub	fp, #36
2a8a0     08 2A 0E F2 | 	cmp	local07, #8 wz
2a8a4     0C 4E 05 A1 |  if_e	add	fp, #12
2a8a8     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2a8ac     02 2A 66 A0 |  if_e	shl	local07, #2
2a8b0     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2a8b4     0C 4E 85 A1 |  if_e	sub	fp, #12
2a8b8     0C 4E 05 F1 | 	add	fp, #12
2a8bc     A7 2A C2 FA | 	rdbyte	local07, fp
2a8c0     0C 4E 85 F1 | 	sub	fp, #12
2a8c4     0C 2A 06 F5 | 	and	local07, #12
2a8c8     0C 2A 0E F2 | 	cmp	local07, #12 wz
2a8cc     18 00 90 AD |  if_e	jmp	#LR__4377
2a8d0     0C 4E 05 F1 | 	add	fp, #12
2a8d4     A7 1E C2 FA | 	rdbyte	local01, fp
2a8d8     0C 4E 85 F1 | 	sub	fp, #12
2a8dc     03 1E 06 F5 | 	and	local01, #3
2a8e0     03 1E 0E F2 | 	cmp	local01, #3 wz
2a8e4     14 00 90 5D |  if_ne	jmp	#LR__4378
2a8e8                 | LR__4377
2a8e8     10 4E 05 F1 | 	add	fp, #16
2a8ec     A7 2A C2 FA | 	rdbyte	local07, fp
2a8f0     02 2A 46 F5 | 	or	local07, #2
2a8f4     A7 2A 42 FC | 	wrbyte	local07, fp
2a8f8     10 4E 85 F1 | 	sub	fp, #16
2a8fc                 | LR__4378
2a8fc     10 4E 05 F1 | 	add	fp, #16
2a900     A7 2A C2 FA | 	rdbyte	local07, fp
2a904     10 4E 85 F1 | 	sub	fp, #16
2a908     02 2A CE F7 | 	test	local07, #2 wz
2a90c     48 00 90 5D |  if_ne	jmp	#LR__4379
2a910     0C 4E 05 F1 | 	add	fp, #12
2a914     A7 2A C2 FA | 	rdbyte	local07, fp
2a918     0C 4E 85 F1 | 	sub	fp, #12
2a91c     01 2A CE F7 | 	test	local07, #1 wz
2a920     10 4E 05 51 |  if_ne	add	fp, #16
2a924     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a928     10 2A 46 55 |  if_ne	or	local07, #16
2a92c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a930     10 4E 85 51 |  if_ne	sub	fp, #16
2a934     0C 4E 05 F1 | 	add	fp, #12
2a938     A7 2A C2 FA | 	rdbyte	local07, fp
2a93c     0C 4E 85 F1 | 	sub	fp, #12
2a940     04 2A CE F7 | 	test	local07, #4 wz
2a944     10 4E 05 51 |  if_ne	add	fp, #16
2a948     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a94c     08 2A 46 55 |  if_ne	or	local07, #8
2a950     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a954     10 4E 85 51 |  if_ne	sub	fp, #16
2a958                 | LR__4379
2a958     04 4E 05 F1 | 	add	fp, #4
2a95c     A7 2A 02 FB | 	rdlong	local07, fp
2a960     0C 4E 05 F1 | 	add	fp, #12
2a964     A7 1E C2 FA | 	rdbyte	local01, fp
2a968     10 4E 85 F1 | 	sub	fp, #16
2a96c     2B 2A 06 F1 | 	add	local07, #43
2a970     15 1F 42 FC | 	wrbyte	local01, local07
2a974                 | ' 	}
2a974                 | ' 
2a974                 | ' 	dp->fn[ 11 ] = cf;
2a974                 | ' 
2a974                 | ' 	return FR_OK;
2a974     00 FA 05 F6 | 	mov	result1, #0
2a978                 | LR__4380
2a978     A7 F0 03 F6 | 	mov	ptra, fp
2a97c     B2 00 A0 FD | 	call	#popregs_
2a980                 | _fatfs_cc_create_name_ret
2a980     2D 00 64 FD | 	ret
2a984                 | 
2a984                 | _fatfs_cc_follow_path
2a984     02 4A 05 F6 | 	mov	COUNT_, #2
2a988     A8 00 A0 FD | 	call	#pushregs_
2a98c     18 F0 07 F1 | 	add	ptra, #24
2a990     04 4E 05 F1 | 	add	fp, #4
2a994     A7 12 62 FC | 	wrlong	arg01, fp
2a998     04 4E 05 F1 | 	add	fp, #4
2a99c     A7 14 62 FC | 	wrlong	arg02, fp
2a9a0     04 4E 85 F1 | 	sub	fp, #4
2a9a4     A7 FA 01 FB | 	rdlong	result1, fp
2a9a8     FD 1E 02 FB | 	rdlong	local01, result1
2a9ac     10 4E 05 F1 | 	add	fp, #16
2a9b0     A7 1E 62 FC | 	wrlong	local01, fp
2a9b4     14 4E 85 F1 | 	sub	fp, #20
2a9b8     97 24 48 FB | 	callpa	#(@LR__4392-@LR__4390)>>2,fcache_load_ptr_
2a9bc                 | ' )
2a9bc                 | ' {
2a9bc                 | ' 	FRESULT res;
2a9bc                 | ' 	BYTE ns;
2a9bc                 | ' 	FATFS *fs = dp->obj.fs;
2a9bc                 | ' #line 3034 "ff.c"
2a9bc                 | ' 	{
2a9bc                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2a9bc                 | LR__4390
2a9bc     08 4E 05 F1 | 	add	fp, #8
2a9c0     A7 1E 02 FB | 	rdlong	local01, fp
2a9c4     08 4E 85 F1 | 	sub	fp, #8
2a9c8     0F 1F C2 FA | 	rdbyte	local01, local01
2a9cc     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a9d0     18 00 90 AD |  if_e	jmp	#LR__4391
2a9d4     08 4E 05 F1 | 	add	fp, #8
2a9d8     A7 1E 02 FB | 	rdlong	local01, fp
2a9dc     08 4E 85 F1 | 	sub	fp, #8
2a9e0     0F 1F C2 FA | 	rdbyte	local01, local01
2a9e4     5C 1E 0E F2 | 	cmp	local01, #92 wz
2a9e8     18 00 90 5D |  if_ne	jmp	#LR__4393
2a9ec                 | LR__4391
2a9ec     08 4E 05 F1 | 	add	fp, #8
2a9f0     A7 1E 02 FB | 	rdlong	local01, fp
2a9f4     01 1E 06 F1 | 	add	local01, #1
2a9f8     A7 1E 62 FC | 	wrlong	local01, fp
2a9fc     08 4E 85 F1 | 	sub	fp, #8
2aa00     B8 FF 9F FD | 	jmp	#LR__4390
2aa04                 | LR__4392
2aa04                 | LR__4393
2aa04     04 4E 05 F1 | 	add	fp, #4
2aa08     A7 1E 02 FB | 	rdlong	local01, fp
2aa0c     08 1E 06 F1 | 	add	local01, #8
2aa10     0F 01 68 FC | 	wrlong	#0, local01
2aa14     04 4E 05 F1 | 	add	fp, #4
2aa18     A7 1E 02 FB | 	rdlong	local01, fp
2aa1c     08 4E 85 F1 | 	sub	fp, #8
2aa20     0F 1F C2 FA | 	rdbyte	local01, local01
2aa24     20 1E 16 F2 | 	cmp	local01, #32 wc
2aa28     30 00 90 3D |  if_ae	jmp	#LR__4394
2aa2c     04 4E 05 F1 | 	add	fp, #4
2aa30     A7 1E 02 FB | 	rdlong	local01, fp
2aa34     2B 1E 06 F1 | 	add	local01, #43
2aa38     0F 01 49 FC | 	wrbyte	#128, local01
2aa3c     A7 12 02 FB | 	rdlong	arg01, fp
2aa40     04 4E 85 F1 | 	sub	fp, #4
2aa44     00 14 06 F6 | 	mov	arg02, #0
2aa48     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2aa4c     0C 4E 05 F1 | 	add	fp, #12
2aa50     A7 FA 61 FC | 	wrlong	result1, fp
2aa54     0C 4E 85 F1 | 	sub	fp, #12
2aa58     1C 01 90 FD | 	jmp	#LR__4398
2aa5c                 | LR__4394
2aa5c                 | ' 		for (;;) {
2aa5c                 | LR__4395
2aa5c     04 4E 05 F1 | 	add	fp, #4
2aa60     A7 12 02 FB | 	rdlong	arg01, fp
2aa64     04 4E 05 F1 | 	add	fp, #4
2aa68     A7 14 02 F6 | 	mov	arg02, fp
2aa6c     08 4E 85 F1 | 	sub	fp, #8
2aa70     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2aa74     0C 4E 05 F1 | 	add	fp, #12
2aa78     A7 FA 61 FC | 	wrlong	result1, fp
2aa7c     00 FA 4D F2 | 	cmps	result1, #0 wz
2aa80     0C 4E 85 F1 | 	sub	fp, #12
2aa84     F0 00 90 5D |  if_ne	jmp	#LR__4397
2aa88     04 4E 05 F1 | 	add	fp, #4
2aa8c     A7 12 02 FB | 	rdlong	arg01, fp
2aa90     04 4E 85 F1 | 	sub	fp, #4
2aa94     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2aa98     0C 4E 05 F1 | 	add	fp, #12
2aa9c     A7 FA 61 FC | 	wrlong	result1, fp
2aaa0     08 4E 85 F1 | 	sub	fp, #8
2aaa4     A7 1E 02 FB | 	rdlong	local01, fp
2aaa8     2B 1E 06 F1 | 	add	local01, #43
2aaac     0F 1F C2 FA | 	rdbyte	local01, local01
2aab0     0C 4E 05 F1 | 	add	fp, #12
2aab4     A7 1E 42 FC | 	wrbyte	local01, fp
2aab8     04 4E 85 F1 | 	sub	fp, #4
2aabc     A7 1E 0A FB | 	rdlong	local01, fp wz
2aac0     0C 4E 85 F1 | 	sub	fp, #12
2aac4     34 00 90 AD |  if_e	jmp	#LR__4396
2aac8     0C 4E 05 F1 | 	add	fp, #12
2aacc     A7 1E 02 FB | 	rdlong	local01, fp
2aad0     0C 4E 85 F1 | 	sub	fp, #12
2aad4     04 1E 0E F2 | 	cmp	local01, #4 wz
2aad8     9C 00 90 5D |  if_ne	jmp	#LR__4397
2aadc     10 4E 05 F1 | 	add	fp, #16
2aae0     A7 1E C2 FA | 	rdbyte	local01, fp
2aae4     10 4E 85 F1 | 	sub	fp, #16
2aae8     04 1E CE F7 | 	test	local01, #4 wz
2aaec     0C 4E 05 A1 |  if_e	add	fp, #12
2aaf0     A7 0A 68 AC |  if_e	wrlong	#5, fp
2aaf4     0C 4E 85 A1 |  if_e	sub	fp, #12
2aaf8                 | ' 					}
2aaf8                 | ' 				}
2aaf8                 | ' 				break;
2aaf8     7C 00 90 FD | 	jmp	#LR__4397
2aafc                 | LR__4396
2aafc     10 4E 05 F1 | 	add	fp, #16
2ab00     A7 1E C2 FA | 	rdbyte	local01, fp
2ab04     10 4E 85 F1 | 	sub	fp, #16
2ab08     04 1E CE F7 | 	test	local01, #4 wz
2ab0c     68 00 90 5D |  if_ne	jmp	#LR__4397
2ab10     04 4E 05 F1 | 	add	fp, #4
2ab14     A7 1E 02 FB | 	rdlong	local01, fp
2ab18     04 4E 85 F1 | 	sub	fp, #4
2ab1c     06 1E 06 F1 | 	add	local01, #6
2ab20     0F 1F C2 FA | 	rdbyte	local01, local01
2ab24     10 1E CE F7 | 	test	local01, #16 wz
2ab28     0C 4E 05 A1 |  if_e	add	fp, #12
2ab2c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ab30     0C 4E 85 A1 |  if_e	sub	fp, #12
2ab34                 | ' 				res = FR_NO_PATH; break;
2ab34     40 00 90 AD |  if_e	jmp	#LR__4397
2ab38     04 4E 05 F1 | 	add	fp, #4
2ab3c     A7 20 02 FB | 	rdlong	local02, fp
2ab40     10 1F 02 F6 | 	mov	local01, local02
2ab44     10 4E 05 F1 | 	add	fp, #16
2ab48     A7 14 02 FB | 	rdlong	arg02, fp
2ab4c     0A 13 02 F6 | 	mov	arg01, arg02
2ab50     34 14 06 F1 | 	add	arg02, #52
2ab54     14 4E 85 F1 | 	sub	fp, #20
2ab58     10 20 06 F1 | 	add	local02, #16
2ab5c     10 21 02 FB | 	rdlong	local02, local02
2ab60     FF 21 06 F5 | 	and	local02, #511
2ab64     10 15 02 F1 | 	add	arg02, local02
2ab68     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2ab6c     08 1E 06 F1 | 	add	local01, #8
2ab70     0F FB 61 FC | 	wrlong	result1, local01
2ab74     E4 FE 9F FD | 	jmp	#LR__4395
2ab78                 | LR__4397
2ab78                 | LR__4398
2ab78                 | ' 			}
2ab78                 | ' #line 3090 "ff.c"
2ab78                 | ' 			{
2ab78                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ab78                 | ' 			}
2ab78                 | ' 		}
2ab78                 | ' 	}
2ab78                 | ' 
2ab78                 | ' 	return res;
2ab78     0C 4E 05 F1 | 	add	fp, #12
2ab7c     A7 FA 01 FB | 	rdlong	result1, fp
2ab80     0C 4E 85 F1 | 	sub	fp, #12
2ab84     A7 F0 03 F6 | 	mov	ptra, fp
2ab88     B2 00 A0 FD | 	call	#popregs_
2ab8c                 | _fatfs_cc_follow_path_ret
2ab8c     2D 00 64 FD | 	ret
2ab90                 | 
2ab90                 | _fatfs_cc_get_ldnumber
2ab90     01 00 66 F6 | 	neg	_var01, #1
2ab94     09 03 0A FB | 	rdlong	_var02, arg01 wz
2ab98     01 05 02 F6 | 	mov	_var03, _var02
2ab9c     01 FA 65 A6 |  if_e	neg	result1, #1
2aba0     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2aba4     97 10 48 FB | 	callpa	#(@LR__4401-@LR__4400)>>2,fcache_load_ptr_
2aba8                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2aba8                 | LR__4400
2aba8     02 07 C2 FA | 	rdbyte	_var04, _var03
2abac     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2abb0     20 FA 15 F2 | 	cmp	result1, #32 wc
2abb4     01 04 06 F1 | 	add	_var03, #1
2abb8     03 09 02 36 |  if_ae	mov	_var05, _var04
2abbc     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2abc0     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2abc4     E0 FF 9F 1D |  if_a	jmp	#LR__4400
2abc8                 | LR__4401
2abc8     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2abcc     3A 06 0E F2 | 	cmp	_var04, #58 wz
2abd0     40 00 90 5D |  if_ne	jmp	#LR__4403
2abd4     01 0A 06 F6 | 	mov	_var06, #1
2abd8     01 09 C2 FA | 	rdbyte	_var05, _var02
2abdc     30 08 16 F2 | 	cmp	_var05, #48 wc
2abe0     1C 00 90 CD |  if_b	jmp	#LR__4402
2abe4     01 09 C2 FA | 	rdbyte	_var05, _var02
2abe8     3A 08 16 F2 | 	cmp	_var05, #58 wc
2abec     01 0D 02 C6 |  if_b	mov	_var07, _var02
2abf0     02 0C 06 C1 |  if_b	add	_var07, #2
2abf4     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2abf8     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2abfc     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2ac00                 | LR__4402
2ac00     01 0A 56 F2 | 	cmps	_var06, #1 wc
2ac04     05 01 02 C6 |  if_b	mov	_var01, _var06
2ac08     09 05 62 CC |  if_b	wrlong	_var03, arg01
2ac0c                 | ' 			vol = i;
2ac0c                 | ' 			*path = tt;
2ac0c                 | ' 		}
2ac0c                 | ' 		return vol;
2ac0c     00 FB 01 F6 | 	mov	result1, _var01
2ac10     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ac14                 | LR__4403
2ac14                 | ' 	}
2ac14                 | ' #line 3170 "ff.c"
2ac14                 | ' 	vol = 0;
2ac14                 | ' 
2ac14                 | ' 	return vol;
2ac14     00 FA 05 F6 | 	mov	result1, #0
2ac18                 | _fatfs_cc_get_ldnumber_ret
2ac18     2D 00 64 FD | 	ret
2ac1c                 | 
2ac1c                 | _fatfs_cc_check_fs
2ac1c     04 4A 05 F6 | 	mov	COUNT_, #4
2ac20     A8 00 A0 FD | 	call	#pushregs_
2ac24     09 1F 02 F6 | 	mov	local01, arg01
2ac28     03 1E 06 F1 | 	add	local01, #3
2ac2c     0F 01 48 FC | 	wrbyte	#0, local01
2ac30     2D 1E 06 F1 | 	add	local01, #45
2ac34     FF FF FF FF 
2ac38     0F FF 6B FC | 	wrlong	##-1, local01
2ac3c     30 1E 86 F1 | 	sub	local01, #48
2ac40     0F 13 02 F6 | 	mov	arg01, local01
2ac44     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2ac48     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac4c     04 FA 05 56 |  if_ne	mov	result1, #4
2ac50     94 01 90 5D |  if_ne	jmp	#LR__4414
2ac54     34 1E 06 F1 | 	add	local01, #52
2ac58     0F 13 02 F6 | 	mov	arg01, local01
2ac5c     FE 13 06 F1 | 	add	arg01, #510
2ac60                 | ' {
2ac60                 | ' 
2ac60                 | ' 	return *((WORD*)ptr);
2ac60     09 21 E2 FA | 	rdword	local02, arg01
2ac64     0F 23 C2 FA | 	rdbyte	local03, local01
2ac68     34 1E 86 F1 | 	sub	local01, #52
2ac6c     11 25 E2 F8 | 	getbyte	local04, local03, #0
2ac70     EB 24 0E F2 | 	cmp	local04, #235 wz
2ac74     11 17 02 56 |  if_ne	mov	arg03, local03
2ac78     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2ac7c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2ac80     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2ac84     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2ac88     44 01 90 5D |  if_ne	jmp	#LR__4413
2ac8c     10 25 32 F9 | 	getword	local04, local02, #0
2ac90     55 00 00 FF 
2ac94     55 24 0E F2 | 	cmp	local04, ##43605 wz
2ac98     2C 00 90 5D |  if_ne	jmp	#LR__4410
2ac9c     34 1E 06 F1 | 	add	local01, #52
2aca0     0F 13 02 F6 | 	mov	arg01, local01
2aca4     34 1E 86 F1 | 	sub	local01, #52
2aca8     52 12 06 F1 | 	add	arg01, #82
2acac     80 01 00 FF 
2acb0     FC 14 06 F6 | 	mov	arg02, ##@LR__5004
2acb4     08 16 06 F6 | 	mov	arg03, #8
2acb8     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2acbc     00 FA 0D F2 | 	cmp	result1, #0 wz
2acc0                 | ' 			return 0;
2acc0     00 FA 05 A6 |  if_e	mov	result1, #0
2acc4     20 01 90 AD |  if_e	jmp	#LR__4414
2acc8                 | LR__4410
2acc8     34 1E 06 F1 | 	add	local01, #52
2accc     0F 13 02 F6 | 	mov	arg01, local01
2acd0     0B 12 06 F1 | 	add	arg01, #11
2acd4                 | ' {
2acd4                 | ' 
2acd4                 | ' 	return *((WORD*)ptr);
2acd4     09 FB E1 FA | 	rdword	result1, arg01
2acd8     0D 1E 06 F1 | 	add	local01, #13
2acdc     0F 23 C2 FA | 	rdbyte	local03, local01
2ace0     41 1E 86 F1 | 	sub	local01, #65
2ace4     FD 24 32 F9 | 	getword	local04, result1, #0
2ace8     FD 14 32 F9 | 	getword	arg02, result1, #0
2acec     01 14 86 F1 | 	sub	arg02, #1
2acf0     0A 25 CA F7 | 	test	local04, arg02 wz
2acf4     D8 00 90 5D |  if_ne	jmp	#LR__4412
2acf8     FD 14 32 F9 | 	getword	arg02, result1, #0
2acfc     01 00 00 FF 
2ad00     00 14 16 F2 | 	cmp	arg02, ##512 wc
2ad04     C8 00 90 CD |  if_b	jmp	#LR__4412
2ad08     FD 14 32 F9 | 	getword	arg02, result1, #0
2ad0c     01 00 00 FF 
2ad10     01 14 16 F2 | 	cmp	arg02, ##513 wc
2ad14     B8 00 90 3D |  if_ae	jmp	#LR__4412
2ad18     11 13 02 F6 | 	mov	arg01, local03
2ad1c     07 12 4E F7 | 	zerox	arg01, #7 wz
2ad20     AC 00 90 AD |  if_e	jmp	#LR__4412
2ad24     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2ad28     11 23 E2 F8 | 	getbyte	local03, local03, #0
2ad2c     01 22 86 F1 | 	sub	local03, #1
2ad30     11 13 CA F7 | 	test	arg01, local03 wz
2ad34     98 00 90 5D |  if_ne	jmp	#LR__4412
2ad38     34 1E 06 F1 | 	add	local01, #52
2ad3c     0F 13 02 F6 | 	mov	arg01, local01
2ad40     34 1E 86 F1 | 	sub	local01, #52
2ad44     0E 12 06 F1 | 	add	arg01, #14
2ad48                 | ' {
2ad48                 | ' 
2ad48                 | ' 	return *((WORD*)ptr);
2ad48     09 FB E9 FA | 	rdword	result1, arg01 wz
2ad4c     80 00 90 AD |  if_e	jmp	#LR__4412
2ad50     44 1E 06 F1 | 	add	local01, #68
2ad54     0F 13 C2 FA | 	rdbyte	arg01, local01
2ad58     44 1E 86 F1 | 	sub	local01, #68
2ad5c     01 12 86 F1 | 	sub	arg01, #1
2ad60     02 12 16 F2 | 	cmp	arg01, #2 wc
2ad64     68 00 90 3D |  if_ae	jmp	#LR__4412
2ad68     34 1E 06 F1 | 	add	local01, #52
2ad6c     0F 13 02 F6 | 	mov	arg01, local01
2ad70     34 1E 86 F1 | 	sub	local01, #52
2ad74     11 12 06 F1 | 	add	arg01, #17
2ad78                 | ' {
2ad78                 | ' 
2ad78                 | ' 	return *((WORD*)ptr);
2ad78     09 FB E9 FA | 	rdword	result1, arg01 wz
2ad7c     50 00 90 AD |  if_e	jmp	#LR__4412
2ad80     34 1E 06 F1 | 	add	local01, #52
2ad84     0F 13 02 F6 | 	mov	arg01, local01
2ad88     34 1E 86 F1 | 	sub	local01, #52
2ad8c     13 12 06 F1 | 	add	arg01, #19
2ad90                 | ' {
2ad90                 | ' 
2ad90                 | ' 	return *((WORD*)ptr);
2ad90     09 FB E1 FA | 	rdword	result1, arg01
2ad94     FD 22 32 F9 | 	getword	local03, result1, #0
2ad98     80 22 16 F2 | 	cmp	local03, #128 wc
2ad9c     20 00 90 3D |  if_ae	jmp	#LR__4411
2ada0     34 1E 06 F1 | 	add	local01, #52
2ada4     0F 13 02 F6 | 	mov	arg01, local01
2ada8     34 1E 86 F1 | 	sub	local01, #52
2adac     20 12 06 F1 | 	add	arg01, #32
2adb0                 | ' {
2adb0                 | ' 
2adb0                 | ' 	return *((DWORD*)ptr);
2adb0     09 FB 01 FB | 	rdlong	result1, arg01
2adb4     80 00 00 FF 
2adb8     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2adbc     10 00 90 CD |  if_b	jmp	#LR__4412
2adc0                 | LR__4411
2adc0     4A 1E 06 F1 | 	add	local01, #74
2adc4                 | ' {
2adc4                 | ' 
2adc4                 | ' 	return *((WORD*)ptr);
2adc4     0F FB E9 FA | 	rdword	result1, local01 wz
2adc8                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2adc8                 | ' 			&& ld_word(fs->win +  14 ) != 0
2adc8                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2adc8                 | ' 			&& ld_word(fs->win +  17 ) != 0
2adc8                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2adc8                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2adc8                 | ' 				return 0;
2adc8     00 FA 05 56 |  if_ne	mov	result1, #0
2adcc     18 00 90 5D |  if_ne	jmp	#LR__4414
2add0                 | LR__4412
2add0                 | LR__4413
2add0                 | ' 		}
2add0                 | ' 	}
2add0                 | ' 	return sign == 0xAA55 ? 2 : 3;
2add0     10 23 32 F9 | 	getword	local03, local02, #0
2add4     55 00 00 FF 
2add8     55 22 0E F2 | 	cmp	local03, ##43605 wz
2addc     02 24 06 A6 |  if_e	mov	local04, #2
2ade0     03 24 06 56 |  if_ne	mov	local04, #3
2ade4     12 FB 01 F6 | 	mov	result1, local04
2ade8                 | LR__4414
2ade8     A7 F0 03 F6 | 	mov	ptra, fp
2adec     B2 00 A0 FD | 	call	#popregs_
2adf0                 | _fatfs_cc_check_fs_ret
2adf0     2D 00 64 FD | 	ret
2adf4                 | 
2adf4                 | _fatfs_cc_find_volume
2adf4     05 4A 05 F6 | 	mov	COUNT_, #5
2adf8     A8 00 A0 FD | 	call	#pushregs_
2adfc     24 F0 07 F1 | 	add	ptra, #36
2ae00     09 1F 02 F6 | 	mov	local01, arg01
2ae04     0A 21 02 F6 | 	mov	local02, arg02
2ae08     0F 13 02 F6 | 	mov	arg01, local01
2ae0c     00 14 06 F6 | 	mov	arg02, #0
2ae10     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2ae14     02 FA 0D F2 | 	cmp	result1, #2 wz
2ae18     0C 00 90 AD |  if_e	jmp	#LR__4420
2ae1c     03 FA 15 F2 | 	cmp	result1, #3 wc
2ae20     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2ae24     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4428
2ae28                 | LR__4420
2ae28                 | ' 	for (i = 0; i < 4; i++) {
2ae28     00 22 06 F6 | 	mov	local03, #0
2ae2c     97 26 48 FB | 	callpa	#(@LR__4422-@LR__4421)>>2,fcache_load_ptr_
2ae30                 | LR__4421
2ae30     04 22 16 F2 | 	cmp	local03, #4 wc
2ae34     44 00 90 3D |  if_ae	jmp	#LR__4423
2ae38     11 25 02 F6 | 	mov	local04, local03
2ae3c     02 24 66 F0 | 	shl	local04, #2
2ae40     14 4E 05 F1 | 	add	fp, #20
2ae44     A7 24 02 F1 | 	add	local04, fp
2ae48     34 1E 06 F1 | 	add	local01, #52
2ae4c     0F 13 02 F6 | 	mov	arg01, local01
2ae50     34 1E 86 F1 | 	sub	local01, #52
2ae54     BE 13 06 F1 | 	add	arg01, #446
2ae58     11 15 02 F6 | 	mov	arg02, local03
2ae5c     04 14 66 F0 | 	shl	arg02, #4
2ae60     0A 13 02 F1 | 	add	arg01, arg02
2ae64     08 12 06 F1 | 	add	arg01, #8
2ae68                 | ' {
2ae68                 | ' 
2ae68                 | ' 	return *((DWORD*)ptr);
2ae68     09 FB 01 FB | 	rdlong	result1, arg01
2ae6c     14 4E 85 F1 | 	sub	fp, #20
2ae70     12 FB 61 FC | 	wrlong	result1, local04
2ae74     01 22 06 F1 | 	add	local03, #1
2ae78     B4 FF 9F FD | 	jmp	#LR__4421
2ae7c                 | LR__4422
2ae7c                 | LR__4423
2ae7c     00 20 0E F2 | 	cmp	local02, #0 wz
2ae80     10 25 02 56 |  if_ne	mov	local04, local02
2ae84     01 24 86 51 |  if_ne	sub	local04, #1
2ae88     00 24 06 A6 |  if_e	mov	local04, #0
2ae8c     12 23 02 F6 | 	mov	local03, local04
2ae90                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2ae90                 | ' 	}
2ae90                 | ' 	i = part ? part - 1 : 0;
2ae90                 | ' 	do {
2ae90                 | LR__4424
2ae90     11 25 02 F6 | 	mov	local04, local03
2ae94     02 24 66 F0 | 	shl	local04, #2
2ae98     14 4E 05 F1 | 	add	fp, #20
2ae9c     A7 24 02 F1 | 	add	local04, fp
2aea0     12 25 0A FB | 	rdlong	local04, local04 wz
2aea4     14 4E 85 F1 | 	sub	fp, #20
2aea8     28 00 90 AD |  if_e	jmp	#LR__4425
2aeac     11 25 02 F6 | 	mov	local04, local03
2aeb0     02 24 66 F0 | 	shl	local04, #2
2aeb4     14 4E 05 F1 | 	add	fp, #20
2aeb8     A7 24 02 F1 | 	add	local04, fp
2aebc     12 15 02 FB | 	rdlong	arg02, local04
2aec0     0F 13 02 F6 | 	mov	arg01, local01
2aec4     14 4E 85 F1 | 	sub	fp, #20
2aec8     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2aecc     FD 24 02 F6 | 	mov	local04, result1
2aed0     04 00 90 FD | 	jmp	#LR__4426
2aed4                 | LR__4425
2aed4     03 24 06 F6 | 	mov	local04, #3
2aed8                 | LR__4426
2aed8     12 27 02 F6 | 	mov	local05, local04
2aedc     00 20 0E F2 | 	cmp	local02, #0 wz
2aee0     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2aee4     0C 00 90 8D |  if_c_and_z	jmp	#LR__4427
2aee8     01 22 06 A1 |  if_e	add	local03, #1
2aeec     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2aef0     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4424
2aef4                 | LR__4427
2aef4                 | ' 	return fmt;
2aef4     13 FB 01 F6 | 	mov	result1, local05
2aef8                 | LR__4428
2aef8     A7 F0 03 F6 | 	mov	ptra, fp
2aefc     B2 00 A0 FD | 	call	#popregs_
2af00                 | _fatfs_cc_find_volume_ret
2af00     2D 00 64 FD | 	ret
2af04                 | 
2af04                 | _fatfs_cc_mount_volume
2af04     0B 4A 05 F6 | 	mov	COUNT_, #11
2af08     A8 00 A0 FD | 	call	#pushregs_
2af0c     0A 1F 02 F6 | 	mov	local01, arg02
2af10     0B 21 02 F6 | 	mov	local02, arg03
2af14     0F 01 68 FC | 	wrlong	#0, local01
2af18     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2af1c     FD 22 02 F6 | 	mov	local03, result1
2af20     00 22 56 F2 | 	cmps	local03, #0 wc
2af24     0B FA 05 C6 |  if_b	mov	result1, #11
2af28     3C 05 90 CD |  if_b	jmp	#LR__4440
2af2c     11 17 02 F6 | 	mov	arg03, local03
2af30     02 16 66 F0 | 	shl	arg03, #2
2af34     F2 16 02 F1 | 	add	arg03, objptr
2af38     0B 25 0A FB | 	rdlong	local04, arg03 wz
2af3c     0C FA 05 A6 |  if_e	mov	result1, #12
2af40     24 05 90 AD |  if_e	jmp	#LR__4440
2af44     0F 25 62 FC | 	wrlong	local04, local01
2af48     10 21 E2 F8 | 	getbyte	local02, local02, #0
2af4c     FE 20 06 F5 | 	and	local02, #254
2af50     12 17 CA FA | 	rdbyte	arg03, local04 wz
2af54     4C 00 90 AD |  if_e	jmp	#LR__4431
2af58     01 24 06 F1 | 	add	local04, #1
2af5c     12 13 CA FA | 	rdbyte	arg01, local04 wz
2af60     01 24 86 F1 | 	sub	local04, #1
2af64     01 FA 05 56 |  if_ne	mov	result1, #1
2af68                 | ' 
2af68                 | ' 	return Stat;
2af68     01 00 00 AF 
2af6c     20 E4 05 A1 |  if_e	add	objptr, ##544
2af70     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2af74     01 00 00 AF 
2af78     20 E4 85 A1 |  if_e	sub	objptr, ##544
2af7c     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2af80     01 16 CE F7 | 	test	arg03, #1 wz
2af84     1C 00 90 5D |  if_ne	jmp	#LR__4430
2af88     00 20 0E F2 | 	cmp	local02, #0 wz
2af8c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2af90     04 FA CD 57 |  if_ne	test	result1, #4 wz
2af94                 | ' 				return FR_WRITE_PROTECTED;
2af94     0A FA 05 56 |  if_ne	mov	result1, #10
2af98     CC 04 90 5D |  if_ne	jmp	#LR__4440
2af9c                 | ' 			}
2af9c                 | ' 			return FR_OK;
2af9c     00 FA 05 F6 | 	mov	result1, #0
2afa0     C4 04 90 FD | 	jmp	#LR__4440
2afa4                 | LR__4430
2afa4                 | LR__4431
2afa4     12 01 48 FC | 	wrbyte	#0, local04
2afa8     01 24 06 F1 | 	add	local04, #1
2afac     12 23 42 FC | 	wrbyte	local03, local04
2afb0     12 13 C2 FA | 	rdbyte	arg01, local04
2afb4     01 24 86 F1 | 	sub	local04, #1
2afb8     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2afbc     FD 16 02 F6 | 	mov	arg03, result1
2afc0     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2afc4     01 26 CE F7 | 	test	local05, #1 wz
2afc8                 | ' 		return FR_NOT_READY;
2afc8     03 FA 05 56 |  if_ne	mov	result1, #3
2afcc     98 04 90 5D |  if_ne	jmp	#LR__4440
2afd0     00 20 0E F2 | 	cmp	local02, #0 wz
2afd4     0B 27 02 56 |  if_ne	mov	local05, arg03
2afd8     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2afdc     04 26 CE 57 |  if_ne	test	local05, #4 wz
2afe0                 | ' 		return FR_WRITE_PROTECTED;
2afe0     0A FA 05 56 |  if_ne	mov	result1, #10
2afe4     80 04 90 5D |  if_ne	jmp	#LR__4440
2afe8     12 13 02 F6 | 	mov	arg01, local04
2afec     00 14 06 F6 | 	mov	arg02, #0
2aff0     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2aff4     FD 12 02 F6 | 	mov	arg01, result1
2aff8     04 12 0E F2 | 	cmp	arg01, #4 wz
2affc     01 FA 05 A6 |  if_e	mov	result1, #1
2b000     64 04 90 AD |  if_e	jmp	#LR__4440
2b004     02 12 16 F2 | 	cmp	arg01, #2 wc
2b008     0D FA 05 36 |  if_ae	mov	result1, #13
2b00c     58 04 90 3D |  if_ae	jmp	#LR__4440
2b010     30 24 06 F1 | 	add	local04, #48
2b014     12 29 02 FB | 	rdlong	local06, local04
2b018     04 24 06 F1 | 	add	local04, #4
2b01c     12 13 02 F6 | 	mov	arg01, local04
2b020     34 24 86 F1 | 	sub	local04, #52
2b024     0B 12 06 F1 | 	add	arg01, #11
2b028                 | ' {
2b028                 | ' 
2b028                 | ' 	return *((WORD*)ptr);
2b028     09 FB E1 FA | 	rdword	result1, arg01
2b02c     01 00 00 FF 
2b030     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b034     0D FA 05 56 |  if_ne	mov	result1, #13
2b038     2C 04 90 5D |  if_ne	jmp	#LR__4440
2b03c     34 24 06 F1 | 	add	local04, #52
2b040     12 13 02 F6 | 	mov	arg01, local04
2b044     34 24 86 F1 | 	sub	local04, #52
2b048     16 12 06 F1 | 	add	arg01, #22
2b04c                 | ' {
2b04c                 | ' 
2b04c                 | ' 	return *((WORD*)ptr);
2b04c     09 FB E1 FA | 	rdword	result1, arg01
2b050     FD 2A 0A F6 | 	mov	local07, result1 wz
2b054     18 00 90 5D |  if_ne	jmp	#LR__4432
2b058     34 24 06 F1 | 	add	local04, #52
2b05c     12 13 02 F6 | 	mov	arg01, local04
2b060     34 24 86 F1 | 	sub	local04, #52
2b064     24 12 06 F1 | 	add	arg01, #36
2b068                 | ' {
2b068                 | ' 
2b068                 | ' 	return *((DWORD*)ptr);
2b068     09 FB 01 FB | 	rdlong	result1, arg01
2b06c     FD 2A 02 F6 | 	mov	local07, result1
2b070                 | LR__4432
2b070     1C 24 06 F1 | 	add	local04, #28
2b074     12 2B 62 FC | 	wrlong	local07, local04
2b078     28 24 06 F1 | 	add	local04, #40
2b07c     12 27 C2 FA | 	rdbyte	local05, local04
2b080     42 24 86 F1 | 	sub	local04, #66
2b084     12 27 42 FC | 	wrbyte	local05, local04
2b088     12 27 C2 FA | 	rdbyte	local05, local04
2b08c     02 24 86 F1 | 	sub	local04, #2
2b090     01 26 0E F2 | 	cmp	local05, #1 wz
2b094     02 24 06 51 |  if_ne	add	local04, #2
2b098     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b09c     02 24 86 51 |  if_ne	sub	local04, #2
2b0a0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b0a4     0D FA 05 56 |  if_ne	mov	result1, #13
2b0a8     BC 03 90 5D |  if_ne	jmp	#LR__4440
2b0ac     02 24 06 F1 | 	add	local04, #2
2b0b0     12 27 C2 FA | 	rdbyte	local05, local04
2b0b4     13 2B 02 FD | 	qmul	local07, local05
2b0b8     3F 24 06 F1 | 	add	local04, #63
2b0bc     12 27 C2 FA | 	rdbyte	local05, local04
2b0c0     37 24 86 F1 | 	sub	local04, #55
2b0c4     12 27 52 FC | 	wrword	local05, local04
2b0c8     12 27 EA FA | 	rdword	local05, local04 wz
2b0cc     0A 24 86 F1 | 	sub	local04, #10
2b0d0     18 2A 62 FD | 	getqx	local07
2b0d4     20 00 90 AD |  if_e	jmp	#LR__4433
2b0d8     0A 24 06 F1 | 	add	local04, #10
2b0dc     12 27 E2 FA | 	rdword	local05, local04
2b0e0     13 23 32 F9 | 	getword	local03, local05, #0
2b0e4     0A 24 86 F1 | 	sub	local04, #10
2b0e8     13 27 32 F9 | 	getword	local05, local05, #0
2b0ec     01 26 86 F1 | 	sub	local05, #1
2b0f0     13 23 CA F7 | 	test	local03, local05 wz
2b0f4     08 00 90 AD |  if_e	jmp	#LR__4434
2b0f8                 | LR__4433
2b0f8     0D FA 05 F6 | 	mov	result1, #13
2b0fc     68 03 90 FD | 	jmp	#LR__4440
2b100                 | LR__4434
2b100     34 24 06 F1 | 	add	local04, #52
2b104     12 13 02 F6 | 	mov	arg01, local04
2b108     11 12 06 F1 | 	add	arg01, #17
2b10c                 | ' {
2b10c                 | ' 
2b10c                 | ' 	return *((WORD*)ptr);
2b10c     09 FB E1 FA | 	rdword	result1, arg01
2b110     2C 24 86 F1 | 	sub	local04, #44
2b114     12 FB 51 FC | 	wrword	result1, local04
2b118     12 27 E2 FA | 	rdword	local05, local04
2b11c     08 24 86 F1 | 	sub	local04, #8
2b120     13 13 52 F6 | 	abs	arg01, local05 wc
2b124     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b128     09 13 8A F6 | 	negc	arg01, arg01 wz
2b12c     0D FA 05 56 |  if_ne	mov	result1, #13
2b130     34 03 90 5D |  if_ne	jmp	#LR__4440
2b134     34 24 06 F1 | 	add	local04, #52
2b138     12 13 02 F6 | 	mov	arg01, local04
2b13c     34 24 86 F1 | 	sub	local04, #52
2b140     13 12 06 F1 | 	add	arg01, #19
2b144                 | ' {
2b144                 | ' 
2b144                 | ' 	return *((WORD*)ptr);
2b144     09 FB E1 FA | 	rdword	result1, arg01
2b148     FD 2C 0A F6 | 	mov	local08, result1 wz
2b14c     34 24 06 A1 |  if_e	add	local04, #52
2b150     12 13 02 A6 |  if_e	mov	arg01, local04
2b154     34 24 86 A1 |  if_e	sub	local04, #52
2b158     20 12 06 A1 |  if_e	add	arg01, #32
2b15c                 | ' {
2b15c                 | ' 
2b15c                 | ' 	return *((DWORD*)ptr);
2b15c     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b160     34 24 06 F1 | 	add	local04, #52
2b164     12 13 02 F6 | 	mov	arg01, local04
2b168     34 24 86 F1 | 	sub	local04, #52
2b16c     0E 12 06 F1 | 	add	arg01, #14
2b170                 | ' {
2b170                 | ' 
2b170                 | ' 	return *((WORD*)ptr);
2b170     09 FB E1 FA | 	rdword	result1, arg01
2b174     FD 12 02 F6 | 	mov	arg01, result1
2b178     09 27 02 F6 | 	mov	local05, arg01
2b17c     0F 26 4E F7 | 	zerox	local05, #15 wz
2b180     0D FA 05 A6 |  if_e	mov	result1, #13
2b184     E0 02 90 AD |  if_e	jmp	#LR__4440
2b188     09 2F 32 F9 | 	getword	local09, arg01, #0
2b18c     15 2F 02 F1 | 	add	local09, local07
2b190     08 24 06 F1 | 	add	local04, #8
2b194     12 27 E2 FA | 	rdword	local05, local04
2b198     08 24 86 F1 | 	sub	local04, #8
2b19c     13 27 52 F6 | 	abs	local05, local05 wc
2b1a0     04 26 46 F0 | 	shr	local05, #4
2b1a4     13 2F 82 F3 | 	sumc	local09, local05
2b1a8     17 2D 12 F2 | 	cmp	local08, local09 wc
2b1ac     0D FA 05 C6 |  if_b	mov	result1, #13
2b1b0     B4 02 90 CD |  if_b	jmp	#LR__4440
2b1b4     17 2D 82 F1 | 	sub	local08, local09
2b1b8     0A 24 06 F1 | 	add	local04, #10
2b1bc     12 27 E2 FA | 	rdword	local05, local04
2b1c0     13 2D 12 FD | 	qdiv	local08, local05
2b1c4     0A 24 86 F1 | 	sub	local04, #10
2b1c8     18 26 62 FD | 	getqx	local05
2b1cc     00 26 0E F2 | 	cmp	local05, #0 wz
2b1d0     0D FA 05 A6 |  if_e	mov	result1, #13
2b1d4     90 02 90 AD |  if_e	jmp	#LR__4440
2b1d8     00 30 06 F6 | 	mov	local10, #0
2b1dc     FF FF 07 FF 
2b1e0     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b1e4     03 30 06 C6 |  if_b	mov	local10, #3
2b1e8     7F 00 00 FF 
2b1ec     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b1f0     02 30 06 C6 |  if_b	mov	local10, #2
2b1f4     07 00 00 FF 
2b1f8     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b1fc     01 30 06 C6 |  if_b	mov	local10, #1
2b200     00 30 0E F2 | 	cmp	local10, #0 wz
2b204     0D FA 05 A6 |  if_e	mov	result1, #13
2b208     5C 02 90 AD |  if_e	jmp	#LR__4440
2b20c     02 26 06 F1 | 	add	local05, #2
2b210     18 24 06 F1 | 	add	local04, #24
2b214     12 27 62 FC | 	wrlong	local05, local04
2b218     08 24 06 F1 | 	add	local04, #8
2b21c     12 29 62 FC | 	wrlong	local06, local04
2b220     14 27 02 F6 | 	mov	local05, local06
2b224     09 13 32 F9 | 	getword	arg01, arg01, #0
2b228     09 27 02 F1 | 	add	local05, arg01
2b22c     04 24 06 F1 | 	add	local04, #4
2b230     12 27 62 FC | 	wrlong	local05, local04
2b234     14 27 02 F6 | 	mov	local05, local06
2b238     17 27 02 F1 | 	add	local05, local09
2b23c     08 24 06 F1 | 	add	local04, #8
2b240     12 27 62 FC | 	wrlong	local05, local04
2b244     2C 24 86 F1 | 	sub	local04, #44
2b248     03 30 0E F2 | 	cmp	local10, #3 wz
2b24c     5C 00 90 5D |  if_ne	jmp	#LR__4435
2b250     34 24 06 F1 | 	add	local04, #52
2b254     12 13 02 F6 | 	mov	arg01, local04
2b258     34 24 86 F1 | 	sub	local04, #52
2b25c     2A 12 06 F1 | 	add	arg01, #42
2b260                 | ' {
2b260                 | ' 
2b260                 | ' 	return *((WORD*)ptr);
2b260     09 FB E9 FA | 	rdword	result1, arg01 wz
2b264     0D FA 05 56 |  if_ne	mov	result1, #13
2b268     FC 01 90 5D |  if_ne	jmp	#LR__4440
2b26c     08 24 06 F1 | 	add	local04, #8
2b270     12 27 EA FA | 	rdword	local05, local04 wz
2b274     08 24 86 F1 | 	sub	local04, #8
2b278     0D FA 05 56 |  if_ne	mov	result1, #13
2b27c     E8 01 90 5D |  if_ne	jmp	#LR__4440
2b280     34 24 06 F1 | 	add	local04, #52
2b284     12 13 02 F6 | 	mov	arg01, local04
2b288     2C 12 06 F1 | 	add	arg01, #44
2b28c                 | ' {
2b28c                 | ' 
2b28c                 | ' 	return *((DWORD*)ptr);
2b28c     09 FB 01 FB | 	rdlong	result1, arg01
2b290     0C 24 86 F1 | 	sub	local04, #12
2b294     12 FB 61 FC | 	wrlong	result1, local04
2b298     10 24 86 F1 | 	sub	local04, #16
2b29c     12 33 02 FB | 	rdlong	local11, local04
2b2a0     18 24 86 F1 | 	sub	local04, #24
2b2a4     02 32 66 F0 | 	shl	local11, #2
2b2a8     6C 00 90 FD | 	jmp	#LR__4437
2b2ac                 | LR__4435
2b2ac     08 24 06 F1 | 	add	local04, #8
2b2b0     12 27 EA FA | 	rdword	local05, local04 wz
2b2b4     08 24 86 F1 | 	sub	local04, #8
2b2b8     0D FA 05 A6 |  if_e	mov	result1, #13
2b2bc     A8 01 90 AD |  if_e	jmp	#LR__4440
2b2c0     24 24 06 F1 | 	add	local04, #36
2b2c4     12 27 02 FB | 	rdlong	local05, local04
2b2c8     15 27 02 F1 | 	add	local05, local07
2b2cc     04 24 06 F1 | 	add	local04, #4
2b2d0     12 27 62 FC | 	wrlong	local05, local04
2b2d4     28 24 86 F1 | 	sub	local04, #40
2b2d8     02 30 0E F2 | 	cmp	local10, #2 wz
2b2dc     18 24 06 A1 |  if_e	add	local04, #24
2b2e0     12 27 02 AB |  if_e	rdlong	local05, local04
2b2e4     18 24 86 A1 |  if_e	sub	local04, #24
2b2e8     01 26 66 A0 |  if_e	shl	local05, #1
2b2ec     24 00 90 AD |  if_e	jmp	#LR__4436
2b2f0     18 24 06 F1 | 	add	local04, #24
2b2f4     12 33 02 FB | 	rdlong	local11, local04
2b2f8     19 27 02 F6 | 	mov	local05, local11
2b2fc     01 26 66 F0 | 	shl	local05, #1
2b300     19 27 02 F1 | 	add	local05, local11
2b304     01 26 46 F0 | 	shr	local05, #1
2b308     18 24 86 F1 | 	sub	local04, #24
2b30c     01 32 06 F5 | 	and	local11, #1
2b310     19 27 02 F1 | 	add	local05, local11
2b314                 | LR__4436
2b314     13 33 02 F6 | 	mov	local11, local05
2b318                 | LR__4437
2b318     FF 33 06 F1 | 	add	local11, #511
2b31c     09 32 46 F0 | 	shr	local11, #9
2b320     1C 24 06 F1 | 	add	local04, #28
2b324     12 17 02 FB | 	rdlong	arg03, local04
2b328     1C 24 86 F1 | 	sub	local04, #28
2b32c     19 17 12 F2 | 	cmp	arg03, local11 wc
2b330     0D FA 05 C6 |  if_b	mov	result1, #13
2b334     30 01 90 CD |  if_b	jmp	#LR__4440
2b338     14 24 06 F1 | 	add	local04, #20
2b33c     FF FF FF FF 
2b340     12 FF 6B FC | 	wrlong	##-1, local04
2b344     04 24 86 F1 | 	sub	local04, #4
2b348     FF FF FF FF 
2b34c     12 FF 6B FC | 	wrlong	##-1, local04
2b350     0C 24 86 F1 | 	sub	local04, #12
2b354     12 01 49 FC | 	wrbyte	#128, local04
2b358     04 24 86 F1 | 	sub	local04, #4
2b35c     03 30 0E F2 | 	cmp	local10, #3 wz
2b360     D0 00 90 5D |  if_ne	jmp	#LR__4439
2b364     34 24 06 F1 | 	add	local04, #52
2b368     12 13 02 F6 | 	mov	arg01, local04
2b36c     34 24 86 F1 | 	sub	local04, #52
2b370     30 12 06 F1 | 	add	arg01, #48
2b374                 | ' {
2b374                 | ' 
2b374                 | ' 	return *((WORD*)ptr);
2b374     09 FB E1 FA | 	rdword	result1, arg01
2b378     FD 26 32 F9 | 	getword	local05, result1, #0
2b37c     01 26 0E F2 | 	cmp	local05, #1 wz
2b380     B0 00 90 5D |  if_ne	jmp	#LR__4439
2b384     01 28 06 F1 | 	add	local06, #1
2b388     12 13 02 F6 | 	mov	arg01, local04
2b38c     14 15 02 F6 | 	mov	arg02, local06
2b390     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b394     00 FA 0D F2 | 	cmp	result1, #0 wz
2b398     98 00 90 5D |  if_ne	jmp	#LR__4439
2b39c     04 24 06 F1 | 	add	local04, #4
2b3a0     12 01 48 FC | 	wrbyte	#0, local04
2b3a4     30 24 06 F1 | 	add	local04, #48
2b3a8     12 13 02 F6 | 	mov	arg01, local04
2b3ac     34 24 86 F1 | 	sub	local04, #52
2b3b0     FE 13 06 F1 | 	add	arg01, #510
2b3b4                 | ' {
2b3b4                 | ' 
2b3b4                 | ' 	return *((WORD*)ptr);
2b3b4     09 FB E1 FA | 	rdword	result1, arg01
2b3b8     FD 26 32 F9 | 	getword	local05, result1, #0
2b3bc     55 00 00 FF 
2b3c0     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b3c4     34 24 06 A1 |  if_e	add	local04, #52
2b3c8     12 13 02 A6 |  if_e	mov	arg01, local04
2b3cc     34 24 86 A1 |  if_e	sub	local04, #52
2b3d0                 | ' {
2b3d0                 | ' 
2b3d0                 | ' 	return *((DWORD*)ptr);
2b3d0     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b3d4     A9 B0 20 AF 
2b3d8     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b3dc     54 00 90 5D |  if_ne	jmp	#LR__4438
2b3e0     34 24 06 F1 | 	add	local04, #52
2b3e4     12 13 02 F6 | 	mov	arg01, local04
2b3e8     34 24 86 F1 | 	sub	local04, #52
2b3ec     E4 13 06 F1 | 	add	arg01, #484
2b3f0                 | ' {
2b3f0                 | ' 
2b3f0                 | ' 	return *((DWORD*)ptr);
2b3f0     09 FB 01 FB | 	rdlong	result1, arg01
2b3f4     B9 A0 30 FF 
2b3f8     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b3fc     34 00 90 5D |  if_ne	jmp	#LR__4438
2b400     34 24 06 F1 | 	add	local04, #52
2b404     12 13 02 F6 | 	mov	arg01, local04
2b408     E8 13 06 F1 | 	add	arg01, #488
2b40c                 | ' {
2b40c                 | ' 
2b40c                 | ' 	return *((DWORD*)ptr);
2b40c     09 FB 01 FB | 	rdlong	result1, arg01
2b410     20 24 86 F1 | 	sub	local04, #32
2b414     12 FB 61 FC | 	wrlong	result1, local04
2b418     20 24 06 F1 | 	add	local04, #32
2b41c     12 13 02 F6 | 	mov	arg01, local04
2b420     EC 13 06 F1 | 	add	arg01, #492
2b424                 | ' {
2b424                 | ' 
2b424                 | ' 	return *((DWORD*)ptr);
2b424     09 FB 01 FB | 	rdlong	result1, arg01
2b428     24 24 86 F1 | 	sub	local04, #36
2b42c     12 FB 61 FC | 	wrlong	result1, local04
2b430     10 24 86 F1 | 	sub	local04, #16
2b434                 | LR__4438
2b434                 | LR__4439
2b434     12 31 42 FC | 	wrbyte	local10, local04
2b438     04 E4 05 F1 | 	add	objptr, #4
2b43c     F2 26 E2 FA | 	rdword	local05, objptr
2b440     01 26 06 F1 | 	add	local05, #1
2b444     F2 26 52 FC | 	wrword	local05, objptr
2b448     F2 32 E2 FA | 	rdword	local11, objptr
2b44c     06 24 06 F1 | 	add	local04, #6
2b450     12 33 52 FC | 	wrword	local11, local04
2b454     04 E4 05 F1 | 	add	objptr, #4
2b458     06 24 06 F1 | 	add	local04, #6
2b45c     12 E5 61 FC | 	wrlong	objptr, local04
2b460                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b460                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b460                 | ' 			{
2b460                 | ' 
2b460                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b460                 | ' 
2b460                 | ' 
2b460                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b460                 | ' 
2b460                 | ' 			}
2b460                 | ' 		}
2b460                 | ' 
2b460                 | ' 
2b460                 | ' 	}
2b460                 | ' 
2b460                 | ' 	fs->fs_type = (BYTE)fmt;
2b460                 | ' 	fs->id = ++Fsid;
2b460                 | ' 
2b460                 | ' 	fs->lfnbuf = LfnBuf;
2b460                 | ' #line 3567 "ff.c"
2b460                 | ' 	return FR_OK;
2b460     00 FA 05 F6 | 	mov	result1, #0
2b464     08 E4 85 F1 | 	sub	objptr, #8
2b468                 | LR__4440
2b468     A7 F0 03 F6 | 	mov	ptra, fp
2b46c     B2 00 A0 FD | 	call	#popregs_
2b470                 | _fatfs_cc_mount_volume_ret
2b470     2D 00 64 FD | 	ret
2b474                 | 
2b474                 | _fatfs_cc_validate
2b474     09 01 0A F6 | 	mov	_var01, arg01 wz
2b478     09 02 06 F6 | 	mov	_var02, #9
2b47c     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b480     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b484     50 00 90 AD |  if_e	jmp	#LR__4450
2b488     04 00 06 F1 | 	add	_var01, #4
2b48c     00 07 E2 FA | 	rdword	_var04, _var01
2b490     04 00 86 F1 | 	sub	_var01, #4
2b494     00 13 02 FB | 	rdlong	arg01, _var01
2b498     06 12 06 F1 | 	add	arg01, #6
2b49c     09 FB E1 FA | 	rdword	result1, arg01
2b4a0     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b4a4     30 00 90 5D |  if_ne	jmp	#LR__4450
2b4a8     00 07 02 FB | 	rdlong	_var04, _var01
2b4ac     01 06 06 F1 | 	add	_var04, #1
2b4b0     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b4b4     01 FA 05 56 |  if_ne	mov	result1, #1
2b4b8                 | ' 
2b4b8                 | ' 	return Stat;
2b4b8     01 00 00 AF 
2b4bc     20 E4 05 A1 |  if_e	add	objptr, ##544
2b4c0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b4c4     01 00 00 AF 
2b4c8     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b4cc     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b4d0     01 04 CE F7 | 	test	_var03, #1 wz
2b4d4     00 02 06 A6 |  if_e	mov	_var02, #0
2b4d8                 | LR__4450
2b4d8     00 02 0E F2 | 	cmp	_var02, #0 wz
2b4dc     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b4e0     00 04 06 56 |  if_ne	mov	_var03, #0
2b4e4     0A 05 62 FC | 	wrlong	_var03, arg02
2b4e8                 | ' 			res = FR_OK;
2b4e8                 | ' 		}
2b4e8                 | ' 
2b4e8                 | ' 	}
2b4e8                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b4e8                 | ' 	return res;
2b4e8     01 FB 01 F6 | 	mov	result1, _var02
2b4ec                 | _fatfs_cc_validate_ret
2b4ec     2D 00 64 FD | 	ret
2b4f0                 | 
2b4f0                 | _fatfs_cc_f_mount
2b4f0     01 4A 05 F6 | 	mov	COUNT_, #1
2b4f4     A8 00 A0 FD | 	call	#pushregs_
2b4f8     20 F0 07 F1 | 	add	ptra, #32
2b4fc     04 4E 05 F1 | 	add	fp, #4
2b500     A7 12 62 FC | 	wrlong	arg01, fp
2b504     04 4E 05 F1 | 	add	fp, #4
2b508     A7 14 62 FC | 	wrlong	arg02, fp
2b50c     04 4E 05 F1 | 	add	fp, #4
2b510     A7 16 42 FC | 	wrbyte	arg03, fp
2b514     04 4E 85 F1 | 	sub	fp, #4
2b518     A7 16 02 FB | 	rdlong	arg03, fp
2b51c     14 4E 05 F1 | 	add	fp, #20
2b520     A7 16 62 FC | 	wrlong	arg03, fp
2b524     A7 12 02 F6 | 	mov	arg01, fp
2b528     1C 4E 85 F1 | 	sub	fp, #28
2b52c     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b530     14 4E 05 F1 | 	add	fp, #20
2b534     A7 FA 61 FC | 	wrlong	result1, fp
2b538     14 4E 85 F1 | 	sub	fp, #20
2b53c     00 FA 55 F2 | 	cmps	result1, #0 wc
2b540     0B FA 05 C6 |  if_b	mov	result1, #11
2b544     C0 00 90 CD |  if_b	jmp	#LR__4461
2b548     14 4E 05 F1 | 	add	fp, #20
2b54c     A7 16 02 FB | 	rdlong	arg03, fp
2b550     02 16 66 F0 | 	shl	arg03, #2
2b554     F2 16 02 F1 | 	add	arg03, objptr
2b558     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b55c     04 4E 85 F1 | 	sub	fp, #4
2b560     A7 16 62 FC | 	wrlong	arg03, fp
2b564     10 4E 85 F1 | 	sub	fp, #16
2b568     28 00 90 AD |  if_e	jmp	#LR__4460
2b56c     10 4E 05 F1 | 	add	fp, #16
2b570     A7 16 02 FB | 	rdlong	arg03, fp
2b574     10 4E 85 F1 | 	sub	fp, #16
2b578     01 16 06 F1 | 	add	arg03, #1
2b57c     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b580     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b584     10 4E 05 F1 | 	add	fp, #16
2b588     A7 16 02 FB | 	rdlong	arg03, fp
2b58c     10 4E 85 F1 | 	sub	fp, #16
2b590     0B 01 48 FC | 	wrbyte	#0, arg03
2b594                 | LR__4460
2b594     04 4E 05 F1 | 	add	fp, #4
2b598     A7 1E 0A FB | 	rdlong	local01, fp wz
2b59c     04 4E 85 F1 | 	sub	fp, #4
2b5a0     04 4E 05 51 |  if_ne	add	fp, #4
2b5a4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b5a8     04 4E 85 51 |  if_ne	sub	fp, #4
2b5ac     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b5b0     14 4E 05 F1 | 	add	fp, #20
2b5b4     A7 1E 02 FB | 	rdlong	local01, fp
2b5b8     02 1E 66 F0 | 	shl	local01, #2
2b5bc     F2 1E 02 F1 | 	add	local01, objptr
2b5c0     10 4E 85 F1 | 	sub	fp, #16
2b5c4     A7 16 02 FB | 	rdlong	arg03, fp
2b5c8     0F 17 62 FC | 	wrlong	arg03, local01
2b5cc     08 4E 05 F1 | 	add	fp, #8
2b5d0     A7 1E CA FA | 	rdbyte	local01, fp wz
2b5d4     0C 4E 85 F1 | 	sub	fp, #12
2b5d8     00 FA 05 A6 |  if_e	mov	result1, #0
2b5dc     28 00 90 AD |  if_e	jmp	#LR__4461
2b5e0     08 4E 05 F1 | 	add	fp, #8
2b5e4     A7 12 02 F6 | 	mov	arg01, fp
2b5e8     04 4E 85 F1 | 	sub	fp, #4
2b5ec     A7 14 02 F6 | 	mov	arg02, fp
2b5f0     04 4E 85 F1 | 	sub	fp, #4
2b5f4     00 16 06 F6 | 	mov	arg03, #0
2b5f8     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b5fc     18 4E 05 F1 | 	add	fp, #24
2b600     A7 FA 61 FC | 	wrlong	result1, fp
2b604                 | ' 
2b604                 | ' 	res = mount_volume(&path, &fs, 0);
2b604                 | ' 	return res ;
2b604     18 4E 85 F1 | 	sub	fp, #24
2b608                 | LR__4461
2b608     A7 F0 03 F6 | 	mov	ptra, fp
2b60c     B2 00 A0 FD | 	call	#popregs_
2b610                 | _fatfs_cc_f_mount_ret
2b610     2D 00 64 FD | 	ret
2b614                 | 
2b614                 | _fatfs_cc_f_open
2b614     02 4A 05 F6 | 	mov	COUNT_, #2
2b618     A8 00 A0 FD | 	call	#pushregs_
2b61c     60 F0 07 F1 | 	add	ptra, #96
2b620     04 4E 05 F1 | 	add	fp, #4
2b624     A7 12 62 FC | 	wrlong	arg01, fp
2b628     04 4E 05 F1 | 	add	fp, #4
2b62c     A7 14 62 FC | 	wrlong	arg02, fp
2b630     04 4E 05 F1 | 	add	fp, #4
2b634     A7 16 42 FC | 	wrbyte	arg03, fp
2b638     08 4E 85 F1 | 	sub	fp, #8
2b63c     A7 18 0A FB | 	rdlong	arg04, fp wz
2b640     04 4E 85 F1 | 	sub	fp, #4
2b644     09 FA 05 A6 |  if_e	mov	result1, #9
2b648     98 06 90 AD |  if_e	jmp	#LR__4487
2b64c     0C 4E 05 F1 | 	add	fp, #12
2b650     A7 18 C2 FA | 	rdbyte	arg04, fp
2b654     3F 18 06 F5 | 	and	arg04, #63
2b658     A7 18 42 FC | 	wrbyte	arg04, fp
2b65c     04 4E 85 F1 | 	sub	fp, #4
2b660     A7 12 02 F6 | 	mov	arg01, fp
2b664     3C 4E 05 F1 | 	add	fp, #60
2b668     A7 14 02 F6 | 	mov	arg02, fp
2b66c     38 4E 85 F1 | 	sub	fp, #56
2b670     A7 16 C2 FA | 	rdbyte	arg03, fp
2b674     0C 4E 85 F1 | 	sub	fp, #12
2b678     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b67c     10 4E 05 F1 | 	add	fp, #16
2b680     A7 FA 61 FC | 	wrlong	result1, fp
2b684     10 4E 85 F1 | 	sub	fp, #16
2b688     00 FA 0D F2 | 	cmp	result1, #0 wz
2b68c     2C 06 90 5D |  if_ne	jmp	#LR__4486
2b690     44 4E 05 F1 | 	add	fp, #68
2b694     A7 18 02 FB | 	rdlong	arg04, fp
2b698     30 4E 85 F1 | 	sub	fp, #48
2b69c     A7 18 62 FC | 	wrlong	arg04, fp
2b6a0     A7 12 02 F6 | 	mov	arg01, fp
2b6a4     0C 4E 85 F1 | 	sub	fp, #12
2b6a8     A7 1E 02 FB | 	rdlong	local01, fp
2b6ac     08 4E 85 F1 | 	sub	fp, #8
2b6b0     0F 15 02 F6 | 	mov	arg02, local01
2b6b4     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b6b8     10 4E 05 F1 | 	add	fp, #16
2b6bc     A7 FA 61 FC | 	wrlong	result1, fp
2b6c0     10 4E 85 F1 | 	sub	fp, #16
2b6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b6c8     1C 00 90 5D |  if_ne	jmp	#LR__4470
2b6cc     3F 4E 05 F1 | 	add	fp, #63
2b6d0     A7 18 C2 FA | 	rdbyte	arg04, fp
2b6d4     3F 4E 85 F1 | 	sub	fp, #63
2b6d8     80 18 CE F7 | 	test	arg04, #128 wz
2b6dc     10 4E 05 51 |  if_ne	add	fp, #16
2b6e0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b6e4     10 4E 85 51 |  if_ne	sub	fp, #16
2b6e8                 | LR__4470
2b6e8     0C 4E 05 F1 | 	add	fp, #12
2b6ec     A7 18 C2 FA | 	rdbyte	arg04, fp
2b6f0     0C 4E 85 F1 | 	sub	fp, #12
2b6f4     1C 18 CE F7 | 	test	arg04, #28 wz
2b6f8     F0 01 90 AD |  if_e	jmp	#LR__4475
2b6fc     10 4E 05 F1 | 	add	fp, #16
2b700     A7 1E 0A FB | 	rdlong	local01, fp wz
2b704     10 4E 85 F1 | 	sub	fp, #16
2b708     48 00 90 AD |  if_e	jmp	#LR__4472
2b70c     10 4E 05 F1 | 	add	fp, #16
2b710     A7 18 02 FB | 	rdlong	arg04, fp
2b714     10 4E 85 F1 | 	sub	fp, #16
2b718     04 18 0E F2 | 	cmp	arg04, #4 wz
2b71c     1C 00 90 5D |  if_ne	jmp	#LR__4471
2b720     14 4E 05 F1 | 	add	fp, #20
2b724     A7 12 02 F6 | 	mov	arg01, fp
2b728     14 4E 85 F1 | 	sub	fp, #20
2b72c     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2b730     10 4E 05 F1 | 	add	fp, #16
2b734     A7 FA 61 FC | 	wrlong	result1, fp
2b738     10 4E 85 F1 | 	sub	fp, #16
2b73c                 | LR__4471
2b73c     0C 4E 05 F1 | 	add	fp, #12
2b740     A7 1E C2 FA | 	rdbyte	local01, fp
2b744     08 1E 46 F5 | 	or	local01, #8
2b748     A7 1E 42 FC | 	wrbyte	local01, fp
2b74c     0C 4E 85 F1 | 	sub	fp, #12
2b750     3C 00 90 FD | 	jmp	#LR__4474
2b754                 | LR__4472
2b754     1A 4E 05 F1 | 	add	fp, #26
2b758     A7 1E C2 FA | 	rdbyte	local01, fp
2b75c     1A 4E 85 F1 | 	sub	fp, #26
2b760     11 1E CE F7 | 	test	local01, #17 wz
2b764     10 4E 05 51 |  if_ne	add	fp, #16
2b768     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b76c     10 4E 85 51 |  if_ne	sub	fp, #16
2b770     1C 00 90 5D |  if_ne	jmp	#LR__4473
2b774     0C 4E 05 F1 | 	add	fp, #12
2b778     A7 1E C2 FA | 	rdbyte	local01, fp
2b77c     0C 4E 85 F1 | 	sub	fp, #12
2b780     04 1E CE F7 | 	test	local01, #4 wz
2b784     10 4E 05 51 |  if_ne	add	fp, #16
2b788     A7 10 68 5C |  if_ne	wrlong	#8, fp
2b78c     10 4E 85 51 |  if_ne	sub	fp, #16
2b790                 | LR__4473
2b790                 | LR__4474
2b790     10 4E 05 F1 | 	add	fp, #16
2b794     A7 1E 0A FB | 	rdlong	local01, fp wz
2b798     10 4E 85 F1 | 	sub	fp, #16
2b79c     A8 01 90 5D |  if_ne	jmp	#LR__4478
2b7a0     0C 4E 05 F1 | 	add	fp, #12
2b7a4     A7 1E C2 FA | 	rdbyte	local01, fp
2b7a8     0C 4E 85 F1 | 	sub	fp, #12
2b7ac     08 1E CE F7 | 	test	local01, #8 wz
2b7b0     94 01 90 AD |  if_e	jmp	#LR__4478
2b7b4     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2b7b8     54 4E 05 F1 | 	add	fp, #84
2b7bc     A7 FA 61 FC | 	wrlong	result1, fp
2b7c0     24 4E 85 F1 | 	sub	fp, #36
2b7c4     A7 12 02 FB | 	rdlong	arg01, fp
2b7c8     0E 12 06 F1 | 	add	arg01, #14
2b7cc     09 FB 61 FC | 	wrlong	result1, arg01
2b7d0     A7 12 02 FB | 	rdlong	arg01, fp
2b7d4     16 12 06 F1 | 	add	arg01, #22
2b7d8     24 4E 05 F1 | 	add	fp, #36
2b7dc     A7 14 02 FB | 	rdlong	arg02, fp
2b7e0     09 15 62 FC | 	wrlong	arg02, arg01
2b7e4     10 4E 85 F1 | 	sub	fp, #16
2b7e8     A7 12 02 FB | 	rdlong	arg01, fp
2b7ec     14 4E 85 F1 | 	sub	fp, #20
2b7f0     A7 14 02 FB | 	rdlong	arg02, fp
2b7f4     30 4E 85 F1 | 	sub	fp, #48
2b7f8     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2b7fc     48 4E 05 F1 | 	add	fp, #72
2b800     A7 FA 61 FC | 	wrlong	result1, fp
2b804     18 4E 85 F1 | 	sub	fp, #24
2b808     A7 1E 02 FB | 	rdlong	local01, fp
2b80c     0B 1E 06 F1 | 	add	local01, #11
2b810     0F 41 48 FC | 	wrbyte	#32, local01
2b814     14 4E 05 F1 | 	add	fp, #20
2b818     A7 12 02 FB | 	rdlong	arg01, fp
2b81c     14 4E 85 F1 | 	sub	fp, #20
2b820     A7 14 02 FB | 	rdlong	arg02, fp
2b824     30 4E 85 F1 | 	sub	fp, #48
2b828     00 16 06 F6 | 	mov	arg03, #0
2b82c     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2b830     30 4E 05 F1 | 	add	fp, #48
2b834     A7 12 02 FB | 	rdlong	arg01, fp
2b838     1C 12 06 F1 | 	add	arg01, #28
2b83c     09 01 68 FC | 	wrlong	#0, arg01
2b840     14 4E 05 F1 | 	add	fp, #20
2b844     A7 1E 02 FB | 	rdlong	local01, fp
2b848     03 1E 06 F1 | 	add	local01, #3
2b84c     0F 03 48 FC | 	wrbyte	#1, local01
2b850     04 4E 05 F1 | 	add	fp, #4
2b854     A7 1E 0A FB | 	rdlong	local01, fp wz
2b858     48 4E 85 F1 | 	sub	fp, #72
2b85c     E8 00 90 AD |  if_e	jmp	#LR__4478
2b860     44 4E 05 F1 | 	add	fp, #68
2b864     A7 1E 02 FB | 	rdlong	local01, fp
2b868     30 1E 06 F1 | 	add	local01, #48
2b86c     0F 1F 02 FB | 	rdlong	local01, local01
2b870     14 4E 05 F1 | 	add	fp, #20
2b874     A7 1E 62 FC | 	wrlong	local01, fp
2b878     44 4E 85 F1 | 	sub	fp, #68
2b87c     A7 12 02 F6 | 	mov	arg01, fp
2b880     34 4E 05 F1 | 	add	fp, #52
2b884     A7 14 02 FB | 	rdlong	arg02, fp
2b888     48 4E 85 F1 | 	sub	fp, #72
2b88c     00 16 06 F6 | 	mov	arg03, #0
2b890     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2b894     10 4E 05 F1 | 	add	fp, #16
2b898     A7 FA 61 FC | 	wrlong	result1, fp
2b89c     10 4E 85 F1 | 	sub	fp, #16
2b8a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8a4     A0 00 90 5D |  if_ne	jmp	#LR__4478
2b8a8     44 4E 05 F1 | 	add	fp, #68
2b8ac     A7 12 02 FB | 	rdlong	arg01, fp
2b8b0     14 4E 05 F1 | 	add	fp, #20
2b8b4     A7 14 02 FB | 	rdlong	arg02, fp
2b8b8     58 4E 85 F1 | 	sub	fp, #88
2b8bc     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2b8c0     10 4E 05 F1 | 	add	fp, #16
2b8c4     A7 FA 61 FC | 	wrlong	result1, fp
2b8c8     34 4E 05 F1 | 	add	fp, #52
2b8cc     A7 18 02 FB | 	rdlong	arg04, fp
2b8d0     04 4E 05 F1 | 	add	fp, #4
2b8d4     A7 1E 02 FB | 	rdlong	local01, fp
2b8d8     48 4E 85 F1 | 	sub	fp, #72
2b8dc     01 1E 86 F1 | 	sub	local01, #1
2b8e0     10 18 06 F1 | 	add	arg04, #16
2b8e4     0C 1F 62 FC | 	wrlong	local01, arg04
2b8e8     5C 00 90 FD | 	jmp	#LR__4478
2b8ec                 | LR__4475
2b8ec     10 4E 05 F1 | 	add	fp, #16
2b8f0     A7 18 0A FB | 	rdlong	arg04, fp wz
2b8f4     10 4E 85 F1 | 	sub	fp, #16
2b8f8     4C 00 90 5D |  if_ne	jmp	#LR__4477
2b8fc     1A 4E 05 F1 | 	add	fp, #26
2b900     A7 18 C2 FA | 	rdbyte	arg04, fp
2b904     1A 4E 85 F1 | 	sub	fp, #26
2b908     10 18 CE F7 | 	test	arg04, #16 wz
2b90c     10 4E 05 51 |  if_ne	add	fp, #16
2b910     A7 08 68 5C |  if_ne	wrlong	#4, fp
2b914     10 4E 85 51 |  if_ne	sub	fp, #16
2b918     2C 00 90 5D |  if_ne	jmp	#LR__4476
2b91c     0C 4E 05 F1 | 	add	fp, #12
2b920     A7 18 C2 FA | 	rdbyte	arg04, fp
2b924     0C 4E 85 F1 | 	sub	fp, #12
2b928     02 18 CE F7 | 	test	arg04, #2 wz
2b92c     1A 4E 05 51 |  if_ne	add	fp, #26
2b930     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2b934     1A 4E 85 51 |  if_ne	sub	fp, #26
2b938     01 1E CE 57 |  if_ne	test	local01, #1 wz
2b93c     10 4E 05 51 |  if_ne	add	fp, #16
2b940     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b944     10 4E 85 51 |  if_ne	sub	fp, #16
2b948                 | LR__4476
2b948                 | LR__4477
2b948                 | LR__4478
2b948     10 4E 05 F1 | 	add	fp, #16
2b94c     A7 1E 0A FB | 	rdlong	local01, fp wz
2b950     10 4E 85 F1 | 	sub	fp, #16
2b954     60 00 90 5D |  if_ne	jmp	#LR__4479
2b958     0C 4E 05 F1 | 	add	fp, #12
2b95c     A7 20 C2 FA | 	rdbyte	local02, fp
2b960     0C 4E 85 F1 | 	sub	fp, #12
2b964     08 20 CE F7 | 	test	local02, #8 wz
2b968     0C 4E 05 51 |  if_ne	add	fp, #12
2b96c     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2b970     40 20 46 55 |  if_ne	or	local02, #64
2b974     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2b978     0C 4E 85 51 |  if_ne	sub	fp, #12
2b97c     04 4E 05 F1 | 	add	fp, #4
2b980     A7 20 02 FB | 	rdlong	local02, fp
2b984     40 4E 05 F1 | 	add	fp, #64
2b988     A7 1E 02 FB | 	rdlong	local01, fp
2b98c     30 1E 06 F1 | 	add	local01, #48
2b990     0F 1F 02 FB | 	rdlong	local01, local01
2b994     20 20 06 F1 | 	add	local02, #32
2b998     10 1F 62 FC | 	wrlong	local01, local02
2b99c     40 4E 85 F1 | 	sub	fp, #64
2b9a0     A7 20 02 FB | 	rdlong	local02, fp
2b9a4     2C 4E 05 F1 | 	add	fp, #44
2b9a8     A7 1E 02 FB | 	rdlong	local01, fp
2b9ac     30 4E 85 F1 | 	sub	fp, #48
2b9b0     24 20 06 F1 | 	add	local02, #36
2b9b4     10 1F 62 FC | 	wrlong	local01, local02
2b9b8                 | LR__4479
2b9b8     10 4E 05 F1 | 	add	fp, #16
2b9bc     A7 20 0A FB | 	rdlong	local02, fp wz
2b9c0     10 4E 85 F1 | 	sub	fp, #16
2b9c4     F4 02 90 5D |  if_ne	jmp	#LR__4485
2b9c8     04 4E 05 F1 | 	add	fp, #4
2b9cc     A7 20 02 FB | 	rdlong	local02, fp
2b9d0     40 4E 05 F1 | 	add	fp, #64
2b9d4     A7 12 02 FB | 	rdlong	arg01, fp
2b9d8     14 4E 85 F1 | 	sub	fp, #20
2b9dc     A7 14 02 FB | 	rdlong	arg02, fp
2b9e0     30 4E 85 F1 | 	sub	fp, #48
2b9e4     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2b9e8     08 20 06 F1 | 	add	local02, #8
2b9ec     10 FB 61 FC | 	wrlong	result1, local02
2b9f0     04 4E 05 F1 | 	add	fp, #4
2b9f4     A7 20 02 FB | 	rdlong	local02, fp
2b9f8     2C 4E 05 F1 | 	add	fp, #44
2b9fc     A7 12 02 FB | 	rdlong	arg01, fp
2ba00     1C 12 06 F1 | 	add	arg01, #28
2ba04                 | ' {
2ba04                 | ' 
2ba04                 | ' 	return *((DWORD*)ptr);
2ba04     09 FB 01 FB | 	rdlong	result1, arg01
2ba08     0C 20 06 F1 | 	add	local02, #12
2ba0c     10 FB 61 FC | 	wrlong	result1, local02
2ba10     2C 4E 85 F1 | 	sub	fp, #44
2ba14     A7 20 02 FB | 	rdlong	local02, fp
2ba18     40 4E 05 F1 | 	add	fp, #64
2ba1c     A7 1E 02 FB | 	rdlong	local01, fp
2ba20     10 1F 62 FC | 	wrlong	local01, local02
2ba24     40 4E 85 F1 | 	sub	fp, #64
2ba28     A7 20 02 FB | 	rdlong	local02, fp
2ba2c     40 4E 05 F1 | 	add	fp, #64
2ba30     A7 1E 02 FB | 	rdlong	local01, fp
2ba34     06 1E 06 F1 | 	add	local01, #6
2ba38     0F 1F E2 FA | 	rdword	local01, local01
2ba3c     04 20 06 F1 | 	add	local02, #4
2ba40     10 1F 52 FC | 	wrword	local01, local02
2ba44     40 4E 85 F1 | 	sub	fp, #64
2ba48     A7 20 02 FB | 	rdlong	local02, fp
2ba4c     08 4E 05 F1 | 	add	fp, #8
2ba50     A7 1E C2 FA | 	rdbyte	local01, fp
2ba54     10 20 06 F1 | 	add	local02, #16
2ba58     10 1F 42 FC | 	wrbyte	local01, local02
2ba5c     08 4E 85 F1 | 	sub	fp, #8
2ba60     A7 20 02 FB | 	rdlong	local02, fp
2ba64     11 20 06 F1 | 	add	local02, #17
2ba68     10 01 48 FC | 	wrbyte	#0, local02
2ba6c     A7 20 02 FB | 	rdlong	local02, fp
2ba70     1C 20 06 F1 | 	add	local02, #28
2ba74     10 01 68 FC | 	wrlong	#0, local02
2ba78     A7 20 02 FB | 	rdlong	local02, fp
2ba7c     14 20 06 F1 | 	add	local02, #20
2ba80     10 01 68 FC | 	wrlong	#0, local02
2ba84     A7 12 02 FB | 	rdlong	arg01, fp
2ba88     04 4E 85 F1 | 	sub	fp, #4
2ba8c     28 12 06 F1 | 	add	arg01, #40
2ba90     00 14 06 F6 | 	mov	arg02, #0
2ba94     09 16 C6 F9 | 	decod	arg03, #9
2ba98     98 00 A0 FD | 	call	#\builtin_bytefill_
2ba9c     0C 4E 05 F1 | 	add	fp, #12
2baa0     A7 20 C2 FA | 	rdbyte	local02, fp
2baa4     0C 4E 85 F1 | 	sub	fp, #12
2baa8     20 20 CE F7 | 	test	local02, #32 wz
2baac     0C 02 90 AD |  if_e	jmp	#LR__4484
2bab0     04 4E 05 F1 | 	add	fp, #4
2bab4     A7 1E 02 FB | 	rdlong	local01, fp
2bab8     04 4E 85 F1 | 	sub	fp, #4
2babc     0C 1E 06 F1 | 	add	local01, #12
2bac0     0F 21 02 FB | 	rdlong	local02, local01
2bac4     01 20 16 F2 | 	cmp	local02, #1 wc
2bac8     F0 01 90 CD |  if_b	jmp	#LR__4484
2bacc     04 4E 05 F1 | 	add	fp, #4
2bad0     A7 1E 02 FB | 	rdlong	local01, fp
2bad4     0F 21 02 F6 | 	mov	local02, local01
2bad8     0C 1E 06 F1 | 	add	local01, #12
2badc     0F 1F 02 FB | 	rdlong	local01, local01
2bae0     14 20 06 F1 | 	add	local02, #20
2bae4     10 1F 62 FC | 	wrlong	local01, local02
2bae8     40 4E 05 F1 | 	add	fp, #64
2baec     A7 20 02 FB | 	rdlong	local02, fp
2baf0     0A 20 06 F1 | 	add	local02, #10
2baf4     10 21 E2 FA | 	rdword	local02, local02
2baf8     09 20 66 F0 | 	shl	local02, #9
2bafc     08 4E 05 F1 | 	add	fp, #8
2bb00     A7 20 62 FC | 	wrlong	local02, fp
2bb04     48 4E 85 F1 | 	sub	fp, #72
2bb08     A7 20 02 FB | 	rdlong	local02, fp
2bb0c     08 20 06 F1 | 	add	local02, #8
2bb10     10 1F 02 FB | 	rdlong	local01, local02
2bb14     4C 4E 05 F1 | 	add	fp, #76
2bb18     A7 1E 62 FC | 	wrlong	local01, fp
2bb1c                 | ' 				fp->fptr = fp->obj.objsize;
2bb1c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bb1c                 | ' 				clst = fp->obj.sclust;
2bb1c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bb1c     4C 4E 85 F1 | 	sub	fp, #76
2bb20     A7 20 02 FB | 	rdlong	local02, fp
2bb24     0C 20 06 F1 | 	add	local02, #12
2bb28     10 1F 02 FB | 	rdlong	local01, local02
2bb2c     58 4E 05 F1 | 	add	fp, #88
2bb30     A7 1E 62 FC | 	wrlong	local01, fp
2bb34     5C 4E 85 F1 | 	sub	fp, #92
2bb38                 | LR__4480
2bb38     10 4E 05 F1 | 	add	fp, #16
2bb3c     A7 20 0A FB | 	rdlong	local02, fp wz
2bb40     10 4E 85 F1 | 	sub	fp, #16
2bb44     94 00 90 5D |  if_ne	jmp	#LR__4481
2bb48     5C 4E 05 F1 | 	add	fp, #92
2bb4c     A7 20 02 FB | 	rdlong	local02, fp
2bb50     10 4E 85 F1 | 	sub	fp, #16
2bb54     A7 1E 02 FB | 	rdlong	local01, fp
2bb58     4C 4E 85 F1 | 	sub	fp, #76
2bb5c     0F 21 1A F2 | 	cmp	local02, local01 wcz
2bb60     78 00 90 ED |  if_be	jmp	#LR__4481
2bb64     04 4E 05 F1 | 	add	fp, #4
2bb68     A7 12 02 FB | 	rdlong	arg01, fp
2bb6c     4C 4E 05 F1 | 	add	fp, #76
2bb70     A7 14 02 FB | 	rdlong	arg02, fp
2bb74     50 4E 85 F1 | 	sub	fp, #80
2bb78     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2bb7c     50 4E 05 F1 | 	add	fp, #80
2bb80     A7 FA 61 FC | 	wrlong	result1, fp
2bb84     50 4E 85 F1 | 	sub	fp, #80
2bb88     02 FA 15 F2 | 	cmp	result1, #2 wc
2bb8c     10 4E 05 C1 |  if_b	add	fp, #16
2bb90     A7 04 68 CC |  if_b	wrlong	#2, fp
2bb94     10 4E 85 C1 |  if_b	sub	fp, #16
2bb98     50 4E 05 F1 | 	add	fp, #80
2bb9c     A7 20 02 FB | 	rdlong	local02, fp
2bba0     50 4E 85 F1 | 	sub	fp, #80
2bba4     FF FF 7F FF 
2bba8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2bbac     10 4E 05 A1 |  if_e	add	fp, #16
2bbb0     A7 02 68 AC |  if_e	wrlong	#1, fp
2bbb4     10 4E 85 A1 |  if_e	sub	fp, #16
2bbb8     5C 4E 05 F1 | 	add	fp, #92
2bbbc     A7 20 02 FB | 	rdlong	local02, fp
2bbc0     10 4E 85 F1 | 	sub	fp, #16
2bbc4     A7 1E 02 FB | 	rdlong	local01, fp
2bbc8     0F 21 82 F1 | 	sub	local02, local01
2bbcc     10 4E 05 F1 | 	add	fp, #16
2bbd0     A7 20 62 FC | 	wrlong	local02, fp
2bbd4     5C 4E 85 F1 | 	sub	fp, #92
2bbd8     5C FF 9F FD | 	jmp	#LR__4480
2bbdc                 | LR__4481
2bbdc     04 4E 05 F1 | 	add	fp, #4
2bbe0     A7 20 02 FB | 	rdlong	local02, fp
2bbe4     4C 4E 05 F1 | 	add	fp, #76
2bbe8     A7 1E 02 FB | 	rdlong	local01, fp
2bbec     18 20 06 F1 | 	add	local02, #24
2bbf0     10 1F 62 FC | 	wrlong	local01, local02
2bbf4     40 4E 85 F1 | 	sub	fp, #64
2bbf8     A7 20 0A FB | 	rdlong	local02, fp wz
2bbfc     10 4E 85 F1 | 	sub	fp, #16
2bc00     B8 00 90 5D |  if_ne	jmp	#LR__4483
2bc04     5C 4E 05 F1 | 	add	fp, #92
2bc08     A7 1E 02 FB | 	rdlong	local01, fp
2bc0c     5C 4E 85 F1 | 	sub	fp, #92
2bc10     FF 1F CE F7 | 	test	local01, #511 wz
2bc14     A4 00 90 AD |  if_e	jmp	#LR__4483
2bc18     44 4E 05 F1 | 	add	fp, #68
2bc1c     A7 12 02 FB | 	rdlong	arg01, fp
2bc20     0C 4E 05 F1 | 	add	fp, #12
2bc24     A7 14 02 FB | 	rdlong	arg02, fp
2bc28     50 4E 85 F1 | 	sub	fp, #80
2bc2c     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2bc30     58 4E 05 F1 | 	add	fp, #88
2bc34     A7 FA 61 FC | 	wrlong	result1, fp
2bc38     00 FA 4D F2 | 	cmps	result1, #0 wz
2bc3c     58 4E 85 F1 | 	sub	fp, #88
2bc40     10 4E 05 A1 |  if_e	add	fp, #16
2bc44     A7 04 68 AC |  if_e	wrlong	#2, fp
2bc48     10 4E 85 A1 |  if_e	sub	fp, #16
2bc4c     6C 00 90 AD |  if_e	jmp	#LR__4482
2bc50     04 4E 05 F1 | 	add	fp, #4
2bc54     A7 20 02 FB | 	rdlong	local02, fp
2bc58     54 4E 05 F1 | 	add	fp, #84
2bc5c     A7 1E 02 FB | 	rdlong	local01, fp
2bc60     04 4E 05 F1 | 	add	fp, #4
2bc64     A7 18 02 FB | 	rdlong	arg04, fp
2bc68     09 18 46 F0 | 	shr	arg04, #9
2bc6c     0C 1F 02 F1 | 	add	local01, arg04
2bc70     1C 20 06 F1 | 	add	local02, #28
2bc74     10 1F 62 FC | 	wrlong	local01, local02
2bc78     18 4E 85 F1 | 	sub	fp, #24
2bc7c     A7 20 02 FB | 	rdlong	local02, fp
2bc80     01 20 06 F1 | 	add	local02, #1
2bc84     10 13 C2 FA | 	rdbyte	arg01, local02
2bc88     40 4E 85 F1 | 	sub	fp, #64
2bc8c     A7 20 02 FB | 	rdlong	local02, fp
2bc90     10 15 02 F6 | 	mov	arg02, local02
2bc94     28 14 06 F1 | 	add	arg02, #40
2bc98     04 4E 85 F1 | 	sub	fp, #4
2bc9c     1C 20 06 F1 | 	add	local02, #28
2bca0     10 17 02 FB | 	rdlong	arg03, local02
2bca4     01 18 06 F6 | 	mov	arg04, #1
2bca8     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2bcac     00 FA 0D F2 | 	cmp	result1, #0 wz
2bcb0     10 4E 05 51 |  if_ne	add	fp, #16
2bcb4     A7 02 68 5C |  if_ne	wrlong	#1, fp
2bcb8     10 4E 85 51 |  if_ne	sub	fp, #16
2bcbc                 | LR__4482
2bcbc                 | LR__4483
2bcbc                 | LR__4484
2bcbc                 | LR__4485
2bcbc                 | LR__4486
2bcbc     10 4E 05 F1 | 	add	fp, #16
2bcc0     A7 20 0A FB | 	rdlong	local02, fp wz
2bcc4     10 4E 85 F1 | 	sub	fp, #16
2bcc8     04 4E 05 51 |  if_ne	add	fp, #4
2bccc     A7 20 02 5B |  if_ne	rdlong	local02, fp
2bcd0     04 4E 85 51 |  if_ne	sub	fp, #4
2bcd4     10 01 68 5C |  if_ne	wrlong	#0, local02
2bcd8                 | ' 
2bcd8                 | ' 	return res ;
2bcd8     10 4E 05 F1 | 	add	fp, #16
2bcdc     A7 FA 01 FB | 	rdlong	result1, fp
2bce0     10 4E 85 F1 | 	sub	fp, #16
2bce4                 | LR__4487
2bce4     A7 F0 03 F6 | 	mov	ptra, fp
2bce8     B2 00 A0 FD | 	call	#popregs_
2bcec                 | _fatfs_cc_f_open_ret
2bcec     2D 00 64 FD | 	ret
2bcf0                 | 
2bcf0                 | _fatfs_cc_f_read
2bcf0     0E 4A 05 F6 | 	mov	COUNT_, #14
2bcf4     A8 00 A0 FD | 	call	#pushregs_
2bcf8     38 F0 07 F1 | 	add	ptra, #56
2bcfc     04 4E 05 F1 | 	add	fp, #4
2bd00     A7 12 62 FC | 	wrlong	arg01, fp
2bd04     04 4E 05 F1 | 	add	fp, #4
2bd08     A7 14 62 FC | 	wrlong	arg02, fp
2bd0c     04 4E 05 F1 | 	add	fp, #4
2bd10     A7 16 62 FC | 	wrlong	arg03, fp
2bd14     04 4E 05 F1 | 	add	fp, #4
2bd18     A7 18 62 FC | 	wrlong	arg04, fp
2bd1c     08 4E 85 F1 | 	sub	fp, #8
2bd20     A7 FA 01 FB | 	rdlong	result1, fp
2bd24     2C 4E 05 F1 | 	add	fp, #44
2bd28     A7 FA 61 FC | 	wrlong	result1, fp
2bd2c     24 4E 85 F1 | 	sub	fp, #36
2bd30     A7 FA 01 FB | 	rdlong	result1, fp
2bd34     FD 00 68 FC | 	wrlong	#0, result1
2bd38     0C 4E 85 F1 | 	sub	fp, #12
2bd3c     A7 12 02 FB | 	rdlong	arg01, fp
2bd40     14 4E 05 F1 | 	add	fp, #20
2bd44     A7 14 02 F6 | 	mov	arg02, fp
2bd48     18 4E 85 F1 | 	sub	fp, #24
2bd4c     24 F7 BF FD | 	call	#_fatfs_cc_validate
2bd50     14 4E 05 F1 | 	add	fp, #20
2bd54     A7 FA 61 FC | 	wrlong	result1, fp
2bd58     00 FA 4D F2 | 	cmps	result1, #0 wz
2bd5c     14 4E 85 F1 | 	sub	fp, #20
2bd60     20 00 90 5D |  if_ne	jmp	#LR__4490
2bd64     04 4E 05 F1 | 	add	fp, #4
2bd68     A7 14 02 FB | 	rdlong	arg02, fp
2bd6c     11 14 06 F1 | 	add	arg02, #17
2bd70     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2bd74     10 4E 05 F1 | 	add	fp, #16
2bd78     A7 14 62 FC | 	wrlong	arg02, fp
2bd7c     14 4E 85 F1 | 	sub	fp, #20
2bd80     10 00 90 AD |  if_e	jmp	#LR__4491
2bd84                 | LR__4490
2bd84     14 4E 05 F1 | 	add	fp, #20
2bd88     A7 FA 01 FB | 	rdlong	result1, fp
2bd8c     14 4E 85 F1 | 	sub	fp, #20
2bd90     EC 05 90 FD | 	jmp	#LR__4510
2bd94                 | LR__4491
2bd94     04 4E 05 F1 | 	add	fp, #4
2bd98     A7 18 02 FB | 	rdlong	arg04, fp
2bd9c     04 4E 85 F1 | 	sub	fp, #4
2bda0     10 18 06 F1 | 	add	arg04, #16
2bda4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2bda8     01 18 CE F7 | 	test	arg04, #1 wz
2bdac     07 FA 05 A6 |  if_e	mov	result1, #7
2bdb0     CC 05 90 AD |  if_e	jmp	#LR__4510
2bdb4     04 4E 05 F1 | 	add	fp, #4
2bdb8     A7 1E 02 FB | 	rdlong	local01, fp
2bdbc     0F 21 02 F6 | 	mov	local02, local01
2bdc0     0C 20 06 F1 | 	add	local02, #12
2bdc4     10 23 02 FB | 	rdlong	local03, local02
2bdc8     14 1E 06 F1 | 	add	local01, #20
2bdcc     0F 1F 02 FB | 	rdlong	local01, local01
2bdd0     0F 23 82 F1 | 	sub	local03, local01
2bdd4     20 4E 05 F1 | 	add	fp, #32
2bdd8     A7 22 62 FC | 	wrlong	local03, fp
2bddc     18 4E 85 F1 | 	sub	fp, #24
2bde0     A7 24 02 FB | 	rdlong	local04, fp
2bde4     0C 4E 85 F1 | 	sub	fp, #12
2bde8     11 25 1A F2 | 	cmp	local04, local03 wcz
2bdec     24 4E 05 11 |  if_a	add	fp, #36
2bdf0     A7 24 02 1B |  if_a	rdlong	local04, fp
2bdf4     18 4E 85 11 |  if_a	sub	fp, #24
2bdf8     A7 24 62 1C |  if_a	wrlong	local04, fp
2bdfc     0C 4E 85 11 |  if_a	sub	fp, #12
2be00                 | ' 
2be00                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2be00                 | LR__4492
2be00     0C 4E 05 F1 | 	add	fp, #12
2be04     A7 20 02 FB | 	rdlong	local02, fp
2be08     0C 4E 85 F1 | 	sub	fp, #12
2be0c     10 25 02 F6 | 	mov	local04, local02
2be10     01 24 16 F2 | 	cmp	local04, #1 wc
2be14     64 05 90 CD |  if_b	jmp	#LR__4509
2be18     04 4E 05 F1 | 	add	fp, #4
2be1c     A7 22 02 FB | 	rdlong	local03, fp
2be20     04 4E 85 F1 | 	sub	fp, #4
2be24     14 22 06 F1 | 	add	local03, #20
2be28     11 23 02 FB | 	rdlong	local03, local03
2be2c     FF 23 CE F7 | 	test	local03, #511 wz
2be30     3C 04 90 5D |  if_ne	jmp	#LR__4507
2be34     04 4E 05 F1 | 	add	fp, #4
2be38     A7 1E 02 FB | 	rdlong	local01, fp
2be3c     14 1E 06 F1 | 	add	local01, #20
2be40     0F 23 02 FB | 	rdlong	local03, local01
2be44     09 22 46 F0 | 	shr	local03, #9
2be48     14 4E 05 F1 | 	add	fp, #20
2be4c     A7 26 02 FB | 	rdlong	local05, fp
2be50     13 29 02 F6 | 	mov	local06, local05
2be54     0A 28 06 F1 | 	add	local06, #10
2be58     14 2B E2 FA | 	rdword	local07, local06
2be5c     0A 28 86 F1 | 	sub	local06, #10
2be60     15 2D 32 F9 | 	getword	local08, local07, #0
2be64     01 2C 86 F1 | 	sub	local08, #1
2be68     16 23 0A F5 | 	and	local03, local08 wz
2be6c     18 4E 05 F1 | 	add	fp, #24
2be70     A7 22 62 FC | 	wrlong	local03, fp
2be74     30 4E 85 F1 | 	sub	fp, #48
2be78     E0 00 90 5D |  if_ne	jmp	#LR__4497
2be7c     04 4E 05 F1 | 	add	fp, #4
2be80     A7 22 02 FB | 	rdlong	local03, fp
2be84     04 4E 85 F1 | 	sub	fp, #4
2be88     14 22 06 F1 | 	add	local03, #20
2be8c     11 23 0A FB | 	rdlong	local03, local03 wz
2be90     20 00 90 5D |  if_ne	jmp	#LR__4493
2be94     04 4E 05 F1 | 	add	fp, #4
2be98     A7 22 02 FB | 	rdlong	local03, fp
2be9c     08 22 06 F1 | 	add	local03, #8
2bea0     11 23 02 FB | 	rdlong	local03, local03
2bea4     18 4E 05 F1 | 	add	fp, #24
2bea8     A7 22 62 FC | 	wrlong	local03, fp
2beac     1C 4E 85 F1 | 	sub	fp, #28
2beb0     28 00 90 FD | 	jmp	#LR__4494
2beb4                 | LR__4493
2beb4     04 4E 05 F1 | 	add	fp, #4
2beb8     A7 2C 02 FB | 	rdlong	local08, fp
2bebc     16 13 02 F6 | 	mov	arg01, local08
2bec0     04 4E 85 F1 | 	sub	fp, #4
2bec4     18 2C 06 F1 | 	add	local08, #24
2bec8     16 15 02 FB | 	rdlong	arg02, local08
2becc     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2bed0     1C 4E 05 F1 | 	add	fp, #28
2bed4     A7 FA 61 FC | 	wrlong	result1, fp
2bed8     1C 4E 85 F1 | 	sub	fp, #28
2bedc                 | LR__4494
2bedc     1C 4E 05 F1 | 	add	fp, #28
2bee0     A7 22 02 FB | 	rdlong	local03, fp
2bee4     1C 4E 85 F1 | 	sub	fp, #28
2bee8     02 22 16 F2 | 	cmp	local03, #2 wc
2beec     1C 00 90 3D |  if_ae	jmp	#LR__4495
2bef0     04 4E 05 F1 | 	add	fp, #4
2bef4     A7 22 02 FB | 	rdlong	local03, fp
2bef8     04 4E 85 F1 | 	sub	fp, #4
2befc     11 22 06 F1 | 	add	local03, #17
2bf00     11 05 48 FC | 	wrbyte	#2, local03
2bf04     02 FA 05 F6 | 	mov	result1, #2
2bf08     74 04 90 FD | 	jmp	#LR__4510
2bf0c                 | LR__4495
2bf0c     1C 4E 05 F1 | 	add	fp, #28
2bf10     A7 22 02 FB | 	rdlong	local03, fp
2bf14     1C 4E 85 F1 | 	sub	fp, #28
2bf18     FF FF 7F FF 
2bf1c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2bf20     1C 00 90 5D |  if_ne	jmp	#LR__4496
2bf24     04 4E 05 F1 | 	add	fp, #4
2bf28     A7 22 02 FB | 	rdlong	local03, fp
2bf2c     04 4E 85 F1 | 	sub	fp, #4
2bf30     11 22 06 F1 | 	add	local03, #17
2bf34     11 03 48 FC | 	wrbyte	#1, local03
2bf38     01 FA 05 F6 | 	mov	result1, #1
2bf3c     40 04 90 FD | 	jmp	#LR__4510
2bf40                 | LR__4496
2bf40     04 4E 05 F1 | 	add	fp, #4
2bf44     A7 22 02 FB | 	rdlong	local03, fp
2bf48     18 4E 05 F1 | 	add	fp, #24
2bf4c     A7 2C 02 FB | 	rdlong	local08, fp
2bf50     1C 4E 85 F1 | 	sub	fp, #28
2bf54     18 22 06 F1 | 	add	local03, #24
2bf58     11 2D 62 FC | 	wrlong	local08, local03
2bf5c                 | LR__4497
2bf5c     18 4E 05 F1 | 	add	fp, #24
2bf60     A7 12 02 FB | 	rdlong	arg01, fp
2bf64     14 4E 85 F1 | 	sub	fp, #20
2bf68     A7 22 02 FB | 	rdlong	local03, fp
2bf6c     04 4E 85 F1 | 	sub	fp, #4
2bf70     18 22 06 F1 | 	add	local03, #24
2bf74     11 15 02 FB | 	rdlong	arg02, local03
2bf78     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2bf7c     20 4E 05 F1 | 	add	fp, #32
2bf80     A7 FA 61 FC | 	wrlong	result1, fp
2bf84     20 4E 85 F1 | 	sub	fp, #32
2bf88     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf8c     1C 00 90 5D |  if_ne	jmp	#LR__4498
2bf90     04 4E 05 F1 | 	add	fp, #4
2bf94     A7 22 02 FB | 	rdlong	local03, fp
2bf98     04 4E 85 F1 | 	sub	fp, #4
2bf9c     11 22 06 F1 | 	add	local03, #17
2bfa0     11 05 48 FC | 	wrbyte	#2, local03
2bfa4     02 FA 05 F6 | 	mov	result1, #2
2bfa8     D4 03 90 FD | 	jmp	#LR__4510
2bfac                 | LR__4498
2bfac     20 4E 05 F1 | 	add	fp, #32
2bfb0     A7 22 02 FB | 	rdlong	local03, fp
2bfb4     10 4E 05 F1 | 	add	fp, #16
2bfb8     A7 2C 02 FB | 	rdlong	local08, fp
2bfbc     16 23 02 F1 | 	add	local03, local08
2bfc0     10 4E 85 F1 | 	sub	fp, #16
2bfc4     A7 22 62 FC | 	wrlong	local03, fp
2bfc8     14 4E 85 F1 | 	sub	fp, #20
2bfcc     A7 22 02 FB | 	rdlong	local03, fp
2bfd0     09 22 46 F0 | 	shr	local03, #9
2bfd4     20 4E 05 F1 | 	add	fp, #32
2bfd8     A7 22 62 FC | 	wrlong	local03, fp
2bfdc     2C 4E 85 F1 | 	sub	fp, #44
2bfe0     01 22 16 F2 | 	cmp	local03, #1 wc
2bfe4     5C 01 90 CD |  if_b	jmp	#LR__4502
2bfe8     30 4E 05 F1 | 	add	fp, #48
2bfec     A7 22 02 FB | 	rdlong	local03, fp
2bff0     04 4E 85 F1 | 	sub	fp, #4
2bff4     A7 2C 02 FB | 	rdlong	local08, fp
2bff8     16 23 02 F1 | 	add	local03, local08
2bffc     14 4E 85 F1 | 	sub	fp, #20
2c000     A7 2C 02 FB | 	rdlong	local08, fp
2c004     18 4E 85 F1 | 	sub	fp, #24
2c008     0A 2C 06 F1 | 	add	local08, #10
2c00c     16 2D E2 FA | 	rdword	local08, local08
2c010     16 23 1A F2 | 	cmp	local03, local08 wcz
2c014     28 00 90 ED |  if_be	jmp	#LR__4499
2c018     18 4E 05 F1 | 	add	fp, #24
2c01c     A7 1E 02 FB | 	rdlong	local01, fp
2c020     0A 1E 06 F1 | 	add	local01, #10
2c024     0F 23 E2 FA | 	rdword	local03, local01
2c028     18 4E 05 F1 | 	add	fp, #24
2c02c     A7 2C 02 FB | 	rdlong	local08, fp
2c030     16 23 82 F1 | 	sub	local03, local08
2c034     04 4E 85 F1 | 	sub	fp, #4
2c038     A7 22 62 FC | 	wrlong	local03, fp
2c03c     2C 4E 85 F1 | 	sub	fp, #44
2c040                 | LR__4499
2c040     18 4E 05 F1 | 	add	fp, #24
2c044     A7 1E 02 FB | 	rdlong	local01, fp
2c048     01 1E 06 F1 | 	add	local01, #1
2c04c     0F 13 C2 FA | 	rdbyte	arg01, local01
2c050     1C 4E 05 F1 | 	add	fp, #28
2c054     A7 14 02 FB | 	rdlong	arg02, fp
2c058     14 4E 85 F1 | 	sub	fp, #20
2c05c     A7 16 02 FB | 	rdlong	arg03, fp
2c060     0C 4E 05 F1 | 	add	fp, #12
2c064     A7 18 02 FB | 	rdlong	arg04, fp
2c068     2C 4E 85 F1 | 	sub	fp, #44
2c06c     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c070     00 FA 0D F2 | 	cmp	result1, #0 wz
2c074     1C 00 90 AD |  if_e	jmp	#LR__4500
2c078     04 4E 05 F1 | 	add	fp, #4
2c07c     A7 22 02 FB | 	rdlong	local03, fp
2c080     04 4E 85 F1 | 	sub	fp, #4
2c084     11 22 06 F1 | 	add	local03, #17
2c088     11 03 48 FC | 	wrbyte	#1, local03
2c08c     01 FA 05 F6 | 	mov	result1, #1
2c090     EC 02 90 FD | 	jmp	#LR__4510
2c094                 | LR__4500
2c094     04 4E 05 F1 | 	add	fp, #4
2c098     A7 1E 02 FB | 	rdlong	local01, fp
2c09c     04 4E 85 F1 | 	sub	fp, #4
2c0a0     10 1E 06 F1 | 	add	local01, #16
2c0a4     0F 23 C2 FA | 	rdbyte	local03, local01
2c0a8     80 22 CE F7 | 	test	local03, #128 wz
2c0ac     78 00 90 AD |  if_e	jmp	#LR__4501
2c0b0     04 4E 05 F1 | 	add	fp, #4
2c0b4     A7 2C 02 FB | 	rdlong	local08, fp
2c0b8     1C 2C 06 F1 | 	add	local08, #28
2c0bc     16 2D 02 FB | 	rdlong	local08, local08
2c0c0     1C 4E 05 F1 | 	add	fp, #28
2c0c4     A7 2E 02 FB | 	rdlong	local09, fp
2c0c8     17 2D 82 F1 | 	sub	local08, local09
2c0cc     0C 4E 05 F1 | 	add	fp, #12
2c0d0     A7 30 02 FB | 	rdlong	local10, fp
2c0d4     2C 4E 85 F1 | 	sub	fp, #44
2c0d8     18 33 02 F6 | 	mov	local11, local10
2c0dc     19 2D 12 F2 | 	cmp	local08, local11 wc
2c0e0     44 00 90 3D |  if_ae	jmp	#LR__4501
2c0e4     34 4E 05 F1 | 	add	fp, #52
2c0e8     A7 12 02 FB | 	rdlong	arg01, fp
2c0ec     30 4E 85 F1 | 	sub	fp, #48
2c0f0     A7 14 02 FB | 	rdlong	arg02, fp
2c0f4     0A 33 02 F6 | 	mov	local11, arg02
2c0f8     1C 32 06 F1 | 	add	local11, #28
2c0fc     19 2F 02 FB | 	rdlong	local09, local11
2c100     1C 4E 05 F1 | 	add	fp, #28
2c104     A7 26 02 FB | 	rdlong	local05, fp
2c108     13 2F 82 F1 | 	sub	local09, local05
2c10c     09 2E 66 F0 | 	shl	local09, #9
2c110     17 33 02 F6 | 	mov	local11, local09
2c114     17 13 02 F1 | 	add	arg01, local09
2c118     20 4E 85 F1 | 	sub	fp, #32
2c11c     28 14 06 F1 | 	add	arg02, #40
2c120     09 16 C6 F9 | 	decod	arg03, #9
2c124     28 46 BF FD | 	call	#__system____builtin_memmove
2c128                 | LR__4501
2c128     2C 4E 05 F1 | 	add	fp, #44
2c12c     A7 22 02 FB | 	rdlong	local03, fp
2c130     09 22 66 F0 | 	shl	local03, #9
2c134     04 4E 85 F1 | 	sub	fp, #4
2c138     A7 22 62 FC | 	wrlong	local03, fp
2c13c     28 4E 85 F1 | 	sub	fp, #40
2c140                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c140                 | ' 				}
2c140                 | ' 
2c140                 | ' 
2c140                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c140                 | ' 				continue;
2c140     B4 01 90 FD | 	jmp	#LR__4508
2c144                 | LR__4502
2c144     04 4E 05 F1 | 	add	fp, #4
2c148     A7 22 02 FB | 	rdlong	local03, fp
2c14c     1C 22 06 F1 | 	add	local03, #28
2c150     11 23 02 FB | 	rdlong	local03, local03
2c154     1C 4E 05 F1 | 	add	fp, #28
2c158     A7 1E 02 FB | 	rdlong	local01, fp
2c15c     20 4E 85 F1 | 	sub	fp, #32
2c160     0F 23 0A F2 | 	cmp	local03, local01 wz
2c164     EC 00 90 AD |  if_e	jmp	#LR__4506
2c168     04 4E 05 F1 | 	add	fp, #4
2c16c     A7 1E 02 FB | 	rdlong	local01, fp
2c170     04 4E 85 F1 | 	sub	fp, #4
2c174     10 1E 06 F1 | 	add	local01, #16
2c178     0F 23 C2 FA | 	rdbyte	local03, local01
2c17c     80 22 CE F7 | 	test	local03, #128 wz
2c180     7C 00 90 AD |  if_e	jmp	#LR__4504
2c184     18 4E 05 F1 | 	add	fp, #24
2c188     A7 1E 02 FB | 	rdlong	local01, fp
2c18c     01 1E 06 F1 | 	add	local01, #1
2c190     0F 13 C2 FA | 	rdbyte	arg01, local01
2c194     14 4E 85 F1 | 	sub	fp, #20
2c198     A7 22 02 FB | 	rdlong	local03, fp
2c19c     11 15 02 F6 | 	mov	arg02, local03
2c1a0     28 14 06 F1 | 	add	arg02, #40
2c1a4     04 4E 85 F1 | 	sub	fp, #4
2c1a8     1C 22 06 F1 | 	add	local03, #28
2c1ac     11 17 02 FB | 	rdlong	arg03, local03
2c1b0     01 18 06 F6 | 	mov	arg04, #1
2c1b4     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c1b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1bc     1C 00 90 AD |  if_e	jmp	#LR__4503
2c1c0     04 4E 05 F1 | 	add	fp, #4
2c1c4     A7 22 02 FB | 	rdlong	local03, fp
2c1c8     04 4E 85 F1 | 	sub	fp, #4
2c1cc     11 22 06 F1 | 	add	local03, #17
2c1d0     11 03 48 FC | 	wrbyte	#1, local03
2c1d4     01 FA 05 F6 | 	mov	result1, #1
2c1d8     A4 01 90 FD | 	jmp	#LR__4510
2c1dc                 | LR__4503
2c1dc     04 4E 05 F1 | 	add	fp, #4
2c1e0     A7 32 02 FB | 	rdlong	local11, fp
2c1e4     19 23 02 F6 | 	mov	local03, local11
2c1e8     04 4E 85 F1 | 	sub	fp, #4
2c1ec     10 32 06 F1 | 	add	local11, #16
2c1f0     19 33 C2 FA | 	rdbyte	local11, local11
2c1f4     7F 32 06 F5 | 	and	local11, #127
2c1f8     10 22 06 F1 | 	add	local03, #16
2c1fc     11 33 42 FC | 	wrbyte	local11, local03
2c200                 | LR__4504
2c200     18 4E 05 F1 | 	add	fp, #24
2c204     A7 1E 02 FB | 	rdlong	local01, fp
2c208     01 1E 06 F1 | 	add	local01, #1
2c20c     0F 13 C2 FA | 	rdbyte	arg01, local01
2c210     14 4E 85 F1 | 	sub	fp, #20
2c214     A7 14 02 FB | 	rdlong	arg02, fp
2c218     28 14 06 F1 | 	add	arg02, #40
2c21c     1C 4E 05 F1 | 	add	fp, #28
2c220     A7 16 02 FB | 	rdlong	arg03, fp
2c224     20 4E 85 F1 | 	sub	fp, #32
2c228     01 18 06 F6 | 	mov	arg04, #1
2c22c     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c230     00 FA 0D F2 | 	cmp	result1, #0 wz
2c234     1C 00 90 AD |  if_e	jmp	#LR__4505
2c238     04 4E 05 F1 | 	add	fp, #4
2c23c     A7 22 02 FB | 	rdlong	local03, fp
2c240     04 4E 85 F1 | 	sub	fp, #4
2c244     11 22 06 F1 | 	add	local03, #17
2c248     11 03 48 FC | 	wrbyte	#1, local03
2c24c     01 FA 05 F6 | 	mov	result1, #1
2c250     2C 01 90 FD | 	jmp	#LR__4510
2c254                 | LR__4505
2c254                 | LR__4506
2c254     04 4E 05 F1 | 	add	fp, #4
2c258     A7 22 02 FB | 	rdlong	local03, fp
2c25c     1C 4E 05 F1 | 	add	fp, #28
2c260     A7 32 02 FB | 	rdlong	local11, fp
2c264     20 4E 85 F1 | 	sub	fp, #32
2c268     1C 22 06 F1 | 	add	local03, #28
2c26c     11 33 62 FC | 	wrlong	local11, local03
2c270                 | LR__4507
2c270     04 4E 05 F1 | 	add	fp, #4
2c274     A7 1E 02 FB | 	rdlong	local01, fp
2c278     14 1E 06 F1 | 	add	local01, #20
2c27c     0F 33 02 FB | 	rdlong	local11, local01
2c280     FF 33 06 F5 | 	and	local11, #511
2c284     09 22 C6 F9 | 	decod	local03, #9
2c288     19 23 82 F1 | 	sub	local03, local11
2c28c     24 4E 05 F1 | 	add	fp, #36
2c290     A7 22 62 FC | 	wrlong	local03, fp
2c294     1C 4E 85 F1 | 	sub	fp, #28
2c298     A7 32 02 FB | 	rdlong	local11, fp
2c29c     0C 4E 85 F1 | 	sub	fp, #12
2c2a0     19 23 1A F2 | 	cmp	local03, local11 wcz
2c2a4     0C 4E 05 11 |  if_a	add	fp, #12
2c2a8     A7 22 02 1B |  if_a	rdlong	local03, fp
2c2ac     1C 4E 05 11 |  if_a	add	fp, #28
2c2b0     A7 22 62 1C |  if_a	wrlong	local03, fp
2c2b4     28 4E 85 11 |  if_a	sub	fp, #40
2c2b8     34 4E 05 F1 | 	add	fp, #52
2c2bc     A7 12 02 FB | 	rdlong	arg01, fp
2c2c0     30 4E 85 F1 | 	sub	fp, #48
2c2c4     A7 28 02 FB | 	rdlong	local06, fp
2c2c8     14 15 02 F6 | 	mov	arg02, local06
2c2cc     28 14 06 F1 | 	add	arg02, #40
2c2d0     14 28 06 F1 | 	add	local06, #20
2c2d4     14 33 02 FB | 	rdlong	local11, local06
2c2d8     19 2F 02 F6 | 	mov	local09, local11
2c2dc     17 31 02 F6 | 	mov	local10, local09
2c2e0     FF 31 06 F5 | 	and	local10, #511
2c2e4     18 15 02 F1 | 	add	arg02, local10
2c2e8     24 4E 05 F1 | 	add	fp, #36
2c2ec     A7 16 02 FB | 	rdlong	arg03, fp
2c2f0     28 4E 85 F1 | 	sub	fp, #40
2c2f4     58 44 BF FD | 	call	#__system____builtin_memmove
2c2f8                 | LR__4508
2c2f8     0C 4E 05 F1 | 	add	fp, #12
2c2fc     A7 22 02 FB | 	rdlong	local03, fp
2c300     1C 4E 05 F1 | 	add	fp, #28
2c304     A7 2C 02 FB | 	rdlong	local08, fp
2c308     16 23 82 F1 | 	sub	local03, local08
2c30c     1C 4E 85 F1 | 	sub	fp, #28
2c310     A7 22 62 FC | 	wrlong	local03, fp
2c314     04 4E 05 F1 | 	add	fp, #4
2c318     A7 1E 02 FB | 	rdlong	local01, fp
2c31c     0F 2B 02 FB | 	rdlong	local07, local01
2c320     18 4E 05 F1 | 	add	fp, #24
2c324     A7 2C 02 FB | 	rdlong	local08, fp
2c328     16 2B 02 F1 | 	add	local07, local08
2c32c     0F 2B 62 FC | 	wrlong	local07, local01
2c330     0C 4E 05 F1 | 	add	fp, #12
2c334     A7 22 02 FB | 	rdlong	local03, fp
2c338     0C 4E 85 F1 | 	sub	fp, #12
2c33c     A7 34 02 FB | 	rdlong	local12, fp
2c340     1A 23 02 F1 | 	add	local03, local12
2c344     0C 4E 05 F1 | 	add	fp, #12
2c348     A7 22 62 FC | 	wrlong	local03, fp
2c34c     30 4E 85 F1 | 	sub	fp, #48
2c350     A7 36 02 FB | 	rdlong	local13, fp
2c354     1B 23 02 F6 | 	mov	local03, local13
2c358     14 36 06 F1 | 	add	local13, #20
2c35c     1B 39 02 FB | 	rdlong	local14, local13
2c360     24 4E 05 F1 | 	add	fp, #36
2c364     A7 28 02 FB | 	rdlong	local06, fp
2c368     28 4E 85 F1 | 	sub	fp, #40
2c36c     14 39 02 F1 | 	add	local14, local06
2c370     14 22 06 F1 | 	add	local03, #20
2c374     11 39 62 FC | 	wrlong	local14, local03
2c378     84 FA 9F FD | 	jmp	#LR__4492
2c37c                 | LR__4509
2c37c                 | ' 
2c37c                 | ' 
2c37c                 | ' 
2c37c                 | ' 
2c37c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c37c                 | ' 
2c37c                 | ' 	}
2c37c                 | ' 
2c37c                 | ' 	return FR_OK ;
2c37c     00 FA 05 F6 | 	mov	result1, #0
2c380                 | LR__4510
2c380     A7 F0 03 F6 | 	mov	ptra, fp
2c384     B2 00 A0 FD | 	call	#popregs_
2c388                 | _fatfs_cc_f_read_ret
2c388     2D 00 64 FD | 	ret
2c38c                 | 
2c38c                 | _fatfs_cc_f_write
2c38c     15 4A 05 F6 | 	mov	COUNT_, #21
2c390     A8 00 A0 FD | 	call	#pushregs_
2c394     34 F0 07 F1 | 	add	ptra, #52
2c398     04 4E 05 F1 | 	add	fp, #4
2c39c     A7 12 62 FC | 	wrlong	arg01, fp
2c3a0     04 4E 05 F1 | 	add	fp, #4
2c3a4     A7 14 62 FC | 	wrlong	arg02, fp
2c3a8     04 4E 05 F1 | 	add	fp, #4
2c3ac     A7 16 62 FC | 	wrlong	arg03, fp
2c3b0     04 4E 05 F1 | 	add	fp, #4
2c3b4     A7 18 62 FC | 	wrlong	arg04, fp
2c3b8     08 4E 85 F1 | 	sub	fp, #8
2c3bc     A7 FA 01 FB | 	rdlong	result1, fp
2c3c0     28 4E 05 F1 | 	add	fp, #40
2c3c4     A7 FA 61 FC | 	wrlong	result1, fp
2c3c8     20 4E 85 F1 | 	sub	fp, #32
2c3cc     A7 FA 01 FB | 	rdlong	result1, fp
2c3d0     FD 00 68 FC | 	wrlong	#0, result1
2c3d4     0C 4E 85 F1 | 	sub	fp, #12
2c3d8     A7 12 02 FB | 	rdlong	arg01, fp
2c3dc     14 4E 05 F1 | 	add	fp, #20
2c3e0     A7 14 02 F6 | 	mov	arg02, fp
2c3e4     18 4E 85 F1 | 	sub	fp, #24
2c3e8     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c3ec     14 4E 05 F1 | 	add	fp, #20
2c3f0     A7 FA 61 FC | 	wrlong	result1, fp
2c3f4     00 FA 4D F2 | 	cmps	result1, #0 wz
2c3f8     14 4E 85 F1 | 	sub	fp, #20
2c3fc     20 00 90 5D |  if_ne	jmp	#LR__4520
2c400     04 4E 05 F1 | 	add	fp, #4
2c404     A7 14 02 FB | 	rdlong	arg02, fp
2c408     11 14 06 F1 | 	add	arg02, #17
2c40c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c410     10 4E 05 F1 | 	add	fp, #16
2c414     A7 14 62 FC | 	wrlong	arg02, fp
2c418     14 4E 85 F1 | 	sub	fp, #20
2c41c     10 00 90 AD |  if_e	jmp	#LR__4521
2c420                 | LR__4520
2c420     14 4E 05 F1 | 	add	fp, #20
2c424     A7 FA 01 FB | 	rdlong	result1, fp
2c428     14 4E 85 F1 | 	sub	fp, #20
2c42c     44 07 90 FD | 	jmp	#LR__4543
2c430                 | LR__4521
2c430     04 4E 05 F1 | 	add	fp, #4
2c434     A7 14 02 FB | 	rdlong	arg02, fp
2c438     04 4E 85 F1 | 	sub	fp, #4
2c43c     10 14 06 F1 | 	add	arg02, #16
2c440     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c444     02 14 CE F7 | 	test	arg02, #2 wz
2c448     07 FA 05 A6 |  if_e	mov	result1, #7
2c44c     24 07 90 AD |  if_e	jmp	#LR__4543
2c450     04 4E 05 F1 | 	add	fp, #4
2c454     A7 14 02 FB | 	rdlong	arg02, fp
2c458     0A 13 02 F6 | 	mov	arg01, arg02
2c45c     14 12 06 F1 | 	add	arg01, #20
2c460     09 13 02 FB | 	rdlong	arg01, arg01
2c464     08 4E 05 F1 | 	add	fp, #8
2c468     A7 FA 01 FB | 	rdlong	result1, fp
2c46c     FD 12 02 F1 | 	add	arg01, result1
2c470     0C 4E 85 F1 | 	sub	fp, #12
2c474     14 14 06 F1 | 	add	arg02, #20
2c478     0A FB 01 FB | 	rdlong	result1, arg02
2c47c     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c480     24 00 90 3D |  if_ae	jmp	#LR__4522
2c484     04 4E 05 F1 | 	add	fp, #4
2c488     A7 14 02 FB | 	rdlong	arg02, fp
2c48c     01 FA 65 F6 | 	neg	result1, #1
2c490     14 14 06 F1 | 	add	arg02, #20
2c494     0A 15 02 FB | 	rdlong	arg02, arg02
2c498     0A FB 81 F1 | 	sub	result1, arg02
2c49c     08 4E 05 F1 | 	add	fp, #8
2c4a0     A7 FA 61 FC | 	wrlong	result1, fp
2c4a4     0C 4E 85 F1 | 	sub	fp, #12
2c4a8                 | LR__4522
2c4a8                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c4a8                 | ' 	}
2c4a8                 | ' 
2c4a8                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c4a8                 | LR__4523
2c4a8     0C 4E 05 F1 | 	add	fp, #12
2c4ac     A7 FA 01 FB | 	rdlong	result1, fp
2c4b0     0C 4E 85 F1 | 	sub	fp, #12
2c4b4     01 FA 15 F2 | 	cmp	result1, #1 wc
2c4b8     90 06 90 CD |  if_b	jmp	#LR__4542
2c4bc     04 4E 05 F1 | 	add	fp, #4
2c4c0     A7 FA 01 FB | 	rdlong	result1, fp
2c4c4     04 4E 85 F1 | 	sub	fp, #4
2c4c8     14 FA 05 F1 | 	add	result1, #20
2c4cc     FD FA 01 FB | 	rdlong	result1, result1
2c4d0     FF FB CD F7 | 	test	result1, #511 wz
2c4d4     D8 04 90 5D |  if_ne	jmp	#LR__4538
2c4d8     04 4E 05 F1 | 	add	fp, #4
2c4dc     A7 FA 01 FB | 	rdlong	result1, fp
2c4e0     14 FA 05 F1 | 	add	result1, #20
2c4e4     FD FA 01 FB | 	rdlong	result1, result1
2c4e8     09 FA 45 F0 | 	shr	result1, #9
2c4ec     14 4E 05 F1 | 	add	fp, #20
2c4f0     A7 14 02 FB | 	rdlong	arg02, fp
2c4f4     0A 14 06 F1 | 	add	arg02, #10
2c4f8     0A 19 E2 FA | 	rdword	arg04, arg02
2c4fc     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c500     01 14 86 F1 | 	sub	arg02, #1
2c504     0A FB 09 F5 | 	and	result1, arg02 wz
2c508     14 4E 05 F1 | 	add	fp, #20
2c50c     A7 FA 61 FC | 	wrlong	result1, fp
2c510     2C 4E 85 F1 | 	sub	fp, #44
2c514     44 01 90 5D |  if_ne	jmp	#LR__4529
2c518     04 4E 05 F1 | 	add	fp, #4
2c51c     A7 FA 01 FB | 	rdlong	result1, fp
2c520     04 4E 85 F1 | 	sub	fp, #4
2c524     14 FA 05 F1 | 	add	result1, #20
2c528     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c52c     44 00 90 5D |  if_ne	jmp	#LR__4524
2c530     04 4E 05 F1 | 	add	fp, #4
2c534     A7 14 02 FB | 	rdlong	arg02, fp
2c538     08 14 06 F1 | 	add	arg02, #8
2c53c     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c540     18 4E 05 F1 | 	add	fp, #24
2c544     A7 14 62 FC | 	wrlong	arg02, fp
2c548     1C 4E 85 F1 | 	sub	fp, #28
2c54c     4C 00 90 5D |  if_ne	jmp	#LR__4525
2c550     04 4E 05 F1 | 	add	fp, #4
2c554     A7 12 02 FB | 	rdlong	arg01, fp
2c558     04 4E 85 F1 | 	sub	fp, #4
2c55c     00 14 06 F6 | 	mov	arg02, #0
2c560     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c564     1C 4E 05 F1 | 	add	fp, #28
2c568     A7 FA 61 FC | 	wrlong	result1, fp
2c56c     1C 4E 85 F1 | 	sub	fp, #28
2c570     28 00 90 FD | 	jmp	#LR__4525
2c574                 | LR__4524
2c574     04 4E 05 F1 | 	add	fp, #4
2c578     A7 18 02 FB | 	rdlong	arg04, fp
2c57c     0C 13 02 F6 | 	mov	arg01, arg04
2c580     04 4E 85 F1 | 	sub	fp, #4
2c584     18 18 06 F1 | 	add	arg04, #24
2c588     0C 15 02 FB | 	rdlong	arg02, arg04
2c58c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c590     1C 4E 05 F1 | 	add	fp, #28
2c594     A7 FA 61 FC | 	wrlong	result1, fp
2c598     1C 4E 85 F1 | 	sub	fp, #28
2c59c                 | LR__4525
2c59c     1C 4E 05 F1 | 	add	fp, #28
2c5a0     A7 FA 09 FB | 	rdlong	result1, fp wz
2c5a4     1C 4E 85 F1 | 	sub	fp, #28
2c5a8     A0 05 90 AD |  if_e	jmp	#LR__4542
2c5ac     1C 4E 05 F1 | 	add	fp, #28
2c5b0     A7 FA 01 FB | 	rdlong	result1, fp
2c5b4     1C 4E 85 F1 | 	sub	fp, #28
2c5b8     01 FA 0D F2 | 	cmp	result1, #1 wz
2c5bc     1C 00 90 5D |  if_ne	jmp	#LR__4526
2c5c0     04 4E 05 F1 | 	add	fp, #4
2c5c4     A7 FA 01 FB | 	rdlong	result1, fp
2c5c8     04 4E 85 F1 | 	sub	fp, #4
2c5cc     11 FA 05 F1 | 	add	result1, #17
2c5d0     FD 04 48 FC | 	wrbyte	#2, result1
2c5d4     02 FA 05 F6 | 	mov	result1, #2
2c5d8     98 05 90 FD | 	jmp	#LR__4543
2c5dc                 | LR__4526
2c5dc     1C 4E 05 F1 | 	add	fp, #28
2c5e0     A7 FA 01 FB | 	rdlong	result1, fp
2c5e4     1C 4E 85 F1 | 	sub	fp, #28
2c5e8     FF FF 7F FF 
2c5ec     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c5f0     1C 00 90 5D |  if_ne	jmp	#LR__4527
2c5f4     04 4E 05 F1 | 	add	fp, #4
2c5f8     A7 FA 01 FB | 	rdlong	result1, fp
2c5fc     04 4E 85 F1 | 	sub	fp, #4
2c600     11 FA 05 F1 | 	add	result1, #17
2c604     FD 02 48 FC | 	wrbyte	#1, result1
2c608     01 FA 05 F6 | 	mov	result1, #1
2c60c     64 05 90 FD | 	jmp	#LR__4543
2c610                 | LR__4527
2c610     04 4E 05 F1 | 	add	fp, #4
2c614     A7 FA 01 FB | 	rdlong	result1, fp
2c618     18 4E 05 F1 | 	add	fp, #24
2c61c     A7 18 02 FB | 	rdlong	arg04, fp
2c620     18 FA 05 F1 | 	add	result1, #24
2c624     FD 18 62 FC | 	wrlong	arg04, result1
2c628     18 4E 85 F1 | 	sub	fp, #24
2c62c     A7 FA 01 FB | 	rdlong	result1, fp
2c630     04 4E 85 F1 | 	sub	fp, #4
2c634     08 FA 05 F1 | 	add	result1, #8
2c638     FD FA 09 FB | 	rdlong	result1, result1 wz
2c63c     1C 00 90 5D |  if_ne	jmp	#LR__4528
2c640     04 4E 05 F1 | 	add	fp, #4
2c644     A7 18 02 FB | 	rdlong	arg04, fp
2c648     18 4E 05 F1 | 	add	fp, #24
2c64c     A7 FA 01 FB | 	rdlong	result1, fp
2c650     1C 4E 85 F1 | 	sub	fp, #28
2c654     08 18 06 F1 | 	add	arg04, #8
2c658     0C FB 61 FC | 	wrlong	result1, arg04
2c65c                 | LR__4528
2c65c                 | LR__4529
2c65c     04 4E 05 F1 | 	add	fp, #4
2c660     A7 18 02 FB | 	rdlong	arg04, fp
2c664     04 4E 85 F1 | 	sub	fp, #4
2c668     10 18 06 F1 | 	add	arg04, #16
2c66c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c670     80 18 CE F7 | 	test	arg04, #128 wz
2c674     7C 00 90 AD |  if_e	jmp	#LR__4531
2c678     18 4E 05 F1 | 	add	fp, #24
2c67c     A7 18 02 FB | 	rdlong	arg04, fp
2c680     01 18 06 F1 | 	add	arg04, #1
2c684     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c688     14 4E 85 F1 | 	sub	fp, #20
2c68c     A7 18 02 FB | 	rdlong	arg04, fp
2c690     0C 15 02 F6 | 	mov	arg02, arg04
2c694     28 14 06 F1 | 	add	arg02, #40
2c698     04 4E 85 F1 | 	sub	fp, #4
2c69c     1C 18 06 F1 | 	add	arg04, #28
2c6a0     0C 17 02 FB | 	rdlong	arg03, arg04
2c6a4     01 18 06 F6 | 	mov	arg04, #1
2c6a8     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c6ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6b0     1C 00 90 AD |  if_e	jmp	#LR__4530
2c6b4     04 4E 05 F1 | 	add	fp, #4
2c6b8     A7 FA 01 FB | 	rdlong	result1, fp
2c6bc     04 4E 85 F1 | 	sub	fp, #4
2c6c0     11 FA 05 F1 | 	add	result1, #17
2c6c4     FD 02 48 FC | 	wrbyte	#1, result1
2c6c8     01 FA 05 F6 | 	mov	result1, #1
2c6cc     A4 04 90 FD | 	jmp	#LR__4543
2c6d0                 | LR__4530
2c6d0     04 4E 05 F1 | 	add	fp, #4
2c6d4     A7 18 02 FB | 	rdlong	arg04, fp
2c6d8     0C FB 01 F6 | 	mov	result1, arg04
2c6dc     04 4E 85 F1 | 	sub	fp, #4
2c6e0     10 18 06 F1 | 	add	arg04, #16
2c6e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c6e8     7F 18 06 F5 | 	and	arg04, #127
2c6ec     10 FA 05 F1 | 	add	result1, #16
2c6f0     FD 18 42 FC | 	wrbyte	arg04, result1
2c6f4                 | LR__4531
2c6f4     18 4E 05 F1 | 	add	fp, #24
2c6f8     A7 12 02 FB | 	rdlong	arg01, fp
2c6fc     14 4E 85 F1 | 	sub	fp, #20
2c700     A7 14 02 FB | 	rdlong	arg02, fp
2c704     04 4E 85 F1 | 	sub	fp, #4
2c708     18 14 06 F1 | 	add	arg02, #24
2c70c     0A 15 02 FB | 	rdlong	arg02, arg02
2c710     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c714     20 4E 05 F1 | 	add	fp, #32
2c718     A7 FA 61 FC | 	wrlong	result1, fp
2c71c     20 4E 85 F1 | 	sub	fp, #32
2c720     00 FA 0D F2 | 	cmp	result1, #0 wz
2c724     1C 00 90 5D |  if_ne	jmp	#LR__4532
2c728     04 4E 05 F1 | 	add	fp, #4
2c72c     A7 FA 01 FB | 	rdlong	result1, fp
2c730     04 4E 85 F1 | 	sub	fp, #4
2c734     11 FA 05 F1 | 	add	result1, #17
2c738     FD 04 48 FC | 	wrbyte	#2, result1
2c73c     02 FA 05 F6 | 	mov	result1, #2
2c740     30 04 90 FD | 	jmp	#LR__4543
2c744                 | LR__4532
2c744     20 4E 05 F1 | 	add	fp, #32
2c748     A7 FA 01 FB | 	rdlong	result1, fp
2c74c     0C 4E 05 F1 | 	add	fp, #12
2c750     A7 1E 02 FB | 	rdlong	local01, fp
2c754     0F FB 01 F1 | 	add	result1, local01
2c758     0C 4E 85 F1 | 	sub	fp, #12
2c75c     A7 FA 61 FC | 	wrlong	result1, fp
2c760     14 4E 85 F1 | 	sub	fp, #20
2c764     A7 FA 01 FB | 	rdlong	result1, fp
2c768     09 FA 45 F0 | 	shr	result1, #9
2c76c     1C 4E 05 F1 | 	add	fp, #28
2c770     A7 FA 61 FC | 	wrlong	result1, fp
2c774     28 4E 85 F1 | 	sub	fp, #40
2c778     01 FA 15 F2 | 	cmp	result1, #1 wc
2c77c     60 01 90 CD |  if_b	jmp	#LR__4536
2c780     2C 4E 05 F1 | 	add	fp, #44
2c784     A7 FA 01 FB | 	rdlong	result1, fp
2c788     04 4E 85 F1 | 	sub	fp, #4
2c78c     A7 18 02 FB | 	rdlong	arg04, fp
2c790     0C FB 01 F1 | 	add	result1, arg04
2c794     10 4E 85 F1 | 	sub	fp, #16
2c798     A7 18 02 FB | 	rdlong	arg04, fp
2c79c     18 4E 85 F1 | 	sub	fp, #24
2c7a0     0A 18 06 F1 | 	add	arg04, #10
2c7a4     0C 19 E2 FA | 	rdword	arg04, arg04
2c7a8     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2c7ac     28 00 90 ED |  if_be	jmp	#LR__4533
2c7b0     18 4E 05 F1 | 	add	fp, #24
2c7b4     A7 FA 01 FB | 	rdlong	result1, fp
2c7b8     0A FA 05 F1 | 	add	result1, #10
2c7bc     FD FA E1 FA | 	rdword	result1, result1
2c7c0     14 4E 05 F1 | 	add	fp, #20
2c7c4     A7 18 02 FB | 	rdlong	arg04, fp
2c7c8     0C FB 81 F1 | 	sub	result1, arg04
2c7cc     04 4E 85 F1 | 	sub	fp, #4
2c7d0     A7 FA 61 FC | 	wrlong	result1, fp
2c7d4     28 4E 85 F1 | 	sub	fp, #40
2c7d8                 | LR__4533
2c7d8     18 4E 05 F1 | 	add	fp, #24
2c7dc     A7 18 02 FB | 	rdlong	arg04, fp
2c7e0     01 18 06 F1 | 	add	arg04, #1
2c7e4     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c7e8     18 4E 05 F1 | 	add	fp, #24
2c7ec     A7 14 02 FB | 	rdlong	arg02, fp
2c7f0     10 4E 85 F1 | 	sub	fp, #16
2c7f4     A7 16 02 FB | 	rdlong	arg03, fp
2c7f8     08 4E 05 F1 | 	add	fp, #8
2c7fc     A7 18 02 FB | 	rdlong	arg04, fp
2c800     28 4E 85 F1 | 	sub	fp, #40
2c804     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2c808     00 FA 0D F2 | 	cmp	result1, #0 wz
2c80c     1C 00 90 AD |  if_e	jmp	#LR__4534
2c810     04 4E 05 F1 | 	add	fp, #4
2c814     A7 1E 02 FB | 	rdlong	local01, fp
2c818     04 4E 85 F1 | 	sub	fp, #4
2c81c     11 1E 06 F1 | 	add	local01, #17
2c820     0F 03 48 FC | 	wrbyte	#1, local01
2c824     01 FA 05 F6 | 	mov	result1, #1
2c828     48 03 90 FD | 	jmp	#LR__4543
2c82c                 | LR__4534
2c82c     04 4E 05 F1 | 	add	fp, #4
2c830     A7 FA 01 FB | 	rdlong	result1, fp
2c834     1C FA 05 F1 | 	add	result1, #28
2c838     FD FA 01 FB | 	rdlong	result1, result1
2c83c     1C 4E 05 F1 | 	add	fp, #28
2c840     A7 20 02 FB | 	rdlong	local02, fp
2c844     10 FB 81 F1 | 	sub	result1, local02
2c848     08 4E 05 F1 | 	add	fp, #8
2c84c     A7 18 02 FB | 	rdlong	arg04, fp
2c850     28 4E 85 F1 | 	sub	fp, #40
2c854     0C FB 11 F2 | 	cmp	result1, arg04 wc
2c858     68 00 90 3D |  if_ae	jmp	#LR__4535
2c85c     04 4E 05 F1 | 	add	fp, #4
2c860     A7 12 02 FB | 	rdlong	arg01, fp
2c864     28 12 06 F1 | 	add	arg01, #40
2c868     2C 4E 05 F1 | 	add	fp, #44
2c86c     A7 14 02 FB | 	rdlong	arg02, fp
2c870     2C 4E 85 F1 | 	sub	fp, #44
2c874     A7 FA 01 FB | 	rdlong	result1, fp
2c878     1C FA 05 F1 | 	add	result1, #28
2c87c     FD 22 02 FB | 	rdlong	local03, result1
2c880     1C 4E 05 F1 | 	add	fp, #28
2c884     A7 18 02 FB | 	rdlong	arg04, fp
2c888     20 4E 85 F1 | 	sub	fp, #32
2c88c     0C 23 82 F1 | 	sub	local03, arg04
2c890     09 22 66 F0 | 	shl	local03, #9
2c894     11 15 02 F1 | 	add	arg02, local03
2c898     09 16 C6 F9 | 	decod	arg03, #9
2c89c     B0 3E BF FD | 	call	#__system____builtin_memmove
2c8a0     04 4E 05 F1 | 	add	fp, #4
2c8a4     A7 18 02 FB | 	rdlong	arg04, fp
2c8a8     0C FB 01 F6 | 	mov	result1, arg04
2c8ac     04 4E 85 F1 | 	sub	fp, #4
2c8b0     10 18 06 F1 | 	add	arg04, #16
2c8b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c8b8     7F 18 06 F5 | 	and	arg04, #127
2c8bc     10 FA 05 F1 | 	add	result1, #16
2c8c0     FD 18 42 FC | 	wrbyte	arg04, result1
2c8c4                 | LR__4535
2c8c4     28 4E 05 F1 | 	add	fp, #40
2c8c8     A7 FA 01 FB | 	rdlong	result1, fp
2c8cc     09 FA 65 F0 | 	shl	result1, #9
2c8d0     04 4E 85 F1 | 	sub	fp, #4
2c8d4     A7 FA 61 FC | 	wrlong	result1, fp
2c8d8     24 4E 85 F1 | 	sub	fp, #36
2c8dc                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2c8dc                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2c8dc                 | ' 				}
2c8dc                 | ' 
2c8dc                 | ' 
2c8dc                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2c8dc                 | ' 				continue;
2c8dc     74 01 90 FD | 	jmp	#LR__4539
2c8e0                 | LR__4536
2c8e0     04 4E 05 F1 | 	add	fp, #4
2c8e4     A7 20 02 FB | 	rdlong	local02, fp
2c8e8     1C 20 06 F1 | 	add	local02, #28
2c8ec     10 FB 01 FB | 	rdlong	result1, local02
2c8f0     1C 4E 05 F1 | 	add	fp, #28
2c8f4     A7 20 02 FB | 	rdlong	local02, fp
2c8f8     20 4E 85 F1 | 	sub	fp, #32
2c8fc     10 FB 09 F2 | 	cmp	result1, local02 wz
2c900     90 00 90 AD |  if_e	jmp	#LR__4537
2c904     04 4E 05 F1 | 	add	fp, #4
2c908     A7 FA 01 FB | 	rdlong	result1, fp
2c90c     FD 22 02 F6 | 	mov	local03, result1
2c910     04 4E 85 F1 | 	sub	fp, #4
2c914     14 22 06 F1 | 	add	local03, #20
2c918     11 23 02 FB | 	rdlong	local03, local03
2c91c     0C FA 05 F1 | 	add	result1, #12
2c920     FD 24 02 FB | 	rdlong	local04, result1
2c924     12 27 02 F6 | 	mov	local05, local04
2c928     13 23 12 F2 | 	cmp	local03, local05 wc
2c92c     64 00 90 3D |  if_ae	jmp	#LR__4537
2c930     18 4E 05 F1 | 	add	fp, #24
2c934     A7 18 02 FB | 	rdlong	arg04, fp
2c938     01 18 06 F1 | 	add	arg04, #1
2c93c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c940     14 4E 85 F1 | 	sub	fp, #20
2c944     A7 28 02 FB | 	rdlong	local06, fp
2c948     28 28 06 F1 | 	add	local06, #40
2c94c     14 2B 02 F6 | 	mov	local07, local06
2c950     1C 4E 05 F1 | 	add	fp, #28
2c954     A7 2C 02 FB | 	rdlong	local08, fp
2c958     20 4E 85 F1 | 	sub	fp, #32
2c95c     01 2E 06 F6 | 	mov	local09, #1
2c960     15 15 02 F6 | 	mov	arg02, local07
2c964     16 17 02 F6 | 	mov	arg03, local08
2c968     01 18 06 F6 | 	mov	arg04, #1
2c96c     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2c970     FD 30 0A F6 | 	mov	local10, result1 wz
2c974     1C 00 90 AD |  if_e	jmp	#LR__4537
2c978     04 4E 05 F1 | 	add	fp, #4
2c97c     A7 30 02 FB | 	rdlong	local10, fp
2c980     04 4E 85 F1 | 	sub	fp, #4
2c984     11 30 06 F1 | 	add	local10, #17
2c988     18 03 48 FC | 	wrbyte	#1, local10
2c98c                 | ' 				fp->fptr < fp->obj.objsize &&
2c98c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2c98c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2c98c     01 FA 05 F6 | 	mov	result1, #1
2c990     E0 01 90 FD | 	jmp	#LR__4543
2c994                 | LR__4537
2c994     04 4E 05 F1 | 	add	fp, #4
2c998     A7 18 02 FB | 	rdlong	arg04, fp
2c99c     1C 4E 05 F1 | 	add	fp, #28
2c9a0     A7 FA 01 FB | 	rdlong	result1, fp
2c9a4     20 4E 85 F1 | 	sub	fp, #32
2c9a8     1C 18 06 F1 | 	add	arg04, #28
2c9ac     0C FB 61 FC | 	wrlong	result1, arg04
2c9b0                 | LR__4538
2c9b0     04 4E 05 F1 | 	add	fp, #4
2c9b4     A7 FA 01 FB | 	rdlong	result1, fp
2c9b8     14 FA 05 F1 | 	add	result1, #20
2c9bc     FD FA 01 FB | 	rdlong	result1, result1
2c9c0     FF FB 05 F5 | 	and	result1, #511
2c9c4     09 32 C6 F9 | 	decod	local11, #9
2c9c8     FD 32 82 F1 | 	sub	local11, result1
2c9cc     20 4E 05 F1 | 	add	fp, #32
2c9d0     A7 32 62 FC | 	wrlong	local11, fp
2c9d4     18 4E 85 F1 | 	sub	fp, #24
2c9d8     A7 FA 01 FB | 	rdlong	result1, fp
2c9dc     0C 4E 85 F1 | 	sub	fp, #12
2c9e0     FD 32 1A F2 | 	cmp	local11, result1 wcz
2c9e4     0C 4E 05 11 |  if_a	add	fp, #12
2c9e8     A7 32 02 1B |  if_a	rdlong	local11, fp
2c9ec     18 4E 05 11 |  if_a	add	fp, #24
2c9f0     A7 32 62 1C |  if_a	wrlong	local11, fp
2c9f4     24 4E 85 11 |  if_a	sub	fp, #36
2c9f8     04 4E 05 F1 | 	add	fp, #4
2c9fc     A7 32 02 FB | 	rdlong	local11, fp
2ca00     19 13 02 F6 | 	mov	arg01, local11
2ca04     28 12 06 F1 | 	add	arg01, #40
2ca08     14 32 06 F1 | 	add	local11, #20
2ca0c     19 33 02 FB | 	rdlong	local11, local11
2ca10     FF 33 06 F5 | 	and	local11, #511
2ca14     19 13 02 F1 | 	add	arg01, local11
2ca18     2C 4E 05 F1 | 	add	fp, #44
2ca1c     A7 14 02 FB | 	rdlong	arg02, fp
2ca20     0C 4E 85 F1 | 	sub	fp, #12
2ca24     A7 16 02 FB | 	rdlong	arg03, fp
2ca28     24 4E 85 F1 | 	sub	fp, #36
2ca2c     20 3D BF FD | 	call	#__system____builtin_memmove
2ca30     04 4E 05 F1 | 	add	fp, #4
2ca34     A7 FA 01 FB | 	rdlong	result1, fp
2ca38     FD 32 02 F6 | 	mov	local11, result1
2ca3c     04 4E 85 F1 | 	sub	fp, #4
2ca40     10 FA 05 F1 | 	add	result1, #16
2ca44     FD FA C1 FA | 	rdbyte	result1, result1
2ca48     80 FA 45 F5 | 	or	result1, #128
2ca4c     10 32 06 F1 | 	add	local11, #16
2ca50     19 FB 41 FC | 	wrbyte	result1, local11
2ca54                 | LR__4539
2ca54     0C 4E 05 F1 | 	add	fp, #12
2ca58     A7 32 02 FB | 	rdlong	local11, fp
2ca5c     18 4E 05 F1 | 	add	fp, #24
2ca60     A7 FA 01 FB | 	rdlong	result1, fp
2ca64     FD 32 82 F1 | 	sub	local11, result1
2ca68     18 4E 85 F1 | 	sub	fp, #24
2ca6c     A7 32 62 FC | 	wrlong	local11, fp
2ca70     04 4E 05 F1 | 	add	fp, #4
2ca74     A7 34 02 FB | 	rdlong	local12, fp
2ca78     1A 33 02 FB | 	rdlong	local11, local12
2ca7c     14 4E 05 F1 | 	add	fp, #20
2ca80     A7 36 02 FB | 	rdlong	local13, fp
2ca84     1B 33 02 F1 | 	add	local11, local13
2ca88     1A 33 62 FC | 	wrlong	local11, local12
2ca8c     0C 4E 05 F1 | 	add	fp, #12
2ca90     A7 32 02 FB | 	rdlong	local11, fp
2ca94     0C 4E 85 F1 | 	sub	fp, #12
2ca98     A7 38 02 FB | 	rdlong	local14, fp
2ca9c     1C 33 02 F1 | 	add	local11, local14
2caa0     0C 4E 05 F1 | 	add	fp, #12
2caa4     A7 32 62 FC | 	wrlong	local11, fp
2caa8     2C 4E 85 F1 | 	sub	fp, #44
2caac     A7 3A 02 FB | 	rdlong	local15, fp
2cab0     1D 33 02 F6 | 	mov	local11, local15
2cab4     14 3A 06 F1 | 	add	local15, #20
2cab8     1D 3B 02 FB | 	rdlong	local15, local15
2cabc     20 4E 05 F1 | 	add	fp, #32
2cac0     A7 3C 02 FB | 	rdlong	local16, fp
2cac4     1E 3B 02 F1 | 	add	local15, local16
2cac8     14 32 06 F1 | 	add	local11, #20
2cacc     19 3B 62 FC | 	wrlong	local15, local11
2cad0     20 4E 85 F1 | 	sub	fp, #32
2cad4     A7 3E 02 FB | 	rdlong	local17, fp
2cad8     1F 33 02 F6 | 	mov	local11, local17
2cadc     1F 41 02 F6 | 	mov	local18, local17
2cae0     04 4E 85 F1 | 	sub	fp, #4
2cae4     14 3E 06 F1 | 	add	local17, #20
2cae8     1F 43 02 FB | 	rdlong	local19, local17
2caec     0C 40 06 F1 | 	add	local18, #12
2caf0     20 45 02 FB | 	rdlong	local20, local18
2caf4     22 43 1A F2 | 	cmp	local19, local20 wcz
2caf8     24 00 90 ED |  if_be	jmp	#LR__4540
2cafc     04 4E 05 F1 | 	add	fp, #4
2cb00     A7 26 02 FB | 	rdlong	local05, fp
2cb04     04 4E 85 F1 | 	sub	fp, #4
2cb08     13 23 02 F6 | 	mov	local03, local05
2cb0c     14 22 06 F1 | 	add	local03, #20
2cb10     11 25 02 FB | 	rdlong	local04, local03
2cb14     14 22 86 F1 | 	sub	local03, #20
2cb18     12 47 02 F6 | 	mov	local21, local04
2cb1c     20 00 90 FD | 	jmp	#LR__4541
2cb20                 | LR__4540
2cb20     04 4E 05 F1 | 	add	fp, #4
2cb24     A7 2A 02 FB | 	rdlong	local07, fp
2cb28     04 4E 85 F1 | 	sub	fp, #4
2cb2c     15 31 02 F6 | 	mov	local10, local07
2cb30     0C 30 06 F1 | 	add	local10, #12
2cb34     18 2D 02 FB | 	rdlong	local08, local10
2cb38     0C 30 86 F1 | 	sub	local10, #12
2cb3c     16 47 02 F6 | 	mov	local21, local08
2cb40                 | LR__4541
2cb40     0C 32 06 F1 | 	add	local11, #12
2cb44     19 47 62 FC | 	wrlong	local21, local11
2cb48     5C F9 9F FD | 	jmp	#LR__4523
2cb4c                 | LR__4542
2cb4c     04 4E 05 F1 | 	add	fp, #4
2cb50     A7 34 02 FB | 	rdlong	local12, fp
2cb54     1A 1F 02 F6 | 	mov	local01, local12
2cb58     04 4E 85 F1 | 	sub	fp, #4
2cb5c     10 34 06 F1 | 	add	local12, #16
2cb60     1A 33 C2 FA | 	rdbyte	local11, local12
2cb64     40 32 46 F5 | 	or	local11, #64
2cb68     10 1E 06 F1 | 	add	local01, #16
2cb6c     0F 33 42 FC | 	wrbyte	local11, local01
2cb70                 | ' 
2cb70                 | ' 
2cb70                 | ' 
2cb70                 | ' 
2cb70                 | ' 
2cb70                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2cb70                 | ' 		fp->flag |=  0x80 ;
2cb70                 | ' 
2cb70                 | ' 	}
2cb70                 | ' 
2cb70                 | ' 	fp->flag |=  0x40 ;
2cb70                 | ' 
2cb70                 | ' 	return FR_OK ;
2cb70     00 FA 05 F6 | 	mov	result1, #0
2cb74                 | LR__4543
2cb74     A7 F0 03 F6 | 	mov	ptra, fp
2cb78     B2 00 A0 FD | 	call	#popregs_
2cb7c                 | _fatfs_cc_f_write_ret
2cb7c     2D 00 64 FD | 	ret
2cb80                 | 
2cb80                 | _fatfs_cc_f_sync
2cb80     00 4A 05 F6 | 	mov	COUNT_, #0
2cb84     A8 00 A0 FD | 	call	#pushregs_
2cb88     18 F0 07 F1 | 	add	ptra, #24
2cb8c     04 4E 05 F1 | 	add	fp, #4
2cb90     A7 12 62 FC | 	wrlong	arg01, fp
2cb94     08 4E 05 F1 | 	add	fp, #8
2cb98     A7 14 02 F6 | 	mov	arg02, fp
2cb9c     0C 4E 85 F1 | 	sub	fp, #12
2cba0     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2cba4     08 4E 05 F1 | 	add	fp, #8
2cba8     A7 FA 61 FC | 	wrlong	result1, fp
2cbac     08 4E 85 F1 | 	sub	fp, #8
2cbb0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cbb4     C0 01 90 5D |  if_ne	jmp	#LR__4553
2cbb8     04 4E 05 F1 | 	add	fp, #4
2cbbc     A7 18 02 FB | 	rdlong	arg04, fp
2cbc0     04 4E 85 F1 | 	sub	fp, #4
2cbc4     10 18 06 F1 | 	add	arg04, #16
2cbc8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cbcc     40 18 CE F7 | 	test	arg04, #64 wz
2cbd0     A4 01 90 AD |  if_e	jmp	#LR__4552
2cbd4     04 4E 05 F1 | 	add	fp, #4
2cbd8     A7 18 02 FB | 	rdlong	arg04, fp
2cbdc     04 4E 85 F1 | 	sub	fp, #4
2cbe0     10 18 06 F1 | 	add	arg04, #16
2cbe4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cbe8     80 18 CE F7 | 	test	arg04, #128 wz
2cbec     64 00 90 AD |  if_e	jmp	#LR__4550
2cbf0     0C 4E 05 F1 | 	add	fp, #12
2cbf4     A7 18 02 FB | 	rdlong	arg04, fp
2cbf8     01 18 06 F1 | 	add	arg04, #1
2cbfc     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cc00     08 4E 85 F1 | 	sub	fp, #8
2cc04     A7 18 02 FB | 	rdlong	arg04, fp
2cc08     0C 15 02 F6 | 	mov	arg02, arg04
2cc0c     28 14 06 F1 | 	add	arg02, #40
2cc10     04 4E 85 F1 | 	sub	fp, #4
2cc14     1C 18 06 F1 | 	add	arg04, #28
2cc18     0C 17 02 FB | 	rdlong	arg03, arg04
2cc1c     01 18 06 F6 | 	mov	arg04, #1
2cc20     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2cc24     00 FA 0D F2 | 	cmp	result1, #0 wz
2cc28     01 FA 05 56 |  if_ne	mov	result1, #1
2cc2c     54 01 90 5D |  if_ne	jmp	#LR__4554
2cc30     04 4E 05 F1 | 	add	fp, #4
2cc34     A7 18 02 FB | 	rdlong	arg04, fp
2cc38     0C 17 02 F6 | 	mov	arg03, arg04
2cc3c     04 4E 85 F1 | 	sub	fp, #4
2cc40     10 18 06 F1 | 	add	arg04, #16
2cc44     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cc48     7F 18 06 F5 | 	and	arg04, #127
2cc4c     10 16 06 F1 | 	add	arg03, #16
2cc50     0B 19 42 FC | 	wrbyte	arg04, arg03
2cc54                 | LR__4550
2cc54     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2cc58     10 4E 05 F1 | 	add	fp, #16
2cc5c     A7 FA 61 FC | 	wrlong	result1, fp
2cc60     04 4E 85 F1 | 	sub	fp, #4
2cc64     A7 12 02 FB | 	rdlong	arg01, fp
2cc68     08 4E 85 F1 | 	sub	fp, #8
2cc6c     A7 18 02 FB | 	rdlong	arg04, fp
2cc70     04 4E 85 F1 | 	sub	fp, #4
2cc74     20 18 06 F1 | 	add	arg04, #32
2cc78     0C 15 02 FB | 	rdlong	arg02, arg04
2cc7c     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2cc80     08 4E 05 F1 | 	add	fp, #8
2cc84     A7 FA 61 FC | 	wrlong	result1, fp
2cc88     08 4E 85 F1 | 	sub	fp, #8
2cc8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cc90     E4 00 90 5D |  if_ne	jmp	#LR__4551
2cc94     04 4E 05 F1 | 	add	fp, #4
2cc98     A7 18 02 FB | 	rdlong	arg04, fp
2cc9c     24 18 06 F1 | 	add	arg04, #36
2cca0     0C 19 02 FB | 	rdlong	arg04, arg04
2cca4     10 4E 05 F1 | 	add	fp, #16
2cca8     A7 18 62 FC | 	wrlong	arg04, fp
2ccac     0C 17 02 F6 | 	mov	arg03, arg04
2ccb0     0B 16 06 F1 | 	add	arg03, #11
2ccb4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ccb8     20 16 46 F5 | 	or	arg03, #32
2ccbc     0B 18 06 F1 | 	add	arg04, #11
2ccc0     0C 17 42 FC | 	wrbyte	arg03, arg04
2ccc4     10 4E 85 F1 | 	sub	fp, #16
2ccc8     A7 18 02 FB | 	rdlong	arg04, fp
2cccc     0C 13 02 FB | 	rdlong	arg01, arg04
2ccd0     10 4E 05 F1 | 	add	fp, #16
2ccd4     A7 14 02 FB | 	rdlong	arg02, fp
2ccd8     14 4E 85 F1 | 	sub	fp, #20
2ccdc     08 18 06 F1 | 	add	arg04, #8
2cce0     0C 17 02 FB | 	rdlong	arg03, arg04
2cce4     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2cce8     14 4E 05 F1 | 	add	fp, #20
2ccec     A7 12 02 FB | 	rdlong	arg01, fp
2ccf0     1C 12 06 F1 | 	add	arg01, #28
2ccf4     10 4E 85 F1 | 	sub	fp, #16
2ccf8     A7 18 02 FB | 	rdlong	arg04, fp
2ccfc     0C 18 06 F1 | 	add	arg04, #12
2cd00     0C 15 02 FB | 	rdlong	arg02, arg04
2cd04     09 15 62 FC | 	wrlong	arg02, arg01
2cd08     10 4E 05 F1 | 	add	fp, #16
2cd0c     A7 12 02 FB | 	rdlong	arg01, fp
2cd10     16 12 06 F1 | 	add	arg01, #22
2cd14     04 4E 85 F1 | 	sub	fp, #4
2cd18     A7 14 02 FB | 	rdlong	arg02, fp
2cd1c     09 15 62 FC | 	wrlong	arg02, arg01
2cd20     04 4E 05 F1 | 	add	fp, #4
2cd24     A7 12 02 FB | 	rdlong	arg01, fp
2cd28     12 12 06 F1 | 	add	arg01, #18
2cd2c     09 01 58 FC | 	wrword	#0, arg01
2cd30     08 4E 85 F1 | 	sub	fp, #8
2cd34     A7 18 02 FB | 	rdlong	arg04, fp
2cd38     03 18 06 F1 | 	add	arg04, #3
2cd3c     0C 03 48 FC | 	wrbyte	#1, arg04
2cd40     A7 12 02 FB | 	rdlong	arg01, fp
2cd44     0C 4E 85 F1 | 	sub	fp, #12
2cd48     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2cd4c     08 4E 05 F1 | 	add	fp, #8
2cd50     A7 FA 61 FC | 	wrlong	result1, fp
2cd54     04 4E 85 F1 | 	sub	fp, #4
2cd58     A7 18 02 FB | 	rdlong	arg04, fp
2cd5c     0C 17 02 F6 | 	mov	arg03, arg04
2cd60     04 4E 85 F1 | 	sub	fp, #4
2cd64     10 18 06 F1 | 	add	arg04, #16
2cd68     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd6c     BF 18 06 F5 | 	and	arg04, #191
2cd70     10 16 06 F1 | 	add	arg03, #16
2cd74     0B 19 42 FC | 	wrbyte	arg04, arg03
2cd78                 | LR__4551
2cd78                 | LR__4552
2cd78                 | LR__4553
2cd78                 | ' 					dir = fp->dir_ptr;
2cd78                 | ' 					dir[ 11 ] |=  0x20 ;
2cd78                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2cd78                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2cd78                 | ' 					st_dword(dir +  22 , tm);
2cd78                 | ' 					st_word(dir +  18 , 0);
2cd78                 | ' 					fs->wflag = 1;
2cd78                 | ' 					res = sync_fs(fs);
2cd78                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2cd78                 | ' 				}
2cd78                 | ' 			}
2cd78                 | ' 		}
2cd78                 | ' 	}
2cd78                 | ' 
2cd78                 | ' 	return res ;
2cd78     08 4E 05 F1 | 	add	fp, #8
2cd7c     A7 FA 01 FB | 	rdlong	result1, fp
2cd80     08 4E 85 F1 | 	sub	fp, #8
2cd84                 | LR__4554
2cd84     A7 F0 03 F6 | 	mov	ptra, fp
2cd88     B2 00 A0 FD | 	call	#popregs_
2cd8c                 | _fatfs_cc_f_sync_ret
2cd8c     2D 00 64 FD | 	ret
2cd90                 | 
2cd90                 | _fatfs_cc_f_close
2cd90     01 4A 05 F6 | 	mov	COUNT_, #1
2cd94     A8 00 A0 FD | 	call	#pushregs_
2cd98     10 F0 07 F1 | 	add	ptra, #16
2cd9c     04 4E 05 F1 | 	add	fp, #4
2cda0     A7 12 62 FC | 	wrlong	arg01, fp
2cda4     04 4E 85 F1 | 	sub	fp, #4
2cda8     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2cdac     08 4E 05 F1 | 	add	fp, #8
2cdb0     A7 FA 61 FC | 	wrlong	result1, fp
2cdb4     08 4E 85 F1 | 	sub	fp, #8
2cdb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cdbc     38 00 90 5D |  if_ne	jmp	#LR__4560
2cdc0     04 4E 05 F1 | 	add	fp, #4
2cdc4     A7 12 02 FB | 	rdlong	arg01, fp
2cdc8     08 4E 05 F1 | 	add	fp, #8
2cdcc     A7 14 02 F6 | 	mov	arg02, fp
2cdd0     0C 4E 85 F1 | 	sub	fp, #12
2cdd4     9C E6 BF FD | 	call	#_fatfs_cc_validate
2cdd8     08 4E 05 F1 | 	add	fp, #8
2cddc     A7 FA 61 FC | 	wrlong	result1, fp
2cde0     08 4E 85 F1 | 	sub	fp, #8
2cde4     00 FA 0D F2 | 	cmp	result1, #0 wz
2cde8     04 4E 05 A1 |  if_e	add	fp, #4
2cdec     A7 1E 02 AB |  if_e	rdlong	local01, fp
2cdf0     04 4E 85 A1 |  if_e	sub	fp, #4
2cdf4     0F 01 68 AC |  if_e	wrlong	#0, local01
2cdf8                 | LR__4560
2cdf8                 | ' 
2cdf8                 | ' 
2cdf8                 | ' 
2cdf8                 | ' 
2cdf8                 | ' 			fp->obj.fs = 0;
2cdf8                 | ' #line 4192 "ff.c"
2cdf8                 | ' 		}
2cdf8                 | ' 	}
2cdf8                 | ' 	return res;
2cdf8     08 4E 05 F1 | 	add	fp, #8
2cdfc     A7 FA 01 FB | 	rdlong	result1, fp
2ce00     08 4E 85 F1 | 	sub	fp, #8
2ce04     A7 F0 03 F6 | 	mov	ptra, fp
2ce08     B2 00 A0 FD | 	call	#popregs_
2ce0c                 | _fatfs_cc_f_close_ret
2ce0c     2D 00 64 FD | 	ret
2ce10                 | 
2ce10                 | _fatfs_cc_f_lseek
2ce10     00 4A 05 F6 | 	mov	COUNT_, #0
2ce14     A8 00 A0 FD | 	call	#pushregs_
2ce18     24 F0 07 F1 | 	add	ptra, #36
2ce1c     04 4E 05 F1 | 	add	fp, #4
2ce20     A7 12 62 FC | 	wrlong	arg01, fp
2ce24     04 4E 05 F1 | 	add	fp, #4
2ce28     A7 14 62 FC | 	wrlong	arg02, fp
2ce2c     04 4E 85 F1 | 	sub	fp, #4
2ce30     A7 12 02 FB | 	rdlong	arg01, fp
2ce34     0C 4E 05 F1 | 	add	fp, #12
2ce38     A7 14 02 F6 | 	mov	arg02, fp
2ce3c     10 4E 85 F1 | 	sub	fp, #16
2ce40     30 E6 BF FD | 	call	#_fatfs_cc_validate
2ce44     0C 4E 05 F1 | 	add	fp, #12
2ce48     A7 FA 61 FC | 	wrlong	result1, fp
2ce4c     0C 4E 85 F1 | 	sub	fp, #12
2ce50     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce54     1C 00 90 5D |  if_ne	jmp	#LR__4570
2ce58     04 4E 05 F1 | 	add	fp, #4
2ce5c     A7 18 02 FB | 	rdlong	arg04, fp
2ce60     11 18 06 F1 | 	add	arg04, #17
2ce64     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce68     08 4E 05 F1 | 	add	fp, #8
2ce6c     A7 18 62 FC | 	wrlong	arg04, fp
2ce70     0C 4E 85 F1 | 	sub	fp, #12
2ce74                 | LR__4570
2ce74     0C 4E 05 F1 | 	add	fp, #12
2ce78     A7 18 0A FB | 	rdlong	arg04, fp wz
2ce7c     0C 4E 85 F1 | 	sub	fp, #12
2ce80     0C 4E 05 51 |  if_ne	add	fp, #12
2ce84     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2ce88     0C 4E 85 51 |  if_ne	sub	fp, #12
2ce8c     40 06 90 5D |  if_ne	jmp	#LR__4593
2ce90     04 4E 05 F1 | 	add	fp, #4
2ce94     A7 18 02 FB | 	rdlong	arg04, fp
2ce98     04 4E 05 F1 | 	add	fp, #4
2ce9c     A7 16 02 FB | 	rdlong	arg03, fp
2cea0     08 4E 85 F1 | 	sub	fp, #8
2cea4     0C 18 06 F1 | 	add	arg04, #12
2cea8     0C 19 02 FB | 	rdlong	arg04, arg04
2ceac     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2ceb0     3C 00 90 ED |  if_be	jmp	#LR__4571
2ceb4     04 4E 05 F1 | 	add	fp, #4
2ceb8     A7 16 02 FB | 	rdlong	arg03, fp
2cebc     04 4E 85 F1 | 	sub	fp, #4
2cec0     10 16 06 F1 | 	add	arg03, #16
2cec4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cec8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2cecc     02 16 CE F7 | 	test	arg03, #2 wz
2ced0     1C 00 90 5D |  if_ne	jmp	#LR__4571
2ced4     04 4E 05 F1 | 	add	fp, #4
2ced8     A7 16 02 FB | 	rdlong	arg03, fp
2cedc     0C 16 06 F1 | 	add	arg03, #12
2cee0     0B 17 02 FB | 	rdlong	arg03, arg03
2cee4     04 4E 05 F1 | 	add	fp, #4
2cee8     A7 16 62 FC | 	wrlong	arg03, fp
2ceec     08 4E 85 F1 | 	sub	fp, #8
2cef0                 | LR__4571
2cef0     04 4E 05 F1 | 	add	fp, #4
2cef4     A7 16 02 FB | 	rdlong	arg03, fp
2cef8     14 16 06 F1 | 	add	arg03, #20
2cefc     0B 17 02 FB | 	rdlong	arg03, arg03
2cf00     1C 4E 05 F1 | 	add	fp, #28
2cf04     A7 16 62 FC | 	wrlong	arg03, fp
2cf08     1C 4E 85 F1 | 	sub	fp, #28
2cf0c     A7 16 02 FB | 	rdlong	arg03, fp
2cf10     18 4E 05 F1 | 	add	fp, #24
2cf14     A7 00 68 FC | 	wrlong	#0, fp
2cf18     14 16 06 F1 | 	add	arg03, #20
2cf1c     0B 01 68 FC | 	wrlong	#0, arg03
2cf20     14 4E 85 F1 | 	sub	fp, #20
2cf24     A7 16 02 FB | 	rdlong	arg03, fp
2cf28     08 4E 85 F1 | 	sub	fp, #8
2cf2c     01 16 16 F2 | 	cmp	arg03, #1 wc
2cf30     E4 03 90 CD |  if_b	jmp	#LR__4587
2cf34     10 4E 05 F1 | 	add	fp, #16
2cf38     A7 16 02 FB | 	rdlong	arg03, fp
2cf3c     0A 16 06 F1 | 	add	arg03, #10
2cf40     0B 19 E2 FA | 	rdword	arg04, arg03
2cf44     09 18 66 F0 | 	shl	arg04, #9
2cf48     08 4E 05 F1 | 	add	fp, #8
2cf4c     A7 18 62 FC | 	wrlong	arg04, fp
2cf50     08 4E 05 F1 | 	add	fp, #8
2cf54     A7 18 02 FB | 	rdlong	arg04, fp
2cf58     20 4E 85 F1 | 	sub	fp, #32
2cf5c     01 18 16 F2 | 	cmp	arg04, #1 wc
2cf60     AC 00 90 CD |  if_b	jmp	#LR__4572
2cf64     08 4E 05 F1 | 	add	fp, #8
2cf68     A7 18 02 FB | 	rdlong	arg04, fp
2cf6c     01 18 86 F1 | 	sub	arg04, #1
2cf70     10 4E 05 F1 | 	add	fp, #16
2cf74     A7 16 02 FB | 	rdlong	arg03, fp
2cf78     0B 19 12 FD | 	qdiv	arg04, arg03
2cf7c     08 4E 05 F1 | 	add	fp, #8
2cf80     A7 FA 01 FB | 	rdlong	result1, fp
2cf84     01 FA 85 F1 | 	sub	result1, #1
2cf88     18 18 62 FD | 	getqx	arg04
2cf8c     0B FB 11 FD | 	qdiv	result1, arg03
2cf90     20 4E 85 F1 | 	sub	fp, #32
2cf94     18 16 62 FD | 	getqx	arg03
2cf98     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2cf9c     70 00 90 CD |  if_b	jmp	#LR__4572
2cfa0     04 4E 05 F1 | 	add	fp, #4
2cfa4     A7 16 02 FB | 	rdlong	arg03, fp
2cfa8     1C 4E 05 F1 | 	add	fp, #28
2cfac     A7 FA 01 FB | 	rdlong	result1, fp
2cfb0     01 FA 85 F1 | 	sub	result1, #1
2cfb4     08 4E 85 F1 | 	sub	fp, #8
2cfb8     A7 18 02 FB | 	rdlong	arg04, fp
2cfbc     01 18 86 F1 | 	sub	arg04, #1
2cfc0     0C FB 21 F5 | 	andn	result1, arg04
2cfc4     14 16 06 F1 | 	add	arg03, #20
2cfc8     0B FB 61 FC | 	wrlong	result1, arg03
2cfcc     10 4E 85 F1 | 	sub	fp, #16
2cfd0     A7 16 02 FB | 	rdlong	arg03, fp
2cfd4     04 4E 85 F1 | 	sub	fp, #4
2cfd8     A7 18 02 FB | 	rdlong	arg04, fp
2cfdc     14 18 06 F1 | 	add	arg04, #20
2cfe0     0C 19 02 FB | 	rdlong	arg04, arg04
2cfe4     0C 17 82 F1 | 	sub	arg03, arg04
2cfe8     04 4E 05 F1 | 	add	fp, #4
2cfec     A7 16 62 FC | 	wrlong	arg03, fp
2cff0     04 4E 85 F1 | 	sub	fp, #4
2cff4     A7 16 02 FB | 	rdlong	arg03, fp
2cff8     18 16 06 F1 | 	add	arg03, #24
2cffc     0B 17 02 FB | 	rdlong	arg03, arg03
2d000     10 4E 05 F1 | 	add	fp, #16
2d004     A7 16 62 FC | 	wrlong	arg03, fp
2d008     14 4E 85 F1 | 	sub	fp, #20
2d00c     D0 00 90 FD | 	jmp	#LR__4576
2d010                 | LR__4572
2d010     04 4E 05 F1 | 	add	fp, #4
2d014     A7 16 02 FB | 	rdlong	arg03, fp
2d018     08 16 06 F1 | 	add	arg03, #8
2d01c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d020     10 4E 05 F1 | 	add	fp, #16
2d024     A7 16 62 FC | 	wrlong	arg03, fp
2d028     14 4E 85 F1 | 	sub	fp, #20
2d02c     94 00 90 5D |  if_ne	jmp	#LR__4575
2d030     04 4E 05 F1 | 	add	fp, #4
2d034     A7 12 02 FB | 	rdlong	arg01, fp
2d038     04 4E 85 F1 | 	sub	fp, #4
2d03c     00 14 06 F6 | 	mov	arg02, #0
2d040     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d044     14 4E 05 F1 | 	add	fp, #20
2d048     A7 FA 61 FC | 	wrlong	result1, fp
2d04c     14 4E 85 F1 | 	sub	fp, #20
2d050     01 FA 0D F2 | 	cmp	result1, #1 wz
2d054     1C 00 90 5D |  if_ne	jmp	#LR__4573
2d058     04 4E 05 F1 | 	add	fp, #4
2d05c     A7 16 02 FB | 	rdlong	arg03, fp
2d060     04 4E 85 F1 | 	sub	fp, #4
2d064     11 16 06 F1 | 	add	arg03, #17
2d068     0B 05 48 FC | 	wrbyte	#2, arg03
2d06c     02 FA 05 F6 | 	mov	result1, #2
2d070     5C 04 90 FD | 	jmp	#LR__4593
2d074                 | LR__4573
2d074     14 4E 05 F1 | 	add	fp, #20
2d078     A7 FA 01 FB | 	rdlong	result1, fp
2d07c     14 4E 85 F1 | 	sub	fp, #20
2d080     FF FF 7F FF 
2d084     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d088     1C 00 90 5D |  if_ne	jmp	#LR__4574
2d08c     04 4E 05 F1 | 	add	fp, #4
2d090     A7 16 02 FB | 	rdlong	arg03, fp
2d094     04 4E 85 F1 | 	sub	fp, #4
2d098     11 16 06 F1 | 	add	arg03, #17
2d09c     0B 03 48 FC | 	wrbyte	#1, arg03
2d0a0     01 FA 05 F6 | 	mov	result1, #1
2d0a4     28 04 90 FD | 	jmp	#LR__4593
2d0a8                 | LR__4574
2d0a8     04 4E 05 F1 | 	add	fp, #4
2d0ac     A7 16 02 FB | 	rdlong	arg03, fp
2d0b0     10 4E 05 F1 | 	add	fp, #16
2d0b4     A7 18 02 FB | 	rdlong	arg04, fp
2d0b8     14 4E 85 F1 | 	sub	fp, #20
2d0bc     08 16 06 F1 | 	add	arg03, #8
2d0c0     0B 19 62 FC | 	wrlong	arg04, arg03
2d0c4                 | LR__4575
2d0c4     04 4E 05 F1 | 	add	fp, #4
2d0c8     A7 16 02 FB | 	rdlong	arg03, fp
2d0cc     10 4E 05 F1 | 	add	fp, #16
2d0d0     A7 18 02 FB | 	rdlong	arg04, fp
2d0d4     14 4E 85 F1 | 	sub	fp, #20
2d0d8     18 16 06 F1 | 	add	arg03, #24
2d0dc     0B 19 62 FC | 	wrlong	arg04, arg03
2d0e0                 | LR__4576
2d0e0     14 4E 05 F1 | 	add	fp, #20
2d0e4     A7 16 0A FB | 	rdlong	arg03, fp wz
2d0e8     14 4E 85 F1 | 	sub	fp, #20
2d0ec     28 02 90 AD |  if_e	jmp	#LR__4586
2d0f0                 | ' 				while (ofs > bcs) {
2d0f0                 | LR__4577
2d0f0     08 4E 05 F1 | 	add	fp, #8
2d0f4     A7 18 02 FB | 	rdlong	arg04, fp
2d0f8     10 4E 05 F1 | 	add	fp, #16
2d0fc     A7 16 02 FB | 	rdlong	arg03, fp
2d100     18 4E 85 F1 | 	sub	fp, #24
2d104     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d108     68 01 90 ED |  if_be	jmp	#LR__4583
2d10c     08 4E 05 F1 | 	add	fp, #8
2d110     A7 18 02 FB | 	rdlong	arg04, fp
2d114     10 4E 05 F1 | 	add	fp, #16
2d118     A7 16 02 FB | 	rdlong	arg03, fp
2d11c     0B 19 82 F1 | 	sub	arg04, arg03
2d120     10 4E 85 F1 | 	sub	fp, #16
2d124     A7 18 62 FC | 	wrlong	arg04, fp
2d128     04 4E 85 F1 | 	sub	fp, #4
2d12c     A7 18 02 FB | 	rdlong	arg04, fp
2d130     0C FB 01 F6 | 	mov	result1, arg04
2d134     14 18 06 F1 | 	add	arg04, #20
2d138     0C 19 02 FB | 	rdlong	arg04, arg04
2d13c     14 4E 05 F1 | 	add	fp, #20
2d140     A7 16 02 FB | 	rdlong	arg03, fp
2d144     0B 19 02 F1 | 	add	arg04, arg03
2d148     14 FA 05 F1 | 	add	result1, #20
2d14c     FD 18 62 FC | 	wrlong	arg04, result1
2d150     14 4E 85 F1 | 	sub	fp, #20
2d154     A7 16 02 FB | 	rdlong	arg03, fp
2d158     04 4E 85 F1 | 	sub	fp, #4
2d15c     10 16 06 F1 | 	add	arg03, #16
2d160     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d164     02 16 CE F7 | 	test	arg03, #2 wz
2d168     3C 00 90 AD |  if_e	jmp	#LR__4578
2d16c     04 4E 05 F1 | 	add	fp, #4
2d170     A7 12 02 FB | 	rdlong	arg01, fp
2d174     10 4E 05 F1 | 	add	fp, #16
2d178     A7 14 02 FB | 	rdlong	arg02, fp
2d17c     14 4E 85 F1 | 	sub	fp, #20
2d180     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d184     14 4E 05 F1 | 	add	fp, #20
2d188     A7 FA 61 FC | 	wrlong	result1, fp
2d18c     00 FA 4D F2 | 	cmps	result1, #0 wz
2d190     14 4E 85 F1 | 	sub	fp, #20
2d194     08 4E 05 A1 |  if_e	add	fp, #8
2d198     A7 00 68 AC |  if_e	wrlong	#0, fp
2d19c     08 4E 85 A1 |  if_e	sub	fp, #8
2d1a0                 | ' 							ofs = 0; break;
2d1a0     D0 00 90 AD |  if_e	jmp	#LR__4583
2d1a4     24 00 90 FD | 	jmp	#LR__4579
2d1a8                 | LR__4578
2d1a8     04 4E 05 F1 | 	add	fp, #4
2d1ac     A7 12 02 FB | 	rdlong	arg01, fp
2d1b0     10 4E 05 F1 | 	add	fp, #16
2d1b4     A7 14 02 FB | 	rdlong	arg02, fp
2d1b8     14 4E 85 F1 | 	sub	fp, #20
2d1bc     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d1c0     14 4E 05 F1 | 	add	fp, #20
2d1c4     A7 FA 61 FC | 	wrlong	result1, fp
2d1c8     14 4E 85 F1 | 	sub	fp, #20
2d1cc                 | LR__4579
2d1cc     14 4E 05 F1 | 	add	fp, #20
2d1d0     A7 16 02 FB | 	rdlong	arg03, fp
2d1d4     14 4E 85 F1 | 	sub	fp, #20
2d1d8     FF FF 7F FF 
2d1dc     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d1e0     1C 00 90 5D |  if_ne	jmp	#LR__4580
2d1e4     04 4E 05 F1 | 	add	fp, #4
2d1e8     A7 16 02 FB | 	rdlong	arg03, fp
2d1ec     04 4E 85 F1 | 	sub	fp, #4
2d1f0     11 16 06 F1 | 	add	arg03, #17
2d1f4     0B 03 48 FC | 	wrbyte	#1, arg03
2d1f8     01 FA 05 F6 | 	mov	result1, #1
2d1fc     D0 02 90 FD | 	jmp	#LR__4593
2d200                 | LR__4580
2d200     14 4E 05 F1 | 	add	fp, #20
2d204     A7 16 02 FB | 	rdlong	arg03, fp
2d208     14 4E 85 F1 | 	sub	fp, #20
2d20c     02 16 16 F2 | 	cmp	arg03, #2 wc
2d210     24 00 90 CD |  if_b	jmp	#LR__4581
2d214     10 4E 05 F1 | 	add	fp, #16
2d218     A7 18 02 FB | 	rdlong	arg04, fp
2d21c     04 4E 05 F1 | 	add	fp, #4
2d220     A7 16 02 FB | 	rdlong	arg03, fp
2d224     14 4E 85 F1 | 	sub	fp, #20
2d228     18 18 06 F1 | 	add	arg04, #24
2d22c     0C 19 02 FB | 	rdlong	arg04, arg04
2d230     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d234     1C 00 90 CD |  if_b	jmp	#LR__4582
2d238                 | LR__4581
2d238     04 4E 05 F1 | 	add	fp, #4
2d23c     A7 16 02 FB | 	rdlong	arg03, fp
2d240     04 4E 85 F1 | 	sub	fp, #4
2d244     11 16 06 F1 | 	add	arg03, #17
2d248     0B 05 48 FC | 	wrbyte	#2, arg03
2d24c     02 FA 05 F6 | 	mov	result1, #2
2d250     7C 02 90 FD | 	jmp	#LR__4593
2d254                 | LR__4582
2d254     04 4E 05 F1 | 	add	fp, #4
2d258     A7 18 02 FB | 	rdlong	arg04, fp
2d25c     10 4E 05 F1 | 	add	fp, #16
2d260     A7 16 02 FB | 	rdlong	arg03, fp
2d264     14 4E 85 F1 | 	sub	fp, #20
2d268     18 18 06 F1 | 	add	arg04, #24
2d26c     0C 17 62 FC | 	wrlong	arg03, arg04
2d270     7C FE 9F FD | 	jmp	#LR__4577
2d274                 | LR__4583
2d274     04 4E 05 F1 | 	add	fp, #4
2d278     A7 16 02 FB | 	rdlong	arg03, fp
2d27c     0B 13 02 F6 | 	mov	arg01, arg03
2d280     14 16 06 F1 | 	add	arg03, #20
2d284     0B 15 02 FB | 	rdlong	arg02, arg03
2d288     04 4E 05 F1 | 	add	fp, #4
2d28c     A7 16 02 FB | 	rdlong	arg03, fp
2d290     0B 15 02 F1 | 	add	arg02, arg03
2d294     14 12 06 F1 | 	add	arg01, #20
2d298     09 15 62 FC | 	wrlong	arg02, arg01
2d29c     A7 16 02 FB | 	rdlong	arg03, fp
2d2a0     08 4E 85 F1 | 	sub	fp, #8
2d2a4     FF 17 CE F7 | 	test	arg03, #511 wz
2d2a8     6C 00 90 AD |  if_e	jmp	#LR__4585
2d2ac     10 4E 05 F1 | 	add	fp, #16
2d2b0     A7 12 02 FB | 	rdlong	arg01, fp
2d2b4     04 4E 05 F1 | 	add	fp, #4
2d2b8     A7 14 02 FB | 	rdlong	arg02, fp
2d2bc     14 4E 85 F1 | 	sub	fp, #20
2d2c0     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d2c4     1C 4E 05 F1 | 	add	fp, #28
2d2c8     A7 FA 61 FC | 	wrlong	result1, fp
2d2cc     1C 4E 85 F1 | 	sub	fp, #28
2d2d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d2d4     1C 00 90 5D |  if_ne	jmp	#LR__4584
2d2d8     04 4E 05 F1 | 	add	fp, #4
2d2dc     A7 16 02 FB | 	rdlong	arg03, fp
2d2e0     04 4E 85 F1 | 	sub	fp, #4
2d2e4     11 16 06 F1 | 	add	arg03, #17
2d2e8     0B 05 48 FC | 	wrbyte	#2, arg03
2d2ec     02 FA 05 F6 | 	mov	result1, #2
2d2f0     DC 01 90 FD | 	jmp	#LR__4593
2d2f4                 | LR__4584
2d2f4     1C 4E 05 F1 | 	add	fp, #28
2d2f8     A7 18 02 FB | 	rdlong	arg04, fp
2d2fc     14 4E 85 F1 | 	sub	fp, #20
2d300     A7 16 02 FB | 	rdlong	arg03, fp
2d304     09 16 46 F0 | 	shr	arg03, #9
2d308     0B 19 02 F1 | 	add	arg04, arg03
2d30c     14 4E 05 F1 | 	add	fp, #20
2d310     A7 18 62 FC | 	wrlong	arg04, fp
2d314     1C 4E 85 F1 | 	sub	fp, #28
2d318                 | LR__4585
2d318                 | LR__4586
2d318                 | LR__4587
2d318     04 4E 05 F1 | 	add	fp, #4
2d31c     A7 18 02 FB | 	rdlong	arg04, fp
2d320     0C 17 02 F6 | 	mov	arg03, arg04
2d324     04 4E 85 F1 | 	sub	fp, #4
2d328     14 16 06 F1 | 	add	arg03, #20
2d32c     0B 17 02 FB | 	rdlong	arg03, arg03
2d330     0C 18 06 F1 | 	add	arg04, #12
2d334     0C 19 02 FB | 	rdlong	arg04, arg04
2d338     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d33c     3C 00 90 ED |  if_be	jmp	#LR__4588
2d340     04 4E 05 F1 | 	add	fp, #4
2d344     A7 18 02 FB | 	rdlong	arg04, fp
2d348     0C 17 02 F6 | 	mov	arg03, arg04
2d34c     14 18 06 F1 | 	add	arg04, #20
2d350     0C 19 02 FB | 	rdlong	arg04, arg04
2d354     0C 16 06 F1 | 	add	arg03, #12
2d358     0B 19 62 FC | 	wrlong	arg04, arg03
2d35c     A7 18 02 FB | 	rdlong	arg04, fp
2d360     0C 17 02 F6 | 	mov	arg03, arg04
2d364     04 4E 85 F1 | 	sub	fp, #4
2d368     10 18 06 F1 | 	add	arg04, #16
2d36c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d370     40 18 46 F5 | 	or	arg04, #64
2d374     10 16 06 F1 | 	add	arg03, #16
2d378     0B 19 42 FC | 	wrbyte	arg04, arg03
2d37c                 | LR__4588
2d37c     04 4E 05 F1 | 	add	fp, #4
2d380     A7 16 02 FB | 	rdlong	arg03, fp
2d384     04 4E 85 F1 | 	sub	fp, #4
2d388     14 16 06 F1 | 	add	arg03, #20
2d38c     0B 17 02 FB | 	rdlong	arg03, arg03
2d390     FF 17 CE F7 | 	test	arg03, #511 wz
2d394     2C 01 90 AD |  if_e	jmp	#LR__4592
2d398     04 4E 05 F1 | 	add	fp, #4
2d39c     A7 18 02 FB | 	rdlong	arg04, fp
2d3a0     18 4E 05 F1 | 	add	fp, #24
2d3a4     A7 16 02 FB | 	rdlong	arg03, fp
2d3a8     1C 4E 85 F1 | 	sub	fp, #28
2d3ac     1C 18 06 F1 | 	add	arg04, #28
2d3b0     0C 19 02 FB | 	rdlong	arg04, arg04
2d3b4     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d3b8     08 01 90 AD |  if_e	jmp	#LR__4592
2d3bc     04 4E 05 F1 | 	add	fp, #4
2d3c0     A7 16 02 FB | 	rdlong	arg03, fp
2d3c4     04 4E 85 F1 | 	sub	fp, #4
2d3c8     10 16 06 F1 | 	add	arg03, #16
2d3cc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d3d0     80 16 CE F7 | 	test	arg03, #128 wz
2d3d4     7C 00 90 AD |  if_e	jmp	#LR__4590
2d3d8     10 4E 05 F1 | 	add	fp, #16
2d3dc     A7 16 02 FB | 	rdlong	arg03, fp
2d3e0     01 16 06 F1 | 	add	arg03, #1
2d3e4     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d3e8     0C 4E 85 F1 | 	sub	fp, #12
2d3ec     A7 16 02 FB | 	rdlong	arg03, fp
2d3f0     0B 15 02 F6 | 	mov	arg02, arg03
2d3f4     28 14 06 F1 | 	add	arg02, #40
2d3f8     04 4E 85 F1 | 	sub	fp, #4
2d3fc     1C 16 06 F1 | 	add	arg03, #28
2d400     0B 17 02 FB | 	rdlong	arg03, arg03
2d404     01 18 06 F6 | 	mov	arg04, #1
2d408     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d40c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d410     1C 00 90 AD |  if_e	jmp	#LR__4589
2d414     04 4E 05 F1 | 	add	fp, #4
2d418     A7 16 02 FB | 	rdlong	arg03, fp
2d41c     04 4E 85 F1 | 	sub	fp, #4
2d420     11 16 06 F1 | 	add	arg03, #17
2d424     0B 03 48 FC | 	wrbyte	#1, arg03
2d428     01 FA 05 F6 | 	mov	result1, #1
2d42c     A0 00 90 FD | 	jmp	#LR__4593
2d430                 | LR__4589
2d430     04 4E 05 F1 | 	add	fp, #4
2d434     A7 18 02 FB | 	rdlong	arg04, fp
2d438     0C 17 02 F6 | 	mov	arg03, arg04
2d43c     04 4E 85 F1 | 	sub	fp, #4
2d440     10 18 06 F1 | 	add	arg04, #16
2d444     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d448     7F 18 06 F5 | 	and	arg04, #127
2d44c     10 16 06 F1 | 	add	arg03, #16
2d450     0B 19 42 FC | 	wrbyte	arg04, arg03
2d454                 | LR__4590
2d454     10 4E 05 F1 | 	add	fp, #16
2d458     A7 16 02 FB | 	rdlong	arg03, fp
2d45c     01 16 06 F1 | 	add	arg03, #1
2d460     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d464     0C 4E 85 F1 | 	sub	fp, #12
2d468     A7 14 02 FB | 	rdlong	arg02, fp
2d46c     28 14 06 F1 | 	add	arg02, #40
2d470     18 4E 05 F1 | 	add	fp, #24
2d474     A7 16 02 FB | 	rdlong	arg03, fp
2d478     1C 4E 85 F1 | 	sub	fp, #28
2d47c     01 18 06 F6 | 	mov	arg04, #1
2d480     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d484     00 FA 0D F2 | 	cmp	result1, #0 wz
2d488     1C 00 90 AD |  if_e	jmp	#LR__4591
2d48c     04 4E 05 F1 | 	add	fp, #4
2d490     A7 16 02 FB | 	rdlong	arg03, fp
2d494     04 4E 85 F1 | 	sub	fp, #4
2d498     11 16 06 F1 | 	add	arg03, #17
2d49c     0B 03 48 FC | 	wrbyte	#1, arg03
2d4a0     01 FA 05 F6 | 	mov	result1, #1
2d4a4     28 00 90 FD | 	jmp	#LR__4593
2d4a8                 | LR__4591
2d4a8     04 4E 05 F1 | 	add	fp, #4
2d4ac     A7 18 02 FB | 	rdlong	arg04, fp
2d4b0     18 4E 05 F1 | 	add	fp, #24
2d4b4     A7 16 02 FB | 	rdlong	arg03, fp
2d4b8     1C 4E 85 F1 | 	sub	fp, #28
2d4bc     1C 18 06 F1 | 	add	arg04, #28
2d4c0     0C 17 62 FC | 	wrlong	arg03, arg04
2d4c4                 | LR__4592
2d4c4                 | ' 
2d4c4                 | ' 			fp->sect = nsect;
2d4c4                 | ' 		}
2d4c4                 | ' 	}
2d4c4                 | ' 
2d4c4                 | ' 	return res ;
2d4c4     0C 4E 05 F1 | 	add	fp, #12
2d4c8     A7 FA 01 FB | 	rdlong	result1, fp
2d4cc     0C 4E 85 F1 | 	sub	fp, #12
2d4d0                 | LR__4593
2d4d0     A7 F0 03 F6 | 	mov	ptra, fp
2d4d4     B2 00 A0 FD | 	call	#popregs_
2d4d8                 | _fatfs_cc_f_lseek_ret
2d4d8     2D 00 64 FD | 	ret
2d4dc                 | 
2d4dc                 | _fatfs_cc_f_opendir
2d4dc     01 4A 05 F6 | 	mov	COUNT_, #1
2d4e0     A8 00 A0 FD | 	call	#pushregs_
2d4e4     14 F0 07 F1 | 	add	ptra, #20
2d4e8     04 4E 05 F1 | 	add	fp, #4
2d4ec     A7 12 62 FC | 	wrlong	arg01, fp
2d4f0     04 4E 05 F1 | 	add	fp, #4
2d4f4     A7 14 62 FC | 	wrlong	arg02, fp
2d4f8     04 4E 85 F1 | 	sub	fp, #4
2d4fc     A7 16 0A FB | 	rdlong	arg03, fp wz
2d500     04 4E 85 F1 | 	sub	fp, #4
2d504     09 FA 05 A6 |  if_e	mov	result1, #9
2d508     78 01 90 AD |  if_e	jmp	#LR__4606
2d50c     08 4E 05 F1 | 	add	fp, #8
2d510     A7 12 02 F6 | 	mov	arg01, fp
2d514     08 4E 05 F1 | 	add	fp, #8
2d518     A7 14 02 F6 | 	mov	arg02, fp
2d51c     10 4E 85 F1 | 	sub	fp, #16
2d520     00 16 06 F6 | 	mov	arg03, #0
2d524     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d528     0C 4E 05 F1 | 	add	fp, #12
2d52c     A7 FA 61 FC | 	wrlong	result1, fp
2d530     0C 4E 85 F1 | 	sub	fp, #12
2d534     00 FA 0D F2 | 	cmp	result1, #0 wz
2d538     20 01 90 5D |  if_ne	jmp	#LR__4605
2d53c     04 4E 05 F1 | 	add	fp, #4
2d540     A7 16 02 FB | 	rdlong	arg03, fp
2d544     0C 4E 05 F1 | 	add	fp, #12
2d548     A7 FA 01 FB | 	rdlong	result1, fp
2d54c     0B FB 61 FC | 	wrlong	result1, arg03
2d550     0C 4E 85 F1 | 	sub	fp, #12
2d554     A7 12 02 FB | 	rdlong	arg01, fp
2d558     04 4E 05 F1 | 	add	fp, #4
2d55c     A7 14 02 FB | 	rdlong	arg02, fp
2d560     08 4E 85 F1 | 	sub	fp, #8
2d564     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d568     0C 4E 05 F1 | 	add	fp, #12
2d56c     A7 FA 61 FC | 	wrlong	result1, fp
2d570     0C 4E 85 F1 | 	sub	fp, #12
2d574     00 FA 0D F2 | 	cmp	result1, #0 wz
2d578     C4 00 90 5D |  if_ne	jmp	#LR__4604
2d57c     04 4E 05 F1 | 	add	fp, #4
2d580     A7 16 02 FB | 	rdlong	arg03, fp
2d584     04 4E 85 F1 | 	sub	fp, #4
2d588     2B 16 06 F1 | 	add	arg03, #43
2d58c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d590     80 16 CE F7 | 	test	arg03, #128 wz
2d594     58 00 90 5D |  if_ne	jmp	#LR__4602
2d598     04 4E 05 F1 | 	add	fp, #4
2d59c     A7 16 02 FB | 	rdlong	arg03, fp
2d5a0     04 4E 85 F1 | 	sub	fp, #4
2d5a4     06 16 06 F1 | 	add	arg03, #6
2d5a8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d5ac     10 16 CE F7 | 	test	arg03, #16 wz
2d5b0     30 00 90 AD |  if_e	jmp	#LR__4600
2d5b4     04 4E 05 F1 | 	add	fp, #4
2d5b8     A7 16 02 FB | 	rdlong	arg03, fp
2d5bc     0B 1F 02 F6 | 	mov	local01, arg03
2d5c0     0C 4E 05 F1 | 	add	fp, #12
2d5c4     A7 12 02 FB | 	rdlong	arg01, fp
2d5c8     10 4E 85 F1 | 	sub	fp, #16
2d5cc     1C 16 06 F1 | 	add	arg03, #28
2d5d0     0B 15 02 FB | 	rdlong	arg02, arg03
2d5d4     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d5d8     08 1E 06 F1 | 	add	local01, #8
2d5dc     0F FB 61 FC | 	wrlong	result1, local01
2d5e0     0C 00 90 FD | 	jmp	#LR__4601
2d5e4                 | LR__4600
2d5e4     0C 4E 05 F1 | 	add	fp, #12
2d5e8     A7 0A 68 FC | 	wrlong	#5, fp
2d5ec     0C 4E 85 F1 | 	sub	fp, #12
2d5f0                 | LR__4601
2d5f0                 | LR__4602
2d5f0     0C 4E 05 F1 | 	add	fp, #12
2d5f4     A7 1E 0A FB | 	rdlong	local01, fp wz
2d5f8     0C 4E 85 F1 | 	sub	fp, #12
2d5fc     40 00 90 5D |  if_ne	jmp	#LR__4603
2d600     04 4E 05 F1 | 	add	fp, #4
2d604     A7 1E 02 FB | 	rdlong	local01, fp
2d608     0C 4E 05 F1 | 	add	fp, #12
2d60c     A7 16 02 FB | 	rdlong	arg03, fp
2d610     06 16 06 F1 | 	add	arg03, #6
2d614     0B 17 E2 FA | 	rdword	arg03, arg03
2d618     04 1E 06 F1 | 	add	local01, #4
2d61c     0F 17 52 FC | 	wrword	arg03, local01
2d620     0C 4E 85 F1 | 	sub	fp, #12
2d624     A7 12 02 FB | 	rdlong	arg01, fp
2d628     04 4E 85 F1 | 	sub	fp, #4
2d62c     00 14 06 F6 | 	mov	arg02, #0
2d630     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d634     0C 4E 05 F1 | 	add	fp, #12
2d638     A7 FA 61 FC | 	wrlong	result1, fp
2d63c     0C 4E 85 F1 | 	sub	fp, #12
2d640                 | LR__4603
2d640                 | LR__4604
2d640     0C 4E 05 F1 | 	add	fp, #12
2d644     A7 1E 02 FB | 	rdlong	local01, fp
2d648     0C 4E 85 F1 | 	sub	fp, #12
2d64c     04 1E 0E F2 | 	cmp	local01, #4 wz
2d650     0C 4E 05 A1 |  if_e	add	fp, #12
2d654     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d658     0C 4E 85 A1 |  if_e	sub	fp, #12
2d65c                 | LR__4605
2d65c     0C 4E 05 F1 | 	add	fp, #12
2d660     A7 1E 0A FB | 	rdlong	local01, fp wz
2d664     0C 4E 85 F1 | 	sub	fp, #12
2d668     04 4E 05 51 |  if_ne	add	fp, #4
2d66c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d670     04 4E 85 51 |  if_ne	sub	fp, #4
2d674     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d678                 | ' 
2d678                 | ' 	return res ;
2d678     0C 4E 05 F1 | 	add	fp, #12
2d67c     A7 FA 01 FB | 	rdlong	result1, fp
2d680     0C 4E 85 F1 | 	sub	fp, #12
2d684                 | LR__4606
2d684     A7 F0 03 F6 | 	mov	ptra, fp
2d688     B2 00 A0 FD | 	call	#popregs_
2d68c                 | _fatfs_cc_f_opendir_ret
2d68c     2D 00 64 FD | 	ret
2d690                 | 
2d690                 | _fatfs_cc_f_closedir
2d690     00 4A 05 F6 | 	mov	COUNT_, #0
2d694     A8 00 A0 FD | 	call	#pushregs_
2d698     10 F0 07 F1 | 	add	ptra, #16
2d69c     04 4E 05 F1 | 	add	fp, #4
2d6a0     A7 12 62 FC | 	wrlong	arg01, fp
2d6a4     08 4E 05 F1 | 	add	fp, #8
2d6a8     A7 14 02 F6 | 	mov	arg02, fp
2d6ac     0C 4E 85 F1 | 	sub	fp, #12
2d6b0     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d6b4     08 4E 05 F1 | 	add	fp, #8
2d6b8     A7 FA 61 FC | 	wrlong	result1, fp
2d6bc     08 4E 85 F1 | 	sub	fp, #8
2d6c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6c4     04 4E 05 A1 |  if_e	add	fp, #4
2d6c8     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d6cc     04 4E 85 A1 |  if_e	sub	fp, #4
2d6d0     FD 00 68 AC |  if_e	wrlong	#0, result1
2d6d4                 | ' 
2d6d4                 | ' 
2d6d4                 | ' 
2d6d4                 | ' 
2d6d4                 | ' 		dp->obj.fs = 0;
2d6d4                 | ' #line 4633 "ff.c"
2d6d4                 | ' 	}
2d6d4                 | ' 	return res;
2d6d4     08 4E 05 F1 | 	add	fp, #8
2d6d8     A7 FA 01 FB | 	rdlong	result1, fp
2d6dc     08 4E 85 F1 | 	sub	fp, #8
2d6e0     A7 F0 03 F6 | 	mov	ptra, fp
2d6e4     B2 00 A0 FD | 	call	#popregs_
2d6e8                 | _fatfs_cc_f_closedir_ret
2d6e8     2D 00 64 FD | 	ret
2d6ec                 | 
2d6ec                 | _fatfs_cc_f_readdir
2d6ec     00 4A 05 F6 | 	mov	COUNT_, #0
2d6f0     A8 00 A0 FD | 	call	#pushregs_
2d6f4     14 F0 07 F1 | 	add	ptra, #20
2d6f8     04 4E 05 F1 | 	add	fp, #4
2d6fc     A7 12 62 FC | 	wrlong	arg01, fp
2d700     04 4E 05 F1 | 	add	fp, #4
2d704     A7 14 62 FC | 	wrlong	arg02, fp
2d708     04 4E 85 F1 | 	sub	fp, #4
2d70c     A7 12 02 FB | 	rdlong	arg01, fp
2d710     0C 4E 05 F1 | 	add	fp, #12
2d714     A7 14 02 F6 | 	mov	arg02, fp
2d718     10 4E 85 F1 | 	sub	fp, #16
2d71c     54 DD BF FD | 	call	#_fatfs_cc_validate
2d720     0C 4E 05 F1 | 	add	fp, #12
2d724     A7 FA 61 FC | 	wrlong	result1, fp
2d728     0C 4E 85 F1 | 	sub	fp, #12
2d72c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d730     BC 00 90 5D |  if_ne	jmp	#LR__4613
2d734     08 4E 05 F1 | 	add	fp, #8
2d738     A7 FA 09 FB | 	rdlong	result1, fp wz
2d73c     08 4E 85 F1 | 	sub	fp, #8
2d740     24 00 90 5D |  if_ne	jmp	#LR__4610
2d744     04 4E 05 F1 | 	add	fp, #4
2d748     A7 12 02 FB | 	rdlong	arg01, fp
2d74c     04 4E 85 F1 | 	sub	fp, #4
2d750     00 14 06 F6 | 	mov	arg02, #0
2d754     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2d758     0C 4E 05 F1 | 	add	fp, #12
2d75c     A7 FA 61 FC | 	wrlong	result1, fp
2d760     0C 4E 85 F1 | 	sub	fp, #12
2d764     88 00 90 FD | 	jmp	#LR__4612
2d768                 | LR__4610
2d768     04 4E 05 F1 | 	add	fp, #4
2d76c     A7 12 02 FB | 	rdlong	arg01, fp
2d770     04 4E 85 F1 | 	sub	fp, #4
2d774     00 14 06 F6 | 	mov	arg02, #0
2d778     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2d77c     0C 4E 05 F1 | 	add	fp, #12
2d780     A7 FA 61 FC | 	wrlong	result1, fp
2d784     0C 4E 85 F1 | 	sub	fp, #12
2d788     04 FA 0D F2 | 	cmp	result1, #4 wz
2d78c     0C 4E 05 A1 |  if_e	add	fp, #12
2d790     A7 00 68 AC |  if_e	wrlong	#0, fp
2d794     0C 4E 85 A1 |  if_e	sub	fp, #12
2d798     0C 4E 05 F1 | 	add	fp, #12
2d79c     A7 FA 09 FB | 	rdlong	result1, fp wz
2d7a0     0C 4E 85 F1 | 	sub	fp, #12
2d7a4     48 00 90 5D |  if_ne	jmp	#LR__4611
2d7a8     04 4E 05 F1 | 	add	fp, #4
2d7ac     A7 12 02 FB | 	rdlong	arg01, fp
2d7b0     04 4E 05 F1 | 	add	fp, #4
2d7b4     A7 14 02 FB | 	rdlong	arg02, fp
2d7b8     08 4E 85 F1 | 	sub	fp, #8
2d7bc     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d7c0     04 4E 05 F1 | 	add	fp, #4
2d7c4     A7 12 02 FB | 	rdlong	arg01, fp
2d7c8     04 4E 85 F1 | 	sub	fp, #4
2d7cc     00 14 06 F6 | 	mov	arg02, #0
2d7d0     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2d7d4     0C 4E 05 F1 | 	add	fp, #12
2d7d8     A7 FA 61 FC | 	wrlong	result1, fp
2d7dc     0C 4E 85 F1 | 	sub	fp, #12
2d7e0     04 FA 0D F2 | 	cmp	result1, #4 wz
2d7e4     0C 4E 05 A1 |  if_e	add	fp, #12
2d7e8     A7 00 68 AC |  if_e	wrlong	#0, fp
2d7ec     0C 4E 85 A1 |  if_e	sub	fp, #12
2d7f0                 | LR__4611
2d7f0                 | LR__4612
2d7f0                 | LR__4613
2d7f0                 | ' 			}
2d7f0                 | ' 			;
2d7f0                 | ' 		}
2d7f0                 | ' 	}
2d7f0                 | ' 	return res ;
2d7f0     0C 4E 05 F1 | 	add	fp, #12
2d7f4     A7 FA 01 FB | 	rdlong	result1, fp
2d7f8     0C 4E 85 F1 | 	sub	fp, #12
2d7fc     A7 F0 03 F6 | 	mov	ptra, fp
2d800     B2 00 A0 FD | 	call	#popregs_
2d804                 | _fatfs_cc_f_readdir_ret
2d804     2D 00 64 FD | 	ret
2d808                 | 
2d808                 | _fatfs_cc_f_stat
2d808     00 4A 05 F6 | 	mov	COUNT_, #0
2d80c     A8 00 A0 FD | 	call	#pushregs_
2d810     40 F0 07 F1 | 	add	ptra, #64
2d814     04 4E 05 F1 | 	add	fp, #4
2d818     A7 12 62 FC | 	wrlong	arg01, fp
2d81c     04 4E 05 F1 | 	add	fp, #4
2d820     A7 14 62 FC | 	wrlong	arg02, fp
2d824     04 4E 85 F1 | 	sub	fp, #4
2d828     A7 12 02 F6 | 	mov	arg01, fp
2d82c     0C 4E 05 F1 | 	add	fp, #12
2d830     A7 14 02 F6 | 	mov	arg02, fp
2d834     10 4E 85 F1 | 	sub	fp, #16
2d838     00 16 06 F6 | 	mov	arg03, #0
2d83c     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2d840     0C 4E 05 F1 | 	add	fp, #12
2d844     A7 FA 61 FC | 	wrlong	result1, fp
2d848     0C 4E 85 F1 | 	sub	fp, #12
2d84c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d850     74 00 90 5D |  if_ne	jmp	#LR__4623
2d854     10 4E 05 F1 | 	add	fp, #16
2d858     A7 12 02 F6 | 	mov	arg01, fp
2d85c     0C 4E 85 F1 | 	sub	fp, #12
2d860     A7 14 02 FB | 	rdlong	arg02, fp
2d864     04 4E 85 F1 | 	sub	fp, #4
2d868     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2d86c     0C 4E 05 F1 | 	add	fp, #12
2d870     A7 FA 61 FC | 	wrlong	result1, fp
2d874     0C 4E 85 F1 | 	sub	fp, #12
2d878     00 FA 0D F2 | 	cmp	result1, #0 wz
2d87c     48 00 90 5D |  if_ne	jmp	#LR__4622
2d880     3B 4E 05 F1 | 	add	fp, #59
2d884     A7 FA C1 FA | 	rdbyte	result1, fp
2d888     3B 4E 85 F1 | 	sub	fp, #59
2d88c     80 FA CD F7 | 	test	result1, #128 wz
2d890     0C 4E 05 51 |  if_ne	add	fp, #12
2d894     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d898     0C 4E 85 51 |  if_ne	sub	fp, #12
2d89c     28 00 90 5D |  if_ne	jmp	#LR__4621
2d8a0     08 4E 05 F1 | 	add	fp, #8
2d8a4     A7 FA 09 FB | 	rdlong	result1, fp wz
2d8a8     08 4E 85 F1 | 	sub	fp, #8
2d8ac     18 00 90 AD |  if_e	jmp	#LR__4620
2d8b0     10 4E 05 F1 | 	add	fp, #16
2d8b4     A7 12 02 F6 | 	mov	arg01, fp
2d8b8     08 4E 85 F1 | 	sub	fp, #8
2d8bc     A7 14 02 FB | 	rdlong	arg02, fp
2d8c0     08 4E 85 F1 | 	sub	fp, #8
2d8c4     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d8c8                 | LR__4620
2d8c8                 | LR__4621
2d8c8                 | LR__4622
2d8c8                 | LR__4623
2d8c8                 | ' 			}
2d8c8                 | ' 		}
2d8c8                 | ' 		;
2d8c8                 | ' 	}
2d8c8                 | ' 
2d8c8                 | ' 	return res ;
2d8c8     0C 4E 05 F1 | 	add	fp, #12
2d8cc     A7 FA 01 FB | 	rdlong	result1, fp
2d8d0     0C 4E 85 F1 | 	sub	fp, #12
2d8d4     A7 F0 03 F6 | 	mov	ptra, fp
2d8d8     B2 00 A0 FD | 	call	#popregs_
2d8dc                 | _fatfs_cc_f_stat_ret
2d8dc     2D 00 64 FD | 	ret
2d8e0                 | 
2d8e0                 | _fatfs_cc_f_unlink
2d8e0     00 4A 05 F6 | 	mov	COUNT_, #0
2d8e4     A8 00 A0 FD | 	call	#pushregs_
2d8e8     74 F0 07 F1 | 	add	ptra, #116
2d8ec     04 4E 05 F1 | 	add	fp, #4
2d8f0     A7 12 62 FC | 	wrlong	arg01, fp
2d8f4     68 4E 05 F1 | 	add	fp, #104
2d8f8     A7 00 68 FC | 	wrlong	#0, fp
2d8fc     68 4E 85 F1 | 	sub	fp, #104
2d900     A7 12 02 F6 | 	mov	arg01, fp
2d904     6C 4E 05 F1 | 	add	fp, #108
2d908     A7 14 02 F6 | 	mov	arg02, fp
2d90c     70 4E 85 F1 | 	sub	fp, #112
2d910     02 16 06 F6 | 	mov	arg03, #2
2d914     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2d918     08 4E 05 F1 | 	add	fp, #8
2d91c     A7 FA 61 FC | 	wrlong	result1, fp
2d920     08 4E 85 F1 | 	sub	fp, #8
2d924     00 FA 0D F2 | 	cmp	result1, #0 wz
2d928     E4 01 90 5D |  if_ne	jmp	#LR__4638
2d92c     70 4E 05 F1 | 	add	fp, #112
2d930     A7 16 02 FB | 	rdlong	arg03, fp
2d934     64 4E 85 F1 | 	sub	fp, #100
2d938     A7 16 62 FC | 	wrlong	arg03, fp
2d93c     A7 12 02 F6 | 	mov	arg01, fp
2d940     08 4E 85 F1 | 	sub	fp, #8
2d944     A7 14 02 FB | 	rdlong	arg02, fp
2d948     04 4E 85 F1 | 	sub	fp, #4
2d94c     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2d950     08 4E 05 F1 | 	add	fp, #8
2d954     A7 FA 61 FC | 	wrlong	result1, fp
2d958     00 FA 4D F2 | 	cmps	result1, #0 wz
2d95c     08 4E 85 F1 | 	sub	fp, #8
2d960     AC 01 90 5D |  if_ne	jmp	#LR__4637
2d964     37 4E 05 F1 | 	add	fp, #55
2d968     A7 FA C1 FA | 	rdbyte	result1, fp
2d96c     37 4E 85 F1 | 	sub	fp, #55
2d970     80 FA CD F7 | 	test	result1, #128 wz
2d974     08 4E 05 51 |  if_ne	add	fp, #8
2d978     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d97c     08 4E 85 51 |  if_ne	sub	fp, #8
2d980     1C 00 90 5D |  if_ne	jmp	#LR__4630
2d984     12 4E 05 F1 | 	add	fp, #18
2d988     A7 FA C1 FA | 	rdbyte	result1, fp
2d98c     12 4E 85 F1 | 	sub	fp, #18
2d990     01 FA CD F7 | 	test	result1, #1 wz
2d994     08 4E 05 51 |  if_ne	add	fp, #8
2d998     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2d99c     08 4E 85 51 |  if_ne	sub	fp, #8
2d9a0                 | LR__4630
2d9a0     08 4E 05 F1 | 	add	fp, #8
2d9a4     A7 FA 09 FB | 	rdlong	result1, fp wz
2d9a8     08 4E 85 F1 | 	sub	fp, #8
2d9ac     C8 00 90 5D |  if_ne	jmp	#LR__4633
2d9b0     70 4E 05 F1 | 	add	fp, #112
2d9b4     A7 12 02 FB | 	rdlong	arg01, fp
2d9b8     48 4E 85 F1 | 	sub	fp, #72
2d9bc     A7 14 02 FB | 	rdlong	arg02, fp
2d9c0     28 4E 85 F1 | 	sub	fp, #40
2d9c4     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2d9c8     6C 4E 05 F1 | 	add	fp, #108
2d9cc     A7 FA 61 FC | 	wrlong	result1, fp
2d9d0     5A 4E 85 F1 | 	sub	fp, #90
2d9d4     A7 FA C1 FA | 	rdbyte	result1, fp
2d9d8     12 4E 85 F1 | 	sub	fp, #18
2d9dc     10 FA CD F7 | 	test	result1, #16 wz
2d9e0     94 00 90 AD |  if_e	jmp	#LR__4632
2d9e4     70 4E 05 F1 | 	add	fp, #112
2d9e8     A7 FA 01 FB | 	rdlong	result1, fp
2d9ec     34 4E 85 F1 | 	sub	fp, #52
2d9f0     A7 FA 61 FC | 	wrlong	result1, fp
2d9f4     30 4E 05 F1 | 	add	fp, #48
2d9f8     A7 16 02 FB | 	rdlong	arg03, fp
2d9fc     28 4E 85 F1 | 	sub	fp, #40
2da00     A7 16 62 FC | 	wrlong	arg03, fp
2da04     08 4E 85 F1 | 	sub	fp, #8
2da08     A7 12 02 F6 | 	mov	arg01, fp
2da0c     3C 4E 85 F1 | 	sub	fp, #60
2da10     00 14 06 F6 | 	mov	arg02, #0
2da14     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2da18     08 4E 05 F1 | 	add	fp, #8
2da1c     A7 FA 61 FC | 	wrlong	result1, fp
2da20     08 4E 85 F1 | 	sub	fp, #8
2da24     00 FA 0D F2 | 	cmp	result1, #0 wz
2da28     4C 00 90 5D |  if_ne	jmp	#LR__4631
2da2c     3C 4E 05 F1 | 	add	fp, #60
2da30     A7 12 02 F6 | 	mov	arg01, fp
2da34     3C 4E 85 F1 | 	sub	fp, #60
2da38     00 14 06 F6 | 	mov	arg02, #0
2da3c     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2da40     08 4E 05 F1 | 	add	fp, #8
2da44     A7 FA 61 FC | 	wrlong	result1, fp
2da48     00 FA 4D F2 | 	cmps	result1, #0 wz
2da4c     08 4E 85 F1 | 	sub	fp, #8
2da50     08 4E 05 A1 |  if_e	add	fp, #8
2da54     A7 0E 68 AC |  if_e	wrlong	#7, fp
2da58     08 4E 85 A1 |  if_e	sub	fp, #8
2da5c     08 4E 05 F1 | 	add	fp, #8
2da60     A7 FA 01 FB | 	rdlong	result1, fp
2da64     08 4E 85 F1 | 	sub	fp, #8
2da68     04 FA 0D F2 | 	cmp	result1, #4 wz
2da6c     08 4E 05 A1 |  if_e	add	fp, #8
2da70     A7 00 68 AC |  if_e	wrlong	#0, fp
2da74     08 4E 85 A1 |  if_e	sub	fp, #8
2da78                 | LR__4631
2da78                 | LR__4632
2da78                 | LR__4633
2da78     08 4E 05 F1 | 	add	fp, #8
2da7c     A7 FA 09 FB | 	rdlong	result1, fp wz
2da80     08 4E 85 F1 | 	sub	fp, #8
2da84     88 00 90 5D |  if_ne	jmp	#LR__4636
2da88     0C 4E 05 F1 | 	add	fp, #12
2da8c     A7 12 02 F6 | 	mov	arg01, fp
2da90     0C 4E 85 F1 | 	sub	fp, #12
2da94     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2da98     08 4E 05 F1 | 	add	fp, #8
2da9c     A7 FA 61 FC | 	wrlong	result1, fp
2daa0     08 4E 85 F1 | 	sub	fp, #8
2daa4     00 FA 0D F2 | 	cmp	result1, #0 wz
2daa8     38 00 90 5D |  if_ne	jmp	#LR__4634
2daac     6C 4E 05 F1 | 	add	fp, #108
2dab0     A7 FA 09 FB | 	rdlong	result1, fp wz
2dab4     6C 4E 85 F1 | 	sub	fp, #108
2dab8     28 00 90 AD |  if_e	jmp	#LR__4634
2dabc     0C 4E 05 F1 | 	add	fp, #12
2dac0     A7 12 02 F6 | 	mov	arg01, fp
2dac4     60 4E 05 F1 | 	add	fp, #96
2dac8     A7 14 02 FB | 	rdlong	arg02, fp
2dacc     6C 4E 85 F1 | 	sub	fp, #108
2dad0     00 16 06 F6 | 	mov	arg03, #0
2dad4     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2dad8     08 4E 05 F1 | 	add	fp, #8
2dadc     A7 FA 61 FC | 	wrlong	result1, fp
2dae0     08 4E 85 F1 | 	sub	fp, #8
2dae4                 | LR__4634
2dae4     08 4E 05 F1 | 	add	fp, #8
2dae8     A7 FA 09 FB | 	rdlong	result1, fp wz
2daec     08 4E 85 F1 | 	sub	fp, #8
2daf0     1C 00 90 5D |  if_ne	jmp	#LR__4635
2daf4     70 4E 05 F1 | 	add	fp, #112
2daf8     A7 12 02 FB | 	rdlong	arg01, fp
2dafc     70 4E 85 F1 | 	sub	fp, #112
2db00     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2db04     08 4E 05 F1 | 	add	fp, #8
2db08     A7 FA 61 FC | 	wrlong	result1, fp
2db0c     08 4E 85 F1 | 	sub	fp, #8
2db10                 | LR__4635
2db10                 | LR__4636
2db10                 | LR__4637
2db10                 | LR__4638
2db10                 | ' 			}
2db10                 | ' 		}
2db10                 | ' 		;
2db10                 | ' 	}
2db10                 | ' 
2db10                 | ' 	return res ;
2db10     08 4E 05 F1 | 	add	fp, #8
2db14     A7 FA 01 FB | 	rdlong	result1, fp
2db18     08 4E 85 F1 | 	sub	fp, #8
2db1c     A7 F0 03 F6 | 	mov	ptra, fp
2db20     B2 00 A0 FD | 	call	#popregs_
2db24                 | _fatfs_cc_f_unlink_ret
2db24     2D 00 64 FD | 	ret
2db28                 | 
2db28                 | _fatfs_cc_f_mkdir
2db28     00 4A 05 F6 | 	mov	COUNT_, #0
2db2c     A8 00 A0 FD | 	call	#pushregs_
2db30     5C F0 07 F1 | 	add	ptra, #92
2db34     04 4E 05 F1 | 	add	fp, #4
2db38     A7 12 62 FC | 	wrlong	arg01, fp
2db3c     A7 12 02 F6 | 	mov	arg01, fp
2db40     48 4E 05 F1 | 	add	fp, #72
2db44     A7 14 02 F6 | 	mov	arg02, fp
2db48     4C 4E 85 F1 | 	sub	fp, #76
2db4c     02 16 06 F6 | 	mov	arg03, #2
2db50     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2db54     08 4E 05 F1 | 	add	fp, #8
2db58     A7 FA 61 FC | 	wrlong	result1, fp
2db5c     08 4E 85 F1 | 	sub	fp, #8
2db60     00 FA 0D F2 | 	cmp	result1, #0 wz
2db64     C4 02 90 5D |  if_ne	jmp	#LR__4645
2db68     4C 4E 05 F1 | 	add	fp, #76
2db6c     A7 16 02 FB | 	rdlong	arg03, fp
2db70     40 4E 85 F1 | 	sub	fp, #64
2db74     A7 16 62 FC | 	wrlong	arg03, fp
2db78     A7 12 02 F6 | 	mov	arg01, fp
2db7c     08 4E 85 F1 | 	sub	fp, #8
2db80     A7 14 02 FB | 	rdlong	arg02, fp
2db84     04 4E 85 F1 | 	sub	fp, #4
2db88     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2db8c     08 4E 05 F1 | 	add	fp, #8
2db90     A7 FA 61 FC | 	wrlong	result1, fp
2db94     00 FA 4D F2 | 	cmps	result1, #0 wz
2db98     08 4E 85 F1 | 	sub	fp, #8
2db9c     08 4E 05 A1 |  if_e	add	fp, #8
2dba0     A7 10 68 AC |  if_e	wrlong	#8, fp
2dba4     08 4E 85 A1 |  if_e	sub	fp, #8
2dba8     08 4E 05 F1 | 	add	fp, #8
2dbac     A7 FA 01 FB | 	rdlong	result1, fp
2dbb0     08 4E 85 F1 | 	sub	fp, #8
2dbb4     04 FA 0D F2 | 	cmp	result1, #4 wz
2dbb8     70 02 90 5D |  if_ne	jmp	#LR__4644
2dbbc     4C 4E 05 F1 | 	add	fp, #76
2dbc0     A7 16 02 FB | 	rdlong	arg03, fp
2dbc4     10 4E 85 F1 | 	sub	fp, #16
2dbc8     A7 16 62 FC | 	wrlong	arg03, fp
2dbcc     A7 12 02 F6 | 	mov	arg01, fp
2dbd0     3C 4E 85 F1 | 	sub	fp, #60
2dbd4     00 14 06 F6 | 	mov	arg02, #0
2dbd8     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2dbdc     50 4E 05 F1 | 	add	fp, #80
2dbe0     A7 FA 61 FC | 	wrlong	result1, fp
2dbe4     48 4E 85 F1 | 	sub	fp, #72
2dbe8     A7 00 68 FC | 	wrlong	#0, fp
2dbec     48 4E 05 F1 | 	add	fp, #72
2dbf0     A7 FA 09 FB | 	rdlong	result1, fp wz
2dbf4     50 4E 85 F1 | 	sub	fp, #80
2dbf8     08 4E 05 A1 |  if_e	add	fp, #8
2dbfc     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dc00     08 4E 85 A1 |  if_e	sub	fp, #8
2dc04     50 4E 05 F1 | 	add	fp, #80
2dc08     A7 FA 01 FB | 	rdlong	result1, fp
2dc0c     50 4E 85 F1 | 	sub	fp, #80
2dc10     01 FA 0D F2 | 	cmp	result1, #1 wz
2dc14     08 4E 05 A1 |  if_e	add	fp, #8
2dc18     A7 04 68 AC |  if_e	wrlong	#2, fp
2dc1c     08 4E 85 A1 |  if_e	sub	fp, #8
2dc20     50 4E 05 F1 | 	add	fp, #80
2dc24     A7 16 02 FB | 	rdlong	arg03, fp
2dc28     50 4E 85 F1 | 	sub	fp, #80
2dc2c     FF FF 7F FF 
2dc30     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2dc34     08 4E 05 A1 |  if_e	add	fp, #8
2dc38     A7 02 68 AC |  if_e	wrlong	#1, fp
2dc3c     08 4E 85 A1 |  if_e	sub	fp, #8
2dc40     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2dc44     58 4E 05 F1 | 	add	fp, #88
2dc48     A7 FA 61 FC | 	wrlong	result1, fp
2dc4c     50 4E 85 F1 | 	sub	fp, #80
2dc50     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc54     08 4E 85 F1 | 	sub	fp, #8
2dc58     1C 01 90 5D |  if_ne	jmp	#LR__4641
2dc5c     4C 4E 05 F1 | 	add	fp, #76
2dc60     A7 12 02 FB | 	rdlong	arg01, fp
2dc64     04 4E 05 F1 | 	add	fp, #4
2dc68     A7 14 02 FB | 	rdlong	arg02, fp
2dc6c     50 4E 85 F1 | 	sub	fp, #80
2dc70     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2dc74     08 4E 05 F1 | 	add	fp, #8
2dc78     A7 FA 61 FC | 	wrlong	result1, fp
2dc7c     00 FA 4D F2 | 	cmps	result1, #0 wz
2dc80     08 4E 85 F1 | 	sub	fp, #8
2dc84     F0 00 90 5D |  if_ne	jmp	#LR__4640
2dc88     4C 4E 05 F1 | 	add	fp, #76
2dc8c     A7 12 02 FB | 	rdlong	arg01, fp
2dc90     4C 4E 85 F1 | 	sub	fp, #76
2dc94     34 12 06 F1 | 	add	arg01, #52
2dc98     20 14 06 F6 | 	mov	arg02, #32
2dc9c     0B 16 06 F6 | 	mov	arg03, #11
2dca0     98 00 A0 FD | 	call	#\builtin_bytefill_
2dca4     4C 4E 05 F1 | 	add	fp, #76
2dca8     A7 FA 01 FB | 	rdlong	result1, fp
2dcac     34 FA 05 F1 | 	add	result1, #52
2dcb0     FD 5C 48 FC | 	wrbyte	#46, result1
2dcb4     A7 16 02 FB | 	rdlong	arg03, fp
2dcb8     3F 16 06 F1 | 	add	arg03, #63
2dcbc     0B 21 48 FC | 	wrbyte	#16, arg03
2dcc0     A7 12 02 FB | 	rdlong	arg01, fp
2dcc4     4A 12 06 F1 | 	add	arg01, #74
2dcc8     0C 4E 05 F1 | 	add	fp, #12
2dccc     A7 14 02 FB | 	rdlong	arg02, fp
2dcd0     09 15 62 FC | 	wrlong	arg02, arg01
2dcd4     0C 4E 85 F1 | 	sub	fp, #12
2dcd8     A7 14 02 FB | 	rdlong	arg02, fp
2dcdc     0A 13 02 F6 | 	mov	arg01, arg02
2dce0     34 14 06 F1 | 	add	arg02, #52
2dce4     04 4E 05 F1 | 	add	fp, #4
2dce8     A7 16 02 FB | 	rdlong	arg03, fp
2dcec     50 4E 85 F1 | 	sub	fp, #80
2dcf0     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2dcf4     4C 4E 05 F1 | 	add	fp, #76
2dcf8     A7 14 02 FB | 	rdlong	arg02, fp
2dcfc     0A 13 02 F6 | 	mov	arg01, arg02
2dd00     54 12 06 F1 | 	add	arg01, #84
2dd04     4C 4E 85 F1 | 	sub	fp, #76
2dd08     34 14 06 F1 | 	add	arg02, #52
2dd0c     20 16 06 F6 | 	mov	arg03, #32
2dd10     3C 2A BF FD | 	call	#__system____builtin_memmove
2dd14     4C 4E 05 F1 | 	add	fp, #76
2dd18     A7 16 02 FB | 	rdlong	arg03, fp
2dd1c     55 16 06 F1 | 	add	arg03, #85
2dd20     0B 5D 48 FC | 	wrbyte	#46, arg03
2dd24     38 4E 85 F1 | 	sub	fp, #56
2dd28     A7 16 02 FB | 	rdlong	arg03, fp
2dd2c     40 4E 05 F1 | 	add	fp, #64
2dd30     A7 16 62 FC | 	wrlong	arg03, fp
2dd34     08 4E 85 F1 | 	sub	fp, #8
2dd38     A7 14 02 FB | 	rdlong	arg02, fp
2dd3c     0A 13 02 F6 | 	mov	arg01, arg02
2dd40     54 14 06 F1 | 	add	arg02, #84
2dd44     4C 4E 85 F1 | 	sub	fp, #76
2dd48     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2dd4c     4C 4E 05 F1 | 	add	fp, #76
2dd50     A7 16 02 FB | 	rdlong	arg03, fp
2dd54     03 16 06 F1 | 	add	arg03, #3
2dd58     0B 03 48 FC | 	wrbyte	#1, arg03
2dd5c     40 4E 85 F1 | 	sub	fp, #64
2dd60     A7 12 02 F6 | 	mov	arg01, fp
2dd64     0C 4E 85 F1 | 	sub	fp, #12
2dd68     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2dd6c     08 4E 05 F1 | 	add	fp, #8
2dd70     A7 FA 61 FC | 	wrlong	result1, fp
2dd74     08 4E 85 F1 | 	sub	fp, #8
2dd78                 | LR__4640
2dd78                 | LR__4641
2dd78     08 4E 05 F1 | 	add	fp, #8
2dd7c     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd80     08 4E 85 F1 | 	sub	fp, #8
2dd84     88 00 90 5D |  if_ne	jmp	#LR__4642
2dd88     28 4E 05 F1 | 	add	fp, #40
2dd8c     A7 12 02 FB | 	rdlong	arg01, fp
2dd90     16 12 06 F1 | 	add	arg01, #22
2dd94     30 4E 05 F1 | 	add	fp, #48
2dd98     A7 14 02 FB | 	rdlong	arg02, fp
2dd9c     09 15 62 FC | 	wrlong	arg02, arg01
2dda0     0C 4E 85 F1 | 	sub	fp, #12
2dda4     A7 12 02 FB | 	rdlong	arg01, fp
2dda8     24 4E 85 F1 | 	sub	fp, #36
2ddac     A7 14 02 FB | 	rdlong	arg02, fp
2ddb0     28 4E 05 F1 | 	add	fp, #40
2ddb4     A7 16 02 FB | 	rdlong	arg03, fp
2ddb8     50 4E 85 F1 | 	sub	fp, #80
2ddbc     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2ddc0     28 4E 05 F1 | 	add	fp, #40
2ddc4     A7 FA 01 FB | 	rdlong	result1, fp
2ddc8     0B FA 05 F1 | 	add	result1, #11
2ddcc     FD 20 48 FC | 	wrbyte	#16, result1
2ddd0     24 4E 05 F1 | 	add	fp, #36
2ddd4     A7 FA 01 FB | 	rdlong	result1, fp
2ddd8     03 FA 05 F1 | 	add	result1, #3
2dddc     FD 02 48 FC | 	wrbyte	#1, result1
2dde0     44 4E 85 F1 | 	sub	fp, #68
2dde4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dde8     08 4E 85 F1 | 	sub	fp, #8
2ddec     3C 00 90 5D |  if_ne	jmp	#LR__4643
2ddf0     4C 4E 05 F1 | 	add	fp, #76
2ddf4     A7 12 02 FB | 	rdlong	arg01, fp
2ddf8     4C 4E 85 F1 | 	sub	fp, #76
2ddfc     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2de00     08 4E 05 F1 | 	add	fp, #8
2de04     A7 FA 61 FC | 	wrlong	result1, fp
2de08     08 4E 85 F1 | 	sub	fp, #8
2de0c     1C 00 90 FD | 	jmp	#LR__4643
2de10                 | LR__4642
2de10     3C 4E 05 F1 | 	add	fp, #60
2de14     A7 12 02 F6 | 	mov	arg01, fp
2de18     14 4E 05 F1 | 	add	fp, #20
2de1c     A7 14 02 FB | 	rdlong	arg02, fp
2de20     50 4E 85 F1 | 	sub	fp, #80
2de24     00 16 06 F6 | 	mov	arg03, #0
2de28     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2de2c                 | LR__4643
2de2c                 | LR__4644
2de2c                 | LR__4645
2de2c                 | ' 				remove_chain(&sobj, dcl, 0);
2de2c                 | ' 			}
2de2c                 | ' 		}
2de2c                 | ' 		;
2de2c                 | ' 	}
2de2c                 | ' 
2de2c                 | ' 	return res ;
2de2c     08 4E 05 F1 | 	add	fp, #8
2de30     A7 FA 01 FB | 	rdlong	result1, fp
2de34     08 4E 85 F1 | 	sub	fp, #8
2de38     A7 F0 03 F6 | 	mov	ptra, fp
2de3c     B2 00 A0 FD | 	call	#popregs_
2de40                 | _fatfs_cc_f_mkdir_ret
2de40     2D 00 64 FD | 	ret
2de44                 | 
2de44                 | _fatfs_cc_f_rename
2de44     01 4A 05 F6 | 	mov	COUNT_, #1
2de48     A8 00 A0 FD | 	call	#pushregs_
2de4c     9C F0 07 F1 | 	add	ptra, #156
2de50     04 4E 05 F1 | 	add	fp, #4
2de54     A7 12 62 FC | 	wrlong	arg01, fp
2de58     04 4E 05 F1 | 	add	fp, #4
2de5c     A7 14 62 FC | 	wrlong	arg02, fp
2de60     A7 12 02 F6 | 	mov	arg01, fp
2de64     08 4E 85 F1 | 	sub	fp, #8
2de68     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2de6c     04 4E 05 F1 | 	add	fp, #4
2de70     A7 12 02 F6 | 	mov	arg01, fp
2de74     6C 4E 05 F1 | 	add	fp, #108
2de78     A7 14 02 F6 | 	mov	arg02, fp
2de7c     70 4E 85 F1 | 	sub	fp, #112
2de80     02 16 06 F6 | 	mov	arg03, #2
2de84     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2de88     0C 4E 05 F1 | 	add	fp, #12
2de8c     A7 FA 61 FC | 	wrlong	result1, fp
2de90     0C 4E 85 F1 | 	sub	fp, #12
2de94     00 FA 0D F2 | 	cmp	result1, #0 wz
2de98     44 03 90 5D |  if_ne	jmp	#LR__4663
2de9c     70 4E 05 F1 | 	add	fp, #112
2dea0     A7 16 02 FB | 	rdlong	arg03, fp
2dea4     60 4E 85 F1 | 	sub	fp, #96
2dea8     A7 16 62 FC | 	wrlong	arg03, fp
2deac     A7 12 02 F6 | 	mov	arg01, fp
2deb0     0C 4E 85 F1 | 	sub	fp, #12
2deb4     A7 14 02 FB | 	rdlong	arg02, fp
2deb8     04 4E 85 F1 | 	sub	fp, #4
2debc     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2dec0     0C 4E 05 F1 | 	add	fp, #12
2dec4     A7 FA 61 FC | 	wrlong	result1, fp
2dec8     00 FA 4D F2 | 	cmps	result1, #0 wz
2decc     0C 4E 85 F1 | 	sub	fp, #12
2ded0     1C 00 90 5D |  if_ne	jmp	#LR__4650
2ded4     3B 4E 05 F1 | 	add	fp, #59
2ded8     A7 FA C1 FA | 	rdbyte	result1, fp
2dedc     3B 4E 85 F1 | 	sub	fp, #59
2dee0     A0 FA CD F7 | 	test	result1, #160 wz
2dee4     0C 4E 05 51 |  if_ne	add	fp, #12
2dee8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2deec     0C 4E 85 51 |  if_ne	sub	fp, #12
2def0                 | LR__4650
2def0     0C 4E 05 F1 | 	add	fp, #12
2def4     A7 1E 0A FB | 	rdlong	local01, fp wz
2def8     0C 4E 85 F1 | 	sub	fp, #12
2defc     E0 02 90 5D |  if_ne	jmp	#LR__4662
2df00     74 4E 05 F1 | 	add	fp, #116
2df04     A7 12 02 F6 | 	mov	arg01, fp
2df08     48 4E 85 F1 | 	sub	fp, #72
2df0c     A7 14 02 FB | 	rdlong	arg02, fp
2df10     2C 4E 85 F1 | 	sub	fp, #44
2df14     20 16 06 F6 | 	mov	arg03, #32
2df18     34 28 BF FD | 	call	#__system____builtin_memmove
2df1c     40 4E 05 F1 | 	add	fp, #64
2df20     A7 12 02 F6 | 	mov	arg01, fp
2df24     30 4E 85 F1 | 	sub	fp, #48
2df28     A7 14 02 F6 | 	mov	arg02, fp
2df2c     10 4E 85 F1 | 	sub	fp, #16
2df30     30 16 06 F6 | 	mov	arg03, #48
2df34     18 28 BF FD | 	call	#__system____builtin_memmove
2df38     40 4E 05 F1 | 	add	fp, #64
2df3c     A7 12 02 F6 | 	mov	arg01, fp
2df40     38 4E 85 F1 | 	sub	fp, #56
2df44     A7 14 02 FB | 	rdlong	arg02, fp
2df48     08 4E 85 F1 | 	sub	fp, #8
2df4c     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2df50     0C 4E 05 F1 | 	add	fp, #12
2df54     A7 FA 61 FC | 	wrlong	result1, fp
2df58     0C 4E 85 F1 | 	sub	fp, #12
2df5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2df60     4C 00 90 5D |  if_ne	jmp	#LR__4653
2df64     48 4E 05 F1 | 	add	fp, #72
2df68     A7 FA 01 FB | 	rdlong	result1, fp
2df6c     30 4E 85 F1 | 	sub	fp, #48
2df70     A7 16 02 FB | 	rdlong	arg03, fp
2df74     18 4E 85 F1 | 	sub	fp, #24
2df78     0B FB 09 F2 | 	cmp	result1, arg03 wz
2df7c     20 00 90 5D |  if_ne	jmp	#LR__4651
2df80     50 4E 05 F1 | 	add	fp, #80
2df84     A7 FA 01 FB | 	rdlong	result1, fp
2df88     30 4E 85 F1 | 	sub	fp, #48
2df8c     A7 16 02 FB | 	rdlong	arg03, fp
2df90     20 4E 85 F1 | 	sub	fp, #32
2df94     0B FB 09 F2 | 	cmp	result1, arg03 wz
2df98     04 1E 06 A6 |  if_e	mov	local01, #4
2df9c     04 00 90 AD |  if_e	jmp	#LR__4652
2dfa0                 | LR__4651
2dfa0     08 1E 06 F6 | 	mov	local01, #8
2dfa4                 | LR__4652
2dfa4     0C 4E 05 F1 | 	add	fp, #12
2dfa8     A7 1E 62 FC | 	wrlong	local01, fp
2dfac     0C 4E 85 F1 | 	sub	fp, #12
2dfb0                 | LR__4653
2dfb0     0C 4E 05 F1 | 	add	fp, #12
2dfb4     A7 1E 02 FB | 	rdlong	local01, fp
2dfb8     0C 4E 85 F1 | 	sub	fp, #12
2dfbc     04 1E 0E F2 | 	cmp	local01, #4 wz
2dfc0     CC 01 90 5D |  if_ne	jmp	#LR__4659
2dfc4     40 4E 05 F1 | 	add	fp, #64
2dfc8     A7 12 02 F6 | 	mov	arg01, fp
2dfcc     40 4E 85 F1 | 	sub	fp, #64
2dfd0     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2dfd4     0C 4E 05 F1 | 	add	fp, #12
2dfd8     A7 FA 61 FC | 	wrlong	result1, fp
2dfdc     0C 4E 85 F1 | 	sub	fp, #12
2dfe0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dfe4     A8 01 90 5D |  if_ne	jmp	#LR__4658
2dfe8     5C 4E 05 F1 | 	add	fp, #92
2dfec     A7 12 02 FB | 	rdlong	arg01, fp
2dff0     38 4E 05 F1 | 	add	fp, #56
2dff4     A7 12 62 FC | 	wrlong	arg01, fp
2dff8     0D 12 06 F1 | 	add	arg01, #13
2dffc     20 4E 85 F1 | 	sub	fp, #32
2e000     A7 14 02 F6 | 	mov	arg02, fp
2e004     74 4E 85 F1 | 	sub	fp, #116
2e008     0D 14 06 F1 | 	add	arg02, #13
2e00c     13 16 06 F6 | 	mov	arg03, #19
2e010     3C 27 BF FD | 	call	#__system____builtin_memmove
2e014     94 4E 05 F1 | 	add	fp, #148
2e018     A7 1E 02 FB | 	rdlong	local01, fp
2e01c     15 4E 85 F1 | 	sub	fp, #21
2e020     A7 FA C1 FA | 	rdbyte	result1, fp
2e024     0B 1E 06 F1 | 	add	local01, #11
2e028     0F FB 41 FC | 	wrbyte	result1, local01
2e02c     15 4E 05 F1 | 	add	fp, #21
2e030     A7 1E 02 FB | 	rdlong	local01, fp
2e034     94 4E 85 F1 | 	sub	fp, #148
2e038     0B 1E 06 F1 | 	add	local01, #11
2e03c     0F 1F C2 FA | 	rdbyte	local01, local01
2e040     10 1E CE F7 | 	test	local01, #16 wz
2e044     24 00 90 5D |  if_ne	jmp	#LR__4654
2e048     94 4E 05 F1 | 	add	fp, #148
2e04c     A7 FA 01 FB | 	rdlong	result1, fp
2e050     FD 1E 02 F6 | 	mov	local01, result1
2e054     94 4E 85 F1 | 	sub	fp, #148
2e058     0B FA 05 F1 | 	add	result1, #11
2e05c     FD FA C1 FA | 	rdbyte	result1, result1
2e060     20 FA 45 F5 | 	or	result1, #32
2e064     0B 1E 06 F1 | 	add	local01, #11
2e068     0F FB 41 FC | 	wrbyte	result1, local01
2e06c                 | LR__4654
2e06c     70 4E 05 F1 | 	add	fp, #112
2e070     A7 1E 02 FB | 	rdlong	local01, fp
2e074     03 1E 06 F1 | 	add	local01, #3
2e078     0F 03 48 FC | 	wrbyte	#1, local01
2e07c     24 4E 05 F1 | 	add	fp, #36
2e080     A7 1E 02 FB | 	rdlong	local01, fp
2e084     94 4E 85 F1 | 	sub	fp, #148
2e088     0B 1E 06 F1 | 	add	local01, #11
2e08c     0F 1F C2 FA | 	rdbyte	local01, local01
2e090     10 1E CE F7 | 	test	local01, #16 wz
2e094     F8 00 90 AD |  if_e	jmp	#LR__4657
2e098     18 4E 05 F1 | 	add	fp, #24
2e09c     A7 16 02 FB | 	rdlong	arg03, fp
2e0a0     30 4E 05 F1 | 	add	fp, #48
2e0a4     A7 1E 02 FB | 	rdlong	local01, fp
2e0a8     48 4E 85 F1 | 	sub	fp, #72
2e0ac     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e0b0     DC 00 90 AD |  if_e	jmp	#LR__4657
2e0b4     70 4E 05 F1 | 	add	fp, #112
2e0b8     A7 12 02 FB | 	rdlong	arg01, fp
2e0bc     09 1F 02 F6 | 	mov	local01, arg01
2e0c0     24 4E 05 F1 | 	add	fp, #36
2e0c4     A7 14 02 FB | 	rdlong	arg02, fp
2e0c8     94 4E 85 F1 | 	sub	fp, #148
2e0cc     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e0d0     FD 14 02 F6 | 	mov	arg02, result1
2e0d4     0F 13 02 F6 | 	mov	arg01, local01
2e0d8     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e0dc     98 4E 05 F1 | 	add	fp, #152
2e0e0     A7 FA 61 FC | 	wrlong	result1, fp
2e0e4     00 FA 4D F2 | 	cmps	result1, #0 wz
2e0e8     98 4E 85 F1 | 	sub	fp, #152
2e0ec     0C 4E 05 A1 |  if_e	add	fp, #12
2e0f0     A7 04 68 AC |  if_e	wrlong	#2, fp
2e0f4     0C 4E 85 A1 |  if_e	sub	fp, #12
2e0f8     94 00 90 AD |  if_e	jmp	#LR__4656
2e0fc     70 4E 05 F1 | 	add	fp, #112
2e100     A7 12 02 FB | 	rdlong	arg01, fp
2e104     28 4E 05 F1 | 	add	fp, #40
2e108     A7 14 02 FB | 	rdlong	arg02, fp
2e10c     98 4E 85 F1 | 	sub	fp, #152
2e110     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e114     0C 4E 05 F1 | 	add	fp, #12
2e118     A7 FA 61 FC | 	wrlong	result1, fp
2e11c     64 4E 05 F1 | 	add	fp, #100
2e120     A7 1E 02 FB | 	rdlong	local01, fp
2e124     54 1E 06 F1 | 	add	local01, #84
2e128     24 4E 05 F1 | 	add	fp, #36
2e12c     A7 1E 62 FC | 	wrlong	local01, fp
2e130     88 4E 85 F1 | 	sub	fp, #136
2e134     A7 1E 0A FB | 	rdlong	local01, fp wz
2e138     0C 4E 85 F1 | 	sub	fp, #12
2e13c     50 00 90 5D |  if_ne	jmp	#LR__4655
2e140     94 4E 05 F1 | 	add	fp, #148
2e144     A7 1E 02 FB | 	rdlong	local01, fp
2e148     94 4E 85 F1 | 	sub	fp, #148
2e14c     01 1E 06 F1 | 	add	local01, #1
2e150     0F 1F C2 FA | 	rdbyte	local01, local01
2e154     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e158     34 00 90 5D |  if_ne	jmp	#LR__4655
2e15c     70 4E 05 F1 | 	add	fp, #112
2e160     A7 12 02 FB | 	rdlong	arg01, fp
2e164     24 4E 05 F1 | 	add	fp, #36
2e168     A7 14 02 FB | 	rdlong	arg02, fp
2e16c     4C 4E 85 F1 | 	sub	fp, #76
2e170     A7 16 02 FB | 	rdlong	arg03, fp
2e174     48 4E 85 F1 | 	sub	fp, #72
2e178     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e17c     70 4E 05 F1 | 	add	fp, #112
2e180     A7 1E 02 FB | 	rdlong	local01, fp
2e184     70 4E 85 F1 | 	sub	fp, #112
2e188     03 1E 06 F1 | 	add	local01, #3
2e18c     0F 03 48 FC | 	wrbyte	#1, local01
2e190                 | LR__4655
2e190                 | LR__4656
2e190                 | LR__4657
2e190                 | LR__4658
2e190                 | LR__4659
2e190     0C 4E 05 F1 | 	add	fp, #12
2e194     A7 1E 0A FB | 	rdlong	local01, fp wz
2e198     0C 4E 85 F1 | 	sub	fp, #12
2e19c     40 00 90 5D |  if_ne	jmp	#LR__4661
2e1a0     10 4E 05 F1 | 	add	fp, #16
2e1a4     A7 12 02 F6 | 	mov	arg01, fp
2e1a8     10 4E 85 F1 | 	sub	fp, #16
2e1ac     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e1b0     0C 4E 05 F1 | 	add	fp, #12
2e1b4     A7 FA 61 FC | 	wrlong	result1, fp
2e1b8     0C 4E 85 F1 | 	sub	fp, #12
2e1bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1c0     1C 00 90 5D |  if_ne	jmp	#LR__4660
2e1c4     70 4E 05 F1 | 	add	fp, #112
2e1c8     A7 12 02 FB | 	rdlong	arg01, fp
2e1cc     70 4E 85 F1 | 	sub	fp, #112
2e1d0     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e1d4     0C 4E 05 F1 | 	add	fp, #12
2e1d8     A7 FA 61 FC | 	wrlong	result1, fp
2e1dc     0C 4E 85 F1 | 	sub	fp, #12
2e1e0                 | LR__4660
2e1e0                 | LR__4661
2e1e0                 | LR__4662
2e1e0                 | LR__4663
2e1e0                 | ' 					res = sync_fs(fs);
2e1e0                 | ' 				}
2e1e0                 | ' 			}
2e1e0                 | ' 
2e1e0                 | ' 		}
2e1e0                 | ' 		;
2e1e0                 | ' 	}
2e1e0                 | ' 
2e1e0                 | ' 	return res ;
2e1e0     0C 4E 05 F1 | 	add	fp, #12
2e1e4     A7 FA 01 FB | 	rdlong	result1, fp
2e1e8     0C 4E 85 F1 | 	sub	fp, #12
2e1ec     A7 F0 03 F6 | 	mov	ptra, fp
2e1f0     B2 00 A0 FD | 	call	#popregs_
2e1f4                 | _fatfs_cc_f_rename_ret
2e1f4     2D 00 64 FD | 	ret
2e1f8                 | 
2e1f8                 | _fatfs_cc_time
2e1f8     00 4A 05 F6 | 	mov	COUNT_, #0
2e1fc     A8 00 A0 FD | 	call	#pushregs_
2e200     14 F0 07 F1 | 	add	ptra, #20
2e204     04 4E 05 F1 | 	add	fp, #4
2e208     A7 12 62 FC | 	wrlong	arg01, fp
2e20c     04 4E 05 F1 | 	add	fp, #4
2e210     A7 12 02 F6 | 	mov	arg01, fp
2e214     08 4E 85 F1 | 	sub	fp, #8
2e218     00 14 06 F6 | 	mov	arg02, #0
2e21c     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e220     08 4E 05 F1 | 	add	fp, #8
2e224     A7 FA 01 FB | 	rdlong	result1, fp
2e228     08 4E 05 F1 | 	add	fp, #8
2e22c     A7 FA 61 FC | 	wrlong	result1, fp
2e230     0C 4E 85 F1 | 	sub	fp, #12
2e234     A7 FA 09 FB | 	rdlong	result1, fp wz
2e238     04 4E 85 F1 | 	sub	fp, #4
2e23c     18 00 90 AD |  if_e	jmp	#LR__4670
2e240     04 4E 05 F1 | 	add	fp, #4
2e244     A7 FA 01 FB | 	rdlong	result1, fp
2e248     0C 4E 05 F1 | 	add	fp, #12
2e24c     A7 14 02 FB | 	rdlong	arg02, fp
2e250     10 4E 85 F1 | 	sub	fp, #16
2e254     FD 14 62 FC | 	wrlong	arg02, result1
2e258                 | LR__4670
2e258                 | '         *tp = now;
2e258                 | '     return now;
2e258     10 4E 05 F1 | 	add	fp, #16
2e25c     A7 FA 01 FB | 	rdlong	result1, fp
2e260     10 4E 85 F1 | 	sub	fp, #16
2e264     A7 F0 03 F6 | 	mov	ptra, fp
2e268     B2 00 A0 FD | 	call	#popregs_
2e26c                 | _fatfs_cc_time_ret
2e26c     2D 00 64 FD | 	ret
2e270                 | 
2e270                 | _fatfs_cc_mktime
2e270     06 4A 05 F6 | 	mov	COUNT_, #6
2e274     A8 00 A0 FD | 	call	#pushregs_
2e278     09 1F 02 F6 | 	mov	local01, arg01
2e27c     14 1E 06 F1 | 	add	local01, #20
2e280     0F 13 02 FB | 	rdlong	arg01, local01
2e284     14 1E 86 F1 | 	sub	local01, #20
2e288     46 12 56 F2 | 	cmps	arg01, #70 wc
2e28c                 | '                 return (time_t) -1;
2e28c     01 FA 65 C6 |  if_b	neg	result1, #1
2e290     7C 01 90 CD |  if_b	jmp	#LR__4684
2e294     03 00 00 FF 
2e298     6C 21 06 F6 | 	mov	local02, ##1900
2e29c     14 1E 06 F1 | 	add	local01, #20
2e2a0     0F FB 01 FB | 	rdlong	result1, local01
2e2a4     FD 20 02 F1 | 	add	local02, result1
2e2a8     08 1E 86 F1 | 	sub	local01, #8
2e2ac     0F 23 02 FB | 	rdlong	local03, local01
2e2b0     01 22 86 F1 | 	sub	local03, #1
2e2b4     04 1E 06 F1 | 	add	local01, #4
2e2b8     0F 13 02 FB | 	rdlong	arg01, local01
2e2bc     10 1E 86 F1 | 	sub	local01, #16
2e2c0     02 12 66 F0 | 	shl	arg01, #2
2e2c4     02 00 00 FF 
2e2c8     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e2cc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e2d0     09 FB 01 FB | 	rdlong	result1, arg01
2e2d4     FD 22 02 F1 | 	add	local03, result1
2e2d8     10 13 02 F6 | 	mov	arg01, local02
2e2dc     02 00 00 FF 
2e2e0     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e2e4     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e2e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2ec     1C 00 90 AD |  if_e	jmp	#LR__4680
2e2f0     00 24 06 F6 | 	mov	local04, #0
2e2f4     10 1E 06 F1 | 	add	local01, #16
2e2f8     0F FB 01 FB | 	rdlong	result1, local01
2e2fc     10 1E 86 F1 | 	sub	local01, #16
2e300     02 FA 55 F2 | 	cmps	result1, #2 wc
2e304     01 24 06 36 |  if_ae	mov	local04, #1
2e308     04 00 90 FD | 	jmp	#LR__4681
2e30c                 | LR__4680
2e30c     00 24 06 F6 | 	mov	local04, #0
2e310                 | LR__4681
2e310     04 1E 06 F1 | 	add	local01, #4
2e314     0F FB 01 FB | 	rdlong	result1, local01
2e318     04 1E 86 F1 | 	sub	local01, #4
2e31c     0F 27 02 FB | 	rdlong	local05, local01
2e320     08 1E 06 F1 | 	add	local01, #8
2e324     0F 13 02 FB | 	rdlong	arg01, local01
2e328     07 00 00 FF 
2e32c     10 12 06 FD | 	qmul	arg01, ##3600
2e330     12 23 02 F1 | 	add	local03, local04
2e334     FD 24 02 F6 | 	mov	local04, result1
2e338     04 24 66 F0 | 	shl	local04, #4
2e33c     FD 24 82 F1 | 	sub	local04, result1
2e340     02 24 66 F0 | 	shl	local04, #2
2e344     12 27 02 F1 | 	add	local05, local04
2e348     08 1E 86 F1 | 	sub	local01, #8
2e34c     18 24 62 FD | 	getqx	local04
2e350     A8 00 00 FF 
2e354     80 23 06 FD | 	qmul	local03, ##86400
2e358     12 27 02 F1 | 	add	local05, local04
2e35c     10 23 02 F6 | 	mov	local03, local02
2e360     03 00 00 FF 
2e364     B2 23 86 F1 | 	sub	local03, ##1970
2e368     18 24 62 FD | 	getqx	local04
2e36c     99 F0 00 FF 
2e370     80 23 06 FD | 	qmul	local03, ##31536000
2e374     12 27 02 F1 | 	add	local05, local04
2e378     10 23 02 F6 | 	mov	local03, local02
2e37c     03 00 00 FF 
2e380     B1 23 86 F1 | 	sub	local03, ##1969
2e384     11 29 52 F6 | 	abs	local06, local03 wc
2e388     02 28 46 F0 | 	shr	local06, #2
2e38c     14 29 82 F6 | 	negc	local06, local06
2e390     03 00 00 FF 
2e394     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e398     18 24 62 FD | 	getqx	local04
2e39c     12 27 02 F1 | 	add	local05, local04
2e3a0     18 00 90 CD |  if_b	jmp	#LR__4682
2e3a4     03 00 00 FF 
2e3a8     D0 21 86 F1 | 	sub	local02, ##2000
2e3ac     10 25 52 F6 | 	abs	local04, local02 wc
2e3b0     64 24 16 FD | 	qdiv	local04, #100
2e3b4     18 24 62 FD | 	getqx	local04
2e3b8     12 29 A2 F3 | 	sumnc	local06, local04
2e3bc                 | LR__4682
2e3bc     A8 00 00 FF 
2e3c0     80 29 06 FD | 	qmul	local06, ##86400
2e3c4     18 28 62 FD | 	getqx	local06
2e3c8     14 27 02 F1 | 	add	local05, local06
2e3cc     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e3d0     02 00 00 FF 
2e3d4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e3d8     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e3dc     14 27 02 F1 | 	add	local05, local06
2e3e0     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e3e4     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e3e8     02 00 00 FF 
2e3ec     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e3f0     01 22 0E F2 | 	cmp	local03, #1 wz
2e3f4     14 00 90 5D |  if_ne	jmp	#LR__4683
2e3f8     0F 13 02 F6 | 	mov	arg01, local01
2e3fc     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e400     00 FA 0D F2 | 	cmp	result1, #0 wz
2e404     07 00 00 5F 
2e408     10 26 86 51 |  if_ne	sub	local05, ##3600
2e40c                 | LR__4683
2e40c                 | '                 s -=  (3600L) ;
2e40c                 | ' 
2e40c                 | '         return s;
2e40c     13 FB 01 F6 | 	mov	result1, local05
2e410                 | LR__4684
2e410     A7 F0 03 F6 | 	mov	ptra, fp
2e414     B2 00 A0 FD | 	call	#popregs_
2e418                 | _fatfs_cc_mktime_ret
2e418     2D 00 64 FD | 	ret
2e41c                 | 
2e41c                 | _fatfs_cc__gmtime_r
2e41c     03 4A 05 F6 | 	mov	COUNT_, #3
2e420     A8 00 A0 FD | 	call	#pushregs_
2e424     09 1F 02 FB | 	rdlong	local01, arg01
2e428     A8 00 00 FF 
2e42c     80 1F 16 FD | 	qdiv	local01, ##86400
2e430     18 FA 61 FD | 	getqx	result1
2e434     04 FA 05 F1 | 	add	result1, #4
2e438     07 FA 15 FD | 	qdiv	result1, #7
2e43c     18 14 06 F1 | 	add	arg02, #24
2e440     D1 7F 27 FF 
2e444     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e448     D1 7F 27 3F 
2e44c     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e450     03 00 00 3F 
2e454     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e458     03 00 00 CF 
2e45c     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e460                 | ' 	  year = 1970;
2e460                 | ' 	}
2e460                 | ' 
2e460                 | ' 	for(;;) {
2e460     19 FA 61 FD | 	getqy	result1
2e464     0A FB 61 FC | 	wrlong	result1, arg02
2e468     18 14 86 F1 | 	sub	arg02, #24
2e46c                 | LR__4690
2e46c     10 13 02 F6 | 	mov	arg01, local02
2e470     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e474     00 FA 0D F2 | 	cmp	result1, #0 wz
2e478     42 F1 00 5F 
2e47c     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e480     99 F0 00 AF 
2e484     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e488     11 1F 12 F2 | 	cmp	local01, local03 wc
2e48c                 | ' 	    break;
2e48c     01 20 06 31 |  if_ae	add	local02, #1
2e490     11 1F 82 31 |  if_ae	sub	local01, local03
2e494     D4 FF 9F 3D |  if_ae	jmp	#LR__4690
2e498     A8 00 00 FF 
2e49c     80 1F 16 FD | 	qdiv	local01, ##86400
2e4a0     10 23 02 F6 | 	mov	local03, local02
2e4a4     03 00 00 FF 
2e4a8     6C 23 86 F1 | 	sub	local03, ##1900
2e4ac     14 14 06 F1 | 	add	arg02, #20
2e4b0     0A 23 62 FC | 	wrlong	local03, arg02
2e4b4     08 14 06 F1 | 	add	arg02, #8
2e4b8     10 13 02 F6 | 	mov	arg01, local02
2e4bc     18 20 62 FD | 	getqx	local02
2e4c0     0A 21 62 FC | 	wrlong	local02, arg02
2e4c4     1C 14 86 F1 | 	sub	arg02, #28
2e4c8     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e4cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4d0     1D 22 06 56 |  if_ne	mov	local03, #29
2e4d4     1C 22 06 A6 |  if_e	mov	local03, #28
2e4d8     02 00 00 FF 
2e4dc     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e4e0     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e4e4     02 00 00 FF 
2e4e8     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e4ec                 | ' 
2e4ec                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e4ec                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e4ec     00 12 06 F6 | 	mov	arg01, #0
2e4f0     97 2A 48 FB | 	callpa	#(@LR__4692-@LR__4691)>>2,fcache_load_ptr_
2e4f4                 | LR__4691
2e4f4     09 23 02 F6 | 	mov	local03, arg01
2e4f8     02 22 66 F0 | 	shl	local03, #2
2e4fc     02 00 00 FF 
2e500     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e504     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e508     11 23 02 FB | 	rdlong	local03, local03
2e50c     11 21 52 F2 | 	cmps	local02, local03 wc
2e510     02 00 00 FF 
2e514     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e518     2C 00 90 CD |  if_b	jmp	#LR__4693
2e51c     09 23 02 F6 | 	mov	local03, arg01
2e520     02 22 66 F0 | 	shl	local03, #2
2e524     02 00 00 FF 
2e528     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e52c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e530     11 23 02 FB | 	rdlong	local03, local03
2e534     11 21 82 F1 | 	sub	local02, local03
2e538     01 12 06 F1 | 	add	arg01, #1
2e53c     02 00 00 FF 
2e540     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e544     AC FF 9F FD | 	jmp	#LR__4691
2e548                 | LR__4692
2e548                 | LR__4693
2e548     A8 00 00 FF 
2e54c     80 1F 16 FD | 	qdiv	local01, ##86400
2e550     10 14 06 F1 | 	add	arg02, #16
2e554     0A 13 62 FC | 	wrlong	arg01, arg02
2e558     01 20 06 F1 | 	add	local02, #1
2e55c     04 14 86 F1 | 	sub	arg02, #4
2e560     0A 21 62 FC | 	wrlong	local02, arg02
2e564     19 1E 62 FD | 	getqy	local01
2e568     07 00 00 FF 
2e56c     10 1E 16 FD | 	qdiv	local01, ##3600
2e570     18 22 62 FD | 	getqx	local03
2e574     07 00 00 FF 
2e578     10 1E 16 FD | 	qdiv	local01, ##3600
2e57c     04 14 86 F1 | 	sub	arg02, #4
2e580     0A 23 62 FC | 	wrlong	local03, arg02
2e584     19 1E 62 FD | 	getqy	local01
2e588     3C 1E 16 FD | 	qdiv	local01, #60
2e58c     18 22 62 FD | 	getqx	local03
2e590     3C 1E 16 FD | 	qdiv	local01, #60
2e594     04 14 86 F1 | 	sub	arg02, #4
2e598     0A 23 62 FC | 	wrlong	local03, arg02
2e59c     04 14 86 F1 | 	sub	arg02, #4
2e5a0                 | '         stm->tm_isdst = 0;
2e5a0                 | ' 
2e5a0                 | ' ;
2e5a0                 | '         return stm;
2e5a0     0A FB 01 F6 | 	mov	result1, arg02
2e5a4     19 22 62 FD | 	getqy	local03
2e5a8     0A 23 62 FC | 	wrlong	local03, arg02
2e5ac     20 14 06 F1 | 	add	arg02, #32
2e5b0     0A 01 68 FC | 	wrlong	#0, arg02
2e5b4     A7 F0 03 F6 | 	mov	ptra, fp
2e5b8     B2 00 A0 FD | 	call	#popregs_
2e5bc                 | _fatfs_cc__gmtime_r_ret
2e5bc     2D 00 64 FD | 	ret
2e5c0                 | 
2e5c0                 | _fatfs_cc__tzset
2e5c0     80 01 00 FF 
2e5c4     05 13 06 F6 | 	mov	arg01, ##@LR__5005
2e5c8     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e5cc     FD 12 02 F6 | 	mov	arg01, result1
2e5d0     02 00 00 FF 
2e5d4     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e5d8     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e5dc     02 00 00 FF 
2e5e0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e5e4     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e5e8     02 00 00 FF 
2e5ec     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e5f0     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e5f4     02 00 00 FF 
2e5f8     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e5fc                 | _fatfs_cc__tzset_ret
2e5fc     2D 00 64 FD | 	ret
2e600                 | 
2e600                 | _fatfs_cc_getenv
2e600     06 4A 05 F6 | 	mov	COUNT_, #6
2e604     A8 00 A0 FD | 	call	#pushregs_
2e608     09 1F 02 F6 | 	mov	local01, arg01
2e60c     09 21 02 F6 | 	mov	local02, arg01
2e610     97 06 48 FB | 	callpa	#(@LR__4701-@LR__4700)>>2,fcache_load_ptr_
2e614                 | LR__4700
2e614     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e618     01 20 06 51 |  if_ne	add	local02, #1
2e61c     F4 FF 9F 5D |  if_ne	jmp	#LR__4700
2e620                 | LR__4701
2e620     09 21 82 F1 | 	sub	local02, arg01
2e624     10 FB 01 F6 | 	mov	result1, local02
2e628     02 00 00 FF 
2e62c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e630     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e634     02 00 00 FF 
2e638     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e63c                 | '             return 0;
2e63c     00 FA 05 A6 |  if_e	mov	result1, #0
2e640     5C 00 90 AD |  if_e	jmp	#LR__4704
2e644                 | ' 
2e644                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e644     02 00 00 FF 
2e648     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e64c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e650     02 00 00 FF 
2e654     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e658                 | LR__4702
2e658     11 25 0A FB | 	rdlong	local04, local03 wz
2e65c     3C 00 90 AD |  if_e	jmp	#LR__4703
2e660     12 13 02 F6 | 	mov	arg01, local04
2e664     0F 15 02 F6 | 	mov	arg02, local01
2e668     10 17 02 F6 | 	mov	arg03, local02
2e66c     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e670     00 FA 0D F2 | 	cmp	result1, #0 wz
2e674     10 27 02 A6 |  if_e	mov	local05, local02
2e678     12 27 02 A1 |  if_e	add	local05, local04
2e67c     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e680     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e684                 | ' 			return name+len+1;
2e684     10 25 02 A1 |  if_e	add	local04, local02
2e688     01 24 06 A1 |  if_e	add	local04, #1
2e68c     12 FB 01 A6 |  if_e	mov	result1, local04
2e690     0C 00 90 AD |  if_e	jmp	#LR__4704
2e694     04 22 06 F1 | 	add	local03, #4
2e698     BC FF 9F FD | 	jmp	#LR__4702
2e69c                 | LR__4703
2e69c                 | ' 	}
2e69c                 | ' 	return 0;
2e69c     00 FA 05 F6 | 	mov	result1, #0
2e6a0                 | LR__4704
2e6a0     A7 F0 03 F6 | 	mov	ptra, fp
2e6a4     B2 00 A0 FD | 	call	#popregs_
2e6a8                 | _fatfs_cc_getenv_ret
2e6a8     2D 00 64 FD | 	ret
2e6ac                 | 
2e6ac                 | _fatfs_cc__get_fattime
2e6ac     00 4A 05 F6 | 	mov	COUNT_, #0
2e6b0     A8 00 A0 FD | 	call	#pushregs_
2e6b4     34 F0 07 F1 | 	add	ptra, #52
2e6b8     00 12 06 F6 | 	mov	arg01, #0
2e6bc     38 FB BF FD | 	call	#_fatfs_cc_time
2e6c0     04 4E 05 F1 | 	add	fp, #4
2e6c4     A7 FA 61 FC | 	wrlong	result1, fp
2e6c8     A7 12 02 F6 | 	mov	arg01, fp
2e6cc     0C 4E 05 F1 | 	add	fp, #12
2e6d0     A7 14 02 F6 | 	mov	arg02, fp
2e6d4     10 4E 85 F1 | 	sub	fp, #16
2e6d8     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e6dc     24 4E 05 F1 | 	add	fp, #36
2e6e0     A7 14 02 FB | 	rdlong	arg02, fp
2e6e4     50 14 86 F1 | 	sub	arg02, #80
2e6e8     09 14 66 F0 | 	shl	arg02, #9
2e6ec     04 4E 85 F1 | 	sub	fp, #4
2e6f0     A7 FA 01 FB | 	rdlong	result1, fp
2e6f4     01 FA 05 F1 | 	add	result1, #1
2e6f8     05 FA 65 F0 | 	shl	result1, #5
2e6fc     FD 14 42 F5 | 	or	arg02, result1
2e700     04 4E 85 F1 | 	sub	fp, #4
2e704     A7 FA 01 FB | 	rdlong	result1, fp
2e708     FD 14 42 F5 | 	or	arg02, result1
2e70c     14 4E 85 F1 | 	sub	fp, #20
2e710     A7 14 62 FC | 	wrlong	arg02, fp
2e714     10 4E 05 F1 | 	add	fp, #16
2e718     A7 14 02 FB | 	rdlong	arg02, fp
2e71c     0B 14 66 F0 | 	shl	arg02, #11
2e720     04 4E 85 F1 | 	sub	fp, #4
2e724     A7 FA 01 FB | 	rdlong	result1, fp
2e728     05 FA 65 F0 | 	shl	result1, #5
2e72c     FD 14 42 F5 | 	or	arg02, result1
2e730     04 4E 85 F1 | 	sub	fp, #4
2e734     A7 FA 01 FB | 	rdlong	result1, fp
2e738     FD 14 42 F5 | 	or	arg02, result1
2e73c     04 4E 85 F1 | 	sub	fp, #4
2e740     A7 14 62 FC | 	wrlong	arg02, fp
2e744                 | ' 
2e744                 | '     now = time(0);
2e744                 | '     _gmtime_r (&now, &date);
2e744                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2e744                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2e744                 | '     return (ffdate << 16) | fftime;
2e744     04 4E 85 F1 | 	sub	fp, #4
2e748     A7 FA 01 FB | 	rdlong	result1, fp
2e74c     10 FA 65 F0 | 	shl	result1, #16
2e750     08 4E 85 F1 | 	sub	fp, #8
2e754     0A FB 41 F5 | 	or	result1, arg02
2e758     A7 F0 03 F6 | 	mov	ptra, fp
2e75c     B2 00 A0 FD | 	call	#popregs_
2e760                 | _fatfs_cc__get_fattime_ret
2e760     2D 00 64 FD | 	ret
2e764                 | 
2e764                 | _fatfs_cc_unixtime_0961
2e764     00 4A 05 F6 | 	mov	COUNT_, #0
2e768     A8 00 A0 FD | 	call	#pushregs_
2e76c     34 F0 07 F1 | 	add	ptra, #52
2e770     04 4E 05 F1 | 	add	fp, #4
2e774     A7 12 62 FC | 	wrlong	arg01, fp
2e778     04 4E 05 F1 | 	add	fp, #4
2e77c     A7 14 62 FC | 	wrlong	arg02, fp
2e780     04 4E 85 F1 | 	sub	fp, #4
2e784     A7 14 02 FB | 	rdlong	arg02, fp
2e788     09 14 46 F0 | 	shr	arg02, #9
2e78c     7F 14 06 F5 | 	and	arg02, #127
2e790     50 FA 05 F6 | 	mov	result1, #80
2e794     0A FB 01 F1 | 	add	result1, arg02
2e798     20 4E 05 F1 | 	add	fp, #32
2e79c     A7 FA 61 FC | 	wrlong	result1, fp
2e7a0     20 4E 85 F1 | 	sub	fp, #32
2e7a4     A7 FA 01 FB | 	rdlong	result1, fp
2e7a8     05 FA 45 F0 | 	shr	result1, #5
2e7ac     FD FA 41 F8 | 	getnib	result1, result1, #0
2e7b0     01 FA 85 F1 | 	sub	result1, #1
2e7b4     1C 4E 05 F1 | 	add	fp, #28
2e7b8     A7 FA 61 FC | 	wrlong	result1, fp
2e7bc     1C 4E 85 F1 | 	sub	fp, #28
2e7c0     A7 FA 01 FB | 	rdlong	result1, fp
2e7c4     1F FA 05 F5 | 	and	result1, #31
2e7c8     18 4E 05 F1 | 	add	fp, #24
2e7cc     A7 FA 61 FC | 	wrlong	result1, fp
2e7d0     14 4E 85 F1 | 	sub	fp, #20
2e7d4     A7 FA 01 FB | 	rdlong	result1, fp
2e7d8     0B FA 45 F0 | 	shr	result1, #11
2e7dc     1F FA 05 F5 | 	and	result1, #31
2e7e0     10 4E 05 F1 | 	add	fp, #16
2e7e4     A7 FA 61 FC | 	wrlong	result1, fp
2e7e8     10 4E 85 F1 | 	sub	fp, #16
2e7ec     A7 FA 01 FB | 	rdlong	result1, fp
2e7f0     05 FA 45 F0 | 	shr	result1, #5
2e7f4     3F FA 05 F5 | 	and	result1, #63
2e7f8     0C 4E 05 F1 | 	add	fp, #12
2e7fc     A7 FA 61 FC | 	wrlong	result1, fp
2e800     0C 4E 85 F1 | 	sub	fp, #12
2e804     A7 14 02 FB | 	rdlong	arg02, fp
2e808     1F 14 06 F5 | 	and	arg02, #31
2e80c     01 14 66 F0 | 	shl	arg02, #1
2e810     08 4E 05 F1 | 	add	fp, #8
2e814     A7 14 62 FC | 	wrlong	arg02, fp
2e818     A7 12 02 F6 | 	mov	arg01, fp
2e81c     10 4E 85 F1 | 	sub	fp, #16
2e820     4C FA BF FD | 	call	#_fatfs_cc_mktime
2e824     0C 4E 05 F1 | 	add	fp, #12
2e828     A7 FA 61 FC | 	wrlong	result1, fp
2e82c                 | ' 
2e82c                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2e82c                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2e82c                 | '     date.tm_mday = (dosdate & 0x1f);
2e82c                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2e82c                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2e82c                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2e82c                 | ' 
2e82c                 | '     t = mktime(&date);
2e82c                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e82c                 | '     return t;
2e82c     0C 4E 85 F1 | 	sub	fp, #12
2e830     A7 F0 03 F6 | 	mov	ptra, fp
2e834     B2 00 A0 FD | 	call	#popregs_
2e838                 | _fatfs_cc_unixtime_0961_ret
2e838     2D 00 64 FD | 	ret
2e83c                 | 
2e83c                 | _fatfs_cc__set_dos_error_0963
2e83c     09 01 02 F6 | 	mov	_var01, arg01
2e840                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e840                 | '     switch (derr) {
2e840     14 00 26 F3 | 	fle	_var01, #20
2e844     30 00 62 FD | 	jmprel	_var01
2e848                 | LR__4710
2e848     50 00 90 FD | 	jmp	#LR__4711
2e84c     84 00 90 FD | 	jmp	#LR__4725
2e850     80 00 90 FD | 	jmp	#LR__4726
2e854     7C 00 90 FD | 	jmp	#LR__4727
2e858     48 00 90 FD | 	jmp	#LR__4712
2e85c     44 00 90 FD | 	jmp	#LR__4713
2e860     40 00 90 FD | 	jmp	#LR__4714
2e864     44 00 90 FD | 	jmp	#LR__4715
2e868     48 00 90 FD | 	jmp	#LR__4717
2e86c     54 00 90 FD | 	jmp	#LR__4720
2e870     38 00 90 FD | 	jmp	#LR__4716
2e874     4C 00 90 FD | 	jmp	#LR__4721
2e878     48 00 90 FD | 	jmp	#LR__4722
2e87c     44 00 90 FD | 	jmp	#LR__4723
2e880     50 00 90 FD | 	jmp	#LR__4728
2e884     4C 00 90 FD | 	jmp	#LR__4728
2e888     48 00 90 FD | 	jmp	#LR__4728
2e88c     2C 00 90 FD | 	jmp	#LR__4718
2e890     38 00 90 FD | 	jmp	#LR__4724
2e894     2C 00 90 FD | 	jmp	#LR__4719
2e898     38 00 90 FD | 	jmp	#LR__4728
2e89c                 | LR__4711
2e89c     00 02 06 F6 | 	mov	_var02, #0
2e8a0                 | '         r = 0;
2e8a0                 | '         break;
2e8a0     34 00 90 FD | 	jmp	#LR__4729
2e8a4                 | LR__4712
2e8a4                 | LR__4713
2e8a4                 | LR__4714
2e8a4     04 02 06 F6 | 	mov	_var02, #4
2e8a8                 | '         r =  4 ;
2e8a8                 | '         break;
2e8a8     2C 00 90 FD | 	jmp	#LR__4729
2e8ac                 | LR__4715
2e8ac                 | LR__4716
2e8ac     06 02 06 F6 | 	mov	_var02, #6
2e8b0                 | '         r =  6 ;
2e8b0                 | '         break;
2e8b0     24 00 90 FD | 	jmp	#LR__4729
2e8b4                 | LR__4717
2e8b4     09 02 06 F6 | 	mov	_var02, #9
2e8b8                 | '         r =  9 ;
2e8b8                 | '         break;
2e8b8     1C 00 90 FD | 	jmp	#LR__4729
2e8bc                 | LR__4718
2e8bc     07 02 06 F6 | 	mov	_var02, #7
2e8c0                 | '         r =  7 ;
2e8c0                 | '         break;
2e8c0     14 00 90 FD | 	jmp	#LR__4729
2e8c4                 | LR__4719
2e8c4                 | LR__4720
2e8c4                 | LR__4721
2e8c4                 | LR__4722
2e8c4                 | LR__4723
2e8c4     0A 02 06 F6 | 	mov	_var02, #10
2e8c8                 | '         r =  10 ;
2e8c8                 | '         break;
2e8c8     0C 00 90 FD | 	jmp	#LR__4729
2e8cc                 | LR__4724
2e8cc     0B 02 06 F6 | 	mov	_var02, #11
2e8d0                 | '         r =  11 ;
2e8d0                 | '         break;
2e8d0     04 00 90 FD | 	jmp	#LR__4729
2e8d4                 | LR__4725
2e8d4                 | LR__4726
2e8d4                 | LR__4727
2e8d4                 | LR__4728
2e8d4     0C 02 06 F6 | 	mov	_var02, #12
2e8d8                 | '         r =  12 ;
2e8d8                 | '         break;
2e8d8                 | LR__4729
2e8d8                 | '     }
2e8d8                 | '     return _seterror(r);
2e8d8     00 02 4E F2 | 	cmps	_var02, #0 wz
2e8dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e8e0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2e8e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e8e8     01 FA 65 56 |  if_ne	neg	result1, #1
2e8ec     00 FA 05 A6 |  if_e	mov	result1, #0
2e8f0                 | _fatfs_cc__set_dos_error_0963_ret
2e8f0     2D 00 64 FD | 	ret
2e8f4                 | 
2e8f4                 | _fatfs_cc_v_creat
2e8f4     04 4A 05 F6 | 	mov	COUNT_, #4
2e8f8     A8 00 A0 FD | 	call	#pushregs_
2e8fc     09 1F 02 F6 | 	mov	local01, arg01
2e900     0A 21 02 F6 | 	mov	local02, arg02
2e904     03 00 00 FF 
2e908     3C 12 06 F6 | 	mov	arg01, ##1596
2e90c                 | '     return _gc_alloc(size);
2e90c     10 14 06 F6 | 	mov	arg02, #16
2e910     28 5E BF FD | 	call	#__system___gc_doalloc
2e914     FD 22 0A F6 | 	mov	local03, result1 wz
2e918                 | '       return _seterror( 7 );
2e918     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e91c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2e920     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e924     01 FA 65 A6 |  if_e	neg	result1, #1
2e928     58 00 90 AD |  if_e	jmp	#LR__4731
2e92c     11 13 02 F6 | 	mov	arg01, local03
2e930     00 14 06 F6 | 	mov	arg02, #0
2e934     03 00 00 FF 
2e938     3C 16 06 F6 | 	mov	arg03, ##1596
2e93c     98 00 A0 FD | 	call	#\builtin_bytefill_
2e940     02 00 00 FF 
2e944     14 22 06 F1 | 	add	local03, ##1044
2e948     11 13 02 F6 | 	mov	arg01, local03
2e94c     02 00 00 FF 
2e950     14 22 86 F1 | 	sub	local03, ##1044
2e954     10 15 02 F6 | 	mov	arg02, local02
2e958     07 16 06 F6 | 	mov	arg03, #7
2e95c     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2e960     FD 24 0A F6 | 	mov	local04, result1 wz
2e964     14 00 90 AD |  if_e	jmp	#LR__4730
2e968     11 13 02 F6 | 	mov	arg01, local03
2e96c                 | '     return _gc_free(ptr);
2e96c     D8 5E BF FD | 	call	#__system___gc_free
2e970                 | '     free(f);
2e970                 | '     return _set_dos_error(r);
2e970     12 13 02 F6 | 	mov	arg01, local04
2e974     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2e978     08 00 90 FD | 	jmp	#LR__4731
2e97c                 | LR__4730
2e97c     0F 23 62 FC | 	wrlong	local03, local01
2e980                 | '   }
2e980                 | '   fil->vfsdata = f;
2e980                 | '   return 0;
2e980     00 FA 05 F6 | 	mov	result1, #0
2e984                 | LR__4731
2e984     A7 F0 03 F6 | 	mov	ptra, fp
2e988     B2 00 A0 FD | 	call	#popregs_
2e98c                 | _fatfs_cc_v_creat_ret
2e98c     2D 00 64 FD | 	ret
2e990                 | 
2e990                 | _fatfs_cc_v_close
2e990     02 4A 05 F6 | 	mov	COUNT_, #2
2e994     A8 00 A0 FD | 	call	#pushregs_
2e998     09 1F 02 FB | 	rdlong	local01, arg01
2e99c     02 00 00 FF 
2e9a0     14 1E 06 F1 | 	add	local01, ##1044
2e9a4     0F 13 02 F6 | 	mov	arg01, local01
2e9a8     02 00 00 FF 
2e9ac     14 1E 86 F1 | 	sub	local01, ##1044
2e9b0     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2e9b4     FD 20 02 F6 | 	mov	local02, result1
2e9b8     0F 13 02 F6 | 	mov	arg01, local01
2e9bc                 | '     return _gc_free(ptr);
2e9bc     88 5E BF FD | 	call	#__system___gc_free
2e9c0                 | '     FAT_FIL *f = fil->vfsdata;
2e9c0                 | '     r=f_close(&f->fil);
2e9c0                 | '     free(f);
2e9c0                 | '     return _set_dos_error(r);
2e9c0     10 13 02 F6 | 	mov	arg01, local02
2e9c4     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2e9c8     A7 F0 03 F6 | 	mov	ptra, fp
2e9cc     B2 00 A0 FD | 	call	#popregs_
2e9d0                 | _fatfs_cc_v_close_ret
2e9d0     2D 00 64 FD | 	ret
2e9d4                 | 
2e9d4                 | _fatfs_cc_v_opendir
2e9d4     04 4A 05 F6 | 	mov	COUNT_, #4
2e9d8     A8 00 A0 FD | 	call	#pushregs_
2e9dc     09 1F 02 F6 | 	mov	local01, arg01
2e9e0     0A 21 02 F6 | 	mov	local02, arg02
2e9e4     30 12 06 F6 | 	mov	arg01, #48
2e9e8                 | '     return _gc_alloc(size);
2e9e8     10 14 06 F6 | 	mov	arg02, #16
2e9ec     4C 5D BF FD | 	call	#__system___gc_doalloc
2e9f0     FD 22 0A F6 | 	mov	local03, result1 wz
2e9f4                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e9f4                 | '       return _seterror( 7 );
2e9f4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e9f8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2e9fc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ea00     01 FA 65 A6 |  if_e	neg	result1, #1
2ea04     34 00 90 AD |  if_e	jmp	#LR__4741
2ea08     10 15 02 F6 | 	mov	arg02, local02
2ea0c     11 13 02 F6 | 	mov	arg01, local03
2ea10     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2ea14     FD 24 0A F6 | 	mov	local04, result1 wz
2ea18     14 00 90 AD |  if_e	jmp	#LR__4740
2ea1c     11 13 02 F6 | 	mov	arg01, local03
2ea20                 | '     return _gc_free(ptr);
2ea20     24 5E BF FD | 	call	#__system___gc_free
2ea24                 | '         free(f);
2ea24                 | '         return _set_dos_error(r);
2ea24     12 13 02 F6 | 	mov	arg01, local04
2ea28     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2ea2c     0C 00 90 FD | 	jmp	#LR__4741
2ea30                 | LR__4740
2ea30     04 1E 06 F1 | 	add	local01, #4
2ea34     0F 23 62 FC | 	wrlong	local03, local01
2ea38                 | '     }
2ea38                 | '     dir->vfsdata = f;
2ea38                 | '     return 0;
2ea38     00 FA 05 F6 | 	mov	result1, #0
2ea3c                 | LR__4741
2ea3c     A7 F0 03 F6 | 	mov	ptra, fp
2ea40     B2 00 A0 FD | 	call	#popregs_
2ea44                 | _fatfs_cc_v_opendir_ret
2ea44     2D 00 64 FD | 	ret
2ea48                 | 
2ea48                 | _fatfs_cc_v_closedir
2ea48     02 4A 05 F6 | 	mov	COUNT_, #2
2ea4c     A8 00 A0 FD | 	call	#pushregs_
2ea50     04 12 06 F1 | 	add	arg01, #4
2ea54     09 1F 02 FB | 	rdlong	local01, arg01
2ea58     0F 13 02 F6 | 	mov	arg01, local01
2ea5c     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2ea60     FD 20 02 F6 | 	mov	local02, result1
2ea64     0F 13 02 F6 | 	mov	arg01, local01
2ea68                 | '     return _gc_free(ptr);
2ea68     DC 5D BF FD | 	call	#__system___gc_free
2ea6c     00 20 0E F2 | 	cmp	local02, #0 wz
2ea70     10 13 02 56 |  if_ne	mov	arg01, local02
2ea74     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0963
2ea78                 | '     return r;
2ea78     10 FB 01 F6 | 	mov	result1, local02
2ea7c     A7 F0 03 F6 | 	mov	ptra, fp
2ea80     B2 00 A0 FD | 	call	#popregs_
2ea84                 | _fatfs_cc_v_closedir_ret
2ea84     2D 00 64 FD | 	ret
2ea88                 | 
2ea88                 | _fatfs_cc_v_readdir
2ea88     01 4A 05 F6 | 	mov	COUNT_, #1
2ea8c     A8 00 A0 FD | 	call	#pushregs_
2ea90     2C F1 07 F1 | 	add	ptra, #300
2ea94     04 4E 05 F1 | 	add	fp, #4
2ea98     A7 12 62 FC | 	wrlong	arg01, fp
2ea9c     04 4E 05 F1 | 	add	fp, #4
2eaa0     A7 14 62 FC | 	wrlong	arg02, fp
2eaa4     04 4E 85 F1 | 	sub	fp, #4
2eaa8     A7 16 02 FB | 	rdlong	arg03, fp
2eaac     04 16 06 F1 | 	add	arg03, #4
2eab0     0B 13 02 FB | 	rdlong	arg01, arg03
2eab4     08 4E 05 F1 | 	add	fp, #8
2eab8     A7 14 02 F6 | 	mov	arg02, fp
2eabc     0C 4E 85 F1 | 	sub	fp, #12
2eac0     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2eac4     28 4F 05 F1 | 	add	fp, #296
2eac8     A7 FA 61 FC | 	wrlong	result1, fp
2eacc     28 4F 85 F1 | 	sub	fp, #296
2ead0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ead4     14 00 90 AD |  if_e	jmp	#LR__4750
2ead8                 | '         return _set_dos_error(r);
2ead8     28 4F 05 F1 | 	add	fp, #296
2eadc     A7 12 02 FB | 	rdlong	arg01, fp
2eae0     28 4F 85 F1 | 	sub	fp, #296
2eae4     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2eae8     C4 00 90 FD | 	jmp	#LR__4753
2eaec                 | LR__4750
2eaec     28 4E 05 F1 | 	add	fp, #40
2eaf0     A7 16 CA FA | 	rdbyte	arg03, fp wz
2eaf4     28 4E 85 F1 | 	sub	fp, #40
2eaf8                 | '         return -1;
2eaf8     01 FA 65 A6 |  if_e	neg	result1, #1
2eafc     B0 00 90 AD |  if_e	jmp	#LR__4753
2eb00     08 4E 05 F1 | 	add	fp, #8
2eb04     A7 12 02 FB | 	rdlong	arg01, fp
2eb08     20 4E 05 F1 | 	add	fp, #32
2eb0c     A7 14 02 F6 | 	mov	arg02, fp
2eb10     28 4E 85 F1 | 	sub	fp, #40
2eb14     3F 16 06 F6 | 	mov	arg03, #63
2eb18     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2eb1c     08 4E 05 F1 | 	add	fp, #8
2eb20     A7 16 02 FB | 	rdlong	arg03, fp
2eb24     3F 16 06 F1 | 	add	arg03, #63
2eb28     0B 01 48 FC | 	wrbyte	#0, arg03
2eb2c     0C 4E 05 F1 | 	add	fp, #12
2eb30     A7 16 C2 FA | 	rdbyte	arg03, fp
2eb34     14 4E 85 F1 | 	sub	fp, #20
2eb38     10 16 CE F7 | 	test	arg03, #16 wz
2eb3c     18 00 90 AD |  if_e	jmp	#LR__4751
2eb40     08 4E 05 F1 | 	add	fp, #8
2eb44     A7 16 02 FB | 	rdlong	arg03, fp
2eb48     08 4E 85 F1 | 	sub	fp, #8
2eb4c     50 16 06 F1 | 	add	arg03, #80
2eb50     0B 03 48 FC | 	wrbyte	#1, arg03
2eb54     14 00 90 FD | 	jmp	#LR__4752
2eb58                 | LR__4751
2eb58     08 4E 05 F1 | 	add	fp, #8
2eb5c     A7 16 02 FB | 	rdlong	arg03, fp
2eb60     08 4E 85 F1 | 	sub	fp, #8
2eb64     50 16 06 F1 | 	add	arg03, #80
2eb68     0B 01 48 FC | 	wrbyte	#0, arg03
2eb6c                 | LR__4752
2eb6c     08 4E 05 F1 | 	add	fp, #8
2eb70     A7 16 02 FB | 	rdlong	arg03, fp
2eb74     04 4E 05 F1 | 	add	fp, #4
2eb78     A7 14 02 FB | 	rdlong	arg02, fp
2eb7c     48 16 06 F1 | 	add	arg03, #72
2eb80     0B 15 62 FC | 	wrlong	arg02, arg03
2eb84     04 4E 85 F1 | 	sub	fp, #4
2eb88     A7 1E 02 FB | 	rdlong	local01, fp
2eb8c     08 4E 05 F1 | 	add	fp, #8
2eb90     A7 12 E2 FA | 	rdword	arg01, fp
2eb94     02 4E 05 F1 | 	add	fp, #2
2eb98     A7 14 E2 FA | 	rdword	arg02, fp
2eb9c     12 4E 85 F1 | 	sub	fp, #18
2eba0     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0961
2eba4     4C 1E 06 F1 | 	add	local01, #76
2eba8     0F FB 61 FC | 	wrlong	result1, local01
2ebac                 | '         ent->d_type =  (0) ;
2ebac                 | '     }
2ebac                 | '     ent->d_size = finfo.fsize;
2ebac                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ebac                 | '     return 0;
2ebac     00 FA 05 F6 | 	mov	result1, #0
2ebb0                 | LR__4753
2ebb0     A7 F0 03 F6 | 	mov	ptra, fp
2ebb4     B2 00 A0 FD | 	call	#popregs_
2ebb8                 | _fatfs_cc_v_readdir_ret
2ebb8     2D 00 64 FD | 	ret
2ebbc                 | 
2ebbc                 | _fatfs_cc_v_stat
2ebbc     03 4A 05 F6 | 	mov	COUNT_, #3
2ebc0     A8 00 A0 FD | 	call	#pushregs_
2ebc4     30 F1 07 F1 | 	add	ptra, #304
2ebc8     04 4E 05 F1 | 	add	fp, #4
2ebcc     A7 12 62 FC | 	wrlong	arg01, fp
2ebd0     04 4E 05 F1 | 	add	fp, #4
2ebd4     A7 14 62 FC | 	wrlong	arg02, fp
2ebd8     08 4E 85 F1 | 	sub	fp, #8
2ebdc     0A 13 02 F6 | 	mov	arg01, arg02
2ebe0     00 14 06 F6 | 	mov	arg02, #0
2ebe4     30 16 06 F6 | 	mov	arg03, #48
2ebe8     98 00 A0 FD | 	call	#\builtin_bytefill_
2ebec     04 4E 05 F1 | 	add	fp, #4
2ebf0     A7 FA 01 FB | 	rdlong	result1, fp
2ebf4     04 4E 85 F1 | 	sub	fp, #4
2ebf8     FD FA C9 FA | 	rdbyte	result1, result1 wz
2ebfc     2C 00 90 AD |  if_e	jmp	#LR__4760
2ec00     04 4E 05 F1 | 	add	fp, #4
2ec04     A7 FA 01 FB | 	rdlong	result1, fp
2ec08     04 4E 85 F1 | 	sub	fp, #4
2ec0c     FD FA C1 FA | 	rdbyte	result1, result1
2ec10     2E FA 0D F2 | 	cmp	result1, #46 wz
2ec14     04 4E 05 A1 |  if_e	add	fp, #4
2ec18     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ec1c     04 4E 85 A1 |  if_e	sub	fp, #4
2ec20     01 1E 06 A1 |  if_e	add	local01, #1
2ec24     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2ec28     18 00 90 5D |  if_ne	jmp	#LR__4761
2ec2c                 | LR__4760
2ec2c     18 4E 05 F1 | 	add	fp, #24
2ec30     A7 20 48 FC | 	wrbyte	#16, fp
2ec34     0C 4E 85 F1 | 	sub	fp, #12
2ec38     A7 00 68 FC | 	wrlong	#0, fp
2ec3c     0C 4E 85 F1 | 	sub	fp, #12
2ec40     24 00 90 FD | 	jmp	#LR__4762
2ec44                 | LR__4761
2ec44     04 4E 05 F1 | 	add	fp, #4
2ec48     A7 12 02 FB | 	rdlong	arg01, fp
2ec4c     0C 4E 05 F1 | 	add	fp, #12
2ec50     A7 14 02 F6 | 	mov	arg02, fp
2ec54     10 4E 85 F1 | 	sub	fp, #16
2ec58     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2ec5c     0C 4E 05 F1 | 	add	fp, #12
2ec60     A7 FA 61 FC | 	wrlong	result1, fp
2ec64     0C 4E 85 F1 | 	sub	fp, #12
2ec68                 | LR__4762
2ec68     0C 4E 05 F1 | 	add	fp, #12
2ec6c     A7 20 0A FB | 	rdlong	local02, fp wz
2ec70     0C 4E 85 F1 | 	sub	fp, #12
2ec74     14 00 90 AD |  if_e	jmp	#LR__4763
2ec78                 | '         return _set_dos_error(r);
2ec78     0C 4E 05 F1 | 	add	fp, #12
2ec7c     A7 12 02 FB | 	rdlong	arg01, fp
2ec80     0C 4E 85 F1 | 	sub	fp, #12
2ec84     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2ec88     14 01 90 FD | 	jmp	#LR__4764
2ec8c                 | LR__4763
2ec8c     2C 4F 05 F1 | 	add	fp, #300
2ec90     A7 48 6A FC | 	wrlong	#292, fp
2ec94     14 4F 85 F1 | 	sub	fp, #276
2ec98     A7 22 C2 FA | 	rdbyte	local03, fp
2ec9c     18 4E 85 F1 | 	sub	fp, #24
2eca0     01 22 CE F7 | 	test	local03, #1 wz
2eca4     2C 4F 05 A1 |  if_e	add	fp, #300
2eca8     A7 22 02 AB |  if_e	rdlong	local03, fp
2ecac     92 22 46 A5 |  if_e	or	local03, #146
2ecb0     A7 22 62 AC |  if_e	wrlong	local03, fp
2ecb4     2C 4F 85 A1 |  if_e	sub	fp, #300
2ecb8     18 4E 05 F1 | 	add	fp, #24
2ecbc     A7 22 C2 FA | 	rdbyte	local03, fp
2ecc0     18 4E 85 F1 | 	sub	fp, #24
2ecc4     10 22 CE F7 | 	test	local03, #16 wz
2ecc8     2C 4F 05 51 |  if_ne	add	fp, #300
2eccc     A7 22 02 5B |  if_ne	rdlong	local03, fp
2ecd0     08 00 00 5F 
2ecd4     49 22 46 55 |  if_ne	or	local03, ##4169
2ecd8     A7 22 62 5C |  if_ne	wrlong	local03, fp
2ecdc     2C 4F 85 51 |  if_ne	sub	fp, #300
2ece0     08 4E 05 F1 | 	add	fp, #8
2ece4     A7 22 02 FB | 	rdlong	local03, fp
2ece8     24 4F 05 F1 | 	add	fp, #292
2ecec     A7 20 02 FB | 	rdlong	local02, fp
2ecf0     08 22 06 F1 | 	add	local03, #8
2ecf4     11 21 62 FC | 	wrlong	local02, local03
2ecf8     24 4F 85 F1 | 	sub	fp, #292
2ecfc     A7 22 02 FB | 	rdlong	local03, fp
2ed00     0C 22 06 F1 | 	add	local03, #12
2ed04     11 03 68 FC | 	wrlong	#1, local03
2ed08     A7 22 02 FB | 	rdlong	local03, fp
2ed0c     08 4E 05 F1 | 	add	fp, #8
2ed10     A7 20 02 FB | 	rdlong	local02, fp
2ed14     18 22 06 F1 | 	add	local03, #24
2ed18     11 21 62 FC | 	wrlong	local02, local03
2ed1c     08 4E 85 F1 | 	sub	fp, #8
2ed20     A7 22 02 FB | 	rdlong	local03, fp
2ed24     1C 22 06 F1 | 	add	local03, #28
2ed28     01 00 80 FF 
2ed2c     11 01 68 FC | 	wrlong	##512, local03
2ed30     A7 20 02 FB | 	rdlong	local02, fp
2ed34     10 23 02 F6 | 	mov	local03, local02
2ed38     18 20 06 F1 | 	add	local02, #24
2ed3c     10 21 02 FB | 	rdlong	local02, local02
2ed40     FF 21 06 F1 | 	add	local02, #511
2ed44     10 21 52 F6 | 	abs	local02, local02 wc
2ed48     09 20 46 F0 | 	shr	local02, #9
2ed4c     10 21 82 F6 | 	negc	local02, local02
2ed50     20 22 06 F1 | 	add	local03, #32
2ed54     11 21 62 FC | 	wrlong	local02, local03
2ed58     A7 20 02 FB | 	rdlong	local02, fp
2ed5c     10 23 02 F6 | 	mov	local03, local02
2ed60     10 1F 02 F6 | 	mov	local01, local02
2ed64     0C 4E 05 F1 | 	add	fp, #12
2ed68     A7 12 E2 FA | 	rdword	arg01, fp
2ed6c     02 4E 05 F1 | 	add	fp, #2
2ed70     A7 14 E2 FA | 	rdword	arg02, fp
2ed74     16 4E 85 F1 | 	sub	fp, #22
2ed78     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0961
2ed7c     2C 1E 06 F1 | 	add	local01, #44
2ed80     0F FB 61 FC | 	wrlong	result1, local01
2ed84     28 20 06 F1 | 	add	local02, #40
2ed88     10 FB 61 FC | 	wrlong	result1, local02
2ed8c     24 22 06 F1 | 	add	local03, #36
2ed90     11 FB 61 FC | 	wrlong	result1, local03
2ed94                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2ed94                 | '     }
2ed94                 | '     buf->st_mode = mode;
2ed94                 | '     buf->st_nlink = 1;
2ed94                 | '     buf->st_size = finfo.fsize;
2ed94                 | '     buf->st_blksize = 512;
2ed94                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2ed94                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2ed94                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ed94                 | '     return r;
2ed94     0C 4E 05 F1 | 	add	fp, #12
2ed98     A7 FA 01 FB | 	rdlong	result1, fp
2ed9c     0C 4E 85 F1 | 	sub	fp, #12
2eda0                 | LR__4764
2eda0     A7 F0 03 F6 | 	mov	ptra, fp
2eda4     B2 00 A0 FD | 	call	#popregs_
2eda8                 | _fatfs_cc_v_stat_ret
2eda8     2D 00 64 FD | 	ret
2edac                 | 
2edac                 | _fatfs_cc_v_read
2edac     00 4A 05 F6 | 	mov	COUNT_, #0
2edb0     A8 00 A0 FD | 	call	#pushregs_
2edb4     1C F0 07 F1 | 	add	ptra, #28
2edb8     04 4E 05 F1 | 	add	fp, #4
2edbc     A7 12 62 FC | 	wrlong	arg01, fp
2edc0     04 4E 05 F1 | 	add	fp, #4
2edc4     A7 14 62 FC | 	wrlong	arg02, fp
2edc8     04 4E 05 F1 | 	add	fp, #4
2edcc     A7 16 62 FC | 	wrlong	arg03, fp
2edd0     08 4E 85 F1 | 	sub	fp, #8
2edd4     A7 12 02 FB | 	rdlong	arg01, fp
2edd8     09 13 0A FB | 	rdlong	arg01, arg01 wz
2eddc     0C 4E 05 F1 | 	add	fp, #12
2ede0     A7 12 62 FC | 	wrlong	arg01, fp
2ede4     10 4E 85 F1 | 	sub	fp, #16
2ede8                 | '         return _seterror( 5 );
2ede8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2edec     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2edf0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2edf4     01 FA 65 A6 |  if_e	neg	result1, #1
2edf8     B8 00 90 AD |  if_e	jmp	#LR__4772
2edfc     10 4E 05 F1 | 	add	fp, #16
2ee00     A7 12 02 FB | 	rdlong	arg01, fp
2ee04     02 00 00 FF 
2ee08     14 12 06 F1 | 	add	arg01, ##1044
2ee0c     08 4E 85 F1 | 	sub	fp, #8
2ee10     A7 14 02 FB | 	rdlong	arg02, fp
2ee14     04 4E 05 F1 | 	add	fp, #4
2ee18     A7 16 02 FB | 	rdlong	arg03, fp
2ee1c     0C 4E 05 F1 | 	add	fp, #12
2ee20     A7 18 02 F6 | 	mov	arg04, fp
2ee24     18 4E 85 F1 | 	sub	fp, #24
2ee28     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2ee2c     14 4E 05 F1 | 	add	fp, #20
2ee30     A7 FA 61 FC | 	wrlong	result1, fp
2ee34     14 4E 85 F1 | 	sub	fp, #20
2ee38     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee3c     34 00 90 AD |  if_e	jmp	#LR__4770
2ee40     04 4E 05 F1 | 	add	fp, #4
2ee44     A7 18 02 FB | 	rdlong	arg04, fp
2ee48     0C 17 02 F6 | 	mov	arg03, arg04
2ee4c     08 18 06 F1 | 	add	arg04, #8
2ee50     0C 19 02 FB | 	rdlong	arg04, arg04
2ee54     20 18 46 F5 | 	or	arg04, #32
2ee58     08 16 06 F1 | 	add	arg03, #8
2ee5c     0B 19 62 FC | 	wrlong	arg04, arg03
2ee60                 | '         fil->state |=  (0x20) ;
2ee60                 | '         return _set_dos_error(r);
2ee60     10 4E 05 F1 | 	add	fp, #16
2ee64     A7 12 02 FB | 	rdlong	arg01, fp
2ee68     14 4E 85 F1 | 	sub	fp, #20
2ee6c     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2ee70     40 00 90 FD | 	jmp	#LR__4772
2ee74                 | LR__4770
2ee74     18 4E 05 F1 | 	add	fp, #24
2ee78     A7 FA 09 FB | 	rdlong	result1, fp wz
2ee7c     18 4E 85 F1 | 	sub	fp, #24
2ee80     24 00 90 5D |  if_ne	jmp	#LR__4771
2ee84     04 4E 05 F1 | 	add	fp, #4
2ee88     A7 FA 01 FB | 	rdlong	result1, fp
2ee8c     FD 18 02 F6 | 	mov	arg04, result1
2ee90     04 4E 85 F1 | 	sub	fp, #4
2ee94     08 FA 05 F1 | 	add	result1, #8
2ee98     FD FA 01 FB | 	rdlong	result1, result1
2ee9c     10 FA 45 F5 | 	or	result1, #16
2eea0     08 18 06 F1 | 	add	arg04, #8
2eea4     0C FB 61 FC | 	wrlong	result1, arg04
2eea8                 | LR__4771
2eea8                 | '         fil->state |=  (0x10) ;
2eea8                 | '     }
2eea8                 | '     return x;
2eea8     18 4E 05 F1 | 	add	fp, #24
2eeac     A7 FA 01 FB | 	rdlong	result1, fp
2eeb0     18 4E 85 F1 | 	sub	fp, #24
2eeb4                 | LR__4772
2eeb4     A7 F0 03 F6 | 	mov	ptra, fp
2eeb8     B2 00 A0 FD | 	call	#popregs_
2eebc                 | _fatfs_cc_v_read_ret
2eebc     2D 00 64 FD | 	ret
2eec0                 | 
2eec0                 | _fatfs_cc_v_write
2eec0     00 4A 05 F6 | 	mov	COUNT_, #0
2eec4     A8 00 A0 FD | 	call	#pushregs_
2eec8     1C F0 07 F1 | 	add	ptra, #28
2eecc     04 4E 05 F1 | 	add	fp, #4
2eed0     A7 12 62 FC | 	wrlong	arg01, fp
2eed4     04 4E 05 F1 | 	add	fp, #4
2eed8     A7 14 62 FC | 	wrlong	arg02, fp
2eedc     04 4E 05 F1 | 	add	fp, #4
2eee0     A7 16 62 FC | 	wrlong	arg03, fp
2eee4     08 4E 85 F1 | 	sub	fp, #8
2eee8     A7 12 02 FB | 	rdlong	arg01, fp
2eeec     09 13 0A FB | 	rdlong	arg01, arg01 wz
2eef0     0C 4E 05 F1 | 	add	fp, #12
2eef4     A7 12 62 FC | 	wrlong	arg01, fp
2eef8     10 4E 85 F1 | 	sub	fp, #16
2eefc                 | '         return _seterror( 5 );
2eefc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ef00     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ef04     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ef08     01 FA 65 A6 |  if_e	neg	result1, #1
2ef0c     84 00 90 AD |  if_e	jmp	#LR__4781
2ef10     10 4E 05 F1 | 	add	fp, #16
2ef14     A7 12 02 FB | 	rdlong	arg01, fp
2ef18     02 00 00 FF 
2ef1c     14 12 06 F1 | 	add	arg01, ##1044
2ef20     08 4E 85 F1 | 	sub	fp, #8
2ef24     A7 14 02 FB | 	rdlong	arg02, fp
2ef28     04 4E 05 F1 | 	add	fp, #4
2ef2c     A7 16 02 FB | 	rdlong	arg03, fp
2ef30     0C 4E 05 F1 | 	add	fp, #12
2ef34     A7 18 02 F6 | 	mov	arg04, fp
2ef38     18 4E 85 F1 | 	sub	fp, #24
2ef3c     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2ef40     14 4E 05 F1 | 	add	fp, #20
2ef44     A7 FA 61 FC | 	wrlong	result1, fp
2ef48     14 4E 85 F1 | 	sub	fp, #20
2ef4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef50     34 00 90 AD |  if_e	jmp	#LR__4780
2ef54     04 4E 05 F1 | 	add	fp, #4
2ef58     A7 18 02 FB | 	rdlong	arg04, fp
2ef5c     0C 17 02 F6 | 	mov	arg03, arg04
2ef60     08 18 06 F1 | 	add	arg04, #8
2ef64     0C 19 02 FB | 	rdlong	arg04, arg04
2ef68     20 18 46 F5 | 	or	arg04, #32
2ef6c     08 16 06 F1 | 	add	arg03, #8
2ef70     0B 19 62 FC | 	wrlong	arg04, arg03
2ef74                 | '         fil->state |=  (0x20) ;
2ef74                 | '         return _set_dos_error(r);
2ef74     10 4E 05 F1 | 	add	fp, #16
2ef78     A7 12 02 FB | 	rdlong	arg01, fp
2ef7c     14 4E 85 F1 | 	sub	fp, #20
2ef80     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2ef84     0C 00 90 FD | 	jmp	#LR__4781
2ef88                 | LR__4780
2ef88                 | '     }
2ef88                 | '     return x;
2ef88     18 4E 05 F1 | 	add	fp, #24
2ef8c     A7 FA 01 FB | 	rdlong	result1, fp
2ef90     18 4E 85 F1 | 	sub	fp, #24
2ef94                 | LR__4781
2ef94     A7 F0 03 F6 | 	mov	ptra, fp
2ef98     B2 00 A0 FD | 	call	#popregs_
2ef9c                 | _fatfs_cc_v_write_ret
2ef9c     2D 00 64 FD | 	ret
2efa0                 | 
2efa0                 | _fatfs_cc_v_lseek
2efa0     04 4A 05 F6 | 	mov	COUNT_, #4
2efa4     A8 00 A0 FD | 	call	#pushregs_
2efa8     0A 1F 02 F6 | 	mov	local01, arg02
2efac     0B 21 02 F6 | 	mov	local02, arg03
2efb0     09 23 02 FB | 	rdlong	local03, arg01
2efb4     02 00 00 FF 
2efb8     14 22 0E F1 | 	add	local03, ##1044 wz
2efbc                 | '         return _seterror( 5 );
2efbc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2efc0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2efc4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2efc8     01 FA 65 A6 |  if_e	neg	result1, #1
2efcc     4C 00 90 AD |  if_e	jmp	#LR__4792
2efd0     00 20 0E F2 | 	cmp	local02, #0 wz
2efd4     24 00 90 AD |  if_e	jmp	#LR__4790
2efd8     01 20 0E F2 | 	cmp	local02, #1 wz
2efdc     14 22 06 A1 |  if_e	add	local03, #20
2efe0     11 25 02 AB |  if_e	rdlong	local04, local03
2efe4     14 22 86 A1 |  if_e	sub	local03, #20
2efe8     12 1F 02 A1 |  if_e	add	local01, local04
2efec     0C 22 06 51 |  if_ne	add	local03, #12
2eff0     11 25 02 5B |  if_ne	rdlong	local04, local03
2eff4     0C 22 86 51 |  if_ne	sub	local03, #12
2eff8     12 1F 02 51 |  if_ne	add	local01, local04
2effc                 | LR__4790
2effc     0F 15 02 F6 | 	mov	arg02, local01
2f000     11 13 02 F6 | 	mov	arg01, local03
2f004     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f008     FD 12 0A F6 | 	mov	arg01, result1 wz
2f00c     08 00 90 AD |  if_e	jmp	#LR__4791
2f010                 | '         return _set_dos_error(result);
2f010     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f014     04 00 90 FD | 	jmp	#LR__4792
2f018                 | LR__4791
2f018                 | '     }
2f018                 | '     return offset;
2f018     0F FB 01 F6 | 	mov	result1, local01
2f01c                 | LR__4792
2f01c     A7 F0 03 F6 | 	mov	ptra, fp
2f020     B2 00 A0 FD | 	call	#popregs_
2f024                 | _fatfs_cc_v_lseek_ret
2f024     2D 00 64 FD | 	ret
2f028                 | 
2f028                 | _fatfs_cc_v_ioctl
2f028                 | ' {
2f028                 | '     return _seterror( 10 );
2f028     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f02c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f030     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f034     01 FA 65 F6 | 	neg	result1, #1
2f038                 | _fatfs_cc_v_ioctl_ret
2f038     2D 00 64 FD | 	ret
2f03c                 | 
2f03c                 | _fatfs_cc_v_mkdir
2f03c     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f040     FD 12 02 F6 | 	mov	arg01, result1
2f044                 | ' 
2f044                 | '     r = f_mkdir(name);
2f044                 | '     return _set_dos_error(r);
2f044     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f048                 | _fatfs_cc_v_mkdir_ret
2f048     2D 00 64 FD | 	ret
2f04c                 | 
2f04c                 | _fatfs_cc_v_remove
2f04c     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f050     FD 12 02 F6 | 	mov	arg01, result1
2f054                 | ' 
2f054                 | '     r = f_unlink(name);
2f054                 | '     return _set_dos_error(r);
2f054     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f058                 | _fatfs_cc_v_remove_ret
2f058     2D 00 64 FD | 	ret
2f05c                 | 
2f05c                 | _fatfs_cc_v_rmdir
2f05c     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f060     FD 12 02 F6 | 	mov	arg01, result1
2f064                 | ' 
2f064                 | '     r = f_unlink(name);
2f064                 | '     return _set_dos_error(r);
2f064     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f068                 | _fatfs_cc_v_rmdir_ret
2f068     2D 00 64 FD | 	ret
2f06c                 | 
2f06c                 | _fatfs_cc_v_rename
2f06c     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f070     FD 12 02 F6 | 	mov	arg01, result1
2f074                 | '     return _set_dos_error(r);
2f074     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f078                 | _fatfs_cc_v_rename_ret
2f078     2D 00 64 FD | 	ret
2f07c                 | 
2f07c                 | _fatfs_cc_v_open
2f07c     07 4A 05 F6 | 	mov	COUNT_, #7
2f080     A8 00 A0 FD | 	call	#pushregs_
2f084     09 1F 02 F6 | 	mov	local01, arg01
2f088     0A 21 02 F6 | 	mov	local02, arg02
2f08c     0B 23 02 F6 | 	mov	local03, arg03
2f090     03 00 00 FF 
2f094     3C 12 06 F6 | 	mov	arg01, ##1596
2f098                 | '     return _gc_alloc(size);
2f098     10 14 06 F6 | 	mov	arg02, #16
2f09c     9C 56 BF FD | 	call	#__system___gc_doalloc
2f0a0     FD 24 0A F6 | 	mov	local04, result1 wz
2f0a4                 | '       return _seterror( 7 );
2f0a4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f0a8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f0ac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f0b0     01 FA 65 A6 |  if_e	neg	result1, #1
2f0b4     98 00 90 AD |  if_e	jmp	#LR__4806
2f0b8     12 13 02 F6 | 	mov	arg01, local04
2f0bc     00 14 06 F6 | 	mov	arg02, #0
2f0c0     03 00 00 FF 
2f0c4     3C 16 06 F6 | 	mov	arg03, ##1596
2f0c8     98 00 A0 FD | 	call	#\builtin_bytefill_
2f0cc                 | '   switch (flags & 3) {
2f0cc     11 27 02 F6 | 	mov	local05, local03
2f0d0     03 26 0E F5 | 	and	local05, #3 wz
2f0d4     0C 00 90 AD |  if_e	jmp	#LR__4800
2f0d8     01 26 0E F2 | 	cmp	local05, #1 wz
2f0dc     0C 00 90 AD |  if_e	jmp	#LR__4801
2f0e0     10 00 90 FD | 	jmp	#LR__4802
2f0e4                 | LR__4800
2f0e4     01 28 06 F6 | 	mov	local06, #1
2f0e8                 | '       fs_flags =  0x01 ;
2f0e8                 | '       break;
2f0e8     0C 00 90 FD | 	jmp	#LR__4803
2f0ec                 | LR__4801
2f0ec     02 28 06 F6 | 	mov	local06, #2
2f0f0                 | '       fs_flags =  0x02 ;
2f0f0                 | '       break;
2f0f0     04 00 90 FD | 	jmp	#LR__4803
2f0f4                 | LR__4802
2f0f4     03 28 06 F6 | 	mov	local06, #3
2f0f8                 | '       fs_flags =  0x01  |  0x02 ;
2f0f8                 | '       break;
2f0f8                 | LR__4803
2f0f8     08 22 CE F7 | 	test	local03, #8 wz
2f0fc     18 28 46 55 |  if_ne	or	local06, #24
2f100     08 00 90 5D |  if_ne	jmp	#LR__4804
2f104     20 22 CE F7 | 	test	local03, #32 wz
2f108     30 28 46 55 |  if_ne	or	local06, #48
2f10c                 | LR__4804
2f10c     02 00 00 FF 
2f110     14 24 06 F1 | 	add	local04, ##1044
2f114     12 13 02 F6 | 	mov	arg01, local04
2f118     02 00 00 FF 
2f11c     14 24 86 F1 | 	sub	local04, ##1044
2f120     10 15 02 F6 | 	mov	arg02, local02
2f124     14 17 02 F6 | 	mov	arg03, local06
2f128     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f12c     FD 2A 0A F6 | 	mov	local07, result1 wz
2f130     14 00 90 AD |  if_e	jmp	#LR__4805
2f134     12 13 02 F6 | 	mov	arg01, local04
2f138                 | '     return _gc_free(ptr);
2f138     0C 57 BF FD | 	call	#__system___gc_free
2f13c                 | '     free(f);
2f13c                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f13c                 | '     return _set_dos_error(r);
2f13c     15 13 02 F6 | 	mov	arg01, local07
2f140     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f144     08 00 90 FD | 	jmp	#LR__4806
2f148                 | LR__4805
2f148     0F 25 62 FC | 	wrlong	local04, local01
2f14c                 | '   }
2f14c                 | '   fil->vfsdata = f;
2f14c                 | '   return 0;
2f14c     00 FA 05 F6 | 	mov	result1, #0
2f150                 | LR__4806
2f150     A7 F0 03 F6 | 	mov	ptra, fp
2f154     B2 00 A0 FD | 	call	#popregs_
2f158                 | _fatfs_cc_v_open_ret
2f158     2D 00 64 FD | 	ret
2f15c                 | 
2f15c                 | _fatfs_cc_v_flush
2f15c     09 13 02 FB | 	rdlong	arg01, arg01
2f160     02 00 00 FF 
2f164     14 12 0E F1 | 	add	arg01, ##1044 wz
2f168                 | '         return _seterror( 5 );
2f168     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f16c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f170     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f174     01 FA 65 A6 |  if_e	neg	result1, #1
2f178     0C 00 90 AD |  if_e	jmp	#LR__4810
2f17c     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f180     FD 12 02 F6 | 	mov	arg01, result1
2f184                 | '     }
2f184                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f184                 | '     result = f_sync(f);
2f184                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f184                 | '     return _set_dos_error(result);
2f184     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0963
2f188                 | LR__4810
2f188                 | _fatfs_cc_v_flush_ret
2f188     2D 00 64 FD | 	ret
2f18c                 | 
2f18c                 | _fatfs_cc_v_init
2f18c                 | ' {
2f18c                 | '     return 0;
2f18c     00 FA 05 F6 | 	mov	result1, #0
2f190                 | _fatfs_cc_v_init_ret
2f190     2D 00 64 FD | 	ret
2f194                 | 
2f194                 | _fatfs_cc_v_deinit
2f194     80 01 00 FF 
2f198     08 15 06 F6 | 	mov	arg02, ##@LR__5006
2f19c     00 12 06 F6 | 	mov	arg01, #0
2f1a0     00 16 06 F6 | 	mov	arg03, #0
2f1a4     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f1a8     01 00 00 FF 
2f1ac     08 E4 05 F1 | 	add	objptr, ##520
2f1b0     F2 12 02 FB | 	rdlong	arg01, objptr
2f1b4     04 E4 05 F1 | 	add	objptr, #4
2f1b8     F2 14 02 FB | 	rdlong	arg02, objptr
2f1bc     01 00 00 FF 
2f1c0     0C E4 85 F1 | 	sub	objptr, ##524
2f1c4     F0 3D BF FD | 	call	#__system___freepins
2f1c8                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f1c8                 | '     _freepins(f_pinmask);
2f1c8                 | '     return 0;
2f1c8     00 FA 05 F6 | 	mov	result1, #0
2f1cc                 | _fatfs_cc_v_deinit_ret
2f1cc     2D 00 64 FD | 	ret
2f1d0                 | 
2f1d0                 | _fatfs_cc_get_vfs
2f1d0     01 4A 05 F6 | 	mov	COUNT_, #1
2f1d4     A8 00 A0 FD | 	call	#pushregs_
2f1d8     09 1F 02 F6 | 	mov	local01, arg01
2f1dc     50 12 06 F6 | 	mov	arg01, #80
2f1e0     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f1e4     FD 12 02 F6 | 	mov	arg01, result1
2f1e8     F2 FA 01 F6 | 	mov	result1, objptr
2f1ec     00 E0 04 FF 
2f1f0     00 FA 45 F5 | 	or	result1, ##163577856
2f1f4     09 FB 61 FC | 	wrlong	result1, arg01
2f1f8     F2 FA 01 F6 | 	mov	result1, objptr
2f1fc     00 E8 04 FF 
2f200     00 FA 45 F5 | 	or	result1, ##164626432
2f204     04 12 06 F1 | 	add	arg01, #4
2f208     09 FB 61 FC | 	wrlong	result1, arg01
2f20c     F2 FA 01 F6 | 	mov	result1, objptr
2f210     00 F0 04 FF 
2f214     00 FA 45 F5 | 	or	result1, ##165675008
2f218     04 12 06 F1 | 	add	arg01, #4
2f21c     09 FB 61 FC | 	wrlong	result1, arg01
2f220     F2 FA 01 F6 | 	mov	result1, objptr
2f224     00 F8 04 FF 
2f228     00 FA 45 F5 | 	or	result1, ##166723584
2f22c     04 12 06 F1 | 	add	arg01, #4
2f230     09 FB 61 FC | 	wrlong	result1, arg01
2f234     F2 FA 01 F6 | 	mov	result1, objptr
2f238     00 00 05 FF 
2f23c     00 FA 45 F5 | 	or	result1, ##167772160
2f240     04 12 06 F1 | 	add	arg01, #4
2f244     09 FB 61 FC | 	wrlong	result1, arg01
2f248     04 12 06 F1 | 	add	arg01, #4
2f24c     09 01 68 FC | 	wrlong	#0, arg01
2f250     04 12 06 F1 | 	add	arg01, #4
2f254     09 1F 62 FC | 	wrlong	local01, arg01
2f258     04 12 06 F1 | 	add	arg01, #4
2f25c     09 01 68 FC | 	wrlong	#0, arg01
2f260     F2 FA 01 F6 | 	mov	result1, objptr
2f264     00 08 05 FF 
2f268     00 FA 45 F5 | 	or	result1, ##168820736
2f26c     04 12 06 F1 | 	add	arg01, #4
2f270     09 FB 61 FC | 	wrlong	result1, arg01
2f274     F2 FA 01 F6 | 	mov	result1, objptr
2f278     00 10 05 FF 
2f27c     00 FA 45 F5 | 	or	result1, ##169869312
2f280     04 12 06 F1 | 	add	arg01, #4
2f284     09 FB 61 FC | 	wrlong	result1, arg01
2f288     F2 FA 01 F6 | 	mov	result1, objptr
2f28c     00 18 05 FF 
2f290     00 FA 45 F5 | 	or	result1, ##170917888
2f294     04 12 06 F1 | 	add	arg01, #4
2f298     09 FB 61 FC | 	wrlong	result1, arg01
2f29c     F2 FA 01 F6 | 	mov	result1, objptr
2f2a0     00 20 05 FF 
2f2a4     00 FA 45 F5 | 	or	result1, ##171966464
2f2a8     04 12 06 F1 | 	add	arg01, #4
2f2ac     09 FB 61 FC | 	wrlong	result1, arg01
2f2b0     F2 FA 01 F6 | 	mov	result1, objptr
2f2b4     00 28 05 FF 
2f2b8     00 FA 45 F5 | 	or	result1, ##173015040
2f2bc     04 12 06 F1 | 	add	arg01, #4
2f2c0     09 FB 61 FC | 	wrlong	result1, arg01
2f2c4     F2 FA 01 F6 | 	mov	result1, objptr
2f2c8     00 30 05 FF 
2f2cc     00 FA 45 F5 | 	or	result1, ##174063616
2f2d0     04 12 06 F1 | 	add	arg01, #4
2f2d4     09 FB 61 FC | 	wrlong	result1, arg01
2f2d8     F2 FA 01 F6 | 	mov	result1, objptr
2f2dc     00 38 05 FF 
2f2e0     00 FA 45 F5 | 	or	result1, ##175112192
2f2e4     04 12 06 F1 | 	add	arg01, #4
2f2e8     09 FB 61 FC | 	wrlong	result1, arg01
2f2ec     F2 FA 01 F6 | 	mov	result1, objptr
2f2f0     00 40 05 FF 
2f2f4     00 FA 45 F5 | 	or	result1, ##176160768
2f2f8     04 12 06 F1 | 	add	arg01, #4
2f2fc     09 FB 61 FC | 	wrlong	result1, arg01
2f300     F2 FA 01 F6 | 	mov	result1, objptr
2f304     00 48 05 FF 
2f308     00 FA 45 F5 | 	or	result1, ##177209344
2f30c     04 12 06 F1 | 	add	arg01, #4
2f310     09 FB 61 FC | 	wrlong	result1, arg01
2f314     F2 FA 01 F6 | 	mov	result1, objptr
2f318     00 50 05 FF 
2f31c     00 FA 45 F5 | 	or	result1, ##178257920
2f320     04 12 06 F1 | 	add	arg01, #4
2f324     09 FB 61 FC | 	wrlong	result1, arg01
2f328     F2 FA 01 F6 | 	mov	result1, objptr
2f32c     00 58 05 FF 
2f330     00 FA 45 F5 | 	or	result1, ##179306496
2f334     04 12 06 F1 | 	add	arg01, #4
2f338     09 FB 61 FC | 	wrlong	result1, arg01
2f33c     F2 FA 01 F6 | 	mov	result1, objptr
2f340     00 60 05 FF 
2f344     00 FA 45 F5 | 	or	result1, ##180355072
2f348     04 12 06 F1 | 	add	arg01, #4
2f34c     09 FB 61 FC | 	wrlong	result1, arg01
2f350     4C 12 86 F1 | 	sub	arg01, #76
2f354                 | ' 
2f354                 | '     v->close = &v_close;
2f354                 | '     v->read = &v_read;
2f354                 | '     v->write = &v_write;
2f354                 | '     v->lseek = &v_lseek;
2f354                 | '     v->ioctl = &v_ioctl;
2f354                 | '     v->flush = 0;
2f354                 | '     v->vfs_data = ptr;
2f354                 | '     v->reserved = 0;
2f354                 | ' 
2f354                 | '     v->open = &v_open;
2f354                 | '     v->creat = &v_creat;
2f354                 | '     v->opendir = &v_opendir;
2f354                 | '     v->closedir = &v_closedir;
2f354                 | '     v->readdir = &v_readdir;
2f354                 | '     v->stat = &v_stat;
2f354                 | ' 
2f354                 | '     v->mkdir = &v_mkdir;
2f354                 | '     v->rmdir = &v_rmdir;
2f354                 | ' 
2f354                 | '     v->remove = &v_remove;
2f354                 | '     v->rename = &v_rename;
2f354                 | ' 
2f354                 | '     v->init = &v_init;
2f354                 | '     v->deinit = &v_deinit;
2f354                 | ' 
2f354                 | '     return v;
2f354     09 FB 01 F6 | 	mov	result1, arg01
2f358     A7 F0 03 F6 | 	mov	ptra, fp
2f35c     B2 00 A0 FD | 	call	#popregs_
2f360                 | _fatfs_cc_get_vfs_ret
2f360     2D 00 64 FD | 	ret
2f364                 | 
2f364                 | _fatfs_cc_xmit_mmc_1110
2f364     01 00 00 FF 
2f368     10 E4 05 F1 | 	add	objptr, ##528
2f36c     F2 00 02 FB | 	rdlong	_var01, objptr
2f370     08 E4 05 F1 | 	add	objptr, #8
2f374     F2 02 02 FB | 	rdlong	_var02, objptr
2f378     01 00 00 FF 
2f37c     18 E4 85 F1 | 	sub	objptr, ##536
2f380     40 02 62 FD | 	dirl	_var02
2f384     28 02 64 FD | 	setq	#1
2f388     09 05 02 FB | 	rdlong	_var03, arg01
2f38c     69 04 62 FD | 	rev	_var03
2f390     1B 04 FE F9 | 	movbyts	_var03, #27
2f394     01 05 22 FC | 	wypin	_var03, _var02
2f398     0A 05 02 F6 | 	mov	_var03, arg02
2f39c     02 14 4E F0 | 	shr	arg02, #2 wz
2f3a0     03 04 66 F0 | 	shl	_var03, #3
2f3a4     00 05 22 FC | 	wypin	_var03, _var01
2f3a8     41 02 62 FD | 	dirh	_var02
2f3ac     08 12 06 F1 | 	add	arg01, #8
2f3b0     69 06 62 FD | 	rev	_var04
2f3b4     1B 06 FE F9 | 	movbyts	_var04, #27
2f3b8                 | LR__4820
2f3b8     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f3bc     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f3c0     04 12 06 51 |  if_ne	add	arg01, #4
2f3c4     69 06 62 5D |  if_ne	rev	_var04
2f3c8     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f3cc                 | LR__4821
2f3cc     40 02 72 5D |  if_ne	testp	_var02 wc
2f3d0     F8 FF 9F 1D |  if_a	jmp	#LR__4821
2f3d4     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4820
2f3d8                 | LR__4822
2f3d8     40 00 72 FD | 	testp	_var01 wc
2f3dc     F8 FF 9F 3D |  if_ae	jmp	#LR__4822
2f3e0     40 02 62 FD | 	dirl	_var02
2f3e4     FF FF FF FF 
2f3e8     01 FF 2B FC | 	wypin	##-1, _var02
2f3ec     41 02 62 FD | 	dirh	_var02
2f3f0                 | _fatfs_cc_xmit_mmc_1110_ret
2f3f0     2D 00 64 FD | 	ret
2f3f4                 | 
2f3f4                 | _fatfs_cc_rcvr_mmc_1117
2f3f4     01 00 00 FF 
2f3f8     10 E4 05 F1 | 	add	objptr, ##528
2f3fc     F2 00 02 FB | 	rdlong	_var01, objptr
2f400     0C E4 05 F1 | 	add	objptr, #12
2f404     F2 02 02 FB | 	rdlong	_var02, objptr
2f408     01 00 00 FF 
2f40c     1C E4 85 F1 | 	sub	objptr, ##540
2f410     01 03 08 FC | 	akpin	_var02
2f414     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f418     02 04 4E F0 | 	shr	_var03, #2 wz
2f41c     30 00 90 AD |  if_e	jmp	#LR__4832
2f420     02 07 02 F6 | 	mov	_var04, _var03
2f424     05 06 66 F0 | 	shl	_var04, #5
2f428     00 07 22 FC | 	wypin	_var04, _var01
2f42c     01 7F 18 FC | 	wxpin	#63, _var02
2f430                 | LR__4830
2f430                 | LR__4831
2f430     40 02 72 FD | 	testp	_var02 wc
2f434     F8 FF 9F 3D |  if_ae	jmp	#LR__4831
2f438     01 07 8A FA | 	rdpin	_var04, _var02
2f43c     69 06 62 FD | 	rev	_var04
2f440     1B 06 FE F9 | 	movbyts	_var04, #27
2f444     09 07 62 FC | 	wrlong	_var04, arg01
2f448     04 12 06 F1 | 	add	arg01, #4
2f44c     F8 05 6E FB | 	djnz	_var03, #LR__4830
2f450                 | LR__4832
2f450     03 14 0E F5 | 	and	arg02, #3 wz
2f454     24 00 90 AD |  if_e	jmp	#LR__4835
2f458     01 4F 18 FC | 	wxpin	#39, _var02
2f45c                 | LR__4833
2f45c     00 11 28 FC | 	wypin	#8, _var01
2f460                 | LR__4834
2f460     40 02 72 FD | 	testp	_var02 wc
2f464     F8 FF 9F 3D |  if_ae	jmp	#LR__4834
2f468     01 07 8A FA | 	rdpin	_var04, _var02
2f46c     69 06 62 FD | 	rev	_var04
2f470     09 07 42 FC | 	wrbyte	_var04, arg01
2f474     01 12 06 F1 | 	add	arg01, #1
2f478     F8 15 6E FB | 	djnz	arg02, #LR__4833
2f47c                 | LR__4835
2f47c                 | _fatfs_cc_rcvr_mmc_1117_ret
2f47c     2D 00 64 FD | 	ret
2f480                 | 
2f480                 | _fatfs_cc_wait_ready_1121
2f480     01 4A 05 F6 | 	mov	COUNT_, #1
2f484     A8 00 A0 FD | 	call	#pushregs_
2f488     10 F0 07 F1 | 	add	ptra, #16
2f48c     1A FA 61 FD | 	getct	result1
2f490     08 4E 05 F1 | 	add	fp, #8
2f494     A7 FA 61 FC | 	wrlong	result1, fp
2f498     14 1E 06 FB | 	rdlong	local01, #20
2f49c     01 1E 46 F0 | 	shr	local01, #1
2f4a0     04 4E 05 F1 | 	add	fp, #4
2f4a4     A7 1E 62 FC | 	wrlong	local01, fp
2f4a8     0C 4E 85 F1 | 	sub	fp, #12
2f4ac                 | ' {
2f4ac                 | ' 	BYTE d;
2f4ac                 | ' 	UINT tmr, tmout;
2f4ac                 | ' 
2f4ac                 | ' 	tmr = _cnt();
2f4ac                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f4ac                 | ' 	for(;;) {
2f4ac                 | LR__4840
2f4ac     04 4E 05 F1 | 	add	fp, #4
2f4b0     A7 12 02 F6 | 	mov	arg01, fp
2f4b4     04 4E 85 F1 | 	sub	fp, #4
2f4b8     01 14 06 F6 | 	mov	arg02, #1
2f4bc     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f4c0     04 4E 05 F1 | 	add	fp, #4
2f4c4     A7 1E C2 FA | 	rdbyte	local01, fp
2f4c8     04 4E 85 F1 | 	sub	fp, #4
2f4cc     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f4d0     01 FA 05 A6 |  if_e	mov	result1, #1
2f4d4     28 00 90 AD |  if_e	jmp	#LR__4841
2f4d8     1A FA 61 FD | 	getct	result1
2f4dc     08 4E 05 F1 | 	add	fp, #8
2f4e0     A7 1E 02 FB | 	rdlong	local01, fp
2f4e4     0F FB 81 F1 | 	sub	result1, local01
2f4e8     04 4E 05 F1 | 	add	fp, #4
2f4ec     A7 1E 02 FB | 	rdlong	local01, fp
2f4f0     0C 4E 85 F1 | 	sub	fp, #12
2f4f4     0F FB 11 F2 | 	cmp	result1, local01 wc
2f4f8     00 FA 05 36 |  if_ae	mov	result1, #0
2f4fc     AC FF 9F CD |  if_b	jmp	#LR__4840
2f500                 | LR__4841
2f500     A7 F0 03 F6 | 	mov	ptra, fp
2f504     B2 00 A0 FD | 	call	#popregs_
2f508                 | _fatfs_cc_wait_ready_1121_ret
2f508     2D 00 64 FD | 	ret
2f50c                 | 
2f50c                 | _fatfs_cc_deselect_1127
2f50c     00 4A 05 F6 | 	mov	COUNT_, #0
2f510     A8 00 A0 FD | 	call	#pushregs_
2f514     14 F0 07 F1 | 	add	ptra, #20
2f518     01 00 00 FF 
2f51c     14 E4 05 F1 | 	add	objptr, ##532
2f520     F2 14 02 FB | 	rdlong	arg02, objptr
2f524     04 4E 05 F1 | 	add	fp, #4
2f528     A7 14 62 FC | 	wrlong	arg02, fp
2f52c     04 E4 85 F1 | 	sub	objptr, #4
2f530     F2 14 02 FB | 	rdlong	arg02, objptr
2f534     04 4E 05 F1 | 	add	fp, #4
2f538     A7 14 62 FC | 	wrlong	arg02, fp
2f53c     08 E4 05 F1 | 	add	objptr, #8
2f540     F2 14 02 FB | 	rdlong	arg02, objptr
2f544     04 4E 05 F1 | 	add	fp, #4
2f548     A7 14 62 FC | 	wrlong	arg02, fp
2f54c     04 E4 05 F1 | 	add	objptr, #4
2f550     F2 14 02 FB | 	rdlong	arg02, objptr
2f554     01 00 00 FF 
2f558     1C E4 85 F1 | 	sub	objptr, ##540
2f55c     04 4E 05 F1 | 	add	fp, #4
2f560     A7 14 62 FC | 	wrlong	arg02, fp
2f564     0C 4E 85 F1 | 	sub	fp, #12
2f568     A7 12 02 FB | 	rdlong	arg01, fp
2f56c     04 4E 85 F1 | 	sub	fp, #4
2f570     59 12 62 FD | 	drvh	arg01
2f574     1F 20 64 FD | 	waitx	#16
2f578     A7 12 02 F6 | 	mov	arg01, fp
2f57c     01 14 06 F6 | 	mov	arg02, #1
2f580     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f584     A7 F0 03 F6 | 	mov	ptra, fp
2f588     B2 00 A0 FD | 	call	#popregs_
2f58c                 | _fatfs_cc_deselect_1127_ret
2f58c     2D 00 64 FD | 	ret
2f590                 | 
2f590                 | _fatfs_cc_select_1131
2f590     00 4A 05 F6 | 	mov	COUNT_, #0
2f594     A8 00 A0 FD | 	call	#pushregs_
2f598     10 F0 07 F1 | 	add	ptra, #16
2f59c     01 00 00 FF 
2f5a0     14 E4 05 F1 | 	add	objptr, ##532
2f5a4     F2 14 02 FB | 	rdlong	arg02, objptr
2f5a8     08 4E 05 F1 | 	add	fp, #8
2f5ac     A7 14 62 FC | 	wrlong	arg02, fp
2f5b0     08 E4 05 F1 | 	add	objptr, #8
2f5b4     F2 12 02 FB | 	rdlong	arg01, objptr
2f5b8     01 00 00 FF 
2f5bc     1C E4 85 F1 | 	sub	objptr, ##540
2f5c0     04 4E 05 F1 | 	add	fp, #4
2f5c4     A7 12 62 FC | 	wrlong	arg01, fp
2f5c8     50 12 62 FD | 	fltl	arg01
2f5cc     04 4E 85 F1 | 	sub	fp, #4
2f5d0     A7 12 02 FB | 	rdlong	arg01, fp
2f5d4     58 12 62 FD | 	drvl	arg01
2f5d8     1F 20 64 FD | 	waitx	#16
2f5dc     04 4E 05 F1 | 	add	fp, #4
2f5e0     A7 12 02 FB | 	rdlong	arg01, fp
2f5e4     41 12 62 FD | 	dirh	arg01
2f5e8     08 4E 85 F1 | 	sub	fp, #8
2f5ec     A7 12 02 F6 | 	mov	arg01, fp
2f5f0     04 4E 85 F1 | 	sub	fp, #4
2f5f4     01 14 06 F6 | 	mov	arg02, #1
2f5f8     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f5fc     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1121
2f600     00 FA 0D F2 | 	cmp	result1, #0 wz
2f604     01 FA 05 56 |  if_ne	mov	result1, #1
2f608     08 00 90 5D |  if_ne	jmp	#LR__4850
2f60c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1127
2f610                 | ' 
2f610                 | ' 	deselect();
2f610                 | ' 	return 0;
2f610     00 FA 05 F6 | 	mov	result1, #0
2f614                 | LR__4850
2f614     A7 F0 03 F6 | 	mov	ptra, fp
2f618     B2 00 A0 FD | 	call	#popregs_
2f61c                 | _fatfs_cc_select_1131_ret
2f61c     2D 00 64 FD | 	ret
2f620                 | 
2f620                 | _fatfs_cc_rcvr_datablock_1135
2f620     01 4A 05 F6 | 	mov	COUNT_, #1
2f624     A8 00 A0 FD | 	call	#pushregs_
2f628     18 F0 07 F1 | 	add	ptra, #24
2f62c     04 4E 05 F1 | 	add	fp, #4
2f630     A7 12 62 FC | 	wrlong	arg01, fp
2f634     04 4E 05 F1 | 	add	fp, #4
2f638     A7 14 62 FC | 	wrlong	arg02, fp
2f63c     1A FA 61 FD | 	getct	result1
2f640     08 4E 05 F1 | 	add	fp, #8
2f644     A7 FA 61 FC | 	wrlong	result1, fp
2f648     14 1E 06 FB | 	rdlong	local01, #20
2f64c     03 1E 46 F0 | 	shr	local01, #3
2f650     04 4E 05 F1 | 	add	fp, #4
2f654     A7 1E 62 FC | 	wrlong	local01, fp
2f658     14 4E 85 F1 | 	sub	fp, #20
2f65c                 | ' 	BYTE *buff,
2f65c                 | ' 	UINT btr
2f65c                 | ' )
2f65c                 | ' {
2f65c                 | ' 	BYTE d[2];
2f65c                 | ' 	UINT tmr, tmout;
2f65c                 | ' 
2f65c                 | ' 	tmr = _cnt();
2f65c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f65c                 | ' 	for(;;) {
2f65c                 | LR__4860
2f65c     0C 4E 05 F1 | 	add	fp, #12
2f660     A7 12 02 F6 | 	mov	arg01, fp
2f664     0C 4E 85 F1 | 	sub	fp, #12
2f668     01 14 06 F6 | 	mov	arg02, #1
2f66c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f670     0C 4E 05 F1 | 	add	fp, #12
2f674     A7 1E C2 FA | 	rdbyte	local01, fp
2f678     0C 4E 85 F1 | 	sub	fp, #12
2f67c     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f680     28 00 90 5D |  if_ne	jmp	#LR__4861
2f684     1A FA 61 FD | 	getct	result1
2f688     FD 1E 02 F6 | 	mov	local01, result1
2f68c     10 4E 05 F1 | 	add	fp, #16
2f690     A7 14 02 FB | 	rdlong	arg02, fp
2f694     0A 1F 82 F1 | 	sub	local01, arg02
2f698     04 4E 05 F1 | 	add	fp, #4
2f69c     A7 14 02 FB | 	rdlong	arg02, fp
2f6a0     14 4E 85 F1 | 	sub	fp, #20
2f6a4     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f6a8     B0 FF 9F CD |  if_b	jmp	#LR__4860
2f6ac                 | LR__4861
2f6ac     0C 4E 05 F1 | 	add	fp, #12
2f6b0     A7 1E C2 FA | 	rdbyte	local01, fp
2f6b4     0C 4E 85 F1 | 	sub	fp, #12
2f6b8     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f6bc     00 FA 05 56 |  if_ne	mov	result1, #0
2f6c0     30 00 90 5D |  if_ne	jmp	#LR__4862
2f6c4     04 4E 05 F1 | 	add	fp, #4
2f6c8     A7 12 02 FB | 	rdlong	arg01, fp
2f6cc     04 4E 05 F1 | 	add	fp, #4
2f6d0     A7 14 02 FB | 	rdlong	arg02, fp
2f6d4     08 4E 85 F1 | 	sub	fp, #8
2f6d8     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f6dc     0C 4E 05 F1 | 	add	fp, #12
2f6e0     A7 12 02 F6 | 	mov	arg01, fp
2f6e4     0C 4E 85 F1 | 	sub	fp, #12
2f6e8     02 14 06 F6 | 	mov	arg02, #2
2f6ec     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f6f0                 | ' 
2f6f0                 | ' 	rcvr_mmc(buff, btr);
2f6f0                 | ' 	rcvr_mmc(d, 2);
2f6f0                 | ' 
2f6f0                 | ' 	return 1;
2f6f0     01 FA 05 F6 | 	mov	result1, #1
2f6f4                 | LR__4862
2f6f4     A7 F0 03 F6 | 	mov	ptra, fp
2f6f8     B2 00 A0 FD | 	call	#popregs_
2f6fc                 | _fatfs_cc_rcvr_datablock_1135_ret
2f6fc     2D 00 64 FD | 	ret
2f700                 | 
2f700                 | _fatfs_cc_xmit_datablock_1137
2f700     00 4A 05 F6 | 	mov	COUNT_, #0
2f704     A8 00 A0 FD | 	call	#pushregs_
2f708     10 F0 07 F1 | 	add	ptra, #16
2f70c     04 4E 05 F1 | 	add	fp, #4
2f710     A7 12 62 FC | 	wrlong	arg01, fp
2f714     04 4E 05 F1 | 	add	fp, #4
2f718     A7 14 42 FC | 	wrbyte	arg02, fp
2f71c     08 4E 85 F1 | 	sub	fp, #8
2f720     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1121
2f724     00 FA 0D F2 | 	cmp	result1, #0 wz
2f728     00 FA 05 A6 |  if_e	mov	result1, #0
2f72c     90 00 90 AD |  if_e	jmp	#LR__4871
2f730     08 4E 05 F1 | 	add	fp, #8
2f734     A7 14 C2 FA | 	rdbyte	arg02, fp
2f738     04 4E 05 F1 | 	add	fp, #4
2f73c     A7 14 42 FC | 	wrbyte	arg02, fp
2f740     A7 12 02 F6 | 	mov	arg01, fp
2f744     0C 4E 85 F1 | 	sub	fp, #12
2f748     01 14 06 F6 | 	mov	arg02, #1
2f74c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1110
2f750     08 4E 05 F1 | 	add	fp, #8
2f754     A7 14 C2 FA | 	rdbyte	arg02, fp
2f758     08 4E 85 F1 | 	sub	fp, #8
2f75c     FD 14 0E F2 | 	cmp	arg02, #253 wz
2f760     58 00 90 AD |  if_e	jmp	#LR__4870
2f764     04 4E 05 F1 | 	add	fp, #4
2f768     A7 12 02 FB | 	rdlong	arg01, fp
2f76c     04 4E 85 F1 | 	sub	fp, #4
2f770     09 14 C6 F9 | 	decod	arg02, #9
2f774     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1110
2f778     0C 4E 05 F1 | 	add	fp, #12
2f77c     A7 12 02 F6 | 	mov	arg01, fp
2f780     0C 4E 85 F1 | 	sub	fp, #12
2f784     02 14 06 F6 | 	mov	arg02, #2
2f788     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f78c     0C 4E 05 F1 | 	add	fp, #12
2f790     A7 12 02 F6 | 	mov	arg01, fp
2f794     0C 4E 85 F1 | 	sub	fp, #12
2f798     01 14 06 F6 | 	mov	arg02, #1
2f79c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f7a0     0C 4E 05 F1 | 	add	fp, #12
2f7a4     A7 14 C2 FA | 	rdbyte	arg02, fp
2f7a8     0C 4E 85 F1 | 	sub	fp, #12
2f7ac     1F 14 06 F5 | 	and	arg02, #31
2f7b0     05 14 0E F2 | 	cmp	arg02, #5 wz
2f7b4                 | ' 			return 0;
2f7b4     00 FA 05 56 |  if_ne	mov	result1, #0
2f7b8     04 00 90 5D |  if_ne	jmp	#LR__4871
2f7bc                 | LR__4870
2f7bc                 | ' 	}
2f7bc                 | ' 
2f7bc                 | ' 	return 1;
2f7bc     01 FA 05 F6 | 	mov	result1, #1
2f7c0                 | LR__4871
2f7c0     A7 F0 03 F6 | 	mov	ptra, fp
2f7c4     B2 00 A0 FD | 	call	#popregs_
2f7c8                 | _fatfs_cc_xmit_datablock_1137_ret
2f7c8     2D 00 64 FD | 	ret
2f7cc                 | 
2f7cc                 | _fatfs_cc_send_cmd_1141
2f7cc     01 4A 05 F6 | 	mov	COUNT_, #1
2f7d0     A8 00 A0 FD | 	call	#pushregs_
2f7d4     1C F0 07 F1 | 	add	ptra, #28
2f7d8                 | _fatfs_cc_send_cmd_1141_enter
2f7d8     04 4E 05 F1 | 	add	fp, #4
2f7dc     A7 12 42 FC | 	wrbyte	arg01, fp
2f7e0     04 4E 05 F1 | 	add	fp, #4
2f7e4     A7 14 62 FC | 	wrlong	arg02, fp
2f7e8     04 4E 85 F1 | 	sub	fp, #4
2f7ec     A7 FA C1 FA | 	rdbyte	result1, fp
2f7f0     04 4E 85 F1 | 	sub	fp, #4
2f7f4     80 FA CD F7 | 	test	result1, #128 wz
2f7f8     44 00 90 AD |  if_e	jmp	#LR__4880
2f7fc     04 4E 05 F1 | 	add	fp, #4
2f800     A7 14 C2 FA | 	rdbyte	arg02, fp
2f804     7F 14 06 F5 | 	and	arg02, #127
2f808     A7 14 42 FC | 	wrbyte	arg02, fp
2f80c     04 4E 85 F1 | 	sub	fp, #4
2f810     37 12 06 F6 | 	mov	arg01, #55
2f814     00 14 06 F6 | 	mov	arg02, #0
2f818     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1141
2f81c     0C 4E 05 F1 | 	add	fp, #12
2f820     A7 FA 41 FC | 	wrbyte	result1, fp
2f824     A7 14 C2 FA | 	rdbyte	arg02, fp
2f828     0C 4E 85 F1 | 	sub	fp, #12
2f82c     02 14 16 F2 | 	cmp	arg02, #2 wc
2f830     0C 4E 05 31 |  if_ae	add	fp, #12
2f834     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2f838     0C 4E 85 31 |  if_ae	sub	fp, #12
2f83c     6C 01 90 3D |  if_ae	jmp	#LR__4884
2f840                 | LR__4880
2f840     04 4E 05 F1 | 	add	fp, #4
2f844     A7 14 C2 FA | 	rdbyte	arg02, fp
2f848     04 4E 85 F1 | 	sub	fp, #4
2f84c     0C 14 0E F2 | 	cmp	arg02, #12 wz
2f850     14 00 90 AD |  if_e	jmp	#LR__4881
2f854     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1127
2f858     34 FD BF FD | 	call	#_fatfs_cc_select_1131
2f85c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f860     FF FA 05 A6 |  if_e	mov	result1, #255
2f864     44 01 90 AD |  if_e	jmp	#LR__4884
2f868                 | LR__4881
2f868     04 4E 05 F1 | 	add	fp, #4
2f86c     A7 14 C2 FA | 	rdbyte	arg02, fp
2f870     40 FA 05 F6 | 	mov	result1, #64
2f874     0A FB 41 F5 | 	or	result1, arg02
2f878     10 4E 05 F1 | 	add	fp, #16
2f87c     A7 FA 41 FC | 	wrbyte	result1, fp
2f880     0C 4E 85 F1 | 	sub	fp, #12
2f884     A7 FA 01 FB | 	rdlong	result1, fp
2f888     18 FA 45 F0 | 	shr	result1, #24
2f88c     0D 4E 05 F1 | 	add	fp, #13
2f890     A7 FA 41 FC | 	wrbyte	result1, fp
2f894     0D 4E 85 F1 | 	sub	fp, #13
2f898     A7 FA 01 FB | 	rdlong	result1, fp
2f89c     10 FA 45 F0 | 	shr	result1, #16
2f8a0     0E 4E 05 F1 | 	add	fp, #14
2f8a4     A7 FA 41 FC | 	wrbyte	result1, fp
2f8a8     0E 4E 85 F1 | 	sub	fp, #14
2f8ac     A7 FA 01 FB | 	rdlong	result1, fp
2f8b0     08 FA 45 F0 | 	shr	result1, #8
2f8b4     0F 4E 05 F1 | 	add	fp, #15
2f8b8     A7 FA 41 FC | 	wrbyte	result1, fp
2f8bc     0F 4E 85 F1 | 	sub	fp, #15
2f8c0     A7 FA 01 FB | 	rdlong	result1, fp
2f8c4     10 4E 05 F1 | 	add	fp, #16
2f8c8     A7 FA 41 FC | 	wrbyte	result1, fp
2f8cc     0C 4E 85 F1 | 	sub	fp, #12
2f8d0     A7 02 48 FC | 	wrbyte	#1, fp
2f8d4     08 4E 85 F1 | 	sub	fp, #8
2f8d8     A7 FA C9 FA | 	rdbyte	result1, fp wz
2f8dc     04 4E 85 F1 | 	sub	fp, #4
2f8e0     0C 4E 05 A1 |  if_e	add	fp, #12
2f8e4     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2f8e8     0C 4E 85 A1 |  if_e	sub	fp, #12
2f8ec     04 4E 05 F1 | 	add	fp, #4
2f8f0     A7 FA C1 FA | 	rdbyte	result1, fp
2f8f4     04 4E 85 F1 | 	sub	fp, #4
2f8f8     08 FA 0D F2 | 	cmp	result1, #8 wz
2f8fc     0C 4E 05 A1 |  if_e	add	fp, #12
2f900     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2f904     0C 4E 85 A1 |  if_e	sub	fp, #12
2f908     0C 4E 05 F1 | 	add	fp, #12
2f90c     A7 14 C2 FA | 	rdbyte	arg02, fp
2f910     0D 4E 05 F1 | 	add	fp, #13
2f914     A7 14 42 FC | 	wrbyte	arg02, fp
2f918     05 4E 85 F1 | 	sub	fp, #5
2f91c     A7 12 02 F6 | 	mov	arg01, fp
2f920     14 4E 85 F1 | 	sub	fp, #20
2f924     06 14 06 F6 | 	mov	arg02, #6
2f928     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1110
2f92c     04 4E 05 F1 | 	add	fp, #4
2f930     A7 1E C2 FA | 	rdbyte	local01, fp
2f934     04 4E 85 F1 | 	sub	fp, #4
2f938     0C 1E 0E F2 | 	cmp	local01, #12 wz
2f93c     10 4E 05 A1 |  if_e	add	fp, #16
2f940     A7 12 02 A6 |  if_e	mov	arg01, fp
2f944     10 4E 85 A1 |  if_e	sub	fp, #16
2f948     01 14 06 A6 |  if_e	mov	arg02, #1
2f94c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1117
2f950     0C 4E 05 F1 | 	add	fp, #12
2f954     A7 14 48 FC | 	wrbyte	#10, fp
2f958     0C 4E 85 F1 | 	sub	fp, #12
2f95c                 | ' 	n = 10;
2f95c                 | ' 	do
2f95c                 | LR__4882
2f95c     10 4E 05 F1 | 	add	fp, #16
2f960     A7 12 02 F6 | 	mov	arg01, fp
2f964     10 4E 85 F1 | 	sub	fp, #16
2f968     01 14 06 F6 | 	mov	arg02, #1
2f96c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1117
2f970     10 4E 05 F1 | 	add	fp, #16
2f974     A7 1E C2 FA | 	rdbyte	local01, fp
2f978     10 4E 85 F1 | 	sub	fp, #16
2f97c     80 1E CE F7 | 	test	local01, #128 wz
2f980     1C 00 90 AD |  if_e	jmp	#LR__4883
2f984     0C 4E 05 F1 | 	add	fp, #12
2f988     A7 1E C2 FA | 	rdbyte	local01, fp
2f98c     01 1E 86 F1 | 	sub	local01, #1
2f990     A7 1E 42 FC | 	wrbyte	local01, fp
2f994     A7 1E CA FA | 	rdbyte	local01, fp wz
2f998     0C 4E 85 F1 | 	sub	fp, #12
2f99c     BC FF 9F 5D |  if_ne	jmp	#LR__4882
2f9a0                 | LR__4883
2f9a0                 | ' 
2f9a0                 | ' 	return d;
2f9a0     10 4E 05 F1 | 	add	fp, #16
2f9a4     A7 FA C1 FA | 	rdbyte	result1, fp
2f9a8     10 4E 85 F1 | 	sub	fp, #16
2f9ac                 | LR__4884
2f9ac     A7 F0 03 F6 | 	mov	ptra, fp
2f9b0     B2 00 A0 FD | 	call	#popregs_
2f9b4                 | _fatfs_cc_send_cmd_1141_ret
2f9b4     2D 00 64 FD | 	ret
2f9b8                 | 
2f9b8                 | _fatfs_cc_disk_deinitialize
2f9b8     03 4A 05 F6 | 	mov	COUNT_, #3
2f9bc     A8 00 A0 FD | 	call	#pushregs_
2f9c0     00 12 4E F2 | 	cmps	arg01, #0 wz
2f9c4     01 00 00 FF 
2f9c8     14 E4 05 F1 | 	add	objptr, ##532
2f9cc     F2 12 02 FB | 	rdlong	arg01, objptr
2f9d0     04 E4 85 F1 | 	sub	objptr, #4
2f9d4     F2 1E 02 FB | 	rdlong	local01, objptr
2f9d8     08 E4 05 F1 | 	add	objptr, #8
2f9dc     F2 20 02 FB | 	rdlong	local02, objptr
2f9e0     04 E4 05 F1 | 	add	objptr, #4
2f9e4     F2 22 02 FB | 	rdlong	local03, objptr
2f9e8     01 00 00 FF 
2f9ec     1C E4 85 F1 | 	sub	objptr, ##540
2f9f0                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2f9f0                 | '         return RES_NOTRDY;
2f9f0     03 FA 05 56 |  if_ne	mov	result1, #3
2f9f4     2C 00 90 5D |  if_ne	jmp	#LR__4890
2f9f8     50 12 62 FD | 	fltl	arg01
2f9fc     09 01 08 FC | 	wrpin	#0, arg01
2fa00     50 1E 62 FD | 	fltl	local01
2fa04     0F 01 08 FC | 	wrpin	#0, local01
2fa08     50 20 62 FD | 	fltl	local02
2fa0c     10 01 08 FC | 	wrpin	#0, local02
2fa10     50 22 62 FD | 	fltl	local03
2fa14     11 01 08 FC | 	wrpin	#0, local03
2fa18     0A 12 06 F6 | 	mov	arg01, #10
2fa1c     04 11 BF FD | 	call	#__system___waitms
2fa20                 | '     }
2fa20                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fa20                 | '     _pinclear(PIN_SS);
2fa20                 | '     _pinclear(PIN_CLK);
2fa20                 | '     _pinclear(PIN_DI);
2fa20                 | '     _pinclear(PIN_DO);
2fa20                 | ' 
2fa20                 | '     _waitms(10);
2fa20                 | ' 
2fa20                 | '     return 0;
2fa20     00 FA 05 F6 | 	mov	result1, #0
2fa24                 | LR__4890
2fa24     A7 F0 03 F6 | 	mov	ptra, fp
2fa28     B2 00 A0 FD | 	call	#popregs_
2fa2c                 | _fatfs_cc_disk_deinitialize_ret
2fa2c     2D 00 64 FD | 	ret
2fa30                 | 
2fa30                 | _fatfs_cc_gettimeofday
2fa30     04 4A 05 F6 | 	mov	COUNT_, #4
2fa34     A8 00 A0 FD | 	call	#pushregs_
2fa38     09 1F 02 F6 | 	mov	local01, arg01
2fa3c     C0 0C BF FD | 	call	#__system___getus
2fa40     FD 12 02 F6 | 	mov	arg01, result1
2fa44     02 00 00 FF 
2fa48     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2fa4c     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2fa50     09 FB 01 F6 | 	mov	result1, arg01
2fa54     10 FB 81 F1 | 	sub	result1, local02
2fa58     A1 07 00 FF 
2fa5c     40 FA 15 FD | 	qdiv	result1, ##1000000
2fa60     02 00 00 FF 
2fa64     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fa68     18 20 62 FD | 	getqx	local02
2fa6c     A1 07 00 FF 
2fa70     40 FA 15 FD | 	qdiv	result1, ##1000000
2fa74     00 20 0E F2 | 	cmp	local02, #0 wz
2fa78     19 22 62 FD | 	getqy	local03
2fa7c     28 00 90 AD |  if_e	jmp	#LR__4900
2fa80     02 00 00 FF 
2fa84     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fa88     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fa8c     10 25 02 F1 | 	add	local04, local02
2fa90     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2fa94     11 13 82 F1 | 	sub	arg01, local03
2fa98     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2fa9c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2faa0     02 00 00 FF 
2faa4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2faa8                 | LR__4900
2faa8     02 00 00 FF 
2faac     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fab0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fab4     02 00 00 FF 
2fab8     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2fabc     0F 25 62 FC | 	wrlong	local04, local01
2fac0     04 1E 06 F1 | 	add	local01, #4
2fac4     0F 23 62 FC | 	wrlong	local03, local01
2fac8                 | '         lastsec += secs;
2fac8                 | '         lastus = now - leftover;
2fac8                 | '     }
2fac8                 | '     tv->tv_sec = lastsec;
2fac8                 | '     tv->tv_usec = leftover;
2fac8                 | '     return 0;
2fac8     00 FA 05 F6 | 	mov	result1, #0
2facc     A7 F0 03 F6 | 	mov	ptra, fp
2fad0     B2 00 A0 FD | 	call	#popregs_
2fad4                 | _fatfs_cc_gettimeofday_ret
2fad4     2D 00 64 FD | 	ret
2fad8                 | 
2fad8                 | _fatfs_cc__is_leap_year
2fad8     09 FB 51 F6 | 	abs	result1, arg01 wc
2fadc     03 FA 05 F5 | 	and	result1, #3
2fae0     FD FA 89 F6 | 	negc	result1, result1 wz
2fae4     38 00 90 5D |  if_ne	jmp	#LR__4911
2fae8     09 FB 51 F6 | 	abs	result1, arg01 wc
2faec     64 FA 15 FD | 	qdiv	result1, #100
2faf0     19 FA 61 FD | 	getqy	result1
2faf4     FD FA 89 F6 | 	negc	result1, result1 wz
2faf8     1C 00 90 5D |  if_ne	jmp	#LR__4910
2fafc     09 FB 51 F6 | 	abs	result1, arg01 wc
2fb00     90 FB 15 FD | 	qdiv	result1, #400
2fb04                 | '       return (0 == y % 400);
2fb04     00 FA 05 F6 | 	mov	result1, #0
2fb08     19 00 62 FD | 	getqy	_var01
2fb0c     00 01 8A F6 | 	negc	_var01, _var01 wz
2fb10     01 FA 05 A6 |  if_e	mov	result1, #1
2fb14     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fb18                 | LR__4910
2fb18                 | '     return 1;
2fb18     01 FA 05 F6 | 	mov	result1, #1
2fb1c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fb20                 | LR__4911
2fb20                 | '   }
2fb20                 | '   return 0;
2fb20     00 FA 05 F6 | 	mov	result1, #0
2fb24                 | _fatfs_cc__is_leap_year_ret
2fb24     2D 00 64 FD | 	ret
2fb28                 | 
2fb28                 | _fatfs_cc___tzoffset
2fb28     09 01 0A F6 | 	mov	_var01, arg01 wz
2fb2c     FF FF FF FF 
2fb30     0A FF 6B FC | 	wrlong	##-1, arg02
2fb34     01 02 06 F6 | 	mov	_var02, #1
2fb38     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fb3c                 | '                 return 0;
2fb3c     00 FA 05 A6 |  if_e	mov	result1, #0
2fb40     94 02 90 AD |  if_e	jmp	#LR__4937
2fb44     0A 01 68 FC | 	wrlong	#0, arg02
2fb48     02 00 00 FF 
2fb4c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fb50     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fb54                 | ' 
2fb54                 | '        *hasdst = 0;
2fb54                 | ' 
2fb54                 | ' 	n = stdname;
2fb54                 | '         while (*s && isalpha(*s)) {
2fb54     02 00 00 FF 
2fb58     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fb5c     97 28 48 FB | 	callpa	#(@LR__4921-@LR__4920)>>2,fcache_load_ptr_
2fb60                 | LR__4920
2fb60     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fb64     48 00 90 AD |  if_e	jmp	#LR__4922
2fb68     00 13 C2 FA | 	rdbyte	arg01, _var01
2fb6c                 | ' {
2fb6c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fb6c     80 12 36 F3 | 	fle	arg01, #128 wc
2fb70                 | '     return __ctype[c];
2fb70     02 00 00 FF 
2fb74     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fb78     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fb7c     09 FB C1 FA | 	rdbyte	result1, arg01
2fb80     02 00 00 FF 
2fb84     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fb88     0C FA CD F7 | 	test	result1, #12 wz
2fb8c     20 00 90 AD |  if_e	jmp	#LR__4922
2fb90     00 09 02 F6 | 	mov	_var05, _var01
2fb94     00 0B 02 F6 | 	mov	_var06, _var01
2fb98     01 0A 06 F1 | 	add	_var06, #1
2fb9c     04 0D C2 FA | 	rdbyte	_var07, _var05
2fba0     05 01 02 F6 | 	mov	_var01, _var06
2fba4     03 0D 42 FC | 	wrbyte	_var07, _var04
2fba8     01 06 06 F1 | 	add	_var04, #1
2fbac     B0 FF 9F FD | 	jmp	#LR__4920
2fbb0                 | LR__4921
2fbb0                 | LR__4922
2fbb0     03 01 48 FC | 	wrbyte	#0, _var04
2fbb4     00 0E 06 F6 | 	mov	_var08, #0
2fbb8     00 05 C2 FA | 	rdbyte	_var03, _var01
2fbbc     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fbc0     01 02 66 A6 |  if_e	neg	_var02, #1
2fbc4     01 00 06 A1 |  if_e	add	_var01, #1
2fbc8     97 28 48 FB | 	callpa	#(@LR__4924-@LR__4923)>>2,fcache_load_ptr_
2fbcc                 | '                 sgn = -1;
2fbcc                 | '                 s++;
2fbcc                 | '         }
2fbcc                 | '         while (isdigit(*s)) {
2fbcc                 | LR__4923
2fbcc     00 13 C2 FA | 	rdbyte	arg01, _var01
2fbd0                 | ' {
2fbd0                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fbd0     80 12 36 F3 | 	fle	arg01, #128 wc
2fbd4                 | '     return __ctype[c];
2fbd4     02 00 00 FF 
2fbd8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fbdc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fbe0     09 FB C1 FA | 	rdbyte	result1, arg01
2fbe4     02 00 00 FF 
2fbe8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fbec     02 FA CD F7 | 	test	result1, #2 wz
2fbf0     28 00 90 AD |  if_e	jmp	#LR__4925
2fbf4     07 05 02 F6 | 	mov	_var03, _var08
2fbf8     02 04 66 F0 | 	shl	_var03, #2
2fbfc     07 05 02 F1 | 	add	_var03, _var08
2fc00     01 04 66 F0 | 	shl	_var03, #1
2fc04     00 09 C2 FA | 	rdbyte	_var05, _var01
2fc08     30 08 86 F1 | 	sub	_var05, #48
2fc0c     04 05 02 F1 | 	add	_var03, _var05
2fc10     02 0F 02 F6 | 	mov	_var08, _var03
2fc14     01 00 06 F1 | 	add	_var01, #1
2fc18     B0 FF 9F FD | 	jmp	#LR__4923
2fc1c                 | LR__4924
2fc1c                 | LR__4925
2fc1c     07 00 00 FF 
2fc20     10 0E 06 FD | 	qmul	_var08, ##3600
2fc24     00 05 C2 FA | 	rdbyte	_var03, _var01
2fc28     3A 04 0E F2 | 	cmp	_var03, #58 wz
2fc2c     18 10 62 FD | 	getqx	_var09
2fc30     70 00 90 5D |  if_ne	jmp	#LR__4929
2fc34     00 0E 06 F6 | 	mov	_var08, #0
2fc38     01 00 06 F1 | 	add	_var01, #1
2fc3c     97 28 48 FB | 	callpa	#(@LR__4927-@LR__4926)>>2,fcache_load_ptr_
2fc40                 | '                 x = 0;
2fc40                 | '                 s++;
2fc40                 | '                 while (isdigit(*s)) {
2fc40                 | LR__4926
2fc40     00 13 C2 FA | 	rdbyte	arg01, _var01
2fc44                 | ' {
2fc44                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fc44     80 12 36 F3 | 	fle	arg01, #128 wc
2fc48                 | '     return __ctype[c];
2fc48     02 00 00 FF 
2fc4c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fc50     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fc54     09 FB C1 FA | 	rdbyte	result1, arg01
2fc58     02 00 00 FF 
2fc5c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fc60     02 FA CD F7 | 	test	result1, #2 wz
2fc64     28 00 90 AD |  if_e	jmp	#LR__4928
2fc68     07 05 02 F6 | 	mov	_var03, _var08
2fc6c     02 04 66 F0 | 	shl	_var03, #2
2fc70     07 05 02 F1 | 	add	_var03, _var08
2fc74     01 04 66 F0 | 	shl	_var03, #1
2fc78     00 09 C2 FA | 	rdbyte	_var05, _var01
2fc7c     30 08 86 F1 | 	sub	_var05, #48
2fc80     04 05 02 F1 | 	add	_var03, _var05
2fc84     02 0F 02 F6 | 	mov	_var08, _var03
2fc88     01 00 06 F1 | 	add	_var01, #1
2fc8c     B0 FF 9F FD | 	jmp	#LR__4926
2fc90                 | LR__4927
2fc90                 | LR__4928
2fc90     07 0D 02 F6 | 	mov	_var07, _var08
2fc94     04 0C 66 F0 | 	shl	_var07, #4
2fc98     07 0D 82 F1 | 	sub	_var07, _var08
2fc9c     02 0C 66 F0 | 	shl	_var07, #2
2fca0     06 11 02 F1 | 	add	_var09, _var07
2fca4                 | LR__4929
2fca4     02 00 00 FF 
2fca8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fcac     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fcb0     00 13 C2 FA | 	rdbyte	arg01, _var01
2fcb4                 | ' {
2fcb4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fcb4     80 12 36 F3 | 	fle	arg01, #128 wc
2fcb8                 | '     return __ctype[c];
2fcb8     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2fcbc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fcc0     09 FB C1 FA | 	rdbyte	result1, arg01
2fcc4     02 00 00 FF 
2fcc8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fccc     0C FA CD F7 | 	test	result1, #12 wz
2fcd0     50 00 90 AD |  if_e	jmp	#LR__4932
2fcd4     0A 03 68 FC | 	wrlong	#1, arg02
2fcd8                 | '                 *hasdst = 1;
2fcd8                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2fcd8                 | LR__4930
2fcd8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fcdc     44 00 90 AD |  if_e	jmp	#LR__4931
2fce0     00 13 C2 FA | 	rdbyte	arg01, _var01
2fce4                 | ' {
2fce4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fce4     80 12 36 F3 | 	fle	arg01, #128 wc
2fce8                 | '     return __ctype[c];
2fce8     02 00 00 FF 
2fcec     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fcf0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fcf4     09 FB C1 FA | 	rdbyte	result1, arg01
2fcf8     02 00 00 FF 
2fcfc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fd00     0C FA CD F7 | 	test	result1, #12 wz
2fd04     1C 00 90 AD |  if_e	jmp	#LR__4931
2fd08     00 0B 02 F6 | 	mov	_var06, _var01
2fd0c     01 0A 06 F1 | 	add	_var06, #1
2fd10     00 0D C2 FA | 	rdbyte	_var07, _var01
2fd14     05 01 02 F6 | 	mov	_var01, _var06
2fd18     03 0D 42 FC | 	wrbyte	_var07, _var04
2fd1c     01 06 06 F1 | 	add	_var04, #1
2fd20     B4 FF 9F FD | 	jmp	#LR__4930
2fd24                 | LR__4931
2fd24                 | LR__4932
2fd24     03 01 48 FC | 	wrbyte	#0, _var04
2fd28     02 00 00 FF 
2fd2c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fd30     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fd34     02 00 00 FF 
2fd38     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fd3c     20 00 90 AD |  if_e	jmp	#LR__4933
2fd40     02 00 00 FF 
2fd44     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fd48     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fd4c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2fd50     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fd54     02 00 00 FF 
2fd58     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fd5c     1C 00 90 FD | 	jmp	#LR__4934
2fd60                 | LR__4933
2fd60     02 00 00 FF 
2fd64     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2fd68     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fd6c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2fd70     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fd74     02 00 00 FF 
2fd78     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fd7c                 | LR__4934
2fd7c     02 00 00 FF 
2fd80     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fd84     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fd88     02 00 00 FF 
2fd8c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2fd90     20 00 90 AD |  if_e	jmp	#LR__4935
2fd94     02 00 00 FF 
2fd98     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fd9c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fda0     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2fda4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fda8     02 00 00 FF 
2fdac     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fdb0     1C 00 90 FD | 	jmp	#LR__4936
2fdb4                 | LR__4935
2fdb4     02 00 00 FF 
2fdb8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fdbc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fdc0     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2fdc4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fdc8     02 00 00 FF 
2fdcc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fdd0                 | LR__4936
2fdd0     08 03 02 FD | 	qmul	_var02, _var09
2fdd4                 | ' 		_tzname[1] = stdname;
2fdd4                 | ' 
2fdd4                 | '         return sgn * off;
2fdd4     18 FA 61 FD | 	getqx	result1
2fdd8                 | LR__4937
2fdd8                 | _fatfs_cc___tzoffset_ret
2fdd8     2D 00 64 FD | 	ret
2fddc                 | 
2fddc                 | _fatfs_cc___indst
2fddc     10 12 06 F1 | 	add	arg01, #16
2fde0     09 01 02 FB | 	rdlong	_var01, arg01
2fde4     10 12 86 F1 | 	sub	arg01, #16
2fde8     02 00 0E F2 | 	cmp	_var01, #2 wz
2fdec     30 00 90 5D |  if_ne	jmp	#LR__4940
2fdf0     07 00 06 F6 | 	mov	_var01, #7
2fdf4     18 12 06 F1 | 	add	arg01, #24
2fdf8     09 03 02 FB | 	rdlong	_var02, arg01
2fdfc     01 01 02 F1 | 	add	_var01, _var02
2fe00     0C 12 86 F1 | 	sub	arg01, #12
2fe04     09 05 02 FB | 	rdlong	_var03, arg01
2fe08     02 01 82 F1 | 	sub	_var01, _var03
2fe0c     00 00 56 F2 | 	cmps	_var01, #0 wc
2fe10                 | '                         return 1;
2fe10     01 FA 05 C6 |  if_b	mov	result1, #1
2fe14     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2fe18                 | '                 return 0;
2fe18     00 FA 05 F6 | 	mov	result1, #0
2fe1c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2fe20                 | LR__4940
2fe20     10 12 06 F1 | 	add	arg01, #16
2fe24     09 01 02 FB | 	rdlong	_var01, arg01
2fe28     10 12 86 F1 | 	sub	arg01, #16
2fe2c     0A 00 0E F2 | 	cmp	_var01, #10 wz
2fe30     28 00 90 5D |  if_ne	jmp	#LR__4941
2fe34     18 12 06 F1 | 	add	arg01, #24
2fe38     09 01 02 FB | 	rdlong	_var01, arg01
2fe3c     0C 12 86 F1 | 	sub	arg01, #12
2fe40     09 07 02 FB | 	rdlong	_var04, arg01
2fe44     03 01 82 F1 | 	sub	_var01, _var04
2fe48     00 00 56 F2 | 	cmps	_var01, #0 wc
2fe4c                 | '                         return 0;
2fe4c     00 FA 05 C6 |  if_b	mov	result1, #0
2fe50     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2fe54                 | '                 return 1;
2fe54     01 FA 05 F6 | 	mov	result1, #1
2fe58     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2fe5c                 | LR__4941
2fe5c                 | '         }
2fe5c                 | ' 
2fe5c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2fe5c     00 00 06 F6 | 	mov	_var01, #0
2fe60     10 12 06 F1 | 	add	arg01, #16
2fe64     09 03 02 FB | 	rdlong	_var02, arg01
2fe68     10 12 86 F1 | 	sub	arg01, #16
2fe6c     03 02 56 F2 | 	cmps	_var02, #3 wc
2fe70     10 00 90 CD |  if_b	jmp	#LR__4942
2fe74     10 12 06 F1 | 	add	arg01, #16
2fe78     09 05 02 FB | 	rdlong	_var03, arg01
2fe7c     0A 04 56 F2 | 	cmps	_var03, #10 wc
2fe80     01 00 06 C6 |  if_b	mov	_var01, #1
2fe84                 | LR__4942
2fe84     00 FB 01 F6 | 	mov	result1, _var01
2fe88                 | _fatfs_cc___indst_ret
2fe88     2D 00 64 FD | 	ret
2fe8c                 | 
2fe8c                 | ' 	
2fe8c                 | ' 	FUNCTION pfunc(c as integer) as integer
2fe8c                 | ___strs_cl_pfunc
2fe8c                 | ' 		if (i < 16) then
2fe8c     04 E4 05 F1 | 	add	objptr, #4
2fe90     F2 FA 01 FB | 	rdlong	result1, objptr
2fe94     04 E4 85 F1 | 	sub	objptr, #4
2fe98     10 FA 55 F2 | 	cmps	result1, #16 wc
2fe9c     2C 00 90 3D |  if_ae	jmp	#LR__4950
2fea0     F2 FA 01 FB | 	rdlong	result1, objptr
2fea4     04 E4 05 F1 | 	add	objptr, #4
2fea8     F2 00 02 FB | 	rdlong	_var01, objptr
2feac     FD 00 02 F1 | 	add	_var01, result1
2feb0     00 13 42 FC | 	wrbyte	arg01, _var01
2feb4     F2 FA 01 FB | 	rdlong	result1, objptr
2feb8     01 FA 05 F1 | 	add	result1, #1
2febc     F2 FA 61 FC | 	wrlong	result1, objptr
2fec0     04 E4 85 F1 | 	sub	objptr, #4
2fec4                 | ' 			p(i) = c
2fec4                 | ' 			i = i+1
2fec4                 | ' 			return 1
2fec4     01 FA 05 F6 | 	mov	result1, #1
2fec8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2fecc                 | LR__4950
2fecc                 | ' 			return -1
2fecc     01 FA 65 F6 | 	neg	result1, #1
2fed0                 | ___strs_cl_pfunc_ret
2fed0     2D 00 64 FD | 	ret
2fed4                 | 
2fed4                 | __struct__s_vfs_file_t_putchar
2fed4     04 4A 05 F6 | 	mov	COUNT_, #4
2fed8     A8 00 A0 FD | 	call	#pushregs_
2fedc     1C E4 05 F1 | 	add	objptr, #28
2fee0     F2 1E 0A FB | 	rdlong	local01, objptr wz
2fee4     1C E4 85 F1 | 	sub	objptr, #28
2fee8     00 FA 05 A6 |  if_e	mov	result1, #0
2feec     48 00 90 AD |  if_e	jmp	#LR__4960
2fef0     1C E4 05 F1 | 	add	objptr, #28
2fef4     F2 20 02 FB | 	rdlong	local02, objptr
2fef8     10 23 02 F6 | 	mov	local03, local02
2fefc     1C E4 85 F1 | 	sub	objptr, #28
2ff00     13 22 46 F7 | 	zerox	local03, #19
2ff04     14 20 46 F0 | 	shr	local02, #20
2ff08     02 20 66 F0 | 	shl	local02, #2
2ff0c     ED 20 02 F1 | 	add	local02, __methods__
2ff10     10 21 02 FB | 	rdlong	local02, local02
2ff14     F2 14 02 F6 | 	mov	arg02, objptr
2ff18     F2 24 02 F6 | 	mov	local04, objptr
2ff1c     11 E5 01 F6 | 	mov	objptr, local03
2ff20     2D 20 62 FD | 	call	local02
2ff24     12 E5 01 F6 | 	mov	objptr, local04
2ff28                 | '     return (i < 0) ? 0 : 1;
2ff28     00 FA 55 F2 | 	cmps	result1, #0 wc
2ff2c     00 1E 06 C6 |  if_b	mov	local01, #0
2ff30     01 1E 06 36 |  if_ae	mov	local01, #1
2ff34     0F FB 01 F6 | 	mov	result1, local01
2ff38                 | LR__4960
2ff38     A7 F0 03 F6 | 	mov	ptra, fp
2ff3c     B2 00 A0 FD | 	call	#popregs_
2ff40                 | __struct__s_vfs_file_t_putchar_ret
2ff40     2D 00 64 FD | 	ret
2ff44                 | 
2ff44                 | __struct__s_vfs_file_t_getchar
2ff44     03 4A 05 F6 | 	mov	COUNT_, #3
2ff48     A8 00 A0 FD | 	call	#pushregs_
2ff4c     20 E4 05 F1 | 	add	objptr, #32
2ff50     F2 12 0A FB | 	rdlong	arg01, objptr wz
2ff54     20 E4 85 F1 | 	sub	objptr, #32
2ff58     01 FA 65 A6 |  if_e	neg	result1, #1
2ff5c     38 00 90 AD |  if_e	jmp	#LR__4970
2ff60                 | '     return getcf(__this);
2ff60     20 E4 05 F1 | 	add	objptr, #32
2ff64     F2 1E 02 FB | 	rdlong	local01, objptr
2ff68     0F 21 02 F6 | 	mov	local02, local01
2ff6c     20 E4 85 F1 | 	sub	objptr, #32
2ff70     13 20 46 F7 | 	zerox	local02, #19
2ff74     14 1E 46 F0 | 	shr	local01, #20
2ff78     02 1E 66 F0 | 	shl	local01, #2
2ff7c     ED 1E 02 F1 | 	add	local01, __methods__
2ff80     0F 1F 02 FB | 	rdlong	local01, local01
2ff84     F2 12 02 F6 | 	mov	arg01, objptr
2ff88     F2 22 02 F6 | 	mov	local03, objptr
2ff8c     10 E5 01 F6 | 	mov	objptr, local02
2ff90     2D 1E 62 FD | 	call	local01
2ff94     11 E5 01 F6 | 	mov	objptr, local03
2ff98                 | LR__4970
2ff98     A7 F0 03 F6 | 	mov	ptra, fp
2ff9c     B2 00 A0 FD | 	call	#popregs_
2ffa0                 | __struct__s_vfs_file_t_getchar_ret
2ffa0     2D 00 64 FD | 	ret
2ffa4                 | 
2ffa4                 | __struct___bas_wrap_sender_tx
2ffa4     03 4A 05 F6 | 	mov	COUNT_, #3
2ffa8     A8 00 A0 FD | 	call	#pushregs_
2ffac     F2 1E 02 FB | 	rdlong	local01, objptr
2ffb0     0F 21 02 F6 | 	mov	local02, local01
2ffb4     13 1E 46 F7 | 	zerox	local01, #19
2ffb8     14 20 46 F0 | 	shr	local02, #20
2ffbc     02 20 66 F0 | 	shl	local02, #2
2ffc0     ED 20 02 F1 | 	add	local02, __methods__
2ffc4     10 21 02 FB | 	rdlong	local02, local02
2ffc8     F2 22 02 F6 | 	mov	local03, objptr
2ffcc     0F E5 01 F6 | 	mov	objptr, local01
2ffd0     2D 20 62 FD | 	call	local02
2ffd4     11 E5 01 F6 | 	mov	objptr, local03
2ffd8     01 FA 05 F6 | 	mov	result1, #1
2ffdc     A7 F0 03 F6 | 	mov	ptra, fp
2ffe0     B2 00 A0 FD | 	call	#popregs_
2ffe4                 | __struct___bas_wrap_sender_tx_ret
2ffe4     2D 00 64 FD | 	ret
2ffe8                 | 
2ffe8                 | __struct___bas_wrap_sender_rx
2ffe8     03 4A 05 F6 | 	mov	COUNT_, #3
2ffec     A8 00 A0 FD | 	call	#pushregs_
2fff0     04 E4 05 F1 | 	add	objptr, #4
2fff4     F2 1E 02 FB | 	rdlong	local01, objptr
2fff8     0F 21 02 F6 | 	mov	local02, local01
2fffc     04 E4 85 F1 | 	sub	objptr, #4
30000     13 20 46 F7 | 	zerox	local02, #19
30004     14 1E 46 F0 | 	shr	local01, #20
30008     02 1E 66 F0 | 	shl	local01, #2
3000c     ED 1E 02 F1 | 	add	local01, __methods__
30010     0F 1F 02 FB | 	rdlong	local01, local01
30014     F2 22 02 F6 | 	mov	local03, objptr
30018     10 E5 01 F6 | 	mov	objptr, local02
3001c     2D 1E 62 FD | 	call	local01
30020     11 E5 01 F6 | 	mov	objptr, local03
30024     A7 F0 03 F6 | 	mov	ptra, fp
30028     B2 00 A0 FD | 	call	#popregs_
3002c                 | __struct___bas_wrap_sender_rx_ret
3002c     2D 00 64 FD | 	ret
30030                 | 
30030                 | __struct___bas_wrap_sender_close
30030     03 4A 05 F6 | 	mov	COUNT_, #3
30034     A8 00 A0 FD | 	call	#pushregs_
30038     08 E4 05 F1 | 	add	objptr, #8
3003c     F2 1E 02 FB | 	rdlong	local01, objptr
30040     0F 21 02 F6 | 	mov	local02, local01
30044     08 E4 85 F1 | 	sub	objptr, #8
30048     13 20 46 F7 | 	zerox	local02, #19
3004c     14 1E 46 F0 | 	shr	local01, #20
30050     02 1E 66 F0 | 	shl	local01, #2
30054     ED 1E 02 F1 | 	add	local01, __methods__
30058     0F 1F 02 FB | 	rdlong	local01, local01
3005c     F2 22 02 F6 | 	mov	local03, objptr
30060     10 E5 01 F6 | 	mov	objptr, local02
30064     2D 1E 62 FD | 	call	local01
30068     11 E5 01 F6 | 	mov	objptr, local03
3006c     A7 F0 03 F6 | 	mov	ptra, fp
30070     B2 00 A0 FD | 	call	#popregs_
30074                 | __struct___bas_wrap_sender_close_ret
30074     2D 00 64 FD | 	ret
30078                 | 
30078                 | LR__4980
30078     2F          | 	byte	"/"
30079     00          | 	byte	0
3007a                 | LR__4981
3007a     69 6E 66    | 	byte	"inf"
3007d     00          | 	byte	0
3007e                 | LR__4982
3007e     6E 61 6E    | 	byte	"nan"
30081     00          | 	byte	0
30082                 | LR__4983
30082                 | 	byte	
30082     00          | 	byte	0
30083                 | LR__4984
30083                 | 	byte	
30083     00          | 	byte	0
30084                 | LR__4985
30084                 | 	byte	
30084     00          | 	byte	0
30085                 | LR__4986
30085                 | 	byte	
30085     00          | 	byte	0
30086                 | LR__4987
30086                 | 	byte	
30086     00          | 	byte	0
30087                 | LR__4988
30087                 | 	byte	
30087     00          | 	byte	0
30088                 | LR__4989
30088                 | 	byte	
30088     00          | 	byte	0
30089                 | LR__4990
30089                 | 	byte	
30089     00          | 	byte	0
3008a                 | LR__4991
3008a     00          | 	byte	0
3008b     00          | 	byte	0
3008c                 | LR__4992
3008c     00          | 	byte	0
3008d     00          | 	byte	0
3008e                 | LR__4993
3008e     00          | 	byte	0
3008f     00          | 	byte	0
30090                 | LR__4994
30090     20 21 21 21 
30094     20 63 6F 72 
30098     72 75 70 74 
3009c     65 64 20 68 
300a0     65 61 70 3F 
300a4     3F 3F 20 21 
300a8     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
300ab     00          | 	byte	0
300ac                 | LR__4995
300ac     20 21 21 21 
300b0     20 6F 75 74 
300b4     20 6F 66 20 
300b8     68 65 61 70 
300bc     20 6D 65 6D 
300c0     6F 72 79 20 
300c4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
300c8     00          | 	byte	0
300c9                 | LR__4996
300c9     20 21 21 21 
300cd     20 63 6F 72 
300d1     72 75 70 74 
300d5     65 64 20 68 
300d9     65 61 70 20 
300dd     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
300e1     00          | 	byte	0
300e2                 | LR__4997
300e2     00          | 	byte	0
300e3     00          | 	byte	0
300e4                 | LR__4998
300e4     2E          | 	byte	"."
300e5     00          | 	byte	0
300e6                 | LR__4999
300e6     00          | 	byte	0
300e7     00          | 	byte	0
300e8                 | LR__5000
300e8     00          | 	byte	0
300e9     00          | 	byte	0
300ea                 | LR__5001
300ea     00          | 	byte	0
300eb     00          | 	byte	0
300ec                 | LR__5002
300ec     2A 3A 3C 3E 
300f0     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
300f4     00          | 	byte	0
300f5                 | LR__5003
300f5     2B 2C 3B 3D 
300f9     5B 5D       | 	byte	"+,;=[]"
300fb     00          | 	byte	0
300fc                 | LR__5004
300fc     46 41 54 33 
30100     32 20 20 20 | 	byte	"FAT32   "
30104     00          | 	byte	0
30105                 | LR__5005
30105     54 5A       | 	byte	"TZ"
30107     00          | 	byte	0
30108                 | LR__5006
30108     00          | 	byte	0
30109     00          | 	byte	0
3010a                 | LR__5007
3010a                 | 	byte	
3010a     00          | 	byte	0
3010b                 | LR__5008
3010b                 | 	byte	
3010b     00          | 	byte	0
3010c                 | LR__5009
3010c                 | 	byte	
3010c     00          | 	byte	0
3010d                 | LR__5010
3010d                 | 	byte	
3010d     00          | 	byte	0
3010e                 | LR__5011
3010e     22          | 	byte	34
3010f     00          | 	byte	0
30110                 | LR__5012
30110     22          | 	byte	34
30111     00          | 	byte	0
30112                 | LR__5013
30112     3A          | 	byte	":"
30113     00          | 	byte	0
30114                 | LR__5014
30114                 | 	byte	
30114     00          | 	byte	0
30115                 | LR__5015
30115                 | 	byte	
30115     00          | 	byte	0
30116                 | LR__5016
30116                 | 	byte	
30116     00          | 	byte	0
30117                 | LR__5017
30117                 | 	byte	
30117     00          | 	byte	0
30118                 | LR__5018
30118                 | 	byte	
30118     00          | 	byte	0
30119                 | LR__5019
30119                 | 	byte	
30119     00          | 	byte	0
3011a                 | LR__5020
3011a                 | 	byte	
3011a     00          | 	byte	0
3011b                 | LR__5021
3011b     30          | 	byte	"0"
3011c     00          | 	byte	0
3011d                 | LR__5022
3011d     22          | 	byte	34
3011e     00          | 	byte	0
3011f                 | LR__5023
3011f     22          | 	byte	34
30120     00          | 	byte	0
30121                 | LR__5024
30121     22          | 	byte	34
30122     00          | 	byte	0
30123                 | LR__5025
30123     22          | 	byte	34
30124     00          | 	byte	0
30125                 | LR__5026
30125     22          | 	byte	34
30126     00          | 	byte	0
30127                 | LR__5027
30127     3E          | 	byte	">"
30128     00          | 	byte	0
30129                 | LR__5028
30129     3C          | 	byte	"<"
3012a     00          | 	byte	0
3012b                 | LR__5029
3012b     2B          | 	byte	"+"
3012c     00          | 	byte	0
3012d                 | LR__5030
3012d     2D          | 	byte	"-"
3012e     00          | 	byte	0
3012f                 | LR__5031
3012f     2A          | 	byte	"*"
30130     00          | 	byte	0
30131                 | LR__5032
30131     2F          | 	byte	"/"
30132     00          | 	byte	0
30133                 | LR__5033
30133     5E          | 	byte	"^"
30134     00          | 	byte	0
30135                 | LR__5034
30135     3D          | 	byte	"="
30136     00          | 	byte	0
30137                 | LR__5035
30137     2B          | 	byte	"+"
30138     00          | 	byte	0
30139                 | LR__5036
30139     2B          | 	byte	"+"
3013a     00          | 	byte	0
3013b                 | LR__5037
3013b     2D          | 	byte	"-"
3013c     00          | 	byte	0
3013d                 | LR__5038
3013d     2D          | 	byte	"-"
3013e     00          | 	byte	0
3013f                 | LR__5039
3013f     3C          | 	byte	"<"
30140     00          | 	byte	0
30141                 | LR__5040
30141     3E          | 	byte	">"
30142     00          | 	byte	0
30143                 | LR__5041
30143     22          | 	byte	34
30144     00          | 	byte	0
30145                 | LR__5042
30145     22          | 	byte	34
30146     00          | 	byte	0
30147                 | LR__5043
30147     65 6C 73 65 | 	byte	"else"
3014b     00          | 	byte	0
3014c                 | LR__5044
3014c     74 68 65 6E | 	byte	"then"
30150     00          | 	byte	0
30151                 | LR__5045
30151     2E          | 	byte	"."
30152     00          | 	byte	0
30153                 | LR__5046
30153     3F          | 	byte	"?"
30154     00          | 	byte	0
30155                 | LR__5047
30155     3F          | 	byte	"?"
30156     00          | 	byte	0
30157                 | LR__5048
30157     6D 6F 75 73 
3015b     65          | 	byte	"mouse"
3015c     00          | 	byte	0
3015d                 | LR__5049
3015d     63 75 72 73 
30161     6F 72       | 	byte	"cursor"
30163     00          | 	byte	0
30164                 | LR__5050
30164     63 6C 69 63 
30168     6B          | 	byte	"click"
30169     00          | 	byte	0
3016a                 | LR__5051
3016a     6F 6E       | 	byte	"on"
3016c     00          | 	byte	0
3016d                 | LR__5052
3016d     31          | 	byte	"1"
3016e     00          | 	byte	0
3016f                 | LR__5053
3016f     6F 66 66    | 	byte	"off"
30172     00          | 	byte	0
30173                 | LR__5054
30173     30          | 	byte	"0"
30174     00          | 	byte	0
30175                 | LR__5055
30175     6D 6F 64 65 | 	byte	"mode"
30179     00          | 	byte	0
3017a                 | LR__5056
3017a     6D 2E       | 	byte	"m."
3017c     00          | 	byte	0
3017d                 | LR__5057
3017d     61 74 61 72 
30181     69          | 	byte	"atari"
30182     00          | 	byte	0
30183                 | LR__5058
30183     30          | 	byte	"0"
30184     00          | 	byte	0
30185                 | LR__5059
30185     70 63 5F 61 
30189     6D 62 65 72 | 	byte	"pc_amber"
3018d     00          | 	byte	0
3018e                 | LR__5060
3018e     31          | 	byte	"1"
3018f     00          | 	byte	0
30190                 | LR__5061
30190     70 63 5F 67 
30194     72 65 65 6E | 	byte	"pc_green"
30198     00          | 	byte	0
30199                 | LR__5062
30199     32          | 	byte	"2"
3019a     00          | 	byte	0
3019b                 | LR__5063
3019b     70 63 5F 77 
3019f     68 69 74 65 | 	byte	"pc_white"
301a3     00          | 	byte	0
301a4                 | LR__5064
301a4     33          | 	byte	"3"
301a5     00          | 	byte	0
301a6                 | LR__5065
301a6     73 74       | 	byte	"st"
301a8     00          | 	byte	0
301a9                 | LR__5066
301a9     34          | 	byte	"4"
301aa     00          | 	byte	0
301ab                 | LR__5067
301ab                 | 	byte	
301ab     00          | 	byte	0
301ac                 | LR__5068
301ac     6C 6F 61 64 | 	byte	"load"
301b0     00          | 	byte	0
301b1                 | LR__5069
301b1     73 61 76 65 | 	byte	"save"
301b5     00          | 	byte	0
301b6                 | LR__5070
301b6     62 72 75 6E | 	byte	"brun"
301ba     00          | 	byte	0
301bb                 | LR__5071
301bb     72 75 6E    | 	byte	"run"
301be     00          | 	byte	0
301bf                 | LR__5072
301bf     6C 6F 2E    | 	byte	"lo."
301c2     00          | 	byte	0
301c3                 | LR__5073
301c3     73 2E       | 	byte	"s."
301c5     00          | 	byte	0
301c6                 | LR__5074
301c6     62 72 2E    | 	byte	"br."
301c9     00          | 	byte	0
301ca                 | LR__5075
301ca     65 6E 74 65 
301ce     72          | 	byte	"enter"
301cf     00          | 	byte	0
301d0                 | LR__5076
301d0     65 2E       | 	byte	"e."
301d2     00          | 	byte	0
301d3                 | LR__5077
301d3                 | 	byte	
301d3     00          | 	byte	0
301d4                 | LR__5078
301d4                 | 	byte	
301d4     00          | 	byte	0
301d5                 | LR__5079
301d5                 | 	byte	
301d5     00          | 	byte	0
301d6                 | LR__5080
301d6                 | 	byte	
301d6     00          | 	byte	0
301d7                 | LR__5081
301d7                 | 	byte	
301d7     00          | 	byte	0
301d8                 | LR__5082
301d8     52 65 61 64 
301dc     79          | 	byte	"Ready"
301dd     00          | 	byte	0
301de                 | LR__5083
301de     2B          | 	byte	"+"
301df     00          | 	byte	0
301e0                 | LR__5084
301e0     2D          | 	byte	"-"
301e1     00          | 	byte	0
301e2                 | LR__5085
301e2     6F 72       | 	byte	"or"
301e4     00          | 	byte	0
301e5                 | LR__5086
301e5     78 6F 72    | 	byte	"xor"
301e8     00          | 	byte	0
301e9                 | LR__5087
301e9     2A          | 	byte	"*"
301ea     00          | 	byte	0
301eb                 | LR__5088
301eb     2F          | 	byte	"/"
301ec     00          | 	byte	0
301ed                 | LR__5089
301ed     61 6E 64    | 	byte	"and"
301f0     00          | 	byte	0
301f1                 | LR__5090
301f1     64 69 76    | 	byte	"div"
301f4     00          | 	byte	0
301f5                 | LR__5091
301f5     6D 6F 64    | 	byte	"mod"
301f8     00          | 	byte	0
301f9                 | LR__5092
301f9     73 68 6C    | 	byte	"shl"
301fc     00          | 	byte	0
301fd                 | LR__5093
301fd     73 68 72    | 	byte	"shr"
30200     00          | 	byte	0
30201                 | LR__5094
30201     5E          | 	byte	"^"
30202     00          | 	byte	0
30203                 | LR__5095
30203     6E 6F 74    | 	byte	"not"
30206     00          | 	byte	0
30207                 | LR__5096
30207     40          | 	byte	"@"
30208     00          | 	byte	0
30209                 | LR__5097
30209     3D          | 	byte	"="
3020a     00          | 	byte	0
3020b                 | LR__5098
3020b     3E 3D       | 	byte	">="
3020d     00          | 	byte	0
3020e                 | LR__5099
3020e     3C 3D       | 	byte	"<="
30210     00          | 	byte	0
30211                 | LR__5100
30211     3C          | 	byte	"<"
30212     00          | 	byte	0
30213                 | LR__5101
30213     3E          | 	byte	">"
30214     00          | 	byte	0
30215                 | LR__5102
30215     3C 3E       | 	byte	"<>"
30217     00          | 	byte	0
30218                 | LR__5103
30218     2B 2B       | 	byte	"++"
3021a     00          | 	byte	0
3021b                 | LR__5104
3021b     2D 2D       | 	byte	"--"
3021d     00          | 	byte	0
3021e                 | LR__5105
3021e     23          | 	byte	"#"
3021f     00          | 	byte	0
30220                 | LR__5106
30220     30          | 	byte	"0"
30221     00          | 	byte	0
30222                 | LR__5107
30222     39          | 	byte	"9"
30223     00          | 	byte	0
30224                 | LR__5108
30224     23 72 65 61 
30228     64          | 	byte	"#read"
30229     00          | 	byte	0
3022a                 | LR__5109
3022a     23 77 72 69 
3022e     74 65       | 	byte	"#write"
30230     00          | 	byte	0
30231                 | LR__5110
30231     23 61 70 70 
30235     65 6E 64    | 	byte	"#append"
30238     00          | 	byte	0
30239                 | LR__5111
30239     23          | 	byte	"#"
3023a     00          | 	byte	0
3023b                 | LR__5112
3023b     23          | 	byte	"#"
3023c     00          | 	byte	0
3023d                 | LR__5113
3023d     2D          | 	byte	"-"
3023e     00          | 	byte	0
3023f                 | LR__5114
3023f     30          | 	byte	"0"
30240     00          | 	byte	0
30241                 | LR__5115
30241     63          | 	byte	"c"
30242     00          | 	byte	0
30243                 | LR__5116
30243     63 23       | 	byte	"c#"
30245     00          | 	byte	0
30246                 | LR__5117
30246     64          | 	byte	"d"
30247     00          | 	byte	0
30248                 | LR__5118
30248     64 23       | 	byte	"d#"
3024a     00          | 	byte	0
3024b                 | LR__5119
3024b     65          | 	byte	"e"
3024c     00          | 	byte	0
3024d                 | LR__5120
3024d     66          | 	byte	"f"
3024e     00          | 	byte	0
3024f                 | LR__5121
3024f     66 23       | 	byte	"f#"
30251     00          | 	byte	0
30252                 | LR__5122
30252     67          | 	byte	"g"
30253     00          | 	byte	0
30254                 | LR__5123
30254     67 23       | 	byte	"g#"
30256     00          | 	byte	0
30257                 | LR__5124
30257     61          | 	byte	"a"
30258     00          | 	byte	0
30259                 | LR__5125
30259     61 23       | 	byte	"a#"
3025b     00          | 	byte	0
3025c                 | LR__5126
3025c     68          | 	byte	"h"
3025d     00          | 	byte	0
3025e                 | LR__5127
3025e     62          | 	byte	"b"
3025f     00          | 	byte	0
30260                 | LR__5128
30260     2B          | 	byte	"+"
30261     00          | 	byte	0
30262                 | LR__5129
30262     2D          | 	byte	"-"
30263     00          | 	byte	0
30264                 | LR__5130
30264     3D          | 	byte	"="
30265     00          | 	byte	0
30266                 | LR__5131
30266     2C          | 	byte	","
30267     00          | 	byte	0
30268                 | LR__5132
30268     2A          | 	byte	"*"
30269     00          | 	byte	0
3026a                 | LR__5133
3026a     2F          | 	byte	"/"
3026b     00          | 	byte	0
3026c                 | LR__5134
3026c     3B          | 	byte	";"
3026d     00          | 	byte	0
3026e                 | LR__5135
3026e     22          | 	byte	34
3026f     00          | 	byte	0
30270                 | LR__5136
30270     5E          | 	byte	"^"
30271     00          | 	byte	0
30272                 | LR__5137
30272     29          | 	byte	")"
30273     00          | 	byte	0
30274                 | LR__5138
30274     28          | 	byte	"("
30275     00          | 	byte	0
30276                 | LR__5139
30276     3A          | 	byte	":"
30277     00          | 	byte	0
30278                 | LR__5140
30278     20          | 	byte	" "
30279     00          | 	byte	0
3027a                 | LR__5141
3027a     3E          | 	byte	">"
3027b     00          | 	byte	0
3027c                 | LR__5142
3027c     3C          | 	byte	"<"
3027d     00          | 	byte	0
3027e                 | LR__5143
3027e     3D          | 	byte	"="
3027f     00          | 	byte	0
30280                 | LR__5144
30280     62 65 65 70 | 	byte	"beep"
30284     00          | 	byte	0
30285                 | LR__5145
30285     62 2E       | 	byte	"b."
30287     00          | 	byte	0
30288                 | LR__5146
30288     62 6F 78    | 	byte	"box"
3028b     00          | 	byte	0
3028c                 | LR__5147
3028c     62 72 75 6E | 	byte	"brun"
30290     00          | 	byte	0
30291                 | LR__5148
30291     62 72 2E    | 	byte	"br."
30294     00          | 	byte	0
30295                 | LR__5149
30295     63 68 61 6E 
30299     67 65 66 72 
3029d     65 71       | 	byte	"changefreq"
3029f     00          | 	byte	0
302a0                 | LR__5150
302a0     63 66 2E    | 	byte	"cf."
302a3     00          | 	byte	0
302a4                 | LR__5151
302a4     63 68 61 6E 
302a8     67 65 70 61 
302ac     6E          | 	byte	"changepan"
302ad     00          | 	byte	0
302ae                 | LR__5152
302ae     63 70 2E    | 	byte	"cp."
302b1     00          | 	byte	0
302b2                 | LR__5153
302b2     63 68 61 6E 
302b6     67 65 76 6F 
302ba     6C          | 	byte	"changevol"
302bb     00          | 	byte	0
302bc                 | LR__5154
302bc     63 76 2E    | 	byte	"cv."
302bf     00          | 	byte	0
302c0                 | LR__5155
302c0     63 68 61 6E 
302c4     67 65 77 61 
302c8     76 65       | 	byte	"changewave"
302ca     00          | 	byte	0
302cb                 | LR__5156
302cb     63 77 2E    | 	byte	"cw."
302ce     00          | 	byte	0
302cf                 | LR__5157
302cf     63 69 72 63 
302d3     6C 65       | 	byte	"circle"
302d5     00          | 	byte	0
302d6                 | LR__5158
302d6     63 69 2E    | 	byte	"ci."
302d9     00          | 	byte	0
302da                 | LR__5159
302da     63 6C 69 63 
302de     6B          | 	byte	"click"
302df     00          | 	byte	0
302e0                 | LR__5160
302e0     63 6C 6F 73 
302e4     65          | 	byte	"close"
302e5     00          | 	byte	0
302e6                 | LR__5161
302e6     63 6C 73    | 	byte	"cls"
302e9     00          | 	byte	0
302ea                 | LR__5162
302ea     63 6F 6C 6F 
302ee     72          | 	byte	"color"
302ef     00          | 	byte	0
302f0                 | LR__5163
302f0     63 2E       | 	byte	"c."
302f2     00          | 	byte	0
302f3                 | LR__5164
302f3     63 73 61 76 
302f7     65          | 	byte	"csave"
302f8     00          | 	byte	0
302f9                 | LR__5165
302f9     63 73 2E    | 	byte	"cs."
302fc     00          | 	byte	0
302fd                 | LR__5166
302fd     63 75 72 73 
30301     6F 72       | 	byte	"cursor"
30303     00          | 	byte	0
30304                 | LR__5167
30304     64 65 66 73 
30308     6E 64       | 	byte	"defsnd"
3030a     00          | 	byte	0
3030b                 | LR__5168
3030b     64 65 66 65 
3030f     6E 76       | 	byte	"defenv"
30311     00          | 	byte	0
30312                 | LR__5169
30312     64 65 66 73 
30316     70 72 69 74 
3031a     65          | 	byte	"defsprite"
3031b     00          | 	byte	0
3031c                 | LR__5170
3031c     64 73 2E    | 	byte	"ds."
3031f     00          | 	byte	0
30320                 | LR__5171
30320     64 65 67    | 	byte	"deg"
30323     00          | 	byte	0
30324                 | LR__5172
30324     64 69 6D    | 	byte	"dim"
30327     00          | 	byte	0
30328                 | LR__5173
30328     64 69 72    | 	byte	"dir"
3032b     00          | 	byte	0
3032c                 | LR__5174
3032c     64 70 6F 6B 
30330     65          | 	byte	"dpoke"
30331     00          | 	byte	0
30332                 | LR__5175
30332     64 72 61 77 | 	byte	"draw"
30336     00          | 	byte	0
30337                 | LR__5176
30337     64 72 2E    | 	byte	"dr."
3033a     00          | 	byte	0
3033b                 | LR__5177
3033b     65 6C 73 65 | 	byte	"else"
3033f     00          | 	byte	0
30340                 | LR__5178
30340     65 6E 64    | 	byte	"end"
30343     00          | 	byte	0
30344                 | LR__5179
30344     65 6E 74 65 
30348     72          | 	byte	"enter"
30349     00          | 	byte	0
3034a                 | LR__5180
3034a     65 2E       | 	byte	"e."
3034c     00          | 	byte	0
3034d                 | LR__5181
3034d     66 63 69 72 
30351     63 6C 65    | 	byte	"fcircle"
30354     00          | 	byte	0
30355                 | LR__5182
30355     66 63 2E    | 	byte	"fc."
30358     00          | 	byte	0
30359                 | LR__5183
30359     66 69 6C 6C | 	byte	"fill"
3035d     00          | 	byte	0
3035e                 | LR__5184
3035e     66 69 2E    | 	byte	"fi."
30361     00          | 	byte	0
30362                 | LR__5185
30362     66 6F 6E 74 | 	byte	"font"
30366     00          | 	byte	0
30367                 | LR__5186
30367     66 6F 72    | 	byte	"for"
3036a     00          | 	byte	0
3036b                 | LR__5187
3036b     66 2E       | 	byte	"f."
3036d     00          | 	byte	0
3036e                 | LR__5188
3036e     66 72 61 6D 
30372     65          | 	byte	"frame"
30373     00          | 	byte	0
30374                 | LR__5189
30374     66 72 2E    | 	byte	"fr."
30377     00          | 	byte	0
30378                 | LR__5190
30378     67 65 74    | 	byte	"get"
3037b     00          | 	byte	0
3037c                 | LR__5191
3037c     67 6F 73 75 
30380     62          | 	byte	"gosub"
30381     00          | 	byte	0
30382                 | LR__5192
30382     67 6F 74 6F | 	byte	"goto"
30386     00          | 	byte	0
30387                 | LR__5193
30387     67 2E       | 	byte	"g."
30389     00          | 	byte	0
3038a                 | LR__5194
3038a     69 66       | 	byte	"if"
3038c     00          | 	byte	0
3038d                 | LR__5195
3038d     69 6E 6B    | 	byte	"ink"
30390     00          | 	byte	0
30391                 | LR__5196
30391     69 2E       | 	byte	"i."
30393     00          | 	byte	0
30394                 | LR__5197
30394     6C 69 73 74 | 	byte	"list"
30398     00          | 	byte	0
30399                 | LR__5198
30399     6C 2E       | 	byte	"l."
3039b     00          | 	byte	0
3039c                 | LR__5199
3039c     6C 6F 61 64 | 	byte	"load"
303a0     00          | 	byte	0
303a1                 | LR__5200
303a1     6C 6F 2E    | 	byte	"lo."
303a4     00          | 	byte	0
303a5                 | LR__5201
303a5     6C 70 6F 6B 
303a9     65          | 	byte	"lpoke"
303aa     00          | 	byte	0
303ab                 | LR__5202
303ab     6D 6F 64 65 | 	byte	"mode"
303af     00          | 	byte	0
303b0                 | LR__5203
303b0     6D 2E       | 	byte	"m."
303b2     00          | 	byte	0
303b3                 | LR__5204
303b3     6D 6F 75 73 
303b7     65          | 	byte	"mouse"
303b8     00          | 	byte	0
303b9                 | LR__5205
303b9     6E 65 77    | 	byte	"new"
303bc     00          | 	byte	0
303bd                 | LR__5206
303bd     6E 65 78 74 | 	byte	"next"
303c1     00          | 	byte	0
303c2                 | LR__5207
303c2     6E 2E       | 	byte	"n."
303c4     00          | 	byte	0
303c5                 | LR__5208
303c5     6F 70 65 6E | 	byte	"open"
303c9     00          | 	byte	0
303ca                 | LR__5209
303ca     70 61 70 65 
303ce     72          | 	byte	"paper"
303cf     00          | 	byte	0
303d0                 | LR__5210
303d0     70 61 2E    | 	byte	"pa."
303d3     00          | 	byte	0
303d4                 | LR__5211
303d4     70 69 6E 66 
303d8     6C 6F 61 74 | 	byte	"pinfloat"
303dc     00          | 	byte	0
303dd                 | LR__5212
303dd     70 69 6E 68 
303e1     69          | 	byte	"pinhi"
303e2     00          | 	byte	0
303e3                 | LR__5213
303e3     70 69 6E 6C 
303e7     6F          | 	byte	"pinlo"
303e8     00          | 	byte	0
303e9                 | LR__5214
303e9     70 69 6E 73 
303ed     74 61 72 74 | 	byte	"pinstart"
303f1     00          | 	byte	0
303f2                 | LR__5215
303f2     70 69 6E 74 
303f6     6F 67 67 6C 
303fa     65          | 	byte	"pintoggle"
303fb     00          | 	byte	0
303fc                 | LR__5216
303fc     70 69 6E 77 
30400     72 69 74 65 | 	byte	"pinwrite"
30404     00          | 	byte	0
30405                 | LR__5217
30405     70 6C 61 79 | 	byte	"play"
30409     00          | 	byte	0
3040a                 | LR__5218
3040a     70 2E       | 	byte	"p."
3040c     00          | 	byte	0
3040d                 | LR__5219
3040d     70 6C 6F 74 | 	byte	"plot"
30411     00          | 	byte	0
30412                 | LR__5220
30412     70 6C 2E    | 	byte	"pl."
30415     00          | 	byte	0
30416                 | LR__5221
30416     70 6F 6B 65 | 	byte	"poke"
3041a     00          | 	byte	0
3041b                 | LR__5222
3041b     70 6F 70    | 	byte	"pop"
3041e     00          | 	byte	0
3041f                 | LR__5223
3041f     70 6F 73 69 
30423     74 69 6F 6E | 	byte	"position"
30427     00          | 	byte	0
30428                 | LR__5224
30428     70 6F 73 2E | 	byte	"pos."
3042c     00          | 	byte	0
3042d                 | LR__5225
3042d     70 72 69 6E 
30431     74          | 	byte	"print"
30432     00          | 	byte	0
30433                 | LR__5226
30433     3F          | 	byte	"?"
30434     00          | 	byte	0
30435                 | LR__5227
30435     70 75 74    | 	byte	"put"
30438     00          | 	byte	0
30439                 | LR__5228
30439     72 61 64    | 	byte	"rad"
3043c     00          | 	byte	0
3043d                 | LR__5229
3043d     72 65 6C 65 
30441     61 73 65    | 	byte	"release"
30444     00          | 	byte	0
30445                 | LR__5230
30445     72 65 6D    | 	byte	"rem"
30448     00          | 	byte	0
30449                 | LR__5231
30449     27          | 	byte	"'"
3044a     00          | 	byte	0
3044b                 | LR__5232
3044b     72 65 74 75 
3044f     72 6E       | 	byte	"return"
30451     00          | 	byte	0
30452                 | LR__5233
30452     72 75 6E    | 	byte	"run"
30455     00          | 	byte	0
30456                 | LR__5234
30456     73 61 76 65 | 	byte	"save"
3045a     00          | 	byte	0
3045b                 | LR__5235
3045b     73 2E       | 	byte	"s."
3045d     00          | 	byte	0
3045e                 | LR__5236
3045e     73 65 74 64 
30462     65 6C 61 79 | 	byte	"setdelay"
30466     00          | 	byte	0
30467                 | LR__5237
30467     73 64 2E    | 	byte	"sd."
3046a     00          | 	byte	0
3046b                 | LR__5238
3046b     73 65 74 65 
3046f     6E 76       | 	byte	"setenv"
30471     00          | 	byte	0
30472                 | LR__5239
30472     73 65 2E    | 	byte	"se."
30475     00          | 	byte	0
30476                 | LR__5240
30476     73 65 74 6C 
3047a     65 6E       | 	byte	"setlen"
3047c     00          | 	byte	0
3047d                 | LR__5241
3047d     73 6C 2E    | 	byte	"sl."
30480     00          | 	byte	0
30481                 | LR__5242
30481     73 65 74 70 
30485     61 6E       | 	byte	"setpan"
30487     00          | 	byte	0
30488                 | LR__5243
30488     73 70       | 	byte	"sp"
3048a     00          | 	byte	0
3048b                 | LR__5244
3048b     73 65 74 73 
3048f     75 73 74 61 
30493     69 6E       | 	byte	"setsustain"
30495     00          | 	byte	0
30496                 | LR__5245
30496     73 73 2E    | 	byte	"ss."
30499     00          | 	byte	0
3049a                 | LR__5246
3049a     73 65 74 76 
3049e     6F 6C       | 	byte	"setvol"
304a0     00          | 	byte	0
304a1                 | LR__5247
304a1     73 76 2E    | 	byte	"sv."
304a4     00          | 	byte	0
304a5                 | LR__5248
304a5     73 65 74 77 
304a9     61 76 65    | 	byte	"setwave"
304ac     00          | 	byte	0
304ad                 | LR__5249
304ad     73 77 2E    | 	byte	"sw."
304b0     00          | 	byte	0
304b1                 | LR__5250
304b1     73 65 74 77 
304b5     61 76       | 	byte	"setwav"
304b7     00          | 	byte	0
304b8                 | LR__5251
304b8     73 68 75 74 
304bc     75 70       | 	byte	"shutup"
304be     00          | 	byte	0
304bf                 | LR__5252
304bf     73 68 2E    | 	byte	"sh."
304c2     00          | 	byte	0
304c3                 | LR__5253
304c3     73 6F 75 6E 
304c7     64          | 	byte	"sound"
304c8     00          | 	byte	0
304c9                 | LR__5254
304c9     73 6F 2E    | 	byte	"so."
304cc     00          | 	byte	0
304cd                 | LR__5255
304cd     73 70 72 69 
304d1     74 65       | 	byte	"sprite"
304d3     00          | 	byte	0
304d4                 | LR__5256
304d4     73 70 72 2E | 	byte	"spr."
304d8     00          | 	byte	0
304d9                 | LR__5257
304d9     74 68 65 6E | 	byte	"then"
304dd     00          | 	byte	0
304de                 | LR__5258
304de     77 61 69 74 
304e2     6D 73       | 	byte	"waitms"
304e4     00          | 	byte	0
304e5                 | LR__5259
304e5     77 2E       | 	byte	"w."
304e7     00          | 	byte	0
304e8                 | LR__5260
304e8     77 61 69 74 
304ec     63 6C 6F 63 
304f0     6B          | 	byte	"waitclock"
304f1     00          | 	byte	0
304f2                 | LR__5261
304f2     77 63 2E    | 	byte	"wc."
304f5     00          | 	byte	0
304f6                 | LR__5262
304f6     77 61 69 74 
304fa     76 62 6C    | 	byte	"waitvbl"
304fd     00          | 	byte	0
304fe                 | LR__5263
304fe     77 76 2E    | 	byte	"wv."
30501     00          | 	byte	0
30502                 | LR__5264
30502     77 78 70 69 
30506     6E          | 	byte	"wxpin"
30507     00          | 	byte	0
30508                 | LR__5265
30508     77 79 70 69 
3050c     6E          | 	byte	"wypin"
3050d     00          | 	byte	0
3050e                 | LR__5266
3050e     61 62 73    | 	byte	"abs"
30511     00          | 	byte	0
30512                 | LR__5267
30512     61 63 6F 73 | 	byte	"acos"
30516     00          | 	byte	0
30517                 | LR__5268
30517     61 64 72    | 	byte	"adr"
3051a     00          | 	byte	0
3051b                 | LR__5269
3051b     61 64 64 72 | 	byte	"addr"
3051f     00          | 	byte	0
30520                 | LR__5270
30520     61 73 63    | 	byte	"asc"
30523     00          | 	byte	0
30524                 | LR__5271
30524     61 73 69 6E | 	byte	"asin"
30528     00          | 	byte	0
30529                 | LR__5272
30529     61 74 6E    | 	byte	"atn"
3052c     00          | 	byte	0
3052d                 | LR__5273
3052d     62 69 6E 24 | 	byte	"bin$"
30531     00          | 	byte	0
30532                 | LR__5274
30532     63 68 72 24 | 	byte	"chr$"
30536     00          | 	byte	0
30537                 | LR__5275
30537     63 6F 73    | 	byte	"cos"
3053a     00          | 	byte	0
3053b                 | LR__5276
3053b     64 70 65 65 
3053f     6B          | 	byte	"dpeek"
30540     00          | 	byte	0
30541                 | LR__5277
30541     66 72 65    | 	byte	"fre"
30544     00          | 	byte	0
30545                 | LR__5278
30545     67 65 74 70 
30549     69 78 65 6C | 	byte	"getpixel"
3054d     00          | 	byte	0
3054e                 | LR__5279
3054e     67 65 2E    | 	byte	"ge."
30551     00          | 	byte	0
30552                 | LR__5280
30552     67 65 74 65 
30556     6E 76 73 75 
3055a     73 74 61 69 
3055e     6E          | 	byte	"getenvsustain"
3055f     00          | 	byte	0
30560                 | LR__5281
30560     67 65 74 6E 
30564     6F 74 65 76 
30568     61 6C 75 65 | 	byte	"getnotevalue"
3056c     00          | 	byte	0
3056d                 | LR__5282
3056d     67 65 74 74 
30571     69 6D 65    | 	byte	"gettime"
30574     00          | 	byte	0
30575                 | LR__5283
30575     68 65 78 24 | 	byte	"hex$"
30579     00          | 	byte	0
3057a                 | LR__5284
3057a     69 6E 6B 65 
3057e     79 24       | 	byte	"inkey$"
30580     00          | 	byte	0
30581                 | LR__5285
30581     69 6E 74    | 	byte	"int"
30584     00          | 	byte	0
30585                 | LR__5286
30585     6C 65 66 74 
30589     24          | 	byte	"left$"
3058a     00          | 	byte	0
3058b                 | LR__5287
3058b     6C 65 6E    | 	byte	"len"
3058e     00          | 	byte	0
3058f                 | LR__5288
3058f     6C 6F 67    | 	byte	"log"
30592     00          | 	byte	0
30593                 | LR__5289
30593     6C 70 65 65 
30597     6B          | 	byte	"lpeek"
30598     00          | 	byte	0
30599                 | LR__5290
30599     6D 69 64 24 | 	byte	"mid$"
3059d     00          | 	byte	0
3059e                 | LR__5291
3059e     6D 6F 75 73 
305a2     65 6B       | 	byte	"mousek"
305a4     00          | 	byte	0
305a5                 | LR__5292
305a5     6D 6F 75 73 
305a9     65 77       | 	byte	"mousew"
305ab     00          | 	byte	0
305ac                 | LR__5293
305ac     6D 6F 75 73 
305b0     65 78       | 	byte	"mousex"
305b2     00          | 	byte	0
305b3                 | LR__5294
305b3     6D 6F 75 73 
305b7     65 79       | 	byte	"mousey"
305b9     00          | 	byte	0
305ba                 | LR__5295
305ba     70 65 65 6B | 	byte	"peek"
305be     00          | 	byte	0
305bf                 | LR__5296
305bf     70 69 6E 72 
305c3     65 61 64    | 	byte	"pinread"
305c6     00          | 	byte	0
305c7                 | LR__5297
305c7     72 64 70 69 
305cb     6E          | 	byte	"rdpin"
305cc     00          | 	byte	0
305cd                 | LR__5298
305cd     72 69 67 68 
305d1     74 24       | 	byte	"right$"
305d3     00          | 	byte	0
305d4                 | LR__5299
305d4     72 71 70 69 
305d8     6E          | 	byte	"rqpin"
305d9     00          | 	byte	0
305da                 | LR__5300
305da     72 6F 75 6E 
305de     64          | 	byte	"round"
305df     00          | 	byte	0
305e0                 | LR__5301
305e0     72 6E 64    | 	byte	"rnd"
305e3     00          | 	byte	0
305e4                 | LR__5302
305e4     73 69 6E    | 	byte	"sin"
305e7     00          | 	byte	0
305e8                 | LR__5303
305e8     73 71 72    | 	byte	"sqr"
305eb     00          | 	byte	0
305ec                 | LR__5304
305ec     73 74 69 63 
305f0     6B          | 	byte	"stick"
305f1     00          | 	byte	0
305f2                 | LR__5305
305f2     73 74 72 69 
305f6     67          | 	byte	"strig"
305f7     00          | 	byte	0
305f8                 | LR__5306
305f8     73 74 72 24 | 	byte	"str$"
305fc     00          | 	byte	0
305fd                 | LR__5307
305fd     74 61 6E    | 	byte	"tan"
30600     00          | 	byte	0
30601                 | LR__5308
30601     76 61 6C    | 	byte	"val"
30604     00          | 	byte	0
30605                 | LR__5309
30605     76 61 72 70 
30609     74 72       | 	byte	"varptr"
3060b     00          | 	byte	0
3060c                 | LR__5310
3060c     61          | 	byte	"a"
3060d     00          | 	byte	0
3060e                 | LR__5311
3060e     7A          | 	byte	"z"
3060f     00          | 	byte	0
30610                 | LR__5312
30610     5F          | 	byte	"_"
30611     00          | 	byte	0
30612                 | LR__5313
30612     61          | 	byte	"a"
30613     00          | 	byte	0
30614                 | LR__5314
30614     7A          | 	byte	"z"
30615     00          | 	byte	0
30616                 | LR__5315
30616     30          | 	byte	"0"
30617     00          | 	byte	0
30618                 | LR__5316
30618     39          | 	byte	"9"
30619     00          | 	byte	0
3061a                 | LR__5317
3061a     5F          | 	byte	"_"
3061b     00          | 	byte	0
3061c                 | LR__5318
3061c     2E          | 	byte	"."
3061d     00          | 	byte	0
3061e                 | LR__5319
3061e     61          | 	byte	"a"
3061f     00          | 	byte	0
30620                 | LR__5320
30620     7A          | 	byte	"z"
30621     00          | 	byte	0
30622                 | LR__5321
30622     30          | 	byte	"0"
30623     00          | 	byte	0
30624                 | LR__5322
30624     39          | 	byte	"9"
30625     00          | 	byte	0
30626                 | LR__5323
30626     5F          | 	byte	"_"
30627     00          | 	byte	0
30628                 | LR__5324
30628     24          | 	byte	"$"
30629     00          | 	byte	0
3062a                 | LR__5325
3062a     25          | 	byte	"%"
3062b     00          | 	byte	0
3062c                 | LR__5326
3062c     21          | 	byte	"!"
3062d     00          | 	byte	0
3062e                 | LR__5327
3062e     30          | 	byte	"0"
3062f     00          | 	byte	0
30630                 | LR__5328
30630     39          | 	byte	"9"
30631     00          | 	byte	0
30632                 | LR__5329
30632     2E          | 	byte	"."
30633     00          | 	byte	0
30634                 | LR__5330
30634     24          | 	byte	"$"
30635     00          | 	byte	0
30636                 | LR__5331
30636     25          | 	byte	"%"
30637     00          | 	byte	0
30638                 | LR__5332
30638     2D          | 	byte	"-"
30639     00          | 	byte	0
3063a                 | LR__5333
3063a     2E          | 	byte	"."
3063b     00          | 	byte	0
3063c                 | LR__5334
3063c     24          | 	byte	"$"
3063d     00          | 	byte	0
3063e                 | LR__5335
3063e     25          | 	byte	"%"
3063f     00          | 	byte	0
30640                 | LR__5336
30640     30          | 	byte	"0"
30641     00          | 	byte	0
30642                 | LR__5337
30642     39          | 	byte	"9"
30643     00          | 	byte	0
30644                 | LR__5338
30644     5F          | 	byte	"_"
30645     00          | 	byte	0
30646                 | LR__5339
30646     2E          | 	byte	"."
30647     00          | 	byte	0
30648                 | LR__5340
30648     45          | 	byte	"E"
30649     00          | 	byte	0
3064a                 | LR__5341
3064a     65          | 	byte	"e"
3064b     00          | 	byte	0
3064c                 | LR__5342
3064c     2D          | 	byte	"-"
3064d     00          | 	byte	0
3064e                 | LR__5343
3064e     61          | 	byte	"a"
3064f     00          | 	byte	0
30650                 | LR__5344
30650     66          | 	byte	"f"
30651     00          | 	byte	0
30652                 | LR__5345
30652     30          | 	byte	"0"
30653     00          | 	byte	0
30654                 | LR__5346
30654     31          | 	byte	"1"
30655     00          | 	byte	0
30656                 | LR__5347
30656     5F          | 	byte	"_"
30657     00          | 	byte	0
30658                 | LR__5348
30658     2D          | 	byte	"-"
30659     00          | 	byte	0
3065a                 | LR__5349
3065a     65          | 	byte	"e"
3065b     00          | 	byte	0
3065c                 | LR__5350
3065c     2E          | 	byte	"."
3065d     00          | 	byte	0
3065e                 | LR__5351
3065e     45          | 	byte	"E"
3065f     00          | 	byte	0
30660                 | LR__5352
30660     65          | 	byte	"e"
30661     00          | 	byte	0
30662                 | LR__5353
30662     30          | 	byte	"0"
30663     00          | 	byte	0
30664                 | LR__5354
30664     39          | 	byte	"9"
30665     00          | 	byte	0
30666                 | LR__5355
30666     24          | 	byte	"$"
30667     00          | 	byte	0
30668                 | LR__5356
30668     25          | 	byte	"%"
30669     00          | 	byte	0
3066a                 | LR__5357
3066a     2D          | 	byte	"-"
3066b     00          | 	byte	0
3066c                 | LR__5358
3066c     24          | 	byte	"$"
3066d     00          | 	byte	0
3066e                 | LR__5359
3066e     25          | 	byte	"%"
3066f     00          | 	byte	0
30670                 | LR__5360
30670     30          | 	byte	"0"
30671     00          | 	byte	0
30672                 | LR__5361
30672     39          | 	byte	"9"
30673     00          | 	byte	0
30674                 | LR__5362
30674     5F          | 	byte	"_"
30675     00          | 	byte	0
30676                 | LR__5363
30676     30          | 	byte	"0"
30677     00          | 	byte	0
30678                 | LR__5364
30678     39          | 	byte	"9"
30679     00          | 	byte	0
3067a                 | LR__5365
3067a     61          | 	byte	"a"
3067b     00          | 	byte	0
3067c                 | LR__5366
3067c     66          | 	byte	"f"
3067d     00          | 	byte	0
3067e                 | LR__5367
3067e     5F          | 	byte	"_"
3067f     00          | 	byte	0
30680                 | LR__5368
30680     30          | 	byte	"0"
30681     00          | 	byte	0
30682                 | LR__5369
30682     31          | 	byte	"1"
30683     00          | 	byte	0
30684                 | LR__5370
30684     5F          | 	byte	"_"
30685     00          | 	byte	0
30686                 | LR__5371
30686     30          | 	byte	"0"
30687     00          | 	byte	0
30688                 | LR__5372
30688     39          | 	byte	"9"
30689     00          | 	byte	0
3068a                 | LR__5373
3068a     5F          | 	byte	"_"
3068b     00          | 	byte	0
3068c                 | LR__5374
3068c     22          | 	byte	34
3068d     00          | 	byte	0
3068e                 | LR__5375
3068e     22          | 	byte	34
3068f     00          | 	byte	0
30690                 | LR__5376
30690     44 69 6D 3A 
30694     20 61 74 20 
30698     6C 69 6E 65 
3069c     20          | 	byte	"Dim: at line "
3069d     00          | 	byte	0
3069e                 | LR__5377
3069e     3A 20 77 61 
306a2     72 6E 69 6E 
306a6     67 3A 20 74 
306aa     68 65 20 76 
306ae     61 72 69 61 
306b2     62 6C 65 20 
306b6     65 78 69 73 
306ba     74 65 64 2E | 	byte	": warning: the variable existed."
306be     00          | 	byte	0
306bf                 | LR__5378
306bf     28          | 	byte	"("
306c0     00          | 	byte	0
306c1                 | LR__5379
306c1     61 73       | 	byte	"as"
306c3     00          | 	byte	0
306c4                 | LR__5380
306c4     61 73       | 	byte	"as"
306c6     00          | 	byte	0
306c7                 | LR__5381
306c7     2C          | 	byte	","
306c8     00          | 	byte	0
306c9                 | LR__5382
306c9     29          | 	byte	")"
306ca     00          | 	byte	0
306cb                 | LR__5383
306cb     29          | 	byte	")"
306cc     00          | 	byte	0
306cd                 | LR__5384
306cd     61 73       | 	byte	"as"
306cf     00          | 	byte	0
306d0                 | LR__5385
306d0     62 79 74 65 | 	byte	"byte"
306d4     00          | 	byte	0
306d5                 | LR__5386
306d5     75 62 79 74 
306d9     65          | 	byte	"ubyte"
306da     00          | 	byte	0
306db                 | LR__5387
306db     73 68 6F 72 
306df     74          | 	byte	"short"
306e0     00          | 	byte	0
306e1                 | LR__5388
306e1     75 73 68 6F 
306e5     72 74       | 	byte	"ushort"
306e7     00          | 	byte	0
306e8                 | LR__5389
306e8     6C 6F 6E 67 | 	byte	"long"
306ec     00          | 	byte	0
306ed                 | LR__5390
306ed     69 6E 74 65 
306f1     67 65 72    | 	byte	"integer"
306f4     00          | 	byte	0
306f5                 | LR__5391
306f5     75 6C 6F 6E 
306f9     67          | 	byte	"ulong"
306fa     00          | 	byte	0
306fb                 | LR__5392
306fb     69 6E 74 36 
306ff     34          | 	byte	"int64"
30700     00          | 	byte	0
30701                 | LR__5393
30701     75 69 6E 74 
30705     36 34       | 	byte	"uint64"
30707     00          | 	byte	0
30708                 | LR__5394
30708     73 69 6E 67 
3070c     6C 65       | 	byte	"single"
3070e     00          | 	byte	0
3070f                 | LR__5395
3070f     64 6F 75 62 
30713     6C 65       | 	byte	"double"
30715     00          | 	byte	0
30716                 | LR__5396
30716     73 74 72 69 
3071a     6E 67       | 	byte	"string"
3071c     00          | 	byte	0
3071d                 | LR__5397
3071d     74 6F       | 	byte	"to"
3071f     00          | 	byte	0
30720                 | LR__5398
30720     73 74 65 70 | 	byte	"step"
30724     00          | 	byte	0
30725                 | LR__5399
30725     73 2E       | 	byte	"s."
30727     00          | 	byte	0
30728                 | LR__5400
30728     24          | 	byte	"$"
30729     00          | 	byte	0
3072a                 | LR__5401
3072a     26 68       | 	byte	"&h"
3072c     00          | 	byte	0
3072d                 | LR__5402
3072d     25          | 	byte	"%"
3072e     00          | 	byte	0
3072f                 | LR__5403
3072f     26 62       | 	byte	"&b"
30731     00          | 	byte	0
30732                 | LR__5404
30732                 | 	byte	
30732     00          | 	byte	0
30733                 | LR__5405
30733     61 63 6F 73 
30737     3A 20       | 	byte	"acos: "
30739     00          | 	byte	0
3073a                 | LR__5406
3073a     61 73 63 3A 
3073e     20          | 	byte	"asc: "
3073f     00          | 	byte	0
30740                 | LR__5407
30740     61 73 63 3A 
30744     20          | 	byte	"asc: "
30745     00          | 	byte	0
30746                 | LR__5408
30746     61 73 69 6E 
3074a     3A 20       | 	byte	"asin: "
3074c     00          | 	byte	0
3074d                 | LR__5409
3074d     61 74 6E 3A 
30751     20          | 	byte	"atn: "
30752     00          | 	byte	0
30753                 | LR__5410
30753     62 69 6E 24 
30757     3A 20       | 	byte	"bin$: "
30759     00          | 	byte	0
3075a                 | LR__5411
3075a     2F          | 	byte	"/"
3075b     00          | 	byte	0
3075c                 | LR__5412
3075c     2F 73 64 2F 
30760     62 69 6E 2F | 	byte	"/sd/bin/"
30764     00          | 	byte	0
30765                 | LR__5413
30765     53 79 73 74 
30769     65 6D 20 65 
3076d     72 72 6F 72 
30771     20          | 	byte	"System error "
30772     00          | 	byte	0
30773                 | LR__5414
30773     3A 20       | 	byte	": "
30775     00          | 	byte	0
30776                 | LR__5415
30776     63 68 72 24 
3077a     3A 20       | 	byte	"chr$: "
3077c     00          | 	byte	0
3077d                 | LR__5416
3077d     63 68 61 6E 
30781     6E 65 6C 23 
30785     20 65 78 70 
30789     65 63 74 65 
3078d     64          | 	byte	"channel# expected"
3078e     00          | 	byte	0
3078f                 | LR__5417
3078f     63 6F 73 3A 
30793     20          | 	byte	"cos: "
30794     00          | 	byte	0
30795                 | LR__5418
30795                 | 	byte	
30795     00          | 	byte	0
30796                 | LR__5419
30796                 | 	byte	
30796     00          | 	byte	0
30797                 | LR__5420
30797     2F 73 64 2F 
3079b     6D 65 64 69 
3079f     61 2F 68 2F | 	byte	"/sd/media/h/"
307a3     00          | 	byte	0
307a4                 | LR__5421
307a4     53 79 73 74 
307a8     65 6D 20 65 
307ac     72 72 6F 72 
307b0     20          | 	byte	"System error "
307b1     00          | 	byte	0
307b2                 | LR__5422
307b2     3A 20       | 	byte	": "
307b4     00          | 	byte	0
307b5                 | LR__5423
307b5                 | 	byte	
307b5     00          | 	byte	0
307b6                 | LR__5424
307b6                 | 	byte	
307b6     00          | 	byte	0
307b7                 | LR__5425
307b7     2F 73 64 2F 
307bb     6D 65 64 69 
307bf     61 2F 73 2F | 	byte	"/sd/media/s/"
307c3     00          | 	byte	0
307c4                 | LR__5426
307c4     53 79 73 74 
307c8     65 6D 20 65 
307cc     72 72 6F 72 
307d0     20          | 	byte	"System error "
307d1     00          | 	byte	0
307d2                 | LR__5427
307d2     3A 20       | 	byte	": "
307d4     00          | 	byte	0
307d5                 | LR__5428
307d5     2F 73 64 2F 
307d9     62 61 73    | 	byte	"/sd/bas"
307dc     00          | 	byte	0
307dd                 | LR__5429
307dd     57 6F 72 6B 
307e1     69 6E 67 20 
307e5     64 69 72 65 
307e9     63 74 6F 72 
307ed     79 3A 20    | 	byte	"Working directory: "
307f0     00          | 	byte	0
307f1                 | LR__5430
307f1                 | 	byte	
307f1     00          | 	byte	0
307f2                 | LR__5431
307f2     2A          | 	byte	"*"
307f3     00          | 	byte	0
307f4                 | LR__5432
307f4                 | 	byte	
307f4     00          | 	byte	0
307f5                 | LR__5433
307f5     5B 64 69 72 
307f9     5D 20       | 	byte	"[dir] "
307fb     00          | 	byte	0
307fc                 | LR__5434
307fc     4D 6F 72 65 
30800     20 74 68 61 
30804     6E 20 31 32 
30808     38 20 65 6E 
3080c     74 72 69 65 
30810     73 20 66 6F 
30814     75 6E 64 3A 
30818     20 63 6C 65 
3081c     61 6E 20 79 
30820     6F 75 72 20 
30824     64 69 72 65 
30828     63 74 6F 72 
3082c     79          | 	byte	"More than 128 entries found: clean your directory"
3082d     00          | 	byte	0
3082e                 | LR__5435
3082e     2A          | 	byte	"*"
3082f     00          | 	byte	0
30830                 | LR__5436
30830                 | 	byte	
30830     00          | 	byte	0
30831                 | LR__5437
30831     4D 6F 72 65 
30835     20 74 68 61 
30839     6E 20 31 32 
3083d     38 20 65 6E 
30841     74 72 69 65 
30845     73 20 66 6F 
30849     75 6E 64 3A 
3084d     20 63 6C 65 
30851     61 6E 20 79 
30855     6F 75 72 20 
30859     64 69 72 65 
3085d     63 74 6F 72 
30861     79          | 	byte	"More than 128 entries found: clean your directory"
30862     00          | 	byte	0
30863                 | LR__5438
30863     45 72 72 6F 
30867     72 20       | 	byte	"Error "
30869     00          | 	byte	0
3086a                 | LR__5439
3086a     3A 20       | 	byte	": "
3086c     00          | 	byte	0
3086d                 | LR__5440
3086d     67 65 74 65 
30871     6E 76 73 75 
30875     73 74 61 69 
30879     6E 3A 20    | 	byte	"getenvsustain: "
3087c     00          | 	byte	0
3087d                 | LR__5441
3087d     67 65 74 70 
30881     69 78 65 6C 
30885     3A 20       | 	byte	"getpixel: "
30887     00          | 	byte	0
30888                 | LR__5442
30888     68 65 78 24 
3088c     3A 20       | 	byte	"hex$: "
3088e     00          | 	byte	0
3088f                 | LR__5443
3088f                 | 	byte	
3088f     00          | 	byte	0
30890                 | LR__5444
30890     6C 65 66 74 
30894     24 3A 20    | 	byte	"left$: "
30897     00          | 	byte	0
30898                 | LR__5445
30898     6C 65 66 74 
3089c     24 3A 20    | 	byte	"left$: "
3089f     00          | 	byte	0
308a0                 | LR__5446
308a0     6C 65 6E 3A 
308a4     20          | 	byte	"len: "
308a5     00          | 	byte	0
308a6                 | LR__5447
308a6     6C 65 6E 3A 
308aa     20          | 	byte	"len: "
308ab     00          | 	byte	0
308ac                 | LR__5448
308ac                 | 	byte	
308ac     00          | 	byte	0
308ad                 | LR__5449
308ad     2F          | 	byte	"/"
308ae     00          | 	byte	0
308af                 | LR__5450
308af     2F          | 	byte	"/"
308b0     00          | 	byte	0
308b1                 | LR__5451
308b1     2E 62 61 73 | 	byte	".bas"
308b5     00          | 	byte	0
308b6                 | LR__5452
308b6     53 79 73 74 
308ba     65 6D 20 65 
308be     72 72 6F 72 
308c2     20          | 	byte	"System error "
308c3     00          | 	byte	0
308c4                 | LR__5453
308c4     3A 20       | 	byte	": "
308c6     00          | 	byte	0
308c7                 | LR__5454
308c7     2E 62 61 73 | 	byte	".bas"
308cb     00          | 	byte	0
308cc                 | LR__5455
308cc     2F          | 	byte	"/"
308cd     00          | 	byte	0
308ce                 | LR__5456
308ce                 | 	byte	
308ce     00          | 	byte	0
308cf                 | LR__5457
308cf     4C 6F 61 64 
308d3     65 64 20    | 	byte	"Loaded "
308d6     00          | 	byte	0
308d7                 | LR__5458
308d7     2F          | 	byte	"/"
308d8     00          | 	byte	0
308d9                 | LR__5459
308d9     6C 6F 67 3A 
308dd     20          | 	byte	"log: "
308de     00          | 	byte	0
308df                 | LR__5460
308df     6D 69 64 24 
308e3     3A 20       | 	byte	"mid$: "
308e5     00          | 	byte	0
308e6                 | LR__5461
308e6     6D 69 64 24 
308ea     3A 20       | 	byte	"mid$: "
308ec     00          | 	byte	0
308ed                 | LR__5462
308ed     20 42 41 53 
308f1     49 43 20 62 
308f5     79 74 65 73 
308f9     20 66 72 65 
308fd     65          | 	byte	" BASIC bytes free"
308fe     00          | 	byte	0
308ff                 | LR__5463
308ff                 | 	byte	
308ff     00          | 	byte	0
30900                 | LR__5464
30900                 | 	byte	
30900     00          | 	byte	0
30901                 | LR__5465
30901     6E 6F 6E 61 
30905     6D 65 2E 62 
30909     61 73       | 	byte	"noname.bas"
3090b     00          | 	byte	0
3090c                 | LR__5466
3090c     66 69 6C 65 
30910     6E 61 6D 65 
30914     20 65 78 70 
30918     65 63 74 65 
3091c     64          | 	byte	"filename expected"
3091d     00          | 	byte	0
3091e                 | LR__5467
3091e     72 65 61 64 | 	byte	"read"
30922     00          | 	byte	0
30923                 | LR__5468
30923     77 72 69 74 
30927     65          | 	byte	"write"
30928     00          | 	byte	0
30929                 | LR__5469
30929     61 70 70 65 
3092d     6E 64       | 	byte	"append"
3092f     00          | 	byte	0
30930                 | LR__5470
30930     63 68 61 6E 
30934     6E 65 6C 23 
30938     20 65 78 70 
3093c     65 63 74 65 
30940     64          | 	byte	"channel# expected"
30941     00          | 	byte	0
30942                 | LR__5471
30942     4F 70 65 6E 
30946     3A 20 69 6E 
3094a     76 61 6C 69 
3094e     64 20 6D 6F 
30952     64 65       | 	byte	"Open: invalid mode"
30954     00          | 	byte	0
30955                 | LR__5472
30955     50 72 69 6E 
30959     74 20 74 6F 
3095d     20 63 68 61 
30961     6E 6E 65 6C 
30965     20 28 6E 6F 
30969     74 20 79 65 
3096d     74 20 69 6D 
30971     70 6C 65 6D 
30975     65 6E 74 65 
30979     64 29       | 	byte	"Print to channel (not yet implemented)"
3097b     00          | 	byte	0
3097c                 | LR__5473
3097c     72 69 67 68 
30980     74 24 3A 20 | 	byte	"right$: "
30984     00          | 	byte	0
30985                 | LR__5474
30985     72 69 67 68 
30989     74 24 3A 20 | 	byte	"right$: "
3098d     00          | 	byte	0
3098e                 | LR__5475
3098e     72 6E 64 3A 
30992     20          | 	byte	"rnd: "
30993     00          | 	byte	0
30994                 | LR__5476
30994     72 6E 64 3A 
30998     20          | 	byte	"rnd: "
30999     00          | 	byte	0
3099a                 | LR__5477
3099a     53 74 6F 70 
3099e     70 65 64 20 
309a2     61 74 20 6C 
309a6     69 6E 65 20 | 	byte	"Stopped at line "
309aa     00          | 	byte	0
309ab                 | LR__5478
309ab                 | 	byte	
309ab     00          | 	byte	0
309ac                 | LR__5479
309ac     2F          | 	byte	"/"
309ad     00          | 	byte	0
309ae                 | LR__5480
309ae                 | 	byte	
309ae     00          | 	byte	0
309af                 | LR__5481
309af     53 61 76 65 
309b3     64 20 61 73 
309b7     20          | 	byte	"Saved as "
309b8     00          | 	byte	0
309b9                 | LR__5482
309b9     2F          | 	byte	"/"
309ba     00          | 	byte	0
309bb                 | LR__5483
309bb     73 69 6E 3A 
309bf     20          | 	byte	"sin: "
309c0     00          | 	byte	0
309c1                 | LR__5484
309c1     73 71 72 3A 
309c5     20          | 	byte	"sqr: "
309c6     00          | 	byte	0
309c7                 | LR__5485
309c7     73 74 69 63 
309cb     6B 3A 20    | 	byte	"stick: "
309ce     00          | 	byte	0
309cf                 | LR__5486
309cf     73 74 72 69 
309d3     67 3A 20    | 	byte	"strig: "
309d6     00          | 	byte	0
309d7                 | LR__5487
309d7     74 61 6E 3A 
309db     20          | 	byte	"tan: "
309dc     00          | 	byte	0
309dd                 | LR__5488
309dd     76 61 6C 3A 
309e1     20          | 	byte	"val: "
309e2     00          | 	byte	0
309e3                 | LR__5489
309e3     76 61 6C 3A 
309e7     20          | 	byte	"val: "
309e8     00          | 	byte	0
309e9                 | LR__5490
309e9     24          | 	byte	"$"
309ea     00          | 	byte	0
309eb                 | LR__5491
309eb     26 68       | 	byte	"&h"
309ed     00          | 	byte	0
309ee                 | LR__5492
309ee     25          | 	byte	"%"
309ef     00          | 	byte	0
309f0                 | LR__5493
309f0     26 62       | 	byte	"&b"
309f2     00          | 	byte	0
309f3                 | LR__5494
309f3                 | 	byte	
309f3     00          | 	byte	0
309f4                 | LR__5495
309f4     45 78 70 65 
309f8     63 74 65 64 
309fc     20 6E 75 6D 
30a00     62 65 72 2C 
30a04     20 67 6F 74 
30a08     20 73 6F 6D 
30a0c     65 74 68 69 
30a10     6E 67 20 65 
30a14     6C 73 65 2E | 	byte	"Expected number, got something else."
30a18     00          | 	byte	0
30a19                 | LR__5496
30a19     43 61 6E 6E 
30a1d     6F 74 20 61 
30a21     64 64 20 61 
30a25     20 6E 75 6D 
30a29     62 65 72 20 
30a2d     74 6F 20 61 
30a31     20 73 74 72 
30a35     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30a39     00          | 	byte	0
30a3a                 | LR__5497
30a3a     43 61 6E 6E 
30a3e     6F 74 20 73 
30a42     75 62 73 74 
30a46     72 61 63 74 
30a4a     20 73 74 72 
30a4e     69 6E 67 73 
30a52     2E          | 	byte	"Cannot substract strings."
30a53     00          | 	byte	0
30a54                 | LR__5498
30a54     55 6E 6B 6E 
30a58     6F 77 6E 20 
30a5c     65 72 72 6F 
30a60     72 20 77 68 
30a64     69 6C 65 20 
30a68     61 64 64 69 
30a6c     6E 67 2E    | 	byte	"Unknown error while adding."
30a6f     00          | 	byte	0
30a70                 | LR__5499
30a70     55 6E 6B 6E 
30a74     6F 77 6E 20 
30a78     65 72 72 6F 
30a7c     72 20 77 68 
30a80     69 6C 65 20 
30a84     73 75 62 73 
30a88     74 72 61 63 
30a8c     74 69 6E 67 
30a90     2E          | 	byte	"Unknown error while substracting."
30a91     00          | 	byte	0
30a92                 | LR__5500
30a92     43 61 6E 6E 
30a96     6F 74 20 64 
30a9a     6F 20 6C 6F 
30a9e     67 69 63 20 
30aa2     6F 70 65 72 
30aa6     61 74 69 6F 
30aaa     6E 20 6F 6E 
30aae     20 73 74 72 
30ab2     69 6E 67 20 
30ab6     6F 72 20 66 
30aba     6C 6F 61 74 
30abe     2E          | 	byte	"Cannot do logic operation on string or float."
30abf     00          | 	byte	0
30ac0                 | LR__5501
30ac0     55 6E 6B 6E 
30ac4     6F 77 6E 20 
30ac8     65 72 72 6F 
30acc     72 20 77 68 
30ad0     69 6C 65 20 
30ad4     64 6F 69 6E 
30ad8     67 20 6C 6F 
30adc     67 69 63 20 
30ae0     6F 70 65 72 
30ae4     61 74 69 6F 
30ae8     6E 2E       | 	byte	"Unknown error while doing logic operation."
30aea     00          | 	byte	0
30aeb                 | LR__5502
30aeb     43 61 6E 6E 
30aef     6F 74 20 6D 
30af3     75 6C 74 69 
30af7     70 6C 79 20 
30afb     73 74 72 69 
30aff     6E 67 73 2E | 	byte	"Cannot multiply strings."
30b03     00          | 	byte	0
30b04                 | LR__5503
30b04     55 6E 6B 6E 
30b08     6F 77 6E 20 
30b0c     65 72 72 6F 
30b10     72 20 77 68 
30b14     69 6C 65 20 
30b18     6D 75 6C 74 
30b1c     69 70 6C 79 
30b20     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30b24     00          | 	byte	0
30b25                 | LR__5504
30b25     43 61 6E 6E 
30b29     6F 74 20 64 
30b2d     69 76 69 64 
30b31     65 20 73 74 
30b35     72 69 6E 67 
30b39     73 2E       | 	byte	"Cannot divide strings."
30b3b     00          | 	byte	0
30b3c                 | LR__5505
30b3c     55 6E 6B 6E 
30b40     6F 77 6E 20 
30b44     65 72 72 6F 
30b48     72 20 77 68 
30b4c     69 6C 65 20 
30b50     64 69 76 69 
30b54     64 69 6E 67 
30b58     2E          | 	byte	"Unknown error while dividing."
30b59     00          | 	byte	0
30b5a                 | LR__5506
30b5a     43 61 6E 6E 
30b5e     6F 74 20 63 
30b62     6F 6D 70 75 
30b66     74 65 20 61 
30b6a     20 70 6F 77 
30b6e     65 72 20 6F 
30b72     66 20 61 20 
30b76     73 74 72 69 
30b7a     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30b7d     00          | 	byte	0
30b7e                 | LR__5507
30b7e     55 6E 6B 6E 
30b82     6F 77 6E 20 
30b86     65 72 72 6F 
30b8a     72 20 77 68 
30b8e     69 6C 65 20 
30b92     63 6F 6D 70 
30b96     75 74 69 6E 
30b9a     67 20 61 20 
30b9e     70 6F 77 65 
30ba2     72 2E       | 	byte	"Unknown error while computing a power."
30ba4     00          | 	byte	0
30ba5                 | LR__5508
30ba5     52 69 67 68 
30ba9     74 20 70 61 
30bad     72 65 6E 74 
30bb1     68 65 73 69 
30bb5     73 20 65 78 
30bb9     70 65 63 74 
30bbd     65 64 2E    | 	byte	"Right parenthesis expected."
30bc0     00          | 	byte	0
30bc1                 | LR__5509
30bc1     45 78 70 65 
30bc5     63 74 65 64 
30bc9     20 73 74 72 
30bcd     69 6E 67 2E | 	byte	"Expected string."
30bd1     00          | 	byte	0
30bd2                 | LR__5510
30bd2     45 78 70 65 
30bd6     63 74 65 64 
30bda     20 66 6C 6F 
30bde     61 74 2E    | 	byte	"Expected float."
30be1     00          | 	byte	0
30be2                 | LR__5511
30be2     45 78 70 65 
30be6     63 74 65 64 
30bea     20 75 6E 73 
30bee     69 67 6E 65 
30bf2     64 20 69 6E 
30bf6     74 65 67 65 
30bfa     72 2E       | 	byte	"Expected unsigned integer."
30bfc     00          | 	byte	0
30bfd                 | LR__5512
30bfd     45 78 70 65 
30c01     63 74 65 64 
30c05     20 69 6E 74 
30c09     65 67 65 72 
30c0d     2E          | 	byte	"Expected integer."
30c0e     00          | 	byte	0
30c0f                 | LR__5513
30c0f     4E 6F 20 6D 
30c13     6F 72 65 20 
30c17     76 61 72 69 
30c1b     61 62 6C 65 
30c1f     20 73 6C 6F 
30c23     74 73 2E    | 	byte	"No more variable slots."
30c26     00          | 	byte	0
30c27                 | LR__5514
30c27     56 61 72 69 
30c2b     61 62 6C 65 
30c2f     20 6E 6F 74 
30c33     20 66 6F 75 
30c37     6E 64 2E    | 	byte	"Variable not found."
30c3a     00          | 	byte	0
30c3b                 | LR__5515
30c3b     43 6F 6D 6D 
30c3f     61 20 65 78 
30c43     70 65 63 74 
30c47     65 64 2E    | 	byte	"Comma expected."
30c4a     00          | 	byte	0
30c4b                 | LR__5516
30c4b     43 6F 6D 6D 
30c4f     61 20 6F 72 
30c53     20 73 65 6D 
30c57     69 63 6F 6C 
30c5b     6F 6E 20 65 
30c5f     78 70 65 63 
30c63     74 65 64 2E | 	byte	"Comma or semicolon expected."
30c67     00          | 	byte	0
30c68                 | LR__5517
30c68     55 6E 6B 6E 
30c6c     6F 77 6E 20 
30c70     63 6F 6D 6D 
30c74     61 6E 64 2E | 	byte	"Unknown command."
30c78     00          | 	byte	0
30c79                 | LR__5518
30c79     53 74 61 63 
30c7d     6B 20 75 6E 
30c81     64 65 72 66 
30c85     6C 6F 77 2E | 	byte	"Stack underflow."
30c89     00          | 	byte	0
30c8a                 | LR__5519
30c8a     43 61 6E 6E 
30c8e     6F 74 20 65 
30c92     78 65 63 75 
30c96     74 65 20 67 
30c9a     6F 74 6F 20 
30c9e     6F 72 20 67 
30ca2     6F 73 75 62 
30ca6     20 69 6E 20 
30caa     74 68 65 20 
30cae     69 6D 6D 65 
30cb2     64 69 61 74 
30cb6     65 20 6D 6F 
30cba     64 65 2E    | 	byte	"Cannot execute goto or gosub in the immediate mode."
30cbd     00          | 	byte	0
30cbe                 | LR__5520
30cbe     43 61 6E 6E 
30cc2     6F 74 20 6C 
30cc6     6F 61 64 20 
30cca     66 72 6F 6D 
30cce     20 74 68 69 
30cd2     73 20 66 69 
30cd6     6C 65 2E    | 	byte	"Cannot load from this file."
30cd9     00          | 	byte	0
30cda                 | LR__5521
30cda     54 68 65 20 
30cde     70 72 6F 67 
30ce2     72 61 6D 20 
30ce6     69 73 20 65 
30cea     6D 70 74 79 
30cee     2E          | 	byte	"The program is empty."
30cef     00          | 	byte	0
30cf0                 | LR__5522
30cf0     49 66 20 61 
30cf4     66 74 65 72 
30cf8     20 69 66 2E | 	byte	"If after if."
30cfc     00          | 	byte	0
30cfd                 | LR__5523
30cfd     45 6D 70 74 
30d01     79 20 65 78 
30d05     70 72 65 73 
30d09     73 69 6F 6E 
30d0d     2E          | 	byte	"Empty expression."
30d0e     00          | 	byte	0
30d0f                 | LR__5524
30d0f     53 74 72 69 
30d13     6E 67 20 65 
30d17     78 70 65 63 
30d1b     74 65 64 2E | 	byte	"String expected."
30d1f     00          | 	byte	0
30d20                 | LR__5525
30d20     49 6E 74 65 
30d24     72 70 72 65 
30d28     74 65 72 20 
30d2c     69 6E 74 65 
30d30     72 6E 61 6C 
30d34     20 65 72 72 
30d38     6F 72 2E    | 	byte	"Interpreter internal error."
30d3b     00          | 	byte	0
30d3c                 | LR__5526
30d3c     45 78 70 65 
30d40     63 74 65 64 
30d44     20 61 73 73 
30d48     69 67 6E 2E | 	byte	"Expected assign."
30d4c     00          | 	byte	0
30d4d                 | LR__5527
30d4d     45 78 70 65 
30d51     63 74 65 64 
30d55     20 27 74 6F 
30d59     27 2E       | 	byte	"Expected 'to'."
30d5b     00          | 	byte	0
30d5c                 | LR__5528
30d5c     45 78 70 65 
30d60     63 74 65 64 
30d64     20 69 6E 74 
30d68     65 67 65 72 
30d6c     20 76 61 72 
30d70     69 61 62 6C 
30d74     65 2E       | 	byte	"Expected integer variable."
30d76     00          | 	byte	0
30d77                 | LR__5529
30d77     55 6E 69 6E 
30d7b     69 74 69 61 
30d7f     6C 69 7A 65 
30d83     64 20 76 61 
30d87     72 69 61 62 
30d8b     6C 65 20 69 
30d8f     6E 20 27 6E 
30d93     65 78 74 27 
30d97     2C 20 75 73 
30d9b     65 20 27 66 
30d9f     6F 72 27 20 
30da3     62 65 66 6F 
30da7     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
30daa     00          | 	byte	0
30dab                 | LR__5530
30dab     4E 6F 20 6D 
30daf     6F 72 65 20 
30db3     73 6C 6F 74 
30db7     73 20 66 6F 
30dbb     72 20 27 66 
30dbf     6F 72 27 2E | 	byte	"No more slots for 'for'."
30dc3     00          | 	byte	0
30dc4                 | LR__5531
30dc4     27 4E 65 78 
30dc8     74 27 20 64 
30dcc     6F 65 73 6E 
30dd0     27 74 20 6D 
30dd4     61 74 63 68 
30dd8     20 27 66 6F 
30ddc     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
30ddf     00          | 	byte	0
30de0                 | LR__5532
30de0     27 47 6F 74 
30de4     6F 27 20 74 
30de8     61 72 67 65 
30dec     74 20 6C 69 
30df0     6E 65 20 6E 
30df4     6F 74 20 66 
30df8     6F 75 6E 64 
30dfc     2E          | 	byte	"'Goto' target line not found."
30dfd     00          | 	byte	0
30dfe                 | LR__5533
30dfe     42 61 64 20 
30e02     6E 75 6D 62 
30e06     65 72 20 6F 
30e0a     66 20 70 61 
30e0e     72 61 6D 65 
30e12     74 65 72 73 | 	byte	"Bad number of parameters"
30e16     00          | 	byte	0
30e17                 | LR__5534
30e17     46 75 6E 63 
30e1b     74 69 6F 6E 
30e1f     20 75 6E 64 
30e23     65 66 69 6E 
30e27     65 64 20 66 
30e2b     6F 72 20 73 
30e2f     74 72 69 6E 
30e33     67 73       | 	byte	"Function undefined for strings"
30e35     00          | 	byte	0
30e36                 | LR__5535
30e36     42 61 64 20 
30e3a     70 61 72 61 
30e3e     6D 65 74 65 
30e42     72 2E       | 	byte	"Bad parameter."
30e44     00          | 	byte	0
30e45                 | LR__5536
30e45     43 61 6E 6E 
30e49     6F 74 20 64 
30e4d     65 63 6C 61 
30e51     72 65 20 61 
30e55     6E 20 61 72 
30e59     72 61 79 3A 
30e5d     20 74 68 65 
30e61     20 76 61 72 
30e65     69 61 62 6C 
30e69     65 20 65 78 
30e6d     69 73 74 73 
30e71     2E          | 	byte	"Cannot declare an array: the variable exists."
30e72     00          | 	byte	0
30e73                 | LR__5537
30e73     45 78 70 65 
30e77     63 74 65 64 
30e7b     20 27 28 27 
30e7f     2E          | 	byte	"Expected '('."
30e80     00          | 	byte	0
30e81                 | LR__5538
30e81     45 78 70 65 
30e85     63 74 65 64 
30e89     20 27 29 27 
30e8d     20 6F 72 20 
30e91     27 2C 27 2E | 	byte	"Expected ')' or ','."
30e95     00          | 	byte	0
30e96                 | LR__5539
30e96     4E 6F 20 6D 
30e9a     6F 72 65 20 
30e9e     74 68 61 6E 
30ea2     20 33 20 64 
30ea6     69 6D 65 6E 
30eaa     73 69 6F 6E 
30eae     73 20 73 75 
30eb2     70 70 6F 72 
30eb6     74 65 64    | 	byte	"No more than 3 dimensions supported"
30eb9     00          | 	byte	0
30eba                 | LR__5540
30eba     56 61 72 69 
30ebe     61 62 6C 65 
30ec2     20 6E 61 6D 
30ec6     65 20 65 78 
30eca     70 65 63 74 
30ece     65 64       | 	byte	"Variable name expected"
30ed0     00          | 	byte	0
30ed1                 | LR__5541
30ed1     54 79 70 65 
30ed5     20 6E 61 6D 
30ed9     65 20 65 78 
30edd     70 65 63 74 
30ee1     65 64       | 	byte	"Type name expected"
30ee3     00          | 	byte	0
30ee4                 | LR__5542
30ee4     54 79 70 65 
30ee8     20 6E 6F 74 
30eec     20 73 75 70 
30ef0     70 6F 72 74 
30ef4     65 64 20 79 
30ef8     65 74       | 	byte	"Type not supported yet"
30efa     00          | 	byte	0
30efb                 | LR__5543
30efb     41 72 72 61 
30eff     79 20 69 6E 
30f03     64 65 78 20 
30f07     6F 75 74 20 
30f0b     6F 66 20 72 
30f0f     61 6E 67 65 | 	byte	"Array index out of range"
30f13     00          | 	byte	0
30f14                 | LR__5544
30f14     42 61 64 20 
30f18     74 79 70 65 
30f1c     20 77 68 69 
30f20     6C 65 20 61 
30f24     73 73 69 67 
30f28     6E 69 6E 67 
30f2c     20 74 6F 20 
30f30     61 72 72 61 
30f34     79          | 	byte	"Bad type while assigning to array"
30f35     00          | 	byte	0
30f36                 | LR__5545
30f36     54 6F 6F 20 
30f3a     6D 61 6E 79 
30f3e     20 76 61 72 
30f42     69 61 62 6C 
30f46     65 73       | 	byte	"Too many variables"
30f48     00          | 	byte	0
30f49                 | LR__5546
30f49     27 54 68 65 
30f4d     6E 27 20 65 
30f51     78 70 65 63 
30f55     74 65 64    | 	byte	"'Then' expected"
30f58     00          | 	byte	0
30f59                 | LR__5547
30f59     45 72 72 6F 
30f5d     72 20       | 	byte	"Error "
30f5f     00          | 	byte	0
30f60                 | LR__5548
30f60     3A 20       | 	byte	": "
30f62     00          | 	byte	0
30f63                 | LR__5549
30f63     2F 73 64    | 	byte	"/sd"
30f66     00          | 	byte	0
30f67                 | LR__5550
30f67     2F 73 64 2F 
30f6b     62 61 73    | 	byte	"/sd/bas"
30f6e     00          | 	byte	0
30f6f                 | LR__5551
30f6f     2F 73 64 2F 
30f73     62 61 73    | 	byte	"/sd/bas"
30f76     00          | 	byte	0
30f77                 | LR__5552
30f77     20 42 41 53 
30f7b     49 43 20 62 
30f7f     79 74 65 73 
30f83     20 66 72 65 
30f87     65          | 	byte	" BASIC bytes free"
30f88     00          | 	byte	0
30f89                 | LR__5553
30f89     52 65 61 64 
30f8d     79          | 	byte	"Ready"
30f8e     00          | 	byte	0
30f8f                 | LR__5554
30f8f     6E 6F 6E 61 
30f93     6D 65 2E 62 
30f97     61 73       | 	byte	"noname.bas"
30f99     00          | 	byte	0
30f9a                 | LR__5555
30f9a                 | 	byte	
30f9a     00          | 	byte	0
30f9b     00          | 	alignl
30f9c                 | _dat_
30f9c     00 00 00 00 
30fa0     00 00 00 00 
30fa4     00 00 00 00 
30fa8     00 00 00 00 | 	byte	$00[16]
30fac     61 41 17 0E 
30fb0     62 42 00 00 
30fb4     63 43 19 10 
30fb8     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
30fbc     65 45 18 0F 
30fc0     66 46 00 00 
30fc4     67 47 00 00 
30fc8     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
30fcc     69 49 00 00 
30fd0     6A 4A 00 00 
30fd4     6B 4B 00 00 
30fd8     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
30fdc     6D 4D 00 00 
30fe0     6E 4E 1A 11 
30fe4     6F 4F 1E 15 
30fe8     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
30fec     71 51 00 00 
30ff0     72 52 00 00 
30ff4     73 53 1B 12 
30ff8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
30ffc     75 55 00 00 
31000     76 56 00 00 
31004     77 57 00 00 
31008     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
3100c     79 59 00 00 
31010     7A 5A 1D 14 
31014     31 21 04 00 
31018     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
3101c     33 23 06 00 
31020     34 24 07 00 
31024     35 25 08 00 
31028     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
3102c     37 26 0A 00 
31030     38 2A 0B 00 
31034     39 28 0C 00 
31038     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
3103c     8D 8D 00 00 
31040     9B 9B 00 00 
31044     88 88 00 00 
31048     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
3104c     20 20 00 00 
31050     2D 5F 00 00 
31054     3D 2B 00 00 
31058     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
3105c     5D 7D 00 00 
31060     5C 7C 00 00 
31064     23 7E 00 00 
31068     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
3106c     27 22 00 00 
31070     60 7E 03 00 
31074     2C 3C 00 00 
31078     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
3107c     2F 3F 00 00 
31080     B9 B9 00 00 
31084     BA 00 00 00 
31088     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
3108c     BC 00 00 00 
31090     BD 00 00 00 
31094     BE 00 00 00 
31098     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
3109c     C0 00 00 00 
310a0     C1 00 00 00 
310a4     C2 00 00 00 
310a8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
310ac     C4 00 00 00 
310b0     C5 00 00 00 
310b4     C6 00 00 00 
310b8     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
310bc     C8 00 00 00 
310c0     C9 00 00 00 
310c4     CA 00 00 00 
310c8     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
310cc     7F 7F 00 00 
310d0     CC 00 00 00 
310d4     CD 00 00 00 
310d8     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
310dc     CF 00 00 00 
310e0     D0 00 00 00 
310e4     D1 00 00 00 
310e8     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
310ec     2F 2F 00 00 
310f0     2A 2A 00 00 
310f4     2D 2D 00 00 
310f8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
310fc     8D 8D 00 00 
31100     31 31 00 00 
31104     32 32 00 00 
31108     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
3110c     34 34 00 00 
31110     35 35 00 00 
31114     36 36 00 00 
31118     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
3111c     38 38 00 00 
31120     39 39 00 00 
31124     30 30 00 00 
31128     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
3112c     5C 7C 00 00 
31130     00 00 00 00 
31134     00 00 00 00 
31138     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
3113c     00 00 00 00 
      ...             
31194     00 00 00 00 
31198     00 00 00 00 | 	byte	$00[96]
3119c     2B 00 A6 F2 
311a0     24 A7 09 80 
311a4     5B 88 4D 89 
311a8     80 88 A5 88 | atari_spl file "atari.spl"
311ac     6D 88 B8 88 
311b0     80 88 CB 88 
311b4     92 88 A5 88 
311b8     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
311bc     A5 88 CA 88 
311c0     A6 88 DD 88 
311c4     B8 88 AB 89 
311c8     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
311cc     C8 AD C6 F1 
311d0     91 06 B6 FF 
311d4     13 00 4A 00 
311d8     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
311dc     5D 00 5E 00 
311e0     5D 00 5E 00 
311e4     5E 00 5D 00 
311e8     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
311ec     38 00 83 00 
311f0     25 00 83 00 
311f4     C3 FE D1 04 
311f8     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
311fc     48 88 38 85 
31200     41 8A CB 88 
31204     28 89 B8 88 
31208     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3120c     15 89 03 89 
31210     02 89 15 89 
31214     16 89 15 89 
31218     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3121c     15 89 3A 89 
31220     72 89 E3 89 
31224     52 83 AD 97 
31228     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
3122c     0C 02 B6 FF 
31230     E1 00 A8 00 
31234     F3 00 A8 00 
31238     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
3123c     CE 00 CD 00 
31240     CD 00 BA 00 
31244     E1 00 BB 00 
31248     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
3124c     DF 00 C9 FF 
31250     E6 01 B6 06 
31254     EE DD 8D 98 
31258     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
3125c     97 89 73 89 
31260     3B 89 60 89 
31264     60 89 60 89 
31268     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
3126c     73 89 72 89 
31270     85 89 73 89 
31274     AA 89 60 89 
31278     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
3127c     E8 8A 18 86 
31280     92 88 A5 C2 
31284     E0 00 C3 05 
31288     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
3128c     F2 00 64 01 
31290     06 01 3E 01 
31294     2B 01 2B 01 
31298     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
3129c     2B 01 2A 01 
312a0     2B 01 2B 01 
312a4     2B 01 18 01 
312a8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
312ac     39 07 61 F3 
312b0     C0 AF 37 85 
312b4     0F 88 8B 8A 
312b8     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
312bc     AB 89 D0 89 
312c0     AB 89 D0 89 
312c4     D0 89 CF 89 
312c8     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
312cc     D0 89 F5 89 
312d0     BD 89 08 8A 
312d4     CF 89 E8 8A 
312d8     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
312dc     53 B3 0D F8 
312e0     F4 07 38 00 
312e4     63 01 63 01 
312e8     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
312ec     88 01 88 01 
312f0     76 01 88 01 
312f4     88 01 89 01 
312f8     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
312fc     75 01 AE 01 
31300     76 01 88 01 
31304     4A 00 46 06 
31308     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3130c     08 8A 9A 86 
31310     33 8B 08 8A 
31314     2D 8A F5 89 
31318     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3131c     2D 8A 2D 8A 
31320     2E 8A 1B 8A 
31324     40 8A 2D 8A 
31328     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
3132c     2E 8A 79 8A 
31330     66 8A C8 8B 
31334     72 82 2B 97 
31338     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
3133c     1D 02 05 01 
31340     F8 01 C0 01 
31344     0B 02 C0 01 
31348     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
3134c     F9 01 D3 01 
31350     F8 01 D3 01 
31354     F8 01 D2 01 
31358     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
3135c     E6 01 2B 01 
31360     8E 02 5F 07 
31364     F7 E2 ED 9C 
31368     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
3136c     E8 8A 78 8A 
31370     78 8A 65 8A 
31374     8B 8A 78 8A 
31378     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
3137c     8B 8A 9D 8A 
31380     9D 8A 8B 8A 
31384     C2 8A 78 8A 
31388     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
3138c     70 8C 18 86 
31390     8B 8A 23 C9 
31394     CB 03 C4 05 
31398     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
3139c     0B 02 7B 02 
313a0     1E 02 55 02 
313a4     30 02 43 02 
313a8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
313ac     43 02 44 02 
313b0     43 02 30 02 
313b4     68 02 31 02 
313b8     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
313bc     07 08 3F F7 
313c0     73 B2 13 85 
313c4     15 89 ED 8B 
313c8     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
313cc     B0 8A FB 8A 
313d0     D5 8A FA 8A 
313d4     E8 8A FB 8A 
313d8     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
313dc     E8 8A 21 8B 
313e0     E7 8A 33 8B 
313e4     E8 8A 26 8C 
313e8     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
313ec     8D B0 27 F6 
313f0     9C 08 AD 01 
313f4     7B 02 8D 02 
313f8     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
313fc     A1 02 A0 02 
31400     A1 02 A0 02 
31404     A0 02 A0 02 
31408     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
3140c     7B 02 D8 02 
31410     7B 02 C6 02 
31414     3E 01 C3 05 
31418     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
3141c     00 8C 2A 86 
31420     E0 8C FA 8A 
31424     6A 8B FB 8A 
31428     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
3142c     45 8B 45 8B 
31430     45 8B 6B 8B 
31434     46 8B 59 8B 
31438     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
3143c     6B 8B 6B 8B 
31440     6B 8B 6B 8B 
31444     7D 8B 7D 8B 
31448     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
3144c     90 8B 91 8B 
31450     90 8B 90 8B 
31454     A3 8B A3 8B 
31458     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
3145c     B5 8B B6 8B 
31460     B5 8B B5 8B 
31464     B6 8B C8 8B 
31468     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
3146c     C8 8B DA 8B 
31470     DB 8B DB 8B 
31474     DB 8B DC 8B 
31478     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
3147c     EE 8B EE 8B 
31480     00 8C 01 8C 
31484     00 8C 01 8C 
31488     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
3148c     12 8C 13 8C 
31490     13 8C 26 8C 
31494     26 8C 26 8C 
31498     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
3149c     38 8C 38 8C 
314a0     38 8C 38 8C 
314a4     4B 8C 4B 8C 
314a8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
314ac     5E 8C 5E 8C 
314b0     5E 8C 5E 8C 
314b4     70 8C 70 8C 
314b8     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
314bc     70 8C 83 8C 
314c0     83 8C 83 8C 
314c4     83 8C 96 8C 
314c8     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
314cc     95 8C A9 8C 
314d0     A9 8C A8 8C 
314d4     A8 8C A8 8C 
314d8     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
314dc     BB 8C BB 8C 
314e0     BB 8C CE 8C 
314e4     CE 8C CE 8C 
314e8     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
314ec     E0 8C E1 8C 
314f0     E1 8C E0 8C 
314f4     F4 8C F2 8C 
314f8     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
314fc     05 8D 05 8D 
31500     06 8D 06 8D 
31504     19 8D 19 8D 
31508     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
3150c     18 8D 2B 8D 
31510     2B 8D 2B 8D 
31514     2A 8D 3E 8D 
31518     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
3151c     3E 8D 51 8D 
31520     50 8D 50 8D 
31524     50 8D 51 8D 
31528     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
3152c     63 8D 64 8D 
31530     76 8D 75 8D 
31534     75 8D 76 8D 
31538     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
3153c     88 8D 88 8D 
31540     89 8D 9B 8D 
31544     9A 8D 9B 8D 
31548     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3154c     AD 8D AE 8D 
31550     AD 8D AE 8D 
31554     C1 8D C1 8D 
31558     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
3155c     D3 8D D3 8D 
31560     D3 8D D3 8D 
31564     D3 8D E6 8D 
31568     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
3156c     E6 8D E6 8D 
31570     F9 8D F9 8D 
31574     F9 8D F8 8D 
31578     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
3157c     0B 8E 0B 8E 
31580     1D 8E 1D 8E 
31584     1E 8E 1E 8E 
31588     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
3158c     31 8E 31 8E 
31590     31 8E 42 8E 
31594     43 8E 43 8E 
31598     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
3159c     56 8E 56 8E 
315a0     55 8E 56 8E 
315a4     68 8E 69 8E 
315a8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
315ac     69 8E 7B 8E 
315b0     7C 8E 7B 8E 
315b4     7B 8E 8D 8E 
315b8     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
315bc     8D 8E A1 8E 
315c0     A0 8E A1 8E 
315c4     A1 8E A0 8E 
315c8     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
315cc     B3 8E B3 8E 
315d0     C6 8E C5 8E 
315d4     C6 8E C6 8E 
315d8     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
315dc     D8 8E D9 8E 
315e0     D8 8E EC 8E 
315e4     EB 8E EC 8E 
315e8     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
315ec     FE 8E FE 8E 
315f0     FE 8E FE 8E 
315f4     10 8F 10 8F 
315f8     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
315fc     11 8F 23 8F 
31600     24 8F 23 8F 
31604     24 8F 37 8F 
31608     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
3160c     36 8F 36 8F 
31610     48 8F 49 8F 
31614     49 8F 49 8F 
31618     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
3161c     5B 8F 5C 8F 
31620     5B 8F 6E 8F 
31624     6E 8F 6E 8F 
31628     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
3162c     81 8F 81 8F 
31630     81 8F 81 8F 
31634     93 8F 93 8F 
31638     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
3163c     93 8F A6 8F 
31640     A6 8F A6 8F 
31644     A6 8F B9 8F 
31648     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3164c     B9 8F B9 8F 
31650     CC 8F CB 8F 
31654     CB 8F CC 8F 
31658     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
3165c     DF 8F DE 8F 
31660     DE 8F F1 8F 
31664     F1 8F F1 8F 
31668     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
3166c     03 90 04 90 
31670     04 90 04 90 
31674     16 90 17 90 
31678     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
3167c     29 90 28 90 
31680     29 90 28 90 
31684     29 90 3C 90 
31688     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
3168c     3C 90 4F 90 
31690     4E 90 4E 90 
31694     4E 90 4E 90 
31698     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
3169c     61 90 61 90 
316a0     73 90 74 90 
316a4     74 90 74 90 
316a8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
316ac     87 90 86 90 
316b0     87 90 86 90 
316b4     99 90 99 90 
316b8     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
316bc     AB 90 AB 90 
316c0     AC 90 AB 90 
316c4     AB 90 BF 90 
316c8     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
316cc     BE 90 D1 90 
316d0     D0 90 D1 90 
316d4     D1 90 D1 90 
316d8     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
316dc     E3 90 E4 90 
316e0     F6 90 F6 90 
316e4     F6 90 F6 90 
316e8     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
316ec     09 91 0A 91 
316f0     0A 91 1C 91 
316f4     1C 91 1C 91 
316f8     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
316fc     2F 91 2E 91 
31700     2F 91 2F 91 
31704     2E 91 41 91 
31708     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
3170c     41 91 53 91 
31710     54 91 54 91 
31714     53 91 54 91 
31718     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
3171c     67 91 67 91 
31720     79 91 7A 91 
31724     79 91 78 91 
31728     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
3172c     8C 91 8B 91 
31730     8C 91 8C 91 
31734     9E 91 9E 91 
31738     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3173c     B1 91 B1 91 
31740     B2 91 B1 91 
31744     B1 91 C4 91 
31748     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3174c     C4 91 D6 91 
31750     D7 91 D7 91 
31754     D7 91 D6 91 
31758     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
3175c     EA 91 EA 91 
31760     EA 91 FC 91 
31764     FC 91 FB 91 
31768     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
3176c     0E 92 0F 92 
31770     0F 92 0E 92 
31774     21 92 21 92 
31778     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
3177c     21 92 34 92 
31780     33 92 34 92 
31784     34 92 47 92 
31788     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
3178c     46 92 47 92 
31790     59 92 59 92 
31794     59 92 59 92 
31798     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
3179c     6C 92 6C 92 
317a0     6B 92 7E 92 
317a4     7E 92 7E 92 
317a8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
317ac     92 92 91 92 
317b0     91 92 90 92 
317b4     91 92 A4 92 
317b8     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
317bc     A3 92 B6 92 
317c0     B6 92 B7 92 
317c4     B7 92 B6 92 
317c8     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
317cc     CA 92 C9 92 
317d0     CA 92 DC 92 
317d4     DC 92 DC 92 
317d8     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
317dc     EF 92 EF 92 
317e0     EF 92 EF 92 
317e4     01 93 01 93 
317e8     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
317ec     15 93 14 93 
317f0     14 93 14 93 
317f4     14 93 27 93 
317f8     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
317fc     27 93 39 93 
31800     3A 93 39 93 
31804     39 93 39 93 
31808     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
3180c     4B 93 4C 93 
31810     5F 93 5F 93 
31814     5F 93 5E 93 
31818     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
3181c     5F 93 84 93 
31820     4C 93 96 93 
31824     5F 93 AE 94 
31828     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
3182c     7B C1 00 00 
31830     00 00 00 00 
31834     00 00 00 00 
31838     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3183c     00 00 00 00 | 	byte	$00, $00, $00, $00
31840     7A D7 00 80 
31844     87 8A 48 8F 
31848     EC 8C 76 8D 
3184c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
31850     3C 8D 82 8D 
31854     42 8D 88 8D 
31858     8C 8D 8E 8D 
3185c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
31860     97 8D DE 8D 
31864     E1 8D F1 8E 
31868     D8 8C A3 83 
3186c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
31870     65 71 C9 65 
31874     FC 64 C4 65 
31878     C1 65 BF 65 
3187c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
31880     B6 65 B4 65 
31884     B2 65 AE 65 
31888     AC 65 ED 65 
3188c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
31890     5E 65 25 66 
31894     FA 62 23 6B 
31898     B5 6C 61 0A 
3189c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
318a0     5D 90 BE 8D 
318a4     47 8E C3 8D 
318a8     09 8E C9 8D 
318ac     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
318b0     15 8E 19 8E 
318b4     1B 8E 62 8E 
318b8     64 8E 68 8E 
318bc     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
318c0     B5 8E 4C 90 
318c4     FA 84 3C 9D 
318c8     98 13 79 6D 
318cc     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
318d0     D9 66 50 66 
318d4     D4 66 4B 66 
318d8     8C 66 46 66 
318dc     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
318e0     81 66 3A 66 
318e4     7C 66 36 66 
318e8     76 66 30 66 
318ec     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
318f0     6B 66 88 72 
318f4     BF 37 E7 B7 
318f8     75 83 8B 8E 
318fc     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
31900     94 8E 96 8E 
31904     DD 8E 9C 8E 
31908     E2 8E A2 8E 
3190c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31910     EE 8E AE 8E 
31914     38 8F B5 8E 
31918     3F 8F FD 8E 
3191c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
31920     A5 87 1E E3 
31924     6D 5D FA 71 
31928     41 64 25 67 
3192c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
31930     D9 66 1A 67 
31934     18 67 15 67 
31938     12 67 0F 67 
3193c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
31940     07 67 C0 66 
31944     01 67 BC 66 
31948     B8 66 DE 64 
3194c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
31950     43 E5 1F 8B 
31954     14 8A F1 90 
31958     1C 8F 63 8F 
3195c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
31960     29 8F 6E 8F 
31964     72 8F 75 8F 
31968     34 8F BE 8F 
3196c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
31970     84 8F 87 8F 
31974     CC 8F 56 90 
31978     67 91 49 80 
3197c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
31980     46 77 A6 66 
31984     E8 66 B0 67 
31988     AD 67 ED 67 
3198c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
31990     A2 67 E3 67 
31994     9D 67 9A 67 
31998     98 67 94 67 
3199c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
319a0     49 67 CD 67 
319a4     28 65 5F 6E 
319a8     82 67 3A 01 
319ac     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
319b0     C2 91 A9 8F 
319b4     EF 8F AE 8F 
319b8     F4 8F B5 8F 
319bc     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
319c0     01 90 03 90 
319c4     07 90 09 90 
319c8     0C 90 53 90 
319cc     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
319d0     18 90 44 93 
319d4     85 84 D6 9D 
319d8     87 1F 2F 75 
319dc     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
319e0     C4 68 F6 67 
319e4     BE 68 F1 67 
319e8     76 68 2E 68 
319ec     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
319f0     27 68 24 68 
319f4     64 68 1E 68 
319f8     5F 68 19 68 
319fc     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31a00     DC 68 56 72 
31a04     7E 36 C2 B8 
31a08     D7 84 73 90 
31a0c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31a10     7B 90 7F 90 
31a14     82 90 84 90 
31a18     CB 90 8B 90 
31a1c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31a20     D7 90 96 90 
31a24     20 91 59 90 
31a28     25 91 A2 90 
31a2c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31a30     D0 89 40 EE 
31a34     12 64 C4 71 
31a38     29 66 0C 69 
31a3c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31a40     C0 68 02 69 
31a44     FE 68 FB 68 
31a48     F9 68 F6 68 
31a4c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31a50     EE 68 A8 68 
31a54     2C 69 5F 68 
31a58     E2 68 81 66 
31a5c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31a60     1E EB A6 8A 
31a64     73 8B 5E 93 
31a68     7B 90 48 91 
31a6c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31a70     0D 91 11 91 
31a74     14 91 16 91 
31a78     5C 91 1C 91 
31a7c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31a80     68 91 AF 91 
31a84     2A 91 B5 91 
31a88     75 91 1A 94 
31a8c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31a90     70 0E CB 6C 
31a94     5D 6E C4 67 
31a98     99 69 54 69 
31a9c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31aa0     D2 69 49 69 
31aa4     89 69 86 69 
31aa8     40 69 C4 69 
31aac     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31ab0     35 69 76 69 
31ab4     58 67 EB 6D 
31ab8     E9 6D 89 0F 
31abc     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31ac0     33 94 94 91 
31ac4     D9 91 56 91 
31ac8     E0 91 9F 91 
31acc     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31ad0     EC 91 EE 91 
31ad4     F1 91 F4 91 
31ad8     F7 91 3D 92 
31adc     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31ae0     46 92 21 94 
31ae4     11 89 A4 9D 
31ae8     FD 0E 8F 6C 
31aec     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31af0     28 6A E1 69 
31af4     65 6A 1F 6A 
31af8     5F 6A 1A 6A 
31afc     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31b00     54 6A 0F 6A 
31b04     4F 6A 09 6A 
31b08     06 6A 03 6A 
31b0c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31b10     23 68 69 77 
31b14     3A 4D 38 CA 
31b18     38 86 4E 91 
31b1c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31b20     64 92 24 92 
31b24     6A 92 2A 92 
31b28     70 92 30 92 
31b2c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31b30     7B 92 7E 92 
31b34     C5 92 84 92 
31b38     CB 92 8A 92 
31b3c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31b40     4D 8D F9 E2 
31b44     97 59 FE 74 
31b48     DB 68 6D 6A 
31b4c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31b50     A8 6A A5 6A 
31b54     A3 6A 9F 6A 
31b58     9D 6A 9B 6A 
31b5c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31b60     D6 6A 8F 6A 
31b64     CF 6A 46 6A 
31b68     CA 6A E1 67 
31b6c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31b70     D3 F7 15 92 
31b74     90 8C BF 94 
31b78     A6 92 EB 92 
31b7c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31b80     B1 92 F7 92 
31b84     FA 92 FD 92 
31b88     00 93 02 93 
31b8c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31b90     4F 93 52 93 
31b94     54 93 22 94 
31b98     5A 93 8F 88 
31b9c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31ba0     1C 77 07 6C 
31ba4     E8 69 7A 6B 
31ba8     34 6B 75 6B 
31bac     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31bb0     29 6B 26 6B 
31bb4     24 6B 21 6B 
31bb8     1D 6B 5E 6B 
31bbc     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31bc0     12 6B 52 6B 
31bc4     34 69 34 6E 
31bc8     BA 73 A4 24 
31bcc     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31bd0     7A 94 B3 93 
31bd4     72 93 31 93 
31bd8     78 93 7A 93 
31bdc     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31be0     83 93 86 93 
31be4     89 93 D0 93 
31be8     D2 93 D5 93 
31bec     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31bf0     DD 93 40 96 
31bf4     30 8B 99 9C 
31bf8     52 10 94 71 
31bfc     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31c00     46 6C 79 6B 
31c04     40 6C B7 6B 
31c08     F7 6B B1 6B 
31c0c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31c10     EC 6B A5 6B 
31c14     A2 6B 9F 6B 
31c18     9D 6B 9A 6B 
31c1c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31c20     C8 6A E4 76 
31c24     20 4B F9 CE 
31c28     2E 8A 1A 92 
31c2c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31c30     FB 93 BA 93 
31c34     01 94 03 94 
31c38     4A 94 09 94 
31c3c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31c40     55 94 14 94 
31c44     9E 94 1A 94 
31c48     61 94 20 94 
31c4c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31c50     3E 87 E5 CD 
31c54     5F 50 6C 78 
31c58     B5 6A 04 6C 
31c5c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31c60     83 6C 7F 6C 
31c64     7C 6C 36 6C 
31c68     76 6C 74 6C 
31c6c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31c70     6B 6C 25 6C 
31c74     66 6C 1F 6C 
31c78     1D 6C 41 6A 
31c7c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31c80     BA FA FC 94 
31c84     5B 8D 97 96 
31c88     3B 94 C5 94 
31c8c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31c90     89 94 8C 94 
31c94     8F 94 92 94 
31c98     94 94 DB 94 
31c9c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31ca0     E4 94 E7 94 
31ca4     2D 95 74 95 
31ca8     C8 96 15 89 
31cac     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31cb0     CB 75 31 6F 
31cb4     7E 6B 10 6D 
31cb8     C9 6C 0A 6D 
31cbc     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31cc0     BD 6C FF 6C 
31cc4     FB 6C F9 6C 
31cc8     B2 6C F3 6C 
31ccc     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31cd0     A7 6C E8 6C 
31cd4     0D 6B 85 6F 
31cd8     C7 74 10 28 
31cdc     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31ce0     96 96 47 95 
31ce4     06 95 0A 95 
31ce8     0C 95 0F 95 
31cec     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31cf0     17 95 5E 95 
31cf4     61 95 63 95 
31cf8     22 95 AC 95 
31cfc     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31d00     72 95 17 98 
31d04     59 8E 01 96 
31d08     CF FC 5A 68 
31d0c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31d10     96 6D 50 6D 
31d14     D5 6D 4A 6D 
31d18     8C 6D 89 6D 
31d1c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31d20     80 6D 3A 6D 
31d24     7A 6D 77 6D 
31d28     75 6D 71 6D 
31d2c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31d30     18 6C BC 78 
31d34     9A 4F 7E CF 
31d38     1F 89 F1 93 
31d3c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
31d40     D2 95 4E 95 
31d44     D7 95 53 95 
31d48     DD 95 E0 95 
31d4c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
31d50     A5 95 EB 95 
31d54     EE 95 F0 95 
31d58     37 96 B3 95 
31d5c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
31d60     1A 98 D5 8D 
31d64     C5 9F CD 0F 
31d68     0F 71 F3 73 
31d6c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
31d70     D9 6D 5E 6E 
31d74     D3 6D 58 6E 
31d78     12 6E 0F 6E 
31d7c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
31d80     49 6E BF 6D 
31d84     87 6E 76 6D 
31d88     81 6E 11 6B 
31d8c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
31d90     3F 09 44 95 
31d94     E5 8D 3F 99 
31d98     D4 95 A2 96 
31d9c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
31da0     23 96 69 96 
31da4     6B 96 6E 96 
31da8     71 96 74 96 
31dac     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
31db0     BF 96 3C 96 
31db4     C6 96 C8 96 
31db8     A3 98 51 8D 
31dbc     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
31dc0     CF 75 29 73 
31dc4     90 6C EC 6E 
31dc8     62 6E E7 6E 
31dcc     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
31dd0     9A 6E 98 6E 
31dd4     95 6E 91 6E 
31dd8     8E 6E CF 6E 
31ddc     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
31de0     40 6E C3 6E 
31de4     E8 6C 45 6F 
31de8     A5 7B C9 35 
31dec     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
31df0     2D 98 23 97 
31df4     E1 96 A0 96 
31df8     A4 96 EA 96 
31dfc     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
31e00     AF 96 F4 96 
31e04     F8 96 3E 97 
31e08     FD 96 43 97 
31e0c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
31e10     08 97 6B 99 
31e14     D6 92 88 91 
31e18     D8 EE 84 66 
31e1c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
31e20     2E 6F E7 6E 
31e24     6C 6F 24 6F 
31e28     21 6F 1F 6F 
31e2c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
31e30     17 6F 13 6F 
31e34     54 6F 0E 6F 
31e38     0B 6F 4B 6F 
31e3c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
31e40     27 6D 1C 7B 
31e44     19 59 9F DB 
31e48     66 8E BC 94 
31e4c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
31e50     67 97 26 97 
31e54     6D 97 2B 97 
31e58     72 97 32 97 
31e5c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
31e60     C1 97 7F 97 
31e64     C6 97 85 97 
31e68     CB 97 CE 97 
31e6c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
31e70     EC 8A C4 C6 
31e74     68 4C F4 7D 
31e78     63 6E E8 6E 
31e7c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
31e80     ED 6F A7 6F 
31e84     E7 6F A0 6F 
31e88     E1 6F 9B 6F 
31e8c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
31e90     D5 6F 8F 6F 
31e94     CE 6F 45 6F 
31e98     86 6F 68 6D 
31e9c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
31ea0     C0 13 AD A2 
31ea4     A7 8E 79 99 
31ea8     E6 97 E8 97 
31eac     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
31eb0     F1 97 F3 97 
31eb4     F6 97 F9 97 
31eb8     FB 97 FE 97 
31ebc     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
31ec0     4A 98 0A 98 
31ec4     93 98 0F 98 
31ec8     7F 9B BF 8C 
31ecc     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
31ed0     91 7B 62 73 
31ed4     1A 6E B9 70 
31ed8     EB 6F B3 70 
31edc     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
31ee0     25 70 20 70 
31ee4     1E 70 1B 70 
31ee8     18 70 15 70 
31eec     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
31ef0     0D 70 09 70 
31ef4     07 70 03 70 
31ef8     01 70 FD 6F 
31efc     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
31f00     F6 6F F2 6F 
31f04     EF 6F EC 6F 
31f08     2C 70 E6 6F 
31f0c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
31f10     DD 6F 97 6F 
31f14     D7 6F 84 6E 
31f18     8F 6F 3F 7D 
31f1c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
31f1e     FF FF FF FF 
31f22     FF FF       | atarist_spl file "atarist.spl" '512
31f24     00 00 00 00 
31f28     00 00 00 00 
31f2c     00 00       | 	byte	$00[10]
31f2e     17 7F F2 7F 
31f32     B2 7F 72 7F 
31f36     33 7F F4 7E 
31f3a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
31f3e     36 7E F5 7D 
31f42     E9 51 F2 0D 
31f46     8E 00 F3 FD 
31f4a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
31f4e     57 FD 58 FD 
31f52     5B FD 5C FD 
31f56     5C FD 60 7D 
31f5a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
31f5e     D6 7C 98 7C 
31f62     59 7C 1A 7C 
31f66     DC 7B 9E 7B 
31f6a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
31f6e     F3 05 00 FD 
31f72     41 FB EA FA 
31f76     D9 FA DB FA 
31f7a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
31f7e     E4 FA 9B 36 
31f82     F8 7A C0 7A 
31f86     84 7A 45 7A 
31f8a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
31f8e     8E 79 51 79 
31f92     15 79 D7 78 
31f96     3C 1F EB FF 
31f9a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
31f9e     6D F8 65 F8 
31fa2     68 F8 6D F8 
31fa6     70 F8 74 F8 
31faa     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
31fae     AB 60 79 60 
31fb2     4B 60 1A 60 
31fb6     E9 5F B9 5F 
31fba     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
31fbe     FB 59 B2 0B 
31fc2     92 FA 3A F7 
31fc6     96 F6 79 F6 
31fca     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
31fce     82 F6 86 F6 
31fd2     8C F6 DB 5D 
31fd6     F1 5E C1 5E 
31fda     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
31fde     34 5E 04 5E 
31fe2     D6 5D A6 5D 
31fe6     78 5D D4 3E 
31fea     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
31fee     27 F5 BA F4 
31ff2     AB F4 AD F4 
31ff6     B2 F4 B8 F4 
31ffa     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
31ffe     26 5D 2B 5D 
32002     FC 5C CD 5C 
32006     9F 5C 70 5C 
3200a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3200e     E5 5B B8 5B 
32012     DB 24 A7 FC 
32016     D1 F4 4D F3 
3201a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3201e     04 F3 0B F3 
32022     11 F3 16 F3 
32026     DE 18 98 5B 
3202a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3202e     4E 4A 29 48 
32032     A0 47 6A 47 
32036     43 47 20 47 
3203a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3203e     E2 F6 98 F2 
32042     C5 F1 A3 F1 
32046     A3 F1 A8 F1 
3204a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
3204e     BF F1 00 3D 
32052     EF 46 CD 46 
32056     AA 46 86 46 
3205a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
3205e     1C 46 F9 45 
32062     D7 45 EE 43 
32066     DE 02 E8 F3 
3206a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
3206e     61 F0 65 F0 
32072     6D F0 74 F0 
32076     7C F0 84 F0 
3207a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3207e     8E 45 6D 45 
32082     49 45 27 45 
32086     05 45 E1 44 
3208a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
3208e     F1 2F A9 FB 
32092     8B F1 9B EF 
32096     40 EF 36 EF 
3209a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
3209e     4D EF 56 EF 
320a2     5E EF 7B 44 
320a6     8C 44 69 44 
320aa     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
320ae     03 44 E1 43 
320b2     C0 43 F5 37 
320b6     69 33 0F 11 
320ba     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
320be     66 EE 37 EE 
320c2     38 EE 40 EE 
320c6     48 EE 51 EE 
320ca     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
320ce     7D 32 6A 32 
320d2     51 32 37 32 
320d6     1F 32 05 32 
320da     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
320de     B9 31 A1 31 
320e2     F1 04 F4 F1 
320e6     50 EE A0 ED 
320ea     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
320ee     93 ED 9A ED 
320f2     A4 ED AD ED 
320f6     F4 27 C1 31 
320fa     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
320fe     78 31 5F 31 
32102     46 31 2E 31 
32106     15 31 FC 30 
3210a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3210e     C4 EF 4A ED 
32112     DC EC CB EC 
32116     D2 EC DA EC 
3211a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3211e     F9 EC 64 2F 
32122     0A 31 F1 30 
32126     D9 30 C0 30 
3212a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3212e     78 30 5F 30 
32132     46 30 38 23 
32136     A6 F6 19 EE 
3213a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3213e     20 EC 28 EC 
32142     32 EC 3C EC 
32146     47 EC 51 EC 
3214a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
3214e     A3 22 93 22 
32152     7F 22 6E 22 
32156     5D 22 4C 22 
3215a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
3215e     77 09 76 F1 
32162     CC EC F0 EB 
32166     CD EB CE EB 
3216a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
3216e     ED EB F5 EB 
32172     3E F6 6B 22 
32176     5F 22 4E 22 
3217a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3217e     1B 22 0B 22 
32182     FA 21 E9 21 
32186     D8 21 4D FF 
3218a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
3218e     92 EB 7B EB 
32192     82 EB 8C EB 
32196     97 EB A1 EB 
3219a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
3219e     15 22 04 22 
321a2     F3 21 E3 21 
321a6     D2 21 C0 21 
321aa     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
321ae     8E 21 7D 21 
321b2     9A F8 A4 ED 
321b6     8E EB 2F EB 
321ba     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
321be     37 EB 42 EB 
321c2     4C EB 57 EB 
321c6     B2 17 22 19 
321ca     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
321ce     FD 18 EF 18 
321d2     E3 18 D6 18 
321d6     CA 18 BD 18 
321da     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
321de     60 EC 35 EB 
321e2     01 EB 01 EB 
321e6     0C EB 16 EB 
321ea     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
321ee     34 EB D0 18 
321f2     00 19 F4 18 
321f6     E8 18 DA 18 
321fa     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
321fe     B6 18 A9 18 
32202     9D 18 91 05 
32206     F0 EF CA EB 
3220a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3220e     E8 EA F2 EA 
32212     FE EA 07 EB 
32216     12 EB C2 EF 
3221a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3221e     D9 18 CD 18 
32222     C0 18 B3 18 
32226     A7 18 9B 18 
3222a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3222e     B8 FC 30 EE 
32232     61 EB DC EA 
32236     CD EA D2 EA 
3223a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3223e     F3 EA FE EA 
32242     D2 09 D1 18 
32246     C3 18 17 18 
3224a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3224e     66 11 52 11 
32252     49 11 41 11 
32256     38 11 E0 F4 
3225a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3225e     C9 EA C5 EA 
32262     CF EA DB EA 
32266     E6 EA EF EA 
3226a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3226e     89 11 80 11 
32272     78 11 6E 11 
32276     67 11 5D 11 
3227a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3227e     43 11 32 0D 
32282     9C F1 07 EC 
32286     F8 EA CD EA 
3228a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3228e     E4 EA ED EA 
32292     F8 EA 02 EB 
32296     55 11 91 11 
3229a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3229e     75 11 6E 11 
322a2     64 11 5E 11 
322a6     54 11 4A 11 
322aa     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
322ae     A8 EB F1 EA 
322b2     D9 EA DC EA 
322b6     E8 EA F1 EA 
322ba     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
322be     A6 EB 9E 11 
322c2     A0 11 96 11 
322c6     8D 11 85 11 
322ca     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
322ce     6A 11 CA 0D 
322d2     36 0B 57 F8 
322d6     6C ED 57 EB 
322da     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
322de     F4 EA FF EA 
322e2     09 EB 15 EB 
322e6     1E EB 1A FD 
322ea     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
322ee     ED 0A E8 0A 
322f2     E2 0A DC 0A 
322f6     D6 0A D1 0A 
322fa     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
322fe     F8 F3 BC EC 
32302     57 EB 1E EB 
32306     18 EB 24 EB 
3230a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3230e     42 EB 4D EB 
32312     08 09 20 0B 
32316     1A 0B 14 0B 
3231a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3231e     04 0B FE 0A 
32322     F9 0A F2 0A 
32326     84 08 3A F1 
3232a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3232e     42 EB 42 EB 
32332     4E EB 57 EB 
32336     62 EB 6B EB 
3233a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3233e     48 0B 43 0B 
32342     3C 0B 36 0B 
32346     31 0B 2C 0B 
3234a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3234e     1B 0B 5C 00 
32352     6A EF 1B EC 
32356     81 EB 6A EB 
3235a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3235e     85 EB 8E EB 
32362     99 EB A3 EB 
32366     DD 05 E5 05 
3236a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3236e     DB 05 D8 05 
32372     D5 05 D1 05 
32376     D0 05 CB 05 
3237a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3237e     0C EC BB EB 
32382     B3 EB BB EB 
32386     C5 EB D0 EB 
3238a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3238e     E4 F7 2C 06 
32392     28 06 24 06 
32396     22 06 1F 06 
3239a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3239e     16 06 14 06 
323a2     0F 06 D0 F3 
323a6     65 ED 2D EC 
323aa     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
323ae     01 EC 0A EC 
323b2     14 EC 1E EC 
323b6     29 EC FB 03 
323ba     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
323be     63 06 60 06 
323c2     5E 06 59 06 
323c6     58 06 54 06 
323ca     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
323ce     69 F1 21 ED 
323d2     55 EC 33 EC 
323d6     36 EC 40 EC 
323da     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
323de     5C EC 68 EC 
323e2     92 02 D9 02 
323e6     D7 02 D7 02 
323ea     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
323ee     D1 02 D1 02 
323f2     CE 02 CD 02 
323f6     5D FC 80 EF 
323fa     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
323fe     83 EC 8A EC 
32402     93 EC 9C EC 
32406     A5 EC B1 EC 
3240a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3240e     2B 03 2A 03 
32412     29 03 26 03 
32416     25 03 24 03 
3241a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3241e     1F 03 70 F7 
32422     D0 EE 27 ED 
32426     DB EC D4 EC 
3242a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3242e     F0 EC FA EC 
32432     02 ED F9 F4 
32436     7B 03 7C 03 
3243a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3243e     75 03 73 03 
32442     72 03 70 03 
32446     6D 03 6C 03 
3244a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3244e     54 ED 22 ED 
32452     22 ED 2C ED 
32456     35 ED 3F ED 
3245a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3245e     14 01 C3 03 
32462     C1 03 C0 03 
32466     5F 01 A5 00 
3246a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3246e     7B 00 7C 00 
32472     20 00 85 F1 
32476     2A EE 89 ED 
3247a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3247e     80 ED 87 ED 
32482     90 ED 9A ED 
32486     A3 ED 73 00 
3248a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3248e     D0 00 D0 00 
32492     D0 00 D0 00 
32496     D0 00 CF 00 
3249a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3249e     80 F0 3D EE 
324a2     D5 ED C7 ED 
324a6     CD ED D6 ED 
324aa     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
324ae     F2 ED FA ED 
324b2     1D 01 29 01 
324b6     27 01 27 01 
324ba     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
324be     25 01 26 01 
324c2     26 01 23 01 
324c6     D0 F7 EC EF 
324ca     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
324ce     1C EE 24 EE 
324d2     2D EE 37 EE 
324d6     40 EE 47 EE 
324da     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
324de     7D 01 7B 01 
324e2     7A 01 7A 01 
324e6     79 01 78 01 
324ea     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
324ee     84 FE DE F3 
324f2     6C EF 93 EE 
324f6     72 EE 72 EE 
324fa     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
324fe     8B EE 95 EE 
32502     9E EE 15 FC 
32506     67 FE 67 FE 
3250a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3250e     6B FE 6B FE 
32512     6D FE 6D FE 
32516     6D FE 6F FE 
3251a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3251e     DF EE CC EE 
32522     CF EE D9 EE 
32526     E1 EE EA EE 
3252a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3252e     5A FE C4 FE 
32532     C3 FE C5 FE 
32536     C6 FE C6 FE 
3253a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3253e     C8 FE C7 FE 
32542     DA FB 85 F1 
32546     8D EF 31 EF 
3254a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3254e     34 EF 3E EF 
32552     46 EF 4F EF 
32556     57 EF 0D FF 
3255a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3255e     1F FF 1F FF 
32562     21 FF 21 FF 
32566     21 FF 21 FF 
3256a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3256e     15 F1 BE EF 
32572     84 EF 7E EF 
32576     88 EF 8F EF 
3257a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3257e     A9 EF 06 F2 
32582     A6 FC AB FC 
32586     AD FC AE FC 
3258a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3258e     B2 FC B4 FC 
32592     B6 FC B7 FC 
32596     8B F4 BD F0 
3259a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3259e     E4 EF EE EF 
325a2     F6 EF FD EF 
325a6     04 F0 0E F0 
325aa     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
325ae     0B FD 0D FD 
325b2     0F FD 11 FD 
325b6     11 FD 13 FD 
325ba     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
325be     17 FD 64 F3 
325c2     CD F0 52 F0 
325c6     41 F0 45 F0 
325ca     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
325ce     5B F0 64 F0 
325d2     6D F0 FB FC 
325d6     65 FD 68 FD 
325da     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
325de     6C FD 6D FD 
325e2     6F FD 70 FD 
325e6     72 FD B3 FB 
325ea     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
325ee     A4 F0 99 F0 
325f2     A0 F0 A8 F0 
325f6     AE F0 B9 F0 
325fa     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
325fe     CB FB DD FB 
32602     DE FB E0 FB 
32606     E3 FB E3 FB 
3260a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3260e     E9 FB EC FB 
32612     62 F7 27 F2 
32616     2A F1 FF F0 
3261a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3261e     0C F1 13 F1 
32622     1B F1 23 F1 
32626     33 F2 3C FC 
3262a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3262e     42 FC 45 FC 
32632     47 FC 48 FC 
32636     4A FC 4C FC 
3263a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3263e     20 F2 77 F1 
32642     5C F1 5F F1 
32646     64 F1 6C F1 
3264a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3264e     83 F1 DC F8 
32652     9A FC 9A FC 
32656     9B FC 9E FC 
3265a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3265e     A3 FC A4 FC 
32662     A6 FC A9 FC 
32666     90 F4 33 F2 
3266a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3266e     BA F1 BF F1 
32672     C7 F1 CE F1 
32676     D6 F1 DC F1 
3267a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3267e     F3 FC F5 FC 
32682     FE FB 79 FB 
32686     62 FB 5F FB 
3268a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3268e     6F FA AF F3 
32692     53 F2 12 F2 
32696     0F F2 15 F2 
3269a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3269e     2A F2 32 F2 
326a2     38 F2 9A FB 
326a6     AF FB B1 FB 
326aa     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
326ae     B7 FB B8 FB 
326b2     BA FB BC FB 
326b6     C1 FB 3B F8 
326ba     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
326be     6E F2 6C F2 
326c2     74 F2 7A F2 
326c6     81 F2 87 F2 
326ca     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
326ce     06 FC 09 FC 
326d2     0C FC 0E FC 
326d6     0F FC 12 FC 
326da     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
326de     17 FC 1A FC 
326e2     B2 F6 7B F3 
326e6     DD F2 C5 F2 
326ea     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
326ee     D4 F2 DB F2 
326f2     E0 F2 E8 F2 
326f6     28 F8 60 FC 
326fa     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
326fe     64 FC 66 FC 
32702     68 FC 6A FC 
32706     6D FC 52 FC 
3270a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3270e     78 F3 24 F3 
32712     1A F3 1E F3 
32716     24 F3 2A F3 
3271a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3271e     3D F3 80 FA 
32722     0C FB 0F FB 
32726     10 FB 14 FB 
3272a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3272e     1B FB 1D FB 
32732     1F FB 92 FA 
32736     DE F4 AE F3 
3273a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3273e     79 F3 7E F3 
32742     84 F3 8C F3 
32746     92 F3 97 F3 
3274a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3274e     67 FB 69 FB 
32752     6B FB 6F FB 
32756     71 FB 72 FB 
3275a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3275e     E3 F8 BA F4 
32762     EE F3 CC F3 
32766     CA F3 CF F3 
3276a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3276e     E2 F3 E8 F3 
32772     ED F3 B7 FB 
32776     BC FB BE FB 
3277a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3277e     C4 FB C6 FB 
32782     C8 FB C9 FB 
32786     CC FB 8F F7 
3278a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3278e     1E F4 1E F4 
32792     24 F4 2A F4 
32796     30 F4 38 F4 
3279a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3279e     AD FA B1 FA 
327a2     B4 FA B6 FA 
327a6     BA FA BB FA 
327aa     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
327ae     C2 FA C6 FA 
327b2     55 F6 C6 F4 
327b6     7D F4 72 F4 
327ba     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
327be     83 F4 89 F4 
327c2     8F F4 94 F4 
327c6     66 FA 03 FB 
327ca     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
327ce     0A FB 0E FB 
327d2     10 FB 11 FB 
327d6     16 FB 18 FB 
327da     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
327de     F9 F4 CA F4 
327e2     C5 F4 CB F4 
327e6     D1 F4 D7 F4 
327ea     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
327ee     E8 F4 3F FB 
327f2     56 FB 58 FB 
327f6     5A FB 5E FB 
327fa     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
327fe     64 FB 64 FB 
32802     69 FB 99 F9 
32806     E9 F5 33 F5 
3280a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3280e     1D F5 22 F5 
32812     27 F5 2E F5 
32816     32 F5 37 F5 
3281a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3281e     BC FA BC FA 
32822     C1 FA C2 FA 
32826     C4 FA C8 FA 
3282a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3282e     F9 F7 DB F5 
32832     78 F5 69 F5 
32836     6A F5 70 F5 
3283a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3283e     7F F5 85 F5 
32842     6E F7 06 FB 
32846     0A FB 0B FB 
3284a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3284e     14 FB 15 FB 
32852     18 FB 1B FB 
32856     1D FB 70 F7 
3285a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3285e     B6 F5 BB F5 
32862     C0 F5 C6 F5 
32866     CA F5 CF F5 
3286a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3286e     54 FB 56 FB 
32872     5A FB 5B FB 
32876     5E FB 5F FB 
3287a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3287e     67 FB 52 FB 
32882     29 F7 33 F6 
32886     06 F6 02 F6 
3288a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3288e     10 F6 16 F6 
32892     1A F6 1F F6 
32896     81 FB 9F FB 
3289a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3289e     51 FB F2 FA 
328a2     E3 FA E3 FA 
328a6     E5 FA E9 FA 
328aa     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
328ae     64 F6 4D F6 
328b2     4D F6 53 F6 
328b6     57 F6 5C F6 
328ba     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
328be     6A F6 19 FB 
328c2     1E FB 22 FB 
328c6     23 FB 24 FB 
328ca     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
328ce     2C FB 2E FB 
328d2     32 FB F0 F8 
328d6     01 F7 A5 F6 
328da     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
328de     9F F6 A3 F6 
328e2     A6 F6 AC F6 
328e6     B0 F6 EB F7 
328ea     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
328ee     68 FB 6C FB 
328f2     6E FB 71 FB 
328f6     72 FB 74 FB 
328fa     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
328fe     71 F8 21 F7 
32902     E5 F6 DD F6 
32906     E1 F6 E6 F6 
3290a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3290e     F5 F6 F7 F6 
32912     F7 FA AB FB 
32916     AD FB AF FB 
3291a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3291e     B6 FB B9 FB 
32922     BB FB BC FB 
32926     21 FB 07 F8 
3292a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3292e     22 F7 26 F7 
32932     2B F7 2E F7 
32936     34 F7 38 F7 
3293a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3293e     13 FB 16 FB 
32942     17 FB 1B FB 
32946     1E FB 20 FB 
3294a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3294e     26 FB 77 FA 
32952     F3 F7 7C F7 
32956     67 F7 6A F7 
3295a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3295e     74 F7 7A F7 
32962     7E F7 82 F7 
32966     53 FB 5A FB 
3296a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3296e     5F FB 63 FB 
32972     65 FB 67 FB 
32976     69 FB 6A FB 
3297a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3297e     B5 F7 A9 F7 
32982     AD F7 B0 F7 
32986     B5 F7 B8 F7 
3298a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3298e     6E F8 99 FB 
32992     9C FB 9D FB 
32996     9F FB A4 FB 
3299a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3299e     A9 FB AB FB 
329a2     AD FB 46 F9 
329a6     26 F8 F0 F7 
329aa     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
329ae     F4 F7 F8 F7 
329b2     FB F7 FF F7 
329b6     03 F8 65 FA 
329ba     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
329be     2B FB 2F FB 
329c2     30 FB 32 FB 
329c6     34 FB 38 FB 
329ca     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
329ce     E9 F8 4A F8 
329d2     2E F8 2C F8 
329d6     2F F8 36 F8 
329da     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
329de     41 F8 44 F8 
329e2     4A FB 67 FB 
329e6     68 FB 6B FB 
329ea     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
329ee     73 FB 74 FB 
329f2     78 FB 7A FB 
329f6     14 FB E7 F8 
329fa     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
329fe     6D F8 70 F8 
32a02     73 F8 78 F8 
32a06     7C F8 80 F8 
32a0a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32a0e     A6 FB A7 FB 
32a12     A9 FB AC FB 
32a16     AF FB B1 FB 
32a1a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32a1e     B7 FB 73 FA 
32a22     F8 F8 B4 F8 
32a26     A9 F8 AB F8 
32a2a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32a2e     B4 F8 B8 F8 
32a32     BB F8 FA F8 
32a36     64 FB 65 FB 
32a3a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32a3e     6D FB 6F FB 
32a42     70 FB 74 FB 
32a46     77 FB 77 FB 
32a4a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32a4e     E9 F8 E4 F8 
32a52     E8 F8 EB F8 
32a56     EE F8 F2 F8 
32a5a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32a5e     B5 FA 9F FB 
32a62     A1 FB A4 FB 
32a66     A5 FB A9 FB 
32a6a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32a6e     AE FB B1 FB 
32a72     B2 FB C7 F9 
32a76     39 F9 22 F9 
32a7a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32a7e     26 F9 2A F9 
32a82     2E F9 32 F9 
32a86     33 F9 BA FB 
32a8a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32a8e     DE FB E1 FB 
32a92     E2 FB E4 FB 
32a96     E5 FB E7 FB 
32a9a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32a9e     C5 F9 67 F9 
32aa2     57 F9 56 F9 
32aa6     5B F9 5F F9 
32aaa     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32aae     68 F9 6C F9 
32ab2     0B FC 11 FC 
32ab6     14 FC 15 FC 
32aba     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32abe     B5 FB B5 FB 
32ac2     B6 FB B8 FB 
32ac6     E9 FA C8 F9 
32aca     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32ace     90 F9 94 F9 
32ad2     95 F9 99 F9 
32ad6     9D F9 9F F9 
32ada     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32ade     DE FB DF FB 
32ae2     E2 FB E4 FB 
32ae6     E6 FB E8 FB 
32aea     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32aee     EF FB AC FA 
32af2     E9 F9 C7 F9 
32af6     C3 F9 C8 F9 
32afa     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32afe     D0 F9 D4 F9 
32b02     D6 F9 0E FB 
32b06     11 FC 13 FC 
32b0a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32b0e     19 FC 1B FC 
32b12     1D FC 1E FC 
32b16     21 FC 22 FC 
32b1a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32b1e     F7 F9 F7 F9 
32b22     FB F9 FE F9 
32b26     00 FA 03 FA 
32b2a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32b2e     1B FC 45 FC 
32b32     46 FC 48 FC 
32b36     4A FC 4B FC 
32b3a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32b3e     52 FC 54 FC 
32b42     F3 FB 82 FA 
32b46     35 FA 28 FA 
32b4a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32b4e     31 FA 32 FA 
32b52     37 FA 37 FA 
32b56     3C FA 00 FC 
32b5a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32b5e     09 FC 0B FC 
32b62     0F FC 12 FC 
32b66     12 FC 15 FC 
32b6a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32b6e     8D FA 60 FA 
32b72     5B FA 5C FA 
32b76     60 FA 61 FA 
32b7a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32b7e     6C FA 6D FA 
32b82     37 FC 3A FC 
32b86     3B FC 3D FC 
32b8a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32b8e     43 FC 44 FC 
32b92     45 FC 47 FC 
32b96     51 FB AB FA 
32b9a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32b9e     8E FA 91 FA 
32ba2     93 FA 95 FA 
32ba6     98 FA 9B FA 
32baa     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32bae     68 FC 6A FC 
32bb2     6C FC 6E FC 
32bb6     70 FC 72 FC 
32bba     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32bbe     76 FC 3B FB 
32bc2     D0 FA BB FA 
32bc6     B9 FA BD FA 
32bca     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32bce     C4 FA C6 FA 
32bd2     CA FA 13 FC 
32bd6     3A FC 3A FC 
32bda     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32bde     41 FC 43 FC 
32be2     44 FC 47 FC 
32be6     48 FC 3C FC 
32bea     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32bee     E6 FA E8 FA 
32bf2     EB FA EE FA 
32bf6     F0 FA F2 FA 
32bfa     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32bfe     61 FC 66 FC 
32c02     68 FC 6B FC 
32c06     6C FC 6E FC 
32c0a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32c0e     73 FC 75 FC 
32c12     13 FC 3F FB 
32c16     17 FB 12 FB 
32c1a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32c1e     1A FB 1D FB 
32c22     1F FB 20 FB 
32c26     23 FB 92 FC 
32c2a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32c2e     96 FC 97 FC 
32c32     9A FC 9C FC 
32c36     9E FC 9F FC 
32c3a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32c3e     5A FB 41 FB 
32c42     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32c46     73 32 00 04 
32c4a     00 00 10 00 
32c4e     00 00 00 00 
32c52     00 00 00 00 | atari2 file "atari2.s2"
32c56     43 87 43 87 
32c5a     43 87 44 87 
32c5e     43 87 44 87 
32c62     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
32c66     43 87 43 87 
32c6a     43 87 44 87 
32c6e     43 87 43 87 
32c72     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
32c76     44 87 43 87 
32c7a     44 87 43 87 
32c7e     43 87 43 87 
32c82     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32c86     43 87 43 87 
32c8a     44 87 43 87 
32c8e     44 87 44 87 
32c92     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
32c96     43 87 43 87 
32c9a     44 87 43 87 
32c9e     43 87 42 87 
32ca2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
32ca6     43 87 43 87 
32caa     43 87 43 87 
32cae     44 87 43 87 
32cb2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
32cb6     44 87 44 87 
32cba     43 87 44 87 
32cbe     43 87 44 87 
32cc2     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
32cc6     44 87 43 87 
32cca     44 87 44 87 
32cce     43 87 43 87 
32cd2     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
32cd6     43 87 44 87 
32cda     44 87 43 87 
32cde     43 87 44 87 
32ce2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
32ce6     43 87 43 87 
32cea     43 87 43 87 
32cee     43 87 43 87 
32cf2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
32cf6     42 87 43 87 
32cfa     44 87 42 87 
32cfe     43 87 43 87 
32d02     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
32d06     43 87 44 87 
32d0a     44 87 43 87 
32d0e     43 87 43 87 
32d12     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32d16     43 87 5C 87 
32d1a     EE 86 AC 87 
32d1e     4C 7C A3 78 
32d22     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
32d26     BC 78 BB 78 
32d2a     BD 78 BC 78 
32d2e     BB 78 BD 78 
32d32     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
32d36     BB 78 BB 78 
32d3a     BC 78 BC 78 
32d3e     BC 78 BB 78 
32d42     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
32d46     BC 78 BC 78 
32d4a     BC 78 BC 78 
32d4e     BC 78 BC 78 
32d52     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32d56     BB 78 BC 78 
32d5a     A0 78 4C 7C 
32d5e     11 7A 29 89 
32d62     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
32d66     44 87 43 87 
32d6a     44 87 43 87 
32d6e     43 87 42 87 
32d72     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
32d76     43 87 43 87 
32d7a     44 87 ED 85 
32d7e     71 85 52 79 
32d82     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
32d86     BC 78 BC 78 
32d8a     BC 78 BC 78 
32d8e     BC 78 BC 78 
32d92     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
32d96     BC 78 BC 78 
32d9a     BC 78 A0 78 
32d9e     CF 7A B9 81 
32da2     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
32da6     44 87 43 87 
32daa     43 87 44 87 
32dae     43 87 44 87 
32db2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
32db6     43 87 43 87 
32dba     43 87 43 87 
32dbe     44 87 43 87 
32dc2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
32dc6     43 87 43 87 
32dca     44 87 43 87 
32dce     44 87 43 87 
32dd2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
32dd6     44 87 43 87 
32dda     43 87 43 87 
32dde     5A 87 39 81 
32de2     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
32de6     A5 78 BC 78 
32dea     BB 78 BC 78 
32dee     BB 78 BC 78 
32df2     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
32df6     BC 78 BC 78 
32dfa     BC 78 BC 78 
32dfe     BC 78 8F 79 
32e02     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
32e06     09 85 47 87 
32e0a     43 87 43 87 
32e0e     42 87 42 87 
32e12     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
32e16     43 87 43 87 
32e1a     43 87 43 87 
32e1e     43 87 44 87 
32e22     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
32e26     43 87 43 87 
32e2a     44 87 43 87 
32e2e     42 87 43 87 
32e32     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
32e36     44 87 43 87 
32e3a     43 87 43 87 
32e3e     44 87 44 87 
32e42     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
32e46     94 78 55 7A 
32e4a     B9 78 BC 78 
32e4e     BC 78 BC 78 
32e52     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32e56     BC 78 BB 78 
32e5a     BC 78 BC 78 
32e5e     BC 78 BC 78 
32e62     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
32e66     BB 78 BC 78 
32e6a     BC 78 BC 78 
32e6e     BB 78 BC 78 
32e72     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
32e76     BC 78 BC 78 
32e7a     BD 78 BC 78 
32e7e     BC 78 BB 78 
32e82     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
32e86     94 78 B3 84 
32e8a     36 84 4A 87 
32e8e     43 87 43 87 
32e92     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
32e96     43 87 44 87 
32e9a     43 87 43 87 
32e9e     43 87 43 87 
32ea2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32ea6     43 87 44 87 
32eaa     43 87 44 87 
32eae     43 87 43 87 
32eb2     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
32eb6     43 87 43 87 
32eba     43 87 45 87 
32ebe     43 87 43 87 
32ec2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
32ec6     43 87 44 87 
32eca     44 87 44 87 
32ece     43 87 43 87 
32ed2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
32ed6     43 87 42 87 
32eda     43 87 43 87 
32ede     44 87 43 87 
32ee2     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
32ee6     54 87 3C 82 
32eea     36 83 52 79 
32eee     C6 78 BC 78 
32ef2     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
32ef6     BB 78 BB 78 
32efa     BC 78 BC 78 
32efe     BC 78 BC 78 
32f02     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
32f06     BD 78 ED 78 
32f0a     1B 79 F4 83 
32f0e     4D 83 4E 87 
32f12     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
32f16     44 87 43 87 
32f1a     42 87 44 87 
32f1e     43 87 42 87 
32f22     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
32f26     43 87 54 87 
32f2a     26 82 B3 84 
32f2e     D6 77 BB 78 
32f32     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
32f36     BC 78 BB 78 
32f3a     BB 78 BB 78 
32f3e     BB 78 BB 78 
32f42     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
32f46     BC 78 BC 78 
32f4a     26 79 18 75 
32f4e     36 83 1F 84 
32f52     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
32f56     43 87 43 87 
32f5a     43 87 43 87 
32f5e     43 87 44 87 
32f62     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
32f66     43 87 44 87 
32f6a     44 87 43 87 
32f6e     43 87 43 87 
32f72     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
32f76     43 87 43 87 
32f7a     43 87 43 87 
32f7e     44 87 44 87 
32f82     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
32f86     44 87 43 87 
32f8a     43 87 43 87 
32f8e     43 87 44 87 
32f92     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
32f96     44 87 44 87 
32f9a     44 87 43 87 
32f9e     44 87 43 87 
32fa2     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
32fa6     43 87 43 87 
32faa     43 87 44 87 
32fae     44 87 43 87 
32fb2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
32fb6     43 87 43 87 
32fba     43 87 43 87 
32fbe     43 87 44 87 
32fc2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
32fc6     43 87 44 87 
32fca     43 87 44 87 
32fce     19 87 7D 86 
32fd2     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
32fd6     B1 78 BC 78 
32fda     BC 78 BC 78 
32fde     BC 78 BC 78 
32fe2     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32fe6     BC 78 BC 78 
32fea     BD 78 BC 78 
32fee     B7 78 3B 7B 
32ff2     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
32ff6     96 86 44 87 
32ffa     43 87 43 87 
32ffe     43 87 43 87 
33002     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33006     44 87 44 87 
3300a     43 87 44 87 
3300e     43 87 44 87 
33012     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
33016     43 87 44 87 
3301a     43 87 44 87 
3301e     43 87 44 87 
33022     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33026     43 87 44 87 
3302a     43 87 43 87 
3302e     44 87 43 87 
33032     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33036     44 87 44 87 
3303a     43 87 43 87 
3303e     43 87 44 87 
33042     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33046     43 87 43 87 
3304a     43 87 43 87 
3304e     44 87 44 87 
33052     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
33056     36 83 CF 7A 
3305a     AB 78 BB 78 
3305e     BC 78 BC 78 
33062     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
33066     BB 78 BC 78 
3306a     BC 78 BC 78 
3306e     BC 78 BC 78 
33072     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33076     BC 78 BC 78 
3307a     BC 78 BB 78 
3307e     BC 78 BC 78 
33082     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33086     BB 78 BC 78 
3308a     BB 78 BC 78 
3308e     BC 78 BD 78 
33092     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
33096     BC 78 BC 78 
3309a     BC 78 BC 78 
3309e     BC 78 BD 78 
330a2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
330a6     BC 78 BB 78 
330aa     BC 78 BB 78 
330ae     BB 78 BC 78 
330b2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
330b6     BC 78 BC 78 
330ba     BC 78 BC 78 
330be     BC 78 BB 78 
330c2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
330c6     BC 78 BC 78 
330ca     BC 78 BD 78 
330ce     BB 78 BC 78 
330d2     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
330d6     BC 78 BC 78 
330da     BC 78 BB 78 
330de     BC 78 BB 78 
330e2     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
330e6     BB 78 BC 78 
330ea     BC 78 BC 78 
330ee     BC 78 BB 78 
330f2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
330f6     BC 78 BC 78 
330fa     BC 78 BB 78 
330fe     BC 78 BB 78 
33102     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33106     BC 78 BC 78 
3310a     BC 78 BC 78 
3310e     BB 78 BC 78 
33112     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33116     BC 78 9F 78 
3311a     52 79 B3 84 
3311e     2F 86 60 87 
33122     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
33126     44 87 43 87 
3312a     43 87 43 87 
3312e     43 87 43 87 
33132     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33136     43 87 43 87 
3313a     43 87 44 87 
3313e     43 87 43 87 
33142     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33146     43 87 43 87 
3314a     43 87 43 87 
3314e     43 87 44 87 
33152     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33156     44 87 44 87 
3315a     5E 87 BC 80 
3315e     FB 80 94 78 
33162     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
33166     BD 78 BC 78 
3316a     BB 78 BC 78 
3316e     BB 78 BB 78 
33172     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
33176     BC 78 BB 78 
3317a     BB 78 6B 79 
3317e     D6 77 AC 87 
33182     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
33186     43 87 44 87 
3318a     43 87 43 87 
3318e     44 87 43 87 
33192     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33196     43 87 44 87 
3319a     43 87 5C 87 
3319e     E7 80 00 80 
331a2     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
331a6     BC 78 BD 78 
331aa     BC 78 BC 78 
331ae     BC 78 BB 78 
331b2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
331b6     BC 78 BC 78 
331ba     BB 78 BC 78 
331be     BB 78 BC 78 
331c2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
331c6     BB 78 BC 78 
331ca     BC 78 BC 78 
331ce     BC 78 BC 78 
331d2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
331d6     BC 78 BC 78 
331da     BC 78 BC 78 
331de     A0 78 8D 7B 
331e2     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
331e6     60 87 43 87 
331ea     44 87 44 87 
331ee     43 87 43 87 
331f2     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
331f6     44 87 43 87 
331fa     43 87 43 87 
331fe     44 87 73 86 
33202     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33206     51 7B B6 78 
3320a     BC 78 BD 78 
3320e     BC 78 BC 78 
33212     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33216     BB 78 BC 78 
3321a     BD 78 BB 78 
3321e     BC 78 BB 78 
33222     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33226     BC 78 BC 78 
3322a     BC 78 BC 78 
3322e     BB 78 BC 78 
33232     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33236     BC 78 BB 78 
3323a     BB 78 BC 78 
3323e     BC 78 BB 78 
33242     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
33246     22 8C AF 84 
3324a     48 87 43 87 
3324e     44 87 43 87 
33252     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
33256     43 87 42 87 
3325a     43 87 43 87 
3325e     44 87 43 87 
33262     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33266     43 87 43 87 
3326a     44 87 44 87 
3326e     43 87 43 87 
33272     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33276     43 87 43 87 
3327a     43 87 43 87 
3327e     44 87 43 87 
33282     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
33286     9F 8B D6 77 
3328a     16 7C B3 78 
3328e     BC 78 BB 78 
33292     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33296     BB 78 BC 78 
3329a     BB 78 BC 78 
3329e     BC 78 BC 78 
332a2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
332a6     BC 78 BB 78 
332aa     BB 78 BC 78 
332ae     BB 78 BC 78 
332b2     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
332b6     BB 78 BB 78 
332ba     BC 78 BC 78 
332be     BC 78 BB 78 
332c2     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
332c6     BC 78 BC 78 
332ca     BC 78 BD 78 
332ce     BB 78 BC 78 
332d2     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
332d6     BC 78 BC 78 
332da     BC 78 BB 78 
332de     BC 78 BC 78 
332e2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
332e6     A8 78 54 7E 
332ea     F4 83 17 82 
332ee     50 87 43 87 
332f2     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
332f6     44 87 43 87 
332fa     44 87 43 87 
332fe     43 87 44 87 
33302     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33306     43 87 28 87 
3330a     20 85 CF 7A 
3330e     70 7D AD 78 
33312     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
33316     BB 78 BC 78 
3331a     BC 78 BC 78 
3331e     BB 78 BB 78 
33322     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
33326     BB 78 B2 78 
3332a     9A 7C CF 7A 
3332e     4A 87 0D 87 
33332     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
33336     43 87 44 87 
3333a     43 87 44 87 
3333e     43 87 43 87 
33342     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
33346     44 87 43 87 
3334a     28 87 51 85 
3334e     11 7A 1E 7D 
33352     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
33356     BC 78 BB 78 
3335a     BC 78 BC 78 
3335e     BC 78 BC 78 
33362     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33366     BB 78 BC 78 
3336a     BB 78 BC 78 
3336e     BC 78 BC 78 
33372     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33376     BB 78 BC 78 
3337a     BC 78 BC 78 
3337e     BD 78 BB 78 
33382     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
33386     BC 78 BB 78 
3338a     BC 78 BC 78 
3338e     BC 78 BB 78 
33392     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33396     BC 78 BC 78 
3339a     BC 78 BC 78 
3339e     BB 78 BC 78 
333a2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
333a6     BC 78 BD 78 
333aa     BC 78 BC 78 
333ae     BC 78 BB 78 
333b2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
333b6     BC 78 BB 78 
333ba     BB 78 BC 78 
333be     BC 78 BB 78 
333c2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
333c6     BB 78 BB 78 
333ca     BB 78 BC 78 
333ce     B6 78 48 7D 
333d2     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
333d6     56 87 43 87 
333da     42 87 44 87 
333de     44 87 43 87 
333e2     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
333e6     43 87 44 87 
333ea     43 87 44 87 
333ee     4C 87 7E 83 
333f2     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
333f6     F7 78 BC 78 
333fa     BC 78 BB 78 
333fe     BB 78 BC 78 
33402     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33406     BC 78 BB 78 
3340a     BC 78 BC 78 
3340e     BB 78 BC 78 
33412     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33416     BB 78 BC 78 
3341a     BC 78 BC 78 
3341e     BC 78 BB 78 
33422     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33426     BC 78 BC 78 
3342a     BC 78 BC 78 
3342e     BC 78 BB 78 
33432     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33436     BC 78 BB 78 
3343a     BB 78 BC 78 
3343e     BC 78 BB 78 
33442     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33446     BC 78 BC 78 
3344a     BB 78 BC 78 
3344e     BC 78 BC 78 
33452     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
33456     73 32 00 04 
3345a     00 00 10 00 
3345e     00 00 00 00 
33462     00 00 00 00 | atari12 file "atari12.s2"
33466     00 6D 00 6D 
3346a     00 6D 00 6D 
3346e     00 6D 00 6D 
33472     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33476     00 6D 00 6D 
3347a     00 6D 00 6D 
3347e     00 6D 00 6D 
33482     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33486     00 6D 00 6D 
3348a     00 6D 00 6D 
3348e     00 6D 00 6D 
33492     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33496     00 6D 00 6D 
3349a     00 6D 00 6D 
3349e     00 6D 00 6D 
334a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
334a6     00 6D 00 6D 
334aa     00 6D 00 6D 
334ae     00 6D 00 6D 
334b2     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
334b6     00 6C 00 6C 
334ba     00 6C 00 6C 
334be     00 6C 00 6C 
334c2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
334c6     00 6C 00 6C 
334ca     00 6C 00 6C 
334ce     00 6C 00 6C 
334d2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
334d6     00 6C 00 6C 
334da     00 6C 00 6C 
334de     00 6C 00 6C 
334e2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
334e6     00 6C 00 6C 
334ea     00 6C 00 6C 
334ee     00 6C 00 6C 
334f2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
334f6     00 6C 00 6C 
334fa     00 6C 00 6C 
334fe     00 6C 00 6C 
33502     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33506     00 6C 00 6C 
3350a     00 6C 00 6C 
3350e     00 6C 00 6C 
33512     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33516     00 6C 00 6C 
3351a     00 6C 00 6C 
3351e     00 6C 00 6C 
33522     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33526     00 6C 00 6C 
3352a     00 6C 00 6C 
3352e     00 6C 00 6C 
33532     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33536     00 6C 00 6C 
3353a     00 6C 00 6C 
3353e     00 6C 00 6C 
33542     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33546     00 6C 00 6C 
3354a     00 6C 00 6C 
3354e     00 6C 00 6C 
33552     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33556     00 6C 00 6C 
3355a     00 6C 00 6C 
3355e     00 6C 00 6C 
33562     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33566     00 6C 00 6B 
3356a     00 6B 00 6B 
3356e     00 6B 00 6B 
33572     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33576     00 6B 00 6B 
3357a     00 6B 00 6B 
3357e     00 6B 00 6B 
33582     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33586     00 6B 00 6B 
3358a     00 6B 00 6B 
3358e     00 6B 00 6B 
33592     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33596     00 6B 00 6B 
3359a     00 6B 00 6B 
3359e     00 6B 00 6B 
335a2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335a6     00 6B 00 6B 
335aa     00 6B 00 6B 
335ae     00 6B 00 6B 
335b2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335b6     00 6B 00 6B 
335ba     00 6B 00 6B 
335be     00 6B 00 6B 
335c2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335c6     00 6B 00 6B 
335ca     00 6B 00 6B 
335ce     00 6B 00 6B 
335d2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335d6     00 6B 00 6B 
335da     00 6B 00 6B 
335de     00 6B 00 6B 
335e2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335e6     00 6B 00 6B 
335ea     00 6B 00 6B 
335ee     00 6B 00 6B 
335f2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335f6     00 6B 00 6B 
335fa     00 6B 00 6B 
335fe     00 6A 00 9D 
33602     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33606     00 9E 00 9E 
3360a     00 9E 00 9E 
3360e     00 9E 00 9E 
33612     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33616     00 9E 00 9E 
3361a     00 9E 00 9E 
3361e     00 9E 00 9E 
33622     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33626     00 9E 00 9E 
3362a     00 9E 00 9E 
3362e     00 9E 00 9E 
33632     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33636     00 9E 00 9E 
3363a     00 9E 00 9E 
3363e     00 9E 00 9E 
33642     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33646     00 9E 00 9E 
3364a     00 9E 00 9E 
3364e     00 9E 00 9E 
33652     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33656     00 9E 00 9E 
3365a     00 9E 00 9E 
3365e     00 9E 00 9E 
33662     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33666     00 9E 00 9E 
3366a     00 9E 00 9E 
3366e     00 9E 00 9E 
33672     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33676     00 9E 00 9E 
3367a     00 9E 00 9E 
3367e     00 9E 00 9E 
33682     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33686     00 9E 00 9E 
3368a     00 9E 00 9E 
3368e     00 9E 00 9E 
33692     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
33696     00 9F 00 9F 
3369a     00 9F 00 9F 
3369e     00 9F 00 9F 
336a2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336a6     00 9F 00 9F 
336aa     00 9F 00 9F 
336ae     00 9F 00 9F 
336b2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336b6     00 9F 00 9F 
336ba     00 9F 00 9F 
336be     00 9F 00 9F 
336c2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336c6     00 9F 00 9F 
336ca     00 9F 00 9F 
336ce     00 9F 00 9F 
336d2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336d6     00 9F 00 9F 
336da     00 9F 00 9F 
336de     00 9F 00 9F 
336e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336e6     00 9F 00 9F 
336ea     00 9F 00 9F 
336ee     00 9F 00 9F 
336f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336f6     00 9F 00 9F 
336fa     00 9F 00 9F 
336fe     00 9F 00 9F 
33702     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33706     00 9F 00 9F 
3370a     00 9F 00 9F 
3370e     00 9F 00 9F 
33712     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33716     00 9F 00 9F 
3371a     00 9F 00 9F 
3371e     00 9F 00 9F 
33722     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33726     00 9F 00 9F 
3372a     00 9F 00 9F 
3372e     00 9F 00 9F 
33732     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33736     00 9F 00 9F 
3373a     00 9F 00 9F 
3373e     00 9F 00 9F 
33742     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33746     00 9F 00 9F 
3374a     00 9F 00 9F 
3374e     00 9F 00 9F 
33752     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33756     00 9F 00 9F 
3375a     00 9F 00 A0 
3375e     00 A0 00 A0 
33762     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33766     00 A0 00 A0 
3376a     00 A0 00 A0 
3376e     00 A0 00 A0 
33772     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33776     00 A0 00 A0 
3377a     00 A0 00 A0 
3377e     00 A0 00 A0 
33782     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33786     00 A0 00 A0 
3378a     00 A0 00 A0 
3378e     00 A0 00 A0 
33792     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33796     00 A0 00 A0 
3379a     00 A0 00 A0 
3379e     00 A0 00 A0 
337a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337a6     00 A0 00 A0 
337aa     00 A0 00 A0 
337ae     00 A0 00 A0 
337b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337b6     00 A0 00 A0 
337ba     00 A0 00 A0 
337be     00 A0 00 A0 
337c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337c6     00 A0 00 A0 
337ca     00 A0 00 A0 
337ce     00 A0 00 A0 
337d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337d6     00 A0 00 A0 
337da     00 A0 00 A0 
337de     00 A0 00 A0 
337e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337e6     00 A0 00 A0 
337ea     00 A0 00 A0 
337ee     00 A0 00 A0 
337f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337f6     00 A0 00 A0 
337fa     00 A0 00 A0 
337fe     00 A0 00 A0 
33802     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33806     00 A0 00 A0 
3380a     00 A0 00 A0 
3380e     00 A0 00 A0 
33812     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33816     00 A0 00 A0 
3381a     00 A0 00 A0 
3381e     00 A0 00 A0 
33822     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33826     00 6D 00 6D 
3382a     00 6D 00 6D 
3382e     00 6D 00 6D 
33832     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33836     00 6D 00 6D 
3383a     00 6D 00 6D 
3383e     00 6D 00 6D 
33842     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33846     00 6D 00 6D 
3384a     00 6D 00 6D 
3384e     00 6D 00 6D 
33852     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33856     00 6D 00 6D 
3385a     00 6D 00 6D 
3385e     00 6D 00 6D 
33862     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33866     00 6D 00 6D 
3386a     00 6D 00 6D 
3386e     00 6D 00 6D 
33872     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33876     00 6D 00 6D 
3387a     00 6D 00 6D 
3387e     00 6D 00 6D 
33882     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33886     00 6D 00 6D 
3388a     00 6D 00 6D 
3388e     00 6D 00 6D 
33892     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33896     00 6D 00 6D 
3389a     00 6D 00 6D 
3389e     00 6D 00 6D 
338a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
338a6     00 6D 00 6D 
338aa     00 A0 00 A0 
338ae     00 A0 00 A0 
338b2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338b6     00 A0 00 A0 
338ba     00 A0 00 A0 
338be     00 A0 00 A0 
338c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338c6     00 A0 00 A0 
338ca     00 A0 00 A0 
338ce     00 A0 00 A0 
338d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338d6     00 A0 00 A0 
338da     00 A0 00 A0 
338de     00 A0 00 A0 
338e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338e6     00 A0 00 A0 
338ea     00 A0 00 A0 
338ee     00 A0 00 A0 
338f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338f6     00 A0 00 A0 
338fa     00 A0 00 A0 
338fe     00 A0 00 A0 
33902     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33906     00 A0 00 A0 
3390a     00 A0 00 A0 
3390e     00 A0 00 A0 
33912     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33916     00 A0 00 A0 
3391a     00 A0 00 A0 
3391e     00 A0 00 A0 
33922     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33926     00 A0 00 A0 
3392a     00 A0 00 A0 
3392e     00 A0 00 A0 
33932     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33936     00 6D 00 6D 
3393a     00 6D 00 6D 
3393e     00 6D 00 6D 
33942     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33946     00 6D 00 6D 
3394a     00 6D 00 6D 
3394e     00 6D 00 6D 
33952     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33956     00 6D 00 6D 
3395a     00 6D 00 6D 
3395e     00 6D 00 6D 
33962     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33966     00 6D 00 6D 
3396a     00 6D 00 6D 
3396e     00 6D 00 6D 
33972     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33976     00 6D 00 6D 
3397a     00 6D 00 6D 
3397e     00 6D 00 6D 
33982     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33986     00 6D 00 6D 
3398a     00 6D 00 6D 
3398e     00 6D 00 6D 
33992     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33996     00 6D 00 6D 
3399a     00 6D 00 6D 
3399e     00 6D 00 6D 
339a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339a6     00 6D 00 6D 
339aa     00 6D 00 6D 
339ae     00 6D 00 6D 
339b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339b6     00 6D 00 6D 
339ba     00 6C 00 A0 
339be     00 9F 00 A0 
339c2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
339c6     00 A0 00 A0 
339ca     00 A0 00 A0 
339ce     00 A0 00 A0 
339d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
339d6     00 A0 00 A0 
339da     00 A0 00 A0 
339de     00 A0 00 A0 
339e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
339e6     00 A0 00 A0 
339ea     00 A0 00 A0 
339ee     00 A0 00 A0 
339f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
339f6     00 A0 00 A0 
339fa     00 A0 00 A0 
339fe     00 A0 00 A0 
33a02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a06     00 A0 00 A0 
33a0a     00 A0 00 A0 
33a0e     00 A0 00 A0 
33a12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a16     00 A0 00 A0 
33a1a     00 A0 00 A0 
33a1e     00 A0 00 A0 
33a22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a26     00 A0 00 A0 
33a2a     00 A0 00 A0 
33a2e     00 A0 00 A0 
33a32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a36     00 A0 00 A0 
33a3a     00 A0 00 A0 
33a3e     00 A0 00 A0 
33a42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a46     00 A0 00 A0 
33a4a     00 A0 00 A0 
33a4e     00 A0 00 A0 
33a52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a56     00 A0 00 A0 
33a5a     00 A0 00 A0 
33a5e     00 A0 00 A0 
33a62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a66     00 A0 00 A0 
33a6a     00 A0 00 A0 
33a6e     00 A0 00 A0 
33a72     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
33a76     00 A1 00 A1 
33a7a     00 A1 00 A1 
33a7e     00 A1 00 A1 
33a82     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33a86     00 A1 00 A1 
33a8a     00 A1 00 A1 
33a8e     00 A1 00 A1 
33a92     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33a96     00 A1 00 A1 
33a9a     00 A1 00 A1 
33a9e     00 A1 00 A1 
33aa2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33aa6     00 A1 00 A1 
33aaa     00 A1 00 A1 
33aae     00 A1 00 A1 
33ab2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ab6     00 A1 00 A1 
33aba     00 A1 00 A1 
33abe     00 A1 00 A1 
33ac2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ac6     00 A1 00 A1 
33aca     00 A1 00 A1 
33ace     00 6E 00 6E 
33ad2     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33ad6     00 6E 00 6E 
33ada     00 6E 00 6E 
33ade     00 6E 00 6E 
33ae2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33ae6     00 6E 00 6E 
33aea     00 6E 00 6E 
33aee     00 6E 00 6E 
33af2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33af6     00 6E 00 6E 
33afa     00 6E 00 6E 
33afe     00 6E 00 6E 
33b02     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33b06     00 6E 00 6D 
33b0a     00 6D 00 6D 
33b0e     00 6D 00 6D 
33b12     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b16     00 6D 00 6D 
33b1a     00 6D 00 6D 
33b1e     00 6D 00 6D 
33b22     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b26     00 6D 00 6D 
33b2a     00 6D 00 6D 
33b2e     00 6D 00 6D 
33b32     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b36     00 6D 00 6D 
33b3a     00 6D 00 6D 
33b3e     00 6D 00 6D 
33b42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b46     00 6D 00 6D 
33b4a     00 6D 00 6D 
33b4e     00 6D 00 6D 
33b52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b56     00 6D 00 6D 
33b5a     00 6D 00 6D 
33b5e     00 6D 00 6D 
33b62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b66     00 6D 00 6D 
33b6a     00 6D 00 6D 
33b6e     00 6D 00 6D 
33b72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b76     00 6D 00 6D 
33b7a     00 6D 00 6D 
33b7e     00 6D 00 6D 
33b82     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b86     00 6D 00 6D 
33b8a     00 6D 00 6D 
33b8e     00 6D 00 6D 
33b92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b96     00 6D 00 6D 
33b9a     00 6D 00 6D 
33b9e     00 6D 00 6D 
33ba2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ba6     00 6D 00 6D 
33baa     00 6D 00 6D 
33bae     00 6D 00 6D 
33bb2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33bb6     00 6D 00 6D 
33bba     00 6C 00 6C 
33bbe     00 6C 00 6C 
33bc2     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bc6     00 6C 00 6C 
33bca     00 6C 00 6C 
33bce     00 6C 00 6C 
33bd2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bd6     00 6C 00 6C 
33bda     00 6C 00 6C 
33bde     00 9D 00 9F 
33be2     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
33be6     00 9F 00 9F 
33bea     00 9F 00 9F 
33bee     00 A0 00 A0 
33bf2     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33bf6     00 A0 00 A0 
33bfa     00 A0 00 A0 
33bfe     00 A0 00 A0 
33c02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c06     00 A0 00 A0 
33c0a     00 A0 00 A0 
33c0e     00 A0 00 A0 
33c12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c16     00 A0 00 A0 
33c1a     00 A0 00 A0 
33c1e     00 A0 00 A0 
33c22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c26     00 A0 00 A0 
33c2a     00 A0 00 A0 
33c2e     00 A0 00 A0 
33c32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c36     00 A0 00 A0 
33c3a     00 A0 00 A0 
33c3e     00 A0 00 A0 
33c42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c46     00 A0 00 A0 
33c4a     00 A0 00 A0 
33c4e     00 A0 00 A0 
33c52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c56     00 A0 00 A0 
33c5a     00 A0 00 A0 
33c5e     00 A0 00 A0 
33c62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c66     01 00 00 00 
33c6a     00 00 00 00 
33c6e     00 00 00 00 
33c72     00 00 00 00 | mouse  file "mouse2.def"
33c76     00 00 00 00 
33c7a     00 00 00 00 
33c7e     00 00 00 00 
33c82     00 00 00 00 | 	byte	$00[16]
33c86     01 01 00 00 
33c8a     00 00 00 00 
33c8e     00 00 00 00 
33c92     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33c96     00 00 00 00 
33c9a     00 00 00 00 
33c9e     00 00 00 00 
33ca2     00 00 00 00 | 	byte	$00[16]
33ca6     01 0D 01 00 
33caa     00 00 00 00 
33cae     00 00 00 00 
33cb2     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33cb6     00 00 00 00 
33cba     00 00 00 00 
33cbe     00 00 00 00 
33cc2     00 00 00 00 | 	byte	$00[16]
33cc6     01 0D 0D 01 
33cca     00 00 00 00 
33cce     00 00 00 00 
33cd2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33cd6     00 00 00 00 
33cda     00 00 00 00 
33cde     00 00 00 00 
33ce2     00 00 00 00 | 	byte	$00[16]
33ce6     01 0D 0D 0D 
33cea     01 00 00 00 
33cee     00 00 00 00 
33cf2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33cf6     00 00 00 00 
33cfa     00 00 00 00 
33cfe     00 00 00 00 
33d02     00 00 00 00 | 	byte	$00[16]
33d06     01 0D 0D 0D 
33d0a     0D 01 00 00 
33d0e     00 00 00 00 
33d12     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33d16     00 00 00 00 
33d1a     00 00 00 00 
33d1e     00 00 00 00 
33d22     00 00 00 00 | 	byte	$00[16]
33d26     01 0D 0D 0D 
33d2a     0D 0D 01 00 
33d2e     00 00 00 00 
33d32     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
33d36     00 00 00 00 
33d3a     00 00 00 00 
33d3e     00 00 00 00 
33d42     00 00 00 00 | 	byte	$00[16]
33d46     01 0D 0D 0D 
33d4a     0D 0D 0D 01 
33d4e     00 00 00 00 
33d52     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
33d56     00 00 00 00 
33d5a     00 00 00 00 
33d5e     00 00 00 00 
33d62     00 00 00 00 | 	byte	$00[16]
33d66     01 0D 0D 0D 
33d6a     0D 0D 0D 0C 
33d6e     01 00 00 00 
33d72     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
33d76     00 00 00 00 
33d7a     00 00 00 00 
33d7e     00 00 00 00 
33d82     00 00 00 00 | 	byte	$00[16]
33d86     01 0D 0D 0D 
33d8a     0D 0D 0D 0D 
33d8e     0C 01 00 00 
33d92     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
33d96     00 00 00 00 
33d9a     00 00 00 00 
33d9e     00 00 00 00 
33da2     00 00 00 00 | 	byte	$00[16]
33da6     01 0D 0D 0D 
33daa     0D 0D 0D 0D 
33dae     0D 0C 01 00 
33db2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
33db6     00 00 00 00 
33dba     00 00 00 00 
33dbe     00 00 00 00 
33dc2     00 00 00 00 | 	byte	$00[16]
33dc6     01 0D 0D 0D 
33dca     0D 0D 0D 0D 
33dce     0D 0D 0B 01 
33dd2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
33dd6     00 00 00 00 
33dda     00 00 00 00 
33dde     00 00 00 00 
33de2     00 00 00 00 | 	byte	$00[16]
33de6     01 0D 0D 0D 
33dea     0C 0D 0D 03 
33dee     01 01 01 01 
33df2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
33df6     00 00 00 00 
33dfa     00 00 00 00 
33dfe     00 00 00 00 
33e02     00 00 00 00 | 	byte	$00[16]
33e06     01 0D 0D 0C 
33e0a     01 09 0D 03 
33e0e     00 00 00 00 
33e12     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
33e16     00 00 00 00 
33e1a     00 00 00 00 
33e1e     00 00 00 00 
33e22     00 00 00 00 | 	byte	$00[16]
33e26     01 0D 0C 01 
33e2a     00 01 0D 0B 
33e2e     01 00 00 00 
33e32     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
33e36     00 00 00 00 
33e3a     00 00 00 00 
33e3e     00 00 00 00 
33e42     00 00 00 00 | 	byte	$00[16]
33e46     01 0C 01 00 
33e4a     00 01 0A 0D 
33e4e     01 00 00 00 
33e52     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
33e56     00 00 00 00 
33e5a     00 00 00 00 
33e5e     00 00 00 00 
33e62     00 00 00 00 | 	byte	$00[16]
33e66     01 01 00 00 
33e6a     00 00 01 0D 
33e6e     0B 01 00 00 
33e72     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
33e76     00 00 00 00 
33e7a     00 00 00 00 
33e7e     00 00 00 00 
33e82     00 00 00 00 
33e86     00 00 00 00 
33e8a     00 00       | 	byte	$00[22]
33e8c     01 0B 0D 01 
33e90     00 00 00 00 
33e94     00 00 00 00 
33e98     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33e9c     00 00 00 00 
33ea0     00 00 00 00 
33ea4     00 00 00 00 
33ea8     00 00 00 00 
33eac     00          | 	byte	$00[17]
33ead     01 01 00 00 
33eb1     00 00 00 00 
33eb5     00 00 00 00 
33eb9     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33ebd     00 00 00 00 
      ...             
34061     00 00 00 00 
34065     00          | 	byte	$00[425]
34066                 | 
34066     00 00       |              	org
34068 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3406c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
34070 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
34074 003             | 
34074 003 00 30 04 F6 |                 mov     psramaddr,#0
34078 004             | 
34078 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3407c 005 20 00 00 FF 
34080 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
34084 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
34088 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3408c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
34090 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
34094 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
34098 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3409c 00d             | 
3409c 00d 20 00 00 FF 
340a0 00e 00 30 04 F1 |                 add 	psramaddr,##16384
340a4 00f E0 03 00 FF 
340a8 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
340ac 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
340b0 012             | 
340b0 012             |                 
340b0 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
340b4 013             |     
340b4 013 01 2C 60 FD |                 cogid 	t11				' get id
340b8 014 00 00 EC FC |                 coginit #0,#0				' start the new program
340bc 015 03 2C 60 FD |                 cogstop t11				' stop the loader
340c0 016             | 
340c0 016 00 00 00 00 | t11 		long 	0
340c4 017 00 FF 07 00 | mailbox 	long 	$7FF00
340c8 018 00 00 00 00 | psramaddr 	long 	0
340cc 019 00 00 00 00 | pslockval	long 	0
340d0 01a 00 00 00 00 | cmd             long    0
340d4 01b 00 00 00 00 | buf1            long    0
340d8 01c 00 40 00 00 | buf2            long    16384
340dc 01d E0 40 03 00 | 	long	@@@_dat_ + 12612
340e0 01e 50 32 20 52 
340e4 01f 65 74 72 6F 
340e8 020 6D 61 63 68 
340ec 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
340f0 022 42 41 53 49 
340f4 023 43 20 76 65 
340f8 024 72 73 69 6F 
340fc 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
34100 026 33 32 00 00 | 	byte	$33, $32, $00, $00
34104 027             | 	alignl
34104 027             | _hg010b_spin2_dat_
34104 027             | 
34104 027 00 00 00 00 
34108 028 00 00 00 00 
3410c 029 00 00 00 00 
34110 02a 00 00 00 00 
34114 02b 00 00 00    | vga_font       file "vgafont.def"
34117 02b 7E 81 A5 81 
3411b 02c 81 BD 99 81 
3411f 02d 81 7E 00 00 
34123 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
34127 02f 7E FF DB FF 
3412b 030 FF C3 E7 FF 
3412f 031 FF 7E 00 00 
34133 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
34137 033 00 36 7F 7F 
3413b 034 7F 7F 3E 1C 
3413f 035 08 00 00 00 
34143 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
34147 037 00 08 1C 3E 
3414b 038 7F 3E 1C 08 
3414f 039 00 00 00 00 
34153 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
34157 03b 18 3C 3C E7 
3415b 03c E7 E7 18 18 
3415f 03d 3C 00 00 00 
34163 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34167 03f 18 3C 7E FF 
3416b 040 FF 7E 18 18 
3416f 041 3C 00 00 00 
34173 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34177 043 00 00 00 18 
3417b 044 3C 3C 18 00 
3417f 045 00 00 00 00 
34183 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
34187 047 FF FF FF E7 
3418b 048 C3 C3 E7 FF 
3418f 049 FF FF FF FF 
34193 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
34197 04b 00 00 3C 66 
3419b 04c 42 42 66 3C 
3419f 04d 00 00 00 00 
341a3 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
341a7 04f FF FF C3 99 
341ab 050 BD BD 99 C3 
341af 051 FF FF FF FF 
341b3 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
341b7 053 78 70 58 4C 
341bb 054 1E 33 33 33 
341bf 055 33 1E 00 00 
341c3 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
341c7 057 3C 66 66 66 
341cb 058 66 3C 18 7E 
341cf 059 18 18 00 00 
341d3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
341d7 05b FC CC FC 0C 
341db 05c 0C 0C 0C 0E 
341df 05d 0F 07 00 00 
341e3 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
341e7 05f FE C6 FE C6 
341eb 060 C6 C6 C6 E6 
341ef 061 E7 67 03 00 
341f3 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
341f7 063 18 18 DB 3C 
341fb 064 E7 3C DB 18 
341ff 065 18 00 00 00 
34203 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
34207 067 03 07 0F 1F 
3420b 068 7F 1F 0F 07 
3420f 069 03 01 00 00 
34213 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
34217 06b 60 70 78 7C 
3421b 06c 7F 7C 78 70 
3421f 06d 60 40 00 00 
34223 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
34227 06f 18 3C 7E 18 
3422b 070 18 18 7E 3C 
3422f 071 18 00 00 00 
34233 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
34237 073 66 66 66 66 
3423b 074 66 66 66    | 	byte	$66[7]
3423e 075 00 66 66 00 
34242 076 00 00 00 00 
34246 077 00 FE DB DB 
3424a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3424e 079 D8 D8 D8 00 
34252 07a 00 00 00 3E 
34256 07b 63 06 1C 36 
3425a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3425e 07d 30 63 3E 00 
34262 07e 00 00 00 00 
34266 07f 00 00 00 00 
3426a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3426e 081 7F 7F 7F 00 
34272 082 00 00 00 00 
34276 083 00 18 3C 7E 
3427a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3427e 085 3C 18 7E 00 
34282 086 00 00 00 00 
34286 087 00 18 3C 7E 
3428a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3428e 089 18 18 18 00 
34292 08a 00 00 00 00 
34296 08b 00 18 18 18 
3429a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3429e 08d 7E 3C 18 00 
342a2 08e 00 00 00 00 
342a6 08f 00 00 00 18 
342aa 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
342ae 091 00 00 00 00 
342b2 092 00 00 00 00 
342b6 093 00 00 00    | 	byte	$00[11]
342b9 094 0C 06 7F 06 
342bd 095 0C 00 00 00 
342c1 096 00 00 00 00 
342c5 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
342c9 098 00 03 03 03 
342cd 099 7F 00 00 00 
342d1 09a 00 00 00 00 
342d5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
342d9 09c 14 36 7F 36 
342dd 09d 14 00 00 00 
342e1 09e 00 00 00 00 
342e5 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
342e9 0a0 1C 1C 3E 3E 
342ed 0a1 7F 7F 00 00 
342f1 0a2 00 00 00 00 
342f5 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
342f9 0a4 7F 3E 3E 1C 
342fd 0a5 1C 08 00 00 
34301 0a6 00 00 00 00 
34305 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34309 0a8 00 00 00 00 
3430d 0a9 00 00 00 00 
34311 0aa 00 00 00 00 
34315 0ab 00 00       | 	byte	$00[14]
34317 0ab 18 3C 3C 3C 
3431b 0ac 18 18 18 00 
3431f 0ad 18 18 00 00 
34323 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
34327 0af 66 24 00 00 
3432b 0b0 00 00 00 00 
3432f 0b1 00 00 00 00 
34333 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34337 0b3 00 36 36 7F 
3433b 0b4 36 36 36 7F 
3433f 0b5 36 36 00 00 
34343 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
34347 0b7 3E 63 43 03 
3434b 0b8 3E 60 60 61 
3434f 0b9 63 3E 18 18 
34353 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
34357 0bb 00 00 43 63 
3435b 0bc 30 18 0C 06 
3435f 0bd 63 61 00 00 
34363 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
34367 0bf 1C 36 36 1C 
3436b 0c0 6E 3B 33 33 
3436f 0c1 33 6E 00 00 
34373 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
34377 0c3 0C 0C 0C 06 
3437b 0c4 00 00 00 00 
3437f 0c5 00 00 00 00 
34383 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34387 0c7 30 18 0C 0C 
3438b 0c8 0C 0C 0C 0C 
3438f 0c9 18 30 00 00 
34393 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
34397 0cb 0C 18 30 30 
3439b 0cc 30 30 30 30 
3439f 0cd 18 0C 00 00 
343a3 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
343a7 0cf 00 00 00 66 
343ab 0d0 3C FF 3C 66 
343af 0d1 00 00 00 00 
343b3 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
343b7 0d3 00 00 00 18 
343bb 0d4 18 7E 18 18 
343bf 0d5 00 00 00 00 
343c3 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
343c7 0d7 00 00 00 00 
343cb 0d8 00 00 00 00 | 	byte	$00[8]
343cf 0d9 18 18 18 0C 
343d3 0da 00 00 00 00 
343d7 0db 00 00 00 00 
343db 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
343df 0dd 00 00 00 00 
343e3 0de 00 00 00 00 
343e7 0df 00 00 00 00 
343eb 0e0 00 00 00 00 | 	byte	$00[16]
343ef 0e1 18 18 00 00 
343f3 0e2 00 00 00 00 
343f7 0e3 00 00 40 60 
343fb 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
343ff 0e5 03 01 00 00 
34403 0e6 00 00 00 00 
34407 0e7 1C 36 63 63 
3440b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3440f 0e9 36 1C 00 00 
34413 0ea 00 00 00 00 
34417 0eb 18 1C 1E 18 
3441b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3441f 0ed 18 7E 00 00 
34423 0ee 00 00 00 00 
34427 0ef 3E 63 60 30 
3442b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3442f 0f1 63 7F 00 00 
34433 0f2 00 00 00 00 
34437 0f3 3E 63 60 60 
3443b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3443f 0f5 63 3E 00 00 
34443 0f6 00 00 00 00 
34447 0f7 30 38 3C 36 
3444b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3444f 0f9 30 78 00 00 
34453 0fa 00 00 00 00 
34457 0fb 7F 03 03 03 
3445b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3445f 0fd 63 3E 00 00 
34463 0fe 00 00 00 00 
34467 0ff 1C 06 03 03 
3446b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3446f 101 63 3E 00 00 
34473 102 00 00 00 00 
34477 103 7F 63 60 60 
3447b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3447f 105 0C 0C 00 00 
34483 106 00 00 00 00 
34487 107 3E 63 63 63 
3448b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3448f 109 63 3E 00 00 
34493 10a 00 00 00 00 
34497 10b 3E 63 63 63 
3449b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3449f 10d 30 1E 00 00 
344a3 10e 00 00 00 00 
344a7 10f 00 00 00 18 
344ab 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
344af 111 18 18 00 00 
344b3 112 00 00 00 00 
344b7 113 00 00 00 18 
344bb 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
344bf 115 18 18 0C 00 
344c3 116 00 00 00 00 
344c7 117 00 60 30 18 
344cb 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
344cf 119 30 60 00 00 
344d3 11a 00 00 00 00 
344d7 11b 00 00 00 7E 
344db 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
344df 11d 00 00 00 00 
344e3 11e 00 00 00 00 
344e7 11f 00          | 	byte	$00[9]
344e8 120 06 0C 18 30 
344ec 121 60 30 18 0C 
344f0 122 06 00 00 00 
344f4 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
344f8 124 63 63 30 18 
344fc 125 18 18 00 18 
34500 126 18 00 00 00 
34504 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
34508 128 3E 63 63 7B 
3450c 129 7B 7B 3B 03 
34510 12a 3E 00 00 00 
34514 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
34518 12c 1C 36 63 63 
3451c 12d 7F 63 63 63 
34520 12e 63 00 00 00 
34524 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
34528 130 66 66 66 3E 
3452c 131 66 66 66 66 
34530 132 3F 00 00 00 
34534 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
34538 134 66 43 03 03 
3453c 135 03 03 43 66 
34540 136 3C 00 00 00 
34544 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
34548 138 36 66 66 66 
3454c 139 66 66 66 36 
34550 13a 1F 00 00 00 
34554 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
34558 13c 66 46 16 1E 
3455c 13d 16 06 46 66 
34560 13e 7F 00 00 00 
34564 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
34568 140 66 46 16 1E 
3456c 141 16 06 06 06 
34570 142 0F 00 00 00 
34574 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
34578 144 66 43 03 03 
3457c 145 7B 63 63 66 
34580 146 5C 00 00 00 
34584 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
34588 148 63 63 63 7F 
3458c 149 63 63 63 63 
34590 14a 63 00 00 00 
34594 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
34598 14c 18 18 18 18 
3459c 14d 18 18 18 18 | 	byte	$18[8]
345a0 14e 3C 00 00 00 
345a4 14f 00 00 00 78 
345a8 150 30 30 30 30 
345ac 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
345b0 152 1E 00 00 00 
345b4 153 00 00 00 67 
345b8 154 66 66 36 1E 
345bc 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
345c0 156 67 00 00 00 
345c4 157 00 00 00 0F 
345c8 158 06 06 06 06 
345cc 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
345d0 15a 7F 00 00 00 
345d4 15b 00 00 00 63 
345d8 15c 77 7F 7F 6B 
345dc 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
345e0 15e 63 00 00 00 
345e4 15f 00 00 00 63 
345e8 160 67 6F 7F 7B 
345ec 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
345f0 162 63 00 00 00 
345f4 163 00 00 00 3E 
345f8 164 63 63 63 63 
345fc 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34600 166 3E 00 00 00 
34604 167 00 00 00 3F 
34608 168 66 66 66 3E 
3460c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
34610 16a 0F 00 00 00 
34614 16b 00 00 00 3E 
34618 16c 63 63 63 63 
3461c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
34620 16e 3E 30 70 00 
34624 16f 00 00 00 3F 
34628 170 66 66 66 3E 
3462c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
34630 172 67 00 00 00 
34634 173 00 00 00 3E 
34638 174 63 63 06 1C 
3463c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34640 176 3E 00 00 00 
34644 177 00 00 00 7E 
34648 178 7E 5A 18 18 
3464c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34650 17a 3C 00 00 00 
34654 17b 00 00 00 63 
34658 17c 63 63 63 63 
3465c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34660 17e 3E 00 00 00 
34664 17f 00 00 00 63 
34668 180 63 63 63 63 
3466c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
34670 182 08 00 00 00 
34674 183 00 00 00 63 
34678 184 63 63 63 6B 
3467c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
34680 186 36 00 00 00 
34684 187 00 00 00 63 
34688 188 63 36 3E 1C 
3468c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
34690 18a 63 00 00 00 
34694 18b 00 00 00 66 
34698 18c 66 66 66 3C 
3469c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
346a0 18e 3C 00 00 00 
346a4 18f 00 00 00 7F 
346a8 190 63 61 30 18 
346ac 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
346b0 192 7F 00 00 00 
346b4 193 00 00 00 3C 
346b8 194 0C 0C 0C 0C 
346bc 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
346c0 196 3C 00 00 00 
346c4 197 00 00 00 00 
346c8 198 01 03 07 0E 
346cc 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
346d0 19a 40 00 00 00 
346d4 19b 00 00 00 3C 
346d8 19c 30 30 30 30 
346dc 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
346e0 19e 3C 00 00 00 
346e4 19f 1C 36 00 00 
346e8 1a0 00 00 00 00 
346ec 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
346f0 1a2 00 00 00 00 
346f4 1a3 00 00 00 00 
346f8 1a4 00 00 00 00 
346fc 1a5 00 00 00 00 
34700 1a6 00          | 	byte	$00[17]
34701 1a6 FF 00 00 0C 
34705 1a7 18 00 00 00 
34709 1a8 00 00 00 00 
3470d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34711 1aa 00 00 00 00 
34715 1ab 00 00 00 00 
34719 1ac 00          | 	byte	$00[9]
3471a 1ac 1E 30 3E 33 
3471e 1ad 33 33 6E 00 
34722 1ae 00 00 00 00 
34726 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3472a 1b0 1E 36 66 66 
3472e 1b1 66 66 3E 00 
34732 1b2 00 00 00 00 
34736 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3473a 1b4 3E 63 03 03 
3473e 1b5 03 63 3E 00 
34742 1b6 00 00 00 00 
34746 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3474a 1b8 3C 36 33 33 
3474e 1b9 33 33 6E 00 
34752 1ba 00 00 00 00 
34756 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3475a 1bc 3E 63 7F 03 
3475e 1bd 03 63 3E 00 
34762 1be 00 00 00 00 
34766 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3476a 1c0 0C 1E 0C 0C 
3476e 1c1 0C 0C 1E 00 
34772 1c2 00 00 00 00 
34776 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3477a 1c4 6E 33 33 33 
3477e 1c5 33 33 3E 30 
34782 1c6 33 1E 00 00 
34786 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3478a 1c8 36 6E 66 66 
3478e 1c9 66 66 67 00 
34792 1ca 00 00 00 00 
34796 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3479a 1cc 1C 18 18 18 
3479e 1cd 18 18 3C 00 
347a2 1ce 00 00 00 00 
347a6 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
347aa 1d0 70 60 60 60 
347ae 1d1 60 60 60 66 
347b2 1d2 66 3C 00 00 
347b6 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
347ba 1d4 66 36 1E 1E 
347be 1d5 36 66 67 00 
347c2 1d6 00 00 00 00 
347c6 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
347ca 1d8 18 18 18 18 
347ce 1d9 18 18       | 	byte	$18[6]
347d0 1da 3C 00 00 00 
347d4 1db 00 00 00 00 
347d8 1dc 00 00 37 7F 
347dc 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
347e0 1de 63 00 00 00 
347e4 1df 00 00 00 00 
347e8 1e0 00 00 3B 66 
347ec 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
347f0 1e2 66 00 00 00 
347f4 1e3 00 00 00 00 
347f8 1e4 00 00 3E 63 
347fc 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
34800 1e6 3E 00 00 00 
34804 1e7 00 00 00 00 
34808 1e8 00 00 3B 66 
3480c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34810 1ea 3E 06 06 0F 
34814 1eb 00 00 00 00 
34818 1ec 00 00 6E 33 
3481c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
34820 1ee 3E 30 30 78 
34824 1ef 00 00 00 00 
34828 1f0 00 00 3B 6E 
3482c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
34830 1f2 0F 00 00 00 
34834 1f3 00 00 00 00 
34838 1f4 00 00 3E 63 
3483c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
34840 1f6 3E 00 00 00 
34844 1f7 00 00 00 08 
34848 1f8 0C 0C 3F 0C 
3484c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34850 1fa 38 00 00 00 
34854 1fb 00 00 00 00 
34858 1fc 00 00 33 33 
3485c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
34860 1fe 6E 00 00 00 
34864 1ff 00 00 00 00 
34868 200 00 00 63 63 
3486c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
34870 202 1C 00 00 00 
34874 203 00 00 00 00 
34878 204 00 00 63 63 
3487c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
34880 206 36 00 00 00 
34884 207 00 00 00 00 
34888 208 00 00 63 36 
3488c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
34890 20a 63 00 00 00 
34894 20b 00 00 00 00 
34898 20c 00 00 63 63 
3489c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
348a0 20e 7E 60 30 1F 
348a4 20f 00 00 00 00 
348a8 210 00 00 7F 33 
348ac 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
348b0 212 7F 00 00 00 
348b4 213 00 00 00 70 
348b8 214 18 18 18 0E 
348bc 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
348c0 216 70 00 00 00 
348c4 217 00 00 00 18 
348c8 218 18 18 18 18 
348cc 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
348d0 21a 18 00 00 00 
348d4 21b 00 00 00 0E 
348d8 21c 18 18 18 70 
348dc 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
348e0 21e 0E 00 00 00 
348e4 21f 6E 3B 00 00 
348e8 220 00 00 00 00 
348ec 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
348f0 222 00 00 00 00 
348f4 223 00 00 00 00 
348f8 224 00 00       | 	byte	$00[10]
348fa 224 08 1C 36 63 
348fe 225 63 63 7F 00 
34902 226 00 00 00 00 
34906 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3490a 228 03 03 03 03 
3490e 229 43 66 3C 18 
34912 22a 30 1E 00 00 
34916 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3491a 22c 33 33 33 33 
3491e 22d 33 33       | 	byte	$33[6]
34920 22e 6E 00 00 00 
34924 22f 00 00 60 30 
34928 230 18 00 3E 63 
3492c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
34930 232 3E 00 00 00 
34934 233 00 00 08 1C 
34938 234 36 00 1E 30 
3493c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
34940 236 6E 00 00 00 
34944 237 00 00 00 00 
34948 238 33 00 1E 30 
3494c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
34950 23a 6E 00 00 00 
34954 23b 00 00 1C 36 
34958 23c 1C 00 33 33 
3495c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
34960 23e 6E 00 00 00 
34964 23f 00 00 60 30 
34968 240 18 00 3E 63 
3496c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
34970 242 3E 00 00 00 
34974 243 00 00 00 00 
34978 244 00 00 3E 63 
3497c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
34980 246 3E 18 30 1E 
34984 247 00 00 00 1C 
34988 248 58 78 38 18 
3498c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
34990 24a 3C 00 00 00 
34994 24b 00 00 00 00 
34998 24c 63 00 3E 63 
3499c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
349a0 24e 3E 00 00 00 
349a4 24f 66 33 00 3E 
349a8 250 63 63 63 63 
349ac 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
349b0 252 3E 00 00 00 
349b4 253 00 00 CC 66 
349b8 254 33 00 3E 63 
349bc 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
349c0 256 3E 00 00 00 
349c4 257 00 00 18 3C 
349c8 258 66 00 1C 18 
349cc 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
349d0 25a 3C 00 00 00 
349d4 25b 30 18 00 7F 
349d8 25c 63 61 30 18 
349dc 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
349e0 25e 7F 00 00 00 
349e4 25f 00 63 00 08 
349e8 260 1C 36 63 63 
349ec 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
349f0 262 63 00 00 00 
349f4 263 30 18 00 3C 
349f8 264 66 43 03 03 
349fc 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34a00 266 3C 00 00 00 
34a04 267 30 18 00 7F 
34a08 268 66 46 16 1E 
34a0c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34a10 26a 7F 00 00 00 
34a14 26b 0C 06 00 0F 
34a18 26c 06 06 06 06 
34a1c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34a20 26e 7F 00 00 00 
34a24 26f 30 18 00 1C 
34a28 270 18 18 18 18 
34a2c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34a30 272 3C 00 00 00 
34a34 273 00 00 08 1C 
34a38 274 36 00 3E 63 
34a3c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34a40 276 3E 00 00 00 
34a44 277 00 00 00 00 
34a48 278 63 00 3E 63 
34a4c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34a50 27a 3E 00 00 00 
34a54 27b 00 00 00 6F 
34a58 27c 46 26 06 06 
34a5c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34a60 27e 7F 00 00 00 
34a64 27f 00 00 00 6E 
34a68 280 4C 2C 0C 0C 
34a6c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34a70 282 1E 00 00 00 
34a74 283 30 18 00 3E 
34a78 284 63 63 06 1C 
34a7c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34a80 286 3E 00 00 00 
34a84 287 00 00 60 30 
34a88 288 18 00 3E 63 
34a8c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34a90 28a 3E 00 00 00 
34a94 28b 00 63 00 3E 
34a98 28c 63 63 63 63 
34a9c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34aa0 28e 3E 00 00 00 
34aa4 28f 00 63 00 63 
34aa8 290 63 63 63 63 
34aac 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34ab0 292 3E 00 00 00 
34ab4 293 6C 38 00 7E 
34ab8 294 7E 5A 18 18 
34abc 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34ac0 296 3C 00 00 00 
34ac4 297 00 00 60 48 
34ac8 298 2C 0C 3F 0C 
34acc 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34ad0 29a 38 00 00 00 
34ad4 29b 00 00 00 0F 
34ad8 29c 26 36 1E 0E 
34adc 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34ae0 29e 7F 00 00 00 
34ae4 29f 00 00 00 00 
34ae8 2a0 00 63 36 1C 
34aec 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34af0 2a2 00 00 00 00 
34af4 2a3 00 00       | 	byte	$00[6]
34af6 2a3 36 1C 08 00 
34afa 2a4 3E 63 03 03 
34afe 2a5 03 63 3E 00 
34b02 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34b06 2a7 30 18 0C 00 
34b0a 2a8 1E 30 3E 33 
34b0e 2a9 33 33 6E 00 
34b12 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34b16 2ab 60 30 18 00 
34b1a 2ac 1C 18 18 18 
34b1e 2ad 18 18 3C 00 
34b22 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34b26 2af 60 30 18 00 
34b2a 2b0 3E 63 63 63 
34b2e 2b1 63 63 3E 00 
34b32 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34b36 2b3 30 18 0C 00 
34b3a 2b4 33 33 33 33 
34b3e 2b5 33 33 6E 00 
34b42 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34b46 2b7 00 08 1C 36 
34b4a 2b8 63 63 7F 63 
34b4e 2b9 63 63 63 18 
34b52 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34b56 2bb 00 00 00 00 
34b5a 2bc 1E 30 3E 33 
34b5e 2bd 33 33 6E 18 
34b62 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34b66 2bf 00 7F 63 61 
34b6a 2c0 30 18 0C 06 
34b6e 2c1 43 63 7F 00 
34b72 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34b76 2c3 36 1C 08 00 
34b7a 2c4 7F 33 18 0C 
34b7e 2c5 06 63 7F 00 
34b82 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34b86 2c7 00 7F 66 46 
34b8a 2c8 16 1E 16 06 
34b8e 2c9 46 66 7F 18 
34b92 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34b96 2cb 00 00 00 00 
34b9a 2cc 3E 63 7F 03 
34b9e 2cd 03 63 3E 18 
34ba2 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34ba6 2cf 00 3C 66 03 
34baa 2d0 1F 03 0F 03 
34bae 2d1 03 66 3C 00 
34bb2 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34bb6 2d3 60 30 18 00 
34bba 2d4 7F 33 18 0C 
34bbe 2d5 06 63 7F 00 
34bc2 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34bc6 2d7 00 3C 66 43 
34bca 2d8 03 03 03 03 
34bce 2d9 43 66 3C 00 
34bd2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34bd6 2db 00 00 00 00 
34bda 2dc 3E 63 06 1C 
34bde 2dd 30 63 3E 18 
34be2 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34be6 2df 00 00 00 00 
34bea 2e0 00 00       | 	byte	$00[6]
34bec 2e1 6C 36 1B 36 
34bf0 2e2 6C 00 00 00 
34bf4 2e3 00 00 00 00 
34bf8 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34bfc 2e5 1B 36 6C 36 
34c00 2e6 1B 00 00 00 
34c04 2e7 88 22 88 22 
34c08 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34c0c 2e9 88 22 88 22 
34c10 2ea 88 22 88 22 
34c14 2eb AA 55 AA 55 
34c18 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34c1c 2ed AA 55 AA 55 
34c20 2ee AA 55 AA 55 
34c24 2ef BB EE BB EE 
34c28 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34c2c 2f1 BB EE BB EE 
34c30 2f2 BB EE BB EE 
34c34 2f3 18 18 18 18 
34c38 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34c3c 2f5 18 18 18 18 
34c40 2f6 18 18 18 18 
34c44 2f7 18 18 18 18 
34c48 2f8 18 18 18    | 	byte	$18[15]
34c4b 2f8 1F 18 18 18 
34c4f 2f9 18 18 18 18 
34c53 2fa 18 30 18 00 
34c57 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34c5b 2fc 63 7F 63 63 
34c5f 2fd 63 63 00 00 
34c63 2fe 00 1C 36 00 
34c67 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34c6b 300 63 7F 63 63 
34c6f 301 63 63 00 00 
34c73 302 00 36 1C 00 
34c77 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34c7b 304 1E 16 06 46 
34c7f 305 66 7F 00 00 
34c83 306 00 00 00 00 
34c87 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34c8b 308 1C 30 60 63 
34c8f 309 63 3E 18 30 
34c93 30a 1E 6C 6C 6C 
34c97 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34c9b 30c 6F 6C 6C 6C 
34c9f 30d 6C 6C 6C 6C 
34ca3 30e 6C 6C 6C 6C 
34ca7 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34cab 310 6C 6C 6C 6C 
34caf 311 6C 6C 6C 6C 
34cb3 312 6C          | 	byte	$6c[9]
34cb4 313 00 00 00 00 
34cb8 314 00          | 	byte	$00[5]
34cb9 314 7F 60 6F 6C 
34cbd 315 6C 6C 6C 6C 
34cc1 316 6C 6C 6C 6C 
34cc5 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34cc9 318 6F 60 7F 00 
34ccd 319 00 00 00 00 
34cd1 31a 00 00 00 18 
34cd5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34cd9 31c 61 30 18 0C 
34cdd 31d 06 43 63 7F 
34ce1 31e 00 00 00 00 
34ce5 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34ce9 320 00 7F 33 18 
34ced 321 0C 06 63 7F 
34cf1 322 00 00 00 00 
34cf5 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34cf9 324 00 00 1F 18 
34cfd 325 18 18 18 18 
34d01 326 18 18 18 18 
34d05 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34d09 328 18 18 F8 00 
34d0d 329 00 00 00 00 
34d11 32a 00 00 00 18 
34d15 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34d19 32c 18 18 FF 00 
34d1d 32d 00 00 00 00 
34d21 32e 00 00 00 00 
34d25 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34d29 330 00 00 FF 18 
34d2d 331 18 18 18 18 
34d31 332 18 18 18 18 
34d35 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34d39 334 18 18 F8 18 
34d3d 335 18 18 18 18 
34d41 336 18 18 18 00 
34d45 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34d49 338 00 00 FF 00 
34d4d 339 00 00 00 00 
34d51 33a 00 00 00 18 
34d55 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34d59 33c 18 18 FF 18 
34d5d 33d 18 18 18 18 
34d61 33e 18 18 18 63 
34d65 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
34d69 340 36 63 63 7F 
34d6d 341 63 63 63 63 
34d71 342 00 00 00 00 
34d75 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
34d79 344 00 1E 30 3E 
34d7d 345 33 33 33 6E 
34d81 346 00 00 00 6C 
34d85 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34d89 348 EC 0C FC 00 
34d8d 349 00 00 00 00 
34d91 34a 00 00 00 00 
34d95 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34d99 34c FC 0C EC 6C 
34d9d 34d 6C 6C 6C 6C 
34da1 34e 6C 6C 6C 6C 
34da5 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34da9 350 EF 00 FF 00 
34dad 351 00 00 00 00 
34db1 352 00 00 00 00 
34db5 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34db9 354 FF 00 EF 6C 
34dbd 355 6C 6C 6C 6C 
34dc1 356 6C 6C 6C 6C 
34dc5 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34dc9 358 EC 0C EC 6C 
34dcd 359 6C 6C 6C 6C 
34dd1 35a 6C 6C 6C 00 
34dd5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34dd9 35c FF 00 FF 00 
34ddd 35d 00 00 00 00 
34de1 35e 00 00 00 6C 
34de5 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34de9 360 EF 00 EF 6C 
34ded 361 6C 6C 6C 6C 
34df1 362 6C 6C 6C 00 
34df5 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34df9 364 63 3E 63 63 
34dfd 365 63 63 3E 63 
34e01 366 00 00 00 00 
34e05 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
34e09 368 30 3C 36 33 
34e0d 369 33 33 33 6E 
34e11 36a 00 00 00 00 
34e15 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
34e19 36c 66 66 6F 66 
34e1d 36d 66 66 36 1F 
34e21 36e 00 00 00 36 
34e25 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
34e29 370 66 66 66 66 
34e2d 371 66 66       | 	byte	$66[6]
34e2f 371 36 1F 00 00 
34e33 372 00 00 63 00 
34e37 373 7F 66 46 16 
34e3b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
34e3f 375 66 7F 00 00 
34e43 376 00 6C 38 00 
34e47 377 38 30 30 3C 
34e4b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
34e4f 379 33 6E 00 00 
34e53 37a 00 36 1C 00 
34e57 37b 63 67 6F 7F 
34e5b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
34e5f 37d 63 63 00 00 
34e63 37e 00 30 18 00 
34e67 37f 3C 18 18 18 
34e6b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34e6f 381 18 3C 00 00 
34e73 382 00 3C 66 00 
34e77 383 3C 18 18 18 
34e7b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34e7f 385 18 3C 00 00 
34e83 386 00 00 00 36 
34e87 387 1C 08 00 3E 
34e8b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
34e8f 389 63 3E 00 00 
34e93 38a 00 18 18 18 
34e97 38b 18 18 18 18 
34e9b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
34e9f 38d 00 00 00 00 
34ea3 38e 00 00 00 00 
34ea7 38f 00 00 00 00 | 	byte	$00[12]
34eab 390 F8 18 18 18 
34eaf 391 18 18 18 18 
34eb3 392 18 FF FF FF 
34eb7 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
34ebb 394 FF FF FF FF 
34ebf 395 FF FF FF FF 
34ec3 396 FF          | 	byte	$ff[9]
34ec4 397 00 00 00 00 
34ec8 398 00 00 00    | 	byte	$00[7]
34ecb 398 FF FF FF FF 
34ecf 399 FF FF FF FF 
34ed3 39a FF          | 	byte	$ff[9]
34ed4 39b 00 00 00 7E 
34ed8 39c 7E 5A 18 18 
34edc 39d 18 18 18 18 
34ee0 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
34ee4 39f 1C 36 1C 63 
34ee8 3a0 63 63 63 63 
34eec 3a1 63 63 63 63 
34ef0 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34ef4 3a3 FF FF FF FF 
34ef8 3a4 FF FF FF    | 	byte	$ff[7]
34efb 3a4 00 00 00 00 
34eff 3a5 00 00 00 00 
34f03 3a6 00          | 	byte	$00[9]
34f04 3a7 30 18 00 3E 
34f08 3a8 63 63 63 63 
34f0c 3a9 63 63 63 63 
34f10 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f14 3ab 00 00 00 1E 
34f18 3ac 33 33 33 1B 
34f1c 3ad 33 63 63 63 
34f20 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
34f24 3af 1C 36 00 3E 
34f28 3b0 63 63 63 63 
34f2c 3b1 63 63 63 63 
34f30 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f34 3b3 30 18 00 63 
34f38 3b4 67 6F 7F 7B 
34f3c 3b5 73 63 63 63 
34f40 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
34f44 3b7 00 00 60 30 
34f48 3b8 18 00 3B 66 
34f4c 3b9 66 66 66 66 
34f50 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
34f54 3bb 00 00 36 1C 
34f58 3bc 08 00 3B 66 
34f5c 3bd 66 66 66 66 
34f60 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
34f64 3bf 36 1C 00 3E 
34f68 3c0 63 63 06 1C 
34f6c 3c1 30 60 63 63 
34f70 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
34f74 3c3 00 00 36 1C 
34f78 3c4 08 00 3E 63 
34f7c 3c5 06 1C 30 63 
34f80 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
34f84 3c7 30 18 00 3F 
34f88 3c8 66 66 66 3E 
34f8c 3c9 36 66 66 66 
34f90 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
34f94 3cb 30 18 00 63 
34f98 3cc 63 63 63 63 
34f9c 3cd 63 63 63 63 
34fa0 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34fa4 3cf 00 00 60 30 
34fa8 3d0 18 00 3B 6E 
34fac 3d1 66 06 06 06 
34fb0 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
34fb4 3d3 66 33 00 63 
34fb8 3d4 63 63 63 63 
34fbc 3d5 63 63 63 63 
34fc0 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34fc4 3d7 00 00 60 30 
34fc8 3d8 18 00 63 63 
34fcc 3d9 63 63 63 63 
34fd0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
34fd4 3db 30 18 00 66 
34fd8 3dc 66 66 66 3C 
34fdc 3dd 18 18 18 18 
34fe0 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
34fe4 3df 00 00 00 08 
34fe8 3e0 0C 0C 3F 0C 
34fec 3e1 0C 0C 0C 6C 
34ff0 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
34ff4 3e3 30 18 00 00 
34ff8 3e4 00 00 00 00 
34ffc 3e5 00 00 00 00 
35000 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35004 3e7 00 00 00 00 
35008 3e8 00 00 00 00 | 	byte	$00[8]
3500c 3e9 7F 00 00 00 
35010 3ea 00 00 00 00 
35014 3eb 66 33 00 00 
35018 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3501c 3ed 00 00 00 00 
35020 3ee 00 00 00 00 
35024 3ef 00 00 00 00 
35028 3f0 00 00 00 00 
3502c 3f1 00 00 00 00 
35030 3f2 00          | 	byte	$00[21]
35031 3f2 0C 06 3C 36 
35035 3f3 1C 00 00 00 
35039 3f4 00 00 00 00 
3503d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35041 3f6 00 00 00 63 
35045 3f7 3E 00 00 00 
35049 3f8 00 00 00 00 
3504d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35051 3fa 00 00 00 00 
35055 3fb 3E 63 06 1C 
35059 3fc 36 63 63 36 
3505d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
35061 3fe 00 00 00 00 
35065 3ff 00 00 00 00 | 	byte	$00[8]
35069 400 18 00 7E 00 
3506d 401 18 00 00 00 
35071 402 00 00 00 00 
35075 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35079 404 00 00 00 00 
3507d 405 00 00 00 00 | 	byte	$00[8]
35081 406 18 30 1E 00 
35085 407 00 00 1C 36 
35089 408 36 1C 00 00 
3508d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
35091 40a 00 00 00 00 
35095 40b 63 00 00 00 
35099 40c 00 00 00 00 
3509d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350a1 40e 00 00 00 18 
350a5 40f 18 00 00 00 
350a9 410 00 00 00 00 
350ad 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350b1 412 00 00 00 00 
350b5 413 00          | 	byte	$00[5]
350b6 413 CC 66 33 00 
350ba 414 33 33 33 33 
350be 415 33 33 6E 00 
350c2 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
350c6 417 00 3F 66 66 
350ca 418 66 3E 36 66 
350ce 419 66 66 6F 00 
350d2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
350d6 41b 36 1C 08 00 
350da 41c 3B 6E 66 06 
350de 41d 06 06 0F 00 
350e2 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
350e6 41f 00 00 00 7E 
350ea 420 7E 7E 7E 7E 
350ee 421 7E 7E 00 00 
350f2 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
350f6 423 00 00 00 00 
350fa 424 00 00 00 00 
350fe 425 00 00 00 00 
35102 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35104 427             | 'vga_font       file "vgafont.def"
35104 427 00 00 00 00 
      ...             
35134 433 00 00 00 00 
35138 434 00 00 00    | st_font        file "st4font.def"
3513b 434 FF FF 00 00 
3513f 435 00 00 00 00 
35143 436 00 18 18 18 
35147 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3514b 438 18 18 18 18 
3514f 439 18 18 18 18 
35153 43a 18          | 	byte	$18[9]
35154 43b 00 00 00 00 
35158 43c 00 00 00    | 	byte	$00[7]
3515b 43c FF FF 18 18 
3515f 43d 18 18 18 18 
35163 43e 18 18 18 18 
35167 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3516b 440 FF FF 00 00 
3516f 441 00 00 00 00 
35173 442 00 18 18 18 
35177 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3517b 444 1F 1F 18 18 
3517f 445 18 18 18 18 
35183 446 18 18 18 18 
35187 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3518b 448 F8 F8 18 18 
3518f 449 18 18 18 18 
35193 44a 18 00 00 00 
35197 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3519b 44c 1F 1F 18 18 
3519f 44d 18 18 18 18 
351a3 44e 18 00 00 00 
351a7 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
351ab 450 F8 F8 18 18 
351af 451 18 18 18 18 
351b3 452 18 18 18 18 
351b7 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
351bb 454 1F 1F 00 00 
351bf 455 00 00 00 00 
351c3 456 00 18 18 18 
351c7 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
351cb 458 F8 F8 00 00 
351cf 459 00 00 00 00 
351d3 45a 00 18 18 18 
351d7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
351db 45c FF FF 18 18 
351df 45d 18 18 18 18 
351e3 45e 18 00 00 18 
351e7 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
351eb 460 66 7E 7E 66 
351ef 461 66 66 66 30 
351f3 462 18 00 00 7E 
351f7 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
351fb 464 3E 06 06 06 
351ff 465 06 7E 7E 18 
35203 466 0C 30 18 3C 
35207 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3520b 468 06 06 06 66 
3520f 469 66 7E 3C 00 
35213 46a 00 30 18 66 
35217 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3521b 46c 7E 7E 76 76 
3521f 46d 66 66 66 00 
35223 46e 00 30 18 7C 
35227 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3522b 470 1C 38 70 60 
3522f 471 60 7E 3E 00 
35233 472 00 30 18 7E 
35237 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3523b 474 18 0C 0C 06 
3523f 475 06 7E 7E 00 
35243 476 00 18 18 00 
35247 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3524b 478 18 18 0C 0C 
3524f 479 06 7E 7E 00 
35253 47a 00 30 18 3C 
35257 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3525b 47c 66 66 66 66 
3525f 47d 66          | 	byte	$66[5]
35260 47e 7E 3C 00 00 
35264 47f 00 00 06 06 
35268 480 06 06 16 1E 
3526c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
35270 482 7E 7E 00 00 
35274 483 00 00 00 00 
35278 484 00 3C 7C 60 
3527c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
35280 486 7E 7C 30 18 
35284 487 00 00 00 00 
35288 488 00 3C 7E 66 
3528c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
35290 48a 7E 7C 18 0C 
35294 48b 00 00 30 18 
35298 48c 00 3C 3E 06 
3529c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
352a0 48e 7E 7C 00 00 
352a4 48f 00 00 30 18 
352a8 490 00 3E 7E 66 
352ac 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
352b0 492 66 66 00 00 
352b4 493 00 00 30 18 
352b8 494 00 7C 7E 06 
352bc 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
352c0 496 7E 3E 00 00 
352c4 497 00 00 30 18 
352c8 498 00 7E 7E 30 
352cc 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
352d0 49a 7E 7E 00 00 
352d4 49b 00 00 18 18 
352d8 49c 00 7E 7E 30 
352dc 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
352e0 49e 7E 7E 00 00 
352e4 49f 00 00 30 18 
352e8 4a0 00 3C 7E 66 
352ec 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
352f0 4a2 7E 3C 00 00 
352f4 4a3 00 00 1C 1C 
352f8 4a4 18 18 38 3C 
352fc 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
35300 4a6 3C 3C 00 00 
35304 4a7 00 00 00 00 
35308 4a8 00 00 00 00 
3530c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35310 4aa 00 00 00 00 
35314 4ab 00 00       | 	byte	$00[6]
35316 4ab 18 18 18 18 
3531a 4ac 18 18 18 18 | 	byte	$18[8]
3531e 4ad 00 00 18 18 
35322 4ae 00 00 00 00 
35326 4af 66 66 66 66 
3532a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3532e 4b1 00 00 00 00 
35332 4b2 00 00 00 00 
35336 4b3 00          | 	byte	$00[9]
35337 4b3 66 66 FF FF 
3533b 4b4 66 66 FF FF 
3533f 4b5 66 66 00 00 
35343 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
35347 4b7 7C 7E 06 06 
3534b 4b8 3E 7C 60 60 
3534f 4b9 7E 3E 18 18 
35353 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
35357 4bb 66 30 30 18 
3535b 4bc 18 0C 0C 66 
3535f 4bd 66 00 00 00 
35363 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
35367 4bf 66 66 3C 1C 
3536b 4c0 1C FC FE 66 
3536f 4c1 66 FE FC 00 
35373 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
35377 4c3 18 18 18 18 
3537b 4c4 00 00 00 00 
3537f 4c5 00 00 00 00 
35383 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
35387 4c7 18 1C 0C 0C 
3538b 4c8 0C 0C 0C 0C 
3538f 4c9 1C 18 30 00 
35393 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
35397 4cb 18 38 30 30 
3539b 4cc 30 30 30 30 
3539f 4cd 38 18 0C 00 
353a3 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
353a7 4cf 66 66 3C 3C 
353ab 4d0 FF FF 3C 3C 
353af 4d1 66 66 00 00 
353b3 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
353b7 4d3 00 18 18 18 
353bb 4d4 7E 7E 18 18 
353bf 4d5 18 00 00 00 
353c3 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
353c7 4d7 00 00 00 00 
353cb 4d8 00 00       | 	byte	$00[6]
353cd 4d9 18 18 18 18 
353d1 4da 18          | 	byte	$18[5]
353d2 4da 0C 04 00 00 
353d6 4db 00 00 00 00 
353da 4dc 7E 7E 00 00 
353de 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
353e2 4de 00 00 00 00 
353e6 4df 00 00 00 00 
353ea 4e0 00 00 00 00 
353ee 4e1 00          | 	byte	$00[13]
353ef 4e1 18 18 18 00 
353f3 4e2 00 00 00 60 
353f7 4e3 60 60 30 30 
353fb 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
353ff 4e5 06 06 06 00 
35403 4e6 00 00 00 3C 
35407 4e7 7E 66 66 66 
3540b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3540f 4e9 66 7E 3C 00 
35413 4ea 00 00 00 18 
35417 4eb 18 1C 1C 18 
3541b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3541f 4ed 18 7E 7E 00 
35423 4ee 00 00 00 3C 
35427 4ef 7E 66 66 30 
3542b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3542f 4f1 0C 7E 7E 00 
35433 4f2 00 00 00 7E 
35437 4f3 7E 30 30 18 
3543b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3543f 4f5 66 7E 3C 00 
35443 4f6 00 00 00 30 
35447 4f7 30 38 38 3C 
3544b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3544f 4f9 7E 30 30 00 
35453 4fa 00 00 00 7E 
35457 4fb 7E 06 06 3E 
3545b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3545f 4fd 66 7E 3C 00 
35463 4fe 00 00 00 38 
35467 4ff 3C 0E 06 06 
3546b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3546f 501 66 7E 3C 00 
35473 502 00 00 00 7E 
35477 503 7E 60 60 30 
3547b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3547f 505 0C 0C 0C 00 
35483 506 00 00 00 3C 
35487 507 7E 66 66 3C 
3548b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3548f 509 66 7E 3C 00 
35493 50a 00 00 00 3C 
35497 50b 7E 66 66 7E 
3549b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3549f 50d 70 3C 1C 00 
354a3 50e 00 00 00 00 
354a7 50f 00 00 18 18 
354ab 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
354af 511 18 18 18 00 
354b3 512 00 00 00 00 
354b7 513 00 00 18 18 
354bb 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
354bf 515 18 18 18 0C 
354c3 516 04 00 00 00 
354c7 517 70 38 1C 0E 
354cb 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
354cf 519 70 00 00 00 
354d3 51a 00 00 00 00 
354d7 51b 00 00 7E 7E 
354db 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
354df 51d 00 00 00 00 
354e3 51e 00 00 00 00 | 	byte	$00[8]
354e7 51f 0E 1C 38 70 
354eb 520 E0 70 38 1C 
354ef 521 0E 00 00 00 
354f3 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
354f7 523 7E 66 66 30 
354fb 524 30 18 18 18 
354ff 525 00 18 18 00 
35503 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
35507 527 7E 66 66 66 
3550b 528 66 36 06 66 
3550f 529 66 7E 3C 00 
35513 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
35517 52b 3C 7E 66 66 
3551b 52c 66 7E 7E 66 
3551f 52d 66 66 66 00 
35523 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
35527 52f 7E 66 66 7E 
3552b 530 3E 66 66 66 
3552f 531 66 7E 3E 00 
35533 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
35537 533 7E 66 66 06 
3553b 534 06 06 06 66 
3553f 535 66 7E 3C 00 
35543 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
35547 537 7E 66 66 66 
3554b 538 66 66 66 66 
3554f 539 66 7E 3E 00 
35553 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
35557 53b 7E 06 06 3E 
3555b 53c 3E 06 06 06 
3555f 53d 06 7E 7E 00 
35563 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
35567 53f 7E 06 06 3E 
3556b 540 3E 06 06 06 
3556f 541 06 06 06 00 
35573 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
35577 543 7E 06 06 76 
3557b 544 76 66 66 66 
3557f 545 66 7E 3C 00 
35583 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
35587 547 66 66 66 7E 
3558b 548 7E 66 66 66 
3558f 549 66 66 66 00 
35593 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
35597 54b 7E 18 18 18 
3559b 54c 18 18 18 18 
3559f 54d 18 7E 7E 00 
355a3 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
355a7 54f 60 60 60 60 
355ab 550 60 60 60    | 	byte	$60[7]
355ae 551 66 66 7E 3C 
355b2 552 00 00 00 00 
355b6 553 66 66 36 36 
355ba 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
355be 555 66 66 C6 C6 
355c2 556 00 00 00 00 
355c6 557 06 06 06 06 
355ca 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
355ce 559 06 06 7E 7E 
355d2 55a 00 00 00 00 
355d6 55b C6 C6 EE EE 
355da 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
355de 55d C6 C6 C6 C6 
355e2 55e 00 00 00 00 
355e6 55f 66 66 66 6E 
355ea 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
355ee 561 76 66 66 66 
355f2 562 00 00 00 00 
355f6 563 3C 7E 66 66 
355fa 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
355fe 565 66 66 7E 3C 
35602 566 00 00 00 00 
35606 567 3E 7E 66 66 
3560a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3560e 569 06 06 06 06 
35612 56a 00 00 00 00 
35616 56b 3C 7E 66 66 
3561a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3561e 56d 66 56 3E 6C 
35622 56e 00 00 00 00 
35626 56f 3E 7E 66 66 
3562a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3562e 571 66 66 C6 C6 
35632 572 00 00 00 00 
35636 573 7C 7E 06 06 
3563a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3563e 575 60 60 7E 3E 
35642 576 00 00 00 00 
35646 577 7E 7E 18 18 
3564a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3564e 579 18 18 18 18 
35652 57a 00 00 00 00 
35656 57b 66 66 66 66 
3565a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3565e 57d 66 66 7E 3C 
35662 57e 00 00 00 00 
35666 57f 66 66 66 66 
3566a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3566e 581 3C 3C 18 18 
35672 582 00 00 00 00 
35676 583 C6 C6 C6 C6 
3567a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3567e 585 FE EE C6 82 
35682 586 00 00 00 00 
35686 587 66 66 66 3C 
3568a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3568e 589 3C 66 66 66 
35692 58a 00 00 00 00 
35696 58b 66 66 66 66 
3569a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3569e 58d 18 18 18 18 
356a2 58e 00 00 00 00 
356a6 58f 7E 7E 30 30 
356aa 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
356ae 591 06 06 7E 7E 
356b2 592 00 00 00 00 
356b6 593 3C 3C 0C 0C 
356ba 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
356be 595 0C 0C 3C 3C 
356c2 596 00 00 00 00 
356c6 597 06 06 0C 0C 
356ca 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
356ce 599 60 60 C0 C0 
356d2 59a 00 00 00 00 
356d6 59b 3C 3C 30 30 
356da 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
356de 59d 30 30 3C 3C 
356e2 59e 00 00 00 00 
356e6 59f 18 18 3C 3C 
356ea 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
356ee 5a1 00 00 00 00 
356f2 5a2 00 00 00 00 
356f6 5a3 00 00 00 00 
356fa 5a4 00 00 00 00 
356fe 5a5 00 00       | 	byte	$00[18]
35700 5a6 FE FE 00 00 
35704 5a7 00 00 0C 0C 
35708 5a8 18 18 00 00 
3570c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
35710 5aa 00 00 00 00 
35714 5ab 00 00 00 00 
35718 5ac 00          | 	byte	$00[9]
35719 5ac 3C 7C 60 7C 
3571d 5ad 7E 66 66 7E 
35721 5ae 7C 00 00 00 
35725 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
35729 5b0 3E 7E 66 66 
3572d 5b1 66 66 66 7E 
35731 5b2 3E 00 00 00 
35735 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
35739 5b4 3C 3E 06 06 
3573d 5b5 06 06 06 7E 
35741 5b6 7C 00 00 00 
35745 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
35749 5b8 7C 7E 66 66 
3574d 5b9 66 66 66 7E 
35751 5ba 7C 00 00 00 
35755 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
35759 5bc 3C 7E 66 66 
3575d 5bd 7E 06 06 7E 
35761 5be 7C 00 00 00 
35765 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
35769 5c0 18 7E 7E 18 
3576d 5c1 18 18 18 18 
35771 5c2 18 00 00 00 
35775 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35779 5c4 7C 7E 66 66 
3577d 5c5 66 66 7E 7C 
35781 5c6 60 7E 3E 00 
35785 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
35789 5c8 3E 7E 66 66 
3578d 5c9 66 66 66 66 
35791 5ca 66 00 00 00 
35795 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
35799 5cc 1C 1C 18 18 
3579d 5cd 18 18 18 3C 
357a1 5ce 3C 00 00 00 
357a5 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
357a9 5d0 30 30 30 30 
357ad 5d1 30 30 30 30 
357b1 5d2 30          | 	byte	$30[9]
357b2 5d2 3E 1E 00 00 
357b6 5d3 06 06 06 36 
357ba 5d4 36 1E 1E 1E 
357be 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
357c2 5d6 00 00 00 00 
357c6 5d7 1C 1C 18 18 
357ca 5d8 18 18 18 18 
357ce 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
357d2 5da 00 00 00 00 
357d6 5db 00 00 00    | 	byte	$00[7]
357d9 5dc 6C FE FE D6 
357dd 5dd D6 C6 C6 C6 
357e1 5de C6 00 00 00 
357e5 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
357e9 5e0 3E 7E 66 66 
357ed 5e1 66 66 66 66 
357f1 5e2 66 00 00 00 
357f5 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
357f9 5e4 3C 7E 66 66 
357fd 5e5 66 66 66 7E 
35801 5e6 3C 00 00 00 
35805 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35809 5e8 3E 7E 66 66 
3580d 5e9 66 66 66 7E 
35811 5ea 3E 06 06 00 
35815 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
35819 5ec 7C 7E 66 66 
3581d 5ed 66 66 66 7E 
35821 5ee 7C 60 60 00 
35825 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
35829 5f0 3E 7E 66 06 
3582d 5f1 06 06 06 06 
35831 5f2 06 00 00 00 
35835 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
35839 5f4 7C 7E 06 0E 
3583d 5f5 3C 70 60 7E 
35841 5f6 3E 00 00 00 
35845 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
35849 5f8 7E 7E 18 18 
3584d 5f9 18 18 18 78 
35851 5fa 70 00 00 00 
35855 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
35859 5fc 66 66 66 66 
3585d 5fd 66 66 66    | 	byte	$66[7]
35860 5fe 7E 7C 00 00 
35864 5ff 00 00 00 00 
35868 600 00 66 66 66 
3586c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
35870 602 18 18 00 00 
35874 603 00 00 00 00 
35878 604 00 C6 C6 D6 
3587c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
35880 606 C6 82 00 00 
35884 607 00 00 00 00 
35888 608 00 66 66 3C 
3588c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
35890 60a 66 66 00 00 
35894 60b 00 00 00 00 
35898 60c 00 66 66 66 
3589c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
358a0 60e 7C 60 7E 3E 
358a4 60f 00 00 00 00 
358a8 610 00 7E 7E 30 
358ac 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
358b0 612 7E 7E 00 00 
358b4 613 00 00 30 18 
358b8 614 18 18 18 0C 
358bc 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
358c0 616 18 30 00 00 
358c4 617 00 00 18 18 
358c8 618 18 18 18 18 
358cc 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
358d0 61a 18 18 00 00 
358d4 61b 00 00 0C 18 
358d8 61c 18 18 18 30 
358dc 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
358e0 61e 18 0C 00 00 
358e4 61f 00 00 6C 7E 
358e8 620 36 00 00 00 
358ec 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
358f0 622 00 00 00 00 
358f4 623 00 00 00 00 
358f8 624 00          | 	byte	$00[9]
358f9 624 18 18 18 18 
358fd 625 18 18 00 00 
35901 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35904 627             | 'amiga_font     file "amigafont.def"
35904 627 00 6C FE FE 
35908 628 7C 38 10 00 
3590c 629 18 18 18 F8 
35910 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35914 62b C0 C0 C0 C0 
35918 62c C0 C0 C0 C0 | 	byte	$c0[8]
3591c 62d 18 18 18 1F 
35920 62e 1F 00 00 00 
35924 62f 18 18 18 1F 
35928 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3592c 631 00 00 00 1F 
35930 632 1F 18 18 18 
35934 633 C0 E0 70 38 
35938 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3593c 635 03 07 0E 1C 
35940 636 38 70 E0 C0 
35944 637 80 C0 E0 F0 
35948 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3594c 639 00 00 00 00 
35950 63a F0 F0 F0 F0 
35954 63b 01 03 07 0F 
35958 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3595c 63d F0 F0 F0 F0 
35960 63e 00 00 00 00 
35964 63f 0F 0F 0F 0F 
35968 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3596c 641 FF FF 00 00 
35970 642 00 00 00 00 
35974 643 00 00 00 00 
35978 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3597c 645 00 00 00 00 
35980 646 0F 0F 0F 0F 
35984 647 00 38 38 EE 
35988 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3598c 649 00 00 00 F8 
35990 64a F8 18 18 18 
35994 64b 00 00 00 FF 
35998 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3599c 64d 18 18 18 FF 
359a0 64e FF 18 18 18 
359a4 64f 00 00 3C 7E 
359a8 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
359ac 651 00 00 00 00 
359b0 652 FF FF FF FF 
359b4 653 03 03 03 03 
359b8 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
359bc 655 00 00 00 FF 
359c0 656 FF 18 18 18 
359c4 657 18 18 18 FF 
359c8 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
359cc 659 0F 0F 0F 0F 
359d0 65a 0F 0F 0F 0F | 	byte	$0f[8]
359d4 65b 18 18 18 F8 
359d8 65c F8 00 00 00 
359dc 65d 1E 06 1E 06 
359e0 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
359e4 65f 00 18 3C 7E 
359e8 660 18 18 18 00 
359ec 661 00 18 18 18 
359f0 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
359f4 663 00 18 0C 7E 
359f8 664 0C 18 00 00 
359fc 665 00 18 30 7E 
35a00 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35a04 667 00 00 00 00 
35a08 668 00 00 00 00 
35a0c 669 00          | 	byte	$00[9]
35a0d 669 18 18 18 18 
35a11 66a 00 18 00 00 
35a15 66b 66 66 66 00 
35a19 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35a1d 66d 66 FF 66 66 
35a21 66e FF 66 00 18 
35a25 66f 7C 06 3C 60 
35a29 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35a2d 671 66 36 18 0C 
35a31 672 66 62 00 38 
35a35 673 6C 38 1C F6 
35a39 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35a3d 675 18 18 18 00 
35a41 676 00 00 00 00 
35a45 677 70 38 18 18 
35a49 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35a4d 679 0E 1C 18 18 
35a51 67a 1C 0E 00 00 
35a55 67b 66 3C FF 3C 
35a59 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35a5d 67d 18 18 7E 18 
35a61 67e 18 00 00 00 
35a65 67f 00 00 00 00 
35a69 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35a6d 681 00 00 7E 00 
35a71 682 00 00 00 00 
35a75 683 00 00 00 00 
35a79 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35a7d 685 60 30 18 0C 
35a81 686 06 02 00 00 
35a85 687 3C 66 76 6E 
35a89 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35a8d 689 18 1C 18 18 
35a91 68a 18 7E 00 00 
35a95 68b 3C 66 30 18 
35a99 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35a9d 68d 7E 30 18 30 
35aa1 68e 66 3C 00 00 
35aa5 68f 30 38 3C 36 
35aa9 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35aad 691 7E 06 3E 60 
35ab1 692 66 3C 00 00 
35ab5 693 3C 06 3E 66 
35ab9 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35abd 695 7E 60 30 18 
35ac1 696 0C 0C 00 00 
35ac5 697 3C 66 3C 66 
35ac9 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35acd 699 3C 66 7C 60 
35ad1 69a 30 1C 00 00 
35ad5 69b 00 18 18 00 
35ad9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35add 69d 00 18 18 00 
35ae1 69e 18 18 0C 60 
35ae5 69f 30 18 0C 18 
35ae9 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35aed 6a1 00 7E 00 00 
35af1 6a2 7E 00 00 06 
35af5 6a3 0C 18 30 18 
35af9 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35afd 6a5 3C 66 30 18 
35b01 6a6 00 18 00 00 
35b05 6a7 3C 66 76 76 
35b09 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35b0d 6a9 18 3C 66 66 
35b11 6aa 7E 66 00 00 
35b15 6ab 3E 66 3E 66 
35b19 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35b1d 6ad 3C 66 06 06 
35b21 6ae 66 3C 00 00 
35b25 6af 1E 36 66 66 
35b29 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35b2d 6b1 7E 06 3E 06 
35b31 6b2 06 7E 00 00 
35b35 6b3 7E 06 3E 06 
35b39 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35b3d 6b5 7C 06 06 76 
35b41 6b6 66 7C 00 00 
35b45 6b7 66 66 7E 66 
35b49 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35b4d 6b9 7E 18 18 18 
35b51 6ba 18 7E 00 00 
35b55 6bb 60 60 60 60 
35b59 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35b5d 6bd 66 36 1E 1E 
35b61 6be 36 66 00 00 
35b65 6bf 06 06 06 06 
35b69 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35b6d 6c1 C6 EE FE D6 
35b71 6c2 C6 C6 00 00 
35b75 6c3 66 6E 7E 7E 
35b79 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35b7d 6c5 3C 66 66 66 
35b81 6c6 66 3C 00 00 
35b85 6c7 3E 66 66 3E 
35b89 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35b8d 6c9 3C 66 66 66 
35b91 6ca 36 6C 00 00 
35b95 6cb 3E 66 66 3E 
35b99 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35b9d 6cd 3C 06 3C 60 
35ba1 6ce 60 3C 00 00 
35ba5 6cf 7E 18 18 18 
35ba9 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35bad 6d1 66 66 66 66 
35bb1 6d2 66          | 	byte	$66[5]
35bb2 6d2 7E 00 00 66 
35bb6 6d3 66 66 66 3C 
35bba 6d4 18 00 00 C6 
35bbe 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35bc2 6d6 C6 00 00 66 
35bc6 6d7 66 3C 3C 66 
35bca 6d8 66 00 00 66 
35bce 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35bd2 6da 18 00 00 7E 
35bd6 6db 30 18 0C 06 
35bda 6dc 7E 00 00 78 
35bde 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35be2 6de 78 00 00 02 
35be6 6df 06 0C 18 30 
35bea 6e0 60 00 00 1E 
35bee 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35bf2 6e2 1E 00 00 10 
35bf6 6e3 38 6C C6 00 
35bfa 6e4 00 00 00 00 
35bfe 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35c02 6e6 FF 00 00 18 
35c06 6e7 3C 7E 7E 3C 
35c0a 6e8 18 00 00 00 
35c0e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35c12 6ea 7C 00 00 06 
35c16 6eb 06 3E 66 66 
35c1a 6ec 3E 00 00 00 
35c1e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35c22 6ee 3C 00 00 60 
35c26 6ef 60 7C 66 66 
35c2a 6f0 7C 00 00 00 
35c2e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35c32 6f2 3C 00 00 70 
35c36 6f3 18 7C 18 18 
35c3a 6f4 18 00 00 00 
35c3e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35c42 6f6 60 3E 00 06 
35c46 6f7 06 3E 66 66 
35c4a 6f8 66 00 00 18 
35c4e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35c52 6fa 3C 00 00 60 
35c56 6fb 00 60 60 60 
35c5a 6fc 60 3C 00 06 
35c5e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35c62 6fe 66 00 00 1C 
35c66 6ff 18 18 18 18 
35c6a 700 3C 00 00 00 
35c6e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35c72 702 C6 00 00 00 
35c76 703 3E 66 66 66 
35c7a 704 66 00 00 00 
35c7e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35c82 706 3C 00 00 00 
35c86 707 3E 66 66 3E 
35c8a 708 06 06 00 00 
35c8e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35c92 70a 60 60 00 00 
35c96 70b 3E 66 06 06 
35c9a 70c 06 00 00 00 
35c9e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35ca2 70e 3E 00 00 18 
35ca6 70f 7E 18 18 18 
35caa 710 70 00 00 00 
35cae 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35cb2 712 7C 00 00 00 
35cb6 713 66 66 66 3C 
35cba 714 18 00 00 00 
35cbe 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35cc2 716 6C 00 00 00 
35cc6 717 66 3C 18 3C 
35cca 718 66 00 00 00 
35cce 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35cd2 71a 30 1E 00 00 
35cd6 71b 7E 30 18 0C 
35cda 71c 7E 00 00 18 
35cde 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35ce2 71e 3C 00 18 18 
35ce6 71f 18 18 18 18 
35cea 720 18 18 00 7E 
35cee 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35cf2 722 60 00 10 18 
35cf6 723 1C 1E 1C 18 
35cfa 724 10 00 08 18 
35cfe 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35d02 726 08 00       | 	byte	$08, $00
35d04 727 00 00 00 00 
35d08 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35d09 728 80 00 00 00 
35d0d 729 00 80 00 00 
35d11 72a 80 80 00 00 
35d15 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35d19 72c 80 00 80 00 
35d1d 72d 00 40 80 00 
35d21 72e AA AA AA 00 
35d25 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35d29 730 FF 00 00 00 
35d2d 731 00 FF 00 00 
35d31 732 FF FF 00 00 
35d35 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
35d39 734 FF 00 FF 00 
35d3d 735 00 FF FF 00 
35d41 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
35d44 737 00 00 00 00 
35d48 738 00          | ataripalette   file "ataripalettep2.def"
35d49 738 11 11 11 00 
35d4d 739 22 22 22 00 
35d51 73a 33 33 33 00 
35d55 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
35d59 73c 55 55 55 00 
35d5d 73d 66 66 66 00 
35d61 73e 77 77 77 00 
35d65 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
35d69 740 99 99 99 00 
35d6d 741 AA AA AA 00 
35d71 742 BB BB BB 00 
35d75 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
35d79 744 DD DD DD 00 
35d7d 745 EE EE EE 00 
35d81 746 FF FF FF 00 
35d85 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
35d89 748 00 14 40 00 
35d8d 749 00 1E 60 00 
35d91 74a 00 28 80 00 
35d95 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
35d99 74c 00 3C BF 00 
35d9d 74d 00 46 DF 00 
35da1 74e 00 50 FF 00 
35da5 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
35da9 750 39 77 FF 00 
35dad 751 55 8A FF 00 
35db1 752 71 9E FF 00 
35db5 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
35db9 754 AA C5 FF 00 
35dbd 755 C6 D8 FF 00 
35dc1 756 E3 EC FF 00 
35dc5 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
35dc9 758 00 00 40 00 
35dcd 759 00 00 60 00 
35dd1 75a 00 00 80 00 
35dd5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
35dd9 75c 00 00 BF 00 
35ddd 75d 00 00 DF 00 
35de1 75e 00 00 FF 00 
35de5 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
35de9 760 39 39 FF 00 
35ded 761 55 55 FF 00 
35df1 762 71 71 FF 00 
35df5 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
35df9 764 AA AA FF 00 
35dfd 765 C6 C6 FF 00 
35e01 766 E3 E3 FF 00 
35e05 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
35e09 768 20 00 40 00 
35e0d 769 30 00 60 00 
35e11 76a 40 00 80 00 
35e15 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
35e19 76c 60 00 BF 00 
35e1d 76d 70 00 DF 00 
35e21 76e 80 00 FF 00 
35e25 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
35e29 770 9C 39 FF 00 
35e2d 771 AA 55 FF 00 
35e31 772 B8 71 FF 00 
35e35 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
35e39 774 D5 AA FF 00 
35e3d 775 E3 C6 FF 00 
35e41 776 F1 E3 FF 00 
35e45 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
35e49 778 40 00 40 00 
35e4d 779 60 00 60 00 
35e51 77a 80 00 80 00 
35e55 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
35e59 77c BF 00 BF 00 
35e5d 77d DF 00 DF 00 
35e61 77e FF 00 FF 00 
35e65 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
35e69 780 FF 39 FF 00 
35e6d 781 FF 55 FF 00 
35e71 782 FF 71 FF 00 
35e75 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
35e79 784 FF AA FF 00 
35e7d 785 FF C6 FF 00 
35e81 786 FF E3 FF 00 
35e85 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
35e89 788 40 00 20 00 
35e8d 789 60 00 30 00 
35e91 78a 80 00 40 00 
35e95 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
35e99 78c BF 00 60 00 
35e9d 78d DF 00 70 00 
35ea1 78e FF 00 80 00 
35ea5 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
35ea9 790 FF 39 9C 00 
35ead 791 FF 55 AA 00 
35eb1 792 FF 71 B8 00 
35eb5 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
35eb9 794 FF AA D5 00 
35ebd 795 FF C6 E3 00 
35ec1 796 FF E3 F1 00 
35ec5 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
35ec9 798 40 00 00 00 
35ecd 799 60 00 00 00 
35ed1 79a 80 00 00 00 
35ed5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
35ed9 79c BF 00 00 00 
35edd 79d DF 00 00 00 
35ee1 79e FF 00 00 00 
35ee5 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
35ee9 7a0 FF 39 39 00 
35eed 7a1 FF 55 55 00 
35ef1 7a2 FF 71 71 00 
35ef5 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
35ef9 7a4 FF AA AA 00 
35efd 7a5 FF C6 C6 00 
35f01 7a6 FF E3 E3 00 
35f05 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
35f09 7a8 40 10 00 00 
35f0d 7a9 60 18 00 00 
35f11 7aa 80 20 00 00 
35f15 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
35f19 7ac BF 30 00 00 
35f1d 7ad DF 38 00 00 
35f21 7ae FF 40 00 00 
35f25 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
35f29 7b0 FF 6A 39 00 
35f2d 7b1 FF 80 55 00 
35f31 7b2 FF 95 71 00 
35f35 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
35f39 7b4 FF BF AA 00 
35f3d 7b5 FF D5 C6 00 
35f41 7b6 FF EA E3 00 
35f45 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
35f49 7b8 40 20 00 00 
35f4d 7b9 60 30 00 00 
35f51 7ba 80 40 00 00 
35f55 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
35f59 7bc BF 60 00 00 
35f5d 7bd DF 70 00 00 
35f61 7be FF 80 00 00 
35f65 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
35f69 7c0 FF 9C 39 00 
35f6d 7c1 FF AA 55 00 
35f71 7c2 FF B8 71 00 
35f75 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
35f79 7c4 FF D5 AA 00 
35f7d 7c5 FF E3 C6 00 
35f81 7c6 FF F1 E3 00 
35f85 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
35f89 7c8 40 30 00 00 
35f8d 7c9 60 48 00 00 
35f91 7ca 80 60 00 00 
35f95 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
35f99 7cc BF 90 00 00 
35f9d 7cd DF A8 00 00 
35fa1 7ce FF C0 00 00 
35fa5 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
35fa9 7d0 FF CE 39 00 
35fad 7d1 FF D5 55 00 
35fb1 7d2 FF DC 71 00 
35fb5 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
35fb9 7d4 FF EA AA 00 
35fbd 7d5 FF F1 C6 00 
35fc1 7d6 FF F8 E3 00 
35fc5 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
35fc9 7d8 30 40 00 00 
35fcd 7d9 48 60 00 00 
35fd1 7da 60 80 00 00 
35fd5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
35fd9 7dc 90 BF 00 00 
35fdd 7dd A8 DF 00 00 
35fe1 7de C0 FF 00 00 
35fe5 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
35fe9 7e0 CE FF 39 00 
35fed 7e1 D5 FF 55 00 
35ff1 7e2 DC FF 71 00 
35ff5 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
35ff9 7e4 EA FF AA 00 
35ffd 7e5 F1 FF C6 00 
36001 7e6 F8 FF E3 00 
36005 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
36009 7e8 00 40 00 00 
3600d 7e9 00 60 00 00 
36011 7ea 00 80 00 00 
36015 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
36019 7ec 00 BF 00 00 
3601d 7ed 00 DF 00 00 
36021 7ee 00 FF 00 00 
36025 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
36029 7f0 39 FF 39 00 
3602d 7f1 55 FF 55 00 
36031 7f2 71 FF 71 00 
36035 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
36039 7f4 AA FF AA 00 
3603d 7f5 C6 FF C6 00 
36041 7f6 E3 FF E3 00 
36045 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
36049 7f8 00 40 14 00 
3604d 7f9 00 60 1E 00 
36051 7fa 00 80 28 00 
36055 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
36059 7fc 00 BF 3C 00 
3605d 7fd 00 DF 46 00 
36061 7fe 00 FF 50 00 
36065 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
36069 800 39 FF 77 00 
3606d 801 55 FF 8A 00 
36071 802 71 FF 9E 00 
36075 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
36079 804 AA FF C5 00 
3607d 805 C6 FF D8 00 
36081 806 E3 FF EC 00 
36085 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
36089 808 00 40 28 00 
3608d 809 00 60 3C 00 
36091 80a 00 80 50 00 
36095 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
36099 80c 00 BF 78 00 
3609d 80d 00 DF 8C 00 
360a1 80e 00 FF A0 00 
360a5 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
360a9 810 39 FF B5 00 
360ad 811 55 FF C0 00 
360b1 812 71 FF CA 00 
360b5 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
360b9 814 AA FF DF 00 
360bd 815 C6 FF EA 00 
360c1 816 E3 FF F4 00 
360c5 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
360c9 818 00 40 40 00 
360cd 819 00 60 60 00 
360d1 81a 00 80 80 00 
360d5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
360d9 81c 00 BF BF 00 
360dd 81d 00 DF DF 00 
360e1 81e 00 FF FF 00 
360e5 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
360e9 820 39 FF FF 00 
360ed 821 55 FF FF 00 
360f1 822 71 FF FF 00 
360f5 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
360f9 824 AA FF FF 00 
360fd 825 C6 FF FF 00 
36101 826 E3 FF FF 00 
36105 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
36109 828 00 28 40 00 
3610d 829 00 3C 60 00 
36111 82a 00 50 80 00 
36115 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
36119 82c 00 78 BF 00 
3611d 82d 00 8C DF 00 
36121 82e 00 A0 FF 00 
36125 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
36129 830 39 B5 FF 00 
3612d 831 55 C0 FF 00 
36131 832 71 CA FF 00 
36135 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
36139 834 AA DF FF 00 
3613d 835 C6 EA FF 00 
36141 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
36144 837             | 
36144 837             | '**********************************************************************************
36144 837             | '
36144 837             | '        Timings and colors definitions
36144 837             | '
36144 837             | '**********************************************************************************
36144 837             | 
36144 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
36144 837 08 00 00 00 
36148 838 3C 00 00 00 
3614c 839 08 00 00 00 
36150 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
36154 83b 07 00 00 00 
36158 83c 04 00 00 00 
3615c 83d 01 00 00 00 
36160 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
36164 83f 58 02 00 00 
36168 840 20 9E 4B 14 
3616c 841 FB A8 9E 01 
36170 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
36174 843 00 00 00 00 
36178 844 C0 00 00 00 
3617c 845 00 00 00 00 
36180 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36184 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
36184 847 00 75 C7 97 
36188 848 27 47 F6 0A 
3618c 849 05 79 CB 9B 
36190 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
36194 84b             | 
36194 84b             | ''--------  Initialization  ----------------------------------------------------------------
36194 84b             | 
36194 84b 28 0C 64 FD | hdmi            setq    #6
36198 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3619c 84d 28 10 64 FD |                 setq    #8
361a0 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
361a4 84f             | 
361a4 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
361a8 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
361ac 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
361b0 852 D6 C6 01 F1 |                 add     t1,hbase
361b4 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
361b8 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
361bc 855 7B 0B 80 5F 
361c0 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
361c4 857 66 66 86 FF 
361c8 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
361cc 859             | '
361cc 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
361d0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
361d4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
361d8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
361dc 85d             | 
361dc 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
361e0 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
361e4 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
361e8 860             | 
361e8 860             | ''--------  frame rendering main loop  ---------------------------------------------------
361e8 860             | 
361e8 860 28 06 64 FD | p101            setq 	#3
361ec 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
361f0 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
361f4 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
361f8 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
361fc 865 00 A0 05 F6 |                 mov     dlinum, #0
36200 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36204 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
36208 868             | 
36208 868             | 
36208 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3620c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
36210 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
36214 86b             |                 
36214 86b             | 
36214 86b             | 
36214 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
36214 86b             |   
36214 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
36218 86c 29 FE 65 3D |          if_nc  setq2   #255
3621c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
36220 86e             | 
36220 86e             | '' -----   up porch (before the picture)
36220 86e             | 
36220 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
36224 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
36228 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3622c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
36230 872             |  
36230 872             |    
36230 872             |  
36230 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36234 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
36238 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3623c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36240 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
36244 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
36248 878             | 
36248 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3624c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
36250 87a 48 00 B0 FD | 		call    #dli
36254 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
36258 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3625c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
36260 87e             |                 	
36260 87e             |                 
36260 87e             | 
36260 87e             |  
36260 87e             | '' ------- the main screen drawing starts here
36260 87e             | 
36260 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
36264 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
36268 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3626c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
36270 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
36274 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
36278 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3627c 885             |               
3627c 885             | 
3627c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
36280 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
36284 887             | 
36284 887             | ' ---------------- All visible lines displayed now, start vblank  
36284 887             | 
36284 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
36288 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3628c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
36290 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
36294 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
36298 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3629c 88d             | 
3629c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3629c 88d             | 
3629c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3629c 88d             | 
3629c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
362a0 88e             | 
362a0 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
362a4 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
362a8 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
362ac 891             | 
362ac 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
362b0 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
362b4 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
362b8 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
362bc 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
362c0 896             | 
362c0 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
362c4 897 DD C6 41 F8 |                 getnib  t1,dl,#0
362c8 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
362cc 899 70 00 90 AD |     if_z        jmp     #preload
362d0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
362d4 89b 94 00 90 AD |     if_z        jmp     #preload2
362d8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
362dc 89d 0C 00 90 AD |     if_z        jmp     #p390
362e0 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
362e4 89f 28 00 90 AD |     if_z        jmp     #p391  
362e8 8a0             | 
362e8 8a0 2D 00 64 FD | p308            ret
362ec 8a1             |    
362ec 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
362f0 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
362f4 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
362f8 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
362fc 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
36300 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36304 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
36308 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3630c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
36310 8aa             |  
36310 8aa             | '' --------  Reload palette. To do 
36310 8aa             | 
36310 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
36314 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
36318 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3631c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
36320 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
36324 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
36328 8b0 70 FF 9F FD |         	jmp     #dli                
3632c 8b1             |       
3632c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3632c 8b1             | 
3632c 8b1             | 
3632c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3632c 8b1             | 
3632c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
36330 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
36334 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36338 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3633c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
36340 8b6             |         
36340 8b6             | '' -------------- Preload a line from PSRAM        
36340 8b6             |         
36340 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
36344 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
36348 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3634c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
36350 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
36354 8bb             | 
36354 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
36358 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3635c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
36360 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
36364 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
36368 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3636c 8c1             |  
3636c 8c1             |  
3636c 8c1             | preload2      '  incmod  dlinum,#3
3636c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
36370 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
36374 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
36378 8c4 28 02 64 FD |                 setq	#1
3637c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
36380 8c6             |                 
36380 8c6             | 
36380 8c6             | '' -------------- Draw sprites
36380 8c6             | 
36380 8c6 CF 5C 02 F6 | sprite          mov t8,frames
36384 8c7 10 5C 0E F5 | 		and t8,#16 wz
36388 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3638c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
36390 8ca             | 		
36390 8ca             | 
36390 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
36394 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
36398 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3639c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
363a0 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
363a4 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
363a8 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
363ac 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
363b0 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
363b4 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
363b8 8d4 01 52 86 F1 |                 sub     sprite_h,#1
363bc 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
363c0 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
363c4 8d7             | 
363c4 8d7             | 
363c4 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
363c8 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
363cc 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
363d0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
363d4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
363d8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
363dc 8dd 00 5E 06 F6 |                 mov 	t9,#0
363e0 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
363e4 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
363e8 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
363ec 8e1             |      
363ec 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
363f0 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
363f4 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
363f8 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
363fc 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
36400 8e6             |                 
36400 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36404 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
36408 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3640c 8e9             |   		
3640c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
36410 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
36414 8eb             | 
36414 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
36418 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3641c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
36420 8ee             |  
36420 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
36424 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
36428 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3642c 8f1             | 	
3642c 8f1             | 	
3642c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
36430 8f2 28 CD 01 F1 | 		add	t4,sprite_w
36434 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
36438 8f4             | 
36438 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3643c 8f5             | 
3643c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
36440 8f6 01 58 86 F1 | 	 	sub     t6,#1
36444 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
36448 8f8             | 
36448 8f8 28 58 62 FD |                 setq   	t6
3644c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
36450 8fa 28 5D 02 F6 |                 mov t8,sprite_w
36454 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
36458 8fc 24 00 90 AD |         if_z    jmp #p898
3645c 8fd             |          
3645c 8fd             |         
3645c 8fd 70 5F 06 F6 |                 mov  t9,#368
36460 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
36464 8ff             | 
36464 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
36468 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3646c 901 FF FF 7F FF 
36470 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
36474 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
36478 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3647c 905 2D 01 00 F5 |                 and 0-0, t7
36480 906             |                
36480 906             | 
36480 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
36484 907 E5 E0 7A FA |                 wmlong 368,t3				
36488 908             |                 
36488 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3648c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
36490 90a 2D 00 64 FD |                 ret
36494 90b             | 	
36494 90b             | 	
36494 90b             |                
36494 90b             |  
36494 90b             | '' -------------- Graphics line ------------------------------------------------------------
36494 90b             |  
36494 90b             | 
36494 90b             | '' consts and vars
36494 90b             | 
36494 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
36498 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3649c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
364a0 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
364a4 90f             | 
364a4 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
364a8 910             | 
364a8 910             | '------ these longs will be set by setmode function
364a8 910             | 
364a8 910 00 00 00 00 | m_bs            long    0        'blanks before sync
364ac 911 00 00 00 00 | m_sn            long    0        'sync
364b0 912 00 00 00 00 | m_bv            long    0        'blanks before visible
364b4 913 00 00 00 00 | m_vi            long    0        'visible pixels #
364b8 914             | 'm_border        long    0        'left/right borders
364b8 914 00 00 00 00 | i_upporch       long    0        'up porch lines
364bc 915 00 00 00 00 | i_vsync         long    0        'vsync lines
364c0 916 00 00 00 00 | i_downporch     long    0        'down porch lines
364c4 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
364c8 918 00 00 00 00 | i_totalvis      long    0
364cc 919             | 
364cc 919             | '-------------------------------------
364cc 919             |  
364cc 919 00 00 00 00 | linenum         long    0
364d0 91a 00 00 00 00 | frames          long    0
364d4 91b 00 00 00 00 | dlinum long 0
364d8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
364dc 91d             | 
364dc 91d 00 00 00 00 | vblankptr       long    0
364e0 91e 00 00 00 00 | modeptr         long    0
364e4 91f 00 00 00 00 | paletteptr      long    0
364e8 920 00 00 00 00 | dlptr           long    0
364ec 921 01 00 00 00 | hbase           long    1
364f0 922 00 00 00 00 | mailbox         long    0
364f4 923 00 00 00 00 | spriteptr          long 0
364f8 924             | 
364f8 924 00 00 00 00 | cmd             long    0
364fc 925 00 B0 07 00 | buf1            long    $80000-16384-4096
36500 926 00 04 00 00 | buf2            long    1024
36504 927 01 00 00 00 | dlptr2          long    1
36508 928 01 00 00 00 | dl              long    1
3650c 929             | 
3650c 929 00 00 00 00 | buf1c long 0
36510 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
36514 92b 01 00 00 00 | framebuf2       long    1
36518 92c 01 00 00 00 | hsync0          long    1
3651c 92d 01 00 00 00 | hsync1          long    1
36520 92e             | 
36520 92e 01 00 00 00 | t1              long    1
36524 92f 00 00 00 00 | t2 long 0
36528 930 00 00 00 00 | t3 long 0
3652c 931 00 00 00 00 | t4 long 0
36530 932             | 
36530 932 00 00 00 00 | rcnt            long    0  'dl repeat count
36534 933 00 00 00 00 | rcnt2           long    0
36538 934 00 00 00 00 | rcnt2a          long    0
3653c 935 00 00 00 00 | roffset         long    0
36540 936 00 00 00 00 | rdl             long    0  'dl repeat line
36544 937 00 00 00 00 | dlc             long    0  'dl command
36548 938             | 
36548 938 FF FF FF FF | affffffff       long    $ffffffff
3654c 939 00 00 00 00 | sprite1pointer long 0
36550 93a 00 00 00 00 | sprite1xy      long 0
36554 93b 00 00 00 00 | sprite1wh      long 0
36558 93c 00 00 00 00 | sprite2pointer long 0
3655c 93d 00 00 00 00 | sprite2xy      long 0
36560 93e 00 00 00 00 | sprite2wh      long 0
36564 93f 00 00 00 00 | sprite3pointer long 0
36568 940 00 00 00 00 | sprite3xy      long 0
3656c 941 00 00 00 00 | sprite3wh      long 0
36570 942 00 00 00 00 | sprite4pointer long 0
36574 943 00 00 00 00 | sprite4xy      long 0
36578 944 00 00 00 00 | sprite4wh      long 0
3657c 945 00 00 00 00 | sprite5pointer long 0
36580 946 00 00 00 00 | sprite5xy      long 0
36584 947 00 00 00 00 | sprite5wh      long 0
36588 948 00 00 00 00 | sprite6pointer long 0
3658c 949 00 00 00 00 | sprite6xy      long 0
36590 94a 00 00 00 00 | sprite6wh      long 0
36594 94b 00 00 00 00 | sprite7pointer long 0
36598 94c 00 00 00 00 | sprite7xy      long 0
3659c 94d 00 00 00 00 | sprite7wh      long 0
365a0 94e 00 00 00 00 | sprite8pointer long 0
365a4 94f 00 00 00 00 | sprite8xy      long 0
365a8 950 00 00 00 00 | sprite8wh      long 0
365ac 951 00 00 00 00 | sprite9pointer long 0
365b0 952 00 00 00 00 | sprite9xy      long 0
365b4 953 00 00 00 00 | sprite9wh      long 0
365b8 954 00 00 00 00 | sprite10pointer long 0
365bc 955 00 00 00 00 | sprite10xy      long 0
365c0 956 00 00 00 00 | sprite10wh      long 0
365c4 957 00 00 00 00 | sprite11pointer long 0
365c8 958 00 00 00 00 | sprite11xy      long 0
365cc 959 00 00 00 00 | sprite11wh      long 0
365d0 95a 00 00 00 00 | sprite12pointer long 0
365d4 95b 00 00 00 00 | sprite12xy      long 0
365d8 95c 00 00 00 00 | sprite12wh      long 0
365dc 95d 00 00 00 00 | sprite13pointer long 0
365e0 95e 00 00 00 00 | sprite13xy      long 0
365e4 95f 00 00 00 00 | sprite13wh      long 0
365e8 960 00 00 00 00 | sprite14pointer long 0
365ec 961 00 00 00 00 | sprite14xy      long 0
365f0 962 00 00 00 00 | sprite14wh      long 0
365f4 963 00 00 00 00 | sprite15pointer long 0
365f8 964 00 00 00 00 | sprite15xy      long 0
365fc 965 00 00 00 00 | sprite15wh      long 0
36600 966 00 00 00 00 | sprite16pointer long 0
36604 967 00 00 00 00 | sprite16xy      long 0
36608 968 00 00 00 00 | sprite16wh      long 0
3660c 969 00 00 00 00 | sprite17pointer long 0
36610 96a 00 00 00 00 | sprite17xy      long 0
36614 96b 00 00 00 00 | sprite17wh      long 0
36618 96c 00 00 00 00 | sprite18pointer long 0
3661c 96d 00 00 00 00 | sprite18xy      long 0
36620 96e 00 00 00 00 | sprite18wh      long 0
36624 96f 00 00 00 00 | spritenum long 0
36628 970             | 
36628 970 00 00 00 00 | spriteline long 0
3662c 971 84 03 00 00 | sprite_x long 900
36630 972 00 00 00 00 | sprite_y long 0
36634 973 10 00 00 00 | sprite_w long 16
36638 974 40 00 00 00 | sprite_h long 64
3663c 975 00 00 00 00 | l2 long 0
36640 976 00 00 00 00 | t5 long 0
36644 977 00 00 00 00 | t6 long 0
36648 978 00 00 00 00 | t7 long 0
3664c 979 00 00 00 00 | t8 long 0
36650 97a 00 00 00 00 | t9 long 0
36654 97b 00 00 00 00 | preloadaddr long 0
36658 97c 00 00 00 00 | preloadlineaddr long 0
3665c 97d 00 04 00 00 | a1024 long 1024
36660 97e             | 
36660 97e E0 03 00 00 | aa long 992
36664 97f FF 03 00 00 | a1023 long 1023
36668 980 00 10 00 00 | a4096 long 4096
3666c 981             |  fit 368
3666c 981             | _psram_spin2_dat_
3666c 981 00 00 00 00 
      ...             
36764 9bf 00 00 00 00 
36768 9c0 00 00 00 00 |     listdata long 0[8*8]
3676c 9c1             |             orgh
3676c                 | 
3676c                 | ' driver state
3676c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
36770     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
36774                 | 
36774                 | ' delay profile
36774     07 00 00 00 
36778     00 CF 7B 05 
3677c     80 D1 F0 08 
36780     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
36784     80 C4 60 0F 
36788     80 39 7A 12 
3678c     40 2D D9 13 
36790     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
36794                 | 
36794                 | ' data to be passed to driver when starting it
36794                 | startupData
36794     00 00 00 00 |     long    0           ' current frequency
36798     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3679c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
367a0     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
367a4     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
367a8     B4 67 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
367ac     34 68 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
367b0     54 68 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
367b4                 | 
367b4                 | ' data for memory
367b4                 | deviceData
367b4                 |     ' 16 bank parameters follow (16MB per bank)
367b4     00 00 00 00 
      ...             
367ec     00 00 00 00 
367f0     00 00 00 00 |     long    0[16]                               ' banks 0-15
367f4                 |     ' 16 banks of pin parameters follow
367f4     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
367f8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
367fc     FF FF FF FF 
      ...             
3682c     FF FF FF FF 
36830     FF FF FF FF |     long    -1[14]                              ' banks 2-15
36834                 | 
36834                 | ' data for COG polling
36834                 | qosData 
36834     00 00 FF FF 
36838     00 00 FF FF 
3683c     00 00 FF FF 
36840     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
36844     00 00 FF FF 
36848     00 00 FF FF 
3684c     00 00 FF FF 
36850     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
36854                 |     
36854                 | ' mailbox storage
36854                 | 
36854                 | mailboxes
36854     00 00 00 00 
      ...             
368ac     00 00 00 00 
368b0     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
368b4                 | 	alignl
368b4                 | _psram16drv_spin2_dat_
368b4                 |                             orgh
368b4     00 00 00 00 
      ...             
368cc     00 00 00 00 
368d0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
368d4                 | 
368d4                 | driver_start
368d4                 |                             org
368d4 000             | '..................................................................................................
368d4 000             | ' Memory layout for COG RAM once operational:
368d4 000             | '
368d4 000             | '  COG RAM address      Usage
368d4 000             | '  ---------------      ----
368d4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
368d4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
368d4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
368d4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
368d4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
368d4 000             | '  ~$198-$1F3           State and register variables
368d4 000             | '
368d4 000             | ' Also during driver COG startup:
368d4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
368d4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
368d4 000             | '..................................................................................................
368d4 000             |                             
368d4 000             | ' Mailbox storage after vector initialization
368d4 000             | 
368d4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
368d8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
368dc 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
368e0 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
368e4 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
368e8 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
368ec 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
368f0 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
368f4 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
368f8 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
368fc 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
36900 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36904 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36908 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3690c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
36910 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36914 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36918 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3691c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
36920 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36924 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36928 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3692c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
36930 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36934 018             | 
36934 018             | ' Mailbox parameter addresses per COG once patched
36934 018             |                             
36934 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36938 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3693c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
36940 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
36944 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
36948 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3694c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
36950 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
36954 020             | 
36954 020             | '..................................................................................................
36954 020             | ' Per COG request and state setup and service branching
36954 020             |         
36954 020             | cog0                 
36954 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
36958 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3695c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
36960 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
36964 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36968 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3696c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
36970 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36974 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36978 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3697c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36980 02b 33 CA 63 FD |                             execf   request-0               'jump to service
36984 02c             | cog1                        
36984 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
36988 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3698c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
36990 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
36994 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36998 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3699c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
369a0 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
369a4 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
369a8 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
369ac 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
369b0 037 33 CA 63 FD |                             execf   request-0               'jump to service
369b4 038             | cog2                         
369b4 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
369b8 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
369bc 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
369c0 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
369c4 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
369c8 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
369cc 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
369d0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
369d4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
369d8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
369dc 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
369e0 043 33 CA 63 FD |                             execf   request-0               'jump to service
369e4 044             | cog3                        
369e4 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
369e8 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
369ec 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
369f0 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
369f4 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
369f8 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
369fc 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36a00 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36a04 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36a08 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a0c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a10 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36a14 050             | cog4                        
36a14 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36a18 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36a1c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36a20 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36a24 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a28 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a2c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36a30 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36a34 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36a38 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a3c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a40 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36a44 05c             | cog5                        
36a44 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36a48 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36a4c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36a50 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36a54 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a58 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a5c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36a60 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36a64 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36a68 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a6c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a70 067 33 CA 63 FD |                             execf   request-0               'jump to service
36a74 068             | cog6                        
36a74 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36a78 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36a7c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36a80 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36a84 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a88 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a8c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36a90 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36a94 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36a98 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a9c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36aa0 073 33 CA 63 FD |                             execf   request-0               'jump to service
36aa4 074             | cog7                        
36aa4 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36aa8 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36aac 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36ab0 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36ab4 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36ab8 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36abc 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36ac0 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36ac4 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36ac8 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36acc 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ad0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36ad4 080             |                             fit     128
36ad4 080             | 
36ad4 080             |                             fit     128
36ad4 080             | pad                         long    0[128-$]                'align init code to $80
36ad4 080             | 
36ad4 080             | '..................................................................................................
36ad4 080             | 
36ad4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36ad4 080             | 
36ad4 080             | init                        
36ad4 080             |                             ' get driver scratch long address in hub
36ad4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36ad8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36adc 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36ae0 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36ae4 084             |                     
36ae4 084             |                             ' read in the additional LUT RAM code
36ae4 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36ae8 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36aec 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36af0 087             | 
36af0 087             |                             ' read the startup parameters
36af0 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36af4 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36af8 089             | 
36af8 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36af8 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36afc 08a             | 
36afc 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36b00 08b 01 00 00 5F 
36b04 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36b08 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36b0c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36b10 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36b14 090             | 
36b14 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36b14 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36b18 091 01 00 00 FF 
36b1c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36b20 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36b24 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36b28 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36b2c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36b30 097 08 DE 47 F5 |                             or      a, #8
36b34 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36b38 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36b3c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36b40 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36b44 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36b48 09d 01 DE 07 F1 |                             add     a, #1
36b4c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36b50 09f             |  
36b50 09f             |                             ' setup device control pin states
36b50 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36b54 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36b58 0a1 01 00 00 FF 
36b5c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36b60 0a3             | 
36b60 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36b64 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36b68 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36b6c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36b70 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36b74 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36b78 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36b7c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36b80 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36b84 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36b88 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36b8c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36b90 0af             | pinloop
36b90 0af             |                             ' generate minimum CE high time before access
36b90 0af A1 07 00 FF 
36b94 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36b98 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36b9c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36ba0 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36ba4 0b4 1F DE 63 FD |                             waitx   a                       'delay
36ba8 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36bac 0b6             | 
36bac 0b6             |                             ' setup the COG mailboxes and addresses 
36bac 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36bb0 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36bb4 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36bb8 0b9             | 
36bb8 0b9 28 2E 64 FD |                             setq    #24-1
36bbc 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36bc0 0bb             | 
36bc0 0bb             |                             ' setup the polling loop for active COGs 
36bc0 0bb 01 C2 63 FD |                             cogid   id
36bc4 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36bc8 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36bcc 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36bd0 0bf 0A F0 07 F6 |                             mov     ptra, #10
36bd4 0c0 E1 F1 03 FA |                             mul     ptra, id
36bd8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36bdc 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36be0 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36be4 0c4 03 C2 07 FA |                             mul     id, #3
36be8 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36bec 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36bf0 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36bf4 0c8 D8 01 B0 FD |                             call    #reloadcogs
36bf8 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36bfc 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36c00 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36c00 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36c04 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36c08 0cd 08 04 DC FC |                             rep     #2, #8
36c0c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36c10 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36c14 0d0             | 
36c14 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36c14 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36c14 0d0 01 C2 63 FD |                             cogid   id
36c18 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36c1c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36c20 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36c24 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36c28 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36c2c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36c30 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36c34 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36c38 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36c3c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36c40 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36c44 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36c48 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36c4c 0de A5 E5 03 F1 |                             add     d, const512
36c50 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36c54 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36c58 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36c5c 0e2             |                             
36c5c 0e2             |                             ' setup register values for control vector loop setup after we return
36c5c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36c60 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36c64 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36c68 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36c6c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36c70 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36c74 0e8 D0 C3 8F F9 |                             altd    id, #id0
36c78 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36c7c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36c80 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36c84 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36c88 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36c8c 0ee             |  
36c8c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36c90 0ef 07 CA 07 F5 |                             and     request, #7
36c94 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36c98 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36c9c 0f2             |                             fit     $100                    'ensure all init code fits this space
36c9c 0f2             | 
36c9c 0f2             |                             fit     $100                    'ensure all init code fits this space
36c9c 0f2             | 
36c9c 0f2 00 00 00 00 
      ...             
36ccc 0fe 00 00 00 00 
36cd0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36cd4 100             | 
36cd4 100             | '..................................................................................................
36cd4 100             | ' Error result handling and COG notification of request completion
36cd4 100             | 
36cd4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36cd8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36cdc 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36ce0 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36ce4 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36ce8 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36cec 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36cf0 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36cf4 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36cf8 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36cfc 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36d00 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36d04 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36d08 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36d0c 10e             | ' Poller re-starts here after a COG is serviced
36d0c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36d10 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36d14 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36d18 111             | ' Main dynamic polling loop repeats until a request arrives
36d18 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36d1c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36d20 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36d24 114             | 
36d24 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36d28 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36d2c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36d30 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36d34 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
36d38 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
36d3c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
36d40 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
36d44 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
36d48 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
36d4c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
36d50 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
36d54 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
36d58 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
36d5c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
36d60 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
36d64 124             | 
36d64 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
36d68 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
36d6c 126             |  
36d6c 126             | '..................................................................................................
36d6c 126             | ' List handler                               
36d6c 126             | 
36d6c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
36d70 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
36d74 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
36d78 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
36d7c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
36d80 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
36d84 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
36d88 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
36d8c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
36d90 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
36d94 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
36d98 131 33 00 60 FD |                             execf   0-0                     'process the request 
36d9c 132             | 
36d9c 132             | '..................................................................................................
36d9c 132             | ' Restoring per COG state and resuming where we left off
36d9c 132             | 
36d9c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
36da0 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
36da4 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
36da8 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
36dac 136 D8 CB FB F8 |                             getbyte request, addr1, #3
36db0 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
36db4 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
36db8 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
36dbc 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
36dc0 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
36dc4 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
36dc8 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
36dcc 13e             |                    
36dcc 13e             | '..................................................................................................
36dcc 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
36dcc 13e             | 
36dcc 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
36dd0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
36dd4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
36dd8 141 D0 DF B7 F9 |                             setd    a, #id0
36ddc 142 D8 DF BF F9 |                             sets    a, #addr1
36de0 143 FE FF FF FF 
36de4 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
36de8 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
36dec 146 3F DE A7 F9 |                             alti    a, #%111_111 
36df0 147 00 00 F0 F9 |                             muxq    0-0, 0-0
36df4 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
36df8 149 01 E2 63 FD |                             cogid   c
36dfc 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
36e00 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
36e04 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
36e08 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
36e0c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
36e10 14f 00 E0 03 F6 |                             mov     b, 0-0
36e14 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
36e18 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
36e1c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
36e20 153 0C 00 90 AD |             if_z            jmp     #excluded               
36e24 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
36e28 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
36e2c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
36e30 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
36e34 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
36e38 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
36e3c 15a             | 
36e3c 15a             | 'determine priority cogs and build instructions for the polling sequence
36e3c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
36e40 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
36e44 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
36e48 15d             | 
36e48 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
36e4c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
36e50 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
36e54 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
36e58 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
36e5c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
36e60 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
36e64 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
36e68 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
36e6c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
36e70 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
36e74 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
36e78 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
36e7c 16a             | endprioloop
36e7c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
36e80 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
36e84 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
36e88 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
36e8c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
36e90 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
36e94 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
36e98 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
36e9c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
36ea0 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
36ea4 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
36ea8 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
36eac 176             | 
36eac 176             | ' populate the round robin COG polling instructions
36eac 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
36eb0 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
36eb4 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
36eb8 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
36ebc 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
36ec0 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
36ec4 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
36ec8 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
36ecc 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
36ed0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
36ed4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
36ed8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
36edc 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
36ee0 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
36ee4 184             | '..................................................................................................
36ee4 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
36ee4 184             | 
36ee4 184             | set_latency                                                 '            (a) set latency
36ee4 184             | get_latency                                                 '            (b) get latency
36ee4 184             | set_burst                                                   '            (c) set burst size of bank
36ee4 184             | get_burst                                                   '            (d) get burst size of bank
36ee4 184             |                                                             '            (e) dump state
36ee4 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
36ee8 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
36eec 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
36ef0 187             |                                                             ' | | | | e  account for following AUGS
36ef0 187 04 00 00 FF 
36ef4 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
36ef8 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
36efc 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
36f00 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
36f04 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
36f08 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
36f0c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
36f10 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
36f14 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
36f18 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
36f1c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
36f20 193             | 
36f20 193             | '..................................................................................................
36f20 193             | ' Misc EXECF code
36f20 193             | 
36f20 193 33 72 63 FD | start_read_exec             execf   newburstr
36f24 194 33 7C 63 FD | start_write_exec            execf   resumewrites
36f28 195 33 78 63 FD | continue_read_exec          execf   lockedreads
36f2c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
36f30 197             | 
36f30 197             | '..................................................................................................
36f30 197             | ' Variables
36f30 197             | 
36f30 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
36f34 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
36f38 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
36f3c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
36f40 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
36f44 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
36f48 19d             | 
36f48 19d 00 00 00 80 | xfreq1          long    $80000000
36f4c 19e 00 00 00 40 | xfreq2          long    $40000000
36f50 19f 03 00 00 00 | delay           long    3
36f54 1a0             | 
36f54 1a0             | lutcodeaddr                 
36f54 1a0             | startupparams
36f54 1a0             | excludedcogs                                    'careful: shared register use!
36f54 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
36f58 1a1 00 00 00 00 | flags           long    0
36f5c 1a2             | mask                                            'careful: shared register use!
36f5c 1a2 00 00 00 00 | resetmaskA      long    0
36f60 1a3             | limit                                           'careful: shared register use!
36f60 1a3 00 00 00 00 | resetmaskB      long    0
36f64 1a4 00 00 00 00 | datapins        long    0
36f68 1a5             | const512                                        'careful: shared register use!
36f68 1a5 00 00 00 00 | devicelist      long    0
36f6c 1a6 00 00 00 00 | coglist         long    0
36f70 1a7 00 00 00 00 | mbox            long    0 
36f74 1a8             | 
36f74 1a8             | clkpin                                          'shared with code patched during init
36f74 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
36f78 1a9             | cspin                                           'shared with code patched during init
36f78 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
36f7c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
36f80 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
36f84 1ac 01 00 00 00 | clkdelay        long    1
36f88 1ad 00 00 00 00 | regdatabus      long    0
36f8c 1ae             | 
36f8c 1ae 10 00 00 00 | deviceaddr      long    $10
36f90 1af             | rrcounter
36f90 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
36f94 1b0             | 
36f94 1b0             | ' jump addresses for the per COG handlers
36f94 1b0 20 00 00 00 | cog0_handler    long    cog0
36f98 1b1 2C 00 00 00 | cog1_handler    long    cog1
36f9c 1b2 38 00 00 00 | cog2_handler    long    cog2
36fa0 1b3 44 00 00 00 | cog3_handler    long    cog3
36fa4 1b4 50 00 00 00 | cog4_handler    long    cog4
36fa8 1b5 5C 00 00 00 | cog5_handler    long    cog5
36fac 1b6 68 00 00 00 | cog6_handler    long    cog6
36fb0 1b7 74 00 00 00 | cog7_handler    long    cog7
36fb4 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
36fb8 1b9             | 
36fb8 1b9             | ' EXECF sequences
36fb8 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
36fbc 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
36fc0 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
36fc4 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
36fc8 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
36fcc 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
36fd0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
36fd4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
36fd4 1c0             | 
36fd4 1c0             | 
36fd4 1c0             | ' SKIPF sequences
36fd4 1c0             | skiptable
36fd4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
36fd8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
36fdc 1c2 00 00 00 00 |                 long    0                      ' read modify write long
36fe0 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
36fe4 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
36fe8 1c5 00 00 00 00 | pattern2        long    0
36fec 1c6 00 00 00 00 | pattern3        long    0
36ff0 1c7 77 02 00 00 | singlelong      long    %1001110111  
36ff4 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
36ff8 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
36ffc 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
37000 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37004 1cc             | 
37004 1cc             | ' LUT RAM address values
37004 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
37008 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3700c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
37010 1cf F6 02 00 00 | noread          long    noread_lut
37014 1d0             | 
37014 1d0 00 00 00 00 | id0             long    0
37018 1d1 01 00 00 00 | id1             long    1
3701c 1d2 02 00 00 00 | id2             long    2
37020 1d3 03 00 00 00 | id3             long    3
37024 1d4 04 00 00 00 | id4             long    4
37028 1d5 05 00 00 00 | id5             long    5
3702c 1d6 06 00 00 00 | id6             long    6
37030 1d7 07 00 00 00 | id7             long    7
37034 1d8             | 
37034 1d8             | 'These next 10 request registers below are also temporarily reused during init 
37034 1d8             | 'and COG updates and need to follow immediately after id0-id7
37034 1d8 00 00 00 00 | addr1           long    0
37038 1d9 00 00 00 00 | hubdata         long    0
3703c 1da 00 00 00 00 | count           long    0
37040 1db 00 00 00 00 | addr2           long    0
37044 1dc 00 00 00 00 | total           long    0
37048 1dd 00 00 00 00 | offset1         long    0
3704c 1de 00 00 00 00 | offset2         long    0
37050 1df 00 00 00 00 | link            long    0
37054 1e0             | 
37054 1e0             | burstwrite                                      'note shared register use during init
37054 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
37058 1e1 00 00 00 00 | id              long    0
3705c 1e2             | 
3705c 1e2 00 00 00 00 | header          long    0
37060 1e3 00 00 00 00 | trailer         long    0
37064 1e4 00 00 00 00 | cmdaddr         long    0
37068 1e5 00 00 00 00 | request         long    0
3706c 1e6 00 00 00 00 | rrlimit         long    0
37070 1e7 00 00 00 00 | pinconfig       long    0
37074 1e8 00 00 00 00 | clks            long    0
37078 1e9 00 00 00 00 | resume          long    0
3707c 1ea 00 00 00 00 | orighubsize     long    0
37080 1eb 00 00 00 00 | wrclks          long    0
37084 1ec             | 
37084 1ec 00 00 00 00 | pattern         long    0
37088 1ed 00 00 00 00 | hubscratch      long    0
3708c 1ee 00 10 00 00 | val4k           long    4096
37090 1ef             | 
37090 1ef             | ' temporary general purpose regs
37090 1ef 00 00 00 00 | a               long    0
37094 1f0 00 00 00 00 | b               long    0
37098 1f1 00 00 00 00 | c               long    0
3709c 1f2 00 00 00 00 | d               long    0
370a0 1f3             |                 fit     502
370a0 1f3             | 
370a0 1f3             |                 fit     502
370a0 1f3             | 
370a0 1f3             | '..................................................................................................
370a0 1f3             | 
370a0 1f3             |             orgh
370a0                 | 
370a0                 | lut_code
370a0                 | 'HW init code up to 80 longs
370a0                 | 
370a0                 | '..................................................................................................
370a0                 | ' Memory layout for LUT RAM once operational:
370a0                 | '
370a0                 | '  LUT RAM address      Usage
370a0                 | '  ---------------      ----
370a0                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
370a0                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
370a0                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
370a0                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
370a0                 | '
370a0                 | ' Also during driver COG startup:
370a0                 | ' $230-$24F is used for HW init setup
370a0                 | ' $250-$26F is used as temporary vector storage 
370a0                 | '..................................................................................................
370a0                 | 
370a0                 |                 org $230    
370a0 230             | 
370a0 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
370a0 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
370a4 231 24 16 60 FD |                             pollxfi
370a8 232 FF AA 2A FF 
370ac 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
370b0 234 28 00 B0 FD |                             call    #sendqspi
370b4 235 07 F8 07 FF 
370b8 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
370bc 237 28 00 B0 FD |                             call    #sendspi
370c0 238 F8 07 78 FF 
370c4 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
370c8 23a 1C 00 B0 FD |                             call    #sendspi
370cc 23b 7F 78 78 FF 
370d0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
370d4 23d 10 00 B0 FD |                             call    #sendspi 
370d8 23e 2D 00 64 FD |                             ret
370dc 23f             | 
370dc 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
370e0 240 32 0C 64 FD |                             skipf   #%110
370e4 241 9C EF 03 F6 |                             mov     pb, xsendimm
370e8 242             | 
370e8 242 10 D0 07 F6 | sendspi                     mov     clks, #16
370ec 243 97 EF 03 F6 |                             mov     pb, ximm8lut
370f0 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
370f4 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
370f8 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
370fc 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
37100 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37104 249 50 48 63 FD |                             fltl    datapins                'float data bus
37108 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3710c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
37110 24c             | 
37110 24c 00 00 00 00 
37114 24d 00 00 00 00 
37118 24e 00 00 00 00 
3711c 24f 00 00 00 00 |                 long    0[$270-32-$]
37120 250             |                 fit     $270-32  ' keep room for 32 vector longs
37120 250             |     
37120 250             |                 fit     $270-32  ' keep room for 32 vector longs
37120 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
37120 250             | rw_vect ' PSRAM jump vectors
37120 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37124 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37128 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3712c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37130 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
37134 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
37138 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3713c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
37140 258             | ro_vect ' R/O PSRAM jump vectors
37140 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37144 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37148 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3714c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37150 25c 00 01 00 00 |                 long    unsupported
37154 25d 00 01 00 00 |                 long    unsupported
37158 25e 00 01 00 00 |                 long    unsupported
3715c 25f 00 01 00 00 |                 long    unsupported
37160 260             | ctrl_vect ' Control jump vectors
37160 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
37164 261 00 01 00 00 |                 long    unsupported
37168 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3716c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
37170 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
37174 265 00 01 00 00 |                 long    unsupported
37178 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3717c 267 3E 01 00 00 |                 long    reconfig 
37180 268             | no_vect ' Invalid bank jump vectors
37180 268 01 01 00 00 |                 long    invalidbank
37184 269 01 01 00 00 |                 long    invalidbank
37188 26a 01 01 00 00 |                 long    invalidbank
3718c 26b 01 01 00 00 |                 long    invalidbank
37190 26c 01 01 00 00 |                 long    invalidbank
37194 26d 01 01 00 00 |                 long    invalidbank
37198 26e 01 01 00 00 |                 long    invalidbank
3719c 26f 01 01 00 00 |                 long    invalidbank
371a0 270             |                 fit     $270
371a0 270             | 
371a0 270             |                 fit     $270
371a0 270             | '..................................................................................................
371a0 270             | ' PSRAM READS
371a0 270             |                                                             ' a b c d e f
371a0 270             |                                                             ' B W L B R L  (a) byte read
371a0 270             |                                                             ' Y O O U E O  (b) word read
371a0 270             |                                                             ' T R N R S C  (c) long read
371a0 270             |                                                             ' E D G S U K  (d) new burst read
371a0 270             |                                                             '       T M E  (e) resumed sub-burst
371a0 270             |                                                             '         E D  (f) locked sub-burst
371a0 270             | 
371a0 270             | 
371a0 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
371a4 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
371a8 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
371ac 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
371b0 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
371b4 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
371b8 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
371bc 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
371c0 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
371c4 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
371c8 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
371cc 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
371d0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
371d4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
371d8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
371dc 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
371e0 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
371e4 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
371e8 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
371ec 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
371f0 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
371f4 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
371f8 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
371fc 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
37200 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37204 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
37208 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3720c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
37210 28c             | 
37210 28c             |                             ' fall through to read bursts
37210 28c             |                         
37210 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
37210 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
37214 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37218 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3721c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
37220 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
37224 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
37228 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3722c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
37230 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
37234 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
37238 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3723c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
37240 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
37244 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
37248 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3724c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
37250 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
37254 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
37258 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3725c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
37260 2a0 E8 D1 03 F1 |                             add     clks, clks
37264 2a1             | readcommon
37264 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
37268 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3726c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
37270 2a4             | 
37270 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
37274 2a5 69 C8 63 FD |                             rev     cmdaddr
37278 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3727c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
37280 2a8             | 
37280 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
37284 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
37288 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
37288 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3728c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
37290 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
37294 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
37298 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
37298 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3729c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
372a0 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
372a4 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
372a8 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
372ac 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
372b0 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
372b0 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
372b4 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
372b8 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
372bc 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
372c0 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
372c4 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
372c8 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
372cc 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
372d0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
372d4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
372d8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
372dc 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
372e0 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
372e4 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
372e8 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
372e8 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
372ec 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
372f0 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
372f4 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
372f8 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
372fc 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
37300 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37304 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
37308 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3730c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
37310 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
37314 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
37318 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3731c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
37320 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
37324 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
37328 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3732c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
37330 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
37334 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
37338 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3733c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
37340 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
37344 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
37348 2da 10 03 90 FD |                             jmp     #writecommon
3734c 2db             | 
3734c 2db             | '..................................................................................................
3734c 2db             | ' Burst continuation testing
3734c 2db             | 
3734c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
37350 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
37354 2dd             | continue_read_lut          
37354 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
37358 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3735c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
37360 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
37364 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
37368 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3736c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
37370 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
37374 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
37378 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3737c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
37380 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
37384 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
37388 2ea             | 
37388 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3738c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
37390 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
37394 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
37398 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3739c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
373a0 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
373a4 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
373a8 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
373ac 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
373b0 2f4 2A 1C 66 0D |             _ret_           push    #poller
373b4 2f5             | 
373b4 2f5             | 
373b4 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
373b8 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
373b8 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
373bc 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
373c0 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
373c4 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
373c8 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
373cc 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
373d0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
373d4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
373d8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
373dc 2ff             | '..................................................................................................
373dc 2ff             | ' Completion of requests
373dc 2ff             | 
373dc 2ff             | complete_rw_lut             
373dc 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
373e0 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
373e4 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
373e8 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
373ec 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
373f0 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
373f4 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
373f8 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
373fc 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
37400 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37404 309 32 62 64 AD |             if_z            skipf   #%110001
37408 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3740c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
37410 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
37414 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
37418 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3741c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
37420 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
37424 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
37428 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3742c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
37430 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
37434 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
37438 316             |                                                             ' skipcase (a) gfx copy to/from hub
37438 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
37438 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
37438 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3743c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
37440 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
37444 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
37448 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3744c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
37450 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
37454 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
37458 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3745c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
37460 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
37464 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
37468 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3746c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
37470 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
37474 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
37478 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3747c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
37480 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
37484 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
37488 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3748c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
37490 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
37494 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
37498 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3749c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
374a0 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
374a4 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
374a8 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
374ac 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
374b0 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
374b4 335 DF B7 03 A6 |             if_z            mov     addr2, link
374b8 336 34 FF 9F AD |             if_z            jmp     #checknext
374bc 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
374c0 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
374c4 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
374c8 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
374cc 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
374d0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
374d4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
374d8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
374dc 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
374e0 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
374e4 341             | 
374e4 341             | '..................................................................................................
374e4 341             | ' PSRAM WRITES
374e4 341             |                                                             '  a b c d e f g h
374e4 341             | 
374e4 341             |                                                             '  B W L F B R L L (a) byte write(s)
374e4 341             |                                                             '  Y O O I U E O O (b) word write(s)
374e4 341             |                                                             '  T R N L R S C C (c) long write(s)
374e4 341             |                                                             '  E D G L S U K K (d) resumed fill
374e4 341             |                                                             '          T M E E (e) new burst write
374e4 341             |                                                             '            E D D (f) resumed burst
374e4 341             |                                                             '              F B (g) locked fill
374e4 341             |                                                             '              I U (h) locked burst write
374e4 341             |                                                             '              L R 
374e4 341             |                                                             '              L S 
374e4 341             |                                                             '                T 
374e4 341             | 
374e4 341             | w_single                   
374e4 341             | w_fill_cont           
374e4 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
374e8 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
374ec 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
374f0 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
374f4 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
374f8 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
374fc 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
37500 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37504 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
37508 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3750c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
37510 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
37514 34d             |                ' disable call to r_resume_burst for single longs when z=0
37514 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
37518 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3751c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
37520 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
37524 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
37528 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3752c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
37530 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
37534 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
37538 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3753c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
37540 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
37544 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
37548 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3754c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
37550 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
37554 35d             |         
37554 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
37554 35d             |             '
37554 35d             |             '  At least one of these 3 optional components will be sent
37554 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
37554 35d             |             '     body - N x full longs of data
37554 35d             |             '     trailer - last partial long of data
37554 35d             |             '
37554 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
37554 35d             |             '
37554 35d             |             'Case    Type                           Sends
37554 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
37554 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
37554 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
37554 35d             |             ' 4)     Multiple long fill             body only
37554 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
37554 35d             | 
37554 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
37554 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
37558 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3755c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
37560 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
37564 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
37568 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3756c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
37570 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
37574 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
37578 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3757c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
37580 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
37584 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
37588 36a             |                             
37588 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3758c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
37590 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
37594 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
37598 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3759c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
375a0 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
375a4 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
375a8 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
375ac 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
375b0 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
375b4 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
375b8 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
375bc 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
375c0 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
375c4 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
375c8 37a             | 
375c8 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
375cc 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
375d0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
375d4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
375d8 37e             |                  
375d8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
375dc 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
375e0 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
375e4 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
375e8 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
375ec 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
375f0 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
375f4 385             | 
375f4 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
375f8 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
375fc 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
37600 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37604 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37608 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3760c 38b             | 
3760c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3760c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
37610 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
37614 38d 2A B0 63 FD |                             push    addr1                   'save address
37618 38e             | 
37618 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
37618 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3761c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
37620 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
37624 391             |             
37624 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
37628 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3762c 393 2B B0 63 FD |                             pop     addr1                   'restore address
37630 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
37634 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
37638 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3763c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
37640 398             | 
37640 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
37644 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
37648 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3764c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
37650 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
37654 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
37658 39e             | 
37658 39e             |                             'trailer is done
37658 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3765c 39f             | 
3765c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
37660 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
37664 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
37668 3a2             | 
37668 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3766c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
37670 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37674 3a5 61 C8 63 FD |                             mergeb  cmdaddr
37678 3a6             |                             
37678 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3767c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37680 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
37684 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
37688 3aa             |                                                          
37688 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3768c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
37690 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
37694 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
37698 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3769c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
376a0 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
376a4 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
376a8 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
376ac 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
376b0 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
376b4 3b5             |  
376b4 3b5 59 52 63 FD |                             drvh    cspin
376b8 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
376bc 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
376c0 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
376c4 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
376c8 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
376cc 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
376d0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
376d4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
376d8 3be EA E5 03 F6 |                             mov     d, orighubsize
376dc 3bf EF E5 63 F0 |                             shl     d, a
376e0 3c0 F2 E3 83 F1 |                             sub     c, d
376e4 3c1 DD E3 03 F1 |                             add     c, offset1
376e8 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
376ec 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
376f0 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
376f4 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
376f8 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
376fc 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
37700 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37704 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37708 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3770c 3cb BB D3 03 F6 |                             mov     resume, restorefill
37710 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
37714 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
37718 3ce 6C FC BF CD |             if_c            call    #yield
3771c 3cf 2D 00 64 FD |                             ret
37720 3d0             |                            
37720 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
37720 3d0             |                       '     rczl    pa                      'rotate left into address offset
37720 3d0             |                       '     rczl    c wcz                   'restore count and flags
37720 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
37724 3d1 02 EC 67 F0 |                             shl     pa, #2
37728 3d2 28 06 64 AD |             if_z            setq    #3
3772c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
37730 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
37734 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
37738 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3773c 3d7             | 
3773c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
37740 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
37744 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
37748 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3774c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
37750 3dc             |                 fit 1024-32
37750 3dc             |         
37750 3dc             | 
37750 3dc             | '..................................................................................................
37750 3dc             | 
37750 3dc             |                 fit 1024-32
37750 3dc 00 00 00 00 
37754 3dd 00 00 00 00 
37758 3de 00 00 00 00 
3775c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
37760 3e0             |                 org 1024-32
37760 000             | 
37760 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
37760 000 00 00 00 00 |                 long $0000
37764 001 11 11 00 00 |                 long $1111
37768 002 22 22 00 00 |                 long $2222
3776c 003 33 33 00 00 |                 long $3333
37770 004 44 44 00 00 |                 long $4444
37774 005 55 55 00 00 |                 long $5555
37778 006 66 66 00 00 |                 long $6666
3777c 007 77 77 00 00 |                 long $7777
37780 008 88 88 00 00 |                 long $8888
37784 009 99 99 00 00 |                 long $9999
37788 00a AA AA 00 00 |                 long $aaaa
3778c 00b BB BB 00 00 |                 long $bbbb
37790 00c CC CC 00 00 |                 long $cccc
37794 00d DD DD 00 00 |                 long $dddd
37798 00e EE EE 00 00 |                 long $eeee
3779c 00f FF FF 00 00 |                 long $ffff
377a0 010             | 
377a0 010             | 'masks
377a0 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
377a4 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
377a8 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
377ac 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
377b0 014             | 
377b0 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
377b4 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
377b8 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
377bc 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
377c0 018             | 
377c0 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
377c4 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
377c8 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
377cc 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
377d0 01c             | 
377d0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
377d4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
377d8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
377dc 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
377e0 020             |         fit 1024
377e0 020             | 
377e0 020             |         fit 1024
377e0 020             | 
377e0 020             | '--------------------------------------------------------------------------------------------------
377e0 020             |         orgh
377e0                 | 
377e0                 | gfxexpansion
377e0                 |                             'simple line drawing graphics expansion of memory driver
377e0                 |                             'jmp     #donerepeats                'just return for now
377e0                 | 
377e0     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
377e4     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
377e8     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
377ec     DD E1 03 F6 |                             mov     b, offset1              'get error term
377f0     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
377f4     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
377f8     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
377fc     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
37800     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37804     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37808     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3780c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
37810     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
37814     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
37818     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3781c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
37820     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
37824     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
37828     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3782c     DC E5 33 F9 |                             getword d, total, #0            'get line width
37830     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
37834     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
37838     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3783c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
37840     C3 03 80 FD |                             jmp     #readmask               'continue filling
37844                 | 	alignl
37844                 | _usbnew_spin2_dat_
37844                 |                 org     $000
37844 000             | 
37844 000             | usb_host_start
37844 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
37848 001             | 
37848 001 03 00 00 FF 
3784c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
37850 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
37854 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
37858 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3785c 006 29 70 63 FD |                 setq2   htmp
37860 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
37864 008             | 
37864 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
37868 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3786c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
37870 00b             | 
37870 00b             | '------------------------------------------------------------------------------
37870 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
37870 00b             | ' special because the receiving function must not respond with either STALL or
37870 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
37870 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
37870 00b             | ' corrupt packet, it must ignore the transaction
37870 00b             | '------------------------------------------------------------------------------
37870 00b             | ' On entry:
37870 00b             | '   PTRA - start address of the SETUP data struct.
37870 00b             | ' On exit:
37870 00b             | '   retval - PID_ACK on success, otherwise error code.
37870 00b             | '------------------------------------------------------------------------------
37870 00b             | txn_setup
37870 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
37874 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
37878 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3787c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
37880 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
37884 010             | .setup
37884 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
37888 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3788c 012 2D 00 64 AD |         if_z    ret
37890 013 7C 0B B0 FD |                 call    #retry_wait
37894 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37898 015 2D 00 64 AD |         if_z    ret
3789c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
378a0 017 E0 FF 9F FD |                 jmp     #.setup
378a4 018             | 
378a4 018             | '------------------------------------------------------------------------------
378a4 018             | ' IN/INTERRUPT transaction.
378a4 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
378a4 018             | '------------------------------------------------------------------------------
378a4 018             | ' On entry:
378a4 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
378a4 018             | '     CRC(b19..23).
378a4 018             | ' On exit:
378a4 018             | '------------------------------------------------------------------------------
378a4 018             | txn_in
378a4 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
378a8 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
378ac 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
378b0 01b             | 
378b0 01b             |                 ' Fall through to urx_packet
378b0 01b             | 
378b0 01b             | '------------------------------------------------------------------------------
378b0 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
378b0 01b             | ' received are handshakes and IN DATAx.
378b0 01b             | '------------------------------------------------------------------------------
378b0 01b             | ' On entry:
378b0 01b             | ' On exit:
378b0 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
378b0 01b             | '     returned.
378b0 01b             | '------------------------------------------------------------------------------
378b0 01b             | urx_packet
378b0 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
378b4 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
378b8 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
378bc 01e 1A 92 63 FD |                 getct   hct2
378c0 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
378c4 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
378c8 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
378cc 022             | .wait_sop
378cc 022 22 A7 8A FA |                 rdpin   urx, dm
378d0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
378d4 024 08 00 90 CD |         if_c    jmp     #.get_pid
378d8 025 FC 25 CC FB |                 jnct2   #.wait_sop
378dc 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
378e0 027             | .get_pid
378e0 027 28 02 B0 FD |                 call    #urx_next
378e4 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
378e8 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
378ec 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
378f0 02b             | .chk_pid
378f0 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
378f4 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
378f8 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
378fc 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
37900 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37904 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37908 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3790c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
37910 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37914 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37918 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3791c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
37920 037             | .ack_resend
37920 037 22 A7 82 FA |                 rqpin   urx, dm
37924 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37928 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3792c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
37930 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37934 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37938 03d             | .chk_eop
37938 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3793c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
37940 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
37944 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
37948 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3794c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37950 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
37954 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
37958 045 2D 00 64 FD |                 ret
3795c 046             | .idle
3795c 046 22 A7 82 FA |                 rqpin   urx, dm
37960 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37964 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
37968 049 2D 00 64 FD |                 ret
3796c 04a             | 
3796c 04a             | '------------------------------------------------------------------------------
3796c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3796c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3796c 04a             | ' if one is required.
3796c 04a             | '------------------------------------------------------------------------------
3796c 04a             | ' On entry:
3796c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3796c 04a             | ' On exit:
3796c 04a             | '------------------------------------------------------------------------------
3796c 04a             | utx_token
3796c 04a 22 A7 82 FA |                 rqpin   urx, dm
37970 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37974 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37978 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3797c 04e 34 0D B0 CD |         if_c    call    #utx_pre
37980 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37984 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
37988 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3798c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
37990 053             | .next_byte
37990 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
37994 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
37998 055             | .wait
37998 055 40 46 72 FD |                 testp   dp                      wc
3799c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
379a0 057 23 03 08 FC |                 akpin   dp
379a4 058 22 A5 22 FC |                 wypin   utx, dm
379a8 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
379ac 05a             | 
379ac 05a             | '------------------------------------------------------------------------------
379ac 05a             | ' SETUP/OUT/INTERRUPT transaction.
379ac 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
379ac 05a             | '------------------------------------------------------------------------------
379ac 05a             | ' On entry:
379ac 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
379ac 05a             | '     CRC(b19..23).
379ac 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
379ac 05a             | '   pkt_data - count of DATAx payload bytes to send.
379ac 05a             | ' On exit:
379ac 05a             | '------------------------------------------------------------------------------
379ac 05a             | txn_out
379ac 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
379b0 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
379b4 05c 00 00 C0 FF 
379b8 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
379bc 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
379c0 05f             | 
379c0 05f             |                 ' Fall through to utx_data
379c0 05f             | 
379c0 05f             | '------------------------------------------------------------------------------
379c0 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
379c0 05f             | ' calculated while the data byte is being shifted out. Since data stage
379c0 05f             | ' success/fail is not determined until the status stage of the transaction,
379c0 05f             | ' this routine is only concerned about the current DATAx packet.
379c0 05f             | '------------------------------------------------------------------------------
379c0 05f             | ' On entry:
379c0 05f             | '   PTRA - hub start address of the data to read.
379c0 05f             | '   pkt_cnt - data payload size.
379c0 05f             | ' On exit:
379c0 05f             | '------------------------------------------------------------------------------
379c0 05f             | utx_data
379c0 05f 22 A7 82 FA |                 rqpin   urx, dm
379c4 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
379c8 061 F4 FF 9F CD |         if_c    jmp     #utx_data
379cc 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
379d0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
379d4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
379d8 065 D8 0C B0 CD |         if_c    call    #utx_pre
379dc 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
379e0 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
379e4 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
379e8 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
379ec 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
379f0 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
379f4 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
379f8 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
379fc 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37a00 06f             | .read_byte
37a00 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37a04 070 F0 00 B0 FD |                 call    #utx_byte
37a08 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37a0c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37a10 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37a14 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37a18 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37a1c 076             | .send_crc
37a1c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37a20 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37a24 078 D0 00 B0 FD |                 call    #utx_byte
37a28 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37a2c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37a30 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37a34 07c             | 
37a34 07c             | '------------------------------------------------------------------------------
37a34 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37a34 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37a34 07c             | ' expects that the packet includes at least the CRC word.
37a34 07c             | '
37a34 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37a34 07c             | ' was requested, which makes it difficult to determine where the data stops
37a34 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37a34 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37a34 07c             | ' USB-16 expected residual value of 0xB001.
37a34 07c             | '
37a34 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37a34 07c             | ' so the caller can verify IN success before writing the data to its final
37a34 07c             | ' destination.
37a34 07c             | '------------------------------------------------------------------------------
37a34 07c             | ' On entry:
37a34 07c             | '   pkt_data - max byte count expected to be in the packet.
37a34 07c             | '   newb_flg - signals new byte ready when toggled.
37a34 07c             | ' On exit:
37a34 07c             | '   pkt_cnt - actual number of bytes read.
37a34 07c             | '------------------------------------------------------------------------------
37a34 07c             | urx_data
37a34 07c F7 75 03 F6 |                 mov     htmp2, pb
37a38 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37a3c 07e 00 00 C0 FF 
37a40 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37a44 080 BA EF 03 F6 |                 mov     pb, htmp2
37a48 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37a4c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37a50 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37a54 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37a58 085             | .wait_byte
37a58 085             | ' In-line rx for max speed
37a58 085 22 A7 82 FA |                 rqpin   urx, dm
37a5c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37a60 087 53 A5 02 F5 |                 and     utx, urx
37a64 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37a68 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37a6c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37a70 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37a74 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37a78 08d DC FF 9F FD |                 jmp     #.wait_byte
37a7c 08e             | .get_byte
37a7c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37a80 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37a84 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37a88 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37a8c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37a90 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37a94 094             | .end_crc
37a94 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37a98 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37a9c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37aa0 097 2D 00 64 1D |         if_a    ret
37aa4 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37aa4 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37aa4 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37aa4 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37aa4 098 22 A7 82 FA |                 rqpin   urx, dm
37aa8 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37aac 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37ab0 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37ab0 09b             | .chk_crc
37ab0 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37ab4 09c 58 00 00 FF 
37ab8 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37abc 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37ac0 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37ac4 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37ac8 0a1 34 09 B0 FD |                 call    #poll_waitx
37acc 0a2             | 
37acc 0a2             |                 ' Fall through to utx_handshake
37acc 0a2             | 
37acc 0a2             | '------------------------------------------------------------------------------
37acc 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37acc 0a2             | ' the appropriate IP delay has been inserted.
37acc 0a2             | '------------------------------------------------------------------------------
37acc 0a2             | ' On entry:
37acc 0a2             | '   retval - handshake PID to send.
37acc 0a2             | ' On exit:
37acc 0a2             | '   retval unchanged.
37acc 0a2             | '------------------------------------------------------------------------------
37acc 0a2             | utx_handshake
37acc 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37ad0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37ad4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37ad8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37adc 0a6 5F A5 02 F6 |                 mov     utx, retval
37ae0 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37ae4 0a8             | .idle
37ae4 0a8 22 A7 82 FA |                 rqpin   urx, dm
37ae8 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37aec 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37af0 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37af4 0ac 08 09 90 FD |                 jmp     #poll_waitx
37af8 0ad             | 
37af8 0ad             | '------------------------------------------------------------------------------
37af8 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37af8 0ad             | '------------------------------------------------------------------------------
37af8 0ad             | ' On entry:
37af8 0ad             | '   utx - byte to transmit.
37af8 0ad             | ' On exit:
37af8 0ad             | '------------------------------------------------------------------------------
37af8 0ad             | utx_byte
37af8 0ad 40 46 72 FD |                 testp   dp                      wc
37afc 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37b00 0af 23 03 08 FC |                 akpin   dp
37b04 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37b08 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37b0c 0b2             | 
37b0c 0b2             | '------------------------------------------------------------------------------
37b0c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37b0c 0b2             | '------------------------------------------------------------------------------
37b0c 0b2             | ' On entry:
37b0c 0b2             | ' On exit:
37b0c 0b2             | '   retval - the byte read.
37b0c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37b0c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37b0c 0b2             | '     received.
37b0c 0b2             | '------------------------------------------------------------------------------
37b0c 0b2             | urx_next
37b0c 0b2 22 A7 8A FA |                 rdpin   urx, dm
37b10 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37b14 0b4 53 A5 02 F5 |                 and     utx, urx
37b18 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37b1c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37b20 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37b24 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37b28 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37b2c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37b30 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37b34 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37b38 0bd 2D 00 64 FD |                 ret
37b3c 0be             | 
37b3c 0be             | '------------------------------------------------------------------------------
37b3c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37b3c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37b3c 0be             | ' length, and the PID is not included in the CRC calculation:
37b3c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37b3c 0be             | '  CRC5  ENDP ADDRESS PID
37b3c 0be             | ' %00000_1111_1111111_xxxxxxxx
37b3c 0be             | '------------------------------------------------------------------------------
37b3c 0be             | ' On entry:
37b3c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37b3c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37b3c 0be             | ' On exit:
37b3c 0be             | '   ep_addr_pid - CRC value appended to the packet.
37b3c 0be             | '------------------------------------------------------------------------------
37b3c 0be             | calc_crc5
37b3c 0be FF 03 00 FF 
37b40 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37b44 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37b48 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37b4c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37b50 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37b54 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37b58 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37b5c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37b60 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37b64 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37b68 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37b6c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37b70 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37b74 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37b78 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37b7c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37b80 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37b84 0d0             | 
37b84 0d0             | '------------------------------------------------------------------------------
37b84 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37b84 0d0             | '------------------------------------------------------------------------------
37b84 0d0             | isr1_fsframe
37b84 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37b88 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37b8c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37b90 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37b94 0d4             | .wait
37b94 0d4 40 46 72 FD |                 testp   dp                      wc
37b98 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37b9c 0d6 23 03 08 FC |                 akpin   dp
37ba0 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37ba4 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37ba8 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37bac 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37bb0 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37bb4 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37bb8 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37bbc 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37bc0 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37bc4 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37bc8 0e1 2C FF BF FD |                 call    #utx_byte
37bcc 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37bd0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37bd4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37bd8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37bdc 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37be0 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37be4 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37be8 0e9 5B A5 42 F5 |                 or      utx, icrc
37bec 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37bf0 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37bf4 0ec 20 00 90 FD |                 jmp     #isr1_wait
37bf8 0ed             | isr1_lsframe
37bf8 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37bfc 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37c00 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37c04 0f0             | .wait
37c04 0f0 40 46 72 FD |                 testp   dp                      wc
37c08 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37c0c 0f2 23 03 08 FC |                 akpin   dp
37c10 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37c14 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37c18 0f5             | isr1_wait
37c18 0f5 22 A5 82 FA |                 rqpin   utx, dm
37c1c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37c20 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37c24 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37c28 0f9 03 00 00 FF 
37c2c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37c30 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37c34 0fc F5 FF 3B FB |                 reti1
37c38 0fd             | 
37c38 0fd             | '------------------------------------------------------------------------------
37c38 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37c38 0fd             | ' transaction will complete before the next frame is triggered.
37c38 0fd             | '------------------------------------------------------------------------------
37c38 0fd             | ' On entry:
37c38 0fd             | ' On exit:
37c38 0fd             | '------------------------------------------------------------------------------
37c38 0fd             | wait_txn_ok
37c38 0fd 1A 74 63 FD |                 getct   htmp2
37c3c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37c40 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37c44 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37c48 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37c4c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37c50 103 2D 00 64 FD |                 ret
37c54 104             | 
37c54 104             | '------------------------------------------------------------------------------
37c54 104             | ' A device connection was detected, or a bus reset was requested by the USB
37c54 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37c54 104             | ' and perform a reset sequence prior to device enumeration.
37c54 104             | '------------------------------------------------------------------------------
37c54 104             | dev_reset
37c54 104 22 A7 82 FA |                 rqpin   urx, dm
37c58 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37c5c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37c60 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37c64 108             | reset
37c64 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37c68 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37c6c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37c70 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37c74 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37c78 10d 1A 92 62 FD |                 getct   iframe_ct_base
37c7c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37c80 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37c84 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37c88 111 24 70 07 F1 |                 add     htmp, #36
37c8c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37c90 113             | .framewait
37c90 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37c94 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37c98 115 2D 00 64 FD |                 ret
37c9c 116             | 
37c9c 116             | '------------------------------------------------------------------------------
37c9c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37c9c 116             | '------------------------------------------------------------------------------
37c9c 116             | ' On entry:
37c9c 116             | '   PTRA - source address.
37c9c 116             | '   PB - destination address.
37c9c 116             | '   hr0 - length of copy, in bytes.
37c9c 116             | ' On exit:
37c9c 116             | '------------------------------------------------------------------------------
37c9c 116             | hmemcpy
37c9c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37ca0 117 F7 71 43 FC |                 wrbyte  htmp, pb
37ca4 118 01 EE 07 F1 |                 add     pb, #1
37ca8 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37cac 11a             | 
37cac 11a             | '------------------------------------------------------------------------------
37cac 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37cac 11a             | ' loop until the errant device is disconnected.
37cac 11a             | '------------------------------------------------------------------------------
37cac 11a             | ' On entry:
37cac 11a             | ' On exit:
37cac 11a             | '------------------------------------------------------------------------------
37cac 11a             | host_error
37cac 11a             |           if ERROR_LED >= 0
37cac 11a             |           end
37cac 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37cb0 11b             | 
37cb0 11b             | '------------------------------------------------------------------------------
37cb0 11b             | ' Get HID descriptor buffer for current port
37cb0 11b             | '------------------------------------------------------------------------------
37cb0 11b             | ' On entry:
37cb0 11b             | ' On exit:
37cb0 11b             | '   PB - HID descriptor buffer pointer
37cb0 11b             | '------------------------------------------------------------------------------
37cb0 11b             | get_hid_descr_buffer
37cb0 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37cb4 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37cb8 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37cbc 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37cc0 11f             | 
37cc0 11f             | 
37cc0 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37cc4 120             | 
37cc4 120             | ' USB commands and error codes
37cc4 120 00 00 00 00 | cmd_data        long    0
37cc8 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37ccc 122             | 
37ccc 122             | ' Parameters block assigned at cog startup
37ccc 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37cd0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37cd4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37cd8 125             | if ACTIVITY_LED >= 0
37cd8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37cd8 125             | end
37cd8 125             | if ERROR_LED >= 0
37cd8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37cd8 125             | end
37cd8 125 00 00 00 00 | hid_descr_p     long    0
37cdc 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37cdc 126             | 'hkbd_report_p   long    0
37cdc 126 00 00 00 00 | hub_descr_p     long    0
37ce0 127 00 00 00 00 | urx_buff_p      long    0
37ce4 128 00 00 00 00 | dev_desc_buff_p long    0
37ce8 129 00 00 00 00 | con_desc_buff_p long    0
37cec 12a 00 00 00 00 | cache_start_p   long    0
37cf0 12b 00 00 00 00 | cache_end_p     long    0
37cf4 12c             | if EMUPAD_MAX_PLAYER > 0
37cf4 12c             | emupad_out_ptr  long    0
37cf4 12c             | end
37cf4 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37cf8 12d             | 
37cf8 12d             | hdev_init_start
37cf8 12d             | hdev_port       res     1
37cf8 12d             | hdev_port       res     1
37cf8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37cf8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37cf8 12d             | kbm_next_datax  res     1
37cf8 12d             | kbm_next_datax  res     1
37cf8 12d             | hub_intf_num    res     1
37cf8 12d             | hub_intf_num    res     1
37cf8 12d             | hub_next_datax  res     1
37cf8 12d             | hub_next_datax  res     1
37cf8 12d             | hub_status_chg  res     1
37cf8 12d             | hub_status_chg  res     1
37cf8 12d             | hub_port_status res     1
37cf8 12d             | hub_port_status res     1
37cf8 12d             | if HAVE_MOUSE
37cf8 12d             | ms_intf_num     res     1
37cf8 12d             | ms_intf_num     res     1
37cf8 12d             | ms_in_max_pkt   res     1
37cf8 12d             | ms_in_max_pkt   res     1
37cf8 12d             | end
37cf8 12d             | kb_intf_num     res     1
37cf8 12d             | kb_intf_num     res     1
37cf8 12d             | kb_interval     res     1
37cf8 12d             | kb_interval     res     1
37cf8 12d             | kb_in_max_pkt   res     1
37cf8 12d             | kb_in_max_pkt   res     1
37cf8 12d             | kb_max_index    res     1
37cf8 12d             | kb_max_index    res     1
37cf8 12d             | kb_led_states   res     1
37cf8 12d             | kb_led_states   res     1
37cf8 12d             | gp_intf_num     res     1
37cf8 12d             | gp_intf_num     res     1
37cf8 12d             | gp_interval     res     1
37cf8 12d             | gp_interval     res     1
37cf8 12d             | gp_max_index    res     1
37cf8 12d             | gp_max_index    res     1
37cf8 12d             | gp_descr_len    res     1+MAX_DEVICES
37cf8 12d             | gp_descr_len    res     1+MAX_DEVICES
37cf8 12d             | hdev_init_end
37cf8 12d             | 
37cf8 12d             | ' Initialized at cog startup:
37cf8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37cf8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37cf8 12d             | iframe_ct_new   res     1
37cf8 12d             | iframe_ct_new   res     1
37cf8 12d             | iframe_ct_base  res     1
37cf8 12d             | iframe_ct_base  res     1
37cf8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37cf8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37cf8 12d             | 
37cf8 12d             | ' This register block is reset to zero when a USB device connects
37cf8 12d             | hreg_init_start
37cf8 12d             | hstatus         res     1         ' Host status flags
37cf8 12d             | hstatus         res     1         ' Host status flags
37cf8 12d             | hctwait         res     1         ' Poll-based wait clocks
37cf8 12d             | hctwait         res     1         ' Poll-based wait clocks
37cf8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37cf8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37cf8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37cf8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37cf8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37cf8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37cf8 12d             | xfer_retry      res     1         ' Control transfer retry count
37cf8 12d             | xfer_retry      res     1         ' Control transfer retry count
37cf8 12d             | retry           res     1         ' Transaction retry count
37cf8 12d             | retry           res     1         ' Transaction retry count
37cf8 12d             | utx             res     1         ' Byte to transmit on USB
37cf8 12d             | utx             res     1         ' Byte to transmit on USB
37cf8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37cf8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37cf8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37cf8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37cf8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37cf8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37cf8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37cf8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37cf8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37cf8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37cf8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37cf8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37cf8 12d             | frame           res     1         ' USB 1ms frame counter value
37cf8 12d             | frame           res     1         ' USB 1ms frame counter value
37cf8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37cf8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37cf8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37cf8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37cf8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37cf8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37cf8 12d             | crc             res     1         ' Used for CRC16 calculation
37cf8 12d             | crc             res     1         ' Used for CRC16 calculation
37cf8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37cf8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37cf8 12d             | retval          res     1         ' Global success/fail return parameter
37cf8 12d             | retval          res     1         ' Global success/fail return parameter
37cf8 12d             | context_retval  res     1         ' Operation contextual return parameter
37cf8 12d             | context_retval  res     1         ' Operation contextual return parameter
37cf8 12d             | ' Device stuff
37cf8 12d             | hdev_id         res     1+MAX_DEVICES
37cf8 12d             | hdev_id         res     1+MAX_DEVICES
37cf8 12d             | hdev_bcd        res     1
37cf8 12d             | hdev_bcd        res     1
37cf8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37cf8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37cf8 12d             | ' Keyboard/mouse stuff
37cf8 12d             | hctrl_ep_addr   res     1
37cf8 12d             | hctrl_ep_addr   res     1
37cf8 12d             | hctrl_max_pkt   res     1
37cf8 12d             | hctrl_max_pkt   res     1
37cf8 12d             | hconfig_base    res     1
37cf8 12d             | hconfig_base    res     1
37cf8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37cf8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37cf8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37cf8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37cf8 12d             | hdev_class      res     1
37cf8 12d             | hdev_class      res     1
37cf8 12d             | hdev_subclass   res     1
37cf8 12d             | hdev_subclass   res     1
37cf8 12d             | hdev_protocol   res     1
37cf8 12d             | hdev_protocol   res     1
37cf8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37cf8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37cf8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37cf8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37cf8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37cf8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37cf8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37cf8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37cf8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37cf8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37cf8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37cf8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37cf8 12d             | if HAVE_MOUSE
37cf8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37cf8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37cf8 12d             | end
37cf8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37cf8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37cf8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37cf8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37cf8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37cf8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37cf8 12d             | hdev_out_addr   res     1
37cf8 12d             | hdev_out_addr   res     1
37cf8 12d             | 
37cf8 12d             | if EMUPAD_MAX_PLAYER > 0
37cf8 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37cf8 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37cf8 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37cf8 12d             | end
37cf8 12d             | 
37cf8 12d             | hreg_init_end
37cf8 12d             | 
37cf8 12d             | hidr_start
37cf8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37cf8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37cf8 12d             | hidr_flags      res     1
37cf8 12d             | hidr_flags      res     1
37cf8 12d             | hidr_axis       res     3
37cf8 12d             | hidr_axis       res     3
37cf8 12d             | hidr_buttons    res     1
37cf8 12d             | hidr_buttons    res     1
37cf8 12d             | hidr_hats       res     1
37cf8 12d             | hidr_hats       res     1
37cf8 12d             | '' Above are actually useful values, 6 longs
37cf8 12d             | hidr_id         res     1
37cf8 12d             | hidr_id         res     1
37cf8 12d             | hidr_state      res     1
37cf8 12d             | hidr_state      res     1
37cf8 12d             | hidr_size       res     1
37cf8 12d             | hidr_size       res     1
37cf8 12d             | hidr_count      res     1
37cf8 12d             | hidr_count      res     1
37cf8 12d             | hidr_offset     res     1
37cf8 12d             | hidr_offset     res     1
37cf8 12d             | hidr_usage_idx  res     1
37cf8 12d             | hidr_usage_idx  res     1
37cf8 12d             | hidr_lminmax    res     1
37cf8 12d             | hidr_lminmax    res     1
37cf8 12d             | hidr_pminmax    res     1
37cf8 12d             | hidr_pminmax    res     1
37cf8 12d             | hidr_type       res     1
37cf8 12d             | hidr_type       res     1
37cf8 12d             | hidr_end
37cf8 12d             | 
37cf8 12d             | ' Variables dependent on the system freqency
37cf8 12d             | _var_64_lower_  res     1
37cf8 12d             | _var_64_lower_  res     1
37cf8 12d             | _var_64_upper_  res     1
37cf8 12d             | _var_64_upper_  res     1
37cf8 12d             | _12Mbps_        res     1
37cf8 12d             | _12Mbps_        res     1
37cf8 12d             | _1_5Mbps_       res     1
37cf8 12d             | _1_5Mbps_       res     1
37cf8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37cf8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37cf8 12d             | _1us_           res     1         ' 1us
37cf8 12d             | _1us_           res     1         ' 1us
37cf8 12d             | _10us_          res     1         ' 10us
37cf8 12d             | _10us_          res     1         ' 10us
37cf8 12d             | _33us_          res     1         ' 33us
37cf8 12d             | _33us_          res     1         ' 33us
37cf8 12d             | _txn_err_       res     1         ' 250us
37cf8 12d             | _txn_err_       res     1         ' 250us
37cf8 12d             | _500us_         res     1         ' 500us
37cf8 12d             | _500us_         res     1         ' 500us
37cf8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37cf8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37cf8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37cf8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37cf8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37cf8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37cf8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37cf8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37cf8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37cf8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37cf8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37cf8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37cf8 12d             | _preamble_wait_ res     1
37cf8 12d             | _preamble_wait_ res     1
37cf8 12d             | _1ms_           res     1         ' 1ms
37cf8 12d             | _1ms_           res     1         ' 1ms
37cf8 12d             | _2ms_           res     1         ' 2ms
37cf8 12d             | _2ms_           res     1         ' 2ms
37cf8 12d             | _suspend_wait_  res     1         ' 3ms
37cf8 12d             | _suspend_wait_  res     1         ' 3ms
37cf8 12d             | _4ms_           res     1         ' 4ms
37cf8 12d             | _4ms_           res     1         ' 4ms
37cf8 12d             | _xfer_wait_     res     1         ' 5ms
37cf8 12d             | _xfer_wait_     res     1         ' 5ms
37cf8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37cf8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37cf8 12d             | _reset_hold_    res     1         ' 15ms
37cf8 12d             | _reset_hold_    res     1         ' 15ms
37cf8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37cf8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37cf8 12d             | _21ms_          res     1         ' 21ms
37cf8 12d             | _21ms_          res     1         ' 21ms
37cf8 12d             | _100ms_         res     1         ' 100ms
37cf8 12d             | _100ms_         res     1         ' 100ms
37cf8 12d             | _500ms_         res     1         ' 500ms
37cf8 12d             | _500ms_         res     1         ' 500ms
37cf8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37cf8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37cf8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37cf8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37cf8 12d             | '------------------------------------------------------------------------------
37cf8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37cf8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37cf8 12d             | _usb_d_ls_nco_  res     1
37cf8 12d             | _usb_d_ls_nco_  res     1
37cf8 12d             | _usb_h_fs_nco_  res     1
37cf8 12d             | _usb_h_fs_nco_  res     1
37cf8 12d             | _usb_d_fs_nco_  res     1
37cf8 12d             | _usb_d_fs_nco_  res     1
37cf8 12d             | '------------------------------------------------------------------------------
37cf8 12d             | ' Scratch registers
37cf8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37cf8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37cf8 12d             | htmp1           res     1
37cf8 12d             | htmp1           res     1
37cf8 12d             | htmp2           res     1
37cf8 12d             | htmp2           res     1
37cf8 12d             | htmp3           res     1
37cf8 12d             | htmp3           res     1
37cf8 12d             | hrep            res     1         ' Repeat count
37cf8 12d             | hrep            res     1         ' Repeat count
37cf8 12d             | hsave0          res     1         ' Subroutine parameter saves
37cf8 12d             | hsave0          res     1         ' Subroutine parameter saves
37cf8 12d             | hsave1          res     1
37cf8 12d             | hsave1          res     1
37cf8 12d             | hsave2          res     1
37cf8 12d             | hsave2          res     1
37cf8 12d             | isrtmp1         res     1
37cf8 12d             | isrtmp1         res     1
37cf8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37cf8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37cf8 12d             | hr0             res     1         ' Multi-purpose registers
37cf8 12d             | hr0             res     1         ' Multi-purpose registers
37cf8 12d             | hr1             res     1
37cf8 12d             | hr1             res     1
37cf8 12d             | hr2             res     1
37cf8 12d             | hr2             res     1
37cf8 12d             | hr3             res     1
37cf8 12d             | hr3             res     1
37cf8 12d             | hpar1           res     1         ' Routine entry/exit parameters
37cf8 12d             | hpar1           res     1         ' Routine entry/exit parameters
37cf8 12d             | hpar2           res     1
37cf8 12d             | hpar2           res     1
37cf8 12d             | hpar3           res     1
37cf8 12d             | hpar3           res     1
37cf8 12d             | hct2            res     1         ' Function response bus turn-around timer
37cf8 12d             | hct2            res     1         ' Function response bus turn-around timer
37cf8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37cf8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37cf8 12d             | mod_cnt         res     1         ' Used in idle loops
37cf8 12d             | mod_cnt         res     1         ' Used in idle loops
37cf8 12d             |                 fit     $1F0
37cf8 12d             |                 org     $200
37cf8 200             | hlut_start
37cf8 200             | 
37cf8 200             | '------------------------------------------------------------------------------
37cf8 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37cf8 200             | ' settings to startup defaults.
37cf8 200             | '------------------------------------------------------------------------------
37cf8 200             | ' On entry:
37cf8 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37cf8 200             | '------------------------------------------------------------------------------
37cf8 200             | set_speed_full
37cf8 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37cfc 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37d00 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37d04 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37d08 204             | '                ret                             wcz     ' Restore caller flags on exit
37d08 204             | 
37d08 204             | '------------------------------------------------------------------------------
37d08 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37d08 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37d08 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37d08 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37d08 204             | ' putting the smart pins into reset.
37d08 204             | '------------------------------------------------------------------------------
37d08 204             | ' On entry:
37d08 204             | ' On exit: CZ flags restored to caller states
37d08 204             | '------------------------------------------------------------------------------
37d08 204             | set_speed_low
37d08 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37d0c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37d10 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37d14 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37d18 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37d1c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37d20 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37d24 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37d28 20c             | 
37d28 20c             | '------------------------------------------------------------------------------
37d28 20c             | ' Perform configuration stuff required when a device intitially connects.
37d28 20c             | '------------------------------------------------------------------------------
37d28 20c             | ' On entry:
37d28 20c             | ' On exit:
37d28 20c             | '------------------------------------------------------------------------------
37d28 20c             | on_connect
37d28 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37d2c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37d30 20e             | .retry
37d30 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37d34 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
37d38 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
37d3c 211 00 08 00 FF 
37d40 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37d44 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
37d48 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37d4c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37d50 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37d54 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37d58 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37d5c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
37d60 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
37d64 21b 4C 03 B0 FD |                 call    #poll_waitx
37d68 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
37d6c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
37d70 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
37d74 21f B8 FF 9F FD |                 jmp     #.retry
37d78 220             | .get_dev_desc
37d78 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37d7c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37d80 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37d84 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
37d88 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
37d8c 225 88 FB BF FD |                 call    #reset
37d90 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
37d94 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37d98 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
37d9c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
37da0 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37da4 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37da8 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
37dac 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37db0 22e 04 00 00 FF 
37db4 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
37db8 230 34 FA BF FD |                 call    #calc_crc5
37dbc 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
37dc0 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37dc4 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
37dc8 234 F7 AD C2 FA |                 rdbyte  total_data, pb
37dcc 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37dd0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37dd4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37dd8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37ddc 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37de0 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
37de4 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
37de8 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
37dec 23d C4 02 B0 FD |                 call    #poll_waitx
37df0 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
37df4 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37df8 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
37dfc 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
37e00 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37e04 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e08 244 2D 00 64 5D |         if_nz   ret
37e0c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
37e10 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37e14 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37e18 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
37e1c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
37e20 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37e24 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37e28 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
37e2c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
37e30 24e 2C FB 9F CD |         if_b    jmp     #host_error
37e34 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
37e38 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
37e3c 251 2D EC 63 FD |                 call    pa
37e40 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
37e44 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
37e48 254 2C EC 63 FD |                 jmp     pa
37e4c 255             | 
37e4c 255             | '------------------------------------------------------------------------------
37e4c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
37e4c 255             | ' Status reporting is always in the function-to-host direction.
37e4c 255             | '------------------------------------------------------------------------------
37e4c 255             | ' On entry:
37e4c 255             | '   PTRA - start address of the SETUP data in hub.
37e4c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
37e4c 255             | '     stage.
37e4c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
37e4c 255             | ' On exit:
37e4c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
37e4c 255             | '     contains the count of data stage bytes actually received, which must
37e4c 255             | '     always be <= the count requested.
37e4c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37e4c 255             | '     more specific USB operation error code.
37e4c 255             | '------------------------------------------------------------------------------
37e4c 255             | control_read
37e4c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37e50 256 F8 8F 03 F6 |                 mov     hpar2, ptra
37e54 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
37e58 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37e5c 259             | .xfer_start
37e5c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37e60 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37e64 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e68 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
37e6c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
37e70 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37e74 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37e78 260 61 00 00 FF 
37e7c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
37e80 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37e84 263             | .data
37e84 263 56 B1 02 F6 |                 mov     pkt_data, total_data
37e88 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
37e8c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37e90 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
37e94 267             | .nak_retry
37e94 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
37e98 268             | .in_retry
37e98 268 BC F6 BF FD |                 call    #txn_in
37e9c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
37ea0 26a 28 00 90 AD |         if_z    jmp     #.commit
37ea4 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37ea8 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37eac 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37eb0 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37eb4 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
37eb8 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37ebc 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37ec0 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37ec4 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
37ec8 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
37ecc 275             | .commit
37ecc 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
37ed0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
37ed4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
37ed8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
37edc 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
37ee0 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
37ee4 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
37ee8 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
37eec 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
37ef0 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
37ef4 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
37ef8 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
37efc 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
37f00 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
37f04 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
37f08 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
37f0c 285             | .pre_status
37f0c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
37f10 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
37f14 287 00 B0 06 F6 |                 mov     pkt_data, #0
37f18 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
37f1c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
37f20 28a 61 00 00 FF 
37f24 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
37f28 28c             | .out_retry
37f28 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
37f2c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f30 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
37f34 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37f38 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37f3c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37f40 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37f44 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37f48 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37f4c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
37f50 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
37f54 297             | ' I've encountered transfer STALL, even though the data looks correct, and
37f54 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
37f54 297             | ' ControlRead() transfer gets things unstuck most of the time...
37f54 297             | .xfer_retry
37f54 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
37f58 298 58 01 B0 FD |                 call    #poll_waitx
37f5c 299 8C F9 BF FD |                 call    #wait_txn_ok
37f60 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
37f64 29b C7 F1 03 F6 |                 mov     ptra, hpar2
37f68 29c C8 EF 03 F6 |                 mov     pb, hpar3
37f6c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
37f70 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
37f74 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
37f78 2a0             | 
37f78 2a0             | '------------------------------------------------------------------------------
37f78 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
37f78 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
37f78 2a0             | ' the SETUP data struct is filled with the required values.
37f78 2a0             | '------------------------------------------------------------------------------
37f78 2a0             | ' On entry:
37f78 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
37f78 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
37f78 2a0             | '     stage.
37f78 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
37f78 2a0             | ' On exit:
37f78 2a0             | '   retval - used to convey the success/failure of each stage.
37f78 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37f78 2a0             | '     more specific USB operation error code.
37f78 2a0             | '------------------------------------------------------------------------------
37f78 2a0             | control_write
37f78 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
37f7c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
37f80 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
37f84 2a3             | 
37f84 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37f88 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
37f8c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
37f90 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37f94 2a7             | .xfer_start
37f94 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
37f98 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37f9c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37fa0 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37fa4 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
37fa8 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
37fac 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37fb0 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37fb4 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
37fb8 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37fbc 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
37fc0 2b2             | .data
37fc0 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
37fc4 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
37fc8 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37fcc 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
37fd0 2b6             | .out_retry
37fd0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
37fd4 2b7 88 F6 BF FD |                 call    #txn_out
37fd8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37fdc 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
37fe0 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37fe4 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
37fe8 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
37fec 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
37ff0 2be             | .commit
37ff0 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
37ff4 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
37ff8 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
37ffc 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38000 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38004 2c3             | pre_status_in
38004 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
38008 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3800c 2c5             | .status_retry
3800c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
38010 2c6 44 F5 BF FD |                 call    #txn_in
38014 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
38018 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3801c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
38020 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
38024 2cb 2D 00 64 AD |         if_z    ret
38028 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3802c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38030 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
38034 2cf             | '               ret                                     ' Caller must handle transfer retirement
38034 2cf             | 
38034 2cf             | '------------------------------------------------------------------------------
38034 2cf             | ' Execute an IN interrupt transaction.
38034 2cf             | '------------------------------------------------------------------------------
38034 2cf             | ' On entry:
38034 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
38034 2cf             | '   hpar2 - Address of the IN data buffer
38034 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
38034 2cf             | ' On exit:
38034 2cf             | '   retval - the result of the operation.
38034 2cf             | '   hpar3 - the count of IN data bytes actually received.
38034 2cf             | '------------------------------------------------------------------------------
38034 2cf             | do_int_in
38034 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38038 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3803c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
38040 2d2             | 
38040 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
38044 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
38048 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3804c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
38050 2d6             | .retry
38050 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
38054 2d7 00 F5 BF FD |                 call    #txn_in
38058 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3805c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
38060 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
38064 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
38068 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3806c 2dd 54 00 B0 FD |                 call    #retry_wait
38070 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38074 2df 18 00 90 AD |         if_z    jmp     #.post_ret
38078 2e0 D4 FF 9F FD |                 jmp     #.retry
3807c 2e1             | .commit
3807c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
38080 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
38084 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
38088 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3808c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
38090 2e6             | .post_ret
38090 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
38094 2e7             | 
38094 2e7             | 
38094 2e7             | '------------------------------------------------------------------------------
38094 2e7             | ' Resets the downstream hub port to FS
38094 2e7             | '------------------------------------------------------------------------------
38094 2e7             | dwnstream_reset
38094 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38098 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3809c 2e9             | 
3809c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
380a0 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
380a4 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
380a8 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
380ac 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
380b0 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
380b4 2ef             | 
380b4 2ef             | '------------------------------------------------------------------------------
380b4 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
380b4 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
380b4 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
380b4 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
380b4 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
380b4 2ef             | '------------------------------------------------------------------------------
380b4 2ef             | ' On entry:
380b4 2ef             | '   hctwait - wait interval in sysclocks.
380b4 2ef             | ' On exit:
380b4 2ef             | '------------------------------------------------------------------------------
380b4 2ef             | poll_waitx
380b4 2ef 1A 92 63 FD |                 getct   hct2
380b8 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
380bc 2f1             | .wait
380bc 2f1 FF 25 CC FB |                 jnct2   #.wait
380c0 2f2 2D 00 64 FD |                 ret
380c4 2f3             | 
380c4 2f3             | '------------------------------------------------------------------------------
380c4 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
380c4 2f3             | '------------------------------------------------------------------------------
380c4 2f3             | ' On entry:
380c4 2f3             | '   retval - transaction response PID or error code.
380c4 2f3             | ' On exit:
380c4 2f3             | '------------------------------------------------------------------------------
380c4 2f3             | retry_wait
380c4 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
380c8 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
380cc 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
380d0 2f6 14 00 90 AD |         if_z    jmp     #.nak
380d4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
380d8 2f8 D8 FF BF FD |                 call    #poll_waitx
380dc 2f9             | .dec
380dc 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
380e0 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
380e4 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
380e8 2fc             | .nak
380e8 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
380ec 2fd C4 FF BF FD |                 call    #poll_waitx
380f0 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
380f4 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
380f8 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
380fc 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
38100 302 2D 00 64 FD |                 ret
38104 303             | 
38104 303             | host_reset
38104 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
38108 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3810c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3810c 305 BD 01 05 FF 
38110 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
38114 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
38118 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3811c 309             | ' Check to see if the system clock has been changed.
3811c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38120 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
38124 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
38128 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3812c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38130 30e 40 46 62 FD |                 dirl    dp
38134 30f             | 
38134 30f 28 02 64 FD |                 setq    #1
38138 310 80 00 80 FF 
3813c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
38140 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
38144 313             | .enable
38144 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38148 314 41 46 62 FD |                 dirh    dp
3814c 315 1F 36 63 FD |                 waitx   _1us_
38150 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38154 317             | 
38154 317             |                 ' Handle Port protection enable and startup delay
38154 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
38158 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3815c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
38160 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
38164 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
38168 31c             | 
38168 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3816c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
38170 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
38174 31f 00 00 04 F6 |                 mov     0-0, #0
38178 320             | .regloop
38178 320             | 
38178 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
38178 320             | 
38178 320             | discon_entry
38178 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3817c 321             | 
3817c 321             |               
3817c 321             |         if HAVE_HIDPAD
3817c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
38180 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
38184 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
38188 324 F7 01 68 FC |                 wrlong  #0,pb
3818c 325             |         end
3818c 325             |         if EMUPAD_MAX_PLAYER > 0
3818c 325             |         end
3818c 325             | 
3818c 325             |                 ' Fall through to disconnected loop
3818c 325             | 
3818c 325             | '-----------------------------------------------------------------------------------------------------------------
3818c 325             | ' Device connect handling (Section 7.1.7.3).
3818c 325             | '-----------------------------------------------------------------------------------------------------------------
3818c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3818c 325             | ' device to connect (Section 7.1.7.3).
3818c 325             | '-----------------------------------------------------------------------------------------------------------------
3818c 325             | disconnected
3818c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
38190 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
38194 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
38198 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3819c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
381a0 32a             |         if ACTIVITY_LED >= 0
381a0 32a             |         end
381a0 32a 22 A7 82 FA |                 rqpin   urx, dm
381a4 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
381a8 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
381ac 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
381b0 32e             | .se1_test
381b0 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
381b4 32f FC FE BF FD |                 call    #poll_waitx
381b8 330 22 A7 82 FA |                 rqpin   urx, dm
381bc 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
381c0 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
381c4 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
381c8 334             | .se1            'SE1 is a fatal error condition
381c8 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
381cc 335 E4 FE BF FD |                 call    #poll_waitx
381d0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
381d4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
381d8 338             | .connect_test                                           ' Test lines until stable J/K state seen
381d8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
381dc 339 22 A7 82 FA |                 rqpin   urx, dm
381e0 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
381e4 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
381e8 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
381ec 33d             | connected
381ec 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
381f0 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
381f4 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
381f8 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
381fc 341             | .set_pulse
381fc 341 1A 64 63 FD |                 getct   _pulse_time_
38200 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38204 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38204 343             | ' of 1ms and make a correction, if necessary.
38204 343             | '                mov     htmp, _1ms_
38204 343             | '                subs    htmp, iframe_delta
38204 343             | '                adds    _frame1ms_clks_, htmp
38204 343             | '                debug(udec(_frame1ms_clks_))
38204 343             | 
38204 343             |                 ' Fall through to idle/processing loop
38204 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
38208 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3820c 345             | 
3820c 345             | hidle
3820c 345 22 A7 82 FA |                 rqpin   urx, dm
38210 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38214 347 98 00 90 CD |         if_c    jmp     #.se0_test
38218 348 24 06 70 FD |                 pollct3                         wc
3821c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
38220 34a 1A 94 63 FD |                 getct   hct3
38224 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
38228 34c             | 
38228 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3822c 34d 00 70 E3 F8 |                 getbyte htmp
38230 34e             | 
38230 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
38234 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
38238 350 40 00 90 AD |         if_z    jmp     #.poll
3823c 351             | 
3823c 351             |         if _HAVE_GAMEPAD
3823c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
38240 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
38244 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
38248 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3824c 355 2C 00 90 AD |         if_z    jmp     #.poll
38250 356             |         end
38250 356             | 
38250 356             |         if HAVE_MOUSE
38250 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
38254 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
38258 358 20 00 90 AD |         if_z    jmp     #.poll
3825c 359             |         end
3825c 359             | 
3825c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
38260 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
38264 35b 14 00 90 AD |         if_z    jmp     #.poll
38268 35c             | 
38268 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3826c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
38270 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
38274 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
38278 360             |         if HAVE_MOUSE
38278 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3827c 361             |         else
3827c 361             |         end
3827c 361             | 
3827c 361             | .poll
3827c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
38280 362 2D EC 63 FD |                 call    pa
38284 363             | .skip_poll
38284 363             | 
38284 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
38288 364             | 
38288 364             | .nopoll
38288 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3828c 365 44 00 90 AD |         if_z    jmp     #hsuspend
38290 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
38294 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
38298 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3829c 369 1A 84 63 FD |                 getct   hr0
382a0 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
382a4 36b             |         if ACTIVITY_LED >= 0
382a4 36b             |         end
382a4 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
382a8 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
382ac 36d 5C FF 9F FD |                 jmp     #hidle
382b0 36e             | ' Check for extended SE0 state on the bus
382b0 36e             | .se0_test
382b0 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
382b4 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
382b8 370 22 A7 82 FA |                 rqpin   urx, dm
382bc 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
382c0 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
382c4 373 24 F6 BF FD |                 call    #wait_txn_ok
382c8 374 00 00 80 FF 
382cc 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
382d0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
382d0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
382d4 377             | 
382d4 377             | hsuspend
382d4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
382d8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
382dc 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
382e0 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
382e4 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
382e8 37c 00 96 07 F6 |                 mov     mod_cnt, #0
382ec 37d             | 
382ec 37d             |                 ' Fall through to resume wait loop
382ec 37d             | 
382ec 37d             | hwait_resume
382ec 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
382f0 37e 02 86 47 F0 |                 shr     hr1, #2
382f4 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
382f8 380             |         if ACTIVITY_LED >= 0
382f8 380             |         end
382f8 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
382fc 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
38300 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38304 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38308 384 18 00 90 AD |         if_z    jmp     #.resume
3830c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
38310 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
38314 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
38318 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3831c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
38320 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
38324 38b             | .resume
38324 38b 22 05 28 FC |                 wypin   #OUT_K, dm
38328 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3832c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
38330 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
38334 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
38338 390 1F 70 63 FD |                 waitx   htmp
3833c 391 22 07 28 FC |                 wypin   #OUT_J, dm
38340 392 01 70 47 F0 |                 shr     htmp, #1
38344 393 1F 70 63 FD |                 waitx   htmp
38348 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3834c 395 1A 92 62 FD |                 getct   iframe_ct_base
38350 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38354 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38358 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3835c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
38360 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
38364 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
38368 39c             | 
38368 39c             | '------------------------------------------------------------------------------
38368 39c             | ' Send preamble to enable low-speed HUB ports
38368 39c             | '------------------------------------------------------------------------------
38368 39c             | ' On entry:
38368 39c             | ' On exit:
38368 39c             | '   USB baud rate set to low-speed
38368 39c             | '------------------------------------------------------------------------------
38368 39c             | utx_pre
38368 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3836c 39d 40 46 62 FD |                 dirl    dp
38370 39e 28 02 64 FD |                 setq    #1
38374 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
38378 3a0 58 44 62 FD |                 drvl    dm
3837c 3a1 59 46 62 FD |                 drvh    dp
38380 3a2             | 
38380 3a2 1E 00 00 FF 
38384 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
38388 3a4             | 
38388 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3838c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
38390 3a6 28 02 64 3D |         if_nc   setq    #1
38394 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
38398 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3839c 3a9             | .l1
3839c 3a9             | 
3839c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
383a0 3aa 40 46 62 FD |                 dirl    dp
383a4 3ab 28 02 64 FD |                 setq    #1
383a8 3ac 80 00 80 FF 
383ac 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
383b0 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
383b4 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
383b8 3b0 41 46 62 FD |                 dirh    dp
383bc 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
383c0 3b2             | 
383c0 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
383c4 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
383c8 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
383cc 3b5             | 
383cc 3b5             | hlut_end
383cc 3b5             |                 fit     $400
383cc 3b5             |                 orgh
383cc                 | if OVERLAP_MEMORY
383cc                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
383cc                 | end
383cc                 | '------------------------------------------------------------------------------
383cc                 | ' Routines called from cog space.
383cc                 | '------------------------------------------------------------------------------
383cc                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
383cc                 | '------------------------------------------------------------------------------
383cc                 | 
383cc                 | '------------------------------------------------------------------------------
383cc                 | ' USB host cog initialization.
383cc                 | '------------------------------------------------------------------------------
383cc                 | usb_host_init
383cc                 |                 ' Initialize buffer pointers
383cc                 |         if OVERLAP_MEMORY
383cc                 |         else
383cc     40 15 B0 FE |                 loc     pb, #hid_descr
383d0                 |         end
383d0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
383d4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
383d4                 |                 {
383d4                 |                 }
383d4                 |         
383d4                 |                 {
383d4                 |                 }
383d4                 |                 'loc     pb,#hkbd_report
383d4                 |                 'mov     hkbd_report_p,pb
383d4                 | 
383d4     08 1D B0 FE |                 loc     pb, #hub_descr
383d8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
383dc     1D 1D B0 FE |                 loc     pb, #urx_buff
383e0     F7 4F 02 F6 |                 mov     urx_buff_p, pb
383e4     95 1D B0 FE |                 loc     pb, #dev_desc_buff
383e8     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
383ec     9F 1D B0 FE |                 loc     pb, #con_desc_buff
383f0     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
383f4     18 15 B0 FE |                 loc     pb, #usb_cache_start
383f8     F7 55 02 F6 |                 mov     cache_start_p, pb
383fc     E9 1C B0 FE |                 loc     pb, #usb_cache_end
38400     F7 57 02 F6 |                 mov     cache_end_p, pb
38404                 | 
38404                 |         if ERROR_LED >= 0
38404                 |         end
38404                 | 
38404                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38404                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38404                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38404                 | ' Configure and enable the Serial Host USB port.
38404     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
38408                 | 
38408                 | '------------------------------------------------------------------------------
38408                 | ' Timing calculations happen before any interrupt(s) are enabled.
38408                 | '------------------------------------------------------------------------------
38408                 | ' On entry:
38408                 | '   htmp - current CLKFREQ value.
38408                 | '------------------------------------------------------------------------------
38408                 | hinit_usb_timings
38408                 | '                getct   htmp2
38408     B8 59 02 F6 |                 mov     save_sysclk, htmp
3840c     8D 5B 80 FF 
38410     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
38414     18 30 63 FD |                 getqx   _12Mbps_
38418     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3841c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
38420     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
38424     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
38428     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3842c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
38430     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
38434     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
38438     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3843c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
38440     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
38444     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
38448     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3844c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
38450     80 00 00 FF 
38454     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
38458     18 2C 63 FD |                 getqx   _var_64_lower_
3845c     19 2E 63 FD |                 getqy   _var_64_upper_
38460     28 2C 63 FD |                 setq    _var_64_lower_
38464     65 CD 1D FF 
38468     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3846c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
38470     01 00 00 FF 
38474     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
38478     18 2C 63 FD |                 getqx   _var_64_lower_
3847c     19 2E 63 FD |                 getqy   _var_64_upper_
38480     28 2C 63 FD |                 setq    _var_64_lower_
38484     A1 07 00 FF 
38488     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3848c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
38490     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
38494     09 36 57 F0 |                 shr     _1us_, #9               wc
38498     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3849c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
384a0     18 38 63 FD |                 getqx   _10us_
384a4     09 38 57 F0 |                 shr     _10us_, #9              wc
384a8     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
384ac     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
384b0     18 3A 63 FD |                 getqx   _33us_
384b4     09 3A 57 F0 |                 shr     _33us_, #9              wc
384b8     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
384bc     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
384c0     18 3C 63 FD |                 getqx   _txn_err_
384c4     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
384c8     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
384cc     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
384d0     18 3E 63 FD |                 getqx   _500us_
384d4     09 3E 57 F0 |                 shr     _500us_, #9             wc
384d8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
384dc     01 00 00 FF 
384e0     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
384e4     18 40 63 FD |                 getqx   _txn_ok_ls_
384e8     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
384ec     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
384f0     01 00 00 FF 
384f4     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
384f8     18 42 63 FD |                 getqx   _txn_ok_fs_
384fc     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
38500     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38504     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
38508     05 00 00 FF 
3850c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
38510     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
38514     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
38518     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3851c     1C 00 00 FF 
38520     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
38524     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
38528     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3852c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
38530     00 00 00 FF 
38534     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
38538     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3853c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
38540     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
38544     04 00 00 FF 
38548     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3854c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
38550     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
38554     8D 5B 00 FF 
38558     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3855c     18 4C 63 FD |                 getqx   _preamble_wait_
38560     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
38564     01 00 00 FF 
38568     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3856c     18 2C 63 FD |                 getqx   _var_64_lower_
38570     19 2E 63 FD |                 getqy   _var_64_upper_
38574     28 2C 63 FD |                 setq    _var_64_lower_
38578     01 00 00 FF 
3857c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
38580     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
38584     09 4E 57 F0 |                 shr     _1ms_, #9               wc
38588     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3858c     FF FF 7F FF 
38590     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
38594     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
38598     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3859c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
385a0     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
385a4     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
385a8     A7 55 03 F6 |                 mov     _4ms_, _1ms_
385ac     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
385b0     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
385b4     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
385b8     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
385bc     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
385c0     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
385c4     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
385c8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
385cc     A7 59 03 F6 |                 mov     _8ms_, _1ms_
385d0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
385d4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
385d8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
385dc     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
385e0     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
385e4     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
385e8     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
385ec     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
385f0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
385f4     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
385f8     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
385fc                 | '        _ret_   mov     _1sec_, save_sysclk
385fc                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
385fc                 | '                ret
385fc                 | {
385fc                 | }
385fc                 | 
385fc                 | '------------------------------------------------------------------------------
385fc                 | ' Parse a configuration descriptor chain to see if the device is a recognized
385fc                 | ' one. If it is, start the task progression that will configure the device for
385fc                 | ' use.
385fc                 | '------------------------------------------------------------------------------
385fc                 | ' On entry:
385fc                 | '   hconfig_base - start address of the cached config descriptor chain.
385fc                 | ' On exit:
385fc                 | '------------------------------------------------------------------------------
385fc                 | hparse_con_desc
385fc     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
38600     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38604     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38608     4E 70 FF F9 |                 movbyts htmp,#%%1032
3860c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
38610                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
38610                 | 
38610     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
38614     6E ED 03 F1 |                 add     pa, hconfig_base
38618     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3861c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3861c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3861c                 | ' that defines a keyboard and/or mouse.
3861c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
38620                 | .next_intf
38620     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38624     BC 01 90 3D |         if_ae   jmp     #hset_config
38628     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3862c     75 F3 03 F1 |                 add     ptrb, hnext_desc
38630     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38634     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38638     0C 00 90 AD |         if_z    jmp     #.intf
3863c     80 71 C7 FA |                 rdbyte  htmp, ptrb
38640     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38644     D8 FF 9F FD |                 jmp     #.next_intf
38648                 | .intf
38648     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3864c     00 90 07 F6 |                 mov     hpar3, #0
38650     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
38654     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
38658     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3865c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
38660                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
38660                 | 
38660                 | .endp
38660     80 71 C7 FA |                 rdbyte  htmp, ptrb
38664     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38668     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3866c     78 00 90 3D |         if_ae   jmp     #.get_device
38670     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38674     75 F3 03 F1 |                 add     ptrb, hnext_desc
38678     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3867c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38680     64 00 90 AD |         if_z    jmp     #.get_device
38684     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
38688     04 00 90 AD |         if_z    jmp     #.get_ep
3868c     D0 FF 9F FD |                 jmp     #.endp
38690                 | .get_ep
38690     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
38694     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
38698     0F 86 67 F0 |                 shl     hr1, #8 + 7
3869c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
386a0     3F 00 00 FF 
386a4     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
386a8     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
386ac     00 8E 0F F2 |                 cmp     hpar2, #0               wz
386b0     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
386b4     00 90 0F F2 |                 cmp     hpar3, #0               wz
386b8     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
386bc     A0 FF 9F FD |                 jmp     #.endp
386c0                 | .in_ep
386c0     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
386c4     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
386c8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
386c8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
386cc     C2 89 DB F8 |                 setbyte hr2, hr0, #3
386d0     8C FF 9F FD |                 jmp     #.endp
386d4                 | .out_ep
386d4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
386d8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
386dc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
386dc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
386e0     C2 8B DB F8 |                 setbyte hr3, hr0, #3
386e4     78 FF 9F FD |                 jmp     #.endp
386e8                 | 
386e8                 | .get_device
386e8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
386ec     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
386f0     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
386f4     68 00 90 AD |         if_z    jmp     #.gamepad
386f8     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
386fc     AC 00 90 AD |         if_z    jmp     #.hub
38700     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38704     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38708     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3870c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38710     4C 00 90 AD |         if_z    jmp     #.gamepad
38714     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
38718     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3871c                 | .keyboard
3871c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
38720                 |         if HAVE_MOUSE
38720     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
38724                 |         else
38724                 |         end
38724     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
38728     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3872c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38730     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
38734     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
38738     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3873c                 |                 'debug(udec(kb_intf_num))
3873c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3873c     E0 FE 9F FD |                 jmp     #.next_intf
38740                 | if HAVE_MOUSE
38740                 | .mouse
38740     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
38744     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
38748     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3874c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
38750     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38754                 |                 'getbyte ms_interval, hr2, #3
38754     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
38758     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3875c                 |                 'debug(udec(kb_intf_num))
3875c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3875c     C0 FE 9F FD |                 jmp     #.next_intf
38760                 | end
38760                 | .gamepad
38760     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38764     C7 71 63 F5 |                 xor     htmp, hpar2
38768     3F 00 00 FF 
3876c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38770     AC FE 9F AD |         if_z    jmp     #.next_intf
38774                 |         if HAVE_MOUSE
38774     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38778     C7 71 63 F5 |                 xor     htmp, hpar2
3877c     3F 00 00 FF 
38780     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38784     98 FE 9F AD |         if_z    jmp     #.next_intf
38788                 |         end
38788     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3878c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
38790     8C FE 9F 5D |         if_nz   jmp     #.next_intf
38794                 | 
38794     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38798     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3879c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
387a0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
387a4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
387a8                 |                 'debug(udec(gp_intf_num))
387a8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
387a8     74 FE 9F FD |                 jmp     #.next_intf
387ac                 | .hub
387ac     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
387b0     6C FE 9F 5D |         if_nz   jmp     #.next_intf
387b4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
387b8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
387bc     60 FE 9F 5D |         if_nz   jmp     #.next_intf
387c0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
387c4     58 FE 9F 5D |         if_nz   jmp     #.next_intf
387c8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
387cc     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
387d0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
387d4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
387d8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
387dc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
387e0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
387e0     3C FE 9F FD |                 jmp     #.next_intf
387e4                 | 
387e4                 | '------------------------------------------------------------------------------
387e4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
387e4                 | ' it according to its function, or functions. In the case of this boot protocol
387e4                 | ' keyboard/mouse class driver:
387e4                 | ' - SetConfiguration(config_num)
387e4                 | ' - SetProtocol(boot)
387e4                 | ' - SetIdle(indefinite)
387e4                 | ' - Enter the device interrupt IN polling task stage.
387e4                 | '------------------------------------------------------------------------------
387e4                 | ' On entry:
387e4                 | ' On exit:
387e4                 | '------------------------------------------------------------------------------
387e4                 | hset_config
387e4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
387e4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
387e4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
387e8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
387ec     00 00 0C F2 |                 cmp     0-0, #0                 wz
387f0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
387f4                 |         if HAVE_MOUSE
387f4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
387f8                 |         end
387f8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
387fc     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
38800                 | .set_config
38800     6C 0E D0 FE |                 loc     ptra, #set_config
38804     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38808     6E ED 03 F1 |                 add     pa, hconfig_base
3880c     F6 8D C3 FA |                 rdbyte  hpar1, pa
38810     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
38814     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
38818     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3881c     A0 02 A0 FD |                 call    #control_write
38820     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38824     2D 00 64 5D |         if_nz   ret
38828                 | .kbd_config
38828     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3882c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
38830                 | 
38830     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38834     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38838     3F 00 00 FF 
3883c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38840     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
38844                 | 
38844     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38848     34 0E D0 FE |                 loc     ptra, #set_protocol
3884c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38850     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38854     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38858     A0 02 A0 FD |                 call    #control_write
3885c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38860     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38864     E4 02 90 5D |         if_nz   jmp     #.notify_client
38868     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3886c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
38870     30 03 B0 FD |                 call    #hset_idle
38874                 |                 'cmp     retval, #PID_ACK        wz
38874                 |         'if_nz   mov     hkbd_ep_addr, #0
38874                 |         'if_nz   jmp     #.notify_client
38874     A8 99 02 F6 |                 mov     hctwait, _2ms_
38878     EF 02 A0 FD |                 call    #poll_waitx
3887c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
38880     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
38884     90 17 90 FE |                 loc     pa, #hkbd_led_rep
38888     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3888c     2C 03 B0 FD |                 call    #hset_kbdled_report
38890     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38894     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38898     B0 02 90 5D |         if_nz   jmp     #.notify_client
3889c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
388a0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
388a4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
388a8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
388ac     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
388b0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
388b4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
388b8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
388bc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
388c0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
388c4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
388c8                 |         if !!HAVE_MOUSE
388c8                 |         end
388c8                 | 
388c8                 | .mouse_config
388c8                 | if HAVE_MOUSE
388c8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
388cc     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
388d0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
388d4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
388d8     3F 00 00 FF 
388dc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
388e0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
388e4                 | 
388e4                 |                 debug("mouse passed addr check")
388e4                 | 
388e4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
388e8     00 00 80 FF 
388ec     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
388f0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
388f4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
388f8     55 02 A0 FD |                 call    #control_read
388fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38900     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38904     44 02 90 5D |         if_nz   jmp     #.notify_client
38908     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3890c     56 01 00 F6 |                 mov     0-0, total_data
38910     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38914                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38914                 | 
38914     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38918     64 0D D0 FE |                 loc     ptra, #set_protocol
3891c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38920     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38924     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38928     A0 02 A0 FD |                 call    #control_write
3892c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38930     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38934     14 02 90 5D |         if_nz   jmp     #.notify_client
38938                 |                 debug("mouse passed SetProtocol")
38938     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3893c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
38940     60 02 B0 FD |                 call    #hset_idle
38944                 |                 'cmp     retval, #PID_ACK        wz
38944                 |         'if_nz   mov     hmouse_ep_addr, #0
38944                 |         'if_nz   jmp     #.notify_client
38944                 |                 debug("mouse passed SetIdle")
38944     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38948     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3894c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38950     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38954     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
38958     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3895c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
38960     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
38964     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
38968     3F 00 00 FF 
3896c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
38970     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38974     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38978     D0 01 90 FD |                 jmp     #.notify_client
3897c                 | end
3897c                 | .gamepad_config
3897c                 | if _HAVE_GAMEPAD
3897c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38980     00 00 0C F2 |                 cmp     0-0, #0                 wz
38984     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
38988     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3898c     00 70 03 F6 |                 mov     htmp, 0-0
38990     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38994     3F 00 00 FF 
38998     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3899c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
389a0                 | 
389a0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
389a4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
389a8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
389ac     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
389b0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
389b4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
389b8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
389bc     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
389c0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
389c4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
389c8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
389cc     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
389d0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
389d4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
389d8                 | 
389d8                 |                 if EMUPAD_MAX_PLAYER > 0
389d8                 |                 
389d8                 | .rule_loop           
389d8                 |                 end
389d8                 | 
389d8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
389dc     5C 00 90 AD |         if_e    jmp     #.xinput
389e0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
389e4     00 70 03 F6 |                 mov     htmp,0-0
389e8     01 A6 02 FF 
389ec     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
389f0     7C 00 90 AD |         if_e    jmp     #.ps3
389f4                 | 
389f4     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
389f8     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
389fc     00 00 80 5F 
38a00     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38a04     03 00 80 AF 
38a08     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38a0c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38a10     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a14     55 02 A0 FD |                 call    #control_read
38a18     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a1c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38a20     00 00 04 56 |         if_nz   mov     0-0, #0
38a24     24 01 90 5D |         if_nz   jmp     #.notify_client
38a28     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38a2c     56 01 00 F6 |                 mov     0-0, total_data
38a30     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a34                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38a34                 | 
38a34     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38a38     10 01 90 FD |                 jmp     #.notify_client
38a3c                 | .xinput
38a3c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38a40     2D EF 03 F6 |                 mov     pb,hdev_port
38a44     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38a48     03 EE 27 F3 |                 fle     pb,#3
38a4c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38a50     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38a54                 | 
38a54     03 B0 06 F6 |                 mov     pkt_data, #3
38a58     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38a5c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38a60     5A 00 A0 FD |                 call    #txn_out
38a64     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38a68                 | 
38a68     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38a6c     DC 00 90 FD |                 jmp     #.notify_client
38a70                 | .ps3
38a70     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38a74     2D EF 03 F6 |                 mov     pb,hdev_port
38a78     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38a7c     04 EE 27 F3 |                 fle     pb,#4
38a80     F7 EF C3 F9 |                 decod   pb
38a84     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38a88                 | 
38a88     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38a8c     00 0C D0 FE |                 loc     ptra, #set_report
38a90     01 00 80 FF 
38a94     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38a98     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38a9c     03 61 5C FC |                 wrword  #48, ptra[wLength]
38aa0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38aa4     A0 02 A0 FD |                 call    #control_write
38aa8                 | 
38aa8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38aac     E0 0B D0 FE |                 loc     ptra, #set_report
38ab0     01 00 80 FF 
38ab4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38ab8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38abc     03 09 5C FC |                 wrword  #4, ptra[wLength]
38ac0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38ac4     A0 02 A0 FD |                 call    #control_write
38ac8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38acc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38ad0     00 00 04 56 |         if_nz   mov     0-0, #0
38ad4     74 00 90 5D |         if_nz   jmp     #.notify_client
38ad8                 | 
38ad8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38adc     6C 00 90 FD |                 jmp     #.notify_client
38ae0                 | end
38ae0                 | 
38ae0                 | .hub_config
38ae0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38ae4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38ae8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38aec     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38af0     3F 00 00 FF 
38af4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38af8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38afc                 | 
38afc     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38b00     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38b04     26 EF 03 F6 |                 mov     pb, hub_descr_p
38b08     55 02 A0 FD |                 call    #control_read
38b0c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b10     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38b14     34 00 90 5D |         if_nz   jmp     #.notify_client
38b18                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38b18                 | 
38b18     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38b1c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38b20     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38b24                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38b24                 | .pwr_loop
38b24     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38b28     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38b2c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38b30     A0 02 A0 FD |                 call    #control_write
38b34     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38b38                 | 
38b38     B1 99 02 F6 |                 mov     hctwait, _500ms_
38b3c     B0 99 02 F1 |                 add     hctwait, _100ms_
38b40     EF 02 A0 FD |                 call    #poll_waitx
38b44                 | 
38b44     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38b48     00 00 90 FD |                 jmp     #.notify_client
38b4c                 | 
38b4c                 | .notify_client
38b4c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38b50     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38b54                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38b54                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38b54     2D 00 64 FD |                 ret
38b58                 | 
38b58                 | '------------------------------------------------------------------------------
38b58                 | ' Initialize the keyboard/mouse data area to start-up values.
38b58                 | '------------------------------------------------------------------------------
38b58                 | ' On entry:
38b58                 | ' On exit:
38b58                 | '------------------------------------------------------------------------------
38b58                 | init_kbdm_data
38b58     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38b5c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38b60                 | 
38b60     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38b64     2B ED 03 F6 |                 mov     pa, cache_end_p
38b68                 | .loop
38b68     61 01 4C FC |                 wrbyte  #0, ptra++
38b6c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38b70     F4 FF 9F CD |         if_b    jmp     #.loop
38b74                 |         
38b74                 |         if EMUPAD_MAX_PLAYER > 0
38b74                 |         end
38b74                 | 
38b74                 | 
38b74     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38b78                 | .regloop
38b78     00 EC 8F F9 |                 altd    pa
38b7c     00 00 04 F6 |                 mov     0-0, #0
38b80     01 EC 07 F1 |                 add     pa, #1
38b84     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38b88     EC FF 9F 5D |         if_nz   jmp     #.regloop
38b8c                 | 
38b8c     E1 E1 61 FF 
38b90     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38b94     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38b98     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38b9c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38ba0                 | 
38ba0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38ba4                 | 
38ba4                 | '------------------------------------------------------------------------------
38ba4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38ba4                 | ' function.
38ba4                 | '------------------------------------------------------------------------------
38ba4                 | ' On entry:
38ba4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38ba4                 | '   hpar2 - index number of the target interface.
38ba4                 | ' On exit:
38ba4                 | '------------------------------------------------------------------------------
38ba4                 | hset_idle
38ba4     A8 99 02 F6 |                 mov     hctwait, _2ms_
38ba8     EF 02 A0 FD |                 call    #poll_waitx
38bac     D8 0A D0 FE |                 loc     ptra, #set_idle
38bb0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38bb4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38bb8     A0 02 80 FD |                 jmp     #control_write
38bbc                 | 
38bbc                 | '------------------------------------------------------------------------------
38bbc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38bbc                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38bbc                 | '------------------------------------------------------------------------------
38bbc                 | ' On entry:
38bbc                 | '   ep_addr_pid - device address and enpoint for the request.
38bbc                 | ' On exit:
38bbc                 | '   retval - transaction result.
38bbc                 | '------------------------------------------------------------------------------
38bbc                 | hset_kbdled_report
38bbc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38bc0     CC 0A D0 FE |                 loc     ptra, #set_report
38bc4     01 00 80 FF 
38bc8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38bcc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38bd0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38bd4     27 EF 03 F6 |                 mov     pb, urx_buff_p
38bd8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38bdc     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38be0                 | 
38be0                 | '------------------------------------------------------------------------------
38be0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38be0                 | '------------------------------------------------------------------------------
38be0                 | ' On entry:
38be0                 | ' On exit:
38be0                 | '------------------------------------------------------------------------------
38be0                 | hget_kbd_in_report
38be0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38be4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38be8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38bec     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38bf0     CF 02 A0 FD |                 call    #do_int_in
38bf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38bf8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38bfc                 | 
38bfc     00 90 0F F2 |                 cmp     hpar3, #0               wz
38c00     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38c04                 | 
38c04     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38c08     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38c0c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38c10     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38c14                 | 
38c14     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38c18     18 00 B0 FD |                 call    #hkbd_compare
38c1c                 |         if EMUPAD_MAX_PLAYER > 0
38c1c                 |         end
38c1c                 | 
38c1c                 | .led_check
38c1c     3B 71 03 F6 |                 mov     htmp, kb_led_states
38c20     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38c24     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38c28     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38c2c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38c30     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38c34                 | 
38c34                 | '------------------------------------------------------------------------------
38c34                 | ' Compare current and previous keyboard data buffers for keypress changes.
38c34                 | '------------------------------------------------------------------------------
38c34                 | hkbd_compare
38c34     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38c38     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38c3c     61 73 07 FB |                 rdlong  htmp1, ptra++
38c40     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38c44     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38c48     61 73 07 FB |                 rdlong  htmp1, ptra++
38c4c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38c50     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38c54     2D 00 64 AD |         if_z    ret
38c58                 | 
38c58     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38c5c                 | 
38c5c                 |                 ' Handle modifiers
38c5c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38c60     00 87 C7 FA |                 rdbyte  hr1, ptra
38c64     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38c68     63 86 63 FD |                 mergew  hr1
38c6c     08 EC 07 F6 |                 mov     pa,#8
38c70                 | .modloop
38c70     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38c74     E8 8C 07 F6 |                 mov     hpar1,#$E8
38c78     F6 8D 83 F1 |                 sub     hpar1,pa
38c7c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38c80     FB ED 6F FB |                 djnz    pa,#.modloop
38c84                 | 
38c84     6F E0 75 FD | .release        modc    _set    wc
38c88                 |                 'alts    hdev_port, #hid_report_p
38c88                 |                 'mov     ptra, hid_report_p
38c88     02 F0 07 F1 |                 add     ptra, #2
38c8c     06 EC 07 F6 |                 mov     pa, #6
38c90     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38c94     20 00 90 AD |         if_z    jmp     #.rl3
38c98     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38c9c     02 F2 07 F1 |                 add     ptrb, #2
38ca0     06 EE 07 F6 |                 mov     pb, #6
38ca4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38ca8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38cac     08 00 90 AD |         if_z    jmp     #.rl3
38cb0     FC EF 6F FB |                 djnz    pb, #.rl2
38cb4     68 00 B0 FD |                 call    #hkbd_translate
38cb8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38cbc                 | 
38cbc     00 90 07 F6 |                 mov     hpar3, #0
38cc0     1F 90 27 F4 |                 bith    hpar3, #31
38cc4                 | 
38cc4     6F 00 74 FD | .press          modc    _clr    wc
38cc8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38ccc     02 F0 07 F1 |                 add     ptra, #2
38cd0     06 EC 07 F6 |                 mov     pa, #6
38cd4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38cd8     20 00 90 AD |         if_z    jmp     #.pl3
38cdc     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38ce0     02 F2 07 F1 |                 add     ptrb, #2
38ce4     06 EE 07 F6 |                 mov     pb, #6
38ce8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38cec     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38cf0     08 00 90 AD |         if_z    jmp     #.pl3
38cf4     FC EF 6F FB |                 djnz    pb, #.pl2
38cf8     24 00 B0 FD |                 call    #hkbd_translate
38cfc     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38d00                 | 
38d00     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38d04     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38d08     28 02 64 FD |                 setq #1
38d0c     61 73 07 FB |                 rdlong  htmp1, ptra++
38d10     28 02 64 FD |                 setq #1
38d14     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38d18     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38d1c                 | 
38d1c     2D 00 64 FD |                 ret
38d20                 | 
38d20                 | '------------------------------------------------------------------------------
38d20                 | ' Translate keyboard scancode to ASCII
38d20                 | '------------------------------------------------------------------------------
38d20                 | ' On entry:
38d20                 | '   hpar1 - scancode
38d20                 | '   hpar2 - key modifiers state
38d20                 | '       c - pressed (0) or released (1) flag
38d20                 | ' On exit:
38d20                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38d20                 | '               30..17 = unused
38d20                 | '                   18 = scroll-lock state 
38d20                 | '                   17 = caps-lock state
38d20                 | '                   16 = num-lock state 
38d20                 | '                15..8 = key modifiers state
38d20                 | '                 7..0 = scancode
38d20                 | '------------------------------------------------------------------------------
38d20                 | hkbd_translate
38d20     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38d24     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38d28     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38d2c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38d30     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38d34     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
38d38                 | 
38d38                 |         if EMUPAD_MAX_PLAYER > 0
38d38                 | 
38d38                 |         if EMUPAD_BT0_BIT >= 0
38d38                 |         end
38d38                 |         if EMUPAD_BT1_BIT >= 0
38d38                 |         end
38d38                 |         if EMUPAD_BT2_BIT >= 0
38d38                 |         end
38d38                 |         if EMUPAD_BT3_BIT >= 0
38d38                 |         end
38d38                 |         if EMUPAD_BT4_BIT >= 0
38d38                 |         end
38d38                 |         if EMUPAD_BT5_BIT >= 0
38d38                 |         end
38d38                 |         if EMUPAD_BT6_BIT >= 0
38d38                 |         end
38d38                 |         if EMUPAD_BT7_BIT >= 0
38d38                 |         end
38d38                 |         if EMUPAD_BT8_BIT >= 0
38d38                 |         end
38d38                 |         if EMUPAD_BT9_BIT >= 0
38d38                 |         end
38d38                 | 
38d38                 |         end
38d38     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
38d3c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
38d40     1F 8C 47 F4 |                 bitc    hpar1, #31
38d44                 |         if KEYQUEUE_SIZE > 0
38d44     C4 09 B0 FE |                 loc pb,#keyq_head
38d48     F7 71 E3 FA |                 rdword htmp,pb
38d4c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
38d50     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
38d54     B8 75 03 F6 |                 mov htmp2,htmp
38d58     04 74 07 FA |                 mul htmp2,#4
38d5c     F7 75 03 F1 |                 add htmp2,pb
38d60     02 74 07 F1 |                 add htmp2,#2
38d64     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
38d68     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
38d6c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
38d70     F7 71 43 5C |         if_nz   wrbyte htmp,pb
38d74                 |         end
38d74     2D 00 7C FD |                 ret wcz
38d78                 | 
38d78                 | if HAVE_MOUSE
38d78                 | '------------------------------------------------------------------------------
38d78                 | ' Execute an IN interrupt transaction to poll for mouse activity.
38d78                 | '------------------------------------------------------------------------------
38d78                 | ' On entry:
38d78                 | ' On exit:
38d78                 | '------------------------------------------------------------------------------
38d78                 | hget_mouse_in_report
38d78     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38d7c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38d80     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
38d84     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
38d88     CF 02 A0 FD |                 call    #do_int_in
38d8c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38d90     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38d94                 | 
38d94     00 90 0F F2 |                 cmp     hpar3, #0               wz
38d98     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38d9c                 | 
38d9c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
38da0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38da4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
38da8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
38dac                 | 
38dac     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38db0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
38db4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
38db8     01 90 87 31 |         if_ae   sub     hpar3, #1
38dbc                 | 
38dbc     40 09 90 FE |                 loc     pa, #mouse_limits
38dc0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
38dc4                 | 
38dc4                 |                 ' load xacc,yacc,zacc
38dc4     28 04 64 FD |                 setq    #3-1
38dc8     80 87 07 FB |                 rdlong  hr1,ptrb
38dcc                 |                 ' load limits and outptr
38dcc     28 04 64 FD |                 setq    #3-1
38dd0     F6 73 03 FB |                 rdlong  htmp1,pa
38dd4                 | 
38dd4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
38dd8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
38ddc     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
38de0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
38de4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
38de8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
38dec     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
38df0     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
38df4                 |               
38df4                 | 
38df4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
38df8     07 70 67 F7 |                 signx   htmp, #7
38dfc     B8 87 03 F1 |                 add     hr1,htmp
38e00     00 72 0F F2 |                 cmp     htmp1,#0 wz
38e04     B9 87 63 53 |         if_ne   fles    hr1,htmp1
38e08     00 86 47 53 |         if_ne   fges    hr1,#0
38e0c                 | 
38e0c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
38e10     07 70 67 F7 |                 signx   htmp, #7
38e14     B8 89 03 F1 |                 add     hr2,htmp
38e18     00 74 0F F2 |                 cmp     htmp2,#0 wz
38e1c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
38e20     00 88 47 53 |         if_ne   fges    hr2,#0
38e24                 |                 
38e24                 | 
38e24     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
38e28     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
38e2c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
38e30     B8 8B 03 A1 |         if_z    add     hr3,htmp
38e34                 | 
38e34     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
38e38     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
38e3c                 | 
38e3c                 |                 ' write back accumulators
38e3c     28 04 64 FD |                 setq    #3-1
38e40     80 87 67 FC |                 wrlong  hr1,ptrb
38e44                 |                 ' if outptr set, write X/Y words
38e44     00 76 0F F2 |                 cmp htmp3,#0                    wz
38e48     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
38e4c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
38e50     2D 00 64 FD |                 ret
38e54                 | end
38e54                 | 
38e54                 | '------------------------------------------------------------------------------
38e54                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
38e54                 | '------------------------------------------------------------------------------
38e54                 | ' On entry:
38e54                 | ' On exit:
38e54                 | '------------------------------------------------------------------------------
38e54                 | if _HAVE_GAMEPAD
38e54                 | hget_gp_in_report
38e54     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38e58     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38e5c                 | 
38e5c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38e60     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
38e64     00 90 E3 F8 |                 getbyte hpar3
38e68     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
38e6c     CF 02 A0 FD |                 call    #do_int_in
38e70     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38e74     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38e78                 | 
38e78     00 90 0F F2 |                 cmp     hpar3, #0               wz
38e7c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38e80                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
38e80                 | 
38e80     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
38e84     00 70 E3 F8 |                 getbyte htmp                            ' |
38e88     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38e8c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
38e90     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
38e94     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
38e98     B8 01 C0 F8 |                 setbyte htmp                            ' |
38e9c                 | 
38e9c                 | ' Note: the following code compares the current and previous reports
38e9c                 | ' and process the data if there are changes to ease the debug output.
38e9c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
38e9c                 | ' gpPreReport buffer.
38e9c                 | 
38e9c                 |                 ' ----- start of block to remove
38e9c                 |                 {
38e9c                 |                 }
38e9c                 |                 ' ----- end of block to remove
38e9c     F4 04 90 FE |                 loc pa,#hpad_translate
38ea0     2A EC 63 FD |                 push pa
38ea4                 | 
38ea4                 |                 ' FALL THROUGH !!!!
38ea4                 | 
38ea4                 | '------------------------------------------------------------------------------
38ea4                 | ' Decode controller report
38ea4                 | '------------------------------------------------------------------------------
38ea4                 | hid_decode
38ea4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
38ea4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
38ea8     00 04 00 FF 
38eac     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
38eb0                 | 
38eb0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38eb4                 | 
38eb4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38eb8     00 2A E3 F8 |                 getbyte hidr_type
38ebc     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
38ec0     34 02 90 AD |         if_z    jmp     #hpad_xinput
38ec4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
38ec8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
38ecc     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
38ed0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
38ed4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
38ed8                 |                 
38ed8                 | 
38ed8                 | '------------------------------------------------------------------------------
38ed8                 | ' Handle HID controller (or mouse now
38ed8                 | ' On entry:
38ed8                 | '   ptrb - controller report
38ed8                 | '------------------------------------------------------------------------------
38ed8                 | hpad_hid
38ed8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38edc     F7 F1 03 F6 |                 mov     ptra, pb
38ee0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
38ee4     00 EC 03 F6 |                 mov     pa, 0-0
38ee8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
38ee8     19 2A 3B FF 
38eec     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
38ef0                 | 
38ef0                 | .next
38ef0     00 EC 5F F2 |                 cmps    pa, #0      wcz
38ef4     2D 00 7C ED |         if_be   ret     wcz
38ef8                 | 
38ef8     61 8D C7 FA |                 rdbyte  hpar1, ptra++
38efc     01 EC 87 F1 |                 sub     pa, #1
38f00     00 8E 07 F6 |                 mov     hpar2, #0
38f04                 | 
38f04     C6 71 03 F6 |                 mov     htmp, hpar1
38f08     03 70 07 F5 |                 and     htmp, #$03
38f0c     01 70 0F F2 |                 cmp     htmp, #1    wz
38f10     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
38f14     07 8E 67 A7 |         if_z    signx   hpar2,#7
38f18     01 EC 87 A1 |         if_z    sub     pa, #1
38f1c     02 70 0F F2 |                 cmp     htmp, #2    wz
38f20     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
38f24     0F 8E 67 A7 |         if_z    signx   hpar2,#15
38f28     02 EC 87 A1 |         if_z    sub     pa, #2
38f2c     03 70 0F F2 |                 cmp     htmp, #3    wz
38f30     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
38f34     04 EC 87 A1 |         if_z    sub     pa, #4
38f38                 | 
38f38     FC 8C 07 F5 |                 and     hpar1, #$FC
38f3c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
38f3c                 | 
38f3c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
38f40     0C 01 90 AD |         if_z    jmp     #.report_id
38f44     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
38f48     24 01 90 AD |         if_z    jmp     #.usage_page
38f4c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
38f50     2C 01 90 AD |         if_z    jmp     #.usage
38f54     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
38f58     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
38f5c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
38f60     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
38f64     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
38f68     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
38f6c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
38f70     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
38f74     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
38f78     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
38f7c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
38f80     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
38f84     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
38f88     64 FF 9F 5D |         if_nz   jmp     #.next
38f8c                 | 
38f8c     D8 1D A7 FB |                 tjf     hidr_state,#.next
38f90                 | 
38f90     03 8E 07 F5 |                 and     hpar2, #$03
38f94     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
38f98     18 00 90 5D |         if_nz   jmp     #.skip
38f9c                 | 
38f9c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
38fa0     20 00 90 AD |         if_z    jmp     #.axes
38fa4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
38fa8     5C 00 90 AD |         if_z    jmp     #.hats
38fac     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
38fb0     70 00 90 AD |         if_z    jmp     #.buttons
38fb4                 | .skip
38fb4     8F 71 03 F6 |                 mov     htmp, hidr_size
38fb8     90 71 03 FA |                 mul     htmp, hidr_count
38fbc     B8 23 03 F1 |                 add     hidr_offset, htmp
38fc0     2C FF 9F FD |                 jmp     #.next
38fc4                 | .axes
38fc4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
38fc4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
38fc8     90 87 03 F6 |                 mov     hr1, hidr_count
38fcc                 | .l1
38fcc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
38fd0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
38fd4     04 03 B0 FD |                 call    #hpad_getbits
38fd8     64 03 B0 FD |                 call    #hpad_normalize
38fdc     06 84 1F F2 |                 cmp     hr0, #6         wcz
38fe0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
38fe4     00 88 43 C8 |         if_b    getnib  hr2
38fe8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
38fec     5F 01 20 C9 |         if_b    setword retval
38ff0     01 84 07 C1 |         if_b    add     hr0, #1
38ff4     8F 23 03 F1 |                 add     hidr_offset, hidr_size
38ff8     F4 87 6F FB |                 djnz    hr1, #.l1
38ffc                 | 
38ffc     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
39000     01 1C 07 F6 |                 mov     hidr_state, #1
39004     E8 FE 9F FD |                 jmp     #.next
39008                 | .hats
39008                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
39008     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3900c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39010     C8 02 B0 FD |                 call    #hpad_getbits
39014     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
39018     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3901c     01 1C 07 F6 |                 mov     hidr_state, #1
39020     90 FF 9F FD |                 jmp     #.skip
39024                 | .buttons
39024                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
39024     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39028     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3902c     90 8F 03 FA |                 mul     hpar2, hidr_count
39030     A8 02 B0 FD |                 call    #hpad_getbits
39034     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
39038     B8 BF 62 F0 |                 shl     retval, htmp
3903c     5F 17 43 F5 |                 or      hidr_buttons, retval
39040     90 71 03 F1 |                 add     htmp, hidr_count
39044     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
39048     01 1C 07 F6 |                 mov     hidr_state, #1
3904c     64 FF 9F FD |                 jmp     #.skip
39050                 | .report_id
39050     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
39054     2D 00 7C 5D |         if_nz   ret     wcz
39058     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3905c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
39060     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
39064     01 1C 67 56 |         if_nz   neg     hidr_state,#1
39068     01 F2 87 51 |         if_nz   sub     ptrb,#1
3906c     80 FE 9F FD |                 jmp     #.next
39070                 | .usage_page
39070     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
39074     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
39078     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3907c     70 FE 9F FD |                 jmp     #.next
39080                 | .usage
39080     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
39084     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
39088     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3908c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
39090     5C FE 9F AD |         if_z    jmp     #.next
39094     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
39098     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3909c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
390a0     4C FE 9F AD |         if_z    jmp     #.next
390a4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
390a8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
390ac     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
390b0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
390b4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
390b8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
390bc     10 00 90 AD |         if_z    jmp     #.usage_axis
390c0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
390c4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
390c8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
390cc     20 FE 9F FD |                 jmp     #.next
390d0                 | .usage_axis
390d0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
390d4     18 FE 9F CD |         if_b    jmp     #.next
390d8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
390dc     C7 01 00 F8 |                 setnib  hpar2
390e0                 | 
390e0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
390e4     C7 8F C3 F9 |                 decod   hpar2
390e8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
390ec                 | 
390ec     01 24 07 F1 |                 add     hidr_usage_idx, #1
390f0     02 1C 07 F6 |                 mov     hidr_state, #2
390f4     F8 FD 9F FD |                 jmp     #.next
390f8                 | 
390f8                 | '------------------------------------------------------------------------------
390f8                 | ' Handle XInput controller
390f8                 | ' On entry:
390f8                 | '   ptrb - controller report
390f8                 | '------------------------------------------------------------------------------
390f8                 | '   Default implementation translates the report to a pseudo-defacto hid
390f8                 | '   standard and jumps to hpad_translate for actions.
390f8                 | '   Implementors may take specific actions for this kind of controller.
390f8                 | '------------------------------------------------------------------------------
390f8                 | hpad_xinput
390f8     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
390fc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
39100     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39104     14 70 0F F2 |                 cmp     htmp, #$14      wz
39108     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3910c                 | 
3910c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3910c                 | 
3910c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
39110     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
39114                 | 
39114     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
39118     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3911c     5F BF 22 F6 |                 not     retval
39120     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39124     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
39128     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3912c     5F BF 22 F6 |                 not     retval
39130     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39134                 | 
39134     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39138     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3913c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39140     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
39144     F8 01 B0 FD |                 call    #hpad_normalize
39148     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3914c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
39150     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39154     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
39158     E4 01 B0 FD |                 call    #hpad_normalize
3915c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
39160                 | 
39160     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
39164     81 BF E6 FA |                 rdword  retval, ptrb[1]
39168     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3916c     00 16 47 F4 |                 bitc    hidr_buttons, #0
39170     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39174     01 16 47 F4 |                 bitc    hidr_buttons, #1
39178     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3917c     02 16 47 F4 |                 bitc    hidr_buttons, #2
39180     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39184     03 16 47 F4 |                 bitc    hidr_buttons, #3
39188     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3918c     04 16 47 F4 |                 bitc    hidr_buttons, #4
39190     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
39194     05 16 47 F4 |                 bitc    hidr_buttons, #5
39198     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3919c     08 16 47 F4 |                 bitc    hidr_buttons, #8
391a0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
391a4     09 16 47 F4 |                 bitc    hidr_buttons, #9
391a8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
391ac     0A 16 47 F4 |                 bitc    hidr_buttons, #10
391b0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
391b4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
391b8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
391bc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
391c0                 | 
391c0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
391c4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
391c8     7A BB 7A FF 
391cc     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
391d0     F9 FF 7F FF 
391d4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
391d8     B9 71 5F F9 |                 altgn   htmp, #htmp1
391dc     00 70 43 F8 |                 getnib  htmp
391e0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
391e4                 | 
391e4     AC 01 90 FD |                 jmp     #hpad_translate
391e8                 | 
391e8                 | '------------------------------------------------------------------------------
391e8                 | ' Handle PS3 controller
391e8                 | ' On entry:
391e8                 | '   ptrb - controller report
391e8                 | '------------------------------------------------------------------------------
391e8                 | '   Default implementation translates the report to a pseudo-defacto hid
391e8                 | '   standard and jumps to hpad_translate for actions.
391e8                 | '   Implementors may take specific actions for this kind of controller.
391e8                 | '------------------------------------------------------------------------------
391e8                 | hpad_ps3
391e8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
391ec     01 70 0F F2 |                 cmp     htmp, #$01      wz
391f0     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
391f4                 | 
391f4                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
391f4                 | 
391f4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
391f8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
391fc     40 01 B0 FD |                 call    #hpad_normalize
39200     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39204     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
39208     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3920c     30 01 B0 FD |                 call    #hpad_normalize
39210     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39214     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
39218     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3921c     20 01 B0 FD |                 call    #hpad_normalize
39220     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
39224     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
39228     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3922c     10 01 B0 FD |                 call    #hpad_normalize
39230     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39234     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
39238     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3923c                 | 
3923c     08 8C 07 F6 |                 mov     hpar1, #8
39240     13 8E 07 F6 |                 mov     hpar2, #19
39244     94 00 B0 FD |                 call    #hpad_getbits
39248                 | 
39248     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3924c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
39250     00 16 47 F4 |                 bitc    hidr_buttons, #0
39254     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39258     01 16 47 F4 |                 bitc    hidr_buttons, #1
3925c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39260     02 16 47 F4 |                 bitc    hidr_buttons, #2
39264     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
39268     03 16 47 F4 |                 bitc    hidr_buttons, #3
3926c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
39270     04 16 47 F4 |                 bitc    hidr_buttons, #4
39274     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
39278     05 16 47 F4 |                 bitc    hidr_buttons, #5
3927c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
39280     06 16 47 F4 |                 bitc    hidr_buttons, #6
39284     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
39288     07 16 47 F4 |                 bitc    hidr_buttons, #7
3928c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
39290     08 16 47 F4 |                 bitc    hidr_buttons, #8
39294     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
39298     09 16 47 F4 |                 bitc    hidr_buttons, #9
3929c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
392a0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
392a4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
392a8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
392ac     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
392b0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
392b4                 | 
392b4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
392b8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
392bc     09 FA 79 FF 
392c0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
392c4     FF FA 7F FF 
392c8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
392cc     B9 71 5F F9 |                 altgn   htmp, #htmp1
392d0     00 70 43 F8 |                 getnib  htmp
392d4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
392d8                 | 
392d8     B8 00 90 FD |                 jmp     #hpad_translate
392dc                 | 
392dc                 | '------------------------------------------------------------------------------
392dc                 | ' Read bits from report data buffer
392dc                 | '------------------------------------------------------------------------------
392dc                 | ' On entry:
392dc                 | '   PTRB - report buffer
392dc                 | '   hpar1 - start bit
392dc                 | '   hpar2 - number of bits
392dc                 | ' On exit:
392dc                 | '   retval - bits
392dc                 | '------------------------------------------------------------------------------
392dc                 | hpad_getbits
392dc     C6 71 03 F6 |                 mov     htmp, hpar1
392e0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
392e4     F9 71 03 F1 |                 add     htmp, ptrb
392e8     B8 BF 02 FB |                 rdlong  retval, htmp
392ec                 | 
392ec     C6 73 03 F6 |                 mov     htmp1, hpar1
392f0     07 72 07 F5 |                 and     htmp1, #$07     ' shift
392f4     B9 BF 42 F0 |                 shr     retval, htmp1
392f8                 | 
392f8     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
392fc     10 00 90 1D |         if_a    jmp     #.l1
39300                 | 
39300     C7 8F C3 F9 |                 decod   hpar2
39304     01 8E 87 F1 |                 sub     hpar2, #1
39308     C7 BF 02 F5 |                 and     retval, hpar2
3930c     2D 00 64 FD |                 ret
39310                 | .l1
39310     FF 7F 00 FF 
39314     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
39318     03 70 07 F1 |                 add     htmp, #3
3931c     B8 75 03 FB |                 rdlong  htmp2, htmp
39320     18 8E 87 F1 |                 sub     hpar2, #24
39324     C7 8F C3 F9 |                 decod   hpar2
39328     01 8E 87 F1 |                 sub     hpar2, #1
3932c     B9 75 43 F0 |                 shr     htmp2, htmp1
39330     C7 75 03 F5 |                 and     htmp2, hpar2
39334     18 74 67 F0 |                 shl     htmp2, #24
39338     BA BF 42 F5 |                 or      retval, htmp2
3933c     2D 00 64 FD |                 ret
39340                 | 
39340                 | '------------------------------------------------------------------------------
39340                 | ' Normalize value to signed word (-32768 / 32767)
39340                 | '------------------------------------------------------------------------------
39340                 | ' On entry:
39340                 | '   retval - value to normalize
39340                 | '   hidr_lminmax - min (word 1) max (word 0) value range
39340                 | '   - or -
39340                 | '   hidr_pminmax - min (word 1) max (word 0) value range
39340                 | '   hidr_size - value bits length
39340                 | ' On exit:
39340                 | '   retval - normalized value
39340                 | '------------------------------------------------------------------------------
39340                 | hpad_normalize
39340     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
39344     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
39348     2D 00 64 AD |         if_z    ret
3934c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
39350     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
39354     0F 72 77 F7 |                 signx   htmp1, #15      wc
39358     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3935c     00 BE 66 C7 |         if_c    signx   retval, #0-0
39360     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
39364     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
39368     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3936c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
39370     B8 71 53 F6 |                 abs     htmp            wc
39374     1F BE 0E F4 |                 testb   retval, #31     wz
39378     5F BF 42 F6 |                 abs     retval
3937c     B8 BF 12 FD |                 qdiv    retval, htmp
39380     18 BE 62 FD |                 getqx   retval
39384     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
39388     C0 FF 7F FF 
3938c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
39390     2D 00 64 FD |                 ret
39394                 | 
39394                 | '------------------------------------------------------------------------------
39394                 | ' Perform controller actions
39394                 | ' On entry:
39394                 | '    hidr_id        report id
39394                 | '    hidr_axis      axis value (signed word, 2 axes per long)
39394                 | '                      X = hidr_axis+0, #0
39394                 | '                      Y = hidr_axis+0, #1
39394                 | '                      Z = hidr_axis+1, #0
39394                 | '                     RX = hidr_axis+1, #1
39394                 | '                     RY = hidr_axis+2, #0
39394                 | '                     RZ = hidr_axis+2, #1
39394                 | '    hidr_buttons   buttons state (bits 0 to 31)
39394                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
39394                 | '
39394                 | '                     -------3 -------2 -------1 -------0 byte
39394                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
39394                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
39394                 | '                                zyx||| |||||||| ++++++++ n. buttons
39394                 | '                                |||||| ||||++++--------- n. axes
39394                 | '                                |||||| ++++------------- n. hats
39394                 | '                                ++++++------------------ valid axes
39394                 | '------------------------------------------------------------------------------
39394                 | hpad_translate
39394                 | 
39394                 | 
39394                 |         if HAVE_HIDPAD
39394     84 0C F0 FE |                 loc     ptrb,#hidpad_report
39398     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3939c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
393a0     01 70 E7 F2 |                 cmpsub  htmp,#1
393a4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
393a8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
393ac     2D 00 7C 3D |         if_ae   ret     wcz
393b0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
393b4     B8 F3 03 F1 |                 add     ptrb,htmp
393b8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
393bc     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
393c0     28 0C 64 FD |                 setq    #7-1
393c4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
393c8                 |         end
393c8                 | 
393c8                 | 
393c8                 |         if EMUPAD_MAX_PLAYER > 0
393c8                 | .emupad_no_hat
393c8                 |         if EMUPAD_BT0_BIT >= 0
393c8                 |         end
393c8                 |         if EMUPAD_BT1_BIT >= 0
393c8                 |         end
393c8                 |         if EMUPAD_BT2_BIT >= 0
393c8                 |         end
393c8                 |         if EMUPAD_BT3_BIT >= 0
393c8                 |         end
393c8                 |         if EMUPAD_BT4_BIT >= 0
393c8                 |         end
393c8                 |         if EMUPAD_BT5_BIT >= 0
393c8                 |         end
393c8                 |         if EMUPAD_BT6_BIT >= 0
393c8                 |         end
393c8                 |         if EMUPAD_BT7_BIT >= 0
393c8                 |         end
393c8                 |         if EMUPAD_BT8_BIT >= 0
393c8                 |         end
393c8                 |         if EMUPAD_BT9_BIT >= 0
393c8                 |         end
393c8                 | .emupad_slot_over
393c8                 |         end
393c8                 | 
393c8                 |         if 0
393c8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
393c8                 | 
393c8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
393c8                 | 
393c8                 |         end
393c8     2D 00 64 FD |                 ret
393cc                 | end
393cc                 | 
393cc                 | if EMUPAD_MAX_PLAYER > 0
393cc                 | '------------------------------------------------------------------------------
393cc                 | ' Clear EmuPad state
393cc                 | '------------------------------------------------------------------------------
393cc                 | emupad_reset
393cc                 | 
393cc                 | '------------------------------------------------------------------------------
393cc                 | ' Get EmuPad Player number for current device (into retval)
393cc                 | ' Z flag is also set if current device is valid
393cc                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
393cc                 | '------------------------------------------------------------------------------
393cc                 | emupad_getnum
393cc                 | .loop
393cc                 | '------------------------------------------------------------------------------
393cc                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
393cc                 | '------------------------------------------------------------------------------
393cc                 | emupad_discon
393cc                 | .loop         
393cc                 |         
393cc                 |         ' FALL THROUGH!!!
393cc                 | 
393cc                 | '------------------------------------------------------------------------------
393cc                 | ' Update EmuPad reports (all of them...)
393cc                 | '------------------------------------------------------------------------------
393cc                 | emupad_write_reports
393cc                 | .devloop
393cc                 | 
393cc                 | end
393cc                 | 
393cc                 | 
393cc                 | '------------------------------------------------------------------------------
393cc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
393cc                 | '------------------------------------------------------------------------------
393cc                 | ' On entry:
393cc                 | ' On exit:
393cc                 | '------------------------------------------------------------------------------
393cc                 | hget_hub_status
393cc     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
393d0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
393d4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
393d8     01 90 2F F9 |                 setword hpar3, #1, #1
393dc     CF 02 A0 FD |                 call    #do_int_in
393e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
393e4     0C 00 90 AD |         if_z    jmp     #.data
393e8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
393ec     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
393f0     2D 00 64 FD |                 ret
393f4                 | .data
393f4     00 90 0F F2 |                 cmp     hpar3, #0               wz
393f8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
393fc                 | 
393fc     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
39400     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39404     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
39408     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3940c                 |                 debug(ubin_long(hub_status_chg))
3940c                 | 
3940c     01 5A 06 F6 |                 mov     hdev_port, #1
39410                 | .loop
39410     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
39414     0C 00 B0 AD |         if_x1   call    #hub_port_handler
39418     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3941c     F0 FF 9F 3D |         if_nc   jmp     #.loop
39420     2D 00 64 FD |                 ret
39424                 | 
39424                 | hub_port_handler
39424     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
39428     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3942c     27 EF 03 F6 |                 mov     pb, urx_buff_p
39430     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39434     55 02 A0 FD |                 call    #control_read
39438     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3943c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3943c                 | 
3943c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
39440     50 01 90 5D |         if_x0   jmp     #.other
39444     68 02 D0 FE |                 loc     ptra, #clr_port_feat
39448     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3944c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39450     A0 02 A0 FD |                 call    #control_write
39454     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
39458     7C 01 90 5D |         if_x0   jmp     #.disconnect
3945c     B0 99 02 F6 |                 mov     hctwait, _100ms_
39460     EF 02 A0 FD |                 call    #poll_waitx
39464                 | 
39464     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
39468     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3946c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39470     A0 02 A0 FD |                 call    #control_write
39474                 | 
39474     02 76 07 F6 |                 mov     htmp3, #2
39478                 | .wait_reset
39478     AC 99 02 F6 |                 mov     hctwait, _8ms_
3947c     EF 02 A0 FD |                 call    #poll_waitx
39480     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39484     27 EF 03 F6 |                 mov     pb, urx_buff_p
39488     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3948c     55 02 A0 FD |                 call    #control_read
39490     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
39494     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
39498     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3949c                 | 
3949c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
394a0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
394a4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
394a8     A0 02 A0 FD |                 call    #control_write
394ac                 | 
394ac     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
394b0                 | .wait_recover
394b0     A7 99 02 F6 |                 mov     hctwait, _1ms_
394b4     EF 02 A0 FD |                 call    #poll_waitx
394b8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
394bc                 | 
394bc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
394c0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
394c4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
394c8                 | 
394c8     00 08 00 FF 
394cc     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
394d0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
394d4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
394d8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
394dc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
394e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
394e4     48 01 90 5D |         if_nz   jmp     #.done
394e8                 | .get_dev_desc
394e8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
394ec     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
394f0     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
394f4     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
394f8     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
394fc     01 71 57 FC |                 wrword  htmp, ptra[wValue]
39500     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39504     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39508     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3950c     AC 99 02 F6 |                 mov     hctwait, _8ms_
39510     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39514     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
39518     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3951c     BE 00 A0 FD |                 call    #calc_crc5
39520     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
39524     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
39528     F7 AD C2 FA |                 rdbyte  total_data, pb
3952c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
39530     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
39534     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39538     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3953c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
39540     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
39544                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
39544     9F 99 02 F6 |                 mov     hctwait, _500us_
39548     EF 02 A0 FD |                 call    #poll_waitx
3954c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
39550     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
39554     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
39558     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3955c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39560     CC 00 90 5D |         if_nz   jmp     #.done
39564     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
39568     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3956c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
39570     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
39574     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
39578     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3957c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
39580     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
39584     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
39588     A4 00 90 CD |         if_b    jmp     #.done
3958c     6C F0 BF FD |                 call    #hparse_con_desc
39590     9C 00 90 FD |                 jmp     #.done
39594                 | 
39594                 | .other
39594     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
39598     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3959c     28 00 90 AD |         if_x1   jmp     #.reset_feature
395a0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
395a4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
395a8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
395ac     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
395b0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
395b4     10 00 90 AD |         if_x1   jmp     #.reset_feature
395b8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
395bc     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
395c0     04 00 90 AD |         if_x1   jmp     #.reset_feature
395c4     68 00 90 FD |                 jmp     #.done
395c8                 | .reset_feature
395c8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
395cc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
395d0     A0 02 A0 FD |                 call    #control_write
395d4     58 00 90 FD |                 jmp     #.done
395d8                 | .disconnect
395d8                 | 
395d8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
395dc     00 70 E3 F8 |                 getbyte htmp
395e0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
395e4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
395e8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
395ec     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
395f0     00 76 06 A6 |         if_z    mov     kb_led_states, #0
395f4     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
395f8                 |         if EMUPAD_MAX_PLAYER > 0
395f8                 |         end
395f8                 |         if HAVE_MOUSE
395f8     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
395fc     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
39600     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39604                 |         end
39604                 |         if HAVE_HIDPAD
39604     14 0A F0 FE |                 loc ptrb,#hidpad_report
39608     2D 71 03 F6 |                 mov htmp,hdev_port
3960c     01 70 E7 F2 |                 cmpsub htmp,#1
39610     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
39614     B8 F3 03 F1 |                 add ptrb,htmp
39618     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3961c     80 01 6C FC |                 wrlong #0,ptrb
39620                 |         end
39620                 | 
39620     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39624     00 00 C4 F8 |                 setbyte #0
39628     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3962c     00 00 04 F6 |                 mov     0-0, #0
39630                 | 
39630                 | .done
39630     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
39634     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39638     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3963c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
39640     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
39644     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
39648                 | 
39648     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3964c     27 EF 03 F6 |                 mov     pb, urx_buff_p
39650     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39654     55 02 A0 FD |                 call    #control_read
39658     00 69 06 FB |                 rdlong  hub_port_status, ptra
3965c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3965c     2D 00 64 FD |                 ret
39660                 | 
39660                 | '------------------------------------------------------------------------------
39660                 | ' Partially populated SETUP packets
39660                 | '------------------------------------------------------------------------------
39660     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39661     06          |                 byte    REQ_GET_DESC
39662     00 01       |                 word    TYPE_DEVICE << 8
39664     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39666     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39668     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39669     06          |                 byte    REQ_GET_DESC
3966a     00 02       |                 word    TYPE_CONFIG << 8
3966c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3966e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39670     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39671     09          |                 byte    REQ_SET_CONFIG
39672     00 00       |                 word    0       ' Configuration value
39674     00 00       |                 word    0       ' Zero
39676     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
39678     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39679     05          |                 byte    REQ_SET_ADDR
3967a     00 00       |                 word    0       ' Zero
3967c     00 00       |                 word    0       ' Zero
3967e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
39680                 | '------------------------------------------------------------------------------
39680                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
39680                 | ' wValue field dictates which protocol should be used.
39680                 | '
39680                 | ' When initialized, all devices default to report protocol. However the host
39680                 | ' should not make any assumptions about the device state and should set the
39680                 | ' desired protocol whenever initializing a device.
39680                 | '------------------------------------------------------------------------------
39680     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39681     0B          |                 byte    HID_SET_PROTO
39682     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
39684                 |                                                 ' (HID 1.11 Section 7.2.6).
39684     00 00       |                 word    0               ' Interface index number.
39686     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
39688                 | '------------------------------------------------------------------------------
39688     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39689     0A          |                 byte    HID_SET_IDLE
3968a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3968c                 |                                         ' reporting until a change is detected in the report data
3968c                 | 
3968c                 |                                         ' (HID 1.11 Section 7.2.4).
3968c     00 00       |                 word    0       ' Interface index number.
3968e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
39690     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39691     09          |                 byte    HID_SET_REPORT
39692     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
39694                 |                                         ' (HID 1.11 Section 7.2.2).
39694     00 00       |                 word    0       ' Interface index number.
39696     00 00       |                 word    0       ' Size of the report, in bytes.
39698     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
39699     06          |                 byte    REQ_GET_DESC
3969a     00 22       |                 word    TYPE_REPORT << 8
3969c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3969e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396a0                 | '------------------------------------------------------------------------------
396a0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
396a1     06          |                 byte    REQ_GET_DESC
396a2     00 29       |                 word    TYPE_HUB << 8
396a4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
396a6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396a8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
396a9     03          |                 byte    REQ_SET_FEATURE
396aa     00 00       |                 word    0       ' port power
396ac     01 00       |                 word    1       ' Port index number (1+)
396ae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396b0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
396b1     01          |                 byte    REQ_CLEAR_FEATURE
396b2     00 00       |                 word    0       ' port power
396b4     01 00       |                 word    1       ' Port index number (1+)
396b6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396b8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
396b9     00          |                 byte    REQ_GET_STATUS
396ba     00 00       |                 word    0
396bc     01 00       |                 word    1       ' Port index number (1+)
396be     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
396c0                 | '------------------------------------------------------------------------------
396c0                 | if _HAVE_GAMEPAD
396c0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
396c4                 | ps3_command_buff
396c4     00 00 00 00 
396c8     00          |                 byte    $00, $00, $00, $00, $00
396c9     00 00 00 00 
396cd     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
396ce     FF 27 10 00 
396d2     32          |                 byte    $FF, $27, $10, $00, $32
396d3     FF 27 10 00 
396d7     32          |                 byte    $FF, $27, $10, $00, $32
396d8     FF 27 10 00 
396dc     32          |                 byte    $FF, $27, $10, $00, $32
396dd     FF 27 10 00 
396e1     32          |                 byte    $FF, $27, $10, $00, $32
396e2     00 00 00 00 
396e6     00          |                 byte    $00, $00, $00, $00, $00
396e7     00 00 00 00 
396eb     00          |                 byte    $00, $00, $00, $00, $00
396ec     00 00 00 00 
396f0     00          |                 byte    $00, $00, $00, $00, $00
396f1     00 00 00    |                 byte    $00, $00, $00
396f4                 | '------------------------------------------------------------------------------
396f4     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
396f7                 |                                         ' 0x01 All blinking
396f7                 |                                         ' 0x02 1 flashes, then on
396f7                 |                                         ' 0x03 2 flashes, then on
396f7                 |                                         ' 0x04 3 flashes, then on
396f7                 |                                         ' 0x05 4 flashes, then on
396f7                 |                                         ' 0x06 1 on
396f7                 |                                         ' 0x07 2 on
396f7                 |                                         ' 0x08 3 on
396f7                 |                                         ' 0x09 4 on
396f7                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
396f7                 |                                         ' 0x0B Blinking*
396f7                 |                                         ' 0x0C Slow blinking*
396f7                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
396f7     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
396fa     00          |                 byte    $00             ' Left rumble
396fb     00          |                 byte    $00             ' Right rumble
396fc     00 00 00    |                 byte    $00, $00, $00
396ff     00          | end
39700                 | alignl
39700                 | 
39700                 | if HAVE_MOUSE
39700     00 00 00 00 
39704     00 00 00 00 | mouse_limits long 0[2]
39708     00 00 00 00 | mouse_outptr long 0
3970c                 | end
3970c                 | 
3970c                 | if KEYQUEUE_SIZE > 0
3970c     00          | keyq_head byte 0
3970d     00          | keyq_tail byte 0
3970e     00 00 00 00 
      ...             
3990a     00 00 00 00 
3990e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
39910                 | alignl
39910                 | end
39910                 | 
39910                 | if EMUPAD_MAX_PLAYER > 0
39910                 | emupad_rule_buffer
39910                 | if EMUPAD_BUILTIN_RULES
39910                 | file "padmap_builtin.dat"
39910                 | end
39910                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
39910                 | '' Default rule directly follows!
39910                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
39910                 | end
39910                 | 
39910                 | '------------------------------------------------------------------------------
39910                 | ' The USB data cache area gets zero-filled at every device disconnect
39910                 | '------------------------------------------------------------------------------
39910                 | usb_cache_start
39910                 | 
39910                 | ' HID descriptor and report buffers
39910                 | if !!OVERLAP_MEMORY
39910     00 00 00 00 
      ...             
3a008     00 00 00 00 
3a00c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a010                 | end
3a010     00 00 00 00 
3a014     00 00 00 00 | hkbd_report     byte    0[8]
3a018     00 00 00 00 | hkbd_led_rep    byte    0
3a01c                 | alignl
3a01c                 | 
3a01c                 | if HAVE_HIDPAD
3a01c     00 00 00 00 
      ...             
3a0d8     00 00 00 00 
3a0dc     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a0e0                 | end
3a0e0                 | 
3a0e0                 | ' HUB descriptor
3a0e0     00          | hub_descr       byte    0   ' bDescLength
3a0e1     00          |                 byte    0   ' bDescriptorType
3a0e2     00          |                 byte    0   ' bNbrPorts
3a0e3     00 00       |                 word    0   ' wHubCharacteristics
3a0e5     00          |                 byte    0   ' bPwrOn2PwrGood
3a0e6     00          |                 byte    0   ' bHubContrCurrent
3a0e7     00          |                 byte    0   ' DeviceRemoveable
3a0e8     00          |                 byte    0   ' PortPwrCtrlMask
3a0e9                 | 
3a0e9                 | usb_cache_end
3a0e9                 | 
3a0e9                 | if HAVE_MOUSE
3a0e9     00 00 00 00 | mouse_xacc      long 0
3a0ed     00 00 00 00 | mouse_yacc      long 0
3a0f1     00 00 00 00 | mouse_zacc      long 0
3a0f5     00          | mouse_bstate    byte 0
3a0f6     00          | mouse_lpending  byte 0
3a0f7     00          | mouse_rpending  byte 0
3a0f8     00          | mouse_mpending  byte 0
3a0f9     00          | mouse_lock      byte 0
3a0fa     00 00 00    |                 byte 0[3] ' padding
3a0fd                 | end
3a0fd                 | 
3a0fd     00 00 00 00 
      ...             
3a175     00 00 00 00 
3a179     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a17d     00 00 00 00 
3a181     00 00 00 00 
3a185     00 00 00 00 
3a189     00 00 00 00 
3a18d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a18f     00 00 00 00 
      ...             
3a287     00 00 00 00 
3a28b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a28f                 | 
3a28f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a290                 | 	alignl
3a290                 | _audio096_spin2_dat_
3a290                 | 
3a290                 | audio       org     0
3a290                 | 
3a290     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a294     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a298     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a29c                 |  
3a29c     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a2a0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a2a4     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a2a8     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a2ac                 | 
3a2ac     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a2b0     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a2b4     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a2b8     0F 24 06 FC |             wrpin   dac2,#right
3a2bc     0F 00 1E FC |             wxpin   #256,#right    
3a2c0     41 9C 64 FD |             dirh    #left addpins 1
3a2c4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a2c8     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a2cc     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a2d0                 |             
3a2d0                 | '---------------------------------------------------------------------------------        
3a2d0                 | '----------------- The main loop -------------------------------------------------
3a2d0                 | '---------------------------------------------------------------------------------
3a2d0                 | 
3a2d0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a2d4     10 00 90 CD |       if_c  jmp     #loop1
3a2d8                 |   
3a2d8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a2dc     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a2e0     D5 00 80 F1 |             sub     0-0,a40000000
3a2e4     FD 01 6E FB |             djnz    cn,#p402
3a2e8                 |     
3a2e8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a2ec     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a2f0     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a2f4     01 00 06 C6 |     if_c    mov     cn,#1
3a2f8     DA 02 3A F3 |             fle     ct,time3 wcz
3a2fc     02 00 06 C6 |     if_c    mov     cn,#2     
3a300     DB 02 3A F3 |             fle     ct,time4 wcz
3a304     03 00 06 C6 |     if_c    mov     cn,#3
3a308     DC 02 3A F3 |             fle     ct,time5 wcz
3a30c     04 00 06 C6 |     if_c    mov     cn,#4
3a310     DD 02 3A F3 |             fle     ct,time6 wcz
3a314     05 00 06 C6 |     if_c    mov     cn,#5
3a318     DE 02 3A F3 |             fle     ct,time7 wcz
3a31c     06 00 06 C6 |     if_c    mov     cn,#6
3a320     DF 02 3A F3 |             fle     ct,time8 wcz
3a324     07 00 06 C6 |     if_c    mov     cn,#7
3a328                 | 
3a328                 | 
3a328                 | '----------------------------------------------------------------------------------
3a328                 | '------------- Compute channel samples --------------------------------------------
3a328                 | '----------------------------------------------------------------------------------
3a328                 | 
3a328                 | 
3a328     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a32c     06 C0 65 F0 |             shl     channeladd,#6
3a330     E0 F0 03 F1 |             add     ptra,channeladd
3a334                 | 
3a334     28 16 64 FD |             setq    #11                        	' read parameters
3a338     00 D7 05 FB |             rdlong  pointer0,ptra
3a33c                 |     	    
3a33c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a340     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a344     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a348     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a34c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a350     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a354     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a358     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a35c                 |             
3a35c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a360     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a364     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a368                 | 
3a368     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a36c     EC 08 3A F9 |             getword oldrs,sample0,#1
3a370     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a374     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a378     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a37c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a380                 | 
3a380     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a384     00 04 02 F6 |             mov     dt0,0-0    
3a388     D7 04 82 F1 |             sub     dt0,time0
3a38c                 |             
3a38c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a390     FB 00 00 F1 |             add     0-0,afreq0  	
3a394                 |             
3a394                 | '---- envelopes
3a394                 |             
3a394     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a398     20 00 00 AF 
3a39c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a3a0     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a3a4                 | 
3a3a4     FB 48 02 F6 |             mov     envs1,afreq0
3a3a8     F5 48 02 FA |             mul     envs1,envspd0
3a3ac     24 E7 01 F1 |             add     envph0,envs1 
3a3b0                 | 
3a3b0     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a3b4     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a3b8     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a3bc     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a3c0     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a3c4     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a3c8     00 46 06 36 |     if_ge   mov     envlo,#0
3a3cc     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a3d0     16 E6 65 30 |     if_ge   shl     envph0,#22
3a3d4                 | 
3a3d4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a3d8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a3dc     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a3e0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a3e4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a3e8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a3ec     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a3f0     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a3f4     23 49 02 FA |             mul     envs1,envlo
3a3f8     25 49 02 F1 |             add     envs1,envs2
3a3fc     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a400                 |             
3a400     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a404     1B C6 61 AD |     if_z    getrnd  spl
3a408     58 00 90 AD |     if_z    jmp     #p406
3a40c                 |  
3a40c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a410     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a414     08 D6 45 F0 |             shr     pointer0,#8
3a418                 |          
3a418     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a41c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a420     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a424     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a428                 |         
3a428     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a42c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a430     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a434                 |             
3a434     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a438     ED C4 01 F1 |             add     qq,sstart0            
3a43c                 | 
3a43c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a440     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a444     1C 01 B0 1D |     if_gt   call    #cache_read
3a448                 |          
3a448     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a44c     08 C6 65 50 |     if_nz   shl     spl,#8
3a450     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a454     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a458     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a45c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a460     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a464                 | 
3a464                 | 
3a464     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a468     00 C6 01 F6 |             mov     spl,0-0
3a46c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a470     00 C6 01 F6 |             mov     spl,0-0
3a474                 | 
3a474     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a478     00 0A 02 F6 |             mov     ls0,0-0
3a47c     20 00 00 FF 
3a480     00 C4 05 F6 |             mov     qq,##16384
3a484     FE C4 81 F1 |             sub     qq,apan0
3a488     E2 C6 31 FA |             scas    spl,qq
3a48c     00 0C 02 F6 |             mov     rs0, 0-0
3a490                 | 
3a490     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a494     06 11 02 F1 |             add     rs,rs0
3a498     03 0F 82 F1 |             sub     ls,oldls
3a49c     05 0F 02 F1 |             add     ls,ls0
3a4a0                 |    
3a4a0     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a4a4     05 D9 21 F9 |             setword sample0,ls0,#0
3a4a8                 |             
3a4a8     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a4ac     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a4b0     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a4b4                 |   '  if_z    mov     sample0,#0
3a4b4     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a4b8     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a4bc     04 00 00 AF 
3a4c0     00 B0 05 A1 |     if_z    add     time1,##2048
3a4c4     D8 B2 01 A6 |     if_z    mov     time2,time1
3a4c8     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a4cc                 | 
3a4cc     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a4d0     00 D7 65 FC |             wrlong  pointer0,ptra
3a4d4     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a4d8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a4dc                 |                       
3a4dc     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a4e0     FF C3 25 A7 |     if_z    decmod  front, #511          
3a4e4                 |          
3a4e4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a4e8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a4ec     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a4f0     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a4f4                 | 	    
3a4f4                 | 		    
3a4f4     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a4f8     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a4fc     04 15 02 F6 |             mov     newsample, oldrs       
3a500                 | 
3a500     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a504     02 AF 01 F1 |             add     time0,dt0    
3a508                 |                                      
3a508     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a50c     D8 FD 9F AD |     if_z    jmp     #loop1
3a510     02 C5 01 F6 |             mov     qq,dt0
3a514                 | 
3a514                 |     
3a514                 |             
3a514     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a518     40 00 90 3D |     if_nc   jmp     #p399
3a51c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a520     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a524     F4 FF 9F AD |     if_e    jmp     #p398   
3a528                 | 		
3a528     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a52c     20 00 90 AD |     if_z    jmp     #p302	   
3a530                 |   
3a530     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a534     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a538     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a53c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a540     60 1E 66 FC |             wrlong  scptr2,#$60
3a544     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a548     01 00 00 CF 
3a54c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a550                 | 			    
3a550     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a554     00 00 00 FF 
3a558     FF C3 05 F7 |             incmod  front, ##511
3a55c     ED C5 6D FB | p399        djnz    qq,#p301
3a560                 |             
3a560     6C FD 9F FD |             jmp     #loop            'loop
3a564                 | 
3a564                 | '----------------------------------------------------------------------------------
3a564                 | '------------- This is the end of the main loop -----------------------------------
3a564                 | '----------------------------------------------------------------------------------
3a564                 | 
3a564                 | '----------------------------------------------------------------------------------
3a564                 | '------------- PSRAM cache ----------- --------------------------------------------
3a564                 | '----------------------------------------------------------------------------------
3a564                 | 
3a564                 | ' There are 8 cache pointers for 8 channels
3a564                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a564                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a564                 | 
3a564                 | 
3a564     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a568                 |             
3a568     E2 40 02 F6 | 	    mov     addrhi,qq		
3a56c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a570     14 01 96 F9 | 	    alts    cn,#cache1            
3a574     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a578     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a57c                 | 	
3a57c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a580     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a584     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a588     08 38 66 F0 | 	    shl     cmd,#8
3a58c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a590     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a594     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a598     13 3B 02 F1 |             add     hubaddr,hubptr 
3a59c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a5a0     28 04 64 FD |             setq    #2                          ' write 3 longs
3a5a4     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a5a8     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a5ac     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a5b0                 |             
3a5b0                 | 	
3a5b0     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a5b4     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a5b8     13 C5 01 F1 | 	    add     qq,hubptr
3a5bc     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a5c0     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a5c4                 |           
3a5c4                 | 
3a5c4                 | '--------------------------------------------------------------------------
3a5c4                 | '------ Interrupt service -------------------------------------------------
3a5c4                 | '------ Output the sample, get the next one if exists ---------------------
3a5c4                 | '--------------------------------------------------------------------------
3a5c4                 | 
3a5c4     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a5c8     0F D0 25 FC |             wypin   rsample,#right       '4
3a5cc     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a5d0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a5d4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a5d8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a5dc     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a5e0                 |     
3a5e0     F5 FF 3B FB |             reti1                        '17/19 
3a5e4                 |           
3a5e4                 | '---------------------------------------------------------------------------
3a5e4                 | '-------- End of interrupt -------------------------------------------------
3a5e4                 | '---------------------------------------------------------------------------    
3a5e4                 | 
3a5e4                 | 
3a5e4                 | '---------------------------------------------------------------------------
3a5e4                 | '------- Variables ---------------------------------------------------------
3a5e4                 | '---------------------------------------------------------------------------
3a5e4                 | 
3a5e4                 | ' constants
3a5e4                 | 
3a5e4     00 00 00 40 | a40000000   long $40000000
3a5e8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a5ec                 | 
3a5ec                 | ' Time variables
3a5ec                 | 
3a5ec     00 00 00 00 | time0       long 0    ' Global sample computing time
3a5f0     01 00 00 00 | time1       long 1    ' Local channels time
3a5f4     02 00 00 00 | time2       long 2
3a5f8     03 00 00 00 | time3       long 3
3a5fc     04 00 00 00 | time4       long 4
3a600     05 00 00 00 | time5       long 5
3a604     06 00 00 00 | time6       long 6
3a608     07 00 00 00 | time7       long 7
3a60c     08 00 00 00 | time8       long 8
3a610                 | 
3a610     00 00 00 00 | channeladd long 0
3a614                 | 
3a614     00 00 00 00 | front       long 0
3a618                 | 
3a618                 | ' temporary variables 
3a618     00 00 00 00 | qq          long 0
3a61c     00 00 00 00 | spl         long 0
3a620     00 00 00 00 | zero        long 0
3a624     00 00 00 00 | mailbox     long 0
3a628     00 00 00 00 | mailbox2 long 0
3a62c                 | 
3a62c                 | ' Interrupt ISR variables
3a62c                 | 
3a62c     00 00 00 00 | lsample     long 0
3a630     00 00 00 00 | rsample     long 0
3a634     00 00 00 00 | lsnext      long 0
3a638     00 00 00 00 | rsnext      long 0 
3a63c                 | 
3a63c                 | ' channel parameter block
3a63c                 | 
3a63c     00 00 00 00 | pointer0    long 0     
3a640     00 00 00 00 | sample0     long 0
3a644     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a648     00 00 00 00 | lstart0     long 0
3a64c     00 00 00 00 | lend0       long 0
3a650     00 00 00 00 | volpan0     long 0
3a654     00 00 00 00 | freqskip0   long 0
3a658     00 00 00 00 | command0    long 0
3a65c     00 00 00 00 | envph0	    long 0
3a660     00 00 00 00 | envptr0	    long 0
3a664     00 00 00 00 | envspd0	    long 0
3a668     00 00 00 00 | envlen0	    long 0
3a66c     00 00 00 00 | res5	    long 0
3a670     00 00 00 00 | res6	    long 0
3a674     00 00 00 00 | res7	    long 0
3a678     00 00 00 00 | res8	    long 0
3a67c                 | 
3a67c     00 00 00 00 | afreq0      long 0
3a680     00 00 00 00 | askip0      long 0
3a684     00 00 00 00 | avol0       long 0
3a688     00 00 00 00 | apan0       long 0
3a68c                 | 
3a68c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a690     00 00 00 00 | cn          long 0
3a694     00 00 00 00 | ct          long 0
3a698     00 00 00 00 | dt0         long 0
3a69c                 | 
3a69c                 | ' Samples
3a69c     00 00 00 00 | oldls       long 0
3a6a0     00 00 00 00 | oldrs       long 0
3a6a4                 | 
3a6a4     00 00 00 00 | ls0         long 0
3a6a8     00 00 00 00 | rs0         long 0
3a6ac                 | 
3a6ac     00 00 00 00 | ls          long 0    
3a6b0     00 00 00 00 | rs          long 0
3a6b4                 | 
3a6b4     00 00 00 00 | oldsample   long 0
3a6b8     00 00 00 00 | newsample   long 0
3a6bc                 | 
3a6bc     00 00 00 00 | nrsample    long 0
3a6c0     00 00 00 00 | nlsample    long 0
3a6c4                 | 
3a6c4     00 00 00 00 | scbase long 0
3a6c8     00 00 00 00 | scptr long 0
3a6cc     00 00 00 00 | scptr2 long 0
3a6d0     00 00 00 00 | scope long 0
3a6d4                 | 
3a6d4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a6d8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a6dc                 | 
3a6dc     00 18 07 00 | hubptr      long $71800
3a6e0     00 00 00 00 | cache1      long 0
3a6e4     00 00 00 00 | cache2      long 0
3a6e8     00 00 00 00 | cache3      long 0
3a6ec     00 00 00 00 | cache4      long 0
3a6f0     00 00 00 00 | cache5      long 0
3a6f4     00 00 00 00 | cache6      long 0
3a6f8     00 00 00 00 | cache7      long 0
3a6fc     00 00 00 00 | cache8      long 0
3a700                 | 
3a700                 | 
3a700     00 00 00 00 | cmd         long 0
3a704     00 00 00 00 | hubaddr     long 0
3a708     00 01 00 00 | count       long 256
3a70c     00 00 00 00 | addrlo long 0
3a710     00 00 00 00 | addrhi long 0
3a714     00 00 00 00 | pointer00 long 0
3a718     00 00 00 00 | envhi long 0
3a71c     00 00 00 00 | envlo long 0
3a720     00 00 00 00 | envs1 long 0
3a724     00 00 00 00 | envs2 long 0
3a728     00 00 00 00 | noise0 long 0
3a72c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a730     00 00 00 00 
3a734     00 00 00 00 | null  			long 	0,0           ' for channel reset
3a738                 | 	alignl
3a738                 | __system__dat_
3a738     00 00 00 00 
3a73c     00 00 00 00 | 	byte	$00[8]
3a740     03 00 00 00 
3a744     00 00 00 00 
3a748     00 00 00 00 
3a74c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a750     00 00 00 00 
      ...             
3a9dc     00 00 00 00 
3a9e0     00 00 00 00 | 	byte	$00[660]
3a9e4     00 00 50 09 | 	long	(149 {__system____root_opendir})<<20
3a9e8     00 00 60 09 | 	long	(150 {__system____root_closedir})<<20
3a9ec     00 00 70 09 | 	long	(151 {__system____root_readdir})<<20
3a9f0     00 00 80 09 | 	long	(152 {__system____root_stat})<<20
3a9f4     00 00 00 00 
3a9f8     00 00 00 00 
3a9fc     00 00 00 00 
3aa00     00 00 00 00 
3aa04     00 00 00 00 
3aa08     00 00 00 00 
3aa0c     00 00 00 00 | 	byte	$00[28]
3aa10     78 AA 03 00 | 	long	@@@__system__dat_ + 832
3aa14     7B AA 03 00 | 	long	@@@__system__dat_ + 835
3aa18     9C AA 03 00 | 	long	@@@__system__dat_ + 868
3aa1c     B5 AA 03 00 | 	long	@@@__system__dat_ + 893
3aa20     D0 AA 03 00 | 	long	@@@__system__dat_ + 920
3aa24     EA AA 03 00 | 	long	@@@__system__dat_ + 946
3aa28     FA AA 03 00 | 	long	@@@__system__dat_ + 962
3aa2c     0C AB 03 00 | 	long	@@@__system__dat_ + 980
3aa30     1E AB 03 00 | 	long	@@@__system__dat_ + 998
3aa34     30 AB 03 00 | 	long	@@@__system__dat_ + 1016
3aa38     3C AB 03 00 | 	long	@@@__system__dat_ + 1028
3aa3c     4D AB 03 00 | 	long	@@@__system__dat_ + 1045
3aa40     61 AB 03 00 | 	long	@@@__system__dat_ + 1065
3aa44     6B AB 03 00 | 	long	@@@__system__dat_ + 1075
3aa48     7B AB 03 00 | 	long	@@@__system__dat_ + 1091
3aa4c     8A AB 03 00 | 	long	@@@__system__dat_ + 1106
3aa50     A0 AB 03 00 | 	long	@@@__system__dat_ + 1128
3aa54     B9 AB 03 00 | 	long	@@@__system__dat_ + 1153
3aa58     CD AB 03 00 | 	long	@@@__system__dat_ + 1173
3aa5c     DB AB 03 00 | 	long	@@@__system__dat_ + 1187
3aa60     EF AB 03 00 | 	long	@@@__system__dat_ + 1207
3aa64     FB AB 03 00 | 	long	@@@__system__dat_ + 1219
3aa68     0D AC 03 00 | 	long	@@@__system__dat_ + 1237
3aa6c     25 AC 03 00 | 	long	@@@__system__dat_ + 1261
3aa70     37 AC 03 00 | 	long	@@@__system__dat_ + 1279
3aa74     4A AC 03 00 | 	long	@@@__system__dat_ + 1298
3aa78     4F 4B 00 4E 
3aa7c     75 6D 65 72 
3aa80     69 63 61 6C 
3aa84     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3aa88     75 6D 65 6E 
3aa8c     74 20 6F 75 
3aa90     74 20 6F 66 
3aa94     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3aa98     61 69 6E 00 
3aa9c     52 65 73 75 
3aaa0     6C 74 20 6E 
3aaa4     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3aaa8     65 70 72 65 
3aaac     73 65 6E 74 
3aab0     61 62 6C 65 
3aab4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3aab8     65 67 61 6C 
3aabc     20 6D 75 6C 
3aac0     74 69 62 79 
3aac4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3aac8     65 71 75 65 
3aacc     6E 63 65 00 
3aad0     4E 6F 20 73 
3aad4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3aad8     66 69 6C 65 
3aadc     20 6F 72 20 
3aae0     64 69 72 65 
3aae4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3aae8     79 00 42 61 
3aaec     64 20 66 69 
3aaf0     6C 65 20 6E 
3aaf4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3aaf8     72 00 50 65 
3aafc     72 6D 69 73 
3ab00     73 69 6F 6E 
3ab04     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ab08     69 65 64 00 
3ab0c     4E 6F 74 20 
3ab10     65 6E 6F 75 
3ab14     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ab18     65 6D 6F 72 
3ab1c     79 00 54 65 
3ab20     6D 70 6F 72 
3ab24     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ab28     66 61 69 6C 
3ab2c     75 72 65 00 
3ab30     46 69 6C 65 
3ab34     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ab38     73 74 73 00 
3ab3c     49 6E 76 61 
3ab40     6C 69 64 20 
3ab44     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3ab48     6D 65 6E 74 
3ab4c     00 54 6F 6F 
3ab50     20 6D 61 6E 
3ab54     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ab58     65 6E 20 66 
3ab5c     69 6C 65 73 
3ab60     00 49 2F 4F 
3ab64     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3ab68     6F 72 00 4E 
3ab6c     6F 74 20 61 
3ab70     20 64 69 72 
3ab74     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3ab78     72 79 00 49 
3ab7c     73 20 61 20 
3ab80     64 69 72 65 
3ab84     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ab88     79 00 52 65 
3ab8c     61 64 20 6F 
3ab90     6E 6C 79 20 
3ab94     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3ab98     20 73 79 73 
3ab9c     74 65 6D 00 
3aba0     46 75 6E 63 
3aba4     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3aba8     20 6E 6F 74 
3abac     20 69 6D 70 
3abb0     6C 65 6D 65 
3abb4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3abb8     00 44 69 72 
3abbc     65 63 74 6F 
3abc0     72 79 20 6E 
3abc4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3abc8     6D 70 74 79 
3abcc     00 4E 61 6D 
3abd0     65 20 74 6F 
3abd4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3abd8     6E 67 00 44 
3abdc     65 76 69 63 
3abe0     65 20 6E 6F 
3abe4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3abe8     65 6B 61 62 
3abec     6C 65 00 42 
3abf0     61 64 20 61 
3abf4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3abf8     73 73 00 42 
3abfc     72 6F 6B 65 
3ac00     6E 20 63 6F 
3ac04     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ac08     74 69 6F 6E 
3ac0c     00 44 65 76 
3ac10     69 63 65 20 
3ac14     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ac18     65 73 6F 75 
3ac1c     72 63 65 20 
3ac20     62 75 73 79 
3ac24     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ac28     73 73 20 64 
3ac2c     65 76 69 63 
3ac30     65 20 6C 69 
3ac34     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ac38     6F 20 73 70 
3ac3c     61 63 65 20 
3ac40     6F 6E 20 64 
3ac44     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3ac48     65 00 55 6E 
3ac4c     6B 6E 6F 77 
3ac50     6E 20 65 72 
3ac54     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ac58     00 00 00 00 
3ac5c     00 00 00 00 | 	byte	$00[8]
3ac60     05 00 00 00 
3ac64     00 00 00 00 
3ac68     00 00 00 00 
3ac6c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac70     00 00 00 00 | 	byte	$00, $00, $00, $00
3ac74     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3ac78     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3ac7c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ac80     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0697})<<20
3ac84     00 00 00 0B | 	long	(176 {__system____dummy_flush_0698})<<20
3ac88     00 00 00 00 
3ac8c     00 00 00 00 | 	byte	$00[8]
3ac90     01 00 00 00 
3ac94     06 00 00 00 
3ac98     00 00 00 00 
3ac9c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aca0     00 00 00 00 
3aca4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3aca8     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3acac     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3acb0     00 00 00 00 | 	byte	$00, $00, $00, $00
3acb4     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0697})<<20
3acb8     00 00 00 0B | 	long	(176 {__system____dummy_flush_0698})<<20
3acbc     00 00 00 00 
3acc0     00 00 00 00 | 	byte	$00[8]
3acc4     01 00 00 00 
3acc8     06 00 00 00 
3accc     00 00 00 00 
3acd0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3acd4     00 00 00 00 
3acd8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3acdc     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3ace0     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3ace4     00 00 00 00 | 	byte	$00, $00, $00, $00
3ace8     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0697})<<20
3acec     00 00 00 0B | 	long	(176 {__system____dummy_flush_0698})<<20
3acf0     00 00 00 00 
      ...             
3ae60     00 00 00 00 
3ae64     00 00 00 00 | 	byte	$00[376]
3ae68     6C AE 03 00 | 	long	@@@__system__dat_ + 1844
3ae6c     00 00 00 00 
3ae70     00 00 00 00 
3ae74     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae78                 | 	alignl
3ae78                 | _fatfs_cc_dat_
3ae78     C7 00 FC 00 
3ae7c     E9 00 E2 00 
3ae80     E4 00 E0 00 
3ae84     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3ae88     EA 00 EB 00 
3ae8c     E8 00 EF 00 
3ae90     EE 00 EC 00 
3ae94     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3ae98     C9 00 E6 00 
3ae9c     C6 00 F4 00 
3aea0     F6 00 F2 00 
3aea4     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3aea8     FF 00 D6 00 
3aeac     DC 00 F8 00 
3aeb0     A3 00 D8 00 
3aeb4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3aeb8     E1 00 ED 00 
3aebc     F3 00 FA 00 
3aec0     F1 00 D1 00 
3aec4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3aec8     BF 00 AE 00 
3aecc     AC 00 BD 00 
3aed0     BC 00 A1 00 
3aed4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3aed8     91 25 92 25 
3aedc     93 25 02 25 
3aee0     24 25 C1 00 
3aee4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3aee8     A9 00 63 25 
3aeec     51 25 57 25 
3aef0     5D 25 A2 00 
3aef4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3aef8     14 25 34 25 
3aefc     2C 25 1C 25 
3af00     00 25 3C 25 
3af04     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3af08     5A 25 54 25 
3af0c     69 25 66 25 
3af10     60 25 50 25 
3af14     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3af18     F0 00 D0 00 
3af1c     CA 00 CB 00 
3af20     C8 00 31 01 
3af24     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3af28     CF 00 18 25 
3af2c     0C 25 88 25 
3af30     84 25 A6 00 
3af34     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3af38     D3 00 DF 00 
3af3c     D4 00 D2 00 
3af40     F5 00 D5 00 
3af44     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3af48     DE 00 DA 00 
3af4c     DB 00 D9 00 
3af50     FD 00 DD 00 
3af54     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3af58     AD 00 B1 00 
3af5c     17 20 BE 00 
3af60     B6 00 A7 00 
3af64     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3af68     B0 00 A8 00 
3af6c     B7 00 B9 00 
3af70     B3 00 B2 00 
3af74     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3af78     61 00 1A 03 
3af7c     E0 00 17 03 
3af80     F8 00 07 03 
3af84     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3af88     78 01 00 01 
3af8c     30 01 32 01 
3af90     06 01 39 01 
3af94     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3af98     2E 01 79 01 
3af9c     06 01 80 01 
3afa0     4D 00 43 02 
3afa4     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3afa8     82 01 84 01 
3afac     84 01 86 01 
3afb0     87 01 87 01 
3afb4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3afb8     8B 01 8B 01 
3afbc     8D 01 8E 01 
3afc0     8F 01 90 01 
3afc4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3afc8     93 01 94 01 
3afcc     F6 01 96 01 
3afd0     97 01 98 01 
3afd4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3afd8     9B 01 9C 01 
3afdc     9D 01 20 02 
3afe0     9F 01 A0 01 
3afe4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3afe8     A2 01 A4 01 
3afec     A4 01 A6 01 
3aff0     A7 01 A7 01 
3aff4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3aff8     AB 01 AC 01 
3affc     AC 01 AE 01 
3b000     AF 01 AF 01 
3b004     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b008     B3 01 B3 01 
3b00c     B5 01 B5 01 
3b010     B7 01 B8 01 
3b014     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b018     BB 01 BC 01 
3b01c     BC 01 BE 01 
3b020     F7 01 C0 01 
3b024     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b028     C3 01 C4 01 
3b02c     C5 01 C4 01 
3b030     C7 01 C8 01 
3b034     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b038     CB 01 CA 01 
3b03c     CD 01 10 01 
3b040     DD 01 01 00 
3b044     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b048     12 01 F3 01 
3b04c     03 00 F1 01 
3b050     F4 01 F4 01 
3b054     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b058     22 02 12 01 
3b05c     3A 02 09 00 
3b060     65 2C 3B 02 
3b064     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b068     66 2C 3F 02 
3b06c     40 02 41 02 
3b070     41 02 46 02 
3b074     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b078     40 00 81 01 
3b07c     86 01 55 02 
3b080     89 01 8A 01 
3b084     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b088     5A 02 90 01 
3b08c     5C 02 5D 02 
3b090     5E 02 5F 02 
3b094     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b098     62 02 94 01 
3b09c     64 02 65 02 
3b0a0     66 02 67 02 
3b0a4     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b0a8     6A 02 62 2C 
3b0ac     6C 02 6D 02 
3b0b0     6E 02 9C 01 
3b0b4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b0b8     9D 01 73 02 
3b0bc     74 02 9F 01 
3b0c0     76 02 77 02 
3b0c4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b0c8     7A 02 7B 02 
3b0cc     7C 02 64 2C 
3b0d0     7E 02 7F 02 
3b0d4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b0d8     82 02 A9 01 
3b0dc     84 02 85 02 
3b0e0     86 02 87 02 
3b0e4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b0e8     B1 01 B2 01 
3b0ec     45 02 8D 02 
3b0f0     8E 02 8F 02 
3b0f4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b0f8     B7 01 7B 03 
3b0fc     03 00 FD 03 
3b100     FE 03 FF 03 
3b104     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b108     86 03 88 03 
3b10c     89 03 8A 03 
3b110     B1 03 11 03 
3b114     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b118     A3 03 A3 03 
3b11c     C4 03 08 03 
3b120     CC 03 03 00 
3b124     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b128     8F 03 D8 03 
3b12c     18 01 F2 03 
3b130     0A 00 F9 03 
3b134     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b138     F5 03 F6 03 
3b13c     F7 03 F7 03 
3b140     F9 03 FA 03 
3b144     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b148     20 03 50 04 
3b14c     10 07 60 04 
3b150     22 01 8A 04 
3b154     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b158     0E 01 CF 04 
3b15c     01 00 C0 04 
3b160     D0 04 44 01 
3b164     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b168     00 00 7D 1D 
3b16c     01 00 63 2C 
3b170     00 1E 96 01 
3b174     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b178     00 1F 08 06 
3b17c     10 1F 06 06 
3b180     20 1F 08 06 
3b184     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b188     40 1F 06 06 
3b18c     51 1F 07 00 
3b190     59 1F 52 1F 
3b194     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b198     5D 1F 56 1F 
3b19c     5F 1F 60 1F 
3b1a0     08 06 70 1F 
3b1a4     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b1a8     BB 1F C8 1F 
3b1ac     C9 1F CA 1F 
3b1b0     CB 1F DA 1F 
3b1b4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b1b8     F9 1F EA 1F 
3b1bc     EB 1F FA 1F 
3b1c0     FB 1F 80 1F 
3b1c4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b1c8     08 06 A0 1F 
3b1cc     08 06 B0 1F 
3b1d0     04 00 B8 1F 
3b1d4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b1d8     BC 1F CC 1F 
3b1dc     01 00 C3 1F 
3b1e0     D0 1F 02 06 
3b1e4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b1e8     E5 1F 01 00 
3b1ec     EC 1F F3 1F 
3b1f0     01 00 FC 1F 
3b1f4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b1f8     32 21 70 21 
3b1fc     10 02 84 21 
3b200     01 00 83 21 
3b204     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b208     30 2C 2F 04 
3b20c     60 2C 02 01 
3b210     67 2C 06 01 
3b214     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b218     80 2C 64 01 
3b21c     00 2D 26 08 
3b220     41 FF 1A 03 
3b224     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b228     05 07 09 0E 
3b22c     10 12 14 16 
3b230     18 1C 1E 43 
3b234     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b238     41 41 43 45 
3b23c     45 45 49 49 
3b240     49 41 41 45 
3b244     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b248     4F 55 55 59 
3b24c     4F 55 4F 9C 
3b250     4F 9E 9F 41 
3b254     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b258     A5 A6 A7 A8 
3b25c     A9 AA AB AC 
3b260     AD AE AF B0 
3b264     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b268     41 41 41 B8 
3b26c     B9 BA BB BC 
3b270     BD BE BF C0 
3b274     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b278     C5 41 41 C8 
3b27c     C9 CA CB CC 
3b280     CD CE CF D1 
3b284     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b288     49 49 49 49 
3b28c     D9 DA DB DC 
3b290     DD 49 DF 4F 
3b294     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b298     4F E6 E8 E8 
3b29c     55 55 55 59 
3b2a0     59 EE EF F0 
3b2a4     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b2a8     F5 F6 F7 F8 
3b2ac     F9 FA FB FC 
3b2b0     FD FE FF 00 
3b2b4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b2b8     00 00 00 00 | 	byte	$00, $00, $00, $00
3b2bc     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_close})<<20
3b2c0     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_read})<<20
3b2c4     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_write})<<20
3b2c8     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_lseek})<<20
3b2cc     00 00 00 0A | 	long	(160 {_fatfs_cc_v_ioctl})<<20
3b2d0     00 00 10 0B | 	long	(177 {_fatfs_cc_v_flush})<<20
3b2d4     00 00 00 00 
3b2d8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b2dc     00 00 10 0A | 	long	(161 {_fatfs_cc_v_open})<<20
3b2e0     00 00 20 0A | 	long	(162 {_fatfs_cc_v_creat})<<20
3b2e4     00 00 30 0A | 	long	(163 {_fatfs_cc_v_opendir})<<20
3b2e8     00 00 40 0A | 	long	(164 {_fatfs_cc_v_closedir})<<20
3b2ec     00 00 50 0A | 	long	(165 {_fatfs_cc_v_readdir})<<20
3b2f0     00 00 60 0A | 	long	(166 {_fatfs_cc_v_stat})<<20
3b2f4     00 00 70 0A | 	long	(167 {_fatfs_cc_v_mkdir})<<20
3b2f8     00 00 80 0A | 	long	(168 {_fatfs_cc_v_rmdir})<<20
3b2fc     00 00 90 0A | 	long	(169 {_fatfs_cc_v_remove})<<20
3b300     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_rename})<<20
3b304     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_init})<<20
3b308     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_deinit})<<20
3b30c     FF FF FF FF 
3b310     1F 00 00 00 
3b314     1C 00 00 00 
3b318     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b31c     1E 00 00 00 
3b320     1F 00 00 00 
3b324     1E 00 00 00 
3b328     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b32c     1F 00 00 00 
3b330     1E 00 00 00 
3b334     1F 00 00 00 
3b338     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b33c     1F 00 00 00 
3b340     00 00 00 00 
3b344     1F 00 00 00 
3b348     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b34c     5A 00 00 00 
3b350     78 00 00 00 
3b354     97 00 00 00 
3b358     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b35c     D4 00 00 00 
3b360     F3 00 00 00 
3b364     11 01 00 00 
3b368     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b36c     4E 01 00 00 
3b370     6D 01 00 00 
3b374     FF FF FF FF 
3b378     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b37c     00 00 00 00 
      ...             
3b394     00 00 00 00 
3b398     00 00 00 00 | 	byte	$00[32]
3b39c     BA B3 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b3a0     BE B3 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b3a4     00 00 00 00 
3b3a8     00 00 00 00 
3b3ac     00 00 00 00 
3b3b0     00 00 00 00 
3b3b4     00 00       | 	byte	$00[18]
3b3b6     3F 3F 3F 00 
3b3ba     55 43 54 00 
3b3be     55 43 54 00 
3b3c2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b3c6     00 00 00 00 
3b3ca     00 00 00    | 	byte	$00[7]
3b3cd     CA 9A 3B 00 
3b3d1     00 00 00 01 
3b3d5     01 01 01 01 
3b3d9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b3dd     91 11 11 11 
3b3e1     11 01 01 01 
3b3e5     01 01 01 01 
3b3e9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b3ed     01 01 01 01 
3b3f1     01 01 01    | 	byte	$01[7]
3b3f4     90 20 20 20 
3b3f8     20 20 20 20 
3b3fc     20 20 20 20 
3b400     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b404     42 42 42 42 
3b408     42 42 42 42 
3b40c     42 42       | 	byte	$42[10]
3b40e     20 20 20 20 
3b412     20 20 20    | 	byte	$20[7]
3b415     44 44 44 44 
3b419     44 44       | 	byte	$44[6]
3b41b     04 04 04 04 
3b41f     04 04 04 04 
3b423     04 04 04 04 
3b427     04 04 04 04 
3b42b     04 04 04 04 | 	byte	$04[20]
3b42f     20 20 20 20 
3b433     20 20       | 	byte	$20[6]
3b435     48 48 48 48 
3b439     48 48       | 	byte	$48[6]
3b43b     08 08 08 08 
3b43f     08 08 08 08 
3b443     08 08 08 08 
3b447     08 08 08 08 
3b44b     08 08 08 08 | 	byte	$08[20]
3b44f     20 20 20 20 
3b453     01 00 00 00 
3b457     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b458                 | __methodtable__
3b458     E0 2C 01 00 | 	long	@_do_no_command
3b45c     24 AB 01 00 | 	long	@_do_plus
3b460     48 9B 01 00 | 	long	@_do_minus
3b464     0C AA 01 00 | 	long	@_do_or
3b468     C8 A1 01 00 | 	long	@_do_mul
3b46c     30 86 01 00 | 	long	@_do_fdiv
3b470     20 7E 01 00 | 	long	@_do_and
3b474     38 7F 01 00 | 	long	@_do_div
3b478     A8 9F 01 00 | 	long	@_do_mod
3b47c     D8 B1 01 00 | 	long	@_do_shl
3b480     F0 B2 01 00 | 	long	@_do_shr
3b484     10 B0 01 00 | 	long	@_do_power
3b488     78 74 01 00 | 	long	@_do_getvar
3b48c     50 48 01 00 | 	long	@_do_push
3b490     78 6E 01 00 | 	long	@_do_assign
3b494     58 D4 00 00 | 	long	@_do_cls
3b498     FC 26 01 00 | 	long	@_do_new
3b49c     98 40 01 00 | 	long	@_do_plot
3b4a0     24 F5 00 00 | 	long	@_do_draw
3b4a4     00 43 01 00 | 	long	@_do_print
3b4a8     38 D2 00 00 | 	long	@_do_circle
3b4ac     58 F7 00 00 | 	long	@_do_fcircle
3b4b0     E4 C6 00 00 | 	long	@_do_box
3b4b4     3C FC 00 00 | 	long	@_do_frame
3b4b8     98 D4 00 00 | 	long	@_do_color
3b4bc     CC F9 00 00 | 	long	@_do_for
3b4c0     1C 29 01 00 | 	long	@_do_next
3b4c4     24 16 01 00 | 	long	@_do_list
3b4c8     98 54 01 00 | 	long	@_do_run
3b4cc     80 F6 00 00 | 	long	@_do_error
3b4d0     4C 08 01 00 | 	long	@_do_fast_goto
3b4d4     3C 09 01 00 | 	long	@_do_find_goto
3b4d8     4C 0B 01 00 | 	long	@_do_slow_goto
3b4dc     EC 2C 01 00 | 	long	@_do_nothing
3b4e0     08 BC 00 00 | 	long	@_test_csave
3b4e4     4C 58 01 00 | 	long	@_do_save
3b4e8     C0 18 01 00 | 	long	@_do_load
3b4ec     D4 33 01 00 | 	long	@_do_pinwrite
3b4f0     B8 6B 01 00 | 	long	@_do_waitms
3b4f4     EC 6C 01 00 | 	long	@_do_waitvbl
3b4f8     3C 0E 01 00 | 	long	@_do_if
3b4fc     18 F6 00 00 | 	long	@_do_else
3b500     58 81 01 00 | 	long	@_do_eq
3b504     F8 87 01 00 | 	long	@_do_ge
3b508     A8 91 01 00 | 	long	@_do_le
3b50c     D0 8C 01 00 | 	long	@_do_gt
3b510     80 96 01 00 | 	long	@_do_lt
3b514     34 A5 01 00 | 	long	@_do_ne
3b518     08 52 01 00 | 	long	@_do_rnd
3b51c     CC C8 00 00 | 	long	@_do_brun
3b520     70 C4 00 00 | 	long	@_do_beep
3b524     A8 ED 00 00 | 	long	@_do_dir
3b528     08 30 01 00 | 	long	@_do_paper
3b52c     F8 11 01 00 | 	long	@_do_ink
3b530     50 F9 00 00 | 	long	@_do_font
3b534     0C 22 01 00 | 	long	@_do_mode
3b538     B8 25 01 00 | 	long	@_do_mouse
3b53c     CC 06 01 00 | 	long	@_do_gettime
3b540     F0 D5 00 00 | 	long	@_do_cursor
3b544     B0 D3 00 00 | 	long	@_do_click
3b548     74 26 01 00 | 	long	@_do_mousex
3b54c     B8 26 01 00 | 	long	@_do_mousey
3b550     EC 25 01 00 | 	long	@_do_mousek
3b554     30 26 01 00 | 	long	@_do_mousew
3b558     94 61 01 00 | 	long	@_do_sin
3b55c     7C 64 01 00 | 	long	@_do_stick
3b560     00 66 01 00 | 	long	@_do_strig
3b564     A0 62 01 00 | 	long	@_do_sprite
3b568     0C EA 00 00 | 	long	@_do_defsprite
3b56c     7C 05 01 00 | 	long	@_do_getpixel
3b570     94 6B 01 00 | 	long	@_do_waitclock
3b574     F8 9E 01 00 | 	long	@_do_negative
3b578     D4 4E 01 00 | 	long	@_do_rdpin
3b57c     24 54 01 00 | 	long	@_do_rqpin
3b580     00 32 01 00 | 	long	@_do_pinread
3b584     F8 6C 01 00 | 	long	@_do_wrpin
3b588     78 6D 01 00 | 	long	@_do_wxpin
3b58c     F8 6D 01 00 | 	long	@_do_wypin
3b590     40 31 01 00 | 	long	@_do_pinfloat
3b594     C0 31 01 00 | 	long	@_do_pinlo
3b598     80 31 01 00 | 	long	@_do_pinhi
3b59c     84 32 01 00 | 	long	@_do_pinstart
3b5a0     94 33 01 00 | 	long	@_do_pintoggle
3b5a4     78 42 01 00 | 	long	@_do_position
3b5a8     D0 D4 00 00 | 	long	@_do_cos
3b5ac     84 67 01 00 | 	long	@_do_tan
3b5b0     5C C3 00 00 | 	long	@_do_atn
3b5b4     50 C2 00 00 | 	long	@_do_asin
3b5b8     EC BF 00 00 | 	long	@_do_acos
3b5bc     8C 63 01 00 | 	long	@_do_sqr
3b5c0     3C F8 00 00 | 	long	@_do_fill
3b5c4     20 E1 00 00 | 	long	@_do_defsnd
3b5c8     24 D6 00 00 | 	long	@_do_defenv
3b5cc     AC 4E 01 00 | 	long	@_do_rad
3b5d0     80 ED 00 00 | 	long	@_do_deg
3b5d4     78 12 01 00 | 	long	@_do_int
3b5d8     5C 34 01 00 | 	long	@_do_play
3b5dc     EC 5B 01 00 | 	long	@_do_setdelay
3b5e0     94 5C 01 00 | 	long	@_do_setenv
3b5e4     3C 5D 01 00 | 	long	@_do_setlen
3b5e8     E4 5D 01 00 | 	long	@_do_setpan
3b5ec     34 5F 01 00 | 	long	@_do_setvol
3b5f0     DC 5F 01 00 | 	long	@_do_setwave
3b5f4     8C 5E 01 00 | 	long	@_do_setsustain
3b5f8     40 4F 01 00 | 	long	@_do_release
3b5fc     6C 03 01 00 | 	long	@_do_getenvsustain
3b600     68 41 01 00 | 	long	@_do_poke
3b604     4C F4 00 00 | 	long	@_do_dpoke
3b608     70 1F 01 00 | 	long	@_do_lpoke
3b60c     90 30 01 00 | 	long	@_do_peek
3b610     A0 F3 00 00 | 	long	@_do_dpeek
3b614     C4 1E 01 00 | 	long	@_do_lpeek
3b618     64 FD 00 00 | 	long	@_do_fre
3b61c     78 04 01 00 | 	long	@_do_getnotevalue
3b620     30 7A 01 00 | 	long	@_do_getaddr
3b624     20 0F 01 00 | 	long	@_do_inkey
3b628     6C BF 00 00 | 	long	@_do_abs
3b62c     DC 0C 01 00 | 	long	@_do_hex
3b630     84 C5 00 00 | 	long	@_do_bin
3b634     90 68 01 00 | 	long	@_do_val
3b638     3C D1 00 00 | 	long	@_do_chr
3b63c     F8 C0 00 00 | 	long	@_do_asc
3b640     34 13 01 00 | 	long	@_do_left
3b644     84 50 01 00 | 	long	@_do_right
3b648     48 20 01 00 | 	long	@_do_mid
3b64c     B8 14 01 00 | 	long	@_do_len
3b650     34 07 01 00 | 	long	@_do_gosub
3b654     D8 4F 01 00 | 	long	@_do_return
3b658     3C F6 00 00 | 	long	@_do_end
3b65c     40 42 01 00 | 	long	@_do_pop
3b660     4C 1D 01 00 | 	long	@_do_log
3b664     30 CF 00 00 | 	long	@_do_changevol
3b668     10 D0 00 00 | 	long	@_do_changewav
3b66c     20 CE 00 00 | 	long	@_do_changepan
3b670     04 CB 00 00 | 	long	@_do_changefreq
3b674     84 60 01 00 | 	long	@_do_shutup
3b678     D0 53 01 00 | 	long	@_do_round
3b67c     70 F6 00 00 | 	long	@_do_enter
3b680     F0 2C 01 00 | 	long	@_do_open
3b684     DC D3 00 00 | 	long	@_do_close
3b688     C8 FD 00 00 | 	long	@_do_get
3b68c     6C 49 01 00 | 	long	@_do_put
3b690     28 F0 01 00 | 	long	@_hg010b_spin2_putchar
3b694     A4 FF 02 00 | 	long	@__struct___bas_wrap_sender_tx
3b698     E8 FF 02 00 | 	long	@__struct___bas_wrap_sender_rx
3b69c     30 00 03 00 | 	long	@__struct___bas_wrap_sender_close
3b6a0     D4 FE 02 00 | 	long	@__struct__s_vfs_file_t_putchar
3b6a4     44 FF 02 00 | 	long	@__struct__s_vfs_file_t_getchar
3b6a8     8C FE 02 00 | 	long	@___strs_cl_pfunc
3b6ac     20 5C 02 00 | 	long	@__system____root_opendir
3b6b0     BC 5C 02 00 | 	long	@__system____root_closedir
3b6b4     38 5C 02 00 | 	long	@__system____root_readdir
3b6b8     C4 5C 02 00 | 	long	@__system____root_stat
3b6bc     10 55 02 00 | 	long	@__system____default_putc
3b6c0     94 54 02 00 | 	long	@__system____default_getc
3b6c4     B8 55 02 00 | 	long	@__system____default_flush
3b6c8     90 E9 02 00 | 	long	@_fatfs_cc_v_close
3b6cc     AC ED 02 00 | 	long	@_fatfs_cc_v_read
3b6d0     C0 EE 02 00 | 	long	@_fatfs_cc_v_write
3b6d4     A0 EF 02 00 | 	long	@_fatfs_cc_v_lseek
3b6d8     28 F0 02 00 | 	long	@_fatfs_cc_v_ioctl
3b6dc     7C F0 02 00 | 	long	@_fatfs_cc_v_open
3b6e0     F4 E8 02 00 | 	long	@_fatfs_cc_v_creat
3b6e4     D4 E9 02 00 | 	long	@_fatfs_cc_v_opendir
3b6e8     48 EA 02 00 | 	long	@_fatfs_cc_v_closedir
3b6ec     88 EA 02 00 | 	long	@_fatfs_cc_v_readdir
3b6f0     BC EB 02 00 | 	long	@_fatfs_cc_v_stat
3b6f4     3C F0 02 00 | 	long	@_fatfs_cc_v_mkdir
3b6f8     5C F0 02 00 | 	long	@_fatfs_cc_v_rmdir
3b6fc     4C F0 02 00 | 	long	@_fatfs_cc_v_remove
3b700     6C F0 02 00 | 	long	@_fatfs_cc_v_rename
3b704     8C F1 02 00 | 	long	@_fatfs_cc_v_init
3b708     94 F1 02 00 | 	long	@_fatfs_cc_v_deinit
3b70c     28 09 02 00 | 	long	@__system___tx
3b710     68 09 02 00 | 	long	@__system___rx
3b714     30 68 02 00 | 	long	@__system___rxtxioctl_0697
3b718     88 68 02 00 | 	long	@__system____dummy_flush_0698
3b71c     5C F1 02 00 | 	long	@_fatfs_cc_v_flush
3b720                 | __heap_base
3b720     00 00 00 00 
      ...             
6a520     00 00 00 00 
6a524     00 00 00 00 | 	long	0[48002]
6a528                 | objmem
6a528     00 00 00 00 
      ...             
74948     00 00 00 00 
7494c     00 00 00 00 | 	long	0[10506]
74950                 | stackspace
74950     00 00 00 00 | 	long	0[1]
74954 100             | 	org	COG_BSS_START
74954 100             | _var01
74954 100             | 	res	1
74954 101             | _var02
74954 101             | 	res	1
74954 102             | _var03
74954 102             | 	res	1
74954 103             | _var04
74954 103             | 	res	1
74954 104             | _var05
74954 104             | 	res	1
74954 105             | _var06
74954 105             | 	res	1
74954 106             | _var07
74954 106             | 	res	1
74954 107             | _var08
74954 107             | 	res	1
74954 108             | _var09
74954 108             | 	res	1
74954 109             | arg01
74954 109             | 	res	1
74954 10a             | arg02
74954 10a             | 	res	1
74954 10b             | arg03
74954 10b             | 	res	1
74954 10c             | arg04
74954 10c             | 	res	1
74954 10d             | arg05
74954 10d             | 	res	1
74954 10e             | arg06
74954 10e             | 	res	1
74954 10f             | local01
74954 10f             | 	res	1
74954 110             | local02
74954 110             | 	res	1
74954 111             | local03
74954 111             | 	res	1
74954 112             | local04
74954 112             | 	res	1
74954 113             | local05
74954 113             | 	res	1
74954 114             | local06
74954 114             | 	res	1
74954 115             | local07
74954 115             | 	res	1
74954 116             | local08
74954 116             | 	res	1
74954 117             | local09
74954 117             | 	res	1
74954 118             | local10
74954 118             | 	res	1
74954 119             | local11
74954 119             | 	res	1
74954 11a             | local12
74954 11a             | 	res	1
74954 11b             | local13
74954 11b             | 	res	1
74954 11c             | local14
74954 11c             | 	res	1
74954 11d             | local15
74954 11d             | 	res	1
74954 11e             | local16
74954 11e             | 	res	1
74954 11f             | local17
74954 11f             | 	res	1
74954 120             | local18
74954 120             | 	res	1
74954 121             | local19
74954 121             | 	res	1
74954 122             | local20
74954 122             | 	res	1
74954 123             | local21
74954 123             | 	res	1
74954 124             | local22
74954 124             | 	res	1
74954 125             | local23
74954 125             | 	res	1
74954 126             | local24
74954 126             | 	res	1
74954 127             | local25
74954 127             | 	res	1
74954 128             | local26
74954 128             | 	res	1
74954 129             | local27
74954 129             | 	res	1
74954 12a             | local28
74954 12a             | 	res	1
74954 12b             | local29
74954 12b             | 	res	1
74954 12c             | local30
74954 12c             | 	res	1
74954 12d             | local31
74954 12d             | 	res	1
74954 12e             | local32
74954 12e             | 	res	1
74954 12f             | local33
74954 12f             | 	res	1
74954 130             | local34
74954 130             | 	res	1
74954 131             | local35
74954 131             | 	res	1
74954 132             | local36
74954 132             | 	res	1
74954 133             | local37
74954 133             | 	res	1
74954 134             | local38
74954 134             | 	res	1
74954 135             | local39
74954 135             | 	res	1
74954 136             | local40
74954 136             | 	res	1
74954 137             | local41
74954 137             | 	res	1
74954 138             | local42
74954 138             | 	res	1
74954 139             | local43
74954 139             | 	res	1
74954 13a             | local44
74954 13a             | 	res	1
74954 13b             | local45
74954 13b             | 	res	1
74954 13c             | local46
74954 13c             | 	res	1
74954 13d             | local47
74954 13d             | 	res	1
74954 13e             | muldiva_
74954 13e             | 	res	1
74954 13f             | muldivb_
74954 13f             | 	res	1
74954 140             | 	fit	480
74954 140             | 
